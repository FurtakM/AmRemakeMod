// export JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export Powell ; export others13 ; export Burlak , Masha ; export Gnyevko , Titov , Xavier , Belkov , Lipshchin ; export resources , vehicles ; export AmSciSib ; export spawnBurlak , burlakStatus ; export radationResearched ; export radarOnSpot ; export sibDeposits ; export sibDestroyedCounter ; export arabianAttacksCounter ; export arControlTower , arDriver ; export mission_prefix ; export eventVar1 , eventVar2 , eventVar3 , eventVar4 , eventVar5 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// spawnBurlak = 0 ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: LD_INT 0
  15: ST_TO_ADDR
// burlakStatus = 0 ;
  16: LD_ADDR_EXP 28
  20: PUSH
  21: LD_INT 0
  23: ST_TO_ADDR
// radarOnSpot = 0 ;
  24: LD_ADDR_EXP 30
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// radationResearched = 0 ;
  32: LD_ADDR_EXP 29
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// sibDestroyedCounter = 0 ;
  40: LD_ADDR_EXP 32
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// sibDeposits = [ [ 91 , 111 ] , [ 23 , 37 ] ] ;
  48: LD_ADDR_EXP 31
  52: PUSH
  53: LD_INT 91
  55: PUSH
  56: LD_INT 111
  58: PUSH
  59: EMPTY
  60: LIST
  61: LIST
  62: PUSH
  63: LD_INT 23
  65: PUSH
  66: LD_INT 37
  68: PUSH
  69: EMPTY
  70: LIST
  71: LIST
  72: PUSH
  73: EMPTY
  74: LIST
  75: LIST
  76: ST_TO_ADDR
// arabianAttacksCounter = 0 ;
  77: LD_ADDR_EXP 33
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// resources = [ ] ;
  85: LD_ADDR_EXP 24
  89: PUSH
  90: EMPTY
  91: ST_TO_ADDR
// vehicles = [ ] ;
  92: LD_ADDR_EXP 25
  96: PUSH
  97: EMPTY
  98: ST_TO_ADDR
// eventVar1 = 0 ;
  99: LD_ADDR_EXP 37
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// eventVar2 = 0 ;
 107: LD_ADDR_EXP 38
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// eventVar3 = 0 ;
 115: LD_ADDR_EXP 39
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar4 = 0 ;
 123: LD_ADDR_EXP 40
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar5 = 0 ;
 131: LD_ADDR_EXP 41
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// mission_prefix = 13f_ ;
 139: LD_ADDR_EXP 36
 143: PUSH
 144: LD_STRING 13f_
 146: ST_TO_ADDR
// debugMode = 0 ;
 147: LD_ADDR_EXP 42
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// PrepareVehicles ;
 155: CALL 1163 0 0
// PrepareHeroes ;
 159: CALL 489 0 0
// PrepareAmericansRandom ;
 163: CALL 1067 0 0
// PrepareDifficulty ;
 167: CALL 6126 0 0
// end ;
 171: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 172: LD_EXP 42
 176: PUSH
 177: LD_INT 1
 179: EQUAL
 180: IFFALSE 486
 182: GO 184
 184: DISABLE
 185: LD_INT 0
 187: PPUSH
// begin enable ;
 188: ENABLE
// fogoff ( true ) ;
 189: LD_INT 1
 191: PPUSH
 192: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 196: LD_ADDR_VAR 0 1
 200: PUSH
 201: LD_INT 22
 203: PUSH
 204: LD_INT 1
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 21
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PPUSH
 225: CALL_OW 69
 229: PUSH
 230: FOR_IN
 231: IFFALSE 247
// SetLives ( i , 1000 ) ;
 233: LD_VAR 0 1
 237: PPUSH
 238: LD_INT 1000
 240: PPUSH
 241: CALL_OW 234
 245: GO 230
 247: POP
 248: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 249: LD_ADDR_VAR 0 1
 253: PUSH
 254: LD_INT 22
 256: PUSH
 257: LD_INT 1
 259: PUSH
 260: EMPTY
 261: LIST
 262: LIST
 263: PUSH
 264: LD_INT 2
 266: PUSH
 267: LD_INT 30
 269: PUSH
 270: LD_INT 0
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 30
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: LIST
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PPUSH
 296: CALL_OW 69
 300: PUSH
 301: FOR_IN
 302: IFFALSE 326
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 304: LD_VAR 0 1
 308: PPUSH
 309: CALL_OW 274
 313: PPUSH
 314: LD_INT 1
 316: PPUSH
 317: LD_INT 9999
 319: PPUSH
 320: CALL_OW 277
 324: GO 301
 326: POP
 327: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 328: LD_ADDR_VAR 0 1
 332: PUSH
 333: LD_INT 22
 335: PUSH
 336: LD_INT 1
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 30
 348: PUSH
 349: LD_INT 0
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 30
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PPUSH
 375: CALL_OW 69
 379: PUSH
 380: FOR_IN
 381: IFFALSE 405
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 383: LD_VAR 0 1
 387: PPUSH
 388: CALL_OW 274
 392: PPUSH
 393: LD_INT 2
 395: PPUSH
 396: LD_INT 9999
 398: PPUSH
 399: CALL_OW 277
 403: GO 380
 405: POP
 406: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 407: LD_ADDR_VAR 0 1
 411: PUSH
 412: LD_INT 22
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 30
 427: PUSH
 428: LD_INT 0
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 30
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PPUSH
 454: CALL_OW 69
 458: PUSH
 459: FOR_IN
 460: IFFALSE 484
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 462: LD_VAR 0 1
 466: PPUSH
 467: CALL_OW 274
 471: PPUSH
 472: LD_INT 3
 474: PPUSH
 475: LD_INT 9999
 477: PPUSH
 478: CALL_OW 277
 482: GO 459
 484: POP
 485: POP
// end ; end_of_file
 486: PPOPN 1
 488: END
// export function PrepareHeroes ; var tmp , tmp2 , i ; begin
 489: LD_INT 0
 491: PPUSH
 492: PPUSH
 493: PPUSH
 494: PPUSH
// uc_side = 1 ;
 495: LD_ADDR_OWVAR 20
 499: PUSH
 500: LD_INT 1
 502: ST_TO_ADDR
// JMM = PrepareUnit ( 13c_JMM , true ) ;
 503: LD_ADDR_EXP 1
 507: PUSH
 508: LD_STRING 13c_JMM
 510: PPUSH
 511: LD_INT 1
 513: PPUSH
 514: CALL 5877 0 2
 518: ST_TO_ADDR
// Stevens = PrepareUnit ( 13c_Stevens , true ) ;
 519: LD_ADDR_EXP 2
 523: PUSH
 524: LD_STRING 13c_Stevens
 526: PPUSH
 527: LD_INT 1
 529: PPUSH
 530: CALL 5877 0 2
 534: ST_TO_ADDR
// Lisa = PrepareUnit ( 13c_Lisa , true ) ;
 535: LD_ADDR_EXP 3
 539: PUSH
 540: LD_STRING 13c_Lisa
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL 5877 0 2
 550: ST_TO_ADDR
// Donaldson = PrepareUnit ( 13c_Donaldson , true ) ;
 551: LD_ADDR_EXP 4
 555: PUSH
 556: LD_STRING 13c_Donaldson
 558: PPUSH
 559: LD_INT 1
 561: PPUSH
 562: CALL 5877 0 2
 566: ST_TO_ADDR
// Bobby = PrepareUnit ( 13c_Bobby , true ) ;
 567: LD_ADDR_EXP 5
 571: PUSH
 572: LD_STRING 13c_Bobby
 574: PPUSH
 575: LD_INT 1
 577: PPUSH
 578: CALL 5877 0 2
 582: ST_TO_ADDR
// Cyrus = PrepareUnit ( 13c_Cyrus , true ) ;
 583: LD_ADDR_EXP 6
 587: PUSH
 588: LD_STRING 13c_Cyrus
 590: PPUSH
 591: LD_INT 1
 593: PPUSH
 594: CALL 5877 0 2
 598: ST_TO_ADDR
// Denis = PrepareUnit ( 13c_Denis , true ) ;
 599: LD_ADDR_EXP 7
 603: PUSH
 604: LD_STRING 13c_Denis
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL 5877 0 2
 614: ST_TO_ADDR
// Brown = PrepareUnit ( 13c_Brown , true ) ;
 615: LD_ADDR_EXP 8
 619: PUSH
 620: LD_STRING 13c_Brown
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 5877 0 2
 630: ST_TO_ADDR
// Gladstone = PrepareUnit ( 13c_Gladstone , true ) ;
 631: LD_ADDR_EXP 9
 635: PUSH
 636: LD_STRING 13c_Gladstone
 638: PPUSH
 639: LD_INT 1
 641: PPUSH
 642: CALL 5877 0 2
 646: ST_TO_ADDR
// Houten = PrepareUnit ( 13c_Houten , true ) ;
 647: LD_ADDR_EXP 10
 651: PUSH
 652: LD_STRING 13c_Houten
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: CALL 5877 0 2
 662: ST_TO_ADDR
// Cornel = PrepareUnit ( 13c_Cornel , true ) ;
 663: LD_ADDR_EXP 11
 667: PUSH
 668: LD_STRING 13c_Cornel
 670: PPUSH
 671: LD_INT 1
 673: PPUSH
 674: CALL 5877 0 2
 678: ST_TO_ADDR
// Gary = PrepareUnit ( 13c_Gary , true ) ;
 679: LD_ADDR_EXP 12
 683: PUSH
 684: LD_STRING 13c_Gary
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: CALL 5877 0 2
 694: ST_TO_ADDR
// Frank = PrepareUnit ( 13c_Frank , true ) ;
 695: LD_ADDR_EXP 13
 699: PUSH
 700: LD_STRING 13c_Frank
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL 5877 0 2
 710: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 13c_Kikuchi , true ) ;
 711: LD_ADDR_EXP 14
 715: PUSH
 716: LD_STRING 13c_Kikuchi
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL 5877 0 2
 726: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 727: LD_ADDR_EXP 15
 731: PUSH
 732: LD_STRING Powell
 734: PPUSH
 735: LD_INT 0
 737: PPUSH
 738: CALL 5877 0 2
 742: ST_TO_ADDR
// tmp := [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ] ;
 743: LD_ADDR_VAR 0 2
 747: PUSH
 748: LD_EXP 1
 752: PUSH
 753: LD_EXP 2
 757: PUSH
 758: LD_EXP 3
 762: PUSH
 763: LD_EXP 4
 767: PUSH
 768: LD_EXP 5
 772: PUSH
 773: LD_EXP 6
 777: PUSH
 778: LD_EXP 7
 782: PUSH
 783: LD_EXP 8
 787: PUSH
 788: LD_EXP 9
 792: PUSH
 793: LD_EXP 10
 797: PUSH
 798: LD_EXP 11
 802: PUSH
 803: LD_EXP 12
 807: PUSH
 808: LD_EXP 13
 812: PUSH
 813: LD_EXP 14
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: LIST
 822: LIST
 823: LIST
 824: LIST
 825: LIST
 826: LIST
 827: LIST
 828: LIST
 829: LIST
 830: LIST
 831: LIST
 832: LIST
 833: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_control , control_manual ] , [ f_type , unit_vehicle ] ] ) ;
 834: LD_ADDR_VAR 0 3
 838: PUSH
 839: LD_INT 22
 841: PUSH
 842: LD_INT 1
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: PUSH
 849: LD_INT 33
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 21
 861: PUSH
 862: LD_INT 2
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: ST_TO_ADDR
// for i = tmp downto 1 do
 879: LD_ADDR_VAR 0 4
 883: PUSH
 884: DOUBLE
 885: LD_VAR 0 2
 889: INC
 890: ST_TO_ADDR
 891: LD_INT 1
 893: PUSH
 894: FOR_DOWNTO
 895: IFFALSE 932
// if not tmp [ i ] then
 897: LD_VAR 0 2
 901: PUSH
 902: LD_VAR 0 4
 906: ARRAY
 907: NOT
 908: IFFALSE 930
// tmp := Delete ( tmp , i ) ;
 910: LD_ADDR_VAR 0 2
 914: PUSH
 915: LD_VAR 0 2
 919: PPUSH
 920: LD_VAR 0 4
 924: PPUSH
 925: CALL_OW 3
 929: ST_TO_ADDR
 930: GO 894
 932: POP
 933: POP
// for i = 1 to tmp do
 934: LD_ADDR_VAR 0 4
 938: PUSH
 939: DOUBLE
 940: LD_INT 1
 942: DEC
 943: ST_TO_ADDR
 944: LD_VAR 0 2
 948: PUSH
 949: FOR_TO
 950: IFFALSE 980
// PlaceHumanInUnit ( tmp [ i ] , tmp2 [ i ] ) ;
 952: LD_VAR 0 2
 956: PUSH
 957: LD_VAR 0 4
 961: ARRAY
 962: PPUSH
 963: LD_VAR 0 3
 967: PUSH
 968: LD_VAR 0 4
 972: ARRAY
 973: PPUSH
 974: CALL_OW 52
 978: GO 949
 980: POP
 981: POP
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 2 ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_weapon , us_crane ] ] ) = 0 then
 982: LD_INT 22
 984: PUSH
 985: LD_INT 1
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PUSH
 992: LD_INT 25
 994: PUSH
 995: LD_INT 2
 997: PUSH
 998: EMPTY
 999: LIST
1000: LIST
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: PUSH
1011: LD_INT 0
1013: EQUAL
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 34
1027: PUSH
1028: LD_INT 13
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: PUSH
1044: LD_INT 0
1046: EQUAL
1047: AND
1048: IFFALSE 1062
// SetClass ( JMM , 2 ) ;
1050: LD_EXP 1
1054: PPUSH
1055: LD_INT 2
1057: PPUSH
1058: CALL_OW 336
// end ;
1062: LD_VAR 0 1
1066: RET
// export function PrepareAmericansRandom ; var i ; begin
1067: LD_INT 0
1069: PPUSH
1070: PPUSH
// uc_side = 1 ;
1071: LD_ADDR_OWVAR 20
1075: PUSH
1076: LD_INT 1
1078: ST_TO_ADDR
// others13 = CreateCharacterSet ( 13c_others ) ;
1079: LD_ADDR_EXP 16
1083: PUSH
1084: LD_STRING 13c_others
1086: PPUSH
1087: CALL_OW 31
1091: ST_TO_ADDR
// for i in others13 do
1092: LD_ADDR_VAR 0 2
1096: PUSH
1097: LD_EXP 16
1101: PUSH
1102: FOR_IN
1103: IFFALSE 1156
// PlaceHumanInUnit ( i , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
1105: LD_VAR 0 2
1109: PPUSH
1110: LD_INT 22
1112: PUSH
1113: LD_INT 1
1115: PUSH
1116: EMPTY
1117: LIST
1118: LIST
1119: PUSH
1120: LD_INT 21
1122: PUSH
1123: LD_INT 2
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 58
1132: PUSH
1133: EMPTY
1134: LIST
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PPUSH
1141: CALL_OW 69
1145: PUSH
1146: LD_INT 1
1148: ARRAY
1149: PPUSH
1150: CALL_OW 52
1154: GO 1102
1156: POP
1157: POP
// end ;
1158: LD_VAR 0 1
1162: RET
// export function PrepareVehicles ; var i , j , veh , vehicles , cargoList ; begin
1163: LD_INT 0
1165: PPUSH
1166: PPUSH
1167: PPUSH
1168: PPUSH
1169: PPUSH
1170: PPUSH
// vehicles = LoadVariable ( 13_VehiclesIn13_1 , [ ] ) ;
1171: LD_ADDR_VAR 0 5
1175: PUSH
1176: LD_STRING 13_VehiclesIn13_1
1178: PPUSH
1179: EMPTY
1180: PPUSH
1181: CALL_OW 30
1185: ST_TO_ADDR
// resources = LoadVariable ( 13_ResourcesInCargo13_1 , [ ] ) ;
1186: LD_ADDR_EXP 24
1190: PUSH
1191: LD_STRING 13_ResourcesInCargo13_1
1193: PPUSH
1194: EMPTY
1195: PPUSH
1196: CALL_OW 30
1200: ST_TO_ADDR
// cargoList = [ ] ;
1201: LD_ADDR_VAR 0 6
1205: PUSH
1206: EMPTY
1207: ST_TO_ADDR
// uc_side = 1 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// if vehicles > 0 then
1216: LD_VAR 0 5
1220: PUSH
1221: LD_INT 0
1223: GREATER
1224: IFFALSE 1579
// begin for i := 1 to vehicles do
1226: LD_ADDR_VAR 0 2
1230: PUSH
1231: DOUBLE
1232: LD_INT 1
1234: DEC
1235: ST_TO_ADDR
1236: LD_VAR 0 5
1240: PUSH
1241: FOR_TO
1242: IFFALSE 1391
// begin uc_nation = vehicles [ i ] [ 1 ] ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_VAR 0 5
1253: PUSH
1254: LD_VAR 0 2
1258: ARRAY
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: ST_TO_ADDR
// vc_chassis = vehicles [ i ] [ 2 ] ;
1264: LD_ADDR_OWVAR 37
1268: PUSH
1269: LD_VAR 0 5
1273: PUSH
1274: LD_VAR 0 2
1278: ARRAY
1279: PUSH
1280: LD_INT 2
1282: ARRAY
1283: ST_TO_ADDR
// vc_engine = vehicles [ i ] [ 3 ] ;
1284: LD_ADDR_OWVAR 39
1288: PUSH
1289: LD_VAR 0 5
1293: PUSH
1294: LD_VAR 0 2
1298: ARRAY
1299: PUSH
1300: LD_INT 3
1302: ARRAY
1303: ST_TO_ADDR
// vc_control = vehicles [ i ] [ 4 ] ;
1304: LD_ADDR_OWVAR 38
1308: PUSH
1309: LD_VAR 0 5
1313: PUSH
1314: LD_VAR 0 2
1318: ARRAY
1319: PUSH
1320: LD_INT 4
1322: ARRAY
1323: ST_TO_ADDR
// vc_weapon = vehicles [ i ] [ 5 ] ;
1324: LD_ADDR_OWVAR 40
1328: PUSH
1329: LD_VAR 0 5
1333: PUSH
1334: LD_VAR 0 2
1338: ARRAY
1339: PUSH
1340: LD_INT 5
1342: ARRAY
1343: ST_TO_ADDR
// vc_fuel_battery = 40 ;
1344: LD_ADDR_OWVAR 41
1348: PUSH
1349: LD_INT 40
1351: ST_TO_ADDR
// veh = CreateVehicle ;
1352: LD_ADDR_VAR 0 4
1356: PUSH
1357: CALL_OW 45
1361: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
1362: LD_VAR 0 4
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1374: LD_VAR 0 4
1378: PPUSH
1379: LD_INT 2
1381: PPUSH
1382: LD_INT 0
1384: PPUSH
1385: CALL_OW 49
// end ;
1389: GO 1241
1391: POP
1392: POP
// cargoList = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , us_cargo_bay ] ] ) ;
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 1
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PUSH
1408: LD_INT 21
1410: PUSH
1411: LD_INT 2
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 34
1420: PUSH
1421: LD_INT 12
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: EMPTY
1429: LIST
1430: LIST
1431: LIST
1432: PPUSH
1433: CALL_OW 69
1437: ST_TO_ADDR
// if cargoList > 0 then
1438: LD_VAR 0 6
1442: PUSH
1443: LD_INT 0
1445: GREATER
1446: IFFALSE 1579
// for i = 1 to cargoList do
1448: LD_ADDR_VAR 0 2
1452: PUSH
1453: DOUBLE
1454: LD_INT 1
1456: DEC
1457: ST_TO_ADDR
1458: LD_VAR 0 6
1462: PUSH
1463: FOR_TO
1464: IFFALSE 1577
// begin if resources > 0 then
1466: LD_EXP 24
1470: PUSH
1471: LD_INT 0
1473: GREATER
1474: IFFALSE 1575
// begin AddCargo ( cargoList [ i ] , 1 , resources [ i ] [ 1 ] ) ;
1476: LD_VAR 0 6
1480: PUSH
1481: LD_VAR 0 2
1485: ARRAY
1486: PPUSH
1487: LD_INT 1
1489: PPUSH
1490: LD_EXP 24
1494: PUSH
1495: LD_VAR 0 2
1499: ARRAY
1500: PUSH
1501: LD_INT 1
1503: ARRAY
1504: PPUSH
1505: CALL_OW 291
// AddCargo ( cargoList [ i ] , 2 , resources [ i ] [ 2 ] ) ;
1509: LD_VAR 0 6
1513: PUSH
1514: LD_VAR 0 2
1518: ARRAY
1519: PPUSH
1520: LD_INT 2
1522: PPUSH
1523: LD_EXP 24
1527: PUSH
1528: LD_VAR 0 2
1532: ARRAY
1533: PUSH
1534: LD_INT 2
1536: ARRAY
1537: PPUSH
1538: CALL_OW 291
// AddCargo ( cargoList [ i ] , 3 , resources [ i ] [ 3 ] ) ;
1542: LD_VAR 0 6
1546: PUSH
1547: LD_VAR 0 2
1551: ARRAY
1552: PPUSH
1553: LD_INT 3
1555: PPUSH
1556: LD_EXP 24
1560: PUSH
1561: LD_VAR 0 2
1565: ARRAY
1566: PUSH
1567: LD_INT 3
1569: ARRAY
1570: PPUSH
1571: CALL_OW 291
// end ; end ;
1575: GO 1463
1577: POP
1578: POP
// end ; end ;
1579: LD_VAR 0 1
1583: RET
// export function PowellSupport ; var i , veh , un ; begin
1584: LD_INT 0
1586: PPUSH
1587: PPUSH
1588: PPUSH
1589: PPUSH
// for i = 1 to 3 do
1590: LD_ADDR_VAR 0 2
1594: PUSH
1595: DOUBLE
1596: LD_INT 1
1598: DEC
1599: ST_TO_ADDR
1600: LD_INT 3
1602: PUSH
1603: FOR_TO
1604: IFFALSE 1805
// begin uc_nation = 1 ;
1606: LD_ADDR_OWVAR 21
1610: PUSH
1611: LD_INT 1
1613: ST_TO_ADDR
// uc_side = 1 ;
1614: LD_ADDR_OWVAR 20
1618: PUSH
1619: LD_INT 1
1621: ST_TO_ADDR
// vc_engine = 3 ;
1622: LD_ADDR_OWVAR 39
1626: PUSH
1627: LD_INT 3
1629: ST_TO_ADDR
// vc_control = 1 ;
1630: LD_ADDR_OWVAR 38
1634: PUSH
1635: LD_INT 1
1637: ST_TO_ADDR
// vc_weapon = [ 9 , 5 , 4 , 7 , 6 ] [ Rand ( 1 , 5 ) ] ;
1638: LD_ADDR_OWVAR 40
1642: PUSH
1643: LD_INT 9
1645: PUSH
1646: LD_INT 5
1648: PUSH
1649: LD_INT 4
1651: PUSH
1652: LD_INT 7
1654: PUSH
1655: LD_INT 6
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: LIST
1664: PUSH
1665: LD_INT 1
1667: PPUSH
1668: LD_INT 5
1670: PPUSH
1671: CALL_OW 12
1675: ARRAY
1676: ST_TO_ADDR
// if vc_weapon = 6 then
1677: LD_OWVAR 40
1681: PUSH
1682: LD_INT 6
1684: EQUAL
1685: IFFALSE 1697
// vc_chassis = 4 else
1687: LD_ADDR_OWVAR 37
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
1695: GO 1705
// vc_chassis = 3 ;
1697: LD_ADDR_OWVAR 37
1701: PUSH
1702: LD_INT 3
1704: ST_TO_ADDR
// veh = CreateVehicle ;
1705: LD_ADDR_VAR 0 3
1709: PUSH
1710: CALL_OW 45
1714: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1715: LD_VAR 0 3
1719: PPUSH
1720: LD_INT 2
1722: PPUSH
1723: LD_INT 0
1725: PPUSH
1726: CALL_OW 49
// SetDir ( veh , 1 ) ;
1730: LD_VAR 0 3
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: CALL_OW 233
// hc_gallery =  ;
1742: LD_ADDR_OWVAR 33
1746: PUSH
1747: LD_STRING 
1749: ST_TO_ADDR
// hc_name =  ;
1750: LD_ADDR_OWVAR 26
1754: PUSH
1755: LD_STRING 
1757: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( 7 , 10 ) ) ;
1758: LD_INT 0
1760: PPUSH
1761: LD_INT 3
1763: PPUSH
1764: LD_INT 7
1766: PPUSH
1767: LD_INT 10
1769: PPUSH
1770: CALL_OW 12
1774: PPUSH
1775: CALL_OW 380
// un = CreateHuman ;
1779: LD_ADDR_VAR 0 4
1783: PUSH
1784: CALL_OW 44
1788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1789: LD_VAR 0 4
1793: PPUSH
1794: LD_VAR 0 3
1798: PPUSH
1799: CALL_OW 52
// end ;
1803: GO 1603
1805: POP
1806: POP
// end ; end_of_file
1807: LD_VAR 0 1
1811: RET
// export function PrepareBurlak ; begin
1812: LD_INT 0
1814: PPUSH
// uc_side = 7 ;
1815: LD_ADDR_OWVAR 20
1819: PUSH
1820: LD_INT 7
1822: ST_TO_ADDR
// uc_nation = 3 ;
1823: LD_ADDR_OWVAR 21
1827: PUSH
1828: LD_INT 3
1830: ST_TO_ADDR
// vc_engine = 3 ;
1831: LD_ADDR_OWVAR 39
1835: PUSH
1836: LD_INT 3
1838: ST_TO_ADDR
// vc_control = 1 ;
1839: LD_ADDR_OWVAR 38
1843: PUSH
1844: LD_INT 1
1846: ST_TO_ADDR
// vc_weapon = 46 ;
1847: LD_ADDR_OWVAR 40
1851: PUSH
1852: LD_INT 46
1854: ST_TO_ADDR
// vc_chassis = 24 ;
1855: LD_ADDR_OWVAR 37
1859: PUSH
1860: LD_INT 24
1862: ST_TO_ADDR
// Masha = CreateVehicle ;
1863: LD_ADDR_EXP 18
1867: PUSH
1868: CALL_OW 45
1872: ST_TO_ADDR
// PlaceUnitArea ( Masha , GorkySpawn , false ) ;
1873: LD_EXP 18
1877: PPUSH
1878: LD_INT 3
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// SetMark ( Masha , 1 ) ;
1888: LD_EXP 18
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: CALL_OW 242
// Burlak = PrepareUnit ( Burlak , false ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING Burlak
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL 5877 0 2
1915: ST_TO_ADDR
// PlaceHumanInUnit ( Burlak , Masha ) ;
1916: LD_EXP 17
1920: PPUSH
1921: LD_EXP 18
1925: PPUSH
1926: CALL_OW 52
// ComAgressiveMove ( Masha , 107 , 118 ) ;
1930: LD_EXP 18
1934: PPUSH
1935: LD_INT 107
1937: PPUSH
1938: LD_INT 118
1940: PPUSH
1941: CALL_OW 114
// spawnBurlak = 1 ;
1945: LD_ADDR_EXP 27
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// end ;
1953: LD_VAR 0 1
1957: RET
// export function BurlakArmy ; var i , veh , tmp ; begin
1958: LD_INT 0
1960: PPUSH
1961: PPUSH
1962: PPUSH
1963: PPUSH
// uc_side = 7 ;
1964: LD_ADDR_OWVAR 20
1968: PUSH
1969: LD_INT 7
1971: ST_TO_ADDR
// uc_nation = 3 ;
1972: LD_ADDR_OWVAR 21
1976: PUSH
1977: LD_INT 3
1979: ST_TO_ADDR
// Gnyevko = PrepareUnit ( Gnyevko , false ) ;
1980: LD_ADDR_EXP 19
1984: PUSH
1985: LD_STRING Gnyevko
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL 5877 0 2
1995: ST_TO_ADDR
// Titov = PrepareUnit ( Titov , false ) ;
1996: LD_ADDR_EXP 20
2000: PUSH
2001: LD_STRING Titov
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL 5877 0 2
2011: ST_TO_ADDR
// Xavier = PrepareUnit ( Xavier2 , false ) ;
2012: LD_ADDR_EXP 21
2016: PUSH
2017: LD_STRING Xavier2
2019: PPUSH
2020: LD_INT 0
2022: PPUSH
2023: CALL 5877 0 2
2027: ST_TO_ADDR
// Belkov = PrepareUnit ( Belkov , false ) ;
2028: LD_ADDR_EXP 22
2032: PUSH
2033: LD_STRING Belkov
2035: PPUSH
2036: LD_INT 0
2038: PPUSH
2039: CALL 5877 0 2
2043: ST_TO_ADDR
// Lipshchin = PrepareUnit ( Lipshchin , false ) ;
2044: LD_ADDR_EXP 23
2048: PUSH
2049: LD_STRING Lipshchin
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL 5877 0 2
2059: ST_TO_ADDR
// for i = 1 to 5 do
2060: LD_ADDR_VAR 0 2
2064: PUSH
2065: DOUBLE
2066: LD_INT 1
2068: DEC
2069: ST_TO_ADDR
2070: LD_INT 5
2072: PUSH
2073: FOR_TO
2074: IFFALSE 2162
// begin vc_engine = 3 ;
2076: LD_ADDR_OWVAR 39
2080: PUSH
2081: LD_INT 3
2083: ST_TO_ADDR
// vc_control = 1 ;
2084: LD_ADDR_OWVAR 38
2088: PUSH
2089: LD_INT 1
2091: ST_TO_ADDR
// vc_weapon = [ 43 , 44 , 45 , 49 ] [ Rand ( 1 , 4 ) ] ;
2092: LD_ADDR_OWVAR 40
2096: PUSH
2097: LD_INT 43
2099: PUSH
2100: LD_INT 44
2102: PUSH
2103: LD_INT 45
2105: PUSH
2106: LD_INT 49
2108: PUSH
2109: EMPTY
2110: LIST
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 4
2120: PPUSH
2121: CALL_OW 12
2125: ARRAY
2126: ST_TO_ADDR
// vc_chassis = 22 ;
2127: LD_ADDR_OWVAR 37
2131: PUSH
2132: LD_INT 22
2134: ST_TO_ADDR
// veh = CreateVehicle ;
2135: LD_ADDR_VAR 0 3
2139: PUSH
2140: CALL_OW 45
2144: ST_TO_ADDR
// PlaceUnitArea ( veh , GorkySpawn , false ) ;
2145: LD_VAR 0 3
2149: PPUSH
2150: LD_INT 3
2152: PPUSH
2153: LD_INT 0
2155: PPUSH
2156: CALL_OW 49
// end ;
2160: GO 2073
2162: POP
2163: POP
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2164: LD_ADDR_VAR 0 4
2168: PUSH
2169: LD_INT 22
2171: PUSH
2172: LD_INT 7
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: PUSH
2179: LD_INT 21
2181: PUSH
2182: LD_INT 2
2184: PUSH
2185: EMPTY
2186: LIST
2187: LIST
2188: PUSH
2189: LD_INT 58
2191: PUSH
2192: EMPTY
2193: LIST
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: PPUSH
2200: CALL_OW 69
2204: ST_TO_ADDR
// PlaceHumanInUnit ( Gnyevko , tmp [ 1 ] ) ;
2205: LD_EXP 19
2209: PPUSH
2210: LD_VAR 0 4
2214: PUSH
2215: LD_INT 1
2217: ARRAY
2218: PPUSH
2219: CALL_OW 52
// PlaceHumanInUnit ( Titov , tmp [ 2 ] ) ;
2223: LD_EXP 20
2227: PPUSH
2228: LD_VAR 0 4
2232: PUSH
2233: LD_INT 2
2235: ARRAY
2236: PPUSH
2237: CALL_OW 52
// PlaceHumanInUnit ( Xavier , tmp [ 3 ] ) ;
2241: LD_EXP 21
2245: PPUSH
2246: LD_VAR 0 4
2250: PUSH
2251: LD_INT 3
2253: ARRAY
2254: PPUSH
2255: CALL_OW 52
// PlaceHumanInUnit ( Belkov , tmp [ 4 ] ) ;
2259: LD_EXP 22
2263: PPUSH
2264: LD_VAR 0 4
2268: PUSH
2269: LD_INT 4
2271: ARRAY
2272: PPUSH
2273: CALL_OW 52
// PlaceHumanInUnit ( Lipshchin , tmp [ 5 ] ) ;
2277: LD_EXP 23
2281: PPUSH
2282: LD_VAR 0 4
2286: PUSH
2287: LD_INT 5
2289: ARRAY
2290: PPUSH
2291: CALL_OW 52
// SetClass ( Gnyevko , 3 ) ;
2295: LD_EXP 19
2299: PPUSH
2300: LD_INT 3
2302: PPUSH
2303: CALL_OW 336
// SetClass ( [ Titov , Lipshchin ] , 9 ) ;
2307: LD_EXP 20
2311: PUSH
2312: LD_EXP 23
2316: PUSH
2317: EMPTY
2318: LIST
2319: LIST
2320: PPUSH
2321: LD_INT 9
2323: PPUSH
2324: CALL_OW 336
// tmp := FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_vehicle ] ] ) ;
2328: LD_ADDR_VAR 0 4
2332: PUSH
2333: LD_INT 22
2335: PUSH
2336: LD_INT 7
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 21
2345: PUSH
2346: LD_INT 2
2348: PUSH
2349: EMPTY
2350: LIST
2351: LIST
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: PPUSH
2357: CALL_OW 69
2361: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2362: LD_VAR 0 4
2366: PPUSH
2367: LD_INT 107
2369: PPUSH
2370: LD_INT 118
2372: PPUSH
2373: CALL_OW 114
// repeat wait ( 0 0$1 ) ;
2377: LD_INT 35
2379: PPUSH
2380: CALL_OW 67
// ComMoveUnit ( UnitFilter ( tmp , [ f_weapon , 49 ] ) , Masha ) ;
2384: LD_VAR 0 4
2388: PPUSH
2389: LD_INT 34
2391: PUSH
2392: LD_INT 49
2394: PUSH
2395: EMPTY
2396: LIST
2397: LIST
2398: PPUSH
2399: CALL_OW 72
2403: PPUSH
2404: LD_EXP 18
2408: PPUSH
2409: CALL_OW 112
// until UnitFilter ( tmp , [ f_weapon , 49 ] ) = 0 or IsDying ( Masha ) ;
2413: LD_VAR 0 4
2417: PPUSH
2418: LD_INT 34
2420: PUSH
2421: LD_INT 49
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PPUSH
2428: CALL_OW 72
2432: PUSH
2433: LD_INT 0
2435: EQUAL
2436: PUSH
2437: LD_EXP 18
2441: PPUSH
2442: CALL_OW 303
2446: OR
2447: IFFALSE 2377
// repeat wait ( 0 0$1 ) ;
2449: LD_INT 35
2451: PPUSH
2452: CALL_OW 67
// tmp := FilterAllUnits ( [ f_side , 7 ] ) ;
2456: LD_ADDR_VAR 0 4
2460: PUSH
2461: LD_INT 22
2463: PUSH
2464: LD_INT 7
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: PPUSH
2471: CALL_OW 69
2475: ST_TO_ADDR
// ComAgressiveMove ( tmp , 107 , 118 ) ;
2476: LD_VAR 0 4
2480: PPUSH
2481: LD_INT 107
2483: PPUSH
2484: LD_INT 118
2486: PPUSH
2487: CALL_OW 114
// until not tmp ;
2491: LD_VAR 0 4
2495: NOT
2496: IFFALSE 2449
// end ; end_of_file
2498: LD_VAR 0 1
2502: RET
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) = 0 do var i ;
2503: LD_INT 22
2505: PUSH
2506: LD_INT 8
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: LD_INT 33
2515: PUSH
2516: LD_INT 2
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PPUSH
2527: CALL_OW 69
2531: PUSH
2532: LD_INT 0
2534: GREATER
2535: PUSH
2536: LD_INT 22
2538: PUSH
2539: LD_INT 8
2541: PUSH
2542: EMPTY
2543: LIST
2544: LIST
2545: PUSH
2546: LD_INT 34
2548: PUSH
2549: LD_INT 31
2551: PUSH
2552: EMPTY
2553: LIST
2554: LIST
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PPUSH
2560: CALL_OW 69
2564: PUSH
2565: LD_INT 0
2567: EQUAL
2568: AND
2569: IFFALSE 2792
2571: GO 2573
2573: DISABLE
2574: LD_INT 0
2576: PPUSH
// begin enable ;
2577: ENABLE
// uc_side = 8 ;
2578: LD_ADDR_OWVAR 20
2582: PUSH
2583: LD_INT 8
2585: ST_TO_ADDR
// uc_nation = 2 ;
2586: LD_ADDR_OWVAR 21
2590: PUSH
2591: LD_INT 2
2593: ST_TO_ADDR
// vc_engine = 3 ;
2594: LD_ADDR_OWVAR 39
2598: PUSH
2599: LD_INT 3
2601: ST_TO_ADDR
// vc_control = 1 ;
2602: LD_ADDR_OWVAR 38
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// vc_weapon = 31 ;
2610: LD_ADDR_OWVAR 40
2614: PUSH
2615: LD_INT 31
2617: ST_TO_ADDR
// vc_chassis = 14 ;
2618: LD_ADDR_OWVAR 37
2622: PUSH
2623: LD_INT 14
2625: ST_TO_ADDR
// arControlTower = CreateVehicle ;
2626: LD_ADDR_EXP 34
2630: PUSH
2631: CALL_OW 45
2635: ST_TO_ADDR
// PlaceUnitArea ( arControlTower , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
2636: LD_EXP 34
2640: PPUSH
2641: LD_INT 8
2643: PUSH
2644: LD_INT 9
2646: PUSH
2647: EMPTY
2648: LIST
2649: LIST
2650: PUSH
2651: LD_INT 1
2653: PPUSH
2654: LD_INT 2
2656: PPUSH
2657: CALL_OW 12
2661: ARRAY
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// hc_name =  ;
2670: LD_ADDR_OWVAR 26
2674: PUSH
2675: LD_STRING 
2677: ST_TO_ADDR
// hc_gallery =  ;
2678: LD_ADDR_OWVAR 33
2682: PUSH
2683: LD_STRING 
2685: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
2686: LD_INT 0
2688: PPUSH
2689: LD_INT 3
2691: PPUSH
2692: LD_INT 10
2694: PPUSH
2695: CALL_OW 380
// arDriver = CreateHuman ;
2699: LD_ADDR_EXP 35
2703: PUSH
2704: CALL_OW 44
2708: ST_TO_ADDR
// PlaceHumanInUnit ( arDriver , arControlTower ) ;
2709: LD_EXP 35
2713: PPUSH
2714: LD_EXP 34
2718: PPUSH
2719: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
2723: LD_ADDR_VAR 0 1
2727: PUSH
2728: LD_INT 22
2730: PUSH
2731: LD_INT 8
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 33
2740: PUSH
2741: LD_INT 2
2743: PUSH
2744: EMPTY
2745: LIST
2746: LIST
2747: PUSH
2748: LD_INT 3
2750: PUSH
2751: LD_INT 61
2753: PUSH
2754: EMPTY
2755: LIST
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: PPUSH
2766: CALL_OW 69
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2790
// ComLinkTo ( i , arDriver ) ;
2774: LD_VAR 0 1
2778: PPUSH
2779: LD_EXP 35
2783: PPUSH
2784: CALL_OW 135
2788: GO 2771
2790: POP
2791: POP
// end ;
2792: PPOPN 1
2794: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , 31 ] ] ) > 0 do var i ;
2795: LD_INT 22
2797: PUSH
2798: LD_INT 8
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: PUSH
2805: LD_INT 33
2807: PUSH
2808: LD_INT 2
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_INT 3
2817: PUSH
2818: LD_INT 61
2820: PUSH
2821: EMPTY
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PUSH
2828: EMPTY
2829: LIST
2830: LIST
2831: LIST
2832: PPUSH
2833: CALL_OW 69
2837: PUSH
2838: LD_INT 0
2840: GREATER
2841: PUSH
2842: LD_INT 22
2844: PUSH
2845: LD_INT 8
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_INT 34
2854: PUSH
2855: LD_INT 31
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: PUSH
2862: EMPTY
2863: LIST
2864: LIST
2865: PPUSH
2866: CALL_OW 69
2870: PUSH
2871: LD_INT 0
2873: GREATER
2874: AND
2875: IFFALSE 2953
2877: GO 2879
2879: DISABLE
2880: LD_INT 0
2882: PPUSH
// begin enable ;
2883: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 8 ] , [ f_control , 2 ] , [ f_not , [ f_linked ] ] ] ) do
2884: LD_ADDR_VAR 0 1
2888: PUSH
2889: LD_INT 22
2891: PUSH
2892: LD_INT 8
2894: PUSH
2895: EMPTY
2896: LIST
2897: LIST
2898: PUSH
2899: LD_INT 33
2901: PUSH
2902: LD_INT 2
2904: PUSH
2905: EMPTY
2906: LIST
2907: LIST
2908: PUSH
2909: LD_INT 3
2911: PUSH
2912: LD_INT 61
2914: PUSH
2915: EMPTY
2916: LIST
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: PPUSH
2927: CALL_OW 69
2931: PUSH
2932: FOR_IN
2933: IFFALSE 2951
// ComLinkTo ( i , arDriver ) ;
2935: LD_VAR 0 1
2939: PPUSH
2940: LD_EXP 35
2944: PPUSH
2945: CALL_OW 135
2949: GO 2932
2951: POP
2952: POP
// end ;
2953: PPOPN 1
2955: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_vehicle ] , [ f_control , 2 ] ] ) = 0 do
2956: LD_INT 22
2958: PUSH
2959: LD_INT 8
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: PUSH
2966: LD_INT 21
2968: PUSH
2969: LD_INT 2
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PUSH
2976: LD_INT 33
2978: PUSH
2979: LD_INT 2
2981: PUSH
2982: EMPTY
2983: LIST
2984: LIST
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: LIST
2990: PPUSH
2991: CALL_OW 69
2995: PUSH
2996: LD_INT 0
2998: EQUAL
2999: IFFALSE 3023
3001: GO 3003
3003: DISABLE
// begin enable ;
3004: ENABLE
// RemoveUnit ( arControlTower ) ;
3005: LD_EXP 34
3009: PPUSH
3010: CALL_OW 64
// RemoveUnit ( arDriver ) ;
3014: LD_EXP 35
3018: PPUSH
3019: CALL_OW 64
// end ;
3023: END
// every 15 15$0 trigger sibDeposits > 0 do var un , rnd ;
3024: LD_EXP 31
3028: PUSH
3029: LD_INT 0
3031: GREATER
3032: IFFALSE 3196
3034: GO 3036
3036: DISABLE
3037: LD_INT 0
3039: PPUSH
3040: PPUSH
// begin enable ;
3041: ENABLE
// rnd = 0 ;
3042: LD_ADDR_VAR 0 2
3046: PUSH
3047: LD_INT 0
3049: ST_TO_ADDR
// uc_side = 2 ;
3050: LD_ADDR_OWVAR 20
3054: PUSH
3055: LD_INT 2
3057: ST_TO_ADDR
// uc_nation = 2 ;
3058: LD_ADDR_OWVAR 21
3062: PUSH
3063: LD_INT 2
3065: ST_TO_ADDR
// hc_name =  ;
3066: LD_ADDR_OWVAR 26
3070: PUSH
3071: LD_STRING 
3073: ST_TO_ADDR
// hc_gallery =  ;
3074: LD_ADDR_OWVAR 33
3078: PUSH
3079: LD_STRING 
3081: ST_TO_ADDR
// PrepareHuman ( false , 4 , 10 ) ;
3082: LD_INT 0
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: LD_INT 10
3090: PPUSH
3091: CALL_OW 380
// un = CreateHuman ;
3095: LD_ADDR_VAR 0 1
3099: PUSH
3100: CALL_OW 44
3104: ST_TO_ADDR
// PlaceUnitArea ( un , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , false ) ;
3105: LD_VAR 0 1
3109: PPUSH
3110: LD_INT 8
3112: PUSH
3113: LD_INT 9
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: LD_INT 1
3122: PPUSH
3123: LD_INT 2
3125: PPUSH
3126: CALL_OW 12
3130: ARRAY
3131: PPUSH
3132: LD_INT 0
3134: PPUSH
3135: CALL_OW 49
// rnd = Rand ( 1 , sibDeposits ) ;
3139: LD_ADDR_VAR 0 2
3143: PUSH
3144: LD_INT 1
3146: PPUSH
3147: LD_EXP 31
3151: PPUSH
3152: CALL_OW 12
3156: ST_TO_ADDR
// ComContaminate ( un , sibDeposits [ rnd ] [ 1 ] , sibDeposits [ rnd ] [ 2 ] ) ;
3157: LD_VAR 0 1
3161: PPUSH
3162: LD_EXP 31
3166: PUSH
3167: LD_VAR 0 2
3171: ARRAY
3172: PUSH
3173: LD_INT 1
3175: ARRAY
3176: PPUSH
3177: LD_EXP 31
3181: PUSH
3182: LD_VAR 0 2
3186: ARRAY
3187: PUSH
3188: LD_INT 2
3190: ARRAY
3191: PPUSH
3192: CALL_OW 158
// end ; end_of_file
3196: PPOPN 2
3198: END
// every 1 do
3199: GO 3201
3201: DISABLE
// begin InGameOn ;
3202: CALL_OW 8
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3206: LD_INT 22
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: LD_INT 21
3218: PUSH
3219: LD_INT 2
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PPUSH
3230: CALL_OW 69
3234: PUSH
3235: LD_INT 1
3237: ARRAY
3238: PPUSH
3239: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) , 69 , 94 ) ;
3243: LD_INT 22
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PUSH
3253: LD_INT 21
3255: PUSH
3256: LD_INT 2
3258: PUSH
3259: EMPTY
3260: LIST
3261: LIST
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: PPUSH
3267: CALL_OW 69
3271: PPUSH
3272: LD_INT 69
3274: PPUSH
3275: LD_INT 94
3277: PPUSH
3278: CALL_OW 111
// Say ( JMM , D2-JMM-1 ) ;
3282: LD_EXP 1
3286: PPUSH
3287: LD_STRING D2-JMM-1
3289: PPUSH
3290: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3294: LD_INT 22
3296: PUSH
3297: LD_INT 1
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 21
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_INT 1
3325: ARRAY
3326: PPUSH
3327: CALL_OW 87
// Say ( Stevens , D2-Huck-1 ) ;
3331: LD_EXP 2
3335: PPUSH
3336: LD_STRING D2-Huck-1
3338: PPUSH
3339: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3343: LD_INT 22
3345: PUSH
3346: LD_INT 1
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: LD_INT 21
3355: PUSH
3356: LD_INT 2
3358: PUSH
3359: EMPTY
3360: LIST
3361: LIST
3362: PUSH
3363: EMPTY
3364: LIST
3365: LIST
3366: PPUSH
3367: CALL_OW 69
3371: PUSH
3372: LD_INT 1
3374: ARRAY
3375: PPUSH
3376: CALL_OW 87
// Say ( JMM , D2-JMM-2 ) ;
3380: LD_EXP 1
3384: PPUSH
3385: LD_STRING D2-JMM-2
3387: PPUSH
3388: CALL_OW 88
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) [ 1 ] ) ;
3392: LD_INT 22
3394: PUSH
3395: LD_INT 1
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 21
3404: PUSH
3405: LD_INT 2
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: PPUSH
3416: CALL_OW 69
3420: PUSH
3421: LD_INT 1
3423: ARRAY
3424: PPUSH
3425: CALL_OW 87
// InGameOff ;
3429: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3433: LD_STRING M1
3435: PPUSH
3436: CALL_OW 337
// SaveForQuickRestart ;
3440: CALL_OW 22
// end ;
3444: END
// every 10 10$0 do
3445: GO 3447
3447: DISABLE
// begin DialogueOn ;
3448: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3452: LD_EXP 15
3456: PPUSH
3457: LD_STRING D3-Pow-1
3459: PPUSH
3460: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
3464: LD_EXP 1
3468: PPUSH
3469: LD_STRING D3-JMM-1
3471: PPUSH
3472: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3476: LD_EXP 15
3480: PPUSH
3481: LD_STRING D3-Pow-2
3483: PPUSH
3484: CALL_OW 94
// Say ( JMM , D3-JMM-2 ) ;
3488: LD_EXP 1
3492: PPUSH
3493: LD_STRING D3-JMM-2
3495: PPUSH
3496: CALL_OW 88
// SayRadio ( Powell , D3-Pow-3 ) ;
3500: LD_EXP 15
3504: PPUSH
3505: LD_STRING D3-Pow-3
3507: PPUSH
3508: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
3512: LD_EXP 1
3516: PPUSH
3517: LD_STRING D3-JMM-3
3519: PPUSH
3520: CALL_OW 88
// SayRadio ( Powell , D3-Pow-4 ) ;
3524: LD_EXP 15
3528: PPUSH
3529: LD_STRING D3-Pow-4
3531: PPUSH
3532: CALL_OW 94
// Say ( JMM , D3-JMM-4 ) ;
3536: LD_EXP 1
3540: PPUSH
3541: LD_STRING D3-JMM-4
3543: PPUSH
3544: CALL_OW 88
// DialogueOff ;
3548: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
3552: LD_STRING M2
3554: PPUSH
3555: CALL_OW 337
// wait ( 2 2$30 ) ;
3559: LD_INT 5250
3561: PPUSH
3562: CALL_OW 67
// PrepareBurlak ;
3566: CALL 1812 0 0
// BurlakArmy ;
3570: CALL 1958 0 0
// end ;
3574: END
// every 0 0$1 trigger See ( 1 , Masha ) do
3575: LD_INT 1
3577: PPUSH
3578: LD_EXP 18
3582: PPUSH
3583: CALL_OW 292
3587: IFFALSE 3746
3589: GO 3591
3591: DISABLE
// begin DialogueOn ;
3592: CALL_OW 6
// CenterNowOnUnits ( Masha ) ;
3596: LD_EXP 18
3600: PPUSH
3601: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5-Sol1-1 , D5-FSol1-1 ) ;
3605: LD_INT 22
3607: PUSH
3608: LD_INT 1
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PUSH
3615: LD_INT 26
3617: PUSH
3618: LD_INT 1
3620: PUSH
3621: EMPTY
3622: LIST
3623: LIST
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: LD_INT 25
3630: PUSH
3631: LD_INT 1
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PUSH
3638: LD_INT 25
3640: PUSH
3641: LD_INT 2
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 25
3650: PUSH
3651: LD_INT 3
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 25
3660: PUSH
3661: LD_INT 4
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 25
3670: PUSH
3671: LD_INT 5
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: EMPTY
3687: LIST
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PPUSH
3696: LD_STRING D5-Sol1-1
3698: PPUSH
3699: LD_STRING D5-FSol1-1
3701: PPUSH
3702: CALL 5934 0 3
// Say ( JMM , D5-JMM-1 ) ;
3706: LD_EXP 1
3710: PPUSH
3711: LD_STRING D5-JMM-1
3713: PPUSH
3714: CALL_OW 88
// Say ( Burlak , DAmer-Bur-1 ) ;
3718: LD_EXP 17
3722: PPUSH
3723: LD_STRING DAmer-Bur-1
3725: PPUSH
3726: CALL_OW 88
// Say ( JMM , DAmer-JMM-1 ) ;
3730: LD_EXP 1
3734: PPUSH
3735: LD_STRING DAmer-JMM-1
3737: PPUSH
3738: CALL_OW 88
// DialogueOff ;
3742: CALL_OW 7
// end ;
3746: END
// every 0 0$1 do var i ;
3747: GO 3749
3749: DISABLE
3750: LD_INT 0
3752: PPUSH
// begin enable ;
3753: ENABLE
// for i in FilterAllUnits ( [ f_side , 7 ] ) do
3754: LD_ADDR_VAR 0 1
3758: PUSH
3759: LD_INT 22
3761: PUSH
3762: LD_INT 7
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PPUSH
3769: CALL_OW 69
3773: PUSH
3774: FOR_IN
3775: IFFALSE 4153
// if IsInArea ( i , AllianceEscape ) then
3777: LD_VAR 0 1
3781: PPUSH
3782: LD_INT 4
3784: PPUSH
3785: CALL_OW 308
3789: IFFALSE 4151
// begin if i = Burlak or i = Masha then
3791: LD_VAR 0 1
3795: PUSH
3796: LD_EXP 17
3800: EQUAL
3801: PUSH
3802: LD_VAR 0 1
3806: PUSH
3807: LD_EXP 18
3811: EQUAL
3812: OR
3813: IFFALSE 3960
// begin RemoveUnit ( i ) ;
3815: LD_VAR 0 1
3819: PPUSH
3820: CALL_OW 64
// DialogueOn ;
3824: CALL_OW 6
// Say ( JMM , D5a-JMM-1 ) ;
3828: LD_EXP 1
3832: PPUSH
3833: LD_STRING D5a-JMM-1
3835: PPUSH
3836: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5a-Sol1-1 , D5-FSol1-1 ) ;
3840: LD_INT 22
3842: PUSH
3843: LD_INT 1
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: PUSH
3850: LD_INT 26
3852: PUSH
3853: LD_INT 1
3855: PUSH
3856: EMPTY
3857: LIST
3858: LIST
3859: PUSH
3860: LD_INT 2
3862: PUSH
3863: LD_INT 25
3865: PUSH
3866: LD_INT 1
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: PUSH
3873: LD_INT 25
3875: PUSH
3876: LD_INT 2
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: PUSH
3883: LD_INT 25
3885: PUSH
3886: LD_INT 3
3888: PUSH
3889: EMPTY
3890: LIST
3891: LIST
3892: PUSH
3893: LD_INT 25
3895: PUSH
3896: LD_INT 4
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PUSH
3903: LD_INT 25
3905: PUSH
3906: LD_INT 5
3908: PUSH
3909: EMPTY
3910: LIST
3911: LIST
3912: PUSH
3913: EMPTY
3914: LIST
3915: LIST
3916: LIST
3917: LIST
3918: LIST
3919: LIST
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: LIST
3925: PPUSH
3926: CALL_OW 69
3930: PPUSH
3931: LD_STRING D5a-Sol1-1
3933: PPUSH
3934: LD_STRING D5-FSol1-1
3936: PPUSH
3937: CALL 5934 0 3
// DialogueOff ;
3941: CALL_OW 7
// ChangeMissionObjectives ( M2b ) ;
3945: LD_STRING M2b
3947: PPUSH
3948: CALL_OW 337
// spawnBurlak = 0 ;
3952: LD_ADDR_EXP 27
3956: PUSH
3957: LD_INT 0
3959: ST_TO_ADDR
// end ; if GetType ( i ) = unit_vehicle and GetControl ( i ) = control_manual then
3960: LD_VAR 0 1
3964: PPUSH
3965: CALL_OW 247
3969: PUSH
3970: LD_INT 2
3972: EQUAL
3973: PUSH
3974: LD_VAR 0 1
3978: PPUSH
3979: CALL_OW 263
3983: PUSH
3984: LD_INT 1
3986: EQUAL
3987: AND
3988: IFFALSE 4116
// begin case IsDrivenBy ( i ) of Gnyevko :
3990: LD_VAR 0 1
3994: PPUSH
3995: CALL_OW 311
3999: PUSH
4000: LD_EXP 19
4004: DOUBLE
4005: EQUAL
4006: IFTRUE 4010
4008: GO 4023
4010: POP
// SaveVariable ( 1 , 13_Gnyevko_1 ) ; Titov :
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING 13_Gnyevko_1
4016: PPUSH
4017: CALL_OW 39
4021: GO 4116
4023: LD_EXP 20
4027: DOUBLE
4028: EQUAL
4029: IFTRUE 4033
4031: GO 4046
4033: POP
// SaveVariable ( 1 , 13_Titov_1 ) ; Xavier :
4034: LD_INT 1
4036: PPUSH
4037: LD_STRING 13_Titov_1
4039: PPUSH
4040: CALL_OW 39
4044: GO 4116
4046: LD_EXP 21
4050: DOUBLE
4051: EQUAL
4052: IFTRUE 4056
4054: GO 4069
4056: POP
// SaveVariable ( 1 , 13_Xavier_1 ) ; Belkov :
4057: LD_INT 1
4059: PPUSH
4060: LD_STRING 13_Xavier_1
4062: PPUSH
4063: CALL_OW 39
4067: GO 4116
4069: LD_EXP 22
4073: DOUBLE
4074: EQUAL
4075: IFTRUE 4079
4077: GO 4092
4079: POP
// SaveVariable ( 1 , 13_Belkov_1 ) ; Lipshchin :
4080: LD_INT 1
4082: PPUSH
4083: LD_STRING 13_Belkov_1
4085: PPUSH
4086: CALL_OW 39
4090: GO 4116
4092: LD_EXP 23
4096: DOUBLE
4097: EQUAL
4098: IFTRUE 4102
4100: GO 4115
4102: POP
// SaveVariable ( 1 , 13_Lipshchin_1 ) ; end ;
4103: LD_INT 1
4105: PPUSH
4106: LD_STRING 13_Lipshchin_1
4108: PPUSH
4109: CALL_OW 39
4113: GO 4116
4115: POP
// end ; if GetWeapon ( i ) = 49 then
4116: LD_VAR 0 1
4120: PPUSH
4121: CALL_OW 264
4125: PUSH
4126: LD_INT 49
4128: EQUAL
4129: IFFALSE 4142
// DestroyUnit ( i ) else
4131: LD_VAR 0 1
4135: PPUSH
4136: CALL_OW 65
4140: GO 4151
// RemoveUnit ( i ) ;
4142: LD_VAR 0 1
4146: PPUSH
4147: CALL_OW 64
// end ;
4151: GO 3774
4153: POP
4154: POP
// if FilterAllUnits ( [ [ f_side , 7 ] , [ f_type , unit_human ] ] ) = 0 then
4155: LD_INT 22
4157: PUSH
4158: LD_INT 7
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 21
4167: PUSH
4168: LD_INT 1
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: PPUSH
4179: CALL_OW 69
4183: PUSH
4184: LD_INT 0
4186: EQUAL
4187: IFFALSE 4190
// disable ;
4189: DISABLE
// end ;
4190: PPOPN 1
4192: END
// every 0 0$1 trigger GetLives ( Masha ) < 500 and GetSide ( Masha ) = 7 do
4193: LD_EXP 18
4197: PPUSH
4198: CALL_OW 256
4202: PUSH
4203: LD_INT 500
4205: LESS
4206: PUSH
4207: LD_EXP 18
4211: PPUSH
4212: CALL_OW 255
4216: PUSH
4217: LD_INT 7
4219: EQUAL
4220: AND
4221: IFFALSE 4241
4223: GO 4225
4225: DISABLE
// ComMoveXY ( Masha , 107 , 118 ) ;
4226: LD_EXP 18
4230: PPUSH
4231: LD_INT 107
4233: PPUSH
4234: LD_INT 118
4236: PPUSH
4237: CALL_OW 111
4241: END
// every 0 0$10 trigger IsDead ( Burlak ) and spawnBurlak = 1 do
4242: LD_EXP 17
4246: PPUSH
4247: CALL_OW 301
4251: PUSH
4252: LD_EXP 27
4256: PUSH
4257: LD_INT 1
4259: EQUAL
4260: AND
4261: IFFALSE 4394
4263: GO 4265
4265: DISABLE
// begin Say ( JMM , D5b-JMM-1 ) ;
4266: LD_EXP 1
4270: PPUSH
4271: LD_STRING D5b-JMM-1
4273: PPUSH
4274: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D5b-Sol1-1 ,  ) ;
4278: LD_INT 22
4280: PUSH
4281: LD_INT 1
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: LD_INT 26
4290: PUSH
4291: LD_INT 1
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: LD_INT 25
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 25
4313: PUSH
4314: LD_INT 2
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 25
4323: PUSH
4324: LD_INT 3
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 25
4333: PUSH
4334: LD_INT 4
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: LD_INT 25
4343: PUSH
4344: LD_INT 5
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: PUSH
4351: EMPTY
4352: LIST
4353: LIST
4354: LIST
4355: LIST
4356: LIST
4357: LIST
4358: PUSH
4359: EMPTY
4360: LIST
4361: LIST
4362: LIST
4363: PPUSH
4364: CALL_OW 69
4368: PPUSH
4369: LD_STRING D5b-Sol1-1
4371: PPUSH
4372: LD_STRING 
4374: PPUSH
4375: CALL 5934 0 3
// ChangeMissionObjectives ( M2a ) ;
4379: LD_STRING M2a
4381: PPUSH
4382: CALL_OW 337
// burlakStatus = 1 ;
4386: LD_ADDR_EXP 28
4390: PUSH
4391: LD_INT 1
4393: ST_TO_ADDR
// end ;
4394: END
// every 0 0$1 trigger IsDead ( Stevens ) do
4395: LD_EXP 2
4399: PPUSH
4400: CALL_OW 301
4404: IFFALSE 4541
4406: GO 4408
4408: DISABLE
// begin Say ( JMM , D6-JMM-1 ) ;
4409: LD_EXP 1
4413: PPUSH
4414: LD_STRING D6-JMM-1
4416: PPUSH
4417: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D6-Sol1-1 ,  ) ;
4421: LD_INT 22
4423: PUSH
4424: LD_INT 1
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PUSH
4431: LD_INT 26
4433: PUSH
4434: LD_INT 1
4436: PUSH
4437: EMPTY
4438: LIST
4439: LIST
4440: PUSH
4441: LD_INT 2
4443: PUSH
4444: LD_INT 25
4446: PUSH
4447: LD_INT 1
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 25
4456: PUSH
4457: LD_INT 2
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: PUSH
4464: LD_INT 25
4466: PUSH
4467: LD_INT 3
4469: PUSH
4470: EMPTY
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 25
4476: PUSH
4477: LD_INT 4
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: PUSH
4484: LD_INT 25
4486: PUSH
4487: LD_INT 5
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: LIST
4505: LIST
4506: PPUSH
4507: CALL_OW 69
4511: PPUSH
4512: LD_STRING D6-Sol1-1
4514: PPUSH
4515: LD_STRING 
4517: PPUSH
4518: CALL 5934 0 3
// Say ( JMM , D6-JMM-2 ) ;
4522: LD_EXP 1
4526: PPUSH
4527: LD_STRING D6-JMM-2
4529: PPUSH
4530: CALL_OW 88
// ChangeMissionObjectives ( M1a ) ;
4534: LD_STRING M1a
4536: PPUSH
4537: CALL_OW 337
// end ;
4541: END
// every 0 0$1 trigger GetTech ( 25 , 1 ) = state_researched do
4542: LD_INT 25
4544: PPUSH
4545: LD_INT 1
4547: PPUSH
4548: CALL_OW 321
4552: PUSH
4553: LD_INT 2
4555: EQUAL
4556: IFFALSE 4573
4558: GO 4560
4560: DISABLE
// begin Say ( Stevens , D6-Huck-2 ) ;
4561: LD_EXP 2
4565: PPUSH
4566: LD_STRING D6-Huck-2
4568: PPUSH
4569: CALL_OW 88
// end ;
4573: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_weapon , 8 ] , [ f_bweapon , 8 ] ] ] ) > 0 do var depot , barrack ;
4574: LD_INT 22
4576: PUSH
4577: LD_INT 1
4579: PUSH
4580: EMPTY
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 2
4586: PUSH
4587: LD_INT 34
4589: PUSH
4590: LD_INT 8
4592: PUSH
4593: EMPTY
4594: LIST
4595: LIST
4596: PUSH
4597: LD_INT 35
4599: PUSH
4600: LD_INT 8
4602: PUSH
4603: EMPTY
4604: LIST
4605: LIST
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PPUSH
4616: CALL_OW 69
4620: PUSH
4621: LD_INT 0
4623: GREATER
4624: IFFALSE 4816
4626: GO 4628
4628: DISABLE
4629: LD_INT 0
4631: PPUSH
4632: PPUSH
// begin enable ;
4633: ENABLE
// depot = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 1 ] , [ f_not , [ f_constructed ] ] ] ) ;
4634: LD_ADDR_VAR 0 1
4638: PUSH
4639: LD_INT 5
4641: PPUSH
4642: LD_INT 22
4644: PUSH
4645: LD_INT 1
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: LD_INT 21
4654: PUSH
4655: LD_INT 3
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 30
4664: PUSH
4665: LD_INT 1
4667: PUSH
4668: EMPTY
4669: LIST
4670: LIST
4671: PUSH
4672: LD_INT 3
4674: PUSH
4675: LD_INT 57
4677: PUSH
4678: EMPTY
4679: LIST
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: LIST
4689: LIST
4690: PPUSH
4691: CALL_OW 70
4695: ST_TO_ADDR
// barrack = FilterUnitsInArea ( TestArea , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , 5 ] , [ f_not , [ f_constructed ] ] ] ) ;
4696: LD_ADDR_VAR 0 2
4700: PUSH
4701: LD_INT 5
4703: PPUSH
4704: LD_INT 22
4706: PUSH
4707: LD_INT 1
4709: PUSH
4710: EMPTY
4711: LIST
4712: LIST
4713: PUSH
4714: LD_INT 21
4716: PUSH
4717: LD_INT 3
4719: PUSH
4720: EMPTY
4721: LIST
4722: LIST
4723: PUSH
4724: LD_INT 30
4726: PUSH
4727: LD_INT 5
4729: PUSH
4730: EMPTY
4731: LIST
4732: LIST
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: LD_INT 57
4739: PUSH
4740: EMPTY
4741: LIST
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: ST_TO_ADDR
// if depot > 0 and barrack > 0 then
4758: LD_VAR 0 1
4762: PUSH
4763: LD_INT 0
4765: GREATER
4766: PUSH
4767: LD_VAR 0 2
4771: PUSH
4772: LD_INT 0
4774: GREATER
4775: AND
4776: IFFALSE 4816
// begin disable ;
4778: DISABLE
// DialogueOn ;
4779: CALL_OW 6
// Say ( JMM , D7-JMM-1 ) ;
4783: LD_EXP 1
4787: PPUSH
4788: LD_STRING D7-JMM-1
4790: PPUSH
4791: CALL_OW 88
// DialogueOff ;
4795: CALL_OW 7
// ChangeMissionObjectives ( M4 ) ;
4799: LD_STRING M4
4801: PPUSH
4802: CALL_OW 337
// SetAreaMapShow ( TestArea , 0 ) ;
4806: LD_INT 5
4808: PPUSH
4809: LD_INT 0
4811: PPUSH
4812: CALL_OW 424
// end ; end ;
4816: PPOPN 2
4818: END
// every 0 0$1 trigger FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) > 0 and eventVar3 = 1 and radationResearched = 0 do
4819: LD_INT 6
4821: PPUSH
4822: LD_INT 22
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: LD_INT 25
4834: PUSH
4835: LD_INT 4
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PPUSH
4846: CALL_OW 70
4850: PUSH
4851: LD_INT 0
4853: GREATER
4854: PUSH
4855: LD_EXP 39
4859: PUSH
4860: LD_INT 1
4862: EQUAL
4863: AND
4864: PUSH
4865: LD_EXP 29
4869: PUSH
4870: LD_INT 0
4872: EQUAL
4873: AND
4874: IFFALSE 4939
4876: GO 4878
4878: DISABLE
// begin enable ;
4879: ENABLE
// AmSciSib = FilterUnitsInArea ( SibRadiationArea , [ [ f_side , 1 ] , [ f_class , 4 ] ] ) [ 1 ] ;
4880: LD_ADDR_EXP 26
4884: PUSH
4885: LD_INT 6
4887: PPUSH
4888: LD_INT 22
4890: PUSH
4891: LD_INT 1
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PUSH
4898: LD_INT 25
4900: PUSH
4901: LD_INT 4
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PPUSH
4912: CALL_OW 70
4916: PUSH
4917: LD_INT 1
4919: ARRAY
4920: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 0 ) ;
4921: LD_INT 6
4923: PPUSH
4924: LD_INT 0
4926: PPUSH
4927: CALL_OW 424
// radationResearched = 1 ;
4931: LD_ADDR_EXP 29
4935: PUSH
4936: LD_INT 1
4938: ST_TO_ADDR
// end ;
4939: END
// every 0 0$1 trigger IsDead ( AmSciSib ) and radationResearched = 1 do
4940: LD_EXP 26
4944: PPUSH
4945: CALL_OW 301
4949: PUSH
4950: LD_EXP 29
4954: PUSH
4955: LD_INT 1
4957: EQUAL
4958: AND
4959: IFFALSE 4995
4961: GO 4963
4963: DISABLE
// begin enable ;
4964: ENABLE
// radationResearched = 0 ;
4965: LD_ADDR_EXP 29
4969: PUSH
4970: LD_INT 0
4972: ST_TO_ADDR
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
4973: LD_INT 6
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 424
// Say ( JMM , D9a-JMM-1 ) ;
4983: LD_EXP 1
4987: PPUSH
4988: LD_STRING D9a-JMM-1
4990: PPUSH
4991: CALL_OW 88
// end ; end_of_file
4995: END
// on VehicleConstructionStarted ( building , chasis , engine , control , weapon ) do begin if weapon = 8 and eventVar1 = 0 then
4996: LD_VAR 0 5
5000: PUSH
5001: LD_INT 8
5003: EQUAL
5004: PUSH
5005: LD_EXP 37
5009: PUSH
5010: LD_INT 0
5012: EQUAL
5013: AND
5014: IFFALSE 5067
// begin eventVar1 = 1 ;
5016: LD_ADDR_EXP 37
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// DialogueOn ;
5024: CALL_OW 6
// Say ( JMM , D6a-JMM-1 ) ;
5028: LD_EXP 1
5032: PPUSH
5033: LD_STRING D6a-JMM-1
5035: PPUSH
5036: CALL_OW 88
// SayRadio ( Powell , D6a-Pow-1 ) ;
5040: LD_EXP 15
5044: PPUSH
5045: LD_STRING D6a-Pow-1
5047: PPUSH
5048: CALL_OW 94
// DialogueOff ;
5052: CALL_OW 7
// wait ( 3 3$0 ) ;
5056: LD_INT 6300
5058: PPUSH
5059: CALL_OW 67
// PowellSupport ;
5063: CALL 1584 0 0
// end ; end ;
5067: PPOPN 5
5069: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 8 and eventVar2 = 0 then
5070: LD_VAR 0 1
5074: PPUSH
5075: CALL_OW 264
5079: PUSH
5080: LD_INT 8
5082: EQUAL
5083: PUSH
5084: LD_EXP 38
5088: PUSH
5089: LD_INT 0
5091: EQUAL
5092: AND
5093: IFFALSE 5162
// begin eventVar2 = 1 ;
5095: LD_ADDR_EXP 38
5099: PUSH
5100: LD_INT 1
5102: ST_TO_ADDR
// DialogueOn ;
5103: CALL_OW 6
// Say ( JMM , D6b-JMM-1 ) ;
5107: LD_EXP 1
5111: PPUSH
5112: LD_STRING D6b-JMM-1
5114: PPUSH
5115: CALL_OW 88
// SayRadio ( Powell , D6b-Pow-1 ) ;
5119: LD_EXP 15
5123: PPUSH
5124: LD_STRING D6b-Pow-1
5126: PPUSH
5127: CALL_OW 94
// DialogueOff ;
5131: CALL_OW 7
// SetAreaMapShow ( TestArea , 1 ) ;
5135: LD_INT 5
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: CALL_OW 424
// SetAreaMapShow ( RadarArea , 1 ) ;
5145: LD_INT 7
5147: PPUSH
5148: LD_INT 1
5150: PPUSH
5151: CALL_OW 424
// ChangeMissionObjectives ( M3 ) ;
5155: LD_STRING M3
5157: PPUSH
5158: CALL_OW 337
// end ; end ;
5162: PPOPN 2
5164: END
// on SiberiteRocketExploded ( nn , x , y ) do begin if InArea ( x , y , TestArea ) and eventVar3 = 0 then
5165: LD_VAR 0 2
5169: PPUSH
5170: LD_VAR 0 3
5174: PPUSH
5175: LD_INT 5
5177: PPUSH
5178: CALL_OW 309
5182: PUSH
5183: LD_EXP 39
5187: PUSH
5188: LD_INT 0
5190: EQUAL
5191: AND
5192: IFFALSE 5410
// begin eventVar3 = 1 ;
5194: LD_ADDR_EXP 39
5198: PUSH
5199: LD_INT 1
5201: ST_TO_ADDR
// wait ( 0 0$5 ) ;
5202: LD_INT 175
5204: PPUSH
5205: CALL_OW 67
// if FilterUnitsInArea ( RadarArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_weapon , 11 ] ] ) > 0 then
5209: LD_INT 7
5211: PPUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 21
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 34
5234: PUSH
5235: LD_INT 11
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: CALL_OW 70
5251: PUSH
5252: LD_INT 0
5254: GREATER
5255: IFFALSE 5274
// begin radarOnSpot = 1 ;
5257: LD_ADDR_EXP 30
5261: PUSH
5262: LD_INT 1
5264: ST_TO_ADDR
// ChangeMissionObjectives ( M3a ) ;
5265: LD_STRING M3a
5267: PPUSH
5268: CALL_OW 337
// end else
5272: GO 5281
// begin ChangeMissionObjectives ( M3b ) ;
5274: LD_STRING M3b
5276: PPUSH
5277: CALL_OW 337
// end ; DialogueOn ;
5281: CALL_OW 6
// Say ( Stevens , D8-Huck-1 ) ;
5285: LD_EXP 2
5289: PPUSH
5290: LD_STRING D8-Huck-1
5292: PPUSH
5293: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
5297: LD_EXP 1
5301: PPUSH
5302: LD_STRING D8-JMM-1
5304: PPUSH
5305: CALL_OW 88
// Say ( Stevens , D8-Huck-2 ) ;
5309: LD_EXP 2
5313: PPUSH
5314: LD_STRING D8-Huck-2
5316: PPUSH
5317: CALL_OW 88
// Say ( JMM , D8-JMM-2 ) ;
5321: LD_EXP 1
5325: PPUSH
5326: LD_STRING D8-JMM-2
5328: PPUSH
5329: CALL_OW 88
// Say ( Stevens , D8-Huck-3 ) ;
5333: LD_EXP 2
5337: PPUSH
5338: LD_STRING D8-Huck-3
5340: PPUSH
5341: CALL_OW 88
// Say ( JMM , D8-JMM-3 ) ;
5345: LD_EXP 1
5349: PPUSH
5350: LD_STRING D8-JMM-3
5352: PPUSH
5353: CALL_OW 88
// Say ( Stevens , D8-Huck-4 ) ;
5357: LD_EXP 2
5361: PPUSH
5362: LD_STRING D8-Huck-4
5364: PPUSH
5365: CALL_OW 88
// DialogueOff ;
5369: CALL_OW 7
// SetAreaMapShow ( TestArea , 0 ) ;
5373: LD_INT 5
5375: PPUSH
5376: LD_INT 0
5378: PPUSH
5379: CALL_OW 424
// SetAreaMapShow ( RadarArea , 0 ) ;
5383: LD_INT 7
5385: PPUSH
5386: LD_INT 0
5388: PPUSH
5389: CALL_OW 424
// SetAreaMapShow ( SibRadiationArea , 1 ) ;
5393: LD_INT 6
5395: PPUSH
5396: LD_INT 1
5398: PPUSH
5399: CALL_OW 424
// ChangeMissionObjectives ( M5 ) ;
5403: LD_STRING M5
5405: PPUSH
5406: CALL_OW 337
// end ; end ;
5410: PPOPN 3
5412: END
// on EnterBuilding ( building , human ) do begin if IsOk ( AmSciSib ) and human = AmSciSib and eventVar4 = 0 and eventVar3 = 1 then
5413: LD_EXP 26
5417: PPUSH
5418: CALL_OW 302
5422: PUSH
5423: LD_VAR 0 2
5427: PUSH
5428: LD_EXP 26
5432: EQUAL
5433: AND
5434: PUSH
5435: LD_EXP 40
5439: PUSH
5440: LD_INT 0
5442: EQUAL
5443: AND
5444: PUSH
5445: LD_EXP 39
5449: PUSH
5450: LD_INT 1
5452: EQUAL
5453: AND
5454: IFFALSE 5500
// if GetLabKind ( building , 1 ) = b_lab_siberium or GetLabKind ( building , 2 ) = b_lab_siberium then
5456: LD_VAR 0 1
5460: PPUSH
5461: LD_INT 1
5463: PPUSH
5464: CALL_OW 268
5468: PUSH
5469: LD_INT 11
5471: EQUAL
5472: PUSH
5473: LD_VAR 0 1
5477: PPUSH
5478: LD_INT 2
5480: PPUSH
5481: CALL_OW 268
5485: PUSH
5486: LD_INT 11
5488: EQUAL
5489: OR
5490: IFFALSE 5500
// eventVar4 = 1 ;
5492: LD_ADDR_EXP 40
5496: PUSH
5497: LD_INT 1
5499: ST_TO_ADDR
// end ;
5500: PPOPN 2
5502: END
// on SibDepositContaminated ( unit , x , y ) do var i , tmp ;
5503: LD_INT 0
5505: PPUSH
5506: PPUSH
// begin if GetNation ( unit ) = 2 then
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 248
5516: PUSH
5517: LD_INT 2
5519: EQUAL
5520: IFFALSE 5766
// begin sibDestroyedCounter = sibDestroyedCounter + 1 ;
5522: LD_ADDR_EXP 32
5526: PUSH
5527: LD_EXP 32
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: ST_TO_ADDR
// for i := 1 to sibDeposits do
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: DOUBLE
5542: LD_INT 1
5544: DEC
5545: ST_TO_ADDR
5546: LD_EXP 31
5550: PUSH
5551: FOR_TO
5552: IFFALSE 5654
// if sibDeposits [ i ] [ 1 ] = x and sibDeposits [ i ] [ 2 ] = y then
5554: LD_EXP 31
5558: PUSH
5559: LD_VAR 0 4
5563: ARRAY
5564: PUSH
5565: LD_INT 1
5567: ARRAY
5568: PUSH
5569: LD_VAR 0 2
5573: EQUAL
5574: PUSH
5575: LD_EXP 31
5579: PUSH
5580: LD_VAR 0 4
5584: ARRAY
5585: PUSH
5586: LD_INT 2
5588: ARRAY
5589: PUSH
5590: LD_VAR 0 3
5594: EQUAL
5595: AND
5596: IFFALSE 5652
// begin sibDeposits = Delete ( sibDeposits , [ i ] [ 1 ] ) ;
5598: LD_ADDR_EXP 31
5602: PUSH
5603: LD_EXP 31
5607: PPUSH
5608: LD_VAR 0 4
5612: PUSH
5613: EMPTY
5614: LIST
5615: PUSH
5616: LD_INT 1
5618: ARRAY
5619: PPUSH
5620: CALL_OW 3
5624: ST_TO_ADDR
// sibDeposits = Delete ( sibDeposits , [ i ] [ 2 ] ) ;
5625: LD_ADDR_EXP 31
5629: PUSH
5630: LD_EXP 31
5634: PPUSH
5635: LD_VAR 0 4
5639: PUSH
5640: EMPTY
5641: LIST
5642: PUSH
5643: LD_INT 2
5645: ARRAY
5646: PPUSH
5647: CALL_OW 3
5651: ST_TO_ADDR
// end ;
5652: GO 5551
5654: POP
5655: POP
// if eventVar5 = 0 then
5656: LD_EXP 41
5660: PUSH
5661: LD_INT 0
5663: EQUAL
5664: IFFALSE 5766
// begin eventVar5 = 1 ;
5666: LD_ADDR_EXP 41
5670: PUSH
5671: LD_INT 1
5673: ST_TO_ADDR
// DialogueOn ;
5674: CALL_OW 6
// Say ( Stevens , D4-Sci1-1 ) ;
5678: LD_EXP 2
5682: PPUSH
5683: LD_STRING D4-Sci1-1
5685: PPUSH
5686: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
5690: LD_EXP 1
5694: PPUSH
5695: LD_STRING D4-JMM-1
5697: PPUSH
5698: CALL_OW 88
// Say ( Stevens , D4-Sci1-2 ) ;
5702: LD_EXP 2
5706: PPUSH
5707: LD_STRING D4-Sci1-2
5709: PPUSH
5710: CALL_OW 88
// Say ( JMM , D4-JMM-2 ) ;
5714: LD_EXP 1
5718: PPUSH
5719: LD_STRING D4-JMM-2
5721: PPUSH
5722: CALL_OW 88
// Say ( Stevens , D4-Sci1-3 ) ;
5726: LD_EXP 2
5730: PPUSH
5731: LD_STRING D4-Sci1-3
5733: PPUSH
5734: CALL_OW 88
// Say ( JMM , D4-JMM-3 ) ;
5738: LD_EXP 1
5742: PPUSH
5743: LD_STRING D4-JMM-3
5745: PPUSH
5746: CALL_OW 88
// Say ( JMM , D4-JMM-3a ) ;
5750: LD_EXP 1
5754: PPUSH
5755: LD_STRING D4-JMM-3a
5757: PPUSH
5758: CALL_OW 88
// DialogueOff ;
5762: CALL_OW 7
// end ; end ; end ;
5766: PPOPN 5
5768: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 1 and GetBType ( building ) = 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) = 1 then
5769: LD_VAR 0 1
5773: PPUSH
5774: CALL_OW 255
5778: PUSH
5779: LD_INT 1
5781: EQUAL
5782: PUSH
5783: LD_VAR 0 1
5787: PPUSH
5788: CALL_OW 266
5792: PUSH
5793: LD_INT 0
5795: EQUAL
5796: AND
5797: PUSH
5798: LD_INT 22
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: LD_INT 21
5810: PUSH
5811: LD_INT 3
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: LD_INT 30
5823: PUSH
5824: LD_INT 0
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 30
5833: PUSH
5834: LD_INT 1
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 69
5855: PUSH
5856: LD_INT 1
5858: EQUAL
5859: AND
5860: IFFALSE 5874
// SetBName ( building , omega ) ;
5862: LD_VAR 0 1
5866: PPUSH
5867: LD_STRING omega
5869: PPUSH
5870: CALL_OW 500
// end ; end_of_file
5874: PPOPN 2
5876: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5877: LD_INT 0
5879: PPUSH
5880: PPUSH
// if exist_mode then
5881: LD_VAR 0 2
5885: IFFALSE 5904
// unit := CreateCharacter ( ident ) else
5887: LD_ADDR_VAR 0 4
5891: PUSH
5892: LD_VAR 0 1
5896: PPUSH
5897: CALL_OW 34
5901: ST_TO_ADDR
5902: GO 5919
// unit := NewCharacter ( ident ) ;
5904: LD_ADDR_VAR 0 4
5908: PUSH
5909: LD_VAR 0 1
5913: PPUSH
5914: CALL_OW 25
5918: ST_TO_ADDR
// result := unit ;
5919: LD_ADDR_VAR 0 3
5923: PUSH
5924: LD_VAR 0 4
5928: ST_TO_ADDR
// end ;
5929: LD_VAR 0 3
5933: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
5934: LD_INT 0
5936: PPUSH
5937: PPUSH
5938: PPUSH
// characters := characters diff [ JMM , Stevens , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Powell ] ;
5939: LD_ADDR_VAR 0 1
5943: PUSH
5944: LD_VAR 0 1
5948: PUSH
5949: LD_EXP 1
5953: PUSH
5954: LD_EXP 2
5958: PUSH
5959: LD_EXP 3
5963: PUSH
5964: LD_EXP 4
5968: PUSH
5969: LD_EXP 5
5973: PUSH
5974: LD_EXP 6
5978: PUSH
5979: LD_EXP 7
5983: PUSH
5984: LD_EXP 8
5988: PUSH
5989: LD_EXP 9
5993: PUSH
5994: LD_EXP 10
5998: PUSH
5999: LD_EXP 11
6003: PUSH
6004: LD_EXP 12
6008: PUSH
6009: LD_EXP 13
6013: PUSH
6014: LD_EXP 14
6018: PUSH
6019: LD_EXP 15
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: DIFF
6041: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
6042: LD_ADDR_VAR 0 6
6046: PUSH
6047: LD_VAR 0 1
6051: PUSH
6052: LD_INT 1
6054: PPUSH
6055: LD_VAR 0 1
6059: PPUSH
6060: CALL_OW 12
6064: ARRAY
6065: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6066: LD_VAR 0 6
6070: PPUSH
6071: CALL_OW 258
6075: PUSH
6076: LD_INT 1
6078: EQUAL
6079: IFFALSE 6097
// Say ( speaker , dialogMID ) else
6081: LD_VAR 0 6
6085: PPUSH
6086: LD_VAR 0 2
6090: PPUSH
6091: CALL_OW 88
6095: GO 6111
// Say ( speaker , dialogFID ) ;
6097: LD_VAR 0 6
6101: PPUSH
6102: LD_VAR 0 3
6106: PPUSH
6107: CALL_OW 88
// result := speaker ;
6111: LD_ADDR_VAR 0 4
6115: PUSH
6116: LD_VAR 0 6
6120: ST_TO_ADDR
// end ;
6121: LD_VAR 0 4
6125: RET
// export function PrepareDifficulty ; begin
6126: LD_INT 0
6128: PPUSH
// SetTech ( 5 , 8 , state_researched ) ;
6129: LD_INT 5
6131: PPUSH
6132: LD_INT 8
6134: PPUSH
6135: LD_INT 2
6137: PPUSH
6138: CALL_OW 322
// if difficulty = 1 then
6142: LD_OWVAR 67
6146: PUSH
6147: LD_INT 1
6149: EQUAL
6150: IFFALSE 6269
// begin SetTech ( 66 , 8 , state_researched ) ;
6152: LD_INT 66
6154: PPUSH
6155: LD_INT 8
6157: PPUSH
6158: LD_INT 2
6160: PPUSH
6161: CALL_OW 322
// SetTech ( 67 , 8 , state_disabled ) ;
6165: LD_INT 67
6167: PPUSH
6168: LD_INT 8
6170: PPUSH
6171: LD_INT 0
6173: PPUSH
6174: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6178: LD_INT 68
6180: PPUSH
6181: LD_INT 8
6183: PPUSH
6184: LD_INT 0
6186: PPUSH
6187: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6191: LD_INT 51
6193: PPUSH
6194: LD_INT 8
6196: PPUSH
6197: LD_INT 2
6199: PPUSH
6200: CALL_OW 322
// SetTech ( 52 , 8 , state_disabled ) ;
6204: LD_INT 52
6206: PPUSH
6207: LD_INT 8
6209: PPUSH
6210: LD_INT 0
6212: PPUSH
6213: CALL_OW 322
// SetTech ( 53 , 8 , state_disabled ) ;
6217: LD_INT 53
6219: PPUSH
6220: LD_INT 8
6222: PPUSH
6223: LD_INT 0
6225: PPUSH
6226: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6230: LD_INT 60
6232: PPUSH
6233: LD_INT 8
6235: PPUSH
6236: LD_INT 2
6238: PPUSH
6239: CALL_OW 322
// SetTech ( 61 , 8 , state_disabled ) ;
6243: LD_INT 61
6245: PPUSH
6246: LD_INT 8
6248: PPUSH
6249: LD_INT 0
6251: PPUSH
6252: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6256: LD_INT 62
6258: PPUSH
6259: LD_INT 8
6261: PPUSH
6262: LD_INT 0
6264: PPUSH
6265: CALL_OW 322
// end ; if difficulty = 2 then
6269: LD_OWVAR 67
6273: PUSH
6274: LD_INT 2
6276: EQUAL
6277: IFFALSE 6396
// begin SetTech ( 66 , 8 , state_researched ) ;
6279: LD_INT 66
6281: PPUSH
6282: LD_INT 8
6284: PPUSH
6285: LD_INT 2
6287: PPUSH
6288: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6292: LD_INT 67
6294: PPUSH
6295: LD_INT 8
6297: PPUSH
6298: LD_INT 2
6300: PPUSH
6301: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6305: LD_INT 68
6307: PPUSH
6308: LD_INT 8
6310: PPUSH
6311: LD_INT 0
6313: PPUSH
6314: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6318: LD_INT 51
6320: PPUSH
6321: LD_INT 8
6323: PPUSH
6324: LD_INT 2
6326: PPUSH
6327: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6331: LD_INT 52
6333: PPUSH
6334: LD_INT 8
6336: PPUSH
6337: LD_INT 2
6339: PPUSH
6340: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6344: LD_INT 53
6346: PPUSH
6347: LD_INT 8
6349: PPUSH
6350: LD_INT 2
6352: PPUSH
6353: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6357: LD_INT 60
6359: PPUSH
6360: LD_INT 8
6362: PPUSH
6363: LD_INT 2
6365: PPUSH
6366: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6370: LD_INT 61
6372: PPUSH
6373: LD_INT 8
6375: PPUSH
6376: LD_INT 2
6378: PPUSH
6379: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6383: LD_INT 62
6385: PPUSH
6386: LD_INT 8
6388: PPUSH
6389: LD_INT 0
6391: PPUSH
6392: CALL_OW 322
// end ; if difficulty = 3 then
6396: LD_OWVAR 67
6400: PUSH
6401: LD_INT 3
6403: EQUAL
6404: IFFALSE 6523
// begin SetTech ( 66 , 8 , state_researched ) ;
6406: LD_INT 66
6408: PPUSH
6409: LD_INT 8
6411: PPUSH
6412: LD_INT 2
6414: PPUSH
6415: CALL_OW 322
// SetTech ( 67 , 8 , state_researched ) ;
6419: LD_INT 67
6421: PPUSH
6422: LD_INT 8
6424: PPUSH
6425: LD_INT 2
6427: PPUSH
6428: CALL_OW 322
// SetTech ( 68 , 8 , state_disabled ) ;
6432: LD_INT 68
6434: PPUSH
6435: LD_INT 8
6437: PPUSH
6438: LD_INT 0
6440: PPUSH
6441: CALL_OW 322
// SetTech ( 51 , 8 , state_researched ) ;
6445: LD_INT 51
6447: PPUSH
6448: LD_INT 8
6450: PPUSH
6451: LD_INT 2
6453: PPUSH
6454: CALL_OW 322
// SetTech ( 52 , 8 , state_researched ) ;
6458: LD_INT 52
6460: PPUSH
6461: LD_INT 8
6463: PPUSH
6464: LD_INT 2
6466: PPUSH
6467: CALL_OW 322
// SetTech ( 53 , 8 , state_researched ) ;
6471: LD_INT 53
6473: PPUSH
6474: LD_INT 8
6476: PPUSH
6477: LD_INT 2
6479: PPUSH
6480: CALL_OW 322
// SetTech ( 60 , 8 , state_researched ) ;
6484: LD_INT 60
6486: PPUSH
6487: LD_INT 8
6489: PPUSH
6490: LD_INT 2
6492: PPUSH
6493: CALL_OW 322
// SetTech ( 61 , 8 , state_researched ) ;
6497: LD_INT 61
6499: PPUSH
6500: LD_INT 8
6502: PPUSH
6503: LD_INT 2
6505: PPUSH
6506: CALL_OW 322
// SetTech ( 62 , 8 , state_disabled ) ;
6510: LD_INT 62
6512: PPUSH
6513: LD_INT 8
6515: PPUSH
6516: LD_INT 0
6518: PPUSH
6519: CALL_OW 322
// end ; end ;
6523: LD_VAR 0 1
6527: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6528: LD_INT 0
6530: PPUSH
6531: PPUSH
6532: PPUSH
6533: PPUSH
6534: PPUSH
6535: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6536: LD_ADDR_VAR 0 7
6540: PUSH
6541: LD_INT 22
6543: PUSH
6544: LD_VAR 0 1
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: LD_INT 25
6555: PUSH
6556: LD_INT 9
6558: PUSH
6559: EMPTY
6560: LIST
6561: LIST
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PPUSH
6567: CALL_OW 69
6571: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6572: LD_ADDR_VAR 0 8
6576: PUSH
6577: LD_INT 22
6579: PUSH
6580: LD_VAR 0 2
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PUSH
6589: LD_INT 3
6591: PUSH
6592: LD_INT 21
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PPUSH
6610: CALL_OW 69
6614: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6615: LD_ADDR_VAR 0 5
6619: PUSH
6620: LD_INT 1
6622: PPUSH
6623: LD_INT 3
6625: PPUSH
6626: CALL_OW 12
6630: ST_TO_ADDR
// for i = 1 to list do
6631: LD_ADDR_VAR 0 6
6635: PUSH
6636: DOUBLE
6637: LD_INT 1
6639: DEC
6640: ST_TO_ADDR
6641: LD_VAR 0 7
6645: PUSH
6646: FOR_TO
6647: IFFALSE 6829
// for ta in filter do
6649: LD_ADDR_VAR 0 4
6653: PUSH
6654: LD_VAR 0 8
6658: PUSH
6659: FOR_IN
6660: IFFALSE 6825
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6662: LD_VAR 0 7
6666: PUSH
6667: LD_VAR 0 6
6671: ARRAY
6672: PPUSH
6673: LD_VAR 0 4
6677: PPUSH
6678: CALL_OW 296
6682: PUSH
6683: LD_INT 13
6685: LESSEQUAL
6686: IFFALSE 6823
// begin case c of 1 :
6688: LD_VAR 0 5
6692: PUSH
6693: LD_INT 1
6695: DOUBLE
6696: EQUAL
6697: IFTRUE 6701
6699: GO 6739
6701: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6702: LD_VAR 0 7
6706: PUSH
6707: LD_VAR 0 6
6711: ARRAY
6712: PPUSH
6713: LD_VAR 0 4
6717: PPUSH
6718: CALL_OW 250
6722: PPUSH
6723: LD_VAR 0 4
6727: PPUSH
6728: CALL_OW 251
6732: PPUSH
6733: CALL_OW 154
6737: GO 6823
6739: LD_INT 2
6741: DOUBLE
6742: EQUAL
6743: IFTRUE 6747
6745: GO 6811
6747: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6748: LD_VAR 0 7
6752: PUSH
6753: LD_VAR 0 6
6757: ARRAY
6758: PPUSH
6759: LD_VAR 0 4
6763: PPUSH
6764: CALL_OW 250
6768: PUSH
6769: LD_INT 1
6771: NEG
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: CALL_OW 12
6780: PLUS
6781: PPUSH
6782: LD_VAR 0 4
6786: PPUSH
6787: CALL_OW 251
6791: PUSH
6792: LD_INT 1
6794: NEG
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: CALL_OW 12
6803: PLUS
6804: PPUSH
6805: CALL_OW 153
6809: GO 6823
6811: LD_INT 3
6813: DOUBLE
6814: EQUAL
6815: IFTRUE 6819
6817: GO 6822
6819: POP
// ; end ;
6820: GO 6823
6822: POP
// end ; end ;
6823: GO 6659
6825: POP
6826: POP
6827: GO 6646
6829: POP
6830: POP
// end ;
6831: LD_VAR 0 3
6835: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
6836: LD_INT 0
6838: PPUSH
6839: PPUSH
// for i in charactersList do
6840: LD_ADDR_VAR 0 4
6844: PUSH
6845: LD_VAR 0 1
6849: PUSH
6850: FOR_IN
6851: IFFALSE 6869
// SaveCharacters ( i , ident ) ;
6853: LD_VAR 0 4
6857: PPUSH
6858: LD_VAR 0 2
6862: PPUSH
6863: CALL_OW 38
6867: GO 6850
6869: POP
6870: POP
// end ;
6871: LD_VAR 0 3
6875: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6876: LD_INT 0
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
6885: PPUSH
6886: PPUSH
6887: PPUSH
6888: PPUSH
// for i = 1 to medicCount do
6889: LD_ADDR_VAR 0 13
6893: PUSH
6894: DOUBLE
6895: LD_INT 1
6897: DEC
6898: ST_TO_ADDR
6899: LD_VAR 0 7
6903: PUSH
6904: FOR_TO
6905: IFFALSE 6987
// begin uc_side = side ;
6907: LD_ADDR_OWVAR 20
6911: PUSH
6912: LD_VAR 0 1
6916: ST_TO_ADDR
// uc_nation = nation ;
6917: LD_ADDR_OWVAR 21
6921: PUSH
6922: LD_VAR 0 2
6926: ST_TO_ADDR
// hc_name =  ;
6927: LD_ADDR_OWVAR 26
6931: PUSH
6932: LD_STRING 
6934: ST_TO_ADDR
// hc_gallery =  ;
6935: LD_ADDR_OWVAR 33
6939: PUSH
6940: LD_STRING 
6942: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6943: LD_INT 0
6945: PPUSH
6946: LD_INT 4
6948: PPUSH
6949: LD_VAR 0 8
6953: PPUSH
6954: CALL_OW 380
// un = CreateHuman ;
6958: LD_ADDR_VAR 0 15
6962: PUSH
6963: CALL_OW 44
6967: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6968: LD_VAR 0 15
6972: PPUSH
6973: LD_VAR 0 9
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 49
// end ;
6985: GO 6904
6987: POP
6988: POP
// for i = 1 to soldierCount do
6989: LD_ADDR_VAR 0 13
6993: PUSH
6994: DOUBLE
6995: LD_INT 1
6997: DEC
6998: ST_TO_ADDR
6999: LD_VAR 0 3
7003: PUSH
7004: FOR_TO
7005: IFFALSE 7087
// begin uc_side = side ;
7007: LD_ADDR_OWVAR 20
7011: PUSH
7012: LD_VAR 0 1
7016: ST_TO_ADDR
// uc_nation = nation ;
7017: LD_ADDR_OWVAR 21
7021: PUSH
7022: LD_VAR 0 2
7026: ST_TO_ADDR
// hc_name =  ;
7027: LD_ADDR_OWVAR 26
7031: PUSH
7032: LD_STRING 
7034: ST_TO_ADDR
// hc_gallery =  ;
7035: LD_ADDR_OWVAR 33
7039: PUSH
7040: LD_STRING 
7042: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7043: LD_INT 0
7045: PPUSH
7046: LD_INT 1
7048: PPUSH
7049: LD_VAR 0 8
7053: PPUSH
7054: CALL_OW 380
// un = CreateHuman ;
7058: LD_ADDR_VAR 0 15
7062: PUSH
7063: CALL_OW 44
7067: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7068: LD_VAR 0 15
7072: PPUSH
7073: LD_VAR 0 9
7077: PPUSH
7078: LD_INT 0
7080: PPUSH
7081: CALL_OW 49
// end ;
7085: GO 7004
7087: POP
7088: POP
// for i = 1 to sniperCount do
7089: LD_ADDR_VAR 0 13
7093: PUSH
7094: DOUBLE
7095: LD_INT 1
7097: DEC
7098: ST_TO_ADDR
7099: LD_VAR 0 4
7103: PUSH
7104: FOR_TO
7105: IFFALSE 7187
// begin uc_side = side ;
7107: LD_ADDR_OWVAR 20
7111: PUSH
7112: LD_VAR 0 1
7116: ST_TO_ADDR
// uc_nation = nation ;
7117: LD_ADDR_OWVAR 21
7121: PUSH
7122: LD_VAR 0 2
7126: ST_TO_ADDR
// hc_name =  ;
7127: LD_ADDR_OWVAR 26
7131: PUSH
7132: LD_STRING 
7134: ST_TO_ADDR
// hc_gallery =  ;
7135: LD_ADDR_OWVAR 33
7139: PUSH
7140: LD_STRING 
7142: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7143: LD_INT 0
7145: PPUSH
7146: LD_INT 5
7148: PPUSH
7149: LD_VAR 0 8
7153: PPUSH
7154: CALL_OW 380
// un = CreateHuman ;
7158: LD_ADDR_VAR 0 15
7162: PUSH
7163: CALL_OW 44
7167: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7168: LD_VAR 0 15
7172: PPUSH
7173: LD_VAR 0 9
7177: PPUSH
7178: LD_INT 0
7180: PPUSH
7181: CALL_OW 49
// end ;
7185: GO 7104
7187: POP
7188: POP
// for i = 1 to bazookCount do
7189: LD_ADDR_VAR 0 13
7193: PUSH
7194: DOUBLE
7195: LD_INT 1
7197: DEC
7198: ST_TO_ADDR
7199: LD_VAR 0 5
7203: PUSH
7204: FOR_TO
7205: IFFALSE 7287
// begin uc_side = side ;
7207: LD_ADDR_OWVAR 20
7211: PUSH
7212: LD_VAR 0 1
7216: ST_TO_ADDR
// uc_nation = nation ;
7217: LD_ADDR_OWVAR 21
7221: PUSH
7222: LD_VAR 0 2
7226: ST_TO_ADDR
// hc_name =  ;
7227: LD_ADDR_OWVAR 26
7231: PUSH
7232: LD_STRING 
7234: ST_TO_ADDR
// hc_gallery =  ;
7235: LD_ADDR_OWVAR 33
7239: PUSH
7240: LD_STRING 
7242: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7243: LD_INT 0
7245: PPUSH
7246: LD_INT 9
7248: PPUSH
7249: LD_VAR 0 8
7253: PPUSH
7254: CALL_OW 380
// un = CreateHuman ;
7258: LD_ADDR_VAR 0 15
7262: PUSH
7263: CALL_OW 44
7267: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7268: LD_VAR 0 15
7272: PPUSH
7273: LD_VAR 0 9
7277: PPUSH
7278: LD_INT 0
7280: PPUSH
7281: CALL_OW 49
// end ;
7285: GO 7204
7287: POP
7288: POP
// for i = 1 to mortalCount do
7289: LD_ADDR_VAR 0 13
7293: PUSH
7294: DOUBLE
7295: LD_INT 1
7297: DEC
7298: ST_TO_ADDR
7299: LD_VAR 0 6
7303: PUSH
7304: FOR_TO
7305: IFFALSE 7387
// begin uc_side = side ;
7307: LD_ADDR_OWVAR 20
7311: PUSH
7312: LD_VAR 0 1
7316: ST_TO_ADDR
// uc_nation = nation ;
7317: LD_ADDR_OWVAR 21
7321: PUSH
7322: LD_VAR 0 2
7326: ST_TO_ADDR
// hc_name =  ;
7327: LD_ADDR_OWVAR 26
7331: PUSH
7332: LD_STRING 
7334: ST_TO_ADDR
// hc_gallery =  ;
7335: LD_ADDR_OWVAR 33
7339: PUSH
7340: LD_STRING 
7342: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7343: LD_INT 0
7345: PPUSH
7346: LD_INT 8
7348: PPUSH
7349: LD_VAR 0 8
7353: PPUSH
7354: CALL_OW 380
// un = CreateHuman ;
7358: LD_ADDR_VAR 0 15
7362: PUSH
7363: CALL_OW 44
7367: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7368: LD_VAR 0 15
7372: PPUSH
7373: LD_VAR 0 9
7377: PPUSH
7378: LD_INT 0
7380: PPUSH
7381: CALL_OW 49
// end ;
7385: GO 7304
7387: POP
7388: POP
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7389: LD_ADDR_VAR 0 17
7393: PUSH
7394: LD_INT 22
7396: PUSH
7397: LD_VAR 0 1
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 25
7408: PUSH
7409: LD_INT 4
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: EMPTY
7417: LIST
7418: LIST
7419: PPUSH
7420: CALL_OW 69
7424: ST_TO_ADDR
// for i in medic_list do
7425: LD_ADDR_VAR 0 13
7429: PUSH
7430: LD_VAR 0 17
7434: PUSH
7435: FOR_IN
7436: IFFALSE 7454
// ComMoveToArea ( i , healArea ) ;
7438: LD_VAR 0 13
7442: PPUSH
7443: LD_VAR 0 10
7447: PPUSH
7448: CALL_OW 113
7452: GO 7435
7454: POP
7455: POP
// repeat wait ( 0 0$1 ) ;
7456: LD_INT 35
7458: PPUSH
7459: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7463: LD_ADDR_VAR 0 16
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_VAR 0 1
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 1
7482: PUSH
7483: LD_INT 3
7485: PUSH
7486: LD_INT 24
7488: PUSH
7489: LD_INT 550
7491: PUSH
7492: EMPTY
7493: LIST
7494: LIST
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_INT 24
7502: PUSH
7503: LD_INT 250
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PPUSH
7519: CALL_OW 69
7523: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7524: LD_ADDR_VAR 0 18
7528: PUSH
7529: LD_INT 22
7531: PUSH
7532: LD_VAR 0 1
7536: PUSH
7537: EMPTY
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 2
7543: PUSH
7544: LD_INT 25
7546: PUSH
7547: LD_INT 1
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 25
7556: PUSH
7557: LD_INT 5
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: PUSH
7564: LD_INT 25
7566: PUSH
7567: LD_INT 8
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: PUSH
7574: LD_INT 25
7576: PUSH
7577: LD_INT 9
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 24
7593: PUSH
7594: LD_INT 1000
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: ST_TO_ADDR
// if medicCount > 0 then
7611: LD_VAR 0 7
7615: PUSH
7616: LD_INT 0
7618: GREATER
7619: IFFALSE 7693
// begin if damageUnit_list > 0 then
7621: LD_VAR 0 16
7625: PUSH
7626: LD_INT 0
7628: GREATER
7629: IFFALSE 7693
// begin for i in damageUnit_list do
7631: LD_ADDR_VAR 0 13
7635: PUSH
7636: LD_VAR 0 16
7640: PUSH
7641: FOR_IN
7642: IFFALSE 7691
// begin ComMoveToArea ( i , healArea ) ;
7644: LD_VAR 0 13
7648: PPUSH
7649: LD_VAR 0 10
7653: PPUSH
7654: CALL_OW 113
// for j in medic_list do
7658: LD_ADDR_VAR 0 14
7662: PUSH
7663: LD_VAR 0 17
7667: PUSH
7668: FOR_IN
7669: IFFALSE 7687
// AddComHeal ( j , i ) ;
7671: LD_VAR 0 14
7675: PPUSH
7676: LD_VAR 0 13
7680: PPUSH
7681: CALL_OW 188
7685: GO 7668
7687: POP
7688: POP
// end ;
7689: GO 7641
7691: POP
7692: POP
// end ; end ; for i in soldiersOK_list do
7693: LD_ADDR_VAR 0 13
7697: PUSH
7698: LD_VAR 0 18
7702: PUSH
7703: FOR_IN
7704: IFFALSE 7880
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7706: LD_ADDR_VAR 0 21
7710: PUSH
7711: LD_INT 22
7713: PUSH
7714: LD_VAR 0 11
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PPUSH
7723: CALL_OW 69
7727: PPUSH
7728: LD_VAR 0 13
7732: PPUSH
7733: CALL_OW 74
7737: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7738: LD_ADDR_VAR 0 22
7742: PUSH
7743: LD_INT 22
7745: PUSH
7746: LD_VAR 0 11
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 2
7757: PUSH
7758: LD_INT 59
7760: PUSH
7761: EMPTY
7762: LIST
7763: PUSH
7764: LD_INT 21
7766: PUSH
7767: LD_INT 1
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 21
7776: PUSH
7777: LD_INT 2
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: EMPTY
7791: LIST
7792: LIST
7793: PUSH
7794: EMPTY
7795: LIST
7796: PPUSH
7797: CALL_OW 69
7801: PPUSH
7802: LD_VAR 0 13
7806: PPUSH
7807: CALL_OW 74
7811: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7812: LD_VAR 0 13
7816: PPUSH
7817: LD_VAR 0 21
7821: PPUSH
7822: CALL_OW 296
7826: PUSH
7827: LD_INT 8
7829: PLUS
7830: PUSH
7831: LD_VAR 0 13
7835: PPUSH
7836: LD_VAR 0 22
7840: PPUSH
7841: CALL_OW 296
7845: LESS
7846: IFFALSE 7864
// begin ComAttackUnit ( i , target1 ) ;
7848: LD_VAR 0 13
7852: PPUSH
7853: LD_VAR 0 21
7857: PPUSH
7858: CALL_OW 115
// end else
7862: GO 7878
// begin ComAttackUnit ( i , target2 ) ;
7864: LD_VAR 0 13
7868: PPUSH
7869: LD_VAR 0 22
7873: PPUSH
7874: CALL_OW 115
// end ; end ;
7878: GO 7703
7880: POP
7881: POP
// until soldiersOK_list = [ ] ;
7882: LD_VAR 0 18
7886: PUSH
7887: EMPTY
7888: EQUAL
7889: IFFALSE 7456
// end ;
7891: LD_VAR 0 12
7895: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
7896: LD_INT 0
7898: PPUSH
7899: PPUSH
7900: PPUSH
7901: PPUSH
7902: PPUSH
7903: PPUSH
7904: PPUSH
7905: PPUSH
7906: PPUSH
7907: PPUSH
7908: PPUSH
// amChassisTab = [ ] ;
7909: LD_ADDR_VAR 0 19
7913: PUSH
7914: EMPTY
7915: ST_TO_ADDR
// arChassisTab = [ ] ;
7916: LD_ADDR_VAR 0 18
7920: PUSH
7921: EMPTY
7922: ST_TO_ADDR
// ruChassisTab = [ ] ;
7923: LD_ADDR_VAR 0 17
7927: PUSH
7928: EMPTY
7929: ST_TO_ADDR
// for i = 1 to vehCount do
7930: LD_ADDR_VAR 0 13
7934: PUSH
7935: DOUBLE
7936: LD_INT 1
7938: DEC
7939: ST_TO_ADDR
7940: LD_VAR 0 3
7944: PUSH
7945: FOR_TO
7946: IFFALSE 9370
// begin wait ( 0 0$01 ) ;
7948: LD_INT 35
7950: PPUSH
7951: CALL_OW 67
// if nation = 1 then
7955: LD_VAR 0 5
7959: PUSH
7960: LD_INT 1
7962: EQUAL
7963: IFFALSE 8444
// begin uc_side = side ;
7965: LD_ADDR_OWVAR 20
7969: PUSH
7970: LD_VAR 0 2
7974: ST_TO_ADDR
// uc_nation = nation ;
7975: LD_ADDR_OWVAR 21
7979: PUSH
7980: LD_VAR 0 5
7984: ST_TO_ADDR
// vc_engine = vehengine ;
7985: LD_ADDR_OWVAR 39
7989: PUSH
7990: LD_VAR 0 6
7994: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
7995: LD_ADDR_OWVAR 40
7999: PUSH
8000: LD_VAR 0 10
8004: PUSH
8005: LD_INT 1
8007: PPUSH
8008: LD_VAR 0 10
8012: PPUSH
8013: CALL_OW 12
8017: ARRAY
8018: ST_TO_ADDR
// for j = 1 to AMWeapon do
8019: LD_ADDR_VAR 0 14
8023: PUSH
8024: DOUBLE
8025: LD_INT 1
8027: DEC
8028: ST_TO_ADDR
8029: LD_VAR 0 10
8033: PUSH
8034: FOR_TO
8035: IFFALSE 8336
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8037: LD_VAR 0 10
8041: PUSH
8042: LD_VAR 0 14
8046: ARRAY
8047: PUSH
8048: LD_INT 2
8050: EQUAL
8051: PUSH
8052: LD_VAR 0 10
8056: PUSH
8057: LD_VAR 0 14
8061: ARRAY
8062: PUSH
8063: LD_INT 3
8065: EQUAL
8066: OR
8067: IFFALSE 8120
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8069: LD_ADDR_VAR 0 19
8073: PUSH
8074: LD_INT 1
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: LD_INT 3
8082: PUSH
8083: LD_INT 4
8085: PUSH
8086: LD_INT 5
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8096: LD_ADDR_OWVAR 37
8100: PUSH
8101: LD_VAR 0 19
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: LD_VAR 0 19
8113: PPUSH
8114: CALL_OW 12
8118: ARRAY
8119: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
8120: LD_VAR 0 10
8124: PUSH
8125: LD_VAR 0 14
8129: ARRAY
8130: PUSH
8131: LD_INT 4
8133: EQUAL
8134: PUSH
8135: LD_VAR 0 10
8139: PUSH
8140: LD_VAR 0 14
8144: ARRAY
8145: PUSH
8146: LD_INT 5
8148: EQUAL
8149: OR
8150: PUSH
8151: LD_VAR 0 10
8155: PUSH
8156: LD_VAR 0 14
8160: ARRAY
8161: PUSH
8162: LD_INT 9
8164: EQUAL
8165: OR
8166: PUSH
8167: LD_VAR 0 10
8171: PUSH
8172: LD_VAR 0 14
8176: ARRAY
8177: PUSH
8178: LD_INT 11
8180: EQUAL
8181: OR
8182: PUSH
8183: LD_VAR 0 10
8187: PUSH
8188: LD_VAR 0 14
8192: ARRAY
8193: PUSH
8194: LD_INT 7
8196: EQUAL
8197: OR
8198: IFFALSE 8247
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
8200: LD_ADDR_VAR 0 19
8204: PUSH
8205: LD_INT 2
8207: PUSH
8208: LD_INT 3
8210: PUSH
8211: LD_INT 4
8213: PUSH
8214: LD_INT 5
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8223: LD_ADDR_OWVAR 37
8227: PUSH
8228: LD_VAR 0 19
8232: PUSH
8233: LD_INT 1
8235: PPUSH
8236: LD_VAR 0 19
8240: PPUSH
8241: CALL_OW 12
8245: ARRAY
8246: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
8247: LD_VAR 0 10
8251: PUSH
8252: LD_VAR 0 14
8256: ARRAY
8257: PUSH
8258: LD_INT 8
8260: EQUAL
8261: PUSH
8262: LD_VAR 0 10
8266: PUSH
8267: LD_VAR 0 14
8271: ARRAY
8272: PUSH
8273: LD_INT 6
8275: EQUAL
8276: OR
8277: PUSH
8278: LD_VAR 0 10
8282: PUSH
8283: LD_VAR 0 14
8287: ARRAY
8288: PUSH
8289: LD_INT 10
8291: EQUAL
8292: OR
8293: IFFALSE 8334
// begin amChassisTab = [ 4 , 5 ] ;
8295: LD_ADDR_VAR 0 19
8299: PUSH
8300: LD_INT 4
8302: PUSH
8303: LD_INT 5
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
8310: LD_ADDR_OWVAR 37
8314: PUSH
8315: LD_VAR 0 19
8319: PUSH
8320: LD_INT 1
8322: PPUSH
8323: LD_VAR 0 19
8327: PPUSH
8328: CALL_OW 12
8332: ARRAY
8333: ST_TO_ADDR
// end ; end ;
8334: GO 8034
8336: POP
8337: POP
// veh = CreateVehicle ;
8338: LD_ADDR_VAR 0 16
8342: PUSH
8343: CALL_OW 45
8347: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8348: LD_VAR 0 16
8352: PPUSH
8353: LD_VAR 0 1
8357: PPUSH
8358: LD_INT 0
8360: PPUSH
8361: CALL_OW 49
// if vc_control = 1 then
8365: LD_OWVAR 38
8369: PUSH
8370: LD_INT 1
8372: EQUAL
8373: IFFALSE 8430
// begin hc_gallery =  ;
8375: LD_ADDR_OWVAR 33
8379: PUSH
8380: LD_STRING 
8382: ST_TO_ADDR
// hc_name =  ;
8383: LD_ADDR_OWVAR 26
8387: PUSH
8388: LD_STRING 
8390: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 3
8396: PPUSH
8397: LD_VAR 0 4
8401: PPUSH
8402: CALL_OW 380
// un = CreateHuman ;
8406: LD_ADDR_VAR 0 15
8410: PUSH
8411: CALL_OW 44
8415: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8416: LD_VAR 0 15
8420: PPUSH
8421: LD_VAR 0 16
8425: PPUSH
8426: CALL_OW 52
// end ; i = i + 1 ;
8430: LD_ADDR_VAR 0 13
8434: PUSH
8435: LD_VAR 0 13
8439: PUSH
8440: LD_INT 1
8442: PLUS
8443: ST_TO_ADDR
// end ; if nation = 2 then
8444: LD_VAR 0 5
8448: PUSH
8449: LD_INT 2
8451: EQUAL
8452: IFFALSE 8954
// begin uc_side = side ;
8454: LD_ADDR_OWVAR 20
8458: PUSH
8459: LD_VAR 0 2
8463: ST_TO_ADDR
// uc_nation = nation ;
8464: LD_ADDR_OWVAR 21
8468: PUSH
8469: LD_VAR 0 5
8473: ST_TO_ADDR
// vc_engine = vehengine ;
8474: LD_ADDR_OWVAR 39
8478: PUSH
8479: LD_VAR 0 6
8483: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_control , control_remote ] , [ f_ok ] ] ) <= 8 then
8484: LD_INT 22
8486: PUSH
8487: LD_VAR 0 2
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: LD_INT 21
8498: PUSH
8499: LD_INT 2
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: PUSH
8506: LD_INT 33
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PUSH
8516: LD_INT 50
8518: PUSH
8519: EMPTY
8520: LIST
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: PPUSH
8528: CALL_OW 69
8532: PUSH
8533: LD_INT 8
8535: LESSEQUAL
8536: IFFALSE 8564
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] else
8538: LD_ADDR_OWVAR 38
8542: PUSH
8543: LD_VAR 0 7
8547: PUSH
8548: LD_INT 1
8550: PPUSH
8551: LD_VAR 0 7
8555: PPUSH
8556: CALL_OW 12
8560: ARRAY
8561: ST_TO_ADDR
8562: GO 8572
// vc_control = control_apeman ;
8564: LD_ADDR_OWVAR 38
8568: PUSH
8569: LD_INT 5
8571: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
8572: LD_ADDR_OWVAR 40
8576: PUSH
8577: LD_VAR 0 9
8581: PUSH
8582: LD_INT 1
8584: PPUSH
8585: LD_VAR 0 9
8589: PPUSH
8590: CALL_OW 12
8594: ARRAY
8595: ST_TO_ADDR
// for j = 1 to ARWeapons do
8596: LD_ADDR_VAR 0 14
8600: PUSH
8601: DOUBLE
8602: LD_INT 1
8604: DEC
8605: ST_TO_ADDR
8606: LD_VAR 0 9
8610: PUSH
8611: FOR_TO
8612: IFFALSE 8846
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
8614: LD_VAR 0 9
8618: PUSH
8619: LD_VAR 0 14
8623: ARRAY
8624: PUSH
8625: LD_INT 24
8627: EQUAL
8628: PUSH
8629: LD_VAR 0 9
8633: PUSH
8634: LD_VAR 0 14
8638: ARRAY
8639: PUSH
8640: LD_INT 22
8642: EQUAL
8643: OR
8644: PUSH
8645: LD_VAR 0 9
8649: PUSH
8650: LD_VAR 0 14
8654: ARRAY
8655: PUSH
8656: LD_INT 23
8658: EQUAL
8659: OR
8660: PUSH
8661: LD_VAR 0 9
8665: PUSH
8666: LD_VAR 0 14
8670: ARRAY
8671: PUSH
8672: LD_INT 30
8674: EQUAL
8675: OR
8676: IFFALSE 8725
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
8678: LD_ADDR_VAR 0 18
8682: PUSH
8683: LD_INT 11
8685: PUSH
8686: LD_INT 12
8688: PUSH
8689: LD_INT 13
8691: PUSH
8692: LD_INT 14
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8701: LD_ADDR_OWVAR 37
8705: PUSH
8706: LD_VAR 0 18
8710: PUSH
8711: LD_INT 1
8713: PPUSH
8714: LD_VAR 0 18
8718: PPUSH
8719: CALL_OW 12
8723: ARRAY
8724: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
8725: LD_VAR 0 9
8729: PUSH
8730: LD_VAR 0 14
8734: ARRAY
8735: PUSH
8736: LD_INT 29
8738: EQUAL
8739: PUSH
8740: LD_VAR 0 9
8744: PUSH
8745: LD_VAR 0 14
8749: ARRAY
8750: PUSH
8751: LD_INT 28
8753: EQUAL
8754: OR
8755: PUSH
8756: LD_VAR 0 9
8760: PUSH
8761: LD_VAR 0 14
8765: ARRAY
8766: PUSH
8767: LD_INT 27
8769: EQUAL
8770: OR
8771: PUSH
8772: LD_VAR 0 9
8776: PUSH
8777: LD_VAR 0 14
8781: ARRAY
8782: PUSH
8783: LD_INT 26
8785: EQUAL
8786: OR
8787: PUSH
8788: LD_VAR 0 9
8792: PUSH
8793: LD_VAR 0 14
8797: ARRAY
8798: PUSH
8799: LD_INT 25
8801: EQUAL
8802: OR
8803: IFFALSE 8844
// begin arChassisTab = [ 13 , 14 ] ;
8805: LD_ADDR_VAR 0 18
8809: PUSH
8810: LD_INT 13
8812: PUSH
8813: LD_INT 14
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
8820: LD_ADDR_OWVAR 37
8824: PUSH
8825: LD_VAR 0 18
8829: PUSH
8830: LD_INT 1
8832: PPUSH
8833: LD_VAR 0 18
8837: PPUSH
8838: CALL_OW 12
8842: ARRAY
8843: ST_TO_ADDR
// end ; end ;
8844: GO 8611
8846: POP
8847: POP
// veh = CreateVehicle ;
8848: LD_ADDR_VAR 0 16
8852: PUSH
8853: CALL_OW 45
8857: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
8858: LD_VAR 0 16
8862: PPUSH
8863: LD_VAR 0 1
8867: PPUSH
8868: LD_INT 0
8870: PPUSH
8871: CALL_OW 49
// if vc_control = 1 then
8875: LD_OWVAR 38
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 8940
// begin hc_gallery =  ;
8885: LD_ADDR_OWVAR 33
8889: PUSH
8890: LD_STRING 
8892: ST_TO_ADDR
// hc_name =  ;
8893: LD_ADDR_OWVAR 26
8897: PUSH
8898: LD_STRING 
8900: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
8901: LD_INT 0
8903: PPUSH
8904: LD_INT 3
8906: PPUSH
8907: LD_VAR 0 4
8911: PPUSH
8912: CALL_OW 380
// un = CreateHuman ;
8916: LD_ADDR_VAR 0 15
8920: PUSH
8921: CALL_OW 44
8925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
8926: LD_VAR 0 15
8930: PPUSH
8931: LD_VAR 0 16
8935: PPUSH
8936: CALL_OW 52
// end ; i = i + 1 ;
8940: LD_ADDR_VAR 0 13
8944: PUSH
8945: LD_VAR 0 13
8949: PUSH
8950: LD_INT 1
8952: PLUS
8953: ST_TO_ADDR
// end ; if nation = 3 then
8954: LD_VAR 0 5
8958: PUSH
8959: LD_INT 3
8961: EQUAL
8962: IFFALSE 9368
// begin uc_side = side ;
8964: LD_ADDR_OWVAR 20
8968: PUSH
8969: LD_VAR 0 2
8973: ST_TO_ADDR
// uc_nation = nation ;
8974: LD_ADDR_OWVAR 21
8978: PUSH
8979: LD_VAR 0 5
8983: ST_TO_ADDR
// vc_engine = vehengine ;
8984: LD_ADDR_OWVAR 39
8988: PUSH
8989: LD_VAR 0 6
8993: ST_TO_ADDR
// vc_control = vehcontrol [ Rand ( 1 , vehcontrol ) ] ;
8994: LD_ADDR_OWVAR 38
8998: PUSH
8999: LD_VAR 0 7
9003: PUSH
9004: LD_INT 1
9006: PPUSH
9007: LD_VAR 0 7
9011: PPUSH
9012: CALL_OW 12
9016: ARRAY
9017: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9018: LD_ADDR_OWVAR 40
9022: PUSH
9023: LD_VAR 0 8
9027: PUSH
9028: LD_INT 1
9030: PPUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: CALL_OW 12
9040: ARRAY
9041: ST_TO_ADDR
// for j = 1 to RuWeapons do
9042: LD_ADDR_VAR 0 14
9046: PUSH
9047: DOUBLE
9048: LD_INT 1
9050: DEC
9051: ST_TO_ADDR
9052: LD_VAR 0 8
9056: PUSH
9057: FOR_TO
9058: IFFALSE 9244
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9060: LD_VAR 0 8
9064: PUSH
9065: LD_VAR 0 14
9069: ARRAY
9070: PUSH
9071: LD_INT 42
9073: EQUAL
9074: PUSH
9075: LD_VAR 0 8
9079: PUSH
9080: LD_VAR 0 14
9084: ARRAY
9085: PUSH
9086: LD_INT 43
9088: EQUAL
9089: OR
9090: PUSH
9091: LD_VAR 0 8
9095: PUSH
9096: LD_VAR 0 14
9100: ARRAY
9101: PUSH
9102: LD_INT 44
9104: EQUAL
9105: OR
9106: PUSH
9107: LD_VAR 0 8
9111: PUSH
9112: LD_VAR 0 14
9116: ARRAY
9117: PUSH
9118: LD_INT 45
9120: EQUAL
9121: OR
9122: PUSH
9123: LD_VAR 0 8
9127: PUSH
9128: LD_VAR 0 14
9132: ARRAY
9133: PUSH
9134: LD_INT 49
9136: EQUAL
9137: OR
9138: IFFALSE 9175
// begin ruChassisTab = [ 24 ] ;
9140: LD_ADDR_VAR 0 17
9144: PUSH
9145: LD_INT 24
9147: PUSH
9148: EMPTY
9149: LIST
9150: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9151: LD_ADDR_OWVAR 37
9155: PUSH
9156: LD_VAR 0 17
9160: PUSH
9161: LD_INT 1
9163: PPUSH
9164: LD_VAR 0 17
9168: PPUSH
9169: CALL_OW 12
9173: ARRAY
9174: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
9175: LD_VAR 0 8
9179: PUSH
9180: LD_VAR 0 14
9184: ARRAY
9185: PUSH
9186: LD_INT 46
9188: EQUAL
9189: PUSH
9190: LD_VAR 0 8
9194: PUSH
9195: LD_VAR 0 14
9199: ARRAY
9200: PUSH
9201: LD_INT 47
9203: EQUAL
9204: OR
9205: IFFALSE 9242
// begin ruChassisTab = [ 24 ] ;
9207: LD_ADDR_VAR 0 17
9211: PUSH
9212: LD_INT 24
9214: PUSH
9215: EMPTY
9216: LIST
9217: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9218: LD_ADDR_OWVAR 37
9222: PUSH
9223: LD_VAR 0 17
9227: PUSH
9228: LD_INT 1
9230: PPUSH
9231: LD_VAR 0 17
9235: PPUSH
9236: CALL_OW 12
9240: ARRAY
9241: ST_TO_ADDR
// end ; end ;
9242: GO 9057
9244: POP
9245: POP
// veh = CreateVehicle ;
9246: LD_ADDR_VAR 0 16
9250: PUSH
9251: CALL_OW 45
9255: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9256: LD_VAR 0 16
9260: PPUSH
9261: LD_VAR 0 1
9265: PPUSH
9266: LD_INT 0
9268: PPUSH
9269: CALL_OW 49
// if vc_control = 1 then
9273: LD_OWVAR 38
9277: PUSH
9278: LD_INT 1
9280: EQUAL
9281: IFFALSE 9368
// begin if uc_side = 8 then
9283: LD_OWVAR 20
9287: PUSH
9288: LD_INT 8
9290: EQUAL
9291: IFFALSE 9303
// uc_nation = 2 else
9293: LD_ADDR_OWVAR 21
9297: PUSH
9298: LD_INT 2
9300: ST_TO_ADDR
9301: GO 9313
// uc_nation = nation ;
9303: LD_ADDR_OWVAR 21
9307: PUSH
9308: LD_VAR 0 5
9312: ST_TO_ADDR
// hc_gallery =  ;
9313: LD_ADDR_OWVAR 33
9317: PUSH
9318: LD_STRING 
9320: ST_TO_ADDR
// hc_name =  ;
9321: LD_ADDR_OWVAR 26
9325: PUSH
9326: LD_STRING 
9328: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9329: LD_INT 0
9331: PPUSH
9332: LD_INT 3
9334: PPUSH
9335: LD_VAR 0 4
9339: PPUSH
9340: CALL_OW 380
// un = CreateHuman ;
9344: LD_ADDR_VAR 0 15
9348: PUSH
9349: CALL_OW 44
9353: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9354: LD_VAR 0 15
9358: PPUSH
9359: LD_VAR 0 16
9363: PPUSH
9364: CALL_OW 52
// end ; end ; end ;
9368: GO 7945
9370: POP
9371: POP
// repeat wait ( 0 0$1 ) ;
9372: LD_INT 35
9374: PPUSH
9375: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_or , [ f_weapon , 25 ] , [ f_weapon , 26 ] , [ f_weapon , 27 ] , [ f_weapon , 28 ] , [ f_weapon , 29 ] , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
9379: LD_ADDR_VAR 0 20
9383: PUSH
9384: LD_INT 22
9386: PUSH
9387: LD_VAR 0 2
9391: PUSH
9392: EMPTY
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 21
9398: PUSH
9399: LD_INT 2
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: PUSH
9406: LD_INT 24
9408: PUSH
9409: LD_INT 250
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: LD_INT 2
9418: PUSH
9419: LD_INT 34
9421: PUSH
9422: LD_INT 25
9424: PUSH
9425: EMPTY
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 34
9431: PUSH
9432: LD_INT 26
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PUSH
9439: LD_INT 34
9441: PUSH
9442: LD_INT 27
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: PUSH
9449: LD_INT 34
9451: PUSH
9452: LD_INT 28
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: PUSH
9459: LD_INT 34
9461: PUSH
9462: LD_INT 29
9464: PUSH
9465: EMPTY
9466: LIST
9467: LIST
9468: PUSH
9469: LD_INT 34
9471: PUSH
9472: LD_INT 46
9474: PUSH
9475: EMPTY
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 34
9481: PUSH
9482: LD_INT 44
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: PUSH
9489: LD_INT 34
9491: PUSH
9492: LD_INT 45
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: PUSH
9499: LD_INT 34
9501: PUSH
9502: LD_INT 47
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PUSH
9509: EMPTY
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: EMPTY
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: PPUSH
9527: CALL_OW 69
9531: ST_TO_ADDR
// if vehicleOK_list > 0 then
9532: LD_VAR 0 20
9536: PUSH
9537: LD_INT 0
9539: GREATER
9540: IFFALSE 9759
// begin for i in vehicleOK_list do
9542: LD_ADDR_VAR 0 13
9546: PUSH
9547: LD_VAR 0 20
9551: PUSH
9552: FOR_IN
9553: IFFALSE 9757
// begin if GetSide ( i ) <> side then
9555: LD_VAR 0 13
9559: PPUSH
9560: CALL_OW 255
9564: PUSH
9565: LD_VAR 0 2
9569: NONEQUAL
9570: IFFALSE 9583
// begin ComStop ( i ) ;
9572: LD_VAR 0 13
9576: PPUSH
9577: CALL_OW 141
// continue ;
9581: GO 9552
// end ; target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
9583: LD_ADDR_VAR 0 21
9587: PUSH
9588: LD_INT 22
9590: PUSH
9591: LD_VAR 0 11
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PPUSH
9600: CALL_OW 69
9604: PPUSH
9605: LD_VAR 0 13
9609: PPUSH
9610: CALL_OW 74
9614: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9615: LD_ADDR_VAR 0 22
9619: PUSH
9620: LD_INT 22
9622: PUSH
9623: LD_VAR 0 11
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: LD_INT 2
9634: PUSH
9635: LD_INT 59
9637: PUSH
9638: EMPTY
9639: LIST
9640: PUSH
9641: LD_INT 21
9643: PUSH
9644: LD_INT 1
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PUSH
9651: LD_INT 21
9653: PUSH
9654: LD_INT 2
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: PUSH
9671: EMPTY
9672: LIST
9673: PPUSH
9674: CALL_OW 69
9678: PPUSH
9679: LD_VAR 0 13
9683: PPUSH
9684: CALL_OW 74
9688: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9689: LD_VAR 0 13
9693: PPUSH
9694: LD_VAR 0 21
9698: PPUSH
9699: CALL_OW 296
9703: PUSH
9704: LD_INT 8
9706: PLUS
9707: PUSH
9708: LD_VAR 0 13
9712: PPUSH
9713: LD_VAR 0 22
9717: PPUSH
9718: CALL_OW 296
9722: LESS
9723: IFFALSE 9741
// begin ComAttackUnit ( i , target1 ) ;
9725: LD_VAR 0 13
9729: PPUSH
9730: LD_VAR 0 21
9734: PPUSH
9735: CALL_OW 115
// end else
9739: GO 9755
// begin ComAttackUnit ( i , target2 ) ;
9741: LD_VAR 0 13
9745: PPUSH
9746: LD_VAR 0 22
9750: PPUSH
9751: CALL_OW 115
// end ; end ;
9755: GO 9552
9757: POP
9758: POP
// end ; until vehicleOK_list = 0 ;
9759: LD_VAR 0 20
9763: PUSH
9764: LD_INT 0
9766: EQUAL
9767: IFFALSE 9372
// end ;
9769: LD_VAR 0 12
9773: RET
// export function AttackSelfBomb ( side , targetSide ) ; var i , veh , veh_List , target1 , target2 ; begin
9774: LD_INT 0
9776: PPUSH
9777: PPUSH
9778: PPUSH
9779: PPUSH
9780: PPUSH
9781: PPUSH
// veh_List = FilterAllUnits ( [ [ f_side , side ] , [ f_weapon , 29 ] ] ) ;
9782: LD_ADDR_VAR 0 6
9786: PUSH
9787: LD_INT 22
9789: PUSH
9790: LD_VAR 0 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 34
9801: PUSH
9802: LD_INT 29
9804: PUSH
9805: EMPTY
9806: LIST
9807: LIST
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 69
9817: ST_TO_ADDR
// if veh_list = 0 then
9818: LD_VAR 0 6
9822: PUSH
9823: LD_INT 0
9825: EQUAL
9826: IFFALSE 9830
// exit ;
9828: GO 10035
// if veh_list > 0 then
9830: LD_VAR 0 6
9834: PUSH
9835: LD_INT 0
9837: GREATER
9838: IFFALSE 10035
// begin for i in veh_List do
9840: LD_ADDR_VAR 0 4
9844: PUSH
9845: LD_VAR 0 6
9849: PUSH
9850: FOR_IN
9851: IFFALSE 10033
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_lives , 250 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
9853: LD_ADDR_VAR 0 7
9857: PUSH
9858: LD_INT 22
9860: PUSH
9861: LD_VAR 0 2
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: PUSH
9870: LD_INT 24
9872: PUSH
9873: LD_INT 250
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 2
9882: PUSH
9883: LD_INT 59
9885: PUSH
9886: EMPTY
9887: LIST
9888: PUSH
9889: LD_INT 21
9891: PUSH
9892: LD_INT 1
9894: PUSH
9895: EMPTY
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 21
9901: PUSH
9902: LD_INT 2
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: PUSH
9915: EMPTY
9916: LIST
9917: LIST
9918: LIST
9919: PUSH
9920: EMPTY
9921: LIST
9922: PPUSH
9923: CALL_OW 69
9927: PPUSH
9928: LD_VAR 0 4
9932: PPUSH
9933: CALL_OW 74
9937: ST_TO_ADDR
// ComAttackUnit ( i , target1 ) ;
9938: LD_VAR 0 4
9942: PPUSH
9943: LD_VAR 0 7
9947: PPUSH
9948: CALL_OW 115
// if not HasTask ( i ) then
9952: LD_VAR 0 4
9956: PPUSH
9957: CALL_OW 314
9961: NOT
9962: IFFALSE 10031
// begin wait ( 0 0$0.1 ) ;
9964: LD_INT 4
9966: PPUSH
9967: CALL_OW 67
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , targetSide ] , [ f_lives , 250 ] ] ) , i ) ;
9971: LD_ADDR_VAR 0 8
9975: PUSH
9976: LD_INT 22
9978: PUSH
9979: LD_VAR 0 2
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 24
9990: PUSH
9991: LD_INT 250
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PPUSH
10002: CALL_OW 69
10006: PPUSH
10007: LD_VAR 0 4
10011: PPUSH
10012: CALL_OW 74
10016: ST_TO_ADDR
// ComAttackUnit ( i , target2 ) ;
10017: LD_VAR 0 4
10021: PPUSH
10022: LD_VAR 0 8
10026: PPUSH
10027: CALL_OW 115
// end ; end ;
10031: GO 9850
10033: POP
10034: POP
// end ; end ; end_of_file
10035: LD_VAR 0 3
10039: RET
// every 0 0$1 do
10040: GO 10042
10042: DISABLE
// begin enable ;
10043: ENABLE
// IntBazooka ( 7 , 1 ) ;
10044: LD_INT 7
10046: PPUSH
10047: LD_INT 1
10049: PPUSH
10050: CALL 6528 0 2
// AttackSelfBomb ( 8 , 1 ) ;
10054: LD_INT 8
10056: PPUSH
10057: LD_INT 1
10059: PPUSH
10060: CALL 9774 0 2
// end ;
10064: END
// every 0 0$5 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) > 0 do var veh , spow ;
10065: LD_INT 22
10067: PUSH
10068: LD_INT 3
10070: PUSH
10071: EMPTY
10072: LIST
10073: LIST
10074: PUSH
10075: LD_INT 21
10077: PUSH
10078: LD_INT 2
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 50
10087: PUSH
10088: EMPTY
10089: LIST
10090: PUSH
10091: LD_INT 2
10093: PUSH
10094: LD_INT 34
10096: PUSH
10097: LD_INT 46
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: PUSH
10104: LD_INT 34
10106: PUSH
10107: LD_INT 44
10109: PUSH
10110: EMPTY
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 34
10116: PUSH
10117: LD_INT 45
10119: PUSH
10120: EMPTY
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 34
10126: PUSH
10127: LD_INT 47
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: EMPTY
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: LIST
10146: PPUSH
10147: CALL_OW 69
10151: PUSH
10152: LD_INT 0
10154: GREATER
10155: PUSH
10156: LD_INT 22
10158: PUSH
10159: LD_INT 3
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: PUSH
10166: LD_INT 21
10168: PUSH
10169: LD_INT 2
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 50
10178: PUSH
10179: EMPTY
10180: LIST
10181: PUSH
10182: LD_INT 34
10184: PUSH
10185: LD_INT 49
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PPUSH
10198: CALL_OW 69
10202: PUSH
10203: LD_INT 0
10205: GREATER
10206: AND
10207: IFFALSE 10379
10209: GO 10211
10211: DISABLE
10212: LD_INT 0
10214: PPUSH
10215: PPUSH
// begin enable ;
10216: ENABLE
// veh = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_or , [ f_weapon , 46 ] , [ f_weapon , 44 ] , [ f_weapon , 45 ] , [ f_weapon , 47 ] ] ] ) ;
10217: LD_ADDR_VAR 0 1
10221: PUSH
10222: LD_INT 22
10224: PUSH
10225: LD_INT 3
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: PUSH
10232: LD_INT 21
10234: PUSH
10235: LD_INT 2
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: LD_INT 50
10244: PUSH
10245: EMPTY
10246: LIST
10247: PUSH
10248: LD_INT 2
10250: PUSH
10251: LD_INT 34
10253: PUSH
10254: LD_INT 46
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: PUSH
10261: LD_INT 34
10263: PUSH
10264: LD_INT 44
10266: PUSH
10267: EMPTY
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 34
10273: PUSH
10274: LD_INT 45
10276: PUSH
10277: EMPTY
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 34
10283: PUSH
10284: LD_INT 47
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PPUSH
10304: CALL_OW 69
10308: ST_TO_ADDR
// spow = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_weapon , 49 ] ] ) ;
10309: LD_ADDR_VAR 0 2
10313: PUSH
10314: LD_INT 22
10316: PUSH
10317: LD_INT 3
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: PUSH
10324: LD_INT 21
10326: PUSH
10327: LD_INT 2
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: PUSH
10334: LD_INT 50
10336: PUSH
10337: EMPTY
10338: LIST
10339: PUSH
10340: LD_INT 34
10342: PUSH
10343: LD_INT 49
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL_OW 69
10360: ST_TO_ADDR
// ComMoveUnit ( spow , veh [ 1 ] ) ;
10361: LD_VAR 0 2
10365: PPUSH
10366: LD_VAR 0 1
10370: PUSH
10371: LD_INT 1
10373: ARRAY
10374: PPUSH
10375: CALL_OW 112
// end ; end_of_file
10379: PPOPN 2
10381: END
// every 0 0$1 trigger eventVar4 = 1 do
10382: LD_EXP 40
10386: PUSH
10387: LD_INT 1
10389: EQUAL
10390: IFFALSE 11184
10392: GO 10394
10394: DISABLE
// begin Say ( JMM , D9b-JMM-1 ) ;
10395: LD_EXP 1
10399: PPUSH
10400: LD_STRING D9b-JMM-1
10402: PPUSH
10403: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-1 ) ;
10407: LD_EXP 15
10411: PPUSH
10412: LD_STRING D9b-Pow-1
10414: PPUSH
10415: CALL_OW 94
// Say ( JMM , D9b-JMM-2 ) ;
10419: LD_EXP 1
10423: PPUSH
10424: LD_STRING D9b-JMM-2
10426: PPUSH
10427: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-2 ) ;
10431: LD_EXP 15
10435: PPUSH
10436: LD_STRING D9b-Pow-2
10438: PPUSH
10439: CALL_OW 94
// Say ( JMM , D9b-JMM-3 ) ;
10443: LD_EXP 1
10447: PPUSH
10448: LD_STRING D9b-JMM-3
10450: PPUSH
10451: CALL_OW 88
// SayRadio ( Powell , D9b-Pow-3 ) ;
10455: LD_EXP 15
10459: PPUSH
10460: LD_STRING D9b-Pow-3
10462: PPUSH
10463: CALL_OW 94
// if burlakStatus = 1 then
10467: LD_EXP 28
10471: PUSH
10472: LD_INT 1
10474: EQUAL
10475: IFFALSE 10489
// begin AddMedal ( Burlak , 1 ) ;
10477: LD_STRING Burlak
10479: PPUSH
10480: LD_INT 1
10482: PPUSH
10483: CALL_OW 101
// end else
10487: GO 10500
// begin AddMedal ( Burlak , - 1 ) ;
10489: LD_STRING Burlak
10491: PPUSH
10492: LD_INT 1
10494: NEG
10495: PPUSH
10496: CALL_OW 101
// end ; if IsOk ( Stevens ) then
10500: LD_EXP 2
10504: PPUSH
10505: CALL_OW 302
10509: IFFALSE 10523
// begin AddMedal ( Stevens , 1 ) ;
10511: LD_STRING Stevens
10513: PPUSH
10514: LD_INT 1
10516: PPUSH
10517: CALL_OW 101
// end else
10521: GO 10534
// begin AddMedal ( Stevens , - 1 ) ;
10523: LD_STRING Stevens
10525: PPUSH
10526: LD_INT 1
10528: NEG
10529: PPUSH
10530: CALL_OW 101
// end ; if radarOnSpot = 1 then
10534: LD_EXP 30
10538: PUSH
10539: LD_INT 1
10541: EQUAL
10542: IFFALSE 10556
// begin AddMedal ( Observation , 1 ) ;
10544: LD_STRING Observation
10546: PPUSH
10547: LD_INT 1
10549: PPUSH
10550: CALL_OW 101
// end else
10554: GO 10567
// begin AddMedal ( Observation , - 1 ) ;
10556: LD_STRING Observation
10558: PPUSH
10559: LD_INT 1
10561: NEG
10562: PPUSH
10563: CALL_OW 101
// end ; GiveMedals ( MAIN ) ;
10567: LD_STRING MAIN
10569: PPUSH
10570: CALL_OW 102
// SaveVariable ( burlakStatus , 13_BurlakStatus_1 ) ;
10574: LD_EXP 28
10578: PPUSH
10579: LD_STRING 13_BurlakStatus_1
10581: PPUSH
10582: CALL_OW 39
// if IsLive ( Stevens ) then
10586: LD_EXP 2
10590: PPUSH
10591: CALL_OW 300
10595: IFFALSE 10609
// SaveVariable ( 1 , 13_StevensStatus_1 ) else
10597: LD_INT 1
10599: PPUSH
10600: LD_STRING 13_StevensStatus_1
10602: PPUSH
10603: CALL_OW 39
10607: GO 10619
// SaveVariable ( 0 , 13_StevensStatus_1 ) ;
10609: LD_INT 0
10611: PPUSH
10612: LD_STRING 13_StevensStatus_1
10614: PPUSH
10615: CALL_OW 39
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
10619: LD_INT 22
10621: PUSH
10622: LD_INT 1
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 2
10641: PUSH
10642: LD_INT 25
10644: PUSH
10645: LD_INT 1
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 25
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 25
10664: PUSH
10665: LD_INT 3
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: LD_INT 25
10674: PUSH
10675: LD_INT 4
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 25
10684: PUSH
10685: LD_INT 5
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 25
10694: PUSH
10695: LD_INT 8
10697: PUSH
10698: EMPTY
10699: LIST
10700: LIST
10701: PUSH
10702: EMPTY
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: PPUSH
10716: CALL_OW 69
10720: PPUSH
10721: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10725: LD_EXP 1
10729: PPUSH
10730: LD_EXP 36
10734: PUSH
10735: LD_STRING JMM
10737: STR
10738: PPUSH
10739: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
10743: LD_EXP 8
10747: PPUSH
10748: LD_EXP 36
10752: PUSH
10753: LD_STRING Brown
10755: STR
10756: PPUSH
10757: CALL 6836 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10761: LD_EXP 4
10765: PPUSH
10766: LD_EXP 36
10770: PUSH
10771: LD_STRING Donaldson
10773: STR
10774: PPUSH
10775: CALL 6836 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
10779: LD_EXP 5
10783: PPUSH
10784: LD_EXP 36
10788: PUSH
10789: LD_STRING Bobby
10791: STR
10792: PPUSH
10793: CALL 6836 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
10797: LD_EXP 6
10801: PPUSH
10802: LD_EXP 36
10806: PUSH
10807: LD_STRING Cyrus
10809: STR
10810: PPUSH
10811: CALL 6836 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
10815: LD_EXP 3
10819: PPUSH
10820: LD_EXP 36
10824: PUSH
10825: LD_STRING Lisa
10827: STR
10828: PPUSH
10829: CALL 6836 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
10833: LD_EXP 13
10837: PPUSH
10838: LD_EXP 36
10842: PUSH
10843: LD_STRING Frank
10845: STR
10846: PPUSH
10847: CALL 6836 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
10851: LD_EXP 14
10855: PPUSH
10856: LD_EXP 36
10860: PUSH
10861: LD_STRING Kikuchi
10863: STR
10864: PPUSH
10865: CALL 6836 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
10869: LD_EXP 10
10873: PPUSH
10874: LD_EXP 36
10878: PUSH
10879: LD_STRING Houten
10881: STR
10882: PPUSH
10883: CALL 6836 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
10887: LD_EXP 12
10891: PPUSH
10892: LD_EXP 36
10896: PUSH
10897: LD_STRING Gary
10899: STR
10900: PPUSH
10901: CALL 6836 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
10905: LD_EXP 11
10909: PPUSH
10910: LD_EXP 36
10914: PUSH
10915: LD_STRING Cornell
10917: STR
10918: PPUSH
10919: CALL 6836 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
10923: LD_EXP 7
10927: PPUSH
10928: LD_EXP 36
10932: PUSH
10933: LD_STRING Denis
10935: STR
10936: PPUSH
10937: CALL 6836 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
10941: LD_EXP 9
10945: PPUSH
10946: LD_EXP 36
10950: PUSH
10951: LD_STRING Gladstone
10953: STR
10954: PPUSH
10955: CALL 6836 0 2
// EnchancedSaveCharacters ( Stevens , mission_prefix & Stevens ) ;
10959: LD_EXP 2
10963: PPUSH
10964: LD_EXP 36
10968: PUSH
10969: LD_STRING Stevens
10971: STR
10972: PPUSH
10973: CALL 6836 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel , Stevens ] , 13_other_survivors ) ;
10977: LD_INT 50
10979: PUSH
10980: EMPTY
10981: LIST
10982: PUSH
10983: LD_INT 22
10985: PUSH
10986: LD_INT 1
10988: PUSH
10989: EMPTY
10990: LIST
10991: LIST
10992: PUSH
10993: LD_INT 21
10995: PUSH
10996: LD_INT 1
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 2
11005: PUSH
11006: LD_INT 25
11008: PUSH
11009: LD_INT 1
11011: PUSH
11012: EMPTY
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 25
11018: PUSH
11019: LD_INT 2
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 25
11028: PUSH
11029: LD_INT 3
11031: PUSH
11032: EMPTY
11033: LIST
11034: LIST
11035: PUSH
11036: LD_INT 25
11038: PUSH
11039: LD_INT 4
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 25
11048: PUSH
11049: LD_INT 5
11051: PUSH
11052: EMPTY
11053: LIST
11054: LIST
11055: PUSH
11056: LD_INT 25
11058: PUSH
11059: LD_INT 8
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: PPUSH
11081: CALL_OW 69
11085: PUSH
11086: LD_EXP 1
11090: PUSH
11091: LD_EXP 8
11095: PUSH
11096: LD_EXP 4
11100: PUSH
11101: LD_EXP 5
11105: PUSH
11106: LD_EXP 6
11110: PUSH
11111: LD_EXP 3
11115: PUSH
11116: LD_EXP 13
11120: PUSH
11121: LD_EXP 9
11125: PUSH
11126: LD_EXP 14
11130: PUSH
11131: LD_EXP 7
11135: PUSH
11136: LD_EXP 10
11140: PUSH
11141: LD_EXP 12
11145: PUSH
11146: LD_EXP 11
11150: PUSH
11151: LD_EXP 2
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: DIFF
11172: PPUSH
11173: LD_STRING 13_other_survivors
11175: PPUSH
11176: CALL_OW 38
// YouWin ;
11180: CALL_OW 103
// end ; end_of_file
11184: END
// every 0 0$1 trigger sibDestroyedCounter = 2 do var i , tmp , yourSiberite ;
11185: LD_EXP 32
11189: PUSH
11190: LD_INT 2
11192: EQUAL
11193: IFFALSE 11329
11195: GO 11197
11197: DISABLE
11198: LD_INT 0
11200: PPUSH
11201: PPUSH
11202: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11203: LD_ADDR_VAR 0 2
11207: PUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 1
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 21
11220: PUSH
11221: LD_INT 3
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: LD_INT 2
11230: PUSH
11231: LD_INT 30
11233: PUSH
11234: LD_INT 0
11236: PUSH
11237: EMPTY
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 30
11243: PUSH
11244: LD_INT 1
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: ST_TO_ADDR
// for i in tmp do
11266: LD_ADDR_VAR 0 1
11270: PUSH
11271: LD_VAR 0 2
11275: PUSH
11276: FOR_IN
11277: IFFALSE 11310
// yourSiberite = yourSiberite + GetResourceType ( GetBase ( i ) , 3 ) ;
11279: LD_ADDR_VAR 0 3
11283: PUSH
11284: LD_VAR 0 3
11288: PUSH
11289: LD_VAR 0 1
11293: PPUSH
11294: CALL_OW 274
11298: PPUSH
11299: LD_INT 3
11301: PPUSH
11302: CALL_OW 275
11306: PLUS
11307: ST_TO_ADDR
11308: GO 11276
11310: POP
11311: POP
// if yourSiberite < 79 then
11312: LD_VAR 0 3
11316: PUSH
11317: LD_INT 79
11319: LESS
11320: IFFALSE 11329
// YouLost ( siberite ) ;
11322: LD_STRING siberite
11324: PPUSH
11325: CALL_OW 104
// end ;
11329: PPOPN 3
11331: END
// every 0 0$1 trigger IsDead ( JMM ) do
11332: LD_EXP 1
11336: PPUSH
11337: CALL_OW 301
11341: IFFALSE 11353
11343: GO 11345
11345: DISABLE
// YouLost ( JMM ) ; end_of_file
11346: LD_STRING JMM
11348: PPUSH
11349: CALL_OW 104
11353: END
// every 8 8$0 + 7 7$0 do
11354: GO 11356
11356: DISABLE
// begin enable ;
11357: ENABLE
// RespawnAttackInfantry ( 8 , 2 , rand ( 1 , 3 ) , 0 , 0 , [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 10 , [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , ArabianHealArea , 1 ) ;
11358: LD_INT 8
11360: PPUSH
11361: LD_INT 2
11363: PPUSH
11364: LD_INT 1
11366: PPUSH
11367: LD_INT 3
11369: PPUSH
11370: CALL_OW 12
11374: PPUSH
11375: LD_INT 0
11377: PPUSH
11378: LD_INT 0
11380: PPUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 3
11386: PUSH
11387: LD_INT 4
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: LIST
11394: PUSH
11395: LD_OWVAR 67
11399: ARRAY
11400: PPUSH
11401: LD_INT 0
11403: PPUSH
11404: LD_INT 10
11406: PPUSH
11407: LD_INT 8
11409: PUSH
11410: LD_INT 9
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 1
11419: PPUSH
11420: LD_INT 2
11422: PPUSH
11423: CALL_OW 12
11427: ARRAY
11428: PPUSH
11429: LD_INT 12
11431: PPUSH
11432: LD_INT 1
11434: PPUSH
11435: CALL 6876 0 11
// end ;
11439: END
// every 8 8$0 + 7 7$0 do
11440: GO 11442
11442: DISABLE
// begin enable ;
11443: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11444: LD_ADDR_EXP 33
11448: PUSH
11449: LD_EXP 33
11453: PUSH
11454: LD_INT 1
11456: PLUS
11457: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ rand ( 4 , 9 ) , rand ( 6 , 9 ) , rand ( 6 , 10 ) ] [ Difficulty ] , 10 , 2 , 3 , [ 5 , 2 ] , [ ] , [ 25 , 26 , 27 , 28 , 29 ] , [ ] , 1 ) ;
11458: LD_INT 8
11460: PUSH
11461: LD_INT 9
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 1
11470: PPUSH
11471: LD_INT 2
11473: PPUSH
11474: CALL_OW 12
11478: ARRAY
11479: PPUSH
11480: LD_INT 8
11482: PPUSH
11483: LD_INT 4
11485: PPUSH
11486: LD_INT 9
11488: PPUSH
11489: CALL_OW 12
11493: PUSH
11494: LD_INT 6
11496: PPUSH
11497: LD_INT 9
11499: PPUSH
11500: CALL_OW 12
11504: PUSH
11505: LD_INT 6
11507: PPUSH
11508: LD_INT 10
11510: PPUSH
11511: CALL_OW 12
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: LIST
11520: PUSH
11521: LD_OWVAR 67
11525: ARRAY
11526: PPUSH
11527: LD_INT 10
11529: PPUSH
11530: LD_INT 2
11532: PPUSH
11533: LD_INT 3
11535: PPUSH
11536: LD_INT 5
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: PPUSH
11546: EMPTY
11547: PPUSH
11548: LD_INT 25
11550: PUSH
11551: LD_INT 26
11553: PUSH
11554: LD_INT 27
11556: PUSH
11557: LD_INT 28
11559: PUSH
11560: LD_INT 29
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PPUSH
11570: EMPTY
11571: PPUSH
11572: LD_INT 1
11574: PPUSH
11575: CALL 7896 0 11
// end ;
11579: END
// every 8 8$0 + 7 7$0 trigger arabianAttacksCounter >= 4 do
11580: LD_EXP 33
11584: PUSH
11585: LD_INT 4
11587: GREATEREQUAL
11588: IFFALSE 11693
11590: GO 11592
11592: DISABLE
// begin enable ;
11593: ENABLE
// arabianAttacksCounter = arabianAttacksCounter + 1 ;
11594: LD_ADDR_EXP 33
11598: PUSH
11599: LD_EXP 33
11603: PUSH
11604: LD_INT 1
11606: PLUS
11607: ST_TO_ADDR
// RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 8 , [ 1 , 2 , 3 ] [ Difficulty ] , 10 , 3 , 3 , [ 1 , 1 ] , [ 47 , 47 ] , [ ] , [ ] , 1 ) ;
11608: LD_INT 8
11610: PUSH
11611: LD_INT 9
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 1
11620: PPUSH
11621: LD_INT 2
11623: PPUSH
11624: CALL_OW 12
11628: ARRAY
11629: PPUSH
11630: LD_INT 8
11632: PPUSH
11633: LD_INT 1
11635: PUSH
11636: LD_INT 2
11638: PUSH
11639: LD_INT 3
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: LIST
11646: PUSH
11647: LD_OWVAR 67
11651: ARRAY
11652: PPUSH
11653: LD_INT 10
11655: PPUSH
11656: LD_INT 3
11658: PPUSH
11659: LD_INT 3
11661: PPUSH
11662: LD_INT 1
11664: PUSH
11665: LD_INT 1
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: PPUSH
11672: LD_INT 47
11674: PUSH
11675: LD_INT 47
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: EMPTY
11683: PPUSH
11684: EMPTY
11685: PPUSH
11686: LD_INT 1
11688: PPUSH
11689: CALL 7896 0 11
// end ;
11693: END
// every 1 1$0 trigger eventVar2 = 1 do
11694: LD_EXP 38
11698: PUSH
11699: LD_INT 1
11701: EQUAL
11702: IFFALSE 11804
11704: GO 11706
11706: DISABLE
// begin RespawnAttackVehicle ( [ ArabianSpawn1 , ArabianSpawn2 ] [ Rand ( 1 , 2 ) ] , 3 , [ 6 , 7 , 8 ] [ Difficulty ] , 10 , 3 , 3 , [ 3 , 3 ] , [ 46 , 44 , 45 , 47 , 49 ] , [ ] , [ ] , 1 ) ;
11707: LD_INT 8
11709: PUSH
11710: LD_INT 9
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 1
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: CALL_OW 12
11727: ARRAY
11728: PPUSH
11729: LD_INT 3
11731: PPUSH
11732: LD_INT 6
11734: PUSH
11735: LD_INT 7
11737: PUSH
11738: LD_INT 8
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: PUSH
11746: LD_OWVAR 67
11750: ARRAY
11751: PPUSH
11752: LD_INT 10
11754: PPUSH
11755: LD_INT 3
11757: PPUSH
11758: LD_INT 3
11760: PPUSH
11761: LD_INT 3
11763: PUSH
11764: LD_INT 3
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PPUSH
11771: LD_INT 46
11773: PUSH
11774: LD_INT 44
11776: PUSH
11777: LD_INT 45
11779: PUSH
11780: LD_INT 47
11782: PUSH
11783: LD_INT 49
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: PPUSH
11793: EMPTY
11794: PPUSH
11795: EMPTY
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL 7896 0 11
// end ; end_of_file
11804: END
// every 1 1$0 do
11805: GO 11807
11807: DISABLE
// begin enable ;
11808: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
11809: LD_INT 3
11811: PPUSH
11812: LD_INT 5
11814: PPUSH
11815: CALL_OW 12
11819: PPUSH
11820: LD_INT 13
11822: PPUSH
11823: LD_INT 1
11825: PPUSH
11826: CALL_OW 55
// end ;
11830: END
