// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 29 0 0
// DebugMode ;
   8: CALL 77 0 0
// PrepareNature ;
  12: CALL 252 0 0
// PrepareAmerican ;
  16: CALL 695 0 0
// PrepareOvsyenko ;
  20: CALL 1339 0 0
// Action ;
  24: CALL 2197 0 0
// end ;
  28: END
// export mission_prefix , debug , terminal ; export jmm_in_ovsyenko , powell_want_sib , powell_want_sib_counter ; function Init ; begin
  29: LD_INT 0
  31: PPUSH
// debug := true ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// jmm_in_ovsyenko := false ;
  40: LD_ADDR_EXP 4
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// mission_prefix := 09_ ;
  48: LD_ADDR_EXP 1
  52: PUSH
  53: LD_STRING 09_
  55: ST_TO_ADDR
// powell_want_sib := false ;
  56: LD_ADDR_EXP 5
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// powell_want_sib_counter := 15 15$00 ;
  64: LD_ADDR_EXP 6
  68: PUSH
  69: LD_INT 31500
  71: ST_TO_ADDR
// end ;
  72: LD_VAR 0 1
  76: RET
// function DebugMode ; begin
  77: LD_INT 0
  79: PPUSH
// if not debug then
  80: LD_EXP 2
  84: NOT
  85: IFFALSE 89
// exit ;
  87: GO 96
// FogOff ( 1 ) ;
  89: LD_INT 1
  91: PPUSH
  92: CALL_OW 344
// end ; end_of_file
  96: LD_VAR 0 1
 100: RET
// export function PrepareUnit ( ident , exist_mode , mission_prefix_prev ) ; var unit ; begin
 101: LD_INT 0
 103: PPUSH
 104: PPUSH
// if exist_mode then
 105: LD_VAR 0 2
 109: IFFALSE 134
// unit := CreateCharacter ( mission_prefix_prev & ident ) else
 111: LD_ADDR_VAR 0 5
 115: PUSH
 116: LD_VAR 0 3
 120: PUSH
 121: LD_VAR 0 1
 125: STR
 126: PPUSH
 127: CALL_OW 34
 131: ST_TO_ADDR
 132: GO 149
// unit := NewCharacter ( ident ) ;
 134: LD_ADDR_VAR 0 5
 138: PUSH
 139: LD_VAR 0 1
 143: PPUSH
 144: CALL_OW 25
 148: ST_TO_ADDR
// result := unit ;
 149: LD_ADDR_VAR 0 4
 153: PUSH
 154: LD_VAR 0 5
 158: ST_TO_ADDR
// end ;
 159: LD_VAR 0 4
 163: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 164: LD_INT 0
 166: PPUSH
// uc_side := side ;
 167: LD_ADDR_OWVAR 20
 171: PUSH
 172: LD_VAR 0 1
 176: ST_TO_ADDR
// uc_nation := nation ;
 177: LD_ADDR_OWVAR 21
 181: PUSH
 182: LD_VAR 0 2
 186: ST_TO_ADDR
// vc_chassis := chassis ;
 187: LD_ADDR_OWVAR 37
 191: PUSH
 192: LD_VAR 0 3
 196: ST_TO_ADDR
// vc_engine := engine ;
 197: LD_ADDR_OWVAR 39
 201: PUSH
 202: LD_VAR 0 4
 206: ST_TO_ADDR
// vc_control := control ;
 207: LD_ADDR_OWVAR 38
 211: PUSH
 212: LD_VAR 0 5
 216: ST_TO_ADDR
// vc_weapon := weapon ;
 217: LD_ADDR_OWVAR 40
 221: PUSH
 222: LD_VAR 0 6
 226: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 227: LD_ADDR_OWVAR 41
 231: PUSH
 232: LD_VAR 0 7
 236: ST_TO_ADDR
// result := CreateVehicle ;
 237: LD_ADDR_VAR 0 8
 241: PUSH
 242: CALL_OW 45
 246: ST_TO_ADDR
// end ;
 247: LD_VAR 0 8
 251: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
 252: LD_INT 0
 254: PPUSH
 255: PPUSH
 256: PPUSH
 257: PPUSH
// uc_side = 0 ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// uc_nation = 0 ;
 266: LD_ADDR_OWVAR 21
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// nat_area := natureArea ;
 274: LD_ADDR_VAR 0 4
 278: PUSH
 279: LD_INT 1
 281: ST_TO_ADDR
// InitHc ;
 282: CALL_OW 19
// for i = 1 to 4 do
 286: LD_ADDR_VAR 0 2
 290: PUSH
 291: DOUBLE
 292: LD_INT 1
 294: DEC
 295: ST_TO_ADDR
 296: LD_INT 4
 298: PUSH
 299: FOR_TO
 300: IFFALSE 355
// begin hc_class = 18 ;
 302: LD_ADDR_OWVAR 28
 306: PUSH
 307: LD_INT 18
 309: ST_TO_ADDR
// hc_gallery =  ;
 310: LD_ADDR_OWVAR 33
 314: PUSH
 315: LD_STRING 
 317: ST_TO_ADDR
// hc_face_number = 1 ;
 318: LD_ADDR_OWVAR 34
 322: PUSH
 323: LD_INT 1
 325: ST_TO_ADDR
// animal := CreateHuman ;
 326: LD_ADDR_VAR 0 3
 330: PUSH
 331: CALL_OW 44
 335: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 336: LD_VAR 0 3
 340: PPUSH
 341: LD_VAR 0 4
 345: PPUSH
 346: LD_INT 0
 348: PPUSH
 349: CALL_OW 49
// end ;
 353: GO 299
 355: POP
 356: POP
// for i = 1 to 4 do
 357: LD_ADDR_VAR 0 2
 361: PUSH
 362: DOUBLE
 363: LD_INT 1
 365: DEC
 366: ST_TO_ADDR
 367: LD_INT 4
 369: PUSH
 370: FOR_TO
 371: IFFALSE 442
// begin hc_class = class_tiger ;
 373: LD_ADDR_OWVAR 28
 377: PUSH
 378: LD_INT 14
 380: ST_TO_ADDR
// hc_gallery =  ;
 381: LD_ADDR_OWVAR 33
 385: PUSH
 386: LD_STRING 
 388: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 50 ) ;
 389: LD_ADDR_OWVAR 35
 393: PUSH
 394: LD_INT 0
 396: PPUSH
 397: LD_INT 50
 399: PPUSH
 400: CALL_OW 12
 404: ST_TO_ADDR
// hc_face_number = 3 ;
 405: LD_ADDR_OWVAR 34
 409: PUSH
 410: LD_INT 3
 412: ST_TO_ADDR
// animal := CreateHuman ;
 413: LD_ADDR_VAR 0 3
 417: PUSH
 418: CALL_OW 44
 422: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 423: LD_VAR 0 3
 427: PPUSH
 428: LD_VAR 0 4
 432: PPUSH
 433: LD_INT 0
 435: PPUSH
 436: CALL_OW 49
// end ;
 440: GO 370
 442: POP
 443: POP
// for i = 1 to 6 do
 444: LD_ADDR_VAR 0 2
 448: PUSH
 449: DOUBLE
 450: LD_INT 1
 452: DEC
 453: ST_TO_ADDR
 454: LD_INT 6
 456: PUSH
 457: FOR_TO
 458: IFFALSE 522
// begin hc_class = class_apeman ;
 460: LD_ADDR_OWVAR 28
 464: PUSH
 465: LD_INT 12
 467: ST_TO_ADDR
// hc_gallery =  ;
 468: LD_ADDR_OWVAR 33
 472: PUSH
 473: LD_STRING 
 475: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
 476: LD_ADDR_OWVAR 35
 480: PUSH
 481: LD_INT 10
 483: NEG
 484: PPUSH
 485: LD_INT 10
 487: PPUSH
 488: CALL_OW 12
 492: ST_TO_ADDR
// animal := CreateHuman ;
 493: LD_ADDR_VAR 0 3
 497: PUSH
 498: CALL_OW 44
 502: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 503: LD_VAR 0 3
 507: PPUSH
 508: LD_VAR 0 4
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL_OW 49
// end ;
 520: GO 457
 522: POP
 523: POP
// for i = 1 to 6 do
 524: LD_ADDR_VAR 0 2
 528: PUSH
 529: DOUBLE
 530: LD_INT 1
 532: DEC
 533: ST_TO_ADDR
 534: LD_INT 6
 536: PUSH
 537: FOR_TO
 538: IFFALSE 593
// begin hc_class = 13 ;
 540: LD_ADDR_OWVAR 28
 544: PUSH
 545: LD_INT 13
 547: ST_TO_ADDR
// hc_gallery =  ;
 548: LD_ADDR_OWVAR 33
 552: PUSH
 553: LD_STRING 
 555: ST_TO_ADDR
// hc_face_number = 4 ;
 556: LD_ADDR_OWVAR 34
 560: PUSH
 561: LD_INT 4
 563: ST_TO_ADDR
// animal := CreateHuman ;
 564: LD_ADDR_VAR 0 3
 568: PUSH
 569: CALL_OW 44
 573: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
 574: LD_VAR 0 3
 578: PPUSH
 579: LD_VAR 0 4
 583: PPUSH
 584: LD_INT 0
 586: PPUSH
 587: CALL_OW 49
// end ;
 591: GO 537
 593: POP
 594: POP
// for i = 1 to 1 do
 595: LD_ADDR_VAR 0 2
 599: PUSH
 600: DOUBLE
 601: LD_INT 1
 603: DEC
 604: ST_TO_ADDR
 605: LD_INT 1
 607: PUSH
 608: FOR_TO
 609: IFFALSE 657
// begin vc_chassis := 31 ;
 611: LD_ADDR_OWVAR 37
 615: PUSH
 616: LD_INT 31
 618: ST_TO_ADDR
// vc_control := control_rider ;
 619: LD_ADDR_OWVAR 38
 623: PUSH
 624: LD_INT 4
 626: ST_TO_ADDR
// animal := CreateVehicle ;
 627: LD_ADDR_VAR 0 3
 631: PUSH
 632: CALL_OW 45
 636: ST_TO_ADDR
// PlaceUnitXY ( animal , 21 , 22 , false ) ;
 637: LD_VAR 0 3
 641: PPUSH
 642: LD_INT 21
 644: PPUSH
 645: LD_INT 22
 647: PPUSH
 648: LD_INT 0
 650: PPUSH
 651: CALL_OW 48
// end ;
 655: GO 608
 657: POP
 658: POP
// end ;
 659: LD_VAR 0 1
 663: RET
// export function GetTerminalCargo ; begin
 664: LD_INT 0
 666: PPUSH
// result := GetResourceType ( GetBase ( terminal ) , 3 ) ;
 667: LD_ADDR_VAR 0 1
 671: PUSH
 672: LD_EXP 3
 676: PPUSH
 677: CALL_OW 274
 681: PPUSH
 682: LD_INT 3
 684: PPUSH
 685: CALL_OW 275
 689: ST_TO_ADDR
// end ; end_of_file
 690: LD_VAR 0 1
 694: RET
// export JMM , Gary , Bobby , Cyrus , Houten , alpha_engs , powell_trans , Powell ; export function PrepareAmerican ; var tmp , un , veh , i ; begin
 695: LD_INT 0
 697: PPUSH
 698: PPUSH
 699: PPUSH
 700: PPUSH
 701: PPUSH
// uc_side := 1 ;
 702: LD_ADDR_OWVAR 20
 706: PUSH
 707: LD_INT 1
 709: ST_TO_ADDR
// uc_nation := 1 ;
 710: LD_ADDR_OWVAR 21
 714: PUSH
 715: LD_INT 1
 717: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 08_ ) ;
 718: LD_ADDR_EXP 7
 722: PUSH
 723: LD_STRING JMM
 725: PPUSH
 726: LD_EXP 2
 730: NOT
 731: PPUSH
 732: LD_STRING 08_
 734: PPUSH
 735: CALL 101 0 3
 739: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , us_medium_tracked , engine_solar , control_manual , us_double_gun , 55 ) ;
 740: LD_ADDR_VAR 0 4
 744: PUSH
 745: LD_INT 1
 747: PPUSH
 748: LD_INT 1
 750: PPUSH
 751: LD_INT 3
 753: PPUSH
 754: LD_INT 2
 756: PPUSH
 757: LD_INT 1
 759: PPUSH
 760: LD_INT 5
 762: PPUSH
 763: LD_INT 55
 765: PPUSH
 766: CALL 164 0 7
 770: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
 771: LD_VAR 0 4
 775: PPUSH
 776: LD_INT 3
 778: PPUSH
 779: CALL_OW 233
// PlaceUnitXY ( veh , 43 , 3 , false ) ;
 783: LD_VAR 0 4
 787: PPUSH
 788: LD_INT 43
 790: PPUSH
 791: LD_INT 3
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 48
// PlaceHumanInUnit ( JMM , veh ) ;
 801: LD_EXP 7
 805: PPUSH
 806: LD_VAR 0 4
 810: PPUSH
 811: CALL_OW 52
// tmp := [ ] ;
 815: LD_ADDR_VAR 0 2
 819: PUSH
 820: EMPTY
 821: ST_TO_ADDR
// uc_side := 4 ;
 822: LD_ADDR_OWVAR 20
 826: PUSH
 827: LD_INT 4
 829: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 830: LD_ADDR_OWVAR 33
 834: PUSH
 835: LD_STRING SecondCharsGal
 837: ST_TO_ADDR
// hc_class := 2 ;
 838: LD_ADDR_OWVAR 28
 842: PUSH
 843: LD_INT 2
 845: ST_TO_ADDR
// hc_sex := sex_female ;
 846: LD_ADDR_OWVAR 27
 850: PUSH
 851: LD_INT 2
 853: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
 854: LD_ADDR_OWVAR 30
 858: PUSH
 859: LD_INT 0
 861: PUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 1
 867: PUSH
 868: LD_INT 0
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: LIST
 875: LIST
 876: ST_TO_ADDR
// hc_skills := [ 3 , 4 , 2 , 1 ] ;
 877: LD_ADDR_OWVAR 31
 881: PUSH
 882: LD_INT 3
 884: PUSH
 885: LD_INT 4
 887: PUSH
 888: LD_INT 2
 890: PUSH
 891: LD_INT 1
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: LIST
 898: LIST
 899: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
 900: LD_ADDR_OWVAR 29
 904: PUSH
 905: LD_INT 10
 907: PUSH
 908: LD_INT 11
 910: PUSH
 911: EMPTY
 912: LIST
 913: LIST
 914: ST_TO_ADDR
// hc_name := Naoma Goichman ;
 915: LD_ADDR_OWVAR 26
 919: PUSH
 920: LD_STRING Naoma Goichman
 922: ST_TO_ADDR
// hc_face_number := 43 ;
 923: LD_ADDR_OWVAR 34
 927: PUSH
 928: LD_INT 43
 930: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
 931: LD_ADDR_VAR 0 2
 935: PUSH
 936: LD_VAR 0 2
 940: PUSH
 941: CALL_OW 44
 945: ADD
 946: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 1 ] ;
 947: LD_ADDR_OWVAR 30
 951: PUSH
 952: LD_INT 0
 954: PUSH
 955: LD_INT 2
 957: PUSH
 958: LD_INT 0
 960: PUSH
 961: LD_INT 1
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: LIST
 968: LIST
 969: ST_TO_ADDR
// hc_skills := [ 0 , 5 , 3 , 1 ] ;
 970: LD_ADDR_OWVAR 31
 974: PUSH
 975: LD_INT 0
 977: PUSH
 978: LD_INT 5
 980: PUSH
 981: LD_INT 3
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: EMPTY
 988: LIST
 989: LIST
 990: LIST
 991: LIST
 992: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 993: LD_ADDR_OWVAR 29
 997: PUSH
 998: LD_INT 10
1000: PUSH
1001: LD_INT 10
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// hc_name := Magdalene Glance ;
1008: LD_ADDR_OWVAR 26
1012: PUSH
1013: LD_STRING Magdalene Glance
1015: ST_TO_ADDR
// hc_face_number := 44 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 44
1023: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1024: LD_ADDR_VAR 0 2
1028: PUSH
1029: LD_VAR 0 2
1033: PUSH
1034: CALL_OW 44
1038: ADD
1039: ST_TO_ADDR
// hc_sex := sex_male ;
1040: LD_ADDR_OWVAR 27
1044: PUSH
1045: LD_INT 1
1047: ST_TO_ADDR
// hc_basic_skills := [ 2 , 2 , 0 , 0 ] ;
1048: LD_ADDR_OWVAR 30
1052: PUSH
1053: LD_INT 2
1055: PUSH
1056: LD_INT 2
1058: PUSH
1059: LD_INT 0
1061: PUSH
1062: LD_INT 0
1064: PUSH
1065: EMPTY
1066: LIST
1067: LIST
1068: LIST
1069: LIST
1070: ST_TO_ADDR
// hc_skills := [ 3 , 4 , 1 , 0 ] ;
1071: LD_ADDR_OWVAR 31
1075: PUSH
1076: LD_INT 3
1078: PUSH
1079: LD_INT 4
1081: PUSH
1082: LD_INT 1
1084: PUSH
1085: LD_INT 0
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// hc_attr := [ 12 , 10 ] ;
1094: LD_ADDR_OWVAR 29
1098: PUSH
1099: LD_INT 12
1101: PUSH
1102: LD_INT 10
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: ST_TO_ADDR
// hc_name := Steve Holland ;
1109: LD_ADDR_OWVAR 26
1113: PUSH
1114: LD_STRING Steve Holland
1116: ST_TO_ADDR
// hc_face_number := 60 ;
1117: LD_ADDR_OWVAR 34
1121: PUSH
1122: LD_INT 60
1124: ST_TO_ADDR
// tmp := tmp ^ CreateHuman ;
1125: LD_ADDR_VAR 0 2
1129: PUSH
1130: LD_VAR 0 2
1134: PUSH
1135: CALL_OW 44
1139: ADD
1140: ST_TO_ADDR
// alpha_engs := tmp diff 0 ;
1141: LD_ADDR_EXP 12
1145: PUSH
1146: LD_VAR 0 2
1150: PUSH
1151: LD_INT 0
1153: DIFF
1154: ST_TO_ADDR
// for un in alpha_engs do
1155: LD_ADDR_VAR 0 3
1159: PUSH
1160: LD_EXP 12
1164: PUSH
1165: FOR_IN
1166: IFFALSE 1191
// PlaceUnitXYR ( un , 52 , 35 , 3 , false ) ;
1168: LD_VAR 0 3
1172: PPUSH
1173: LD_INT 52
1175: PPUSH
1176: LD_INT 35
1178: PPUSH
1179: LD_INT 3
1181: PPUSH
1182: LD_INT 0
1184: PPUSH
1185: CALL_OW 50
1189: GO 1165
1191: POP
1192: POP
// for tmp = 1 to 4 do
1193: LD_ADDR_VAR 0 2
1197: PUSH
1198: DOUBLE
1199: LD_INT 1
1201: DEC
1202: ST_TO_ADDR
1203: LD_INT 4
1205: PUSH
1206: FOR_TO
1207: IFFALSE 1233
// CreateResourcesXYR ( mat_cans , 5 , 54 , 40 , 2 , false ) ;
1209: LD_INT 1
1211: PPUSH
1212: LD_INT 5
1214: PPUSH
1215: LD_INT 54
1217: PPUSH
1218: LD_INT 40
1220: PPUSH
1221: LD_INT 2
1223: PPUSH
1224: LD_INT 0
1226: PPUSH
1227: CALL_OW 60
1231: GO 1206
1233: POP
1234: POP
// if LoadVariable ( gamma_commander , 0 ) < 3 then
1235: LD_STRING gamma_commander
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 30
1245: PUSH
1246: LD_INT 3
1248: LESS
1249: IFFALSE 1307
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
1251: LD_ADDR_EXP 11
1255: PUSH
1256: LD_STRING VanHouten
1258: PPUSH
1259: LD_INT 0
1261: PPUSH
1262: LD_STRING 
1264: PPUSH
1265: CALL 101 0 3
1269: ST_TO_ADDR
// for i = 1 to 4 do
1270: LD_ADDR_VAR 0 5
1274: PUSH
1275: DOUBLE
1276: LD_INT 1
1278: DEC
1279: ST_TO_ADDR
1280: LD_INT 4
1282: PUSH
1283: FOR_TO
1284: IFFALSE 1305
// AddExperience ( Houten , i , 10000 ) ;
1286: LD_EXP 11
1290: PPUSH
1291: LD_VAR 0 5
1295: PPUSH
1296: LD_INT 10000
1298: PPUSH
1299: CALL_OW 492
1303: GO 1283
1305: POP
1306: POP
// end ; Powell := PrepareUnit ( Powell , false ,  ) ;
1307: LD_ADDR_EXP 14
1311: PUSH
1312: LD_STRING Powell
1314: PPUSH
1315: LD_INT 0
1317: PPUSH
1318: LD_STRING 
1320: PPUSH
1321: CALL 101 0 3
1325: ST_TO_ADDR
// InitHc ;
1326: CALL_OW 19
// InitUc ;
1330: CALL_OW 18
// end ;
1334: LD_VAR 0 1
1338: RET
// export function PrepareOvsyenko ; var i , b , tmp , un ; begin
1339: LD_INT 0
1341: PPUSH
1342: PPUSH
1343: PPUSH
1344: PPUSH
1345: PPUSH
// uc_side := 4 ;
1346: LD_ADDR_OWVAR 20
1350: PUSH
1351: LD_INT 4
1353: ST_TO_ADDR
// uc_nation := 3 ;
1354: LD_ADDR_OWVAR 21
1358: PUSH
1359: LD_INT 3
1361: ST_TO_ADDR
// tmp := LoadVariable ( 09_ovsyenko_base , [ [ b_depot , 101 , 118 , 2 ] , [ b_breastwork , 109 , 114 , 4 ] , [ b_breastwork , 115 , 132 , 5 ] , [ b_breastwork , 98 , 120 , 1 ] ] ) ;
1362: LD_ADDR_VAR 0 4
1366: PUSH
1367: LD_STRING 09_ovsyenko_base
1369: PPUSH
1370: LD_INT 0
1372: PUSH
1373: LD_INT 101
1375: PUSH
1376: LD_INT 118
1378: PUSH
1379: LD_INT 2
1381: PUSH
1382: EMPTY
1383: LIST
1384: LIST
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 31
1390: PUSH
1391: LD_INT 109
1393: PUSH
1394: LD_INT 114
1396: PUSH
1397: LD_INT 4
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: LIST
1405: PUSH
1406: LD_INT 31
1408: PUSH
1409: LD_INT 115
1411: PUSH
1412: LD_INT 132
1414: PUSH
1415: LD_INT 5
1417: PUSH
1418: EMPTY
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: PUSH
1424: LD_INT 31
1426: PUSH
1427: LD_INT 98
1429: PUSH
1430: LD_INT 120
1432: PUSH
1433: LD_INT 1
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: LIST
1446: LIST
1447: PPUSH
1448: CALL_OW 30
1452: ST_TO_ADDR
// for i in tmp do
1453: LD_ADDR_VAR 0 2
1457: PUSH
1458: LD_VAR 0 4
1462: PUSH
1463: FOR_IN
1464: IFFALSE 1620
// begin bc_type := i [ 1 ] ;
1466: LD_ADDR_OWVAR 42
1470: PUSH
1471: LD_VAR 0 2
1475: PUSH
1476: LD_INT 1
1478: ARRAY
1479: ST_TO_ADDR
// bc_level := 3 ;
1480: LD_ADDR_OWVAR 43
1484: PUSH
1485: LD_INT 3
1487: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
1488: LD_ADDR_VAR 0 3
1492: PUSH
1493: LD_VAR 0 2
1497: PUSH
1498: LD_INT 2
1500: ARRAY
1501: PPUSH
1502: LD_VAR 0 2
1506: PUSH
1507: LD_INT 3
1509: ARRAY
1510: PPUSH
1511: LD_VAR 0 2
1515: PUSH
1516: LD_INT 4
1518: ARRAY
1519: PPUSH
1520: CALL_OW 47
1524: ST_TO_ADDR
// if GetBType ( b ) = b_depot then
1525: LD_VAR 0 3
1529: PPUSH
1530: CALL_OW 266
1534: PUSH
1535: LD_INT 0
1537: EQUAL
1538: IFFALSE 1572
// begin SetBName ( b , ovsyenko ) ;
1540: LD_VAR 0 3
1544: PPUSH
1545: LD_STRING ovsyenko
1547: PPUSH
1548: CALL_OW 500
// SetResourceType ( GetBase ( b ) , mat_cans , 50 ) ;
1552: LD_VAR 0 3
1556: PPUSH
1557: CALL_OW 274
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: LD_INT 50
1567: PPUSH
1568: CALL_OW 277
// end ; if i [ 4 ] < 250 then
1572: LD_VAR 0 2
1576: PUSH
1577: LD_INT 4
1579: ARRAY
1580: PUSH
1581: LD_INT 250
1583: LESS
1584: IFFALSE 1600
// SetLives ( b , 251 ) else
1586: LD_VAR 0 3
1590: PPUSH
1591: LD_INT 251
1593: PPUSH
1594: CALL_OW 234
1598: GO 1618
// SetLives ( b , i [ 4 ] ) ;
1600: LD_VAR 0 3
1604: PPUSH
1605: LD_VAR 0 2
1609: PUSH
1610: LD_INT 4
1612: ARRAY
1613: PPUSH
1614: CALL_OW 234
// end ;
1618: GO 1463
1620: POP
1621: POP
// uc_nation := 1 ;
1622: LD_ADDR_OWVAR 21
1626: PUSH
1627: LD_INT 1
1629: ST_TO_ADDR
// tmp := [ ] ;
1630: LD_ADDR_VAR 0 4
1634: PUSH
1635: EMPTY
1636: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) ,  ) ;
1637: LD_ADDR_EXP 8
1641: PUSH
1642: LD_STRING Gary
1644: PPUSH
1645: LD_EXP 2
1649: NOT
1650: PPUSH
1651: LD_STRING 
1653: PPUSH
1654: CALL 101 0 3
1658: ST_TO_ADDR
// tmp := tmp ^ Gary ;
1659: LD_ADDR_VAR 0 4
1663: PUSH
1664: LD_VAR 0 4
1668: PUSH
1669: LD_EXP 8
1673: ADD
1674: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
1675: LD_ADDR_EXP 9
1679: PUSH
1680: LD_STRING Bobby
1682: PPUSH
1683: LD_EXP 2
1687: NOT
1688: PPUSH
1689: LD_STRING 03_
1691: PPUSH
1692: CALL 101 0 3
1696: ST_TO_ADDR
// if Bobby then
1697: LD_EXP 9
1701: IFFALSE 1719
// tmp := tmp ^ Bobby ;
1703: LD_ADDR_VAR 0 4
1707: PUSH
1708: LD_VAR 0 4
1712: PUSH
1713: LD_EXP 9
1717: ADD
1718: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
1719: LD_ADDR_EXP 10
1723: PUSH
1724: LD_STRING Cyrus
1726: PPUSH
1727: LD_EXP 2
1731: NOT
1732: PPUSH
1733: LD_STRING 03_
1735: PPUSH
1736: CALL 101 0 3
1740: ST_TO_ADDR
// if Cyrus then
1741: LD_EXP 10
1745: IFFALSE 1763
// tmp := tmp ^ Cyrus ;
1747: LD_ADDR_VAR 0 4
1751: PUSH
1752: LD_VAR 0 4
1756: PUSH
1757: LD_EXP 10
1761: ADD
1762: ST_TO_ADDR
// tmp := tmp ^ CreateCharacterSet ( 09_prev_squad ) ;
1763: LD_ADDR_VAR 0 4
1767: PUSH
1768: LD_VAR 0 4
1772: PUSH
1773: LD_STRING 09_prev_squad
1775: PPUSH
1776: CALL_OW 31
1780: ADD
1781: ST_TO_ADDR
// tmp := tmp diff 0 ;
1782: LD_ADDR_VAR 0 4
1786: PUSH
1787: LD_VAR 0 4
1791: PUSH
1792: LD_INT 0
1794: DIFF
1795: ST_TO_ADDR
// if tmp < 4 then
1796: LD_VAR 0 4
1800: PUSH
1801: LD_INT 4
1803: LESS
1804: IFFALSE 1884
// begin for i = 1 to 3 do
1806: LD_ADDR_VAR 0 2
1810: PUSH
1811: DOUBLE
1812: LD_INT 1
1814: DEC
1815: ST_TO_ADDR
1816: LD_INT 3
1818: PUSH
1819: FOR_TO
1820: IFFALSE 1853
// begin PrepareHuman ( false , 1 , 5 ) ;
1822: LD_INT 0
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_INT 5
1830: PPUSH
1831: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: LD_VAR 0 4
1844: PUSH
1845: CALL_OW 44
1849: ADD
1850: ST_TO_ADDR
// end ;
1851: GO 1819
1853: POP
1854: POP
// PrepareHuman ( false , 4 , 5 ) ;
1855: LD_INT 0
1857: PPUSH
1858: LD_INT 4
1860: PPUSH
1861: LD_INT 5
1863: PPUSH
1864: CALL_OW 380
// tmp := tmp ^ CreateHuman ;
1868: LD_ADDR_VAR 0 4
1872: PUSH
1873: LD_VAR 0 4
1877: PUSH
1878: CALL_OW 44
1882: ADD
1883: ST_TO_ADDR
// end ; for i in tmp do
1884: LD_ADDR_VAR 0 2
1888: PUSH
1889: LD_VAR 0 4
1893: PUSH
1894: FOR_IN
1895: IFFALSE 1920
// PlaceUnitXYR ( i , 106 , 122 , 5 , false ) ;
1897: LD_VAR 0 2
1901: PPUSH
1902: LD_INT 106
1904: PPUSH
1905: LD_INT 122
1907: PPUSH
1908: LD_INT 5
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 50
1918: GO 1894
1920: POP
1921: POP
// tmp := tmp diff Gary ;
1922: LD_ADDR_VAR 0 4
1926: PUSH
1927: LD_VAR 0 4
1931: PUSH
1932: LD_EXP 8
1936: DIFF
1937: ST_TO_ADDR
// b := FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_breastwork ] ] ) ;
1938: LD_ADDR_VAR 0 3
1942: PUSH
1943: LD_INT 22
1945: PUSH
1946: LD_INT 4
1948: PUSH
1949: EMPTY
1950: LIST
1951: LIST
1952: PUSH
1953: LD_INT 30
1955: PUSH
1956: LD_INT 31
1958: PUSH
1959: EMPTY
1960: LIST
1961: LIST
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: PPUSH
1967: CALL_OW 69
1971: ST_TO_ADDR
// for i = 1 to b do
1972: LD_ADDR_VAR 0 2
1976: PUSH
1977: DOUBLE
1978: LD_INT 1
1980: DEC
1981: ST_TO_ADDR
1982: LD_VAR 0 3
1986: PUSH
1987: FOR_TO
1988: IFFALSE 2018
// begin ComEnterUnit ( tmp [ i ] , b [ i ] ) ;
1990: LD_VAR 0 4
1994: PUSH
1995: LD_VAR 0 2
1999: ARRAY
2000: PPUSH
2001: LD_VAR 0 3
2005: PUSH
2006: LD_VAR 0 2
2010: ARRAY
2011: PPUSH
2012: CALL_OW 120
// end ;
2016: GO 1987
2018: POP
2019: POP
// InitHc ;
2020: CALL_OW 19
// InitUc ;
2024: CALL_OW 18
// end ;
2028: LD_VAR 0 1
2032: RET
// export function PowellTransport ; var i , un ; begin
2033: LD_INT 0
2035: PPUSH
2036: PPUSH
2037: PPUSH
// uc_side := 4 ;
2038: LD_ADDR_OWVAR 20
2042: PUSH
2043: LD_INT 4
2045: ST_TO_ADDR
// uc_nation := 1 ;
2046: LD_ADDR_OWVAR 21
2050: PUSH
2051: LD_INT 1
2053: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 6 ) ;
2054: LD_INT 1
2056: PPUSH
2057: LD_INT 3
2059: PPUSH
2060: LD_INT 6
2062: PPUSH
2063: CALL_OW 380
// hc_name :=  ;
2067: LD_ADDR_OWVAR 26
2071: PUSH
2072: LD_STRING 
2074: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2075: LD_ADDR_OWVAR 33
2079: PUSH
2080: LD_STRING SecondCharsGal
2082: ST_TO_ADDR
// hc_face_number := 30 ;
2083: LD_ADDR_OWVAR 34
2087: PUSH
2088: LD_INT 30
2090: ST_TO_ADDR
// powell_trans := CreateHuman ;
2091: LD_ADDR_EXP 13
2095: PUSH
2096: CALL_OW 44
2100: ST_TO_ADDR
// hc_face_number := 31 ;
2101: LD_ADDR_OWVAR 34
2105: PUSH
2106: LD_INT 31
2108: ST_TO_ADDR
// powell_trans := powell_trans ^ CreateHuman ;
2109: LD_ADDR_EXP 13
2113: PUSH
2114: LD_EXP 13
2118: PUSH
2119: CALL_OW 44
2123: ADD
2124: ST_TO_ADDR
// for i = 1 to 2 do
2125: LD_ADDR_VAR 0 2
2129: PUSH
2130: DOUBLE
2131: LD_INT 1
2133: DEC
2134: ST_TO_ADDR
2135: LD_INT 2
2137: PUSH
2138: FOR_TO
2139: IFFALSE 2190
// begin un := PrepareTank ( 4 , 1 , us_medium_tracked , engine_combustion , control_manual , us_cargo_bay , 66 ) ;
2141: LD_ADDR_VAR 0 3
2145: PUSH
2146: LD_INT 4
2148: PPUSH
2149: LD_INT 1
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 12
2163: PPUSH
2164: LD_INT 66
2166: PPUSH
2167: CALL 164 0 7
2171: ST_TO_ADDR
// powell_trans := powell_trans ^ un ;
2172: LD_ADDR_EXP 13
2176: PUSH
2177: LD_EXP 13
2181: PUSH
2182: LD_VAR 0 3
2186: ADD
2187: ST_TO_ADDR
// end ;
2188: GO 2138
2190: POP
2191: POP
// end ; end_of_file
2192: LD_VAR 0 1
2196: RET
// export function Action ; var i , veh ; begin
2197: LD_INT 0
2199: PPUSH
2200: PPUSH
2201: PPUSH
// ComBuild ( alpha_engs , b_depot , 50 , 38 , 2 ) ;
2202: LD_EXP 12
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 50
2212: PPUSH
2213: LD_INT 38
2215: PPUSH
2216: LD_INT 2
2218: PPUSH
2219: CALL_OW 145
// InGameOn ;
2223: CALL_OW 8
// CenterNowOnXY ( 43 , 9 ) ;
2227: LD_INT 43
2229: PPUSH
2230: LD_INT 9
2232: PPUSH
2233: CALL_OW 86
// ComMoveXY ( JMM , 54 , 34 ) ;
2237: LD_EXP 7
2241: PPUSH
2242: LD_INT 54
2244: PPUSH
2245: LD_INT 34
2247: PPUSH
2248: CALL_OW 111
// AddComExitVehicle ( JMM ) ;
2252: LD_EXP 7
2256: PPUSH
2257: CALL_OW 181
// AddComTurnUnit ( JMM , alpha_engs [ 1 ] ) ;
2261: LD_EXP 7
2265: PPUSH
2266: LD_EXP 12
2270: PUSH
2271: LD_INT 1
2273: ARRAY
2274: PPUSH
2275: CALL_OW 179
// repeat wait ( 0 0$01 ) ;
2279: LD_INT 35
2281: PPUSH
2282: CALL_OW 67
// until See ( 4 , JMM ) ;
2286: LD_INT 4
2288: PPUSH
2289: LD_EXP 7
2293: PPUSH
2294: CALL_OW 292
2298: IFFALSE 2279
// CenterNowOnUnits ( JMM ) ;
2300: LD_EXP 7
2304: PPUSH
2305: CALL_OW 87
// Say ( JMM , D2-JMM-1 ) ;
2309: LD_EXP 7
2313: PPUSH
2314: LD_STRING D2-JMM-1
2316: PPUSH
2317: CALL_OW 88
// ComTurnUnit ( alpha_engs [ 3 ] , JMM ) ;
2321: LD_EXP 12
2325: PUSH
2326: LD_INT 3
2328: ARRAY
2329: PPUSH
2330: LD_EXP 7
2334: PPUSH
2335: CALL_OW 119
// Say ( alpha_engs [ 3 ] , D2-Eng1-1 ) ;
2339: LD_EXP 12
2343: PUSH
2344: LD_INT 3
2346: ARRAY
2347: PPUSH
2348: LD_STRING D2-Eng1-1
2350: PPUSH
2351: CALL_OW 88
// Say ( JMM , D2-JMM-2 ) ;
2355: LD_EXP 7
2359: PPUSH
2360: LD_STRING D2-JMM-2
2362: PPUSH
2363: CALL_OW 88
// Say ( alpha_engs [ 3 ] , D2-Eng1-2 ) ;
2367: LD_EXP 12
2371: PUSH
2372: LD_INT 3
2374: ARRAY
2375: PPUSH
2376: LD_STRING D2-Eng1-2
2378: PPUSH
2379: CALL_OW 88
// Say ( JMM , D2-JMM-3 ) ;
2383: LD_EXP 7
2387: PPUSH
2388: LD_STRING D2-JMM-3
2390: PPUSH
2391: CALL_OW 88
// if Houten then
2395: LD_EXP 11
2399: IFFALSE 2597
// begin veh := PrepareTank ( 4 , 1 , us_medium_tracked , engine_solar , control_manual , us_gatling_gun , 55 ) ;
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: LD_INT 4
2408: PPUSH
2409: LD_INT 1
2411: PPUSH
2412: LD_INT 3
2414: PPUSH
2415: LD_INT 2
2417: PPUSH
2418: LD_INT 1
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 55
2426: PPUSH
2427: CALL 164 0 7
2431: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
2432: LD_VAR 0 3
2436: PPUSH
2437: LD_INT 3
2439: PPUSH
2440: CALL_OW 233
// PlaceUnitXY ( veh , 46 , 19 , false ) ;
2444: LD_VAR 0 3
2448: PPUSH
2449: LD_INT 46
2451: PPUSH
2452: LD_INT 19
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 48
// PlaceHumanInUnit ( Houten , veh ) ;
2462: LD_EXP 11
2466: PPUSH
2467: LD_VAR 0 3
2471: PPUSH
2472: CALL_OW 52
// ComMoveXY ( Houten , 49 , 33 ) ;
2476: LD_EXP 11
2480: PPUSH
2481: LD_INT 49
2483: PPUSH
2484: LD_INT 33
2486: PPUSH
2487: CALL_OW 111
// AddComExitVehicle ( Houten ) ;
2491: LD_EXP 11
2495: PPUSH
2496: CALL_OW 181
// AddComTurnUnit ( Houten , JMM ) ;
2500: LD_EXP 11
2504: PPUSH
2505: LD_EXP 7
2509: PPUSH
2510: CALL_OW 179
// repeat wait ( 0 0$01 ) ;
2514: LD_INT 35
2516: PPUSH
2517: CALL_OW 67
// until See ( 1 , Houten ) ;
2521: LD_INT 1
2523: PPUSH
2524: LD_EXP 11
2528: PPUSH
2529: CALL_OW 292
2533: IFFALSE 2514
// ComTurnUnit ( JMM , Houten ) ;
2535: LD_EXP 7
2539: PPUSH
2540: LD_EXP 11
2544: PPUSH
2545: CALL_OW 119
// Say ( JMM , D1d-JMM-1 ) ;
2549: LD_EXP 7
2553: PPUSH
2554: LD_STRING D1d-JMM-1
2556: PPUSH
2557: CALL_OW 88
// Say ( Houten , D1-VanH-1 ) ;
2561: LD_EXP 11
2565: PPUSH
2566: LD_STRING D1-VanH-1
2568: PPUSH
2569: CALL_OW 88
// Say ( JMM , D1-JMM-1v ) ;
2573: LD_EXP 7
2577: PPUSH
2578: LD_STRING D1-JMM-1v
2580: PPUSH
2581: CALL_OW 88
// Say ( JMM , D1-JMM-2v ) ;
2585: LD_EXP 7
2589: PPUSH
2590: LD_STRING D1-JMM-2v
2592: PPUSH
2593: CALL_OW 88
// end ; InGameOff ;
2597: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2601: LD_STRING M1
2603: PPUSH
2604: CALL_OW 337
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_distxy , GetX ( JMM ) , GetY ( JMM ) , 15 ] ] ) , 1 ) ;
2608: LD_INT 22
2610: PUSH
2611: LD_INT 4
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: PUSH
2618: LD_INT 92
2620: PUSH
2621: LD_EXP 7
2625: PPUSH
2626: CALL_OW 250
2630: PUSH
2631: LD_EXP 7
2635: PPUSH
2636: CALL_OW 251
2640: PUSH
2641: LD_INT 15
2643: PUSH
2644: EMPTY
2645: LIST
2646: LIST
2647: LIST
2648: LIST
2649: PUSH
2650: EMPTY
2651: LIST
2652: LIST
2653: PPUSH
2654: CALL_OW 69
2658: PPUSH
2659: LD_INT 1
2661: PPUSH
2662: CALL_OW 235
// ComStop ( alpha_engs ^ JMM ^ Houten ) ;
2666: LD_EXP 12
2670: PUSH
2671: LD_EXP 7
2675: ADD
2676: PUSH
2677: LD_EXP 11
2681: ADD
2682: PPUSH
2683: CALL_OW 141
// end ;
2687: LD_VAR 0 1
2691: RET
// every 0 0$1 trigger See ( 1 , Gary ) and GetDistUnits ( JMM , Gary ) < 6 do var un1 , un2 , un3 , tmp , i ;
2692: LD_INT 1
2694: PPUSH
2695: LD_EXP 8
2699: PPUSH
2700: CALL_OW 292
2704: PUSH
2705: LD_EXP 7
2709: PPUSH
2710: LD_EXP 8
2714: PPUSH
2715: CALL_OW 296
2719: PUSH
2720: LD_INT 6
2722: LESS
2723: AND
2724: IFFALSE 3326
2726: GO 2728
2728: DISABLE
2729: LD_INT 0
2731: PPUSH
2732: PPUSH
2733: PPUSH
2734: PPUSH
2735: PPUSH
// begin InGameOn ;
2736: CALL_OW 8
// tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) ;
2740: LD_ADDR_VAR 0 4
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_INT 4
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: PUSH
2755: LD_INT 21
2757: PUSH
2758: LD_INT 1
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PUSH
2765: EMPTY
2766: LIST
2767: LIST
2768: PPUSH
2769: CALL_OW 69
2773: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
2774: LD_INT 22
2776: PUSH
2777: LD_INT 4
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 69
2788: PPUSH
2789: LD_INT 1
2791: PPUSH
2792: CALL_OW 235
// ComHold ( JMM ) ;
2796: LD_EXP 7
2800: PPUSH
2801: CALL_OW 140
// Say ( JMM , D2-JMM-3a ) ;
2805: LD_EXP 7
2809: PPUSH
2810: LD_STRING D2-JMM-3a
2812: PPUSH
2813: CALL_OW 88
// ComTurnUnit ( Gary , JMM ) ;
2817: LD_EXP 8
2821: PPUSH
2822: LD_EXP 7
2826: PPUSH
2827: CALL_OW 119
// Say ( Gary , D2-Gary-3 ) ;
2831: LD_EXP 8
2835: PPUSH
2836: LD_STRING D2-Gary-3
2838: PPUSH
2839: CALL_OW 88
// ComTurnUnit ( JMM , Gary ) ;
2843: LD_EXP 7
2847: PPUSH
2848: LD_EXP 8
2852: PPUSH
2853: CALL_OW 119
// for i in tmp do
2857: LD_ADDR_VAR 0 5
2861: PUSH
2862: LD_VAR 0 4
2866: PUSH
2867: FOR_IN
2868: IFFALSE 2906
// begin if IsInUnit ( i ) then
2870: LD_VAR 0 5
2874: PPUSH
2875: CALL_OW 310
2879: IFFALSE 2890
// ComExitBuilding ( i ) ;
2881: LD_VAR 0 5
2885: PPUSH
2886: CALL_OW 122
// AddComTurnUnit ( i , JMM ) ;
2890: LD_VAR 0 5
2894: PPUSH
2895: LD_EXP 7
2899: PPUSH
2900: CALL_OW 179
// end ;
2904: GO 2867
2906: POP
2907: POP
// tmp := tmp diff [ Gary , Cyrus , Bobby ] ;
2908: LD_ADDR_VAR 0 4
2912: PUSH
2913: LD_VAR 0 4
2917: PUSH
2918: LD_EXP 8
2922: PUSH
2923: LD_EXP 10
2927: PUSH
2928: LD_EXP 9
2932: PUSH
2933: EMPTY
2934: LIST
2935: LIST
2936: LIST
2937: DIFF
2938: ST_TO_ADDR
// if Bobby then
2939: LD_EXP 9
2943: IFFALSE 2957
// Say ( Bobby , D2-Bobby-3 ) ;
2945: LD_EXP 9
2949: PPUSH
2950: LD_STRING D2-Bobby-3
2952: PPUSH
2953: CALL_OW 88
// if Cyrus then
2957: LD_EXP 10
2961: IFFALSE 2975
// Say ( Cyrus , D2-Cyrus-3 ) ;
2963: LD_EXP 10
2967: PPUSH
2968: LD_STRING D2-Cyrus-3
2970: PPUSH
2971: CALL_OW 88
// Say ( JMM , D2-JMM-4 ) ;
2975: LD_EXP 7
2979: PPUSH
2980: LD_STRING D2-JMM-4
2982: PPUSH
2983: CALL_OW 88
// Say ( Gary , D2-Gary-4 ) ;
2987: LD_EXP 8
2991: PPUSH
2992: LD_STRING D2-Gary-4
2994: PPUSH
2995: CALL_OW 88
// un1 := UnitFilter ( tmp , [ f_sex , sex_male ] ) [ 1 ] ;
2999: LD_ADDR_VAR 0 1
3003: PUSH
3004: LD_VAR 0 4
3008: PPUSH
3009: LD_INT 26
3011: PUSH
3012: LD_INT 1
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PPUSH
3019: CALL_OW 72
3023: PUSH
3024: LD_INT 1
3026: ARRAY
3027: ST_TO_ADDR
// if Cyrus then
3028: LD_EXP 10
3032: IFFALSE 3048
// Say ( Cyrus , D2-Cyrus-4 ) else
3034: LD_EXP 10
3038: PPUSH
3039: LD_STRING D2-Cyrus-4
3041: PPUSH
3042: CALL_OW 88
3046: GO 3060
// Say ( un1 , D2-Sol1-4 ) ;
3048: LD_VAR 0 1
3052: PPUSH
3053: LD_STRING D2-Sol1-4
3055: PPUSH
3056: CALL_OW 88
// Say ( JMM , D2-JMM-5 ) ;
3060: LD_EXP 7
3064: PPUSH
3065: LD_STRING D2-JMM-5
3067: PPUSH
3068: CALL_OW 88
// un2 := UnitFilter ( alpha_engs , [ f_sex , sex_female ] ) [ UnitFilter ( alpha_engs , [ f_sex , sex_female ] ) ] ;
3072: LD_ADDR_VAR 0 2
3076: PUSH
3077: LD_EXP 12
3081: PPUSH
3082: LD_INT 26
3084: PUSH
3085: LD_INT 2
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PPUSH
3092: CALL_OW 72
3096: PUSH
3097: LD_EXP 12
3101: PPUSH
3102: LD_INT 26
3104: PUSH
3105: LD_INT 2
3107: PUSH
3108: EMPTY
3109: LIST
3110: LIST
3111: PPUSH
3112: CALL_OW 72
3116: ARRAY
3117: ST_TO_ADDR
// if un2 then
3118: LD_VAR 0 2
3122: IFFALSE 3160
// begin Say ( un2 , D2-FEng1-5 ) ;
3124: LD_VAR 0 2
3128: PPUSH
3129: LD_STRING D2-FEng1-5
3131: PPUSH
3132: CALL_OW 88
// Say ( JMM , D2-JMM-6 ) ;
3136: LD_EXP 7
3140: PPUSH
3141: LD_STRING D2-JMM-6
3143: PPUSH
3144: CALL_OW 88
// Say ( un2 , D2-FEng1-6 ) ;
3148: LD_VAR 0 2
3152: PPUSH
3153: LD_STRING D2-FEng1-6
3155: PPUSH
3156: CALL_OW 88
// end ; un3 := UnitFilter ( alpha_engs , [ f_sex , sex_male ] ) [ 1 ] ;
3160: LD_ADDR_VAR 0 3
3164: PUSH
3165: LD_EXP 12
3169: PPUSH
3170: LD_INT 26
3172: PUSH
3173: LD_INT 1
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PPUSH
3180: CALL_OW 72
3184: PUSH
3185: LD_INT 1
3187: ARRAY
3188: ST_TO_ADDR
// if un3 then
3189: LD_VAR 0 3
3193: IFFALSE 3234
// begin ComMoveXY ( un3 , 114 , 122 ) ;
3195: LD_VAR 0 3
3199: PPUSH
3200: LD_INT 114
3202: PPUSH
3203: LD_INT 122
3205: PPUSH
3206: CALL_OW 111
// Say ( un3 , D2-Eng1-6 ) ;
3210: LD_VAR 0 3
3214: PPUSH
3215: LD_STRING D2-Eng1-6
3217: PPUSH
3218: CALL_OW 88
// Say ( JMM , D2-JMM-7 ) ;
3222: LD_EXP 7
3226: PPUSH
3227: LD_STRING D2-JMM-7
3229: PPUSH
3230: CALL_OW 88
// end ; Say ( Gary , D2-Gary-7 ) ;
3234: LD_EXP 8
3238: PPUSH
3239: LD_STRING D2-Gary-7
3241: PPUSH
3242: CALL_OW 88
// if un2 then
3246: LD_VAR 0 2
3250: IFFALSE 3264
// Say ( un2 , D2-FEng1-7 ) ;
3252: LD_VAR 0 2
3256: PPUSH
3257: LD_STRING D2-FEng1-7
3259: PPUSH
3260: CALL_OW 88
// Say ( un1 , D2-Sol1-7 ) ;
3264: LD_VAR 0 1
3268: PPUSH
3269: LD_STRING D2-Sol1-7
3271: PPUSH
3272: CALL_OW 88
// Say ( JMM , D2-JMM-8 ) ;
3276: LD_EXP 7
3280: PPUSH
3281: LD_STRING D2-JMM-8
3283: PPUSH
3284: CALL_OW 88
// ComStop ( FilterAllUnits ( [ f_side , 1 ] ) ) ;
3288: LD_INT 22
3290: PUSH
3291: LD_INT 1
3293: PUSH
3294: EMPTY
3295: LIST
3296: LIST
3297: PPUSH
3298: CALL_OW 69
3302: PPUSH
3303: CALL_OW 141
// InGameOff ;
3307: CALL_OW 9
// ChangeMissionObjectives ( M1a ) ;
3311: LD_STRING M1a
3313: PPUSH
3314: CALL_OW 337
// jmm_in_ovsyenko := true ;
3318: LD_ADDR_EXP 4
3322: PUSH
3323: LD_INT 1
3325: ST_TO_ADDR
// end ;
3326: PPOPN 5
3328: END
// every 3 3$00 do
3329: GO 3331
3331: DISABLE
// begin DialogueOn ;
3332: CALL_OW 6
// SayRadio ( Powell , D3-Pow-1 ) ;
3336: LD_EXP 14
3340: PPUSH
3341: LD_STRING D3-Pow-1
3343: PPUSH
3344: CALL_OW 94
// if jmm_in_ovsyenko then
3348: LD_EXP 4
3352: IFFALSE 3380
// begin Say ( JMM , D3-JMM-1 ) ;
3354: LD_EXP 7
3358: PPUSH
3359: LD_STRING D3-JMM-1
3361: PPUSH
3362: CALL_OW 88
// Say ( JMM , D3-JMM-1b ) ;
3366: LD_EXP 7
3370: PPUSH
3371: LD_STRING D3-JMM-1b
3373: PPUSH
3374: CALL_OW 88
// end else
3378: GO 3392
// Say ( JMM , D3-JMM-1a ) ;
3380: LD_EXP 7
3384: PPUSH
3385: LD_STRING D3-JMM-1a
3387: PPUSH
3388: CALL_OW 88
// SayRadio ( Powell , D3-Pow-2 ) ;
3392: LD_EXP 14
3396: PPUSH
3397: LD_STRING D3-Pow-2
3399: PPUSH
3400: CALL_OW 94
// DialogueOff ;
3404: CALL_OW 7
// ChangeMissionObjectives ( M3 ) ;
3408: LD_STRING M3
3410: PPUSH
3411: CALL_OW 337
// powell_want_sib := true ;
3415: LD_ADDR_EXP 5
3419: PUSH
3420: LD_INT 1
3422: ST_TO_ADDR
// end ;
3423: END
// every 0 0$1 trigger powell_want_sib_counter = 0 0$00 do var x , y , i , un , powell_happy , take_cargo ;
3424: LD_EXP 6
3428: PUSH
3429: LD_INT 0
3431: EQUAL
3432: IFFALSE 4498
3434: GO 3436
3436: DISABLE
3437: LD_INT 0
3439: PPUSH
3440: PPUSH
3441: PPUSH
3442: PPUSH
3443: PPUSH
3444: PPUSH
// begin ChangeSideFog ( 4 , 1 ) ;
3445: LD_INT 4
3447: PPUSH
3448: LD_INT 1
3450: PPUSH
3451: CALL_OW 343
// PowellTransport ;
3455: CALL 2033 0 0
// x := 43 ;
3459: LD_ADDR_VAR 0 1
3463: PUSH
3464: LD_INT 43
3466: ST_TO_ADDR
// y := 3 ;
3467: LD_ADDR_VAR 0 2
3471: PUSH
3472: LD_INT 3
3474: ST_TO_ADDR
// for i = 3 to 4 do
3475: LD_ADDR_VAR 0 3
3479: PUSH
3480: DOUBLE
3481: LD_INT 3
3483: DEC
3484: ST_TO_ADDR
3485: LD_INT 4
3487: PUSH
3488: FOR_TO
3489: IFFALSE 3699
// begin SetDir ( powell_trans [ i ] , 4 ) ;
3491: LD_EXP 13
3495: PUSH
3496: LD_VAR 0 3
3500: ARRAY
3501: PPUSH
3502: LD_INT 4
3504: PPUSH
3505: CALL_OW 233
// PlaceUnitXY ( powell_trans [ i ] , x , y , false ) ;
3509: LD_EXP 13
3513: PUSH
3514: LD_VAR 0 3
3518: ARRAY
3519: PPUSH
3520: LD_VAR 0 1
3524: PPUSH
3525: LD_VAR 0 2
3529: PPUSH
3530: LD_INT 0
3532: PPUSH
3533: CALL_OW 48
// PlaceHumanInUnit ( powell_trans [ i - 2 ] , powell_trans [ i ] ) ;
3537: LD_EXP 13
3541: PUSH
3542: LD_VAR 0 3
3546: PUSH
3547: LD_INT 2
3549: MINUS
3550: ARRAY
3551: PPUSH
3552: LD_EXP 13
3556: PUSH
3557: LD_VAR 0 3
3561: ARRAY
3562: PPUSH
3563: CALL_OW 52
// SetCargo ( powell_trans [ i ] , mat_cans , 100 ) ;
3567: LD_EXP 13
3571: PUSH
3572: LD_VAR 0 3
3576: ARRAY
3577: PPUSH
3578: LD_INT 1
3580: PPUSH
3581: LD_INT 100
3583: PPUSH
3584: CALL_OW 290
// ComMoveXY ( powell_trans [ i - 2 ] , 54 , 42 ) ;
3588: LD_EXP 13
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_INT 2
3600: MINUS
3601: ARRAY
3602: PPUSH
3603: LD_INT 54
3605: PPUSH
3606: LD_INT 42
3608: PPUSH
3609: CALL_OW 111
// AddComUnload ( powell_trans [ i - 2 ] ) ;
3613: LD_EXP 13
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_INT 2
3625: MINUS
3626: ARRAY
3627: PPUSH
3628: CALL_OW 219
// AddComMoveXY ( powell_trans [ i - 2 ] , GetX ( terminal ) , GetY ( terminal ) ) ;
3632: LD_EXP 13
3636: PUSH
3637: LD_VAR 0 3
3641: PUSH
3642: LD_INT 2
3644: MINUS
3645: ARRAY
3646: PPUSH
3647: LD_EXP 3
3651: PPUSH
3652: CALL_OW 250
3656: PPUSH
3657: LD_EXP 3
3661: PPUSH
3662: CALL_OW 251
3666: PPUSH
3667: CALL_OW 171
// AddComHold ( powell_trans [ i - 2 ] ) ;
3671: LD_EXP 13
3675: PUSH
3676: LD_VAR 0 3
3680: PUSH
3681: LD_INT 2
3683: MINUS
3684: ARRAY
3685: PPUSH
3686: CALL_OW 200
// Wait ( 0 0$02 ) ;
3690: LD_INT 70
3692: PPUSH
3693: CALL_OW 67
// end ;
3697: GO 3488
3699: POP
3700: POP
// repeat wait ( 0 0$01 ) ;
3701: LD_INT 35
3703: PPUSH
3704: CALL_OW 67
// for i = 3 to 4 do
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: DOUBLE
3714: LD_INT 3
3716: DEC
3717: ST_TO_ADDR
3718: LD_INT 4
3720: PUSH
3721: FOR_TO
3722: IFFALSE 3872
// if GetCargo ( powell_trans [ i ] , mat_cans ) > 0 and not HasTask ( powell_trans [ i ] ) then
3724: LD_EXP 13
3728: PUSH
3729: LD_VAR 0 3
3733: ARRAY
3734: PPUSH
3735: LD_INT 1
3737: PPUSH
3738: CALL_OW 289
3742: PUSH
3743: LD_INT 0
3745: GREATER
3746: PUSH
3747: LD_EXP 13
3751: PUSH
3752: LD_VAR 0 3
3756: ARRAY
3757: PPUSH
3758: CALL_OW 314
3762: NOT
3763: AND
3764: IFFALSE 3870
// begin ComUnload ( powell_trans [ i ] ) ;
3766: LD_EXP 13
3770: PUSH
3771: LD_VAR 0 3
3775: ARRAY
3776: PPUSH
3777: CALL_OW 159
// x := rand ( 0 , 5 ) ;
3781: LD_ADDR_VAR 0 1
3785: PUSH
3786: LD_INT 0
3788: PPUSH
3789: LD_INT 5
3791: PPUSH
3792: CALL_OW 12
3796: ST_TO_ADDR
// AddComMoveXY ( powell_trans [ i ] , ShiftX ( GetX ( powell_trans [ i ] ) , x , 3 ) , ShiftY ( GetY ( powell_trans [ i ] ) , x , 3 ) ) ;
3797: LD_EXP 13
3801: PUSH
3802: LD_VAR 0 3
3806: ARRAY
3807: PPUSH
3808: LD_EXP 13
3812: PUSH
3813: LD_VAR 0 3
3817: ARRAY
3818: PPUSH
3819: CALL_OW 250
3823: PPUSH
3824: LD_VAR 0 1
3828: PPUSH
3829: LD_INT 3
3831: PPUSH
3832: CALL_OW 272
3836: PPUSH
3837: LD_EXP 13
3841: PUSH
3842: LD_VAR 0 3
3846: ARRAY
3847: PPUSH
3848: CALL_OW 251
3852: PPUSH
3853: LD_VAR 0 1
3857: PPUSH
3858: LD_INT 3
3860: PPUSH
3861: CALL_OW 273
3865: PPUSH
3866: CALL_OW 171
// end ;
3870: GO 3721
3872: POP
3873: POP
// until GetDistUnitXY ( powell_trans [ 1 ] , 54 , 42 ) < 4 and ( GetCargo ( powell_trans [ 3 ] , mat_cans ) = 0 ) and ( GetCargo ( powell_trans [ 4 ] , mat_cans ) = 0 ) ;
3874: LD_EXP 13
3878: PUSH
3879: LD_INT 1
3881: ARRAY
3882: PPUSH
3883: LD_INT 54
3885: PPUSH
3886: LD_INT 42
3888: PPUSH
3889: CALL_OW 297
3893: PUSH
3894: LD_INT 4
3896: LESS
3897: PUSH
3898: LD_EXP 13
3902: PUSH
3903: LD_INT 3
3905: ARRAY
3906: PPUSH
3907: LD_INT 1
3909: PPUSH
3910: CALL_OW 289
3914: PUSH
3915: LD_INT 0
3917: EQUAL
3918: AND
3919: PUSH
3920: LD_EXP 13
3924: PUSH
3925: LD_INT 4
3927: ARRAY
3928: PPUSH
3929: LD_INT 1
3931: PPUSH
3932: CALL_OW 289
3936: PUSH
3937: LD_INT 0
3939: EQUAL
3940: AND
3941: IFFALSE 3701
// DialogueOn ;
3943: CALL_OW 6
// CenterNowOnXY ( 53 , 35 ) ;
3947: LD_INT 53
3949: PPUSH
3950: LD_INT 35
3952: PPUSH
3953: CALL_OW 86
// un := powell_trans [ 1 ] ;
3957: LD_ADDR_VAR 0 4
3961: PUSH
3962: LD_EXP 13
3966: PUSH
3967: LD_INT 1
3969: ARRAY
3970: ST_TO_ADDR
// Say ( un , D4-Mech1-1 ) ;
3971: LD_VAR 0 4
3975: PPUSH
3976: LD_STRING D4-Mech1-1
3978: PPUSH
3979: CALL_OW 88
// Say ( JMM , D4-JMM-1 ) ;
3983: LD_EXP 7
3987: PPUSH
3988: LD_STRING D4-JMM-1
3990: PPUSH
3991: CALL_OW 88
// Say ( un , D4-Mech1-2 ) ;
3995: LD_VAR 0 4
3999: PPUSH
4000: LD_STRING D4-Mech1-2
4002: PPUSH
4003: CALL_OW 88
// powell_happy := false ;
4007: LD_ADDR_VAR 0 5
4011: PUSH
4012: LD_INT 0
4014: ST_TO_ADDR
// take_cargo := false ;
4015: LD_ADDR_VAR 0 6
4019: PUSH
4020: LD_INT 0
4022: ST_TO_ADDR
// if GetTerminalCargo >= 60 then
4023: CALL 664 0 0
4027: PUSH
4028: LD_INT 60
4030: GREATEREQUAL
4031: IFFALSE 4079
// begin Say ( JMM , D5-JMM-1 ) ;
4033: LD_EXP 7
4037: PPUSH
4038: LD_STRING D5-JMM-1
4040: PPUSH
4041: CALL_OW 88
// Say ( un , D6-Mech1-1 ) ;
4045: LD_VAR 0 4
4049: PPUSH
4050: LD_STRING D6-Mech1-1
4052: PPUSH
4053: CALL_OW 88
// powell_happy := true ;
4057: LD_ADDR_VAR 0 5
4061: PUSH
4062: LD_INT 1
4064: ST_TO_ADDR
// take_cargo := true ;
4065: LD_ADDR_VAR 0 6
4069: PUSH
4070: LD_INT 1
4072: ST_TO_ADDR
// DialogueOff ;
4073: CALL_OW 7
// end else
4077: GO 4273
// begin case Query ( QWait ) of 1 :
4079: LD_STRING QWait
4081: PPUSH
4082: CALL_OW 97
4086: PUSH
4087: LD_INT 1
4089: DOUBLE
4090: EQUAL
4091: IFTRUE 4095
4093: GO 4186
4095: POP
// begin Say ( JMM , D5b-JMM-1 ) ;
4096: LD_EXP 7
4100: PPUSH
4101: LD_STRING D5b-JMM-1
4103: PPUSH
4104: CALL_OW 88
// DialogueOff ;
4108: CALL_OW 7
// wait ( 5 5$00 ) ;
4112: LD_INT 10500
4114: PPUSH
4115: CALL_OW 67
// if GetTerminalCargo < 60 then
4119: CALL 664 0 0
4123: PUSH
4124: LD_INT 60
4126: LESS
4127: IFFALSE 4168
// begin DialogueOn ;
4129: CALL_OW 6
// CenterNowOnUnits ( terminal ) ;
4133: LD_EXP 3
4137: PPUSH
4138: CALL_OW 87
// Say ( un , D6-Mech1-1a ) ;
4142: LD_VAR 0 4
4146: PPUSH
4147: LD_STRING D6-Mech1-1a
4149: PPUSH
4150: CALL_OW 88
// DialogueOff ;
4154: CALL_OW 7
// powell_happy := false ;
4158: LD_ADDR_VAR 0 5
4162: PUSH
4163: LD_INT 0
4165: ST_TO_ADDR
// end else
4166: GO 4184
// begin powell_happy := true ;
4168: LD_ADDR_VAR 0 5
4172: PUSH
4173: LD_INT 1
4175: ST_TO_ADDR
// take_cargo := true ;
4176: LD_ADDR_VAR 0 6
4180: PUSH
4181: LD_INT 1
4183: ST_TO_ADDR
// end ; end ; 2 :
4184: GO 4273
4186: LD_INT 2
4188: DOUBLE
4189: EQUAL
4190: IFTRUE 4194
4192: GO 4233
4194: POP
// begin Say ( JMM , D5b-JMM-1 ) ;
4195: LD_EXP 7
4199: PPUSH
4200: LD_STRING D5b-JMM-1
4202: PPUSH
4203: CALL_OW 88
// Say ( un , D6-Mech1-1a ) ;
4207: LD_VAR 0 4
4211: PPUSH
4212: LD_STRING D6-Mech1-1a
4214: PPUSH
4215: CALL_OW 88
// DialogueOff ;
4219: CALL_OW 7
// take_cargo := true ;
4223: LD_ADDR_VAR 0 6
4227: PUSH
4228: LD_INT 1
4230: ST_TO_ADDR
// end ; 3 :
4231: GO 4273
4233: LD_INT 3
4235: DOUBLE
4236: EQUAL
4237: IFTRUE 4241
4239: GO 4272
4241: POP
// begin Say ( JMM , D5c-JMM-1 ) ;
4242: LD_EXP 7
4246: PPUSH
4247: LD_STRING D5c-JMM-1
4249: PPUSH
4250: CALL_OW 88
// Say ( un , D6-Mech1-1b ) ;
4254: LD_VAR 0 4
4258: PPUSH
4259: LD_STRING D6-Mech1-1b
4261: PPUSH
4262: CALL_OW 88
// DialogueOff ;
4266: CALL_OW 7
// end ; end ;
4270: GO 4273
4272: POP
// end ; if take_cargo then
4273: LD_VAR 0 6
4277: IFFALSE 4356
// begin x := GetTerminalCargo ;
4279: LD_ADDR_VAR 0 1
4283: PUSH
4284: CALL 664 0 0
4288: ST_TO_ADDR
// if x > 60 then
4289: LD_VAR 0 1
4293: PUSH
4294: LD_INT 60
4296: GREATER
4297: IFFALSE 4307
// x := 60 ;
4299: LD_ADDR_VAR 0 1
4303: PUSH
4304: LD_INT 60
4306: ST_TO_ADDR
// SetResourceType ( GetBase ( terminal ) , mat_siberit , GetTerminalCargo ( ) - x ) ;
4307: LD_EXP 3
4311: PPUSH
4312: CALL_OW 274
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: CALL 664 0 0
4324: PUSH
4325: LD_VAR 0 1
4329: MINUS
4330: PPUSH
4331: CALL_OW 277
// AddCargo ( powell_trans [ 3 ] , mat_siberit , x ) ;
4335: LD_EXP 13
4339: PUSH
4340: LD_INT 3
4342: ARRAY
4343: PPUSH
4344: LD_INT 3
4346: PPUSH
4347: LD_VAR 0 1
4351: PPUSH
4352: CALL_OW 291
// end ; AddComMoveXY ( powell_trans , 43 , 3 ) ;
4356: LD_EXP 13
4360: PPUSH
4361: LD_INT 43
4363: PPUSH
4364: LD_INT 3
4366: PPUSH
4367: CALL_OW 171
// x := 0 0$20 ;
4371: LD_ADDR_VAR 0 1
4375: PUSH
4376: LD_INT 700
4378: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
4379: LD_INT 35
4381: PPUSH
4382: CALL_OW 67
// x := x - 0 0$01 ;
4386: LD_ADDR_VAR 0 1
4390: PUSH
4391: LD_VAR 0 1
4395: PUSH
4396: LD_INT 35
4398: MINUS
4399: ST_TO_ADDR
// until x = 0 0$00 or ( GetDistUnitXY ( powell_trans [ 3 ] , 43 , 3 ) < 4 and GetDistUnitXY ( powell_trans [ 3 ] , 43 , 3 ) < 4 ) ;
4400: LD_VAR 0 1
4404: PUSH
4405: LD_INT 0
4407: EQUAL
4408: PUSH
4409: LD_EXP 13
4413: PUSH
4414: LD_INT 3
4416: ARRAY
4417: PPUSH
4418: LD_INT 43
4420: PPUSH
4421: LD_INT 3
4423: PPUSH
4424: CALL_OW 297
4428: PUSH
4429: LD_INT 4
4431: LESS
4432: PUSH
4433: LD_EXP 13
4437: PUSH
4438: LD_INT 3
4440: ARRAY
4441: PPUSH
4442: LD_INT 43
4444: PPUSH
4445: LD_INT 3
4447: PPUSH
4448: CALL_OW 297
4452: PUSH
4453: LD_INT 4
4455: LESS
4456: AND
4457: OR
4458: IFFALSE 4379
// for i in powell_trans do
4460: LD_ADDR_VAR 0 3
4464: PUSH
4465: LD_EXP 13
4469: PUSH
4470: FOR_IN
4471: IFFALSE 4484
// RemoveUnit ( i ) ;
4473: LD_VAR 0 3
4477: PPUSH
4478: CALL_OW 64
4482: GO 4470
4484: POP
4485: POP
// AddMedal ( powell_happy , EarlySiberite ) ;
4486: LD_VAR 0 5
4490: PPUSH
4491: LD_STRING EarlySiberite
4493: PPUSH
4494: CALL_OW 101
// end ; end_of_file
4498: PPOPN 6
4500: END
// on BuildingStarted ( b , eng ) do begin if GetBType ( b ) = b_depot and not terminal then
4501: LD_VAR 0 1
4505: PPUSH
4506: CALL_OW 266
4510: PUSH
4511: LD_INT 0
4513: EQUAL
4514: PUSH
4515: LD_EXP 3
4519: NOT
4520: AND
4521: IFFALSE 4545
// begin terminal := b ;
4523: LD_ADDR_EXP 3
4527: PUSH
4528: LD_VAR 0 1
4532: ST_TO_ADDR
// SetBName ( terminal , terminal ) ;
4533: LD_EXP 3
4537: PPUSH
4538: LD_STRING terminal
4540: PPUSH
4541: CALL_OW 500
// end ; end ; end_of_file
4545: PPOPN 2
4547: END
// every 0 0$01 trigger powell_want_sib and powell_want_sib_counter do
4548: LD_EXP 5
4552: PUSH
4553: LD_EXP 6
4557: AND
4558: IFFALSE 4595
4560: GO 4562
4562: DISABLE
// begin enable ;
4563: ENABLE
// display_strings := [ #Am09-1 , powell_want_sib_counter ] ;
4564: LD_ADDR_OWVAR 47
4568: PUSH
4569: LD_STRING #Am09-1
4571: PUSH
4572: LD_EXP 6
4576: PUSH
4577: EMPTY
4578: LIST
4579: LIST
4580: ST_TO_ADDR
// powell_want_sib_counter := powell_want_sib_counter - 0 0$01 ;
4581: LD_ADDR_EXP 6
4585: PUSH
4586: LD_EXP 6
4590: PUSH
4591: LD_INT 35
4593: MINUS
4594: ST_TO_ADDR
// end ;
4595: END
// every 0 0$1 trigger powell_want_sib_counter = 0 0$00 do
4596: LD_EXP 6
4600: PUSH
4601: LD_INT 0
4603: EQUAL
4604: IFFALSE 4616
4606: GO 4608
4608: DISABLE
// display_strings := [ ] ;
4609: LD_ADDR_OWVAR 47
4613: PUSH
4614: EMPTY
4615: ST_TO_ADDR
4616: END
