// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 4
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24632 0 0
// PrepareDifficulty ;
 250: CALL 9965 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19563 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19563 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19563 0 2
// PrepareArabianCommander ;
 354: CALL 3167 0 0
// PrepareArabian ;
 358: CALL 3219 0 0
// BuildArabianBase ;
 362: CALL 12664 0 0
// TameApemans ;
 366: CALL 18528 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9559 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9559 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9559 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9559 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9559 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9559 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9559 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9559 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9559 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9559 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9559 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9559 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9559 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9559 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9559 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING 08_Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9559 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9559 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9559 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2210
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2206
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2168: LD_ADDR_EXP 22
2172: PUSH
2173: LD_EXP 22
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: CALL_OW 3
2185: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2186: LD_EXP 22
2190: PUSH
2191: LD_VAR 0 2
2195: ARRAY
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: CALL_OW 336
// end ;
2204: GO 2144
2206: POP
2207: POP
// end else
2208: GO 2270
// begin for i in others09 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_EXP 22
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2268
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 49
// others09 = others09 diff i ;
2238: LD_ADDR_EXP 22
2242: PUSH
2243: LD_EXP 22
2247: PUSH
2248: LD_VAR 0 2
2252: DIFF
2253: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_INT 2
2261: PPUSH
2262: CALL_OW 336
// end ;
2266: GO 2220
2268: POP
2269: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2270: LD_INT 22
2272: PUSH
2273: LD_INT 4
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 69
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: IFFALSE 2434
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2304: LD_ADDR_VAR 0 3
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 2
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 11
2342: PUSH
2343: LD_EXP 14
2347: PUSH
2348: LD_EXP 12
2352: PUSH
2353: LD_EXP 15
2357: PUSH
2358: LD_EXP 17
2362: PUSH
2363: LD_EXP 13
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: DIFF
2376: ST_TO_ADDR
// if not tmp then
2377: LD_VAR 0 3
2381: NOT
2382: IFFALSE 2418
// begin if Denis then
2384: LD_EXP 12
2388: IFFALSE 2404
// SetClass ( Denis , 2 ) else
2390: LD_EXP 12
2394: PPUSH
2395: LD_INT 2
2397: PPUSH
2398: CALL_OW 336
2402: GO 2416
// SetClass ( DeltaDoctor , 2 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_INT 2
2411: PPUSH
2412: CALL_OW 336
// end else
2416: GO 2434
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2418: LD_VAR 0 3
2422: PUSH
2423: LD_INT 1
2425: ARRAY
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 336
// end ; end ; for i in ape09 do
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_EXP 23
2443: PUSH
2444: FOR_IN
2445: IFFALSE 2464
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2447: LD_VAR 0 2
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
2462: GO 2444
2464: POP
2465: POP
// uc_side = 1 ;
2466: LD_ADDR_OWVAR 20
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// hc_class := 1 ;
2474: LD_ADDR_OWVAR 28
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// hc_sex := sex_female ;
2482: LD_ADDR_OWVAR 27
2486: PUSH
2487: LD_INT 2
2489: ST_TO_ADDR
// hc_gallery :=  ;
2490: LD_ADDR_OWVAR 33
2494: PUSH
2495: LD_STRING 
2497: ST_TO_ADDR
// hc_name :=  ;
2498: LD_ADDR_OWVAR 26
2502: PUSH
2503: LD_STRING 
2505: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2506: LD_ADDR_OWVAR 31
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: LD_INT 7
2516: PUSH
2517: LD_INT 1
2519: PUSH
2520: LD_INT 0
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: ST_TO_ADDR
// AmScout = CreateHuman ;
2529: LD_ADDR_EXP 18
2533: PUSH
2534: CALL_OW 44
2538: ST_TO_ADDR
// end ;
2539: LD_VAR 0 1
2543: RET
// export function PrepareCornell ; begin
2544: LD_INT 0
2546: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2547: LD_INT 4
2549: PPUSH
2550: LD_INT 4
2552: PPUSH
2553: CALL_OW 343
// uc_side = 4 ;
2557: LD_ADDR_OWVAR 20
2561: PUSH
2562: LD_INT 4
2564: ST_TO_ADDR
// uc_nation = 1 ;
2565: LD_ADDR_OWVAR 21
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2573: LD_ADDR_EXP 19
2577: PUSH
2578: LD_STRING 03_Cornel
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL 9559 0 2
2588: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2589: LD_EXP 19
2593: PPUSH
2594: LD_INT 8
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2604: LD_EXP 19
2608: PPUSH
2609: LD_INT 350
2611: PPUSH
2612: CALL_OW 234
// if IsInUnit ( JMM ) then
2616: LD_EXP 1
2620: PPUSH
2621: CALL_OW 310
2625: IFFALSE 2668
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2627: LD_EXP 19
2631: PPUSH
2632: LD_EXP 1
2636: PPUSH
2637: CALL_OW 310
2641: PPUSH
2642: CALL_OW 250
2646: PPUSH
2647: LD_EXP 1
2651: PPUSH
2652: CALL_OW 310
2656: PPUSH
2657: CALL_OW 251
2661: PPUSH
2662: CALL_OW 111
2666: GO 2697
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_EXP 1
2677: PPUSH
2678: CALL_OW 250
2682: PPUSH
2683: LD_EXP 1
2687: PPUSH
2688: CALL_OW 251
2692: PPUSH
2693: CALL_OW 111
// end ; end_of_file
2697: LD_VAR 0 1
2701: RET
// export function PrepareRussians ; var i , un ; begin
2702: LD_INT 0
2704: PPUSH
2705: PPUSH
2706: PPUSH
// uc_side = 3 ;
2707: LD_ADDR_OWVAR 20
2711: PUSH
2712: LD_INT 3
2714: ST_TO_ADDR
// uc_nation = 3 ;
2715: LD_ADDR_OWVAR 21
2719: PUSH
2720: LD_INT 3
2722: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2723: LD_ADDR_EXP 25
2727: PUSH
2728: LD_STRING Tsaritsyn
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: CALL 9559 0 2
2738: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2739: LD_EXP 25
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// for i = 1 to 14 do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_INT 14
2766: PUSH
2767: FOR_TO
2768: IFFALSE 2854
// begin uc_side = 3 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 3
2777: ST_TO_ADDR
// uc_nation = 3 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// hc_gallery =  ;
2786: LD_ADDR_OWVAR 33
2790: PUSH
2791: LD_STRING 
2793: ST_TO_ADDR
// hc_name =  ;
2794: LD_ADDR_OWVAR 26
2798: PUSH
2799: LD_STRING 
2801: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2802: LD_INT 0
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: LD_EXP 36
2812: PPUSH
2813: LD_EXP 37
2817: PPUSH
2818: CALL_OW 12
2822: PPUSH
2823: CALL_OW 380
// un = CreateHuman ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2837: LD_VAR 0 3
2841: PPUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 0
2847: PPUSH
2848: CALL_OW 49
// end ;
2852: GO 2767
2854: POP
2855: POP
// for i = 1 to 6 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 6
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2956
// begin uc_side = 3 ;
2872: LD_ADDR_OWVAR 20
2876: PUSH
2877: LD_INT 3
2879: ST_TO_ADDR
// uc_nation = 3 ;
2880: LD_ADDR_OWVAR 21
2884: PUSH
2885: LD_INT 3
2887: ST_TO_ADDR
// hc_gallery =  ;
2888: LD_ADDR_OWVAR 33
2892: PUSH
2893: LD_STRING 
2895: ST_TO_ADDR
// hc_name =  ;
2896: LD_ADDR_OWVAR 26
2900: PUSH
2901: LD_STRING 
2903: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2904: LD_INT 0
2906: PPUSH
2907: LD_INT 2
2909: PPUSH
2910: LD_EXP 36
2914: PPUSH
2915: LD_EXP 37
2919: PPUSH
2920: CALL_OW 12
2924: PPUSH
2925: CALL_OW 380
// un = CreateHuman ;
2929: LD_ADDR_VAR 0 3
2933: PUSH
2934: CALL_OW 44
2938: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 49
// end ;
2954: GO 2869
2956: POP
2957: POP
// for i = 1 to 6 do
2958: LD_ADDR_VAR 0 2
2962: PUSH
2963: DOUBLE
2964: LD_INT 1
2966: DEC
2967: ST_TO_ADDR
2968: LD_INT 6
2970: PUSH
2971: FOR_TO
2972: IFFALSE 3058
// begin uc_side = 3 ;
2974: LD_ADDR_OWVAR 20
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// uc_nation = 3 ;
2982: LD_ADDR_OWVAR 21
2986: PUSH
2987: LD_INT 3
2989: ST_TO_ADDR
// hc_gallery =  ;
2990: LD_ADDR_OWVAR 33
2994: PUSH
2995: LD_STRING 
2997: ST_TO_ADDR
// hc_name =  ;
2998: LD_ADDR_OWVAR 26
3002: PUSH
3003: LD_STRING 
3005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3006: LD_INT 0
3008: PPUSH
3009: LD_INT 3
3011: PPUSH
3012: LD_EXP 36
3016: PPUSH
3017: LD_EXP 37
3021: PPUSH
3022: CALL_OW 12
3026: PPUSH
3027: CALL_OW 380
// un = CreateHuman ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: CALL_OW 44
3040: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3041: LD_VAR 0 3
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 49
// end ;
3056: GO 2971
3058: POP
3059: POP
// for i = 1 to 4 do
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: DOUBLE
3066: LD_INT 1
3068: DEC
3069: ST_TO_ADDR
3070: LD_INT 4
3072: PUSH
3073: FOR_TO
3074: IFFALSE 3160
// begin uc_side = 3 ;
3076: LD_ADDR_OWVAR 20
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// uc_nation = 3 ;
3084: LD_ADDR_OWVAR 21
3088: PUSH
3089: LD_INT 3
3091: ST_TO_ADDR
// hc_gallery =  ;
3092: LD_ADDR_OWVAR 33
3096: PUSH
3097: LD_STRING 
3099: ST_TO_ADDR
// hc_name =  ;
3100: LD_ADDR_OWVAR 26
3104: PUSH
3105: LD_STRING 
3107: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3108: LD_INT 0
3110: PPUSH
3111: LD_INT 4
3113: PPUSH
3114: LD_EXP 36
3118: PPUSH
3119: LD_EXP 37
3123: PPUSH
3124: CALL_OW 12
3128: PPUSH
3129: CALL_OW 380
// un = CreateHuman ;
3133: LD_ADDR_VAR 0 3
3137: PUSH
3138: CALL_OW 44
3142: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3143: LD_VAR 0 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: CALL_OW 49
// end ;
3158: GO 3073
3160: POP
3161: POP
// end ; end_of_file
3162: LD_VAR 0 1
3166: RET
// export function PrepareArabianCommander ; begin
3167: LD_INT 0
3169: PPUSH
// uc_side = 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation = 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3186: LD_ADDR_EXP 26
3190: PUSH
3191: LD_STRING Dietrich
3193: PPUSH
3194: CALL_OW 25
3198: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3199: LD_EXP 26
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: LD_INT 0
3209: PPUSH
3210: CALL_OW 49
// end ;
3214: LD_VAR 0 1
3218: RET
// export function PrepareArabian ; var i , un , veh ; begin
3219: LD_INT 0
3221: PPUSH
3222: PPUSH
3223: PPUSH
3224: PPUSH
// uc_side := 2 ;
3225: LD_ADDR_OWVAR 20
3229: PUSH
3230: LD_INT 2
3232: ST_TO_ADDR
// uc_nation := 2 ;
3233: LD_ADDR_OWVAR 21
3237: PUSH
3238: LD_INT 2
3240: ST_TO_ADDR
// if not Ahmed then
3241: LD_EXP 27
3245: NOT
3246: IFFALSE 3314
// begin InitHc ;
3248: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3252: LD_INT 1
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_EXP 36
3262: PPUSH
3263: LD_EXP 37
3267: PUSH
3268: LD_INT 1
3270: PLUS
3271: PPUSH
3272: CALL_OW 12
3276: PPUSH
3277: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3281: LD_ADDR_OWVAR 26
3285: PUSH
3286: LD_STRING Ahmed Abbasid
3288: ST_TO_ADDR
// Ahmed := CreateHuman ;
3289: LD_ADDR_EXP 27
3293: PUSH
3294: CALL_OW 44
3298: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3299: LD_EXP 27
3303: PPUSH
3304: LD_INT 4
3306: PPUSH
3307: LD_INT 0
3309: PPUSH
3310: CALL_OW 49
// end ; for i = 1 to 3 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 3
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3414
// begin uc_side = 2 ;
3330: LD_ADDR_OWVAR 20
3334: PUSH
3335: LD_INT 2
3337: ST_TO_ADDR
// uc_nation = 2 ;
3338: LD_ADDR_OWVAR 21
3342: PUSH
3343: LD_INT 2
3345: ST_TO_ADDR
// hc_gallery =  ;
3346: LD_ADDR_OWVAR 33
3350: PUSH
3351: LD_STRING 
3353: ST_TO_ADDR
// hc_name =  ;
3354: LD_ADDR_OWVAR 26
3358: PUSH
3359: LD_STRING 
3361: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3362: LD_INT 0
3364: PPUSH
3365: LD_INT 1
3367: PPUSH
3368: LD_EXP 36
3372: PPUSH
3373: LD_EXP 37
3377: PPUSH
3378: CALL_OW 12
3382: PPUSH
3383: CALL_OW 380
// un = CreateHuman ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3397: LD_VAR 0 3
3401: PPUSH
3402: LD_INT 4
3404: PPUSH
3405: LD_INT 0
3407: PPUSH
3408: CALL_OW 49
// end ;
3412: GO 3327
3414: POP
3415: POP
// for i = 1 to 6 do
3416: LD_ADDR_VAR 0 2
3420: PUSH
3421: DOUBLE
3422: LD_INT 1
3424: DEC
3425: ST_TO_ADDR
3426: LD_INT 6
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3516
// begin uc_side = 2 ;
3432: LD_ADDR_OWVAR 20
3436: PUSH
3437: LD_INT 2
3439: ST_TO_ADDR
// uc_nation = 2 ;
3440: LD_ADDR_OWVAR 21
3444: PUSH
3445: LD_INT 2
3447: ST_TO_ADDR
// hc_gallery =  ;
3448: LD_ADDR_OWVAR 33
3452: PUSH
3453: LD_STRING 
3455: ST_TO_ADDR
// hc_name =  ;
3456: LD_ADDR_OWVAR 26
3460: PUSH
3461: LD_STRING 
3463: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3464: LD_INT 0
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_EXP 36
3474: PPUSH
3475: LD_EXP 37
3479: PPUSH
3480: CALL_OW 12
3484: PPUSH
3485: CALL_OW 380
// un = CreateHuman ;
3489: LD_ADDR_VAR 0 3
3493: PUSH
3494: CALL_OW 44
3498: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3429
3516: POP
3517: POP
// for i = 1 to 6 do
3518: LD_ADDR_VAR 0 2
3522: PUSH
3523: DOUBLE
3524: LD_INT 1
3526: DEC
3527: ST_TO_ADDR
3528: LD_INT 6
3530: PUSH
3531: FOR_TO
3532: IFFALSE 3618
// begin uc_side = 2 ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_INT 2
3541: ST_TO_ADDR
// uc_nation = 2 ;
3542: LD_ADDR_OWVAR 21
3546: PUSH
3547: LD_INT 2
3549: ST_TO_ADDR
// hc_gallery =  ;
3550: LD_ADDR_OWVAR 33
3554: PUSH
3555: LD_STRING 
3557: ST_TO_ADDR
// hc_name =  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3566: LD_INT 0
3568: PPUSH
3569: LD_INT 1
3571: PPUSH
3572: LD_EXP 36
3576: PPUSH
3577: LD_EXP 37
3581: PPUSH
3582: CALL_OW 12
3586: PPUSH
3587: CALL_OW 380
// un = CreateHuman ;
3591: LD_ADDR_VAR 0 3
3595: PUSH
3596: CALL_OW 44
3600: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_INT 4
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 49
// end ;
3616: GO 3531
3618: POP
3619: POP
// for i = 1 to 4 do
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_INT 4
3632: PUSH
3633: FOR_TO
3634: IFFALSE 3720
// begin uc_side = 2 ;
3636: LD_ADDR_OWVAR 20
3640: PUSH
3641: LD_INT 2
3643: ST_TO_ADDR
// uc_nation = 2 ;
3644: LD_ADDR_OWVAR 21
3648: PUSH
3649: LD_INT 2
3651: ST_TO_ADDR
// hc_gallery =  ;
3652: LD_ADDR_OWVAR 33
3656: PUSH
3657: LD_STRING 
3659: ST_TO_ADDR
// hc_name =  ;
3660: LD_ADDR_OWVAR 26
3664: PUSH
3665: LD_STRING 
3667: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3668: LD_INT 0
3670: PPUSH
3671: LD_INT 4
3673: PPUSH
3674: LD_EXP 36
3678: PPUSH
3679: LD_EXP 37
3683: PPUSH
3684: CALL_OW 12
3688: PPUSH
3689: CALL_OW 380
// un = CreateHuman ;
3693: LD_ADDR_VAR 0 3
3697: PUSH
3698: CALL_OW 44
3702: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_INT 4
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL_OW 49
// end ;
3718: GO 3633
3720: POP
3721: POP
// for i = 1 to 2 do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_INT 2
3734: PUSH
3735: FOR_TO
3736: IFFALSE 3866
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3738: LD_ADDR_VAR 0 4
3742: PUSH
3743: LD_INT 22
3745: PUSH
3746: LD_INT 2
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 21
3755: PUSH
3756: LD_INT 2
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 58
3765: PUSH
3766: EMPTY
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: ST_TO_ADDR
// uc_side = 2 ;
3779: LD_ADDR_OWVAR 20
3783: PUSH
3784: LD_INT 2
3786: ST_TO_ADDR
// uc_nation = 2 ;
3787: LD_ADDR_OWVAR 21
3791: PUSH
3792: LD_INT 2
3794: ST_TO_ADDR
// hc_gallery =  ;
3795: LD_ADDR_OWVAR 33
3799: PUSH
3800: LD_STRING 
3802: ST_TO_ADDR
// hc_name =  ;
3803: LD_ADDR_OWVAR 26
3807: PUSH
3808: LD_STRING 
3810: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3811: LD_INT 0
3813: PPUSH
3814: LD_INT 3
3816: PPUSH
3817: LD_EXP 36
3821: PPUSH
3822: LD_EXP 37
3826: PPUSH
3827: CALL_OW 12
3831: PPUSH
3832: CALL_OW 380
// un = CreateHuman ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: CALL_OW 44
3845: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3846: LD_VAR 0 3
3850: PPUSH
3851: LD_VAR 0 4
3855: PUSH
3856: LD_INT 1
3858: ARRAY
3859: PPUSH
3860: CALL_OW 52
// end ;
3864: GO 3735
3866: POP
3867: POP
// end ;
3868: LD_VAR 0 1
3872: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3873: LD_INT 0
3875: PPUSH
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
// for i := 1 to 2 do
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: DOUBLE
3887: LD_INT 1
3889: DEC
3890: ST_TO_ADDR
3891: LD_INT 2
3893: PUSH
3894: FOR_TO
3895: IFFALSE 4021
// begin uc_side = 5 ;
3897: LD_ADDR_OWVAR 20
3901: PUSH
3902: LD_INT 5
3904: ST_TO_ADDR
// uc_nation = 2 ;
3905: LD_ADDR_OWVAR 21
3909: PUSH
3910: LD_INT 2
3912: ST_TO_ADDR
// vc_chassis := 31 ;
3913: LD_ADDR_OWVAR 37
3917: PUSH
3918: LD_INT 31
3920: ST_TO_ADDR
// vc_control := control_rider ;
3921: LD_ADDR_OWVAR 38
3925: PUSH
3926: LD_INT 4
3928: ST_TO_ADDR
// animal := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 7
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: CALL_OW 49
// hc_gallery =  ;
3954: LD_ADDR_OWVAR 33
3958: PUSH
3959: LD_STRING 
3961: ST_TO_ADDR
// hc_name =  ;
3962: LD_ADDR_OWVAR 26
3966: PUSH
3967: LD_STRING 
3969: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3970: LD_INT 0
3972: PPUSH
3973: LD_INT 11
3975: PPUSH
3976: LD_EXP 36
3980: PPUSH
3981: LD_EXP 37
3985: PPUSH
3986: CALL_OW 12
3990: PPUSH
3991: CALL_OW 380
// un = CreateHuman ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: CALL_OW 44
4004: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4005: LD_VAR 0 4
4009: PPUSH
4010: LD_VAR 0 3
4014: PPUSH
4015: CALL_OW 52
// end ;
4019: GO 3894
4021: POP
4022: POP
// repeat wait ( 0 0$1 ) ;
4023: LD_INT 35
4025: PPUSH
4026: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4030: LD_ADDR_VAR 0 5
4034: PUSH
4035: LD_INT 22
4037: PUSH
4038: LD_INT 1
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PPUSH
4045: CALL_OW 69
4049: PPUSH
4050: LD_VAR 0 2
4054: PPUSH
4055: CALL_OW 74
4059: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4060: LD_ADDR_VAR 0 6
4064: PUSH
4065: LD_INT 22
4067: PUSH
4068: LD_INT 1
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: LD_INT 59
4080: PUSH
4081: EMPTY
4082: LIST
4083: PUSH
4084: LD_INT 21
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 21
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: PPUSH
4117: CALL_OW 69
4121: PPUSH
4122: LD_VAR 0 2
4126: PPUSH
4127: CALL_OW 74
4131: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: LD_INT 22
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: LD_INT 25
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PPUSH
4161: CALL_OW 69
4165: PUSH
4166: FOR_IN
4167: IFFALSE 4237
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4169: LD_VAR 0 2
4173: PPUSH
4174: LD_VAR 0 5
4178: PPUSH
4179: CALL_OW 296
4183: PUSH
4184: LD_INT 8
4186: PLUS
4187: PUSH
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_VAR 0 6
4197: PPUSH
4198: CALL_OW 296
4202: LESS
4203: IFFALSE 4221
// ComAttackUnit ( i , target1 ) else
4205: LD_VAR 0 2
4209: PPUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL_OW 115
4219: GO 4235
// ComAttackUnit ( i , target2 ) ;
4221: LD_VAR 0 2
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL_OW 115
// end ;
4235: GO 4166
4237: POP
4238: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4239: LD_INT 22
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 25
4251: PUSH
4252: LD_INT 11
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4023
// end ; end_of_file
4293: LD_VAR 0 1
4297: RET
// every 1 do
4298: GO 4300
4300: DISABLE
// begin InGameOn ;
4301: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 19
4310: PPUSH
4311: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4315: LD_EXP 11
4319: PPUSH
4320: CALL_OW 87
// wait ( 0 0$3 ) ;
4324: LD_INT 105
4326: PPUSH
4327: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4331: LD_EXP 1
4335: PPUSH
4336: CALL_OW 310
4340: PPUSH
4341: CALL_OW 85
// Wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// if IsOk ( Gary ) then
4352: LD_EXP 10
4356: PPUSH
4357: CALL_OW 302
4361: IFFALSE 4399
// begin Say ( Gary , D2-Gary-1 ) ;
4363: LD_EXP 10
4367: PPUSH
4368: LD_STRING D2-Gary-1
4370: PPUSH
4371: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4375: LD_EXP 1
4379: PPUSH
4380: LD_STRING D2-JMM-1
4382: PPUSH
4383: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4387: LD_EXP 10
4391: PPUSH
4392: LD_STRING D2-Gary-2
4394: PPUSH
4395: CALL_OW 88
// end ; InGameOff ;
4399: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4403: LD_STRING M1
4405: PPUSH
4406: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4410: LD_INT 38
4412: PPUSH
4413: LD_INT 1
4415: PPUSH
4416: LD_INT 100
4418: PPUSH
4419: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4423: LD_INT 47
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: LD_INT 50
4431: PPUSH
4432: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4436: LD_INT 47
4438: PPUSH
4439: LD_INT 3
4441: PPUSH
4442: LD_INT 50
4444: PPUSH
4445: CALL_OW 291
// SaveForQuickRestart ;
4449: CALL_OW 22
// end ;
4453: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4454: LD_EXP 1
4458: PPUSH
4459: LD_EXP 11
4463: PPUSH
4464: CALL_OW 296
4468: PUSH
4469: LD_INT 15
4471: LESS
4472: IFFALSE 4938
4474: GO 4476
4476: DISABLE
// begin InGameOn ;
4477: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4481: LD_EXP 1
4485: PPUSH
4486: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4490: LD_EXP 1
4494: PPUSH
4495: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4499: LD_EXP 1
4503: PPUSH
4504: LD_EXP 11
4508: PPUSH
4509: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4513: LD_INT 35
4515: PPUSH
4516: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4520: LD_EXP 11
4524: PUSH
4525: LD_EXP 13
4529: PUSH
4530: LD_EXP 12
4534: PUSH
4535: LD_EXP 14
4539: PUSH
4540: LD_EXP 8
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: PPUSH
4552: LD_EXP 1
4556: PPUSH
4557: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4561: LD_EXP 1
4565: PPUSH
4566: LD_EXP 11
4570: PPUSH
4571: CALL_OW 296
4575: PUSH
4576: LD_INT 5
4578: LESS
4579: IFFALSE 4513
// ComTurnUnit ( JMM , Simms ) ;
4581: LD_EXP 1
4585: PPUSH
4586: LD_EXP 11
4590: PPUSH
4591: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4595: LD_EXP 11
4599: PUSH
4600: LD_EXP 13
4604: PUSH
4605: LD_EXP 12
4609: PUSH
4610: LD_EXP 14
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PPUSH
4621: LD_EXP 1
4625: PPUSH
4626: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4630: LD_EXP 1
4634: PUSH
4635: LD_EXP 11
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4648: LD_EXP 11
4652: PPUSH
4653: LD_STRING D2a-Sim-1
4655: PPUSH
4656: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING D2a-JMM-1
4667: PPUSH
4668: CALL_OW 88
// if IsOk ( Joan ) then
4672: LD_EXP 13
4676: PPUSH
4677: CALL_OW 302
4681: IFFALSE 4733
// begin ComTurnUnit ( JMM , Joan ) ;
4683: LD_EXP 1
4687: PPUSH
4688: LD_EXP 13
4692: PPUSH
4693: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4697: LD_EXP 13
4701: PPUSH
4702: LD_STRING D2b-Joan-1
4704: PPUSH
4705: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4709: LD_EXP 1
4713: PPUSH
4714: LD_STRING D2b-JMM-1
4716: PPUSH
4717: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4721: LD_EXP 13
4725: PPUSH
4726: LD_STRING D2b-Joan-2
4728: PPUSH
4729: CALL_OW 88
// end ; if IsOk ( Denis ) then
4733: LD_EXP 12
4737: PPUSH
4738: CALL_OW 302
4742: IFFALSE 4770
// begin ComTurnUnit ( JMM , Denis ) ;
4744: LD_EXP 1
4748: PPUSH
4749: LD_EXP 12
4753: PPUSH
4754: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4758: LD_EXP 12
4762: PPUSH
4763: LD_STRING D2c-Den-1
4765: PPUSH
4766: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4770: LD_EXP 8
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4848
// begin repeat wait ( 0 0$1 ) ;
4781: LD_INT 35
4783: PPUSH
4784: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4788: LD_EXP 8
4792: PPUSH
4793: LD_EXP 1
4797: PPUSH
4798: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4802: LD_EXP 1
4806: PPUSH
4807: LD_EXP 8
4811: PPUSH
4812: CALL_OW 296
4816: PUSH
4817: LD_INT 5
4819: LESS
4820: IFFALSE 4781
// ComTurnUnit ( JMM , Kikuchi ) ;
4822: LD_EXP 1
4826: PPUSH
4827: LD_EXP 8
4831: PPUSH
4832: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4836: LD_EXP 8
4840: PPUSH
4841: LD_STRING D3b-Yam-1
4843: PPUSH
4844: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4848: LD_EXP 14
4852: PPUSH
4853: CALL_OW 302
4857: IFFALSE 4897
// begin ComTurnUnit ( JMM , Khatam ) ;
4859: LD_EXP 1
4863: PPUSH
4864: LD_EXP 14
4868: PPUSH
4869: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4873: LD_EXP 1
4877: PPUSH
4878: LD_STRING D2c-JMM-1
4880: PPUSH
4881: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4885: LD_EXP 14
4889: PPUSH
4890: LD_STRING D2c-Khat-1
4892: PPUSH
4893: CALL_OW 88
// end ; InGameOff ;
4897: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4901: LD_INT 22
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PPUSH
4911: CALL_OW 69
4915: PPUSH
4916: LD_INT 1
4918: PPUSH
4919: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4923: LD_STRING M1a
4925: PPUSH
4926: CALL_OW 337
// joinEpsilon = 1 ;
4930: LD_ADDR_EXP 29
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// end ;
4938: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4939: LD_INT 38
4941: PPUSH
4942: LD_INT 1
4944: PPUSH
4945: CALL_OW 289
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_INT 47
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 289
4964: PUSH
4965: LD_INT 0
4967: EQUAL
4968: AND
4969: PUSH
4970: LD_INT 47
4972: PPUSH
4973: LD_INT 2
4975: PPUSH
4976: CALL_OW 289
4980: PUSH
4981: LD_INT 0
4983: EQUAL
4984: AND
4985: IFFALSE 5010
4987: GO 4989
4989: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4990: LD_INT 38
4992: PUSH
4993: LD_INT 47
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: LD_INT 62
5002: PPUSH
5003: LD_INT 6
5005: PPUSH
5006: CALL_OW 111
5010: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5011: LD_EXP 61
5015: PUSH
5016: LD_INT 1
5018: EQUAL
5019: IFFALSE 6151
5021: GO 5023
5023: DISABLE
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
5028: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5029: LD_ADDR_VAR 0 1
5033: PUSH
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 25
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 26
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PUSH
5074: LD_EXP 1
5078: PUSH
5079: LD_EXP 2
5083: PUSH
5084: LD_EXP 3
5088: PUSH
5089: LD_EXP 4
5093: PUSH
5094: LD_EXP 5
5098: PUSH
5099: LD_EXP 6
5103: PUSH
5104: LD_EXP 7
5108: PUSH
5109: LD_EXP 8
5113: PUSH
5114: LD_EXP 9
5118: PUSH
5119: LD_EXP 10
5123: PUSH
5124: LD_EXP 11
5128: PUSH
5129: LD_EXP 12
5133: PUSH
5134: LD_EXP 13
5138: PUSH
5139: LD_EXP 14
5143: PUSH
5144: LD_EXP 15
5148: PUSH
5149: LD_EXP 16
5153: PUSH
5154: LD_EXP 17
5158: PUSH
5159: LD_EXP 18
5163: PUSH
5164: LD_EXP 19
5168: PUSH
5169: LD_EXP 24
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: DIFF
5196: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5197: LD_ADDR_VAR 0 2
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 26
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 2
5224: PUSH
5225: LD_INT 25
5227: PUSH
5228: LD_INT 1
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 25
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 2
5280: PUSH
5281: LD_EXP 3
5285: PUSH
5286: LD_EXP 4
5290: PUSH
5291: LD_EXP 5
5295: PUSH
5296: LD_EXP 6
5300: PUSH
5301: LD_EXP 7
5305: PUSH
5306: LD_EXP 8
5310: PUSH
5311: LD_EXP 9
5315: PUSH
5316: LD_EXP 10
5320: PUSH
5321: LD_EXP 11
5325: PUSH
5326: LD_EXP 12
5330: PUSH
5331: LD_EXP 13
5335: PUSH
5336: LD_EXP 14
5340: PUSH
5341: LD_EXP 15
5345: PUSH
5346: LD_EXP 16
5350: PUSH
5351: LD_EXP 17
5355: PUSH
5356: LD_EXP 18
5360: PUSH
5361: LD_EXP 19
5365: PUSH
5366: LD_EXP 24
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: DIFF
5393: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5394: LD_EXP 10
5398: PUSH
5399: LD_VAR 0 2
5403: OR
5404: PUSH
5405: LD_EXP 17
5409: PUSH
5410: LD_VAR 0 1
5414: OR
5415: AND
5416: IFFALSE 5635
// begin DialogueOn ;
5418: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 302
5431: IFFALSE 5447
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5433: LD_EXP 17
5437: PPUSH
5438: LD_STRING D3-Sci1-1
5440: PPUSH
5441: CALL_OW 88
5445: GO 5459
// Say ( tmp1 , D3-Sci1-1 ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_STRING D3-Sci1-1
5454: PPUSH
5455: CALL_OW 88
// if IsOk ( Gary ) then
5459: LD_EXP 10
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5484
// Say ( Gary , D3-Gary-1 ) else
5470: LD_EXP 10
5474: PPUSH
5475: LD_STRING D3-Gary-1
5477: PPUSH
5478: CALL_OW 88
5482: GO 5496
// Say ( tmp2 , D3-Gary-1 ) ;
5484: LD_VAR 0 2
5488: PPUSH
5489: LD_STRING D3-Gary-1
5491: PPUSH
5492: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5496: LD_EXP 17
5500: PPUSH
5501: CALL_OW 302
5505: IFFALSE 5521
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5507: LD_EXP 17
5511: PPUSH
5512: LD_STRING D3-Sci1-2
5514: PPUSH
5515: CALL_OW 88
5519: GO 5533
// Say ( tmp1 , D3-Sci1-2 ) ;
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_STRING D3-Sci1-2
5528: PPUSH
5529: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5533: LD_EXP 1
5537: PPUSH
5538: LD_STRING D3-JMM-2
5540: PPUSH
5541: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5545: LD_EXP 17
5549: PPUSH
5550: CALL_OW 302
5554: IFFALSE 5570
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5556: LD_EXP 17
5560: PPUSH
5561: LD_STRING D3-Sci1-3
5563: PPUSH
5564: CALL_OW 88
5568: GO 5582
// Say ( tmp1 , D3-Sci1-3 ) ;
5570: LD_VAR 0 1
5574: PPUSH
5575: LD_STRING D3-Sci1-3
5577: PPUSH
5578: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5582: LD_EXP 1
5586: PPUSH
5587: LD_STRING D3-JMM-3
5589: PPUSH
5590: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5594: LD_EXP 17
5598: PPUSH
5599: CALL_OW 302
5603: IFFALSE 5619
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5605: LD_EXP 17
5609: PPUSH
5610: LD_STRING D3-Sci1-4
5612: PPUSH
5613: CALL_OW 88
5617: GO 5631
// Say ( tmp1 , D3-Sci1-4 ) ;
5619: LD_VAR 0 1
5623: PPUSH
5624: LD_STRING D3-Sci1-4
5626: PPUSH
5627: CALL_OW 88
// DialogueOff ;
5631: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5635: LD_INT 12
5637: PPUSH
5638: LD_INT 1
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5648: LD_INT 32
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5661: LD_INT 12
5663: PPUSH
5664: LD_INT 1
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5674: LD_INT 33
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: LD_INT 1
5682: PPUSH
5683: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5687: LD_STRING M2
5689: PPUSH
5690: CALL_OW 337
// wait ( 3 3$0 ) ;
5694: LD_INT 6300
5696: PPUSH
5697: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5701: LD_INT 35
5703: PPUSH
5704: CALL_OW 67
// until not InBattle ( 1 ) ;
5708: LD_INT 1
5710: PPUSH
5711: CALL_OW 463
5715: NOT
5716: IFFALSE 5701
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5718: LD_EXP 11
5722: PPUSH
5723: CALL_OW 302
5727: PUSH
5728: LD_EXP 17
5732: PPUSH
5733: CALL_OW 302
5737: AND
5738: IFFALSE 5907
// begin DialogueOn ;
5740: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5744: LD_EXP 11
5748: PPUSH
5749: LD_STRING D3a-Sim-1
5751: PPUSH
5752: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5756: LD_EXP 17
5760: PPUSH
5761: LD_STRING D3a-Sci1-1
5763: PPUSH
5764: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5768: LD_EXP 11
5772: PPUSH
5773: LD_STRING D3a-Sim-2
5775: PPUSH
5776: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5780: LD_EXP 17
5784: PPUSH
5785: LD_STRING D3a-Sci1-2
5787: PPUSH
5788: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5792: LD_EXP 11
5796: PPUSH
5797: LD_STRING D3a-Sim-3
5799: PPUSH
5800: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5804: LD_EXP 17
5808: PPUSH
5809: LD_STRING D3a-Sci1-3
5811: PPUSH
5812: CALL_OW 88
// if IsOK ( Joan ) then
5816: LD_EXP 13
5820: PPUSH
5821: CALL_OW 302
5825: IFFALSE 5841
// Say ( Simms , D3a-Sim-4 ) else
5827: LD_EXP 11
5831: PPUSH
5832: LD_STRING D3a-Sim-4
5834: PPUSH
5835: CALL_OW 88
5839: GO 5853
// Say ( Simms , D3a-Sim-4a ) ;
5841: LD_EXP 11
5845: PPUSH
5846: LD_STRING D3a-Sim-4a
5848: PPUSH
5849: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5853: LD_EXP 17
5857: PPUSH
5858: LD_STRING D3a-Sci1-4
5860: PPUSH
5861: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5865: LD_EXP 11
5869: PPUSH
5870: LD_STRING D3a-Sim-5
5872: PPUSH
5873: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5877: LD_EXP 17
5881: PPUSH
5882: LD_STRING D3a-Sci1-5
5884: PPUSH
5885: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5889: LD_EXP 11
5893: PPUSH
5894: LD_STRING D3a-Sim-6
5896: PPUSH
5897: CALL_OW 88
// DialogueOff ;
5901: CALL_OW 7
// end else
5905: GO 6151
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5907: LD_ADDR_VAR 0 3
5911: PUSH
5912: LD_INT 22
5914: PUSH
5915: LD_INT 1
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PPUSH
5936: CALL_OW 69
5940: PUSH
5941: LD_EXP 11
5945: PUSH
5946: LD_EXP 14
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: DIFF
5955: ST_TO_ADDR
// if tmp3 > 0 then
5956: LD_VAR 0 3
5960: PUSH
5961: LD_INT 0
5963: GREATER
5964: IFFALSE 6151
// begin DialogueOn ;
5966: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5970: LD_EXP 11
5974: PPUSH
5975: LD_STRING D3a-Sim-1
5977: PPUSH
5978: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 1
5989: ARRAY
5990: PPUSH
5991: LD_STRING D3a-Sci1-1
5993: PPUSH
5994: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5998: LD_EXP 11
6002: PPUSH
6003: LD_STRING D3a-Sim-2
6005: PPUSH
6006: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6010: LD_VAR 0 3
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: LD_STRING D3a-Sci1-2
6021: PPUSH
6022: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6026: LD_EXP 11
6030: PPUSH
6031: LD_STRING D3a-Sim-3
6033: PPUSH
6034: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6038: LD_VAR 0 3
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: LD_STRING D3a-Sci1-3
6049: PPUSH
6050: CALL_OW 88
// if IsOK ( Joan ) then
6054: LD_EXP 13
6058: PPUSH
6059: CALL_OW 302
6063: IFFALSE 6079
// Say ( Simms , D3a-Sim-4 ) else
6065: LD_EXP 11
6069: PPUSH
6070: LD_STRING D3a-Sim-4
6072: PPUSH
6073: CALL_OW 88
6077: GO 6091
// Say ( Simms , D3a-Sim-4a ) ;
6079: LD_EXP 11
6083: PPUSH
6084: LD_STRING D3a-Sim-4a
6086: PPUSH
6087: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_STRING D3a-Sci1-4
6102: PPUSH
6103: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6107: LD_EXP 11
6111: PPUSH
6112: LD_STRING D3a-Sim-5
6114: PPUSH
6115: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 1
6126: ARRAY
6127: PPUSH
6128: LD_STRING D3a-Sci1-5
6130: PPUSH
6131: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6135: LD_EXP 11
6139: PPUSH
6140: LD_STRING D3a-Sim-6
6142: PPUSH
6143: CALL_OW 88
// DialogueOff ;
6147: CALL_OW 7
// end ; end ; end ;
6151: PPOPN 3
6153: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6154: LD_EXP 29
6158: PUSH
6159: LD_INT 1
6161: EQUAL
6162: IFFALSE 6482
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6170: LD_EXP 18
6174: PPUSH
6175: LD_STRING D4-FSol1-1
6177: PPUSH
6178: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6182: LD_STRING M3
6184: PPUSH
6185: CALL_OW 337
// PrepareRussians ;
6189: CALL 2702 0 0
// rnd = Rand ( 1 , 100 ) ;
6193: LD_ADDR_VAR 0 1
6197: PUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 100
6203: PPUSH
6204: CALL_OW 12
6208: ST_TO_ADDR
// if difficulty = 1 then
6209: LD_OWVAR 67
6213: PUSH
6214: LD_INT 1
6216: EQUAL
6217: IFFALSE 6300
// begin if rnd > 0 and rnd < 51 then
6219: LD_VAR 0 1
6223: PUSH
6224: LD_INT 0
6226: GREATER
6227: PUSH
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 51
6235: LESS
6236: AND
6237: IFFALSE 6246
// BuildRussianBase ( 2 ) ;
6239: LD_INT 2
6241: PPUSH
6242: CALL 10285 0 1
// if rnd > 50 and rnd < 81 then
6246: LD_VAR 0 1
6250: PUSH
6251: LD_INT 50
6253: GREATER
6254: PUSH
6255: LD_VAR 0 1
6259: PUSH
6260: LD_INT 81
6262: LESS
6263: AND
6264: IFFALSE 6273
// BuildRussianBase ( 1 ) ;
6266: LD_INT 1
6268: PPUSH
6269: CALL 10285 0 1
// if rnd > 80 and rnd < 101 then
6273: LD_VAR 0 1
6277: PUSH
6278: LD_INT 80
6280: GREATER
6281: PUSH
6282: LD_VAR 0 1
6286: PUSH
6287: LD_INT 101
6289: LESS
6290: AND
6291: IFFALSE 6300
// BuildRussianBase ( 3 ) ;
6293: LD_INT 3
6295: PPUSH
6296: CALL 10285 0 1
// end ; if difficulty = 2 then
6300: LD_OWVAR 67
6304: PUSH
6305: LD_INT 2
6307: EQUAL
6308: IFFALSE 6391
// begin if rnd > 0 and rnd < 61 then
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 0
6317: GREATER
6318: PUSH
6319: LD_VAR 0 1
6323: PUSH
6324: LD_INT 61
6326: LESS
6327: AND
6328: IFFALSE 6337
// BuildRussianBase ( 2 ) ;
6330: LD_INT 2
6332: PPUSH
6333: CALL 10285 0 1
// if rnd > 60 and rnd < 81 then
6337: LD_VAR 0 1
6341: PUSH
6342: LD_INT 60
6344: GREATER
6345: PUSH
6346: LD_VAR 0 1
6350: PUSH
6351: LD_INT 81
6353: LESS
6354: AND
6355: IFFALSE 6364
// BuildRussianBase ( 1 ) ;
6357: LD_INT 1
6359: PPUSH
6360: CALL 10285 0 1
// if rnd > 80 and rnd < 101 then
6364: LD_VAR 0 1
6368: PUSH
6369: LD_INT 80
6371: GREATER
6372: PUSH
6373: LD_VAR 0 1
6377: PUSH
6378: LD_INT 101
6380: LESS
6381: AND
6382: IFFALSE 6391
// BuildRussianBase ( 3 ) ;
6384: LD_INT 3
6386: PPUSH
6387: CALL 10285 0 1
// end ; if difficulty = 3 then
6391: LD_OWVAR 67
6395: PUSH
6396: LD_INT 3
6398: EQUAL
6399: IFFALSE 6482
// begin if rnd > 0 and rnd < 71 then
6401: LD_VAR 0 1
6405: PUSH
6406: LD_INT 0
6408: GREATER
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 71
6417: LESS
6418: AND
6419: IFFALSE 6428
// BuildRussianBase ( 3 ) ;
6421: LD_INT 3
6423: PPUSH
6424: CALL 10285 0 1
// if rnd > 70 and rnd < 81 then
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 70
6435: GREATER
6436: PUSH
6437: LD_VAR 0 1
6441: PUSH
6442: LD_INT 81
6444: LESS
6445: AND
6446: IFFALSE 6455
// BuildRussianBase ( 2 ) ;
6448: LD_INT 2
6450: PPUSH
6451: CALL 10285 0 1
// if rnd > 80 and rnd < 101 then
6455: LD_VAR 0 1
6459: PUSH
6460: LD_INT 80
6462: GREATER
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: LD_INT 101
6471: LESS
6472: AND
6473: IFFALSE 6482
// BuildRussianBase ( 1 ) ;
6475: LD_INT 1
6477: PPUSH
6478: CALL 10285 0 1
// end ; end ;
6482: PPOPN 1
6484: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6485: LD_INT 54
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: CALL_OW 321
6495: PUSH
6496: LD_INT 2
6498: EQUAL
6499: PUSH
6500: LD_INT 21
6502: PPUSH
6503: LD_INT 1
6505: PPUSH
6506: CALL_OW 321
6510: PUSH
6511: LD_INT 2
6513: EQUAL
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PPUSH
6519: LD_INT 1
6521: PPUSH
6522: CALL_OW 321
6526: PUSH
6527: LD_INT 2
6529: EQUAL
6530: OR
6531: IFFALSE 6843
6533: GO 6535
6535: DISABLE
6536: LD_INT 0
6538: PPUSH
6539: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6540: LD_EXP 17
6544: PPUSH
6545: CALL_OW 302
6549: IFFALSE 6563
// tmp := DeltaDoctor else
6551: LD_ADDR_VAR 0 2
6555: PUSH
6556: LD_EXP 17
6560: ST_TO_ADDR
6561: GO 6573
// tmp := Denis ;
6563: LD_ADDR_VAR 0 2
6567: PUSH
6568: LD_EXP 12
6572: ST_TO_ADDR
// if tmp then
6573: LD_VAR 0 2
6577: IFFALSE 6671
// begin DialogueOn ;
6579: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6583: LD_EXP 1
6587: PPUSH
6588: LD_STRING D6-JMM-1
6590: PPUSH
6591: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6595: LD_VAR 0 2
6599: PPUSH
6600: LD_STRING D6-Sci1-1
6602: PPUSH
6603: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6607: LD_EXP 1
6611: PPUSH
6612: LD_STRING D6-JMM-2
6614: PPUSH
6615: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_STRING D6-Sci1-2
6626: PPUSH
6627: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6631: LD_EXP 1
6635: PPUSH
6636: LD_STRING D6-JMM-3
6638: PPUSH
6639: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6643: LD_VAR 0 2
6647: PPUSH
6648: LD_STRING D6-Sci1-3
6650: PPUSH
6651: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6655: LD_EXP 1
6659: PPUSH
6660: LD_STRING D6-JMM-4
6662: PPUSH
6663: CALL_OW 88
// DialogueOff ;
6667: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6671: LD_INT 1050
6673: PPUSH
6674: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6678: LD_EXP 49
6682: PUSH
6683: LD_INT 0
6685: EQUAL
6686: PUSH
6687: LD_EXP 14
6691: PPUSH
6692: CALL_OW 302
6696: AND
6697: IFFALSE 6755
// begin DialogueOn ;
6699: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6703: LD_EXP 27
6707: PPUSH
6708: LD_STRING D5-Ar1-1
6710: PPUSH
6711: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6715: LD_EXP 26
6719: PPUSH
6720: LD_STRING D5-Diet-1
6722: PPUSH
6723: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6727: LD_EXP 27
6731: PPUSH
6732: LD_STRING D5-Ar1-2
6734: PPUSH
6735: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6739: LD_EXP 26
6743: PPUSH
6744: LD_STRING D5-Diet-2
6746: PPUSH
6747: CALL_OW 88
// DialogueOff ;
6751: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6755: LD_INT 2100
6757: PUSH
6758: LD_INT 3150
6760: PUSH
6761: LD_INT 4200
6763: PUSH
6764: LD_INT 5250
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 4
6778: PPUSH
6779: CALL_OW 12
6783: ARRAY
6784: PPUSH
6785: CALL_OW 67
// if arabianTrait = 0 then
6789: LD_EXP 49
6793: PUSH
6794: LD_INT 0
6796: EQUAL
6797: IFFALSE 6843
// begin arabianTrait = 1 ;
6799: LD_ADDR_EXP 49
6803: PUSH
6804: LD_INT 1
6806: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6807: LD_INT 2
6809: PPUSH
6810: LD_INT 3
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 6
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 80
// PrepareArabianTrait ;
6839: CALL 6846 0 0
// end ; end ;
6843: PPOPN 2
6845: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6854: LD_INT 22
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 25
6866: PUSH
6867: LD_INT 4
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PPUSH
6883: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6887: LD_INT 22
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 25
6899: PUSH
6900: LD_INT 3
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 69
6915: PPUSH
6916: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6920: LD_EXP 26
6924: PPUSH
6925: LD_INT 8
6927: PPUSH
6928: CALL_OW 336
// wait ( 0 0$3 ) ;
6932: LD_INT 105
6934: PPUSH
6935: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6939: LD_INT 76
6941: PPUSH
6942: LD_INT 19
6944: PPUSH
6945: CALL_OW 84
// DialogueOn ;
6949: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6953: LD_INT 22
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 26
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 25
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 25
7008: PUSH
7009: LD_INT 4
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 25
7018: PUSH
7019: LD_INT 5
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: LD_STRING D8-Sol1-1
7046: PPUSH
7047: LD_STRING D8-Sol1-1
7049: PPUSH
7050: CALL 9616 0 3
// if IsOK ( DeltaDoctor ) then
7054: LD_EXP 17
7058: PPUSH
7059: CALL_OW 302
7063: IFFALSE 7079
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7065: LD_EXP 17
7069: PPUSH
7070: LD_STRING D8-Sci1-1
7072: PPUSH
7073: CALL_OW 88
7077: GO 7180
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7079: LD_INT 22
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 26
7091: PUSH
7092: LD_INT 1
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: LD_INT 25
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 25
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 25
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 25
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: PPUSH
7165: CALL_OW 69
7169: PPUSH
7170: LD_STRING D8-Sol1-1
7172: PPUSH
7173: LD_STRING D8-Sol1-1
7175: PPUSH
7176: CALL 9616 0 3
// Say ( JMM , D8-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D8-JMM-1
7187: PPUSH
7188: CALL_OW 88
// DialogueOff ;
7192: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7196: LD_INT 2
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7206: LD_INT 1
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7222: LD_INT 3
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_INT 1
7230: PPUSH
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7238: LD_EXP 26
7242: PPUSH
7243: LD_INT 1
7245: PPUSH
7246: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7250: LD_STRING M4
7252: PPUSH
7253: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7257: LD_ADDR_VAR 0 5
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 25
7297: PUSH
7298: LD_INT 8
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 25
7307: PUSH
7308: LD_INT 15
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: PUSH
7331: LD_EXP 26
7335: PUSH
7336: EMPTY
7337: LIST
7338: DIFF
7339: ST_TO_ADDR
// ComExitBuilding ( arSoldiers ) ;
7340: LD_VAR 0 5
7344: PPUSH
7345: CALL_OW 122
// wait ( 0 0$1 ) ;
7349: LD_INT 35
7351: PPUSH
7352: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 77 , 10 ) ;
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 77
7363: PPUSH
7364: LD_INT 10
7366: PPUSH
7367: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7371: LD_VAR 0 5
7375: PPUSH
7376: LD_INT 82
7378: PPUSH
7379: LD_INT 5
7381: PPUSH
7382: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7386: LD_VAR 0 5
7390: PPUSH
7391: LD_INT 95
7393: PPUSH
7394: LD_INT 12
7396: PPUSH
7397: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7401: LD_VAR 0 5
7405: PPUSH
7406: LD_INT 102
7408: PPUSH
7409: LD_INT 11
7411: PPUSH
7412: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7416: LD_VAR 0 5
7420: PPUSH
7421: LD_INT 116
7423: PPUSH
7424: LD_INT 15
7426: PPUSH
7427: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7431: LD_VAR 0 5
7435: PPUSH
7436: LD_INT 140
7438: PPUSH
7439: LD_INT 25
7441: PPUSH
7442: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7446: LD_VAR 0 5
7450: PPUSH
7451: LD_INT 160
7453: PPUSH
7454: LD_INT 56
7456: PPUSH
7457: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7461: LD_VAR 0 5
7465: PPUSH
7466: LD_INT 189
7468: PPUSH
7469: LD_INT 79
7471: PPUSH
7472: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 25
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 4
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 16
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: PPUSH
7556: CALL_OW 69
7560: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7561: LD_ADDR_VAR 0 6
7565: PUSH
7566: LD_VAR 0 6
7570: PUSH
7571: LD_EXP 26
7575: ADD
7576: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7577: LD_INT 700
7579: PPUSH
7580: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 122
// wait ( 0 0$1 ) ;
7593: LD_INT 35
7595: PPUSH
7596: CALL_OW 67
// AddComMoveXY ( arCivilian , 77 , 10 ) ;
7600: LD_VAR 0 6
7604: PPUSH
7605: LD_INT 77
7607: PPUSH
7608: LD_INT 10
7610: PPUSH
7611: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7615: LD_VAR 0 6
7619: PPUSH
7620: LD_INT 82
7622: PPUSH
7623: LD_INT 5
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7630: LD_VAR 0 6
7634: PPUSH
7635: LD_INT 95
7637: PPUSH
7638: LD_INT 12
7640: PPUSH
7641: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7645: LD_VAR 0 6
7649: PPUSH
7650: LD_INT 102
7652: PPUSH
7653: LD_INT 11
7655: PPUSH
7656: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7660: LD_VAR 0 6
7664: PPUSH
7665: LD_INT 116
7667: PPUSH
7668: LD_INT 15
7670: PPUSH
7671: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7675: LD_VAR 0 6
7679: PPUSH
7680: LD_INT 140
7682: PPUSH
7683: LD_INT 25
7685: PPUSH
7686: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7690: LD_VAR 0 6
7694: PPUSH
7695: LD_INT 160
7697: PPUSH
7698: LD_INT 56
7700: PPUSH
7701: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_INT 189
7712: PPUSH
7713: LD_INT 79
7715: PPUSH
7716: CALL_OW 171
// arabianAttackersAI = 1 ;
7720: LD_ADDR_EXP 46
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7728: LD_INT 350
7730: PPUSH
7731: CALL_OW 67
// if IsOk ( Gary ) then
7735: LD_EXP 10
7739: PPUSH
7740: CALL_OW 302
7744: IFFALSE 7758
// Say ( Gary , D8a-Gary-1 ) ;
7746: LD_EXP 10
7750: PPUSH
7751: LD_STRING D8a-Gary-1
7753: PPUSH
7754: CALL_OW 88
// wait ( 0 0$5 ) ;
7758: LD_INT 175
7760: PPUSH
7761: CALL_OW 67
// if IsOK ( Khatam ) then
7765: LD_EXP 14
7769: PPUSH
7770: CALL_OW 302
7774: IFFALSE 8310
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: LD_INT 22
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 2
7793: PUSH
7794: LD_INT 25
7796: PUSH
7797: LD_INT 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 25
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 25
7826: PUSH
7827: LD_INT 4
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 25
7836: PUSH
7837: LD_INT 5
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 25
7846: PUSH
7847: LD_INT 8
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PPUSH
7867: CALL_OW 69
7871: PUSH
7872: LD_EXP 1
7876: PUSH
7877: LD_EXP 2
7881: PUSH
7882: LD_EXP 3
7886: PUSH
7887: LD_EXP 4
7891: PUSH
7892: LD_EXP 5
7896: PUSH
7897: LD_EXP 6
7901: PUSH
7902: LD_EXP 7
7906: PUSH
7907: LD_EXP 8
7911: PUSH
7912: LD_EXP 9
7916: PUSH
7917: LD_EXP 10
7921: PUSH
7922: LD_EXP 11
7926: PUSH
7927: LD_EXP 12
7931: PUSH
7932: LD_EXP 13
7936: PUSH
7937: LD_EXP 14
7941: PUSH
7942: LD_EXP 15
7946: PUSH
7947: LD_EXP 16
7951: PUSH
7952: LD_EXP 17
7956: PUSH
7957: LD_EXP 19
7961: PUSH
7962: LD_EXP 24
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: DIFF
7988: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7989: LD_EXP 14
7993: PPUSH
7994: LD_INT 8
7996: PPUSH
7997: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8001: LD_EXP 14
8005: PPUSH
8006: CALL_OW 122
// wait ( 0 0$1 ) ;
8010: LD_INT 35
8012: PPUSH
8013: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8017: LD_EXP 14
8021: PPUSH
8022: CALL_OW 121
// wait ( 0 0$1 ) ;
8026: LD_INT 35
8028: PPUSH
8029: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8033: LD_EXP 14
8037: PPUSH
8038: LD_INT 7
8040: PPUSH
8041: CALL_OW 113
// if not tmp then
8045: LD_VAR 0 3
8049: NOT
8050: IFFALSE 8054
// exit ;
8052: GO 8310
// DialogueOn ;
8054: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8058: LD_VAR 0 3
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: CALL_OW 258
8071: PUSH
8072: LD_INT 1
8074: EQUAL
8075: IFFALSE 8095
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PPUSH
8086: LD_STRING D8b-Sol1-1
8088: PPUSH
8089: CALL_OW 88
8093: GO 8111
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: LD_STRING D8b-FSol1-1
8106: PPUSH
8107: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8111: LD_EXP 14
8115: PPUSH
8116: LD_STRING D8b-Khat-1
8118: PPUSH
8119: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: CALL_OW 258
8136: PUSH
8137: LD_INT 1
8139: EQUAL
8140: IFFALSE 8160
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8142: LD_VAR 0 3
8146: PUSH
8147: LD_INT 1
8149: ARRAY
8150: PPUSH
8151: LD_STRING D8b-Sol1-2
8153: PPUSH
8154: CALL_OW 88
8158: GO 8176
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8160: LD_VAR 0 3
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: LD_STRING D8b-FSol1-2
8171: PPUSH
8172: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8176: LD_EXP 14
8180: PPUSH
8181: LD_STRING D8b-Khat-2
8183: PPUSH
8184: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: CALL_OW 258
8201: PUSH
8202: LD_INT 1
8204: EQUAL
8205: IFFALSE 8225
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 1
8214: ARRAY
8215: PPUSH
8216: LD_STRING D8b-Sol1-3
8218: PPUSH
8219: CALL_OW 88
8223: GO 8241
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8225: LD_VAR 0 3
8229: PUSH
8230: LD_INT 1
8232: ARRAY
8233: PPUSH
8234: LD_STRING D8b-FSol1-3
8236: PPUSH
8237: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8241: LD_EXP 14
8245: PPUSH
8246: LD_STRING D8b-Khat-3
8248: PPUSH
8249: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: CALL_OW 258
8266: PUSH
8267: LD_INT 1
8269: EQUAL
8270: IFFALSE 8290
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8272: LD_VAR 0 3
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: PPUSH
8281: LD_STRING D8b-Sol1-4
8283: PPUSH
8284: CALL_OW 88
8288: GO 8306
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8290: LD_VAR 0 3
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: PPUSH
8299: LD_STRING D8b-FSol1-4
8301: PPUSH
8302: CALL_OW 88
// DialogueOff ;
8306: CALL_OW 7
// end ; end ;
8310: LD_VAR 0 1
8314: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8315: LD_INT 7
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 70
8332: PUSH
8333: LD_INT 0
8335: GREATER
8336: PUSH
8337: LD_EXP 14
8341: PPUSH
8342: LD_INT 7
8344: PPUSH
8345: CALL_OW 308
8349: OR
8350: IFFALSE 8482
8352: GO 8354
8354: DISABLE
8355: LD_INT 0
8357: PPUSH
// begin enable ;
8358: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8359: LD_ADDR_VAR 0 1
8363: PUSH
8364: LD_INT 7
8366: PPUSH
8367: LD_INT 22
8369: PUSH
8370: LD_INT 2
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 70
8381: PUSH
8382: FOR_IN
8383: IFFALSE 8449
// begin if GetClass ( i ) = 4 then
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 257
8394: PUSH
8395: LD_INT 4
8397: EQUAL
8398: IFFALSE 8410
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8400: LD_INT 1
8402: PPUSH
8403: LD_STRING 10_ScientistsEscape_1
8405: PPUSH
8406: CALL_OW 39
// if i = Dietrich then
8410: LD_VAR 0 1
8414: PUSH
8415: LD_EXP 26
8419: EQUAL
8420: IFFALSE 8430
// GensherStatus = 1 ;
8422: LD_ADDR_EXP 51
8426: PUSH
8427: LD_INT 1
8429: ST_TO_ADDR
// arabianEscape = 1 ;
8430: LD_ADDR_EXP 47
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// RemoveUnit ( i ) ;
8438: LD_VAR 0 1
8442: PPUSH
8443: CALL_OW 64
// end ;
8447: GO 8382
8449: POP
8450: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8451: LD_EXP 14
8455: PPUSH
8456: LD_INT 7
8458: PPUSH
8459: CALL_OW 308
8463: IFFALSE 8482
// begin KhatamStatus = 1 ;
8465: LD_ADDR_EXP 52
8469: PUSH
8470: LD_INT 1
8472: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8473: LD_EXP 14
8477: PPUSH
8478: CALL_OW 64
// end ; end ;
8482: PPOPN 1
8484: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8485: LD_EXP 14
8489: PPUSH
8490: CALL_OW 301
8494: IFFALSE 8507
8496: GO 8498
8498: DISABLE
// KhatamStatus = 0 ;
8499: LD_ADDR_EXP 52
8503: PUSH
8504: LD_INT 0
8506: ST_TO_ADDR
8507: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8508: LD_INT 22
8510: PUSH
8511: LD_INT 2
8513: PUSH
8514: EMPTY
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 21
8520: PUSH
8521: LD_INT 1
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PPUSH
8532: CALL_OW 69
8536: PUSH
8537: LD_INT 0
8539: EQUAL
8540: PUSH
8541: LD_INT 22
8543: PUSH
8544: LD_INT 4
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 21
8553: PUSH
8554: LD_INT 1
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: EMPTY
8562: LIST
8563: LIST
8564: PPUSH
8565: CALL_OW 69
8569: PUSH
8570: LD_INT 0
8572: EQUAL
8573: AND
8574: IFFALSE 8587
8576: GO 8578
8578: DISABLE
// arabianDefeated = 1 ;
8579: LD_ADDR_EXP 48
8583: PUSH
8584: LD_INT 1
8586: ST_TO_ADDR
8587: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8588: LD_INT 54
8590: PPUSH
8591: LD_INT 1
8593: PPUSH
8594: CALL_OW 321
8598: PUSH
8599: LD_INT 2
8601: EQUAL
8602: PUSH
8603: LD_INT 55
8605: PPUSH
8606: LD_INT 1
8608: PPUSH
8609: CALL_OW 321
8613: PUSH
8614: LD_INT 2
8616: EQUAL
8617: AND
8618: PUSH
8619: LD_INT 21
8621: PPUSH
8622: LD_INT 1
8624: PPUSH
8625: CALL_OW 321
8629: PUSH
8630: LD_INT 2
8632: EQUAL
8633: AND
8634: PUSH
8635: LD_INT 22
8637: PPUSH
8638: LD_INT 1
8640: PPUSH
8641: CALL_OW 321
8645: PUSH
8646: LD_INT 2
8648: EQUAL
8649: AND
8650: PUSH
8651: LD_INT 12
8653: PPUSH
8654: LD_INT 1
8656: PPUSH
8657: CALL_OW 321
8661: PUSH
8662: LD_INT 2
8664: EQUAL
8665: AND
8666: PUSH
8667: LD_INT 32
8669: PPUSH
8670: LD_INT 1
8672: PPUSH
8673: CALL_OW 321
8677: PUSH
8678: LD_INT 2
8680: EQUAL
8681: AND
8682: PUSH
8683: LD_EXP 59
8687: PUSH
8688: LD_INT 0
8690: EQUAL
8691: AND
8692: PUSH
8693: LD_EXP 49
8697: PUSH
8698: LD_INT 0
8700: EQUAL
8701: AND
8702: PUSH
8703: LD_OWVAR 1
8707: PUSH
8708: LD_INT 31500
8710: GREATEREQUAL
8711: AND
8712: IFFALSE 8729
8714: GO 8716
8716: DISABLE
// begin arabianTrait = 1 ;
8717: LD_ADDR_EXP 49
8721: PUSH
8722: LD_INT 1
8724: ST_TO_ADDR
// PrepareArabianTrait ;
8725: CALL 6846 0 0
// end ;
8729: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8730: LD_EXP 29
8734: PUSH
8735: LD_STRING 02_mikhailStatus_1
8737: PPUSH
8738: LD_INT 0
8740: PPUSH
8741: CALL_OW 30
8745: PUSH
8746: LD_INT 1
8748: EQUAL
8749: AND
8750: PUSH
8751: LD_INT 22
8753: PUSH
8754: LD_INT 5
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PPUSH
8761: CALL_OW 69
8765: PUSH
8766: LD_INT 0
8768: EQUAL
8769: AND
8770: PUSH
8771: LD_INT 22
8773: PUSH
8774: LD_INT 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PPUSH
8781: CALL_OW 69
8785: PUSH
8786: LD_INT 0
8788: EQUAL
8789: PUSH
8790: LD_EXP 49
8794: PUSH
8795: LD_INT 0
8797: EQUAL
8798: OR
8799: AND
8800: IFFALSE 8809
8802: GO 8804
8804: DISABLE
// PrepareCornell ;
8805: CALL 2544 0 0
8809: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8810: LD_INT 22
8812: PUSH
8813: LD_INT 1
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 69
8824: PPUSH
8825: LD_EXP 19
8829: PPUSH
8830: CALL_OW 74
8834: PPUSH
8835: LD_EXP 19
8839: PPUSH
8840: CALL_OW 296
8844: PUSH
8845: LD_INT 9
8847: LESS
8848: IFFALSE 9069
8850: GO 8852
8852: DISABLE
// begin InGameOn ;
8853: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8857: LD_EXP 19
8861: PPUSH
8862: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8866: LD_EXP 19
8870: PPUSH
8871: LD_STRING D7-Corn-1
8873: PPUSH
8874: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8878: LD_INT 22
8880: PUSH
8881: LD_INT 1
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 25
8893: PUSH
8894: LD_INT 1
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: LD_INT 25
8903: PUSH
8904: LD_INT 2
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: LD_INT 25
8913: PUSH
8914: LD_INT 3
8916: PUSH
8917: EMPTY
8918: LIST
8919: LIST
8920: PUSH
8921: LD_INT 25
8923: PUSH
8924: LD_INT 4
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PUSH
8931: LD_INT 25
8933: PUSH
8934: LD_INT 5
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: EMPTY
8942: LIST
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PPUSH
8953: CALL_OW 69
8957: PPUSH
8958: LD_STRING D7-Sol1-1
8960: PPUSH
8961: LD_STRING D7-FSol1-1
8963: PPUSH
8964: CALL 9616 0 3
// CenterNowOnUnits ( Cornell ) ;
8968: LD_EXP 19
8972: PPUSH
8973: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8977: LD_EXP 19
8981: PPUSH
8982: LD_STRING D7-Corn-2
8984: PPUSH
8985: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8989: LD_EXP 1
8993: PPUSH
8994: LD_STRING D7-JMM-2
8996: PPUSH
8997: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9001: LD_EXP 19
9005: PPUSH
9006: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9010: LD_EXP 19
9014: PPUSH
9015: LD_STRING D7-Corn-3
9017: PPUSH
9018: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9022: LD_EXP 19
9026: PPUSH
9027: LD_INT 250
9029: PPUSH
9030: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9034: LD_EXP 19
9038: PPUSH
9039: LD_INT 1
9041: PPUSH
9042: CALL_OW 235
// wait ( 0 0$1 ) ;
9046: LD_INT 35
9048: PPUSH
9049: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9053: LD_EXP 1
9057: PPUSH
9058: LD_STRING D7-JMM-3
9060: PPUSH
9061: CALL_OW 88
// InGameOff ;
9065: CALL_OW 9
// end ;
9069: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9070: LD_EXP 19
9074: PPUSH
9075: CALL_OW 255
9079: PUSH
9080: LD_INT 1
9082: EQUAL
9083: PUSH
9084: LD_EXP 19
9088: PPUSH
9089: CALL_OW 256
9093: PUSH
9094: LD_INT 251
9096: GREATER
9097: AND
9098: IFFALSE 9291
9100: GO 9102
9102: DISABLE
// begin DialogueOn ;
9103: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9107: LD_EXP 1
9111: PPUSH
9112: LD_STRING D7a-JMM-1
9114: PPUSH
9115: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9119: LD_EXP 19
9123: PPUSH
9124: LD_STRING D7a-Corn-1
9126: PPUSH
9127: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9131: LD_EXP 1
9135: PPUSH
9136: LD_STRING D7a-JMM-2
9138: PPUSH
9139: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9143: LD_EXP 19
9147: PPUSH
9148: LD_STRING D7a-Corn-2
9150: PPUSH
9151: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9155: LD_EXP 1
9159: PPUSH
9160: LD_STRING D7a-JMM-3
9162: PPUSH
9163: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9167: LD_EXP 19
9171: PPUSH
9172: LD_STRING D7a-Corn-3
9174: PPUSH
9175: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9179: LD_EXP 1
9183: PPUSH
9184: LD_STRING D7a-JMM-4
9186: PPUSH
9187: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9191: LD_EXP 19
9195: PPUSH
9196: LD_STRING D7a-Corn-4
9198: PPUSH
9199: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9203: LD_EXP 1
9207: PPUSH
9208: LD_STRING D7a-JMM-5
9210: PPUSH
9211: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9215: LD_EXP 19
9219: PPUSH
9220: LD_STRING D7a-Corn-5
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9227: LD_EXP 1
9231: PPUSH
9232: LD_STRING D7a-JMM-6
9234: PPUSH
9235: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9239: LD_EXP 19
9243: PPUSH
9244: LD_STRING D7a-Corn-6
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9251: LD_EXP 1
9255: PPUSH
9256: LD_STRING D7a-JMM-7
9258: PPUSH
9259: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9263: LD_EXP 19
9267: PPUSH
9268: LD_STRING D7a-Corn-7
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9275: LD_EXP 1
9279: PPUSH
9280: LD_STRING D7a-JMM-8
9282: PPUSH
9283: CALL_OW 88
// DialogueOff ;
9287: CALL_OW 7
// end ;
9291: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9292: LD_EXP 58
9296: PUSH
9297: LD_EXP 1
9301: PPUSH
9302: CALL_OW 302
9306: PUSH
9307: LD_EXP 5
9311: PPUSH
9312: CALL_OW 302
9316: OR
9317: AND
9318: IFFALSE 9408
9320: GO 9322
9322: DISABLE
// begin Wait ( 0 0$2 ) ;
9323: LD_INT 70
9325: PPUSH
9326: CALL_OW 67
// DialogueOn ;
9330: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9334: LD_EXP 58
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_EXP 58
9347: PUSH
9348: LD_INT 2
9350: ARRAY
9351: PPUSH
9352: CALL_OW 86
// if IsOk ( Cyrus ) then
9356: LD_EXP 5
9360: PPUSH
9361: CALL_OW 302
9365: IFFALSE 9381
// Say ( Cyrus , D10-Cyrus-1 ) else
9367: LD_EXP 5
9371: PPUSH
9372: LD_STRING D10-Cyrus-1
9374: PPUSH
9375: CALL_OW 88
9379: GO 9404
// if IsOk ( JMM ) then
9381: LD_EXP 1
9385: PPUSH
9386: CALL_OW 302
9390: IFFALSE 9404
// Say ( JMM , D10-JMM-1 ) ;
9392: LD_EXP 1
9396: PPUSH
9397: LD_STRING D10-JMM-1
9399: PPUSH
9400: CALL_OW 88
// DialogueOff ;
9404: CALL_OW 7
// end ;
9408: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9409: LD_INT 12
9411: PPUSH
9412: LD_INT 1
9414: PPUSH
9415: CALL_OW 321
9419: PUSH
9420: LD_INT 2
9422: EQUAL
9423: IFFALSE 9435
9425: GO 9427
9427: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9428: LD_STRING M2b
9430: PPUSH
9431: CALL_OW 337
9435: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9436: LD_INT 32
9438: PPUSH
9439: LD_INT 1
9441: PPUSH
9442: CALL_OW 321
9446: PUSH
9447: LD_INT 2
9449: EQUAL
9450: IFFALSE 9462
9452: GO 9454
9454: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9455: LD_STRING M2c
9457: PPUSH
9458: CALL_OW 337
9462: END
// every 0 0$1 trigger arabianDefeated = 1 do
9463: LD_EXP 48
9467: PUSH
9468: LD_INT 1
9470: EQUAL
9471: IFFALSE 9483
9473: GO 9475
9475: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9476: LD_STRING M4a
9478: PPUSH
9479: CALL_OW 337
9483: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9484: LD_INT 54
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 321
9494: PUSH
9495: LD_INT 2
9497: EQUAL
9498: PUSH
9499: LD_INT 55
9501: PPUSH
9502: LD_INT 1
9504: PPUSH
9505: CALL_OW 321
9509: PUSH
9510: LD_INT 2
9512: EQUAL
9513: AND
9514: PUSH
9515: LD_INT 21
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: CALL_OW 321
9525: PUSH
9526: LD_INT 2
9528: EQUAL
9529: AND
9530: PUSH
9531: LD_INT 22
9533: PPUSH
9534: LD_INT 1
9536: PPUSH
9537: CALL_OW 321
9541: PUSH
9542: LD_INT 2
9544: EQUAL
9545: AND
9546: IFFALSE 9558
9548: GO 9550
9550: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9551: LD_STRING M2a
9553: PPUSH
9554: CALL_OW 337
9558: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9559: LD_INT 0
9561: PPUSH
9562: PPUSH
// if exist_mode then
9563: LD_VAR 0 2
9567: IFFALSE 9586
// unit := CreateCharacter ( ident ) else
9569: LD_ADDR_VAR 0 4
9573: PUSH
9574: LD_VAR 0 1
9578: PPUSH
9579: CALL_OW 34
9583: ST_TO_ADDR
9584: GO 9601
// unit := NewCharacter ( ident ) ;
9586: LD_ADDR_VAR 0 4
9590: PUSH
9591: LD_VAR 0 1
9595: PPUSH
9596: CALL_OW 25
9600: ST_TO_ADDR
// result := unit ;
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: LD_VAR 0 4
9610: ST_TO_ADDR
// end ;
9611: LD_VAR 0 3
9615: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9616: LD_INT 0
9618: PPUSH
9619: PPUSH
9620: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9621: LD_ADDR_VAR 0 1
9625: PUSH
9626: LD_VAR 0 1
9630: PUSH
9631: LD_EXP 1
9635: PUSH
9636: LD_EXP 2
9640: PUSH
9641: LD_EXP 3
9645: PUSH
9646: LD_EXP 4
9650: PUSH
9651: LD_EXP 5
9655: PUSH
9656: LD_EXP 6
9660: PUSH
9661: LD_EXP 7
9665: PUSH
9666: LD_EXP 8
9670: PUSH
9671: LD_EXP 9
9675: PUSH
9676: LD_EXP 10
9680: PUSH
9681: LD_EXP 11
9685: PUSH
9686: LD_EXP 12
9690: PUSH
9691: LD_EXP 13
9695: PUSH
9696: LD_EXP 14
9700: PUSH
9701: LD_EXP 15
9705: PUSH
9706: LD_EXP 16
9710: PUSH
9711: LD_EXP 17
9715: PUSH
9716: LD_EXP 18
9720: PUSH
9721: LD_EXP 19
9725: PUSH
9726: LD_EXP 24
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: DIFF
9753: ST_TO_ADDR
// if not characters then
9754: LD_VAR 0 1
9758: NOT
9759: IFFALSE 9763
// exit ;
9761: GO 9909
// rnd = rand ( 1 , characters ) ;
9763: LD_ADDR_VAR 0 6
9767: PUSH
9768: LD_INT 1
9770: PPUSH
9771: LD_VAR 0 1
9775: PPUSH
9776: CALL_OW 12
9780: ST_TO_ADDR
// for i = 1 to characters do
9781: LD_ADDR_VAR 0 5
9785: PUSH
9786: DOUBLE
9787: LD_INT 1
9789: DEC
9790: ST_TO_ADDR
9791: LD_VAR 0 1
9795: PUSH
9796: FOR_TO
9797: IFFALSE 9907
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9799: LD_VAR 0 5
9803: PUSH
9804: LD_VAR 0 6
9808: EQUAL
9809: PUSH
9810: LD_VAR 0 1
9814: PUSH
9815: LD_VAR 0 5
9819: ARRAY
9820: PPUSH
9821: CALL_OW 258
9825: PUSH
9826: LD_INT 1
9828: EQUAL
9829: AND
9830: IFFALSE 9852
// Say ( characters [ i ] , dialogMID ) ;
9832: LD_VAR 0 1
9836: PUSH
9837: LD_VAR 0 5
9841: ARRAY
9842: PPUSH
9843: LD_VAR 0 2
9847: PPUSH
9848: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9852: LD_VAR 0 5
9856: PUSH
9857: LD_VAR 0 6
9861: EQUAL
9862: PUSH
9863: LD_VAR 0 1
9867: PUSH
9868: LD_VAR 0 5
9872: ARRAY
9873: PPUSH
9874: CALL_OW 258
9878: PUSH
9879: LD_INT 2
9881: EQUAL
9882: AND
9883: IFFALSE 9905
// Say ( characters [ i ] , dialogFID ) ;
9885: LD_VAR 0 1
9889: PUSH
9890: LD_VAR 0 5
9894: ARRAY
9895: PPUSH
9896: LD_VAR 0 3
9900: PPUSH
9901: CALL_OW 88
// end ;
9905: GO 9796
9907: POP
9908: POP
// end ;
9909: LD_VAR 0 4
9913: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
// for i in charactersList do
9918: LD_ADDR_VAR 0 4
9922: PUSH
9923: LD_VAR 0 1
9927: PUSH
9928: FOR_IN
9929: IFFALSE 9958
// begin if IsOk ( i ) then
9931: LD_VAR 0 4
9935: PPUSH
9936: CALL_OW 302
9940: IFFALSE 9956
// SaveCharacters ( i , ident ) ;
9942: LD_VAR 0 4
9946: PPUSH
9947: LD_VAR 0 2
9951: PPUSH
9952: CALL_OW 38
// end ;
9956: GO 9928
9958: POP
9959: POP
// end ;
9960: LD_VAR 0 3
9964: RET
// export function PrepareDifficulty ; begin
9965: LD_INT 0
9967: PPUSH
// if difficulty = 1 then
9968: LD_OWVAR 67
9972: PUSH
9973: LD_INT 1
9975: EQUAL
9976: IFFALSE 10020
// begin RuSolMinLevel = 4 ;
9978: LD_ADDR_EXP 36
9982: PUSH
9983: LD_INT 4
9985: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9986: LD_ADDR_EXP 37
9990: PUSH
9991: LD_INT 7
9993: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9994: LD_INT 51
9996: PPUSH
9997: LD_INT 6
9999: PPUSH
10000: LD_INT 2
10002: PPUSH
10003: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10007: LD_INT 51
10009: PPUSH
10010: LD_INT 5
10012: PPUSH
10013: LD_INT 2
10015: PPUSH
10016: CALL_OW 322
// end ; if difficulty = 2 then
10020: LD_OWVAR 67
10024: PUSH
10025: LD_INT 2
10027: EQUAL
10028: IFFALSE 10124
// begin RuSolMinLevel = 5 ;
10030: LD_ADDR_EXP 36
10034: PUSH
10035: LD_INT 5
10037: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10038: LD_ADDR_EXP 37
10042: PUSH
10043: LD_INT 7
10045: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10046: LD_INT 51
10048: PPUSH
10049: LD_INT 6
10051: PPUSH
10052: LD_INT 2
10054: PPUSH
10055: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10059: LD_INT 57
10061: PPUSH
10062: LD_INT 6
10064: PPUSH
10065: LD_INT 2
10067: PPUSH
10068: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10072: LD_INT 63
10074: PPUSH
10075: LD_INT 6
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10085: LD_INT 51
10087: PPUSH
10088: LD_INT 5
10090: PPUSH
10091: LD_INT 2
10093: PPUSH
10094: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10098: LD_INT 5
10100: PPUSH
10101: LD_INT 2
10103: PPUSH
10104: LD_INT 2
10106: PPUSH
10107: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10111: LD_INT 5
10113: PPUSH
10114: LD_INT 5
10116: PPUSH
10117: LD_INT 2
10119: PPUSH
10120: CALL_OW 322
// end ; if difficulty = 3 then
10124: LD_OWVAR 67
10128: PUSH
10129: LD_INT 3
10131: EQUAL
10132: IFFALSE 10280
// begin RuSolMinLevel = 6 ;
10134: LD_ADDR_EXP 36
10138: PUSH
10139: LD_INT 6
10141: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10142: LD_ADDR_EXP 37
10146: PUSH
10147: LD_INT 8
10149: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10150: LD_INT 51
10152: PPUSH
10153: LD_INT 6
10155: PPUSH
10156: LD_INT 2
10158: PPUSH
10159: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10163: LD_INT 57
10165: PPUSH
10166: LD_INT 6
10168: PPUSH
10169: LD_INT 2
10171: PPUSH
10172: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10176: LD_INT 52
10178: PPUSH
10179: LD_INT 6
10181: PPUSH
10182: LD_INT 2
10184: PPUSH
10185: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10189: LD_INT 58
10191: PPUSH
10192: LD_INT 6
10194: PPUSH
10195: LD_INT 2
10197: PPUSH
10198: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10202: LD_INT 63
10204: PPUSH
10205: LD_INT 6
10207: PPUSH
10208: LD_INT 2
10210: PPUSH
10211: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10215: LD_INT 64
10217: PPUSH
10218: LD_INT 6
10220: PPUSH
10221: LD_INT 2
10223: PPUSH
10224: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10228: LD_INT 51
10230: PPUSH
10231: LD_INT 5
10233: PPUSH
10234: LD_INT 2
10236: PPUSH
10237: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10241: LD_INT 52
10243: PPUSH
10244: LD_INT 5
10246: PPUSH
10247: LD_INT 2
10249: PPUSH
10250: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10254: LD_INT 66
10256: PPUSH
10257: LD_INT 2
10259: PPUSH
10260: LD_INT 2
10262: PPUSH
10263: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10267: LD_INT 66
10269: PPUSH
10270: LD_INT 5
10272: PPUSH
10273: LD_INT 2
10275: PPUSH
10276: CALL_OW 322
// end ; end ;
10280: LD_VAR 0 1
10284: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10285: LD_INT 0
10287: PPUSH
10288: PPUSH
10289: PPUSH
10290: PPUSH
10291: PPUSH
// case position of 1 :
10292: LD_VAR 0 1
10296: PUSH
10297: LD_INT 1
10299: DOUBLE
10300: EQUAL
10301: IFTRUE 10305
10303: GO 10316
10305: POP
// area := westConv ; 2 :
10306: LD_ADDR_VAR 0 6
10310: PUSH
10311: LD_INT 20
10313: ST_TO_ADDR
10314: GO 10355
10316: LD_INT 2
10318: DOUBLE
10319: EQUAL
10320: IFTRUE 10324
10322: GO 10335
10324: POP
// area := midConv ; 3 :
10325: LD_ADDR_VAR 0 6
10329: PUSH
10330: LD_INT 21
10332: ST_TO_ADDR
10333: GO 10355
10335: LD_INT 3
10337: DOUBLE
10338: EQUAL
10339: IFTRUE 10343
10341: GO 10354
10343: POP
// area := eastConv ; end ;
10344: LD_ADDR_VAR 0 6
10348: PUSH
10349: LD_INT 22
10351: ST_TO_ADDR
10352: GO 10355
10354: POP
// area := AreaToList ( area , 0 ) ;
10355: LD_ADDR_VAR 0 6
10359: PUSH
10360: LD_VAR 0 6
10364: PPUSH
10365: LD_INT 0
10367: PPUSH
10368: CALL_OW 517
10372: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10373: LD_ADDR_VAR 0 3
10377: PUSH
10378: DOUBLE
10379: LD_INT 1
10381: DEC
10382: ST_TO_ADDR
10383: LD_VAR 0 6
10387: PUSH
10388: LD_INT 1
10390: ARRAY
10391: PUSH
10392: FOR_TO
10393: IFFALSE 10474
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10395: LD_VAR 0 6
10399: PUSH
10400: LD_INT 1
10402: ARRAY
10403: PUSH
10404: LD_VAR 0 3
10408: ARRAY
10409: PPUSH
10410: LD_VAR 0 6
10414: PUSH
10415: LD_INT 2
10417: ARRAY
10418: PUSH
10419: LD_VAR 0 3
10423: ARRAY
10424: PPUSH
10425: LD_INT 1
10427: PPUSH
10428: LD_INT 1
10430: PPUSH
10431: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10435: LD_VAR 0 6
10439: PUSH
10440: LD_INT 1
10442: ARRAY
10443: PUSH
10444: LD_VAR 0 3
10448: ARRAY
10449: PPUSH
10450: LD_VAR 0 6
10454: PUSH
10455: LD_INT 2
10457: ARRAY
10458: PUSH
10459: LD_VAR 0 3
10463: ARRAY
10464: PPUSH
10465: LD_INT 1
10467: PPUSH
10468: CALL_OW 331
// end ;
10472: GO 10392
10474: POP
10475: POP
// ruPossition = position ;
10476: LD_ADDR_EXP 41
10480: PUSH
10481: LD_VAR 0 1
10485: ST_TO_ADDR
// if position = 1 then
10486: LD_VAR 0 1
10490: PUSH
10491: LD_INT 1
10493: EQUAL
10494: IFFALSE 11242
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10496: LD_ADDR_VAR 0 4
10500: PUSH
10501: LD_INT 22
10503: PUSH
10504: LD_INT 3
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 2
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PPUSH
10525: CALL_OW 69
10529: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10530: LD_ADDR_VAR 0 5
10534: PUSH
10535: LD_INT 0
10537: PUSH
10538: LD_INT 49
10540: PUSH
10541: LD_INT 74
10543: PUSH
10544: LD_INT 3
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 4
10555: PUSH
10556: LD_INT 73
10558: PUSH
10559: LD_INT 88
10561: PUSH
10562: LD_INT 5
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 4
10573: PUSH
10574: LD_INT 56
10576: PUSH
10577: LD_INT 62
10579: PUSH
10580: LD_INT 3
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 29
10591: PUSH
10592: LD_INT 43
10594: PUSH
10595: LD_INT 68
10597: PUSH
10598: LD_INT 2
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: LIST
10606: PUSH
10607: LD_INT 30
10609: PUSH
10610: LD_INT 43
10612: PUSH
10613: LD_INT 79
10615: PUSH
10616: LD_INT 5
10618: PUSH
10619: EMPTY
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 28
10627: PUSH
10628: LD_INT 60
10630: PUSH
10631: LD_INT 75
10633: PUSH
10634: LD_INT 1
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: PUSH
10643: LD_INT 2
10645: PUSH
10646: LD_INT 50
10648: PUSH
10649: LD_INT 87
10651: PUSH
10652: LD_INT 1
10654: PUSH
10655: EMPTY
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 28
10663: PUSH
10664: LD_INT 45
10666: PUSH
10667: LD_INT 67
10669: PUSH
10670: LD_INT 2
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 17
10681: PUSH
10682: LD_INT 47
10684: PUSH
10685: LD_INT 84
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: PUSH
10697: LD_INT 18
10699: PUSH
10700: LD_INT 46
10702: PUSH
10703: LD_INT 87
10705: PUSH
10706: LD_INT 1
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: PUSH
10715: LD_INT 28
10717: PUSH
10718: LD_INT 41
10720: PUSH
10721: LD_INT 64
10723: PUSH
10724: LD_INT 5
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 32
10735: PUSH
10736: LD_INT 75
10738: PUSH
10739: LD_INT 76
10741: PUSH
10742: LD_INT 5
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 32
10753: PUSH
10754: LD_INT 77
10756: PUSH
10757: LD_INT 75
10759: PUSH
10760: LD_INT 5
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 32
10771: PUSH
10772: LD_INT 69
10774: PUSH
10775: LD_INT 68
10777: PUSH
10778: LD_INT 3
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: PUSH
10787: LD_INT 32
10789: PUSH
10790: LD_INT 59
10792: PUSH
10793: LD_INT 96
10795: PUSH
10796: LD_INT 5
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: PUSH
10805: LD_INT 32
10807: PUSH
10808: LD_INT 56
10810: PUSH
10811: LD_INT 96
10813: PUSH
10814: LD_INT 0
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: LIST
10821: LIST
10822: PUSH
10823: LD_INT 32
10825: PUSH
10826: LD_INT 51
10828: PUSH
10829: LD_INT 61
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: LD_INT 32
10843: PUSH
10844: LD_INT 42
10846: PUSH
10847: LD_INT 60
10849: PUSH
10850: LD_INT 3
10852: PUSH
10853: EMPTY
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 32
10861: PUSH
10862: LD_INT 36
10864: PUSH
10865: LD_INT 58
10867: PUSH
10868: LD_INT 3
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 32
10879: PUSH
10880: LD_INT 39
10882: PUSH
10883: LD_INT 59
10885: PUSH
10886: LD_INT 3
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: PUSH
10895: LD_INT 32
10897: PUSH
10898: LD_INT 61
10900: PUSH
10901: LD_INT 64
10903: PUSH
10904: LD_INT 3
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: PUSH
10913: LD_INT 33
10915: PUSH
10916: LD_INT 63
10918: PUSH
10919: LD_INT 90
10921: PUSH
10922: LD_INT 5
10924: PUSH
10925: EMPTY
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: PUSH
10931: LD_INT 33
10933: PUSH
10934: LD_INT 64
10936: PUSH
10937: LD_INT 88
10939: PUSH
10940: LD_INT 5
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: PUSH
10949: LD_INT 33
10951: PUSH
10952: LD_INT 72
10954: PUSH
10955: LD_INT 82
10957: PUSH
10958: LD_INT 5
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: PUSH
10967: LD_INT 6
10969: PUSH
10970: LD_INT 42
10972: PUSH
10973: LD_INT 74
10975: PUSH
10976: LD_INT 1
10978: PUSH
10979: EMPTY
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: LD_INT 6
10987: PUSH
10988: LD_INT 56
10990: PUSH
10991: LD_INT 77
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 54
11008: PUSH
11009: LD_INT 91
11011: PUSH
11012: LD_INT 5
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: PUSH
11021: LD_INT 16
11023: PUSH
11024: LD_INT 50
11026: PUSH
11027: LD_INT 83
11029: PUSH
11030: LD_INT 3
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: PUSH
11039: LD_INT 24
11041: PUSH
11042: LD_INT 50
11044: PUSH
11045: LD_INT 90
11047: PUSH
11048: LD_INT 0
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11088: LD_ADDR_VAR 0 3
11092: PUSH
11093: LD_INT 22
11095: PUSH
11096: LD_INT 3
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: PUSH
11103: LD_INT 3
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PPUSH
11124: CALL_OW 69
11128: PUSH
11129: FOR_IN
11130: IFFALSE 11149
// AddComAgressiveMove ( i , 53 , 82 ) ;
11132: LD_VAR 0 3
11136: PPUSH
11137: LD_INT 53
11139: PPUSH
11140: LD_INT 82
11142: PPUSH
11143: CALL_OW 174
11147: GO 11129
11149: POP
11150: POP
// for i := 1 to buildingsTab do
11151: LD_ADDR_VAR 0 3
11155: PUSH
11156: DOUBLE
11157: LD_INT 1
11159: DEC
11160: ST_TO_ADDR
11161: LD_VAR 0 5
11165: PUSH
11166: FOR_TO
11167: IFFALSE 11240
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11169: LD_VAR 0 4
11173: PPUSH
11174: LD_VAR 0 5
11178: PUSH
11179: LD_VAR 0 3
11183: ARRAY
11184: PUSH
11185: LD_INT 1
11187: ARRAY
11188: PPUSH
11189: LD_VAR 0 5
11193: PUSH
11194: LD_VAR 0 3
11198: ARRAY
11199: PUSH
11200: LD_INT 2
11202: ARRAY
11203: PPUSH
11204: LD_VAR 0 5
11208: PUSH
11209: LD_VAR 0 3
11213: ARRAY
11214: PUSH
11215: LD_INT 3
11217: ARRAY
11218: PPUSH
11219: LD_VAR 0 5
11223: PUSH
11224: LD_VAR 0 3
11228: ARRAY
11229: PUSH
11230: LD_INT 4
11232: ARRAY
11233: PPUSH
11234: CALL_OW 205
11238: GO 11166
11240: POP
11241: POP
// end ; if position = 2 then
11242: LD_VAR 0 1
11246: PUSH
11247: LD_INT 2
11249: EQUAL
11250: IFFALSE 11865
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11252: LD_ADDR_VAR 0 4
11256: PUSH
11257: LD_INT 22
11259: PUSH
11260: LD_INT 3
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 25
11269: PUSH
11270: LD_INT 2
11272: PUSH
11273: EMPTY
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PPUSH
11281: CALL_OW 69
11285: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11286: LD_ADDR_VAR 0 5
11290: PUSH
11291: LD_INT 0
11293: PUSH
11294: LD_INT 104
11296: PUSH
11297: LD_INT 110
11299: PUSH
11300: LD_INT 5
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: PUSH
11309: LD_INT 4
11311: PUSH
11312: LD_INT 98
11314: PUSH
11315: LD_INT 90
11317: PUSH
11318: LD_INT 3
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 29
11329: PUSH
11330: LD_INT 103
11332: PUSH
11333: LD_INT 114
11335: PUSH
11336: LD_INT 2
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 30
11347: PUSH
11348: LD_INT 99
11350: PUSH
11351: LD_INT 114
11353: PUSH
11354: LD_INT 3
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 28
11365: PUSH
11366: LD_INT 100
11368: PUSH
11369: LD_INT 112
11371: PUSH
11372: LD_INT 1
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: LD_INT 92
11386: PUSH
11387: LD_INT 101
11389: PUSH
11390: LD_INT 0
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 28
11401: PUSH
11402: LD_INT 97
11404: PUSH
11405: LD_INT 116
11407: PUSH
11408: LD_INT 5
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 17
11419: PUSH
11420: LD_INT 96
11422: PUSH
11423: LD_INT 101
11425: PUSH
11426: LD_INT 4
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 18
11437: PUSH
11438: LD_INT 88
11440: PUSH
11441: LD_INT 97
11443: PUSH
11444: LD_INT 2
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 106
11458: PUSH
11459: LD_INT 92
11461: PUSH
11462: LD_INT 2
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 32
11473: PUSH
11474: LD_INT 88
11476: PUSH
11477: LD_INT 89
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 32
11491: PUSH
11492: LD_INT 86
11494: PUSH
11495: LD_INT 90
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 32
11509: PUSH
11510: LD_INT 85
11512: PUSH
11513: LD_INT 99
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 32
11527: PUSH
11528: LD_INT 85
11530: PUSH
11531: LD_INT 107
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 33
11545: PUSH
11546: LD_INT 105
11548: PUSH
11549: LD_INT 99
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 102
11566: PUSH
11567: LD_INT 92
11569: PUSH
11570: LD_INT 3
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 33
11581: PUSH
11582: LD_INT 105
11584: PUSH
11585: LD_INT 92
11587: PUSH
11588: LD_INT 2
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 6
11599: PUSH
11600: LD_INT 92
11602: PUSH
11603: LD_INT 110
11605: PUSH
11606: LD_INT 0
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 6
11617: PUSH
11618: LD_INT 103
11620: PUSH
11621: LD_INT 103
11623: PUSH
11624: LD_INT 5
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 21
11635: PUSH
11636: LD_INT 89
11638: PUSH
11639: LD_INT 101
11641: PUSH
11642: LD_INT 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 16
11653: PUSH
11654: LD_INT 95
11656: PUSH
11657: LD_INT 104
11659: PUSH
11660: LD_INT 4
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 24
11671: PUSH
11672: LD_INT 92
11674: PUSH
11675: LD_INT 105
11677: PUSH
11678: LD_INT 0
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11711: LD_ADDR_VAR 0 3
11715: PUSH
11716: LD_INT 22
11718: PUSH
11719: LD_INT 3
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 3
11728: PUSH
11729: LD_INT 25
11731: PUSH
11732: LD_INT 2
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 69
11751: PUSH
11752: FOR_IN
11753: IFFALSE 11772
// AddComAgressiveMove ( i , 96 , 99 ) ;
11755: LD_VAR 0 3
11759: PPUSH
11760: LD_INT 96
11762: PPUSH
11763: LD_INT 99
11765: PPUSH
11766: CALL_OW 174
11770: GO 11752
11772: POP
11773: POP
// for i := 1 to buildingsTab do
11774: LD_ADDR_VAR 0 3
11778: PUSH
11779: DOUBLE
11780: LD_INT 1
11782: DEC
11783: ST_TO_ADDR
11784: LD_VAR 0 5
11788: PUSH
11789: FOR_TO
11790: IFFALSE 11863
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11792: LD_VAR 0 4
11796: PPUSH
11797: LD_VAR 0 5
11801: PUSH
11802: LD_VAR 0 3
11806: ARRAY
11807: PUSH
11808: LD_INT 1
11810: ARRAY
11811: PPUSH
11812: LD_VAR 0 5
11816: PUSH
11817: LD_VAR 0 3
11821: ARRAY
11822: PUSH
11823: LD_INT 2
11825: ARRAY
11826: PPUSH
11827: LD_VAR 0 5
11831: PUSH
11832: LD_VAR 0 3
11836: ARRAY
11837: PUSH
11838: LD_INT 3
11840: ARRAY
11841: PPUSH
11842: LD_VAR 0 5
11846: PUSH
11847: LD_VAR 0 3
11851: ARRAY
11852: PUSH
11853: LD_INT 4
11855: ARRAY
11856: PPUSH
11857: CALL_OW 205
11861: GO 11789
11863: POP
11864: POP
// end ; if position = 3 then
11865: LD_VAR 0 1
11869: PUSH
11870: LD_INT 3
11872: EQUAL
11873: IFFALSE 12659
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11875: LD_ADDR_VAR 0 4
11879: PUSH
11880: LD_INT 22
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 25
11892: PUSH
11893: LD_INT 2
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 69
11908: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11909: LD_ADDR_VAR 0 5
11913: PUSH
11914: LD_INT 0
11916: PUSH
11917: LD_INT 151
11919: PUSH
11920: LD_INT 71
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: LD_INT 145
11937: PUSH
11938: LD_INT 53
11940: PUSH
11941: LD_INT 3
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PUSH
11950: LD_INT 4
11952: PUSH
11953: LD_INT 172
11955: PUSH
11956: LD_INT 102
11958: PUSH
11959: LD_INT 5
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 29
11970: PUSH
11971: LD_INT 152
11973: PUSH
11974: LD_INT 85
11976: PUSH
11977: LD_INT 3
11979: PUSH
11980: EMPTY
11981: LIST
11982: LIST
11983: LIST
11984: LIST
11985: PUSH
11986: LD_INT 30
11988: PUSH
11989: LD_INT 156
11991: PUSH
11992: LD_INT 92
11994: PUSH
11995: LD_INT 3
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 28
12006: PUSH
12007: LD_INT 151
12009: PUSH
12010: LD_INT 66
12012: PUSH
12013: LD_INT 4
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: LD_INT 163
12027: PUSH
12028: LD_INT 95
12030: PUSH
12031: LD_INT 5
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: PUSH
12040: LD_INT 28
12042: PUSH
12043: LD_INT 149
12045: PUSH
12046: LD_INT 63
12048: PUSH
12049: LD_INT 4
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 17
12060: PUSH
12061: LD_INT 167
12063: PUSH
12064: LD_INT 99
12066: PUSH
12067: LD_INT 5
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: PUSH
12076: LD_INT 18
12078: PUSH
12079: LD_INT 163
12081: PUSH
12082: LD_INT 98
12084: PUSH
12085: LD_INT 0
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: PUSH
12094: LD_INT 28
12096: PUSH
12097: LD_INT 154
12099: PUSH
12100: LD_INT 70
12102: PUSH
12103: LD_INT 4
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: PUSH
12112: LD_INT 32
12114: PUSH
12115: LD_INT 155
12117: PUSH
12118: LD_INT 62
12120: PUSH
12121: LD_INT 4
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 32
12132: PUSH
12133: LD_INT 161
12135: PUSH
12136: LD_INT 69
12138: PUSH
12139: LD_INT 4
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: PUSH
12148: LD_INT 32
12150: PUSH
12151: LD_INT 168
12153: PUSH
12154: LD_INT 78
12156: PUSH
12157: LD_INT 4
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PUSH
12166: LD_INT 32
12168: PUSH
12169: LD_INT 163
12171: PUSH
12172: LD_INT 80
12174: PUSH
12175: LD_INT 5
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: PUSH
12184: LD_INT 32
12186: PUSH
12187: LD_INT 136
12189: PUSH
12190: LD_INT 73
12192: PUSH
12193: LD_INT 0
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 32
12204: PUSH
12205: LD_INT 157
12207: PUSH
12208: LD_INT 98
12210: PUSH
12211: LD_INT 0
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 32
12222: PUSH
12223: LD_INT 150
12225: PUSH
12226: LD_INT 87
12228: PUSH
12229: LD_INT 1
12231: PUSH
12232: EMPTY
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: PUSH
12238: LD_INT 33
12240: PUSH
12241: LD_INT 171
12243: PUSH
12244: LD_INT 97
12246: PUSH
12247: LD_INT 4
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: PUSH
12256: LD_INT 33
12258: PUSH
12259: LD_INT 168
12261: PUSH
12262: LD_INT 92
12264: PUSH
12265: LD_INT 4
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: PUSH
12274: LD_INT 33
12276: PUSH
12277: LD_INT 166
12279: PUSH
12280: LD_INT 80
12282: PUSH
12283: LD_INT 5
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 33
12294: PUSH
12295: LD_INT 141
12297: PUSH
12298: LD_INT 54
12300: PUSH
12301: LD_INT 2
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: PUSH
12310: LD_INT 33
12312: PUSH
12313: LD_INT 133
12315: PUSH
12316: LD_INT 57
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 33
12330: PUSH
12331: LD_INT 132
12333: PUSH
12334: LD_INT 61
12336: PUSH
12337: LD_INT 2
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: PUSH
12346: LD_INT 33
12348: PUSH
12349: LD_INT 150
12351: PUSH
12352: LD_INT 82
12354: PUSH
12355: LD_INT 0
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: PUSH
12364: LD_INT 33
12366: PUSH
12367: LD_INT 132
12369: PUSH
12370: LD_INT 72
12372: PUSH
12373: LD_INT 0
12375: PUSH
12376: EMPTY
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 6
12384: PUSH
12385: LD_INT 146
12387: PUSH
12388: LD_INT 64
12390: PUSH
12391: LD_INT 4
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 6
12402: PUSH
12403: LD_INT 159
12405: PUSH
12406: LD_INT 85
12408: PUSH
12409: LD_INT 4
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: PUSH
12418: LD_INT 21
12420: PUSH
12421: LD_INT 163
12423: PUSH
12424: LD_INT 91
12426: PUSH
12427: LD_INT 3
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 16
12438: PUSH
12439: LD_INT 166
12441: PUSH
12442: LD_INT 95
12444: PUSH
12445: LD_INT 4
12447: PUSH
12448: EMPTY
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 24
12456: PUSH
12457: LD_INT 159
12459: PUSH
12460: LD_INT 95
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12505: LD_ADDR_VAR 0 3
12509: PUSH
12510: LD_INT 22
12512: PUSH
12513: LD_INT 3
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 3
12522: PUSH
12523: LD_INT 25
12525: PUSH
12526: LD_INT 2
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 69
12545: PUSH
12546: FOR_IN
12547: IFFALSE 12566
// AddComAgressiveMove ( i , 141 , 65 ) ;
12549: LD_VAR 0 3
12553: PPUSH
12554: LD_INT 141
12556: PPUSH
12557: LD_INT 65
12559: PPUSH
12560: CALL_OW 174
12564: GO 12546
12566: POP
12567: POP
// for i := 1 to buildingsTab do
12568: LD_ADDR_VAR 0 3
12572: PUSH
12573: DOUBLE
12574: LD_INT 1
12576: DEC
12577: ST_TO_ADDR
12578: LD_VAR 0 5
12582: PUSH
12583: FOR_TO
12584: IFFALSE 12657
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12586: LD_VAR 0 4
12590: PPUSH
12591: LD_VAR 0 5
12595: PUSH
12596: LD_VAR 0 3
12600: ARRAY
12601: PUSH
12602: LD_INT 1
12604: ARRAY
12605: PPUSH
12606: LD_VAR 0 5
12610: PUSH
12611: LD_VAR 0 3
12615: ARRAY
12616: PUSH
12617: LD_INT 2
12619: ARRAY
12620: PPUSH
12621: LD_VAR 0 5
12625: PUSH
12626: LD_VAR 0 3
12630: ARRAY
12631: PUSH
12632: LD_INT 3
12634: ARRAY
12635: PPUSH
12636: LD_VAR 0 5
12640: PUSH
12641: LD_VAR 0 3
12645: ARRAY
12646: PUSH
12647: LD_INT 4
12649: ARRAY
12650: PPUSH
12651: CALL_OW 205
12655: GO 12583
12657: POP
12658: POP
// end ; end ;
12659: LD_VAR 0 2
12663: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12664: LD_INT 0
12666: PPUSH
12667: PPUSH
12668: PPUSH
12669: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12670: LD_ADDR_VAR 0 3
12674: PUSH
12675: LD_INT 22
12677: PUSH
12678: LD_INT 2
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PPUSH
12699: CALL_OW 69
12703: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12704: LD_VAR 0 3
12708: PPUSH
12709: LD_INT 0
12711: PPUSH
12712: LD_INT 71
12714: PPUSH
12715: LD_INT 15
12717: PPUSH
12718: LD_INT 3
12720: PPUSH
12721: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12725: LD_ADDR_VAR 0 4
12729: PUSH
12730: LD_INT 6
12732: PUSH
12733: LD_INT 77
12735: PUSH
12736: LD_INT 18
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 4
12750: PUSH
12751: LD_INT 77
12753: PUSH
12754: LD_INT 26
12756: PUSH
12757: LD_INT 0
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 31
12768: PUSH
12769: LD_INT 82
12771: PUSH
12772: LD_INT 28
12774: PUSH
12775: LD_INT 0
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 31
12786: PUSH
12787: LD_INT 84
12789: PUSH
12790: LD_INT 21
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 31
12804: PUSH
12805: LD_INT 66
12807: PUSH
12808: LD_INT 14
12810: PUSH
12811: LD_INT 2
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 27
12822: PUSH
12823: LD_INT 67
12825: PUSH
12826: LD_INT 18
12828: PUSH
12829: LD_INT 5
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 27
12840: PUSH
12841: LD_INT 69
12843: PUSH
12844: LD_INT 23
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: ST_TO_ADDR
// for i := 1 to buildingsTab do
12865: LD_ADDR_VAR 0 2
12869: PUSH
12870: DOUBLE
12871: LD_INT 1
12873: DEC
12874: ST_TO_ADDR
12875: LD_VAR 0 4
12879: PUSH
12880: FOR_TO
12881: IFFALSE 12954
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12883: LD_VAR 0 3
12887: PPUSH
12888: LD_VAR 0 4
12892: PUSH
12893: LD_VAR 0 2
12897: ARRAY
12898: PUSH
12899: LD_INT 1
12901: ARRAY
12902: PPUSH
12903: LD_VAR 0 4
12907: PUSH
12908: LD_VAR 0 2
12912: ARRAY
12913: PUSH
12914: LD_INT 2
12916: ARRAY
12917: PPUSH
12918: LD_VAR 0 4
12922: PUSH
12923: LD_VAR 0 2
12927: ARRAY
12928: PUSH
12929: LD_INT 3
12931: ARRAY
12932: PPUSH
12933: LD_VAR 0 4
12937: PUSH
12938: LD_VAR 0 2
12942: ARRAY
12943: PUSH
12944: LD_INT 4
12946: ARRAY
12947: PPUSH
12948: CALL_OW 205
12952: GO 12880
12954: POP
12955: POP
// end ;
12956: LD_VAR 0 1
12960: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12961: LD_INT 0
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12969: LD_ADDR_VAR 0 7
12973: PUSH
12974: LD_INT 22
12976: PUSH
12977: LD_VAR 0 1
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: LD_INT 25
12988: PUSH
12989: LD_INT 9
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PPUSH
13000: CALL_OW 69
13004: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13005: LD_ADDR_VAR 0 8
13009: PUSH
13010: LD_INT 22
13012: PUSH
13013: LD_VAR 0 2
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 3
13024: PUSH
13025: LD_INT 21
13027: PUSH
13028: LD_INT 3
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PPUSH
13043: CALL_OW 69
13047: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13048: LD_ADDR_VAR 0 5
13052: PUSH
13053: LD_INT 1
13055: PPUSH
13056: LD_INT 3
13058: PPUSH
13059: CALL_OW 12
13063: ST_TO_ADDR
// for i = 1 to list do
13064: LD_ADDR_VAR 0 6
13068: PUSH
13069: DOUBLE
13070: LD_INT 1
13072: DEC
13073: ST_TO_ADDR
13074: LD_VAR 0 7
13078: PUSH
13079: FOR_TO
13080: IFFALSE 14070
// for ta in filter do
13082: LD_ADDR_VAR 0 4
13086: PUSH
13087: LD_VAR 0 8
13091: PUSH
13092: FOR_IN
13093: IFFALSE 14066
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13095: LD_VAR 0 7
13099: PUSH
13100: LD_VAR 0 6
13104: ARRAY
13105: PPUSH
13106: LD_VAR 0 4
13110: PPUSH
13111: CALL_OW 296
13115: PUSH
13116: LD_INT 15
13118: LESSEQUAL
13119: IFFALSE 14064
// begin case c of 1 :
13121: LD_VAR 0 5
13125: PUSH
13126: LD_INT 1
13128: DOUBLE
13129: EQUAL
13130: IFTRUE 13134
13132: GO 13566
13134: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13135: LD_VAR 0 7
13139: PUSH
13140: LD_VAR 0 6
13144: ARRAY
13145: PPUSH
13146: LD_VAR 0 4
13150: PPUSH
13151: CALL_OW 250
13155: PPUSH
13156: LD_VAR 0 4
13160: PPUSH
13161: CALL_OW 251
13165: PPUSH
13166: CALL_OW 154
// if eventVar2 = 0 then
13170: LD_EXP 62
13174: PUSH
13175: LD_INT 0
13177: EQUAL
13178: IFFALSE 13564
// begin eventVar2 = 1 ;
13180: LD_ADDR_EXP 62
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13188: LD_INT 245
13190: PPUSH
13191: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13195: LD_VAR 0 4
13199: PPUSH
13200: CALL_OW 250
13204: PPUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: CALL_OW 251
13214: PPUSH
13215: CALL_OW 84
// DialogueOn ;
13219: CALL_OW 6
// if IsOK ( Cyrus ) then
13223: LD_EXP 5
13227: PPUSH
13228: CALL_OW 302
13232: IFFALSE 13248
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13234: LD_EXP 5
13238: PPUSH
13239: LD_STRING D9a-Cyrus-1
13241: PPUSH
13242: CALL_OW 88
// end else
13246: GO 13370
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13248: LD_INT 22
13250: PUSH
13251: LD_INT 1
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 26
13260: PUSH
13261: LD_INT 1
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 2
13270: PUSH
13271: LD_INT 25
13273: PUSH
13274: LD_INT 1
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: PUSH
13281: LD_INT 25
13283: PUSH
13284: LD_INT 2
13286: PUSH
13287: EMPTY
13288: LIST
13289: LIST
13290: PUSH
13291: LD_INT 25
13293: PUSH
13294: LD_INT 3
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: PUSH
13301: LD_INT 25
13303: PUSH
13304: LD_INT 4
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 25
13313: PUSH
13314: LD_INT 5
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: PUSH
13339: LD_EXP 1
13343: PUSH
13344: LD_EXP 14
13348: PUSH
13349: LD_EXP 5
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: DIFF
13359: PPUSH
13360: LD_STRING D9a-Sol1-1
13362: PPUSH
13363: LD_STRING D9a-Sol1-1
13365: PPUSH
13366: CALL 9616 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13370: LD_INT 22
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: LD_INT 26
13382: PUSH
13383: LD_INT 1
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: LD_INT 2
13392: PUSH
13393: LD_INT 25
13395: PUSH
13396: LD_INT 1
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 25
13405: PUSH
13406: LD_INT 2
13408: PUSH
13409: EMPTY
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 25
13415: PUSH
13416: LD_INT 3
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 25
13425: PUSH
13426: LD_INT 4
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 25
13435: PUSH
13436: LD_INT 5
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: PPUSH
13456: CALL_OW 69
13460: PUSH
13461: LD_EXP 1
13465: PUSH
13466: LD_EXP 14
13470: PUSH
13471: LD_EXP 5
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: DIFF
13481: PPUSH
13482: LD_STRING D9b-Sol1-1
13484: PPUSH
13485: LD_STRING D9b-Sol1-1
13487: PPUSH
13488: CALL 9616 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13492: LD_STRING 09_arInfo
13494: PPUSH
13495: LD_INT 0
13497: PPUSH
13498: CALL_OW 30
13502: PUSH
13503: LD_INT 1
13505: EQUAL
13506: IFFALSE 13520
// Say ( JMM , D9a-JMM-1 ) ;
13508: LD_EXP 1
13512: PPUSH
13513: LD_STRING D9a-JMM-1
13515: PPUSH
13516: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13520: LD_EXP 1
13524: PPUSH
13525: LD_STRING D9c-JMM-1
13527: PPUSH
13528: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13532: LD_INT 12
13534: PPUSH
13535: LD_INT 1
13537: PPUSH
13538: CALL_OW 321
13542: PUSH
13543: LD_INT 2
13545: EQUAL
13546: IFFALSE 13560
// Say ( JMM , D9c-JMM-1a ) ;
13548: LD_EXP 1
13552: PPUSH
13553: LD_STRING D9c-JMM-1a
13555: PPUSH
13556: CALL_OW 88
// DialogueOff ;
13560: CALL_OW 7
// end ; end ; 2 :
13564: GO 14064
13566: LD_INT 2
13568: DOUBLE
13569: EQUAL
13570: IFTRUE 13574
13572: GO 14032
13574: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13575: LD_VAR 0 7
13579: PUSH
13580: LD_VAR 0 6
13584: ARRAY
13585: PPUSH
13586: LD_VAR 0 4
13590: PPUSH
13591: CALL_OW 250
13595: PUSH
13596: LD_INT 1
13598: NEG
13599: PPUSH
13600: LD_INT 1
13602: PPUSH
13603: CALL_OW 12
13607: PLUS
13608: PPUSH
13609: LD_VAR 0 4
13613: PPUSH
13614: CALL_OW 251
13618: PUSH
13619: LD_INT 1
13621: NEG
13622: PPUSH
13623: LD_INT 1
13625: PPUSH
13626: CALL_OW 12
13630: PLUS
13631: PPUSH
13632: CALL_OW 153
// if eventVar2 = 0 then
13636: LD_EXP 62
13640: PUSH
13641: LD_INT 0
13643: EQUAL
13644: IFFALSE 14030
// begin eventVar2 = 1 ;
13646: LD_ADDR_EXP 62
13650: PUSH
13651: LD_INT 1
13653: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13654: LD_INT 245
13656: PPUSH
13657: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13661: LD_VAR 0 4
13665: PPUSH
13666: CALL_OW 250
13670: PPUSH
13671: LD_VAR 0 4
13675: PPUSH
13676: CALL_OW 251
13680: PPUSH
13681: CALL_OW 84
// DialogueOn ;
13685: CALL_OW 6
// if IsOK ( Cyrus ) then
13689: LD_EXP 5
13693: PPUSH
13694: CALL_OW 302
13698: IFFALSE 13714
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13700: LD_EXP 5
13704: PPUSH
13705: LD_STRING D9a-Cyrus-1
13707: PPUSH
13708: CALL_OW 88
// end else
13712: GO 13836
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13714: LD_INT 22
13716: PUSH
13717: LD_INT 1
13719: PUSH
13720: EMPTY
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 26
13726: PUSH
13727: LD_INT 1
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 2
13736: PUSH
13737: LD_INT 25
13739: PUSH
13740: LD_INT 1
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 25
13749: PUSH
13750: LD_INT 2
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 25
13759: PUSH
13760: LD_INT 3
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 25
13769: PUSH
13770: LD_INT 4
13772: PUSH
13773: EMPTY
13774: LIST
13775: LIST
13776: PUSH
13777: LD_INT 25
13779: PUSH
13780: LD_INT 5
13782: PUSH
13783: EMPTY
13784: LIST
13785: LIST
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: PPUSH
13800: CALL_OW 69
13804: PUSH
13805: LD_EXP 1
13809: PUSH
13810: LD_EXP 14
13814: PUSH
13815: LD_EXP 5
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: LIST
13824: DIFF
13825: PPUSH
13826: LD_STRING D9a-Sol1-1
13828: PPUSH
13829: LD_STRING D9a-Sol1-1
13831: PPUSH
13832: CALL 9616 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13836: LD_INT 22
13838: PUSH
13839: LD_INT 1
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 26
13848: PUSH
13849: LD_INT 1
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 2
13858: PUSH
13859: LD_INT 25
13861: PUSH
13862: LD_INT 1
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 25
13871: PUSH
13872: LD_INT 2
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 25
13881: PUSH
13882: LD_INT 3
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 25
13891: PUSH
13892: LD_INT 4
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 25
13901: PUSH
13902: LD_INT 5
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: PPUSH
13922: CALL_OW 69
13926: PUSH
13927: LD_EXP 1
13931: PUSH
13932: LD_EXP 14
13936: PUSH
13937: LD_EXP 5
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: DIFF
13947: PPUSH
13948: LD_STRING D9b-Sol1-1
13950: PPUSH
13951: LD_STRING D9b-Sol1-1
13953: PPUSH
13954: CALL 9616 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13958: LD_STRING 09_arInfo
13960: PPUSH
13961: LD_INT 0
13963: PPUSH
13964: CALL_OW 30
13968: PUSH
13969: LD_INT 1
13971: EQUAL
13972: IFFALSE 13986
// Say ( JMM , D9a-JMM-1 ) ;
13974: LD_EXP 1
13978: PPUSH
13979: LD_STRING D9a-JMM-1
13981: PPUSH
13982: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13986: LD_EXP 1
13990: PPUSH
13991: LD_STRING D9c-JMM-1
13993: PPUSH
13994: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13998: LD_INT 12
14000: PPUSH
14001: LD_INT 1
14003: PPUSH
14004: CALL_OW 321
14008: PUSH
14009: LD_INT 2
14011: EQUAL
14012: IFFALSE 14026
// Say ( JMM , D9c-JMM-1a ) ;
14014: LD_EXP 1
14018: PPUSH
14019: LD_STRING D9c-JMM-1a
14021: PPUSH
14022: CALL_OW 88
// DialogueOff ;
14026: CALL_OW 7
// end ; end ; 3 :
14030: GO 14064
14032: LD_INT 3
14034: DOUBLE
14035: EQUAL
14036: IFTRUE 14040
14038: GO 14063
14040: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14041: LD_VAR 0 7
14045: PUSH
14046: LD_VAR 0 6
14050: ARRAY
14051: PPUSH
14052: LD_VAR 0 4
14056: PPUSH
14057: CALL_OW 115
14061: GO 14064
14063: POP
// end ; end ;
14064: GO 13092
14066: POP
14067: POP
14068: GO 13079
14070: POP
14071: POP
// end ;
14072: LD_VAR 0 3
14076: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14077: LD_INT 0
14079: PPUSH
14080: PPUSH
14081: PPUSH
14082: PPUSH
// for i = 1 to 72 do
14083: LD_ADDR_VAR 0 5
14087: PUSH
14088: DOUBLE
14089: LD_INT 1
14091: DEC
14092: ST_TO_ADDR
14093: LD_INT 72
14095: PUSH
14096: FOR_TO
14097: IFFALSE 14155
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14099: LD_VAR 0 5
14103: PPUSH
14104: LD_VAR 0 1
14108: PPUSH
14109: CALL_OW 321
14113: PUSH
14114: LD_INT 1
14116: EQUAL
14117: PUSH
14118: LD_VAR 0 5
14122: PPUSH
14123: LD_VAR 0 3
14127: PPUSH
14128: CALL_OW 482
14132: PUSH
14133: LD_INT 1
14135: EQUAL
14136: AND
14137: IFFALSE 14153
// AddComResearch ( lab , i ) ;
14139: LD_VAR 0 2
14143: PPUSH
14144: LD_VAR 0 5
14148: PPUSH
14149: CALL_OW 184
14153: GO 14096
14155: POP
14156: POP
// end ;
14157: LD_VAR 0 4
14161: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14162: LD_INT 0
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
14171: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14172: LD_ADDR_VAR 0 6
14176: PUSH
14177: LD_INT 22
14179: PUSH
14180: LD_VAR 0 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 56
14191: PUSH
14192: EMPTY
14193: LIST
14194: PUSH
14195: LD_INT 24
14197: PUSH
14198: LD_INT 700
14200: PUSH
14201: EMPTY
14202: LIST
14203: LIST
14204: PUSH
14205: LD_INT 3
14207: PUSH
14208: LD_INT 60
14210: PUSH
14211: EMPTY
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 2
14220: PUSH
14221: LD_INT 25
14223: PUSH
14224: LD_INT 1
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PUSH
14231: LD_INT 25
14233: PUSH
14234: LD_INT 9
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: EMPTY
14242: LIST
14243: LIST
14244: LIST
14245: PUSH
14246: EMPTY
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: PPUSH
14253: CALL_OW 69
14257: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14258: LD_ADDR_VAR 0 7
14262: PUSH
14263: LD_INT 22
14265: PUSH
14266: LD_VAR 0 1
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: PUSH
14275: LD_INT 30
14277: PUSH
14278: LD_INT 32
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: PUSH
14285: LD_INT 58
14287: PUSH
14288: EMPTY
14289: LIST
14290: PUSH
14291: LD_INT 24
14293: PUSH
14294: LD_INT 251
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PPUSH
14307: CALL_OW 69
14311: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14312: LD_ADDR_VAR 0 9
14316: PUSH
14317: LD_INT 22
14319: PUSH
14320: LD_VAR 0 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: LD_INT 30
14334: PUSH
14335: LD_INT 4
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: PUSH
14342: LD_INT 30
14344: PUSH
14345: LD_INT 5
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 24
14359: PUSH
14360: LD_INT 251
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: LIST
14371: PPUSH
14372: CALL_OW 69
14376: ST_TO_ADDR
// if barrackList > 0 then
14377: LD_VAR 0 9
14381: PUSH
14382: LD_INT 0
14384: GREATER
14385: IFFALSE 14520
// begin if turretList = 0 then
14387: LD_VAR 0 7
14391: PUSH
14392: LD_INT 0
14394: EQUAL
14395: IFFALSE 14444
// begin for i in soldiers_list do
14397: LD_ADDR_VAR 0 4
14401: PUSH
14402: LD_VAR 0 6
14406: PUSH
14407: FOR_IN
14408: IFFALSE 14440
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14410: LD_VAR 0 4
14414: PPUSH
14415: LD_VAR 0 9
14419: PUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_VAR 0 9
14427: PPUSH
14428: CALL_OW 12
14432: ARRAY
14433: PPUSH
14434: CALL_OW 120
14438: GO 14407
14440: POP
14441: POP
// end else
14442: GO 14520
// begin for i in barrackList do
14444: LD_ADDR_VAR 0 4
14448: PUSH
14449: LD_VAR 0 9
14453: PUSH
14454: FOR_IN
14455: IFFALSE 14518
// begin insideUnits = UnitsInside ( i ) ;
14457: LD_ADDR_VAR 0 10
14461: PUSH
14462: LD_VAR 0 4
14466: PPUSH
14467: CALL_OW 313
14471: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14472: LD_VAR 0 10
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: LD_VAR 0 7
14485: PUSH
14486: LD_INT 1
14488: ARRAY
14489: PPUSH
14490: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14494: LD_VAR 0 6
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 7
14507: PUSH
14508: LD_INT 1
14510: ARRAY
14511: PPUSH
14512: CALL_OW 120
// end ;
14516: GO 14454
14518: POP
14519: POP
// end ; end ; end ;
14520: LD_VAR 0 3
14524: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14525: LD_INT 0
14527: PPUSH
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14533: LD_ADDR_VAR 0 6
14537: PUSH
14538: LD_VAR 0 2
14542: PPUSH
14543: CALL_OW 313
14547: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14548: LD_ADDR_VAR 0 7
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_VAR 0 1
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 25
14567: PUSH
14568: LD_INT 2
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 24
14577: PUSH
14578: LD_INT 1000
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: LD_INT 3
14587: PUSH
14588: LD_INT 54
14590: PUSH
14591: EMPTY
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: PPUSH
14604: CALL_OW 69
14608: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14609: LD_ADDR_VAR 0 4
14613: PUSH
14614: LD_INT 22
14616: PUSH
14617: LD_VAR 0 1
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 21
14628: PUSH
14629: LD_INT 3
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: LD_INT 3
14638: PUSH
14639: LD_INT 24
14641: PUSH
14642: LD_INT 1000
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: LIST
14657: PUSH
14658: EMPTY
14659: LIST
14660: PPUSH
14661: CALL_OW 69
14665: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14666: LD_VAR 0 4
14670: NOT
14671: PUSH
14672: LD_VAR 0 7
14676: NOT
14677: AND
14678: PUSH
14679: LD_EXP 42
14683: NOT
14684: AND
14685: IFFALSE 14689
// exit ;
14687: GO 14880
// if buildings_list > 0 and engineerOkInside then
14689: LD_VAR 0 4
14693: PUSH
14694: LD_INT 0
14696: GREATER
14697: PUSH
14698: LD_VAR 0 6
14702: AND
14703: IFFALSE 14757
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14705: LD_ADDR_VAR 0 5
14709: PUSH
14710: LD_INT 22
14712: PUSH
14713: LD_VAR 0 1
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 25
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: PUSH
14741: FOR_IN
14742: IFFALSE 14755
// ComExitBuilding ( i ) ;
14744: LD_VAR 0 5
14748: PPUSH
14749: CALL_OW 122
14753: GO 14741
14755: POP
14756: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14757: LD_VAR 0 4
14761: PUSH
14762: LD_INT 0
14764: GREATER
14765: PUSH
14766: LD_VAR 0 7
14770: PUSH
14771: LD_INT 0
14773: GREATER
14774: AND
14775: IFFALSE 14829
// begin for i in engineerOkOutside do
14777: LD_ADDR_VAR 0 5
14781: PUSH
14782: LD_VAR 0 7
14786: PUSH
14787: FOR_IN
14788: IFFALSE 14827
// for j in buildings_list do
14790: LD_ADDR_VAR 0 8
14794: PUSH
14795: LD_VAR 0 4
14799: PUSH
14800: FOR_IN
14801: IFFALSE 14823
// ComRepairBuilding ( i , j [ 1 ] ) ;
14803: LD_VAR 0 5
14807: PPUSH
14808: LD_VAR 0 8
14812: PUSH
14813: LD_INT 1
14815: ARRAY
14816: PPUSH
14817: CALL_OW 130
14821: GO 14800
14823: POP
14824: POP
14825: GO 14787
14827: POP
14828: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14829: LD_VAR 0 4
14833: PUSH
14834: LD_INT 0
14836: EQUAL
14837: PUSH
14838: LD_VAR 0 7
14842: PUSH
14843: LD_INT 0
14845: GREATER
14846: AND
14847: IFFALSE 14880
// for i in engineerOkOutside do
14849: LD_ADDR_VAR 0 5
14853: PUSH
14854: LD_VAR 0 7
14858: PUSH
14859: FOR_IN
14860: IFFALSE 14878
// ComEnterUnit ( i , building ) ;
14862: LD_VAR 0 5
14866: PPUSH
14867: LD_VAR 0 2
14871: PPUSH
14872: CALL_OW 120
14876: GO 14859
14878: POP
14879: POP
// end ;
14880: LD_VAR 0 3
14884: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14885: LD_INT 0
14887: PPUSH
14888: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14889: LD_INT 22
14891: PUSH
14892: LD_VAR 0 1
14896: PUSH
14897: EMPTY
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 25
14903: PUSH
14904: LD_INT 2
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PPUSH
14915: CALL_OW 69
14919: PUSH
14920: LD_INT 0
14922: GREATER
14923: PUSH
14924: LD_INT 22
14926: PUSH
14927: LD_VAR 0 1
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: LD_INT 21
14938: PUSH
14939: LD_INT 3
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 3
14948: PUSH
14949: LD_INT 24
14951: PUSH
14952: LD_INT 1000
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 69
14972: PUSH
14973: LD_INT 0
14975: EQUAL
14976: AND
14977: PUSH
14978: LD_VAR 0 2
14982: PUSH
14983: LD_INT 0
14985: GREATER
14986: AND
14987: IFFALSE 15086
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14989: LD_ADDR_VAR 0 4
14993: PUSH
14994: LD_INT 22
14996: PUSH
14997: LD_VAR 0 1
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: LD_INT 25
15008: PUSH
15009: LD_INT 2
15011: PUSH
15012: EMPTY
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PPUSH
15020: CALL_OW 69
15024: PUSH
15025: FOR_IN
15026: IFFALSE 15084
// begin AddComExitBuilding ( i ) ;
15028: LD_VAR 0 4
15032: PPUSH
15033: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15037: LD_VAR 0 4
15041: PPUSH
15042: LD_VAR 0 2
15046: PUSH
15047: LD_INT 1
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 2
15055: PUSH
15056: LD_INT 2
15058: ARRAY
15059: PPUSH
15060: LD_VAR 0 2
15064: PUSH
15065: LD_INT 3
15067: ARRAY
15068: PPUSH
15069: LD_VAR 0 2
15073: PUSH
15074: LD_INT 4
15076: ARRAY
15077: PPUSH
15078: CALL_OW 205
// end ;
15082: GO 15025
15084: POP
15085: POP
// end ; end ;
15086: LD_VAR 0 3
15090: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15091: LD_INT 0
15093: PPUSH
15094: PPUSH
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15102: LD_ADDR_VAR 0 6
15106: PUSH
15107: LD_INT 22
15109: PUSH
15110: LD_VAR 0 1
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 25
15121: PUSH
15122: LD_INT 4
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 24
15131: PUSH
15132: LD_INT 251
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15149: LD_ADDR_VAR 0 7
15153: PUSH
15154: LD_VAR 0 3
15158: PPUSH
15159: LD_INT 22
15161: PUSH
15162: LD_VAR 0 1
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: PUSH
15171: LD_INT 25
15173: PUSH
15174: LD_INT 4
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 50
15183: PUSH
15184: EMPTY
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: LIST
15191: PPUSH
15192: CALL_OW 70
15196: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15197: LD_ADDR_VAR 0 10
15201: PUSH
15202: LD_VAR 0 3
15206: PPUSH
15207: LD_INT 22
15209: PUSH
15210: LD_VAR 0 1
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 21
15221: PUSH
15222: LD_INT 1
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: LD_INT 25
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 3
15248: PUSH
15249: LD_INT 24
15251: PUSH
15252: LD_INT 750
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: EMPTY
15260: LIST
15261: LIST
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: LIST
15267: LIST
15268: PPUSH
15269: CALL_OW 70
15273: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15274: LD_ADDR_VAR 0 11
15278: PUSH
15279: LD_VAR 0 2
15283: PPUSH
15284: LD_INT 22
15286: PUSH
15287: LD_VAR 0 1
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 21
15298: PUSH
15299: LD_INT 1
15301: PUSH
15302: EMPTY
15303: LIST
15304: LIST
15305: PUSH
15306: LD_INT 3
15308: PUSH
15309: LD_INT 25
15311: PUSH
15312: LD_INT 3
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 3
15325: PUSH
15326: LD_INT 24
15328: PUSH
15329: LD_INT 1000
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: PPUSH
15346: CALL_OW 70
15350: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15351: LD_VAR 0 10
15355: NOT
15356: PUSH
15357: LD_VAR 0 7
15361: NOT
15362: AND
15363: PUSH
15364: LD_VAR 0 11
15368: NOT
15369: AND
15370: IFFALSE 15374
// exit ;
15372: GO 15634
// if damageUnits > 0 and sci_list > 0 then
15374: LD_VAR 0 10
15378: PUSH
15379: LD_INT 0
15381: GREATER
15382: PUSH
15383: LD_VAR 0 6
15387: PUSH
15388: LD_INT 0
15390: GREATER
15391: AND
15392: IFFALSE 15425
// for i in damageUnits do
15394: LD_ADDR_VAR 0 8
15398: PUSH
15399: LD_VAR 0 10
15403: PUSH
15404: FOR_IN
15405: IFFALSE 15423
// ComMoveToArea ( i , healArea ) ;
15407: LD_VAR 0 8
15411: PPUSH
15412: LD_VAR 0 2
15416: PPUSH
15417: CALL_OW 113
15421: GO 15404
15423: POP
15424: POP
// if unitsToHeal > 0 and sci_list > 0 then
15425: LD_VAR 0 11
15429: PUSH
15430: LD_INT 0
15432: GREATER
15433: PUSH
15434: LD_VAR 0 6
15438: PUSH
15439: LD_INT 0
15441: GREATER
15442: AND
15443: IFFALSE 15502
// begin for i in sci_list do
15445: LD_ADDR_VAR 0 8
15449: PUSH
15450: LD_VAR 0 6
15454: PUSH
15455: FOR_IN
15456: IFFALSE 15500
// begin ComExitBuilding ( i ) ;
15458: LD_VAR 0 8
15462: PPUSH
15463: CALL_OW 122
// for j in unitsToHeal do
15467: LD_ADDR_VAR 0 9
15471: PUSH
15472: LD_VAR 0 11
15476: PUSH
15477: FOR_IN
15478: IFFALSE 15496
// AddComHeal ( i , j ) ;
15480: LD_VAR 0 8
15484: PPUSH
15485: LD_VAR 0 9
15489: PPUSH
15490: CALL_OW 188
15494: GO 15477
15496: POP
15497: POP
// end ;
15498: GO 15455
15500: POP
15501: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15502: LD_VAR 0 10
15506: PUSH
15507: LD_INT 0
15509: EQUAL
15510: PUSH
15511: LD_VAR 0 11
15515: PUSH
15516: LD_INT 0
15518: EQUAL
15519: AND
15520: PUSH
15521: LD_VAR 0 7
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: AND
15530: IFFALSE 15634
// for i in sci_listOutside do
15532: LD_ADDR_VAR 0 8
15536: PUSH
15537: LD_VAR 0 7
15541: PUSH
15542: FOR_IN
15543: IFFALSE 15632
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15545: LD_ADDR_VAR 0 12
15549: PUSH
15550: LD_INT 22
15552: PUSH
15553: LD_VAR 0 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 21
15564: PUSH
15565: LD_INT 3
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 30
15574: PUSH
15575: LD_INT 8
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15592: LD_ADDR_VAR 0 13
15596: PUSH
15597: LD_INT 1
15599: PPUSH
15600: LD_VAR 0 12
15604: PPUSH
15605: CALL_OW 12
15609: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15610: LD_VAR 0 8
15614: PPUSH
15615: LD_VAR 0 12
15619: PUSH
15620: LD_VAR 0 13
15624: ARRAY
15625: PPUSH
15626: CALL_OW 120
// end ;
15630: GO 15542
15632: POP
15633: POP
// end ;
15634: LD_VAR 0 5
15638: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15639: LD_INT 0
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
// amChassisTab = [ ] ;
15652: LD_ADDR_VAR 0 19
15656: PUSH
15657: EMPTY
15658: ST_TO_ADDR
// arChassisTab = [ ] ;
15659: LD_ADDR_VAR 0 18
15663: PUSH
15664: EMPTY
15665: ST_TO_ADDR
// ruChassisTab = [ ] ;
15666: LD_ADDR_VAR 0 17
15670: PUSH
15671: EMPTY
15672: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15673: LD_INT 35
15675: PPUSH
15676: CALL_OW 67
// if nation = 1 then
15680: LD_VAR 0 5
15684: PUSH
15685: LD_INT 1
15687: EQUAL
15688: IFFALSE 16193
// begin uc_side = side ;
15690: LD_ADDR_OWVAR 20
15694: PUSH
15695: LD_VAR 0 2
15699: ST_TO_ADDR
// uc_nation = nation ;
15700: LD_ADDR_OWVAR 21
15704: PUSH
15705: LD_VAR 0 5
15709: ST_TO_ADDR
// vc_engine = vehengine ;
15710: LD_ADDR_OWVAR 39
15714: PUSH
15715: LD_VAR 0 6
15719: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15720: LD_ADDR_OWVAR 38
15724: PUSH
15725: LD_VAR 0 7
15729: PUSH
15730: LD_INT 1
15732: PPUSH
15733: LD_VAR 0 7
15737: PPUSH
15738: CALL_OW 12
15742: ARRAY
15743: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15744: LD_ADDR_OWVAR 40
15748: PUSH
15749: LD_VAR 0 10
15753: PUSH
15754: LD_INT 1
15756: PPUSH
15757: LD_VAR 0 10
15761: PPUSH
15762: CALL_OW 12
15766: ARRAY
15767: ST_TO_ADDR
// for j = 1 to AMWeapon do
15768: LD_ADDR_VAR 0 14
15772: PUSH
15773: DOUBLE
15774: LD_INT 1
15776: DEC
15777: ST_TO_ADDR
15778: LD_VAR 0 10
15782: PUSH
15783: FOR_TO
15784: IFFALSE 16085
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15786: LD_VAR 0 10
15790: PUSH
15791: LD_VAR 0 14
15795: ARRAY
15796: PUSH
15797: LD_INT 2
15799: EQUAL
15800: PUSH
15801: LD_VAR 0 10
15805: PUSH
15806: LD_VAR 0 14
15810: ARRAY
15811: PUSH
15812: LD_INT 3
15814: EQUAL
15815: OR
15816: IFFALSE 15869
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15818: LD_ADDR_VAR 0 19
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: LD_INT 2
15828: PUSH
15829: LD_INT 3
15831: PUSH
15832: LD_INT 4
15834: PUSH
15835: LD_INT 5
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15845: LD_ADDR_OWVAR 37
15849: PUSH
15850: LD_VAR 0 19
15854: PUSH
15855: LD_INT 1
15857: PPUSH
15858: LD_VAR 0 19
15862: PPUSH
15863: CALL_OW 12
15867: ARRAY
15868: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15869: LD_VAR 0 10
15873: PUSH
15874: LD_VAR 0 14
15878: ARRAY
15879: PUSH
15880: LD_INT 4
15882: EQUAL
15883: PUSH
15884: LD_VAR 0 10
15888: PUSH
15889: LD_VAR 0 14
15893: ARRAY
15894: PUSH
15895: LD_INT 5
15897: EQUAL
15898: OR
15899: PUSH
15900: LD_VAR 0 10
15904: PUSH
15905: LD_VAR 0 14
15909: ARRAY
15910: PUSH
15911: LD_INT 9
15913: EQUAL
15914: OR
15915: PUSH
15916: LD_VAR 0 10
15920: PUSH
15921: LD_VAR 0 14
15925: ARRAY
15926: PUSH
15927: LD_INT 11
15929: EQUAL
15930: OR
15931: PUSH
15932: LD_VAR 0 10
15936: PUSH
15937: LD_VAR 0 14
15941: ARRAY
15942: PUSH
15943: LD_INT 7
15945: EQUAL
15946: OR
15947: IFFALSE 15996
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15949: LD_ADDR_VAR 0 19
15953: PUSH
15954: LD_INT 2
15956: PUSH
15957: LD_INT 3
15959: PUSH
15960: LD_INT 4
15962: PUSH
15963: LD_INT 5
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15972: LD_ADDR_OWVAR 37
15976: PUSH
15977: LD_VAR 0 19
15981: PUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_VAR 0 19
15989: PPUSH
15990: CALL_OW 12
15994: ARRAY
15995: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15996: LD_VAR 0 10
16000: PUSH
16001: LD_VAR 0 14
16005: ARRAY
16006: PUSH
16007: LD_INT 8
16009: EQUAL
16010: PUSH
16011: LD_VAR 0 10
16015: PUSH
16016: LD_VAR 0 14
16020: ARRAY
16021: PUSH
16022: LD_INT 6
16024: EQUAL
16025: OR
16026: PUSH
16027: LD_VAR 0 10
16031: PUSH
16032: LD_VAR 0 14
16036: ARRAY
16037: PUSH
16038: LD_INT 10
16040: EQUAL
16041: OR
16042: IFFALSE 16083
// begin amChassisTab = [ 4 , 5 ] ;
16044: LD_ADDR_VAR 0 19
16048: PUSH
16049: LD_INT 4
16051: PUSH
16052: LD_INT 5
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16059: LD_ADDR_OWVAR 37
16063: PUSH
16064: LD_VAR 0 19
16068: PUSH
16069: LD_INT 1
16071: PPUSH
16072: LD_VAR 0 19
16076: PPUSH
16077: CALL_OW 12
16081: ARRAY
16082: ST_TO_ADDR
// end ; end ;
16083: GO 15783
16085: POP
16086: POP
// veh = CreateVehicle ;
16087: LD_ADDR_VAR 0 16
16091: PUSH
16092: CALL_OW 45
16096: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16097: LD_VAR 0 16
16101: PPUSH
16102: LD_VAR 0 1
16106: PPUSH
16107: LD_INT 0
16109: PPUSH
16110: CALL_OW 49
// if vc_control = 1 then
16114: LD_OWVAR 38
16118: PUSH
16119: LD_INT 1
16121: EQUAL
16122: IFFALSE 16179
// begin hc_gallery =  ;
16124: LD_ADDR_OWVAR 33
16128: PUSH
16129: LD_STRING 
16131: ST_TO_ADDR
// hc_name =  ;
16132: LD_ADDR_OWVAR 26
16136: PUSH
16137: LD_STRING 
16139: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16140: LD_INT 0
16142: PPUSH
16143: LD_INT 3
16145: PPUSH
16146: LD_VAR 0 4
16150: PPUSH
16151: CALL_OW 380
// un = CreateHuman ;
16155: LD_ADDR_VAR 0 15
16159: PUSH
16160: CALL_OW 44
16164: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16165: LD_VAR 0 15
16169: PPUSH
16170: LD_VAR 0 16
16174: PPUSH
16175: CALL_OW 52
// end ; i = i + 1 ;
16179: LD_ADDR_VAR 0 13
16183: PUSH
16184: LD_VAR 0 13
16188: PUSH
16189: LD_INT 1
16191: PLUS
16192: ST_TO_ADDR
// end ; if nation = 2 then
16193: LD_VAR 0 5
16197: PUSH
16198: LD_INT 2
16200: EQUAL
16201: IFFALSE 16623
// begin uc_side = side ;
16203: LD_ADDR_OWVAR 20
16207: PUSH
16208: LD_VAR 0 2
16212: ST_TO_ADDR
// uc_nation = nation ;
16213: LD_ADDR_OWVAR 21
16217: PUSH
16218: LD_VAR 0 5
16222: ST_TO_ADDR
// vc_engine = vehengine ;
16223: LD_ADDR_OWVAR 39
16227: PUSH
16228: LD_VAR 0 6
16232: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16233: LD_ADDR_OWVAR 38
16237: PUSH
16238: LD_VAR 0 7
16242: PUSH
16243: LD_INT 1
16245: PPUSH
16246: LD_VAR 0 7
16250: PPUSH
16251: CALL_OW 12
16255: ARRAY
16256: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16257: LD_ADDR_OWVAR 40
16261: PUSH
16262: LD_VAR 0 9
16266: PUSH
16267: LD_INT 1
16269: PPUSH
16270: LD_VAR 0 9
16274: PPUSH
16275: CALL_OW 12
16279: ARRAY
16280: ST_TO_ADDR
// for j = 1 to ARWeapons do
16281: LD_ADDR_VAR 0 14
16285: PUSH
16286: DOUBLE
16287: LD_INT 1
16289: DEC
16290: ST_TO_ADDR
16291: LD_VAR 0 9
16295: PUSH
16296: FOR_TO
16297: IFFALSE 16515
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16299: LD_VAR 0 9
16303: PUSH
16304: LD_VAR 0 14
16308: ARRAY
16309: PUSH
16310: LD_INT 24
16312: EQUAL
16313: PUSH
16314: LD_VAR 0 9
16318: PUSH
16319: LD_VAR 0 14
16323: ARRAY
16324: PUSH
16325: LD_INT 22
16327: EQUAL
16328: OR
16329: PUSH
16330: LD_VAR 0 9
16334: PUSH
16335: LD_VAR 0 14
16339: ARRAY
16340: PUSH
16341: LD_INT 23
16343: EQUAL
16344: OR
16345: PUSH
16346: LD_VAR 0 9
16350: PUSH
16351: LD_VAR 0 14
16355: ARRAY
16356: PUSH
16357: LD_INT 30
16359: EQUAL
16360: OR
16361: IFFALSE 16398
// begin arChassisTab = [ 14 ] ;
16363: LD_ADDR_VAR 0 18
16367: PUSH
16368: LD_INT 14
16370: PUSH
16371: EMPTY
16372: LIST
16373: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16374: LD_ADDR_OWVAR 37
16378: PUSH
16379: LD_VAR 0 18
16383: PUSH
16384: LD_INT 1
16386: PPUSH
16387: LD_VAR 0 18
16391: PPUSH
16392: CALL_OW 12
16396: ARRAY
16397: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16398: LD_VAR 0 9
16402: PUSH
16403: LD_VAR 0 14
16407: ARRAY
16408: PUSH
16409: LD_INT 29
16411: EQUAL
16412: PUSH
16413: LD_VAR 0 9
16417: PUSH
16418: LD_VAR 0 14
16422: ARRAY
16423: PUSH
16424: LD_INT 28
16426: EQUAL
16427: OR
16428: PUSH
16429: LD_VAR 0 9
16433: PUSH
16434: LD_VAR 0 14
16438: ARRAY
16439: PUSH
16440: LD_INT 27
16442: EQUAL
16443: OR
16444: PUSH
16445: LD_VAR 0 9
16449: PUSH
16450: LD_VAR 0 14
16454: ARRAY
16455: PUSH
16456: LD_INT 26
16458: EQUAL
16459: OR
16460: PUSH
16461: LD_VAR 0 9
16465: PUSH
16466: LD_VAR 0 14
16470: ARRAY
16471: PUSH
16472: LD_INT 25
16474: EQUAL
16475: OR
16476: IFFALSE 16513
// begin arChassisTab = [ 14 ] ;
16478: LD_ADDR_VAR 0 18
16482: PUSH
16483: LD_INT 14
16485: PUSH
16486: EMPTY
16487: LIST
16488: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16489: LD_ADDR_OWVAR 37
16493: PUSH
16494: LD_VAR 0 18
16498: PUSH
16499: LD_INT 1
16501: PPUSH
16502: LD_VAR 0 18
16506: PPUSH
16507: CALL_OW 12
16511: ARRAY
16512: ST_TO_ADDR
// end ; end ;
16513: GO 16296
16515: POP
16516: POP
// veh = CreateVehicle ;
16517: LD_ADDR_VAR 0 16
16521: PUSH
16522: CALL_OW 45
16526: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16527: LD_VAR 0 16
16531: PPUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: LD_INT 0
16539: PPUSH
16540: CALL_OW 49
// if vc_control = 1 then
16544: LD_OWVAR 38
16548: PUSH
16549: LD_INT 1
16551: EQUAL
16552: IFFALSE 16609
// begin hc_gallery =  ;
16554: LD_ADDR_OWVAR 33
16558: PUSH
16559: LD_STRING 
16561: ST_TO_ADDR
// hc_name =  ;
16562: LD_ADDR_OWVAR 26
16566: PUSH
16567: LD_STRING 
16569: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16570: LD_INT 0
16572: PPUSH
16573: LD_INT 3
16575: PPUSH
16576: LD_VAR 0 4
16580: PPUSH
16581: CALL_OW 380
// un = CreateHuman ;
16585: LD_ADDR_VAR 0 15
16589: PUSH
16590: CALL_OW 44
16594: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16595: LD_VAR 0 15
16599: PPUSH
16600: LD_VAR 0 16
16604: PPUSH
16605: CALL_OW 52
// end ; i = i + 1 ;
16609: LD_ADDR_VAR 0 13
16613: PUSH
16614: LD_VAR 0 13
16618: PUSH
16619: LD_INT 1
16621: PLUS
16622: ST_TO_ADDR
// end ; if nation = 3 then
16623: LD_VAR 0 5
16627: PUSH
16628: LD_INT 3
16630: EQUAL
16631: IFFALSE 17037
// begin uc_side = side ;
16633: LD_ADDR_OWVAR 20
16637: PUSH
16638: LD_VAR 0 2
16642: ST_TO_ADDR
// uc_nation = nation ;
16643: LD_ADDR_OWVAR 21
16647: PUSH
16648: LD_VAR 0 5
16652: ST_TO_ADDR
// vc_engine = vehengine ;
16653: LD_ADDR_OWVAR 39
16657: PUSH
16658: LD_VAR 0 6
16662: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16663: LD_ADDR_OWVAR 38
16667: PUSH
16668: LD_VAR 0 7
16672: PUSH
16673: LD_INT 1
16675: PPUSH
16676: LD_VAR 0 7
16680: PPUSH
16681: CALL_OW 12
16685: ARRAY
16686: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16687: LD_ADDR_OWVAR 40
16691: PUSH
16692: LD_VAR 0 8
16696: PUSH
16697: LD_INT 1
16699: PPUSH
16700: LD_VAR 0 8
16704: PPUSH
16705: CALL_OW 12
16709: ARRAY
16710: ST_TO_ADDR
// for j = 1 to RuWeapons do
16711: LD_ADDR_VAR 0 14
16715: PUSH
16716: DOUBLE
16717: LD_INT 1
16719: DEC
16720: ST_TO_ADDR
16721: LD_VAR 0 8
16725: PUSH
16726: FOR_TO
16727: IFFALSE 16929
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16729: LD_VAR 0 8
16733: PUSH
16734: LD_VAR 0 14
16738: ARRAY
16739: PUSH
16740: LD_INT 42
16742: EQUAL
16743: PUSH
16744: LD_VAR 0 8
16748: PUSH
16749: LD_VAR 0 14
16753: ARRAY
16754: PUSH
16755: LD_INT 43
16757: EQUAL
16758: OR
16759: PUSH
16760: LD_VAR 0 8
16764: PUSH
16765: LD_VAR 0 14
16769: ARRAY
16770: PUSH
16771: LD_INT 44
16773: EQUAL
16774: OR
16775: PUSH
16776: LD_VAR 0 8
16780: PUSH
16781: LD_VAR 0 14
16785: ARRAY
16786: PUSH
16787: LD_INT 45
16789: EQUAL
16790: OR
16791: PUSH
16792: LD_VAR 0 8
16796: PUSH
16797: LD_VAR 0 14
16801: ARRAY
16802: PUSH
16803: LD_INT 49
16805: EQUAL
16806: OR
16807: IFFALSE 16856
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16809: LD_ADDR_VAR 0 17
16813: PUSH
16814: LD_INT 21
16816: PUSH
16817: LD_INT 22
16819: PUSH
16820: LD_INT 23
16822: PUSH
16823: LD_INT 24
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16832: LD_ADDR_OWVAR 37
16836: PUSH
16837: LD_VAR 0 17
16841: PUSH
16842: LD_INT 1
16844: PPUSH
16845: LD_VAR 0 17
16849: PPUSH
16850: CALL_OW 12
16854: ARRAY
16855: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16856: LD_VAR 0 8
16860: PUSH
16861: LD_VAR 0 14
16865: ARRAY
16866: PUSH
16867: LD_INT 46
16869: EQUAL
16870: PUSH
16871: LD_VAR 0 8
16875: PUSH
16876: LD_VAR 0 14
16880: ARRAY
16881: PUSH
16882: LD_INT 47
16884: EQUAL
16885: OR
16886: IFFALSE 16927
// begin ruChassisTab = [ 23 , 24 ] ;
16888: LD_ADDR_VAR 0 17
16892: PUSH
16893: LD_INT 23
16895: PUSH
16896: LD_INT 24
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16903: LD_ADDR_OWVAR 37
16907: PUSH
16908: LD_VAR 0 17
16912: PUSH
16913: LD_INT 1
16915: PPUSH
16916: LD_VAR 0 17
16920: PPUSH
16921: CALL_OW 12
16925: ARRAY
16926: ST_TO_ADDR
// end ; end ;
16927: GO 16726
16929: POP
16930: POP
// veh = CreateVehicle ;
16931: LD_ADDR_VAR 0 16
16935: PUSH
16936: CALL_OW 45
16940: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16941: LD_VAR 0 16
16945: PPUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: LD_INT 0
16953: PPUSH
16954: CALL_OW 49
// if vc_control = 1 then
16958: LD_OWVAR 38
16962: PUSH
16963: LD_INT 1
16965: EQUAL
16966: IFFALSE 17023
// begin hc_gallery =  ;
16968: LD_ADDR_OWVAR 33
16972: PUSH
16973: LD_STRING 
16975: ST_TO_ADDR
// hc_name =  ;
16976: LD_ADDR_OWVAR 26
16980: PUSH
16981: LD_STRING 
16983: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16984: LD_INT 0
16986: PPUSH
16987: LD_INT 3
16989: PPUSH
16990: LD_VAR 0 4
16994: PPUSH
16995: CALL_OW 380
// un = CreateHuman ;
16999: LD_ADDR_VAR 0 15
17003: PUSH
17004: CALL_OW 44
17008: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17009: LD_VAR 0 15
17013: PPUSH
17014: LD_VAR 0 16
17018: PPUSH
17019: CALL_OW 52
// end ; i = i + 1 ;
17023: LD_ADDR_VAR 0 13
17027: PUSH
17028: LD_VAR 0 13
17032: PUSH
17033: LD_INT 1
17035: PLUS
17036: ST_TO_ADDR
// end ; until i = vehCount ;
17037: LD_VAR 0 13
17041: PUSH
17042: LD_VAR 0 3
17046: EQUAL
17047: IFFALSE 15673
// repeat wait ( 0 0$1 ) ;
17049: LD_INT 35
17051: PPUSH
17052: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17056: LD_ADDR_VAR 0 20
17060: PUSH
17061: LD_INT 22
17063: PUSH
17064: LD_VAR 0 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 21
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: LD_INT 24
17085: PUSH
17086: LD_INT 650
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: PPUSH
17098: CALL_OW 69
17102: ST_TO_ADDR
// if vehicleOK_list > 0 then
17103: LD_VAR 0 20
17107: PUSH
17108: LD_INT 0
17110: GREATER
17111: IFFALSE 17302
// begin for i in vehicleOK_list do
17113: LD_ADDR_VAR 0 13
17117: PUSH
17118: LD_VAR 0 20
17122: PUSH
17123: FOR_IN
17124: IFFALSE 17300
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17126: LD_ADDR_VAR 0 21
17130: PUSH
17131: LD_INT 22
17133: PUSH
17134: LD_VAR 0 11
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PPUSH
17143: CALL_OW 69
17147: PPUSH
17148: LD_VAR 0 13
17152: PPUSH
17153: CALL_OW 74
17157: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17158: LD_ADDR_VAR 0 22
17162: PUSH
17163: LD_INT 22
17165: PUSH
17166: LD_VAR 0 11
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: LD_INT 59
17180: PUSH
17181: EMPTY
17182: LIST
17183: PUSH
17184: LD_INT 21
17186: PUSH
17187: LD_INT 1
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: LD_INT 21
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: PPUSH
17217: CALL_OW 69
17221: PPUSH
17222: LD_VAR 0 13
17226: PPUSH
17227: CALL_OW 74
17231: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17232: LD_VAR 0 13
17236: PPUSH
17237: LD_VAR 0 21
17241: PPUSH
17242: CALL_OW 296
17246: PUSH
17247: LD_INT 8
17249: PLUS
17250: PUSH
17251: LD_VAR 0 13
17255: PPUSH
17256: LD_VAR 0 22
17260: PPUSH
17261: CALL_OW 296
17265: LESS
17266: IFFALSE 17284
// begin ComAttackUnit ( i , target1 ) ;
17268: LD_VAR 0 13
17272: PPUSH
17273: LD_VAR 0 21
17277: PPUSH
17278: CALL_OW 115
// end else
17282: GO 17298
// begin ComAttackUnit ( i , target2 ) ;
17284: LD_VAR 0 13
17288: PPUSH
17289: LD_VAR 0 22
17293: PPUSH
17294: CALL_OW 115
// end ; end ;
17298: GO 17123
17300: POP
17301: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17302: LD_INT 22
17304: PUSH
17305: LD_VAR 0 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: LD_INT 2
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: PUSH
17333: LD_INT 0
17335: EQUAL
17336: IFFALSE 17049
// end ;
17338: LD_VAR 0 12
17342: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17343: LD_INT 0
17345: PPUSH
17346: PPUSH
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
// for i = 1 to soldierCount do
17356: LD_ADDR_VAR 0 13
17360: PUSH
17361: DOUBLE
17362: LD_INT 1
17364: DEC
17365: ST_TO_ADDR
17366: LD_VAR 0 3
17370: PUSH
17371: FOR_TO
17372: IFFALSE 17454
// begin uc_side = side ;
17374: LD_ADDR_OWVAR 20
17378: PUSH
17379: LD_VAR 0 1
17383: ST_TO_ADDR
// uc_nation = nation ;
17384: LD_ADDR_OWVAR 21
17388: PUSH
17389: LD_VAR 0 2
17393: ST_TO_ADDR
// hc_name =  ;
17394: LD_ADDR_OWVAR 26
17398: PUSH
17399: LD_STRING 
17401: ST_TO_ADDR
// hc_gallery =  ;
17402: LD_ADDR_OWVAR 33
17406: PUSH
17407: LD_STRING 
17409: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17410: LD_INT 0
17412: PPUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_VAR 0 8
17420: PPUSH
17421: CALL_OW 380
// un = CreateHuman ;
17425: LD_ADDR_VAR 0 15
17429: PUSH
17430: CALL_OW 44
17434: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17435: LD_VAR 0 15
17439: PPUSH
17440: LD_VAR 0 9
17444: PPUSH
17445: LD_INT 0
17447: PPUSH
17448: CALL_OW 49
// end ;
17452: GO 17371
17454: POP
17455: POP
// for i = 1 to sniperCount do
17456: LD_ADDR_VAR 0 13
17460: PUSH
17461: DOUBLE
17462: LD_INT 1
17464: DEC
17465: ST_TO_ADDR
17466: LD_VAR 0 4
17470: PUSH
17471: FOR_TO
17472: IFFALSE 17554
// begin uc_side = side ;
17474: LD_ADDR_OWVAR 20
17478: PUSH
17479: LD_VAR 0 1
17483: ST_TO_ADDR
// uc_nation = nation ;
17484: LD_ADDR_OWVAR 21
17488: PUSH
17489: LD_VAR 0 2
17493: ST_TO_ADDR
// hc_name =  ;
17494: LD_ADDR_OWVAR 26
17498: PUSH
17499: LD_STRING 
17501: ST_TO_ADDR
// hc_gallery =  ;
17502: LD_ADDR_OWVAR 33
17506: PUSH
17507: LD_STRING 
17509: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17510: LD_INT 0
17512: PPUSH
17513: LD_INT 5
17515: PPUSH
17516: LD_VAR 0 8
17520: PPUSH
17521: CALL_OW 380
// un = CreateHuman ;
17525: LD_ADDR_VAR 0 15
17529: PUSH
17530: CALL_OW 44
17534: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17535: LD_VAR 0 15
17539: PPUSH
17540: LD_VAR 0 9
17544: PPUSH
17545: LD_INT 0
17547: PPUSH
17548: CALL_OW 49
// end ;
17552: GO 17471
17554: POP
17555: POP
// for i = 1 to bazookCount do
17556: LD_ADDR_VAR 0 13
17560: PUSH
17561: DOUBLE
17562: LD_INT 1
17564: DEC
17565: ST_TO_ADDR
17566: LD_VAR 0 5
17570: PUSH
17571: FOR_TO
17572: IFFALSE 17654
// begin uc_side = side ;
17574: LD_ADDR_OWVAR 20
17578: PUSH
17579: LD_VAR 0 1
17583: ST_TO_ADDR
// uc_nation = nation ;
17584: LD_ADDR_OWVAR 21
17588: PUSH
17589: LD_VAR 0 2
17593: ST_TO_ADDR
// hc_name =  ;
17594: LD_ADDR_OWVAR 26
17598: PUSH
17599: LD_STRING 
17601: ST_TO_ADDR
// hc_gallery =  ;
17602: LD_ADDR_OWVAR 33
17606: PUSH
17607: LD_STRING 
17609: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17610: LD_INT 0
17612: PPUSH
17613: LD_INT 9
17615: PPUSH
17616: LD_VAR 0 8
17620: PPUSH
17621: CALL_OW 380
// un = CreateHuman ;
17625: LD_ADDR_VAR 0 15
17629: PUSH
17630: CALL_OW 44
17634: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17635: LD_VAR 0 15
17639: PPUSH
17640: LD_VAR 0 9
17644: PPUSH
17645: LD_INT 0
17647: PPUSH
17648: CALL_OW 49
// end ;
17652: GO 17571
17654: POP
17655: POP
// for i = 1 to mortalCount do
17656: LD_ADDR_VAR 0 13
17660: PUSH
17661: DOUBLE
17662: LD_INT 1
17664: DEC
17665: ST_TO_ADDR
17666: LD_VAR 0 6
17670: PUSH
17671: FOR_TO
17672: IFFALSE 17754
// begin uc_side = side ;
17674: LD_ADDR_OWVAR 20
17678: PUSH
17679: LD_VAR 0 1
17683: ST_TO_ADDR
// uc_nation = nation ;
17684: LD_ADDR_OWVAR 21
17688: PUSH
17689: LD_VAR 0 2
17693: ST_TO_ADDR
// hc_name =  ;
17694: LD_ADDR_OWVAR 26
17698: PUSH
17699: LD_STRING 
17701: ST_TO_ADDR
// hc_gallery =  ;
17702: LD_ADDR_OWVAR 33
17706: PUSH
17707: LD_STRING 
17709: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17710: LD_INT 0
17712: PPUSH
17713: LD_INT 8
17715: PPUSH
17716: LD_VAR 0 8
17720: PPUSH
17721: CALL_OW 380
// un = CreateHuman ;
17725: LD_ADDR_VAR 0 15
17729: PUSH
17730: CALL_OW 44
17734: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17735: LD_VAR 0 15
17739: PPUSH
17740: LD_VAR 0 9
17744: PPUSH
17745: LD_INT 0
17747: PPUSH
17748: CALL_OW 49
// end ;
17752: GO 17671
17754: POP
17755: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17756: LD_ADDR_VAR 0 18
17760: PUSH
17761: LD_INT 22
17763: PUSH
17764: LD_VAR 0 1
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: PUSH
17773: LD_INT 2
17775: PUSH
17776: LD_INT 25
17778: PUSH
17779: LD_INT 1
17781: PUSH
17782: EMPTY
17783: LIST
17784: LIST
17785: PUSH
17786: LD_INT 25
17788: PUSH
17789: LD_INT 5
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 25
17798: PUSH
17799: LD_INT 8
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: LD_INT 25
17808: PUSH
17809: LD_INT 9
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PPUSH
17827: CALL_OW 69
17831: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17832: LD_ADDR_VAR 0 17
17836: PUSH
17837: LD_INT 22
17839: PUSH
17840: LD_VAR 0 1
17844: PUSH
17845: EMPTY
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 25
17851: PUSH
17852: LD_INT 4
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: PPUSH
17863: CALL_OW 69
17867: ST_TO_ADDR
// for i in medic_list do
17868: LD_ADDR_VAR 0 13
17872: PUSH
17873: LD_VAR 0 17
17877: PUSH
17878: FOR_IN
17879: IFFALSE 17897
// ComMoveToArea ( i , healArea ) ;
17881: LD_VAR 0 13
17885: PPUSH
17886: LD_VAR 0 10
17890: PPUSH
17891: CALL_OW 113
17895: GO 17878
17897: POP
17898: POP
// repeat wait ( 0 0$1 ) ;
17899: LD_INT 35
17901: PPUSH
17902: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17906: LD_ADDR_VAR 0 16
17910: PUSH
17911: LD_INT 22
17913: PUSH
17914: LD_VAR 0 1
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: LD_INT 3
17928: PUSH
17929: LD_INT 24
17931: PUSH
17932: LD_INT 550
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 24
17945: PUSH
17946: LD_INT 250
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17967: LD_ADDR_VAR 0 18
17971: PUSH
17972: LD_INT 22
17974: PUSH
17975: LD_VAR 0 1
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 2
17986: PUSH
17987: LD_INT 25
17989: PUSH
17990: LD_INT 1
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 25
17999: PUSH
18000: LD_INT 5
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 25
18009: PUSH
18010: LD_INT 8
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 25
18019: PUSH
18020: LD_INT 9
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: LIST
18031: LIST
18032: LIST
18033: PUSH
18034: LD_INT 24
18036: PUSH
18037: LD_INT 1000
18039: PUSH
18040: EMPTY
18041: LIST
18042: LIST
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: LIST
18048: PPUSH
18049: CALL_OW 69
18053: ST_TO_ADDR
// if medicCount > 0 then
18054: LD_VAR 0 7
18058: PUSH
18059: LD_INT 0
18061: GREATER
18062: IFFALSE 18136
// begin if damageUnit_list > 0 then
18064: LD_VAR 0 16
18068: PUSH
18069: LD_INT 0
18071: GREATER
18072: IFFALSE 18136
// begin for i in damageUnit_list do
18074: LD_ADDR_VAR 0 13
18078: PUSH
18079: LD_VAR 0 16
18083: PUSH
18084: FOR_IN
18085: IFFALSE 18134
// begin ComMoveToArea ( i , healArea ) ;
18087: LD_VAR 0 13
18091: PPUSH
18092: LD_VAR 0 10
18096: PPUSH
18097: CALL_OW 113
// for j in medic_list do
18101: LD_ADDR_VAR 0 14
18105: PUSH
18106: LD_VAR 0 17
18110: PUSH
18111: FOR_IN
18112: IFFALSE 18130
// AddComHeal ( j , i ) ;
18114: LD_VAR 0 14
18118: PPUSH
18119: LD_VAR 0 13
18123: PPUSH
18124: CALL_OW 188
18128: GO 18111
18130: POP
18131: POP
// end ;
18132: GO 18084
18134: POP
18135: POP
// end ; end ; for i in soldiersOK_list do
18136: LD_ADDR_VAR 0 13
18140: PUSH
18141: LD_VAR 0 18
18145: PUSH
18146: FOR_IN
18147: IFFALSE 18323
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18149: LD_ADDR_VAR 0 21
18153: PUSH
18154: LD_INT 22
18156: PUSH
18157: LD_VAR 0 11
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PPUSH
18166: CALL_OW 69
18170: PPUSH
18171: LD_VAR 0 13
18175: PPUSH
18176: CALL_OW 74
18180: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18181: LD_ADDR_VAR 0 22
18185: PUSH
18186: LD_INT 22
18188: PUSH
18189: LD_VAR 0 11
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: LD_INT 2
18200: PUSH
18201: LD_INT 59
18203: PUSH
18204: EMPTY
18205: LIST
18206: PUSH
18207: LD_INT 21
18209: PUSH
18210: LD_INT 1
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 21
18219: PUSH
18220: LD_INT 2
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PUSH
18237: EMPTY
18238: LIST
18239: PPUSH
18240: CALL_OW 69
18244: PPUSH
18245: LD_VAR 0 13
18249: PPUSH
18250: CALL_OW 74
18254: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18255: LD_VAR 0 13
18259: PPUSH
18260: LD_VAR 0 21
18264: PPUSH
18265: CALL_OW 296
18269: PUSH
18270: LD_INT 8
18272: PLUS
18273: PUSH
18274: LD_VAR 0 13
18278: PPUSH
18279: LD_VAR 0 22
18283: PPUSH
18284: CALL_OW 296
18288: LESS
18289: IFFALSE 18307
// begin ComAttackUnit ( i , target1 ) ;
18291: LD_VAR 0 13
18295: PPUSH
18296: LD_VAR 0 21
18300: PPUSH
18301: CALL_OW 115
// end else
18305: GO 18321
// begin ComAttackUnit ( i , target2 ) ;
18307: LD_VAR 0 13
18311: PPUSH
18312: LD_VAR 0 22
18316: PPUSH
18317: CALL_OW 115
// end ; end ;
18321: GO 18146
18323: POP
18324: POP
// for i in soldiersOK_list do
18325: LD_ADDR_VAR 0 13
18329: PUSH
18330: LD_VAR 0 18
18334: PUSH
18335: FOR_IN
18336: IFFALSE 18512
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18338: LD_ADDR_VAR 0 21
18342: PUSH
18343: LD_INT 22
18345: PUSH
18346: LD_VAR 0 11
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PPUSH
18355: CALL_OW 69
18359: PPUSH
18360: LD_VAR 0 13
18364: PPUSH
18365: CALL_OW 74
18369: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18370: LD_ADDR_VAR 0 22
18374: PUSH
18375: LD_INT 22
18377: PUSH
18378: LD_VAR 0 11
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: LD_INT 2
18389: PUSH
18390: LD_INT 59
18392: PUSH
18393: EMPTY
18394: LIST
18395: PUSH
18396: LD_INT 21
18398: PUSH
18399: LD_INT 1
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: LD_INT 21
18408: PUSH
18409: LD_INT 2
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: EMPTY
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: PPUSH
18434: LD_VAR 0 13
18438: PPUSH
18439: CALL_OW 74
18443: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18444: LD_VAR 0 13
18448: PPUSH
18449: LD_VAR 0 21
18453: PPUSH
18454: CALL_OW 296
18458: PUSH
18459: LD_INT 8
18461: PLUS
18462: PUSH
18463: LD_VAR 0 13
18467: PPUSH
18468: LD_VAR 0 22
18472: PPUSH
18473: CALL_OW 296
18477: LESS
18478: IFFALSE 18496
// begin ComAttackUnit ( i , target1 ) ;
18480: LD_VAR 0 13
18484: PPUSH
18485: LD_VAR 0 21
18489: PPUSH
18490: CALL_OW 115
// end else
18494: GO 18510
// begin ComAttackUnit ( i , target2 ) ;
18496: LD_VAR 0 13
18500: PPUSH
18501: LD_VAR 0 22
18505: PPUSH
18506: CALL_OW 115
// end ; end ;
18510: GO 18335
18512: POP
18513: POP
// until soldiersOK_list = [ ] ;
18514: LD_VAR 0 18
18518: PUSH
18519: EMPTY
18520: EQUAL
18521: IFFALSE 17899
// end ;
18523: LD_VAR 0 12
18527: RET
// export function TameApemans ; var i , j ; begin
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
18532: PPUSH
// repeat wait ( 0 0$1 ) ;
18533: LD_INT 35
18535: PPUSH
18536: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_INT 2
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: LD_INT 25
18557: PUSH
18558: LD_INT 4
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: PPUSH
18569: CALL_OW 69
18573: PUSH
18574: FOR_IN
18575: IFFALSE 18652
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18577: LD_ADDR_VAR 0 3
18581: PUSH
18582: LD_INT 5
18584: PPUSH
18585: LD_INT 22
18587: PUSH
18588: LD_INT 0
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 25
18597: PUSH
18598: LD_INT 12
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 70
18613: PUSH
18614: FOR_IN
18615: IFFALSE 18648
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18617: LD_VAR 0 2
18621: PPUSH
18622: LD_VAR 0 3
18626: PPUSH
18627: CALL_OW 250
18631: PPUSH
18632: LD_VAR 0 3
18636: PPUSH
18637: CALL_OW 251
18641: PPUSH
18642: CALL_OW 191
// end ;
18646: GO 18614
18648: POP
18649: POP
// end ;
18650: GO 18574
18652: POP
18653: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18654: LD_INT 22
18656: PUSH
18657: LD_INT 2
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 25
18666: PUSH
18667: LD_INT 4
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: PUSH
18683: LD_INT 0
18685: EQUAL
18686: PUSH
18687: LD_INT 5
18689: PPUSH
18690: LD_INT 22
18692: PUSH
18693: LD_INT 0
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 25
18702: PUSH
18703: LD_INT 12
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 70
18718: PUSH
18719: LD_INT 0
18721: EQUAL
18722: OR
18723: IFFALSE 18533
// wait ( 0 0$30 ) ;
18725: LD_INT 1050
18727: PPUSH
18728: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18732: LD_ADDR_VAR 0 2
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 25
18749: PUSH
18750: LD_INT 12
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PPUSH
18761: CALL_OW 69
18765: PUSH
18766: FOR_IN
18767: IFFALSE 18831
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: LD_EXP 43
18778: PPUSH
18779: CALL_OW 250
18783: PPUSH
18784: LD_EXP 43
18788: PPUSH
18789: CALL_OW 251
18793: PPUSH
18794: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18798: LD_VAR 0 2
18802: PPUSH
18803: LD_INT 16
18805: PUSH
18806: LD_INT 15
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PUSH
18813: LD_INT 1
18815: PPUSH
18816: LD_INT 2
18818: PPUSH
18819: CALL_OW 12
18823: ARRAY
18824: PPUSH
18825: CALL_OW 336
// end ;
18829: GO 18766
18831: POP
18832: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 22
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: PUSH
18848: LD_INT 25
18850: PUSH
18851: LD_INT 4
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: CALL_OW 69
18866: PUSH
18867: FOR_IN
18868: IFFALSE 18914
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18870: LD_VAR 0 2
18874: PPUSH
18875: LD_INT 22
18877: PUSH
18878: LD_INT 2
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 30
18887: PUSH
18888: LD_INT 8
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PPUSH
18899: CALL_OW 69
18903: PUSH
18904: LD_INT 1
18906: ARRAY
18907: PPUSH
18908: CALL_OW 120
18912: GO 18867
18914: POP
18915: POP
// end ;
18916: LD_VAR 0 1
18920: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18921: LD_INT 0
18923: PPUSH
18924: PPUSH
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18932: LD_INT 22
18934: PUSH
18935: LD_VAR 0 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 21
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PPUSH
18958: CALL_OW 69
18962: PUSH
18963: LD_VAR 0 3
18967: LESSEQUAL
18968: IFFALSE 19112
// for i = 1 to vehCount do
18970: LD_ADDR_VAR 0 10
18974: PUSH
18975: DOUBLE
18976: LD_INT 1
18978: DEC
18979: ST_TO_ADDR
18980: LD_VAR 0 3
18984: PUSH
18985: FOR_TO
18986: IFFALSE 19110
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18988: LD_ADDR_VAR 0 12
18992: PUSH
18993: LD_VAR 0 5
18997: PUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_VAR 0 5
19005: PPUSH
19006: CALL_OW 12
19010: ARRAY
19011: ST_TO_ADDR
// if randWeapon = 46 then
19012: LD_VAR 0 12
19016: PUSH
19017: LD_INT 46
19019: EQUAL
19020: IFFALSE 19065
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19022: LD_VAR 0 2
19026: PPUSH
19027: LD_INT 24
19029: PPUSH
19030: LD_VAR 0 6
19034: PPUSH
19035: LD_VAR 0 7
19039: PUSH
19040: LD_INT 1
19042: PPUSH
19043: LD_VAR 0 7
19047: PPUSH
19048: CALL_OW 12
19052: ARRAY
19053: PPUSH
19054: LD_VAR 0 12
19058: PPUSH
19059: CALL_OW 185
19063: GO 19108
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19065: LD_VAR 0 2
19069: PPUSH
19070: LD_VAR 0 8
19074: PPUSH
19075: LD_VAR 0 6
19079: PPUSH
19080: LD_VAR 0 7
19084: PUSH
19085: LD_INT 1
19087: PPUSH
19088: LD_VAR 0 7
19092: PPUSH
19093: CALL_OW 12
19097: ARRAY
19098: PPUSH
19099: LD_VAR 0 12
19103: PPUSH
19104: CALL_OW 185
// end ;
19108: GO 18985
19110: POP
19111: POP
// repeat wait ( 0 0$1 ) ;
19112: LD_INT 35
19114: PPUSH
19115: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19119: LD_INT 22
19121: PUSH
19122: LD_VAR 0 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 21
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 24
19143: PUSH
19144: LD_INT 250
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PPUSH
19156: CALL_OW 69
19160: PUSH
19161: LD_VAR 0 3
19165: GREATEREQUAL
19166: IFFALSE 19112
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19168: LD_INT 22
19170: PUSH
19171: LD_VAR 0 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 21
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 24
19192: PUSH
19193: LD_INT 250
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: PPUSH
19205: CALL_OW 69
19209: PUSH
19210: LD_VAR 0 3
19214: GREATEREQUAL
19215: IFFALSE 19558
// begin repeat begin wait ( 0 0$1 ) ;
19217: LD_INT 35
19219: PPUSH
19220: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19224: LD_INT 22
19226: PUSH
19227: LD_VAR 0 1
19231: PUSH
19232: EMPTY
19233: LIST
19234: LIST
19235: PUSH
19236: LD_INT 21
19238: PUSH
19239: LD_INT 2
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 24
19248: PUSH
19249: LD_INT 651
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: PPUSH
19261: CALL_OW 69
19265: PUSH
19266: LD_INT 0
19268: GREATER
19269: IFFALSE 19497
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19271: LD_ADDR_VAR 0 10
19275: PUSH
19276: LD_INT 22
19278: PUSH
19279: LD_VAR 0 1
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: PUSH
19288: LD_INT 21
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 24
19300: PUSH
19301: LD_INT 651
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: LIST
19312: PPUSH
19313: CALL_OW 69
19317: PUSH
19318: FOR_IN
19319: IFFALSE 19495
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19321: LD_ADDR_VAR 0 16
19325: PUSH
19326: LD_INT 22
19328: PUSH
19329: LD_VAR 0 4
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PPUSH
19338: CALL_OW 69
19342: PPUSH
19343: LD_VAR 0 10
19347: PPUSH
19348: CALL_OW 74
19352: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19353: LD_ADDR_VAR 0 17
19357: PUSH
19358: LD_INT 22
19360: PUSH
19361: LD_VAR 0 4
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: LD_INT 2
19372: PUSH
19373: LD_INT 59
19375: PUSH
19376: EMPTY
19377: LIST
19378: PUSH
19379: LD_INT 21
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: EMPTY
19386: LIST
19387: LIST
19388: PUSH
19389: LD_INT 21
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: PUSH
19405: EMPTY
19406: LIST
19407: LIST
19408: PUSH
19409: EMPTY
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: PPUSH
19417: LD_VAR 0 10
19421: PPUSH
19422: CALL_OW 74
19426: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19427: LD_VAR 0 10
19431: PPUSH
19432: LD_VAR 0 16
19436: PPUSH
19437: CALL_OW 296
19441: PUSH
19442: LD_INT 8
19444: PLUS
19445: PUSH
19446: LD_VAR 0 10
19450: PPUSH
19451: LD_VAR 0 17
19455: PPUSH
19456: CALL_OW 296
19460: LESS
19461: IFFALSE 19479
// begin ComAttackUnit ( i , target1 ) ;
19463: LD_VAR 0 10
19467: PPUSH
19468: LD_VAR 0 16
19472: PPUSH
19473: CALL_OW 115
// end else
19477: GO 19493
// begin ComAttackUnit ( i , target2 ) ;
19479: LD_VAR 0 10
19483: PPUSH
19484: LD_VAR 0 17
19488: PPUSH
19489: CALL_OW 115
// end ; end ;
19493: GO 19318
19495: POP
19496: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19497: LD_INT 22
19499: PUSH
19500: LD_VAR 0 1
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: PUSH
19509: LD_INT 21
19511: PUSH
19512: LD_INT 2
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: PPUSH
19523: CALL_OW 69
19527: PUSH
19528: LD_INT 0
19530: EQUAL
19531: PUSH
19532: LD_INT 22
19534: PUSH
19535: LD_VAR 0 4
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: PUSH
19552: LD_INT 0
19554: EQUAL
19555: OR
19556: IFFALSE 19217
// end ; end ;
19558: LD_VAR 0 9
19562: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19563: LD_INT 0
19565: PPUSH
19566: PPUSH
19567: PPUSH
19568: PPUSH
// r := 100 ;
19569: LD_ADDR_VAR 0 5
19573: PUSH
19574: LD_INT 100
19576: ST_TO_ADDR
// x := 0 ;
19577: LD_ADDR_VAR 0 6
19581: PUSH
19582: LD_INT 0
19584: ST_TO_ADDR
// while ( x < n ) do
19585: LD_VAR 0 6
19589: PUSH
19590: LD_VAR 0 2
19594: LESS
19595: IFFALSE 19882
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19597: LD_ADDR_VAR 0 4
19601: PUSH
19602: DOUBLE
19603: LD_INT 1
19605: DEC
19606: ST_TO_ADDR
19607: LD_VAR 0 1
19611: PPUSH
19612: LD_INT 0
19614: PPUSH
19615: CALL_OW 517
19619: PUSH
19620: LD_INT 1
19622: ARRAY
19623: PUSH
19624: FOR_TO
19625: IFFALSE 19878
// begin if r > 50 then
19627: LD_VAR 0 5
19631: PUSH
19632: LD_INT 50
19634: GREATER
19635: IFFALSE 19854
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19637: LD_VAR 0 1
19641: PPUSH
19642: LD_INT 0
19644: PPUSH
19645: CALL_OW 517
19649: PUSH
19650: LD_INT 1
19652: ARRAY
19653: PUSH
19654: LD_VAR 0 4
19658: ARRAY
19659: PPUSH
19660: LD_VAR 0 1
19664: PPUSH
19665: LD_INT 0
19667: PPUSH
19668: CALL_OW 517
19672: PUSH
19673: LD_INT 2
19675: ARRAY
19676: PUSH
19677: LD_VAR 0 4
19681: ARRAY
19682: PPUSH
19683: CALL_OW 458
19687: NOT
19688: IFFALSE 19838
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19690: LD_VAR 0 1
19694: PPUSH
19695: LD_INT 0
19697: PPUSH
19698: CALL_OW 517
19702: PUSH
19703: LD_INT 1
19705: ARRAY
19706: PUSH
19707: LD_VAR 0 4
19711: ARRAY
19712: PPUSH
19713: LD_VAR 0 1
19717: PPUSH
19718: LD_INT 0
19720: PPUSH
19721: CALL_OW 517
19725: PUSH
19726: LD_INT 2
19728: ARRAY
19729: PUSH
19730: LD_VAR 0 4
19734: ARRAY
19735: PPUSH
19736: LD_INT 5
19738: PPUSH
19739: LD_INT 0
19741: PPUSH
19742: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19746: LD_ADDR_EXP 50
19750: PUSH
19751: LD_EXP 50
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_VAR 0 1
19763: PPUSH
19764: LD_INT 0
19766: PPUSH
19767: CALL_OW 517
19771: PUSH
19772: LD_INT 1
19774: ARRAY
19775: PUSH
19776: LD_VAR 0 4
19780: ARRAY
19781: PUSH
19782: LD_VAR 0 1
19786: PPUSH
19787: LD_INT 0
19789: PPUSH
19790: CALL_OW 517
19794: PUSH
19795: LD_INT 2
19797: ARRAY
19798: PUSH
19799: LD_VAR 0 4
19803: ARRAY
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PPUSH
19809: CALL_OW 2
19813: ST_TO_ADDR
// r := 0 ;
19814: LD_ADDR_VAR 0 5
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// x := x + 1 ;
19822: LD_ADDR_VAR 0 6
19826: PUSH
19827: LD_VAR 0 6
19831: PUSH
19832: LD_INT 1
19834: PLUS
19835: ST_TO_ADDR
// end else
19836: GO 19852
// r := r + 35 ;
19838: LD_ADDR_VAR 0 5
19842: PUSH
19843: LD_VAR 0 5
19847: PUSH
19848: LD_INT 35
19850: PLUS
19851: ST_TO_ADDR
// end else
19852: GO 19876
// r := r + rand ( 10 , 25 ) ;
19854: LD_ADDR_VAR 0 5
19858: PUSH
19859: LD_VAR 0 5
19863: PUSH
19864: LD_INT 10
19866: PPUSH
19867: LD_INT 25
19869: PPUSH
19870: CALL_OW 12
19874: PLUS
19875: ST_TO_ADDR
// end ;
19876: GO 19624
19878: POP
19879: POP
19880: GO 19585
// end ; end_of_file
19882: LD_VAR 0 3
19886: RET
// every 0 0$1 trigger russianAI = 1 do
19887: LD_EXP 39
19891: PUSH
19892: LD_INT 1
19894: EQUAL
19895: IFFALSE 20114
19897: GO 19899
19899: DISABLE
// begin enable ;
19900: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19901: LD_INT 3
19903: PPUSH
19904: LD_EXP 30
19908: PPUSH
19909: CALL 14525 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19913: LD_INT 3
19915: PPUSH
19916: LD_EXP 42
19920: PPUSH
19921: CALL 14885 0 2
// if ruPossition = 1 then
19925: LD_EXP 41
19929: PUSH
19930: LD_INT 1
19932: EQUAL
19933: IFFALSE 19988
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19935: LD_INT 3
19937: PPUSH
19938: LD_INT 13
19940: PPUSH
19941: LD_INT 10
19943: PPUSH
19944: LD_INT 22
19946: PUSH
19947: LD_INT 3
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 21
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 30
19966: PUSH
19967: LD_INT 8
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: LIST
19978: PPUSH
19979: CALL_OW 69
19983: PPUSH
19984: CALL 15091 0 4
// if ruPossition = 2 then
19988: LD_EXP 41
19992: PUSH
19993: LD_INT 2
19995: EQUAL
19996: IFFALSE 20051
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19998: LD_INT 3
20000: PPUSH
20001: LD_INT 14
20003: PPUSH
20004: LD_INT 11
20006: PPUSH
20007: LD_INT 22
20009: PUSH
20010: LD_INT 3
20012: PUSH
20013: EMPTY
20014: LIST
20015: LIST
20016: PUSH
20017: LD_INT 21
20019: PUSH
20020: LD_INT 3
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PUSH
20027: LD_INT 30
20029: PUSH
20030: LD_INT 8
20032: PUSH
20033: EMPTY
20034: LIST
20035: LIST
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: LIST
20041: PPUSH
20042: CALL_OW 69
20046: PPUSH
20047: CALL 15091 0 4
// if ruPossition = 3 then
20051: LD_EXP 41
20055: PUSH
20056: LD_INT 3
20058: EQUAL
20059: IFFALSE 20114
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20061: LD_INT 3
20063: PPUSH
20064: LD_INT 15
20066: PPUSH
20067: LD_INT 12
20069: PPUSH
20070: LD_INT 22
20072: PUSH
20073: LD_INT 3
20075: PUSH
20076: EMPTY
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 21
20082: PUSH
20083: LD_INT 3
20085: PUSH
20086: EMPTY
20087: LIST
20088: LIST
20089: PUSH
20090: LD_INT 30
20092: PUSH
20093: LD_INT 8
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: PPUSH
20110: CALL 15091 0 4
// end ;
20114: END
// every 0 0$1 do
20115: GO 20117
20117: DISABLE
// begin enable ;
20118: ENABLE
// if ruPossition = 1 then
20119: LD_EXP 41
20123: PUSH
20124: LD_INT 1
20126: EQUAL
20127: IFFALSE 20139
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20129: LD_INT 3
20131: PPUSH
20132: LD_INT 10
20134: PPUSH
20135: CALL 14162 0 2
// if ruPossition = 2 then
20139: LD_EXP 41
20143: PUSH
20144: LD_INT 2
20146: EQUAL
20147: IFFALSE 20159
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20149: LD_INT 3
20151: PPUSH
20152: LD_INT 11
20154: PPUSH
20155: CALL 14162 0 2
// if ruPossition = 3 then
20159: LD_EXP 41
20163: PUSH
20164: LD_INT 3
20166: EQUAL
20167: IFFALSE 20179
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20169: LD_INT 3
20171: PPUSH
20172: LD_INT 12
20174: PPUSH
20175: CALL 14162 0 2
// IntBazooka ( 3 , 1 ) ;
20179: LD_INT 3
20181: PPUSH
20182: LD_INT 1
20184: PPUSH
20185: CALL 12961 0 2
// IntBazooka ( 6 , 1 ) ;
20189: LD_INT 6
20191: PPUSH
20192: LD_INT 1
20194: PPUSH
20195: CALL 12961 0 2
// end ;
20199: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20200: LD_EXP 39
20204: PUSH
20205: LD_INT 1
20207: EQUAL
20208: PUSH
20209: LD_EXP 35
20213: PPUSH
20214: CALL_OW 302
20218: AND
20219: PUSH
20220: LD_EXP 35
20224: PPUSH
20225: CALL_OW 255
20229: PUSH
20230: LD_INT 3
20232: EQUAL
20233: AND
20234: PUSH
20235: LD_INT 22
20237: PUSH
20238: LD_INT 3
20240: PUSH
20241: EMPTY
20242: LIST
20243: LIST
20244: PUSH
20245: LD_INT 21
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 33
20257: PUSH
20258: LD_INT 3
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: LIST
20269: PPUSH
20270: CALL_OW 69
20274: PUSH
20275: LD_INT 0
20277: EQUAL
20278: AND
20279: IFFALSE 20487
20281: GO 20283
20283: DISABLE
// begin enable ;
20284: ENABLE
// if Difficulty = 1 then
20285: LD_OWVAR 67
20289: PUSH
20290: LD_INT 1
20292: EQUAL
20293: IFFALSE 20355
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20295: LD_INT 3
20297: PPUSH
20298: LD_EXP 35
20302: PPUSH
20303: LD_INT 5
20305: PPUSH
20306: LD_INT 8
20308: PPUSH
20309: CALL_OW 12
20313: PPUSH
20314: LD_INT 1
20316: PPUSH
20317: LD_INT 43
20319: PUSH
20320: LD_INT 44
20322: PUSH
20323: LD_INT 45
20325: PUSH
20326: LD_INT 46
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: LIST
20333: LIST
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: LD_INT 1
20340: PUSH
20341: LD_INT 3
20343: PUSH
20344: EMPTY
20345: LIST
20346: LIST
20347: PPUSH
20348: LD_INT 22
20350: PPUSH
20351: CALL 18921 0 8
// if Difficulty = 2 then
20355: LD_OWVAR 67
20359: PUSH
20360: LD_INT 2
20362: EQUAL
20363: IFFALSE 20421
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20365: LD_INT 3
20367: PPUSH
20368: LD_EXP 35
20372: PPUSH
20373: LD_INT 6
20375: PPUSH
20376: LD_INT 8
20378: PPUSH
20379: CALL_OW 12
20383: PPUSH
20384: LD_INT 1
20386: PPUSH
20387: LD_INT 44
20389: PUSH
20390: LD_INT 45
20392: PUSH
20393: LD_INT 46
20395: PUSH
20396: EMPTY
20397: LIST
20398: LIST
20399: LIST
20400: PPUSH
20401: LD_INT 1
20403: PPUSH
20404: LD_INT 1
20406: PUSH
20407: LD_INT 3
20409: PUSH
20410: EMPTY
20411: LIST
20412: LIST
20413: PPUSH
20414: LD_INT 22
20416: PPUSH
20417: CALL 18921 0 8
// if Difficulty = 3 then
20421: LD_OWVAR 67
20425: PUSH
20426: LD_INT 3
20428: EQUAL
20429: IFFALSE 20487
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20431: LD_INT 3
20433: PPUSH
20434: LD_EXP 35
20438: PPUSH
20439: LD_INT 7
20441: PPUSH
20442: LD_INT 8
20444: PPUSH
20445: CALL_OW 12
20449: PPUSH
20450: LD_INT 1
20452: PPUSH
20453: LD_INT 44
20455: PUSH
20456: LD_INT 45
20458: PUSH
20459: LD_INT 46
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: LIST
20466: PPUSH
20467: LD_INT 1
20469: PPUSH
20470: LD_INT 1
20472: PUSH
20473: LD_INT 3
20475: PUSH
20476: EMPTY
20477: LIST
20478: LIST
20479: PPUSH
20480: LD_INT 22
20482: PPUSH
20483: CALL 18921 0 8
// end ;
20487: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20488: LD_EXP 50
20492: PUSH
20493: LD_EXP 49
20497: AND
20498: IFFALSE 20619
20500: GO 20502
20502: DISABLE
20503: LD_INT 0
20505: PPUSH
// begin enable ;
20506: ENABLE
// for i in arabianMines do
20507: LD_ADDR_VAR 0 1
20511: PUSH
20512: LD_EXP 50
20516: PUSH
20517: FOR_IN
20518: IFFALSE 20617
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20520: LD_INT 22
20522: PUSH
20523: LD_INT 1
20525: PUSH
20526: EMPTY
20527: LIST
20528: LIST
20529: PUSH
20530: LD_INT 92
20532: PUSH
20533: LD_VAR 0 1
20537: PUSH
20538: LD_INT 1
20540: ARRAY
20541: PUSH
20542: LD_VAR 0 1
20546: PUSH
20547: LD_INT 2
20549: ARRAY
20550: PUSH
20551: LD_INT 3
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PPUSH
20564: CALL_OW 69
20568: IFFALSE 20615
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20570: LD_VAR 0 1
20574: PUSH
20575: LD_INT 1
20577: ARRAY
20578: PPUSH
20579: LD_VAR 0 1
20583: PUSH
20584: LD_INT 2
20586: ARRAY
20587: PPUSH
20588: LD_INT 5
20590: PPUSH
20591: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20595: LD_ADDR_EXP 50
20599: PUSH
20600: LD_EXP 50
20604: PPUSH
20605: LD_VAR 0 1
20609: PPUSH
20610: CALL_OW 3
20614: ST_TO_ADDR
// end ; end ;
20615: GO 20517
20617: POP
20618: POP
// end ; end_of_file
20619: PPOPN 1
20621: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20622: LD_VAR 0 1
20626: PPUSH
20627: CALL_OW 255
20631: PUSH
20632: LD_INT 4
20634: EQUAL
20635: IFFALSE 20649
// SetBName ( building , epsilon ) ;
20637: LD_VAR 0 1
20641: PPUSH
20642: LD_STRING epsilon
20644: PPUSH
20645: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20649: LD_VAR 0 1
20653: PPUSH
20654: CALL_OW 255
20658: PUSH
20659: LD_INT 1
20661: EQUAL
20662: PUSH
20663: LD_VAR 0 1
20667: PPUSH
20668: CALL_OW 266
20672: PUSH
20673: LD_INT 0
20675: EQUAL
20676: AND
20677: IFFALSE 20691
// SetBName ( building , epsilon ) ;
20679: LD_VAR 0 1
20683: PPUSH
20684: LD_STRING epsilon
20686: PPUSH
20687: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20691: LD_VAR 0 1
20695: PPUSH
20696: CALL_OW 255
20700: PUSH
20701: LD_INT 3
20703: EQUAL
20704: PUSH
20705: LD_VAR 0 1
20709: PPUSH
20710: CALL_OW 266
20714: PUSH
20715: LD_INT 0
20717: EQUAL
20718: AND
20719: IFFALSE 20733
// SetBName ( building , chuikov ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: LD_STRING chuikov
20728: PPUSH
20729: CALL_OW 500
// if GetSide ( building ) = 2 then
20733: LD_VAR 0 1
20737: PPUSH
20738: CALL_OW 255
20742: PUSH
20743: LD_INT 2
20745: EQUAL
20746: IFFALSE 20802
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 266
20757: PUSH
20758: LD_INT 6
20760: EQUAL
20761: PUSH
20762: LD_VAR 0 1
20766: PPUSH
20767: CALL_OW 266
20771: PUSH
20772: LD_INT 9
20774: EQUAL
20775: OR
20776: IFFALSE 20802
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20778: LD_VAR 0 1
20782: PPUSH
20783: LD_INT 10
20785: PPUSH
20786: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20790: LD_VAR 0 1
20794: PPUSH
20795: LD_INT 11
20797: PPUSH
20798: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20802: LD_VAR 0 1
20806: PPUSH
20807: CALL_OW 255
20811: PUSH
20812: LD_INT 3
20814: EQUAL
20815: IFFALSE 20841
// begin if GetBType ( building ) = 2 then
20817: LD_VAR 0 1
20821: PPUSH
20822: CALL_OW 266
20826: PUSH
20827: LD_INT 2
20829: EQUAL
20830: IFFALSE 20841
// AddComUpgrade ( building ) ;
20832: LD_VAR 0 1
20836: PPUSH
20837: CALL_OW 206
// end ; end ;
20841: PPOPN 2
20843: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20844: LD_INT 0
20846: PPUSH
20847: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20848: LD_VAR 0 1
20852: PUSH
20853: LD_INT 22
20855: PUSH
20856: LD_INT 3
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: PUSH
20863: LD_INT 23
20865: PUSH
20866: LD_INT 3
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 21
20875: PUSH
20876: LD_INT 2
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: LIST
20887: PPUSH
20888: CALL_OW 69
20892: IN
20893: PUSH
20894: LD_EXP 58
20898: NOT
20899: AND
20900: IFFALSE 20931
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20902: LD_ADDR_EXP 58
20906: PUSH
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 250
20916: PUSH
20917: LD_VAR 0 1
20921: PPUSH
20922: CALL_OW 251
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: ST_TO_ADDR
// end ;
20931: PPOPN 3
20933: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20934: LD_VAR 0 2
20938: PPUSH
20939: CALL_OW 255
20943: PUSH
20944: LD_INT 3
20946: EQUAL
20947: PUSH
20948: LD_EXP 35
20952: PPUSH
20953: CALL_OW 255
20957: PUSH
20958: LD_INT 3
20960: EQUAL
20961: AND
20962: PUSH
20963: LD_EXP 35
20967: PPUSH
20968: CALL_OW 302
20972: AND
20973: IFFALSE 20989
// ComEnterUnit ( human , ruFab ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: LD_EXP 35
20984: PPUSH
20985: CALL_OW 120
// end ;
20989: PPOPN 2
20991: END
// on BuildingComplete ( building ) do var i ;
20992: LD_INT 0
20994: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
20995: LD_VAR 0 1
20999: PPUSH
21000: CALL_OW 255
21004: PUSH
21005: LD_INT 1
21007: EQUAL
21008: PUSH
21009: LD_EXP 61
21013: PUSH
21014: LD_INT 0
21016: EQUAL
21017: AND
21018: IFFALSE 21220
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21020: LD_VAR 0 1
21024: PPUSH
21025: CALL_OW 266
21029: PUSH
21030: LD_INT 26
21032: EQUAL
21033: PUSH
21034: LD_VAR 0 1
21038: PPUSH
21039: CALL_OW 266
21043: PUSH
21044: LD_INT 27
21046: EQUAL
21047: OR
21048: PUSH
21049: LD_VAR 0 1
21053: PPUSH
21054: CALL_OW 266
21058: PUSH
21059: LD_INT 28
21061: EQUAL
21062: OR
21063: IFFALSE 21220
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21065: LD_INT 22
21067: PUSH
21068: LD_INT 1
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: LD_INT 2
21077: PUSH
21078: LD_INT 30
21080: PUSH
21081: LD_INT 7
21083: PUSH
21084: EMPTY
21085: LIST
21086: LIST
21087: PUSH
21088: LD_INT 30
21090: PUSH
21091: LD_INT 8
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: LIST
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PPUSH
21107: CALL_OW 69
21111: PUSH
21112: LD_INT 0
21114: GREATER
21115: IFFALSE 21220
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21117: LD_ADDR_VAR 0 2
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_INT 1
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: LD_INT 2
21134: PUSH
21135: LD_INT 30
21137: PUSH
21138: LD_INT 7
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 30
21147: PUSH
21148: LD_INT 8
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: EMPTY
21156: LIST
21157: LIST
21158: LIST
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: PPUSH
21164: CALL_OW 69
21168: PUSH
21169: FOR_IN
21170: IFFALSE 21218
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21172: LD_VAR 0 2
21176: PPUSH
21177: LD_INT 1
21179: PPUSH
21180: CALL_OW 268
21184: PUSH
21185: LD_INT 11
21187: EQUAL
21188: PUSH
21189: LD_VAR 0 2
21193: PPUSH
21194: LD_INT 2
21196: PPUSH
21197: CALL_OW 268
21201: PUSH
21202: LD_INT 11
21204: EQUAL
21205: OR
21206: IFFALSE 21216
// eventVar1 = 1 ;
21208: LD_ADDR_EXP 61
21212: PUSH
21213: LD_INT 1
21215: ST_TO_ADDR
21216: GO 21169
21218: POP
21219: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21220: LD_VAR 0 1
21224: PPUSH
21225: CALL_OW 255
21229: PUSH
21230: LD_INT 3
21232: EQUAL
21233: IFFALSE 21713
// begin if GetBType ( building ) = b_depot then
21235: LD_VAR 0 1
21239: PPUSH
21240: CALL_OW 266
21244: PUSH
21245: LD_INT 0
21247: EQUAL
21248: IFFALSE 21320
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21250: LD_VAR 0 1
21254: PPUSH
21255: CALL_OW 274
21259: PPUSH
21260: LD_INT 1
21262: PPUSH
21263: LD_INT 5000
21265: PPUSH
21266: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21270: LD_VAR 0 1
21274: PPUSH
21275: CALL_OW 274
21279: PPUSH
21280: LD_INT 2
21282: PPUSH
21283: LD_INT 5000
21285: PPUSH
21286: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21290: LD_VAR 0 1
21294: PPUSH
21295: CALL_OW 274
21299: PPUSH
21300: LD_INT 3
21302: PPUSH
21303: LD_INT 5000
21305: PPUSH
21306: CALL_OW 277
// ruDepot = building ;
21310: LD_ADDR_EXP 30
21314: PUSH
21315: LD_VAR 0 1
21319: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21320: LD_VAR 0 1
21324: PPUSH
21325: CALL_OW 266
21329: PUSH
21330: LD_INT 0
21332: EQUAL
21333: PUSH
21334: LD_VAR 0 1
21338: PPUSH
21339: CALL_OW 266
21343: PUSH
21344: LD_INT 2
21346: EQUAL
21347: OR
21348: PUSH
21349: LD_VAR 0 1
21353: PPUSH
21354: CALL_OW 266
21358: PUSH
21359: LD_INT 4
21361: EQUAL
21362: OR
21363: IFFALSE 21374
// ComUpgrade ( building ) ;
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 146
// if GetBType ( building ) = b_lab then
21374: LD_VAR 0 1
21378: PPUSH
21379: CALL_OW 266
21383: PUSH
21384: LD_INT 6
21386: EQUAL
21387: IFFALSE 21590
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21389: LD_INT 22
21391: PUSH
21392: LD_INT 3
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 30
21401: PUSH
21402: LD_INT 8
21404: PUSH
21405: EMPTY
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PPUSH
21413: CALL_OW 69
21417: PUSH
21418: LD_INT 0
21420: EQUAL
21421: IFFALSE 21459
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21423: LD_VAR 0 1
21427: PPUSH
21428: LD_INT 10
21430: PPUSH
21431: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 12
21442: PPUSH
21443: CALL_OW 207
// ruLab1 = building ;
21447: LD_ADDR_EXP 31
21451: PUSH
21452: LD_VAR 0 1
21456: ST_TO_ADDR
// end else
21457: GO 21493
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21459: LD_VAR 0 1
21463: PPUSH
21464: LD_INT 11
21466: PPUSH
21467: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21471: LD_VAR 0 1
21475: PPUSH
21476: LD_INT 14
21478: PPUSH
21479: CALL_OW 207
// ruLab2 = building ;
21483: LD_ADDR_EXP 32
21487: PUSH
21488: LD_VAR 0 1
21492: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21493: LD_INT 3
21495: PPUSH
21496: LD_VAR 0 1
21500: PPUSH
21501: LD_INT 3
21503: PPUSH
21504: CALL 14077 0 3
// if ruDestroyedBuildings > 0 then
21508: LD_EXP 42
21512: PUSH
21513: LD_INT 0
21515: GREATER
21516: IFFALSE 21590
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21518: LD_ADDR_EXP 42
21522: PUSH
21523: LD_EXP 42
21527: PPUSH
21528: LD_INT 1
21530: PPUSH
21531: CALL_OW 3
21535: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21536: LD_ADDR_EXP 42
21540: PUSH
21541: LD_EXP 42
21545: PPUSH
21546: LD_INT 1
21548: PPUSH
21549: CALL_OW 3
21553: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21554: LD_ADDR_EXP 42
21558: PUSH
21559: LD_EXP 42
21563: PPUSH
21564: LD_INT 1
21566: PPUSH
21567: CALL_OW 3
21571: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21572: LD_ADDR_EXP 42
21576: PUSH
21577: LD_EXP 42
21581: PPUSH
21582: LD_INT 1
21584: PPUSH
21585: CALL_OW 3
21589: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 266
21599: PUSH
21600: LD_INT 32
21602: EQUAL
21603: IFFALSE 21640
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21605: LD_VAR 0 1
21609: PPUSH
21610: LD_INT 44
21612: PUSH
21613: LD_INT 45
21615: PUSH
21616: LD_INT 46
21618: PUSH
21619: EMPTY
21620: LIST
21621: LIST
21622: LIST
21623: PUSH
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: ARRAY
21635: PPUSH
21636: CALL_OW 208
// if GetBType ( building ) = b_turret then
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 266
21649: PUSH
21650: LD_INT 33
21652: EQUAL
21653: IFFALSE 21690
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21655: LD_VAR 0 1
21659: PPUSH
21660: LD_INT 44
21662: PUSH
21663: LD_INT 45
21665: PUSH
21666: LD_INT 46
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: PUSH
21674: LD_INT 1
21676: PPUSH
21677: LD_INT 3
21679: PPUSH
21680: CALL_OW 12
21684: ARRAY
21685: PPUSH
21686: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21690: LD_VAR 0 1
21694: PPUSH
21695: CALL_OW 266
21699: PUSH
21700: LD_INT 24
21702: EQUAL
21703: IFFALSE 21713
// russianAI = 1 ;
21705: LD_ADDR_EXP 39
21709: PUSH
21710: LD_INT 1
21712: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 255
21722: PUSH
21723: LD_INT 2
21725: EQUAL
21726: IFFALSE 22452
// begin if GetBType ( building ) = b_depot then
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 266
21737: PUSH
21738: LD_INT 0
21740: EQUAL
21741: IFFALSE 21827
// begin arDepot = building ;
21743: LD_ADDR_EXP 43
21747: PUSH
21748: LD_VAR 0 1
21752: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21753: LD_INT 38
21755: PUSH
21756: LD_INT 47
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PPUSH
21763: LD_INT 71
21765: PPUSH
21766: LD_INT 19
21768: PPUSH
21769: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21773: LD_VAR 0 1
21777: PPUSH
21778: CALL_OW 274
21782: PPUSH
21783: LD_INT 1
21785: PPUSH
21786: LD_INT 500
21788: PPUSH
21789: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21793: LD_VAR 0 1
21797: PPUSH
21798: CALL_OW 274
21802: PPUSH
21803: LD_INT 3
21805: PPUSH
21806: LD_INT 30
21808: PPUSH
21809: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21813: LD_EXP 26
21817: PPUSH
21818: LD_EXP 43
21822: PPUSH
21823: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21827: LD_VAR 0 1
21831: PPUSH
21832: CALL_OW 266
21836: PUSH
21837: LD_INT 6
21839: EQUAL
21840: PUSH
21841: LD_VAR 0 1
21845: PPUSH
21846: CALL_OW 266
21850: PUSH
21851: LD_INT 9
21853: EQUAL
21854: OR
21855: IFFALSE 21906
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21857: LD_VAR 0 1
21861: PPUSH
21862: LD_INT 10
21864: PPUSH
21865: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21869: LD_VAR 0 1
21873: PPUSH
21874: LD_INT 11
21876: PPUSH
21877: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21881: LD_INT 2
21883: PPUSH
21884: LD_VAR 0 1
21888: PPUSH
21889: LD_INT 2
21891: PPUSH
21892: CALL 14077 0 3
// arLab = building ;
21896: LD_ADDR_EXP 44
21900: PUSH
21901: LD_VAR 0 1
21905: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21906: LD_VAR 0 1
21910: PPUSH
21911: CALL_OW 266
21915: PUSH
21916: LD_INT 2
21918: EQUAL
21919: PUSH
21920: LD_VAR 0 1
21924: PPUSH
21925: CALL_OW 266
21929: PUSH
21930: LD_INT 4
21932: EQUAL
21933: OR
21934: IFFALSE 21945
// ComUpgrade ( building ) ;
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
21945: LD_VAR 0 1
21949: PPUSH
21950: CALL_OW 266
21954: PUSH
21955: LD_INT 27
21957: EQUAL
21958: IFFALSE 22452
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21960: LD_INT 22
21962: PUSH
21963: LD_INT 2
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 30
21972: PUSH
21973: LD_INT 27
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: PPUSH
21984: CALL_OW 69
21988: PUSH
21989: LD_INT 2
21991: EQUAL
21992: IFFALSE 22452
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
21994: LD_ADDR_VAR 0 2
21998: PUSH
21999: LD_INT 22
22001: PUSH
22002: LD_INT 2
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: PUSH
22009: LD_INT 21
22011: PUSH
22012: LD_INT 1
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 25
22021: PUSH
22022: LD_INT 2
22024: PUSH
22025: EMPTY
22026: LIST
22027: LIST
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: LIST
22033: PPUSH
22034: CALL_OW 69
22038: PUSH
22039: LD_INT 1
22041: ARRAY
22042: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22043: LD_VAR 0 2
22047: PPUSH
22048: LD_INT 92
22050: PPUSH
22051: LD_INT 34
22053: PPUSH
22054: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22058: LD_VAR 0 2
22062: PPUSH
22063: LD_INT 82
22065: PPUSH
22066: LD_INT 57
22068: PPUSH
22069: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22073: LD_VAR 0 2
22077: PPUSH
22078: LD_INT 36
22080: PPUSH
22081: LD_INT 28
22083: PPUSH
22084: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22088: LD_INT 22
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 21
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 25
22110: PUSH
22111: LD_INT 2
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: LIST
22122: PPUSH
22123: CALL_OW 69
22127: PPUSH
22128: LD_EXP 43
22132: PPUSH
22133: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22137: LD_INT 22
22139: PUSH
22140: LD_INT 2
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: LD_INT 25
22149: PUSH
22150: LD_INT 1
22152: PUSH
22153: EMPTY
22154: LIST
22155: LIST
22156: PUSH
22157: LD_INT 3
22159: PUSH
22160: LD_INT 54
22162: PUSH
22163: EMPTY
22164: LIST
22165: PUSH
22166: LD_INT 3
22168: PUSH
22169: LD_INT 60
22171: PUSH
22172: EMPTY
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: PPUSH
22189: CALL_OW 69
22193: PUSH
22194: LD_INT 1
22196: ARRAY
22197: PPUSH
22198: LD_INT 22
22200: PUSH
22201: LD_INT 2
22203: PUSH
22204: EMPTY
22205: LIST
22206: LIST
22207: PUSH
22208: LD_INT 30
22210: PUSH
22211: LD_INT 31
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 58
22220: PUSH
22221: EMPTY
22222: LIST
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: LIST
22228: PPUSH
22229: CALL_OW 69
22233: PUSH
22234: LD_INT 1
22236: ARRAY
22237: PPUSH
22238: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22242: LD_INT 22
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: LD_INT 25
22254: PUSH
22255: LD_INT 1
22257: PUSH
22258: EMPTY
22259: LIST
22260: LIST
22261: PUSH
22262: LD_INT 3
22264: PUSH
22265: LD_INT 54
22267: PUSH
22268: EMPTY
22269: LIST
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 60
22276: PUSH
22277: EMPTY
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: LIST
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: LIST
22293: PPUSH
22294: CALL_OW 69
22298: PUSH
22299: LD_INT 2
22301: ARRAY
22302: PPUSH
22303: LD_INT 22
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 30
22315: PUSH
22316: LD_INT 31
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 58
22325: PUSH
22326: EMPTY
22327: LIST
22328: PUSH
22329: EMPTY
22330: LIST
22331: LIST
22332: LIST
22333: PPUSH
22334: CALL_OW 69
22338: PUSH
22339: LD_INT 2
22341: ARRAY
22342: PPUSH
22343: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22347: LD_INT 22
22349: PUSH
22350: LD_INT 2
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 25
22359: PUSH
22360: LD_INT 1
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: LD_INT 54
22372: PUSH
22373: EMPTY
22374: LIST
22375: PUSH
22376: LD_INT 3
22378: PUSH
22379: LD_INT 60
22381: PUSH
22382: EMPTY
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: PPUSH
22399: CALL_OW 69
22403: PUSH
22404: LD_INT 3
22406: ARRAY
22407: PPUSH
22408: LD_INT 22
22410: PUSH
22411: LD_INT 2
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: PUSH
22418: LD_INT 30
22420: PUSH
22421: LD_INT 31
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 58
22430: PUSH
22431: EMPTY
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: PPUSH
22439: CALL_OW 69
22443: PUSH
22444: LD_INT 3
22446: ARRAY
22447: PPUSH
22448: CALL_OW 120
// end ; end ; end ;
22452: PPOPN 2
22454: END
// on UpgradeComplete ( building ) do var i ;
22455: LD_INT 0
22457: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22458: LD_VAR 0 1
22462: PPUSH
22463: CALL_OW 255
22467: PUSH
22468: LD_INT 1
22470: EQUAL
22471: PUSH
22472: LD_EXP 61
22476: PUSH
22477: LD_INT 0
22479: EQUAL
22480: AND
22481: IFFALSE 22679
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22483: LD_VAR 0 1
22487: PPUSH
22488: CALL_OW 266
22492: PUSH
22493: LD_INT 7
22495: EQUAL
22496: PUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL_OW 266
22506: PUSH
22507: LD_INT 8
22509: EQUAL
22510: OR
22511: IFFALSE 22679
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22513: LD_INT 22
22515: PUSH
22516: LD_INT 1
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 2
22525: PUSH
22526: LD_INT 30
22528: PUSH
22529: LD_INT 26
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 30
22538: PUSH
22539: LD_INT 27
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: LD_INT 30
22548: PUSH
22549: LD_INT 28
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PPUSH
22566: CALL_OW 69
22570: PUSH
22571: LD_INT 0
22573: GREATER
22574: IFFALSE 22679
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22576: LD_ADDR_VAR 0 2
22580: PUSH
22581: LD_INT 22
22583: PUSH
22584: LD_INT 1
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PUSH
22591: LD_INT 2
22593: PUSH
22594: LD_INT 30
22596: PUSH
22597: LD_INT 7
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PUSH
22604: LD_INT 30
22606: PUSH
22607: LD_INT 8
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: LIST
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PPUSH
22623: CALL_OW 69
22627: PUSH
22628: FOR_IN
22629: IFFALSE 22677
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22631: LD_VAR 0 2
22635: PPUSH
22636: LD_INT 1
22638: PPUSH
22639: CALL_OW 268
22643: PUSH
22644: LD_INT 11
22646: EQUAL
22647: PUSH
22648: LD_VAR 0 2
22652: PPUSH
22653: LD_INT 2
22655: PPUSH
22656: CALL_OW 268
22660: PUSH
22661: LD_INT 11
22663: EQUAL
22664: OR
22665: IFFALSE 22675
// eventVar1 = 1 ;
22667: LD_ADDR_EXP 61
22671: PUSH
22672: LD_INT 1
22674: ST_TO_ADDR
22675: GO 22628
22677: POP
22678: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22679: LD_VAR 0 1
22683: PPUSH
22684: CALL_OW 255
22688: PUSH
22689: LD_INT 2
22691: EQUAL
22692: IFFALSE 22797
// begin if GetBType ( building ) = b_barracks then
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 266
22703: PUSH
22704: LD_INT 5
22706: EQUAL
22707: IFFALSE 22797
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22709: LD_ADDR_VAR 0 2
22713: PUSH
22714: LD_INT 22
22716: PUSH
22717: LD_INT 2
22719: PUSH
22720: EMPTY
22721: LIST
22722: LIST
22723: PUSH
22724: LD_INT 25
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: LD_INT 54
22739: PUSH
22740: EMPTY
22741: LIST
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: LIST
22751: PPUSH
22752: CALL_OW 69
22756: PUSH
22757: LD_EXP 26
22761: PUSH
22762: EMPTY
22763: LIST
22764: DIFF
22765: PUSH
22766: FOR_IN
22767: IFFALSE 22785
// ComEnterUnit ( i , building ) ;
22769: LD_VAR 0 2
22773: PPUSH
22774: LD_VAR 0 1
22778: PPUSH
22779: CALL_OW 120
22783: GO 22766
22785: POP
22786: POP
// arArm = building ;
22787: LD_ADDR_EXP 45
22791: PUSH
22792: LD_VAR 0 1
22796: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22797: LD_VAR 0 1
22801: PPUSH
22802: CALL_OW 255
22806: PUSH
22807: LD_INT 3
22809: EQUAL
22810: IFFALSE 23283
// begin if GetBType ( building ) = b_factory then
22812: LD_VAR 0 1
22816: PPUSH
22817: CALL_OW 266
22821: PUSH
22822: LD_INT 3
22824: EQUAL
22825: IFFALSE 22892
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22827: LD_ADDR_VAR 0 2
22831: PUSH
22832: LD_INT 22
22834: PUSH
22835: LD_INT 3
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: LD_INT 25
22844: PUSH
22845: LD_INT 3
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PPUSH
22856: CALL_OW 69
22860: PUSH
22861: FOR_IN
22862: IFFALSE 22880
// ComEnterUnit ( i , building ) ;
22864: LD_VAR 0 2
22868: PPUSH
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 120
22878: GO 22861
22880: POP
22881: POP
// ruFab = building ;
22882: LD_ADDR_EXP 35
22886: PUSH
22887: LD_VAR 0 1
22891: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22892: LD_INT 22
22894: PUSH
22895: LD_INT 3
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: PUSH
22902: LD_INT 21
22904: PUSH
22905: LD_INT 3
22907: PUSH
22908: EMPTY
22909: LIST
22910: LIST
22911: PUSH
22912: LD_INT 30
22914: PUSH
22915: LD_INT 8
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: PUSH
22922: EMPTY
22923: LIST
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 69
22931: PUSH
22932: LD_INT 2
22934: EQUAL
22935: IFFALSE 23143
// begin for i = 1 to 2 do
22937: LD_ADDR_VAR 0 2
22941: PUSH
22942: DOUBLE
22943: LD_INT 1
22945: DEC
22946: ST_TO_ADDR
22947: LD_INT 2
22949: PUSH
22950: FOR_TO
22951: IFFALSE 23038
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22953: LD_INT 22
22955: PUSH
22956: LD_INT 3
22958: PUSH
22959: EMPTY
22960: LIST
22961: LIST
22962: PUSH
22963: LD_INT 25
22965: PUSH
22966: LD_INT 4
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PPUSH
22977: CALL_OW 69
22981: PUSH
22982: LD_VAR 0 2
22986: ARRAY
22987: PPUSH
22988: LD_INT 22
22990: PUSH
22991: LD_INT 3
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: PUSH
22998: LD_INT 21
23000: PUSH
23001: LD_INT 3
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: PUSH
23008: LD_INT 30
23010: PUSH
23011: LD_INT 8
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: LIST
23022: PPUSH
23023: CALL_OW 69
23027: PUSH
23028: LD_INT 1
23030: ARRAY
23031: PPUSH
23032: CALL_OW 120
23036: GO 22950
23038: POP
23039: POP
// for i = 3 to 4 do
23040: LD_ADDR_VAR 0 2
23044: PUSH
23045: DOUBLE
23046: LD_INT 3
23048: DEC
23049: ST_TO_ADDR
23050: LD_INT 4
23052: PUSH
23053: FOR_TO
23054: IFFALSE 23141
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23056: LD_INT 22
23058: PUSH
23059: LD_INT 3
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: LD_INT 25
23068: PUSH
23069: LD_INT 4
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PPUSH
23080: CALL_OW 69
23084: PUSH
23085: LD_VAR 0 2
23089: ARRAY
23090: PPUSH
23091: LD_INT 22
23093: PUSH
23094: LD_INT 3
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PUSH
23101: LD_INT 21
23103: PUSH
23104: LD_INT 3
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: PUSH
23111: LD_INT 30
23113: PUSH
23114: LD_INT 8
23116: PUSH
23117: EMPTY
23118: LIST
23119: LIST
23120: PUSH
23121: EMPTY
23122: LIST
23123: LIST
23124: LIST
23125: PPUSH
23126: CALL_OW 69
23130: PUSH
23131: LD_INT 2
23133: ARRAY
23134: PPUSH
23135: CALL_OW 120
23139: GO 23053
23141: POP
23142: POP
// end ; if GetBType ( building ) = b_barracks then
23143: LD_VAR 0 1
23147: PPUSH
23148: CALL_OW 266
23152: PUSH
23153: LD_INT 5
23155: EQUAL
23156: IFFALSE 23283
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23158: LD_ADDR_VAR 0 2
23162: PUSH
23163: LD_INT 22
23165: PUSH
23166: LD_INT 3
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PUSH
23173: LD_INT 25
23175: PUSH
23176: LD_INT 1
23178: PUSH
23179: EMPTY
23180: LIST
23181: LIST
23182: PUSH
23183: LD_INT 3
23185: PUSH
23186: LD_INT 54
23188: PUSH
23189: EMPTY
23190: LIST
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: PPUSH
23201: CALL_OW 69
23205: PUSH
23206: FOR_IN
23207: IFFALSE 23225
// ComEnterUnit ( i , building ) ;
23209: LD_VAR 0 2
23213: PPUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 120
23223: GO 23206
23225: POP
23226: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23227: LD_INT 22
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: EMPTY
23234: LIST
23235: LIST
23236: PUSH
23237: LD_INT 30
23239: PUSH
23240: LD_INT 5
23242: PUSH
23243: EMPTY
23244: LIST
23245: LIST
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PPUSH
23251: CALL_OW 69
23255: PUSH
23256: LD_INT 0
23258: EQUAL
23259: IFFALSE 23273
// ruArm1 = building else
23261: LD_ADDR_EXP 33
23265: PUSH
23266: LD_VAR 0 1
23270: ST_TO_ADDR
23271: GO 23283
// ruArm2 = building ;
23273: LD_ADDR_EXP 34
23277: PUSH
23278: LD_VAR 0 1
23282: ST_TO_ADDR
// end ; end ; end ;
23283: PPOPN 2
23285: END
// on EnterBuilding ( building , human ) do var rnd ;
23286: LD_INT 0
23288: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23289: LD_VAR 0 2
23293: PPUSH
23294: CALL_OW 255
23298: PUSH
23299: LD_INT 2
23301: EQUAL
23302: PUSH
23303: LD_VAR 0 2
23307: PPUSH
23308: CALL_OW 257
23312: PUSH
23313: LD_INT 1
23315: EQUAL
23316: AND
23317: PUSH
23318: LD_VAR 0 1
23322: PUSH
23323: LD_EXP 45
23327: EQUAL
23328: AND
23329: IFFALSE 23376
// begin wait ( 0 0$1 ) ;
23331: LD_INT 35
23333: PPUSH
23334: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23338: LD_ADDR_VAR 0 3
23342: PUSH
23343: LD_INT 1
23345: PPUSH
23346: LD_INT 100
23348: PPUSH
23349: CALL_OW 12
23353: ST_TO_ADDR
// if rnd > 50 then
23354: LD_VAR 0 3
23358: PUSH
23359: LD_INT 50
23361: GREATER
23362: IFFALSE 23376
// SetClass ( human , class_mortar ) ;
23364: LD_VAR 0 2
23368: PPUSH
23369: LD_INT 8
23371: PPUSH
23372: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23376: LD_VAR 0 2
23380: PPUSH
23381: CALL_OW 255
23385: PUSH
23386: LD_INT 3
23388: EQUAL
23389: PUSH
23390: LD_VAR 0 2
23394: PPUSH
23395: CALL_OW 257
23399: PUSH
23400: LD_INT 1
23402: EQUAL
23403: AND
23404: PUSH
23405: LD_VAR 0 1
23409: PUSH
23410: LD_EXP 33
23414: EQUAL
23415: PUSH
23416: LD_VAR 0 1
23420: PUSH
23421: LD_EXP 34
23425: EQUAL
23426: OR
23427: PUSH
23428: EMPTY
23429: LIST
23430: AND
23431: IFFALSE 23452
// begin wait ( 0 0$1 ) ;
23433: LD_INT 35
23435: PPUSH
23436: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23440: LD_VAR 0 2
23444: PPUSH
23445: LD_INT 9
23447: PPUSH
23448: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23452: LD_VAR 0 2
23456: PPUSH
23457: CALL_OW 255
23461: PUSH
23462: LD_INT 3
23464: EQUAL
23465: PUSH
23466: LD_VAR 0 2
23470: PPUSH
23471: CALL_OW 257
23475: PUSH
23476: LD_INT 9
23478: EQUAL
23479: AND
23480: PUSH
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 266
23490: PUSH
23491: LD_INT 32
23493: EQUAL
23494: AND
23495: IFFALSE 23516
// begin wait ( 0 0$1 ) ;
23497: LD_INT 35
23499: PPUSH
23500: CALL_OW 67
// SetClass ( human , 1 ) ;
23504: LD_VAR 0 2
23508: PPUSH
23509: LD_INT 1
23511: PPUSH
23512: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23516: LD_VAR 0 2
23520: PPUSH
23521: CALL_OW 255
23525: PUSH
23526: LD_INT 3
23528: EQUAL
23529: PUSH
23530: LD_VAR 0 2
23534: PPUSH
23535: CALL_OW 257
23539: PUSH
23540: LD_INT 3
23542: EQUAL
23543: AND
23544: PUSH
23545: LD_VAR 0 1
23549: PUSH
23550: LD_EXP 35
23554: EQUAL
23555: AND
23556: IFFALSE 23570
// SetLives ( human , 1000 ) ;
23558: LD_VAR 0 2
23562: PPUSH
23563: LD_INT 1000
23565: PPUSH
23566: CALL_OW 234
// end ;
23570: PPOPN 3
23572: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23573: LD_VAR 0 1
23577: PUSH
23578: LD_INT 1
23580: EQUAL
23581: PUSH
23582: LD_VAR 0 2
23586: PUSH
23587: LD_INT 2
23589: EQUAL
23590: AND
23591: PUSH
23592: LD_INT 1
23594: PPUSH
23595: LD_INT 2
23597: PPUSH
23598: CALL_OW 81
23602: PUSH
23603: LD_INT 1
23605: EQUAL
23606: AND
23607: IFFALSE 23628
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23609: LD_EXP 24
23613: PPUSH
23614: LD_STRING D6b-Pow-1
23616: PPUSH
23617: CALL_OW 94
// YouLost ( Powell ) ;
23621: LD_STRING Powell
23623: PPUSH
23624: CALL_OW 104
// end ; end ;
23628: PPOPN 2
23630: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23631: LD_INT 23
23633: PPUSH
23634: LD_INT 22
23636: PUSH
23637: LD_INT 1
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 21
23646: PUSH
23647: LD_INT 3
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: PPUSH
23658: CALL_OW 70
23662: PUSH
23663: LD_INT 23
23665: PPUSH
23666: LD_INT 22
23668: PUSH
23669: LD_INT 1
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: LD_INT 21
23678: PUSH
23679: LD_INT 2
23681: PUSH
23682: EMPTY
23683: LIST
23684: LIST
23685: PUSH
23686: LD_INT 58
23688: PUSH
23689: EMPTY
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: LIST
23696: PPUSH
23697: CALL_OW 70
23701: OR
23702: PUSH
23703: LD_INT 1
23705: PPUSH
23706: LD_INT 2
23708: PPUSH
23709: CALL_OW 81
23713: PUSH
23714: LD_INT 1
23716: EQUAL
23717: AND
23718: IFFALSE 23742
23720: GO 23722
23722: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23723: LD_EXP 24
23727: PPUSH
23728: LD_STRING D6b-Pow-1
23730: PPUSH
23731: CALL_OW 94
// YouLost ( Powell ) ;
23735: LD_STRING Powell
23737: PPUSH
23738: CALL_OW 104
// end ;
23742: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23743: LD_VAR 0 1
23747: PUSH
23748: LD_EXP 1
23752: EQUAL
23753: IFFALSE 23762
// YouLost ( JMM ) ;
23755: LD_STRING JMM
23757: PPUSH
23758: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23762: LD_VAR 0 1
23766: PPUSH
23767: CALL_OW 255
23771: PUSH
23772: LD_INT 3
23774: EQUAL
23775: PUSH
23776: LD_VAR 0 1
23780: PPUSH
23781: CALL_OW 247
23785: PUSH
23786: LD_INT 3
23788: EQUAL
23789: AND
23790: IFFALSE 24482
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23792: LD_VAR 0 1
23796: PPUSH
23797: CALL_OW 266
23801: PUSH
23802: LD_INT 31
23804: EQUAL
23805: PUSH
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 266
23815: PUSH
23816: LD_INT 32
23818: EQUAL
23819: OR
23820: PUSH
23821: LD_VAR 0 1
23825: PPUSH
23826: CALL_OW 266
23830: PUSH
23831: LD_INT 36
23833: EQUAL
23834: OR
23835: PUSH
23836: LD_VAR 0 1
23840: PPUSH
23841: CALL_OW 266
23845: PUSH
23846: LD_INT 0
23848: EQUAL
23849: OR
23850: PUSH
23851: LD_VAR 0 1
23855: PPUSH
23856: CALL_OW 266
23860: PUSH
23861: LD_INT 24
23863: EQUAL
23864: OR
23865: PUSH
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 266
23875: PUSH
23876: LD_INT 17
23878: EQUAL
23879: OR
23880: PUSH
23881: LD_VAR 0 1
23885: PPUSH
23886: CALL_OW 266
23890: PUSH
23891: LD_INT 25
23893: EQUAL
23894: OR
23895: PUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL_OW 266
23905: PUSH
23906: LD_INT 19
23908: EQUAL
23909: OR
23910: PUSH
23911: LD_VAR 0 1
23915: PPUSH
23916: CALL_OW 266
23920: PUSH
23921: LD_INT 20
23923: EQUAL
23924: OR
23925: PUSH
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 266
23935: PUSH
23936: LD_INT 18
23938: EQUAL
23939: OR
23940: PUSH
23941: LD_VAR 0 1
23945: PPUSH
23946: CALL_OW 266
23950: PUSH
23951: LD_INT 21
23953: EQUAL
23954: OR
23955: PUSH
23956: LD_VAR 0 1
23960: PPUSH
23961: CALL_OW 266
23965: PUSH
23966: LD_INT 23
23968: EQUAL
23969: OR
23970: PUSH
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 266
23980: PUSH
23981: LD_INT 16
23983: EQUAL
23984: OR
23985: PUSH
23986: LD_VAR 0 1
23990: PPUSH
23991: CALL_OW 266
23995: PUSH
23996: LD_INT 6
23998: EQUAL
23999: OR
24000: PUSH
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 266
24010: PUSH
24011: LD_INT 29
24013: EQUAL
24014: OR
24015: PUSH
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 266
24025: PUSH
24026: LD_INT 26
24028: EQUAL
24029: OR
24030: PUSH
24031: LD_VAR 0 1
24035: PPUSH
24036: CALL_OW 266
24040: PUSH
24041: LD_INT 30
24043: EQUAL
24044: OR
24045: PUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 266
24055: PUSH
24056: LD_INT 28
24058: EQUAL
24059: OR
24060: PUSH
24061: LD_VAR 0 1
24065: PPUSH
24066: CALL_OW 266
24070: PUSH
24071: LD_INT 27
24073: EQUAL
24074: OR
24075: PUSH
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL_OW 266
24085: PUSH
24086: LD_INT 33
24088: EQUAL
24089: OR
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 266
24100: PUSH
24101: LD_INT 2
24103: EQUAL
24104: OR
24105: PUSH
24106: LD_VAR 0 1
24110: PPUSH
24111: CALL_OW 266
24115: PUSH
24116: LD_INT 4
24118: EQUAL
24119: OR
24120: IFFALSE 24206
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24122: LD_ADDR_EXP 42
24126: PUSH
24127: LD_EXP 42
24131: PUSH
24132: LD_VAR 0 1
24136: PPUSH
24137: CALL_OW 266
24141: ADD
24142: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24143: LD_ADDR_EXP 42
24147: PUSH
24148: LD_EXP 42
24152: PUSH
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 250
24162: ADD
24163: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24164: LD_ADDR_EXP 42
24168: PUSH
24169: LD_EXP 42
24173: PUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 251
24183: ADD
24184: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24185: LD_ADDR_EXP 42
24189: PUSH
24190: LD_EXP 42
24194: PUSH
24195: LD_VAR 0 1
24199: PPUSH
24200: CALL_OW 254
24204: ADD
24205: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 266
24215: PUSH
24216: LD_INT 1
24218: EQUAL
24219: IFFALSE 24298
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24221: LD_ADDR_EXP 42
24225: PUSH
24226: LD_EXP 42
24230: PUSH
24231: LD_INT 0
24233: ADD
24234: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24235: LD_ADDR_EXP 42
24239: PUSH
24240: LD_EXP 42
24244: PUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: CALL_OW 250
24254: ADD
24255: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24256: LD_ADDR_EXP 42
24260: PUSH
24261: LD_EXP 42
24265: PUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 251
24275: ADD
24276: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24277: LD_ADDR_EXP 42
24281: PUSH
24282: LD_EXP 42
24286: PUSH
24287: LD_VAR 0 1
24291: PPUSH
24292: CALL_OW 254
24296: ADD
24297: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24298: LD_VAR 0 1
24302: PPUSH
24303: CALL_OW 266
24307: PUSH
24308: LD_INT 3
24310: EQUAL
24311: IFFALSE 24390
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24313: LD_ADDR_EXP 42
24317: PUSH
24318: LD_EXP 42
24322: PUSH
24323: LD_INT 2
24325: ADD
24326: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24327: LD_ADDR_EXP 42
24331: PUSH
24332: LD_EXP 42
24336: PUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 250
24346: ADD
24347: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24348: LD_ADDR_EXP 42
24352: PUSH
24353: LD_EXP 42
24357: PUSH
24358: LD_VAR 0 1
24362: PPUSH
24363: CALL_OW 251
24367: ADD
24368: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24369: LD_ADDR_EXP 42
24373: PUSH
24374: LD_EXP 42
24378: PUSH
24379: LD_VAR 0 1
24383: PPUSH
24384: CALL_OW 254
24388: ADD
24389: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL_OW 266
24399: PUSH
24400: LD_INT 5
24402: EQUAL
24403: IFFALSE 24482
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24405: LD_ADDR_EXP 42
24409: PUSH
24410: LD_EXP 42
24414: PUSH
24415: LD_INT 4
24417: ADD
24418: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24419: LD_ADDR_EXP 42
24423: PUSH
24424: LD_EXP 42
24428: PUSH
24429: LD_VAR 0 1
24433: PPUSH
24434: CALL_OW 250
24438: ADD
24439: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24440: LD_ADDR_EXP 42
24444: PUSH
24445: LD_EXP 42
24449: PUSH
24450: LD_VAR 0 1
24454: PPUSH
24455: CALL_OW 251
24459: ADD
24460: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24461: LD_ADDR_EXP 42
24465: PUSH
24466: LD_EXP 42
24470: PUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 254
24480: ADD
24481: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 257
24491: PUSH
24492: LD_INT 3
24494: EQUAL
24495: PUSH
24496: LD_VAR 0 1
24500: PPUSH
24501: CALL_OW 255
24505: PUSH
24506: LD_INT 3
24508: EQUAL
24509: AND
24510: PUSH
24511: LD_EXP 35
24515: PPUSH
24516: CALL_OW 302
24520: AND
24521: PUSH
24522: LD_EXP 35
24526: PPUSH
24527: CALL_OW 255
24531: PUSH
24532: LD_INT 3
24534: EQUAL
24535: AND
24536: IFFALSE 24606
// begin uc_side = 3 ;
24538: LD_ADDR_OWVAR 20
24542: PUSH
24543: LD_INT 3
24545: ST_TO_ADDR
// uc_nation = 3 ;
24546: LD_ADDR_OWVAR 21
24550: PUSH
24551: LD_INT 3
24553: ST_TO_ADDR
// hc_gallery :=  ;
24554: LD_ADDR_OWVAR 33
24558: PUSH
24559: LD_STRING 
24561: ST_TO_ADDR
// hc_name :=  ;
24562: LD_ADDR_OWVAR 26
24566: PUSH
24567: LD_STRING 
24569: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24570: LD_INT 0
24572: PPUSH
24573: LD_EXP 36
24577: PPUSH
24578: LD_EXP 37
24582: PPUSH
24583: CALL_OW 12
24587: PPUSH
24588: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24592: CALL_OW 44
24596: PPUSH
24597: LD_EXP 35
24601: PPUSH
24602: CALL_OW 52
// end ; end ;
24606: PPOPN 1
24608: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24609: LD_ADDR_OWVAR 57
24613: PUSH
24614: LD_INT 0
24616: ST_TO_ADDR
// fastEnd = 1 ;
24617: LD_ADDR_EXP 59
24621: PUSH
24622: LD_INT 1
24624: ST_TO_ADDR
// FinishMission ;
24625: CALL 25887 0 0
// end ; end_of_file
24629: PPOPN 1
24631: END
// export function PrepareNature ; var i , un ; begin
24632: LD_INT 0
24634: PPUSH
24635: PPUSH
24636: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24637: LD_ADDR_VAR 0 2
24641: PUSH
24642: DOUBLE
24643: LD_INT 1
24645: DEC
24646: ST_TO_ADDR
24647: LD_OWVAR 67
24651: PUSH
24652: LD_INT 1
24654: PPUSH
24655: LD_INT 5
24657: PPUSH
24658: CALL_OW 12
24662: PLUS
24663: PUSH
24664: FOR_TO
24665: IFFALSE 24810
// begin hc_sex = sex_male ;
24667: LD_ADDR_OWVAR 27
24671: PUSH
24672: LD_INT 1
24674: ST_TO_ADDR
// uc_side = 0 ;
24675: LD_ADDR_OWVAR 20
24679: PUSH
24680: LD_INT 0
24682: ST_TO_ADDR
// uc_nation = nation_nature ;
24683: LD_ADDR_OWVAR 21
24687: PUSH
24688: LD_INT 0
24690: ST_TO_ADDR
// hc_class = class_apeman ;
24691: LD_ADDR_OWVAR 28
24695: PUSH
24696: LD_INT 12
24698: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24699: LD_ADDR_OWVAR 31
24703: PUSH
24704: LD_INT 2
24706: PPUSH
24707: LD_INT 7
24709: PPUSH
24710: CALL_OW 12
24714: PUSH
24715: LD_OWVAR 67
24719: PLUS
24720: PUSH
24721: LD_INT 2
24723: PPUSH
24724: LD_INT 10
24726: PPUSH
24727: CALL_OW 12
24731: PUSH
24732: LD_INT 2
24734: PPUSH
24735: LD_INT 10
24737: PPUSH
24738: CALL_OW 12
24742: PUSH
24743: LD_INT 2
24745: PPUSH
24746: LD_INT 10
24748: PPUSH
24749: CALL_OW 12
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24760: LD_ADDR_OWVAR 35
24764: PUSH
24765: LD_INT 5
24767: NEG
24768: PPUSH
24769: LD_INT 5
24771: PPUSH
24772: CALL_OW 12
24776: PUSH
24777: LD_OWVAR 67
24781: MUL
24782: ST_TO_ADDR
// un = CreateHuman ;
24783: LD_ADDR_VAR 0 3
24787: PUSH
24788: CALL_OW 44
24792: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24793: LD_VAR 0 3
24797: PPUSH
24798: LD_INT 5
24800: PPUSH
24801: LD_INT 0
24803: PPUSH
24804: CALL_OW 49
// end ;
24808: GO 24664
24810: POP
24811: POP
// for i = 1 to Difficulty + 2 do
24812: LD_ADDR_VAR 0 2
24816: PUSH
24817: DOUBLE
24818: LD_INT 1
24820: DEC
24821: ST_TO_ADDR
24822: LD_OWVAR 67
24826: PUSH
24827: LD_INT 2
24829: PLUS
24830: PUSH
24831: FOR_TO
24832: IFFALSE 24941
// begin hc_sex = sex_male ;
24834: LD_ADDR_OWVAR 27
24838: PUSH
24839: LD_INT 1
24841: ST_TO_ADDR
// uc_side = 0 ;
24842: LD_ADDR_OWVAR 20
24846: PUSH
24847: LD_INT 0
24849: ST_TO_ADDR
// uc_nation = nation_nature ;
24850: LD_ADDR_OWVAR 21
24854: PUSH
24855: LD_INT 0
24857: ST_TO_ADDR
// hc_class = class_tiger ;
24858: LD_ADDR_OWVAR 28
24862: PUSH
24863: LD_INT 14
24865: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24866: LD_ADDR_OWVAR 31
24870: PUSH
24871: LD_EXP 37
24875: PUSH
24876: LD_INT 0
24878: PUSH
24879: LD_INT 0
24881: PUSH
24882: LD_INT 0
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24891: LD_ADDR_OWVAR 35
24895: PUSH
24896: LD_INT 5
24898: NEG
24899: PPUSH
24900: LD_INT 5
24902: PPUSH
24903: CALL_OW 12
24907: PUSH
24908: LD_OWVAR 67
24912: MUL
24913: ST_TO_ADDR
// un = CreateHuman ;
24914: LD_ADDR_VAR 0 3
24918: PUSH
24919: CALL_OW 44
24923: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24924: LD_VAR 0 3
24928: PPUSH
24929: LD_INT 6
24931: PPUSH
24932: LD_INT 0
24934: PPUSH
24935: CALL_OW 49
// end ;
24939: GO 24831
24941: POP
24942: POP
// for i = 1 to rand ( 3 , 4 ) do
24943: LD_ADDR_VAR 0 2
24947: PUSH
24948: DOUBLE
24949: LD_INT 1
24951: DEC
24952: ST_TO_ADDR
24953: LD_INT 3
24955: PPUSH
24956: LD_INT 4
24958: PPUSH
24959: CALL_OW 12
24963: PUSH
24964: FOR_TO
24965: IFFALSE 25059
// begin hc_sex = sex_male ;
24967: LD_ADDR_OWVAR 27
24971: PUSH
24972: LD_INT 1
24974: ST_TO_ADDR
// uc_side = 0 ;
24975: LD_ADDR_OWVAR 20
24979: PUSH
24980: LD_INT 0
24982: ST_TO_ADDR
// uc_nation = nation_nature ;
24983: LD_ADDR_OWVAR 21
24987: PUSH
24988: LD_INT 0
24990: ST_TO_ADDR
// hc_class = 18 ;
24991: LD_ADDR_OWVAR 28
24995: PUSH
24996: LD_INT 18
24998: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24999: LD_ADDR_OWVAR 31
25003: PUSH
25004: LD_EXP 37
25008: PUSH
25009: LD_INT 0
25011: PUSH
25012: LD_INT 0
25014: PUSH
25015: LD_INT 0
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: LIST
25022: LIST
25023: ST_TO_ADDR
// hc_agressivity = 0 ;
25024: LD_ADDR_OWVAR 35
25028: PUSH
25029: LD_INT 0
25031: ST_TO_ADDR
// un = CreateHuman ;
25032: LD_ADDR_VAR 0 3
25036: PUSH
25037: CALL_OW 44
25041: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25042: LD_VAR 0 3
25046: PPUSH
25047: LD_INT 6
25049: PPUSH
25050: LD_INT 0
25052: PPUSH
25053: CALL_OW 49
// end ;
25057: GO 24964
25059: POP
25060: POP
// end ; end_of_file
25061: LD_VAR 0 1
25065: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25066: LD_EXP 46
25070: PUSH
25071: LD_INT 1
25073: EQUAL
25074: IFFALSE 25158
25076: GO 25078
25078: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25079: LD_INT 7
25081: PPUSH
25082: LD_INT 5
25084: PPUSH
25085: LD_INT 4
25087: PUSH
25088: LD_INT 5
25090: PUSH
25091: LD_INT 6
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: PUSH
25099: LD_OWVAR 67
25103: ARRAY
25104: PPUSH
25105: LD_EXP 36
25109: PPUSH
25110: LD_EXP 37
25114: PPUSH
25115: CALL_OW 12
25119: PPUSH
25120: LD_INT 2
25122: PPUSH
25123: LD_INT 1
25125: PPUSH
25126: LD_INT 1
25128: PPUSH
25129: EMPTY
25130: PPUSH
25131: LD_INT 25
25133: PUSH
25134: LD_INT 26
25136: PUSH
25137: LD_INT 27
25139: PUSH
25140: LD_INT 28
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: PPUSH
25149: EMPTY
25150: PPUSH
25151: LD_INT 1
25153: PPUSH
25154: CALL 15639 0 11
25158: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25159: LD_EXP 46
25163: PUSH
25164: LD_INT 1
25166: EQUAL
25167: IFFALSE 25255
25169: GO 25171
25171: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25172: LD_INT 5
25174: PPUSH
25175: LD_INT 2
25177: PPUSH
25178: LD_INT 6
25180: PUSH
25181: LD_INT 7
25183: PUSH
25184: LD_INT 8
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: LIST
25191: PUSH
25192: LD_OWVAR 67
25196: ARRAY
25197: PPUSH
25198: LD_INT 0
25200: PPUSH
25201: LD_INT 0
25203: PPUSH
25204: LD_INT 2
25206: PUSH
25207: LD_INT 4
25209: PUSH
25210: LD_INT 5
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: LIST
25217: PUSH
25218: LD_OWVAR 67
25222: ARRAY
25223: PPUSH
25224: LD_INT 0
25226: PPUSH
25227: LD_EXP 36
25231: PPUSH
25232: LD_EXP 37
25236: PPUSH
25237: CALL_OW 12
25241: PPUSH
25242: LD_INT 7
25244: PPUSH
25245: LD_INT 9
25247: PPUSH
25248: LD_INT 1
25250: PPUSH
25251: CALL 17343 0 11
25255: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25256: LD_EXP 46
25260: PUSH
25261: LD_INT 1
25263: EQUAL
25264: IFFALSE 25273
25266: GO 25268
25268: DISABLE
// PrepareArabianSheik ;
25269: CALL 3873 0 0
25273: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25274: LD_EXP 29
25278: PUSH
25279: LD_EXP 60
25283: PUSH
25284: LD_INT 1
25286: EQUAL
25287: AND
25288: IFFALSE 25357
25290: GO 25292
25292: DISABLE
// begin enable ;
25293: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25294: LD_INT 6
25296: PPUSH
25297: LD_INT 3
25299: PPUSH
25300: LD_EXP 57
25304: PPUSH
25305: LD_INT 0
25307: PPUSH
25308: LD_OWVAR 67
25312: PPUSH
25313: LD_INT 0
25315: PPUSH
25316: LD_EXP 57
25320: PUSH
25321: LD_INT 3
25323: DIV
25324: PUSH
25325: LD_INT 1
25327: PLUS
25328: PPUSH
25329: LD_EXP 36
25333: PPUSH
25334: LD_EXP 37
25338: PPUSH
25339: CALL_OW 12
25343: PPUSH
25344: LD_INT 17
25346: PPUSH
25347: LD_INT 18
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: CALL 17343 0 11
// end ;
25357: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25358: LD_EXP 29
25362: PUSH
25363: LD_EXP 60
25367: PUSH
25368: LD_INT 1
25370: EQUAL
25371: AND
25372: IFFALSE 25449
25374: GO 25376
25376: DISABLE
// begin enable ;
25377: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25378: LD_INT 17
25380: PPUSH
25381: LD_INT 6
25383: PPUSH
25384: LD_EXP 56
25388: PPUSH
25389: LD_EXP 36
25393: PPUSH
25394: LD_EXP 37
25398: PPUSH
25399: CALL_OW 12
25403: PPUSH
25404: LD_INT 3
25406: PPUSH
25407: LD_INT 1
25409: PPUSH
25410: LD_INT 1
25412: PUSH
25413: LD_INT 3
25415: PUSH
25416: EMPTY
25417: LIST
25418: LIST
25419: PPUSH
25420: LD_INT 43
25422: PUSH
25423: LD_INT 44
25425: PUSH
25426: LD_INT 45
25428: PUSH
25429: LD_INT 46
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: PPUSH
25438: EMPTY
25439: PPUSH
25440: EMPTY
25441: PPUSH
25442: LD_INT 1
25444: PPUSH
25445: CALL 15639 0 11
// end ;
25449: END
// every 10 10$00 trigger joinEpsilon do
25450: LD_EXP 29
25454: IFFALSE 25508
25456: GO 25458
25458: DISABLE
// begin enable ;
25459: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25460: LD_ADDR_EXP 56
25464: PUSH
25465: LD_EXP 56
25469: PUSH
25470: LD_INT 1
25472: PPUSH
25473: LD_OWVAR 67
25477: PPUSH
25478: CALL_OW 12
25482: PLUS
25483: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25484: LD_ADDR_EXP 57
25488: PUSH
25489: LD_EXP 57
25493: PUSH
25494: LD_INT 1
25496: PPUSH
25497: LD_OWVAR 67
25501: PPUSH
25502: CALL_OW 12
25506: PLUS
25507: ST_TO_ADDR
// end ;
25508: END
// every 21 21$0 trigger attackAvalaible = 1 do
25509: LD_EXP 60
25513: PUSH
25514: LD_INT 1
25516: EQUAL
25517: IFFALSE 25530
25519: GO 25521
25521: DISABLE
// attackAvalaible = 0 ; end_of_file
25522: LD_ADDR_EXP 60
25526: PUSH
25527: LD_INT 0
25529: ST_TO_ADDR
25530: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25531: LD_INT 54
25533: PPUSH
25534: LD_INT 1
25536: PPUSH
25537: CALL_OW 321
25541: PUSH
25542: LD_INT 2
25544: EQUAL
25545: PUSH
25546: LD_INT 55
25548: PPUSH
25549: LD_INT 1
25551: PPUSH
25552: CALL_OW 321
25556: PUSH
25557: LD_INT 2
25559: EQUAL
25560: AND
25561: PUSH
25562: LD_INT 21
25564: PPUSH
25565: LD_INT 1
25567: PPUSH
25568: CALL_OW 321
25572: PUSH
25573: LD_INT 2
25575: EQUAL
25576: AND
25577: PUSH
25578: LD_INT 22
25580: PPUSH
25581: LD_INT 1
25583: PPUSH
25584: CALL_OW 321
25588: PUSH
25589: LD_INT 2
25591: EQUAL
25592: AND
25593: PUSH
25594: LD_INT 12
25596: PPUSH
25597: LD_INT 1
25599: PPUSH
25600: CALL_OW 321
25604: PUSH
25605: LD_INT 1
25607: EQUAL
25608: PUSH
25609: LD_INT 32
25611: PPUSH
25612: LD_INT 1
25614: PPUSH
25615: CALL_OW 321
25619: PUSH
25620: LD_INT 1
25622: EQUAL
25623: OR
25624: PUSH
25625: EMPTY
25626: LIST
25627: AND
25628: PUSH
25629: LD_EXP 48
25633: PUSH
25634: LD_INT 1
25636: EQUAL
25637: AND
25638: PUSH
25639: LD_INT 22
25641: PUSH
25642: LD_INT 3
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PPUSH
25663: CALL_OW 69
25667: PUSH
25668: LD_INT 0
25670: EQUAL
25671: AND
25672: IFFALSE 25728
25674: GO 25676
25676: DISABLE
// begin case query ( QEndMission ) of 1 :
25677: LD_STRING QEndMission
25679: PPUSH
25680: CALL_OW 97
25684: PUSH
25685: LD_INT 1
25687: DOUBLE
25688: EQUAL
25689: IFTRUE 25693
25691: GO 25704
25693: POP
// begin end_the_mission_allowed = true ;
25694: LD_ADDR_OWVAR 57
25698: PUSH
25699: LD_INT 1
25701: ST_TO_ADDR
// end ; 2 :
25702: GO 25728
25704: LD_INT 2
25706: DOUBLE
25707: EQUAL
25708: IFTRUE 25712
25710: GO 25727
25712: POP
// begin fastEnd = 1 ;
25713: LD_ADDR_EXP 59
25717: PUSH
25718: LD_INT 1
25720: ST_TO_ADDR
// FinishMission ;
25721: CALL 25887 0 0
// end ; end ;
25725: GO 25728
25727: POP
// end ;
25728: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25729: LD_INT 54
25731: PPUSH
25732: LD_INT 1
25734: PPUSH
25735: CALL_OW 321
25739: PUSH
25740: LD_INT 2
25742: EQUAL
25743: PUSH
25744: LD_INT 55
25746: PPUSH
25747: LD_INT 1
25749: PPUSH
25750: CALL_OW 321
25754: PUSH
25755: LD_INT 2
25757: EQUAL
25758: AND
25759: PUSH
25760: LD_INT 21
25762: PPUSH
25763: LD_INT 1
25765: PPUSH
25766: CALL_OW 321
25770: PUSH
25771: LD_INT 2
25773: EQUAL
25774: AND
25775: PUSH
25776: LD_INT 22
25778: PPUSH
25779: LD_INT 1
25781: PPUSH
25782: CALL_OW 321
25786: PUSH
25787: LD_INT 2
25789: EQUAL
25790: AND
25791: PUSH
25792: LD_INT 12
25794: PPUSH
25795: LD_INT 1
25797: PPUSH
25798: CALL_OW 321
25802: PUSH
25803: LD_INT 2
25805: EQUAL
25806: AND
25807: PUSH
25808: LD_INT 32
25810: PPUSH
25811: LD_INT 1
25813: PPUSH
25814: CALL_OW 321
25818: PUSH
25819: LD_INT 2
25821: EQUAL
25822: AND
25823: PUSH
25824: LD_EXP 59
25828: PUSH
25829: LD_INT 0
25831: EQUAL
25832: AND
25833: PUSH
25834: LD_EXP 48
25838: PUSH
25839: LD_INT 1
25841: EQUAL
25842: AND
25843: PUSH
25844: LD_INT 22
25846: PUSH
25847: LD_INT 3
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PUSH
25854: LD_INT 21
25856: PUSH
25857: LD_INT 1
25859: PUSH
25860: EMPTY
25861: LIST
25862: LIST
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PPUSH
25868: CALL_OW 69
25872: PUSH
25873: LD_INT 0
25875: EQUAL
25876: AND
25877: IFFALSE 25886
25879: GO 25881
25881: DISABLE
// FinishMission ;
25882: CALL 25887 0 0
25886: END
// export function FinishMission ; begin
25887: LD_INT 0
25889: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25890: LD_EXP 52
25894: PPUSH
25895: LD_STRING 10_KhatamStatus_1
25897: PPUSH
25898: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25902: LD_EXP 51
25906: PPUSH
25907: LD_STRING 10_GensherEscape_1
25909: PPUSH
25910: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25914: LD_INT 12
25916: PPUSH
25917: LD_INT 1
25919: PPUSH
25920: CALL_OW 321
25924: PUSH
25925: LD_INT 2
25927: EQUAL
25928: IFFALSE 25942
// begin AddMedal ( sights , 1 ) ;
25930: LD_STRING sights
25932: PPUSH
25933: LD_INT 1
25935: PPUSH
25936: CALL_OW 101
// end else
25940: GO 25953
// begin AddMedal ( sights , - 1 ) ;
25942: LD_STRING sights
25944: PPUSH
25945: LD_INT 1
25947: NEG
25948: PPUSH
25949: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25953: LD_INT 32
25955: PPUSH
25956: LD_INT 1
25958: PPUSH
25959: CALL_OW 321
25963: PUSH
25964: LD_INT 2
25966: EQUAL
25967: IFFALSE 25981
// begin AddMedal ( computers , 1 ) ;
25969: LD_STRING computers
25971: PPUSH
25972: LD_INT 1
25974: PPUSH
25975: CALL_OW 101
// end else
25979: GO 25992
// begin AddMedal ( computers , - 1 ) ;
25981: LD_STRING computers
25983: PPUSH
25984: LD_INT 1
25986: NEG
25987: PPUSH
25988: CALL_OW 101
// end ; if arabianEscape = 0 then
25992: LD_EXP 47
25996: PUSH
25997: LD_INT 0
25999: EQUAL
26000: IFFALSE 26024
// begin AddMedal ( renegades , 2 ) ;
26002: LD_STRING renegades
26004: PPUSH
26005: LD_INT 2
26007: PPUSH
26008: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26012: LD_INT 0
26014: PPUSH
26015: LD_STRING 10_ScientistsEscape_1
26017: PPUSH
26018: CALL_OW 39
// end else
26022: GO 26035
// begin AddMedal ( renegades , - 1 ) ;
26024: LD_STRING renegades
26026: PPUSH
26027: LD_INT 1
26029: NEG
26030: PPUSH
26031: CALL_OW 101
// end ; SaveEpsilonBase ;
26035: CALL 26759 0 0
// GiveMedals ( Main ) ;
26039: LD_STRING Main
26041: PPUSH
26042: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26046: LD_INT 22
26048: PUSH
26049: LD_INT 1
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 23
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 1
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: LD_INT 2
26078: PUSH
26079: LD_INT 25
26081: PUSH
26082: LD_INT 1
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 25
26091: PUSH
26092: LD_INT 2
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 25
26101: PUSH
26102: LD_INT 3
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: PUSH
26109: LD_INT 25
26111: PUSH
26112: LD_INT 4
26114: PUSH
26115: EMPTY
26116: LIST
26117: LIST
26118: PUSH
26119: LD_INT 25
26121: PUSH
26122: LD_INT 5
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 25
26131: PUSH
26132: LD_INT 8
26134: PUSH
26135: EMPTY
26136: LIST
26137: LIST
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: PPUSH
26154: CALL_OW 69
26158: PPUSH
26159: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26163: LD_EXP 1
26167: PPUSH
26168: LD_EXP 53
26172: PUSH
26173: LD_STRING JMM
26175: STR
26176: PPUSH
26177: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26181: LD_EXP 2
26185: PPUSH
26186: LD_EXP 53
26190: PUSH
26191: LD_STRING Brown
26193: STR
26194: PPUSH
26195: CALL 9914 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26199: LD_EXP 3
26203: PPUSH
26204: LD_EXP 53
26208: PUSH
26209: LD_STRING Donaldson
26211: STR
26212: PPUSH
26213: CALL 9914 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26217: LD_EXP 4
26221: PPUSH
26222: LD_EXP 53
26226: PUSH
26227: LD_STRING Bobby
26229: STR
26230: PPUSH
26231: CALL 9914 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26235: LD_EXP 5
26239: PPUSH
26240: LD_EXP 53
26244: PUSH
26245: LD_STRING Cyrus
26247: STR
26248: PPUSH
26249: CALL 9914 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26253: LD_EXP 6
26257: PPUSH
26258: LD_EXP 53
26262: PUSH
26263: LD_STRING Lisa
26265: STR
26266: PPUSH
26267: CALL 9914 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26271: LD_EXP 7
26275: PPUSH
26276: LD_EXP 53
26280: PUSH
26281: LD_STRING Frank
26283: STR
26284: PPUSH
26285: CALL 9914 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26289: LD_EXP 8
26293: PPUSH
26294: LD_EXP 53
26298: PUSH
26299: LD_STRING Kikuchi
26301: STR
26302: PPUSH
26303: CALL 9914 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26307: LD_EXP 9
26311: PPUSH
26312: LD_EXP 53
26316: PUSH
26317: LD_STRING Houten
26319: STR
26320: PPUSH
26321: CALL 9914 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26325: LD_EXP 10
26329: PPUSH
26330: LD_EXP 53
26334: PUSH
26335: LD_STRING Gary
26337: STR
26338: PPUSH
26339: CALL 9914 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26343: LD_EXP 19
26347: PPUSH
26348: LD_EXP 53
26352: PUSH
26353: LD_STRING Cornell
26355: STR
26356: PPUSH
26357: CALL 9914 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26361: LD_EXP 11
26365: PPUSH
26366: LD_EXP 53
26370: PUSH
26371: LD_STRING Simms
26373: STR
26374: PPUSH
26375: CALL 9914 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26379: LD_EXP 12
26383: PPUSH
26384: LD_EXP 53
26388: PUSH
26389: LD_STRING Denis
26391: STR
26392: PPUSH
26393: CALL 9914 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26397: LD_EXP 13
26401: PPUSH
26402: LD_EXP 53
26406: PUSH
26407: LD_STRING Joan
26409: STR
26410: PPUSH
26411: CALL 9914 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26415: LD_EXP 15
26419: PPUSH
26420: LD_EXP 53
26424: PUSH
26425: LD_STRING Gladstone
26427: STR
26428: PPUSH
26429: CALL 9914 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26433: LD_EXP 17
26437: PPUSH
26438: LD_EXP 53
26442: PUSH
26443: LD_STRING DeltaDoctor
26445: STR
26446: PPUSH
26447: CALL 9914 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26451: LD_EXP 22
26455: PPUSH
26456: LD_STRING 10c_lock
26458: PPUSH
26459: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26463: LD_INT 50
26465: PUSH
26466: EMPTY
26467: LIST
26468: PUSH
26469: LD_INT 22
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 21
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: PUSH
26492: LD_INT 25
26494: PUSH
26495: LD_INT 1
26497: PUSH
26498: EMPTY
26499: LIST
26500: LIST
26501: PUSH
26502: LD_INT 25
26504: PUSH
26505: LD_INT 2
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 25
26514: PUSH
26515: LD_INT 3
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 25
26524: PUSH
26525: LD_INT 4
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: PUSH
26532: LD_INT 25
26534: PUSH
26535: LD_INT 5
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: PUSH
26542: LD_INT 25
26544: PUSH
26545: LD_INT 8
26547: PUSH
26548: EMPTY
26549: LIST
26550: LIST
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: PUSH
26572: LD_EXP 1
26576: PUSH
26577: LD_EXP 2
26581: PUSH
26582: LD_EXP 3
26586: PUSH
26587: LD_EXP 4
26591: PUSH
26592: LD_EXP 5
26596: PUSH
26597: LD_EXP 6
26601: PUSH
26602: LD_EXP 7
26606: PUSH
26607: LD_EXP 15
26611: PUSH
26612: LD_EXP 8
26616: PUSH
26617: LD_EXP 12
26621: PUSH
26622: LD_EXP 13
26626: PUSH
26627: LD_EXP 9
26631: PUSH
26632: LD_EXP 11
26636: PUSH
26637: LD_EXP 10
26641: PUSH
26642: LD_EXP 17
26646: PUSH
26647: LD_EXP 19
26651: PUSH
26652: EMPTY
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: DIFF
26670: PPUSH
26671: LD_STRING 10_other_survivors
26673: PPUSH
26674: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26678: LD_INT 50
26680: PUSH
26681: EMPTY
26682: LIST
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_INT 1
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 2
26706: PUSH
26707: LD_INT 25
26709: PUSH
26710: LD_INT 16
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: LD_INT 25
26719: PUSH
26720: LD_INT 12
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: LIST
26731: PUSH
26732: EMPTY
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: PPUSH
26738: CALL_OW 69
26742: PPUSH
26743: LD_STRING 10_ape
26745: PPUSH
26746: CALL_OW 38
// YouWin ;
26750: CALL_OW 103
// end ;
26754: LD_VAR 0 1
26758: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26759: LD_INT 0
26761: PPUSH
26762: PPUSH
26763: PPUSH
26764: PPUSH
// epsilonBase = [ ] ;
26765: LD_ADDR_VAR 0 2
26769: PUSH
26770: EMPTY
26771: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26772: LD_ADDR_VAR 0 3
26776: PUSH
26777: LD_INT 22
26779: PUSH
26780: LD_INT 1
26782: PUSH
26783: EMPTY
26784: LIST
26785: LIST
26786: PUSH
26787: LD_INT 23
26789: PUSH
26790: LD_INT 1
26792: PUSH
26793: EMPTY
26794: LIST
26795: LIST
26796: PUSH
26797: LD_INT 21
26799: PUSH
26800: LD_INT 3
26802: PUSH
26803: EMPTY
26804: LIST
26805: LIST
26806: PUSH
26807: LD_INT 50
26809: PUSH
26810: EMPTY
26811: LIST
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: LIST
26818: PPUSH
26819: CALL_OW 69
26823: ST_TO_ADDR
// for i in buildings do
26824: LD_ADDR_VAR 0 4
26828: PUSH
26829: LD_VAR 0 3
26833: PUSH
26834: FOR_IN
26835: IFFALSE 27272
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26837: LD_VAR 0 4
26841: PPUSH
26842: CALL_OW 266
26846: PUSH
26847: LD_INT 6
26849: PUSH
26850: LD_INT 7
26852: PUSH
26853: LD_INT 8
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: LIST
26860: IN
26861: IFFALSE 26975
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26863: LD_ADDR_VAR 0 2
26867: PUSH
26868: LD_VAR 0 2
26872: PUSH
26873: LD_VAR 0 4
26877: PPUSH
26878: CALL_OW 266
26882: PUSH
26883: LD_VAR 0 4
26887: PPUSH
26888: CALL_OW 250
26892: PUSH
26893: LD_VAR 0 4
26897: PPUSH
26898: CALL_OW 251
26902: PUSH
26903: LD_VAR 0 4
26907: PPUSH
26908: CALL_OW 254
26912: PUSH
26913: LD_VAR 0 4
26917: PPUSH
26918: CALL_OW 267
26922: PUSH
26923: LD_VAR 0 4
26927: PPUSH
26928: CALL_OW 248
26932: PUSH
26933: LD_VAR 0 4
26937: PPUSH
26938: LD_INT 1
26940: PPUSH
26941: CALL_OW 268
26945: PUSH
26946: LD_VAR 0 4
26950: PPUSH
26951: LD_INT 2
26953: PPUSH
26954: CALL_OW 268
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: PUSH
26969: EMPTY
26970: LIST
26971: ADD
26972: ST_TO_ADDR
26973: GO 27270
// if GetBType ( i ) = b_bunker then
26975: LD_VAR 0 4
26979: PPUSH
26980: CALL_OW 266
26984: PUSH
26985: LD_INT 32
26987: EQUAL
26988: IFFALSE 27085
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26990: LD_ADDR_VAR 0 2
26994: PUSH
26995: LD_VAR 0 2
26999: PUSH
27000: LD_VAR 0 4
27004: PPUSH
27005: CALL_OW 266
27009: PUSH
27010: LD_VAR 0 4
27014: PPUSH
27015: CALL_OW 250
27019: PUSH
27020: LD_VAR 0 4
27024: PPUSH
27025: CALL_OW 251
27029: PUSH
27030: LD_VAR 0 4
27034: PPUSH
27035: CALL_OW 254
27039: PUSH
27040: LD_VAR 0 4
27044: PPUSH
27045: CALL_OW 267
27049: PUSH
27050: LD_VAR 0 4
27054: PPUSH
27055: CALL_OW 248
27059: PUSH
27060: LD_VAR 0 4
27064: PPUSH
27065: CALL_OW 269
27069: PUSH
27070: EMPTY
27071: LIST
27072: LIST
27073: LIST
27074: LIST
27075: LIST
27076: LIST
27077: LIST
27078: PUSH
27079: EMPTY
27080: LIST
27081: ADD
27082: ST_TO_ADDR
27083: GO 27270
// if GetBType ( i ) = b_factory then
27085: LD_VAR 0 4
27089: PPUSH
27090: CALL_OW 266
27094: PUSH
27095: LD_INT 3
27097: EQUAL
27098: IFFALSE 27188
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27100: LD_ADDR_VAR 0 2
27104: PUSH
27105: LD_VAR 0 2
27109: PPUSH
27110: LD_INT 1
27112: PPUSH
27113: LD_VAR 0 4
27117: PPUSH
27118: CALL_OW 266
27122: PUSH
27123: LD_VAR 0 4
27127: PPUSH
27128: CALL_OW 250
27132: PUSH
27133: LD_VAR 0 4
27137: PPUSH
27138: CALL_OW 251
27142: PUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: CALL_OW 254
27152: PUSH
27153: LD_VAR 0 4
27157: PPUSH
27158: CALL_OW 267
27162: PUSH
27163: LD_VAR 0 4
27167: PPUSH
27168: CALL_OW 248
27172: PUSH
27173: EMPTY
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: PPUSH
27181: CALL_OW 2
27185: ST_TO_ADDR
27186: GO 27270
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27188: LD_ADDR_VAR 0 2
27192: PUSH
27193: LD_VAR 0 2
27197: PUSH
27198: LD_VAR 0 4
27202: PPUSH
27203: CALL_OW 266
27207: PUSH
27208: LD_VAR 0 4
27212: PPUSH
27213: CALL_OW 250
27217: PUSH
27218: LD_VAR 0 4
27222: PPUSH
27223: CALL_OW 251
27227: PUSH
27228: LD_VAR 0 4
27232: PPUSH
27233: CALL_OW 254
27237: PUSH
27238: LD_VAR 0 4
27242: PPUSH
27243: CALL_OW 267
27247: PUSH
27248: LD_VAR 0 4
27252: PPUSH
27253: CALL_OW 248
27257: PUSH
27258: EMPTY
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: PUSH
27266: EMPTY
27267: LIST
27268: ADD
27269: ST_TO_ADDR
// end ;
27270: GO 26834
27272: POP
27273: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_STRING 10_EpsilonBase
27281: PPUSH
27282: CALL_OW 39
// end ; end_of_file
27286: LD_VAR 0 1
27290: RET
// every 0 0$01 do
27291: GO 27293
27293: DISABLE
// begin repeat wait ( 0 0$30 ) ;
27294: LD_INT 1050
27296: PPUSH
27297: CALL_OW 67
// if cratesSpawned < 6 then
27301: LD_EXP 55
27305: PUSH
27306: LD_INT 6
27308: LESS
27309: IFFALSE 27346
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27311: LD_INT 3
27313: PPUSH
27314: LD_INT 5
27316: PPUSH
27317: CALL_OW 12
27321: PPUSH
27322: LD_INT 16
27324: PPUSH
27325: LD_INT 1
27327: PPUSH
27328: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27332: LD_ADDR_EXP 55
27336: PUSH
27337: LD_EXP 55
27341: PUSH
27342: LD_INT 1
27344: PLUS
27345: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27346: LD_EXP 55
27350: PUSH
27351: LD_INT 6
27353: GREATEREQUAL
27354: PUSH
27355: LD_EXP 55
27359: PUSH
27360: LD_INT 12
27362: LESS
27363: AND
27364: IFFALSE 27408
// begin wait ( 0 0$30 ) ;
27366: LD_INT 1050
27368: PPUSH
27369: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27373: LD_INT 3
27375: PPUSH
27376: LD_INT 5
27378: PPUSH
27379: CALL_OW 12
27383: PPUSH
27384: LD_INT 16
27386: PPUSH
27387: LD_INT 1
27389: PPUSH
27390: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27394: LD_ADDR_EXP 55
27398: PUSH
27399: LD_EXP 55
27403: PUSH
27404: LD_INT 1
27406: PLUS
27407: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27408: LD_EXP 55
27412: PUSH
27413: LD_INT 12
27415: GREATEREQUAL
27416: IFFALSE 27460
// begin wait ( 1 1$30 ) ;
27418: LD_INT 3150
27420: PPUSH
27421: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27425: LD_INT 3
27427: PPUSH
27428: LD_INT 5
27430: PPUSH
27431: CALL_OW 12
27435: PPUSH
27436: LD_INT 16
27438: PPUSH
27439: LD_INT 1
27441: PPUSH
27442: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27446: LD_ADDR_EXP 55
27450: PUSH
27451: LD_EXP 55
27455: PUSH
27456: LD_INT 1
27458: PLUS
27459: ST_TO_ADDR
// end ; until cratesSpawned >= 35 ;
27460: LD_EXP 55
27464: PUSH
27465: LD_INT 35
27467: GREATEREQUAL
27468: IFFALSE 27294
// end ;
27470: END
