// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24670 0 0
// PrepareDifficulty ;
 250: CALL 10003 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19601 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19601 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19601 0 2
// PrepareArabianCommander ;
 354: CALL 3164 0 0
// PrepareArabian ;
 358: CALL 3216 0 0
// BuildArabianBase ;
 362: CALL 12702 0 0
// TameApemans ;
 366: CALL 18566 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9597 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9597 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9597 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9597 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9597 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9597 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9597 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9597 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9597 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9597 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9597 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9597 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9597 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9597 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9597 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9597 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9597 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9597 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2192
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2188
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2168: LD_EXP 22
2172: PUSH
2173: LD_VAR 0 2
2177: ARRAY
2178: PPUSH
2179: LD_INT 2
2181: PPUSH
2182: CALL_OW 336
// end ;
2186: GO 2144
2188: POP
2189: POP
// end else
2190: GO 2236
// begin for i in others09 do
2192: LD_ADDR_VAR 0 2
2196: PUSH
2197: LD_EXP 22
2201: PUSH
2202: FOR_IN
2203: IFFALSE 2234
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2205: LD_VAR 0 2
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
// SetClass ( i , 2 ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 2
2227: PPUSH
2228: CALL_OW 336
// end ;
2232: GO 2202
2234: POP
2235: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2236: LD_INT 22
2238: PUSH
2239: LD_INT 4
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: LD_INT 25
2248: PUSH
2249: LD_INT 2
2251: PUSH
2252: EMPTY
2253: LIST
2254: LIST
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PPUSH
2260: CALL_OW 69
2264: PUSH
2265: LD_INT 0
2267: EQUAL
2268: IFFALSE 2386
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: LD_INT 22
2277: PUSH
2278: LD_INT 4
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 25
2287: PUSH
2288: LD_INT 2
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 69
2303: PUSH
2304: LD_EXP 11
2308: PUSH
2309: LD_EXP 14
2313: PUSH
2314: LD_EXP 12
2318: PUSH
2319: LD_EXP 15
2323: PUSH
2324: LD_EXP 17
2328: PUSH
2329: LD_EXP 13
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: LIST
2341: DIFF
2342: ST_TO_ADDR
// if not tmp then
2343: LD_VAR 0 3
2347: NOT
2348: IFFALSE 2370
// begin if Denis then
2350: LD_EXP 12
2354: IFFALSE 2368
// SetClass ( Denis , 2 ) ;
2356: LD_EXP 12
2360: PPUSH
2361: LD_INT 2
2363: PPUSH
2364: CALL_OW 336
// exit ;
2368: GO 2536
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2370: LD_VAR 0 3
2374: PUSH
2375: LD_INT 1
2377: ARRAY
2378: PPUSH
2379: LD_INT 2
2381: PPUSH
2382: CALL_OW 336
// end ; for i in ape09 do
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: LD_EXP 23
2395: PUSH
2396: FOR_IN
2397: IFFALSE 2416
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2399: LD_VAR 0 2
2403: PPUSH
2404: LD_INT 1
2406: PPUSH
2407: LD_INT 0
2409: PPUSH
2410: CALL_OW 49
2414: GO 2396
2416: POP
2417: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2418: LD_INT 22
2420: PUSH
2421: LD_INT 4
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 25
2430: PUSH
2431: LD_INT 2
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PPUSH
2442: CALL_OW 69
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: LD_INT 101
2452: PPUSH
2453: LD_INT 30
2455: PPUSH
2456: LD_INT 2
2458: PPUSH
2459: CALL_OW 205
// uc_side = 1 ;
2463: LD_ADDR_OWVAR 20
2467: PUSH
2468: LD_INT 1
2470: ST_TO_ADDR
// hc_class := 1 ;
2471: LD_ADDR_OWVAR 28
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// hc_sex := sex_female ;
2479: LD_ADDR_OWVAR 27
2483: PUSH
2484: LD_INT 2
2486: ST_TO_ADDR
// hc_gallery :=  ;
2487: LD_ADDR_OWVAR 33
2491: PUSH
2492: LD_STRING 
2494: ST_TO_ADDR
// hc_name :=  ;
2495: LD_ADDR_OWVAR 26
2499: PUSH
2500: LD_STRING 
2502: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2503: LD_ADDR_OWVAR 31
2507: PUSH
2508: LD_INT 1
2510: PUSH
2511: LD_INT 7
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: LD_INT 0
2519: PUSH
2520: EMPTY
2521: LIST
2522: LIST
2523: LIST
2524: LIST
2525: ST_TO_ADDR
// AmScout = CreateHuman ;
2526: LD_ADDR_EXP 18
2530: PUSH
2531: CALL_OW 44
2535: ST_TO_ADDR
// end ;
2536: LD_VAR 0 1
2540: RET
// export function PrepareCornell ; begin
2541: LD_INT 0
2543: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2544: LD_INT 4
2546: PPUSH
2547: LD_INT 4
2549: PPUSH
2550: CALL_OW 343
// uc_side = 4 ;
2554: LD_ADDR_OWVAR 20
2558: PUSH
2559: LD_INT 4
2561: ST_TO_ADDR
// uc_nation = 1 ;
2562: LD_ADDR_OWVAR 21
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2570: LD_ADDR_EXP 19
2574: PUSH
2575: LD_STRING 03_Cornel
2577: PPUSH
2578: LD_INT 1
2580: PPUSH
2581: CALL 9597 0 2
2585: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2586: LD_EXP 19
2590: PPUSH
2591: LD_INT 8
2593: PPUSH
2594: LD_INT 0
2596: PPUSH
2597: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2601: LD_EXP 19
2605: PPUSH
2606: LD_INT 350
2608: PPUSH
2609: CALL_OW 234
// if IsInUnit ( JMM ) then
2613: LD_EXP 1
2617: PPUSH
2618: CALL_OW 310
2622: IFFALSE 2665
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2624: LD_EXP 19
2628: PPUSH
2629: LD_EXP 1
2633: PPUSH
2634: CALL_OW 310
2638: PPUSH
2639: CALL_OW 250
2643: PPUSH
2644: LD_EXP 1
2648: PPUSH
2649: CALL_OW 310
2653: PPUSH
2654: CALL_OW 251
2658: PPUSH
2659: CALL_OW 111
2663: GO 2694
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2665: LD_EXP 19
2669: PPUSH
2670: LD_EXP 1
2674: PPUSH
2675: CALL_OW 250
2679: PPUSH
2680: LD_EXP 1
2684: PPUSH
2685: CALL_OW 251
2689: PPUSH
2690: CALL_OW 111
// end ; end_of_file
2694: LD_VAR 0 1
2698: RET
// export function PrepareRussians ; var i , un ; begin
2699: LD_INT 0
2701: PPUSH
2702: PPUSH
2703: PPUSH
// uc_side = 3 ;
2704: LD_ADDR_OWVAR 20
2708: PUSH
2709: LD_INT 3
2711: ST_TO_ADDR
// uc_nation = 3 ;
2712: LD_ADDR_OWVAR 21
2716: PUSH
2717: LD_INT 3
2719: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2720: LD_ADDR_EXP 25
2724: PUSH
2725: LD_STRING Tsaritsyn
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: CALL 9597 0 2
2735: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2736: LD_EXP 25
2740: PPUSH
2741: LD_INT 3
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// for i = 1 to 14 do
2751: LD_ADDR_VAR 0 2
2755: PUSH
2756: DOUBLE
2757: LD_INT 1
2759: DEC
2760: ST_TO_ADDR
2761: LD_INT 14
2763: PUSH
2764: FOR_TO
2765: IFFALSE 2851
// begin uc_side = 3 ;
2767: LD_ADDR_OWVAR 20
2771: PUSH
2772: LD_INT 3
2774: ST_TO_ADDR
// uc_nation = 3 ;
2775: LD_ADDR_OWVAR 21
2779: PUSH
2780: LD_INT 3
2782: ST_TO_ADDR
// hc_gallery =  ;
2783: LD_ADDR_OWVAR 33
2787: PUSH
2788: LD_STRING 
2790: ST_TO_ADDR
// hc_name =  ;
2791: LD_ADDR_OWVAR 26
2795: PUSH
2796: LD_STRING 
2798: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2799: LD_INT 0
2801: PPUSH
2802: LD_INT 1
2804: PPUSH
2805: LD_EXP 36
2809: PPUSH
2810: LD_EXP 37
2814: PPUSH
2815: CALL_OW 12
2819: PPUSH
2820: CALL_OW 380
// un = CreateHuman ;
2824: LD_ADDR_VAR 0 3
2828: PUSH
2829: CALL_OW 44
2833: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2834: LD_VAR 0 3
2838: PPUSH
2839: LD_INT 3
2841: PPUSH
2842: LD_INT 0
2844: PPUSH
2845: CALL_OW 49
// end ;
2849: GO 2764
2851: POP
2852: POP
// for i = 1 to 6 do
2853: LD_ADDR_VAR 0 2
2857: PUSH
2858: DOUBLE
2859: LD_INT 1
2861: DEC
2862: ST_TO_ADDR
2863: LD_INT 6
2865: PUSH
2866: FOR_TO
2867: IFFALSE 2953
// begin uc_side = 3 ;
2869: LD_ADDR_OWVAR 20
2873: PUSH
2874: LD_INT 3
2876: ST_TO_ADDR
// uc_nation = 3 ;
2877: LD_ADDR_OWVAR 21
2881: PUSH
2882: LD_INT 3
2884: ST_TO_ADDR
// hc_gallery =  ;
2885: LD_ADDR_OWVAR 33
2889: PUSH
2890: LD_STRING 
2892: ST_TO_ADDR
// hc_name =  ;
2893: LD_ADDR_OWVAR 26
2897: PUSH
2898: LD_STRING 
2900: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2901: LD_INT 0
2903: PPUSH
2904: LD_INT 2
2906: PPUSH
2907: LD_EXP 36
2911: PPUSH
2912: LD_EXP 37
2916: PPUSH
2917: CALL_OW 12
2921: PPUSH
2922: CALL_OW 380
// un = CreateHuman ;
2926: LD_ADDR_VAR 0 3
2930: PUSH
2931: CALL_OW 44
2935: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2936: LD_VAR 0 3
2940: PPUSH
2941: LD_INT 3
2943: PPUSH
2944: LD_INT 0
2946: PPUSH
2947: CALL_OW 49
// end ;
2951: GO 2866
2953: POP
2954: POP
// for i = 1 to 6 do
2955: LD_ADDR_VAR 0 2
2959: PUSH
2960: DOUBLE
2961: LD_INT 1
2963: DEC
2964: ST_TO_ADDR
2965: LD_INT 6
2967: PUSH
2968: FOR_TO
2969: IFFALSE 3055
// begin uc_side = 3 ;
2971: LD_ADDR_OWVAR 20
2975: PUSH
2976: LD_INT 3
2978: ST_TO_ADDR
// uc_nation = 3 ;
2979: LD_ADDR_OWVAR 21
2983: PUSH
2984: LD_INT 3
2986: ST_TO_ADDR
// hc_gallery =  ;
2987: LD_ADDR_OWVAR 33
2991: PUSH
2992: LD_STRING 
2994: ST_TO_ADDR
// hc_name =  ;
2995: LD_ADDR_OWVAR 26
2999: PUSH
3000: LD_STRING 
3002: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3003: LD_INT 0
3005: PPUSH
3006: LD_INT 3
3008: PPUSH
3009: LD_EXP 36
3013: PPUSH
3014: LD_EXP 37
3018: PPUSH
3019: CALL_OW 12
3023: PPUSH
3024: CALL_OW 380
// un = CreateHuman ;
3028: LD_ADDR_VAR 0 3
3032: PUSH
3033: CALL_OW 44
3037: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3038: LD_VAR 0 3
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_INT 0
3048: PPUSH
3049: CALL_OW 49
// end ;
3053: GO 2968
3055: POP
3056: POP
// for i = 1 to 4 do
3057: LD_ADDR_VAR 0 2
3061: PUSH
3062: DOUBLE
3063: LD_INT 1
3065: DEC
3066: ST_TO_ADDR
3067: LD_INT 4
3069: PUSH
3070: FOR_TO
3071: IFFALSE 3157
// begin uc_side = 3 ;
3073: LD_ADDR_OWVAR 20
3077: PUSH
3078: LD_INT 3
3080: ST_TO_ADDR
// uc_nation = 3 ;
3081: LD_ADDR_OWVAR 21
3085: PUSH
3086: LD_INT 3
3088: ST_TO_ADDR
// hc_gallery =  ;
3089: LD_ADDR_OWVAR 33
3093: PUSH
3094: LD_STRING 
3096: ST_TO_ADDR
// hc_name =  ;
3097: LD_ADDR_OWVAR 26
3101: PUSH
3102: LD_STRING 
3104: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3105: LD_INT 0
3107: PPUSH
3108: LD_INT 4
3110: PPUSH
3111: LD_EXP 36
3115: PPUSH
3116: LD_EXP 37
3120: PPUSH
3121: CALL_OW 12
3125: PPUSH
3126: CALL_OW 380
// un = CreateHuman ;
3130: LD_ADDR_VAR 0 3
3134: PUSH
3135: CALL_OW 44
3139: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3140: LD_VAR 0 3
3144: PPUSH
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 0
3150: PPUSH
3151: CALL_OW 49
// end ;
3155: GO 3070
3157: POP
3158: POP
// end ; end_of_file
3159: LD_VAR 0 1
3163: RET
// export function PrepareArabianCommander ; begin
3164: LD_INT 0
3166: PPUSH
// uc_side = 2 ;
3167: LD_ADDR_OWVAR 20
3171: PUSH
3172: LD_INT 2
3174: ST_TO_ADDR
// uc_nation = 2 ;
3175: LD_ADDR_OWVAR 21
3179: PUSH
3180: LD_INT 2
3182: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3183: LD_ADDR_EXP 26
3187: PUSH
3188: LD_STRING Dietrich
3190: PPUSH
3191: CALL_OW 25
3195: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3196: LD_EXP 26
3200: PPUSH
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 0
3206: PPUSH
3207: CALL_OW 49
// end ;
3211: LD_VAR 0 1
3215: RET
// export function PrepareArabian ; var i , un , veh ; begin
3216: LD_INT 0
3218: PPUSH
3219: PPUSH
3220: PPUSH
3221: PPUSH
// uc_side := 2 ;
3222: LD_ADDR_OWVAR 20
3226: PUSH
3227: LD_INT 2
3229: ST_TO_ADDR
// uc_nation := 2 ;
3230: LD_ADDR_OWVAR 21
3234: PUSH
3235: LD_INT 2
3237: ST_TO_ADDR
// if not Ahmed then
3238: LD_EXP 27
3242: NOT
3243: IFFALSE 3311
// begin InitHc ;
3245: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3249: LD_INT 1
3251: PPUSH
3252: LD_INT 1
3254: PPUSH
3255: LD_EXP 36
3259: PPUSH
3260: LD_EXP 37
3264: PUSH
3265: LD_INT 1
3267: PLUS
3268: PPUSH
3269: CALL_OW 12
3273: PPUSH
3274: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3278: LD_ADDR_OWVAR 26
3282: PUSH
3283: LD_STRING Ahmed Abbasid
3285: ST_TO_ADDR
// Ahmed := CreateHuman ;
3286: LD_ADDR_EXP 27
3290: PUSH
3291: CALL_OW 44
3295: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3296: LD_EXP 27
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// end ; for i = 1 to 3 do
3311: LD_ADDR_VAR 0 2
3315: PUSH
3316: DOUBLE
3317: LD_INT 1
3319: DEC
3320: ST_TO_ADDR
3321: LD_INT 3
3323: PUSH
3324: FOR_TO
3325: IFFALSE 3411
// begin uc_side = 2 ;
3327: LD_ADDR_OWVAR 20
3331: PUSH
3332: LD_INT 2
3334: ST_TO_ADDR
// uc_nation = 2 ;
3335: LD_ADDR_OWVAR 21
3339: PUSH
3340: LD_INT 2
3342: ST_TO_ADDR
// hc_gallery =  ;
3343: LD_ADDR_OWVAR 33
3347: PUSH
3348: LD_STRING 
3350: ST_TO_ADDR
// hc_name =  ;
3351: LD_ADDR_OWVAR 26
3355: PUSH
3356: LD_STRING 
3358: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3359: LD_INT 0
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: LD_EXP 36
3369: PPUSH
3370: LD_EXP 37
3374: PPUSH
3375: CALL_OW 12
3379: PPUSH
3380: CALL_OW 380
// un = CreateHuman ;
3384: LD_ADDR_VAR 0 3
3388: PUSH
3389: CALL_OW 44
3393: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3394: LD_VAR 0 3
3398: PPUSH
3399: LD_INT 4
3401: PPUSH
3402: LD_INT 0
3404: PPUSH
3405: CALL_OW 49
// end ;
3409: GO 3324
3411: POP
3412: POP
// for i = 1 to 6 do
3413: LD_ADDR_VAR 0 2
3417: PUSH
3418: DOUBLE
3419: LD_INT 1
3421: DEC
3422: ST_TO_ADDR
3423: LD_INT 6
3425: PUSH
3426: FOR_TO
3427: IFFALSE 3513
// begin uc_side = 2 ;
3429: LD_ADDR_OWVAR 20
3433: PUSH
3434: LD_INT 2
3436: ST_TO_ADDR
// uc_nation = 2 ;
3437: LD_ADDR_OWVAR 21
3441: PUSH
3442: LD_INT 2
3444: ST_TO_ADDR
// hc_gallery =  ;
3445: LD_ADDR_OWVAR 33
3449: PUSH
3450: LD_STRING 
3452: ST_TO_ADDR
// hc_name =  ;
3453: LD_ADDR_OWVAR 26
3457: PUSH
3458: LD_STRING 
3460: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3461: LD_INT 0
3463: PPUSH
3464: LD_INT 2
3466: PPUSH
3467: LD_EXP 36
3471: PPUSH
3472: LD_EXP 37
3476: PPUSH
3477: CALL_OW 12
3481: PPUSH
3482: CALL_OW 380
// un = CreateHuman ;
3486: LD_ADDR_VAR 0 3
3490: PUSH
3491: CALL_OW 44
3495: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3496: LD_VAR 0 3
3500: PPUSH
3501: LD_INT 4
3503: PPUSH
3504: LD_INT 0
3506: PPUSH
3507: CALL_OW 49
// end ;
3511: GO 3426
3513: POP
3514: POP
// for i = 1 to 6 do
3515: LD_ADDR_VAR 0 2
3519: PUSH
3520: DOUBLE
3521: LD_INT 1
3523: DEC
3524: ST_TO_ADDR
3525: LD_INT 6
3527: PUSH
3528: FOR_TO
3529: IFFALSE 3615
// begin uc_side = 2 ;
3531: LD_ADDR_OWVAR 20
3535: PUSH
3536: LD_INT 2
3538: ST_TO_ADDR
// uc_nation = 2 ;
3539: LD_ADDR_OWVAR 21
3543: PUSH
3544: LD_INT 2
3546: ST_TO_ADDR
// hc_gallery =  ;
3547: LD_ADDR_OWVAR 33
3551: PUSH
3552: LD_STRING 
3554: ST_TO_ADDR
// hc_name =  ;
3555: LD_ADDR_OWVAR 26
3559: PUSH
3560: LD_STRING 
3562: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3563: LD_INT 0
3565: PPUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_EXP 36
3573: PPUSH
3574: LD_EXP 37
3578: PPUSH
3579: CALL_OW 12
3583: PPUSH
3584: CALL_OW 380
// un = CreateHuman ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: CALL_OW 44
3597: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3598: LD_VAR 0 3
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_INT 0
3608: PPUSH
3609: CALL_OW 49
// end ;
3613: GO 3528
3615: POP
3616: POP
// for i = 1 to 4 do
3617: LD_ADDR_VAR 0 2
3621: PUSH
3622: DOUBLE
3623: LD_INT 1
3625: DEC
3626: ST_TO_ADDR
3627: LD_INT 4
3629: PUSH
3630: FOR_TO
3631: IFFALSE 3717
// begin uc_side = 2 ;
3633: LD_ADDR_OWVAR 20
3637: PUSH
3638: LD_INT 2
3640: ST_TO_ADDR
// uc_nation = 2 ;
3641: LD_ADDR_OWVAR 21
3645: PUSH
3646: LD_INT 2
3648: ST_TO_ADDR
// hc_gallery =  ;
3649: LD_ADDR_OWVAR 33
3653: PUSH
3654: LD_STRING 
3656: ST_TO_ADDR
// hc_name =  ;
3657: LD_ADDR_OWVAR 26
3661: PUSH
3662: LD_STRING 
3664: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3665: LD_INT 0
3667: PPUSH
3668: LD_INT 4
3670: PPUSH
3671: LD_EXP 36
3675: PPUSH
3676: LD_EXP 37
3680: PPUSH
3681: CALL_OW 12
3685: PPUSH
3686: CALL_OW 380
// un = CreateHuman ;
3690: LD_ADDR_VAR 0 3
3694: PUSH
3695: CALL_OW 44
3699: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3700: LD_VAR 0 3
3704: PPUSH
3705: LD_INT 4
3707: PPUSH
3708: LD_INT 0
3710: PPUSH
3711: CALL_OW 49
// end ;
3715: GO 3630
3717: POP
3718: POP
// for i = 1 to 2 do
3719: LD_ADDR_VAR 0 2
3723: PUSH
3724: DOUBLE
3725: LD_INT 1
3727: DEC
3728: ST_TO_ADDR
3729: LD_INT 2
3731: PUSH
3732: FOR_TO
3733: IFFALSE 3863
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3735: LD_ADDR_VAR 0 4
3739: PUSH
3740: LD_INT 22
3742: PUSH
3743: LD_INT 2
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: LD_INT 21
3752: PUSH
3753: LD_INT 2
3755: PUSH
3756: EMPTY
3757: LIST
3758: LIST
3759: PUSH
3760: LD_INT 58
3762: PUSH
3763: EMPTY
3764: LIST
3765: PUSH
3766: EMPTY
3767: LIST
3768: LIST
3769: LIST
3770: PPUSH
3771: CALL_OW 69
3775: ST_TO_ADDR
// uc_side = 2 ;
3776: LD_ADDR_OWVAR 20
3780: PUSH
3781: LD_INT 2
3783: ST_TO_ADDR
// uc_nation = 2 ;
3784: LD_ADDR_OWVAR 21
3788: PUSH
3789: LD_INT 2
3791: ST_TO_ADDR
// hc_gallery =  ;
3792: LD_ADDR_OWVAR 33
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// hc_name =  ;
3800: LD_ADDR_OWVAR 26
3804: PUSH
3805: LD_STRING 
3807: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3808: LD_INT 0
3810: PPUSH
3811: LD_INT 3
3813: PPUSH
3814: LD_EXP 36
3818: PPUSH
3819: LD_EXP 37
3823: PPUSH
3824: CALL_OW 12
3828: PPUSH
3829: CALL_OW 380
// un = CreateHuman ;
3833: LD_ADDR_VAR 0 3
3837: PUSH
3838: CALL_OW 44
3842: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3843: LD_VAR 0 3
3847: PPUSH
3848: LD_VAR 0 4
3852: PUSH
3853: LD_INT 1
3855: ARRAY
3856: PPUSH
3857: CALL_OW 52
// end ;
3861: GO 3732
3863: POP
3864: POP
// end ;
3865: LD_VAR 0 1
3869: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3870: LD_INT 0
3872: PPUSH
3873: PPUSH
3874: PPUSH
3875: PPUSH
3876: PPUSH
3877: PPUSH
// for i := 1 to 2 do
3878: LD_ADDR_VAR 0 2
3882: PUSH
3883: DOUBLE
3884: LD_INT 1
3886: DEC
3887: ST_TO_ADDR
3888: LD_INT 2
3890: PUSH
3891: FOR_TO
3892: IFFALSE 4018
// begin uc_side = 5 ;
3894: LD_ADDR_OWVAR 20
3898: PUSH
3899: LD_INT 5
3901: ST_TO_ADDR
// uc_nation = 2 ;
3902: LD_ADDR_OWVAR 21
3906: PUSH
3907: LD_INT 2
3909: ST_TO_ADDR
// vc_chassis := 31 ;
3910: LD_ADDR_OWVAR 37
3914: PUSH
3915: LD_INT 31
3917: ST_TO_ADDR
// vc_control := control_rider ;
3918: LD_ADDR_OWVAR 38
3922: PUSH
3923: LD_INT 4
3925: ST_TO_ADDR
// animal := CreateVehicle ;
3926: LD_ADDR_VAR 0 3
3930: PUSH
3931: CALL_OW 45
3935: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3936: LD_VAR 0 3
3940: PPUSH
3941: LD_INT 7
3943: PPUSH
3944: LD_INT 0
3946: PPUSH
3947: CALL_OW 49
// hc_gallery =  ;
3951: LD_ADDR_OWVAR 33
3955: PUSH
3956: LD_STRING 
3958: ST_TO_ADDR
// hc_name =  ;
3959: LD_ADDR_OWVAR 26
3963: PUSH
3964: LD_STRING 
3966: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3967: LD_INT 0
3969: PPUSH
3970: LD_INT 11
3972: PPUSH
3973: LD_EXP 36
3977: PPUSH
3978: LD_EXP 37
3982: PPUSH
3983: CALL_OW 12
3987: PPUSH
3988: CALL_OW 380
// un = CreateHuman ;
3992: LD_ADDR_VAR 0 4
3996: PUSH
3997: CALL_OW 44
4001: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4002: LD_VAR 0 4
4006: PPUSH
4007: LD_VAR 0 3
4011: PPUSH
4012: CALL_OW 52
// end ;
4016: GO 3891
4018: POP
4019: POP
// repeat wait ( 0 0$1 ) ;
4020: LD_INT 35
4022: PPUSH
4023: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4027: LD_ADDR_VAR 0 5
4031: PUSH
4032: LD_INT 22
4034: PUSH
4035: LD_INT 1
4037: PUSH
4038: EMPTY
4039: LIST
4040: LIST
4041: PPUSH
4042: CALL_OW 69
4046: PPUSH
4047: LD_VAR 0 2
4051: PPUSH
4052: CALL_OW 74
4056: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4057: LD_ADDR_VAR 0 6
4061: PUSH
4062: LD_INT 22
4064: PUSH
4065: LD_INT 1
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: LD_INT 59
4077: PUSH
4078: EMPTY
4079: LIST
4080: PUSH
4081: LD_INT 21
4083: PUSH
4084: LD_INT 1
4086: PUSH
4087: EMPTY
4088: LIST
4089: LIST
4090: PUSH
4091: LD_INT 21
4093: PUSH
4094: LD_INT 2
4096: PUSH
4097: EMPTY
4098: LIST
4099: LIST
4100: PUSH
4101: EMPTY
4102: LIST
4103: LIST
4104: LIST
4105: LIST
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PUSH
4111: EMPTY
4112: LIST
4113: PPUSH
4114: CALL_OW 69
4118: PPUSH
4119: LD_VAR 0 2
4123: PPUSH
4124: CALL_OW 74
4128: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: LD_INT 22
4136: PUSH
4137: LD_INT 5
4139: PUSH
4140: EMPTY
4141: LIST
4142: LIST
4143: PUSH
4144: LD_INT 25
4146: PUSH
4147: LD_INT 11
4149: PUSH
4150: EMPTY
4151: LIST
4152: LIST
4153: PUSH
4154: EMPTY
4155: LIST
4156: LIST
4157: PPUSH
4158: CALL_OW 69
4162: PUSH
4163: FOR_IN
4164: IFFALSE 4234
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: CALL_OW 296
4180: PUSH
4181: LD_INT 8
4183: PLUS
4184: PUSH
4185: LD_VAR 0 2
4189: PPUSH
4190: LD_VAR 0 6
4194: PPUSH
4195: CALL_OW 296
4199: LESS
4200: IFFALSE 4218
// ComAttackUnit ( i , target1 ) else
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_VAR 0 5
4211: PPUSH
4212: CALL_OW 115
4216: GO 4232
// ComAttackUnit ( i , target2 ) ;
4218: LD_VAR 0 2
4222: PPUSH
4223: LD_VAR 0 6
4227: PPUSH
4228: CALL_OW 115
// end ;
4232: GO 4163
4234: POP
4235: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4236: LD_INT 22
4238: PUSH
4239: LD_INT 5
4241: PUSH
4242: EMPTY
4243: LIST
4244: LIST
4245: PUSH
4246: LD_INT 25
4248: PUSH
4249: LD_INT 11
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: PPUSH
4260: CALL_OW 69
4264: PUSH
4265: LD_INT 0
4267: EQUAL
4268: PUSH
4269: LD_INT 22
4271: PUSH
4272: LD_INT 1
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: PPUSH
4279: CALL_OW 69
4283: PUSH
4284: LD_INT 0
4286: EQUAL
4287: OR
4288: IFFALSE 4020
// end ; end_of_file
4290: LD_VAR 0 1
4294: RET
// every 1 do
4295: GO 4297
4297: DISABLE
// begin InGameOn ;
4298: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4302: LD_INT 1
4304: PPUSH
4305: LD_INT 19
4307: PPUSH
4308: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4312: LD_EXP 11
4316: PPUSH
4317: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4321: LD_INT 22
4323: PUSH
4324: LD_INT 4
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: LD_INT 25
4333: PUSH
4334: LD_INT 2
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: PUSH
4341: EMPTY
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 69
4349: IFFALSE 4397
// begin repeat wait ( 0 0$1 ) ;
4351: LD_INT 35
4353: PPUSH
4354: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4358: LD_INT 22
4360: PUSH
4361: LD_INT 4
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PUSH
4368: LD_INT 30
4370: PUSH
4371: LD_INT 0
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: PPUSH
4382: CALL_OW 69
4386: IFFALSE 4351
// Wait ( 0 0$1 ) ;
4388: LD_INT 35
4390: PPUSH
4391: CALL_OW 67
// end else
4395: GO 4404
// Wait ( 0 0$3 ) ;
4397: LD_INT 105
4399: PPUSH
4400: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4404: LD_EXP 1
4408: PPUSH
4409: CALL_OW 310
4413: PPUSH
4414: CALL_OW 85
// Wait ( 0 0$1 ) ;
4418: LD_INT 35
4420: PPUSH
4421: CALL_OW 67
// if IsOk ( Gary ) then
4425: LD_EXP 10
4429: PPUSH
4430: CALL_OW 302
4434: IFFALSE 4472
// begin Say ( Gary , D2-Gary-1 ) ;
4436: LD_EXP 10
4440: PPUSH
4441: LD_STRING D2-Gary-1
4443: PPUSH
4444: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4448: LD_EXP 1
4452: PPUSH
4453: LD_STRING D2-JMM-1
4455: PPUSH
4456: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4460: LD_EXP 10
4464: PPUSH
4465: LD_STRING D2-Gary-2
4467: PPUSH
4468: CALL_OW 88
// end ; InGameOff ;
4472: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4476: LD_STRING M1
4478: PPUSH
4479: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4483: LD_INT 38
4485: PPUSH
4486: LD_INT 1
4488: PPUSH
4489: LD_INT 100
4491: PPUSH
4492: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4496: LD_INT 47
4498: PPUSH
4499: LD_INT 1
4501: PPUSH
4502: LD_INT 50
4504: PPUSH
4505: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4509: LD_INT 47
4511: PPUSH
4512: LD_INT 3
4514: PPUSH
4515: LD_INT 50
4517: PPUSH
4518: CALL_OW 291
// SaveForQuickRestart ;
4522: CALL_OW 22
// end ;
4526: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4527: LD_EXP 1
4531: PPUSH
4532: LD_EXP 11
4536: PPUSH
4537: CALL_OW 296
4541: PUSH
4542: LD_INT 15
4544: LESS
4545: IFFALSE 5011
4547: GO 4549
4549: DISABLE
// begin InGameOn ;
4550: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4554: LD_EXP 1
4558: PPUSH
4559: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4563: LD_EXP 1
4567: PPUSH
4568: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4572: LD_EXP 1
4576: PPUSH
4577: LD_EXP 11
4581: PPUSH
4582: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4586: LD_INT 35
4588: PPUSH
4589: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4593: LD_EXP 11
4597: PUSH
4598: LD_EXP 13
4602: PUSH
4603: LD_EXP 12
4607: PUSH
4608: LD_EXP 14
4612: PUSH
4613: LD_EXP 8
4617: PUSH
4618: EMPTY
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: PPUSH
4625: LD_EXP 1
4629: PPUSH
4630: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4634: LD_EXP 1
4638: PPUSH
4639: LD_EXP 11
4643: PPUSH
4644: CALL_OW 296
4648: PUSH
4649: LD_INT 5
4651: LESS
4652: IFFALSE 4586
// ComTurnUnit ( JMM , Simms ) ;
4654: LD_EXP 1
4658: PPUSH
4659: LD_EXP 11
4663: PPUSH
4664: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4668: LD_EXP 11
4672: PUSH
4673: LD_EXP 13
4677: PUSH
4678: LD_EXP 12
4682: PUSH
4683: LD_EXP 14
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PPUSH
4694: LD_EXP 1
4698: PPUSH
4699: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4703: LD_EXP 1
4707: PUSH
4708: LD_EXP 11
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: PPUSH
4717: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4721: LD_EXP 11
4725: PPUSH
4726: LD_STRING D2a-Sim-1
4728: PPUSH
4729: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4733: LD_EXP 1
4737: PPUSH
4738: LD_STRING D2a-JMM-1
4740: PPUSH
4741: CALL_OW 88
// if IsOk ( Joan ) then
4745: LD_EXP 13
4749: PPUSH
4750: CALL_OW 302
4754: IFFALSE 4806
// begin ComTurnUnit ( JMM , Joan ) ;
4756: LD_EXP 1
4760: PPUSH
4761: LD_EXP 13
4765: PPUSH
4766: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4770: LD_EXP 13
4774: PPUSH
4775: LD_STRING D2b-Joan-1
4777: PPUSH
4778: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4782: LD_EXP 1
4786: PPUSH
4787: LD_STRING D2b-JMM-1
4789: PPUSH
4790: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4794: LD_EXP 13
4798: PPUSH
4799: LD_STRING D2b-Joan-2
4801: PPUSH
4802: CALL_OW 88
// end ; if IsOk ( Denis ) then
4806: LD_EXP 12
4810: PPUSH
4811: CALL_OW 302
4815: IFFALSE 4843
// begin ComTurnUnit ( JMM , Denis ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_EXP 12
4826: PPUSH
4827: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4831: LD_EXP 12
4835: PPUSH
4836: LD_STRING D2c-Den-1
4838: PPUSH
4839: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4843: LD_EXP 8
4847: PPUSH
4848: CALL_OW 302
4852: IFFALSE 4921
// begin repeat wait ( 0 0$1 ) ;
4854: LD_INT 35
4856: PPUSH
4857: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4861: LD_EXP 8
4865: PPUSH
4866: LD_EXP 1
4870: PPUSH
4871: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4875: LD_EXP 1
4879: PPUSH
4880: LD_EXP 8
4884: PPUSH
4885: CALL_OW 296
4889: PUSH
4890: LD_INT 5
4892: LESS
4893: IFFALSE 4854
// ComTurnUnit ( JMM , Kikuchi ) ;
4895: LD_EXP 1
4899: PPUSH
4900: LD_EXP 8
4904: PPUSH
4905: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4909: LD_EXP 8
4913: PPUSH
4914: LD_STRING D3b-Yam-1
4916: PPUSH
4917: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4921: LD_EXP 14
4925: PPUSH
4926: CALL_OW 302
4930: IFFALSE 4970
// begin ComTurnUnit ( JMM , Khatam ) ;
4932: LD_EXP 1
4936: PPUSH
4937: LD_EXP 14
4941: PPUSH
4942: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4946: LD_EXP 1
4950: PPUSH
4951: LD_STRING D2c-JMM-1
4953: PPUSH
4954: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4958: LD_EXP 14
4962: PPUSH
4963: LD_STRING D2c-Khat-1
4965: PPUSH
4966: CALL_OW 88
// end ; InGameOff ;
4970: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4974: LD_INT 22
4976: PUSH
4977: LD_INT 4
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: PPUSH
4989: LD_INT 1
4991: PPUSH
4992: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4996: LD_STRING M1a
4998: PPUSH
4999: CALL_OW 337
// joinEpsilon = 1 ;
5003: LD_ADDR_EXP 29
5007: PUSH
5008: LD_INT 1
5010: ST_TO_ADDR
// end ;
5011: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
5012: LD_INT 38
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: CALL_OW 289
5022: PUSH
5023: LD_INT 0
5025: EQUAL
5026: PUSH
5027: LD_INT 47
5029: PPUSH
5030: LD_INT 1
5032: PPUSH
5033: CALL_OW 289
5037: PUSH
5038: LD_INT 0
5040: EQUAL
5041: AND
5042: PUSH
5043: LD_INT 47
5045: PPUSH
5046: LD_INT 2
5048: PPUSH
5049: CALL_OW 289
5053: PUSH
5054: LD_INT 0
5056: EQUAL
5057: AND
5058: IFFALSE 5083
5060: GO 5062
5062: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5063: LD_INT 38
5065: PUSH
5066: LD_INT 47
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: PPUSH
5073: LD_INT 62
5075: PPUSH
5076: LD_INT 6
5078: PPUSH
5079: CALL_OW 111
5083: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5084: LD_EXP 61
5088: PUSH
5089: LD_INT 1
5091: EQUAL
5092: IFFALSE 6224
5094: GO 5096
5096: DISABLE
5097: LD_INT 0
5099: PPUSH
5100: PPUSH
5101: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5102: LD_ADDR_VAR 0 1
5106: PUSH
5107: LD_INT 22
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 25
5119: PUSH
5120: LD_INT 4
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: LD_INT 26
5129: PUSH
5130: LD_INT 1
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: EMPTY
5138: LIST
5139: LIST
5140: LIST
5141: PPUSH
5142: CALL_OW 69
5146: PUSH
5147: LD_EXP 1
5151: PUSH
5152: LD_EXP 2
5156: PUSH
5157: LD_EXP 3
5161: PUSH
5162: LD_EXP 4
5166: PUSH
5167: LD_EXP 5
5171: PUSH
5172: LD_EXP 6
5176: PUSH
5177: LD_EXP 7
5181: PUSH
5182: LD_EXP 8
5186: PUSH
5187: LD_EXP 9
5191: PUSH
5192: LD_EXP 10
5196: PUSH
5197: LD_EXP 11
5201: PUSH
5202: LD_EXP 12
5206: PUSH
5207: LD_EXP 13
5211: PUSH
5212: LD_EXP 14
5216: PUSH
5217: LD_EXP 15
5221: PUSH
5222: LD_EXP 16
5226: PUSH
5227: LD_EXP 17
5231: PUSH
5232: LD_EXP 18
5236: PUSH
5237: LD_EXP 19
5241: PUSH
5242: LD_EXP 24
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: LIST
5266: LIST
5267: LIST
5268: DIFF
5269: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5270: LD_ADDR_VAR 0 2
5274: PUSH
5275: LD_INT 22
5277: PUSH
5278: LD_INT 1
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: LD_INT 26
5287: PUSH
5288: LD_INT 1
5290: PUSH
5291: EMPTY
5292: LIST
5293: LIST
5294: PUSH
5295: LD_INT 2
5297: PUSH
5298: LD_INT 25
5300: PUSH
5301: LD_INT 1
5303: PUSH
5304: EMPTY
5305: LIST
5306: LIST
5307: PUSH
5308: LD_INT 25
5310: PUSH
5311: LD_INT 2
5313: PUSH
5314: EMPTY
5315: LIST
5316: LIST
5317: PUSH
5318: LD_INT 25
5320: PUSH
5321: LD_INT 3
5323: PUSH
5324: EMPTY
5325: LIST
5326: LIST
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: PUSH
5334: EMPTY
5335: LIST
5336: LIST
5337: LIST
5338: PPUSH
5339: CALL_OW 69
5343: PUSH
5344: LD_EXP 1
5348: PUSH
5349: LD_EXP 2
5353: PUSH
5354: LD_EXP 3
5358: PUSH
5359: LD_EXP 4
5363: PUSH
5364: LD_EXP 5
5368: PUSH
5369: LD_EXP 6
5373: PUSH
5374: LD_EXP 7
5378: PUSH
5379: LD_EXP 8
5383: PUSH
5384: LD_EXP 9
5388: PUSH
5389: LD_EXP 10
5393: PUSH
5394: LD_EXP 11
5398: PUSH
5399: LD_EXP 12
5403: PUSH
5404: LD_EXP 13
5408: PUSH
5409: LD_EXP 14
5413: PUSH
5414: LD_EXP 15
5418: PUSH
5419: LD_EXP 16
5423: PUSH
5424: LD_EXP 17
5428: PUSH
5429: LD_EXP 18
5433: PUSH
5434: LD_EXP 19
5438: PUSH
5439: LD_EXP 24
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: LIST
5448: LIST
5449: LIST
5450: LIST
5451: LIST
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: LIST
5457: LIST
5458: LIST
5459: LIST
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: DIFF
5466: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5467: LD_EXP 10
5471: PUSH
5472: LD_VAR 0 2
5476: OR
5477: PUSH
5478: LD_EXP 17
5482: PUSH
5483: LD_VAR 0 1
5487: OR
5488: AND
5489: IFFALSE 5708
// begin DialogueOn ;
5491: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5495: LD_EXP 17
5499: PPUSH
5500: CALL_OW 302
5504: IFFALSE 5520
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5506: LD_EXP 17
5510: PPUSH
5511: LD_STRING D3-Sci1-1
5513: PPUSH
5514: CALL_OW 88
5518: GO 5532
// Say ( tmp1 , D3-Sci1-1 ) ;
5520: LD_VAR 0 1
5524: PPUSH
5525: LD_STRING D3-Sci1-1
5527: PPUSH
5528: CALL_OW 88
// if IsOk ( Gary ) then
5532: LD_EXP 10
5536: PPUSH
5537: CALL_OW 302
5541: IFFALSE 5557
// Say ( Gary , D3-Gary-1 ) else
5543: LD_EXP 10
5547: PPUSH
5548: LD_STRING D3-Gary-1
5550: PPUSH
5551: CALL_OW 88
5555: GO 5569
// Say ( tmp2 , D3-Gary-1 ) ;
5557: LD_VAR 0 2
5561: PPUSH
5562: LD_STRING D3-Gary-1
5564: PPUSH
5565: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5569: LD_EXP 17
5573: PPUSH
5574: CALL_OW 302
5578: IFFALSE 5594
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5580: LD_EXP 17
5584: PPUSH
5585: LD_STRING D3-Sci1-2
5587: PPUSH
5588: CALL_OW 88
5592: GO 5606
// Say ( tmp1 , D3-Sci1-2 ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_STRING D3-Sci1-2
5601: PPUSH
5602: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5606: LD_EXP 1
5610: PPUSH
5611: LD_STRING D3-JMM-2
5613: PPUSH
5614: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5618: LD_EXP 17
5622: PPUSH
5623: CALL_OW 302
5627: IFFALSE 5643
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5629: LD_EXP 17
5633: PPUSH
5634: LD_STRING D3-Sci1-3
5636: PPUSH
5637: CALL_OW 88
5641: GO 5655
// Say ( tmp1 , D3-Sci1-3 ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_STRING D3-Sci1-3
5650: PPUSH
5651: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5655: LD_EXP 1
5659: PPUSH
5660: LD_STRING D3-JMM-3
5662: PPUSH
5663: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5667: LD_EXP 17
5671: PPUSH
5672: CALL_OW 302
5676: IFFALSE 5692
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5678: LD_EXP 17
5682: PPUSH
5683: LD_STRING D3-Sci1-4
5685: PPUSH
5686: CALL_OW 88
5690: GO 5704
// Say ( tmp1 , D3-Sci1-4 ) ;
5692: LD_VAR 0 1
5696: PPUSH
5697: LD_STRING D3-Sci1-4
5699: PPUSH
5700: CALL_OW 88
// DialogueOff ;
5704: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5708: LD_INT 12
5710: PPUSH
5711: LD_INT 1
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5721: LD_INT 32
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: LD_INT 1
5729: PPUSH
5730: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5734: LD_INT 12
5736: PPUSH
5737: LD_INT 1
5739: PPUSH
5740: LD_INT 1
5742: PPUSH
5743: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5747: LD_INT 33
5749: PPUSH
5750: LD_INT 1
5752: PPUSH
5753: LD_INT 1
5755: PPUSH
5756: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5760: LD_STRING M2
5762: PPUSH
5763: CALL_OW 337
// wait ( 3 3$0 ) ;
5767: LD_INT 6300
5769: PPUSH
5770: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5774: LD_INT 35
5776: PPUSH
5777: CALL_OW 67
// until not InBattle ( 1 ) ;
5781: LD_INT 1
5783: PPUSH
5784: CALL_OW 463
5788: NOT
5789: IFFALSE 5774
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5791: LD_EXP 11
5795: PPUSH
5796: CALL_OW 302
5800: PUSH
5801: LD_EXP 17
5805: PPUSH
5806: CALL_OW 302
5810: AND
5811: IFFALSE 5980
// begin DialogueOn ;
5813: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5817: LD_EXP 11
5821: PPUSH
5822: LD_STRING D3a-Sim-1
5824: PPUSH
5825: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5829: LD_EXP 17
5833: PPUSH
5834: LD_STRING D3a-Sci1-1
5836: PPUSH
5837: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5841: LD_EXP 11
5845: PPUSH
5846: LD_STRING D3a-Sim-2
5848: PPUSH
5849: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5853: LD_EXP 17
5857: PPUSH
5858: LD_STRING D3a-Sci1-2
5860: PPUSH
5861: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5865: LD_EXP 11
5869: PPUSH
5870: LD_STRING D3a-Sim-3
5872: PPUSH
5873: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5877: LD_EXP 17
5881: PPUSH
5882: LD_STRING D3a-Sci1-3
5884: PPUSH
5885: CALL_OW 88
// if IsOK ( Joan ) then
5889: LD_EXP 13
5893: PPUSH
5894: CALL_OW 302
5898: IFFALSE 5914
// Say ( Simms , D3a-Sim-4 ) else
5900: LD_EXP 11
5904: PPUSH
5905: LD_STRING D3a-Sim-4
5907: PPUSH
5908: CALL_OW 88
5912: GO 5926
// Say ( Simms , D3a-Sim-4a ) ;
5914: LD_EXP 11
5918: PPUSH
5919: LD_STRING D3a-Sim-4a
5921: PPUSH
5922: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5926: LD_EXP 17
5930: PPUSH
5931: LD_STRING D3a-Sci1-4
5933: PPUSH
5934: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5938: LD_EXP 11
5942: PPUSH
5943: LD_STRING D3a-Sim-5
5945: PPUSH
5946: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5950: LD_EXP 17
5954: PPUSH
5955: LD_STRING D3a-Sci1-5
5957: PPUSH
5958: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5962: LD_EXP 11
5966: PPUSH
5967: LD_STRING D3a-Sim-6
5969: PPUSH
5970: CALL_OW 88
// DialogueOff ;
5974: CALL_OW 7
// end else
5978: GO 6224
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5980: LD_ADDR_VAR 0 3
5984: PUSH
5985: LD_INT 22
5987: PUSH
5988: LD_INT 1
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 25
5997: PUSH
5998: LD_INT 4
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: EMPTY
6006: LIST
6007: LIST
6008: PPUSH
6009: CALL_OW 69
6013: PUSH
6014: LD_EXP 11
6018: PUSH
6019: LD_EXP 14
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: DIFF
6028: ST_TO_ADDR
// if tmp3 > 0 then
6029: LD_VAR 0 3
6033: PUSH
6034: LD_INT 0
6036: GREATER
6037: IFFALSE 6224
// begin DialogueOn ;
6039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6043: LD_EXP 11
6047: PPUSH
6048: LD_STRING D3a-Sim-1
6050: PPUSH
6051: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6055: LD_VAR 0 3
6059: PUSH
6060: LD_INT 1
6062: ARRAY
6063: PPUSH
6064: LD_STRING D3a-Sci1-1
6066: PPUSH
6067: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6071: LD_EXP 11
6075: PPUSH
6076: LD_STRING D3a-Sim-2
6078: PPUSH
6079: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6083: LD_VAR 0 3
6087: PUSH
6088: LD_INT 1
6090: ARRAY
6091: PPUSH
6092: LD_STRING D3a-Sci1-2
6094: PPUSH
6095: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6099: LD_EXP 11
6103: PPUSH
6104: LD_STRING D3a-Sim-3
6106: PPUSH
6107: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6111: LD_VAR 0 3
6115: PUSH
6116: LD_INT 1
6118: ARRAY
6119: PPUSH
6120: LD_STRING D3a-Sci1-3
6122: PPUSH
6123: CALL_OW 88
// if IsOK ( Joan ) then
6127: LD_EXP 13
6131: PPUSH
6132: CALL_OW 302
6136: IFFALSE 6152
// Say ( Simms , D3a-Sim-4 ) else
6138: LD_EXP 11
6142: PPUSH
6143: LD_STRING D3a-Sim-4
6145: PPUSH
6146: CALL_OW 88
6150: GO 6164
// Say ( Simms , D3a-Sim-4a ) ;
6152: LD_EXP 11
6156: PPUSH
6157: LD_STRING D3a-Sim-4a
6159: PPUSH
6160: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6164: LD_VAR 0 3
6168: PUSH
6169: LD_INT 1
6171: ARRAY
6172: PPUSH
6173: LD_STRING D3a-Sci1-4
6175: PPUSH
6176: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6180: LD_EXP 11
6184: PPUSH
6185: LD_STRING D3a-Sim-5
6187: PPUSH
6188: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6192: LD_VAR 0 3
6196: PUSH
6197: LD_INT 1
6199: ARRAY
6200: PPUSH
6201: LD_STRING D3a-Sci1-5
6203: PPUSH
6204: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6208: LD_EXP 11
6212: PPUSH
6213: LD_STRING D3a-Sim-6
6215: PPUSH
6216: CALL_OW 88
// DialogueOff ;
6220: CALL_OW 7
// end ; end ; end ;
6224: PPOPN 3
6226: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6227: LD_EXP 29
6231: PUSH
6232: LD_INT 1
6234: EQUAL
6235: IFFALSE 6555
6237: GO 6239
6239: DISABLE
6240: LD_INT 0
6242: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6243: LD_EXP 18
6247: PPUSH
6248: LD_STRING D4-FSol1-1
6250: PPUSH
6251: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6255: LD_STRING M3
6257: PPUSH
6258: CALL_OW 337
// PrepareRussians ;
6262: CALL 2699 0 0
// rnd = Rand ( 1 , 100 ) ;
6266: LD_ADDR_VAR 0 1
6270: PUSH
6271: LD_INT 1
6273: PPUSH
6274: LD_INT 100
6276: PPUSH
6277: CALL_OW 12
6281: ST_TO_ADDR
// if difficulty = 1 then
6282: LD_OWVAR 67
6286: PUSH
6287: LD_INT 1
6289: EQUAL
6290: IFFALSE 6373
// begin if rnd > 0 and rnd < 51 then
6292: LD_VAR 0 1
6296: PUSH
6297: LD_INT 0
6299: GREATER
6300: PUSH
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 51
6308: LESS
6309: AND
6310: IFFALSE 6319
// BuildRussianBase ( 2 ) ;
6312: LD_INT 2
6314: PPUSH
6315: CALL 10323 0 1
// if rnd > 50 and rnd < 81 then
6319: LD_VAR 0 1
6323: PUSH
6324: LD_INT 50
6326: GREATER
6327: PUSH
6328: LD_VAR 0 1
6332: PUSH
6333: LD_INT 81
6335: LESS
6336: AND
6337: IFFALSE 6346
// BuildRussianBase ( 1 ) ;
6339: LD_INT 1
6341: PPUSH
6342: CALL 10323 0 1
// if rnd > 80 and rnd < 101 then
6346: LD_VAR 0 1
6350: PUSH
6351: LD_INT 80
6353: GREATER
6354: PUSH
6355: LD_VAR 0 1
6359: PUSH
6360: LD_INT 101
6362: LESS
6363: AND
6364: IFFALSE 6373
// BuildRussianBase ( 3 ) ;
6366: LD_INT 3
6368: PPUSH
6369: CALL 10323 0 1
// end ; if difficulty = 2 then
6373: LD_OWVAR 67
6377: PUSH
6378: LD_INT 2
6380: EQUAL
6381: IFFALSE 6464
// begin if rnd > 0 and rnd < 61 then
6383: LD_VAR 0 1
6387: PUSH
6388: LD_INT 0
6390: GREATER
6391: PUSH
6392: LD_VAR 0 1
6396: PUSH
6397: LD_INT 61
6399: LESS
6400: AND
6401: IFFALSE 6410
// BuildRussianBase ( 2 ) ;
6403: LD_INT 2
6405: PPUSH
6406: CALL 10323 0 1
// if rnd > 60 and rnd < 81 then
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 60
6417: GREATER
6418: PUSH
6419: LD_VAR 0 1
6423: PUSH
6424: LD_INT 81
6426: LESS
6427: AND
6428: IFFALSE 6437
// BuildRussianBase ( 1 ) ;
6430: LD_INT 1
6432: PPUSH
6433: CALL 10323 0 1
// if rnd > 80 and rnd < 101 then
6437: LD_VAR 0 1
6441: PUSH
6442: LD_INT 80
6444: GREATER
6445: PUSH
6446: LD_VAR 0 1
6450: PUSH
6451: LD_INT 101
6453: LESS
6454: AND
6455: IFFALSE 6464
// BuildRussianBase ( 3 ) ;
6457: LD_INT 3
6459: PPUSH
6460: CALL 10323 0 1
// end ; if difficulty = 3 then
6464: LD_OWVAR 67
6468: PUSH
6469: LD_INT 3
6471: EQUAL
6472: IFFALSE 6555
// begin if rnd > 0 and rnd < 71 then
6474: LD_VAR 0 1
6478: PUSH
6479: LD_INT 0
6481: GREATER
6482: PUSH
6483: LD_VAR 0 1
6487: PUSH
6488: LD_INT 71
6490: LESS
6491: AND
6492: IFFALSE 6501
// BuildRussianBase ( 3 ) ;
6494: LD_INT 3
6496: PPUSH
6497: CALL 10323 0 1
// if rnd > 70 and rnd < 81 then
6501: LD_VAR 0 1
6505: PUSH
6506: LD_INT 70
6508: GREATER
6509: PUSH
6510: LD_VAR 0 1
6514: PUSH
6515: LD_INT 81
6517: LESS
6518: AND
6519: IFFALSE 6528
// BuildRussianBase ( 2 ) ;
6521: LD_INT 2
6523: PPUSH
6524: CALL 10323 0 1
// if rnd > 80 and rnd < 101 then
6528: LD_VAR 0 1
6532: PUSH
6533: LD_INT 80
6535: GREATER
6536: PUSH
6537: LD_VAR 0 1
6541: PUSH
6542: LD_INT 101
6544: LESS
6545: AND
6546: IFFALSE 6555
// BuildRussianBase ( 1 ) ;
6548: LD_INT 1
6550: PPUSH
6551: CALL 10323 0 1
// end ; end ;
6555: PPOPN 1
6557: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6558: LD_INT 54
6560: PPUSH
6561: LD_INT 1
6563: PPUSH
6564: CALL_OW 321
6568: PUSH
6569: LD_INT 2
6571: EQUAL
6572: PUSH
6573: LD_INT 21
6575: PPUSH
6576: LD_INT 1
6578: PPUSH
6579: CALL_OW 321
6583: PUSH
6584: LD_INT 2
6586: EQUAL
6587: OR
6588: PUSH
6589: LD_INT 22
6591: PPUSH
6592: LD_INT 1
6594: PPUSH
6595: CALL_OW 321
6599: PUSH
6600: LD_INT 2
6602: EQUAL
6603: OR
6604: IFFALSE 6916
6606: GO 6608
6608: DISABLE
6609: LD_INT 0
6611: PPUSH
6612: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6613: LD_EXP 17
6617: PPUSH
6618: CALL_OW 302
6622: IFFALSE 6636
// tmp := DeltaDoctor else
6624: LD_ADDR_VAR 0 2
6628: PUSH
6629: LD_EXP 17
6633: ST_TO_ADDR
6634: GO 6646
// tmp := Denis ;
6636: LD_ADDR_VAR 0 2
6640: PUSH
6641: LD_EXP 12
6645: ST_TO_ADDR
// if tmp then
6646: LD_VAR 0 2
6650: IFFALSE 6744
// begin DialogueOn ;
6652: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6656: LD_EXP 1
6660: PPUSH
6661: LD_STRING D6-JMM-1
6663: PPUSH
6664: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6668: LD_VAR 0 2
6672: PPUSH
6673: LD_STRING D6-Sci1-1
6675: PPUSH
6676: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6680: LD_EXP 1
6684: PPUSH
6685: LD_STRING D6-JMM-2
6687: PPUSH
6688: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6692: LD_VAR 0 2
6696: PPUSH
6697: LD_STRING D6-Sci1-2
6699: PPUSH
6700: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6704: LD_EXP 1
6708: PPUSH
6709: LD_STRING D6-JMM-3
6711: PPUSH
6712: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6716: LD_VAR 0 2
6720: PPUSH
6721: LD_STRING D6-Sci1-3
6723: PPUSH
6724: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6728: LD_EXP 1
6732: PPUSH
6733: LD_STRING D6-JMM-4
6735: PPUSH
6736: CALL_OW 88
// DialogueOff ;
6740: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6744: LD_INT 1050
6746: PPUSH
6747: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6751: LD_EXP 49
6755: PUSH
6756: LD_INT 0
6758: EQUAL
6759: PUSH
6760: LD_EXP 14
6764: PPUSH
6765: CALL_OW 302
6769: AND
6770: IFFALSE 6828
// begin DialogueOn ;
6772: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6776: LD_EXP 27
6780: PPUSH
6781: LD_STRING D5-Ar1-1
6783: PPUSH
6784: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6788: LD_EXP 26
6792: PPUSH
6793: LD_STRING D5-Diet-1
6795: PPUSH
6796: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6800: LD_EXP 27
6804: PPUSH
6805: LD_STRING D5-Ar1-2
6807: PPUSH
6808: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6812: LD_EXP 26
6816: PPUSH
6817: LD_STRING D5-Diet-2
6819: PPUSH
6820: CALL_OW 88
// DialogueOff ;
6824: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6828: LD_INT 2100
6830: PUSH
6831: LD_INT 3150
6833: PUSH
6834: LD_INT 4200
6836: PUSH
6837: LD_INT 5250
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 1
6848: PPUSH
6849: LD_INT 4
6851: PPUSH
6852: CALL_OW 12
6856: ARRAY
6857: PPUSH
6858: CALL_OW 67
// if arabianTrait = 0 then
6862: LD_EXP 49
6866: PUSH
6867: LD_INT 0
6869: EQUAL
6870: IFFALSE 6916
// begin arabianTrait = 1 ;
6872: LD_ADDR_EXP 49
6876: PUSH
6877: LD_INT 1
6879: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6880: LD_INT 2
6882: PPUSH
6883: LD_INT 3
6885: PPUSH
6886: LD_INT 1
6888: PPUSH
6889: LD_INT 1
6891: PPUSH
6892: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6896: LD_INT 2
6898: PPUSH
6899: LD_INT 6
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: LD_INT 1
6907: PPUSH
6908: CALL_OW 80
// PrepareArabianTrait ;
6912: CALL 6919 0 0
// end ; end ;
6916: PPOPN 2
6918: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6919: LD_INT 0
6921: PPUSH
6922: PPUSH
6923: PPUSH
6924: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 22
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 25
6942: PUSH
6943: LD_INT 4
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PPUSH
6954: CALL_OW 69
6958: PUSH
6959: FOR_IN
6960: IFFALSE 6973
// ComExitBuilding ( i ) ;
6962: LD_VAR 0 2
6966: PPUSH
6967: CALL_OW 122
6971: GO 6959
6973: POP
6974: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6975: LD_ADDR_VAR 0 2
6979: PUSH
6980: LD_INT 22
6982: PUSH
6983: LD_INT 2
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 3
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PPUSH
7004: CALL_OW 69
7008: PUSH
7009: FOR_IN
7010: IFFALSE 7023
// ComExitVehicle ( i ) ;
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 121
7021: GO 7009
7023: POP
7024: POP
// SetClass ( Dietrich , 8 ) ;
7025: LD_EXP 26
7029: PPUSH
7030: LD_INT 8
7032: PPUSH
7033: CALL_OW 336
// wait ( 0 0$3 ) ;
7037: LD_INT 105
7039: PPUSH
7040: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7044: LD_INT 76
7046: PPUSH
7047: LD_INT 19
7049: PPUSH
7050: CALL_OW 84
// DialogueOn ;
7054: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7058: LD_INT 22
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: LD_INT 26
7070: PUSH
7071: LD_INT 1
7073: PUSH
7074: EMPTY
7075: LIST
7076: LIST
7077: PUSH
7078: LD_INT 2
7080: PUSH
7081: LD_INT 25
7083: PUSH
7084: LD_INT 1
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: PUSH
7091: LD_INT 25
7093: PUSH
7094: LD_INT 2
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PUSH
7101: LD_INT 25
7103: PUSH
7104: LD_INT 3
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: PUSH
7111: LD_INT 25
7113: PUSH
7114: LD_INT 4
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: PUSH
7121: LD_INT 25
7123: PUSH
7124: LD_INT 5
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PPUSH
7144: CALL_OW 69
7148: PPUSH
7149: LD_STRING D8-Sol1-1
7151: PPUSH
7152: LD_STRING D8-Sol1-1
7154: PPUSH
7155: CALL 9654 0 3
// if IsOK ( DeltaDoctor ) then
7159: LD_EXP 17
7163: PPUSH
7164: CALL_OW 302
7168: IFFALSE 7184
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7170: LD_EXP 17
7174: PPUSH
7175: LD_STRING D8-Sci1-1
7177: PPUSH
7178: CALL_OW 88
7182: GO 7285
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7184: LD_INT 22
7186: PUSH
7187: LD_INT 1
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: LD_INT 26
7196: PUSH
7197: LD_INT 1
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 25
7209: PUSH
7210: LD_INT 1
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: LD_INT 25
7219: PUSH
7220: LD_INT 2
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PUSH
7227: LD_INT 25
7229: PUSH
7230: LD_INT 3
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 25
7239: PUSH
7240: LD_INT 4
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 5
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PPUSH
7275: LD_STRING D8-Sol1-1
7277: PPUSH
7278: LD_STRING D8-Sol1-1
7280: PPUSH
7281: CALL 9654 0 3
// Say ( JMM , D8-JMM-1 ) ;
7285: LD_EXP 1
7289: PPUSH
7290: LD_STRING D8-JMM-1
7292: PPUSH
7293: CALL_OW 88
// DialogueOff ;
7297: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7301: LD_INT 2
7303: PPUSH
7304: LD_INT 2
7306: PPUSH
7307: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7311: LD_INT 1
7313: PPUSH
7314: LD_INT 2
7316: PPUSH
7317: LD_INT 2
7319: PPUSH
7320: LD_INT 1
7322: PPUSH
7323: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7327: LD_INT 3
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: LD_INT 1
7335: PPUSH
7336: LD_INT 1
7338: PPUSH
7339: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7343: LD_STRING M4
7345: PPUSH
7346: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7350: LD_ADDR_VAR 0 2
7354: PUSH
7355: LD_INT 22
7357: PUSH
7358: LD_INT 2
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: LD_INT 21
7367: PUSH
7368: LD_INT 1
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PUSH
7375: LD_INT 2
7377: PUSH
7378: LD_INT 25
7380: PUSH
7381: LD_INT 1
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 25
7390: PUSH
7391: LD_INT 8
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PUSH
7398: LD_INT 25
7400: PUSH
7401: LD_INT 15
7403: PUSH
7404: EMPTY
7405: LIST
7406: LIST
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: PUSH
7414: EMPTY
7415: LIST
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 69
7423: PUSH
7424: FOR_IN
7425: IFFALSE 7565
// begin ComExitBuilding ( i ) ;
7427: LD_VAR 0 2
7431: PPUSH
7432: CALL_OW 122
// wait ( 0 0$1 ) ;
7436: LD_INT 35
7438: PPUSH
7439: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7443: LD_VAR 0 2
7447: PPUSH
7448: LD_INT 77
7450: PPUSH
7451: LD_INT 10
7453: PPUSH
7454: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7458: LD_VAR 0 2
7462: PPUSH
7463: LD_INT 82
7465: PPUSH
7466: LD_INT 5
7468: PPUSH
7469: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7473: LD_VAR 0 2
7477: PPUSH
7478: LD_INT 95
7480: PPUSH
7481: LD_INT 12
7483: PPUSH
7484: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7488: LD_VAR 0 2
7492: PPUSH
7493: LD_INT 102
7495: PPUSH
7496: LD_INT 11
7498: PPUSH
7499: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7503: LD_VAR 0 2
7507: PPUSH
7508: LD_INT 116
7510: PPUSH
7511: LD_INT 15
7513: PPUSH
7514: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_INT 140
7525: PPUSH
7526: LD_INT 25
7528: PPUSH
7529: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 160
7540: PPUSH
7541: LD_INT 56
7543: PPUSH
7544: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7548: LD_VAR 0 2
7552: PPUSH
7553: LD_INT 189
7555: PPUSH
7556: LD_INT 79
7558: PPUSH
7559: CALL_OW 174
// end ;
7563: GO 7424
7565: POP
7566: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7567: LD_ADDR_VAR 0 2
7571: PUSH
7572: LD_INT 22
7574: PUSH
7575: LD_INT 2
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 21
7584: PUSH
7585: LD_INT 1
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 2
7594: PUSH
7595: LD_INT 25
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PUSH
7605: LD_INT 25
7607: PUSH
7608: LD_INT 3
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: PUSH
7615: LD_INT 25
7617: PUSH
7618: LD_INT 4
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PUSH
7625: LD_INT 25
7627: PUSH
7628: LD_INT 16
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: EMPTY
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7793
// begin ComExitBuilding ( i ) ;
7655: LD_VAR 0 2
7659: PPUSH
7660: CALL_OW 122
// wait ( 0 0$1 ) ;
7664: LD_INT 35
7666: PPUSH
7667: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7671: LD_VAR 0 2
7675: PPUSH
7676: LD_INT 77
7678: PPUSH
7679: LD_INT 10
7681: PPUSH
7682: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7686: LD_VAR 0 2
7690: PPUSH
7691: LD_INT 82
7693: PPUSH
7694: LD_INT 5
7696: PPUSH
7697: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7701: LD_VAR 0 2
7705: PPUSH
7706: LD_INT 95
7708: PPUSH
7709: LD_INT 12
7711: PPUSH
7712: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7716: LD_VAR 0 2
7720: PPUSH
7721: LD_INT 102
7723: PPUSH
7724: LD_INT 11
7726: PPUSH
7727: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7731: LD_VAR 0 2
7735: PPUSH
7736: LD_INT 116
7738: PPUSH
7739: LD_INT 15
7741: PPUSH
7742: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7746: LD_VAR 0 2
7750: PPUSH
7751: LD_INT 140
7753: PPUSH
7754: LD_INT 25
7756: PPUSH
7757: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7761: LD_VAR 0 2
7765: PPUSH
7766: LD_INT 160
7768: PPUSH
7769: LD_INT 56
7771: PPUSH
7772: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7776: LD_VAR 0 2
7780: PPUSH
7781: LD_INT 189
7783: PPUSH
7784: LD_INT 79
7786: PPUSH
7787: CALL_OW 171
// end ;
7791: GO 7652
7793: POP
7794: POP
// arabianAttackersAI = 1 ;
7795: LD_ADDR_EXP 46
7799: PUSH
7800: LD_INT 1
7802: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7803: LD_INT 350
7805: PPUSH
7806: CALL_OW 67
// if IsOk ( Gary ) then
7810: LD_EXP 10
7814: PPUSH
7815: CALL_OW 302
7819: IFFALSE 7833
// Say ( Gary , D8a-Gary-1 ) ;
7821: LD_EXP 10
7825: PPUSH
7826: LD_STRING D8a-Gary-1
7828: PPUSH
7829: CALL_OW 88
// wait ( 0 0$5 ) ;
7833: LD_INT 175
7835: PPUSH
7836: CALL_OW 67
// if IsOK ( Khatam ) then
7840: LD_EXP 14
7844: PPUSH
7845: CALL_OW 302
7849: IFFALSE 8385
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7851: LD_ADDR_VAR 0 3
7855: PUSH
7856: LD_INT 22
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 2
7868: PUSH
7869: LD_INT 25
7871: PUSH
7872: LD_INT 1
7874: PUSH
7875: EMPTY
7876: LIST
7877: LIST
7878: PUSH
7879: LD_INT 25
7881: PUSH
7882: LD_INT 2
7884: PUSH
7885: EMPTY
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 25
7891: PUSH
7892: LD_INT 3
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: PUSH
7899: LD_INT 25
7901: PUSH
7902: LD_INT 4
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 25
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 8
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PPUSH
7942: CALL_OW 69
7946: PUSH
7947: LD_EXP 1
7951: PUSH
7952: LD_EXP 2
7956: PUSH
7957: LD_EXP 3
7961: PUSH
7962: LD_EXP 4
7966: PUSH
7967: LD_EXP 5
7971: PUSH
7972: LD_EXP 6
7976: PUSH
7977: LD_EXP 7
7981: PUSH
7982: LD_EXP 8
7986: PUSH
7987: LD_EXP 9
7991: PUSH
7992: LD_EXP 10
7996: PUSH
7997: LD_EXP 11
8001: PUSH
8002: LD_EXP 12
8006: PUSH
8007: LD_EXP 13
8011: PUSH
8012: LD_EXP 14
8016: PUSH
8017: LD_EXP 15
8021: PUSH
8022: LD_EXP 16
8026: PUSH
8027: LD_EXP 17
8031: PUSH
8032: LD_EXP 19
8036: PUSH
8037: LD_EXP 24
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: DIFF
8063: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8064: LD_EXP 14
8068: PPUSH
8069: LD_INT 8
8071: PPUSH
8072: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8076: LD_EXP 14
8080: PPUSH
8081: CALL_OW 122
// wait ( 0 0$1 ) ;
8085: LD_INT 35
8087: PPUSH
8088: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8092: LD_EXP 14
8096: PPUSH
8097: CALL_OW 121
// wait ( 0 0$1 ) ;
8101: LD_INT 35
8103: PPUSH
8104: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8108: LD_EXP 14
8112: PPUSH
8113: LD_INT 7
8115: PPUSH
8116: CALL_OW 113
// if not tmp then
8120: LD_VAR 0 3
8124: NOT
8125: IFFALSE 8129
// exit ;
8127: GO 8385
// DialogueOn ;
8129: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 1
8140: ARRAY
8141: PPUSH
8142: CALL_OW 258
8146: PUSH
8147: LD_INT 1
8149: EQUAL
8150: IFFALSE 8170
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 1
8159: ARRAY
8160: PPUSH
8161: LD_STRING D8b-Sol1-1
8163: PPUSH
8164: CALL_OW 88
8168: GO 8186
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 1
8177: ARRAY
8178: PPUSH
8179: LD_STRING D8b-FSol1-1
8181: PPUSH
8182: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8186: LD_EXP 14
8190: PPUSH
8191: LD_STRING D8b-Khat-1
8193: PPUSH
8194: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8198: LD_VAR 0 3
8202: PUSH
8203: LD_INT 1
8205: ARRAY
8206: PPUSH
8207: CALL_OW 258
8211: PUSH
8212: LD_INT 1
8214: EQUAL
8215: IFFALSE 8235
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8217: LD_VAR 0 3
8221: PUSH
8222: LD_INT 1
8224: ARRAY
8225: PPUSH
8226: LD_STRING D8b-Sol1-2
8228: PPUSH
8229: CALL_OW 88
8233: GO 8251
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 1
8242: ARRAY
8243: PPUSH
8244: LD_STRING D8b-FSol1-2
8246: PPUSH
8247: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8251: LD_EXP 14
8255: PPUSH
8256: LD_STRING D8b-Khat-2
8258: PPUSH
8259: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8263: LD_VAR 0 3
8267: PUSH
8268: LD_INT 1
8270: ARRAY
8271: PPUSH
8272: CALL_OW 258
8276: PUSH
8277: LD_INT 1
8279: EQUAL
8280: IFFALSE 8300
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8282: LD_VAR 0 3
8286: PUSH
8287: LD_INT 1
8289: ARRAY
8290: PPUSH
8291: LD_STRING D8b-Sol1-3
8293: PPUSH
8294: CALL_OW 88
8298: GO 8316
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_STRING D8b-FSol1-3
8311: PPUSH
8312: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8316: LD_EXP 14
8320: PPUSH
8321: LD_STRING D8b-Khat-3
8323: PPUSH
8324: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8328: LD_VAR 0 3
8332: PUSH
8333: LD_INT 1
8335: ARRAY
8336: PPUSH
8337: CALL_OW 258
8341: PUSH
8342: LD_INT 1
8344: EQUAL
8345: IFFALSE 8365
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8347: LD_VAR 0 3
8351: PUSH
8352: LD_INT 1
8354: ARRAY
8355: PPUSH
8356: LD_STRING D8b-Sol1-4
8358: PPUSH
8359: CALL_OW 88
8363: GO 8381
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8365: LD_VAR 0 3
8369: PUSH
8370: LD_INT 1
8372: ARRAY
8373: PPUSH
8374: LD_STRING D8b-FSol1-4
8376: PPUSH
8377: CALL_OW 88
// DialogueOff ;
8381: CALL_OW 7
// end ; end ;
8385: LD_VAR 0 1
8389: RET
// every 0 0$1 do var i ;
8390: GO 8392
8392: DISABLE
8393: LD_INT 0
8395: PPUSH
// begin enable ;
8396: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8397: LD_ADDR_VAR 0 1
8401: PUSH
8402: LD_INT 7
8404: PPUSH
8405: LD_INT 22
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 70
8419: PUSH
8420: FOR_IN
8421: IFFALSE 8487
// begin if GetClass ( i ) = 4 then
8423: LD_VAR 0 1
8427: PPUSH
8428: CALL_OW 257
8432: PUSH
8433: LD_INT 4
8435: EQUAL
8436: IFFALSE 8448
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8438: LD_INT 1
8440: PPUSH
8441: LD_STRING 10_ScientistsEscape_1
8443: PPUSH
8444: CALL_OW 39
// if i = Dietrich then
8448: LD_VAR 0 1
8452: PUSH
8453: LD_EXP 26
8457: EQUAL
8458: IFFALSE 8468
// GensherStatus = 1 ;
8460: LD_ADDR_EXP 51
8464: PUSH
8465: LD_INT 1
8467: ST_TO_ADDR
// arabianEscape = 1 ;
8468: LD_ADDR_EXP 47
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// RemoveUnit ( i ) ;
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 64
// end ;
8485: GO 8420
8487: POP
8488: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8489: LD_EXP 14
8493: PPUSH
8494: LD_INT 7
8496: PPUSH
8497: CALL_OW 308
8501: IFFALSE 8520
// begin KhatamStatus = 1 ;
8503: LD_ADDR_EXP 52
8507: PUSH
8508: LD_INT 1
8510: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8511: LD_EXP 14
8515: PPUSH
8516: CALL_OW 64
// end ; end ;
8520: PPOPN 1
8522: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8523: LD_EXP 14
8527: PPUSH
8528: CALL_OW 301
8532: IFFALSE 8545
8534: GO 8536
8536: DISABLE
// KhatamStatus = 0 ;
8537: LD_ADDR_EXP 52
8541: PUSH
8542: LD_INT 0
8544: ST_TO_ADDR
8545: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8546: LD_INT 22
8548: PUSH
8549: LD_INT 2
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: LD_INT 21
8558: PUSH
8559: LD_INT 1
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: PUSH
8566: EMPTY
8567: LIST
8568: LIST
8569: PPUSH
8570: CALL_OW 69
8574: PUSH
8575: LD_INT 0
8577: EQUAL
8578: PUSH
8579: LD_INT 22
8581: PUSH
8582: LD_INT 4
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 21
8591: PUSH
8592: LD_INT 1
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: PUSH
8608: LD_INT 0
8610: EQUAL
8611: AND
8612: IFFALSE 8625
8614: GO 8616
8616: DISABLE
// arabianDefeated = 1 ;
8617: LD_ADDR_EXP 48
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
8625: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8626: LD_INT 54
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: CALL_OW 321
8636: PUSH
8637: LD_INT 2
8639: EQUAL
8640: PUSH
8641: LD_INT 55
8643: PPUSH
8644: LD_INT 1
8646: PPUSH
8647: CALL_OW 321
8651: PUSH
8652: LD_INT 2
8654: EQUAL
8655: AND
8656: PUSH
8657: LD_INT 21
8659: PPUSH
8660: LD_INT 1
8662: PPUSH
8663: CALL_OW 321
8667: PUSH
8668: LD_INT 2
8670: EQUAL
8671: AND
8672: PUSH
8673: LD_INT 22
8675: PPUSH
8676: LD_INT 1
8678: PPUSH
8679: CALL_OW 321
8683: PUSH
8684: LD_INT 2
8686: EQUAL
8687: AND
8688: PUSH
8689: LD_INT 12
8691: PPUSH
8692: LD_INT 1
8694: PPUSH
8695: CALL_OW 321
8699: PUSH
8700: LD_INT 2
8702: EQUAL
8703: AND
8704: PUSH
8705: LD_INT 32
8707: PPUSH
8708: LD_INT 1
8710: PPUSH
8711: CALL_OW 321
8715: PUSH
8716: LD_INT 2
8718: EQUAL
8719: AND
8720: PUSH
8721: LD_EXP 59
8725: PUSH
8726: LD_INT 0
8728: EQUAL
8729: AND
8730: PUSH
8731: LD_EXP 49
8735: PUSH
8736: LD_INT 0
8738: EQUAL
8739: AND
8740: PUSH
8741: LD_OWVAR 1
8745: PUSH
8746: LD_INT 31500
8748: GREATEREQUAL
8749: AND
8750: IFFALSE 8767
8752: GO 8754
8754: DISABLE
// begin arabianTrait = 1 ;
8755: LD_ADDR_EXP 49
8759: PUSH
8760: LD_INT 1
8762: ST_TO_ADDR
// PrepareArabianTrait ;
8763: CALL 6919 0 0
// end ;
8767: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8768: LD_EXP 29
8772: PUSH
8773: LD_STRING 02_mikhailStatus_1
8775: PPUSH
8776: LD_INT 0
8778: PPUSH
8779: CALL_OW 30
8783: PUSH
8784: LD_INT 1
8786: EQUAL
8787: AND
8788: PUSH
8789: LD_INT 22
8791: PUSH
8792: LD_INT 5
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PPUSH
8799: CALL_OW 69
8803: PUSH
8804: LD_INT 0
8806: EQUAL
8807: AND
8808: PUSH
8809: LD_INT 22
8811: PUSH
8812: LD_INT 2
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PPUSH
8819: CALL_OW 69
8823: PUSH
8824: LD_INT 0
8826: EQUAL
8827: PUSH
8828: LD_EXP 49
8832: PUSH
8833: LD_INT 0
8835: EQUAL
8836: OR
8837: AND
8838: IFFALSE 8847
8840: GO 8842
8842: DISABLE
// PrepareCornell ;
8843: CALL 2541 0 0
8847: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8848: LD_INT 22
8850: PUSH
8851: LD_INT 1
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: PPUSH
8858: CALL_OW 69
8862: PPUSH
8863: LD_EXP 19
8867: PPUSH
8868: CALL_OW 74
8872: PPUSH
8873: LD_EXP 19
8877: PPUSH
8878: CALL_OW 296
8882: PUSH
8883: LD_INT 9
8885: LESS
8886: IFFALSE 9107
8888: GO 8890
8890: DISABLE
// begin InGameOn ;
8891: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8895: LD_EXP 19
8899: PPUSH
8900: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8904: LD_EXP 19
8908: PPUSH
8909: LD_STRING D7-Corn-1
8911: PPUSH
8912: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8916: LD_INT 22
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 2
8928: PUSH
8929: LD_INT 25
8931: PUSH
8932: LD_INT 1
8934: PUSH
8935: EMPTY
8936: LIST
8937: LIST
8938: PUSH
8939: LD_INT 25
8941: PUSH
8942: LD_INT 2
8944: PUSH
8945: EMPTY
8946: LIST
8947: LIST
8948: PUSH
8949: LD_INT 25
8951: PUSH
8952: LD_INT 3
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 25
8961: PUSH
8962: LD_INT 4
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 5
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: PPUSH
8991: CALL_OW 69
8995: PPUSH
8996: LD_STRING D7-Sol1-1
8998: PPUSH
8999: LD_STRING D7-FSol1-1
9001: PPUSH
9002: CALL 9654 0 3
// CenterNowOnUnits ( Cornell ) ;
9006: LD_EXP 19
9010: PPUSH
9011: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9015: LD_EXP 19
9019: PPUSH
9020: LD_STRING D7-Corn-2
9022: PPUSH
9023: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9027: LD_EXP 1
9031: PPUSH
9032: LD_STRING D7-JMM-2
9034: PPUSH
9035: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9039: LD_EXP 19
9043: PPUSH
9044: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9048: LD_EXP 19
9052: PPUSH
9053: LD_STRING D7-Corn-3
9055: PPUSH
9056: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9060: LD_EXP 19
9064: PPUSH
9065: LD_INT 250
9067: PPUSH
9068: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9072: LD_EXP 19
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 235
// wait ( 0 0$1 ) ;
9084: LD_INT 35
9086: PPUSH
9087: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9091: LD_EXP 1
9095: PPUSH
9096: LD_STRING D7-JMM-3
9098: PPUSH
9099: CALL_OW 88
// InGameOff ;
9103: CALL_OW 9
// end ;
9107: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9108: LD_EXP 19
9112: PPUSH
9113: CALL_OW 255
9117: PUSH
9118: LD_INT 1
9120: EQUAL
9121: PUSH
9122: LD_EXP 19
9126: PPUSH
9127: CALL_OW 256
9131: PUSH
9132: LD_INT 251
9134: GREATER
9135: AND
9136: IFFALSE 9329
9138: GO 9140
9140: DISABLE
// begin DialogueOn ;
9141: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9145: LD_EXP 1
9149: PPUSH
9150: LD_STRING D7a-JMM-1
9152: PPUSH
9153: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9157: LD_EXP 19
9161: PPUSH
9162: LD_STRING D7a-Corn-1
9164: PPUSH
9165: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9169: LD_EXP 1
9173: PPUSH
9174: LD_STRING D7a-JMM-2
9176: PPUSH
9177: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9181: LD_EXP 19
9185: PPUSH
9186: LD_STRING D7a-Corn-2
9188: PPUSH
9189: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9193: LD_EXP 1
9197: PPUSH
9198: LD_STRING D7a-JMM-3
9200: PPUSH
9201: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9205: LD_EXP 19
9209: PPUSH
9210: LD_STRING D7a-Corn-3
9212: PPUSH
9213: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9217: LD_EXP 1
9221: PPUSH
9222: LD_STRING D7a-JMM-4
9224: PPUSH
9225: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9229: LD_EXP 19
9233: PPUSH
9234: LD_STRING D7a-Corn-4
9236: PPUSH
9237: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9241: LD_EXP 1
9245: PPUSH
9246: LD_STRING D7a-JMM-5
9248: PPUSH
9249: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9253: LD_EXP 19
9257: PPUSH
9258: LD_STRING D7a-Corn-5
9260: PPUSH
9261: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9265: LD_EXP 1
9269: PPUSH
9270: LD_STRING D7a-JMM-6
9272: PPUSH
9273: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9277: LD_EXP 19
9281: PPUSH
9282: LD_STRING D7a-Corn-6
9284: PPUSH
9285: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9289: LD_EXP 1
9293: PPUSH
9294: LD_STRING D7a-JMM-7
9296: PPUSH
9297: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9301: LD_EXP 19
9305: PPUSH
9306: LD_STRING D7a-Corn-7
9308: PPUSH
9309: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9313: LD_EXP 1
9317: PPUSH
9318: LD_STRING D7a-JMM-8
9320: PPUSH
9321: CALL_OW 88
// DialogueOff ;
9325: CALL_OW 7
// end ;
9329: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9330: LD_EXP 58
9334: PUSH
9335: LD_EXP 1
9339: PPUSH
9340: CALL_OW 302
9344: PUSH
9345: LD_EXP 5
9349: PPUSH
9350: CALL_OW 302
9354: OR
9355: AND
9356: IFFALSE 9446
9358: GO 9360
9360: DISABLE
// begin Wait ( 0 0$2 ) ;
9361: LD_INT 70
9363: PPUSH
9364: CALL_OW 67
// DialogueOn ;
9368: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9372: LD_EXP 58
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PPUSH
9381: LD_EXP 58
9385: PUSH
9386: LD_INT 2
9388: ARRAY
9389: PPUSH
9390: CALL_OW 86
// if IsOk ( Cyrus ) then
9394: LD_EXP 5
9398: PPUSH
9399: CALL_OW 302
9403: IFFALSE 9419
// Say ( Cyrus , D10-Cyrus-1 ) else
9405: LD_EXP 5
9409: PPUSH
9410: LD_STRING D10-Cyrus-1
9412: PPUSH
9413: CALL_OW 88
9417: GO 9442
// if IsOk ( JMM ) then
9419: LD_EXP 1
9423: PPUSH
9424: CALL_OW 302
9428: IFFALSE 9442
// Say ( JMM , D10-JMM-1 ) ;
9430: LD_EXP 1
9434: PPUSH
9435: LD_STRING D10-JMM-1
9437: PPUSH
9438: CALL_OW 88
// DialogueOff ;
9442: CALL_OW 7
// end ;
9446: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9447: LD_INT 12
9449: PPUSH
9450: LD_INT 1
9452: PPUSH
9453: CALL_OW 321
9457: PUSH
9458: LD_INT 2
9460: EQUAL
9461: IFFALSE 9473
9463: GO 9465
9465: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9466: LD_STRING M2b
9468: PPUSH
9469: CALL_OW 337
9473: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9474: LD_INT 32
9476: PPUSH
9477: LD_INT 1
9479: PPUSH
9480: CALL_OW 321
9484: PUSH
9485: LD_INT 2
9487: EQUAL
9488: IFFALSE 9500
9490: GO 9492
9492: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9493: LD_STRING M2c
9495: PPUSH
9496: CALL_OW 337
9500: END
// every 0 0$1 trigger arabianDefeated = 1 do
9501: LD_EXP 48
9505: PUSH
9506: LD_INT 1
9508: EQUAL
9509: IFFALSE 9521
9511: GO 9513
9513: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9514: LD_STRING M4a
9516: PPUSH
9517: CALL_OW 337
9521: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9522: LD_INT 54
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: CALL_OW 321
9532: PUSH
9533: LD_INT 2
9535: EQUAL
9536: PUSH
9537: LD_INT 55
9539: PPUSH
9540: LD_INT 1
9542: PPUSH
9543: CALL_OW 321
9547: PUSH
9548: LD_INT 2
9550: EQUAL
9551: AND
9552: PUSH
9553: LD_INT 21
9555: PPUSH
9556: LD_INT 1
9558: PPUSH
9559: CALL_OW 321
9563: PUSH
9564: LD_INT 2
9566: EQUAL
9567: AND
9568: PUSH
9569: LD_INT 22
9571: PPUSH
9572: LD_INT 1
9574: PPUSH
9575: CALL_OW 321
9579: PUSH
9580: LD_INT 2
9582: EQUAL
9583: AND
9584: IFFALSE 9596
9586: GO 9588
9588: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9589: LD_STRING M2a
9591: PPUSH
9592: CALL_OW 337
9596: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9597: LD_INT 0
9599: PPUSH
9600: PPUSH
// if exist_mode then
9601: LD_VAR 0 2
9605: IFFALSE 9624
// unit := CreateCharacter ( ident ) else
9607: LD_ADDR_VAR 0 4
9611: PUSH
9612: LD_VAR 0 1
9616: PPUSH
9617: CALL_OW 34
9621: ST_TO_ADDR
9622: GO 9639
// unit := NewCharacter ( ident ) ;
9624: LD_ADDR_VAR 0 4
9628: PUSH
9629: LD_VAR 0 1
9633: PPUSH
9634: CALL_OW 25
9638: ST_TO_ADDR
// result := unit ;
9639: LD_ADDR_VAR 0 3
9643: PUSH
9644: LD_VAR 0 4
9648: ST_TO_ADDR
// end ;
9649: LD_VAR 0 3
9653: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9654: LD_INT 0
9656: PPUSH
9657: PPUSH
9658: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9659: LD_ADDR_VAR 0 1
9663: PUSH
9664: LD_VAR 0 1
9668: PUSH
9669: LD_EXP 1
9673: PUSH
9674: LD_EXP 2
9678: PUSH
9679: LD_EXP 3
9683: PUSH
9684: LD_EXP 4
9688: PUSH
9689: LD_EXP 5
9693: PUSH
9694: LD_EXP 6
9698: PUSH
9699: LD_EXP 7
9703: PUSH
9704: LD_EXP 8
9708: PUSH
9709: LD_EXP 9
9713: PUSH
9714: LD_EXP 10
9718: PUSH
9719: LD_EXP 11
9723: PUSH
9724: LD_EXP 12
9728: PUSH
9729: LD_EXP 13
9733: PUSH
9734: LD_EXP 14
9738: PUSH
9739: LD_EXP 15
9743: PUSH
9744: LD_EXP 16
9748: PUSH
9749: LD_EXP 17
9753: PUSH
9754: LD_EXP 18
9758: PUSH
9759: LD_EXP 19
9763: PUSH
9764: LD_EXP 24
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: DIFF
9791: ST_TO_ADDR
// if not characters then
9792: LD_VAR 0 1
9796: NOT
9797: IFFALSE 9801
// exit ;
9799: GO 9947
// rnd = rand ( 1 , characters ) ;
9801: LD_ADDR_VAR 0 6
9805: PUSH
9806: LD_INT 1
9808: PPUSH
9809: LD_VAR 0 1
9813: PPUSH
9814: CALL_OW 12
9818: ST_TO_ADDR
// for i = 1 to characters do
9819: LD_ADDR_VAR 0 5
9823: PUSH
9824: DOUBLE
9825: LD_INT 1
9827: DEC
9828: ST_TO_ADDR
9829: LD_VAR 0 1
9833: PUSH
9834: FOR_TO
9835: IFFALSE 9945
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9837: LD_VAR 0 5
9841: PUSH
9842: LD_VAR 0 6
9846: EQUAL
9847: PUSH
9848: LD_VAR 0 1
9852: PUSH
9853: LD_VAR 0 5
9857: ARRAY
9858: PPUSH
9859: CALL_OW 258
9863: PUSH
9864: LD_INT 1
9866: EQUAL
9867: AND
9868: IFFALSE 9890
// Say ( characters [ i ] , dialogMID ) ;
9870: LD_VAR 0 1
9874: PUSH
9875: LD_VAR 0 5
9879: ARRAY
9880: PPUSH
9881: LD_VAR 0 2
9885: PPUSH
9886: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9890: LD_VAR 0 5
9894: PUSH
9895: LD_VAR 0 6
9899: EQUAL
9900: PUSH
9901: LD_VAR 0 1
9905: PUSH
9906: LD_VAR 0 5
9910: ARRAY
9911: PPUSH
9912: CALL_OW 258
9916: PUSH
9917: LD_INT 2
9919: EQUAL
9920: AND
9921: IFFALSE 9943
// Say ( characters [ i ] , dialogFID ) ;
9923: LD_VAR 0 1
9927: PUSH
9928: LD_VAR 0 5
9932: ARRAY
9933: PPUSH
9934: LD_VAR 0 3
9938: PPUSH
9939: CALL_OW 88
// end ;
9943: GO 9834
9945: POP
9946: POP
// end ;
9947: LD_VAR 0 4
9951: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9952: LD_INT 0
9954: PPUSH
9955: PPUSH
// for i in charactersList do
9956: LD_ADDR_VAR 0 4
9960: PUSH
9961: LD_VAR 0 1
9965: PUSH
9966: FOR_IN
9967: IFFALSE 9996
// begin if IsOk ( i ) then
9969: LD_VAR 0 4
9973: PPUSH
9974: CALL_OW 302
9978: IFFALSE 9994
// SaveCharacters ( i , ident ) ;
9980: LD_VAR 0 4
9984: PPUSH
9985: LD_VAR 0 2
9989: PPUSH
9990: CALL_OW 38
// end ;
9994: GO 9966
9996: POP
9997: POP
// end ;
9998: LD_VAR 0 3
10002: RET
// export function PrepareDifficulty ; begin
10003: LD_INT 0
10005: PPUSH
// if difficulty = 1 then
10006: LD_OWVAR 67
10010: PUSH
10011: LD_INT 1
10013: EQUAL
10014: IFFALSE 10058
// begin RuSolMinLevel = 4 ;
10016: LD_ADDR_EXP 36
10020: PUSH
10021: LD_INT 4
10023: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10024: LD_ADDR_EXP 37
10028: PUSH
10029: LD_INT 7
10031: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10032: LD_INT 51
10034: PPUSH
10035: LD_INT 6
10037: PPUSH
10038: LD_INT 2
10040: PPUSH
10041: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10045: LD_INT 51
10047: PPUSH
10048: LD_INT 5
10050: PPUSH
10051: LD_INT 2
10053: PPUSH
10054: CALL_OW 322
// end ; if difficulty = 2 then
10058: LD_OWVAR 67
10062: PUSH
10063: LD_INT 2
10065: EQUAL
10066: IFFALSE 10162
// begin RuSolMinLevel = 5 ;
10068: LD_ADDR_EXP 36
10072: PUSH
10073: LD_INT 5
10075: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10076: LD_ADDR_EXP 37
10080: PUSH
10081: LD_INT 7
10083: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10084: LD_INT 51
10086: PPUSH
10087: LD_INT 6
10089: PPUSH
10090: LD_INT 2
10092: PPUSH
10093: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10097: LD_INT 57
10099: PPUSH
10100: LD_INT 6
10102: PPUSH
10103: LD_INT 2
10105: PPUSH
10106: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10110: LD_INT 63
10112: PPUSH
10113: LD_INT 6
10115: PPUSH
10116: LD_INT 2
10118: PPUSH
10119: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10123: LD_INT 51
10125: PPUSH
10126: LD_INT 5
10128: PPUSH
10129: LD_INT 2
10131: PPUSH
10132: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10136: LD_INT 5
10138: PPUSH
10139: LD_INT 2
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10149: LD_INT 5
10151: PPUSH
10152: LD_INT 5
10154: PPUSH
10155: LD_INT 2
10157: PPUSH
10158: CALL_OW 322
// end ; if difficulty = 3 then
10162: LD_OWVAR 67
10166: PUSH
10167: LD_INT 3
10169: EQUAL
10170: IFFALSE 10318
// begin RuSolMinLevel = 6 ;
10172: LD_ADDR_EXP 36
10176: PUSH
10177: LD_INT 6
10179: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10180: LD_ADDR_EXP 37
10184: PUSH
10185: LD_INT 8
10187: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10188: LD_INT 51
10190: PPUSH
10191: LD_INT 6
10193: PPUSH
10194: LD_INT 2
10196: PPUSH
10197: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10201: LD_INT 57
10203: PPUSH
10204: LD_INT 6
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10214: LD_INT 52
10216: PPUSH
10217: LD_INT 6
10219: PPUSH
10220: LD_INT 2
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10227: LD_INT 58
10229: PPUSH
10230: LD_INT 6
10232: PPUSH
10233: LD_INT 2
10235: PPUSH
10236: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10240: LD_INT 63
10242: PPUSH
10243: LD_INT 6
10245: PPUSH
10246: LD_INT 2
10248: PPUSH
10249: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10253: LD_INT 64
10255: PPUSH
10256: LD_INT 6
10258: PPUSH
10259: LD_INT 2
10261: PPUSH
10262: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10266: LD_INT 51
10268: PPUSH
10269: LD_INT 5
10271: PPUSH
10272: LD_INT 2
10274: PPUSH
10275: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10279: LD_INT 52
10281: PPUSH
10282: LD_INT 5
10284: PPUSH
10285: LD_INT 2
10287: PPUSH
10288: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10292: LD_INT 66
10294: PPUSH
10295: LD_INT 2
10297: PPUSH
10298: LD_INT 2
10300: PPUSH
10301: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10305: LD_INT 66
10307: PPUSH
10308: LD_INT 5
10310: PPUSH
10311: LD_INT 2
10313: PPUSH
10314: CALL_OW 322
// end ; end ;
10318: LD_VAR 0 1
10322: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10323: LD_INT 0
10325: PPUSH
10326: PPUSH
10327: PPUSH
10328: PPUSH
10329: PPUSH
// case position of 1 :
10330: LD_VAR 0 1
10334: PUSH
10335: LD_INT 1
10337: DOUBLE
10338: EQUAL
10339: IFTRUE 10343
10341: GO 10354
10343: POP
// area := westConv ; 2 :
10344: LD_ADDR_VAR 0 6
10348: PUSH
10349: LD_INT 20
10351: ST_TO_ADDR
10352: GO 10393
10354: LD_INT 2
10356: DOUBLE
10357: EQUAL
10358: IFTRUE 10362
10360: GO 10373
10362: POP
// area := midConv ; 3 :
10363: LD_ADDR_VAR 0 6
10367: PUSH
10368: LD_INT 21
10370: ST_TO_ADDR
10371: GO 10393
10373: LD_INT 3
10375: DOUBLE
10376: EQUAL
10377: IFTRUE 10381
10379: GO 10392
10381: POP
// area := eastConv ; end ;
10382: LD_ADDR_VAR 0 6
10386: PUSH
10387: LD_INT 22
10389: ST_TO_ADDR
10390: GO 10393
10392: POP
// area := AreaToList ( area , 0 ) ;
10393: LD_ADDR_VAR 0 6
10397: PUSH
10398: LD_VAR 0 6
10402: PPUSH
10403: LD_INT 0
10405: PPUSH
10406: CALL_OW 517
10410: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10411: LD_ADDR_VAR 0 3
10415: PUSH
10416: DOUBLE
10417: LD_INT 1
10419: DEC
10420: ST_TO_ADDR
10421: LD_VAR 0 6
10425: PUSH
10426: LD_INT 1
10428: ARRAY
10429: PUSH
10430: FOR_TO
10431: IFFALSE 10512
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10433: LD_VAR 0 6
10437: PUSH
10438: LD_INT 1
10440: ARRAY
10441: PUSH
10442: LD_VAR 0 3
10446: ARRAY
10447: PPUSH
10448: LD_VAR 0 6
10452: PUSH
10453: LD_INT 2
10455: ARRAY
10456: PUSH
10457: LD_VAR 0 3
10461: ARRAY
10462: PPUSH
10463: LD_INT 1
10465: PPUSH
10466: LD_INT 1
10468: PPUSH
10469: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10473: LD_VAR 0 6
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: PUSH
10482: LD_VAR 0 3
10486: ARRAY
10487: PPUSH
10488: LD_VAR 0 6
10492: PUSH
10493: LD_INT 2
10495: ARRAY
10496: PUSH
10497: LD_VAR 0 3
10501: ARRAY
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 331
// end ;
10510: GO 10430
10512: POP
10513: POP
// ruPossition = position ;
10514: LD_ADDR_EXP 41
10518: PUSH
10519: LD_VAR 0 1
10523: ST_TO_ADDR
// if position = 1 then
10524: LD_VAR 0 1
10528: PUSH
10529: LD_INT 1
10531: EQUAL
10532: IFFALSE 11280
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10534: LD_ADDR_VAR 0 4
10538: PUSH
10539: LD_INT 22
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 2
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10568: LD_ADDR_VAR 0 5
10572: PUSH
10573: LD_INT 0
10575: PUSH
10576: LD_INT 49
10578: PUSH
10579: LD_INT 74
10581: PUSH
10582: LD_INT 3
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 4
10593: PUSH
10594: LD_INT 73
10596: PUSH
10597: LD_INT 88
10599: PUSH
10600: LD_INT 5
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 4
10611: PUSH
10612: LD_INT 56
10614: PUSH
10615: LD_INT 62
10617: PUSH
10618: LD_INT 3
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 29
10629: PUSH
10630: LD_INT 43
10632: PUSH
10633: LD_INT 68
10635: PUSH
10636: LD_INT 2
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 30
10647: PUSH
10648: LD_INT 43
10650: PUSH
10651: LD_INT 79
10653: PUSH
10654: LD_INT 5
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 28
10665: PUSH
10666: LD_INT 60
10668: PUSH
10669: LD_INT 75
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 2
10683: PUSH
10684: LD_INT 50
10686: PUSH
10687: LD_INT 87
10689: PUSH
10690: LD_INT 1
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 28
10701: PUSH
10702: LD_INT 45
10704: PUSH
10705: LD_INT 67
10707: PUSH
10708: LD_INT 2
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 17
10719: PUSH
10720: LD_INT 47
10722: PUSH
10723: LD_INT 84
10725: PUSH
10726: LD_INT 2
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 18
10737: PUSH
10738: LD_INT 46
10740: PUSH
10741: LD_INT 87
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 28
10755: PUSH
10756: LD_INT 41
10758: PUSH
10759: LD_INT 64
10761: PUSH
10762: LD_INT 5
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 32
10773: PUSH
10774: LD_INT 75
10776: PUSH
10777: LD_INT 76
10779: PUSH
10780: LD_INT 5
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 32
10791: PUSH
10792: LD_INT 77
10794: PUSH
10795: LD_INT 75
10797: PUSH
10798: LD_INT 5
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 32
10809: PUSH
10810: LD_INT 69
10812: PUSH
10813: LD_INT 68
10815: PUSH
10816: LD_INT 3
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 32
10827: PUSH
10828: LD_INT 59
10830: PUSH
10831: LD_INT 96
10833: PUSH
10834: LD_INT 5
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 32
10845: PUSH
10846: LD_INT 56
10848: PUSH
10849: LD_INT 96
10851: PUSH
10852: LD_INT 0
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 32
10863: PUSH
10864: LD_INT 51
10866: PUSH
10867: LD_INT 61
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 32
10881: PUSH
10882: LD_INT 42
10884: PUSH
10885: LD_INT 60
10887: PUSH
10888: LD_INT 3
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 32
10899: PUSH
10900: LD_INT 36
10902: PUSH
10903: LD_INT 58
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 32
10917: PUSH
10918: LD_INT 39
10920: PUSH
10921: LD_INT 59
10923: PUSH
10924: LD_INT 3
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 32
10935: PUSH
10936: LD_INT 61
10938: PUSH
10939: LD_INT 64
10941: PUSH
10942: LD_INT 3
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 33
10953: PUSH
10954: LD_INT 63
10956: PUSH
10957: LD_INT 90
10959: PUSH
10960: LD_INT 5
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 33
10971: PUSH
10972: LD_INT 64
10974: PUSH
10975: LD_INT 88
10977: PUSH
10978: LD_INT 5
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 33
10989: PUSH
10990: LD_INT 72
10992: PUSH
10993: LD_INT 82
10995: PUSH
10996: LD_INT 5
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 6
11007: PUSH
11008: LD_INT 42
11010: PUSH
11011: LD_INT 74
11013: PUSH
11014: LD_INT 1
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 6
11025: PUSH
11026: LD_INT 56
11028: PUSH
11029: LD_INT 77
11031: PUSH
11032: LD_INT 2
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 21
11043: PUSH
11044: LD_INT 54
11046: PUSH
11047: LD_INT 91
11049: PUSH
11050: LD_INT 5
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 16
11061: PUSH
11062: LD_INT 50
11064: PUSH
11065: LD_INT 83
11067: PUSH
11068: LD_INT 3
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 24
11079: PUSH
11080: LD_INT 50
11082: PUSH
11083: LD_INT 90
11085: PUSH
11086: LD_INT 0
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11126: LD_ADDR_VAR 0 3
11130: PUSH
11131: LD_INT 22
11133: PUSH
11134: LD_INT 3
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 3
11143: PUSH
11144: LD_INT 25
11146: PUSH
11147: LD_INT 2
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 69
11166: PUSH
11167: FOR_IN
11168: IFFALSE 11187
// AddComAgressiveMove ( i , 53 , 82 ) ;
11170: LD_VAR 0 3
11174: PPUSH
11175: LD_INT 53
11177: PPUSH
11178: LD_INT 82
11180: PPUSH
11181: CALL_OW 174
11185: GO 11167
11187: POP
11188: POP
// for i := 1 to buildingsTab do
11189: LD_ADDR_VAR 0 3
11193: PUSH
11194: DOUBLE
11195: LD_INT 1
11197: DEC
11198: ST_TO_ADDR
11199: LD_VAR 0 5
11203: PUSH
11204: FOR_TO
11205: IFFALSE 11278
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11207: LD_VAR 0 4
11211: PPUSH
11212: LD_VAR 0 5
11216: PUSH
11217: LD_VAR 0 3
11221: ARRAY
11222: PUSH
11223: LD_INT 1
11225: ARRAY
11226: PPUSH
11227: LD_VAR 0 5
11231: PUSH
11232: LD_VAR 0 3
11236: ARRAY
11237: PUSH
11238: LD_INT 2
11240: ARRAY
11241: PPUSH
11242: LD_VAR 0 5
11246: PUSH
11247: LD_VAR 0 3
11251: ARRAY
11252: PUSH
11253: LD_INT 3
11255: ARRAY
11256: PPUSH
11257: LD_VAR 0 5
11261: PUSH
11262: LD_VAR 0 3
11266: ARRAY
11267: PUSH
11268: LD_INT 4
11270: ARRAY
11271: PPUSH
11272: CALL_OW 205
11276: GO 11204
11278: POP
11279: POP
// end ; if position = 2 then
11280: LD_VAR 0 1
11284: PUSH
11285: LD_INT 2
11287: EQUAL
11288: IFFALSE 11903
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11290: LD_ADDR_VAR 0 4
11294: PUSH
11295: LD_INT 22
11297: PUSH
11298: LD_INT 3
11300: PUSH
11301: EMPTY
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 25
11307: PUSH
11308: LD_INT 2
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: PPUSH
11319: CALL_OW 69
11323: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11324: LD_ADDR_VAR 0 5
11328: PUSH
11329: LD_INT 0
11331: PUSH
11332: LD_INT 104
11334: PUSH
11335: LD_INT 110
11337: PUSH
11338: LD_INT 5
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 4
11349: PUSH
11350: LD_INT 98
11352: PUSH
11353: LD_INT 90
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 29
11367: PUSH
11368: LD_INT 103
11370: PUSH
11371: LD_INT 114
11373: PUSH
11374: LD_INT 2
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 30
11385: PUSH
11386: LD_INT 99
11388: PUSH
11389: LD_INT 114
11391: PUSH
11392: LD_INT 3
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 28
11403: PUSH
11404: LD_INT 100
11406: PUSH
11407: LD_INT 112
11409: PUSH
11410: LD_INT 1
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 2
11421: PUSH
11422: LD_INT 92
11424: PUSH
11425: LD_INT 101
11427: PUSH
11428: LD_INT 0
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 28
11439: PUSH
11440: LD_INT 97
11442: PUSH
11443: LD_INT 116
11445: PUSH
11446: LD_INT 5
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 17
11457: PUSH
11458: LD_INT 96
11460: PUSH
11461: LD_INT 101
11463: PUSH
11464: LD_INT 4
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 18
11475: PUSH
11476: LD_INT 88
11478: PUSH
11479: LD_INT 97
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 28
11493: PUSH
11494: LD_INT 106
11496: PUSH
11497: LD_INT 92
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 32
11511: PUSH
11512: LD_INT 88
11514: PUSH
11515: LD_INT 89
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 32
11529: PUSH
11530: LD_INT 86
11532: PUSH
11533: LD_INT 90
11535: PUSH
11536: LD_INT 2
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 32
11547: PUSH
11548: LD_INT 85
11550: PUSH
11551: LD_INT 99
11553: PUSH
11554: LD_INT 2
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 32
11565: PUSH
11566: LD_INT 85
11568: PUSH
11569: LD_INT 107
11571: PUSH
11572: LD_INT 1
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 105
11586: PUSH
11587: LD_INT 99
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 33
11601: PUSH
11602: LD_INT 102
11604: PUSH
11605: LD_INT 92
11607: PUSH
11608: LD_INT 3
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 33
11619: PUSH
11620: LD_INT 105
11622: PUSH
11623: LD_INT 92
11625: PUSH
11626: LD_INT 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 6
11637: PUSH
11638: LD_INT 92
11640: PUSH
11641: LD_INT 110
11643: PUSH
11644: LD_INT 0
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 6
11655: PUSH
11656: LD_INT 103
11658: PUSH
11659: LD_INT 103
11661: PUSH
11662: LD_INT 5
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 21
11673: PUSH
11674: LD_INT 89
11676: PUSH
11677: LD_INT 101
11679: PUSH
11680: LD_INT 1
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 16
11691: PUSH
11692: LD_INT 95
11694: PUSH
11695: LD_INT 104
11697: PUSH
11698: LD_INT 4
11700: PUSH
11701: EMPTY
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: PUSH
11707: LD_INT 24
11709: PUSH
11710: LD_INT 92
11712: PUSH
11713: LD_INT 105
11715: PUSH
11716: LD_INT 0
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11749: LD_ADDR_VAR 0 3
11753: PUSH
11754: LD_INT 22
11756: PUSH
11757: LD_INT 3
11759: PUSH
11760: EMPTY
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 3
11766: PUSH
11767: LD_INT 25
11769: PUSH
11770: LD_INT 2
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PPUSH
11785: CALL_OW 69
11789: PUSH
11790: FOR_IN
11791: IFFALSE 11810
// AddComAgressiveMove ( i , 96 , 99 ) ;
11793: LD_VAR 0 3
11797: PPUSH
11798: LD_INT 96
11800: PPUSH
11801: LD_INT 99
11803: PPUSH
11804: CALL_OW 174
11808: GO 11790
11810: POP
11811: POP
// for i := 1 to buildingsTab do
11812: LD_ADDR_VAR 0 3
11816: PUSH
11817: DOUBLE
11818: LD_INT 1
11820: DEC
11821: ST_TO_ADDR
11822: LD_VAR 0 5
11826: PUSH
11827: FOR_TO
11828: IFFALSE 11901
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11830: LD_VAR 0 4
11834: PPUSH
11835: LD_VAR 0 5
11839: PUSH
11840: LD_VAR 0 3
11844: ARRAY
11845: PUSH
11846: LD_INT 1
11848: ARRAY
11849: PPUSH
11850: LD_VAR 0 5
11854: PUSH
11855: LD_VAR 0 3
11859: ARRAY
11860: PUSH
11861: LD_INT 2
11863: ARRAY
11864: PPUSH
11865: LD_VAR 0 5
11869: PUSH
11870: LD_VAR 0 3
11874: ARRAY
11875: PUSH
11876: LD_INT 3
11878: ARRAY
11879: PPUSH
11880: LD_VAR 0 5
11884: PUSH
11885: LD_VAR 0 3
11889: ARRAY
11890: PUSH
11891: LD_INT 4
11893: ARRAY
11894: PPUSH
11895: CALL_OW 205
11899: GO 11827
11901: POP
11902: POP
// end ; if position = 3 then
11903: LD_VAR 0 1
11907: PUSH
11908: LD_INT 3
11910: EQUAL
11911: IFFALSE 12697
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11913: LD_ADDR_VAR 0 4
11917: PUSH
11918: LD_INT 22
11920: PUSH
11921: LD_INT 3
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 25
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 69
11946: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11947: LD_ADDR_VAR 0 5
11951: PUSH
11952: LD_INT 0
11954: PUSH
11955: LD_INT 151
11957: PUSH
11958: LD_INT 71
11960: PUSH
11961: LD_INT 4
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 4
11972: PUSH
11973: LD_INT 145
11975: PUSH
11976: LD_INT 53
11978: PUSH
11979: LD_INT 3
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 4
11990: PUSH
11991: LD_INT 172
11993: PUSH
11994: LD_INT 102
11996: PUSH
11997: LD_INT 5
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 29
12008: PUSH
12009: LD_INT 152
12011: PUSH
12012: LD_INT 85
12014: PUSH
12015: LD_INT 3
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 30
12026: PUSH
12027: LD_INT 156
12029: PUSH
12030: LD_INT 92
12032: PUSH
12033: LD_INT 3
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 28
12044: PUSH
12045: LD_INT 151
12047: PUSH
12048: LD_INT 66
12050: PUSH
12051: LD_INT 4
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 2
12062: PUSH
12063: LD_INT 163
12065: PUSH
12066: LD_INT 95
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 28
12080: PUSH
12081: LD_INT 149
12083: PUSH
12084: LD_INT 63
12086: PUSH
12087: LD_INT 4
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 17
12098: PUSH
12099: LD_INT 167
12101: PUSH
12102: LD_INT 99
12104: PUSH
12105: LD_INT 5
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 18
12116: PUSH
12117: LD_INT 163
12119: PUSH
12120: LD_INT 98
12122: PUSH
12123: LD_INT 0
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 28
12134: PUSH
12135: LD_INT 154
12137: PUSH
12138: LD_INT 70
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 32
12152: PUSH
12153: LD_INT 155
12155: PUSH
12156: LD_INT 62
12158: PUSH
12159: LD_INT 4
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 32
12170: PUSH
12171: LD_INT 161
12173: PUSH
12174: LD_INT 69
12176: PUSH
12177: LD_INT 4
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 32
12188: PUSH
12189: LD_INT 168
12191: PUSH
12192: LD_INT 78
12194: PUSH
12195: LD_INT 4
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 32
12206: PUSH
12207: LD_INT 163
12209: PUSH
12210: LD_INT 80
12212: PUSH
12213: LD_INT 5
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 32
12224: PUSH
12225: LD_INT 136
12227: PUSH
12228: LD_INT 73
12230: PUSH
12231: LD_INT 0
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 32
12242: PUSH
12243: LD_INT 157
12245: PUSH
12246: LD_INT 98
12248: PUSH
12249: LD_INT 0
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 32
12260: PUSH
12261: LD_INT 150
12263: PUSH
12264: LD_INT 87
12266: PUSH
12267: LD_INT 1
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 33
12278: PUSH
12279: LD_INT 171
12281: PUSH
12282: LD_INT 97
12284: PUSH
12285: LD_INT 4
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 33
12296: PUSH
12297: LD_INT 168
12299: PUSH
12300: LD_INT 92
12302: PUSH
12303: LD_INT 4
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 33
12314: PUSH
12315: LD_INT 166
12317: PUSH
12318: LD_INT 80
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 33
12332: PUSH
12333: LD_INT 141
12335: PUSH
12336: LD_INT 54
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 33
12350: PUSH
12351: LD_INT 133
12353: PUSH
12354: LD_INT 57
12356: PUSH
12357: LD_INT 2
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 33
12368: PUSH
12369: LD_INT 132
12371: PUSH
12372: LD_INT 61
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 33
12386: PUSH
12387: LD_INT 150
12389: PUSH
12390: LD_INT 82
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 33
12404: PUSH
12405: LD_INT 132
12407: PUSH
12408: LD_INT 72
12410: PUSH
12411: LD_INT 0
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 6
12422: PUSH
12423: LD_INT 146
12425: PUSH
12426: LD_INT 64
12428: PUSH
12429: LD_INT 4
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 6
12440: PUSH
12441: LD_INT 159
12443: PUSH
12444: LD_INT 85
12446: PUSH
12447: LD_INT 4
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 21
12458: PUSH
12459: LD_INT 163
12461: PUSH
12462: LD_INT 91
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 16
12476: PUSH
12477: LD_INT 166
12479: PUSH
12480: LD_INT 95
12482: PUSH
12483: LD_INT 4
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 24
12494: PUSH
12495: LD_INT 159
12497: PUSH
12498: LD_INT 95
12500: PUSH
12501: LD_INT 1
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12543: LD_ADDR_VAR 0 3
12547: PUSH
12548: LD_INT 22
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 3
12560: PUSH
12561: LD_INT 25
12563: PUSH
12564: LD_INT 2
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PPUSH
12579: CALL_OW 69
12583: PUSH
12584: FOR_IN
12585: IFFALSE 12604
// AddComAgressiveMove ( i , 141 , 65 ) ;
12587: LD_VAR 0 3
12591: PPUSH
12592: LD_INT 141
12594: PPUSH
12595: LD_INT 65
12597: PPUSH
12598: CALL_OW 174
12602: GO 12584
12604: POP
12605: POP
// for i := 1 to buildingsTab do
12606: LD_ADDR_VAR 0 3
12610: PUSH
12611: DOUBLE
12612: LD_INT 1
12614: DEC
12615: ST_TO_ADDR
12616: LD_VAR 0 5
12620: PUSH
12621: FOR_TO
12622: IFFALSE 12695
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12624: LD_VAR 0 4
12628: PPUSH
12629: LD_VAR 0 5
12633: PUSH
12634: LD_VAR 0 3
12638: ARRAY
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: LD_VAR 0 5
12648: PUSH
12649: LD_VAR 0 3
12653: ARRAY
12654: PUSH
12655: LD_INT 2
12657: ARRAY
12658: PPUSH
12659: LD_VAR 0 5
12663: PUSH
12664: LD_VAR 0 3
12668: ARRAY
12669: PUSH
12670: LD_INT 3
12672: ARRAY
12673: PPUSH
12674: LD_VAR 0 5
12678: PUSH
12679: LD_VAR 0 3
12683: ARRAY
12684: PUSH
12685: LD_INT 4
12687: ARRAY
12688: PPUSH
12689: CALL_OW 205
12693: GO 12621
12695: POP
12696: POP
// end ; end ;
12697: LD_VAR 0 2
12701: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12702: LD_INT 0
12704: PPUSH
12705: PPUSH
12706: PPUSH
12707: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12708: LD_ADDR_VAR 0 3
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_INT 2
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 25
12725: PUSH
12726: LD_INT 2
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: PPUSH
12737: CALL_OW 69
12741: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12742: LD_VAR 0 3
12746: PPUSH
12747: LD_INT 0
12749: PPUSH
12750: LD_INT 71
12752: PPUSH
12753: LD_INT 15
12755: PPUSH
12756: LD_INT 3
12758: PPUSH
12759: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12763: LD_ADDR_VAR 0 4
12767: PUSH
12768: LD_INT 6
12770: PUSH
12771: LD_INT 77
12773: PUSH
12774: LD_INT 18
12776: PUSH
12777: LD_INT 3
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 4
12788: PUSH
12789: LD_INT 77
12791: PUSH
12792: LD_INT 26
12794: PUSH
12795: LD_INT 0
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 31
12806: PUSH
12807: LD_INT 82
12809: PUSH
12810: LD_INT 28
12812: PUSH
12813: LD_INT 0
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 31
12824: PUSH
12825: LD_INT 84
12827: PUSH
12828: LD_INT 21
12830: PUSH
12831: LD_INT 3
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 31
12842: PUSH
12843: LD_INT 66
12845: PUSH
12846: LD_INT 14
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: LD_INT 27
12860: PUSH
12861: LD_INT 67
12863: PUSH
12864: LD_INT 18
12866: PUSH
12867: LD_INT 5
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 27
12878: PUSH
12879: LD_INT 69
12881: PUSH
12882: LD_INT 23
12884: PUSH
12885: LD_INT 2
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: PUSH
12894: EMPTY
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: ST_TO_ADDR
// for i := 1 to buildingsTab do
12903: LD_ADDR_VAR 0 2
12907: PUSH
12908: DOUBLE
12909: LD_INT 1
12911: DEC
12912: ST_TO_ADDR
12913: LD_VAR 0 4
12917: PUSH
12918: FOR_TO
12919: IFFALSE 12992
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12921: LD_VAR 0 3
12925: PPUSH
12926: LD_VAR 0 4
12930: PUSH
12931: LD_VAR 0 2
12935: ARRAY
12936: PUSH
12937: LD_INT 1
12939: ARRAY
12940: PPUSH
12941: LD_VAR 0 4
12945: PUSH
12946: LD_VAR 0 2
12950: ARRAY
12951: PUSH
12952: LD_INT 2
12954: ARRAY
12955: PPUSH
12956: LD_VAR 0 4
12960: PUSH
12961: LD_VAR 0 2
12965: ARRAY
12966: PUSH
12967: LD_INT 3
12969: ARRAY
12970: PPUSH
12971: LD_VAR 0 4
12975: PUSH
12976: LD_VAR 0 2
12980: ARRAY
12981: PUSH
12982: LD_INT 4
12984: ARRAY
12985: PPUSH
12986: CALL_OW 205
12990: GO 12918
12992: POP
12993: POP
// end ;
12994: LD_VAR 0 1
12998: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12999: LD_INT 0
13001: PPUSH
13002: PPUSH
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13007: LD_ADDR_VAR 0 7
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 1
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 9
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: EMPTY
13035: LIST
13036: LIST
13037: PPUSH
13038: CALL_OW 69
13042: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13043: LD_ADDR_VAR 0 8
13047: PUSH
13048: LD_INT 22
13050: PUSH
13051: LD_VAR 0 2
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 3
13062: PUSH
13063: LD_INT 21
13065: PUSH
13066: LD_INT 3
13068: PUSH
13069: EMPTY
13070: LIST
13071: LIST
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: PPUSH
13081: CALL_OW 69
13085: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13086: LD_ADDR_VAR 0 5
13090: PUSH
13091: LD_INT 1
13093: PPUSH
13094: LD_INT 3
13096: PPUSH
13097: CALL_OW 12
13101: ST_TO_ADDR
// for i = 1 to list do
13102: LD_ADDR_VAR 0 6
13106: PUSH
13107: DOUBLE
13108: LD_INT 1
13110: DEC
13111: ST_TO_ADDR
13112: LD_VAR 0 7
13116: PUSH
13117: FOR_TO
13118: IFFALSE 14108
// for ta in filter do
13120: LD_ADDR_VAR 0 4
13124: PUSH
13125: LD_VAR 0 8
13129: PUSH
13130: FOR_IN
13131: IFFALSE 14104
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13133: LD_VAR 0 7
13137: PUSH
13138: LD_VAR 0 6
13142: ARRAY
13143: PPUSH
13144: LD_VAR 0 4
13148: PPUSH
13149: CALL_OW 296
13153: PUSH
13154: LD_INT 15
13156: LESSEQUAL
13157: IFFALSE 14102
// begin case c of 1 :
13159: LD_VAR 0 5
13163: PUSH
13164: LD_INT 1
13166: DOUBLE
13167: EQUAL
13168: IFTRUE 13172
13170: GO 13604
13172: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13173: LD_VAR 0 7
13177: PUSH
13178: LD_VAR 0 6
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 4
13188: PPUSH
13189: CALL_OW 250
13193: PPUSH
13194: LD_VAR 0 4
13198: PPUSH
13199: CALL_OW 251
13203: PPUSH
13204: CALL_OW 154
// if eventVar2 = 0 then
13208: LD_EXP 62
13212: PUSH
13213: LD_INT 0
13215: EQUAL
13216: IFFALSE 13602
// begin eventVar2 = 1 ;
13218: LD_ADDR_EXP 62
13222: PUSH
13223: LD_INT 1
13225: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13226: LD_INT 245
13228: PPUSH
13229: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13233: LD_VAR 0 4
13237: PPUSH
13238: CALL_OW 250
13242: PPUSH
13243: LD_VAR 0 4
13247: PPUSH
13248: CALL_OW 251
13252: PPUSH
13253: CALL_OW 84
// DialogueOn ;
13257: CALL_OW 6
// if IsOK ( Cyrus ) then
13261: LD_EXP 5
13265: PPUSH
13266: CALL_OW 302
13270: IFFALSE 13286
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13272: LD_EXP 5
13276: PPUSH
13277: LD_STRING D9a-Cyrus-1
13279: PPUSH
13280: CALL_OW 88
// end else
13284: GO 13408
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13286: LD_INT 22
13288: PUSH
13289: LD_INT 1
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 26
13298: PUSH
13299: LD_INT 1
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 2
13308: PUSH
13309: LD_INT 25
13311: PUSH
13312: LD_INT 1
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 25
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 25
13331: PUSH
13332: LD_INT 3
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: LD_INT 25
13341: PUSH
13342: LD_INT 4
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: LD_INT 5
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: LIST
13371: PPUSH
13372: CALL_OW 69
13376: PUSH
13377: LD_EXP 1
13381: PUSH
13382: LD_EXP 14
13386: PUSH
13387: LD_EXP 5
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: LIST
13396: DIFF
13397: PPUSH
13398: LD_STRING D9a-Sol1-1
13400: PPUSH
13401: LD_STRING D9a-Sol1-1
13403: PPUSH
13404: CALL 9654 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13408: LD_INT 22
13410: PUSH
13411: LD_INT 1
13413: PUSH
13414: EMPTY
13415: LIST
13416: LIST
13417: PUSH
13418: LD_INT 26
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 2
13430: PUSH
13431: LD_INT 25
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 25
13443: PUSH
13444: LD_INT 2
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 25
13453: PUSH
13454: LD_INT 3
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 25
13463: PUSH
13464: LD_INT 4
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 5
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 69
13498: PUSH
13499: LD_EXP 1
13503: PUSH
13504: LD_EXP 14
13508: PUSH
13509: LD_EXP 5
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: DIFF
13519: PPUSH
13520: LD_STRING D9b-Sol1-1
13522: PPUSH
13523: LD_STRING D9b-Sol1-1
13525: PPUSH
13526: CALL 9654 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13530: LD_STRING 09_arInfo
13532: PPUSH
13533: LD_INT 0
13535: PPUSH
13536: CALL_OW 30
13540: PUSH
13541: LD_INT 1
13543: EQUAL
13544: IFFALSE 13558
// Say ( JMM , D9a-JMM-1 ) ;
13546: LD_EXP 1
13550: PPUSH
13551: LD_STRING D9a-JMM-1
13553: PPUSH
13554: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13558: LD_EXP 1
13562: PPUSH
13563: LD_STRING D9c-JMM-1
13565: PPUSH
13566: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13570: LD_INT 12
13572: PPUSH
13573: LD_INT 1
13575: PPUSH
13576: CALL_OW 321
13580: PUSH
13581: LD_INT 2
13583: EQUAL
13584: IFFALSE 13598
// Say ( JMM , D9c-JMM-1a ) ;
13586: LD_EXP 1
13590: PPUSH
13591: LD_STRING D9c-JMM-1a
13593: PPUSH
13594: CALL_OW 88
// DialogueOff ;
13598: CALL_OW 7
// end ; end ; 2 :
13602: GO 14102
13604: LD_INT 2
13606: DOUBLE
13607: EQUAL
13608: IFTRUE 13612
13610: GO 14070
13612: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13613: LD_VAR 0 7
13617: PUSH
13618: LD_VAR 0 6
13622: ARRAY
13623: PPUSH
13624: LD_VAR 0 4
13628: PPUSH
13629: CALL_OW 250
13633: PUSH
13634: LD_INT 1
13636: NEG
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: CALL_OW 12
13645: PLUS
13646: PPUSH
13647: LD_VAR 0 4
13651: PPUSH
13652: CALL_OW 251
13656: PUSH
13657: LD_INT 1
13659: NEG
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: CALL_OW 12
13668: PLUS
13669: PPUSH
13670: CALL_OW 153
// if eventVar2 = 0 then
13674: LD_EXP 62
13678: PUSH
13679: LD_INT 0
13681: EQUAL
13682: IFFALSE 14068
// begin eventVar2 = 1 ;
13684: LD_ADDR_EXP 62
13688: PUSH
13689: LD_INT 1
13691: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13692: LD_INT 245
13694: PPUSH
13695: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13699: LD_VAR 0 4
13703: PPUSH
13704: CALL_OW 250
13708: PPUSH
13709: LD_VAR 0 4
13713: PPUSH
13714: CALL_OW 251
13718: PPUSH
13719: CALL_OW 84
// DialogueOn ;
13723: CALL_OW 6
// if IsOK ( Cyrus ) then
13727: LD_EXP 5
13731: PPUSH
13732: CALL_OW 302
13736: IFFALSE 13752
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13738: LD_EXP 5
13742: PPUSH
13743: LD_STRING D9a-Cyrus-1
13745: PPUSH
13746: CALL_OW 88
// end else
13750: GO 13874
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13752: LD_INT 22
13754: PUSH
13755: LD_INT 1
13757: PUSH
13758: EMPTY
13759: LIST
13760: LIST
13761: PUSH
13762: LD_INT 26
13764: PUSH
13765: LD_INT 1
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PUSH
13772: LD_INT 2
13774: PUSH
13775: LD_INT 25
13777: PUSH
13778: LD_INT 1
13780: PUSH
13781: EMPTY
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 25
13787: PUSH
13788: LD_INT 2
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 25
13797: PUSH
13798: LD_INT 3
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: LD_INT 25
13807: PUSH
13808: LD_INT 4
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: LD_INT 25
13817: PUSH
13818: LD_INT 5
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: PPUSH
13838: CALL_OW 69
13842: PUSH
13843: LD_EXP 1
13847: PUSH
13848: LD_EXP 14
13852: PUSH
13853: LD_EXP 5
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: LIST
13862: DIFF
13863: PPUSH
13864: LD_STRING D9a-Sol1-1
13866: PPUSH
13867: LD_STRING D9a-Sol1-1
13869: PPUSH
13870: CALL 9654 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13874: LD_INT 22
13876: PUSH
13877: LD_INT 1
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 26
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 2
13896: PUSH
13897: LD_INT 25
13899: PUSH
13900: LD_INT 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 25
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 25
13919: PUSH
13920: LD_INT 3
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 25
13929: PUSH
13930: LD_INT 4
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: LD_INT 25
13939: PUSH
13940: LD_INT 5
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 69
13964: PUSH
13965: LD_EXP 1
13969: PUSH
13970: LD_EXP 14
13974: PUSH
13975: LD_EXP 5
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: LIST
13984: DIFF
13985: PPUSH
13986: LD_STRING D9b-Sol1-1
13988: PPUSH
13989: LD_STRING D9b-Sol1-1
13991: PPUSH
13992: CALL 9654 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13996: LD_STRING 09_arInfo
13998: PPUSH
13999: LD_INT 0
14001: PPUSH
14002: CALL_OW 30
14006: PUSH
14007: LD_INT 1
14009: EQUAL
14010: IFFALSE 14024
// Say ( JMM , D9a-JMM-1 ) ;
14012: LD_EXP 1
14016: PPUSH
14017: LD_STRING D9a-JMM-1
14019: PPUSH
14020: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14024: LD_EXP 1
14028: PPUSH
14029: LD_STRING D9c-JMM-1
14031: PPUSH
14032: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14036: LD_INT 12
14038: PPUSH
14039: LD_INT 1
14041: PPUSH
14042: CALL_OW 321
14046: PUSH
14047: LD_INT 2
14049: EQUAL
14050: IFFALSE 14064
// Say ( JMM , D9c-JMM-1a ) ;
14052: LD_EXP 1
14056: PPUSH
14057: LD_STRING D9c-JMM-1a
14059: PPUSH
14060: CALL_OW 88
// DialogueOff ;
14064: CALL_OW 7
// end ; end ; 3 :
14068: GO 14102
14070: LD_INT 3
14072: DOUBLE
14073: EQUAL
14074: IFTRUE 14078
14076: GO 14101
14078: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14079: LD_VAR 0 7
14083: PUSH
14084: LD_VAR 0 6
14088: ARRAY
14089: PPUSH
14090: LD_VAR 0 4
14094: PPUSH
14095: CALL_OW 115
14099: GO 14102
14101: POP
// end ; end ;
14102: GO 13130
14104: POP
14105: POP
14106: GO 13117
14108: POP
14109: POP
// end ;
14110: LD_VAR 0 3
14114: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
// for i = 1 to 72 do
14121: LD_ADDR_VAR 0 5
14125: PUSH
14126: DOUBLE
14127: LD_INT 1
14129: DEC
14130: ST_TO_ADDR
14131: LD_INT 72
14133: PUSH
14134: FOR_TO
14135: IFFALSE 14193
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14137: LD_VAR 0 5
14141: PPUSH
14142: LD_VAR 0 1
14146: PPUSH
14147: CALL_OW 321
14151: PUSH
14152: LD_INT 1
14154: EQUAL
14155: PUSH
14156: LD_VAR 0 5
14160: PPUSH
14161: LD_VAR 0 3
14165: PPUSH
14166: CALL_OW 482
14170: PUSH
14171: LD_INT 1
14173: EQUAL
14174: AND
14175: IFFALSE 14191
// AddComResearch ( lab , i ) ;
14177: LD_VAR 0 2
14181: PPUSH
14182: LD_VAR 0 5
14186: PPUSH
14187: CALL_OW 184
14191: GO 14134
14193: POP
14194: POP
// end ;
14195: LD_VAR 0 4
14199: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14200: LD_INT 0
14202: PPUSH
14203: PPUSH
14204: PPUSH
14205: PPUSH
14206: PPUSH
14207: PPUSH
14208: PPUSH
14209: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14210: LD_ADDR_VAR 0 6
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_VAR 0 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: LD_INT 56
14229: PUSH
14230: EMPTY
14231: LIST
14232: PUSH
14233: LD_INT 24
14235: PUSH
14236: LD_INT 700
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 3
14245: PUSH
14246: LD_INT 60
14248: PUSH
14249: EMPTY
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 2
14258: PUSH
14259: LD_INT 25
14261: PUSH
14262: LD_INT 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 25
14271: PUSH
14272: LD_INT 9
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: LIST
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PPUSH
14291: CALL_OW 69
14295: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14296: LD_ADDR_VAR 0 7
14300: PUSH
14301: LD_INT 22
14303: PUSH
14304: LD_VAR 0 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 30
14315: PUSH
14316: LD_INT 32
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 58
14325: PUSH
14326: EMPTY
14327: LIST
14328: PUSH
14329: LD_INT 24
14331: PUSH
14332: LD_INT 251
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14350: LD_ADDR_VAR 0 9
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_VAR 0 1
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 2
14369: PUSH
14370: LD_INT 30
14372: PUSH
14373: LD_INT 4
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 30
14382: PUSH
14383: LD_INT 5
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 24
14397: PUSH
14398: LD_INT 251
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: LIST
14409: PPUSH
14410: CALL_OW 69
14414: ST_TO_ADDR
// if barrackList > 0 then
14415: LD_VAR 0 9
14419: PUSH
14420: LD_INT 0
14422: GREATER
14423: IFFALSE 14558
// begin if turretList = 0 then
14425: LD_VAR 0 7
14429: PUSH
14430: LD_INT 0
14432: EQUAL
14433: IFFALSE 14482
// begin for i in soldiers_list do
14435: LD_ADDR_VAR 0 4
14439: PUSH
14440: LD_VAR 0 6
14444: PUSH
14445: FOR_IN
14446: IFFALSE 14478
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14448: LD_VAR 0 4
14452: PPUSH
14453: LD_VAR 0 9
14457: PUSH
14458: LD_INT 1
14460: PPUSH
14461: LD_VAR 0 9
14465: PPUSH
14466: CALL_OW 12
14470: ARRAY
14471: PPUSH
14472: CALL_OW 120
14476: GO 14445
14478: POP
14479: POP
// end else
14480: GO 14558
// begin for i in barrackList do
14482: LD_ADDR_VAR 0 4
14486: PUSH
14487: LD_VAR 0 9
14491: PUSH
14492: FOR_IN
14493: IFFALSE 14556
// begin insideUnits = UnitsInside ( i ) ;
14495: LD_ADDR_VAR 0 10
14499: PUSH
14500: LD_VAR 0 4
14504: PPUSH
14505: CALL_OW 313
14509: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14510: LD_VAR 0 10
14514: PUSH
14515: LD_INT 1
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 7
14523: PUSH
14524: LD_INT 1
14526: ARRAY
14527: PPUSH
14528: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14532: LD_VAR 0 6
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 7
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PPUSH
14550: CALL_OW 120
// end ;
14554: GO 14492
14556: POP
14557: POP
// end ; end ; end ;
14558: LD_VAR 0 3
14562: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14563: LD_INT 0
14565: PPUSH
14566: PPUSH
14567: PPUSH
14568: PPUSH
14569: PPUSH
14570: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14571: LD_ADDR_VAR 0 6
14575: PUSH
14576: LD_VAR 0 2
14580: PPUSH
14581: CALL_OW 313
14585: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14586: LD_ADDR_VAR 0 7
14590: PUSH
14591: LD_INT 22
14593: PUSH
14594: LD_VAR 0 1
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 25
14605: PUSH
14606: LD_INT 2
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 24
14615: PUSH
14616: LD_INT 1000
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 3
14625: PUSH
14626: LD_INT 54
14628: PUSH
14629: EMPTY
14630: LIST
14631: PUSH
14632: EMPTY
14633: LIST
14634: LIST
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: PPUSH
14642: CALL_OW 69
14646: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: LD_INT 22
14654: PUSH
14655: LD_VAR 0 1
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 21
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: EMPTY
14671: LIST
14672: LIST
14673: PUSH
14674: LD_INT 3
14676: PUSH
14677: LD_INT 24
14679: PUSH
14680: LD_INT 1000
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: PPUSH
14699: CALL_OW 69
14703: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14704: LD_VAR 0 4
14708: NOT
14709: PUSH
14710: LD_VAR 0 7
14714: NOT
14715: AND
14716: PUSH
14717: LD_EXP 42
14721: NOT
14722: AND
14723: IFFALSE 14727
// exit ;
14725: GO 14918
// if buildings_list > 0 and engineerOkInside then
14727: LD_VAR 0 4
14731: PUSH
14732: LD_INT 0
14734: GREATER
14735: PUSH
14736: LD_VAR 0 6
14740: AND
14741: IFFALSE 14795
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14743: LD_ADDR_VAR 0 5
14747: PUSH
14748: LD_INT 22
14750: PUSH
14751: LD_VAR 0 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PUSH
14779: FOR_IN
14780: IFFALSE 14793
// ComExitBuilding ( i ) ;
14782: LD_VAR 0 5
14786: PPUSH
14787: CALL_OW 122
14791: GO 14779
14793: POP
14794: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14795: LD_VAR 0 4
14799: PUSH
14800: LD_INT 0
14802: GREATER
14803: PUSH
14804: LD_VAR 0 7
14808: PUSH
14809: LD_INT 0
14811: GREATER
14812: AND
14813: IFFALSE 14867
// begin for i in engineerOkOutside do
14815: LD_ADDR_VAR 0 5
14819: PUSH
14820: LD_VAR 0 7
14824: PUSH
14825: FOR_IN
14826: IFFALSE 14865
// for j in buildings_list do
14828: LD_ADDR_VAR 0 8
14832: PUSH
14833: LD_VAR 0 4
14837: PUSH
14838: FOR_IN
14839: IFFALSE 14861
// ComRepairBuilding ( i , j [ 1 ] ) ;
14841: LD_VAR 0 5
14845: PPUSH
14846: LD_VAR 0 8
14850: PUSH
14851: LD_INT 1
14853: ARRAY
14854: PPUSH
14855: CALL_OW 130
14859: GO 14838
14861: POP
14862: POP
14863: GO 14825
14865: POP
14866: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14867: LD_VAR 0 4
14871: PUSH
14872: LD_INT 0
14874: EQUAL
14875: PUSH
14876: LD_VAR 0 7
14880: PUSH
14881: LD_INT 0
14883: GREATER
14884: AND
14885: IFFALSE 14918
// for i in engineerOkOutside do
14887: LD_ADDR_VAR 0 5
14891: PUSH
14892: LD_VAR 0 7
14896: PUSH
14897: FOR_IN
14898: IFFALSE 14916
// ComEnterUnit ( i , building ) ;
14900: LD_VAR 0 5
14904: PPUSH
14905: LD_VAR 0 2
14909: PPUSH
14910: CALL_OW 120
14914: GO 14897
14916: POP
14917: POP
// end ;
14918: LD_VAR 0 3
14922: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14927: LD_INT 22
14929: PUSH
14930: LD_VAR 0 1
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PUSH
14939: LD_INT 25
14941: PUSH
14942: LD_INT 2
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: EMPTY
14950: LIST
14951: LIST
14952: PPUSH
14953: CALL_OW 69
14957: PUSH
14958: LD_INT 0
14960: GREATER
14961: PUSH
14962: LD_INT 22
14964: PUSH
14965: LD_VAR 0 1
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 21
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: LD_INT 3
14986: PUSH
14987: LD_INT 24
14989: PUSH
14990: LD_INT 1000
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: EMPTY
14998: LIST
14999: LIST
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: PPUSH
15006: CALL_OW 69
15010: PUSH
15011: LD_INT 0
15013: EQUAL
15014: AND
15015: PUSH
15016: LD_VAR 0 2
15020: PUSH
15021: LD_INT 0
15023: GREATER
15024: AND
15025: IFFALSE 15124
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_INT 22
15034: PUSH
15035: LD_VAR 0 1
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: LD_INT 25
15046: PUSH
15047: LD_INT 2
15049: PUSH
15050: EMPTY
15051: LIST
15052: LIST
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PPUSH
15058: CALL_OW 69
15062: PUSH
15063: FOR_IN
15064: IFFALSE 15122
// begin AddComExitBuilding ( i ) ;
15066: LD_VAR 0 4
15070: PPUSH
15071: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15075: LD_VAR 0 4
15079: PPUSH
15080: LD_VAR 0 2
15084: PUSH
15085: LD_INT 1
15087: ARRAY
15088: PPUSH
15089: LD_VAR 0 2
15093: PUSH
15094: LD_INT 2
15096: ARRAY
15097: PPUSH
15098: LD_VAR 0 2
15102: PUSH
15103: LD_INT 3
15105: ARRAY
15106: PPUSH
15107: LD_VAR 0 2
15111: PUSH
15112: LD_INT 4
15114: ARRAY
15115: PPUSH
15116: CALL_OW 205
// end ;
15120: GO 15063
15122: POP
15123: POP
// end ; end ;
15124: LD_VAR 0 3
15128: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15129: LD_INT 0
15131: PPUSH
15132: PPUSH
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
15139: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15140: LD_ADDR_VAR 0 6
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_VAR 0 1
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 25
15159: PUSH
15160: LD_INT 4
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 24
15169: PUSH
15170: LD_INT 251
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: LIST
15181: PPUSH
15182: CALL_OW 69
15186: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15187: LD_ADDR_VAR 0 7
15191: PUSH
15192: LD_VAR 0 3
15196: PPUSH
15197: LD_INT 22
15199: PUSH
15200: LD_VAR 0 1
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 25
15211: PUSH
15212: LD_INT 4
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 50
15221: PUSH
15222: EMPTY
15223: LIST
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 70
15234: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15235: LD_ADDR_VAR 0 10
15239: PUSH
15240: LD_VAR 0 3
15244: PPUSH
15245: LD_INT 22
15247: PUSH
15248: LD_VAR 0 1
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 21
15259: PUSH
15260: LD_INT 1
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 3
15269: PUSH
15270: LD_INT 25
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: LD_INT 24
15289: PUSH
15290: LD_INT 750
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: PPUSH
15307: CALL_OW 70
15311: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15312: LD_ADDR_VAR 0 11
15316: PUSH
15317: LD_VAR 0 2
15321: PPUSH
15322: LD_INT 22
15324: PUSH
15325: LD_VAR 0 1
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: LD_INT 21
15336: PUSH
15337: LD_INT 1
15339: PUSH
15340: EMPTY
15341: LIST
15342: LIST
15343: PUSH
15344: LD_INT 3
15346: PUSH
15347: LD_INT 25
15349: PUSH
15350: LD_INT 3
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: LD_INT 24
15366: PUSH
15367: LD_INT 1000
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: PPUSH
15384: CALL_OW 70
15388: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15389: LD_VAR 0 10
15393: NOT
15394: PUSH
15395: LD_VAR 0 7
15399: NOT
15400: AND
15401: PUSH
15402: LD_VAR 0 11
15406: NOT
15407: AND
15408: IFFALSE 15412
// exit ;
15410: GO 15672
// if damageUnits > 0 and sci_list > 0 then
15412: LD_VAR 0 10
15416: PUSH
15417: LD_INT 0
15419: GREATER
15420: PUSH
15421: LD_VAR 0 6
15425: PUSH
15426: LD_INT 0
15428: GREATER
15429: AND
15430: IFFALSE 15463
// for i in damageUnits do
15432: LD_ADDR_VAR 0 8
15436: PUSH
15437: LD_VAR 0 10
15441: PUSH
15442: FOR_IN
15443: IFFALSE 15461
// ComMoveToArea ( i , healArea ) ;
15445: LD_VAR 0 8
15449: PPUSH
15450: LD_VAR 0 2
15454: PPUSH
15455: CALL_OW 113
15459: GO 15442
15461: POP
15462: POP
// if unitsToHeal > 0 and sci_list > 0 then
15463: LD_VAR 0 11
15467: PUSH
15468: LD_INT 0
15470: GREATER
15471: PUSH
15472: LD_VAR 0 6
15476: PUSH
15477: LD_INT 0
15479: GREATER
15480: AND
15481: IFFALSE 15540
// begin for i in sci_list do
15483: LD_ADDR_VAR 0 8
15487: PUSH
15488: LD_VAR 0 6
15492: PUSH
15493: FOR_IN
15494: IFFALSE 15538
// begin ComExitBuilding ( i ) ;
15496: LD_VAR 0 8
15500: PPUSH
15501: CALL_OW 122
// for j in unitsToHeal do
15505: LD_ADDR_VAR 0 9
15509: PUSH
15510: LD_VAR 0 11
15514: PUSH
15515: FOR_IN
15516: IFFALSE 15534
// AddComHeal ( i , j ) ;
15518: LD_VAR 0 8
15522: PPUSH
15523: LD_VAR 0 9
15527: PPUSH
15528: CALL_OW 188
15532: GO 15515
15534: POP
15535: POP
// end ;
15536: GO 15493
15538: POP
15539: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15540: LD_VAR 0 10
15544: PUSH
15545: LD_INT 0
15547: EQUAL
15548: PUSH
15549: LD_VAR 0 11
15553: PUSH
15554: LD_INT 0
15556: EQUAL
15557: AND
15558: PUSH
15559: LD_VAR 0 7
15563: PUSH
15564: LD_INT 0
15566: GREATER
15567: AND
15568: IFFALSE 15672
// for i in sci_listOutside do
15570: LD_ADDR_VAR 0 8
15574: PUSH
15575: LD_VAR 0 7
15579: PUSH
15580: FOR_IN
15581: IFFALSE 15670
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15583: LD_ADDR_VAR 0 12
15587: PUSH
15588: LD_INT 22
15590: PUSH
15591: LD_VAR 0 1
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 21
15602: PUSH
15603: LD_INT 3
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: LD_INT 30
15612: PUSH
15613: LD_INT 8
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: EMPTY
15621: LIST
15622: LIST
15623: LIST
15624: PPUSH
15625: CALL_OW 69
15629: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15630: LD_ADDR_VAR 0 13
15634: PUSH
15635: LD_INT 1
15637: PPUSH
15638: LD_VAR 0 12
15642: PPUSH
15643: CALL_OW 12
15647: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15648: LD_VAR 0 8
15652: PPUSH
15653: LD_VAR 0 12
15657: PUSH
15658: LD_VAR 0 13
15662: ARRAY
15663: PPUSH
15664: CALL_OW 120
// end ;
15668: GO 15580
15670: POP
15671: POP
// end ;
15672: LD_VAR 0 5
15676: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15677: LD_INT 0
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
15683: PPUSH
15684: PPUSH
15685: PPUSH
15686: PPUSH
15687: PPUSH
15688: PPUSH
15689: PPUSH
// amChassisTab = [ ] ;
15690: LD_ADDR_VAR 0 19
15694: PUSH
15695: EMPTY
15696: ST_TO_ADDR
// arChassisTab = [ ] ;
15697: LD_ADDR_VAR 0 18
15701: PUSH
15702: EMPTY
15703: ST_TO_ADDR
// ruChassisTab = [ ] ;
15704: LD_ADDR_VAR 0 17
15708: PUSH
15709: EMPTY
15710: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15711: LD_INT 35
15713: PPUSH
15714: CALL_OW 67
// if nation = 1 then
15718: LD_VAR 0 5
15722: PUSH
15723: LD_INT 1
15725: EQUAL
15726: IFFALSE 16231
// begin uc_side = side ;
15728: LD_ADDR_OWVAR 20
15732: PUSH
15733: LD_VAR 0 2
15737: ST_TO_ADDR
// uc_nation = nation ;
15738: LD_ADDR_OWVAR 21
15742: PUSH
15743: LD_VAR 0 5
15747: ST_TO_ADDR
// vc_engine = vehengine ;
15748: LD_ADDR_OWVAR 39
15752: PUSH
15753: LD_VAR 0 6
15757: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15758: LD_ADDR_OWVAR 38
15762: PUSH
15763: LD_VAR 0 7
15767: PUSH
15768: LD_INT 1
15770: PPUSH
15771: LD_VAR 0 7
15775: PPUSH
15776: CALL_OW 12
15780: ARRAY
15781: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15782: LD_ADDR_OWVAR 40
15786: PUSH
15787: LD_VAR 0 10
15791: PUSH
15792: LD_INT 1
15794: PPUSH
15795: LD_VAR 0 10
15799: PPUSH
15800: CALL_OW 12
15804: ARRAY
15805: ST_TO_ADDR
// for j = 1 to AMWeapon do
15806: LD_ADDR_VAR 0 14
15810: PUSH
15811: DOUBLE
15812: LD_INT 1
15814: DEC
15815: ST_TO_ADDR
15816: LD_VAR 0 10
15820: PUSH
15821: FOR_TO
15822: IFFALSE 16123
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15824: LD_VAR 0 10
15828: PUSH
15829: LD_VAR 0 14
15833: ARRAY
15834: PUSH
15835: LD_INT 2
15837: EQUAL
15838: PUSH
15839: LD_VAR 0 10
15843: PUSH
15844: LD_VAR 0 14
15848: ARRAY
15849: PUSH
15850: LD_INT 3
15852: EQUAL
15853: OR
15854: IFFALSE 15907
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15856: LD_ADDR_VAR 0 19
15860: PUSH
15861: LD_INT 1
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: LD_INT 3
15869: PUSH
15870: LD_INT 4
15872: PUSH
15873: LD_INT 5
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15883: LD_ADDR_OWVAR 37
15887: PUSH
15888: LD_VAR 0 19
15892: PUSH
15893: LD_INT 1
15895: PPUSH
15896: LD_VAR 0 19
15900: PPUSH
15901: CALL_OW 12
15905: ARRAY
15906: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15907: LD_VAR 0 10
15911: PUSH
15912: LD_VAR 0 14
15916: ARRAY
15917: PUSH
15918: LD_INT 4
15920: EQUAL
15921: PUSH
15922: LD_VAR 0 10
15926: PUSH
15927: LD_VAR 0 14
15931: ARRAY
15932: PUSH
15933: LD_INT 5
15935: EQUAL
15936: OR
15937: PUSH
15938: LD_VAR 0 10
15942: PUSH
15943: LD_VAR 0 14
15947: ARRAY
15948: PUSH
15949: LD_INT 9
15951: EQUAL
15952: OR
15953: PUSH
15954: LD_VAR 0 10
15958: PUSH
15959: LD_VAR 0 14
15963: ARRAY
15964: PUSH
15965: LD_INT 11
15967: EQUAL
15968: OR
15969: PUSH
15970: LD_VAR 0 10
15974: PUSH
15975: LD_VAR 0 14
15979: ARRAY
15980: PUSH
15981: LD_INT 7
15983: EQUAL
15984: OR
15985: IFFALSE 16034
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15987: LD_ADDR_VAR 0 19
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: LD_INT 3
15997: PUSH
15998: LD_INT 4
16000: PUSH
16001: LD_INT 5
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16010: LD_ADDR_OWVAR 37
16014: PUSH
16015: LD_VAR 0 19
16019: PUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_VAR 0 19
16027: PPUSH
16028: CALL_OW 12
16032: ARRAY
16033: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16034: LD_VAR 0 10
16038: PUSH
16039: LD_VAR 0 14
16043: ARRAY
16044: PUSH
16045: LD_INT 8
16047: EQUAL
16048: PUSH
16049: LD_VAR 0 10
16053: PUSH
16054: LD_VAR 0 14
16058: ARRAY
16059: PUSH
16060: LD_INT 6
16062: EQUAL
16063: OR
16064: PUSH
16065: LD_VAR 0 10
16069: PUSH
16070: LD_VAR 0 14
16074: ARRAY
16075: PUSH
16076: LD_INT 10
16078: EQUAL
16079: OR
16080: IFFALSE 16121
// begin amChassisTab = [ 4 , 5 ] ;
16082: LD_ADDR_VAR 0 19
16086: PUSH
16087: LD_INT 4
16089: PUSH
16090: LD_INT 5
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16097: LD_ADDR_OWVAR 37
16101: PUSH
16102: LD_VAR 0 19
16106: PUSH
16107: LD_INT 1
16109: PPUSH
16110: LD_VAR 0 19
16114: PPUSH
16115: CALL_OW 12
16119: ARRAY
16120: ST_TO_ADDR
// end ; end ;
16121: GO 15821
16123: POP
16124: POP
// veh = CreateVehicle ;
16125: LD_ADDR_VAR 0 16
16129: PUSH
16130: CALL_OW 45
16134: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16135: LD_VAR 0 16
16139: PPUSH
16140: LD_VAR 0 1
16144: PPUSH
16145: LD_INT 0
16147: PPUSH
16148: CALL_OW 49
// if vc_control = 1 then
16152: LD_OWVAR 38
16156: PUSH
16157: LD_INT 1
16159: EQUAL
16160: IFFALSE 16217
// begin hc_gallery =  ;
16162: LD_ADDR_OWVAR 33
16166: PUSH
16167: LD_STRING 
16169: ST_TO_ADDR
// hc_name =  ;
16170: LD_ADDR_OWVAR 26
16174: PUSH
16175: LD_STRING 
16177: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16178: LD_INT 0
16180: PPUSH
16181: LD_INT 3
16183: PPUSH
16184: LD_VAR 0 4
16188: PPUSH
16189: CALL_OW 380
// un = CreateHuman ;
16193: LD_ADDR_VAR 0 15
16197: PUSH
16198: CALL_OW 44
16202: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16203: LD_VAR 0 15
16207: PPUSH
16208: LD_VAR 0 16
16212: PPUSH
16213: CALL_OW 52
// end ; i = i + 1 ;
16217: LD_ADDR_VAR 0 13
16221: PUSH
16222: LD_VAR 0 13
16226: PUSH
16227: LD_INT 1
16229: PLUS
16230: ST_TO_ADDR
// end ; if nation = 2 then
16231: LD_VAR 0 5
16235: PUSH
16236: LD_INT 2
16238: EQUAL
16239: IFFALSE 16661
// begin uc_side = side ;
16241: LD_ADDR_OWVAR 20
16245: PUSH
16246: LD_VAR 0 2
16250: ST_TO_ADDR
// uc_nation = nation ;
16251: LD_ADDR_OWVAR 21
16255: PUSH
16256: LD_VAR 0 5
16260: ST_TO_ADDR
// vc_engine = vehengine ;
16261: LD_ADDR_OWVAR 39
16265: PUSH
16266: LD_VAR 0 6
16270: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16271: LD_ADDR_OWVAR 38
16275: PUSH
16276: LD_VAR 0 7
16280: PUSH
16281: LD_INT 1
16283: PPUSH
16284: LD_VAR 0 7
16288: PPUSH
16289: CALL_OW 12
16293: ARRAY
16294: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16295: LD_ADDR_OWVAR 40
16299: PUSH
16300: LD_VAR 0 9
16304: PUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_VAR 0 9
16312: PPUSH
16313: CALL_OW 12
16317: ARRAY
16318: ST_TO_ADDR
// for j = 1 to ARWeapons do
16319: LD_ADDR_VAR 0 14
16323: PUSH
16324: DOUBLE
16325: LD_INT 1
16327: DEC
16328: ST_TO_ADDR
16329: LD_VAR 0 9
16333: PUSH
16334: FOR_TO
16335: IFFALSE 16553
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16337: LD_VAR 0 9
16341: PUSH
16342: LD_VAR 0 14
16346: ARRAY
16347: PUSH
16348: LD_INT 24
16350: EQUAL
16351: PUSH
16352: LD_VAR 0 9
16356: PUSH
16357: LD_VAR 0 14
16361: ARRAY
16362: PUSH
16363: LD_INT 22
16365: EQUAL
16366: OR
16367: PUSH
16368: LD_VAR 0 9
16372: PUSH
16373: LD_VAR 0 14
16377: ARRAY
16378: PUSH
16379: LD_INT 23
16381: EQUAL
16382: OR
16383: PUSH
16384: LD_VAR 0 9
16388: PUSH
16389: LD_VAR 0 14
16393: ARRAY
16394: PUSH
16395: LD_INT 30
16397: EQUAL
16398: OR
16399: IFFALSE 16436
// begin arChassisTab = [ 14 ] ;
16401: LD_ADDR_VAR 0 18
16405: PUSH
16406: LD_INT 14
16408: PUSH
16409: EMPTY
16410: LIST
16411: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16412: LD_ADDR_OWVAR 37
16416: PUSH
16417: LD_VAR 0 18
16421: PUSH
16422: LD_INT 1
16424: PPUSH
16425: LD_VAR 0 18
16429: PPUSH
16430: CALL_OW 12
16434: ARRAY
16435: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16436: LD_VAR 0 9
16440: PUSH
16441: LD_VAR 0 14
16445: ARRAY
16446: PUSH
16447: LD_INT 29
16449: EQUAL
16450: PUSH
16451: LD_VAR 0 9
16455: PUSH
16456: LD_VAR 0 14
16460: ARRAY
16461: PUSH
16462: LD_INT 28
16464: EQUAL
16465: OR
16466: PUSH
16467: LD_VAR 0 9
16471: PUSH
16472: LD_VAR 0 14
16476: ARRAY
16477: PUSH
16478: LD_INT 27
16480: EQUAL
16481: OR
16482: PUSH
16483: LD_VAR 0 9
16487: PUSH
16488: LD_VAR 0 14
16492: ARRAY
16493: PUSH
16494: LD_INT 26
16496: EQUAL
16497: OR
16498: PUSH
16499: LD_VAR 0 9
16503: PUSH
16504: LD_VAR 0 14
16508: ARRAY
16509: PUSH
16510: LD_INT 25
16512: EQUAL
16513: OR
16514: IFFALSE 16551
// begin arChassisTab = [ 14 ] ;
16516: LD_ADDR_VAR 0 18
16520: PUSH
16521: LD_INT 14
16523: PUSH
16524: EMPTY
16525: LIST
16526: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16527: LD_ADDR_OWVAR 37
16531: PUSH
16532: LD_VAR 0 18
16536: PUSH
16537: LD_INT 1
16539: PPUSH
16540: LD_VAR 0 18
16544: PPUSH
16545: CALL_OW 12
16549: ARRAY
16550: ST_TO_ADDR
// end ; end ;
16551: GO 16334
16553: POP
16554: POP
// veh = CreateVehicle ;
16555: LD_ADDR_VAR 0 16
16559: PUSH
16560: CALL_OW 45
16564: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16565: LD_VAR 0 16
16569: PPUSH
16570: LD_VAR 0 1
16574: PPUSH
16575: LD_INT 0
16577: PPUSH
16578: CALL_OW 49
// if vc_control = 1 then
16582: LD_OWVAR 38
16586: PUSH
16587: LD_INT 1
16589: EQUAL
16590: IFFALSE 16647
// begin hc_gallery =  ;
16592: LD_ADDR_OWVAR 33
16596: PUSH
16597: LD_STRING 
16599: ST_TO_ADDR
// hc_name =  ;
16600: LD_ADDR_OWVAR 26
16604: PUSH
16605: LD_STRING 
16607: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16608: LD_INT 0
16610: PPUSH
16611: LD_INT 3
16613: PPUSH
16614: LD_VAR 0 4
16618: PPUSH
16619: CALL_OW 380
// un = CreateHuman ;
16623: LD_ADDR_VAR 0 15
16627: PUSH
16628: CALL_OW 44
16632: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16633: LD_VAR 0 15
16637: PPUSH
16638: LD_VAR 0 16
16642: PPUSH
16643: CALL_OW 52
// end ; i = i + 1 ;
16647: LD_ADDR_VAR 0 13
16651: PUSH
16652: LD_VAR 0 13
16656: PUSH
16657: LD_INT 1
16659: PLUS
16660: ST_TO_ADDR
// end ; if nation = 3 then
16661: LD_VAR 0 5
16665: PUSH
16666: LD_INT 3
16668: EQUAL
16669: IFFALSE 17075
// begin uc_side = side ;
16671: LD_ADDR_OWVAR 20
16675: PUSH
16676: LD_VAR 0 2
16680: ST_TO_ADDR
// uc_nation = nation ;
16681: LD_ADDR_OWVAR 21
16685: PUSH
16686: LD_VAR 0 5
16690: ST_TO_ADDR
// vc_engine = vehengine ;
16691: LD_ADDR_OWVAR 39
16695: PUSH
16696: LD_VAR 0 6
16700: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16701: LD_ADDR_OWVAR 38
16705: PUSH
16706: LD_VAR 0 7
16710: PUSH
16711: LD_INT 1
16713: PPUSH
16714: LD_VAR 0 7
16718: PPUSH
16719: CALL_OW 12
16723: ARRAY
16724: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16725: LD_ADDR_OWVAR 40
16729: PUSH
16730: LD_VAR 0 8
16734: PUSH
16735: LD_INT 1
16737: PPUSH
16738: LD_VAR 0 8
16742: PPUSH
16743: CALL_OW 12
16747: ARRAY
16748: ST_TO_ADDR
// for j = 1 to RuWeapons do
16749: LD_ADDR_VAR 0 14
16753: PUSH
16754: DOUBLE
16755: LD_INT 1
16757: DEC
16758: ST_TO_ADDR
16759: LD_VAR 0 8
16763: PUSH
16764: FOR_TO
16765: IFFALSE 16967
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16767: LD_VAR 0 8
16771: PUSH
16772: LD_VAR 0 14
16776: ARRAY
16777: PUSH
16778: LD_INT 42
16780: EQUAL
16781: PUSH
16782: LD_VAR 0 8
16786: PUSH
16787: LD_VAR 0 14
16791: ARRAY
16792: PUSH
16793: LD_INT 43
16795: EQUAL
16796: OR
16797: PUSH
16798: LD_VAR 0 8
16802: PUSH
16803: LD_VAR 0 14
16807: ARRAY
16808: PUSH
16809: LD_INT 44
16811: EQUAL
16812: OR
16813: PUSH
16814: LD_VAR 0 8
16818: PUSH
16819: LD_VAR 0 14
16823: ARRAY
16824: PUSH
16825: LD_INT 45
16827: EQUAL
16828: OR
16829: PUSH
16830: LD_VAR 0 8
16834: PUSH
16835: LD_VAR 0 14
16839: ARRAY
16840: PUSH
16841: LD_INT 49
16843: EQUAL
16844: OR
16845: IFFALSE 16894
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16847: LD_ADDR_VAR 0 17
16851: PUSH
16852: LD_INT 21
16854: PUSH
16855: LD_INT 22
16857: PUSH
16858: LD_INT 23
16860: PUSH
16861: LD_INT 24
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16870: LD_ADDR_OWVAR 37
16874: PUSH
16875: LD_VAR 0 17
16879: PUSH
16880: LD_INT 1
16882: PPUSH
16883: LD_VAR 0 17
16887: PPUSH
16888: CALL_OW 12
16892: ARRAY
16893: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16894: LD_VAR 0 8
16898: PUSH
16899: LD_VAR 0 14
16903: ARRAY
16904: PUSH
16905: LD_INT 46
16907: EQUAL
16908: PUSH
16909: LD_VAR 0 8
16913: PUSH
16914: LD_VAR 0 14
16918: ARRAY
16919: PUSH
16920: LD_INT 47
16922: EQUAL
16923: OR
16924: IFFALSE 16965
// begin ruChassisTab = [ 23 , 24 ] ;
16926: LD_ADDR_VAR 0 17
16930: PUSH
16931: LD_INT 23
16933: PUSH
16934: LD_INT 24
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16941: LD_ADDR_OWVAR 37
16945: PUSH
16946: LD_VAR 0 17
16950: PUSH
16951: LD_INT 1
16953: PPUSH
16954: LD_VAR 0 17
16958: PPUSH
16959: CALL_OW 12
16963: ARRAY
16964: ST_TO_ADDR
// end ; end ;
16965: GO 16764
16967: POP
16968: POP
// veh = CreateVehicle ;
16969: LD_ADDR_VAR 0 16
16973: PUSH
16974: CALL_OW 45
16978: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16979: LD_VAR 0 16
16983: PPUSH
16984: LD_VAR 0 1
16988: PPUSH
16989: LD_INT 0
16991: PPUSH
16992: CALL_OW 49
// if vc_control = 1 then
16996: LD_OWVAR 38
17000: PUSH
17001: LD_INT 1
17003: EQUAL
17004: IFFALSE 17061
// begin hc_gallery =  ;
17006: LD_ADDR_OWVAR 33
17010: PUSH
17011: LD_STRING 
17013: ST_TO_ADDR
// hc_name =  ;
17014: LD_ADDR_OWVAR 26
17018: PUSH
17019: LD_STRING 
17021: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17022: LD_INT 0
17024: PPUSH
17025: LD_INT 3
17027: PPUSH
17028: LD_VAR 0 4
17032: PPUSH
17033: CALL_OW 380
// un = CreateHuman ;
17037: LD_ADDR_VAR 0 15
17041: PUSH
17042: CALL_OW 44
17046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17047: LD_VAR 0 15
17051: PPUSH
17052: LD_VAR 0 16
17056: PPUSH
17057: CALL_OW 52
// end ; i = i + 1 ;
17061: LD_ADDR_VAR 0 13
17065: PUSH
17066: LD_VAR 0 13
17070: PUSH
17071: LD_INT 1
17073: PLUS
17074: ST_TO_ADDR
// end ; until i = vehCount ;
17075: LD_VAR 0 13
17079: PUSH
17080: LD_VAR 0 3
17084: EQUAL
17085: IFFALSE 15711
// repeat wait ( 0 0$1 ) ;
17087: LD_INT 35
17089: PPUSH
17090: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17094: LD_ADDR_VAR 0 20
17098: PUSH
17099: LD_INT 22
17101: PUSH
17102: LD_VAR 0 2
17106: PUSH
17107: EMPTY
17108: LIST
17109: LIST
17110: PUSH
17111: LD_INT 21
17113: PUSH
17114: LD_INT 2
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 24
17123: PUSH
17124: LD_INT 650
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: PPUSH
17136: CALL_OW 69
17140: ST_TO_ADDR
// if vehicleOK_list > 0 then
17141: LD_VAR 0 20
17145: PUSH
17146: LD_INT 0
17148: GREATER
17149: IFFALSE 17340
// begin for i in vehicleOK_list do
17151: LD_ADDR_VAR 0 13
17155: PUSH
17156: LD_VAR 0 20
17160: PUSH
17161: FOR_IN
17162: IFFALSE 17338
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17164: LD_ADDR_VAR 0 21
17168: PUSH
17169: LD_INT 22
17171: PUSH
17172: LD_VAR 0 11
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PPUSH
17181: CALL_OW 69
17185: PPUSH
17186: LD_VAR 0 13
17190: PPUSH
17191: CALL_OW 74
17195: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17196: LD_ADDR_VAR 0 22
17200: PUSH
17201: LD_INT 22
17203: PUSH
17204: LD_VAR 0 11
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 59
17218: PUSH
17219: EMPTY
17220: LIST
17221: PUSH
17222: LD_INT 21
17224: PUSH
17225: LD_INT 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 21
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: EMPTY
17253: LIST
17254: PPUSH
17255: CALL_OW 69
17259: PPUSH
17260: LD_VAR 0 13
17264: PPUSH
17265: CALL_OW 74
17269: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17270: LD_VAR 0 13
17274: PPUSH
17275: LD_VAR 0 21
17279: PPUSH
17280: CALL_OW 296
17284: PUSH
17285: LD_INT 8
17287: PLUS
17288: PUSH
17289: LD_VAR 0 13
17293: PPUSH
17294: LD_VAR 0 22
17298: PPUSH
17299: CALL_OW 296
17303: LESS
17304: IFFALSE 17322
// begin ComAttackUnit ( i , target1 ) ;
17306: LD_VAR 0 13
17310: PPUSH
17311: LD_VAR 0 21
17315: PPUSH
17316: CALL_OW 115
// end else
17320: GO 17336
// begin ComAttackUnit ( i , target2 ) ;
17322: LD_VAR 0 13
17326: PPUSH
17327: LD_VAR 0 22
17331: PPUSH
17332: CALL_OW 115
// end ; end ;
17336: GO 17161
17338: POP
17339: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17340: LD_INT 22
17342: PUSH
17343: LD_VAR 0 2
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 21
17354: PUSH
17355: LD_INT 2
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PPUSH
17366: CALL_OW 69
17370: PUSH
17371: LD_INT 0
17373: EQUAL
17374: IFFALSE 17087
// end ;
17376: LD_VAR 0 12
17380: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17381: LD_INT 0
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
17387: PPUSH
17388: PPUSH
17389: PPUSH
17390: PPUSH
17391: PPUSH
17392: PPUSH
17393: PPUSH
// for i = 1 to soldierCount do
17394: LD_ADDR_VAR 0 13
17398: PUSH
17399: DOUBLE
17400: LD_INT 1
17402: DEC
17403: ST_TO_ADDR
17404: LD_VAR 0 3
17408: PUSH
17409: FOR_TO
17410: IFFALSE 17492
// begin uc_side = side ;
17412: LD_ADDR_OWVAR 20
17416: PUSH
17417: LD_VAR 0 1
17421: ST_TO_ADDR
// uc_nation = nation ;
17422: LD_ADDR_OWVAR 21
17426: PUSH
17427: LD_VAR 0 2
17431: ST_TO_ADDR
// hc_name =  ;
17432: LD_ADDR_OWVAR 26
17436: PUSH
17437: LD_STRING 
17439: ST_TO_ADDR
// hc_gallery =  ;
17440: LD_ADDR_OWVAR 33
17444: PUSH
17445: LD_STRING 
17447: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17448: LD_INT 0
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: LD_VAR 0 8
17458: PPUSH
17459: CALL_OW 380
// un = CreateHuman ;
17463: LD_ADDR_VAR 0 15
17467: PUSH
17468: CALL_OW 44
17472: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17473: LD_VAR 0 15
17477: PPUSH
17478: LD_VAR 0 9
17482: PPUSH
17483: LD_INT 0
17485: PPUSH
17486: CALL_OW 49
// end ;
17490: GO 17409
17492: POP
17493: POP
// for i = 1 to sniperCount do
17494: LD_ADDR_VAR 0 13
17498: PUSH
17499: DOUBLE
17500: LD_INT 1
17502: DEC
17503: ST_TO_ADDR
17504: LD_VAR 0 4
17508: PUSH
17509: FOR_TO
17510: IFFALSE 17592
// begin uc_side = side ;
17512: LD_ADDR_OWVAR 20
17516: PUSH
17517: LD_VAR 0 1
17521: ST_TO_ADDR
// uc_nation = nation ;
17522: LD_ADDR_OWVAR 21
17526: PUSH
17527: LD_VAR 0 2
17531: ST_TO_ADDR
// hc_name =  ;
17532: LD_ADDR_OWVAR 26
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// hc_gallery =  ;
17540: LD_ADDR_OWVAR 33
17544: PUSH
17545: LD_STRING 
17547: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17548: LD_INT 0
17550: PPUSH
17551: LD_INT 5
17553: PPUSH
17554: LD_VAR 0 8
17558: PPUSH
17559: CALL_OW 380
// un = CreateHuman ;
17563: LD_ADDR_VAR 0 15
17567: PUSH
17568: CALL_OW 44
17572: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17573: LD_VAR 0 15
17577: PPUSH
17578: LD_VAR 0 9
17582: PPUSH
17583: LD_INT 0
17585: PPUSH
17586: CALL_OW 49
// end ;
17590: GO 17509
17592: POP
17593: POP
// for i = 1 to bazookCount do
17594: LD_ADDR_VAR 0 13
17598: PUSH
17599: DOUBLE
17600: LD_INT 1
17602: DEC
17603: ST_TO_ADDR
17604: LD_VAR 0 5
17608: PUSH
17609: FOR_TO
17610: IFFALSE 17692
// begin uc_side = side ;
17612: LD_ADDR_OWVAR 20
17616: PUSH
17617: LD_VAR 0 1
17621: ST_TO_ADDR
// uc_nation = nation ;
17622: LD_ADDR_OWVAR 21
17626: PUSH
17627: LD_VAR 0 2
17631: ST_TO_ADDR
// hc_name =  ;
17632: LD_ADDR_OWVAR 26
17636: PUSH
17637: LD_STRING 
17639: ST_TO_ADDR
// hc_gallery =  ;
17640: LD_ADDR_OWVAR 33
17644: PUSH
17645: LD_STRING 
17647: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17648: LD_INT 0
17650: PPUSH
17651: LD_INT 9
17653: PPUSH
17654: LD_VAR 0 8
17658: PPUSH
17659: CALL_OW 380
// un = CreateHuman ;
17663: LD_ADDR_VAR 0 15
17667: PUSH
17668: CALL_OW 44
17672: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17673: LD_VAR 0 15
17677: PPUSH
17678: LD_VAR 0 9
17682: PPUSH
17683: LD_INT 0
17685: PPUSH
17686: CALL_OW 49
// end ;
17690: GO 17609
17692: POP
17693: POP
// for i = 1 to mortalCount do
17694: LD_ADDR_VAR 0 13
17698: PUSH
17699: DOUBLE
17700: LD_INT 1
17702: DEC
17703: ST_TO_ADDR
17704: LD_VAR 0 6
17708: PUSH
17709: FOR_TO
17710: IFFALSE 17792
// begin uc_side = side ;
17712: LD_ADDR_OWVAR 20
17716: PUSH
17717: LD_VAR 0 1
17721: ST_TO_ADDR
// uc_nation = nation ;
17722: LD_ADDR_OWVAR 21
17726: PUSH
17727: LD_VAR 0 2
17731: ST_TO_ADDR
// hc_name =  ;
17732: LD_ADDR_OWVAR 26
17736: PUSH
17737: LD_STRING 
17739: ST_TO_ADDR
// hc_gallery =  ;
17740: LD_ADDR_OWVAR 33
17744: PUSH
17745: LD_STRING 
17747: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17748: LD_INT 0
17750: PPUSH
17751: LD_INT 8
17753: PPUSH
17754: LD_VAR 0 8
17758: PPUSH
17759: CALL_OW 380
// un = CreateHuman ;
17763: LD_ADDR_VAR 0 15
17767: PUSH
17768: CALL_OW 44
17772: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17773: LD_VAR 0 15
17777: PPUSH
17778: LD_VAR 0 9
17782: PPUSH
17783: LD_INT 0
17785: PPUSH
17786: CALL_OW 49
// end ;
17790: GO 17709
17792: POP
17793: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17794: LD_ADDR_VAR 0 18
17798: PUSH
17799: LD_INT 22
17801: PUSH
17802: LD_VAR 0 1
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: PUSH
17811: LD_INT 2
17813: PUSH
17814: LD_INT 25
17816: PUSH
17817: LD_INT 1
17819: PUSH
17820: EMPTY
17821: LIST
17822: LIST
17823: PUSH
17824: LD_INT 25
17826: PUSH
17827: LD_INT 5
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PUSH
17834: LD_INT 25
17836: PUSH
17837: LD_INT 8
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: PUSH
17844: LD_INT 25
17846: PUSH
17847: LD_INT 9
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17870: LD_ADDR_VAR 0 17
17874: PUSH
17875: LD_INT 22
17877: PUSH
17878: LD_VAR 0 1
17882: PUSH
17883: EMPTY
17884: LIST
17885: LIST
17886: PUSH
17887: LD_INT 25
17889: PUSH
17890: LD_INT 4
17892: PUSH
17893: EMPTY
17894: LIST
17895: LIST
17896: PUSH
17897: EMPTY
17898: LIST
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: ST_TO_ADDR
// for i in medic_list do
17906: LD_ADDR_VAR 0 13
17910: PUSH
17911: LD_VAR 0 17
17915: PUSH
17916: FOR_IN
17917: IFFALSE 17935
// ComMoveToArea ( i , healArea ) ;
17919: LD_VAR 0 13
17923: PPUSH
17924: LD_VAR 0 10
17928: PPUSH
17929: CALL_OW 113
17933: GO 17916
17935: POP
17936: POP
// repeat wait ( 0 0$1 ) ;
17937: LD_INT 35
17939: PPUSH
17940: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17944: LD_ADDR_VAR 0 16
17948: PUSH
17949: LD_INT 22
17951: PUSH
17952: LD_VAR 0 1
17956: PUSH
17957: EMPTY
17958: LIST
17959: LIST
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: LD_INT 24
17969: PUSH
17970: LD_INT 550
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 24
17983: PUSH
17984: LD_INT 250
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18005: LD_ADDR_VAR 0 18
18009: PUSH
18010: LD_INT 22
18012: PUSH
18013: LD_VAR 0 1
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: PUSH
18022: LD_INT 2
18024: PUSH
18025: LD_INT 25
18027: PUSH
18028: LD_INT 1
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 25
18037: PUSH
18038: LD_INT 5
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 25
18047: PUSH
18048: LD_INT 8
18050: PUSH
18051: EMPTY
18052: LIST
18053: LIST
18054: PUSH
18055: LD_INT 25
18057: PUSH
18058: LD_INT 9
18060: PUSH
18061: EMPTY
18062: LIST
18063: LIST
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 24
18074: PUSH
18075: LD_INT 1000
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: LIST
18086: PPUSH
18087: CALL_OW 69
18091: ST_TO_ADDR
// if medicCount > 0 then
18092: LD_VAR 0 7
18096: PUSH
18097: LD_INT 0
18099: GREATER
18100: IFFALSE 18174
// begin if damageUnit_list > 0 then
18102: LD_VAR 0 16
18106: PUSH
18107: LD_INT 0
18109: GREATER
18110: IFFALSE 18174
// begin for i in damageUnit_list do
18112: LD_ADDR_VAR 0 13
18116: PUSH
18117: LD_VAR 0 16
18121: PUSH
18122: FOR_IN
18123: IFFALSE 18172
// begin ComMoveToArea ( i , healArea ) ;
18125: LD_VAR 0 13
18129: PPUSH
18130: LD_VAR 0 10
18134: PPUSH
18135: CALL_OW 113
// for j in medic_list do
18139: LD_ADDR_VAR 0 14
18143: PUSH
18144: LD_VAR 0 17
18148: PUSH
18149: FOR_IN
18150: IFFALSE 18168
// AddComHeal ( j , i ) ;
18152: LD_VAR 0 14
18156: PPUSH
18157: LD_VAR 0 13
18161: PPUSH
18162: CALL_OW 188
18166: GO 18149
18168: POP
18169: POP
// end ;
18170: GO 18122
18172: POP
18173: POP
// end ; end ; for i in soldiersOK_list do
18174: LD_ADDR_VAR 0 13
18178: PUSH
18179: LD_VAR 0 18
18183: PUSH
18184: FOR_IN
18185: IFFALSE 18361
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18187: LD_ADDR_VAR 0 21
18191: PUSH
18192: LD_INT 22
18194: PUSH
18195: LD_VAR 0 11
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PPUSH
18204: CALL_OW 69
18208: PPUSH
18209: LD_VAR 0 13
18213: PPUSH
18214: CALL_OW 74
18218: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18219: LD_ADDR_VAR 0 22
18223: PUSH
18224: LD_INT 22
18226: PUSH
18227: LD_VAR 0 11
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 2
18238: PUSH
18239: LD_INT 59
18241: PUSH
18242: EMPTY
18243: LIST
18244: PUSH
18245: LD_INT 21
18247: PUSH
18248: LD_INT 1
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: PUSH
18255: LD_INT 21
18257: PUSH
18258: LD_INT 2
18260: PUSH
18261: EMPTY
18262: LIST
18263: LIST
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: PUSH
18275: EMPTY
18276: LIST
18277: PPUSH
18278: CALL_OW 69
18282: PPUSH
18283: LD_VAR 0 13
18287: PPUSH
18288: CALL_OW 74
18292: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18293: LD_VAR 0 13
18297: PPUSH
18298: LD_VAR 0 21
18302: PPUSH
18303: CALL_OW 296
18307: PUSH
18308: LD_INT 8
18310: PLUS
18311: PUSH
18312: LD_VAR 0 13
18316: PPUSH
18317: LD_VAR 0 22
18321: PPUSH
18322: CALL_OW 296
18326: LESS
18327: IFFALSE 18345
// begin ComAttackUnit ( i , target1 ) ;
18329: LD_VAR 0 13
18333: PPUSH
18334: LD_VAR 0 21
18338: PPUSH
18339: CALL_OW 115
// end else
18343: GO 18359
// begin ComAttackUnit ( i , target2 ) ;
18345: LD_VAR 0 13
18349: PPUSH
18350: LD_VAR 0 22
18354: PPUSH
18355: CALL_OW 115
// end ; end ;
18359: GO 18184
18361: POP
18362: POP
// for i in soldiersOK_list do
18363: LD_ADDR_VAR 0 13
18367: PUSH
18368: LD_VAR 0 18
18372: PUSH
18373: FOR_IN
18374: IFFALSE 18550
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18376: LD_ADDR_VAR 0 21
18380: PUSH
18381: LD_INT 22
18383: PUSH
18384: LD_VAR 0 11
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 69
18397: PPUSH
18398: LD_VAR 0 13
18402: PPUSH
18403: CALL_OW 74
18407: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18408: LD_ADDR_VAR 0 22
18412: PUSH
18413: LD_INT 22
18415: PUSH
18416: LD_VAR 0 11
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: PUSH
18425: LD_INT 2
18427: PUSH
18428: LD_INT 59
18430: PUSH
18431: EMPTY
18432: LIST
18433: PUSH
18434: LD_INT 21
18436: PUSH
18437: LD_INT 1
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 21
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PPUSH
18472: LD_VAR 0 13
18476: PPUSH
18477: CALL_OW 74
18481: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18482: LD_VAR 0 13
18486: PPUSH
18487: LD_VAR 0 21
18491: PPUSH
18492: CALL_OW 296
18496: PUSH
18497: LD_INT 8
18499: PLUS
18500: PUSH
18501: LD_VAR 0 13
18505: PPUSH
18506: LD_VAR 0 22
18510: PPUSH
18511: CALL_OW 296
18515: LESS
18516: IFFALSE 18534
// begin ComAttackUnit ( i , target1 ) ;
18518: LD_VAR 0 13
18522: PPUSH
18523: LD_VAR 0 21
18527: PPUSH
18528: CALL_OW 115
// end else
18532: GO 18548
// begin ComAttackUnit ( i , target2 ) ;
18534: LD_VAR 0 13
18538: PPUSH
18539: LD_VAR 0 22
18543: PPUSH
18544: CALL_OW 115
// end ; end ;
18548: GO 18373
18550: POP
18551: POP
// until soldiersOK_list = [ ] ;
18552: LD_VAR 0 18
18556: PUSH
18557: EMPTY
18558: EQUAL
18559: IFFALSE 17937
// end ;
18561: LD_VAR 0 12
18565: RET
// export function TameApemans ; var i , j ; begin
18566: LD_INT 0
18568: PPUSH
18569: PPUSH
18570: PPUSH
// repeat wait ( 0 0$1 ) ;
18571: LD_INT 35
18573: PPUSH
18574: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18578: LD_ADDR_VAR 0 2
18582: PUSH
18583: LD_INT 22
18585: PUSH
18586: LD_INT 2
18588: PUSH
18589: EMPTY
18590: LIST
18591: LIST
18592: PUSH
18593: LD_INT 25
18595: PUSH
18596: LD_INT 4
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PPUSH
18607: CALL_OW 69
18611: PUSH
18612: FOR_IN
18613: IFFALSE 18690
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18615: LD_ADDR_VAR 0 3
18619: PUSH
18620: LD_INT 5
18622: PPUSH
18623: LD_INT 22
18625: PUSH
18626: LD_INT 0
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 25
18635: PUSH
18636: LD_INT 12
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 70
18651: PUSH
18652: FOR_IN
18653: IFFALSE 18686
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18655: LD_VAR 0 2
18659: PPUSH
18660: LD_VAR 0 3
18664: PPUSH
18665: CALL_OW 250
18669: PPUSH
18670: LD_VAR 0 3
18674: PPUSH
18675: CALL_OW 251
18679: PPUSH
18680: CALL_OW 191
// end ;
18684: GO 18652
18686: POP
18687: POP
// end ;
18688: GO 18612
18690: POP
18691: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18692: LD_INT 22
18694: PUSH
18695: LD_INT 2
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 25
18704: PUSH
18705: LD_INT 4
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 69
18720: PUSH
18721: LD_INT 0
18723: EQUAL
18724: PUSH
18725: LD_INT 5
18727: PPUSH
18728: LD_INT 22
18730: PUSH
18731: LD_INT 0
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 25
18740: PUSH
18741: LD_INT 12
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 70
18756: PUSH
18757: LD_INT 0
18759: EQUAL
18760: OR
18761: IFFALSE 18571
// wait ( 0 0$30 ) ;
18763: LD_INT 1050
18765: PPUSH
18766: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18770: LD_ADDR_VAR 0 2
18774: PUSH
18775: LD_INT 22
18777: PUSH
18778: LD_INT 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 25
18787: PUSH
18788: LD_INT 12
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PPUSH
18799: CALL_OW 69
18803: PUSH
18804: FOR_IN
18805: IFFALSE 18869
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18807: LD_VAR 0 2
18811: PPUSH
18812: LD_EXP 43
18816: PPUSH
18817: CALL_OW 250
18821: PPUSH
18822: LD_EXP 43
18826: PPUSH
18827: CALL_OW 251
18831: PPUSH
18832: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18836: LD_VAR 0 2
18840: PPUSH
18841: LD_INT 16
18843: PUSH
18844: LD_INT 15
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PUSH
18851: LD_INT 1
18853: PPUSH
18854: LD_INT 2
18856: PPUSH
18857: CALL_OW 12
18861: ARRAY
18862: PPUSH
18863: CALL_OW 336
// end ;
18867: GO 18804
18869: POP
18870: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18871: LD_ADDR_VAR 0 2
18875: PUSH
18876: LD_INT 22
18878: PUSH
18879: LD_INT 2
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 25
18888: PUSH
18889: LD_INT 4
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL_OW 69
18904: PUSH
18905: FOR_IN
18906: IFFALSE 18952
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18908: LD_VAR 0 2
18912: PPUSH
18913: LD_INT 22
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 30
18925: PUSH
18926: LD_INT 8
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 69
18941: PUSH
18942: LD_INT 1
18944: ARRAY
18945: PPUSH
18946: CALL_OW 120
18950: GO 18905
18952: POP
18953: POP
// end ;
18954: LD_VAR 0 1
18958: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18959: LD_INT 0
18961: PPUSH
18962: PPUSH
18963: PPUSH
18964: PPUSH
18965: PPUSH
18966: PPUSH
18967: PPUSH
18968: PPUSH
18969: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18970: LD_INT 22
18972: PUSH
18973: LD_VAR 0 1
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: PUSH
18982: LD_INT 21
18984: PUSH
18985: LD_INT 2
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PPUSH
18996: CALL_OW 69
19000: PUSH
19001: LD_VAR 0 3
19005: LESSEQUAL
19006: IFFALSE 19150
// for i = 1 to vehCount do
19008: LD_ADDR_VAR 0 10
19012: PUSH
19013: DOUBLE
19014: LD_INT 1
19016: DEC
19017: ST_TO_ADDR
19018: LD_VAR 0 3
19022: PUSH
19023: FOR_TO
19024: IFFALSE 19148
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19026: LD_ADDR_VAR 0 12
19030: PUSH
19031: LD_VAR 0 5
19035: PUSH
19036: LD_INT 1
19038: PPUSH
19039: LD_VAR 0 5
19043: PPUSH
19044: CALL_OW 12
19048: ARRAY
19049: ST_TO_ADDR
// if randWeapon = 46 then
19050: LD_VAR 0 12
19054: PUSH
19055: LD_INT 46
19057: EQUAL
19058: IFFALSE 19103
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_INT 24
19067: PPUSH
19068: LD_VAR 0 6
19072: PPUSH
19073: LD_VAR 0 7
19077: PUSH
19078: LD_INT 1
19080: PPUSH
19081: LD_VAR 0 7
19085: PPUSH
19086: CALL_OW 12
19090: ARRAY
19091: PPUSH
19092: LD_VAR 0 12
19096: PPUSH
19097: CALL_OW 185
19101: GO 19146
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19103: LD_VAR 0 2
19107: PPUSH
19108: LD_VAR 0 8
19112: PPUSH
19113: LD_VAR 0 6
19117: PPUSH
19118: LD_VAR 0 7
19122: PUSH
19123: LD_INT 1
19125: PPUSH
19126: LD_VAR 0 7
19130: PPUSH
19131: CALL_OW 12
19135: ARRAY
19136: PPUSH
19137: LD_VAR 0 12
19141: PPUSH
19142: CALL_OW 185
// end ;
19146: GO 19023
19148: POP
19149: POP
// repeat wait ( 0 0$1 ) ;
19150: LD_INT 35
19152: PPUSH
19153: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19157: LD_INT 22
19159: PUSH
19160: LD_VAR 0 1
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: PUSH
19169: LD_INT 21
19171: PUSH
19172: LD_INT 2
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PUSH
19179: LD_INT 24
19181: PUSH
19182: LD_INT 250
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: LIST
19193: PPUSH
19194: CALL_OW 69
19198: PUSH
19199: LD_VAR 0 3
19203: GREATEREQUAL
19204: IFFALSE 19150
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19206: LD_INT 22
19208: PUSH
19209: LD_VAR 0 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 21
19220: PUSH
19221: LD_INT 2
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: LD_INT 24
19230: PUSH
19231: LD_INT 250
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: LIST
19242: PPUSH
19243: CALL_OW 69
19247: PUSH
19248: LD_VAR 0 3
19252: GREATEREQUAL
19253: IFFALSE 19596
// begin repeat begin wait ( 0 0$1 ) ;
19255: LD_INT 35
19257: PPUSH
19258: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19262: LD_INT 22
19264: PUSH
19265: LD_VAR 0 1
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 21
19276: PUSH
19277: LD_INT 2
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: LD_INT 24
19286: PUSH
19287: LD_INT 651
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: LIST
19298: PPUSH
19299: CALL_OW 69
19303: PUSH
19304: LD_INT 0
19306: GREATER
19307: IFFALSE 19535
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19309: LD_ADDR_VAR 0 10
19313: PUSH
19314: LD_INT 22
19316: PUSH
19317: LD_VAR 0 1
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 21
19328: PUSH
19329: LD_INT 2
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 24
19338: PUSH
19339: LD_INT 651
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: LIST
19350: PPUSH
19351: CALL_OW 69
19355: PUSH
19356: FOR_IN
19357: IFFALSE 19533
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19359: LD_ADDR_VAR 0 16
19363: PUSH
19364: LD_INT 22
19366: PUSH
19367: LD_VAR 0 4
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PPUSH
19376: CALL_OW 69
19380: PPUSH
19381: LD_VAR 0 10
19385: PPUSH
19386: CALL_OW 74
19390: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19391: LD_ADDR_VAR 0 17
19395: PUSH
19396: LD_INT 22
19398: PUSH
19399: LD_VAR 0 4
19403: PUSH
19404: EMPTY
19405: LIST
19406: LIST
19407: PUSH
19408: LD_INT 2
19410: PUSH
19411: LD_INT 59
19413: PUSH
19414: EMPTY
19415: LIST
19416: PUSH
19417: LD_INT 21
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 21
19429: PUSH
19430: LD_INT 2
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: EMPTY
19448: LIST
19449: PPUSH
19450: CALL_OW 69
19454: PPUSH
19455: LD_VAR 0 10
19459: PPUSH
19460: CALL_OW 74
19464: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19465: LD_VAR 0 10
19469: PPUSH
19470: LD_VAR 0 16
19474: PPUSH
19475: CALL_OW 296
19479: PUSH
19480: LD_INT 8
19482: PLUS
19483: PUSH
19484: LD_VAR 0 10
19488: PPUSH
19489: LD_VAR 0 17
19493: PPUSH
19494: CALL_OW 296
19498: LESS
19499: IFFALSE 19517
// begin ComAttackUnit ( i , target1 ) ;
19501: LD_VAR 0 10
19505: PPUSH
19506: LD_VAR 0 16
19510: PPUSH
19511: CALL_OW 115
// end else
19515: GO 19531
// begin ComAttackUnit ( i , target2 ) ;
19517: LD_VAR 0 10
19521: PPUSH
19522: LD_VAR 0 17
19526: PPUSH
19527: CALL_OW 115
// end ; end ;
19531: GO 19356
19533: POP
19534: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19535: LD_INT 22
19537: PUSH
19538: LD_VAR 0 1
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PUSH
19547: LD_INT 21
19549: PUSH
19550: LD_INT 2
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PPUSH
19561: CALL_OW 69
19565: PUSH
19566: LD_INT 0
19568: EQUAL
19569: PUSH
19570: LD_INT 22
19572: PUSH
19573: LD_VAR 0 4
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: PPUSH
19585: CALL_OW 69
19589: PUSH
19590: LD_INT 0
19592: EQUAL
19593: OR
19594: IFFALSE 19255
// end ; end ;
19596: LD_VAR 0 9
19600: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19601: LD_INT 0
19603: PPUSH
19604: PPUSH
19605: PPUSH
19606: PPUSH
// r := 100 ;
19607: LD_ADDR_VAR 0 5
19611: PUSH
19612: LD_INT 100
19614: ST_TO_ADDR
// x := 0 ;
19615: LD_ADDR_VAR 0 6
19619: PUSH
19620: LD_INT 0
19622: ST_TO_ADDR
// while ( x < n ) do
19623: LD_VAR 0 6
19627: PUSH
19628: LD_VAR 0 2
19632: LESS
19633: IFFALSE 19920
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19635: LD_ADDR_VAR 0 4
19639: PUSH
19640: DOUBLE
19641: LD_INT 1
19643: DEC
19644: ST_TO_ADDR
19645: LD_VAR 0 1
19649: PPUSH
19650: LD_INT 0
19652: PPUSH
19653: CALL_OW 517
19657: PUSH
19658: LD_INT 1
19660: ARRAY
19661: PUSH
19662: FOR_TO
19663: IFFALSE 19916
// begin if r > 50 then
19665: LD_VAR 0 5
19669: PUSH
19670: LD_INT 50
19672: GREATER
19673: IFFALSE 19892
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19675: LD_VAR 0 1
19679: PPUSH
19680: LD_INT 0
19682: PPUSH
19683: CALL_OW 517
19687: PUSH
19688: LD_INT 1
19690: ARRAY
19691: PUSH
19692: LD_VAR 0 4
19696: ARRAY
19697: PPUSH
19698: LD_VAR 0 1
19702: PPUSH
19703: LD_INT 0
19705: PPUSH
19706: CALL_OW 517
19710: PUSH
19711: LD_INT 2
19713: ARRAY
19714: PUSH
19715: LD_VAR 0 4
19719: ARRAY
19720: PPUSH
19721: CALL_OW 458
19725: NOT
19726: IFFALSE 19876
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19728: LD_VAR 0 1
19732: PPUSH
19733: LD_INT 0
19735: PPUSH
19736: CALL_OW 517
19740: PUSH
19741: LD_INT 1
19743: ARRAY
19744: PUSH
19745: LD_VAR 0 4
19749: ARRAY
19750: PPUSH
19751: LD_VAR 0 1
19755: PPUSH
19756: LD_INT 0
19758: PPUSH
19759: CALL_OW 517
19763: PUSH
19764: LD_INT 2
19766: ARRAY
19767: PUSH
19768: LD_VAR 0 4
19772: ARRAY
19773: PPUSH
19774: LD_INT 5
19776: PPUSH
19777: LD_INT 0
19779: PPUSH
19780: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19784: LD_ADDR_EXP 50
19788: PUSH
19789: LD_EXP 50
19793: PPUSH
19794: LD_INT 1
19796: PPUSH
19797: LD_VAR 0 1
19801: PPUSH
19802: LD_INT 0
19804: PPUSH
19805: CALL_OW 517
19809: PUSH
19810: LD_INT 1
19812: ARRAY
19813: PUSH
19814: LD_VAR 0 4
19818: ARRAY
19819: PUSH
19820: LD_VAR 0 1
19824: PPUSH
19825: LD_INT 0
19827: PPUSH
19828: CALL_OW 517
19832: PUSH
19833: LD_INT 2
19835: ARRAY
19836: PUSH
19837: LD_VAR 0 4
19841: ARRAY
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PPUSH
19847: CALL_OW 2
19851: ST_TO_ADDR
// r := 0 ;
19852: LD_ADDR_VAR 0 5
19856: PUSH
19857: LD_INT 0
19859: ST_TO_ADDR
// x := x + 1 ;
19860: LD_ADDR_VAR 0 6
19864: PUSH
19865: LD_VAR 0 6
19869: PUSH
19870: LD_INT 1
19872: PLUS
19873: ST_TO_ADDR
// end else
19874: GO 19890
// r := r + 35 ;
19876: LD_ADDR_VAR 0 5
19880: PUSH
19881: LD_VAR 0 5
19885: PUSH
19886: LD_INT 35
19888: PLUS
19889: ST_TO_ADDR
// end else
19890: GO 19914
// r := r + rand ( 10 , 25 ) ;
19892: LD_ADDR_VAR 0 5
19896: PUSH
19897: LD_VAR 0 5
19901: PUSH
19902: LD_INT 10
19904: PPUSH
19905: LD_INT 25
19907: PPUSH
19908: CALL_OW 12
19912: PLUS
19913: ST_TO_ADDR
// end ;
19914: GO 19662
19916: POP
19917: POP
19918: GO 19623
// end ; end_of_file
19920: LD_VAR 0 3
19924: RET
// every 0 0$1 trigger russianAI = 1 do
19925: LD_EXP 39
19929: PUSH
19930: LD_INT 1
19932: EQUAL
19933: IFFALSE 20152
19935: GO 19937
19937: DISABLE
// begin enable ;
19938: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19939: LD_INT 3
19941: PPUSH
19942: LD_EXP 30
19946: PPUSH
19947: CALL 14563 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19951: LD_INT 3
19953: PPUSH
19954: LD_EXP 42
19958: PPUSH
19959: CALL 14923 0 2
// if ruPossition = 1 then
19963: LD_EXP 41
19967: PUSH
19968: LD_INT 1
19970: EQUAL
19971: IFFALSE 20026
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19973: LD_INT 3
19975: PPUSH
19976: LD_INT 13
19978: PPUSH
19979: LD_INT 10
19981: PPUSH
19982: LD_INT 22
19984: PUSH
19985: LD_INT 3
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 21
19994: PUSH
19995: LD_INT 3
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 30
20004: PUSH
20005: LD_INT 8
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: PPUSH
20017: CALL_OW 69
20021: PPUSH
20022: CALL 15129 0 4
// if ruPossition = 2 then
20026: LD_EXP 41
20030: PUSH
20031: LD_INT 2
20033: EQUAL
20034: IFFALSE 20089
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20036: LD_INT 3
20038: PPUSH
20039: LD_INT 14
20041: PPUSH
20042: LD_INT 11
20044: PPUSH
20045: LD_INT 22
20047: PUSH
20048: LD_INT 3
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 21
20057: PUSH
20058: LD_INT 3
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 30
20067: PUSH
20068: LD_INT 8
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: PPUSH
20080: CALL_OW 69
20084: PPUSH
20085: CALL 15129 0 4
// if ruPossition = 3 then
20089: LD_EXP 41
20093: PUSH
20094: LD_INT 3
20096: EQUAL
20097: IFFALSE 20152
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20099: LD_INT 3
20101: PPUSH
20102: LD_INT 15
20104: PPUSH
20105: LD_INT 12
20107: PPUSH
20108: LD_INT 22
20110: PUSH
20111: LD_INT 3
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: LD_INT 21
20120: PUSH
20121: LD_INT 3
20123: PUSH
20124: EMPTY
20125: LIST
20126: LIST
20127: PUSH
20128: LD_INT 30
20130: PUSH
20131: LD_INT 8
20133: PUSH
20134: EMPTY
20135: LIST
20136: LIST
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: LIST
20142: PPUSH
20143: CALL_OW 69
20147: PPUSH
20148: CALL 15129 0 4
// end ;
20152: END
// every 0 0$1 do
20153: GO 20155
20155: DISABLE
// begin enable ;
20156: ENABLE
// if ruPossition = 1 then
20157: LD_EXP 41
20161: PUSH
20162: LD_INT 1
20164: EQUAL
20165: IFFALSE 20177
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20167: LD_INT 3
20169: PPUSH
20170: LD_INT 10
20172: PPUSH
20173: CALL 14200 0 2
// if ruPossition = 2 then
20177: LD_EXP 41
20181: PUSH
20182: LD_INT 2
20184: EQUAL
20185: IFFALSE 20197
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20187: LD_INT 3
20189: PPUSH
20190: LD_INT 11
20192: PPUSH
20193: CALL 14200 0 2
// if ruPossition = 3 then
20197: LD_EXP 41
20201: PUSH
20202: LD_INT 3
20204: EQUAL
20205: IFFALSE 20217
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20207: LD_INT 3
20209: PPUSH
20210: LD_INT 12
20212: PPUSH
20213: CALL 14200 0 2
// IntBazooka ( 3 , 1 ) ;
20217: LD_INT 3
20219: PPUSH
20220: LD_INT 1
20222: PPUSH
20223: CALL 12999 0 2
// IntBazooka ( 6 , 1 ) ;
20227: LD_INT 6
20229: PPUSH
20230: LD_INT 1
20232: PPUSH
20233: CALL 12999 0 2
// end ;
20237: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20238: LD_EXP 39
20242: PUSH
20243: LD_INT 1
20245: EQUAL
20246: PUSH
20247: LD_EXP 35
20251: PPUSH
20252: CALL_OW 302
20256: AND
20257: PUSH
20258: LD_EXP 35
20262: PPUSH
20263: CALL_OW 255
20267: PUSH
20268: LD_INT 3
20270: EQUAL
20271: AND
20272: PUSH
20273: LD_INT 22
20275: PUSH
20276: LD_INT 3
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PUSH
20283: LD_INT 21
20285: PUSH
20286: LD_INT 2
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: PUSH
20293: LD_INT 33
20295: PUSH
20296: LD_INT 3
20298: PUSH
20299: EMPTY
20300: LIST
20301: LIST
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: PPUSH
20308: CALL_OW 69
20312: PUSH
20313: LD_INT 0
20315: EQUAL
20316: AND
20317: IFFALSE 20525
20319: GO 20321
20321: DISABLE
// begin enable ;
20322: ENABLE
// if Difficulty = 1 then
20323: LD_OWVAR 67
20327: PUSH
20328: LD_INT 1
20330: EQUAL
20331: IFFALSE 20393
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20333: LD_INT 3
20335: PPUSH
20336: LD_EXP 35
20340: PPUSH
20341: LD_INT 5
20343: PPUSH
20344: LD_INT 8
20346: PPUSH
20347: CALL_OW 12
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_INT 43
20357: PUSH
20358: LD_INT 44
20360: PUSH
20361: LD_INT 45
20363: PUSH
20364: LD_INT 46
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: PPUSH
20373: LD_INT 1
20375: PPUSH
20376: LD_INT 1
20378: PUSH
20379: LD_INT 3
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PPUSH
20386: LD_INT 22
20388: PPUSH
20389: CALL 18959 0 8
// if Difficulty = 2 then
20393: LD_OWVAR 67
20397: PUSH
20398: LD_INT 2
20400: EQUAL
20401: IFFALSE 20459
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20403: LD_INT 3
20405: PPUSH
20406: LD_EXP 35
20410: PPUSH
20411: LD_INT 6
20413: PPUSH
20414: LD_INT 8
20416: PPUSH
20417: CALL_OW 12
20421: PPUSH
20422: LD_INT 1
20424: PPUSH
20425: LD_INT 44
20427: PUSH
20428: LD_INT 45
20430: PUSH
20431: LD_INT 46
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: LIST
20438: PPUSH
20439: LD_INT 1
20441: PPUSH
20442: LD_INT 1
20444: PUSH
20445: LD_INT 3
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: PPUSH
20452: LD_INT 22
20454: PPUSH
20455: CALL 18959 0 8
// if Difficulty = 3 then
20459: LD_OWVAR 67
20463: PUSH
20464: LD_INT 3
20466: EQUAL
20467: IFFALSE 20525
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20469: LD_INT 3
20471: PPUSH
20472: LD_EXP 35
20476: PPUSH
20477: LD_INT 7
20479: PPUSH
20480: LD_INT 8
20482: PPUSH
20483: CALL_OW 12
20487: PPUSH
20488: LD_INT 1
20490: PPUSH
20491: LD_INT 44
20493: PUSH
20494: LD_INT 45
20496: PUSH
20497: LD_INT 46
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: LIST
20504: PPUSH
20505: LD_INT 1
20507: PPUSH
20508: LD_INT 1
20510: PUSH
20511: LD_INT 3
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: PPUSH
20518: LD_INT 22
20520: PPUSH
20521: CALL 18959 0 8
// end ;
20525: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20526: LD_EXP 50
20530: PUSH
20531: LD_EXP 49
20535: AND
20536: IFFALSE 20657
20538: GO 20540
20540: DISABLE
20541: LD_INT 0
20543: PPUSH
// begin enable ;
20544: ENABLE
// for i in arabianMines do
20545: LD_ADDR_VAR 0 1
20549: PUSH
20550: LD_EXP 50
20554: PUSH
20555: FOR_IN
20556: IFFALSE 20655
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20558: LD_INT 22
20560: PUSH
20561: LD_INT 1
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 92
20570: PUSH
20571: LD_VAR 0 1
20575: PUSH
20576: LD_INT 1
20578: ARRAY
20579: PUSH
20580: LD_VAR 0 1
20584: PUSH
20585: LD_INT 2
20587: ARRAY
20588: PUSH
20589: LD_INT 3
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: LIST
20596: LIST
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: PPUSH
20602: CALL_OW 69
20606: IFFALSE 20653
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20608: LD_VAR 0 1
20612: PUSH
20613: LD_INT 1
20615: ARRAY
20616: PPUSH
20617: LD_VAR 0 1
20621: PUSH
20622: LD_INT 2
20624: ARRAY
20625: PPUSH
20626: LD_INT 5
20628: PPUSH
20629: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20633: LD_ADDR_EXP 50
20637: PUSH
20638: LD_EXP 50
20642: PPUSH
20643: LD_VAR 0 1
20647: PPUSH
20648: CALL_OW 3
20652: ST_TO_ADDR
// end ; end ;
20653: GO 20555
20655: POP
20656: POP
// end ; end_of_file
20657: PPOPN 1
20659: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL_OW 255
20669: PUSH
20670: LD_INT 4
20672: EQUAL
20673: IFFALSE 20687
// SetBName ( building , epsilon ) ;
20675: LD_VAR 0 1
20679: PPUSH
20680: LD_STRING epsilon
20682: PPUSH
20683: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20687: LD_VAR 0 1
20691: PPUSH
20692: CALL_OW 255
20696: PUSH
20697: LD_INT 1
20699: EQUAL
20700: PUSH
20701: LD_VAR 0 1
20705: PPUSH
20706: CALL_OW 266
20710: PUSH
20711: LD_INT 0
20713: EQUAL
20714: AND
20715: IFFALSE 20729
// SetBName ( building , epsilon ) ;
20717: LD_VAR 0 1
20721: PPUSH
20722: LD_STRING epsilon
20724: PPUSH
20725: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20729: LD_VAR 0 1
20733: PPUSH
20734: CALL_OW 255
20738: PUSH
20739: LD_INT 3
20741: EQUAL
20742: PUSH
20743: LD_VAR 0 1
20747: PPUSH
20748: CALL_OW 266
20752: PUSH
20753: LD_INT 0
20755: EQUAL
20756: AND
20757: IFFALSE 20771
// SetBName ( building , chuikov ) ;
20759: LD_VAR 0 1
20763: PPUSH
20764: LD_STRING chuikov
20766: PPUSH
20767: CALL_OW 500
// if GetSide ( building ) = 2 then
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 255
20780: PUSH
20781: LD_INT 2
20783: EQUAL
20784: IFFALSE 20840
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 266
20795: PUSH
20796: LD_INT 6
20798: EQUAL
20799: PUSH
20800: LD_VAR 0 1
20804: PPUSH
20805: CALL_OW 266
20809: PUSH
20810: LD_INT 9
20812: EQUAL
20813: OR
20814: IFFALSE 20840
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20816: LD_VAR 0 1
20820: PPUSH
20821: LD_INT 10
20823: PPUSH
20824: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20828: LD_VAR 0 1
20832: PPUSH
20833: LD_INT 11
20835: PPUSH
20836: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 255
20849: PUSH
20850: LD_INT 3
20852: EQUAL
20853: IFFALSE 20879
// begin if GetBType ( building ) = 2 then
20855: LD_VAR 0 1
20859: PPUSH
20860: CALL_OW 266
20864: PUSH
20865: LD_INT 2
20867: EQUAL
20868: IFFALSE 20879
// AddComUpgrade ( building ) ;
20870: LD_VAR 0 1
20874: PPUSH
20875: CALL_OW 206
// end ; end ;
20879: PPOPN 2
20881: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20882: LD_INT 0
20884: PPUSH
20885: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20886: LD_VAR 0 1
20890: PUSH
20891: LD_INT 22
20893: PUSH
20894: LD_INT 3
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 23
20903: PUSH
20904: LD_INT 3
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 21
20913: PUSH
20914: LD_INT 2
20916: PUSH
20917: EMPTY
20918: LIST
20919: LIST
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: LIST
20925: PPUSH
20926: CALL_OW 69
20930: IN
20931: PUSH
20932: LD_EXP 58
20936: NOT
20937: AND
20938: IFFALSE 20969
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20940: LD_ADDR_EXP 58
20944: PUSH
20945: LD_VAR 0 1
20949: PPUSH
20950: CALL_OW 250
20954: PUSH
20955: LD_VAR 0 1
20959: PPUSH
20960: CALL_OW 251
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: ST_TO_ADDR
// end ;
20969: PPOPN 3
20971: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20972: LD_VAR 0 2
20976: PPUSH
20977: CALL_OW 255
20981: PUSH
20982: LD_INT 3
20984: EQUAL
20985: PUSH
20986: LD_EXP 35
20990: PPUSH
20991: CALL_OW 255
20995: PUSH
20996: LD_INT 3
20998: EQUAL
20999: AND
21000: PUSH
21001: LD_EXP 35
21005: PPUSH
21006: CALL_OW 302
21010: AND
21011: IFFALSE 21027
// ComEnterUnit ( human , ruFab ) ;
21013: LD_VAR 0 2
21017: PPUSH
21018: LD_EXP 35
21022: PPUSH
21023: CALL_OW 120
// end ;
21027: PPOPN 2
21029: END
// on BuildingComplete ( building ) do var i ;
21030: LD_INT 0
21032: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 255
21042: PUSH
21043: LD_INT 1
21045: EQUAL
21046: PUSH
21047: LD_EXP 61
21051: PUSH
21052: LD_INT 0
21054: EQUAL
21055: AND
21056: IFFALSE 21258
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21058: LD_VAR 0 1
21062: PPUSH
21063: CALL_OW 266
21067: PUSH
21068: LD_INT 26
21070: EQUAL
21071: PUSH
21072: LD_VAR 0 1
21076: PPUSH
21077: CALL_OW 266
21081: PUSH
21082: LD_INT 27
21084: EQUAL
21085: OR
21086: PUSH
21087: LD_VAR 0 1
21091: PPUSH
21092: CALL_OW 266
21096: PUSH
21097: LD_INT 28
21099: EQUAL
21100: OR
21101: IFFALSE 21258
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21103: LD_INT 22
21105: PUSH
21106: LD_INT 1
21108: PUSH
21109: EMPTY
21110: LIST
21111: LIST
21112: PUSH
21113: LD_INT 2
21115: PUSH
21116: LD_INT 30
21118: PUSH
21119: LD_INT 7
21121: PUSH
21122: EMPTY
21123: LIST
21124: LIST
21125: PUSH
21126: LD_INT 30
21128: PUSH
21129: LD_INT 8
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PPUSH
21145: CALL_OW 69
21149: PUSH
21150: LD_INT 0
21152: GREATER
21153: IFFALSE 21258
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21155: LD_ADDR_VAR 0 2
21159: PUSH
21160: LD_INT 22
21162: PUSH
21163: LD_INT 1
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 2
21172: PUSH
21173: LD_INT 30
21175: PUSH
21176: LD_INT 7
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 30
21185: PUSH
21186: LD_INT 8
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: LIST
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PPUSH
21202: CALL_OW 69
21206: PUSH
21207: FOR_IN
21208: IFFALSE 21256
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21210: LD_VAR 0 2
21214: PPUSH
21215: LD_INT 1
21217: PPUSH
21218: CALL_OW 268
21222: PUSH
21223: LD_INT 11
21225: EQUAL
21226: PUSH
21227: LD_VAR 0 2
21231: PPUSH
21232: LD_INT 2
21234: PPUSH
21235: CALL_OW 268
21239: PUSH
21240: LD_INT 11
21242: EQUAL
21243: OR
21244: IFFALSE 21254
// eventVar1 = 1 ;
21246: LD_ADDR_EXP 61
21250: PUSH
21251: LD_INT 1
21253: ST_TO_ADDR
21254: GO 21207
21256: POP
21257: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21258: LD_VAR 0 1
21262: PPUSH
21263: CALL_OW 255
21267: PUSH
21268: LD_INT 3
21270: EQUAL
21271: IFFALSE 21751
// begin if GetBType ( building ) = b_depot then
21273: LD_VAR 0 1
21277: PPUSH
21278: CALL_OW 266
21282: PUSH
21283: LD_INT 0
21285: EQUAL
21286: IFFALSE 21358
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21288: LD_VAR 0 1
21292: PPUSH
21293: CALL_OW 274
21297: PPUSH
21298: LD_INT 1
21300: PPUSH
21301: LD_INT 5000
21303: PPUSH
21304: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21308: LD_VAR 0 1
21312: PPUSH
21313: CALL_OW 274
21317: PPUSH
21318: LD_INT 2
21320: PPUSH
21321: LD_INT 5000
21323: PPUSH
21324: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21328: LD_VAR 0 1
21332: PPUSH
21333: CALL_OW 274
21337: PPUSH
21338: LD_INT 3
21340: PPUSH
21341: LD_INT 5000
21343: PPUSH
21344: CALL_OW 277
// ruDepot = building ;
21348: LD_ADDR_EXP 30
21352: PUSH
21353: LD_VAR 0 1
21357: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21358: LD_VAR 0 1
21362: PPUSH
21363: CALL_OW 266
21367: PUSH
21368: LD_INT 0
21370: EQUAL
21371: PUSH
21372: LD_VAR 0 1
21376: PPUSH
21377: CALL_OW 266
21381: PUSH
21382: LD_INT 2
21384: EQUAL
21385: OR
21386: PUSH
21387: LD_VAR 0 1
21391: PPUSH
21392: CALL_OW 266
21396: PUSH
21397: LD_INT 4
21399: EQUAL
21400: OR
21401: IFFALSE 21412
// ComUpgrade ( building ) ;
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL_OW 146
// if GetBType ( building ) = b_lab then
21412: LD_VAR 0 1
21416: PPUSH
21417: CALL_OW 266
21421: PUSH
21422: LD_INT 6
21424: EQUAL
21425: IFFALSE 21628
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21427: LD_INT 22
21429: PUSH
21430: LD_INT 3
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 30
21439: PUSH
21440: LD_INT 8
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PPUSH
21451: CALL_OW 69
21455: PUSH
21456: LD_INT 0
21458: EQUAL
21459: IFFALSE 21497
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21461: LD_VAR 0 1
21465: PPUSH
21466: LD_INT 10
21468: PPUSH
21469: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: LD_INT 12
21480: PPUSH
21481: CALL_OW 207
// ruLab1 = building ;
21485: LD_ADDR_EXP 31
21489: PUSH
21490: LD_VAR 0 1
21494: ST_TO_ADDR
// end else
21495: GO 21531
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21497: LD_VAR 0 1
21501: PPUSH
21502: LD_INT 11
21504: PPUSH
21505: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21509: LD_VAR 0 1
21513: PPUSH
21514: LD_INT 14
21516: PPUSH
21517: CALL_OW 207
// ruLab2 = building ;
21521: LD_ADDR_EXP 32
21525: PUSH
21526: LD_VAR 0 1
21530: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21531: LD_INT 3
21533: PPUSH
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_INT 3
21541: PPUSH
21542: CALL 14115 0 3
// if ruDestroyedBuildings > 0 then
21546: LD_EXP 42
21550: PUSH
21551: LD_INT 0
21553: GREATER
21554: IFFALSE 21628
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21556: LD_ADDR_EXP 42
21560: PUSH
21561: LD_EXP 42
21565: PPUSH
21566: LD_INT 1
21568: PPUSH
21569: CALL_OW 3
21573: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21574: LD_ADDR_EXP 42
21578: PUSH
21579: LD_EXP 42
21583: PPUSH
21584: LD_INT 1
21586: PPUSH
21587: CALL_OW 3
21591: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21592: LD_ADDR_EXP 42
21596: PUSH
21597: LD_EXP 42
21601: PPUSH
21602: LD_INT 1
21604: PPUSH
21605: CALL_OW 3
21609: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21610: LD_ADDR_EXP 42
21614: PUSH
21615: LD_EXP 42
21619: PPUSH
21620: LD_INT 1
21622: PPUSH
21623: CALL_OW 3
21627: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21628: LD_VAR 0 1
21632: PPUSH
21633: CALL_OW 266
21637: PUSH
21638: LD_INT 32
21640: EQUAL
21641: IFFALSE 21678
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21643: LD_VAR 0 1
21647: PPUSH
21648: LD_INT 44
21650: PUSH
21651: LD_INT 45
21653: PUSH
21654: LD_INT 46
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 1
21664: PPUSH
21665: LD_INT 3
21667: PPUSH
21668: CALL_OW 12
21672: ARRAY
21673: PPUSH
21674: CALL_OW 208
// if GetBType ( building ) = b_turret then
21678: LD_VAR 0 1
21682: PPUSH
21683: CALL_OW 266
21687: PUSH
21688: LD_INT 33
21690: EQUAL
21691: IFFALSE 21728
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21693: LD_VAR 0 1
21697: PPUSH
21698: LD_INT 44
21700: PUSH
21701: LD_INT 45
21703: PUSH
21704: LD_INT 46
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 1
21714: PPUSH
21715: LD_INT 3
21717: PPUSH
21718: CALL_OW 12
21722: ARRAY
21723: PPUSH
21724: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21728: LD_VAR 0 1
21732: PPUSH
21733: CALL_OW 266
21737: PUSH
21738: LD_INT 24
21740: EQUAL
21741: IFFALSE 21751
// russianAI = 1 ;
21743: LD_ADDR_EXP 39
21747: PUSH
21748: LD_INT 1
21750: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 255
21760: PUSH
21761: LD_INT 2
21763: EQUAL
21764: IFFALSE 22490
// begin if GetBType ( building ) = b_depot then
21766: LD_VAR 0 1
21770: PPUSH
21771: CALL_OW 266
21775: PUSH
21776: LD_INT 0
21778: EQUAL
21779: IFFALSE 21865
// begin arDepot = building ;
21781: LD_ADDR_EXP 43
21785: PUSH
21786: LD_VAR 0 1
21790: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21791: LD_INT 38
21793: PUSH
21794: LD_INT 47
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: PPUSH
21801: LD_INT 71
21803: PPUSH
21804: LD_INT 19
21806: PPUSH
21807: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21811: LD_VAR 0 1
21815: PPUSH
21816: CALL_OW 274
21820: PPUSH
21821: LD_INT 1
21823: PPUSH
21824: LD_INT 500
21826: PPUSH
21827: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21831: LD_VAR 0 1
21835: PPUSH
21836: CALL_OW 274
21840: PPUSH
21841: LD_INT 3
21843: PPUSH
21844: LD_INT 30
21846: PPUSH
21847: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21851: LD_EXP 26
21855: PPUSH
21856: LD_EXP 43
21860: PPUSH
21861: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21865: LD_VAR 0 1
21869: PPUSH
21870: CALL_OW 266
21874: PUSH
21875: LD_INT 6
21877: EQUAL
21878: PUSH
21879: LD_VAR 0 1
21883: PPUSH
21884: CALL_OW 266
21888: PUSH
21889: LD_INT 9
21891: EQUAL
21892: OR
21893: IFFALSE 21944
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21895: LD_VAR 0 1
21899: PPUSH
21900: LD_INT 10
21902: PPUSH
21903: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21907: LD_VAR 0 1
21911: PPUSH
21912: LD_INT 11
21914: PPUSH
21915: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21919: LD_INT 2
21921: PPUSH
21922: LD_VAR 0 1
21926: PPUSH
21927: LD_INT 2
21929: PPUSH
21930: CALL 14115 0 3
// arLab = building ;
21934: LD_ADDR_EXP 44
21938: PUSH
21939: LD_VAR 0 1
21943: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21944: LD_VAR 0 1
21948: PPUSH
21949: CALL_OW 266
21953: PUSH
21954: LD_INT 2
21956: EQUAL
21957: PUSH
21958: LD_VAR 0 1
21962: PPUSH
21963: CALL_OW 266
21967: PUSH
21968: LD_INT 4
21970: EQUAL
21971: OR
21972: IFFALSE 21983
// ComUpgrade ( building ) ;
21974: LD_VAR 0 1
21978: PPUSH
21979: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
21983: LD_VAR 0 1
21987: PPUSH
21988: CALL_OW 266
21992: PUSH
21993: LD_INT 27
21995: EQUAL
21996: IFFALSE 22490
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21998: LD_INT 22
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 27
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: PPUSH
22022: CALL_OW 69
22026: PUSH
22027: LD_INT 2
22029: EQUAL
22030: IFFALSE 22490
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22032: LD_ADDR_VAR 0 2
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_INT 2
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PUSH
22047: LD_INT 21
22049: PUSH
22050: LD_INT 1
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 25
22059: PUSH
22060: LD_INT 2
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: PPUSH
22072: CALL_OW 69
22076: PUSH
22077: LD_INT 1
22079: ARRAY
22080: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22081: LD_VAR 0 2
22085: PPUSH
22086: LD_INT 92
22088: PPUSH
22089: LD_INT 34
22091: PPUSH
22092: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22096: LD_VAR 0 2
22100: PPUSH
22101: LD_INT 82
22103: PPUSH
22104: LD_INT 57
22106: PPUSH
22107: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22111: LD_VAR 0 2
22115: PPUSH
22116: LD_INT 36
22118: PPUSH
22119: LD_INT 28
22121: PPUSH
22122: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22126: LD_INT 22
22128: PUSH
22129: LD_INT 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 21
22138: PUSH
22139: LD_INT 1
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: LD_INT 25
22148: PUSH
22149: LD_INT 2
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: LIST
22160: PPUSH
22161: CALL_OW 69
22165: PPUSH
22166: LD_EXP 43
22170: PPUSH
22171: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22175: LD_INT 22
22177: PUSH
22178: LD_INT 2
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 25
22187: PUSH
22188: LD_INT 1
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 3
22197: PUSH
22198: LD_INT 54
22200: PUSH
22201: EMPTY
22202: LIST
22203: PUSH
22204: LD_INT 3
22206: PUSH
22207: LD_INT 60
22209: PUSH
22210: EMPTY
22211: LIST
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: LIST
22221: PUSH
22222: EMPTY
22223: LIST
22224: LIST
22225: LIST
22226: PPUSH
22227: CALL_OW 69
22231: PUSH
22232: LD_INT 1
22234: ARRAY
22235: PPUSH
22236: LD_INT 22
22238: PUSH
22239: LD_INT 2
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 30
22248: PUSH
22249: LD_INT 31
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 58
22258: PUSH
22259: EMPTY
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: PPUSH
22276: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22280: LD_INT 22
22282: PUSH
22283: LD_INT 2
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 25
22292: PUSH
22293: LD_INT 1
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 3
22302: PUSH
22303: LD_INT 54
22305: PUSH
22306: EMPTY
22307: LIST
22308: PUSH
22309: LD_INT 3
22311: PUSH
22312: LD_INT 60
22314: PUSH
22315: EMPTY
22316: LIST
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: LIST
22331: PPUSH
22332: CALL_OW 69
22336: PUSH
22337: LD_INT 2
22339: ARRAY
22340: PPUSH
22341: LD_INT 22
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 30
22353: PUSH
22354: LD_INT 31
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 58
22363: PUSH
22364: EMPTY
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PPUSH
22372: CALL_OW 69
22376: PUSH
22377: LD_INT 2
22379: ARRAY
22380: PPUSH
22381: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22385: LD_INT 22
22387: PUSH
22388: LD_INT 2
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: PUSH
22395: LD_INT 25
22397: PUSH
22398: LD_INT 1
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: PUSH
22405: LD_INT 3
22407: PUSH
22408: LD_INT 54
22410: PUSH
22411: EMPTY
22412: LIST
22413: PUSH
22414: LD_INT 3
22416: PUSH
22417: LD_INT 60
22419: PUSH
22420: EMPTY
22421: LIST
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: LIST
22431: PUSH
22432: EMPTY
22433: LIST
22434: LIST
22435: LIST
22436: PPUSH
22437: CALL_OW 69
22441: PUSH
22442: LD_INT 3
22444: ARRAY
22445: PPUSH
22446: LD_INT 22
22448: PUSH
22449: LD_INT 2
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: PUSH
22456: LD_INT 30
22458: PUSH
22459: LD_INT 31
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 58
22468: PUSH
22469: EMPTY
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: PUSH
22482: LD_INT 3
22484: ARRAY
22485: PPUSH
22486: CALL_OW 120
// end ; end ; end ;
22490: PPOPN 2
22492: END
// on UpgradeComplete ( building ) do var i ;
22493: LD_INT 0
22495: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22496: LD_VAR 0 1
22500: PPUSH
22501: CALL_OW 255
22505: PUSH
22506: LD_INT 1
22508: EQUAL
22509: PUSH
22510: LD_EXP 61
22514: PUSH
22515: LD_INT 0
22517: EQUAL
22518: AND
22519: IFFALSE 22717
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22521: LD_VAR 0 1
22525: PPUSH
22526: CALL_OW 266
22530: PUSH
22531: LD_INT 7
22533: EQUAL
22534: PUSH
22535: LD_VAR 0 1
22539: PPUSH
22540: CALL_OW 266
22544: PUSH
22545: LD_INT 8
22547: EQUAL
22548: OR
22549: IFFALSE 22717
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22551: LD_INT 22
22553: PUSH
22554: LD_INT 1
22556: PUSH
22557: EMPTY
22558: LIST
22559: LIST
22560: PUSH
22561: LD_INT 2
22563: PUSH
22564: LD_INT 30
22566: PUSH
22567: LD_INT 26
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 30
22576: PUSH
22577: LD_INT 27
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 30
22586: PUSH
22587: LD_INT 28
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: PUSH
22600: EMPTY
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 69
22608: PUSH
22609: LD_INT 0
22611: GREATER
22612: IFFALSE 22717
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22614: LD_ADDR_VAR 0 2
22618: PUSH
22619: LD_INT 22
22621: PUSH
22622: LD_INT 1
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: LD_INT 30
22634: PUSH
22635: LD_INT 7
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 30
22644: PUSH
22645: LD_INT 8
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: EMPTY
22658: LIST
22659: LIST
22660: PPUSH
22661: CALL_OW 69
22665: PUSH
22666: FOR_IN
22667: IFFALSE 22715
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22669: LD_VAR 0 2
22673: PPUSH
22674: LD_INT 1
22676: PPUSH
22677: CALL_OW 268
22681: PUSH
22682: LD_INT 11
22684: EQUAL
22685: PUSH
22686: LD_VAR 0 2
22690: PPUSH
22691: LD_INT 2
22693: PPUSH
22694: CALL_OW 268
22698: PUSH
22699: LD_INT 11
22701: EQUAL
22702: OR
22703: IFFALSE 22713
// eventVar1 = 1 ;
22705: LD_ADDR_EXP 61
22709: PUSH
22710: LD_INT 1
22712: ST_TO_ADDR
22713: GO 22666
22715: POP
22716: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22717: LD_VAR 0 1
22721: PPUSH
22722: CALL_OW 255
22726: PUSH
22727: LD_INT 2
22729: EQUAL
22730: IFFALSE 22835
// begin if GetBType ( building ) = b_barracks then
22732: LD_VAR 0 1
22736: PPUSH
22737: CALL_OW 266
22741: PUSH
22742: LD_INT 5
22744: EQUAL
22745: IFFALSE 22835
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22747: LD_ADDR_VAR 0 2
22751: PUSH
22752: LD_INT 22
22754: PUSH
22755: LD_INT 2
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 25
22764: PUSH
22765: LD_INT 1
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 3
22774: PUSH
22775: LD_INT 54
22777: PUSH
22778: EMPTY
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: PPUSH
22790: CALL_OW 69
22794: PUSH
22795: LD_EXP 26
22799: PUSH
22800: EMPTY
22801: LIST
22802: DIFF
22803: PUSH
22804: FOR_IN
22805: IFFALSE 22823
// ComEnterUnit ( i , building ) ;
22807: LD_VAR 0 2
22811: PPUSH
22812: LD_VAR 0 1
22816: PPUSH
22817: CALL_OW 120
22821: GO 22804
22823: POP
22824: POP
// arArm = building ;
22825: LD_ADDR_EXP 45
22829: PUSH
22830: LD_VAR 0 1
22834: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22835: LD_VAR 0 1
22839: PPUSH
22840: CALL_OW 255
22844: PUSH
22845: LD_INT 3
22847: EQUAL
22848: IFFALSE 23321
// begin if GetBType ( building ) = b_factory then
22850: LD_VAR 0 1
22854: PPUSH
22855: CALL_OW 266
22859: PUSH
22860: LD_INT 3
22862: EQUAL
22863: IFFALSE 22930
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22865: LD_ADDR_VAR 0 2
22869: PUSH
22870: LD_INT 22
22872: PUSH
22873: LD_INT 3
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 25
22882: PUSH
22883: LD_INT 3
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: PPUSH
22894: CALL_OW 69
22898: PUSH
22899: FOR_IN
22900: IFFALSE 22918
// ComEnterUnit ( i , building ) ;
22902: LD_VAR 0 2
22906: PPUSH
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 120
22916: GO 22899
22918: POP
22919: POP
// ruFab = building ;
22920: LD_ADDR_EXP 35
22924: PUSH
22925: LD_VAR 0 1
22929: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22930: LD_INT 22
22932: PUSH
22933: LD_INT 3
22935: PUSH
22936: EMPTY
22937: LIST
22938: LIST
22939: PUSH
22940: LD_INT 21
22942: PUSH
22943: LD_INT 3
22945: PUSH
22946: EMPTY
22947: LIST
22948: LIST
22949: PUSH
22950: LD_INT 30
22952: PUSH
22953: LD_INT 8
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: PPUSH
22965: CALL_OW 69
22969: PUSH
22970: LD_INT 2
22972: EQUAL
22973: IFFALSE 23181
// begin for i = 1 to 2 do
22975: LD_ADDR_VAR 0 2
22979: PUSH
22980: DOUBLE
22981: LD_INT 1
22983: DEC
22984: ST_TO_ADDR
22985: LD_INT 2
22987: PUSH
22988: FOR_TO
22989: IFFALSE 23076
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22991: LD_INT 22
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 25
23003: PUSH
23004: LD_INT 4
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PPUSH
23015: CALL_OW 69
23019: PUSH
23020: LD_VAR 0 2
23024: ARRAY
23025: PPUSH
23026: LD_INT 22
23028: PUSH
23029: LD_INT 3
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PUSH
23036: LD_INT 21
23038: PUSH
23039: LD_INT 3
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PUSH
23046: LD_INT 30
23048: PUSH
23049: LD_INT 8
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: PPUSH
23061: CALL_OW 69
23065: PUSH
23066: LD_INT 1
23068: ARRAY
23069: PPUSH
23070: CALL_OW 120
23074: GO 22988
23076: POP
23077: POP
// for i = 3 to 4 do
23078: LD_ADDR_VAR 0 2
23082: PUSH
23083: DOUBLE
23084: LD_INT 3
23086: DEC
23087: ST_TO_ADDR
23088: LD_INT 4
23090: PUSH
23091: FOR_TO
23092: IFFALSE 23179
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23094: LD_INT 22
23096: PUSH
23097: LD_INT 3
23099: PUSH
23100: EMPTY
23101: LIST
23102: LIST
23103: PUSH
23104: LD_INT 25
23106: PUSH
23107: LD_INT 4
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PPUSH
23118: CALL_OW 69
23122: PUSH
23123: LD_VAR 0 2
23127: ARRAY
23128: PPUSH
23129: LD_INT 22
23131: PUSH
23132: LD_INT 3
23134: PUSH
23135: EMPTY
23136: LIST
23137: LIST
23138: PUSH
23139: LD_INT 21
23141: PUSH
23142: LD_INT 3
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PUSH
23149: LD_INT 30
23151: PUSH
23152: LD_INT 8
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: PPUSH
23164: CALL_OW 69
23168: PUSH
23169: LD_INT 2
23171: ARRAY
23172: PPUSH
23173: CALL_OW 120
23177: GO 23091
23179: POP
23180: POP
// end ; if GetBType ( building ) = b_barracks then
23181: LD_VAR 0 1
23185: PPUSH
23186: CALL_OW 266
23190: PUSH
23191: LD_INT 5
23193: EQUAL
23194: IFFALSE 23321
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23196: LD_ADDR_VAR 0 2
23200: PUSH
23201: LD_INT 22
23203: PUSH
23204: LD_INT 3
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: LD_INT 25
23213: PUSH
23214: LD_INT 1
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: LD_INT 54
23226: PUSH
23227: EMPTY
23228: LIST
23229: PUSH
23230: EMPTY
23231: LIST
23232: LIST
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: PUSH
23244: FOR_IN
23245: IFFALSE 23263
// ComEnterUnit ( i , building ) ;
23247: LD_VAR 0 2
23251: PPUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: CALL_OW 120
23261: GO 23244
23263: POP
23264: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23265: LD_INT 22
23267: PUSH
23268: LD_INT 3
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 30
23277: PUSH
23278: LD_INT 5
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: EMPTY
23286: LIST
23287: LIST
23288: PPUSH
23289: CALL_OW 69
23293: PUSH
23294: LD_INT 0
23296: EQUAL
23297: IFFALSE 23311
// ruArm1 = building else
23299: LD_ADDR_EXP 33
23303: PUSH
23304: LD_VAR 0 1
23308: ST_TO_ADDR
23309: GO 23321
// ruArm2 = building ;
23311: LD_ADDR_EXP 34
23315: PUSH
23316: LD_VAR 0 1
23320: ST_TO_ADDR
// end ; end ; end ;
23321: PPOPN 2
23323: END
// on EnterBuilding ( building , human ) do var rnd ;
23324: LD_INT 0
23326: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23327: LD_VAR 0 2
23331: PPUSH
23332: CALL_OW 255
23336: PUSH
23337: LD_INT 2
23339: EQUAL
23340: PUSH
23341: LD_VAR 0 2
23345: PPUSH
23346: CALL_OW 257
23350: PUSH
23351: LD_INT 1
23353: EQUAL
23354: AND
23355: PUSH
23356: LD_VAR 0 1
23360: PUSH
23361: LD_EXP 45
23365: EQUAL
23366: AND
23367: IFFALSE 23414
// begin wait ( 0 0$1 ) ;
23369: LD_INT 35
23371: PPUSH
23372: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23376: LD_ADDR_VAR 0 3
23380: PUSH
23381: LD_INT 1
23383: PPUSH
23384: LD_INT 100
23386: PPUSH
23387: CALL_OW 12
23391: ST_TO_ADDR
// if rnd > 50 then
23392: LD_VAR 0 3
23396: PUSH
23397: LD_INT 50
23399: GREATER
23400: IFFALSE 23414
// SetClass ( human , class_mortar ) ;
23402: LD_VAR 0 2
23406: PPUSH
23407: LD_INT 8
23409: PPUSH
23410: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23414: LD_VAR 0 2
23418: PPUSH
23419: CALL_OW 255
23423: PUSH
23424: LD_INT 3
23426: EQUAL
23427: PUSH
23428: LD_VAR 0 2
23432: PPUSH
23433: CALL_OW 257
23437: PUSH
23438: LD_INT 1
23440: EQUAL
23441: AND
23442: PUSH
23443: LD_VAR 0 1
23447: PUSH
23448: LD_EXP 33
23452: EQUAL
23453: PUSH
23454: LD_VAR 0 1
23458: PUSH
23459: LD_EXP 34
23463: EQUAL
23464: OR
23465: PUSH
23466: EMPTY
23467: LIST
23468: AND
23469: IFFALSE 23490
// begin wait ( 0 0$1 ) ;
23471: LD_INT 35
23473: PPUSH
23474: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23478: LD_VAR 0 2
23482: PPUSH
23483: LD_INT 9
23485: PPUSH
23486: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23490: LD_VAR 0 2
23494: PPUSH
23495: CALL_OW 255
23499: PUSH
23500: LD_INT 3
23502: EQUAL
23503: PUSH
23504: LD_VAR 0 2
23508: PPUSH
23509: CALL_OW 257
23513: PUSH
23514: LD_INT 9
23516: EQUAL
23517: AND
23518: PUSH
23519: LD_VAR 0 1
23523: PPUSH
23524: CALL_OW 266
23528: PUSH
23529: LD_INT 32
23531: EQUAL
23532: AND
23533: IFFALSE 23554
// begin wait ( 0 0$1 ) ;
23535: LD_INT 35
23537: PPUSH
23538: CALL_OW 67
// SetClass ( human , 1 ) ;
23542: LD_VAR 0 2
23546: PPUSH
23547: LD_INT 1
23549: PPUSH
23550: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23554: LD_VAR 0 2
23558: PPUSH
23559: CALL_OW 255
23563: PUSH
23564: LD_INT 3
23566: EQUAL
23567: PUSH
23568: LD_VAR 0 2
23572: PPUSH
23573: CALL_OW 257
23577: PUSH
23578: LD_INT 3
23580: EQUAL
23581: AND
23582: PUSH
23583: LD_VAR 0 1
23587: PUSH
23588: LD_EXP 35
23592: EQUAL
23593: AND
23594: IFFALSE 23608
// SetLives ( human , 1000 ) ;
23596: LD_VAR 0 2
23600: PPUSH
23601: LD_INT 1000
23603: PPUSH
23604: CALL_OW 234
// end ;
23608: PPOPN 3
23610: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23611: LD_VAR 0 1
23615: PUSH
23616: LD_INT 1
23618: EQUAL
23619: PUSH
23620: LD_VAR 0 2
23624: PUSH
23625: LD_INT 2
23627: EQUAL
23628: AND
23629: PUSH
23630: LD_INT 1
23632: PPUSH
23633: LD_INT 2
23635: PPUSH
23636: CALL_OW 81
23640: PUSH
23641: LD_INT 1
23643: EQUAL
23644: AND
23645: IFFALSE 23666
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23647: LD_EXP 24
23651: PPUSH
23652: LD_STRING D6b-Pow-1
23654: PPUSH
23655: CALL_OW 94
// YouLost ( Powell ) ;
23659: LD_STRING Powell
23661: PPUSH
23662: CALL_OW 104
// end ; end ;
23666: PPOPN 2
23668: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23669: LD_INT 23
23671: PPUSH
23672: LD_INT 22
23674: PUSH
23675: LD_INT 1
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: PUSH
23682: LD_INT 21
23684: PUSH
23685: LD_INT 3
23687: PUSH
23688: EMPTY
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL_OW 70
23700: PUSH
23701: LD_INT 23
23703: PPUSH
23704: LD_INT 22
23706: PUSH
23707: LD_INT 1
23709: PUSH
23710: EMPTY
23711: LIST
23712: LIST
23713: PUSH
23714: LD_INT 21
23716: PUSH
23717: LD_INT 2
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 58
23726: PUSH
23727: EMPTY
23728: LIST
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: LIST
23734: PPUSH
23735: CALL_OW 70
23739: OR
23740: PUSH
23741: LD_INT 1
23743: PPUSH
23744: LD_INT 2
23746: PPUSH
23747: CALL_OW 81
23751: PUSH
23752: LD_INT 1
23754: EQUAL
23755: AND
23756: IFFALSE 23780
23758: GO 23760
23760: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23761: LD_EXP 24
23765: PPUSH
23766: LD_STRING D6b-Pow-1
23768: PPUSH
23769: CALL_OW 94
// YouLost ( Powell ) ;
23773: LD_STRING Powell
23775: PPUSH
23776: CALL_OW 104
// end ;
23780: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23781: LD_VAR 0 1
23785: PUSH
23786: LD_EXP 1
23790: EQUAL
23791: IFFALSE 23800
// YouLost ( JMM ) ;
23793: LD_STRING JMM
23795: PPUSH
23796: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23800: LD_VAR 0 1
23804: PPUSH
23805: CALL_OW 255
23809: PUSH
23810: LD_INT 3
23812: EQUAL
23813: PUSH
23814: LD_VAR 0 1
23818: PPUSH
23819: CALL_OW 247
23823: PUSH
23824: LD_INT 3
23826: EQUAL
23827: AND
23828: IFFALSE 24520
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 266
23839: PUSH
23840: LD_INT 31
23842: EQUAL
23843: PUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 266
23853: PUSH
23854: LD_INT 32
23856: EQUAL
23857: OR
23858: PUSH
23859: LD_VAR 0 1
23863: PPUSH
23864: CALL_OW 266
23868: PUSH
23869: LD_INT 36
23871: EQUAL
23872: OR
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 266
23883: PUSH
23884: LD_INT 0
23886: EQUAL
23887: OR
23888: PUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 266
23898: PUSH
23899: LD_INT 24
23901: EQUAL
23902: OR
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 266
23913: PUSH
23914: LD_INT 17
23916: EQUAL
23917: OR
23918: PUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 266
23928: PUSH
23929: LD_INT 25
23931: EQUAL
23932: OR
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 266
23943: PUSH
23944: LD_INT 19
23946: EQUAL
23947: OR
23948: PUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 266
23958: PUSH
23959: LD_INT 20
23961: EQUAL
23962: OR
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 266
23973: PUSH
23974: LD_INT 18
23976: EQUAL
23977: OR
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 266
23988: PUSH
23989: LD_INT 21
23991: EQUAL
23992: OR
23993: PUSH
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 266
24003: PUSH
24004: LD_INT 23
24006: EQUAL
24007: OR
24008: PUSH
24009: LD_VAR 0 1
24013: PPUSH
24014: CALL_OW 266
24018: PUSH
24019: LD_INT 16
24021: EQUAL
24022: OR
24023: PUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 266
24033: PUSH
24034: LD_INT 6
24036: EQUAL
24037: OR
24038: PUSH
24039: LD_VAR 0 1
24043: PPUSH
24044: CALL_OW 266
24048: PUSH
24049: LD_INT 29
24051: EQUAL
24052: OR
24053: PUSH
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 266
24063: PUSH
24064: LD_INT 26
24066: EQUAL
24067: OR
24068: PUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL_OW 266
24078: PUSH
24079: LD_INT 30
24081: EQUAL
24082: OR
24083: PUSH
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 266
24093: PUSH
24094: LD_INT 28
24096: EQUAL
24097: OR
24098: PUSH
24099: LD_VAR 0 1
24103: PPUSH
24104: CALL_OW 266
24108: PUSH
24109: LD_INT 27
24111: EQUAL
24112: OR
24113: PUSH
24114: LD_VAR 0 1
24118: PPUSH
24119: CALL_OW 266
24123: PUSH
24124: LD_INT 33
24126: EQUAL
24127: OR
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: CALL_OW 266
24138: PUSH
24139: LD_INT 2
24141: EQUAL
24142: OR
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 266
24153: PUSH
24154: LD_INT 4
24156: EQUAL
24157: OR
24158: IFFALSE 24244
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24160: LD_ADDR_EXP 42
24164: PUSH
24165: LD_EXP 42
24169: PUSH
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 266
24179: ADD
24180: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24181: LD_ADDR_EXP 42
24185: PUSH
24186: LD_EXP 42
24190: PUSH
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 250
24200: ADD
24201: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24202: LD_ADDR_EXP 42
24206: PUSH
24207: LD_EXP 42
24211: PUSH
24212: LD_VAR 0 1
24216: PPUSH
24217: CALL_OW 251
24221: ADD
24222: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24223: LD_ADDR_EXP 42
24227: PUSH
24228: LD_EXP 42
24232: PUSH
24233: LD_VAR 0 1
24237: PPUSH
24238: CALL_OW 254
24242: ADD
24243: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24244: LD_VAR 0 1
24248: PPUSH
24249: CALL_OW 266
24253: PUSH
24254: LD_INT 1
24256: EQUAL
24257: IFFALSE 24336
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24259: LD_ADDR_EXP 42
24263: PUSH
24264: LD_EXP 42
24268: PUSH
24269: LD_INT 0
24271: ADD
24272: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24273: LD_ADDR_EXP 42
24277: PUSH
24278: LD_EXP 42
24282: PUSH
24283: LD_VAR 0 1
24287: PPUSH
24288: CALL_OW 250
24292: ADD
24293: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24294: LD_ADDR_EXP 42
24298: PUSH
24299: LD_EXP 42
24303: PUSH
24304: LD_VAR 0 1
24308: PPUSH
24309: CALL_OW 251
24313: ADD
24314: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24315: LD_ADDR_EXP 42
24319: PUSH
24320: LD_EXP 42
24324: PUSH
24325: LD_VAR 0 1
24329: PPUSH
24330: CALL_OW 254
24334: ADD
24335: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24336: LD_VAR 0 1
24340: PPUSH
24341: CALL_OW 266
24345: PUSH
24346: LD_INT 3
24348: EQUAL
24349: IFFALSE 24428
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24351: LD_ADDR_EXP 42
24355: PUSH
24356: LD_EXP 42
24360: PUSH
24361: LD_INT 2
24363: ADD
24364: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24365: LD_ADDR_EXP 42
24369: PUSH
24370: LD_EXP 42
24374: PUSH
24375: LD_VAR 0 1
24379: PPUSH
24380: CALL_OW 250
24384: ADD
24385: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24386: LD_ADDR_EXP 42
24390: PUSH
24391: LD_EXP 42
24395: PUSH
24396: LD_VAR 0 1
24400: PPUSH
24401: CALL_OW 251
24405: ADD
24406: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24407: LD_ADDR_EXP 42
24411: PUSH
24412: LD_EXP 42
24416: PUSH
24417: LD_VAR 0 1
24421: PPUSH
24422: CALL_OW 254
24426: ADD
24427: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24428: LD_VAR 0 1
24432: PPUSH
24433: CALL_OW 266
24437: PUSH
24438: LD_INT 5
24440: EQUAL
24441: IFFALSE 24520
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24443: LD_ADDR_EXP 42
24447: PUSH
24448: LD_EXP 42
24452: PUSH
24453: LD_INT 4
24455: ADD
24456: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24457: LD_ADDR_EXP 42
24461: PUSH
24462: LD_EXP 42
24466: PUSH
24467: LD_VAR 0 1
24471: PPUSH
24472: CALL_OW 250
24476: ADD
24477: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24478: LD_ADDR_EXP 42
24482: PUSH
24483: LD_EXP 42
24487: PUSH
24488: LD_VAR 0 1
24492: PPUSH
24493: CALL_OW 251
24497: ADD
24498: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24499: LD_ADDR_EXP 42
24503: PUSH
24504: LD_EXP 42
24508: PUSH
24509: LD_VAR 0 1
24513: PPUSH
24514: CALL_OW 254
24518: ADD
24519: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24520: LD_VAR 0 1
24524: PPUSH
24525: CALL_OW 257
24529: PUSH
24530: LD_INT 3
24532: EQUAL
24533: PUSH
24534: LD_VAR 0 1
24538: PPUSH
24539: CALL_OW 255
24543: PUSH
24544: LD_INT 3
24546: EQUAL
24547: AND
24548: PUSH
24549: LD_EXP 35
24553: PPUSH
24554: CALL_OW 302
24558: AND
24559: PUSH
24560: LD_EXP 35
24564: PPUSH
24565: CALL_OW 255
24569: PUSH
24570: LD_INT 3
24572: EQUAL
24573: AND
24574: IFFALSE 24644
// begin uc_side = 3 ;
24576: LD_ADDR_OWVAR 20
24580: PUSH
24581: LD_INT 3
24583: ST_TO_ADDR
// uc_nation = 3 ;
24584: LD_ADDR_OWVAR 21
24588: PUSH
24589: LD_INT 3
24591: ST_TO_ADDR
// hc_gallery :=  ;
24592: LD_ADDR_OWVAR 33
24596: PUSH
24597: LD_STRING 
24599: ST_TO_ADDR
// hc_name :=  ;
24600: LD_ADDR_OWVAR 26
24604: PUSH
24605: LD_STRING 
24607: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24608: LD_INT 0
24610: PPUSH
24611: LD_EXP 36
24615: PPUSH
24616: LD_EXP 37
24620: PPUSH
24621: CALL_OW 12
24625: PPUSH
24626: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24630: CALL_OW 44
24634: PPUSH
24635: LD_EXP 35
24639: PPUSH
24640: CALL_OW 52
// end ; end ;
24644: PPOPN 1
24646: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24647: LD_ADDR_OWVAR 57
24651: PUSH
24652: LD_INT 0
24654: ST_TO_ADDR
// fastEnd = 1 ;
24655: LD_ADDR_EXP 59
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// FinishMission ;
24663: CALL 25925 0 0
// end ; end_of_file
24667: PPOPN 1
24669: END
// export function PrepareNature ; var i , un ; begin
24670: LD_INT 0
24672: PPUSH
24673: PPUSH
24674: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24675: LD_ADDR_VAR 0 2
24679: PUSH
24680: DOUBLE
24681: LD_INT 1
24683: DEC
24684: ST_TO_ADDR
24685: LD_OWVAR 67
24689: PUSH
24690: LD_INT 1
24692: PPUSH
24693: LD_INT 5
24695: PPUSH
24696: CALL_OW 12
24700: PLUS
24701: PUSH
24702: FOR_TO
24703: IFFALSE 24848
// begin hc_sex = sex_male ;
24705: LD_ADDR_OWVAR 27
24709: PUSH
24710: LD_INT 1
24712: ST_TO_ADDR
// uc_side = 0 ;
24713: LD_ADDR_OWVAR 20
24717: PUSH
24718: LD_INT 0
24720: ST_TO_ADDR
// uc_nation = nation_nature ;
24721: LD_ADDR_OWVAR 21
24725: PUSH
24726: LD_INT 0
24728: ST_TO_ADDR
// hc_class = class_apeman ;
24729: LD_ADDR_OWVAR 28
24733: PUSH
24734: LD_INT 12
24736: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24737: LD_ADDR_OWVAR 31
24741: PUSH
24742: LD_INT 2
24744: PPUSH
24745: LD_INT 7
24747: PPUSH
24748: CALL_OW 12
24752: PUSH
24753: LD_OWVAR 67
24757: PLUS
24758: PUSH
24759: LD_INT 2
24761: PPUSH
24762: LD_INT 10
24764: PPUSH
24765: CALL_OW 12
24769: PUSH
24770: LD_INT 2
24772: PPUSH
24773: LD_INT 10
24775: PPUSH
24776: CALL_OW 12
24780: PUSH
24781: LD_INT 2
24783: PPUSH
24784: LD_INT 10
24786: PPUSH
24787: CALL_OW 12
24791: PUSH
24792: EMPTY
24793: LIST
24794: LIST
24795: LIST
24796: LIST
24797: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24798: LD_ADDR_OWVAR 35
24802: PUSH
24803: LD_INT 5
24805: NEG
24806: PPUSH
24807: LD_INT 5
24809: PPUSH
24810: CALL_OW 12
24814: PUSH
24815: LD_OWVAR 67
24819: MUL
24820: ST_TO_ADDR
// un = CreateHuman ;
24821: LD_ADDR_VAR 0 3
24825: PUSH
24826: CALL_OW 44
24830: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24831: LD_VAR 0 3
24835: PPUSH
24836: LD_INT 5
24838: PPUSH
24839: LD_INT 0
24841: PPUSH
24842: CALL_OW 49
// end ;
24846: GO 24702
24848: POP
24849: POP
// for i = 1 to Difficulty + 2 do
24850: LD_ADDR_VAR 0 2
24854: PUSH
24855: DOUBLE
24856: LD_INT 1
24858: DEC
24859: ST_TO_ADDR
24860: LD_OWVAR 67
24864: PUSH
24865: LD_INT 2
24867: PLUS
24868: PUSH
24869: FOR_TO
24870: IFFALSE 24979
// begin hc_sex = sex_male ;
24872: LD_ADDR_OWVAR 27
24876: PUSH
24877: LD_INT 1
24879: ST_TO_ADDR
// uc_side = 0 ;
24880: LD_ADDR_OWVAR 20
24884: PUSH
24885: LD_INT 0
24887: ST_TO_ADDR
// uc_nation = nation_nature ;
24888: LD_ADDR_OWVAR 21
24892: PUSH
24893: LD_INT 0
24895: ST_TO_ADDR
// hc_class = class_tiger ;
24896: LD_ADDR_OWVAR 28
24900: PUSH
24901: LD_INT 14
24903: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24904: LD_ADDR_OWVAR 31
24908: PUSH
24909: LD_EXP 37
24913: PUSH
24914: LD_INT 0
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24929: LD_ADDR_OWVAR 35
24933: PUSH
24934: LD_INT 5
24936: NEG
24937: PPUSH
24938: LD_INT 5
24940: PPUSH
24941: CALL_OW 12
24945: PUSH
24946: LD_OWVAR 67
24950: MUL
24951: ST_TO_ADDR
// un = CreateHuman ;
24952: LD_ADDR_VAR 0 3
24956: PUSH
24957: CALL_OW 44
24961: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24962: LD_VAR 0 3
24966: PPUSH
24967: LD_INT 6
24969: PPUSH
24970: LD_INT 0
24972: PPUSH
24973: CALL_OW 49
// end ;
24977: GO 24869
24979: POP
24980: POP
// for i = 1 to rand ( 3 , 4 ) do
24981: LD_ADDR_VAR 0 2
24985: PUSH
24986: DOUBLE
24987: LD_INT 1
24989: DEC
24990: ST_TO_ADDR
24991: LD_INT 3
24993: PPUSH
24994: LD_INT 4
24996: PPUSH
24997: CALL_OW 12
25001: PUSH
25002: FOR_TO
25003: IFFALSE 25097
// begin hc_sex = sex_male ;
25005: LD_ADDR_OWVAR 27
25009: PUSH
25010: LD_INT 1
25012: ST_TO_ADDR
// uc_side = 0 ;
25013: LD_ADDR_OWVAR 20
25017: PUSH
25018: LD_INT 0
25020: ST_TO_ADDR
// uc_nation = nation_nature ;
25021: LD_ADDR_OWVAR 21
25025: PUSH
25026: LD_INT 0
25028: ST_TO_ADDR
// hc_class = 18 ;
25029: LD_ADDR_OWVAR 28
25033: PUSH
25034: LD_INT 18
25036: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25037: LD_ADDR_OWVAR 31
25041: PUSH
25042: LD_EXP 37
25046: PUSH
25047: LD_INT 0
25049: PUSH
25050: LD_INT 0
25052: PUSH
25053: LD_INT 0
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: ST_TO_ADDR
// hc_agressivity = 0 ;
25062: LD_ADDR_OWVAR 35
25066: PUSH
25067: LD_INT 0
25069: ST_TO_ADDR
// un = CreateHuman ;
25070: LD_ADDR_VAR 0 3
25074: PUSH
25075: CALL_OW 44
25079: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25080: LD_VAR 0 3
25084: PPUSH
25085: LD_INT 6
25087: PPUSH
25088: LD_INT 0
25090: PPUSH
25091: CALL_OW 49
// end ;
25095: GO 25002
25097: POP
25098: POP
// end ; end_of_file
25099: LD_VAR 0 1
25103: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25104: LD_EXP 46
25108: PUSH
25109: LD_INT 1
25111: EQUAL
25112: IFFALSE 25196
25114: GO 25116
25116: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25117: LD_INT 7
25119: PPUSH
25120: LD_INT 5
25122: PPUSH
25123: LD_INT 4
25125: PUSH
25126: LD_INT 5
25128: PUSH
25129: LD_INT 6
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: LIST
25136: PUSH
25137: LD_OWVAR 67
25141: ARRAY
25142: PPUSH
25143: LD_EXP 36
25147: PPUSH
25148: LD_EXP 37
25152: PPUSH
25153: CALL_OW 12
25157: PPUSH
25158: LD_INT 2
25160: PPUSH
25161: LD_INT 1
25163: PPUSH
25164: LD_INT 1
25166: PPUSH
25167: EMPTY
25168: PPUSH
25169: LD_INT 25
25171: PUSH
25172: LD_INT 26
25174: PUSH
25175: LD_INT 27
25177: PUSH
25178: LD_INT 28
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: PPUSH
25187: EMPTY
25188: PPUSH
25189: LD_INT 1
25191: PPUSH
25192: CALL 15677 0 11
25196: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25197: LD_EXP 46
25201: PUSH
25202: LD_INT 1
25204: EQUAL
25205: IFFALSE 25293
25207: GO 25209
25209: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25210: LD_INT 5
25212: PPUSH
25213: LD_INT 2
25215: PPUSH
25216: LD_INT 7
25218: PUSH
25219: LD_INT 8
25221: PUSH
25222: LD_INT 10
25224: PUSH
25225: EMPTY
25226: LIST
25227: LIST
25228: LIST
25229: PUSH
25230: LD_OWVAR 67
25234: ARRAY
25235: PPUSH
25236: LD_INT 0
25238: PPUSH
25239: LD_INT 0
25241: PPUSH
25242: LD_INT 2
25244: PUSH
25245: LD_INT 4
25247: PUSH
25248: LD_INT 5
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: LIST
25255: PUSH
25256: LD_OWVAR 67
25260: ARRAY
25261: PPUSH
25262: LD_INT 0
25264: PPUSH
25265: LD_EXP 36
25269: PPUSH
25270: LD_EXP 37
25274: PPUSH
25275: CALL_OW 12
25279: PPUSH
25280: LD_INT 7
25282: PPUSH
25283: LD_INT 9
25285: PPUSH
25286: LD_INT 1
25288: PPUSH
25289: CALL 17381 0 11
25293: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25294: LD_EXP 46
25298: PUSH
25299: LD_INT 1
25301: EQUAL
25302: IFFALSE 25311
25304: GO 25306
25306: DISABLE
// PrepareArabianSheik ;
25307: CALL 3870 0 0
25311: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25312: LD_EXP 29
25316: PUSH
25317: LD_EXP 60
25321: PUSH
25322: LD_INT 1
25324: EQUAL
25325: AND
25326: IFFALSE 25395
25328: GO 25330
25330: DISABLE
// begin enable ;
25331: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25332: LD_INT 6
25334: PPUSH
25335: LD_INT 3
25337: PPUSH
25338: LD_EXP 57
25342: PPUSH
25343: LD_INT 0
25345: PPUSH
25346: LD_OWVAR 67
25350: PPUSH
25351: LD_INT 0
25353: PPUSH
25354: LD_EXP 57
25358: PUSH
25359: LD_INT 3
25361: DIV
25362: PUSH
25363: LD_INT 1
25365: PLUS
25366: PPUSH
25367: LD_EXP 36
25371: PPUSH
25372: LD_EXP 37
25376: PPUSH
25377: CALL_OW 12
25381: PPUSH
25382: LD_INT 17
25384: PPUSH
25385: LD_INT 18
25387: PPUSH
25388: LD_INT 1
25390: PPUSH
25391: CALL 17381 0 11
// end ;
25395: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25396: LD_EXP 29
25400: PUSH
25401: LD_EXP 60
25405: PUSH
25406: LD_INT 1
25408: EQUAL
25409: AND
25410: IFFALSE 25487
25412: GO 25414
25414: DISABLE
// begin enable ;
25415: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25416: LD_INT 17
25418: PPUSH
25419: LD_INT 6
25421: PPUSH
25422: LD_EXP 56
25426: PPUSH
25427: LD_EXP 36
25431: PPUSH
25432: LD_EXP 37
25436: PPUSH
25437: CALL_OW 12
25441: PPUSH
25442: LD_INT 3
25444: PPUSH
25445: LD_INT 1
25447: PPUSH
25448: LD_INT 1
25450: PUSH
25451: LD_INT 3
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PPUSH
25458: LD_INT 43
25460: PUSH
25461: LD_INT 44
25463: PUSH
25464: LD_INT 45
25466: PUSH
25467: LD_INT 46
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: LIST
25474: LIST
25475: PPUSH
25476: EMPTY
25477: PPUSH
25478: EMPTY
25479: PPUSH
25480: LD_INT 1
25482: PPUSH
25483: CALL 15677 0 11
// end ;
25487: END
// every 10 10$00 trigger joinEpsilon do
25488: LD_EXP 29
25492: IFFALSE 25546
25494: GO 25496
25496: DISABLE
// begin enable ;
25497: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25498: LD_ADDR_EXP 56
25502: PUSH
25503: LD_EXP 56
25507: PUSH
25508: LD_INT 1
25510: PPUSH
25511: LD_OWVAR 67
25515: PPUSH
25516: CALL_OW 12
25520: PLUS
25521: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25522: LD_ADDR_EXP 57
25526: PUSH
25527: LD_EXP 57
25531: PUSH
25532: LD_INT 1
25534: PPUSH
25535: LD_OWVAR 67
25539: PPUSH
25540: CALL_OW 12
25544: PLUS
25545: ST_TO_ADDR
// end ;
25546: END
// every 21 21$0 trigger attackAvalaible = 1 do
25547: LD_EXP 60
25551: PUSH
25552: LD_INT 1
25554: EQUAL
25555: IFFALSE 25568
25557: GO 25559
25559: DISABLE
// attackAvalaible = 0 ; end_of_file
25560: LD_ADDR_EXP 60
25564: PUSH
25565: LD_INT 0
25567: ST_TO_ADDR
25568: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25569: LD_INT 54
25571: PPUSH
25572: LD_INT 1
25574: PPUSH
25575: CALL_OW 321
25579: PUSH
25580: LD_INT 2
25582: EQUAL
25583: PUSH
25584: LD_INT 55
25586: PPUSH
25587: LD_INT 1
25589: PPUSH
25590: CALL_OW 321
25594: PUSH
25595: LD_INT 2
25597: EQUAL
25598: AND
25599: PUSH
25600: LD_INT 21
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: CALL_OW 321
25610: PUSH
25611: LD_INT 2
25613: EQUAL
25614: AND
25615: PUSH
25616: LD_INT 22
25618: PPUSH
25619: LD_INT 1
25621: PPUSH
25622: CALL_OW 321
25626: PUSH
25627: LD_INT 2
25629: EQUAL
25630: AND
25631: PUSH
25632: LD_INT 12
25634: PPUSH
25635: LD_INT 1
25637: PPUSH
25638: CALL_OW 321
25642: PUSH
25643: LD_INT 1
25645: EQUAL
25646: PUSH
25647: LD_INT 32
25649: PPUSH
25650: LD_INT 1
25652: PPUSH
25653: CALL_OW 321
25657: PUSH
25658: LD_INT 1
25660: EQUAL
25661: OR
25662: PUSH
25663: EMPTY
25664: LIST
25665: AND
25666: PUSH
25667: LD_EXP 48
25671: PUSH
25672: LD_INT 1
25674: EQUAL
25675: AND
25676: PUSH
25677: LD_INT 22
25679: PUSH
25680: LD_INT 3
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 21
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: PPUSH
25701: CALL_OW 69
25705: PUSH
25706: LD_INT 0
25708: EQUAL
25709: AND
25710: IFFALSE 25766
25712: GO 25714
25714: DISABLE
// begin case query ( QEndMission ) of 1 :
25715: LD_STRING QEndMission
25717: PPUSH
25718: CALL_OW 97
25722: PUSH
25723: LD_INT 1
25725: DOUBLE
25726: EQUAL
25727: IFTRUE 25731
25729: GO 25742
25731: POP
// begin end_the_mission_allowed = true ;
25732: LD_ADDR_OWVAR 57
25736: PUSH
25737: LD_INT 1
25739: ST_TO_ADDR
// end ; 2 :
25740: GO 25766
25742: LD_INT 2
25744: DOUBLE
25745: EQUAL
25746: IFTRUE 25750
25748: GO 25765
25750: POP
// begin fastEnd = 1 ;
25751: LD_ADDR_EXP 59
25755: PUSH
25756: LD_INT 1
25758: ST_TO_ADDR
// FinishMission ;
25759: CALL 25925 0 0
// end ; end ;
25763: GO 25766
25765: POP
// end ;
25766: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25767: LD_INT 54
25769: PPUSH
25770: LD_INT 1
25772: PPUSH
25773: CALL_OW 321
25777: PUSH
25778: LD_INT 2
25780: EQUAL
25781: PUSH
25782: LD_INT 55
25784: PPUSH
25785: LD_INT 1
25787: PPUSH
25788: CALL_OW 321
25792: PUSH
25793: LD_INT 2
25795: EQUAL
25796: AND
25797: PUSH
25798: LD_INT 21
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 321
25808: PUSH
25809: LD_INT 2
25811: EQUAL
25812: AND
25813: PUSH
25814: LD_INT 22
25816: PPUSH
25817: LD_INT 1
25819: PPUSH
25820: CALL_OW 321
25824: PUSH
25825: LD_INT 2
25827: EQUAL
25828: AND
25829: PUSH
25830: LD_INT 12
25832: PPUSH
25833: LD_INT 1
25835: PPUSH
25836: CALL_OW 321
25840: PUSH
25841: LD_INT 2
25843: EQUAL
25844: AND
25845: PUSH
25846: LD_INT 32
25848: PPUSH
25849: LD_INT 1
25851: PPUSH
25852: CALL_OW 321
25856: PUSH
25857: LD_INT 2
25859: EQUAL
25860: AND
25861: PUSH
25862: LD_EXP 59
25866: PUSH
25867: LD_INT 0
25869: EQUAL
25870: AND
25871: PUSH
25872: LD_EXP 48
25876: PUSH
25877: LD_INT 1
25879: EQUAL
25880: AND
25881: PUSH
25882: LD_INT 22
25884: PUSH
25885: LD_INT 3
25887: PUSH
25888: EMPTY
25889: LIST
25890: LIST
25891: PUSH
25892: LD_INT 21
25894: PUSH
25895: LD_INT 1
25897: PUSH
25898: EMPTY
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: LIST
25905: PPUSH
25906: CALL_OW 69
25910: PUSH
25911: LD_INT 0
25913: EQUAL
25914: AND
25915: IFFALSE 25924
25917: GO 25919
25919: DISABLE
// FinishMission ;
25920: CALL 25925 0 0
25924: END
// export function FinishMission ; begin
25925: LD_INT 0
25927: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25928: LD_EXP 52
25932: PPUSH
25933: LD_STRING 10_KhatamStatus_1
25935: PPUSH
25936: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25940: LD_EXP 51
25944: PPUSH
25945: LD_STRING 10_GensherEscape_1
25947: PPUSH
25948: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25952: LD_INT 12
25954: PPUSH
25955: LD_INT 1
25957: PPUSH
25958: CALL_OW 321
25962: PUSH
25963: LD_INT 2
25965: EQUAL
25966: IFFALSE 25980
// begin AddMedal ( sights , 1 ) ;
25968: LD_STRING sights
25970: PPUSH
25971: LD_INT 1
25973: PPUSH
25974: CALL_OW 101
// end else
25978: GO 25991
// begin AddMedal ( sights , - 1 ) ;
25980: LD_STRING sights
25982: PPUSH
25983: LD_INT 1
25985: NEG
25986: PPUSH
25987: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25991: LD_INT 32
25993: PPUSH
25994: LD_INT 1
25996: PPUSH
25997: CALL_OW 321
26001: PUSH
26002: LD_INT 2
26004: EQUAL
26005: IFFALSE 26019
// begin AddMedal ( computers , 1 ) ;
26007: LD_STRING computers
26009: PPUSH
26010: LD_INT 1
26012: PPUSH
26013: CALL_OW 101
// end else
26017: GO 26030
// begin AddMedal ( computers , - 1 ) ;
26019: LD_STRING computers
26021: PPUSH
26022: LD_INT 1
26024: NEG
26025: PPUSH
26026: CALL_OW 101
// end ; if arabianEscape = 0 then
26030: LD_EXP 47
26034: PUSH
26035: LD_INT 0
26037: EQUAL
26038: IFFALSE 26062
// begin AddMedal ( renegades , 2 ) ;
26040: LD_STRING renegades
26042: PPUSH
26043: LD_INT 2
26045: PPUSH
26046: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26050: LD_INT 0
26052: PPUSH
26053: LD_STRING 10_ScientistsEscape_1
26055: PPUSH
26056: CALL_OW 39
// end else
26060: GO 26073
// begin AddMedal ( renegades , - 1 ) ;
26062: LD_STRING renegades
26064: PPUSH
26065: LD_INT 1
26067: NEG
26068: PPUSH
26069: CALL_OW 101
// end ; SaveEpsilonBase ;
26073: CALL 26792 0 0
// Query ( kaj ) ;
26077: LD_STRING kaj
26079: PPUSH
26080: CALL_OW 97
// GiveMedals ( Main ) ;
26084: LD_STRING Main
26086: PPUSH
26087: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26091: LD_INT 22
26093: PUSH
26094: LD_INT 1
26096: PUSH
26097: EMPTY
26098: LIST
26099: LIST
26100: PUSH
26101: LD_INT 23
26103: PUSH
26104: LD_INT 1
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: LD_INT 21
26113: PUSH
26114: LD_INT 1
26116: PUSH
26117: EMPTY
26118: LIST
26119: LIST
26120: PUSH
26121: LD_INT 2
26123: PUSH
26124: LD_INT 25
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 25
26136: PUSH
26137: LD_INT 2
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 25
26146: PUSH
26147: LD_INT 3
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: PUSH
26154: LD_INT 25
26156: PUSH
26157: LD_INT 4
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 25
26166: PUSH
26167: LD_INT 5
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 25
26176: PUSH
26177: LD_INT 8
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: EMPTY
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: PPUSH
26199: CALL_OW 69
26203: PPUSH
26204: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26208: LD_EXP 1
26212: PPUSH
26213: LD_EXP 53
26217: PUSH
26218: LD_STRING JMM
26220: STR
26221: PPUSH
26222: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26226: LD_EXP 2
26230: PPUSH
26231: LD_EXP 53
26235: PUSH
26236: LD_STRING Brown
26238: STR
26239: PPUSH
26240: CALL 9952 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26244: LD_EXP 3
26248: PPUSH
26249: LD_EXP 53
26253: PUSH
26254: LD_STRING Donaldson
26256: STR
26257: PPUSH
26258: CALL 9952 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26262: LD_EXP 4
26266: PPUSH
26267: LD_EXP 53
26271: PUSH
26272: LD_STRING Bobby
26274: STR
26275: PPUSH
26276: CALL 9952 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26280: LD_EXP 5
26284: PPUSH
26285: LD_EXP 53
26289: PUSH
26290: LD_STRING Cyrus
26292: STR
26293: PPUSH
26294: CALL 9952 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26298: LD_EXP 6
26302: PPUSH
26303: LD_EXP 53
26307: PUSH
26308: LD_STRING Lisa
26310: STR
26311: PPUSH
26312: CALL 9952 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26316: LD_EXP 7
26320: PPUSH
26321: LD_EXP 53
26325: PUSH
26326: LD_STRING Frank
26328: STR
26329: PPUSH
26330: CALL 9952 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26334: LD_EXP 8
26338: PPUSH
26339: LD_EXP 53
26343: PUSH
26344: LD_STRING Kikuchi
26346: STR
26347: PPUSH
26348: CALL 9952 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26352: LD_EXP 9
26356: PPUSH
26357: LD_EXP 53
26361: PUSH
26362: LD_STRING Houten
26364: STR
26365: PPUSH
26366: CALL 9952 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26370: LD_EXP 10
26374: PPUSH
26375: LD_EXP 53
26379: PUSH
26380: LD_STRING Gary
26382: STR
26383: PPUSH
26384: CALL 9952 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26388: LD_EXP 19
26392: PPUSH
26393: LD_EXP 53
26397: PUSH
26398: LD_STRING Cornell
26400: STR
26401: PPUSH
26402: CALL 9952 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26406: LD_EXP 11
26410: PPUSH
26411: LD_EXP 53
26415: PUSH
26416: LD_STRING Simms
26418: STR
26419: PPUSH
26420: CALL 9952 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26424: LD_EXP 12
26428: PPUSH
26429: LD_EXP 53
26433: PUSH
26434: LD_STRING Denis
26436: STR
26437: PPUSH
26438: CALL 9952 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26442: LD_EXP 13
26446: PPUSH
26447: LD_EXP 53
26451: PUSH
26452: LD_STRING Joan
26454: STR
26455: PPUSH
26456: CALL 9952 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26460: LD_EXP 15
26464: PPUSH
26465: LD_EXP 53
26469: PUSH
26470: LD_STRING Gladstone
26472: STR
26473: PPUSH
26474: CALL 9952 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26478: LD_EXP 17
26482: PPUSH
26483: LD_EXP 53
26487: PUSH
26488: LD_STRING DeltaDoctor
26490: STR
26491: PPUSH
26492: CALL 9952 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26496: LD_INT 50
26498: PUSH
26499: EMPTY
26500: LIST
26501: PUSH
26502: LD_INT 22
26504: PUSH
26505: LD_INT 1
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 21
26514: PUSH
26515: LD_INT 1
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: PUSH
26522: LD_INT 2
26524: PUSH
26525: LD_INT 25
26527: PUSH
26528: LD_INT 1
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 25
26537: PUSH
26538: LD_INT 2
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 25
26547: PUSH
26548: LD_INT 3
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 25
26557: PUSH
26558: LD_INT 4
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 25
26567: PUSH
26568: LD_INT 5
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 25
26577: PUSH
26578: LD_INT 8
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: EMPTY
26586: LIST
26587: LIST
26588: LIST
26589: LIST
26590: LIST
26591: LIST
26592: LIST
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: LIST
26598: LIST
26599: PPUSH
26600: CALL_OW 69
26604: PUSH
26605: LD_EXP 1
26609: PUSH
26610: LD_EXP 2
26614: PUSH
26615: LD_EXP 3
26619: PUSH
26620: LD_EXP 4
26624: PUSH
26625: LD_EXP 5
26629: PUSH
26630: LD_EXP 6
26634: PUSH
26635: LD_EXP 7
26639: PUSH
26640: LD_EXP 15
26644: PUSH
26645: LD_EXP 8
26649: PUSH
26650: LD_EXP 12
26654: PUSH
26655: LD_EXP 13
26659: PUSH
26660: LD_EXP 9
26664: PUSH
26665: LD_EXP 11
26669: PUSH
26670: LD_EXP 10
26674: PUSH
26675: LD_EXP 17
26679: PUSH
26680: LD_EXP 19
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: DIFF
26703: PPUSH
26704: LD_STRING 10_other_survivors
26706: PPUSH
26707: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26711: LD_INT 50
26713: PUSH
26714: EMPTY
26715: LIST
26716: PUSH
26717: LD_INT 22
26719: PUSH
26720: LD_INT 1
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PUSH
26727: LD_INT 21
26729: PUSH
26730: LD_INT 1
26732: PUSH
26733: EMPTY
26734: LIST
26735: LIST
26736: PUSH
26737: LD_INT 2
26739: PUSH
26740: LD_INT 25
26742: PUSH
26743: LD_INT 16
26745: PUSH
26746: EMPTY
26747: LIST
26748: LIST
26749: PUSH
26750: LD_INT 25
26752: PUSH
26753: LD_INT 12
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: EMPTY
26761: LIST
26762: LIST
26763: LIST
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: PPUSH
26771: CALL_OW 69
26775: PPUSH
26776: LD_STRING 10_ape
26778: PPUSH
26779: CALL_OW 38
// YouWin ;
26783: CALL_OW 103
// end ;
26787: LD_VAR 0 1
26791: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26792: LD_INT 0
26794: PPUSH
26795: PPUSH
26796: PPUSH
26797: PPUSH
// epsilonBase = [ ] ;
26798: LD_ADDR_VAR 0 2
26802: PUSH
26803: EMPTY
26804: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26805: LD_ADDR_VAR 0 3
26809: PUSH
26810: LD_INT 22
26812: PUSH
26813: LD_INT 1
26815: PUSH
26816: EMPTY
26817: LIST
26818: LIST
26819: PUSH
26820: LD_INT 21
26822: PUSH
26823: LD_INT 3
26825: PUSH
26826: EMPTY
26827: LIST
26828: LIST
26829: PUSH
26830: LD_INT 50
26832: PUSH
26833: EMPTY
26834: LIST
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: PPUSH
26841: CALL_OW 69
26845: ST_TO_ADDR
// for i in buildings do
26846: LD_ADDR_VAR 0 4
26850: PUSH
26851: LD_VAR 0 3
26855: PUSH
26856: FOR_IN
26857: IFFALSE 27294
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26859: LD_VAR 0 4
26863: PPUSH
26864: CALL_OW 266
26868: PUSH
26869: LD_INT 6
26871: PUSH
26872: LD_INT 7
26874: PUSH
26875: LD_INT 8
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: LIST
26882: IN
26883: IFFALSE 26997
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26885: LD_ADDR_VAR 0 2
26889: PUSH
26890: LD_VAR 0 2
26894: PUSH
26895: LD_VAR 0 4
26899: PPUSH
26900: CALL_OW 266
26904: PUSH
26905: LD_VAR 0 4
26909: PPUSH
26910: CALL_OW 250
26914: PUSH
26915: LD_VAR 0 4
26919: PPUSH
26920: CALL_OW 251
26924: PUSH
26925: LD_VAR 0 4
26929: PPUSH
26930: CALL_OW 254
26934: PUSH
26935: LD_VAR 0 4
26939: PPUSH
26940: CALL_OW 267
26944: PUSH
26945: LD_VAR 0 4
26949: PPUSH
26950: CALL_OW 248
26954: PUSH
26955: LD_VAR 0 4
26959: PPUSH
26960: LD_INT 1
26962: PPUSH
26963: CALL_OW 268
26967: PUSH
26968: LD_VAR 0 4
26972: PPUSH
26973: LD_INT 2
26975: PPUSH
26976: CALL_OW 268
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: PUSH
26991: EMPTY
26992: LIST
26993: ADD
26994: ST_TO_ADDR
26995: GO 27292
// if GetBType ( i ) = b_bunker then
26997: LD_VAR 0 4
27001: PPUSH
27002: CALL_OW 266
27006: PUSH
27007: LD_INT 32
27009: EQUAL
27010: IFFALSE 27107
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27012: LD_ADDR_VAR 0 2
27016: PUSH
27017: LD_VAR 0 2
27021: PUSH
27022: LD_VAR 0 4
27026: PPUSH
27027: CALL_OW 266
27031: PUSH
27032: LD_VAR 0 4
27036: PPUSH
27037: CALL_OW 250
27041: PUSH
27042: LD_VAR 0 4
27046: PPUSH
27047: CALL_OW 251
27051: PUSH
27052: LD_VAR 0 4
27056: PPUSH
27057: CALL_OW 254
27061: PUSH
27062: LD_VAR 0 4
27066: PPUSH
27067: CALL_OW 267
27071: PUSH
27072: LD_VAR 0 4
27076: PPUSH
27077: CALL_OW 248
27081: PUSH
27082: LD_VAR 0 4
27086: PPUSH
27087: CALL_OW 269
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: ADD
27104: ST_TO_ADDR
27105: GO 27292
// if GetBType ( i ) = b_factory then
27107: LD_VAR 0 4
27111: PPUSH
27112: CALL_OW 266
27116: PUSH
27117: LD_INT 3
27119: EQUAL
27120: IFFALSE 27210
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27122: LD_ADDR_VAR 0 2
27126: PUSH
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_INT 1
27134: PPUSH
27135: LD_VAR 0 4
27139: PPUSH
27140: CALL_OW 266
27144: PUSH
27145: LD_VAR 0 4
27149: PPUSH
27150: CALL_OW 250
27154: PUSH
27155: LD_VAR 0 4
27159: PPUSH
27160: CALL_OW 251
27164: PUSH
27165: LD_VAR 0 4
27169: PPUSH
27170: CALL_OW 254
27174: PUSH
27175: LD_VAR 0 4
27179: PPUSH
27180: CALL_OW 267
27184: PUSH
27185: LD_VAR 0 4
27189: PPUSH
27190: CALL_OW 248
27194: PUSH
27195: EMPTY
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: PPUSH
27203: CALL_OW 2
27207: ST_TO_ADDR
27208: GO 27292
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27210: LD_ADDR_VAR 0 2
27214: PUSH
27215: LD_VAR 0 2
27219: PUSH
27220: LD_VAR 0 4
27224: PPUSH
27225: CALL_OW 266
27229: PUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: CALL_OW 250
27239: PUSH
27240: LD_VAR 0 4
27244: PPUSH
27245: CALL_OW 251
27249: PUSH
27250: LD_VAR 0 4
27254: PPUSH
27255: CALL_OW 254
27259: PUSH
27260: LD_VAR 0 4
27264: PPUSH
27265: CALL_OW 267
27269: PUSH
27270: LD_VAR 0 4
27274: PPUSH
27275: CALL_OW 248
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: LIST
27284: LIST
27285: LIST
27286: LIST
27287: PUSH
27288: EMPTY
27289: LIST
27290: ADD
27291: ST_TO_ADDR
// end ;
27292: GO 26856
27294: POP
27295: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27296: LD_VAR 0 2
27300: PPUSH
27301: LD_STRING 10_EpsilonBase
27303: PPUSH
27304: CALL_OW 39
// end ; end_of_file
27308: LD_VAR 0 1
27312: RET
// every 0 0$30 do
27313: GO 27315
27315: DISABLE
// begin enable ;
27316: ENABLE
// if cratesSpawned < 6 then
27317: LD_EXP 55
27321: PUSH
27322: LD_INT 6
27324: LESS
27325: IFFALSE 27362
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27327: LD_INT 3
27329: PPUSH
27330: LD_INT 5
27332: PPUSH
27333: CALL_OW 12
27337: PPUSH
27338: LD_INT 16
27340: PPUSH
27341: LD_INT 1
27343: PPUSH
27344: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27348: LD_ADDR_EXP 55
27352: PUSH
27353: LD_EXP 55
27357: PUSH
27358: LD_INT 1
27360: PLUS
27361: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27362: LD_EXP 55
27366: PUSH
27367: LD_INT 6
27369: GREATEREQUAL
27370: PUSH
27371: LD_EXP 55
27375: PUSH
27376: LD_INT 12
27378: LESS
27379: AND
27380: IFFALSE 27424
// begin wait ( 0 0$30 ) ;
27382: LD_INT 1050
27384: PPUSH
27385: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27389: LD_INT 3
27391: PPUSH
27392: LD_INT 5
27394: PPUSH
27395: CALL_OW 12
27399: PPUSH
27400: LD_INT 16
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27410: LD_ADDR_EXP 55
27414: PUSH
27415: LD_EXP 55
27419: PUSH
27420: LD_INT 1
27422: PLUS
27423: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27424: LD_EXP 55
27428: PUSH
27429: LD_INT 12
27431: GREATEREQUAL
27432: IFFALSE 27476
// begin wait ( 1 1$30 ) ;
27434: LD_INT 3150
27436: PPUSH
27437: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27441: LD_INT 3
27443: PPUSH
27444: LD_INT 5
27446: PPUSH
27447: CALL_OW 12
27451: PPUSH
27452: LD_INT 16
27454: PPUSH
27455: LD_INT 1
27457: PPUSH
27458: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27462: LD_ADDR_EXP 55
27466: PUSH
27467: LD_EXP 55
27471: PUSH
27472: LD_INT 1
27474: PLUS
27475: ST_TO_ADDR
// end ; end ;
27476: END
