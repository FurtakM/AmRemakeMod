// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 4
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24583 0 0
// PrepareDifficulty ;
 250: CALL 9916 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19514 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19514 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19514 0 2
// PrepareArabianCommander ;
 354: CALL 3153 0 0
// PrepareArabian ;
 358: CALL 3205 0 0
// BuildArabianBase ;
 362: CALL 12615 0 0
// TameApemans ;
 366: CALL 18479 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9510 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9510 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9510 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9510 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9510 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9510 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9510 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9510 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9510 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9510 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9510 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9510 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9510 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9510 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9510 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9510 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9510 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9510 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2210
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2206
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2168: LD_ADDR_EXP 22
2172: PUSH
2173: LD_EXP 22
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: CALL_OW 3
2185: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2186: LD_EXP 22
2190: PUSH
2191: LD_VAR 0 2
2195: ARRAY
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: CALL_OW 336
// end ;
2204: GO 2144
2206: POP
2207: POP
// end else
2208: GO 2270
// begin for i in others09 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_EXP 22
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2268
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 49
// others09 = others09 diff i ;
2238: LD_ADDR_EXP 22
2242: PUSH
2243: LD_EXP 22
2247: PUSH
2248: LD_VAR 0 2
2252: DIFF
2253: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_INT 2
2261: PPUSH
2262: CALL_OW 336
// end ;
2266: GO 2220
2268: POP
2269: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2270: LD_INT 22
2272: PUSH
2273: LD_INT 4
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 69
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: IFFALSE 2420
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2304: LD_ADDR_VAR 0 3
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 2
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 11
2342: PUSH
2343: LD_EXP 14
2347: PUSH
2348: LD_EXP 12
2352: PUSH
2353: LD_EXP 15
2357: PUSH
2358: LD_EXP 17
2362: PUSH
2363: LD_EXP 13
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: DIFF
2376: ST_TO_ADDR
// if not tmp then
2377: LD_VAR 0 3
2381: NOT
2382: IFFALSE 2404
// begin if Denis then
2384: LD_EXP 12
2388: IFFALSE 2402
// SetClass ( Denis , 2 ) ;
2390: LD_EXP 12
2394: PPUSH
2395: LD_INT 2
2397: PPUSH
2398: CALL_OW 336
// exit ;
2402: GO 2525
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2404: LD_VAR 0 3
2408: PUSH
2409: LD_INT 1
2411: ARRAY
2412: PPUSH
2413: LD_INT 2
2415: PPUSH
2416: CALL_OW 336
// end ; for i in ape09 do
2420: LD_ADDR_VAR 0 2
2424: PUSH
2425: LD_EXP 23
2429: PUSH
2430: FOR_IN
2431: IFFALSE 2450
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2433: LD_VAR 0 2
2437: PPUSH
2438: LD_INT 1
2440: PPUSH
2441: LD_INT 0
2443: PPUSH
2444: CALL_OW 49
2448: GO 2430
2450: POP
2451: POP
// uc_side = 1 ;
2452: LD_ADDR_OWVAR 20
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// hc_class := 1 ;
2460: LD_ADDR_OWVAR 28
2464: PUSH
2465: LD_INT 1
2467: ST_TO_ADDR
// hc_sex := sex_female ;
2468: LD_ADDR_OWVAR 27
2472: PUSH
2473: LD_INT 2
2475: ST_TO_ADDR
// hc_gallery :=  ;
2476: LD_ADDR_OWVAR 33
2480: PUSH
2481: LD_STRING 
2483: ST_TO_ADDR
// hc_name :=  ;
2484: LD_ADDR_OWVAR 26
2488: PUSH
2489: LD_STRING 
2491: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2492: LD_ADDR_OWVAR 31
2496: PUSH
2497: LD_INT 1
2499: PUSH
2500: LD_INT 7
2502: PUSH
2503: LD_INT 1
2505: PUSH
2506: LD_INT 0
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: ST_TO_ADDR
// AmScout = CreateHuman ;
2515: LD_ADDR_EXP 18
2519: PUSH
2520: CALL_OW 44
2524: ST_TO_ADDR
// end ;
2525: LD_VAR 0 1
2529: RET
// export function PrepareCornell ; begin
2530: LD_INT 0
2532: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2533: LD_INT 4
2535: PPUSH
2536: LD_INT 4
2538: PPUSH
2539: CALL_OW 343
// uc_side = 4 ;
2543: LD_ADDR_OWVAR 20
2547: PUSH
2548: LD_INT 4
2550: ST_TO_ADDR
// uc_nation = 1 ;
2551: LD_ADDR_OWVAR 21
2555: PUSH
2556: LD_INT 1
2558: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2559: LD_ADDR_EXP 19
2563: PUSH
2564: LD_STRING 03_Cornel
2566: PPUSH
2567: LD_INT 1
2569: PPUSH
2570: CALL 9510 0 2
2574: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2575: LD_EXP 19
2579: PPUSH
2580: LD_INT 8
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2590: LD_EXP 19
2594: PPUSH
2595: LD_INT 350
2597: PPUSH
2598: CALL_OW 234
// if IsInUnit ( JMM ) then
2602: LD_EXP 1
2606: PPUSH
2607: CALL_OW 310
2611: IFFALSE 2654
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2613: LD_EXP 19
2617: PPUSH
2618: LD_EXP 1
2622: PPUSH
2623: CALL_OW 310
2627: PPUSH
2628: CALL_OW 250
2632: PPUSH
2633: LD_EXP 1
2637: PPUSH
2638: CALL_OW 310
2642: PPUSH
2643: CALL_OW 251
2647: PPUSH
2648: CALL_OW 111
2652: GO 2683
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2654: LD_EXP 19
2658: PPUSH
2659: LD_EXP 1
2663: PPUSH
2664: CALL_OW 250
2668: PPUSH
2669: LD_EXP 1
2673: PPUSH
2674: CALL_OW 251
2678: PPUSH
2679: CALL_OW 111
// end ; end_of_file
2683: LD_VAR 0 1
2687: RET
// export function PrepareRussians ; var i , un ; begin
2688: LD_INT 0
2690: PPUSH
2691: PPUSH
2692: PPUSH
// uc_side = 3 ;
2693: LD_ADDR_OWVAR 20
2697: PUSH
2698: LD_INT 3
2700: ST_TO_ADDR
// uc_nation = 3 ;
2701: LD_ADDR_OWVAR 21
2705: PUSH
2706: LD_INT 3
2708: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2709: LD_ADDR_EXP 25
2713: PUSH
2714: LD_STRING Tsaritsyn
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL 9510 0 2
2724: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2725: LD_EXP 25
2729: PPUSH
2730: LD_INT 3
2732: PPUSH
2733: LD_INT 0
2735: PPUSH
2736: CALL_OW 49
// for i = 1 to 14 do
2740: LD_ADDR_VAR 0 2
2744: PUSH
2745: DOUBLE
2746: LD_INT 1
2748: DEC
2749: ST_TO_ADDR
2750: LD_INT 14
2752: PUSH
2753: FOR_TO
2754: IFFALSE 2840
// begin uc_side = 3 ;
2756: LD_ADDR_OWVAR 20
2760: PUSH
2761: LD_INT 3
2763: ST_TO_ADDR
// uc_nation = 3 ;
2764: LD_ADDR_OWVAR 21
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// hc_gallery =  ;
2772: LD_ADDR_OWVAR 33
2776: PUSH
2777: LD_STRING 
2779: ST_TO_ADDR
// hc_name =  ;
2780: LD_ADDR_OWVAR 26
2784: PUSH
2785: LD_STRING 
2787: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2788: LD_INT 0
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: LD_EXP 36
2798: PPUSH
2799: LD_EXP 37
2803: PPUSH
2804: CALL_OW 12
2808: PPUSH
2809: CALL_OW 380
// un = CreateHuman ;
2813: LD_ADDR_VAR 0 3
2817: PUSH
2818: CALL_OW 44
2822: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2823: LD_VAR 0 3
2827: PPUSH
2828: LD_INT 3
2830: PPUSH
2831: LD_INT 0
2833: PPUSH
2834: CALL_OW 49
// end ;
2838: GO 2753
2840: POP
2841: POP
// for i = 1 to 6 do
2842: LD_ADDR_VAR 0 2
2846: PUSH
2847: DOUBLE
2848: LD_INT 1
2850: DEC
2851: ST_TO_ADDR
2852: LD_INT 6
2854: PUSH
2855: FOR_TO
2856: IFFALSE 2942
// begin uc_side = 3 ;
2858: LD_ADDR_OWVAR 20
2862: PUSH
2863: LD_INT 3
2865: ST_TO_ADDR
// uc_nation = 3 ;
2866: LD_ADDR_OWVAR 21
2870: PUSH
2871: LD_INT 3
2873: ST_TO_ADDR
// hc_gallery =  ;
2874: LD_ADDR_OWVAR 33
2878: PUSH
2879: LD_STRING 
2881: ST_TO_ADDR
// hc_name =  ;
2882: LD_ADDR_OWVAR 26
2886: PUSH
2887: LD_STRING 
2889: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 2
2895: PPUSH
2896: LD_EXP 36
2900: PPUSH
2901: LD_EXP 37
2905: PPUSH
2906: CALL_OW 12
2910: PPUSH
2911: CALL_OW 380
// un = CreateHuman ;
2915: LD_ADDR_VAR 0 3
2919: PUSH
2920: CALL_OW 44
2924: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2925: LD_VAR 0 3
2929: PPUSH
2930: LD_INT 3
2932: PPUSH
2933: LD_INT 0
2935: PPUSH
2936: CALL_OW 49
// end ;
2940: GO 2855
2942: POP
2943: POP
// for i = 1 to 6 do
2944: LD_ADDR_VAR 0 2
2948: PUSH
2949: DOUBLE
2950: LD_INT 1
2952: DEC
2953: ST_TO_ADDR
2954: LD_INT 6
2956: PUSH
2957: FOR_TO
2958: IFFALSE 3044
// begin uc_side = 3 ;
2960: LD_ADDR_OWVAR 20
2964: PUSH
2965: LD_INT 3
2967: ST_TO_ADDR
// uc_nation = 3 ;
2968: LD_ADDR_OWVAR 21
2972: PUSH
2973: LD_INT 3
2975: ST_TO_ADDR
// hc_gallery =  ;
2976: LD_ADDR_OWVAR 33
2980: PUSH
2981: LD_STRING 
2983: ST_TO_ADDR
// hc_name =  ;
2984: LD_ADDR_OWVAR 26
2988: PUSH
2989: LD_STRING 
2991: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2992: LD_INT 0
2994: PPUSH
2995: LD_INT 3
2997: PPUSH
2998: LD_EXP 36
3002: PPUSH
3003: LD_EXP 37
3007: PPUSH
3008: CALL_OW 12
3012: PPUSH
3013: CALL_OW 380
// un = CreateHuman ;
3017: LD_ADDR_VAR 0 3
3021: PUSH
3022: CALL_OW 44
3026: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3027: LD_VAR 0 3
3031: PPUSH
3032: LD_INT 3
3034: PPUSH
3035: LD_INT 0
3037: PPUSH
3038: CALL_OW 49
// end ;
3042: GO 2957
3044: POP
3045: POP
// for i = 1 to 4 do
3046: LD_ADDR_VAR 0 2
3050: PUSH
3051: DOUBLE
3052: LD_INT 1
3054: DEC
3055: ST_TO_ADDR
3056: LD_INT 4
3058: PUSH
3059: FOR_TO
3060: IFFALSE 3146
// begin uc_side = 3 ;
3062: LD_ADDR_OWVAR 20
3066: PUSH
3067: LD_INT 3
3069: ST_TO_ADDR
// uc_nation = 3 ;
3070: LD_ADDR_OWVAR 21
3074: PUSH
3075: LD_INT 3
3077: ST_TO_ADDR
// hc_gallery =  ;
3078: LD_ADDR_OWVAR 33
3082: PUSH
3083: LD_STRING 
3085: ST_TO_ADDR
// hc_name =  ;
3086: LD_ADDR_OWVAR 26
3090: PUSH
3091: LD_STRING 
3093: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3094: LD_INT 0
3096: PPUSH
3097: LD_INT 4
3099: PPUSH
3100: LD_EXP 36
3104: PPUSH
3105: LD_EXP 37
3109: PPUSH
3110: CALL_OW 12
3114: PPUSH
3115: CALL_OW 380
// un = CreateHuman ;
3119: LD_ADDR_VAR 0 3
3123: PUSH
3124: CALL_OW 44
3128: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3129: LD_VAR 0 3
3133: PPUSH
3134: LD_INT 3
3136: PPUSH
3137: LD_INT 0
3139: PPUSH
3140: CALL_OW 49
// end ;
3144: GO 3059
3146: POP
3147: POP
// end ; end_of_file
3148: LD_VAR 0 1
3152: RET
// export function PrepareArabianCommander ; begin
3153: LD_INT 0
3155: PPUSH
// uc_side = 2 ;
3156: LD_ADDR_OWVAR 20
3160: PUSH
3161: LD_INT 2
3163: ST_TO_ADDR
// uc_nation = 2 ;
3164: LD_ADDR_OWVAR 21
3168: PUSH
3169: LD_INT 2
3171: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3172: LD_ADDR_EXP 26
3176: PUSH
3177: LD_STRING Dietrich
3179: PPUSH
3180: CALL_OW 25
3184: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3185: LD_EXP 26
3189: PPUSH
3190: LD_INT 4
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// end ;
3200: LD_VAR 0 1
3204: RET
// export function PrepareArabian ; var i , un , veh ; begin
3205: LD_INT 0
3207: PPUSH
3208: PPUSH
3209: PPUSH
3210: PPUSH
// uc_side := 2 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 2
3218: ST_TO_ADDR
// uc_nation := 2 ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 2
3226: ST_TO_ADDR
// if not Ahmed then
3227: LD_EXP 27
3231: NOT
3232: IFFALSE 3300
// begin InitHc ;
3234: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3238: LD_INT 1
3240: PPUSH
3241: LD_INT 1
3243: PPUSH
3244: LD_EXP 36
3248: PPUSH
3249: LD_EXP 37
3253: PUSH
3254: LD_INT 1
3256: PLUS
3257: PPUSH
3258: CALL_OW 12
3262: PPUSH
3263: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3267: LD_ADDR_OWVAR 26
3271: PUSH
3272: LD_STRING Ahmed Abbasid
3274: ST_TO_ADDR
// Ahmed := CreateHuman ;
3275: LD_ADDR_EXP 27
3279: PUSH
3280: CALL_OW 44
3284: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3285: LD_EXP 27
3289: PPUSH
3290: LD_INT 4
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 49
// end ; for i = 1 to 3 do
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_INT 3
3312: PUSH
3313: FOR_TO
3314: IFFALSE 3400
// begin uc_side = 2 ;
3316: LD_ADDR_OWVAR 20
3320: PUSH
3321: LD_INT 2
3323: ST_TO_ADDR
// uc_nation = 2 ;
3324: LD_ADDR_OWVAR 21
3328: PUSH
3329: LD_INT 2
3331: ST_TO_ADDR
// hc_gallery =  ;
3332: LD_ADDR_OWVAR 33
3336: PUSH
3337: LD_STRING 
3339: ST_TO_ADDR
// hc_name =  ;
3340: LD_ADDR_OWVAR 26
3344: PUSH
3345: LD_STRING 
3347: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3348: LD_INT 0
3350: PPUSH
3351: LD_INT 1
3353: PPUSH
3354: LD_EXP 36
3358: PPUSH
3359: LD_EXP 37
3363: PPUSH
3364: CALL_OW 12
3368: PPUSH
3369: CALL_OW 380
// un = CreateHuman ;
3373: LD_ADDR_VAR 0 3
3377: PUSH
3378: CALL_OW 44
3382: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3383: LD_VAR 0 3
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: LD_INT 0
3393: PPUSH
3394: CALL_OW 49
// end ;
3398: GO 3313
3400: POP
3401: POP
// for i = 1 to 6 do
3402: LD_ADDR_VAR 0 2
3406: PUSH
3407: DOUBLE
3408: LD_INT 1
3410: DEC
3411: ST_TO_ADDR
3412: LD_INT 6
3414: PUSH
3415: FOR_TO
3416: IFFALSE 3502
// begin uc_side = 2 ;
3418: LD_ADDR_OWVAR 20
3422: PUSH
3423: LD_INT 2
3425: ST_TO_ADDR
// uc_nation = 2 ;
3426: LD_ADDR_OWVAR 21
3430: PUSH
3431: LD_INT 2
3433: ST_TO_ADDR
// hc_gallery =  ;
3434: LD_ADDR_OWVAR 33
3438: PUSH
3439: LD_STRING 
3441: ST_TO_ADDR
// hc_name =  ;
3442: LD_ADDR_OWVAR 26
3446: PUSH
3447: LD_STRING 
3449: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3450: LD_INT 0
3452: PPUSH
3453: LD_INT 2
3455: PPUSH
3456: LD_EXP 36
3460: PPUSH
3461: LD_EXP 37
3465: PPUSH
3466: CALL_OW 12
3470: PPUSH
3471: CALL_OW 380
// un = CreateHuman ;
3475: LD_ADDR_VAR 0 3
3479: PUSH
3480: CALL_OW 44
3484: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3485: LD_VAR 0 3
3489: PPUSH
3490: LD_INT 4
3492: PPUSH
3493: LD_INT 0
3495: PPUSH
3496: CALL_OW 49
// end ;
3500: GO 3415
3502: POP
3503: POP
// for i = 1 to 6 do
3504: LD_ADDR_VAR 0 2
3508: PUSH
3509: DOUBLE
3510: LD_INT 1
3512: DEC
3513: ST_TO_ADDR
3514: LD_INT 6
3516: PUSH
3517: FOR_TO
3518: IFFALSE 3604
// begin uc_side = 2 ;
3520: LD_ADDR_OWVAR 20
3524: PUSH
3525: LD_INT 2
3527: ST_TO_ADDR
// uc_nation = 2 ;
3528: LD_ADDR_OWVAR 21
3532: PUSH
3533: LD_INT 2
3535: ST_TO_ADDR
// hc_gallery =  ;
3536: LD_ADDR_OWVAR 33
3540: PUSH
3541: LD_STRING 
3543: ST_TO_ADDR
// hc_name =  ;
3544: LD_ADDR_OWVAR 26
3548: PUSH
3549: LD_STRING 
3551: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3552: LD_INT 0
3554: PPUSH
3555: LD_INT 1
3557: PPUSH
3558: LD_EXP 36
3562: PPUSH
3563: LD_EXP 37
3567: PPUSH
3568: CALL_OW 12
3572: PPUSH
3573: CALL_OW 380
// un = CreateHuman ;
3577: LD_ADDR_VAR 0 3
3581: PUSH
3582: CALL_OW 44
3586: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3587: LD_VAR 0 3
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_INT 0
3597: PPUSH
3598: CALL_OW 49
// end ;
3602: GO 3517
3604: POP
3605: POP
// for i = 1 to 4 do
3606: LD_ADDR_VAR 0 2
3610: PUSH
3611: DOUBLE
3612: LD_INT 1
3614: DEC
3615: ST_TO_ADDR
3616: LD_INT 4
3618: PUSH
3619: FOR_TO
3620: IFFALSE 3706
// begin uc_side = 2 ;
3622: LD_ADDR_OWVAR 20
3626: PUSH
3627: LD_INT 2
3629: ST_TO_ADDR
// uc_nation = 2 ;
3630: LD_ADDR_OWVAR 21
3634: PUSH
3635: LD_INT 2
3637: ST_TO_ADDR
// hc_gallery =  ;
3638: LD_ADDR_OWVAR 33
3642: PUSH
3643: LD_STRING 
3645: ST_TO_ADDR
// hc_name =  ;
3646: LD_ADDR_OWVAR 26
3650: PUSH
3651: LD_STRING 
3653: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3654: LD_INT 0
3656: PPUSH
3657: LD_INT 4
3659: PPUSH
3660: LD_EXP 36
3664: PPUSH
3665: LD_EXP 37
3669: PPUSH
3670: CALL_OW 12
3674: PPUSH
3675: CALL_OW 380
// un = CreateHuman ;
3679: LD_ADDR_VAR 0 3
3683: PUSH
3684: CALL_OW 44
3688: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3689: LD_VAR 0 3
3693: PPUSH
3694: LD_INT 4
3696: PPUSH
3697: LD_INT 0
3699: PPUSH
3700: CALL_OW 49
// end ;
3704: GO 3619
3706: POP
3707: POP
// for i = 1 to 2 do
3708: LD_ADDR_VAR 0 2
3712: PUSH
3713: DOUBLE
3714: LD_INT 1
3716: DEC
3717: ST_TO_ADDR
3718: LD_INT 2
3720: PUSH
3721: FOR_TO
3722: IFFALSE 3852
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3724: LD_ADDR_VAR 0 4
3728: PUSH
3729: LD_INT 22
3731: PUSH
3732: LD_INT 2
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: PUSH
3739: LD_INT 21
3741: PUSH
3742: LD_INT 2
3744: PUSH
3745: EMPTY
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 58
3751: PUSH
3752: EMPTY
3753: LIST
3754: PUSH
3755: EMPTY
3756: LIST
3757: LIST
3758: LIST
3759: PPUSH
3760: CALL_OW 69
3764: ST_TO_ADDR
// uc_side = 2 ;
3765: LD_ADDR_OWVAR 20
3769: PUSH
3770: LD_INT 2
3772: ST_TO_ADDR
// uc_nation = 2 ;
3773: LD_ADDR_OWVAR 21
3777: PUSH
3778: LD_INT 2
3780: ST_TO_ADDR
// hc_gallery =  ;
3781: LD_ADDR_OWVAR 33
3785: PUSH
3786: LD_STRING 
3788: ST_TO_ADDR
// hc_name =  ;
3789: LD_ADDR_OWVAR 26
3793: PUSH
3794: LD_STRING 
3796: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3797: LD_INT 0
3799: PPUSH
3800: LD_INT 3
3802: PPUSH
3803: LD_EXP 36
3807: PPUSH
3808: LD_EXP 37
3812: PPUSH
3813: CALL_OW 12
3817: PPUSH
3818: CALL_OW 380
// un = CreateHuman ;
3822: LD_ADDR_VAR 0 3
3826: PUSH
3827: CALL_OW 44
3831: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3832: LD_VAR 0 3
3836: PPUSH
3837: LD_VAR 0 4
3841: PUSH
3842: LD_INT 1
3844: ARRAY
3845: PPUSH
3846: CALL_OW 52
// end ;
3850: GO 3721
3852: POP
3853: POP
// end ;
3854: LD_VAR 0 1
3858: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3859: LD_INT 0
3861: PPUSH
3862: PPUSH
3863: PPUSH
3864: PPUSH
3865: PPUSH
3866: PPUSH
// for i := 1 to 2 do
3867: LD_ADDR_VAR 0 2
3871: PUSH
3872: DOUBLE
3873: LD_INT 1
3875: DEC
3876: ST_TO_ADDR
3877: LD_INT 2
3879: PUSH
3880: FOR_TO
3881: IFFALSE 4007
// begin uc_side = 5 ;
3883: LD_ADDR_OWVAR 20
3887: PUSH
3888: LD_INT 5
3890: ST_TO_ADDR
// uc_nation = 2 ;
3891: LD_ADDR_OWVAR 21
3895: PUSH
3896: LD_INT 2
3898: ST_TO_ADDR
// vc_chassis := 31 ;
3899: LD_ADDR_OWVAR 37
3903: PUSH
3904: LD_INT 31
3906: ST_TO_ADDR
// vc_control := control_rider ;
3907: LD_ADDR_OWVAR 38
3911: PUSH
3912: LD_INT 4
3914: ST_TO_ADDR
// animal := CreateVehicle ;
3915: LD_ADDR_VAR 0 3
3919: PUSH
3920: CALL_OW 45
3924: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3925: LD_VAR 0 3
3929: PPUSH
3930: LD_INT 7
3932: PPUSH
3933: LD_INT 0
3935: PPUSH
3936: CALL_OW 49
// hc_gallery =  ;
3940: LD_ADDR_OWVAR 33
3944: PUSH
3945: LD_STRING 
3947: ST_TO_ADDR
// hc_name =  ;
3948: LD_ADDR_OWVAR 26
3952: PUSH
3953: LD_STRING 
3955: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3956: LD_INT 0
3958: PPUSH
3959: LD_INT 11
3961: PPUSH
3962: LD_EXP 36
3966: PPUSH
3967: LD_EXP 37
3971: PPUSH
3972: CALL_OW 12
3976: PPUSH
3977: CALL_OW 380
// un = CreateHuman ;
3981: LD_ADDR_VAR 0 4
3985: PUSH
3986: CALL_OW 44
3990: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3991: LD_VAR 0 4
3995: PPUSH
3996: LD_VAR 0 3
4000: PPUSH
4001: CALL_OW 52
// end ;
4005: GO 3880
4007: POP
4008: POP
// repeat wait ( 0 0$1 ) ;
4009: LD_INT 35
4011: PPUSH
4012: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4016: LD_ADDR_VAR 0 5
4020: PUSH
4021: LD_INT 22
4023: PUSH
4024: LD_INT 1
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: PPUSH
4031: CALL_OW 69
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: CALL_OW 74
4045: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4046: LD_ADDR_VAR 0 6
4050: PUSH
4051: LD_INT 22
4053: PUSH
4054: LD_INT 1
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 2
4063: PUSH
4064: LD_INT 59
4066: PUSH
4067: EMPTY
4068: LIST
4069: PUSH
4070: LD_INT 21
4072: PUSH
4073: LD_INT 1
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PUSH
4080: LD_INT 21
4082: PUSH
4083: LD_INT 2
4085: PUSH
4086: EMPTY
4087: LIST
4088: LIST
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: PUSH
4100: EMPTY
4101: LIST
4102: PPUSH
4103: CALL_OW 69
4107: PPUSH
4108: LD_VAR 0 2
4112: PPUSH
4113: CALL_OW 74
4117: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4118: LD_ADDR_VAR 0 2
4122: PUSH
4123: LD_INT 22
4125: PUSH
4126: LD_INT 5
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 25
4135: PUSH
4136: LD_INT 11
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PPUSH
4147: CALL_OW 69
4151: PUSH
4152: FOR_IN
4153: IFFALSE 4223
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4155: LD_VAR 0 2
4159: PPUSH
4160: LD_VAR 0 5
4164: PPUSH
4165: CALL_OW 296
4169: PUSH
4170: LD_INT 8
4172: PLUS
4173: PUSH
4174: LD_VAR 0 2
4178: PPUSH
4179: LD_VAR 0 6
4183: PPUSH
4184: CALL_OW 296
4188: LESS
4189: IFFALSE 4207
// ComAttackUnit ( i , target1 ) else
4191: LD_VAR 0 2
4195: PPUSH
4196: LD_VAR 0 5
4200: PPUSH
4201: CALL_OW 115
4205: GO 4221
// ComAttackUnit ( i , target2 ) ;
4207: LD_VAR 0 2
4211: PPUSH
4212: LD_VAR 0 6
4216: PPUSH
4217: CALL_OW 115
// end ;
4221: GO 4152
4223: POP
4224: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4225: LD_INT 22
4227: PUSH
4228: LD_INT 5
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 25
4237: PUSH
4238: LD_INT 11
4240: PUSH
4241: EMPTY
4242: LIST
4243: LIST
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PPUSH
4249: CALL_OW 69
4253: PUSH
4254: LD_INT 0
4256: EQUAL
4257: PUSH
4258: LD_INT 22
4260: PUSH
4261: LD_INT 1
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: PPUSH
4268: CALL_OW 69
4272: PUSH
4273: LD_INT 0
4275: EQUAL
4276: OR
4277: IFFALSE 4009
// end ; end_of_file
4279: LD_VAR 0 1
4283: RET
// every 1 do
4284: GO 4286
4286: DISABLE
// begin InGameOn ;
4287: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4291: LD_INT 1
4293: PPUSH
4294: LD_INT 19
4296: PPUSH
4297: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4301: LD_EXP 11
4305: PPUSH
4306: CALL_OW 87
// wait ( 0 0$3 ) ;
4310: LD_INT 105
4312: PPUSH
4313: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4317: LD_EXP 1
4321: PPUSH
4322: CALL_OW 310
4326: PPUSH
4327: CALL_OW 85
// Wait ( 0 0$1 ) ;
4331: LD_INT 35
4333: PPUSH
4334: CALL_OW 67
// if IsOk ( Gary ) then
4338: LD_EXP 10
4342: PPUSH
4343: CALL_OW 302
4347: IFFALSE 4385
// begin Say ( Gary , D2-Gary-1 ) ;
4349: LD_EXP 10
4353: PPUSH
4354: LD_STRING D2-Gary-1
4356: PPUSH
4357: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4361: LD_EXP 1
4365: PPUSH
4366: LD_STRING D2-JMM-1
4368: PPUSH
4369: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4373: LD_EXP 10
4377: PPUSH
4378: LD_STRING D2-Gary-2
4380: PPUSH
4381: CALL_OW 88
// end ; InGameOff ;
4385: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4389: LD_STRING M1
4391: PPUSH
4392: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4396: LD_INT 38
4398: PPUSH
4399: LD_INT 1
4401: PPUSH
4402: LD_INT 100
4404: PPUSH
4405: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4409: LD_INT 47
4411: PPUSH
4412: LD_INT 1
4414: PPUSH
4415: LD_INT 50
4417: PPUSH
4418: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4422: LD_INT 47
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 50
4430: PPUSH
4431: CALL_OW 291
// SaveForQuickRestart ;
4435: CALL_OW 22
// end ;
4439: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4440: LD_EXP 1
4444: PPUSH
4445: LD_EXP 11
4449: PPUSH
4450: CALL_OW 296
4454: PUSH
4455: LD_INT 15
4457: LESS
4458: IFFALSE 4924
4460: GO 4462
4462: DISABLE
// begin InGameOn ;
4463: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4467: LD_EXP 1
4471: PPUSH
4472: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4476: LD_EXP 1
4480: PPUSH
4481: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4485: LD_EXP 1
4489: PPUSH
4490: LD_EXP 11
4494: PPUSH
4495: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4506: LD_EXP 11
4510: PUSH
4511: LD_EXP 13
4515: PUSH
4516: LD_EXP 12
4520: PUSH
4521: LD_EXP 14
4525: PUSH
4526: LD_EXP 8
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: LIST
4535: LIST
4536: LIST
4537: PPUSH
4538: LD_EXP 1
4542: PPUSH
4543: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4547: LD_EXP 1
4551: PPUSH
4552: LD_EXP 11
4556: PPUSH
4557: CALL_OW 296
4561: PUSH
4562: LD_INT 5
4564: LESS
4565: IFFALSE 4499
// ComTurnUnit ( JMM , Simms ) ;
4567: LD_EXP 1
4571: PPUSH
4572: LD_EXP 11
4576: PPUSH
4577: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4581: LD_EXP 11
4585: PUSH
4586: LD_EXP 13
4590: PUSH
4591: LD_EXP 12
4595: PUSH
4596: LD_EXP 14
4600: PUSH
4601: EMPTY
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PPUSH
4607: LD_EXP 1
4611: PPUSH
4612: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4616: LD_EXP 1
4620: PUSH
4621: LD_EXP 11
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PPUSH
4630: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4634: LD_EXP 11
4638: PPUSH
4639: LD_STRING D2a-Sim-1
4641: PPUSH
4642: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4646: LD_EXP 1
4650: PPUSH
4651: LD_STRING D2a-JMM-1
4653: PPUSH
4654: CALL_OW 88
// if IsOk ( Joan ) then
4658: LD_EXP 13
4662: PPUSH
4663: CALL_OW 302
4667: IFFALSE 4719
// begin ComTurnUnit ( JMM , Joan ) ;
4669: LD_EXP 1
4673: PPUSH
4674: LD_EXP 13
4678: PPUSH
4679: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4683: LD_EXP 13
4687: PPUSH
4688: LD_STRING D2b-Joan-1
4690: PPUSH
4691: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4695: LD_EXP 1
4699: PPUSH
4700: LD_STRING D2b-JMM-1
4702: PPUSH
4703: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4707: LD_EXP 13
4711: PPUSH
4712: LD_STRING D2b-Joan-2
4714: PPUSH
4715: CALL_OW 88
// end ; if IsOk ( Denis ) then
4719: LD_EXP 12
4723: PPUSH
4724: CALL_OW 302
4728: IFFALSE 4756
// begin ComTurnUnit ( JMM , Denis ) ;
4730: LD_EXP 1
4734: PPUSH
4735: LD_EXP 12
4739: PPUSH
4740: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4744: LD_EXP 12
4748: PPUSH
4749: LD_STRING D2c-Den-1
4751: PPUSH
4752: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4756: LD_EXP 8
4760: PPUSH
4761: CALL_OW 302
4765: IFFALSE 4834
// begin repeat wait ( 0 0$1 ) ;
4767: LD_INT 35
4769: PPUSH
4770: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4774: LD_EXP 8
4778: PPUSH
4779: LD_EXP 1
4783: PPUSH
4784: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4788: LD_EXP 1
4792: PPUSH
4793: LD_EXP 8
4797: PPUSH
4798: CALL_OW 296
4802: PUSH
4803: LD_INT 5
4805: LESS
4806: IFFALSE 4767
// ComTurnUnit ( JMM , Kikuchi ) ;
4808: LD_EXP 1
4812: PPUSH
4813: LD_EXP 8
4817: PPUSH
4818: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4822: LD_EXP 8
4826: PPUSH
4827: LD_STRING D3b-Yam-1
4829: PPUSH
4830: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4834: LD_EXP 14
4838: PPUSH
4839: CALL_OW 302
4843: IFFALSE 4883
// begin ComTurnUnit ( JMM , Khatam ) ;
4845: LD_EXP 1
4849: PPUSH
4850: LD_EXP 14
4854: PPUSH
4855: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4859: LD_EXP 1
4863: PPUSH
4864: LD_STRING D2c-JMM-1
4866: PPUSH
4867: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4871: LD_EXP 14
4875: PPUSH
4876: LD_STRING D2c-Khat-1
4878: PPUSH
4879: CALL_OW 88
// end ; InGameOff ;
4883: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4887: LD_INT 22
4889: PUSH
4890: LD_INT 4
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PPUSH
4897: CALL_OW 69
4901: PPUSH
4902: LD_INT 1
4904: PPUSH
4905: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4909: LD_STRING M1a
4911: PPUSH
4912: CALL_OW 337
// joinEpsilon = 1 ;
4916: LD_ADDR_EXP 29
4920: PUSH
4921: LD_INT 1
4923: ST_TO_ADDR
// end ;
4924: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4925: LD_INT 38
4927: PPUSH
4928: LD_INT 1
4930: PPUSH
4931: CALL_OW 289
4935: PUSH
4936: LD_INT 0
4938: EQUAL
4939: PUSH
4940: LD_INT 47
4942: PPUSH
4943: LD_INT 1
4945: PPUSH
4946: CALL_OW 289
4950: PUSH
4951: LD_INT 0
4953: EQUAL
4954: AND
4955: PUSH
4956: LD_INT 47
4958: PPUSH
4959: LD_INT 2
4961: PPUSH
4962: CALL_OW 289
4966: PUSH
4967: LD_INT 0
4969: EQUAL
4970: AND
4971: IFFALSE 4996
4973: GO 4975
4975: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4976: LD_INT 38
4978: PUSH
4979: LD_INT 47
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PPUSH
4986: LD_INT 62
4988: PPUSH
4989: LD_INT 6
4991: PPUSH
4992: CALL_OW 111
4996: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4997: LD_EXP 61
5001: PUSH
5002: LD_INT 1
5004: EQUAL
5005: IFFALSE 6137
5007: GO 5009
5009: DISABLE
5010: LD_INT 0
5012: PPUSH
5013: PPUSH
5014: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5015: LD_ADDR_VAR 0 1
5019: PUSH
5020: LD_INT 22
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 4
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 26
5042: PUSH
5043: LD_INT 1
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: LIST
5054: PPUSH
5055: CALL_OW 69
5059: PUSH
5060: LD_EXP 1
5064: PUSH
5065: LD_EXP 2
5069: PUSH
5070: LD_EXP 3
5074: PUSH
5075: LD_EXP 4
5079: PUSH
5080: LD_EXP 5
5084: PUSH
5085: LD_EXP 6
5089: PUSH
5090: LD_EXP 7
5094: PUSH
5095: LD_EXP 8
5099: PUSH
5100: LD_EXP 9
5104: PUSH
5105: LD_EXP 10
5109: PUSH
5110: LD_EXP 11
5114: PUSH
5115: LD_EXP 12
5119: PUSH
5120: LD_EXP 13
5124: PUSH
5125: LD_EXP 14
5129: PUSH
5130: LD_EXP 15
5134: PUSH
5135: LD_EXP 16
5139: PUSH
5140: LD_EXP 17
5144: PUSH
5145: LD_EXP 18
5149: PUSH
5150: LD_EXP 19
5154: PUSH
5155: LD_EXP 24
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: LIST
5173: LIST
5174: LIST
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: DIFF
5182: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5183: LD_ADDR_VAR 0 2
5187: PUSH
5188: LD_INT 22
5190: PUSH
5191: LD_INT 1
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: LD_INT 26
5200: PUSH
5201: LD_INT 1
5203: PUSH
5204: EMPTY
5205: LIST
5206: LIST
5207: PUSH
5208: LD_INT 2
5210: PUSH
5211: LD_INT 25
5213: PUSH
5214: LD_INT 1
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 25
5223: PUSH
5224: LD_INT 2
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 25
5233: PUSH
5234: LD_INT 3
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: LIST
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 69
5256: PUSH
5257: LD_EXP 1
5261: PUSH
5262: LD_EXP 2
5266: PUSH
5267: LD_EXP 3
5271: PUSH
5272: LD_EXP 4
5276: PUSH
5277: LD_EXP 5
5281: PUSH
5282: LD_EXP 6
5286: PUSH
5287: LD_EXP 7
5291: PUSH
5292: LD_EXP 8
5296: PUSH
5297: LD_EXP 9
5301: PUSH
5302: LD_EXP 10
5306: PUSH
5307: LD_EXP 11
5311: PUSH
5312: LD_EXP 12
5316: PUSH
5317: LD_EXP 13
5321: PUSH
5322: LD_EXP 14
5326: PUSH
5327: LD_EXP 15
5331: PUSH
5332: LD_EXP 16
5336: PUSH
5337: LD_EXP 17
5341: PUSH
5342: LD_EXP 18
5346: PUSH
5347: LD_EXP 19
5351: PUSH
5352: LD_EXP 24
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: LIST
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: LIST
5367: LIST
5368: LIST
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: DIFF
5379: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5380: LD_EXP 10
5384: PUSH
5385: LD_VAR 0 2
5389: OR
5390: PUSH
5391: LD_EXP 17
5395: PUSH
5396: LD_VAR 0 1
5400: OR
5401: AND
5402: IFFALSE 5621
// begin DialogueOn ;
5404: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5408: LD_EXP 17
5412: PPUSH
5413: CALL_OW 302
5417: IFFALSE 5433
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5419: LD_EXP 17
5423: PPUSH
5424: LD_STRING D3-Sci1-1
5426: PPUSH
5427: CALL_OW 88
5431: GO 5445
// Say ( tmp1 , D3-Sci1-1 ) ;
5433: LD_VAR 0 1
5437: PPUSH
5438: LD_STRING D3-Sci1-1
5440: PPUSH
5441: CALL_OW 88
// if IsOk ( Gary ) then
5445: LD_EXP 10
5449: PPUSH
5450: CALL_OW 302
5454: IFFALSE 5470
// Say ( Gary , D3-Gary-1 ) else
5456: LD_EXP 10
5460: PPUSH
5461: LD_STRING D3-Gary-1
5463: PPUSH
5464: CALL_OW 88
5468: GO 5482
// Say ( tmp2 , D3-Gary-1 ) ;
5470: LD_VAR 0 2
5474: PPUSH
5475: LD_STRING D3-Gary-1
5477: PPUSH
5478: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5482: LD_EXP 17
5486: PPUSH
5487: CALL_OW 302
5491: IFFALSE 5507
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5493: LD_EXP 17
5497: PPUSH
5498: LD_STRING D3-Sci1-2
5500: PPUSH
5501: CALL_OW 88
5505: GO 5519
// Say ( tmp1 , D3-Sci1-2 ) ;
5507: LD_VAR 0 1
5511: PPUSH
5512: LD_STRING D3-Sci1-2
5514: PPUSH
5515: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5519: LD_EXP 1
5523: PPUSH
5524: LD_STRING D3-JMM-2
5526: PPUSH
5527: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5531: LD_EXP 17
5535: PPUSH
5536: CALL_OW 302
5540: IFFALSE 5556
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5542: LD_EXP 17
5546: PPUSH
5547: LD_STRING D3-Sci1-3
5549: PPUSH
5550: CALL_OW 88
5554: GO 5568
// Say ( tmp1 , D3-Sci1-3 ) ;
5556: LD_VAR 0 1
5560: PPUSH
5561: LD_STRING D3-Sci1-3
5563: PPUSH
5564: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D3-JMM-3
5575: PPUSH
5576: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5580: LD_EXP 17
5584: PPUSH
5585: CALL_OW 302
5589: IFFALSE 5605
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5591: LD_EXP 17
5595: PPUSH
5596: LD_STRING D3-Sci1-4
5598: PPUSH
5599: CALL_OW 88
5603: GO 5617
// Say ( tmp1 , D3-Sci1-4 ) ;
5605: LD_VAR 0 1
5609: PPUSH
5610: LD_STRING D3-Sci1-4
5612: PPUSH
5613: CALL_OW 88
// DialogueOff ;
5617: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5621: LD_INT 12
5623: PPUSH
5624: LD_INT 1
5626: PPUSH
5627: LD_INT 1
5629: PPUSH
5630: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5634: LD_INT 32
5636: PPUSH
5637: LD_INT 1
5639: PPUSH
5640: LD_INT 1
5642: PPUSH
5643: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5647: LD_INT 12
5649: PPUSH
5650: LD_INT 1
5652: PPUSH
5653: LD_INT 1
5655: PPUSH
5656: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5660: LD_INT 33
5662: PPUSH
5663: LD_INT 1
5665: PPUSH
5666: LD_INT 1
5668: PPUSH
5669: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5673: LD_STRING M2
5675: PPUSH
5676: CALL_OW 337
// wait ( 3 3$0 ) ;
5680: LD_INT 6300
5682: PPUSH
5683: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5687: LD_INT 35
5689: PPUSH
5690: CALL_OW 67
// until not InBattle ( 1 ) ;
5694: LD_INT 1
5696: PPUSH
5697: CALL_OW 463
5701: NOT
5702: IFFALSE 5687
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5704: LD_EXP 11
5708: PPUSH
5709: CALL_OW 302
5713: PUSH
5714: LD_EXP 17
5718: PPUSH
5719: CALL_OW 302
5723: AND
5724: IFFALSE 5893
// begin DialogueOn ;
5726: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5730: LD_EXP 11
5734: PPUSH
5735: LD_STRING D3a-Sim-1
5737: PPUSH
5738: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5742: LD_EXP 17
5746: PPUSH
5747: LD_STRING D3a-Sci1-1
5749: PPUSH
5750: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5754: LD_EXP 11
5758: PPUSH
5759: LD_STRING D3a-Sim-2
5761: PPUSH
5762: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5766: LD_EXP 17
5770: PPUSH
5771: LD_STRING D3a-Sci1-2
5773: PPUSH
5774: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5778: LD_EXP 11
5782: PPUSH
5783: LD_STRING D3a-Sim-3
5785: PPUSH
5786: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5790: LD_EXP 17
5794: PPUSH
5795: LD_STRING D3a-Sci1-3
5797: PPUSH
5798: CALL_OW 88
// if IsOK ( Joan ) then
5802: LD_EXP 13
5806: PPUSH
5807: CALL_OW 302
5811: IFFALSE 5827
// Say ( Simms , D3a-Sim-4 ) else
5813: LD_EXP 11
5817: PPUSH
5818: LD_STRING D3a-Sim-4
5820: PPUSH
5821: CALL_OW 88
5825: GO 5839
// Say ( Simms , D3a-Sim-4a ) ;
5827: LD_EXP 11
5831: PPUSH
5832: LD_STRING D3a-Sim-4a
5834: PPUSH
5835: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5839: LD_EXP 17
5843: PPUSH
5844: LD_STRING D3a-Sci1-4
5846: PPUSH
5847: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5851: LD_EXP 11
5855: PPUSH
5856: LD_STRING D3a-Sim-5
5858: PPUSH
5859: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5863: LD_EXP 17
5867: PPUSH
5868: LD_STRING D3a-Sci1-5
5870: PPUSH
5871: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5875: LD_EXP 11
5879: PPUSH
5880: LD_STRING D3a-Sim-6
5882: PPUSH
5883: CALL_OW 88
// DialogueOff ;
5887: CALL_OW 7
// end else
5891: GO 6137
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5893: LD_ADDR_VAR 0 3
5897: PUSH
5898: LD_INT 22
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PUSH
5908: LD_INT 25
5910: PUSH
5911: LD_INT 4
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PPUSH
5922: CALL_OW 69
5926: PUSH
5927: LD_EXP 11
5931: PUSH
5932: LD_EXP 14
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: DIFF
5941: ST_TO_ADDR
// if tmp3 > 0 then
5942: LD_VAR 0 3
5946: PUSH
5947: LD_INT 0
5949: GREATER
5950: IFFALSE 6137
// begin DialogueOn ;
5952: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5956: LD_EXP 11
5960: PPUSH
5961: LD_STRING D3a-Sim-1
5963: PPUSH
5964: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5968: LD_VAR 0 3
5972: PUSH
5973: LD_INT 1
5975: ARRAY
5976: PPUSH
5977: LD_STRING D3a-Sci1-1
5979: PPUSH
5980: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5984: LD_EXP 11
5988: PPUSH
5989: LD_STRING D3a-Sim-2
5991: PPUSH
5992: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5996: LD_VAR 0 3
6000: PUSH
6001: LD_INT 1
6003: ARRAY
6004: PPUSH
6005: LD_STRING D3a-Sci1-2
6007: PPUSH
6008: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6012: LD_EXP 11
6016: PPUSH
6017: LD_STRING D3a-Sim-3
6019: PPUSH
6020: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6024: LD_VAR 0 3
6028: PUSH
6029: LD_INT 1
6031: ARRAY
6032: PPUSH
6033: LD_STRING D3a-Sci1-3
6035: PPUSH
6036: CALL_OW 88
// if IsOK ( Joan ) then
6040: LD_EXP 13
6044: PPUSH
6045: CALL_OW 302
6049: IFFALSE 6065
// Say ( Simms , D3a-Sim-4 ) else
6051: LD_EXP 11
6055: PPUSH
6056: LD_STRING D3a-Sim-4
6058: PPUSH
6059: CALL_OW 88
6063: GO 6077
// Say ( Simms , D3a-Sim-4a ) ;
6065: LD_EXP 11
6069: PPUSH
6070: LD_STRING D3a-Sim-4a
6072: PPUSH
6073: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6077: LD_VAR 0 3
6081: PUSH
6082: LD_INT 1
6084: ARRAY
6085: PPUSH
6086: LD_STRING D3a-Sci1-4
6088: PPUSH
6089: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6093: LD_EXP 11
6097: PPUSH
6098: LD_STRING D3a-Sim-5
6100: PPUSH
6101: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6105: LD_VAR 0 3
6109: PUSH
6110: LD_INT 1
6112: ARRAY
6113: PPUSH
6114: LD_STRING D3a-Sci1-5
6116: PPUSH
6117: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6121: LD_EXP 11
6125: PPUSH
6126: LD_STRING D3a-Sim-6
6128: PPUSH
6129: CALL_OW 88
// DialogueOff ;
6133: CALL_OW 7
// end ; end ; end ;
6137: PPOPN 3
6139: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6140: LD_EXP 29
6144: PUSH
6145: LD_INT 1
6147: EQUAL
6148: IFFALSE 6468
6150: GO 6152
6152: DISABLE
6153: LD_INT 0
6155: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6156: LD_EXP 18
6160: PPUSH
6161: LD_STRING D4-FSol1-1
6163: PPUSH
6164: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6168: LD_STRING M3
6170: PPUSH
6171: CALL_OW 337
// PrepareRussians ;
6175: CALL 2688 0 0
// rnd = Rand ( 1 , 100 ) ;
6179: LD_ADDR_VAR 0 1
6183: PUSH
6184: LD_INT 1
6186: PPUSH
6187: LD_INT 100
6189: PPUSH
6190: CALL_OW 12
6194: ST_TO_ADDR
// if difficulty = 1 then
6195: LD_OWVAR 67
6199: PUSH
6200: LD_INT 1
6202: EQUAL
6203: IFFALSE 6286
// begin if rnd > 0 and rnd < 51 then
6205: LD_VAR 0 1
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: PUSH
6214: LD_VAR 0 1
6218: PUSH
6219: LD_INT 51
6221: LESS
6222: AND
6223: IFFALSE 6232
// BuildRussianBase ( 2 ) ;
6225: LD_INT 2
6227: PPUSH
6228: CALL 10236 0 1
// if rnd > 50 and rnd < 81 then
6232: LD_VAR 0 1
6236: PUSH
6237: LD_INT 50
6239: GREATER
6240: PUSH
6241: LD_VAR 0 1
6245: PUSH
6246: LD_INT 81
6248: LESS
6249: AND
6250: IFFALSE 6259
// BuildRussianBase ( 1 ) ;
6252: LD_INT 1
6254: PPUSH
6255: CALL 10236 0 1
// if rnd > 80 and rnd < 101 then
6259: LD_VAR 0 1
6263: PUSH
6264: LD_INT 80
6266: GREATER
6267: PUSH
6268: LD_VAR 0 1
6272: PUSH
6273: LD_INT 101
6275: LESS
6276: AND
6277: IFFALSE 6286
// BuildRussianBase ( 3 ) ;
6279: LD_INT 3
6281: PPUSH
6282: CALL 10236 0 1
// end ; if difficulty = 2 then
6286: LD_OWVAR 67
6290: PUSH
6291: LD_INT 2
6293: EQUAL
6294: IFFALSE 6377
// begin if rnd > 0 and rnd < 61 then
6296: LD_VAR 0 1
6300: PUSH
6301: LD_INT 0
6303: GREATER
6304: PUSH
6305: LD_VAR 0 1
6309: PUSH
6310: LD_INT 61
6312: LESS
6313: AND
6314: IFFALSE 6323
// BuildRussianBase ( 2 ) ;
6316: LD_INT 2
6318: PPUSH
6319: CALL 10236 0 1
// if rnd > 60 and rnd < 81 then
6323: LD_VAR 0 1
6327: PUSH
6328: LD_INT 60
6330: GREATER
6331: PUSH
6332: LD_VAR 0 1
6336: PUSH
6337: LD_INT 81
6339: LESS
6340: AND
6341: IFFALSE 6350
// BuildRussianBase ( 1 ) ;
6343: LD_INT 1
6345: PPUSH
6346: CALL 10236 0 1
// if rnd > 80 and rnd < 101 then
6350: LD_VAR 0 1
6354: PUSH
6355: LD_INT 80
6357: GREATER
6358: PUSH
6359: LD_VAR 0 1
6363: PUSH
6364: LD_INT 101
6366: LESS
6367: AND
6368: IFFALSE 6377
// BuildRussianBase ( 3 ) ;
6370: LD_INT 3
6372: PPUSH
6373: CALL 10236 0 1
// end ; if difficulty = 3 then
6377: LD_OWVAR 67
6381: PUSH
6382: LD_INT 3
6384: EQUAL
6385: IFFALSE 6468
// begin if rnd > 0 and rnd < 71 then
6387: LD_VAR 0 1
6391: PUSH
6392: LD_INT 0
6394: GREATER
6395: PUSH
6396: LD_VAR 0 1
6400: PUSH
6401: LD_INT 71
6403: LESS
6404: AND
6405: IFFALSE 6414
// BuildRussianBase ( 3 ) ;
6407: LD_INT 3
6409: PPUSH
6410: CALL 10236 0 1
// if rnd > 70 and rnd < 81 then
6414: LD_VAR 0 1
6418: PUSH
6419: LD_INT 70
6421: GREATER
6422: PUSH
6423: LD_VAR 0 1
6427: PUSH
6428: LD_INT 81
6430: LESS
6431: AND
6432: IFFALSE 6441
// BuildRussianBase ( 2 ) ;
6434: LD_INT 2
6436: PPUSH
6437: CALL 10236 0 1
// if rnd > 80 and rnd < 101 then
6441: LD_VAR 0 1
6445: PUSH
6446: LD_INT 80
6448: GREATER
6449: PUSH
6450: LD_VAR 0 1
6454: PUSH
6455: LD_INT 101
6457: LESS
6458: AND
6459: IFFALSE 6468
// BuildRussianBase ( 1 ) ;
6461: LD_INT 1
6463: PPUSH
6464: CALL 10236 0 1
// end ; end ;
6468: PPOPN 1
6470: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6471: LD_INT 54
6473: PPUSH
6474: LD_INT 1
6476: PPUSH
6477: CALL_OW 321
6481: PUSH
6482: LD_INT 2
6484: EQUAL
6485: PUSH
6486: LD_INT 21
6488: PPUSH
6489: LD_INT 1
6491: PPUSH
6492: CALL_OW 321
6496: PUSH
6497: LD_INT 2
6499: EQUAL
6500: OR
6501: PUSH
6502: LD_INT 22
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 321
6512: PUSH
6513: LD_INT 2
6515: EQUAL
6516: OR
6517: IFFALSE 6829
6519: GO 6521
6521: DISABLE
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6526: LD_EXP 17
6530: PPUSH
6531: CALL_OW 302
6535: IFFALSE 6549
// tmp := DeltaDoctor else
6537: LD_ADDR_VAR 0 2
6541: PUSH
6542: LD_EXP 17
6546: ST_TO_ADDR
6547: GO 6559
// tmp := Denis ;
6549: LD_ADDR_VAR 0 2
6553: PUSH
6554: LD_EXP 12
6558: ST_TO_ADDR
// if tmp then
6559: LD_VAR 0 2
6563: IFFALSE 6657
// begin DialogueOn ;
6565: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6569: LD_EXP 1
6573: PPUSH
6574: LD_STRING D6-JMM-1
6576: PPUSH
6577: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6581: LD_VAR 0 2
6585: PPUSH
6586: LD_STRING D6-Sci1-1
6588: PPUSH
6589: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6593: LD_EXP 1
6597: PPUSH
6598: LD_STRING D6-JMM-2
6600: PPUSH
6601: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6605: LD_VAR 0 2
6609: PPUSH
6610: LD_STRING D6-Sci1-2
6612: PPUSH
6613: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6617: LD_EXP 1
6621: PPUSH
6622: LD_STRING D6-JMM-3
6624: PPUSH
6625: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_STRING D6-Sci1-3
6636: PPUSH
6637: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6641: LD_EXP 1
6645: PPUSH
6646: LD_STRING D6-JMM-4
6648: PPUSH
6649: CALL_OW 88
// DialogueOff ;
6653: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6657: LD_INT 1050
6659: PPUSH
6660: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6664: LD_EXP 49
6668: PUSH
6669: LD_INT 0
6671: EQUAL
6672: PUSH
6673: LD_EXP 14
6677: PPUSH
6678: CALL_OW 302
6682: AND
6683: IFFALSE 6741
// begin DialogueOn ;
6685: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6689: LD_EXP 27
6693: PPUSH
6694: LD_STRING D5-Ar1-1
6696: PPUSH
6697: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6701: LD_EXP 26
6705: PPUSH
6706: LD_STRING D5-Diet-1
6708: PPUSH
6709: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6713: LD_EXP 27
6717: PPUSH
6718: LD_STRING D5-Ar1-2
6720: PPUSH
6721: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6725: LD_EXP 26
6729: PPUSH
6730: LD_STRING D5-Diet-2
6732: PPUSH
6733: CALL_OW 88
// DialogueOff ;
6737: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6741: LD_INT 2100
6743: PUSH
6744: LD_INT 3150
6746: PUSH
6747: LD_INT 4200
6749: PUSH
6750: LD_INT 5250
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: LD_INT 1
6761: PPUSH
6762: LD_INT 4
6764: PPUSH
6765: CALL_OW 12
6769: ARRAY
6770: PPUSH
6771: CALL_OW 67
// if arabianTrait = 0 then
6775: LD_EXP 49
6779: PUSH
6780: LD_INT 0
6782: EQUAL
6783: IFFALSE 6829
// begin arabianTrait = 1 ;
6785: LD_ADDR_EXP 49
6789: PUSH
6790: LD_INT 1
6792: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6793: LD_INT 2
6795: PPUSH
6796: LD_INT 3
6798: PPUSH
6799: LD_INT 1
6801: PPUSH
6802: LD_INT 1
6804: PPUSH
6805: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6809: LD_INT 2
6811: PPUSH
6812: LD_INT 6
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: LD_INT 1
6820: PPUSH
6821: CALL_OW 80
// PrepareArabianTrait ;
6825: CALL 6832 0 0
// end ; end ;
6829: PPOPN 2
6831: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6832: LD_INT 0
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6838: LD_ADDR_VAR 0 2
6842: PUSH
6843: LD_INT 22
6845: PUSH
6846: LD_INT 2
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 25
6855: PUSH
6856: LD_INT 4
6858: PUSH
6859: EMPTY
6860: LIST
6861: LIST
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PPUSH
6867: CALL_OW 69
6871: PUSH
6872: FOR_IN
6873: IFFALSE 6886
// ComExitBuilding ( i ) ;
6875: LD_VAR 0 2
6879: PPUSH
6880: CALL_OW 122
6884: GO 6872
6886: POP
6887: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6888: LD_ADDR_VAR 0 2
6892: PUSH
6893: LD_INT 22
6895: PUSH
6896: LD_INT 2
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: LD_INT 25
6905: PUSH
6906: LD_INT 3
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 69
6921: PUSH
6922: FOR_IN
6923: IFFALSE 6936
// ComExitVehicle ( i ) ;
6925: LD_VAR 0 2
6929: PPUSH
6930: CALL_OW 121
6934: GO 6922
6936: POP
6937: POP
// SetClass ( Dietrich , 8 ) ;
6938: LD_EXP 26
6942: PPUSH
6943: LD_INT 8
6945: PPUSH
6946: CALL_OW 336
// wait ( 0 0$3 ) ;
6950: LD_INT 105
6952: PPUSH
6953: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6957: LD_INT 76
6959: PPUSH
6960: LD_INT 19
6962: PPUSH
6963: CALL_OW 84
// DialogueOn ;
6967: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6971: LD_INT 22
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 26
6983: PUSH
6984: LD_INT 1
6986: PUSH
6987: EMPTY
6988: LIST
6989: LIST
6990: PUSH
6991: LD_INT 2
6993: PUSH
6994: LD_INT 25
6996: PUSH
6997: LD_INT 1
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 25
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 25
7016: PUSH
7017: LD_INT 3
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 25
7026: PUSH
7027: LD_INT 4
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 25
7036: PUSH
7037: LD_INT 5
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: LIST
7056: PPUSH
7057: CALL_OW 69
7061: PPUSH
7062: LD_STRING D8-Sol1-1
7064: PPUSH
7065: LD_STRING D8-Sol1-1
7067: PPUSH
7068: CALL 9567 0 3
// if IsOK ( DeltaDoctor ) then
7072: LD_EXP 17
7076: PPUSH
7077: CALL_OW 302
7081: IFFALSE 7097
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7083: LD_EXP 17
7087: PPUSH
7088: LD_STRING D8-Sci1-1
7090: PPUSH
7091: CALL_OW 88
7095: GO 7198
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 26
7109: PUSH
7110: LD_INT 1
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 2
7119: PUSH
7120: LD_INT 25
7122: PUSH
7123: LD_INT 1
7125: PUSH
7126: EMPTY
7127: LIST
7128: LIST
7129: PUSH
7130: LD_INT 25
7132: PUSH
7133: LD_INT 2
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_INT 25
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PUSH
7150: LD_INT 25
7152: PUSH
7153: LD_INT 4
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 25
7162: PUSH
7163: LD_INT 5
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: PPUSH
7183: CALL_OW 69
7187: PPUSH
7188: LD_STRING D8-Sol1-1
7190: PPUSH
7191: LD_STRING D8-Sol1-1
7193: PPUSH
7194: CALL 9567 0 3
// Say ( JMM , D8-JMM-1 ) ;
7198: LD_EXP 1
7202: PPUSH
7203: LD_STRING D8-JMM-1
7205: PPUSH
7206: CALL_OW 88
// DialogueOff ;
7210: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7214: LD_INT 2
7216: PPUSH
7217: LD_INT 2
7219: PPUSH
7220: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7224: LD_INT 1
7226: PPUSH
7227: LD_INT 2
7229: PPUSH
7230: LD_INT 2
7232: PPUSH
7233: LD_INT 1
7235: PPUSH
7236: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7240: LD_INT 3
7242: PPUSH
7243: LD_INT 2
7245: PPUSH
7246: LD_INT 1
7248: PPUSH
7249: LD_INT 1
7251: PPUSH
7252: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7256: LD_STRING M4
7258: PPUSH
7259: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7263: LD_ADDR_VAR 0 2
7267: PUSH
7268: LD_INT 22
7270: PUSH
7271: LD_INT 2
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: LD_INT 21
7280: PUSH
7281: LD_INT 1
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 2
7290: PUSH
7291: LD_INT 25
7293: PUSH
7294: LD_INT 1
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 25
7303: PUSH
7304: LD_INT 8
7306: PUSH
7307: EMPTY
7308: LIST
7309: LIST
7310: PUSH
7311: LD_INT 25
7313: PUSH
7314: LD_INT 15
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: LIST
7331: PPUSH
7332: CALL_OW 69
7336: PUSH
7337: FOR_IN
7338: IFFALSE 7478
// begin ComExitBuilding ( i ) ;
7340: LD_VAR 0 2
7344: PPUSH
7345: CALL_OW 122
// wait ( 0 0$1 ) ;
7349: LD_INT 35
7351: PPUSH
7352: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7356: LD_VAR 0 2
7360: PPUSH
7361: LD_INT 77
7363: PPUSH
7364: LD_INT 10
7366: PPUSH
7367: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7371: LD_VAR 0 2
7375: PPUSH
7376: LD_INT 82
7378: PPUSH
7379: LD_INT 5
7381: PPUSH
7382: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7386: LD_VAR 0 2
7390: PPUSH
7391: LD_INT 95
7393: PPUSH
7394: LD_INT 12
7396: PPUSH
7397: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7401: LD_VAR 0 2
7405: PPUSH
7406: LD_INT 102
7408: PPUSH
7409: LD_INT 11
7411: PPUSH
7412: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7416: LD_VAR 0 2
7420: PPUSH
7421: LD_INT 116
7423: PPUSH
7424: LD_INT 15
7426: PPUSH
7427: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7431: LD_VAR 0 2
7435: PPUSH
7436: LD_INT 140
7438: PPUSH
7439: LD_INT 25
7441: PPUSH
7442: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7446: LD_VAR 0 2
7450: PPUSH
7451: LD_INT 160
7453: PPUSH
7454: LD_INT 56
7456: PPUSH
7457: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7461: LD_VAR 0 2
7465: PPUSH
7466: LD_INT 189
7468: PPUSH
7469: LD_INT 79
7471: PPUSH
7472: CALL_OW 174
// end ;
7476: GO 7337
7478: POP
7479: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7480: LD_ADDR_VAR 0 2
7484: PUSH
7485: LD_INT 22
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 21
7497: PUSH
7498: LD_INT 1
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 2
7507: PUSH
7508: LD_INT 25
7510: PUSH
7511: LD_INT 2
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 25
7520: PUSH
7521: LD_INT 3
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 25
7530: PUSH
7531: LD_INT 4
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 25
7540: PUSH
7541: LD_INT 16
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: LIST
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: LIST
7559: PPUSH
7560: CALL_OW 69
7564: PUSH
7565: FOR_IN
7566: IFFALSE 7706
// begin ComExitBuilding ( i ) ;
7568: LD_VAR 0 2
7572: PPUSH
7573: CALL_OW 122
// wait ( 0 0$1 ) ;
7577: LD_INT 35
7579: PPUSH
7580: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7584: LD_VAR 0 2
7588: PPUSH
7589: LD_INT 77
7591: PPUSH
7592: LD_INT 10
7594: PPUSH
7595: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7599: LD_VAR 0 2
7603: PPUSH
7604: LD_INT 82
7606: PPUSH
7607: LD_INT 5
7609: PPUSH
7610: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7614: LD_VAR 0 2
7618: PPUSH
7619: LD_INT 95
7621: PPUSH
7622: LD_INT 12
7624: PPUSH
7625: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7629: LD_VAR 0 2
7633: PPUSH
7634: LD_INT 102
7636: PPUSH
7637: LD_INT 11
7639: PPUSH
7640: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7644: LD_VAR 0 2
7648: PPUSH
7649: LD_INT 116
7651: PPUSH
7652: LD_INT 15
7654: PPUSH
7655: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7659: LD_VAR 0 2
7663: PPUSH
7664: LD_INT 140
7666: PPUSH
7667: LD_INT 25
7669: PPUSH
7670: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7674: LD_VAR 0 2
7678: PPUSH
7679: LD_INT 160
7681: PPUSH
7682: LD_INT 56
7684: PPUSH
7685: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7689: LD_VAR 0 2
7693: PPUSH
7694: LD_INT 189
7696: PPUSH
7697: LD_INT 79
7699: PPUSH
7700: CALL_OW 171
// end ;
7704: GO 7565
7706: POP
7707: POP
// arabianAttackersAI = 1 ;
7708: LD_ADDR_EXP 46
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7716: LD_INT 350
7718: PPUSH
7719: CALL_OW 67
// if IsOk ( Gary ) then
7723: LD_EXP 10
7727: PPUSH
7728: CALL_OW 302
7732: IFFALSE 7746
// Say ( Gary , D8a-Gary-1 ) ;
7734: LD_EXP 10
7738: PPUSH
7739: LD_STRING D8a-Gary-1
7741: PPUSH
7742: CALL_OW 88
// wait ( 0 0$5 ) ;
7746: LD_INT 175
7748: PPUSH
7749: CALL_OW 67
// if IsOK ( Khatam ) then
7753: LD_EXP 14
7757: PPUSH
7758: CALL_OW 302
7762: IFFALSE 8298
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7764: LD_ADDR_VAR 0 3
7768: PUSH
7769: LD_INT 22
7771: PUSH
7772: LD_INT 1
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_INT 2
7781: PUSH
7782: LD_INT 25
7784: PUSH
7785: LD_INT 1
7787: PUSH
7788: EMPTY
7789: LIST
7790: LIST
7791: PUSH
7792: LD_INT 25
7794: PUSH
7795: LD_INT 2
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 25
7804: PUSH
7805: LD_INT 3
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 25
7814: PUSH
7815: LD_INT 4
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 5
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 25
7834: PUSH
7835: LD_INT 8
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: PPUSH
7855: CALL_OW 69
7859: PUSH
7860: LD_EXP 1
7864: PUSH
7865: LD_EXP 2
7869: PUSH
7870: LD_EXP 3
7874: PUSH
7875: LD_EXP 4
7879: PUSH
7880: LD_EXP 5
7884: PUSH
7885: LD_EXP 6
7889: PUSH
7890: LD_EXP 7
7894: PUSH
7895: LD_EXP 8
7899: PUSH
7900: LD_EXP 9
7904: PUSH
7905: LD_EXP 10
7909: PUSH
7910: LD_EXP 11
7914: PUSH
7915: LD_EXP 12
7919: PUSH
7920: LD_EXP 13
7924: PUSH
7925: LD_EXP 14
7929: PUSH
7930: LD_EXP 15
7934: PUSH
7935: LD_EXP 16
7939: PUSH
7940: LD_EXP 17
7944: PUSH
7945: LD_EXP 19
7949: PUSH
7950: LD_EXP 24
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: DIFF
7976: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7977: LD_EXP 14
7981: PPUSH
7982: LD_INT 8
7984: PPUSH
7985: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7989: LD_EXP 14
7993: PPUSH
7994: CALL_OW 122
// wait ( 0 0$1 ) ;
7998: LD_INT 35
8000: PPUSH
8001: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8005: LD_EXP 14
8009: PPUSH
8010: CALL_OW 121
// wait ( 0 0$1 ) ;
8014: LD_INT 35
8016: PPUSH
8017: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8021: LD_EXP 14
8025: PPUSH
8026: LD_INT 7
8028: PPUSH
8029: CALL_OW 113
// if not tmp then
8033: LD_VAR 0 3
8037: NOT
8038: IFFALSE 8042
// exit ;
8040: GO 8298
// DialogueOn ;
8042: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8046: LD_VAR 0 3
8050: PUSH
8051: LD_INT 1
8053: ARRAY
8054: PPUSH
8055: CALL_OW 258
8059: PUSH
8060: LD_INT 1
8062: EQUAL
8063: IFFALSE 8083
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8065: LD_VAR 0 3
8069: PUSH
8070: LD_INT 1
8072: ARRAY
8073: PPUSH
8074: LD_STRING D8b-Sol1-1
8076: PPUSH
8077: CALL_OW 88
8081: GO 8099
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8083: LD_VAR 0 3
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: LD_STRING D8b-FSol1-1
8094: PPUSH
8095: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8099: LD_EXP 14
8103: PPUSH
8104: LD_STRING D8b-Khat-1
8106: PPUSH
8107: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8111: LD_VAR 0 3
8115: PUSH
8116: LD_INT 1
8118: ARRAY
8119: PPUSH
8120: CALL_OW 258
8124: PUSH
8125: LD_INT 1
8127: EQUAL
8128: IFFALSE 8148
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8130: LD_VAR 0 3
8134: PUSH
8135: LD_INT 1
8137: ARRAY
8138: PPUSH
8139: LD_STRING D8b-Sol1-2
8141: PPUSH
8142: CALL_OW 88
8146: GO 8164
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8148: LD_VAR 0 3
8152: PUSH
8153: LD_INT 1
8155: ARRAY
8156: PPUSH
8157: LD_STRING D8b-FSol1-2
8159: PPUSH
8160: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8164: LD_EXP 14
8168: PPUSH
8169: LD_STRING D8b-Khat-2
8171: PPUSH
8172: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8176: LD_VAR 0 3
8180: PUSH
8181: LD_INT 1
8183: ARRAY
8184: PPUSH
8185: CALL_OW 258
8189: PUSH
8190: LD_INT 1
8192: EQUAL
8193: IFFALSE 8213
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 1
8202: ARRAY
8203: PPUSH
8204: LD_STRING D8b-Sol1-3
8206: PPUSH
8207: CALL_OW 88
8211: GO 8229
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 1
8220: ARRAY
8221: PPUSH
8222: LD_STRING D8b-FSol1-3
8224: PPUSH
8225: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8229: LD_EXP 14
8233: PPUSH
8234: LD_STRING D8b-Khat-3
8236: PPUSH
8237: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 1
8248: ARRAY
8249: PPUSH
8250: CALL_OW 258
8254: PUSH
8255: LD_INT 1
8257: EQUAL
8258: IFFALSE 8278
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 1
8267: ARRAY
8268: PPUSH
8269: LD_STRING D8b-Sol1-4
8271: PPUSH
8272: CALL_OW 88
8276: GO 8294
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 1
8285: ARRAY
8286: PPUSH
8287: LD_STRING D8b-FSol1-4
8289: PPUSH
8290: CALL_OW 88
// DialogueOff ;
8294: CALL_OW 7
// end ; end ;
8298: LD_VAR 0 1
8302: RET
// every 0 0$1 do var i ;
8303: GO 8305
8305: DISABLE
8306: LD_INT 0
8308: PPUSH
// begin enable ;
8309: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8310: LD_ADDR_VAR 0 1
8314: PUSH
8315: LD_INT 7
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 70
8332: PUSH
8333: FOR_IN
8334: IFFALSE 8400
// begin if GetClass ( i ) = 4 then
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 257
8345: PUSH
8346: LD_INT 4
8348: EQUAL
8349: IFFALSE 8361
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8351: LD_INT 1
8353: PPUSH
8354: LD_STRING 10_ScientistsEscape_1
8356: PPUSH
8357: CALL_OW 39
// if i = Dietrich then
8361: LD_VAR 0 1
8365: PUSH
8366: LD_EXP 26
8370: EQUAL
8371: IFFALSE 8381
// GensherStatus = 1 ;
8373: LD_ADDR_EXP 51
8377: PUSH
8378: LD_INT 1
8380: ST_TO_ADDR
// arabianEscape = 1 ;
8381: LD_ADDR_EXP 47
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// RemoveUnit ( i ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 64
// end ;
8398: GO 8333
8400: POP
8401: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8402: LD_EXP 14
8406: PPUSH
8407: LD_INT 7
8409: PPUSH
8410: CALL_OW 308
8414: IFFALSE 8433
// begin KhatamStatus = 1 ;
8416: LD_ADDR_EXP 52
8420: PUSH
8421: LD_INT 1
8423: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8424: LD_EXP 14
8428: PPUSH
8429: CALL_OW 64
// end ; end ;
8433: PPOPN 1
8435: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8436: LD_EXP 14
8440: PPUSH
8441: CALL_OW 301
8445: IFFALSE 8458
8447: GO 8449
8449: DISABLE
// KhatamStatus = 0 ;
8450: LD_ADDR_EXP 52
8454: PUSH
8455: LD_INT 0
8457: ST_TO_ADDR
8458: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8459: LD_INT 22
8461: PUSH
8462: LD_INT 2
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 21
8471: PUSH
8472: LD_INT 1
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PPUSH
8483: CALL_OW 69
8487: PUSH
8488: LD_INT 0
8490: EQUAL
8491: PUSH
8492: LD_INT 22
8494: PUSH
8495: LD_INT 4
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: PUSH
8502: LD_INT 21
8504: PUSH
8505: LD_INT 1
8507: PUSH
8508: EMPTY
8509: LIST
8510: LIST
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: PPUSH
8516: CALL_OW 69
8520: PUSH
8521: LD_INT 0
8523: EQUAL
8524: AND
8525: IFFALSE 8538
8527: GO 8529
8529: DISABLE
// arabianDefeated = 1 ;
8530: LD_ADDR_EXP 48
8534: PUSH
8535: LD_INT 1
8537: ST_TO_ADDR
8538: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8539: LD_INT 54
8541: PPUSH
8542: LD_INT 1
8544: PPUSH
8545: CALL_OW 321
8549: PUSH
8550: LD_INT 2
8552: EQUAL
8553: PUSH
8554: LD_INT 55
8556: PPUSH
8557: LD_INT 1
8559: PPUSH
8560: CALL_OW 321
8564: PUSH
8565: LD_INT 2
8567: EQUAL
8568: AND
8569: PUSH
8570: LD_INT 21
8572: PPUSH
8573: LD_INT 1
8575: PPUSH
8576: CALL_OW 321
8580: PUSH
8581: LD_INT 2
8583: EQUAL
8584: AND
8585: PUSH
8586: LD_INT 22
8588: PPUSH
8589: LD_INT 1
8591: PPUSH
8592: CALL_OW 321
8596: PUSH
8597: LD_INT 2
8599: EQUAL
8600: AND
8601: PUSH
8602: LD_INT 12
8604: PPUSH
8605: LD_INT 1
8607: PPUSH
8608: CALL_OW 321
8612: PUSH
8613: LD_INT 2
8615: EQUAL
8616: AND
8617: PUSH
8618: LD_INT 32
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: CALL_OW 321
8628: PUSH
8629: LD_INT 2
8631: EQUAL
8632: AND
8633: PUSH
8634: LD_EXP 59
8638: PUSH
8639: LD_INT 0
8641: EQUAL
8642: AND
8643: PUSH
8644: LD_EXP 49
8648: PUSH
8649: LD_INT 0
8651: EQUAL
8652: AND
8653: PUSH
8654: LD_OWVAR 1
8658: PUSH
8659: LD_INT 31500
8661: GREATEREQUAL
8662: AND
8663: IFFALSE 8680
8665: GO 8667
8667: DISABLE
// begin arabianTrait = 1 ;
8668: LD_ADDR_EXP 49
8672: PUSH
8673: LD_INT 1
8675: ST_TO_ADDR
// PrepareArabianTrait ;
8676: CALL 6832 0 0
// end ;
8680: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8681: LD_EXP 29
8685: PUSH
8686: LD_STRING 02_mikhailStatus_1
8688: PPUSH
8689: LD_INT 0
8691: PPUSH
8692: CALL_OW 30
8696: PUSH
8697: LD_INT 1
8699: EQUAL
8700: AND
8701: PUSH
8702: LD_INT 22
8704: PUSH
8705: LD_INT 5
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PPUSH
8712: CALL_OW 69
8716: PUSH
8717: LD_INT 0
8719: EQUAL
8720: AND
8721: PUSH
8722: LD_INT 22
8724: PUSH
8725: LD_INT 2
8727: PUSH
8728: EMPTY
8729: LIST
8730: LIST
8731: PPUSH
8732: CALL_OW 69
8736: PUSH
8737: LD_INT 0
8739: EQUAL
8740: PUSH
8741: LD_EXP 49
8745: PUSH
8746: LD_INT 0
8748: EQUAL
8749: OR
8750: AND
8751: IFFALSE 8760
8753: GO 8755
8755: DISABLE
// PrepareCornell ;
8756: CALL 2530 0 0
8760: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8761: LD_INT 22
8763: PUSH
8764: LD_INT 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 69
8775: PPUSH
8776: LD_EXP 19
8780: PPUSH
8781: CALL_OW 74
8785: PPUSH
8786: LD_EXP 19
8790: PPUSH
8791: CALL_OW 296
8795: PUSH
8796: LD_INT 9
8798: LESS
8799: IFFALSE 9020
8801: GO 8803
8803: DISABLE
// begin InGameOn ;
8804: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8808: LD_EXP 19
8812: PPUSH
8813: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8817: LD_EXP 19
8821: PPUSH
8822: LD_STRING D7-Corn-1
8824: PPUSH
8825: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8829: LD_INT 22
8831: PUSH
8832: LD_INT 1
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PUSH
8839: LD_INT 2
8841: PUSH
8842: LD_INT 25
8844: PUSH
8845: LD_INT 1
8847: PUSH
8848: EMPTY
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 25
8854: PUSH
8855: LD_INT 2
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 25
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 25
8874: PUSH
8875: LD_INT 4
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 25
8884: PUSH
8885: LD_INT 5
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: EMPTY
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: LIST
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PPUSH
8904: CALL_OW 69
8908: PPUSH
8909: LD_STRING D7-Sol1-1
8911: PPUSH
8912: LD_STRING D7-FSol1-1
8914: PPUSH
8915: CALL 9567 0 3
// CenterNowOnUnits ( Cornell ) ;
8919: LD_EXP 19
8923: PPUSH
8924: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8928: LD_EXP 19
8932: PPUSH
8933: LD_STRING D7-Corn-2
8935: PPUSH
8936: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8940: LD_EXP 1
8944: PPUSH
8945: LD_STRING D7-JMM-2
8947: PPUSH
8948: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8952: LD_EXP 19
8956: PPUSH
8957: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8961: LD_EXP 19
8965: PPUSH
8966: LD_STRING D7-Corn-3
8968: PPUSH
8969: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8973: LD_EXP 19
8977: PPUSH
8978: LD_INT 250
8980: PPUSH
8981: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
8985: LD_EXP 19
8989: PPUSH
8990: LD_INT 1
8992: PPUSH
8993: CALL_OW 235
// wait ( 0 0$1 ) ;
8997: LD_INT 35
8999: PPUSH
9000: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9004: LD_EXP 1
9008: PPUSH
9009: LD_STRING D7-JMM-3
9011: PPUSH
9012: CALL_OW 88
// InGameOff ;
9016: CALL_OW 9
// end ;
9020: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9021: LD_EXP 19
9025: PPUSH
9026: CALL_OW 255
9030: PUSH
9031: LD_INT 1
9033: EQUAL
9034: PUSH
9035: LD_EXP 19
9039: PPUSH
9040: CALL_OW 256
9044: PUSH
9045: LD_INT 251
9047: GREATER
9048: AND
9049: IFFALSE 9242
9051: GO 9053
9053: DISABLE
// begin DialogueOn ;
9054: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9058: LD_EXP 1
9062: PPUSH
9063: LD_STRING D7a-JMM-1
9065: PPUSH
9066: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9070: LD_EXP 19
9074: PPUSH
9075: LD_STRING D7a-Corn-1
9077: PPUSH
9078: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9082: LD_EXP 1
9086: PPUSH
9087: LD_STRING D7a-JMM-2
9089: PPUSH
9090: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9094: LD_EXP 19
9098: PPUSH
9099: LD_STRING D7a-Corn-2
9101: PPUSH
9102: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9106: LD_EXP 1
9110: PPUSH
9111: LD_STRING D7a-JMM-3
9113: PPUSH
9114: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9118: LD_EXP 19
9122: PPUSH
9123: LD_STRING D7a-Corn-3
9125: PPUSH
9126: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9130: LD_EXP 1
9134: PPUSH
9135: LD_STRING D7a-JMM-4
9137: PPUSH
9138: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9142: LD_EXP 19
9146: PPUSH
9147: LD_STRING D7a-Corn-4
9149: PPUSH
9150: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9154: LD_EXP 1
9158: PPUSH
9159: LD_STRING D7a-JMM-5
9161: PPUSH
9162: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9166: LD_EXP 19
9170: PPUSH
9171: LD_STRING D7a-Corn-5
9173: PPUSH
9174: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9178: LD_EXP 1
9182: PPUSH
9183: LD_STRING D7a-JMM-6
9185: PPUSH
9186: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9190: LD_EXP 19
9194: PPUSH
9195: LD_STRING D7a-Corn-6
9197: PPUSH
9198: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9202: LD_EXP 1
9206: PPUSH
9207: LD_STRING D7a-JMM-7
9209: PPUSH
9210: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9214: LD_EXP 19
9218: PPUSH
9219: LD_STRING D7a-Corn-7
9221: PPUSH
9222: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9226: LD_EXP 1
9230: PPUSH
9231: LD_STRING D7a-JMM-8
9233: PPUSH
9234: CALL_OW 88
// DialogueOff ;
9238: CALL_OW 7
// end ;
9242: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9243: LD_EXP 58
9247: PUSH
9248: LD_EXP 1
9252: PPUSH
9253: CALL_OW 302
9257: PUSH
9258: LD_EXP 5
9262: PPUSH
9263: CALL_OW 302
9267: OR
9268: AND
9269: IFFALSE 9359
9271: GO 9273
9273: DISABLE
// begin Wait ( 0 0$2 ) ;
9274: LD_INT 70
9276: PPUSH
9277: CALL_OW 67
// DialogueOn ;
9281: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9285: LD_EXP 58
9289: PUSH
9290: LD_INT 1
9292: ARRAY
9293: PPUSH
9294: LD_EXP 58
9298: PUSH
9299: LD_INT 2
9301: ARRAY
9302: PPUSH
9303: CALL_OW 86
// if IsOk ( Cyrus ) then
9307: LD_EXP 5
9311: PPUSH
9312: CALL_OW 302
9316: IFFALSE 9332
// Say ( Cyrus , D10-Cyrus-1 ) else
9318: LD_EXP 5
9322: PPUSH
9323: LD_STRING D10-Cyrus-1
9325: PPUSH
9326: CALL_OW 88
9330: GO 9355
// if IsOk ( JMM ) then
9332: LD_EXP 1
9336: PPUSH
9337: CALL_OW 302
9341: IFFALSE 9355
// Say ( JMM , D10-JMM-1 ) ;
9343: LD_EXP 1
9347: PPUSH
9348: LD_STRING D10-JMM-1
9350: PPUSH
9351: CALL_OW 88
// DialogueOff ;
9355: CALL_OW 7
// end ;
9359: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9360: LD_INT 12
9362: PPUSH
9363: LD_INT 1
9365: PPUSH
9366: CALL_OW 321
9370: PUSH
9371: LD_INT 2
9373: EQUAL
9374: IFFALSE 9386
9376: GO 9378
9378: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9379: LD_STRING M2b
9381: PPUSH
9382: CALL_OW 337
9386: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9387: LD_INT 32
9389: PPUSH
9390: LD_INT 1
9392: PPUSH
9393: CALL_OW 321
9397: PUSH
9398: LD_INT 2
9400: EQUAL
9401: IFFALSE 9413
9403: GO 9405
9405: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9406: LD_STRING M2c
9408: PPUSH
9409: CALL_OW 337
9413: END
// every 0 0$1 trigger arabianDefeated = 1 do
9414: LD_EXP 48
9418: PUSH
9419: LD_INT 1
9421: EQUAL
9422: IFFALSE 9434
9424: GO 9426
9426: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9427: LD_STRING M4a
9429: PPUSH
9430: CALL_OW 337
9434: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9435: LD_INT 54
9437: PPUSH
9438: LD_INT 1
9440: PPUSH
9441: CALL_OW 321
9445: PUSH
9446: LD_INT 2
9448: EQUAL
9449: PUSH
9450: LD_INT 55
9452: PPUSH
9453: LD_INT 1
9455: PPUSH
9456: CALL_OW 321
9460: PUSH
9461: LD_INT 2
9463: EQUAL
9464: AND
9465: PUSH
9466: LD_INT 21
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: CALL_OW 321
9476: PUSH
9477: LD_INT 2
9479: EQUAL
9480: AND
9481: PUSH
9482: LD_INT 22
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 321
9492: PUSH
9493: LD_INT 2
9495: EQUAL
9496: AND
9497: IFFALSE 9509
9499: GO 9501
9501: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9502: LD_STRING M2a
9504: PPUSH
9505: CALL_OW 337
9509: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9510: LD_INT 0
9512: PPUSH
9513: PPUSH
// if exist_mode then
9514: LD_VAR 0 2
9518: IFFALSE 9537
// unit := CreateCharacter ( ident ) else
9520: LD_ADDR_VAR 0 4
9524: PUSH
9525: LD_VAR 0 1
9529: PPUSH
9530: CALL_OW 34
9534: ST_TO_ADDR
9535: GO 9552
// unit := NewCharacter ( ident ) ;
9537: LD_ADDR_VAR 0 4
9541: PUSH
9542: LD_VAR 0 1
9546: PPUSH
9547: CALL_OW 25
9551: ST_TO_ADDR
// result := unit ;
9552: LD_ADDR_VAR 0 3
9556: PUSH
9557: LD_VAR 0 4
9561: ST_TO_ADDR
// end ;
9562: LD_VAR 0 3
9566: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9567: LD_INT 0
9569: PPUSH
9570: PPUSH
9571: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9572: LD_ADDR_VAR 0 1
9576: PUSH
9577: LD_VAR 0 1
9581: PUSH
9582: LD_EXP 1
9586: PUSH
9587: LD_EXP 2
9591: PUSH
9592: LD_EXP 3
9596: PUSH
9597: LD_EXP 4
9601: PUSH
9602: LD_EXP 5
9606: PUSH
9607: LD_EXP 6
9611: PUSH
9612: LD_EXP 7
9616: PUSH
9617: LD_EXP 8
9621: PUSH
9622: LD_EXP 9
9626: PUSH
9627: LD_EXP 10
9631: PUSH
9632: LD_EXP 11
9636: PUSH
9637: LD_EXP 12
9641: PUSH
9642: LD_EXP 13
9646: PUSH
9647: LD_EXP 14
9651: PUSH
9652: LD_EXP 15
9656: PUSH
9657: LD_EXP 16
9661: PUSH
9662: LD_EXP 17
9666: PUSH
9667: LD_EXP 18
9671: PUSH
9672: LD_EXP 19
9676: PUSH
9677: LD_EXP 24
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: DIFF
9704: ST_TO_ADDR
// if not characters then
9705: LD_VAR 0 1
9709: NOT
9710: IFFALSE 9714
// exit ;
9712: GO 9860
// rnd = rand ( 1 , characters ) ;
9714: LD_ADDR_VAR 0 6
9718: PUSH
9719: LD_INT 1
9721: PPUSH
9722: LD_VAR 0 1
9726: PPUSH
9727: CALL_OW 12
9731: ST_TO_ADDR
// for i = 1 to characters do
9732: LD_ADDR_VAR 0 5
9736: PUSH
9737: DOUBLE
9738: LD_INT 1
9740: DEC
9741: ST_TO_ADDR
9742: LD_VAR 0 1
9746: PUSH
9747: FOR_TO
9748: IFFALSE 9858
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9750: LD_VAR 0 5
9754: PUSH
9755: LD_VAR 0 6
9759: EQUAL
9760: PUSH
9761: LD_VAR 0 1
9765: PUSH
9766: LD_VAR 0 5
9770: ARRAY
9771: PPUSH
9772: CALL_OW 258
9776: PUSH
9777: LD_INT 1
9779: EQUAL
9780: AND
9781: IFFALSE 9803
// Say ( characters [ i ] , dialogMID ) ;
9783: LD_VAR 0 1
9787: PUSH
9788: LD_VAR 0 5
9792: ARRAY
9793: PPUSH
9794: LD_VAR 0 2
9798: PPUSH
9799: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9803: LD_VAR 0 5
9807: PUSH
9808: LD_VAR 0 6
9812: EQUAL
9813: PUSH
9814: LD_VAR 0 1
9818: PUSH
9819: LD_VAR 0 5
9823: ARRAY
9824: PPUSH
9825: CALL_OW 258
9829: PUSH
9830: LD_INT 2
9832: EQUAL
9833: AND
9834: IFFALSE 9856
// Say ( characters [ i ] , dialogFID ) ;
9836: LD_VAR 0 1
9840: PUSH
9841: LD_VAR 0 5
9845: ARRAY
9846: PPUSH
9847: LD_VAR 0 3
9851: PPUSH
9852: CALL_OW 88
// end ;
9856: GO 9747
9858: POP
9859: POP
// end ;
9860: LD_VAR 0 4
9864: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9865: LD_INT 0
9867: PPUSH
9868: PPUSH
// for i in charactersList do
9869: LD_ADDR_VAR 0 4
9873: PUSH
9874: LD_VAR 0 1
9878: PUSH
9879: FOR_IN
9880: IFFALSE 9909
// begin if IsOk ( i ) then
9882: LD_VAR 0 4
9886: PPUSH
9887: CALL_OW 302
9891: IFFALSE 9907
// SaveCharacters ( i , ident ) ;
9893: LD_VAR 0 4
9897: PPUSH
9898: LD_VAR 0 2
9902: PPUSH
9903: CALL_OW 38
// end ;
9907: GO 9879
9909: POP
9910: POP
// end ;
9911: LD_VAR 0 3
9915: RET
// export function PrepareDifficulty ; begin
9916: LD_INT 0
9918: PPUSH
// if difficulty = 1 then
9919: LD_OWVAR 67
9923: PUSH
9924: LD_INT 1
9926: EQUAL
9927: IFFALSE 9971
// begin RuSolMinLevel = 4 ;
9929: LD_ADDR_EXP 36
9933: PUSH
9934: LD_INT 4
9936: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9937: LD_ADDR_EXP 37
9941: PUSH
9942: LD_INT 7
9944: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9945: LD_INT 51
9947: PPUSH
9948: LD_INT 6
9950: PPUSH
9951: LD_INT 2
9953: PPUSH
9954: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9958: LD_INT 51
9960: PPUSH
9961: LD_INT 5
9963: PPUSH
9964: LD_INT 2
9966: PPUSH
9967: CALL_OW 322
// end ; if difficulty = 2 then
9971: LD_OWVAR 67
9975: PUSH
9976: LD_INT 2
9978: EQUAL
9979: IFFALSE 10075
// begin RuSolMinLevel = 5 ;
9981: LD_ADDR_EXP 36
9985: PUSH
9986: LD_INT 5
9988: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9989: LD_ADDR_EXP 37
9993: PUSH
9994: LD_INT 7
9996: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9997: LD_INT 51
9999: PPUSH
10000: LD_INT 6
10002: PPUSH
10003: LD_INT 2
10005: PPUSH
10006: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10010: LD_INT 57
10012: PPUSH
10013: LD_INT 6
10015: PPUSH
10016: LD_INT 2
10018: PPUSH
10019: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10023: LD_INT 63
10025: PPUSH
10026: LD_INT 6
10028: PPUSH
10029: LD_INT 2
10031: PPUSH
10032: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10036: LD_INT 51
10038: PPUSH
10039: LD_INT 5
10041: PPUSH
10042: LD_INT 2
10044: PPUSH
10045: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10049: LD_INT 5
10051: PPUSH
10052: LD_INT 2
10054: PPUSH
10055: LD_INT 2
10057: PPUSH
10058: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10062: LD_INT 5
10064: PPUSH
10065: LD_INT 5
10067: PPUSH
10068: LD_INT 2
10070: PPUSH
10071: CALL_OW 322
// end ; if difficulty = 3 then
10075: LD_OWVAR 67
10079: PUSH
10080: LD_INT 3
10082: EQUAL
10083: IFFALSE 10231
// begin RuSolMinLevel = 6 ;
10085: LD_ADDR_EXP 36
10089: PUSH
10090: LD_INT 6
10092: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10093: LD_ADDR_EXP 37
10097: PUSH
10098: LD_INT 8
10100: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10101: LD_INT 51
10103: PPUSH
10104: LD_INT 6
10106: PPUSH
10107: LD_INT 2
10109: PPUSH
10110: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10114: LD_INT 57
10116: PPUSH
10117: LD_INT 6
10119: PPUSH
10120: LD_INT 2
10122: PPUSH
10123: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10127: LD_INT 52
10129: PPUSH
10130: LD_INT 6
10132: PPUSH
10133: LD_INT 2
10135: PPUSH
10136: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10140: LD_INT 58
10142: PPUSH
10143: LD_INT 6
10145: PPUSH
10146: LD_INT 2
10148: PPUSH
10149: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10153: LD_INT 63
10155: PPUSH
10156: LD_INT 6
10158: PPUSH
10159: LD_INT 2
10161: PPUSH
10162: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10166: LD_INT 64
10168: PPUSH
10169: LD_INT 6
10171: PPUSH
10172: LD_INT 2
10174: PPUSH
10175: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10179: LD_INT 51
10181: PPUSH
10182: LD_INT 5
10184: PPUSH
10185: LD_INT 2
10187: PPUSH
10188: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10192: LD_INT 52
10194: PPUSH
10195: LD_INT 5
10197: PPUSH
10198: LD_INT 2
10200: PPUSH
10201: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10205: LD_INT 66
10207: PPUSH
10208: LD_INT 2
10210: PPUSH
10211: LD_INT 2
10213: PPUSH
10214: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10218: LD_INT 66
10220: PPUSH
10221: LD_INT 5
10223: PPUSH
10224: LD_INT 2
10226: PPUSH
10227: CALL_OW 322
// end ; end ;
10231: LD_VAR 0 1
10235: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10236: LD_INT 0
10238: PPUSH
10239: PPUSH
10240: PPUSH
10241: PPUSH
10242: PPUSH
// case position of 1 :
10243: LD_VAR 0 1
10247: PUSH
10248: LD_INT 1
10250: DOUBLE
10251: EQUAL
10252: IFTRUE 10256
10254: GO 10267
10256: POP
// area := westConv ; 2 :
10257: LD_ADDR_VAR 0 6
10261: PUSH
10262: LD_INT 20
10264: ST_TO_ADDR
10265: GO 10306
10267: LD_INT 2
10269: DOUBLE
10270: EQUAL
10271: IFTRUE 10275
10273: GO 10286
10275: POP
// area := midConv ; 3 :
10276: LD_ADDR_VAR 0 6
10280: PUSH
10281: LD_INT 21
10283: ST_TO_ADDR
10284: GO 10306
10286: LD_INT 3
10288: DOUBLE
10289: EQUAL
10290: IFTRUE 10294
10292: GO 10305
10294: POP
// area := eastConv ; end ;
10295: LD_ADDR_VAR 0 6
10299: PUSH
10300: LD_INT 22
10302: ST_TO_ADDR
10303: GO 10306
10305: POP
// area := AreaToList ( area , 0 ) ;
10306: LD_ADDR_VAR 0 6
10310: PUSH
10311: LD_VAR 0 6
10315: PPUSH
10316: LD_INT 0
10318: PPUSH
10319: CALL_OW 517
10323: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10324: LD_ADDR_VAR 0 3
10328: PUSH
10329: DOUBLE
10330: LD_INT 1
10332: DEC
10333: ST_TO_ADDR
10334: LD_VAR 0 6
10338: PUSH
10339: LD_INT 1
10341: ARRAY
10342: PUSH
10343: FOR_TO
10344: IFFALSE 10425
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10346: LD_VAR 0 6
10350: PUSH
10351: LD_INT 1
10353: ARRAY
10354: PUSH
10355: LD_VAR 0 3
10359: ARRAY
10360: PPUSH
10361: LD_VAR 0 6
10365: PUSH
10366: LD_INT 2
10368: ARRAY
10369: PUSH
10370: LD_VAR 0 3
10374: ARRAY
10375: PPUSH
10376: LD_INT 1
10378: PPUSH
10379: LD_INT 1
10381: PPUSH
10382: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10386: LD_VAR 0 6
10390: PUSH
10391: LD_INT 1
10393: ARRAY
10394: PUSH
10395: LD_VAR 0 3
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 6
10405: PUSH
10406: LD_INT 2
10408: ARRAY
10409: PUSH
10410: LD_VAR 0 3
10414: ARRAY
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: CALL_OW 331
// end ;
10423: GO 10343
10425: POP
10426: POP
// ruPossition = position ;
10427: LD_ADDR_EXP 41
10431: PUSH
10432: LD_VAR 0 1
10436: ST_TO_ADDR
// if position = 1 then
10437: LD_VAR 0 1
10441: PUSH
10442: LD_INT 1
10444: EQUAL
10445: IFFALSE 11193
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10447: LD_ADDR_VAR 0 4
10451: PUSH
10452: LD_INT 22
10454: PUSH
10455: LD_INT 3
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10481: LD_ADDR_VAR 0 5
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: LD_INT 49
10491: PUSH
10492: LD_INT 74
10494: PUSH
10495: LD_INT 3
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 4
10506: PUSH
10507: LD_INT 73
10509: PUSH
10510: LD_INT 88
10512: PUSH
10513: LD_INT 5
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 4
10524: PUSH
10525: LD_INT 56
10527: PUSH
10528: LD_INT 62
10530: PUSH
10531: LD_INT 3
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 29
10542: PUSH
10543: LD_INT 43
10545: PUSH
10546: LD_INT 68
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 30
10560: PUSH
10561: LD_INT 43
10563: PUSH
10564: LD_INT 79
10566: PUSH
10567: LD_INT 5
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 28
10578: PUSH
10579: LD_INT 60
10581: PUSH
10582: LD_INT 75
10584: PUSH
10585: LD_INT 1
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: LD_INT 50
10599: PUSH
10600: LD_INT 87
10602: PUSH
10603: LD_INT 1
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 28
10614: PUSH
10615: LD_INT 45
10617: PUSH
10618: LD_INT 67
10620: PUSH
10621: LD_INT 2
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 17
10632: PUSH
10633: LD_INT 47
10635: PUSH
10636: LD_INT 84
10638: PUSH
10639: LD_INT 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 18
10650: PUSH
10651: LD_INT 46
10653: PUSH
10654: LD_INT 87
10656: PUSH
10657: LD_INT 1
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 28
10668: PUSH
10669: LD_INT 41
10671: PUSH
10672: LD_INT 64
10674: PUSH
10675: LD_INT 5
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 32
10686: PUSH
10687: LD_INT 75
10689: PUSH
10690: LD_INT 76
10692: PUSH
10693: LD_INT 5
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 32
10704: PUSH
10705: LD_INT 77
10707: PUSH
10708: LD_INT 75
10710: PUSH
10711: LD_INT 5
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 32
10722: PUSH
10723: LD_INT 69
10725: PUSH
10726: LD_INT 68
10728: PUSH
10729: LD_INT 3
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 32
10740: PUSH
10741: LD_INT 59
10743: PUSH
10744: LD_INT 96
10746: PUSH
10747: LD_INT 5
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 32
10758: PUSH
10759: LD_INT 56
10761: PUSH
10762: LD_INT 96
10764: PUSH
10765: LD_INT 0
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 32
10776: PUSH
10777: LD_INT 51
10779: PUSH
10780: LD_INT 61
10782: PUSH
10783: LD_INT 3
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 32
10794: PUSH
10795: LD_INT 42
10797: PUSH
10798: LD_INT 60
10800: PUSH
10801: LD_INT 3
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 32
10812: PUSH
10813: LD_INT 36
10815: PUSH
10816: LD_INT 58
10818: PUSH
10819: LD_INT 3
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 32
10830: PUSH
10831: LD_INT 39
10833: PUSH
10834: LD_INT 59
10836: PUSH
10837: LD_INT 3
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 32
10848: PUSH
10849: LD_INT 61
10851: PUSH
10852: LD_INT 64
10854: PUSH
10855: LD_INT 3
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 33
10866: PUSH
10867: LD_INT 63
10869: PUSH
10870: LD_INT 90
10872: PUSH
10873: LD_INT 5
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 33
10884: PUSH
10885: LD_INT 64
10887: PUSH
10888: LD_INT 88
10890: PUSH
10891: LD_INT 5
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 33
10902: PUSH
10903: LD_INT 72
10905: PUSH
10906: LD_INT 82
10908: PUSH
10909: LD_INT 5
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 6
10920: PUSH
10921: LD_INT 42
10923: PUSH
10924: LD_INT 74
10926: PUSH
10927: LD_INT 1
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 6
10938: PUSH
10939: LD_INT 56
10941: PUSH
10942: LD_INT 77
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 21
10956: PUSH
10957: LD_INT 54
10959: PUSH
10960: LD_INT 91
10962: PUSH
10963: LD_INT 5
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 16
10974: PUSH
10975: LD_INT 50
10977: PUSH
10978: LD_INT 83
10980: PUSH
10981: LD_INT 3
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 24
10992: PUSH
10993: LD_INT 50
10995: PUSH
10996: LD_INT 90
10998: PUSH
10999: LD_INT 0
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: EMPTY
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11039: LD_ADDR_VAR 0 3
11043: PUSH
11044: LD_INT 22
11046: PUSH
11047: LD_INT 3
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: LD_INT 3
11056: PUSH
11057: LD_INT 25
11059: PUSH
11060: LD_INT 2
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: PPUSH
11075: CALL_OW 69
11079: PUSH
11080: FOR_IN
11081: IFFALSE 11100
// AddComAgressiveMove ( i , 53 , 82 ) ;
11083: LD_VAR 0 3
11087: PPUSH
11088: LD_INT 53
11090: PPUSH
11091: LD_INT 82
11093: PPUSH
11094: CALL_OW 174
11098: GO 11080
11100: POP
11101: POP
// for i := 1 to buildingsTab do
11102: LD_ADDR_VAR 0 3
11106: PUSH
11107: DOUBLE
11108: LD_INT 1
11110: DEC
11111: ST_TO_ADDR
11112: LD_VAR 0 5
11116: PUSH
11117: FOR_TO
11118: IFFALSE 11191
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11120: LD_VAR 0 4
11124: PPUSH
11125: LD_VAR 0 5
11129: PUSH
11130: LD_VAR 0 3
11134: ARRAY
11135: PUSH
11136: LD_INT 1
11138: ARRAY
11139: PPUSH
11140: LD_VAR 0 5
11144: PUSH
11145: LD_VAR 0 3
11149: ARRAY
11150: PUSH
11151: LD_INT 2
11153: ARRAY
11154: PPUSH
11155: LD_VAR 0 5
11159: PUSH
11160: LD_VAR 0 3
11164: ARRAY
11165: PUSH
11166: LD_INT 3
11168: ARRAY
11169: PPUSH
11170: LD_VAR 0 5
11174: PUSH
11175: LD_VAR 0 3
11179: ARRAY
11180: PUSH
11181: LD_INT 4
11183: ARRAY
11184: PPUSH
11185: CALL_OW 205
11189: GO 11117
11191: POP
11192: POP
// end ; if position = 2 then
11193: LD_VAR 0 1
11197: PUSH
11198: LD_INT 2
11200: EQUAL
11201: IFFALSE 11816
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11203: LD_ADDR_VAR 0 4
11207: PUSH
11208: LD_INT 22
11210: PUSH
11211: LD_INT 3
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: PUSH
11218: LD_INT 25
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: PPUSH
11232: CALL_OW 69
11236: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11237: LD_ADDR_VAR 0 5
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: LD_INT 104
11247: PUSH
11248: LD_INT 110
11250: PUSH
11251: LD_INT 5
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: PUSH
11260: LD_INT 4
11262: PUSH
11263: LD_INT 98
11265: PUSH
11266: LD_INT 90
11268: PUSH
11269: LD_INT 3
11271: PUSH
11272: EMPTY
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 29
11280: PUSH
11281: LD_INT 103
11283: PUSH
11284: LD_INT 114
11286: PUSH
11287: LD_INT 2
11289: PUSH
11290: EMPTY
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: PUSH
11296: LD_INT 30
11298: PUSH
11299: LD_INT 99
11301: PUSH
11302: LD_INT 114
11304: PUSH
11305: LD_INT 3
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 28
11316: PUSH
11317: LD_INT 100
11319: PUSH
11320: LD_INT 112
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: EMPTY
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: LD_INT 92
11337: PUSH
11338: LD_INT 101
11340: PUSH
11341: LD_INT 0
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: LD_INT 28
11352: PUSH
11353: LD_INT 97
11355: PUSH
11356: LD_INT 116
11358: PUSH
11359: LD_INT 5
11361: PUSH
11362: EMPTY
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 17
11370: PUSH
11371: LD_INT 96
11373: PUSH
11374: LD_INT 101
11376: PUSH
11377: LD_INT 4
11379: PUSH
11380: EMPTY
11381: LIST
11382: LIST
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 18
11388: PUSH
11389: LD_INT 88
11391: PUSH
11392: LD_INT 97
11394: PUSH
11395: LD_INT 2
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: LD_INT 28
11406: PUSH
11407: LD_INT 106
11409: PUSH
11410: LD_INT 92
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: PUSH
11422: LD_INT 32
11424: PUSH
11425: LD_INT 88
11427: PUSH
11428: LD_INT 89
11430: PUSH
11431: LD_INT 2
11433: PUSH
11434: EMPTY
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PUSH
11440: LD_INT 32
11442: PUSH
11443: LD_INT 86
11445: PUSH
11446: LD_INT 90
11448: PUSH
11449: LD_INT 2
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 32
11460: PUSH
11461: LD_INT 85
11463: PUSH
11464: LD_INT 99
11466: PUSH
11467: LD_INT 2
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: PUSH
11476: LD_INT 32
11478: PUSH
11479: LD_INT 85
11481: PUSH
11482: LD_INT 107
11484: PUSH
11485: LD_INT 1
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: PUSH
11494: LD_INT 33
11496: PUSH
11497: LD_INT 105
11499: PUSH
11500: LD_INT 99
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: PUSH
11512: LD_INT 33
11514: PUSH
11515: LD_INT 102
11517: PUSH
11518: LD_INT 92
11520: PUSH
11521: LD_INT 3
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 33
11532: PUSH
11533: LD_INT 105
11535: PUSH
11536: LD_INT 92
11538: PUSH
11539: LD_INT 2
11541: PUSH
11542: EMPTY
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: PUSH
11548: LD_INT 6
11550: PUSH
11551: LD_INT 92
11553: PUSH
11554: LD_INT 110
11556: PUSH
11557: LD_INT 0
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 6
11568: PUSH
11569: LD_INT 103
11571: PUSH
11572: LD_INT 103
11574: PUSH
11575: LD_INT 5
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: PUSH
11584: LD_INT 21
11586: PUSH
11587: LD_INT 89
11589: PUSH
11590: LD_INT 101
11592: PUSH
11593: LD_INT 1
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PUSH
11602: LD_INT 16
11604: PUSH
11605: LD_INT 95
11607: PUSH
11608: LD_INT 104
11610: PUSH
11611: LD_INT 4
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 24
11622: PUSH
11623: LD_INT 92
11625: PUSH
11626: LD_INT 105
11628: PUSH
11629: LD_INT 0
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: LIST
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11662: LD_ADDR_VAR 0 3
11666: PUSH
11667: LD_INT 22
11669: PUSH
11670: LD_INT 3
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 3
11679: PUSH
11680: LD_INT 25
11682: PUSH
11683: LD_INT 2
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: PUSH
11703: FOR_IN
11704: IFFALSE 11723
// AddComAgressiveMove ( i , 96 , 99 ) ;
11706: LD_VAR 0 3
11710: PPUSH
11711: LD_INT 96
11713: PPUSH
11714: LD_INT 99
11716: PPUSH
11717: CALL_OW 174
11721: GO 11703
11723: POP
11724: POP
// for i := 1 to buildingsTab do
11725: LD_ADDR_VAR 0 3
11729: PUSH
11730: DOUBLE
11731: LD_INT 1
11733: DEC
11734: ST_TO_ADDR
11735: LD_VAR 0 5
11739: PUSH
11740: FOR_TO
11741: IFFALSE 11814
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11743: LD_VAR 0 4
11747: PPUSH
11748: LD_VAR 0 5
11752: PUSH
11753: LD_VAR 0 3
11757: ARRAY
11758: PUSH
11759: LD_INT 1
11761: ARRAY
11762: PPUSH
11763: LD_VAR 0 5
11767: PUSH
11768: LD_VAR 0 3
11772: ARRAY
11773: PUSH
11774: LD_INT 2
11776: ARRAY
11777: PPUSH
11778: LD_VAR 0 5
11782: PUSH
11783: LD_VAR 0 3
11787: ARRAY
11788: PUSH
11789: LD_INT 3
11791: ARRAY
11792: PPUSH
11793: LD_VAR 0 5
11797: PUSH
11798: LD_VAR 0 3
11802: ARRAY
11803: PUSH
11804: LD_INT 4
11806: ARRAY
11807: PPUSH
11808: CALL_OW 205
11812: GO 11740
11814: POP
11815: POP
// end ; if position = 3 then
11816: LD_VAR 0 1
11820: PUSH
11821: LD_INT 3
11823: EQUAL
11824: IFFALSE 12610
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11826: LD_ADDR_VAR 0 4
11830: PUSH
11831: LD_INT 22
11833: PUSH
11834: LD_INT 3
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 25
11843: PUSH
11844: LD_INT 2
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: PPUSH
11855: CALL_OW 69
11859: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11860: LD_ADDR_VAR 0 5
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 151
11870: PUSH
11871: LD_INT 71
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 145
11888: PUSH
11889: LD_INT 53
11891: PUSH
11892: LD_INT 3
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 172
11906: PUSH
11907: LD_INT 102
11909: PUSH
11910: LD_INT 5
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 151
11960: PUSH
11961: LD_INT 66
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 163
11978: PUSH
11979: LD_INT 95
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 28
11993: PUSH
11994: LD_INT 149
11996: PUSH
11997: LD_INT 63
11999: PUSH
12000: LD_INT 4
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 17
12011: PUSH
12012: LD_INT 167
12014: PUSH
12015: LD_INT 99
12017: PUSH
12018: LD_INT 5
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 18
12029: PUSH
12030: LD_INT 163
12032: PUSH
12033: LD_INT 98
12035: PUSH
12036: LD_INT 0
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 28
12047: PUSH
12048: LD_INT 154
12050: PUSH
12051: LD_INT 70
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 32
12065: PUSH
12066: LD_INT 155
12068: PUSH
12069: LD_INT 62
12071: PUSH
12072: LD_INT 4
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 32
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 69
12089: PUSH
12090: LD_INT 4
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 32
12101: PUSH
12102: LD_INT 168
12104: PUSH
12105: LD_INT 78
12107: PUSH
12108: LD_INT 4
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 32
12119: PUSH
12120: LD_INT 163
12122: PUSH
12123: LD_INT 80
12125: PUSH
12126: LD_INT 5
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 32
12137: PUSH
12138: LD_INT 136
12140: PUSH
12141: LD_INT 73
12143: PUSH
12144: LD_INT 0
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 32
12155: PUSH
12156: LD_INT 157
12158: PUSH
12159: LD_INT 98
12161: PUSH
12162: LD_INT 0
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 32
12173: PUSH
12174: LD_INT 150
12176: PUSH
12177: LD_INT 87
12179: PUSH
12180: LD_INT 1
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 171
12194: PUSH
12195: LD_INT 97
12197: PUSH
12198: LD_INT 4
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 168
12212: PUSH
12213: LD_INT 92
12215: PUSH
12216: LD_INT 4
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 166
12230: PUSH
12231: LD_INT 80
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 141
12248: PUSH
12249: LD_INT 54
12251: PUSH
12252: LD_INT 2
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 133
12266: PUSH
12267: LD_INT 57
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 132
12284: PUSH
12285: LD_INT 61
12287: PUSH
12288: LD_INT 2
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: LD_INT 33
12299: PUSH
12300: LD_INT 150
12302: PUSH
12303: LD_INT 82
12305: PUSH
12306: LD_INT 0
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 33
12317: PUSH
12318: LD_INT 132
12320: PUSH
12321: LD_INT 72
12323: PUSH
12324: LD_INT 0
12326: PUSH
12327: EMPTY
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 6
12335: PUSH
12336: LD_INT 146
12338: PUSH
12339: LD_INT 64
12341: PUSH
12342: LD_INT 4
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 6
12353: PUSH
12354: LD_INT 159
12356: PUSH
12357: LD_INT 85
12359: PUSH
12360: LD_INT 4
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: PUSH
12369: LD_INT 21
12371: PUSH
12372: LD_INT 163
12374: PUSH
12375: LD_INT 91
12377: PUSH
12378: LD_INT 3
12380: PUSH
12381: EMPTY
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: PUSH
12387: LD_INT 16
12389: PUSH
12390: LD_INT 166
12392: PUSH
12393: LD_INT 95
12395: PUSH
12396: LD_INT 4
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: PUSH
12405: LD_INT 24
12407: PUSH
12408: LD_INT 159
12410: PUSH
12411: LD_INT 95
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12456: LD_ADDR_VAR 0 3
12460: PUSH
12461: LD_INT 22
12463: PUSH
12464: LD_INT 3
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: LD_INT 25
12476: PUSH
12477: LD_INT 2
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PPUSH
12492: CALL_OW 69
12496: PUSH
12497: FOR_IN
12498: IFFALSE 12517
// AddComAgressiveMove ( i , 141 , 65 ) ;
12500: LD_VAR 0 3
12504: PPUSH
12505: LD_INT 141
12507: PPUSH
12508: LD_INT 65
12510: PPUSH
12511: CALL_OW 174
12515: GO 12497
12517: POP
12518: POP
// for i := 1 to buildingsTab do
12519: LD_ADDR_VAR 0 3
12523: PUSH
12524: DOUBLE
12525: LD_INT 1
12527: DEC
12528: ST_TO_ADDR
12529: LD_VAR 0 5
12533: PUSH
12534: FOR_TO
12535: IFFALSE 12608
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12537: LD_VAR 0 4
12541: PPUSH
12542: LD_VAR 0 5
12546: PUSH
12547: LD_VAR 0 3
12551: ARRAY
12552: PUSH
12553: LD_INT 1
12555: ARRAY
12556: PPUSH
12557: LD_VAR 0 5
12561: PUSH
12562: LD_VAR 0 3
12566: ARRAY
12567: PUSH
12568: LD_INT 2
12570: ARRAY
12571: PPUSH
12572: LD_VAR 0 5
12576: PUSH
12577: LD_VAR 0 3
12581: ARRAY
12582: PUSH
12583: LD_INT 3
12585: ARRAY
12586: PPUSH
12587: LD_VAR 0 5
12591: PUSH
12592: LD_VAR 0 3
12596: ARRAY
12597: PUSH
12598: LD_INT 4
12600: ARRAY
12601: PPUSH
12602: CALL_OW 205
12606: GO 12534
12608: POP
12609: POP
// end ; end ;
12610: LD_VAR 0 2
12614: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12615: LD_INT 0
12617: PPUSH
12618: PPUSH
12619: PPUSH
12620: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12621: LD_ADDR_VAR 0 3
12625: PUSH
12626: LD_INT 22
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 25
12638: PUSH
12639: LD_INT 2
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PPUSH
12650: CALL_OW 69
12654: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12655: LD_VAR 0 3
12659: PPUSH
12660: LD_INT 0
12662: PPUSH
12663: LD_INT 71
12665: PPUSH
12666: LD_INT 15
12668: PPUSH
12669: LD_INT 3
12671: PPUSH
12672: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12676: LD_ADDR_VAR 0 4
12680: PUSH
12681: LD_INT 6
12683: PUSH
12684: LD_INT 77
12686: PUSH
12687: LD_INT 18
12689: PUSH
12690: LD_INT 3
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: LD_INT 77
12704: PUSH
12705: LD_INT 26
12707: PUSH
12708: LD_INT 0
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: PUSH
12717: LD_INT 31
12719: PUSH
12720: LD_INT 82
12722: PUSH
12723: LD_INT 28
12725: PUSH
12726: LD_INT 0
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 31
12737: PUSH
12738: LD_INT 84
12740: PUSH
12741: LD_INT 21
12743: PUSH
12744: LD_INT 3
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: PUSH
12753: LD_INT 31
12755: PUSH
12756: LD_INT 66
12758: PUSH
12759: LD_INT 14
12761: PUSH
12762: LD_INT 2
12764: PUSH
12765: EMPTY
12766: LIST
12767: LIST
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 27
12773: PUSH
12774: LD_INT 67
12776: PUSH
12777: LD_INT 18
12779: PUSH
12780: LD_INT 5
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 27
12791: PUSH
12792: LD_INT 69
12794: PUSH
12795: LD_INT 23
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: ST_TO_ADDR
// for i := 1 to buildingsTab do
12816: LD_ADDR_VAR 0 2
12820: PUSH
12821: DOUBLE
12822: LD_INT 1
12824: DEC
12825: ST_TO_ADDR
12826: LD_VAR 0 4
12830: PUSH
12831: FOR_TO
12832: IFFALSE 12905
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_VAR 0 4
12843: PUSH
12844: LD_VAR 0 2
12848: ARRAY
12849: PUSH
12850: LD_INT 1
12852: ARRAY
12853: PPUSH
12854: LD_VAR 0 4
12858: PUSH
12859: LD_VAR 0 2
12863: ARRAY
12864: PUSH
12865: LD_INT 2
12867: ARRAY
12868: PPUSH
12869: LD_VAR 0 4
12873: PUSH
12874: LD_VAR 0 2
12878: ARRAY
12879: PUSH
12880: LD_INT 3
12882: ARRAY
12883: PPUSH
12884: LD_VAR 0 4
12888: PUSH
12889: LD_VAR 0 2
12893: ARRAY
12894: PUSH
12895: LD_INT 4
12897: ARRAY
12898: PPUSH
12899: CALL_OW 205
12903: GO 12831
12905: POP
12906: POP
// end ;
12907: LD_VAR 0 1
12911: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12912: LD_INT 0
12914: PPUSH
12915: PPUSH
12916: PPUSH
12917: PPUSH
12918: PPUSH
12919: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12920: LD_ADDR_VAR 0 7
12924: PUSH
12925: LD_INT 22
12927: PUSH
12928: LD_VAR 0 1
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 25
12939: PUSH
12940: LD_INT 9
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 69
12955: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12956: LD_ADDR_VAR 0 8
12960: PUSH
12961: LD_INT 22
12963: PUSH
12964: LD_VAR 0 2
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PUSH
12973: LD_INT 3
12975: PUSH
12976: LD_INT 21
12978: PUSH
12979: LD_INT 3
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: PPUSH
12994: CALL_OW 69
12998: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12999: LD_ADDR_VAR 0 5
13003: PUSH
13004: LD_INT 1
13006: PPUSH
13007: LD_INT 3
13009: PPUSH
13010: CALL_OW 12
13014: ST_TO_ADDR
// for i = 1 to list do
13015: LD_ADDR_VAR 0 6
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_VAR 0 7
13029: PUSH
13030: FOR_TO
13031: IFFALSE 14021
// for ta in filter do
13033: LD_ADDR_VAR 0 4
13037: PUSH
13038: LD_VAR 0 8
13042: PUSH
13043: FOR_IN
13044: IFFALSE 14017
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13046: LD_VAR 0 7
13050: PUSH
13051: LD_VAR 0 6
13055: ARRAY
13056: PPUSH
13057: LD_VAR 0 4
13061: PPUSH
13062: CALL_OW 296
13066: PUSH
13067: LD_INT 15
13069: LESSEQUAL
13070: IFFALSE 14015
// begin case c of 1 :
13072: LD_VAR 0 5
13076: PUSH
13077: LD_INT 1
13079: DOUBLE
13080: EQUAL
13081: IFTRUE 13085
13083: GO 13517
13085: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13086: LD_VAR 0 7
13090: PUSH
13091: LD_VAR 0 6
13095: ARRAY
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 250
13106: PPUSH
13107: LD_VAR 0 4
13111: PPUSH
13112: CALL_OW 251
13116: PPUSH
13117: CALL_OW 154
// if eventVar2 = 0 then
13121: LD_EXP 62
13125: PUSH
13126: LD_INT 0
13128: EQUAL
13129: IFFALSE 13515
// begin eventVar2 = 1 ;
13131: LD_ADDR_EXP 62
13135: PUSH
13136: LD_INT 1
13138: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13139: LD_INT 245
13141: PPUSH
13142: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13146: LD_VAR 0 4
13150: PPUSH
13151: CALL_OW 250
13155: PPUSH
13156: LD_VAR 0 4
13160: PPUSH
13161: CALL_OW 251
13165: PPUSH
13166: CALL_OW 84
// DialogueOn ;
13170: CALL_OW 6
// if IsOK ( Cyrus ) then
13174: LD_EXP 5
13178: PPUSH
13179: CALL_OW 302
13183: IFFALSE 13199
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13185: LD_EXP 5
13189: PPUSH
13190: LD_STRING D9a-Cyrus-1
13192: PPUSH
13193: CALL_OW 88
// end else
13197: GO 13321
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13199: LD_INT 22
13201: PUSH
13202: LD_INT 1
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 26
13211: PUSH
13212: LD_INT 1
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 2
13221: PUSH
13222: LD_INT 25
13224: PUSH
13225: LD_INT 1
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 25
13234: PUSH
13235: LD_INT 2
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 3
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 25
13254: PUSH
13255: LD_INT 4
13257: PUSH
13258: EMPTY
13259: LIST
13260: LIST
13261: PUSH
13262: LD_INT 25
13264: PUSH
13265: LD_INT 5
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: PPUSH
13285: CALL_OW 69
13289: PUSH
13290: LD_EXP 1
13294: PUSH
13295: LD_EXP 14
13299: PUSH
13300: LD_EXP 5
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: DIFF
13310: PPUSH
13311: LD_STRING D9a-Sol1-1
13313: PPUSH
13314: LD_STRING D9a-Sol1-1
13316: PPUSH
13317: CALL 9567 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13321: LD_INT 22
13323: PUSH
13324: LD_INT 1
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 26
13333: PUSH
13334: LD_INT 1
13336: PUSH
13337: EMPTY
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 2
13343: PUSH
13344: LD_INT 25
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: LD_INT 25
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: PUSH
13364: LD_INT 25
13366: PUSH
13367: LD_INT 3
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 25
13386: PUSH
13387: LD_INT 5
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PPUSH
13407: CALL_OW 69
13411: PUSH
13412: LD_EXP 1
13416: PUSH
13417: LD_EXP 14
13421: PUSH
13422: LD_EXP 5
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: DIFF
13432: PPUSH
13433: LD_STRING D9b-Sol1-1
13435: PPUSH
13436: LD_STRING D9b-Sol1-1
13438: PPUSH
13439: CALL 9567 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13443: LD_STRING 09_arInfo
13445: PPUSH
13446: LD_INT 0
13448: PPUSH
13449: CALL_OW 30
13453: PUSH
13454: LD_INT 1
13456: EQUAL
13457: IFFALSE 13471
// Say ( JMM , D9a-JMM-1 ) ;
13459: LD_EXP 1
13463: PPUSH
13464: LD_STRING D9a-JMM-1
13466: PPUSH
13467: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13471: LD_EXP 1
13475: PPUSH
13476: LD_STRING D9c-JMM-1
13478: PPUSH
13479: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13483: LD_INT 12
13485: PPUSH
13486: LD_INT 1
13488: PPUSH
13489: CALL_OW 321
13493: PUSH
13494: LD_INT 2
13496: EQUAL
13497: IFFALSE 13511
// Say ( JMM , D9c-JMM-1a ) ;
13499: LD_EXP 1
13503: PPUSH
13504: LD_STRING D9c-JMM-1a
13506: PPUSH
13507: CALL_OW 88
// DialogueOff ;
13511: CALL_OW 7
// end ; end ; 2 :
13515: GO 14015
13517: LD_INT 2
13519: DOUBLE
13520: EQUAL
13521: IFTRUE 13525
13523: GO 13983
13525: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13526: LD_VAR 0 7
13530: PUSH
13531: LD_VAR 0 6
13535: ARRAY
13536: PPUSH
13537: LD_VAR 0 4
13541: PPUSH
13542: CALL_OW 250
13546: PUSH
13547: LD_INT 1
13549: NEG
13550: PPUSH
13551: LD_INT 1
13553: PPUSH
13554: CALL_OW 12
13558: PLUS
13559: PPUSH
13560: LD_VAR 0 4
13564: PPUSH
13565: CALL_OW 251
13569: PUSH
13570: LD_INT 1
13572: NEG
13573: PPUSH
13574: LD_INT 1
13576: PPUSH
13577: CALL_OW 12
13581: PLUS
13582: PPUSH
13583: CALL_OW 153
// if eventVar2 = 0 then
13587: LD_EXP 62
13591: PUSH
13592: LD_INT 0
13594: EQUAL
13595: IFFALSE 13981
// begin eventVar2 = 1 ;
13597: LD_ADDR_EXP 62
13601: PUSH
13602: LD_INT 1
13604: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13605: LD_INT 245
13607: PPUSH
13608: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13612: LD_VAR 0 4
13616: PPUSH
13617: CALL_OW 250
13621: PPUSH
13622: LD_VAR 0 4
13626: PPUSH
13627: CALL_OW 251
13631: PPUSH
13632: CALL_OW 84
// DialogueOn ;
13636: CALL_OW 6
// if IsOK ( Cyrus ) then
13640: LD_EXP 5
13644: PPUSH
13645: CALL_OW 302
13649: IFFALSE 13665
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13651: LD_EXP 5
13655: PPUSH
13656: LD_STRING D9a-Cyrus-1
13658: PPUSH
13659: CALL_OW 88
// end else
13663: GO 13787
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13665: LD_INT 22
13667: PUSH
13668: LD_INT 1
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 26
13677: PUSH
13678: LD_INT 1
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 1
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 25
13700: PUSH
13701: LD_INT 2
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: LD_INT 25
13710: PUSH
13711: LD_INT 3
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PUSH
13718: LD_INT 25
13720: PUSH
13721: LD_INT 4
13723: PUSH
13724: EMPTY
13725: LIST
13726: LIST
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 5
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: EMPTY
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: LIST
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: PPUSH
13751: CALL_OW 69
13755: PUSH
13756: LD_EXP 1
13760: PUSH
13761: LD_EXP 14
13765: PUSH
13766: LD_EXP 5
13770: PUSH
13771: EMPTY
13772: LIST
13773: LIST
13774: LIST
13775: DIFF
13776: PPUSH
13777: LD_STRING D9a-Sol1-1
13779: PPUSH
13780: LD_STRING D9a-Sol1-1
13782: PPUSH
13783: CALL 9567 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13787: LD_INT 22
13789: PUSH
13790: LD_INT 1
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: LD_INT 26
13799: PUSH
13800: LD_INT 1
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PUSH
13807: LD_INT 2
13809: PUSH
13810: LD_INT 25
13812: PUSH
13813: LD_INT 1
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 25
13822: PUSH
13823: LD_INT 2
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 25
13832: PUSH
13833: LD_INT 3
13835: PUSH
13836: EMPTY
13837: LIST
13838: LIST
13839: PUSH
13840: LD_INT 25
13842: PUSH
13843: LD_INT 4
13845: PUSH
13846: EMPTY
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 25
13852: PUSH
13853: LD_INT 5
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: PPUSH
13873: CALL_OW 69
13877: PUSH
13878: LD_EXP 1
13882: PUSH
13883: LD_EXP 14
13887: PUSH
13888: LD_EXP 5
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: LIST
13897: DIFF
13898: PPUSH
13899: LD_STRING D9b-Sol1-1
13901: PPUSH
13902: LD_STRING D9b-Sol1-1
13904: PPUSH
13905: CALL 9567 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13909: LD_STRING 09_arInfo
13911: PPUSH
13912: LD_INT 0
13914: PPUSH
13915: CALL_OW 30
13919: PUSH
13920: LD_INT 1
13922: EQUAL
13923: IFFALSE 13937
// Say ( JMM , D9a-JMM-1 ) ;
13925: LD_EXP 1
13929: PPUSH
13930: LD_STRING D9a-JMM-1
13932: PPUSH
13933: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13937: LD_EXP 1
13941: PPUSH
13942: LD_STRING D9c-JMM-1
13944: PPUSH
13945: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13949: LD_INT 12
13951: PPUSH
13952: LD_INT 1
13954: PPUSH
13955: CALL_OW 321
13959: PUSH
13960: LD_INT 2
13962: EQUAL
13963: IFFALSE 13977
// Say ( JMM , D9c-JMM-1a ) ;
13965: LD_EXP 1
13969: PPUSH
13970: LD_STRING D9c-JMM-1a
13972: PPUSH
13973: CALL_OW 88
// DialogueOff ;
13977: CALL_OW 7
// end ; end ; 3 :
13981: GO 14015
13983: LD_INT 3
13985: DOUBLE
13986: EQUAL
13987: IFTRUE 13991
13989: GO 14014
13991: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
13992: LD_VAR 0 7
13996: PUSH
13997: LD_VAR 0 6
14001: ARRAY
14002: PPUSH
14003: LD_VAR 0 4
14007: PPUSH
14008: CALL_OW 115
14012: GO 14015
14014: POP
// end ; end ;
14015: GO 13043
14017: POP
14018: POP
14019: GO 13030
14021: POP
14022: POP
// end ;
14023: LD_VAR 0 3
14027: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14028: LD_INT 0
14030: PPUSH
14031: PPUSH
14032: PPUSH
14033: PPUSH
// for i = 1 to 72 do
14034: LD_ADDR_VAR 0 5
14038: PUSH
14039: DOUBLE
14040: LD_INT 1
14042: DEC
14043: ST_TO_ADDR
14044: LD_INT 72
14046: PUSH
14047: FOR_TO
14048: IFFALSE 14106
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14050: LD_VAR 0 5
14054: PPUSH
14055: LD_VAR 0 1
14059: PPUSH
14060: CALL_OW 321
14064: PUSH
14065: LD_INT 1
14067: EQUAL
14068: PUSH
14069: LD_VAR 0 5
14073: PPUSH
14074: LD_VAR 0 3
14078: PPUSH
14079: CALL_OW 482
14083: PUSH
14084: LD_INT 1
14086: EQUAL
14087: AND
14088: IFFALSE 14104
// AddComResearch ( lab , i ) ;
14090: LD_VAR 0 2
14094: PPUSH
14095: LD_VAR 0 5
14099: PPUSH
14100: CALL_OW 184
14104: GO 14047
14106: POP
14107: POP
// end ;
14108: LD_VAR 0 4
14112: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14113: LD_INT 0
14115: PPUSH
14116: PPUSH
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
14122: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14123: LD_ADDR_VAR 0 6
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_VAR 0 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 56
14142: PUSH
14143: EMPTY
14144: LIST
14145: PUSH
14146: LD_INT 24
14148: PUSH
14149: LD_INT 700
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: LD_INT 3
14158: PUSH
14159: LD_INT 60
14161: PUSH
14162: EMPTY
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PUSH
14169: LD_INT 2
14171: PUSH
14172: LD_INT 25
14174: PUSH
14175: LD_INT 1
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 25
14184: PUSH
14185: LD_INT 9
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14209: LD_ADDR_VAR 0 7
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 32
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 58
14238: PUSH
14239: EMPTY
14240: LIST
14241: PUSH
14242: LD_INT 24
14244: PUSH
14245: LD_INT 251
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: PPUSH
14258: CALL_OW 69
14262: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14263: LD_ADDR_VAR 0 9
14267: PUSH
14268: LD_INT 22
14270: PUSH
14271: LD_VAR 0 1
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 2
14282: PUSH
14283: LD_INT 30
14285: PUSH
14286: LD_INT 4
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 30
14295: PUSH
14296: LD_INT 5
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: PUSH
14308: LD_INT 24
14310: PUSH
14311: LD_INT 251
14313: PUSH
14314: EMPTY
14315: LIST
14316: LIST
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: PPUSH
14323: CALL_OW 69
14327: ST_TO_ADDR
// if barrackList > 0 then
14328: LD_VAR 0 9
14332: PUSH
14333: LD_INT 0
14335: GREATER
14336: IFFALSE 14471
// begin if turretList = 0 then
14338: LD_VAR 0 7
14342: PUSH
14343: LD_INT 0
14345: EQUAL
14346: IFFALSE 14395
// begin for i in soldiers_list do
14348: LD_ADDR_VAR 0 4
14352: PUSH
14353: LD_VAR 0 6
14357: PUSH
14358: FOR_IN
14359: IFFALSE 14391
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14361: LD_VAR 0 4
14365: PPUSH
14366: LD_VAR 0 9
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_VAR 0 9
14378: PPUSH
14379: CALL_OW 12
14383: ARRAY
14384: PPUSH
14385: CALL_OW 120
14389: GO 14358
14391: POP
14392: POP
// end else
14393: GO 14471
// begin for i in barrackList do
14395: LD_ADDR_VAR 0 4
14399: PUSH
14400: LD_VAR 0 9
14404: PUSH
14405: FOR_IN
14406: IFFALSE 14469
// begin insideUnits = UnitsInside ( i ) ;
14408: LD_ADDR_VAR 0 10
14412: PUSH
14413: LD_VAR 0 4
14417: PPUSH
14418: CALL_OW 313
14422: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14423: LD_VAR 0 10
14427: PUSH
14428: LD_INT 1
14430: ARRAY
14431: PPUSH
14432: LD_VAR 0 7
14436: PUSH
14437: LD_INT 1
14439: ARRAY
14440: PPUSH
14441: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14445: LD_VAR 0 6
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: LD_VAR 0 7
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PPUSH
14463: CALL_OW 120
// end ;
14467: GO 14405
14469: POP
14470: POP
// end ; end ; end ;
14471: LD_VAR 0 3
14475: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
14480: PPUSH
14481: PPUSH
14482: PPUSH
14483: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14484: LD_ADDR_VAR 0 6
14488: PUSH
14489: LD_VAR 0 2
14493: PPUSH
14494: CALL_OW 313
14498: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14499: LD_ADDR_VAR 0 7
14503: PUSH
14504: LD_INT 22
14506: PUSH
14507: LD_VAR 0 1
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: PUSH
14516: LD_INT 25
14518: PUSH
14519: LD_INT 2
14521: PUSH
14522: EMPTY
14523: LIST
14524: LIST
14525: PUSH
14526: LD_INT 24
14528: PUSH
14529: LD_INT 1000
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 3
14538: PUSH
14539: LD_INT 54
14541: PUSH
14542: EMPTY
14543: LIST
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: PPUSH
14555: CALL_OW 69
14559: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14560: LD_ADDR_VAR 0 4
14564: PUSH
14565: LD_INT 22
14567: PUSH
14568: LD_VAR 0 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 21
14579: PUSH
14580: LD_INT 3
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 3
14589: PUSH
14590: LD_INT 24
14592: PUSH
14593: LD_INT 1000
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: PPUSH
14612: CALL_OW 69
14616: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14617: LD_VAR 0 4
14621: NOT
14622: PUSH
14623: LD_VAR 0 7
14627: NOT
14628: AND
14629: PUSH
14630: LD_EXP 42
14634: NOT
14635: AND
14636: IFFALSE 14640
// exit ;
14638: GO 14831
// if buildings_list > 0 and engineerOkInside then
14640: LD_VAR 0 4
14644: PUSH
14645: LD_INT 0
14647: GREATER
14648: PUSH
14649: LD_VAR 0 6
14653: AND
14654: IFFALSE 14708
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14656: LD_ADDR_VAR 0 5
14660: PUSH
14661: LD_INT 22
14663: PUSH
14664: LD_VAR 0 1
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: LD_INT 25
14675: PUSH
14676: LD_INT 2
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: PPUSH
14687: CALL_OW 69
14691: PUSH
14692: FOR_IN
14693: IFFALSE 14706
// ComExitBuilding ( i ) ;
14695: LD_VAR 0 5
14699: PPUSH
14700: CALL_OW 122
14704: GO 14692
14706: POP
14707: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14708: LD_VAR 0 4
14712: PUSH
14713: LD_INT 0
14715: GREATER
14716: PUSH
14717: LD_VAR 0 7
14721: PUSH
14722: LD_INT 0
14724: GREATER
14725: AND
14726: IFFALSE 14780
// begin for i in engineerOkOutside do
14728: LD_ADDR_VAR 0 5
14732: PUSH
14733: LD_VAR 0 7
14737: PUSH
14738: FOR_IN
14739: IFFALSE 14778
// for j in buildings_list do
14741: LD_ADDR_VAR 0 8
14745: PUSH
14746: LD_VAR 0 4
14750: PUSH
14751: FOR_IN
14752: IFFALSE 14774
// ComRepairBuilding ( i , j [ 1 ] ) ;
14754: LD_VAR 0 5
14758: PPUSH
14759: LD_VAR 0 8
14763: PUSH
14764: LD_INT 1
14766: ARRAY
14767: PPUSH
14768: CALL_OW 130
14772: GO 14751
14774: POP
14775: POP
14776: GO 14738
14778: POP
14779: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14780: LD_VAR 0 4
14784: PUSH
14785: LD_INT 0
14787: EQUAL
14788: PUSH
14789: LD_VAR 0 7
14793: PUSH
14794: LD_INT 0
14796: GREATER
14797: AND
14798: IFFALSE 14831
// for i in engineerOkOutside do
14800: LD_ADDR_VAR 0 5
14804: PUSH
14805: LD_VAR 0 7
14809: PUSH
14810: FOR_IN
14811: IFFALSE 14829
// ComEnterUnit ( i , building ) ;
14813: LD_VAR 0 5
14817: PPUSH
14818: LD_VAR 0 2
14822: PPUSH
14823: CALL_OW 120
14827: GO 14810
14829: POP
14830: POP
// end ;
14831: LD_VAR 0 3
14835: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14836: LD_INT 0
14838: PPUSH
14839: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14840: LD_INT 22
14842: PUSH
14843: LD_VAR 0 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 25
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: PUSH
14871: LD_INT 0
14873: GREATER
14874: PUSH
14875: LD_INT 22
14877: PUSH
14878: LD_VAR 0 1
14882: PUSH
14883: EMPTY
14884: LIST
14885: LIST
14886: PUSH
14887: LD_INT 21
14889: PUSH
14890: LD_INT 3
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 3
14899: PUSH
14900: LD_INT 24
14902: PUSH
14903: LD_INT 1000
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: PUSH
14910: EMPTY
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: PUSH
14924: LD_INT 0
14926: EQUAL
14927: AND
14928: PUSH
14929: LD_VAR 0 2
14933: PUSH
14934: LD_INT 0
14936: GREATER
14937: AND
14938: IFFALSE 15037
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14940: LD_ADDR_VAR 0 4
14944: PUSH
14945: LD_INT 22
14947: PUSH
14948: LD_VAR 0 1
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 2
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 69
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15035
// begin AddComExitBuilding ( i ) ;
14979: LD_VAR 0 4
14983: PPUSH
14984: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14988: LD_VAR 0 4
14992: PPUSH
14993: LD_VAR 0 2
14997: PUSH
14998: LD_INT 1
15000: ARRAY
15001: PPUSH
15002: LD_VAR 0 2
15006: PUSH
15007: LD_INT 2
15009: ARRAY
15010: PPUSH
15011: LD_VAR 0 2
15015: PUSH
15016: LD_INT 3
15018: ARRAY
15019: PPUSH
15020: LD_VAR 0 2
15024: PUSH
15025: LD_INT 4
15027: ARRAY
15028: PPUSH
15029: CALL_OW 205
// end ;
15033: GO 14976
15035: POP
15036: POP
// end ; end ;
15037: LD_VAR 0 3
15041: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15042: LD_INT 0
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
15048: PPUSH
15049: PPUSH
15050: PPUSH
15051: PPUSH
15052: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15053: LD_ADDR_VAR 0 6
15057: PUSH
15058: LD_INT 22
15060: PUSH
15061: LD_VAR 0 1
15065: PUSH
15066: EMPTY
15067: LIST
15068: LIST
15069: PUSH
15070: LD_INT 25
15072: PUSH
15073: LD_INT 4
15075: PUSH
15076: EMPTY
15077: LIST
15078: LIST
15079: PUSH
15080: LD_INT 24
15082: PUSH
15083: LD_INT 251
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: LIST
15094: PPUSH
15095: CALL_OW 69
15099: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15100: LD_ADDR_VAR 0 7
15104: PUSH
15105: LD_VAR 0 3
15109: PPUSH
15110: LD_INT 22
15112: PUSH
15113: LD_VAR 0 1
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: LD_INT 25
15124: PUSH
15125: LD_INT 4
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: PUSH
15132: LD_INT 50
15134: PUSH
15135: EMPTY
15136: LIST
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: LIST
15142: PPUSH
15143: CALL_OW 70
15147: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15148: LD_ADDR_VAR 0 10
15152: PUSH
15153: LD_VAR 0 3
15157: PPUSH
15158: LD_INT 22
15160: PUSH
15161: LD_VAR 0 1
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: LD_INT 21
15172: PUSH
15173: LD_INT 1
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: LD_INT 3
15182: PUSH
15183: LD_INT 25
15185: PUSH
15186: LD_INT 3
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 3
15199: PUSH
15200: LD_INT 24
15202: PUSH
15203: LD_INT 750
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 70
15224: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15225: LD_ADDR_VAR 0 11
15229: PUSH
15230: LD_VAR 0 2
15234: PPUSH
15235: LD_INT 22
15237: PUSH
15238: LD_VAR 0 1
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: PUSH
15247: LD_INT 21
15249: PUSH
15250: LD_INT 1
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 3
15259: PUSH
15260: LD_INT 25
15262: PUSH
15263: LD_INT 3
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 3
15276: PUSH
15277: LD_INT 24
15279: PUSH
15280: LD_INT 1000
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: EMPTY
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: PPUSH
15297: CALL_OW 70
15301: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15302: LD_VAR 0 10
15306: NOT
15307: PUSH
15308: LD_VAR 0 7
15312: NOT
15313: AND
15314: PUSH
15315: LD_VAR 0 11
15319: NOT
15320: AND
15321: IFFALSE 15325
// exit ;
15323: GO 15585
// if damageUnits > 0 and sci_list > 0 then
15325: LD_VAR 0 10
15329: PUSH
15330: LD_INT 0
15332: GREATER
15333: PUSH
15334: LD_VAR 0 6
15338: PUSH
15339: LD_INT 0
15341: GREATER
15342: AND
15343: IFFALSE 15376
// for i in damageUnits do
15345: LD_ADDR_VAR 0 8
15349: PUSH
15350: LD_VAR 0 10
15354: PUSH
15355: FOR_IN
15356: IFFALSE 15374
// ComMoveToArea ( i , healArea ) ;
15358: LD_VAR 0 8
15362: PPUSH
15363: LD_VAR 0 2
15367: PPUSH
15368: CALL_OW 113
15372: GO 15355
15374: POP
15375: POP
// if unitsToHeal > 0 and sci_list > 0 then
15376: LD_VAR 0 11
15380: PUSH
15381: LD_INT 0
15383: GREATER
15384: PUSH
15385: LD_VAR 0 6
15389: PUSH
15390: LD_INT 0
15392: GREATER
15393: AND
15394: IFFALSE 15453
// begin for i in sci_list do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: LD_VAR 0 6
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15451
// begin ComExitBuilding ( i ) ;
15409: LD_VAR 0 8
15413: PPUSH
15414: CALL_OW 122
// for j in unitsToHeal do
15418: LD_ADDR_VAR 0 9
15422: PUSH
15423: LD_VAR 0 11
15427: PUSH
15428: FOR_IN
15429: IFFALSE 15447
// AddComHeal ( i , j ) ;
15431: LD_VAR 0 8
15435: PPUSH
15436: LD_VAR 0 9
15440: PPUSH
15441: CALL_OW 188
15445: GO 15428
15447: POP
15448: POP
// end ;
15449: GO 15406
15451: POP
15452: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15453: LD_VAR 0 10
15457: PUSH
15458: LD_INT 0
15460: EQUAL
15461: PUSH
15462: LD_VAR 0 11
15466: PUSH
15467: LD_INT 0
15469: EQUAL
15470: AND
15471: PUSH
15472: LD_VAR 0 7
15476: PUSH
15477: LD_INT 0
15479: GREATER
15480: AND
15481: IFFALSE 15585
// for i in sci_listOutside do
15483: LD_ADDR_VAR 0 8
15487: PUSH
15488: LD_VAR 0 7
15492: PUSH
15493: FOR_IN
15494: IFFALSE 15583
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15496: LD_ADDR_VAR 0 12
15500: PUSH
15501: LD_INT 22
15503: PUSH
15504: LD_VAR 0 1
15508: PUSH
15509: EMPTY
15510: LIST
15511: LIST
15512: PUSH
15513: LD_INT 21
15515: PUSH
15516: LD_INT 3
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 30
15525: PUSH
15526: LD_INT 8
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: EMPTY
15534: LIST
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 69
15542: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15543: LD_ADDR_VAR 0 13
15547: PUSH
15548: LD_INT 1
15550: PPUSH
15551: LD_VAR 0 12
15555: PPUSH
15556: CALL_OW 12
15560: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15561: LD_VAR 0 8
15565: PPUSH
15566: LD_VAR 0 12
15570: PUSH
15571: LD_VAR 0 13
15575: ARRAY
15576: PPUSH
15577: CALL_OW 120
// end ;
15581: GO 15493
15583: POP
15584: POP
// end ;
15585: LD_VAR 0 5
15589: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15590: LD_INT 0
15592: PPUSH
15593: PPUSH
15594: PPUSH
15595: PPUSH
15596: PPUSH
15597: PPUSH
15598: PPUSH
15599: PPUSH
15600: PPUSH
15601: PPUSH
15602: PPUSH
// amChassisTab = [ ] ;
15603: LD_ADDR_VAR 0 19
15607: PUSH
15608: EMPTY
15609: ST_TO_ADDR
// arChassisTab = [ ] ;
15610: LD_ADDR_VAR 0 18
15614: PUSH
15615: EMPTY
15616: ST_TO_ADDR
// ruChassisTab = [ ] ;
15617: LD_ADDR_VAR 0 17
15621: PUSH
15622: EMPTY
15623: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15624: LD_INT 35
15626: PPUSH
15627: CALL_OW 67
// if nation = 1 then
15631: LD_VAR 0 5
15635: PUSH
15636: LD_INT 1
15638: EQUAL
15639: IFFALSE 16144
// begin uc_side = side ;
15641: LD_ADDR_OWVAR 20
15645: PUSH
15646: LD_VAR 0 2
15650: ST_TO_ADDR
// uc_nation = nation ;
15651: LD_ADDR_OWVAR 21
15655: PUSH
15656: LD_VAR 0 5
15660: ST_TO_ADDR
// vc_engine = vehengine ;
15661: LD_ADDR_OWVAR 39
15665: PUSH
15666: LD_VAR 0 6
15670: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15671: LD_ADDR_OWVAR 38
15675: PUSH
15676: LD_VAR 0 7
15680: PUSH
15681: LD_INT 1
15683: PPUSH
15684: LD_VAR 0 7
15688: PPUSH
15689: CALL_OW 12
15693: ARRAY
15694: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15695: LD_ADDR_OWVAR 40
15699: PUSH
15700: LD_VAR 0 10
15704: PUSH
15705: LD_INT 1
15707: PPUSH
15708: LD_VAR 0 10
15712: PPUSH
15713: CALL_OW 12
15717: ARRAY
15718: ST_TO_ADDR
// for j = 1 to AMWeapon do
15719: LD_ADDR_VAR 0 14
15723: PUSH
15724: DOUBLE
15725: LD_INT 1
15727: DEC
15728: ST_TO_ADDR
15729: LD_VAR 0 10
15733: PUSH
15734: FOR_TO
15735: IFFALSE 16036
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15737: LD_VAR 0 10
15741: PUSH
15742: LD_VAR 0 14
15746: ARRAY
15747: PUSH
15748: LD_INT 2
15750: EQUAL
15751: PUSH
15752: LD_VAR 0 10
15756: PUSH
15757: LD_VAR 0 14
15761: ARRAY
15762: PUSH
15763: LD_INT 3
15765: EQUAL
15766: OR
15767: IFFALSE 15820
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15769: LD_ADDR_VAR 0 19
15773: PUSH
15774: LD_INT 1
15776: PUSH
15777: LD_INT 2
15779: PUSH
15780: LD_INT 3
15782: PUSH
15783: LD_INT 4
15785: PUSH
15786: LD_INT 5
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15796: LD_ADDR_OWVAR 37
15800: PUSH
15801: LD_VAR 0 19
15805: PUSH
15806: LD_INT 1
15808: PPUSH
15809: LD_VAR 0 19
15813: PPUSH
15814: CALL_OW 12
15818: ARRAY
15819: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15820: LD_VAR 0 10
15824: PUSH
15825: LD_VAR 0 14
15829: ARRAY
15830: PUSH
15831: LD_INT 4
15833: EQUAL
15834: PUSH
15835: LD_VAR 0 10
15839: PUSH
15840: LD_VAR 0 14
15844: ARRAY
15845: PUSH
15846: LD_INT 5
15848: EQUAL
15849: OR
15850: PUSH
15851: LD_VAR 0 10
15855: PUSH
15856: LD_VAR 0 14
15860: ARRAY
15861: PUSH
15862: LD_INT 9
15864: EQUAL
15865: OR
15866: PUSH
15867: LD_VAR 0 10
15871: PUSH
15872: LD_VAR 0 14
15876: ARRAY
15877: PUSH
15878: LD_INT 11
15880: EQUAL
15881: OR
15882: PUSH
15883: LD_VAR 0 10
15887: PUSH
15888: LD_VAR 0 14
15892: ARRAY
15893: PUSH
15894: LD_INT 7
15896: EQUAL
15897: OR
15898: IFFALSE 15947
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15900: LD_ADDR_VAR 0 19
15904: PUSH
15905: LD_INT 2
15907: PUSH
15908: LD_INT 3
15910: PUSH
15911: LD_INT 4
15913: PUSH
15914: LD_INT 5
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15923: LD_ADDR_OWVAR 37
15927: PUSH
15928: LD_VAR 0 19
15932: PUSH
15933: LD_INT 1
15935: PPUSH
15936: LD_VAR 0 19
15940: PPUSH
15941: CALL_OW 12
15945: ARRAY
15946: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15947: LD_VAR 0 10
15951: PUSH
15952: LD_VAR 0 14
15956: ARRAY
15957: PUSH
15958: LD_INT 8
15960: EQUAL
15961: PUSH
15962: LD_VAR 0 10
15966: PUSH
15967: LD_VAR 0 14
15971: ARRAY
15972: PUSH
15973: LD_INT 6
15975: EQUAL
15976: OR
15977: PUSH
15978: LD_VAR 0 10
15982: PUSH
15983: LD_VAR 0 14
15987: ARRAY
15988: PUSH
15989: LD_INT 10
15991: EQUAL
15992: OR
15993: IFFALSE 16034
// begin amChassisTab = [ 4 , 5 ] ;
15995: LD_ADDR_VAR 0 19
15999: PUSH
16000: LD_INT 4
16002: PUSH
16003: LD_INT 5
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16010: LD_ADDR_OWVAR 37
16014: PUSH
16015: LD_VAR 0 19
16019: PUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_VAR 0 19
16027: PPUSH
16028: CALL_OW 12
16032: ARRAY
16033: ST_TO_ADDR
// end ; end ;
16034: GO 15734
16036: POP
16037: POP
// veh = CreateVehicle ;
16038: LD_ADDR_VAR 0 16
16042: PUSH
16043: CALL_OW 45
16047: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16048: LD_VAR 0 16
16052: PPUSH
16053: LD_VAR 0 1
16057: PPUSH
16058: LD_INT 0
16060: PPUSH
16061: CALL_OW 49
// if vc_control = 1 then
16065: LD_OWVAR 38
16069: PUSH
16070: LD_INT 1
16072: EQUAL
16073: IFFALSE 16130
// begin hc_gallery =  ;
16075: LD_ADDR_OWVAR 33
16079: PUSH
16080: LD_STRING 
16082: ST_TO_ADDR
// hc_name =  ;
16083: LD_ADDR_OWVAR 26
16087: PUSH
16088: LD_STRING 
16090: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16091: LD_INT 0
16093: PPUSH
16094: LD_INT 3
16096: PPUSH
16097: LD_VAR 0 4
16101: PPUSH
16102: CALL_OW 380
// un = CreateHuman ;
16106: LD_ADDR_VAR 0 15
16110: PUSH
16111: CALL_OW 44
16115: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16116: LD_VAR 0 15
16120: PPUSH
16121: LD_VAR 0 16
16125: PPUSH
16126: CALL_OW 52
// end ; i = i + 1 ;
16130: LD_ADDR_VAR 0 13
16134: PUSH
16135: LD_VAR 0 13
16139: PUSH
16140: LD_INT 1
16142: PLUS
16143: ST_TO_ADDR
// end ; if nation = 2 then
16144: LD_VAR 0 5
16148: PUSH
16149: LD_INT 2
16151: EQUAL
16152: IFFALSE 16574
// begin uc_side = side ;
16154: LD_ADDR_OWVAR 20
16158: PUSH
16159: LD_VAR 0 2
16163: ST_TO_ADDR
// uc_nation = nation ;
16164: LD_ADDR_OWVAR 21
16168: PUSH
16169: LD_VAR 0 5
16173: ST_TO_ADDR
// vc_engine = vehengine ;
16174: LD_ADDR_OWVAR 39
16178: PUSH
16179: LD_VAR 0 6
16183: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16184: LD_ADDR_OWVAR 38
16188: PUSH
16189: LD_VAR 0 7
16193: PUSH
16194: LD_INT 1
16196: PPUSH
16197: LD_VAR 0 7
16201: PPUSH
16202: CALL_OW 12
16206: ARRAY
16207: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16208: LD_ADDR_OWVAR 40
16212: PUSH
16213: LD_VAR 0 9
16217: PUSH
16218: LD_INT 1
16220: PPUSH
16221: LD_VAR 0 9
16225: PPUSH
16226: CALL_OW 12
16230: ARRAY
16231: ST_TO_ADDR
// for j = 1 to ARWeapons do
16232: LD_ADDR_VAR 0 14
16236: PUSH
16237: DOUBLE
16238: LD_INT 1
16240: DEC
16241: ST_TO_ADDR
16242: LD_VAR 0 9
16246: PUSH
16247: FOR_TO
16248: IFFALSE 16466
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16250: LD_VAR 0 9
16254: PUSH
16255: LD_VAR 0 14
16259: ARRAY
16260: PUSH
16261: LD_INT 24
16263: EQUAL
16264: PUSH
16265: LD_VAR 0 9
16269: PUSH
16270: LD_VAR 0 14
16274: ARRAY
16275: PUSH
16276: LD_INT 22
16278: EQUAL
16279: OR
16280: PUSH
16281: LD_VAR 0 9
16285: PUSH
16286: LD_VAR 0 14
16290: ARRAY
16291: PUSH
16292: LD_INT 23
16294: EQUAL
16295: OR
16296: PUSH
16297: LD_VAR 0 9
16301: PUSH
16302: LD_VAR 0 14
16306: ARRAY
16307: PUSH
16308: LD_INT 30
16310: EQUAL
16311: OR
16312: IFFALSE 16349
// begin arChassisTab = [ 14 ] ;
16314: LD_ADDR_VAR 0 18
16318: PUSH
16319: LD_INT 14
16321: PUSH
16322: EMPTY
16323: LIST
16324: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16325: LD_ADDR_OWVAR 37
16329: PUSH
16330: LD_VAR 0 18
16334: PUSH
16335: LD_INT 1
16337: PPUSH
16338: LD_VAR 0 18
16342: PPUSH
16343: CALL_OW 12
16347: ARRAY
16348: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16349: LD_VAR 0 9
16353: PUSH
16354: LD_VAR 0 14
16358: ARRAY
16359: PUSH
16360: LD_INT 29
16362: EQUAL
16363: PUSH
16364: LD_VAR 0 9
16368: PUSH
16369: LD_VAR 0 14
16373: ARRAY
16374: PUSH
16375: LD_INT 28
16377: EQUAL
16378: OR
16379: PUSH
16380: LD_VAR 0 9
16384: PUSH
16385: LD_VAR 0 14
16389: ARRAY
16390: PUSH
16391: LD_INT 27
16393: EQUAL
16394: OR
16395: PUSH
16396: LD_VAR 0 9
16400: PUSH
16401: LD_VAR 0 14
16405: ARRAY
16406: PUSH
16407: LD_INT 26
16409: EQUAL
16410: OR
16411: PUSH
16412: LD_VAR 0 9
16416: PUSH
16417: LD_VAR 0 14
16421: ARRAY
16422: PUSH
16423: LD_INT 25
16425: EQUAL
16426: OR
16427: IFFALSE 16464
// begin arChassisTab = [ 14 ] ;
16429: LD_ADDR_VAR 0 18
16433: PUSH
16434: LD_INT 14
16436: PUSH
16437: EMPTY
16438: LIST
16439: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16440: LD_ADDR_OWVAR 37
16444: PUSH
16445: LD_VAR 0 18
16449: PUSH
16450: LD_INT 1
16452: PPUSH
16453: LD_VAR 0 18
16457: PPUSH
16458: CALL_OW 12
16462: ARRAY
16463: ST_TO_ADDR
// end ; end ;
16464: GO 16247
16466: POP
16467: POP
// veh = CreateVehicle ;
16468: LD_ADDR_VAR 0 16
16472: PUSH
16473: CALL_OW 45
16477: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16478: LD_VAR 0 16
16482: PPUSH
16483: LD_VAR 0 1
16487: PPUSH
16488: LD_INT 0
16490: PPUSH
16491: CALL_OW 49
// if vc_control = 1 then
16495: LD_OWVAR 38
16499: PUSH
16500: LD_INT 1
16502: EQUAL
16503: IFFALSE 16560
// begin hc_gallery =  ;
16505: LD_ADDR_OWVAR 33
16509: PUSH
16510: LD_STRING 
16512: ST_TO_ADDR
// hc_name =  ;
16513: LD_ADDR_OWVAR 26
16517: PUSH
16518: LD_STRING 
16520: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16521: LD_INT 0
16523: PPUSH
16524: LD_INT 3
16526: PPUSH
16527: LD_VAR 0 4
16531: PPUSH
16532: CALL_OW 380
// un = CreateHuman ;
16536: LD_ADDR_VAR 0 15
16540: PUSH
16541: CALL_OW 44
16545: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16546: LD_VAR 0 15
16550: PPUSH
16551: LD_VAR 0 16
16555: PPUSH
16556: CALL_OW 52
// end ; i = i + 1 ;
16560: LD_ADDR_VAR 0 13
16564: PUSH
16565: LD_VAR 0 13
16569: PUSH
16570: LD_INT 1
16572: PLUS
16573: ST_TO_ADDR
// end ; if nation = 3 then
16574: LD_VAR 0 5
16578: PUSH
16579: LD_INT 3
16581: EQUAL
16582: IFFALSE 16988
// begin uc_side = side ;
16584: LD_ADDR_OWVAR 20
16588: PUSH
16589: LD_VAR 0 2
16593: ST_TO_ADDR
// uc_nation = nation ;
16594: LD_ADDR_OWVAR 21
16598: PUSH
16599: LD_VAR 0 5
16603: ST_TO_ADDR
// vc_engine = vehengine ;
16604: LD_ADDR_OWVAR 39
16608: PUSH
16609: LD_VAR 0 6
16613: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16614: LD_ADDR_OWVAR 38
16618: PUSH
16619: LD_VAR 0 7
16623: PUSH
16624: LD_INT 1
16626: PPUSH
16627: LD_VAR 0 7
16631: PPUSH
16632: CALL_OW 12
16636: ARRAY
16637: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16638: LD_ADDR_OWVAR 40
16642: PUSH
16643: LD_VAR 0 8
16647: PUSH
16648: LD_INT 1
16650: PPUSH
16651: LD_VAR 0 8
16655: PPUSH
16656: CALL_OW 12
16660: ARRAY
16661: ST_TO_ADDR
// for j = 1 to RuWeapons do
16662: LD_ADDR_VAR 0 14
16666: PUSH
16667: DOUBLE
16668: LD_INT 1
16670: DEC
16671: ST_TO_ADDR
16672: LD_VAR 0 8
16676: PUSH
16677: FOR_TO
16678: IFFALSE 16880
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16680: LD_VAR 0 8
16684: PUSH
16685: LD_VAR 0 14
16689: ARRAY
16690: PUSH
16691: LD_INT 42
16693: EQUAL
16694: PUSH
16695: LD_VAR 0 8
16699: PUSH
16700: LD_VAR 0 14
16704: ARRAY
16705: PUSH
16706: LD_INT 43
16708: EQUAL
16709: OR
16710: PUSH
16711: LD_VAR 0 8
16715: PUSH
16716: LD_VAR 0 14
16720: ARRAY
16721: PUSH
16722: LD_INT 44
16724: EQUAL
16725: OR
16726: PUSH
16727: LD_VAR 0 8
16731: PUSH
16732: LD_VAR 0 14
16736: ARRAY
16737: PUSH
16738: LD_INT 45
16740: EQUAL
16741: OR
16742: PUSH
16743: LD_VAR 0 8
16747: PUSH
16748: LD_VAR 0 14
16752: ARRAY
16753: PUSH
16754: LD_INT 49
16756: EQUAL
16757: OR
16758: IFFALSE 16807
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16760: LD_ADDR_VAR 0 17
16764: PUSH
16765: LD_INT 21
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 23
16773: PUSH
16774: LD_INT 24
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16783: LD_ADDR_OWVAR 37
16787: PUSH
16788: LD_VAR 0 17
16792: PUSH
16793: LD_INT 1
16795: PPUSH
16796: LD_VAR 0 17
16800: PPUSH
16801: CALL_OW 12
16805: ARRAY
16806: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16807: LD_VAR 0 8
16811: PUSH
16812: LD_VAR 0 14
16816: ARRAY
16817: PUSH
16818: LD_INT 46
16820: EQUAL
16821: PUSH
16822: LD_VAR 0 8
16826: PUSH
16827: LD_VAR 0 14
16831: ARRAY
16832: PUSH
16833: LD_INT 47
16835: EQUAL
16836: OR
16837: IFFALSE 16878
// begin ruChassisTab = [ 23 , 24 ] ;
16839: LD_ADDR_VAR 0 17
16843: PUSH
16844: LD_INT 23
16846: PUSH
16847: LD_INT 24
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16854: LD_ADDR_OWVAR 37
16858: PUSH
16859: LD_VAR 0 17
16863: PUSH
16864: LD_INT 1
16866: PPUSH
16867: LD_VAR 0 17
16871: PPUSH
16872: CALL_OW 12
16876: ARRAY
16877: ST_TO_ADDR
// end ; end ;
16878: GO 16677
16880: POP
16881: POP
// veh = CreateVehicle ;
16882: LD_ADDR_VAR 0 16
16886: PUSH
16887: CALL_OW 45
16891: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16892: LD_VAR 0 16
16896: PPUSH
16897: LD_VAR 0 1
16901: PPUSH
16902: LD_INT 0
16904: PPUSH
16905: CALL_OW 49
// if vc_control = 1 then
16909: LD_OWVAR 38
16913: PUSH
16914: LD_INT 1
16916: EQUAL
16917: IFFALSE 16974
// begin hc_gallery =  ;
16919: LD_ADDR_OWVAR 33
16923: PUSH
16924: LD_STRING 
16926: ST_TO_ADDR
// hc_name =  ;
16927: LD_ADDR_OWVAR 26
16931: PUSH
16932: LD_STRING 
16934: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16935: LD_INT 0
16937: PPUSH
16938: LD_INT 3
16940: PPUSH
16941: LD_VAR 0 4
16945: PPUSH
16946: CALL_OW 380
// un = CreateHuman ;
16950: LD_ADDR_VAR 0 15
16954: PUSH
16955: CALL_OW 44
16959: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16960: LD_VAR 0 15
16964: PPUSH
16965: LD_VAR 0 16
16969: PPUSH
16970: CALL_OW 52
// end ; i = i + 1 ;
16974: LD_ADDR_VAR 0 13
16978: PUSH
16979: LD_VAR 0 13
16983: PUSH
16984: LD_INT 1
16986: PLUS
16987: ST_TO_ADDR
// end ; until i = vehCount ;
16988: LD_VAR 0 13
16992: PUSH
16993: LD_VAR 0 3
16997: EQUAL
16998: IFFALSE 15624
// repeat wait ( 0 0$1 ) ;
17000: LD_INT 35
17002: PPUSH
17003: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17007: LD_ADDR_VAR 0 20
17011: PUSH
17012: LD_INT 22
17014: PUSH
17015: LD_VAR 0 2
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: LD_INT 21
17026: PUSH
17027: LD_INT 2
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PUSH
17034: LD_INT 24
17036: PUSH
17037: LD_INT 650
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 69
17053: ST_TO_ADDR
// if vehicleOK_list > 0 then
17054: LD_VAR 0 20
17058: PUSH
17059: LD_INT 0
17061: GREATER
17062: IFFALSE 17253
// begin for i in vehicleOK_list do
17064: LD_ADDR_VAR 0 13
17068: PUSH
17069: LD_VAR 0 20
17073: PUSH
17074: FOR_IN
17075: IFFALSE 17251
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17077: LD_ADDR_VAR 0 21
17081: PUSH
17082: LD_INT 22
17084: PUSH
17085: LD_VAR 0 11
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PPUSH
17094: CALL_OW 69
17098: PPUSH
17099: LD_VAR 0 13
17103: PPUSH
17104: CALL_OW 74
17108: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17109: LD_ADDR_VAR 0 22
17113: PUSH
17114: LD_INT 22
17116: PUSH
17117: LD_VAR 0 11
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 2
17128: PUSH
17129: LD_INT 59
17131: PUSH
17132: EMPTY
17133: LIST
17134: PUSH
17135: LD_INT 21
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: LD_INT 21
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: EMPTY
17166: LIST
17167: PPUSH
17168: CALL_OW 69
17172: PPUSH
17173: LD_VAR 0 13
17177: PPUSH
17178: CALL_OW 74
17182: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17183: LD_VAR 0 13
17187: PPUSH
17188: LD_VAR 0 21
17192: PPUSH
17193: CALL_OW 296
17197: PUSH
17198: LD_INT 8
17200: PLUS
17201: PUSH
17202: LD_VAR 0 13
17206: PPUSH
17207: LD_VAR 0 22
17211: PPUSH
17212: CALL_OW 296
17216: LESS
17217: IFFALSE 17235
// begin ComAttackUnit ( i , target1 ) ;
17219: LD_VAR 0 13
17223: PPUSH
17224: LD_VAR 0 21
17228: PPUSH
17229: CALL_OW 115
// end else
17233: GO 17249
// begin ComAttackUnit ( i , target2 ) ;
17235: LD_VAR 0 13
17239: PPUSH
17240: LD_VAR 0 22
17244: PPUSH
17245: CALL_OW 115
// end ; end ;
17249: GO 17074
17251: POP
17252: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17253: LD_INT 22
17255: PUSH
17256: LD_VAR 0 2
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: LD_INT 21
17267: PUSH
17268: LD_INT 2
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PPUSH
17279: CALL_OW 69
17283: PUSH
17284: LD_INT 0
17286: EQUAL
17287: IFFALSE 17000
// end ;
17289: LD_VAR 0 12
17293: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
17305: PPUSH
17306: PPUSH
// for i = 1 to soldierCount do
17307: LD_ADDR_VAR 0 13
17311: PUSH
17312: DOUBLE
17313: LD_INT 1
17315: DEC
17316: ST_TO_ADDR
17317: LD_VAR 0 3
17321: PUSH
17322: FOR_TO
17323: IFFALSE 17405
// begin uc_side = side ;
17325: LD_ADDR_OWVAR 20
17329: PUSH
17330: LD_VAR 0 1
17334: ST_TO_ADDR
// uc_nation = nation ;
17335: LD_ADDR_OWVAR 21
17339: PUSH
17340: LD_VAR 0 2
17344: ST_TO_ADDR
// hc_name =  ;
17345: LD_ADDR_OWVAR 26
17349: PUSH
17350: LD_STRING 
17352: ST_TO_ADDR
// hc_gallery =  ;
17353: LD_ADDR_OWVAR 33
17357: PUSH
17358: LD_STRING 
17360: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17361: LD_INT 0
17363: PPUSH
17364: LD_INT 1
17366: PPUSH
17367: LD_VAR 0 8
17371: PPUSH
17372: CALL_OW 380
// un = CreateHuman ;
17376: LD_ADDR_VAR 0 15
17380: PUSH
17381: CALL_OW 44
17385: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17386: LD_VAR 0 15
17390: PPUSH
17391: LD_VAR 0 9
17395: PPUSH
17396: LD_INT 0
17398: PPUSH
17399: CALL_OW 49
// end ;
17403: GO 17322
17405: POP
17406: POP
// for i = 1 to sniperCount do
17407: LD_ADDR_VAR 0 13
17411: PUSH
17412: DOUBLE
17413: LD_INT 1
17415: DEC
17416: ST_TO_ADDR
17417: LD_VAR 0 4
17421: PUSH
17422: FOR_TO
17423: IFFALSE 17505
// begin uc_side = side ;
17425: LD_ADDR_OWVAR 20
17429: PUSH
17430: LD_VAR 0 1
17434: ST_TO_ADDR
// uc_nation = nation ;
17435: LD_ADDR_OWVAR 21
17439: PUSH
17440: LD_VAR 0 2
17444: ST_TO_ADDR
// hc_name =  ;
17445: LD_ADDR_OWVAR 26
17449: PUSH
17450: LD_STRING 
17452: ST_TO_ADDR
// hc_gallery =  ;
17453: LD_ADDR_OWVAR 33
17457: PUSH
17458: LD_STRING 
17460: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17461: LD_INT 0
17463: PPUSH
17464: LD_INT 5
17466: PPUSH
17467: LD_VAR 0 8
17471: PPUSH
17472: CALL_OW 380
// un = CreateHuman ;
17476: LD_ADDR_VAR 0 15
17480: PUSH
17481: CALL_OW 44
17485: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17486: LD_VAR 0 15
17490: PPUSH
17491: LD_VAR 0 9
17495: PPUSH
17496: LD_INT 0
17498: PPUSH
17499: CALL_OW 49
// end ;
17503: GO 17422
17505: POP
17506: POP
// for i = 1 to bazookCount do
17507: LD_ADDR_VAR 0 13
17511: PUSH
17512: DOUBLE
17513: LD_INT 1
17515: DEC
17516: ST_TO_ADDR
17517: LD_VAR 0 5
17521: PUSH
17522: FOR_TO
17523: IFFALSE 17605
// begin uc_side = side ;
17525: LD_ADDR_OWVAR 20
17529: PUSH
17530: LD_VAR 0 1
17534: ST_TO_ADDR
// uc_nation = nation ;
17535: LD_ADDR_OWVAR 21
17539: PUSH
17540: LD_VAR 0 2
17544: ST_TO_ADDR
// hc_name =  ;
17545: LD_ADDR_OWVAR 26
17549: PUSH
17550: LD_STRING 
17552: ST_TO_ADDR
// hc_gallery =  ;
17553: LD_ADDR_OWVAR 33
17557: PUSH
17558: LD_STRING 
17560: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17561: LD_INT 0
17563: PPUSH
17564: LD_INT 9
17566: PPUSH
17567: LD_VAR 0 8
17571: PPUSH
17572: CALL_OW 380
// un = CreateHuman ;
17576: LD_ADDR_VAR 0 15
17580: PUSH
17581: CALL_OW 44
17585: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17586: LD_VAR 0 15
17590: PPUSH
17591: LD_VAR 0 9
17595: PPUSH
17596: LD_INT 0
17598: PPUSH
17599: CALL_OW 49
// end ;
17603: GO 17522
17605: POP
17606: POP
// for i = 1 to mortalCount do
17607: LD_ADDR_VAR 0 13
17611: PUSH
17612: DOUBLE
17613: LD_INT 1
17615: DEC
17616: ST_TO_ADDR
17617: LD_VAR 0 6
17621: PUSH
17622: FOR_TO
17623: IFFALSE 17705
// begin uc_side = side ;
17625: LD_ADDR_OWVAR 20
17629: PUSH
17630: LD_VAR 0 1
17634: ST_TO_ADDR
// uc_nation = nation ;
17635: LD_ADDR_OWVAR 21
17639: PUSH
17640: LD_VAR 0 2
17644: ST_TO_ADDR
// hc_name =  ;
17645: LD_ADDR_OWVAR 26
17649: PUSH
17650: LD_STRING 
17652: ST_TO_ADDR
// hc_gallery =  ;
17653: LD_ADDR_OWVAR 33
17657: PUSH
17658: LD_STRING 
17660: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17661: LD_INT 0
17663: PPUSH
17664: LD_INT 8
17666: PPUSH
17667: LD_VAR 0 8
17671: PPUSH
17672: CALL_OW 380
// un = CreateHuman ;
17676: LD_ADDR_VAR 0 15
17680: PUSH
17681: CALL_OW 44
17685: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17686: LD_VAR 0 15
17690: PPUSH
17691: LD_VAR 0 9
17695: PPUSH
17696: LD_INT 0
17698: PPUSH
17699: CALL_OW 49
// end ;
17703: GO 17622
17705: POP
17706: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17707: LD_ADDR_VAR 0 18
17711: PUSH
17712: LD_INT 22
17714: PUSH
17715: LD_VAR 0 1
17719: PUSH
17720: EMPTY
17721: LIST
17722: LIST
17723: PUSH
17724: LD_INT 2
17726: PUSH
17727: LD_INT 25
17729: PUSH
17730: LD_INT 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 25
17739: PUSH
17740: LD_INT 5
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PUSH
17747: LD_INT 25
17749: PUSH
17750: LD_INT 8
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 25
17759: PUSH
17760: LD_INT 9
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: PUSH
17774: EMPTY
17775: LIST
17776: LIST
17777: PPUSH
17778: CALL_OW 69
17782: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17783: LD_ADDR_VAR 0 17
17787: PUSH
17788: LD_INT 22
17790: PUSH
17791: LD_VAR 0 1
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 25
17802: PUSH
17803: LD_INT 4
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PPUSH
17814: CALL_OW 69
17818: ST_TO_ADDR
// for i in medic_list do
17819: LD_ADDR_VAR 0 13
17823: PUSH
17824: LD_VAR 0 17
17828: PUSH
17829: FOR_IN
17830: IFFALSE 17848
// ComMoveToArea ( i , healArea ) ;
17832: LD_VAR 0 13
17836: PPUSH
17837: LD_VAR 0 10
17841: PPUSH
17842: CALL_OW 113
17846: GO 17829
17848: POP
17849: POP
// repeat wait ( 0 0$1 ) ;
17850: LD_INT 35
17852: PPUSH
17853: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17857: LD_ADDR_VAR 0 16
17861: PUSH
17862: LD_INT 22
17864: PUSH
17865: LD_VAR 0 1
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: LD_INT 3
17879: PUSH
17880: LD_INT 24
17882: PUSH
17883: LD_INT 550
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 24
17896: PUSH
17897: LD_INT 250
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17918: LD_ADDR_VAR 0 18
17922: PUSH
17923: LD_INT 22
17925: PUSH
17926: LD_VAR 0 1
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PUSH
17935: LD_INT 2
17937: PUSH
17938: LD_INT 25
17940: PUSH
17941: LD_INT 1
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PUSH
17948: LD_INT 25
17950: PUSH
17951: LD_INT 5
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PUSH
17958: LD_INT 25
17960: PUSH
17961: LD_INT 8
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 25
17970: PUSH
17971: LD_INT 9
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: EMPTY
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: PUSH
17985: LD_INT 24
17987: PUSH
17988: LD_INT 1000
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: ST_TO_ADDR
// if medicCount > 0 then
18005: LD_VAR 0 7
18009: PUSH
18010: LD_INT 0
18012: GREATER
18013: IFFALSE 18087
// begin if damageUnit_list > 0 then
18015: LD_VAR 0 16
18019: PUSH
18020: LD_INT 0
18022: GREATER
18023: IFFALSE 18087
// begin for i in damageUnit_list do
18025: LD_ADDR_VAR 0 13
18029: PUSH
18030: LD_VAR 0 16
18034: PUSH
18035: FOR_IN
18036: IFFALSE 18085
// begin ComMoveToArea ( i , healArea ) ;
18038: LD_VAR 0 13
18042: PPUSH
18043: LD_VAR 0 10
18047: PPUSH
18048: CALL_OW 113
// for j in medic_list do
18052: LD_ADDR_VAR 0 14
18056: PUSH
18057: LD_VAR 0 17
18061: PUSH
18062: FOR_IN
18063: IFFALSE 18081
// AddComHeal ( j , i ) ;
18065: LD_VAR 0 14
18069: PPUSH
18070: LD_VAR 0 13
18074: PPUSH
18075: CALL_OW 188
18079: GO 18062
18081: POP
18082: POP
// end ;
18083: GO 18035
18085: POP
18086: POP
// end ; end ; for i in soldiersOK_list do
18087: LD_ADDR_VAR 0 13
18091: PUSH
18092: LD_VAR 0 18
18096: PUSH
18097: FOR_IN
18098: IFFALSE 18274
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18100: LD_ADDR_VAR 0 21
18104: PUSH
18105: LD_INT 22
18107: PUSH
18108: LD_VAR 0 11
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PPUSH
18117: CALL_OW 69
18121: PPUSH
18122: LD_VAR 0 13
18126: PPUSH
18127: CALL_OW 74
18131: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18132: LD_ADDR_VAR 0 22
18136: PUSH
18137: LD_INT 22
18139: PUSH
18140: LD_VAR 0 11
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: LD_INT 2
18151: PUSH
18152: LD_INT 59
18154: PUSH
18155: EMPTY
18156: LIST
18157: PUSH
18158: LD_INT 21
18160: PUSH
18161: LD_INT 1
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 21
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: PPUSH
18191: CALL_OW 69
18195: PPUSH
18196: LD_VAR 0 13
18200: PPUSH
18201: CALL_OW 74
18205: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18206: LD_VAR 0 13
18210: PPUSH
18211: LD_VAR 0 21
18215: PPUSH
18216: CALL_OW 296
18220: PUSH
18221: LD_INT 8
18223: PLUS
18224: PUSH
18225: LD_VAR 0 13
18229: PPUSH
18230: LD_VAR 0 22
18234: PPUSH
18235: CALL_OW 296
18239: LESS
18240: IFFALSE 18258
// begin ComAttackUnit ( i , target1 ) ;
18242: LD_VAR 0 13
18246: PPUSH
18247: LD_VAR 0 21
18251: PPUSH
18252: CALL_OW 115
// end else
18256: GO 18272
// begin ComAttackUnit ( i , target2 ) ;
18258: LD_VAR 0 13
18262: PPUSH
18263: LD_VAR 0 22
18267: PPUSH
18268: CALL_OW 115
// end ; end ;
18272: GO 18097
18274: POP
18275: POP
// for i in soldiersOK_list do
18276: LD_ADDR_VAR 0 13
18280: PUSH
18281: LD_VAR 0 18
18285: PUSH
18286: FOR_IN
18287: IFFALSE 18463
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18289: LD_ADDR_VAR 0 21
18293: PUSH
18294: LD_INT 22
18296: PUSH
18297: LD_VAR 0 11
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PPUSH
18306: CALL_OW 69
18310: PPUSH
18311: LD_VAR 0 13
18315: PPUSH
18316: CALL_OW 74
18320: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18321: LD_ADDR_VAR 0 22
18325: PUSH
18326: LD_INT 22
18328: PUSH
18329: LD_VAR 0 11
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: LD_INT 2
18340: PUSH
18341: LD_INT 59
18343: PUSH
18344: EMPTY
18345: LIST
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 21
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: EMPTY
18378: LIST
18379: PPUSH
18380: CALL_OW 69
18384: PPUSH
18385: LD_VAR 0 13
18389: PPUSH
18390: CALL_OW 74
18394: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18395: LD_VAR 0 13
18399: PPUSH
18400: LD_VAR 0 21
18404: PPUSH
18405: CALL_OW 296
18409: PUSH
18410: LD_INT 8
18412: PLUS
18413: PUSH
18414: LD_VAR 0 13
18418: PPUSH
18419: LD_VAR 0 22
18423: PPUSH
18424: CALL_OW 296
18428: LESS
18429: IFFALSE 18447
// begin ComAttackUnit ( i , target1 ) ;
18431: LD_VAR 0 13
18435: PPUSH
18436: LD_VAR 0 21
18440: PPUSH
18441: CALL_OW 115
// end else
18445: GO 18461
// begin ComAttackUnit ( i , target2 ) ;
18447: LD_VAR 0 13
18451: PPUSH
18452: LD_VAR 0 22
18456: PPUSH
18457: CALL_OW 115
// end ; end ;
18461: GO 18286
18463: POP
18464: POP
// until soldiersOK_list = [ ] ;
18465: LD_VAR 0 18
18469: PUSH
18470: EMPTY
18471: EQUAL
18472: IFFALSE 17850
// end ;
18474: LD_VAR 0 12
18478: RET
// export function TameApemans ; var i , j ; begin
18479: LD_INT 0
18481: PPUSH
18482: PPUSH
18483: PPUSH
// repeat wait ( 0 0$1 ) ;
18484: LD_INT 35
18486: PPUSH
18487: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_INT 22
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 25
18508: PUSH
18509: LD_INT 4
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PUSH
18525: FOR_IN
18526: IFFALSE 18603
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18528: LD_ADDR_VAR 0 3
18532: PUSH
18533: LD_INT 5
18535: PPUSH
18536: LD_INT 22
18538: PUSH
18539: LD_INT 0
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 25
18548: PUSH
18549: LD_INT 12
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 70
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18599
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18568: LD_VAR 0 2
18572: PPUSH
18573: LD_VAR 0 3
18577: PPUSH
18578: CALL_OW 250
18582: PPUSH
18583: LD_VAR 0 3
18587: PPUSH
18588: CALL_OW 251
18592: PPUSH
18593: CALL_OW 191
// end ;
18597: GO 18565
18599: POP
18600: POP
// end ;
18601: GO 18525
18603: POP
18604: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18605: LD_INT 22
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 25
18617: PUSH
18618: LD_INT 4
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PPUSH
18629: CALL_OW 69
18633: PUSH
18634: LD_INT 0
18636: EQUAL
18637: PUSH
18638: LD_INT 5
18640: PPUSH
18641: LD_INT 22
18643: PUSH
18644: LD_INT 0
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: PUSH
18651: LD_INT 25
18653: PUSH
18654: LD_INT 12
18656: PUSH
18657: EMPTY
18658: LIST
18659: LIST
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 70
18669: PUSH
18670: LD_INT 0
18672: EQUAL
18673: OR
18674: IFFALSE 18484
// wait ( 0 0$30 ) ;
18676: LD_INT 1050
18678: PPUSH
18679: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18683: LD_ADDR_VAR 0 2
18687: PUSH
18688: LD_INT 22
18690: PUSH
18691: LD_INT 2
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 25
18700: PUSH
18701: LD_INT 12
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 69
18716: PUSH
18717: FOR_IN
18718: IFFALSE 18782
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18720: LD_VAR 0 2
18724: PPUSH
18725: LD_EXP 43
18729: PPUSH
18730: CALL_OW 250
18734: PPUSH
18735: LD_EXP 43
18739: PPUSH
18740: CALL_OW 251
18744: PPUSH
18745: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18749: LD_VAR 0 2
18753: PPUSH
18754: LD_INT 16
18756: PUSH
18757: LD_INT 15
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 1
18766: PPUSH
18767: LD_INT 2
18769: PPUSH
18770: CALL_OW 12
18774: ARRAY
18775: PPUSH
18776: CALL_OW 336
// end ;
18780: GO 18717
18782: POP
18783: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18784: LD_ADDR_VAR 0 2
18788: PUSH
18789: LD_INT 22
18791: PUSH
18792: LD_INT 2
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: LD_INT 25
18801: PUSH
18802: LD_INT 4
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PUSH
18809: EMPTY
18810: LIST
18811: LIST
18812: PPUSH
18813: CALL_OW 69
18817: PUSH
18818: FOR_IN
18819: IFFALSE 18865
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18821: LD_VAR 0 2
18825: PPUSH
18826: LD_INT 22
18828: PUSH
18829: LD_INT 2
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 30
18838: PUSH
18839: LD_INT 8
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 69
18854: PUSH
18855: LD_INT 1
18857: ARRAY
18858: PPUSH
18859: CALL_OW 120
18863: GO 18818
18865: POP
18866: POP
// end ;
18867: LD_VAR 0 1
18871: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18872: LD_INT 0
18874: PPUSH
18875: PPUSH
18876: PPUSH
18877: PPUSH
18878: PPUSH
18879: PPUSH
18880: PPUSH
18881: PPUSH
18882: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18883: LD_INT 22
18885: PUSH
18886: LD_VAR 0 1
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 21
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: PUSH
18914: LD_VAR 0 3
18918: LESSEQUAL
18919: IFFALSE 19063
// for i = 1 to vehCount do
18921: LD_ADDR_VAR 0 10
18925: PUSH
18926: DOUBLE
18927: LD_INT 1
18929: DEC
18930: ST_TO_ADDR
18931: LD_VAR 0 3
18935: PUSH
18936: FOR_TO
18937: IFFALSE 19061
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18939: LD_ADDR_VAR 0 12
18943: PUSH
18944: LD_VAR 0 5
18948: PUSH
18949: LD_INT 1
18951: PPUSH
18952: LD_VAR 0 5
18956: PPUSH
18957: CALL_OW 12
18961: ARRAY
18962: ST_TO_ADDR
// if randWeapon = 46 then
18963: LD_VAR 0 12
18967: PUSH
18968: LD_INT 46
18970: EQUAL
18971: IFFALSE 19016
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
18973: LD_VAR 0 2
18977: PPUSH
18978: LD_INT 24
18980: PPUSH
18981: LD_VAR 0 6
18985: PPUSH
18986: LD_VAR 0 7
18990: PUSH
18991: LD_INT 1
18993: PPUSH
18994: LD_VAR 0 7
18998: PPUSH
18999: CALL_OW 12
19003: ARRAY
19004: PPUSH
19005: LD_VAR 0 12
19009: PPUSH
19010: CALL_OW 185
19014: GO 19059
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19016: LD_VAR 0 2
19020: PPUSH
19021: LD_VAR 0 8
19025: PPUSH
19026: LD_VAR 0 6
19030: PPUSH
19031: LD_VAR 0 7
19035: PUSH
19036: LD_INT 1
19038: PPUSH
19039: LD_VAR 0 7
19043: PPUSH
19044: CALL_OW 12
19048: ARRAY
19049: PPUSH
19050: LD_VAR 0 12
19054: PPUSH
19055: CALL_OW 185
// end ;
19059: GO 18936
19061: POP
19062: POP
// repeat wait ( 0 0$1 ) ;
19063: LD_INT 35
19065: PPUSH
19066: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19070: LD_INT 22
19072: PUSH
19073: LD_VAR 0 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 21
19084: PUSH
19085: LD_INT 2
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 24
19094: PUSH
19095: LD_INT 250
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: LIST
19106: PPUSH
19107: CALL_OW 69
19111: PUSH
19112: LD_VAR 0 3
19116: GREATEREQUAL
19117: IFFALSE 19063
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19119: LD_INT 22
19121: PUSH
19122: LD_VAR 0 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 21
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 24
19143: PUSH
19144: LD_INT 250
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: LIST
19155: PPUSH
19156: CALL_OW 69
19160: PUSH
19161: LD_VAR 0 3
19165: GREATEREQUAL
19166: IFFALSE 19509
// begin repeat begin wait ( 0 0$1 ) ;
19168: LD_INT 35
19170: PPUSH
19171: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19175: LD_INT 22
19177: PUSH
19178: LD_VAR 0 1
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: LD_INT 21
19189: PUSH
19190: LD_INT 2
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 24
19199: PUSH
19200: LD_INT 651
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: LD_INT 0
19219: GREATER
19220: IFFALSE 19448
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19222: LD_ADDR_VAR 0 10
19226: PUSH
19227: LD_INT 22
19229: PUSH
19230: LD_VAR 0 1
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: PUSH
19239: LD_INT 21
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 24
19251: PUSH
19252: LD_INT 651
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: LIST
19263: PPUSH
19264: CALL_OW 69
19268: PUSH
19269: FOR_IN
19270: IFFALSE 19446
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19272: LD_ADDR_VAR 0 16
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_VAR 0 4
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PPUSH
19289: CALL_OW 69
19293: PPUSH
19294: LD_VAR 0 10
19298: PPUSH
19299: CALL_OW 74
19303: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19304: LD_ADDR_VAR 0 17
19308: PUSH
19309: LD_INT 22
19311: PUSH
19312: LD_VAR 0 4
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: LD_INT 59
19326: PUSH
19327: EMPTY
19328: LIST
19329: PUSH
19330: LD_INT 21
19332: PUSH
19333: LD_INT 1
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PUSH
19340: LD_INT 21
19342: PUSH
19343: LD_INT 2
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: PPUSH
19363: CALL_OW 69
19367: PPUSH
19368: LD_VAR 0 10
19372: PPUSH
19373: CALL_OW 74
19377: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19378: LD_VAR 0 10
19382: PPUSH
19383: LD_VAR 0 16
19387: PPUSH
19388: CALL_OW 296
19392: PUSH
19393: LD_INT 8
19395: PLUS
19396: PUSH
19397: LD_VAR 0 10
19401: PPUSH
19402: LD_VAR 0 17
19406: PPUSH
19407: CALL_OW 296
19411: LESS
19412: IFFALSE 19430
// begin ComAttackUnit ( i , target1 ) ;
19414: LD_VAR 0 10
19418: PPUSH
19419: LD_VAR 0 16
19423: PPUSH
19424: CALL_OW 115
// end else
19428: GO 19444
// begin ComAttackUnit ( i , target2 ) ;
19430: LD_VAR 0 10
19434: PPUSH
19435: LD_VAR 0 17
19439: PPUSH
19440: CALL_OW 115
// end ; end ;
19444: GO 19269
19446: POP
19447: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19448: LD_INT 22
19450: PUSH
19451: LD_VAR 0 1
19455: PUSH
19456: EMPTY
19457: LIST
19458: LIST
19459: PUSH
19460: LD_INT 21
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PPUSH
19474: CALL_OW 69
19478: PUSH
19479: LD_INT 0
19481: EQUAL
19482: PUSH
19483: LD_INT 22
19485: PUSH
19486: LD_VAR 0 4
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: EMPTY
19496: LIST
19497: PPUSH
19498: CALL_OW 69
19502: PUSH
19503: LD_INT 0
19505: EQUAL
19506: OR
19507: IFFALSE 19168
// end ; end ;
19509: LD_VAR 0 9
19513: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
19518: PPUSH
19519: PPUSH
// r := 100 ;
19520: LD_ADDR_VAR 0 5
19524: PUSH
19525: LD_INT 100
19527: ST_TO_ADDR
// x := 0 ;
19528: LD_ADDR_VAR 0 6
19532: PUSH
19533: LD_INT 0
19535: ST_TO_ADDR
// while ( x < n ) do
19536: LD_VAR 0 6
19540: PUSH
19541: LD_VAR 0 2
19545: LESS
19546: IFFALSE 19833
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19548: LD_ADDR_VAR 0 4
19552: PUSH
19553: DOUBLE
19554: LD_INT 1
19556: DEC
19557: ST_TO_ADDR
19558: LD_VAR 0 1
19562: PPUSH
19563: LD_INT 0
19565: PPUSH
19566: CALL_OW 517
19570: PUSH
19571: LD_INT 1
19573: ARRAY
19574: PUSH
19575: FOR_TO
19576: IFFALSE 19829
// begin if r > 50 then
19578: LD_VAR 0 5
19582: PUSH
19583: LD_INT 50
19585: GREATER
19586: IFFALSE 19805
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19588: LD_VAR 0 1
19592: PPUSH
19593: LD_INT 0
19595: PPUSH
19596: CALL_OW 517
19600: PUSH
19601: LD_INT 1
19603: ARRAY
19604: PUSH
19605: LD_VAR 0 4
19609: ARRAY
19610: PPUSH
19611: LD_VAR 0 1
19615: PPUSH
19616: LD_INT 0
19618: PPUSH
19619: CALL_OW 517
19623: PUSH
19624: LD_INT 2
19626: ARRAY
19627: PUSH
19628: LD_VAR 0 4
19632: ARRAY
19633: PPUSH
19634: CALL_OW 458
19638: NOT
19639: IFFALSE 19789
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19641: LD_VAR 0 1
19645: PPUSH
19646: LD_INT 0
19648: PPUSH
19649: CALL_OW 517
19653: PUSH
19654: LD_INT 1
19656: ARRAY
19657: PUSH
19658: LD_VAR 0 4
19662: ARRAY
19663: PPUSH
19664: LD_VAR 0 1
19668: PPUSH
19669: LD_INT 0
19671: PPUSH
19672: CALL_OW 517
19676: PUSH
19677: LD_INT 2
19679: ARRAY
19680: PUSH
19681: LD_VAR 0 4
19685: ARRAY
19686: PPUSH
19687: LD_INT 5
19689: PPUSH
19690: LD_INT 0
19692: PPUSH
19693: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19697: LD_ADDR_EXP 50
19701: PUSH
19702: LD_EXP 50
19706: PPUSH
19707: LD_INT 1
19709: PPUSH
19710: LD_VAR 0 1
19714: PPUSH
19715: LD_INT 0
19717: PPUSH
19718: CALL_OW 517
19722: PUSH
19723: LD_INT 1
19725: ARRAY
19726: PUSH
19727: LD_VAR 0 4
19731: ARRAY
19732: PUSH
19733: LD_VAR 0 1
19737: PPUSH
19738: LD_INT 0
19740: PPUSH
19741: CALL_OW 517
19745: PUSH
19746: LD_INT 2
19748: ARRAY
19749: PUSH
19750: LD_VAR 0 4
19754: ARRAY
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PPUSH
19760: CALL_OW 2
19764: ST_TO_ADDR
// r := 0 ;
19765: LD_ADDR_VAR 0 5
19769: PUSH
19770: LD_INT 0
19772: ST_TO_ADDR
// x := x + 1 ;
19773: LD_ADDR_VAR 0 6
19777: PUSH
19778: LD_VAR 0 6
19782: PUSH
19783: LD_INT 1
19785: PLUS
19786: ST_TO_ADDR
// end else
19787: GO 19803
// r := r + 35 ;
19789: LD_ADDR_VAR 0 5
19793: PUSH
19794: LD_VAR 0 5
19798: PUSH
19799: LD_INT 35
19801: PLUS
19802: ST_TO_ADDR
// end else
19803: GO 19827
// r := r + rand ( 10 , 25 ) ;
19805: LD_ADDR_VAR 0 5
19809: PUSH
19810: LD_VAR 0 5
19814: PUSH
19815: LD_INT 10
19817: PPUSH
19818: LD_INT 25
19820: PPUSH
19821: CALL_OW 12
19825: PLUS
19826: ST_TO_ADDR
// end ;
19827: GO 19575
19829: POP
19830: POP
19831: GO 19536
// end ; end_of_file
19833: LD_VAR 0 3
19837: RET
// every 0 0$1 trigger russianAI = 1 do
19838: LD_EXP 39
19842: PUSH
19843: LD_INT 1
19845: EQUAL
19846: IFFALSE 20065
19848: GO 19850
19850: DISABLE
// begin enable ;
19851: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19852: LD_INT 3
19854: PPUSH
19855: LD_EXP 30
19859: PPUSH
19860: CALL 14476 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19864: LD_INT 3
19866: PPUSH
19867: LD_EXP 42
19871: PPUSH
19872: CALL 14836 0 2
// if ruPossition = 1 then
19876: LD_EXP 41
19880: PUSH
19881: LD_INT 1
19883: EQUAL
19884: IFFALSE 19939
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19886: LD_INT 3
19888: PPUSH
19889: LD_INT 13
19891: PPUSH
19892: LD_INT 10
19894: PPUSH
19895: LD_INT 22
19897: PUSH
19898: LD_INT 3
19900: PUSH
19901: EMPTY
19902: LIST
19903: LIST
19904: PUSH
19905: LD_INT 21
19907: PUSH
19908: LD_INT 3
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: PUSH
19915: LD_INT 30
19917: PUSH
19918: LD_INT 8
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: PPUSH
19930: CALL_OW 69
19934: PPUSH
19935: CALL 15042 0 4
// if ruPossition = 2 then
19939: LD_EXP 41
19943: PUSH
19944: LD_INT 2
19946: EQUAL
19947: IFFALSE 20002
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19949: LD_INT 3
19951: PPUSH
19952: LD_INT 14
19954: PPUSH
19955: LD_INT 11
19957: PPUSH
19958: LD_INT 22
19960: PUSH
19961: LD_INT 3
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: LD_INT 21
19970: PUSH
19971: LD_INT 3
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PUSH
19978: LD_INT 30
19980: PUSH
19981: LD_INT 8
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: PPUSH
19993: CALL_OW 69
19997: PPUSH
19998: CALL 15042 0 4
// if ruPossition = 3 then
20002: LD_EXP 41
20006: PUSH
20007: LD_INT 3
20009: EQUAL
20010: IFFALSE 20065
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20012: LD_INT 3
20014: PPUSH
20015: LD_INT 15
20017: PPUSH
20018: LD_INT 12
20020: PPUSH
20021: LD_INT 22
20023: PUSH
20024: LD_INT 3
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: LD_INT 21
20033: PUSH
20034: LD_INT 3
20036: PUSH
20037: EMPTY
20038: LIST
20039: LIST
20040: PUSH
20041: LD_INT 30
20043: PUSH
20044: LD_INT 8
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: LIST
20055: PPUSH
20056: CALL_OW 69
20060: PPUSH
20061: CALL 15042 0 4
// end ;
20065: END
// every 0 0$1 do
20066: GO 20068
20068: DISABLE
// begin enable ;
20069: ENABLE
// if ruPossition = 1 then
20070: LD_EXP 41
20074: PUSH
20075: LD_INT 1
20077: EQUAL
20078: IFFALSE 20090
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20080: LD_INT 3
20082: PPUSH
20083: LD_INT 10
20085: PPUSH
20086: CALL 14113 0 2
// if ruPossition = 2 then
20090: LD_EXP 41
20094: PUSH
20095: LD_INT 2
20097: EQUAL
20098: IFFALSE 20110
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20100: LD_INT 3
20102: PPUSH
20103: LD_INT 11
20105: PPUSH
20106: CALL 14113 0 2
// if ruPossition = 3 then
20110: LD_EXP 41
20114: PUSH
20115: LD_INT 3
20117: EQUAL
20118: IFFALSE 20130
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20120: LD_INT 3
20122: PPUSH
20123: LD_INT 12
20125: PPUSH
20126: CALL 14113 0 2
// IntBazooka ( 3 , 1 ) ;
20130: LD_INT 3
20132: PPUSH
20133: LD_INT 1
20135: PPUSH
20136: CALL 12912 0 2
// IntBazooka ( 6 , 1 ) ;
20140: LD_INT 6
20142: PPUSH
20143: LD_INT 1
20145: PPUSH
20146: CALL 12912 0 2
// end ;
20150: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20151: LD_EXP 39
20155: PUSH
20156: LD_INT 1
20158: EQUAL
20159: PUSH
20160: LD_EXP 35
20164: PPUSH
20165: CALL_OW 302
20169: AND
20170: PUSH
20171: LD_EXP 35
20175: PPUSH
20176: CALL_OW 255
20180: PUSH
20181: LD_INT 3
20183: EQUAL
20184: AND
20185: PUSH
20186: LD_INT 22
20188: PUSH
20189: LD_INT 3
20191: PUSH
20192: EMPTY
20193: LIST
20194: LIST
20195: PUSH
20196: LD_INT 21
20198: PUSH
20199: LD_INT 2
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: PUSH
20206: LD_INT 33
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: PPUSH
20221: CALL_OW 69
20225: PUSH
20226: LD_INT 0
20228: EQUAL
20229: AND
20230: IFFALSE 20438
20232: GO 20234
20234: DISABLE
// begin enable ;
20235: ENABLE
// if Difficulty = 1 then
20236: LD_OWVAR 67
20240: PUSH
20241: LD_INT 1
20243: EQUAL
20244: IFFALSE 20306
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20246: LD_INT 3
20248: PPUSH
20249: LD_EXP 35
20253: PPUSH
20254: LD_INT 5
20256: PPUSH
20257: LD_INT 8
20259: PPUSH
20260: CALL_OW 12
20264: PPUSH
20265: LD_INT 1
20267: PPUSH
20268: LD_INT 43
20270: PUSH
20271: LD_INT 44
20273: PUSH
20274: LD_INT 45
20276: PUSH
20277: LD_INT 46
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: LIST
20284: LIST
20285: PPUSH
20286: LD_INT 1
20288: PPUSH
20289: LD_INT 1
20291: PUSH
20292: LD_INT 3
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PPUSH
20299: LD_INT 22
20301: PPUSH
20302: CALL 18872 0 8
// if Difficulty = 2 then
20306: LD_OWVAR 67
20310: PUSH
20311: LD_INT 2
20313: EQUAL
20314: IFFALSE 20372
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20316: LD_INT 3
20318: PPUSH
20319: LD_EXP 35
20323: PPUSH
20324: LD_INT 6
20326: PPUSH
20327: LD_INT 8
20329: PPUSH
20330: CALL_OW 12
20334: PPUSH
20335: LD_INT 1
20337: PPUSH
20338: LD_INT 44
20340: PUSH
20341: LD_INT 45
20343: PUSH
20344: LD_INT 46
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: LIST
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: LD_INT 1
20357: PUSH
20358: LD_INT 3
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PPUSH
20365: LD_INT 22
20367: PPUSH
20368: CALL 18872 0 8
// if Difficulty = 3 then
20372: LD_OWVAR 67
20376: PUSH
20377: LD_INT 3
20379: EQUAL
20380: IFFALSE 20438
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20382: LD_INT 3
20384: PPUSH
20385: LD_EXP 35
20389: PPUSH
20390: LD_INT 7
20392: PPUSH
20393: LD_INT 8
20395: PPUSH
20396: CALL_OW 12
20400: PPUSH
20401: LD_INT 1
20403: PPUSH
20404: LD_INT 44
20406: PUSH
20407: LD_INT 45
20409: PUSH
20410: LD_INT 46
20412: PUSH
20413: EMPTY
20414: LIST
20415: LIST
20416: LIST
20417: PPUSH
20418: LD_INT 1
20420: PPUSH
20421: LD_INT 1
20423: PUSH
20424: LD_INT 3
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PPUSH
20431: LD_INT 22
20433: PPUSH
20434: CALL 18872 0 8
// end ;
20438: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20439: LD_EXP 50
20443: PUSH
20444: LD_EXP 49
20448: AND
20449: IFFALSE 20570
20451: GO 20453
20453: DISABLE
20454: LD_INT 0
20456: PPUSH
// begin enable ;
20457: ENABLE
// for i in arabianMines do
20458: LD_ADDR_VAR 0 1
20462: PUSH
20463: LD_EXP 50
20467: PUSH
20468: FOR_IN
20469: IFFALSE 20568
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20471: LD_INT 22
20473: PUSH
20474: LD_INT 1
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: PUSH
20481: LD_INT 92
20483: PUSH
20484: LD_VAR 0 1
20488: PUSH
20489: LD_INT 1
20491: ARRAY
20492: PUSH
20493: LD_VAR 0 1
20497: PUSH
20498: LD_INT 2
20500: ARRAY
20501: PUSH
20502: LD_INT 3
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PPUSH
20515: CALL_OW 69
20519: IFFALSE 20566
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20521: LD_VAR 0 1
20525: PUSH
20526: LD_INT 1
20528: ARRAY
20529: PPUSH
20530: LD_VAR 0 1
20534: PUSH
20535: LD_INT 2
20537: ARRAY
20538: PPUSH
20539: LD_INT 5
20541: PPUSH
20542: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20546: LD_ADDR_EXP 50
20550: PUSH
20551: LD_EXP 50
20555: PPUSH
20556: LD_VAR 0 1
20560: PPUSH
20561: CALL_OW 3
20565: ST_TO_ADDR
// end ; end ;
20566: GO 20468
20568: POP
20569: POP
// end ; end_of_file
20570: PPOPN 1
20572: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 255
20582: PUSH
20583: LD_INT 4
20585: EQUAL
20586: IFFALSE 20600
// SetBName ( building , epsilon ) ;
20588: LD_VAR 0 1
20592: PPUSH
20593: LD_STRING epsilon
20595: PPUSH
20596: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20600: LD_VAR 0 1
20604: PPUSH
20605: CALL_OW 255
20609: PUSH
20610: LD_INT 1
20612: EQUAL
20613: PUSH
20614: LD_VAR 0 1
20618: PPUSH
20619: CALL_OW 266
20623: PUSH
20624: LD_INT 0
20626: EQUAL
20627: AND
20628: IFFALSE 20642
// SetBName ( building , epsilon ) ;
20630: LD_VAR 0 1
20634: PPUSH
20635: LD_STRING epsilon
20637: PPUSH
20638: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20642: LD_VAR 0 1
20646: PPUSH
20647: CALL_OW 255
20651: PUSH
20652: LD_INT 3
20654: EQUAL
20655: PUSH
20656: LD_VAR 0 1
20660: PPUSH
20661: CALL_OW 266
20665: PUSH
20666: LD_INT 0
20668: EQUAL
20669: AND
20670: IFFALSE 20684
// SetBName ( building , chuikov ) ;
20672: LD_VAR 0 1
20676: PPUSH
20677: LD_STRING chuikov
20679: PPUSH
20680: CALL_OW 500
// if GetSide ( building ) = 2 then
20684: LD_VAR 0 1
20688: PPUSH
20689: CALL_OW 255
20693: PUSH
20694: LD_INT 2
20696: EQUAL
20697: IFFALSE 20753
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20699: LD_VAR 0 1
20703: PPUSH
20704: CALL_OW 266
20708: PUSH
20709: LD_INT 6
20711: EQUAL
20712: PUSH
20713: LD_VAR 0 1
20717: PPUSH
20718: CALL_OW 266
20722: PUSH
20723: LD_INT 9
20725: EQUAL
20726: OR
20727: IFFALSE 20753
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20729: LD_VAR 0 1
20733: PPUSH
20734: LD_INT 10
20736: PPUSH
20737: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20741: LD_VAR 0 1
20745: PPUSH
20746: LD_INT 11
20748: PPUSH
20749: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 255
20762: PUSH
20763: LD_INT 3
20765: EQUAL
20766: IFFALSE 20792
// begin if GetBType ( building ) = 2 then
20768: LD_VAR 0 1
20772: PPUSH
20773: CALL_OW 266
20777: PUSH
20778: LD_INT 2
20780: EQUAL
20781: IFFALSE 20792
// AddComUpgrade ( building ) ;
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 206
// end ; end ;
20792: PPOPN 2
20794: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20795: LD_INT 0
20797: PPUSH
20798: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20799: LD_VAR 0 1
20803: PUSH
20804: LD_INT 22
20806: PUSH
20807: LD_INT 3
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: PUSH
20814: LD_INT 23
20816: PUSH
20817: LD_INT 3
20819: PUSH
20820: EMPTY
20821: LIST
20822: LIST
20823: PUSH
20824: LD_INT 21
20826: PUSH
20827: LD_INT 2
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PUSH
20834: EMPTY
20835: LIST
20836: LIST
20837: LIST
20838: PPUSH
20839: CALL_OW 69
20843: IN
20844: PUSH
20845: LD_EXP 58
20849: NOT
20850: AND
20851: IFFALSE 20882
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20853: LD_ADDR_EXP 58
20857: PUSH
20858: LD_VAR 0 1
20862: PPUSH
20863: CALL_OW 250
20867: PUSH
20868: LD_VAR 0 1
20872: PPUSH
20873: CALL_OW 251
20877: PUSH
20878: EMPTY
20879: LIST
20880: LIST
20881: ST_TO_ADDR
// end ;
20882: PPOPN 3
20884: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20885: LD_VAR 0 2
20889: PPUSH
20890: CALL_OW 255
20894: PUSH
20895: LD_INT 3
20897: EQUAL
20898: PUSH
20899: LD_EXP 35
20903: PPUSH
20904: CALL_OW 255
20908: PUSH
20909: LD_INT 3
20911: EQUAL
20912: AND
20913: PUSH
20914: LD_EXP 35
20918: PPUSH
20919: CALL_OW 302
20923: AND
20924: IFFALSE 20940
// ComEnterUnit ( human , ruFab ) ;
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_EXP 35
20935: PPUSH
20936: CALL_OW 120
// end ;
20940: PPOPN 2
20942: END
// on BuildingComplete ( building ) do var i ;
20943: LD_INT 0
20945: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 255
20955: PUSH
20956: LD_INT 1
20958: EQUAL
20959: PUSH
20960: LD_EXP 61
20964: PUSH
20965: LD_INT 0
20967: EQUAL
20968: AND
20969: IFFALSE 21171
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
20971: LD_VAR 0 1
20975: PPUSH
20976: CALL_OW 266
20980: PUSH
20981: LD_INT 26
20983: EQUAL
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 266
20994: PUSH
20995: LD_INT 27
20997: EQUAL
20998: OR
20999: PUSH
21000: LD_VAR 0 1
21004: PPUSH
21005: CALL_OW 266
21009: PUSH
21010: LD_INT 28
21012: EQUAL
21013: OR
21014: IFFALSE 21171
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21016: LD_INT 22
21018: PUSH
21019: LD_INT 1
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 2
21028: PUSH
21029: LD_INT 30
21031: PUSH
21032: LD_INT 7
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PUSH
21039: LD_INT 30
21041: PUSH
21042: LD_INT 8
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: PUSH
21063: LD_INT 0
21065: GREATER
21066: IFFALSE 21171
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21068: LD_ADDR_VAR 0 2
21072: PUSH
21073: LD_INT 22
21075: PUSH
21076: LD_INT 1
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: LD_INT 2
21085: PUSH
21086: LD_INT 30
21088: PUSH
21089: LD_INT 7
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PUSH
21096: LD_INT 30
21098: PUSH
21099: LD_INT 8
21101: PUSH
21102: EMPTY
21103: LIST
21104: LIST
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PPUSH
21115: CALL_OW 69
21119: PUSH
21120: FOR_IN
21121: IFFALSE 21169
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21123: LD_VAR 0 2
21127: PPUSH
21128: LD_INT 1
21130: PPUSH
21131: CALL_OW 268
21135: PUSH
21136: LD_INT 11
21138: EQUAL
21139: PUSH
21140: LD_VAR 0 2
21144: PPUSH
21145: LD_INT 2
21147: PPUSH
21148: CALL_OW 268
21152: PUSH
21153: LD_INT 11
21155: EQUAL
21156: OR
21157: IFFALSE 21167
// eventVar1 = 1 ;
21159: LD_ADDR_EXP 61
21163: PUSH
21164: LD_INT 1
21166: ST_TO_ADDR
21167: GO 21120
21169: POP
21170: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 255
21180: PUSH
21181: LD_INT 3
21183: EQUAL
21184: IFFALSE 21664
// begin if GetBType ( building ) = b_depot then
21186: LD_VAR 0 1
21190: PPUSH
21191: CALL_OW 266
21195: PUSH
21196: LD_INT 0
21198: EQUAL
21199: IFFALSE 21271
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21201: LD_VAR 0 1
21205: PPUSH
21206: CALL_OW 274
21210: PPUSH
21211: LD_INT 1
21213: PPUSH
21214: LD_INT 5000
21216: PPUSH
21217: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 274
21230: PPUSH
21231: LD_INT 2
21233: PPUSH
21234: LD_INT 5000
21236: PPUSH
21237: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL_OW 274
21250: PPUSH
21251: LD_INT 3
21253: PPUSH
21254: LD_INT 5000
21256: PPUSH
21257: CALL_OW 277
// ruDepot = building ;
21261: LD_ADDR_EXP 30
21265: PUSH
21266: LD_VAR 0 1
21270: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21271: LD_VAR 0 1
21275: PPUSH
21276: CALL_OW 266
21280: PUSH
21281: LD_INT 0
21283: EQUAL
21284: PUSH
21285: LD_VAR 0 1
21289: PPUSH
21290: CALL_OW 266
21294: PUSH
21295: LD_INT 2
21297: EQUAL
21298: OR
21299: PUSH
21300: LD_VAR 0 1
21304: PPUSH
21305: CALL_OW 266
21309: PUSH
21310: LD_INT 4
21312: EQUAL
21313: OR
21314: IFFALSE 21325
// ComUpgrade ( building ) ;
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 146
// if GetBType ( building ) = b_lab then
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 266
21334: PUSH
21335: LD_INT 6
21337: EQUAL
21338: IFFALSE 21541
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21340: LD_INT 22
21342: PUSH
21343: LD_INT 3
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: LD_INT 30
21352: PUSH
21353: LD_INT 8
21355: PUSH
21356: EMPTY
21357: LIST
21358: LIST
21359: PUSH
21360: EMPTY
21361: LIST
21362: LIST
21363: PPUSH
21364: CALL_OW 69
21368: PUSH
21369: LD_INT 0
21371: EQUAL
21372: IFFALSE 21410
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21374: LD_VAR 0 1
21378: PPUSH
21379: LD_INT 10
21381: PPUSH
21382: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21386: LD_VAR 0 1
21390: PPUSH
21391: LD_INT 12
21393: PPUSH
21394: CALL_OW 207
// ruLab1 = building ;
21398: LD_ADDR_EXP 31
21402: PUSH
21403: LD_VAR 0 1
21407: ST_TO_ADDR
// end else
21408: GO 21444
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21410: LD_VAR 0 1
21414: PPUSH
21415: LD_INT 11
21417: PPUSH
21418: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21422: LD_VAR 0 1
21426: PPUSH
21427: LD_INT 14
21429: PPUSH
21430: CALL_OW 207
// ruLab2 = building ;
21434: LD_ADDR_EXP 32
21438: PUSH
21439: LD_VAR 0 1
21443: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21444: LD_INT 3
21446: PPUSH
21447: LD_VAR 0 1
21451: PPUSH
21452: LD_INT 3
21454: PPUSH
21455: CALL 14028 0 3
// if ruDestroyedBuildings > 0 then
21459: LD_EXP 42
21463: PUSH
21464: LD_INT 0
21466: GREATER
21467: IFFALSE 21541
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21469: LD_ADDR_EXP 42
21473: PUSH
21474: LD_EXP 42
21478: PPUSH
21479: LD_INT 1
21481: PPUSH
21482: CALL_OW 3
21486: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21487: LD_ADDR_EXP 42
21491: PUSH
21492: LD_EXP 42
21496: PPUSH
21497: LD_INT 1
21499: PPUSH
21500: CALL_OW 3
21504: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21505: LD_ADDR_EXP 42
21509: PUSH
21510: LD_EXP 42
21514: PPUSH
21515: LD_INT 1
21517: PPUSH
21518: CALL_OW 3
21522: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21523: LD_ADDR_EXP 42
21527: PUSH
21528: LD_EXP 42
21532: PPUSH
21533: LD_INT 1
21535: PPUSH
21536: CALL_OW 3
21540: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21541: LD_VAR 0 1
21545: PPUSH
21546: CALL_OW 266
21550: PUSH
21551: LD_INT 32
21553: EQUAL
21554: IFFALSE 21591
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21556: LD_VAR 0 1
21560: PPUSH
21561: LD_INT 44
21563: PUSH
21564: LD_INT 45
21566: PUSH
21567: LD_INT 46
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 1
21577: PPUSH
21578: LD_INT 3
21580: PPUSH
21581: CALL_OW 12
21585: ARRAY
21586: PPUSH
21587: CALL_OW 208
// if GetBType ( building ) = b_turret then
21591: LD_VAR 0 1
21595: PPUSH
21596: CALL_OW 266
21600: PUSH
21601: LD_INT 33
21603: EQUAL
21604: IFFALSE 21641
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21606: LD_VAR 0 1
21610: PPUSH
21611: LD_INT 44
21613: PUSH
21614: LD_INT 45
21616: PUSH
21617: LD_INT 46
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 1
21627: PPUSH
21628: LD_INT 3
21630: PPUSH
21631: CALL_OW 12
21635: ARRAY
21636: PPUSH
21637: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 266
21650: PUSH
21651: LD_INT 24
21653: EQUAL
21654: IFFALSE 21664
// russianAI = 1 ;
21656: LD_ADDR_EXP 39
21660: PUSH
21661: LD_INT 1
21663: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 255
21673: PUSH
21674: LD_INT 2
21676: EQUAL
21677: IFFALSE 22403
// begin if GetBType ( building ) = b_depot then
21679: LD_VAR 0 1
21683: PPUSH
21684: CALL_OW 266
21688: PUSH
21689: LD_INT 0
21691: EQUAL
21692: IFFALSE 21778
// begin arDepot = building ;
21694: LD_ADDR_EXP 43
21698: PUSH
21699: LD_VAR 0 1
21703: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21704: LD_INT 38
21706: PUSH
21707: LD_INT 47
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PPUSH
21714: LD_INT 71
21716: PPUSH
21717: LD_INT 19
21719: PPUSH
21720: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21724: LD_VAR 0 1
21728: PPUSH
21729: CALL_OW 274
21733: PPUSH
21734: LD_INT 1
21736: PPUSH
21737: LD_INT 500
21739: PPUSH
21740: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 274
21753: PPUSH
21754: LD_INT 3
21756: PPUSH
21757: LD_INT 30
21759: PPUSH
21760: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21764: LD_EXP 26
21768: PPUSH
21769: LD_EXP 43
21773: PPUSH
21774: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21778: LD_VAR 0 1
21782: PPUSH
21783: CALL_OW 266
21787: PUSH
21788: LD_INT 6
21790: EQUAL
21791: PUSH
21792: LD_VAR 0 1
21796: PPUSH
21797: CALL_OW 266
21801: PUSH
21802: LD_INT 9
21804: EQUAL
21805: OR
21806: IFFALSE 21857
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21808: LD_VAR 0 1
21812: PPUSH
21813: LD_INT 10
21815: PPUSH
21816: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21820: LD_VAR 0 1
21824: PPUSH
21825: LD_INT 11
21827: PPUSH
21828: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21832: LD_INT 2
21834: PPUSH
21835: LD_VAR 0 1
21839: PPUSH
21840: LD_INT 2
21842: PPUSH
21843: CALL 14028 0 3
// arLab = building ;
21847: LD_ADDR_EXP 44
21851: PUSH
21852: LD_VAR 0 1
21856: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21857: LD_VAR 0 1
21861: PPUSH
21862: CALL_OW 266
21866: PUSH
21867: LD_INT 2
21869: EQUAL
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 266
21880: PUSH
21881: LD_INT 4
21883: EQUAL
21884: OR
21885: IFFALSE 21896
// ComUpgrade ( building ) ;
21887: LD_VAR 0 1
21891: PPUSH
21892: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 266
21905: PUSH
21906: LD_INT 27
21908: EQUAL
21909: IFFALSE 22403
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21911: LD_INT 22
21913: PUSH
21914: LD_INT 2
21916: PUSH
21917: EMPTY
21918: LIST
21919: LIST
21920: PUSH
21921: LD_INT 30
21923: PUSH
21924: LD_INT 27
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: PUSH
21931: EMPTY
21932: LIST
21933: LIST
21934: PPUSH
21935: CALL_OW 69
21939: PUSH
21940: LD_INT 2
21942: EQUAL
21943: IFFALSE 22403
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
21945: LD_ADDR_VAR 0 2
21949: PUSH
21950: LD_INT 22
21952: PUSH
21953: LD_INT 2
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 21
21962: PUSH
21963: LD_INT 1
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 25
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: PPUSH
21985: CALL_OW 69
21989: PUSH
21990: LD_INT 1
21992: ARRAY
21993: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
21994: LD_VAR 0 2
21998: PPUSH
21999: LD_INT 92
22001: PPUSH
22002: LD_INT 34
22004: PPUSH
22005: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22009: LD_VAR 0 2
22013: PPUSH
22014: LD_INT 82
22016: PPUSH
22017: LD_INT 57
22019: PPUSH
22020: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22024: LD_VAR 0 2
22028: PPUSH
22029: LD_INT 36
22031: PPUSH
22032: LD_INT 28
22034: PPUSH
22035: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22039: LD_INT 22
22041: PUSH
22042: LD_INT 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 21
22051: PUSH
22052: LD_INT 1
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 25
22061: PUSH
22062: LD_INT 2
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: LIST
22073: PPUSH
22074: CALL_OW 69
22078: PPUSH
22079: LD_EXP 43
22083: PPUSH
22084: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22088: LD_INT 22
22090: PUSH
22091: LD_INT 2
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 25
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 3
22110: PUSH
22111: LD_INT 54
22113: PUSH
22114: EMPTY
22115: LIST
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: LD_INT 60
22122: PUSH
22123: EMPTY
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: PUSH
22145: LD_INT 1
22147: ARRAY
22148: PPUSH
22149: LD_INT 22
22151: PUSH
22152: LD_INT 2
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 30
22161: PUSH
22162: LD_INT 31
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 58
22171: PUSH
22172: EMPTY
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: PPUSH
22180: CALL_OW 69
22184: PUSH
22185: LD_INT 1
22187: ARRAY
22188: PPUSH
22189: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22193: LD_INT 22
22195: PUSH
22196: LD_INT 2
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 25
22205: PUSH
22206: LD_INT 1
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: PUSH
22213: LD_INT 3
22215: PUSH
22216: LD_INT 54
22218: PUSH
22219: EMPTY
22220: LIST
22221: PUSH
22222: LD_INT 3
22224: PUSH
22225: LD_INT 60
22227: PUSH
22228: EMPTY
22229: LIST
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: LIST
22244: PPUSH
22245: CALL_OW 69
22249: PUSH
22250: LD_INT 2
22252: ARRAY
22253: PPUSH
22254: LD_INT 22
22256: PUSH
22257: LD_INT 2
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 30
22266: PUSH
22267: LD_INT 31
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 58
22276: PUSH
22277: EMPTY
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 69
22289: PUSH
22290: LD_INT 2
22292: ARRAY
22293: PPUSH
22294: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22298: LD_INT 22
22300: PUSH
22301: LD_INT 2
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: PUSH
22308: LD_INT 25
22310: PUSH
22311: LD_INT 1
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: PUSH
22318: LD_INT 3
22320: PUSH
22321: LD_INT 54
22323: PUSH
22324: EMPTY
22325: LIST
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: LD_INT 60
22332: PUSH
22333: EMPTY
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: LIST
22349: PPUSH
22350: CALL_OW 69
22354: PUSH
22355: LD_INT 3
22357: ARRAY
22358: PPUSH
22359: LD_INT 22
22361: PUSH
22362: LD_INT 2
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 30
22371: PUSH
22372: LD_INT 31
22374: PUSH
22375: EMPTY
22376: LIST
22377: LIST
22378: PUSH
22379: LD_INT 58
22381: PUSH
22382: EMPTY
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: PUSH
22395: LD_INT 3
22397: ARRAY
22398: PPUSH
22399: CALL_OW 120
// end ; end ; end ;
22403: PPOPN 2
22405: END
// on UpgradeComplete ( building ) do var i ;
22406: LD_INT 0
22408: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22409: LD_VAR 0 1
22413: PPUSH
22414: CALL_OW 255
22418: PUSH
22419: LD_INT 1
22421: EQUAL
22422: PUSH
22423: LD_EXP 61
22427: PUSH
22428: LD_INT 0
22430: EQUAL
22431: AND
22432: IFFALSE 22630
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22434: LD_VAR 0 1
22438: PPUSH
22439: CALL_OW 266
22443: PUSH
22444: LD_INT 7
22446: EQUAL
22447: PUSH
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 266
22457: PUSH
22458: LD_INT 8
22460: EQUAL
22461: OR
22462: IFFALSE 22630
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22464: LD_INT 22
22466: PUSH
22467: LD_INT 1
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PUSH
22474: LD_INT 2
22476: PUSH
22477: LD_INT 30
22479: PUSH
22480: LD_INT 26
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: LD_INT 30
22489: PUSH
22490: LD_INT 27
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 30
22499: PUSH
22500: LD_INT 28
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: PUSH
22513: EMPTY
22514: LIST
22515: LIST
22516: PPUSH
22517: CALL_OW 69
22521: PUSH
22522: LD_INT 0
22524: GREATER
22525: IFFALSE 22630
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22527: LD_ADDR_VAR 0 2
22531: PUSH
22532: LD_INT 22
22534: PUSH
22535: LD_INT 1
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: PUSH
22542: LD_INT 2
22544: PUSH
22545: LD_INT 30
22547: PUSH
22548: LD_INT 7
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: PUSH
22555: LD_INT 30
22557: PUSH
22558: LD_INT 8
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PPUSH
22574: CALL_OW 69
22578: PUSH
22579: FOR_IN
22580: IFFALSE 22628
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22582: LD_VAR 0 2
22586: PPUSH
22587: LD_INT 1
22589: PPUSH
22590: CALL_OW 268
22594: PUSH
22595: LD_INT 11
22597: EQUAL
22598: PUSH
22599: LD_VAR 0 2
22603: PPUSH
22604: LD_INT 2
22606: PPUSH
22607: CALL_OW 268
22611: PUSH
22612: LD_INT 11
22614: EQUAL
22615: OR
22616: IFFALSE 22626
// eventVar1 = 1 ;
22618: LD_ADDR_EXP 61
22622: PUSH
22623: LD_INT 1
22625: ST_TO_ADDR
22626: GO 22579
22628: POP
22629: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22630: LD_VAR 0 1
22634: PPUSH
22635: CALL_OW 255
22639: PUSH
22640: LD_INT 2
22642: EQUAL
22643: IFFALSE 22748
// begin if GetBType ( building ) = b_barracks then
22645: LD_VAR 0 1
22649: PPUSH
22650: CALL_OW 266
22654: PUSH
22655: LD_INT 5
22657: EQUAL
22658: IFFALSE 22748
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22660: LD_ADDR_VAR 0 2
22664: PUSH
22665: LD_INT 22
22667: PUSH
22668: LD_INT 2
22670: PUSH
22671: EMPTY
22672: LIST
22673: LIST
22674: PUSH
22675: LD_INT 25
22677: PUSH
22678: LD_INT 1
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PUSH
22685: LD_INT 3
22687: PUSH
22688: LD_INT 54
22690: PUSH
22691: EMPTY
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: EMPTY
22699: LIST
22700: LIST
22701: LIST
22702: PPUSH
22703: CALL_OW 69
22707: PUSH
22708: LD_EXP 26
22712: PUSH
22713: EMPTY
22714: LIST
22715: DIFF
22716: PUSH
22717: FOR_IN
22718: IFFALSE 22736
// ComEnterUnit ( i , building ) ;
22720: LD_VAR 0 2
22724: PPUSH
22725: LD_VAR 0 1
22729: PPUSH
22730: CALL_OW 120
22734: GO 22717
22736: POP
22737: POP
// arArm = building ;
22738: LD_ADDR_EXP 45
22742: PUSH
22743: LD_VAR 0 1
22747: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22748: LD_VAR 0 1
22752: PPUSH
22753: CALL_OW 255
22757: PUSH
22758: LD_INT 3
22760: EQUAL
22761: IFFALSE 23234
// begin if GetBType ( building ) = b_factory then
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 266
22772: PUSH
22773: LD_INT 3
22775: EQUAL
22776: IFFALSE 22843
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22778: LD_ADDR_VAR 0 2
22782: PUSH
22783: LD_INT 22
22785: PUSH
22786: LD_INT 3
22788: PUSH
22789: EMPTY
22790: LIST
22791: LIST
22792: PUSH
22793: LD_INT 25
22795: PUSH
22796: LD_INT 3
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PPUSH
22807: CALL_OW 69
22811: PUSH
22812: FOR_IN
22813: IFFALSE 22831
// ComEnterUnit ( i , building ) ;
22815: LD_VAR 0 2
22819: PPUSH
22820: LD_VAR 0 1
22824: PPUSH
22825: CALL_OW 120
22829: GO 22812
22831: POP
22832: POP
// ruFab = building ;
22833: LD_ADDR_EXP 35
22837: PUSH
22838: LD_VAR 0 1
22842: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22843: LD_INT 22
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 21
22855: PUSH
22856: LD_INT 3
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: LD_INT 30
22865: PUSH
22866: LD_INT 8
22868: PUSH
22869: EMPTY
22870: LIST
22871: LIST
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: LIST
22877: PPUSH
22878: CALL_OW 69
22882: PUSH
22883: LD_INT 2
22885: EQUAL
22886: IFFALSE 23094
// begin for i = 1 to 2 do
22888: LD_ADDR_VAR 0 2
22892: PUSH
22893: DOUBLE
22894: LD_INT 1
22896: DEC
22897: ST_TO_ADDR
22898: LD_INT 2
22900: PUSH
22901: FOR_TO
22902: IFFALSE 22989
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22904: LD_INT 22
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 25
22916: PUSH
22917: LD_INT 4
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: PPUSH
22928: CALL_OW 69
22932: PUSH
22933: LD_VAR 0 2
22937: ARRAY
22938: PPUSH
22939: LD_INT 22
22941: PUSH
22942: LD_INT 3
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: LD_INT 21
22951: PUSH
22952: LD_INT 3
22954: PUSH
22955: EMPTY
22956: LIST
22957: LIST
22958: PUSH
22959: LD_INT 30
22961: PUSH
22962: LD_INT 8
22964: PUSH
22965: EMPTY
22966: LIST
22967: LIST
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: LIST
22973: PPUSH
22974: CALL_OW 69
22978: PUSH
22979: LD_INT 1
22981: ARRAY
22982: PPUSH
22983: CALL_OW 120
22987: GO 22901
22989: POP
22990: POP
// for i = 3 to 4 do
22991: LD_ADDR_VAR 0 2
22995: PUSH
22996: DOUBLE
22997: LD_INT 3
22999: DEC
23000: ST_TO_ADDR
23001: LD_INT 4
23003: PUSH
23004: FOR_TO
23005: IFFALSE 23092
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23007: LD_INT 22
23009: PUSH
23010: LD_INT 3
23012: PUSH
23013: EMPTY
23014: LIST
23015: LIST
23016: PUSH
23017: LD_INT 25
23019: PUSH
23020: LD_INT 4
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PPUSH
23031: CALL_OW 69
23035: PUSH
23036: LD_VAR 0 2
23040: ARRAY
23041: PPUSH
23042: LD_INT 22
23044: PUSH
23045: LD_INT 3
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PUSH
23052: LD_INT 21
23054: PUSH
23055: LD_INT 3
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 30
23064: PUSH
23065: LD_INT 8
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: PUSH
23082: LD_INT 2
23084: ARRAY
23085: PPUSH
23086: CALL_OW 120
23090: GO 23004
23092: POP
23093: POP
// end ; if GetBType ( building ) = b_barracks then
23094: LD_VAR 0 1
23098: PPUSH
23099: CALL_OW 266
23103: PUSH
23104: LD_INT 5
23106: EQUAL
23107: IFFALSE 23234
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23109: LD_ADDR_VAR 0 2
23113: PUSH
23114: LD_INT 22
23116: PUSH
23117: LD_INT 3
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: PUSH
23124: LD_INT 25
23126: PUSH
23127: LD_INT 1
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: LD_INT 54
23139: PUSH
23140: EMPTY
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: PPUSH
23152: CALL_OW 69
23156: PUSH
23157: FOR_IN
23158: IFFALSE 23176
// ComEnterUnit ( i , building ) ;
23160: LD_VAR 0 2
23164: PPUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 120
23174: GO 23157
23176: POP
23177: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23178: LD_INT 22
23180: PUSH
23181: LD_INT 3
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 30
23190: PUSH
23191: LD_INT 5
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PPUSH
23202: CALL_OW 69
23206: PUSH
23207: LD_INT 0
23209: EQUAL
23210: IFFALSE 23224
// ruArm1 = building else
23212: LD_ADDR_EXP 33
23216: PUSH
23217: LD_VAR 0 1
23221: ST_TO_ADDR
23222: GO 23234
// ruArm2 = building ;
23224: LD_ADDR_EXP 34
23228: PUSH
23229: LD_VAR 0 1
23233: ST_TO_ADDR
// end ; end ; end ;
23234: PPOPN 2
23236: END
// on EnterBuilding ( building , human ) do var rnd ;
23237: LD_INT 0
23239: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23240: LD_VAR 0 2
23244: PPUSH
23245: CALL_OW 255
23249: PUSH
23250: LD_INT 2
23252: EQUAL
23253: PUSH
23254: LD_VAR 0 2
23258: PPUSH
23259: CALL_OW 257
23263: PUSH
23264: LD_INT 1
23266: EQUAL
23267: AND
23268: PUSH
23269: LD_VAR 0 1
23273: PUSH
23274: LD_EXP 45
23278: EQUAL
23279: AND
23280: IFFALSE 23327
// begin wait ( 0 0$1 ) ;
23282: LD_INT 35
23284: PPUSH
23285: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23289: LD_ADDR_VAR 0 3
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_INT 100
23299: PPUSH
23300: CALL_OW 12
23304: ST_TO_ADDR
// if rnd > 50 then
23305: LD_VAR 0 3
23309: PUSH
23310: LD_INT 50
23312: GREATER
23313: IFFALSE 23327
// SetClass ( human , class_mortar ) ;
23315: LD_VAR 0 2
23319: PPUSH
23320: LD_INT 8
23322: PPUSH
23323: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23327: LD_VAR 0 2
23331: PPUSH
23332: CALL_OW 255
23336: PUSH
23337: LD_INT 3
23339: EQUAL
23340: PUSH
23341: LD_VAR 0 2
23345: PPUSH
23346: CALL_OW 257
23350: PUSH
23351: LD_INT 1
23353: EQUAL
23354: AND
23355: PUSH
23356: LD_VAR 0 1
23360: PUSH
23361: LD_EXP 33
23365: EQUAL
23366: PUSH
23367: LD_VAR 0 1
23371: PUSH
23372: LD_EXP 34
23376: EQUAL
23377: OR
23378: PUSH
23379: EMPTY
23380: LIST
23381: AND
23382: IFFALSE 23403
// begin wait ( 0 0$1 ) ;
23384: LD_INT 35
23386: PPUSH
23387: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_INT 9
23398: PPUSH
23399: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23403: LD_VAR 0 2
23407: PPUSH
23408: CALL_OW 255
23412: PUSH
23413: LD_INT 3
23415: EQUAL
23416: PUSH
23417: LD_VAR 0 2
23421: PPUSH
23422: CALL_OW 257
23426: PUSH
23427: LD_INT 9
23429: EQUAL
23430: AND
23431: PUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 266
23441: PUSH
23442: LD_INT 32
23444: EQUAL
23445: AND
23446: IFFALSE 23467
// begin wait ( 0 0$1 ) ;
23448: LD_INT 35
23450: PPUSH
23451: CALL_OW 67
// SetClass ( human , 1 ) ;
23455: LD_VAR 0 2
23459: PPUSH
23460: LD_INT 1
23462: PPUSH
23463: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23467: LD_VAR 0 2
23471: PPUSH
23472: CALL_OW 255
23476: PUSH
23477: LD_INT 3
23479: EQUAL
23480: PUSH
23481: LD_VAR 0 2
23485: PPUSH
23486: CALL_OW 257
23490: PUSH
23491: LD_INT 3
23493: EQUAL
23494: AND
23495: PUSH
23496: LD_VAR 0 1
23500: PUSH
23501: LD_EXP 35
23505: EQUAL
23506: AND
23507: IFFALSE 23521
// SetLives ( human , 1000 ) ;
23509: LD_VAR 0 2
23513: PPUSH
23514: LD_INT 1000
23516: PPUSH
23517: CALL_OW 234
// end ;
23521: PPOPN 3
23523: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23524: LD_VAR 0 1
23528: PUSH
23529: LD_INT 1
23531: EQUAL
23532: PUSH
23533: LD_VAR 0 2
23537: PUSH
23538: LD_INT 2
23540: EQUAL
23541: AND
23542: PUSH
23543: LD_INT 1
23545: PPUSH
23546: LD_INT 2
23548: PPUSH
23549: CALL_OW 81
23553: PUSH
23554: LD_INT 1
23556: EQUAL
23557: AND
23558: IFFALSE 23579
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23560: LD_EXP 24
23564: PPUSH
23565: LD_STRING D6b-Pow-1
23567: PPUSH
23568: CALL_OW 94
// YouLost ( Powell ) ;
23572: LD_STRING Powell
23574: PPUSH
23575: CALL_OW 104
// end ; end ;
23579: PPOPN 2
23581: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23582: LD_INT 23
23584: PPUSH
23585: LD_INT 22
23587: PUSH
23588: LD_INT 1
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 21
23597: PUSH
23598: LD_INT 3
23600: PUSH
23601: EMPTY
23602: LIST
23603: LIST
23604: PUSH
23605: EMPTY
23606: LIST
23607: LIST
23608: PPUSH
23609: CALL_OW 70
23613: PUSH
23614: LD_INT 23
23616: PPUSH
23617: LD_INT 22
23619: PUSH
23620: LD_INT 1
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PUSH
23627: LD_INT 21
23629: PUSH
23630: LD_INT 2
23632: PUSH
23633: EMPTY
23634: LIST
23635: LIST
23636: PUSH
23637: LD_INT 58
23639: PUSH
23640: EMPTY
23641: LIST
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: LIST
23647: PPUSH
23648: CALL_OW 70
23652: OR
23653: PUSH
23654: LD_INT 1
23656: PPUSH
23657: LD_INT 2
23659: PPUSH
23660: CALL_OW 81
23664: PUSH
23665: LD_INT 1
23667: EQUAL
23668: AND
23669: IFFALSE 23693
23671: GO 23673
23673: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23674: LD_EXP 24
23678: PPUSH
23679: LD_STRING D6b-Pow-1
23681: PPUSH
23682: CALL_OW 94
// YouLost ( Powell ) ;
23686: LD_STRING Powell
23688: PPUSH
23689: CALL_OW 104
// end ;
23693: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23694: LD_VAR 0 1
23698: PUSH
23699: LD_EXP 1
23703: EQUAL
23704: IFFALSE 23713
// YouLost ( JMM ) ;
23706: LD_STRING JMM
23708: PPUSH
23709: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23713: LD_VAR 0 1
23717: PPUSH
23718: CALL_OW 255
23722: PUSH
23723: LD_INT 3
23725: EQUAL
23726: PUSH
23727: LD_VAR 0 1
23731: PPUSH
23732: CALL_OW 247
23736: PUSH
23737: LD_INT 3
23739: EQUAL
23740: AND
23741: IFFALSE 24433
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23743: LD_VAR 0 1
23747: PPUSH
23748: CALL_OW 266
23752: PUSH
23753: LD_INT 31
23755: EQUAL
23756: PUSH
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 266
23766: PUSH
23767: LD_INT 32
23769: EQUAL
23770: OR
23771: PUSH
23772: LD_VAR 0 1
23776: PPUSH
23777: CALL_OW 266
23781: PUSH
23782: LD_INT 36
23784: EQUAL
23785: OR
23786: PUSH
23787: LD_VAR 0 1
23791: PPUSH
23792: CALL_OW 266
23796: PUSH
23797: LD_INT 0
23799: EQUAL
23800: OR
23801: PUSH
23802: LD_VAR 0 1
23806: PPUSH
23807: CALL_OW 266
23811: PUSH
23812: LD_INT 24
23814: EQUAL
23815: OR
23816: PUSH
23817: LD_VAR 0 1
23821: PPUSH
23822: CALL_OW 266
23826: PUSH
23827: LD_INT 17
23829: EQUAL
23830: OR
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 266
23841: PUSH
23842: LD_INT 25
23844: EQUAL
23845: OR
23846: PUSH
23847: LD_VAR 0 1
23851: PPUSH
23852: CALL_OW 266
23856: PUSH
23857: LD_INT 19
23859: EQUAL
23860: OR
23861: PUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL_OW 266
23871: PUSH
23872: LD_INT 20
23874: EQUAL
23875: OR
23876: PUSH
23877: LD_VAR 0 1
23881: PPUSH
23882: CALL_OW 266
23886: PUSH
23887: LD_INT 18
23889: EQUAL
23890: OR
23891: PUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 266
23901: PUSH
23902: LD_INT 21
23904: EQUAL
23905: OR
23906: PUSH
23907: LD_VAR 0 1
23911: PPUSH
23912: CALL_OW 266
23916: PUSH
23917: LD_INT 23
23919: EQUAL
23920: OR
23921: PUSH
23922: LD_VAR 0 1
23926: PPUSH
23927: CALL_OW 266
23931: PUSH
23932: LD_INT 16
23934: EQUAL
23935: OR
23936: PUSH
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 266
23946: PUSH
23947: LD_INT 6
23949: EQUAL
23950: OR
23951: PUSH
23952: LD_VAR 0 1
23956: PPUSH
23957: CALL_OW 266
23961: PUSH
23962: LD_INT 29
23964: EQUAL
23965: OR
23966: PUSH
23967: LD_VAR 0 1
23971: PPUSH
23972: CALL_OW 266
23976: PUSH
23977: LD_INT 26
23979: EQUAL
23980: OR
23981: PUSH
23982: LD_VAR 0 1
23986: PPUSH
23987: CALL_OW 266
23991: PUSH
23992: LD_INT 30
23994: EQUAL
23995: OR
23996: PUSH
23997: LD_VAR 0 1
24001: PPUSH
24002: CALL_OW 266
24006: PUSH
24007: LD_INT 28
24009: EQUAL
24010: OR
24011: PUSH
24012: LD_VAR 0 1
24016: PPUSH
24017: CALL_OW 266
24021: PUSH
24022: LD_INT 27
24024: EQUAL
24025: OR
24026: PUSH
24027: LD_VAR 0 1
24031: PPUSH
24032: CALL_OW 266
24036: PUSH
24037: LD_INT 33
24039: EQUAL
24040: OR
24041: PUSH
24042: LD_VAR 0 1
24046: PPUSH
24047: CALL_OW 266
24051: PUSH
24052: LD_INT 2
24054: EQUAL
24055: OR
24056: PUSH
24057: LD_VAR 0 1
24061: PPUSH
24062: CALL_OW 266
24066: PUSH
24067: LD_INT 4
24069: EQUAL
24070: OR
24071: IFFALSE 24157
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24073: LD_ADDR_EXP 42
24077: PUSH
24078: LD_EXP 42
24082: PUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 266
24092: ADD
24093: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24094: LD_ADDR_EXP 42
24098: PUSH
24099: LD_EXP 42
24103: PUSH
24104: LD_VAR 0 1
24108: PPUSH
24109: CALL_OW 250
24113: ADD
24114: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24115: LD_ADDR_EXP 42
24119: PUSH
24120: LD_EXP 42
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 251
24134: ADD
24135: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24136: LD_ADDR_EXP 42
24140: PUSH
24141: LD_EXP 42
24145: PUSH
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 254
24155: ADD
24156: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 266
24166: PUSH
24167: LD_INT 1
24169: EQUAL
24170: IFFALSE 24249
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24172: LD_ADDR_EXP 42
24176: PUSH
24177: LD_EXP 42
24181: PUSH
24182: LD_INT 0
24184: ADD
24185: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24186: LD_ADDR_EXP 42
24190: PUSH
24191: LD_EXP 42
24195: PUSH
24196: LD_VAR 0 1
24200: PPUSH
24201: CALL_OW 250
24205: ADD
24206: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24207: LD_ADDR_EXP 42
24211: PUSH
24212: LD_EXP 42
24216: PUSH
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 251
24226: ADD
24227: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24228: LD_ADDR_EXP 42
24232: PUSH
24233: LD_EXP 42
24237: PUSH
24238: LD_VAR 0 1
24242: PPUSH
24243: CALL_OW 254
24247: ADD
24248: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL_OW 266
24258: PUSH
24259: LD_INT 3
24261: EQUAL
24262: IFFALSE 24341
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24264: LD_ADDR_EXP 42
24268: PUSH
24269: LD_EXP 42
24273: PUSH
24274: LD_INT 2
24276: ADD
24277: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24278: LD_ADDR_EXP 42
24282: PUSH
24283: LD_EXP 42
24287: PUSH
24288: LD_VAR 0 1
24292: PPUSH
24293: CALL_OW 250
24297: ADD
24298: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24299: LD_ADDR_EXP 42
24303: PUSH
24304: LD_EXP 42
24308: PUSH
24309: LD_VAR 0 1
24313: PPUSH
24314: CALL_OW 251
24318: ADD
24319: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24320: LD_ADDR_EXP 42
24324: PUSH
24325: LD_EXP 42
24329: PUSH
24330: LD_VAR 0 1
24334: PPUSH
24335: CALL_OW 254
24339: ADD
24340: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24341: LD_VAR 0 1
24345: PPUSH
24346: CALL_OW 266
24350: PUSH
24351: LD_INT 5
24353: EQUAL
24354: IFFALSE 24433
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24356: LD_ADDR_EXP 42
24360: PUSH
24361: LD_EXP 42
24365: PUSH
24366: LD_INT 4
24368: ADD
24369: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24370: LD_ADDR_EXP 42
24374: PUSH
24375: LD_EXP 42
24379: PUSH
24380: LD_VAR 0 1
24384: PPUSH
24385: CALL_OW 250
24389: ADD
24390: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24391: LD_ADDR_EXP 42
24395: PUSH
24396: LD_EXP 42
24400: PUSH
24401: LD_VAR 0 1
24405: PPUSH
24406: CALL_OW 251
24410: ADD
24411: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24412: LD_ADDR_EXP 42
24416: PUSH
24417: LD_EXP 42
24421: PUSH
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 254
24431: ADD
24432: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24433: LD_VAR 0 1
24437: PPUSH
24438: CALL_OW 257
24442: PUSH
24443: LD_INT 3
24445: EQUAL
24446: PUSH
24447: LD_VAR 0 1
24451: PPUSH
24452: CALL_OW 255
24456: PUSH
24457: LD_INT 3
24459: EQUAL
24460: AND
24461: PUSH
24462: LD_EXP 35
24466: PPUSH
24467: CALL_OW 302
24471: AND
24472: PUSH
24473: LD_EXP 35
24477: PPUSH
24478: CALL_OW 255
24482: PUSH
24483: LD_INT 3
24485: EQUAL
24486: AND
24487: IFFALSE 24557
// begin uc_side = 3 ;
24489: LD_ADDR_OWVAR 20
24493: PUSH
24494: LD_INT 3
24496: ST_TO_ADDR
// uc_nation = 3 ;
24497: LD_ADDR_OWVAR 21
24501: PUSH
24502: LD_INT 3
24504: ST_TO_ADDR
// hc_gallery :=  ;
24505: LD_ADDR_OWVAR 33
24509: PUSH
24510: LD_STRING 
24512: ST_TO_ADDR
// hc_name :=  ;
24513: LD_ADDR_OWVAR 26
24517: PUSH
24518: LD_STRING 
24520: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24521: LD_INT 0
24523: PPUSH
24524: LD_EXP 36
24528: PPUSH
24529: LD_EXP 37
24533: PPUSH
24534: CALL_OW 12
24538: PPUSH
24539: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24543: CALL_OW 44
24547: PPUSH
24548: LD_EXP 35
24552: PPUSH
24553: CALL_OW 52
// end ; end ;
24557: PPOPN 1
24559: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24560: LD_ADDR_OWVAR 57
24564: PUSH
24565: LD_INT 0
24567: ST_TO_ADDR
// fastEnd = 1 ;
24568: LD_ADDR_EXP 59
24572: PUSH
24573: LD_INT 1
24575: ST_TO_ADDR
// FinishMission ;
24576: CALL 25838 0 0
// end ; end_of_file
24580: PPOPN 1
24582: END
// export function PrepareNature ; var i , un ; begin
24583: LD_INT 0
24585: PPUSH
24586: PPUSH
24587: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24588: LD_ADDR_VAR 0 2
24592: PUSH
24593: DOUBLE
24594: LD_INT 1
24596: DEC
24597: ST_TO_ADDR
24598: LD_OWVAR 67
24602: PUSH
24603: LD_INT 1
24605: PPUSH
24606: LD_INT 5
24608: PPUSH
24609: CALL_OW 12
24613: PLUS
24614: PUSH
24615: FOR_TO
24616: IFFALSE 24761
// begin hc_sex = sex_male ;
24618: LD_ADDR_OWVAR 27
24622: PUSH
24623: LD_INT 1
24625: ST_TO_ADDR
// uc_side = 0 ;
24626: LD_ADDR_OWVAR 20
24630: PUSH
24631: LD_INT 0
24633: ST_TO_ADDR
// uc_nation = nation_nature ;
24634: LD_ADDR_OWVAR 21
24638: PUSH
24639: LD_INT 0
24641: ST_TO_ADDR
// hc_class = class_apeman ;
24642: LD_ADDR_OWVAR 28
24646: PUSH
24647: LD_INT 12
24649: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24650: LD_ADDR_OWVAR 31
24654: PUSH
24655: LD_INT 2
24657: PPUSH
24658: LD_INT 7
24660: PPUSH
24661: CALL_OW 12
24665: PUSH
24666: LD_OWVAR 67
24670: PLUS
24671: PUSH
24672: LD_INT 2
24674: PPUSH
24675: LD_INT 10
24677: PPUSH
24678: CALL_OW 12
24682: PUSH
24683: LD_INT 2
24685: PPUSH
24686: LD_INT 10
24688: PPUSH
24689: CALL_OW 12
24693: PUSH
24694: LD_INT 2
24696: PPUSH
24697: LD_INT 10
24699: PPUSH
24700: CALL_OW 12
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24711: LD_ADDR_OWVAR 35
24715: PUSH
24716: LD_INT 5
24718: NEG
24719: PPUSH
24720: LD_INT 5
24722: PPUSH
24723: CALL_OW 12
24727: PUSH
24728: LD_OWVAR 67
24732: MUL
24733: ST_TO_ADDR
// un = CreateHuman ;
24734: LD_ADDR_VAR 0 3
24738: PUSH
24739: CALL_OW 44
24743: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24744: LD_VAR 0 3
24748: PPUSH
24749: LD_INT 5
24751: PPUSH
24752: LD_INT 0
24754: PPUSH
24755: CALL_OW 49
// end ;
24759: GO 24615
24761: POP
24762: POP
// for i = 1 to Difficulty + 2 do
24763: LD_ADDR_VAR 0 2
24767: PUSH
24768: DOUBLE
24769: LD_INT 1
24771: DEC
24772: ST_TO_ADDR
24773: LD_OWVAR 67
24777: PUSH
24778: LD_INT 2
24780: PLUS
24781: PUSH
24782: FOR_TO
24783: IFFALSE 24892
// begin hc_sex = sex_male ;
24785: LD_ADDR_OWVAR 27
24789: PUSH
24790: LD_INT 1
24792: ST_TO_ADDR
// uc_side = 0 ;
24793: LD_ADDR_OWVAR 20
24797: PUSH
24798: LD_INT 0
24800: ST_TO_ADDR
// uc_nation = nation_nature ;
24801: LD_ADDR_OWVAR 21
24805: PUSH
24806: LD_INT 0
24808: ST_TO_ADDR
// hc_class = class_tiger ;
24809: LD_ADDR_OWVAR 28
24813: PUSH
24814: LD_INT 14
24816: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24817: LD_ADDR_OWVAR 31
24821: PUSH
24822: LD_EXP 37
24826: PUSH
24827: LD_INT 0
24829: PUSH
24830: LD_INT 0
24832: PUSH
24833: LD_INT 0
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24842: LD_ADDR_OWVAR 35
24846: PUSH
24847: LD_INT 5
24849: NEG
24850: PPUSH
24851: LD_INT 5
24853: PPUSH
24854: CALL_OW 12
24858: PUSH
24859: LD_OWVAR 67
24863: MUL
24864: ST_TO_ADDR
// un = CreateHuman ;
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: CALL_OW 44
24874: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24875: LD_VAR 0 3
24879: PPUSH
24880: LD_INT 6
24882: PPUSH
24883: LD_INT 0
24885: PPUSH
24886: CALL_OW 49
// end ;
24890: GO 24782
24892: POP
24893: POP
// for i = 1 to rand ( 3 , 4 ) do
24894: LD_ADDR_VAR 0 2
24898: PUSH
24899: DOUBLE
24900: LD_INT 1
24902: DEC
24903: ST_TO_ADDR
24904: LD_INT 3
24906: PPUSH
24907: LD_INT 4
24909: PPUSH
24910: CALL_OW 12
24914: PUSH
24915: FOR_TO
24916: IFFALSE 25010
// begin hc_sex = sex_male ;
24918: LD_ADDR_OWVAR 27
24922: PUSH
24923: LD_INT 1
24925: ST_TO_ADDR
// uc_side = 0 ;
24926: LD_ADDR_OWVAR 20
24930: PUSH
24931: LD_INT 0
24933: ST_TO_ADDR
// uc_nation = nation_nature ;
24934: LD_ADDR_OWVAR 21
24938: PUSH
24939: LD_INT 0
24941: ST_TO_ADDR
// hc_class = 18 ;
24942: LD_ADDR_OWVAR 28
24946: PUSH
24947: LD_INT 18
24949: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24950: LD_ADDR_OWVAR 31
24954: PUSH
24955: LD_EXP 37
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: LD_INT 0
24965: PUSH
24966: LD_INT 0
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: ST_TO_ADDR
// hc_agressivity = 0 ;
24975: LD_ADDR_OWVAR 35
24979: PUSH
24980: LD_INT 0
24982: ST_TO_ADDR
// un = CreateHuman ;
24983: LD_ADDR_VAR 0 3
24987: PUSH
24988: CALL_OW 44
24992: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24993: LD_VAR 0 3
24997: PPUSH
24998: LD_INT 6
25000: PPUSH
25001: LD_INT 0
25003: PPUSH
25004: CALL_OW 49
// end ;
25008: GO 24915
25010: POP
25011: POP
// end ; end_of_file
25012: LD_VAR 0 1
25016: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25017: LD_EXP 46
25021: PUSH
25022: LD_INT 1
25024: EQUAL
25025: IFFALSE 25109
25027: GO 25029
25029: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25030: LD_INT 7
25032: PPUSH
25033: LD_INT 5
25035: PPUSH
25036: LD_INT 4
25038: PUSH
25039: LD_INT 5
25041: PUSH
25042: LD_INT 6
25044: PUSH
25045: EMPTY
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: LD_OWVAR 67
25054: ARRAY
25055: PPUSH
25056: LD_EXP 36
25060: PPUSH
25061: LD_EXP 37
25065: PPUSH
25066: CALL_OW 12
25070: PPUSH
25071: LD_INT 2
25073: PPUSH
25074: LD_INT 1
25076: PPUSH
25077: LD_INT 1
25079: PPUSH
25080: EMPTY
25081: PPUSH
25082: LD_INT 25
25084: PUSH
25085: LD_INT 26
25087: PUSH
25088: LD_INT 27
25090: PUSH
25091: LD_INT 28
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: PPUSH
25100: EMPTY
25101: PPUSH
25102: LD_INT 1
25104: PPUSH
25105: CALL 15590 0 11
25109: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25110: LD_EXP 46
25114: PUSH
25115: LD_INT 1
25117: EQUAL
25118: IFFALSE 25206
25120: GO 25122
25122: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25123: LD_INT 5
25125: PPUSH
25126: LD_INT 2
25128: PPUSH
25129: LD_INT 6
25131: PUSH
25132: LD_INT 7
25134: PUSH
25135: LD_INT 8
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: LIST
25142: PUSH
25143: LD_OWVAR 67
25147: ARRAY
25148: PPUSH
25149: LD_INT 0
25151: PPUSH
25152: LD_INT 0
25154: PPUSH
25155: LD_INT 2
25157: PUSH
25158: LD_INT 4
25160: PUSH
25161: LD_INT 5
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: PUSH
25169: LD_OWVAR 67
25173: ARRAY
25174: PPUSH
25175: LD_INT 0
25177: PPUSH
25178: LD_EXP 36
25182: PPUSH
25183: LD_EXP 37
25187: PPUSH
25188: CALL_OW 12
25192: PPUSH
25193: LD_INT 7
25195: PPUSH
25196: LD_INT 9
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: CALL 17294 0 11
25206: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25207: LD_EXP 46
25211: PUSH
25212: LD_INT 1
25214: EQUAL
25215: IFFALSE 25224
25217: GO 25219
25219: DISABLE
// PrepareArabianSheik ;
25220: CALL 3859 0 0
25224: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25225: LD_EXP 29
25229: PUSH
25230: LD_EXP 60
25234: PUSH
25235: LD_INT 1
25237: EQUAL
25238: AND
25239: IFFALSE 25308
25241: GO 25243
25243: DISABLE
// begin enable ;
25244: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25245: LD_INT 6
25247: PPUSH
25248: LD_INT 3
25250: PPUSH
25251: LD_EXP 57
25255: PPUSH
25256: LD_INT 0
25258: PPUSH
25259: LD_OWVAR 67
25263: PPUSH
25264: LD_INT 0
25266: PPUSH
25267: LD_EXP 57
25271: PUSH
25272: LD_INT 3
25274: DIV
25275: PUSH
25276: LD_INT 1
25278: PLUS
25279: PPUSH
25280: LD_EXP 36
25284: PPUSH
25285: LD_EXP 37
25289: PPUSH
25290: CALL_OW 12
25294: PPUSH
25295: LD_INT 17
25297: PPUSH
25298: LD_INT 18
25300: PPUSH
25301: LD_INT 1
25303: PPUSH
25304: CALL 17294 0 11
// end ;
25308: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25309: LD_EXP 29
25313: PUSH
25314: LD_EXP 60
25318: PUSH
25319: LD_INT 1
25321: EQUAL
25322: AND
25323: IFFALSE 25400
25325: GO 25327
25327: DISABLE
// begin enable ;
25328: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25329: LD_INT 17
25331: PPUSH
25332: LD_INT 6
25334: PPUSH
25335: LD_EXP 56
25339: PPUSH
25340: LD_EXP 36
25344: PPUSH
25345: LD_EXP 37
25349: PPUSH
25350: CALL_OW 12
25354: PPUSH
25355: LD_INT 3
25357: PPUSH
25358: LD_INT 1
25360: PPUSH
25361: LD_INT 1
25363: PUSH
25364: LD_INT 3
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PPUSH
25371: LD_INT 43
25373: PUSH
25374: LD_INT 44
25376: PUSH
25377: LD_INT 45
25379: PUSH
25380: LD_INT 46
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: PPUSH
25389: EMPTY
25390: PPUSH
25391: EMPTY
25392: PPUSH
25393: LD_INT 1
25395: PPUSH
25396: CALL 15590 0 11
// end ;
25400: END
// every 10 10$00 trigger joinEpsilon do
25401: LD_EXP 29
25405: IFFALSE 25459
25407: GO 25409
25409: DISABLE
// begin enable ;
25410: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25411: LD_ADDR_EXP 56
25415: PUSH
25416: LD_EXP 56
25420: PUSH
25421: LD_INT 1
25423: PPUSH
25424: LD_OWVAR 67
25428: PPUSH
25429: CALL_OW 12
25433: PLUS
25434: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25435: LD_ADDR_EXP 57
25439: PUSH
25440: LD_EXP 57
25444: PUSH
25445: LD_INT 1
25447: PPUSH
25448: LD_OWVAR 67
25452: PPUSH
25453: CALL_OW 12
25457: PLUS
25458: ST_TO_ADDR
// end ;
25459: END
// every 21 21$0 trigger attackAvalaible = 1 do
25460: LD_EXP 60
25464: PUSH
25465: LD_INT 1
25467: EQUAL
25468: IFFALSE 25481
25470: GO 25472
25472: DISABLE
// attackAvalaible = 0 ; end_of_file
25473: LD_ADDR_EXP 60
25477: PUSH
25478: LD_INT 0
25480: ST_TO_ADDR
25481: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25482: LD_INT 54
25484: PPUSH
25485: LD_INT 1
25487: PPUSH
25488: CALL_OW 321
25492: PUSH
25493: LD_INT 2
25495: EQUAL
25496: PUSH
25497: LD_INT 55
25499: PPUSH
25500: LD_INT 1
25502: PPUSH
25503: CALL_OW 321
25507: PUSH
25508: LD_INT 2
25510: EQUAL
25511: AND
25512: PUSH
25513: LD_INT 21
25515: PPUSH
25516: LD_INT 1
25518: PPUSH
25519: CALL_OW 321
25523: PUSH
25524: LD_INT 2
25526: EQUAL
25527: AND
25528: PUSH
25529: LD_INT 22
25531: PPUSH
25532: LD_INT 1
25534: PPUSH
25535: CALL_OW 321
25539: PUSH
25540: LD_INT 2
25542: EQUAL
25543: AND
25544: PUSH
25545: LD_INT 12
25547: PPUSH
25548: LD_INT 1
25550: PPUSH
25551: CALL_OW 321
25555: PUSH
25556: LD_INT 1
25558: EQUAL
25559: PUSH
25560: LD_INT 32
25562: PPUSH
25563: LD_INT 1
25565: PPUSH
25566: CALL_OW 321
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: OR
25575: PUSH
25576: EMPTY
25577: LIST
25578: AND
25579: PUSH
25580: LD_EXP 48
25584: PUSH
25585: LD_INT 1
25587: EQUAL
25588: AND
25589: PUSH
25590: LD_INT 22
25592: PUSH
25593: LD_INT 3
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 21
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: EMPTY
25611: LIST
25612: LIST
25613: PPUSH
25614: CALL_OW 69
25618: PUSH
25619: LD_INT 0
25621: EQUAL
25622: AND
25623: IFFALSE 25679
25625: GO 25627
25627: DISABLE
// begin case query ( QEndMission ) of 1 :
25628: LD_STRING QEndMission
25630: PPUSH
25631: CALL_OW 97
25635: PUSH
25636: LD_INT 1
25638: DOUBLE
25639: EQUAL
25640: IFTRUE 25644
25642: GO 25655
25644: POP
// begin end_the_mission_allowed = true ;
25645: LD_ADDR_OWVAR 57
25649: PUSH
25650: LD_INT 1
25652: ST_TO_ADDR
// end ; 2 :
25653: GO 25679
25655: LD_INT 2
25657: DOUBLE
25658: EQUAL
25659: IFTRUE 25663
25661: GO 25678
25663: POP
// begin fastEnd = 1 ;
25664: LD_ADDR_EXP 59
25668: PUSH
25669: LD_INT 1
25671: ST_TO_ADDR
// FinishMission ;
25672: CALL 25838 0 0
// end ; end ;
25676: GO 25679
25678: POP
// end ;
25679: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25680: LD_INT 54
25682: PPUSH
25683: LD_INT 1
25685: PPUSH
25686: CALL_OW 321
25690: PUSH
25691: LD_INT 2
25693: EQUAL
25694: PUSH
25695: LD_INT 55
25697: PPUSH
25698: LD_INT 1
25700: PPUSH
25701: CALL_OW 321
25705: PUSH
25706: LD_INT 2
25708: EQUAL
25709: AND
25710: PUSH
25711: LD_INT 21
25713: PPUSH
25714: LD_INT 1
25716: PPUSH
25717: CALL_OW 321
25721: PUSH
25722: LD_INT 2
25724: EQUAL
25725: AND
25726: PUSH
25727: LD_INT 22
25729: PPUSH
25730: LD_INT 1
25732: PPUSH
25733: CALL_OW 321
25737: PUSH
25738: LD_INT 2
25740: EQUAL
25741: AND
25742: PUSH
25743: LD_INT 12
25745: PPUSH
25746: LD_INT 1
25748: PPUSH
25749: CALL_OW 321
25753: PUSH
25754: LD_INT 2
25756: EQUAL
25757: AND
25758: PUSH
25759: LD_INT 32
25761: PPUSH
25762: LD_INT 1
25764: PPUSH
25765: CALL_OW 321
25769: PUSH
25770: LD_INT 2
25772: EQUAL
25773: AND
25774: PUSH
25775: LD_EXP 59
25779: PUSH
25780: LD_INT 0
25782: EQUAL
25783: AND
25784: PUSH
25785: LD_EXP 48
25789: PUSH
25790: LD_INT 1
25792: EQUAL
25793: AND
25794: PUSH
25795: LD_INT 22
25797: PUSH
25798: LD_INT 3
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: PUSH
25805: LD_INT 21
25807: PUSH
25808: LD_INT 1
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PPUSH
25819: CALL_OW 69
25823: PUSH
25824: LD_INT 0
25826: EQUAL
25827: AND
25828: IFFALSE 25837
25830: GO 25832
25832: DISABLE
// FinishMission ;
25833: CALL 25838 0 0
25837: END
// export function FinishMission ; begin
25838: LD_INT 0
25840: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25841: LD_EXP 52
25845: PPUSH
25846: LD_STRING 10_KhatamStatus_1
25848: PPUSH
25849: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25853: LD_EXP 51
25857: PPUSH
25858: LD_STRING 10_GensherEscape_1
25860: PPUSH
25861: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25865: LD_INT 12
25867: PPUSH
25868: LD_INT 1
25870: PPUSH
25871: CALL_OW 321
25875: PUSH
25876: LD_INT 2
25878: EQUAL
25879: IFFALSE 25893
// begin AddMedal ( sights , 1 ) ;
25881: LD_STRING sights
25883: PPUSH
25884: LD_INT 1
25886: PPUSH
25887: CALL_OW 101
// end else
25891: GO 25904
// begin AddMedal ( sights , - 1 ) ;
25893: LD_STRING sights
25895: PPUSH
25896: LD_INT 1
25898: NEG
25899: PPUSH
25900: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25904: LD_INT 32
25906: PPUSH
25907: LD_INT 1
25909: PPUSH
25910: CALL_OW 321
25914: PUSH
25915: LD_INT 2
25917: EQUAL
25918: IFFALSE 25932
// begin AddMedal ( computers , 1 ) ;
25920: LD_STRING computers
25922: PPUSH
25923: LD_INT 1
25925: PPUSH
25926: CALL_OW 101
// end else
25930: GO 25943
// begin AddMedal ( computers , - 1 ) ;
25932: LD_STRING computers
25934: PPUSH
25935: LD_INT 1
25937: NEG
25938: PPUSH
25939: CALL_OW 101
// end ; if arabianEscape = 0 then
25943: LD_EXP 47
25947: PUSH
25948: LD_INT 0
25950: EQUAL
25951: IFFALSE 25975
// begin AddMedal ( renegades , 2 ) ;
25953: LD_STRING renegades
25955: PPUSH
25956: LD_INT 2
25958: PPUSH
25959: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
25963: LD_INT 0
25965: PPUSH
25966: LD_STRING 10_ScientistsEscape_1
25968: PPUSH
25969: CALL_OW 39
// end else
25973: GO 25986
// begin AddMedal ( renegades , - 1 ) ;
25975: LD_STRING renegades
25977: PPUSH
25978: LD_INT 1
25980: NEG
25981: PPUSH
25982: CALL_OW 101
// end ; SaveEpsilonBase ;
25986: CALL 26710 0 0
// GiveMedals ( Main ) ;
25990: LD_STRING Main
25992: PPUSH
25993: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
25997: LD_INT 22
25999: PUSH
26000: LD_INT 1
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 23
26009: PUSH
26010: LD_INT 1
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 21
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 2
26029: PUSH
26030: LD_INT 25
26032: PUSH
26033: LD_INT 1
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 25
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 25
26052: PUSH
26053: LD_INT 3
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: PUSH
26060: LD_INT 25
26062: PUSH
26063: LD_INT 4
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 25
26072: PUSH
26073: LD_INT 5
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: LD_INT 25
26082: PUSH
26083: LD_INT 8
26085: PUSH
26086: EMPTY
26087: LIST
26088: LIST
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: LIST
26094: LIST
26095: LIST
26096: LIST
26097: LIST
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: LIST
26103: LIST
26104: PPUSH
26105: CALL_OW 69
26109: PPUSH
26110: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26114: LD_EXP 1
26118: PPUSH
26119: LD_EXP 53
26123: PUSH
26124: LD_STRING JMM
26126: STR
26127: PPUSH
26128: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26132: LD_EXP 2
26136: PPUSH
26137: LD_EXP 53
26141: PUSH
26142: LD_STRING Brown
26144: STR
26145: PPUSH
26146: CALL 9865 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26150: LD_EXP 3
26154: PPUSH
26155: LD_EXP 53
26159: PUSH
26160: LD_STRING Donaldson
26162: STR
26163: PPUSH
26164: CALL 9865 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26168: LD_EXP 4
26172: PPUSH
26173: LD_EXP 53
26177: PUSH
26178: LD_STRING Bobby
26180: STR
26181: PPUSH
26182: CALL 9865 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26186: LD_EXP 5
26190: PPUSH
26191: LD_EXP 53
26195: PUSH
26196: LD_STRING Cyrus
26198: STR
26199: PPUSH
26200: CALL 9865 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26204: LD_EXP 6
26208: PPUSH
26209: LD_EXP 53
26213: PUSH
26214: LD_STRING Lisa
26216: STR
26217: PPUSH
26218: CALL 9865 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26222: LD_EXP 7
26226: PPUSH
26227: LD_EXP 53
26231: PUSH
26232: LD_STRING Frank
26234: STR
26235: PPUSH
26236: CALL 9865 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26240: LD_EXP 8
26244: PPUSH
26245: LD_EXP 53
26249: PUSH
26250: LD_STRING Kikuchi
26252: STR
26253: PPUSH
26254: CALL 9865 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26258: LD_EXP 9
26262: PPUSH
26263: LD_EXP 53
26267: PUSH
26268: LD_STRING Houten
26270: STR
26271: PPUSH
26272: CALL 9865 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26276: LD_EXP 10
26280: PPUSH
26281: LD_EXP 53
26285: PUSH
26286: LD_STRING Gary
26288: STR
26289: PPUSH
26290: CALL 9865 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26294: LD_EXP 19
26298: PPUSH
26299: LD_EXP 53
26303: PUSH
26304: LD_STRING Cornell
26306: STR
26307: PPUSH
26308: CALL 9865 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26312: LD_EXP 11
26316: PPUSH
26317: LD_EXP 53
26321: PUSH
26322: LD_STRING Simms
26324: STR
26325: PPUSH
26326: CALL 9865 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26330: LD_EXP 12
26334: PPUSH
26335: LD_EXP 53
26339: PUSH
26340: LD_STRING Denis
26342: STR
26343: PPUSH
26344: CALL 9865 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26348: LD_EXP 13
26352: PPUSH
26353: LD_EXP 53
26357: PUSH
26358: LD_STRING Joan
26360: STR
26361: PPUSH
26362: CALL 9865 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26366: LD_EXP 15
26370: PPUSH
26371: LD_EXP 53
26375: PUSH
26376: LD_STRING Gladstone
26378: STR
26379: PPUSH
26380: CALL 9865 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26384: LD_EXP 17
26388: PPUSH
26389: LD_EXP 53
26393: PUSH
26394: LD_STRING DeltaDoctor
26396: STR
26397: PPUSH
26398: CALL 9865 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26402: LD_EXP 22
26406: PPUSH
26407: LD_STRING 10c_lock
26409: PPUSH
26410: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26414: LD_INT 50
26416: PUSH
26417: EMPTY
26418: LIST
26419: PUSH
26420: LD_INT 22
26422: PUSH
26423: LD_INT 1
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 21
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 2
26442: PUSH
26443: LD_INT 25
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 25
26455: PUSH
26456: LD_INT 2
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 25
26465: PUSH
26466: LD_INT 3
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 25
26475: PUSH
26476: LD_INT 4
26478: PUSH
26479: EMPTY
26480: LIST
26481: LIST
26482: PUSH
26483: LD_INT 25
26485: PUSH
26486: LD_INT 5
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 25
26495: PUSH
26496: LD_INT 8
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: PUSH
26512: EMPTY
26513: LIST
26514: LIST
26515: LIST
26516: LIST
26517: PPUSH
26518: CALL_OW 69
26522: PUSH
26523: LD_EXP 1
26527: PUSH
26528: LD_EXP 2
26532: PUSH
26533: LD_EXP 3
26537: PUSH
26538: LD_EXP 4
26542: PUSH
26543: LD_EXP 5
26547: PUSH
26548: LD_EXP 6
26552: PUSH
26553: LD_EXP 7
26557: PUSH
26558: LD_EXP 15
26562: PUSH
26563: LD_EXP 8
26567: PUSH
26568: LD_EXP 12
26572: PUSH
26573: LD_EXP 13
26577: PUSH
26578: LD_EXP 9
26582: PUSH
26583: LD_EXP 11
26587: PUSH
26588: LD_EXP 10
26592: PUSH
26593: LD_EXP 17
26597: PUSH
26598: LD_EXP 19
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: LIST
26609: LIST
26610: LIST
26611: LIST
26612: LIST
26613: LIST
26614: LIST
26615: LIST
26616: LIST
26617: LIST
26618: LIST
26619: LIST
26620: DIFF
26621: PPUSH
26622: LD_STRING 10_other_survivors
26624: PPUSH
26625: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26629: LD_INT 50
26631: PUSH
26632: EMPTY
26633: LIST
26634: PUSH
26635: LD_INT 22
26637: PUSH
26638: LD_INT 1
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: PUSH
26645: LD_INT 21
26647: PUSH
26648: LD_INT 1
26650: PUSH
26651: EMPTY
26652: LIST
26653: LIST
26654: PUSH
26655: LD_INT 2
26657: PUSH
26658: LD_INT 25
26660: PUSH
26661: LD_INT 16
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 25
26670: PUSH
26671: LD_INT 12
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: LIST
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: LIST
26688: PPUSH
26689: CALL_OW 69
26693: PPUSH
26694: LD_STRING 10_ape
26696: PPUSH
26697: CALL_OW 38
// YouWin ;
26701: CALL_OW 103
// end ;
26705: LD_VAR 0 1
26709: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26710: LD_INT 0
26712: PPUSH
26713: PPUSH
26714: PPUSH
26715: PPUSH
// epsilonBase = [ ] ;
26716: LD_ADDR_VAR 0 2
26720: PUSH
26721: EMPTY
26722: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26723: LD_ADDR_VAR 0 3
26727: PUSH
26728: LD_INT 22
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 21
26740: PUSH
26741: LD_INT 3
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: PUSH
26748: LD_INT 50
26750: PUSH
26751: EMPTY
26752: LIST
26753: PUSH
26754: EMPTY
26755: LIST
26756: LIST
26757: LIST
26758: PPUSH
26759: CALL_OW 69
26763: ST_TO_ADDR
// for i in buildings do
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: LD_VAR 0 3
26773: PUSH
26774: FOR_IN
26775: IFFALSE 27212
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26777: LD_VAR 0 4
26781: PPUSH
26782: CALL_OW 266
26786: PUSH
26787: LD_INT 6
26789: PUSH
26790: LD_INT 7
26792: PUSH
26793: LD_INT 8
26795: PUSH
26796: EMPTY
26797: LIST
26798: LIST
26799: LIST
26800: IN
26801: IFFALSE 26915
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26803: LD_ADDR_VAR 0 2
26807: PUSH
26808: LD_VAR 0 2
26812: PUSH
26813: LD_VAR 0 4
26817: PPUSH
26818: CALL_OW 266
26822: PUSH
26823: LD_VAR 0 4
26827: PPUSH
26828: CALL_OW 250
26832: PUSH
26833: LD_VAR 0 4
26837: PPUSH
26838: CALL_OW 251
26842: PUSH
26843: LD_VAR 0 4
26847: PPUSH
26848: CALL_OW 254
26852: PUSH
26853: LD_VAR 0 4
26857: PPUSH
26858: CALL_OW 267
26862: PUSH
26863: LD_VAR 0 4
26867: PPUSH
26868: CALL_OW 248
26872: PUSH
26873: LD_VAR 0 4
26877: PPUSH
26878: LD_INT 1
26880: PPUSH
26881: CALL_OW 268
26885: PUSH
26886: LD_VAR 0 4
26890: PPUSH
26891: LD_INT 2
26893: PPUSH
26894: CALL_OW 268
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: PUSH
26909: EMPTY
26910: LIST
26911: ADD
26912: ST_TO_ADDR
26913: GO 27210
// if GetBType ( i ) = b_bunker then
26915: LD_VAR 0 4
26919: PPUSH
26920: CALL_OW 266
26924: PUSH
26925: LD_INT 32
26927: EQUAL
26928: IFFALSE 27025
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26930: LD_ADDR_VAR 0 2
26934: PUSH
26935: LD_VAR 0 2
26939: PUSH
26940: LD_VAR 0 4
26944: PPUSH
26945: CALL_OW 266
26949: PUSH
26950: LD_VAR 0 4
26954: PPUSH
26955: CALL_OW 250
26959: PUSH
26960: LD_VAR 0 4
26964: PPUSH
26965: CALL_OW 251
26969: PUSH
26970: LD_VAR 0 4
26974: PPUSH
26975: CALL_OW 254
26979: PUSH
26980: LD_VAR 0 4
26984: PPUSH
26985: CALL_OW 267
26989: PUSH
26990: LD_VAR 0 4
26994: PPUSH
26995: CALL_OW 248
26999: PUSH
27000: LD_VAR 0 4
27004: PPUSH
27005: CALL_OW 269
27009: PUSH
27010: EMPTY
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: PUSH
27019: EMPTY
27020: LIST
27021: ADD
27022: ST_TO_ADDR
27023: GO 27210
// if GetBType ( i ) = b_factory then
27025: LD_VAR 0 4
27029: PPUSH
27030: CALL_OW 266
27034: PUSH
27035: LD_INT 3
27037: EQUAL
27038: IFFALSE 27128
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27040: LD_ADDR_VAR 0 2
27044: PUSH
27045: LD_VAR 0 2
27049: PPUSH
27050: LD_INT 1
27052: PPUSH
27053: LD_VAR 0 4
27057: PPUSH
27058: CALL_OW 266
27062: PUSH
27063: LD_VAR 0 4
27067: PPUSH
27068: CALL_OW 250
27072: PUSH
27073: LD_VAR 0 4
27077: PPUSH
27078: CALL_OW 251
27082: PUSH
27083: LD_VAR 0 4
27087: PPUSH
27088: CALL_OW 254
27092: PUSH
27093: LD_VAR 0 4
27097: PPUSH
27098: CALL_OW 267
27102: PUSH
27103: LD_VAR 0 4
27107: PPUSH
27108: CALL_OW 248
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: PPUSH
27121: CALL_OW 2
27125: ST_TO_ADDR
27126: GO 27210
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27128: LD_ADDR_VAR 0 2
27132: PUSH
27133: LD_VAR 0 2
27137: PUSH
27138: LD_VAR 0 4
27142: PPUSH
27143: CALL_OW 266
27147: PUSH
27148: LD_VAR 0 4
27152: PPUSH
27153: CALL_OW 250
27157: PUSH
27158: LD_VAR 0 4
27162: PPUSH
27163: CALL_OW 251
27167: PUSH
27168: LD_VAR 0 4
27172: PPUSH
27173: CALL_OW 254
27177: PUSH
27178: LD_VAR 0 4
27182: PPUSH
27183: CALL_OW 267
27187: PUSH
27188: LD_VAR 0 4
27192: PPUSH
27193: CALL_OW 248
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: PUSH
27206: EMPTY
27207: LIST
27208: ADD
27209: ST_TO_ADDR
// end ;
27210: GO 26774
27212: POP
27213: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27214: LD_VAR 0 2
27218: PPUSH
27219: LD_STRING 10_EpsilonBase
27221: PPUSH
27222: CALL_OW 39
// end ; end_of_file
27226: LD_VAR 0 1
27230: RET
// every 0 0$30 do
27231: GO 27233
27233: DISABLE
// begin enable ;
27234: ENABLE
// if cratesSpawned < 6 then
27235: LD_EXP 55
27239: PUSH
27240: LD_INT 6
27242: LESS
27243: IFFALSE 27280
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27245: LD_INT 3
27247: PPUSH
27248: LD_INT 5
27250: PPUSH
27251: CALL_OW 12
27255: PPUSH
27256: LD_INT 16
27258: PPUSH
27259: LD_INT 1
27261: PPUSH
27262: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27266: LD_ADDR_EXP 55
27270: PUSH
27271: LD_EXP 55
27275: PUSH
27276: LD_INT 1
27278: PLUS
27279: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27280: LD_EXP 55
27284: PUSH
27285: LD_INT 6
27287: GREATEREQUAL
27288: PUSH
27289: LD_EXP 55
27293: PUSH
27294: LD_INT 12
27296: LESS
27297: AND
27298: IFFALSE 27342
// begin wait ( 0 0$30 ) ;
27300: LD_INT 1050
27302: PPUSH
27303: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27307: LD_INT 3
27309: PPUSH
27310: LD_INT 5
27312: PPUSH
27313: CALL_OW 12
27317: PPUSH
27318: LD_INT 16
27320: PPUSH
27321: LD_INT 1
27323: PPUSH
27324: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27328: LD_ADDR_EXP 55
27332: PUSH
27333: LD_EXP 55
27337: PUSH
27338: LD_INT 1
27340: PLUS
27341: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27342: LD_EXP 55
27346: PUSH
27347: LD_INT 12
27349: GREATEREQUAL
27350: IFFALSE 27394
// begin wait ( 1 1$30 ) ;
27352: LD_INT 3150
27354: PPUSH
27355: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27359: LD_INT 3
27361: PPUSH
27362: LD_INT 5
27364: PPUSH
27365: CALL_OW 12
27369: PPUSH
27370: LD_INT 16
27372: PPUSH
27373: LD_INT 1
27375: PPUSH
27376: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27380: LD_ADDR_EXP 55
27384: PUSH
27385: LD_EXP 55
27389: PUSH
27390: LD_INT 1
27392: PLUS
27393: ST_TO_ADDR
// end ; end ;
27394: END
