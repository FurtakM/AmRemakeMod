// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24396 0 0
// PrepareDifficulty ;
 250: CALL 9956 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19534 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19534 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19534 0 2
// PrepareArabianCommander ;
 354: CALL 3128 0 0
// PrepareArabian ;
 358: CALL 3180 0 0
// BuildArabianBase ;
 362: CALL 12655 0 0
// TameApemans ;
 366: CALL 18499 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9550 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9550 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9550 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9550 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9550 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9550 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9550 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9550 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9550 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9550 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9550 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9550 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9550 0 2
1831: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1832: LD_ADDR_EXP 14
1836: PUSH
1837: LD_STRING Khatam
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: CALL 9550 0 2
1847: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1848: LD_ADDR_EXP 15
1852: PUSH
1853: LD_STRING Gladstone
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 9550 0 2
1863: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1864: LD_ADDR_EXP 17
1868: PUSH
1869: LD_STRING DeltaDoctor
1871: PPUSH
1872: LD_INT 1
1874: PPUSH
1875: CALL 9550 0 2
1879: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1880: LD_STRING 08_Frank
1882: PPUSH
1883: CALL_OW 28
1887: PUSH
1888: LD_INT 1
1890: EQUAL
1891: IFFALSE 1909
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1893: LD_ADDR_EXP 8
1897: PUSH
1898: LD_STRING Yamoko
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL 9550 0 2
1908: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1909: LD_ADDR_EXP 22
1913: PUSH
1914: LD_STRING 09_others
1916: PPUSH
1917: CALL_OW 31
1921: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1922: LD_ADDR_EXP 23
1926: PUSH
1927: LD_STRING 09_apes
1929: PPUSH
1930: CALL_OW 31
1934: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1935: LD_EXP 11
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_INT 0
1945: PPUSH
1946: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1950: LD_EXP 12
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1965: LD_EXP 13
1969: PPUSH
1970: LD_INT 1
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1980: LD_EXP 14
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1995: LD_EXP 15
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2010: LD_EXP 17
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2025: LD_EXP 8
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2040: LD_EXP 11
2044: PUSH
2045: LD_EXP 14
2049: PUSH
2050: LD_EXP 12
2054: PUSH
2055: LD_EXP 15
2059: PUSH
2060: LD_EXP 17
2064: PUSH
2065: LD_EXP 13
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 336
// if others09 > 2 then
2085: LD_EXP 22
2089: PUSH
2090: LD_INT 2
2092: GREATER
2093: IFFALSE 2156
// begin for i := 1 to 3 do
2095: LD_ADDR_VAR 0 2
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_INT 3
2107: PUSH
2108: FOR_TO
2109: IFFALSE 2152
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2111: LD_EXP 22
2115: PUSH
2116: LD_VAR 0 2
2120: ARRAY
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 0
2127: PPUSH
2128: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2132: LD_EXP 22
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 336
// end ;
2150: GO 2108
2152: POP
2153: POP
// end else
2154: GO 2200
// begin for i in others09 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: LD_EXP 22
2165: PUSH
2166: FOR_IN
2167: IFFALSE 2198
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetClass ( i , 2 ) ;
2184: LD_VAR 0 2
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 336
// end ;
2196: GO 2166
2198: POP
2199: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2200: LD_INT 22
2202: PUSH
2203: LD_INT 4
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 25
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PPUSH
2224: CALL_OW 69
2228: PUSH
2229: LD_INT 0
2231: EQUAL
2232: IFFALSE 2350
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: LD_INT 22
2241: PUSH
2242: LD_INT 4
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 25
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 69
2267: PUSH
2268: LD_EXP 11
2272: PUSH
2273: LD_EXP 14
2277: PUSH
2278: LD_EXP 12
2282: PUSH
2283: LD_EXP 15
2287: PUSH
2288: LD_EXP 17
2292: PUSH
2293: LD_EXP 13
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: DIFF
2306: ST_TO_ADDR
// if not tmp then
2307: LD_VAR 0 3
2311: NOT
2312: IFFALSE 2334
// begin if Denis then
2314: LD_EXP 12
2318: IFFALSE 2332
// SetClass ( Denis , 2 ) ;
2320: LD_EXP 12
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 336
// exit ;
2332: GO 2500
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2334: LD_VAR 0 3
2338: PUSH
2339: LD_INT 1
2341: ARRAY
2342: PPUSH
2343: LD_INT 2
2345: PPUSH
2346: CALL_OW 336
// end ; for i in ape09 do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: FOR_IN
2361: IFFALSE 2380
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
2378: GO 2360
2380: POP
2381: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2382: LD_INT 22
2384: PUSH
2385: LD_INT 4
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 25
2394: PUSH
2395: LD_INT 2
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PPUSH
2406: CALL_OW 69
2410: PPUSH
2411: LD_INT 0
2413: PPUSH
2414: LD_INT 101
2416: PPUSH
2417: LD_INT 30
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL_OW 205
// uc_side = 1 ;
2427: LD_ADDR_OWVAR 20
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// hc_class := 1 ;
2435: LD_ADDR_OWVAR 28
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// hc_sex := sex_female ;
2443: LD_ADDR_OWVAR 27
2447: PUSH
2448: LD_INT 2
2450: ST_TO_ADDR
// hc_gallery :=  ;
2451: LD_ADDR_OWVAR 33
2455: PUSH
2456: LD_STRING 
2458: ST_TO_ADDR
// hc_name :=  ;
2459: LD_ADDR_OWVAR 26
2463: PUSH
2464: LD_STRING 
2466: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2467: LD_ADDR_OWVAR 31
2471: PUSH
2472: LD_INT 1
2474: PUSH
2475: LD_INT 7
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: ST_TO_ADDR
// AmScout = CreateHuman ;
2490: LD_ADDR_EXP 18
2494: PUSH
2495: CALL_OW 44
2499: ST_TO_ADDR
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareCornell ; begin
2505: LD_INT 0
2507: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2508: LD_INT 4
2510: PPUSH
2511: LD_INT 4
2513: PPUSH
2514: CALL_OW 343
// uc_side = 4 ;
2518: LD_ADDR_OWVAR 20
2522: PUSH
2523: LD_INT 4
2525: ST_TO_ADDR
// uc_nation = 1 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2534: LD_ADDR_EXP 19
2538: PUSH
2539: LD_STRING 03_Cornel
2541: PPUSH
2542: LD_INT 1
2544: PPUSH
2545: CALL 9550 0 2
2549: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2550: LD_EXP 19
2554: PPUSH
2555: LD_INT 8
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2565: LD_EXP 19
2569: PPUSH
2570: LD_INT 350
2572: PPUSH
2573: CALL_OW 234
// if IsInUnit ( JMM ) then
2577: LD_EXP 1
2581: PPUSH
2582: CALL_OW 310
2586: IFFALSE 2629
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2588: LD_EXP 19
2592: PPUSH
2593: LD_EXP 1
2597: PPUSH
2598: CALL_OW 310
2602: PPUSH
2603: CALL_OW 250
2607: PPUSH
2608: LD_EXP 1
2612: PPUSH
2613: CALL_OW 310
2617: PPUSH
2618: CALL_OW 251
2622: PPUSH
2623: CALL_OW 111
2627: GO 2658
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2629: LD_EXP 19
2633: PPUSH
2634: LD_EXP 1
2638: PPUSH
2639: CALL_OW 250
2643: PPUSH
2644: LD_EXP 1
2648: PPUSH
2649: CALL_OW 251
2653: PPUSH
2654: CALL_OW 111
// end ; end_of_file
2658: LD_VAR 0 1
2662: RET
// export function PrepareRussians ; var i , un ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
2667: PPUSH
// uc_side = 3 ;
2668: LD_ADDR_OWVAR 20
2672: PUSH
2673: LD_INT 3
2675: ST_TO_ADDR
// uc_nation = 3 ;
2676: LD_ADDR_OWVAR 21
2680: PUSH
2681: LD_INT 3
2683: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2684: LD_ADDR_EXP 25
2688: PUSH
2689: LD_STRING Tsaritsyn
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: CALL 9550 0 2
2699: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2700: LD_EXP 25
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 49
// for i = 1 to 14 do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_INT 14
2727: PUSH
2728: FOR_TO
2729: IFFALSE 2815
// begin uc_side = 3 ;
2731: LD_ADDR_OWVAR 20
2735: PUSH
2736: LD_INT 3
2738: ST_TO_ADDR
// uc_nation = 3 ;
2739: LD_ADDR_OWVAR 21
2743: PUSH
2744: LD_INT 3
2746: ST_TO_ADDR
// hc_gallery =  ;
2747: LD_ADDR_OWVAR 33
2751: PUSH
2752: LD_STRING 
2754: ST_TO_ADDR
// hc_name =  ;
2755: LD_ADDR_OWVAR 26
2759: PUSH
2760: LD_STRING 
2762: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2763: LD_INT 0
2765: PPUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_EXP 36
2773: PPUSH
2774: LD_EXP 37
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: CALL_OW 380
// un = CreateHuman ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: CALL_OW 44
2797: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2798: LD_VAR 0 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 49
// end ;
2813: GO 2728
2815: POP
2816: POP
// for i = 1 to 6 do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 6
2829: PUSH
2830: FOR_TO
2831: IFFALSE 2917
// begin uc_side = 3 ;
2833: LD_ADDR_OWVAR 20
2837: PUSH
2838: LD_INT 3
2840: ST_TO_ADDR
// uc_nation = 3 ;
2841: LD_ADDR_OWVAR 21
2845: PUSH
2846: LD_INT 3
2848: ST_TO_ADDR
// hc_gallery =  ;
2849: LD_ADDR_OWVAR 33
2853: PUSH
2854: LD_STRING 
2856: ST_TO_ADDR
// hc_name =  ;
2857: LD_ADDR_OWVAR 26
2861: PUSH
2862: LD_STRING 
2864: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 2
2870: PPUSH
2871: LD_EXP 36
2875: PPUSH
2876: LD_EXP 37
2880: PPUSH
2881: CALL_OW 12
2885: PPUSH
2886: CALL_OW 380
// un = CreateHuman ;
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_INT 3
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 49
// end ;
2915: GO 2830
2917: POP
2918: POP
// for i = 1 to 6 do
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: DOUBLE
2925: LD_INT 1
2927: DEC
2928: ST_TO_ADDR
2929: LD_INT 6
2931: PUSH
2932: FOR_TO
2933: IFFALSE 3019
// begin uc_side = 3 ;
2935: LD_ADDR_OWVAR 20
2939: PUSH
2940: LD_INT 3
2942: ST_TO_ADDR
// uc_nation = 3 ;
2943: LD_ADDR_OWVAR 21
2947: PUSH
2948: LD_INT 3
2950: ST_TO_ADDR
// hc_gallery =  ;
2951: LD_ADDR_OWVAR 33
2955: PUSH
2956: LD_STRING 
2958: ST_TO_ADDR
// hc_name =  ;
2959: LD_ADDR_OWVAR 26
2963: PUSH
2964: LD_STRING 
2966: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2967: LD_INT 0
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_EXP 36
2977: PPUSH
2978: LD_EXP 37
2982: PPUSH
2983: CALL_OW 12
2987: PPUSH
2988: CALL_OW 380
// un = CreateHuman ;
2992: LD_ADDR_VAR 0 3
2996: PUSH
2997: CALL_OW 44
3001: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 3
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 49
// end ;
3017: GO 2932
3019: POP
3020: POP
// for i = 1 to 4 do
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: DOUBLE
3027: LD_INT 1
3029: DEC
3030: ST_TO_ADDR
3031: LD_INT 4
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3121
// begin uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// uc_nation = 3 ;
3045: LD_ADDR_OWVAR 21
3049: PUSH
3050: LD_INT 3
3052: ST_TO_ADDR
// hc_gallery =  ;
3053: LD_ADDR_OWVAR 33
3057: PUSH
3058: LD_STRING 
3060: ST_TO_ADDR
// hc_name =  ;
3061: LD_ADDR_OWVAR 26
3065: PUSH
3066: LD_STRING 
3068: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3069: LD_INT 0
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_EXP 36
3079: PPUSH
3080: LD_EXP 37
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: CALL_OW 380
// un = CreateHuman ;
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: CALL_OW 44
3103: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3104: LD_VAR 0 3
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// end ;
3119: GO 3034
3121: POP
3122: POP
// end ; end_of_file
3123: LD_VAR 0 1
3127: RET
// export function PrepareArabianCommander ; begin
3128: LD_INT 0
3130: PPUSH
// uc_side = 2 ;
3131: LD_ADDR_OWVAR 20
3135: PUSH
3136: LD_INT 2
3138: ST_TO_ADDR
// uc_nation = 2 ;
3139: LD_ADDR_OWVAR 21
3143: PUSH
3144: LD_INT 2
3146: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3147: LD_ADDR_EXP 26
3151: PUSH
3152: LD_STRING Dietrich
3154: PPUSH
3155: CALL_OW 25
3159: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3160: LD_EXP 26
3164: PPUSH
3165: LD_INT 4
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 49
// end ;
3175: LD_VAR 0 1
3179: RET
// export function PrepareArabian ; var i , un , veh ; begin
3180: LD_INT 0
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
// uc_side := 2 ;
3186: LD_ADDR_OWVAR 20
3190: PUSH
3191: LD_INT 2
3193: ST_TO_ADDR
// uc_nation := 2 ;
3194: LD_ADDR_OWVAR 21
3198: PUSH
3199: LD_INT 2
3201: ST_TO_ADDR
// if not Ahmed then
3202: LD_EXP 27
3206: NOT
3207: IFFALSE 3275
// begin InitHc ;
3209: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 1
3218: PPUSH
3219: LD_EXP 36
3223: PPUSH
3224: LD_EXP 37
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: PPUSH
3233: CALL_OW 12
3237: PPUSH
3238: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3242: LD_ADDR_OWVAR 26
3246: PUSH
3247: LD_STRING Ahmed Abbasid
3249: ST_TO_ADDR
// Ahmed := CreateHuman ;
3250: LD_ADDR_EXP 27
3254: PUSH
3255: CALL_OW 44
3259: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3260: LD_EXP 27
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: LD_INT 0
3270: PPUSH
3271: CALL_OW 49
// end ; for i = 1 to 3 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 3
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3375
// begin uc_side = 2 ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_INT 2
3298: ST_TO_ADDR
// uc_nation = 2 ;
3299: LD_ADDR_OWVAR 21
3303: PUSH
3304: LD_INT 2
3306: ST_TO_ADDR
// hc_gallery =  ;
3307: LD_ADDR_OWVAR 33
3311: PUSH
3312: LD_STRING 
3314: ST_TO_ADDR
// hc_name =  ;
3315: LD_ADDR_OWVAR 26
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3323: LD_INT 0
3325: PPUSH
3326: LD_INT 1
3328: PPUSH
3329: LD_EXP 36
3333: PPUSH
3334: LD_EXP 37
3338: PPUSH
3339: CALL_OW 12
3343: PPUSH
3344: CALL_OW 380
// un = CreateHuman ;
3348: LD_ADDR_VAR 0 3
3352: PUSH
3353: CALL_OW 44
3357: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
// end ;
3373: GO 3288
3375: POP
3376: POP
// for i = 1 to 6 do
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: DOUBLE
3383: LD_INT 1
3385: DEC
3386: ST_TO_ADDR
3387: LD_INT 6
3389: PUSH
3390: FOR_TO
3391: IFFALSE 3477
// begin uc_side = 2 ;
3393: LD_ADDR_OWVAR 20
3397: PUSH
3398: LD_INT 2
3400: ST_TO_ADDR
// uc_nation = 2 ;
3401: LD_ADDR_OWVAR 21
3405: PUSH
3406: LD_INT 2
3408: ST_TO_ADDR
// hc_gallery =  ;
3409: LD_ADDR_OWVAR 33
3413: PUSH
3414: LD_STRING 
3416: ST_TO_ADDR
// hc_name =  ;
3417: LD_ADDR_OWVAR 26
3421: PUSH
3422: LD_STRING 
3424: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3425: LD_INT 0
3427: PPUSH
3428: LD_INT 2
3430: PPUSH
3431: LD_EXP 36
3435: PPUSH
3436: LD_EXP 37
3440: PPUSH
3441: CALL_OW 12
3445: PPUSH
3446: CALL_OW 380
// un = CreateHuman ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: CALL_OW 44
3459: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_INT 4
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 49
// end ;
3475: GO 3390
3477: POP
3478: POP
// for i = 1 to 6 do
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_INT 6
3491: PUSH
3492: FOR_TO
3493: IFFALSE 3579
// begin uc_side = 2 ;
3495: LD_ADDR_OWVAR 20
3499: PUSH
3500: LD_INT 2
3502: ST_TO_ADDR
// uc_nation = 2 ;
3503: LD_ADDR_OWVAR 21
3507: PUSH
3508: LD_INT 2
3510: ST_TO_ADDR
// hc_gallery =  ;
3511: LD_ADDR_OWVAR 33
3515: PUSH
3516: LD_STRING 
3518: ST_TO_ADDR
// hc_name =  ;
3519: LD_ADDR_OWVAR 26
3523: PUSH
3524: LD_STRING 
3526: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3527: LD_INT 0
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: LD_EXP 36
3537: PPUSH
3538: LD_EXP 37
3542: PPUSH
3543: CALL_OW 12
3547: PPUSH
3548: CALL_OW 380
// un = CreateHuman ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: CALL_OW 44
3561: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3562: LD_VAR 0 3
3566: PPUSH
3567: LD_INT 4
3569: PPUSH
3570: LD_INT 0
3572: PPUSH
3573: CALL_OW 49
// end ;
3577: GO 3492
3579: POP
3580: POP
// for i = 1 to 4 do
3581: LD_ADDR_VAR 0 2
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 4
3593: PUSH
3594: FOR_TO
3595: IFFALSE 3681
// begin uc_side = 2 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 2
3604: ST_TO_ADDR
// uc_nation = 2 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 2
3612: ST_TO_ADDR
// hc_gallery =  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// hc_name =  ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 4
3634: PPUSH
3635: LD_EXP 36
3639: PPUSH
3640: LD_EXP 37
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: CALL_OW 380
// un = CreateHuman ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: CALL_OW 44
3663: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 49
// end ;
3679: GO 3594
3681: POP
3682: POP
// for i = 1 to 2 do
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: DOUBLE
3689: LD_INT 1
3691: DEC
3692: ST_TO_ADDR
3693: LD_INT 2
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3827
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 22
3706: PUSH
3707: LD_INT 2
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 21
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 58
3726: PUSH
3727: EMPTY
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: ST_TO_ADDR
// uc_side = 2 ;
3740: LD_ADDR_OWVAR 20
3744: PUSH
3745: LD_INT 2
3747: ST_TO_ADDR
// uc_nation = 2 ;
3748: LD_ADDR_OWVAR 21
3752: PUSH
3753: LD_INT 2
3755: ST_TO_ADDR
// hc_gallery =  ;
3756: LD_ADDR_OWVAR 33
3760: PUSH
3761: LD_STRING 
3763: ST_TO_ADDR
// hc_name =  ;
3764: LD_ADDR_OWVAR 26
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3772: LD_INT 0
3774: PPUSH
3775: LD_INT 3
3777: PPUSH
3778: LD_EXP 36
3782: PPUSH
3783: LD_EXP 37
3787: PPUSH
3788: CALL_OW 12
3792: PPUSH
3793: CALL_OW 380
// un = CreateHuman ;
3797: LD_ADDR_VAR 0 3
3801: PUSH
3802: CALL_OW 44
3806: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3807: LD_VAR 0 3
3811: PPUSH
3812: LD_VAR 0 4
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: PPUSH
3821: CALL_OW 52
// end ;
3825: GO 3696
3827: POP
3828: POP
// end ;
3829: LD_VAR 0 1
3833: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3834: LD_INT 0
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
// for i := 1 to 2 do
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: DOUBLE
3848: LD_INT 1
3850: DEC
3851: ST_TO_ADDR
3852: LD_INT 2
3854: PUSH
3855: FOR_TO
3856: IFFALSE 3982
// begin uc_side = 5 ;
3858: LD_ADDR_OWVAR 20
3862: PUSH
3863: LD_INT 5
3865: ST_TO_ADDR
// uc_nation = 2 ;
3866: LD_ADDR_OWVAR 21
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// vc_chassis := 31 ;
3874: LD_ADDR_OWVAR 37
3878: PUSH
3879: LD_INT 31
3881: ST_TO_ADDR
// vc_control := control_rider ;
3882: LD_ADDR_OWVAR 38
3886: PUSH
3887: LD_INT 4
3889: ST_TO_ADDR
// animal := CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 7
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// hc_gallery =  ;
3915: LD_ADDR_OWVAR 33
3919: PUSH
3920: LD_STRING 
3922: ST_TO_ADDR
// hc_name =  ;
3923: LD_ADDR_OWVAR 26
3927: PUSH
3928: LD_STRING 
3930: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3931: LD_INT 0
3933: PPUSH
3934: LD_INT 11
3936: PPUSH
3937: LD_EXP 36
3941: PPUSH
3942: LD_EXP 37
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 380
// un = CreateHuman ;
3956: LD_ADDR_VAR 0 4
3960: PUSH
3961: CALL_OW 44
3965: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3966: LD_VAR 0 4
3970: PPUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: CALL_OW 52
// end ;
3980: GO 3855
3982: POP
3983: POP
// repeat wait ( 0 0$1 ) ;
3984: LD_INT 35
3986: PPUSH
3987: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3991: LD_ADDR_VAR 0 5
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 69
4010: PPUSH
4011: LD_VAR 0 2
4015: PPUSH
4016: CALL_OW 74
4020: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4021: LD_ADDR_VAR 0 6
4025: PUSH
4026: LD_INT 22
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 59
4041: PUSH
4042: EMPTY
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 2
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: PPUSH
4078: CALL_OW 69
4082: PPUSH
4083: LD_VAR 0 2
4087: PPUSH
4088: CALL_OW 74
4092: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 25
4110: PUSH
4111: LD_INT 11
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 69
4126: PUSH
4127: FOR_IN
4128: IFFALSE 4198
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4130: LD_VAR 0 2
4134: PPUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: CALL_OW 296
4144: PUSH
4145: LD_INT 8
4147: PLUS
4148: PUSH
4149: LD_VAR 0 2
4153: PPUSH
4154: LD_VAR 0 6
4158: PPUSH
4159: CALL_OW 296
4163: LESS
4164: IFFALSE 4182
// ComAttackUnit ( i , target1 ) else
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: CALL_OW 115
4180: GO 4196
// ComAttackUnit ( i , target2 ) ;
4182: LD_VAR 0 2
4186: PPUSH
4187: LD_VAR 0 6
4191: PPUSH
4192: CALL_OW 115
// end ;
4196: GO 4127
4198: POP
4199: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4200: LD_INT 22
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 25
4212: PUSH
4213: LD_INT 11
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 69
4228: PUSH
4229: LD_INT 0
4231: EQUAL
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PUSH
4248: LD_INT 0
4250: EQUAL
4251: OR
4252: IFFALSE 3984
// end ; end_of_file
4254: LD_VAR 0 1
4258: RET
// every 1 do
4259: GO 4261
4261: DISABLE
// begin InGameOn ;
4262: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4266: LD_INT 1
4268: PPUSH
4269: LD_INT 19
4271: PPUSH
4272: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4276: LD_EXP 11
4280: PPUSH
4281: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4285: LD_INT 22
4287: PUSH
4288: LD_INT 4
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 25
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: IFFALSE 4361
// begin repeat wait ( 0 0$1 ) ;
4315: LD_INT 35
4317: PPUSH
4318: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4322: LD_INT 22
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 30
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PPUSH
4346: CALL_OW 69
4350: IFFALSE 4315
// Wait ( 0 0$1 ) ;
4352: LD_INT 35
4354: PPUSH
4355: CALL_OW 67
// end else
4359: GO 4368
// Wait ( 0 0$3 ) ;
4361: LD_INT 105
4363: PPUSH
4364: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4368: LD_EXP 1
4372: PPUSH
4373: CALL_OW 310
4377: PPUSH
4378: CALL_OW 85
// Wait ( 0 0$1 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// if IsOk ( Gary ) then
4389: LD_EXP 10
4393: PPUSH
4394: CALL_OW 302
4398: IFFALSE 4436
// begin Say ( Gary , D2-Gary-1 ) ;
4400: LD_EXP 10
4404: PPUSH
4405: LD_STRING D2-Gary-1
4407: PPUSH
4408: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4412: LD_EXP 1
4416: PPUSH
4417: LD_STRING D2-JMM-1
4419: PPUSH
4420: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4424: LD_EXP 10
4428: PPUSH
4429: LD_STRING D2-Gary-2
4431: PPUSH
4432: CALL_OW 88
// end ; InGameOff ;
4436: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4440: LD_STRING M1
4442: PPUSH
4443: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4447: LD_INT 38
4449: PPUSH
4450: LD_INT 1
4452: PPUSH
4453: LD_INT 100
4455: PPUSH
4456: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4460: LD_INT 47
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 50
4468: PPUSH
4469: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4473: LD_INT 47
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_INT 50
4481: PPUSH
4482: CALL_OW 291
// SaveForQuickRestart ;
4486: CALL_OW 22
// end ;
4490: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4491: LD_EXP 1
4495: PPUSH
4496: LD_EXP 11
4500: PPUSH
4501: CALL_OW 296
4505: PUSH
4506: LD_INT 15
4508: LESS
4509: IFFALSE 4975
4511: GO 4513
4513: DISABLE
// begin InGameOn ;
4514: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4518: LD_EXP 1
4522: PPUSH
4523: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4527: LD_EXP 1
4531: PPUSH
4532: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4536: LD_EXP 1
4540: PPUSH
4541: LD_EXP 11
4545: PPUSH
4546: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4550: LD_INT 35
4552: PPUSH
4553: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4557: LD_EXP 11
4561: PUSH
4562: LD_EXP 13
4566: PUSH
4567: LD_EXP 12
4571: PUSH
4572: LD_EXP 14
4576: PUSH
4577: LD_EXP 8
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PPUSH
4589: LD_EXP 1
4593: PPUSH
4594: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4598: LD_EXP 1
4602: PPUSH
4603: LD_EXP 11
4607: PPUSH
4608: CALL_OW 296
4612: PUSH
4613: LD_INT 5
4615: LESS
4616: IFFALSE 4550
// ComTurnUnit ( JMM , Simms ) ;
4618: LD_EXP 1
4622: PPUSH
4623: LD_EXP 11
4627: PPUSH
4628: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4632: LD_EXP 11
4636: PUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_EXP 12
4646: PUSH
4647: LD_EXP 14
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: LD_EXP 1
4662: PPUSH
4663: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4667: LD_EXP 1
4671: PUSH
4672: LD_EXP 11
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PPUSH
4681: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4685: LD_EXP 11
4689: PPUSH
4690: LD_STRING D2a-Sim-1
4692: PPUSH
4693: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4697: LD_EXP 1
4701: PPUSH
4702: LD_STRING D2a-JMM-1
4704: PPUSH
4705: CALL_OW 88
// if IsOk ( Joan ) then
4709: LD_EXP 13
4713: PPUSH
4714: CALL_OW 302
4718: IFFALSE 4770
// begin ComTurnUnit ( JMM , Joan ) ;
4720: LD_EXP 1
4724: PPUSH
4725: LD_EXP 13
4729: PPUSH
4730: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4734: LD_EXP 13
4738: PPUSH
4739: LD_STRING D2b-Joan-1
4741: PPUSH
4742: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4746: LD_EXP 1
4750: PPUSH
4751: LD_STRING D2b-JMM-1
4753: PPUSH
4754: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4758: LD_EXP 13
4762: PPUSH
4763: LD_STRING D2b-Joan-2
4765: PPUSH
4766: CALL_OW 88
// end ; if IsOk ( Denis ) then
4770: LD_EXP 12
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4807
// begin ComTurnUnit ( JMM , Denis ) ;
4781: LD_EXP 1
4785: PPUSH
4786: LD_EXP 12
4790: PPUSH
4791: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4795: LD_EXP 12
4799: PPUSH
4800: LD_STRING D2c-Den-1
4802: PPUSH
4803: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4807: LD_EXP 8
4811: PPUSH
4812: CALL_OW 302
4816: IFFALSE 4885
// begin repeat wait ( 0 0$1 ) ;
4818: LD_INT 35
4820: PPUSH
4821: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4825: LD_EXP 8
4829: PPUSH
4830: LD_EXP 1
4834: PPUSH
4835: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4839: LD_EXP 1
4843: PPUSH
4844: LD_EXP 8
4848: PPUSH
4849: CALL_OW 296
4853: PUSH
4854: LD_INT 5
4856: LESS
4857: IFFALSE 4818
// ComTurnUnit ( JMM , Kikuchi ) ;
4859: LD_EXP 1
4863: PPUSH
4864: LD_EXP 8
4868: PPUSH
4869: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4873: LD_EXP 8
4877: PPUSH
4878: LD_STRING D3b-Yam-1
4880: PPUSH
4881: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4885: LD_EXP 14
4889: PPUSH
4890: CALL_OW 302
4894: IFFALSE 4934
// begin ComTurnUnit ( JMM , Khatam ) ;
4896: LD_EXP 1
4900: PPUSH
4901: LD_EXP 14
4905: PPUSH
4906: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4910: LD_EXP 1
4914: PPUSH
4915: LD_STRING D2c-JMM-1
4917: PPUSH
4918: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4922: LD_EXP 14
4926: PPUSH
4927: LD_STRING D2c-Khat-1
4929: PPUSH
4930: CALL_OW 88
// end ; InGameOff ;
4934: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4938: LD_INT 22
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4960: LD_STRING M1a
4962: PPUSH
4963: CALL_OW 337
// joinEpsilon = 1 ;
4967: LD_ADDR_EXP 29
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4976: LD_INT 38
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 289
4986: PUSH
4987: LD_INT 0
4989: EQUAL
4990: PUSH
4991: LD_INT 47
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL_OW 289
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: PUSH
5007: LD_INT 47
5009: PPUSH
5010: LD_INT 2
5012: PPUSH
5013: CALL_OW 289
5017: PUSH
5018: LD_INT 0
5020: EQUAL
5021: AND
5022: IFFALSE 5047
5024: GO 5026
5026: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5027: LD_INT 38
5029: PUSH
5030: LD_INT 47
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 62
5039: PPUSH
5040: LD_INT 6
5042: PPUSH
5043: CALL_OW 111
5047: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5048: LD_EXP 61
5052: PUSH
5053: LD_INT 1
5055: EQUAL
5056: IFFALSE 6188
5058: GO 5060
5060: DISABLE
5061: LD_INT 0
5063: PPUSH
5064: PPUSH
5065: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5066: LD_ADDR_VAR 0 1
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 25
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: PPUSH
5106: CALL_OW 69
5110: PUSH
5111: LD_EXP 1
5115: PUSH
5116: LD_EXP 2
5120: PUSH
5121: LD_EXP 3
5125: PUSH
5126: LD_EXP 4
5130: PUSH
5131: LD_EXP 5
5135: PUSH
5136: LD_EXP 6
5140: PUSH
5141: LD_EXP 7
5145: PUSH
5146: LD_EXP 8
5150: PUSH
5151: LD_EXP 9
5155: PUSH
5156: LD_EXP 10
5160: PUSH
5161: LD_EXP 11
5165: PUSH
5166: LD_EXP 12
5170: PUSH
5171: LD_EXP 13
5175: PUSH
5176: LD_EXP 14
5180: PUSH
5181: LD_EXP 15
5185: PUSH
5186: LD_EXP 16
5190: PUSH
5191: LD_EXP 17
5195: PUSH
5196: LD_EXP 18
5200: PUSH
5201: LD_EXP 19
5205: PUSH
5206: LD_EXP 24
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: DIFF
5233: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: LD_INT 22
5241: PUSH
5242: LD_INT 1
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 26
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 2
5261: PUSH
5262: LD_INT 25
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 25
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 25
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: CALL_OW 69
5307: PUSH
5308: LD_EXP 1
5312: PUSH
5313: LD_EXP 2
5317: PUSH
5318: LD_EXP 3
5322: PUSH
5323: LD_EXP 4
5327: PUSH
5328: LD_EXP 5
5332: PUSH
5333: LD_EXP 6
5337: PUSH
5338: LD_EXP 7
5342: PUSH
5343: LD_EXP 8
5347: PUSH
5348: LD_EXP 9
5352: PUSH
5353: LD_EXP 10
5357: PUSH
5358: LD_EXP 11
5362: PUSH
5363: LD_EXP 12
5367: PUSH
5368: LD_EXP 13
5372: PUSH
5373: LD_EXP 14
5377: PUSH
5378: LD_EXP 15
5382: PUSH
5383: LD_EXP 16
5387: PUSH
5388: LD_EXP 17
5392: PUSH
5393: LD_EXP 18
5397: PUSH
5398: LD_EXP 19
5402: PUSH
5403: LD_EXP 24
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: DIFF
5430: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5431: LD_EXP 10
5435: PUSH
5436: LD_VAR 0 2
5440: OR
5441: PUSH
5442: LD_EXP 17
5446: PUSH
5447: LD_VAR 0 1
5451: OR
5452: AND
5453: IFFALSE 5672
// begin DialogueOn ;
5455: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5459: LD_EXP 17
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5484
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5470: LD_EXP 17
5474: PPUSH
5475: LD_STRING D3-Sci1-1
5477: PPUSH
5478: CALL_OW 88
5482: GO 5496
// Say ( tmp1 , D3-Sci1-1 ) ;
5484: LD_VAR 0 1
5488: PPUSH
5489: LD_STRING D3-Sci1-1
5491: PPUSH
5492: CALL_OW 88
// if IsOk ( Gary ) then
5496: LD_EXP 10
5500: PPUSH
5501: CALL_OW 302
5505: IFFALSE 5521
// Say ( Gary , D3-Gary-1 ) else
5507: LD_EXP 10
5511: PPUSH
5512: LD_STRING D3-Gary-1
5514: PPUSH
5515: CALL_OW 88
5519: GO 5533
// Say ( tmp2 , D3-Gary-1 ) ;
5521: LD_VAR 0 2
5525: PPUSH
5526: LD_STRING D3-Gary-1
5528: PPUSH
5529: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5533: LD_EXP 17
5537: PPUSH
5538: CALL_OW 302
5542: IFFALSE 5558
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5544: LD_EXP 17
5548: PPUSH
5549: LD_STRING D3-Sci1-2
5551: PPUSH
5552: CALL_OW 88
5556: GO 5570
// Say ( tmp1 , D3-Sci1-2 ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_STRING D3-Sci1-2
5565: PPUSH
5566: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5570: LD_EXP 1
5574: PPUSH
5575: LD_STRING D3-JMM-2
5577: PPUSH
5578: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5582: LD_EXP 17
5586: PPUSH
5587: CALL_OW 302
5591: IFFALSE 5607
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5593: LD_EXP 17
5597: PPUSH
5598: LD_STRING D3-Sci1-3
5600: PPUSH
5601: CALL_OW 88
5605: GO 5619
// Say ( tmp1 , D3-Sci1-3 ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_STRING D3-Sci1-3
5614: PPUSH
5615: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_STRING D3-JMM-3
5626: PPUSH
5627: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5631: LD_EXP 17
5635: PPUSH
5636: CALL_OW 302
5640: IFFALSE 5656
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5642: LD_EXP 17
5646: PPUSH
5647: LD_STRING D3-Sci1-4
5649: PPUSH
5650: CALL_OW 88
5654: GO 5668
// Say ( tmp1 , D3-Sci1-4 ) ;
5656: LD_VAR 0 1
5660: PPUSH
5661: LD_STRING D3-Sci1-4
5663: PPUSH
5664: CALL_OW 88
// DialogueOff ;
5668: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5672: LD_INT 12
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5685: LD_INT 32
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5698: LD_INT 12
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: LD_INT 1
5706: PPUSH
5707: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5711: LD_INT 33
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5724: LD_STRING M2
5726: PPUSH
5727: CALL_OW 337
// wait ( 3 3$0 ) ;
5731: LD_INT 6300
5733: PPUSH
5734: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5738: LD_INT 35
5740: PPUSH
5741: CALL_OW 67
// until not InBattle ( 1 ) ;
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 463
5752: NOT
5753: IFFALSE 5738
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5755: LD_EXP 11
5759: PPUSH
5760: CALL_OW 302
5764: PUSH
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: AND
5775: IFFALSE 5944
// begin DialogueOn ;
5777: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5781: LD_EXP 11
5785: PPUSH
5786: LD_STRING D3a-Sim-1
5788: PPUSH
5789: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5793: LD_EXP 17
5797: PPUSH
5798: LD_STRING D3a-Sci1-1
5800: PPUSH
5801: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5805: LD_EXP 11
5809: PPUSH
5810: LD_STRING D3a-Sim-2
5812: PPUSH
5813: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5817: LD_EXP 17
5821: PPUSH
5822: LD_STRING D3a-Sci1-2
5824: PPUSH
5825: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5829: LD_EXP 11
5833: PPUSH
5834: LD_STRING D3a-Sim-3
5836: PPUSH
5837: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5841: LD_EXP 17
5845: PPUSH
5846: LD_STRING D3a-Sci1-3
5848: PPUSH
5849: CALL_OW 88
// if IsOK ( Joan ) then
5853: LD_EXP 13
5857: PPUSH
5858: CALL_OW 302
5862: IFFALSE 5878
// Say ( Simms , D3a-Sim-4 ) else
5864: LD_EXP 11
5868: PPUSH
5869: LD_STRING D3a-Sim-4
5871: PPUSH
5872: CALL_OW 88
5876: GO 5890
// Say ( Simms , D3a-Sim-4a ) ;
5878: LD_EXP 11
5882: PPUSH
5883: LD_STRING D3a-Sim-4a
5885: PPUSH
5886: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5890: LD_EXP 17
5894: PPUSH
5895: LD_STRING D3a-Sci1-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5902: LD_EXP 11
5906: PPUSH
5907: LD_STRING D3a-Sim-5
5909: PPUSH
5910: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5914: LD_EXP 17
5918: PPUSH
5919: LD_STRING D3a-Sci1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5926: LD_EXP 11
5930: PPUSH
5931: LD_STRING D3a-Sim-6
5933: PPUSH
5934: CALL_OW 88
// DialogueOff ;
5938: CALL_OW 7
// end else
5942: GO 6188
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5944: LD_ADDR_VAR 0 3
5948: PUSH
5949: LD_INT 22
5951: PUSH
5952: LD_INT 1
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 4
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 69
5977: PUSH
5978: LD_EXP 11
5982: PUSH
5983: LD_EXP 14
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: DIFF
5992: ST_TO_ADDR
// if tmp3 > 0 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 0
6000: GREATER
6001: IFFALSE 6188
// begin DialogueOn ;
6003: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6007: LD_EXP 11
6011: PPUSH
6012: LD_STRING D3a-Sim-1
6014: PPUSH
6015: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PPUSH
6028: LD_STRING D3a-Sci1-1
6030: PPUSH
6031: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6035: LD_EXP 11
6039: PPUSH
6040: LD_STRING D3a-Sim-2
6042: PPUSH
6043: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: LD_STRING D3a-Sci1-2
6058: PPUSH
6059: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6063: LD_EXP 11
6067: PPUSH
6068: LD_STRING D3a-Sim-3
6070: PPUSH
6071: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_STRING D3a-Sci1-3
6086: PPUSH
6087: CALL_OW 88
// if IsOK ( Joan ) then
6091: LD_EXP 13
6095: PPUSH
6096: CALL_OW 302
6100: IFFALSE 6116
// Say ( Simms , D3a-Sim-4 ) else
6102: LD_EXP 11
6106: PPUSH
6107: LD_STRING D3a-Sim-4
6109: PPUSH
6110: CALL_OW 88
6114: GO 6128
// Say ( Simms , D3a-Sim-4a ) ;
6116: LD_EXP 11
6120: PPUSH
6121: LD_STRING D3a-Sim-4a
6123: PPUSH
6124: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: LD_STRING D3a-Sci1-4
6139: PPUSH
6140: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6144: LD_EXP 11
6148: PPUSH
6149: LD_STRING D3a-Sim-5
6151: PPUSH
6152: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: LD_STRING D3a-Sci1-5
6167: PPUSH
6168: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6172: LD_EXP 11
6176: PPUSH
6177: LD_STRING D3a-Sim-6
6179: PPUSH
6180: CALL_OW 88
// DialogueOff ;
6184: CALL_OW 7
// end ; end ; end ;
6188: PPOPN 3
6190: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6191: LD_EXP 29
6195: PUSH
6196: LD_INT 1
6198: EQUAL
6199: IFFALSE 6519
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6207: LD_EXP 18
6211: PPUSH
6212: LD_STRING D4-FSol1-1
6214: PPUSH
6215: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6219: LD_STRING M3
6221: PPUSH
6222: CALL_OW 337
// PrepareRussians ;
6226: CALL 2663 0 0
// rnd = Rand ( 1 , 100 ) ;
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_INT 1
6237: PPUSH
6238: LD_INT 100
6240: PPUSH
6241: CALL_OW 12
6245: ST_TO_ADDR
// if difficulty = 1 then
6246: LD_OWVAR 67
6250: PUSH
6251: LD_INT 1
6253: EQUAL
6254: IFFALSE 6337
// begin if rnd > 0 and rnd < 51 then
6256: LD_VAR 0 1
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: LD_INT 51
6272: LESS
6273: AND
6274: IFFALSE 6283
// BuildRussianBase ( 2 ) ;
6276: LD_INT 2
6278: PPUSH
6279: CALL 10276 0 1
// if rnd > 50 and rnd < 81 then
6283: LD_VAR 0 1
6287: PUSH
6288: LD_INT 50
6290: GREATER
6291: PUSH
6292: LD_VAR 0 1
6296: PUSH
6297: LD_INT 81
6299: LESS
6300: AND
6301: IFFALSE 6310
// BuildRussianBase ( 1 ) ;
6303: LD_INT 1
6305: PPUSH
6306: CALL 10276 0 1
// if rnd > 80 and rnd < 101 then
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 80
6317: GREATER
6318: PUSH
6319: LD_VAR 0 1
6323: PUSH
6324: LD_INT 101
6326: LESS
6327: AND
6328: IFFALSE 6337
// BuildRussianBase ( 3 ) ;
6330: LD_INT 3
6332: PPUSH
6333: CALL 10276 0 1
// end ; if difficulty = 2 then
6337: LD_OWVAR 67
6341: PUSH
6342: LD_INT 2
6344: EQUAL
6345: IFFALSE 6428
// begin if rnd > 0 and rnd < 61 then
6347: LD_VAR 0 1
6351: PUSH
6352: LD_INT 0
6354: GREATER
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: LD_INT 61
6363: LESS
6364: AND
6365: IFFALSE 6374
// BuildRussianBase ( 2 ) ;
6367: LD_INT 2
6369: PPUSH
6370: CALL 10276 0 1
// if rnd > 60 and rnd < 81 then
6374: LD_VAR 0 1
6378: PUSH
6379: LD_INT 60
6381: GREATER
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: LD_INT 81
6390: LESS
6391: AND
6392: IFFALSE 6401
// BuildRussianBase ( 1 ) ;
6394: LD_INT 1
6396: PPUSH
6397: CALL 10276 0 1
// if rnd > 80 and rnd < 101 then
6401: LD_VAR 0 1
6405: PUSH
6406: LD_INT 80
6408: GREATER
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 101
6417: LESS
6418: AND
6419: IFFALSE 6428
// BuildRussianBase ( 3 ) ;
6421: LD_INT 3
6423: PPUSH
6424: CALL 10276 0 1
// end ; if difficulty = 3 then
6428: LD_OWVAR 67
6432: PUSH
6433: LD_INT 3
6435: EQUAL
6436: IFFALSE 6519
// begin if rnd > 0 and rnd < 71 then
6438: LD_VAR 0 1
6442: PUSH
6443: LD_INT 0
6445: GREATER
6446: PUSH
6447: LD_VAR 0 1
6451: PUSH
6452: LD_INT 71
6454: LESS
6455: AND
6456: IFFALSE 6465
// BuildRussianBase ( 3 ) ;
6458: LD_INT 3
6460: PPUSH
6461: CALL 10276 0 1
// if rnd > 70 and rnd < 81 then
6465: LD_VAR 0 1
6469: PUSH
6470: LD_INT 70
6472: GREATER
6473: PUSH
6474: LD_VAR 0 1
6478: PUSH
6479: LD_INT 81
6481: LESS
6482: AND
6483: IFFALSE 6492
// BuildRussianBase ( 2 ) ;
6485: LD_INT 2
6487: PPUSH
6488: CALL 10276 0 1
// if rnd > 80 and rnd < 101 then
6492: LD_VAR 0 1
6496: PUSH
6497: LD_INT 80
6499: GREATER
6500: PUSH
6501: LD_VAR 0 1
6505: PUSH
6506: LD_INT 101
6508: LESS
6509: AND
6510: IFFALSE 6519
// BuildRussianBase ( 1 ) ;
6512: LD_INT 1
6514: PPUSH
6515: CALL 10276 0 1
// end ; end ;
6519: PPOPN 1
6521: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6522: LD_INT 54
6524: PPUSH
6525: LD_INT 1
6527: PPUSH
6528: CALL_OW 321
6532: PUSH
6533: LD_INT 2
6535: EQUAL
6536: PUSH
6537: LD_INT 21
6539: PPUSH
6540: LD_INT 1
6542: PPUSH
6543: CALL_OW 321
6547: PUSH
6548: LD_INT 2
6550: EQUAL
6551: OR
6552: PUSH
6553: LD_INT 22
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL_OW 321
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: OR
6568: IFFALSE 6869
6570: GO 6572
6572: DISABLE
6573: LD_INT 0
6575: PPUSH
6576: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6577: LD_EXP 17
6581: PPUSH
6582: CALL_OW 302
6586: IFFALSE 6600
// tmp := DeltaDoctor else
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: LD_EXP 17
6597: ST_TO_ADDR
6598: GO 6610
// tmp := Denis ;
6600: LD_ADDR_VAR 0 2
6604: PUSH
6605: LD_EXP 12
6609: ST_TO_ADDR
// if tmp then
6610: LD_VAR 0 2
6614: IFFALSE 6708
// begin DialogueOn ;
6616: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_STRING D6-JMM-1
6627: PPUSH
6628: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_STRING D6-Sci1-1
6639: PPUSH
6640: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6644: LD_EXP 1
6648: PPUSH
6649: LD_STRING D6-JMM-2
6651: PPUSH
6652: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6656: LD_VAR 0 2
6660: PPUSH
6661: LD_STRING D6-Sci1-2
6663: PPUSH
6664: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6668: LD_EXP 1
6672: PPUSH
6673: LD_STRING D6-JMM-3
6675: PPUSH
6676: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6680: LD_VAR 0 2
6684: PPUSH
6685: LD_STRING D6-Sci1-3
6687: PPUSH
6688: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6692: LD_EXP 1
6696: PPUSH
6697: LD_STRING D6-JMM-4
6699: PPUSH
6700: CALL_OW 88
// DialogueOff ;
6704: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6708: LD_INT 1050
6710: PPUSH
6711: CALL_OW 67
// if arabianTrait = 0 then
6715: LD_EXP 49
6719: PUSH
6720: LD_INT 0
6722: EQUAL
6723: IFFALSE 6781
// begin DialogueOn ;
6725: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6729: LD_EXP 27
6733: PPUSH
6734: LD_STRING D5-Ar1-1
6736: PPUSH
6737: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6741: LD_EXP 26
6745: PPUSH
6746: LD_STRING D5-Diet-1
6748: PPUSH
6749: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6753: LD_EXP 27
6757: PPUSH
6758: LD_STRING D5-Ar1-2
6760: PPUSH
6761: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6765: LD_EXP 26
6769: PPUSH
6770: LD_STRING D5-Diet-2
6772: PPUSH
6773: CALL_OW 88
// DialogueOff ;
6777: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6781: LD_INT 2100
6783: PUSH
6784: LD_INT 3150
6786: PUSH
6787: LD_INT 4200
6789: PUSH
6790: LD_INT 5250
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 1
6801: PPUSH
6802: LD_INT 4
6804: PPUSH
6805: CALL_OW 12
6809: ARRAY
6810: PPUSH
6811: CALL_OW 67
// if arabianTrait = 0 then
6815: LD_EXP 49
6819: PUSH
6820: LD_INT 0
6822: EQUAL
6823: IFFALSE 6869
// begin arabianTrait = 1 ;
6825: LD_ADDR_EXP 49
6829: PUSH
6830: LD_INT 1
6832: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6833: LD_INT 2
6835: PPUSH
6836: LD_INT 3
6838: PPUSH
6839: LD_INT 1
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6849: LD_INT 2
6851: PPUSH
6852: LD_INT 6
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 1
6860: PPUSH
6861: CALL_OW 80
// PrepareArabianTrait ;
6865: CALL 6872 0 0
// end ; end ;
6869: PPOPN 2
6871: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6878: LD_ADDR_VAR 0 2
6882: PUSH
6883: LD_INT 22
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 25
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: CALL_OW 69
6911: PUSH
6912: FOR_IN
6913: IFFALSE 6926
// ComExitBuilding ( i ) ;
6915: LD_VAR 0 2
6919: PPUSH
6920: CALL_OW 122
6924: GO 6912
6926: POP
6927: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 22
6935: PUSH
6936: LD_INT 2
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 25
6945: PUSH
6946: LD_INT 3
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PPUSH
6957: CALL_OW 69
6961: PUSH
6962: FOR_IN
6963: IFFALSE 6976
// ComExitVehicle ( i ) ;
6965: LD_VAR 0 2
6969: PPUSH
6970: CALL_OW 121
6974: GO 6962
6976: POP
6977: POP
// SetClass ( Dietrich , 8 ) ;
6978: LD_EXP 26
6982: PPUSH
6983: LD_INT 8
6985: PPUSH
6986: CALL_OW 336
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6997: LD_INT 76
6999: PPUSH
7000: LD_INT 19
7002: PPUSH
7003: CALL_OW 84
// DialogueOn ;
7007: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7011: LD_INT 22
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 26
7023: PUSH
7024: LD_INT 1
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: LD_INT 25
7036: PUSH
7037: LD_INT 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 25
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 25
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 25
7066: PUSH
7067: LD_INT 4
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 25
7076: PUSH
7077: LD_INT 5
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: PPUSH
7102: LD_STRING D8-Sol1-1
7104: PPUSH
7105: LD_STRING D8-Sol1-1
7107: PPUSH
7108: CALL 9607 0 3
// if IsOK ( DeltaDoctor ) then
7112: LD_EXP 17
7116: PPUSH
7117: CALL_OW 302
7121: IFFALSE 7137
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7123: LD_EXP 17
7127: PPUSH
7128: LD_STRING D8-Sci1-1
7130: PPUSH
7131: CALL_OW 88
7135: GO 7238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7137: LD_INT 22
7139: PUSH
7140: LD_INT 1
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: LD_INT 26
7149: PUSH
7150: LD_INT 1
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 25
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 25
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 25
7202: PUSH
7203: LD_INT 5
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: PPUSH
7228: LD_STRING D8-Sol1-1
7230: PPUSH
7231: LD_STRING D8-Sol1-1
7233: PPUSH
7234: CALL 9607 0 3
// Say ( JMM , D8-JMM-1 ) ;
7238: LD_EXP 1
7242: PPUSH
7243: LD_STRING D8-JMM-1
7245: PPUSH
7246: CALL_OW 88
// DialogueOff ;
7250: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7254: LD_INT 2
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7264: LD_INT 1
7266: PPUSH
7267: LD_INT 2
7269: PPUSH
7270: LD_INT 2
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 2
7285: PPUSH
7286: LD_INT 1
7288: PPUSH
7289: LD_INT 1
7291: PPUSH
7292: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7296: LD_STRING M4
7298: PPUSH
7299: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 21
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 2
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 8
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 25
7353: PUSH
7354: LD_INT 15
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: PPUSH
7372: CALL_OW 69
7376: PUSH
7377: FOR_IN
7378: IFFALSE 7518
// begin ComExitBuilding ( i ) ;
7380: LD_VAR 0 2
7384: PPUSH
7385: CALL_OW 122
// wait ( 0 0$1 ) ;
7389: LD_INT 35
7391: PPUSH
7392: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7396: LD_VAR 0 2
7400: PPUSH
7401: LD_INT 77
7403: PPUSH
7404: LD_INT 10
7406: PPUSH
7407: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7411: LD_VAR 0 2
7415: PPUSH
7416: LD_INT 82
7418: PPUSH
7419: LD_INT 5
7421: PPUSH
7422: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7426: LD_VAR 0 2
7430: PPUSH
7431: LD_INT 95
7433: PPUSH
7434: LD_INT 12
7436: PPUSH
7437: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7441: LD_VAR 0 2
7445: PPUSH
7446: LD_INT 102
7448: PPUSH
7449: LD_INT 11
7451: PPUSH
7452: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7456: LD_VAR 0 2
7460: PPUSH
7461: LD_INT 116
7463: PPUSH
7464: LD_INT 15
7466: PPUSH
7467: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7471: LD_VAR 0 2
7475: PPUSH
7476: LD_INT 140
7478: PPUSH
7479: LD_INT 25
7481: PPUSH
7482: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 160
7493: PPUSH
7494: LD_INT 56
7496: PPUSH
7497: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7501: LD_VAR 0 2
7505: PPUSH
7506: LD_INT 189
7508: PPUSH
7509: LD_INT 79
7511: PPUSH
7512: CALL_OW 174
// end ;
7516: GO 7377
7518: POP
7519: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7520: LD_ADDR_VAR 0 2
7524: PUSH
7525: LD_INT 22
7527: PUSH
7528: LD_INT 2
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 21
7537: PUSH
7538: LD_INT 1
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 2
7547: PUSH
7548: LD_INT 25
7550: PUSH
7551: LD_INT 2
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 25
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 25
7580: PUSH
7581: LD_INT 16
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PUSH
7605: FOR_IN
7606: IFFALSE 7746
// begin ComExitBuilding ( i ) ;
7608: LD_VAR 0 2
7612: PPUSH
7613: CALL_OW 122
// wait ( 0 0$1 ) ;
7617: LD_INT 35
7619: PPUSH
7620: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7624: LD_VAR 0 2
7628: PPUSH
7629: LD_INT 77
7631: PPUSH
7632: LD_INT 10
7634: PPUSH
7635: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7639: LD_VAR 0 2
7643: PPUSH
7644: LD_INT 82
7646: PPUSH
7647: LD_INT 5
7649: PPUSH
7650: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7654: LD_VAR 0 2
7658: PPUSH
7659: LD_INT 95
7661: PPUSH
7662: LD_INT 12
7664: PPUSH
7665: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7669: LD_VAR 0 2
7673: PPUSH
7674: LD_INT 102
7676: PPUSH
7677: LD_INT 11
7679: PPUSH
7680: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7684: LD_VAR 0 2
7688: PPUSH
7689: LD_INT 116
7691: PPUSH
7692: LD_INT 15
7694: PPUSH
7695: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7699: LD_VAR 0 2
7703: PPUSH
7704: LD_INT 140
7706: PPUSH
7707: LD_INT 25
7709: PPUSH
7710: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_INT 160
7721: PPUSH
7722: LD_INT 56
7724: PPUSH
7725: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7729: LD_VAR 0 2
7733: PPUSH
7734: LD_INT 189
7736: PPUSH
7737: LD_INT 79
7739: PPUSH
7740: CALL_OW 171
// end ;
7744: GO 7605
7746: POP
7747: POP
// arabianAttackersAI = 1 ;
7748: LD_ADDR_EXP 46
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7756: LD_INT 350
7758: PPUSH
7759: CALL_OW 67
// if IsOk ( Gary ) then
7763: LD_EXP 10
7767: PPUSH
7768: CALL_OW 302
7772: IFFALSE 7786
// Say ( Gary , D8a-Gary-1 ) ;
7774: LD_EXP 10
7778: PPUSH
7779: LD_STRING D8a-Gary-1
7781: PPUSH
7782: CALL_OW 88
// wait ( 0 0$5 ) ;
7786: LD_INT 175
7788: PPUSH
7789: CALL_OW 67
// if IsOK ( Khatam ) then
7793: LD_EXP 14
7797: PPUSH
7798: CALL_OW 302
7802: IFFALSE 8338
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7804: LD_ADDR_VAR 0 3
7808: PUSH
7809: LD_INT 22
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 2
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 1
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 25
7834: PUSH
7835: LD_INT 2
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 25
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 4
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 25
7864: PUSH
7865: LD_INT 5
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 25
7874: PUSH
7875: LD_INT 8
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PPUSH
7895: CALL_OW 69
7899: PUSH
7900: LD_EXP 1
7904: PUSH
7905: LD_EXP 2
7909: PUSH
7910: LD_EXP 3
7914: PUSH
7915: LD_EXP 4
7919: PUSH
7920: LD_EXP 5
7924: PUSH
7925: LD_EXP 6
7929: PUSH
7930: LD_EXP 7
7934: PUSH
7935: LD_EXP 8
7939: PUSH
7940: LD_EXP 9
7944: PUSH
7945: LD_EXP 10
7949: PUSH
7950: LD_EXP 11
7954: PUSH
7955: LD_EXP 12
7959: PUSH
7960: LD_EXP 13
7964: PUSH
7965: LD_EXP 14
7969: PUSH
7970: LD_EXP 15
7974: PUSH
7975: LD_EXP 16
7979: PUSH
7980: LD_EXP 17
7984: PUSH
7985: LD_EXP 19
7989: PUSH
7990: LD_EXP 24
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: DIFF
8016: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8017: LD_EXP 14
8021: PPUSH
8022: LD_INT 8
8024: PPUSH
8025: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8029: LD_EXP 14
8033: PPUSH
8034: CALL_OW 122
// wait ( 0 0$1 ) ;
8038: LD_INT 35
8040: PPUSH
8041: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8045: LD_EXP 14
8049: PPUSH
8050: CALL_OW 121
// wait ( 0 0$1 ) ;
8054: LD_INT 35
8056: PPUSH
8057: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8061: LD_EXP 14
8065: PPUSH
8066: LD_INT 7
8068: PPUSH
8069: CALL_OW 113
// if not tmp then
8073: LD_VAR 0 3
8077: NOT
8078: IFFALSE 8082
// exit ;
8080: GO 8338
// DialogueOn ;
8082: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 1
8093: ARRAY
8094: PPUSH
8095: CALL_OW 258
8099: PUSH
8100: LD_INT 1
8102: EQUAL
8103: IFFALSE 8123
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: ARRAY
8113: PPUSH
8114: LD_STRING D8b-Sol1-1
8116: PPUSH
8117: CALL_OW 88
8121: GO 8139
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: LD_STRING D8b-FSol1-1
8134: PPUSH
8135: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8139: LD_EXP 14
8143: PPUSH
8144: LD_STRING D8b-Khat-1
8146: PPUSH
8147: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 1
8158: ARRAY
8159: PPUSH
8160: CALL_OW 258
8164: PUSH
8165: LD_INT 1
8167: EQUAL
8168: IFFALSE 8188
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 1
8177: ARRAY
8178: PPUSH
8179: LD_STRING D8b-Sol1-2
8181: PPUSH
8182: CALL_OW 88
8186: GO 8204
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_STRING D8b-FSol1-2
8199: PPUSH
8200: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8204: LD_EXP 14
8208: PPUSH
8209: LD_STRING D8b-Khat-2
8211: PPUSH
8212: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: CALL_OW 258
8229: PUSH
8230: LD_INT 1
8232: EQUAL
8233: IFFALSE 8253
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 1
8242: ARRAY
8243: PPUSH
8244: LD_STRING D8b-Sol1-3
8246: PPUSH
8247: CALL_OW 88
8251: GO 8269
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: LD_STRING D8b-FSol1-3
8264: PPUSH
8265: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8269: LD_EXP 14
8273: PPUSH
8274: LD_STRING D8b-Khat-3
8276: PPUSH
8277: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8281: LD_VAR 0 3
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: CALL_OW 258
8294: PUSH
8295: LD_INT 1
8297: EQUAL
8298: IFFALSE 8318
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_STRING D8b-Sol1-4
8311: PPUSH
8312: CALL_OW 88
8316: GO 8334
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 1
8325: ARRAY
8326: PPUSH
8327: LD_STRING D8b-FSol1-4
8329: PPUSH
8330: CALL_OW 88
// DialogueOff ;
8334: CALL_OW 7
// end ; end ;
8338: LD_VAR 0 1
8342: RET
// every 0 0$1 do var i ;
8343: GO 8345
8345: DISABLE
8346: LD_INT 0
8348: PPUSH
// begin enable ;
8349: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: LD_INT 7
8357: PPUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: PUSH
8373: FOR_IN
8374: IFFALSE 8440
// begin if GetClass ( i ) = 4 then
8376: LD_VAR 0 1
8380: PPUSH
8381: CALL_OW 257
8385: PUSH
8386: LD_INT 4
8388: EQUAL
8389: IFFALSE 8401
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8391: LD_INT 1
8393: PPUSH
8394: LD_STRING 10_ScientistsEscape_1
8396: PPUSH
8397: CALL_OW 39
// if i = Dietrich then
8401: LD_VAR 0 1
8405: PUSH
8406: LD_EXP 26
8410: EQUAL
8411: IFFALSE 8421
// GensherStatus = 1 ;
8413: LD_ADDR_EXP 51
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// arabianEscape = 1 ;
8421: LD_ADDR_EXP 47
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// RemoveUnit ( i ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: CALL_OW 64
// end ;
8438: GO 8373
8440: POP
8441: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8442: LD_EXP 14
8446: PPUSH
8447: LD_INT 7
8449: PPUSH
8450: CALL_OW 308
8454: IFFALSE 8473
// begin KhatamStatus = 1 ;
8456: LD_ADDR_EXP 52
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8464: LD_EXP 14
8468: PPUSH
8469: CALL_OW 64
// end ; end ;
8473: PPOPN 1
8475: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8476: LD_EXP 14
8480: PPUSH
8481: CALL_OW 301
8485: IFFALSE 8498
8487: GO 8489
8489: DISABLE
// KhatamStatus = 0 ;
8490: LD_ADDR_EXP 52
8494: PUSH
8495: LD_INT 0
8497: ST_TO_ADDR
8498: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8499: LD_INT 22
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 21
8511: PUSH
8512: LD_INT 1
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 69
8527: PUSH
8528: LD_INT 0
8530: EQUAL
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 69
8560: PUSH
8561: LD_INT 0
8563: EQUAL
8564: AND
8565: IFFALSE 8578
8567: GO 8569
8569: DISABLE
// arabianDefeated = 1 ;
8570: LD_ADDR_EXP 48
8574: PUSH
8575: LD_INT 1
8577: ST_TO_ADDR
8578: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8579: LD_INT 54
8581: PPUSH
8582: LD_INT 1
8584: PPUSH
8585: CALL_OW 321
8589: PUSH
8590: LD_INT 2
8592: EQUAL
8593: PUSH
8594: LD_INT 55
8596: PPUSH
8597: LD_INT 1
8599: PPUSH
8600: CALL_OW 321
8604: PUSH
8605: LD_INT 2
8607: EQUAL
8608: AND
8609: PUSH
8610: LD_INT 21
8612: PPUSH
8613: LD_INT 1
8615: PPUSH
8616: CALL_OW 321
8620: PUSH
8621: LD_INT 2
8623: EQUAL
8624: AND
8625: PUSH
8626: LD_INT 22
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: CALL_OW 321
8636: PUSH
8637: LD_INT 2
8639: EQUAL
8640: AND
8641: PUSH
8642: LD_INT 12
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 321
8652: PUSH
8653: LD_INT 2
8655: EQUAL
8656: AND
8657: PUSH
8658: LD_INT 32
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 321
8668: PUSH
8669: LD_INT 2
8671: EQUAL
8672: AND
8673: PUSH
8674: LD_EXP 59
8678: PUSH
8679: LD_INT 0
8681: EQUAL
8682: AND
8683: PUSH
8684: LD_EXP 49
8688: PUSH
8689: LD_INT 0
8691: EQUAL
8692: AND
8693: PUSH
8694: LD_OWVAR 1
8698: PUSH
8699: LD_INT 31500
8701: GREATEREQUAL
8702: AND
8703: IFFALSE 8720
8705: GO 8707
8707: DISABLE
// begin arabianTrait = 1 ;
8708: LD_ADDR_EXP 49
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// PrepareArabianTrait ;
8716: CALL 6872 0 0
// end ;
8720: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8721: LD_EXP 29
8725: PUSH
8726: LD_STRING 02_mikhailStatus_1
8728: PPUSH
8729: LD_INT 0
8731: PPUSH
8732: CALL_OW 30
8736: PUSH
8737: LD_INT 1
8739: EQUAL
8740: AND
8741: PUSH
8742: LD_INT 22
8744: PUSH
8745: LD_INT 5
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: PUSH
8757: LD_INT 0
8759: EQUAL
8760: AND
8761: PUSH
8762: LD_INT 22
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 69
8776: PUSH
8777: LD_INT 0
8779: EQUAL
8780: PUSH
8781: LD_EXP 49
8785: PUSH
8786: LD_INT 0
8788: EQUAL
8789: OR
8790: AND
8791: IFFALSE 8800
8793: GO 8795
8795: DISABLE
// PrepareCornell ;
8796: CALL 2505 0 0
8800: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8801: LD_INT 22
8803: PUSH
8804: LD_INT 1
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 69
8815: PPUSH
8816: LD_EXP 19
8820: PPUSH
8821: CALL_OW 74
8825: PPUSH
8826: LD_EXP 19
8830: PPUSH
8831: CALL_OW 296
8835: PUSH
8836: LD_INT 9
8838: LESS
8839: IFFALSE 9060
8841: GO 8843
8843: DISABLE
// begin InGameOn ;
8844: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8848: LD_EXP 19
8852: PPUSH
8853: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8857: LD_EXP 19
8861: PPUSH
8862: LD_STRING D7-Corn-1
8864: PPUSH
8865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8869: LD_INT 22
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: LD_INT 25
8884: PUSH
8885: LD_INT 1
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 25
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 4
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 25
8924: PUSH
8925: LD_INT 5
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PPUSH
8944: CALL_OW 69
8948: PPUSH
8949: LD_STRING D7-Sol1-1
8951: PPUSH
8952: LD_STRING D7-FSol1-1
8954: PPUSH
8955: CALL 9607 0 3
// CenterNowOnUnits ( Cornell ) ;
8959: LD_EXP 19
8963: PPUSH
8964: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8968: LD_EXP 19
8972: PPUSH
8973: LD_STRING D7-Corn-2
8975: PPUSH
8976: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8980: LD_EXP 1
8984: PPUSH
8985: LD_STRING D7-JMM-2
8987: PPUSH
8988: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8992: LD_EXP 19
8996: PPUSH
8997: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9001: LD_EXP 19
9005: PPUSH
9006: LD_STRING D7-Corn-3
9008: PPUSH
9009: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9013: LD_EXP 19
9017: PPUSH
9018: LD_INT 250
9020: PPUSH
9021: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9025: LD_EXP 19
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: CALL_OW 235
// wait ( 0 0$1 ) ;
9037: LD_INT 35
9039: PPUSH
9040: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9044: LD_EXP 1
9048: PPUSH
9049: LD_STRING D7-JMM-3
9051: PPUSH
9052: CALL_OW 88
// InGameOff ;
9056: CALL_OW 9
// end ;
9060: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9061: LD_EXP 19
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: PUSH
9075: LD_EXP 19
9079: PPUSH
9080: CALL_OW 256
9084: PUSH
9085: LD_INT 251
9087: GREATER
9088: AND
9089: IFFALSE 9282
9091: GO 9093
9093: DISABLE
// begin DialogueOn ;
9094: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9098: LD_EXP 1
9102: PPUSH
9103: LD_STRING D7a-JMM-1
9105: PPUSH
9106: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9110: LD_EXP 19
9114: PPUSH
9115: LD_STRING D7a-Corn-1
9117: PPUSH
9118: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9122: LD_EXP 1
9126: PPUSH
9127: LD_STRING D7a-JMM-2
9129: PPUSH
9130: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9134: LD_EXP 19
9138: PPUSH
9139: LD_STRING D7a-Corn-2
9141: PPUSH
9142: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9146: LD_EXP 1
9150: PPUSH
9151: LD_STRING D7a-JMM-3
9153: PPUSH
9154: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9158: LD_EXP 19
9162: PPUSH
9163: LD_STRING D7a-Corn-3
9165: PPUSH
9166: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9170: LD_EXP 1
9174: PPUSH
9175: LD_STRING D7a-JMM-4
9177: PPUSH
9178: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9182: LD_EXP 19
9186: PPUSH
9187: LD_STRING D7a-Corn-4
9189: PPUSH
9190: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9194: LD_EXP 1
9198: PPUSH
9199: LD_STRING D7a-JMM-5
9201: PPUSH
9202: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9206: LD_EXP 19
9210: PPUSH
9211: LD_STRING D7a-Corn-5
9213: PPUSH
9214: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9218: LD_EXP 1
9222: PPUSH
9223: LD_STRING D7a-JMM-6
9225: PPUSH
9226: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9230: LD_EXP 19
9234: PPUSH
9235: LD_STRING D7a-Corn-6
9237: PPUSH
9238: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9242: LD_EXP 1
9246: PPUSH
9247: LD_STRING D7a-JMM-7
9249: PPUSH
9250: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9254: LD_EXP 19
9258: PPUSH
9259: LD_STRING D7a-Corn-7
9261: PPUSH
9262: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9266: LD_EXP 1
9270: PPUSH
9271: LD_STRING D7a-JMM-8
9273: PPUSH
9274: CALL_OW 88
// DialogueOff ;
9278: CALL_OW 7
// end ;
9282: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9283: LD_EXP 58
9287: PUSH
9288: LD_EXP 1
9292: PPUSH
9293: CALL_OW 302
9297: PUSH
9298: LD_EXP 5
9302: PPUSH
9303: CALL_OW 302
9307: OR
9308: AND
9309: IFFALSE 9399
9311: GO 9313
9313: DISABLE
// begin Wait ( 0 0$2 ) ;
9314: LD_INT 70
9316: PPUSH
9317: CALL_OW 67
// DialogueOn ;
9321: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9325: LD_EXP 58
9329: PUSH
9330: LD_INT 1
9332: ARRAY
9333: PPUSH
9334: LD_EXP 58
9338: PUSH
9339: LD_INT 2
9341: ARRAY
9342: PPUSH
9343: CALL_OW 86
// if IsOk ( Cyrus ) then
9347: LD_EXP 5
9351: PPUSH
9352: CALL_OW 302
9356: IFFALSE 9372
// Say ( Cyrus , D10-Cyrus-1 ) else
9358: LD_EXP 5
9362: PPUSH
9363: LD_STRING D10-Cyrus-1
9365: PPUSH
9366: CALL_OW 88
9370: GO 9395
// if IsOk ( JMM ) then
9372: LD_EXP 1
9376: PPUSH
9377: CALL_OW 302
9381: IFFALSE 9395
// Say ( JMM , D10-JMM-1 ) ;
9383: LD_EXP 1
9387: PPUSH
9388: LD_STRING D10-JMM-1
9390: PPUSH
9391: CALL_OW 88
// DialogueOff ;
9395: CALL_OW 7
// end ;
9399: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9400: LD_INT 12
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL_OW 321
9410: PUSH
9411: LD_INT 2
9413: EQUAL
9414: IFFALSE 9426
9416: GO 9418
9418: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9419: LD_STRING M2b
9421: PPUSH
9422: CALL_OW 337
9426: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9427: LD_INT 32
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: CALL_OW 321
9437: PUSH
9438: LD_INT 2
9440: EQUAL
9441: IFFALSE 9453
9443: GO 9445
9445: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9446: LD_STRING M2c
9448: PPUSH
9449: CALL_OW 337
9453: END
// every 0 0$1 trigger arabianDefeated = 1 do
9454: LD_EXP 48
9458: PUSH
9459: LD_INT 1
9461: EQUAL
9462: IFFALSE 9474
9464: GO 9466
9466: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9467: LD_STRING M4a
9469: PPUSH
9470: CALL_OW 337
9474: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9475: LD_INT 54
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 321
9485: PUSH
9486: LD_INT 2
9488: EQUAL
9489: PUSH
9490: LD_INT 55
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 321
9500: PUSH
9501: LD_INT 2
9503: EQUAL
9504: AND
9505: PUSH
9506: LD_INT 21
9508: PPUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 321
9516: PUSH
9517: LD_INT 2
9519: EQUAL
9520: AND
9521: PUSH
9522: LD_INT 22
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: CALL_OW 321
9532: PUSH
9533: LD_INT 2
9535: EQUAL
9536: AND
9537: IFFALSE 9549
9539: GO 9541
9541: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9542: LD_STRING M2a
9544: PPUSH
9545: CALL_OW 337
9549: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// if exist_mode then
9554: LD_VAR 0 2
9558: IFFALSE 9577
// unit := CreateCharacter ( ident ) else
9560: LD_ADDR_VAR 0 4
9564: PUSH
9565: LD_VAR 0 1
9569: PPUSH
9570: CALL_OW 34
9574: ST_TO_ADDR
9575: GO 9592
// unit := NewCharacter ( ident ) ;
9577: LD_ADDR_VAR 0 4
9581: PUSH
9582: LD_VAR 0 1
9586: PPUSH
9587: CALL_OW 25
9591: ST_TO_ADDR
// result := unit ;
9592: LD_ADDR_VAR 0 3
9596: PUSH
9597: LD_VAR 0 4
9601: ST_TO_ADDR
// end ;
9602: LD_VAR 0 3
9606: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
9611: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9612: LD_ADDR_VAR 0 1
9616: PUSH
9617: LD_VAR 0 1
9621: PUSH
9622: LD_EXP 1
9626: PUSH
9627: LD_EXP 2
9631: PUSH
9632: LD_EXP 3
9636: PUSH
9637: LD_EXP 4
9641: PUSH
9642: LD_EXP 5
9646: PUSH
9647: LD_EXP 6
9651: PUSH
9652: LD_EXP 7
9656: PUSH
9657: LD_EXP 8
9661: PUSH
9662: LD_EXP 9
9666: PUSH
9667: LD_EXP 10
9671: PUSH
9672: LD_EXP 11
9676: PUSH
9677: LD_EXP 12
9681: PUSH
9682: LD_EXP 13
9686: PUSH
9687: LD_EXP 14
9691: PUSH
9692: LD_EXP 15
9696: PUSH
9697: LD_EXP 16
9701: PUSH
9702: LD_EXP 17
9706: PUSH
9707: LD_EXP 18
9711: PUSH
9712: LD_EXP 19
9716: PUSH
9717: LD_EXP 24
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: DIFF
9744: ST_TO_ADDR
// if not characters then
9745: LD_VAR 0 1
9749: NOT
9750: IFFALSE 9754
// exit ;
9752: GO 9900
// rnd = rand ( 1 , characters ) ;
9754: LD_ADDR_VAR 0 6
9758: PUSH
9759: LD_INT 1
9761: PPUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 12
9771: ST_TO_ADDR
// for i = 1 to characters do
9772: LD_ADDR_VAR 0 5
9776: PUSH
9777: DOUBLE
9778: LD_INT 1
9780: DEC
9781: ST_TO_ADDR
9782: LD_VAR 0 1
9786: PUSH
9787: FOR_TO
9788: IFFALSE 9898
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9790: LD_VAR 0 5
9794: PUSH
9795: LD_VAR 0 6
9799: EQUAL
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_VAR 0 5
9810: ARRAY
9811: PPUSH
9812: CALL_OW 258
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: AND
9821: IFFALSE 9843
// Say ( characters [ i ] , dialogMID ) ;
9823: LD_VAR 0 1
9827: PUSH
9828: LD_VAR 0 5
9832: ARRAY
9833: PPUSH
9834: LD_VAR 0 2
9838: PPUSH
9839: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9843: LD_VAR 0 5
9847: PUSH
9848: LD_VAR 0 6
9852: EQUAL
9853: PUSH
9854: LD_VAR 0 1
9858: PUSH
9859: LD_VAR 0 5
9863: ARRAY
9864: PPUSH
9865: CALL_OW 258
9869: PUSH
9870: LD_INT 2
9872: EQUAL
9873: AND
9874: IFFALSE 9896
// Say ( characters [ i ] , dialogFID ) ;
9876: LD_VAR 0 1
9880: PUSH
9881: LD_VAR 0 5
9885: ARRAY
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: CALL_OW 88
// end ;
9896: GO 9787
9898: POP
9899: POP
// end ;
9900: LD_VAR 0 4
9904: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// for i in charactersList do
9909: LD_ADDR_VAR 0 4
9913: PUSH
9914: LD_VAR 0 1
9918: PUSH
9919: FOR_IN
9920: IFFALSE 9949
// begin if IsOk ( i ) then
9922: LD_VAR 0 4
9926: PPUSH
9927: CALL_OW 302
9931: IFFALSE 9947
// SaveCharacters ( i , ident ) ;
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 38
// end ;
9947: GO 9919
9949: POP
9950: POP
// end ;
9951: LD_VAR 0 3
9955: RET
// export function PrepareDifficulty ; begin
9956: LD_INT 0
9958: PPUSH
// if difficulty = 1 then
9959: LD_OWVAR 67
9963: PUSH
9964: LD_INT 1
9966: EQUAL
9967: IFFALSE 10011
// begin RuSolMinLevel = 4 ;
9969: LD_ADDR_EXP 36
9973: PUSH
9974: LD_INT 4
9976: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9977: LD_ADDR_EXP 37
9981: PUSH
9982: LD_INT 7
9984: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9985: LD_INT 51
9987: PPUSH
9988: LD_INT 6
9990: PPUSH
9991: LD_INT 2
9993: PPUSH
9994: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9998: LD_INT 51
10000: PPUSH
10001: LD_INT 5
10003: PPUSH
10004: LD_INT 2
10006: PPUSH
10007: CALL_OW 322
// end ; if difficulty = 2 then
10011: LD_OWVAR 67
10015: PUSH
10016: LD_INT 2
10018: EQUAL
10019: IFFALSE 10115
// begin RuSolMinLevel = 5 ;
10021: LD_ADDR_EXP 36
10025: PUSH
10026: LD_INT 5
10028: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10029: LD_ADDR_EXP 37
10033: PUSH
10034: LD_INT 7
10036: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10037: LD_INT 51
10039: PPUSH
10040: LD_INT 6
10042: PPUSH
10043: LD_INT 2
10045: PPUSH
10046: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10050: LD_INT 57
10052: PPUSH
10053: LD_INT 6
10055: PPUSH
10056: LD_INT 2
10058: PPUSH
10059: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10063: LD_INT 63
10065: PPUSH
10066: LD_INT 6
10068: PPUSH
10069: LD_INT 2
10071: PPUSH
10072: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10076: LD_INT 51
10078: PPUSH
10079: LD_INT 5
10081: PPUSH
10082: LD_INT 2
10084: PPUSH
10085: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10089: LD_INT 5
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_INT 2
10097: PPUSH
10098: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10102: LD_INT 5
10104: PPUSH
10105: LD_INT 5
10107: PPUSH
10108: LD_INT 2
10110: PPUSH
10111: CALL_OW 322
// end ; if difficulty = 3 then
10115: LD_OWVAR 67
10119: PUSH
10120: LD_INT 3
10122: EQUAL
10123: IFFALSE 10271
// begin RuSolMinLevel = 6 ;
10125: LD_ADDR_EXP 36
10129: PUSH
10130: LD_INT 6
10132: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10133: LD_ADDR_EXP 37
10137: PUSH
10138: LD_INT 8
10140: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10141: LD_INT 51
10143: PPUSH
10144: LD_INT 6
10146: PPUSH
10147: LD_INT 2
10149: PPUSH
10150: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10154: LD_INT 57
10156: PPUSH
10157: LD_INT 6
10159: PPUSH
10160: LD_INT 2
10162: PPUSH
10163: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10167: LD_INT 52
10169: PPUSH
10170: LD_INT 6
10172: PPUSH
10173: LD_INT 2
10175: PPUSH
10176: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10180: LD_INT 58
10182: PPUSH
10183: LD_INT 6
10185: PPUSH
10186: LD_INT 2
10188: PPUSH
10189: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10193: LD_INT 63
10195: PPUSH
10196: LD_INT 6
10198: PPUSH
10199: LD_INT 2
10201: PPUSH
10202: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10206: LD_INT 64
10208: PPUSH
10209: LD_INT 6
10211: PPUSH
10212: LD_INT 2
10214: PPUSH
10215: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10219: LD_INT 51
10221: PPUSH
10222: LD_INT 5
10224: PPUSH
10225: LD_INT 2
10227: PPUSH
10228: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10232: LD_INT 52
10234: PPUSH
10235: LD_INT 5
10237: PPUSH
10238: LD_INT 2
10240: PPUSH
10241: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10245: LD_INT 66
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: LD_INT 2
10253: PPUSH
10254: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10258: LD_INT 66
10260: PPUSH
10261: LD_INT 5
10263: PPUSH
10264: LD_INT 2
10266: PPUSH
10267: CALL_OW 322
// end ; end ;
10271: LD_VAR 0 1
10275: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10276: LD_INT 0
10278: PPUSH
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
// case position of 1 :
10283: LD_VAR 0 1
10287: PUSH
10288: LD_INT 1
10290: DOUBLE
10291: EQUAL
10292: IFTRUE 10296
10294: GO 10307
10296: POP
// area := westConv ; 2 :
10297: LD_ADDR_VAR 0 6
10301: PUSH
10302: LD_INT 20
10304: ST_TO_ADDR
10305: GO 10346
10307: LD_INT 2
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10326
10315: POP
// area := midConv ; 3 :
10316: LD_ADDR_VAR 0 6
10320: PUSH
10321: LD_INT 21
10323: ST_TO_ADDR
10324: GO 10346
10326: LD_INT 3
10328: DOUBLE
10329: EQUAL
10330: IFTRUE 10334
10332: GO 10345
10334: POP
// area := eastConv ; end ;
10335: LD_ADDR_VAR 0 6
10339: PUSH
10340: LD_INT 22
10342: ST_TO_ADDR
10343: GO 10346
10345: POP
// area := AreaToList ( area , 0 ) ;
10346: LD_ADDR_VAR 0 6
10350: PUSH
10351: LD_VAR 0 6
10355: PPUSH
10356: LD_INT 0
10358: PPUSH
10359: CALL_OW 517
10363: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10364: LD_ADDR_VAR 0 3
10368: PUSH
10369: DOUBLE
10370: LD_INT 1
10372: DEC
10373: ST_TO_ADDR
10374: LD_VAR 0 6
10378: PUSH
10379: LD_INT 1
10381: ARRAY
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10465
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10386: LD_VAR 0 6
10390: PUSH
10391: LD_INT 1
10393: ARRAY
10394: PUSH
10395: LD_VAR 0 3
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 6
10405: PUSH
10406: LD_INT 2
10408: ARRAY
10409: PUSH
10410: LD_VAR 0 3
10414: ARRAY
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10426: LD_VAR 0 6
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PUSH
10435: LD_VAR 0 3
10439: ARRAY
10440: PPUSH
10441: LD_VAR 0 6
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PUSH
10450: LD_VAR 0 3
10454: ARRAY
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 331
// end ;
10463: GO 10383
10465: POP
10466: POP
// ruPossition = position ;
10467: LD_ADDR_EXP 41
10471: PUSH
10472: LD_VAR 0 1
10476: ST_TO_ADDR
// if position = 1 then
10477: LD_VAR 0 1
10481: PUSH
10482: LD_INT 1
10484: EQUAL
10485: IFFALSE 11233
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_INT 22
10494: PUSH
10495: LD_INT 3
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 25
10504: PUSH
10505: LD_INT 2
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 69
10520: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10521: LD_ADDR_VAR 0 5
10525: PUSH
10526: LD_INT 0
10528: PUSH
10529: LD_INT 49
10531: PUSH
10532: LD_INT 74
10534: PUSH
10535: LD_INT 3
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: LD_INT 73
10549: PUSH
10550: LD_INT 88
10552: PUSH
10553: LD_INT 5
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: LD_INT 56
10567: PUSH
10568: LD_INT 62
10570: PUSH
10571: LD_INT 3
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 29
10582: PUSH
10583: LD_INT 43
10585: PUSH
10586: LD_INT 68
10588: PUSH
10589: LD_INT 2
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 30
10600: PUSH
10601: LD_INT 43
10603: PUSH
10604: LD_INT 79
10606: PUSH
10607: LD_INT 5
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 28
10618: PUSH
10619: LD_INT 60
10621: PUSH
10622: LD_INT 75
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: LD_INT 50
10639: PUSH
10640: LD_INT 87
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: LD_INT 45
10657: PUSH
10658: LD_INT 67
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 17
10672: PUSH
10673: LD_INT 47
10675: PUSH
10676: LD_INT 84
10678: PUSH
10679: LD_INT 2
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 18
10690: PUSH
10691: LD_INT 46
10693: PUSH
10694: LD_INT 87
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 28
10708: PUSH
10709: LD_INT 41
10711: PUSH
10712: LD_INT 64
10714: PUSH
10715: LD_INT 5
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 32
10726: PUSH
10727: LD_INT 75
10729: PUSH
10730: LD_INT 76
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 32
10744: PUSH
10745: LD_INT 77
10747: PUSH
10748: LD_INT 75
10750: PUSH
10751: LD_INT 5
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 32
10762: PUSH
10763: LD_INT 69
10765: PUSH
10766: LD_INT 68
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 32
10780: PUSH
10781: LD_INT 59
10783: PUSH
10784: LD_INT 96
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 32
10798: PUSH
10799: LD_INT 56
10801: PUSH
10802: LD_INT 96
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 32
10816: PUSH
10817: LD_INT 51
10819: PUSH
10820: LD_INT 61
10822: PUSH
10823: LD_INT 3
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 32
10834: PUSH
10835: LD_INT 42
10837: PUSH
10838: LD_INT 60
10840: PUSH
10841: LD_INT 3
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 32
10852: PUSH
10853: LD_INT 36
10855: PUSH
10856: LD_INT 58
10858: PUSH
10859: LD_INT 3
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 32
10870: PUSH
10871: LD_INT 39
10873: PUSH
10874: LD_INT 59
10876: PUSH
10877: LD_INT 3
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 32
10888: PUSH
10889: LD_INT 61
10891: PUSH
10892: LD_INT 64
10894: PUSH
10895: LD_INT 3
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 33
10906: PUSH
10907: LD_INT 63
10909: PUSH
10910: LD_INT 90
10912: PUSH
10913: LD_INT 5
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 33
10924: PUSH
10925: LD_INT 64
10927: PUSH
10928: LD_INT 88
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 33
10942: PUSH
10943: LD_INT 72
10945: PUSH
10946: LD_INT 82
10948: PUSH
10949: LD_INT 5
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 6
10960: PUSH
10961: LD_INT 42
10963: PUSH
10964: LD_INT 74
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 6
10978: PUSH
10979: LD_INT 56
10981: PUSH
10982: LD_INT 77
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 54
10999: PUSH
11000: LD_INT 91
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 16
11014: PUSH
11015: LD_INT 50
11017: PUSH
11018: LD_INT 83
11020: PUSH
11021: LD_INT 3
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 24
11032: PUSH
11033: LD_INT 50
11035: PUSH
11036: LD_INT 90
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11079: LD_ADDR_VAR 0 3
11083: PUSH
11084: LD_INT 22
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PPUSH
11115: CALL_OW 69
11119: PUSH
11120: FOR_IN
11121: IFFALSE 11140
// AddComAgressiveMove ( i , 53 , 82 ) ;
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 53
11130: PPUSH
11131: LD_INT 82
11133: PPUSH
11134: CALL_OW 174
11138: GO 11120
11140: POP
11141: POP
// for i := 1 to buildingsTab do
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: DOUBLE
11148: LD_INT 1
11150: DEC
11151: ST_TO_ADDR
11152: LD_VAR 0 5
11156: PUSH
11157: FOR_TO
11158: IFFALSE 11231
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11160: LD_VAR 0 4
11164: PPUSH
11165: LD_VAR 0 5
11169: PUSH
11170: LD_VAR 0 3
11174: ARRAY
11175: PUSH
11176: LD_INT 1
11178: ARRAY
11179: PPUSH
11180: LD_VAR 0 5
11184: PUSH
11185: LD_VAR 0 3
11189: ARRAY
11190: PUSH
11191: LD_INT 2
11193: ARRAY
11194: PPUSH
11195: LD_VAR 0 5
11199: PUSH
11200: LD_VAR 0 3
11204: ARRAY
11205: PUSH
11206: LD_INT 3
11208: ARRAY
11209: PPUSH
11210: LD_VAR 0 5
11214: PUSH
11215: LD_VAR 0 3
11219: ARRAY
11220: PUSH
11221: LD_INT 4
11223: ARRAY
11224: PPUSH
11225: CALL_OW 205
11229: GO 11157
11231: POP
11232: POP
// end ; if position = 2 then
11233: LD_VAR 0 1
11237: PUSH
11238: LD_INT 2
11240: EQUAL
11241: IFFALSE 11856
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11243: LD_ADDR_VAR 0 4
11247: PUSH
11248: LD_INT 22
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11277: LD_ADDR_VAR 0 5
11281: PUSH
11282: LD_INT 0
11284: PUSH
11285: LD_INT 104
11287: PUSH
11288: LD_INT 110
11290: PUSH
11291: LD_INT 5
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 4
11302: PUSH
11303: LD_INT 98
11305: PUSH
11306: LD_INT 90
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 29
11320: PUSH
11321: LD_INT 103
11323: PUSH
11324: LD_INT 114
11326: PUSH
11327: LD_INT 2
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 30
11338: PUSH
11339: LD_INT 99
11341: PUSH
11342: LD_INT 114
11344: PUSH
11345: LD_INT 3
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 28
11356: PUSH
11357: LD_INT 100
11359: PUSH
11360: LD_INT 112
11362: PUSH
11363: LD_INT 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 92
11377: PUSH
11378: LD_INT 101
11380: PUSH
11381: LD_INT 0
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 28
11392: PUSH
11393: LD_INT 97
11395: PUSH
11396: LD_INT 116
11398: PUSH
11399: LD_INT 5
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 17
11410: PUSH
11411: LD_INT 96
11413: PUSH
11414: LD_INT 101
11416: PUSH
11417: LD_INT 4
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 18
11428: PUSH
11429: LD_INT 88
11431: PUSH
11432: LD_INT 97
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 28
11446: PUSH
11447: LD_INT 106
11449: PUSH
11450: LD_INT 92
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: LD_INT 88
11467: PUSH
11468: LD_INT 89
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 32
11482: PUSH
11483: LD_INT 86
11485: PUSH
11486: LD_INT 90
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 32
11500: PUSH
11501: LD_INT 85
11503: PUSH
11504: LD_INT 99
11506: PUSH
11507: LD_INT 2
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 32
11518: PUSH
11519: LD_INT 85
11521: PUSH
11522: LD_INT 107
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 33
11536: PUSH
11537: LD_INT 105
11539: PUSH
11540: LD_INT 99
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 33
11554: PUSH
11555: LD_INT 102
11557: PUSH
11558: LD_INT 92
11560: PUSH
11561: LD_INT 3
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 33
11572: PUSH
11573: LD_INT 105
11575: PUSH
11576: LD_INT 92
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 6
11590: PUSH
11591: LD_INT 92
11593: PUSH
11594: LD_INT 110
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 6
11608: PUSH
11609: LD_INT 103
11611: PUSH
11612: LD_INT 103
11614: PUSH
11615: LD_INT 5
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 21
11626: PUSH
11627: LD_INT 89
11629: PUSH
11630: LD_INT 101
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 16
11644: PUSH
11645: LD_INT 95
11647: PUSH
11648: LD_INT 104
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 24
11662: PUSH
11663: LD_INT 92
11665: PUSH
11666: LD_INT 105
11668: PUSH
11669: LD_INT 0
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11702: LD_ADDR_VAR 0 3
11706: PUSH
11707: LD_INT 22
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PPUSH
11738: CALL_OW 69
11742: PUSH
11743: FOR_IN
11744: IFFALSE 11763
// AddComAgressiveMove ( i , 96 , 99 ) ;
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 96
11753: PPUSH
11754: LD_INT 99
11756: PPUSH
11757: CALL_OW 174
11761: GO 11743
11763: POP
11764: POP
// for i := 1 to buildingsTab do
11765: LD_ADDR_VAR 0 3
11769: PUSH
11770: DOUBLE
11771: LD_INT 1
11773: DEC
11774: ST_TO_ADDR
11775: LD_VAR 0 5
11779: PUSH
11780: FOR_TO
11781: IFFALSE 11854
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11783: LD_VAR 0 4
11787: PPUSH
11788: LD_VAR 0 5
11792: PUSH
11793: LD_VAR 0 3
11797: ARRAY
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: LD_VAR 0 5
11807: PUSH
11808: LD_VAR 0 3
11812: ARRAY
11813: PUSH
11814: LD_INT 2
11816: ARRAY
11817: PPUSH
11818: LD_VAR 0 5
11822: PUSH
11823: LD_VAR 0 3
11827: ARRAY
11828: PUSH
11829: LD_INT 3
11831: ARRAY
11832: PPUSH
11833: LD_VAR 0 5
11837: PUSH
11838: LD_VAR 0 3
11842: ARRAY
11843: PUSH
11844: LD_INT 4
11846: ARRAY
11847: PPUSH
11848: CALL_OW 205
11852: GO 11780
11854: POP
11855: POP
// end ; if position = 3 then
11856: LD_VAR 0 1
11860: PUSH
11861: LD_INT 3
11863: EQUAL
11864: IFFALSE 12650
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11866: LD_ADDR_VAR 0 4
11870: PUSH
11871: LD_INT 22
11873: PUSH
11874: LD_INT 3
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 25
11883: PUSH
11884: LD_INT 2
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11900: LD_ADDR_VAR 0 5
11904: PUSH
11905: LD_INT 0
11907: PUSH
11908: LD_INT 151
11910: PUSH
11911: LD_INT 71
11913: PUSH
11914: LD_INT 4
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: LD_INT 145
11928: PUSH
11929: LD_INT 53
11931: PUSH
11932: LD_INT 3
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 4
11943: PUSH
11944: LD_INT 172
11946: PUSH
11947: LD_INT 102
11949: PUSH
11950: LD_INT 5
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 29
11961: PUSH
11962: LD_INT 152
11964: PUSH
11965: LD_INT 85
11967: PUSH
11968: LD_INT 3
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 30
11979: PUSH
11980: LD_INT 156
11982: PUSH
11983: LD_INT 92
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_INT 151
12000: PUSH
12001: LD_INT 66
12003: PUSH
12004: LD_INT 4
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 163
12018: PUSH
12019: LD_INT 95
12021: PUSH
12022: LD_INT 5
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 28
12033: PUSH
12034: LD_INT 149
12036: PUSH
12037: LD_INT 63
12039: PUSH
12040: LD_INT 4
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 17
12051: PUSH
12052: LD_INT 167
12054: PUSH
12055: LD_INT 99
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 18
12069: PUSH
12070: LD_INT 163
12072: PUSH
12073: LD_INT 98
12075: PUSH
12076: LD_INT 0
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 28
12087: PUSH
12088: LD_INT 154
12090: PUSH
12091: LD_INT 70
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 155
12108: PUSH
12109: LD_INT 62
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 32
12123: PUSH
12124: LD_INT 161
12126: PUSH
12127: LD_INT 69
12129: PUSH
12130: LD_INT 4
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 32
12141: PUSH
12142: LD_INT 168
12144: PUSH
12145: LD_INT 78
12147: PUSH
12148: LD_INT 4
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: LD_INT 163
12162: PUSH
12163: LD_INT 80
12165: PUSH
12166: LD_INT 5
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 136
12180: PUSH
12181: LD_INT 73
12183: PUSH
12184: LD_INT 0
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 32
12195: PUSH
12196: LD_INT 157
12198: PUSH
12199: LD_INT 98
12201: PUSH
12202: LD_INT 0
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: LD_INT 150
12216: PUSH
12217: LD_INT 87
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 171
12234: PUSH
12235: LD_INT 97
12237: PUSH
12238: LD_INT 4
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 33
12249: PUSH
12250: LD_INT 168
12252: PUSH
12253: LD_INT 92
12255: PUSH
12256: LD_INT 4
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 33
12267: PUSH
12268: LD_INT 166
12270: PUSH
12271: LD_INT 80
12273: PUSH
12274: LD_INT 5
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 33
12285: PUSH
12286: LD_INT 141
12288: PUSH
12289: LD_INT 54
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 33
12303: PUSH
12304: LD_INT 133
12306: PUSH
12307: LD_INT 57
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 33
12321: PUSH
12322: LD_INT 132
12324: PUSH
12325: LD_INT 61
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 150
12342: PUSH
12343: LD_INT 82
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 33
12357: PUSH
12358: LD_INT 132
12360: PUSH
12361: LD_INT 72
12363: PUSH
12364: LD_INT 0
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 146
12378: PUSH
12379: LD_INT 64
12381: PUSH
12382: LD_INT 4
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 6
12393: PUSH
12394: LD_INT 159
12396: PUSH
12397: LD_INT 85
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 163
12414: PUSH
12415: LD_INT 91
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 16
12429: PUSH
12430: LD_INT 166
12432: PUSH
12433: LD_INT 95
12435: PUSH
12436: LD_INT 4
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: LD_INT 159
12450: PUSH
12451: LD_INT 95
12453: PUSH
12454: LD_INT 1
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12496: LD_ADDR_VAR 0 3
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 3
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 3
12513: PUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: PUSH
12537: FOR_IN
12538: IFFALSE 12557
// AddComAgressiveMove ( i , 141 , 65 ) ;
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 141
12547: PPUSH
12548: LD_INT 65
12550: PPUSH
12551: CALL_OW 174
12555: GO 12537
12557: POP
12558: POP
// for i := 1 to buildingsTab do
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: DOUBLE
12565: LD_INT 1
12567: DEC
12568: ST_TO_ADDR
12569: LD_VAR 0 5
12573: PUSH
12574: FOR_TO
12575: IFFALSE 12648
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12577: LD_VAR 0 4
12581: PPUSH
12582: LD_VAR 0 5
12586: PUSH
12587: LD_VAR 0 3
12591: ARRAY
12592: PUSH
12593: LD_INT 1
12595: ARRAY
12596: PPUSH
12597: LD_VAR 0 5
12601: PUSH
12602: LD_VAR 0 3
12606: ARRAY
12607: PUSH
12608: LD_INT 2
12610: ARRAY
12611: PPUSH
12612: LD_VAR 0 5
12616: PUSH
12617: LD_VAR 0 3
12621: ARRAY
12622: PUSH
12623: LD_INT 3
12625: ARRAY
12626: PPUSH
12627: LD_VAR 0 5
12631: PUSH
12632: LD_VAR 0 3
12636: ARRAY
12637: PUSH
12638: LD_INT 4
12640: ARRAY
12641: PPUSH
12642: CALL_OW 205
12646: GO 12574
12648: POP
12649: POP
// end ; end ;
12650: LD_VAR 0 2
12654: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12655: LD_INT 0
12657: PPUSH
12658: PPUSH
12659: PPUSH
12660: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12661: LD_ADDR_VAR 0 3
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 25
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12695: LD_VAR 0 3
12699: PPUSH
12700: LD_INT 0
12702: PPUSH
12703: LD_INT 71
12705: PPUSH
12706: LD_INT 15
12708: PPUSH
12709: LD_INT 3
12711: PPUSH
12712: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12716: LD_ADDR_VAR 0 4
12720: PUSH
12721: LD_INT 6
12723: PUSH
12724: LD_INT 77
12726: PUSH
12727: LD_INT 18
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 4
12741: PUSH
12742: LD_INT 77
12744: PUSH
12745: LD_INT 26
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 31
12759: PUSH
12760: LD_INT 82
12762: PUSH
12763: LD_INT 28
12765: PUSH
12766: LD_INT 0
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 31
12777: PUSH
12778: LD_INT 84
12780: PUSH
12781: LD_INT 21
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 31
12795: PUSH
12796: LD_INT 66
12798: PUSH
12799: LD_INT 14
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 27
12813: PUSH
12814: LD_INT 67
12816: PUSH
12817: LD_INT 18
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 27
12831: PUSH
12832: LD_INT 69
12834: PUSH
12835: LD_INT 23
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: ST_TO_ADDR
// for i := 1 to buildingsTab do
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: DOUBLE
12862: LD_INT 1
12864: DEC
12865: ST_TO_ADDR
12866: LD_VAR 0 4
12870: PUSH
12871: FOR_TO
12872: IFFALSE 12945
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_VAR 0 4
12883: PUSH
12884: LD_VAR 0 2
12888: ARRAY
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PPUSH
12894: LD_VAR 0 4
12898: PUSH
12899: LD_VAR 0 2
12903: ARRAY
12904: PUSH
12905: LD_INT 2
12907: ARRAY
12908: PPUSH
12909: LD_VAR 0 4
12913: PUSH
12914: LD_VAR 0 2
12918: ARRAY
12919: PUSH
12920: LD_INT 3
12922: ARRAY
12923: PPUSH
12924: LD_VAR 0 4
12928: PUSH
12929: LD_VAR 0 2
12933: ARRAY
12934: PUSH
12935: LD_INT 4
12937: ARRAY
12938: PPUSH
12939: CALL_OW 205
12943: GO 12871
12945: POP
12946: POP
// end ;
12947: LD_VAR 0 1
12951: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12960: LD_ADDR_VAR 0 7
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_VAR 0 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 25
12979: PUSH
12980: LD_INT 9
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12996: LD_ADDR_VAR 0 8
13000: PUSH
13001: LD_INT 22
13003: PUSH
13004: LD_VAR 0 2
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 3
13015: PUSH
13016: LD_INT 21
13018: PUSH
13019: LD_INT 3
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PPUSH
13034: CALL_OW 69
13038: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13039: LD_ADDR_VAR 0 5
13043: PUSH
13044: LD_INT 1
13046: PPUSH
13047: LD_INT 3
13049: PPUSH
13050: CALL_OW 12
13054: ST_TO_ADDR
// for i = 1 to list do
13055: LD_ADDR_VAR 0 6
13059: PUSH
13060: DOUBLE
13061: LD_INT 1
13063: DEC
13064: ST_TO_ADDR
13065: LD_VAR 0 7
13069: PUSH
13070: FOR_TO
13071: IFFALSE 14041
// for ta in filter do
13073: LD_ADDR_VAR 0 4
13077: PUSH
13078: LD_VAR 0 8
13082: PUSH
13083: FOR_IN
13084: IFFALSE 14037
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13086: LD_VAR 0 7
13090: PUSH
13091: LD_VAR 0 6
13095: ARRAY
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 296
13106: PUSH
13107: LD_INT 15
13109: LESSEQUAL
13110: IFFALSE 14035
// begin case c of 1 :
13112: LD_VAR 0 5
13116: PUSH
13117: LD_INT 1
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13557
13125: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13126: LD_VAR 0 7
13130: PUSH
13131: LD_VAR 0 6
13135: ARRAY
13136: PPUSH
13137: LD_VAR 0 4
13141: PPUSH
13142: CALL_OW 250
13146: PPUSH
13147: LD_VAR 0 4
13151: PPUSH
13152: CALL_OW 251
13156: PPUSH
13157: CALL_OW 154
// if eventVar2 = 0 then
13161: LD_EXP 62
13165: PUSH
13166: LD_INT 0
13168: EQUAL
13169: IFFALSE 13555
// begin eventVar2 = 1 ;
13171: LD_ADDR_EXP 62
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13179: LD_INT 245
13181: PPUSH
13182: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13186: LD_VAR 0 4
13190: PPUSH
13191: CALL_OW 250
13195: PPUSH
13196: LD_VAR 0 4
13200: PPUSH
13201: CALL_OW 251
13205: PPUSH
13206: CALL_OW 84
// DialogueOn ;
13210: CALL_OW 6
// if IsOK ( Cyrus ) then
13214: LD_EXP 5
13218: PPUSH
13219: CALL_OW 302
13223: IFFALSE 13239
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13225: LD_EXP 5
13229: PPUSH
13230: LD_STRING D9a-Cyrus-1
13232: PPUSH
13233: CALL_OW 88
// end else
13237: GO 13361
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13239: LD_INT 22
13241: PUSH
13242: LD_INT 1
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 26
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 25
13264: PUSH
13265: LD_INT 1
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 25
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 25
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 4
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 25
13304: PUSH
13305: LD_INT 5
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PUSH
13330: LD_EXP 1
13334: PUSH
13335: LD_EXP 14
13339: PUSH
13340: LD_EXP 5
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: DIFF
13350: PPUSH
13351: LD_STRING D9a-Sol1-1
13353: PPUSH
13354: LD_STRING D9a-Sol1-1
13356: PPUSH
13357: CALL 9607 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13361: LD_INT 22
13363: PUSH
13364: LD_INT 1
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 26
13373: PUSH
13374: LD_INT 1
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: LD_INT 25
13386: PUSH
13387: LD_INT 1
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 25
13396: PUSH
13397: LD_INT 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 25
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 25
13416: PUSH
13417: LD_INT 4
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 25
13426: PUSH
13427: LD_INT 5
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: PUSH
13452: LD_EXP 1
13456: PUSH
13457: LD_EXP 14
13461: PUSH
13462: LD_EXP 5
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: DIFF
13472: PPUSH
13473: LD_STRING D9b-Sol1-1
13475: PPUSH
13476: LD_STRING D9b-Sol1-1
13478: PPUSH
13479: CALL 9607 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13483: LD_STRING 09_arInfo
13485: PPUSH
13486: LD_INT 0
13488: PPUSH
13489: CALL_OW 30
13493: PUSH
13494: LD_INT 1
13496: EQUAL
13497: IFFALSE 13511
// Say ( JMM , D9a-JMM-1 ) ;
13499: LD_EXP 1
13503: PPUSH
13504: LD_STRING D9a-JMM-1
13506: PPUSH
13507: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13511: LD_EXP 1
13515: PPUSH
13516: LD_STRING D9c-JMM-1
13518: PPUSH
13519: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13523: LD_INT 12
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 321
13533: PUSH
13534: LD_INT 2
13536: EQUAL
13537: IFFALSE 13551
// Say ( JMM , D9c-JMM-1a ) ;
13539: LD_EXP 1
13543: PPUSH
13544: LD_STRING D9c-JMM-1a
13546: PPUSH
13547: CALL_OW 88
// DialogueOff ;
13551: CALL_OW 7
// end ; end ; 2 :
13555: GO 14035
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 14023
13565: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13566: LD_VAR 0 7
13570: PUSH
13571: LD_VAR 0 6
13575: ARRAY
13576: PPUSH
13577: LD_VAR 0 4
13581: PPUSH
13582: CALL_OW 250
13586: PUSH
13587: LD_INT 1
13589: NEG
13590: PPUSH
13591: LD_INT 1
13593: PPUSH
13594: CALL_OW 12
13598: PLUS
13599: PPUSH
13600: LD_VAR 0 4
13604: PPUSH
13605: CALL_OW 251
13609: PUSH
13610: LD_INT 1
13612: NEG
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 12
13621: PLUS
13622: PPUSH
13623: CALL_OW 153
// if eventVar2 = 0 then
13627: LD_EXP 62
13631: PUSH
13632: LD_INT 0
13634: EQUAL
13635: IFFALSE 14021
// begin eventVar2 = 1 ;
13637: LD_ADDR_EXP 62
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13645: LD_INT 245
13647: PPUSH
13648: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13652: LD_VAR 0 4
13656: PPUSH
13657: CALL_OW 250
13661: PPUSH
13662: LD_VAR 0 4
13666: PPUSH
13667: CALL_OW 251
13671: PPUSH
13672: CALL_OW 84
// DialogueOn ;
13676: CALL_OW 6
// if IsOK ( Cyrus ) then
13680: LD_EXP 5
13684: PPUSH
13685: CALL_OW 302
13689: IFFALSE 13705
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13691: LD_EXP 5
13695: PPUSH
13696: LD_STRING D9a-Cyrus-1
13698: PPUSH
13699: CALL_OW 88
// end else
13703: GO 13827
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13705: LD_INT 22
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 26
13717: PUSH
13718: LD_INT 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 25
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 3
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 25
13760: PUSH
13761: LD_INT 4
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 25
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PPUSH
13791: CALL_OW 69
13795: PUSH
13796: LD_EXP 1
13800: PUSH
13801: LD_EXP 14
13805: PUSH
13806: LD_EXP 5
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: DIFF
13816: PPUSH
13817: LD_STRING D9a-Sol1-1
13819: PPUSH
13820: LD_STRING D9a-Sol1-1
13822: PPUSH
13823: CALL 9607 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13827: LD_INT 22
13829: PUSH
13830: LD_INT 1
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 26
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: LD_INT 25
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 25
13862: PUSH
13863: LD_INT 2
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 25
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 25
13882: PUSH
13883: LD_INT 4
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 5
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: PUSH
13918: LD_EXP 1
13922: PUSH
13923: LD_EXP 14
13927: PUSH
13928: LD_EXP 5
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: DIFF
13938: PPUSH
13939: LD_STRING D9b-Sol1-1
13941: PPUSH
13942: LD_STRING D9b-Sol1-1
13944: PPUSH
13945: CALL 9607 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13949: LD_STRING 09_arInfo
13951: PPUSH
13952: LD_INT 0
13954: PPUSH
13955: CALL_OW 30
13959: PUSH
13960: LD_INT 1
13962: EQUAL
13963: IFFALSE 13977
// Say ( JMM , D9a-JMM-1 ) ;
13965: LD_EXP 1
13969: PPUSH
13970: LD_STRING D9a-JMM-1
13972: PPUSH
13973: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13977: LD_EXP 1
13981: PPUSH
13982: LD_STRING D9c-JMM-1
13984: PPUSH
13985: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13989: LD_INT 12
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: CALL_OW 321
13999: PUSH
14000: LD_INT 2
14002: EQUAL
14003: IFFALSE 14017
// Say ( JMM , D9c-JMM-1a ) ;
14005: LD_EXP 1
14009: PPUSH
14010: LD_STRING D9c-JMM-1a
14012: PPUSH
14013: CALL_OW 88
// DialogueOff ;
14017: CALL_OW 7
// end ; end ; 3 :
14021: GO 14035
14023: LD_INT 3
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14034
14031: POP
// ; end ;
14032: GO 14035
14034: POP
// end ; end ;
14035: GO 13083
14037: POP
14038: POP
14039: GO 13070
14041: POP
14042: POP
// end ;
14043: LD_VAR 0 3
14047: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14048: LD_INT 0
14050: PPUSH
14051: PPUSH
14052: PPUSH
14053: PPUSH
// for i = 1 to 72 do
14054: LD_ADDR_VAR 0 5
14058: PUSH
14059: DOUBLE
14060: LD_INT 1
14062: DEC
14063: ST_TO_ADDR
14064: LD_INT 72
14066: PUSH
14067: FOR_TO
14068: IFFALSE 14126
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14070: LD_VAR 0 5
14074: PPUSH
14075: LD_VAR 0 1
14079: PPUSH
14080: CALL_OW 321
14084: PUSH
14085: LD_INT 1
14087: EQUAL
14088: PUSH
14089: LD_VAR 0 5
14093: PPUSH
14094: LD_VAR 0 3
14098: PPUSH
14099: CALL_OW 482
14103: PUSH
14104: LD_INT 1
14106: EQUAL
14107: AND
14108: IFFALSE 14124
// AddComResearch ( lab , i ) ;
14110: LD_VAR 0 2
14114: PPUSH
14115: LD_VAR 0 5
14119: PPUSH
14120: CALL_OW 184
14124: GO 14067
14126: POP
14127: POP
// end ;
14128: LD_VAR 0 4
14132: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14133: LD_INT 0
14135: PPUSH
14136: PPUSH
14137: PPUSH
14138: PPUSH
14139: PPUSH
14140: PPUSH
14141: PPUSH
14142: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14143: LD_ADDR_VAR 0 6
14147: PUSH
14148: LD_INT 22
14150: PUSH
14151: LD_VAR 0 1
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 56
14162: PUSH
14163: EMPTY
14164: LIST
14165: PUSH
14166: LD_INT 24
14168: PUSH
14169: LD_INT 700
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: LD_INT 60
14181: PUSH
14182: EMPTY
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 25
14194: PUSH
14195: LD_INT 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 25
14204: PUSH
14205: LD_INT 9
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: PPUSH
14224: CALL_OW 69
14228: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14229: LD_ADDR_VAR 0 7
14233: PUSH
14234: LD_INT 22
14236: PUSH
14237: LD_VAR 0 1
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: PUSH
14246: LD_INT 30
14248: PUSH
14249: LD_INT 32
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: LD_INT 58
14258: PUSH
14259: EMPTY
14260: LIST
14261: PUSH
14262: LD_INT 24
14264: PUSH
14265: LD_INT 251
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 69
14282: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14283: LD_ADDR_VAR 0 9
14287: PUSH
14288: LD_INT 22
14290: PUSH
14291: LD_VAR 0 1
14295: PUSH
14296: EMPTY
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 2
14302: PUSH
14303: LD_INT 30
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 30
14315: PUSH
14316: LD_INT 5
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: LIST
14327: PUSH
14328: LD_INT 24
14330: PUSH
14331: LD_INT 251
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 69
14347: ST_TO_ADDR
// if barrackList > 0 then
14348: LD_VAR 0 9
14352: PUSH
14353: LD_INT 0
14355: GREATER
14356: IFFALSE 14491
// begin if turretList = 0 then
14358: LD_VAR 0 7
14362: PUSH
14363: LD_INT 0
14365: EQUAL
14366: IFFALSE 14415
// begin for i in soldiers_list do
14368: LD_ADDR_VAR 0 4
14372: PUSH
14373: LD_VAR 0 6
14377: PUSH
14378: FOR_IN
14379: IFFALSE 14411
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14381: LD_VAR 0 4
14385: PPUSH
14386: LD_VAR 0 9
14390: PUSH
14391: LD_INT 1
14393: PPUSH
14394: LD_VAR 0 9
14398: PPUSH
14399: CALL_OW 12
14403: ARRAY
14404: PPUSH
14405: CALL_OW 120
14409: GO 14378
14411: POP
14412: POP
// end else
14413: GO 14491
// begin for i in barrackList do
14415: LD_ADDR_VAR 0 4
14419: PUSH
14420: LD_VAR 0 9
14424: PUSH
14425: FOR_IN
14426: IFFALSE 14489
// begin insideUnits = UnitsInside ( i ) ;
14428: LD_ADDR_VAR 0 10
14432: PUSH
14433: LD_VAR 0 4
14437: PPUSH
14438: CALL_OW 313
14442: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14443: LD_VAR 0 10
14447: PUSH
14448: LD_INT 1
14450: ARRAY
14451: PPUSH
14452: LD_VAR 0 7
14456: PUSH
14457: LD_INT 1
14459: ARRAY
14460: PPUSH
14461: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14465: LD_VAR 0 6
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PPUSH
14474: LD_VAR 0 7
14478: PUSH
14479: LD_INT 1
14481: ARRAY
14482: PPUSH
14483: CALL_OW 120
// end ;
14487: GO 14425
14489: POP
14490: POP
// end ; end ; end ;
14491: LD_VAR 0 3
14495: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14496: LD_INT 0
14498: PPUSH
14499: PPUSH
14500: PPUSH
14501: PPUSH
14502: PPUSH
14503: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14504: LD_ADDR_VAR 0 6
14508: PUSH
14509: LD_VAR 0 2
14513: PPUSH
14514: CALL_OW 313
14518: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14519: LD_ADDR_VAR 0 7
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_VAR 0 1
14531: PUSH
14532: EMPTY
14533: LIST
14534: LIST
14535: PUSH
14536: LD_INT 25
14538: PUSH
14539: LD_INT 2
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: PUSH
14546: LD_INT 24
14548: PUSH
14549: LD_INT 1000
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 3
14558: PUSH
14559: LD_INT 54
14561: PUSH
14562: EMPTY
14563: LIST
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14580: LD_ADDR_VAR 0 4
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_VAR 0 1
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 21
14599: PUSH
14600: LD_INT 3
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: LD_INT 24
14612: PUSH
14613: LD_INT 1000
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: PPUSH
14632: CALL_OW 69
14636: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14637: LD_VAR 0 4
14641: NOT
14642: PUSH
14643: LD_VAR 0 7
14647: NOT
14648: AND
14649: PUSH
14650: LD_EXP 42
14654: NOT
14655: AND
14656: IFFALSE 14660
// exit ;
14658: GO 14851
// if buildings_list > 0 and engineerOkInside then
14660: LD_VAR 0 4
14664: PUSH
14665: LD_INT 0
14667: GREATER
14668: PUSH
14669: LD_VAR 0 6
14673: AND
14674: IFFALSE 14728
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14676: LD_ADDR_VAR 0 5
14680: PUSH
14681: LD_INT 22
14683: PUSH
14684: LD_VAR 0 1
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PUSH
14693: LD_INT 25
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PPUSH
14707: CALL_OW 69
14711: PUSH
14712: FOR_IN
14713: IFFALSE 14726
// ComExitBuilding ( i ) ;
14715: LD_VAR 0 5
14719: PPUSH
14720: CALL_OW 122
14724: GO 14712
14726: POP
14727: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14728: LD_VAR 0 4
14732: PUSH
14733: LD_INT 0
14735: GREATER
14736: PUSH
14737: LD_VAR 0 7
14741: PUSH
14742: LD_INT 0
14744: GREATER
14745: AND
14746: IFFALSE 14800
// begin for i in engineerOkOutside do
14748: LD_ADDR_VAR 0 5
14752: PUSH
14753: LD_VAR 0 7
14757: PUSH
14758: FOR_IN
14759: IFFALSE 14798
// for j in buildings_list do
14761: LD_ADDR_VAR 0 8
14765: PUSH
14766: LD_VAR 0 4
14770: PUSH
14771: FOR_IN
14772: IFFALSE 14794
// ComRepairBuilding ( i , j [ 1 ] ) ;
14774: LD_VAR 0 5
14778: PPUSH
14779: LD_VAR 0 8
14783: PUSH
14784: LD_INT 1
14786: ARRAY
14787: PPUSH
14788: CALL_OW 130
14792: GO 14771
14794: POP
14795: POP
14796: GO 14758
14798: POP
14799: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14800: LD_VAR 0 4
14804: PUSH
14805: LD_INT 0
14807: EQUAL
14808: PUSH
14809: LD_VAR 0 7
14813: PUSH
14814: LD_INT 0
14816: GREATER
14817: AND
14818: IFFALSE 14851
// for i in engineerOkOutside do
14820: LD_ADDR_VAR 0 5
14824: PUSH
14825: LD_VAR 0 7
14829: PUSH
14830: FOR_IN
14831: IFFALSE 14849
// ComEnterUnit ( i , building ) ;
14833: LD_VAR 0 5
14837: PPUSH
14838: LD_VAR 0 2
14842: PPUSH
14843: CALL_OW 120
14847: GO 14830
14849: POP
14850: POP
// end ;
14851: LD_VAR 0 3
14855: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14856: LD_INT 0
14858: PPUSH
14859: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14860: LD_INT 22
14862: PUSH
14863: LD_VAR 0 1
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: LD_INT 25
14874: PUSH
14875: LD_INT 2
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PPUSH
14886: CALL_OW 69
14890: PUSH
14891: LD_INT 0
14893: GREATER
14894: PUSH
14895: LD_INT 22
14897: PUSH
14898: LD_VAR 0 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: LD_INT 21
14909: PUSH
14910: LD_INT 3
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: LD_INT 24
14922: PUSH
14923: LD_INT 1000
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: PUSH
14930: EMPTY
14931: LIST
14932: LIST
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 69
14943: PUSH
14944: LD_INT 0
14946: EQUAL
14947: AND
14948: PUSH
14949: LD_VAR 0 2
14953: PUSH
14954: LD_INT 0
14956: GREATER
14957: AND
14958: IFFALSE 15057
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14960: LD_ADDR_VAR 0 4
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_VAR 0 1
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 25
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: PUSH
14996: FOR_IN
14997: IFFALSE 15055
// begin AddComExitBuilding ( i ) ;
14999: LD_VAR 0 4
15003: PPUSH
15004: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15008: LD_VAR 0 4
15012: PPUSH
15013: LD_VAR 0 2
15017: PUSH
15018: LD_INT 1
15020: ARRAY
15021: PPUSH
15022: LD_VAR 0 2
15026: PUSH
15027: LD_INT 2
15029: ARRAY
15030: PPUSH
15031: LD_VAR 0 2
15035: PUSH
15036: LD_INT 3
15038: ARRAY
15039: PPUSH
15040: LD_VAR 0 2
15044: PUSH
15045: LD_INT 4
15047: ARRAY
15048: PPUSH
15049: CALL_OW 205
// end ;
15053: GO 14996
15055: POP
15056: POP
// end ; end ;
15057: LD_VAR 0 3
15061: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15062: LD_INT 0
15064: PPUSH
15065: PPUSH
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15073: LD_ADDR_VAR 0 6
15077: PUSH
15078: LD_INT 22
15080: PUSH
15081: LD_VAR 0 1
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: LD_INT 25
15092: PUSH
15093: LD_INT 4
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: PUSH
15100: LD_INT 24
15102: PUSH
15103: LD_INT 251
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15120: LD_ADDR_VAR 0 7
15124: PUSH
15125: LD_VAR 0 3
15129: PPUSH
15130: LD_INT 22
15132: PUSH
15133: LD_VAR 0 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 25
15144: PUSH
15145: LD_INT 4
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 50
15154: PUSH
15155: EMPTY
15156: LIST
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: LIST
15162: PPUSH
15163: CALL_OW 70
15167: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15168: LD_ADDR_VAR 0 10
15172: PUSH
15173: LD_VAR 0 3
15177: PPUSH
15178: LD_INT 22
15180: PUSH
15181: LD_VAR 0 1
15185: PUSH
15186: EMPTY
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 21
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 3
15202: PUSH
15203: LD_INT 25
15205: PUSH
15206: LD_INT 3
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 3
15219: PUSH
15220: LD_INT 24
15222: PUSH
15223: LD_INT 750
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PPUSH
15240: CALL_OW 70
15244: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15245: LD_ADDR_VAR 0 11
15249: PUSH
15250: LD_VAR 0 2
15254: PPUSH
15255: LD_INT 22
15257: PUSH
15258: LD_VAR 0 1
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 21
15269: PUSH
15270: LD_INT 1
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 3
15279: PUSH
15280: LD_INT 25
15282: PUSH
15283: LD_INT 3
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 3
15296: PUSH
15297: LD_INT 24
15299: PUSH
15300: LD_INT 1000
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 70
15321: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15322: LD_VAR 0 10
15326: NOT
15327: PUSH
15328: LD_VAR 0 7
15332: NOT
15333: AND
15334: PUSH
15335: LD_VAR 0 11
15339: NOT
15340: AND
15341: IFFALSE 15345
// exit ;
15343: GO 15605
// if damageUnits > 0 and sci_list > 0 then
15345: LD_VAR 0 10
15349: PUSH
15350: LD_INT 0
15352: GREATER
15353: PUSH
15354: LD_VAR 0 6
15358: PUSH
15359: LD_INT 0
15361: GREATER
15362: AND
15363: IFFALSE 15396
// for i in damageUnits do
15365: LD_ADDR_VAR 0 8
15369: PUSH
15370: LD_VAR 0 10
15374: PUSH
15375: FOR_IN
15376: IFFALSE 15394
// ComMoveToArea ( i , healArea ) ;
15378: LD_VAR 0 8
15382: PPUSH
15383: LD_VAR 0 2
15387: PPUSH
15388: CALL_OW 113
15392: GO 15375
15394: POP
15395: POP
// if unitsToHeal > 0 and sci_list > 0 then
15396: LD_VAR 0 11
15400: PUSH
15401: LD_INT 0
15403: GREATER
15404: PUSH
15405: LD_VAR 0 6
15409: PUSH
15410: LD_INT 0
15412: GREATER
15413: AND
15414: IFFALSE 15473
// begin for i in sci_list do
15416: LD_ADDR_VAR 0 8
15420: PUSH
15421: LD_VAR 0 6
15425: PUSH
15426: FOR_IN
15427: IFFALSE 15471
// begin ComExitBuilding ( i ) ;
15429: LD_VAR 0 8
15433: PPUSH
15434: CALL_OW 122
// for j in unitsToHeal do
15438: LD_ADDR_VAR 0 9
15442: PUSH
15443: LD_VAR 0 11
15447: PUSH
15448: FOR_IN
15449: IFFALSE 15467
// AddComHeal ( i , j ) ;
15451: LD_VAR 0 8
15455: PPUSH
15456: LD_VAR 0 9
15460: PPUSH
15461: CALL_OW 188
15465: GO 15448
15467: POP
15468: POP
// end ;
15469: GO 15426
15471: POP
15472: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15473: LD_VAR 0 10
15477: PUSH
15478: LD_INT 0
15480: EQUAL
15481: PUSH
15482: LD_VAR 0 11
15486: PUSH
15487: LD_INT 0
15489: EQUAL
15490: AND
15491: PUSH
15492: LD_VAR 0 7
15496: PUSH
15497: LD_INT 0
15499: GREATER
15500: AND
15501: IFFALSE 15605
// for i in sci_listOutside do
15503: LD_ADDR_VAR 0 8
15507: PUSH
15508: LD_VAR 0 7
15512: PUSH
15513: FOR_IN
15514: IFFALSE 15603
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15516: LD_ADDR_VAR 0 12
15520: PUSH
15521: LD_INT 22
15523: PUSH
15524: LD_VAR 0 1
15528: PUSH
15529: EMPTY
15530: LIST
15531: LIST
15532: PUSH
15533: LD_INT 21
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 30
15545: PUSH
15546: LD_INT 8
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: EMPTY
15554: LIST
15555: LIST
15556: LIST
15557: PPUSH
15558: CALL_OW 69
15562: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15563: LD_ADDR_VAR 0 13
15567: PUSH
15568: LD_INT 1
15570: PPUSH
15571: LD_VAR 0 12
15575: PPUSH
15576: CALL_OW 12
15580: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15581: LD_VAR 0 8
15585: PPUSH
15586: LD_VAR 0 12
15590: PUSH
15591: LD_VAR 0 13
15595: ARRAY
15596: PPUSH
15597: CALL_OW 120
// end ;
15601: GO 15513
15603: POP
15604: POP
// end ;
15605: LD_VAR 0 5
15609: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15610: LD_INT 0
15612: PPUSH
15613: PPUSH
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
// amChassisTab = [ ] ;
15623: LD_ADDR_VAR 0 19
15627: PUSH
15628: EMPTY
15629: ST_TO_ADDR
// arChassisTab = [ ] ;
15630: LD_ADDR_VAR 0 18
15634: PUSH
15635: EMPTY
15636: ST_TO_ADDR
// ruChassisTab = [ ] ;
15637: LD_ADDR_VAR 0 17
15641: PUSH
15642: EMPTY
15643: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15644: LD_INT 35
15646: PPUSH
15647: CALL_OW 67
// if nation = 1 then
15651: LD_VAR 0 5
15655: PUSH
15656: LD_INT 1
15658: EQUAL
15659: IFFALSE 16164
// begin uc_side = side ;
15661: LD_ADDR_OWVAR 20
15665: PUSH
15666: LD_VAR 0 2
15670: ST_TO_ADDR
// uc_nation = nation ;
15671: LD_ADDR_OWVAR 21
15675: PUSH
15676: LD_VAR 0 5
15680: ST_TO_ADDR
// vc_engine = vehengine ;
15681: LD_ADDR_OWVAR 39
15685: PUSH
15686: LD_VAR 0 6
15690: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15691: LD_ADDR_OWVAR 38
15695: PUSH
15696: LD_VAR 0 7
15700: PUSH
15701: LD_INT 1
15703: PPUSH
15704: LD_VAR 0 7
15708: PPUSH
15709: CALL_OW 12
15713: ARRAY
15714: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15715: LD_ADDR_OWVAR 40
15719: PUSH
15720: LD_VAR 0 10
15724: PUSH
15725: LD_INT 1
15727: PPUSH
15728: LD_VAR 0 10
15732: PPUSH
15733: CALL_OW 12
15737: ARRAY
15738: ST_TO_ADDR
// for j = 1 to AMWeapon do
15739: LD_ADDR_VAR 0 14
15743: PUSH
15744: DOUBLE
15745: LD_INT 1
15747: DEC
15748: ST_TO_ADDR
15749: LD_VAR 0 10
15753: PUSH
15754: FOR_TO
15755: IFFALSE 16056
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15757: LD_VAR 0 10
15761: PUSH
15762: LD_VAR 0 14
15766: ARRAY
15767: PUSH
15768: LD_INT 2
15770: EQUAL
15771: PUSH
15772: LD_VAR 0 10
15776: PUSH
15777: LD_VAR 0 14
15781: ARRAY
15782: PUSH
15783: LD_INT 3
15785: EQUAL
15786: OR
15787: IFFALSE 15840
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15789: LD_ADDR_VAR 0 19
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: LD_INT 2
15799: PUSH
15800: LD_INT 3
15802: PUSH
15803: LD_INT 4
15805: PUSH
15806: LD_INT 5
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15816: LD_ADDR_OWVAR 37
15820: PUSH
15821: LD_VAR 0 19
15825: PUSH
15826: LD_INT 1
15828: PPUSH
15829: LD_VAR 0 19
15833: PPUSH
15834: CALL_OW 12
15838: ARRAY
15839: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15840: LD_VAR 0 10
15844: PUSH
15845: LD_VAR 0 14
15849: ARRAY
15850: PUSH
15851: LD_INT 4
15853: EQUAL
15854: PUSH
15855: LD_VAR 0 10
15859: PUSH
15860: LD_VAR 0 14
15864: ARRAY
15865: PUSH
15866: LD_INT 5
15868: EQUAL
15869: OR
15870: PUSH
15871: LD_VAR 0 10
15875: PUSH
15876: LD_VAR 0 14
15880: ARRAY
15881: PUSH
15882: LD_INT 9
15884: EQUAL
15885: OR
15886: PUSH
15887: LD_VAR 0 10
15891: PUSH
15892: LD_VAR 0 14
15896: ARRAY
15897: PUSH
15898: LD_INT 11
15900: EQUAL
15901: OR
15902: PUSH
15903: LD_VAR 0 10
15907: PUSH
15908: LD_VAR 0 14
15912: ARRAY
15913: PUSH
15914: LD_INT 7
15916: EQUAL
15917: OR
15918: IFFALSE 15967
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15920: LD_ADDR_VAR 0 19
15924: PUSH
15925: LD_INT 2
15927: PUSH
15928: LD_INT 3
15930: PUSH
15931: LD_INT 4
15933: PUSH
15934: LD_INT 5
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15943: LD_ADDR_OWVAR 37
15947: PUSH
15948: LD_VAR 0 19
15952: PUSH
15953: LD_INT 1
15955: PPUSH
15956: LD_VAR 0 19
15960: PPUSH
15961: CALL_OW 12
15965: ARRAY
15966: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15967: LD_VAR 0 10
15971: PUSH
15972: LD_VAR 0 14
15976: ARRAY
15977: PUSH
15978: LD_INT 8
15980: EQUAL
15981: PUSH
15982: LD_VAR 0 10
15986: PUSH
15987: LD_VAR 0 14
15991: ARRAY
15992: PUSH
15993: LD_INT 6
15995: EQUAL
15996: OR
15997: PUSH
15998: LD_VAR 0 10
16002: PUSH
16003: LD_VAR 0 14
16007: ARRAY
16008: PUSH
16009: LD_INT 10
16011: EQUAL
16012: OR
16013: IFFALSE 16054
// begin amChassisTab = [ 4 , 5 ] ;
16015: LD_ADDR_VAR 0 19
16019: PUSH
16020: LD_INT 4
16022: PUSH
16023: LD_INT 5
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16030: LD_ADDR_OWVAR 37
16034: PUSH
16035: LD_VAR 0 19
16039: PUSH
16040: LD_INT 1
16042: PPUSH
16043: LD_VAR 0 19
16047: PPUSH
16048: CALL_OW 12
16052: ARRAY
16053: ST_TO_ADDR
// end ; end ;
16054: GO 15754
16056: POP
16057: POP
// veh = CreateVehicle ;
16058: LD_ADDR_VAR 0 16
16062: PUSH
16063: CALL_OW 45
16067: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16068: LD_VAR 0 16
16072: PPUSH
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_INT 0
16080: PPUSH
16081: CALL_OW 49
// if vc_control = 1 then
16085: LD_OWVAR 38
16089: PUSH
16090: LD_INT 1
16092: EQUAL
16093: IFFALSE 16150
// begin hc_gallery =  ;
16095: LD_ADDR_OWVAR 33
16099: PUSH
16100: LD_STRING 
16102: ST_TO_ADDR
// hc_name =  ;
16103: LD_ADDR_OWVAR 26
16107: PUSH
16108: LD_STRING 
16110: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16111: LD_INT 0
16113: PPUSH
16114: LD_INT 3
16116: PPUSH
16117: LD_VAR 0 4
16121: PPUSH
16122: CALL_OW 380
// un = CreateHuman ;
16126: LD_ADDR_VAR 0 15
16130: PUSH
16131: CALL_OW 44
16135: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16136: LD_VAR 0 15
16140: PPUSH
16141: LD_VAR 0 16
16145: PPUSH
16146: CALL_OW 52
// end ; i = i + 1 ;
16150: LD_ADDR_VAR 0 13
16154: PUSH
16155: LD_VAR 0 13
16159: PUSH
16160: LD_INT 1
16162: PLUS
16163: ST_TO_ADDR
// end ; if nation = 2 then
16164: LD_VAR 0 5
16168: PUSH
16169: LD_INT 2
16171: EQUAL
16172: IFFALSE 16594
// begin uc_side = side ;
16174: LD_ADDR_OWVAR 20
16178: PUSH
16179: LD_VAR 0 2
16183: ST_TO_ADDR
// uc_nation = nation ;
16184: LD_ADDR_OWVAR 21
16188: PUSH
16189: LD_VAR 0 5
16193: ST_TO_ADDR
// vc_engine = vehengine ;
16194: LD_ADDR_OWVAR 39
16198: PUSH
16199: LD_VAR 0 6
16203: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16204: LD_ADDR_OWVAR 38
16208: PUSH
16209: LD_VAR 0 7
16213: PUSH
16214: LD_INT 1
16216: PPUSH
16217: LD_VAR 0 7
16221: PPUSH
16222: CALL_OW 12
16226: ARRAY
16227: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16228: LD_ADDR_OWVAR 40
16232: PUSH
16233: LD_VAR 0 9
16237: PUSH
16238: LD_INT 1
16240: PPUSH
16241: LD_VAR 0 9
16245: PPUSH
16246: CALL_OW 12
16250: ARRAY
16251: ST_TO_ADDR
// for j = 1 to ARWeapons do
16252: LD_ADDR_VAR 0 14
16256: PUSH
16257: DOUBLE
16258: LD_INT 1
16260: DEC
16261: ST_TO_ADDR
16262: LD_VAR 0 9
16266: PUSH
16267: FOR_TO
16268: IFFALSE 16486
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16270: LD_VAR 0 9
16274: PUSH
16275: LD_VAR 0 14
16279: ARRAY
16280: PUSH
16281: LD_INT 24
16283: EQUAL
16284: PUSH
16285: LD_VAR 0 9
16289: PUSH
16290: LD_VAR 0 14
16294: ARRAY
16295: PUSH
16296: LD_INT 22
16298: EQUAL
16299: OR
16300: PUSH
16301: LD_VAR 0 9
16305: PUSH
16306: LD_VAR 0 14
16310: ARRAY
16311: PUSH
16312: LD_INT 23
16314: EQUAL
16315: OR
16316: PUSH
16317: LD_VAR 0 9
16321: PUSH
16322: LD_VAR 0 14
16326: ARRAY
16327: PUSH
16328: LD_INT 30
16330: EQUAL
16331: OR
16332: IFFALSE 16369
// begin arChassisTab = [ 14 ] ;
16334: LD_ADDR_VAR 0 18
16338: PUSH
16339: LD_INT 14
16341: PUSH
16342: EMPTY
16343: LIST
16344: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16345: LD_ADDR_OWVAR 37
16349: PUSH
16350: LD_VAR 0 18
16354: PUSH
16355: LD_INT 1
16357: PPUSH
16358: LD_VAR 0 18
16362: PPUSH
16363: CALL_OW 12
16367: ARRAY
16368: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16369: LD_VAR 0 9
16373: PUSH
16374: LD_VAR 0 14
16378: ARRAY
16379: PUSH
16380: LD_INT 29
16382: EQUAL
16383: PUSH
16384: LD_VAR 0 9
16388: PUSH
16389: LD_VAR 0 14
16393: ARRAY
16394: PUSH
16395: LD_INT 28
16397: EQUAL
16398: OR
16399: PUSH
16400: LD_VAR 0 9
16404: PUSH
16405: LD_VAR 0 14
16409: ARRAY
16410: PUSH
16411: LD_INT 27
16413: EQUAL
16414: OR
16415: PUSH
16416: LD_VAR 0 9
16420: PUSH
16421: LD_VAR 0 14
16425: ARRAY
16426: PUSH
16427: LD_INT 26
16429: EQUAL
16430: OR
16431: PUSH
16432: LD_VAR 0 9
16436: PUSH
16437: LD_VAR 0 14
16441: ARRAY
16442: PUSH
16443: LD_INT 25
16445: EQUAL
16446: OR
16447: IFFALSE 16484
// begin arChassisTab = [ 14 ] ;
16449: LD_ADDR_VAR 0 18
16453: PUSH
16454: LD_INT 14
16456: PUSH
16457: EMPTY
16458: LIST
16459: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16460: LD_ADDR_OWVAR 37
16464: PUSH
16465: LD_VAR 0 18
16469: PUSH
16470: LD_INT 1
16472: PPUSH
16473: LD_VAR 0 18
16477: PPUSH
16478: CALL_OW 12
16482: ARRAY
16483: ST_TO_ADDR
// end ; end ;
16484: GO 16267
16486: POP
16487: POP
// veh = CreateVehicle ;
16488: LD_ADDR_VAR 0 16
16492: PUSH
16493: CALL_OW 45
16497: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16498: LD_VAR 0 16
16502: PPUSH
16503: LD_VAR 0 1
16507: PPUSH
16508: LD_INT 0
16510: PPUSH
16511: CALL_OW 49
// if vc_control = 1 then
16515: LD_OWVAR 38
16519: PUSH
16520: LD_INT 1
16522: EQUAL
16523: IFFALSE 16580
// begin hc_gallery =  ;
16525: LD_ADDR_OWVAR 33
16529: PUSH
16530: LD_STRING 
16532: ST_TO_ADDR
// hc_name =  ;
16533: LD_ADDR_OWVAR 26
16537: PUSH
16538: LD_STRING 
16540: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16541: LD_INT 0
16543: PPUSH
16544: LD_INT 3
16546: PPUSH
16547: LD_VAR 0 4
16551: PPUSH
16552: CALL_OW 380
// un = CreateHuman ;
16556: LD_ADDR_VAR 0 15
16560: PUSH
16561: CALL_OW 44
16565: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16566: LD_VAR 0 15
16570: PPUSH
16571: LD_VAR 0 16
16575: PPUSH
16576: CALL_OW 52
// end ; i = i + 1 ;
16580: LD_ADDR_VAR 0 13
16584: PUSH
16585: LD_VAR 0 13
16589: PUSH
16590: LD_INT 1
16592: PLUS
16593: ST_TO_ADDR
// end ; if nation = 3 then
16594: LD_VAR 0 5
16598: PUSH
16599: LD_INT 3
16601: EQUAL
16602: IFFALSE 17008
// begin uc_side = side ;
16604: LD_ADDR_OWVAR 20
16608: PUSH
16609: LD_VAR 0 2
16613: ST_TO_ADDR
// uc_nation = nation ;
16614: LD_ADDR_OWVAR 21
16618: PUSH
16619: LD_VAR 0 5
16623: ST_TO_ADDR
// vc_engine = vehengine ;
16624: LD_ADDR_OWVAR 39
16628: PUSH
16629: LD_VAR 0 6
16633: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16634: LD_ADDR_OWVAR 38
16638: PUSH
16639: LD_VAR 0 7
16643: PUSH
16644: LD_INT 1
16646: PPUSH
16647: LD_VAR 0 7
16651: PPUSH
16652: CALL_OW 12
16656: ARRAY
16657: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16658: LD_ADDR_OWVAR 40
16662: PUSH
16663: LD_VAR 0 8
16667: PUSH
16668: LD_INT 1
16670: PPUSH
16671: LD_VAR 0 8
16675: PPUSH
16676: CALL_OW 12
16680: ARRAY
16681: ST_TO_ADDR
// for j = 1 to RuWeapons do
16682: LD_ADDR_VAR 0 14
16686: PUSH
16687: DOUBLE
16688: LD_INT 1
16690: DEC
16691: ST_TO_ADDR
16692: LD_VAR 0 8
16696: PUSH
16697: FOR_TO
16698: IFFALSE 16900
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16700: LD_VAR 0 8
16704: PUSH
16705: LD_VAR 0 14
16709: ARRAY
16710: PUSH
16711: LD_INT 42
16713: EQUAL
16714: PUSH
16715: LD_VAR 0 8
16719: PUSH
16720: LD_VAR 0 14
16724: ARRAY
16725: PUSH
16726: LD_INT 43
16728: EQUAL
16729: OR
16730: PUSH
16731: LD_VAR 0 8
16735: PUSH
16736: LD_VAR 0 14
16740: ARRAY
16741: PUSH
16742: LD_INT 44
16744: EQUAL
16745: OR
16746: PUSH
16747: LD_VAR 0 8
16751: PUSH
16752: LD_VAR 0 14
16756: ARRAY
16757: PUSH
16758: LD_INT 45
16760: EQUAL
16761: OR
16762: PUSH
16763: LD_VAR 0 8
16767: PUSH
16768: LD_VAR 0 14
16772: ARRAY
16773: PUSH
16774: LD_INT 49
16776: EQUAL
16777: OR
16778: IFFALSE 16827
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16780: LD_ADDR_VAR 0 17
16784: PUSH
16785: LD_INT 21
16787: PUSH
16788: LD_INT 22
16790: PUSH
16791: LD_INT 23
16793: PUSH
16794: LD_INT 24
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16803: LD_ADDR_OWVAR 37
16807: PUSH
16808: LD_VAR 0 17
16812: PUSH
16813: LD_INT 1
16815: PPUSH
16816: LD_VAR 0 17
16820: PPUSH
16821: CALL_OW 12
16825: ARRAY
16826: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16827: LD_VAR 0 8
16831: PUSH
16832: LD_VAR 0 14
16836: ARRAY
16837: PUSH
16838: LD_INT 46
16840: EQUAL
16841: PUSH
16842: LD_VAR 0 8
16846: PUSH
16847: LD_VAR 0 14
16851: ARRAY
16852: PUSH
16853: LD_INT 47
16855: EQUAL
16856: OR
16857: IFFALSE 16898
// begin ruChassisTab = [ 23 , 24 ] ;
16859: LD_ADDR_VAR 0 17
16863: PUSH
16864: LD_INT 23
16866: PUSH
16867: LD_INT 24
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16874: LD_ADDR_OWVAR 37
16878: PUSH
16879: LD_VAR 0 17
16883: PUSH
16884: LD_INT 1
16886: PPUSH
16887: LD_VAR 0 17
16891: PPUSH
16892: CALL_OW 12
16896: ARRAY
16897: ST_TO_ADDR
// end ; end ;
16898: GO 16697
16900: POP
16901: POP
// veh = CreateVehicle ;
16902: LD_ADDR_VAR 0 16
16906: PUSH
16907: CALL_OW 45
16911: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16912: LD_VAR 0 16
16916: PPUSH
16917: LD_VAR 0 1
16921: PPUSH
16922: LD_INT 0
16924: PPUSH
16925: CALL_OW 49
// if vc_control = 1 then
16929: LD_OWVAR 38
16933: PUSH
16934: LD_INT 1
16936: EQUAL
16937: IFFALSE 16994
// begin hc_gallery =  ;
16939: LD_ADDR_OWVAR 33
16943: PUSH
16944: LD_STRING 
16946: ST_TO_ADDR
// hc_name =  ;
16947: LD_ADDR_OWVAR 26
16951: PUSH
16952: LD_STRING 
16954: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16955: LD_INT 0
16957: PPUSH
16958: LD_INT 3
16960: PPUSH
16961: LD_VAR 0 4
16965: PPUSH
16966: CALL_OW 380
// un = CreateHuman ;
16970: LD_ADDR_VAR 0 15
16974: PUSH
16975: CALL_OW 44
16979: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16980: LD_VAR 0 15
16984: PPUSH
16985: LD_VAR 0 16
16989: PPUSH
16990: CALL_OW 52
// end ; i = i + 1 ;
16994: LD_ADDR_VAR 0 13
16998: PUSH
16999: LD_VAR 0 13
17003: PUSH
17004: LD_INT 1
17006: PLUS
17007: ST_TO_ADDR
// end ; until i = vehCount ;
17008: LD_VAR 0 13
17012: PUSH
17013: LD_VAR 0 3
17017: EQUAL
17018: IFFALSE 15644
// repeat wait ( 0 0$1 ) ;
17020: LD_INT 35
17022: PPUSH
17023: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17027: LD_ADDR_VAR 0 20
17031: PUSH
17032: LD_INT 22
17034: PUSH
17035: LD_VAR 0 2
17039: PUSH
17040: EMPTY
17041: LIST
17042: LIST
17043: PUSH
17044: LD_INT 21
17046: PUSH
17047: LD_INT 2
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 24
17056: PUSH
17057: LD_INT 650
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: LIST
17068: PPUSH
17069: CALL_OW 69
17073: ST_TO_ADDR
// if vehicleOK_list > 0 then
17074: LD_VAR 0 20
17078: PUSH
17079: LD_INT 0
17081: GREATER
17082: IFFALSE 17273
// begin for i in vehicleOK_list do
17084: LD_ADDR_VAR 0 13
17088: PUSH
17089: LD_VAR 0 20
17093: PUSH
17094: FOR_IN
17095: IFFALSE 17271
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17097: LD_ADDR_VAR 0 21
17101: PUSH
17102: LD_INT 22
17104: PUSH
17105: LD_VAR 0 11
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PPUSH
17114: CALL_OW 69
17118: PPUSH
17119: LD_VAR 0 13
17123: PPUSH
17124: CALL_OW 74
17128: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17129: LD_ADDR_VAR 0 22
17133: PUSH
17134: LD_INT 22
17136: PUSH
17137: LD_VAR 0 11
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: PUSH
17146: LD_INT 2
17148: PUSH
17149: LD_INT 59
17151: PUSH
17152: EMPTY
17153: LIST
17154: PUSH
17155: LD_INT 21
17157: PUSH
17158: LD_INT 1
17160: PUSH
17161: EMPTY
17162: LIST
17163: LIST
17164: PUSH
17165: LD_INT 21
17167: PUSH
17168: LD_INT 2
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: EMPTY
17186: LIST
17187: PPUSH
17188: CALL_OW 69
17192: PPUSH
17193: LD_VAR 0 13
17197: PPUSH
17198: CALL_OW 74
17202: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17203: LD_VAR 0 13
17207: PPUSH
17208: LD_VAR 0 21
17212: PPUSH
17213: CALL_OW 296
17217: PUSH
17218: LD_INT 8
17220: PLUS
17221: PUSH
17222: LD_VAR 0 13
17226: PPUSH
17227: LD_VAR 0 22
17231: PPUSH
17232: CALL_OW 296
17236: LESS
17237: IFFALSE 17255
// begin ComAttackUnit ( i , target1 ) ;
17239: LD_VAR 0 13
17243: PPUSH
17244: LD_VAR 0 21
17248: PPUSH
17249: CALL_OW 115
// end else
17253: GO 17269
// begin ComAttackUnit ( i , target2 ) ;
17255: LD_VAR 0 13
17259: PPUSH
17260: LD_VAR 0 22
17264: PPUSH
17265: CALL_OW 115
// end ; end ;
17269: GO 17094
17271: POP
17272: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17273: LD_INT 22
17275: PUSH
17276: LD_VAR 0 2
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 21
17287: PUSH
17288: LD_INT 2
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 69
17303: PUSH
17304: LD_INT 0
17306: EQUAL
17307: IFFALSE 17020
// end ;
17309: LD_VAR 0 12
17313: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17314: LD_INT 0
17316: PPUSH
17317: PPUSH
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
// for i = 1 to soldierCount do
17327: LD_ADDR_VAR 0 13
17331: PUSH
17332: DOUBLE
17333: LD_INT 1
17335: DEC
17336: ST_TO_ADDR
17337: LD_VAR 0 3
17341: PUSH
17342: FOR_TO
17343: IFFALSE 17425
// begin uc_side = side ;
17345: LD_ADDR_OWVAR 20
17349: PUSH
17350: LD_VAR 0 1
17354: ST_TO_ADDR
// uc_nation = nation ;
17355: LD_ADDR_OWVAR 21
17359: PUSH
17360: LD_VAR 0 2
17364: ST_TO_ADDR
// hc_name =  ;
17365: LD_ADDR_OWVAR 26
17369: PUSH
17370: LD_STRING 
17372: ST_TO_ADDR
// hc_gallery =  ;
17373: LD_ADDR_OWVAR 33
17377: PUSH
17378: LD_STRING 
17380: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17381: LD_INT 0
17383: PPUSH
17384: LD_INT 1
17386: PPUSH
17387: LD_VAR 0 8
17391: PPUSH
17392: CALL_OW 380
// un = CreateHuman ;
17396: LD_ADDR_VAR 0 15
17400: PUSH
17401: CALL_OW 44
17405: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17406: LD_VAR 0 15
17410: PPUSH
17411: LD_VAR 0 9
17415: PPUSH
17416: LD_INT 0
17418: PPUSH
17419: CALL_OW 49
// end ;
17423: GO 17342
17425: POP
17426: POP
// for i = 1 to sniperCount do
17427: LD_ADDR_VAR 0 13
17431: PUSH
17432: DOUBLE
17433: LD_INT 1
17435: DEC
17436: ST_TO_ADDR
17437: LD_VAR 0 4
17441: PUSH
17442: FOR_TO
17443: IFFALSE 17525
// begin uc_side = side ;
17445: LD_ADDR_OWVAR 20
17449: PUSH
17450: LD_VAR 0 1
17454: ST_TO_ADDR
// uc_nation = nation ;
17455: LD_ADDR_OWVAR 21
17459: PUSH
17460: LD_VAR 0 2
17464: ST_TO_ADDR
// hc_name =  ;
17465: LD_ADDR_OWVAR 26
17469: PUSH
17470: LD_STRING 
17472: ST_TO_ADDR
// hc_gallery =  ;
17473: LD_ADDR_OWVAR 33
17477: PUSH
17478: LD_STRING 
17480: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17481: LD_INT 0
17483: PPUSH
17484: LD_INT 5
17486: PPUSH
17487: LD_VAR 0 8
17491: PPUSH
17492: CALL_OW 380
// un = CreateHuman ;
17496: LD_ADDR_VAR 0 15
17500: PUSH
17501: CALL_OW 44
17505: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17506: LD_VAR 0 15
17510: PPUSH
17511: LD_VAR 0 9
17515: PPUSH
17516: LD_INT 0
17518: PPUSH
17519: CALL_OW 49
// end ;
17523: GO 17442
17525: POP
17526: POP
// for i = 1 to bazookCount do
17527: LD_ADDR_VAR 0 13
17531: PUSH
17532: DOUBLE
17533: LD_INT 1
17535: DEC
17536: ST_TO_ADDR
17537: LD_VAR 0 5
17541: PUSH
17542: FOR_TO
17543: IFFALSE 17625
// begin uc_side = side ;
17545: LD_ADDR_OWVAR 20
17549: PUSH
17550: LD_VAR 0 1
17554: ST_TO_ADDR
// uc_nation = nation ;
17555: LD_ADDR_OWVAR 21
17559: PUSH
17560: LD_VAR 0 2
17564: ST_TO_ADDR
// hc_name =  ;
17565: LD_ADDR_OWVAR 26
17569: PUSH
17570: LD_STRING 
17572: ST_TO_ADDR
// hc_gallery =  ;
17573: LD_ADDR_OWVAR 33
17577: PUSH
17578: LD_STRING 
17580: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17581: LD_INT 0
17583: PPUSH
17584: LD_INT 9
17586: PPUSH
17587: LD_VAR 0 8
17591: PPUSH
17592: CALL_OW 380
// un = CreateHuman ;
17596: LD_ADDR_VAR 0 15
17600: PUSH
17601: CALL_OW 44
17605: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17606: LD_VAR 0 15
17610: PPUSH
17611: LD_VAR 0 9
17615: PPUSH
17616: LD_INT 0
17618: PPUSH
17619: CALL_OW 49
// end ;
17623: GO 17542
17625: POP
17626: POP
// for i = 1 to mortalCount do
17627: LD_ADDR_VAR 0 13
17631: PUSH
17632: DOUBLE
17633: LD_INT 1
17635: DEC
17636: ST_TO_ADDR
17637: LD_VAR 0 6
17641: PUSH
17642: FOR_TO
17643: IFFALSE 17725
// begin uc_side = side ;
17645: LD_ADDR_OWVAR 20
17649: PUSH
17650: LD_VAR 0 1
17654: ST_TO_ADDR
// uc_nation = nation ;
17655: LD_ADDR_OWVAR 21
17659: PUSH
17660: LD_VAR 0 2
17664: ST_TO_ADDR
// hc_name =  ;
17665: LD_ADDR_OWVAR 26
17669: PUSH
17670: LD_STRING 
17672: ST_TO_ADDR
// hc_gallery =  ;
17673: LD_ADDR_OWVAR 33
17677: PUSH
17678: LD_STRING 
17680: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17681: LD_INT 0
17683: PPUSH
17684: LD_INT 8
17686: PPUSH
17687: LD_VAR 0 8
17691: PPUSH
17692: CALL_OW 380
// un = CreateHuman ;
17696: LD_ADDR_VAR 0 15
17700: PUSH
17701: CALL_OW 44
17705: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17706: LD_VAR 0 15
17710: PPUSH
17711: LD_VAR 0 9
17715: PPUSH
17716: LD_INT 0
17718: PPUSH
17719: CALL_OW 49
// end ;
17723: GO 17642
17725: POP
17726: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17727: LD_ADDR_VAR 0 18
17731: PUSH
17732: LD_INT 22
17734: PUSH
17735: LD_VAR 0 1
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 2
17746: PUSH
17747: LD_INT 25
17749: PUSH
17750: LD_INT 1
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 25
17759: PUSH
17760: LD_INT 5
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 25
17769: PUSH
17770: LD_INT 8
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 25
17779: PUSH
17780: LD_INT 9
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PPUSH
17798: CALL_OW 69
17802: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17803: LD_ADDR_VAR 0 17
17807: PUSH
17808: LD_INT 22
17810: PUSH
17811: LD_VAR 0 1
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 25
17822: PUSH
17823: LD_INT 4
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PPUSH
17834: CALL_OW 69
17838: ST_TO_ADDR
// for i in medic_list do
17839: LD_ADDR_VAR 0 13
17843: PUSH
17844: LD_VAR 0 17
17848: PUSH
17849: FOR_IN
17850: IFFALSE 17868
// ComMoveToArea ( i , healArea ) ;
17852: LD_VAR 0 13
17856: PPUSH
17857: LD_VAR 0 10
17861: PPUSH
17862: CALL_OW 113
17866: GO 17849
17868: POP
17869: POP
// repeat wait ( 0 0$1 ) ;
17870: LD_INT 35
17872: PPUSH
17873: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17877: LD_ADDR_VAR 0 16
17881: PUSH
17882: LD_INT 22
17884: PUSH
17885: LD_VAR 0 1
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 1
17896: PUSH
17897: LD_INT 3
17899: PUSH
17900: LD_INT 24
17902: PUSH
17903: LD_INT 550
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 24
17916: PUSH
17917: LD_INT 250
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PPUSH
17933: CALL_OW 69
17937: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17938: LD_ADDR_VAR 0 18
17942: PUSH
17943: LD_INT 22
17945: PUSH
17946: LD_VAR 0 1
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: LD_INT 2
17957: PUSH
17958: LD_INT 25
17960: PUSH
17961: LD_INT 1
17963: PUSH
17964: EMPTY
17965: LIST
17966: LIST
17967: PUSH
17968: LD_INT 25
17970: PUSH
17971: LD_INT 5
17973: PUSH
17974: EMPTY
17975: LIST
17976: LIST
17977: PUSH
17978: LD_INT 25
17980: PUSH
17981: LD_INT 8
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 25
17990: PUSH
17991: LD_INT 9
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: PUSH
18005: LD_INT 24
18007: PUSH
18008: LD_INT 1000
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: LIST
18019: PPUSH
18020: CALL_OW 69
18024: ST_TO_ADDR
// if medicCount > 0 then
18025: LD_VAR 0 7
18029: PUSH
18030: LD_INT 0
18032: GREATER
18033: IFFALSE 18107
// begin if damageUnit_list > 0 then
18035: LD_VAR 0 16
18039: PUSH
18040: LD_INT 0
18042: GREATER
18043: IFFALSE 18107
// begin for i in damageUnit_list do
18045: LD_ADDR_VAR 0 13
18049: PUSH
18050: LD_VAR 0 16
18054: PUSH
18055: FOR_IN
18056: IFFALSE 18105
// begin ComMoveToArea ( i , healArea ) ;
18058: LD_VAR 0 13
18062: PPUSH
18063: LD_VAR 0 10
18067: PPUSH
18068: CALL_OW 113
// for j in medic_list do
18072: LD_ADDR_VAR 0 14
18076: PUSH
18077: LD_VAR 0 17
18081: PUSH
18082: FOR_IN
18083: IFFALSE 18101
// AddComHeal ( j , i ) ;
18085: LD_VAR 0 14
18089: PPUSH
18090: LD_VAR 0 13
18094: PPUSH
18095: CALL_OW 188
18099: GO 18082
18101: POP
18102: POP
// end ;
18103: GO 18055
18105: POP
18106: POP
// end ; end ; for i in soldiersOK_list do
18107: LD_ADDR_VAR 0 13
18111: PUSH
18112: LD_VAR 0 18
18116: PUSH
18117: FOR_IN
18118: IFFALSE 18294
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18120: LD_ADDR_VAR 0 21
18124: PUSH
18125: LD_INT 22
18127: PUSH
18128: LD_VAR 0 11
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_VAR 0 13
18146: PPUSH
18147: CALL_OW 74
18151: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18152: LD_ADDR_VAR 0 22
18156: PUSH
18157: LD_INT 22
18159: PUSH
18160: LD_VAR 0 11
18164: PUSH
18165: EMPTY
18166: LIST
18167: LIST
18168: PUSH
18169: LD_INT 2
18171: PUSH
18172: LD_INT 59
18174: PUSH
18175: EMPTY
18176: LIST
18177: PUSH
18178: LD_INT 21
18180: PUSH
18181: LD_INT 1
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: LD_INT 21
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: EMPTY
18195: LIST
18196: LIST
18197: PUSH
18198: EMPTY
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: EMPTY
18209: LIST
18210: PPUSH
18211: CALL_OW 69
18215: PPUSH
18216: LD_VAR 0 13
18220: PPUSH
18221: CALL_OW 74
18225: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18226: LD_VAR 0 13
18230: PPUSH
18231: LD_VAR 0 21
18235: PPUSH
18236: CALL_OW 296
18240: PUSH
18241: LD_INT 8
18243: PLUS
18244: PUSH
18245: LD_VAR 0 13
18249: PPUSH
18250: LD_VAR 0 22
18254: PPUSH
18255: CALL_OW 296
18259: LESS
18260: IFFALSE 18278
// begin ComAttackUnit ( i , target1 ) ;
18262: LD_VAR 0 13
18266: PPUSH
18267: LD_VAR 0 21
18271: PPUSH
18272: CALL_OW 115
// end else
18276: GO 18292
// begin ComAttackUnit ( i , target2 ) ;
18278: LD_VAR 0 13
18282: PPUSH
18283: LD_VAR 0 22
18287: PPUSH
18288: CALL_OW 115
// end ; end ;
18292: GO 18117
18294: POP
18295: POP
// for i in soldiersOK_list do
18296: LD_ADDR_VAR 0 13
18300: PUSH
18301: LD_VAR 0 18
18305: PUSH
18306: FOR_IN
18307: IFFALSE 18483
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18309: LD_ADDR_VAR 0 21
18313: PUSH
18314: LD_INT 22
18316: PUSH
18317: LD_VAR 0 11
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PPUSH
18326: CALL_OW 69
18330: PPUSH
18331: LD_VAR 0 13
18335: PPUSH
18336: CALL_OW 74
18340: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18341: LD_ADDR_VAR 0 22
18345: PUSH
18346: LD_INT 22
18348: PUSH
18349: LD_VAR 0 11
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 2
18360: PUSH
18361: LD_INT 59
18363: PUSH
18364: EMPTY
18365: LIST
18366: PUSH
18367: LD_INT 21
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 21
18379: PUSH
18380: LD_INT 2
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: EMPTY
18398: LIST
18399: PPUSH
18400: CALL_OW 69
18404: PPUSH
18405: LD_VAR 0 13
18409: PPUSH
18410: CALL_OW 74
18414: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18415: LD_VAR 0 13
18419: PPUSH
18420: LD_VAR 0 21
18424: PPUSH
18425: CALL_OW 296
18429: PUSH
18430: LD_INT 8
18432: PLUS
18433: PUSH
18434: LD_VAR 0 13
18438: PPUSH
18439: LD_VAR 0 22
18443: PPUSH
18444: CALL_OW 296
18448: LESS
18449: IFFALSE 18467
// begin ComAttackUnit ( i , target1 ) ;
18451: LD_VAR 0 13
18455: PPUSH
18456: LD_VAR 0 21
18460: PPUSH
18461: CALL_OW 115
// end else
18465: GO 18481
// begin ComAttackUnit ( i , target2 ) ;
18467: LD_VAR 0 13
18471: PPUSH
18472: LD_VAR 0 22
18476: PPUSH
18477: CALL_OW 115
// end ; end ;
18481: GO 18306
18483: POP
18484: POP
// until soldiersOK_list = [ ] ;
18485: LD_VAR 0 18
18489: PUSH
18490: EMPTY
18491: EQUAL
18492: IFFALSE 17870
// end ;
18494: LD_VAR 0 12
18498: RET
// export function TameApemans ; var i , j ; begin
18499: LD_INT 0
18501: PPUSH
18502: PPUSH
18503: PPUSH
// repeat wait ( 0 0$1 ) ;
18504: LD_INT 35
18506: PPUSH
18507: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18511: LD_ADDR_VAR 0 2
18515: PUSH
18516: LD_INT 22
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PUSH
18526: LD_INT 25
18528: PUSH
18529: LD_INT 4
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PPUSH
18540: CALL_OW 69
18544: PUSH
18545: FOR_IN
18546: IFFALSE 18623
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18548: LD_ADDR_VAR 0 3
18552: PUSH
18553: LD_INT 5
18555: PPUSH
18556: LD_INT 22
18558: PUSH
18559: LD_INT 0
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 25
18568: PUSH
18569: LD_INT 12
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PPUSH
18580: CALL_OW 70
18584: PUSH
18585: FOR_IN
18586: IFFALSE 18619
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18588: LD_VAR 0 2
18592: PPUSH
18593: LD_VAR 0 3
18597: PPUSH
18598: CALL_OW 250
18602: PPUSH
18603: LD_VAR 0 3
18607: PPUSH
18608: CALL_OW 251
18612: PPUSH
18613: CALL_OW 191
// end ;
18617: GO 18585
18619: POP
18620: POP
// end ;
18621: GO 18545
18623: POP
18624: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18625: LD_INT 22
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 4
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: PUSH
18654: LD_INT 0
18656: EQUAL
18657: PUSH
18658: LD_INT 5
18660: PPUSH
18661: LD_INT 22
18663: PUSH
18664: LD_INT 0
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PUSH
18671: LD_INT 25
18673: PUSH
18674: LD_INT 12
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PPUSH
18685: CALL_OW 70
18689: PUSH
18690: LD_INT 0
18692: EQUAL
18693: OR
18694: IFFALSE 18504
// wait ( 0 0$30 ) ;
18696: LD_INT 1050
18698: PPUSH
18699: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18703: LD_ADDR_VAR 0 2
18707: PUSH
18708: LD_INT 22
18710: PUSH
18711: LD_INT 2
18713: PUSH
18714: EMPTY
18715: LIST
18716: LIST
18717: PUSH
18718: LD_INT 25
18720: PUSH
18721: LD_INT 12
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PUSH
18728: EMPTY
18729: LIST
18730: LIST
18731: PPUSH
18732: CALL_OW 69
18736: PUSH
18737: FOR_IN
18738: IFFALSE 18802
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18740: LD_VAR 0 2
18744: PPUSH
18745: LD_EXP 43
18749: PPUSH
18750: CALL_OW 250
18754: PPUSH
18755: LD_EXP 43
18759: PPUSH
18760: CALL_OW 251
18764: PPUSH
18765: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: LD_INT 16
18776: PUSH
18777: LD_INT 15
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: PUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_INT 2
18789: PPUSH
18790: CALL_OW 12
18794: ARRAY
18795: PPUSH
18796: CALL_OW 336
// end ;
18800: GO 18737
18802: POP
18803: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18804: LD_ADDR_VAR 0 2
18808: PUSH
18809: LD_INT 22
18811: PUSH
18812: LD_INT 2
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PUSH
18819: LD_INT 25
18821: PUSH
18822: LD_INT 4
18824: PUSH
18825: EMPTY
18826: LIST
18827: LIST
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: PPUSH
18833: CALL_OW 69
18837: PUSH
18838: FOR_IN
18839: IFFALSE 18885
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18841: LD_VAR 0 2
18845: PPUSH
18846: LD_INT 22
18848: PUSH
18849: LD_INT 2
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 30
18858: PUSH
18859: LD_INT 8
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PPUSH
18870: CALL_OW 69
18874: PUSH
18875: LD_INT 1
18877: ARRAY
18878: PPUSH
18879: CALL_OW 120
18883: GO 18838
18885: POP
18886: POP
// end ;
18887: LD_VAR 0 1
18891: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18892: LD_INT 0
18894: PPUSH
18895: PPUSH
18896: PPUSH
18897: PPUSH
18898: PPUSH
18899: PPUSH
18900: PPUSH
18901: PPUSH
18902: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18903: LD_INT 22
18905: PUSH
18906: LD_VAR 0 1
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: LD_INT 21
18917: PUSH
18918: LD_INT 2
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: PPUSH
18929: CALL_OW 69
18933: PUSH
18934: LD_VAR 0 3
18938: LESSEQUAL
18939: IFFALSE 19083
// for i = 1 to vehCount do
18941: LD_ADDR_VAR 0 10
18945: PUSH
18946: DOUBLE
18947: LD_INT 1
18949: DEC
18950: ST_TO_ADDR
18951: LD_VAR 0 3
18955: PUSH
18956: FOR_TO
18957: IFFALSE 19081
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18959: LD_ADDR_VAR 0 12
18963: PUSH
18964: LD_VAR 0 5
18968: PUSH
18969: LD_INT 1
18971: PPUSH
18972: LD_VAR 0 5
18976: PPUSH
18977: CALL_OW 12
18981: ARRAY
18982: ST_TO_ADDR
// if randWeapon = 46 then
18983: LD_VAR 0 12
18987: PUSH
18988: LD_INT 46
18990: EQUAL
18991: IFFALSE 19036
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 24
19000: PPUSH
19001: LD_VAR 0 6
19005: PPUSH
19006: LD_VAR 0 7
19010: PUSH
19011: LD_INT 1
19013: PPUSH
19014: LD_VAR 0 7
19018: PPUSH
19019: CALL_OW 12
19023: ARRAY
19024: PPUSH
19025: LD_VAR 0 12
19029: PPUSH
19030: CALL_OW 185
19034: GO 19079
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_VAR 0 8
19045: PPUSH
19046: LD_VAR 0 6
19050: PPUSH
19051: LD_VAR 0 7
19055: PUSH
19056: LD_INT 1
19058: PPUSH
19059: LD_VAR 0 7
19063: PPUSH
19064: CALL_OW 12
19068: ARRAY
19069: PPUSH
19070: LD_VAR 0 12
19074: PPUSH
19075: CALL_OW 185
// end ;
19079: GO 18956
19081: POP
19082: POP
// repeat wait ( 0 0$1 ) ;
19083: LD_INT 35
19085: PPUSH
19086: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19090: LD_INT 22
19092: PUSH
19093: LD_VAR 0 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 21
19104: PUSH
19105: LD_INT 2
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: PUSH
19112: LD_INT 24
19114: PUSH
19115: LD_INT 250
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: LIST
19126: PPUSH
19127: CALL_OW 69
19131: PUSH
19132: LD_VAR 0 3
19136: GREATEREQUAL
19137: IFFALSE 19083
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19139: LD_INT 22
19141: PUSH
19142: LD_VAR 0 1
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 21
19153: PUSH
19154: LD_INT 2
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: LD_INT 24
19163: PUSH
19164: LD_INT 250
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: LIST
19175: PPUSH
19176: CALL_OW 69
19180: PUSH
19181: LD_VAR 0 3
19185: GREATEREQUAL
19186: IFFALSE 19529
// begin repeat begin wait ( 0 0$1 ) ;
19188: LD_INT 35
19190: PPUSH
19191: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19195: LD_INT 22
19197: PUSH
19198: LD_VAR 0 1
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 21
19209: PUSH
19210: LD_INT 2
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 24
19219: PUSH
19220: LD_INT 651
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: PUSH
19237: LD_INT 0
19239: GREATER
19240: IFFALSE 19468
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19242: LD_ADDR_VAR 0 10
19246: PUSH
19247: LD_INT 22
19249: PUSH
19250: LD_VAR 0 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 24
19271: PUSH
19272: LD_INT 651
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: LIST
19283: PPUSH
19284: CALL_OW 69
19288: PUSH
19289: FOR_IN
19290: IFFALSE 19466
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19292: LD_ADDR_VAR 0 16
19296: PUSH
19297: LD_INT 22
19299: PUSH
19300: LD_VAR 0 4
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: PPUSH
19309: CALL_OW 69
19313: PPUSH
19314: LD_VAR 0 10
19318: PPUSH
19319: CALL_OW 74
19323: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19324: LD_ADDR_VAR 0 17
19328: PUSH
19329: LD_INT 22
19331: PUSH
19332: LD_VAR 0 4
19336: PUSH
19337: EMPTY
19338: LIST
19339: LIST
19340: PUSH
19341: LD_INT 2
19343: PUSH
19344: LD_INT 59
19346: PUSH
19347: EMPTY
19348: LIST
19349: PUSH
19350: LD_INT 21
19352: PUSH
19353: LD_INT 1
19355: PUSH
19356: EMPTY
19357: LIST
19358: LIST
19359: PUSH
19360: LD_INT 21
19362: PUSH
19363: LD_INT 2
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: EMPTY
19381: LIST
19382: PPUSH
19383: CALL_OW 69
19387: PPUSH
19388: LD_VAR 0 10
19392: PPUSH
19393: CALL_OW 74
19397: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19398: LD_VAR 0 10
19402: PPUSH
19403: LD_VAR 0 16
19407: PPUSH
19408: CALL_OW 296
19412: PUSH
19413: LD_INT 8
19415: PLUS
19416: PUSH
19417: LD_VAR 0 10
19421: PPUSH
19422: LD_VAR 0 17
19426: PPUSH
19427: CALL_OW 296
19431: LESS
19432: IFFALSE 19450
// begin ComAttackUnit ( i , target1 ) ;
19434: LD_VAR 0 10
19438: PPUSH
19439: LD_VAR 0 16
19443: PPUSH
19444: CALL_OW 115
// end else
19448: GO 19464
// begin ComAttackUnit ( i , target2 ) ;
19450: LD_VAR 0 10
19454: PPUSH
19455: LD_VAR 0 17
19459: PPUSH
19460: CALL_OW 115
// end ; end ;
19464: GO 19289
19466: POP
19467: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19468: LD_INT 22
19470: PUSH
19471: LD_VAR 0 1
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 21
19482: PUSH
19483: LD_INT 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PPUSH
19494: CALL_OW 69
19498: PUSH
19499: LD_INT 0
19501: EQUAL
19502: PUSH
19503: LD_INT 22
19505: PUSH
19506: LD_VAR 0 4
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: PUSH
19523: LD_INT 0
19525: EQUAL
19526: OR
19527: IFFALSE 19188
// end ; end ;
19529: LD_VAR 0 9
19533: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19534: LD_INT 0
19536: PPUSH
19537: PPUSH
19538: PPUSH
19539: PPUSH
// r := 100 ;
19540: LD_ADDR_VAR 0 5
19544: PUSH
19545: LD_INT 100
19547: ST_TO_ADDR
// x := 0 ;
19548: LD_ADDR_VAR 0 6
19552: PUSH
19553: LD_INT 0
19555: ST_TO_ADDR
// while ( x < n ) do
19556: LD_VAR 0 6
19560: PUSH
19561: LD_VAR 0 2
19565: LESS
19566: IFFALSE 19853
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19568: LD_ADDR_VAR 0 4
19572: PUSH
19573: DOUBLE
19574: LD_INT 1
19576: DEC
19577: ST_TO_ADDR
19578: LD_VAR 0 1
19582: PPUSH
19583: LD_INT 0
19585: PPUSH
19586: CALL_OW 517
19590: PUSH
19591: LD_INT 1
19593: ARRAY
19594: PUSH
19595: FOR_TO
19596: IFFALSE 19849
// begin if r > 50 then
19598: LD_VAR 0 5
19602: PUSH
19603: LD_INT 50
19605: GREATER
19606: IFFALSE 19825
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19608: LD_VAR 0 1
19612: PPUSH
19613: LD_INT 0
19615: PPUSH
19616: CALL_OW 517
19620: PUSH
19621: LD_INT 1
19623: ARRAY
19624: PUSH
19625: LD_VAR 0 4
19629: ARRAY
19630: PPUSH
19631: LD_VAR 0 1
19635: PPUSH
19636: LD_INT 0
19638: PPUSH
19639: CALL_OW 517
19643: PUSH
19644: LD_INT 2
19646: ARRAY
19647: PUSH
19648: LD_VAR 0 4
19652: ARRAY
19653: PPUSH
19654: CALL_OW 458
19658: NOT
19659: IFFALSE 19809
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19661: LD_VAR 0 1
19665: PPUSH
19666: LD_INT 0
19668: PPUSH
19669: CALL_OW 517
19673: PUSH
19674: LD_INT 1
19676: ARRAY
19677: PUSH
19678: LD_VAR 0 4
19682: ARRAY
19683: PPUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_INT 0
19691: PPUSH
19692: CALL_OW 517
19696: PUSH
19697: LD_INT 2
19699: ARRAY
19700: PUSH
19701: LD_VAR 0 4
19705: ARRAY
19706: PPUSH
19707: LD_INT 5
19709: PPUSH
19710: LD_INT 0
19712: PPUSH
19713: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19717: LD_ADDR_EXP 50
19721: PUSH
19722: LD_EXP 50
19726: PPUSH
19727: LD_INT 1
19729: PPUSH
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_INT 0
19737: PPUSH
19738: CALL_OW 517
19742: PUSH
19743: LD_INT 1
19745: ARRAY
19746: PUSH
19747: LD_VAR 0 4
19751: ARRAY
19752: PUSH
19753: LD_VAR 0 1
19757: PPUSH
19758: LD_INT 0
19760: PPUSH
19761: CALL_OW 517
19765: PUSH
19766: LD_INT 2
19768: ARRAY
19769: PUSH
19770: LD_VAR 0 4
19774: ARRAY
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PPUSH
19780: CALL_OW 2
19784: ST_TO_ADDR
// r := 0 ;
19785: LD_ADDR_VAR 0 5
19789: PUSH
19790: LD_INT 0
19792: ST_TO_ADDR
// x := x + 1 ;
19793: LD_ADDR_VAR 0 6
19797: PUSH
19798: LD_VAR 0 6
19802: PUSH
19803: LD_INT 1
19805: PLUS
19806: ST_TO_ADDR
// end else
19807: GO 19823
// r := r + 35 ;
19809: LD_ADDR_VAR 0 5
19813: PUSH
19814: LD_VAR 0 5
19818: PUSH
19819: LD_INT 35
19821: PLUS
19822: ST_TO_ADDR
// end else
19823: GO 19847
// r := r + rand ( 10 , 25 ) ;
19825: LD_ADDR_VAR 0 5
19829: PUSH
19830: LD_VAR 0 5
19834: PUSH
19835: LD_INT 10
19837: PPUSH
19838: LD_INT 25
19840: PPUSH
19841: CALL_OW 12
19845: PLUS
19846: ST_TO_ADDR
// end ;
19847: GO 19595
19849: POP
19850: POP
19851: GO 19556
// end ; end_of_file
19853: LD_VAR 0 3
19857: RET
// every 0 0$1 trigger russianAI = 1 do
19858: LD_EXP 39
19862: PUSH
19863: LD_INT 1
19865: EQUAL
19866: IFFALSE 20085
19868: GO 19870
19870: DISABLE
// begin enable ;
19871: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19872: LD_INT 3
19874: PPUSH
19875: LD_EXP 30
19879: PPUSH
19880: CALL 14496 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19884: LD_INT 3
19886: PPUSH
19887: LD_EXP 42
19891: PPUSH
19892: CALL 14856 0 2
// if ruPossition = 1 then
19896: LD_EXP 41
19900: PUSH
19901: LD_INT 1
19903: EQUAL
19904: IFFALSE 19959
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19906: LD_INT 3
19908: PPUSH
19909: LD_INT 13
19911: PPUSH
19912: LD_INT 10
19914: PPUSH
19915: LD_INT 22
19917: PUSH
19918: LD_INT 3
19920: PUSH
19921: EMPTY
19922: LIST
19923: LIST
19924: PUSH
19925: LD_INT 21
19927: PUSH
19928: LD_INT 3
19930: PUSH
19931: EMPTY
19932: LIST
19933: LIST
19934: PUSH
19935: LD_INT 30
19937: PUSH
19938: LD_INT 8
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 69
19954: PPUSH
19955: CALL 15062 0 4
// if ruPossition = 2 then
19959: LD_EXP 41
19963: PUSH
19964: LD_INT 2
19966: EQUAL
19967: IFFALSE 20022
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19969: LD_INT 3
19971: PPUSH
19972: LD_INT 14
19974: PPUSH
19975: LD_INT 11
19977: PPUSH
19978: LD_INT 22
19980: PUSH
19981: LD_INT 3
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 21
19990: PUSH
19991: LD_INT 3
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 30
20000: PUSH
20001: LD_INT 8
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: PPUSH
20013: CALL_OW 69
20017: PPUSH
20018: CALL 15062 0 4
// if ruPossition = 3 then
20022: LD_EXP 41
20026: PUSH
20027: LD_INT 3
20029: EQUAL
20030: IFFALSE 20085
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20032: LD_INT 3
20034: PPUSH
20035: LD_INT 15
20037: PPUSH
20038: LD_INT 12
20040: PPUSH
20041: LD_INT 22
20043: PUSH
20044: LD_INT 3
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 21
20053: PUSH
20054: LD_INT 3
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: LD_INT 30
20063: PUSH
20064: LD_INT 8
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: LIST
20075: PPUSH
20076: CALL_OW 69
20080: PPUSH
20081: CALL 15062 0 4
// end ;
20085: END
// every 0 0$1 do
20086: GO 20088
20088: DISABLE
// begin enable ;
20089: ENABLE
// if ruPossition = 1 then
20090: LD_EXP 41
20094: PUSH
20095: LD_INT 1
20097: EQUAL
20098: IFFALSE 20110
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20100: LD_INT 3
20102: PPUSH
20103: LD_INT 10
20105: PPUSH
20106: CALL 14133 0 2
// if ruPossition = 2 then
20110: LD_EXP 41
20114: PUSH
20115: LD_INT 2
20117: EQUAL
20118: IFFALSE 20130
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20120: LD_INT 3
20122: PPUSH
20123: LD_INT 11
20125: PPUSH
20126: CALL 14133 0 2
// if ruPossition = 3 then
20130: LD_EXP 41
20134: PUSH
20135: LD_INT 3
20137: EQUAL
20138: IFFALSE 20150
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 12
20145: PPUSH
20146: CALL 14133 0 2
// IntBazooka ( 3 , 1 ) ;
20150: LD_INT 3
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: CALL 12952 0 2
// IntBazooka ( 6 , 1 ) ;
20160: LD_INT 6
20162: PPUSH
20163: LD_INT 1
20165: PPUSH
20166: CALL 12952 0 2
// end ;
20170: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20171: LD_EXP 39
20175: PUSH
20176: LD_INT 1
20178: EQUAL
20179: PUSH
20180: LD_EXP 35
20184: PPUSH
20185: CALL_OW 302
20189: AND
20190: PUSH
20191: LD_EXP 35
20195: PPUSH
20196: CALL_OW 255
20200: PUSH
20201: LD_INT 3
20203: EQUAL
20204: AND
20205: PUSH
20206: LD_INT 22
20208: PUSH
20209: LD_INT 3
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: PUSH
20216: LD_INT 21
20218: PUSH
20219: LD_INT 2
20221: PUSH
20222: EMPTY
20223: LIST
20224: LIST
20225: PUSH
20226: LD_INT 33
20228: PUSH
20229: LD_INT 3
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: EMPTY
20237: LIST
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: PUSH
20246: LD_INT 0
20248: EQUAL
20249: AND
20250: IFFALSE 20458
20252: GO 20254
20254: DISABLE
// begin enable ;
20255: ENABLE
// if Difficulty = 1 then
20256: LD_OWVAR 67
20260: PUSH
20261: LD_INT 1
20263: EQUAL
20264: IFFALSE 20326
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20266: LD_INT 3
20268: PPUSH
20269: LD_EXP 35
20273: PPUSH
20274: LD_INT 5
20276: PPUSH
20277: LD_INT 8
20279: PPUSH
20280: CALL_OW 12
20284: PPUSH
20285: LD_INT 1
20287: PPUSH
20288: LD_INT 43
20290: PUSH
20291: LD_INT 44
20293: PUSH
20294: LD_INT 45
20296: PUSH
20297: LD_INT 46
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PPUSH
20306: LD_INT 1
20308: PPUSH
20309: LD_INT 1
20311: PUSH
20312: LD_INT 3
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: LD_INT 22
20321: PPUSH
20322: CALL 18892 0 8
// if Difficulty = 2 then
20326: LD_OWVAR 67
20330: PUSH
20331: LD_INT 2
20333: EQUAL
20334: IFFALSE 20392
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20336: LD_INT 3
20338: PPUSH
20339: LD_EXP 35
20343: PPUSH
20344: LD_INT 6
20346: PPUSH
20347: LD_INT 8
20349: PPUSH
20350: CALL_OW 12
20354: PPUSH
20355: LD_INT 1
20357: PPUSH
20358: LD_INT 44
20360: PUSH
20361: LD_INT 45
20363: PUSH
20364: LD_INT 46
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: PPUSH
20372: LD_INT 1
20374: PPUSH
20375: LD_INT 1
20377: PUSH
20378: LD_INT 3
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: PPUSH
20385: LD_INT 22
20387: PPUSH
20388: CALL 18892 0 8
// if Difficulty = 3 then
20392: LD_OWVAR 67
20396: PUSH
20397: LD_INT 3
20399: EQUAL
20400: IFFALSE 20458
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20402: LD_INT 3
20404: PPUSH
20405: LD_EXP 35
20409: PPUSH
20410: LD_INT 7
20412: PPUSH
20413: LD_INT 8
20415: PPUSH
20416: CALL_OW 12
20420: PPUSH
20421: LD_INT 1
20423: PPUSH
20424: LD_INT 44
20426: PUSH
20427: LD_INT 45
20429: PUSH
20430: LD_INT 46
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: PPUSH
20438: LD_INT 1
20440: PPUSH
20441: LD_INT 1
20443: PUSH
20444: LD_INT 3
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PPUSH
20451: LD_INT 22
20453: PPUSH
20454: CALL 18892 0 8
// end ;
20458: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20459: LD_EXP 50
20463: PUSH
20464: LD_EXP 49
20468: AND
20469: IFFALSE 20590
20471: GO 20473
20473: DISABLE
20474: LD_INT 0
20476: PPUSH
// begin enable ;
20477: ENABLE
// for i in arabianMines do
20478: LD_ADDR_VAR 0 1
20482: PUSH
20483: LD_EXP 50
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20588
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20491: LD_INT 22
20493: PUSH
20494: LD_INT 1
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 92
20503: PUSH
20504: LD_VAR 0 1
20508: PUSH
20509: LD_INT 1
20511: ARRAY
20512: PUSH
20513: LD_VAR 0 1
20517: PUSH
20518: LD_INT 2
20520: ARRAY
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 69
20539: IFFALSE 20586
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20541: LD_VAR 0 1
20545: PUSH
20546: LD_INT 1
20548: ARRAY
20549: PPUSH
20550: LD_VAR 0 1
20554: PUSH
20555: LD_INT 2
20557: ARRAY
20558: PPUSH
20559: LD_INT 5
20561: PPUSH
20562: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20566: LD_ADDR_EXP 50
20570: PUSH
20571: LD_EXP 50
20575: PPUSH
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 3
20585: ST_TO_ADDR
// end ; end ;
20586: GO 20488
20588: POP
20589: POP
// end ; end_of_file
20590: PPOPN 1
20592: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20593: LD_VAR 0 1
20597: PPUSH
20598: CALL_OW 255
20602: PUSH
20603: LD_INT 4
20605: EQUAL
20606: IFFALSE 20620
// SetBName ( building , epsilon ) ;
20608: LD_VAR 0 1
20612: PPUSH
20613: LD_STRING epsilon
20615: PPUSH
20616: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20620: LD_VAR 0 1
20624: PPUSH
20625: CALL_OW 255
20629: PUSH
20630: LD_INT 1
20632: EQUAL
20633: PUSH
20634: LD_VAR 0 1
20638: PPUSH
20639: CALL_OW 266
20643: PUSH
20644: LD_INT 0
20646: EQUAL
20647: AND
20648: IFFALSE 20662
// SetBName ( building , epsilon ) ;
20650: LD_VAR 0 1
20654: PPUSH
20655: LD_STRING epsilon
20657: PPUSH
20658: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20662: LD_VAR 0 1
20666: PPUSH
20667: CALL_OW 255
20671: PUSH
20672: LD_INT 3
20674: EQUAL
20675: PUSH
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 266
20685: PUSH
20686: LD_INT 0
20688: EQUAL
20689: AND
20690: IFFALSE 20704
// SetBName ( building , chuikov ) ;
20692: LD_VAR 0 1
20696: PPUSH
20697: LD_STRING chuikov
20699: PPUSH
20700: CALL_OW 500
// if GetSide ( building ) = 2 then
20704: LD_VAR 0 1
20708: PPUSH
20709: CALL_OW 255
20713: PUSH
20714: LD_INT 2
20716: EQUAL
20717: IFFALSE 20773
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20719: LD_VAR 0 1
20723: PPUSH
20724: CALL_OW 266
20728: PUSH
20729: LD_INT 6
20731: EQUAL
20732: PUSH
20733: LD_VAR 0 1
20737: PPUSH
20738: CALL_OW 266
20742: PUSH
20743: LD_INT 9
20745: EQUAL
20746: OR
20747: IFFALSE 20773
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20749: LD_VAR 0 1
20753: PPUSH
20754: LD_INT 10
20756: PPUSH
20757: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20761: LD_VAR 0 1
20765: PPUSH
20766: LD_INT 11
20768: PPUSH
20769: CALL_OW 207
// end ; end ; end ;
20773: PPOPN 2
20775: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20776: LD_INT 0
20778: PPUSH
20779: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20780: LD_VAR 0 1
20784: PUSH
20785: LD_INT 22
20787: PUSH
20788: LD_INT 3
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 23
20797: PUSH
20798: LD_INT 3
20800: PUSH
20801: EMPTY
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 21
20807: PUSH
20808: LD_INT 2
20810: PUSH
20811: EMPTY
20812: LIST
20813: LIST
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: PPUSH
20820: CALL_OW 69
20824: IN
20825: PUSH
20826: LD_EXP 58
20830: NOT
20831: AND
20832: IFFALSE 20863
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20834: LD_ADDR_EXP 58
20838: PUSH
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL_OW 250
20848: PUSH
20849: LD_VAR 0 1
20853: PPUSH
20854: CALL_OW 251
20858: PUSH
20859: EMPTY
20860: LIST
20861: LIST
20862: ST_TO_ADDR
// end ;
20863: PPOPN 3
20865: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20866: LD_VAR 0 2
20870: PPUSH
20871: CALL_OW 255
20875: PUSH
20876: LD_INT 3
20878: EQUAL
20879: PUSH
20880: LD_EXP 35
20884: PPUSH
20885: CALL_OW 255
20889: PUSH
20890: LD_INT 3
20892: EQUAL
20893: AND
20894: PUSH
20895: LD_EXP 35
20899: PPUSH
20900: CALL_OW 302
20904: AND
20905: IFFALSE 20921
// ComEnterUnit ( human , ruFab ) ;
20907: LD_VAR 0 2
20911: PPUSH
20912: LD_EXP 35
20916: PPUSH
20917: CALL_OW 120
// end ;
20921: PPOPN 2
20923: END
// on BuildingComplete ( building ) do var i ;
20924: LD_INT 0
20926: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 255
20936: PUSH
20937: LD_INT 1
20939: EQUAL
20940: PUSH
20941: LD_EXP 61
20945: PUSH
20946: LD_INT 0
20948: EQUAL
20949: AND
20950: IFFALSE 21152
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 266
20961: PUSH
20962: LD_INT 26
20964: EQUAL
20965: PUSH
20966: LD_VAR 0 1
20970: PPUSH
20971: CALL_OW 266
20975: PUSH
20976: LD_INT 27
20978: EQUAL
20979: OR
20980: PUSH
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 266
20990: PUSH
20991: LD_INT 28
20993: EQUAL
20994: OR
20995: IFFALSE 21152
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
20997: LD_INT 22
20999: PUSH
21000: LD_INT 1
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: PUSH
21007: LD_INT 2
21009: PUSH
21010: LD_INT 30
21012: PUSH
21013: LD_INT 7
21015: PUSH
21016: EMPTY
21017: LIST
21018: LIST
21019: PUSH
21020: LD_INT 30
21022: PUSH
21023: LD_INT 8
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: LIST
21038: PPUSH
21039: CALL_OW 69
21043: PUSH
21044: LD_INT 0
21046: GREATER
21047: IFFALSE 21152
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21049: LD_ADDR_VAR 0 2
21053: PUSH
21054: LD_INT 22
21056: PUSH
21057: LD_INT 1
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: LD_INT 2
21066: PUSH
21067: LD_INT 30
21069: PUSH
21070: LD_INT 7
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 30
21079: PUSH
21080: LD_INT 8
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: LIST
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: PPUSH
21096: CALL_OW 69
21100: PUSH
21101: FOR_IN
21102: IFFALSE 21150
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21104: LD_VAR 0 2
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 268
21116: PUSH
21117: LD_INT 11
21119: EQUAL
21120: PUSH
21121: LD_VAR 0 2
21125: PPUSH
21126: LD_INT 2
21128: PPUSH
21129: CALL_OW 268
21133: PUSH
21134: LD_INT 11
21136: EQUAL
21137: OR
21138: IFFALSE 21148
// eventVar1 = 1 ;
21140: LD_ADDR_EXP 61
21144: PUSH
21145: LD_INT 1
21147: ST_TO_ADDR
21148: GO 21101
21150: POP
21151: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21152: LD_VAR 0 1
21156: PPUSH
21157: CALL_OW 255
21161: PUSH
21162: LD_INT 3
21164: EQUAL
21165: IFFALSE 21645
// begin if GetBType ( building ) = b_depot then
21167: LD_VAR 0 1
21171: PPUSH
21172: CALL_OW 266
21176: PUSH
21177: LD_INT 0
21179: EQUAL
21180: IFFALSE 21252
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL_OW 274
21191: PPUSH
21192: LD_INT 1
21194: PPUSH
21195: LD_INT 5000
21197: PPUSH
21198: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21202: LD_VAR 0 1
21206: PPUSH
21207: CALL_OW 274
21211: PPUSH
21212: LD_INT 2
21214: PPUSH
21215: LD_INT 5000
21217: PPUSH
21218: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 274
21231: PPUSH
21232: LD_INT 3
21234: PPUSH
21235: LD_INT 5000
21237: PPUSH
21238: CALL_OW 277
// ruDepot = building ;
21242: LD_ADDR_EXP 30
21246: PUSH
21247: LD_VAR 0 1
21251: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 266
21261: PUSH
21262: LD_INT 0
21264: EQUAL
21265: PUSH
21266: LD_VAR 0 1
21270: PPUSH
21271: CALL_OW 266
21275: PUSH
21276: LD_INT 2
21278: EQUAL
21279: OR
21280: PUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 266
21290: PUSH
21291: LD_INT 4
21293: EQUAL
21294: OR
21295: IFFALSE 21306
// ComUpgrade ( building ) ;
21297: LD_VAR 0 1
21301: PPUSH
21302: CALL_OW 146
// if GetBType ( building ) = b_lab then
21306: LD_VAR 0 1
21310: PPUSH
21311: CALL_OW 266
21315: PUSH
21316: LD_INT 6
21318: EQUAL
21319: IFFALSE 21522
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21321: LD_INT 22
21323: PUSH
21324: LD_INT 3
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 30
21333: PUSH
21334: LD_INT 8
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PPUSH
21345: CALL_OW 69
21349: PUSH
21350: LD_INT 0
21352: EQUAL
21353: IFFALSE 21391
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21355: LD_VAR 0 1
21359: PPUSH
21360: LD_INT 10
21362: PPUSH
21363: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21367: LD_VAR 0 1
21371: PPUSH
21372: LD_INT 12
21374: PPUSH
21375: CALL_OW 207
// ruLab1 = building ;
21379: LD_ADDR_EXP 31
21383: PUSH
21384: LD_VAR 0 1
21388: ST_TO_ADDR
// end else
21389: GO 21425
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21391: LD_VAR 0 1
21395: PPUSH
21396: LD_INT 11
21398: PPUSH
21399: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21403: LD_VAR 0 1
21407: PPUSH
21408: LD_INT 14
21410: PPUSH
21411: CALL_OW 207
// ruLab2 = building ;
21415: LD_ADDR_EXP 32
21419: PUSH
21420: LD_VAR 0 1
21424: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21425: LD_INT 3
21427: PPUSH
21428: LD_VAR 0 1
21432: PPUSH
21433: LD_INT 3
21435: PPUSH
21436: CALL 14048 0 3
// if ruDestroyedBuildings > 0 then
21440: LD_EXP 42
21444: PUSH
21445: LD_INT 0
21447: GREATER
21448: IFFALSE 21522
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21450: LD_ADDR_EXP 42
21454: PUSH
21455: LD_EXP 42
21459: PPUSH
21460: LD_INT 1
21462: PPUSH
21463: CALL_OW 3
21467: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21468: LD_ADDR_EXP 42
21472: PUSH
21473: LD_EXP 42
21477: PPUSH
21478: LD_INT 1
21480: PPUSH
21481: CALL_OW 3
21485: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21486: LD_ADDR_EXP 42
21490: PUSH
21491: LD_EXP 42
21495: PPUSH
21496: LD_INT 1
21498: PPUSH
21499: CALL_OW 3
21503: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21504: LD_ADDR_EXP 42
21508: PUSH
21509: LD_EXP 42
21513: PPUSH
21514: LD_INT 1
21516: PPUSH
21517: CALL_OW 3
21521: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21522: LD_VAR 0 1
21526: PPUSH
21527: CALL_OW 266
21531: PUSH
21532: LD_INT 32
21534: EQUAL
21535: IFFALSE 21572
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21537: LD_VAR 0 1
21541: PPUSH
21542: LD_INT 44
21544: PUSH
21545: LD_INT 45
21547: PUSH
21548: LD_INT 46
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: LD_INT 1
21558: PPUSH
21559: LD_INT 3
21561: PPUSH
21562: CALL_OW 12
21566: ARRAY
21567: PPUSH
21568: CALL_OW 208
// if GetBType ( building ) = b_turret then
21572: LD_VAR 0 1
21576: PPUSH
21577: CALL_OW 266
21581: PUSH
21582: LD_INT 33
21584: EQUAL
21585: IFFALSE 21622
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21587: LD_VAR 0 1
21591: PPUSH
21592: LD_INT 44
21594: PUSH
21595: LD_INT 46
21597: PUSH
21598: LD_INT 46
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: LIST
21605: PUSH
21606: LD_INT 1
21608: PPUSH
21609: LD_INT 3
21611: PPUSH
21612: CALL_OW 12
21616: ARRAY
21617: PPUSH
21618: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21622: LD_VAR 0 1
21626: PPUSH
21627: CALL_OW 266
21631: PUSH
21632: LD_INT 24
21634: EQUAL
21635: IFFALSE 21645
// russianAI = 1 ;
21637: LD_ADDR_EXP 39
21641: PUSH
21642: LD_INT 1
21644: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21645: LD_VAR 0 1
21649: PPUSH
21650: CALL_OW 255
21654: PUSH
21655: LD_INT 2
21657: EQUAL
21658: IFFALSE 22216
// begin if GetBType ( building ) = b_depot then
21660: LD_VAR 0 1
21664: PPUSH
21665: CALL_OW 266
21669: PUSH
21670: LD_INT 0
21672: EQUAL
21673: IFFALSE 21759
// begin arDepot = building ;
21675: LD_ADDR_EXP 43
21679: PUSH
21680: LD_VAR 0 1
21684: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21685: LD_INT 38
21687: PUSH
21688: LD_INT 47
21690: PUSH
21691: EMPTY
21692: LIST
21693: LIST
21694: PPUSH
21695: LD_INT 71
21697: PPUSH
21698: LD_INT 19
21700: PPUSH
21701: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21705: LD_VAR 0 1
21709: PPUSH
21710: CALL_OW 274
21714: PPUSH
21715: LD_INT 1
21717: PPUSH
21718: LD_INT 500
21720: PPUSH
21721: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21725: LD_VAR 0 1
21729: PPUSH
21730: CALL_OW 274
21734: PPUSH
21735: LD_INT 3
21737: PPUSH
21738: LD_INT 30
21740: PPUSH
21741: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21745: LD_EXP 26
21749: PPUSH
21750: LD_EXP 43
21754: PPUSH
21755: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21759: LD_VAR 0 1
21763: PPUSH
21764: CALL_OW 266
21768: PUSH
21769: LD_INT 6
21771: EQUAL
21772: PUSH
21773: LD_VAR 0 1
21777: PPUSH
21778: CALL_OW 266
21782: PUSH
21783: LD_INT 9
21785: EQUAL
21786: OR
21787: IFFALSE 21838
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21789: LD_VAR 0 1
21793: PPUSH
21794: LD_INT 10
21796: PPUSH
21797: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21801: LD_VAR 0 1
21805: PPUSH
21806: LD_INT 11
21808: PPUSH
21809: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21813: LD_INT 2
21815: PPUSH
21816: LD_VAR 0 1
21820: PPUSH
21821: LD_INT 2
21823: PPUSH
21824: CALL 14048 0 3
// arLab = building ;
21828: LD_ADDR_EXP 44
21832: PUSH
21833: LD_VAR 0 1
21837: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 266
21847: PUSH
21848: LD_INT 2
21850: EQUAL
21851: PUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL_OW 266
21861: PUSH
21862: LD_INT 4
21864: EQUAL
21865: OR
21866: IFFALSE 21877
// ComUpgrade ( building ) ;
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
21877: LD_VAR 0 1
21881: PPUSH
21882: CALL_OW 266
21886: PUSH
21887: LD_INT 31
21889: EQUAL
21890: PUSH
21891: LD_INT 22
21893: PUSH
21894: LD_INT 2
21896: PUSH
21897: EMPTY
21898: LIST
21899: LIST
21900: PUSH
21901: LD_INT 25
21903: PUSH
21904: LD_INT 1
21906: PUSH
21907: EMPTY
21908: LIST
21909: LIST
21910: PUSH
21911: LD_INT 3
21913: PUSH
21914: LD_INT 54
21916: PUSH
21917: EMPTY
21918: LIST
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: LD_INT 60
21925: PUSH
21926: EMPTY
21927: LIST
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: PUSH
21933: EMPTY
21934: LIST
21935: LIST
21936: LIST
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: LIST
21942: PPUSH
21943: CALL_OW 69
21947: PUSH
21948: LD_INT 0
21950: GREATER
21951: AND
21952: IFFALSE 22024
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
21954: LD_INT 22
21956: PUSH
21957: LD_INT 2
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: LD_INT 25
21966: PUSH
21967: LD_INT 1
21969: PUSH
21970: EMPTY
21971: LIST
21972: LIST
21973: PUSH
21974: LD_INT 3
21976: PUSH
21977: LD_INT 54
21979: PUSH
21980: EMPTY
21981: LIST
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: LD_INT 60
21988: PUSH
21989: EMPTY
21990: LIST
21991: PUSH
21992: EMPTY
21993: LIST
21994: LIST
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: LIST
22000: PUSH
22001: EMPTY
22002: LIST
22003: LIST
22004: LIST
22005: PPUSH
22006: CALL_OW 69
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PPUSH
22015: LD_VAR 0 1
22019: PPUSH
22020: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
22024: LD_VAR 0 1
22028: PPUSH
22029: CALL_OW 266
22033: PUSH
22034: LD_INT 27
22036: EQUAL
22037: IFFALSE 22216
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22039: LD_INT 22
22041: PUSH
22042: LD_INT 2
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PUSH
22049: LD_INT 30
22051: PUSH
22052: LD_INT 27
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PPUSH
22063: CALL_OW 69
22067: PUSH
22068: LD_INT 2
22070: EQUAL
22071: IFFALSE 22216
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22073: LD_ADDR_VAR 0 2
22077: PUSH
22078: LD_INT 22
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: PUSH
22088: LD_INT 21
22090: PUSH
22091: LD_INT 1
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 25
22100: PUSH
22101: LD_INT 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL_OW 69
22117: PUSH
22118: LD_INT 1
22120: ARRAY
22121: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22122: LD_VAR 0 2
22126: PPUSH
22127: LD_INT 92
22129: PPUSH
22130: LD_INT 34
22132: PPUSH
22133: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22137: LD_VAR 0 2
22141: PPUSH
22142: LD_INT 82
22144: PPUSH
22145: LD_INT 57
22147: PPUSH
22148: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22152: LD_VAR 0 2
22156: PPUSH
22157: LD_INT 36
22159: PPUSH
22160: LD_INT 28
22162: PPUSH
22163: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22167: LD_INT 22
22169: PUSH
22170: LD_INT 2
22172: PUSH
22173: EMPTY
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 21
22179: PUSH
22180: LD_INT 1
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: PUSH
22187: LD_INT 25
22189: PUSH
22190: LD_INT 2
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 69
22206: PPUSH
22207: LD_EXP 43
22211: PPUSH
22212: CALL_OW 180
// end ; end ; end ;
22216: PPOPN 2
22218: END
// on UpgradeComplete ( building ) do var i ;
22219: LD_INT 0
22221: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 255
22231: PUSH
22232: LD_INT 1
22234: EQUAL
22235: PUSH
22236: LD_EXP 61
22240: PUSH
22241: LD_INT 0
22243: EQUAL
22244: AND
22245: IFFALSE 22443
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22247: LD_VAR 0 1
22251: PPUSH
22252: CALL_OW 266
22256: PUSH
22257: LD_INT 7
22259: EQUAL
22260: PUSH
22261: LD_VAR 0 1
22265: PPUSH
22266: CALL_OW 266
22270: PUSH
22271: LD_INT 8
22273: EQUAL
22274: OR
22275: IFFALSE 22443
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22277: LD_INT 22
22279: PUSH
22280: LD_INT 1
22282: PUSH
22283: EMPTY
22284: LIST
22285: LIST
22286: PUSH
22287: LD_INT 2
22289: PUSH
22290: LD_INT 30
22292: PUSH
22293: LD_INT 26
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 30
22302: PUSH
22303: LD_INT 27
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 30
22312: PUSH
22313: LD_INT 28
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: PUSH
22335: LD_INT 0
22337: GREATER
22338: IFFALSE 22443
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22340: LD_ADDR_VAR 0 2
22344: PUSH
22345: LD_INT 22
22347: PUSH
22348: LD_INT 1
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: PUSH
22355: LD_INT 2
22357: PUSH
22358: LD_INT 30
22360: PUSH
22361: LD_INT 7
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: PUSH
22368: LD_INT 30
22370: PUSH
22371: LD_INT 8
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PPUSH
22387: CALL_OW 69
22391: PUSH
22392: FOR_IN
22393: IFFALSE 22441
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22395: LD_VAR 0 2
22399: PPUSH
22400: LD_INT 1
22402: PPUSH
22403: CALL_OW 268
22407: PUSH
22408: LD_INT 11
22410: EQUAL
22411: PUSH
22412: LD_VAR 0 2
22416: PPUSH
22417: LD_INT 2
22419: PPUSH
22420: CALL_OW 268
22424: PUSH
22425: LD_INT 11
22427: EQUAL
22428: OR
22429: IFFALSE 22439
// eventVar1 = 1 ;
22431: LD_ADDR_EXP 61
22435: PUSH
22436: LD_INT 1
22438: ST_TO_ADDR
22439: GO 22392
22441: POP
22442: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22443: LD_VAR 0 1
22447: PPUSH
22448: CALL_OW 255
22452: PUSH
22453: LD_INT 2
22455: EQUAL
22456: IFFALSE 22561
// begin if GetBType ( building ) = b_barracks then
22458: LD_VAR 0 1
22462: PPUSH
22463: CALL_OW 266
22467: PUSH
22468: LD_INT 5
22470: EQUAL
22471: IFFALSE 22561
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22473: LD_ADDR_VAR 0 2
22477: PUSH
22478: LD_INT 22
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: EMPTY
22485: LIST
22486: LIST
22487: PUSH
22488: LD_INT 25
22490: PUSH
22491: LD_INT 1
22493: PUSH
22494: EMPTY
22495: LIST
22496: LIST
22497: PUSH
22498: LD_INT 3
22500: PUSH
22501: LD_INT 54
22503: PUSH
22504: EMPTY
22505: LIST
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: PPUSH
22516: CALL_OW 69
22520: PUSH
22521: LD_EXP 26
22525: PUSH
22526: EMPTY
22527: LIST
22528: DIFF
22529: PUSH
22530: FOR_IN
22531: IFFALSE 22549
// ComEnterUnit ( i , building ) ;
22533: LD_VAR 0 2
22537: PPUSH
22538: LD_VAR 0 1
22542: PPUSH
22543: CALL_OW 120
22547: GO 22530
22549: POP
22550: POP
// arArm = building ;
22551: LD_ADDR_EXP 45
22555: PUSH
22556: LD_VAR 0 1
22560: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22561: LD_VAR 0 1
22565: PPUSH
22566: CALL_OW 255
22570: PUSH
22571: LD_INT 3
22573: EQUAL
22574: IFFALSE 23047
// begin if GetBType ( building ) = b_factory then
22576: LD_VAR 0 1
22580: PPUSH
22581: CALL_OW 266
22585: PUSH
22586: LD_INT 3
22588: EQUAL
22589: IFFALSE 22656
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22591: LD_ADDR_VAR 0 2
22595: PUSH
22596: LD_INT 22
22598: PUSH
22599: LD_INT 3
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 25
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PPUSH
22620: CALL_OW 69
22624: PUSH
22625: FOR_IN
22626: IFFALSE 22644
// ComEnterUnit ( i , building ) ;
22628: LD_VAR 0 2
22632: PPUSH
22633: LD_VAR 0 1
22637: PPUSH
22638: CALL_OW 120
22642: GO 22625
22644: POP
22645: POP
// ruFab = building ;
22646: LD_ADDR_EXP 35
22650: PUSH
22651: LD_VAR 0 1
22655: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22656: LD_INT 22
22658: PUSH
22659: LD_INT 3
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 21
22668: PUSH
22669: LD_INT 3
22671: PUSH
22672: EMPTY
22673: LIST
22674: LIST
22675: PUSH
22676: LD_INT 30
22678: PUSH
22679: LD_INT 8
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: LIST
22690: PPUSH
22691: CALL_OW 69
22695: PUSH
22696: LD_INT 2
22698: EQUAL
22699: IFFALSE 22907
// begin for i = 1 to 2 do
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: DOUBLE
22707: LD_INT 1
22709: DEC
22710: ST_TO_ADDR
22711: LD_INT 2
22713: PUSH
22714: FOR_TO
22715: IFFALSE 22802
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22717: LD_INT 22
22719: PUSH
22720: LD_INT 3
22722: PUSH
22723: EMPTY
22724: LIST
22725: LIST
22726: PUSH
22727: LD_INT 25
22729: PUSH
22730: LD_INT 4
22732: PUSH
22733: EMPTY
22734: LIST
22735: LIST
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PPUSH
22741: CALL_OW 69
22745: PUSH
22746: LD_VAR 0 2
22750: ARRAY
22751: PPUSH
22752: LD_INT 22
22754: PUSH
22755: LD_INT 3
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PUSH
22762: LD_INT 21
22764: PUSH
22765: LD_INT 3
22767: PUSH
22768: EMPTY
22769: LIST
22770: LIST
22771: PUSH
22772: LD_INT 30
22774: PUSH
22775: LD_INT 8
22777: PUSH
22778: EMPTY
22779: LIST
22780: LIST
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: LIST
22786: PPUSH
22787: CALL_OW 69
22791: PUSH
22792: LD_INT 1
22794: ARRAY
22795: PPUSH
22796: CALL_OW 120
22800: GO 22714
22802: POP
22803: POP
// for i = 3 to 4 do
22804: LD_ADDR_VAR 0 2
22808: PUSH
22809: DOUBLE
22810: LD_INT 3
22812: DEC
22813: ST_TO_ADDR
22814: LD_INT 4
22816: PUSH
22817: FOR_TO
22818: IFFALSE 22905
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
22820: LD_INT 22
22822: PUSH
22823: LD_INT 3
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: PUSH
22830: LD_INT 25
22832: PUSH
22833: LD_INT 4
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PPUSH
22844: CALL_OW 69
22848: PUSH
22849: LD_VAR 0 2
22853: ARRAY
22854: PPUSH
22855: LD_INT 22
22857: PUSH
22858: LD_INT 3
22860: PUSH
22861: EMPTY
22862: LIST
22863: LIST
22864: PUSH
22865: LD_INT 21
22867: PUSH
22868: LD_INT 3
22870: PUSH
22871: EMPTY
22872: LIST
22873: LIST
22874: PUSH
22875: LD_INT 30
22877: PUSH
22878: LD_INT 8
22880: PUSH
22881: EMPTY
22882: LIST
22883: LIST
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: LIST
22889: PPUSH
22890: CALL_OW 69
22894: PUSH
22895: LD_INT 2
22897: ARRAY
22898: PPUSH
22899: CALL_OW 120
22903: GO 22817
22905: POP
22906: POP
// end ; if GetBType ( building ) = b_barracks then
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 266
22916: PUSH
22917: LD_INT 5
22919: EQUAL
22920: IFFALSE 23047
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
22922: LD_ADDR_VAR 0 2
22926: PUSH
22927: LD_INT 22
22929: PUSH
22930: LD_INT 3
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 25
22939: PUSH
22940: LD_INT 1
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: LD_INT 54
22952: PUSH
22953: EMPTY
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: PPUSH
22965: CALL_OW 69
22969: PUSH
22970: FOR_IN
22971: IFFALSE 22989
// ComEnterUnit ( i , building ) ;
22973: LD_VAR 0 2
22977: PPUSH
22978: LD_VAR 0 1
22982: PPUSH
22983: CALL_OW 120
22987: GO 22970
22989: POP
22990: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
22991: LD_INT 22
22993: PUSH
22994: LD_INT 3
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 30
23003: PUSH
23004: LD_INT 5
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: PPUSH
23015: CALL_OW 69
23019: PUSH
23020: LD_INT 0
23022: EQUAL
23023: IFFALSE 23037
// ruArm1 = building else
23025: LD_ADDR_EXP 33
23029: PUSH
23030: LD_VAR 0 1
23034: ST_TO_ADDR
23035: GO 23047
// ruArm2 = building ;
23037: LD_ADDR_EXP 34
23041: PUSH
23042: LD_VAR 0 1
23046: ST_TO_ADDR
// end ; end ; end ;
23047: PPOPN 2
23049: END
// on EnterBuilding ( building , human ) do var rnd ;
23050: LD_INT 0
23052: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 255
23062: PUSH
23063: LD_INT 2
23065: EQUAL
23066: PUSH
23067: LD_VAR 0 2
23071: PPUSH
23072: CALL_OW 257
23076: PUSH
23077: LD_INT 1
23079: EQUAL
23080: AND
23081: PUSH
23082: LD_VAR 0 1
23086: PUSH
23087: LD_EXP 45
23091: EQUAL
23092: AND
23093: IFFALSE 23140
// begin wait ( 0 0$1 ) ;
23095: LD_INT 35
23097: PPUSH
23098: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23102: LD_ADDR_VAR 0 3
23106: PUSH
23107: LD_INT 1
23109: PPUSH
23110: LD_INT 100
23112: PPUSH
23113: CALL_OW 12
23117: ST_TO_ADDR
// if rnd > 50 then
23118: LD_VAR 0 3
23122: PUSH
23123: LD_INT 50
23125: GREATER
23126: IFFALSE 23140
// SetClass ( human , class_mortar ) ;
23128: LD_VAR 0 2
23132: PPUSH
23133: LD_INT 8
23135: PPUSH
23136: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23140: LD_VAR 0 2
23144: PPUSH
23145: CALL_OW 255
23149: PUSH
23150: LD_INT 3
23152: EQUAL
23153: PUSH
23154: LD_VAR 0 2
23158: PPUSH
23159: CALL_OW 257
23163: PUSH
23164: LD_INT 1
23166: EQUAL
23167: AND
23168: PUSH
23169: LD_VAR 0 1
23173: PUSH
23174: LD_EXP 33
23178: EQUAL
23179: PUSH
23180: LD_VAR 0 1
23184: PUSH
23185: LD_EXP 34
23189: EQUAL
23190: OR
23191: PUSH
23192: EMPTY
23193: LIST
23194: AND
23195: IFFALSE 23216
// begin wait ( 0 0$1 ) ;
23197: LD_INT 35
23199: PPUSH
23200: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23204: LD_VAR 0 2
23208: PPUSH
23209: LD_INT 9
23211: PPUSH
23212: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23216: LD_VAR 0 2
23220: PPUSH
23221: CALL_OW 255
23225: PUSH
23226: LD_INT 3
23228: EQUAL
23229: PUSH
23230: LD_VAR 0 2
23234: PPUSH
23235: CALL_OW 257
23239: PUSH
23240: LD_INT 9
23242: EQUAL
23243: AND
23244: PUSH
23245: LD_VAR 0 1
23249: PPUSH
23250: CALL_OW 266
23254: PUSH
23255: LD_INT 32
23257: EQUAL
23258: AND
23259: IFFALSE 23280
// begin wait ( 0 0$1 ) ;
23261: LD_INT 35
23263: PPUSH
23264: CALL_OW 67
// SetClass ( human , 1 ) ;
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_INT 1
23275: PPUSH
23276: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 255
23289: PUSH
23290: LD_INT 3
23292: EQUAL
23293: PUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 257
23303: PUSH
23304: LD_INT 3
23306: EQUAL
23307: AND
23308: PUSH
23309: LD_VAR 0 1
23313: PUSH
23314: LD_EXP 35
23318: EQUAL
23319: AND
23320: IFFALSE 23334
// SetLives ( human , 1000 ) ;
23322: LD_VAR 0 2
23326: PPUSH
23327: LD_INT 1000
23329: PPUSH
23330: CALL_OW 234
// end ;
23334: PPOPN 3
23336: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23337: LD_VAR 0 1
23341: PUSH
23342: LD_INT 1
23344: EQUAL
23345: PUSH
23346: LD_VAR 0 2
23350: PUSH
23351: LD_INT 2
23353: EQUAL
23354: AND
23355: PUSH
23356: LD_INT 1
23358: PPUSH
23359: LD_INT 2
23361: PPUSH
23362: CALL_OW 81
23366: PUSH
23367: LD_INT 1
23369: EQUAL
23370: AND
23371: IFFALSE 23392
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23373: LD_EXP 24
23377: PPUSH
23378: LD_STRING D6b-Pow-1
23380: PPUSH
23381: CALL_OW 94
// YouLost ( Powell ) ;
23385: LD_STRING Powell
23387: PPUSH
23388: CALL_OW 104
// end ; end ;
23392: PPOPN 2
23394: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23395: LD_INT 23
23397: PPUSH
23398: LD_INT 22
23400: PUSH
23401: LD_INT 1
23403: PUSH
23404: EMPTY
23405: LIST
23406: LIST
23407: PUSH
23408: LD_INT 21
23410: PUSH
23411: LD_INT 3
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: EMPTY
23419: LIST
23420: LIST
23421: PPUSH
23422: CALL_OW 70
23426: PUSH
23427: LD_INT 23
23429: PPUSH
23430: LD_INT 22
23432: PUSH
23433: LD_INT 1
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: PUSH
23440: LD_INT 21
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: EMPTY
23447: LIST
23448: LIST
23449: PUSH
23450: LD_INT 58
23452: PUSH
23453: EMPTY
23454: LIST
23455: PUSH
23456: EMPTY
23457: LIST
23458: LIST
23459: LIST
23460: PPUSH
23461: CALL_OW 70
23465: OR
23466: PUSH
23467: LD_INT 1
23469: PPUSH
23470: LD_INT 2
23472: PPUSH
23473: CALL_OW 81
23477: PUSH
23478: LD_INT 1
23480: EQUAL
23481: AND
23482: IFFALSE 23506
23484: GO 23486
23486: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23487: LD_EXP 24
23491: PPUSH
23492: LD_STRING D6b-Pow-1
23494: PPUSH
23495: CALL_OW 94
// YouLost ( Powell ) ;
23499: LD_STRING Powell
23501: PPUSH
23502: CALL_OW 104
// end ;
23506: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23507: LD_VAR 0 1
23511: PUSH
23512: LD_EXP 1
23516: EQUAL
23517: IFFALSE 23526
// YouLost ( JMM ) ;
23519: LD_STRING JMM
23521: PPUSH
23522: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23526: LD_VAR 0 1
23530: PPUSH
23531: CALL_OW 255
23535: PUSH
23536: LD_INT 3
23538: EQUAL
23539: PUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL_OW 247
23549: PUSH
23550: LD_INT 3
23552: EQUAL
23553: AND
23554: IFFALSE 24246
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 266
23565: PUSH
23566: LD_INT 31
23568: EQUAL
23569: PUSH
23570: LD_VAR 0 1
23574: PPUSH
23575: CALL_OW 266
23579: PUSH
23580: LD_INT 32
23582: EQUAL
23583: OR
23584: PUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 266
23594: PUSH
23595: LD_INT 36
23597: EQUAL
23598: OR
23599: PUSH
23600: LD_VAR 0 1
23604: PPUSH
23605: CALL_OW 266
23609: PUSH
23610: LD_INT 0
23612: EQUAL
23613: OR
23614: PUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 266
23624: PUSH
23625: LD_INT 24
23627: EQUAL
23628: OR
23629: PUSH
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 17
23642: EQUAL
23643: OR
23644: PUSH
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 266
23654: PUSH
23655: LD_INT 25
23657: EQUAL
23658: OR
23659: PUSH
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 266
23669: PUSH
23670: LD_INT 19
23672: EQUAL
23673: OR
23674: PUSH
23675: LD_VAR 0 1
23679: PPUSH
23680: CALL_OW 266
23684: PUSH
23685: LD_INT 20
23687: EQUAL
23688: OR
23689: PUSH
23690: LD_VAR 0 1
23694: PPUSH
23695: CALL_OW 266
23699: PUSH
23700: LD_INT 18
23702: EQUAL
23703: OR
23704: PUSH
23705: LD_VAR 0 1
23709: PPUSH
23710: CALL_OW 266
23714: PUSH
23715: LD_INT 21
23717: EQUAL
23718: OR
23719: PUSH
23720: LD_VAR 0 1
23724: PPUSH
23725: CALL_OW 266
23729: PUSH
23730: LD_INT 23
23732: EQUAL
23733: OR
23734: PUSH
23735: LD_VAR 0 1
23739: PPUSH
23740: CALL_OW 266
23744: PUSH
23745: LD_INT 16
23747: EQUAL
23748: OR
23749: PUSH
23750: LD_VAR 0 1
23754: PPUSH
23755: CALL_OW 266
23759: PUSH
23760: LD_INT 6
23762: EQUAL
23763: OR
23764: PUSH
23765: LD_VAR 0 1
23769: PPUSH
23770: CALL_OW 266
23774: PUSH
23775: LD_INT 29
23777: EQUAL
23778: OR
23779: PUSH
23780: LD_VAR 0 1
23784: PPUSH
23785: CALL_OW 266
23789: PUSH
23790: LD_INT 26
23792: EQUAL
23793: OR
23794: PUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 266
23804: PUSH
23805: LD_INT 30
23807: EQUAL
23808: OR
23809: PUSH
23810: LD_VAR 0 1
23814: PPUSH
23815: CALL_OW 266
23819: PUSH
23820: LD_INT 28
23822: EQUAL
23823: OR
23824: PUSH
23825: LD_VAR 0 1
23829: PPUSH
23830: CALL_OW 266
23834: PUSH
23835: LD_INT 27
23837: EQUAL
23838: OR
23839: PUSH
23840: LD_VAR 0 1
23844: PPUSH
23845: CALL_OW 266
23849: PUSH
23850: LD_INT 33
23852: EQUAL
23853: OR
23854: PUSH
23855: LD_VAR 0 1
23859: PPUSH
23860: CALL_OW 266
23864: PUSH
23865: LD_INT 2
23867: EQUAL
23868: OR
23869: PUSH
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 266
23879: PUSH
23880: LD_INT 4
23882: EQUAL
23883: OR
23884: IFFALSE 23970
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
23886: LD_ADDR_EXP 42
23890: PUSH
23891: LD_EXP 42
23895: PUSH
23896: LD_VAR 0 1
23900: PPUSH
23901: CALL_OW 266
23905: ADD
23906: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23907: LD_ADDR_EXP 42
23911: PUSH
23912: LD_EXP 42
23916: PUSH
23917: LD_VAR 0 1
23921: PPUSH
23922: CALL_OW 250
23926: ADD
23927: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23928: LD_ADDR_EXP 42
23932: PUSH
23933: LD_EXP 42
23937: PUSH
23938: LD_VAR 0 1
23942: PPUSH
23943: CALL_OW 251
23947: ADD
23948: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23949: LD_ADDR_EXP 42
23953: PUSH
23954: LD_EXP 42
23958: PUSH
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL_OW 254
23968: ADD
23969: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
23970: LD_VAR 0 1
23974: PPUSH
23975: CALL_OW 266
23979: PUSH
23980: LD_INT 1
23982: EQUAL
23983: IFFALSE 24062
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
23985: LD_ADDR_EXP 42
23989: PUSH
23990: LD_EXP 42
23994: PUSH
23995: LD_INT 0
23997: ADD
23998: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23999: LD_ADDR_EXP 42
24003: PUSH
24004: LD_EXP 42
24008: PUSH
24009: LD_VAR 0 1
24013: PPUSH
24014: CALL_OW 250
24018: ADD
24019: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24020: LD_ADDR_EXP 42
24024: PUSH
24025: LD_EXP 42
24029: PUSH
24030: LD_VAR 0 1
24034: PPUSH
24035: CALL_OW 251
24039: ADD
24040: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24041: LD_ADDR_EXP 42
24045: PUSH
24046: LD_EXP 42
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 254
24060: ADD
24061: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24062: LD_VAR 0 1
24066: PPUSH
24067: CALL_OW 266
24071: PUSH
24072: LD_INT 3
24074: EQUAL
24075: IFFALSE 24154
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24077: LD_ADDR_EXP 42
24081: PUSH
24082: LD_EXP 42
24086: PUSH
24087: LD_INT 2
24089: ADD
24090: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24091: LD_ADDR_EXP 42
24095: PUSH
24096: LD_EXP 42
24100: PUSH
24101: LD_VAR 0 1
24105: PPUSH
24106: CALL_OW 250
24110: ADD
24111: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24112: LD_ADDR_EXP 42
24116: PUSH
24117: LD_EXP 42
24121: PUSH
24122: LD_VAR 0 1
24126: PPUSH
24127: CALL_OW 251
24131: ADD
24132: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24133: LD_ADDR_EXP 42
24137: PUSH
24138: LD_EXP 42
24142: PUSH
24143: LD_VAR 0 1
24147: PPUSH
24148: CALL_OW 254
24152: ADD
24153: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 266
24163: PUSH
24164: LD_INT 5
24166: EQUAL
24167: IFFALSE 24246
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24169: LD_ADDR_EXP 42
24173: PUSH
24174: LD_EXP 42
24178: PUSH
24179: LD_INT 4
24181: ADD
24182: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24183: LD_ADDR_EXP 42
24187: PUSH
24188: LD_EXP 42
24192: PUSH
24193: LD_VAR 0 1
24197: PPUSH
24198: CALL_OW 250
24202: ADD
24203: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24204: LD_ADDR_EXP 42
24208: PUSH
24209: LD_EXP 42
24213: PUSH
24214: LD_VAR 0 1
24218: PPUSH
24219: CALL_OW 251
24223: ADD
24224: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24225: LD_ADDR_EXP 42
24229: PUSH
24230: LD_EXP 42
24234: PUSH
24235: LD_VAR 0 1
24239: PPUSH
24240: CALL_OW 254
24244: ADD
24245: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24246: LD_VAR 0 1
24250: PPUSH
24251: CALL_OW 257
24255: PUSH
24256: LD_INT 3
24258: EQUAL
24259: PUSH
24260: LD_VAR 0 1
24264: PPUSH
24265: CALL_OW 255
24269: PUSH
24270: LD_INT 3
24272: EQUAL
24273: AND
24274: PUSH
24275: LD_EXP 35
24279: PPUSH
24280: CALL_OW 302
24284: AND
24285: PUSH
24286: LD_EXP 35
24290: PPUSH
24291: CALL_OW 255
24295: PUSH
24296: LD_INT 3
24298: EQUAL
24299: AND
24300: IFFALSE 24370
// begin uc_side = 3 ;
24302: LD_ADDR_OWVAR 20
24306: PUSH
24307: LD_INT 3
24309: ST_TO_ADDR
// uc_nation = 3 ;
24310: LD_ADDR_OWVAR 21
24314: PUSH
24315: LD_INT 3
24317: ST_TO_ADDR
// hc_gallery :=  ;
24318: LD_ADDR_OWVAR 33
24322: PUSH
24323: LD_STRING 
24325: ST_TO_ADDR
// hc_name :=  ;
24326: LD_ADDR_OWVAR 26
24330: PUSH
24331: LD_STRING 
24333: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24334: LD_INT 0
24336: PPUSH
24337: LD_EXP 36
24341: PPUSH
24342: LD_EXP 37
24346: PPUSH
24347: CALL_OW 12
24351: PPUSH
24352: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24356: CALL_OW 44
24360: PPUSH
24361: LD_EXP 35
24365: PPUSH
24366: CALL_OW 52
// end ; end ;
24370: PPOPN 1
24372: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24373: LD_ADDR_OWVAR 57
24377: PUSH
24378: LD_INT 0
24380: ST_TO_ADDR
// fastEnd = 1 ;
24381: LD_ADDR_EXP 59
24385: PUSH
24386: LD_INT 1
24388: ST_TO_ADDR
// FinishMission ;
24389: CALL 25651 0 0
// end ; end_of_file
24393: PPOPN 1
24395: END
// export function PrepareNature ; var i , un ; begin
24396: LD_INT 0
24398: PPUSH
24399: PPUSH
24400: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24401: LD_ADDR_VAR 0 2
24405: PUSH
24406: DOUBLE
24407: LD_INT 1
24409: DEC
24410: ST_TO_ADDR
24411: LD_OWVAR 67
24415: PUSH
24416: LD_INT 1
24418: PPUSH
24419: LD_INT 5
24421: PPUSH
24422: CALL_OW 12
24426: PLUS
24427: PUSH
24428: FOR_TO
24429: IFFALSE 24574
// begin hc_sex = sex_male ;
24431: LD_ADDR_OWVAR 27
24435: PUSH
24436: LD_INT 1
24438: ST_TO_ADDR
// uc_side = 0 ;
24439: LD_ADDR_OWVAR 20
24443: PUSH
24444: LD_INT 0
24446: ST_TO_ADDR
// uc_nation = nation_nature ;
24447: LD_ADDR_OWVAR 21
24451: PUSH
24452: LD_INT 0
24454: ST_TO_ADDR
// hc_class = class_apeman ;
24455: LD_ADDR_OWVAR 28
24459: PUSH
24460: LD_INT 12
24462: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24463: LD_ADDR_OWVAR 31
24467: PUSH
24468: LD_INT 2
24470: PPUSH
24471: LD_INT 7
24473: PPUSH
24474: CALL_OW 12
24478: PUSH
24479: LD_OWVAR 67
24483: PLUS
24484: PUSH
24485: LD_INT 2
24487: PPUSH
24488: LD_INT 10
24490: PPUSH
24491: CALL_OW 12
24495: PUSH
24496: LD_INT 2
24498: PPUSH
24499: LD_INT 10
24501: PPUSH
24502: CALL_OW 12
24506: PUSH
24507: LD_INT 2
24509: PPUSH
24510: LD_INT 10
24512: PPUSH
24513: CALL_OW 12
24517: PUSH
24518: EMPTY
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24524: LD_ADDR_OWVAR 35
24528: PUSH
24529: LD_INT 5
24531: NEG
24532: PPUSH
24533: LD_INT 5
24535: PPUSH
24536: CALL_OW 12
24540: PUSH
24541: LD_OWVAR 67
24545: MUL
24546: ST_TO_ADDR
// un = CreateHuman ;
24547: LD_ADDR_VAR 0 3
24551: PUSH
24552: CALL_OW 44
24556: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24557: LD_VAR 0 3
24561: PPUSH
24562: LD_INT 5
24564: PPUSH
24565: LD_INT 0
24567: PPUSH
24568: CALL_OW 49
// end ;
24572: GO 24428
24574: POP
24575: POP
// for i = 1 to Difficulty + 2 do
24576: LD_ADDR_VAR 0 2
24580: PUSH
24581: DOUBLE
24582: LD_INT 1
24584: DEC
24585: ST_TO_ADDR
24586: LD_OWVAR 67
24590: PUSH
24591: LD_INT 2
24593: PLUS
24594: PUSH
24595: FOR_TO
24596: IFFALSE 24705
// begin hc_sex = sex_male ;
24598: LD_ADDR_OWVAR 27
24602: PUSH
24603: LD_INT 1
24605: ST_TO_ADDR
// uc_side = 0 ;
24606: LD_ADDR_OWVAR 20
24610: PUSH
24611: LD_INT 0
24613: ST_TO_ADDR
// uc_nation = nation_nature ;
24614: LD_ADDR_OWVAR 21
24618: PUSH
24619: LD_INT 0
24621: ST_TO_ADDR
// hc_class = class_tiger ;
24622: LD_ADDR_OWVAR 28
24626: PUSH
24627: LD_INT 14
24629: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24630: LD_ADDR_OWVAR 31
24634: PUSH
24635: LD_EXP 37
24639: PUSH
24640: LD_INT 0
24642: PUSH
24643: LD_INT 0
24645: PUSH
24646: LD_INT 0
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24655: LD_ADDR_OWVAR 35
24659: PUSH
24660: LD_INT 5
24662: NEG
24663: PPUSH
24664: LD_INT 5
24666: PPUSH
24667: CALL_OW 12
24671: PUSH
24672: LD_OWVAR 67
24676: MUL
24677: ST_TO_ADDR
// un = CreateHuman ;
24678: LD_ADDR_VAR 0 3
24682: PUSH
24683: CALL_OW 44
24687: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24688: LD_VAR 0 3
24692: PPUSH
24693: LD_INT 6
24695: PPUSH
24696: LD_INT 0
24698: PPUSH
24699: CALL_OW 49
// end ;
24703: GO 24595
24705: POP
24706: POP
// for i = 1 to rand ( 3 , 4 ) do
24707: LD_ADDR_VAR 0 2
24711: PUSH
24712: DOUBLE
24713: LD_INT 1
24715: DEC
24716: ST_TO_ADDR
24717: LD_INT 3
24719: PPUSH
24720: LD_INT 4
24722: PPUSH
24723: CALL_OW 12
24727: PUSH
24728: FOR_TO
24729: IFFALSE 24823
// begin hc_sex = sex_male ;
24731: LD_ADDR_OWVAR 27
24735: PUSH
24736: LD_INT 1
24738: ST_TO_ADDR
// uc_side = 0 ;
24739: LD_ADDR_OWVAR 20
24743: PUSH
24744: LD_INT 0
24746: ST_TO_ADDR
// uc_nation = nation_nature ;
24747: LD_ADDR_OWVAR 21
24751: PUSH
24752: LD_INT 0
24754: ST_TO_ADDR
// hc_class = 18 ;
24755: LD_ADDR_OWVAR 28
24759: PUSH
24760: LD_INT 18
24762: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24763: LD_ADDR_OWVAR 31
24767: PUSH
24768: LD_EXP 37
24772: PUSH
24773: LD_INT 0
24775: PUSH
24776: LD_INT 0
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: LIST
24787: ST_TO_ADDR
// hc_agressivity = 0 ;
24788: LD_ADDR_OWVAR 35
24792: PUSH
24793: LD_INT 0
24795: ST_TO_ADDR
// un = CreateHuman ;
24796: LD_ADDR_VAR 0 3
24800: PUSH
24801: CALL_OW 44
24805: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24806: LD_VAR 0 3
24810: PPUSH
24811: LD_INT 6
24813: PPUSH
24814: LD_INT 0
24816: PPUSH
24817: CALL_OW 49
// end ;
24821: GO 24728
24823: POP
24824: POP
// end ; end_of_file
24825: LD_VAR 0 1
24829: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
24830: LD_EXP 46
24834: PUSH
24835: LD_INT 1
24837: EQUAL
24838: IFFALSE 24922
24840: GO 24842
24842: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
24843: LD_INT 7
24845: PPUSH
24846: LD_INT 5
24848: PPUSH
24849: LD_INT 4
24851: PUSH
24852: LD_INT 5
24854: PUSH
24855: LD_INT 6
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: LIST
24862: PUSH
24863: LD_OWVAR 67
24867: ARRAY
24868: PPUSH
24869: LD_EXP 36
24873: PPUSH
24874: LD_EXP 37
24878: PPUSH
24879: CALL_OW 12
24883: PPUSH
24884: LD_INT 2
24886: PPUSH
24887: LD_INT 1
24889: PPUSH
24890: LD_INT 1
24892: PPUSH
24893: EMPTY
24894: PPUSH
24895: LD_INT 25
24897: PUSH
24898: LD_INT 26
24900: PUSH
24901: LD_INT 27
24903: PUSH
24904: LD_INT 28
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: PPUSH
24913: EMPTY
24914: PPUSH
24915: LD_INT 1
24917: PPUSH
24918: CALL 15610 0 11
24922: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
24923: LD_EXP 46
24927: PUSH
24928: LD_INT 1
24930: EQUAL
24931: IFFALSE 25019
24933: GO 24935
24935: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
24936: LD_INT 5
24938: PPUSH
24939: LD_INT 2
24941: PPUSH
24942: LD_INT 7
24944: PUSH
24945: LD_INT 8
24947: PUSH
24948: LD_INT 10
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: PUSH
24956: LD_OWVAR 67
24960: ARRAY
24961: PPUSH
24962: LD_INT 0
24964: PPUSH
24965: LD_INT 0
24967: PPUSH
24968: LD_INT 2
24970: PUSH
24971: LD_INT 4
24973: PUSH
24974: LD_INT 5
24976: PUSH
24977: EMPTY
24978: LIST
24979: LIST
24980: LIST
24981: PUSH
24982: LD_OWVAR 67
24986: ARRAY
24987: PPUSH
24988: LD_INT 0
24990: PPUSH
24991: LD_EXP 36
24995: PPUSH
24996: LD_EXP 37
25000: PPUSH
25001: CALL_OW 12
25005: PPUSH
25006: LD_INT 7
25008: PPUSH
25009: LD_INT 9
25011: PPUSH
25012: LD_INT 1
25014: PPUSH
25015: CALL 17314 0 11
25019: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25020: LD_EXP 46
25024: PUSH
25025: LD_INT 1
25027: EQUAL
25028: IFFALSE 25037
25030: GO 25032
25032: DISABLE
// PrepareArabianSheik ;
25033: CALL 3834 0 0
25037: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25038: LD_EXP 29
25042: PUSH
25043: LD_EXP 60
25047: PUSH
25048: LD_INT 1
25050: EQUAL
25051: AND
25052: IFFALSE 25121
25054: GO 25056
25056: DISABLE
// begin enable ;
25057: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25058: LD_INT 6
25060: PPUSH
25061: LD_INT 3
25063: PPUSH
25064: LD_EXP 57
25068: PPUSH
25069: LD_INT 0
25071: PPUSH
25072: LD_OWVAR 67
25076: PPUSH
25077: LD_INT 0
25079: PPUSH
25080: LD_EXP 57
25084: PUSH
25085: LD_INT 3
25087: DIV
25088: PUSH
25089: LD_INT 1
25091: PLUS
25092: PPUSH
25093: LD_EXP 36
25097: PPUSH
25098: LD_EXP 37
25102: PPUSH
25103: CALL_OW 12
25107: PPUSH
25108: LD_INT 17
25110: PPUSH
25111: LD_INT 18
25113: PPUSH
25114: LD_INT 1
25116: PPUSH
25117: CALL 17314 0 11
// end ;
25121: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25122: LD_EXP 29
25126: PUSH
25127: LD_EXP 60
25131: PUSH
25132: LD_INT 1
25134: EQUAL
25135: AND
25136: IFFALSE 25213
25138: GO 25140
25140: DISABLE
// begin enable ;
25141: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25142: LD_INT 17
25144: PPUSH
25145: LD_INT 6
25147: PPUSH
25148: LD_EXP 56
25152: PPUSH
25153: LD_EXP 36
25157: PPUSH
25158: LD_EXP 37
25162: PPUSH
25163: CALL_OW 12
25167: PPUSH
25168: LD_INT 3
25170: PPUSH
25171: LD_INT 1
25173: PPUSH
25174: LD_INT 1
25176: PUSH
25177: LD_INT 3
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: PPUSH
25184: LD_INT 43
25186: PUSH
25187: LD_INT 44
25189: PUSH
25190: LD_INT 45
25192: PUSH
25193: LD_INT 46
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: PPUSH
25202: EMPTY
25203: PPUSH
25204: EMPTY
25205: PPUSH
25206: LD_INT 1
25208: PPUSH
25209: CALL 15610 0 11
// end ;
25213: END
// every 10 10$00 trigger joinEpsilon do
25214: LD_EXP 29
25218: IFFALSE 25272
25220: GO 25222
25222: DISABLE
// begin enable ;
25223: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25224: LD_ADDR_EXP 56
25228: PUSH
25229: LD_EXP 56
25233: PUSH
25234: LD_INT 1
25236: PPUSH
25237: LD_OWVAR 67
25241: PPUSH
25242: CALL_OW 12
25246: PLUS
25247: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25248: LD_ADDR_EXP 57
25252: PUSH
25253: LD_EXP 57
25257: PUSH
25258: LD_INT 1
25260: PPUSH
25261: LD_OWVAR 67
25265: PPUSH
25266: CALL_OW 12
25270: PLUS
25271: ST_TO_ADDR
// end ;
25272: END
// every 21 21$0 trigger attackAvalaible = 1 do
25273: LD_EXP 60
25277: PUSH
25278: LD_INT 1
25280: EQUAL
25281: IFFALSE 25294
25283: GO 25285
25285: DISABLE
// attackAvalaible = 0 ; end_of_file
25286: LD_ADDR_EXP 60
25290: PUSH
25291: LD_INT 0
25293: ST_TO_ADDR
25294: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25295: LD_INT 54
25297: PPUSH
25298: LD_INT 1
25300: PPUSH
25301: CALL_OW 321
25305: PUSH
25306: LD_INT 2
25308: EQUAL
25309: PUSH
25310: LD_INT 55
25312: PPUSH
25313: LD_INT 1
25315: PPUSH
25316: CALL_OW 321
25320: PUSH
25321: LD_INT 2
25323: EQUAL
25324: AND
25325: PUSH
25326: LD_INT 21
25328: PPUSH
25329: LD_INT 1
25331: PPUSH
25332: CALL_OW 321
25336: PUSH
25337: LD_INT 2
25339: EQUAL
25340: AND
25341: PUSH
25342: LD_INT 22
25344: PPUSH
25345: LD_INT 1
25347: PPUSH
25348: CALL_OW 321
25352: PUSH
25353: LD_INT 2
25355: EQUAL
25356: AND
25357: PUSH
25358: LD_INT 12
25360: PPUSH
25361: LD_INT 1
25363: PPUSH
25364: CALL_OW 321
25368: PUSH
25369: LD_INT 1
25371: EQUAL
25372: PUSH
25373: LD_INT 32
25375: PPUSH
25376: LD_INT 1
25378: PPUSH
25379: CALL_OW 321
25383: PUSH
25384: LD_INT 1
25386: EQUAL
25387: OR
25388: PUSH
25389: EMPTY
25390: LIST
25391: AND
25392: PUSH
25393: LD_EXP 48
25397: PUSH
25398: LD_INT 1
25400: EQUAL
25401: AND
25402: PUSH
25403: LD_INT 22
25405: PUSH
25406: LD_INT 3
25408: PUSH
25409: EMPTY
25410: LIST
25411: LIST
25412: PUSH
25413: LD_INT 21
25415: PUSH
25416: LD_INT 1
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PPUSH
25427: CALL_OW 69
25431: PUSH
25432: LD_INT 0
25434: EQUAL
25435: AND
25436: IFFALSE 25492
25438: GO 25440
25440: DISABLE
// begin case query ( QEndMission ) of 1 :
25441: LD_STRING QEndMission
25443: PPUSH
25444: CALL_OW 97
25448: PUSH
25449: LD_INT 1
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25468
25457: POP
// begin end_the_mission_allowed = true ;
25458: LD_ADDR_OWVAR 57
25462: PUSH
25463: LD_INT 1
25465: ST_TO_ADDR
// end ; 2 :
25466: GO 25492
25468: LD_INT 2
25470: DOUBLE
25471: EQUAL
25472: IFTRUE 25476
25474: GO 25491
25476: POP
// begin fastEnd = 1 ;
25477: LD_ADDR_EXP 59
25481: PUSH
25482: LD_INT 1
25484: ST_TO_ADDR
// FinishMission ;
25485: CALL 25651 0 0
// end ; end ;
25489: GO 25492
25491: POP
// end ;
25492: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25493: LD_INT 54
25495: PPUSH
25496: LD_INT 1
25498: PPUSH
25499: CALL_OW 321
25503: PUSH
25504: LD_INT 2
25506: EQUAL
25507: PUSH
25508: LD_INT 55
25510: PPUSH
25511: LD_INT 1
25513: PPUSH
25514: CALL_OW 321
25518: PUSH
25519: LD_INT 2
25521: EQUAL
25522: AND
25523: PUSH
25524: LD_INT 21
25526: PPUSH
25527: LD_INT 1
25529: PPUSH
25530: CALL_OW 321
25534: PUSH
25535: LD_INT 2
25537: EQUAL
25538: AND
25539: PUSH
25540: LD_INT 22
25542: PPUSH
25543: LD_INT 1
25545: PPUSH
25546: CALL_OW 321
25550: PUSH
25551: LD_INT 2
25553: EQUAL
25554: AND
25555: PUSH
25556: LD_INT 12
25558: PPUSH
25559: LD_INT 1
25561: PPUSH
25562: CALL_OW 321
25566: PUSH
25567: LD_INT 2
25569: EQUAL
25570: AND
25571: PUSH
25572: LD_INT 32
25574: PPUSH
25575: LD_INT 1
25577: PPUSH
25578: CALL_OW 321
25582: PUSH
25583: LD_INT 2
25585: EQUAL
25586: AND
25587: PUSH
25588: LD_EXP 59
25592: PUSH
25593: LD_INT 0
25595: EQUAL
25596: AND
25597: PUSH
25598: LD_EXP 48
25602: PUSH
25603: LD_INT 1
25605: EQUAL
25606: AND
25607: PUSH
25608: LD_INT 22
25610: PUSH
25611: LD_INT 3
25613: PUSH
25614: EMPTY
25615: LIST
25616: LIST
25617: PUSH
25618: LD_INT 21
25620: PUSH
25621: LD_INT 1
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: PPUSH
25632: CALL_OW 69
25636: PUSH
25637: LD_INT 0
25639: EQUAL
25640: AND
25641: IFFALSE 25650
25643: GO 25645
25645: DISABLE
// FinishMission ;
25646: CALL 25651 0 0
25650: END
// export function FinishMission ; begin
25651: LD_INT 0
25653: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25654: LD_EXP 52
25658: PPUSH
25659: LD_STRING 10_KhatamStatus_1
25661: PPUSH
25662: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25666: LD_EXP 51
25670: PPUSH
25671: LD_STRING 10_GensherEscape_1
25673: PPUSH
25674: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25678: LD_INT 12
25680: PPUSH
25681: LD_INT 1
25683: PPUSH
25684: CALL_OW 321
25688: PUSH
25689: LD_INT 2
25691: EQUAL
25692: IFFALSE 25706
// begin AddMedal ( sights , 1 ) ;
25694: LD_STRING sights
25696: PPUSH
25697: LD_INT 1
25699: PPUSH
25700: CALL_OW 101
// end else
25704: GO 25717
// begin AddMedal ( sights , - 1 ) ;
25706: LD_STRING sights
25708: PPUSH
25709: LD_INT 1
25711: NEG
25712: PPUSH
25713: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25717: LD_INT 32
25719: PPUSH
25720: LD_INT 1
25722: PPUSH
25723: CALL_OW 321
25727: PUSH
25728: LD_INT 2
25730: EQUAL
25731: IFFALSE 25745
// begin AddMedal ( computers , 1 ) ;
25733: LD_STRING computers
25735: PPUSH
25736: LD_INT 1
25738: PPUSH
25739: CALL_OW 101
// end else
25743: GO 25756
// begin AddMedal ( computers , - 1 ) ;
25745: LD_STRING computers
25747: PPUSH
25748: LD_INT 1
25750: NEG
25751: PPUSH
25752: CALL_OW 101
// end ; if arabianEscape = 0 then
25756: LD_EXP 47
25760: PUSH
25761: LD_INT 0
25763: EQUAL
25764: IFFALSE 25788
// begin AddMedal ( renegades , 2 ) ;
25766: LD_STRING renegades
25768: PPUSH
25769: LD_INT 2
25771: PPUSH
25772: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
25776: LD_INT 0
25778: PPUSH
25779: LD_STRING 10_ScientistsEscape_1
25781: PPUSH
25782: CALL_OW 39
// end else
25786: GO 25799
// begin AddMedal ( renegades , - 1 ) ;
25788: LD_STRING renegades
25790: PPUSH
25791: LD_INT 1
25793: NEG
25794: PPUSH
25795: CALL_OW 101
// end ; SaveEpsilonBase ;
25799: CALL 26518 0 0
// Query ( kaj ) ;
25803: LD_STRING kaj
25805: PPUSH
25806: CALL_OW 97
// GiveMedals ( Main ) ;
25810: LD_STRING Main
25812: PPUSH
25813: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
25817: LD_INT 22
25819: PUSH
25820: LD_INT 1
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: PUSH
25827: LD_INT 23
25829: PUSH
25830: LD_INT 1
25832: PUSH
25833: EMPTY
25834: LIST
25835: LIST
25836: PUSH
25837: LD_INT 21
25839: PUSH
25840: LD_INT 1
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 2
25849: PUSH
25850: LD_INT 25
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: PUSH
25860: LD_INT 25
25862: PUSH
25863: LD_INT 2
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 25
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: EMPTY
25877: LIST
25878: LIST
25879: PUSH
25880: LD_INT 25
25882: PUSH
25883: LD_INT 4
25885: PUSH
25886: EMPTY
25887: LIST
25888: LIST
25889: PUSH
25890: LD_INT 25
25892: PUSH
25893: LD_INT 5
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: PUSH
25900: LD_INT 25
25902: PUSH
25903: LD_INT 8
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: PUSH
25910: EMPTY
25911: LIST
25912: LIST
25913: LIST
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: PPUSH
25925: CALL_OW 69
25929: PPUSH
25930: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25934: LD_EXP 1
25938: PPUSH
25939: LD_EXP 53
25943: PUSH
25944: LD_STRING JMM
25946: STR
25947: PPUSH
25948: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25952: LD_EXP 2
25956: PPUSH
25957: LD_EXP 53
25961: PUSH
25962: LD_STRING Brown
25964: STR
25965: PPUSH
25966: CALL 9905 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25970: LD_EXP 3
25974: PPUSH
25975: LD_EXP 53
25979: PUSH
25980: LD_STRING Donaldson
25982: STR
25983: PPUSH
25984: CALL 9905 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
25988: LD_EXP 4
25992: PPUSH
25993: LD_EXP 53
25997: PUSH
25998: LD_STRING Bobby
26000: STR
26001: PPUSH
26002: CALL 9905 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26006: LD_EXP 5
26010: PPUSH
26011: LD_EXP 53
26015: PUSH
26016: LD_STRING Cyrus
26018: STR
26019: PPUSH
26020: CALL 9905 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26024: LD_EXP 6
26028: PPUSH
26029: LD_EXP 53
26033: PUSH
26034: LD_STRING Lisa
26036: STR
26037: PPUSH
26038: CALL 9905 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26042: LD_EXP 7
26046: PPUSH
26047: LD_EXP 53
26051: PUSH
26052: LD_STRING Frank
26054: STR
26055: PPUSH
26056: CALL 9905 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26060: LD_EXP 8
26064: PPUSH
26065: LD_EXP 53
26069: PUSH
26070: LD_STRING Kikuchi
26072: STR
26073: PPUSH
26074: CALL 9905 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26078: LD_EXP 9
26082: PPUSH
26083: LD_EXP 53
26087: PUSH
26088: LD_STRING Houten
26090: STR
26091: PPUSH
26092: CALL 9905 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26096: LD_EXP 10
26100: PPUSH
26101: LD_EXP 53
26105: PUSH
26106: LD_STRING Gary
26108: STR
26109: PPUSH
26110: CALL 9905 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26114: LD_EXP 19
26118: PPUSH
26119: LD_EXP 53
26123: PUSH
26124: LD_STRING Cornell
26126: STR
26127: PPUSH
26128: CALL 9905 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26132: LD_EXP 11
26136: PPUSH
26137: LD_EXP 53
26141: PUSH
26142: LD_STRING Simms
26144: STR
26145: PPUSH
26146: CALL 9905 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26150: LD_EXP 12
26154: PPUSH
26155: LD_EXP 53
26159: PUSH
26160: LD_STRING Denis
26162: STR
26163: PPUSH
26164: CALL 9905 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26168: LD_EXP 13
26172: PPUSH
26173: LD_EXP 53
26177: PUSH
26178: LD_STRING Joan
26180: STR
26181: PPUSH
26182: CALL 9905 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26186: LD_EXP 15
26190: PPUSH
26191: LD_EXP 53
26195: PUSH
26196: LD_STRING Gladstone
26198: STR
26199: PPUSH
26200: CALL 9905 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26204: LD_EXP 17
26208: PPUSH
26209: LD_EXP 53
26213: PUSH
26214: LD_STRING DeltaDoctor
26216: STR
26217: PPUSH
26218: CALL 9905 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26222: LD_INT 50
26224: PUSH
26225: EMPTY
26226: LIST
26227: PUSH
26228: LD_INT 22
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 21
26240: PUSH
26241: LD_INT 1
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: PUSH
26248: LD_INT 2
26250: PUSH
26251: LD_INT 25
26253: PUSH
26254: LD_INT 1
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 25
26263: PUSH
26264: LD_INT 2
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: LD_INT 25
26273: PUSH
26274: LD_INT 3
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: PUSH
26281: LD_INT 25
26283: PUSH
26284: LD_INT 4
26286: PUSH
26287: EMPTY
26288: LIST
26289: LIST
26290: PUSH
26291: LD_INT 25
26293: PUSH
26294: LD_INT 5
26296: PUSH
26297: EMPTY
26298: LIST
26299: LIST
26300: PUSH
26301: LD_INT 25
26303: PUSH
26304: LD_INT 8
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: PUSH
26320: EMPTY
26321: LIST
26322: LIST
26323: LIST
26324: LIST
26325: PPUSH
26326: CALL_OW 69
26330: PUSH
26331: LD_EXP 1
26335: PUSH
26336: LD_EXP 2
26340: PUSH
26341: LD_EXP 3
26345: PUSH
26346: LD_EXP 4
26350: PUSH
26351: LD_EXP 5
26355: PUSH
26356: LD_EXP 6
26360: PUSH
26361: LD_EXP 7
26365: PUSH
26366: LD_EXP 15
26370: PUSH
26371: LD_EXP 8
26375: PUSH
26376: LD_EXP 12
26380: PUSH
26381: LD_EXP 13
26385: PUSH
26386: LD_EXP 9
26390: PUSH
26391: LD_EXP 11
26395: PUSH
26396: LD_EXP 10
26400: PUSH
26401: LD_EXP 17
26405: PUSH
26406: LD_EXP 19
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: DIFF
26429: PPUSH
26430: LD_STRING 10_other_survivors
26432: PPUSH
26433: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26437: LD_INT 50
26439: PUSH
26440: EMPTY
26441: LIST
26442: PUSH
26443: LD_INT 22
26445: PUSH
26446: LD_INT 1
26448: PUSH
26449: EMPTY
26450: LIST
26451: LIST
26452: PUSH
26453: LD_INT 21
26455: PUSH
26456: LD_INT 1
26458: PUSH
26459: EMPTY
26460: LIST
26461: LIST
26462: PUSH
26463: LD_INT 2
26465: PUSH
26466: LD_INT 25
26468: PUSH
26469: LD_INT 16
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 25
26478: PUSH
26479: LD_INT 12
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: LIST
26495: LIST
26496: PPUSH
26497: CALL_OW 69
26501: PPUSH
26502: LD_STRING 10_ape
26504: PPUSH
26505: CALL_OW 38
// YouWin ;
26509: CALL_OW 103
// end ;
26513: LD_VAR 0 1
26517: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26518: LD_INT 0
26520: PPUSH
26521: PPUSH
26522: PPUSH
26523: PPUSH
// epsilonBase = [ ] ;
26524: LD_ADDR_VAR 0 2
26528: PUSH
26529: EMPTY
26530: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26531: LD_ADDR_VAR 0 3
26535: PUSH
26536: LD_INT 22
26538: PUSH
26539: LD_INT 1
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 21
26548: PUSH
26549: LD_INT 3
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 50
26558: PUSH
26559: EMPTY
26560: LIST
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: ST_TO_ADDR
// for i in buildings do
26572: LD_ADDR_VAR 0 4
26576: PUSH
26577: LD_VAR 0 3
26581: PUSH
26582: FOR_IN
26583: IFFALSE 27020
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26585: LD_VAR 0 4
26589: PPUSH
26590: CALL_OW 266
26594: PUSH
26595: LD_INT 6
26597: PUSH
26598: LD_INT 7
26600: PUSH
26601: LD_INT 8
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: LIST
26608: IN
26609: IFFALSE 26723
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26611: LD_ADDR_VAR 0 2
26615: PUSH
26616: LD_VAR 0 2
26620: PUSH
26621: LD_VAR 0 4
26625: PPUSH
26626: CALL_OW 266
26630: PUSH
26631: LD_VAR 0 4
26635: PPUSH
26636: CALL_OW 250
26640: PUSH
26641: LD_VAR 0 4
26645: PPUSH
26646: CALL_OW 251
26650: PUSH
26651: LD_VAR 0 4
26655: PPUSH
26656: CALL_OW 254
26660: PUSH
26661: LD_VAR 0 4
26665: PPUSH
26666: CALL_OW 267
26670: PUSH
26671: LD_VAR 0 4
26675: PPUSH
26676: CALL_OW 248
26680: PUSH
26681: LD_VAR 0 4
26685: PPUSH
26686: LD_INT 1
26688: PPUSH
26689: CALL_OW 268
26693: PUSH
26694: LD_VAR 0 4
26698: PPUSH
26699: LD_INT 2
26701: PPUSH
26702: CALL_OW 268
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: PUSH
26717: EMPTY
26718: LIST
26719: ADD
26720: ST_TO_ADDR
26721: GO 27018
// if GetBType ( i ) = b_bunker then
26723: LD_VAR 0 4
26727: PPUSH
26728: CALL_OW 266
26732: PUSH
26733: LD_INT 32
26735: EQUAL
26736: IFFALSE 26833
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26738: LD_ADDR_VAR 0 2
26742: PUSH
26743: LD_VAR 0 2
26747: PUSH
26748: LD_VAR 0 4
26752: PPUSH
26753: CALL_OW 266
26757: PUSH
26758: LD_VAR 0 4
26762: PPUSH
26763: CALL_OW 250
26767: PUSH
26768: LD_VAR 0 4
26772: PPUSH
26773: CALL_OW 251
26777: PUSH
26778: LD_VAR 0 4
26782: PPUSH
26783: CALL_OW 254
26787: PUSH
26788: LD_VAR 0 4
26792: PPUSH
26793: CALL_OW 267
26797: PUSH
26798: LD_VAR 0 4
26802: PPUSH
26803: CALL_OW 248
26807: PUSH
26808: LD_VAR 0 4
26812: PPUSH
26813: CALL_OW 269
26817: PUSH
26818: EMPTY
26819: LIST
26820: LIST
26821: LIST
26822: LIST
26823: LIST
26824: LIST
26825: LIST
26826: PUSH
26827: EMPTY
26828: LIST
26829: ADD
26830: ST_TO_ADDR
26831: GO 27018
// if GetBType ( i ) = b_factory then
26833: LD_VAR 0 4
26837: PPUSH
26838: CALL_OW 266
26842: PUSH
26843: LD_INT 3
26845: EQUAL
26846: IFFALSE 26936
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26848: LD_ADDR_VAR 0 2
26852: PUSH
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_INT 1
26860: PPUSH
26861: LD_VAR 0 4
26865: PPUSH
26866: CALL_OW 266
26870: PUSH
26871: LD_VAR 0 4
26875: PPUSH
26876: CALL_OW 250
26880: PUSH
26881: LD_VAR 0 4
26885: PPUSH
26886: CALL_OW 251
26890: PUSH
26891: LD_VAR 0 4
26895: PPUSH
26896: CALL_OW 254
26900: PUSH
26901: LD_VAR 0 4
26905: PPUSH
26906: CALL_OW 267
26910: PUSH
26911: LD_VAR 0 4
26915: PPUSH
26916: CALL_OW 248
26920: PUSH
26921: EMPTY
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: PPUSH
26929: CALL_OW 2
26933: ST_TO_ADDR
26934: GO 27018
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26936: LD_ADDR_VAR 0 2
26940: PUSH
26941: LD_VAR 0 2
26945: PUSH
26946: LD_VAR 0 4
26950: PPUSH
26951: CALL_OW 266
26955: PUSH
26956: LD_VAR 0 4
26960: PPUSH
26961: CALL_OW 250
26965: PUSH
26966: LD_VAR 0 4
26970: PPUSH
26971: CALL_OW 251
26975: PUSH
26976: LD_VAR 0 4
26980: PPUSH
26981: CALL_OW 254
26985: PUSH
26986: LD_VAR 0 4
26990: PPUSH
26991: CALL_OW 267
26995: PUSH
26996: LD_VAR 0 4
27000: PPUSH
27001: CALL_OW 248
27005: PUSH
27006: EMPTY
27007: LIST
27008: LIST
27009: LIST
27010: LIST
27011: LIST
27012: LIST
27013: PUSH
27014: EMPTY
27015: LIST
27016: ADD
27017: ST_TO_ADDR
// end ;
27018: GO 26582
27020: POP
27021: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27022: LD_VAR 0 2
27026: PPUSH
27027: LD_STRING 10_EpsilonBase
27029: PPUSH
27030: CALL_OW 39
// end ; end_of_file
27034: LD_VAR 0 1
27038: RET
// every 0 0$30 do
27039: GO 27041
27041: DISABLE
// begin enable ;
27042: ENABLE
// if cratesSpawned < 6 then
27043: LD_EXP 55
27047: PUSH
27048: LD_INT 6
27050: LESS
27051: IFFALSE 27088
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27053: LD_INT 3
27055: PPUSH
27056: LD_INT 5
27058: PPUSH
27059: CALL_OW 12
27063: PPUSH
27064: LD_INT 16
27066: PPUSH
27067: LD_INT 1
27069: PPUSH
27070: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27074: LD_ADDR_EXP 55
27078: PUSH
27079: LD_EXP 55
27083: PUSH
27084: LD_INT 1
27086: PLUS
27087: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27088: LD_EXP 55
27092: PUSH
27093: LD_INT 6
27095: GREATEREQUAL
27096: PUSH
27097: LD_EXP 55
27101: PUSH
27102: LD_INT 12
27104: LESS
27105: AND
27106: IFFALSE 27150
// begin wait ( 0 0$30 ) ;
27108: LD_INT 1050
27110: PPUSH
27111: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27115: LD_INT 3
27117: PPUSH
27118: LD_INT 5
27120: PPUSH
27121: CALL_OW 12
27125: PPUSH
27126: LD_INT 16
27128: PPUSH
27129: LD_INT 1
27131: PPUSH
27132: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27136: LD_ADDR_EXP 55
27140: PUSH
27141: LD_EXP 55
27145: PUSH
27146: LD_INT 1
27148: PLUS
27149: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27150: LD_EXP 55
27154: PUSH
27155: LD_INT 12
27157: GREATEREQUAL
27158: IFFALSE 27202
// begin wait ( 1 1$30 ) ;
27160: LD_INT 3150
27162: PPUSH
27163: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27167: LD_INT 3
27169: PPUSH
27170: LD_INT 5
27172: PPUSH
27173: CALL_OW 12
27177: PPUSH
27178: LD_INT 16
27180: PPUSH
27181: LD_INT 1
27183: PPUSH
27184: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27188: LD_ADDR_EXP 55
27192: PUSH
27193: LD_EXP 55
27197: PUSH
27198: LD_INT 1
27200: PLUS
27201: ST_TO_ADDR
// end ; end ;
27202: END
