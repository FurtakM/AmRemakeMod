// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 28
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 38
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 39
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 40
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 41
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianEscape = 0 ;
  69: LD_ADDR_EXP 46
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  77: LD_ADDR_EXP 45
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// arabianDefeated = 0 ;
  85: LD_ADDR_EXP 47
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// arabianTrait = 0 ;
  93: LD_ADDR_EXP 48
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// telep_ru_dialog := false ;
 101: LD_ADDR_EXP 55
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar1 = 0 ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// eventVar2 = 0 ;
 117: LD_ADDR_EXP 58
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// fastEnd = 0 ;
 125: LD_ADDR_EXP 56
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// KhatamStatus = 0 ;
 133: LD_ADDR_EXP 49
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// cratesSpawned = 0 ;
 141: LD_ADDR_EXP 52
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// ru_vehs_counter := [ 2 , 3 , 4 ] [ Difficulty ] ;
 149: LD_ADDR_EXP 53
 153: PUSH
 154: LD_INT 2
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: LD_INT 4
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PUSH
 168: LD_OWVAR 67
 172: ARRAY
 173: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 174: LD_ADDR_EXP 54
 178: PUSH
 179: LD_INT 3
 181: PUSH
 182: LD_INT 4
 184: PUSH
 185: LD_INT 5
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_OWVAR 67
 197: ARRAY
 198: ST_TO_ADDR
// mission_prefix := 10_ ;
 199: LD_ADDR_EXP 50
 203: PUSH
 204: LD_STRING 10_
 206: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 207: LD_ADDR_EXP 51
 211: PUSH
 212: LD_STRING 09_
 214: ST_TO_ADDR
// debugMode = 0 ;
<<<<<<< HEAD
 215: LD_ADDR_EXP 59
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// PrepareDifficulty ;
 223: CALL 7614 0 0
// PrepareJMMTeam ;
 227: CALL 573 0 0
// PrepareCathyTeam ;
 231: CALL 1648 0 0
// PrepareArabianCommander ;
 235: CALL 3006 0 0
// PrepareArabian ;
 239: CALL 3058 0 0
// BuildArabianBase ;
 243: CALL 10397 0 0
// PrepareNature ;
 247: CALL 20921 0 0
// TameApemans ;
 251: CALL 15871 0 0
=======
 157: LD_ADDR_EXP 56
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// PrepareNature ;
 165: CALL 21050 0 0
// PrepareDifficulty ;
 169: CALL 7629 0 0
// PrepareJMMTeam ;
 173: CALL 515 0 0
// PrepareCathyTeam ;
 177: CALL 1590 0 0
// PrepareArabianCommander ;
 181: CALL 2948 0 0
// PrepareArabian ;
 185: CALL 3000 0 0
// BuildArabianBase ;
 189: CALL 10143 0 0
// TameApemans ;
 193: CALL 16020 0 0
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// end ;
 255: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 256: LD_EXP 59
 260: PUSH
 261: LD_INT 1
 263: EQUAL
 264: IFFALSE 570
 266: GO 268
 268: DISABLE
 269: LD_INT 0
 271: PPUSH
// begin enable ;
 272: ENABLE
// fogoff ( true ) ;
 273: LD_INT 1
 275: PPUSH
 276: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 21
 297: PUSH
 298: LD_INT 1
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PPUSH
 309: CALL_OW 69
 313: PUSH
 314: FOR_IN
 315: IFFALSE 331
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 314
 331: POP
 332: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 30
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: FOR_IN
 386: IFFALSE 410
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 388: LD_VAR 0 1
 392: PPUSH
 393: CALL_OW 274
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: LD_INT 9999
 403: PPUSH
 404: CALL_OW 277
 408: GO 385
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 2
 429: PUSH
 430: LD_INT 30
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 30
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PPUSH
 459: CALL_OW 69
 463: PUSH
 464: FOR_IN
 465: IFFALSE 489
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 274
 476: PPUSH
 477: LD_INT 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 464
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 3
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// end ; end_of_file
 570: PPOPN 1
 572: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 573: LD_INT 0
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
// uc_side = 1 ;
 581: LD_ADDR_OWVAR 20
 585: PUSH
 586: LD_INT 1
 588: ST_TO_ADDR
// uc_nation = 1 ;
 589: LD_ADDR_OWVAR 21
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// count = 0 ;
 597: LD_ADDR_VAR 0 6
 601: PUSH
 602: LD_INT 0
 604: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
<<<<<<< HEAD
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING 10_JMM
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL 7350 0 2
 620: ST_TO_ADDR
=======
 547: LD_ADDR_EXP 1
 551: PUSH
 552: LD_STRING 10_JMM
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL 7365 0 2
 562: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// JMMSquad = JMMSquad ^ JMM ;
 621: LD_ADDR_EXP 20
 625: PUSH
 626: LD_EXP 20
 630: PUSH
 631: LD_EXP 1
 635: ADD
 636: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
<<<<<<< HEAD
 637: LD_ADDR_EXP 10
 641: PUSH
 642: LD_STRING 10_Gary
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: CALL 7350 0 2
 652: ST_TO_ADDR
=======
 579: LD_ADDR_EXP 10
 583: PUSH
 584: LD_STRING 10_Gary
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 7365 0 2
 594: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Gary then
 653: LD_EXP 10
 657: IFFALSE 675
// JMMSquad = JMMSquad ^ Gary ;
 659: LD_ADDR_EXP 20
 663: PUSH
 664: LD_EXP 20
 668: PUSH
 669: LD_EXP 10
 673: ADD
 674: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
<<<<<<< HEAD
 675: LD_ADDR_EXP 5
 679: PUSH
 680: LD_STRING 10_Cyrus
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 7350 0 2
 690: ST_TO_ADDR
=======
 617: LD_ADDR_EXP 5
 621: PUSH
 622: LD_STRING 10_Cyrus
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 7365 0 2
 632: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Cyrus then
 691: LD_EXP 5
 695: IFFALSE 713
// JMMSquad = JMMSquad ^ Cyrus ;
 697: LD_ADDR_EXP 20
 701: PUSH
 702: LD_EXP 20
 706: PUSH
 707: LD_EXP 5
 711: ADD
 712: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
<<<<<<< HEAD
 713: LD_ADDR_EXP 4
 717: PUSH
 718: LD_STRING 10_Bobby
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 7350 0 2
 728: ST_TO_ADDR
=======
 655: LD_ADDR_EXP 4
 659: PUSH
 660: LD_STRING 10_Bobby
 662: PPUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL 7365 0 2
 670: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Bobby then
 729: LD_EXP 4
 733: IFFALSE 751
// JMMSquad = JMMSquad ^ Bobby ;
 735: LD_ADDR_EXP 20
 739: PUSH
 740: LD_EXP 20
 744: PUSH
 745: LD_EXP 4
 749: ADD
 750: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
<<<<<<< HEAD
 751: LD_ADDR_EXP 6
 755: PUSH
 756: LD_STRING 10_Lisa
 758: PPUSH
 759: LD_INT 1
 761: PPUSH
 762: CALL 7350 0 2
 766: ST_TO_ADDR
=======
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_STRING 10_Lisa
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL 7365 0 2
 708: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Lisa then
 767: LD_EXP 6
 771: IFFALSE 789
// JMMSquad = JMMSquad ^ Lisa ;
 773: LD_ADDR_EXP 20
 777: PUSH
 778: LD_EXP 20
 782: PUSH
 783: LD_EXP 6
 787: ADD
 788: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
<<<<<<< HEAD
 789: LD_ADDR_EXP 2
 793: PUSH
 794: LD_STRING 10_Brown
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: CALL 7350 0 2
 804: ST_TO_ADDR
=======
 731: LD_ADDR_EXP 2
 735: PUSH
 736: LD_STRING 10_Brown
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL 7365 0 2
 746: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Brown then
 805: LD_EXP 2
 809: IFFALSE 827
// JMMSquad = JMMSquad ^ Brown ;
 811: LD_ADDR_EXP 20
 815: PUSH
 816: LD_EXP 20
 820: PUSH
 821: LD_EXP 2
 825: ADD
 826: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
<<<<<<< HEAD
 827: LD_ADDR_EXP 3
 831: PUSH
 832: LD_STRING 10_Donaldson
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL 7350 0 2
 842: ST_TO_ADDR
=======
 769: LD_ADDR_EXP 3
 773: PUSH
 774: LD_STRING 10_Donaldson
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL 7365 0 2
 784: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Donaldson then
 843: LD_EXP 3
 847: IFFALSE 865
// JMMSquad = JMMSquad ^ Donaldson ;
 849: LD_ADDR_EXP 20
 853: PUSH
 854: LD_EXP 20
 858: PUSH
 859: LD_EXP 3
 863: ADD
 864: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
<<<<<<< HEAD
 865: LD_ADDR_EXP 7
 869: PUSH
 870: LD_STRING 10_Frank
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL 7350 0 2
 880: ST_TO_ADDR
=======
 807: LD_ADDR_EXP 7
 811: PUSH
 812: LD_STRING 10_Frank
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 7365 0 2
 822: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Frank then
 881: LD_EXP 7
 885: IFFALSE 903
// JMMSquad = JMMSquad ^ Frank ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_EXP 20
 896: PUSH
 897: LD_EXP 7
 901: ADD
 902: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
<<<<<<< HEAD
 903: LD_ADDR_EXP 9
 907: PUSH
 908: LD_STRING 10_Houten
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL 7350 0 2
 918: ST_TO_ADDR
=======
 845: LD_ADDR_EXP 9
 849: PUSH
 850: LD_STRING 10_Houten
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: CALL 7365 0 2
 860: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if Houten then
 919: LD_EXP 9
 923: IFFALSE 941
// JMMSquad = JMMSquad ^ Houten ;
 925: LD_ADDR_EXP 20
 929: PUSH
 930: LD_EXP 20
 934: PUSH
 935: LD_EXP 9
 939: ADD
 940: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 941: LD_ADDR_EXP 21
 945: PUSH
 946: LD_STRING OthersIn10
 948: PPUSH
 949: CALL_OW 31
 953: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
<<<<<<< HEAD
 954: LD_ADDR_EXP 24
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL 7350 0 2
 969: ST_TO_ADDR
=======
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING Powell
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL 7365 0 2
 911: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// for i in JMMSquad do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: LD_EXP 20
 979: PUSH
 980: FOR_IN
 981: IFFALSE 1240
// begin if count < 3 then
 983: LD_VAR 0 6
 987: PUSH
 988: LD_INT 3
 990: LESS
 991: IFFALSE 1108
// begin vc_engine = 1 ;
 993: LD_ADDR_OWVAR 39
 997: PUSH
 998: LD_INT 1
1000: ST_TO_ADDR
// vc_control = 1 ;
1001: LD_ADDR_OWVAR 38
1005: PUSH
1006: LD_INT 1
1008: ST_TO_ADDR
// vc_weapon = 12 ;
1009: LD_ADDR_OWVAR 40
1013: PUSH
1014: LD_INT 12
1016: ST_TO_ADDR
// vc_chassis = 3 ;
1017: LD_ADDR_OWVAR 37
1021: PUSH
1022: LD_INT 3
1024: ST_TO_ADDR
// veh = CreateVehicle ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: CALL_OW 45
1034: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 1
1042: PPUSH
1043: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1047: LD_VAR 0 4
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// if count mod 2 = 0 then
1062: LD_VAR 0 6
1066: PUSH
1067: LD_INT 2
1069: MOD
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: IFFALSE 1093
// AddCargo ( veh , 1 , 100 ) else
1076: LD_VAR 0 4
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 100
1086: PPUSH
1087: CALL_OW 291
1091: GO 1108
// AddCargo ( veh , 3 , 100 ) end ;
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_INT 3
1100: PPUSH
1101: LD_INT 100
1103: PPUSH
1104: CALL_OW 291
// if count >= 3 then
1108: LD_VAR 0 6
1112: PUSH
1113: LD_INT 3
1115: GREATEREQUAL
1116: IFFALSE 1210
// begin vc_engine = 1 ;
1118: LD_ADDR_OWVAR 39
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// vc_control = 1 ;
1126: LD_ADDR_OWVAR 38
1130: PUSH
1131: LD_INT 1
1133: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1134: LD_ADDR_OWVAR 40
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 4
1144: PUSH
1145: LD_INT 5
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 1
1155: PPUSH
1156: LD_INT 3
1158: PPUSH
1159: CALL_OW 12
1163: ARRAY
1164: ST_TO_ADDR
// vc_chassis = 3 ;
1165: LD_ADDR_OWVAR 37
1169: PUSH
1170: LD_INT 3
1172: ST_TO_ADDR
// veh = CreateVehicle ;
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: CALL_OW 45
1182: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1183: LD_VAR 0 4
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1195: LD_VAR 0 4
1199: PPUSH
1200: LD_INT 2
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 49
// end ; count = count + 1 ;
1210: LD_ADDR_VAR 0 6
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1224: LD_VAR 0 2
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 52
// end ;
1238: GO 980
1240: POP
1241: POP
// for i in others10 do
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_EXP 21
1251: PUSH
1252: FOR_IN
1253: IFFALSE 1379
// begin vc_engine = 1 ;
1255: LD_ADDR_OWVAR 39
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// vc_control = 1 ;
1263: LD_ADDR_OWVAR 38
1267: PUSH
1268: LD_INT 1
1270: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1271: LD_ADDR_OWVAR 40
1275: PUSH
1276: LD_INT 3
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 5
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 3
1295: PPUSH
1296: CALL_OW 12
1300: ARRAY
1301: ST_TO_ADDR
// vc_chassis = 3 ;
1302: LD_ADDR_OWVAR 37
1306: PUSH
1307: LD_INT 3
1309: ST_TO_ADDR
// veh = CreateVehicle ;
1310: LD_ADDR_VAR 0 4
1314: PUSH
1315: CALL_OW 45
1319: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1320: LD_VAR 0 4
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 2
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1347: LD_ADDR_EXP 27
1351: PUSH
1352: LD_EXP 27
1356: PUSH
1357: LD_VAR 0 4
1361: ADD
1362: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1363: LD_VAR 0 2
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: CALL_OW 52
// end ;
1377: GO 1252
1379: POP
1380: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1381: LD_INT 22
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 21
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: CALL_OW 336
// end ;
1417: LD_VAR 0 1
1421: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
1427: PPUSH
1428: PPUSH
// uc_side = 1 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 1
1436: ST_TO_ADDR
// uc_nation = 1 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 1
1444: ST_TO_ADDR
// for i := 1 to 10 do
1445: LD_ADDR_VAR 0 2
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 10
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1641
// begin vc_engine = 1 ;
1461: LD_ADDR_OWVAR 39
1465: PUSH
1466: LD_INT 1
1468: ST_TO_ADDR
// vc_control = 1 ;
1469: LD_ADDR_OWVAR 38
1473: PUSH
1474: LD_INT 1
1476: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1477: LD_ADDR_OWVAR 40
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: LD_INT 4
1487: PUSH
1488: LD_INT 5
1490: PUSH
1491: LD_INT 12
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 4
1505: PPUSH
1506: CALL_OW 12
1510: ARRAY
1511: ST_TO_ADDR
// vc_chassis = 3 ;
1512: LD_ADDR_OWVAR 37
1516: PUSH
1517: LD_INT 3
1519: ST_TO_ADDR
// veh = CreateVehicle ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 45
1529: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 1
1537: PPUSH
1538: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1557: LD_ADDR_EXP 27
1561: PUSH
1562: LD_EXP 27
1566: PUSH
1567: LD_VAR 0 3
1571: ADD
1572: ST_TO_ADDR
// if vc_weapon = 12 then
1573: LD_OWVAR 40
1577: PUSH
1578: LD_INT 12
1580: EQUAL
1581: IFFALSE 1639
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1583: LD_ADDR_VAR 0 4
1587: PUSH
1588: LD_INT 5
1590: PPUSH
1591: LD_INT 10
1593: PPUSH
1594: CALL_OW 12
1598: PUSH
1599: LD_INT 10
1601: MUL
1602: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 3
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 2
1623: PPUSH
1624: CALL_OW 12
1628: ARRAY
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL_OW 291
// end ; end ;
1639: GO 1458
1641: POP
1642: POP
// end ;
1643: LD_VAR 0 1
1647: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1648: LD_INT 0
1650: PPUSH
1651: PPUSH
1652: PPUSH
// uc_side = 4 ;
1653: LD_ADDR_OWVAR 20
1657: PUSH
1658: LD_INT 4
1660: ST_TO_ADDR
// uc_nation = 1 ;
1661: LD_ADDR_OWVAR 21
1665: PUSH
1666: LD_INT 1
1668: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
<<<<<<< HEAD
1669: LD_ADDR_EXP 11
1673: PUSH
1674: LD_STRING Simms
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL 7350 0 2
1684: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1685: LD_ADDR_EXP 12
1689: PUSH
1690: LD_STRING 08_Denis
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL 7350 0 2
1700: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1701: LD_ADDR_EXP 13
1705: PUSH
1706: LD_STRING 08_Joan
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: CALL 7350 0 2
1716: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1717: LD_ADDR_EXP 14
1721: PUSH
1722: LD_STRING Khatam
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL 7350 0 2
1732: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_STRING Gladstone
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: CALL 7350 0 2
1748: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1749: LD_ADDR_EXP 17
1753: PUSH
1754: LD_STRING DeltaDoctor
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL 7350 0 2
1764: ST_TO_ADDR
=======
1611: LD_ADDR_EXP 11
1615: PUSH
1616: LD_STRING Simms
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 7365 0 2
1626: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1627: LD_ADDR_EXP 12
1631: PUSH
1632: LD_STRING 08_Denis
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: CALL 7365 0 2
1642: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1643: LD_ADDR_EXP 13
1647: PUSH
1648: LD_STRING 08_Joan
1650: PPUSH
1651: LD_INT 1
1653: PPUSH
1654: CALL 7365 0 2
1658: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1659: LD_ADDR_EXP 14
1663: PUSH
1664: LD_STRING Khatam
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: CALL 7365 0 2
1674: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1675: LD_ADDR_EXP 15
1679: PUSH
1680: LD_STRING Gladstone
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 7365 0 2
1690: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1691: LD_ADDR_EXP 17
1695: PUSH
1696: LD_STRING DeltaDoctor
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: CALL 7365 0 2
1706: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if TestCharacters ( 08_Frank ) = 1 then
1765: LD_STRING 08_Frank
1767: PPUSH
1768: CALL_OW 28
1772: PUSH
1773: LD_INT 1
1775: EQUAL
1776: IFFALSE 1794
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
<<<<<<< HEAD
1778: LD_ADDR_EXP 8
1782: PUSH
1783: LD_STRING Yamoko
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: CALL 7350 0 2
1793: ST_TO_ADDR
=======
1720: LD_ADDR_EXP 8
1724: PUSH
1725: LD_STRING Yamoko
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL 7365 0 2
1735: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// others09 = CreateCharacterSet ( 09_others ) ;
1794: LD_ADDR_EXP 22
1798: PUSH
1799: LD_STRING 09_others
1801: PPUSH
1802: CALL_OW 31
1806: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1807: LD_ADDR_EXP 23
1811: PUSH
1812: LD_STRING 09_apes
1814: PPUSH
1815: CALL_OW 31
1819: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1820: LD_EXP 11
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1835: LD_EXP 12
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1850: LD_EXP 13
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1865: LD_EXP 14
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_INT 0
1875: PPUSH
1876: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1880: LD_EXP 15
1884: PPUSH
1885: LD_INT 1
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1895: LD_EXP 17
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1910: LD_EXP 8
1914: PPUSH
1915: LD_INT 1
1917: PPUSH
1918: LD_INT 0
1920: PPUSH
1921: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1925: LD_EXP 11
1929: PUSH
1930: LD_EXP 14
1934: PUSH
1935: LD_EXP 12
1939: PUSH
1940: LD_EXP 15
1944: PUSH
1945: LD_EXP 17
1949: PUSH
1950: LD_EXP 13
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 336
// if others09 > 2 then
1970: LD_EXP 22
1974: PUSH
1975: LD_INT 2
1977: GREATER
1978: IFFALSE 2023
// begin for i := 1 to 3 do
1980: LD_ADDR_VAR 0 2
1984: PUSH
1985: DOUBLE
1986: LD_INT 1
1988: DEC
1989: ST_TO_ADDR
1990: LD_INT 3
1992: PUSH
1993: FOR_TO
1994: IFFALSE 2019
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
1996: LD_EXP 22
2000: PUSH
2001: LD_VAR 0 2
2005: ARRAY
2006: PPUSH
2007: LD_INT 1
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 49
2017: GO 1993
2019: POP
2020: POP
// end else
2021: GO 2055
// begin for i in others09 do
2023: LD_ADDR_VAR 0 2
2027: PUSH
2028: LD_EXP 22
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2053
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2036: LD_VAR 0 2
2040: PPUSH
2041: LD_INT 1
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
2051: GO 2033
2053: POP
2054: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
2055: LD_INT 22
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 21
2067: PUSH
2068: LD_INT 1
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 25
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 11
2099: PUSH
2100: LD_EXP 14
2104: PUSH
2105: LD_EXP 12
2109: PUSH
2110: LD_EXP 15
2114: PUSH
2115: LD_EXP 17
2119: PUSH
2120: LD_EXP 13
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 0
2135: EQUAL
2136: DIFF
2137: IFFALSE 2239
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2139: LD_ADDR_VAR 0 3
2143: PUSH
2144: LD_INT 22
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 21
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 25
2166: PUSH
2167: LD_INT 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 69
2183: PUSH
2184: LD_EXP 11
2188: PUSH
2189: LD_EXP 14
2193: PUSH
2194: LD_EXP 12
2198: PUSH
2199: LD_EXP 15
2203: PUSH
2204: LD_EXP 17
2208: PUSH
2209: LD_EXP 13
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: DIFF
2222: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2223: LD_VAR 0 3
2227: PUSH
2228: LD_INT 1
2230: ARRAY
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: CALL_OW 336
// end ; for i in ape09 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: LD_EXP 23
2248: PUSH
2249: FOR_IN
2250: IFFALSE 2269
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2252: LD_VAR 0 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL_OW 49
2267: GO 2249
2269: POP
2270: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2271: LD_INT 22
2273: PUSH
2274: LD_INT 4
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 21
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 25
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: LD_INT 101
2316: PPUSH
2317: LD_INT 30
2319: PPUSH
2320: LD_INT 2
2322: PPUSH
2323: CALL_OW 205
// uc_side = 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// hc_class := 1 ;
2335: LD_ADDR_OWVAR 28
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// hc_sex := sex_female ;
2343: LD_ADDR_OWVAR 27
2347: PUSH
2348: LD_INT 2
2350: ST_TO_ADDR
// hc_gallery :=  ;
2351: LD_ADDR_OWVAR 33
2355: PUSH
2356: LD_STRING 
2358: ST_TO_ADDR
// hc_name :=  ;
2359: LD_ADDR_OWVAR 26
2363: PUSH
2364: LD_STRING 
2366: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2367: LD_ADDR_OWVAR 31
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 7
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 0
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// AmScout = CreateHuman ;
2390: LD_ADDR_EXP 18
2394: PUSH
2395: CALL_OW 44
2399: ST_TO_ADDR
// end ;
2400: LD_VAR 0 1
2404: RET
// export function PrepareCornell ; begin
2405: LD_INT 0
2407: PPUSH
// uc_side = 4 ;
2408: LD_ADDR_OWVAR 20
2412: PUSH
2413: LD_INT 4
2415: ST_TO_ADDR
// uc_nation = 1 ;
2416: LD_ADDR_OWVAR 21
2420: PUSH
2421: LD_INT 1
2423: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
<<<<<<< HEAD
2424: LD_ADDR_EXP 19
2428: PUSH
2429: LD_STRING 03_Cornel
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL 7350 0 2
2439: ST_TO_ADDR
=======
2366: LD_ADDR_EXP 19
2370: PUSH
2371: LD_STRING 03_Cornel
2373: PPUSH
2374: LD_INT 1
2376: PPUSH
2377: CALL 7365 0 2
2381: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2440: LD_EXP 19
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: CALL_OW 49
// if IsInUnit ( JMM ) then
2455: LD_EXP 1
2459: PPUSH
2460: CALL_OW 310
2464: IFFALSE 2507
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2466: LD_EXP 19
2470: PPUSH
2471: LD_EXP 1
2475: PPUSH
2476: CALL_OW 310
2480: PPUSH
2481: CALL_OW 250
2485: PPUSH
2486: LD_EXP 1
2490: PPUSH
2491: CALL_OW 310
2495: PPUSH
2496: CALL_OW 251
2500: PPUSH
2501: CALL_OW 111
2505: GO 2536
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2507: LD_EXP 19
2511: PPUSH
2512: LD_EXP 1
2516: PPUSH
2517: CALL_OW 250
2521: PPUSH
2522: LD_EXP 1
2526: PPUSH
2527: CALL_OW 251
2531: PPUSH
2532: CALL_OW 111
// end ; end_of_file
2536: LD_VAR 0 1
2540: RET
// export function PrepareRussians ; var i , un ; begin
2541: LD_INT 0
2543: PPUSH
2544: PPUSH
2545: PPUSH
// uc_side = 3 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 3
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
<<<<<<< HEAD
2562: LD_ADDR_EXP 25
2566: PUSH
2567: LD_STRING Tsaritsyn
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL 7350 0 2
2577: ST_TO_ADDR
=======
2504: LD_ADDR_EXP 25
2508: PUSH
2509: LD_STRING Tsaritsyn
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 7365 0 2
2519: ST_TO_ADDR
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2578: LD_EXP 25
2582: PPUSH
2583: LD_INT 3
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 49
// for i = 1 to 14 do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: DOUBLE
2599: LD_INT 1
2601: DEC
2602: ST_TO_ADDR
2603: LD_INT 14
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2693
// begin uc_side = 3 ;
2609: LD_ADDR_OWVAR 20
2613: PUSH
2614: LD_INT 3
2616: ST_TO_ADDR
// uc_nation = 3 ;
2617: LD_ADDR_OWVAR 21
2621: PUSH
2622: LD_INT 3
2624: ST_TO_ADDR
// hc_gallery =  ;
2625: LD_ADDR_OWVAR 33
2629: PUSH
2630: LD_STRING 
2632: ST_TO_ADDR
// hc_name =  ;
2633: LD_ADDR_OWVAR 26
2637: PUSH
2638: LD_STRING 
2640: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2641: LD_INT 0
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_EXP 35
2651: PPUSH
2652: LD_EXP 36
2656: PPUSH
2657: CALL_OW 12
2661: PPUSH
2662: CALL_OW 380
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 3
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2676: LD_VAR 0 3
2680: PPUSH
2681: LD_INT 3
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// end ;
2691: GO 2606
2693: POP
2694: POP
// for i = 1 to 6 do
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: DOUBLE
2701: LD_INT 1
2703: DEC
2704: ST_TO_ADDR
2705: LD_INT 6
2707: PUSH
2708: FOR_TO
2709: IFFALSE 2795
// begin uc_side = 3 ;
2711: LD_ADDR_OWVAR 20
2715: PUSH
2716: LD_INT 3
2718: ST_TO_ADDR
// uc_nation = 3 ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_INT 3
2726: ST_TO_ADDR
// hc_gallery =  ;
2727: LD_ADDR_OWVAR 33
2731: PUSH
2732: LD_STRING 
2734: ST_TO_ADDR
// hc_name =  ;
2735: LD_ADDR_OWVAR 26
2739: PUSH
2740: LD_STRING 
2742: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2743: LD_INT 0
2745: PPUSH
2746: LD_INT 2
2748: PPUSH
2749: LD_EXP 35
2753: PPUSH
2754: LD_EXP 36
2758: PPUSH
2759: CALL_OW 12
2763: PPUSH
2764: CALL_OW 380
// un = CreateHuman ;
2768: LD_ADDR_VAR 0 3
2772: PUSH
2773: CALL_OW 44
2777: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2778: LD_VAR 0 3
2782: PPUSH
2783: LD_INT 3
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 49
// end ;
2793: GO 2708
2795: POP
2796: POP
// for i = 1 to 6 do
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: DOUBLE
2803: LD_INT 1
2805: DEC
2806: ST_TO_ADDR
2807: LD_INT 6
2809: PUSH
2810: FOR_TO
2811: IFFALSE 2897
// begin uc_side = 3 ;
2813: LD_ADDR_OWVAR 20
2817: PUSH
2818: LD_INT 3
2820: ST_TO_ADDR
// uc_nation = 3 ;
2821: LD_ADDR_OWVAR 21
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// hc_gallery =  ;
2829: LD_ADDR_OWVAR 33
2833: PUSH
2834: LD_STRING 
2836: ST_TO_ADDR
// hc_name =  ;
2837: LD_ADDR_OWVAR 26
2841: PUSH
2842: LD_STRING 
2844: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2845: LD_INT 0
2847: PPUSH
2848: LD_INT 3
2850: PPUSH
2851: LD_EXP 35
2855: PPUSH
2856: LD_EXP 36
2860: PPUSH
2861: CALL_OW 12
2865: PPUSH
2866: CALL_OW 380
// un = CreateHuman ;
2870: LD_ADDR_VAR 0 3
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2880: LD_VAR 0 3
2884: PPUSH
2885: LD_INT 3
2887: PPUSH
2888: LD_INT 0
2890: PPUSH
2891: CALL_OW 49
// end ;
2895: GO 2810
2897: POP
2898: POP
// for i = 1 to 4 do
2899: LD_ADDR_VAR 0 2
2903: PUSH
2904: DOUBLE
2905: LD_INT 1
2907: DEC
2908: ST_TO_ADDR
2909: LD_INT 4
2911: PUSH
2912: FOR_TO
2913: IFFALSE 2999
// begin uc_side = 3 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 3
2922: ST_TO_ADDR
// uc_nation = 3 ;
2923: LD_ADDR_OWVAR 21
2927: PUSH
2928: LD_INT 3
2930: ST_TO_ADDR
// hc_gallery =  ;
2931: LD_ADDR_OWVAR 33
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_name =  ;
2939: LD_ADDR_OWVAR 26
2943: PUSH
2944: LD_STRING 
2946: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: LD_EXP 35
2957: PPUSH
2958: LD_EXP 36
2962: PPUSH
2963: CALL_OW 12
2967: PPUSH
2968: CALL_OW 380
// un = CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 49
// end ;
2997: GO 2912
2999: POP
3000: POP
// end ; end_of_file
3001: LD_VAR 0 1
3005: RET
// export function PrepareArabianCommander ; begin
3006: LD_INT 0
3008: PPUSH
// uc_side = 2 ;
3009: LD_ADDR_OWVAR 20
3013: PUSH
3014: LD_INT 2
3016: ST_TO_ADDR
// uc_nation = 2 ;
3017: LD_ADDR_OWVAR 21
3021: PUSH
3022: LD_INT 2
3024: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3025: LD_ADDR_EXP 26
3029: PUSH
3030: LD_STRING Dietrich
3032: PPUSH
3033: CALL_OW 25
3037: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3038: LD_EXP 26
3042: PPUSH
3043: LD_INT 4
3045: PPUSH
3046: LD_INT 0
3048: PPUSH
3049: CALL_OW 49
// end ;
3053: LD_VAR 0 1
3057: RET
// export function PrepareArabian ; var i , un , veh ; begin
3058: LD_INT 0
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
// for i = 1 to 3 do
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_INT 3
3076: PUSH
3077: FOR_TO
3078: IFFALSE 3164
// begin uc_side = 2 ;
3080: LD_ADDR_OWVAR 20
3084: PUSH
3085: LD_INT 2
3087: ST_TO_ADDR
// uc_nation = 2 ;
3088: LD_ADDR_OWVAR 21
3092: PUSH
3093: LD_INT 2
3095: ST_TO_ADDR
// hc_gallery =  ;
3096: LD_ADDR_OWVAR 33
3100: PUSH
3101: LD_STRING 
3103: ST_TO_ADDR
// hc_name =  ;
3104: LD_ADDR_OWVAR 26
3108: PUSH
3109: LD_STRING 
3111: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3112: LD_INT 0
3114: PPUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_EXP 35
3122: PPUSH
3123: LD_EXP 36
3127: PPUSH
3128: CALL_OW 12
3132: PPUSH
3133: CALL_OW 380
// un = CreateHuman ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_INT 4
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 49
// end ;
3162: GO 3077
3164: POP
3165: POP
// for i = 1 to 6 do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_INT 6
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3266
// begin uc_side = 2 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 2
3189: ST_TO_ADDR
// uc_nation = 2 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 2
3197: ST_TO_ADDR
// hc_gallery =  ;
3198: LD_ADDR_OWVAR 33
3202: PUSH
3203: LD_STRING 
3205: ST_TO_ADDR
// hc_name =  ;
3206: LD_ADDR_OWVAR 26
3210: PUSH
3211: LD_STRING 
3213: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3214: LD_INT 0
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_EXP 35
3224: PPUSH
3225: LD_EXP 36
3229: PPUSH
3230: CALL_OW 12
3234: PPUSH
3235: CALL_OW 380
// un = CreateHuman ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: CALL_OW 44
3248: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3249: LD_VAR 0 3
3253: PPUSH
3254: LD_INT 4
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
// end ;
3264: GO 3179
3266: POP
3267: POP
// for i = 1 to 6 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 6
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3368
// begin uc_side = 2 ;
3284: LD_ADDR_OWVAR 20
3288: PUSH
3289: LD_INT 2
3291: ST_TO_ADDR
// uc_nation = 2 ;
3292: LD_ADDR_OWVAR 21
3296: PUSH
3297: LD_INT 2
3299: ST_TO_ADDR
// hc_gallery =  ;
3300: LD_ADDR_OWVAR 33
3304: PUSH
3305: LD_STRING 
3307: ST_TO_ADDR
// hc_name =  ;
3308: LD_ADDR_OWVAR 26
3312: PUSH
3313: LD_STRING 
3315: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3316: LD_INT 0
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: LD_EXP 35
3326: PPUSH
3327: LD_EXP 36
3331: PPUSH
3332: CALL_OW 12
3336: PPUSH
3337: CALL_OW 380
// un = CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_INT 4
3358: PPUSH
3359: LD_INT 0
3361: PPUSH
3362: CALL_OW 49
// end ;
3366: GO 3281
3368: POP
3369: POP
// for i = 1 to 4 do
3370: LD_ADDR_VAR 0 2
3374: PUSH
3375: DOUBLE
3376: LD_INT 1
3378: DEC
3379: ST_TO_ADDR
3380: LD_INT 4
3382: PUSH
3383: FOR_TO
3384: IFFALSE 3470
// begin uc_side = 2 ;
3386: LD_ADDR_OWVAR 20
3390: PUSH
3391: LD_INT 2
3393: ST_TO_ADDR
// uc_nation = 2 ;
3394: LD_ADDR_OWVAR 21
3398: PUSH
3399: LD_INT 2
3401: ST_TO_ADDR
// hc_gallery =  ;
3402: LD_ADDR_OWVAR 33
3406: PUSH
3407: LD_STRING 
3409: ST_TO_ADDR
// hc_name =  ;
3410: LD_ADDR_OWVAR 26
3414: PUSH
3415: LD_STRING 
3417: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_EXP 35
3428: PPUSH
3429: LD_EXP 36
3433: PPUSH
3434: CALL_OW 12
3438: PPUSH
3439: CALL_OW 380
// un = CreateHuman ;
3443: LD_ADDR_VAR 0 3
3447: PUSH
3448: CALL_OW 44
3452: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3453: LD_VAR 0 3
3457: PPUSH
3458: LD_INT 4
3460: PPUSH
3461: LD_INT 0
3463: PPUSH
3464: CALL_OW 49
// end ;
3468: GO 3383
3470: POP
3471: POP
// for i = 1 to 2 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 2
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3616
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3488: LD_ADDR_VAR 0 4
3492: PUSH
3493: LD_INT 22
3495: PUSH
3496: LD_INT 2
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 21
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 58
3515: PUSH
3516: EMPTY
3517: LIST
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: ST_TO_ADDR
// uc_side = 2 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 2
3536: ST_TO_ADDR
// uc_nation = 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// hc_gallery =  ;
3545: LD_ADDR_OWVAR 33
3549: PUSH
3550: LD_STRING 
3552: ST_TO_ADDR
// hc_name =  ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING 
3560: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 3
3566: PPUSH
3567: LD_EXP 35
3571: PPUSH
3572: LD_EXP 36
3576: PPUSH
3577: CALL_OW 12
3581: PPUSH
3582: CALL_OW 380
// un = CreateHuman ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 44
3595: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3596: LD_VAR 0 3
3600: PPUSH
3601: LD_VAR 0 4
3605: PUSH
3606: LD_INT 1
3608: ARRAY
3609: PPUSH
3610: CALL_OW 52
// end ;
3614: GO 3485
3616: POP
3617: POP
// end ; end_of_file
3618: LD_VAR 0 1
3622: RET
// every 1 do
3623: GO 3625
3625: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 19
3631: PPUSH
3632: CALL_OW 332
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
3636: LD_EXP 1
3640: PPUSH
3641: CALL_OW 310
3645: PPUSH
3646: CALL_OW 87
// if IsOk ( Gary ) then
3650: LD_EXP 10
3654: PPUSH
3655: CALL_OW 302
3659: IFFALSE 3705
// begin DialogueOn ;
3661: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3665: LD_EXP 10
3669: PPUSH
3670: LD_STRING D2-Gary-1
3672: PPUSH
3673: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3677: LD_EXP 1
3681: PPUSH
3682: LD_STRING D2-JMM-1
3684: PPUSH
3685: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3689: LD_EXP 10
3693: PPUSH
3694: LD_STRING D2-Gary-2
3696: PPUSH
3697: CALL_OW 88
// DialogueOff ;
3701: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3705: LD_STRING M1
3707: PPUSH
3708: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3712: LD_INT 38
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 100
3720: PPUSH
3721: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3725: LD_INT 47
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 50
3733: PPUSH
3734: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3738: LD_INT 47
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 50
3746: PPUSH
3747: CALL_OW 291
// SaveForQuickRestart ;
3751: CALL_OW 22
// end ;
3755: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3756: LD_EXP 1
3760: PPUSH
3761: LD_EXP 11
3765: PPUSH
3766: CALL_OW 296
3770: PUSH
3771: LD_INT 15
3773: LESS
3774: IFFALSE 4219
3776: GO 3778
3778: DISABLE
// begin InGameOn ;
3779: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3783: LD_EXP 1
3787: PPUSH
3788: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3792: LD_EXP 1
3796: PPUSH
3797: CALL_OW 87
// wait ( 0 0$1 ) ;
3801: LD_INT 35
3803: PPUSH
3804: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3808: LD_INT 35
3810: PPUSH
3811: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
3815: LD_EXP 11
3819: PUSH
3820: LD_EXP 13
3824: PUSH
3825: LD_EXP 12
3829: PUSH
3830: LD_EXP 14
3834: PUSH
3835: LD_EXP 8
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3856: LD_EXP 1
3860: PPUSH
3861: LD_EXP 11
3865: PPUSH
3866: CALL_OW 296
3870: PUSH
3871: LD_INT 5
3873: LESS
3874: IFFALSE 3808
// ComTurnUnit ( JMM , Simms ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_EXP 11
3885: PPUSH
3886: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3890: LD_EXP 11
3894: PUSH
3895: LD_EXP 13
3899: PUSH
3900: LD_EXP 12
3904: PUSH
3905: LD_EXP 14
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PPUSH
3916: LD_EXP 1
3920: PPUSH
3921: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3925: LD_EXP 1
3929: PUSH
3930: LD_EXP 11
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3943: LD_EXP 11
3947: PPUSH
3948: LD_STRING D2a-Sim-1
3950: PPUSH
3951: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3955: LD_EXP 1
3959: PPUSH
3960: LD_STRING D2a-JMM-1
3962: PPUSH
3963: CALL_OW 88
// if IsOk ( Joan ) then
3967: LD_EXP 13
3971: PPUSH
3972: CALL_OW 302
3976: IFFALSE 4028
// begin ComTurnUnit ( JMM , Joan ) ;
3978: LD_EXP 1
3982: PPUSH
3983: LD_EXP 13
3987: PPUSH
3988: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
3992: LD_EXP 13
3996: PPUSH
3997: LD_STRING D2b-Joan-1
3999: PPUSH
4000: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D2b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4016: LD_EXP 13
4020: PPUSH
4021: LD_STRING D2b-Joan-2
4023: PPUSH
4024: CALL_OW 88
// end ; if IsOk ( Denis ) then
4028: LD_EXP 12
4032: PPUSH
4033: CALL_OW 302
4037: IFFALSE 4065
// begin ComTurnUnit ( JMM , Denis ) ;
4039: LD_EXP 1
4043: PPUSH
4044: LD_EXP 12
4048: PPUSH
4049: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4053: LD_EXP 12
4057: PPUSH
4058: LD_STRING D2c-Den-1
4060: PPUSH
4061: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4065: LD_EXP 14
4069: PPUSH
4070: CALL_OW 302
4074: IFFALSE 4114
// begin ComTurnUnit ( JMM , Khatam ) ;
4076: LD_EXP 1
4080: PPUSH
4081: LD_EXP 14
4085: PPUSH
4086: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4090: LD_EXP 1
4094: PPUSH
4095: LD_STRING D2c-JMM-1
4097: PPUSH
4098: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4102: LD_EXP 14
4106: PPUSH
4107: LD_STRING D2c-Khat-1
4109: PPUSH
4110: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4114: LD_EXP 8
4118: PPUSH
4119: CALL_OW 302
4123: IFFALSE 4178
// begin repeat wait ( 0 0$1 ) ;
4125: LD_INT 35
4127: PPUSH
4128: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_EXP 1
4141: PPUSH
4142: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_EXP 8
4155: PPUSH
4156: CALL_OW 296
4160: PUSH
4161: LD_INT 5
4163: LESS
4164: IFFALSE 4125
// Say ( Kikuchi , D3b-Yam-1 ) ;
4166: LD_EXP 8
4170: PPUSH
4171: LD_STRING D3b-Yam-1
4173: PPUSH
4174: CALL_OW 88
// end ; InGameOff ;
4178: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4182: LD_INT 22
4184: PUSH
4185: LD_INT 4
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 69
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4204: LD_STRING M1a
4206: PPUSH
4207: CALL_OW 337
// joinEpsilon = 1 ;
4211: LD_ADDR_EXP 28
4215: PUSH
4216: LD_INT 1
4218: ST_TO_ADDR
// end ;
4219: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4220: LD_EXP 57
4224: PUSH
4225: LD_INT 1
4227: EQUAL
4228: IFFALSE 4834
4230: GO 4232
4232: DISABLE
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4237: LD_ADDR_VAR 0 1
4241: PUSH
4242: LD_INT 22
4244: PUSH
4245: LD_INT 1
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 25
4254: PUSH
4255: LD_INT 4
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PUSH
4262: LD_INT 26
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: PUSH
4282: LD_INT 1
4284: ARRAY
4285: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: LD_INT 22
4293: PUSH
4294: LD_INT 1
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 26
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: LD_INT 25
4316: PUSH
4317: LD_INT 1
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 25
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 25
4336: PUSH
4337: LD_INT 3
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: PPUSH
4355: CALL_OW 69
4359: PUSH
4360: LD_INT 1
4362: ARRAY
4363: ST_TO_ADDR
// DialogueOn ;
4364: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4368: LD_EXP 17
4372: PPUSH
4373: CALL_OW 302
4377: IFFALSE 4393
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4379: LD_EXP 17
4383: PPUSH
4384: LD_STRING D3-Sci1-1
4386: PPUSH
4387: CALL_OW 88
4391: GO 4405
// Say ( tmp1 , D3-Sci1-1 ) ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_STRING D3-Sci1-1
4400: PPUSH
4401: CALL_OW 88
// if IsOk ( Gary ) then
4405: LD_EXP 10
4409: PPUSH
4410: CALL_OW 302
4414: IFFALSE 4430
// Say ( Gary , D3-Gary-1 ) else
4416: LD_EXP 10
4420: PPUSH
4421: LD_STRING D3-Gary-1
4423: PPUSH
4424: CALL_OW 88
4428: GO 4442
// Say ( tmp2 , D3-Gary-1 ) ;
4430: LD_VAR 0 2
4434: PPUSH
4435: LD_STRING D3-Gary-1
4437: PPUSH
4438: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4442: LD_EXP 17
4446: PPUSH
4447: CALL_OW 302
4451: IFFALSE 4467
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4453: LD_EXP 17
4457: PPUSH
4458: LD_STRING D3-Sci1-2
4460: PPUSH
4461: CALL_OW 88
4465: GO 4479
// Say ( tmp1 , D3-Sci1-2 ) ;
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_STRING D3-Sci1-2
4474: PPUSH
4475: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4479: LD_EXP 1
4483: PPUSH
4484: LD_STRING D3-JMM-2
4486: PPUSH
4487: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4491: LD_EXP 17
4495: PPUSH
4496: CALL_OW 302
4500: IFFALSE 4516
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4502: LD_EXP 17
4506: PPUSH
4507: LD_STRING D3-Sci1-3
4509: PPUSH
4510: CALL_OW 88
4514: GO 4528
// Say ( tmp1 , D3-Sci1-3 ) ;
4516: LD_VAR 0 1
4520: PPUSH
4521: LD_STRING D3-Sci1-3
4523: PPUSH
4524: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4528: LD_EXP 1
4532: PPUSH
4533: LD_STRING D3-JMM-3
4535: PPUSH
4536: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4540: LD_EXP 17
4544: PPUSH
4545: CALL_OW 302
4549: IFFALSE 4565
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4551: LD_EXP 17
4555: PPUSH
4556: LD_STRING D3-Sci1-4
4558: PPUSH
4559: CALL_OW 88
4563: GO 4577
// Say ( tmp1 , D3-Sci1-4 ) ;
4565: LD_VAR 0 1
4569: PPUSH
4570: LD_STRING D3-Sci1-4
4572: PPUSH
4573: CALL_OW 88
// DialogueOff ;
4577: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 1
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4594: LD_INT 32
4596: PPUSH
4597: LD_INT 1
4599: PPUSH
4600: LD_INT 1
4602: PPUSH
4603: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4607: LD_INT 12
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
4620: LD_INT 33
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4633: LD_STRING M2
4635: PPUSH
4636: CALL_OW 337
// wait ( 5 5$0 ) ;
4640: LD_INT 10500
4642: PPUSH
4643: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4647: LD_EXP 11
4651: PPUSH
4652: CALL_OW 302
4656: PUSH
4657: LD_EXP 12
4661: PPUSH
4662: CALL_OW 302
4666: AND
4667: IFFALSE 4834
// begin DialogueOn ;
4669: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4673: LD_EXP 11
4677: PPUSH
4678: LD_STRING D3a-Sim-1
4680: PPUSH
4681: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4685: LD_EXP 12
4689: PPUSH
4690: LD_STRING D3a-Sci1-1
4692: PPUSH
4693: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4697: LD_EXP 11
4701: PPUSH
4702: LD_STRING D3a-Sim-2
4704: PPUSH
4705: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4709: LD_EXP 12
4713: PPUSH
4714: LD_STRING D3a-Sci1-2
4716: PPUSH
4717: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4721: LD_EXP 11
4725: PPUSH
4726: LD_STRING D3a-Sim-3
4728: PPUSH
4729: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4733: LD_EXP 12
4737: PPUSH
4738: LD_STRING D3a-Sci1-3
4740: PPUSH
4741: CALL_OW 88
// if IsOK ( Joan ) then
4745: LD_EXP 13
4749: PPUSH
4750: CALL_OW 302
4754: IFFALSE 4770
// Say ( Simms , D3a-Sim-4 ) else
4756: LD_EXP 11
4760: PPUSH
4761: LD_STRING D3a-Sim-4
4763: PPUSH
4764: CALL_OW 88
4768: GO 4782
// Say ( Simms , D3a-Sim-4a ) ;
4770: LD_EXP 11
4774: PPUSH
4775: LD_STRING D3a-Sim-4a
4777: PPUSH
4778: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4782: LD_EXP 12
4786: PPUSH
4787: LD_STRING D3a-Sci1-4
4789: PPUSH
4790: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4794: LD_EXP 11
4798: PPUSH
4799: LD_STRING D3a-Sim-5
4801: PPUSH
4802: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4806: LD_EXP 12
4810: PPUSH
4811: LD_STRING D3a-Sci1-5
4813: PPUSH
4814: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4818: LD_EXP 11
4822: PPUSH
4823: LD_STRING D3a-Sim-6
4825: PPUSH
4826: CALL_OW 88
// DialogueOff ;
4830: CALL_OW 7
// end ; end ;
4834: PPOPN 2
4836: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4837: LD_EXP 28
4841: PUSH
4842: LD_INT 1
4844: EQUAL
4845: IFFALSE 5165
4847: GO 4849
4849: DISABLE
4850: LD_INT 0
4852: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4853: LD_EXP 18
4857: PPUSH
4858: LD_STRING D4-FSol1-1
4860: PPUSH
4861: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4865: LD_STRING M3
4867: PPUSH
4868: CALL_OW 337
// PrepareRussians ;
4872: CALL 2541 0 0
// rnd = Rand ( 1 , 100 ) ;
4876: LD_ADDR_VAR 0 1
4880: PUSH
4881: LD_INT 1
4883: PPUSH
4884: LD_INT 100
4886: PPUSH
4887: CALL_OW 12
4891: ST_TO_ADDR
// if difficulty = 1 then
4892: LD_OWVAR 67
4896: PUSH
4897: LD_INT 1
4899: EQUAL
4900: IFFALSE 4983
// begin if rnd > 0 and rnd < 51 then
4902: LD_VAR 0 1
4906: PUSH
4907: LD_INT 0
4909: GREATER
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: LD_INT 51
4918: LESS
4919: AND
4920: IFFALSE 4929
// BuildRussianBase ( 2 ) ;
<<<<<<< HEAD
4922: LD_INT 2
4924: PPUSH
4925: CALL 7934 0 1
=======
4864: LD_INT 2
4866: PPUSH
4867: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if rnd > 50 and rnd < 81 then
4929: LD_VAR 0 1
4933: PUSH
4934: LD_INT 50
4936: GREATER
4937: PUSH
4938: LD_VAR 0 1
4942: PUSH
4943: LD_INT 81
4945: LESS
4946: AND
4947: IFFALSE 4956
// BuildRussianBase ( 1 ) ;
<<<<<<< HEAD
4949: LD_INT 1
4951: PPUSH
4952: CALL 7934 0 1
=======
4891: LD_INT 1
4893: PPUSH
4894: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if rnd > 80 and rnd < 101 then
4956: LD_VAR 0 1
4960: PUSH
4961: LD_INT 80
4963: GREATER
4964: PUSH
4965: LD_VAR 0 1
4969: PUSH
4970: LD_INT 101
4972: LESS
4973: AND
4974: IFFALSE 4983
// BuildRussianBase ( 3 ) ;
<<<<<<< HEAD
4976: LD_INT 3
4978: PPUSH
4979: CALL 7934 0 1
=======
4918: LD_INT 3
4920: PPUSH
4921: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// end ; if difficulty = 2 then
4983: LD_OWVAR 67
4987: PUSH
4988: LD_INT 2
4990: EQUAL
4991: IFFALSE 5074
// begin if rnd > 0 and rnd < 61 then
4993: LD_VAR 0 1
4997: PUSH
4998: LD_INT 0
5000: GREATER
5001: PUSH
5002: LD_VAR 0 1
5006: PUSH
5007: LD_INT 61
5009: LESS
5010: AND
5011: IFFALSE 5020
// BuildRussianBase ( 2 ) ;
<<<<<<< HEAD
5013: LD_INT 2
5015: PPUSH
5016: CALL 7934 0 1
=======
4955: LD_INT 2
4957: PPUSH
4958: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if rnd > 60 and rnd < 81 then
5020: LD_VAR 0 1
5024: PUSH
5025: LD_INT 60
5027: GREATER
5028: PUSH
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 81
5036: LESS
5037: AND
5038: IFFALSE 5047
// BuildRussianBase ( 1 ) ;
<<<<<<< HEAD
5040: LD_INT 1
5042: PPUSH
5043: CALL 7934 0 1
=======
4982: LD_INT 1
4984: PPUSH
4985: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if rnd > 80 and rnd < 101 then
5047: LD_VAR 0 1
5051: PUSH
5052: LD_INT 80
5054: GREATER
5055: PUSH
5056: LD_VAR 0 1
5060: PUSH
5061: LD_INT 101
5063: LESS
5064: AND
5065: IFFALSE 5074
// BuildRussianBase ( 3 ) ;
<<<<<<< HEAD
5067: LD_INT 3
5069: PPUSH
5070: CALL 7934 0 1
=======
5009: LD_INT 3
5011: PPUSH
5012: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// end ; if difficulty = 3 then
5074: LD_OWVAR 67
5078: PUSH
5079: LD_INT 3
5081: EQUAL
5082: IFFALSE 5165
// begin if rnd > 0 and rnd < 71 then
5084: LD_VAR 0 1
5088: PUSH
5089: LD_INT 0
5091: GREATER
5092: PUSH
5093: LD_VAR 0 1
5097: PUSH
5098: LD_INT 71
5100: LESS
5101: AND
5102: IFFALSE 5111
// BuildRussianBase ( 3 ) ;
<<<<<<< HEAD
5104: LD_INT 3
5106: PPUSH
5107: CALL 7934 0 1
=======
5046: LD_INT 3
5048: PPUSH
5049: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if rnd > 70 and rnd < 81 then
5111: LD_VAR 0 1
5115: PUSH
5116: LD_INT 70
5118: GREATER
5119: PUSH
5120: LD_VAR 0 1
5124: PUSH
5125: LD_INT 81
5127: LESS
5128: AND
5129: IFFALSE 5138
// BuildRussianBase ( 2 ) ;
<<<<<<< HEAD
5131: LD_INT 2
5133: PPUSH
5134: CALL 7934 0 1
=======
5073: LD_INT 2
5075: PPUSH
5076: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// if rnd > 80 and rnd < 101 then
5138: LD_VAR 0 1
5142: PUSH
5143: LD_INT 80
5145: GREATER
5146: PUSH
5147: LD_VAR 0 1
5151: PUSH
5152: LD_INT 101
5154: LESS
5155: AND
5156: IFFALSE 5165
// BuildRussianBase ( 1 ) ;
<<<<<<< HEAD
5158: LD_INT 1
5160: PPUSH
5161: CALL 7934 0 1
=======
5100: LD_INT 1
5102: PPUSH
5103: CALL 7949 0 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// end ; end ;
5165: PPOPN 1
5167: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5168: LD_INT 54
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: CALL_OW 321
5178: PUSH
5179: LD_INT 2
5181: EQUAL
5182: PUSH
5183: LD_INT 21
5185: PPUSH
5186: LD_INT 1
5188: PPUSH
5189: CALL_OW 321
5193: PUSH
5194: LD_INT 2
5196: EQUAL
5197: OR
5198: PUSH
5199: LD_INT 22
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 321
5209: PUSH
5210: LD_INT 2
5212: EQUAL
5213: OR
5214: IFFALSE 5531
5216: GO 5218
5218: DISABLE
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
// begin if IsOk ( Denis ) then
5223: LD_EXP 12
5227: PPUSH
5228: CALL_OW 302
5232: IFFALSE 5326
// begin DialogueOn ;
5234: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5238: LD_EXP 1
5242: PPUSH
5243: LD_STRING D6-JMM-1
5245: PPUSH
5246: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5250: LD_EXP 12
5254: PPUSH
5255: LD_STRING D6-Sci1-1
5257: PPUSH
5258: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5262: LD_EXP 1
5266: PPUSH
5267: LD_STRING D6-JMM-2
5269: PPUSH
5270: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5274: LD_EXP 12
5278: PPUSH
5279: LD_STRING D6-Sci1-2
5281: PPUSH
5282: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5286: LD_EXP 1
5290: PPUSH
5291: LD_STRING D6-JMM-3
5293: PPUSH
5294: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5298: LD_EXP 12
5302: PPUSH
5303: LD_STRING D6-Sci1-3
5305: PPUSH
5306: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5310: LD_EXP 1
5314: PPUSH
5315: LD_STRING D6-JMM-4
5317: PPUSH
5318: CALL_OW 88
// DialogueOff ;
5322: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
5326: LD_INT 1050
5328: PPUSH
5329: CALL_OW 67
// if arabianTrait = 0 then
5333: LD_EXP 48
5337: PUSH
5338: LD_INT 0
5340: EQUAL
5341: IFFALSE 5475
// begin DialogueOn ;
5343: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
<<<<<<< HEAD
5347: LD_INT 22
5349: PUSH
5350: LD_INT 2
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
=======
5289: LD_INT 22
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 25
5301: PUSH
5302: LD_INT 4
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 26
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL_OW 69
5328: PPUSH
5329: LD_STRING D5-Ar1-1
5331: PPUSH
5332: LD_STRING D5-Ar1-1
5334: PPUSH
5335: CALL 7422 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
5339: LD_EXP 26
5343: PPUSH
5344: LD_STRING D5-Diet-1
5346: PPUSH
5347: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
5351: LD_INT 22
5353: PUSH
5354: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 26
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
<<<<<<< HEAD
5380: LIST
5381: PPUSH
5382: CALL_OW 69
5386: PPUSH
5387: LD_STRING D5-Ar1-1
5389: PPUSH
5390: LD_STRING D5-Ar1-1
5392: PPUSH
5393: CALL 7407 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
5397: LD_EXP 26
5401: PPUSH
5402: LD_STRING D5-Diet-1
5404: PPUSH
5405: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
5409: LD_INT 22
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 4
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 26
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 69
5448: PPUSH
5449: LD_STRING D5-Ar1-2
5451: PPUSH
5452: LD_STRING D5-Ar1-2
5454: PPUSH
5455: CALL 7407 0 3
=======
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 69
5390: PPUSH
5391: LD_STRING D5-Ar1-2
5393: PPUSH
5394: LD_STRING D5-Ar1-2
5396: PPUSH
5397: CALL 7422 0 3
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
// Say ( Dietrich , D5-Diet-2 ) ;
5459: LD_EXP 26
5463: PPUSH
5464: LD_STRING D5-Diet-2
5466: PPUSH
5467: CALL_OW 88
// DialogueOff ;
5471: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5475: LD_INT 2100
5477: PUSH
5478: LD_INT 3150
5480: PUSH
5481: LD_INT 4200
5483: PUSH
5484: LD_INT 5250
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_INT 4
5498: PPUSH
5499: CALL_OW 12
5503: ARRAY
5504: PPUSH
5505: CALL_OW 67
// if arabianTrait = 0 then
<<<<<<< HEAD
5509: LD_EXP 48
5513: PUSH
5514: LD_INT 0
5516: EQUAL
5517: IFFALSE 5523
// PrepareArabianTrait ;
5519: CALL 5534 0 0
// arabianTrait = 1 ;
5523: LD_ADDR_EXP 48
5527: PUSH
5528: LD_INT 1
5530: ST_TO_ADDR
// end ;
5531: PPOPN 2
5533: END
// export function PrepareArabianTrait ; var i , tmp ; begin
5534: LD_INT 0
5536: PPUSH
5537: PPUSH
5538: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5539: LD_ADDR_VAR 0 2
5543: PUSH
5544: LD_INT 22
5546: PUSH
5547: LD_INT 2
5549: PUSH
5550: EMPTY
5551: LIST
5552: LIST
5553: PUSH
5554: LD_INT 25
5556: PUSH
5557: LD_INT 4
5559: PUSH
5560: EMPTY
5561: LIST
5562: LIST
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PPUSH
5568: CALL_OW 69
5572: PUSH
5573: FOR_IN
5574: IFFALSE 5587
// ComExitBuilding ( i ) ;
5576: LD_VAR 0 2
5580: PPUSH
5581: CALL_OW 122
5585: GO 5573
5587: POP
5588: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
5589: LD_ADDR_VAR 0 2
5593: PUSH
5594: LD_INT 22
5596: PUSH
5597: LD_INT 2
5599: PUSH
5600: EMPTY
5601: LIST
5602: LIST
5603: PUSH
5604: LD_INT 25
5606: PUSH
5607: LD_INT 3
5609: PUSH
5610: EMPTY
5611: LIST
5612: LIST
5613: PUSH
5614: EMPTY
5615: LIST
5616: LIST
5617: PPUSH
5618: CALL_OW 69
5622: PUSH
5623: FOR_IN
5624: IFFALSE 5637
// ComExitVehicle ( i ) ;
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL_OW 121
5635: GO 5623
5637: POP
5638: POP
// wait ( 0 0$3 ) ;
5639: LD_INT 105
5641: PPUSH
5642: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5646: LD_INT 76
5648: PPUSH
5649: LD_INT 19
5651: PPUSH
5652: CALL_OW 84
// DialogueOn ;
5656: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5660: LD_INT 22
5662: PUSH
5663: LD_INT 1
5665: PUSH
5666: EMPTY
5667: LIST
5668: LIST
5669: PUSH
5670: LD_INT 26
5672: PUSH
5673: LD_INT 1
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: LD_EXP 1
5688: PUSH
5689: EMPTY
5690: LIST
5691: DIFF
5692: PPUSH
5693: CALL_OW 69
5697: PPUSH
5698: LD_STRING D8-Sol1-1
5700: PPUSH
5701: LD_STRING D8-Sol1-1
5703: PPUSH
5704: CALL 7407 0 3
// if IsOK ( DeltaDoctor ) then
5708: LD_EXP 17
5712: PPUSH
5713: CALL_OW 302
5717: IFFALSE 5733
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5719: LD_EXP 17
5723: PPUSH
5724: LD_STRING D8-Sci1-1
5726: PPUSH
5727: CALL_OW 88
5731: GO 5832
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5733: LD_INT 22
5735: PUSH
5736: LD_INT 1
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: LD_INT 26
5745: PUSH
5746: LD_INT 1
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: PUSH
5753: LD_INT 2
5755: PUSH
5756: LD_INT 25
5758: PUSH
5759: LD_INT 1
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: LD_INT 25
5768: PUSH
5769: LD_INT 2
=======
5451: LD_EXP 48
5455: PUSH
5456: LD_INT 0
5458: EQUAL
5459: IFFALSE 5473
// begin arabianTrait = 1 ;
5461: LD_ADDR_EXP 48
5465: PUSH
5466: LD_INT 1
5468: ST_TO_ADDR
// PrepareArabianTrait ;
5469: CALL 5476 0 0
// end ; end ;
5473: PPOPN 2
5475: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
5476: LD_INT 0
5478: PPUSH
5479: PPUSH
5480: PPUSH
5481: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5482: LD_ADDR_VAR 0 2
5486: PUSH
5487: LD_INT 22
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 25
5499: PUSH
5500: LD_INT 4
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PPUSH
5511: CALL_OW 69
5515: PUSH
5516: FOR_IN
5517: IFFALSE 5530
// ComExitBuilding ( i ) ;
5519: LD_VAR 0 2
5523: PPUSH
5524: CALL_OW 122
5528: GO 5516
5530: POP
5531: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 22
5539: PUSH
5540: LD_INT 2
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 25
5549: PUSH
5550: LD_INT 3
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 69
5565: PUSH
5566: FOR_IN
5567: IFFALSE 5580
// ComExitVehicle ( i ) ;
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 121
5578: GO 5566
5580: POP
5581: POP
// wait ( 0 0$3 ) ;
5582: LD_INT 105
5584: PPUSH
5585: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5589: LD_INT 76
5591: PPUSH
5592: LD_INT 19
5594: PPUSH
5595: CALL_OW 84
// DialogueOn ;
5599: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 26
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PPUSH
5627: CALL_OW 69
5631: PUSH
5632: LD_EXP 1
5636: PUSH
5637: LD_EXP 14
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: DIFF
5646: PPUSH
5647: LD_STRING D8-Sol1-1
5649: PPUSH
5650: LD_STRING D8-Sol1-1
5652: PPUSH
5653: CALL 7422 0 3
// if IsOK ( DeltaDoctor ) then
5657: LD_EXP 17
5661: PPUSH
5662: CALL_OW 302
5666: IFFALSE 5682
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING D8-Sci1-1
5675: PPUSH
5676: CALL_OW 88
5680: GO 5787
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5682: LD_INT 22
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 26
5694: PUSH
5695: LD_INT 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 2
5704: PUSH
5705: LD_INT 25
5707: PUSH
5708: LD_INT 1
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 25
5717: PUSH
5718: LD_INT 2
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 25
5727: PUSH
5728: LD_INT 3
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 25
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: PPUSH
5757: CALL_OW 69
5761: PUSH
5762: LD_EXP 1
5766: PUSH
5767: LD_EXP 14
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
<<<<<<< HEAD
5775: PUSH
5776: LD_INT 25
5778: PUSH
5779: LD_INT 3
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: LD_INT 25
5788: PUSH
5789: LD_INT 4
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: LIST
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: LIST
5807: PUSH
5808: LD_EXP 1
5812: PUSH
5813: EMPTY
5814: LIST
5815: DIFF
5816: PPUSH
5817: CALL_OW 69
5821: PPUSH
5822: LD_STRING D8-Sol1-1
5824: PPUSH
5825: LD_STRING D8-Sol1-1
5827: PPUSH
5828: CALL 7407 0 3
// Say ( JMM , D8-JMM-1 ) ;
5832: LD_EXP 1
5836: PPUSH
5837: LD_STRING D8-JMM-1
5839: PPUSH
5840: CALL_OW 88
// DialogueOff ;
5844: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
5848: LD_INT 2
5850: PPUSH
5851: LD_INT 2
5853: PPUSH
5854: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
5858: LD_INT 1
5860: PPUSH
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: LD_INT 1
5869: PPUSH
5870: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
5874: LD_INT 3
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: LD_INT 1
5882: PPUSH
5883: LD_INT 1
5885: PPUSH
5886: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
5890: LD_ADDR_VAR 0 2
5894: PUSH
5895: LD_INT 22
5897: PUSH
5898: LD_INT 2
5900: PUSH
5901: EMPTY
5902: LIST
5903: LIST
5904: PUSH
5905: LD_INT 21
5907: PUSH
5908: LD_INT 1
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: EMPTY
5916: LIST
5917: LIST
5918: PPUSH
5919: CALL_OW 69
5923: PUSH
5924: FOR_IN
5925: IFFALSE 6065
// begin ComExitBuilding ( i ) ;
5927: LD_VAR 0 2
5931: PPUSH
5932: CALL_OW 122
// wait ( 0 0$1 ) ;
5936: LD_INT 35
5938: PPUSH
5939: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 77
5950: PPUSH
5951: LD_INT 10
5953: PPUSH
5954: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_INT 82
5965: PPUSH
5966: LD_INT 5
5968: PPUSH
5969: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
5973: LD_VAR 0 2
5977: PPUSH
5978: LD_INT 95
5980: PPUSH
5981: LD_INT 12
5983: PPUSH
5984: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: LD_INT 102
5995: PPUSH
5996: LD_INT 11
5998: PPUSH
5999: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_INT 116
6010: PPUSH
6011: LD_INT 15
6013: PPUSH
6014: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
6018: LD_VAR 0 2
6022: PPUSH
6023: LD_INT 140
6025: PPUSH
6026: LD_INT 25
6028: PPUSH
6029: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
6033: LD_VAR 0 2
6037: PPUSH
6038: LD_INT 160
6040: PPUSH
6041: LD_INT 56
6043: PPUSH
6044: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6048: LD_VAR 0 2
6052: PPUSH
6053: LD_INT 189
6055: PPUSH
6056: LD_INT 79
6058: PPUSH
6059: CALL_OW 174
// end ;
6063: GO 5924
6065: POP
6066: POP
// arabianAttackersAI = 1 ;
6067: LD_ADDR_EXP 45
6071: PUSH
6072: LD_INT 1
6074: ST_TO_ADDR
// wait ( 0 0$30 ) ;
6075: LD_INT 1050
6077: PPUSH
6078: CALL_OW 67
// if IsOk ( Gary ) then
6082: LD_EXP 10
6086: PPUSH
6087: CALL_OW 302
6091: IFFALSE 6105
// Say ( Gary , D8a-Gary-1 ) ;
6093: LD_EXP 10
6097: PPUSH
6098: LD_STRING D8a-Gary-1
6100: PPUSH
6101: CALL_OW 88
// wait ( 0 0$5 ) ;
6105: LD_INT 175
6107: PPUSH
6108: CALL_OW 67
// if IsOK ( Khatam ) then
6112: LD_EXP 14
6116: PPUSH
6117: CALL_OW 302
6121: IFFALSE 6393
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] [ 1 ] ;
6123: LD_ADDR_VAR 0 3
6127: PUSH
6128: LD_INT 22
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 26
6140: PUSH
6141: LD_INT 1
6143: PUSH
6144: EMPTY
6145: LIST
6146: LIST
6147: PUSH
6148: LD_INT 2
6150: PUSH
6151: LD_INT 25
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 25
6163: PUSH
6164: LD_INT 2
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 25
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 4
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: LIST
6202: PPUSH
6203: CALL_OW 69
6207: PUSH
6208: LD_EXP 1
6212: PUSH
6213: LD_EXP 14
6217: PUSH
6218: LD_EXP 13
6222: PUSH
6223: EMPTY
6224: LIST
6225: LIST
6226: LIST
6227: PUSH
6228: LD_INT 1
6230: ARRAY
6231: DIFF
6232: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6233: LD_EXP 14
6237: PPUSH
6238: LD_INT 8
6240: PPUSH
6241: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6245: LD_EXP 14
6249: PPUSH
6250: CALL_OW 122
// wait ( 0 0$1 ) ;
6254: LD_INT 35
6256: PPUSH
6257: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6261: LD_EXP 14
6265: PPUSH
6266: CALL_OW 121
// wait ( 0 0$1 ) ;
6270: LD_INT 35
6272: PPUSH
6273: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6277: LD_EXP 14
6281: PPUSH
6282: LD_INT 7
6284: PPUSH
6285: CALL_OW 113
// DialogueOn ;
6289: CALL_OW 6
// DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
6293: LD_VAR 0 3
6297: PPUSH
6298: LD_STRING D8b-Sol1-1
6300: PPUSH
6301: LD_STRING D8b-FSol1-1
6303: PPUSH
6304: CALL 7407 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
6308: LD_EXP 14
6312: PPUSH
6313: LD_STRING D8b-Khat-1
6315: PPUSH
6316: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-2 , D8b-FSol1-2 ) ;
6320: LD_VAR 0 3
6324: PPUSH
6325: LD_STRING D8b-Sol1-2
6327: PPUSH
6328: LD_STRING D8b-FSol1-2
6330: PPUSH
6331: CALL 7407 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
6335: LD_EXP 14
6339: PPUSH
6340: LD_STRING D8b-Khat-2
6342: PPUSH
6343: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-3 , D8b-FSol1-3 ) ;
6347: LD_VAR 0 3
6351: PPUSH
6352: LD_STRING D8b-Sol1-3
6354: PPUSH
6355: LD_STRING D8b-FSol1-3
6357: PPUSH
6358: CALL 7407 0 3
// Say ( Khatam , D8b-Khat-3 ) ;
6362: LD_EXP 14
6366: PPUSH
6367: LD_STRING D8b-Khat-3
6369: PPUSH
6370: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-4 , D8b-FSol1-4 ) ;
6374: LD_VAR 0 3
6378: PPUSH
6379: LD_STRING D8b-Sol1-4
6381: PPUSH
6382: LD_STRING D8b-FSol1-4
6384: PPUSH
6385: CALL 7407 0 3
// DialogueOff ;
6389: CALL_OW 7
// end ; end ;
6393: LD_VAR 0 1
6397: RET
// every 0 0$1 do var i ;
6398: GO 6400
6400: DISABLE
6401: LD_INT 0
6403: PPUSH
// begin enable ;
6404: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6405: LD_ADDR_VAR 0 1
6409: PUSH
6410: LD_INT 7
6412: PPUSH
6413: LD_INT 22
6415: PUSH
6416: LD_INT 2
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PPUSH
6423: CALL_OW 70
6427: PUSH
6428: FOR_IN
6429: IFFALSE 6497
// begin if GetClass ( i ) = 4 then
6431: LD_VAR 0 1
6435: PPUSH
6436: CALL_OW 257
6440: PUSH
6441: LD_INT 4
6443: EQUAL
6444: IFFALSE 6456
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6446: LD_INT 1
6448: PPUSH
6449: LD_STRING 10_ScientistsEscape_1
6451: PPUSH
6452: CALL_OW 39
// if i = Dietrich then
6456: LD_VAR 0 1
6460: PUSH
6461: LD_EXP 26
6465: EQUAL
6466: IFFALSE 6478
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6468: LD_INT 1
6470: PPUSH
6471: LD_STRING 10_GensherEscape_1
6473: PPUSH
6474: CALL_OW 39
// arabianEscape = 1 ;
6478: LD_ADDR_EXP 46
6482: PUSH
6483: LD_INT 1
6485: ST_TO_ADDR
// RemoveUnit ( i ) ;
6486: LD_VAR 0 1
6490: PPUSH
6491: CALL_OW 64
// end ;
6495: GO 6428
6497: POP
6498: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6499: LD_EXP 14
6503: PPUSH
6504: LD_INT 7
6506: PPUSH
6507: CALL_OW 308
6511: IFFALSE 6530
// begin KhatamStatus = 1 ;
6513: LD_ADDR_EXP 49
6517: PUSH
6518: LD_INT 1
6520: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6521: LD_EXP 14
6525: PPUSH
6526: CALL_OW 64
// end ; end ;
6530: PPOPN 1
6532: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6533: LD_EXP 14
6537: PPUSH
6538: CALL_OW 301
6542: IFFALSE 6555
6544: GO 6546
6546: DISABLE
// KhatamStatus = 0 ;
6547: LD_ADDR_EXP 49
6551: PUSH
6552: LD_INT 0
6554: ST_TO_ADDR
6555: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
6556: LD_INT 22
6558: PUSH
6559: LD_INT 2
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: PUSH
6566: LD_INT 21
6568: PUSH
6569: LD_INT 1
6571: PUSH
6572: EMPTY
6573: LIST
6574: LIST
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PPUSH
6580: CALL_OW 69
6584: PUSH
6585: LD_INT 0
6587: EQUAL
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_INT 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 21
6601: PUSH
6602: LD_INT 1
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: PPUSH
6613: CALL_OW 69
6617: PUSH
6618: LD_INT 0
6620: EQUAL
6621: AND
6622: IFFALSE 6635
6624: GO 6626
6626: DISABLE
// arabianDefeated = 1 ;
6627: LD_ADDR_EXP 47
6631: PUSH
6632: LD_INT 1
6634: ST_TO_ADDR
6635: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
6636: LD_INT 54
6638: PPUSH
6639: LD_INT 1
6641: PPUSH
6642: CALL_OW 321
6646: PUSH
6647: LD_INT 2
6649: EQUAL
6650: PUSH
6651: LD_INT 55
6653: PPUSH
6654: LD_INT 1
6656: PPUSH
6657: CALL_OW 321
6661: PUSH
6662: LD_INT 2
6664: EQUAL
6665: AND
6666: PUSH
6667: LD_INT 21
6669: PPUSH
6670: LD_INT 1
6672: PPUSH
6673: CALL_OW 321
6677: PUSH
6678: LD_INT 2
6680: EQUAL
6681: AND
6682: PUSH
6683: LD_INT 22
6685: PPUSH
6686: LD_INT 1
6688: PPUSH
6689: CALL_OW 321
6693: PUSH
6694: LD_INT 2
6696: EQUAL
6697: AND
6698: PUSH
6699: LD_INT 12
6701: PPUSH
6702: LD_INT 1
6704: PPUSH
6705: CALL_OW 321
6709: PUSH
6710: LD_INT 2
6712: EQUAL
6713: AND
6714: PUSH
6715: LD_INT 32
6717: PPUSH
6718: LD_INT 1
6720: PPUSH
6721: CALL_OW 321
6725: PUSH
6726: LD_INT 2
6728: EQUAL
6729: AND
6730: PUSH
6731: LD_EXP 56
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: AND
6740: PUSH
6741: LD_EXP 48
6745: PUSH
6746: LD_INT 0
6748: EQUAL
6749: AND
6750: IFFALSE 6767
6752: GO 6754
6754: DISABLE
// begin PrepareArabianTrait ;
6755: CALL 5534 0 0
// arabianTrait = 1 ;
6759: LD_ADDR_EXP 48
6763: PUSH
6764: LD_INT 1
6766: ST_TO_ADDR
// end ;
6767: END
// every 9 9$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6768: LD_EXP 28
6772: PUSH
6773: LD_INT 1
6775: EQUAL
6776: PUSH
6777: LD_STRING 02_mikhailStatus_1
6779: PPUSH
6780: LD_INT 0
6782: PPUSH
6783: CALL_OW 30
6787: PUSH
6788: LD_INT 1
6790: EQUAL
6791: AND
6792: IFFALSE 6801
6794: GO 6796
6796: DISABLE
// PrepareCornell ;
6797: CALL 2405 0 0
6801: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6802: LD_INT 1
6804: PPUSH
6805: LD_EXP 19
6809: PPUSH
6810: CALL_OW 292
6814: IFFALSE 7039
6816: GO 6818
6818: DISABLE
// begin InGameOn ;
6819: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6823: LD_EXP 19
6827: PPUSH
6828: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6832: LD_EXP 19
6836: PPUSH
6837: LD_STRING D7-Corn-1
6839: PPUSH
6840: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
6844: LD_INT 22
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 2
6856: PUSH
6857: LD_INT 25
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 25
6869: PUSH
6870: LD_INT 2
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 25
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 25
6889: PUSH
6890: LD_INT 4
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: LIST
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: PPUSH
6908: CALL_OW 69
6912: PUSH
6913: LD_EXP 1
6917: PUSH
6918: LD_EXP 13
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: DIFF
6927: PPUSH
6928: LD_STRING D7-Sol1-1
6930: PPUSH
6931: LD_STRING D7-FSol1-1
6933: PPUSH
6934: CALL 7407 0 3
// CenterNowOnUnits ( Cornell ) ;
6938: LD_EXP 19
6942: PPUSH
6943: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
6947: LD_EXP 19
6951: PPUSH
6952: LD_STRING D7-Corn-2
6954: PPUSH
6955: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6959: LD_EXP 1
6963: PPUSH
6964: LD_STRING D7-JMM-2
6966: PPUSH
6967: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
6971: LD_EXP 19
6975: PPUSH
6976: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
6980: LD_EXP 19
6984: PPUSH
6985: LD_STRING D7-Corn-3
6987: PPUSH
6988: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
6992: LD_EXP 19
6996: PPUSH
6997: LD_INT 250
6999: PPUSH
7000: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
7004: LD_EXP 19
7008: PPUSH
7009: LD_INT 1
7011: PPUSH
7012: CALL_OW 235
// wait ( 0 0$1 ) ;
7016: LD_INT 35
7018: PPUSH
7019: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
7023: LD_EXP 1
7027: PPUSH
7028: LD_STRING D7-JMM-3
7030: PPUSH
7031: CALL_OW 88
// InGameOff ;
7035: CALL_OW 9
// end ;
7039: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
7040: LD_EXP 19
7044: PPUSH
7045: CALL_OW 255
7049: PUSH
7050: LD_INT 1
7052: EQUAL
7053: PUSH
7054: LD_EXP 19
7058: PPUSH
7059: CALL_OW 256
7063: PUSH
7064: LD_INT 251
7066: GREATER
7067: AND
7068: IFFALSE 7261
7070: GO 7072
7072: DISABLE
// begin DialogueOn ;
7073: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7077: LD_EXP 1
7081: PPUSH
7082: LD_STRING D7a-JMM-1
7084: PPUSH
7085: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7089: LD_EXP 19
7093: PPUSH
7094: LD_STRING D7a-Corn-1
7096: PPUSH
7097: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7101: LD_EXP 1
7105: PPUSH
7106: LD_STRING D7a-JMM-2
7108: PPUSH
7109: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7113: LD_EXP 19
7117: PPUSH
7118: LD_STRING D7a-Corn-2
7120: PPUSH
7121: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7125: LD_EXP 1
7129: PPUSH
7130: LD_STRING D7a-JMM-3
7132: PPUSH
7133: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7137: LD_EXP 19
7141: PPUSH
7142: LD_STRING D7a-Corn-3
7144: PPUSH
7145: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7149: LD_EXP 1
7153: PPUSH
7154: LD_STRING D7a-JMM-4
7156: PPUSH
7157: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7161: LD_EXP 19
7165: PPUSH
7166: LD_STRING D7a-Corn-4
7168: PPUSH
7169: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7173: LD_EXP 1
7177: PPUSH
7178: LD_STRING D7a-JMM-5
7180: PPUSH
7181: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7185: LD_EXP 19
7189: PPUSH
7190: LD_STRING D7a-Corn-5
7192: PPUSH
7193: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
7197: LD_EXP 1
7201: PPUSH
7202: LD_STRING D7a-JMM-6
7204: PPUSH
7205: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
7209: LD_EXP 19
7213: PPUSH
7214: LD_STRING D7a-Corn-6
7216: PPUSH
7217: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
7221: LD_EXP 1
7225: PPUSH
7226: LD_STRING D7a-JMM-7
7228: PPUSH
7229: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
7233: LD_EXP 19
7237: PPUSH
7238: LD_STRING D7a-Corn-7
7240: PPUSH
7241: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7245: LD_EXP 1
7249: PPUSH
7250: LD_STRING D7a-JMM-8
7252: PPUSH
7253: CALL_OW 88
// DialogueOff ;
7257: CALL_OW 7
// end ;
7261: END
// every 0 0$1 trigger telep_ru_dialog do
7262: LD_EXP 55
7266: IFFALSE 7349
7268: GO 7270
7270: DISABLE
// begin DialogueOn ;
7271: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
7275: LD_EXP 55
7279: PUSH
7280: LD_INT 1
7282: ARRAY
7283: PPUSH
7284: LD_EXP 55
7288: PUSH
7289: LD_INT 2
7291: ARRAY
7292: PPUSH
7293: CALL_OW 86
// if IsOk ( Cyrus ) then
7297: LD_EXP 5
7301: PPUSH
7302: CALL_OW 302
7306: IFFALSE 7322
// Say ( Cyrus , D10-Cyrus-1 ) else
7308: LD_EXP 5
7312: PPUSH
7313: LD_STRING D10-Cyrus-1
7315: PPUSH
7316: CALL_OW 88
7320: GO 7345
// if IsOk ( JMM ) then
7322: LD_EXP 1
7326: PPUSH
7327: CALL_OW 302
7331: IFFALSE 7345
// Say ( JMM , D10-JMM-1 ) ;
7333: LD_EXP 1
7337: PPUSH
7338: LD_STRING D10-JMM-1
7340: PPUSH
7341: CALL_OW 88
// DialogueOff ;
7345: CALL_OW 7
// end ; end_of_file
7349: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7350: LD_INT 0
7352: PPUSH
7353: PPUSH
// if exist_mode then
7354: LD_VAR 0 2
7358: IFFALSE 7377
// unit := CreateCharacter ( ident ) else
7360: LD_ADDR_VAR 0 4
7364: PUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL_OW 34
7374: ST_TO_ADDR
7375: GO 7392
// unit := NewCharacter ( ident ) ;
7377: LD_ADDR_VAR 0 4
7381: PUSH
7382: LD_VAR 0 1
7386: PPUSH
7387: CALL_OW 25
7391: ST_TO_ADDR
// result := unit ;
7392: LD_ADDR_VAR 0 3
7396: PUSH
7397: LD_VAR 0 4
7401: ST_TO_ADDR
// end ;
7402: LD_VAR 0 3
7406: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7407: LD_INT 0
7409: PPUSH
7410: PPUSH
7411: PPUSH
// rnd = rand ( 1 , characters ) ;
7412: LD_ADDR_VAR 0 6
7416: PUSH
7417: LD_INT 1
7419: PPUSH
7420: LD_VAR 0 1
7424: PPUSH
7425: CALL_OW 12
7429: ST_TO_ADDR
// for i = 1 to characters do
7430: LD_ADDR_VAR 0 5
7434: PUSH
7435: DOUBLE
7436: LD_INT 1
7438: DEC
7439: ST_TO_ADDR
7440: LD_VAR 0 1
7444: PUSH
7445: FOR_TO
7446: IFFALSE 7556
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7448: LD_VAR 0 5
7452: PUSH
7453: LD_VAR 0 6
7457: EQUAL
7458: PUSH
7459: LD_VAR 0 1
7463: PUSH
7464: LD_VAR 0 5
7468: ARRAY
7469: PPUSH
7470: CALL_OW 258
7474: PUSH
7475: LD_INT 1
7477: EQUAL
7478: AND
7479: IFFALSE 7501
// Say ( characters [ i ] , dialogMID ) ;
7481: LD_VAR 0 1
7485: PUSH
7486: LD_VAR 0 5
7490: ARRAY
7491: PPUSH
7492: LD_VAR 0 2
7496: PPUSH
7497: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7501: LD_VAR 0 5
7505: PUSH
7506: LD_VAR 0 6
7510: EQUAL
7511: PUSH
7512: LD_VAR 0 1
7516: PUSH
7517: LD_VAR 0 5
7521: ARRAY
7522: PPUSH
7523: CALL_OW 258
7527: PUSH
7528: LD_INT 2
7530: EQUAL
7531: AND
7532: IFFALSE 7554
// Say ( characters [ i ] , dialogFID ) ;
7534: LD_VAR 0 1
7538: PUSH
7539: LD_VAR 0 5
7543: ARRAY
7544: PPUSH
7545: LD_VAR 0 3
7549: PPUSH
7550: CALL_OW 88
// end ;
7554: GO 7445
7556: POP
7557: POP
// end ;
7558: LD_VAR 0 4
7562: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7563: LD_INT 0
7565: PPUSH
7566: PPUSH
// for i in charactersList do
7567: LD_ADDR_VAR 0 4
7571: PUSH
7572: LD_VAR 0 1
7576: PUSH
7577: FOR_IN
7578: IFFALSE 7607
// begin if IsOk ( i ) then
7580: LD_VAR 0 4
7584: PPUSH
7585: CALL_OW 302
7589: IFFALSE 7605
// SaveCharacters ( i , ident ) ;
7591: LD_VAR 0 4
7595: PPUSH
7596: LD_VAR 0 2
7600: PPUSH
7601: CALL_OW 38
// end ;
7605: GO 7577
7607: POP
7608: POP
// end ;
7609: LD_VAR 0 3
7613: RET
// export function PrepareDifficulty ; begin
7614: LD_INT 0
7616: PPUSH
// if difficulty = 1 then
7617: LD_OWVAR 67
7621: PUSH
7622: LD_INT 1
7624: EQUAL
7625: IFFALSE 7669
// begin RuSolMinLevel = 4 ;
7627: LD_ADDR_EXP 35
7631: PUSH
7632: LD_INT 4
7634: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7635: LD_ADDR_EXP 36
7639: PUSH
7640: LD_INT 7
7642: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7643: LD_INT 51
7645: PPUSH
7646: LD_INT 6
7648: PPUSH
7649: LD_INT 2
7651: PPUSH
7652: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7656: LD_INT 51
7658: PPUSH
7659: LD_INT 5
7661: PPUSH
7662: LD_INT 2
7664: PPUSH
7665: CALL_OW 322
// end ; if difficulty = 2 then
7669: LD_OWVAR 67
7673: PUSH
7674: LD_INT 2
7676: EQUAL
7677: IFFALSE 7773
// begin RuSolMinLevel = 5 ;
7679: LD_ADDR_EXP 35
7683: PUSH
7684: LD_INT 5
7686: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7687: LD_ADDR_EXP 36
7691: PUSH
7692: LD_INT 7
7694: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7695: LD_INT 51
7697: PPUSH
7698: LD_INT 6
7700: PPUSH
7701: LD_INT 2
7703: PPUSH
7704: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7708: LD_INT 57
7710: PPUSH
7711: LD_INT 6
7713: PPUSH
7714: LD_INT 2
7716: PPUSH
7717: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7721: LD_INT 63
7723: PPUSH
7724: LD_INT 6
7726: PPUSH
7727: LD_INT 2
7729: PPUSH
7730: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7734: LD_INT 51
7736: PPUSH
7737: LD_INT 5
7739: PPUSH
7740: LD_INT 2
7742: PPUSH
7743: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7747: LD_INT 5
7749: PPUSH
7750: LD_INT 2
7752: PPUSH
7753: LD_INT 2
7755: PPUSH
7756: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7760: LD_INT 5
7762: PPUSH
7763: LD_INT 5
7765: PPUSH
7766: LD_INT 2
7768: PPUSH
7769: CALL_OW 322
// end ; if difficulty = 3 then
7773: LD_OWVAR 67
7777: PUSH
7778: LD_INT 3
7780: EQUAL
7781: IFFALSE 7929
// begin RuSolMinLevel = 6 ;
7783: LD_ADDR_EXP 35
7787: PUSH
7788: LD_INT 6
7790: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7791: LD_ADDR_EXP 36
7795: PUSH
7796: LD_INT 8
7798: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7799: LD_INT 51
7801: PPUSH
7802: LD_INT 6
7804: PPUSH
7805: LD_INT 2
7807: PPUSH
7808: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7812: LD_INT 57
7814: PPUSH
7815: LD_INT 6
7817: PPUSH
7818: LD_INT 2
7820: PPUSH
7821: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7825: LD_INT 52
7827: PPUSH
7828: LD_INT 6
7830: PPUSH
7831: LD_INT 2
7833: PPUSH
7834: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7838: LD_INT 58
7840: PPUSH
7841: LD_INT 6
7843: PPUSH
7844: LD_INT 2
7846: PPUSH
7847: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7851: LD_INT 63
7853: PPUSH
7854: LD_INT 6
7856: PPUSH
7857: LD_INT 2
7859: PPUSH
7860: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7864: LD_INT 64
7866: PPUSH
7867: LD_INT 6
7869: PPUSH
7870: LD_INT 2
7872: PPUSH
7873: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7877: LD_INT 51
7879: PPUSH
7880: LD_INT 5
7882: PPUSH
7883: LD_INT 2
7885: PPUSH
7886: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7890: LD_INT 52
7892: PPUSH
7893: LD_INT 5
7895: PPUSH
7896: LD_INT 2
7898: PPUSH
7899: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7903: LD_INT 66
7905: PPUSH
7906: LD_INT 2
7908: PPUSH
7909: LD_INT 2
7911: PPUSH
7912: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7916: LD_INT 66
7918: PPUSH
7919: LD_INT 5
7921: PPUSH
7922: LD_INT 2
7924: PPUSH
7925: CALL_OW 322
// end ; end ;
7929: LD_VAR 0 1
7933: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
7934: LD_INT 0
7936: PPUSH
7937: PPUSH
7938: PPUSH
7939: PPUSH
7940: PPUSH
// case position of 1 :
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 1
7948: DOUBLE
7949: EQUAL
7950: IFTRUE 7954
7952: GO 7965
7954: POP
// area := westConv ; 2 :
7955: LD_ADDR_VAR 0 6
7959: PUSH
7960: LD_INT 20
7962: ST_TO_ADDR
7963: GO 8004
7965: LD_INT 2
7967: DOUBLE
7968: EQUAL
7969: IFTRUE 7973
7971: GO 7984
7973: POP
// area := midConv ; 3 :
7974: LD_ADDR_VAR 0 6
7978: PUSH
7979: LD_INT 21
7981: ST_TO_ADDR
7982: GO 8004
7984: LD_INT 3
7986: DOUBLE
7987: EQUAL
7988: IFTRUE 7992
7990: GO 8003
7992: POP
// area := eastConv ; end ;
7993: LD_ADDR_VAR 0 6
7997: PUSH
7998: LD_INT 22
8000: ST_TO_ADDR
8001: GO 8004
8003: POP
// area := AreaToList ( area , 0 ) ;
8004: LD_ADDR_VAR 0 6
8008: PUSH
8009: LD_VAR 0 6
8013: PPUSH
8014: LD_INT 0
8016: PPUSH
8017: CALL_OW 517
8021: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: DOUBLE
8028: LD_INT 1
8030: DEC
8031: ST_TO_ADDR
8032: LD_VAR 0 6
8036: PUSH
8037: LD_INT 1
8039: ARRAY
8040: PUSH
8041: FOR_TO
8042: IFFALSE 8123
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
8044: LD_VAR 0 6
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: PUSH
8053: LD_VAR 0 3
8057: ARRAY
8058: PPUSH
8059: LD_VAR 0 6
8063: PUSH
8064: LD_INT 2
8066: ARRAY
8067: PUSH
8068: LD_VAR 0 3
8072: ARRAY
8073: PPUSH
8074: LD_INT 1
8076: PPUSH
8077: LD_INT 1
8079: PPUSH
8080: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
8084: LD_VAR 0 6
8088: PUSH
8089: LD_INT 1
8091: ARRAY
8092: PUSH
8093: LD_VAR 0 3
8097: ARRAY
8098: PPUSH
8099: LD_VAR 0 6
8103: PUSH
8104: LD_INT 2
8106: ARRAY
8107: PUSH
8108: LD_VAR 0 3
8112: ARRAY
8113: PPUSH
8114: LD_INT 1
8116: PPUSH
8117: CALL_OW 331
// end ;
8121: GO 8041
8123: POP
8124: POP
// ruPossition = position ;
8125: LD_ADDR_EXP 40
8129: PUSH
8130: LD_VAR 0 1
8134: ST_TO_ADDR
// if position = 1 then
8135: LD_VAR 0 1
8139: PUSH
8140: LD_INT 1
8142: EQUAL
8143: IFFALSE 8919
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8145: LD_ADDR_VAR 0 4
8149: PUSH
8150: LD_INT 22
8152: PUSH
8153: LD_INT 3
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 2
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
=======
5775: DIFF
5776: PPUSH
5777: LD_STRING D8-Sol1-1
5779: PPUSH
5780: LD_STRING D8-Sol1-1
5782: PPUSH
5783: CALL 7422 0 3
// Say ( JMM , D8-JMM-1 ) ;
5787: LD_EXP 1
5791: PPUSH
5792: LD_STRING D8-JMM-1
5794: PPUSH
5795: CALL_OW 88
// DialogueOff ;
5799: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
5803: LD_INT 2
5805: PPUSH
5806: LD_INT 2
5808: PPUSH
5809: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
5813: LD_INT 1
5815: PPUSH
5816: LD_INT 2
5818: PPUSH
5819: LD_INT 2
5821: PPUSH
5822: LD_INT 1
5824: PPUSH
5825: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
5829: LD_INT 3
5831: PPUSH
5832: LD_INT 2
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
5845: LD_ADDR_VAR 0 2
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 2
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 21
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 69
5878: PUSH
5879: FOR_IN
5880: IFFALSE 6020
// begin ComExitBuilding ( i ) ;
5882: LD_VAR 0 2
5886: PPUSH
5887: CALL_OW 122
// wait ( 0 0$1 ) ;
5891: LD_INT 35
5893: PPUSH
5894: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
5898: LD_VAR 0 2
5902: PPUSH
5903: LD_INT 77
5905: PPUSH
5906: LD_INT 10
5908: PPUSH
5909: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_INT 82
5920: PPUSH
5921: LD_INT 5
5923: PPUSH
5924: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
5928: LD_VAR 0 2
5932: PPUSH
5933: LD_INT 95
5935: PPUSH
5936: LD_INT 12
5938: PPUSH
5939: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 102
5950: PPUSH
5951: LD_INT 11
5953: PPUSH
5954: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_INT 116
5965: PPUSH
5966: LD_INT 15
5968: PPUSH
5969: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
5973: LD_VAR 0 2
5977: PPUSH
5978: LD_INT 140
5980: PPUSH
5981: LD_INT 25
5983: PPUSH
5984: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: LD_INT 160
5995: PPUSH
5996: LD_INT 56
5998: PPUSH
5999: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_INT 189
6010: PPUSH
6011: LD_INT 79
6013: PPUSH
6014: CALL_OW 174
// end ;
6018: GO 5879
6020: POP
6021: POP
// arabianAttackersAI = 1 ;
6022: LD_ADDR_EXP 45
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// wait ( 0 0$30 ) ;
6030: LD_INT 1050
6032: PPUSH
6033: CALL_OW 67
// if IsOk ( Gary ) then
6037: LD_EXP 10
6041: PPUSH
6042: CALL_OW 302
6046: IFFALSE 6060
// Say ( Gary , D8a-Gary-1 ) ;
6048: LD_EXP 10
6052: PPUSH
6053: LD_STRING D8a-Gary-1
6055: PPUSH
6056: CALL_OW 88
// wait ( 0 0$5 ) ;
6060: LD_INT 175
6062: PPUSH
6063: CALL_OW 67
// if IsOK ( Khatam ) then
6067: LD_EXP 14
6071: PPUSH
6072: CALL_OW 302
6076: IFFALSE 6496
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 2
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 1
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 25
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 25
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: LD_EXP 1
6167: PUSH
6168: LD_EXP 14
6172: PUSH
6173: LD_EXP 13
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: DIFF
6183: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6184: LD_EXP 14
6188: PPUSH
6189: LD_INT 8
6191: PPUSH
6192: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6196: LD_EXP 14
6200: PPUSH
6201: CALL_OW 122
// wait ( 0 0$1 ) ;
6205: LD_INT 35
6207: PPUSH
6208: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6212: LD_EXP 14
6216: PPUSH
6217: CALL_OW 121
// wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6228: LD_EXP 14
6232: PPUSH
6233: LD_INT 7
6235: PPUSH
6236: CALL_OW 113
// DialogueOn ;
6240: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
6244: LD_VAR 0 3
6248: PUSH
6249: LD_INT 1
6251: ARRAY
6252: PPUSH
6253: CALL_OW 258
6257: PUSH
6258: LD_INT 1
6260: EQUAL
6261: IFFALSE 6281
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 1
6270: ARRAY
6271: PPUSH
6272: LD_STRING D8b-Sol1-1
6274: PPUSH
6275: CALL_OW 88
6279: GO 6297
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: ARRAY
6289: PPUSH
6290: LD_STRING D8b-FSol1-1
6292: PPUSH
6293: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
6297: LD_EXP 14
6301: PPUSH
6302: LD_STRING D8b-Khat-1
6304: PPUSH
6305: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6309: LD_VAR 0 3
6313: PUSH
6314: LD_INT 1
6316: ARRAY
6317: PPUSH
6318: CALL_OW 258
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 6346
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_STRING D8b-Sol1-2
6339: PPUSH
6340: CALL_OW 88
6344: GO 6362
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: ARRAY
6354: PPUSH
6355: LD_STRING D8b-FSol1-2
6357: PPUSH
6358: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
6362: LD_EXP 14
6366: PPUSH
6367: LD_STRING D8b-Khat-2
6369: PPUSH
6370: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 1
6381: ARRAY
6382: PPUSH
6383: CALL_OW 258
6387: PUSH
6388: LD_INT 1
6390: EQUAL
6391: IFFALSE 6411
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: PPUSH
6402: LD_STRING D8b-Sol1-3
6404: PPUSH
6405: CALL_OW 88
6409: GO 6427
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
6411: LD_VAR 0 3
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: PPUSH
6420: LD_STRING D8b-FSol1-3
6422: PPUSH
6423: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
6427: LD_EXP 14
6431: PPUSH
6432: LD_STRING D8b-Khat-3
6434: PPUSH
6435: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6439: LD_VAR 0 3
6443: PUSH
6444: LD_INT 1
6446: ARRAY
6447: PPUSH
6448: CALL_OW 258
6452: PUSH
6453: LD_INT 1
6455: EQUAL
6456: IFFALSE 6476
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
6458: LD_VAR 0 3
6462: PUSH
6463: LD_INT 1
6465: ARRAY
6466: PPUSH
6467: LD_STRING D8b-Sol1-4
6469: PPUSH
6470: CALL_OW 88
6474: GO 6492
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PPUSH
6485: LD_STRING D8b-FSol1-4
6487: PPUSH
6488: CALL_OW 88
// DialogueOff ;
6492: CALL_OW 7
// end ; end ;
6496: LD_VAR 0 1
6500: RET
// every 0 0$1 do var i ;
6501: GO 6503
6503: DISABLE
6504: LD_INT 0
6506: PPUSH
// begin enable ;
6507: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6508: LD_ADDR_VAR 0 1
6512: PUSH
6513: LD_INT 7
6515: PPUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 70
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6600
// begin if GetClass ( i ) = 4 then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 257
6543: PUSH
6544: LD_INT 4
6546: EQUAL
6547: IFFALSE 6559
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6549: LD_INT 1
6551: PPUSH
6552: LD_STRING 10_ScientistsEscape_1
6554: PPUSH
6555: CALL_OW 39
// if i = Dietrich then
6559: LD_VAR 0 1
6563: PUSH
6564: LD_EXP 26
6568: EQUAL
6569: IFFALSE 6581
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6571: LD_INT 1
6573: PPUSH
6574: LD_STRING 10_GensherEscape_1
6576: PPUSH
6577: CALL_OW 39
// arabianEscape = 1 ;
6581: LD_ADDR_EXP 46
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// RemoveUnit ( i ) ;
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 64
// end ;
6598: GO 6531
6600: POP
6601: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6602: LD_EXP 14
6606: PPUSH
6607: LD_INT 7
6609: PPUSH
6610: CALL_OW 308
6614: IFFALSE 6633
// begin KhatamStatus = 1 ;
6616: LD_ADDR_EXP 49
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6624: LD_EXP 14
6628: PPUSH
6629: CALL_OW 64
// end ; end ;
6633: PPOPN 1
6635: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6636: LD_EXP 14
6640: PPUSH
6641: CALL_OW 301
6645: IFFALSE 6658
6647: GO 6649
6649: DISABLE
// KhatamStatus = 0 ;
6650: LD_ADDR_EXP 49
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
6658: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
6659: LD_INT 22
6661: PUSH
6662: LD_INT 2
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 21
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PPUSH
6683: CALL_OW 69
6687: PUSH
6688: LD_INT 0
6690: EQUAL
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: PUSH
6721: LD_INT 0
6723: EQUAL
6724: AND
6725: IFFALSE 6738
6727: GO 6729
6729: DISABLE
// arabianDefeated = 1 ;
6730: LD_ADDR_EXP 47
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
6738: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
6739: LD_INT 54
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 321
6749: PUSH
6750: LD_INT 2
6752: EQUAL
6753: PUSH
6754: LD_INT 55
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 321
6764: PUSH
6765: LD_INT 2
6767: EQUAL
6768: AND
6769: PUSH
6770: LD_INT 21
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: CALL_OW 321
6780: PUSH
6781: LD_INT 2
6783: EQUAL
6784: AND
6785: PUSH
6786: LD_INT 22
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 321
6796: PUSH
6797: LD_INT 2
6799: EQUAL
6800: AND
6801: PUSH
6802: LD_INT 12
6804: PPUSH
6805: LD_INT 1
6807: PPUSH
6808: CALL_OW 321
6812: PUSH
6813: LD_INT 2
6815: EQUAL
6816: AND
6817: PUSH
6818: LD_INT 32
6820: PPUSH
6821: LD_INT 1
6823: PPUSH
6824: CALL_OW 321
6828: PUSH
6829: LD_INT 2
6831: EQUAL
6832: AND
6833: PUSH
6834: LD_EXP 53
6838: PUSH
6839: LD_INT 0
6841: EQUAL
6842: AND
6843: PUSH
6844: LD_EXP 48
6848: PUSH
6849: LD_INT 0
6851: EQUAL
6852: AND
6853: IFFALSE 6870
6855: GO 6857
6857: DISABLE
// begin arabianTrait = 1 ;
6858: LD_ADDR_EXP 48
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// PrepareArabianTrait ;
6866: CALL 5476 0 0
// end ;
6870: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6871: LD_EXP 28
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: PUSH
6880: LD_STRING 02_mikhailStatus_1
6882: PPUSH
6883: LD_INT 0
6885: PPUSH
6886: CALL_OW 30
6890: PUSH
6891: LD_INT 1
6893: EQUAL
6894: AND
6895: IFFALSE 6904
6897: GO 6899
6899: DISABLE
// PrepareCornell ;
6900: CALL 2347 0 0
6904: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6905: LD_INT 1
6907: PPUSH
6908: LD_EXP 19
6912: PPUSH
6913: CALL_OW 292
6917: IFFALSE 7142
6919: GO 6921
6921: DISABLE
// begin InGameOn ;
6922: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6926: LD_EXP 19
6930: PPUSH
6931: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6935: LD_EXP 19
6939: PPUSH
6940: LD_STRING D7-Corn-1
6942: PPUSH
6943: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
6947: LD_INT 22
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 3
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: PUSH
7016: LD_EXP 1
7020: PUSH
7021: LD_EXP 13
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: DIFF
7030: PPUSH
7031: LD_STRING D7-Sol1-1
7033: PPUSH
7034: LD_STRING D7-FSol1-1
7036: PPUSH
7037: CALL 7422 0 3
// CenterNowOnUnits ( Cornell ) ;
7041: LD_EXP 19
7045: PPUSH
7046: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
7050: LD_EXP 19
7054: PPUSH
7055: LD_STRING D7-Corn-2
7057: PPUSH
7058: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7062: LD_EXP 1
7066: PPUSH
7067: LD_STRING D7-JMM-2
7069: PPUSH
7070: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
7074: LD_EXP 19
7078: PPUSH
7079: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING D7-Corn-3
7090: PPUSH
7091: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
7095: LD_EXP 19
7099: PPUSH
7100: LD_INT 250
7102: PPUSH
7103: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
7107: LD_EXP 19
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 235
// wait ( 0 0$1 ) ;
7119: LD_INT 35
7121: PPUSH
7122: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
7126: LD_EXP 1
7130: PPUSH
7131: LD_STRING D7-JMM-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// end ;
7142: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
7143: LD_EXP 19
7147: PPUSH
7148: CALL_OW 255
7152: PUSH
7153: LD_INT 1
7155: EQUAL
7156: PUSH
7157: LD_EXP 19
7161: PPUSH
7162: CALL_OW 256
7166: PUSH
7167: LD_INT 251
7169: GREATER
7170: AND
7171: IFFALSE 7364
7173: GO 7175
7175: DISABLE
// begin DialogueOn ;
7176: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D7a-JMM-1
7187: PPUSH
7188: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7192: LD_EXP 19
7196: PPUSH
7197: LD_STRING D7a-Corn-1
7199: PPUSH
7200: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7204: LD_EXP 1
7208: PPUSH
7209: LD_STRING D7a-JMM-2
7211: PPUSH
7212: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7216: LD_EXP 19
7220: PPUSH
7221: LD_STRING D7a-Corn-2
7223: PPUSH
7224: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7228: LD_EXP 1
7232: PPUSH
7233: LD_STRING D7a-JMM-3
7235: PPUSH
7236: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7240: LD_EXP 19
7244: PPUSH
7245: LD_STRING D7a-Corn-3
7247: PPUSH
7248: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7252: LD_EXP 1
7256: PPUSH
7257: LD_STRING D7a-JMM-4
7259: PPUSH
7260: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7264: LD_EXP 19
7268: PPUSH
7269: LD_STRING D7a-Corn-4
7271: PPUSH
7272: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7276: LD_EXP 1
7280: PPUSH
7281: LD_STRING D7a-JMM-5
7283: PPUSH
7284: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7288: LD_EXP 19
7292: PPUSH
7293: LD_STRING D7a-Corn-5
7295: PPUSH
7296: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
7300: LD_EXP 1
7304: PPUSH
7305: LD_STRING D7a-JMM-6
7307: PPUSH
7308: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
7312: LD_EXP 19
7316: PPUSH
7317: LD_STRING D7a-Corn-6
7319: PPUSH
7320: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
7324: LD_EXP 1
7328: PPUSH
7329: LD_STRING D7a-JMM-7
7331: PPUSH
7332: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
7336: LD_EXP 19
7340: PPUSH
7341: LD_STRING D7a-Corn-7
7343: PPUSH
7344: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7348: LD_EXP 1
7352: PPUSH
7353: LD_STRING D7a-JMM-8
7355: PPUSH
7356: CALL_OW 88
// DialogueOff ;
7360: CALL_OW 7
// end ; end_of_file
7364: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7365: LD_INT 0
7367: PPUSH
7368: PPUSH
// if exist_mode then
7369: LD_VAR 0 2
7373: IFFALSE 7392
// unit := CreateCharacter ( ident ) else
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 34
7389: ST_TO_ADDR
7390: GO 7407
// unit := NewCharacter ( ident ) ;
7392: LD_ADDR_VAR 0 4
7396: PUSH
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 25
7406: ST_TO_ADDR
// result := unit ;
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_VAR 0 4
7416: ST_TO_ADDR
// end ;
7417: LD_VAR 0 3
7421: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7422: LD_INT 0
7424: PPUSH
7425: PPUSH
7426: PPUSH
// rnd = rand ( 1 , characters ) ;
7427: LD_ADDR_VAR 0 6
7431: PUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 12
7444: ST_TO_ADDR
// for i = 1 to characters do
7445: LD_ADDR_VAR 0 5
7449: PUSH
7450: DOUBLE
7451: LD_INT 1
7453: DEC
7454: ST_TO_ADDR
7455: LD_VAR 0 1
7459: PUSH
7460: FOR_TO
7461: IFFALSE 7571
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7463: LD_VAR 0 5
7467: PUSH
7468: LD_VAR 0 6
7472: EQUAL
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: LD_VAR 0 5
7483: ARRAY
7484: PPUSH
7485: CALL_OW 258
7489: PUSH
7490: LD_INT 1
7492: EQUAL
7493: AND
7494: IFFALSE 7516
// Say ( characters [ i ] , dialogMID ) ;
7496: LD_VAR 0 1
7500: PUSH
7501: LD_VAR 0 5
7505: ARRAY
7506: PPUSH
7507: LD_VAR 0 2
7511: PPUSH
7512: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7516: LD_VAR 0 5
7520: PUSH
7521: LD_VAR 0 6
7525: EQUAL
7526: PUSH
7527: LD_VAR 0 1
7531: PUSH
7532: LD_VAR 0 5
7536: ARRAY
7537: PPUSH
7538: CALL_OW 258
7542: PUSH
7543: LD_INT 2
7545: EQUAL
7546: AND
7547: IFFALSE 7569
// Say ( characters [ i ] , dialogFID ) ;
7549: LD_VAR 0 1
7553: PUSH
7554: LD_VAR 0 5
7558: ARRAY
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 88
// end ;
7569: GO 7460
7571: POP
7572: POP
// end ;
7573: LD_VAR 0 4
7577: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7578: LD_INT 0
7580: PPUSH
7581: PPUSH
// for i in charactersList do
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_VAR 0 1
7591: PUSH
7592: FOR_IN
7593: IFFALSE 7622
// begin if IsOk ( i ) then
7595: LD_VAR 0 4
7599: PPUSH
7600: CALL_OW 302
7604: IFFALSE 7620
// SaveCharacters ( i , ident ) ;
7606: LD_VAR 0 4
7610: PPUSH
7611: LD_VAR 0 2
7615: PPUSH
7616: CALL_OW 38
// end ;
7620: GO 7592
7622: POP
7623: POP
// end ;
7624: LD_VAR 0 3
7628: RET
// export function PrepareDifficulty ; begin
7629: LD_INT 0
7631: PPUSH
// if difficulty = 1 then
7632: LD_OWVAR 67
7636: PUSH
7637: LD_INT 1
7639: EQUAL
7640: IFFALSE 7684
// begin RuSolMinLevel = 4 ;
7642: LD_ADDR_EXP 35
7646: PUSH
7647: LD_INT 4
7649: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7650: LD_ADDR_EXP 36
7654: PUSH
7655: LD_INT 7
7657: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7658: LD_INT 51
7660: PPUSH
7661: LD_INT 6
7663: PPUSH
7664: LD_INT 2
7666: PPUSH
7667: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7671: LD_INT 51
7673: PPUSH
7674: LD_INT 5
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 322
// end ; if difficulty = 2 then
7684: LD_OWVAR 67
7688: PUSH
7689: LD_INT 2
7691: EQUAL
7692: IFFALSE 7788
// begin RuSolMinLevel = 5 ;
7694: LD_ADDR_EXP 35
7698: PUSH
7699: LD_INT 5
7701: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7702: LD_ADDR_EXP 36
7706: PUSH
7707: LD_INT 7
7709: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7710: LD_INT 51
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7723: LD_INT 57
7725: PPUSH
7726: LD_INT 6
7728: PPUSH
7729: LD_INT 2
7731: PPUSH
7732: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7736: LD_INT 63
7738: PPUSH
7739: LD_INT 6
7741: PPUSH
7742: LD_INT 2
7744: PPUSH
7745: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7749: LD_INT 51
7751: PPUSH
7752: LD_INT 5
7754: PPUSH
7755: LD_INT 2
7757: PPUSH
7758: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7762: LD_INT 5
7764: PPUSH
7765: LD_INT 2
7767: PPUSH
7768: LD_INT 2
7770: PPUSH
7771: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7775: LD_INT 5
7777: PPUSH
7778: LD_INT 5
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 322
// end ; if difficulty = 3 then
7788: LD_OWVAR 67
7792: PUSH
7793: LD_INT 3
7795: EQUAL
7796: IFFALSE 7944
// begin RuSolMinLevel = 6 ;
7798: LD_ADDR_EXP 35
7802: PUSH
7803: LD_INT 6
7805: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7806: LD_ADDR_EXP 36
7810: PUSH
7811: LD_INT 8
7813: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7814: LD_INT 51
7816: PPUSH
7817: LD_INT 6
7819: PPUSH
7820: LD_INT 2
7822: PPUSH
7823: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7827: LD_INT 57
7829: PPUSH
7830: LD_INT 6
7832: PPUSH
7833: LD_INT 2
7835: PPUSH
7836: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7840: LD_INT 52
7842: PPUSH
7843: LD_INT 6
7845: PPUSH
7846: LD_INT 2
7848: PPUSH
7849: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7853: LD_INT 58
7855: PPUSH
7856: LD_INT 6
7858: PPUSH
7859: LD_INT 2
7861: PPUSH
7862: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7866: LD_INT 63
7868: PPUSH
7869: LD_INT 6
7871: PPUSH
7872: LD_INT 2
7874: PPUSH
7875: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7879: LD_INT 64
7881: PPUSH
7882: LD_INT 6
7884: PPUSH
7885: LD_INT 2
7887: PPUSH
7888: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7892: LD_INT 51
7894: PPUSH
7895: LD_INT 5
7897: PPUSH
7898: LD_INT 2
7900: PPUSH
7901: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7905: LD_INT 52
7907: PPUSH
7908: LD_INT 5
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7918: LD_INT 66
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7931: LD_INT 66
7933: PPUSH
7934: LD_INT 5
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 322
// end ; end ;
7944: LD_VAR 0 1
7948: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// ruPossition = position ;
7955: LD_ADDR_EXP 40
7959: PUSH
7960: LD_VAR 0 1
7964: ST_TO_ADDR
// if position = 1 then
7965: LD_VAR 0 1
7969: PUSH
7970: LD_INT 1
7972: EQUAL
7973: IFFALSE 8721
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7975: LD_ADDR_VAR 0 4
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_INT 3
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 2
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 69
8008: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
8009: LD_ADDR_VAR 0 5
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 49
8019: PUSH
8020: LD_INT 74
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 4
8034: PUSH
8035: LD_INT 73
8037: PUSH
8038: LD_INT 88
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 4
8052: PUSH
8053: LD_INT 56
8055: PUSH
8056: LD_INT 62
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 29
8070: PUSH
8071: LD_INT 43
8073: PUSH
8074: LD_INT 68
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 30
8088: PUSH
8089: LD_INT 43
8091: PUSH
8092: LD_INT 79
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 28
8106: PUSH
8107: LD_INT 60
8109: PUSH
8110: LD_INT 75
8112: PUSH
8113: LD_INT 1
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 50
8127: PUSH
8128: LD_INT 87
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 28
8142: PUSH
8143: LD_INT 45
8145: PUSH
8146: LD_INT 67
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 17
8160: PUSH
8161: LD_INT 47
8163: PUSH
8164: LD_INT 84
8166: PUSH
8167: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
<<<<<<< HEAD
8173: PPUSH
8174: CALL_OW 69
8178: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
8179: LD_ADDR_VAR 0 5
8183: PUSH
8184: LD_INT 0
8186: PUSH
8187: LD_INT 49
8189: PUSH
8190: LD_INT 74
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 4
8204: PUSH
8205: LD_INT 73
8207: PUSH
8208: LD_INT 88
8210: PUSH
8211: LD_INT 5
8213: PUSH
8214: EMPTY
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: PUSH
8220: LD_INT 4
8222: PUSH
8223: LD_INT 56
8225: PUSH
8226: LD_INT 62
8228: PUSH
8229: LD_INT 3
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: LIST
8236: LIST
8237: PUSH
8238: LD_INT 29
8240: PUSH
8241: LD_INT 43
8243: PUSH
8244: LD_INT 68
8246: PUSH
8247: LD_INT 2
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: PUSH
8256: LD_INT 30
8258: PUSH
8259: LD_INT 43
8261: PUSH
8262: LD_INT 79
8264: PUSH
8265: LD_INT 5
8267: PUSH
8268: EMPTY
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: LD_INT 28
8276: PUSH
8277: LD_INT 60
8279: PUSH
8280: LD_INT 75
8282: PUSH
8283: LD_INT 1
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: PUSH
8292: LD_INT 2
8294: PUSH
8295: LD_INT 50
8297: PUSH
8298: LD_INT 87
8300: PUSH
8301: LD_INT 1
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 28
8312: PUSH
8313: LD_INT 45
8315: PUSH
8316: LD_INT 67
8318: PUSH
8319: LD_INT 2
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: PUSH
8328: LD_INT 17
8330: PUSH
8331: LD_INT 47
8333: PUSH
8334: LD_INT 84
8336: PUSH
8337: LD_INT 2
8339: PUSH
8340: EMPTY
8341: LIST
8342: LIST
8343: LIST
8344: LIST
8345: PUSH
8346: LD_INT 18
8348: PUSH
8349: LD_INT 46
8351: PUSH
8352: LD_INT 87
8354: PUSH
8355: LD_INT 1
8357: PUSH
8358: EMPTY
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: PUSH
8364: LD_INT 28
8366: PUSH
8367: LD_INT 41
8369: PUSH
8370: LD_INT 64
8372: PUSH
8373: LD_INT 5
8375: PUSH
8376: EMPTY
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: PUSH
8382: LD_INT 32
8384: PUSH
8385: LD_INT 75
8387: PUSH
8388: LD_INT 76
8390: PUSH
8391: LD_INT 5
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: PUSH
8400: LD_INT 32
8402: PUSH
8403: LD_INT 77
8405: PUSH
8406: LD_INT 75
8408: PUSH
8409: LD_INT 5
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: LIST
8416: LIST
8417: PUSH
8418: LD_INT 32
8420: PUSH
8421: LD_INT 69
8423: PUSH
8424: LD_INT 68
8426: PUSH
8427: LD_INT 3
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 32
8438: PUSH
8439: LD_INT 59
8441: PUSH
8442: LD_INT 96
8444: PUSH
8445: LD_INT 5
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 32
8456: PUSH
8457: LD_INT 56
8459: PUSH
8460: LD_INT 96
8462: PUSH
8463: LD_INT 0
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: LIST
8470: LIST
8471: PUSH
8472: LD_INT 32
8474: PUSH
8475: LD_INT 51
8477: PUSH
8478: LD_INT 61
8480: PUSH
8481: LD_INT 3
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: PUSH
8490: LD_INT 32
8492: PUSH
8493: LD_INT 42
8495: PUSH
8496: LD_INT 60
8498: PUSH
8499: LD_INT 3
8501: PUSH
8502: EMPTY
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: PUSH
8508: LD_INT 32
8510: PUSH
8511: LD_INT 36
8513: PUSH
8514: LD_INT 58
8516: PUSH
8517: LD_INT 3
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: PUSH
8526: LD_INT 32
8528: PUSH
8529: LD_INT 39
8531: PUSH
8532: LD_INT 59
8534: PUSH
8535: LD_INT 3
8537: PUSH
8538: EMPTY
=======
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 18
8178: PUSH
8179: LD_INT 46
8181: PUSH
8182: LD_INT 87
8184: PUSH
8185: LD_INT 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 28
8196: PUSH
8197: LD_INT 41
8199: PUSH
8200: LD_INT 64
8202: PUSH
8203: LD_INT 5
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 32
8214: PUSH
8215: LD_INT 75
8217: PUSH
8218: LD_INT 76
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 32
8232: PUSH
8233: LD_INT 77
8235: PUSH
8236: LD_INT 75
8238: PUSH
8239: LD_INT 5
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 32
8250: PUSH
8251: LD_INT 69
8253: PUSH
8254: LD_INT 68
8256: PUSH
8257: LD_INT 3
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 59
8271: PUSH
8272: LD_INT 96
8274: PUSH
8275: LD_INT 5
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 32
8286: PUSH
8287: LD_INT 56
8289: PUSH
8290: LD_INT 96
8292: PUSH
8293: LD_INT 0
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 32
8304: PUSH
8305: LD_INT 51
8307: PUSH
8308: LD_INT 61
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 32
8322: PUSH
8323: LD_INT 42
8325: PUSH
8326: LD_INT 60
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 32
8340: PUSH
8341: LD_INT 36
8343: PUSH
8344: LD_INT 58
8346: PUSH
8347: LD_INT 3
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 32
8358: PUSH
8359: LD_INT 39
8361: PUSH
8362: LD_INT 59
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 32
8376: PUSH
8377: LD_INT 61
8379: PUSH
8380: LD_INT 64
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 33
8394: PUSH
8395: LD_INT 63
8397: PUSH
8398: LD_INT 90
8400: PUSH
8401: LD_INT 5
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 33
8412: PUSH
8413: LD_INT 64
8415: PUSH
8416: LD_INT 88
8418: PUSH
8419: LD_INT 5
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 33
8430: PUSH
8431: LD_INT 72
8433: PUSH
8434: LD_INT 82
8436: PUSH
8437: LD_INT 5
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 42
8451: PUSH
8452: LD_INT 74
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 56
8469: PUSH
8470: LD_INT 77
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 21
8484: PUSH
8485: LD_INT 54
8487: PUSH
8488: LD_INT 91
8490: PUSH
8491: LD_INT 5
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 16
8502: PUSH
8503: LD_INT 50
8505: PUSH
8506: LD_INT 83
8508: PUSH
8509: LD_INT 3
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 24
8520: PUSH
8521: LD_INT 50
8523: PUSH
8524: LD_INT 90
8526: PUSH
8527: LD_INT 0
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
8539: LIST
8540: LIST
8541: LIST
8542: LIST
<<<<<<< HEAD
8543: PUSH
8544: LD_INT 32
8546: PUSH
8547: LD_INT 61
8549: PUSH
8550: LD_INT 64
8552: PUSH
8553: LD_INT 3
8555: PUSH
8556: EMPTY
=======
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
8557: LIST
8558: LIST
8559: LIST
8560: LIST
<<<<<<< HEAD
8561: PUSH
8562: LD_INT 33
8564: PUSH
8565: LD_INT 63
8567: PUSH
8568: LD_INT 90
8570: PUSH
8571: LD_INT 5
8573: PUSH
8574: EMPTY
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: PUSH
8580: LD_INT 33
8582: PUSH
8583: LD_INT 64
8585: PUSH
8586: LD_INT 88
8588: PUSH
8589: LD_INT 5
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PUSH
8598: LD_INT 33
8600: PUSH
8601: LD_INT 72
8603: PUSH
8604: LD_INT 82
8606: PUSH
8607: LD_INT 5
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: PUSH
8616: LD_INT 6
8618: PUSH
8619: LD_INT 42
8621: PUSH
8622: LD_INT 74
8624: PUSH
8625: LD_INT 1
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 6
8636: PUSH
8637: LD_INT 56
8639: PUSH
8640: LD_INT 77
8642: PUSH
8643: LD_INT 2
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 21
8654: PUSH
8655: LD_INT 54
8657: PUSH
8658: LD_INT 91
8660: PUSH
8661: LD_INT 5
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 16
8672: PUSH
8673: LD_INT 50
8675: PUSH
8676: LD_INT 83
8678: PUSH
8679: LD_INT 3
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 24
8690: PUSH
8691: LD_INT 50
8693: PUSH
8694: LD_INT 90
8696: PUSH
8697: LD_INT 0
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: LIST
8704: LIST
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: LIST
8715: LIST
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8737: LD_ADDR_VAR 0 3
8741: PUSH
8742: LD_INT 22
8744: PUSH
8745: LD_INT 3
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 3
8754: PUSH
8755: LD_INT 25
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PPUSH
8773: CALL_OW 69
8777: PUSH
8778: FOR_IN
8779: IFFALSE 8826
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
8781: LD_VAR 0 3
8785: PPUSH
8786: LD_VAR 0 5
8790: PUSH
8791: LD_INT 2
8793: ARRAY
8794: PUSH
8795: LD_INT 2
8797: ARRAY
8798: PUSH
8799: LD_INT 3
8801: PLUS
8802: PPUSH
8803: LD_VAR 0 5
8807: PUSH
8808: LD_INT 2
8810: ARRAY
8811: PUSH
8812: LD_INT 3
8814: ARRAY
8815: PUSH
8816: LD_INT 2
8818: PLUS
8819: PPUSH
8820: CALL_OW 171
8824: GO 8778
8826: POP
8827: POP
// for i := 1 to buildingsTab do
8828: LD_ADDR_VAR 0 3
8832: PUSH
8833: DOUBLE
8834: LD_INT 1
8836: DEC
8837: ST_TO_ADDR
8838: LD_VAR 0 5
8842: PUSH
8843: FOR_TO
8844: IFFALSE 8917
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8846: LD_VAR 0 4
8850: PPUSH
8851: LD_VAR 0 5
8855: PUSH
8856: LD_VAR 0 3
8860: ARRAY
8861: PUSH
8862: LD_INT 1
8864: ARRAY
8865: PPUSH
8866: LD_VAR 0 5
8870: PUSH
8871: LD_VAR 0 3
8875: ARRAY
8876: PUSH
8877: LD_INT 2
8879: ARRAY
8880: PPUSH
8881: LD_VAR 0 5
8885: PUSH
8886: LD_VAR 0 3
8890: ARRAY
8891: PUSH
8892: LD_INT 3
8894: ARRAY
8895: PPUSH
8896: LD_VAR 0 5
8900: PUSH
8901: LD_VAR 0 3
8905: ARRAY
8906: PUSH
8907: LD_INT 4
8909: ARRAY
8910: PPUSH
8911: CALL_OW 205
8915: GO 8843
8917: POP
8918: POP
// end ; if position = 2 then
8919: LD_VAR 0 1
8923: PUSH
8924: LD_INT 2
8926: EQUAL
8927: IFFALSE 9570
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_INT 22
8936: PUSH
8937: LD_INT 3
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PUSH
8944: LD_INT 25
8946: PUSH
8947: LD_INT 2
8949: PUSH
8950: EMPTY
8951: LIST
8952: LIST
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PPUSH
8958: CALL_OW 69
8962: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8963: LD_ADDR_VAR 0 5
8967: PUSH
8968: LD_INT 0
8970: PUSH
8971: LD_INT 104
8973: PUSH
8974: LD_INT 110
8976: PUSH
8977: LD_INT 5
=======
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8567: LD_ADDR_VAR 0 3
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: LD_INT 25
8587: PUSH
8588: LD_INT 2
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: PUSH
8608: FOR_IN
8609: IFFALSE 8628
// AddComMoveXY ( i , 53 , 82 ) ;
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_INT 53
8618: PPUSH
8619: LD_INT 82
8621: PPUSH
8622: CALL_OW 171
8626: GO 8608
8628: POP
8629: POP
// for i := 1 to buildingsTab do
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: DOUBLE
8636: LD_INT 1
8638: DEC
8639: ST_TO_ADDR
8640: LD_VAR 0 5
8644: PUSH
8645: FOR_TO
8646: IFFALSE 8719
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8648: LD_VAR 0 4
8652: PPUSH
8653: LD_VAR 0 5
8657: PUSH
8658: LD_VAR 0 3
8662: ARRAY
8663: PUSH
8664: LD_INT 1
8666: ARRAY
8667: PPUSH
8668: LD_VAR 0 5
8672: PUSH
8673: LD_VAR 0 3
8677: ARRAY
8678: PUSH
8679: LD_INT 2
8681: ARRAY
8682: PPUSH
8683: LD_VAR 0 5
8687: PUSH
8688: LD_VAR 0 3
8692: ARRAY
8693: PUSH
8694: LD_INT 3
8696: ARRAY
8697: PPUSH
8698: LD_VAR 0 5
8702: PUSH
8703: LD_VAR 0 3
8707: ARRAY
8708: PUSH
8709: LD_INT 4
8711: ARRAY
8712: PPUSH
8713: CALL_OW 205
8717: GO 8645
8719: POP
8720: POP
// end ; if position = 2 then
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 2
8728: EQUAL
8729: IFFALSE 9344
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8731: LD_ADDR_VAR 0 4
8735: PUSH
8736: LD_INT 22
8738: PUSH
8739: LD_INT 3
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 25
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PPUSH
8760: CALL_OW 69
8764: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_INT 0
8772: PUSH
8773: LD_INT 104
8775: PUSH
8776: LD_INT 110
8778: PUSH
8779: LD_INT 5
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 4
8790: PUSH
8791: LD_INT 98
8793: PUSH
8794: LD_INT 90
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 29
8808: PUSH
8809: LD_INT 103
8811: PUSH
8812: LD_INT 114
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 30
8826: PUSH
8827: LD_INT 99
8829: PUSH
8830: LD_INT 114
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 28
8844: PUSH
8845: LD_INT 100
8847: PUSH
8848: LD_INT 112
8850: PUSH
8851: LD_INT 1
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 2
8862: PUSH
8863: LD_INT 92
8865: PUSH
8866: LD_INT 101
8868: PUSH
8869: LD_INT 0
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 28
8880: PUSH
8881: LD_INT 97
8883: PUSH
8884: LD_INT 116
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 17
8898: PUSH
8899: LD_INT 96
8901: PUSH
8902: LD_INT 101
8904: PUSH
8905: LD_INT 4
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 18
8916: PUSH
8917: LD_INT 88
8919: PUSH
8920: LD_INT 97
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 28
8934: PUSH
8935: LD_INT 106
8937: PUSH
8938: LD_INT 92
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 88
8955: PUSH
8956: LD_INT 89
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 32
8970: PUSH
8971: LD_INT 86
8973: PUSH
8974: LD_INT 90
8976: PUSH
8977: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
<<<<<<< HEAD
8986: LD_INT 4
8988: PUSH
8989: LD_INT 98
8991: PUSH
8992: LD_INT 90
8994: PUSH
8995: LD_INT 3
=======
8986: LD_INT 32
8988: PUSH
8989: LD_INT 85
8991: PUSH
8992: LD_INT 99
8994: PUSH
8995: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
<<<<<<< HEAD
9004: LD_INT 29
9006: PUSH
9007: LD_INT 103
9009: PUSH
9010: LD_INT 114
9012: PUSH
9013: LD_INT 2
=======
9004: LD_INT 32
9006: PUSH
9007: LD_INT 85
9009: PUSH
9010: LD_INT 107
9012: PUSH
9013: LD_INT 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
<<<<<<< HEAD
9022: LD_INT 30
9024: PUSH
9025: LD_INT 99
9027: PUSH
9028: LD_INT 114
9030: PUSH
9031: LD_INT 3
=======
9022: LD_INT 33
9024: PUSH
9025: LD_INT 105
9027: PUSH
9028: LD_INT 99
9030: PUSH
9031: LD_INT 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
<<<<<<< HEAD
9040: LD_INT 28
9042: PUSH
9043: LD_INT 100
9045: PUSH
9046: LD_INT 112
9048: PUSH
9049: LD_INT 1
=======
9040: LD_INT 33
9042: PUSH
9043: LD_INT 102
9045: PUSH
9046: LD_INT 92
9048: PUSH
9049: LD_INT 3
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
<<<<<<< HEAD
9058: LD_INT 2
9060: PUSH
9061: LD_INT 92
9063: PUSH
9064: LD_INT 101
9066: PUSH
9067: LD_INT 0
=======
9058: LD_INT 33
9060: PUSH
9061: LD_INT 105
9063: PUSH
9064: LD_INT 92
9066: PUSH
9067: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
<<<<<<< HEAD
9076: LD_INT 28
9078: PUSH
9079: LD_INT 97
9081: PUSH
9082: LD_INT 116
9084: PUSH
9085: LD_INT 5
=======
9076: LD_INT 6
9078: PUSH
9079: LD_INT 92
9081: PUSH
9082: LD_INT 110
9084: PUSH
9085: LD_INT 0
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: PUSH
<<<<<<< HEAD
9094: LD_INT 17
9096: PUSH
9097: LD_INT 96
9099: PUSH
9100: LD_INT 101
9102: PUSH
9103: LD_INT 4
=======
9094: LD_INT 6
9096: PUSH
9097: LD_INT 103
9099: PUSH
9100: LD_INT 103
9102: PUSH
9103: LD_INT 5
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: PUSH
<<<<<<< HEAD
9112: LD_INT 18
9114: PUSH
9115: LD_INT 88
9117: PUSH
9118: LD_INT 97
9120: PUSH
9121: LD_INT 2
=======
9112: LD_INT 21
9114: PUSH
9115: LD_INT 89
9117: PUSH
9118: LD_INT 101
9120: PUSH
9121: LD_INT 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
<<<<<<< HEAD
9130: LD_INT 28
9132: PUSH
9133: LD_INT 106
9135: PUSH
9136: LD_INT 92
9138: PUSH
9139: LD_INT 2
=======
9130: LD_INT 16
9132: PUSH
9133: LD_INT 95
9135: PUSH
9136: LD_INT 104
9138: PUSH
9139: LD_INT 4
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
<<<<<<< HEAD
9148: LD_INT 32
9150: PUSH
9151: LD_INT 88
9153: PUSH
9154: LD_INT 89
9156: PUSH
9157: LD_INT 2
=======
9148: LD_INT 24
9150: PUSH
9151: LD_INT 92
9153: PUSH
9154: LD_INT 105
9156: PUSH
9157: LD_INT 0
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
<<<<<<< HEAD
9166: LD_INT 32
9168: PUSH
9169: LD_INT 86
9171: PUSH
9172: LD_INT 90
9174: PUSH
9175: LD_INT 2
9177: PUSH
9178: EMPTY
=======
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9179: LIST
9180: LIST
9181: LIST
9182: LIST
<<<<<<< HEAD
9183: PUSH
9184: LD_INT 32
9186: PUSH
9187: LD_INT 85
9189: PUSH
9190: LD_INT 99
9192: PUSH
9193: LD_INT 2
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 32
9204: PUSH
9205: LD_INT 85
9207: PUSH
9208: LD_INT 107
9210: PUSH
9211: LD_INT 1
=======
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9190: LD_ADDR_VAR 0 3
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 3
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
<<<<<<< HEAD
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 33
9222: PUSH
9223: LD_INT 105
9225: PUSH
9226: LD_INT 99
9228: PUSH
9229: LD_INT 1
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 33
9240: PUSH
9241: LD_INT 102
9243: PUSH
9244: LD_INT 92
9246: PUSH
9247: LD_INT 3
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 33
9258: PUSH
9259: LD_INT 105
9261: PUSH
9262: LD_INT 92
9264: PUSH
9265: LD_INT 2
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 6
9276: PUSH
9277: LD_INT 92
9279: PUSH
9280: LD_INT 110
9282: PUSH
9283: LD_INT 0
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 6
9294: PUSH
9295: LD_INT 103
9297: PUSH
9298: LD_INT 103
9300: PUSH
9301: LD_INT 5
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 21
9312: PUSH
9313: LD_INT 89
9315: PUSH
9316: LD_INT 101
9318: PUSH
9319: LD_INT 1
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 16
9330: PUSH
9331: LD_INT 95
9333: PUSH
9334: LD_INT 104
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 24
9348: PUSH
9349: LD_INT 92
9351: PUSH
9352: LD_INT 105
9354: PUSH
9355: LD_INT 0
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9388: LD_ADDR_VAR 0 3
9392: PUSH
9393: LD_INT 22
9395: PUSH
9396: LD_INT 3
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: PUSH
9403: LD_INT 3
9405: PUSH
9406: LD_INT 25
9408: PUSH
9409: LD_INT 2
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PPUSH
9424: CALL_OW 69
9428: PUSH
9429: FOR_IN
9430: IFFALSE 9477
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
9432: LD_VAR 0 3
9436: PPUSH
9437: LD_VAR 0 5
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PUSH
9446: LD_INT 2
9448: ARRAY
9449: PUSH
9450: LD_INT 2
9452: PLUS
9453: PPUSH
9454: LD_VAR 0 5
9458: PUSH
9459: LD_INT 2
9461: ARRAY
9462: PUSH
9463: LD_INT 3
9465: ARRAY
9466: PUSH
9467: LD_INT 1
9469: PLUS
9470: PPUSH
9471: CALL_OW 171
9475: GO 9429
9477: POP
9478: POP
// for i := 1 to buildingsTab do
9479: LD_ADDR_VAR 0 3
9483: PUSH
9484: DOUBLE
9485: LD_INT 1
9487: DEC
9488: ST_TO_ADDR
9489: LD_VAR 0 5
9493: PUSH
9494: FOR_TO
9495: IFFALSE 9568
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9497: LD_VAR 0 4
9501: PPUSH
9502: LD_VAR 0 5
9506: PUSH
9507: LD_VAR 0 3
9511: ARRAY
9512: PUSH
9513: LD_INT 1
9515: ARRAY
9516: PPUSH
9517: LD_VAR 0 5
9521: PUSH
9522: LD_VAR 0 3
9526: ARRAY
9527: PUSH
9528: LD_INT 2
9530: ARRAY
9531: PPUSH
9532: LD_VAR 0 5
9536: PUSH
9537: LD_VAR 0 3
9541: ARRAY
9542: PUSH
9543: LD_INT 3
9545: ARRAY
9546: PPUSH
9547: LD_VAR 0 5
9551: PUSH
9552: LD_VAR 0 3
9556: ARRAY
9557: PUSH
9558: LD_INT 4
9560: ARRAY
9561: PPUSH
9562: CALL_OW 205
9566: GO 9494
9568: POP
9569: POP
// end ; if position = 3 then
9570: LD_VAR 0 1
9574: PUSH
9575: LD_INT 3
9577: EQUAL
9578: IFFALSE 10392
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9580: LD_ADDR_VAR 0 4
9584: PUSH
9585: LD_INT 22
9587: PUSH
9588: LD_INT 3
9590: PUSH
9591: EMPTY
9592: LIST
9593: LIST
9594: PUSH
9595: LD_INT 25
9597: PUSH
9598: LD_INT 2
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: PPUSH
9609: CALL_OW 69
9613: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9614: LD_ADDR_VAR 0 5
9618: PUSH
9619: LD_INT 0
9621: PUSH
9622: LD_INT 151
9624: PUSH
9625: LD_INT 71
9627: PUSH
9628: LD_INT 4
9630: PUSH
9631: EMPTY
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: LD_INT 145
9642: PUSH
9643: LD_INT 53
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: PUSH
9655: LD_INT 4
9657: PUSH
9658: LD_INT 172
9660: PUSH
9661: LD_INT 102
9663: PUSH
9664: LD_INT 5
9666: PUSH
9667: EMPTY
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 29
9675: PUSH
9676: LD_INT 152
9678: PUSH
9679: LD_INT 85
9681: PUSH
9682: LD_INT 3
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: PUSH
9691: LD_INT 30
9693: PUSH
9694: LD_INT 156
9696: PUSH
9697: LD_INT 92
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: EMPTY
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: PUSH
9709: LD_INT 28
9711: PUSH
9712: LD_INT 151
9714: PUSH
9715: LD_INT 66
9717: PUSH
9718: LD_INT 4
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: PUSH
9727: LD_INT 2
9729: PUSH
9730: LD_INT 163
9732: PUSH
9733: LD_INT 95
9735: PUSH
9736: LD_INT 5
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: LD_INT 28
9747: PUSH
9748: LD_INT 149
9750: PUSH
9751: LD_INT 63
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: EMPTY
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 17
9765: PUSH
9766: LD_INT 167
9768: PUSH
9769: LD_INT 99
9771: PUSH
9772: LD_INT 5
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: PUSH
9781: LD_INT 18
9783: PUSH
9784: LD_INT 163
9786: PUSH
9787: LD_INT 98
9789: PUSH
9790: LD_INT 0
9792: PUSH
9793: EMPTY
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: PUSH
9799: LD_INT 28
9801: PUSH
9802: LD_INT 154
9804: PUSH
9805: LD_INT 70
9807: PUSH
9808: LD_INT 4
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: PUSH
9817: LD_INT 32
9819: PUSH
9820: LD_INT 155
9822: PUSH
9823: LD_INT 62
9825: PUSH
9826: LD_INT 4
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: PUSH
9835: LD_INT 32
9837: PUSH
9838: LD_INT 161
9840: PUSH
9841: LD_INT 69
9843: PUSH
9844: LD_INT 4
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 32
9855: PUSH
9856: LD_INT 168
9858: PUSH
9859: LD_INT 78
9861: PUSH
9862: LD_INT 4
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 32
9873: PUSH
9874: LD_INT 163
9876: PUSH
9877: LD_INT 80
9879: PUSH
9880: LD_INT 5
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 32
9891: PUSH
9892: LD_INT 136
9894: PUSH
9895: LD_INT 73
9897: PUSH
9898: LD_INT 0
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 32
9909: PUSH
9910: LD_INT 157
9912: PUSH
9913: LD_INT 98
9915: PUSH
9916: LD_INT 0
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 32
9927: PUSH
9928: LD_INT 150
9930: PUSH
9931: LD_INT 87
9933: PUSH
9934: LD_INT 1
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 33
9945: PUSH
9946: LD_INT 171
9948: PUSH
9949: LD_INT 97
9951: PUSH
9952: LD_INT 4
9954: PUSH
9955: EMPTY
=======
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: FOR_IN
9232: IFFALSE 9251
// AddComMoveXY ( i , 96 , 99 ) ;
9234: LD_VAR 0 3
9238: PPUSH
9239: LD_INT 96
9241: PPUSH
9242: LD_INT 99
9244: PPUSH
9245: CALL_OW 171
9249: GO 9231
9251: POP
9252: POP
// for i := 1 to buildingsTab do
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_VAR 0 5
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9342
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9271: LD_VAR 0 4
9275: PPUSH
9276: LD_VAR 0 5
9280: PUSH
9281: LD_VAR 0 3
9285: ARRAY
9286: PUSH
9287: LD_INT 1
9289: ARRAY
9290: PPUSH
9291: LD_VAR 0 5
9295: PUSH
9296: LD_VAR 0 3
9300: ARRAY
9301: PUSH
9302: LD_INT 2
9304: ARRAY
9305: PPUSH
9306: LD_VAR 0 5
9310: PUSH
9311: LD_VAR 0 3
9315: ARRAY
9316: PUSH
9317: LD_INT 3
9319: ARRAY
9320: PPUSH
9321: LD_VAR 0 5
9325: PUSH
9326: LD_VAR 0 3
9330: ARRAY
9331: PUSH
9332: LD_INT 4
9334: ARRAY
9335: PPUSH
9336: CALL_OW 205
9340: GO 9268
9342: POP
9343: POP
// end ; if position = 3 then
9344: LD_VAR 0 1
9348: PUSH
9349: LD_INT 3
9351: EQUAL
9352: IFFALSE 10138
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9354: LD_ADDR_VAR 0 4
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: LD_INT 3
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 25
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9388: LD_ADDR_VAR 0 5
9392: PUSH
9393: LD_INT 0
9395: PUSH
9396: LD_INT 151
9398: PUSH
9399: LD_INT 71
9401: PUSH
9402: LD_INT 4
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 4
9413: PUSH
9414: LD_INT 145
9416: PUSH
9417: LD_INT 53
9419: PUSH
9420: LD_INT 3
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 4
9431: PUSH
9432: LD_INT 172
9434: PUSH
9435: LD_INT 102
9437: PUSH
9438: LD_INT 5
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 29
9449: PUSH
9450: LD_INT 152
9452: PUSH
9453: LD_INT 85
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 156
9470: PUSH
9471: LD_INT 92
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 28
9485: PUSH
9486: LD_INT 151
9488: PUSH
9489: LD_INT 66
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: LD_INT 163
9506: PUSH
9507: LD_INT 95
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 28
9521: PUSH
9522: LD_INT 149
9524: PUSH
9525: LD_INT 63
9527: PUSH
9528: LD_INT 4
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 17
9539: PUSH
9540: LD_INT 167
9542: PUSH
9543: LD_INT 99
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 18
9557: PUSH
9558: LD_INT 163
9560: PUSH
9561: LD_INT 98
9563: PUSH
9564: LD_INT 0
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 28
9575: PUSH
9576: LD_INT 154
9578: PUSH
9579: LD_INT 70
9581: PUSH
9582: LD_INT 4
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 32
9593: PUSH
9594: LD_INT 155
9596: PUSH
9597: LD_INT 62
9599: PUSH
9600: LD_INT 4
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 32
9611: PUSH
9612: LD_INT 161
9614: PUSH
9615: LD_INT 69
9617: PUSH
9618: LD_INT 4
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 32
9629: PUSH
9630: LD_INT 168
9632: PUSH
9633: LD_INT 78
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 32
9647: PUSH
9648: LD_INT 163
9650: PUSH
9651: LD_INT 80
9653: PUSH
9654: LD_INT 5
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 32
9665: PUSH
9666: LD_INT 136
9668: PUSH
9669: LD_INT 73
9671: PUSH
9672: LD_INT 0
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: LD_INT 157
9686: PUSH
9687: LD_INT 98
9689: PUSH
9690: LD_INT 0
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 32
9701: PUSH
9702: LD_INT 150
9704: PUSH
9705: LD_INT 87
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 33
9719: PUSH
9720: LD_INT 171
9722: PUSH
9723: LD_INT 97
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 33
9737: PUSH
9738: LD_INT 168
9740: PUSH
9741: LD_INT 92
9743: PUSH
9744: LD_INT 4
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 33
9755: PUSH
9756: LD_INT 166
9758: PUSH
9759: LD_INT 80
9761: PUSH
9762: LD_INT 5
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 33
9773: PUSH
9774: LD_INT 141
9776: PUSH
9777: LD_INT 54
9779: PUSH
9780: LD_INT 2
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 33
9791: PUSH
9792: LD_INT 133
9794: PUSH
9795: LD_INT 57
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 33
9809: PUSH
9810: LD_INT 132
9812: PUSH
9813: LD_INT 61
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: PUSH
9825: LD_INT 33
9827: PUSH
9828: LD_INT 150
9830: PUSH
9831: LD_INT 82
9833: PUSH
9834: LD_INT 0
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 33
9845: PUSH
9846: LD_INT 132
9848: PUSH
9849: LD_INT 72
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 6
9863: PUSH
9864: LD_INT 146
9866: PUSH
9867: LD_INT 64
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 6
9881: PUSH
9882: LD_INT 159
9884: PUSH
9885: LD_INT 85
9887: PUSH
9888: LD_INT 4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 21
9899: PUSH
9900: LD_INT 163
9902: PUSH
9903: LD_INT 91
9905: PUSH
9906: LD_INT 3
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 16
9917: PUSH
9918: LD_INT 166
9920: PUSH
9921: LD_INT 95
9923: PUSH
9924: LD_INT 4
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 24
9935: PUSH
9936: LD_INT 159
9938: PUSH
9939: LD_INT 95
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9956: LIST
9957: LIST
9958: LIST
9959: LIST
<<<<<<< HEAD
9960: PUSH
9961: LD_INT 33
9963: PUSH
9964: LD_INT 168
9966: PUSH
9967: LD_INT 92
9969: PUSH
9970: LD_INT 4
9972: PUSH
9973: EMPTY
=======
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
9974: LIST
9975: LIST
9976: LIST
9977: LIST
<<<<<<< HEAD
9978: PUSH
9979: LD_INT 33
9981: PUSH
9982: LD_INT 166
9984: PUSH
9985: LD_INT 80
9987: PUSH
9988: LD_INT 5
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 33
9999: PUSH
10000: LD_INT 141
10002: PUSH
10003: LD_INT 54
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 33
10017: PUSH
10018: LD_INT 133
10020: PUSH
10021: LD_INT 57
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 33
10035: PUSH
10036: LD_INT 132
10038: PUSH
10039: LD_INT 61
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 33
10053: PUSH
10054: LD_INT 150
10056: PUSH
10057: LD_INT 82
10059: PUSH
10060: LD_INT 0
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 33
10071: PUSH
10072: LD_INT 132
10074: PUSH
10075: LD_INT 72
10077: PUSH
10078: LD_INT 0
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 6
10089: PUSH
10090: LD_INT 146
10092: PUSH
10093: LD_INT 64
10095: PUSH
10096: LD_INT 4
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 6
10107: PUSH
10108: LD_INT 159
10110: PUSH
10111: LD_INT 85
10113: PUSH
10114: LD_INT 4
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 21
10125: PUSH
10126: LD_INT 163
10128: PUSH
10129: LD_INT 91
10131: PUSH
10132: LD_INT 3
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 16
10143: PUSH
10144: LD_INT 166
10146: PUSH
10147: LD_INT 95
10149: PUSH
10150: LD_INT 4
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 24
10161: PUSH
10162: LD_INT 159
10164: PUSH
10165: LD_INT 95
10167: PUSH
10168: LD_INT 1
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: LIST
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10210: LD_ADDR_VAR 0 3
10214: PUSH
10215: LD_INT 22
=======
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9984: LD_ADDR_VAR 0 3
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: LD_INT 25
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10045
// AddComMoveXY ( i , 141 , 65 ) ;
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_INT 141
10035: PPUSH
10036: LD_INT 65
10038: PPUSH
10039: CALL_OW 171
10043: GO 10025
10045: POP
10046: POP
// for i := 1 to buildingsTab do
10047: LD_ADDR_VAR 0 3
10051: PUSH
10052: DOUBLE
10053: LD_INT 1
10055: DEC
10056: ST_TO_ADDR
10057: LD_VAR 0 5
10061: PUSH
10062: FOR_TO
10063: IFFALSE 10136
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10065: LD_VAR 0 4
10069: PPUSH
10070: LD_VAR 0 5
10074: PUSH
10075: LD_VAR 0 3
10079: ARRAY
10080: PUSH
10081: LD_INT 1
10083: ARRAY
10084: PPUSH
10085: LD_VAR 0 5
10089: PUSH
10090: LD_VAR 0 3
10094: ARRAY
10095: PUSH
10096: LD_INT 2
10098: ARRAY
10099: PPUSH
10100: LD_VAR 0 5
10104: PUSH
10105: LD_VAR 0 3
10109: ARRAY
10110: PUSH
10111: LD_INT 3
10113: ARRAY
10114: PPUSH
10115: LD_VAR 0 5
10119: PUSH
10120: LD_VAR 0 3
10124: ARRAY
10125: PUSH
10126: LD_INT 4
10128: ARRAY
10129: PPUSH
10130: CALL_OW 205
10134: GO 10062
10136: POP
10137: POP
// end ; end ;
10138: LD_VAR 0 2
10142: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
10143: LD_INT 0
10145: PPUSH
10146: PPUSH
10147: PPUSH
10148: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
10149: LD_ADDR_VAR 0 3
10153: PUSH
10154: LD_INT 22
10156: PUSH
10157: LD_INT 2
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 25
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
10183: LD_VAR 0 3
10187: PPUSH
10188: LD_INT 0
10190: PPUSH
10191: LD_INT 71
10193: PPUSH
10194: LD_INT 15
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
10204: LD_ADDR_VAR 0 4
10208: PUSH
10209: LD_INT 6
10211: PUSH
10212: LD_INT 77
10214: PUSH
10215: LD_INT 18
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
10217: PUSH
10218: LD_INT 3
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
<<<<<<< HEAD
10224: PUSH
10225: LD_INT 3
10227: PUSH
10228: LD_INT 25
10230: PUSH
10231: LD_INT 2
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: EMPTY
10239: LIST
10240: LIST
10241: PUSH
10242: EMPTY
10243: LIST
10244: LIST
10245: PPUSH
10246: CALL_OW 69
10250: PUSH
10251: FOR_IN
10252: IFFALSE 10299
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
10254: LD_VAR 0 3
10258: PPUSH
10259: LD_VAR 0 5
10263: PUSH
10264: LD_INT 2
10266: ARRAY
10267: PUSH
10268: LD_INT 2
10270: ARRAY
10271: PUSH
10272: LD_INT 2
10274: PLUS
10275: PPUSH
10276: LD_VAR 0 5
10280: PUSH
10281: LD_INT 2
10283: ARRAY
10284: PUSH
10285: LD_INT 3
10287: ARRAY
10288: PUSH
10289: LD_INT 3
10291: PLUS
10292: PPUSH
10293: CALL_OW 171
10297: GO 10251
10299: POP
10300: POP
// for i := 1 to buildingsTab do
10301: LD_ADDR_VAR 0 3
10305: PUSH
10306: DOUBLE
10307: LD_INT 1
10309: DEC
10310: ST_TO_ADDR
10311: LD_VAR 0 5
10315: PUSH
10316: FOR_TO
10317: IFFALSE 10390
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10319: LD_VAR 0 4
10323: PPUSH
10324: LD_VAR 0 5
10328: PUSH
10329: LD_VAR 0 3
10333: ARRAY
10334: PUSH
10335: LD_INT 1
10337: ARRAY
10338: PPUSH
10339: LD_VAR 0 5
10343: PUSH
10344: LD_VAR 0 3
10348: ARRAY
10349: PUSH
10350: LD_INT 2
10352: ARRAY
10353: PPUSH
10354: LD_VAR 0 5
10358: PUSH
10359: LD_VAR 0 3
10363: ARRAY
10364: PUSH
10365: LD_INT 3
10367: ARRAY
10368: PPUSH
10369: LD_VAR 0 5
10373: PUSH
10374: LD_VAR 0 3
10378: ARRAY
10379: PUSH
10380: LD_INT 4
10382: ARRAY
10383: PPUSH
10384: CALL_OW 205
10388: GO 10316
10390: POP
10391: POP
// end ; end ;
10392: LD_VAR 0 2
10396: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
10403: LD_ADDR_VAR 0 3
10407: PUSH
10408: LD_INT 22
10410: PUSH
10411: LD_INT 2
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 25
10420: PUSH
10421: LD_INT 2
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PPUSH
10432: CALL_OW 69
10436: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
10437: LD_VAR 0 3
10441: PPUSH
10442: LD_INT 0
10444: PPUSH
10445: LD_INT 71
10447: PPUSH
10448: LD_INT 15
10450: PPUSH
10451: LD_INT 3
10453: PPUSH
10454: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
10458: LD_ADDR_VAR 0 4
10462: PUSH
10463: LD_INT 6
10465: PUSH
10466: LD_INT 77
10468: PUSH
10469: LD_INT 18
10471: PUSH
10472: LD_INT 3
=======
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 77
10232: PUSH
10233: LD_INT 26
10235: PUSH
10236: LD_INT 0
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 31
10247: PUSH
10248: LD_INT 82
10250: PUSH
10251: LD_INT 28
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 31
10265: PUSH
10266: LD_INT 84
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 3
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 31
10283: PUSH
10284: LD_INT 66
10286: PUSH
10287: LD_INT 14
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 27
10301: PUSH
10302: LD_INT 67
10304: PUSH
10305: LD_INT 18
10307: PUSH
10308: LD_INT 5
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 27
10319: PUSH
10320: LD_INT 69
10322: PUSH
10323: LD_INT 23
10325: PUSH
10326: LD_INT 2
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: ST_TO_ADDR
// for i := 1 to buildingsTab do
10344: LD_ADDR_VAR 0 2
10348: PUSH
10349: DOUBLE
10350: LD_INT 1
10352: DEC
10353: ST_TO_ADDR
10354: LD_VAR 0 4
10358: PUSH
10359: FOR_TO
10360: IFFALSE 10433
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_VAR 0 4
10371: PUSH
10372: LD_VAR 0 2
10376: ARRAY
10377: PUSH
10378: LD_INT 1
10380: ARRAY
10381: PPUSH
10382: LD_VAR 0 4
10386: PUSH
10387: LD_VAR 0 2
10391: ARRAY
10392: PUSH
10393: LD_INT 2
10395: ARRAY
10396: PPUSH
10397: LD_VAR 0 4
10401: PUSH
10402: LD_VAR 0 2
10406: ARRAY
10407: PUSH
10408: LD_INT 3
10410: ARRAY
10411: PPUSH
10412: LD_VAR 0 4
10416: PUSH
10417: LD_VAR 0 2
10421: ARRAY
10422: PUSH
10423: LD_INT 4
10425: ARRAY
10426: PPUSH
10427: CALL_OW 205
10431: GO 10359
10433: POP
10434: POP
// end ;
10435: LD_VAR 0 1
10439: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10440: LD_INT 0
10442: PPUSH
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
10447: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10448: LD_ADDR_VAR 0 7
10452: PUSH
10453: LD_INT 22
10455: PUSH
10456: LD_VAR 0 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 25
10467: PUSH
10468: LD_INT 9
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
<<<<<<< HEAD
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 4
10483: PUSH
10484: LD_INT 77
10486: PUSH
10487: LD_INT 26
10489: PUSH
10490: LD_INT 0
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 31
10501: PUSH
10502: LD_INT 82
10504: PUSH
10505: LD_INT 28
10507: PUSH
10508: LD_INT 0
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 31
10519: PUSH
10520: LD_INT 84
10522: PUSH
10523: LD_INT 21
10525: PUSH
10526: LD_INT 3
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 31
10537: PUSH
10538: LD_INT 66
10540: PUSH
10541: LD_INT 14
10543: PUSH
10544: LD_INT 2
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: PUSH
10553: LD_INT 27
10555: PUSH
10556: LD_INT 67
10558: PUSH
10559: LD_INT 18
10561: PUSH
10562: LD_INT 5
10564: PUSH
10565: EMPTY
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 27
10573: PUSH
10574: LD_INT 69
10576: PUSH
10577: LD_INT 23
10579: PUSH
10580: LD_INT 2
10582: PUSH
10583: EMPTY
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: ST_TO_ADDR
// for i := 1 to buildingsTab do
10598: LD_ADDR_VAR 0 2
10602: PUSH
10603: DOUBLE
10604: LD_INT 1
10606: DEC
10607: ST_TO_ADDR
10608: LD_VAR 0 4
10612: PUSH
10613: FOR_TO
10614: IFFALSE 10687
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10616: LD_VAR 0 3
10620: PPUSH
10621: LD_VAR 0 4
10625: PUSH
10626: LD_VAR 0 2
10630: ARRAY
10631: PUSH
10632: LD_INT 1
10634: ARRAY
10635: PPUSH
10636: LD_VAR 0 4
10640: PUSH
10641: LD_VAR 0 2
10645: ARRAY
10646: PUSH
10647: LD_INT 2
10649: ARRAY
10650: PPUSH
10651: LD_VAR 0 4
10655: PUSH
10656: LD_VAR 0 2
10660: ARRAY
10661: PUSH
10662: LD_INT 3
10664: ARRAY
10665: PPUSH
10666: LD_VAR 0 4
10670: PUSH
10671: LD_VAR 0 2
10675: ARRAY
10676: PUSH
10677: LD_INT 4
10679: ARRAY
10680: PPUSH
10681: CALL_OW 205
10685: GO 10613
10687: POP
10688: POP
// end ;
10689: LD_VAR 0 1
10693: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
10698: PPUSH
10699: PPUSH
10700: PPUSH
10701: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10702: LD_ADDR_VAR 0 7
10706: PUSH
10707: LD_INT 22
10709: PUSH
10710: LD_VAR 0 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 25
10721: PUSH
10722: LD_INT 9
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PPUSH
10733: CALL_OW 69
10737: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10738: LD_ADDR_VAR 0 8
10742: PUSH
10743: LD_INT 22
10745: PUSH
10746: LD_VAR 0 2
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 3
10757: PUSH
10758: LD_INT 21
10760: PUSH
10761: LD_INT 3
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: PPUSH
10776: CALL_OW 69
10780: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10781: LD_ADDR_VAR 0 5
10785: PUSH
10786: LD_INT 1
10788: PPUSH
10789: LD_INT 3
10791: PPUSH
10792: CALL_OW 12
10796: ST_TO_ADDR
// for i = 1 to list do
10797: LD_ADDR_VAR 0 6
10801: PUSH
10802: DOUBLE
10803: LD_INT 1
10805: DEC
10806: ST_TO_ADDR
10807: LD_VAR 0 7
10811: PUSH
10812: FOR_TO
10813: IFFALSE 11511
// for ta in filter do
10815: LD_ADDR_VAR 0 4
10819: PUSH
10820: LD_VAR 0 8
10824: PUSH
10825: FOR_IN
10826: IFFALSE 11507
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
10828: LD_VAR 0 7
10832: PUSH
10833: LD_VAR 0 6
10837: ARRAY
10838: PPUSH
10839: LD_VAR 0 4
10843: PPUSH
10844: CALL_OW 296
10848: PUSH
10849: LD_INT 12
10851: LESSEQUAL
10852: IFFALSE 11505
// begin case c of 1 :
10854: LD_VAR 0 5
10858: PUSH
10859: LD_INT 1
10861: DOUBLE
10862: EQUAL
10863: IFTRUE 10867
10865: GO 11163
10867: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
10868: LD_VAR 0 7
10872: PUSH
10873: LD_VAR 0 6
10877: ARRAY
10878: PPUSH
10879: LD_VAR 0 4
10883: PPUSH
10884: CALL_OW 250
10888: PPUSH
10889: LD_VAR 0 4
10893: PPUSH
10894: CALL_OW 251
10898: PPUSH
10899: CALL_OW 154
// if eventVar2 = 0 then
10903: LD_EXP 58
10907: PUSH
10908: LD_INT 0
10910: EQUAL
10911: IFFALSE 11161
// begin eventVar2 = 1 ;
10913: LD_ADDR_EXP 58
10917: PUSH
10918: LD_INT 1
10920: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10921: LD_INT 245
10923: PPUSH
10924: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
10928: LD_VAR 0 4
10932: PPUSH
10933: CALL_OW 250
10937: PPUSH
10938: LD_VAR 0 4
10942: PPUSH
10943: CALL_OW 251
10947: PPUSH
10948: CALL_OW 84
// DialogueOn ;
10952: CALL_OW 6
// if IsOK ( Cyrus ) then
10956: LD_EXP 5
10960: PPUSH
10961: CALL_OW 302
10965: IFFALSE 10981
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
10967: LD_EXP 5
10971: PPUSH
10972: LD_STRING D9a-Cyrus-1
10974: PPUSH
10975: CALL_OW 88
// end else
10979: GO 11035
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
10981: LD_INT 22
10983: PUSH
10984: LD_INT 1
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 26
10993: PUSH
10994: LD_INT 1
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PUSH
11005: LD_EXP 1
11009: PUSH
11010: LD_EXP 14
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: DIFF
11019: PPUSH
11020: CALL_OW 69
11024: PPUSH
11025: LD_STRING D9a-Sol1-1
11027: PPUSH
11028: LD_STRING D9a-Sol1-1
11030: PPUSH
11031: CALL 7407 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11035: LD_INT 22
11037: PUSH
11038: LD_INT 1
11040: PUSH
11041: EMPTY
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 26
11047: PUSH
11048: LD_INT 1
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: PUSH
11059: LD_EXP 1
11063: PUSH
11064: LD_EXP 14
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: DIFF
11073: PPUSH
11074: CALL_OW 69
11078: PPUSH
11079: LD_STRING D9b-Sol1-1
11081: PPUSH
11082: LD_STRING D9b-Sol1-1
11084: PPUSH
11085: CALL 7407 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11089: LD_STRING 09_arInfo
11091: PPUSH
11092: LD_INT 0
11094: PPUSH
11095: CALL_OW 30
11099: PUSH
11100: LD_INT 1
11102: EQUAL
11103: IFFALSE 11117
// Say ( JMM , D9a-JMM-1 ) ;
11105: LD_EXP 1
11109: PPUSH
11110: LD_STRING D9a-JMM-1
11112: PPUSH
11113: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11117: LD_EXP 1
11121: PPUSH
11122: LD_STRING D9c-JMM-1
11124: PPUSH
11125: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11129: LD_INT 12
11131: PPUSH
11132: LD_INT 1
11134: PPUSH
11135: CALL_OW 321
11139: PUSH
11140: LD_INT 2
11142: EQUAL
11143: IFFALSE 11157
// Say ( JMM , D9c-JMM-1a ) ;
11145: LD_EXP 1
11149: PPUSH
11150: LD_STRING D9c-JMM-1a
11152: PPUSH
11153: CALL_OW 88
// DialogueOff ;
11157: CALL_OW 7
// end ; end ; 2 :
11161: GO 11505
11163: LD_INT 2
11165: DOUBLE
11166: EQUAL
11167: IFTRUE 11171
11169: GO 11493
11171: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
11172: LD_VAR 0 7
11176: PUSH
11177: LD_VAR 0 6
11181: ARRAY
11182: PPUSH
11183: LD_VAR 0 4
11187: PPUSH
11188: CALL_OW 250
11192: PUSH
11193: LD_INT 1
11195: NEG
11196: PPUSH
11197: LD_INT 1
11199: PPUSH
11200: CALL_OW 12
11204: PLUS
11205: PPUSH
11206: LD_VAR 0 4
11210: PPUSH
11211: CALL_OW 251
11215: PUSH
11216: LD_INT 1
11218: NEG
11219: PPUSH
11220: LD_INT 1
11222: PPUSH
11223: CALL_OW 12
11227: PLUS
11228: PPUSH
11229: CALL_OW 153
// if eventVar2 = 0 then
11233: LD_EXP 58
11237: PUSH
11238: LD_INT 0
11240: EQUAL
11241: IFFALSE 11491
// begin eventVar2 = 1 ;
11243: LD_ADDR_EXP 58
11247: PUSH
11248: LD_INT 1
11250: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11251: LD_INT 245
11253: PPUSH
11254: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11258: LD_VAR 0 4
11262: PPUSH
11263: CALL_OW 250
11267: PPUSH
11268: LD_VAR 0 4
11272: PPUSH
11273: CALL_OW 251
11277: PPUSH
11278: CALL_OW 84
// DialogueOn ;
11282: CALL_OW 6
// if IsOK ( Cyrus ) then
11286: LD_EXP 5
11290: PPUSH
11291: CALL_OW 302
11295: IFFALSE 11311
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11297: LD_EXP 5
11301: PPUSH
11302: LD_STRING D9a-Cyrus-1
11304: PPUSH
11305: CALL_OW 88
// end else
11309: GO 11365
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11311: LD_INT 22
11313: PUSH
11314: LD_INT 1
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 26
11323: PUSH
11324: LD_INT 1
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
=======
10478: PPUSH
10479: CALL_OW 69
10483: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10484: LD_ADDR_VAR 0 8
10488: PUSH
10489: LD_INT 22
10491: PUSH
10492: LD_VAR 0 2
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 3
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 3
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 69
10526: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10527: LD_ADDR_VAR 0 5
10531: PUSH
10532: LD_INT 1
10534: PPUSH
10535: LD_INT 3
10537: PPUSH
10538: CALL_OW 12
10542: ST_TO_ADDR
// for i = 1 to list do
10543: LD_ADDR_VAR 0 6
10547: PUSH
10548: DOUBLE
10549: LD_INT 1
10551: DEC
10552: ST_TO_ADDR
10553: LD_VAR 0 7
10557: PUSH
10558: FOR_TO
10559: IFFALSE 11529
// for ta in filter do
10561: LD_ADDR_VAR 0 4
10565: PUSH
10566: LD_VAR 0 8
10570: PUSH
10571: FOR_IN
10572: IFFALSE 11525
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
10574: LD_VAR 0 7
10578: PUSH
10579: LD_VAR 0 6
10583: ARRAY
10584: PPUSH
10585: LD_VAR 0 4
10589: PPUSH
10590: CALL_OW 296
10594: PUSH
10595: LD_INT 12
10597: LESSEQUAL
10598: IFFALSE 11523
// begin case c of 1 :
10600: LD_VAR 0 5
10604: PUSH
10605: LD_INT 1
10607: DOUBLE
10608: EQUAL
10609: IFTRUE 10613
10611: GO 11045
10613: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
10614: LD_VAR 0 7
10618: PUSH
10619: LD_VAR 0 6
10623: ARRAY
10624: PPUSH
10625: LD_VAR 0 4
10629: PPUSH
10630: CALL_OW 250
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL_OW 251
10644: PPUSH
10645: CALL_OW 154
// if eventVar2 = 0 then
10649: LD_EXP 55
10653: PUSH
10654: LD_INT 0
10656: EQUAL
10657: IFFALSE 11043
// begin eventVar2 = 1 ;
10659: LD_ADDR_EXP 55
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10667: LD_INT 245
10669: PPUSH
10670: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
10674: LD_VAR 0 4
10678: PPUSH
10679: CALL_OW 250
10683: PPUSH
10684: LD_VAR 0 4
10688: PPUSH
10689: CALL_OW 251
10693: PPUSH
10694: CALL_OW 84
// DialogueOn ;
10698: CALL_OW 6
// if IsOK ( Cyrus ) then
10702: LD_EXP 5
10706: PPUSH
10707: CALL_OW 302
10711: IFFALSE 10727
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
10713: LD_EXP 5
10717: PPUSH
10718: LD_STRING D9a-Cyrus-1
10720: PPUSH
10721: CALL_OW 88
// end else
10725: GO 10849
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
10727: LD_INT 22
10729: PUSH
10730: LD_INT 1
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 26
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 25
10752: PUSH
10753: LD_INT 1
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 4
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 5
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 69
10817: PUSH
10818: LD_EXP 1
10822: PUSH
10823: LD_EXP 14
10827: PUSH
10828: LD_EXP 5
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: DIFF
10838: PPUSH
10839: LD_STRING D9a-Sol1-1
10841: PPUSH
10842: LD_STRING D9a-Sol1-1
10844: PPUSH
10845: CALL 7422 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
10849: LD_INT 22
10851: PUSH
10852: LD_INT 1
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 26
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 25
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 2
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 3
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 4
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 5
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 69
10939: PUSH
10940: LD_EXP 1
10944: PUSH
10945: LD_EXP 14
10949: PUSH
10950: LD_EXP 5
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: DIFF
10960: PPUSH
10961: LD_STRING D9b-Sol1-1
10963: PPUSH
10964: LD_STRING D9b-Sol1-1
10966: PPUSH
10967: CALL 7422 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
10971: LD_STRING 09_arInfo
10973: PPUSH
10974: LD_INT 0
10976: PPUSH
10977: CALL_OW 30
10981: PUSH
10982: LD_INT 1
10984: EQUAL
10985: IFFALSE 10999
// Say ( JMM , D9a-JMM-1 ) ;
10987: LD_EXP 1
10991: PPUSH
10992: LD_STRING D9a-JMM-1
10994: PPUSH
10995: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
10999: LD_EXP 1
11003: PPUSH
11004: LD_STRING D9c-JMM-1
11006: PPUSH
11007: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11011: LD_INT 12
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 321
11021: PUSH
11022: LD_INT 2
11024: EQUAL
11025: IFFALSE 11039
// Say ( JMM , D9c-JMM-1a ) ;
11027: LD_EXP 1
11031: PPUSH
11032: LD_STRING D9c-JMM-1a
11034: PPUSH
11035: CALL_OW 88
// DialogueOff ;
11039: CALL_OW 7
// end ; end ; 2 :
11043: GO 11523
11045: LD_INT 2
11047: DOUBLE
11048: EQUAL
11049: IFTRUE 11053
11051: GO 11511
11053: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
11054: LD_VAR 0 7
11058: PUSH
11059: LD_VAR 0 6
11063: ARRAY
11064: PPUSH
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 250
11074: PUSH
11075: LD_INT 1
11077: NEG
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 12
11086: PLUS
11087: PPUSH
11088: LD_VAR 0 4
11092: PPUSH
11093: CALL_OW 251
11097: PUSH
11098: LD_INT 1
11100: NEG
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 12
11109: PLUS
11110: PPUSH
11111: CALL_OW 153
// if eventVar2 = 0 then
11115: LD_EXP 55
11119: PUSH
11120: LD_INT 0
11122: EQUAL
11123: IFFALSE 11509
// begin eventVar2 = 1 ;
11125: LD_ADDR_EXP 55
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11133: LD_INT 245
11135: PPUSH
11136: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11140: LD_VAR 0 4
11144: PPUSH
11145: CALL_OW 250
11149: PPUSH
11150: LD_VAR 0 4
11154: PPUSH
11155: CALL_OW 251
11159: PPUSH
11160: CALL_OW 84
// DialogueOn ;
11164: CALL_OW 6
// if IsOK ( Cyrus ) then
11168: LD_EXP 5
11172: PPUSH
11173: CALL_OW 302
11177: IFFALSE 11193
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11179: LD_EXP 5
11183: PPUSH
11184: LD_STRING D9a-Cyrus-1
11186: PPUSH
11187: CALL_OW 88
// end else
11191: GO 11315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11193: LD_INT 22
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 26
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 2
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 3
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 4
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 5
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: PUSH
11284: LD_EXP 1
11288: PUSH
11289: LD_EXP 14
11293: PUSH
11294: LD_EXP 5
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: DIFF
11304: PPUSH
11305: LD_STRING D9a-Sol1-1
11307: PPUSH
11308: LD_STRING D9a-Sol1-1
11310: PPUSH
11311: CALL 7422 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11315: LD_INT 22
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 26
11327: PUSH
11328: LD_INT 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
<<<<<<< HEAD
11335: LD_EXP 1
11339: PUSH
11340: LD_EXP 14
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: DIFF
11349: PPUSH
11350: CALL_OW 69
11354: PPUSH
11355: LD_STRING D9a-Sol1-1
11357: PPUSH
11358: LD_STRING D9a-Sol1-1
11360: PPUSH
11361: CALL 7407 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11365: LD_INT 22
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 26
11377: PUSH
11378: LD_INT 1
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: PUSH
11389: LD_EXP 1
11393: PUSH
11394: LD_EXP 14
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: DIFF
11403: PPUSH
11404: CALL_OW 69
11408: PPUSH
11409: LD_STRING D9b-Sol1-1
11411: PPUSH
11412: LD_STRING D9b-Sol1-1
11414: PPUSH
11415: CALL 7407 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11419: LD_STRING 09_arInfo
11421: PPUSH
11422: LD_INT 0
11424: PPUSH
11425: CALL_OW 30
11429: PUSH
11430: LD_INT 1
11432: EQUAL
11433: IFFALSE 11447
// Say ( JMM , D9a-JMM-1 ) ;
11435: LD_EXP 1
11439: PPUSH
11440: LD_STRING D9a-JMM-1
11442: PPUSH
11443: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11447: LD_EXP 1
11451: PPUSH
11452: LD_STRING D9c-JMM-1
11454: PPUSH
11455: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11459: LD_INT 12
11461: PPUSH
11462: LD_INT 1
11464: PPUSH
11465: CALL_OW 321
11469: PUSH
11470: LD_INT 2
11472: EQUAL
11473: IFFALSE 11487
// Say ( JMM , D9c-JMM-1a ) ;
11475: LD_EXP 1
11479: PPUSH
11480: LD_STRING D9c-JMM-1a
11482: PPUSH
11483: CALL_OW 88
// DialogueOff ;
11487: CALL_OW 7
// end ; end ; 3 :
11491: GO 11505
11493: LD_INT 3
11495: DOUBLE
11496: EQUAL
11497: IFTRUE 11501
11499: GO 11504
11501: POP
// ; end ;
11502: GO 11505
11504: POP
// end ; end ;
11505: GO 10825
11507: POP
11508: POP
11509: GO 10812
11511: POP
11512: POP
// end ;
11513: LD_VAR 0 3
11517: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11518: LD_INT 0
11520: PPUSH
11521: PPUSH
11522: PPUSH
11523: PPUSH
// for i = 1 to 72 do
11524: LD_ADDR_VAR 0 5
11528: PUSH
11529: DOUBLE
11530: LD_INT 1
11532: DEC
11533: ST_TO_ADDR
11534: LD_INT 72
11536: PUSH
11537: FOR_TO
11538: IFFALSE 11596
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11540: LD_VAR 0 5
11544: PPUSH
11545: LD_VAR 0 1
11549: PPUSH
11550: CALL_OW 321
11554: PUSH
11555: LD_INT 1
11557: EQUAL
11558: PUSH
11559: LD_VAR 0 5
11563: PPUSH
11564: LD_VAR 0 3
11568: PPUSH
11569: CALL_OW 482
11573: PUSH
11574: LD_INT 1
11576: EQUAL
11577: AND
11578: IFFALSE 11594
// AddComResearch ( lab , i ) ;
11580: LD_VAR 0 2
11584: PPUSH
11585: LD_VAR 0 5
11589: PPUSH
11590: CALL_OW 184
11594: GO 11537
11596: POP
11597: POP
// end ;
11598: LD_VAR 0 4
11602: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
11603: LD_INT 0
11605: PPUSH
11606: PPUSH
11607: PPUSH
11608: PPUSH
11609: PPUSH
11610: PPUSH
11611: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11612: LD_ADDR_VAR 0 6
11616: PUSH
11617: LD_INT 22
11619: PUSH
11620: LD_VAR 0 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 56
11631: PUSH
11632: EMPTY
11633: LIST
11634: PUSH
11635: LD_INT 24
11637: PUSH
11638: LD_INT 700
11640: PUSH
11641: EMPTY
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 25
11650: PUSH
11651: LD_INT 1
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 25
11660: PUSH
11661: LD_INT 9
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 69
11683: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11684: LD_ADDR_VAR 0 7
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_VAR 0 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 30
11703: PUSH
11704: LD_INT 32
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 58
11713: PUSH
11714: EMPTY
11715: LIST
11716: PUSH
11717: LD_INT 24
11719: PUSH
11720: LD_INT 251
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: PPUSH
11733: CALL_OW 69
11737: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11738: LD_ADDR_VAR 0 9
11742: PUSH
11743: LD_INT 22
11745: PUSH
11746: LD_VAR 0 1
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: LD_INT 30
11760: PUSH
11761: LD_INT 4
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 30
11770: PUSH
11771: LD_INT 5
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: LD_INT 24
11785: PUSH
11786: LD_INT 251
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: PPUSH
11798: CALL_OW 69
11802: ST_TO_ADDR
// if barrackList > 0 then
11803: LD_VAR 0 9
11807: PUSH
11808: LD_INT 0
11810: GREATER
11811: IFFALSE 11900
// begin if turretList = 0 then
11813: LD_VAR 0 7
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11860
// begin for i in soldiers_list do
11823: LD_ADDR_VAR 0 4
11827: PUSH
11828: LD_VAR 0 6
11832: PUSH
11833: FOR_IN
11834: IFFALSE 11856
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
11836: LD_VAR 0 4
11840: PPUSH
11841: LD_VAR 0 9
11845: PUSH
11846: LD_INT 1
11848: ARRAY
11849: PPUSH
11850: CALL_OW 120
11854: GO 11833
11856: POP
11857: POP
// end else
11858: GO 11900
// begin for i in barrackList do
11860: LD_ADDR_VAR 0 4
11864: PUSH
11865: LD_VAR 0 9
11869: PUSH
11870: FOR_IN
11871: IFFALSE 11898
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
11873: LD_VAR 0 4
11877: PPUSH
11878: CALL_OW 313
11882: PPUSH
11883: LD_VAR 0 7
11887: PUSH
11888: LD_INT 1
11890: ARRAY
11891: PPUSH
11892: CALL_OW 120
// end ;
11896: GO 11870
11898: POP
11899: POP
// end ; end ; end ;
11900: LD_VAR 0 3
11904: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
11909: PPUSH
11910: PPUSH
11911: PPUSH
11912: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11913: LD_ADDR_VAR 0 6
11917: PUSH
11918: LD_VAR 0 2
11922: PPUSH
11923: CALL_OW 313
11927: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
11928: LD_ADDR_VAR 0 7
11932: PUSH
11933: LD_INT 22
11935: PUSH
11936: LD_VAR 0 1
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 25
11947: PUSH
11948: LD_INT 2
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 24
11957: PUSH
11958: LD_INT 1000
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: LIST
11969: PPUSH
11970: CALL_OW 69
11974: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11975: LD_ADDR_VAR 0 4
11979: PUSH
11980: LD_INT 22
11982: PUSH
11983: LD_VAR 0 1
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 21
11994: PUSH
11995: LD_INT 3
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 3
12004: PUSH
12005: LD_INT 24
12007: PUSH
12008: LD_INT 1000
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: PPUSH
12027: CALL_OW 69
12031: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12032: LD_VAR 0 4
12036: NOT
12037: PUSH
12038: LD_VAR 0 7
12042: NOT
12043: AND
12044: IFFALSE 12048
// exit ;
12046: GO 12207
// if buildings_list > 0 and engineerOkInside > 0 then
12048: LD_VAR 0 4
12052: PUSH
12053: LD_INT 0
12055: GREATER
12056: PUSH
12057: LD_VAR 0 6
12061: PUSH
12062: LD_INT 0
12064: GREATER
12065: AND
12066: IFFALSE 12094
// for i in engineerOkInside do
12068: LD_ADDR_VAR 0 5
12072: PUSH
12073: LD_VAR 0 6
12077: PUSH
12078: FOR_IN
12079: IFFALSE 12092
// ComExitBuilding ( i ) ;
12081: LD_VAR 0 5
12085: PPUSH
12086: CALL_OW 122
12090: GO 12078
12092: POP
12093: POP
// if engineerOkOutside > 0 then
12094: LD_VAR 0 7
12098: PUSH
12099: LD_INT 0
12101: GREATER
12102: IFFALSE 12156
// begin for i in engineerOkOutside do
12104: LD_ADDR_VAR 0 5
12108: PUSH
12109: LD_VAR 0 7
12113: PUSH
12114: FOR_IN
12115: IFFALSE 12154
// for j in buildings_list do
12117: LD_ADDR_VAR 0 8
12121: PUSH
12122: LD_VAR 0 4
12126: PUSH
12127: FOR_IN
12128: IFFALSE 12150
// ComRepairBuilding ( i , j [ 1 ] ) ;
12130: LD_VAR 0 5
12134: PPUSH
12135: LD_VAR 0 8
12139: PUSH
12140: LD_INT 1
12142: ARRAY
12143: PPUSH
12144: CALL_OW 130
12148: GO 12127
12150: POP
12151: POP
12152: GO 12114
12154: POP
12155: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12156: LD_VAR 0 4
12160: PUSH
12161: LD_INT 0
12163: EQUAL
12164: PUSH
12165: LD_VAR 0 7
12169: PUSH
12170: LD_INT 0
12172: GREATER
12173: AND
12174: IFFALSE 12207
// for i in engineerOkOutside do
12176: LD_ADDR_VAR 0 5
12180: PUSH
12181: LD_VAR 0 7
12185: PUSH
12186: FOR_IN
12187: IFFALSE 12205
// ComEnterUnit ( i , building ) ;
12189: LD_VAR 0 5
12193: PPUSH
12194: LD_VAR 0 2
12198: PPUSH
12199: CALL_OW 120
12203: GO 12186
12205: POP
12206: POP
// end ;
12207: LD_VAR 0 3
12211: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
12216: LD_INT 22
12218: PUSH
12219: LD_VAR 0 1
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 25
12230: PUSH
12231: LD_INT 2
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 69
12246: PUSH
12247: LD_INT 0
12249: GREATER
12250: PUSH
12251: LD_INT 22
12253: PUSH
12254: LD_VAR 0 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: LD_INT 21
12265: PUSH
12266: LD_INT 3
12268: PUSH
12269: EMPTY
12270: LIST
12271: LIST
12272: PUSH
12273: LD_INT 3
12275: PUSH
12276: LD_INT 24
12278: PUSH
12279: LD_INT 1000
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PUSH
12286: EMPTY
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 69
12299: PUSH
12300: LD_INT 0
12302: EQUAL
12303: AND
12304: PUSH
12305: LD_VAR 0 2
12309: PUSH
12310: LD_INT 0
12312: GREATER
12313: AND
12314: IFFALSE 12413
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12316: LD_ADDR_VAR 0 4
12320: PUSH
12321: LD_INT 22
12323: PUSH
12324: LD_VAR 0 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 25
12335: PUSH
12336: LD_INT 2
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: PUSH
12352: FOR_IN
12353: IFFALSE 12411
// begin AddComExitBuilding ( i ) ;
12355: LD_VAR 0 4
12359: PPUSH
12360: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12364: LD_VAR 0 4
12368: PPUSH
12369: LD_VAR 0 2
12373: PUSH
12374: LD_INT 1
12376: ARRAY
12377: PPUSH
12378: LD_VAR 0 2
12382: PUSH
12383: LD_INT 2
12385: ARRAY
12386: PPUSH
12387: LD_VAR 0 2
12391: PUSH
12392: LD_INT 3
12394: ARRAY
12395: PPUSH
12396: LD_VAR 0 2
12400: PUSH
12401: LD_INT 4
12403: ARRAY
12404: PPUSH
12405: CALL_OW 205
// end ;
12409: GO 12352
12411: POP
12412: POP
// end ; end ;
12413: LD_VAR 0 3
12417: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12418: LD_INT 0
12420: PPUSH
12421: PPUSH
12422: PPUSH
12423: PPUSH
12424: PPUSH
12425: PPUSH
12426: PPUSH
12427: PPUSH
12428: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12429: LD_ADDR_VAR 0 6
12433: PUSH
12434: LD_INT 22
12436: PUSH
12437: LD_VAR 0 1
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 25
12448: PUSH
12449: LD_INT 4
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 24
12458: PUSH
12459: LD_INT 251
12461: PUSH
12462: EMPTY
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: PPUSH
12471: CALL_OW 69
12475: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12476: LD_ADDR_VAR 0 7
12480: PUSH
12481: LD_VAR 0 3
12485: PPUSH
12486: LD_INT 22
12488: PUSH
12489: LD_VAR 0 1
12493: PUSH
12494: EMPTY
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 25
12500: PUSH
12501: LD_INT 4
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 50
12510: PUSH
12511: EMPTY
12512: LIST
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: LIST
12518: PPUSH
12519: CALL_OW 70
12523: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12524: LD_ADDR_VAR 0 10
12528: PUSH
12529: LD_VAR 0 3
12533: PPUSH
12534: LD_INT 22
12536: PUSH
12537: LD_VAR 0 1
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 21
12548: PUSH
12549: LD_INT 1
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 25
12561: PUSH
12562: LD_INT 3
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
=======
11335: LD_INT 2
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 25
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 25
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 25
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 69
11405: PUSH
11406: LD_EXP 1
11410: PUSH
11411: LD_EXP 14
11415: PUSH
11416: LD_EXP 5
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: DIFF
11426: PPUSH
11427: LD_STRING D9b-Sol1-1
11429: PPUSH
11430: LD_STRING D9b-Sol1-1
11432: PPUSH
11433: CALL 7422 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11437: LD_STRING 09_arInfo
11439: PPUSH
11440: LD_INT 0
11442: PPUSH
11443: CALL_OW 30
11447: PUSH
11448: LD_INT 1
11450: EQUAL
11451: IFFALSE 11465
// Say ( JMM , D9a-JMM-1 ) ;
11453: LD_EXP 1
11457: PPUSH
11458: LD_STRING D9a-JMM-1
11460: PPUSH
11461: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11465: LD_EXP 1
11469: PPUSH
11470: LD_STRING D9c-JMM-1
11472: PPUSH
11473: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11477: LD_INT 12
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 321
11487: PUSH
11488: LD_INT 2
11490: EQUAL
11491: IFFALSE 11505
// Say ( JMM , D9c-JMM-1a ) ;
11493: LD_EXP 1
11497: PPUSH
11498: LD_STRING D9c-JMM-1a
11500: PPUSH
11501: CALL_OW 88
// DialogueOff ;
11505: CALL_OW 7
// end ; end ; 3 :
11509: GO 11523
11511: LD_INT 3
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11522
11519: POP
// ; end ;
11520: GO 11523
11522: POP
// end ; end ;
11523: GO 10571
11525: POP
11526: POP
11527: GO 10558
11529: POP
11530: POP
// end ;
11531: LD_VAR 0 3
11535: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11536: LD_INT 0
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
// for i = 1 to 72 do
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: DOUBLE
11548: LD_INT 1
11550: DEC
11551: ST_TO_ADDR
11552: LD_INT 72
11554: PUSH
11555: FOR_TO
11556: IFFALSE 11614
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11558: LD_VAR 0 5
11562: PPUSH
11563: LD_VAR 0 1
11567: PPUSH
11568: CALL_OW 321
11572: PUSH
11573: LD_INT 1
11575: EQUAL
11576: PUSH
11577: LD_VAR 0 5
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: CALL_OW 482
11591: PUSH
11592: LD_INT 1
11594: EQUAL
11595: AND
11596: IFFALSE 11612
// AddComResearch ( lab , i ) ;
11598: LD_VAR 0 2
11602: PPUSH
11603: LD_VAR 0 5
11607: PPUSH
11608: CALL_OW 184
11612: GO 11555
11614: POP
11615: POP
// end ;
11616: LD_VAR 0 4
11620: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11621: LD_INT 0
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
11627: PPUSH
11628: PPUSH
11629: PPUSH
11630: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_VAR 0 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 56
11650: PUSH
11651: EMPTY
11652: LIST
11653: PUSH
11654: LD_INT 24
11656: PUSH
11657: LD_INT 700
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 25
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 25
11679: PUSH
11680: LD_INT 9
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11703: LD_ADDR_VAR 0 7
11707: PUSH
11708: LD_INT 22
11710: PUSH
11711: LD_VAR 0 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 30
11722: PUSH
11723: LD_INT 32
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 58
11732: PUSH
11733: EMPTY
11734: LIST
11735: PUSH
11736: LD_INT 24
11738: PUSH
11739: LD_INT 251
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: PPUSH
11752: CALL_OW 69
11756: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11757: LD_ADDR_VAR 0 9
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_VAR 0 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 2
11776: PUSH
11777: LD_INT 30
11779: PUSH
11780: LD_INT 4
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 5
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 24
11804: PUSH
11805: LD_INT 251
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 69
11821: ST_TO_ADDR
// if barrackList > 0 then
11822: LD_VAR 0 9
11826: PUSH
11827: LD_INT 0
11829: GREATER
11830: IFFALSE 11965
// begin if turretList = 0 then
11832: LD_VAR 0 7
11836: PUSH
11837: LD_INT 0
11839: EQUAL
11840: IFFALSE 11889
// begin for i in soldiers_list do
11842: LD_ADDR_VAR 0 4
11846: PUSH
11847: LD_VAR 0 6
11851: PUSH
11852: FOR_IN
11853: IFFALSE 11885
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11855: LD_VAR 0 4
11859: PPUSH
11860: LD_VAR 0 9
11864: PUSH
11865: LD_INT 1
11867: PPUSH
11868: LD_VAR 0 9
11872: PPUSH
11873: CALL_OW 12
11877: ARRAY
11878: PPUSH
11879: CALL_OW 120
11883: GO 11852
11885: POP
11886: POP
// end else
11887: GO 11965
// begin for i in barrackList do
11889: LD_ADDR_VAR 0 4
11893: PUSH
11894: LD_VAR 0 9
11898: PUSH
11899: FOR_IN
11900: IFFALSE 11963
// begin insideUnits = UnitsInside ( i ) ;
11902: LD_ADDR_VAR 0 10
11906: PUSH
11907: LD_VAR 0 4
11911: PPUSH
11912: CALL_OW 313
11916: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11917: LD_VAR 0 10
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_VAR 0 7
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PPUSH
11935: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11939: LD_VAR 0 6
11943: PUSH
11944: LD_INT 1
11946: ARRAY
11947: PPUSH
11948: LD_VAR 0 7
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: CALL_OW 120
// end ;
11961: GO 11899
11963: POP
11964: POP
// end ; end ; end ;
11965: LD_VAR 0 3
11969: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11970: LD_INT 0
11972: PPUSH
11973: PPUSH
11974: PPUSH
11975: PPUSH
11976: PPUSH
11977: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11978: LD_ADDR_VAR 0 6
11982: PUSH
11983: LD_VAR 0 2
11987: PPUSH
11988: CALL_OW 313
11992: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
11993: LD_ADDR_VAR 0 7
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_VAR 0 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 24
12022: PUSH
12023: LD_INT 1000
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: PPUSH
12035: CALL_OW 69
12039: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12040: LD_ADDR_VAR 0 4
12044: PUSH
12045: LD_INT 22
12047: PUSH
12048: LD_VAR 0 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 3
12069: PUSH
12070: LD_INT 24
12072: PUSH
12073: LD_INT 1000
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: PPUSH
12092: CALL_OW 69
12096: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12097: LD_VAR 0 4
12101: NOT
12102: PUSH
12103: LD_VAR 0 7
12107: NOT
12108: AND
12109: IFFALSE 12113
// exit ;
12111: GO 12272
// if buildings_list > 0 and engineerOkInside > 0 then
12113: LD_VAR 0 4
12117: PUSH
12118: LD_INT 0
12120: GREATER
12121: PUSH
12122: LD_VAR 0 6
12126: PUSH
12127: LD_INT 0
12129: GREATER
12130: AND
12131: IFFALSE 12159
// for i in engineerOkInside do
12133: LD_ADDR_VAR 0 5
12137: PUSH
12138: LD_VAR 0 6
12142: PUSH
12143: FOR_IN
12144: IFFALSE 12157
// ComExitBuilding ( i ) ;
12146: LD_VAR 0 5
12150: PPUSH
12151: CALL_OW 122
12155: GO 12143
12157: POP
12158: POP
// if engineerOkOutside > 0 then
12159: LD_VAR 0 7
12163: PUSH
12164: LD_INT 0
12166: GREATER
12167: IFFALSE 12221
// begin for i in engineerOkOutside do
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: LD_VAR 0 7
12178: PUSH
12179: FOR_IN
12180: IFFALSE 12219
// for j in buildings_list do
12182: LD_ADDR_VAR 0 8
12186: PUSH
12187: LD_VAR 0 4
12191: PUSH
12192: FOR_IN
12193: IFFALSE 12215
// ComRepairBuilding ( i , j [ 1 ] ) ;
12195: LD_VAR 0 5
12199: PPUSH
12200: LD_VAR 0 8
12204: PUSH
12205: LD_INT 1
12207: ARRAY
12208: PPUSH
12209: CALL_OW 130
12213: GO 12192
12215: POP
12216: POP
12217: GO 12179
12219: POP
12220: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12221: LD_VAR 0 4
12225: PUSH
12226: LD_INT 0
12228: EQUAL
12229: PUSH
12230: LD_VAR 0 7
12234: PUSH
12235: LD_INT 0
12237: GREATER
12238: AND
12239: IFFALSE 12272
// for i in engineerOkOutside do
12241: LD_ADDR_VAR 0 5
12245: PUSH
12246: LD_VAR 0 7
12250: PUSH
12251: FOR_IN
12252: IFFALSE 12270
// ComEnterUnit ( i , building ) ;
12254: LD_VAR 0 5
12258: PPUSH
12259: LD_VAR 0 2
12263: PPUSH
12264: CALL_OW 120
12268: GO 12251
12270: POP
12271: POP
// end ;
12272: LD_VAR 0 3
12276: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
12281: LD_INT 22
12283: PUSH
12284: LD_VAR 0 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 25
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: PUSH
12312: LD_INT 0
12314: GREATER
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_VAR 0 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 21
12330: PUSH
12331: LD_INT 3
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 3
12340: PUSH
12341: LD_INT 24
12343: PUSH
12344: LD_INT 1000
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 69
12364: PUSH
12365: LD_INT 0
12367: EQUAL
12368: AND
12369: PUSH
12370: LD_VAR 0 2
12374: PUSH
12375: LD_INT 0
12377: GREATER
12378: AND
12379: IFFALSE 12478
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12381: LD_ADDR_VAR 0 4
12385: PUSH
12386: LD_INT 22
12388: PUSH
12389: LD_VAR 0 1
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 25
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: PUSH
12417: FOR_IN
12418: IFFALSE 12476
// begin AddComExitBuilding ( i ) ;
12420: LD_VAR 0 4
12424: PPUSH
12425: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12429: LD_VAR 0 4
12433: PPUSH
12434: LD_VAR 0 2
12438: PUSH
12439: LD_INT 1
12441: ARRAY
12442: PPUSH
12443: LD_VAR 0 2
12447: PUSH
12448: LD_INT 2
12450: ARRAY
12451: PPUSH
12452: LD_VAR 0 2
12456: PUSH
12457: LD_INT 3
12459: ARRAY
12460: PPUSH
12461: LD_VAR 0 2
12465: PUSH
12466: LD_INT 4
12468: ARRAY
12469: PPUSH
12470: CALL_OW 205
// end ;
12474: GO 12417
12476: POP
12477: POP
// end ; end ;
12478: LD_VAR 0 3
12482: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12483: LD_INT 0
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
12489: PPUSH
12490: PPUSH
12491: PPUSH
12492: PPUSH
12493: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12494: LD_ADDR_VAR 0 6
12498: PUSH
12499: LD_INT 22
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 24
12523: PUSH
12524: LD_INT 251
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12541: LD_ADDR_VAR 0 7
12545: PUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 22
12553: PUSH
12554: LD_VAR 0 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 25
12565: PUSH
12566: LD_INT 4
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
<<<<<<< HEAD
12573: LD_INT 3
12575: PUSH
12576: LD_INT 24
12578: PUSH
12579: LD_INT 750
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: EMPTY
12587: LIST
12588: LIST
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PPUSH
12596: CALL_OW 70
12600: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12601: LD_ADDR_VAR 0 11
12605: PUSH
12606: LD_VAR 0 2
12610: PPUSH
12611: LD_INT 22
12613: PUSH
12614: LD_VAR 0 1
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 21
12625: PUSH
12626: LD_INT 1
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 25
12638: PUSH
12639: LD_INT 3
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: LD_INT 24
12655: PUSH
12656: LD_INT 1000
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: PPUSH
12673: CALL_OW 70
12677: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12678: LD_VAR 0 10
12682: NOT
12683: PUSH
12684: LD_VAR 0 7
12688: NOT
12689: AND
12690: PUSH
12691: LD_VAR 0 11
12695: NOT
12696: AND
12697: IFFALSE 12701
// exit ;
12699: GO 12961
// if damageUnits > 0 and sci_list > 0 then
12701: LD_VAR 0 10
12705: PUSH
12706: LD_INT 0
12708: GREATER
12709: PUSH
12710: LD_VAR 0 6
12714: PUSH
12715: LD_INT 0
12717: GREATER
12718: AND
12719: IFFALSE 12752
// for i in damageUnits do
12721: LD_ADDR_VAR 0 8
12725: PUSH
12726: LD_VAR 0 10
12730: PUSH
12731: FOR_IN
12732: IFFALSE 12750
// ComMoveToArea ( i , healArea ) ;
12734: LD_VAR 0 8
12738: PPUSH
12739: LD_VAR 0 2
12743: PPUSH
12744: CALL_OW 113
12748: GO 12731
12750: POP
12751: POP
// if unitsToHeal > 0 and sci_list > 0 then
12752: LD_VAR 0 11
12756: PUSH
12757: LD_INT 0
12759: GREATER
12760: PUSH
12761: LD_VAR 0 6
12765: PUSH
12766: LD_INT 0
12768: GREATER
12769: AND
12770: IFFALSE 12829
// begin for i in sci_list do
12772: LD_ADDR_VAR 0 8
12776: PUSH
12777: LD_VAR 0 6
12781: PUSH
12782: FOR_IN
12783: IFFALSE 12827
// begin ComExitBuilding ( i ) ;
12785: LD_VAR 0 8
12789: PPUSH
12790: CALL_OW 122
// for j in unitsToHeal do
12794: LD_ADDR_VAR 0 9
12798: PUSH
12799: LD_VAR 0 11
12803: PUSH
12804: FOR_IN
12805: IFFALSE 12823
// AddComHeal ( i , j ) ;
12807: LD_VAR 0 8
12811: PPUSH
12812: LD_VAR 0 9
12816: PPUSH
12817: CALL_OW 188
12821: GO 12804
12823: POP
12824: POP
// end ;
12825: GO 12782
12827: POP
12828: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12829: LD_VAR 0 10
12833: PUSH
12834: LD_INT 0
12836: EQUAL
12837: PUSH
12838: LD_VAR 0 11
12842: PUSH
12843: LD_INT 0
12845: EQUAL
12846: AND
12847: PUSH
12848: LD_VAR 0 7
12852: PUSH
12853: LD_INT 0
12855: GREATER
12856: AND
12857: IFFALSE 12961
// for i in sci_listOutside do
12859: LD_ADDR_VAR 0 8
12863: PUSH
12864: LD_VAR 0 7
12868: PUSH
12869: FOR_IN
12870: IFFALSE 12959
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12872: LD_ADDR_VAR 0 12
12876: PUSH
12877: LD_INT 22
12879: PUSH
12880: LD_VAR 0 1
12884: PUSH
12885: EMPTY
12886: LIST
12887: LIST
12888: PUSH
12889: LD_INT 21
12891: PUSH
12892: LD_INT 3
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 30
12901: PUSH
12902: LD_INT 8
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: LIST
12913: PPUSH
12914: CALL_OW 69
12918: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12919: LD_ADDR_VAR 0 13
12923: PUSH
12924: LD_INT 1
12926: PPUSH
12927: LD_VAR 0 12
12931: PPUSH
12932: CALL_OW 12
12936: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
12937: LD_VAR 0 8
12941: PPUSH
12942: LD_VAR 0 12
12946: PUSH
12947: LD_VAR 0 13
12951: ARRAY
12952: PPUSH
12953: CALL_OW 120
// end ;
12957: GO 12869
12959: POP
12960: POP
// end ;
12961: LD_VAR 0 5
12965: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12966: LD_INT 0
12968: PPUSH
12969: PPUSH
12970: PPUSH
12971: PPUSH
12972: PPUSH
12973: PPUSH
12974: PPUSH
12975: PPUSH
12976: PPUSH
12977: PPUSH
12978: PPUSH
// amChassisTab = [ ] ;
12979: LD_ADDR_VAR 0 19
12983: PUSH
12984: EMPTY
12985: ST_TO_ADDR
// arChassisTab = [ ] ;
12986: LD_ADDR_VAR 0 18
12990: PUSH
12991: EMPTY
12992: ST_TO_ADDR
// ruChassisTab = [ ] ;
12993: LD_ADDR_VAR 0 17
12997: PUSH
12998: EMPTY
12999: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13000: LD_INT 35
13002: PPUSH
13003: CALL_OW 67
// if nation = 1 then
13007: LD_VAR 0 5
13011: PUSH
13012: LD_INT 1
13014: EQUAL
13015: IFFALSE 13520
// begin uc_side = side ;
13017: LD_ADDR_OWVAR 20
13021: PUSH
13022: LD_VAR 0 2
13026: ST_TO_ADDR
// uc_nation = nation ;
13027: LD_ADDR_OWVAR 21
13031: PUSH
13032: LD_VAR 0 5
13036: ST_TO_ADDR
// vc_engine = vehengine ;
13037: LD_ADDR_OWVAR 39
13041: PUSH
13042: LD_VAR 0 6
13046: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13047: LD_ADDR_OWVAR 38
13051: PUSH
13052: LD_VAR 0 7
13056: PUSH
13057: LD_INT 1
13059: PPUSH
13060: LD_VAR 0 7
13064: PPUSH
13065: CALL_OW 12
13069: ARRAY
13070: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13071: LD_ADDR_OWVAR 40
13075: PUSH
13076: LD_VAR 0 10
13080: PUSH
13081: LD_INT 1
13083: PPUSH
13084: LD_VAR 0 10
13088: PPUSH
13089: CALL_OW 12
13093: ARRAY
13094: ST_TO_ADDR
// for j = 1 to AMWeapon do
13095: LD_ADDR_VAR 0 14
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_VAR 0 10
13109: PUSH
13110: FOR_TO
13111: IFFALSE 13412
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13113: LD_VAR 0 10
13117: PUSH
13118: LD_VAR 0 14
13122: ARRAY
13123: PUSH
13124: LD_INT 2
13126: EQUAL
13127: PUSH
13128: LD_VAR 0 10
13132: PUSH
13133: LD_VAR 0 14
13137: ARRAY
13138: PUSH
13139: LD_INT 3
13141: EQUAL
13142: OR
13143: IFFALSE 13196
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13145: LD_ADDR_VAR 0 19
13149: PUSH
13150: LD_INT 1
13152: PUSH
13153: LD_INT 2
13155: PUSH
13156: LD_INT 3
13158: PUSH
13159: LD_INT 4
13161: PUSH
13162: LD_INT 5
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: LIST
13169: LIST
13170: LIST
13171: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13172: LD_ADDR_OWVAR 37
13176: PUSH
13177: LD_VAR 0 19
13181: PUSH
13182: LD_INT 1
13184: PPUSH
13185: LD_VAR 0 19
13189: PPUSH
13190: CALL_OW 12
13194: ARRAY
13195: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13196: LD_VAR 0 10
13200: PUSH
13201: LD_VAR 0 14
13205: ARRAY
13206: PUSH
13207: LD_INT 4
13209: EQUAL
13210: PUSH
13211: LD_VAR 0 10
13215: PUSH
13216: LD_VAR 0 14
13220: ARRAY
13221: PUSH
13222: LD_INT 5
13224: EQUAL
13225: OR
13226: PUSH
13227: LD_VAR 0 10
13231: PUSH
13232: LD_VAR 0 14
13236: ARRAY
13237: PUSH
13238: LD_INT 9
13240: EQUAL
13241: OR
13242: PUSH
13243: LD_VAR 0 10
13247: PUSH
13248: LD_VAR 0 14
13252: ARRAY
13253: PUSH
13254: LD_INT 11
13256: EQUAL
13257: OR
13258: PUSH
13259: LD_VAR 0 10
13263: PUSH
13264: LD_VAR 0 14
13268: ARRAY
13269: PUSH
13270: LD_INT 7
13272: EQUAL
13273: OR
13274: IFFALSE 13323
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13276: LD_ADDR_VAR 0 19
13280: PUSH
13281: LD_INT 2
13283: PUSH
13284: LD_INT 3
13286: PUSH
13287: LD_INT 4
13289: PUSH
13290: LD_INT 5
13292: PUSH
13293: EMPTY
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13299: LD_ADDR_OWVAR 37
13303: PUSH
13304: LD_VAR 0 19
13308: PUSH
13309: LD_INT 1
13311: PPUSH
13312: LD_VAR 0 19
13316: PPUSH
13317: CALL_OW 12
13321: ARRAY
13322: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13323: LD_VAR 0 10
13327: PUSH
13328: LD_VAR 0 14
13332: ARRAY
13333: PUSH
13334: LD_INT 8
13336: EQUAL
13337: PUSH
13338: LD_VAR 0 10
13342: PUSH
13343: LD_VAR 0 14
13347: ARRAY
13348: PUSH
13349: LD_INT 6
13351: EQUAL
13352: OR
13353: PUSH
13354: LD_VAR 0 10
13358: PUSH
13359: LD_VAR 0 14
13363: ARRAY
13364: PUSH
13365: LD_INT 10
13367: EQUAL
13368: OR
13369: IFFALSE 13410
// begin amChassisTab = [ 4 , 5 ] ;
13371: LD_ADDR_VAR 0 19
13375: PUSH
13376: LD_INT 4
13378: PUSH
13379: LD_INT 5
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13386: LD_ADDR_OWVAR 37
13390: PUSH
13391: LD_VAR 0 19
13395: PUSH
13396: LD_INT 1
13398: PPUSH
13399: LD_VAR 0 19
13403: PPUSH
13404: CALL_OW 12
13408: ARRAY
13409: ST_TO_ADDR
// end ; end ;
13410: GO 13110
13412: POP
13413: POP
// veh = CreateVehicle ;
13414: LD_ADDR_VAR 0 16
13418: PUSH
13419: CALL_OW 45
13423: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13424: LD_VAR 0 16
13428: PPUSH
13429: LD_VAR 0 1
13433: PPUSH
13434: LD_INT 0
13436: PPUSH
13437: CALL_OW 49
// if vc_control = 1 then
13441: LD_OWVAR 38
13445: PUSH
13446: LD_INT 1
13448: EQUAL
13449: IFFALSE 13506
// begin hc_gallery =  ;
13451: LD_ADDR_OWVAR 33
13455: PUSH
13456: LD_STRING 
13458: ST_TO_ADDR
// hc_name =  ;
13459: LD_ADDR_OWVAR 26
13463: PUSH
13464: LD_STRING 
13466: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13467: LD_INT 0
13469: PPUSH
13470: LD_INT 3
13472: PPUSH
13473: LD_VAR 0 4
13477: PPUSH
13478: CALL_OW 380
// un = CreateHuman ;
13482: LD_ADDR_VAR 0 15
13486: PUSH
13487: CALL_OW 44
13491: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13492: LD_VAR 0 15
13496: PPUSH
13497: LD_VAR 0 16
13501: PPUSH
13502: CALL_OW 52
// end ; i = i + 1 ;
13506: LD_ADDR_VAR 0 13
13510: PUSH
13511: LD_VAR 0 13
13515: PUSH
13516: LD_INT 1
13518: PLUS
13519: ST_TO_ADDR
// end ; if nation = 2 then
13520: LD_VAR 0 5
13524: PUSH
13525: LD_INT 2
13527: EQUAL
13528: IFFALSE 13966
// begin uc_side = side ;
13530: LD_ADDR_OWVAR 20
13534: PUSH
13535: LD_VAR 0 2
13539: ST_TO_ADDR
// uc_nation = nation ;
13540: LD_ADDR_OWVAR 21
13544: PUSH
13545: LD_VAR 0 5
13549: ST_TO_ADDR
// vc_engine = vehengine ;
13550: LD_ADDR_OWVAR 39
13554: PUSH
13555: LD_VAR 0 6
13559: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13560: LD_ADDR_OWVAR 38
13564: PUSH
13565: LD_VAR 0 7
13569: PUSH
13570: LD_INT 1
13572: PPUSH
13573: LD_VAR 0 7
13577: PPUSH
13578: CALL_OW 12
13582: ARRAY
13583: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13584: LD_ADDR_OWVAR 40
13588: PUSH
13589: LD_VAR 0 9
13593: PUSH
13594: LD_INT 1
13596: PPUSH
13597: LD_VAR 0 9
13601: PPUSH
13602: CALL_OW 12
13606: ARRAY
13607: ST_TO_ADDR
// for j = 1 to ARWeapons do
13608: LD_ADDR_VAR 0 14
13612: PUSH
13613: DOUBLE
13614: LD_INT 1
13616: DEC
13617: ST_TO_ADDR
13618: LD_VAR 0 9
13622: PUSH
13623: FOR_TO
13624: IFFALSE 13858
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13626: LD_VAR 0 9
13630: PUSH
13631: LD_VAR 0 14
13635: ARRAY
13636: PUSH
13637: LD_INT 24
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 9
13645: PUSH
13646: LD_VAR 0 14
13650: ARRAY
13651: PUSH
13652: LD_INT 22
13654: EQUAL
13655: OR
13656: PUSH
13657: LD_VAR 0 9
13661: PUSH
13662: LD_VAR 0 14
13666: ARRAY
13667: PUSH
13668: LD_INT 23
13670: EQUAL
13671: OR
13672: PUSH
13673: LD_VAR 0 9
13677: PUSH
13678: LD_VAR 0 14
13682: ARRAY
13683: PUSH
13684: LD_INT 30
13686: EQUAL
13687: OR
13688: IFFALSE 13737
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13690: LD_ADDR_VAR 0 18
13694: PUSH
13695: LD_INT 11
13697: PUSH
13698: LD_INT 12
13700: PUSH
13701: LD_INT 13
13703: PUSH
13704: LD_INT 14
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13713: LD_ADDR_OWVAR 37
13717: PUSH
13718: LD_VAR 0 18
13722: PUSH
13723: LD_INT 1
13725: PPUSH
13726: LD_VAR 0 18
13730: PPUSH
13731: CALL_OW 12
13735: ARRAY
13736: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13737: LD_VAR 0 9
13741: PUSH
13742: LD_VAR 0 14
13746: ARRAY
13747: PUSH
13748: LD_INT 29
13750: EQUAL
13751: PUSH
13752: LD_VAR 0 9
13756: PUSH
13757: LD_VAR 0 14
13761: ARRAY
13762: PUSH
13763: LD_INT 28
13765: EQUAL
13766: OR
13767: PUSH
13768: LD_VAR 0 9
13772: PUSH
13773: LD_VAR 0 14
13777: ARRAY
13778: PUSH
13779: LD_INT 27
13781: EQUAL
13782: OR
13783: PUSH
13784: LD_VAR 0 9
13788: PUSH
13789: LD_VAR 0 14
13793: ARRAY
13794: PUSH
13795: LD_INT 26
13797: EQUAL
13798: OR
13799: PUSH
13800: LD_VAR 0 9
13804: PUSH
13805: LD_VAR 0 14
13809: ARRAY
13810: PUSH
13811: LD_INT 25
13813: EQUAL
13814: OR
13815: IFFALSE 13856
// begin arChassisTab = [ 13 , 14 ] ;
13817: LD_ADDR_VAR 0 18
13821: PUSH
13822: LD_INT 13
13824: PUSH
13825: LD_INT 14
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13832: LD_ADDR_OWVAR 37
13836: PUSH
13837: LD_VAR 0 18
13841: PUSH
13842: LD_INT 1
13844: PPUSH
13845: LD_VAR 0 18
13849: PPUSH
13850: CALL_OW 12
13854: ARRAY
13855: ST_TO_ADDR
// end ; end ;
13856: GO 13623
13858: POP
13859: POP
// veh = CreateVehicle ;
13860: LD_ADDR_VAR 0 16
13864: PUSH
13865: CALL_OW 45
13869: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13870: LD_VAR 0 16
13874: PPUSH
13875: LD_VAR 0 1
13879: PPUSH
13880: LD_INT 0
13882: PPUSH
13883: CALL_OW 49
// if vc_control = 1 then
13887: LD_OWVAR 38
13891: PUSH
13892: LD_INT 1
13894: EQUAL
13895: IFFALSE 13952
// begin hc_gallery =  ;
13897: LD_ADDR_OWVAR 33
13901: PUSH
13902: LD_STRING 
13904: ST_TO_ADDR
// hc_name =  ;
13905: LD_ADDR_OWVAR 26
13909: PUSH
13910: LD_STRING 
13912: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13913: LD_INT 0
13915: PPUSH
13916: LD_INT 3
13918: PPUSH
13919: LD_VAR 0 4
13923: PPUSH
13924: CALL_OW 380
// un = CreateHuman ;
13928: LD_ADDR_VAR 0 15
13932: PUSH
13933: CALL_OW 44
13937: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13938: LD_VAR 0 15
13942: PPUSH
13943: LD_VAR 0 16
13947: PPUSH
13948: CALL_OW 52
// end ; i = i + 1 ;
13952: LD_ADDR_VAR 0 13
13956: PUSH
13957: LD_VAR 0 13
13961: PUSH
13962: LD_INT 1
13964: PLUS
13965: ST_TO_ADDR
// end ; if nation = 3 then
13966: LD_VAR 0 5
13970: PUSH
13971: LD_INT 3
13973: EQUAL
13974: IFFALSE 14380
// begin uc_side = side ;
13976: LD_ADDR_OWVAR 20
13980: PUSH
13981: LD_VAR 0 2
13985: ST_TO_ADDR
// uc_nation = nation ;
13986: LD_ADDR_OWVAR 21
13990: PUSH
13991: LD_VAR 0 5
13995: ST_TO_ADDR
// vc_engine = vehengine ;
13996: LD_ADDR_OWVAR 39
14000: PUSH
14001: LD_VAR 0 6
14005: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14006: LD_ADDR_OWVAR 38
14010: PUSH
14011: LD_VAR 0 7
14015: PUSH
14016: LD_INT 1
14018: PPUSH
14019: LD_VAR 0 7
14023: PPUSH
14024: CALL_OW 12
14028: ARRAY
14029: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14030: LD_ADDR_OWVAR 40
14034: PUSH
14035: LD_VAR 0 8
14039: PUSH
14040: LD_INT 1
14042: PPUSH
14043: LD_VAR 0 8
14047: PPUSH
14048: CALL_OW 12
14052: ARRAY
14053: ST_TO_ADDR
// for j = 1 to RuWeapons do
14054: LD_ADDR_VAR 0 14
14058: PUSH
14059: DOUBLE
14060: LD_INT 1
14062: DEC
14063: ST_TO_ADDR
14064: LD_VAR 0 8
14068: PUSH
14069: FOR_TO
14070: IFFALSE 14272
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14072: LD_VAR 0 8
14076: PUSH
14077: LD_VAR 0 14
14081: ARRAY
14082: PUSH
14083: LD_INT 42
14085: EQUAL
14086: PUSH
14087: LD_VAR 0 8
14091: PUSH
14092: LD_VAR 0 14
14096: ARRAY
14097: PUSH
14098: LD_INT 43
14100: EQUAL
14101: OR
14102: PUSH
14103: LD_VAR 0 8
14107: PUSH
14108: LD_VAR 0 14
14112: ARRAY
14113: PUSH
14114: LD_INT 44
14116: EQUAL
14117: OR
14118: PUSH
14119: LD_VAR 0 8
14123: PUSH
14124: LD_VAR 0 14
14128: ARRAY
14129: PUSH
14130: LD_INT 45
14132: EQUAL
14133: OR
14134: PUSH
14135: LD_VAR 0 8
14139: PUSH
14140: LD_VAR 0 14
14144: ARRAY
14145: PUSH
14146: LD_INT 49
14148: EQUAL
14149: OR
14150: IFFALSE 14199
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14152: LD_ADDR_VAR 0 17
14156: PUSH
14157: LD_INT 21
14159: PUSH
14160: LD_INT 22
14162: PUSH
14163: LD_INT 23
14165: PUSH
14166: LD_INT 24
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14175: LD_ADDR_OWVAR 37
14179: PUSH
14180: LD_VAR 0 17
14184: PUSH
14185: LD_INT 1
14187: PPUSH
14188: LD_VAR 0 17
14192: PPUSH
14193: CALL_OW 12
14197: ARRAY
14198: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14199: LD_VAR 0 8
14203: PUSH
14204: LD_VAR 0 14
14208: ARRAY
14209: PUSH
14210: LD_INT 46
14212: EQUAL
14213: PUSH
14214: LD_VAR 0 8
14218: PUSH
14219: LD_VAR 0 14
14223: ARRAY
14224: PUSH
14225: LD_INT 47
14227: EQUAL
14228: OR
14229: IFFALSE 14270
// begin ruChassisTab = [ 23 , 24 ] ;
14231: LD_ADDR_VAR 0 17
14235: PUSH
14236: LD_INT 23
14238: PUSH
14239: LD_INT 24
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14246: LD_ADDR_OWVAR 37
14250: PUSH
14251: LD_VAR 0 17
14255: PUSH
14256: LD_INT 1
14258: PPUSH
14259: LD_VAR 0 17
14263: PPUSH
14264: CALL_OW 12
14268: ARRAY
14269: ST_TO_ADDR
// end ; end ;
14270: GO 14069
14272: POP
14273: POP
// veh = CreateVehicle ;
14274: LD_ADDR_VAR 0 16
14278: PUSH
14279: CALL_OW 45
14283: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14284: LD_VAR 0 16
14288: PPUSH
14289: LD_VAR 0 1
14293: PPUSH
14294: LD_INT 0
14296: PPUSH
14297: CALL_OW 49
// if vc_control = 1 then
14301: LD_OWVAR 38
14305: PUSH
14306: LD_INT 1
14308: EQUAL
14309: IFFALSE 14366
// begin hc_gallery =  ;
14311: LD_ADDR_OWVAR 33
14315: PUSH
14316: LD_STRING 
14318: ST_TO_ADDR
// hc_name =  ;
14319: LD_ADDR_OWVAR 26
14323: PUSH
14324: LD_STRING 
14326: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14327: LD_INT 0
14329: PPUSH
14330: LD_INT 3
14332: PPUSH
14333: LD_VAR 0 4
14337: PPUSH
14338: CALL_OW 380
// un = CreateHuman ;
14342: LD_ADDR_VAR 0 15
14346: PUSH
14347: CALL_OW 44
14351: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14352: LD_VAR 0 15
14356: PPUSH
14357: LD_VAR 0 16
14361: PPUSH
14362: CALL_OW 52
// end ; i = i + 1 ;
14366: LD_ADDR_VAR 0 13
14370: PUSH
14371: LD_VAR 0 13
14375: PUSH
14376: LD_INT 1
14378: PLUS
14379: ST_TO_ADDR
// end ; until i = vehCount ;
14380: LD_VAR 0 13
14384: PUSH
14385: LD_VAR 0 3
14389: EQUAL
14390: IFFALSE 13000
// repeat wait ( 0 0$1 ) ;
14392: LD_INT 35
14394: PPUSH
14395: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14399: LD_ADDR_VAR 0 20
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_VAR 0 2
14411: PUSH
14412: EMPTY
14413: LIST
14414: LIST
14415: PUSH
14416: LD_INT 21
14418: PUSH
14419: LD_INT 2
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 24
14428: PUSH
14429: LD_INT 650
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PPUSH
14441: CALL_OW 69
14445: ST_TO_ADDR
// if vehicleOK_list > 0 then
14446: LD_VAR 0 20
14450: PUSH
14451: LD_INT 0
14453: GREATER
14454: IFFALSE 14645
// begin for i in vehicleOK_list do
14456: LD_ADDR_VAR 0 13
14460: PUSH
14461: LD_VAR 0 20
14465: PUSH
14466: FOR_IN
14467: IFFALSE 14643
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14469: LD_ADDR_VAR 0 21
14473: PUSH
14474: LD_INT 22
14476: PUSH
14477: LD_VAR 0 11
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 69
14490: PPUSH
14491: LD_VAR 0 13
14495: PPUSH
14496: CALL_OW 74
14500: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14501: LD_ADDR_VAR 0 22
14505: PUSH
14506: LD_INT 22
14508: PUSH
14509: LD_VAR 0 11
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 2
14520: PUSH
14521: LD_INT 59
14523: PUSH
14524: EMPTY
14525: LIST
14526: PUSH
14527: LD_INT 21
14529: PUSH
14530: LD_INT 1
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PUSH
14537: LD_INT 21
14539: PUSH
14540: LD_INT 2
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: EMPTY
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: PPUSH
14565: LD_VAR 0 13
14569: PPUSH
14570: CALL_OW 74
14574: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14575: LD_VAR 0 13
14579: PPUSH
14580: LD_VAR 0 21
14584: PPUSH
14585: CALL_OW 296
14589: PUSH
14590: LD_INT 8
14592: PLUS
14593: PUSH
14594: LD_VAR 0 13
14598: PPUSH
14599: LD_VAR 0 22
14603: PPUSH
14604: CALL_OW 296
14608: LESS
14609: IFFALSE 14627
// begin ComAttackUnit ( i , target1 ) ;
14611: LD_VAR 0 13
14615: PPUSH
14616: LD_VAR 0 21
14620: PPUSH
14621: CALL_OW 115
// end else
14625: GO 14641
// begin ComAttackUnit ( i , target2 ) ;
14627: LD_VAR 0 13
14631: PPUSH
14632: LD_VAR 0 22
14636: PPUSH
14637: CALL_OW 115
// end ; end ;
14641: GO 14466
14643: POP
14644: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14645: LD_INT 22
14647: PUSH
14648: LD_VAR 0 2
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 2
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PPUSH
14671: CALL_OW 69
14675: PUSH
14676: LD_INT 0
14678: EQUAL
14679: IFFALSE 14392
// end ;
14681: LD_VAR 0 12
14685: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
14686: LD_INT 0
14688: PPUSH
14689: PPUSH
14690: PPUSH
14691: PPUSH
14692: PPUSH
14693: PPUSH
14694: PPUSH
14695: PPUSH
14696: PPUSH
14697: PPUSH
14698: PPUSH
// for i = 1 to soldierCount do
14699: LD_ADDR_VAR 0 13
14703: PUSH
14704: DOUBLE
14705: LD_INT 1
14707: DEC
14708: ST_TO_ADDR
14709: LD_VAR 0 3
14713: PUSH
14714: FOR_TO
14715: IFFALSE 14797
// begin uc_side = side ;
14717: LD_ADDR_OWVAR 20
14721: PUSH
14722: LD_VAR 0 1
14726: ST_TO_ADDR
// uc_nation = nation ;
14727: LD_ADDR_OWVAR 21
14731: PUSH
14732: LD_VAR 0 2
14736: ST_TO_ADDR
// hc_name =  ;
14737: LD_ADDR_OWVAR 26
14741: PUSH
14742: LD_STRING 
14744: ST_TO_ADDR
// hc_gallery =  ;
14745: LD_ADDR_OWVAR 33
14749: PUSH
14750: LD_STRING 
14752: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14753: LD_INT 0
14755: PPUSH
14756: LD_INT 1
14758: PPUSH
14759: LD_VAR 0 8
14763: PPUSH
14764: CALL_OW 380
// un = CreateHuman ;
14768: LD_ADDR_VAR 0 15
14772: PUSH
14773: CALL_OW 44
14777: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14778: LD_VAR 0 15
14782: PPUSH
14783: LD_VAR 0 9
14787: PPUSH
14788: LD_INT 0
14790: PPUSH
14791: CALL_OW 49
// end ;
14795: GO 14714
14797: POP
14798: POP
// for i = 1 to sniperCount do
14799: LD_ADDR_VAR 0 13
14803: PUSH
14804: DOUBLE
14805: LD_INT 1
14807: DEC
14808: ST_TO_ADDR
14809: LD_VAR 0 4
14813: PUSH
14814: FOR_TO
14815: IFFALSE 14897
// begin uc_side = side ;
14817: LD_ADDR_OWVAR 20
14821: PUSH
14822: LD_VAR 0 1
14826: ST_TO_ADDR
// uc_nation = nation ;
14827: LD_ADDR_OWVAR 21
14831: PUSH
14832: LD_VAR 0 2
14836: ST_TO_ADDR
// hc_name =  ;
14837: LD_ADDR_OWVAR 26
14841: PUSH
14842: LD_STRING 
14844: ST_TO_ADDR
// hc_gallery =  ;
14845: LD_ADDR_OWVAR 33
14849: PUSH
14850: LD_STRING 
14852: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
14853: LD_INT 0
14855: PPUSH
14856: LD_INT 5
14858: PPUSH
14859: LD_VAR 0 8
14863: PPUSH
14864: CALL_OW 380
// un = CreateHuman ;
14868: LD_ADDR_VAR 0 15
14872: PUSH
14873: CALL_OW 44
14877: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14878: LD_VAR 0 15
14882: PPUSH
14883: LD_VAR 0 9
14887: PPUSH
14888: LD_INT 0
14890: PPUSH
14891: CALL_OW 49
// end ;
14895: GO 14814
14897: POP
14898: POP
// for i = 1 to bazookCount do
14899: LD_ADDR_VAR 0 13
14903: PUSH
14904: DOUBLE
14905: LD_INT 1
14907: DEC
14908: ST_TO_ADDR
14909: LD_VAR 0 5
14913: PUSH
14914: FOR_TO
14915: IFFALSE 14997
// begin uc_side = side ;
14917: LD_ADDR_OWVAR 20
14921: PUSH
14922: LD_VAR 0 1
14926: ST_TO_ADDR
// uc_nation = nation ;
14927: LD_ADDR_OWVAR 21
14931: PUSH
14932: LD_VAR 0 2
14936: ST_TO_ADDR
// hc_name =  ;
14937: LD_ADDR_OWVAR 26
14941: PUSH
14942: LD_STRING 
14944: ST_TO_ADDR
// hc_gallery =  ;
14945: LD_ADDR_OWVAR 33
14949: PUSH
14950: LD_STRING 
14952: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
14953: LD_INT 0
14955: PPUSH
14956: LD_INT 9
14958: PPUSH
14959: LD_VAR 0 8
14963: PPUSH
14964: CALL_OW 380
// un = CreateHuman ;
14968: LD_ADDR_VAR 0 15
14972: PUSH
14973: CALL_OW 44
14977: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14978: LD_VAR 0 15
14982: PPUSH
14983: LD_VAR 0 9
14987: PPUSH
14988: LD_INT 0
14990: PPUSH
14991: CALL_OW 49
// end ;
14995: GO 14914
14997: POP
14998: POP
// for i = 1 to mortalCount do
14999: LD_ADDR_VAR 0 13
15003: PUSH
15004: DOUBLE
15005: LD_INT 1
15007: DEC
15008: ST_TO_ADDR
15009: LD_VAR 0 6
15013: PUSH
15014: FOR_TO
15015: IFFALSE 15097
// begin uc_side = side ;
15017: LD_ADDR_OWVAR 20
15021: PUSH
15022: LD_VAR 0 1
15026: ST_TO_ADDR
// uc_nation = nation ;
15027: LD_ADDR_OWVAR 21
15031: PUSH
15032: LD_VAR 0 2
15036: ST_TO_ADDR
// hc_name =  ;
15037: LD_ADDR_OWVAR 26
15041: PUSH
15042: LD_STRING 
15044: ST_TO_ADDR
// hc_gallery =  ;
15045: LD_ADDR_OWVAR 33
15049: PUSH
15050: LD_STRING 
15052: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15053: LD_INT 0
15055: PPUSH
15056: LD_INT 8
15058: PPUSH
15059: LD_VAR 0 8
15063: PPUSH
15064: CALL_OW 380
// un = CreateHuman ;
15068: LD_ADDR_VAR 0 15
15072: PUSH
15073: CALL_OW 44
15077: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15078: LD_VAR 0 15
15082: PPUSH
15083: LD_VAR 0 9
15087: PPUSH
15088: LD_INT 0
15090: PPUSH
15091: CALL_OW 49
// end ;
15095: GO 15014
15097: POP
15098: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
15099: LD_ADDR_VAR 0 18
15103: PUSH
15104: LD_INT 22
15106: PUSH
15107: LD_VAR 0 1
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 2
15118: PUSH
15119: LD_INT 25
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 25
15131: PUSH
15132: LD_INT 5
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: LD_INT 25
15141: PUSH
15142: LD_INT 8
15144: PUSH
15145: EMPTY
15146: LIST
15147: LIST
15148: PUSH
15149: LD_INT 25
15151: PUSH
15152: LD_INT 9
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PPUSH
15170: CALL_OW 69
15174: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15175: LD_ADDR_VAR 0 17
15179: PUSH
15180: LD_INT 22
15182: PUSH
15183: LD_VAR 0 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 25
15194: PUSH
15195: LD_INT 4
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: EMPTY
15203: LIST
15204: LIST
15205: PPUSH
15206: CALL_OW 69
15210: ST_TO_ADDR
// for i in medic_list do
15211: LD_ADDR_VAR 0 13
15215: PUSH
15216: LD_VAR 0 17
15220: PUSH
15221: FOR_IN
15222: IFFALSE 15240
// ComMoveToArea ( i , healArea ) ;
15224: LD_VAR 0 13
15228: PPUSH
15229: LD_VAR 0 10
15233: PPUSH
15234: CALL_OW 113
15238: GO 15221
15240: POP
15241: POP
// repeat wait ( 0 0$1 ) ;
15242: LD_INT 35
15244: PPUSH
15245: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15249: LD_ADDR_VAR 0 16
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_VAR 0 1
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 1
15268: PUSH
15269: LD_INT 3
15271: PUSH
15272: LD_INT 24
15274: PUSH
15275: LD_INT 550
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: LD_INT 24
15288: PUSH
15289: LD_INT 250
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: EMPTY
15297: LIST
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15310: LD_ADDR_VAR 0 18
15314: PUSH
15315: LD_INT 22
15317: PUSH
15318: LD_VAR 0 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 2
15329: PUSH
15330: LD_INT 25
15332: PUSH
15333: LD_INT 1
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 25
15342: PUSH
15343: LD_INT 5
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: LD_INT 25
15352: PUSH
15353: LD_INT 8
15355: PUSH
15356: EMPTY
15357: LIST
15358: LIST
15359: PUSH
15360: LD_INT 25
15362: PUSH
15363: LD_INT 9
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PUSH
15377: LD_INT 24
15379: PUSH
15380: LD_INT 1000
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: PPUSH
15392: CALL_OW 69
15396: ST_TO_ADDR
// if medicCount > 0 then
15397: LD_VAR 0 7
15401: PUSH
15402: LD_INT 0
15404: GREATER
15405: IFFALSE 15479
// begin if damageUnit_list > 0 then
15407: LD_VAR 0 16
15411: PUSH
15412: LD_INT 0
15414: GREATER
15415: IFFALSE 15479
// begin for i in damageUnit_list do
15417: LD_ADDR_VAR 0 13
15421: PUSH
15422: LD_VAR 0 16
15426: PUSH
15427: FOR_IN
15428: IFFALSE 15477
// begin ComMoveToArea ( i , healArea ) ;
15430: LD_VAR 0 13
15434: PPUSH
15435: LD_VAR 0 10
15439: PPUSH
15440: CALL_OW 113
// for j in medic_list do
15444: LD_ADDR_VAR 0 14
15448: PUSH
15449: LD_VAR 0 17
15453: PUSH
15454: FOR_IN
15455: IFFALSE 15473
// AddComHeal ( j , i ) ;
15457: LD_VAR 0 14
15461: PPUSH
15462: LD_VAR 0 13
15466: PPUSH
15467: CALL_OW 188
15471: GO 15454
15473: POP
15474: POP
// end ;
15475: GO 15427
15477: POP
15478: POP
// end ; end ; for i in soldiersOK_list do
15479: LD_ADDR_VAR 0 13
15483: PUSH
15484: LD_VAR 0 18
15488: PUSH
15489: FOR_IN
15490: IFFALSE 15666
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15492: LD_ADDR_VAR 0 21
15496: PUSH
15497: LD_INT 22
15499: PUSH
15500: LD_VAR 0 11
=======
12573: LD_INT 50
12575: PUSH
12576: EMPTY
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 70
12588: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12589: LD_ADDR_VAR 0 10
12593: PUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 22
12601: PUSH
12602: LD_VAR 0 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 21
12613: PUSH
12614: LD_INT 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: LD_INT 25
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 3
12640: PUSH
12641: LD_INT 24
12643: PUSH
12644: LD_INT 750
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 70
12665: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12666: LD_ADDR_VAR 0 11
12670: PUSH
12671: LD_VAR 0 2
12675: PPUSH
12676: LD_INT 22
12678: PUSH
12679: LD_VAR 0 1
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 21
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 3
12700: PUSH
12701: LD_INT 25
12703: PUSH
12704: LD_INT 3
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: LD_INT 24
12720: PUSH
12721: LD_INT 1000
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 70
12742: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12743: LD_VAR 0 10
12747: NOT
12748: PUSH
12749: LD_VAR 0 7
12753: NOT
12754: AND
12755: PUSH
12756: LD_VAR 0 11
12760: NOT
12761: AND
12762: IFFALSE 12766
// exit ;
12764: GO 13026
// if damageUnits > 0 and sci_list > 0 then
12766: LD_VAR 0 10
12770: PUSH
12771: LD_INT 0
12773: GREATER
12774: PUSH
12775: LD_VAR 0 6
12779: PUSH
12780: LD_INT 0
12782: GREATER
12783: AND
12784: IFFALSE 12817
// for i in damageUnits do
12786: LD_ADDR_VAR 0 8
12790: PUSH
12791: LD_VAR 0 10
12795: PUSH
12796: FOR_IN
12797: IFFALSE 12815
// ComMoveToArea ( i , healArea ) ;
12799: LD_VAR 0 8
12803: PPUSH
12804: LD_VAR 0 2
12808: PPUSH
12809: CALL_OW 113
12813: GO 12796
12815: POP
12816: POP
// if unitsToHeal > 0 and sci_list > 0 then
12817: LD_VAR 0 11
12821: PUSH
12822: LD_INT 0
12824: GREATER
12825: PUSH
12826: LD_VAR 0 6
12830: PUSH
12831: LD_INT 0
12833: GREATER
12834: AND
12835: IFFALSE 12894
// begin for i in sci_list do
12837: LD_ADDR_VAR 0 8
12841: PUSH
12842: LD_VAR 0 6
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12892
// begin ComExitBuilding ( i ) ;
12850: LD_VAR 0 8
12854: PPUSH
12855: CALL_OW 122
// for j in unitsToHeal do
12859: LD_ADDR_VAR 0 9
12863: PUSH
12864: LD_VAR 0 11
12868: PUSH
12869: FOR_IN
12870: IFFALSE 12888
// AddComHeal ( i , j ) ;
12872: LD_VAR 0 8
12876: PPUSH
12877: LD_VAR 0 9
12881: PPUSH
12882: CALL_OW 188
12886: GO 12869
12888: POP
12889: POP
// end ;
12890: GO 12847
12892: POP
12893: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12894: LD_VAR 0 10
12898: PUSH
12899: LD_INT 0
12901: EQUAL
12902: PUSH
12903: LD_VAR 0 11
12907: PUSH
12908: LD_INT 0
12910: EQUAL
12911: AND
12912: PUSH
12913: LD_VAR 0 7
12917: PUSH
12918: LD_INT 0
12920: GREATER
12921: AND
12922: IFFALSE 13026
// for i in sci_listOutside do
12924: LD_ADDR_VAR 0 8
12928: PUSH
12929: LD_VAR 0 7
12933: PUSH
12934: FOR_IN
12935: IFFALSE 13024
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12937: LD_ADDR_VAR 0 12
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_VAR 0 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 30
12966: PUSH
12967: LD_INT 8
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: PPUSH
12979: CALL_OW 69
12983: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12984: LD_ADDR_VAR 0 13
12988: PUSH
12989: LD_INT 1
12991: PPUSH
12992: LD_VAR 0 12
12996: PPUSH
12997: CALL_OW 12
13001: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
13002: LD_VAR 0 8
13006: PPUSH
13007: LD_VAR 0 12
13011: PUSH
13012: LD_VAR 0 13
13016: ARRAY
13017: PPUSH
13018: CALL_OW 120
// end ;
13022: GO 12934
13024: POP
13025: POP
// end ;
13026: LD_VAR 0 5
13030: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
// amChassisTab = [ ] ;
13044: LD_ADDR_VAR 0 19
13048: PUSH
13049: EMPTY
13050: ST_TO_ADDR
// arChassisTab = [ ] ;
13051: LD_ADDR_VAR 0 18
13055: PUSH
13056: EMPTY
13057: ST_TO_ADDR
// ruChassisTab = [ ] ;
13058: LD_ADDR_VAR 0 17
13062: PUSH
13063: EMPTY
13064: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13065: LD_INT 35
13067: PPUSH
13068: CALL_OW 67
// if nation = 1 then
13072: LD_VAR 0 5
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13585
// begin uc_side = side ;
13082: LD_ADDR_OWVAR 20
13086: PUSH
13087: LD_VAR 0 2
13091: ST_TO_ADDR
// uc_nation = nation ;
13092: LD_ADDR_OWVAR 21
13096: PUSH
13097: LD_VAR 0 5
13101: ST_TO_ADDR
// vc_engine = vehengine ;
13102: LD_ADDR_OWVAR 39
13106: PUSH
13107: LD_VAR 0 6
13111: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13112: LD_ADDR_OWVAR 38
13116: PUSH
13117: LD_VAR 0 7
13121: PUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_VAR 0 7
13129: PPUSH
13130: CALL_OW 12
13134: ARRAY
13135: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13136: LD_ADDR_OWVAR 40
13140: PUSH
13141: LD_VAR 0 10
13145: PUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_VAR 0 10
13153: PPUSH
13154: CALL_OW 12
13158: ARRAY
13159: ST_TO_ADDR
// for j = 1 to AMWeapon do
13160: LD_ADDR_VAR 0 14
13164: PUSH
13165: DOUBLE
13166: LD_INT 1
13168: DEC
13169: ST_TO_ADDR
13170: LD_VAR 0 10
13174: PUSH
13175: FOR_TO
13176: IFFALSE 13477
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13178: LD_VAR 0 10
13182: PUSH
13183: LD_VAR 0 14
13187: ARRAY
13188: PUSH
13189: LD_INT 2
13191: EQUAL
13192: PUSH
13193: LD_VAR 0 10
13197: PUSH
13198: LD_VAR 0 14
13202: ARRAY
13203: PUSH
13204: LD_INT 3
13206: EQUAL
13207: OR
13208: IFFALSE 13261
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13210: LD_ADDR_VAR 0 19
13214: PUSH
13215: LD_INT 1
13217: PUSH
13218: LD_INT 2
13220: PUSH
13221: LD_INT 3
13223: PUSH
13224: LD_INT 4
13226: PUSH
13227: LD_INT 5
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13237: LD_ADDR_OWVAR 37
13241: PUSH
13242: LD_VAR 0 19
13246: PUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_VAR 0 19
13254: PPUSH
13255: CALL_OW 12
13259: ARRAY
13260: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13261: LD_VAR 0 10
13265: PUSH
13266: LD_VAR 0 14
13270: ARRAY
13271: PUSH
13272: LD_INT 4
13274: EQUAL
13275: PUSH
13276: LD_VAR 0 10
13280: PUSH
13281: LD_VAR 0 14
13285: ARRAY
13286: PUSH
13287: LD_INT 5
13289: EQUAL
13290: OR
13291: PUSH
13292: LD_VAR 0 10
13296: PUSH
13297: LD_VAR 0 14
13301: ARRAY
13302: PUSH
13303: LD_INT 9
13305: EQUAL
13306: OR
13307: PUSH
13308: LD_VAR 0 10
13312: PUSH
13313: LD_VAR 0 14
13317: ARRAY
13318: PUSH
13319: LD_INT 11
13321: EQUAL
13322: OR
13323: PUSH
13324: LD_VAR 0 10
13328: PUSH
13329: LD_VAR 0 14
13333: ARRAY
13334: PUSH
13335: LD_INT 7
13337: EQUAL
13338: OR
13339: IFFALSE 13388
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13341: LD_ADDR_VAR 0 19
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: LD_INT 4
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13364: LD_ADDR_OWVAR 37
13368: PUSH
13369: LD_VAR 0 19
13373: PUSH
13374: LD_INT 1
13376: PPUSH
13377: LD_VAR 0 19
13381: PPUSH
13382: CALL_OW 12
13386: ARRAY
13387: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13388: LD_VAR 0 10
13392: PUSH
13393: LD_VAR 0 14
13397: ARRAY
13398: PUSH
13399: LD_INT 8
13401: EQUAL
13402: PUSH
13403: LD_VAR 0 10
13407: PUSH
13408: LD_VAR 0 14
13412: ARRAY
13413: PUSH
13414: LD_INT 6
13416: EQUAL
13417: OR
13418: PUSH
13419: LD_VAR 0 10
13423: PUSH
13424: LD_VAR 0 14
13428: ARRAY
13429: PUSH
13430: LD_INT 10
13432: EQUAL
13433: OR
13434: IFFALSE 13475
// begin amChassisTab = [ 4 , 5 ] ;
13436: LD_ADDR_VAR 0 19
13440: PUSH
13441: LD_INT 4
13443: PUSH
13444: LD_INT 5
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13451: LD_ADDR_OWVAR 37
13455: PUSH
13456: LD_VAR 0 19
13460: PUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_VAR 0 19
13468: PPUSH
13469: CALL_OW 12
13473: ARRAY
13474: ST_TO_ADDR
// end ; end ;
13475: GO 13175
13477: POP
13478: POP
// veh = CreateVehicle ;
13479: LD_ADDR_VAR 0 16
13483: PUSH
13484: CALL_OW 45
13488: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13489: LD_VAR 0 16
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL_OW 49
// if vc_control = 1 then
13506: LD_OWVAR 38
13510: PUSH
13511: LD_INT 1
13513: EQUAL
13514: IFFALSE 13571
// begin hc_gallery =  ;
13516: LD_ADDR_OWVAR 33
13520: PUSH
13521: LD_STRING 
13523: ST_TO_ADDR
// hc_name =  ;
13524: LD_ADDR_OWVAR 26
13528: PUSH
13529: LD_STRING 
13531: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13532: LD_INT 0
13534: PPUSH
13535: LD_INT 3
13537: PPUSH
13538: LD_VAR 0 4
13542: PPUSH
13543: CALL_OW 380
// un = CreateHuman ;
13547: LD_ADDR_VAR 0 15
13551: PUSH
13552: CALL_OW 44
13556: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13557: LD_VAR 0 15
13561: PPUSH
13562: LD_VAR 0 16
13566: PPUSH
13567: CALL_OW 52
// end ; i = i + 1 ;
13571: LD_ADDR_VAR 0 13
13575: PUSH
13576: LD_VAR 0 13
13580: PUSH
13581: LD_INT 1
13583: PLUS
13584: ST_TO_ADDR
// end ; if nation = 2 then
13585: LD_VAR 0 5
13589: PUSH
13590: LD_INT 2
13592: EQUAL
13593: IFFALSE 14015
// begin uc_side = side ;
13595: LD_ADDR_OWVAR 20
13599: PUSH
13600: LD_VAR 0 2
13604: ST_TO_ADDR
// uc_nation = nation ;
13605: LD_ADDR_OWVAR 21
13609: PUSH
13610: LD_VAR 0 5
13614: ST_TO_ADDR
// vc_engine = vehengine ;
13615: LD_ADDR_OWVAR 39
13619: PUSH
13620: LD_VAR 0 6
13624: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13625: LD_ADDR_OWVAR 38
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_INT 1
13637: PPUSH
13638: LD_VAR 0 7
13642: PPUSH
13643: CALL_OW 12
13647: ARRAY
13648: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13649: LD_ADDR_OWVAR 40
13653: PUSH
13654: LD_VAR 0 9
13658: PUSH
13659: LD_INT 1
13661: PPUSH
13662: LD_VAR 0 9
13666: PPUSH
13667: CALL_OW 12
13671: ARRAY
13672: ST_TO_ADDR
// for j = 1 to ARWeapons do
13673: LD_ADDR_VAR 0 14
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 9
13687: PUSH
13688: FOR_TO
13689: IFFALSE 13907
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13691: LD_VAR 0 9
13695: PUSH
13696: LD_VAR 0 14
13700: ARRAY
13701: PUSH
13702: LD_INT 24
13704: EQUAL
13705: PUSH
13706: LD_VAR 0 9
13710: PUSH
13711: LD_VAR 0 14
13715: ARRAY
13716: PUSH
13717: LD_INT 22
13719: EQUAL
13720: OR
13721: PUSH
13722: LD_VAR 0 9
13726: PUSH
13727: LD_VAR 0 14
13731: ARRAY
13732: PUSH
13733: LD_INT 23
13735: EQUAL
13736: OR
13737: PUSH
13738: LD_VAR 0 9
13742: PUSH
13743: LD_VAR 0 14
13747: ARRAY
13748: PUSH
13749: LD_INT 30
13751: EQUAL
13752: OR
13753: IFFALSE 13790
// begin arChassisTab = [ 14 ] ;
13755: LD_ADDR_VAR 0 18
13759: PUSH
13760: LD_INT 14
13762: PUSH
13763: EMPTY
13764: LIST
13765: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13766: LD_ADDR_OWVAR 37
13770: PUSH
13771: LD_VAR 0 18
13775: PUSH
13776: LD_INT 1
13778: PPUSH
13779: LD_VAR 0 18
13783: PPUSH
13784: CALL_OW 12
13788: ARRAY
13789: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13790: LD_VAR 0 9
13794: PUSH
13795: LD_VAR 0 14
13799: ARRAY
13800: PUSH
13801: LD_INT 29
13803: EQUAL
13804: PUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_VAR 0 14
13814: ARRAY
13815: PUSH
13816: LD_INT 28
13818: EQUAL
13819: OR
13820: PUSH
13821: LD_VAR 0 9
13825: PUSH
13826: LD_VAR 0 14
13830: ARRAY
13831: PUSH
13832: LD_INT 27
13834: EQUAL
13835: OR
13836: PUSH
13837: LD_VAR 0 9
13841: PUSH
13842: LD_VAR 0 14
13846: ARRAY
13847: PUSH
13848: LD_INT 26
13850: EQUAL
13851: OR
13852: PUSH
13853: LD_VAR 0 9
13857: PUSH
13858: LD_VAR 0 14
13862: ARRAY
13863: PUSH
13864: LD_INT 25
13866: EQUAL
13867: OR
13868: IFFALSE 13905
// begin arChassisTab = [ 14 ] ;
13870: LD_ADDR_VAR 0 18
13874: PUSH
13875: LD_INT 14
13877: PUSH
13878: EMPTY
13879: LIST
13880: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13881: LD_ADDR_OWVAR 37
13885: PUSH
13886: LD_VAR 0 18
13890: PUSH
13891: LD_INT 1
13893: PPUSH
13894: LD_VAR 0 18
13898: PPUSH
13899: CALL_OW 12
13903: ARRAY
13904: ST_TO_ADDR
// end ; end ;
13905: GO 13688
13907: POP
13908: POP
// veh = CreateVehicle ;
13909: LD_ADDR_VAR 0 16
13913: PUSH
13914: CALL_OW 45
13918: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13919: LD_VAR 0 16
13923: PPUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 0
13931: PPUSH
13932: CALL_OW 49
// if vc_control = 1 then
13936: LD_OWVAR 38
13940: PUSH
13941: LD_INT 1
13943: EQUAL
13944: IFFALSE 14001
// begin hc_gallery =  ;
13946: LD_ADDR_OWVAR 33
13950: PUSH
13951: LD_STRING 
13953: ST_TO_ADDR
// hc_name =  ;
13954: LD_ADDR_OWVAR 26
13958: PUSH
13959: LD_STRING 
13961: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13962: LD_INT 0
13964: PPUSH
13965: LD_INT 3
13967: PPUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 380
// un = CreateHuman ;
13977: LD_ADDR_VAR 0 15
13981: PUSH
13982: CALL_OW 44
13986: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13987: LD_VAR 0 15
13991: PPUSH
13992: LD_VAR 0 16
13996: PPUSH
13997: CALL_OW 52
// end ; i = i + 1 ;
14001: LD_ADDR_VAR 0 13
14005: PUSH
14006: LD_VAR 0 13
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ST_TO_ADDR
// end ; if nation = 3 then
14015: LD_VAR 0 5
14019: PUSH
14020: LD_INT 3
14022: EQUAL
14023: IFFALSE 14429
// begin uc_side = side ;
14025: LD_ADDR_OWVAR 20
14029: PUSH
14030: LD_VAR 0 2
14034: ST_TO_ADDR
// uc_nation = nation ;
14035: LD_ADDR_OWVAR 21
14039: PUSH
14040: LD_VAR 0 5
14044: ST_TO_ADDR
// vc_engine = vehengine ;
14045: LD_ADDR_OWVAR 39
14049: PUSH
14050: LD_VAR 0 6
14054: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14055: LD_ADDR_OWVAR 38
14059: PUSH
14060: LD_VAR 0 7
14064: PUSH
14065: LD_INT 1
14067: PPUSH
14068: LD_VAR 0 7
14072: PPUSH
14073: CALL_OW 12
14077: ARRAY
14078: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14079: LD_ADDR_OWVAR 40
14083: PUSH
14084: LD_VAR 0 8
14088: PUSH
14089: LD_INT 1
14091: PPUSH
14092: LD_VAR 0 8
14096: PPUSH
14097: CALL_OW 12
14101: ARRAY
14102: ST_TO_ADDR
// for j = 1 to RuWeapons do
14103: LD_ADDR_VAR 0 14
14107: PUSH
14108: DOUBLE
14109: LD_INT 1
14111: DEC
14112: ST_TO_ADDR
14113: LD_VAR 0 8
14117: PUSH
14118: FOR_TO
14119: IFFALSE 14321
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14121: LD_VAR 0 8
14125: PUSH
14126: LD_VAR 0 14
14130: ARRAY
14131: PUSH
14132: LD_INT 42
14134: EQUAL
14135: PUSH
14136: LD_VAR 0 8
14140: PUSH
14141: LD_VAR 0 14
14145: ARRAY
14146: PUSH
14147: LD_INT 43
14149: EQUAL
14150: OR
14151: PUSH
14152: LD_VAR 0 8
14156: PUSH
14157: LD_VAR 0 14
14161: ARRAY
14162: PUSH
14163: LD_INT 44
14165: EQUAL
14166: OR
14167: PUSH
14168: LD_VAR 0 8
14172: PUSH
14173: LD_VAR 0 14
14177: ARRAY
14178: PUSH
14179: LD_INT 45
14181: EQUAL
14182: OR
14183: PUSH
14184: LD_VAR 0 8
14188: PUSH
14189: LD_VAR 0 14
14193: ARRAY
14194: PUSH
14195: LD_INT 49
14197: EQUAL
14198: OR
14199: IFFALSE 14248
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14201: LD_ADDR_VAR 0 17
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 23
14214: PUSH
14215: LD_INT 24
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14224: LD_ADDR_OWVAR 37
14228: PUSH
14229: LD_VAR 0 17
14233: PUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_VAR 0 17
14241: PPUSH
14242: CALL_OW 12
14246: ARRAY
14247: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14248: LD_VAR 0 8
14252: PUSH
14253: LD_VAR 0 14
14257: ARRAY
14258: PUSH
14259: LD_INT 46
14261: EQUAL
14262: PUSH
14263: LD_VAR 0 8
14267: PUSH
14268: LD_VAR 0 14
14272: ARRAY
14273: PUSH
14274: LD_INT 47
14276: EQUAL
14277: OR
14278: IFFALSE 14319
// begin ruChassisTab = [ 23 , 24 ] ;
14280: LD_ADDR_VAR 0 17
14284: PUSH
14285: LD_INT 23
14287: PUSH
14288: LD_INT 24
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14295: LD_ADDR_OWVAR 37
14299: PUSH
14300: LD_VAR 0 17
14304: PUSH
14305: LD_INT 1
14307: PPUSH
14308: LD_VAR 0 17
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: ST_TO_ADDR
// end ; end ;
14319: GO 14118
14321: POP
14322: POP
// veh = CreateVehicle ;
14323: LD_ADDR_VAR 0 16
14327: PUSH
14328: CALL_OW 45
14332: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14333: LD_VAR 0 16
14337: PPUSH
14338: LD_VAR 0 1
14342: PPUSH
14343: LD_INT 0
14345: PPUSH
14346: CALL_OW 49
// if vc_control = 1 then
14350: LD_OWVAR 38
14354: PUSH
14355: LD_INT 1
14357: EQUAL
14358: IFFALSE 14415
// begin hc_gallery =  ;
14360: LD_ADDR_OWVAR 33
14364: PUSH
14365: LD_STRING 
14367: ST_TO_ADDR
// hc_name =  ;
14368: LD_ADDR_OWVAR 26
14372: PUSH
14373: LD_STRING 
14375: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14376: LD_INT 0
14378: PPUSH
14379: LD_INT 3
14381: PPUSH
14382: LD_VAR 0 4
14386: PPUSH
14387: CALL_OW 380
// un = CreateHuman ;
14391: LD_ADDR_VAR 0 15
14395: PUSH
14396: CALL_OW 44
14400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14401: LD_VAR 0 15
14405: PPUSH
14406: LD_VAR 0 16
14410: PPUSH
14411: CALL_OW 52
// end ; i = i + 1 ;
14415: LD_ADDR_VAR 0 13
14419: PUSH
14420: LD_VAR 0 13
14424: PUSH
14425: LD_INT 1
14427: PLUS
14428: ST_TO_ADDR
// end ; until i = vehCount ;
14429: LD_VAR 0 13
14433: PUSH
14434: LD_VAR 0 3
14438: EQUAL
14439: IFFALSE 13065
// repeat wait ( 0 0$1 ) ;
14441: LD_INT 35
14443: PPUSH
14444: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14448: LD_ADDR_VAR 0 20
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_VAR 0 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 24
14477: PUSH
14478: LD_INT 650
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: ST_TO_ADDR
// if vehicleOK_list > 0 then
14495: LD_VAR 0 20
14499: PUSH
14500: LD_INT 0
14502: GREATER
14503: IFFALSE 14694
// begin for i in vehicleOK_list do
14505: LD_ADDR_VAR 0 13
14509: PUSH
14510: LD_VAR 0 20
14514: PUSH
14515: FOR_IN
14516: IFFALSE 14692
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14518: LD_ADDR_VAR 0 21
14522: PUSH
14523: LD_INT 22
14525: PUSH
14526: LD_VAR 0 11
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: PPUSH
14540: LD_VAR 0 13
14544: PPUSH
14545: CALL_OW 74
14549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14550: LD_ADDR_VAR 0 22
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_VAR 0 11
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: LD_INT 59
14572: PUSH
14573: EMPTY
14574: LIST
14575: PUSH
14576: LD_INT 21
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 21
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PPUSH
14614: LD_VAR 0 13
14618: PPUSH
14619: CALL_OW 74
14623: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14624: LD_VAR 0 13
14628: PPUSH
14629: LD_VAR 0 21
14633: PPUSH
14634: CALL_OW 296
14638: PUSH
14639: LD_INT 8
14641: PLUS
14642: PUSH
14643: LD_VAR 0 13
14647: PPUSH
14648: LD_VAR 0 22
14652: PPUSH
14653: CALL_OW 296
14657: LESS
14658: IFFALSE 14676
// begin ComAttackUnit ( i , target1 ) ;
14660: LD_VAR 0 13
14664: PPUSH
14665: LD_VAR 0 21
14669: PPUSH
14670: CALL_OW 115
// end else
14674: GO 14690
// begin ComAttackUnit ( i , target2 ) ;
14676: LD_VAR 0 13
14680: PPUSH
14681: LD_VAR 0 22
14685: PPUSH
14686: CALL_OW 115
// end ; end ;
14690: GO 14515
14692: POP
14693: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14694: LD_INT 22
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: PUSH
14725: LD_INT 0
14727: EQUAL
14728: IFFALSE 14441
// end ;
14730: LD_VAR 0 12
14734: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
14739: PPUSH
14740: PPUSH
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
// for i = 1 to medicCount do
14748: LD_ADDR_VAR 0 13
14752: PUSH
14753: DOUBLE
14754: LD_INT 1
14756: DEC
14757: ST_TO_ADDR
14758: LD_VAR 0 7
14762: PUSH
14763: FOR_TO
14764: IFFALSE 14846
// begin uc_side = side ;
14766: LD_ADDR_OWVAR 20
14770: PUSH
14771: LD_VAR 0 1
14775: ST_TO_ADDR
// uc_nation = nation ;
14776: LD_ADDR_OWVAR 21
14780: PUSH
14781: LD_VAR 0 2
14785: ST_TO_ADDR
// hc_name =  ;
14786: LD_ADDR_OWVAR 26
14790: PUSH
14791: LD_STRING 
14793: ST_TO_ADDR
// hc_gallery =  ;
14794: LD_ADDR_OWVAR 33
14798: PUSH
14799: LD_STRING 
14801: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
14802: LD_INT 0
14804: PPUSH
14805: LD_INT 4
14807: PPUSH
14808: LD_VAR 0 8
14812: PPUSH
14813: CALL_OW 380
// un = CreateHuman ;
14817: LD_ADDR_VAR 0 15
14821: PUSH
14822: CALL_OW 44
14826: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14827: LD_VAR 0 15
14831: PPUSH
14832: LD_VAR 0 9
14836: PPUSH
14837: LD_INT 0
14839: PPUSH
14840: CALL_OW 49
// end ;
14844: GO 14763
14846: POP
14847: POP
// for i = 1 to soldierCount do
14848: LD_ADDR_VAR 0 13
14852: PUSH
14853: DOUBLE
14854: LD_INT 1
14856: DEC
14857: ST_TO_ADDR
14858: LD_VAR 0 3
14862: PUSH
14863: FOR_TO
14864: IFFALSE 14946
// begin uc_side = side ;
14866: LD_ADDR_OWVAR 20
14870: PUSH
14871: LD_VAR 0 1
14875: ST_TO_ADDR
// uc_nation = nation ;
14876: LD_ADDR_OWVAR 21
14880: PUSH
14881: LD_VAR 0 2
14885: ST_TO_ADDR
// hc_name =  ;
14886: LD_ADDR_OWVAR 26
14890: PUSH
14891: LD_STRING 
14893: ST_TO_ADDR
// hc_gallery =  ;
14894: LD_ADDR_OWVAR 33
14898: PUSH
14899: LD_STRING 
14901: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14902: LD_INT 0
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: LD_VAR 0 8
14912: PPUSH
14913: CALL_OW 380
// un = CreateHuman ;
14917: LD_ADDR_VAR 0 15
14921: PUSH
14922: CALL_OW 44
14926: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14927: LD_VAR 0 15
14931: PPUSH
14932: LD_VAR 0 9
14936: PPUSH
14937: LD_INT 0
14939: PPUSH
14940: CALL_OW 49
// end ;
14944: GO 14863
14946: POP
14947: POP
// for i = 1 to sniperCount do
14948: LD_ADDR_VAR 0 13
14952: PUSH
14953: DOUBLE
14954: LD_INT 1
14956: DEC
14957: ST_TO_ADDR
14958: LD_VAR 0 4
14962: PUSH
14963: FOR_TO
14964: IFFALSE 15046
// begin uc_side = side ;
14966: LD_ADDR_OWVAR 20
14970: PUSH
14971: LD_VAR 0 1
14975: ST_TO_ADDR
// uc_nation = nation ;
14976: LD_ADDR_OWVAR 21
14980: PUSH
14981: LD_VAR 0 2
14985: ST_TO_ADDR
// hc_name =  ;
14986: LD_ADDR_OWVAR 26
14990: PUSH
14991: LD_STRING 
14993: ST_TO_ADDR
// hc_gallery =  ;
14994: LD_ADDR_OWVAR 33
14998: PUSH
14999: LD_STRING 
15001: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
15002: LD_INT 0
15004: PPUSH
15005: LD_INT 5
15007: PPUSH
15008: LD_VAR 0 8
15012: PPUSH
15013: CALL_OW 380
// un = CreateHuman ;
15017: LD_ADDR_VAR 0 15
15021: PUSH
15022: CALL_OW 44
15026: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15027: LD_VAR 0 15
15031: PPUSH
15032: LD_VAR 0 9
15036: PPUSH
15037: LD_INT 0
15039: PPUSH
15040: CALL_OW 49
// end ;
15044: GO 14963
15046: POP
15047: POP
// for i = 1 to bazookCount do
15048: LD_ADDR_VAR 0 13
15052: PUSH
15053: DOUBLE
15054: LD_INT 1
15056: DEC
15057: ST_TO_ADDR
15058: LD_VAR 0 5
15062: PUSH
15063: FOR_TO
15064: IFFALSE 15146
// begin uc_side = side ;
15066: LD_ADDR_OWVAR 20
15070: PUSH
15071: LD_VAR 0 1
15075: ST_TO_ADDR
// uc_nation = nation ;
15076: LD_ADDR_OWVAR 21
15080: PUSH
15081: LD_VAR 0 2
15085: ST_TO_ADDR
// hc_name =  ;
15086: LD_ADDR_OWVAR 26
15090: PUSH
15091: LD_STRING 
15093: ST_TO_ADDR
// hc_gallery =  ;
15094: LD_ADDR_OWVAR 33
15098: PUSH
15099: LD_STRING 
15101: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
15102: LD_INT 0
15104: PPUSH
15105: LD_INT 9
15107: PPUSH
15108: LD_VAR 0 8
15112: PPUSH
15113: CALL_OW 380
// un = CreateHuman ;
15117: LD_ADDR_VAR 0 15
15121: PUSH
15122: CALL_OW 44
15126: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15127: LD_VAR 0 15
15131: PPUSH
15132: LD_VAR 0 9
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL_OW 49
// end ;
15144: GO 15063
15146: POP
15147: POP
// for i = 1 to mortalCount do
15148: LD_ADDR_VAR 0 13
15152: PUSH
15153: DOUBLE
15154: LD_INT 1
15156: DEC
15157: ST_TO_ADDR
15158: LD_VAR 0 6
15162: PUSH
15163: FOR_TO
15164: IFFALSE 15246
// begin uc_side = side ;
15166: LD_ADDR_OWVAR 20
15170: PUSH
15171: LD_VAR 0 1
15175: ST_TO_ADDR
// uc_nation = nation ;
15176: LD_ADDR_OWVAR 21
15180: PUSH
15181: LD_VAR 0 2
15185: ST_TO_ADDR
// hc_name =  ;
15186: LD_ADDR_OWVAR 26
15190: PUSH
15191: LD_STRING 
15193: ST_TO_ADDR
// hc_gallery =  ;
15194: LD_ADDR_OWVAR 33
15198: PUSH
15199: LD_STRING 
15201: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15202: LD_INT 0
15204: PPUSH
15205: LD_INT 8
15207: PPUSH
15208: LD_VAR 0 8
15212: PPUSH
15213: CALL_OW 380
// un = CreateHuman ;
15217: LD_ADDR_VAR 0 15
15221: PUSH
15222: CALL_OW 44
15226: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15227: LD_VAR 0 15
15231: PPUSH
15232: LD_VAR 0 9
15236: PPUSH
15237: LD_INT 0
15239: PPUSH
15240: CALL_OW 49
// end ;
15244: GO 15163
15246: POP
15247: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
15248: LD_ADDR_VAR 0 18
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_VAR 0 1
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: LD_INT 25
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 25
15280: PUSH
15281: LD_INT 5
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 25
15290: PUSH
15291: LD_INT 8
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 9
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 69
15323: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15324: LD_ADDR_VAR 0 17
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_VAR 0 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 25
15343: PUSH
15344: LD_INT 4
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 69
15359: ST_TO_ADDR
// for i in medic_list do
15360: LD_ADDR_VAR 0 13
15364: PUSH
15365: LD_VAR 0 17
15369: PUSH
15370: FOR_IN
15371: IFFALSE 15389
// ComMoveToArea ( i , healArea ) ;
15373: LD_VAR 0 13
15377: PPUSH
15378: LD_VAR 0 10
15382: PPUSH
15383: CALL_OW 113
15387: GO 15370
15389: POP
15390: POP
// repeat wait ( 0 0$1 ) ;
15391: LD_INT 35
15393: PPUSH
15394: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15398: LD_ADDR_VAR 0 16
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_VAR 0 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 1
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 24
15423: PUSH
15424: LD_INT 550
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 24
15437: PUSH
15438: LD_INT 250
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15459: LD_ADDR_VAR 0 18
15463: PUSH
15464: LD_INT 22
15466: PUSH
15467: LD_VAR 0 1
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 2
15478: PUSH
15479: LD_INT 25
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 25
15491: PUSH
15492: LD_INT 5
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 25
15501: PUSH
15502: LD_INT 8
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
<<<<<<< HEAD
15508: PPUSH
15509: CALL_OW 69
15513: PPUSH
15514: LD_VAR 0 13
15518: PPUSH
15519: CALL_OW 74
15523: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15524: LD_ADDR_VAR 0 22
15528: PUSH
15529: LD_INT 22
15531: PUSH
15532: LD_VAR 0 11
15536: PUSH
15537: EMPTY
15538: LIST
15539: LIST
15540: PUSH
15541: LD_INT 2
15543: PUSH
15544: LD_INT 59
15546: PUSH
15547: EMPTY
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 1
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 21
15562: PUSH
15563: LD_INT 2
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: EMPTY
15581: LIST
15582: PPUSH
15583: CALL_OW 69
15587: PPUSH
15588: LD_VAR 0 13
15592: PPUSH
15593: CALL_OW 74
15597: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15598: LD_VAR 0 13
15602: PPUSH
15603: LD_VAR 0 21
15607: PPUSH
15608: CALL_OW 296
15612: PUSH
15613: LD_INT 8
15615: PLUS
15616: PUSH
15617: LD_VAR 0 13
15621: PPUSH
15622: LD_VAR 0 22
15626: PPUSH
15627: CALL_OW 296
15631: LESS
15632: IFFALSE 15650
// begin ComAttackUnit ( i , target1 ) ;
15634: LD_VAR 0 13
15638: PPUSH
15639: LD_VAR 0 21
15643: PPUSH
15644: CALL_OW 115
// end else
15648: GO 15664
// begin ComAttackUnit ( i , target2 ) ;
15650: LD_VAR 0 13
15654: PPUSH
15655: LD_VAR 0 22
15659: PPUSH
15660: CALL_OW 115
// end ; end ;
15664: GO 15489
15666: POP
15667: POP
// for i in soldiersOK_list do
15668: LD_ADDR_VAR 0 13
15672: PUSH
15673: LD_VAR 0 18
15677: PUSH
15678: FOR_IN
15679: IFFALSE 15855
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15681: LD_ADDR_VAR 0 21
15685: PUSH
15686: LD_INT 22
15688: PUSH
15689: LD_VAR 0 11
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PPUSH
15698: CALL_OW 69
15702: PPUSH
15703: LD_VAR 0 13
15707: PPUSH
15708: CALL_OW 74
15712: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15713: LD_ADDR_VAR 0 22
15717: PUSH
15718: LD_INT 22
15720: PUSH
15721: LD_VAR 0 11
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 2
15732: PUSH
15733: LD_INT 59
15735: PUSH
15736: EMPTY
15737: LIST
15738: PUSH
15739: LD_INT 21
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 21
15751: PUSH
15752: LD_INT 2
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: PUSH
15769: EMPTY
15770: LIST
15771: PPUSH
15772: CALL_OW 69
15776: PPUSH
15777: LD_VAR 0 13
15781: PPUSH
15782: CALL_OW 74
15786: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15787: LD_VAR 0 13
15791: PPUSH
15792: LD_VAR 0 21
15796: PPUSH
15797: CALL_OW 296
15801: PUSH
15802: LD_INT 8
15804: PLUS
15805: PUSH
15806: LD_VAR 0 13
15810: PPUSH
15811: LD_VAR 0 22
15815: PPUSH
15816: CALL_OW 296
15820: LESS
15821: IFFALSE 15839
// begin ComAttackUnit ( i , target1 ) ;
15823: LD_VAR 0 13
15827: PPUSH
15828: LD_VAR 0 21
15832: PPUSH
15833: CALL_OW 115
// end else
15837: GO 15853
// begin ComAttackUnit ( i , target2 ) ;
15839: LD_VAR 0 13
15843: PPUSH
15844: LD_VAR 0 22
15848: PPUSH
15849: CALL_OW 115
// end ; end ;
15853: GO 15678
15855: POP
15856: POP
// until soldiersOK_list = [ ] ;
15857: LD_VAR 0 18
15861: PUSH
15862: EMPTY
15863: EQUAL
15864: IFFALSE 15242
// end ;
15866: LD_VAR 0 12
15870: RET
// export function TameApemans ; var i , j ; begin
15871: LD_INT 0
15873: PPUSH
15874: PPUSH
15875: PPUSH
// repeat wait ( 0 0$1 ) ;
15876: LD_INT 35
15878: PPUSH
15879: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
15883: LD_ADDR_VAR 0 2
15887: PUSH
15888: LD_INT 22
15890: PUSH
15891: LD_INT 2
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 25
15900: PUSH
15901: LD_INT 4
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: PPUSH
15912: CALL_OW 69
15916: PUSH
15917: FOR_IN
15918: IFFALSE 15995
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
15920: LD_ADDR_VAR 0 3
15924: PUSH
15925: LD_INT 5
15927: PPUSH
15928: LD_INT 22
15930: PUSH
15931: LD_INT 0
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 25
15940: PUSH
15941: LD_INT 12
15943: PUSH
15944: EMPTY
15945: LIST
15946: LIST
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PPUSH
15952: CALL_OW 70
15956: PUSH
15957: FOR_IN
15958: IFFALSE 15991
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
15960: LD_VAR 0 2
15964: PPUSH
15965: LD_VAR 0 3
15969: PPUSH
15970: CALL_OW 250
15974: PPUSH
15975: LD_VAR 0 3
15979: PPUSH
15980: CALL_OW 251
15984: PPUSH
15985: CALL_OW 191
// end ;
15989: GO 15957
15991: POP
15992: POP
// end ;
15993: GO 15917
15995: POP
15996: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
15997: LD_INT 22
15999: PUSH
16000: LD_INT 2
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 25
16009: PUSH
16010: LD_INT 4
16012: PUSH
16013: EMPTY
16014: LIST
16015: LIST
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PPUSH
16021: CALL_OW 69
16025: PUSH
16026: LD_INT 0
16028: EQUAL
16029: PUSH
16030: LD_INT 5
16032: PPUSH
16033: LD_INT 22
16035: PUSH
16036: LD_INT 0
16038: PUSH
16039: EMPTY
16040: LIST
16041: LIST
16042: PUSH
16043: LD_INT 25
16045: PUSH
16046: LD_INT 12
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PPUSH
16057: CALL_OW 70
16061: PUSH
16062: LD_INT 0
16064: EQUAL
16065: OR
16066: IFFALSE 15876
// wait ( 0 0$30 ) ;
16068: LD_INT 1050
16070: PPUSH
16071: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
16075: LD_ADDR_VAR 0 2
16079: PUSH
16080: LD_INT 22
16082: PUSH
16083: LD_INT 2
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 25
16092: PUSH
16093: LD_INT 12
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: PPUSH
16104: CALL_OW 69
16108: PUSH
16109: FOR_IN
16110: IFFALSE 16174
// begin SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
16112: LD_VAR 0 2
16116: PPUSH
16117: LD_INT 16
16119: PUSH
16120: LD_INT 15
16122: PUSH
16123: EMPTY
16124: LIST
16125: LIST
16126: PUSH
16127: LD_INT 1
16129: PPUSH
16130: LD_INT 2
16132: PPUSH
16133: CALL_OW 12
16137: ARRAY
16138: PPUSH
16139: CALL_OW 336
// ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
16143: LD_VAR 0 2
16147: PPUSH
16148: LD_EXP 42
16152: PPUSH
16153: CALL_OW 250
16157: PPUSH
16158: LD_EXP 42
16162: PPUSH
16163: CALL_OW 251
16167: PPUSH
16168: CALL_OW 111
// end ;
16172: GO 16109
16174: POP
16175: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16176: LD_ADDR_VAR 0 2
16180: PUSH
16181: LD_INT 22
16183: PUSH
16184: LD_INT 2
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 25
16193: PUSH
16194: LD_INT 4
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PPUSH
16205: CALL_OW 69
16209: PUSH
16210: FOR_IN
16211: IFFALSE 16257
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
16213: LD_VAR 0 2
16217: PPUSH
16218: LD_INT 22
16220: PUSH
16221: LD_INT 2
16223: PUSH
16224: EMPTY
16225: LIST
16226: LIST
16227: PUSH
16228: LD_INT 30
16230: PUSH
16231: LD_INT 8
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PPUSH
16242: CALL_OW 69
16246: PUSH
16247: LD_INT 1
16249: ARRAY
16250: PPUSH
16251: CALL_OW 120
16255: GO 16210
16257: POP
16258: POP
// end ;
16259: LD_VAR 0 1
16263: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16264: LD_INT 0
16266: PPUSH
16267: PPUSH
16268: PPUSH
16269: PPUSH
16270: PPUSH
16271: PPUSH
16272: PPUSH
16273: PPUSH
16274: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16275: LD_INT 22
16277: PUSH
16278: LD_VAR 0 1
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 21
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: PUSH
16306: LD_VAR 0 3
16310: LESSEQUAL
16311: IFFALSE 16455
// for i = 1 to vehCount do
16313: LD_ADDR_VAR 0 10
16317: PUSH
16318: DOUBLE
16319: LD_INT 1
16321: DEC
16322: ST_TO_ADDR
16323: LD_VAR 0 3
16327: PUSH
16328: FOR_TO
16329: IFFALSE 16453
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16331: LD_ADDR_VAR 0 12
16335: PUSH
16336: LD_VAR 0 5
16340: PUSH
16341: LD_INT 1
16343: PPUSH
16344: LD_VAR 0 5
16348: PPUSH
16349: CALL_OW 12
16353: ARRAY
16354: ST_TO_ADDR
// if randWeapon = 46 then
16355: LD_VAR 0 12
16359: PUSH
16360: LD_INT 46
16362: EQUAL
16363: IFFALSE 16408
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_INT 24
16372: PPUSH
16373: LD_VAR 0 6
16377: PPUSH
16378: LD_VAR 0 7
16382: PUSH
16383: LD_INT 1
16385: PPUSH
16386: LD_VAR 0 7
16390: PPUSH
16391: CALL_OW 12
16395: ARRAY
16396: PPUSH
16397: LD_VAR 0 12
16401: PPUSH
16402: CALL_OW 185
16406: GO 16451
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16408: LD_VAR 0 2
16412: PPUSH
16413: LD_VAR 0 8
16417: PPUSH
16418: LD_VAR 0 6
16422: PPUSH
16423: LD_VAR 0 7
16427: PUSH
16428: LD_INT 1
16430: PPUSH
16431: LD_VAR 0 7
16435: PPUSH
16436: CALL_OW 12
16440: ARRAY
16441: PPUSH
16442: LD_VAR 0 12
16446: PPUSH
16447: CALL_OW 185
// end ;
16451: GO 16328
16453: POP
16454: POP
// repeat wait ( 0 0$1 ) ;
16455: LD_INT 35
16457: PPUSH
16458: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16462: LD_INT 22
16464: PUSH
16465: LD_VAR 0 1
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: LD_INT 21
16476: PUSH
16477: LD_INT 2
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 24
16486: PUSH
16487: LD_INT 250
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: LIST
16498: PPUSH
16499: CALL_OW 69
16503: PUSH
16504: LD_VAR 0 3
16508: GREATEREQUAL
16509: IFFALSE 16455
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16511: LD_INT 22
16513: PUSH
16514: LD_VAR 0 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 21
16525: PUSH
16526: LD_INT 2
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: LD_INT 24
16535: PUSH
16536: LD_INT 250
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: LD_VAR 0 3
16557: GREATEREQUAL
16558: IFFALSE 16901
// begin repeat begin wait ( 0 0$1 ) ;
16560: LD_INT 35
16562: PPUSH
16563: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16567: LD_INT 22
16569: PUSH
16570: LD_VAR 0 1
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: PUSH
16579: LD_INT 21
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: EMPTY
16586: LIST
16587: LIST
16588: PUSH
16589: LD_INT 24
16591: PUSH
16592: LD_INT 651
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: LIST
16603: PPUSH
16604: CALL_OW 69
16608: PUSH
16609: LD_INT 0
16611: GREATER
16612: IFFALSE 16840
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
16614: LD_ADDR_VAR 0 10
16618: PUSH
16619: LD_INT 22
16621: PUSH
16622: LD_VAR 0 1
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: LD_INT 21
16633: PUSH
16634: LD_INT 2
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: PUSH
16641: LD_INT 24
16643: PUSH
16644: LD_INT 651
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: EMPTY
16652: LIST
16653: LIST
16654: LIST
16655: PPUSH
16656: CALL_OW 69
16660: PUSH
16661: FOR_IN
16662: IFFALSE 16838
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16664: LD_ADDR_VAR 0 16
16668: PUSH
16669: LD_INT 22
16671: PUSH
16672: LD_VAR 0 4
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PPUSH
16686: LD_VAR 0 10
16690: PPUSH
16691: CALL_OW 74
16695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16696: LD_ADDR_VAR 0 17
16700: PUSH
16701: LD_INT 22
16703: PUSH
16704: LD_VAR 0 4
16708: PUSH
16709: EMPTY
16710: LIST
16711: LIST
16712: PUSH
16713: LD_INT 2
16715: PUSH
16716: LD_INT 59
16718: PUSH
16719: EMPTY
16720: LIST
16721: PUSH
16722: LD_INT 21
16724: PUSH
16725: LD_INT 1
16727: PUSH
16728: EMPTY
16729: LIST
16730: LIST
16731: PUSH
16732: LD_INT 21
16734: PUSH
16735: LD_INT 2
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
=======
15508: PUSH
15509: LD_INT 25
15511: PUSH
15512: LD_INT 9
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 24
15528: PUSH
15529: LD_INT 1000
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: ST_TO_ADDR
// if medicCount > 0 then
15546: LD_VAR 0 7
15550: PUSH
15551: LD_INT 0
15553: GREATER
15554: IFFALSE 15628
// begin if damageUnit_list > 0 then
15556: LD_VAR 0 16
15560: PUSH
15561: LD_INT 0
15563: GREATER
15564: IFFALSE 15628
// begin for i in damageUnit_list do
15566: LD_ADDR_VAR 0 13
15570: PUSH
15571: LD_VAR 0 16
15575: PUSH
15576: FOR_IN
15577: IFFALSE 15626
// begin ComMoveToArea ( i , healArea ) ;
15579: LD_VAR 0 13
15583: PPUSH
15584: LD_VAR 0 10
15588: PPUSH
15589: CALL_OW 113
// for j in medic_list do
15593: LD_ADDR_VAR 0 14
15597: PUSH
15598: LD_VAR 0 17
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15622
// AddComHeal ( j , i ) ;
15606: LD_VAR 0 14
15610: PPUSH
15611: LD_VAR 0 13
15615: PPUSH
15616: CALL_OW 188
15620: GO 15603
15622: POP
15623: POP
// end ;
15624: GO 15576
15626: POP
15627: POP
// end ; end ; for i in soldiersOK_list do
15628: LD_ADDR_VAR 0 13
15632: PUSH
15633: LD_VAR 0 18
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15815
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15641: LD_ADDR_VAR 0 21
15645: PUSH
15646: LD_INT 22
15648: PUSH
15649: LD_VAR 0 11
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PPUSH
15663: LD_VAR 0 13
15667: PPUSH
15668: CALL_OW 74
15672: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15673: LD_ADDR_VAR 0 22
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_VAR 0 11
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: LD_INT 59
15695: PUSH
15696: EMPTY
15697: LIST
15698: PUSH
15699: LD_INT 21
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 2
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PPUSH
15737: LD_VAR 0 13
15741: PPUSH
15742: CALL_OW 74
15746: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15747: LD_VAR 0 13
15751: PPUSH
15752: LD_VAR 0 21
15756: PPUSH
15757: CALL_OW 296
15761: PUSH
15762: LD_INT 8
15764: PLUS
15765: PUSH
15766: LD_VAR 0 13
15770: PPUSH
15771: LD_VAR 0 22
15775: PPUSH
15776: CALL_OW 296
15780: LESS
15781: IFFALSE 15799
// begin ComAttackUnit ( i , target1 ) ;
15783: LD_VAR 0 13
15787: PPUSH
15788: LD_VAR 0 21
15792: PPUSH
15793: CALL_OW 115
// end else
15797: GO 15813
// begin ComAttackUnit ( i , target2 ) ;
15799: LD_VAR 0 13
15803: PPUSH
15804: LD_VAR 0 22
15808: PPUSH
15809: CALL_OW 115
// end ; end ;
15813: GO 15638
15815: POP
15816: POP
// for i in soldiersOK_list do
15817: LD_ADDR_VAR 0 13
15821: PUSH
15822: LD_VAR 0 18
15826: PUSH
15827: FOR_IN
15828: IFFALSE 16004
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15830: LD_ADDR_VAR 0 21
15834: PUSH
15835: LD_INT 22
15837: PUSH
15838: LD_VAR 0 11
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 13
15856: PPUSH
15857: CALL_OW 74
15861: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15862: LD_ADDR_VAR 0 22
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_VAR 0 11
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 59
15884: PUSH
15885: EMPTY
15886: LIST
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 21
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: PPUSH
15926: LD_VAR 0 13
15930: PPUSH
15931: CALL_OW 74
15935: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15936: LD_VAR 0 13
15940: PPUSH
15941: LD_VAR 0 21
15945: PPUSH
15946: CALL_OW 296
15950: PUSH
15951: LD_INT 8
15953: PLUS
15954: PUSH
15955: LD_VAR 0 13
15959: PPUSH
15960: LD_VAR 0 22
15964: PPUSH
15965: CALL_OW 296
15969: LESS
15970: IFFALSE 15988
// begin ComAttackUnit ( i , target1 ) ;
15972: LD_VAR 0 13
15976: PPUSH
15977: LD_VAR 0 21
15981: PPUSH
15982: CALL_OW 115
// end else
15986: GO 16002
// begin ComAttackUnit ( i , target2 ) ;
15988: LD_VAR 0 13
15992: PPUSH
15993: LD_VAR 0 22
15997: PPUSH
15998: CALL_OW 115
// end ; end ;
16002: GO 15827
16004: POP
16005: POP
// until soldiersOK_list = [ ] ;
16006: LD_VAR 0 18
16010: PUSH
16011: EMPTY
16012: EQUAL
16013: IFFALSE 15391
// end ;
16015: LD_VAR 0 12
16019: RET
// export function TameApemans ; var i , j ; begin
16020: LD_INT 0
16022: PPUSH
16023: PPUSH
16024: PPUSH
// repeat wait ( 0 0$1 ) ;
16025: LD_INT 35
16027: PPUSH
16028: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16032: LD_ADDR_VAR 0 2
16036: PUSH
16037: LD_INT 22
16039: PUSH
16040: LD_INT 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 25
16049: PUSH
16050: LD_INT 4
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: PUSH
16066: FOR_IN
16067: IFFALSE 16144
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16069: LD_ADDR_VAR 0 3
16073: PUSH
16074: LD_INT 5
16076: PPUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 25
16089: PUSH
16090: LD_INT 12
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 70
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16140
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16109: LD_VAR 0 2
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: CALL_OW 250
16123: PPUSH
16124: LD_VAR 0 3
16128: PPUSH
16129: CALL_OW 251
16133: PPUSH
16134: CALL_OW 191
// end ;
16138: GO 16106
16140: POP
16141: POP
// end ;
16142: GO 16066
16144: POP
16145: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
16146: LD_INT 22
16148: PUSH
16149: LD_INT 2
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 25
16158: PUSH
16159: LD_INT 4
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: PUSH
16175: LD_INT 0
16177: EQUAL
16178: PUSH
16179: LD_INT 5
16181: PPUSH
16182: LD_INT 22
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 12
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 70
16210: PUSH
16211: LD_INT 0
16213: EQUAL
16214: OR
16215: IFFALSE 16025
// wait ( 0 0$30 ) ;
16217: LD_INT 1050
16219: PPUSH
16220: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_INT 22
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 25
16241: PUSH
16242: LD_INT 12
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PPUSH
16253: CALL_OW 69
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16323
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_EXP 42
16270: PPUSH
16271: CALL_OW 250
16275: PPUSH
16276: LD_EXP 42
16280: PPUSH
16281: CALL_OW 251
16285: PPUSH
16286: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_INT 16
16297: PUSH
16298: LD_INT 15
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_INT 2
16310: PPUSH
16311: CALL_OW 12
16315: ARRAY
16316: PPUSH
16317: CALL_OW 336
// end ;
16321: GO 16258
16323: POP
16324: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: LD_INT 22
16332: PUSH
16333: LD_INT 2
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 25
16342: PUSH
16343: LD_INT 4
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 69
16358: PUSH
16359: FOR_IN
16360: IFFALSE 16406
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
16362: LD_VAR 0 2
16366: PPUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 2
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 30
16379: PUSH
16380: LD_INT 8
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: CALL_OW 120
16404: GO 16359
16406: POP
16407: POP
// end ;
16408: LD_VAR 0 1
16412: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16424: LD_INT 22
16426: PUSH
16427: LD_VAR 0 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: PUSH
16455: LD_VAR 0 3
16459: LESSEQUAL
16460: IFFALSE 16604
// for i = 1 to vehCount do
16462: LD_ADDR_VAR 0 10
16466: PUSH
16467: DOUBLE
16468: LD_INT 1
16470: DEC
16471: ST_TO_ADDR
16472: LD_VAR 0 3
16476: PUSH
16477: FOR_TO
16478: IFFALSE 16602
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16480: LD_ADDR_VAR 0 12
16484: PUSH
16485: LD_VAR 0 5
16489: PUSH
16490: LD_INT 1
16492: PPUSH
16493: LD_VAR 0 5
16497: PPUSH
16498: CALL_OW 12
16502: ARRAY
16503: ST_TO_ADDR
// if randWeapon = 46 then
16504: LD_VAR 0 12
16508: PUSH
16509: LD_INT 46
16511: EQUAL
16512: IFFALSE 16557
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16514: LD_VAR 0 2
16518: PPUSH
16519: LD_INT 24
16521: PPUSH
16522: LD_VAR 0 6
16526: PPUSH
16527: LD_VAR 0 7
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_VAR 0 7
16539: PPUSH
16540: CALL_OW 12
16544: ARRAY
16545: PPUSH
16546: LD_VAR 0 12
16550: PPUSH
16551: CALL_OW 185
16555: GO 16600
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_VAR 0 8
16566: PPUSH
16567: LD_VAR 0 6
16571: PPUSH
16572: LD_VAR 0 7
16576: PUSH
16577: LD_INT 1
16579: PPUSH
16580: LD_VAR 0 7
16584: PPUSH
16585: CALL_OW 12
16589: ARRAY
16590: PPUSH
16591: LD_VAR 0 12
16595: PPUSH
16596: CALL_OW 185
// end ;
16600: GO 16477
16602: POP
16603: POP
// repeat wait ( 0 0$1 ) ;
16604: LD_INT 35
16606: PPUSH
16607: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16611: LD_INT 22
16613: PUSH
16614: LD_VAR 0 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 21
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 24
16635: PUSH
16636: LD_INT 250
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: LIST
16647: PPUSH
16648: CALL_OW 69
16652: PUSH
16653: LD_VAR 0 3
16657: GREATEREQUAL
16658: IFFALSE 16604
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16660: LD_INT 22
16662: PUSH
16663: LD_VAR 0 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 24
16684: PUSH
16685: LD_INT 250
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: PPUSH
16697: CALL_OW 69
16701: PUSH
16702: LD_VAR 0 3
16706: GREATEREQUAL
16707: IFFALSE 17050
// begin repeat begin wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16716: LD_INT 22
16718: PUSH
16719: LD_VAR 0 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 21
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 24
16740: PUSH
16741: LD_INT 651
16743: PUSH
16744: EMPTY
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
<<<<<<< HEAD
16751: PUSH
16752: EMPTY
16753: LIST
16754: PPUSH
16755: CALL_OW 69
16759: PPUSH
16760: LD_VAR 0 10
16764: PPUSH
16765: CALL_OW 74
16769: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16770: LD_VAR 0 10
16774: PPUSH
16775: LD_VAR 0 16
16779: PPUSH
16780: CALL_OW 296
16784: PUSH
16785: LD_INT 8
16787: PLUS
16788: PUSH
16789: LD_VAR 0 10
16793: PPUSH
16794: LD_VAR 0 17
16798: PPUSH
16799: CALL_OW 296
16803: LESS
16804: IFFALSE 16822
// begin ComAttackUnit ( i , target1 ) ;
16806: LD_VAR 0 10
16810: PPUSH
16811: LD_VAR 0 16
16815: PPUSH
16816: CALL_OW 115
// end else
16820: GO 16836
// begin ComAttackUnit ( i , target2 ) ;
16822: LD_VAR 0 10
16826: PPUSH
16827: LD_VAR 0 17
16831: PPUSH
16832: CALL_OW 115
// end ; end ;
16836: GO 16661
16838: POP
16839: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
16840: LD_INT 22
16842: PUSH
16843: LD_VAR 0 1
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PUSH
16852: LD_INT 21
16854: PUSH
16855: LD_INT 2
=======
16751: LIST
16752: PPUSH
16753: CALL_OW 69
16757: PUSH
16758: LD_INT 0
16760: GREATER
16761: IFFALSE 16989
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
16763: LD_ADDR_VAR 0 10
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_VAR 0 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 21
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 24
16792: PUSH
16793: LD_INT 651
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: PPUSH
16805: CALL_OW 69
16809: PUSH
16810: FOR_IN
16811: IFFALSE 16987
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16813: LD_ADDR_VAR 0 16
16817: PUSH
16818: LD_INT 22
16820: PUSH
16821: LD_VAR 0 4
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 69
16834: PPUSH
16835: LD_VAR 0 10
16839: PPUSH
16840: CALL_OW 74
16844: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16845: LD_ADDR_VAR 0 17
16849: PUSH
16850: LD_INT 22
16852: PUSH
16853: LD_VAR 0 4
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
<<<<<<< HEAD
16862: EMPTY
16863: LIST
16864: LIST
16865: PPUSH
16866: CALL_OW 69
16870: PUSH
16871: LD_INT 0
16873: EQUAL
16874: PUSH
16875: LD_INT 22
16877: PUSH
16878: LD_VAR 0 4
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: EMPTY
16888: LIST
16889: PPUSH
16890: CALL_OW 69
16894: PUSH
16895: LD_INT 0
16897: EQUAL
16898: OR
16899: IFFALSE 16560
// end ; end ; end_of_file
16901: LD_VAR 0 9
16905: RET
// every 0 0$1 trigger russianAI = 1 do
16906: LD_EXP 38
16910: PUSH
16911: LD_INT 1
16913: EQUAL
16914: IFFALSE 17133
16916: GO 16918
16918: DISABLE
// begin enable ;
16919: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
16920: LD_INT 3
16922: PPUSH
16923: LD_EXP 29
16927: PPUSH
16928: CALL 11905 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
16932: LD_INT 3
16934: PPUSH
16935: LD_EXP 41
16939: PPUSH
16940: CALL 12212 0 2
// if ruPossition = 1 then
16944: LD_EXP 40
16948: PUSH
16949: LD_INT 1
16951: EQUAL
16952: IFFALSE 17007
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
16954: LD_INT 3
16956: PPUSH
16957: LD_INT 13
16959: PPUSH
16960: LD_INT 10
16962: PPUSH
16963: LD_INT 22
16965: PUSH
16966: LD_INT 3
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: LD_INT 21
16975: PUSH
16976: LD_INT 3
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: PUSH
16983: LD_INT 30
16985: PUSH
16986: LD_INT 8
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: PPUSH
16998: CALL_OW 69
17002: PPUSH
17003: CALL 12418 0 4
// if ruPossition = 2 then
17007: LD_EXP 40
17011: PUSH
17012: LD_INT 2
17014: EQUAL
17015: IFFALSE 17070
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17017: LD_INT 3
17019: PPUSH
17020: LD_INT 14
17022: PPUSH
17023: LD_INT 11
17025: PPUSH
17026: LD_INT 22
17028: PUSH
17029: LD_INT 3
=======
16862: LD_INT 2
16864: PUSH
16865: LD_INT 59
16867: PUSH
16868: EMPTY
16869: LIST
16870: PUSH
16871: LD_INT 21
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: EMPTY
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: PPUSH
16909: LD_VAR 0 10
16913: PPUSH
16914: CALL_OW 74
16918: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16919: LD_VAR 0 10
16923: PPUSH
16924: LD_VAR 0 16
16928: PPUSH
16929: CALL_OW 296
16933: PUSH
16934: LD_INT 8
16936: PLUS
16937: PUSH
16938: LD_VAR 0 10
16942: PPUSH
16943: LD_VAR 0 17
16947: PPUSH
16948: CALL_OW 296
16952: LESS
16953: IFFALSE 16971
// begin ComAttackUnit ( i , target1 ) ;
16955: LD_VAR 0 10
16959: PPUSH
16960: LD_VAR 0 16
16964: PPUSH
16965: CALL_OW 115
// end else
16969: GO 16985
// begin ComAttackUnit ( i , target2 ) ;
16971: LD_VAR 0 10
16975: PPUSH
16976: LD_VAR 0 17
16980: PPUSH
16981: CALL_OW 115
// end ; end ;
16985: GO 16810
16987: POP
16988: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
16989: LD_INT 22
16991: PUSH
16992: LD_VAR 0 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PPUSH
17015: CALL_OW 69
17019: PUSH
17020: LD_INT 0
17022: EQUAL
17023: PUSH
17024: LD_INT 22
17026: PUSH
17027: LD_VAR 0 4
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
<<<<<<< HEAD
17036: LD_INT 21
17038: PUSH
17039: LD_INT 3
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 30
17048: PUSH
17049: LD_INT 8
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: PPUSH
17066: CALL 12418 0 4
// if ruPossition = 3 then
17070: LD_EXP 40
17074: PUSH
17075: LD_INT 3
17077: EQUAL
17078: IFFALSE 17133
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17080: LD_INT 3
17082: PPUSH
17083: LD_INT 15
17085: PPUSH
17086: LD_INT 12
17088: PPUSH
17089: LD_INT 22
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 21
17101: PUSH
17102: LD_INT 3
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 30
17111: PUSH
17112: LD_INT 8
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: LIST
17123: PPUSH
17124: CALL_OW 69
17128: PPUSH
17129: CALL 12418 0 4
// end ;
17133: END
// every 0 0$1 do
17134: GO 17136
17136: DISABLE
// begin enable ;
17137: ENABLE
// if ruPossition = 1 then
17138: LD_EXP 40
17142: PUSH
17143: LD_INT 1
17145: EQUAL
17146: IFFALSE 17158
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
17148: LD_INT 3
17150: PPUSH
17151: LD_INT 10
17153: PPUSH
17154: CALL 11603 0 2
// if ruPossition = 2 then
17158: LD_EXP 40
17162: PUSH
17163: LD_INT 2
17165: EQUAL
17166: IFFALSE 17178
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
17168: LD_INT 3
17170: PPUSH
17171: LD_INT 11
17173: PPUSH
17174: CALL 11603 0 2
// if ruPossition = 3 then
17178: LD_EXP 40
17182: PUSH
17183: LD_INT 3
17185: EQUAL
17186: IFFALSE 17198
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
17188: LD_INT 3
17190: PPUSH
17191: LD_INT 12
17193: PPUSH
17194: CALL 11603 0 2
// IntBazooka ( 3 , 1 ) ;
17198: LD_INT 3
17200: PPUSH
17201: LD_INT 1
17203: PPUSH
17204: CALL 10694 0 2
// IntBazooka ( 6 , 1 ) ;
17208: LD_INT 6
17210: PPUSH
17211: LD_INT 1
17213: PPUSH
17214: CALL 10694 0 2
// end ;
17218: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17219: LD_EXP 38
17223: PUSH
17224: LD_INT 1
17226: EQUAL
17227: PUSH
17228: LD_EXP 34
17232: PPUSH
17233: CALL_OW 302
17237: AND
17238: PUSH
17239: LD_EXP 34
17243: PPUSH
17244: CALL_OW 255
17248: PUSH
17249: LD_INT 3
17251: EQUAL
17252: AND
17253: PUSH
17254: LD_INT 22
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 21
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 33
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: PPUSH
17289: CALL_OW 69
17293: PUSH
17294: LD_INT 0
17296: EQUAL
17297: AND
17298: IFFALSE 17506
17300: GO 17302
17302: DISABLE
// begin enable ;
17303: ENABLE
// if Difficulty = 1 then
17304: LD_OWVAR 67
17308: PUSH
17309: LD_INT 1
17311: EQUAL
17312: IFFALSE 17374
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17314: LD_INT 3
17316: PPUSH
17317: LD_EXP 34
17321: PPUSH
17322: LD_INT 5
17324: PPUSH
17325: LD_INT 8
17327: PPUSH
17328: CALL_OW 12
17332: PPUSH
17333: LD_INT 1
17335: PPUSH
17336: LD_INT 43
17338: PUSH
17339: LD_INT 44
17341: PUSH
17342: LD_INT 45
17344: PUSH
17345: LD_INT 46
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: LIST
17352: LIST
17353: PPUSH
17354: LD_INT 1
17356: PPUSH
17357: LD_INT 1
17359: PUSH
17360: LD_INT 3
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: LD_INT 22
17369: PPUSH
17370: CALL 16264 0 8
// if Difficulty = 2 then
17374: LD_OWVAR 67
17378: PUSH
17379: LD_INT 2
17381: EQUAL
17382: IFFALSE 17440
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17384: LD_INT 3
17386: PPUSH
17387: LD_EXP 34
17391: PPUSH
17392: LD_INT 6
17394: PPUSH
17395: LD_INT 8
17397: PPUSH
17398: CALL_OW 12
17402: PPUSH
17403: LD_INT 1
17405: PPUSH
17406: LD_INT 44
17408: PUSH
17409: LD_INT 45
17411: PUSH
17412: LD_INT 46
17414: PUSH
17415: EMPTY
17416: LIST
17417: LIST
17418: LIST
17419: PPUSH
17420: LD_INT 1
17422: PPUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 3
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PPUSH
17433: LD_INT 22
17435: PPUSH
17436: CALL 16264 0 8
// if Difficulty = 3 then
17440: LD_OWVAR 67
17444: PUSH
17445: LD_INT 3
17447: EQUAL
17448: IFFALSE 17506
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17450: LD_INT 3
17452: PPUSH
17453: LD_EXP 34
17457: PPUSH
17458: LD_INT 7
17460: PPUSH
17461: LD_INT 8
17463: PPUSH
17464: CALL_OW 12
17468: PPUSH
17469: LD_INT 1
17471: PPUSH
17472: LD_INT 44
17474: PUSH
17475: LD_INT 45
17477: PUSH
17478: LD_INT 46
17480: PUSH
17481: EMPTY
17482: LIST
17483: LIST
17484: LIST
17485: PPUSH
17486: LD_INT 1
17488: PPUSH
17489: LD_INT 1
17491: PUSH
17492: LD_INT 3
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PPUSH
17499: LD_INT 22
17501: PPUSH
17502: CALL 16264 0 8
// end ; end_of_file
17506: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17507: LD_VAR 0 1
17511: PPUSH
17512: CALL_OW 255
17516: PUSH
17517: LD_INT 4
17519: EQUAL
17520: IFFALSE 17534
// SetBName ( building , epsilon ) ;
17522: LD_VAR 0 1
17526: PPUSH
17527: LD_STRING epsilon
17529: PPUSH
17530: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17534: LD_VAR 0 1
17538: PPUSH
17539: CALL_OW 255
17543: PUSH
17544: LD_INT 1
17546: EQUAL
17547: PUSH
17548: LD_VAR 0 1
17552: PPUSH
17553: CALL_OW 266
17557: PUSH
17558: LD_INT 0
17560: EQUAL
17561: AND
17562: IFFALSE 17576
// SetBName ( building , epsilon ) ;
17564: LD_VAR 0 1
17568: PPUSH
17569: LD_STRING epsilon
17571: PPUSH
17572: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17576: LD_VAR 0 1
17580: PPUSH
17581: CALL_OW 255
17585: PUSH
17586: LD_INT 3
17588: EQUAL
17589: PUSH
17590: LD_VAR 0 1
17594: PPUSH
17595: CALL_OW 266
17599: PUSH
17600: LD_INT 0
17602: EQUAL
17603: AND
17604: IFFALSE 17618
// SetBName ( building , chuikov ) ;
17606: LD_VAR 0 1
17610: PPUSH
17611: LD_STRING chuikov
17613: PPUSH
17614: CALL_OW 500
// end ;
17618: PPOPN 2
17620: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
17621: LD_VAR 0 1
17625: PUSH
17626: LD_INT 22
17628: PUSH
17629: LD_INT 6
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 23
17638: PUSH
17639: LD_INT 3
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 21
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: PPUSH
17661: CALL_OW 69
17665: IN
17666: PUSH
17667: LD_EXP 55
17671: NOT
17672: AND
17673: IFFALSE 17704
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
17675: LD_ADDR_EXP 55
17679: PUSH
17680: LD_VAR 0 1
17684: PPUSH
17685: CALL_OW 250
17689: PUSH
17690: LD_VAR 0 1
17694: PPUSH
17695: CALL_OW 251
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: ST_TO_ADDR
// end ;
17704: PPOPN 1
17706: END
// on BuildingComplete ( building ) do var i ;
17707: LD_INT 0
17709: PPUSH
// begin if GetSide ( building ) = 1 then
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 255
17719: PUSH
17720: LD_INT 1
17722: EQUAL
17723: IFFALSE 17923
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17725: LD_INT 22
17727: PUSH
17728: LD_INT 1
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: PUSH
17735: LD_INT 2
17737: PUSH
17738: LD_INT 30
17740: PUSH
17741: LD_INT 7
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: LD_INT 30
17750: PUSH
17751: LD_INT 8
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 1
17760: PUSH
17761: LD_INT 30
17763: PUSH
17764: LD_INT 11
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 1
17773: PUSH
17774: LD_INT 2
17776: PUSH
17777: LD_INT 30
17779: PUSH
17780: LD_INT 26
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 30
17789: PUSH
17790: LD_INT 27
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 30
17799: PUSH
17800: LD_INT 28
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: EMPTY
17818: LIST
17819: LIST
17820: LIST
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PPUSH
17832: CALL_OW 69
17836: PUSH
17837: LD_INT 0
17839: GREATER
17840: PUSH
17841: LD_INT 22
17843: PUSH
17844: LD_INT 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 30
17856: PUSH
17857: LD_INT 26
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 30
17866: PUSH
17867: LD_INT 27
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 30
17876: PUSH
17877: LD_INT 28
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 69
17898: PUSH
17899: LD_INT 0
17901: GREATER
17902: AND
17903: PUSH
17904: LD_EXP 57
17908: PUSH
17909: LD_INT 0
17911: EQUAL
17912: AND
17913: IFFALSE 17923
// eventVar1 = 1 ;
17915: LD_ADDR_EXP 57
17919: PUSH
17920: LD_INT 1
17922: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
17923: LD_VAR 0 1
17927: PPUSH
17928: CALL_OW 255
17932: PUSH
17933: LD_INT 3
17935: EQUAL
17936: IFFALSE 18416
// begin if GetBType ( building ) = b_depot then
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 266
17947: PUSH
17948: LD_INT 0
17950: EQUAL
17951: IFFALSE 18023
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17953: LD_VAR 0 1
17957: PPUSH
17958: CALL_OW 274
17962: PPUSH
17963: LD_INT 1
17965: PPUSH
17966: LD_INT 5000
17968: PPUSH
17969: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17973: LD_VAR 0 1
17977: PPUSH
17978: CALL_OW 274
17982: PPUSH
17983: LD_INT 2
17985: PPUSH
17986: LD_INT 5000
17988: PPUSH
17989: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
17993: LD_VAR 0 1
17997: PPUSH
17998: CALL_OW 274
18002: PPUSH
18003: LD_INT 3
18005: PPUSH
18006: LD_INT 5000
18008: PPUSH
18009: CALL_OW 277
// ruDepot = building ;
18013: LD_ADDR_EXP 29
18017: PUSH
18018: LD_VAR 0 1
18022: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18023: LD_VAR 0 1
18027: PPUSH
18028: CALL_OW 266
18032: PUSH
18033: LD_INT 0
18035: EQUAL
18036: PUSH
18037: LD_VAR 0 1
18041: PPUSH
18042: CALL_OW 266
18046: PUSH
18047: LD_INT 2
18049: EQUAL
18050: OR
18051: PUSH
18052: LD_VAR 0 1
18056: PPUSH
18057: CALL_OW 266
18061: PUSH
18062: LD_INT 4
18064: EQUAL
18065: OR
18066: IFFALSE 18077
// ComUpgrade ( building ) ;
18068: LD_VAR 0 1
18072: PPUSH
18073: CALL_OW 146
// if GetBType ( building ) = b_lab then
18077: LD_VAR 0 1
18081: PPUSH
18082: CALL_OW 266
18086: PUSH
18087: LD_INT 6
18089: EQUAL
18090: IFFALSE 18293
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
18092: LD_INT 22
18094: PUSH
18095: LD_INT 3
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 30
18104: PUSH
18105: LD_INT 8
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: PUSH
18121: LD_INT 0
18123: EQUAL
18124: IFFALSE 18162
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18126: LD_VAR 0 1
18130: PPUSH
18131: LD_INT 10
18133: PPUSH
18134: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 12
18145: PPUSH
18146: CALL_OW 207
// ruLab1 = building ;
18150: LD_ADDR_EXP 30
18154: PUSH
18155: LD_VAR 0 1
18159: ST_TO_ADDR
// end else
18160: GO 18196
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_INT 11
18169: PPUSH
18170: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_INT 14
18181: PPUSH
18182: CALL_OW 207
// ruLab2 = building ;
18186: LD_ADDR_EXP 31
18190: PUSH
18191: LD_VAR 0 1
18195: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
18196: LD_INT 3
18198: PPUSH
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_INT 3
18206: PPUSH
18207: CALL 11518 0 3
// if ruDestroyedBuildings > 0 then
18211: LD_EXP 41
18215: PUSH
18216: LD_INT 0
18218: GREATER
18219: IFFALSE 18293
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18221: LD_ADDR_EXP 41
18225: PUSH
18226: LD_EXP 41
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL_OW 3
18238: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18239: LD_ADDR_EXP 41
18243: PUSH
18244: LD_EXP 41
18248: PPUSH
18249: LD_INT 1
18251: PPUSH
18252: CALL_OW 3
18256: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18257: LD_ADDR_EXP 41
18261: PUSH
18262: LD_EXP 41
18266: PPUSH
18267: LD_INT 1
18269: PPUSH
18270: CALL_OW 3
18274: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18275: LD_ADDR_EXP 41
18279: PUSH
18280: LD_EXP 41
18284: PPUSH
18285: LD_INT 1
18287: PPUSH
18288: CALL_OW 3
18292: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
18293: LD_VAR 0 1
18297: PPUSH
18298: CALL_OW 266
18302: PUSH
18303: LD_INT 32
18305: EQUAL
18306: IFFALSE 18343
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18308: LD_VAR 0 1
18312: PPUSH
18313: LD_INT 44
18315: PUSH
18316: LD_INT 45
18318: PUSH
18319: LD_INT 46
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 1
18329: PPUSH
18330: LD_INT 3
18332: PPUSH
18333: CALL_OW 12
18337: ARRAY
18338: PPUSH
18339: CALL_OW 208
// if GetBType ( building ) = b_turret then
18343: LD_VAR 0 1
18347: PPUSH
18348: CALL_OW 266
18352: PUSH
18353: LD_INT 33
18355: EQUAL
18356: IFFALSE 18393
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18358: LD_VAR 0 1
18362: PPUSH
18363: LD_INT 44
18365: PUSH
18366: LD_INT 46
18368: PUSH
18369: LD_INT 46
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 1
18379: PPUSH
18380: LD_INT 3
18382: PPUSH
18383: CALL_OW 12
18387: ARRAY
18388: PPUSH
18389: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18393: LD_VAR 0 1
18397: PPUSH
18398: CALL_OW 266
18402: PUSH
18403: LD_INT 24
18405: EQUAL
18406: IFFALSE 18416
// russianAI = 1 ;
18408: LD_ADDR_EXP 38
18412: PUSH
18413: LD_INT 1
18415: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18416: LD_VAR 0 1
18420: PPUSH
18421: CALL_OW 255
18425: PUSH
18426: LD_INT 2
18428: EQUAL
18429: IFFALSE 18987
// begin if GetBType ( building ) = b_depot then
18431: LD_VAR 0 1
18435: PPUSH
18436: CALL_OW 266
18440: PUSH
18441: LD_INT 0
18443: EQUAL
18444: IFFALSE 18530
// begin arDepot = building ;
18446: LD_ADDR_EXP 42
18450: PUSH
18451: LD_VAR 0 1
18455: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18456: LD_INT 38
18458: PUSH
18459: LD_INT 47
18461: PUSH
18462: EMPTY
18463: LIST
18464: LIST
18465: PPUSH
18466: LD_INT 71
18468: PPUSH
18469: LD_INT 19
18471: PPUSH
18472: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18476: LD_VAR 0 1
18480: PPUSH
18481: CALL_OW 274
18485: PPUSH
18486: LD_INT 1
18488: PPUSH
18489: LD_INT 500
18491: PPUSH
18492: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18496: LD_VAR 0 1
18500: PPUSH
18501: CALL_OW 274
18505: PPUSH
18506: LD_INT 3
18508: PPUSH
18509: LD_INT 30
18511: PPUSH
18512: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18516: LD_EXP 26
18520: PPUSH
18521: LD_EXP 42
18525: PPUSH
18526: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18530: LD_VAR 0 1
18534: PPUSH
18535: CALL_OW 266
18539: PUSH
18540: LD_INT 6
18542: EQUAL
18543: PUSH
18544: LD_VAR 0 1
18548: PPUSH
18549: CALL_OW 266
18553: PUSH
18554: LD_INT 9
18556: EQUAL
18557: OR
18558: IFFALSE 18609
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_INT 10
18567: PPUSH
18568: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18572: LD_VAR 0 1
18576: PPUSH
18577: LD_INT 11
18579: PPUSH
18580: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
18584: LD_INT 2
18586: PPUSH
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_INT 2
18594: PPUSH
18595: CALL 11518 0 3
// arLab = building ;
18599: LD_ADDR_EXP 43
18603: PUSH
18604: LD_VAR 0 1
18608: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18609: LD_VAR 0 1
18613: PPUSH
18614: CALL_OW 266
18618: PUSH
18619: LD_INT 2
18621: EQUAL
18622: PUSH
18623: LD_VAR 0 1
18627: PPUSH
18628: CALL_OW 266
18632: PUSH
18633: LD_INT 4
18635: EQUAL
18636: OR
18637: IFFALSE 18648
// ComUpgrade ( building ) ;
18639: LD_VAR 0 1
18643: PPUSH
18644: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
18648: LD_VAR 0 1
18652: PPUSH
18653: CALL_OW 266
18657: PUSH
18658: LD_INT 31
18660: EQUAL
18661: PUSH
18662: LD_INT 22
18664: PUSH
18665: LD_INT 2
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 25
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 3
18684: PUSH
18685: LD_INT 54
18687: PUSH
18688: EMPTY
18689: LIST
18690: PUSH
18691: LD_INT 3
18693: PUSH
18694: LD_INT 60
18696: PUSH
18697: EMPTY
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: LIST
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: LIST
18713: PPUSH
18714: CALL_OW 69
18718: PUSH
18719: LD_INT 0
18721: GREATER
18722: AND
18723: IFFALSE 18795
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
18725: LD_INT 22
18727: PUSH
18728: LD_INT 2
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 25
18737: PUSH
18738: LD_INT 1
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: LD_INT 3
18747: PUSH
18748: LD_INT 54
18750: PUSH
18751: EMPTY
18752: LIST
18753: PUSH
18754: LD_INT 3
18756: PUSH
18757: LD_INT 60
18759: PUSH
18760: EMPTY
18761: LIST
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PUSH
18767: EMPTY
18768: LIST
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: PPUSH
18777: CALL_OW 69
18781: PUSH
18782: LD_INT 1
18784: ARRAY
18785: PPUSH
18786: LD_VAR 0 1
18790: PPUSH
18791: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 266
18804: PUSH
18805: LD_INT 27
18807: EQUAL
18808: IFFALSE 18987
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
18810: LD_INT 22
18812: PUSH
18813: LD_INT 2
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: PUSH
18820: LD_INT 30
18822: PUSH
18823: LD_INT 27
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PPUSH
18834: CALL_OW 69
18838: PUSH
18839: LD_INT 2
18841: EQUAL
18842: IFFALSE 18987
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
18844: LD_ADDR_VAR 0 2
18848: PUSH
18849: LD_INT 22
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: PUSH
18859: LD_INT 21
18861: PUSH
18862: LD_INT 1
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: PUSH
18869: LD_INT 25
18871: PUSH
18872: LD_INT 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: LIST
18883: PPUSH
18884: CALL_OW 69
18888: PUSH
18889: LD_INT 1
18891: ARRAY
18892: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
18893: LD_VAR 0 2
18897: PPUSH
18898: LD_INT 92
18900: PPUSH
18901: LD_INT 34
18903: PPUSH
18904: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
18908: LD_VAR 0 2
18912: PPUSH
18913: LD_INT 82
18915: PPUSH
18916: LD_INT 57
18918: PPUSH
18919: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
18923: LD_VAR 0 2
18927: PPUSH
18928: LD_INT 36
18930: PPUSH
18931: LD_INT 28
18933: PPUSH
18934: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
18938: LD_INT 22
18940: PUSH
18941: LD_INT 2
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PUSH
18948: LD_INT 21
18950: PUSH
18951: LD_INT 1
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: LIST
18972: PPUSH
18973: CALL_OW 69
18977: PPUSH
18978: LD_EXP 42
18982: PPUSH
18983: CALL_OW 180
// end ; end ; end ;
18987: PPOPN 2
18989: END
// on UpgradeComplete ( building ) do var i ;
18990: LD_INT 0
18992: PPUSH
// begin if GetSide ( building ) = 1 then
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 255
19002: PUSH
19003: LD_INT 1
19005: EQUAL
19006: IFFALSE 19206
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19008: LD_INT 22
19010: PUSH
19011: LD_INT 1
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 2
19020: PUSH
19021: LD_INT 30
19023: PUSH
19024: LD_INT 7
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 30
19033: PUSH
19034: LD_INT 8
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 1
19043: PUSH
19044: LD_INT 30
19046: PUSH
19047: LD_INT 11
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 1
19056: PUSH
19057: LD_INT 2
19059: PUSH
19060: LD_INT 30
19062: PUSH
19063: LD_INT 26
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: PUSH
19070: LD_INT 30
19072: PUSH
19073: LD_INT 27
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 30
19082: PUSH
19083: LD_INT 28
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
=======
17036: EMPTY
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: PUSH
17044: LD_INT 0
17046: EQUAL
17047: OR
17048: IFFALSE 16709
// end ; end ; end_of_file
17050: LD_VAR 0 9
17054: RET
// every 0 0$1 trigger russianAI = 1 do
17055: LD_EXP 38
17059: PUSH
17060: LD_INT 1
17062: EQUAL
17063: IFFALSE 17282
17065: GO 17067
17067: DISABLE
// begin enable ;
17068: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
17069: LD_INT 3
17071: PPUSH
17072: LD_EXP 29
17076: PPUSH
17077: CALL 11970 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17081: LD_INT 3
17083: PPUSH
17084: LD_EXP 41
17088: PPUSH
17089: CALL 12277 0 2
// if ruPossition = 1 then
17093: LD_EXP 40
17097: PUSH
17098: LD_INT 1
17100: EQUAL
17101: IFFALSE 17156
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17103: LD_INT 3
17105: PPUSH
17106: LD_INT 13
17108: PPUSH
17109: LD_INT 10
17111: PPUSH
17112: LD_INT 22
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 21
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 8
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PPUSH
17147: CALL_OW 69
17151: PPUSH
17152: CALL 12483 0 4
// if ruPossition = 2 then
17156: LD_EXP 40
17160: PUSH
17161: LD_INT 2
17163: EQUAL
17164: IFFALSE 17219
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17166: LD_INT 3
17168: PPUSH
17169: LD_INT 14
17171: PPUSH
17172: LD_INT 11
17174: PPUSH
17175: LD_INT 22
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 21
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 30
17197: PUSH
17198: LD_INT 8
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PPUSH
17215: CALL 12483 0 4
// if ruPossition = 3 then
17219: LD_EXP 40
17223: PUSH
17224: LD_INT 3
17226: EQUAL
17227: IFFALSE 17282
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17229: LD_INT 3
17231: PPUSH
17232: LD_INT 15
17234: PPUSH
17235: LD_INT 12
17237: PPUSH
17238: LD_INT 22
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 21
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 30
17260: PUSH
17261: LD_INT 8
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: PPUSH
17278: CALL 12483 0 4
// end ;
17282: END
// every 0 0$1 do
17283: GO 17285
17285: DISABLE
// begin enable ;
17286: ENABLE
// if ruPossition = 1 then
17287: LD_EXP 40
17291: PUSH
17292: LD_INT 1
17294: EQUAL
17295: IFFALSE 17307
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
17297: LD_INT 3
17299: PPUSH
17300: LD_INT 10
17302: PPUSH
17303: CALL 11621 0 2
// if ruPossition = 2 then
17307: LD_EXP 40
17311: PUSH
17312: LD_INT 2
17314: EQUAL
17315: IFFALSE 17327
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
17317: LD_INT 3
17319: PPUSH
17320: LD_INT 11
17322: PPUSH
17323: CALL 11621 0 2
// if ruPossition = 3 then
17327: LD_EXP 40
17331: PUSH
17332: LD_INT 3
17334: EQUAL
17335: IFFALSE 17347
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
17337: LD_INT 3
17339: PPUSH
17340: LD_INT 12
17342: PPUSH
17343: CALL 11621 0 2
// IntBazooka ( 3 , 1 ) ;
17347: LD_INT 3
17349: PPUSH
17350: LD_INT 1
17352: PPUSH
17353: CALL 10440 0 2
// IntBazooka ( 6 , 1 ) ;
17357: LD_INT 6
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL 10440 0 2
// end ;
17367: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17368: LD_EXP 38
17372: PUSH
17373: LD_INT 1
17375: EQUAL
17376: PUSH
17377: LD_EXP 34
17381: PPUSH
17382: CALL_OW 302
17386: AND
17387: PUSH
17388: LD_EXP 34
17392: PPUSH
17393: CALL_OW 255
17397: PUSH
17398: LD_INT 3
17400: EQUAL
17401: AND
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 21
17415: PUSH
17416: LD_INT 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 33
17425: PUSH
17426: LD_INT 3
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 69
17442: PUSH
17443: LD_INT 0
17445: EQUAL
17446: AND
17447: IFFALSE 17655
17449: GO 17451
17451: DISABLE
// begin enable ;
17452: ENABLE
// if Difficulty = 1 then
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 1
17460: EQUAL
17461: IFFALSE 17523
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17463: LD_INT 3
17465: PPUSH
17466: LD_EXP 34
17470: PPUSH
17471: LD_INT 5
17473: PPUSH
17474: LD_INT 8
17476: PPUSH
17477: CALL_OW 12
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 43
17487: PUSH
17488: LD_INT 44
17490: PUSH
17491: LD_INT 45
17493: PUSH
17494: LD_INT 46
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: LD_INT 1
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PPUSH
17516: LD_INT 22
17518: PPUSH
17519: CALL 16413 0 8
// if Difficulty = 2 then
17523: LD_OWVAR 67
17527: PUSH
17528: LD_INT 2
17530: EQUAL
17531: IFFALSE 17589
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17533: LD_INT 3
17535: PPUSH
17536: LD_EXP 34
17540: PPUSH
17541: LD_INT 6
17543: PPUSH
17544: LD_INT 8
17546: PPUSH
17547: CALL_OW 12
17551: PPUSH
17552: LD_INT 1
17554: PPUSH
17555: LD_INT 44
17557: PUSH
17558: LD_INT 45
17560: PUSH
17561: LD_INT 46
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 3
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PPUSH
17582: LD_INT 22
17584: PPUSH
17585: CALL 16413 0 8
// if Difficulty = 3 then
17589: LD_OWVAR 67
17593: PUSH
17594: LD_INT 3
17596: EQUAL
17597: IFFALSE 17655
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17599: LD_INT 3
17601: PPUSH
17602: LD_EXP 34
17606: PPUSH
17607: LD_INT 7
17609: PPUSH
17610: LD_INT 8
17612: PPUSH
17613: CALL_OW 12
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 44
17623: PUSH
17624: LD_INT 45
17626: PUSH
17627: LD_INT 46
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 3
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PPUSH
17648: LD_INT 22
17650: PPUSH
17651: CALL 16413 0 8
// end ; end_of_file
17655: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 255
17665: PUSH
17666: LD_INT 4
17668: EQUAL
17669: IFFALSE 17683
// SetBName ( building , epsilon ) ;
17671: LD_VAR 0 1
17675: PPUSH
17676: LD_STRING epsilon
17678: PPUSH
17679: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 255
17692: PUSH
17693: LD_INT 1
17695: EQUAL
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_INT 0
17709: EQUAL
17710: AND
17711: IFFALSE 17725
// SetBName ( building , epsilon ) ;
17713: LD_VAR 0 1
17717: PPUSH
17718: LD_STRING epsilon
17720: PPUSH
17721: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 255
17734: PUSH
17735: LD_INT 3
17737: EQUAL
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 266
17748: PUSH
17749: LD_INT 0
17751: EQUAL
17752: AND
17753: IFFALSE 17767
// SetBName ( building , chuikov ) ;
17755: LD_VAR 0 1
17759: PPUSH
17760: LD_STRING chuikov
17762: PPUSH
17763: CALL_OW 500
// if GetSide ( building ) = 2 then
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 255
17776: PUSH
17777: LD_INT 2
17779: EQUAL
17780: IFFALSE 17836
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 266
17791: PUSH
17792: LD_INT 6
17794: EQUAL
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 266
17805: PUSH
17806: LD_INT 9
17808: EQUAL
17809: OR
17810: IFFALSE 17836
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17812: LD_VAR 0 1
17816: PPUSH
17817: LD_INT 10
17819: PPUSH
17820: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
17824: LD_VAR 0 1
17828: PPUSH
17829: LD_INT 11
17831: PPUSH
17832: CALL_OW 207
// end ; end ; end ;
17836: PPOPN 2
17838: END
// on BuildingComplete ( building ) do var i ;
17839: LD_INT 0
17841: PPUSH
// begin if GetSide ( building ) = 1 then
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 255
17851: PUSH
17852: LD_INT 1
17854: EQUAL
17855: IFFALSE 18055
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17857: LD_INT 22
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: LD_INT 30
17872: PUSH
17873: LD_INT 7
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 30
17882: PUSH
17883: LD_INT 8
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 11
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 26
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 30
17921: PUSH
17922: LD_INT 27
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 30
17931: PUSH
17932: LD_INT 28
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: PUSH
17969: LD_INT 0
17971: GREATER
17972: PUSH
17973: LD_INT 22
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: LD_INT 30
17988: PUSH
17989: LD_INT 26
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 30
17998: PUSH
17999: LD_INT 27
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 30
18008: PUSH
18009: LD_INT 28
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: CALL_OW 69
18030: PUSH
18031: LD_INT 0
18033: GREATER
18034: AND
18035: PUSH
18036: LD_EXP 54
18040: PUSH
18041: LD_INT 0
18043: EQUAL
18044: AND
18045: IFFALSE 18055
// eventVar1 = 1 ;
18047: LD_ADDR_EXP 54
18051: PUSH
18052: LD_INT 1
18054: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 255
18064: PUSH
18065: LD_INT 3
18067: EQUAL
18068: IFFALSE 18548
// begin if GetBType ( building ) = b_depot then
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 266
18079: PUSH
18080: LD_INT 0
18082: EQUAL
18083: IFFALSE 18155
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 274
18094: PPUSH
18095: LD_INT 1
18097: PPUSH
18098: LD_INT 5000
18100: PPUSH
18101: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: CALL_OW 274
18114: PPUSH
18115: LD_INT 2
18117: PPUSH
18118: LD_INT 5000
18120: PPUSH
18121: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 274
18134: PPUSH
18135: LD_INT 3
18137: PPUSH
18138: LD_INT 5000
18140: PPUSH
18141: CALL_OW 277
// ruDepot = building ;
18145: LD_ADDR_EXP 29
18149: PUSH
18150: LD_VAR 0 1
18154: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 266
18164: PUSH
18165: LD_INT 0
18167: EQUAL
18168: PUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 266
18178: PUSH
18179: LD_INT 2
18181: EQUAL
18182: OR
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 4
18196: EQUAL
18197: OR
18198: IFFALSE 18209
// ComUpgrade ( building ) ;
18200: LD_VAR 0 1
18204: PPUSH
18205: CALL_OW 146
// if GetBType ( building ) = b_lab then
18209: LD_VAR 0 1
18213: PPUSH
18214: CALL_OW 266
18218: PUSH
18219: LD_INT 6
18221: EQUAL
18222: IFFALSE 18425
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
18224: LD_INT 22
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 30
18236: PUSH
18237: LD_INT 8
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PUSH
18253: LD_INT 0
18255: EQUAL
18256: IFFALSE 18294
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18258: LD_VAR 0 1
18262: PPUSH
18263: LD_INT 10
18265: PPUSH
18266: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18270: LD_VAR 0 1
18274: PPUSH
18275: LD_INT 12
18277: PPUSH
18278: CALL_OW 207
// ruLab1 = building ;
18282: LD_ADDR_EXP 30
18286: PUSH
18287: LD_VAR 0 1
18291: ST_TO_ADDR
// end else
18292: GO 18328
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
18294: LD_VAR 0 1
18298: PPUSH
18299: LD_INT 11
18301: PPUSH
18302: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: LD_INT 14
18313: PPUSH
18314: CALL_OW 207
// ruLab2 = building ;
18318: LD_ADDR_EXP 31
18322: PUSH
18323: LD_VAR 0 1
18327: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
18328: LD_INT 3
18330: PPUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: CALL 11536 0 3
// if ruDestroyedBuildings > 0 then
18343: LD_EXP 41
18347: PUSH
18348: LD_INT 0
18350: GREATER
18351: IFFALSE 18425
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18353: LD_ADDR_EXP 41
18357: PUSH
18358: LD_EXP 41
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 3
18370: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18371: LD_ADDR_EXP 41
18375: PUSH
18376: LD_EXP 41
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: CALL_OW 3
18388: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18389: LD_ADDR_EXP 41
18393: PUSH
18394: LD_EXP 41
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: CALL_OW 3
18406: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18407: LD_ADDR_EXP 41
18411: PUSH
18412: LD_EXP 41
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: CALL_OW 3
18424: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 266
18434: PUSH
18435: LD_INT 32
18437: EQUAL
18438: IFFALSE 18475
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18440: LD_VAR 0 1
18444: PPUSH
18445: LD_INT 44
18447: PUSH
18448: LD_INT 45
18450: PUSH
18451: LD_INT 46
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PPUSH
18462: LD_INT 3
18464: PPUSH
18465: CALL_OW 12
18469: ARRAY
18470: PPUSH
18471: CALL_OW 208
// if GetBType ( building ) = b_turret then
18475: LD_VAR 0 1
18479: PPUSH
18480: CALL_OW 266
18484: PUSH
18485: LD_INT 33
18487: EQUAL
18488: IFFALSE 18525
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18490: LD_VAR 0 1
18494: PPUSH
18495: LD_INT 44
18497: PUSH
18498: LD_INT 46
18500: PUSH
18501: LD_INT 46
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PPUSH
18512: LD_INT 3
18514: PPUSH
18515: CALL_OW 12
18519: ARRAY
18520: PPUSH
18521: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 266
18534: PUSH
18535: LD_INT 24
18537: EQUAL
18538: IFFALSE 18548
// russianAI = 1 ;
18540: LD_ADDR_EXP 38
18544: PUSH
18545: LD_INT 1
18547: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 255
18557: PUSH
18558: LD_INT 2
18560: EQUAL
18561: IFFALSE 19187
// begin if GetBType ( building ) = b_depot then
18563: LD_VAR 0 1
18567: PPUSH
18568: CALL_OW 266
18572: PUSH
18573: LD_INT 0
18575: EQUAL
18576: IFFALSE 18662
// begin arDepot = building ;
18578: LD_ADDR_EXP 42
18582: PUSH
18583: LD_VAR 0 1
18587: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18588: LD_INT 38
18590: PUSH
18591: LD_INT 47
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: LD_INT 71
18600: PPUSH
18601: LD_INT 19
18603: PPUSH
18604: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18608: LD_VAR 0 1
18612: PPUSH
18613: CALL_OW 274
18617: PPUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_INT 500
18623: PPUSH
18624: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18628: LD_VAR 0 1
18632: PPUSH
18633: CALL_OW 274
18637: PPUSH
18638: LD_INT 3
18640: PPUSH
18641: LD_INT 30
18643: PPUSH
18644: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18648: LD_EXP 26
18652: PPUSH
18653: LD_EXP 42
18657: PPUSH
18658: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 266
18671: PUSH
18672: LD_INT 6
18674: EQUAL
18675: PUSH
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 266
18685: PUSH
18686: LD_INT 9
18688: EQUAL
18689: OR
18690: IFFALSE 18741
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_INT 10
18699: PPUSH
18700: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 11
18711: PPUSH
18712: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
18716: LD_INT 2
18718: PPUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: LD_INT 2
18726: PPUSH
18727: CALL 11536 0 3
// arLab = building ;
18731: LD_ADDR_EXP 43
18735: PUSH
18736: LD_VAR 0 1
18740: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 266
18750: PUSH
18751: LD_INT 2
18753: EQUAL
18754: PUSH
18755: LD_VAR 0 1
18759: PPUSH
18760: CALL_OW 266
18764: PUSH
18765: LD_INT 4
18767: EQUAL
18768: OR
18769: IFFALSE 18780
// ComUpgrade ( building ) ;
18771: LD_VAR 0 1
18775: PPUSH
18776: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 266
18789: PUSH
18790: LD_INT 31
18792: EQUAL
18793: PUSH
18794: LD_INT 22
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 25
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 3
18816: PUSH
18817: LD_INT 54
18819: PUSH
18820: EMPTY
18821: LIST
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: LD_INT 60
18828: PUSH
18829: EMPTY
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: PUSH
18851: LD_INT 0
18853: GREATER
18854: AND
18855: IFFALSE 18927
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
18857: LD_INT 22
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 25
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 54
18882: PUSH
18883: EMPTY
18884: LIST
18885: PUSH
18886: LD_INT 3
18888: PUSH
18889: LD_INT 60
18891: PUSH
18892: EMPTY
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: PUSH
18914: LD_INT 1
18916: ARRAY
18917: PPUSH
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 266
18936: PUSH
18937: LD_INT 27
18939: EQUAL
18940: IFFALSE 19187
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
18942: LD_INT 22
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 27
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PUSH
18971: LD_INT 2
18973: EQUAL
18974: IFFALSE 19187
// begin AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 92 , 34 ) ;
18976: LD_INT 22
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 21
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 69
19015: PUSH
19016: LD_INT 1
19018: ARRAY
19019: PPUSH
19020: LD_INT 92
19022: PPUSH
19023: LD_INT 34
19025: PPUSH
19026: CALL_OW 171
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 82 , 57 ) ;
19030: LD_INT 22
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: PUSH
19070: LD_INT 1
19072: ARRAY
19073: PPUSH
19074: LD_INT 82
19076: PPUSH
19077: LD_INT 57
19079: PPUSH
19080: CALL_OW 171
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 36 , 28 ) ;
19084: LD_INT 22
19086: PUSH
19087: LD_INT 2
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
<<<<<<< HEAD
19093: LIST
19094: LIST
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
=======
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: LD_INT 1
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
<<<<<<< HEAD
19103: LIST
19104: PUSH
19105: EMPTY
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: PUSH
19120: LD_INT 0
19122: GREATER
19123: PUSH
19124: LD_INT 22
19126: PUSH
19127: LD_INT 1
19129: PUSH
19130: EMPTY
19131: LIST
19132: LIST
19133: PUSH
19134: LD_INT 2
19136: PUSH
19137: LD_INT 30
19139: PUSH
19140: LD_INT 26
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 30
19149: PUSH
19150: LD_INT 27
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 30
19159: PUSH
19160: LD_INT 28
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PPUSH
19177: CALL_OW 69
19181: PUSH
19182: LD_INT 0
19184: GREATER
19185: AND
19186: PUSH
19187: LD_EXP 57
19191: PUSH
19192: LD_INT 0
19194: EQUAL
19195: AND
19196: IFFALSE 19206
// eventVar1 = 1 ;
19198: LD_ADDR_EXP 57
19202: PUSH
19203: LD_INT 1
19205: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19206: LD_VAR 0 1
19210: PPUSH
19211: CALL_OW 255
19215: PUSH
19216: LD_INT 2
19218: EQUAL
19219: IFFALSE 19324
// begin if GetBType ( building ) = b_barracks then
19221: LD_VAR 0 1
19225: PPUSH
19226: CALL_OW 266
19230: PUSH
19231: LD_INT 5
19233: EQUAL
19234: IFFALSE 19324
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
19236: LD_ADDR_VAR 0 2
19240: PUSH
19241: LD_INT 22
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: LD_INT 25
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: EMPTY
19258: LIST
19259: LIST
19260: PUSH
19261: LD_INT 3
19263: PUSH
19264: LD_INT 54
19266: PUSH
19267: EMPTY
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: PPUSH
19279: CALL_OW 69
19283: PUSH
19284: LD_EXP 26
19288: PUSH
19289: EMPTY
19290: LIST
19291: DIFF
19292: PUSH
19293: FOR_IN
19294: IFFALSE 19312
// ComEnterUnit ( i , building ) ;
19296: LD_VAR 0 2
19300: PPUSH
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 120
19310: GO 19293
19312: POP
19313: POP
// arArm = building ;
19314: LD_ADDR_EXP 44
19318: PUSH
19319: LD_VAR 0 1
19323: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
19324: LD_VAR 0 1
19328: PPUSH
19329: CALL_OW 255
19333: PUSH
19334: LD_INT 3
19336: EQUAL
19337: IFFALSE 19810
// begin if GetBType ( building ) = b_factory then
19339: LD_VAR 0 1
19343: PPUSH
19344: CALL_OW 266
19348: PUSH
19349: LD_INT 3
19351: EQUAL
19352: IFFALSE 19419
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19354: LD_ADDR_VAR 0 2
19358: PUSH
19359: LD_INT 22
19361: PUSH
19362: LD_INT 3
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 25
19371: PUSH
19372: LD_INT 3
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PPUSH
19383: CALL_OW 69
19387: PUSH
19388: FOR_IN
19389: IFFALSE 19407
// ComEnterUnit ( i , building ) ;
19391: LD_VAR 0 2
19395: PPUSH
19396: LD_VAR 0 1
19400: PPUSH
19401: CALL_OW 120
19405: GO 19388
19407: POP
19408: POP
// ruFab = building ;
19409: LD_ADDR_EXP 34
19413: PUSH
19414: LD_VAR 0 1
19418: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19419: LD_INT 22
19421: PUSH
19422: LD_INT 3
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PUSH
19429: LD_INT 21
19431: PUSH
19432: LD_INT 3
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: PUSH
19439: LD_INT 30
19441: PUSH
19442: LD_INT 8
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 69
19458: PUSH
19459: LD_INT 2
19461: EQUAL
19462: IFFALSE 19670
// begin for i = 1 to 2 do
19464: LD_ADDR_VAR 0 2
19468: PUSH
19469: DOUBLE
19470: LD_INT 1
19472: DEC
19473: ST_TO_ADDR
19474: LD_INT 2
19476: PUSH
19477: FOR_TO
19478: IFFALSE 19565
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19480: LD_INT 22
19482: PUSH
19483: LD_INT 3
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 25
19492: PUSH
19493: LD_INT 4
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: PUSH
19509: LD_VAR 0 2
19513: ARRAY
19514: PPUSH
19515: LD_INT 22
19517: PUSH
19518: LD_INT 3
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PUSH
19525: LD_INT 21
19527: PUSH
19528: LD_INT 3
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 30
19537: PUSH
19538: LD_INT 8
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: LIST
19549: PPUSH
19550: CALL_OW 69
19554: PUSH
19555: LD_INT 1
19557: ARRAY
19558: PPUSH
19559: CALL_OW 120
19563: GO 19477
19565: POP
19566: POP
// for i = 3 to 4 do
19567: LD_ADDR_VAR 0 2
19571: PUSH
19572: DOUBLE
19573: LD_INT 3
19575: DEC
19576: ST_TO_ADDR
19577: LD_INT 4
19579: PUSH
19580: FOR_TO
19581: IFFALSE 19668
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
19583: LD_INT 22
19585: PUSH
19586: LD_INT 3
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 25
19595: PUSH
19596: LD_INT 4
19598: PUSH
19599: EMPTY
19600: LIST
19601: LIST
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: PPUSH
19607: CALL_OW 69
19611: PUSH
19612: LD_VAR 0 2
19616: ARRAY
19617: PPUSH
19618: LD_INT 22
19620: PUSH
19621: LD_INT 3
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PUSH
19628: LD_INT 21
19630: PUSH
19631: LD_INT 3
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PUSH
19638: LD_INT 30
19640: PUSH
19641: LD_INT 8
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: PPUSH
19653: CALL_OW 69
19657: PUSH
19658: LD_INT 2
19660: ARRAY
19661: PPUSH
19662: CALL_OW 120
19666: GO 19580
19668: POP
19669: POP
// end ; if GetBType ( building ) = b_barracks then
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 266
19679: PUSH
19680: LD_INT 5
19682: EQUAL
19683: IFFALSE 19810
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: LD_INT 22
19692: PUSH
19693: LD_INT 3
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 25
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: LD_INT 54
19715: PUSH
19716: EMPTY
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19752
// ComEnterUnit ( i , building ) ;
19736: LD_VAR 0 2
19740: PPUSH
19741: LD_VAR 0 1
19745: PPUSH
19746: CALL_OW 120
19750: GO 19733
19752: POP
19753: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
19754: LD_INT 22
19756: PUSH
19757: LD_INT 3
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 30
19766: PUSH
19767: LD_INT 5
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 69
19782: PUSH
19783: LD_INT 0
19785: EQUAL
19786: IFFALSE 19800
// ruArm1 = building else
19788: LD_ADDR_EXP 32
19792: PUSH
19793: LD_VAR 0 1
19797: ST_TO_ADDR
19798: GO 19810
// ruArm2 = building ;
19800: LD_ADDR_EXP 33
19804: PUSH
19805: LD_VAR 0 1
19809: ST_TO_ADDR
// end ; end ; end ;
19810: PPOPN 2
19812: END
// on EnterBuilding ( building , human ) do var rnd ;
19813: LD_INT 0
19815: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
19816: LD_VAR 0 2
19820: PPUSH
19821: CALL_OW 255
19825: PUSH
19826: LD_INT 2
19828: EQUAL
19829: PUSH
19830: LD_VAR 0 2
19834: PPUSH
19835: CALL_OW 257
19839: PUSH
19840: LD_INT 1
19842: EQUAL
19843: AND
19844: PUSH
19845: LD_VAR 0 1
19849: PUSH
19850: LD_EXP 44
19854: EQUAL
19855: AND
19856: IFFALSE 19903
// begin wait ( 0 0$1 ) ;
19858: LD_INT 35
19860: PPUSH
19861: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
19865: LD_ADDR_VAR 0 3
19869: PUSH
19870: LD_INT 1
19872: PPUSH
19873: LD_INT 100
19875: PPUSH
19876: CALL_OW 12
19880: ST_TO_ADDR
// if rnd > 50 then
19881: LD_VAR 0 3
19885: PUSH
19886: LD_INT 50
19888: GREATER
19889: IFFALSE 19903
// SetClass ( human , class_mortar ) ;
19891: LD_VAR 0 2
19895: PPUSH
19896: LD_INT 8
19898: PPUSH
19899: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
19903: LD_VAR 0 2
19907: PPUSH
19908: CALL_OW 255
19912: PUSH
19913: LD_INT 3
19915: EQUAL
19916: PUSH
19917: LD_VAR 0 2
19921: PPUSH
19922: CALL_OW 257
19926: PUSH
19927: LD_INT 1
19929: EQUAL
19930: AND
19931: PUSH
19932: LD_VAR 0 1
19936: PUSH
19937: LD_EXP 32
19941: EQUAL
19942: PUSH
19943: LD_VAR 0 1
19947: PUSH
19948: LD_EXP 33
19952: EQUAL
19953: OR
19954: PUSH
19955: EMPTY
19956: LIST
19957: AND
19958: IFFALSE 19979
// begin wait ( 0 0$1 ) ;
19960: LD_INT 35
19962: PPUSH
19963: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
19967: LD_VAR 0 2
19971: PPUSH
19972: LD_INT 9
19974: PPUSH
19975: CALL_OW 336
// end ; end ;
19979: PPOPN 3
19981: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
19982: LD_VAR 0 1
19986: PUSH
19987: LD_INT 1
19989: EQUAL
19990: PUSH
19991: LD_VAR 0 2
19995: PUSH
19996: LD_INT 2
19998: EQUAL
19999: AND
20000: PUSH
20001: LD_INT 1
20003: PPUSH
20004: LD_INT 2
20006: PPUSH
20007: CALL_OW 81
20011: PUSH
20012: LD_INT 1
20014: EQUAL
20015: AND
20016: IFFALSE 20037
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20018: LD_EXP 24
20022: PPUSH
20023: LD_STRING D6b-Pow-1
20025: PPUSH
20026: CALL_OW 94
// YouLost ( Powell ) ;
20030: LD_STRING Powell
20032: PPUSH
20033: CALL_OW 104
// end ; end ;
20037: PPOPN 2
20039: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 2 ) and GetAttitude ( 1 , 2 ) = att_friend do
20040: LD_INT 23
20042: PPUSH
20043: LD_INT 22
20045: PUSH
20046: LD_INT 1
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: LD_INT 21
20055: PUSH
20056: LD_INT 3
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: PUSH
20063: EMPTY
20064: LIST
20065: LIST
20066: PPUSH
20067: CALL_OW 70
20071: PUSH
20072: LD_INT 23
20074: PPUSH
20075: LD_INT 22
20077: PUSH
20078: LD_INT 1
20080: PUSH
20081: EMPTY
20082: LIST
20083: LIST
20084: PUSH
20085: LD_INT 21
20087: PUSH
20088: LD_INT 2
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 58
20097: PUSH
20098: EMPTY
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 70
20110: PUSH
20111: LD_INT 2
20113: GREATER
20114: OR
20115: PUSH
20116: LD_INT 1
20118: PPUSH
20119: LD_INT 2
20121: PPUSH
20122: CALL_OW 81
20126: PUSH
20127: LD_INT 1
20129: EQUAL
20130: AND
20131: IFFALSE 20155
20133: GO 20135
20135: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20136: LD_EXP 24
20140: PPUSH
20141: LD_STRING D6b-Pow-1
20143: PPUSH
20144: CALL_OW 94
// YouLost ( Powell ) ;
20148: LD_STRING Powell
20150: PPUSH
20151: CALL_OW 104
// end ;
20155: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
20156: LD_VAR 0 1
20160: PUSH
20161: LD_EXP 1
20165: EQUAL
20166: IFFALSE 20175
// YouLost ( JMM ) ;
20168: LD_STRING JMM
20170: PPUSH
20171: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20175: LD_VAR 0 1
20179: PPUSH
20180: CALL_OW 255
20184: PUSH
20185: LD_INT 3
20187: EQUAL
20188: PUSH
20189: LD_VAR 0 1
20193: PPUSH
20194: CALL_OW 247
20198: PUSH
20199: LD_INT 3
20201: EQUAL
20202: AND
20203: IFFALSE 20895
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20205: LD_VAR 0 1
20209: PPUSH
20210: CALL_OW 266
20214: PUSH
20215: LD_INT 31
20217: EQUAL
20218: PUSH
20219: LD_VAR 0 1
20223: PPUSH
20224: CALL_OW 266
20228: PUSH
20229: LD_INT 32
20231: EQUAL
20232: OR
20233: PUSH
20234: LD_VAR 0 1
20238: PPUSH
20239: CALL_OW 266
20243: PUSH
20244: LD_INT 36
20246: EQUAL
20247: OR
20248: PUSH
20249: LD_VAR 0 1
20253: PPUSH
20254: CALL_OW 266
20258: PUSH
20259: LD_INT 0
20261: EQUAL
20262: OR
20263: PUSH
20264: LD_VAR 0 1
20268: PPUSH
20269: CALL_OW 266
20273: PUSH
20274: LD_INT 24
20276: EQUAL
20277: OR
20278: PUSH
20279: LD_VAR 0 1
20283: PPUSH
20284: CALL_OW 266
20288: PUSH
20289: LD_INT 17
20291: EQUAL
20292: OR
20293: PUSH
20294: LD_VAR 0 1
20298: PPUSH
20299: CALL_OW 266
20303: PUSH
20304: LD_INT 25
20306: EQUAL
20307: OR
20308: PUSH
20309: LD_VAR 0 1
20313: PPUSH
20314: CALL_OW 266
20318: PUSH
20319: LD_INT 19
20321: EQUAL
20322: OR
20323: PUSH
20324: LD_VAR 0 1
20328: PPUSH
20329: CALL_OW 266
20333: PUSH
20334: LD_INT 20
20336: EQUAL
20337: OR
20338: PUSH
20339: LD_VAR 0 1
20343: PPUSH
20344: CALL_OW 266
20348: PUSH
20349: LD_INT 18
20351: EQUAL
20352: OR
20353: PUSH
20354: LD_VAR 0 1
20358: PPUSH
20359: CALL_OW 266
20363: PUSH
20364: LD_INT 21
20366: EQUAL
20367: OR
20368: PUSH
20369: LD_VAR 0 1
20373: PPUSH
20374: CALL_OW 266
20378: PUSH
20379: LD_INT 23
20381: EQUAL
20382: OR
20383: PUSH
20384: LD_VAR 0 1
20388: PPUSH
20389: CALL_OW 266
20393: PUSH
20394: LD_INT 16
20396: EQUAL
20397: OR
20398: PUSH
20399: LD_VAR 0 1
20403: PPUSH
20404: CALL_OW 266
20408: PUSH
20409: LD_INT 6
20411: EQUAL
20412: OR
20413: PUSH
20414: LD_VAR 0 1
20418: PPUSH
20419: CALL_OW 266
20423: PUSH
20424: LD_INT 29
20426: EQUAL
20427: OR
20428: PUSH
20429: LD_VAR 0 1
20433: PPUSH
20434: CALL_OW 266
20438: PUSH
20439: LD_INT 26
20441: EQUAL
20442: OR
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 266
20453: PUSH
20454: LD_INT 30
20456: EQUAL
20457: OR
20458: PUSH
20459: LD_VAR 0 1
20463: PPUSH
20464: CALL_OW 266
20468: PUSH
20469: LD_INT 28
20471: EQUAL
20472: OR
20473: PUSH
20474: LD_VAR 0 1
20478: PPUSH
20479: CALL_OW 266
20483: PUSH
20484: LD_INT 27
20486: EQUAL
20487: OR
20488: PUSH
20489: LD_VAR 0 1
20493: PPUSH
20494: CALL_OW 266
20498: PUSH
20499: LD_INT 33
20501: EQUAL
20502: OR
20503: PUSH
20504: LD_VAR 0 1
20508: PPUSH
20509: CALL_OW 266
20513: PUSH
20514: LD_INT 2
20516: EQUAL
20517: OR
20518: PUSH
20519: LD_VAR 0 1
20523: PPUSH
20524: CALL_OW 266
20528: PUSH
20529: LD_INT 4
20531: EQUAL
20532: OR
20533: IFFALSE 20619
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20535: LD_ADDR_EXP 41
20539: PUSH
20540: LD_EXP 41
20544: PUSH
20545: LD_VAR 0 1
20549: PPUSH
20550: CALL_OW 266
20554: ADD
20555: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20556: LD_ADDR_EXP 41
20560: PUSH
20561: LD_EXP 41
20565: PUSH
20566: LD_VAR 0 1
20570: PPUSH
20571: CALL_OW 250
20575: ADD
20576: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20577: LD_ADDR_EXP 41
20581: PUSH
20582: LD_EXP 41
20586: PUSH
20587: LD_VAR 0 1
20591: PPUSH
20592: CALL_OW 251
20596: ADD
20597: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20598: LD_ADDR_EXP 41
20602: PUSH
20603: LD_EXP 41
20607: PUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 254
20617: ADD
20618: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20619: LD_VAR 0 1
20623: PPUSH
20624: CALL_OW 266
20628: PUSH
20629: LD_INT 1
20631: EQUAL
20632: IFFALSE 20711
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20634: LD_ADDR_EXP 41
20638: PUSH
20639: LD_EXP 41
20643: PUSH
20644: LD_INT 0
20646: ADD
20647: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20648: LD_ADDR_EXP 41
20652: PUSH
20653: LD_EXP 41
20657: PUSH
20658: LD_VAR 0 1
20662: PPUSH
20663: CALL_OW 250
20667: ADD
20668: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20669: LD_ADDR_EXP 41
20673: PUSH
20674: LD_EXP 41
20678: PUSH
20679: LD_VAR 0 1
20683: PPUSH
20684: CALL_OW 251
20688: ADD
20689: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20690: LD_ADDR_EXP 41
20694: PUSH
20695: LD_EXP 41
20699: PUSH
20700: LD_VAR 0 1
20704: PPUSH
20705: CALL_OW 254
20709: ADD
20710: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20711: LD_VAR 0 1
20715: PPUSH
20716: CALL_OW 266
20720: PUSH
20721: LD_INT 3
20723: EQUAL
20724: IFFALSE 20803
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20726: LD_ADDR_EXP 41
20730: PUSH
20731: LD_EXP 41
20735: PUSH
20736: LD_INT 2
20738: ADD
20739: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20740: LD_ADDR_EXP 41
20744: PUSH
20745: LD_EXP 41
20749: PUSH
20750: LD_VAR 0 1
20754: PPUSH
20755: CALL_OW 250
20759: ADD
20760: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20761: LD_ADDR_EXP 41
20765: PUSH
20766: LD_EXP 41
20770: PUSH
20771: LD_VAR 0 1
20775: PPUSH
20776: CALL_OW 251
20780: ADD
20781: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20782: LD_ADDR_EXP 41
20786: PUSH
20787: LD_EXP 41
20791: PUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 254
20801: ADD
20802: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20803: LD_VAR 0 1
20807: PPUSH
20808: CALL_OW 266
20812: PUSH
20813: LD_INT 5
20815: EQUAL
20816: IFFALSE 20895
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20818: LD_ADDR_EXP 41
20822: PUSH
20823: LD_EXP 41
20827: PUSH
20828: LD_INT 4
20830: ADD
20831: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20832: LD_ADDR_EXP 41
20836: PUSH
20837: LD_EXP 41
20841: PUSH
20842: LD_VAR 0 1
20846: PPUSH
20847: CALL_OW 250
20851: ADD
20852: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20853: LD_ADDR_EXP 41
20857: PUSH
20858: LD_EXP 41
20862: PUSH
20863: LD_VAR 0 1
20867: PPUSH
20868: CALL_OW 251
20872: ADD
20873: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20874: LD_ADDR_EXP 41
20878: PUSH
20879: LD_EXP 41
20883: PUSH
20884: LD_VAR 0 1
20888: PPUSH
20889: CALL_OW 254
20893: ADD
20894: ST_TO_ADDR
// end ; end ; end ;
20895: PPOPN 1
20897: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
20898: LD_ADDR_OWVAR 57
20902: PUSH
20903: LD_INT 0
20905: ST_TO_ADDR
// fastEnd = 1 ;
20906: LD_ADDR_EXP 56
20910: PUSH
20911: LD_INT 1
20913: ST_TO_ADDR
// FinishMission ;
20914: CALL 22030 0 0
// end ; end_of_file
20918: PPOPN 1
20920: END
// export function PrepareNature ; var i , un ; begin
20921: LD_INT 0
20923: PPUSH
20924: PPUSH
20925: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: DOUBLE
20932: LD_INT 1
20934: DEC
20935: ST_TO_ADDR
20936: LD_OWVAR 67
20940: PUSH
20941: LD_INT 1
20943: PPUSH
20944: LD_INT 5
20946: PPUSH
20947: CALL_OW 12
20951: PLUS
20952: PUSH
20953: FOR_TO
20954: IFFALSE 21099
// begin hc_sex = sex_male ;
20956: LD_ADDR_OWVAR 27
20960: PUSH
20961: LD_INT 1
20963: ST_TO_ADDR
// uc_side = 0 ;
20964: LD_ADDR_OWVAR 20
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// uc_nation = nation_nature ;
20972: LD_ADDR_OWVAR 21
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
// hc_class = class_apeman ;
20980: LD_ADDR_OWVAR 28
20984: PUSH
20985: LD_INT 12
20987: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
20988: LD_ADDR_OWVAR 31
20992: PUSH
20993: LD_INT 2
20995: PPUSH
20996: LD_INT 7
20998: PPUSH
20999: CALL_OW 12
21003: PUSH
21004: LD_OWVAR 67
21008: PLUS
21009: PUSH
21010: LD_INT 2
21012: PPUSH
21013: LD_INT 10
21015: PPUSH
21016: CALL_OW 12
21020: PUSH
21021: LD_INT 2
21023: PPUSH
21024: LD_INT 10
21026: PPUSH
21027: CALL_OW 12
21031: PUSH
21032: LD_INT 2
21034: PPUSH
21035: LD_INT 10
21037: PPUSH
21038: CALL_OW 12
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21049: LD_ADDR_OWVAR 35
21053: PUSH
21054: LD_INT 5
21056: NEG
21057: PPUSH
21058: LD_INT 5
21060: PPUSH
21061: CALL_OW 12
21065: PUSH
21066: LD_OWVAR 67
21070: MUL
21071: ST_TO_ADDR
// un = CreateHuman ;
21072: LD_ADDR_VAR 0 3
21076: PUSH
21077: CALL_OW 44
21081: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21082: LD_VAR 0 3
21086: PPUSH
21087: LD_INT 5
21089: PPUSH
21090: LD_INT 0
21092: PPUSH
21093: CALL_OW 49
// end ;
21097: GO 20953
21099: POP
21100: POP
// for i = 1 to Difficulty + 2 do
21101: LD_ADDR_VAR 0 2
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_OWVAR 67
21115: PUSH
21116: LD_INT 2
21118: PLUS
21119: PUSH
21120: FOR_TO
21121: IFFALSE 21230
// begin hc_sex = sex_male ;
21123: LD_ADDR_OWVAR 27
21127: PUSH
21128: LD_INT 1
21130: ST_TO_ADDR
// uc_side = 0 ;
21131: LD_ADDR_OWVAR 20
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// uc_nation = nation_nature ;
21139: LD_ADDR_OWVAR 21
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// hc_class = class_tiger ;
21147: LD_ADDR_OWVAR 28
21151: PUSH
21152: LD_INT 14
21154: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21155: LD_ADDR_OWVAR 31
21159: PUSH
21160: LD_EXP 36
21164: PUSH
21165: LD_INT 0
21167: PUSH
21168: LD_INT 0
21170: PUSH
21171: LD_INT 0
21173: PUSH
21174: EMPTY
21175: LIST
21176: LIST
21177: LIST
21178: LIST
21179: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21180: LD_ADDR_OWVAR 35
21184: PUSH
21185: LD_INT 5
21187: NEG
21188: PPUSH
21189: LD_INT 5
21191: PPUSH
21192: CALL_OW 12
21196: PUSH
21197: LD_OWVAR 67
21201: MUL
21202: ST_TO_ADDR
// un = CreateHuman ;
21203: LD_ADDR_VAR 0 3
21207: PUSH
21208: CALL_OW 44
21212: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21213: LD_VAR 0 3
21217: PPUSH
21218: LD_INT 6
21220: PPUSH
21221: LD_INT 0
21223: PPUSH
21224: CALL_OW 49
// end ;
21228: GO 21120
21230: POP
21231: POP
// for i = 1 to rand ( 3 , 4 ) do
21232: LD_ADDR_VAR 0 2
21236: PUSH
21237: DOUBLE
21238: LD_INT 1
21240: DEC
21241: ST_TO_ADDR
21242: LD_INT 3
21244: PPUSH
21245: LD_INT 4
21247: PPUSH
21248: CALL_OW 12
21252: PUSH
21253: FOR_TO
21254: IFFALSE 21348
// begin hc_sex = sex_male ;
21256: LD_ADDR_OWVAR 27
21260: PUSH
21261: LD_INT 1
21263: ST_TO_ADDR
// uc_side = 0 ;
21264: LD_ADDR_OWVAR 20
21268: PUSH
21269: LD_INT 0
21271: ST_TO_ADDR
// uc_nation = nation_nature ;
21272: LD_ADDR_OWVAR 21
21276: PUSH
21277: LD_INT 0
21279: ST_TO_ADDR
// hc_class = 18 ;
21280: LD_ADDR_OWVAR 28
21284: PUSH
21285: LD_INT 18
21287: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21288: LD_ADDR_OWVAR 31
21292: PUSH
21293: LD_EXP 36
21297: PUSH
21298: LD_INT 0
21300: PUSH
21301: LD_INT 0
21303: PUSH
21304: LD_INT 0
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: ST_TO_ADDR
// hc_agressivity = 0 ;
21313: LD_ADDR_OWVAR 35
21317: PUSH
21318: LD_INT 0
21320: ST_TO_ADDR
// un = CreateHuman ;
21321: LD_ADDR_VAR 0 3
21325: PUSH
21326: CALL_OW 44
21330: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21331: LD_VAR 0 3
21335: PPUSH
21336: LD_INT 6
21338: PPUSH
21339: LD_INT 0
21341: PPUSH
21342: CALL_OW 49
// end ;
21346: GO 21253
21348: POP
21349: POP
// end ; end_of_file
21350: LD_VAR 0 1
21354: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
21355: LD_EXP 45
21359: PUSH
21360: LD_INT 1
21362: EQUAL
21363: IFFALSE 21447
21365: GO 21367
21367: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 6 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
21368: LD_INT 7
21370: PPUSH
21371: LD_INT 5
21373: PPUSH
21374: LD_INT 6
21376: PUSH
21377: LD_INT 8
21379: PUSH
21380: LD_INT 9
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: LIST
21387: PUSH
21388: LD_OWVAR 67
21392: ARRAY
21393: PPUSH
21394: LD_EXP 35
21398: PPUSH
21399: LD_EXP 36
21403: PPUSH
21404: CALL_OW 12
21408: PPUSH
21409: LD_INT 2
21411: PPUSH
21412: LD_INT 1
21414: PPUSH
21415: LD_INT 1
21417: PPUSH
21418: EMPTY
21419: PPUSH
21420: LD_INT 25
21422: PUSH
21423: LD_INT 26
21425: PUSH
21426: LD_INT 27
21428: PUSH
21429: LD_INT 28
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: PPUSH
21438: EMPTY
21439: PPUSH
21440: LD_INT 1
21442: PPUSH
21443: CALL 12966 0 11
21447: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
21448: LD_EXP 45
21452: PUSH
21453: LD_INT 1
21455: EQUAL
21456: IFFALSE 21544
21458: GO 21460
21460: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 9 , 10 , 12 ] [ Difficulty ] , 0 , 0 , [ 3 , 5 , 6 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21461: LD_INT 5
21463: PPUSH
21464: LD_INT 2
21466: PPUSH
21467: LD_INT 9
21469: PUSH
21470: LD_INT 10
21472: PUSH
21473: LD_INT 12
21475: PUSH
21476: EMPTY
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: LD_OWVAR 67
21485: ARRAY
21486: PPUSH
21487: LD_INT 0
21489: PPUSH
21490: LD_INT 0
21492: PPUSH
21493: LD_INT 3
21495: PUSH
21496: LD_INT 5
21498: PUSH
21499: LD_INT 6
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: LD_OWVAR 67
21511: ARRAY
21512: PPUSH
21513: LD_INT 0
21515: PPUSH
21516: LD_EXP 35
21520: PPUSH
21521: LD_EXP 36
21525: PPUSH
21526: CALL_OW 12
21530: PPUSH
21531: LD_INT 7
21533: PPUSH
21534: LD_INT 9
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL 14686 0 11
21544: END
// every 6 6$30 + 3 3$0 trigger joinEpsilon = 1 do
21545: LD_EXP 28
21549: PUSH
21550: LD_INT 1
21552: EQUAL
21553: IFFALSE 21616
21555: GO 21557
21557: DISABLE
// begin enable ;
21558: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , 0 , 0 , ru_sold_counter div 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21559: LD_INT 6
21561: PPUSH
21562: LD_INT 3
21564: PPUSH
21565: LD_EXP 54
21569: PPUSH
21570: LD_INT 0
21572: PPUSH
21573: LD_INT 0
21575: PPUSH
21576: LD_INT 0
21578: PPUSH
21579: LD_EXP 54
21583: PUSH
21584: LD_INT 3
21586: DIV
21587: PPUSH
21588: LD_EXP 35
21592: PPUSH
21593: LD_EXP 36
21597: PPUSH
21598: CALL_OW 12
21602: PPUSH
21603: LD_INT 17
21605: PPUSH
21606: LD_INT 18
21608: PPUSH
21609: LD_INT 1
21611: PPUSH
21612: CALL 14686 0 11
// end ;
21616: END
// every 6 6$30 + 3 3$0 trigger joinEpsilon = 1 do
21617: LD_EXP 28
21621: PUSH
21622: LD_INT 1
21624: EQUAL
21625: IFFALSE 21702
21627: GO 21629
21629: DISABLE
// begin enable ;
21630: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21631: LD_INT 17
21633: PPUSH
21634: LD_INT 6
21636: PPUSH
21637: LD_EXP 53
21641: PPUSH
21642: LD_EXP 35
21646: PPUSH
21647: LD_EXP 36
21651: PPUSH
21652: CALL_OW 12
21656: PPUSH
21657: LD_INT 3
21659: PPUSH
21660: LD_INT 1
21662: PPUSH
21663: LD_INT 1
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: PPUSH
21673: LD_INT 43
21675: PUSH
21676: LD_INT 44
21678: PUSH
21679: LD_INT 45
21681: PUSH
21682: LD_INT 46
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: LIST
21690: PPUSH
21691: EMPTY
21692: PPUSH
21693: EMPTY
21694: PPUSH
21695: LD_INT 1
21697: PPUSH
21698: CALL 12966 0 11
// end ;
21702: END
// every 10 10$00 trigger joinEpsilon do
21703: LD_EXP 28
21707: IFFALSE 21741
21709: GO 21711
21711: DISABLE
// begin enable ;
21712: ENABLE
// ru_vehs_counter := ru_vehs_counter + 3 ;
21713: LD_ADDR_EXP 53
21717: PUSH
21718: LD_EXP 53
21722: PUSH
21723: LD_INT 3
21725: PLUS
21726: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + 3 ;
21727: LD_ADDR_EXP 54
21731: PUSH
21732: LD_EXP 54
21736: PUSH
21737: LD_INT 3
21739: PLUS
21740: ST_TO_ADDR
// end ; end_of_file
21741: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 do
21742: LD_INT 54
21744: PPUSH
21745: LD_INT 1
21747: PPUSH
21748: CALL_OW 321
21752: PUSH
21753: LD_INT 2
21755: EQUAL
21756: PUSH
21757: LD_INT 55
21759: PPUSH
21760: LD_INT 1
21762: PPUSH
21763: CALL_OW 321
21767: PUSH
21768: LD_INT 2
21770: EQUAL
21771: AND
21772: PUSH
21773: LD_INT 21
21775: PPUSH
21776: LD_INT 1
21778: PPUSH
21779: CALL_OW 321
21783: PUSH
21784: LD_INT 2
21786: EQUAL
21787: AND
21788: PUSH
21789: LD_INT 22
21791: PPUSH
21792: LD_INT 1
21794: PPUSH
21795: CALL_OW 321
21799: PUSH
21800: LD_INT 2
21802: EQUAL
21803: AND
21804: PUSH
21805: LD_INT 12
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: CALL_OW 321
21815: PUSH
21816: LD_INT 1
21818: EQUAL
21819: PUSH
21820: LD_INT 32
21822: PPUSH
21823: LD_INT 1
21825: PPUSH
21826: CALL_OW 321
21830: PUSH
21831: LD_INT 1
21833: EQUAL
21834: OR
21835: PUSH
21836: EMPTY
21837: LIST
21838: AND
21839: PUSH
21840: LD_EXP 47
21844: PUSH
21845: LD_INT 1
21847: EQUAL
21848: AND
21849: IFFALSE 21905
21851: GO 21853
21853: DISABLE
// begin case query ( QEndMission ) of 1 :
21854: LD_STRING QEndMission
21856: PPUSH
21857: CALL_OW 97
21861: PUSH
21862: LD_INT 1
21864: DOUBLE
21865: EQUAL
21866: IFTRUE 21870
21868: GO 21881
21870: POP
// begin end_the_mission_allowed = true ;
21871: LD_ADDR_OWVAR 57
21875: PUSH
21876: LD_INT 1
21878: ST_TO_ADDR
// end ; 2 :
21879: GO 21905
21881: LD_INT 2
21883: DOUBLE
21884: EQUAL
21885: IFTRUE 21889
21887: GO 21904
21889: POP
// begin fastEnd = 1 ;
21890: LD_ADDR_EXP 56
21894: PUSH
21895: LD_INT 1
21897: ST_TO_ADDR
// FinishMission ;
21898: CALL 22030 0 0
// end ; end ;
21902: GO 21905
21904: POP
// end ;
21905: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 do
21906: LD_INT 54
21908: PPUSH
21909: LD_INT 1
21911: PPUSH
21912: CALL_OW 321
21916: PUSH
21917: LD_INT 2
21919: EQUAL
21920: PUSH
21921: LD_INT 55
21923: PPUSH
21924: LD_INT 1
21926: PPUSH
21927: CALL_OW 321
21931: PUSH
21932: LD_INT 2
21934: EQUAL
21935: AND
21936: PUSH
21937: LD_INT 21
21939: PPUSH
21940: LD_INT 1
21942: PPUSH
21943: CALL_OW 321
21947: PUSH
21948: LD_INT 2
21950: EQUAL
21951: AND
21952: PUSH
21953: LD_INT 22
21955: PPUSH
21956: LD_INT 1
21958: PPUSH
21959: CALL_OW 321
21963: PUSH
21964: LD_INT 2
21966: EQUAL
21967: AND
21968: PUSH
21969: LD_INT 12
21971: PPUSH
21972: LD_INT 1
21974: PPUSH
21975: CALL_OW 321
21979: PUSH
21980: LD_INT 2
21982: EQUAL
21983: AND
21984: PUSH
21985: LD_INT 32
21987: PPUSH
21988: LD_INT 1
21990: PPUSH
21991: CALL_OW 321
21995: PUSH
21996: LD_INT 2
21998: EQUAL
21999: AND
22000: PUSH
22001: LD_EXP 56
22005: PUSH
22006: LD_INT 0
22008: EQUAL
22009: AND
22010: PUSH
22011: LD_EXP 47
22015: PUSH
22016: LD_INT 1
22018: EQUAL
22019: AND
22020: IFFALSE 22029
22022: GO 22024
22024: DISABLE
// FinishMission ;
22025: CALL 22030 0 0
22029: END
// export function FinishMission ; begin
22030: LD_INT 0
22032: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22033: LD_EXP 49
22037: PPUSH
22038: LD_STRING 10_KhatamStatus_1
22040: PPUSH
22041: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22045: LD_INT 12
22047: PPUSH
22048: LD_INT 1
22050: PPUSH
22051: CALL_OW 321
22055: PUSH
22056: LD_INT 2
22058: EQUAL
22059: IFFALSE 22073
// begin AddMedal ( sights , 1 ) ;
22061: LD_STRING sights
22063: PPUSH
22064: LD_INT 1
22066: PPUSH
22067: CALL_OW 101
// end else
22071: GO 22084
// begin AddMedal ( sights , - 1 ) ;
22073: LD_STRING sights
22075: PPUSH
22076: LD_INT 1
22078: NEG
22079: PPUSH
22080: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22084: LD_INT 32
22086: PPUSH
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 321
22094: PUSH
22095: LD_INT 2
22097: EQUAL
22098: IFFALSE 22112
// begin AddMedal ( computers , 1 ) ;
22100: LD_STRING computers
22102: PPUSH
22103: LD_INT 1
22105: PPUSH
22106: CALL_OW 101
// end else
22110: GO 22123
// begin AddMedal ( computers , - 1 ) ;
22112: LD_STRING computers
22114: PPUSH
22115: LD_INT 1
22117: NEG
22118: PPUSH
22119: CALL_OW 101
// end ; if arabianEscape = 0 then
22123: LD_EXP 46
22127: PUSH
22128: LD_INT 0
22130: EQUAL
22131: IFFALSE 22155
// begin AddMedal ( renegades , 2 ) ;
22133: LD_STRING renegades
22135: PPUSH
22136: LD_INT 2
22138: PPUSH
22139: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22143: LD_INT 0
22145: PPUSH
22146: LD_STRING 10_ScientistsEscape_1
22148: PPUSH
22149: CALL_OW 39
// end else
22153: GO 22166
// begin AddMedal ( renegades , - 1 ) ;
22155: LD_STRING renegades
22157: PPUSH
22158: LD_INT 1
22160: NEG
22161: PPUSH
22162: CALL_OW 101
// end ; SaveEpsilonBase ;
22166: CALL 22756 0 0
// Query ( kaj ) ;
22170: LD_STRING kaj
22172: PPUSH
22173: CALL_OW 97
// GiveMedals ( Main ) ;
22177: LD_STRING Main
22179: PPUSH
22180: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22184: LD_INT 22
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 23
22196: PUSH
22197: LD_INT 1
22199: PUSH
22200: EMPTY
22201: LIST
22202: LIST
22203: PUSH
22204: LD_INT 21
22206: PUSH
22207: LD_INT 1
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PUSH
22214: LD_INT 2
22216: PUSH
22217: LD_INT 25
22219: PUSH
22220: LD_INT 1
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: LD_INT 25
22229: PUSH
22230: LD_INT 2
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PUSH
22237: LD_INT 25
22239: PUSH
22240: LD_INT 3
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 25
22249: PUSH
22250: LD_INT 4
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 25
22259: PUSH
22260: LD_INT 5
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: PPUSH
22281: CALL_OW 69
22285: PPUSH
22286: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22290: LD_EXP 1
22294: PPUSH
22295: LD_EXP 50
22299: PUSH
22300: LD_STRING JMM
22302: STR
22303: PPUSH
22304: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22308: LD_EXP 2
22312: PPUSH
22313: LD_EXP 50
22317: PUSH
22318: LD_STRING Brown
22320: STR
22321: PPUSH
22322: CALL 7563 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22326: LD_EXP 3
22330: PPUSH
22331: LD_EXP 50
22335: PUSH
22336: LD_STRING Donaldson
22338: STR
22339: PPUSH
22340: CALL 7563 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22344: LD_EXP 4
22348: PPUSH
22349: LD_EXP 50
22353: PUSH
22354: LD_STRING Bobby
22356: STR
22357: PPUSH
22358: CALL 7563 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22362: LD_EXP 5
22366: PPUSH
22367: LD_EXP 50
22371: PUSH
22372: LD_STRING Cyrus
22374: STR
22375: PPUSH
22376: CALL 7563 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22380: LD_EXP 6
22384: PPUSH
22385: LD_EXP 50
22389: PUSH
22390: LD_STRING Lisa
22392: STR
22393: PPUSH
22394: CALL 7563 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22398: LD_EXP 7
22402: PPUSH
22403: LD_EXP 50
22407: PUSH
22408: LD_STRING Frank
22410: STR
22411: PPUSH
22412: CALL 7563 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22416: LD_EXP 8
22420: PPUSH
22421: LD_EXP 50
22425: PUSH
22426: LD_STRING Kikuchi
22428: STR
22429: PPUSH
22430: CALL 7563 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22434: LD_EXP 9
22438: PPUSH
22439: LD_EXP 50
22443: PUSH
22444: LD_STRING Houten
22446: STR
22447: PPUSH
22448: CALL 7563 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
22452: LD_EXP 10
22456: PPUSH
22457: LD_EXP 50
22461: PUSH
22462: LD_STRING Gary
22464: STR
22465: PPUSH
22466: CALL 7563 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
22470: LD_EXP 11
22474: PPUSH
22475: LD_EXP 50
22479: PUSH
22480: LD_STRING Simms
22482: STR
22483: PPUSH
22484: CALL 7563 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22488: LD_EXP 12
22492: PPUSH
22493: LD_EXP 50
22497: PUSH
22498: LD_STRING Denis
22500: STR
22501: PPUSH
22502: CALL 7563 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22506: LD_EXP 13
22510: PPUSH
22511: LD_EXP 50
22515: PUSH
22516: LD_STRING Joan
22518: STR
22519: PPUSH
22520: CALL 7563 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22524: LD_EXP 15
22528: PPUSH
22529: LD_EXP 50
22533: PUSH
22534: LD_STRING Gladstone
22536: STR
22537: PPUSH
22538: CALL 7563 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
22542: LD_EXP 17
22546: PPUSH
22547: LD_EXP 50
22551: PUSH
22552: LD_STRING DeltaDoctor
22554: STR
22555: PPUSH
22556: CALL 7563 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
22560: LD_INT 50
22562: PUSH
22563: EMPTY
22564: LIST
22565: PUSH
22566: LD_INT 22
22568: PUSH
22569: LD_INT 1
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: LD_INT 21
22578: PUSH
22579: LD_INT 1
22581: PUSH
22582: EMPTY
22583: LIST
22584: LIST
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 25
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: PUSH
22599: LD_INT 25
22601: PUSH
22602: LD_INT 2
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 25
22611: PUSH
22612: LD_INT 3
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 25
22621: PUSH
22622: LD_INT 4
22624: PUSH
22625: EMPTY
22626: LIST
22627: LIST
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: LIST
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: LIST
22641: PPUSH
22642: CALL_OW 69
22646: PUSH
22647: LD_EXP 1
22651: PUSH
22652: LD_EXP 2
22656: PUSH
22657: LD_EXP 3
22661: PUSH
22662: LD_EXP 4
22666: PUSH
22667: LD_EXP 5
22671: PUSH
22672: LD_EXP 6
22676: PUSH
22677: LD_EXP 7
22681: PUSH
22682: LD_EXP 15
22686: PUSH
22687: LD_EXP 8
22691: PUSH
22692: LD_EXP 12
22696: PUSH
22697: LD_EXP 13
22701: PUSH
22702: LD_EXP 9
22706: PUSH
22707: LD_EXP 11
22711: PUSH
22712: LD_EXP 10
22716: PUSH
22717: LD_EXP 17
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: DIFF
22739: PPUSH
22740: LD_STRING 10_other_survivors
22742: PPUSH
22743: CALL_OW 38
// YouWin ;
22747: CALL_OW 103
// end ;
22751: LD_VAR 0 1
22755: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
22756: LD_INT 0
22758: PPUSH
22759: PPUSH
22760: PPUSH
22761: PPUSH
// epsilonBase = [ ] ;
22762: LD_ADDR_VAR 0 2
22766: PUSH
22767: EMPTY
22768: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22769: LD_ADDR_VAR 0 3
22773: PUSH
22774: LD_INT 22
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 21
22786: PUSH
22787: LD_INT 3
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 50
22796: PUSH
22797: EMPTY
22798: LIST
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: PPUSH
22805: CALL_OW 69
22809: ST_TO_ADDR
// for i in buildings do
22810: LD_ADDR_VAR 0 4
22814: PUSH
22815: LD_VAR 0 3
22819: PUSH
22820: FOR_IN
22821: IFFALSE 23258
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22823: LD_VAR 0 4
22827: PPUSH
22828: CALL_OW 266
22832: PUSH
22833: LD_INT 6
22835: PUSH
22836: LD_INT 7
22838: PUSH
22839: LD_INT 8
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: LIST
22846: IN
22847: IFFALSE 22961
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22849: LD_ADDR_VAR 0 2
22853: PUSH
22854: LD_VAR 0 2
22858: PUSH
22859: LD_VAR 0 4
22863: PPUSH
22864: CALL_OW 266
22868: PUSH
22869: LD_VAR 0 4
22873: PPUSH
22874: CALL_OW 250
22878: PUSH
22879: LD_VAR 0 4
22883: PPUSH
22884: CALL_OW 251
22888: PUSH
22889: LD_VAR 0 4
22893: PPUSH
22894: CALL_OW 254
22898: PUSH
22899: LD_VAR 0 4
22903: PPUSH
22904: CALL_OW 267
22908: PUSH
22909: LD_VAR 0 4
22913: PPUSH
22914: CALL_OW 248
22918: PUSH
22919: LD_VAR 0 4
22923: PPUSH
22924: LD_INT 1
22926: PPUSH
22927: CALL_OW 268
22931: PUSH
22932: LD_VAR 0 4
22936: PPUSH
22937: LD_INT 2
22939: PPUSH
22940: CALL_OW 268
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: PUSH
22955: EMPTY
22956: LIST
22957: ADD
22958: ST_TO_ADDR
22959: GO 23256
// if GetBType ( i ) = b_bunker then
22961: LD_VAR 0 4
22965: PPUSH
22966: CALL_OW 266
22970: PUSH
22971: LD_INT 32
22973: EQUAL
22974: IFFALSE 23071
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
22976: LD_ADDR_VAR 0 2
22980: PUSH
22981: LD_VAR 0 2
22985: PUSH
22986: LD_VAR 0 4
22990: PPUSH
22991: CALL_OW 266
22995: PUSH
22996: LD_VAR 0 4
23000: PPUSH
23001: CALL_OW 250
23005: PUSH
23006: LD_VAR 0 4
23010: PPUSH
23011: CALL_OW 251
23015: PUSH
23016: LD_VAR 0 4
23020: PPUSH
23021: CALL_OW 254
23025: PUSH
23026: LD_VAR 0 4
23030: PPUSH
23031: CALL_OW 267
23035: PUSH
23036: LD_VAR 0 4
23040: PPUSH
23041: CALL_OW 248
23045: PUSH
23046: LD_VAR 0 4
23050: PPUSH
23051: CALL_OW 269
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: ADD
23068: ST_TO_ADDR
23069: GO 23256
// if GetBType ( i ) = b_factory then
23071: LD_VAR 0 4
23075: PPUSH
23076: CALL_OW 266
23080: PUSH
23081: LD_INT 3
23083: EQUAL
23084: IFFALSE 23174
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
23086: LD_ADDR_VAR 0 2
23090: PUSH
23091: LD_VAR 0 2
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: LD_VAR 0 4
23103: PPUSH
23104: CALL_OW 266
23108: PUSH
23109: LD_VAR 0 4
23113: PPUSH
23114: CALL_OW 250
23118: PUSH
23119: LD_VAR 0 4
23123: PPUSH
23124: CALL_OW 251
23128: PUSH
23129: LD_VAR 0 4
23133: PPUSH
23134: CALL_OW 254
23138: PUSH
23139: LD_VAR 0 4
23143: PPUSH
23144: CALL_OW 267
23148: PUSH
23149: LD_VAR 0 4
23153: PPUSH
23154: CALL_OW 248
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 2
23171: ST_TO_ADDR
23172: GO 23256
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23174: LD_ADDR_VAR 0 2
23178: PUSH
23179: LD_VAR 0 2
23183: PUSH
23184: LD_VAR 0 4
23188: PPUSH
23189: CALL_OW 266
23193: PUSH
23194: LD_VAR 0 4
23198: PPUSH
23199: CALL_OW 250
23203: PUSH
23204: LD_VAR 0 4
23208: PPUSH
23209: CALL_OW 251
23213: PUSH
23214: LD_VAR 0 4
23218: PPUSH
23219: CALL_OW 254
23223: PUSH
23224: LD_VAR 0 4
23228: PPUSH
23229: CALL_OW 267
23233: PUSH
23234: LD_VAR 0 4
23238: PPUSH
23239: CALL_OW 248
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: PUSH
23252: EMPTY
23253: LIST
23254: ADD
23255: ST_TO_ADDR
// end ;
23256: GO 22820
23258: POP
23259: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
23260: LD_VAR 0 2
23264: PPUSH
23265: LD_STRING 10_EpsilonBase
23267: PPUSH
23268: CALL_OW 39
// end ; end_of_file
23272: LD_VAR 0 1
23276: RET
// every 0 0$30 do
23277: GO 23279
23279: DISABLE
// begin enable ;
23280: ENABLE
// if cratesSpawned < 6 then
23281: LD_EXP 52
23285: PUSH
23286: LD_INT 6
23288: LESS
23289: IFFALSE 23326
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23291: LD_INT 3
23293: PPUSH
23294: LD_INT 5
23296: PPUSH
23297: CALL_OW 12
23301: PPUSH
23302: LD_INT 16
23304: PPUSH
23305: LD_INT 1
23307: PPUSH
23308: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23312: LD_ADDR_EXP 52
23316: PUSH
23317: LD_EXP 52
23321: PUSH
23322: LD_INT 1
23324: PLUS
23325: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
23326: LD_EXP 52
23330: PUSH
23331: LD_INT 6
23333: GREATEREQUAL
23334: PUSH
23335: LD_EXP 52
23339: PUSH
23340: LD_INT 12
23342: LESS
23343: AND
23344: IFFALSE 23388
// begin wait ( 0 0$30 ) ;
23346: LD_INT 1050
23348: PPUSH
23349: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23353: LD_INT 3
23355: PPUSH
23356: LD_INT 5
23358: PPUSH
23359: CALL_OW 12
23363: PPUSH
23364: LD_INT 16
23366: PPUSH
23367: LD_INT 1
23369: PPUSH
23370: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23374: LD_ADDR_EXP 52
23378: PUSH
23379: LD_EXP 52
23383: PUSH
23384: LD_INT 1
23386: PLUS
23387: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
23388: LD_EXP 52
23392: PUSH
23393: LD_INT 12
23395: GREATEREQUAL
23396: IFFALSE 23440
// begin wait ( 1 1$0 ) ;
23398: LD_INT 2100
23400: PPUSH
23401: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23405: LD_INT 3
23407: PPUSH
23408: LD_INT 5
23410: PPUSH
23411: CALL_OW 12
23415: PPUSH
23416: LD_INT 16
23418: PPUSH
23419: LD_INT 1
23421: PPUSH
23422: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23426: LD_ADDR_EXP 52
23430: PUSH
23431: LD_EXP 52
23435: PUSH
23436: LD_INT 1
23438: PLUS
23439: ST_TO_ADDR
// end ; end ;
23440: END
=======
19103: PUSH
19104: LD_INT 25
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: PPUSH
19119: CALL_OW 69
19123: PUSH
19124: LD_INT 1
19126: ARRAY
19127: PPUSH
19128: LD_INT 36
19130: PPUSH
19131: LD_INT 28
19133: PPUSH
19134: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
19138: LD_INT 22
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 21
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 25
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: PPUSH
19173: CALL_OW 69
19177: PPUSH
19178: LD_EXP 42
19182: PPUSH
19183: CALL_OW 180
// end ; end ; end ;
19187: PPOPN 2
19189: END
// on UpgradeComplete ( building ) do var i ;
19190: LD_INT 0
19192: PPUSH
// begin if GetSide ( building ) = 1 then
19193: LD_VAR 0 1
19197: PPUSH
19198: CALL_OW 255
19202: PUSH
19203: LD_INT 1
19205: EQUAL
19206: IFFALSE 19406
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19208: LD_INT 22
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 30
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 30
19233: PUSH
19234: LD_INT 8
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 30
19246: PUSH
19247: LD_INT 11
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: LD_INT 30
19262: PUSH
19263: LD_INT 26
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 30
19272: PUSH
19273: LD_INT 27
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 30
19282: PUSH
19283: LD_INT 28
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: PUSH
19320: LD_INT 0
19322: GREATER
19323: PUSH
19324: LD_INT 22
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 30
19339: PUSH
19340: LD_INT 26
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 30
19349: PUSH
19350: LD_INT 27
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: LD_INT 28
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PPUSH
19377: CALL_OW 69
19381: PUSH
19382: LD_INT 0
19384: GREATER
19385: AND
19386: PUSH
19387: LD_EXP 54
19391: PUSH
19392: LD_INT 0
19394: EQUAL
19395: AND
19396: IFFALSE 19406
// eventVar1 = 1 ;
19398: LD_ADDR_EXP 54
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 255
19415: PUSH
19416: LD_INT 2
19418: EQUAL
19419: IFFALSE 19524
// begin if GetBType ( building ) = b_barracks then
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 266
19430: PUSH
19431: LD_INT 5
19433: EQUAL
19434: IFFALSE 19524
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_INT 22
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 25
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 3
19463: PUSH
19464: LD_INT 54
19466: PUSH
19467: EMPTY
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 69
19483: PUSH
19484: LD_EXP 26
19488: PUSH
19489: EMPTY
19490: LIST
19491: DIFF
19492: PUSH
19493: FOR_IN
19494: IFFALSE 19512
// ComEnterUnit ( i , building ) ;
19496: LD_VAR 0 2
19500: PPUSH
19501: LD_VAR 0 1
19505: PPUSH
19506: CALL_OW 120
19510: GO 19493
19512: POP
19513: POP
// arArm = building ;
19514: LD_ADDR_EXP 44
19518: PUSH
19519: LD_VAR 0 1
19523: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 255
19533: PUSH
19534: LD_INT 3
19536: EQUAL
19537: IFFALSE 20010
// begin if GetBType ( building ) = b_factory then
19539: LD_VAR 0 1
19543: PPUSH
19544: CALL_OW 266
19548: PUSH
19549: LD_INT 3
19551: EQUAL
19552: IFFALSE 19619
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19554: LD_ADDR_VAR 0 2
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PPUSH
19583: CALL_OW 69
19587: PUSH
19588: FOR_IN
19589: IFFALSE 19607
// ComEnterUnit ( i , building ) ;
19591: LD_VAR 0 2
19595: PPUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 120
19605: GO 19588
19607: POP
19608: POP
// ruFab = building ;
19609: LD_ADDR_EXP 34
19613: PUSH
19614: LD_VAR 0 1
19618: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19619: LD_INT 22
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 21
19631: PUSH
19632: LD_INT 3
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 30
19641: PUSH
19642: LD_INT 8
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: PPUSH
19654: CALL_OW 69
19658: PUSH
19659: LD_INT 2
19661: EQUAL
19662: IFFALSE 19870
// begin for i = 1 to 2 do
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: DOUBLE
19670: LD_INT 1
19672: DEC
19673: ST_TO_ADDR
19674: LD_INT 2
19676: PUSH
19677: FOR_TO
19678: IFFALSE 19765
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19680: LD_INT 22
19682: PUSH
19683: LD_INT 3
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 25
19692: PUSH
19693: LD_INT 4
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PPUSH
19704: CALL_OW 69
19708: PUSH
19709: LD_VAR 0 2
19713: ARRAY
19714: PPUSH
19715: LD_INT 22
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 30
19737: PUSH
19738: LD_INT 8
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 69
19754: PUSH
19755: LD_INT 1
19757: ARRAY
19758: PPUSH
19759: CALL_OW 120
19763: GO 19677
19765: POP
19766: POP
// for i = 3 to 4 do
19767: LD_ADDR_VAR 0 2
19771: PUSH
19772: DOUBLE
19773: LD_INT 3
19775: DEC
19776: ST_TO_ADDR
19777: LD_INT 4
19779: PUSH
19780: FOR_TO
19781: IFFALSE 19868
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
19783: LD_INT 22
19785: PUSH
19786: LD_INT 3
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 25
19795: PUSH
19796: LD_INT 4
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: PUSH
19812: LD_VAR 0 2
19816: ARRAY
19817: PPUSH
19818: LD_INT 22
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 21
19830: PUSH
19831: LD_INT 3
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 30
19840: PUSH
19841: LD_INT 8
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: PUSH
19858: LD_INT 2
19860: ARRAY
19861: PPUSH
19862: CALL_OW 120
19866: GO 19780
19868: POP
19869: POP
// end ; if GetBType ( building ) = b_barracks then
19870: LD_VAR 0 1
19874: PPUSH
19875: CALL_OW 266
19879: PUSH
19880: LD_INT 5
19882: EQUAL
19883: IFFALSE 20010
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_INT 22
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 25
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: LD_INT 54
19915: PUSH
19916: EMPTY
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: PUSH
19933: FOR_IN
19934: IFFALSE 19952
// ComEnterUnit ( i , building ) ;
19936: LD_VAR 0 2
19940: PPUSH
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 120
19950: GO 19933
19952: POP
19953: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
19954: LD_INT 22
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 30
19966: PUSH
19967: LD_INT 5
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PPUSH
19978: CALL_OW 69
19982: PUSH
19983: LD_INT 0
19985: EQUAL
19986: IFFALSE 20000
// ruArm1 = building else
19988: LD_ADDR_EXP 32
19992: PUSH
19993: LD_VAR 0 1
19997: ST_TO_ADDR
19998: GO 20010
// ruArm2 = building ;
20000: LD_ADDR_EXP 33
20004: PUSH
20005: LD_VAR 0 1
20009: ST_TO_ADDR
// end ; end ; end ;
20010: PPOPN 2
20012: END
// on EnterBuilding ( building , human ) do var rnd ;
20013: LD_INT 0
20015: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 255
20025: PUSH
20026: LD_INT 2
20028: EQUAL
20029: PUSH
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL_OW 257
20039: PUSH
20040: LD_INT 1
20042: EQUAL
20043: AND
20044: PUSH
20045: LD_VAR 0 1
20049: PUSH
20050: LD_EXP 44
20054: EQUAL
20055: AND
20056: IFFALSE 20103
// begin wait ( 0 0$1 ) ;
20058: LD_INT 35
20060: PPUSH
20061: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
20065: LD_ADDR_VAR 0 3
20069: PUSH
20070: LD_INT 1
20072: PPUSH
20073: LD_INT 100
20075: PPUSH
20076: CALL_OW 12
20080: ST_TO_ADDR
// if rnd > 50 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 50
20088: GREATER
20089: IFFALSE 20103
// SetClass ( human , class_mortar ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_INT 8
20098: PPUSH
20099: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
20103: LD_VAR 0 2
20107: PPUSH
20108: CALL_OW 255
20112: PUSH
20113: LD_INT 3
20115: EQUAL
20116: PUSH
20117: LD_VAR 0 2
20121: PPUSH
20122: CALL_OW 257
20126: PUSH
20127: LD_INT 1
20129: EQUAL
20130: AND
20131: PUSH
20132: LD_VAR 0 1
20136: PUSH
20137: LD_EXP 32
20141: EQUAL
20142: PUSH
20143: LD_VAR 0 1
20147: PUSH
20148: LD_EXP 33
20152: EQUAL
20153: OR
20154: PUSH
20155: EMPTY
20156: LIST
20157: AND
20158: IFFALSE 20179
// begin wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 9
20174: PPUSH
20175: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
20179: LD_VAR 0 2
20183: PPUSH
20184: CALL_OW 255
20188: PUSH
20189: LD_INT 3
20191: EQUAL
20192: PUSH
20193: LD_VAR 0 2
20197: PPUSH
20198: CALL_OW 257
20202: PUSH
20203: LD_INT 9
20205: EQUAL
20206: AND
20207: PUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL_OW 266
20217: PUSH
20218: LD_INT 32
20220: EQUAL
20221: AND
20222: IFFALSE 20243
// begin wait ( 0 0$1 ) ;
20224: LD_INT 35
20226: PPUSH
20227: CALL_OW 67
// SetClass ( human , 1 ) ;
20231: LD_VAR 0 2
20235: PPUSH
20236: LD_INT 1
20238: PPUSH
20239: CALL_OW 336
// end ; end ;
20243: PPOPN 3
20245: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
20246: LD_VAR 0 1
20250: PUSH
20251: LD_INT 1
20253: EQUAL
20254: PUSH
20255: LD_VAR 0 2
20259: PUSH
20260: LD_INT 2
20262: EQUAL
20263: AND
20264: PUSH
20265: LD_INT 1
20267: PPUSH
20268: LD_INT 2
20270: PPUSH
20271: CALL_OW 81
20275: PUSH
20276: LD_INT 1
20278: EQUAL
20279: AND
20280: IFFALSE 20301
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20282: LD_EXP 24
20286: PPUSH
20287: LD_STRING D6b-Pow-1
20289: PPUSH
20290: CALL_OW 94
// YouLost ( Powell ) ;
20294: LD_STRING Powell
20296: PPUSH
20297: CALL_OW 104
// end ; end ;
20301: PPOPN 2
20303: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20304: LD_VAR 0 1
20308: PPUSH
20309: CALL_OW 255
20313: PUSH
20314: LD_INT 3
20316: EQUAL
20317: PUSH
20318: LD_VAR 0 1
20322: PPUSH
20323: CALL_OW 247
20327: PUSH
20328: LD_INT 3
20330: EQUAL
20331: AND
20332: IFFALSE 21024
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 266
20343: PUSH
20344: LD_INT 31
20346: EQUAL
20347: PUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 266
20357: PUSH
20358: LD_INT 32
20360: EQUAL
20361: OR
20362: PUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 266
20372: PUSH
20373: LD_INT 36
20375: EQUAL
20376: OR
20377: PUSH
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 266
20387: PUSH
20388: LD_INT 0
20390: EQUAL
20391: OR
20392: PUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL_OW 266
20402: PUSH
20403: LD_INT 24
20405: EQUAL
20406: OR
20407: PUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 266
20417: PUSH
20418: LD_INT 17
20420: EQUAL
20421: OR
20422: PUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 266
20432: PUSH
20433: LD_INT 25
20435: EQUAL
20436: OR
20437: PUSH
20438: LD_VAR 0 1
20442: PPUSH
20443: CALL_OW 266
20447: PUSH
20448: LD_INT 19
20450: EQUAL
20451: OR
20452: PUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 266
20462: PUSH
20463: LD_INT 20
20465: EQUAL
20466: OR
20467: PUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: CALL_OW 266
20477: PUSH
20478: LD_INT 18
20480: EQUAL
20481: OR
20482: PUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 266
20492: PUSH
20493: LD_INT 21
20495: EQUAL
20496: OR
20497: PUSH
20498: LD_VAR 0 1
20502: PPUSH
20503: CALL_OW 266
20507: PUSH
20508: LD_INT 23
20510: EQUAL
20511: OR
20512: PUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 266
20522: PUSH
20523: LD_INT 16
20525: EQUAL
20526: OR
20527: PUSH
20528: LD_VAR 0 1
20532: PPUSH
20533: CALL_OW 266
20537: PUSH
20538: LD_INT 6
20540: EQUAL
20541: OR
20542: PUSH
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 266
20552: PUSH
20553: LD_INT 29
20555: EQUAL
20556: OR
20557: PUSH
20558: LD_VAR 0 1
20562: PPUSH
20563: CALL_OW 266
20567: PUSH
20568: LD_INT 26
20570: EQUAL
20571: OR
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 266
20582: PUSH
20583: LD_INT 30
20585: EQUAL
20586: OR
20587: PUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 266
20597: PUSH
20598: LD_INT 28
20600: EQUAL
20601: OR
20602: PUSH
20603: LD_VAR 0 1
20607: PPUSH
20608: CALL_OW 266
20612: PUSH
20613: LD_INT 27
20615: EQUAL
20616: OR
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 266
20627: PUSH
20628: LD_INT 33
20630: EQUAL
20631: OR
20632: PUSH
20633: LD_VAR 0 1
20637: PPUSH
20638: CALL_OW 266
20642: PUSH
20643: LD_INT 2
20645: EQUAL
20646: OR
20647: PUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 266
20657: PUSH
20658: LD_INT 4
20660: EQUAL
20661: OR
20662: IFFALSE 20748
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20664: LD_ADDR_EXP 41
20668: PUSH
20669: LD_EXP 41
20673: PUSH
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 266
20683: ADD
20684: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20685: LD_ADDR_EXP 41
20689: PUSH
20690: LD_EXP 41
20694: PUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 250
20704: ADD
20705: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20706: LD_ADDR_EXP 41
20710: PUSH
20711: LD_EXP 41
20715: PUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 251
20725: ADD
20726: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20727: LD_ADDR_EXP 41
20731: PUSH
20732: LD_EXP 41
20736: PUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 254
20746: ADD
20747: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 266
20757: PUSH
20758: LD_INT 1
20760: EQUAL
20761: IFFALSE 20840
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20763: LD_ADDR_EXP 41
20767: PUSH
20768: LD_EXP 41
20772: PUSH
20773: LD_INT 0
20775: ADD
20776: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20777: LD_ADDR_EXP 41
20781: PUSH
20782: LD_EXP 41
20786: PUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 250
20796: ADD
20797: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20798: LD_ADDR_EXP 41
20802: PUSH
20803: LD_EXP 41
20807: PUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 251
20817: ADD
20818: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20819: LD_ADDR_EXP 41
20823: PUSH
20824: LD_EXP 41
20828: PUSH
20829: LD_VAR 0 1
20833: PPUSH
20834: CALL_OW 254
20838: ADD
20839: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 266
20849: PUSH
20850: LD_INT 3
20852: EQUAL
20853: IFFALSE 20932
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20855: LD_ADDR_EXP 41
20859: PUSH
20860: LD_EXP 41
20864: PUSH
20865: LD_INT 2
20867: ADD
20868: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20869: LD_ADDR_EXP 41
20873: PUSH
20874: LD_EXP 41
20878: PUSH
20879: LD_VAR 0 1
20883: PPUSH
20884: CALL_OW 250
20888: ADD
20889: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20890: LD_ADDR_EXP 41
20894: PUSH
20895: LD_EXP 41
20899: PUSH
20900: LD_VAR 0 1
20904: PPUSH
20905: CALL_OW 251
20909: ADD
20910: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20911: LD_ADDR_EXP 41
20915: PUSH
20916: LD_EXP 41
20920: PUSH
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 254
20930: ADD
20931: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20932: LD_VAR 0 1
20936: PPUSH
20937: CALL_OW 266
20941: PUSH
20942: LD_INT 5
20944: EQUAL
20945: IFFALSE 21024
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20947: LD_ADDR_EXP 41
20951: PUSH
20952: LD_EXP 41
20956: PUSH
20957: LD_INT 4
20959: ADD
20960: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20961: LD_ADDR_EXP 41
20965: PUSH
20966: LD_EXP 41
20970: PUSH
20971: LD_VAR 0 1
20975: PPUSH
20976: CALL_OW 250
20980: ADD
20981: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20982: LD_ADDR_EXP 41
20986: PUSH
20987: LD_EXP 41
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 251
21001: ADD
21002: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21003: LD_ADDR_EXP 41
21007: PUSH
21008: LD_EXP 41
21012: PUSH
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 254
21022: ADD
21023: ST_TO_ADDR
// end ; end ; end ;
21024: PPOPN 1
21026: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
21027: LD_ADDR_OWVAR 57
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// fastEnd = 1 ;
21035: LD_ADDR_EXP 53
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// FinishMission ;
21043: CALL 22774 0 0
// end ; end_of_file
21047: PPOPN 1
21049: END
// export function PrepareNature ; var i , un ; begin
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
21054: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
21055: LD_ADDR_VAR 0 2
21059: PUSH
21060: DOUBLE
21061: LD_INT 1
21063: DEC
21064: ST_TO_ADDR
21065: LD_OWVAR 67
21069: PUSH
21070: LD_INT 1
21072: PPUSH
21073: LD_INT 5
21075: PPUSH
21076: CALL_OW 12
21080: PLUS
21081: PUSH
21082: FOR_TO
21083: IFFALSE 21228
// begin hc_sex = sex_male ;
21085: LD_ADDR_OWVAR 27
21089: PUSH
21090: LD_INT 1
21092: ST_TO_ADDR
// uc_side = 0 ;
21093: LD_ADDR_OWVAR 20
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// uc_nation = nation_nature ;
21101: LD_ADDR_OWVAR 21
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// hc_class = class_apeman ;
21109: LD_ADDR_OWVAR 28
21113: PUSH
21114: LD_INT 12
21116: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
21117: LD_ADDR_OWVAR 31
21121: PUSH
21122: LD_INT 2
21124: PPUSH
21125: LD_INT 7
21127: PPUSH
21128: CALL_OW 12
21132: PUSH
21133: LD_OWVAR 67
21137: PLUS
21138: PUSH
21139: LD_INT 2
21141: PPUSH
21142: LD_INT 10
21144: PPUSH
21145: CALL_OW 12
21149: PUSH
21150: LD_INT 2
21152: PPUSH
21153: LD_INT 10
21155: PPUSH
21156: CALL_OW 12
21160: PUSH
21161: LD_INT 2
21163: PPUSH
21164: LD_INT 10
21166: PPUSH
21167: CALL_OW 12
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21178: LD_ADDR_OWVAR 35
21182: PUSH
21183: LD_INT 5
21185: NEG
21186: PPUSH
21187: LD_INT 5
21189: PPUSH
21190: CALL_OW 12
21194: PUSH
21195: LD_OWVAR 67
21199: MUL
21200: ST_TO_ADDR
// un = CreateHuman ;
21201: LD_ADDR_VAR 0 3
21205: PUSH
21206: CALL_OW 44
21210: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21211: LD_VAR 0 3
21215: PPUSH
21216: LD_INT 5
21218: PPUSH
21219: LD_INT 0
21221: PPUSH
21222: CALL_OW 49
// end ;
21226: GO 21082
21228: POP
21229: POP
// for i = 1 to Difficulty + 2 do
21230: LD_ADDR_VAR 0 2
21234: PUSH
21235: DOUBLE
21236: LD_INT 1
21238: DEC
21239: ST_TO_ADDR
21240: LD_OWVAR 67
21244: PUSH
21245: LD_INT 2
21247: PLUS
21248: PUSH
21249: FOR_TO
21250: IFFALSE 21359
// begin hc_sex = sex_male ;
21252: LD_ADDR_OWVAR 27
21256: PUSH
21257: LD_INT 1
21259: ST_TO_ADDR
// uc_side = 0 ;
21260: LD_ADDR_OWVAR 20
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// uc_nation = nation_nature ;
21268: LD_ADDR_OWVAR 21
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// hc_class = class_tiger ;
21276: LD_ADDR_OWVAR 28
21280: PUSH
21281: LD_INT 14
21283: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21284: LD_ADDR_OWVAR 31
21288: PUSH
21289: LD_EXP 36
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: LD_INT 0
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21309: LD_ADDR_OWVAR 35
21313: PUSH
21314: LD_INT 5
21316: NEG
21317: PPUSH
21318: LD_INT 5
21320: PPUSH
21321: CALL_OW 12
21325: PUSH
21326: LD_OWVAR 67
21330: MUL
21331: ST_TO_ADDR
// un = CreateHuman ;
21332: LD_ADDR_VAR 0 3
21336: PUSH
21337: CALL_OW 44
21341: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21342: LD_VAR 0 3
21346: PPUSH
21347: LD_INT 6
21349: PPUSH
21350: LD_INT 0
21352: PPUSH
21353: CALL_OW 49
// end ;
21357: GO 21249
21359: POP
21360: POP
// for i = 1 to rand ( 3 , 4 ) do
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: DOUBLE
21367: LD_INT 1
21369: DEC
21370: ST_TO_ADDR
21371: LD_INT 3
21373: PPUSH
21374: LD_INT 4
21376: PPUSH
21377: CALL_OW 12
21381: PUSH
21382: FOR_TO
21383: IFFALSE 21477
// begin hc_sex = sex_male ;
21385: LD_ADDR_OWVAR 27
21389: PUSH
21390: LD_INT 1
21392: ST_TO_ADDR
// uc_side = 0 ;
21393: LD_ADDR_OWVAR 20
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// uc_nation = nation_nature ;
21401: LD_ADDR_OWVAR 21
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// hc_class = 18 ;
21409: LD_ADDR_OWVAR 28
21413: PUSH
21414: LD_INT 18
21416: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21417: LD_ADDR_OWVAR 31
21421: PUSH
21422: LD_EXP 36
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// hc_agressivity = 0 ;
21442: LD_ADDR_OWVAR 35
21446: PUSH
21447: LD_INT 0
21449: ST_TO_ADDR
// un = CreateHuman ;
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: CALL_OW 44
21459: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21460: LD_VAR 0 3
21464: PPUSH
21465: LD_INT 6
21467: PPUSH
21468: LD_INT 0
21470: PPUSH
21471: CALL_OW 49
// end ;
21475: GO 21382
21477: POP
21478: POP
// end ; end_of_file
21479: LD_VAR 0 1
21483: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
21484: LD_EXP 45
21488: PUSH
21489: LD_INT 1
21491: EQUAL
21492: IFFALSE 21600
21494: GO 21496
21496: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
21497: LD_INT 7
21499: PPUSH
21500: LD_INT 5
21502: PPUSH
21503: LD_INT 4
21505: PPUSH
21506: LD_INT 6
21508: PPUSH
21509: CALL_OW 12
21513: PUSH
21514: LD_INT 6
21516: PPUSH
21517: LD_INT 8
21519: PPUSH
21520: CALL_OW 12
21524: PUSH
21525: LD_INT 7
21527: PPUSH
21528: LD_INT 9
21530: PPUSH
21531: CALL_OW 12
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_OWVAR 67
21545: ARRAY
21546: PPUSH
21547: LD_EXP 35
21551: PPUSH
21552: LD_EXP 36
21556: PPUSH
21557: CALL_OW 12
21561: PPUSH
21562: LD_INT 2
21564: PPUSH
21565: LD_INT 1
21567: PPUSH
21568: LD_INT 1
21570: PPUSH
21571: EMPTY
21572: PPUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 26
21578: PUSH
21579: LD_INT 27
21581: PUSH
21582: LD_INT 28
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: PPUSH
21591: EMPTY
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: CALL 13031 0 11
21600: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
21601: LD_EXP 45
21605: PUSH
21606: LD_INT 1
21608: EQUAL
21609: IFFALSE 21745
21611: GO 21613
21613: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21614: LD_INT 5
21616: PPUSH
21617: LD_INT 2
21619: PPUSH
21620: LD_INT 7
21622: PPUSH
21623: LD_INT 9
21625: PPUSH
21626: CALL_OW 12
21630: PUSH
21631: LD_INT 8
21633: PPUSH
21634: LD_INT 10
21636: PPUSH
21637: CALL_OW 12
21641: PUSH
21642: LD_INT 9
21644: PPUSH
21645: LD_INT 12
21647: PPUSH
21648: CALL_OW 12
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: LD_OWVAR 67
21662: ARRAY
21663: PPUSH
21664: LD_INT 0
21666: PPUSH
21667: LD_INT 0
21669: PPUSH
21670: LD_INT 3
21672: PPUSH
21673: LD_INT 4
21675: PPUSH
21676: CALL_OW 12
21680: PUSH
21681: LD_INT 4
21683: PPUSH
21684: LD_INT 5
21686: PPUSH
21687: CALL_OW 12
21691: PUSH
21692: LD_INT 5
21694: PPUSH
21695: LD_INT 6
21697: PPUSH
21698: CALL_OW 12
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: PUSH
21708: LD_OWVAR 67
21712: ARRAY
21713: PPUSH
21714: LD_INT 0
21716: PPUSH
21717: LD_EXP 35
21721: PPUSH
21722: LD_EXP 36
21726: PPUSH
21727: CALL_OW 12
21731: PPUSH
21732: LD_INT 7
21734: PPUSH
21735: LD_INT 9
21737: PPUSH
21738: LD_INT 1
21740: PPUSH
21741: CALL 14735 0 11
21745: END
// every 4 4$30 trigger joinEpsilon = 1 do
21746: LD_EXP 28
21750: PUSH
21751: LD_INT 1
21753: EQUAL
21754: IFFALSE 21816
21756: GO 21758
21758: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 2 , 4 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21759: LD_INT 6
21761: PPUSH
21762: LD_INT 3
21764: PPUSH
21765: LD_INT 2
21767: PPUSH
21768: LD_INT 4
21770: PPUSH
21771: CALL_OW 12
21775: PPUSH
21776: LD_INT 0
21778: PPUSH
21779: LD_INT 0
21781: PPUSH
21782: LD_INT 0
21784: PPUSH
21785: LD_INT 0
21787: PPUSH
21788: LD_EXP 35
21792: PPUSH
21793: LD_EXP 36
21797: PPUSH
21798: CALL_OW 12
21802: PPUSH
21803: LD_INT 17
21805: PPUSH
21806: LD_INT 18
21808: PPUSH
21809: LD_INT 1
21811: PPUSH
21812: CALL 14735 0 11
21816: END
// every 4 4$30 trigger joinEpsilon = 1 do
21817: LD_EXP 28
21821: PUSH
21822: LD_INT 1
21824: EQUAL
21825: IFFALSE 21907
21827: GO 21829
21829: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21830: LD_INT 17
21832: PPUSH
21833: LD_INT 6
21835: PPUSH
21836: LD_INT 1
21838: PPUSH
21839: LD_INT 3
21841: PPUSH
21842: CALL_OW 12
21846: PPUSH
21847: LD_EXP 35
21851: PPUSH
21852: LD_EXP 36
21856: PPUSH
21857: CALL_OW 12
21861: PPUSH
21862: LD_INT 3
21864: PPUSH
21865: LD_INT 1
21867: PPUSH
21868: LD_INT 1
21870: PUSH
21871: LD_INT 3
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PPUSH
21878: LD_INT 43
21880: PUSH
21881: LD_INT 44
21883: PUSH
21884: LD_INT 45
21886: PUSH
21887: LD_INT 46
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PPUSH
21896: EMPTY
21897: PPUSH
21898: EMPTY
21899: PPUSH
21900: LD_INT 1
21902: PPUSH
21903: CALL 13031 0 11
21907: END
// every 8 8$30 trigger joinEpsilon = 1 do
21908: LD_EXP 28
21912: PUSH
21913: LD_INT 1
21915: EQUAL
21916: IFFALSE 21986
21918: GO 21920
21920: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 3 , 6 ) , 0 , rand ( 3 , 5 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21921: LD_INT 6
21923: PPUSH
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 3
21929: PPUSH
21930: LD_INT 6
21932: PPUSH
21933: CALL_OW 12
21937: PPUSH
21938: LD_INT 0
21940: PPUSH
21941: LD_INT 3
21943: PPUSH
21944: LD_INT 5
21946: PPUSH
21947: CALL_OW 12
21951: PPUSH
21952: LD_INT 0
21954: PPUSH
21955: LD_INT 0
21957: PPUSH
21958: LD_EXP 35
21962: PPUSH
21963: LD_EXP 36
21967: PPUSH
21968: CALL_OW 12
21972: PPUSH
21973: LD_INT 17
21975: PPUSH
21976: LD_INT 18
21978: PPUSH
21979: LD_INT 1
21981: PPUSH
21982: CALL 14735 0 11
21986: END
// every 8 8$30 trigger joinEpsilon = 1 do
21987: LD_EXP 28
21991: PUSH
21992: LD_INT 1
21994: EQUAL
21995: IFFALSE 22077
21997: GO 21999
21999: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22000: LD_INT 17
22002: PPUSH
22003: LD_INT 6
22005: PPUSH
22006: LD_INT 1
22008: PPUSH
22009: LD_INT 5
22011: PPUSH
22012: CALL_OW 12
22016: PPUSH
22017: LD_EXP 35
22021: PPUSH
22022: LD_EXP 36
22026: PPUSH
22027: CALL_OW 12
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PPUSH
22048: LD_INT 43
22050: PUSH
22051: LD_INT 44
22053: PUSH
22054: LD_INT 45
22056: PUSH
22057: LD_INT 46
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PPUSH
22066: EMPTY
22067: PPUSH
22068: EMPTY
22069: PPUSH
22070: LD_INT 1
22072: PPUSH
22073: CALL 13031 0 11
22077: END
// every 15 15$30 trigger joinEpsilon = 1 do
22078: LD_EXP 28
22082: PUSH
22083: LD_INT 1
22085: EQUAL
22086: IFFALSE 22156
22088: GO 22090
22090: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22091: LD_INT 6
22093: PPUSH
22094: LD_INT 3
22096: PPUSH
22097: LD_INT 5
22099: PPUSH
22100: LD_INT 8
22102: PPUSH
22103: CALL_OW 12
22107: PPUSH
22108: LD_INT 0
22110: PPUSH
22111: LD_INT 3
22113: PPUSH
22114: LD_INT 8
22116: PPUSH
22117: CALL_OW 12
22121: PPUSH
22122: LD_INT 0
22124: PPUSH
22125: LD_INT 0
22127: PPUSH
22128: LD_EXP 35
22132: PPUSH
22133: LD_EXP 36
22137: PPUSH
22138: CALL_OW 12
22142: PPUSH
22143: LD_INT 17
22145: PPUSH
22146: LD_INT 18
22148: PPUSH
22149: LD_INT 1
22151: PPUSH
22152: CALL 14735 0 11
22156: END
// every 15 15$30 trigger joinEpsilon = 1 do
22157: LD_EXP 28
22161: PUSH
22162: LD_INT 1
22164: EQUAL
22165: IFFALSE 22247
22167: GO 22169
22169: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22170: LD_INT 17
22172: PPUSH
22173: LD_INT 6
22175: PPUSH
22176: LD_INT 5
22178: PPUSH
22179: LD_INT 8
22181: PPUSH
22182: CALL_OW 12
22186: PPUSH
22187: LD_EXP 35
22191: PPUSH
22192: LD_EXP 36
22196: PPUSH
22197: CALL_OW 12
22201: PPUSH
22202: LD_INT 3
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PPUSH
22218: LD_INT 43
22220: PUSH
22221: LD_INT 44
22223: PUSH
22224: LD_INT 45
22226: PUSH
22227: LD_INT 46
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PPUSH
22236: EMPTY
22237: PPUSH
22238: EMPTY
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL 13031 0 11
22247: END
// every 27 27$30 trigger joinEpsilon = 1 do
22248: LD_EXP 28
22252: PUSH
22253: LD_INT 1
22255: EQUAL
22256: IFFALSE 22326
22258: GO 22260
22260: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22261: LD_INT 6
22263: PPUSH
22264: LD_INT 3
22266: PPUSH
22267: LD_INT 7
22269: PPUSH
22270: LD_INT 10
22272: PPUSH
22273: CALL_OW 12
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: LD_INT 3
22283: PPUSH
22284: LD_INT 8
22286: PPUSH
22287: CALL_OW 12
22291: PPUSH
22292: LD_INT 0
22294: PPUSH
22295: LD_INT 0
22297: PPUSH
22298: LD_EXP 35
22302: PPUSH
22303: LD_EXP 36
22307: PPUSH
22308: CALL_OW 12
22312: PPUSH
22313: LD_INT 17
22315: PPUSH
22316: LD_INT 18
22318: PPUSH
22319: LD_INT 1
22321: PPUSH
22322: CALL 14735 0 11
22326: END
// every 27 27$30 trigger joinEpsilon = 1 do
22327: LD_EXP 28
22331: PUSH
22332: LD_INT 1
22334: EQUAL
22335: IFFALSE 22417
22337: GO 22339
22339: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22340: LD_INT 17
22342: PPUSH
22343: LD_INT 6
22345: PPUSH
22346: LD_INT 5
22348: PPUSH
22349: LD_INT 8
22351: PPUSH
22352: CALL_OW 12
22356: PPUSH
22357: LD_EXP 35
22361: PPUSH
22362: LD_EXP 36
22366: PPUSH
22367: CALL_OW 12
22371: PPUSH
22372: LD_INT 3
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: LD_INT 1
22380: PUSH
22381: LD_INT 3
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PPUSH
22388: LD_INT 43
22390: PUSH
22391: LD_INT 44
22393: PUSH
22394: LD_INT 45
22396: PUSH
22397: LD_INT 46
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: EMPTY
22407: PPUSH
22408: EMPTY
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL 13031 0 11
22417: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22418: LD_INT 54
22420: PPUSH
22421: LD_INT 1
22423: PPUSH
22424: CALL_OW 321
22428: PUSH
22429: LD_INT 2
22431: EQUAL
22432: PUSH
22433: LD_INT 55
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: CALL_OW 321
22443: PUSH
22444: LD_INT 2
22446: EQUAL
22447: AND
22448: PUSH
22449: LD_INT 21
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL_OW 321
22459: PUSH
22460: LD_INT 2
22462: EQUAL
22463: AND
22464: PUSH
22465: LD_INT 22
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 321
22475: PUSH
22476: LD_INT 2
22478: EQUAL
22479: AND
22480: PUSH
22481: LD_INT 12
22483: PPUSH
22484: LD_INT 1
22486: PPUSH
22487: CALL_OW 321
22491: PUSH
22492: LD_INT 1
22494: EQUAL
22495: PUSH
22496: LD_INT 32
22498: PPUSH
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 321
22506: PUSH
22507: LD_INT 1
22509: EQUAL
22510: OR
22511: PUSH
22512: EMPTY
22513: LIST
22514: AND
22515: PUSH
22516: LD_EXP 47
22520: PUSH
22521: LD_INT 1
22523: EQUAL
22524: AND
22525: PUSH
22526: LD_INT 22
22528: PUSH
22529: LD_INT 3
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 21
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PPUSH
22550: CALL_OW 69
22554: PUSH
22555: LD_INT 0
22557: EQUAL
22558: AND
22559: IFFALSE 22615
22561: GO 22563
22563: DISABLE
// begin case query ( QEndMission ) of 1 :
22564: LD_STRING QEndMission
22566: PPUSH
22567: CALL_OW 97
22571: PUSH
22572: LD_INT 1
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22591
22580: POP
// begin end_the_mission_allowed = true ;
22581: LD_ADDR_OWVAR 57
22585: PUSH
22586: LD_INT 1
22588: ST_TO_ADDR
// end ; 2 :
22589: GO 22615
22591: LD_INT 2
22593: DOUBLE
22594: EQUAL
22595: IFTRUE 22599
22597: GO 22614
22599: POP
// begin fastEnd = 1 ;
22600: LD_ADDR_EXP 53
22604: PUSH
22605: LD_INT 1
22607: ST_TO_ADDR
// FinishMission ;
22608: CALL 22774 0 0
// end ; end ;
22612: GO 22615
22614: POP
// end ;
22615: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22616: LD_INT 54
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: CALL_OW 321
22626: PUSH
22627: LD_INT 2
22629: EQUAL
22630: PUSH
22631: LD_INT 55
22633: PPUSH
22634: LD_INT 1
22636: PPUSH
22637: CALL_OW 321
22641: PUSH
22642: LD_INT 2
22644: EQUAL
22645: AND
22646: PUSH
22647: LD_INT 21
22649: PPUSH
22650: LD_INT 1
22652: PPUSH
22653: CALL_OW 321
22657: PUSH
22658: LD_INT 2
22660: EQUAL
22661: AND
22662: PUSH
22663: LD_INT 22
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL_OW 321
22673: PUSH
22674: LD_INT 2
22676: EQUAL
22677: AND
22678: PUSH
22679: LD_INT 12
22681: PPUSH
22682: LD_INT 1
22684: PPUSH
22685: CALL_OW 321
22689: PUSH
22690: LD_INT 2
22692: EQUAL
22693: AND
22694: PUSH
22695: LD_INT 32
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 321
22705: PUSH
22706: LD_INT 2
22708: EQUAL
22709: AND
22710: PUSH
22711: LD_EXP 53
22715: PUSH
22716: LD_INT 0
22718: EQUAL
22719: AND
22720: PUSH
22721: LD_EXP 47
22725: PUSH
22726: LD_INT 1
22728: EQUAL
22729: AND
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 69
22759: PUSH
22760: LD_INT 0
22762: EQUAL
22763: AND
22764: IFFALSE 22773
22766: GO 22768
22768: DISABLE
// FinishMission ;
22769: CALL 22774 0 0
22773: END
// export function FinishMission ; begin
22774: LD_INT 0
22776: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22777: LD_EXP 49
22781: PPUSH
22782: LD_STRING 10_KhatamStatus_1
22784: PPUSH
22785: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22789: LD_INT 12
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: CALL_OW 321
22799: PUSH
22800: LD_INT 2
22802: EQUAL
22803: IFFALSE 22817
// begin AddMedal ( sights , 1 ) ;
22805: LD_STRING sights
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 101
// end else
22815: GO 22828
// begin AddMedal ( sights , - 1 ) ;
22817: LD_STRING sights
22819: PPUSH
22820: LD_INT 1
22822: NEG
22823: PPUSH
22824: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22828: LD_INT 32
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 321
22838: PUSH
22839: LD_INT 2
22841: EQUAL
22842: IFFALSE 22856
// begin AddMedal ( computers , 1 ) ;
22844: LD_STRING computers
22846: PPUSH
22847: LD_INT 1
22849: PPUSH
22850: CALL_OW 101
// end else
22854: GO 22867
// begin AddMedal ( computers , - 1 ) ;
22856: LD_STRING computers
22858: PPUSH
22859: LD_INT 1
22861: NEG
22862: PPUSH
22863: CALL_OW 101
// end ; if arabianEscape = 0 then
22867: LD_EXP 46
22871: PUSH
22872: LD_INT 0
22874: EQUAL
22875: IFFALSE 22899
// begin AddMedal ( renegades , 2 ) ;
22877: LD_STRING renegades
22879: PPUSH
22880: LD_INT 2
22882: PPUSH
22883: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22887: LD_INT 0
22889: PPUSH
22890: LD_STRING 10_ScientistsEscape_1
22892: PPUSH
22893: CALL_OW 39
// end else
22897: GO 22910
// begin AddMedal ( renegades , - 1 ) ;
22899: LD_STRING renegades
22901: PPUSH
22902: LD_INT 1
22904: NEG
22905: PPUSH
22906: CALL_OW 101
// end ; SaveEpsilonBase ;
22910: CALL 23500 0 0
// Query ( kaj ) ;
22914: LD_STRING kaj
22916: PPUSH
22917: CALL_OW 97
// GiveMedals ( Main ) ;
22921: LD_STRING Main
22923: PPUSH
22924: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22928: LD_INT 22
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 23
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 25
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 25
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 25
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 25
22993: PUSH
22994: LD_INT 4
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 25
23003: PUSH
23004: LD_INT 5
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: PPUSH
23030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23034: LD_EXP 1
23038: PPUSH
23039: LD_EXP 50
23043: PUSH
23044: LD_STRING JMM
23046: STR
23047: PPUSH
23048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23052: LD_EXP 2
23056: PPUSH
23057: LD_EXP 50
23061: PUSH
23062: LD_STRING Brown
23064: STR
23065: PPUSH
23066: CALL 7578 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23070: LD_EXP 3
23074: PPUSH
23075: LD_EXP 50
23079: PUSH
23080: LD_STRING Donaldson
23082: STR
23083: PPUSH
23084: CALL 7578 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23088: LD_EXP 4
23092: PPUSH
23093: LD_EXP 50
23097: PUSH
23098: LD_STRING Bobby
23100: STR
23101: PPUSH
23102: CALL 7578 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23106: LD_EXP 5
23110: PPUSH
23111: LD_EXP 50
23115: PUSH
23116: LD_STRING Cyrus
23118: STR
23119: PPUSH
23120: CALL 7578 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23124: LD_EXP 6
23128: PPUSH
23129: LD_EXP 50
23133: PUSH
23134: LD_STRING Lisa
23136: STR
23137: PPUSH
23138: CALL 7578 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23142: LD_EXP 7
23146: PPUSH
23147: LD_EXP 50
23151: PUSH
23152: LD_STRING Frank
23154: STR
23155: PPUSH
23156: CALL 7578 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23160: LD_EXP 8
23164: PPUSH
23165: LD_EXP 50
23169: PUSH
23170: LD_STRING Kikuchi
23172: STR
23173: PPUSH
23174: CALL 7578 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23178: LD_EXP 9
23182: PPUSH
23183: LD_EXP 50
23187: PUSH
23188: LD_STRING Houten
23190: STR
23191: PPUSH
23192: CALL 7578 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23196: LD_EXP 10
23200: PPUSH
23201: LD_EXP 50
23205: PUSH
23206: LD_STRING Gary
23208: STR
23209: PPUSH
23210: CALL 7578 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23214: LD_EXP 11
23218: PPUSH
23219: LD_EXP 50
23223: PUSH
23224: LD_STRING Simms
23226: STR
23227: PPUSH
23228: CALL 7578 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23232: LD_EXP 12
23236: PPUSH
23237: LD_EXP 50
23241: PUSH
23242: LD_STRING Denis
23244: STR
23245: PPUSH
23246: CALL 7578 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23250: LD_EXP 13
23254: PPUSH
23255: LD_EXP 50
23259: PUSH
23260: LD_STRING Joan
23262: STR
23263: PPUSH
23264: CALL 7578 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23268: LD_EXP 15
23272: PPUSH
23273: LD_EXP 50
23277: PUSH
23278: LD_STRING Gladstone
23280: STR
23281: PPUSH
23282: CALL 7578 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23286: LD_EXP 17
23290: PPUSH
23291: LD_EXP 50
23295: PUSH
23296: LD_STRING DeltaDoctor
23298: STR
23299: PPUSH
23300: CALL 7578 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23304: LD_INT 50
23306: PUSH
23307: EMPTY
23308: LIST
23309: PUSH
23310: LD_INT 22
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 21
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: LD_INT 25
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 25
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 25
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 25
23365: PUSH
23366: LD_INT 4
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 69
23390: PUSH
23391: LD_EXP 1
23395: PUSH
23396: LD_EXP 2
23400: PUSH
23401: LD_EXP 3
23405: PUSH
23406: LD_EXP 4
23410: PUSH
23411: LD_EXP 5
23415: PUSH
23416: LD_EXP 6
23420: PUSH
23421: LD_EXP 7
23425: PUSH
23426: LD_EXP 15
23430: PUSH
23431: LD_EXP 8
23435: PUSH
23436: LD_EXP 12
23440: PUSH
23441: LD_EXP 13
23445: PUSH
23446: LD_EXP 9
23450: PUSH
23451: LD_EXP 11
23455: PUSH
23456: LD_EXP 10
23460: PUSH
23461: LD_EXP 17
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: DIFF
23483: PPUSH
23484: LD_STRING 10_other_survivors
23486: PPUSH
23487: CALL_OW 38
// YouWin ;
23491: CALL_OW 103
// end ;
23495: LD_VAR 0 1
23499: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
// epsilonBase = [ ] ;
23506: LD_ADDR_VAR 0 2
23510: PUSH
23511: EMPTY
23512: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
23513: LD_ADDR_VAR 0 3
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 21
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 50
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: ST_TO_ADDR
// for i in buildings do
23554: LD_ADDR_VAR 0 4
23558: PUSH
23559: LD_VAR 0 3
23563: PUSH
23564: FOR_IN
23565: IFFALSE 24002
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
23567: LD_VAR 0 4
23571: PPUSH
23572: CALL_OW 266
23576: PUSH
23577: LD_INT 6
23579: PUSH
23580: LD_INT 7
23582: PUSH
23583: LD_INT 8
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: IN
23591: IFFALSE 23705
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
23593: LD_ADDR_VAR 0 2
23597: PUSH
23598: LD_VAR 0 2
23602: PUSH
23603: LD_VAR 0 4
23607: PPUSH
23608: CALL_OW 266
23612: PUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: CALL_OW 250
23622: PUSH
23623: LD_VAR 0 4
23627: PPUSH
23628: CALL_OW 251
23632: PUSH
23633: LD_VAR 0 4
23637: PPUSH
23638: CALL_OW 254
23642: PUSH
23643: LD_VAR 0 4
23647: PPUSH
23648: CALL_OW 267
23652: PUSH
23653: LD_VAR 0 4
23657: PPUSH
23658: CALL_OW 248
23662: PUSH
23663: LD_VAR 0 4
23667: PPUSH
23668: LD_INT 1
23670: PPUSH
23671: CALL_OW 268
23675: PUSH
23676: LD_VAR 0 4
23680: PPUSH
23681: LD_INT 2
23683: PPUSH
23684: CALL_OW 268
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: ADD
23702: ST_TO_ADDR
23703: GO 24000
// if GetBType ( i ) = b_bunker then
23705: LD_VAR 0 4
23709: PPUSH
23710: CALL_OW 266
23714: PUSH
23715: LD_INT 32
23717: EQUAL
23718: IFFALSE 23815
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_VAR 0 2
23729: PUSH
23730: LD_VAR 0 4
23734: PPUSH
23735: CALL_OW 266
23739: PUSH
23740: LD_VAR 0 4
23744: PPUSH
23745: CALL_OW 250
23749: PUSH
23750: LD_VAR 0 4
23754: PPUSH
23755: CALL_OW 251
23759: PUSH
23760: LD_VAR 0 4
23764: PPUSH
23765: CALL_OW 254
23769: PUSH
23770: LD_VAR 0 4
23774: PPUSH
23775: CALL_OW 267
23779: PUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: CALL_OW 248
23789: PUSH
23790: LD_VAR 0 4
23794: PPUSH
23795: CALL_OW 269
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: ADD
23812: ST_TO_ADDR
23813: GO 24000
// if GetBType ( i ) = b_factory then
23815: LD_VAR 0 4
23819: PPUSH
23820: CALL_OW 266
23824: PUSH
23825: LD_INT 3
23827: EQUAL
23828: IFFALSE 23918
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
23830: LD_ADDR_VAR 0 2
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: LD_INT 1
23842: PPUSH
23843: LD_VAR 0 4
23847: PPUSH
23848: CALL_OW 266
23852: PUSH
23853: LD_VAR 0 4
23857: PPUSH
23858: CALL_OW 250
23862: PUSH
23863: LD_VAR 0 4
23867: PPUSH
23868: CALL_OW 251
23872: PUSH
23873: LD_VAR 0 4
23877: PPUSH
23878: CALL_OW 254
23882: PUSH
23883: LD_VAR 0 4
23887: PPUSH
23888: CALL_OW 267
23892: PUSH
23893: LD_VAR 0 4
23897: PPUSH
23898: CALL_OW 248
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 2
23915: ST_TO_ADDR
23916: GO 24000
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23918: LD_ADDR_VAR 0 2
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: LD_VAR 0 4
23932: PPUSH
23933: CALL_OW 266
23937: PUSH
23938: LD_VAR 0 4
23942: PPUSH
23943: CALL_OW 250
23947: PUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: CALL_OW 251
23957: PUSH
23958: LD_VAR 0 4
23962: PPUSH
23963: CALL_OW 254
23967: PUSH
23968: LD_VAR 0 4
23972: PPUSH
23973: CALL_OW 267
23977: PUSH
23978: LD_VAR 0 4
23982: PPUSH
23983: CALL_OW 248
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: ADD
23999: ST_TO_ADDR
// end ;
24000: GO 23564
24002: POP
24003: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
24004: LD_VAR 0 2
24008: PPUSH
24009: LD_STRING 10_EpsilonBase
24011: PPUSH
24012: CALL_OW 39
// end ; end_of_file
24016: LD_VAR 0 1
24020: RET
// every 0 0$1 trigger IsDead ( JMM ) do
24021: LD_EXP 1
24025: PPUSH
24026: CALL_OW 301
24030: IFFALSE 24042
24032: GO 24034
24034: DISABLE
// YouLost ( JMM ) ; end_of_file
24035: LD_STRING JMM
24037: PPUSH
24038: CALL_OW 104
24042: END
// every 0 0$30 do
24043: GO 24045
24045: DISABLE
// begin enable ;
24046: ENABLE
// if cratesSpawned < 6 then
24047: LD_EXP 52
24051: PUSH
24052: LD_INT 6
24054: LESS
24055: IFFALSE 24092
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24057: LD_INT 3
24059: PPUSH
24060: LD_INT 5
24062: PPUSH
24063: CALL_OW 12
24067: PPUSH
24068: LD_INT 16
24070: PPUSH
24071: LD_INT 1
24073: PPUSH
24074: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24078: LD_ADDR_EXP 52
24082: PUSH
24083: LD_EXP 52
24087: PUSH
24088: LD_INT 1
24090: PLUS
24091: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
24092: LD_EXP 52
24096: PUSH
24097: LD_INT 6
24099: GREATEREQUAL
24100: PUSH
24101: LD_EXP 52
24105: PUSH
24106: LD_INT 12
24108: LESS
24109: AND
24110: IFFALSE 24154
// begin wait ( 0 0$30 ) ;
24112: LD_INT 1050
24114: PPUSH
24115: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24119: LD_INT 3
24121: PPUSH
24122: LD_INT 5
24124: PPUSH
24125: CALL_OW 12
24129: PPUSH
24130: LD_INT 16
24132: PPUSH
24133: LD_INT 1
24135: PPUSH
24136: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24140: LD_ADDR_EXP 52
24144: PUSH
24145: LD_EXP 52
24149: PUSH
24150: LD_INT 1
24152: PLUS
24153: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
24154: LD_EXP 52
24158: PUSH
24159: LD_INT 12
24161: GREATEREQUAL
24162: IFFALSE 24206
// begin wait ( 1 1$0 ) ;
24164: LD_INT 2100
24166: PPUSH
24167: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24171: LD_INT 3
24173: PPUSH
24174: LD_INT 5
24176: PPUSH
24177: CALL_OW 12
24181: PPUSH
24182: LD_INT 16
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24192: LD_ADDR_EXP 52
24196: PUSH
24197: LD_EXP 52
24201: PUSH
24202: LD_INT 1
24204: PLUS
24205: ST_TO_ADDR
// end ; end ;
24206: END
>>>>>>> 3c7adb2492b96f29d24116ad099007c795df8a89
