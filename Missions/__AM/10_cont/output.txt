// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24710 0 0
// PrepareDifficulty ;
 250: CALL 10043 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19641 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19641 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19641 0 2
// PrepareArabianCommander ;
 354: CALL 3204 0 0
// PrepareArabian ;
 358: CALL 3256 0 0
// BuildArabianBase ;
 362: CALL 12742 0 0
// TameApemans ;
 366: CALL 18606 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9637 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9637 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9637 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9637 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9637 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9637 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9637 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9637 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9637 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9637 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9637 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9637 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9637 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9637 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9637 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9637 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9637 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9637 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2212
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2208
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// others09 = Delete ( others09 , i ) ;
2168: LD_ADDR_EXP 22
2172: PUSH
2173: LD_EXP 22
2177: PPUSH
2178: LD_VAR 0 2
2182: PPUSH
2183: CALL_OW 3
2187: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2188: LD_EXP 22
2192: PUSH
2193: LD_VAR 0 2
2197: ARRAY
2198: PPUSH
2199: LD_INT 2
2201: PPUSH
2202: CALL_OW 336
// end ;
2206: GO 2144
2208: POP
2209: POP
// end else
2210: GO 2276
// begin for i in others09 do
2212: LD_ADDR_VAR 0 2
2216: PUSH
2217: LD_EXP 22
2221: PUSH
2222: FOR_IN
2223: IFFALSE 2274
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2225: LD_VAR 0 2
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: LD_INT 0
2235: PPUSH
2236: CALL_OW 49
// others09 = Delete ( others09 , i ) ;
2240: LD_ADDR_EXP 22
2244: PUSH
2245: LD_EXP 22
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: CALL_OW 3
2259: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_INT 2
2267: PPUSH
2268: CALL_OW 336
// end ;
2272: GO 2222
2274: POP
2275: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2276: LD_INT 22
2278: PUSH
2279: LD_INT 4
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: PUSH
2286: LD_INT 25
2288: PUSH
2289: LD_INT 2
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PPUSH
2300: CALL_OW 69
2304: PUSH
2305: LD_INT 0
2307: EQUAL
2308: IFFALSE 2426
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2310: LD_ADDR_VAR 0 3
2314: PUSH
2315: LD_INT 22
2317: PUSH
2318: LD_INT 4
2320: PUSH
2321: EMPTY
2322: LIST
2323: LIST
2324: PUSH
2325: LD_INT 25
2327: PUSH
2328: LD_INT 2
2330: PUSH
2331: EMPTY
2332: LIST
2333: LIST
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PPUSH
2339: CALL_OW 69
2343: PUSH
2344: LD_EXP 11
2348: PUSH
2349: LD_EXP 14
2353: PUSH
2354: LD_EXP 12
2358: PUSH
2359: LD_EXP 15
2363: PUSH
2364: LD_EXP 17
2368: PUSH
2369: LD_EXP 13
2373: PUSH
2374: EMPTY
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: DIFF
2382: ST_TO_ADDR
// if not tmp then
2383: LD_VAR 0 3
2387: NOT
2388: IFFALSE 2410
// begin if Denis then
2390: LD_EXP 12
2394: IFFALSE 2408
// SetClass ( Denis , 2 ) ;
2396: LD_EXP 12
2400: PPUSH
2401: LD_INT 2
2403: PPUSH
2404: CALL_OW 336
// exit ;
2408: GO 2576
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2410: LD_VAR 0 3
2414: PUSH
2415: LD_INT 1
2417: ARRAY
2418: PPUSH
2419: LD_INT 2
2421: PPUSH
2422: CALL_OW 336
// end ; for i in ape09 do
2426: LD_ADDR_VAR 0 2
2430: PUSH
2431: LD_EXP 23
2435: PUSH
2436: FOR_IN
2437: IFFALSE 2456
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2439: LD_VAR 0 2
2443: PPUSH
2444: LD_INT 1
2446: PPUSH
2447: LD_INT 0
2449: PPUSH
2450: CALL_OW 49
2454: GO 2436
2456: POP
2457: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2458: LD_INT 22
2460: PUSH
2461: LD_INT 4
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: LD_INT 25
2470: PUSH
2471: LD_INT 2
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: PPUSH
2482: CALL_OW 69
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: LD_INT 101
2492: PPUSH
2493: LD_INT 30
2495: PPUSH
2496: LD_INT 2
2498: PPUSH
2499: CALL_OW 205
// uc_side = 1 ;
2503: LD_ADDR_OWVAR 20
2507: PUSH
2508: LD_INT 1
2510: ST_TO_ADDR
// hc_class := 1 ;
2511: LD_ADDR_OWVAR 28
2515: PUSH
2516: LD_INT 1
2518: ST_TO_ADDR
// hc_sex := sex_female ;
2519: LD_ADDR_OWVAR 27
2523: PUSH
2524: LD_INT 2
2526: ST_TO_ADDR
// hc_gallery :=  ;
2527: LD_ADDR_OWVAR 33
2531: PUSH
2532: LD_STRING 
2534: ST_TO_ADDR
// hc_name :=  ;
2535: LD_ADDR_OWVAR 26
2539: PUSH
2540: LD_STRING 
2542: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2543: LD_ADDR_OWVAR 31
2547: PUSH
2548: LD_INT 1
2550: PUSH
2551: LD_INT 7
2553: PUSH
2554: LD_INT 1
2556: PUSH
2557: LD_INT 0
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: LIST
2564: LIST
2565: ST_TO_ADDR
// AmScout = CreateHuman ;
2566: LD_ADDR_EXP 18
2570: PUSH
2571: CALL_OW 44
2575: ST_TO_ADDR
// end ;
2576: LD_VAR 0 1
2580: RET
// export function PrepareCornell ; begin
2581: LD_INT 0
2583: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2584: LD_INT 4
2586: PPUSH
2587: LD_INT 4
2589: PPUSH
2590: CALL_OW 343
// uc_side = 4 ;
2594: LD_ADDR_OWVAR 20
2598: PUSH
2599: LD_INT 4
2601: ST_TO_ADDR
// uc_nation = 1 ;
2602: LD_ADDR_OWVAR 21
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2610: LD_ADDR_EXP 19
2614: PUSH
2615: LD_STRING 03_Cornel
2617: PPUSH
2618: LD_INT 1
2620: PPUSH
2621: CALL 9637 0 2
2625: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2626: LD_EXP 19
2630: PPUSH
2631: LD_INT 8
2633: PPUSH
2634: LD_INT 0
2636: PPUSH
2637: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2641: LD_EXP 19
2645: PPUSH
2646: LD_INT 350
2648: PPUSH
2649: CALL_OW 234
// if IsInUnit ( JMM ) then
2653: LD_EXP 1
2657: PPUSH
2658: CALL_OW 310
2662: IFFALSE 2705
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2664: LD_EXP 19
2668: PPUSH
2669: LD_EXP 1
2673: PPUSH
2674: CALL_OW 310
2678: PPUSH
2679: CALL_OW 250
2683: PPUSH
2684: LD_EXP 1
2688: PPUSH
2689: CALL_OW 310
2693: PPUSH
2694: CALL_OW 251
2698: PPUSH
2699: CALL_OW 111
2703: GO 2734
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2705: LD_EXP 19
2709: PPUSH
2710: LD_EXP 1
2714: PPUSH
2715: CALL_OW 250
2719: PPUSH
2720: LD_EXP 1
2724: PPUSH
2725: CALL_OW 251
2729: PPUSH
2730: CALL_OW 111
// end ; end_of_file
2734: LD_VAR 0 1
2738: RET
// export function PrepareRussians ; var i , un ; begin
2739: LD_INT 0
2741: PPUSH
2742: PPUSH
2743: PPUSH
// uc_side = 3 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 3
2751: ST_TO_ADDR
// uc_nation = 3 ;
2752: LD_ADDR_OWVAR 21
2756: PUSH
2757: LD_INT 3
2759: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2760: LD_ADDR_EXP 25
2764: PUSH
2765: LD_STRING Tsaritsyn
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9637 0 2
2775: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2776: LD_EXP 25
2780: PPUSH
2781: LD_INT 3
2783: PPUSH
2784: LD_INT 0
2786: PPUSH
2787: CALL_OW 49
// for i = 1 to 14 do
2791: LD_ADDR_VAR 0 2
2795: PUSH
2796: DOUBLE
2797: LD_INT 1
2799: DEC
2800: ST_TO_ADDR
2801: LD_INT 14
2803: PUSH
2804: FOR_TO
2805: IFFALSE 2891
// begin uc_side = 3 ;
2807: LD_ADDR_OWVAR 20
2811: PUSH
2812: LD_INT 3
2814: ST_TO_ADDR
// uc_nation = 3 ;
2815: LD_ADDR_OWVAR 21
2819: PUSH
2820: LD_INT 3
2822: ST_TO_ADDR
// hc_gallery =  ;
2823: LD_ADDR_OWVAR 33
2827: PUSH
2828: LD_STRING 
2830: ST_TO_ADDR
// hc_name =  ;
2831: LD_ADDR_OWVAR 26
2835: PUSH
2836: LD_STRING 
2838: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2839: LD_INT 0
2841: PPUSH
2842: LD_INT 1
2844: PPUSH
2845: LD_EXP 36
2849: PPUSH
2850: LD_EXP 37
2854: PPUSH
2855: CALL_OW 12
2859: PPUSH
2860: CALL_OW 380
// un = CreateHuman ;
2864: LD_ADDR_VAR 0 3
2868: PUSH
2869: CALL_OW 44
2873: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2874: LD_VAR 0 3
2878: PPUSH
2879: LD_INT 3
2881: PPUSH
2882: LD_INT 0
2884: PPUSH
2885: CALL_OW 49
// end ;
2889: GO 2804
2891: POP
2892: POP
// for i = 1 to 6 do
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: DOUBLE
2899: LD_INT 1
2901: DEC
2902: ST_TO_ADDR
2903: LD_INT 6
2905: PUSH
2906: FOR_TO
2907: IFFALSE 2993
// begin uc_side = 3 ;
2909: LD_ADDR_OWVAR 20
2913: PUSH
2914: LD_INT 3
2916: ST_TO_ADDR
// uc_nation = 3 ;
2917: LD_ADDR_OWVAR 21
2921: PUSH
2922: LD_INT 3
2924: ST_TO_ADDR
// hc_gallery =  ;
2925: LD_ADDR_OWVAR 33
2929: PUSH
2930: LD_STRING 
2932: ST_TO_ADDR
// hc_name =  ;
2933: LD_ADDR_OWVAR 26
2937: PUSH
2938: LD_STRING 
2940: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2941: LD_INT 0
2943: PPUSH
2944: LD_INT 2
2946: PPUSH
2947: LD_EXP 36
2951: PPUSH
2952: LD_EXP 37
2956: PPUSH
2957: CALL_OW 12
2961: PPUSH
2962: CALL_OW 380
// un = CreateHuman ;
2966: LD_ADDR_VAR 0 3
2970: PUSH
2971: CALL_OW 44
2975: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2976: LD_VAR 0 3
2980: PPUSH
2981: LD_INT 3
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// end ;
2991: GO 2906
2993: POP
2994: POP
// for i = 1 to 6 do
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: DOUBLE
3001: LD_INT 1
3003: DEC
3004: ST_TO_ADDR
3005: LD_INT 6
3007: PUSH
3008: FOR_TO
3009: IFFALSE 3095
// begin uc_side = 3 ;
3011: LD_ADDR_OWVAR 20
3015: PUSH
3016: LD_INT 3
3018: ST_TO_ADDR
// uc_nation = 3 ;
3019: LD_ADDR_OWVAR 21
3023: PUSH
3024: LD_INT 3
3026: ST_TO_ADDR
// hc_gallery =  ;
3027: LD_ADDR_OWVAR 33
3031: PUSH
3032: LD_STRING 
3034: ST_TO_ADDR
// hc_name =  ;
3035: LD_ADDR_OWVAR 26
3039: PUSH
3040: LD_STRING 
3042: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3043: LD_INT 0
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_EXP 36
3053: PPUSH
3054: LD_EXP 37
3058: PPUSH
3059: CALL_OW 12
3063: PPUSH
3064: CALL_OW 380
// un = CreateHuman ;
3068: LD_ADDR_VAR 0 3
3072: PUSH
3073: CALL_OW 44
3077: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3078: LD_VAR 0 3
3082: PPUSH
3083: LD_INT 3
3085: PPUSH
3086: LD_INT 0
3088: PPUSH
3089: CALL_OW 49
// end ;
3093: GO 3008
3095: POP
3096: POP
// for i = 1 to 4 do
3097: LD_ADDR_VAR 0 2
3101: PUSH
3102: DOUBLE
3103: LD_INT 1
3105: DEC
3106: ST_TO_ADDR
3107: LD_INT 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3197
// begin uc_side = 3 ;
3113: LD_ADDR_OWVAR 20
3117: PUSH
3118: LD_INT 3
3120: ST_TO_ADDR
// uc_nation = 3 ;
3121: LD_ADDR_OWVAR 21
3125: PUSH
3126: LD_INT 3
3128: ST_TO_ADDR
// hc_gallery =  ;
3129: LD_ADDR_OWVAR 33
3133: PUSH
3134: LD_STRING 
3136: ST_TO_ADDR
// hc_name =  ;
3137: LD_ADDR_OWVAR 26
3141: PUSH
3142: LD_STRING 
3144: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3145: LD_INT 0
3147: PPUSH
3148: LD_INT 4
3150: PPUSH
3151: LD_EXP 36
3155: PPUSH
3156: LD_EXP 37
3160: PPUSH
3161: CALL_OW 12
3165: PPUSH
3166: CALL_OW 380
// un = CreateHuman ;
3170: LD_ADDR_VAR 0 3
3174: PUSH
3175: CALL_OW 44
3179: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3180: LD_VAR 0 3
3184: PPUSH
3185: LD_INT 3
3187: PPUSH
3188: LD_INT 0
3190: PPUSH
3191: CALL_OW 49
// end ;
3195: GO 3110
3197: POP
3198: POP
// end ; end_of_file
3199: LD_VAR 0 1
3203: RET
// export function PrepareArabianCommander ; begin
3204: LD_INT 0
3206: PPUSH
// uc_side = 2 ;
3207: LD_ADDR_OWVAR 20
3211: PUSH
3212: LD_INT 2
3214: ST_TO_ADDR
// uc_nation = 2 ;
3215: LD_ADDR_OWVAR 21
3219: PUSH
3220: LD_INT 2
3222: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3223: LD_ADDR_EXP 26
3227: PUSH
3228: LD_STRING Dietrich
3230: PPUSH
3231: CALL_OW 25
3235: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3236: LD_EXP 26
3240: PPUSH
3241: LD_INT 4
3243: PPUSH
3244: LD_INT 0
3246: PPUSH
3247: CALL_OW 49
// end ;
3251: LD_VAR 0 1
3255: RET
// export function PrepareArabian ; var i , un , veh ; begin
3256: LD_INT 0
3258: PPUSH
3259: PPUSH
3260: PPUSH
3261: PPUSH
// uc_side := 2 ;
3262: LD_ADDR_OWVAR 20
3266: PUSH
3267: LD_INT 2
3269: ST_TO_ADDR
// uc_nation := 2 ;
3270: LD_ADDR_OWVAR 21
3274: PUSH
3275: LD_INT 2
3277: ST_TO_ADDR
// if not Ahmed then
3278: LD_EXP 27
3282: NOT
3283: IFFALSE 3351
// begin InitHc ;
3285: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3289: LD_INT 1
3291: PPUSH
3292: LD_INT 1
3294: PPUSH
3295: LD_EXP 36
3299: PPUSH
3300: LD_EXP 37
3304: PUSH
3305: LD_INT 1
3307: PLUS
3308: PPUSH
3309: CALL_OW 12
3313: PPUSH
3314: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3318: LD_ADDR_OWVAR 26
3322: PUSH
3323: LD_STRING Ahmed Abbasid
3325: ST_TO_ADDR
// Ahmed := CreateHuman ;
3326: LD_ADDR_EXP 27
3330: PUSH
3331: CALL_OW 44
3335: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3336: LD_EXP 27
3340: PPUSH
3341: LD_INT 4
3343: PPUSH
3344: LD_INT 0
3346: PPUSH
3347: CALL_OW 49
// end ; for i = 1 to 3 do
3351: LD_ADDR_VAR 0 2
3355: PUSH
3356: DOUBLE
3357: LD_INT 1
3359: DEC
3360: ST_TO_ADDR
3361: LD_INT 3
3363: PUSH
3364: FOR_TO
3365: IFFALSE 3451
// begin uc_side = 2 ;
3367: LD_ADDR_OWVAR 20
3371: PUSH
3372: LD_INT 2
3374: ST_TO_ADDR
// uc_nation = 2 ;
3375: LD_ADDR_OWVAR 21
3379: PUSH
3380: LD_INT 2
3382: ST_TO_ADDR
// hc_gallery =  ;
3383: LD_ADDR_OWVAR 33
3387: PUSH
3388: LD_STRING 
3390: ST_TO_ADDR
// hc_name =  ;
3391: LD_ADDR_OWVAR 26
3395: PUSH
3396: LD_STRING 
3398: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3399: LD_INT 0
3401: PPUSH
3402: LD_INT 1
3404: PPUSH
3405: LD_EXP 36
3409: PPUSH
3410: LD_EXP 37
3414: PPUSH
3415: CALL_OW 12
3419: PPUSH
3420: CALL_OW 380
// un = CreateHuman ;
3424: LD_ADDR_VAR 0 3
3428: PUSH
3429: CALL_OW 44
3433: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3434: LD_VAR 0 3
3438: PPUSH
3439: LD_INT 4
3441: PPUSH
3442: LD_INT 0
3444: PPUSH
3445: CALL_OW 49
// end ;
3449: GO 3364
3451: POP
3452: POP
// for i = 1 to 6 do
3453: LD_ADDR_VAR 0 2
3457: PUSH
3458: DOUBLE
3459: LD_INT 1
3461: DEC
3462: ST_TO_ADDR
3463: LD_INT 6
3465: PUSH
3466: FOR_TO
3467: IFFALSE 3553
// begin uc_side = 2 ;
3469: LD_ADDR_OWVAR 20
3473: PUSH
3474: LD_INT 2
3476: ST_TO_ADDR
// uc_nation = 2 ;
3477: LD_ADDR_OWVAR 21
3481: PUSH
3482: LD_INT 2
3484: ST_TO_ADDR
// hc_gallery =  ;
3485: LD_ADDR_OWVAR 33
3489: PUSH
3490: LD_STRING 
3492: ST_TO_ADDR
// hc_name =  ;
3493: LD_ADDR_OWVAR 26
3497: PUSH
3498: LD_STRING 
3500: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3501: LD_INT 0
3503: PPUSH
3504: LD_INT 2
3506: PPUSH
3507: LD_EXP 36
3511: PPUSH
3512: LD_EXP 37
3516: PPUSH
3517: CALL_OW 12
3521: PPUSH
3522: CALL_OW 380
// un = CreateHuman ;
3526: LD_ADDR_VAR 0 3
3530: PUSH
3531: CALL_OW 44
3535: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3536: LD_VAR 0 3
3540: PPUSH
3541: LD_INT 4
3543: PPUSH
3544: LD_INT 0
3546: PPUSH
3547: CALL_OW 49
// end ;
3551: GO 3466
3553: POP
3554: POP
// for i = 1 to 6 do
3555: LD_ADDR_VAR 0 2
3559: PUSH
3560: DOUBLE
3561: LD_INT 1
3563: DEC
3564: ST_TO_ADDR
3565: LD_INT 6
3567: PUSH
3568: FOR_TO
3569: IFFALSE 3655
// begin uc_side = 2 ;
3571: LD_ADDR_OWVAR 20
3575: PUSH
3576: LD_INT 2
3578: ST_TO_ADDR
// uc_nation = 2 ;
3579: LD_ADDR_OWVAR 21
3583: PUSH
3584: LD_INT 2
3586: ST_TO_ADDR
// hc_gallery =  ;
3587: LD_ADDR_OWVAR 33
3591: PUSH
3592: LD_STRING 
3594: ST_TO_ADDR
// hc_name =  ;
3595: LD_ADDR_OWVAR 26
3599: PUSH
3600: LD_STRING 
3602: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3603: LD_INT 0
3605: PPUSH
3606: LD_INT 1
3608: PPUSH
3609: LD_EXP 36
3613: PPUSH
3614: LD_EXP 37
3618: PPUSH
3619: CALL_OW 12
3623: PPUSH
3624: CALL_OW 380
// un = CreateHuman ;
3628: LD_ADDR_VAR 0 3
3632: PUSH
3633: CALL_OW 44
3637: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3638: LD_VAR 0 3
3642: PPUSH
3643: LD_INT 4
3645: PPUSH
3646: LD_INT 0
3648: PPUSH
3649: CALL_OW 49
// end ;
3653: GO 3568
3655: POP
3656: POP
// for i = 1 to 4 do
3657: LD_ADDR_VAR 0 2
3661: PUSH
3662: DOUBLE
3663: LD_INT 1
3665: DEC
3666: ST_TO_ADDR
3667: LD_INT 4
3669: PUSH
3670: FOR_TO
3671: IFFALSE 3757
// begin uc_side = 2 ;
3673: LD_ADDR_OWVAR 20
3677: PUSH
3678: LD_INT 2
3680: ST_TO_ADDR
// uc_nation = 2 ;
3681: LD_ADDR_OWVAR 21
3685: PUSH
3686: LD_INT 2
3688: ST_TO_ADDR
// hc_gallery =  ;
3689: LD_ADDR_OWVAR 33
3693: PUSH
3694: LD_STRING 
3696: ST_TO_ADDR
// hc_name =  ;
3697: LD_ADDR_OWVAR 26
3701: PUSH
3702: LD_STRING 
3704: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3705: LD_INT 0
3707: PPUSH
3708: LD_INT 4
3710: PPUSH
3711: LD_EXP 36
3715: PPUSH
3716: LD_EXP 37
3720: PPUSH
3721: CALL_OW 12
3725: PPUSH
3726: CALL_OW 380
// un = CreateHuman ;
3730: LD_ADDR_VAR 0 3
3734: PUSH
3735: CALL_OW 44
3739: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3740: LD_VAR 0 3
3744: PPUSH
3745: LD_INT 4
3747: PPUSH
3748: LD_INT 0
3750: PPUSH
3751: CALL_OW 49
// end ;
3755: GO 3670
3757: POP
3758: POP
// for i = 1 to 2 do
3759: LD_ADDR_VAR 0 2
3763: PUSH
3764: DOUBLE
3765: LD_INT 1
3767: DEC
3768: ST_TO_ADDR
3769: LD_INT 2
3771: PUSH
3772: FOR_TO
3773: IFFALSE 3903
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_INT 22
3782: PUSH
3783: LD_INT 2
3785: PUSH
3786: EMPTY
3787: LIST
3788: LIST
3789: PUSH
3790: LD_INT 21
3792: PUSH
3793: LD_INT 2
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: PUSH
3800: LD_INT 58
3802: PUSH
3803: EMPTY
3804: LIST
3805: PUSH
3806: EMPTY
3807: LIST
3808: LIST
3809: LIST
3810: PPUSH
3811: CALL_OW 69
3815: ST_TO_ADDR
// uc_side = 2 ;
3816: LD_ADDR_OWVAR 20
3820: PUSH
3821: LD_INT 2
3823: ST_TO_ADDR
// uc_nation = 2 ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_INT 2
3831: ST_TO_ADDR
// hc_gallery =  ;
3832: LD_ADDR_OWVAR 33
3836: PUSH
3837: LD_STRING 
3839: ST_TO_ADDR
// hc_name =  ;
3840: LD_ADDR_OWVAR 26
3844: PUSH
3845: LD_STRING 
3847: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3848: LD_INT 0
3850: PPUSH
3851: LD_INT 3
3853: PPUSH
3854: LD_EXP 36
3858: PPUSH
3859: LD_EXP 37
3863: PPUSH
3864: CALL_OW 12
3868: PPUSH
3869: CALL_OW 380
// un = CreateHuman ;
3873: LD_ADDR_VAR 0 3
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3883: LD_VAR 0 3
3887: PPUSH
3888: LD_VAR 0 4
3892: PUSH
3893: LD_INT 1
3895: ARRAY
3896: PPUSH
3897: CALL_OW 52
// end ;
3901: GO 3772
3903: POP
3904: POP
// end ;
3905: LD_VAR 0 1
3909: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3910: LD_INT 0
3912: PPUSH
3913: PPUSH
3914: PPUSH
3915: PPUSH
3916: PPUSH
3917: PPUSH
// for i := 1 to 2 do
3918: LD_ADDR_VAR 0 2
3922: PUSH
3923: DOUBLE
3924: LD_INT 1
3926: DEC
3927: ST_TO_ADDR
3928: LD_INT 2
3930: PUSH
3931: FOR_TO
3932: IFFALSE 4058
// begin uc_side = 5 ;
3934: LD_ADDR_OWVAR 20
3938: PUSH
3939: LD_INT 5
3941: ST_TO_ADDR
// uc_nation = 2 ;
3942: LD_ADDR_OWVAR 21
3946: PUSH
3947: LD_INT 2
3949: ST_TO_ADDR
// vc_chassis := 31 ;
3950: LD_ADDR_OWVAR 37
3954: PUSH
3955: LD_INT 31
3957: ST_TO_ADDR
// vc_control := control_rider ;
3958: LD_ADDR_OWVAR 38
3962: PUSH
3963: LD_INT 4
3965: ST_TO_ADDR
// animal := CreateVehicle ;
3966: LD_ADDR_VAR 0 3
3970: PUSH
3971: CALL_OW 45
3975: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3976: LD_VAR 0 3
3980: PPUSH
3981: LD_INT 7
3983: PPUSH
3984: LD_INT 0
3986: PPUSH
3987: CALL_OW 49
// hc_gallery =  ;
3991: LD_ADDR_OWVAR 33
3995: PUSH
3996: LD_STRING 
3998: ST_TO_ADDR
// hc_name =  ;
3999: LD_ADDR_OWVAR 26
4003: PUSH
4004: LD_STRING 
4006: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4007: LD_INT 0
4009: PPUSH
4010: LD_INT 11
4012: PPUSH
4013: LD_EXP 36
4017: PPUSH
4018: LD_EXP 37
4022: PPUSH
4023: CALL_OW 12
4027: PPUSH
4028: CALL_OW 380
// un = CreateHuman ;
4032: LD_ADDR_VAR 0 4
4036: PUSH
4037: CALL_OW 44
4041: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4042: LD_VAR 0 4
4046: PPUSH
4047: LD_VAR 0 3
4051: PPUSH
4052: CALL_OW 52
// end ;
4056: GO 3931
4058: POP
4059: POP
// repeat wait ( 0 0$1 ) ;
4060: LD_INT 35
4062: PPUSH
4063: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 22
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: PPUSH
4082: CALL_OW 69
4086: PPUSH
4087: LD_VAR 0 2
4091: PPUSH
4092: CALL_OW 74
4096: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4097: LD_ADDR_VAR 0 6
4101: PUSH
4102: LD_INT 22
4104: PUSH
4105: LD_INT 1
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: PUSH
4112: LD_INT 2
4114: PUSH
4115: LD_INT 59
4117: PUSH
4118: EMPTY
4119: LIST
4120: PUSH
4121: LD_INT 21
4123: PUSH
4124: LD_INT 1
4126: PUSH
4127: EMPTY
4128: LIST
4129: LIST
4130: PUSH
4131: LD_INT 21
4133: PUSH
4134: LD_INT 2
4136: PUSH
4137: EMPTY
4138: LIST
4139: LIST
4140: PUSH
4141: EMPTY
4142: LIST
4143: LIST
4144: LIST
4145: LIST
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PUSH
4151: EMPTY
4152: LIST
4153: PPUSH
4154: CALL_OW 69
4158: PPUSH
4159: LD_VAR 0 2
4163: PPUSH
4164: CALL_OW 74
4168: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_INT 22
4176: PUSH
4177: LD_INT 5
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PUSH
4184: LD_INT 25
4186: PUSH
4187: LD_INT 11
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PPUSH
4198: CALL_OW 69
4202: PUSH
4203: FOR_IN
4204: IFFALSE 4274
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4206: LD_VAR 0 2
4210: PPUSH
4211: LD_VAR 0 5
4215: PPUSH
4216: CALL_OW 296
4220: PUSH
4221: LD_INT 8
4223: PLUS
4224: PUSH
4225: LD_VAR 0 2
4229: PPUSH
4230: LD_VAR 0 6
4234: PPUSH
4235: CALL_OW 296
4239: LESS
4240: IFFALSE 4258
// ComAttackUnit ( i , target1 ) else
4242: LD_VAR 0 2
4246: PPUSH
4247: LD_VAR 0 5
4251: PPUSH
4252: CALL_OW 115
4256: GO 4272
// ComAttackUnit ( i , target2 ) ;
4258: LD_VAR 0 2
4262: PPUSH
4263: LD_VAR 0 6
4267: PPUSH
4268: CALL_OW 115
// end ;
4272: GO 4203
4274: POP
4275: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4276: LD_INT 22
4278: PUSH
4279: LD_INT 5
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: LD_INT 25
4288: PUSH
4289: LD_INT 11
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PPUSH
4300: CALL_OW 69
4304: PUSH
4305: LD_INT 0
4307: EQUAL
4308: PUSH
4309: LD_INT 22
4311: PUSH
4312: LD_INT 1
4314: PUSH
4315: EMPTY
4316: LIST
4317: LIST
4318: PPUSH
4319: CALL_OW 69
4323: PUSH
4324: LD_INT 0
4326: EQUAL
4327: OR
4328: IFFALSE 4060
// end ; end_of_file
4330: LD_VAR 0 1
4334: RET
// every 1 do
4335: GO 4337
4337: DISABLE
// begin InGameOn ;
4338: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4342: LD_INT 1
4344: PPUSH
4345: LD_INT 19
4347: PPUSH
4348: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4352: LD_EXP 11
4356: PPUSH
4357: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4361: LD_INT 22
4363: PUSH
4364: LD_INT 4
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: LD_INT 25
4373: PUSH
4374: LD_INT 2
4376: PUSH
4377: EMPTY
4378: LIST
4379: LIST
4380: PUSH
4381: EMPTY
4382: LIST
4383: LIST
4384: PPUSH
4385: CALL_OW 69
4389: IFFALSE 4437
// begin repeat wait ( 0 0$1 ) ;
4391: LD_INT 35
4393: PPUSH
4394: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4398: LD_INT 22
4400: PUSH
4401: LD_INT 4
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: PUSH
4408: LD_INT 30
4410: PUSH
4411: LD_INT 0
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: PPUSH
4422: CALL_OW 69
4426: IFFALSE 4391
// Wait ( 0 0$1 ) ;
4428: LD_INT 35
4430: PPUSH
4431: CALL_OW 67
// end else
4435: GO 4444
// Wait ( 0 0$3 ) ;
4437: LD_INT 105
4439: PPUSH
4440: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4444: LD_EXP 1
4448: PPUSH
4449: CALL_OW 310
4453: PPUSH
4454: CALL_OW 85
// Wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// if IsOk ( Gary ) then
4465: LD_EXP 10
4469: PPUSH
4470: CALL_OW 302
4474: IFFALSE 4512
// begin Say ( Gary , D2-Gary-1 ) ;
4476: LD_EXP 10
4480: PPUSH
4481: LD_STRING D2-Gary-1
4483: PPUSH
4484: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4488: LD_EXP 1
4492: PPUSH
4493: LD_STRING D2-JMM-1
4495: PPUSH
4496: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4500: LD_EXP 10
4504: PPUSH
4505: LD_STRING D2-Gary-2
4507: PPUSH
4508: CALL_OW 88
// end ; InGameOff ;
4512: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4516: LD_STRING M1
4518: PPUSH
4519: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4523: LD_INT 38
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: LD_INT 100
4531: PPUSH
4532: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4536: LD_INT 47
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 50
4544: PPUSH
4545: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4549: LD_INT 47
4551: PPUSH
4552: LD_INT 3
4554: PPUSH
4555: LD_INT 50
4557: PPUSH
4558: CALL_OW 291
// SaveForQuickRestart ;
4562: CALL_OW 22
// end ;
4566: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4567: LD_EXP 1
4571: PPUSH
4572: LD_EXP 11
4576: PPUSH
4577: CALL_OW 296
4581: PUSH
4582: LD_INT 15
4584: LESS
4585: IFFALSE 5051
4587: GO 4589
4589: DISABLE
// begin InGameOn ;
4590: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4594: LD_EXP 1
4598: PPUSH
4599: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4603: LD_EXP 1
4607: PPUSH
4608: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4612: LD_EXP 1
4616: PPUSH
4617: LD_EXP 11
4621: PPUSH
4622: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4626: LD_INT 35
4628: PPUSH
4629: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4633: LD_EXP 11
4637: PUSH
4638: LD_EXP 13
4642: PUSH
4643: LD_EXP 12
4647: PUSH
4648: LD_EXP 14
4652: PUSH
4653: LD_EXP 8
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: LIST
4662: LIST
4663: LIST
4664: PPUSH
4665: LD_EXP 1
4669: PPUSH
4670: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4674: LD_EXP 1
4678: PPUSH
4679: LD_EXP 11
4683: PPUSH
4684: CALL_OW 296
4688: PUSH
4689: LD_INT 5
4691: LESS
4692: IFFALSE 4626
// ComTurnUnit ( JMM , Simms ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_EXP 11
4703: PPUSH
4704: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4708: LD_EXP 11
4712: PUSH
4713: LD_EXP 13
4717: PUSH
4718: LD_EXP 12
4722: PUSH
4723: LD_EXP 14
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: PPUSH
4734: LD_EXP 1
4738: PPUSH
4739: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4743: LD_EXP 1
4747: PUSH
4748: LD_EXP 11
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PPUSH
4757: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4761: LD_EXP 11
4765: PPUSH
4766: LD_STRING D2a-Sim-1
4768: PPUSH
4769: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4773: LD_EXP 1
4777: PPUSH
4778: LD_STRING D2a-JMM-1
4780: PPUSH
4781: CALL_OW 88
// if IsOk ( Joan ) then
4785: LD_EXP 13
4789: PPUSH
4790: CALL_OW 302
4794: IFFALSE 4846
// begin ComTurnUnit ( JMM , Joan ) ;
4796: LD_EXP 1
4800: PPUSH
4801: LD_EXP 13
4805: PPUSH
4806: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4810: LD_EXP 13
4814: PPUSH
4815: LD_STRING D2b-Joan-1
4817: PPUSH
4818: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4822: LD_EXP 1
4826: PPUSH
4827: LD_STRING D2b-JMM-1
4829: PPUSH
4830: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4834: LD_EXP 13
4838: PPUSH
4839: LD_STRING D2b-Joan-2
4841: PPUSH
4842: CALL_OW 88
// end ; if IsOk ( Denis ) then
4846: LD_EXP 12
4850: PPUSH
4851: CALL_OW 302
4855: IFFALSE 4883
// begin ComTurnUnit ( JMM , Denis ) ;
4857: LD_EXP 1
4861: PPUSH
4862: LD_EXP 12
4866: PPUSH
4867: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4871: LD_EXP 12
4875: PPUSH
4876: LD_STRING D2c-Den-1
4878: PPUSH
4879: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4883: LD_EXP 8
4887: PPUSH
4888: CALL_OW 302
4892: IFFALSE 4961
// begin repeat wait ( 0 0$1 ) ;
4894: LD_INT 35
4896: PPUSH
4897: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4901: LD_EXP 8
4905: PPUSH
4906: LD_EXP 1
4910: PPUSH
4911: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4915: LD_EXP 1
4919: PPUSH
4920: LD_EXP 8
4924: PPUSH
4925: CALL_OW 296
4929: PUSH
4930: LD_INT 5
4932: LESS
4933: IFFALSE 4894
// ComTurnUnit ( JMM , Kikuchi ) ;
4935: LD_EXP 1
4939: PPUSH
4940: LD_EXP 8
4944: PPUSH
4945: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4949: LD_EXP 8
4953: PPUSH
4954: LD_STRING D3b-Yam-1
4956: PPUSH
4957: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4961: LD_EXP 14
4965: PPUSH
4966: CALL_OW 302
4970: IFFALSE 5010
// begin ComTurnUnit ( JMM , Khatam ) ;
4972: LD_EXP 1
4976: PPUSH
4977: LD_EXP 14
4981: PPUSH
4982: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4986: LD_EXP 1
4990: PPUSH
4991: LD_STRING D2c-JMM-1
4993: PPUSH
4994: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4998: LD_EXP 14
5002: PPUSH
5003: LD_STRING D2c-Khat-1
5005: PPUSH
5006: CALL_OW 88
// end ; InGameOff ;
5010: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5014: LD_INT 22
5016: PUSH
5017: LD_INT 4
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PPUSH
5024: CALL_OW 69
5028: PPUSH
5029: LD_INT 1
5031: PPUSH
5032: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5036: LD_STRING M1a
5038: PPUSH
5039: CALL_OW 337
// joinEpsilon = 1 ;
5043: LD_ADDR_EXP 29
5047: PUSH
5048: LD_INT 1
5050: ST_TO_ADDR
// end ;
5051: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
5052: LD_INT 38
5054: PPUSH
5055: LD_INT 1
5057: PPUSH
5058: CALL_OW 289
5062: PUSH
5063: LD_INT 0
5065: EQUAL
5066: PUSH
5067: LD_INT 47
5069: PPUSH
5070: LD_INT 1
5072: PPUSH
5073: CALL_OW 289
5077: PUSH
5078: LD_INT 0
5080: EQUAL
5081: AND
5082: PUSH
5083: LD_INT 47
5085: PPUSH
5086: LD_INT 2
5088: PPUSH
5089: CALL_OW 289
5093: PUSH
5094: LD_INT 0
5096: EQUAL
5097: AND
5098: IFFALSE 5123
5100: GO 5102
5102: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5103: LD_INT 38
5105: PUSH
5106: LD_INT 47
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: LD_INT 62
5115: PPUSH
5116: LD_INT 6
5118: PPUSH
5119: CALL_OW 111
5123: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5124: LD_EXP 61
5128: PUSH
5129: LD_INT 1
5131: EQUAL
5132: IFFALSE 6264
5134: GO 5136
5136: DISABLE
5137: LD_INT 0
5139: PPUSH
5140: PPUSH
5141: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5142: LD_ADDR_VAR 0 1
5146: PUSH
5147: LD_INT 22
5149: PUSH
5150: LD_INT 1
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 25
5159: PUSH
5160: LD_INT 4
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: LD_INT 26
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: PPUSH
5182: CALL_OW 69
5186: PUSH
5187: LD_EXP 1
5191: PUSH
5192: LD_EXP 2
5196: PUSH
5197: LD_EXP 3
5201: PUSH
5202: LD_EXP 4
5206: PUSH
5207: LD_EXP 5
5211: PUSH
5212: LD_EXP 6
5216: PUSH
5217: LD_EXP 7
5221: PUSH
5222: LD_EXP 8
5226: PUSH
5227: LD_EXP 9
5231: PUSH
5232: LD_EXP 10
5236: PUSH
5237: LD_EXP 11
5241: PUSH
5242: LD_EXP 12
5246: PUSH
5247: LD_EXP 13
5251: PUSH
5252: LD_EXP 14
5256: PUSH
5257: LD_EXP 15
5261: PUSH
5262: LD_EXP 16
5266: PUSH
5267: LD_EXP 17
5271: PUSH
5272: LD_EXP 18
5276: PUSH
5277: LD_EXP 19
5281: PUSH
5282: LD_EXP 24
5286: PUSH
5287: EMPTY
5288: LIST
5289: LIST
5290: LIST
5291: LIST
5292: LIST
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: DIFF
5309: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5310: LD_ADDR_VAR 0 2
5314: PUSH
5315: LD_INT 22
5317: PUSH
5318: LD_INT 1
5320: PUSH
5321: EMPTY
5322: LIST
5323: LIST
5324: PUSH
5325: LD_INT 26
5327: PUSH
5328: LD_INT 1
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: PUSH
5335: LD_INT 2
5337: PUSH
5338: LD_INT 25
5340: PUSH
5341: LD_INT 1
5343: PUSH
5344: EMPTY
5345: LIST
5346: LIST
5347: PUSH
5348: LD_INT 25
5350: PUSH
5351: LD_INT 2
5353: PUSH
5354: EMPTY
5355: LIST
5356: LIST
5357: PUSH
5358: LD_INT 25
5360: PUSH
5361: LD_INT 3
5363: PUSH
5364: EMPTY
5365: LIST
5366: LIST
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: LIST
5372: LIST
5373: PUSH
5374: EMPTY
5375: LIST
5376: LIST
5377: LIST
5378: PPUSH
5379: CALL_OW 69
5383: PUSH
5384: LD_EXP 1
5388: PUSH
5389: LD_EXP 2
5393: PUSH
5394: LD_EXP 3
5398: PUSH
5399: LD_EXP 4
5403: PUSH
5404: LD_EXP 5
5408: PUSH
5409: LD_EXP 6
5413: PUSH
5414: LD_EXP 7
5418: PUSH
5419: LD_EXP 8
5423: PUSH
5424: LD_EXP 9
5428: PUSH
5429: LD_EXP 10
5433: PUSH
5434: LD_EXP 11
5438: PUSH
5439: LD_EXP 12
5443: PUSH
5444: LD_EXP 13
5448: PUSH
5449: LD_EXP 14
5453: PUSH
5454: LD_EXP 15
5458: PUSH
5459: LD_EXP 16
5463: PUSH
5464: LD_EXP 17
5468: PUSH
5469: LD_EXP 18
5473: PUSH
5474: LD_EXP 19
5478: PUSH
5479: LD_EXP 24
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: LIST
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: LIST
5493: LIST
5494: LIST
5495: LIST
5496: LIST
5497: LIST
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: LIST
5504: LIST
5505: DIFF
5506: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5507: LD_EXP 10
5511: PUSH
5512: LD_VAR 0 2
5516: OR
5517: PUSH
5518: LD_EXP 17
5522: PUSH
5523: LD_VAR 0 1
5527: OR
5528: AND
5529: IFFALSE 5748
// begin DialogueOn ;
5531: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5535: LD_EXP 17
5539: PPUSH
5540: CALL_OW 302
5544: IFFALSE 5560
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5546: LD_EXP 17
5550: PPUSH
5551: LD_STRING D3-Sci1-1
5553: PPUSH
5554: CALL_OW 88
5558: GO 5572
// Say ( tmp1 , D3-Sci1-1 ) ;
5560: LD_VAR 0 1
5564: PPUSH
5565: LD_STRING D3-Sci1-1
5567: PPUSH
5568: CALL_OW 88
// if IsOk ( Gary ) then
5572: LD_EXP 10
5576: PPUSH
5577: CALL_OW 302
5581: IFFALSE 5597
// Say ( Gary , D3-Gary-1 ) else
5583: LD_EXP 10
5587: PPUSH
5588: LD_STRING D3-Gary-1
5590: PPUSH
5591: CALL_OW 88
5595: GO 5609
// Say ( tmp2 , D3-Gary-1 ) ;
5597: LD_VAR 0 2
5601: PPUSH
5602: LD_STRING D3-Gary-1
5604: PPUSH
5605: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5609: LD_EXP 17
5613: PPUSH
5614: CALL_OW 302
5618: IFFALSE 5634
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5620: LD_EXP 17
5624: PPUSH
5625: LD_STRING D3-Sci1-2
5627: PPUSH
5628: CALL_OW 88
5632: GO 5646
// Say ( tmp1 , D3-Sci1-2 ) ;
5634: LD_VAR 0 1
5638: PPUSH
5639: LD_STRING D3-Sci1-2
5641: PPUSH
5642: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5646: LD_EXP 1
5650: PPUSH
5651: LD_STRING D3-JMM-2
5653: PPUSH
5654: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5658: LD_EXP 17
5662: PPUSH
5663: CALL_OW 302
5667: IFFALSE 5683
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5669: LD_EXP 17
5673: PPUSH
5674: LD_STRING D3-Sci1-3
5676: PPUSH
5677: CALL_OW 88
5681: GO 5695
// Say ( tmp1 , D3-Sci1-3 ) ;
5683: LD_VAR 0 1
5687: PPUSH
5688: LD_STRING D3-Sci1-3
5690: PPUSH
5691: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5695: LD_EXP 1
5699: PPUSH
5700: LD_STRING D3-JMM-3
5702: PPUSH
5703: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5707: LD_EXP 17
5711: PPUSH
5712: CALL_OW 302
5716: IFFALSE 5732
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5718: LD_EXP 17
5722: PPUSH
5723: LD_STRING D3-Sci1-4
5725: PPUSH
5726: CALL_OW 88
5730: GO 5744
// Say ( tmp1 , D3-Sci1-4 ) ;
5732: LD_VAR 0 1
5736: PPUSH
5737: LD_STRING D3-Sci1-4
5739: PPUSH
5740: CALL_OW 88
// DialogueOff ;
5744: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5748: LD_INT 12
5750: PPUSH
5751: LD_INT 1
5753: PPUSH
5754: LD_INT 1
5756: PPUSH
5757: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5761: LD_INT 32
5763: PPUSH
5764: LD_INT 1
5766: PPUSH
5767: LD_INT 1
5769: PPUSH
5770: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5774: LD_INT 12
5776: PPUSH
5777: LD_INT 1
5779: PPUSH
5780: LD_INT 1
5782: PPUSH
5783: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5787: LD_INT 33
5789: PPUSH
5790: LD_INT 1
5792: PPUSH
5793: LD_INT 1
5795: PPUSH
5796: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5800: LD_STRING M2
5802: PPUSH
5803: CALL_OW 337
// wait ( 3 3$0 ) ;
5807: LD_INT 6300
5809: PPUSH
5810: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// until not InBattle ( 1 ) ;
5821: LD_INT 1
5823: PPUSH
5824: CALL_OW 463
5828: NOT
5829: IFFALSE 5814
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5831: LD_EXP 11
5835: PPUSH
5836: CALL_OW 302
5840: PUSH
5841: LD_EXP 17
5845: PPUSH
5846: CALL_OW 302
5850: AND
5851: IFFALSE 6020
// begin DialogueOn ;
5853: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5857: LD_EXP 11
5861: PPUSH
5862: LD_STRING D3a-Sim-1
5864: PPUSH
5865: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5869: LD_EXP 17
5873: PPUSH
5874: LD_STRING D3a-Sci1-1
5876: PPUSH
5877: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5881: LD_EXP 11
5885: PPUSH
5886: LD_STRING D3a-Sim-2
5888: PPUSH
5889: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5893: LD_EXP 17
5897: PPUSH
5898: LD_STRING D3a-Sci1-2
5900: PPUSH
5901: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5905: LD_EXP 11
5909: PPUSH
5910: LD_STRING D3a-Sim-3
5912: PPUSH
5913: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5917: LD_EXP 17
5921: PPUSH
5922: LD_STRING D3a-Sci1-3
5924: PPUSH
5925: CALL_OW 88
// if IsOK ( Joan ) then
5929: LD_EXP 13
5933: PPUSH
5934: CALL_OW 302
5938: IFFALSE 5954
// Say ( Simms , D3a-Sim-4 ) else
5940: LD_EXP 11
5944: PPUSH
5945: LD_STRING D3a-Sim-4
5947: PPUSH
5948: CALL_OW 88
5952: GO 5966
// Say ( Simms , D3a-Sim-4a ) ;
5954: LD_EXP 11
5958: PPUSH
5959: LD_STRING D3a-Sim-4a
5961: PPUSH
5962: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5966: LD_EXP 17
5970: PPUSH
5971: LD_STRING D3a-Sci1-4
5973: PPUSH
5974: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5978: LD_EXP 11
5982: PPUSH
5983: LD_STRING D3a-Sim-5
5985: PPUSH
5986: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5990: LD_EXP 17
5994: PPUSH
5995: LD_STRING D3a-Sci1-5
5997: PPUSH
5998: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6002: LD_EXP 11
6006: PPUSH
6007: LD_STRING D3a-Sim-6
6009: PPUSH
6010: CALL_OW 88
// DialogueOff ;
6014: CALL_OW 7
// end else
6018: GO 6264
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: LD_INT 25
6037: PUSH
6038: LD_INT 4
6040: PUSH
6041: EMPTY
6042: LIST
6043: LIST
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PPUSH
6049: CALL_OW 69
6053: PUSH
6054: LD_EXP 11
6058: PUSH
6059: LD_EXP 14
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: DIFF
6068: ST_TO_ADDR
// if tmp3 > 0 then
6069: LD_VAR 0 3
6073: PUSH
6074: LD_INT 0
6076: GREATER
6077: IFFALSE 6264
// begin DialogueOn ;
6079: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6083: LD_EXP 11
6087: PPUSH
6088: LD_STRING D3a-Sim-1
6090: PPUSH
6091: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6095: LD_VAR 0 3
6099: PUSH
6100: LD_INT 1
6102: ARRAY
6103: PPUSH
6104: LD_STRING D3a-Sci1-1
6106: PPUSH
6107: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6111: LD_EXP 11
6115: PPUSH
6116: LD_STRING D3a-Sim-2
6118: PPUSH
6119: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6123: LD_VAR 0 3
6127: PUSH
6128: LD_INT 1
6130: ARRAY
6131: PPUSH
6132: LD_STRING D3a-Sci1-2
6134: PPUSH
6135: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6139: LD_EXP 11
6143: PPUSH
6144: LD_STRING D3a-Sim-3
6146: PPUSH
6147: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6151: LD_VAR 0 3
6155: PUSH
6156: LD_INT 1
6158: ARRAY
6159: PPUSH
6160: LD_STRING D3a-Sci1-3
6162: PPUSH
6163: CALL_OW 88
// if IsOK ( Joan ) then
6167: LD_EXP 13
6171: PPUSH
6172: CALL_OW 302
6176: IFFALSE 6192
// Say ( Simms , D3a-Sim-4 ) else
6178: LD_EXP 11
6182: PPUSH
6183: LD_STRING D3a-Sim-4
6185: PPUSH
6186: CALL_OW 88
6190: GO 6204
// Say ( Simms , D3a-Sim-4a ) ;
6192: LD_EXP 11
6196: PPUSH
6197: LD_STRING D3a-Sim-4a
6199: PPUSH
6200: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6204: LD_VAR 0 3
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PPUSH
6213: LD_STRING D3a-Sci1-4
6215: PPUSH
6216: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6220: LD_EXP 11
6224: PPUSH
6225: LD_STRING D3a-Sim-5
6227: PPUSH
6228: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6232: LD_VAR 0 3
6236: PUSH
6237: LD_INT 1
6239: ARRAY
6240: PPUSH
6241: LD_STRING D3a-Sci1-5
6243: PPUSH
6244: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6248: LD_EXP 11
6252: PPUSH
6253: LD_STRING D3a-Sim-6
6255: PPUSH
6256: CALL_OW 88
// DialogueOff ;
6260: CALL_OW 7
// end ; end ; end ;
6264: PPOPN 3
6266: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6267: LD_EXP 29
6271: PUSH
6272: LD_INT 1
6274: EQUAL
6275: IFFALSE 6595
6277: GO 6279
6279: DISABLE
6280: LD_INT 0
6282: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6283: LD_EXP 18
6287: PPUSH
6288: LD_STRING D4-FSol1-1
6290: PPUSH
6291: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6295: LD_STRING M3
6297: PPUSH
6298: CALL_OW 337
// PrepareRussians ;
6302: CALL 2739 0 0
// rnd = Rand ( 1 , 100 ) ;
6306: LD_ADDR_VAR 0 1
6310: PUSH
6311: LD_INT 1
6313: PPUSH
6314: LD_INT 100
6316: PPUSH
6317: CALL_OW 12
6321: ST_TO_ADDR
// if difficulty = 1 then
6322: LD_OWVAR 67
6326: PUSH
6327: LD_INT 1
6329: EQUAL
6330: IFFALSE 6413
// begin if rnd > 0 and rnd < 51 then
6332: LD_VAR 0 1
6336: PUSH
6337: LD_INT 0
6339: GREATER
6340: PUSH
6341: LD_VAR 0 1
6345: PUSH
6346: LD_INT 51
6348: LESS
6349: AND
6350: IFFALSE 6359
// BuildRussianBase ( 2 ) ;
6352: LD_INT 2
6354: PPUSH
6355: CALL 10363 0 1
// if rnd > 50 and rnd < 81 then
6359: LD_VAR 0 1
6363: PUSH
6364: LD_INT 50
6366: GREATER
6367: PUSH
6368: LD_VAR 0 1
6372: PUSH
6373: LD_INT 81
6375: LESS
6376: AND
6377: IFFALSE 6386
// BuildRussianBase ( 1 ) ;
6379: LD_INT 1
6381: PPUSH
6382: CALL 10363 0 1
// if rnd > 80 and rnd < 101 then
6386: LD_VAR 0 1
6390: PUSH
6391: LD_INT 80
6393: GREATER
6394: PUSH
6395: LD_VAR 0 1
6399: PUSH
6400: LD_INT 101
6402: LESS
6403: AND
6404: IFFALSE 6413
// BuildRussianBase ( 3 ) ;
6406: LD_INT 3
6408: PPUSH
6409: CALL 10363 0 1
// end ; if difficulty = 2 then
6413: LD_OWVAR 67
6417: PUSH
6418: LD_INT 2
6420: EQUAL
6421: IFFALSE 6504
// begin if rnd > 0 and rnd < 61 then
6423: LD_VAR 0 1
6427: PUSH
6428: LD_INT 0
6430: GREATER
6431: PUSH
6432: LD_VAR 0 1
6436: PUSH
6437: LD_INT 61
6439: LESS
6440: AND
6441: IFFALSE 6450
// BuildRussianBase ( 2 ) ;
6443: LD_INT 2
6445: PPUSH
6446: CALL 10363 0 1
// if rnd > 60 and rnd < 81 then
6450: LD_VAR 0 1
6454: PUSH
6455: LD_INT 60
6457: GREATER
6458: PUSH
6459: LD_VAR 0 1
6463: PUSH
6464: LD_INT 81
6466: LESS
6467: AND
6468: IFFALSE 6477
// BuildRussianBase ( 1 ) ;
6470: LD_INT 1
6472: PPUSH
6473: CALL 10363 0 1
// if rnd > 80 and rnd < 101 then
6477: LD_VAR 0 1
6481: PUSH
6482: LD_INT 80
6484: GREATER
6485: PUSH
6486: LD_VAR 0 1
6490: PUSH
6491: LD_INT 101
6493: LESS
6494: AND
6495: IFFALSE 6504
// BuildRussianBase ( 3 ) ;
6497: LD_INT 3
6499: PPUSH
6500: CALL 10363 0 1
// end ; if difficulty = 3 then
6504: LD_OWVAR 67
6508: PUSH
6509: LD_INT 3
6511: EQUAL
6512: IFFALSE 6595
// begin if rnd > 0 and rnd < 71 then
6514: LD_VAR 0 1
6518: PUSH
6519: LD_INT 0
6521: GREATER
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: LD_INT 71
6530: LESS
6531: AND
6532: IFFALSE 6541
// BuildRussianBase ( 3 ) ;
6534: LD_INT 3
6536: PPUSH
6537: CALL 10363 0 1
// if rnd > 70 and rnd < 81 then
6541: LD_VAR 0 1
6545: PUSH
6546: LD_INT 70
6548: GREATER
6549: PUSH
6550: LD_VAR 0 1
6554: PUSH
6555: LD_INT 81
6557: LESS
6558: AND
6559: IFFALSE 6568
// BuildRussianBase ( 2 ) ;
6561: LD_INT 2
6563: PPUSH
6564: CALL 10363 0 1
// if rnd > 80 and rnd < 101 then
6568: LD_VAR 0 1
6572: PUSH
6573: LD_INT 80
6575: GREATER
6576: PUSH
6577: LD_VAR 0 1
6581: PUSH
6582: LD_INT 101
6584: LESS
6585: AND
6586: IFFALSE 6595
// BuildRussianBase ( 1 ) ;
6588: LD_INT 1
6590: PPUSH
6591: CALL 10363 0 1
// end ; end ;
6595: PPOPN 1
6597: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6598: LD_INT 54
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 321
6608: PUSH
6609: LD_INT 2
6611: EQUAL
6612: PUSH
6613: LD_INT 21
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: CALL_OW 321
6623: PUSH
6624: LD_INT 2
6626: EQUAL
6627: OR
6628: PUSH
6629: LD_INT 22
6631: PPUSH
6632: LD_INT 1
6634: PPUSH
6635: CALL_OW 321
6639: PUSH
6640: LD_INT 2
6642: EQUAL
6643: OR
6644: IFFALSE 6956
6646: GO 6648
6648: DISABLE
6649: LD_INT 0
6651: PPUSH
6652: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6653: LD_EXP 17
6657: PPUSH
6658: CALL_OW 302
6662: IFFALSE 6676
// tmp := DeltaDoctor else
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: LD_EXP 17
6673: ST_TO_ADDR
6674: GO 6686
// tmp := Denis ;
6676: LD_ADDR_VAR 0 2
6680: PUSH
6681: LD_EXP 12
6685: ST_TO_ADDR
// if tmp then
6686: LD_VAR 0 2
6690: IFFALSE 6784
// begin DialogueOn ;
6692: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6696: LD_EXP 1
6700: PPUSH
6701: LD_STRING D6-JMM-1
6703: PPUSH
6704: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6708: LD_VAR 0 2
6712: PPUSH
6713: LD_STRING D6-Sci1-1
6715: PPUSH
6716: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6720: LD_EXP 1
6724: PPUSH
6725: LD_STRING D6-JMM-2
6727: PPUSH
6728: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6732: LD_VAR 0 2
6736: PPUSH
6737: LD_STRING D6-Sci1-2
6739: PPUSH
6740: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6744: LD_EXP 1
6748: PPUSH
6749: LD_STRING D6-JMM-3
6751: PPUSH
6752: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6756: LD_VAR 0 2
6760: PPUSH
6761: LD_STRING D6-Sci1-3
6763: PPUSH
6764: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6768: LD_EXP 1
6772: PPUSH
6773: LD_STRING D6-JMM-4
6775: PPUSH
6776: CALL_OW 88
// DialogueOff ;
6780: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6784: LD_INT 1050
6786: PPUSH
6787: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6791: LD_EXP 49
6795: PUSH
6796: LD_INT 0
6798: EQUAL
6799: PUSH
6800: LD_EXP 14
6804: PPUSH
6805: CALL_OW 302
6809: AND
6810: IFFALSE 6868
// begin DialogueOn ;
6812: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6816: LD_EXP 27
6820: PPUSH
6821: LD_STRING D5-Ar1-1
6823: PPUSH
6824: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6828: LD_EXP 26
6832: PPUSH
6833: LD_STRING D5-Diet-1
6835: PPUSH
6836: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6840: LD_EXP 27
6844: PPUSH
6845: LD_STRING D5-Ar1-2
6847: PPUSH
6848: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6852: LD_EXP 26
6856: PPUSH
6857: LD_STRING D5-Diet-2
6859: PPUSH
6860: CALL_OW 88
// DialogueOff ;
6864: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6868: LD_INT 2100
6870: PUSH
6871: LD_INT 3150
6873: PUSH
6874: LD_INT 4200
6876: PUSH
6877: LD_INT 5250
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: PUSH
6886: LD_INT 1
6888: PPUSH
6889: LD_INT 4
6891: PPUSH
6892: CALL_OW 12
6896: ARRAY
6897: PPUSH
6898: CALL_OW 67
// if arabianTrait = 0 then
6902: LD_EXP 49
6906: PUSH
6907: LD_INT 0
6909: EQUAL
6910: IFFALSE 6956
// begin arabianTrait = 1 ;
6912: LD_ADDR_EXP 49
6916: PUSH
6917: LD_INT 1
6919: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6920: LD_INT 2
6922: PPUSH
6923: LD_INT 3
6925: PPUSH
6926: LD_INT 1
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6936: LD_INT 2
6938: PPUSH
6939: LD_INT 6
6941: PPUSH
6942: LD_INT 1
6944: PPUSH
6945: LD_INT 1
6947: PPUSH
6948: CALL_OW 80
// PrepareArabianTrait ;
6952: CALL 6959 0 0
// end ; end ;
6956: PPOPN 2
6958: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_INT 22
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PPUSH
6994: CALL_OW 69
6998: PUSH
6999: FOR_IN
7000: IFFALSE 7013
// ComExitBuilding ( i ) ;
7002: LD_VAR 0 2
7006: PPUSH
7007: CALL_OW 122
7011: GO 6999
7013: POP
7014: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
7015: LD_ADDR_VAR 0 2
7019: PUSH
7020: LD_INT 22
7022: PUSH
7023: LD_INT 2
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 25
7032: PUSH
7033: LD_INT 3
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PPUSH
7044: CALL_OW 69
7048: PUSH
7049: FOR_IN
7050: IFFALSE 7063
// ComExitVehicle ( i ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: CALL_OW 121
7061: GO 7049
7063: POP
7064: POP
// SetClass ( Dietrich , 8 ) ;
7065: LD_EXP 26
7069: PPUSH
7070: LD_INT 8
7072: PPUSH
7073: CALL_OW 336
// wait ( 0 0$3 ) ;
7077: LD_INT 105
7079: PPUSH
7080: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7084: LD_INT 76
7086: PPUSH
7087: LD_INT 19
7089: PPUSH
7090: CALL_OW 84
// DialogueOn ;
7094: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7098: LD_INT 22
7100: PUSH
7101: LD_INT 1
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 26
7110: PUSH
7111: LD_INT 1
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: LD_INT 25
7123: PUSH
7124: LD_INT 1
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 25
7133: PUSH
7134: LD_INT 2
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 25
7143: PUSH
7144: LD_INT 3
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 25
7153: PUSH
7154: LD_INT 4
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PUSH
7161: LD_INT 25
7163: PUSH
7164: LD_INT 5
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: EMPTY
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: PPUSH
7184: CALL_OW 69
7188: PPUSH
7189: LD_STRING D8-Sol1-1
7191: PPUSH
7192: LD_STRING D8-Sol1-1
7194: PPUSH
7195: CALL 9694 0 3
// if IsOK ( DeltaDoctor ) then
7199: LD_EXP 17
7203: PPUSH
7204: CALL_OW 302
7208: IFFALSE 7224
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7210: LD_EXP 17
7214: PPUSH
7215: LD_STRING D8-Sci1-1
7217: PPUSH
7218: CALL_OW 88
7222: GO 7325
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7224: LD_INT 22
7226: PUSH
7227: LD_INT 1
7229: PUSH
7230: EMPTY
7231: LIST
7232: LIST
7233: PUSH
7234: LD_INT 26
7236: PUSH
7237: LD_INT 1
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 2
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 1
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 25
7259: PUSH
7260: LD_INT 2
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: LD_INT 25
7289: PUSH
7290: LD_INT 5
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: LIST
7309: PPUSH
7310: CALL_OW 69
7314: PPUSH
7315: LD_STRING D8-Sol1-1
7317: PPUSH
7318: LD_STRING D8-Sol1-1
7320: PPUSH
7321: CALL 9694 0 3
// Say ( JMM , D8-JMM-1 ) ;
7325: LD_EXP 1
7329: PPUSH
7330: LD_STRING D8-JMM-1
7332: PPUSH
7333: CALL_OW 88
// DialogueOff ;
7337: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7341: LD_INT 2
7343: PPUSH
7344: LD_INT 2
7346: PPUSH
7347: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7351: LD_INT 1
7353: PPUSH
7354: LD_INT 2
7356: PPUSH
7357: LD_INT 2
7359: PPUSH
7360: LD_INT 1
7362: PPUSH
7363: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7367: LD_INT 3
7369: PPUSH
7370: LD_INT 2
7372: PPUSH
7373: LD_INT 1
7375: PPUSH
7376: LD_INT 1
7378: PPUSH
7379: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7383: LD_STRING M4
7385: PPUSH
7386: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7390: LD_ADDR_VAR 0 2
7394: PUSH
7395: LD_INT 22
7397: PUSH
7398: LD_INT 2
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 21
7407: PUSH
7408: LD_INT 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: LD_INT 2
7417: PUSH
7418: LD_INT 25
7420: PUSH
7421: LD_INT 1
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: PUSH
7428: LD_INT 25
7430: PUSH
7431: LD_INT 8
7433: PUSH
7434: EMPTY
7435: LIST
7436: LIST
7437: PUSH
7438: LD_INT 25
7440: PUSH
7441: LD_INT 15
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: LIST
7458: PPUSH
7459: CALL_OW 69
7463: PUSH
7464: FOR_IN
7465: IFFALSE 7605
// begin ComExitBuilding ( i ) ;
7467: LD_VAR 0 2
7471: PPUSH
7472: CALL_OW 122
// wait ( 0 0$1 ) ;
7476: LD_INT 35
7478: PPUSH
7479: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7483: LD_VAR 0 2
7487: PPUSH
7488: LD_INT 77
7490: PPUSH
7491: LD_INT 10
7493: PPUSH
7494: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_INT 82
7505: PPUSH
7506: LD_INT 5
7508: PPUSH
7509: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7513: LD_VAR 0 2
7517: PPUSH
7518: LD_INT 95
7520: PPUSH
7521: LD_INT 12
7523: PPUSH
7524: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7528: LD_VAR 0 2
7532: PPUSH
7533: LD_INT 102
7535: PPUSH
7536: LD_INT 11
7538: PPUSH
7539: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7543: LD_VAR 0 2
7547: PPUSH
7548: LD_INT 116
7550: PPUSH
7551: LD_INT 15
7553: PPUSH
7554: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7558: LD_VAR 0 2
7562: PPUSH
7563: LD_INT 140
7565: PPUSH
7566: LD_INT 25
7568: PPUSH
7569: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7573: LD_VAR 0 2
7577: PPUSH
7578: LD_INT 160
7580: PPUSH
7581: LD_INT 56
7583: PPUSH
7584: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7588: LD_VAR 0 2
7592: PPUSH
7593: LD_INT 189
7595: PPUSH
7596: LD_INT 79
7598: PPUSH
7599: CALL_OW 174
// end ;
7603: GO 7464
7605: POP
7606: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7607: LD_ADDR_VAR 0 2
7611: PUSH
7612: LD_INT 22
7614: PUSH
7615: LD_INT 2
7617: PUSH
7618: EMPTY
7619: LIST
7620: LIST
7621: PUSH
7622: LD_INT 21
7624: PUSH
7625: LD_INT 1
7627: PUSH
7628: EMPTY
7629: LIST
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 25
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 4
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 16
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: PPUSH
7687: CALL_OW 69
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7833
// begin ComExitBuilding ( i ) ;
7695: LD_VAR 0 2
7699: PPUSH
7700: CALL_OW 122
// wait ( 0 0$1 ) ;
7704: LD_INT 35
7706: PPUSH
7707: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7711: LD_VAR 0 2
7715: PPUSH
7716: LD_INT 77
7718: PPUSH
7719: LD_INT 10
7721: PPUSH
7722: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7726: LD_VAR 0 2
7730: PPUSH
7731: LD_INT 82
7733: PPUSH
7734: LD_INT 5
7736: PPUSH
7737: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7741: LD_VAR 0 2
7745: PPUSH
7746: LD_INT 95
7748: PPUSH
7749: LD_INT 12
7751: PPUSH
7752: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7756: LD_VAR 0 2
7760: PPUSH
7761: LD_INT 102
7763: PPUSH
7764: LD_INT 11
7766: PPUSH
7767: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_INT 116
7778: PPUSH
7779: LD_INT 15
7781: PPUSH
7782: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7786: LD_VAR 0 2
7790: PPUSH
7791: LD_INT 140
7793: PPUSH
7794: LD_INT 25
7796: PPUSH
7797: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7801: LD_VAR 0 2
7805: PPUSH
7806: LD_INT 160
7808: PPUSH
7809: LD_INT 56
7811: PPUSH
7812: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7816: LD_VAR 0 2
7820: PPUSH
7821: LD_INT 189
7823: PPUSH
7824: LD_INT 79
7826: PPUSH
7827: CALL_OW 171
// end ;
7831: GO 7692
7833: POP
7834: POP
// arabianAttackersAI = 1 ;
7835: LD_ADDR_EXP 46
7839: PUSH
7840: LD_INT 1
7842: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7843: LD_INT 350
7845: PPUSH
7846: CALL_OW 67
// if IsOk ( Gary ) then
7850: LD_EXP 10
7854: PPUSH
7855: CALL_OW 302
7859: IFFALSE 7873
// Say ( Gary , D8a-Gary-1 ) ;
7861: LD_EXP 10
7865: PPUSH
7866: LD_STRING D8a-Gary-1
7868: PPUSH
7869: CALL_OW 88
// wait ( 0 0$5 ) ;
7873: LD_INT 175
7875: PPUSH
7876: CALL_OW 67
// if IsOK ( Khatam ) then
7880: LD_EXP 14
7884: PPUSH
7885: CALL_OW 302
7889: IFFALSE 8425
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7891: LD_ADDR_VAR 0 3
7895: PUSH
7896: LD_INT 22
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PUSH
7906: LD_INT 2
7908: PUSH
7909: LD_INT 25
7911: PUSH
7912: LD_INT 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 2
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 25
7931: PUSH
7932: LD_INT 3
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: LD_INT 25
7941: PUSH
7942: LD_INT 4
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 25
7951: PUSH
7952: LD_INT 5
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: PUSH
7959: LD_INT 25
7961: PUSH
7962: LD_INT 8
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PPUSH
7982: CALL_OW 69
7986: PUSH
7987: LD_EXP 1
7991: PUSH
7992: LD_EXP 2
7996: PUSH
7997: LD_EXP 3
8001: PUSH
8002: LD_EXP 4
8006: PUSH
8007: LD_EXP 5
8011: PUSH
8012: LD_EXP 6
8016: PUSH
8017: LD_EXP 7
8021: PUSH
8022: LD_EXP 8
8026: PUSH
8027: LD_EXP 9
8031: PUSH
8032: LD_EXP 10
8036: PUSH
8037: LD_EXP 11
8041: PUSH
8042: LD_EXP 12
8046: PUSH
8047: LD_EXP 13
8051: PUSH
8052: LD_EXP 14
8056: PUSH
8057: LD_EXP 15
8061: PUSH
8062: LD_EXP 16
8066: PUSH
8067: LD_EXP 17
8071: PUSH
8072: LD_EXP 19
8076: PUSH
8077: LD_EXP 24
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: LIST
8102: DIFF
8103: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8104: LD_EXP 14
8108: PPUSH
8109: LD_INT 8
8111: PPUSH
8112: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8116: LD_EXP 14
8120: PPUSH
8121: CALL_OW 122
// wait ( 0 0$1 ) ;
8125: LD_INT 35
8127: PPUSH
8128: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8132: LD_EXP 14
8136: PPUSH
8137: CALL_OW 121
// wait ( 0 0$1 ) ;
8141: LD_INT 35
8143: PPUSH
8144: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8148: LD_EXP 14
8152: PPUSH
8153: LD_INT 7
8155: PPUSH
8156: CALL_OW 113
// if not tmp then
8160: LD_VAR 0 3
8164: NOT
8165: IFFALSE 8169
// exit ;
8167: GO 8425
// DialogueOn ;
8169: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8173: LD_VAR 0 3
8177: PUSH
8178: LD_INT 1
8180: ARRAY
8181: PPUSH
8182: CALL_OW 258
8186: PUSH
8187: LD_INT 1
8189: EQUAL
8190: IFFALSE 8210
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8192: LD_VAR 0 3
8196: PUSH
8197: LD_INT 1
8199: ARRAY
8200: PPUSH
8201: LD_STRING D8b-Sol1-1
8203: PPUSH
8204: CALL_OW 88
8208: GO 8226
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8210: LD_VAR 0 3
8214: PUSH
8215: LD_INT 1
8217: ARRAY
8218: PPUSH
8219: LD_STRING D8b-FSol1-1
8221: PPUSH
8222: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8226: LD_EXP 14
8230: PPUSH
8231: LD_STRING D8b-Khat-1
8233: PPUSH
8234: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8238: LD_VAR 0 3
8242: PUSH
8243: LD_INT 1
8245: ARRAY
8246: PPUSH
8247: CALL_OW 258
8251: PUSH
8252: LD_INT 1
8254: EQUAL
8255: IFFALSE 8275
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8257: LD_VAR 0 3
8261: PUSH
8262: LD_INT 1
8264: ARRAY
8265: PPUSH
8266: LD_STRING D8b-Sol1-2
8268: PPUSH
8269: CALL_OW 88
8273: GO 8291
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8275: LD_VAR 0 3
8279: PUSH
8280: LD_INT 1
8282: ARRAY
8283: PPUSH
8284: LD_STRING D8b-FSol1-2
8286: PPUSH
8287: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8291: LD_EXP 14
8295: PPUSH
8296: LD_STRING D8b-Khat-2
8298: PPUSH
8299: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 258
8316: PUSH
8317: LD_INT 1
8319: EQUAL
8320: IFFALSE 8340
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8322: LD_VAR 0 3
8326: PUSH
8327: LD_INT 1
8329: ARRAY
8330: PPUSH
8331: LD_STRING D8b-Sol1-3
8333: PPUSH
8334: CALL_OW 88
8338: GO 8356
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8340: LD_VAR 0 3
8344: PUSH
8345: LD_INT 1
8347: ARRAY
8348: PPUSH
8349: LD_STRING D8b-FSol1-3
8351: PPUSH
8352: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8356: LD_EXP 14
8360: PPUSH
8361: LD_STRING D8b-Khat-3
8363: PPUSH
8364: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 1
8375: ARRAY
8376: PPUSH
8377: CALL_OW 258
8381: PUSH
8382: LD_INT 1
8384: EQUAL
8385: IFFALSE 8405
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8387: LD_VAR 0 3
8391: PUSH
8392: LD_INT 1
8394: ARRAY
8395: PPUSH
8396: LD_STRING D8b-Sol1-4
8398: PPUSH
8399: CALL_OW 88
8403: GO 8421
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8405: LD_VAR 0 3
8409: PUSH
8410: LD_INT 1
8412: ARRAY
8413: PPUSH
8414: LD_STRING D8b-FSol1-4
8416: PPUSH
8417: CALL_OW 88
// DialogueOff ;
8421: CALL_OW 7
// end ; end ;
8425: LD_VAR 0 1
8429: RET
// every 0 0$1 do var i ;
8430: GO 8432
8432: DISABLE
8433: LD_INT 0
8435: PPUSH
// begin enable ;
8436: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8437: LD_ADDR_VAR 0 1
8441: PUSH
8442: LD_INT 7
8444: PPUSH
8445: LD_INT 22
8447: PUSH
8448: LD_INT 2
8450: PUSH
8451: EMPTY
8452: LIST
8453: LIST
8454: PPUSH
8455: CALL_OW 70
8459: PUSH
8460: FOR_IN
8461: IFFALSE 8527
// begin if GetClass ( i ) = 4 then
8463: LD_VAR 0 1
8467: PPUSH
8468: CALL_OW 257
8472: PUSH
8473: LD_INT 4
8475: EQUAL
8476: IFFALSE 8488
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8478: LD_INT 1
8480: PPUSH
8481: LD_STRING 10_ScientistsEscape_1
8483: PPUSH
8484: CALL_OW 39
// if i = Dietrich then
8488: LD_VAR 0 1
8492: PUSH
8493: LD_EXP 26
8497: EQUAL
8498: IFFALSE 8508
// GensherStatus = 1 ;
8500: LD_ADDR_EXP 51
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// arabianEscape = 1 ;
8508: LD_ADDR_EXP 47
8512: PUSH
8513: LD_INT 1
8515: ST_TO_ADDR
// RemoveUnit ( i ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: CALL_OW 64
// end ;
8525: GO 8460
8527: POP
8528: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8529: LD_EXP 14
8533: PPUSH
8534: LD_INT 7
8536: PPUSH
8537: CALL_OW 308
8541: IFFALSE 8560
// begin KhatamStatus = 1 ;
8543: LD_ADDR_EXP 52
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8551: LD_EXP 14
8555: PPUSH
8556: CALL_OW 64
// end ; end ;
8560: PPOPN 1
8562: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8563: LD_EXP 14
8567: PPUSH
8568: CALL_OW 301
8572: IFFALSE 8585
8574: GO 8576
8576: DISABLE
// KhatamStatus = 0 ;
8577: LD_ADDR_EXP 52
8581: PUSH
8582: LD_INT 0
8584: ST_TO_ADDR
8585: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8586: LD_INT 22
8588: PUSH
8589: LD_INT 2
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: PUSH
8596: LD_INT 21
8598: PUSH
8599: LD_INT 1
8601: PUSH
8602: EMPTY
8603: LIST
8604: LIST
8605: PUSH
8606: EMPTY
8607: LIST
8608: LIST
8609: PPUSH
8610: CALL_OW 69
8614: PUSH
8615: LD_INT 0
8617: EQUAL
8618: PUSH
8619: LD_INT 22
8621: PUSH
8622: LD_INT 4
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 21
8631: PUSH
8632: LD_INT 1
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PPUSH
8643: CALL_OW 69
8647: PUSH
8648: LD_INT 0
8650: EQUAL
8651: AND
8652: IFFALSE 8665
8654: GO 8656
8656: DISABLE
// arabianDefeated = 1 ;
8657: LD_ADDR_EXP 48
8661: PUSH
8662: LD_INT 1
8664: ST_TO_ADDR
8665: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8666: LD_INT 54
8668: PPUSH
8669: LD_INT 1
8671: PPUSH
8672: CALL_OW 321
8676: PUSH
8677: LD_INT 2
8679: EQUAL
8680: PUSH
8681: LD_INT 55
8683: PPUSH
8684: LD_INT 1
8686: PPUSH
8687: CALL_OW 321
8691: PUSH
8692: LD_INT 2
8694: EQUAL
8695: AND
8696: PUSH
8697: LD_INT 21
8699: PPUSH
8700: LD_INT 1
8702: PPUSH
8703: CALL_OW 321
8707: PUSH
8708: LD_INT 2
8710: EQUAL
8711: AND
8712: PUSH
8713: LD_INT 22
8715: PPUSH
8716: LD_INT 1
8718: PPUSH
8719: CALL_OW 321
8723: PUSH
8724: LD_INT 2
8726: EQUAL
8727: AND
8728: PUSH
8729: LD_INT 12
8731: PPUSH
8732: LD_INT 1
8734: PPUSH
8735: CALL_OW 321
8739: PUSH
8740: LD_INT 2
8742: EQUAL
8743: AND
8744: PUSH
8745: LD_INT 32
8747: PPUSH
8748: LD_INT 1
8750: PPUSH
8751: CALL_OW 321
8755: PUSH
8756: LD_INT 2
8758: EQUAL
8759: AND
8760: PUSH
8761: LD_EXP 59
8765: PUSH
8766: LD_INT 0
8768: EQUAL
8769: AND
8770: PUSH
8771: LD_EXP 49
8775: PUSH
8776: LD_INT 0
8778: EQUAL
8779: AND
8780: PUSH
8781: LD_OWVAR 1
8785: PUSH
8786: LD_INT 31500
8788: GREATEREQUAL
8789: AND
8790: IFFALSE 8807
8792: GO 8794
8794: DISABLE
// begin arabianTrait = 1 ;
8795: LD_ADDR_EXP 49
8799: PUSH
8800: LD_INT 1
8802: ST_TO_ADDR
// PrepareArabianTrait ;
8803: CALL 6959 0 0
// end ;
8807: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8808: LD_EXP 29
8812: PUSH
8813: LD_STRING 02_mikhailStatus_1
8815: PPUSH
8816: LD_INT 0
8818: PPUSH
8819: CALL_OW 30
8823: PUSH
8824: LD_INT 1
8826: EQUAL
8827: AND
8828: PUSH
8829: LD_INT 22
8831: PUSH
8832: LD_INT 5
8834: PUSH
8835: EMPTY
8836: LIST
8837: LIST
8838: PPUSH
8839: CALL_OW 69
8843: PUSH
8844: LD_INT 0
8846: EQUAL
8847: AND
8848: PUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 2
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PPUSH
8859: CALL_OW 69
8863: PUSH
8864: LD_INT 0
8866: EQUAL
8867: PUSH
8868: LD_EXP 49
8872: PUSH
8873: LD_INT 0
8875: EQUAL
8876: OR
8877: AND
8878: IFFALSE 8887
8880: GO 8882
8882: DISABLE
// PrepareCornell ;
8883: CALL 2581 0 0
8887: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8888: LD_INT 22
8890: PUSH
8891: LD_INT 1
8893: PUSH
8894: EMPTY
8895: LIST
8896: LIST
8897: PPUSH
8898: CALL_OW 69
8902: PPUSH
8903: LD_EXP 19
8907: PPUSH
8908: CALL_OW 74
8912: PPUSH
8913: LD_EXP 19
8917: PPUSH
8918: CALL_OW 296
8922: PUSH
8923: LD_INT 9
8925: LESS
8926: IFFALSE 9147
8928: GO 8930
8930: DISABLE
// begin InGameOn ;
8931: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8935: LD_EXP 19
8939: PPUSH
8940: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8944: LD_EXP 19
8948: PPUSH
8949: LD_STRING D7-Corn-1
8951: PPUSH
8952: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8956: LD_INT 22
8958: PUSH
8959: LD_INT 1
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 2
8968: PUSH
8969: LD_INT 25
8971: PUSH
8972: LD_INT 1
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 25
8981: PUSH
8982: LD_INT 2
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PUSH
8989: LD_INT 25
8991: PUSH
8992: LD_INT 3
8994: PUSH
8995: EMPTY
8996: LIST
8997: LIST
8998: PUSH
8999: LD_INT 25
9001: PUSH
9002: LD_INT 4
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PUSH
9009: LD_INT 25
9011: PUSH
9012: LD_INT 5
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 69
9035: PPUSH
9036: LD_STRING D7-Sol1-1
9038: PPUSH
9039: LD_STRING D7-FSol1-1
9041: PPUSH
9042: CALL 9694 0 3
// CenterNowOnUnits ( Cornell ) ;
9046: LD_EXP 19
9050: PPUSH
9051: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9055: LD_EXP 19
9059: PPUSH
9060: LD_STRING D7-Corn-2
9062: PPUSH
9063: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9067: LD_EXP 1
9071: PPUSH
9072: LD_STRING D7-JMM-2
9074: PPUSH
9075: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9079: LD_EXP 19
9083: PPUSH
9084: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9088: LD_EXP 19
9092: PPUSH
9093: LD_STRING D7-Corn-3
9095: PPUSH
9096: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9100: LD_EXP 19
9104: PPUSH
9105: LD_INT 250
9107: PPUSH
9108: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9112: LD_EXP 19
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 235
// wait ( 0 0$1 ) ;
9124: LD_INT 35
9126: PPUSH
9127: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9131: LD_EXP 1
9135: PPUSH
9136: LD_STRING D7-JMM-3
9138: PPUSH
9139: CALL_OW 88
// InGameOff ;
9143: CALL_OW 9
// end ;
9147: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9148: LD_EXP 19
9152: PPUSH
9153: CALL_OW 255
9157: PUSH
9158: LD_INT 1
9160: EQUAL
9161: PUSH
9162: LD_EXP 19
9166: PPUSH
9167: CALL_OW 256
9171: PUSH
9172: LD_INT 251
9174: GREATER
9175: AND
9176: IFFALSE 9369
9178: GO 9180
9180: DISABLE
// begin DialogueOn ;
9181: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9185: LD_EXP 1
9189: PPUSH
9190: LD_STRING D7a-JMM-1
9192: PPUSH
9193: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9197: LD_EXP 19
9201: PPUSH
9202: LD_STRING D7a-Corn-1
9204: PPUSH
9205: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9209: LD_EXP 1
9213: PPUSH
9214: LD_STRING D7a-JMM-2
9216: PPUSH
9217: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9221: LD_EXP 19
9225: PPUSH
9226: LD_STRING D7a-Corn-2
9228: PPUSH
9229: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9233: LD_EXP 1
9237: PPUSH
9238: LD_STRING D7a-JMM-3
9240: PPUSH
9241: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9245: LD_EXP 19
9249: PPUSH
9250: LD_STRING D7a-Corn-3
9252: PPUSH
9253: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9257: LD_EXP 1
9261: PPUSH
9262: LD_STRING D7a-JMM-4
9264: PPUSH
9265: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9269: LD_EXP 19
9273: PPUSH
9274: LD_STRING D7a-Corn-4
9276: PPUSH
9277: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9281: LD_EXP 1
9285: PPUSH
9286: LD_STRING D7a-JMM-5
9288: PPUSH
9289: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9293: LD_EXP 19
9297: PPUSH
9298: LD_STRING D7a-Corn-5
9300: PPUSH
9301: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9305: LD_EXP 1
9309: PPUSH
9310: LD_STRING D7a-JMM-6
9312: PPUSH
9313: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9317: LD_EXP 19
9321: PPUSH
9322: LD_STRING D7a-Corn-6
9324: PPUSH
9325: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9329: LD_EXP 1
9333: PPUSH
9334: LD_STRING D7a-JMM-7
9336: PPUSH
9337: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9341: LD_EXP 19
9345: PPUSH
9346: LD_STRING D7a-Corn-7
9348: PPUSH
9349: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9353: LD_EXP 1
9357: PPUSH
9358: LD_STRING D7a-JMM-8
9360: PPUSH
9361: CALL_OW 88
// DialogueOff ;
9365: CALL_OW 7
// end ;
9369: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9370: LD_EXP 58
9374: PUSH
9375: LD_EXP 1
9379: PPUSH
9380: CALL_OW 302
9384: PUSH
9385: LD_EXP 5
9389: PPUSH
9390: CALL_OW 302
9394: OR
9395: AND
9396: IFFALSE 9486
9398: GO 9400
9400: DISABLE
// begin Wait ( 0 0$2 ) ;
9401: LD_INT 70
9403: PPUSH
9404: CALL_OW 67
// DialogueOn ;
9408: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9412: LD_EXP 58
9416: PUSH
9417: LD_INT 1
9419: ARRAY
9420: PPUSH
9421: LD_EXP 58
9425: PUSH
9426: LD_INT 2
9428: ARRAY
9429: PPUSH
9430: CALL_OW 86
// if IsOk ( Cyrus ) then
9434: LD_EXP 5
9438: PPUSH
9439: CALL_OW 302
9443: IFFALSE 9459
// Say ( Cyrus , D10-Cyrus-1 ) else
9445: LD_EXP 5
9449: PPUSH
9450: LD_STRING D10-Cyrus-1
9452: PPUSH
9453: CALL_OW 88
9457: GO 9482
// if IsOk ( JMM ) then
9459: LD_EXP 1
9463: PPUSH
9464: CALL_OW 302
9468: IFFALSE 9482
// Say ( JMM , D10-JMM-1 ) ;
9470: LD_EXP 1
9474: PPUSH
9475: LD_STRING D10-JMM-1
9477: PPUSH
9478: CALL_OW 88
// DialogueOff ;
9482: CALL_OW 7
// end ;
9486: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9487: LD_INT 12
9489: PPUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 321
9497: PUSH
9498: LD_INT 2
9500: EQUAL
9501: IFFALSE 9513
9503: GO 9505
9505: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9506: LD_STRING M2b
9508: PPUSH
9509: CALL_OW 337
9513: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9514: LD_INT 32
9516: PPUSH
9517: LD_INT 1
9519: PPUSH
9520: CALL_OW 321
9524: PUSH
9525: LD_INT 2
9527: EQUAL
9528: IFFALSE 9540
9530: GO 9532
9532: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9533: LD_STRING M2c
9535: PPUSH
9536: CALL_OW 337
9540: END
// every 0 0$1 trigger arabianDefeated = 1 do
9541: LD_EXP 48
9545: PUSH
9546: LD_INT 1
9548: EQUAL
9549: IFFALSE 9561
9551: GO 9553
9553: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9554: LD_STRING M4a
9556: PPUSH
9557: CALL_OW 337
9561: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9562: LD_INT 54
9564: PPUSH
9565: LD_INT 1
9567: PPUSH
9568: CALL_OW 321
9572: PUSH
9573: LD_INT 2
9575: EQUAL
9576: PUSH
9577: LD_INT 55
9579: PPUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 321
9587: PUSH
9588: LD_INT 2
9590: EQUAL
9591: AND
9592: PUSH
9593: LD_INT 21
9595: PPUSH
9596: LD_INT 1
9598: PPUSH
9599: CALL_OW 321
9603: PUSH
9604: LD_INT 2
9606: EQUAL
9607: AND
9608: PUSH
9609: LD_INT 22
9611: PPUSH
9612: LD_INT 1
9614: PPUSH
9615: CALL_OW 321
9619: PUSH
9620: LD_INT 2
9622: EQUAL
9623: AND
9624: IFFALSE 9636
9626: GO 9628
9628: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9629: LD_STRING M2a
9631: PPUSH
9632: CALL_OW 337
9636: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9637: LD_INT 0
9639: PPUSH
9640: PPUSH
// if exist_mode then
9641: LD_VAR 0 2
9645: IFFALSE 9664
// unit := CreateCharacter ( ident ) else
9647: LD_ADDR_VAR 0 4
9651: PUSH
9652: LD_VAR 0 1
9656: PPUSH
9657: CALL_OW 34
9661: ST_TO_ADDR
9662: GO 9679
// unit := NewCharacter ( ident ) ;
9664: LD_ADDR_VAR 0 4
9668: PUSH
9669: LD_VAR 0 1
9673: PPUSH
9674: CALL_OW 25
9678: ST_TO_ADDR
// result := unit ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 4
9688: ST_TO_ADDR
// end ;
9689: LD_VAR 0 3
9693: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9694: LD_INT 0
9696: PPUSH
9697: PPUSH
9698: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9699: LD_ADDR_VAR 0 1
9703: PUSH
9704: LD_VAR 0 1
9708: PUSH
9709: LD_EXP 1
9713: PUSH
9714: LD_EXP 2
9718: PUSH
9719: LD_EXP 3
9723: PUSH
9724: LD_EXP 4
9728: PUSH
9729: LD_EXP 5
9733: PUSH
9734: LD_EXP 6
9738: PUSH
9739: LD_EXP 7
9743: PUSH
9744: LD_EXP 8
9748: PUSH
9749: LD_EXP 9
9753: PUSH
9754: LD_EXP 10
9758: PUSH
9759: LD_EXP 11
9763: PUSH
9764: LD_EXP 12
9768: PUSH
9769: LD_EXP 13
9773: PUSH
9774: LD_EXP 14
9778: PUSH
9779: LD_EXP 15
9783: PUSH
9784: LD_EXP 16
9788: PUSH
9789: LD_EXP 17
9793: PUSH
9794: LD_EXP 18
9798: PUSH
9799: LD_EXP 19
9803: PUSH
9804: LD_EXP 24
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: DIFF
9831: ST_TO_ADDR
// if not characters then
9832: LD_VAR 0 1
9836: NOT
9837: IFFALSE 9841
// exit ;
9839: GO 9987
// rnd = rand ( 1 , characters ) ;
9841: LD_ADDR_VAR 0 6
9845: PUSH
9846: LD_INT 1
9848: PPUSH
9849: LD_VAR 0 1
9853: PPUSH
9854: CALL_OW 12
9858: ST_TO_ADDR
// for i = 1 to characters do
9859: LD_ADDR_VAR 0 5
9863: PUSH
9864: DOUBLE
9865: LD_INT 1
9867: DEC
9868: ST_TO_ADDR
9869: LD_VAR 0 1
9873: PUSH
9874: FOR_TO
9875: IFFALSE 9985
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9877: LD_VAR 0 5
9881: PUSH
9882: LD_VAR 0 6
9886: EQUAL
9887: PUSH
9888: LD_VAR 0 1
9892: PUSH
9893: LD_VAR 0 5
9897: ARRAY
9898: PPUSH
9899: CALL_OW 258
9903: PUSH
9904: LD_INT 1
9906: EQUAL
9907: AND
9908: IFFALSE 9930
// Say ( characters [ i ] , dialogMID ) ;
9910: LD_VAR 0 1
9914: PUSH
9915: LD_VAR 0 5
9919: ARRAY
9920: PPUSH
9921: LD_VAR 0 2
9925: PPUSH
9926: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9930: LD_VAR 0 5
9934: PUSH
9935: LD_VAR 0 6
9939: EQUAL
9940: PUSH
9941: LD_VAR 0 1
9945: PUSH
9946: LD_VAR 0 5
9950: ARRAY
9951: PPUSH
9952: CALL_OW 258
9956: PUSH
9957: LD_INT 2
9959: EQUAL
9960: AND
9961: IFFALSE 9983
// Say ( characters [ i ] , dialogFID ) ;
9963: LD_VAR 0 1
9967: PUSH
9968: LD_VAR 0 5
9972: ARRAY
9973: PPUSH
9974: LD_VAR 0 3
9978: PPUSH
9979: CALL_OW 88
// end ;
9983: GO 9874
9985: POP
9986: POP
// end ;
9987: LD_VAR 0 4
9991: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9992: LD_INT 0
9994: PPUSH
9995: PPUSH
// for i in charactersList do
9996: LD_ADDR_VAR 0 4
10000: PUSH
10001: LD_VAR 0 1
10005: PUSH
10006: FOR_IN
10007: IFFALSE 10036
// begin if IsOk ( i ) then
10009: LD_VAR 0 4
10013: PPUSH
10014: CALL_OW 302
10018: IFFALSE 10034
// SaveCharacters ( i , ident ) ;
10020: LD_VAR 0 4
10024: PPUSH
10025: LD_VAR 0 2
10029: PPUSH
10030: CALL_OW 38
// end ;
10034: GO 10006
10036: POP
10037: POP
// end ;
10038: LD_VAR 0 3
10042: RET
// export function PrepareDifficulty ; begin
10043: LD_INT 0
10045: PPUSH
// if difficulty = 1 then
10046: LD_OWVAR 67
10050: PUSH
10051: LD_INT 1
10053: EQUAL
10054: IFFALSE 10098
// begin RuSolMinLevel = 4 ;
10056: LD_ADDR_EXP 36
10060: PUSH
10061: LD_INT 4
10063: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10064: LD_ADDR_EXP 37
10068: PUSH
10069: LD_INT 7
10071: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10072: LD_INT 51
10074: PPUSH
10075: LD_INT 6
10077: PPUSH
10078: LD_INT 2
10080: PPUSH
10081: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10085: LD_INT 51
10087: PPUSH
10088: LD_INT 5
10090: PPUSH
10091: LD_INT 2
10093: PPUSH
10094: CALL_OW 322
// end ; if difficulty = 2 then
10098: LD_OWVAR 67
10102: PUSH
10103: LD_INT 2
10105: EQUAL
10106: IFFALSE 10202
// begin RuSolMinLevel = 5 ;
10108: LD_ADDR_EXP 36
10112: PUSH
10113: LD_INT 5
10115: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10116: LD_ADDR_EXP 37
10120: PUSH
10121: LD_INT 7
10123: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10124: LD_INT 51
10126: PPUSH
10127: LD_INT 6
10129: PPUSH
10130: LD_INT 2
10132: PPUSH
10133: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10137: LD_INT 57
10139: PPUSH
10140: LD_INT 6
10142: PPUSH
10143: LD_INT 2
10145: PPUSH
10146: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10150: LD_INT 63
10152: PPUSH
10153: LD_INT 6
10155: PPUSH
10156: LD_INT 2
10158: PPUSH
10159: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10163: LD_INT 51
10165: PPUSH
10166: LD_INT 5
10168: PPUSH
10169: LD_INT 2
10171: PPUSH
10172: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10176: LD_INT 5
10178: PPUSH
10179: LD_INT 2
10181: PPUSH
10182: LD_INT 2
10184: PPUSH
10185: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10189: LD_INT 5
10191: PPUSH
10192: LD_INT 5
10194: PPUSH
10195: LD_INT 2
10197: PPUSH
10198: CALL_OW 322
// end ; if difficulty = 3 then
10202: LD_OWVAR 67
10206: PUSH
10207: LD_INT 3
10209: EQUAL
10210: IFFALSE 10358
// begin RuSolMinLevel = 6 ;
10212: LD_ADDR_EXP 36
10216: PUSH
10217: LD_INT 6
10219: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10220: LD_ADDR_EXP 37
10224: PUSH
10225: LD_INT 8
10227: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10228: LD_INT 51
10230: PPUSH
10231: LD_INT 6
10233: PPUSH
10234: LD_INT 2
10236: PPUSH
10237: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10241: LD_INT 57
10243: PPUSH
10244: LD_INT 6
10246: PPUSH
10247: LD_INT 2
10249: PPUSH
10250: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10254: LD_INT 52
10256: PPUSH
10257: LD_INT 6
10259: PPUSH
10260: LD_INT 2
10262: PPUSH
10263: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10267: LD_INT 58
10269: PPUSH
10270: LD_INT 6
10272: PPUSH
10273: LD_INT 2
10275: PPUSH
10276: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10280: LD_INT 63
10282: PPUSH
10283: LD_INT 6
10285: PPUSH
10286: LD_INT 2
10288: PPUSH
10289: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10293: LD_INT 64
10295: PPUSH
10296: LD_INT 6
10298: PPUSH
10299: LD_INT 2
10301: PPUSH
10302: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10306: LD_INT 51
10308: PPUSH
10309: LD_INT 5
10311: PPUSH
10312: LD_INT 2
10314: PPUSH
10315: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10319: LD_INT 52
10321: PPUSH
10322: LD_INT 5
10324: PPUSH
10325: LD_INT 2
10327: PPUSH
10328: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10332: LD_INT 66
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: LD_INT 2
10340: PPUSH
10341: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10345: LD_INT 66
10347: PPUSH
10348: LD_INT 5
10350: PPUSH
10351: LD_INT 2
10353: PPUSH
10354: CALL_OW 322
// end ; end ;
10358: LD_VAR 0 1
10362: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10363: LD_INT 0
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// case position of 1 :
10370: LD_VAR 0 1
10374: PUSH
10375: LD_INT 1
10377: DOUBLE
10378: EQUAL
10379: IFTRUE 10383
10381: GO 10394
10383: POP
// area := westConv ; 2 :
10384: LD_ADDR_VAR 0 6
10388: PUSH
10389: LD_INT 20
10391: ST_TO_ADDR
10392: GO 10433
10394: LD_INT 2
10396: DOUBLE
10397: EQUAL
10398: IFTRUE 10402
10400: GO 10413
10402: POP
// area := midConv ; 3 :
10403: LD_ADDR_VAR 0 6
10407: PUSH
10408: LD_INT 21
10410: ST_TO_ADDR
10411: GO 10433
10413: LD_INT 3
10415: DOUBLE
10416: EQUAL
10417: IFTRUE 10421
10419: GO 10432
10421: POP
// area := eastConv ; end ;
10422: LD_ADDR_VAR 0 6
10426: PUSH
10427: LD_INT 22
10429: ST_TO_ADDR
10430: GO 10433
10432: POP
// area := AreaToList ( area , 0 ) ;
10433: LD_ADDR_VAR 0 6
10437: PUSH
10438: LD_VAR 0 6
10442: PPUSH
10443: LD_INT 0
10445: PPUSH
10446: CALL_OW 517
10450: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10451: LD_ADDR_VAR 0 3
10455: PUSH
10456: DOUBLE
10457: LD_INT 1
10459: DEC
10460: ST_TO_ADDR
10461: LD_VAR 0 6
10465: PUSH
10466: LD_INT 1
10468: ARRAY
10469: PUSH
10470: FOR_TO
10471: IFFALSE 10552
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10473: LD_VAR 0 6
10477: PUSH
10478: LD_INT 1
10480: ARRAY
10481: PUSH
10482: LD_VAR 0 3
10486: ARRAY
10487: PPUSH
10488: LD_VAR 0 6
10492: PUSH
10493: LD_INT 2
10495: ARRAY
10496: PUSH
10497: LD_VAR 0 3
10501: ARRAY
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10513: LD_VAR 0 6
10517: PUSH
10518: LD_INT 1
10520: ARRAY
10521: PUSH
10522: LD_VAR 0 3
10526: ARRAY
10527: PPUSH
10528: LD_VAR 0 6
10532: PUSH
10533: LD_INT 2
10535: ARRAY
10536: PUSH
10537: LD_VAR 0 3
10541: ARRAY
10542: PPUSH
10543: LD_INT 1
10545: PPUSH
10546: CALL_OW 331
// end ;
10550: GO 10470
10552: POP
10553: POP
// ruPossition = position ;
10554: LD_ADDR_EXP 41
10558: PUSH
10559: LD_VAR 0 1
10563: ST_TO_ADDR
// if position = 1 then
10564: LD_VAR 0 1
10568: PUSH
10569: LD_INT 1
10571: EQUAL
10572: IFFALSE 11320
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10574: LD_ADDR_VAR 0 4
10578: PUSH
10579: LD_INT 22
10581: PUSH
10582: LD_INT 3
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: PUSH
10589: LD_INT 25
10591: PUSH
10592: LD_INT 2
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PPUSH
10603: CALL_OW 69
10607: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10608: LD_ADDR_VAR 0 5
10612: PUSH
10613: LD_INT 0
10615: PUSH
10616: LD_INT 49
10618: PUSH
10619: LD_INT 74
10621: PUSH
10622: LD_INT 3
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: LIST
10630: PUSH
10631: LD_INT 4
10633: PUSH
10634: LD_INT 73
10636: PUSH
10637: LD_INT 88
10639: PUSH
10640: LD_INT 5
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: PUSH
10649: LD_INT 4
10651: PUSH
10652: LD_INT 56
10654: PUSH
10655: LD_INT 62
10657: PUSH
10658: LD_INT 3
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PUSH
10667: LD_INT 29
10669: PUSH
10670: LD_INT 43
10672: PUSH
10673: LD_INT 68
10675: PUSH
10676: LD_INT 2
10678: PUSH
10679: EMPTY
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: PUSH
10685: LD_INT 30
10687: PUSH
10688: LD_INT 43
10690: PUSH
10691: LD_INT 79
10693: PUSH
10694: LD_INT 5
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: PUSH
10703: LD_INT 28
10705: PUSH
10706: LD_INT 60
10708: PUSH
10709: LD_INT 75
10711: PUSH
10712: LD_INT 1
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 2
10723: PUSH
10724: LD_INT 50
10726: PUSH
10727: LD_INT 87
10729: PUSH
10730: LD_INT 1
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: PUSH
10739: LD_INT 28
10741: PUSH
10742: LD_INT 45
10744: PUSH
10745: LD_INT 67
10747: PUSH
10748: LD_INT 2
10750: PUSH
10751: EMPTY
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 17
10759: PUSH
10760: LD_INT 47
10762: PUSH
10763: LD_INT 84
10765: PUSH
10766: LD_INT 2
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: PUSH
10775: LD_INT 18
10777: PUSH
10778: LD_INT 46
10780: PUSH
10781: LD_INT 87
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: PUSH
10793: LD_INT 28
10795: PUSH
10796: LD_INT 41
10798: PUSH
10799: LD_INT 64
10801: PUSH
10802: LD_INT 5
10804: PUSH
10805: EMPTY
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 32
10813: PUSH
10814: LD_INT 75
10816: PUSH
10817: LD_INT 76
10819: PUSH
10820: LD_INT 5
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: LIST
10827: LIST
10828: PUSH
10829: LD_INT 32
10831: PUSH
10832: LD_INT 77
10834: PUSH
10835: LD_INT 75
10837: PUSH
10838: LD_INT 5
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: PUSH
10847: LD_INT 32
10849: PUSH
10850: LD_INT 69
10852: PUSH
10853: LD_INT 68
10855: PUSH
10856: LD_INT 3
10858: PUSH
10859: EMPTY
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 32
10867: PUSH
10868: LD_INT 59
10870: PUSH
10871: LD_INT 96
10873: PUSH
10874: LD_INT 5
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: PUSH
10883: LD_INT 32
10885: PUSH
10886: LD_INT 56
10888: PUSH
10889: LD_INT 96
10891: PUSH
10892: LD_INT 0
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 32
10903: PUSH
10904: LD_INT 51
10906: PUSH
10907: LD_INT 61
10909: PUSH
10910: LD_INT 3
10912: PUSH
10913: EMPTY
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: PUSH
10919: LD_INT 32
10921: PUSH
10922: LD_INT 42
10924: PUSH
10925: LD_INT 60
10927: PUSH
10928: LD_INT 3
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: PUSH
10937: LD_INT 32
10939: PUSH
10940: LD_INT 36
10942: PUSH
10943: LD_INT 58
10945: PUSH
10946: LD_INT 3
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: PUSH
10955: LD_INT 32
10957: PUSH
10958: LD_INT 39
10960: PUSH
10961: LD_INT 59
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: PUSH
10973: LD_INT 32
10975: PUSH
10976: LD_INT 61
10978: PUSH
10979: LD_INT 64
10981: PUSH
10982: LD_INT 3
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 33
10993: PUSH
10994: LD_INT 63
10996: PUSH
10997: LD_INT 90
10999: PUSH
11000: LD_INT 5
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 33
11011: PUSH
11012: LD_INT 64
11014: PUSH
11015: LD_INT 88
11017: PUSH
11018: LD_INT 5
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 33
11029: PUSH
11030: LD_INT 72
11032: PUSH
11033: LD_INT 82
11035: PUSH
11036: LD_INT 5
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: PUSH
11045: LD_INT 6
11047: PUSH
11048: LD_INT 42
11050: PUSH
11051: LD_INT 74
11053: PUSH
11054: LD_INT 1
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 6
11065: PUSH
11066: LD_INT 56
11068: PUSH
11069: LD_INT 77
11071: PUSH
11072: LD_INT 2
11074: PUSH
11075: EMPTY
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 21
11083: PUSH
11084: LD_INT 54
11086: PUSH
11087: LD_INT 91
11089: PUSH
11090: LD_INT 5
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PUSH
11099: LD_INT 16
11101: PUSH
11102: LD_INT 50
11104: PUSH
11105: LD_INT 83
11107: PUSH
11108: LD_INT 3
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: PUSH
11117: LD_INT 24
11119: PUSH
11120: LD_INT 50
11122: PUSH
11123: LD_INT 90
11125: PUSH
11126: LD_INT 0
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11166: LD_ADDR_VAR 0 3
11170: PUSH
11171: LD_INT 22
11173: PUSH
11174: LD_INT 3
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: LD_INT 3
11183: PUSH
11184: LD_INT 25
11186: PUSH
11187: LD_INT 2
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PUSH
11194: EMPTY
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 69
11206: PUSH
11207: FOR_IN
11208: IFFALSE 11227
// AddComAgressiveMove ( i , 53 , 82 ) ;
11210: LD_VAR 0 3
11214: PPUSH
11215: LD_INT 53
11217: PPUSH
11218: LD_INT 82
11220: PPUSH
11221: CALL_OW 174
11225: GO 11207
11227: POP
11228: POP
// for i := 1 to buildingsTab do
11229: LD_ADDR_VAR 0 3
11233: PUSH
11234: DOUBLE
11235: LD_INT 1
11237: DEC
11238: ST_TO_ADDR
11239: LD_VAR 0 5
11243: PUSH
11244: FOR_TO
11245: IFFALSE 11318
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11247: LD_VAR 0 4
11251: PPUSH
11252: LD_VAR 0 5
11256: PUSH
11257: LD_VAR 0 3
11261: ARRAY
11262: PUSH
11263: LD_INT 1
11265: ARRAY
11266: PPUSH
11267: LD_VAR 0 5
11271: PUSH
11272: LD_VAR 0 3
11276: ARRAY
11277: PUSH
11278: LD_INT 2
11280: ARRAY
11281: PPUSH
11282: LD_VAR 0 5
11286: PUSH
11287: LD_VAR 0 3
11291: ARRAY
11292: PUSH
11293: LD_INT 3
11295: ARRAY
11296: PPUSH
11297: LD_VAR 0 5
11301: PUSH
11302: LD_VAR 0 3
11306: ARRAY
11307: PUSH
11308: LD_INT 4
11310: ARRAY
11311: PPUSH
11312: CALL_OW 205
11316: GO 11244
11318: POP
11319: POP
// end ; if position = 2 then
11320: LD_VAR 0 1
11324: PUSH
11325: LD_INT 2
11327: EQUAL
11328: IFFALSE 11943
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11330: LD_ADDR_VAR 0 4
11334: PUSH
11335: LD_INT 22
11337: PUSH
11338: LD_INT 3
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 25
11347: PUSH
11348: LD_INT 2
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: EMPTY
11356: LIST
11357: LIST
11358: PPUSH
11359: CALL_OW 69
11363: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11364: LD_ADDR_VAR 0 5
11368: PUSH
11369: LD_INT 0
11371: PUSH
11372: LD_INT 104
11374: PUSH
11375: LD_INT 110
11377: PUSH
11378: LD_INT 5
11380: PUSH
11381: EMPTY
11382: LIST
11383: LIST
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 4
11389: PUSH
11390: LD_INT 98
11392: PUSH
11393: LD_INT 90
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: LD_INT 29
11407: PUSH
11408: LD_INT 103
11410: PUSH
11411: LD_INT 114
11413: PUSH
11414: LD_INT 2
11416: PUSH
11417: EMPTY
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 30
11425: PUSH
11426: LD_INT 99
11428: PUSH
11429: LD_INT 114
11431: PUSH
11432: LD_INT 3
11434: PUSH
11435: EMPTY
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 28
11443: PUSH
11444: LD_INT 100
11446: PUSH
11447: LD_INT 112
11449: PUSH
11450: LD_INT 1
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: PUSH
11459: LD_INT 2
11461: PUSH
11462: LD_INT 92
11464: PUSH
11465: LD_INT 101
11467: PUSH
11468: LD_INT 0
11470: PUSH
11471: EMPTY
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: PUSH
11477: LD_INT 28
11479: PUSH
11480: LD_INT 97
11482: PUSH
11483: LD_INT 116
11485: PUSH
11486: LD_INT 5
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: LIST
11493: LIST
11494: PUSH
11495: LD_INT 17
11497: PUSH
11498: LD_INT 96
11500: PUSH
11501: LD_INT 101
11503: PUSH
11504: LD_INT 4
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 18
11515: PUSH
11516: LD_INT 88
11518: PUSH
11519: LD_INT 97
11521: PUSH
11522: LD_INT 2
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 28
11533: PUSH
11534: LD_INT 106
11536: PUSH
11537: LD_INT 92
11539: PUSH
11540: LD_INT 2
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 32
11551: PUSH
11552: LD_INT 88
11554: PUSH
11555: LD_INT 89
11557: PUSH
11558: LD_INT 2
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 32
11569: PUSH
11570: LD_INT 86
11572: PUSH
11573: LD_INT 90
11575: PUSH
11576: LD_INT 2
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: PUSH
11585: LD_INT 32
11587: PUSH
11588: LD_INT 85
11590: PUSH
11591: LD_INT 99
11593: PUSH
11594: LD_INT 2
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: PUSH
11603: LD_INT 32
11605: PUSH
11606: LD_INT 85
11608: PUSH
11609: LD_INT 107
11611: PUSH
11612: LD_INT 1
11614: PUSH
11615: EMPTY
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: PUSH
11621: LD_INT 33
11623: PUSH
11624: LD_INT 105
11626: PUSH
11627: LD_INT 99
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 33
11641: PUSH
11642: LD_INT 102
11644: PUSH
11645: LD_INT 92
11647: PUSH
11648: LD_INT 3
11650: PUSH
11651: EMPTY
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: PUSH
11657: LD_INT 33
11659: PUSH
11660: LD_INT 105
11662: PUSH
11663: LD_INT 92
11665: PUSH
11666: LD_INT 2
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 6
11677: PUSH
11678: LD_INT 92
11680: PUSH
11681: LD_INT 110
11683: PUSH
11684: LD_INT 0
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: LD_INT 6
11695: PUSH
11696: LD_INT 103
11698: PUSH
11699: LD_INT 103
11701: PUSH
11702: LD_INT 5
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: PUSH
11711: LD_INT 21
11713: PUSH
11714: LD_INT 89
11716: PUSH
11717: LD_INT 101
11719: PUSH
11720: LD_INT 1
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: PUSH
11729: LD_INT 16
11731: PUSH
11732: LD_INT 95
11734: PUSH
11735: LD_INT 104
11737: PUSH
11738: LD_INT 4
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: PUSH
11747: LD_INT 24
11749: PUSH
11750: LD_INT 92
11752: PUSH
11753: LD_INT 105
11755: PUSH
11756: LD_INT 0
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: LIST
11763: LIST
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11789: LD_ADDR_VAR 0 3
11793: PUSH
11794: LD_INT 22
11796: PUSH
11797: LD_INT 3
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 3
11806: PUSH
11807: LD_INT 25
11809: PUSH
11810: LD_INT 2
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PPUSH
11825: CALL_OW 69
11829: PUSH
11830: FOR_IN
11831: IFFALSE 11850
// AddComAgressiveMove ( i , 96 , 99 ) ;
11833: LD_VAR 0 3
11837: PPUSH
11838: LD_INT 96
11840: PPUSH
11841: LD_INT 99
11843: PPUSH
11844: CALL_OW 174
11848: GO 11830
11850: POP
11851: POP
// for i := 1 to buildingsTab do
11852: LD_ADDR_VAR 0 3
11856: PUSH
11857: DOUBLE
11858: LD_INT 1
11860: DEC
11861: ST_TO_ADDR
11862: LD_VAR 0 5
11866: PUSH
11867: FOR_TO
11868: IFFALSE 11941
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11870: LD_VAR 0 4
11874: PPUSH
11875: LD_VAR 0 5
11879: PUSH
11880: LD_VAR 0 3
11884: ARRAY
11885: PUSH
11886: LD_INT 1
11888: ARRAY
11889: PPUSH
11890: LD_VAR 0 5
11894: PUSH
11895: LD_VAR 0 3
11899: ARRAY
11900: PUSH
11901: LD_INT 2
11903: ARRAY
11904: PPUSH
11905: LD_VAR 0 5
11909: PUSH
11910: LD_VAR 0 3
11914: ARRAY
11915: PUSH
11916: LD_INT 3
11918: ARRAY
11919: PPUSH
11920: LD_VAR 0 5
11924: PUSH
11925: LD_VAR 0 3
11929: ARRAY
11930: PUSH
11931: LD_INT 4
11933: ARRAY
11934: PPUSH
11935: CALL_OW 205
11939: GO 11867
11941: POP
11942: POP
// end ; if position = 3 then
11943: LD_VAR 0 1
11947: PUSH
11948: LD_INT 3
11950: EQUAL
11951: IFFALSE 12737
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11953: LD_ADDR_VAR 0 4
11957: PUSH
11958: LD_INT 22
11960: PUSH
11961: LD_INT 3
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: LD_INT 25
11970: PUSH
11971: LD_INT 2
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11987: LD_ADDR_VAR 0 5
11991: PUSH
11992: LD_INT 0
11994: PUSH
11995: LD_INT 151
11997: PUSH
11998: LD_INT 71
12000: PUSH
12001: LD_INT 4
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 4
12012: PUSH
12013: LD_INT 145
12015: PUSH
12016: LD_INT 53
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 4
12030: PUSH
12031: LD_INT 172
12033: PUSH
12034: LD_INT 102
12036: PUSH
12037: LD_INT 5
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 29
12048: PUSH
12049: LD_INT 152
12051: PUSH
12052: LD_INT 85
12054: PUSH
12055: LD_INT 3
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 30
12066: PUSH
12067: LD_INT 156
12069: PUSH
12070: LD_INT 92
12072: PUSH
12073: LD_INT 3
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 28
12084: PUSH
12085: LD_INT 151
12087: PUSH
12088: LD_INT 66
12090: PUSH
12091: LD_INT 4
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 2
12102: PUSH
12103: LD_INT 163
12105: PUSH
12106: LD_INT 95
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 28
12120: PUSH
12121: LD_INT 149
12123: PUSH
12124: LD_INT 63
12126: PUSH
12127: LD_INT 4
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 17
12138: PUSH
12139: LD_INT 167
12141: PUSH
12142: LD_INT 99
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 18
12156: PUSH
12157: LD_INT 163
12159: PUSH
12160: LD_INT 98
12162: PUSH
12163: LD_INT 0
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 28
12174: PUSH
12175: LD_INT 154
12177: PUSH
12178: LD_INT 70
12180: PUSH
12181: LD_INT 4
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 32
12192: PUSH
12193: LD_INT 155
12195: PUSH
12196: LD_INT 62
12198: PUSH
12199: LD_INT 4
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 32
12210: PUSH
12211: LD_INT 161
12213: PUSH
12214: LD_INT 69
12216: PUSH
12217: LD_INT 4
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: LD_INT 168
12231: PUSH
12232: LD_INT 78
12234: PUSH
12235: LD_INT 4
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 32
12246: PUSH
12247: LD_INT 163
12249: PUSH
12250: LD_INT 80
12252: PUSH
12253: LD_INT 5
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 32
12264: PUSH
12265: LD_INT 136
12267: PUSH
12268: LD_INT 73
12270: PUSH
12271: LD_INT 0
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 32
12282: PUSH
12283: LD_INT 157
12285: PUSH
12286: LD_INT 98
12288: PUSH
12289: LD_INT 0
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 32
12300: PUSH
12301: LD_INT 150
12303: PUSH
12304: LD_INT 87
12306: PUSH
12307: LD_INT 1
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 33
12318: PUSH
12319: LD_INT 171
12321: PUSH
12322: LD_INT 97
12324: PUSH
12325: LD_INT 4
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 33
12336: PUSH
12337: LD_INT 168
12339: PUSH
12340: LD_INT 92
12342: PUSH
12343: LD_INT 4
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 33
12354: PUSH
12355: LD_INT 166
12357: PUSH
12358: LD_INT 80
12360: PUSH
12361: LD_INT 5
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 33
12372: PUSH
12373: LD_INT 141
12375: PUSH
12376: LD_INT 54
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 33
12390: PUSH
12391: LD_INT 133
12393: PUSH
12394: LD_INT 57
12396: PUSH
12397: LD_INT 2
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 33
12408: PUSH
12409: LD_INT 132
12411: PUSH
12412: LD_INT 61
12414: PUSH
12415: LD_INT 2
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 33
12426: PUSH
12427: LD_INT 150
12429: PUSH
12430: LD_INT 82
12432: PUSH
12433: LD_INT 0
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: LD_INT 33
12444: PUSH
12445: LD_INT 132
12447: PUSH
12448: LD_INT 72
12450: PUSH
12451: LD_INT 0
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 6
12462: PUSH
12463: LD_INT 146
12465: PUSH
12466: LD_INT 64
12468: PUSH
12469: LD_INT 4
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: PUSH
12478: LD_INT 6
12480: PUSH
12481: LD_INT 159
12483: PUSH
12484: LD_INT 85
12486: PUSH
12487: LD_INT 4
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 21
12498: PUSH
12499: LD_INT 163
12501: PUSH
12502: LD_INT 91
12504: PUSH
12505: LD_INT 3
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 16
12516: PUSH
12517: LD_INT 166
12519: PUSH
12520: LD_INT 95
12522: PUSH
12523: LD_INT 4
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 24
12534: PUSH
12535: LD_INT 159
12537: PUSH
12538: LD_INT 95
12540: PUSH
12541: LD_INT 1
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12583: LD_ADDR_VAR 0 3
12587: PUSH
12588: LD_INT 22
12590: PUSH
12591: LD_INT 3
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 3
12600: PUSH
12601: LD_INT 25
12603: PUSH
12604: LD_INT 2
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: PUSH
12624: FOR_IN
12625: IFFALSE 12644
// AddComAgressiveMove ( i , 141 , 65 ) ;
12627: LD_VAR 0 3
12631: PPUSH
12632: LD_INT 141
12634: PPUSH
12635: LD_INT 65
12637: PPUSH
12638: CALL_OW 174
12642: GO 12624
12644: POP
12645: POP
// for i := 1 to buildingsTab do
12646: LD_ADDR_VAR 0 3
12650: PUSH
12651: DOUBLE
12652: LD_INT 1
12654: DEC
12655: ST_TO_ADDR
12656: LD_VAR 0 5
12660: PUSH
12661: FOR_TO
12662: IFFALSE 12735
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12664: LD_VAR 0 4
12668: PPUSH
12669: LD_VAR 0 5
12673: PUSH
12674: LD_VAR 0 3
12678: ARRAY
12679: PUSH
12680: LD_INT 1
12682: ARRAY
12683: PPUSH
12684: LD_VAR 0 5
12688: PUSH
12689: LD_VAR 0 3
12693: ARRAY
12694: PUSH
12695: LD_INT 2
12697: ARRAY
12698: PPUSH
12699: LD_VAR 0 5
12703: PUSH
12704: LD_VAR 0 3
12708: ARRAY
12709: PUSH
12710: LD_INT 3
12712: ARRAY
12713: PPUSH
12714: LD_VAR 0 5
12718: PUSH
12719: LD_VAR 0 3
12723: ARRAY
12724: PUSH
12725: LD_INT 4
12727: ARRAY
12728: PPUSH
12729: CALL_OW 205
12733: GO 12661
12735: POP
12736: POP
// end ; end ;
12737: LD_VAR 0 2
12741: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12742: LD_INT 0
12744: PPUSH
12745: PPUSH
12746: PPUSH
12747: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12748: LD_ADDR_VAR 0 3
12752: PUSH
12753: LD_INT 22
12755: PUSH
12756: LD_INT 2
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: LD_INT 25
12765: PUSH
12766: LD_INT 2
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PPUSH
12777: CALL_OW 69
12781: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12782: LD_VAR 0 3
12786: PPUSH
12787: LD_INT 0
12789: PPUSH
12790: LD_INT 71
12792: PPUSH
12793: LD_INT 15
12795: PPUSH
12796: LD_INT 3
12798: PPUSH
12799: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12803: LD_ADDR_VAR 0 4
12807: PUSH
12808: LD_INT 6
12810: PUSH
12811: LD_INT 77
12813: PUSH
12814: LD_INT 18
12816: PUSH
12817: LD_INT 3
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: PUSH
12826: LD_INT 4
12828: PUSH
12829: LD_INT 77
12831: PUSH
12832: LD_INT 26
12834: PUSH
12835: LD_INT 0
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 31
12846: PUSH
12847: LD_INT 82
12849: PUSH
12850: LD_INT 28
12852: PUSH
12853: LD_INT 0
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 31
12864: PUSH
12865: LD_INT 84
12867: PUSH
12868: LD_INT 21
12870: PUSH
12871: LD_INT 3
12873: PUSH
12874: EMPTY
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: LD_INT 31
12882: PUSH
12883: LD_INT 66
12885: PUSH
12886: LD_INT 14
12888: PUSH
12889: LD_INT 2
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PUSH
12898: LD_INT 27
12900: PUSH
12901: LD_INT 67
12903: PUSH
12904: LD_INT 18
12906: PUSH
12907: LD_INT 5
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: PUSH
12916: LD_INT 27
12918: PUSH
12919: LD_INT 69
12921: PUSH
12922: LD_INT 23
12924: PUSH
12925: LD_INT 2
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: LIST
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: LIST
12942: ST_TO_ADDR
// for i := 1 to buildingsTab do
12943: LD_ADDR_VAR 0 2
12947: PUSH
12948: DOUBLE
12949: LD_INT 1
12951: DEC
12952: ST_TO_ADDR
12953: LD_VAR 0 4
12957: PUSH
12958: FOR_TO
12959: IFFALSE 13032
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12961: LD_VAR 0 3
12965: PPUSH
12966: LD_VAR 0 4
12970: PUSH
12971: LD_VAR 0 2
12975: ARRAY
12976: PUSH
12977: LD_INT 1
12979: ARRAY
12980: PPUSH
12981: LD_VAR 0 4
12985: PUSH
12986: LD_VAR 0 2
12990: ARRAY
12991: PUSH
12992: LD_INT 2
12994: ARRAY
12995: PPUSH
12996: LD_VAR 0 4
13000: PUSH
13001: LD_VAR 0 2
13005: ARRAY
13006: PUSH
13007: LD_INT 3
13009: ARRAY
13010: PPUSH
13011: LD_VAR 0 4
13015: PUSH
13016: LD_VAR 0 2
13020: ARRAY
13021: PUSH
13022: LD_INT 4
13024: ARRAY
13025: PPUSH
13026: CALL_OW 205
13030: GO 12958
13032: POP
13033: POP
// end ;
13034: LD_VAR 0 1
13038: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13039: LD_INT 0
13041: PPUSH
13042: PPUSH
13043: PPUSH
13044: PPUSH
13045: PPUSH
13046: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13047: LD_ADDR_VAR 0 7
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_VAR 0 1
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: LD_INT 25
13066: PUSH
13067: LD_INT 9
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PUSH
13074: EMPTY
13075: LIST
13076: LIST
13077: PPUSH
13078: CALL_OW 69
13082: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13083: LD_ADDR_VAR 0 8
13087: PUSH
13088: LD_INT 22
13090: PUSH
13091: LD_VAR 0 2
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PPUSH
13121: CALL_OW 69
13125: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13126: LD_ADDR_VAR 0 5
13130: PUSH
13131: LD_INT 1
13133: PPUSH
13134: LD_INT 3
13136: PPUSH
13137: CALL_OW 12
13141: ST_TO_ADDR
// for i = 1 to list do
13142: LD_ADDR_VAR 0 6
13146: PUSH
13147: DOUBLE
13148: LD_INT 1
13150: DEC
13151: ST_TO_ADDR
13152: LD_VAR 0 7
13156: PUSH
13157: FOR_TO
13158: IFFALSE 14148
// for ta in filter do
13160: LD_ADDR_VAR 0 4
13164: PUSH
13165: LD_VAR 0 8
13169: PUSH
13170: FOR_IN
13171: IFFALSE 14144
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13173: LD_VAR 0 7
13177: PUSH
13178: LD_VAR 0 6
13182: ARRAY
13183: PPUSH
13184: LD_VAR 0 4
13188: PPUSH
13189: CALL_OW 296
13193: PUSH
13194: LD_INT 15
13196: LESSEQUAL
13197: IFFALSE 14142
// begin case c of 1 :
13199: LD_VAR 0 5
13203: PUSH
13204: LD_INT 1
13206: DOUBLE
13207: EQUAL
13208: IFTRUE 13212
13210: GO 13644
13212: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13213: LD_VAR 0 7
13217: PUSH
13218: LD_VAR 0 6
13222: ARRAY
13223: PPUSH
13224: LD_VAR 0 4
13228: PPUSH
13229: CALL_OW 250
13233: PPUSH
13234: LD_VAR 0 4
13238: PPUSH
13239: CALL_OW 251
13243: PPUSH
13244: CALL_OW 154
// if eventVar2 = 0 then
13248: LD_EXP 62
13252: PUSH
13253: LD_INT 0
13255: EQUAL
13256: IFFALSE 13642
// begin eventVar2 = 1 ;
13258: LD_ADDR_EXP 62
13262: PUSH
13263: LD_INT 1
13265: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13266: LD_INT 245
13268: PPUSH
13269: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13273: LD_VAR 0 4
13277: PPUSH
13278: CALL_OW 250
13282: PPUSH
13283: LD_VAR 0 4
13287: PPUSH
13288: CALL_OW 251
13292: PPUSH
13293: CALL_OW 84
// DialogueOn ;
13297: CALL_OW 6
// if IsOK ( Cyrus ) then
13301: LD_EXP 5
13305: PPUSH
13306: CALL_OW 302
13310: IFFALSE 13326
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13312: LD_EXP 5
13316: PPUSH
13317: LD_STRING D9a-Cyrus-1
13319: PPUSH
13320: CALL_OW 88
// end else
13324: GO 13448
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13326: LD_INT 22
13328: PUSH
13329: LD_INT 1
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: LD_INT 26
13338: PUSH
13339: LD_INT 1
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: LD_INT 25
13351: PUSH
13352: LD_INT 1
13354: PUSH
13355: EMPTY
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 25
13361: PUSH
13362: LD_INT 2
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 25
13371: PUSH
13372: LD_INT 3
13374: PUSH
13375: EMPTY
13376: LIST
13377: LIST
13378: PUSH
13379: LD_INT 25
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 25
13391: PUSH
13392: LD_INT 5
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: PPUSH
13412: CALL_OW 69
13416: PUSH
13417: LD_EXP 1
13421: PUSH
13422: LD_EXP 14
13426: PUSH
13427: LD_EXP 5
13431: PUSH
13432: EMPTY
13433: LIST
13434: LIST
13435: LIST
13436: DIFF
13437: PPUSH
13438: LD_STRING D9a-Sol1-1
13440: PPUSH
13441: LD_STRING D9a-Sol1-1
13443: PPUSH
13444: CALL 9694 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13448: LD_INT 22
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 26
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 2
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 1
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 25
13483: PUSH
13484: LD_INT 2
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 3
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 25
13503: PUSH
13504: LD_INT 4
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 25
13513: PUSH
13514: LD_INT 5
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: LIST
13533: PPUSH
13534: CALL_OW 69
13538: PUSH
13539: LD_EXP 1
13543: PUSH
13544: LD_EXP 14
13548: PUSH
13549: LD_EXP 5
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: DIFF
13559: PPUSH
13560: LD_STRING D9b-Sol1-1
13562: PPUSH
13563: LD_STRING D9b-Sol1-1
13565: PPUSH
13566: CALL 9694 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13570: LD_STRING 09_arInfo
13572: PPUSH
13573: LD_INT 0
13575: PPUSH
13576: CALL_OW 30
13580: PUSH
13581: LD_INT 1
13583: EQUAL
13584: IFFALSE 13598
// Say ( JMM , D9a-JMM-1 ) ;
13586: LD_EXP 1
13590: PPUSH
13591: LD_STRING D9a-JMM-1
13593: PPUSH
13594: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13598: LD_EXP 1
13602: PPUSH
13603: LD_STRING D9c-JMM-1
13605: PPUSH
13606: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13610: LD_INT 12
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: CALL_OW 321
13620: PUSH
13621: LD_INT 2
13623: EQUAL
13624: IFFALSE 13638
// Say ( JMM , D9c-JMM-1a ) ;
13626: LD_EXP 1
13630: PPUSH
13631: LD_STRING D9c-JMM-1a
13633: PPUSH
13634: CALL_OW 88
// DialogueOff ;
13638: CALL_OW 7
// end ; end ; 2 :
13642: GO 14142
13644: LD_INT 2
13646: DOUBLE
13647: EQUAL
13648: IFTRUE 13652
13650: GO 14110
13652: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13653: LD_VAR 0 7
13657: PUSH
13658: LD_VAR 0 6
13662: ARRAY
13663: PPUSH
13664: LD_VAR 0 4
13668: PPUSH
13669: CALL_OW 250
13673: PUSH
13674: LD_INT 1
13676: NEG
13677: PPUSH
13678: LD_INT 1
13680: PPUSH
13681: CALL_OW 12
13685: PLUS
13686: PPUSH
13687: LD_VAR 0 4
13691: PPUSH
13692: CALL_OW 251
13696: PUSH
13697: LD_INT 1
13699: NEG
13700: PPUSH
13701: LD_INT 1
13703: PPUSH
13704: CALL_OW 12
13708: PLUS
13709: PPUSH
13710: CALL_OW 153
// if eventVar2 = 0 then
13714: LD_EXP 62
13718: PUSH
13719: LD_INT 0
13721: EQUAL
13722: IFFALSE 14108
// begin eventVar2 = 1 ;
13724: LD_ADDR_EXP 62
13728: PUSH
13729: LD_INT 1
13731: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13732: LD_INT 245
13734: PPUSH
13735: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13739: LD_VAR 0 4
13743: PPUSH
13744: CALL_OW 250
13748: PPUSH
13749: LD_VAR 0 4
13753: PPUSH
13754: CALL_OW 251
13758: PPUSH
13759: CALL_OW 84
// DialogueOn ;
13763: CALL_OW 6
// if IsOK ( Cyrus ) then
13767: LD_EXP 5
13771: PPUSH
13772: CALL_OW 302
13776: IFFALSE 13792
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13778: LD_EXP 5
13782: PPUSH
13783: LD_STRING D9a-Cyrus-1
13785: PPUSH
13786: CALL_OW 88
// end else
13790: GO 13914
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13792: LD_INT 22
13794: PUSH
13795: LD_INT 1
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 26
13804: PUSH
13805: LD_INT 1
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PUSH
13812: LD_INT 2
13814: PUSH
13815: LD_INT 25
13817: PUSH
13818: LD_INT 1
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 25
13827: PUSH
13828: LD_INT 2
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 25
13837: PUSH
13838: LD_INT 3
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: PUSH
13845: LD_INT 25
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 25
13857: PUSH
13858: LD_INT 5
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: LIST
13877: PPUSH
13878: CALL_OW 69
13882: PUSH
13883: LD_EXP 1
13887: PUSH
13888: LD_EXP 14
13892: PUSH
13893: LD_EXP 5
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: DIFF
13903: PPUSH
13904: LD_STRING D9a-Sol1-1
13906: PPUSH
13907: LD_STRING D9a-Sol1-1
13909: PPUSH
13910: CALL 9694 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13914: LD_INT 22
13916: PUSH
13917: LD_INT 1
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 26
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: LD_INT 2
13936: PUSH
13937: LD_INT 25
13939: PUSH
13940: LD_INT 1
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 25
13949: PUSH
13950: LD_INT 2
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: LD_INT 25
13959: PUSH
13960: LD_INT 3
13962: PUSH
13963: EMPTY
13964: LIST
13965: LIST
13966: PUSH
13967: LD_INT 25
13969: PUSH
13970: LD_INT 4
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: PUSH
13977: LD_INT 25
13979: PUSH
13980: LD_INT 5
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PPUSH
14000: CALL_OW 69
14004: PUSH
14005: LD_EXP 1
14009: PUSH
14010: LD_EXP 14
14014: PUSH
14015: LD_EXP 5
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: DIFF
14025: PPUSH
14026: LD_STRING D9b-Sol1-1
14028: PPUSH
14029: LD_STRING D9b-Sol1-1
14031: PPUSH
14032: CALL 9694 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14036: LD_STRING 09_arInfo
14038: PPUSH
14039: LD_INT 0
14041: PPUSH
14042: CALL_OW 30
14046: PUSH
14047: LD_INT 1
14049: EQUAL
14050: IFFALSE 14064
// Say ( JMM , D9a-JMM-1 ) ;
14052: LD_EXP 1
14056: PPUSH
14057: LD_STRING D9a-JMM-1
14059: PPUSH
14060: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14064: LD_EXP 1
14068: PPUSH
14069: LD_STRING D9c-JMM-1
14071: PPUSH
14072: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14076: LD_INT 12
14078: PPUSH
14079: LD_INT 1
14081: PPUSH
14082: CALL_OW 321
14086: PUSH
14087: LD_INT 2
14089: EQUAL
14090: IFFALSE 14104
// Say ( JMM , D9c-JMM-1a ) ;
14092: LD_EXP 1
14096: PPUSH
14097: LD_STRING D9c-JMM-1a
14099: PPUSH
14100: CALL_OW 88
// DialogueOff ;
14104: CALL_OW 7
// end ; end ; 3 :
14108: GO 14142
14110: LD_INT 3
14112: DOUBLE
14113: EQUAL
14114: IFTRUE 14118
14116: GO 14141
14118: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14119: LD_VAR 0 7
14123: PUSH
14124: LD_VAR 0 6
14128: ARRAY
14129: PPUSH
14130: LD_VAR 0 4
14134: PPUSH
14135: CALL_OW 115
14139: GO 14142
14141: POP
// end ; end ;
14142: GO 13170
14144: POP
14145: POP
14146: GO 13157
14148: POP
14149: POP
// end ;
14150: LD_VAR 0 3
14154: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14155: LD_INT 0
14157: PPUSH
14158: PPUSH
14159: PPUSH
14160: PPUSH
// for i = 1 to 72 do
14161: LD_ADDR_VAR 0 5
14165: PUSH
14166: DOUBLE
14167: LD_INT 1
14169: DEC
14170: ST_TO_ADDR
14171: LD_INT 72
14173: PUSH
14174: FOR_TO
14175: IFFALSE 14233
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14177: LD_VAR 0 5
14181: PPUSH
14182: LD_VAR 0 1
14186: PPUSH
14187: CALL_OW 321
14191: PUSH
14192: LD_INT 1
14194: EQUAL
14195: PUSH
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 3
14205: PPUSH
14206: CALL_OW 482
14210: PUSH
14211: LD_INT 1
14213: EQUAL
14214: AND
14215: IFFALSE 14231
// AddComResearch ( lab , i ) ;
14217: LD_VAR 0 2
14221: PPUSH
14222: LD_VAR 0 5
14226: PPUSH
14227: CALL_OW 184
14231: GO 14174
14233: POP
14234: POP
// end ;
14235: LD_VAR 0 4
14239: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14240: LD_INT 0
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
14247: PPUSH
14248: PPUSH
14249: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14250: LD_ADDR_VAR 0 6
14254: PUSH
14255: LD_INT 22
14257: PUSH
14258: LD_VAR 0 1
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 56
14269: PUSH
14270: EMPTY
14271: LIST
14272: PUSH
14273: LD_INT 24
14275: PUSH
14276: LD_INT 700
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 3
14285: PUSH
14286: LD_INT 60
14288: PUSH
14289: EMPTY
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: LD_INT 25
14301: PUSH
14302: LD_INT 1
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 25
14311: PUSH
14312: LD_INT 9
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14336: LD_ADDR_VAR 0 7
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_VAR 0 1
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 30
14355: PUSH
14356: LD_INT 32
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 58
14365: PUSH
14366: EMPTY
14367: LIST
14368: PUSH
14369: LD_INT 24
14371: PUSH
14372: LD_INT 251
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL_OW 69
14389: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14390: LD_ADDR_VAR 0 9
14394: PUSH
14395: LD_INT 22
14397: PUSH
14398: LD_VAR 0 1
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: LD_INT 2
14409: PUSH
14410: LD_INT 30
14412: PUSH
14413: LD_INT 4
14415: PUSH
14416: EMPTY
14417: LIST
14418: LIST
14419: PUSH
14420: LD_INT 30
14422: PUSH
14423: LD_INT 5
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: LD_INT 24
14437: PUSH
14438: LD_INT 251
14440: PUSH
14441: EMPTY
14442: LIST
14443: LIST
14444: PUSH
14445: EMPTY
14446: LIST
14447: LIST
14448: LIST
14449: PPUSH
14450: CALL_OW 69
14454: ST_TO_ADDR
// if barrackList > 0 then
14455: LD_VAR 0 9
14459: PUSH
14460: LD_INT 0
14462: GREATER
14463: IFFALSE 14598
// begin if turretList = 0 then
14465: LD_VAR 0 7
14469: PUSH
14470: LD_INT 0
14472: EQUAL
14473: IFFALSE 14522
// begin for i in soldiers_list do
14475: LD_ADDR_VAR 0 4
14479: PUSH
14480: LD_VAR 0 6
14484: PUSH
14485: FOR_IN
14486: IFFALSE 14518
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14488: LD_VAR 0 4
14492: PPUSH
14493: LD_VAR 0 9
14497: PUSH
14498: LD_INT 1
14500: PPUSH
14501: LD_VAR 0 9
14505: PPUSH
14506: CALL_OW 12
14510: ARRAY
14511: PPUSH
14512: CALL_OW 120
14516: GO 14485
14518: POP
14519: POP
// end else
14520: GO 14598
// begin for i in barrackList do
14522: LD_ADDR_VAR 0 4
14526: PUSH
14527: LD_VAR 0 9
14531: PUSH
14532: FOR_IN
14533: IFFALSE 14596
// begin insideUnits = UnitsInside ( i ) ;
14535: LD_ADDR_VAR 0 10
14539: PUSH
14540: LD_VAR 0 4
14544: PPUSH
14545: CALL_OW 313
14549: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14550: LD_VAR 0 10
14554: PUSH
14555: LD_INT 1
14557: ARRAY
14558: PPUSH
14559: LD_VAR 0 7
14563: PUSH
14564: LD_INT 1
14566: ARRAY
14567: PPUSH
14568: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14572: LD_VAR 0 6
14576: PUSH
14577: LD_INT 1
14579: ARRAY
14580: PPUSH
14581: LD_VAR 0 7
14585: PUSH
14586: LD_INT 1
14588: ARRAY
14589: PPUSH
14590: CALL_OW 120
// end ;
14594: GO 14532
14596: POP
14597: POP
// end ; end ; end ;
14598: LD_VAR 0 3
14602: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14603: LD_INT 0
14605: PPUSH
14606: PPUSH
14607: PPUSH
14608: PPUSH
14609: PPUSH
14610: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14611: LD_ADDR_VAR 0 6
14615: PUSH
14616: LD_VAR 0 2
14620: PPUSH
14621: CALL_OW 313
14625: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14626: LD_ADDR_VAR 0 7
14630: PUSH
14631: LD_INT 22
14633: PUSH
14634: LD_VAR 0 1
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: LD_INT 25
14645: PUSH
14646: LD_INT 2
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 24
14655: PUSH
14656: LD_INT 1000
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 3
14665: PUSH
14666: LD_INT 54
14668: PUSH
14669: EMPTY
14670: LIST
14671: PUSH
14672: EMPTY
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 69
14686: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14687: LD_ADDR_VAR 0 4
14691: PUSH
14692: LD_INT 22
14694: PUSH
14695: LD_VAR 0 1
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: PUSH
14704: LD_INT 21
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 3
14716: PUSH
14717: LD_INT 24
14719: PUSH
14720: LD_INT 1000
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PUSH
14727: EMPTY
14728: LIST
14729: LIST
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: LIST
14735: PUSH
14736: EMPTY
14737: LIST
14738: PPUSH
14739: CALL_OW 69
14743: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14744: LD_VAR 0 4
14748: NOT
14749: PUSH
14750: LD_VAR 0 7
14754: NOT
14755: AND
14756: PUSH
14757: LD_EXP 42
14761: NOT
14762: AND
14763: IFFALSE 14767
// exit ;
14765: GO 14958
// if buildings_list > 0 and engineerOkInside then
14767: LD_VAR 0 4
14771: PUSH
14772: LD_INT 0
14774: GREATER
14775: PUSH
14776: LD_VAR 0 6
14780: AND
14781: IFFALSE 14835
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14783: LD_ADDR_VAR 0 5
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_VAR 0 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 25
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: PUSH
14819: FOR_IN
14820: IFFALSE 14833
// ComExitBuilding ( i ) ;
14822: LD_VAR 0 5
14826: PPUSH
14827: CALL_OW 122
14831: GO 14819
14833: POP
14834: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14835: LD_VAR 0 4
14839: PUSH
14840: LD_INT 0
14842: GREATER
14843: PUSH
14844: LD_VAR 0 7
14848: PUSH
14849: LD_INT 0
14851: GREATER
14852: AND
14853: IFFALSE 14907
// begin for i in engineerOkOutside do
14855: LD_ADDR_VAR 0 5
14859: PUSH
14860: LD_VAR 0 7
14864: PUSH
14865: FOR_IN
14866: IFFALSE 14905
// for j in buildings_list do
14868: LD_ADDR_VAR 0 8
14872: PUSH
14873: LD_VAR 0 4
14877: PUSH
14878: FOR_IN
14879: IFFALSE 14901
// ComRepairBuilding ( i , j [ 1 ] ) ;
14881: LD_VAR 0 5
14885: PPUSH
14886: LD_VAR 0 8
14890: PUSH
14891: LD_INT 1
14893: ARRAY
14894: PPUSH
14895: CALL_OW 130
14899: GO 14878
14901: POP
14902: POP
14903: GO 14865
14905: POP
14906: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14907: LD_VAR 0 4
14911: PUSH
14912: LD_INT 0
14914: EQUAL
14915: PUSH
14916: LD_VAR 0 7
14920: PUSH
14921: LD_INT 0
14923: GREATER
14924: AND
14925: IFFALSE 14958
// for i in engineerOkOutside do
14927: LD_ADDR_VAR 0 5
14931: PUSH
14932: LD_VAR 0 7
14936: PUSH
14937: FOR_IN
14938: IFFALSE 14956
// ComEnterUnit ( i , building ) ;
14940: LD_VAR 0 5
14944: PPUSH
14945: LD_VAR 0 2
14949: PPUSH
14950: CALL_OW 120
14954: GO 14937
14956: POP
14957: POP
// end ;
14958: LD_VAR 0 3
14962: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14963: LD_INT 0
14965: PPUSH
14966: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14967: LD_INT 22
14969: PUSH
14970: LD_VAR 0 1
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 25
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 69
14997: PUSH
14998: LD_INT 0
15000: GREATER
15001: PUSH
15002: LD_INT 22
15004: PUSH
15005: LD_VAR 0 1
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 21
15016: PUSH
15017: LD_INT 3
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: PUSH
15024: LD_INT 3
15026: PUSH
15027: LD_INT 24
15029: PUSH
15030: LD_INT 1000
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: PPUSH
15046: CALL_OW 69
15050: PUSH
15051: LD_INT 0
15053: EQUAL
15054: AND
15055: PUSH
15056: LD_VAR 0 2
15060: PUSH
15061: LD_INT 0
15063: GREATER
15064: AND
15065: IFFALSE 15164
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15067: LD_ADDR_VAR 0 4
15071: PUSH
15072: LD_INT 22
15074: PUSH
15075: LD_VAR 0 1
15079: PUSH
15080: EMPTY
15081: LIST
15082: LIST
15083: PUSH
15084: LD_INT 25
15086: PUSH
15087: LD_INT 2
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 69
15102: PUSH
15103: FOR_IN
15104: IFFALSE 15162
// begin AddComExitBuilding ( i ) ;
15106: LD_VAR 0 4
15110: PPUSH
15111: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15115: LD_VAR 0 4
15119: PPUSH
15120: LD_VAR 0 2
15124: PUSH
15125: LD_INT 1
15127: ARRAY
15128: PPUSH
15129: LD_VAR 0 2
15133: PUSH
15134: LD_INT 2
15136: ARRAY
15137: PPUSH
15138: LD_VAR 0 2
15142: PUSH
15143: LD_INT 3
15145: ARRAY
15146: PPUSH
15147: LD_VAR 0 2
15151: PUSH
15152: LD_INT 4
15154: ARRAY
15155: PPUSH
15156: CALL_OW 205
// end ;
15160: GO 15103
15162: POP
15163: POP
// end ; end ;
15164: LD_VAR 0 3
15168: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15169: LD_INT 0
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
15177: PPUSH
15178: PPUSH
15179: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15180: LD_ADDR_VAR 0 6
15184: PUSH
15185: LD_INT 22
15187: PUSH
15188: LD_VAR 0 1
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 25
15199: PUSH
15200: LD_INT 4
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: PUSH
15207: LD_INT 24
15209: PUSH
15210: LD_INT 251
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: LIST
15221: PPUSH
15222: CALL_OW 69
15226: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15227: LD_ADDR_VAR 0 7
15231: PUSH
15232: LD_VAR 0 3
15236: PPUSH
15237: LD_INT 22
15239: PUSH
15240: LD_VAR 0 1
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 25
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 50
15261: PUSH
15262: EMPTY
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: PPUSH
15270: CALL_OW 70
15274: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15275: LD_ADDR_VAR 0 10
15279: PUSH
15280: LD_VAR 0 3
15284: PPUSH
15285: LD_INT 22
15287: PUSH
15288: LD_VAR 0 1
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 21
15299: PUSH
15300: LD_INT 1
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 3
15309: PUSH
15310: LD_INT 25
15312: PUSH
15313: LD_INT 3
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: EMPTY
15321: LIST
15322: LIST
15323: PUSH
15324: LD_INT 3
15326: PUSH
15327: LD_INT 24
15329: PUSH
15330: LD_INT 750
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: PPUSH
15347: CALL_OW 70
15351: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15352: LD_ADDR_VAR 0 11
15356: PUSH
15357: LD_VAR 0 2
15361: PPUSH
15362: LD_INT 22
15364: PUSH
15365: LD_VAR 0 1
15369: PUSH
15370: EMPTY
15371: LIST
15372: LIST
15373: PUSH
15374: LD_INT 21
15376: PUSH
15377: LD_INT 1
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: PUSH
15384: LD_INT 3
15386: PUSH
15387: LD_INT 25
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: EMPTY
15398: LIST
15399: LIST
15400: PUSH
15401: LD_INT 3
15403: PUSH
15404: LD_INT 24
15406: PUSH
15407: LD_INT 1000
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: PUSH
15414: EMPTY
15415: LIST
15416: LIST
15417: PUSH
15418: EMPTY
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: PPUSH
15424: CALL_OW 70
15428: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15429: LD_VAR 0 10
15433: NOT
15434: PUSH
15435: LD_VAR 0 7
15439: NOT
15440: AND
15441: PUSH
15442: LD_VAR 0 11
15446: NOT
15447: AND
15448: IFFALSE 15452
// exit ;
15450: GO 15712
// if damageUnits > 0 and sci_list > 0 then
15452: LD_VAR 0 10
15456: PUSH
15457: LD_INT 0
15459: GREATER
15460: PUSH
15461: LD_VAR 0 6
15465: PUSH
15466: LD_INT 0
15468: GREATER
15469: AND
15470: IFFALSE 15503
// for i in damageUnits do
15472: LD_ADDR_VAR 0 8
15476: PUSH
15477: LD_VAR 0 10
15481: PUSH
15482: FOR_IN
15483: IFFALSE 15501
// ComMoveToArea ( i , healArea ) ;
15485: LD_VAR 0 8
15489: PPUSH
15490: LD_VAR 0 2
15494: PPUSH
15495: CALL_OW 113
15499: GO 15482
15501: POP
15502: POP
// if unitsToHeal > 0 and sci_list > 0 then
15503: LD_VAR 0 11
15507: PUSH
15508: LD_INT 0
15510: GREATER
15511: PUSH
15512: LD_VAR 0 6
15516: PUSH
15517: LD_INT 0
15519: GREATER
15520: AND
15521: IFFALSE 15580
// begin for i in sci_list do
15523: LD_ADDR_VAR 0 8
15527: PUSH
15528: LD_VAR 0 6
15532: PUSH
15533: FOR_IN
15534: IFFALSE 15578
// begin ComExitBuilding ( i ) ;
15536: LD_VAR 0 8
15540: PPUSH
15541: CALL_OW 122
// for j in unitsToHeal do
15545: LD_ADDR_VAR 0 9
15549: PUSH
15550: LD_VAR 0 11
15554: PUSH
15555: FOR_IN
15556: IFFALSE 15574
// AddComHeal ( i , j ) ;
15558: LD_VAR 0 8
15562: PPUSH
15563: LD_VAR 0 9
15567: PPUSH
15568: CALL_OW 188
15572: GO 15555
15574: POP
15575: POP
// end ;
15576: GO 15533
15578: POP
15579: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15580: LD_VAR 0 10
15584: PUSH
15585: LD_INT 0
15587: EQUAL
15588: PUSH
15589: LD_VAR 0 11
15593: PUSH
15594: LD_INT 0
15596: EQUAL
15597: AND
15598: PUSH
15599: LD_VAR 0 7
15603: PUSH
15604: LD_INT 0
15606: GREATER
15607: AND
15608: IFFALSE 15712
// for i in sci_listOutside do
15610: LD_ADDR_VAR 0 8
15614: PUSH
15615: LD_VAR 0 7
15619: PUSH
15620: FOR_IN
15621: IFFALSE 15710
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15623: LD_ADDR_VAR 0 12
15627: PUSH
15628: LD_INT 22
15630: PUSH
15631: LD_VAR 0 1
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: LD_INT 21
15642: PUSH
15643: LD_INT 3
15645: PUSH
15646: EMPTY
15647: LIST
15648: LIST
15649: PUSH
15650: LD_INT 30
15652: PUSH
15653: LD_INT 8
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: EMPTY
15661: LIST
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15670: LD_ADDR_VAR 0 13
15674: PUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_VAR 0 12
15682: PPUSH
15683: CALL_OW 12
15687: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15688: LD_VAR 0 8
15692: PPUSH
15693: LD_VAR 0 12
15697: PUSH
15698: LD_VAR 0 13
15702: ARRAY
15703: PPUSH
15704: CALL_OW 120
// end ;
15708: GO 15620
15710: POP
15711: POP
// end ;
15712: LD_VAR 0 5
15716: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15717: LD_INT 0
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
15727: PPUSH
15728: PPUSH
15729: PPUSH
// amChassisTab = [ ] ;
15730: LD_ADDR_VAR 0 19
15734: PUSH
15735: EMPTY
15736: ST_TO_ADDR
// arChassisTab = [ ] ;
15737: LD_ADDR_VAR 0 18
15741: PUSH
15742: EMPTY
15743: ST_TO_ADDR
// ruChassisTab = [ ] ;
15744: LD_ADDR_VAR 0 17
15748: PUSH
15749: EMPTY
15750: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15751: LD_INT 35
15753: PPUSH
15754: CALL_OW 67
// if nation = 1 then
15758: LD_VAR 0 5
15762: PUSH
15763: LD_INT 1
15765: EQUAL
15766: IFFALSE 16271
// begin uc_side = side ;
15768: LD_ADDR_OWVAR 20
15772: PUSH
15773: LD_VAR 0 2
15777: ST_TO_ADDR
// uc_nation = nation ;
15778: LD_ADDR_OWVAR 21
15782: PUSH
15783: LD_VAR 0 5
15787: ST_TO_ADDR
// vc_engine = vehengine ;
15788: LD_ADDR_OWVAR 39
15792: PUSH
15793: LD_VAR 0 6
15797: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15798: LD_ADDR_OWVAR 38
15802: PUSH
15803: LD_VAR 0 7
15807: PUSH
15808: LD_INT 1
15810: PPUSH
15811: LD_VAR 0 7
15815: PPUSH
15816: CALL_OW 12
15820: ARRAY
15821: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15822: LD_ADDR_OWVAR 40
15826: PUSH
15827: LD_VAR 0 10
15831: PUSH
15832: LD_INT 1
15834: PPUSH
15835: LD_VAR 0 10
15839: PPUSH
15840: CALL_OW 12
15844: ARRAY
15845: ST_TO_ADDR
// for j = 1 to AMWeapon do
15846: LD_ADDR_VAR 0 14
15850: PUSH
15851: DOUBLE
15852: LD_INT 1
15854: DEC
15855: ST_TO_ADDR
15856: LD_VAR 0 10
15860: PUSH
15861: FOR_TO
15862: IFFALSE 16163
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15864: LD_VAR 0 10
15868: PUSH
15869: LD_VAR 0 14
15873: ARRAY
15874: PUSH
15875: LD_INT 2
15877: EQUAL
15878: PUSH
15879: LD_VAR 0 10
15883: PUSH
15884: LD_VAR 0 14
15888: ARRAY
15889: PUSH
15890: LD_INT 3
15892: EQUAL
15893: OR
15894: IFFALSE 15947
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15896: LD_ADDR_VAR 0 19
15900: PUSH
15901: LD_INT 1
15903: PUSH
15904: LD_INT 2
15906: PUSH
15907: LD_INT 3
15909: PUSH
15910: LD_INT 4
15912: PUSH
15913: LD_INT 5
15915: PUSH
15916: EMPTY
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15923: LD_ADDR_OWVAR 37
15927: PUSH
15928: LD_VAR 0 19
15932: PUSH
15933: LD_INT 1
15935: PPUSH
15936: LD_VAR 0 19
15940: PPUSH
15941: CALL_OW 12
15945: ARRAY
15946: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15947: LD_VAR 0 10
15951: PUSH
15952: LD_VAR 0 14
15956: ARRAY
15957: PUSH
15958: LD_INT 4
15960: EQUAL
15961: PUSH
15962: LD_VAR 0 10
15966: PUSH
15967: LD_VAR 0 14
15971: ARRAY
15972: PUSH
15973: LD_INT 5
15975: EQUAL
15976: OR
15977: PUSH
15978: LD_VAR 0 10
15982: PUSH
15983: LD_VAR 0 14
15987: ARRAY
15988: PUSH
15989: LD_INT 9
15991: EQUAL
15992: OR
15993: PUSH
15994: LD_VAR 0 10
15998: PUSH
15999: LD_VAR 0 14
16003: ARRAY
16004: PUSH
16005: LD_INT 11
16007: EQUAL
16008: OR
16009: PUSH
16010: LD_VAR 0 10
16014: PUSH
16015: LD_VAR 0 14
16019: ARRAY
16020: PUSH
16021: LD_INT 7
16023: EQUAL
16024: OR
16025: IFFALSE 16074
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16027: LD_ADDR_VAR 0 19
16031: PUSH
16032: LD_INT 2
16034: PUSH
16035: LD_INT 3
16037: PUSH
16038: LD_INT 4
16040: PUSH
16041: LD_INT 5
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16050: LD_ADDR_OWVAR 37
16054: PUSH
16055: LD_VAR 0 19
16059: PUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_VAR 0 19
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16074: LD_VAR 0 10
16078: PUSH
16079: LD_VAR 0 14
16083: ARRAY
16084: PUSH
16085: LD_INT 8
16087: EQUAL
16088: PUSH
16089: LD_VAR 0 10
16093: PUSH
16094: LD_VAR 0 14
16098: ARRAY
16099: PUSH
16100: LD_INT 6
16102: EQUAL
16103: OR
16104: PUSH
16105: LD_VAR 0 10
16109: PUSH
16110: LD_VAR 0 14
16114: ARRAY
16115: PUSH
16116: LD_INT 10
16118: EQUAL
16119: OR
16120: IFFALSE 16161
// begin amChassisTab = [ 4 , 5 ] ;
16122: LD_ADDR_VAR 0 19
16126: PUSH
16127: LD_INT 4
16129: PUSH
16130: LD_INT 5
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16137: LD_ADDR_OWVAR 37
16141: PUSH
16142: LD_VAR 0 19
16146: PUSH
16147: LD_INT 1
16149: PPUSH
16150: LD_VAR 0 19
16154: PPUSH
16155: CALL_OW 12
16159: ARRAY
16160: ST_TO_ADDR
// end ; end ;
16161: GO 15861
16163: POP
16164: POP
// veh = CreateVehicle ;
16165: LD_ADDR_VAR 0 16
16169: PUSH
16170: CALL_OW 45
16174: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16175: LD_VAR 0 16
16179: PPUSH
16180: LD_VAR 0 1
16184: PPUSH
16185: LD_INT 0
16187: PPUSH
16188: CALL_OW 49
// if vc_control = 1 then
16192: LD_OWVAR 38
16196: PUSH
16197: LD_INT 1
16199: EQUAL
16200: IFFALSE 16257
// begin hc_gallery =  ;
16202: LD_ADDR_OWVAR 33
16206: PUSH
16207: LD_STRING 
16209: ST_TO_ADDR
// hc_name =  ;
16210: LD_ADDR_OWVAR 26
16214: PUSH
16215: LD_STRING 
16217: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16218: LD_INT 0
16220: PPUSH
16221: LD_INT 3
16223: PPUSH
16224: LD_VAR 0 4
16228: PPUSH
16229: CALL_OW 380
// un = CreateHuman ;
16233: LD_ADDR_VAR 0 15
16237: PUSH
16238: CALL_OW 44
16242: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16243: LD_VAR 0 15
16247: PPUSH
16248: LD_VAR 0 16
16252: PPUSH
16253: CALL_OW 52
// end ; i = i + 1 ;
16257: LD_ADDR_VAR 0 13
16261: PUSH
16262: LD_VAR 0 13
16266: PUSH
16267: LD_INT 1
16269: PLUS
16270: ST_TO_ADDR
// end ; if nation = 2 then
16271: LD_VAR 0 5
16275: PUSH
16276: LD_INT 2
16278: EQUAL
16279: IFFALSE 16701
// begin uc_side = side ;
16281: LD_ADDR_OWVAR 20
16285: PUSH
16286: LD_VAR 0 2
16290: ST_TO_ADDR
// uc_nation = nation ;
16291: LD_ADDR_OWVAR 21
16295: PUSH
16296: LD_VAR 0 5
16300: ST_TO_ADDR
// vc_engine = vehengine ;
16301: LD_ADDR_OWVAR 39
16305: PUSH
16306: LD_VAR 0 6
16310: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16311: LD_ADDR_OWVAR 38
16315: PUSH
16316: LD_VAR 0 7
16320: PUSH
16321: LD_INT 1
16323: PPUSH
16324: LD_VAR 0 7
16328: PPUSH
16329: CALL_OW 12
16333: ARRAY
16334: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16335: LD_ADDR_OWVAR 40
16339: PUSH
16340: LD_VAR 0 9
16344: PUSH
16345: LD_INT 1
16347: PPUSH
16348: LD_VAR 0 9
16352: PPUSH
16353: CALL_OW 12
16357: ARRAY
16358: ST_TO_ADDR
// for j = 1 to ARWeapons do
16359: LD_ADDR_VAR 0 14
16363: PUSH
16364: DOUBLE
16365: LD_INT 1
16367: DEC
16368: ST_TO_ADDR
16369: LD_VAR 0 9
16373: PUSH
16374: FOR_TO
16375: IFFALSE 16593
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16377: LD_VAR 0 9
16381: PUSH
16382: LD_VAR 0 14
16386: ARRAY
16387: PUSH
16388: LD_INT 24
16390: EQUAL
16391: PUSH
16392: LD_VAR 0 9
16396: PUSH
16397: LD_VAR 0 14
16401: ARRAY
16402: PUSH
16403: LD_INT 22
16405: EQUAL
16406: OR
16407: PUSH
16408: LD_VAR 0 9
16412: PUSH
16413: LD_VAR 0 14
16417: ARRAY
16418: PUSH
16419: LD_INT 23
16421: EQUAL
16422: OR
16423: PUSH
16424: LD_VAR 0 9
16428: PUSH
16429: LD_VAR 0 14
16433: ARRAY
16434: PUSH
16435: LD_INT 30
16437: EQUAL
16438: OR
16439: IFFALSE 16476
// begin arChassisTab = [ 14 ] ;
16441: LD_ADDR_VAR 0 18
16445: PUSH
16446: LD_INT 14
16448: PUSH
16449: EMPTY
16450: LIST
16451: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16452: LD_ADDR_OWVAR 37
16456: PUSH
16457: LD_VAR 0 18
16461: PUSH
16462: LD_INT 1
16464: PPUSH
16465: LD_VAR 0 18
16469: PPUSH
16470: CALL_OW 12
16474: ARRAY
16475: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16476: LD_VAR 0 9
16480: PUSH
16481: LD_VAR 0 14
16485: ARRAY
16486: PUSH
16487: LD_INT 29
16489: EQUAL
16490: PUSH
16491: LD_VAR 0 9
16495: PUSH
16496: LD_VAR 0 14
16500: ARRAY
16501: PUSH
16502: LD_INT 28
16504: EQUAL
16505: OR
16506: PUSH
16507: LD_VAR 0 9
16511: PUSH
16512: LD_VAR 0 14
16516: ARRAY
16517: PUSH
16518: LD_INT 27
16520: EQUAL
16521: OR
16522: PUSH
16523: LD_VAR 0 9
16527: PUSH
16528: LD_VAR 0 14
16532: ARRAY
16533: PUSH
16534: LD_INT 26
16536: EQUAL
16537: OR
16538: PUSH
16539: LD_VAR 0 9
16543: PUSH
16544: LD_VAR 0 14
16548: ARRAY
16549: PUSH
16550: LD_INT 25
16552: EQUAL
16553: OR
16554: IFFALSE 16591
// begin arChassisTab = [ 14 ] ;
16556: LD_ADDR_VAR 0 18
16560: PUSH
16561: LD_INT 14
16563: PUSH
16564: EMPTY
16565: LIST
16566: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16567: LD_ADDR_OWVAR 37
16571: PUSH
16572: LD_VAR 0 18
16576: PUSH
16577: LD_INT 1
16579: PPUSH
16580: LD_VAR 0 18
16584: PPUSH
16585: CALL_OW 12
16589: ARRAY
16590: ST_TO_ADDR
// end ; end ;
16591: GO 16374
16593: POP
16594: POP
// veh = CreateVehicle ;
16595: LD_ADDR_VAR 0 16
16599: PUSH
16600: CALL_OW 45
16604: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16605: LD_VAR 0 16
16609: PPUSH
16610: LD_VAR 0 1
16614: PPUSH
16615: LD_INT 0
16617: PPUSH
16618: CALL_OW 49
// if vc_control = 1 then
16622: LD_OWVAR 38
16626: PUSH
16627: LD_INT 1
16629: EQUAL
16630: IFFALSE 16687
// begin hc_gallery =  ;
16632: LD_ADDR_OWVAR 33
16636: PUSH
16637: LD_STRING 
16639: ST_TO_ADDR
// hc_name =  ;
16640: LD_ADDR_OWVAR 26
16644: PUSH
16645: LD_STRING 
16647: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16648: LD_INT 0
16650: PPUSH
16651: LD_INT 3
16653: PPUSH
16654: LD_VAR 0 4
16658: PPUSH
16659: CALL_OW 380
// un = CreateHuman ;
16663: LD_ADDR_VAR 0 15
16667: PUSH
16668: CALL_OW 44
16672: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16673: LD_VAR 0 15
16677: PPUSH
16678: LD_VAR 0 16
16682: PPUSH
16683: CALL_OW 52
// end ; i = i + 1 ;
16687: LD_ADDR_VAR 0 13
16691: PUSH
16692: LD_VAR 0 13
16696: PUSH
16697: LD_INT 1
16699: PLUS
16700: ST_TO_ADDR
// end ; if nation = 3 then
16701: LD_VAR 0 5
16705: PUSH
16706: LD_INT 3
16708: EQUAL
16709: IFFALSE 17115
// begin uc_side = side ;
16711: LD_ADDR_OWVAR 20
16715: PUSH
16716: LD_VAR 0 2
16720: ST_TO_ADDR
// uc_nation = nation ;
16721: LD_ADDR_OWVAR 21
16725: PUSH
16726: LD_VAR 0 5
16730: ST_TO_ADDR
// vc_engine = vehengine ;
16731: LD_ADDR_OWVAR 39
16735: PUSH
16736: LD_VAR 0 6
16740: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16741: LD_ADDR_OWVAR 38
16745: PUSH
16746: LD_VAR 0 7
16750: PUSH
16751: LD_INT 1
16753: PPUSH
16754: LD_VAR 0 7
16758: PPUSH
16759: CALL_OW 12
16763: ARRAY
16764: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16765: LD_ADDR_OWVAR 40
16769: PUSH
16770: LD_VAR 0 8
16774: PUSH
16775: LD_INT 1
16777: PPUSH
16778: LD_VAR 0 8
16782: PPUSH
16783: CALL_OW 12
16787: ARRAY
16788: ST_TO_ADDR
// for j = 1 to RuWeapons do
16789: LD_ADDR_VAR 0 14
16793: PUSH
16794: DOUBLE
16795: LD_INT 1
16797: DEC
16798: ST_TO_ADDR
16799: LD_VAR 0 8
16803: PUSH
16804: FOR_TO
16805: IFFALSE 17007
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16807: LD_VAR 0 8
16811: PUSH
16812: LD_VAR 0 14
16816: ARRAY
16817: PUSH
16818: LD_INT 42
16820: EQUAL
16821: PUSH
16822: LD_VAR 0 8
16826: PUSH
16827: LD_VAR 0 14
16831: ARRAY
16832: PUSH
16833: LD_INT 43
16835: EQUAL
16836: OR
16837: PUSH
16838: LD_VAR 0 8
16842: PUSH
16843: LD_VAR 0 14
16847: ARRAY
16848: PUSH
16849: LD_INT 44
16851: EQUAL
16852: OR
16853: PUSH
16854: LD_VAR 0 8
16858: PUSH
16859: LD_VAR 0 14
16863: ARRAY
16864: PUSH
16865: LD_INT 45
16867: EQUAL
16868: OR
16869: PUSH
16870: LD_VAR 0 8
16874: PUSH
16875: LD_VAR 0 14
16879: ARRAY
16880: PUSH
16881: LD_INT 49
16883: EQUAL
16884: OR
16885: IFFALSE 16934
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16887: LD_ADDR_VAR 0 17
16891: PUSH
16892: LD_INT 21
16894: PUSH
16895: LD_INT 22
16897: PUSH
16898: LD_INT 23
16900: PUSH
16901: LD_INT 24
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16910: LD_ADDR_OWVAR 37
16914: PUSH
16915: LD_VAR 0 17
16919: PUSH
16920: LD_INT 1
16922: PPUSH
16923: LD_VAR 0 17
16927: PPUSH
16928: CALL_OW 12
16932: ARRAY
16933: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16934: LD_VAR 0 8
16938: PUSH
16939: LD_VAR 0 14
16943: ARRAY
16944: PUSH
16945: LD_INT 46
16947: EQUAL
16948: PUSH
16949: LD_VAR 0 8
16953: PUSH
16954: LD_VAR 0 14
16958: ARRAY
16959: PUSH
16960: LD_INT 47
16962: EQUAL
16963: OR
16964: IFFALSE 17005
// begin ruChassisTab = [ 23 , 24 ] ;
16966: LD_ADDR_VAR 0 17
16970: PUSH
16971: LD_INT 23
16973: PUSH
16974: LD_INT 24
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16981: LD_ADDR_OWVAR 37
16985: PUSH
16986: LD_VAR 0 17
16990: PUSH
16991: LD_INT 1
16993: PPUSH
16994: LD_VAR 0 17
16998: PPUSH
16999: CALL_OW 12
17003: ARRAY
17004: ST_TO_ADDR
// end ; end ;
17005: GO 16804
17007: POP
17008: POP
// veh = CreateVehicle ;
17009: LD_ADDR_VAR 0 16
17013: PUSH
17014: CALL_OW 45
17018: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17019: LD_VAR 0 16
17023: PPUSH
17024: LD_VAR 0 1
17028: PPUSH
17029: LD_INT 0
17031: PPUSH
17032: CALL_OW 49
// if vc_control = 1 then
17036: LD_OWVAR 38
17040: PUSH
17041: LD_INT 1
17043: EQUAL
17044: IFFALSE 17101
// begin hc_gallery =  ;
17046: LD_ADDR_OWVAR 33
17050: PUSH
17051: LD_STRING 
17053: ST_TO_ADDR
// hc_name =  ;
17054: LD_ADDR_OWVAR 26
17058: PUSH
17059: LD_STRING 
17061: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17062: LD_INT 0
17064: PPUSH
17065: LD_INT 3
17067: PPUSH
17068: LD_VAR 0 4
17072: PPUSH
17073: CALL_OW 380
// un = CreateHuman ;
17077: LD_ADDR_VAR 0 15
17081: PUSH
17082: CALL_OW 44
17086: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17087: LD_VAR 0 15
17091: PPUSH
17092: LD_VAR 0 16
17096: PPUSH
17097: CALL_OW 52
// end ; i = i + 1 ;
17101: LD_ADDR_VAR 0 13
17105: PUSH
17106: LD_VAR 0 13
17110: PUSH
17111: LD_INT 1
17113: PLUS
17114: ST_TO_ADDR
// end ; until i = vehCount ;
17115: LD_VAR 0 13
17119: PUSH
17120: LD_VAR 0 3
17124: EQUAL
17125: IFFALSE 15751
// repeat wait ( 0 0$1 ) ;
17127: LD_INT 35
17129: PPUSH
17130: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17134: LD_ADDR_VAR 0 20
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_VAR 0 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 21
17153: PUSH
17154: LD_INT 2
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 24
17163: PUSH
17164: LD_INT 650
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: PPUSH
17176: CALL_OW 69
17180: ST_TO_ADDR
// if vehicleOK_list > 0 then
17181: LD_VAR 0 20
17185: PUSH
17186: LD_INT 0
17188: GREATER
17189: IFFALSE 17380
// begin for i in vehicleOK_list do
17191: LD_ADDR_VAR 0 13
17195: PUSH
17196: LD_VAR 0 20
17200: PUSH
17201: FOR_IN
17202: IFFALSE 17378
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17204: LD_ADDR_VAR 0 21
17208: PUSH
17209: LD_INT 22
17211: PUSH
17212: LD_VAR 0 11
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PPUSH
17221: CALL_OW 69
17225: PPUSH
17226: LD_VAR 0 13
17230: PPUSH
17231: CALL_OW 74
17235: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17236: LD_ADDR_VAR 0 22
17240: PUSH
17241: LD_INT 22
17243: PUSH
17244: LD_VAR 0 11
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: LD_INT 2
17255: PUSH
17256: LD_INT 59
17258: PUSH
17259: EMPTY
17260: LIST
17261: PUSH
17262: LD_INT 21
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 21
17274: PUSH
17275: LD_INT 2
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: EMPTY
17293: LIST
17294: PPUSH
17295: CALL_OW 69
17299: PPUSH
17300: LD_VAR 0 13
17304: PPUSH
17305: CALL_OW 74
17309: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17310: LD_VAR 0 13
17314: PPUSH
17315: LD_VAR 0 21
17319: PPUSH
17320: CALL_OW 296
17324: PUSH
17325: LD_INT 8
17327: PLUS
17328: PUSH
17329: LD_VAR 0 13
17333: PPUSH
17334: LD_VAR 0 22
17338: PPUSH
17339: CALL_OW 296
17343: LESS
17344: IFFALSE 17362
// begin ComAttackUnit ( i , target1 ) ;
17346: LD_VAR 0 13
17350: PPUSH
17351: LD_VAR 0 21
17355: PPUSH
17356: CALL_OW 115
// end else
17360: GO 17376
// begin ComAttackUnit ( i , target2 ) ;
17362: LD_VAR 0 13
17366: PPUSH
17367: LD_VAR 0 22
17371: PPUSH
17372: CALL_OW 115
// end ; end ;
17376: GO 17201
17378: POP
17379: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17380: LD_INT 22
17382: PUSH
17383: LD_VAR 0 2
17387: PUSH
17388: EMPTY
17389: LIST
17390: LIST
17391: PUSH
17392: LD_INT 21
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: EMPTY
17399: LIST
17400: LIST
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PPUSH
17406: CALL_OW 69
17410: PUSH
17411: LD_INT 0
17413: EQUAL
17414: IFFALSE 17127
// end ;
17416: LD_VAR 0 12
17420: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17421: LD_INT 0
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
17431: PPUSH
17432: PPUSH
17433: PPUSH
// for i = 1 to soldierCount do
17434: LD_ADDR_VAR 0 13
17438: PUSH
17439: DOUBLE
17440: LD_INT 1
17442: DEC
17443: ST_TO_ADDR
17444: LD_VAR 0 3
17448: PUSH
17449: FOR_TO
17450: IFFALSE 17532
// begin uc_side = side ;
17452: LD_ADDR_OWVAR 20
17456: PUSH
17457: LD_VAR 0 1
17461: ST_TO_ADDR
// uc_nation = nation ;
17462: LD_ADDR_OWVAR 21
17466: PUSH
17467: LD_VAR 0 2
17471: ST_TO_ADDR
// hc_name =  ;
17472: LD_ADDR_OWVAR 26
17476: PUSH
17477: LD_STRING 
17479: ST_TO_ADDR
// hc_gallery =  ;
17480: LD_ADDR_OWVAR 33
17484: PUSH
17485: LD_STRING 
17487: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17488: LD_INT 0
17490: PPUSH
17491: LD_INT 1
17493: PPUSH
17494: LD_VAR 0 8
17498: PPUSH
17499: CALL_OW 380
// un = CreateHuman ;
17503: LD_ADDR_VAR 0 15
17507: PUSH
17508: CALL_OW 44
17512: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17513: LD_VAR 0 15
17517: PPUSH
17518: LD_VAR 0 9
17522: PPUSH
17523: LD_INT 0
17525: PPUSH
17526: CALL_OW 49
// end ;
17530: GO 17449
17532: POP
17533: POP
// for i = 1 to sniperCount do
17534: LD_ADDR_VAR 0 13
17538: PUSH
17539: DOUBLE
17540: LD_INT 1
17542: DEC
17543: ST_TO_ADDR
17544: LD_VAR 0 4
17548: PUSH
17549: FOR_TO
17550: IFFALSE 17632
// begin uc_side = side ;
17552: LD_ADDR_OWVAR 20
17556: PUSH
17557: LD_VAR 0 1
17561: ST_TO_ADDR
// uc_nation = nation ;
17562: LD_ADDR_OWVAR 21
17566: PUSH
17567: LD_VAR 0 2
17571: ST_TO_ADDR
// hc_name =  ;
17572: LD_ADDR_OWVAR 26
17576: PUSH
17577: LD_STRING 
17579: ST_TO_ADDR
// hc_gallery =  ;
17580: LD_ADDR_OWVAR 33
17584: PUSH
17585: LD_STRING 
17587: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17588: LD_INT 0
17590: PPUSH
17591: LD_INT 5
17593: PPUSH
17594: LD_VAR 0 8
17598: PPUSH
17599: CALL_OW 380
// un = CreateHuman ;
17603: LD_ADDR_VAR 0 15
17607: PUSH
17608: CALL_OW 44
17612: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17613: LD_VAR 0 15
17617: PPUSH
17618: LD_VAR 0 9
17622: PPUSH
17623: LD_INT 0
17625: PPUSH
17626: CALL_OW 49
// end ;
17630: GO 17549
17632: POP
17633: POP
// for i = 1 to bazookCount do
17634: LD_ADDR_VAR 0 13
17638: PUSH
17639: DOUBLE
17640: LD_INT 1
17642: DEC
17643: ST_TO_ADDR
17644: LD_VAR 0 5
17648: PUSH
17649: FOR_TO
17650: IFFALSE 17732
// begin uc_side = side ;
17652: LD_ADDR_OWVAR 20
17656: PUSH
17657: LD_VAR 0 1
17661: ST_TO_ADDR
// uc_nation = nation ;
17662: LD_ADDR_OWVAR 21
17666: PUSH
17667: LD_VAR 0 2
17671: ST_TO_ADDR
// hc_name =  ;
17672: LD_ADDR_OWVAR 26
17676: PUSH
17677: LD_STRING 
17679: ST_TO_ADDR
// hc_gallery =  ;
17680: LD_ADDR_OWVAR 33
17684: PUSH
17685: LD_STRING 
17687: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17688: LD_INT 0
17690: PPUSH
17691: LD_INT 9
17693: PPUSH
17694: LD_VAR 0 8
17698: PPUSH
17699: CALL_OW 380
// un = CreateHuman ;
17703: LD_ADDR_VAR 0 15
17707: PUSH
17708: CALL_OW 44
17712: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17713: LD_VAR 0 15
17717: PPUSH
17718: LD_VAR 0 9
17722: PPUSH
17723: LD_INT 0
17725: PPUSH
17726: CALL_OW 49
// end ;
17730: GO 17649
17732: POP
17733: POP
// for i = 1 to mortalCount do
17734: LD_ADDR_VAR 0 13
17738: PUSH
17739: DOUBLE
17740: LD_INT 1
17742: DEC
17743: ST_TO_ADDR
17744: LD_VAR 0 6
17748: PUSH
17749: FOR_TO
17750: IFFALSE 17832
// begin uc_side = side ;
17752: LD_ADDR_OWVAR 20
17756: PUSH
17757: LD_VAR 0 1
17761: ST_TO_ADDR
// uc_nation = nation ;
17762: LD_ADDR_OWVAR 21
17766: PUSH
17767: LD_VAR 0 2
17771: ST_TO_ADDR
// hc_name =  ;
17772: LD_ADDR_OWVAR 26
17776: PUSH
17777: LD_STRING 
17779: ST_TO_ADDR
// hc_gallery =  ;
17780: LD_ADDR_OWVAR 33
17784: PUSH
17785: LD_STRING 
17787: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17788: LD_INT 0
17790: PPUSH
17791: LD_INT 8
17793: PPUSH
17794: LD_VAR 0 8
17798: PPUSH
17799: CALL_OW 380
// un = CreateHuman ;
17803: LD_ADDR_VAR 0 15
17807: PUSH
17808: CALL_OW 44
17812: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17813: LD_VAR 0 15
17817: PPUSH
17818: LD_VAR 0 9
17822: PPUSH
17823: LD_INT 0
17825: PPUSH
17826: CALL_OW 49
// end ;
17830: GO 17749
17832: POP
17833: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17834: LD_ADDR_VAR 0 18
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_VAR 0 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 25
17856: PUSH
17857: LD_INT 1
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: PUSH
17864: LD_INT 25
17866: PUSH
17867: LD_INT 5
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: PUSH
17874: LD_INT 25
17876: PUSH
17877: LD_INT 8
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 25
17886: PUSH
17887: LD_INT 9
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PPUSH
17905: CALL_OW 69
17909: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17910: LD_ADDR_VAR 0 17
17914: PUSH
17915: LD_INT 22
17917: PUSH
17918: LD_VAR 0 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 25
17929: PUSH
17930: LD_INT 4
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PPUSH
17941: CALL_OW 69
17945: ST_TO_ADDR
// for i in medic_list do
17946: LD_ADDR_VAR 0 13
17950: PUSH
17951: LD_VAR 0 17
17955: PUSH
17956: FOR_IN
17957: IFFALSE 17975
// ComMoveToArea ( i , healArea ) ;
17959: LD_VAR 0 13
17963: PPUSH
17964: LD_VAR 0 10
17968: PPUSH
17969: CALL_OW 113
17973: GO 17956
17975: POP
17976: POP
// repeat wait ( 0 0$1 ) ;
17977: LD_INT 35
17979: PPUSH
17980: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17984: LD_ADDR_VAR 0 16
17988: PUSH
17989: LD_INT 22
17991: PUSH
17992: LD_VAR 0 1
17996: PUSH
17997: EMPTY
17998: LIST
17999: LIST
18000: PUSH
18001: LD_INT 1
18003: PUSH
18004: LD_INT 3
18006: PUSH
18007: LD_INT 24
18009: PUSH
18010: LD_INT 550
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PUSH
18021: LD_INT 24
18023: PUSH
18024: LD_INT 250
18026: PUSH
18027: EMPTY
18028: LIST
18029: LIST
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: LIST
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL_OW 69
18044: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18045: LD_ADDR_VAR 0 18
18049: PUSH
18050: LD_INT 22
18052: PUSH
18053: LD_VAR 0 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: LD_INT 2
18064: PUSH
18065: LD_INT 25
18067: PUSH
18068: LD_INT 1
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: LD_INT 25
18077: PUSH
18078: LD_INT 5
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 25
18087: PUSH
18088: LD_INT 8
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 25
18097: PUSH
18098: LD_INT 9
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: PUSH
18112: LD_INT 24
18114: PUSH
18115: LD_INT 1000
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: PPUSH
18127: CALL_OW 69
18131: ST_TO_ADDR
// if medicCount > 0 then
18132: LD_VAR 0 7
18136: PUSH
18137: LD_INT 0
18139: GREATER
18140: IFFALSE 18214
// begin if damageUnit_list > 0 then
18142: LD_VAR 0 16
18146: PUSH
18147: LD_INT 0
18149: GREATER
18150: IFFALSE 18214
// begin for i in damageUnit_list do
18152: LD_ADDR_VAR 0 13
18156: PUSH
18157: LD_VAR 0 16
18161: PUSH
18162: FOR_IN
18163: IFFALSE 18212
// begin ComMoveToArea ( i , healArea ) ;
18165: LD_VAR 0 13
18169: PPUSH
18170: LD_VAR 0 10
18174: PPUSH
18175: CALL_OW 113
// for j in medic_list do
18179: LD_ADDR_VAR 0 14
18183: PUSH
18184: LD_VAR 0 17
18188: PUSH
18189: FOR_IN
18190: IFFALSE 18208
// AddComHeal ( j , i ) ;
18192: LD_VAR 0 14
18196: PPUSH
18197: LD_VAR 0 13
18201: PPUSH
18202: CALL_OW 188
18206: GO 18189
18208: POP
18209: POP
// end ;
18210: GO 18162
18212: POP
18213: POP
// end ; end ; for i in soldiersOK_list do
18214: LD_ADDR_VAR 0 13
18218: PUSH
18219: LD_VAR 0 18
18223: PUSH
18224: FOR_IN
18225: IFFALSE 18401
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18227: LD_ADDR_VAR 0 21
18231: PUSH
18232: LD_INT 22
18234: PUSH
18235: LD_VAR 0 11
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PPUSH
18244: CALL_OW 69
18248: PPUSH
18249: LD_VAR 0 13
18253: PPUSH
18254: CALL_OW 74
18258: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18259: LD_ADDR_VAR 0 22
18263: PUSH
18264: LD_INT 22
18266: PUSH
18267: LD_VAR 0 11
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: PUSH
18276: LD_INT 2
18278: PUSH
18279: LD_INT 59
18281: PUSH
18282: EMPTY
18283: LIST
18284: PUSH
18285: LD_INT 21
18287: PUSH
18288: LD_INT 1
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 21
18297: PUSH
18298: LD_INT 2
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: LIST
18309: LIST
18310: PUSH
18311: EMPTY
18312: LIST
18313: LIST
18314: PUSH
18315: EMPTY
18316: LIST
18317: PPUSH
18318: CALL_OW 69
18322: PPUSH
18323: LD_VAR 0 13
18327: PPUSH
18328: CALL_OW 74
18332: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18333: LD_VAR 0 13
18337: PPUSH
18338: LD_VAR 0 21
18342: PPUSH
18343: CALL_OW 296
18347: PUSH
18348: LD_INT 8
18350: PLUS
18351: PUSH
18352: LD_VAR 0 13
18356: PPUSH
18357: LD_VAR 0 22
18361: PPUSH
18362: CALL_OW 296
18366: LESS
18367: IFFALSE 18385
// begin ComAttackUnit ( i , target1 ) ;
18369: LD_VAR 0 13
18373: PPUSH
18374: LD_VAR 0 21
18378: PPUSH
18379: CALL_OW 115
// end else
18383: GO 18399
// begin ComAttackUnit ( i , target2 ) ;
18385: LD_VAR 0 13
18389: PPUSH
18390: LD_VAR 0 22
18394: PPUSH
18395: CALL_OW 115
// end ; end ;
18399: GO 18224
18401: POP
18402: POP
// for i in soldiersOK_list do
18403: LD_ADDR_VAR 0 13
18407: PUSH
18408: LD_VAR 0 18
18412: PUSH
18413: FOR_IN
18414: IFFALSE 18590
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18416: LD_ADDR_VAR 0 21
18420: PUSH
18421: LD_INT 22
18423: PUSH
18424: LD_VAR 0 11
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PPUSH
18433: CALL_OW 69
18437: PPUSH
18438: LD_VAR 0 13
18442: PPUSH
18443: CALL_OW 74
18447: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18448: LD_ADDR_VAR 0 22
18452: PUSH
18453: LD_INT 22
18455: PUSH
18456: LD_VAR 0 11
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: LD_INT 59
18470: PUSH
18471: EMPTY
18472: LIST
18473: PUSH
18474: LD_INT 21
18476: PUSH
18477: LD_INT 1
18479: PUSH
18480: EMPTY
18481: LIST
18482: LIST
18483: PUSH
18484: LD_INT 21
18486: PUSH
18487: LD_INT 2
18489: PUSH
18490: EMPTY
18491: LIST
18492: LIST
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: LIST
18498: LIST
18499: PUSH
18500: EMPTY
18501: LIST
18502: LIST
18503: PUSH
18504: EMPTY
18505: LIST
18506: PPUSH
18507: CALL_OW 69
18511: PPUSH
18512: LD_VAR 0 13
18516: PPUSH
18517: CALL_OW 74
18521: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18522: LD_VAR 0 13
18526: PPUSH
18527: LD_VAR 0 21
18531: PPUSH
18532: CALL_OW 296
18536: PUSH
18537: LD_INT 8
18539: PLUS
18540: PUSH
18541: LD_VAR 0 13
18545: PPUSH
18546: LD_VAR 0 22
18550: PPUSH
18551: CALL_OW 296
18555: LESS
18556: IFFALSE 18574
// begin ComAttackUnit ( i , target1 ) ;
18558: LD_VAR 0 13
18562: PPUSH
18563: LD_VAR 0 21
18567: PPUSH
18568: CALL_OW 115
// end else
18572: GO 18588
// begin ComAttackUnit ( i , target2 ) ;
18574: LD_VAR 0 13
18578: PPUSH
18579: LD_VAR 0 22
18583: PPUSH
18584: CALL_OW 115
// end ; end ;
18588: GO 18413
18590: POP
18591: POP
// until soldiersOK_list = [ ] ;
18592: LD_VAR 0 18
18596: PUSH
18597: EMPTY
18598: EQUAL
18599: IFFALSE 17977
// end ;
18601: LD_VAR 0 12
18605: RET
// export function TameApemans ; var i , j ; begin
18606: LD_INT 0
18608: PPUSH
18609: PPUSH
18610: PPUSH
// repeat wait ( 0 0$1 ) ;
18611: LD_INT 35
18613: PPUSH
18614: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18618: LD_ADDR_VAR 0 2
18622: PUSH
18623: LD_INT 22
18625: PUSH
18626: LD_INT 2
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 25
18635: PUSH
18636: LD_INT 4
18638: PUSH
18639: EMPTY
18640: LIST
18641: LIST
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: PPUSH
18647: CALL_OW 69
18651: PUSH
18652: FOR_IN
18653: IFFALSE 18730
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18655: LD_ADDR_VAR 0 3
18659: PUSH
18660: LD_INT 5
18662: PPUSH
18663: LD_INT 22
18665: PUSH
18666: LD_INT 0
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 25
18675: PUSH
18676: LD_INT 12
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: EMPTY
18684: LIST
18685: LIST
18686: PPUSH
18687: CALL_OW 70
18691: PUSH
18692: FOR_IN
18693: IFFALSE 18726
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18695: LD_VAR 0 2
18699: PPUSH
18700: LD_VAR 0 3
18704: PPUSH
18705: CALL_OW 250
18709: PPUSH
18710: LD_VAR 0 3
18714: PPUSH
18715: CALL_OW 251
18719: PPUSH
18720: CALL_OW 191
// end ;
18724: GO 18692
18726: POP
18727: POP
// end ;
18728: GO 18652
18730: POP
18731: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18732: LD_INT 22
18734: PUSH
18735: LD_INT 2
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 25
18744: PUSH
18745: LD_INT 4
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PPUSH
18756: CALL_OW 69
18760: PUSH
18761: LD_INT 0
18763: EQUAL
18764: PUSH
18765: LD_INT 5
18767: PPUSH
18768: LD_INT 22
18770: PUSH
18771: LD_INT 0
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PUSH
18778: LD_INT 25
18780: PUSH
18781: LD_INT 12
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: EMPTY
18789: LIST
18790: LIST
18791: PPUSH
18792: CALL_OW 70
18796: PUSH
18797: LD_INT 0
18799: EQUAL
18800: OR
18801: IFFALSE 18611
// wait ( 0 0$30 ) ;
18803: LD_INT 1050
18805: PPUSH
18806: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18810: LD_ADDR_VAR 0 2
18814: PUSH
18815: LD_INT 22
18817: PUSH
18818: LD_INT 2
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 25
18827: PUSH
18828: LD_INT 12
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PPUSH
18839: CALL_OW 69
18843: PUSH
18844: FOR_IN
18845: IFFALSE 18909
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18847: LD_VAR 0 2
18851: PPUSH
18852: LD_EXP 43
18856: PPUSH
18857: CALL_OW 250
18861: PPUSH
18862: LD_EXP 43
18866: PPUSH
18867: CALL_OW 251
18871: PPUSH
18872: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18876: LD_VAR 0 2
18880: PPUSH
18881: LD_INT 16
18883: PUSH
18884: LD_INT 15
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_INT 2
18896: PPUSH
18897: CALL_OW 12
18901: ARRAY
18902: PPUSH
18903: CALL_OW 336
// end ;
18907: GO 18844
18909: POP
18910: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18911: LD_ADDR_VAR 0 2
18915: PUSH
18916: LD_INT 22
18918: PUSH
18919: LD_INT 2
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: LD_INT 25
18928: PUSH
18929: LD_INT 4
18931: PUSH
18932: EMPTY
18933: LIST
18934: LIST
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PPUSH
18940: CALL_OW 69
18944: PUSH
18945: FOR_IN
18946: IFFALSE 18992
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18948: LD_VAR 0 2
18952: PPUSH
18953: LD_INT 22
18955: PUSH
18956: LD_INT 2
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 30
18965: PUSH
18966: LD_INT 8
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PPUSH
18977: CALL_OW 69
18981: PUSH
18982: LD_INT 1
18984: ARRAY
18985: PPUSH
18986: CALL_OW 120
18990: GO 18945
18992: POP
18993: POP
// end ;
18994: LD_VAR 0 1
18998: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18999: LD_INT 0
19001: PPUSH
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
19007: PPUSH
19008: PPUSH
19009: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19010: LD_INT 22
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 21
19024: PUSH
19025: LD_INT 2
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PPUSH
19036: CALL_OW 69
19040: PUSH
19041: LD_VAR 0 3
19045: LESSEQUAL
19046: IFFALSE 19190
// for i = 1 to vehCount do
19048: LD_ADDR_VAR 0 10
19052: PUSH
19053: DOUBLE
19054: LD_INT 1
19056: DEC
19057: ST_TO_ADDR
19058: LD_VAR 0 3
19062: PUSH
19063: FOR_TO
19064: IFFALSE 19188
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19066: LD_ADDR_VAR 0 12
19070: PUSH
19071: LD_VAR 0 5
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_VAR 0 5
19083: PPUSH
19084: CALL_OW 12
19088: ARRAY
19089: ST_TO_ADDR
// if randWeapon = 46 then
19090: LD_VAR 0 12
19094: PUSH
19095: LD_INT 46
19097: EQUAL
19098: IFFALSE 19143
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19100: LD_VAR 0 2
19104: PPUSH
19105: LD_INT 24
19107: PPUSH
19108: LD_VAR 0 6
19112: PPUSH
19113: LD_VAR 0 7
19117: PUSH
19118: LD_INT 1
19120: PPUSH
19121: LD_VAR 0 7
19125: PPUSH
19126: CALL_OW 12
19130: ARRAY
19131: PPUSH
19132: LD_VAR 0 12
19136: PPUSH
19137: CALL_OW 185
19141: GO 19186
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19143: LD_VAR 0 2
19147: PPUSH
19148: LD_VAR 0 8
19152: PPUSH
19153: LD_VAR 0 6
19157: PPUSH
19158: LD_VAR 0 7
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_VAR 0 7
19170: PPUSH
19171: CALL_OW 12
19175: ARRAY
19176: PPUSH
19177: LD_VAR 0 12
19181: PPUSH
19182: CALL_OW 185
// end ;
19186: GO 19063
19188: POP
19189: POP
// repeat wait ( 0 0$1 ) ;
19190: LD_INT 35
19192: PPUSH
19193: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19197: LD_INT 22
19199: PUSH
19200: LD_VAR 0 1
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 21
19211: PUSH
19212: LD_INT 2
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: PUSH
19219: LD_INT 24
19221: PUSH
19222: LD_INT 250
19224: PUSH
19225: EMPTY
19226: LIST
19227: LIST
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: PUSH
19239: LD_VAR 0 3
19243: GREATEREQUAL
19244: IFFALSE 19190
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19246: LD_INT 22
19248: PUSH
19249: LD_VAR 0 1
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 2
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 24
19270: PUSH
19271: LD_INT 250
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 69
19287: PUSH
19288: LD_VAR 0 3
19292: GREATEREQUAL
19293: IFFALSE 19636
// begin repeat begin wait ( 0 0$1 ) ;
19295: LD_INT 35
19297: PPUSH
19298: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19302: LD_INT 22
19304: PUSH
19305: LD_VAR 0 1
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 21
19316: PUSH
19317: LD_INT 2
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 24
19326: PUSH
19327: LD_INT 651
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: LIST
19338: PPUSH
19339: CALL_OW 69
19343: PUSH
19344: LD_INT 0
19346: GREATER
19347: IFFALSE 19575
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19349: LD_ADDR_VAR 0 10
19353: PUSH
19354: LD_INT 22
19356: PUSH
19357: LD_VAR 0 1
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 21
19368: PUSH
19369: LD_INT 2
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 24
19378: PUSH
19379: LD_INT 651
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: LIST
19390: PPUSH
19391: CALL_OW 69
19395: PUSH
19396: FOR_IN
19397: IFFALSE 19573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19399: LD_ADDR_VAR 0 16
19403: PUSH
19404: LD_INT 22
19406: PUSH
19407: LD_VAR 0 4
19411: PUSH
19412: EMPTY
19413: LIST
19414: LIST
19415: PPUSH
19416: CALL_OW 69
19420: PPUSH
19421: LD_VAR 0 10
19425: PPUSH
19426: CALL_OW 74
19430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19431: LD_ADDR_VAR 0 17
19435: PUSH
19436: LD_INT 22
19438: PUSH
19439: LD_VAR 0 4
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: LD_INT 2
19450: PUSH
19451: LD_INT 59
19453: PUSH
19454: EMPTY
19455: LIST
19456: PUSH
19457: LD_INT 21
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 21
19469: PUSH
19470: LD_INT 2
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: PPUSH
19495: LD_VAR 0 10
19499: PPUSH
19500: CALL_OW 74
19504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19505: LD_VAR 0 10
19509: PPUSH
19510: LD_VAR 0 16
19514: PPUSH
19515: CALL_OW 296
19519: PUSH
19520: LD_INT 8
19522: PLUS
19523: PUSH
19524: LD_VAR 0 10
19528: PPUSH
19529: LD_VAR 0 17
19533: PPUSH
19534: CALL_OW 296
19538: LESS
19539: IFFALSE 19557
// begin ComAttackUnit ( i , target1 ) ;
19541: LD_VAR 0 10
19545: PPUSH
19546: LD_VAR 0 16
19550: PPUSH
19551: CALL_OW 115
// end else
19555: GO 19571
// begin ComAttackUnit ( i , target2 ) ;
19557: LD_VAR 0 10
19561: PPUSH
19562: LD_VAR 0 17
19566: PPUSH
19567: CALL_OW 115
// end ; end ;
19571: GO 19396
19573: POP
19574: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19575: LD_INT 22
19577: PUSH
19578: LD_VAR 0 1
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 21
19589: PUSH
19590: LD_INT 2
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 69
19605: PUSH
19606: LD_INT 0
19608: EQUAL
19609: PUSH
19610: LD_INT 22
19612: PUSH
19613: LD_VAR 0 4
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: PPUSH
19625: CALL_OW 69
19629: PUSH
19630: LD_INT 0
19632: EQUAL
19633: OR
19634: IFFALSE 19295
// end ; end ;
19636: LD_VAR 0 9
19640: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19641: LD_INT 0
19643: PPUSH
19644: PPUSH
19645: PPUSH
19646: PPUSH
// r := 100 ;
19647: LD_ADDR_VAR 0 5
19651: PUSH
19652: LD_INT 100
19654: ST_TO_ADDR
// x := 0 ;
19655: LD_ADDR_VAR 0 6
19659: PUSH
19660: LD_INT 0
19662: ST_TO_ADDR
// while ( x < n ) do
19663: LD_VAR 0 6
19667: PUSH
19668: LD_VAR 0 2
19672: LESS
19673: IFFALSE 19960
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19675: LD_ADDR_VAR 0 4
19679: PUSH
19680: DOUBLE
19681: LD_INT 1
19683: DEC
19684: ST_TO_ADDR
19685: LD_VAR 0 1
19689: PPUSH
19690: LD_INT 0
19692: PPUSH
19693: CALL_OW 517
19697: PUSH
19698: LD_INT 1
19700: ARRAY
19701: PUSH
19702: FOR_TO
19703: IFFALSE 19956
// begin if r > 50 then
19705: LD_VAR 0 5
19709: PUSH
19710: LD_INT 50
19712: GREATER
19713: IFFALSE 19932
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19715: LD_VAR 0 1
19719: PPUSH
19720: LD_INT 0
19722: PPUSH
19723: CALL_OW 517
19727: PUSH
19728: LD_INT 1
19730: ARRAY
19731: PUSH
19732: LD_VAR 0 4
19736: ARRAY
19737: PPUSH
19738: LD_VAR 0 1
19742: PPUSH
19743: LD_INT 0
19745: PPUSH
19746: CALL_OW 517
19750: PUSH
19751: LD_INT 2
19753: ARRAY
19754: PUSH
19755: LD_VAR 0 4
19759: ARRAY
19760: PPUSH
19761: CALL_OW 458
19765: NOT
19766: IFFALSE 19916
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19768: LD_VAR 0 1
19772: PPUSH
19773: LD_INT 0
19775: PPUSH
19776: CALL_OW 517
19780: PUSH
19781: LD_INT 1
19783: ARRAY
19784: PUSH
19785: LD_VAR 0 4
19789: ARRAY
19790: PPUSH
19791: LD_VAR 0 1
19795: PPUSH
19796: LD_INT 0
19798: PPUSH
19799: CALL_OW 517
19803: PUSH
19804: LD_INT 2
19806: ARRAY
19807: PUSH
19808: LD_VAR 0 4
19812: ARRAY
19813: PPUSH
19814: LD_INT 5
19816: PPUSH
19817: LD_INT 0
19819: PPUSH
19820: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19824: LD_ADDR_EXP 50
19828: PUSH
19829: LD_EXP 50
19833: PPUSH
19834: LD_INT 1
19836: PPUSH
19837: LD_VAR 0 1
19841: PPUSH
19842: LD_INT 0
19844: PPUSH
19845: CALL_OW 517
19849: PUSH
19850: LD_INT 1
19852: ARRAY
19853: PUSH
19854: LD_VAR 0 4
19858: ARRAY
19859: PUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_INT 0
19867: PPUSH
19868: CALL_OW 517
19872: PUSH
19873: LD_INT 2
19875: ARRAY
19876: PUSH
19877: LD_VAR 0 4
19881: ARRAY
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: PPUSH
19887: CALL_OW 2
19891: ST_TO_ADDR
// r := 0 ;
19892: LD_ADDR_VAR 0 5
19896: PUSH
19897: LD_INT 0
19899: ST_TO_ADDR
// x := x + 1 ;
19900: LD_ADDR_VAR 0 6
19904: PUSH
19905: LD_VAR 0 6
19909: PUSH
19910: LD_INT 1
19912: PLUS
19913: ST_TO_ADDR
// end else
19914: GO 19930
// r := r + 35 ;
19916: LD_ADDR_VAR 0 5
19920: PUSH
19921: LD_VAR 0 5
19925: PUSH
19926: LD_INT 35
19928: PLUS
19929: ST_TO_ADDR
// end else
19930: GO 19954
// r := r + rand ( 10 , 25 ) ;
19932: LD_ADDR_VAR 0 5
19936: PUSH
19937: LD_VAR 0 5
19941: PUSH
19942: LD_INT 10
19944: PPUSH
19945: LD_INT 25
19947: PPUSH
19948: CALL_OW 12
19952: PLUS
19953: ST_TO_ADDR
// end ;
19954: GO 19702
19956: POP
19957: POP
19958: GO 19663
// end ; end_of_file
19960: LD_VAR 0 3
19964: RET
// every 0 0$1 trigger russianAI = 1 do
19965: LD_EXP 39
19969: PUSH
19970: LD_INT 1
19972: EQUAL
19973: IFFALSE 20192
19975: GO 19977
19977: DISABLE
// begin enable ;
19978: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19979: LD_INT 3
19981: PPUSH
19982: LD_EXP 30
19986: PPUSH
19987: CALL 14603 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19991: LD_INT 3
19993: PPUSH
19994: LD_EXP 42
19998: PPUSH
19999: CALL 14963 0 2
// if ruPossition = 1 then
20003: LD_EXP 41
20007: PUSH
20008: LD_INT 1
20010: EQUAL
20011: IFFALSE 20066
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20013: LD_INT 3
20015: PPUSH
20016: LD_INT 13
20018: PPUSH
20019: LD_INT 10
20021: PPUSH
20022: LD_INT 22
20024: PUSH
20025: LD_INT 3
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PUSH
20032: LD_INT 21
20034: PUSH
20035: LD_INT 3
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 30
20044: PUSH
20045: LD_INT 8
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: PPUSH
20062: CALL 15169 0 4
// if ruPossition = 2 then
20066: LD_EXP 41
20070: PUSH
20071: LD_INT 2
20073: EQUAL
20074: IFFALSE 20129
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20076: LD_INT 3
20078: PPUSH
20079: LD_INT 14
20081: PPUSH
20082: LD_INT 11
20084: PPUSH
20085: LD_INT 22
20087: PUSH
20088: LD_INT 3
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PUSH
20095: LD_INT 21
20097: PUSH
20098: LD_INT 3
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PUSH
20105: LD_INT 30
20107: PUSH
20108: LD_INT 8
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: PPUSH
20125: CALL 15169 0 4
// if ruPossition = 3 then
20129: LD_EXP 41
20133: PUSH
20134: LD_INT 3
20136: EQUAL
20137: IFFALSE 20192
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20139: LD_INT 3
20141: PPUSH
20142: LD_INT 15
20144: PPUSH
20145: LD_INT 12
20147: PPUSH
20148: LD_INT 22
20150: PUSH
20151: LD_INT 3
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: LD_INT 21
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 30
20170: PUSH
20171: LD_INT 8
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: PPUSH
20183: CALL_OW 69
20187: PPUSH
20188: CALL 15169 0 4
// end ;
20192: END
// every 0 0$1 do
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// if ruPossition = 1 then
20197: LD_EXP 41
20201: PUSH
20202: LD_INT 1
20204: EQUAL
20205: IFFALSE 20217
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20207: LD_INT 3
20209: PPUSH
20210: LD_INT 10
20212: PPUSH
20213: CALL 14240 0 2
// if ruPossition = 2 then
20217: LD_EXP 41
20221: PUSH
20222: LD_INT 2
20224: EQUAL
20225: IFFALSE 20237
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20227: LD_INT 3
20229: PPUSH
20230: LD_INT 11
20232: PPUSH
20233: CALL 14240 0 2
// if ruPossition = 3 then
20237: LD_EXP 41
20241: PUSH
20242: LD_INT 3
20244: EQUAL
20245: IFFALSE 20257
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20247: LD_INT 3
20249: PPUSH
20250: LD_INT 12
20252: PPUSH
20253: CALL 14240 0 2
// IntBazooka ( 3 , 1 ) ;
20257: LD_INT 3
20259: PPUSH
20260: LD_INT 1
20262: PPUSH
20263: CALL 13039 0 2
// IntBazooka ( 6 , 1 ) ;
20267: LD_INT 6
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL 13039 0 2
// end ;
20277: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20278: LD_EXP 39
20282: PUSH
20283: LD_INT 1
20285: EQUAL
20286: PUSH
20287: LD_EXP 35
20291: PPUSH
20292: CALL_OW 302
20296: AND
20297: PUSH
20298: LD_EXP 35
20302: PPUSH
20303: CALL_OW 255
20307: PUSH
20308: LD_INT 3
20310: EQUAL
20311: AND
20312: PUSH
20313: LD_INT 22
20315: PUSH
20316: LD_INT 3
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 21
20325: PUSH
20326: LD_INT 2
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 33
20335: PUSH
20336: LD_INT 3
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: PPUSH
20348: CALL_OW 69
20352: PUSH
20353: LD_INT 0
20355: EQUAL
20356: AND
20357: IFFALSE 20565
20359: GO 20361
20361: DISABLE
// begin enable ;
20362: ENABLE
// if Difficulty = 1 then
20363: LD_OWVAR 67
20367: PUSH
20368: LD_INT 1
20370: EQUAL
20371: IFFALSE 20433
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20373: LD_INT 3
20375: PPUSH
20376: LD_EXP 35
20380: PPUSH
20381: LD_INT 5
20383: PPUSH
20384: LD_INT 8
20386: PPUSH
20387: CALL_OW 12
20391: PPUSH
20392: LD_INT 1
20394: PPUSH
20395: LD_INT 43
20397: PUSH
20398: LD_INT 44
20400: PUSH
20401: LD_INT 45
20403: PUSH
20404: LD_INT 46
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: PPUSH
20413: LD_INT 1
20415: PPUSH
20416: LD_INT 1
20418: PUSH
20419: LD_INT 3
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PPUSH
20426: LD_INT 22
20428: PPUSH
20429: CALL 18999 0 8
// if Difficulty = 2 then
20433: LD_OWVAR 67
20437: PUSH
20438: LD_INT 2
20440: EQUAL
20441: IFFALSE 20499
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20443: LD_INT 3
20445: PPUSH
20446: LD_EXP 35
20450: PPUSH
20451: LD_INT 6
20453: PPUSH
20454: LD_INT 8
20456: PPUSH
20457: CALL_OW 12
20461: PPUSH
20462: LD_INT 1
20464: PPUSH
20465: LD_INT 44
20467: PUSH
20468: LD_INT 45
20470: PUSH
20471: LD_INT 46
20473: PUSH
20474: EMPTY
20475: LIST
20476: LIST
20477: LIST
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: LD_INT 1
20484: PUSH
20485: LD_INT 3
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PPUSH
20492: LD_INT 22
20494: PPUSH
20495: CALL 18999 0 8
// if Difficulty = 3 then
20499: LD_OWVAR 67
20503: PUSH
20504: LD_INT 3
20506: EQUAL
20507: IFFALSE 20565
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20509: LD_INT 3
20511: PPUSH
20512: LD_EXP 35
20516: PPUSH
20517: LD_INT 7
20519: PPUSH
20520: LD_INT 8
20522: PPUSH
20523: CALL_OW 12
20527: PPUSH
20528: LD_INT 1
20530: PPUSH
20531: LD_INT 44
20533: PUSH
20534: LD_INT 45
20536: PUSH
20537: LD_INT 46
20539: PUSH
20540: EMPTY
20541: LIST
20542: LIST
20543: LIST
20544: PPUSH
20545: LD_INT 1
20547: PPUSH
20548: LD_INT 1
20550: PUSH
20551: LD_INT 3
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PPUSH
20558: LD_INT 22
20560: PPUSH
20561: CALL 18999 0 8
// end ;
20565: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20566: LD_EXP 50
20570: PUSH
20571: LD_EXP 49
20575: AND
20576: IFFALSE 20697
20578: GO 20580
20580: DISABLE
20581: LD_INT 0
20583: PPUSH
// begin enable ;
20584: ENABLE
// for i in arabianMines do
20585: LD_ADDR_VAR 0 1
20589: PUSH
20590: LD_EXP 50
20594: PUSH
20595: FOR_IN
20596: IFFALSE 20695
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20598: LD_INT 22
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 92
20610: PUSH
20611: LD_VAR 0 1
20615: PUSH
20616: LD_INT 1
20618: ARRAY
20619: PUSH
20620: LD_VAR 0 1
20624: PUSH
20625: LD_INT 2
20627: ARRAY
20628: PUSH
20629: LD_INT 3
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PPUSH
20642: CALL_OW 69
20646: IFFALSE 20693
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20648: LD_VAR 0 1
20652: PUSH
20653: LD_INT 1
20655: ARRAY
20656: PPUSH
20657: LD_VAR 0 1
20661: PUSH
20662: LD_INT 2
20664: ARRAY
20665: PPUSH
20666: LD_INT 5
20668: PPUSH
20669: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20673: LD_ADDR_EXP 50
20677: PUSH
20678: LD_EXP 50
20682: PPUSH
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 3
20692: ST_TO_ADDR
// end ; end ;
20693: GO 20595
20695: POP
20696: POP
// end ; end_of_file
20697: PPOPN 1
20699: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20700: LD_VAR 0 1
20704: PPUSH
20705: CALL_OW 255
20709: PUSH
20710: LD_INT 4
20712: EQUAL
20713: IFFALSE 20727
// SetBName ( building , epsilon ) ;
20715: LD_VAR 0 1
20719: PPUSH
20720: LD_STRING epsilon
20722: PPUSH
20723: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20727: LD_VAR 0 1
20731: PPUSH
20732: CALL_OW 255
20736: PUSH
20737: LD_INT 1
20739: EQUAL
20740: PUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: CALL_OW 266
20750: PUSH
20751: LD_INT 0
20753: EQUAL
20754: AND
20755: IFFALSE 20769
// SetBName ( building , epsilon ) ;
20757: LD_VAR 0 1
20761: PPUSH
20762: LD_STRING epsilon
20764: PPUSH
20765: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 255
20778: PUSH
20779: LD_INT 3
20781: EQUAL
20782: PUSH
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 266
20792: PUSH
20793: LD_INT 0
20795: EQUAL
20796: AND
20797: IFFALSE 20811
// SetBName ( building , chuikov ) ;
20799: LD_VAR 0 1
20803: PPUSH
20804: LD_STRING chuikov
20806: PPUSH
20807: CALL_OW 500
// if GetSide ( building ) = 2 then
20811: LD_VAR 0 1
20815: PPUSH
20816: CALL_OW 255
20820: PUSH
20821: LD_INT 2
20823: EQUAL
20824: IFFALSE 20880
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20826: LD_VAR 0 1
20830: PPUSH
20831: CALL_OW 266
20835: PUSH
20836: LD_INT 6
20838: EQUAL
20839: PUSH
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 266
20849: PUSH
20850: LD_INT 9
20852: EQUAL
20853: OR
20854: IFFALSE 20880
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20856: LD_VAR 0 1
20860: PPUSH
20861: LD_INT 10
20863: PPUSH
20864: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20868: LD_VAR 0 1
20872: PPUSH
20873: LD_INT 11
20875: PPUSH
20876: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20880: LD_VAR 0 1
20884: PPUSH
20885: CALL_OW 255
20889: PUSH
20890: LD_INT 3
20892: EQUAL
20893: IFFALSE 20919
// begin if GetBType ( building ) = 2 then
20895: LD_VAR 0 1
20899: PPUSH
20900: CALL_OW 266
20904: PUSH
20905: LD_INT 2
20907: EQUAL
20908: IFFALSE 20919
// AddComUpgrade ( building ) ;
20910: LD_VAR 0 1
20914: PPUSH
20915: CALL_OW 206
// end ; end ;
20919: PPOPN 2
20921: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20922: LD_INT 0
20924: PPUSH
20925: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20926: LD_VAR 0 1
20930: PUSH
20931: LD_INT 22
20933: PUSH
20934: LD_INT 3
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 23
20943: PUSH
20944: LD_INT 3
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 21
20953: PUSH
20954: LD_INT 2
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: LIST
20965: PPUSH
20966: CALL_OW 69
20970: IN
20971: PUSH
20972: LD_EXP 58
20976: NOT
20977: AND
20978: IFFALSE 21009
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20980: LD_ADDR_EXP 58
20984: PUSH
20985: LD_VAR 0 1
20989: PPUSH
20990: CALL_OW 250
20994: PUSH
20995: LD_VAR 0 1
20999: PPUSH
21000: CALL_OW 251
21004: PUSH
21005: EMPTY
21006: LIST
21007: LIST
21008: ST_TO_ADDR
// end ;
21009: PPOPN 3
21011: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21012: LD_VAR 0 2
21016: PPUSH
21017: CALL_OW 255
21021: PUSH
21022: LD_INT 3
21024: EQUAL
21025: PUSH
21026: LD_EXP 35
21030: PPUSH
21031: CALL_OW 255
21035: PUSH
21036: LD_INT 3
21038: EQUAL
21039: AND
21040: PUSH
21041: LD_EXP 35
21045: PPUSH
21046: CALL_OW 302
21050: AND
21051: IFFALSE 21067
// ComEnterUnit ( human , ruFab ) ;
21053: LD_VAR 0 2
21057: PPUSH
21058: LD_EXP 35
21062: PPUSH
21063: CALL_OW 120
// end ;
21067: PPOPN 2
21069: END
// on BuildingComplete ( building ) do var i ;
21070: LD_INT 0
21072: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21073: LD_VAR 0 1
21077: PPUSH
21078: CALL_OW 255
21082: PUSH
21083: LD_INT 1
21085: EQUAL
21086: PUSH
21087: LD_EXP 61
21091: PUSH
21092: LD_INT 0
21094: EQUAL
21095: AND
21096: IFFALSE 21298
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21098: LD_VAR 0 1
21102: PPUSH
21103: CALL_OW 266
21107: PUSH
21108: LD_INT 26
21110: EQUAL
21111: PUSH
21112: LD_VAR 0 1
21116: PPUSH
21117: CALL_OW 266
21121: PUSH
21122: LD_INT 27
21124: EQUAL
21125: OR
21126: PUSH
21127: LD_VAR 0 1
21131: PPUSH
21132: CALL_OW 266
21136: PUSH
21137: LD_INT 28
21139: EQUAL
21140: OR
21141: IFFALSE 21298
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21143: LD_INT 22
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 2
21155: PUSH
21156: LD_INT 30
21158: PUSH
21159: LD_INT 7
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PUSH
21166: LD_INT 30
21168: PUSH
21169: LD_INT 8
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PPUSH
21185: CALL_OW 69
21189: PUSH
21190: LD_INT 0
21192: GREATER
21193: IFFALSE 21298
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21195: LD_ADDR_VAR 0 2
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_INT 1
21205: PUSH
21206: EMPTY
21207: LIST
21208: LIST
21209: PUSH
21210: LD_INT 2
21212: PUSH
21213: LD_INT 30
21215: PUSH
21216: LD_INT 7
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 30
21225: PUSH
21226: LD_INT 8
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: LIST
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PPUSH
21242: CALL_OW 69
21246: PUSH
21247: FOR_IN
21248: IFFALSE 21296
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21250: LD_VAR 0 2
21254: PPUSH
21255: LD_INT 1
21257: PPUSH
21258: CALL_OW 268
21262: PUSH
21263: LD_INT 11
21265: EQUAL
21266: PUSH
21267: LD_VAR 0 2
21271: PPUSH
21272: LD_INT 2
21274: PPUSH
21275: CALL_OW 268
21279: PUSH
21280: LD_INT 11
21282: EQUAL
21283: OR
21284: IFFALSE 21294
// eventVar1 = 1 ;
21286: LD_ADDR_EXP 61
21290: PUSH
21291: LD_INT 1
21293: ST_TO_ADDR
21294: GO 21247
21296: POP
21297: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21298: LD_VAR 0 1
21302: PPUSH
21303: CALL_OW 255
21307: PUSH
21308: LD_INT 3
21310: EQUAL
21311: IFFALSE 21791
// begin if GetBType ( building ) = b_depot then
21313: LD_VAR 0 1
21317: PPUSH
21318: CALL_OW 266
21322: PUSH
21323: LD_INT 0
21325: EQUAL
21326: IFFALSE 21398
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21328: LD_VAR 0 1
21332: PPUSH
21333: CALL_OW 274
21337: PPUSH
21338: LD_INT 1
21340: PPUSH
21341: LD_INT 5000
21343: PPUSH
21344: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21348: LD_VAR 0 1
21352: PPUSH
21353: CALL_OW 274
21357: PPUSH
21358: LD_INT 2
21360: PPUSH
21361: LD_INT 5000
21363: PPUSH
21364: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: CALL_OW 274
21377: PPUSH
21378: LD_INT 3
21380: PPUSH
21381: LD_INT 5000
21383: PPUSH
21384: CALL_OW 277
// ruDepot = building ;
21388: LD_ADDR_EXP 30
21392: PUSH
21393: LD_VAR 0 1
21397: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21398: LD_VAR 0 1
21402: PPUSH
21403: CALL_OW 266
21407: PUSH
21408: LD_INT 0
21410: EQUAL
21411: PUSH
21412: LD_VAR 0 1
21416: PPUSH
21417: CALL_OW 266
21421: PUSH
21422: LD_INT 2
21424: EQUAL
21425: OR
21426: PUSH
21427: LD_VAR 0 1
21431: PPUSH
21432: CALL_OW 266
21436: PUSH
21437: LD_INT 4
21439: EQUAL
21440: OR
21441: IFFALSE 21452
// ComUpgrade ( building ) ;
21443: LD_VAR 0 1
21447: PPUSH
21448: CALL_OW 146
// if GetBType ( building ) = b_lab then
21452: LD_VAR 0 1
21456: PPUSH
21457: CALL_OW 266
21461: PUSH
21462: LD_INT 6
21464: EQUAL
21465: IFFALSE 21668
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21467: LD_INT 22
21469: PUSH
21470: LD_INT 3
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: PUSH
21477: LD_INT 30
21479: PUSH
21480: LD_INT 8
21482: PUSH
21483: EMPTY
21484: LIST
21485: LIST
21486: PUSH
21487: EMPTY
21488: LIST
21489: LIST
21490: PPUSH
21491: CALL_OW 69
21495: PUSH
21496: LD_INT 0
21498: EQUAL
21499: IFFALSE 21537
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21501: LD_VAR 0 1
21505: PPUSH
21506: LD_INT 10
21508: PPUSH
21509: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21513: LD_VAR 0 1
21517: PPUSH
21518: LD_INT 12
21520: PPUSH
21521: CALL_OW 207
// ruLab1 = building ;
21525: LD_ADDR_EXP 31
21529: PUSH
21530: LD_VAR 0 1
21534: ST_TO_ADDR
// end else
21535: GO 21571
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21537: LD_VAR 0 1
21541: PPUSH
21542: LD_INT 11
21544: PPUSH
21545: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21549: LD_VAR 0 1
21553: PPUSH
21554: LD_INT 14
21556: PPUSH
21557: CALL_OW 207
// ruLab2 = building ;
21561: LD_ADDR_EXP 32
21565: PUSH
21566: LD_VAR 0 1
21570: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21571: LD_INT 3
21573: PPUSH
21574: LD_VAR 0 1
21578: PPUSH
21579: LD_INT 3
21581: PPUSH
21582: CALL 14155 0 3
// if ruDestroyedBuildings > 0 then
21586: LD_EXP 42
21590: PUSH
21591: LD_INT 0
21593: GREATER
21594: IFFALSE 21668
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21596: LD_ADDR_EXP 42
21600: PUSH
21601: LD_EXP 42
21605: PPUSH
21606: LD_INT 1
21608: PPUSH
21609: CALL_OW 3
21613: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21614: LD_ADDR_EXP 42
21618: PUSH
21619: LD_EXP 42
21623: PPUSH
21624: LD_INT 1
21626: PPUSH
21627: CALL_OW 3
21631: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21632: LD_ADDR_EXP 42
21636: PUSH
21637: LD_EXP 42
21641: PPUSH
21642: LD_INT 1
21644: PPUSH
21645: CALL_OW 3
21649: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21650: LD_ADDR_EXP 42
21654: PUSH
21655: LD_EXP 42
21659: PPUSH
21660: LD_INT 1
21662: PPUSH
21663: CALL_OW 3
21667: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21668: LD_VAR 0 1
21672: PPUSH
21673: CALL_OW 266
21677: PUSH
21678: LD_INT 32
21680: EQUAL
21681: IFFALSE 21718
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21683: LD_VAR 0 1
21687: PPUSH
21688: LD_INT 44
21690: PUSH
21691: LD_INT 45
21693: PUSH
21694: LD_INT 46
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: LIST
21701: PUSH
21702: LD_INT 1
21704: PPUSH
21705: LD_INT 3
21707: PPUSH
21708: CALL_OW 12
21712: ARRAY
21713: PPUSH
21714: CALL_OW 208
// if GetBType ( building ) = b_turret then
21718: LD_VAR 0 1
21722: PPUSH
21723: CALL_OW 266
21727: PUSH
21728: LD_INT 33
21730: EQUAL
21731: IFFALSE 21768
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21733: LD_VAR 0 1
21737: PPUSH
21738: LD_INT 44
21740: PUSH
21741: LD_INT 45
21743: PUSH
21744: LD_INT 46
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 1
21754: PPUSH
21755: LD_INT 3
21757: PPUSH
21758: CALL_OW 12
21762: ARRAY
21763: PPUSH
21764: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21768: LD_VAR 0 1
21772: PPUSH
21773: CALL_OW 266
21777: PUSH
21778: LD_INT 24
21780: EQUAL
21781: IFFALSE 21791
// russianAI = 1 ;
21783: LD_ADDR_EXP 39
21787: PUSH
21788: LD_INT 1
21790: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21791: LD_VAR 0 1
21795: PPUSH
21796: CALL_OW 255
21800: PUSH
21801: LD_INT 2
21803: EQUAL
21804: IFFALSE 22530
// begin if GetBType ( building ) = b_depot then
21806: LD_VAR 0 1
21810: PPUSH
21811: CALL_OW 266
21815: PUSH
21816: LD_INT 0
21818: EQUAL
21819: IFFALSE 21905
// begin arDepot = building ;
21821: LD_ADDR_EXP 43
21825: PUSH
21826: LD_VAR 0 1
21830: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21831: LD_INT 38
21833: PUSH
21834: LD_INT 47
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: PPUSH
21841: LD_INT 71
21843: PPUSH
21844: LD_INT 19
21846: PPUSH
21847: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21851: LD_VAR 0 1
21855: PPUSH
21856: CALL_OW 274
21860: PPUSH
21861: LD_INT 1
21863: PPUSH
21864: LD_INT 500
21866: PPUSH
21867: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 274
21880: PPUSH
21881: LD_INT 3
21883: PPUSH
21884: LD_INT 30
21886: PPUSH
21887: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21891: LD_EXP 26
21895: PPUSH
21896: LD_EXP 43
21900: PPUSH
21901: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21905: LD_VAR 0 1
21909: PPUSH
21910: CALL_OW 266
21914: PUSH
21915: LD_INT 6
21917: EQUAL
21918: PUSH
21919: LD_VAR 0 1
21923: PPUSH
21924: CALL_OW 266
21928: PUSH
21929: LD_INT 9
21931: EQUAL
21932: OR
21933: IFFALSE 21984
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21935: LD_VAR 0 1
21939: PPUSH
21940: LD_INT 10
21942: PPUSH
21943: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21947: LD_VAR 0 1
21951: PPUSH
21952: LD_INT 11
21954: PPUSH
21955: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21959: LD_INT 2
21961: PPUSH
21962: LD_VAR 0 1
21966: PPUSH
21967: LD_INT 2
21969: PPUSH
21970: CALL 14155 0 3
// arLab = building ;
21974: LD_ADDR_EXP 44
21978: PUSH
21979: LD_VAR 0 1
21983: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21984: LD_VAR 0 1
21988: PPUSH
21989: CALL_OW 266
21993: PUSH
21994: LD_INT 2
21996: EQUAL
21997: PUSH
21998: LD_VAR 0 1
22002: PPUSH
22003: CALL_OW 266
22007: PUSH
22008: LD_INT 4
22010: EQUAL
22011: OR
22012: IFFALSE 22023
// ComUpgrade ( building ) ;
22014: LD_VAR 0 1
22018: PPUSH
22019: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
22023: LD_VAR 0 1
22027: PPUSH
22028: CALL_OW 266
22032: PUSH
22033: LD_INT 27
22035: EQUAL
22036: IFFALSE 22530
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22038: LD_INT 22
22040: PUSH
22041: LD_INT 2
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: LD_INT 30
22050: PUSH
22051: LD_INT 27
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: PUSH
22058: EMPTY
22059: LIST
22060: LIST
22061: PPUSH
22062: CALL_OW 69
22066: PUSH
22067: LD_INT 2
22069: EQUAL
22070: IFFALSE 22530
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22072: LD_ADDR_VAR 0 2
22076: PUSH
22077: LD_INT 22
22079: PUSH
22080: LD_INT 2
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 21
22089: PUSH
22090: LD_INT 1
22092: PUSH
22093: EMPTY
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 25
22099: PUSH
22100: LD_INT 2
22102: PUSH
22103: EMPTY
22104: LIST
22105: LIST
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: LIST
22111: PPUSH
22112: CALL_OW 69
22116: PUSH
22117: LD_INT 1
22119: ARRAY
22120: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22121: LD_VAR 0 2
22125: PPUSH
22126: LD_INT 92
22128: PPUSH
22129: LD_INT 34
22131: PPUSH
22132: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 82
22143: PPUSH
22144: LD_INT 57
22146: PPUSH
22147: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_INT 36
22158: PPUSH
22159: LD_INT 28
22161: PPUSH
22162: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22166: LD_INT 22
22168: PUSH
22169: LD_INT 2
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 21
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 25
22188: PUSH
22189: LD_INT 2
22191: PUSH
22192: EMPTY
22193: LIST
22194: LIST
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: PPUSH
22201: CALL_OW 69
22205: PPUSH
22206: LD_EXP 43
22210: PPUSH
22211: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22215: LD_INT 22
22217: PUSH
22218: LD_INT 2
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PUSH
22225: LD_INT 25
22227: PUSH
22228: LD_INT 1
22230: PUSH
22231: EMPTY
22232: LIST
22233: LIST
22234: PUSH
22235: LD_INT 3
22237: PUSH
22238: LD_INT 54
22240: PUSH
22241: EMPTY
22242: LIST
22243: PUSH
22244: LD_INT 3
22246: PUSH
22247: LD_INT 60
22249: PUSH
22250: EMPTY
22251: LIST
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: EMPTY
22258: LIST
22259: LIST
22260: LIST
22261: PUSH
22262: EMPTY
22263: LIST
22264: LIST
22265: LIST
22266: PPUSH
22267: CALL_OW 69
22271: PUSH
22272: LD_INT 1
22274: ARRAY
22275: PPUSH
22276: LD_INT 22
22278: PUSH
22279: LD_INT 2
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 30
22288: PUSH
22289: LD_INT 31
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: LD_INT 58
22298: PUSH
22299: EMPTY
22300: LIST
22301: PUSH
22302: EMPTY
22303: LIST
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: PUSH
22312: LD_INT 1
22314: ARRAY
22315: PPUSH
22316: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22320: LD_INT 22
22322: PUSH
22323: LD_INT 2
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: LD_INT 25
22332: PUSH
22333: LD_INT 1
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: LD_INT 3
22342: PUSH
22343: LD_INT 54
22345: PUSH
22346: EMPTY
22347: LIST
22348: PUSH
22349: LD_INT 3
22351: PUSH
22352: LD_INT 60
22354: PUSH
22355: EMPTY
22356: LIST
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: EMPTY
22363: LIST
22364: LIST
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: PPUSH
22372: CALL_OW 69
22376: PUSH
22377: LD_INT 2
22379: ARRAY
22380: PPUSH
22381: LD_INT 22
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 30
22393: PUSH
22394: LD_INT 31
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 58
22403: PUSH
22404: EMPTY
22405: LIST
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: LIST
22411: PPUSH
22412: CALL_OW 69
22416: PUSH
22417: LD_INT 2
22419: ARRAY
22420: PPUSH
22421: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22425: LD_INT 22
22427: PUSH
22428: LD_INT 2
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PUSH
22435: LD_INT 25
22437: PUSH
22438: LD_INT 1
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 3
22447: PUSH
22448: LD_INT 54
22450: PUSH
22451: EMPTY
22452: LIST
22453: PUSH
22454: LD_INT 3
22456: PUSH
22457: LD_INT 60
22459: PUSH
22460: EMPTY
22461: LIST
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: PUSH
22482: LD_INT 3
22484: ARRAY
22485: PPUSH
22486: LD_INT 22
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: LD_INT 30
22498: PUSH
22499: LD_INT 31
22501: PUSH
22502: EMPTY
22503: LIST
22504: LIST
22505: PUSH
22506: LD_INT 58
22508: PUSH
22509: EMPTY
22510: LIST
22511: PUSH
22512: EMPTY
22513: LIST
22514: LIST
22515: LIST
22516: PPUSH
22517: CALL_OW 69
22521: PUSH
22522: LD_INT 3
22524: ARRAY
22525: PPUSH
22526: CALL_OW 120
// end ; end ; end ;
22530: PPOPN 2
22532: END
// on UpgradeComplete ( building ) do var i ;
22533: LD_INT 0
22535: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22536: LD_VAR 0 1
22540: PPUSH
22541: CALL_OW 255
22545: PUSH
22546: LD_INT 1
22548: EQUAL
22549: PUSH
22550: LD_EXP 61
22554: PUSH
22555: LD_INT 0
22557: EQUAL
22558: AND
22559: IFFALSE 22757
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22561: LD_VAR 0 1
22565: PPUSH
22566: CALL_OW 266
22570: PUSH
22571: LD_INT 7
22573: EQUAL
22574: PUSH
22575: LD_VAR 0 1
22579: PPUSH
22580: CALL_OW 266
22584: PUSH
22585: LD_INT 8
22587: EQUAL
22588: OR
22589: IFFALSE 22757
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22591: LD_INT 22
22593: PUSH
22594: LD_INT 1
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PUSH
22601: LD_INT 2
22603: PUSH
22604: LD_INT 30
22606: PUSH
22607: LD_INT 26
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PUSH
22614: LD_INT 30
22616: PUSH
22617: LD_INT 27
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PUSH
22624: LD_INT 30
22626: PUSH
22627: LD_INT 28
22629: PUSH
22630: EMPTY
22631: LIST
22632: LIST
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PPUSH
22644: CALL_OW 69
22648: PUSH
22649: LD_INT 0
22651: GREATER
22652: IFFALSE 22757
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_INT 22
22661: PUSH
22662: LD_INT 1
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: LD_INT 2
22671: PUSH
22672: LD_INT 30
22674: PUSH
22675: LD_INT 7
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 30
22684: PUSH
22685: LD_INT 8
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: PUSH
22697: EMPTY
22698: LIST
22699: LIST
22700: PPUSH
22701: CALL_OW 69
22705: PUSH
22706: FOR_IN
22707: IFFALSE 22755
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22709: LD_VAR 0 2
22713: PPUSH
22714: LD_INT 1
22716: PPUSH
22717: CALL_OW 268
22721: PUSH
22722: LD_INT 11
22724: EQUAL
22725: PUSH
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_INT 2
22733: PPUSH
22734: CALL_OW 268
22738: PUSH
22739: LD_INT 11
22741: EQUAL
22742: OR
22743: IFFALSE 22753
// eventVar1 = 1 ;
22745: LD_ADDR_EXP 61
22749: PUSH
22750: LD_INT 1
22752: ST_TO_ADDR
22753: GO 22706
22755: POP
22756: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22757: LD_VAR 0 1
22761: PPUSH
22762: CALL_OW 255
22766: PUSH
22767: LD_INT 2
22769: EQUAL
22770: IFFALSE 22875
// begin if GetBType ( building ) = b_barracks then
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 266
22781: PUSH
22782: LD_INT 5
22784: EQUAL
22785: IFFALSE 22875
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22787: LD_ADDR_VAR 0 2
22791: PUSH
22792: LD_INT 22
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 25
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: LD_INT 3
22814: PUSH
22815: LD_INT 54
22817: PUSH
22818: EMPTY
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PUSH
22825: EMPTY
22826: LIST
22827: LIST
22828: LIST
22829: PPUSH
22830: CALL_OW 69
22834: PUSH
22835: LD_EXP 26
22839: PUSH
22840: EMPTY
22841: LIST
22842: DIFF
22843: PUSH
22844: FOR_IN
22845: IFFALSE 22863
// ComEnterUnit ( i , building ) ;
22847: LD_VAR 0 2
22851: PPUSH
22852: LD_VAR 0 1
22856: PPUSH
22857: CALL_OW 120
22861: GO 22844
22863: POP
22864: POP
// arArm = building ;
22865: LD_ADDR_EXP 45
22869: PUSH
22870: LD_VAR 0 1
22874: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 255
22884: PUSH
22885: LD_INT 3
22887: EQUAL
22888: IFFALSE 23361
// begin if GetBType ( building ) = b_factory then
22890: LD_VAR 0 1
22894: PPUSH
22895: CALL_OW 266
22899: PUSH
22900: LD_INT 3
22902: EQUAL
22903: IFFALSE 22970
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22905: LD_ADDR_VAR 0 2
22909: PUSH
22910: LD_INT 22
22912: PUSH
22913: LD_INT 3
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 3
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PPUSH
22934: CALL_OW 69
22938: PUSH
22939: FOR_IN
22940: IFFALSE 22958
// ComEnterUnit ( i , building ) ;
22942: LD_VAR 0 2
22946: PPUSH
22947: LD_VAR 0 1
22951: PPUSH
22952: CALL_OW 120
22956: GO 22939
22958: POP
22959: POP
// ruFab = building ;
22960: LD_ADDR_EXP 35
22964: PUSH
22965: LD_VAR 0 1
22969: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22970: LD_INT 22
22972: PUSH
22973: LD_INT 3
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: LD_INT 21
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 30
22992: PUSH
22993: LD_INT 8
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: LIST
23004: PPUSH
23005: CALL_OW 69
23009: PUSH
23010: LD_INT 2
23012: EQUAL
23013: IFFALSE 23221
// begin for i = 1 to 2 do
23015: LD_ADDR_VAR 0 2
23019: PUSH
23020: DOUBLE
23021: LD_INT 1
23023: DEC
23024: ST_TO_ADDR
23025: LD_INT 2
23027: PUSH
23028: FOR_TO
23029: IFFALSE 23116
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23031: LD_INT 22
23033: PUSH
23034: LD_INT 3
23036: PUSH
23037: EMPTY
23038: LIST
23039: LIST
23040: PUSH
23041: LD_INT 25
23043: PUSH
23044: LD_INT 4
23046: PUSH
23047: EMPTY
23048: LIST
23049: LIST
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PPUSH
23055: CALL_OW 69
23059: PUSH
23060: LD_VAR 0 2
23064: ARRAY
23065: PPUSH
23066: LD_INT 22
23068: PUSH
23069: LD_INT 3
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: PUSH
23076: LD_INT 21
23078: PUSH
23079: LD_INT 3
23081: PUSH
23082: EMPTY
23083: LIST
23084: LIST
23085: PUSH
23086: LD_INT 30
23088: PUSH
23089: LD_INT 8
23091: PUSH
23092: EMPTY
23093: LIST
23094: LIST
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: PUSH
23106: LD_INT 1
23108: ARRAY
23109: PPUSH
23110: CALL_OW 120
23114: GO 23028
23116: POP
23117: POP
// for i = 3 to 4 do
23118: LD_ADDR_VAR 0 2
23122: PUSH
23123: DOUBLE
23124: LD_INT 3
23126: DEC
23127: ST_TO_ADDR
23128: LD_INT 4
23130: PUSH
23131: FOR_TO
23132: IFFALSE 23219
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23134: LD_INT 22
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: LD_INT 25
23146: PUSH
23147: LD_INT 4
23149: PUSH
23150: EMPTY
23151: LIST
23152: LIST
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PPUSH
23158: CALL_OW 69
23162: PUSH
23163: LD_VAR 0 2
23167: ARRAY
23168: PPUSH
23169: LD_INT 22
23171: PUSH
23172: LD_INT 3
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 21
23181: PUSH
23182: LD_INT 3
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 30
23191: PUSH
23192: LD_INT 8
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: LIST
23203: PPUSH
23204: CALL_OW 69
23208: PUSH
23209: LD_INT 2
23211: ARRAY
23212: PPUSH
23213: CALL_OW 120
23217: GO 23131
23219: POP
23220: POP
// end ; if GetBType ( building ) = b_barracks then
23221: LD_VAR 0 1
23225: PPUSH
23226: CALL_OW 266
23230: PUSH
23231: LD_INT 5
23233: EQUAL
23234: IFFALSE 23361
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23236: LD_ADDR_VAR 0 2
23240: PUSH
23241: LD_INT 22
23243: PUSH
23244: LD_INT 3
23246: PUSH
23247: EMPTY
23248: LIST
23249: LIST
23250: PUSH
23251: LD_INT 25
23253: PUSH
23254: LD_INT 1
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 3
23263: PUSH
23264: LD_INT 54
23266: PUSH
23267: EMPTY
23268: LIST
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: LIST
23278: PPUSH
23279: CALL_OW 69
23283: PUSH
23284: FOR_IN
23285: IFFALSE 23303
// ComEnterUnit ( i , building ) ;
23287: LD_VAR 0 2
23291: PPUSH
23292: LD_VAR 0 1
23296: PPUSH
23297: CALL_OW 120
23301: GO 23284
23303: POP
23304: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23305: LD_INT 22
23307: PUSH
23308: LD_INT 3
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: LD_INT 30
23317: PUSH
23318: LD_INT 5
23320: PUSH
23321: EMPTY
23322: LIST
23323: LIST
23324: PUSH
23325: EMPTY
23326: LIST
23327: LIST
23328: PPUSH
23329: CALL_OW 69
23333: PUSH
23334: LD_INT 0
23336: EQUAL
23337: IFFALSE 23351
// ruArm1 = building else
23339: LD_ADDR_EXP 33
23343: PUSH
23344: LD_VAR 0 1
23348: ST_TO_ADDR
23349: GO 23361
// ruArm2 = building ;
23351: LD_ADDR_EXP 34
23355: PUSH
23356: LD_VAR 0 1
23360: ST_TO_ADDR
// end ; end ; end ;
23361: PPOPN 2
23363: END
// on EnterBuilding ( building , human ) do var rnd ;
23364: LD_INT 0
23366: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23367: LD_VAR 0 2
23371: PPUSH
23372: CALL_OW 255
23376: PUSH
23377: LD_INT 2
23379: EQUAL
23380: PUSH
23381: LD_VAR 0 2
23385: PPUSH
23386: CALL_OW 257
23390: PUSH
23391: LD_INT 1
23393: EQUAL
23394: AND
23395: PUSH
23396: LD_VAR 0 1
23400: PUSH
23401: LD_EXP 45
23405: EQUAL
23406: AND
23407: IFFALSE 23454
// begin wait ( 0 0$1 ) ;
23409: LD_INT 35
23411: PPUSH
23412: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23416: LD_ADDR_VAR 0 3
23420: PUSH
23421: LD_INT 1
23423: PPUSH
23424: LD_INT 100
23426: PPUSH
23427: CALL_OW 12
23431: ST_TO_ADDR
// if rnd > 50 then
23432: LD_VAR 0 3
23436: PUSH
23437: LD_INT 50
23439: GREATER
23440: IFFALSE 23454
// SetClass ( human , class_mortar ) ;
23442: LD_VAR 0 2
23446: PPUSH
23447: LD_INT 8
23449: PPUSH
23450: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23454: LD_VAR 0 2
23458: PPUSH
23459: CALL_OW 255
23463: PUSH
23464: LD_INT 3
23466: EQUAL
23467: PUSH
23468: LD_VAR 0 2
23472: PPUSH
23473: CALL_OW 257
23477: PUSH
23478: LD_INT 1
23480: EQUAL
23481: AND
23482: PUSH
23483: LD_VAR 0 1
23487: PUSH
23488: LD_EXP 33
23492: EQUAL
23493: PUSH
23494: LD_VAR 0 1
23498: PUSH
23499: LD_EXP 34
23503: EQUAL
23504: OR
23505: PUSH
23506: EMPTY
23507: LIST
23508: AND
23509: IFFALSE 23530
// begin wait ( 0 0$1 ) ;
23511: LD_INT 35
23513: PPUSH
23514: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23518: LD_VAR 0 2
23522: PPUSH
23523: LD_INT 9
23525: PPUSH
23526: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23530: LD_VAR 0 2
23534: PPUSH
23535: CALL_OW 255
23539: PUSH
23540: LD_INT 3
23542: EQUAL
23543: PUSH
23544: LD_VAR 0 2
23548: PPUSH
23549: CALL_OW 257
23553: PUSH
23554: LD_INT 9
23556: EQUAL
23557: AND
23558: PUSH
23559: LD_VAR 0 1
23563: PPUSH
23564: CALL_OW 266
23568: PUSH
23569: LD_INT 32
23571: EQUAL
23572: AND
23573: IFFALSE 23594
// begin wait ( 0 0$1 ) ;
23575: LD_INT 35
23577: PPUSH
23578: CALL_OW 67
// SetClass ( human , 1 ) ;
23582: LD_VAR 0 2
23586: PPUSH
23587: LD_INT 1
23589: PPUSH
23590: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23594: LD_VAR 0 2
23598: PPUSH
23599: CALL_OW 255
23603: PUSH
23604: LD_INT 3
23606: EQUAL
23607: PUSH
23608: LD_VAR 0 2
23612: PPUSH
23613: CALL_OW 257
23617: PUSH
23618: LD_INT 3
23620: EQUAL
23621: AND
23622: PUSH
23623: LD_VAR 0 1
23627: PUSH
23628: LD_EXP 35
23632: EQUAL
23633: AND
23634: IFFALSE 23648
// SetLives ( human , 1000 ) ;
23636: LD_VAR 0 2
23640: PPUSH
23641: LD_INT 1000
23643: PPUSH
23644: CALL_OW 234
// end ;
23648: PPOPN 3
23650: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23651: LD_VAR 0 1
23655: PUSH
23656: LD_INT 1
23658: EQUAL
23659: PUSH
23660: LD_VAR 0 2
23664: PUSH
23665: LD_INT 2
23667: EQUAL
23668: AND
23669: PUSH
23670: LD_INT 1
23672: PPUSH
23673: LD_INT 2
23675: PPUSH
23676: CALL_OW 81
23680: PUSH
23681: LD_INT 1
23683: EQUAL
23684: AND
23685: IFFALSE 23706
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23687: LD_EXP 24
23691: PPUSH
23692: LD_STRING D6b-Pow-1
23694: PPUSH
23695: CALL_OW 94
// YouLost ( Powell ) ;
23699: LD_STRING Powell
23701: PPUSH
23702: CALL_OW 104
// end ; end ;
23706: PPOPN 2
23708: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23709: LD_INT 23
23711: PPUSH
23712: LD_INT 22
23714: PUSH
23715: LD_INT 1
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: PUSH
23722: LD_INT 21
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PUSH
23732: EMPTY
23733: LIST
23734: LIST
23735: PPUSH
23736: CALL_OW 70
23740: PUSH
23741: LD_INT 23
23743: PPUSH
23744: LD_INT 22
23746: PUSH
23747: LD_INT 1
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: LD_INT 21
23756: PUSH
23757: LD_INT 2
23759: PUSH
23760: EMPTY
23761: LIST
23762: LIST
23763: PUSH
23764: LD_INT 58
23766: PUSH
23767: EMPTY
23768: LIST
23769: PUSH
23770: EMPTY
23771: LIST
23772: LIST
23773: LIST
23774: PPUSH
23775: CALL_OW 70
23779: OR
23780: PUSH
23781: LD_INT 1
23783: PPUSH
23784: LD_INT 2
23786: PPUSH
23787: CALL_OW 81
23791: PUSH
23792: LD_INT 1
23794: EQUAL
23795: AND
23796: IFFALSE 23820
23798: GO 23800
23800: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23801: LD_EXP 24
23805: PPUSH
23806: LD_STRING D6b-Pow-1
23808: PPUSH
23809: CALL_OW 94
// YouLost ( Powell ) ;
23813: LD_STRING Powell
23815: PPUSH
23816: CALL_OW 104
// end ;
23820: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23821: LD_VAR 0 1
23825: PUSH
23826: LD_EXP 1
23830: EQUAL
23831: IFFALSE 23840
// YouLost ( JMM ) ;
23833: LD_STRING JMM
23835: PPUSH
23836: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23840: LD_VAR 0 1
23844: PPUSH
23845: CALL_OW 255
23849: PUSH
23850: LD_INT 3
23852: EQUAL
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 247
23863: PUSH
23864: LD_INT 3
23866: EQUAL
23867: AND
23868: IFFALSE 24560
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23870: LD_VAR 0 1
23874: PPUSH
23875: CALL_OW 266
23879: PUSH
23880: LD_INT 31
23882: EQUAL
23883: PUSH
23884: LD_VAR 0 1
23888: PPUSH
23889: CALL_OW 266
23893: PUSH
23894: LD_INT 32
23896: EQUAL
23897: OR
23898: PUSH
23899: LD_VAR 0 1
23903: PPUSH
23904: CALL_OW 266
23908: PUSH
23909: LD_INT 36
23911: EQUAL
23912: OR
23913: PUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: CALL_OW 266
23923: PUSH
23924: LD_INT 0
23926: EQUAL
23927: OR
23928: PUSH
23929: LD_VAR 0 1
23933: PPUSH
23934: CALL_OW 266
23938: PUSH
23939: LD_INT 24
23941: EQUAL
23942: OR
23943: PUSH
23944: LD_VAR 0 1
23948: PPUSH
23949: CALL_OW 266
23953: PUSH
23954: LD_INT 17
23956: EQUAL
23957: OR
23958: PUSH
23959: LD_VAR 0 1
23963: PPUSH
23964: CALL_OW 266
23968: PUSH
23969: LD_INT 25
23971: EQUAL
23972: OR
23973: PUSH
23974: LD_VAR 0 1
23978: PPUSH
23979: CALL_OW 266
23983: PUSH
23984: LD_INT 19
23986: EQUAL
23987: OR
23988: PUSH
23989: LD_VAR 0 1
23993: PPUSH
23994: CALL_OW 266
23998: PUSH
23999: LD_INT 20
24001: EQUAL
24002: OR
24003: PUSH
24004: LD_VAR 0 1
24008: PPUSH
24009: CALL_OW 266
24013: PUSH
24014: LD_INT 18
24016: EQUAL
24017: OR
24018: PUSH
24019: LD_VAR 0 1
24023: PPUSH
24024: CALL_OW 266
24028: PUSH
24029: LD_INT 21
24031: EQUAL
24032: OR
24033: PUSH
24034: LD_VAR 0 1
24038: PPUSH
24039: CALL_OW 266
24043: PUSH
24044: LD_INT 23
24046: EQUAL
24047: OR
24048: PUSH
24049: LD_VAR 0 1
24053: PPUSH
24054: CALL_OW 266
24058: PUSH
24059: LD_INT 16
24061: EQUAL
24062: OR
24063: PUSH
24064: LD_VAR 0 1
24068: PPUSH
24069: CALL_OW 266
24073: PUSH
24074: LD_INT 6
24076: EQUAL
24077: OR
24078: PUSH
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 266
24088: PUSH
24089: LD_INT 29
24091: EQUAL
24092: OR
24093: PUSH
24094: LD_VAR 0 1
24098: PPUSH
24099: CALL_OW 266
24103: PUSH
24104: LD_INT 26
24106: EQUAL
24107: OR
24108: PUSH
24109: LD_VAR 0 1
24113: PPUSH
24114: CALL_OW 266
24118: PUSH
24119: LD_INT 30
24121: EQUAL
24122: OR
24123: PUSH
24124: LD_VAR 0 1
24128: PPUSH
24129: CALL_OW 266
24133: PUSH
24134: LD_INT 28
24136: EQUAL
24137: OR
24138: PUSH
24139: LD_VAR 0 1
24143: PPUSH
24144: CALL_OW 266
24148: PUSH
24149: LD_INT 27
24151: EQUAL
24152: OR
24153: PUSH
24154: LD_VAR 0 1
24158: PPUSH
24159: CALL_OW 266
24163: PUSH
24164: LD_INT 33
24166: EQUAL
24167: OR
24168: PUSH
24169: LD_VAR 0 1
24173: PPUSH
24174: CALL_OW 266
24178: PUSH
24179: LD_INT 2
24181: EQUAL
24182: OR
24183: PUSH
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL_OW 266
24193: PUSH
24194: LD_INT 4
24196: EQUAL
24197: OR
24198: IFFALSE 24284
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24200: LD_ADDR_EXP 42
24204: PUSH
24205: LD_EXP 42
24209: PUSH
24210: LD_VAR 0 1
24214: PPUSH
24215: CALL_OW 266
24219: ADD
24220: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24221: LD_ADDR_EXP 42
24225: PUSH
24226: LD_EXP 42
24230: PUSH
24231: LD_VAR 0 1
24235: PPUSH
24236: CALL_OW 250
24240: ADD
24241: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24242: LD_ADDR_EXP 42
24246: PUSH
24247: LD_EXP 42
24251: PUSH
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 251
24261: ADD
24262: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24263: LD_ADDR_EXP 42
24267: PUSH
24268: LD_EXP 42
24272: PUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 254
24282: ADD
24283: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL_OW 266
24293: PUSH
24294: LD_INT 1
24296: EQUAL
24297: IFFALSE 24376
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24299: LD_ADDR_EXP 42
24303: PUSH
24304: LD_EXP 42
24308: PUSH
24309: LD_INT 0
24311: ADD
24312: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24313: LD_ADDR_EXP 42
24317: PUSH
24318: LD_EXP 42
24322: PUSH
24323: LD_VAR 0 1
24327: PPUSH
24328: CALL_OW 250
24332: ADD
24333: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24334: LD_ADDR_EXP 42
24338: PUSH
24339: LD_EXP 42
24343: PUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL_OW 251
24353: ADD
24354: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24355: LD_ADDR_EXP 42
24359: PUSH
24360: LD_EXP 42
24364: PUSH
24365: LD_VAR 0 1
24369: PPUSH
24370: CALL_OW 254
24374: ADD
24375: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL_OW 266
24385: PUSH
24386: LD_INT 3
24388: EQUAL
24389: IFFALSE 24468
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24391: LD_ADDR_EXP 42
24395: PUSH
24396: LD_EXP 42
24400: PUSH
24401: LD_INT 2
24403: ADD
24404: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24405: LD_ADDR_EXP 42
24409: PUSH
24410: LD_EXP 42
24414: PUSH
24415: LD_VAR 0 1
24419: PPUSH
24420: CALL_OW 250
24424: ADD
24425: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24426: LD_ADDR_EXP 42
24430: PUSH
24431: LD_EXP 42
24435: PUSH
24436: LD_VAR 0 1
24440: PPUSH
24441: CALL_OW 251
24445: ADD
24446: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24447: LD_ADDR_EXP 42
24451: PUSH
24452: LD_EXP 42
24456: PUSH
24457: LD_VAR 0 1
24461: PPUSH
24462: CALL_OW 254
24466: ADD
24467: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24468: LD_VAR 0 1
24472: PPUSH
24473: CALL_OW 266
24477: PUSH
24478: LD_INT 5
24480: EQUAL
24481: IFFALSE 24560
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24483: LD_ADDR_EXP 42
24487: PUSH
24488: LD_EXP 42
24492: PUSH
24493: LD_INT 4
24495: ADD
24496: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24497: LD_ADDR_EXP 42
24501: PUSH
24502: LD_EXP 42
24506: PUSH
24507: LD_VAR 0 1
24511: PPUSH
24512: CALL_OW 250
24516: ADD
24517: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24518: LD_ADDR_EXP 42
24522: PUSH
24523: LD_EXP 42
24527: PUSH
24528: LD_VAR 0 1
24532: PPUSH
24533: CALL_OW 251
24537: ADD
24538: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24539: LD_ADDR_EXP 42
24543: PUSH
24544: LD_EXP 42
24548: PUSH
24549: LD_VAR 0 1
24553: PPUSH
24554: CALL_OW 254
24558: ADD
24559: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24560: LD_VAR 0 1
24564: PPUSH
24565: CALL_OW 257
24569: PUSH
24570: LD_INT 3
24572: EQUAL
24573: PUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 255
24583: PUSH
24584: LD_INT 3
24586: EQUAL
24587: AND
24588: PUSH
24589: LD_EXP 35
24593: PPUSH
24594: CALL_OW 302
24598: AND
24599: PUSH
24600: LD_EXP 35
24604: PPUSH
24605: CALL_OW 255
24609: PUSH
24610: LD_INT 3
24612: EQUAL
24613: AND
24614: IFFALSE 24684
// begin uc_side = 3 ;
24616: LD_ADDR_OWVAR 20
24620: PUSH
24621: LD_INT 3
24623: ST_TO_ADDR
// uc_nation = 3 ;
24624: LD_ADDR_OWVAR 21
24628: PUSH
24629: LD_INT 3
24631: ST_TO_ADDR
// hc_gallery :=  ;
24632: LD_ADDR_OWVAR 33
24636: PUSH
24637: LD_STRING 
24639: ST_TO_ADDR
// hc_name :=  ;
24640: LD_ADDR_OWVAR 26
24644: PUSH
24645: LD_STRING 
24647: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24648: LD_INT 0
24650: PPUSH
24651: LD_EXP 36
24655: PPUSH
24656: LD_EXP 37
24660: PPUSH
24661: CALL_OW 12
24665: PPUSH
24666: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24670: CALL_OW 44
24674: PPUSH
24675: LD_EXP 35
24679: PPUSH
24680: CALL_OW 52
// end ; end ;
24684: PPOPN 1
24686: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24687: LD_ADDR_OWVAR 57
24691: PUSH
24692: LD_INT 0
24694: ST_TO_ADDR
// fastEnd = 1 ;
24695: LD_ADDR_EXP 59
24699: PUSH
24700: LD_INT 1
24702: ST_TO_ADDR
// FinishMission ;
24703: CALL 25965 0 0
// end ; end_of_file
24707: PPOPN 1
24709: END
// export function PrepareNature ; var i , un ; begin
24710: LD_INT 0
24712: PPUSH
24713: PPUSH
24714: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24715: LD_ADDR_VAR 0 2
24719: PUSH
24720: DOUBLE
24721: LD_INT 1
24723: DEC
24724: ST_TO_ADDR
24725: LD_OWVAR 67
24729: PUSH
24730: LD_INT 1
24732: PPUSH
24733: LD_INT 5
24735: PPUSH
24736: CALL_OW 12
24740: PLUS
24741: PUSH
24742: FOR_TO
24743: IFFALSE 24888
// begin hc_sex = sex_male ;
24745: LD_ADDR_OWVAR 27
24749: PUSH
24750: LD_INT 1
24752: ST_TO_ADDR
// uc_side = 0 ;
24753: LD_ADDR_OWVAR 20
24757: PUSH
24758: LD_INT 0
24760: ST_TO_ADDR
// uc_nation = nation_nature ;
24761: LD_ADDR_OWVAR 21
24765: PUSH
24766: LD_INT 0
24768: ST_TO_ADDR
// hc_class = class_apeman ;
24769: LD_ADDR_OWVAR 28
24773: PUSH
24774: LD_INT 12
24776: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24777: LD_ADDR_OWVAR 31
24781: PUSH
24782: LD_INT 2
24784: PPUSH
24785: LD_INT 7
24787: PPUSH
24788: CALL_OW 12
24792: PUSH
24793: LD_OWVAR 67
24797: PLUS
24798: PUSH
24799: LD_INT 2
24801: PPUSH
24802: LD_INT 10
24804: PPUSH
24805: CALL_OW 12
24809: PUSH
24810: LD_INT 2
24812: PPUSH
24813: LD_INT 10
24815: PPUSH
24816: CALL_OW 12
24820: PUSH
24821: LD_INT 2
24823: PPUSH
24824: LD_INT 10
24826: PPUSH
24827: CALL_OW 12
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24838: LD_ADDR_OWVAR 35
24842: PUSH
24843: LD_INT 5
24845: NEG
24846: PPUSH
24847: LD_INT 5
24849: PPUSH
24850: CALL_OW 12
24854: PUSH
24855: LD_OWVAR 67
24859: MUL
24860: ST_TO_ADDR
// un = CreateHuman ;
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: CALL_OW 44
24870: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24871: LD_VAR 0 3
24875: PPUSH
24876: LD_INT 5
24878: PPUSH
24879: LD_INT 0
24881: PPUSH
24882: CALL_OW 49
// end ;
24886: GO 24742
24888: POP
24889: POP
// for i = 1 to Difficulty + 2 do
24890: LD_ADDR_VAR 0 2
24894: PUSH
24895: DOUBLE
24896: LD_INT 1
24898: DEC
24899: ST_TO_ADDR
24900: LD_OWVAR 67
24904: PUSH
24905: LD_INT 2
24907: PLUS
24908: PUSH
24909: FOR_TO
24910: IFFALSE 25019
// begin hc_sex = sex_male ;
24912: LD_ADDR_OWVAR 27
24916: PUSH
24917: LD_INT 1
24919: ST_TO_ADDR
// uc_side = 0 ;
24920: LD_ADDR_OWVAR 20
24924: PUSH
24925: LD_INT 0
24927: ST_TO_ADDR
// uc_nation = nation_nature ;
24928: LD_ADDR_OWVAR 21
24932: PUSH
24933: LD_INT 0
24935: ST_TO_ADDR
// hc_class = class_tiger ;
24936: LD_ADDR_OWVAR 28
24940: PUSH
24941: LD_INT 14
24943: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24944: LD_ADDR_OWVAR 31
24948: PUSH
24949: LD_EXP 37
24953: PUSH
24954: LD_INT 0
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 0
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24969: LD_ADDR_OWVAR 35
24973: PUSH
24974: LD_INT 5
24976: NEG
24977: PPUSH
24978: LD_INT 5
24980: PPUSH
24981: CALL_OW 12
24985: PUSH
24986: LD_OWVAR 67
24990: MUL
24991: ST_TO_ADDR
// un = CreateHuman ;
24992: LD_ADDR_VAR 0 3
24996: PUSH
24997: CALL_OW 44
25001: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25002: LD_VAR 0 3
25006: PPUSH
25007: LD_INT 6
25009: PPUSH
25010: LD_INT 0
25012: PPUSH
25013: CALL_OW 49
// end ;
25017: GO 24909
25019: POP
25020: POP
// for i = 1 to rand ( 3 , 4 ) do
25021: LD_ADDR_VAR 0 2
25025: PUSH
25026: DOUBLE
25027: LD_INT 1
25029: DEC
25030: ST_TO_ADDR
25031: LD_INT 3
25033: PPUSH
25034: LD_INT 4
25036: PPUSH
25037: CALL_OW 12
25041: PUSH
25042: FOR_TO
25043: IFFALSE 25137
// begin hc_sex = sex_male ;
25045: LD_ADDR_OWVAR 27
25049: PUSH
25050: LD_INT 1
25052: ST_TO_ADDR
// uc_side = 0 ;
25053: LD_ADDR_OWVAR 20
25057: PUSH
25058: LD_INT 0
25060: ST_TO_ADDR
// uc_nation = nation_nature ;
25061: LD_ADDR_OWVAR 21
25065: PUSH
25066: LD_INT 0
25068: ST_TO_ADDR
// hc_class = 18 ;
25069: LD_ADDR_OWVAR 28
25073: PUSH
25074: LD_INT 18
25076: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25077: LD_ADDR_OWVAR 31
25081: PUSH
25082: LD_EXP 37
25086: PUSH
25087: LD_INT 0
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: LD_INT 0
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
// hc_agressivity = 0 ;
25102: LD_ADDR_OWVAR 35
25106: PUSH
25107: LD_INT 0
25109: ST_TO_ADDR
// un = CreateHuman ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: CALL_OW 44
25119: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25120: LD_VAR 0 3
25124: PPUSH
25125: LD_INT 6
25127: PPUSH
25128: LD_INT 0
25130: PPUSH
25131: CALL_OW 49
// end ;
25135: GO 25042
25137: POP
25138: POP
// end ; end_of_file
25139: LD_VAR 0 1
25143: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25144: LD_EXP 46
25148: PUSH
25149: LD_INT 1
25151: EQUAL
25152: IFFALSE 25236
25154: GO 25156
25156: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25157: LD_INT 7
25159: PPUSH
25160: LD_INT 5
25162: PPUSH
25163: LD_INT 4
25165: PUSH
25166: LD_INT 5
25168: PUSH
25169: LD_INT 6
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: LIST
25176: PUSH
25177: LD_OWVAR 67
25181: ARRAY
25182: PPUSH
25183: LD_EXP 36
25187: PPUSH
25188: LD_EXP 37
25192: PPUSH
25193: CALL_OW 12
25197: PPUSH
25198: LD_INT 2
25200: PPUSH
25201: LD_INT 1
25203: PPUSH
25204: LD_INT 1
25206: PPUSH
25207: EMPTY
25208: PPUSH
25209: LD_INT 25
25211: PUSH
25212: LD_INT 26
25214: PUSH
25215: LD_INT 27
25217: PUSH
25218: LD_INT 28
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: PPUSH
25227: EMPTY
25228: PPUSH
25229: LD_INT 1
25231: PPUSH
25232: CALL 15717 0 11
25236: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25237: LD_EXP 46
25241: PUSH
25242: LD_INT 1
25244: EQUAL
25245: IFFALSE 25333
25247: GO 25249
25249: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25250: LD_INT 5
25252: PPUSH
25253: LD_INT 2
25255: PPUSH
25256: LD_INT 7
25258: PUSH
25259: LD_INT 8
25261: PUSH
25262: LD_INT 10
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: LIST
25269: PUSH
25270: LD_OWVAR 67
25274: ARRAY
25275: PPUSH
25276: LD_INT 0
25278: PPUSH
25279: LD_INT 0
25281: PPUSH
25282: LD_INT 2
25284: PUSH
25285: LD_INT 4
25287: PUSH
25288: LD_INT 5
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: LIST
25295: PUSH
25296: LD_OWVAR 67
25300: ARRAY
25301: PPUSH
25302: LD_INT 0
25304: PPUSH
25305: LD_EXP 36
25309: PPUSH
25310: LD_EXP 37
25314: PPUSH
25315: CALL_OW 12
25319: PPUSH
25320: LD_INT 7
25322: PPUSH
25323: LD_INT 9
25325: PPUSH
25326: LD_INT 1
25328: PPUSH
25329: CALL 17421 0 11
25333: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25334: LD_EXP 46
25338: PUSH
25339: LD_INT 1
25341: EQUAL
25342: IFFALSE 25351
25344: GO 25346
25346: DISABLE
// PrepareArabianSheik ;
25347: CALL 3910 0 0
25351: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25352: LD_EXP 29
25356: PUSH
25357: LD_EXP 60
25361: PUSH
25362: LD_INT 1
25364: EQUAL
25365: AND
25366: IFFALSE 25435
25368: GO 25370
25370: DISABLE
// begin enable ;
25371: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25372: LD_INT 6
25374: PPUSH
25375: LD_INT 3
25377: PPUSH
25378: LD_EXP 57
25382: PPUSH
25383: LD_INT 0
25385: PPUSH
25386: LD_OWVAR 67
25390: PPUSH
25391: LD_INT 0
25393: PPUSH
25394: LD_EXP 57
25398: PUSH
25399: LD_INT 3
25401: DIV
25402: PUSH
25403: LD_INT 1
25405: PLUS
25406: PPUSH
25407: LD_EXP 36
25411: PPUSH
25412: LD_EXP 37
25416: PPUSH
25417: CALL_OW 12
25421: PPUSH
25422: LD_INT 17
25424: PPUSH
25425: LD_INT 18
25427: PPUSH
25428: LD_INT 1
25430: PPUSH
25431: CALL 17421 0 11
// end ;
25435: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25436: LD_EXP 29
25440: PUSH
25441: LD_EXP 60
25445: PUSH
25446: LD_INT 1
25448: EQUAL
25449: AND
25450: IFFALSE 25527
25452: GO 25454
25454: DISABLE
// begin enable ;
25455: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25456: LD_INT 17
25458: PPUSH
25459: LD_INT 6
25461: PPUSH
25462: LD_EXP 56
25466: PPUSH
25467: LD_EXP 36
25471: PPUSH
25472: LD_EXP 37
25476: PPUSH
25477: CALL_OW 12
25481: PPUSH
25482: LD_INT 3
25484: PPUSH
25485: LD_INT 1
25487: PPUSH
25488: LD_INT 1
25490: PUSH
25491: LD_INT 3
25493: PUSH
25494: EMPTY
25495: LIST
25496: LIST
25497: PPUSH
25498: LD_INT 43
25500: PUSH
25501: LD_INT 44
25503: PUSH
25504: LD_INT 45
25506: PUSH
25507: LD_INT 46
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: LIST
25514: LIST
25515: PPUSH
25516: EMPTY
25517: PPUSH
25518: EMPTY
25519: PPUSH
25520: LD_INT 1
25522: PPUSH
25523: CALL 15717 0 11
// end ;
25527: END
// every 10 10$00 trigger joinEpsilon do
25528: LD_EXP 29
25532: IFFALSE 25586
25534: GO 25536
25536: DISABLE
// begin enable ;
25537: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25538: LD_ADDR_EXP 56
25542: PUSH
25543: LD_EXP 56
25547: PUSH
25548: LD_INT 1
25550: PPUSH
25551: LD_OWVAR 67
25555: PPUSH
25556: CALL_OW 12
25560: PLUS
25561: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25562: LD_ADDR_EXP 57
25566: PUSH
25567: LD_EXP 57
25571: PUSH
25572: LD_INT 1
25574: PPUSH
25575: LD_OWVAR 67
25579: PPUSH
25580: CALL_OW 12
25584: PLUS
25585: ST_TO_ADDR
// end ;
25586: END
// every 21 21$0 trigger attackAvalaible = 1 do
25587: LD_EXP 60
25591: PUSH
25592: LD_INT 1
25594: EQUAL
25595: IFFALSE 25608
25597: GO 25599
25599: DISABLE
// attackAvalaible = 0 ; end_of_file
25600: LD_ADDR_EXP 60
25604: PUSH
25605: LD_INT 0
25607: ST_TO_ADDR
25608: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25609: LD_INT 54
25611: PPUSH
25612: LD_INT 1
25614: PPUSH
25615: CALL_OW 321
25619: PUSH
25620: LD_INT 2
25622: EQUAL
25623: PUSH
25624: LD_INT 55
25626: PPUSH
25627: LD_INT 1
25629: PPUSH
25630: CALL_OW 321
25634: PUSH
25635: LD_INT 2
25637: EQUAL
25638: AND
25639: PUSH
25640: LD_INT 21
25642: PPUSH
25643: LD_INT 1
25645: PPUSH
25646: CALL_OW 321
25650: PUSH
25651: LD_INT 2
25653: EQUAL
25654: AND
25655: PUSH
25656: LD_INT 22
25658: PPUSH
25659: LD_INT 1
25661: PPUSH
25662: CALL_OW 321
25666: PUSH
25667: LD_INT 2
25669: EQUAL
25670: AND
25671: PUSH
25672: LD_INT 12
25674: PPUSH
25675: LD_INT 1
25677: PPUSH
25678: CALL_OW 321
25682: PUSH
25683: LD_INT 1
25685: EQUAL
25686: PUSH
25687: LD_INT 32
25689: PPUSH
25690: LD_INT 1
25692: PPUSH
25693: CALL_OW 321
25697: PUSH
25698: LD_INT 1
25700: EQUAL
25701: OR
25702: PUSH
25703: EMPTY
25704: LIST
25705: AND
25706: PUSH
25707: LD_EXP 48
25711: PUSH
25712: LD_INT 1
25714: EQUAL
25715: AND
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_INT 3
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 21
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PPUSH
25741: CALL_OW 69
25745: PUSH
25746: LD_INT 0
25748: EQUAL
25749: AND
25750: IFFALSE 25806
25752: GO 25754
25754: DISABLE
// begin case query ( QEndMission ) of 1 :
25755: LD_STRING QEndMission
25757: PPUSH
25758: CALL_OW 97
25762: PUSH
25763: LD_INT 1
25765: DOUBLE
25766: EQUAL
25767: IFTRUE 25771
25769: GO 25782
25771: POP
// begin end_the_mission_allowed = true ;
25772: LD_ADDR_OWVAR 57
25776: PUSH
25777: LD_INT 1
25779: ST_TO_ADDR
// end ; 2 :
25780: GO 25806
25782: LD_INT 2
25784: DOUBLE
25785: EQUAL
25786: IFTRUE 25790
25788: GO 25805
25790: POP
// begin fastEnd = 1 ;
25791: LD_ADDR_EXP 59
25795: PUSH
25796: LD_INT 1
25798: ST_TO_ADDR
// FinishMission ;
25799: CALL 25965 0 0
// end ; end ;
25803: GO 25806
25805: POP
// end ;
25806: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25807: LD_INT 54
25809: PPUSH
25810: LD_INT 1
25812: PPUSH
25813: CALL_OW 321
25817: PUSH
25818: LD_INT 2
25820: EQUAL
25821: PUSH
25822: LD_INT 55
25824: PPUSH
25825: LD_INT 1
25827: PPUSH
25828: CALL_OW 321
25832: PUSH
25833: LD_INT 2
25835: EQUAL
25836: AND
25837: PUSH
25838: LD_INT 21
25840: PPUSH
25841: LD_INT 1
25843: PPUSH
25844: CALL_OW 321
25848: PUSH
25849: LD_INT 2
25851: EQUAL
25852: AND
25853: PUSH
25854: LD_INT 22
25856: PPUSH
25857: LD_INT 1
25859: PPUSH
25860: CALL_OW 321
25864: PUSH
25865: LD_INT 2
25867: EQUAL
25868: AND
25869: PUSH
25870: LD_INT 12
25872: PPUSH
25873: LD_INT 1
25875: PPUSH
25876: CALL_OW 321
25880: PUSH
25881: LD_INT 2
25883: EQUAL
25884: AND
25885: PUSH
25886: LD_INT 32
25888: PPUSH
25889: LD_INT 1
25891: PPUSH
25892: CALL_OW 321
25896: PUSH
25897: LD_INT 2
25899: EQUAL
25900: AND
25901: PUSH
25902: LD_EXP 59
25906: PUSH
25907: LD_INT 0
25909: EQUAL
25910: AND
25911: PUSH
25912: LD_EXP 48
25916: PUSH
25917: LD_INT 1
25919: EQUAL
25920: AND
25921: PUSH
25922: LD_INT 22
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 21
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PPUSH
25946: CALL_OW 69
25950: PUSH
25951: LD_INT 0
25953: EQUAL
25954: AND
25955: IFFALSE 25964
25957: GO 25959
25959: DISABLE
// FinishMission ;
25960: CALL 25965 0 0
25964: END
// export function FinishMission ; begin
25965: LD_INT 0
25967: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25968: LD_EXP 52
25972: PPUSH
25973: LD_STRING 10_KhatamStatus_1
25975: PPUSH
25976: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25980: LD_EXP 51
25984: PPUSH
25985: LD_STRING 10_GensherEscape_1
25987: PPUSH
25988: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25992: LD_INT 12
25994: PPUSH
25995: LD_INT 1
25997: PPUSH
25998: CALL_OW 321
26002: PUSH
26003: LD_INT 2
26005: EQUAL
26006: IFFALSE 26020
// begin AddMedal ( sights , 1 ) ;
26008: LD_STRING sights
26010: PPUSH
26011: LD_INT 1
26013: PPUSH
26014: CALL_OW 101
// end else
26018: GO 26031
// begin AddMedal ( sights , - 1 ) ;
26020: LD_STRING sights
26022: PPUSH
26023: LD_INT 1
26025: NEG
26026: PPUSH
26027: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26031: LD_INT 32
26033: PPUSH
26034: LD_INT 1
26036: PPUSH
26037: CALL_OW 321
26041: PUSH
26042: LD_INT 2
26044: EQUAL
26045: IFFALSE 26059
// begin AddMedal ( computers , 1 ) ;
26047: LD_STRING computers
26049: PPUSH
26050: LD_INT 1
26052: PPUSH
26053: CALL_OW 101
// end else
26057: GO 26070
// begin AddMedal ( computers , - 1 ) ;
26059: LD_STRING computers
26061: PPUSH
26062: LD_INT 1
26064: NEG
26065: PPUSH
26066: CALL_OW 101
// end ; if arabianEscape = 0 then
26070: LD_EXP 47
26074: PUSH
26075: LD_INT 0
26077: EQUAL
26078: IFFALSE 26102
// begin AddMedal ( renegades , 2 ) ;
26080: LD_STRING renegades
26082: PPUSH
26083: LD_INT 2
26085: PPUSH
26086: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26090: LD_INT 0
26092: PPUSH
26093: LD_STRING 10_ScientistsEscape_1
26095: PPUSH
26096: CALL_OW 39
// end else
26100: GO 26113
// begin AddMedal ( renegades , - 1 ) ;
26102: LD_STRING renegades
26104: PPUSH
26105: LD_INT 1
26107: NEG
26108: PPUSH
26109: CALL_OW 101
// end ; SaveEpsilonBase ;
26113: CALL 26844 0 0
// Query ( kaj ) ;
26117: LD_STRING kaj
26119: PPUSH
26120: CALL_OW 97
// GiveMedals ( Main ) ;
26124: LD_STRING Main
26126: PPUSH
26127: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26131: LD_INT 22
26133: PUSH
26134: LD_INT 1
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 23
26143: PUSH
26144: LD_INT 1
26146: PUSH
26147: EMPTY
26148: LIST
26149: LIST
26150: PUSH
26151: LD_INT 21
26153: PUSH
26154: LD_INT 1
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: PUSH
26161: LD_INT 2
26163: PUSH
26164: LD_INT 25
26166: PUSH
26167: LD_INT 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 25
26176: PUSH
26177: LD_INT 2
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: PUSH
26184: LD_INT 25
26186: PUSH
26187: LD_INT 3
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: PUSH
26194: LD_INT 25
26196: PUSH
26197: LD_INT 4
26199: PUSH
26200: EMPTY
26201: LIST
26202: LIST
26203: PUSH
26204: LD_INT 25
26206: PUSH
26207: LD_INT 5
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 25
26216: PUSH
26217: LD_INT 8
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: LIST
26230: LIST
26231: LIST
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: LIST
26238: PPUSH
26239: CALL_OW 69
26243: PPUSH
26244: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26248: LD_EXP 1
26252: PPUSH
26253: LD_EXP 53
26257: PUSH
26258: LD_STRING JMM
26260: STR
26261: PPUSH
26262: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26266: LD_EXP 2
26270: PPUSH
26271: LD_EXP 53
26275: PUSH
26276: LD_STRING Brown
26278: STR
26279: PPUSH
26280: CALL 9992 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26284: LD_EXP 3
26288: PPUSH
26289: LD_EXP 53
26293: PUSH
26294: LD_STRING Donaldson
26296: STR
26297: PPUSH
26298: CALL 9992 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26302: LD_EXP 4
26306: PPUSH
26307: LD_EXP 53
26311: PUSH
26312: LD_STRING Bobby
26314: STR
26315: PPUSH
26316: CALL 9992 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26320: LD_EXP 5
26324: PPUSH
26325: LD_EXP 53
26329: PUSH
26330: LD_STRING Cyrus
26332: STR
26333: PPUSH
26334: CALL 9992 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26338: LD_EXP 6
26342: PPUSH
26343: LD_EXP 53
26347: PUSH
26348: LD_STRING Lisa
26350: STR
26351: PPUSH
26352: CALL 9992 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26356: LD_EXP 7
26360: PPUSH
26361: LD_EXP 53
26365: PUSH
26366: LD_STRING Frank
26368: STR
26369: PPUSH
26370: CALL 9992 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26374: LD_EXP 8
26378: PPUSH
26379: LD_EXP 53
26383: PUSH
26384: LD_STRING Kikuchi
26386: STR
26387: PPUSH
26388: CALL 9992 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26392: LD_EXP 9
26396: PPUSH
26397: LD_EXP 53
26401: PUSH
26402: LD_STRING Houten
26404: STR
26405: PPUSH
26406: CALL 9992 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26410: LD_EXP 10
26414: PPUSH
26415: LD_EXP 53
26419: PUSH
26420: LD_STRING Gary
26422: STR
26423: PPUSH
26424: CALL 9992 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26428: LD_EXP 19
26432: PPUSH
26433: LD_EXP 53
26437: PUSH
26438: LD_STRING Cornell
26440: STR
26441: PPUSH
26442: CALL 9992 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26446: LD_EXP 11
26450: PPUSH
26451: LD_EXP 53
26455: PUSH
26456: LD_STRING Simms
26458: STR
26459: PPUSH
26460: CALL 9992 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26464: LD_EXP 12
26468: PPUSH
26469: LD_EXP 53
26473: PUSH
26474: LD_STRING Denis
26476: STR
26477: PPUSH
26478: CALL 9992 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26482: LD_EXP 13
26486: PPUSH
26487: LD_EXP 53
26491: PUSH
26492: LD_STRING Joan
26494: STR
26495: PPUSH
26496: CALL 9992 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26500: LD_EXP 15
26504: PPUSH
26505: LD_EXP 53
26509: PUSH
26510: LD_STRING Gladstone
26512: STR
26513: PPUSH
26514: CALL 9992 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26518: LD_EXP 17
26522: PPUSH
26523: LD_EXP 53
26527: PUSH
26528: LD_STRING DeltaDoctor
26530: STR
26531: PPUSH
26532: CALL 9992 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26536: LD_EXP 22
26540: PPUSH
26541: LD_STRING 10c_lock
26543: PPUSH
26544: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26548: LD_INT 50
26550: PUSH
26551: EMPTY
26552: LIST
26553: PUSH
26554: LD_INT 22
26556: PUSH
26557: LD_INT 1
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 21
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 2
26576: PUSH
26577: LD_INT 25
26579: PUSH
26580: LD_INT 1
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 25
26589: PUSH
26590: LD_INT 2
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: LD_INT 25
26599: PUSH
26600: LD_INT 3
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 25
26609: PUSH
26610: LD_INT 4
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 25
26619: PUSH
26620: LD_INT 5
26622: PUSH
26623: EMPTY
26624: LIST
26625: LIST
26626: PUSH
26627: LD_INT 25
26629: PUSH
26630: LD_INT 8
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: PUSH
26646: EMPTY
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: PPUSH
26652: CALL_OW 69
26656: PUSH
26657: LD_EXP 1
26661: PUSH
26662: LD_EXP 2
26666: PUSH
26667: LD_EXP 3
26671: PUSH
26672: LD_EXP 4
26676: PUSH
26677: LD_EXP 5
26681: PUSH
26682: LD_EXP 6
26686: PUSH
26687: LD_EXP 7
26691: PUSH
26692: LD_EXP 15
26696: PUSH
26697: LD_EXP 8
26701: PUSH
26702: LD_EXP 12
26706: PUSH
26707: LD_EXP 13
26711: PUSH
26712: LD_EXP 9
26716: PUSH
26717: LD_EXP 11
26721: PUSH
26722: LD_EXP 10
26726: PUSH
26727: LD_EXP 17
26731: PUSH
26732: LD_EXP 19
26736: PUSH
26737: EMPTY
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: DIFF
26755: PPUSH
26756: LD_STRING 10_other_survivors
26758: PPUSH
26759: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26763: LD_INT 50
26765: PUSH
26766: EMPTY
26767: LIST
26768: PUSH
26769: LD_INT 22
26771: PUSH
26772: LD_INT 1
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: PUSH
26779: LD_INT 21
26781: PUSH
26782: LD_INT 1
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: PUSH
26789: LD_INT 2
26791: PUSH
26792: LD_INT 25
26794: PUSH
26795: LD_INT 16
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 25
26804: PUSH
26805: LD_INT 12
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: LIST
26816: PUSH
26817: EMPTY
26818: LIST
26819: LIST
26820: LIST
26821: LIST
26822: PPUSH
26823: CALL_OW 69
26827: PPUSH
26828: LD_STRING 10_ape
26830: PPUSH
26831: CALL_OW 38
// YouWin ;
26835: CALL_OW 103
// end ;
26839: LD_VAR 0 1
26843: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26844: LD_INT 0
26846: PPUSH
26847: PPUSH
26848: PPUSH
26849: PPUSH
// epsilonBase = [ ] ;
26850: LD_ADDR_VAR 0 2
26854: PUSH
26855: EMPTY
26856: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_INT 22
26864: PUSH
26865: LD_INT 1
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: LD_INT 21
26874: PUSH
26875: LD_INT 3
26877: PUSH
26878: EMPTY
26879: LIST
26880: LIST
26881: PUSH
26882: LD_INT 50
26884: PUSH
26885: EMPTY
26886: LIST
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: PPUSH
26893: CALL_OW 69
26897: ST_TO_ADDR
// for i in buildings do
26898: LD_ADDR_VAR 0 4
26902: PUSH
26903: LD_VAR 0 3
26907: PUSH
26908: FOR_IN
26909: IFFALSE 27346
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26911: LD_VAR 0 4
26915: PPUSH
26916: CALL_OW 266
26920: PUSH
26921: LD_INT 6
26923: PUSH
26924: LD_INT 7
26926: PUSH
26927: LD_INT 8
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: IN
26935: IFFALSE 27049
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26937: LD_ADDR_VAR 0 2
26941: PUSH
26942: LD_VAR 0 2
26946: PUSH
26947: LD_VAR 0 4
26951: PPUSH
26952: CALL_OW 266
26956: PUSH
26957: LD_VAR 0 4
26961: PPUSH
26962: CALL_OW 250
26966: PUSH
26967: LD_VAR 0 4
26971: PPUSH
26972: CALL_OW 251
26976: PUSH
26977: LD_VAR 0 4
26981: PPUSH
26982: CALL_OW 254
26986: PUSH
26987: LD_VAR 0 4
26991: PPUSH
26992: CALL_OW 267
26996: PUSH
26997: LD_VAR 0 4
27001: PPUSH
27002: CALL_OW 248
27006: PUSH
27007: LD_VAR 0 4
27011: PPUSH
27012: LD_INT 1
27014: PPUSH
27015: CALL_OW 268
27019: PUSH
27020: LD_VAR 0 4
27024: PPUSH
27025: LD_INT 2
27027: PPUSH
27028: CALL_OW 268
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: LIST
27039: LIST
27040: LIST
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: ADD
27046: ST_TO_ADDR
27047: GO 27344
// if GetBType ( i ) = b_bunker then
27049: LD_VAR 0 4
27053: PPUSH
27054: CALL_OW 266
27058: PUSH
27059: LD_INT 32
27061: EQUAL
27062: IFFALSE 27159
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27064: LD_ADDR_VAR 0 2
27068: PUSH
27069: LD_VAR 0 2
27073: PUSH
27074: LD_VAR 0 4
27078: PPUSH
27079: CALL_OW 266
27083: PUSH
27084: LD_VAR 0 4
27088: PPUSH
27089: CALL_OW 250
27093: PUSH
27094: LD_VAR 0 4
27098: PPUSH
27099: CALL_OW 251
27103: PUSH
27104: LD_VAR 0 4
27108: PPUSH
27109: CALL_OW 254
27113: PUSH
27114: LD_VAR 0 4
27118: PPUSH
27119: CALL_OW 267
27123: PUSH
27124: LD_VAR 0 4
27128: PPUSH
27129: CALL_OW 248
27133: PUSH
27134: LD_VAR 0 4
27138: PPUSH
27139: CALL_OW 269
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: PUSH
27153: EMPTY
27154: LIST
27155: ADD
27156: ST_TO_ADDR
27157: GO 27344
// if GetBType ( i ) = b_factory then
27159: LD_VAR 0 4
27163: PPUSH
27164: CALL_OW 266
27168: PUSH
27169: LD_INT 3
27171: EQUAL
27172: IFFALSE 27262
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27174: LD_ADDR_VAR 0 2
27178: PUSH
27179: LD_VAR 0 2
27183: PPUSH
27184: LD_INT 1
27186: PPUSH
27187: LD_VAR 0 4
27191: PPUSH
27192: CALL_OW 266
27196: PUSH
27197: LD_VAR 0 4
27201: PPUSH
27202: CALL_OW 250
27206: PUSH
27207: LD_VAR 0 4
27211: PPUSH
27212: CALL_OW 251
27216: PUSH
27217: LD_VAR 0 4
27221: PPUSH
27222: CALL_OW 254
27226: PUSH
27227: LD_VAR 0 4
27231: PPUSH
27232: CALL_OW 267
27236: PUSH
27237: LD_VAR 0 4
27241: PPUSH
27242: CALL_OW 248
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: LIST
27251: LIST
27252: LIST
27253: LIST
27254: PPUSH
27255: CALL_OW 2
27259: ST_TO_ADDR
27260: GO 27344
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27262: LD_ADDR_VAR 0 2
27266: PUSH
27267: LD_VAR 0 2
27271: PUSH
27272: LD_VAR 0 4
27276: PPUSH
27277: CALL_OW 266
27281: PUSH
27282: LD_VAR 0 4
27286: PPUSH
27287: CALL_OW 250
27291: PUSH
27292: LD_VAR 0 4
27296: PPUSH
27297: CALL_OW 251
27301: PUSH
27302: LD_VAR 0 4
27306: PPUSH
27307: CALL_OW 254
27311: PUSH
27312: LD_VAR 0 4
27316: PPUSH
27317: CALL_OW 267
27321: PUSH
27322: LD_VAR 0 4
27326: PPUSH
27327: CALL_OW 248
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: PUSH
27340: EMPTY
27341: LIST
27342: ADD
27343: ST_TO_ADDR
// end ;
27344: GO 26908
27346: POP
27347: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27348: LD_VAR 0 2
27352: PPUSH
27353: LD_STRING 10_EpsilonBase
27355: PPUSH
27356: CALL_OW 39
// end ; end_of_file
27360: LD_VAR 0 1
27364: RET
// every 0 0$30 do
27365: GO 27367
27367: DISABLE
// begin enable ;
27368: ENABLE
// if cratesSpawned < 6 then
27369: LD_EXP 55
27373: PUSH
27374: LD_INT 6
27376: LESS
27377: IFFALSE 27414
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27379: LD_INT 3
27381: PPUSH
27382: LD_INT 5
27384: PPUSH
27385: CALL_OW 12
27389: PPUSH
27390: LD_INT 16
27392: PPUSH
27393: LD_INT 1
27395: PPUSH
27396: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27400: LD_ADDR_EXP 55
27404: PUSH
27405: LD_EXP 55
27409: PUSH
27410: LD_INT 1
27412: PLUS
27413: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27414: LD_EXP 55
27418: PUSH
27419: LD_INT 6
27421: GREATEREQUAL
27422: PUSH
27423: LD_EXP 55
27427: PUSH
27428: LD_INT 12
27430: LESS
27431: AND
27432: IFFALSE 27476
// begin wait ( 0 0$30 ) ;
27434: LD_INT 1050
27436: PPUSH
27437: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27441: LD_INT 3
27443: PPUSH
27444: LD_INT 5
27446: PPUSH
27447: CALL_OW 12
27451: PPUSH
27452: LD_INT 16
27454: PPUSH
27455: LD_INT 1
27457: PPUSH
27458: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27462: LD_ADDR_EXP 55
27466: PUSH
27467: LD_EXP 55
27471: PUSH
27472: LD_INT 1
27474: PLUS
27475: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27476: LD_EXP 55
27480: PUSH
27481: LD_INT 12
27483: GREATEREQUAL
27484: IFFALSE 27528
// begin wait ( 1 1$30 ) ;
27486: LD_INT 3150
27488: PPUSH
27489: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27493: LD_INT 3
27495: PPUSH
27496: LD_INT 5
27498: PPUSH
27499: CALL_OW 12
27503: PPUSH
27504: LD_INT 16
27506: PPUSH
27507: LD_INT 1
27509: PPUSH
27510: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27514: LD_ADDR_EXP 55
27518: PUSH
27519: LD_EXP 55
27523: PUSH
27524: LD_INT 1
27526: PLUS
27527: ST_TO_ADDR
// end ; end ;
27528: END
