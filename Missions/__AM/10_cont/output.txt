// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24320 0 0
// PrepareDifficulty ;
 250: CALL 9689 0 0
// PrepareJMMTeam ;
 254: CALL 596 0 0
// PrepareCathyTeam ;
 258: CALL 1671 0 0
// PrepareArabianCommander ;
 262: CALL 3036 0 0
// PrepareArabian ;
 266: CALL 3088 0 0
// BuildArabianBase ;
 270: CALL 12388 0 0
// TameApemans ;
 274: CALL 18232 0 0
// end ;
 278: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 279: LD_EXP 63
 283: PUSH
 284: LD_INT 1
 286: EQUAL
 287: IFFALSE 593
 289: GO 291
 291: DISABLE
 292: LD_INT 0
 294: PPUSH
// begin enable ;
 295: ENABLE
// fogoff ( true ) ;
 296: LD_INT 1
 298: PPUSH
 299: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 21
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PPUSH
 332: CALL_OW 69
 336: PUSH
 337: FOR_IN
 338: IFFALSE 354
// SetLives ( i , 1000 ) ;
 340: LD_VAR 0 1
 344: PPUSH
 345: LD_INT 1000
 347: PPUSH
 348: CALL_OW 234
 352: GO 337
 354: POP
 355: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 356: LD_ADDR_VAR 0 1
 360: PUSH
 361: LD_INT 22
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 30
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 30
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 1
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 435: LD_ADDR_VAR 0 1
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 2
 452: PUSH
 453: LD_INT 30
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 69
 486: PUSH
 487: FOR_IN
 488: IFFALSE 512
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 274
 499: PPUSH
 500: LD_INT 2
 502: PPUSH
 503: LD_INT 9999
 505: PPUSH
 506: CALL_OW 277
 510: GO 487
 512: POP
 513: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 514: LD_ADDR_VAR 0 1
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 2
 531: PUSH
 532: LD_INT 30
 534: PUSH
 535: LD_INT 0
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 30
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PPUSH
 561: CALL_OW 69
 565: PUSH
 566: FOR_IN
 567: IFFALSE 591
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 569: LD_VAR 0 1
 573: PPUSH
 574: CALL_OW 274
 578: PPUSH
 579: LD_INT 3
 581: PPUSH
 582: LD_INT 9999
 584: PPUSH
 585: CALL_OW 277
 589: GO 566
 591: POP
 592: POP
// end ; end_of_file
 593: PPOPN 1
 595: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 596: LD_INT 0
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
 602: PPUSH
 603: PPUSH
// uc_side = 1 ;
 604: LD_ADDR_OWVAR 20
 608: PUSH
 609: LD_INT 1
 611: ST_TO_ADDR
// uc_nation = 1 ;
 612: LD_ADDR_OWVAR 21
 616: PUSH
 617: LD_INT 1
 619: ST_TO_ADDR
// count = 0 ;
 620: LD_ADDR_VAR 0 6
 624: PUSH
 625: LD_INT 0
 627: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 628: LD_ADDR_EXP 1
 632: PUSH
 633: LD_STRING 10_JMM
 635: PPUSH
 636: LD_INT 1
 638: PPUSH
 639: CALL 9283 0 2
 643: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 644: LD_ADDR_EXP 20
 648: PUSH
 649: LD_EXP 20
 653: PUSH
 654: LD_EXP 1
 658: ADD
 659: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 660: LD_ADDR_EXP 10
 664: PUSH
 665: LD_STRING 10_Gary
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL 9283 0 2
 675: ST_TO_ADDR
// if Gary then
 676: LD_EXP 10
 680: IFFALSE 698
// JMMSquad = JMMSquad ^ Gary ;
 682: LD_ADDR_EXP 20
 686: PUSH
 687: LD_EXP 20
 691: PUSH
 692: LD_EXP 10
 696: ADD
 697: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 698: LD_ADDR_EXP 5
 702: PUSH
 703: LD_STRING 10_Cyrus
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: CALL 9283 0 2
 713: ST_TO_ADDR
// if Cyrus then
 714: LD_EXP 5
 718: IFFALSE 736
// JMMSquad = JMMSquad ^ Cyrus ;
 720: LD_ADDR_EXP 20
 724: PUSH
 725: LD_EXP 20
 729: PUSH
 730: LD_EXP 5
 734: ADD
 735: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING 10_Bobby
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: CALL 9283 0 2
 751: ST_TO_ADDR
// if Bobby then
 752: LD_EXP 4
 756: IFFALSE 774
// JMMSquad = JMMSquad ^ Bobby ;
 758: LD_ADDR_EXP 20
 762: PUSH
 763: LD_EXP 20
 767: PUSH
 768: LD_EXP 4
 772: ADD
 773: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING 10_Lisa
 781: PPUSH
 782: LD_INT 1
 784: PPUSH
 785: CALL 9283 0 2
 789: ST_TO_ADDR
// if Lisa then
 790: LD_EXP 6
 794: IFFALSE 812
// JMMSquad = JMMSquad ^ Lisa ;
 796: LD_ADDR_EXP 20
 800: PUSH
 801: LD_EXP 20
 805: PUSH
 806: LD_EXP 6
 810: ADD
 811: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 812: LD_ADDR_EXP 2
 816: PUSH
 817: LD_STRING 10_Brown
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL 9283 0 2
 827: ST_TO_ADDR
// if Brown then
 828: LD_EXP 2
 832: IFFALSE 850
// JMMSquad = JMMSquad ^ Brown ;
 834: LD_ADDR_EXP 20
 838: PUSH
 839: LD_EXP 20
 843: PUSH
 844: LD_EXP 2
 848: ADD
 849: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 850: LD_ADDR_EXP 3
 854: PUSH
 855: LD_STRING 10_Donaldson
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: CALL 9283 0 2
 865: ST_TO_ADDR
// if Donaldson then
 866: LD_EXP 3
 870: IFFALSE 888
// JMMSquad = JMMSquad ^ Donaldson ;
 872: LD_ADDR_EXP 20
 876: PUSH
 877: LD_EXP 20
 881: PUSH
 882: LD_EXP 3
 886: ADD
 887: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 888: LD_ADDR_EXP 7
 892: PUSH
 893: LD_STRING 10_Frank
 895: PPUSH
 896: LD_INT 1
 898: PPUSH
 899: CALL 9283 0 2
 903: ST_TO_ADDR
// if Frank then
 904: LD_EXP 7
 908: IFFALSE 926
// JMMSquad = JMMSquad ^ Frank ;
 910: LD_ADDR_EXP 20
 914: PUSH
 915: LD_EXP 20
 919: PUSH
 920: LD_EXP 7
 924: ADD
 925: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 926: LD_ADDR_EXP 9
 930: PUSH
 931: LD_STRING 10_Houten
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 9283 0 2
 941: ST_TO_ADDR
// if Houten then
 942: LD_EXP 9
 946: IFFALSE 964
// JMMSquad = JMMSquad ^ Houten ;
 948: LD_ADDR_EXP 20
 952: PUSH
 953: LD_EXP 20
 957: PUSH
 958: LD_EXP 9
 962: ADD
 963: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 964: LD_ADDR_EXP 21
 968: PUSH
 969: LD_STRING OthersIn10
 971: PPUSH
 972: CALL_OW 31
 976: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 977: LD_ADDR_EXP 24
 981: PUSH
 982: LD_STRING Powell
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL 9283 0 2
 992: ST_TO_ADDR
// for i in JMMSquad do
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: LD_EXP 20
1002: PUSH
1003: FOR_IN
1004: IFFALSE 1263
// begin if count < 3 then
1006: LD_VAR 0 6
1010: PUSH
1011: LD_INT 3
1013: LESS
1014: IFFALSE 1131
// begin vc_engine = 1 ;
1016: LD_ADDR_OWVAR 39
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// vc_control = 1 ;
1024: LD_ADDR_OWVAR 38
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// vc_weapon = 12 ;
1032: LD_ADDR_OWVAR 40
1036: PUSH
1037: LD_INT 12
1039: ST_TO_ADDR
// vc_chassis = 3 ;
1040: LD_ADDR_OWVAR 37
1044: PUSH
1045: LD_INT 3
1047: ST_TO_ADDR
// veh = CreateVehicle ;
1048: LD_ADDR_VAR 0 4
1052: PUSH
1053: CALL_OW 45
1057: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1070: LD_VAR 0 4
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 0
1080: PPUSH
1081: CALL_OW 49
// if count mod 2 = 0 then
1085: LD_VAR 0 6
1089: PUSH
1090: LD_INT 2
1092: MOD
1093: PUSH
1094: LD_INT 0
1096: EQUAL
1097: IFFALSE 1116
// AddCargo ( veh , 1 , 100 ) else
1099: LD_VAR 0 4
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: LD_INT 100
1109: PPUSH
1110: CALL_OW 291
1114: GO 1131
// AddCargo ( veh , 3 , 100 ) end ;
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: LD_INT 100
1126: PPUSH
1127: CALL_OW 291
// if count >= 3 then
1131: LD_VAR 0 6
1135: PUSH
1136: LD_INT 3
1138: GREATEREQUAL
1139: IFFALSE 1233
// begin vc_engine = 1 ;
1141: LD_ADDR_OWVAR 39
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// vc_control = 1 ;
1149: LD_ADDR_OWVAR 38
1153: PUSH
1154: LD_INT 1
1156: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1157: LD_ADDR_OWVAR 40
1161: PUSH
1162: LD_INT 3
1164: PUSH
1165: LD_INT 4
1167: PUSH
1168: LD_INT 5
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 1
1178: PPUSH
1179: LD_INT 3
1181: PPUSH
1182: CALL_OW 12
1186: ARRAY
1187: ST_TO_ADDR
// vc_chassis = 3 ;
1188: LD_ADDR_OWVAR 37
1192: PUSH
1193: LD_INT 3
1195: ST_TO_ADDR
// veh = CreateVehicle ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: CALL_OW 45
1205: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1206: LD_VAR 0 4
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1218: LD_VAR 0 4
1222: PPUSH
1223: LD_INT 2
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ; count = count + 1 ;
1233: LD_ADDR_VAR 0 6
1237: PUSH
1238: LD_VAR 0 6
1242: PUSH
1243: LD_INT 1
1245: PLUS
1246: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1247: LD_VAR 0 2
1251: PPUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: CALL_OW 52
// end ;
1261: GO 1003
1263: POP
1264: POP
// for i in others10 do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 21
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1402
// begin vc_engine = 1 ;
1278: LD_ADDR_OWVAR 39
1282: PUSH
1283: LD_INT 1
1285: ST_TO_ADDR
// vc_control = 1 ;
1286: LD_ADDR_OWVAR 38
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1294: LD_ADDR_OWVAR 40
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 4
1304: PUSH
1305: LD_INT 5
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 1
1315: PPUSH
1316: LD_INT 3
1318: PPUSH
1319: CALL_OW 12
1323: ARRAY
1324: ST_TO_ADDR
// vc_chassis = 3 ;
1325: LD_ADDR_OWVAR 37
1329: PUSH
1330: LD_INT 3
1332: ST_TO_ADDR
// veh = CreateVehicle ;
1333: LD_ADDR_VAR 0 4
1337: PUSH
1338: CALL_OW 45
1342: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1343: LD_VAR 0 4
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1355: LD_VAR 0 4
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1370: LD_ADDR_EXP 28
1374: PUSH
1375: LD_EXP 28
1379: PUSH
1380: LD_VAR 0 4
1384: ADD
1385: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1386: LD_VAR 0 2
1390: PPUSH
1391: LD_VAR 0 4
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1275
1402: POP
1403: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1404: LD_INT 22
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 21
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PPUSH
1428: CALL_OW 69
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL_OW 336
// end ;
1440: LD_VAR 0 1
1444: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1445: LD_INT 0
1447: PPUSH
1448: PPUSH
1449: PPUSH
1450: PPUSH
1451: PPUSH
// uc_side = 1 ;
1452: LD_ADDR_OWVAR 20
1456: PUSH
1457: LD_INT 1
1459: ST_TO_ADDR
// uc_nation = 1 ;
1460: LD_ADDR_OWVAR 21
1464: PUSH
1465: LD_INT 1
1467: ST_TO_ADDR
// for i := 1 to 10 do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: DOUBLE
1474: LD_INT 1
1476: DEC
1477: ST_TO_ADDR
1478: LD_INT 10
1480: PUSH
1481: FOR_TO
1482: IFFALSE 1664
// begin vc_engine = 1 ;
1484: LD_ADDR_OWVAR 39
1488: PUSH
1489: LD_INT 1
1491: ST_TO_ADDR
// vc_control = 1 ;
1492: LD_ADDR_OWVAR 38
1496: PUSH
1497: LD_INT 1
1499: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1500: LD_ADDR_OWVAR 40
1504: PUSH
1505: LD_INT 3
1507: PUSH
1508: LD_INT 4
1510: PUSH
1511: LD_INT 5
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 1
1525: PPUSH
1526: LD_INT 4
1528: PPUSH
1529: CALL_OW 12
1533: ARRAY
1534: ST_TO_ADDR
// vc_chassis = 3 ;
1535: LD_ADDR_OWVAR 37
1539: PUSH
1540: LD_INT 3
1542: ST_TO_ADDR
// veh = CreateVehicle ;
1543: LD_ADDR_VAR 0 3
1547: PUSH
1548: CALL_OW 45
1552: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1565: LD_VAR 0 3
1569: PPUSH
1570: LD_INT 2
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1580: LD_ADDR_EXP 28
1584: PUSH
1585: LD_EXP 28
1589: PUSH
1590: LD_VAR 0 3
1594: ADD
1595: ST_TO_ADDR
// if vc_weapon = 12 then
1596: LD_OWVAR 40
1600: PUSH
1601: LD_INT 12
1603: EQUAL
1604: IFFALSE 1662
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1606: LD_ADDR_VAR 0 4
1610: PUSH
1611: LD_INT 5
1613: PPUSH
1614: LD_INT 10
1616: PPUSH
1617: CALL_OW 12
1621: PUSH
1622: LD_INT 10
1624: MUL
1625: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1626: LD_VAR 0 3
1630: PPUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 1
1643: PPUSH
1644: LD_INT 2
1646: PPUSH
1647: CALL_OW 12
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 291
// end ; end ;
1662: GO 1481
1664: POP
1665: POP
// end ;
1666: LD_VAR 0 1
1670: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1671: LD_INT 0
1673: PPUSH
1674: PPUSH
1675: PPUSH
// uc_side = 4 ;
1676: LD_ADDR_OWVAR 20
1680: PUSH
1681: LD_INT 4
1683: ST_TO_ADDR
// uc_nation = 1 ;
1684: LD_ADDR_OWVAR 21
1688: PUSH
1689: LD_INT 1
1691: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1692: LD_ADDR_EXP 11
1696: PUSH
1697: LD_STRING Simms
1699: PPUSH
1700: LD_INT 0
1702: PPUSH
1703: CALL 9283 0 2
1707: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1708: LD_ADDR_EXP 12
1712: PUSH
1713: LD_STRING 08_Denis
1715: PPUSH
1716: LD_INT 1
1718: PPUSH
1719: CALL 9283 0 2
1723: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1724: LD_ADDR_EXP 13
1728: PUSH
1729: LD_STRING 08_Joan
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: CALL 9283 0 2
1739: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1740: LD_ADDR_EXP 14
1744: PUSH
1745: LD_STRING Khatam
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL 9283 0 2
1755: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1756: LD_ADDR_EXP 15
1760: PUSH
1761: LD_STRING Gladstone
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: CALL 9283 0 2
1771: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1772: LD_ADDR_EXP 17
1776: PUSH
1777: LD_STRING DeltaDoctor
1779: PPUSH
1780: LD_INT 1
1782: PPUSH
1783: CALL 9283 0 2
1787: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1788: LD_STRING 08_Frank
1790: PPUSH
1791: CALL_OW 28
1795: PUSH
1796: LD_INT 1
1798: EQUAL
1799: IFFALSE 1817
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1801: LD_ADDR_EXP 8
1805: PUSH
1806: LD_STRING Yamoko
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL 9283 0 2
1816: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1817: LD_ADDR_EXP 22
1821: PUSH
1822: LD_STRING 09_others
1824: PPUSH
1825: CALL_OW 31
1829: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1830: LD_ADDR_EXP 23
1834: PUSH
1835: LD_STRING 09_apes
1837: PPUSH
1838: CALL_OW 31
1842: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1843: LD_EXP 11
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1858: LD_EXP 12
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1873: LD_EXP 13
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1888: LD_EXP 14
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1903: LD_EXP 15
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1918: LD_EXP 17
1922: PPUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1933: LD_EXP 8
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1948: LD_EXP 11
1952: PUSH
1953: LD_EXP 14
1957: PUSH
1958: LD_EXP 12
1962: PUSH
1963: LD_EXP 15
1967: PUSH
1968: LD_EXP 17
1972: PUSH
1973: LD_EXP 13
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PPUSH
1986: LD_INT 4
1988: PPUSH
1989: CALL_OW 336
// if others09 > 2 then
1993: LD_EXP 22
1997: PUSH
1998: LD_INT 2
2000: GREATER
2001: IFFALSE 2064
// begin for i := 1 to 3 do
2003: LD_ADDR_VAR 0 2
2007: PUSH
2008: DOUBLE
2009: LD_INT 1
2011: DEC
2012: ST_TO_ADDR
2013: LD_INT 3
2015: PUSH
2016: FOR_TO
2017: IFFALSE 2060
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2019: LD_EXP 22
2023: PUSH
2024: LD_VAR 0 2
2028: ARRAY
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2040: LD_EXP 22
2044: PUSH
2045: LD_VAR 0 2
2049: ARRAY
2050: PPUSH
2051: LD_INT 2
2053: PPUSH
2054: CALL_OW 336
// end ;
2058: GO 2016
2060: POP
2061: POP
// end else
2062: GO 2108
// begin for i in others09 do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_EXP 22
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2106
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_INT 1
2084: PPUSH
2085: LD_INT 0
2087: PPUSH
2088: CALL_OW 49
// SetClass ( i , 2 ) ;
2092: LD_VAR 0 2
2096: PPUSH
2097: LD_INT 2
2099: PPUSH
2100: CALL_OW 336
// end ;
2104: GO 2074
2106: POP
2107: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2108: LD_INT 22
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 25
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PUSH
2137: LD_INT 0
2139: EQUAL
2140: IFFALSE 2258
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2142: LD_ADDR_VAR 0 3
2146: PUSH
2147: LD_INT 22
2149: PUSH
2150: LD_INT 4
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 25
2159: PUSH
2160: LD_INT 2
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 69
2175: PUSH
2176: LD_EXP 11
2180: PUSH
2181: LD_EXP 14
2185: PUSH
2186: LD_EXP 12
2190: PUSH
2191: LD_EXP 15
2195: PUSH
2196: LD_EXP 17
2200: PUSH
2201: LD_EXP 13
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: DIFF
2214: ST_TO_ADDR
// if not tmp then
2215: LD_VAR 0 3
2219: NOT
2220: IFFALSE 2242
// begin if Denis then
2222: LD_EXP 12
2226: IFFALSE 2240
// SetClass ( Denis , 2 ) ;
2228: LD_EXP 12
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: CALL_OW 336
// exit ;
2240: GO 2408
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: ARRAY
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 336
// end ; for i in ape09 do
2258: LD_ADDR_VAR 0 2
2262: PUSH
2263: LD_EXP 23
2267: PUSH
2268: FOR_IN
2269: IFFALSE 2288
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2271: LD_VAR 0 2
2275: PPUSH
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 0
2281: PPUSH
2282: CALL_OW 49
2286: GO 2268
2288: POP
2289: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2290: LD_INT 22
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PPUSH
2319: LD_INT 0
2321: PPUSH
2322: LD_INT 101
2324: PPUSH
2325: LD_INT 30
2327: PPUSH
2328: LD_INT 2
2330: PPUSH
2331: CALL_OW 205
// uc_side = 1 ;
2335: LD_ADDR_OWVAR 20
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// hc_class := 1 ;
2343: LD_ADDR_OWVAR 28
2347: PUSH
2348: LD_INT 1
2350: ST_TO_ADDR
// hc_sex := sex_female ;
2351: LD_ADDR_OWVAR 27
2355: PUSH
2356: LD_INT 2
2358: ST_TO_ADDR
// hc_gallery :=  ;
2359: LD_ADDR_OWVAR 33
2363: PUSH
2364: LD_STRING 
2366: ST_TO_ADDR
// hc_name :=  ;
2367: LD_ADDR_OWVAR 26
2371: PUSH
2372: LD_STRING 
2374: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2375: LD_ADDR_OWVAR 31
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 7
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// AmScout = CreateHuman ;
2398: LD_ADDR_EXP 18
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// end ;
2408: LD_VAR 0 1
2412: RET
// export function PrepareCornell ; begin
2413: LD_INT 0
2415: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2416: LD_INT 4
2418: PPUSH
2419: LD_INT 4
2421: PPUSH
2422: CALL_OW 343
// uc_side = 4 ;
2426: LD_ADDR_OWVAR 20
2430: PUSH
2431: LD_INT 4
2433: ST_TO_ADDR
// uc_nation = 1 ;
2434: LD_ADDR_OWVAR 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2442: LD_ADDR_EXP 19
2446: PUSH
2447: LD_STRING 03_Cornel
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL 9283 0 2
2457: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2458: LD_EXP 19
2462: PPUSH
2463: LD_INT 8
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2473: LD_EXP 19
2477: PPUSH
2478: LD_INT 350
2480: PPUSH
2481: CALL_OW 234
// if IsInUnit ( JMM ) then
2485: LD_EXP 1
2489: PPUSH
2490: CALL_OW 310
2494: IFFALSE 2537
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2496: LD_EXP 19
2500: PPUSH
2501: LD_EXP 1
2505: PPUSH
2506: CALL_OW 310
2510: PPUSH
2511: CALL_OW 250
2515: PPUSH
2516: LD_EXP 1
2520: PPUSH
2521: CALL_OW 310
2525: PPUSH
2526: CALL_OW 251
2530: PPUSH
2531: CALL_OW 111
2535: GO 2566
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2537: LD_EXP 19
2541: PPUSH
2542: LD_EXP 1
2546: PPUSH
2547: CALL_OW 250
2551: PPUSH
2552: LD_EXP 1
2556: PPUSH
2557: CALL_OW 251
2561: PPUSH
2562: CALL_OW 111
// end ; end_of_file
2566: LD_VAR 0 1
2570: RET
// export function PrepareRussians ; var i , un ; begin
2571: LD_INT 0
2573: PPUSH
2574: PPUSH
2575: PPUSH
// uc_side = 3 ;
2576: LD_ADDR_OWVAR 20
2580: PUSH
2581: LD_INT 3
2583: ST_TO_ADDR
// uc_nation = 3 ;
2584: LD_ADDR_OWVAR 21
2588: PUSH
2589: LD_INT 3
2591: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2592: LD_ADDR_EXP 25
2596: PUSH
2597: LD_STRING Tsaritsyn
2599: PPUSH
2600: LD_INT 0
2602: PPUSH
2603: CALL 9283 0 2
2607: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2608: LD_EXP 25
2612: PPUSH
2613: LD_INT 3
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 49
// for i = 1 to 14 do
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: DOUBLE
2629: LD_INT 1
2631: DEC
2632: ST_TO_ADDR
2633: LD_INT 14
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2723
// begin uc_side = 3 ;
2639: LD_ADDR_OWVAR 20
2643: PUSH
2644: LD_INT 3
2646: ST_TO_ADDR
// uc_nation = 3 ;
2647: LD_ADDR_OWVAR 21
2651: PUSH
2652: LD_INT 3
2654: ST_TO_ADDR
// hc_gallery =  ;
2655: LD_ADDR_OWVAR 33
2659: PUSH
2660: LD_STRING 
2662: ST_TO_ADDR
// hc_name =  ;
2663: LD_ADDR_OWVAR 26
2667: PUSH
2668: LD_STRING 
2670: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2671: LD_INT 0
2673: PPUSH
2674: LD_INT 1
2676: PPUSH
2677: LD_EXP 36
2681: PPUSH
2682: LD_EXP 37
2686: PPUSH
2687: CALL_OW 12
2691: PPUSH
2692: CALL_OW 380
// un = CreateHuman ;
2696: LD_ADDR_VAR 0 3
2700: PUSH
2701: CALL_OW 44
2705: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2706: LD_VAR 0 3
2710: PPUSH
2711: LD_INT 3
2713: PPUSH
2714: LD_INT 0
2716: PPUSH
2717: CALL_OW 49
// end ;
2721: GO 2636
2723: POP
2724: POP
// for i = 1 to 6 do
2725: LD_ADDR_VAR 0 2
2729: PUSH
2730: DOUBLE
2731: LD_INT 1
2733: DEC
2734: ST_TO_ADDR
2735: LD_INT 6
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2825
// begin uc_side = 3 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// uc_nation = 3 ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// hc_gallery =  ;
2757: LD_ADDR_OWVAR 33
2761: PUSH
2762: LD_STRING 
2764: ST_TO_ADDR
// hc_name =  ;
2765: LD_ADDR_OWVAR 26
2769: PUSH
2770: LD_STRING 
2772: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2773: LD_INT 0
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: LD_EXP 36
2783: PPUSH
2784: LD_EXP 37
2788: PPUSH
2789: CALL_OW 12
2793: PPUSH
2794: CALL_OW 380
// un = CreateHuman ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: CALL_OW 44
2807: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2808: LD_VAR 0 3
2812: PPUSH
2813: LD_INT 3
2815: PPUSH
2816: LD_INT 0
2818: PPUSH
2819: CALL_OW 49
// end ;
2823: GO 2738
2825: POP
2826: POP
// for i = 1 to 6 do
2827: LD_ADDR_VAR 0 2
2831: PUSH
2832: DOUBLE
2833: LD_INT 1
2835: DEC
2836: ST_TO_ADDR
2837: LD_INT 6
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2927
// begin uc_side = 3 ;
2843: LD_ADDR_OWVAR 20
2847: PUSH
2848: LD_INT 3
2850: ST_TO_ADDR
// uc_nation = 3 ;
2851: LD_ADDR_OWVAR 21
2855: PUSH
2856: LD_INT 3
2858: ST_TO_ADDR
// hc_gallery =  ;
2859: LD_ADDR_OWVAR 33
2863: PUSH
2864: LD_STRING 
2866: ST_TO_ADDR
// hc_name =  ;
2867: LD_ADDR_OWVAR 26
2871: PUSH
2872: LD_STRING 
2874: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2875: LD_INT 0
2877: PPUSH
2878: LD_INT 3
2880: PPUSH
2881: LD_EXP 36
2885: PPUSH
2886: LD_EXP 37
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: CALL_OW 380
// un = CreateHuman ;
2900: LD_ADDR_VAR 0 3
2904: PUSH
2905: CALL_OW 44
2909: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 3
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 49
// end ;
2925: GO 2840
2927: POP
2928: POP
// for i = 1 to 4 do
2929: LD_ADDR_VAR 0 2
2933: PUSH
2934: DOUBLE
2935: LD_INT 1
2937: DEC
2938: ST_TO_ADDR
2939: LD_INT 4
2941: PUSH
2942: FOR_TO
2943: IFFALSE 3029
// begin uc_side = 3 ;
2945: LD_ADDR_OWVAR 20
2949: PUSH
2950: LD_INT 3
2952: ST_TO_ADDR
// uc_nation = 3 ;
2953: LD_ADDR_OWVAR 21
2957: PUSH
2958: LD_INT 3
2960: ST_TO_ADDR
// hc_gallery =  ;
2961: LD_ADDR_OWVAR 33
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// hc_name =  ;
2969: LD_ADDR_OWVAR 26
2973: PUSH
2974: LD_STRING 
2976: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2977: LD_INT 0
2979: PPUSH
2980: LD_INT 4
2982: PPUSH
2983: LD_EXP 36
2987: PPUSH
2988: LD_EXP 37
2992: PPUSH
2993: CALL_OW 12
2997: PPUSH
2998: CALL_OW 380
// un = CreateHuman ;
3002: LD_ADDR_VAR 0 3
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3012: LD_VAR 0 3
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 49
// end ;
3027: GO 2942
3029: POP
3030: POP
// end ; end_of_file
3031: LD_VAR 0 1
3035: RET
// export function PrepareArabianCommander ; begin
3036: LD_INT 0
3038: PPUSH
// uc_side = 2 ;
3039: LD_ADDR_OWVAR 20
3043: PUSH
3044: LD_INT 2
3046: ST_TO_ADDR
// uc_nation = 2 ;
3047: LD_ADDR_OWVAR 21
3051: PUSH
3052: LD_INT 2
3054: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3055: LD_ADDR_EXP 26
3059: PUSH
3060: LD_STRING Dietrich
3062: PPUSH
3063: CALL_OW 25
3067: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3068: LD_EXP 26
3072: PPUSH
3073: LD_INT 4
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// end ;
3083: LD_VAR 0 1
3087: RET
// export function PrepareArabian ; var i , un , veh ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// uc_side := 2 ;
3094: LD_ADDR_OWVAR 20
3098: PUSH
3099: LD_INT 2
3101: ST_TO_ADDR
// uc_nation := 2 ;
3102: LD_ADDR_OWVAR 21
3106: PUSH
3107: LD_INT 2
3109: ST_TO_ADDR
// if not Ahmed then
3110: LD_EXP 27
3114: NOT
3115: IFFALSE 3183
// begin InitHc ;
3117: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3121: LD_INT 1
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_EXP 36
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: CALL_OW 12
3145: PPUSH
3146: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3150: LD_ADDR_OWVAR 26
3154: PUSH
3155: LD_STRING Ahmed Abbasid
3157: ST_TO_ADDR
// Ahmed := CreateHuman ;
3158: LD_ADDR_EXP 27
3162: PUSH
3163: CALL_OW 44
3167: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3168: LD_EXP 27
3172: PPUSH
3173: LD_INT 4
3175: PPUSH
3176: LD_INT 0
3178: PPUSH
3179: CALL_OW 49
// end ; for i = 1 to 3 do
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: DOUBLE
3189: LD_INT 1
3191: DEC
3192: ST_TO_ADDR
3193: LD_INT 3
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3283
// begin uc_side = 2 ;
3199: LD_ADDR_OWVAR 20
3203: PUSH
3204: LD_INT 2
3206: ST_TO_ADDR
// uc_nation = 2 ;
3207: LD_ADDR_OWVAR 21
3211: PUSH
3212: LD_INT 2
3214: ST_TO_ADDR
// hc_gallery =  ;
3215: LD_ADDR_OWVAR 33
3219: PUSH
3220: LD_STRING 
3222: ST_TO_ADDR
// hc_name =  ;
3223: LD_ADDR_OWVAR 26
3227: PUSH
3228: LD_STRING 
3230: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_EXP 36
3241: PPUSH
3242: LD_EXP 37
3246: PPUSH
3247: CALL_OW 12
3251: PPUSH
3252: CALL_OW 380
// un = CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 4
3273: PPUSH
3274: LD_INT 0
3276: PPUSH
3277: CALL_OW 49
// end ;
3281: GO 3196
3283: POP
3284: POP
// for i = 1 to 6 do
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: DOUBLE
3291: LD_INT 1
3293: DEC
3294: ST_TO_ADDR
3295: LD_INT 6
3297: PUSH
3298: FOR_TO
3299: IFFALSE 3385
// begin uc_side = 2 ;
3301: LD_ADDR_OWVAR 20
3305: PUSH
3306: LD_INT 2
3308: ST_TO_ADDR
// uc_nation = 2 ;
3309: LD_ADDR_OWVAR 21
3313: PUSH
3314: LD_INT 2
3316: ST_TO_ADDR
// hc_gallery =  ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// hc_name =  ;
3325: LD_ADDR_OWVAR 26
3329: PUSH
3330: LD_STRING 
3332: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3333: LD_INT 0
3335: PPUSH
3336: LD_INT 2
3338: PPUSH
3339: LD_EXP 36
3343: PPUSH
3344: LD_EXP 37
3348: PPUSH
3349: CALL_OW 12
3353: PPUSH
3354: CALL_OW 380
// un = CreateHuman ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: CALL_OW 44
3367: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: LD_INT 4
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 49
// end ;
3383: GO 3298
3385: POP
3386: POP
// for i = 1 to 6 do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: DOUBLE
3393: LD_INT 1
3395: DEC
3396: ST_TO_ADDR
3397: LD_INT 6
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3487
// begin uc_side = 2 ;
3403: LD_ADDR_OWVAR 20
3407: PUSH
3408: LD_INT 2
3410: ST_TO_ADDR
// uc_nation = 2 ;
3411: LD_ADDR_OWVAR 21
3415: PUSH
3416: LD_INT 2
3418: ST_TO_ADDR
// hc_gallery =  ;
3419: LD_ADDR_OWVAR 33
3423: PUSH
3424: LD_STRING 
3426: ST_TO_ADDR
// hc_name =  ;
3427: LD_ADDR_OWVAR 26
3431: PUSH
3432: LD_STRING 
3434: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3435: LD_INT 0
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: LD_EXP 36
3445: PPUSH
3446: LD_EXP 37
3450: PPUSH
3451: CALL_OW 12
3455: PPUSH
3456: CALL_OW 380
// un = CreateHuman ;
3460: LD_ADDR_VAR 0 3
3464: PUSH
3465: CALL_OW 44
3469: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3470: LD_VAR 0 3
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: LD_INT 0
3480: PPUSH
3481: CALL_OW 49
// end ;
3485: GO 3400
3487: POP
3488: POP
// for i = 1 to 4 do
3489: LD_ADDR_VAR 0 2
3493: PUSH
3494: DOUBLE
3495: LD_INT 1
3497: DEC
3498: ST_TO_ADDR
3499: LD_INT 4
3501: PUSH
3502: FOR_TO
3503: IFFALSE 3589
// begin uc_side = 2 ;
3505: LD_ADDR_OWVAR 20
3509: PUSH
3510: LD_INT 2
3512: ST_TO_ADDR
// uc_nation = 2 ;
3513: LD_ADDR_OWVAR 21
3517: PUSH
3518: LD_INT 2
3520: ST_TO_ADDR
// hc_gallery =  ;
3521: LD_ADDR_OWVAR 33
3525: PUSH
3526: LD_STRING 
3528: ST_TO_ADDR
// hc_name =  ;
3529: LD_ADDR_OWVAR 26
3533: PUSH
3534: LD_STRING 
3536: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3537: LD_INT 0
3539: PPUSH
3540: LD_INT 4
3542: PPUSH
3543: LD_EXP 36
3547: PPUSH
3548: LD_EXP 37
3552: PPUSH
3553: CALL_OW 12
3557: PPUSH
3558: CALL_OW 380
// un = CreateHuman ;
3562: LD_ADDR_VAR 0 3
3566: PUSH
3567: CALL_OW 44
3571: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL_OW 49
// end ;
3587: GO 3502
3589: POP
3590: POP
// for i = 1 to 2 do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: DOUBLE
3597: LD_INT 1
3599: DEC
3600: ST_TO_ADDR
3601: LD_INT 2
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3735
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: LD_INT 22
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 21
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PUSH
3632: LD_INT 58
3634: PUSH
3635: EMPTY
3636: LIST
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: ST_TO_ADDR
// uc_side = 2 ;
3648: LD_ADDR_OWVAR 20
3652: PUSH
3653: LD_INT 2
3655: ST_TO_ADDR
// uc_nation = 2 ;
3656: LD_ADDR_OWVAR 21
3660: PUSH
3661: LD_INT 2
3663: ST_TO_ADDR
// hc_gallery =  ;
3664: LD_ADDR_OWVAR 33
3668: PUSH
3669: LD_STRING 
3671: ST_TO_ADDR
// hc_name =  ;
3672: LD_ADDR_OWVAR 26
3676: PUSH
3677: LD_STRING 
3679: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3680: LD_INT 0
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: LD_EXP 36
3690: PPUSH
3691: LD_EXP 37
3695: PPUSH
3696: CALL_OW 12
3700: PPUSH
3701: CALL_OW 380
// un = CreateHuman ;
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: CALL_OW 44
3714: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3715: LD_VAR 0 3
3719: PPUSH
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: CALL_OW 52
// end ;
3733: GO 3604
3735: POP
3736: POP
// end ;
3737: LD_VAR 0 1
3741: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3742: LD_INT 0
3744: PPUSH
3745: PPUSH
3746: PPUSH
3747: PPUSH
3748: PPUSH
3749: PPUSH
// for i := 1 to 2 do
3750: LD_ADDR_VAR 0 2
3754: PUSH
3755: DOUBLE
3756: LD_INT 1
3758: DEC
3759: ST_TO_ADDR
3760: LD_INT 2
3762: PUSH
3763: FOR_TO
3764: IFFALSE 3890
// begin uc_side = 5 ;
3766: LD_ADDR_OWVAR 20
3770: PUSH
3771: LD_INT 5
3773: ST_TO_ADDR
// uc_nation = 2 ;
3774: LD_ADDR_OWVAR 21
3778: PUSH
3779: LD_INT 2
3781: ST_TO_ADDR
// vc_chassis := 31 ;
3782: LD_ADDR_OWVAR 37
3786: PUSH
3787: LD_INT 31
3789: ST_TO_ADDR
// vc_control := control_rider ;
3790: LD_ADDR_OWVAR 38
3794: PUSH
3795: LD_INT 4
3797: ST_TO_ADDR
// animal := CreateVehicle ;
3798: LD_ADDR_VAR 0 3
3802: PUSH
3803: CALL_OW 45
3807: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3808: LD_VAR 0 3
3812: PPUSH
3813: LD_INT 7
3815: PPUSH
3816: LD_INT 0
3818: PPUSH
3819: CALL_OW 49
// hc_gallery =  ;
3823: LD_ADDR_OWVAR 33
3827: PUSH
3828: LD_STRING 
3830: ST_TO_ADDR
// hc_name =  ;
3831: LD_ADDR_OWVAR 26
3835: PUSH
3836: LD_STRING 
3838: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3839: LD_INT 0
3841: PPUSH
3842: LD_INT 11
3844: PPUSH
3845: LD_EXP 36
3849: PPUSH
3850: LD_EXP 37
3854: PPUSH
3855: CALL_OW 12
3859: PPUSH
3860: CALL_OW 380
// un = CreateHuman ;
3864: LD_ADDR_VAR 0 4
3868: PUSH
3869: CALL_OW 44
3873: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_VAR 0 3
3883: PPUSH
3884: CALL_OW 52
// end ;
3888: GO 3763
3890: POP
3891: POP
// repeat wait ( 0 0$1 ) ;
3892: LD_INT 35
3894: PPUSH
3895: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3899: LD_ADDR_VAR 0 5
3903: PUSH
3904: LD_INT 22
3906: PUSH
3907: LD_INT 1
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: PPUSH
3914: CALL_OW 69
3918: PPUSH
3919: LD_VAR 0 2
3923: PPUSH
3924: CALL_OW 74
3928: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3929: LD_ADDR_VAR 0 6
3933: PUSH
3934: LD_INT 22
3936: PUSH
3937: LD_INT 1
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 2
3946: PUSH
3947: LD_INT 59
3949: PUSH
3950: EMPTY
3951: LIST
3952: PUSH
3953: LD_INT 21
3955: PUSH
3956: LD_INT 1
3958: PUSH
3959: EMPTY
3960: LIST
3961: LIST
3962: PUSH
3963: LD_INT 21
3965: PUSH
3966: LD_INT 2
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: PUSH
3979: EMPTY
3980: LIST
3981: LIST
3982: PUSH
3983: EMPTY
3984: LIST
3985: PPUSH
3986: CALL_OW 69
3990: PPUSH
3991: LD_VAR 0 2
3995: PPUSH
3996: CALL_OW 74
4000: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4001: LD_ADDR_VAR 0 2
4005: PUSH
4006: LD_INT 22
4008: PUSH
4009: LD_INT 5
4011: PUSH
4012: EMPTY
4013: LIST
4014: LIST
4015: PUSH
4016: LD_INT 25
4018: PUSH
4019: LD_INT 11
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4106
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4038: LD_VAR 0 2
4042: PPUSH
4043: LD_VAR 0 5
4047: PPUSH
4048: CALL_OW 296
4052: PUSH
4053: LD_INT 8
4055: PLUS
4056: PUSH
4057: LD_VAR 0 2
4061: PPUSH
4062: LD_VAR 0 6
4066: PPUSH
4067: CALL_OW 296
4071: LESS
4072: IFFALSE 4090
// ComAttackUnit ( i , target1 ) else
4074: LD_VAR 0 2
4078: PPUSH
4079: LD_VAR 0 5
4083: PPUSH
4084: CALL_OW 115
4088: GO 4104
// ComAttackUnit ( i , target2 ) ;
4090: LD_VAR 0 2
4094: PPUSH
4095: LD_VAR 0 6
4099: PPUSH
4100: CALL_OW 115
// end ;
4104: GO 4035
4106: POP
4107: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4108: LD_INT 22
4110: PUSH
4111: LD_INT 5
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: LD_INT 25
4120: PUSH
4121: LD_INT 11
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: PPUSH
4132: CALL_OW 69
4136: PUSH
4137: LD_INT 0
4139: EQUAL
4140: PUSH
4141: LD_INT 22
4143: PUSH
4144: LD_INT 1
4146: PUSH
4147: EMPTY
4148: LIST
4149: LIST
4150: PPUSH
4151: CALL_OW 69
4155: PUSH
4156: LD_INT 0
4158: EQUAL
4159: OR
4160: IFFALSE 3892
// end ; end_of_file
4162: LD_VAR 0 1
4166: RET
// every 1 do
4167: GO 4169
4169: DISABLE
// begin InGameOn ;
4170: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4174: LD_INT 1
4176: PPUSH
4177: LD_INT 19
4179: PPUSH
4180: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4184: LD_EXP 11
4188: PPUSH
4189: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4193: LD_INT 22
4195: PUSH
4196: LD_INT 4
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: PUSH
4203: LD_INT 25
4205: PUSH
4206: LD_INT 2
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: PUSH
4213: EMPTY
4214: LIST
4215: LIST
4216: PPUSH
4217: CALL_OW 69
4221: IFFALSE 4269
// begin repeat wait ( 0 0$1 ) ;
4223: LD_INT 35
4225: PPUSH
4226: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4230: LD_INT 22
4232: PUSH
4233: LD_INT 4
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 30
4242: PUSH
4243: LD_INT 0
4245: PUSH
4246: EMPTY
4247: LIST
4248: LIST
4249: PUSH
4250: EMPTY
4251: LIST
4252: LIST
4253: PPUSH
4254: CALL_OW 69
4258: IFFALSE 4223
// Wait ( 0 0$1 ) ;
4260: LD_INT 35
4262: PPUSH
4263: CALL_OW 67
// end else
4267: GO 4276
// Wait ( 0 0$3 ) ;
4269: LD_INT 105
4271: PPUSH
4272: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4276: LD_EXP 1
4280: PPUSH
4281: CALL_OW 310
4285: PPUSH
4286: CALL_OW 85
// Wait ( 0 0$1 ) ;
4290: LD_INT 35
4292: PPUSH
4293: CALL_OW 67
// if IsOk ( Gary ) then
4297: LD_EXP 10
4301: PPUSH
4302: CALL_OW 302
4306: IFFALSE 4344
// begin Say ( Gary , D2-Gary-1 ) ;
4308: LD_EXP 10
4312: PPUSH
4313: LD_STRING D2-Gary-1
4315: PPUSH
4316: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4320: LD_EXP 1
4324: PPUSH
4325: LD_STRING D2-JMM-1
4327: PPUSH
4328: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4332: LD_EXP 10
4336: PPUSH
4337: LD_STRING D2-Gary-2
4339: PPUSH
4340: CALL_OW 88
// end ; InGameOff ;
4344: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4348: LD_STRING M1
4350: PPUSH
4351: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4355: LD_INT 38
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 100
4363: PPUSH
4364: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4368: LD_INT 47
4370: PPUSH
4371: LD_INT 1
4373: PPUSH
4374: LD_INT 50
4376: PPUSH
4377: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4381: LD_INT 47
4383: PPUSH
4384: LD_INT 3
4386: PPUSH
4387: LD_INT 50
4389: PPUSH
4390: CALL_OW 291
// SaveForQuickRestart ;
4394: CALL_OW 22
// end ;
4398: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4399: LD_EXP 1
4403: PPUSH
4404: LD_EXP 11
4408: PPUSH
4409: CALL_OW 296
4413: PUSH
4414: LD_INT 15
4416: LESS
4417: IFFALSE 4883
4419: GO 4421
4421: DISABLE
// begin InGameOn ;
4422: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4426: LD_EXP 1
4430: PPUSH
4431: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4435: LD_EXP 1
4439: PPUSH
4440: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4444: LD_EXP 1
4448: PPUSH
4449: LD_EXP 11
4453: PPUSH
4454: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4458: LD_INT 35
4460: PPUSH
4461: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4465: LD_EXP 11
4469: PUSH
4470: LD_EXP 13
4474: PUSH
4475: LD_EXP 12
4479: PUSH
4480: LD_EXP 14
4484: PUSH
4485: LD_EXP 8
4489: PUSH
4490: EMPTY
4491: LIST
4492: LIST
4493: LIST
4494: LIST
4495: LIST
4496: PPUSH
4497: LD_EXP 1
4501: PPUSH
4502: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4506: LD_EXP 1
4510: PPUSH
4511: LD_EXP 11
4515: PPUSH
4516: CALL_OW 296
4520: PUSH
4521: LD_INT 5
4523: LESS
4524: IFFALSE 4458
// ComTurnUnit ( JMM , Simms ) ;
4526: LD_EXP 1
4530: PPUSH
4531: LD_EXP 11
4535: PPUSH
4536: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4540: LD_EXP 11
4544: PUSH
4545: LD_EXP 13
4549: PUSH
4550: LD_EXP 12
4554: PUSH
4555: LD_EXP 14
4559: PUSH
4560: EMPTY
4561: LIST
4562: LIST
4563: LIST
4564: LIST
4565: PPUSH
4566: LD_EXP 1
4570: PPUSH
4571: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4575: LD_EXP 1
4579: PUSH
4580: LD_EXP 11
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PPUSH
4589: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4593: LD_EXP 11
4597: PPUSH
4598: LD_STRING D2a-Sim-1
4600: PPUSH
4601: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4605: LD_EXP 1
4609: PPUSH
4610: LD_STRING D2a-JMM-1
4612: PPUSH
4613: CALL_OW 88
// if IsOk ( Joan ) then
4617: LD_EXP 13
4621: PPUSH
4622: CALL_OW 302
4626: IFFALSE 4678
// begin ComTurnUnit ( JMM , Joan ) ;
4628: LD_EXP 1
4632: PPUSH
4633: LD_EXP 13
4637: PPUSH
4638: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4642: LD_EXP 13
4646: PPUSH
4647: LD_STRING D2b-Joan-1
4649: PPUSH
4650: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4654: LD_EXP 1
4658: PPUSH
4659: LD_STRING D2b-JMM-1
4661: PPUSH
4662: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4666: LD_EXP 13
4670: PPUSH
4671: LD_STRING D2b-Joan-2
4673: PPUSH
4674: CALL_OW 88
// end ; if IsOk ( Denis ) then
4678: LD_EXP 12
4682: PPUSH
4683: CALL_OW 302
4687: IFFALSE 4715
// begin ComTurnUnit ( JMM , Denis ) ;
4689: LD_EXP 1
4693: PPUSH
4694: LD_EXP 12
4698: PPUSH
4699: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4703: LD_EXP 12
4707: PPUSH
4708: LD_STRING D2c-Den-1
4710: PPUSH
4711: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4715: LD_EXP 8
4719: PPUSH
4720: CALL_OW 302
4724: IFFALSE 4793
// begin repeat wait ( 0 0$1 ) ;
4726: LD_INT 35
4728: PPUSH
4729: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4733: LD_EXP 8
4737: PPUSH
4738: LD_EXP 1
4742: PPUSH
4743: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4747: LD_EXP 1
4751: PPUSH
4752: LD_EXP 8
4756: PPUSH
4757: CALL_OW 296
4761: PUSH
4762: LD_INT 5
4764: LESS
4765: IFFALSE 4726
// ComTurnUnit ( JMM , Kikuchi ) ;
4767: LD_EXP 1
4771: PPUSH
4772: LD_EXP 8
4776: PPUSH
4777: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4781: LD_EXP 8
4785: PPUSH
4786: LD_STRING D3b-Yam-1
4788: PPUSH
4789: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4793: LD_EXP 14
4797: PPUSH
4798: CALL_OW 302
4802: IFFALSE 4842
// begin ComTurnUnit ( JMM , Khatam ) ;
4804: LD_EXP 1
4808: PPUSH
4809: LD_EXP 14
4813: PPUSH
4814: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4818: LD_EXP 1
4822: PPUSH
4823: LD_STRING D2c-JMM-1
4825: PPUSH
4826: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4830: LD_EXP 14
4834: PPUSH
4835: LD_STRING D2c-Khat-1
4837: PPUSH
4838: CALL_OW 88
// end ; InGameOff ;
4842: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4846: LD_INT 22
4848: PUSH
4849: LD_INT 4
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PPUSH
4856: CALL_OW 69
4860: PPUSH
4861: LD_INT 1
4863: PPUSH
4864: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4868: LD_STRING M1a
4870: PPUSH
4871: CALL_OW 337
// joinEpsilon = 1 ;
4875: LD_ADDR_EXP 29
4879: PUSH
4880: LD_INT 1
4882: ST_TO_ADDR
// end ;
4883: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4884: LD_EXP 61
4888: PUSH
4889: LD_INT 1
4891: EQUAL
4892: IFFALSE 6024
4894: GO 4896
4896: DISABLE
4897: LD_INT 0
4899: PPUSH
4900: PPUSH
4901: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4902: LD_ADDR_VAR 0 1
4906: PUSH
4907: LD_INT 22
4909: PUSH
4910: LD_INT 1
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PUSH
4917: LD_INT 25
4919: PUSH
4920: LD_INT 4
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 26
4929: PUSH
4930: LD_INT 1
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: LIST
4941: PPUSH
4942: CALL_OW 69
4946: PUSH
4947: LD_EXP 1
4951: PUSH
4952: LD_EXP 2
4956: PUSH
4957: LD_EXP 3
4961: PUSH
4962: LD_EXP 4
4966: PUSH
4967: LD_EXP 5
4971: PUSH
4972: LD_EXP 6
4976: PUSH
4977: LD_EXP 7
4981: PUSH
4982: LD_EXP 8
4986: PUSH
4987: LD_EXP 9
4991: PUSH
4992: LD_EXP 10
4996: PUSH
4997: LD_EXP 11
5001: PUSH
5002: LD_EXP 12
5006: PUSH
5007: LD_EXP 13
5011: PUSH
5012: LD_EXP 14
5016: PUSH
5017: LD_EXP 15
5021: PUSH
5022: LD_EXP 16
5026: PUSH
5027: LD_EXP 17
5031: PUSH
5032: LD_EXP 18
5036: PUSH
5037: LD_EXP 19
5041: PUSH
5042: LD_EXP 24
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: LIST
5051: LIST
5052: LIST
5053: LIST
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: LIST
5067: LIST
5068: DIFF
5069: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5070: LD_ADDR_VAR 0 2
5074: PUSH
5075: LD_INT 22
5077: PUSH
5078: LD_INT 1
5080: PUSH
5081: EMPTY
5082: LIST
5083: LIST
5084: PUSH
5085: LD_INT 26
5087: PUSH
5088: LD_INT 1
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: PUSH
5095: LD_INT 2
5097: PUSH
5098: LD_INT 25
5100: PUSH
5101: LD_INT 1
5103: PUSH
5104: EMPTY
5105: LIST
5106: LIST
5107: PUSH
5108: LD_INT 25
5110: PUSH
5111: LD_INT 2
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 25
5120: PUSH
5121: LD_INT 3
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: EMPTY
5135: LIST
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 69
5143: PUSH
5144: LD_EXP 1
5148: PUSH
5149: LD_EXP 2
5153: PUSH
5154: LD_EXP 3
5158: PUSH
5159: LD_EXP 4
5163: PUSH
5164: LD_EXP 5
5168: PUSH
5169: LD_EXP 6
5173: PUSH
5174: LD_EXP 7
5178: PUSH
5179: LD_EXP 8
5183: PUSH
5184: LD_EXP 9
5188: PUSH
5189: LD_EXP 10
5193: PUSH
5194: LD_EXP 11
5198: PUSH
5199: LD_EXP 12
5203: PUSH
5204: LD_EXP 13
5208: PUSH
5209: LD_EXP 14
5213: PUSH
5214: LD_EXP 15
5218: PUSH
5219: LD_EXP 16
5223: PUSH
5224: LD_EXP 17
5228: PUSH
5229: LD_EXP 18
5233: PUSH
5234: LD_EXP 19
5238: PUSH
5239: LD_EXP 24
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: DIFF
5266: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5267: LD_EXP 10
5271: PUSH
5272: LD_VAR 0 2
5276: OR
5277: PUSH
5278: LD_EXP 17
5282: PUSH
5283: LD_VAR 0 1
5287: OR
5288: AND
5289: IFFALSE 5508
// begin DialogueOn ;
5291: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5295: LD_EXP 17
5299: PPUSH
5300: CALL_OW 302
5304: IFFALSE 5320
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5306: LD_EXP 17
5310: PPUSH
5311: LD_STRING D3-Sci1-1
5313: PPUSH
5314: CALL_OW 88
5318: GO 5332
// Say ( tmp1 , D3-Sci1-1 ) ;
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_STRING D3-Sci1-1
5327: PPUSH
5328: CALL_OW 88
// if IsOk ( Gary ) then
5332: LD_EXP 10
5336: PPUSH
5337: CALL_OW 302
5341: IFFALSE 5357
// Say ( Gary , D3-Gary-1 ) else
5343: LD_EXP 10
5347: PPUSH
5348: LD_STRING D3-Gary-1
5350: PPUSH
5351: CALL_OW 88
5355: GO 5369
// Say ( tmp2 , D3-Gary-1 ) ;
5357: LD_VAR 0 2
5361: PPUSH
5362: LD_STRING D3-Gary-1
5364: PPUSH
5365: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5369: LD_EXP 17
5373: PPUSH
5374: CALL_OW 302
5378: IFFALSE 5394
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5380: LD_EXP 17
5384: PPUSH
5385: LD_STRING D3-Sci1-2
5387: PPUSH
5388: CALL_OW 88
5392: GO 5406
// Say ( tmp1 , D3-Sci1-2 ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_STRING D3-Sci1-2
5401: PPUSH
5402: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5406: LD_EXP 1
5410: PPUSH
5411: LD_STRING D3-JMM-2
5413: PPUSH
5414: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5418: LD_EXP 17
5422: PPUSH
5423: CALL_OW 302
5427: IFFALSE 5443
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5429: LD_EXP 17
5433: PPUSH
5434: LD_STRING D3-Sci1-3
5436: PPUSH
5437: CALL_OW 88
5441: GO 5455
// Say ( tmp1 , D3-Sci1-3 ) ;
5443: LD_VAR 0 1
5447: PPUSH
5448: LD_STRING D3-Sci1-3
5450: PPUSH
5451: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5455: LD_EXP 1
5459: PPUSH
5460: LD_STRING D3-JMM-3
5462: PPUSH
5463: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5467: LD_EXP 17
5471: PPUSH
5472: CALL_OW 302
5476: IFFALSE 5492
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5478: LD_EXP 17
5482: PPUSH
5483: LD_STRING D3-Sci1-4
5485: PPUSH
5486: CALL_OW 88
5490: GO 5504
// Say ( tmp1 , D3-Sci1-4 ) ;
5492: LD_VAR 0 1
5496: PPUSH
5497: LD_STRING D3-Sci1-4
5499: PPUSH
5500: CALL_OW 88
// DialogueOff ;
5504: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5508: LD_INT 12
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: LD_INT 1
5516: PPUSH
5517: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5521: LD_INT 32
5523: PPUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_INT 1
5529: PPUSH
5530: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5534: LD_INT 12
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5547: LD_INT 33
5549: PPUSH
5550: LD_INT 1
5552: PPUSH
5553: LD_INT 1
5555: PPUSH
5556: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5560: LD_STRING M2
5562: PPUSH
5563: CALL_OW 337
// wait ( 3 3$0 ) ;
5567: LD_INT 6300
5569: PPUSH
5570: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5574: LD_INT 35
5576: PPUSH
5577: CALL_OW 67
// until not InBattle ( 1 ) ;
5581: LD_INT 1
5583: PPUSH
5584: CALL_OW 463
5588: NOT
5589: IFFALSE 5574
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5591: LD_EXP 11
5595: PPUSH
5596: CALL_OW 302
5600: PUSH
5601: LD_EXP 17
5605: PPUSH
5606: CALL_OW 302
5610: AND
5611: IFFALSE 5780
// begin DialogueOn ;
5613: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5617: LD_EXP 11
5621: PPUSH
5622: LD_STRING D3a-Sim-1
5624: PPUSH
5625: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5629: LD_EXP 17
5633: PPUSH
5634: LD_STRING D3a-Sci1-1
5636: PPUSH
5637: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5641: LD_EXP 11
5645: PPUSH
5646: LD_STRING D3a-Sim-2
5648: PPUSH
5649: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5653: LD_EXP 17
5657: PPUSH
5658: LD_STRING D3a-Sci1-2
5660: PPUSH
5661: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5665: LD_EXP 11
5669: PPUSH
5670: LD_STRING D3a-Sim-3
5672: PPUSH
5673: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5677: LD_EXP 17
5681: PPUSH
5682: LD_STRING D3a-Sci1-3
5684: PPUSH
5685: CALL_OW 88
// if IsOK ( Joan ) then
5689: LD_EXP 13
5693: PPUSH
5694: CALL_OW 302
5698: IFFALSE 5714
// Say ( Simms , D3a-Sim-4 ) else
5700: LD_EXP 11
5704: PPUSH
5705: LD_STRING D3a-Sim-4
5707: PPUSH
5708: CALL_OW 88
5712: GO 5726
// Say ( Simms , D3a-Sim-4a ) ;
5714: LD_EXP 11
5718: PPUSH
5719: LD_STRING D3a-Sim-4a
5721: PPUSH
5722: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5726: LD_EXP 17
5730: PPUSH
5731: LD_STRING D3a-Sci1-4
5733: PPUSH
5734: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5738: LD_EXP 11
5742: PPUSH
5743: LD_STRING D3a-Sim-5
5745: PPUSH
5746: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5750: LD_EXP 17
5754: PPUSH
5755: LD_STRING D3a-Sci1-5
5757: PPUSH
5758: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5762: LD_EXP 11
5766: PPUSH
5767: LD_STRING D3a-Sim-6
5769: PPUSH
5770: CALL_OW 88
// DialogueOff ;
5774: CALL_OW 7
// end else
5778: GO 6024
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5780: LD_ADDR_VAR 0 3
5784: PUSH
5785: LD_INT 22
5787: PUSH
5788: LD_INT 1
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 4
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: EMPTY
5806: LIST
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PUSH
5814: LD_EXP 11
5818: PUSH
5819: LD_EXP 14
5823: PUSH
5824: EMPTY
5825: LIST
5826: LIST
5827: DIFF
5828: ST_TO_ADDR
// if tmp3 > 0 then
5829: LD_VAR 0 3
5833: PUSH
5834: LD_INT 0
5836: GREATER
5837: IFFALSE 6024
// begin DialogueOn ;
5839: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5843: LD_EXP 11
5847: PPUSH
5848: LD_STRING D3a-Sim-1
5850: PPUSH
5851: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5855: LD_VAR 0 3
5859: PUSH
5860: LD_INT 1
5862: ARRAY
5863: PPUSH
5864: LD_STRING D3a-Sci1-1
5866: PPUSH
5867: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5871: LD_EXP 11
5875: PPUSH
5876: LD_STRING D3a-Sim-2
5878: PPUSH
5879: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5883: LD_VAR 0 3
5887: PUSH
5888: LD_INT 1
5890: ARRAY
5891: PPUSH
5892: LD_STRING D3a-Sci1-2
5894: PPUSH
5895: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5899: LD_EXP 11
5903: PPUSH
5904: LD_STRING D3a-Sim-3
5906: PPUSH
5907: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5911: LD_VAR 0 3
5915: PUSH
5916: LD_INT 1
5918: ARRAY
5919: PPUSH
5920: LD_STRING D3a-Sci1-3
5922: PPUSH
5923: CALL_OW 88
// if IsOK ( Joan ) then
5927: LD_EXP 13
5931: PPUSH
5932: CALL_OW 302
5936: IFFALSE 5952
// Say ( Simms , D3a-Sim-4 ) else
5938: LD_EXP 11
5942: PPUSH
5943: LD_STRING D3a-Sim-4
5945: PPUSH
5946: CALL_OW 88
5950: GO 5964
// Say ( Simms , D3a-Sim-4a ) ;
5952: LD_EXP 11
5956: PPUSH
5957: LD_STRING D3a-Sim-4a
5959: PPUSH
5960: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
5964: LD_VAR 0 3
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: LD_STRING D3a-Sci1-4
5975: PPUSH
5976: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5980: LD_EXP 11
5984: PPUSH
5985: LD_STRING D3a-Sim-5
5987: PPUSH
5988: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
5992: LD_VAR 0 3
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PPUSH
6001: LD_STRING D3a-Sci1-5
6003: PPUSH
6004: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6008: LD_EXP 11
6012: PPUSH
6013: LD_STRING D3a-Sim-6
6015: PPUSH
6016: CALL_OW 88
// DialogueOff ;
6020: CALL_OW 7
// end ; end ; end ;
6024: PPOPN 3
6026: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6027: LD_EXP 29
6031: PUSH
6032: LD_INT 1
6034: EQUAL
6035: IFFALSE 6355
6037: GO 6039
6039: DISABLE
6040: LD_INT 0
6042: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6043: LD_EXP 18
6047: PPUSH
6048: LD_STRING D4-FSol1-1
6050: PPUSH
6051: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6055: LD_STRING M3
6057: PPUSH
6058: CALL_OW 337
// PrepareRussians ;
6062: CALL 2571 0 0
// rnd = Rand ( 1 , 100 ) ;
6066: LD_ADDR_VAR 0 1
6070: PUSH
6071: LD_INT 1
6073: PPUSH
6074: LD_INT 100
6076: PPUSH
6077: CALL_OW 12
6081: ST_TO_ADDR
// if difficulty = 1 then
6082: LD_OWVAR 67
6086: PUSH
6087: LD_INT 1
6089: EQUAL
6090: IFFALSE 6173
// begin if rnd > 0 and rnd < 51 then
6092: LD_VAR 0 1
6096: PUSH
6097: LD_INT 0
6099: GREATER
6100: PUSH
6101: LD_VAR 0 1
6105: PUSH
6106: LD_INT 51
6108: LESS
6109: AND
6110: IFFALSE 6119
// BuildRussianBase ( 2 ) ;
6112: LD_INT 2
6114: PPUSH
6115: CALL 10009 0 1
// if rnd > 50 and rnd < 81 then
6119: LD_VAR 0 1
6123: PUSH
6124: LD_INT 50
6126: GREATER
6127: PUSH
6128: LD_VAR 0 1
6132: PUSH
6133: LD_INT 81
6135: LESS
6136: AND
6137: IFFALSE 6146
// BuildRussianBase ( 1 ) ;
6139: LD_INT 1
6141: PPUSH
6142: CALL 10009 0 1
// if rnd > 80 and rnd < 101 then
6146: LD_VAR 0 1
6150: PUSH
6151: LD_INT 80
6153: GREATER
6154: PUSH
6155: LD_VAR 0 1
6159: PUSH
6160: LD_INT 101
6162: LESS
6163: AND
6164: IFFALSE 6173
// BuildRussianBase ( 3 ) ;
6166: LD_INT 3
6168: PPUSH
6169: CALL 10009 0 1
// end ; if difficulty = 2 then
6173: LD_OWVAR 67
6177: PUSH
6178: LD_INT 2
6180: EQUAL
6181: IFFALSE 6264
// begin if rnd > 0 and rnd < 61 then
6183: LD_VAR 0 1
6187: PUSH
6188: LD_INT 0
6190: GREATER
6191: PUSH
6192: LD_VAR 0 1
6196: PUSH
6197: LD_INT 61
6199: LESS
6200: AND
6201: IFFALSE 6210
// BuildRussianBase ( 2 ) ;
6203: LD_INT 2
6205: PPUSH
6206: CALL 10009 0 1
// if rnd > 60 and rnd < 81 then
6210: LD_VAR 0 1
6214: PUSH
6215: LD_INT 60
6217: GREATER
6218: PUSH
6219: LD_VAR 0 1
6223: PUSH
6224: LD_INT 81
6226: LESS
6227: AND
6228: IFFALSE 6237
// BuildRussianBase ( 1 ) ;
6230: LD_INT 1
6232: PPUSH
6233: CALL 10009 0 1
// if rnd > 80 and rnd < 101 then
6237: LD_VAR 0 1
6241: PUSH
6242: LD_INT 80
6244: GREATER
6245: PUSH
6246: LD_VAR 0 1
6250: PUSH
6251: LD_INT 101
6253: LESS
6254: AND
6255: IFFALSE 6264
// BuildRussianBase ( 3 ) ;
6257: LD_INT 3
6259: PPUSH
6260: CALL 10009 0 1
// end ; if difficulty = 3 then
6264: LD_OWVAR 67
6268: PUSH
6269: LD_INT 3
6271: EQUAL
6272: IFFALSE 6355
// begin if rnd > 0 and rnd < 71 then
6274: LD_VAR 0 1
6278: PUSH
6279: LD_INT 0
6281: GREATER
6282: PUSH
6283: LD_VAR 0 1
6287: PUSH
6288: LD_INT 71
6290: LESS
6291: AND
6292: IFFALSE 6301
// BuildRussianBase ( 3 ) ;
6294: LD_INT 3
6296: PPUSH
6297: CALL 10009 0 1
// if rnd > 70 and rnd < 81 then
6301: LD_VAR 0 1
6305: PUSH
6306: LD_INT 70
6308: GREATER
6309: PUSH
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 81
6317: LESS
6318: AND
6319: IFFALSE 6328
// BuildRussianBase ( 2 ) ;
6321: LD_INT 2
6323: PPUSH
6324: CALL 10009 0 1
// if rnd > 80 and rnd < 101 then
6328: LD_VAR 0 1
6332: PUSH
6333: LD_INT 80
6335: GREATER
6336: PUSH
6337: LD_VAR 0 1
6341: PUSH
6342: LD_INT 101
6344: LESS
6345: AND
6346: IFFALSE 6355
// BuildRussianBase ( 1 ) ;
6348: LD_INT 1
6350: PPUSH
6351: CALL 10009 0 1
// end ; end ;
6355: PPOPN 1
6357: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6358: LD_INT 54
6360: PPUSH
6361: LD_INT 1
6363: PPUSH
6364: CALL_OW 321
6368: PUSH
6369: LD_INT 2
6371: EQUAL
6372: PUSH
6373: LD_INT 21
6375: PPUSH
6376: LD_INT 1
6378: PPUSH
6379: CALL_OW 321
6383: PUSH
6384: LD_INT 2
6386: EQUAL
6387: OR
6388: PUSH
6389: LD_INT 22
6391: PPUSH
6392: LD_INT 1
6394: PPUSH
6395: CALL_OW 321
6399: PUSH
6400: LD_INT 2
6402: EQUAL
6403: OR
6404: IFFALSE 6705
6406: GO 6408
6408: DISABLE
6409: LD_INT 0
6411: PPUSH
6412: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6413: LD_EXP 17
6417: PPUSH
6418: CALL_OW 302
6422: IFFALSE 6436
// tmp := DeltaDoctor else
6424: LD_ADDR_VAR 0 2
6428: PUSH
6429: LD_EXP 17
6433: ST_TO_ADDR
6434: GO 6446
// tmp := Denis ;
6436: LD_ADDR_VAR 0 2
6440: PUSH
6441: LD_EXP 12
6445: ST_TO_ADDR
// if tmp then
6446: LD_VAR 0 2
6450: IFFALSE 6544
// begin DialogueOn ;
6452: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6456: LD_EXP 1
6460: PPUSH
6461: LD_STRING D6-JMM-1
6463: PPUSH
6464: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6468: LD_VAR 0 2
6472: PPUSH
6473: LD_STRING D6-Sci1-1
6475: PPUSH
6476: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6480: LD_EXP 1
6484: PPUSH
6485: LD_STRING D6-JMM-2
6487: PPUSH
6488: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6492: LD_VAR 0 2
6496: PPUSH
6497: LD_STRING D6-Sci1-2
6499: PPUSH
6500: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6504: LD_EXP 1
6508: PPUSH
6509: LD_STRING D6-JMM-3
6511: PPUSH
6512: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6516: LD_VAR 0 2
6520: PPUSH
6521: LD_STRING D6-Sci1-3
6523: PPUSH
6524: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6528: LD_EXP 1
6532: PPUSH
6533: LD_STRING D6-JMM-4
6535: PPUSH
6536: CALL_OW 88
// DialogueOff ;
6540: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6544: LD_INT 1050
6546: PPUSH
6547: CALL_OW 67
// if arabianTrait = 0 then
6551: LD_EXP 49
6555: PUSH
6556: LD_INT 0
6558: EQUAL
6559: IFFALSE 6617
// begin DialogueOn ;
6561: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6565: LD_EXP 27
6569: PPUSH
6570: LD_STRING D5-Ar1-1
6572: PPUSH
6573: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6577: LD_EXP 26
6581: PPUSH
6582: LD_STRING D5-Diet-1
6584: PPUSH
6585: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6589: LD_EXP 27
6593: PPUSH
6594: LD_STRING D5-Ar1-2
6596: PPUSH
6597: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6601: LD_EXP 26
6605: PPUSH
6606: LD_STRING D5-Diet-2
6608: PPUSH
6609: CALL_OW 88
// DialogueOff ;
6613: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6617: LD_INT 2100
6619: PUSH
6620: LD_INT 3150
6622: PUSH
6623: LD_INT 4200
6625: PUSH
6626: LD_INT 5250
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 1
6637: PPUSH
6638: LD_INT 4
6640: PPUSH
6641: CALL_OW 12
6645: ARRAY
6646: PPUSH
6647: CALL_OW 67
// if arabianTrait = 0 then
6651: LD_EXP 49
6655: PUSH
6656: LD_INT 0
6658: EQUAL
6659: IFFALSE 6705
// begin arabianTrait = 1 ;
6661: LD_ADDR_EXP 49
6665: PUSH
6666: LD_INT 1
6668: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6669: LD_INT 2
6671: PPUSH
6672: LD_INT 3
6674: PPUSH
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 1
6680: PPUSH
6681: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6685: LD_INT 2
6687: PPUSH
6688: LD_INT 6
6690: PPUSH
6691: LD_INT 1
6693: PPUSH
6694: LD_INT 1
6696: PPUSH
6697: CALL_OW 80
// PrepareArabianTrait ;
6701: CALL 6708 0 0
// end ; end ;
6705: PPOPN 2
6707: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6708: LD_INT 0
6710: PPUSH
6711: PPUSH
6712: PPUSH
6713: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6714: LD_ADDR_VAR 0 2
6718: PUSH
6719: LD_INT 22
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 25
6731: PUSH
6732: LD_INT 4
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: PPUSH
6743: CALL_OW 69
6747: PUSH
6748: FOR_IN
6749: IFFALSE 6762
// ComExitBuilding ( i ) ;
6751: LD_VAR 0 2
6755: PPUSH
6756: CALL_OW 122
6760: GO 6748
6762: POP
6763: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6764: LD_ADDR_VAR 0 2
6768: PUSH
6769: LD_INT 22
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 25
6781: PUSH
6782: LD_INT 3
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 69
6797: PUSH
6798: FOR_IN
6799: IFFALSE 6812
// ComExitVehicle ( i ) ;
6801: LD_VAR 0 2
6805: PPUSH
6806: CALL_OW 121
6810: GO 6798
6812: POP
6813: POP
// SetClass ( Dietrich , 8 ) ;
6814: LD_EXP 26
6818: PPUSH
6819: LD_INT 8
6821: PPUSH
6822: CALL_OW 336
// wait ( 0 0$3 ) ;
6826: LD_INT 105
6828: PPUSH
6829: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6833: LD_INT 76
6835: PPUSH
6836: LD_INT 19
6838: PPUSH
6839: CALL_OW 84
// DialogueOn ;
6843: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6847: LD_INT 22
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: LD_INT 26
6859: PUSH
6860: LD_INT 1
6862: PUSH
6863: EMPTY
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 2
6869: PUSH
6870: LD_INT 25
6872: PUSH
6873: LD_INT 1
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PUSH
6880: LD_INT 25
6882: PUSH
6883: LD_INT 2
6885: PUSH
6886: EMPTY
6887: LIST
6888: LIST
6889: PUSH
6890: LD_INT 25
6892: PUSH
6893: LD_INT 3
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 25
6902: PUSH
6903: LD_INT 4
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 25
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: EMPTY
6917: LIST
6918: LIST
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: PPUSH
6938: LD_STRING D8-Sol1-1
6940: PPUSH
6941: LD_STRING D8-Sol1-1
6943: PPUSH
6944: CALL 9340 0 3
// if IsOK ( DeltaDoctor ) then
6948: LD_EXP 17
6952: PPUSH
6953: CALL_OW 302
6957: IFFALSE 6973
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6959: LD_EXP 17
6963: PPUSH
6964: LD_STRING D8-Sci1-1
6966: PPUSH
6967: CALL_OW 88
6971: GO 7074
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6973: LD_INT 22
6975: PUSH
6976: LD_INT 1
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PUSH
6983: LD_INT 26
6985: PUSH
6986: LD_INT 1
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 2
6995: PUSH
6996: LD_INT 25
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 25
7008: PUSH
7009: LD_INT 2
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 25
7018: PUSH
7019: LD_INT 3
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: LD_INT 25
7028: PUSH
7029: LD_INT 4
7031: PUSH
7032: EMPTY
7033: LIST
7034: LIST
7035: PUSH
7036: LD_INT 25
7038: PUSH
7039: LD_INT 5
7041: PUSH
7042: EMPTY
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: LIST
7050: LIST
7051: LIST
7052: LIST
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: LIST
7058: PPUSH
7059: CALL_OW 69
7063: PPUSH
7064: LD_STRING D8-Sol1-1
7066: PPUSH
7067: LD_STRING D8-Sol1-1
7069: PPUSH
7070: CALL 9340 0 3
// Say ( JMM , D8-JMM-1 ) ;
7074: LD_EXP 1
7078: PPUSH
7079: LD_STRING D8-JMM-1
7081: PPUSH
7082: CALL_OW 88
// DialogueOff ;
7086: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7090: LD_INT 2
7092: PPUSH
7093: LD_INT 2
7095: PPUSH
7096: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7100: LD_INT 1
7102: PPUSH
7103: LD_INT 2
7105: PPUSH
7106: LD_INT 2
7108: PPUSH
7109: LD_INT 1
7111: PPUSH
7112: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7116: LD_INT 3
7118: PPUSH
7119: LD_INT 2
7121: PPUSH
7122: LD_INT 1
7124: PPUSH
7125: LD_INT 1
7127: PPUSH
7128: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7132: LD_ADDR_VAR 0 2
7136: PUSH
7137: LD_INT 22
7139: PUSH
7140: LD_INT 2
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: LD_INT 21
7149: PUSH
7150: LD_INT 1
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 25
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 25
7172: PUSH
7173: LD_INT 8
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 15
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: LIST
7200: PPUSH
7201: CALL_OW 69
7205: PUSH
7206: FOR_IN
7207: IFFALSE 7347
// begin ComExitBuilding ( i ) ;
7209: LD_VAR 0 2
7213: PPUSH
7214: CALL_OW 122
// wait ( 0 0$1 ) ;
7218: LD_INT 35
7220: PPUSH
7221: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7225: LD_VAR 0 2
7229: PPUSH
7230: LD_INT 77
7232: PPUSH
7233: LD_INT 10
7235: PPUSH
7236: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7240: LD_VAR 0 2
7244: PPUSH
7245: LD_INT 82
7247: PPUSH
7248: LD_INT 5
7250: PPUSH
7251: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7255: LD_VAR 0 2
7259: PPUSH
7260: LD_INT 95
7262: PPUSH
7263: LD_INT 12
7265: PPUSH
7266: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7270: LD_VAR 0 2
7274: PPUSH
7275: LD_INT 102
7277: PPUSH
7278: LD_INT 11
7280: PPUSH
7281: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7285: LD_VAR 0 2
7289: PPUSH
7290: LD_INT 116
7292: PPUSH
7293: LD_INT 15
7295: PPUSH
7296: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7300: LD_VAR 0 2
7304: PPUSH
7305: LD_INT 140
7307: PPUSH
7308: LD_INT 25
7310: PPUSH
7311: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7315: LD_VAR 0 2
7319: PPUSH
7320: LD_INT 160
7322: PPUSH
7323: LD_INT 56
7325: PPUSH
7326: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7330: LD_VAR 0 2
7334: PPUSH
7335: LD_INT 189
7337: PPUSH
7338: LD_INT 79
7340: PPUSH
7341: CALL_OW 174
// end ;
7345: GO 7206
7347: POP
7348: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7349: LD_ADDR_VAR 0 2
7353: PUSH
7354: LD_INT 22
7356: PUSH
7357: LD_INT 2
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 21
7366: PUSH
7367: LD_INT 1
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 2
7376: PUSH
7377: LD_INT 25
7379: PUSH
7380: LD_INT 2
7382: PUSH
7383: EMPTY
7384: LIST
7385: LIST
7386: PUSH
7387: LD_INT 25
7389: PUSH
7390: LD_INT 3
7392: PUSH
7393: EMPTY
7394: LIST
7395: LIST
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 4
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 25
7409: PUSH
7410: LD_INT 16
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: PPUSH
7429: CALL_OW 69
7433: PUSH
7434: FOR_IN
7435: IFFALSE 7575
// begin ComExitBuilding ( i ) ;
7437: LD_VAR 0 2
7441: PPUSH
7442: CALL_OW 122
// wait ( 0 0$1 ) ;
7446: LD_INT 35
7448: PPUSH
7449: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7453: LD_VAR 0 2
7457: PPUSH
7458: LD_INT 77
7460: PPUSH
7461: LD_INT 10
7463: PPUSH
7464: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7468: LD_VAR 0 2
7472: PPUSH
7473: LD_INT 82
7475: PPUSH
7476: LD_INT 5
7478: PPUSH
7479: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7483: LD_VAR 0 2
7487: PPUSH
7488: LD_INT 95
7490: PPUSH
7491: LD_INT 12
7493: PPUSH
7494: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7498: LD_VAR 0 2
7502: PPUSH
7503: LD_INT 102
7505: PPUSH
7506: LD_INT 11
7508: PPUSH
7509: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7513: LD_VAR 0 2
7517: PPUSH
7518: LD_INT 116
7520: PPUSH
7521: LD_INT 15
7523: PPUSH
7524: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7528: LD_VAR 0 2
7532: PPUSH
7533: LD_INT 140
7535: PPUSH
7536: LD_INT 25
7538: PPUSH
7539: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7543: LD_VAR 0 2
7547: PPUSH
7548: LD_INT 160
7550: PPUSH
7551: LD_INT 56
7553: PPUSH
7554: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7558: LD_VAR 0 2
7562: PPUSH
7563: LD_INT 189
7565: PPUSH
7566: LD_INT 79
7568: PPUSH
7569: CALL_OW 171
// end ;
7573: GO 7434
7575: POP
7576: POP
// arabianAttackersAI = 1 ;
7577: LD_ADDR_EXP 46
7581: PUSH
7582: LD_INT 1
7584: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7585: LD_INT 350
7587: PPUSH
7588: CALL_OW 67
// if IsOk ( Gary ) then
7592: LD_EXP 10
7596: PPUSH
7597: CALL_OW 302
7601: IFFALSE 7615
// Say ( Gary , D8a-Gary-1 ) ;
7603: LD_EXP 10
7607: PPUSH
7608: LD_STRING D8a-Gary-1
7610: PPUSH
7611: CALL_OW 88
// wait ( 0 0$5 ) ;
7615: LD_INT 175
7617: PPUSH
7618: CALL_OW 67
// if IsOK ( Khatam ) then
7622: LD_EXP 14
7626: PPUSH
7627: CALL_OW 302
7631: IFFALSE 8167
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7633: LD_ADDR_VAR 0 3
7637: PUSH
7638: LD_INT 22
7640: PUSH
7641: LD_INT 1
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: LD_INT 25
7653: PUSH
7654: LD_INT 1
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: LD_INT 25
7663: PUSH
7664: LD_INT 2
7666: PUSH
7667: EMPTY
7668: LIST
7669: LIST
7670: PUSH
7671: LD_INT 25
7673: PUSH
7674: LD_INT 3
7676: PUSH
7677: EMPTY
7678: LIST
7679: LIST
7680: PUSH
7681: LD_INT 25
7683: PUSH
7684: LD_INT 4
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: PUSH
7691: LD_INT 25
7693: PUSH
7694: LD_INT 5
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_INT 25
7703: PUSH
7704: LD_INT 8
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: LIST
7716: LIST
7717: LIST
7718: LIST
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PPUSH
7724: CALL_OW 69
7728: PUSH
7729: LD_EXP 1
7733: PUSH
7734: LD_EXP 2
7738: PUSH
7739: LD_EXP 3
7743: PUSH
7744: LD_EXP 4
7748: PUSH
7749: LD_EXP 5
7753: PUSH
7754: LD_EXP 6
7758: PUSH
7759: LD_EXP 7
7763: PUSH
7764: LD_EXP 8
7768: PUSH
7769: LD_EXP 9
7773: PUSH
7774: LD_EXP 10
7778: PUSH
7779: LD_EXP 11
7783: PUSH
7784: LD_EXP 12
7788: PUSH
7789: LD_EXP 13
7793: PUSH
7794: LD_EXP 14
7798: PUSH
7799: LD_EXP 15
7803: PUSH
7804: LD_EXP 16
7808: PUSH
7809: LD_EXP 17
7813: PUSH
7814: LD_EXP 19
7818: PUSH
7819: LD_EXP 24
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: DIFF
7845: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7846: LD_EXP 14
7850: PPUSH
7851: LD_INT 8
7853: PPUSH
7854: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7858: LD_EXP 14
7862: PPUSH
7863: CALL_OW 122
// wait ( 0 0$1 ) ;
7867: LD_INT 35
7869: PPUSH
7870: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7874: LD_EXP 14
7878: PPUSH
7879: CALL_OW 121
// wait ( 0 0$1 ) ;
7883: LD_INT 35
7885: PPUSH
7886: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7890: LD_EXP 14
7894: PPUSH
7895: LD_INT 7
7897: PPUSH
7898: CALL_OW 113
// if not tmp then
7902: LD_VAR 0 3
7906: NOT
7907: IFFALSE 7911
// exit ;
7909: GO 8167
// DialogueOn ;
7911: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
7915: LD_VAR 0 3
7919: PUSH
7920: LD_INT 1
7922: ARRAY
7923: PPUSH
7924: CALL_OW 258
7928: PUSH
7929: LD_INT 1
7931: EQUAL
7932: IFFALSE 7952
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
7934: LD_VAR 0 3
7938: PUSH
7939: LD_INT 1
7941: ARRAY
7942: PPUSH
7943: LD_STRING D8b-Sol1-1
7945: PPUSH
7946: CALL_OW 88
7950: GO 7968
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
7952: LD_VAR 0 3
7956: PUSH
7957: LD_INT 1
7959: ARRAY
7960: PPUSH
7961: LD_STRING D8b-FSol1-1
7963: PPUSH
7964: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
7968: LD_EXP 14
7972: PPUSH
7973: LD_STRING D8b-Khat-1
7975: PPUSH
7976: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
7980: LD_VAR 0 3
7984: PUSH
7985: LD_INT 1
7987: ARRAY
7988: PPUSH
7989: CALL_OW 258
7993: PUSH
7994: LD_INT 1
7996: EQUAL
7997: IFFALSE 8017
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
7999: LD_VAR 0 3
8003: PUSH
8004: LD_INT 1
8006: ARRAY
8007: PPUSH
8008: LD_STRING D8b-Sol1-2
8010: PPUSH
8011: CALL_OW 88
8015: GO 8033
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PPUSH
8026: LD_STRING D8b-FSol1-2
8028: PPUSH
8029: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8033: LD_EXP 14
8037: PPUSH
8038: LD_STRING D8b-Khat-2
8040: PPUSH
8041: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8045: LD_VAR 0 3
8049: PUSH
8050: LD_INT 1
8052: ARRAY
8053: PPUSH
8054: CALL_OW 258
8058: PUSH
8059: LD_INT 1
8061: EQUAL
8062: IFFALSE 8082
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8064: LD_VAR 0 3
8068: PUSH
8069: LD_INT 1
8071: ARRAY
8072: PPUSH
8073: LD_STRING D8b-Sol1-3
8075: PPUSH
8076: CALL_OW 88
8080: GO 8098
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 1
8089: ARRAY
8090: PPUSH
8091: LD_STRING D8b-FSol1-3
8093: PPUSH
8094: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8098: LD_EXP 14
8102: PPUSH
8103: LD_STRING D8b-Khat-3
8105: PPUSH
8106: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8110: LD_VAR 0 3
8114: PUSH
8115: LD_INT 1
8117: ARRAY
8118: PPUSH
8119: CALL_OW 258
8123: PUSH
8124: LD_INT 1
8126: EQUAL
8127: IFFALSE 8147
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8129: LD_VAR 0 3
8133: PUSH
8134: LD_INT 1
8136: ARRAY
8137: PPUSH
8138: LD_STRING D8b-Sol1-4
8140: PPUSH
8141: CALL_OW 88
8145: GO 8163
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8147: LD_VAR 0 3
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: PPUSH
8156: LD_STRING D8b-FSol1-4
8158: PPUSH
8159: CALL_OW 88
// DialogueOff ;
8163: CALL_OW 7
// end ; end ;
8167: LD_VAR 0 1
8171: RET
// every 0 0$1 do var i ;
8172: GO 8174
8174: DISABLE
8175: LD_INT 0
8177: PPUSH
// begin enable ;
8178: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8179: LD_ADDR_VAR 0 1
8183: PUSH
8184: LD_INT 7
8186: PPUSH
8187: LD_INT 22
8189: PUSH
8190: LD_INT 2
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PPUSH
8197: CALL_OW 70
8201: PUSH
8202: FOR_IN
8203: IFFALSE 8269
// begin if GetClass ( i ) = 4 then
8205: LD_VAR 0 1
8209: PPUSH
8210: CALL_OW 257
8214: PUSH
8215: LD_INT 4
8217: EQUAL
8218: IFFALSE 8230
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8220: LD_INT 1
8222: PPUSH
8223: LD_STRING 10_ScientistsEscape_1
8225: PPUSH
8226: CALL_OW 39
// if i = Dietrich then
8230: LD_VAR 0 1
8234: PUSH
8235: LD_EXP 26
8239: EQUAL
8240: IFFALSE 8250
// GensherStatus = 1 ;
8242: LD_ADDR_EXP 51
8246: PUSH
8247: LD_INT 1
8249: ST_TO_ADDR
// arabianEscape = 1 ;
8250: LD_ADDR_EXP 47
8254: PUSH
8255: LD_INT 1
8257: ST_TO_ADDR
// RemoveUnit ( i ) ;
8258: LD_VAR 0 1
8262: PPUSH
8263: CALL_OW 64
// end ;
8267: GO 8202
8269: POP
8270: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8271: LD_EXP 14
8275: PPUSH
8276: LD_INT 7
8278: PPUSH
8279: CALL_OW 308
8283: IFFALSE 8302
// begin KhatamStatus = 1 ;
8285: LD_ADDR_EXP 52
8289: PUSH
8290: LD_INT 1
8292: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8293: LD_EXP 14
8297: PPUSH
8298: CALL_OW 64
// end ; end ;
8302: PPOPN 1
8304: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8305: LD_EXP 14
8309: PPUSH
8310: CALL_OW 301
8314: IFFALSE 8327
8316: GO 8318
8318: DISABLE
// KhatamStatus = 0 ;
8319: LD_ADDR_EXP 52
8323: PUSH
8324: LD_INT 0
8326: ST_TO_ADDR
8327: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8328: LD_INT 22
8330: PUSH
8331: LD_INT 2
8333: PUSH
8334: EMPTY
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 21
8340: PUSH
8341: LD_INT 1
8343: PUSH
8344: EMPTY
8345: LIST
8346: LIST
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: PPUSH
8352: CALL_OW 69
8356: PUSH
8357: LD_INT 0
8359: EQUAL
8360: PUSH
8361: LD_INT 22
8363: PUSH
8364: LD_INT 4
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: PUSH
8371: LD_INT 21
8373: PUSH
8374: LD_INT 1
8376: PUSH
8377: EMPTY
8378: LIST
8379: LIST
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PPUSH
8385: CALL_OW 69
8389: PUSH
8390: LD_INT 0
8392: EQUAL
8393: AND
8394: IFFALSE 8407
8396: GO 8398
8398: DISABLE
// arabianDefeated = 1 ;
8399: LD_ADDR_EXP 48
8403: PUSH
8404: LD_INT 1
8406: ST_TO_ADDR
8407: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8408: LD_INT 54
8410: PPUSH
8411: LD_INT 1
8413: PPUSH
8414: CALL_OW 321
8418: PUSH
8419: LD_INT 2
8421: EQUAL
8422: PUSH
8423: LD_INT 55
8425: PPUSH
8426: LD_INT 1
8428: PPUSH
8429: CALL_OW 321
8433: PUSH
8434: LD_INT 2
8436: EQUAL
8437: AND
8438: PUSH
8439: LD_INT 21
8441: PPUSH
8442: LD_INT 1
8444: PPUSH
8445: CALL_OW 321
8449: PUSH
8450: LD_INT 2
8452: EQUAL
8453: AND
8454: PUSH
8455: LD_INT 22
8457: PPUSH
8458: LD_INT 1
8460: PPUSH
8461: CALL_OW 321
8465: PUSH
8466: LD_INT 2
8468: EQUAL
8469: AND
8470: PUSH
8471: LD_INT 12
8473: PPUSH
8474: LD_INT 1
8476: PPUSH
8477: CALL_OW 321
8481: PUSH
8482: LD_INT 2
8484: EQUAL
8485: AND
8486: PUSH
8487: LD_INT 32
8489: PPUSH
8490: LD_INT 1
8492: PPUSH
8493: CALL_OW 321
8497: PUSH
8498: LD_INT 2
8500: EQUAL
8501: AND
8502: PUSH
8503: LD_EXP 59
8507: PUSH
8508: LD_INT 0
8510: EQUAL
8511: AND
8512: PUSH
8513: LD_EXP 49
8517: PUSH
8518: LD_INT 0
8520: EQUAL
8521: AND
8522: PUSH
8523: LD_OWVAR 1
8527: PUSH
8528: LD_INT 31500
8530: GREATEREQUAL
8531: AND
8532: IFFALSE 8549
8534: GO 8536
8536: DISABLE
// begin arabianTrait = 1 ;
8537: LD_ADDR_EXP 49
8541: PUSH
8542: LD_INT 1
8544: ST_TO_ADDR
// PrepareArabianTrait ;
8545: CALL 6708 0 0
// end ;
8549: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8550: LD_EXP 29
8554: PUSH
8555: LD_STRING 02_mikhailStatus_1
8557: PPUSH
8558: LD_INT 0
8560: PPUSH
8561: CALL_OW 30
8565: PUSH
8566: LD_INT 1
8568: EQUAL
8569: AND
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_INT 5
8576: PUSH
8577: EMPTY
8578: LIST
8579: LIST
8580: PPUSH
8581: CALL_OW 69
8585: PUSH
8586: LD_INT 0
8588: EQUAL
8589: AND
8590: PUSH
8591: LD_INT 22
8593: PUSH
8594: LD_INT 2
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: PPUSH
8601: CALL_OW 69
8605: PUSH
8606: LD_INT 0
8608: EQUAL
8609: PUSH
8610: LD_EXP 49
8614: PUSH
8615: LD_INT 0
8617: EQUAL
8618: OR
8619: AND
8620: IFFALSE 8629
8622: GO 8624
8624: DISABLE
// PrepareCornell ;
8625: CALL 2413 0 0
8629: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8630: LD_INT 22
8632: PUSH
8633: LD_INT 1
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PPUSH
8645: LD_EXP 19
8649: PPUSH
8650: CALL_OW 74
8654: PPUSH
8655: LD_EXP 19
8659: PPUSH
8660: CALL_OW 296
8664: PUSH
8665: LD_INT 9
8667: LESS
8668: IFFALSE 8889
8670: GO 8672
8672: DISABLE
// begin InGameOn ;
8673: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8677: LD_EXP 19
8681: PPUSH
8682: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8686: LD_EXP 19
8690: PPUSH
8691: LD_STRING D7-Corn-1
8693: PPUSH
8694: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8698: LD_INT 22
8700: PUSH
8701: LD_INT 1
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 2
8710: PUSH
8711: LD_INT 25
8713: PUSH
8714: LD_INT 1
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 25
8723: PUSH
8724: LD_INT 2
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 25
8733: PUSH
8734: LD_INT 3
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 25
8743: PUSH
8744: LD_INT 4
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: PUSH
8751: LD_INT 25
8753: PUSH
8754: LD_INT 5
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: PPUSH
8773: CALL_OW 69
8777: PPUSH
8778: LD_STRING D7-Sol1-1
8780: PPUSH
8781: LD_STRING D7-FSol1-1
8783: PPUSH
8784: CALL 9340 0 3
// CenterNowOnUnits ( Cornell ) ;
8788: LD_EXP 19
8792: PPUSH
8793: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8797: LD_EXP 19
8801: PPUSH
8802: LD_STRING D7-Corn-2
8804: PPUSH
8805: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8809: LD_EXP 1
8813: PPUSH
8814: LD_STRING D7-JMM-2
8816: PPUSH
8817: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8821: LD_EXP 19
8825: PPUSH
8826: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8830: LD_EXP 19
8834: PPUSH
8835: LD_STRING D7-Corn-3
8837: PPUSH
8838: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8842: LD_EXP 19
8846: PPUSH
8847: LD_INT 250
8849: PPUSH
8850: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
8854: LD_EXP 19
8858: PPUSH
8859: LD_INT 1
8861: PPUSH
8862: CALL_OW 235
// wait ( 0 0$1 ) ;
8866: LD_INT 35
8868: PPUSH
8869: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
8873: LD_EXP 1
8877: PPUSH
8878: LD_STRING D7-JMM-3
8880: PPUSH
8881: CALL_OW 88
// InGameOff ;
8885: CALL_OW 9
// end ;
8889: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
8890: LD_EXP 19
8894: PPUSH
8895: CALL_OW 255
8899: PUSH
8900: LD_INT 1
8902: EQUAL
8903: PUSH
8904: LD_EXP 19
8908: PPUSH
8909: CALL_OW 256
8913: PUSH
8914: LD_INT 251
8916: GREATER
8917: AND
8918: IFFALSE 9111
8920: GO 8922
8922: DISABLE
// begin DialogueOn ;
8923: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
8927: LD_EXP 1
8931: PPUSH
8932: LD_STRING D7a-JMM-1
8934: PPUSH
8935: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
8939: LD_EXP 19
8943: PPUSH
8944: LD_STRING D7a-Corn-1
8946: PPUSH
8947: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
8951: LD_EXP 1
8955: PPUSH
8956: LD_STRING D7a-JMM-2
8958: PPUSH
8959: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
8963: LD_EXP 19
8967: PPUSH
8968: LD_STRING D7a-Corn-2
8970: PPUSH
8971: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
8975: LD_EXP 1
8979: PPUSH
8980: LD_STRING D7a-JMM-3
8982: PPUSH
8983: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
8987: LD_EXP 19
8991: PPUSH
8992: LD_STRING D7a-Corn-3
8994: PPUSH
8995: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
8999: LD_EXP 1
9003: PPUSH
9004: LD_STRING D7a-JMM-4
9006: PPUSH
9007: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9011: LD_EXP 19
9015: PPUSH
9016: LD_STRING D7a-Corn-4
9018: PPUSH
9019: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9023: LD_EXP 1
9027: PPUSH
9028: LD_STRING D7a-JMM-5
9030: PPUSH
9031: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9035: LD_EXP 19
9039: PPUSH
9040: LD_STRING D7a-Corn-5
9042: PPUSH
9043: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9047: LD_EXP 1
9051: PPUSH
9052: LD_STRING D7a-JMM-6
9054: PPUSH
9055: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9059: LD_EXP 19
9063: PPUSH
9064: LD_STRING D7a-Corn-6
9066: PPUSH
9067: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9071: LD_EXP 1
9075: PPUSH
9076: LD_STRING D7a-JMM-7
9078: PPUSH
9079: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9083: LD_EXP 19
9087: PPUSH
9088: LD_STRING D7a-Corn-7
9090: PPUSH
9091: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9095: LD_EXP 1
9099: PPUSH
9100: LD_STRING D7a-JMM-8
9102: PPUSH
9103: CALL_OW 88
// DialogueOff ;
9107: CALL_OW 7
// end ;
9111: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9112: LD_EXP 58
9116: PUSH
9117: LD_EXP 1
9121: PPUSH
9122: CALL_OW 302
9126: PUSH
9127: LD_EXP 5
9131: PPUSH
9132: CALL_OW 302
9136: OR
9137: AND
9138: IFFALSE 9228
9140: GO 9142
9142: DISABLE
// begin Wait ( 0 0$2 ) ;
9143: LD_INT 70
9145: PPUSH
9146: CALL_OW 67
// DialogueOn ;
9150: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9154: LD_EXP 58
9158: PUSH
9159: LD_INT 1
9161: ARRAY
9162: PPUSH
9163: LD_EXP 58
9167: PUSH
9168: LD_INT 2
9170: ARRAY
9171: PPUSH
9172: CALL_OW 86
// if IsOk ( Cyrus ) then
9176: LD_EXP 5
9180: PPUSH
9181: CALL_OW 302
9185: IFFALSE 9201
// Say ( Cyrus , D10-Cyrus-1 ) else
9187: LD_EXP 5
9191: PPUSH
9192: LD_STRING D10-Cyrus-1
9194: PPUSH
9195: CALL_OW 88
9199: GO 9224
// if IsOk ( JMM ) then
9201: LD_EXP 1
9205: PPUSH
9206: CALL_OW 302
9210: IFFALSE 9224
// Say ( JMM , D10-JMM-1 ) ;
9212: LD_EXP 1
9216: PPUSH
9217: LD_STRING D10-JMM-1
9219: PPUSH
9220: CALL_OW 88
// DialogueOff ;
9224: CALL_OW 7
// end ;
9228: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9229: LD_INT 12
9231: PPUSH
9232: LD_INT 1
9234: PPUSH
9235: CALL_OW 321
9239: PUSH
9240: LD_INT 2
9242: EQUAL
9243: IFFALSE 9255
9245: GO 9247
9247: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9248: LD_STRING M2b
9250: PPUSH
9251: CALL_OW 337
9255: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9256: LD_INT 32
9258: PPUSH
9259: LD_INT 1
9261: PPUSH
9262: CALL_OW 321
9266: PUSH
9267: LD_INT 2
9269: EQUAL
9270: IFFALSE 9282
9272: GO 9274
9274: DISABLE
// ChangeMissionObjectives ( M2c ) ; end_of_file
9275: LD_STRING M2c
9277: PPUSH
9278: CALL_OW 337
9282: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9283: LD_INT 0
9285: PPUSH
9286: PPUSH
// if exist_mode then
9287: LD_VAR 0 2
9291: IFFALSE 9310
// unit := CreateCharacter ( ident ) else
9293: LD_ADDR_VAR 0 4
9297: PUSH
9298: LD_VAR 0 1
9302: PPUSH
9303: CALL_OW 34
9307: ST_TO_ADDR
9308: GO 9325
// unit := NewCharacter ( ident ) ;
9310: LD_ADDR_VAR 0 4
9314: PUSH
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 25
9324: ST_TO_ADDR
// result := unit ;
9325: LD_ADDR_VAR 0 3
9329: PUSH
9330: LD_VAR 0 4
9334: ST_TO_ADDR
// end ;
9335: LD_VAR 0 3
9339: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9340: LD_INT 0
9342: PPUSH
9343: PPUSH
9344: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9345: LD_ADDR_VAR 0 1
9349: PUSH
9350: LD_VAR 0 1
9354: PUSH
9355: LD_EXP 1
9359: PUSH
9360: LD_EXP 2
9364: PUSH
9365: LD_EXP 3
9369: PUSH
9370: LD_EXP 4
9374: PUSH
9375: LD_EXP 5
9379: PUSH
9380: LD_EXP 6
9384: PUSH
9385: LD_EXP 7
9389: PUSH
9390: LD_EXP 8
9394: PUSH
9395: LD_EXP 9
9399: PUSH
9400: LD_EXP 10
9404: PUSH
9405: LD_EXP 11
9409: PUSH
9410: LD_EXP 12
9414: PUSH
9415: LD_EXP 13
9419: PUSH
9420: LD_EXP 14
9424: PUSH
9425: LD_EXP 15
9429: PUSH
9430: LD_EXP 16
9434: PUSH
9435: LD_EXP 17
9439: PUSH
9440: LD_EXP 18
9444: PUSH
9445: LD_EXP 19
9449: PUSH
9450: LD_EXP 24
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: LIST
9474: LIST
9475: LIST
9476: DIFF
9477: ST_TO_ADDR
// if not characters then
9478: LD_VAR 0 1
9482: NOT
9483: IFFALSE 9487
// exit ;
9485: GO 9633
// rnd = rand ( 1 , characters ) ;
9487: LD_ADDR_VAR 0 6
9491: PUSH
9492: LD_INT 1
9494: PPUSH
9495: LD_VAR 0 1
9499: PPUSH
9500: CALL_OW 12
9504: ST_TO_ADDR
// for i = 1 to characters do
9505: LD_ADDR_VAR 0 5
9509: PUSH
9510: DOUBLE
9511: LD_INT 1
9513: DEC
9514: ST_TO_ADDR
9515: LD_VAR 0 1
9519: PUSH
9520: FOR_TO
9521: IFFALSE 9631
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9523: LD_VAR 0 5
9527: PUSH
9528: LD_VAR 0 6
9532: EQUAL
9533: PUSH
9534: LD_VAR 0 1
9538: PUSH
9539: LD_VAR 0 5
9543: ARRAY
9544: PPUSH
9545: CALL_OW 258
9549: PUSH
9550: LD_INT 1
9552: EQUAL
9553: AND
9554: IFFALSE 9576
// Say ( characters [ i ] , dialogMID ) ;
9556: LD_VAR 0 1
9560: PUSH
9561: LD_VAR 0 5
9565: ARRAY
9566: PPUSH
9567: LD_VAR 0 2
9571: PPUSH
9572: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9576: LD_VAR 0 5
9580: PUSH
9581: LD_VAR 0 6
9585: EQUAL
9586: PUSH
9587: LD_VAR 0 1
9591: PUSH
9592: LD_VAR 0 5
9596: ARRAY
9597: PPUSH
9598: CALL_OW 258
9602: PUSH
9603: LD_INT 2
9605: EQUAL
9606: AND
9607: IFFALSE 9629
// Say ( characters [ i ] , dialogFID ) ;
9609: LD_VAR 0 1
9613: PUSH
9614: LD_VAR 0 5
9618: ARRAY
9619: PPUSH
9620: LD_VAR 0 3
9624: PPUSH
9625: CALL_OW 88
// end ;
9629: GO 9520
9631: POP
9632: POP
// end ;
9633: LD_VAR 0 4
9637: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9638: LD_INT 0
9640: PPUSH
9641: PPUSH
// for i in charactersList do
9642: LD_ADDR_VAR 0 4
9646: PUSH
9647: LD_VAR 0 1
9651: PUSH
9652: FOR_IN
9653: IFFALSE 9682
// begin if IsOk ( i ) then
9655: LD_VAR 0 4
9659: PPUSH
9660: CALL_OW 302
9664: IFFALSE 9680
// SaveCharacters ( i , ident ) ;
9666: LD_VAR 0 4
9670: PPUSH
9671: LD_VAR 0 2
9675: PPUSH
9676: CALL_OW 38
// end ;
9680: GO 9652
9682: POP
9683: POP
// end ;
9684: LD_VAR 0 3
9688: RET
// export function PrepareDifficulty ; begin
9689: LD_INT 0
9691: PPUSH
// if difficulty = 1 then
9692: LD_OWVAR 67
9696: PUSH
9697: LD_INT 1
9699: EQUAL
9700: IFFALSE 9744
// begin RuSolMinLevel = 4 ;
9702: LD_ADDR_EXP 36
9706: PUSH
9707: LD_INT 4
9709: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9710: LD_ADDR_EXP 37
9714: PUSH
9715: LD_INT 7
9717: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9718: LD_INT 51
9720: PPUSH
9721: LD_INT 6
9723: PPUSH
9724: LD_INT 2
9726: PPUSH
9727: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9731: LD_INT 51
9733: PPUSH
9734: LD_INT 5
9736: PPUSH
9737: LD_INT 2
9739: PPUSH
9740: CALL_OW 322
// end ; if difficulty = 2 then
9744: LD_OWVAR 67
9748: PUSH
9749: LD_INT 2
9751: EQUAL
9752: IFFALSE 9848
// begin RuSolMinLevel = 5 ;
9754: LD_ADDR_EXP 36
9758: PUSH
9759: LD_INT 5
9761: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9762: LD_ADDR_EXP 37
9766: PUSH
9767: LD_INT 7
9769: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9770: LD_INT 51
9772: PPUSH
9773: LD_INT 6
9775: PPUSH
9776: LD_INT 2
9778: PPUSH
9779: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
9783: LD_INT 57
9785: PPUSH
9786: LD_INT 6
9788: PPUSH
9789: LD_INT 2
9791: PPUSH
9792: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
9796: LD_INT 63
9798: PPUSH
9799: LD_INT 6
9801: PPUSH
9802: LD_INT 2
9804: PPUSH
9805: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9809: LD_INT 51
9811: PPUSH
9812: LD_INT 5
9814: PPUSH
9815: LD_INT 2
9817: PPUSH
9818: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
9822: LD_INT 5
9824: PPUSH
9825: LD_INT 2
9827: PPUSH
9828: LD_INT 2
9830: PPUSH
9831: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
9835: LD_INT 5
9837: PPUSH
9838: LD_INT 5
9840: PPUSH
9841: LD_INT 2
9843: PPUSH
9844: CALL_OW 322
// end ; if difficulty = 3 then
9848: LD_OWVAR 67
9852: PUSH
9853: LD_INT 3
9855: EQUAL
9856: IFFALSE 10004
// begin RuSolMinLevel = 6 ;
9858: LD_ADDR_EXP 36
9862: PUSH
9863: LD_INT 6
9865: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
9866: LD_ADDR_EXP 37
9870: PUSH
9871: LD_INT 8
9873: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9874: LD_INT 51
9876: PPUSH
9877: LD_INT 6
9879: PPUSH
9880: LD_INT 2
9882: PPUSH
9883: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
9887: LD_INT 57
9889: PPUSH
9890: LD_INT 6
9892: PPUSH
9893: LD_INT 2
9895: PPUSH
9896: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
9900: LD_INT 52
9902: PPUSH
9903: LD_INT 6
9905: PPUSH
9906: LD_INT 2
9908: PPUSH
9909: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
9913: LD_INT 58
9915: PPUSH
9916: LD_INT 6
9918: PPUSH
9919: LD_INT 2
9921: PPUSH
9922: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
9926: LD_INT 63
9928: PPUSH
9929: LD_INT 6
9931: PPUSH
9932: LD_INT 2
9934: PPUSH
9935: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
9939: LD_INT 64
9941: PPUSH
9942: LD_INT 6
9944: PPUSH
9945: LD_INT 2
9947: PPUSH
9948: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9952: LD_INT 51
9954: PPUSH
9955: LD_INT 5
9957: PPUSH
9958: LD_INT 2
9960: PPUSH
9961: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
9965: LD_INT 52
9967: PPUSH
9968: LD_INT 5
9970: PPUSH
9971: LD_INT 2
9973: PPUSH
9974: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
9978: LD_INT 66
9980: PPUSH
9981: LD_INT 2
9983: PPUSH
9984: LD_INT 2
9986: PPUSH
9987: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
9991: LD_INT 66
9993: PPUSH
9994: LD_INT 5
9996: PPUSH
9997: LD_INT 2
9999: PPUSH
10000: CALL_OW 322
// end ; end ;
10004: LD_VAR 0 1
10008: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10009: LD_INT 0
10011: PPUSH
10012: PPUSH
10013: PPUSH
10014: PPUSH
10015: PPUSH
// case position of 1 :
10016: LD_VAR 0 1
10020: PUSH
10021: LD_INT 1
10023: DOUBLE
10024: EQUAL
10025: IFTRUE 10029
10027: GO 10040
10029: POP
// area := westConv ; 2 :
10030: LD_ADDR_VAR 0 6
10034: PUSH
10035: LD_INT 20
10037: ST_TO_ADDR
10038: GO 10079
10040: LD_INT 2
10042: DOUBLE
10043: EQUAL
10044: IFTRUE 10048
10046: GO 10059
10048: POP
// area := midConv ; 3 :
10049: LD_ADDR_VAR 0 6
10053: PUSH
10054: LD_INT 21
10056: ST_TO_ADDR
10057: GO 10079
10059: LD_INT 3
10061: DOUBLE
10062: EQUAL
10063: IFTRUE 10067
10065: GO 10078
10067: POP
// area := eastConv ; end ;
10068: LD_ADDR_VAR 0 6
10072: PUSH
10073: LD_INT 22
10075: ST_TO_ADDR
10076: GO 10079
10078: POP
// area := AreaToList ( area , 0 ) ;
10079: LD_ADDR_VAR 0 6
10083: PUSH
10084: LD_VAR 0 6
10088: PPUSH
10089: LD_INT 0
10091: PPUSH
10092: CALL_OW 517
10096: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10097: LD_ADDR_VAR 0 3
10101: PUSH
10102: DOUBLE
10103: LD_INT 1
10105: DEC
10106: ST_TO_ADDR
10107: LD_VAR 0 6
10111: PUSH
10112: LD_INT 1
10114: ARRAY
10115: PUSH
10116: FOR_TO
10117: IFFALSE 10198
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10119: LD_VAR 0 6
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PUSH
10128: LD_VAR 0 3
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 6
10138: PUSH
10139: LD_INT 2
10141: ARRAY
10142: PUSH
10143: LD_VAR 0 3
10147: ARRAY
10148: PPUSH
10149: LD_INT 1
10151: PPUSH
10152: LD_INT 1
10154: PPUSH
10155: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10159: LD_VAR 0 6
10163: PUSH
10164: LD_INT 1
10166: ARRAY
10167: PUSH
10168: LD_VAR 0 3
10172: ARRAY
10173: PPUSH
10174: LD_VAR 0 6
10178: PUSH
10179: LD_INT 2
10181: ARRAY
10182: PUSH
10183: LD_VAR 0 3
10187: ARRAY
10188: PPUSH
10189: LD_INT 1
10191: PPUSH
10192: CALL_OW 331
// end ;
10196: GO 10116
10198: POP
10199: POP
// ruPossition = position ;
10200: LD_ADDR_EXP 41
10204: PUSH
10205: LD_VAR 0 1
10209: ST_TO_ADDR
// if position = 1 then
10210: LD_VAR 0 1
10214: PUSH
10215: LD_INT 1
10217: EQUAL
10218: IFFALSE 10966
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10220: LD_ADDR_VAR 0 4
10224: PUSH
10225: LD_INT 22
10227: PUSH
10228: LD_INT 3
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 25
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: EMPTY
10242: LIST
10243: LIST
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PPUSH
10249: CALL_OW 69
10253: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10254: LD_ADDR_VAR 0 5
10258: PUSH
10259: LD_INT 0
10261: PUSH
10262: LD_INT 49
10264: PUSH
10265: LD_INT 74
10267: PUSH
10268: LD_INT 3
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 4
10279: PUSH
10280: LD_INT 73
10282: PUSH
10283: LD_INT 88
10285: PUSH
10286: LD_INT 5
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: PUSH
10295: LD_INT 4
10297: PUSH
10298: LD_INT 56
10300: PUSH
10301: LD_INT 62
10303: PUSH
10304: LD_INT 3
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 29
10315: PUSH
10316: LD_INT 43
10318: PUSH
10319: LD_INT 68
10321: PUSH
10322: LD_INT 2
10324: PUSH
10325: EMPTY
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: PUSH
10331: LD_INT 30
10333: PUSH
10334: LD_INT 43
10336: PUSH
10337: LD_INT 79
10339: PUSH
10340: LD_INT 5
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 28
10351: PUSH
10352: LD_INT 60
10354: PUSH
10355: LD_INT 75
10357: PUSH
10358: LD_INT 1
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: LD_INT 50
10372: PUSH
10373: LD_INT 87
10375: PUSH
10376: LD_INT 1
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: PUSH
10385: LD_INT 28
10387: PUSH
10388: LD_INT 45
10390: PUSH
10391: LD_INT 67
10393: PUSH
10394: LD_INT 2
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: LIST
10401: LIST
10402: PUSH
10403: LD_INT 17
10405: PUSH
10406: LD_INT 47
10408: PUSH
10409: LD_INT 84
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 18
10423: PUSH
10424: LD_INT 46
10426: PUSH
10427: LD_INT 87
10429: PUSH
10430: LD_INT 1
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 28
10441: PUSH
10442: LD_INT 41
10444: PUSH
10445: LD_INT 64
10447: PUSH
10448: LD_INT 5
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 32
10459: PUSH
10460: LD_INT 75
10462: PUSH
10463: LD_INT 76
10465: PUSH
10466: LD_INT 5
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 32
10477: PUSH
10478: LD_INT 77
10480: PUSH
10481: LD_INT 75
10483: PUSH
10484: LD_INT 5
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 32
10495: PUSH
10496: LD_INT 69
10498: PUSH
10499: LD_INT 68
10501: PUSH
10502: LD_INT 3
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 32
10513: PUSH
10514: LD_INT 59
10516: PUSH
10517: LD_INT 96
10519: PUSH
10520: LD_INT 5
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 32
10531: PUSH
10532: LD_INT 56
10534: PUSH
10535: LD_INT 96
10537: PUSH
10538: LD_INT 0
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 32
10549: PUSH
10550: LD_INT 51
10552: PUSH
10553: LD_INT 61
10555: PUSH
10556: LD_INT 3
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 32
10567: PUSH
10568: LD_INT 42
10570: PUSH
10571: LD_INT 60
10573: PUSH
10574: LD_INT 3
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 32
10585: PUSH
10586: LD_INT 36
10588: PUSH
10589: LD_INT 58
10591: PUSH
10592: LD_INT 3
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 32
10603: PUSH
10604: LD_INT 39
10606: PUSH
10607: LD_INT 59
10609: PUSH
10610: LD_INT 3
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 32
10621: PUSH
10622: LD_INT 61
10624: PUSH
10625: LD_INT 64
10627: PUSH
10628: LD_INT 3
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 33
10639: PUSH
10640: LD_INT 63
10642: PUSH
10643: LD_INT 90
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 33
10657: PUSH
10658: LD_INT 64
10660: PUSH
10661: LD_INT 88
10663: PUSH
10664: LD_INT 5
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 33
10675: PUSH
10676: LD_INT 72
10678: PUSH
10679: LD_INT 82
10681: PUSH
10682: LD_INT 5
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 6
10693: PUSH
10694: LD_INT 42
10696: PUSH
10697: LD_INT 74
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 6
10711: PUSH
10712: LD_INT 56
10714: PUSH
10715: LD_INT 77
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 21
10729: PUSH
10730: LD_INT 54
10732: PUSH
10733: LD_INT 91
10735: PUSH
10736: LD_INT 5
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 16
10747: PUSH
10748: LD_INT 50
10750: PUSH
10751: LD_INT 83
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 24
10765: PUSH
10766: LD_INT 50
10768: PUSH
10769: LD_INT 90
10771: PUSH
10772: LD_INT 0
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: PUSH
10781: EMPTY
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10812: LD_ADDR_VAR 0 3
10816: PUSH
10817: LD_INT 22
10819: PUSH
10820: LD_INT 3
10822: PUSH
10823: EMPTY
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: LD_INT 25
10832: PUSH
10833: LD_INT 2
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: PUSH
10853: FOR_IN
10854: IFFALSE 10873
// AddComAgressiveMove ( i , 53 , 82 ) ;
10856: LD_VAR 0 3
10860: PPUSH
10861: LD_INT 53
10863: PPUSH
10864: LD_INT 82
10866: PPUSH
10867: CALL_OW 174
10871: GO 10853
10873: POP
10874: POP
// for i := 1 to buildingsTab do
10875: LD_ADDR_VAR 0 3
10879: PUSH
10880: DOUBLE
10881: LD_INT 1
10883: DEC
10884: ST_TO_ADDR
10885: LD_VAR 0 5
10889: PUSH
10890: FOR_TO
10891: IFFALSE 10964
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10893: LD_VAR 0 4
10897: PPUSH
10898: LD_VAR 0 5
10902: PUSH
10903: LD_VAR 0 3
10907: ARRAY
10908: PUSH
10909: LD_INT 1
10911: ARRAY
10912: PPUSH
10913: LD_VAR 0 5
10917: PUSH
10918: LD_VAR 0 3
10922: ARRAY
10923: PUSH
10924: LD_INT 2
10926: ARRAY
10927: PPUSH
10928: LD_VAR 0 5
10932: PUSH
10933: LD_VAR 0 3
10937: ARRAY
10938: PUSH
10939: LD_INT 3
10941: ARRAY
10942: PPUSH
10943: LD_VAR 0 5
10947: PUSH
10948: LD_VAR 0 3
10952: ARRAY
10953: PUSH
10954: LD_INT 4
10956: ARRAY
10957: PPUSH
10958: CALL_OW 205
10962: GO 10890
10964: POP
10965: POP
// end ; if position = 2 then
10966: LD_VAR 0 1
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: IFFALSE 11589
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10976: LD_ADDR_VAR 0 4
10980: PUSH
10981: LD_INT 22
10983: PUSH
10984: LD_INT 3
10986: PUSH
10987: EMPTY
10988: LIST
10989: LIST
10990: PUSH
10991: LD_INT 25
10993: PUSH
10994: LD_INT 2
10996: PUSH
10997: EMPTY
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: PPUSH
11005: CALL_OW 69
11009: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11010: LD_ADDR_VAR 0 5
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 110
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 4
11035: PUSH
11036: LD_INT 98
11038: PUSH
11039: LD_INT 90
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 29
11053: PUSH
11054: LD_INT 103
11056: PUSH
11057: LD_INT 114
11059: PUSH
11060: LD_INT 2
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 30
11071: PUSH
11072: LD_INT 99
11074: PUSH
11075: LD_INT 114
11077: PUSH
11078: LD_INT 3
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 28
11089: PUSH
11090: LD_INT 100
11092: PUSH
11093: LD_INT 112
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: LD_INT 92
11110: PUSH
11111: LD_INT 101
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 28
11125: PUSH
11126: LD_INT 97
11128: PUSH
11129: LD_INT 116
11131: PUSH
11132: LD_INT 5
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 17
11143: PUSH
11144: LD_INT 96
11146: PUSH
11147: LD_INT 101
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 18
11161: PUSH
11162: LD_INT 88
11164: PUSH
11165: LD_INT 97
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 28
11179: PUSH
11180: LD_INT 106
11182: PUSH
11183: LD_INT 92
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 32
11197: PUSH
11198: LD_INT 88
11200: PUSH
11201: LD_INT 89
11203: PUSH
11204: LD_INT 2
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 32
11215: PUSH
11216: LD_INT 86
11218: PUSH
11219: LD_INT 90
11221: PUSH
11222: LD_INT 2
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 32
11233: PUSH
11234: LD_INT 85
11236: PUSH
11237: LD_INT 99
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 32
11251: PUSH
11252: LD_INT 85
11254: PUSH
11255: LD_INT 107
11257: PUSH
11258: LD_INT 1
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 33
11269: PUSH
11270: LD_INT 105
11272: PUSH
11273: LD_INT 99
11275: PUSH
11276: LD_INT 1
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 33
11287: PUSH
11288: LD_INT 102
11290: PUSH
11291: LD_INT 92
11293: PUSH
11294: LD_INT 3
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 33
11305: PUSH
11306: LD_INT 105
11308: PUSH
11309: LD_INT 92
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 6
11323: PUSH
11324: LD_INT 92
11326: PUSH
11327: LD_INT 110
11329: PUSH
11330: LD_INT 0
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 6
11341: PUSH
11342: LD_INT 103
11344: PUSH
11345: LD_INT 103
11347: PUSH
11348: LD_INT 5
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 21
11359: PUSH
11360: LD_INT 89
11362: PUSH
11363: LD_INT 101
11365: PUSH
11366: LD_INT 1
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 16
11377: PUSH
11378: LD_INT 95
11380: PUSH
11381: LD_INT 104
11383: PUSH
11384: LD_INT 4
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 24
11395: PUSH
11396: LD_INT 92
11398: PUSH
11399: LD_INT 105
11401: PUSH
11402: LD_INT 0
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_INT 22
11442: PUSH
11443: LD_INT 3
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: PUSH
11450: LD_INT 3
11452: PUSH
11453: LD_INT 25
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: PPUSH
11471: CALL_OW 69
11475: PUSH
11476: FOR_IN
11477: IFFALSE 11496
// AddComAgressiveMove ( i , 96 , 99 ) ;
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 96
11486: PPUSH
11487: LD_INT 99
11489: PPUSH
11490: CALL_OW 174
11494: GO 11476
11496: POP
11497: POP
// for i := 1 to buildingsTab do
11498: LD_ADDR_VAR 0 3
11502: PUSH
11503: DOUBLE
11504: LD_INT 1
11506: DEC
11507: ST_TO_ADDR
11508: LD_VAR 0 5
11512: PUSH
11513: FOR_TO
11514: IFFALSE 11587
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11516: LD_VAR 0 4
11520: PPUSH
11521: LD_VAR 0 5
11525: PUSH
11526: LD_VAR 0 3
11530: ARRAY
11531: PUSH
11532: LD_INT 1
11534: ARRAY
11535: PPUSH
11536: LD_VAR 0 5
11540: PUSH
11541: LD_VAR 0 3
11545: ARRAY
11546: PUSH
11547: LD_INT 2
11549: ARRAY
11550: PPUSH
11551: LD_VAR 0 5
11555: PUSH
11556: LD_VAR 0 3
11560: ARRAY
11561: PUSH
11562: LD_INT 3
11564: ARRAY
11565: PPUSH
11566: LD_VAR 0 5
11570: PUSH
11571: LD_VAR 0 3
11575: ARRAY
11576: PUSH
11577: LD_INT 4
11579: ARRAY
11580: PPUSH
11581: CALL_OW 205
11585: GO 11513
11587: POP
11588: POP
// end ; if position = 3 then
11589: LD_VAR 0 1
11593: PUSH
11594: LD_INT 3
11596: EQUAL
11597: IFFALSE 12383
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11599: LD_ADDR_VAR 0 4
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_INT 3
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 2
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PPUSH
11628: CALL_OW 69
11632: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11633: LD_ADDR_VAR 0 5
11637: PUSH
11638: LD_INT 0
11640: PUSH
11641: LD_INT 151
11643: PUSH
11644: LD_INT 71
11646: PUSH
11647: LD_INT 4
11649: PUSH
11650: EMPTY
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 4
11658: PUSH
11659: LD_INT 145
11661: PUSH
11662: LD_INT 53
11664: PUSH
11665: LD_INT 3
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 4
11676: PUSH
11677: LD_INT 172
11679: PUSH
11680: LD_INT 102
11682: PUSH
11683: LD_INT 5
11685: PUSH
11686: EMPTY
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: LD_INT 29
11694: PUSH
11695: LD_INT 152
11697: PUSH
11698: LD_INT 85
11700: PUSH
11701: LD_INT 3
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: PUSH
11710: LD_INT 30
11712: PUSH
11713: LD_INT 156
11715: PUSH
11716: LD_INT 92
11718: PUSH
11719: LD_INT 3
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 28
11730: PUSH
11731: LD_INT 151
11733: PUSH
11734: LD_INT 66
11736: PUSH
11737: LD_INT 4
11739: PUSH
11740: EMPTY
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: PUSH
11746: LD_INT 2
11748: PUSH
11749: LD_INT 163
11751: PUSH
11752: LD_INT 95
11754: PUSH
11755: LD_INT 5
11757: PUSH
11758: EMPTY
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: LD_INT 28
11766: PUSH
11767: LD_INT 149
11769: PUSH
11770: LD_INT 63
11772: PUSH
11773: LD_INT 4
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: PUSH
11782: LD_INT 17
11784: PUSH
11785: LD_INT 167
11787: PUSH
11788: LD_INT 99
11790: PUSH
11791: LD_INT 5
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: LD_INT 18
11802: PUSH
11803: LD_INT 163
11805: PUSH
11806: LD_INT 98
11808: PUSH
11809: LD_INT 0
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 28
11820: PUSH
11821: LD_INT 154
11823: PUSH
11824: LD_INT 70
11826: PUSH
11827: LD_INT 4
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 32
11838: PUSH
11839: LD_INT 155
11841: PUSH
11842: LD_INT 62
11844: PUSH
11845: LD_INT 4
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: PUSH
11854: LD_INT 32
11856: PUSH
11857: LD_INT 161
11859: PUSH
11860: LD_INT 69
11862: PUSH
11863: LD_INT 4
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: PUSH
11872: LD_INT 32
11874: PUSH
11875: LD_INT 168
11877: PUSH
11878: LD_INT 78
11880: PUSH
11881: LD_INT 4
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: PUSH
11890: LD_INT 32
11892: PUSH
11893: LD_INT 163
11895: PUSH
11896: LD_INT 80
11898: PUSH
11899: LD_INT 5
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: PUSH
11908: LD_INT 32
11910: PUSH
11911: LD_INT 136
11913: PUSH
11914: LD_INT 73
11916: PUSH
11917: LD_INT 0
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 32
11928: PUSH
11929: LD_INT 157
11931: PUSH
11932: LD_INT 98
11934: PUSH
11935: LD_INT 0
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: LIST
11942: LIST
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: LD_INT 150
11949: PUSH
11950: LD_INT 87
11952: PUSH
11953: LD_INT 1
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 33
11964: PUSH
11965: LD_INT 171
11967: PUSH
11968: LD_INT 97
11970: PUSH
11971: LD_INT 4
11973: PUSH
11974: EMPTY
11975: LIST
11976: LIST
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 33
11982: PUSH
11983: LD_INT 168
11985: PUSH
11986: LD_INT 92
11988: PUSH
11989: LD_INT 4
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 33
12000: PUSH
12001: LD_INT 166
12003: PUSH
12004: LD_INT 80
12006: PUSH
12007: LD_INT 5
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 33
12018: PUSH
12019: LD_INT 141
12021: PUSH
12022: LD_INT 54
12024: PUSH
12025: LD_INT 2
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: PUSH
12034: LD_INT 33
12036: PUSH
12037: LD_INT 133
12039: PUSH
12040: LD_INT 57
12042: PUSH
12043: LD_INT 2
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 33
12054: PUSH
12055: LD_INT 132
12057: PUSH
12058: LD_INT 61
12060: PUSH
12061: LD_INT 2
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 33
12072: PUSH
12073: LD_INT 150
12075: PUSH
12076: LD_INT 82
12078: PUSH
12079: LD_INT 0
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: LIST
12086: LIST
12087: PUSH
12088: LD_INT 33
12090: PUSH
12091: LD_INT 132
12093: PUSH
12094: LD_INT 72
12096: PUSH
12097: LD_INT 0
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 6
12108: PUSH
12109: LD_INT 146
12111: PUSH
12112: LD_INT 64
12114: PUSH
12115: LD_INT 4
12117: PUSH
12118: EMPTY
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: PUSH
12124: LD_INT 6
12126: PUSH
12127: LD_INT 159
12129: PUSH
12130: LD_INT 85
12132: PUSH
12133: LD_INT 4
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: LD_INT 21
12144: PUSH
12145: LD_INT 163
12147: PUSH
12148: LD_INT 91
12150: PUSH
12151: LD_INT 3
12153: PUSH
12154: EMPTY
12155: LIST
12156: LIST
12157: LIST
12158: LIST
12159: PUSH
12160: LD_INT 16
12162: PUSH
12163: LD_INT 166
12165: PUSH
12166: LD_INT 95
12168: PUSH
12169: LD_INT 4
12171: PUSH
12172: EMPTY
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: PUSH
12178: LD_INT 24
12180: PUSH
12181: LD_INT 159
12183: PUSH
12184: LD_INT 95
12186: PUSH
12187: LD_INT 1
12189: PUSH
12190: EMPTY
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12229: LD_ADDR_VAR 0 3
12233: PUSH
12234: LD_INT 22
12236: PUSH
12237: LD_INT 3
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 3
12246: PUSH
12247: LD_INT 25
12249: PUSH
12250: LD_INT 2
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 69
12269: PUSH
12270: FOR_IN
12271: IFFALSE 12290
// AddComAgressiveMove ( i , 141 , 65 ) ;
12273: LD_VAR 0 3
12277: PPUSH
12278: LD_INT 141
12280: PPUSH
12281: LD_INT 65
12283: PPUSH
12284: CALL_OW 174
12288: GO 12270
12290: POP
12291: POP
// for i := 1 to buildingsTab do
12292: LD_ADDR_VAR 0 3
12296: PUSH
12297: DOUBLE
12298: LD_INT 1
12300: DEC
12301: ST_TO_ADDR
12302: LD_VAR 0 5
12306: PUSH
12307: FOR_TO
12308: IFFALSE 12381
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12310: LD_VAR 0 4
12314: PPUSH
12315: LD_VAR 0 5
12319: PUSH
12320: LD_VAR 0 3
12324: ARRAY
12325: PUSH
12326: LD_INT 1
12328: ARRAY
12329: PPUSH
12330: LD_VAR 0 5
12334: PUSH
12335: LD_VAR 0 3
12339: ARRAY
12340: PUSH
12341: LD_INT 2
12343: ARRAY
12344: PPUSH
12345: LD_VAR 0 5
12349: PUSH
12350: LD_VAR 0 3
12354: ARRAY
12355: PUSH
12356: LD_INT 3
12358: ARRAY
12359: PPUSH
12360: LD_VAR 0 5
12364: PUSH
12365: LD_VAR 0 3
12369: ARRAY
12370: PUSH
12371: LD_INT 4
12373: ARRAY
12374: PPUSH
12375: CALL_OW 205
12379: GO 12307
12381: POP
12382: POP
// end ; end ;
12383: LD_VAR 0 2
12387: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12388: LD_INT 0
12390: PPUSH
12391: PPUSH
12392: PPUSH
12393: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12394: LD_ADDR_VAR 0 3
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: LD_INT 2
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 25
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_INT 0
12435: PPUSH
12436: LD_INT 71
12438: PPUSH
12439: LD_INT 15
12441: PPUSH
12442: LD_INT 3
12444: PPUSH
12445: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12449: LD_ADDR_VAR 0 4
12453: PUSH
12454: LD_INT 6
12456: PUSH
12457: LD_INT 77
12459: PUSH
12460: LD_INT 18
12462: PUSH
12463: LD_INT 3
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: PUSH
12472: LD_INT 4
12474: PUSH
12475: LD_INT 77
12477: PUSH
12478: LD_INT 26
12480: PUSH
12481: LD_INT 0
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: PUSH
12490: LD_INT 31
12492: PUSH
12493: LD_INT 82
12495: PUSH
12496: LD_INT 28
12498: PUSH
12499: LD_INT 0
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: LIST
12506: LIST
12507: PUSH
12508: LD_INT 31
12510: PUSH
12511: LD_INT 84
12513: PUSH
12514: LD_INT 21
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 31
12528: PUSH
12529: LD_INT 66
12531: PUSH
12532: LD_INT 14
12534: PUSH
12535: LD_INT 2
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 27
12546: PUSH
12547: LD_INT 67
12549: PUSH
12550: LD_INT 18
12552: PUSH
12553: LD_INT 5
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: PUSH
12562: LD_INT 27
12564: PUSH
12565: LD_INT 69
12567: PUSH
12568: LD_INT 23
12570: PUSH
12571: LD_INT 2
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: ST_TO_ADDR
// for i := 1 to buildingsTab do
12589: LD_ADDR_VAR 0 2
12593: PUSH
12594: DOUBLE
12595: LD_INT 1
12597: DEC
12598: ST_TO_ADDR
12599: LD_VAR 0 4
12603: PUSH
12604: FOR_TO
12605: IFFALSE 12678
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12607: LD_VAR 0 3
12611: PPUSH
12612: LD_VAR 0 4
12616: PUSH
12617: LD_VAR 0 2
12621: ARRAY
12622: PUSH
12623: LD_INT 1
12625: ARRAY
12626: PPUSH
12627: LD_VAR 0 4
12631: PUSH
12632: LD_VAR 0 2
12636: ARRAY
12637: PUSH
12638: LD_INT 2
12640: ARRAY
12641: PPUSH
12642: LD_VAR 0 4
12646: PUSH
12647: LD_VAR 0 2
12651: ARRAY
12652: PUSH
12653: LD_INT 3
12655: ARRAY
12656: PPUSH
12657: LD_VAR 0 4
12661: PUSH
12662: LD_VAR 0 2
12666: ARRAY
12667: PUSH
12668: LD_INT 4
12670: ARRAY
12671: PPUSH
12672: CALL_OW 205
12676: GO 12604
12678: POP
12679: POP
// end ;
12680: LD_VAR 0 1
12684: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12685: LD_INT 0
12687: PPUSH
12688: PPUSH
12689: PPUSH
12690: PPUSH
12691: PPUSH
12692: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_INT 22
12700: PUSH
12701: LD_VAR 0 1
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 25
12712: PUSH
12713: LD_INT 9
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PPUSH
12724: CALL_OW 69
12728: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12729: LD_ADDR_VAR 0 8
12733: PUSH
12734: LD_INT 22
12736: PUSH
12737: LD_VAR 0 2
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 3
12748: PUSH
12749: LD_INT 21
12751: PUSH
12752: LD_INT 3
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: PUSH
12759: EMPTY
12760: LIST
12761: LIST
12762: PUSH
12763: EMPTY
12764: LIST
12765: LIST
12766: PPUSH
12767: CALL_OW 69
12771: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12772: LD_ADDR_VAR 0 5
12776: PUSH
12777: LD_INT 1
12779: PPUSH
12780: LD_INT 3
12782: PPUSH
12783: CALL_OW 12
12787: ST_TO_ADDR
// for i = 1 to list do
12788: LD_ADDR_VAR 0 6
12792: PUSH
12793: DOUBLE
12794: LD_INT 1
12796: DEC
12797: ST_TO_ADDR
12798: LD_VAR 0 7
12802: PUSH
12803: FOR_TO
12804: IFFALSE 13774
// for ta in filter do
12806: LD_ADDR_VAR 0 4
12810: PUSH
12811: LD_VAR 0 8
12815: PUSH
12816: FOR_IN
12817: IFFALSE 13770
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
12819: LD_VAR 0 7
12823: PUSH
12824: LD_VAR 0 6
12828: ARRAY
12829: PPUSH
12830: LD_VAR 0 4
12834: PPUSH
12835: CALL_OW 296
12839: PUSH
12840: LD_INT 12
12842: LESSEQUAL
12843: IFFALSE 13768
// begin case c of 1 :
12845: LD_VAR 0 5
12849: PUSH
12850: LD_INT 1
12852: DOUBLE
12853: EQUAL
12854: IFTRUE 12858
12856: GO 13290
12858: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
12859: LD_VAR 0 7
12863: PUSH
12864: LD_VAR 0 6
12868: ARRAY
12869: PPUSH
12870: LD_VAR 0 4
12874: PPUSH
12875: CALL_OW 250
12879: PPUSH
12880: LD_VAR 0 4
12884: PPUSH
12885: CALL_OW 251
12889: PPUSH
12890: CALL_OW 154
// if eventVar2 = 0 then
12894: LD_EXP 62
12898: PUSH
12899: LD_INT 0
12901: EQUAL
12902: IFFALSE 13288
// begin eventVar2 = 1 ;
12904: LD_ADDR_EXP 62
12908: PUSH
12909: LD_INT 1
12911: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12912: LD_INT 245
12914: PPUSH
12915: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
12919: LD_VAR 0 4
12923: PPUSH
12924: CALL_OW 250
12928: PPUSH
12929: LD_VAR 0 4
12933: PPUSH
12934: CALL_OW 251
12938: PPUSH
12939: CALL_OW 84
// DialogueOn ;
12943: CALL_OW 6
// if IsOK ( Cyrus ) then
12947: LD_EXP 5
12951: PPUSH
12952: CALL_OW 302
12956: IFFALSE 12972
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
12958: LD_EXP 5
12962: PPUSH
12963: LD_STRING D9a-Cyrus-1
12965: PPUSH
12966: CALL_OW 88
// end else
12970: GO 13094
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
12972: LD_INT 22
12974: PUSH
12975: LD_INT 1
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 26
12984: PUSH
12985: LD_INT 1
12987: PUSH
12988: EMPTY
12989: LIST
12990: LIST
12991: PUSH
12992: LD_INT 2
12994: PUSH
12995: LD_INT 25
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: PUSH
13005: LD_INT 25
13007: PUSH
13008: LD_INT 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 25
13017: PUSH
13018: LD_INT 3
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 25
13027: PUSH
13028: LD_INT 4
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 25
13037: PUSH
13038: LD_INT 5
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: LIST
13057: PPUSH
13058: CALL_OW 69
13062: PUSH
13063: LD_EXP 1
13067: PUSH
13068: LD_EXP 14
13072: PUSH
13073: LD_EXP 5
13077: PUSH
13078: EMPTY
13079: LIST
13080: LIST
13081: LIST
13082: DIFF
13083: PPUSH
13084: LD_STRING D9a-Sol1-1
13086: PPUSH
13087: LD_STRING D9a-Sol1-1
13089: PPUSH
13090: CALL 9340 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13094: LD_INT 22
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 2
13116: PUSH
13117: LD_INT 25
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 25
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: EMPTY
13134: LIST
13135: LIST
13136: PUSH
13137: LD_INT 25
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PUSH
13147: LD_INT 25
13149: PUSH
13150: LD_INT 4
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 25
13159: PUSH
13160: LD_INT 5
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: LIST
13171: LIST
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: PPUSH
13180: CALL_OW 69
13184: PUSH
13185: LD_EXP 1
13189: PUSH
13190: LD_EXP 14
13194: PUSH
13195: LD_EXP 5
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: LIST
13204: DIFF
13205: PPUSH
13206: LD_STRING D9b-Sol1-1
13208: PPUSH
13209: LD_STRING D9b-Sol1-1
13211: PPUSH
13212: CALL 9340 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13216: LD_STRING 09_arInfo
13218: PPUSH
13219: LD_INT 0
13221: PPUSH
13222: CALL_OW 30
13226: PUSH
13227: LD_INT 1
13229: EQUAL
13230: IFFALSE 13244
// Say ( JMM , D9a-JMM-1 ) ;
13232: LD_EXP 1
13236: PPUSH
13237: LD_STRING D9a-JMM-1
13239: PPUSH
13240: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13244: LD_EXP 1
13248: PPUSH
13249: LD_STRING D9c-JMM-1
13251: PPUSH
13252: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13256: LD_INT 12
13258: PPUSH
13259: LD_INT 1
13261: PPUSH
13262: CALL_OW 321
13266: PUSH
13267: LD_INT 2
13269: EQUAL
13270: IFFALSE 13284
// Say ( JMM , D9c-JMM-1a ) ;
13272: LD_EXP 1
13276: PPUSH
13277: LD_STRING D9c-JMM-1a
13279: PPUSH
13280: CALL_OW 88
// DialogueOff ;
13284: CALL_OW 7
// end ; end ; 2 :
13288: GO 13768
13290: LD_INT 2
13292: DOUBLE
13293: EQUAL
13294: IFTRUE 13298
13296: GO 13756
13298: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13299: LD_VAR 0 7
13303: PUSH
13304: LD_VAR 0 6
13308: ARRAY
13309: PPUSH
13310: LD_VAR 0 4
13314: PPUSH
13315: CALL_OW 250
13319: PUSH
13320: LD_INT 1
13322: NEG
13323: PPUSH
13324: LD_INT 1
13326: PPUSH
13327: CALL_OW 12
13331: PLUS
13332: PPUSH
13333: LD_VAR 0 4
13337: PPUSH
13338: CALL_OW 251
13342: PUSH
13343: LD_INT 1
13345: NEG
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 12
13354: PLUS
13355: PPUSH
13356: CALL_OW 153
// if eventVar2 = 0 then
13360: LD_EXP 62
13364: PUSH
13365: LD_INT 0
13367: EQUAL
13368: IFFALSE 13754
// begin eventVar2 = 1 ;
13370: LD_ADDR_EXP 62
13374: PUSH
13375: LD_INT 1
13377: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13378: LD_INT 245
13380: PPUSH
13381: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13385: LD_VAR 0 4
13389: PPUSH
13390: CALL_OW 250
13394: PPUSH
13395: LD_VAR 0 4
13399: PPUSH
13400: CALL_OW 251
13404: PPUSH
13405: CALL_OW 84
// DialogueOn ;
13409: CALL_OW 6
// if IsOK ( Cyrus ) then
13413: LD_EXP 5
13417: PPUSH
13418: CALL_OW 302
13422: IFFALSE 13438
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13424: LD_EXP 5
13428: PPUSH
13429: LD_STRING D9a-Cyrus-1
13431: PPUSH
13432: CALL_OW 88
// end else
13436: GO 13560
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13438: LD_INT 22
13440: PUSH
13441: LD_INT 1
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 26
13450: PUSH
13451: LD_INT 1
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 2
13460: PUSH
13461: LD_INT 25
13463: PUSH
13464: LD_INT 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 2
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 25
13483: PUSH
13484: LD_INT 3
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 25
13493: PUSH
13494: LD_INT 4
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: LD_INT 25
13503: PUSH
13504: LD_INT 5
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PPUSH
13524: CALL_OW 69
13528: PUSH
13529: LD_EXP 1
13533: PUSH
13534: LD_EXP 14
13538: PUSH
13539: LD_EXP 5
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: DIFF
13549: PPUSH
13550: LD_STRING D9a-Sol1-1
13552: PPUSH
13553: LD_STRING D9a-Sol1-1
13555: PPUSH
13556: CALL 9340 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13560: LD_INT 22
13562: PUSH
13563: LD_INT 1
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 26
13572: PUSH
13573: LD_INT 1
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 2
13582: PUSH
13583: LD_INT 25
13585: PUSH
13586: LD_INT 1
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 25
13595: PUSH
13596: LD_INT 2
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 25
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 25
13615: PUSH
13616: LD_INT 4
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 25
13625: PUSH
13626: LD_INT 5
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: PPUSH
13646: CALL_OW 69
13650: PUSH
13651: LD_EXP 1
13655: PUSH
13656: LD_EXP 14
13660: PUSH
13661: LD_EXP 5
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: DIFF
13671: PPUSH
13672: LD_STRING D9b-Sol1-1
13674: PPUSH
13675: LD_STRING D9b-Sol1-1
13677: PPUSH
13678: CALL 9340 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13682: LD_STRING 09_arInfo
13684: PPUSH
13685: LD_INT 0
13687: PPUSH
13688: CALL_OW 30
13692: PUSH
13693: LD_INT 1
13695: EQUAL
13696: IFFALSE 13710
// Say ( JMM , D9a-JMM-1 ) ;
13698: LD_EXP 1
13702: PPUSH
13703: LD_STRING D9a-JMM-1
13705: PPUSH
13706: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13710: LD_EXP 1
13714: PPUSH
13715: LD_STRING D9c-JMM-1
13717: PPUSH
13718: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13722: LD_INT 12
13724: PPUSH
13725: LD_INT 1
13727: PPUSH
13728: CALL_OW 321
13732: PUSH
13733: LD_INT 2
13735: EQUAL
13736: IFFALSE 13750
// Say ( JMM , D9c-JMM-1a ) ;
13738: LD_EXP 1
13742: PPUSH
13743: LD_STRING D9c-JMM-1a
13745: PPUSH
13746: CALL_OW 88
// DialogueOff ;
13750: CALL_OW 7
// end ; end ; 3 :
13754: GO 13768
13756: LD_INT 3
13758: DOUBLE
13759: EQUAL
13760: IFTRUE 13764
13762: GO 13767
13764: POP
// ; end ;
13765: GO 13768
13767: POP
// end ; end ;
13768: GO 12816
13770: POP
13771: POP
13772: GO 12803
13774: POP
13775: POP
// end ;
13776: LD_VAR 0 3
13780: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13781: LD_INT 0
13783: PPUSH
13784: PPUSH
13785: PPUSH
13786: PPUSH
// for i = 1 to 72 do
13787: LD_ADDR_VAR 0 5
13791: PUSH
13792: DOUBLE
13793: LD_INT 1
13795: DEC
13796: ST_TO_ADDR
13797: LD_INT 72
13799: PUSH
13800: FOR_TO
13801: IFFALSE 13859
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13803: LD_VAR 0 5
13807: PPUSH
13808: LD_VAR 0 1
13812: PPUSH
13813: CALL_OW 321
13817: PUSH
13818: LD_INT 1
13820: EQUAL
13821: PUSH
13822: LD_VAR 0 5
13826: PPUSH
13827: LD_VAR 0 3
13831: PPUSH
13832: CALL_OW 482
13836: PUSH
13837: LD_INT 1
13839: EQUAL
13840: AND
13841: IFFALSE 13857
// AddComResearch ( lab , i ) ;
13843: LD_VAR 0 2
13847: PPUSH
13848: LD_VAR 0 5
13852: PPUSH
13853: CALL_OW 184
13857: GO 13800
13859: POP
13860: POP
// end ;
13861: LD_VAR 0 4
13865: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
13866: LD_INT 0
13868: PPUSH
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
13874: PPUSH
13875: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
13876: LD_ADDR_VAR 0 6
13880: PUSH
13881: LD_INT 22
13883: PUSH
13884: LD_VAR 0 1
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 56
13895: PUSH
13896: EMPTY
13897: LIST
13898: PUSH
13899: LD_INT 24
13901: PUSH
13902: LD_INT 700
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 3
13911: PUSH
13912: LD_INT 60
13914: PUSH
13915: EMPTY
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 25
13927: PUSH
13928: LD_INT 1
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: LD_INT 25
13937: PUSH
13938: LD_INT 9
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: PUSH
13945: EMPTY
13946: LIST
13947: LIST
13948: LIST
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: PPUSH
13957: CALL_OW 69
13961: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
13962: LD_ADDR_VAR 0 7
13966: PUSH
13967: LD_INT 22
13969: PUSH
13970: LD_VAR 0 1
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 30
13981: PUSH
13982: LD_INT 32
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 58
13991: PUSH
13992: EMPTY
13993: LIST
13994: PUSH
13995: LD_INT 24
13997: PUSH
13998: LD_INT 251
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: PPUSH
14011: CALL_OW 69
14015: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14016: LD_ADDR_VAR 0 9
14020: PUSH
14021: LD_INT 22
14023: PUSH
14024: LD_VAR 0 1
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 2
14035: PUSH
14036: LD_INT 30
14038: PUSH
14039: LD_INT 4
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 30
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 24
14063: PUSH
14064: LD_INT 251
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: PPUSH
14076: CALL_OW 69
14080: ST_TO_ADDR
// if barrackList > 0 then
14081: LD_VAR 0 9
14085: PUSH
14086: LD_INT 0
14088: GREATER
14089: IFFALSE 14224
// begin if turretList = 0 then
14091: LD_VAR 0 7
14095: PUSH
14096: LD_INT 0
14098: EQUAL
14099: IFFALSE 14148
// begin for i in soldiers_list do
14101: LD_ADDR_VAR 0 4
14105: PUSH
14106: LD_VAR 0 6
14110: PUSH
14111: FOR_IN
14112: IFFALSE 14144
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14114: LD_VAR 0 4
14118: PPUSH
14119: LD_VAR 0 9
14123: PUSH
14124: LD_INT 1
14126: PPUSH
14127: LD_VAR 0 9
14131: PPUSH
14132: CALL_OW 12
14136: ARRAY
14137: PPUSH
14138: CALL_OW 120
14142: GO 14111
14144: POP
14145: POP
// end else
14146: GO 14224
// begin for i in barrackList do
14148: LD_ADDR_VAR 0 4
14152: PUSH
14153: LD_VAR 0 9
14157: PUSH
14158: FOR_IN
14159: IFFALSE 14222
// begin insideUnits = UnitsInside ( i ) ;
14161: LD_ADDR_VAR 0 10
14165: PUSH
14166: LD_VAR 0 4
14170: PPUSH
14171: CALL_OW 313
14175: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14176: LD_VAR 0 10
14180: PUSH
14181: LD_INT 1
14183: ARRAY
14184: PPUSH
14185: LD_VAR 0 7
14189: PUSH
14190: LD_INT 1
14192: ARRAY
14193: PPUSH
14194: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14198: LD_VAR 0 6
14202: PUSH
14203: LD_INT 1
14205: ARRAY
14206: PPUSH
14207: LD_VAR 0 7
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: CALL_OW 120
// end ;
14220: GO 14158
14222: POP
14223: POP
// end ; end ; end ;
14224: LD_VAR 0 3
14228: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14229: LD_INT 0
14231: PPUSH
14232: PPUSH
14233: PPUSH
14234: PPUSH
14235: PPUSH
14236: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14237: LD_ADDR_VAR 0 6
14241: PUSH
14242: LD_VAR 0 2
14246: PPUSH
14247: CALL_OW 313
14251: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14252: LD_ADDR_VAR 0 7
14256: PUSH
14257: LD_INT 22
14259: PUSH
14260: LD_VAR 0 1
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 25
14271: PUSH
14272: LD_INT 2
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: PUSH
14279: LD_INT 24
14281: PUSH
14282: LD_INT 1000
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 3
14291: PUSH
14292: LD_INT 54
14294: PUSH
14295: EMPTY
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: LIST
14306: LIST
14307: PPUSH
14308: CALL_OW 69
14312: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14313: LD_ADDR_VAR 0 4
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_VAR 0 1
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 3
14342: PUSH
14343: LD_INT 24
14345: PUSH
14346: LD_INT 1000
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: PUSH
14362: EMPTY
14363: LIST
14364: PPUSH
14365: CALL_OW 69
14369: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14370: LD_VAR 0 4
14374: NOT
14375: PUSH
14376: LD_VAR 0 7
14380: NOT
14381: AND
14382: PUSH
14383: LD_EXP 42
14387: NOT
14388: AND
14389: IFFALSE 14393
// exit ;
14391: GO 14584
// if buildings_list > 0 and engineerOkInside then
14393: LD_VAR 0 4
14397: PUSH
14398: LD_INT 0
14400: GREATER
14401: PUSH
14402: LD_VAR 0 6
14406: AND
14407: IFFALSE 14461
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14409: LD_ADDR_VAR 0 5
14413: PUSH
14414: LD_INT 22
14416: PUSH
14417: LD_VAR 0 1
14421: PUSH
14422: EMPTY
14423: LIST
14424: LIST
14425: PUSH
14426: LD_INT 25
14428: PUSH
14429: LD_INT 2
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PPUSH
14440: CALL_OW 69
14444: PUSH
14445: FOR_IN
14446: IFFALSE 14459
// ComExitBuilding ( i ) ;
14448: LD_VAR 0 5
14452: PPUSH
14453: CALL_OW 122
14457: GO 14445
14459: POP
14460: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14461: LD_VAR 0 4
14465: PUSH
14466: LD_INT 0
14468: GREATER
14469: PUSH
14470: LD_VAR 0 7
14474: PUSH
14475: LD_INT 0
14477: GREATER
14478: AND
14479: IFFALSE 14533
// begin for i in engineerOkOutside do
14481: LD_ADDR_VAR 0 5
14485: PUSH
14486: LD_VAR 0 7
14490: PUSH
14491: FOR_IN
14492: IFFALSE 14531
// for j in buildings_list do
14494: LD_ADDR_VAR 0 8
14498: PUSH
14499: LD_VAR 0 4
14503: PUSH
14504: FOR_IN
14505: IFFALSE 14527
// ComRepairBuilding ( i , j [ 1 ] ) ;
14507: LD_VAR 0 5
14511: PPUSH
14512: LD_VAR 0 8
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: CALL_OW 130
14525: GO 14504
14527: POP
14528: POP
14529: GO 14491
14531: POP
14532: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14533: LD_VAR 0 4
14537: PUSH
14538: LD_INT 0
14540: EQUAL
14541: PUSH
14542: LD_VAR 0 7
14546: PUSH
14547: LD_INT 0
14549: GREATER
14550: AND
14551: IFFALSE 14584
// for i in engineerOkOutside do
14553: LD_ADDR_VAR 0 5
14557: PUSH
14558: LD_VAR 0 7
14562: PUSH
14563: FOR_IN
14564: IFFALSE 14582
// ComEnterUnit ( i , building ) ;
14566: LD_VAR 0 5
14570: PPUSH
14571: LD_VAR 0 2
14575: PPUSH
14576: CALL_OW 120
14580: GO 14563
14582: POP
14583: POP
// end ;
14584: LD_VAR 0 3
14588: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14589: LD_INT 0
14591: PPUSH
14592: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14593: LD_INT 22
14595: PUSH
14596: LD_VAR 0 1
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: PUSH
14605: LD_INT 25
14607: PUSH
14608: LD_INT 2
14610: PUSH
14611: EMPTY
14612: LIST
14613: LIST
14614: PUSH
14615: EMPTY
14616: LIST
14617: LIST
14618: PPUSH
14619: CALL_OW 69
14623: PUSH
14624: LD_INT 0
14626: GREATER
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_VAR 0 1
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 21
14642: PUSH
14643: LD_INT 3
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 3
14652: PUSH
14653: LD_INT 24
14655: PUSH
14656: LD_INT 1000
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: LIST
14671: PPUSH
14672: CALL_OW 69
14676: PUSH
14677: LD_INT 0
14679: EQUAL
14680: AND
14681: PUSH
14682: LD_VAR 0 2
14686: PUSH
14687: LD_INT 0
14689: GREATER
14690: AND
14691: IFFALSE 14790
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14693: LD_ADDR_VAR 0 4
14697: PUSH
14698: LD_INT 22
14700: PUSH
14701: LD_VAR 0 1
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 25
14712: PUSH
14713: LD_INT 2
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 69
14728: PUSH
14729: FOR_IN
14730: IFFALSE 14788
// begin AddComExitBuilding ( i ) ;
14732: LD_VAR 0 4
14736: PPUSH
14737: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14741: LD_VAR 0 4
14745: PPUSH
14746: LD_VAR 0 2
14750: PUSH
14751: LD_INT 1
14753: ARRAY
14754: PPUSH
14755: LD_VAR 0 2
14759: PUSH
14760: LD_INT 2
14762: ARRAY
14763: PPUSH
14764: LD_VAR 0 2
14768: PUSH
14769: LD_INT 3
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 2
14777: PUSH
14778: LD_INT 4
14780: ARRAY
14781: PPUSH
14782: CALL_OW 205
// end ;
14786: GO 14729
14788: POP
14789: POP
// end ; end ;
14790: LD_VAR 0 3
14794: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14795: LD_INT 0
14797: PPUSH
14798: PPUSH
14799: PPUSH
14800: PPUSH
14801: PPUSH
14802: PPUSH
14803: PPUSH
14804: PPUSH
14805: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
14806: LD_ADDR_VAR 0 6
14810: PUSH
14811: LD_INT 22
14813: PUSH
14814: LD_VAR 0 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 25
14825: PUSH
14826: LD_INT 4
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 24
14835: PUSH
14836: LD_INT 251
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: LIST
14847: PPUSH
14848: CALL_OW 69
14852: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
14853: LD_ADDR_VAR 0 7
14857: PUSH
14858: LD_VAR 0 3
14862: PPUSH
14863: LD_INT 22
14865: PUSH
14866: LD_VAR 0 1
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PUSH
14875: LD_INT 25
14877: PUSH
14878: LD_INT 4
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 50
14887: PUSH
14888: EMPTY
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: LIST
14895: PPUSH
14896: CALL_OW 70
14900: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14901: LD_ADDR_VAR 0 10
14905: PUSH
14906: LD_VAR 0 3
14910: PPUSH
14911: LD_INT 22
14913: PUSH
14914: LD_VAR 0 1
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: LD_INT 21
14925: PUSH
14926: LD_INT 1
14928: PUSH
14929: EMPTY
14930: LIST
14931: LIST
14932: PUSH
14933: LD_INT 3
14935: PUSH
14936: LD_INT 25
14938: PUSH
14939: LD_INT 3
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 3
14952: PUSH
14953: LD_INT 24
14955: PUSH
14956: LD_INT 750
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: PPUSH
14973: CALL_OW 70
14977: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14978: LD_ADDR_VAR 0 11
14982: PUSH
14983: LD_VAR 0 2
14987: PPUSH
14988: LD_INT 22
14990: PUSH
14991: LD_VAR 0 1
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 21
15002: PUSH
15003: LD_INT 1
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 3
15012: PUSH
15013: LD_INT 25
15015: PUSH
15016: LD_INT 3
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: PUSH
15027: LD_INT 3
15029: PUSH
15030: LD_INT 24
15032: PUSH
15033: LD_INT 1000
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: EMPTY
15041: LIST
15042: LIST
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: PPUSH
15050: CALL_OW 70
15054: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15055: LD_VAR 0 10
15059: NOT
15060: PUSH
15061: LD_VAR 0 7
15065: NOT
15066: AND
15067: PUSH
15068: LD_VAR 0 11
15072: NOT
15073: AND
15074: IFFALSE 15078
// exit ;
15076: GO 15338
// if damageUnits > 0 and sci_list > 0 then
15078: LD_VAR 0 10
15082: PUSH
15083: LD_INT 0
15085: GREATER
15086: PUSH
15087: LD_VAR 0 6
15091: PUSH
15092: LD_INT 0
15094: GREATER
15095: AND
15096: IFFALSE 15129
// for i in damageUnits do
15098: LD_ADDR_VAR 0 8
15102: PUSH
15103: LD_VAR 0 10
15107: PUSH
15108: FOR_IN
15109: IFFALSE 15127
// ComMoveToArea ( i , healArea ) ;
15111: LD_VAR 0 8
15115: PPUSH
15116: LD_VAR 0 2
15120: PPUSH
15121: CALL_OW 113
15125: GO 15108
15127: POP
15128: POP
// if unitsToHeal > 0 and sci_list > 0 then
15129: LD_VAR 0 11
15133: PUSH
15134: LD_INT 0
15136: GREATER
15137: PUSH
15138: LD_VAR 0 6
15142: PUSH
15143: LD_INT 0
15145: GREATER
15146: AND
15147: IFFALSE 15206
// begin for i in sci_list do
15149: LD_ADDR_VAR 0 8
15153: PUSH
15154: LD_VAR 0 6
15158: PUSH
15159: FOR_IN
15160: IFFALSE 15204
// begin ComExitBuilding ( i ) ;
15162: LD_VAR 0 8
15166: PPUSH
15167: CALL_OW 122
// for j in unitsToHeal do
15171: LD_ADDR_VAR 0 9
15175: PUSH
15176: LD_VAR 0 11
15180: PUSH
15181: FOR_IN
15182: IFFALSE 15200
// AddComHeal ( i , j ) ;
15184: LD_VAR 0 8
15188: PPUSH
15189: LD_VAR 0 9
15193: PPUSH
15194: CALL_OW 188
15198: GO 15181
15200: POP
15201: POP
// end ;
15202: GO 15159
15204: POP
15205: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15206: LD_VAR 0 10
15210: PUSH
15211: LD_INT 0
15213: EQUAL
15214: PUSH
15215: LD_VAR 0 11
15219: PUSH
15220: LD_INT 0
15222: EQUAL
15223: AND
15224: PUSH
15225: LD_VAR 0 7
15229: PUSH
15230: LD_INT 0
15232: GREATER
15233: AND
15234: IFFALSE 15338
// for i in sci_listOutside do
15236: LD_ADDR_VAR 0 8
15240: PUSH
15241: LD_VAR 0 7
15245: PUSH
15246: FOR_IN
15247: IFFALSE 15336
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15249: LD_ADDR_VAR 0 12
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_VAR 0 1
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 21
15268: PUSH
15269: LD_INT 3
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 30
15278: PUSH
15279: LD_INT 8
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15296: LD_ADDR_VAR 0 13
15300: PUSH
15301: LD_INT 1
15303: PPUSH
15304: LD_VAR 0 12
15308: PPUSH
15309: CALL_OW 12
15313: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15314: LD_VAR 0 8
15318: PPUSH
15319: LD_VAR 0 12
15323: PUSH
15324: LD_VAR 0 13
15328: ARRAY
15329: PPUSH
15330: CALL_OW 120
// end ;
15334: GO 15246
15336: POP
15337: POP
// end ;
15338: LD_VAR 0 5
15342: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15343: LD_INT 0
15345: PPUSH
15346: PPUSH
15347: PPUSH
15348: PPUSH
15349: PPUSH
15350: PPUSH
15351: PPUSH
15352: PPUSH
15353: PPUSH
15354: PPUSH
15355: PPUSH
// amChassisTab = [ ] ;
15356: LD_ADDR_VAR 0 19
15360: PUSH
15361: EMPTY
15362: ST_TO_ADDR
// arChassisTab = [ ] ;
15363: LD_ADDR_VAR 0 18
15367: PUSH
15368: EMPTY
15369: ST_TO_ADDR
// ruChassisTab = [ ] ;
15370: LD_ADDR_VAR 0 17
15374: PUSH
15375: EMPTY
15376: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15377: LD_INT 35
15379: PPUSH
15380: CALL_OW 67
// if nation = 1 then
15384: LD_VAR 0 5
15388: PUSH
15389: LD_INT 1
15391: EQUAL
15392: IFFALSE 15897
// begin uc_side = side ;
15394: LD_ADDR_OWVAR 20
15398: PUSH
15399: LD_VAR 0 2
15403: ST_TO_ADDR
// uc_nation = nation ;
15404: LD_ADDR_OWVAR 21
15408: PUSH
15409: LD_VAR 0 5
15413: ST_TO_ADDR
// vc_engine = vehengine ;
15414: LD_ADDR_OWVAR 39
15418: PUSH
15419: LD_VAR 0 6
15423: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15424: LD_ADDR_OWVAR 38
15428: PUSH
15429: LD_VAR 0 7
15433: PUSH
15434: LD_INT 1
15436: PPUSH
15437: LD_VAR 0 7
15441: PPUSH
15442: CALL_OW 12
15446: ARRAY
15447: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15448: LD_ADDR_OWVAR 40
15452: PUSH
15453: LD_VAR 0 10
15457: PUSH
15458: LD_INT 1
15460: PPUSH
15461: LD_VAR 0 10
15465: PPUSH
15466: CALL_OW 12
15470: ARRAY
15471: ST_TO_ADDR
// for j = 1 to AMWeapon do
15472: LD_ADDR_VAR 0 14
15476: PUSH
15477: DOUBLE
15478: LD_INT 1
15480: DEC
15481: ST_TO_ADDR
15482: LD_VAR 0 10
15486: PUSH
15487: FOR_TO
15488: IFFALSE 15789
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15490: LD_VAR 0 10
15494: PUSH
15495: LD_VAR 0 14
15499: ARRAY
15500: PUSH
15501: LD_INT 2
15503: EQUAL
15504: PUSH
15505: LD_VAR 0 10
15509: PUSH
15510: LD_VAR 0 14
15514: ARRAY
15515: PUSH
15516: LD_INT 3
15518: EQUAL
15519: OR
15520: IFFALSE 15573
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15522: LD_ADDR_VAR 0 19
15526: PUSH
15527: LD_INT 1
15529: PUSH
15530: LD_INT 2
15532: PUSH
15533: LD_INT 3
15535: PUSH
15536: LD_INT 4
15538: PUSH
15539: LD_INT 5
15541: PUSH
15542: EMPTY
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15549: LD_ADDR_OWVAR 37
15553: PUSH
15554: LD_VAR 0 19
15558: PUSH
15559: LD_INT 1
15561: PPUSH
15562: LD_VAR 0 19
15566: PPUSH
15567: CALL_OW 12
15571: ARRAY
15572: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15573: LD_VAR 0 10
15577: PUSH
15578: LD_VAR 0 14
15582: ARRAY
15583: PUSH
15584: LD_INT 4
15586: EQUAL
15587: PUSH
15588: LD_VAR 0 10
15592: PUSH
15593: LD_VAR 0 14
15597: ARRAY
15598: PUSH
15599: LD_INT 5
15601: EQUAL
15602: OR
15603: PUSH
15604: LD_VAR 0 10
15608: PUSH
15609: LD_VAR 0 14
15613: ARRAY
15614: PUSH
15615: LD_INT 9
15617: EQUAL
15618: OR
15619: PUSH
15620: LD_VAR 0 10
15624: PUSH
15625: LD_VAR 0 14
15629: ARRAY
15630: PUSH
15631: LD_INT 11
15633: EQUAL
15634: OR
15635: PUSH
15636: LD_VAR 0 10
15640: PUSH
15641: LD_VAR 0 14
15645: ARRAY
15646: PUSH
15647: LD_INT 7
15649: EQUAL
15650: OR
15651: IFFALSE 15700
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15653: LD_ADDR_VAR 0 19
15657: PUSH
15658: LD_INT 2
15660: PUSH
15661: LD_INT 3
15663: PUSH
15664: LD_INT 4
15666: PUSH
15667: LD_INT 5
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15676: LD_ADDR_OWVAR 37
15680: PUSH
15681: LD_VAR 0 19
15685: PUSH
15686: LD_INT 1
15688: PPUSH
15689: LD_VAR 0 19
15693: PPUSH
15694: CALL_OW 12
15698: ARRAY
15699: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15700: LD_VAR 0 10
15704: PUSH
15705: LD_VAR 0 14
15709: ARRAY
15710: PUSH
15711: LD_INT 8
15713: EQUAL
15714: PUSH
15715: LD_VAR 0 10
15719: PUSH
15720: LD_VAR 0 14
15724: ARRAY
15725: PUSH
15726: LD_INT 6
15728: EQUAL
15729: OR
15730: PUSH
15731: LD_VAR 0 10
15735: PUSH
15736: LD_VAR 0 14
15740: ARRAY
15741: PUSH
15742: LD_INT 10
15744: EQUAL
15745: OR
15746: IFFALSE 15787
// begin amChassisTab = [ 4 , 5 ] ;
15748: LD_ADDR_VAR 0 19
15752: PUSH
15753: LD_INT 4
15755: PUSH
15756: LD_INT 5
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15763: LD_ADDR_OWVAR 37
15767: PUSH
15768: LD_VAR 0 19
15772: PUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_VAR 0 19
15780: PPUSH
15781: CALL_OW 12
15785: ARRAY
15786: ST_TO_ADDR
// end ; end ;
15787: GO 15487
15789: POP
15790: POP
// veh = CreateVehicle ;
15791: LD_ADDR_VAR 0 16
15795: PUSH
15796: CALL_OW 45
15800: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15801: LD_VAR 0 16
15805: PPUSH
15806: LD_VAR 0 1
15810: PPUSH
15811: LD_INT 0
15813: PPUSH
15814: CALL_OW 49
// if vc_control = 1 then
15818: LD_OWVAR 38
15822: PUSH
15823: LD_INT 1
15825: EQUAL
15826: IFFALSE 15883
// begin hc_gallery =  ;
15828: LD_ADDR_OWVAR 33
15832: PUSH
15833: LD_STRING 
15835: ST_TO_ADDR
// hc_name =  ;
15836: LD_ADDR_OWVAR 26
15840: PUSH
15841: LD_STRING 
15843: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15844: LD_INT 0
15846: PPUSH
15847: LD_INT 3
15849: PPUSH
15850: LD_VAR 0 4
15854: PPUSH
15855: CALL_OW 380
// un = CreateHuman ;
15859: LD_ADDR_VAR 0 15
15863: PUSH
15864: CALL_OW 44
15868: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15869: LD_VAR 0 15
15873: PPUSH
15874: LD_VAR 0 16
15878: PPUSH
15879: CALL_OW 52
// end ; i = i + 1 ;
15883: LD_ADDR_VAR 0 13
15887: PUSH
15888: LD_VAR 0 13
15892: PUSH
15893: LD_INT 1
15895: PLUS
15896: ST_TO_ADDR
// end ; if nation = 2 then
15897: LD_VAR 0 5
15901: PUSH
15902: LD_INT 2
15904: EQUAL
15905: IFFALSE 16327
// begin uc_side = side ;
15907: LD_ADDR_OWVAR 20
15911: PUSH
15912: LD_VAR 0 2
15916: ST_TO_ADDR
// uc_nation = nation ;
15917: LD_ADDR_OWVAR 21
15921: PUSH
15922: LD_VAR 0 5
15926: ST_TO_ADDR
// vc_engine = vehengine ;
15927: LD_ADDR_OWVAR 39
15931: PUSH
15932: LD_VAR 0 6
15936: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15937: LD_ADDR_OWVAR 38
15941: PUSH
15942: LD_VAR 0 7
15946: PUSH
15947: LD_INT 1
15949: PPUSH
15950: LD_VAR 0 7
15954: PPUSH
15955: CALL_OW 12
15959: ARRAY
15960: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15961: LD_ADDR_OWVAR 40
15965: PUSH
15966: LD_VAR 0 9
15970: PUSH
15971: LD_INT 1
15973: PPUSH
15974: LD_VAR 0 9
15978: PPUSH
15979: CALL_OW 12
15983: ARRAY
15984: ST_TO_ADDR
// for j = 1 to ARWeapons do
15985: LD_ADDR_VAR 0 14
15989: PUSH
15990: DOUBLE
15991: LD_INT 1
15993: DEC
15994: ST_TO_ADDR
15995: LD_VAR 0 9
15999: PUSH
16000: FOR_TO
16001: IFFALSE 16219
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16003: LD_VAR 0 9
16007: PUSH
16008: LD_VAR 0 14
16012: ARRAY
16013: PUSH
16014: LD_INT 24
16016: EQUAL
16017: PUSH
16018: LD_VAR 0 9
16022: PUSH
16023: LD_VAR 0 14
16027: ARRAY
16028: PUSH
16029: LD_INT 22
16031: EQUAL
16032: OR
16033: PUSH
16034: LD_VAR 0 9
16038: PUSH
16039: LD_VAR 0 14
16043: ARRAY
16044: PUSH
16045: LD_INT 23
16047: EQUAL
16048: OR
16049: PUSH
16050: LD_VAR 0 9
16054: PUSH
16055: LD_VAR 0 14
16059: ARRAY
16060: PUSH
16061: LD_INT 30
16063: EQUAL
16064: OR
16065: IFFALSE 16102
// begin arChassisTab = [ 14 ] ;
16067: LD_ADDR_VAR 0 18
16071: PUSH
16072: LD_INT 14
16074: PUSH
16075: EMPTY
16076: LIST
16077: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16078: LD_ADDR_OWVAR 37
16082: PUSH
16083: LD_VAR 0 18
16087: PUSH
16088: LD_INT 1
16090: PPUSH
16091: LD_VAR 0 18
16095: PPUSH
16096: CALL_OW 12
16100: ARRAY
16101: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16102: LD_VAR 0 9
16106: PUSH
16107: LD_VAR 0 14
16111: ARRAY
16112: PUSH
16113: LD_INT 29
16115: EQUAL
16116: PUSH
16117: LD_VAR 0 9
16121: PUSH
16122: LD_VAR 0 14
16126: ARRAY
16127: PUSH
16128: LD_INT 28
16130: EQUAL
16131: OR
16132: PUSH
16133: LD_VAR 0 9
16137: PUSH
16138: LD_VAR 0 14
16142: ARRAY
16143: PUSH
16144: LD_INT 27
16146: EQUAL
16147: OR
16148: PUSH
16149: LD_VAR 0 9
16153: PUSH
16154: LD_VAR 0 14
16158: ARRAY
16159: PUSH
16160: LD_INT 26
16162: EQUAL
16163: OR
16164: PUSH
16165: LD_VAR 0 9
16169: PUSH
16170: LD_VAR 0 14
16174: ARRAY
16175: PUSH
16176: LD_INT 25
16178: EQUAL
16179: OR
16180: IFFALSE 16217
// begin arChassisTab = [ 14 ] ;
16182: LD_ADDR_VAR 0 18
16186: PUSH
16187: LD_INT 14
16189: PUSH
16190: EMPTY
16191: LIST
16192: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16193: LD_ADDR_OWVAR 37
16197: PUSH
16198: LD_VAR 0 18
16202: PUSH
16203: LD_INT 1
16205: PPUSH
16206: LD_VAR 0 18
16210: PPUSH
16211: CALL_OW 12
16215: ARRAY
16216: ST_TO_ADDR
// end ; end ;
16217: GO 16000
16219: POP
16220: POP
// veh = CreateVehicle ;
16221: LD_ADDR_VAR 0 16
16225: PUSH
16226: CALL_OW 45
16230: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16231: LD_VAR 0 16
16235: PPUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: LD_INT 0
16243: PPUSH
16244: CALL_OW 49
// if vc_control = 1 then
16248: LD_OWVAR 38
16252: PUSH
16253: LD_INT 1
16255: EQUAL
16256: IFFALSE 16313
// begin hc_gallery =  ;
16258: LD_ADDR_OWVAR 33
16262: PUSH
16263: LD_STRING 
16265: ST_TO_ADDR
// hc_name =  ;
16266: LD_ADDR_OWVAR 26
16270: PUSH
16271: LD_STRING 
16273: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16274: LD_INT 0
16276: PPUSH
16277: LD_INT 3
16279: PPUSH
16280: LD_VAR 0 4
16284: PPUSH
16285: CALL_OW 380
// un = CreateHuman ;
16289: LD_ADDR_VAR 0 15
16293: PUSH
16294: CALL_OW 44
16298: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16299: LD_VAR 0 15
16303: PPUSH
16304: LD_VAR 0 16
16308: PPUSH
16309: CALL_OW 52
// end ; i = i + 1 ;
16313: LD_ADDR_VAR 0 13
16317: PUSH
16318: LD_VAR 0 13
16322: PUSH
16323: LD_INT 1
16325: PLUS
16326: ST_TO_ADDR
// end ; if nation = 3 then
16327: LD_VAR 0 5
16331: PUSH
16332: LD_INT 3
16334: EQUAL
16335: IFFALSE 16741
// begin uc_side = side ;
16337: LD_ADDR_OWVAR 20
16341: PUSH
16342: LD_VAR 0 2
16346: ST_TO_ADDR
// uc_nation = nation ;
16347: LD_ADDR_OWVAR 21
16351: PUSH
16352: LD_VAR 0 5
16356: ST_TO_ADDR
// vc_engine = vehengine ;
16357: LD_ADDR_OWVAR 39
16361: PUSH
16362: LD_VAR 0 6
16366: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16367: LD_ADDR_OWVAR 38
16371: PUSH
16372: LD_VAR 0 7
16376: PUSH
16377: LD_INT 1
16379: PPUSH
16380: LD_VAR 0 7
16384: PPUSH
16385: CALL_OW 12
16389: ARRAY
16390: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16391: LD_ADDR_OWVAR 40
16395: PUSH
16396: LD_VAR 0 8
16400: PUSH
16401: LD_INT 1
16403: PPUSH
16404: LD_VAR 0 8
16408: PPUSH
16409: CALL_OW 12
16413: ARRAY
16414: ST_TO_ADDR
// for j = 1 to RuWeapons do
16415: LD_ADDR_VAR 0 14
16419: PUSH
16420: DOUBLE
16421: LD_INT 1
16423: DEC
16424: ST_TO_ADDR
16425: LD_VAR 0 8
16429: PUSH
16430: FOR_TO
16431: IFFALSE 16633
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16433: LD_VAR 0 8
16437: PUSH
16438: LD_VAR 0 14
16442: ARRAY
16443: PUSH
16444: LD_INT 42
16446: EQUAL
16447: PUSH
16448: LD_VAR 0 8
16452: PUSH
16453: LD_VAR 0 14
16457: ARRAY
16458: PUSH
16459: LD_INT 43
16461: EQUAL
16462: OR
16463: PUSH
16464: LD_VAR 0 8
16468: PUSH
16469: LD_VAR 0 14
16473: ARRAY
16474: PUSH
16475: LD_INT 44
16477: EQUAL
16478: OR
16479: PUSH
16480: LD_VAR 0 8
16484: PUSH
16485: LD_VAR 0 14
16489: ARRAY
16490: PUSH
16491: LD_INT 45
16493: EQUAL
16494: OR
16495: PUSH
16496: LD_VAR 0 8
16500: PUSH
16501: LD_VAR 0 14
16505: ARRAY
16506: PUSH
16507: LD_INT 49
16509: EQUAL
16510: OR
16511: IFFALSE 16560
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16513: LD_ADDR_VAR 0 17
16517: PUSH
16518: LD_INT 21
16520: PUSH
16521: LD_INT 22
16523: PUSH
16524: LD_INT 23
16526: PUSH
16527: LD_INT 24
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16536: LD_ADDR_OWVAR 37
16540: PUSH
16541: LD_VAR 0 17
16545: PUSH
16546: LD_INT 1
16548: PPUSH
16549: LD_VAR 0 17
16553: PPUSH
16554: CALL_OW 12
16558: ARRAY
16559: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16560: LD_VAR 0 8
16564: PUSH
16565: LD_VAR 0 14
16569: ARRAY
16570: PUSH
16571: LD_INT 46
16573: EQUAL
16574: PUSH
16575: LD_VAR 0 8
16579: PUSH
16580: LD_VAR 0 14
16584: ARRAY
16585: PUSH
16586: LD_INT 47
16588: EQUAL
16589: OR
16590: IFFALSE 16631
// begin ruChassisTab = [ 23 , 24 ] ;
16592: LD_ADDR_VAR 0 17
16596: PUSH
16597: LD_INT 23
16599: PUSH
16600: LD_INT 24
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16607: LD_ADDR_OWVAR 37
16611: PUSH
16612: LD_VAR 0 17
16616: PUSH
16617: LD_INT 1
16619: PPUSH
16620: LD_VAR 0 17
16624: PPUSH
16625: CALL_OW 12
16629: ARRAY
16630: ST_TO_ADDR
// end ; end ;
16631: GO 16430
16633: POP
16634: POP
// veh = CreateVehicle ;
16635: LD_ADDR_VAR 0 16
16639: PUSH
16640: CALL_OW 45
16644: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16645: LD_VAR 0 16
16649: PPUSH
16650: LD_VAR 0 1
16654: PPUSH
16655: LD_INT 0
16657: PPUSH
16658: CALL_OW 49
// if vc_control = 1 then
16662: LD_OWVAR 38
16666: PUSH
16667: LD_INT 1
16669: EQUAL
16670: IFFALSE 16727
// begin hc_gallery =  ;
16672: LD_ADDR_OWVAR 33
16676: PUSH
16677: LD_STRING 
16679: ST_TO_ADDR
// hc_name =  ;
16680: LD_ADDR_OWVAR 26
16684: PUSH
16685: LD_STRING 
16687: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16688: LD_INT 0
16690: PPUSH
16691: LD_INT 3
16693: PPUSH
16694: LD_VAR 0 4
16698: PPUSH
16699: CALL_OW 380
// un = CreateHuman ;
16703: LD_ADDR_VAR 0 15
16707: PUSH
16708: CALL_OW 44
16712: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16713: LD_VAR 0 15
16717: PPUSH
16718: LD_VAR 0 16
16722: PPUSH
16723: CALL_OW 52
// end ; i = i + 1 ;
16727: LD_ADDR_VAR 0 13
16731: PUSH
16732: LD_VAR 0 13
16736: PUSH
16737: LD_INT 1
16739: PLUS
16740: ST_TO_ADDR
// end ; until i = vehCount ;
16741: LD_VAR 0 13
16745: PUSH
16746: LD_VAR 0 3
16750: EQUAL
16751: IFFALSE 15377
// repeat wait ( 0 0$1 ) ;
16753: LD_INT 35
16755: PPUSH
16756: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
16760: LD_ADDR_VAR 0 20
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_VAR 0 2
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PUSH
16777: LD_INT 21
16779: PUSH
16780: LD_INT 2
16782: PUSH
16783: EMPTY
16784: LIST
16785: LIST
16786: PUSH
16787: LD_INT 24
16789: PUSH
16790: LD_INT 650
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: PPUSH
16802: CALL_OW 69
16806: ST_TO_ADDR
// if vehicleOK_list > 0 then
16807: LD_VAR 0 20
16811: PUSH
16812: LD_INT 0
16814: GREATER
16815: IFFALSE 17006
// begin for i in vehicleOK_list do
16817: LD_ADDR_VAR 0 13
16821: PUSH
16822: LD_VAR 0 20
16826: PUSH
16827: FOR_IN
16828: IFFALSE 17004
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16830: LD_ADDR_VAR 0 21
16834: PUSH
16835: LD_INT 22
16837: PUSH
16838: LD_VAR 0 11
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PPUSH
16847: CALL_OW 69
16851: PPUSH
16852: LD_VAR 0 13
16856: PPUSH
16857: CALL_OW 74
16861: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16862: LD_ADDR_VAR 0 22
16866: PUSH
16867: LD_INT 22
16869: PUSH
16870: LD_VAR 0 11
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: LD_INT 2
16881: PUSH
16882: LD_INT 59
16884: PUSH
16885: EMPTY
16886: LIST
16887: PUSH
16888: LD_INT 21
16890: PUSH
16891: LD_INT 1
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: LD_INT 21
16900: PUSH
16901: LD_INT 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: PUSH
16914: EMPTY
16915: LIST
16916: LIST
16917: PUSH
16918: EMPTY
16919: LIST
16920: PPUSH
16921: CALL_OW 69
16925: PPUSH
16926: LD_VAR 0 13
16930: PPUSH
16931: CALL_OW 74
16935: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16936: LD_VAR 0 13
16940: PPUSH
16941: LD_VAR 0 21
16945: PPUSH
16946: CALL_OW 296
16950: PUSH
16951: LD_INT 8
16953: PLUS
16954: PUSH
16955: LD_VAR 0 13
16959: PPUSH
16960: LD_VAR 0 22
16964: PPUSH
16965: CALL_OW 296
16969: LESS
16970: IFFALSE 16988
// begin ComAttackUnit ( i , target1 ) ;
16972: LD_VAR 0 13
16976: PPUSH
16977: LD_VAR 0 21
16981: PPUSH
16982: CALL_OW 115
// end else
16986: GO 17002
// begin ComAttackUnit ( i , target2 ) ;
16988: LD_VAR 0 13
16992: PPUSH
16993: LD_VAR 0 22
16997: PPUSH
16998: CALL_OW 115
// end ; end ;
17002: GO 16827
17004: POP
17005: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17006: LD_INT 22
17008: PUSH
17009: LD_VAR 0 2
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 21
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: EMPTY
17029: LIST
17030: LIST
17031: PPUSH
17032: CALL_OW 69
17036: PUSH
17037: LD_INT 0
17039: EQUAL
17040: IFFALSE 16753
// end ;
17042: LD_VAR 0 12
17046: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17047: LD_INT 0
17049: PPUSH
17050: PPUSH
17051: PPUSH
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
17056: PPUSH
17057: PPUSH
17058: PPUSH
17059: PPUSH
// for i = 1 to soldierCount do
17060: LD_ADDR_VAR 0 13
17064: PUSH
17065: DOUBLE
17066: LD_INT 1
17068: DEC
17069: ST_TO_ADDR
17070: LD_VAR 0 3
17074: PUSH
17075: FOR_TO
17076: IFFALSE 17158
// begin uc_side = side ;
17078: LD_ADDR_OWVAR 20
17082: PUSH
17083: LD_VAR 0 1
17087: ST_TO_ADDR
// uc_nation = nation ;
17088: LD_ADDR_OWVAR 21
17092: PUSH
17093: LD_VAR 0 2
17097: ST_TO_ADDR
// hc_name =  ;
17098: LD_ADDR_OWVAR 26
17102: PUSH
17103: LD_STRING 
17105: ST_TO_ADDR
// hc_gallery =  ;
17106: LD_ADDR_OWVAR 33
17110: PUSH
17111: LD_STRING 
17113: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_INT 1
17119: PPUSH
17120: LD_VAR 0 8
17124: PPUSH
17125: CALL_OW 380
// un = CreateHuman ;
17129: LD_ADDR_VAR 0 15
17133: PUSH
17134: CALL_OW 44
17138: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17139: LD_VAR 0 15
17143: PPUSH
17144: LD_VAR 0 9
17148: PPUSH
17149: LD_INT 0
17151: PPUSH
17152: CALL_OW 49
// end ;
17156: GO 17075
17158: POP
17159: POP
// for i = 1 to sniperCount do
17160: LD_ADDR_VAR 0 13
17164: PUSH
17165: DOUBLE
17166: LD_INT 1
17168: DEC
17169: ST_TO_ADDR
17170: LD_VAR 0 4
17174: PUSH
17175: FOR_TO
17176: IFFALSE 17258
// begin uc_side = side ;
17178: LD_ADDR_OWVAR 20
17182: PUSH
17183: LD_VAR 0 1
17187: ST_TO_ADDR
// uc_nation = nation ;
17188: LD_ADDR_OWVAR 21
17192: PUSH
17193: LD_VAR 0 2
17197: ST_TO_ADDR
// hc_name =  ;
17198: LD_ADDR_OWVAR 26
17202: PUSH
17203: LD_STRING 
17205: ST_TO_ADDR
// hc_gallery =  ;
17206: LD_ADDR_OWVAR 33
17210: PUSH
17211: LD_STRING 
17213: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17214: LD_INT 0
17216: PPUSH
17217: LD_INT 5
17219: PPUSH
17220: LD_VAR 0 8
17224: PPUSH
17225: CALL_OW 380
// un = CreateHuman ;
17229: LD_ADDR_VAR 0 15
17233: PUSH
17234: CALL_OW 44
17238: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17239: LD_VAR 0 15
17243: PPUSH
17244: LD_VAR 0 9
17248: PPUSH
17249: LD_INT 0
17251: PPUSH
17252: CALL_OW 49
// end ;
17256: GO 17175
17258: POP
17259: POP
// for i = 1 to bazookCount do
17260: LD_ADDR_VAR 0 13
17264: PUSH
17265: DOUBLE
17266: LD_INT 1
17268: DEC
17269: ST_TO_ADDR
17270: LD_VAR 0 5
17274: PUSH
17275: FOR_TO
17276: IFFALSE 17358
// begin uc_side = side ;
17278: LD_ADDR_OWVAR 20
17282: PUSH
17283: LD_VAR 0 1
17287: ST_TO_ADDR
// uc_nation = nation ;
17288: LD_ADDR_OWVAR 21
17292: PUSH
17293: LD_VAR 0 2
17297: ST_TO_ADDR
// hc_name =  ;
17298: LD_ADDR_OWVAR 26
17302: PUSH
17303: LD_STRING 
17305: ST_TO_ADDR
// hc_gallery =  ;
17306: LD_ADDR_OWVAR 33
17310: PUSH
17311: LD_STRING 
17313: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17314: LD_INT 0
17316: PPUSH
17317: LD_INT 9
17319: PPUSH
17320: LD_VAR 0 8
17324: PPUSH
17325: CALL_OW 380
// un = CreateHuman ;
17329: LD_ADDR_VAR 0 15
17333: PUSH
17334: CALL_OW 44
17338: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17339: LD_VAR 0 15
17343: PPUSH
17344: LD_VAR 0 9
17348: PPUSH
17349: LD_INT 0
17351: PPUSH
17352: CALL_OW 49
// end ;
17356: GO 17275
17358: POP
17359: POP
// for i = 1 to mortalCount do
17360: LD_ADDR_VAR 0 13
17364: PUSH
17365: DOUBLE
17366: LD_INT 1
17368: DEC
17369: ST_TO_ADDR
17370: LD_VAR 0 6
17374: PUSH
17375: FOR_TO
17376: IFFALSE 17458
// begin uc_side = side ;
17378: LD_ADDR_OWVAR 20
17382: PUSH
17383: LD_VAR 0 1
17387: ST_TO_ADDR
// uc_nation = nation ;
17388: LD_ADDR_OWVAR 21
17392: PUSH
17393: LD_VAR 0 2
17397: ST_TO_ADDR
// hc_name =  ;
17398: LD_ADDR_OWVAR 26
17402: PUSH
17403: LD_STRING 
17405: ST_TO_ADDR
// hc_gallery =  ;
17406: LD_ADDR_OWVAR 33
17410: PUSH
17411: LD_STRING 
17413: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17414: LD_INT 0
17416: PPUSH
17417: LD_INT 8
17419: PPUSH
17420: LD_VAR 0 8
17424: PPUSH
17425: CALL_OW 380
// un = CreateHuman ;
17429: LD_ADDR_VAR 0 15
17433: PUSH
17434: CALL_OW 44
17438: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17439: LD_VAR 0 15
17443: PPUSH
17444: LD_VAR 0 9
17448: PPUSH
17449: LD_INT 0
17451: PPUSH
17452: CALL_OW 49
// end ;
17456: GO 17375
17458: POP
17459: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17460: LD_ADDR_VAR 0 18
17464: PUSH
17465: LD_INT 22
17467: PUSH
17468: LD_VAR 0 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 25
17482: PUSH
17483: LD_INT 1
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 25
17492: PUSH
17493: LD_INT 5
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 25
17502: PUSH
17503: LD_INT 8
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: LD_INT 25
17512: PUSH
17513: LD_INT 9
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 69
17535: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17536: LD_ADDR_VAR 0 17
17540: PUSH
17541: LD_INT 22
17543: PUSH
17544: LD_VAR 0 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 25
17555: PUSH
17556: LD_INT 4
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL_OW 69
17571: ST_TO_ADDR
// for i in medic_list do
17572: LD_ADDR_VAR 0 13
17576: PUSH
17577: LD_VAR 0 17
17581: PUSH
17582: FOR_IN
17583: IFFALSE 17601
// ComMoveToArea ( i , healArea ) ;
17585: LD_VAR 0 13
17589: PPUSH
17590: LD_VAR 0 10
17594: PPUSH
17595: CALL_OW 113
17599: GO 17582
17601: POP
17602: POP
// repeat wait ( 0 0$1 ) ;
17603: LD_INT 35
17605: PPUSH
17606: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17610: LD_ADDR_VAR 0 16
17614: PUSH
17615: LD_INT 22
17617: PUSH
17618: LD_VAR 0 1
17622: PUSH
17623: EMPTY
17624: LIST
17625: LIST
17626: PUSH
17627: LD_INT 1
17629: PUSH
17630: LD_INT 3
17632: PUSH
17633: LD_INT 24
17635: PUSH
17636: LD_INT 550
17638: PUSH
17639: EMPTY
17640: LIST
17641: LIST
17642: PUSH
17643: EMPTY
17644: LIST
17645: LIST
17646: PUSH
17647: LD_INT 24
17649: PUSH
17650: LD_INT 250
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: PPUSH
17666: CALL_OW 69
17670: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17671: LD_ADDR_VAR 0 18
17675: PUSH
17676: LD_INT 22
17678: PUSH
17679: LD_VAR 0 1
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: LD_INT 2
17690: PUSH
17691: LD_INT 25
17693: PUSH
17694: LD_INT 1
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: PUSH
17701: LD_INT 25
17703: PUSH
17704: LD_INT 5
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PUSH
17711: LD_INT 25
17713: PUSH
17714: LD_INT 8
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: PUSH
17721: LD_INT 25
17723: PUSH
17724: LD_INT 9
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PUSH
17731: EMPTY
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 24
17740: PUSH
17741: LD_INT 1000
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: PPUSH
17753: CALL_OW 69
17757: ST_TO_ADDR
// if medicCount > 0 then
17758: LD_VAR 0 7
17762: PUSH
17763: LD_INT 0
17765: GREATER
17766: IFFALSE 17840
// begin if damageUnit_list > 0 then
17768: LD_VAR 0 16
17772: PUSH
17773: LD_INT 0
17775: GREATER
17776: IFFALSE 17840
// begin for i in damageUnit_list do
17778: LD_ADDR_VAR 0 13
17782: PUSH
17783: LD_VAR 0 16
17787: PUSH
17788: FOR_IN
17789: IFFALSE 17838
// begin ComMoveToArea ( i , healArea ) ;
17791: LD_VAR 0 13
17795: PPUSH
17796: LD_VAR 0 10
17800: PPUSH
17801: CALL_OW 113
// for j in medic_list do
17805: LD_ADDR_VAR 0 14
17809: PUSH
17810: LD_VAR 0 17
17814: PUSH
17815: FOR_IN
17816: IFFALSE 17834
// AddComHeal ( j , i ) ;
17818: LD_VAR 0 14
17822: PPUSH
17823: LD_VAR 0 13
17827: PPUSH
17828: CALL_OW 188
17832: GO 17815
17834: POP
17835: POP
// end ;
17836: GO 17788
17838: POP
17839: POP
// end ; end ; for i in soldiersOK_list do
17840: LD_ADDR_VAR 0 13
17844: PUSH
17845: LD_VAR 0 18
17849: PUSH
17850: FOR_IN
17851: IFFALSE 18027
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17853: LD_ADDR_VAR 0 21
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_VAR 0 11
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PPUSH
17870: CALL_OW 69
17874: PPUSH
17875: LD_VAR 0 13
17879: PPUSH
17880: CALL_OW 74
17884: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17885: LD_ADDR_VAR 0 22
17889: PUSH
17890: LD_INT 22
17892: PUSH
17893: LD_VAR 0 11
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 2
17904: PUSH
17905: LD_INT 59
17907: PUSH
17908: EMPTY
17909: LIST
17910: PUSH
17911: LD_INT 21
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: EMPTY
17918: LIST
17919: LIST
17920: PUSH
17921: LD_INT 21
17923: PUSH
17924: LD_INT 2
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: PPUSH
17944: CALL_OW 69
17948: PPUSH
17949: LD_VAR 0 13
17953: PPUSH
17954: CALL_OW 74
17958: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17959: LD_VAR 0 13
17963: PPUSH
17964: LD_VAR 0 21
17968: PPUSH
17969: CALL_OW 296
17973: PUSH
17974: LD_INT 8
17976: PLUS
17977: PUSH
17978: LD_VAR 0 13
17982: PPUSH
17983: LD_VAR 0 22
17987: PPUSH
17988: CALL_OW 296
17992: LESS
17993: IFFALSE 18011
// begin ComAttackUnit ( i , target1 ) ;
17995: LD_VAR 0 13
17999: PPUSH
18000: LD_VAR 0 21
18004: PPUSH
18005: CALL_OW 115
// end else
18009: GO 18025
// begin ComAttackUnit ( i , target2 ) ;
18011: LD_VAR 0 13
18015: PPUSH
18016: LD_VAR 0 22
18020: PPUSH
18021: CALL_OW 115
// end ; end ;
18025: GO 17850
18027: POP
18028: POP
// for i in soldiersOK_list do
18029: LD_ADDR_VAR 0 13
18033: PUSH
18034: LD_VAR 0 18
18038: PUSH
18039: FOR_IN
18040: IFFALSE 18216
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18042: LD_ADDR_VAR 0 21
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_VAR 0 11
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PPUSH
18059: CALL_OW 69
18063: PPUSH
18064: LD_VAR 0 13
18068: PPUSH
18069: CALL_OW 74
18073: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18074: LD_ADDR_VAR 0 22
18078: PUSH
18079: LD_INT 22
18081: PUSH
18082: LD_VAR 0 11
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: PUSH
18091: LD_INT 2
18093: PUSH
18094: LD_INT 59
18096: PUSH
18097: EMPTY
18098: LIST
18099: PUSH
18100: LD_INT 21
18102: PUSH
18103: LD_INT 1
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PUSH
18110: LD_INT 21
18112: PUSH
18113: LD_INT 2
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: PUSH
18126: EMPTY
18127: LIST
18128: LIST
18129: PUSH
18130: EMPTY
18131: LIST
18132: PPUSH
18133: CALL_OW 69
18137: PPUSH
18138: LD_VAR 0 13
18142: PPUSH
18143: CALL_OW 74
18147: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18148: LD_VAR 0 13
18152: PPUSH
18153: LD_VAR 0 21
18157: PPUSH
18158: CALL_OW 296
18162: PUSH
18163: LD_INT 8
18165: PLUS
18166: PUSH
18167: LD_VAR 0 13
18171: PPUSH
18172: LD_VAR 0 22
18176: PPUSH
18177: CALL_OW 296
18181: LESS
18182: IFFALSE 18200
// begin ComAttackUnit ( i , target1 ) ;
18184: LD_VAR 0 13
18188: PPUSH
18189: LD_VAR 0 21
18193: PPUSH
18194: CALL_OW 115
// end else
18198: GO 18214
// begin ComAttackUnit ( i , target2 ) ;
18200: LD_VAR 0 13
18204: PPUSH
18205: LD_VAR 0 22
18209: PPUSH
18210: CALL_OW 115
// end ; end ;
18214: GO 18039
18216: POP
18217: POP
// until soldiersOK_list = [ ] ;
18218: LD_VAR 0 18
18222: PUSH
18223: EMPTY
18224: EQUAL
18225: IFFALSE 17603
// end ;
18227: LD_VAR 0 12
18231: RET
// export function TameApemans ; var i , j ; begin
18232: LD_INT 0
18234: PPUSH
18235: PPUSH
18236: PPUSH
// repeat wait ( 0 0$1 ) ;
18237: LD_INT 35
18239: PPUSH
18240: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18244: LD_ADDR_VAR 0 2
18248: PUSH
18249: LD_INT 22
18251: PUSH
18252: LD_INT 2
18254: PUSH
18255: EMPTY
18256: LIST
18257: LIST
18258: PUSH
18259: LD_INT 25
18261: PUSH
18262: LD_INT 4
18264: PUSH
18265: EMPTY
18266: LIST
18267: LIST
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PPUSH
18273: CALL_OW 69
18277: PUSH
18278: FOR_IN
18279: IFFALSE 18356
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_INT 5
18288: PPUSH
18289: LD_INT 22
18291: PUSH
18292: LD_INT 0
18294: PUSH
18295: EMPTY
18296: LIST
18297: LIST
18298: PUSH
18299: LD_INT 25
18301: PUSH
18302: LD_INT 12
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 70
18317: PUSH
18318: FOR_IN
18319: IFFALSE 18352
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18321: LD_VAR 0 2
18325: PPUSH
18326: LD_VAR 0 3
18330: PPUSH
18331: CALL_OW 250
18335: PPUSH
18336: LD_VAR 0 3
18340: PPUSH
18341: CALL_OW 251
18345: PPUSH
18346: CALL_OW 191
// end ;
18350: GO 18318
18352: POP
18353: POP
// end ;
18354: GO 18278
18356: POP
18357: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18358: LD_INT 22
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 4
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PPUSH
18382: CALL_OW 69
18386: PUSH
18387: LD_INT 0
18389: EQUAL
18390: PUSH
18391: LD_INT 5
18393: PPUSH
18394: LD_INT 22
18396: PUSH
18397: LD_INT 0
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 25
18406: PUSH
18407: LD_INT 12
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PPUSH
18418: CALL_OW 70
18422: PUSH
18423: LD_INT 0
18425: EQUAL
18426: OR
18427: IFFALSE 18237
// wait ( 0 0$30 ) ;
18429: LD_INT 1050
18431: PPUSH
18432: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18436: LD_ADDR_VAR 0 2
18440: PUSH
18441: LD_INT 22
18443: PUSH
18444: LD_INT 2
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: PUSH
18451: LD_INT 25
18453: PUSH
18454: LD_INT 12
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PPUSH
18465: CALL_OW 69
18469: PUSH
18470: FOR_IN
18471: IFFALSE 18535
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18473: LD_VAR 0 2
18477: PPUSH
18478: LD_EXP 43
18482: PPUSH
18483: CALL_OW 250
18487: PPUSH
18488: LD_EXP 43
18492: PPUSH
18493: CALL_OW 251
18497: PPUSH
18498: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18502: LD_VAR 0 2
18506: PPUSH
18507: LD_INT 16
18509: PUSH
18510: LD_INT 15
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 1
18519: PPUSH
18520: LD_INT 2
18522: PPUSH
18523: CALL_OW 12
18527: ARRAY
18528: PPUSH
18529: CALL_OW 336
// end ;
18533: GO 18470
18535: POP
18536: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18537: LD_ADDR_VAR 0 2
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 25
18554: PUSH
18555: LD_INT 4
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: PUSH
18571: FOR_IN
18572: IFFALSE 18618
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18574: LD_VAR 0 2
18578: PPUSH
18579: LD_INT 22
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: PUSH
18589: LD_INT 30
18591: PUSH
18592: LD_INT 8
18594: PUSH
18595: EMPTY
18596: LIST
18597: LIST
18598: PUSH
18599: EMPTY
18600: LIST
18601: LIST
18602: PPUSH
18603: CALL_OW 69
18607: PUSH
18608: LD_INT 1
18610: ARRAY
18611: PPUSH
18612: CALL_OW 120
18616: GO 18571
18618: POP
18619: POP
// end ;
18620: LD_VAR 0 1
18624: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18625: LD_INT 0
18627: PPUSH
18628: PPUSH
18629: PPUSH
18630: PPUSH
18631: PPUSH
18632: PPUSH
18633: PPUSH
18634: PPUSH
18635: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18636: LD_INT 22
18638: PUSH
18639: LD_VAR 0 1
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 21
18650: PUSH
18651: LD_INT 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PPUSH
18662: CALL_OW 69
18666: PUSH
18667: LD_VAR 0 3
18671: LESSEQUAL
18672: IFFALSE 18816
// for i = 1 to vehCount do
18674: LD_ADDR_VAR 0 10
18678: PUSH
18679: DOUBLE
18680: LD_INT 1
18682: DEC
18683: ST_TO_ADDR
18684: LD_VAR 0 3
18688: PUSH
18689: FOR_TO
18690: IFFALSE 18814
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18692: LD_ADDR_VAR 0 12
18696: PUSH
18697: LD_VAR 0 5
18701: PUSH
18702: LD_INT 1
18704: PPUSH
18705: LD_VAR 0 5
18709: PPUSH
18710: CALL_OW 12
18714: ARRAY
18715: ST_TO_ADDR
// if randWeapon = 46 then
18716: LD_VAR 0 12
18720: PUSH
18721: LD_INT 46
18723: EQUAL
18724: IFFALSE 18769
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
18726: LD_VAR 0 2
18730: PPUSH
18731: LD_INT 24
18733: PPUSH
18734: LD_VAR 0 6
18738: PPUSH
18739: LD_VAR 0 7
18743: PUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_VAR 0 7
18751: PPUSH
18752: CALL_OW 12
18756: ARRAY
18757: PPUSH
18758: LD_VAR 0 12
18762: PPUSH
18763: CALL_OW 185
18767: GO 18812
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
18769: LD_VAR 0 2
18773: PPUSH
18774: LD_VAR 0 8
18778: PPUSH
18779: LD_VAR 0 6
18783: PPUSH
18784: LD_VAR 0 7
18788: PUSH
18789: LD_INT 1
18791: PPUSH
18792: LD_VAR 0 7
18796: PPUSH
18797: CALL_OW 12
18801: ARRAY
18802: PPUSH
18803: LD_VAR 0 12
18807: PPUSH
18808: CALL_OW 185
// end ;
18812: GO 18689
18814: POP
18815: POP
// repeat wait ( 0 0$1 ) ;
18816: LD_INT 35
18818: PPUSH
18819: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
18823: LD_INT 22
18825: PUSH
18826: LD_VAR 0 1
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 21
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 24
18847: PUSH
18848: LD_INT 250
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: PUSH
18855: EMPTY
18856: LIST
18857: LIST
18858: LIST
18859: PPUSH
18860: CALL_OW 69
18864: PUSH
18865: LD_VAR 0 3
18869: GREATEREQUAL
18870: IFFALSE 18816
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
18872: LD_INT 22
18874: PUSH
18875: LD_VAR 0 1
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 21
18886: PUSH
18887: LD_INT 2
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: LD_INT 24
18896: PUSH
18897: LD_INT 250
18899: PUSH
18900: EMPTY
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: PUSH
18914: LD_VAR 0 3
18918: GREATEREQUAL
18919: IFFALSE 19262
// begin repeat begin wait ( 0 0$1 ) ;
18921: LD_INT 35
18923: PPUSH
18924: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
18928: LD_INT 22
18930: PUSH
18931: LD_VAR 0 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: LD_INT 24
18952: PUSH
18953: LD_INT 651
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: EMPTY
18961: LIST
18962: LIST
18963: LIST
18964: PPUSH
18965: CALL_OW 69
18969: PUSH
18970: LD_INT 0
18972: GREATER
18973: IFFALSE 19201
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
18975: LD_ADDR_VAR 0 10
18979: PUSH
18980: LD_INT 22
18982: PUSH
18983: LD_VAR 0 1
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: PUSH
18992: LD_INT 21
18994: PUSH
18995: LD_INT 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 24
19004: PUSH
19005: LD_INT 651
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: PPUSH
19017: CALL_OW 69
19021: PUSH
19022: FOR_IN
19023: IFFALSE 19199
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19025: LD_ADDR_VAR 0 16
19029: PUSH
19030: LD_INT 22
19032: PUSH
19033: LD_VAR 0 4
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PPUSH
19042: CALL_OW 69
19046: PPUSH
19047: LD_VAR 0 10
19051: PPUSH
19052: CALL_OW 74
19056: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19057: LD_ADDR_VAR 0 17
19061: PUSH
19062: LD_INT 22
19064: PUSH
19065: LD_VAR 0 4
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 59
19079: PUSH
19080: EMPTY
19081: LIST
19082: PUSH
19083: LD_INT 21
19085: PUSH
19086: LD_INT 1
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PUSH
19093: LD_INT 21
19095: PUSH
19096: LD_INT 2
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: PUSH
19109: EMPTY
19110: LIST
19111: LIST
19112: PUSH
19113: EMPTY
19114: LIST
19115: PPUSH
19116: CALL_OW 69
19120: PPUSH
19121: LD_VAR 0 10
19125: PPUSH
19126: CALL_OW 74
19130: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19131: LD_VAR 0 10
19135: PPUSH
19136: LD_VAR 0 16
19140: PPUSH
19141: CALL_OW 296
19145: PUSH
19146: LD_INT 8
19148: PLUS
19149: PUSH
19150: LD_VAR 0 10
19154: PPUSH
19155: LD_VAR 0 17
19159: PPUSH
19160: CALL_OW 296
19164: LESS
19165: IFFALSE 19183
// begin ComAttackUnit ( i , target1 ) ;
19167: LD_VAR 0 10
19171: PPUSH
19172: LD_VAR 0 16
19176: PPUSH
19177: CALL_OW 115
// end else
19181: GO 19197
// begin ComAttackUnit ( i , target2 ) ;
19183: LD_VAR 0 10
19187: PPUSH
19188: LD_VAR 0 17
19192: PPUSH
19193: CALL_OW 115
// end ; end ;
19197: GO 19022
19199: POP
19200: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19201: LD_INT 22
19203: PUSH
19204: LD_VAR 0 1
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 21
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PPUSH
19227: CALL_OW 69
19231: PUSH
19232: LD_INT 0
19234: EQUAL
19235: PUSH
19236: LD_INT 22
19238: PUSH
19239: LD_VAR 0 4
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: EMPTY
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: PUSH
19256: LD_INT 0
19258: EQUAL
19259: OR
19260: IFFALSE 18921
// end ; end ;
19262: LD_VAR 0 9
19266: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19267: LD_INT 0
19269: PPUSH
19270: PPUSH
19271: PPUSH
19272: PPUSH
// r := 100 ;
19273: LD_ADDR_VAR 0 5
19277: PUSH
19278: LD_INT 100
19280: ST_TO_ADDR
// x := 0 ;
19281: LD_ADDR_VAR 0 6
19285: PUSH
19286: LD_INT 0
19288: ST_TO_ADDR
// while ( x < n ) do
19289: LD_VAR 0 6
19293: PUSH
19294: LD_VAR 0 2
19298: LESS
19299: IFFALSE 19612
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19301: LD_ADDR_VAR 0 4
19305: PUSH
19306: DOUBLE
19307: LD_INT 1
19309: DEC
19310: ST_TO_ADDR
19311: LD_VAR 0 1
19315: PPUSH
19316: LD_INT 0
19318: PPUSH
19319: CALL_OW 517
19323: PUSH
19324: LD_INT 1
19326: ARRAY
19327: PUSH
19328: FOR_TO
19329: IFFALSE 19608
// begin if r > 50 then
19331: LD_VAR 0 5
19335: PUSH
19336: LD_INT 50
19338: GREATER
19339: IFFALSE 19584
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19341: LD_VAR 0 1
19345: PPUSH
19346: LD_INT 0
19348: PPUSH
19349: CALL_OW 517
19353: PUSH
19354: LD_INT 1
19356: ARRAY
19357: PUSH
19358: LD_VAR 0 4
19362: ARRAY
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: LD_INT 0
19371: PPUSH
19372: CALL_OW 517
19376: PUSH
19377: LD_INT 2
19379: ARRAY
19380: PUSH
19381: LD_VAR 0 4
19385: ARRAY
19386: PPUSH
19387: CALL_OW 458
19391: NOT
19392: IFFALSE 19568
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 2 , 0 ) ;
19394: LD_VAR 0 1
19398: PPUSH
19399: LD_INT 0
19401: PPUSH
19402: CALL_OW 517
19406: PUSH
19407: LD_INT 1
19409: ARRAY
19410: PUSH
19411: LD_VAR 0 4
19415: ARRAY
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: LD_INT 0
19424: PPUSH
19425: CALL_OW 517
19429: PUSH
19430: LD_INT 2
19432: ARRAY
19433: PUSH
19434: LD_VAR 0 4
19438: ARRAY
19439: PPUSH
19440: LD_INT 2
19442: PPUSH
19443: LD_INT 0
19445: PPUSH
19446: CALL_OW 454
// arabianMines := Insert ( arabianMines , arabianMines + 1 , AreaToList ( area , 0 ) [ 1 ] [ i ] ) ;
19450: LD_ADDR_EXP 50
19454: PUSH
19455: LD_EXP 50
19459: PPUSH
19460: LD_EXP 50
19464: PUSH
19465: LD_INT 1
19467: PLUS
19468: PPUSH
19469: LD_VAR 0 1
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 517
19481: PUSH
19482: LD_INT 1
19484: ARRAY
19485: PUSH
19486: LD_VAR 0 4
19490: ARRAY
19491: PPUSH
19492: CALL_OW 2
19496: ST_TO_ADDR
// arabianMines := Insert ( arabianMines , arabianMines + 1 , AreaToList ( area , 0 ) [ 2 ] [ i ] ) ;
19497: LD_ADDR_EXP 50
19501: PUSH
19502: LD_EXP 50
19506: PPUSH
19507: LD_EXP 50
19511: PUSH
19512: LD_INT 1
19514: PLUS
19515: PPUSH
19516: LD_VAR 0 1
19520: PPUSH
19521: LD_INT 0
19523: PPUSH
19524: CALL_OW 517
19528: PUSH
19529: LD_INT 2
19531: ARRAY
19532: PUSH
19533: LD_VAR 0 4
19537: ARRAY
19538: PPUSH
19539: CALL_OW 2
19543: ST_TO_ADDR
// r := 0 ;
19544: LD_ADDR_VAR 0 5
19548: PUSH
19549: LD_INT 0
19551: ST_TO_ADDR
// x := x + 1 ;
19552: LD_ADDR_VAR 0 6
19556: PUSH
19557: LD_VAR 0 6
19561: PUSH
19562: LD_INT 1
19564: PLUS
19565: ST_TO_ADDR
// end else
19566: GO 19582
// r := r + 35 ;
19568: LD_ADDR_VAR 0 5
19572: PUSH
19573: LD_VAR 0 5
19577: PUSH
19578: LD_INT 35
19580: PLUS
19581: ST_TO_ADDR
// end else
19582: GO 19606
// r := r + rand ( 10 , 25 ) ;
19584: LD_ADDR_VAR 0 5
19588: PUSH
19589: LD_VAR 0 5
19593: PUSH
19594: LD_INT 10
19596: PPUSH
19597: LD_INT 25
19599: PPUSH
19600: CALL_OW 12
19604: PLUS
19605: ST_TO_ADDR
// end ;
19606: GO 19328
19608: POP
19609: POP
19610: GO 19289
// end ; end_of_file
19612: LD_VAR 0 3
19616: RET
// every 0 0$1 trigger russianAI = 1 do
19617: LD_EXP 39
19621: PUSH
19622: LD_INT 1
19624: EQUAL
19625: IFFALSE 19844
19627: GO 19629
19629: DISABLE
// begin enable ;
19630: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19631: LD_INT 3
19633: PPUSH
19634: LD_EXP 30
19638: PPUSH
19639: CALL 14229 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19643: LD_INT 3
19645: PPUSH
19646: LD_EXP 42
19650: PPUSH
19651: CALL 14589 0 2
// if ruPossition = 1 then
19655: LD_EXP 41
19659: PUSH
19660: LD_INT 1
19662: EQUAL
19663: IFFALSE 19718
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19665: LD_INT 3
19667: PPUSH
19668: LD_INT 13
19670: PPUSH
19671: LD_INT 10
19673: PPUSH
19674: LD_INT 22
19676: PUSH
19677: LD_INT 3
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: LD_INT 21
19686: PUSH
19687: LD_INT 3
19689: PUSH
19690: EMPTY
19691: LIST
19692: LIST
19693: PUSH
19694: LD_INT 30
19696: PUSH
19697: LD_INT 8
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: PPUSH
19714: CALL 14795 0 4
// if ruPossition = 2 then
19718: LD_EXP 41
19722: PUSH
19723: LD_INT 2
19725: EQUAL
19726: IFFALSE 19781
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19728: LD_INT 3
19730: PPUSH
19731: LD_INT 14
19733: PPUSH
19734: LD_INT 11
19736: PPUSH
19737: LD_INT 22
19739: PUSH
19740: LD_INT 3
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: LD_INT 21
19749: PUSH
19750: LD_INT 3
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 30
19759: PUSH
19760: LD_INT 8
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 69
19776: PPUSH
19777: CALL 14795 0 4
// if ruPossition = 3 then
19781: LD_EXP 41
19785: PUSH
19786: LD_INT 3
19788: EQUAL
19789: IFFALSE 19844
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19791: LD_INT 3
19793: PPUSH
19794: LD_INT 15
19796: PPUSH
19797: LD_INT 12
19799: PPUSH
19800: LD_INT 22
19802: PUSH
19803: LD_INT 3
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: LD_INT 21
19812: PUSH
19813: LD_INT 3
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PUSH
19820: LD_INT 30
19822: PUSH
19823: LD_INT 8
19825: PUSH
19826: EMPTY
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: LIST
19834: PPUSH
19835: CALL_OW 69
19839: PPUSH
19840: CALL 14795 0 4
// end ;
19844: END
// every 0 0$1 do
19845: GO 19847
19847: DISABLE
// begin enable ;
19848: ENABLE
// if ruPossition = 1 then
19849: LD_EXP 41
19853: PUSH
19854: LD_INT 1
19856: EQUAL
19857: IFFALSE 19869
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
19859: LD_INT 3
19861: PPUSH
19862: LD_INT 10
19864: PPUSH
19865: CALL 13866 0 2
// if ruPossition = 2 then
19869: LD_EXP 41
19873: PUSH
19874: LD_INT 2
19876: EQUAL
19877: IFFALSE 19889
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
19879: LD_INT 3
19881: PPUSH
19882: LD_INT 11
19884: PPUSH
19885: CALL 13866 0 2
// if ruPossition = 3 then
19889: LD_EXP 41
19893: PUSH
19894: LD_INT 3
19896: EQUAL
19897: IFFALSE 19909
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
19899: LD_INT 3
19901: PPUSH
19902: LD_INT 12
19904: PPUSH
19905: CALL 13866 0 2
// IntBazooka ( 3 , 1 ) ;
19909: LD_INT 3
19911: PPUSH
19912: LD_INT 1
19914: PPUSH
19915: CALL 12685 0 2
// IntBazooka ( 6 , 1 ) ;
19919: LD_INT 6
19921: PPUSH
19922: LD_INT 1
19924: PPUSH
19925: CALL 12685 0 2
// end ;
19929: END
// every 0 0$1 trigger ArabianTrait = 1 do
19930: LD_EXP 49
19934: PUSH
19935: LD_INT 1
19937: EQUAL
19938: IFFALSE 19993
19940: GO 19942
19942: DISABLE
// begin PlaceMines ( MineField1 , 10 ) ;
19943: LD_INT 24
19945: PPUSH
19946: LD_INT 10
19948: PPUSH
19949: CALL 19267 0 2
// if Difficulty > 1 then
19953: LD_OWVAR 67
19957: PUSH
19958: LD_INT 1
19960: GREATER
19961: IFFALSE 19973
// PlaceMines ( MineField2 , 10 ) ;
19963: LD_INT 25
19965: PPUSH
19966: LD_INT 10
19968: PPUSH
19969: CALL 19267 0 2
// if Difficulty > 2 then
19973: LD_OWVAR 67
19977: PUSH
19978: LD_INT 2
19980: GREATER
19981: IFFALSE 19993
// PlaceMines ( MineField3 , 10 ) ;
19983: LD_INT 26
19985: PPUSH
19986: LD_INT 10
19988: PPUSH
19989: CALL 19267 0 2
// end ;
19993: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19994: LD_EXP 39
19998: PUSH
19999: LD_INT 1
20001: EQUAL
20002: PUSH
20003: LD_EXP 35
20007: PPUSH
20008: CALL_OW 302
20012: AND
20013: PUSH
20014: LD_EXP 35
20018: PPUSH
20019: CALL_OW 255
20023: PUSH
20024: LD_INT 3
20026: EQUAL
20027: AND
20028: PUSH
20029: LD_INT 22
20031: PUSH
20032: LD_INT 3
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 21
20041: PUSH
20042: LD_INT 2
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: LD_INT 33
20051: PUSH
20052: LD_INT 3
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: EMPTY
20060: LIST
20061: LIST
20062: LIST
20063: PPUSH
20064: CALL_OW 69
20068: PUSH
20069: LD_INT 0
20071: EQUAL
20072: AND
20073: IFFALSE 20281
20075: GO 20077
20077: DISABLE
// begin enable ;
20078: ENABLE
// if Difficulty = 1 then
20079: LD_OWVAR 67
20083: PUSH
20084: LD_INT 1
20086: EQUAL
20087: IFFALSE 20149
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20089: LD_INT 3
20091: PPUSH
20092: LD_EXP 35
20096: PPUSH
20097: LD_INT 5
20099: PPUSH
20100: LD_INT 8
20102: PPUSH
20103: CALL_OW 12
20107: PPUSH
20108: LD_INT 1
20110: PPUSH
20111: LD_INT 43
20113: PUSH
20114: LD_INT 44
20116: PUSH
20117: LD_INT 45
20119: PUSH
20120: LD_INT 46
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: PPUSH
20129: LD_INT 1
20131: PPUSH
20132: LD_INT 1
20134: PUSH
20135: LD_INT 3
20137: PUSH
20138: EMPTY
20139: LIST
20140: LIST
20141: PPUSH
20142: LD_INT 22
20144: PPUSH
20145: CALL 18625 0 8
// if Difficulty = 2 then
20149: LD_OWVAR 67
20153: PUSH
20154: LD_INT 2
20156: EQUAL
20157: IFFALSE 20215
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20159: LD_INT 3
20161: PPUSH
20162: LD_EXP 35
20166: PPUSH
20167: LD_INT 6
20169: PPUSH
20170: LD_INT 8
20172: PPUSH
20173: CALL_OW 12
20177: PPUSH
20178: LD_INT 1
20180: PPUSH
20181: LD_INT 44
20183: PUSH
20184: LD_INT 45
20186: PUSH
20187: LD_INT 46
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: LIST
20194: PPUSH
20195: LD_INT 1
20197: PPUSH
20198: LD_INT 1
20200: PUSH
20201: LD_INT 3
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PPUSH
20208: LD_INT 22
20210: PPUSH
20211: CALL 18625 0 8
// if Difficulty = 3 then
20215: LD_OWVAR 67
20219: PUSH
20220: LD_INT 3
20222: EQUAL
20223: IFFALSE 20281
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20225: LD_INT 3
20227: PPUSH
20228: LD_EXP 35
20232: PPUSH
20233: LD_INT 7
20235: PPUSH
20236: LD_INT 8
20238: PPUSH
20239: CALL_OW 12
20243: PPUSH
20244: LD_INT 1
20246: PPUSH
20247: LD_INT 44
20249: PUSH
20250: LD_INT 45
20252: PUSH
20253: LD_INT 46
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: PPUSH
20261: LD_INT 1
20263: PPUSH
20264: LD_INT 1
20266: PUSH
20267: LD_INT 3
20269: PUSH
20270: EMPTY
20271: LIST
20272: LIST
20273: PPUSH
20274: LD_INT 22
20276: PPUSH
20277: CALL 18625 0 8
// end ;
20281: END
// every 0 0$01 trigger arabianMines do var i , p ;
20282: LD_EXP 50
20286: IFFALSE 20496
20288: GO 20290
20290: DISABLE
20291: LD_INT 0
20293: PPUSH
20294: PPUSH
// begin enable ;
20295: ENABLE
// p := 1 ;
20296: LD_ADDR_VAR 0 2
20300: PUSH
20301: LD_INT 1
20303: ST_TO_ADDR
// for i = 1 to arabianMines / 2 do
20304: LD_ADDR_VAR 0 1
20308: PUSH
20309: DOUBLE
20310: LD_INT 1
20312: DEC
20313: ST_TO_ADDR
20314: LD_EXP 50
20318: PUSH
20319: LD_INT 2
20321: DIVREAL
20322: PUSH
20323: FOR_TO
20324: IFFALSE 20494
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ] ] ) then
20326: LD_INT 22
20328: PUSH
20329: LD_INT 1
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: PUSH
20336: LD_INT 92
20338: PUSH
20339: LD_EXP 50
20343: PUSH
20344: LD_VAR 0 2
20348: ARRAY
20349: PUSH
20350: LD_EXP 50
20354: PUSH
20355: LD_VAR 0 2
20359: PUSH
20360: LD_INT 1
20362: PLUS
20363: ARRAY
20364: PUSH
20365: LD_INT 2
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: LIST
20372: LIST
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PPUSH
20378: CALL_OW 69
20382: IFFALSE 20478
// begin wait ( 0 0$0.5 ) ;
20384: LD_INT 18
20386: PPUSH
20387: CALL_OW 67
// LaunchMineAtPos ( arabianMines [ p ] , arabianMines [ p + 1 ] , 2 ) ;
20391: LD_EXP 50
20395: PUSH
20396: LD_VAR 0 2
20400: ARRAY
20401: PPUSH
20402: LD_EXP 50
20406: PUSH
20407: LD_VAR 0 2
20411: PUSH
20412: LD_INT 1
20414: PLUS
20415: ARRAY
20416: PPUSH
20417: LD_INT 2
20419: PPUSH
20420: CALL_OW 456
// arabianMines := Delete ( arabianMines , p ) ;
20424: LD_ADDR_EXP 50
20428: PUSH
20429: LD_EXP 50
20433: PPUSH
20434: LD_VAR 0 2
20438: PPUSH
20439: CALL_OW 3
20443: ST_TO_ADDR
// arabianMines := Delete ( arabianMines , p ) ;
20444: LD_ADDR_EXP 50
20448: PUSH
20449: LD_EXP 50
20453: PPUSH
20454: LD_VAR 0 2
20458: PPUSH
20459: CALL_OW 3
20463: ST_TO_ADDR
// p := p - 2 ;
20464: LD_ADDR_VAR 0 2
20468: PUSH
20469: LD_VAR 0 2
20473: PUSH
20474: LD_INT 2
20476: MINUS
20477: ST_TO_ADDR
// end ; p := p + 2 ;
20478: LD_ADDR_VAR 0 2
20482: PUSH
20483: LD_VAR 0 2
20487: PUSH
20488: LD_INT 2
20490: PLUS
20491: ST_TO_ADDR
// end ;
20492: GO 20323
20494: POP
20495: POP
// end ; end_of_file
20496: PPOPN 2
20498: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20499: LD_VAR 0 1
20503: PPUSH
20504: CALL_OW 255
20508: PUSH
20509: LD_INT 4
20511: EQUAL
20512: IFFALSE 20526
// SetBName ( building , epsilon ) ;
20514: LD_VAR 0 1
20518: PPUSH
20519: LD_STRING epsilon
20521: PPUSH
20522: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL_OW 255
20535: PUSH
20536: LD_INT 1
20538: EQUAL
20539: PUSH
20540: LD_VAR 0 1
20544: PPUSH
20545: CALL_OW 266
20549: PUSH
20550: LD_INT 0
20552: EQUAL
20553: AND
20554: IFFALSE 20568
// SetBName ( building , epsilon ) ;
20556: LD_VAR 0 1
20560: PPUSH
20561: LD_STRING epsilon
20563: PPUSH
20564: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20568: LD_VAR 0 1
20572: PPUSH
20573: CALL_OW 255
20577: PUSH
20578: LD_INT 3
20580: EQUAL
20581: PUSH
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 266
20591: PUSH
20592: LD_INT 0
20594: EQUAL
20595: AND
20596: IFFALSE 20610
// SetBName ( building , chuikov ) ;
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_STRING chuikov
20605: PPUSH
20606: CALL_OW 500
// if GetSide ( building ) = 2 then
20610: LD_VAR 0 1
20614: PPUSH
20615: CALL_OW 255
20619: PUSH
20620: LD_INT 2
20622: EQUAL
20623: IFFALSE 20679
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20625: LD_VAR 0 1
20629: PPUSH
20630: CALL_OW 266
20634: PUSH
20635: LD_INT 6
20637: EQUAL
20638: PUSH
20639: LD_VAR 0 1
20643: PPUSH
20644: CALL_OW 266
20648: PUSH
20649: LD_INT 9
20651: EQUAL
20652: OR
20653: IFFALSE 20679
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20655: LD_VAR 0 1
20659: PPUSH
20660: LD_INT 10
20662: PPUSH
20663: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_INT 11
20674: PPUSH
20675: CALL_OW 207
// end ; end ; end ;
20679: PPOPN 2
20681: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20682: LD_INT 0
20684: PPUSH
20685: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20686: LD_VAR 0 1
20690: PUSH
20691: LD_INT 22
20693: PUSH
20694: LD_INT 3
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 23
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 21
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: EMPTY
20722: LIST
20723: LIST
20724: LIST
20725: PPUSH
20726: CALL_OW 69
20730: IN
20731: PUSH
20732: LD_EXP 58
20736: NOT
20737: AND
20738: IFFALSE 20769
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20740: LD_ADDR_EXP 58
20744: PUSH
20745: LD_VAR 0 1
20749: PPUSH
20750: CALL_OW 250
20754: PUSH
20755: LD_VAR 0 1
20759: PPUSH
20760: CALL_OW 251
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetType ( un ) = unit_vehicle and GetControl ( un ) = control_manual then
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 255
20778: PUSH
20779: LD_INT 3
20781: EQUAL
20782: PUSH
20783: LD_VAR 0 1
20787: PPUSH
20788: CALL_OW 247
20792: PUSH
20793: LD_INT 2
20795: EQUAL
20796: AND
20797: PUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL_OW 263
20807: PUSH
20808: LD_INT 1
20810: EQUAL
20811: AND
20812: IFFALSE 20859
// begin tmpMeh = UnitsInside ( un ) ;
20814: LD_ADDR_VAR 0 3
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 313
20828: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
20829: LD_VAR 0 3
20833: PPUSH
20834: CALL_OW 121
// wait ( 0 0$01 ) ;
20838: LD_INT 35
20840: PPUSH
20841: CALL_OW 67
// ComEnterUnit ( tmpMeh , ruFab ) ;
20845: LD_VAR 0 3
20849: PPUSH
20850: LD_EXP 35
20854: PPUSH
20855: CALL_OW 120
// end ; end ;
20859: PPOPN 3
20861: END
// on BuildingComplete ( building ) do var i ;
20862: LD_INT 0
20864: PPUSH
// begin if GetSide ( building ) = 1 then
20865: LD_VAR 0 1
20869: PPUSH
20870: CALL_OW 255
20874: PUSH
20875: LD_INT 1
20877: EQUAL
20878: IFFALSE 21138
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 or GetBType ( building ) = 11 then
20880: LD_VAR 0 1
20884: PPUSH
20885: CALL_OW 266
20889: PUSH
20890: LD_INT 26
20892: EQUAL
20893: PUSH
20894: LD_VAR 0 1
20898: PPUSH
20899: CALL_OW 266
20903: PUSH
20904: LD_INT 27
20906: EQUAL
20907: OR
20908: PUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 266
20918: PUSH
20919: LD_INT 28
20921: EQUAL
20922: OR
20923: PUSH
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 266
20933: PUSH
20934: LD_INT 11
20936: EQUAL
20937: OR
20938: IFFALSE 21138
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_and , [ f_btype , b_lab_siberium ] ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
20940: LD_INT 22
20942: PUSH
20943: LD_INT 1
20945: PUSH
20946: EMPTY
20947: LIST
20948: LIST
20949: PUSH
20950: LD_INT 2
20952: PUSH
20953: LD_INT 30
20955: PUSH
20956: LD_INT 7
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: LD_INT 30
20965: PUSH
20966: LD_INT 8
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: EMPTY
20974: LIST
20975: LIST
20976: LIST
20977: PUSH
20978: LD_INT 1
20980: PUSH
20981: LD_INT 30
20983: PUSH
20984: LD_INT 11
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: LD_INT 1
20997: PUSH
20998: LD_INT 2
21000: PUSH
21001: LD_INT 30
21003: PUSH
21004: LD_INT 26
21006: PUSH
21007: EMPTY
21008: LIST
21009: LIST
21010: PUSH
21011: LD_INT 30
21013: PUSH
21014: LD_INT 27
21016: PUSH
21017: EMPTY
21018: LIST
21019: LIST
21020: PUSH
21021: LD_INT 30
21023: PUSH
21024: LD_INT 28
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: EMPTY
21042: LIST
21043: LIST
21044: LIST
21045: LIST
21046: PPUSH
21047: CALL_OW 69
21051: PUSH
21052: LD_INT 0
21054: GREATER
21055: PUSH
21056: LD_INT 22
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 30
21071: PUSH
21072: LD_INT 26
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 30
21081: PUSH
21082: LD_INT 27
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: LD_INT 30
21091: PUSH
21092: LD_INT 28
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: PUSH
21099: EMPTY
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 69
21113: PUSH
21114: LD_INT 0
21116: GREATER
21117: AND
21118: PUSH
21119: LD_EXP 61
21123: PUSH
21124: LD_INT 0
21126: EQUAL
21127: AND
21128: IFFALSE 21138
// eventVar1 = 1 ;
21130: LD_ADDR_EXP 61
21134: PUSH
21135: LD_INT 1
21137: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
21138: LD_VAR 0 1
21142: PPUSH
21143: CALL_OW 255
21147: PUSH
21148: LD_INT 3
21150: EQUAL
21151: IFFALSE 21631
// begin if GetBType ( building ) = b_depot then
21153: LD_VAR 0 1
21157: PPUSH
21158: CALL_OW 266
21162: PUSH
21163: LD_INT 0
21165: EQUAL
21166: IFFALSE 21238
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21168: LD_VAR 0 1
21172: PPUSH
21173: CALL_OW 274
21177: PPUSH
21178: LD_INT 1
21180: PPUSH
21181: LD_INT 5000
21183: PPUSH
21184: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21188: LD_VAR 0 1
21192: PPUSH
21193: CALL_OW 274
21197: PPUSH
21198: LD_INT 2
21200: PPUSH
21201: LD_INT 5000
21203: PPUSH
21204: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21208: LD_VAR 0 1
21212: PPUSH
21213: CALL_OW 274
21217: PPUSH
21218: LD_INT 3
21220: PPUSH
21221: LD_INT 5000
21223: PPUSH
21224: CALL_OW 277
// ruDepot = building ;
21228: LD_ADDR_EXP 30
21232: PUSH
21233: LD_VAR 0 1
21237: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21238: LD_VAR 0 1
21242: PPUSH
21243: CALL_OW 266
21247: PUSH
21248: LD_INT 0
21250: EQUAL
21251: PUSH
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 266
21261: PUSH
21262: LD_INT 2
21264: EQUAL
21265: OR
21266: PUSH
21267: LD_VAR 0 1
21271: PPUSH
21272: CALL_OW 266
21276: PUSH
21277: LD_INT 4
21279: EQUAL
21280: OR
21281: IFFALSE 21292
// ComUpgrade ( building ) ;
21283: LD_VAR 0 1
21287: PPUSH
21288: CALL_OW 146
// if GetBType ( building ) = b_lab then
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 266
21301: PUSH
21302: LD_INT 6
21304: EQUAL
21305: IFFALSE 21508
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21307: LD_INT 22
21309: PUSH
21310: LD_INT 3
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 30
21319: PUSH
21320: LD_INT 8
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PPUSH
21331: CALL_OW 69
21335: PUSH
21336: LD_INT 0
21338: EQUAL
21339: IFFALSE 21377
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21341: LD_VAR 0 1
21345: PPUSH
21346: LD_INT 10
21348: PPUSH
21349: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21353: LD_VAR 0 1
21357: PPUSH
21358: LD_INT 12
21360: PPUSH
21361: CALL_OW 207
// ruLab1 = building ;
21365: LD_ADDR_EXP 31
21369: PUSH
21370: LD_VAR 0 1
21374: ST_TO_ADDR
// end else
21375: GO 21411
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21377: LD_VAR 0 1
21381: PPUSH
21382: LD_INT 11
21384: PPUSH
21385: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21389: LD_VAR 0 1
21393: PPUSH
21394: LD_INT 14
21396: PPUSH
21397: CALL_OW 207
// ruLab2 = building ;
21401: LD_ADDR_EXP 32
21405: PUSH
21406: LD_VAR 0 1
21410: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21411: LD_INT 3
21413: PPUSH
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_INT 3
21421: PPUSH
21422: CALL 13781 0 3
// if ruDestroyedBuildings > 0 then
21426: LD_EXP 42
21430: PUSH
21431: LD_INT 0
21433: GREATER
21434: IFFALSE 21508
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21436: LD_ADDR_EXP 42
21440: PUSH
21441: LD_EXP 42
21445: PPUSH
21446: LD_INT 1
21448: PPUSH
21449: CALL_OW 3
21453: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21454: LD_ADDR_EXP 42
21458: PUSH
21459: LD_EXP 42
21463: PPUSH
21464: LD_INT 1
21466: PPUSH
21467: CALL_OW 3
21471: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21472: LD_ADDR_EXP 42
21476: PUSH
21477: LD_EXP 42
21481: PPUSH
21482: LD_INT 1
21484: PPUSH
21485: CALL_OW 3
21489: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21490: LD_ADDR_EXP 42
21494: PUSH
21495: LD_EXP 42
21499: PPUSH
21500: LD_INT 1
21502: PPUSH
21503: CALL_OW 3
21507: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 266
21517: PUSH
21518: LD_INT 32
21520: EQUAL
21521: IFFALSE 21558
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21523: LD_VAR 0 1
21527: PPUSH
21528: LD_INT 44
21530: PUSH
21531: LD_INT 45
21533: PUSH
21534: LD_INT 46
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: PUSH
21542: LD_INT 1
21544: PPUSH
21545: LD_INT 3
21547: PPUSH
21548: CALL_OW 12
21552: ARRAY
21553: PPUSH
21554: CALL_OW 208
// if GetBType ( building ) = b_turret then
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 266
21567: PUSH
21568: LD_INT 33
21570: EQUAL
21571: IFFALSE 21608
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21573: LD_VAR 0 1
21577: PPUSH
21578: LD_INT 44
21580: PUSH
21581: LD_INT 46
21583: PUSH
21584: LD_INT 46
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: PUSH
21592: LD_INT 1
21594: PPUSH
21595: LD_INT 3
21597: PPUSH
21598: CALL_OW 12
21602: ARRAY
21603: PPUSH
21604: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21608: LD_VAR 0 1
21612: PPUSH
21613: CALL_OW 266
21617: PUSH
21618: LD_INT 24
21620: EQUAL
21621: IFFALSE 21631
// russianAI = 1 ;
21623: LD_ADDR_EXP 39
21627: PUSH
21628: LD_INT 1
21630: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 255
21640: PUSH
21641: LD_INT 2
21643: EQUAL
21644: IFFALSE 22202
// begin if GetBType ( building ) = b_depot then
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 266
21655: PUSH
21656: LD_INT 0
21658: EQUAL
21659: IFFALSE 21745
// begin arDepot = building ;
21661: LD_ADDR_EXP 43
21665: PUSH
21666: LD_VAR 0 1
21670: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21671: LD_INT 38
21673: PUSH
21674: LD_INT 47
21676: PUSH
21677: EMPTY
21678: LIST
21679: LIST
21680: PPUSH
21681: LD_INT 71
21683: PPUSH
21684: LD_INT 19
21686: PPUSH
21687: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 274
21700: PPUSH
21701: LD_INT 1
21703: PPUSH
21704: LD_INT 500
21706: PPUSH
21707: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21711: LD_VAR 0 1
21715: PPUSH
21716: CALL_OW 274
21720: PPUSH
21721: LD_INT 3
21723: PPUSH
21724: LD_INT 30
21726: PPUSH
21727: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21731: LD_EXP 26
21735: PPUSH
21736: LD_EXP 43
21740: PPUSH
21741: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21745: LD_VAR 0 1
21749: PPUSH
21750: CALL_OW 266
21754: PUSH
21755: LD_INT 6
21757: EQUAL
21758: PUSH
21759: LD_VAR 0 1
21763: PPUSH
21764: CALL_OW 266
21768: PUSH
21769: LD_INT 9
21771: EQUAL
21772: OR
21773: IFFALSE 21824
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21775: LD_VAR 0 1
21779: PPUSH
21780: LD_INT 10
21782: PPUSH
21783: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21787: LD_VAR 0 1
21791: PPUSH
21792: LD_INT 11
21794: PPUSH
21795: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21799: LD_INT 2
21801: PPUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: LD_INT 2
21809: PPUSH
21810: CALL 13781 0 3
// arLab = building ;
21814: LD_ADDR_EXP 44
21818: PUSH
21819: LD_VAR 0 1
21823: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21824: LD_VAR 0 1
21828: PPUSH
21829: CALL_OW 266
21833: PUSH
21834: LD_INT 2
21836: EQUAL
21837: PUSH
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 266
21847: PUSH
21848: LD_INT 4
21850: EQUAL
21851: OR
21852: IFFALSE 21863
// ComUpgrade ( building ) ;
21854: LD_VAR 0 1
21858: PPUSH
21859: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
21863: LD_VAR 0 1
21867: PPUSH
21868: CALL_OW 266
21872: PUSH
21873: LD_INT 31
21875: EQUAL
21876: PUSH
21877: LD_INT 22
21879: PUSH
21880: LD_INT 2
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PUSH
21887: LD_INT 25
21889: PUSH
21890: LD_INT 1
21892: PUSH
21893: EMPTY
21894: LIST
21895: LIST
21896: PUSH
21897: LD_INT 3
21899: PUSH
21900: LD_INT 54
21902: PUSH
21903: EMPTY
21904: LIST
21905: PUSH
21906: LD_INT 3
21908: PUSH
21909: LD_INT 60
21911: PUSH
21912: EMPTY
21913: LIST
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: EMPTY
21920: LIST
21921: LIST
21922: LIST
21923: PUSH
21924: EMPTY
21925: LIST
21926: LIST
21927: LIST
21928: PPUSH
21929: CALL_OW 69
21933: PUSH
21934: LD_INT 0
21936: GREATER
21937: AND
21938: IFFALSE 22010
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
21940: LD_INT 22
21942: PUSH
21943: LD_INT 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 25
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: LD_INT 54
21965: PUSH
21966: EMPTY
21967: LIST
21968: PUSH
21969: LD_INT 3
21971: PUSH
21972: LD_INT 60
21974: PUSH
21975: EMPTY
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: LIST
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: PPUSH
21992: CALL_OW 69
21996: PUSH
21997: LD_INT 1
21999: ARRAY
22000: PPUSH
22001: LD_VAR 0 1
22005: PPUSH
22006: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
22010: LD_VAR 0 1
22014: PPUSH
22015: CALL_OW 266
22019: PUSH
22020: LD_INT 27
22022: EQUAL
22023: IFFALSE 22202
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22025: LD_INT 22
22027: PUSH
22028: LD_INT 2
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: PUSH
22035: LD_INT 30
22037: PUSH
22038: LD_INT 27
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: PPUSH
22049: CALL_OW 69
22053: PUSH
22054: LD_INT 2
22056: EQUAL
22057: IFFALSE 22202
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22059: LD_ADDR_VAR 0 2
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_INT 2
22069: PUSH
22070: EMPTY
22071: LIST
22072: LIST
22073: PUSH
22074: LD_INT 21
22076: PUSH
22077: LD_INT 1
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 25
22086: PUSH
22087: LD_INT 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: EMPTY
22095: LIST
22096: LIST
22097: LIST
22098: PPUSH
22099: CALL_OW 69
22103: PUSH
22104: LD_INT 1
22106: ARRAY
22107: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22108: LD_VAR 0 2
22112: PPUSH
22113: LD_INT 92
22115: PPUSH
22116: LD_INT 34
22118: PPUSH
22119: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22123: LD_VAR 0 2
22127: PPUSH
22128: LD_INT 82
22130: PPUSH
22131: LD_INT 57
22133: PPUSH
22134: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22138: LD_VAR 0 2
22142: PPUSH
22143: LD_INT 36
22145: PPUSH
22146: LD_INT 28
22148: PPUSH
22149: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22153: LD_INT 22
22155: PUSH
22156: LD_INT 2
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 21
22165: PUSH
22166: LD_INT 1
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 25
22175: PUSH
22176: LD_INT 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: EMPTY
22184: LIST
22185: LIST
22186: LIST
22187: PPUSH
22188: CALL_OW 69
22192: PPUSH
22193: LD_EXP 43
22197: PPUSH
22198: CALL_OW 180
// end ; end ; end ;
22202: PPOPN 2
22204: END
// on UpgradeComplete ( building ) do var i ;
22205: LD_INT 0
22207: PPUSH
// begin if GetSide ( building ) = 1 then
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 255
22217: PUSH
22218: LD_INT 1
22220: EQUAL
22221: IFFALSE 22421
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
22223: LD_INT 22
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 2
22235: PUSH
22236: LD_INT 30
22238: PUSH
22239: LD_INT 7
22241: PUSH
22242: EMPTY
22243: LIST
22244: LIST
22245: PUSH
22246: LD_INT 30
22248: PUSH
22249: LD_INT 8
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: PUSH
22256: LD_INT 1
22258: PUSH
22259: LD_INT 30
22261: PUSH
22262: LD_INT 11
22264: PUSH
22265: EMPTY
22266: LIST
22267: LIST
22268: PUSH
22269: LD_INT 1
22271: PUSH
22272: LD_INT 2
22274: PUSH
22275: LD_INT 30
22277: PUSH
22278: LD_INT 26
22280: PUSH
22281: EMPTY
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 30
22287: PUSH
22288: LD_INT 27
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: PUSH
22295: LD_INT 30
22297: PUSH
22298: LD_INT 28
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: EMPTY
22316: LIST
22317: LIST
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: PUSH
22335: LD_INT 0
22337: GREATER
22338: PUSH
22339: LD_INT 22
22341: PUSH
22342: LD_INT 1
22344: PUSH
22345: EMPTY
22346: LIST
22347: LIST
22348: PUSH
22349: LD_INT 2
22351: PUSH
22352: LD_INT 30
22354: PUSH
22355: LD_INT 26
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: PUSH
22362: LD_INT 30
22364: PUSH
22365: LD_INT 27
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 30
22374: PUSH
22375: LD_INT 28
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: CALL_OW 69
22396: PUSH
22397: LD_INT 0
22399: GREATER
22400: AND
22401: PUSH
22402: LD_EXP 61
22406: PUSH
22407: LD_INT 0
22409: EQUAL
22410: AND
22411: IFFALSE 22421
// eventVar1 = 1 ;
22413: LD_ADDR_EXP 61
22417: PUSH
22418: LD_INT 1
22420: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 255
22430: PUSH
22431: LD_INT 2
22433: EQUAL
22434: IFFALSE 22539
// begin if GetBType ( building ) = b_barracks then
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 266
22445: PUSH
22446: LD_INT 5
22448: EQUAL
22449: IFFALSE 22539
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22451: LD_ADDR_VAR 0 2
22455: PUSH
22456: LD_INT 22
22458: PUSH
22459: LD_INT 2
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 25
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: LD_INT 3
22478: PUSH
22479: LD_INT 54
22481: PUSH
22482: EMPTY
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: LIST
22493: PPUSH
22494: CALL_OW 69
22498: PUSH
22499: LD_EXP 26
22503: PUSH
22504: EMPTY
22505: LIST
22506: DIFF
22507: PUSH
22508: FOR_IN
22509: IFFALSE 22527
// ComEnterUnit ( i , building ) ;
22511: LD_VAR 0 2
22515: PPUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: CALL_OW 120
22525: GO 22508
22527: POP
22528: POP
// arArm = building ;
22529: LD_ADDR_EXP 45
22533: PUSH
22534: LD_VAR 0 1
22538: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22539: LD_VAR 0 1
22543: PPUSH
22544: CALL_OW 255
22548: PUSH
22549: LD_INT 3
22551: EQUAL
22552: IFFALSE 23025
// begin if GetBType ( building ) = b_factory then
22554: LD_VAR 0 1
22558: PPUSH
22559: CALL_OW 266
22563: PUSH
22564: LD_INT 3
22566: EQUAL
22567: IFFALSE 22634
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22569: LD_ADDR_VAR 0 2
22573: PUSH
22574: LD_INT 22
22576: PUSH
22577: LD_INT 3
22579: PUSH
22580: EMPTY
22581: LIST
22582: LIST
22583: PUSH
22584: LD_INT 25
22586: PUSH
22587: LD_INT 3
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PPUSH
22598: CALL_OW 69
22602: PUSH
22603: FOR_IN
22604: IFFALSE 22622
// ComEnterUnit ( i , building ) ;
22606: LD_VAR 0 2
22610: PPUSH
22611: LD_VAR 0 1
22615: PPUSH
22616: CALL_OW 120
22620: GO 22603
22622: POP
22623: POP
// ruFab = building ;
22624: LD_ADDR_EXP 35
22628: PUSH
22629: LD_VAR 0 1
22633: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22634: LD_INT 22
22636: PUSH
22637: LD_INT 3
22639: PUSH
22640: EMPTY
22641: LIST
22642: LIST
22643: PUSH
22644: LD_INT 21
22646: PUSH
22647: LD_INT 3
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PUSH
22654: LD_INT 30
22656: PUSH
22657: LD_INT 8
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: PUSH
22664: EMPTY
22665: LIST
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: PUSH
22674: LD_INT 2
22676: EQUAL
22677: IFFALSE 22885
// begin for i = 1 to 2 do
22679: LD_ADDR_VAR 0 2
22683: PUSH
22684: DOUBLE
22685: LD_INT 1
22687: DEC
22688: ST_TO_ADDR
22689: LD_INT 2
22691: PUSH
22692: FOR_TO
22693: IFFALSE 22780
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22695: LD_INT 22
22697: PUSH
22698: LD_INT 3
22700: PUSH
22701: EMPTY
22702: LIST
22703: LIST
22704: PUSH
22705: LD_INT 25
22707: PUSH
22708: LD_INT 4
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: EMPTY
22716: LIST
22717: LIST
22718: PPUSH
22719: CALL_OW 69
22723: PUSH
22724: LD_VAR 0 2
22728: ARRAY
22729: PPUSH
22730: LD_INT 22
22732: PUSH
22733: LD_INT 3
22735: PUSH
22736: EMPTY
22737: LIST
22738: LIST
22739: PUSH
22740: LD_INT 21
22742: PUSH
22743: LD_INT 3
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 30
22752: PUSH
22753: LD_INT 8
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: EMPTY
22761: LIST
22762: LIST
22763: LIST
22764: PPUSH
22765: CALL_OW 69
22769: PUSH
22770: LD_INT 1
22772: ARRAY
22773: PPUSH
22774: CALL_OW 120
22778: GO 22692
22780: POP
22781: POP
// for i = 3 to 4 do
22782: LD_ADDR_VAR 0 2
22786: PUSH
22787: DOUBLE
22788: LD_INT 3
22790: DEC
22791: ST_TO_ADDR
22792: LD_INT 4
22794: PUSH
22795: FOR_TO
22796: IFFALSE 22883
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
22798: LD_INT 22
22800: PUSH
22801: LD_INT 3
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 25
22810: PUSH
22811: LD_INT 4
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PPUSH
22822: CALL_OW 69
22826: PUSH
22827: LD_VAR 0 2
22831: ARRAY
22832: PPUSH
22833: LD_INT 22
22835: PUSH
22836: LD_INT 3
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: LD_INT 21
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: EMPTY
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 30
22855: PUSH
22856: LD_INT 8
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 69
22872: PUSH
22873: LD_INT 2
22875: ARRAY
22876: PPUSH
22877: CALL_OW 120
22881: GO 22795
22883: POP
22884: POP
// end ; if GetBType ( building ) = b_barracks then
22885: LD_VAR 0 1
22889: PPUSH
22890: CALL_OW 266
22894: PUSH
22895: LD_INT 5
22897: EQUAL
22898: IFFALSE 23025
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
22900: LD_ADDR_VAR 0 2
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 25
22917: PUSH
22918: LD_INT 1
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: LD_INT 54
22930: PUSH
22931: EMPTY
22932: LIST
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: LIST
22942: PPUSH
22943: CALL_OW 69
22947: PUSH
22948: FOR_IN
22949: IFFALSE 22967
// ComEnterUnit ( i , building ) ;
22951: LD_VAR 0 2
22955: PPUSH
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 120
22965: GO 22948
22967: POP
22968: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
22969: LD_INT 22
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PUSH
22979: LD_INT 30
22981: PUSH
22982: LD_INT 5
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PPUSH
22993: CALL_OW 69
22997: PUSH
22998: LD_INT 0
23000: EQUAL
23001: IFFALSE 23015
// ruArm1 = building else
23003: LD_ADDR_EXP 33
23007: PUSH
23008: LD_VAR 0 1
23012: ST_TO_ADDR
23013: GO 23025
// ruArm2 = building ;
23015: LD_ADDR_EXP 34
23019: PUSH
23020: LD_VAR 0 1
23024: ST_TO_ADDR
// end ; end ; end ;
23025: PPOPN 2
23027: END
// on EnterBuilding ( building , human ) do var rnd ;
23028: LD_INT 0
23030: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23031: LD_VAR 0 2
23035: PPUSH
23036: CALL_OW 255
23040: PUSH
23041: LD_INT 2
23043: EQUAL
23044: PUSH
23045: LD_VAR 0 2
23049: PPUSH
23050: CALL_OW 257
23054: PUSH
23055: LD_INT 1
23057: EQUAL
23058: AND
23059: PUSH
23060: LD_VAR 0 1
23064: PUSH
23065: LD_EXP 45
23069: EQUAL
23070: AND
23071: IFFALSE 23118
// begin wait ( 0 0$1 ) ;
23073: LD_INT 35
23075: PPUSH
23076: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23080: LD_ADDR_VAR 0 3
23084: PUSH
23085: LD_INT 1
23087: PPUSH
23088: LD_INT 100
23090: PPUSH
23091: CALL_OW 12
23095: ST_TO_ADDR
// if rnd > 50 then
23096: LD_VAR 0 3
23100: PUSH
23101: LD_INT 50
23103: GREATER
23104: IFFALSE 23118
// SetClass ( human , class_mortar ) ;
23106: LD_VAR 0 2
23110: PPUSH
23111: LD_INT 8
23113: PPUSH
23114: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23118: LD_VAR 0 2
23122: PPUSH
23123: CALL_OW 255
23127: PUSH
23128: LD_INT 3
23130: EQUAL
23131: PUSH
23132: LD_VAR 0 2
23136: PPUSH
23137: CALL_OW 257
23141: PUSH
23142: LD_INT 1
23144: EQUAL
23145: AND
23146: PUSH
23147: LD_VAR 0 1
23151: PUSH
23152: LD_EXP 33
23156: EQUAL
23157: PUSH
23158: LD_VAR 0 1
23162: PUSH
23163: LD_EXP 34
23167: EQUAL
23168: OR
23169: PUSH
23170: EMPTY
23171: LIST
23172: AND
23173: IFFALSE 23194
// begin wait ( 0 0$1 ) ;
23175: LD_INT 35
23177: PPUSH
23178: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23182: LD_VAR 0 2
23186: PPUSH
23187: LD_INT 9
23189: PPUSH
23190: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23194: LD_VAR 0 2
23198: PPUSH
23199: CALL_OW 255
23203: PUSH
23204: LD_INT 3
23206: EQUAL
23207: PUSH
23208: LD_VAR 0 2
23212: PPUSH
23213: CALL_OW 257
23217: PUSH
23218: LD_INT 9
23220: EQUAL
23221: AND
23222: PUSH
23223: LD_VAR 0 1
23227: PPUSH
23228: CALL_OW 266
23232: PUSH
23233: LD_INT 32
23235: EQUAL
23236: AND
23237: IFFALSE 23258
// begin wait ( 0 0$1 ) ;
23239: LD_INT 35
23241: PPUSH
23242: CALL_OW 67
// SetClass ( human , 1 ) ;
23246: LD_VAR 0 2
23250: PPUSH
23251: LD_INT 1
23253: PPUSH
23254: CALL_OW 336
// end ; end ;
23258: PPOPN 3
23260: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23261: LD_VAR 0 1
23265: PUSH
23266: LD_INT 1
23268: EQUAL
23269: PUSH
23270: LD_VAR 0 2
23274: PUSH
23275: LD_INT 2
23277: EQUAL
23278: AND
23279: PUSH
23280: LD_INT 1
23282: PPUSH
23283: LD_INT 2
23285: PPUSH
23286: CALL_OW 81
23290: PUSH
23291: LD_INT 1
23293: EQUAL
23294: AND
23295: IFFALSE 23316
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23297: LD_EXP 24
23301: PPUSH
23302: LD_STRING D6b-Pow-1
23304: PPUSH
23305: CALL_OW 94
// YouLost ( Powell ) ;
23309: LD_STRING Powell
23311: PPUSH
23312: CALL_OW 104
// end ; end ;
23316: PPOPN 2
23318: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23319: LD_INT 23
23321: PPUSH
23322: LD_INT 22
23324: PUSH
23325: LD_INT 1
23327: PUSH
23328: EMPTY
23329: LIST
23330: LIST
23331: PUSH
23332: LD_INT 21
23334: PUSH
23335: LD_INT 3
23337: PUSH
23338: EMPTY
23339: LIST
23340: LIST
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 70
23350: PUSH
23351: LD_INT 23
23353: PPUSH
23354: LD_INT 22
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 2
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 58
23376: PUSH
23377: EMPTY
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 70
23389: OR
23390: PUSH
23391: LD_INT 1
23393: PPUSH
23394: LD_INT 2
23396: PPUSH
23397: CALL_OW 81
23401: PUSH
23402: LD_INT 1
23404: EQUAL
23405: AND
23406: IFFALSE 23430
23408: GO 23410
23410: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23411: LD_EXP 24
23415: PPUSH
23416: LD_STRING D6b-Pow-1
23418: PPUSH
23419: CALL_OW 94
// YouLost ( Powell ) ;
23423: LD_STRING Powell
23425: PPUSH
23426: CALL_OW 104
// end ;
23430: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23431: LD_VAR 0 1
23435: PUSH
23436: LD_EXP 1
23440: EQUAL
23441: IFFALSE 23450
// YouLost ( JMM ) ;
23443: LD_STRING JMM
23445: PPUSH
23446: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 255
23459: PUSH
23460: LD_INT 3
23462: EQUAL
23463: PUSH
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 247
23473: PUSH
23474: LD_INT 3
23476: EQUAL
23477: AND
23478: IFFALSE 24294
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL_OW 266
23489: PUSH
23490: LD_INT 31
23492: EQUAL
23493: PUSH
23494: LD_VAR 0 1
23498: PPUSH
23499: CALL_OW 266
23503: PUSH
23504: LD_INT 32
23506: EQUAL
23507: OR
23508: PUSH
23509: LD_VAR 0 1
23513: PPUSH
23514: CALL_OW 266
23518: PUSH
23519: LD_INT 36
23521: EQUAL
23522: OR
23523: PUSH
23524: LD_VAR 0 1
23528: PPUSH
23529: CALL_OW 266
23533: PUSH
23534: LD_INT 0
23536: EQUAL
23537: OR
23538: PUSH
23539: LD_VAR 0 1
23543: PPUSH
23544: CALL_OW 266
23548: PUSH
23549: LD_INT 24
23551: EQUAL
23552: OR
23553: PUSH
23554: LD_VAR 0 1
23558: PPUSH
23559: CALL_OW 266
23563: PUSH
23564: LD_INT 17
23566: EQUAL
23567: OR
23568: PUSH
23569: LD_VAR 0 1
23573: PPUSH
23574: CALL_OW 266
23578: PUSH
23579: LD_INT 25
23581: EQUAL
23582: OR
23583: PUSH
23584: LD_VAR 0 1
23588: PPUSH
23589: CALL_OW 266
23593: PUSH
23594: LD_INT 19
23596: EQUAL
23597: OR
23598: PUSH
23599: LD_VAR 0 1
23603: PPUSH
23604: CALL_OW 266
23608: PUSH
23609: LD_INT 20
23611: EQUAL
23612: OR
23613: PUSH
23614: LD_VAR 0 1
23618: PPUSH
23619: CALL_OW 266
23623: PUSH
23624: LD_INT 18
23626: EQUAL
23627: OR
23628: PUSH
23629: LD_VAR 0 1
23633: PPUSH
23634: CALL_OW 266
23638: PUSH
23639: LD_INT 21
23641: EQUAL
23642: OR
23643: PUSH
23644: LD_VAR 0 1
23648: PPUSH
23649: CALL_OW 266
23653: PUSH
23654: LD_INT 23
23656: EQUAL
23657: OR
23658: PUSH
23659: LD_VAR 0 1
23663: PPUSH
23664: CALL_OW 266
23668: PUSH
23669: LD_INT 16
23671: EQUAL
23672: OR
23673: PUSH
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 266
23683: PUSH
23684: LD_INT 6
23686: EQUAL
23687: OR
23688: PUSH
23689: LD_VAR 0 1
23693: PPUSH
23694: CALL_OW 266
23698: PUSH
23699: LD_INT 29
23701: EQUAL
23702: OR
23703: PUSH
23704: LD_VAR 0 1
23708: PPUSH
23709: CALL_OW 266
23713: PUSH
23714: LD_INT 26
23716: EQUAL
23717: OR
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 266
23728: PUSH
23729: LD_INT 30
23731: EQUAL
23732: OR
23733: PUSH
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 266
23743: PUSH
23744: LD_INT 28
23746: EQUAL
23747: OR
23748: PUSH
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 266
23758: PUSH
23759: LD_INT 27
23761: EQUAL
23762: OR
23763: PUSH
23764: LD_VAR 0 1
23768: PPUSH
23769: CALL_OW 266
23773: PUSH
23774: LD_INT 33
23776: EQUAL
23777: OR
23778: PUSH
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 266
23788: PUSH
23789: LD_INT 2
23791: EQUAL
23792: OR
23793: PUSH
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 266
23803: PUSH
23804: LD_INT 4
23806: EQUAL
23807: OR
23808: IFFALSE 23894
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
23810: LD_ADDR_EXP 42
23814: PUSH
23815: LD_EXP 42
23819: PUSH
23820: LD_VAR 0 1
23824: PPUSH
23825: CALL_OW 266
23829: ADD
23830: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23831: LD_ADDR_EXP 42
23835: PUSH
23836: LD_EXP 42
23840: PUSH
23841: LD_VAR 0 1
23845: PPUSH
23846: CALL_OW 250
23850: ADD
23851: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23852: LD_ADDR_EXP 42
23856: PUSH
23857: LD_EXP 42
23861: PUSH
23862: LD_VAR 0 1
23866: PPUSH
23867: CALL_OW 251
23871: ADD
23872: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23873: LD_ADDR_EXP 42
23877: PUSH
23878: LD_EXP 42
23882: PUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 254
23892: ADD
23893: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
23894: LD_VAR 0 1
23898: PPUSH
23899: CALL_OW 266
23903: PUSH
23904: LD_INT 1
23906: EQUAL
23907: IFFALSE 23986
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
23909: LD_ADDR_EXP 42
23913: PUSH
23914: LD_EXP 42
23918: PUSH
23919: LD_INT 0
23921: ADD
23922: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23923: LD_ADDR_EXP 42
23927: PUSH
23928: LD_EXP 42
23932: PUSH
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 250
23942: ADD
23943: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23944: LD_ADDR_EXP 42
23948: PUSH
23949: LD_EXP 42
23953: PUSH
23954: LD_VAR 0 1
23958: PPUSH
23959: CALL_OW 251
23963: ADD
23964: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23965: LD_ADDR_EXP 42
23969: PUSH
23970: LD_EXP 42
23974: PUSH
23975: LD_VAR 0 1
23979: PPUSH
23980: CALL_OW 254
23984: ADD
23985: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
23986: LD_VAR 0 1
23990: PPUSH
23991: CALL_OW 266
23995: PUSH
23996: LD_INT 3
23998: EQUAL
23999: IFFALSE 24078
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24001: LD_ADDR_EXP 42
24005: PUSH
24006: LD_EXP 42
24010: PUSH
24011: LD_INT 2
24013: ADD
24014: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24015: LD_ADDR_EXP 42
24019: PUSH
24020: LD_EXP 42
24024: PUSH
24025: LD_VAR 0 1
24029: PPUSH
24030: CALL_OW 250
24034: ADD
24035: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24036: LD_ADDR_EXP 42
24040: PUSH
24041: LD_EXP 42
24045: PUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 251
24055: ADD
24056: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24057: LD_ADDR_EXP 42
24061: PUSH
24062: LD_EXP 42
24066: PUSH
24067: LD_VAR 0 1
24071: PPUSH
24072: CALL_OW 254
24076: ADD
24077: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24078: LD_VAR 0 1
24082: PPUSH
24083: CALL_OW 266
24087: PUSH
24088: LD_INT 5
24090: EQUAL
24091: IFFALSE 24170
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24093: LD_ADDR_EXP 42
24097: PUSH
24098: LD_EXP 42
24102: PUSH
24103: LD_INT 4
24105: ADD
24106: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24107: LD_ADDR_EXP 42
24111: PUSH
24112: LD_EXP 42
24116: PUSH
24117: LD_VAR 0 1
24121: PPUSH
24122: CALL_OW 250
24126: ADD
24127: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24128: LD_ADDR_EXP 42
24132: PUSH
24133: LD_EXP 42
24137: PUSH
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL_OW 251
24147: ADD
24148: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24149: LD_ADDR_EXP 42
24153: PUSH
24154: LD_EXP 42
24158: PUSH
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL_OW 254
24168: ADD
24169: ST_TO_ADDR
// end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 257
24179: PUSH
24180: LD_INT 3
24182: EQUAL
24183: PUSH
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL_OW 255
24193: PUSH
24194: LD_INT 3
24196: EQUAL
24197: AND
24198: PUSH
24199: LD_EXP 35
24203: PPUSH
24204: CALL_OW 302
24208: AND
24209: PUSH
24210: LD_EXP 35
24214: PPUSH
24215: CALL_OW 255
24219: PUSH
24220: LD_INT 3
24222: EQUAL
24223: AND
24224: IFFALSE 24294
// begin uc_side = 3 ;
24226: LD_ADDR_OWVAR 20
24230: PUSH
24231: LD_INT 3
24233: ST_TO_ADDR
// uc_nation = 3 ;
24234: LD_ADDR_OWVAR 21
24238: PUSH
24239: LD_INT 3
24241: ST_TO_ADDR
// hc_gallery :=  ;
24242: LD_ADDR_OWVAR 33
24246: PUSH
24247: LD_STRING 
24249: ST_TO_ADDR
// hc_name :=  ;
24250: LD_ADDR_OWVAR 26
24254: PUSH
24255: LD_STRING 
24257: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24258: LD_INT 0
24260: PPUSH
24261: LD_EXP 36
24265: PPUSH
24266: LD_EXP 37
24270: PPUSH
24271: CALL_OW 12
24275: PPUSH
24276: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24280: CALL_OW 44
24284: PPUSH
24285: LD_EXP 35
24289: PPUSH
24290: CALL_OW 52
// end ; end ; end ;
24294: PPOPN 1
24296: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24297: LD_ADDR_OWVAR 57
24301: PUSH
24302: LD_INT 0
24304: ST_TO_ADDR
// fastEnd = 1 ;
24305: LD_ADDR_EXP 59
24309: PUSH
24310: LD_INT 1
24312: ST_TO_ADDR
// FinishMission ;
24313: CALL 25575 0 0
// end ; end_of_file
24317: PPOPN 1
24319: END
// export function PrepareNature ; var i , un ; begin
24320: LD_INT 0
24322: PPUSH
24323: PPUSH
24324: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24325: LD_ADDR_VAR 0 2
24329: PUSH
24330: DOUBLE
24331: LD_INT 1
24333: DEC
24334: ST_TO_ADDR
24335: LD_OWVAR 67
24339: PUSH
24340: LD_INT 1
24342: PPUSH
24343: LD_INT 5
24345: PPUSH
24346: CALL_OW 12
24350: PLUS
24351: PUSH
24352: FOR_TO
24353: IFFALSE 24498
// begin hc_sex = sex_male ;
24355: LD_ADDR_OWVAR 27
24359: PUSH
24360: LD_INT 1
24362: ST_TO_ADDR
// uc_side = 0 ;
24363: LD_ADDR_OWVAR 20
24367: PUSH
24368: LD_INT 0
24370: ST_TO_ADDR
// uc_nation = nation_nature ;
24371: LD_ADDR_OWVAR 21
24375: PUSH
24376: LD_INT 0
24378: ST_TO_ADDR
// hc_class = class_apeman ;
24379: LD_ADDR_OWVAR 28
24383: PUSH
24384: LD_INT 12
24386: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24387: LD_ADDR_OWVAR 31
24391: PUSH
24392: LD_INT 2
24394: PPUSH
24395: LD_INT 7
24397: PPUSH
24398: CALL_OW 12
24402: PUSH
24403: LD_OWVAR 67
24407: PLUS
24408: PUSH
24409: LD_INT 2
24411: PPUSH
24412: LD_INT 10
24414: PPUSH
24415: CALL_OW 12
24419: PUSH
24420: LD_INT 2
24422: PPUSH
24423: LD_INT 10
24425: PPUSH
24426: CALL_OW 12
24430: PUSH
24431: LD_INT 2
24433: PPUSH
24434: LD_INT 10
24436: PPUSH
24437: CALL_OW 12
24441: PUSH
24442: EMPTY
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24448: LD_ADDR_OWVAR 35
24452: PUSH
24453: LD_INT 5
24455: NEG
24456: PPUSH
24457: LD_INT 5
24459: PPUSH
24460: CALL_OW 12
24464: PUSH
24465: LD_OWVAR 67
24469: MUL
24470: ST_TO_ADDR
// un = CreateHuman ;
24471: LD_ADDR_VAR 0 3
24475: PUSH
24476: CALL_OW 44
24480: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24481: LD_VAR 0 3
24485: PPUSH
24486: LD_INT 5
24488: PPUSH
24489: LD_INT 0
24491: PPUSH
24492: CALL_OW 49
// end ;
24496: GO 24352
24498: POP
24499: POP
// for i = 1 to Difficulty + 2 do
24500: LD_ADDR_VAR 0 2
24504: PUSH
24505: DOUBLE
24506: LD_INT 1
24508: DEC
24509: ST_TO_ADDR
24510: LD_OWVAR 67
24514: PUSH
24515: LD_INT 2
24517: PLUS
24518: PUSH
24519: FOR_TO
24520: IFFALSE 24629
// begin hc_sex = sex_male ;
24522: LD_ADDR_OWVAR 27
24526: PUSH
24527: LD_INT 1
24529: ST_TO_ADDR
// uc_side = 0 ;
24530: LD_ADDR_OWVAR 20
24534: PUSH
24535: LD_INT 0
24537: ST_TO_ADDR
// uc_nation = nation_nature ;
24538: LD_ADDR_OWVAR 21
24542: PUSH
24543: LD_INT 0
24545: ST_TO_ADDR
// hc_class = class_tiger ;
24546: LD_ADDR_OWVAR 28
24550: PUSH
24551: LD_INT 14
24553: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24554: LD_ADDR_OWVAR 31
24558: PUSH
24559: LD_EXP 37
24563: PUSH
24564: LD_INT 0
24566: PUSH
24567: LD_INT 0
24569: PUSH
24570: LD_INT 0
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: LIST
24577: LIST
24578: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24579: LD_ADDR_OWVAR 35
24583: PUSH
24584: LD_INT 5
24586: NEG
24587: PPUSH
24588: LD_INT 5
24590: PPUSH
24591: CALL_OW 12
24595: PUSH
24596: LD_OWVAR 67
24600: MUL
24601: ST_TO_ADDR
// un = CreateHuman ;
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: CALL_OW 44
24611: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24612: LD_VAR 0 3
24616: PPUSH
24617: LD_INT 6
24619: PPUSH
24620: LD_INT 0
24622: PPUSH
24623: CALL_OW 49
// end ;
24627: GO 24519
24629: POP
24630: POP
// for i = 1 to rand ( 3 , 4 ) do
24631: LD_ADDR_VAR 0 2
24635: PUSH
24636: DOUBLE
24637: LD_INT 1
24639: DEC
24640: ST_TO_ADDR
24641: LD_INT 3
24643: PPUSH
24644: LD_INT 4
24646: PPUSH
24647: CALL_OW 12
24651: PUSH
24652: FOR_TO
24653: IFFALSE 24747
// begin hc_sex = sex_male ;
24655: LD_ADDR_OWVAR 27
24659: PUSH
24660: LD_INT 1
24662: ST_TO_ADDR
// uc_side = 0 ;
24663: LD_ADDR_OWVAR 20
24667: PUSH
24668: LD_INT 0
24670: ST_TO_ADDR
// uc_nation = nation_nature ;
24671: LD_ADDR_OWVAR 21
24675: PUSH
24676: LD_INT 0
24678: ST_TO_ADDR
// hc_class = 18 ;
24679: LD_ADDR_OWVAR 28
24683: PUSH
24684: LD_INT 18
24686: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24687: LD_ADDR_OWVAR 31
24691: PUSH
24692: LD_EXP 37
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 0
24702: PUSH
24703: LD_INT 0
24705: PUSH
24706: EMPTY
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: ST_TO_ADDR
// hc_agressivity = 0 ;
24712: LD_ADDR_OWVAR 35
24716: PUSH
24717: LD_INT 0
24719: ST_TO_ADDR
// un = CreateHuman ;
24720: LD_ADDR_VAR 0 3
24724: PUSH
24725: CALL_OW 44
24729: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24730: LD_VAR 0 3
24734: PPUSH
24735: LD_INT 6
24737: PPUSH
24738: LD_INT 0
24740: PPUSH
24741: CALL_OW 49
// end ;
24745: GO 24652
24747: POP
24748: POP
// end ; end_of_file
24749: LD_VAR 0 1
24753: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
24754: LD_EXP 46
24758: PUSH
24759: LD_INT 1
24761: EQUAL
24762: IFFALSE 24846
24764: GO 24766
24766: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
24767: LD_INT 7
24769: PPUSH
24770: LD_INT 5
24772: PPUSH
24773: LD_INT 4
24775: PUSH
24776: LD_INT 5
24778: PUSH
24779: LD_INT 6
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: LIST
24786: PUSH
24787: LD_OWVAR 67
24791: ARRAY
24792: PPUSH
24793: LD_EXP 36
24797: PPUSH
24798: LD_EXP 37
24802: PPUSH
24803: CALL_OW 12
24807: PPUSH
24808: LD_INT 2
24810: PPUSH
24811: LD_INT 1
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: EMPTY
24818: PPUSH
24819: LD_INT 25
24821: PUSH
24822: LD_INT 26
24824: PUSH
24825: LD_INT 27
24827: PUSH
24828: LD_INT 28
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: PPUSH
24837: EMPTY
24838: PPUSH
24839: LD_INT 1
24841: PPUSH
24842: CALL 15343 0 11
24846: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
24847: LD_EXP 46
24851: PUSH
24852: LD_INT 1
24854: EQUAL
24855: IFFALSE 24943
24857: GO 24859
24859: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
24860: LD_INT 5
24862: PPUSH
24863: LD_INT 2
24865: PPUSH
24866: LD_INT 7
24868: PUSH
24869: LD_INT 8
24871: PUSH
24872: LD_INT 10
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: LIST
24879: PUSH
24880: LD_OWVAR 67
24884: ARRAY
24885: PPUSH
24886: LD_INT 0
24888: PPUSH
24889: LD_INT 0
24891: PPUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 4
24897: PUSH
24898: LD_INT 5
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: LIST
24905: PUSH
24906: LD_OWVAR 67
24910: ARRAY
24911: PPUSH
24912: LD_INT 0
24914: PPUSH
24915: LD_EXP 36
24919: PPUSH
24920: LD_EXP 37
24924: PPUSH
24925: CALL_OW 12
24929: PPUSH
24930: LD_INT 7
24932: PPUSH
24933: LD_INT 9
24935: PPUSH
24936: LD_INT 1
24938: PPUSH
24939: CALL 17047 0 11
24943: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
24944: LD_EXP 46
24948: PUSH
24949: LD_INT 1
24951: EQUAL
24952: IFFALSE 24961
24954: GO 24956
24956: DISABLE
// PrepareArabianSheik ;
24957: CALL 3742 0 0
24961: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
24962: LD_EXP 29
24966: PUSH
24967: LD_EXP 60
24971: PUSH
24972: LD_INT 1
24974: EQUAL
24975: AND
24976: IFFALSE 25045
24978: GO 24980
24980: DISABLE
// begin enable ;
24981: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
24982: LD_INT 6
24984: PPUSH
24985: LD_INT 3
24987: PPUSH
24988: LD_EXP 57
24992: PPUSH
24993: LD_INT 0
24995: PPUSH
24996: LD_OWVAR 67
25000: PPUSH
25001: LD_INT 0
25003: PPUSH
25004: LD_EXP 57
25008: PUSH
25009: LD_INT 3
25011: DIV
25012: PUSH
25013: LD_INT 1
25015: PLUS
25016: PPUSH
25017: LD_EXP 36
25021: PPUSH
25022: LD_EXP 37
25026: PPUSH
25027: CALL_OW 12
25031: PPUSH
25032: LD_INT 17
25034: PPUSH
25035: LD_INT 18
25037: PPUSH
25038: LD_INT 1
25040: PPUSH
25041: CALL 17047 0 11
// end ;
25045: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25046: LD_EXP 29
25050: PUSH
25051: LD_EXP 60
25055: PUSH
25056: LD_INT 1
25058: EQUAL
25059: AND
25060: IFFALSE 25137
25062: GO 25064
25064: DISABLE
// begin enable ;
25065: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25066: LD_INT 17
25068: PPUSH
25069: LD_INT 6
25071: PPUSH
25072: LD_EXP 56
25076: PPUSH
25077: LD_EXP 36
25081: PPUSH
25082: LD_EXP 37
25086: PPUSH
25087: CALL_OW 12
25091: PPUSH
25092: LD_INT 3
25094: PPUSH
25095: LD_INT 1
25097: PPUSH
25098: LD_INT 1
25100: PUSH
25101: LD_INT 3
25103: PUSH
25104: EMPTY
25105: LIST
25106: LIST
25107: PPUSH
25108: LD_INT 43
25110: PUSH
25111: LD_INT 44
25113: PUSH
25114: LD_INT 45
25116: PUSH
25117: LD_INT 46
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: LIST
25124: LIST
25125: PPUSH
25126: EMPTY
25127: PPUSH
25128: EMPTY
25129: PPUSH
25130: LD_INT 1
25132: PPUSH
25133: CALL 15343 0 11
// end ;
25137: END
// every 10 10$00 trigger joinEpsilon do
25138: LD_EXP 29
25142: IFFALSE 25196
25144: GO 25146
25146: DISABLE
// begin enable ;
25147: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25148: LD_ADDR_EXP 56
25152: PUSH
25153: LD_EXP 56
25157: PUSH
25158: LD_INT 1
25160: PPUSH
25161: LD_OWVAR 67
25165: PPUSH
25166: CALL_OW 12
25170: PLUS
25171: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25172: LD_ADDR_EXP 57
25176: PUSH
25177: LD_EXP 57
25181: PUSH
25182: LD_INT 1
25184: PPUSH
25185: LD_OWVAR 67
25189: PPUSH
25190: CALL_OW 12
25194: PLUS
25195: ST_TO_ADDR
// end ;
25196: END
// every 21 21$0 trigger attackAvalaible = 1 do
25197: LD_EXP 60
25201: PUSH
25202: LD_INT 1
25204: EQUAL
25205: IFFALSE 25218
25207: GO 25209
25209: DISABLE
// attackAvalaible = 0 ; end_of_file
25210: LD_ADDR_EXP 60
25214: PUSH
25215: LD_INT 0
25217: ST_TO_ADDR
25218: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25219: LD_INT 54
25221: PPUSH
25222: LD_INT 1
25224: PPUSH
25225: CALL_OW 321
25229: PUSH
25230: LD_INT 2
25232: EQUAL
25233: PUSH
25234: LD_INT 55
25236: PPUSH
25237: LD_INT 1
25239: PPUSH
25240: CALL_OW 321
25244: PUSH
25245: LD_INT 2
25247: EQUAL
25248: AND
25249: PUSH
25250: LD_INT 21
25252: PPUSH
25253: LD_INT 1
25255: PPUSH
25256: CALL_OW 321
25260: PUSH
25261: LD_INT 2
25263: EQUAL
25264: AND
25265: PUSH
25266: LD_INT 22
25268: PPUSH
25269: LD_INT 1
25271: PPUSH
25272: CALL_OW 321
25276: PUSH
25277: LD_INT 2
25279: EQUAL
25280: AND
25281: PUSH
25282: LD_INT 12
25284: PPUSH
25285: LD_INT 1
25287: PPUSH
25288: CALL_OW 321
25292: PUSH
25293: LD_INT 1
25295: EQUAL
25296: PUSH
25297: LD_INT 32
25299: PPUSH
25300: LD_INT 1
25302: PPUSH
25303: CALL_OW 321
25307: PUSH
25308: LD_INT 1
25310: EQUAL
25311: OR
25312: PUSH
25313: EMPTY
25314: LIST
25315: AND
25316: PUSH
25317: LD_EXP 48
25321: PUSH
25322: LD_INT 1
25324: EQUAL
25325: AND
25326: PUSH
25327: LD_INT 22
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 21
25339: PUSH
25340: LD_INT 1
25342: PUSH
25343: EMPTY
25344: LIST
25345: LIST
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 69
25355: PUSH
25356: LD_INT 0
25358: EQUAL
25359: AND
25360: IFFALSE 25416
25362: GO 25364
25364: DISABLE
// begin case query ( QEndMission ) of 1 :
25365: LD_STRING QEndMission
25367: PPUSH
25368: CALL_OW 97
25372: PUSH
25373: LD_INT 1
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25392
25381: POP
// begin end_the_mission_allowed = true ;
25382: LD_ADDR_OWVAR 57
25386: PUSH
25387: LD_INT 1
25389: ST_TO_ADDR
// end ; 2 :
25390: GO 25416
25392: LD_INT 2
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25415
25400: POP
// begin fastEnd = 1 ;
25401: LD_ADDR_EXP 59
25405: PUSH
25406: LD_INT 1
25408: ST_TO_ADDR
// FinishMission ;
25409: CALL 25575 0 0
// end ; end ;
25413: GO 25416
25415: POP
// end ;
25416: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25417: LD_INT 54
25419: PPUSH
25420: LD_INT 1
25422: PPUSH
25423: CALL_OW 321
25427: PUSH
25428: LD_INT 2
25430: EQUAL
25431: PUSH
25432: LD_INT 55
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 321
25442: PUSH
25443: LD_INT 2
25445: EQUAL
25446: AND
25447: PUSH
25448: LD_INT 21
25450: PPUSH
25451: LD_INT 1
25453: PPUSH
25454: CALL_OW 321
25458: PUSH
25459: LD_INT 2
25461: EQUAL
25462: AND
25463: PUSH
25464: LD_INT 22
25466: PPUSH
25467: LD_INT 1
25469: PPUSH
25470: CALL_OW 321
25474: PUSH
25475: LD_INT 2
25477: EQUAL
25478: AND
25479: PUSH
25480: LD_INT 12
25482: PPUSH
25483: LD_INT 1
25485: PPUSH
25486: CALL_OW 321
25490: PUSH
25491: LD_INT 2
25493: EQUAL
25494: AND
25495: PUSH
25496: LD_INT 32
25498: PPUSH
25499: LD_INT 1
25501: PPUSH
25502: CALL_OW 321
25506: PUSH
25507: LD_INT 2
25509: EQUAL
25510: AND
25511: PUSH
25512: LD_EXP 59
25516: PUSH
25517: LD_INT 0
25519: EQUAL
25520: AND
25521: PUSH
25522: LD_EXP 48
25526: PUSH
25527: LD_INT 1
25529: EQUAL
25530: AND
25531: PUSH
25532: LD_INT 22
25534: PUSH
25535: LD_INT 3
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PUSH
25542: LD_INT 21
25544: PUSH
25545: LD_INT 1
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: PUSH
25552: EMPTY
25553: LIST
25554: LIST
25555: PPUSH
25556: CALL_OW 69
25560: PUSH
25561: LD_INT 0
25563: EQUAL
25564: AND
25565: IFFALSE 25574
25567: GO 25569
25569: DISABLE
// FinishMission ;
25570: CALL 25575 0 0
25574: END
// export function FinishMission ; begin
25575: LD_INT 0
25577: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25578: LD_EXP 52
25582: PPUSH
25583: LD_STRING 10_KhatamStatus_1
25585: PPUSH
25586: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25590: LD_EXP 51
25594: PPUSH
25595: LD_STRING 10_GensherEscape_1
25597: PPUSH
25598: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25602: LD_INT 12
25604: PPUSH
25605: LD_INT 1
25607: PPUSH
25608: CALL_OW 321
25612: PUSH
25613: LD_INT 2
25615: EQUAL
25616: IFFALSE 25630
// begin AddMedal ( sights , 1 ) ;
25618: LD_STRING sights
25620: PPUSH
25621: LD_INT 1
25623: PPUSH
25624: CALL_OW 101
// end else
25628: GO 25641
// begin AddMedal ( sights , - 1 ) ;
25630: LD_STRING sights
25632: PPUSH
25633: LD_INT 1
25635: NEG
25636: PPUSH
25637: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25641: LD_INT 32
25643: PPUSH
25644: LD_INT 1
25646: PPUSH
25647: CALL_OW 321
25651: PUSH
25652: LD_INT 2
25654: EQUAL
25655: IFFALSE 25669
// begin AddMedal ( computers , 1 ) ;
25657: LD_STRING computers
25659: PPUSH
25660: LD_INT 1
25662: PPUSH
25663: CALL_OW 101
// end else
25667: GO 25680
// begin AddMedal ( computers , - 1 ) ;
25669: LD_STRING computers
25671: PPUSH
25672: LD_INT 1
25674: NEG
25675: PPUSH
25676: CALL_OW 101
// end ; if arabianEscape = 0 then
25680: LD_EXP 47
25684: PUSH
25685: LD_INT 0
25687: EQUAL
25688: IFFALSE 25712
// begin AddMedal ( renegades , 2 ) ;
25690: LD_STRING renegades
25692: PPUSH
25693: LD_INT 2
25695: PPUSH
25696: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
25700: LD_INT 0
25702: PPUSH
25703: LD_STRING 10_ScientistsEscape_1
25705: PPUSH
25706: CALL_OW 39
// end else
25710: GO 25723
// begin AddMedal ( renegades , - 1 ) ;
25712: LD_STRING renegades
25714: PPUSH
25715: LD_INT 1
25717: NEG
25718: PPUSH
25719: CALL_OW 101
// end ; SaveEpsilonBase ;
25723: CALL 26442 0 0
// Query ( kaj ) ;
25727: LD_STRING kaj
25729: PPUSH
25730: CALL_OW 97
// GiveMedals ( Main ) ;
25734: LD_STRING Main
25736: PPUSH
25737: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
25741: LD_INT 22
25743: PUSH
25744: LD_INT 1
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 23
25753: PUSH
25754: LD_INT 1
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PUSH
25761: LD_INT 21
25763: PUSH
25764: LD_INT 1
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 25
25776: PUSH
25777: LD_INT 1
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 25
25786: PUSH
25787: LD_INT 2
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 25
25796: PUSH
25797: LD_INT 3
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: LD_INT 25
25806: PUSH
25807: LD_INT 4
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PUSH
25814: LD_INT 25
25816: PUSH
25817: LD_INT 5
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: PUSH
25824: LD_INT 25
25826: PUSH
25827: LD_INT 8
25829: PUSH
25830: EMPTY
25831: LIST
25832: LIST
25833: PUSH
25834: EMPTY
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: LIST
25840: LIST
25841: LIST
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: LIST
25847: LIST
25848: PPUSH
25849: CALL_OW 69
25853: PPUSH
25854: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25858: LD_EXP 1
25862: PPUSH
25863: LD_EXP 53
25867: PUSH
25868: LD_STRING JMM
25870: STR
25871: PPUSH
25872: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25876: LD_EXP 2
25880: PPUSH
25881: LD_EXP 53
25885: PUSH
25886: LD_STRING Brown
25888: STR
25889: PPUSH
25890: CALL 9638 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25894: LD_EXP 3
25898: PPUSH
25899: LD_EXP 53
25903: PUSH
25904: LD_STRING Donaldson
25906: STR
25907: PPUSH
25908: CALL 9638 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
25912: LD_EXP 4
25916: PPUSH
25917: LD_EXP 53
25921: PUSH
25922: LD_STRING Bobby
25924: STR
25925: PPUSH
25926: CALL 9638 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
25930: LD_EXP 5
25934: PPUSH
25935: LD_EXP 53
25939: PUSH
25940: LD_STRING Cyrus
25942: STR
25943: PPUSH
25944: CALL 9638 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
25948: LD_EXP 6
25952: PPUSH
25953: LD_EXP 53
25957: PUSH
25958: LD_STRING Lisa
25960: STR
25961: PPUSH
25962: CALL 9638 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
25966: LD_EXP 7
25970: PPUSH
25971: LD_EXP 53
25975: PUSH
25976: LD_STRING Frank
25978: STR
25979: PPUSH
25980: CALL 9638 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
25984: LD_EXP 8
25988: PPUSH
25989: LD_EXP 53
25993: PUSH
25994: LD_STRING Kikuchi
25996: STR
25997: PPUSH
25998: CALL 9638 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26002: LD_EXP 9
26006: PPUSH
26007: LD_EXP 53
26011: PUSH
26012: LD_STRING Houten
26014: STR
26015: PPUSH
26016: CALL 9638 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26020: LD_EXP 10
26024: PPUSH
26025: LD_EXP 53
26029: PUSH
26030: LD_STRING Gary
26032: STR
26033: PPUSH
26034: CALL 9638 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26038: LD_EXP 19
26042: PPUSH
26043: LD_EXP 53
26047: PUSH
26048: LD_STRING Cornell
26050: STR
26051: PPUSH
26052: CALL 9638 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26056: LD_EXP 11
26060: PPUSH
26061: LD_EXP 53
26065: PUSH
26066: LD_STRING Simms
26068: STR
26069: PPUSH
26070: CALL 9638 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26074: LD_EXP 12
26078: PPUSH
26079: LD_EXP 53
26083: PUSH
26084: LD_STRING Denis
26086: STR
26087: PPUSH
26088: CALL 9638 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26092: LD_EXP 13
26096: PPUSH
26097: LD_EXP 53
26101: PUSH
26102: LD_STRING Joan
26104: STR
26105: PPUSH
26106: CALL 9638 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26110: LD_EXP 15
26114: PPUSH
26115: LD_EXP 53
26119: PUSH
26120: LD_STRING Gladstone
26122: STR
26123: PPUSH
26124: CALL 9638 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26128: LD_EXP 17
26132: PPUSH
26133: LD_EXP 53
26137: PUSH
26138: LD_STRING DeltaDoctor
26140: STR
26141: PPUSH
26142: CALL 9638 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26146: LD_INT 50
26148: PUSH
26149: EMPTY
26150: LIST
26151: PUSH
26152: LD_INT 22
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 21
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 2
26174: PUSH
26175: LD_INT 25
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 25
26187: PUSH
26188: LD_INT 2
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 25
26197: PUSH
26198: LD_INT 3
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 25
26207: PUSH
26208: LD_INT 4
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 25
26217: PUSH
26218: LD_INT 5
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 25
26227: PUSH
26228: LD_INT 8
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: PUSH
26244: EMPTY
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: PPUSH
26250: CALL_OW 69
26254: PUSH
26255: LD_EXP 1
26259: PUSH
26260: LD_EXP 2
26264: PUSH
26265: LD_EXP 3
26269: PUSH
26270: LD_EXP 4
26274: PUSH
26275: LD_EXP 5
26279: PUSH
26280: LD_EXP 6
26284: PUSH
26285: LD_EXP 7
26289: PUSH
26290: LD_EXP 15
26294: PUSH
26295: LD_EXP 8
26299: PUSH
26300: LD_EXP 12
26304: PUSH
26305: LD_EXP 13
26309: PUSH
26310: LD_EXP 9
26314: PUSH
26315: LD_EXP 11
26319: PUSH
26320: LD_EXP 10
26324: PUSH
26325: LD_EXP 17
26329: PUSH
26330: LD_EXP 19
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: LIST
26341: LIST
26342: LIST
26343: LIST
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: LIST
26351: LIST
26352: DIFF
26353: PPUSH
26354: LD_STRING 10_other_survivors
26356: PPUSH
26357: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26361: LD_INT 50
26363: PUSH
26364: EMPTY
26365: LIST
26366: PUSH
26367: LD_INT 22
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 21
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 2
26389: PUSH
26390: LD_INT 25
26392: PUSH
26393: LD_INT 16
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 25
26402: PUSH
26403: LD_INT 12
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: EMPTY
26411: LIST
26412: LIST
26413: LIST
26414: PUSH
26415: EMPTY
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: PPUSH
26421: CALL_OW 69
26425: PPUSH
26426: LD_STRING 10_ape
26428: PPUSH
26429: CALL_OW 38
// YouWin ;
26433: CALL_OW 103
// end ;
26437: LD_VAR 0 1
26441: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26442: LD_INT 0
26444: PPUSH
26445: PPUSH
26446: PPUSH
26447: PPUSH
// epsilonBase = [ ] ;
26448: LD_ADDR_VAR 0 2
26452: PUSH
26453: EMPTY
26454: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26455: LD_ADDR_VAR 0 3
26459: PUSH
26460: LD_INT 22
26462: PUSH
26463: LD_INT 1
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PUSH
26470: LD_INT 21
26472: PUSH
26473: LD_INT 3
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 50
26482: PUSH
26483: EMPTY
26484: LIST
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: LIST
26490: PPUSH
26491: CALL_OW 69
26495: ST_TO_ADDR
// for i in buildings do
26496: LD_ADDR_VAR 0 4
26500: PUSH
26501: LD_VAR 0 3
26505: PUSH
26506: FOR_IN
26507: IFFALSE 26944
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26509: LD_VAR 0 4
26513: PPUSH
26514: CALL_OW 266
26518: PUSH
26519: LD_INT 6
26521: PUSH
26522: LD_INT 7
26524: PUSH
26525: LD_INT 8
26527: PUSH
26528: EMPTY
26529: LIST
26530: LIST
26531: LIST
26532: IN
26533: IFFALSE 26647
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26535: LD_ADDR_VAR 0 2
26539: PUSH
26540: LD_VAR 0 2
26544: PUSH
26545: LD_VAR 0 4
26549: PPUSH
26550: CALL_OW 266
26554: PUSH
26555: LD_VAR 0 4
26559: PPUSH
26560: CALL_OW 250
26564: PUSH
26565: LD_VAR 0 4
26569: PPUSH
26570: CALL_OW 251
26574: PUSH
26575: LD_VAR 0 4
26579: PPUSH
26580: CALL_OW 254
26584: PUSH
26585: LD_VAR 0 4
26589: PPUSH
26590: CALL_OW 267
26594: PUSH
26595: LD_VAR 0 4
26599: PPUSH
26600: CALL_OW 248
26604: PUSH
26605: LD_VAR 0 4
26609: PPUSH
26610: LD_INT 1
26612: PPUSH
26613: CALL_OW 268
26617: PUSH
26618: LD_VAR 0 4
26622: PPUSH
26623: LD_INT 2
26625: PPUSH
26626: CALL_OW 268
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: PUSH
26641: EMPTY
26642: LIST
26643: ADD
26644: ST_TO_ADDR
26645: GO 26942
// if GetBType ( i ) = b_bunker then
26647: LD_VAR 0 4
26651: PPUSH
26652: CALL_OW 266
26656: PUSH
26657: LD_INT 32
26659: EQUAL
26660: IFFALSE 26757
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26662: LD_ADDR_VAR 0 2
26666: PUSH
26667: LD_VAR 0 2
26671: PUSH
26672: LD_VAR 0 4
26676: PPUSH
26677: CALL_OW 266
26681: PUSH
26682: LD_VAR 0 4
26686: PPUSH
26687: CALL_OW 250
26691: PUSH
26692: LD_VAR 0 4
26696: PPUSH
26697: CALL_OW 251
26701: PUSH
26702: LD_VAR 0 4
26706: PPUSH
26707: CALL_OW 254
26711: PUSH
26712: LD_VAR 0 4
26716: PPUSH
26717: CALL_OW 267
26721: PUSH
26722: LD_VAR 0 4
26726: PPUSH
26727: CALL_OW 248
26731: PUSH
26732: LD_VAR 0 4
26736: PPUSH
26737: CALL_OW 269
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: PUSH
26751: EMPTY
26752: LIST
26753: ADD
26754: ST_TO_ADDR
26755: GO 26942
// if GetBType ( i ) = b_factory then
26757: LD_VAR 0 4
26761: PPUSH
26762: CALL_OW 266
26766: PUSH
26767: LD_INT 3
26769: EQUAL
26770: IFFALSE 26860
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26772: LD_ADDR_VAR 0 2
26776: PUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_INT 1
26784: PPUSH
26785: LD_VAR 0 4
26789: PPUSH
26790: CALL_OW 266
26794: PUSH
26795: LD_VAR 0 4
26799: PPUSH
26800: CALL_OW 250
26804: PUSH
26805: LD_VAR 0 4
26809: PPUSH
26810: CALL_OW 251
26814: PUSH
26815: LD_VAR 0 4
26819: PPUSH
26820: CALL_OW 254
26824: PUSH
26825: LD_VAR 0 4
26829: PPUSH
26830: CALL_OW 267
26834: PUSH
26835: LD_VAR 0 4
26839: PPUSH
26840: CALL_OW 248
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: LIST
26851: LIST
26852: PPUSH
26853: CALL_OW 2
26857: ST_TO_ADDR
26858: GO 26942
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26860: LD_ADDR_VAR 0 2
26864: PUSH
26865: LD_VAR 0 2
26869: PUSH
26870: LD_VAR 0 4
26874: PPUSH
26875: CALL_OW 266
26879: PUSH
26880: LD_VAR 0 4
26884: PPUSH
26885: CALL_OW 250
26889: PUSH
26890: LD_VAR 0 4
26894: PPUSH
26895: CALL_OW 251
26899: PUSH
26900: LD_VAR 0 4
26904: PPUSH
26905: CALL_OW 254
26909: PUSH
26910: LD_VAR 0 4
26914: PPUSH
26915: CALL_OW 267
26919: PUSH
26920: LD_VAR 0 4
26924: PPUSH
26925: CALL_OW 248
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: PUSH
26938: EMPTY
26939: LIST
26940: ADD
26941: ST_TO_ADDR
// end ;
26942: GO 26506
26944: POP
26945: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
26946: LD_VAR 0 2
26950: PPUSH
26951: LD_STRING 10_EpsilonBase
26953: PPUSH
26954: CALL_OW 39
// end ; end_of_file
26958: LD_VAR 0 1
26962: RET
// every 0 0$30 do
26963: GO 26965
26965: DISABLE
// begin enable ;
26966: ENABLE
// if cratesSpawned < 6 then
26967: LD_EXP 55
26971: PUSH
26972: LD_INT 6
26974: LESS
26975: IFFALSE 27012
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26977: LD_INT 3
26979: PPUSH
26980: LD_INT 5
26982: PPUSH
26983: CALL_OW 12
26987: PPUSH
26988: LD_INT 16
26990: PPUSH
26991: LD_INT 1
26993: PPUSH
26994: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26998: LD_ADDR_EXP 55
27002: PUSH
27003: LD_EXP 55
27007: PUSH
27008: LD_INT 1
27010: PLUS
27011: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27012: LD_EXP 55
27016: PUSH
27017: LD_INT 6
27019: GREATEREQUAL
27020: PUSH
27021: LD_EXP 55
27025: PUSH
27026: LD_INT 12
27028: LESS
27029: AND
27030: IFFALSE 27074
// begin wait ( 0 0$30 ) ;
27032: LD_INT 1050
27034: PPUSH
27035: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27039: LD_INT 3
27041: PPUSH
27042: LD_INT 5
27044: PPUSH
27045: CALL_OW 12
27049: PPUSH
27050: LD_INT 16
27052: PPUSH
27053: LD_INT 1
27055: PPUSH
27056: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27060: LD_ADDR_EXP 55
27064: PUSH
27065: LD_EXP 55
27069: PUSH
27070: LD_INT 1
27072: PLUS
27073: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27074: LD_EXP 55
27078: PUSH
27079: LD_INT 12
27081: GREATEREQUAL
27082: IFFALSE 27126
// begin wait ( 1 1$30 ) ;
27084: LD_INT 3150
27086: PPUSH
27087: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27091: LD_INT 3
27093: PPUSH
27094: LD_INT 5
27096: PPUSH
27097: CALL_OW 12
27101: PPUSH
27102: LD_INT 16
27104: PPUSH
27105: LD_INT 1
27107: PPUSH
27108: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27112: LD_ADDR_EXP 55
27116: PUSH
27117: LD_EXP 55
27121: PUSH
27122: LD_INT 1
27124: PLUS
27125: ST_TO_ADDR
// end ; end ;
27126: END
