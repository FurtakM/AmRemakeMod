// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianEscape = 0 ;
  69: LD_ADDR_EXP 47
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  77: LD_ADDR_EXP 46
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// arabianDefeated = 0 ;
  85: LD_ADDR_EXP 48
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// arabianTrait = 0 ;
  93: LD_ADDR_EXP 49
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// telep_ru_dialog := false ;
 101: LD_ADDR_EXP 56
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar1 = 0 ;
 109: LD_ADDR_EXP 58
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// eventVar2 = 0 ;
 117: LD_ADDR_EXP 59
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// fastEnd = 0 ;
 125: LD_ADDR_EXP 57
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// KhatamStatus = 0 ;
 133: LD_ADDR_EXP 50
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// cratesSpawned = 0 ;
 141: LD_ADDR_EXP 53
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// ru_vehs_counter := [ 2 , 3 , 4 ] [ Difficulty ] ;
 149: LD_ADDR_EXP 54
 153: PUSH
 154: LD_INT 2
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: LD_INT 4
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PUSH
 168: LD_OWVAR 67
 172: ARRAY
 173: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 174: LD_ADDR_EXP 55
 178: PUSH
 179: LD_INT 3
 181: PUSH
 182: LD_INT 4
 184: PUSH
 185: LD_INT 5
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_OWVAR 67
 197: ARRAY
 198: ST_TO_ADDR
// mission_prefix := 10_ ;
 199: LD_ADDR_EXP 51
 203: PUSH
 204: LD_STRING 10_
 206: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 207: LD_ADDR_EXP 52
 211: PUSH
 212: LD_STRING 09_
 214: ST_TO_ADDR
// debugMode = 0 ;
 215: LD_ADDR_EXP 60
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// PrepareNature ;
 223: CALL 22245 0 0
// PrepareDifficulty ;
 227: CALL 8590 0 0
// PrepareJMMTeam ;
 231: CALL 573 0 0
// PrepareCathyTeam ;
 235: CALL 1648 0 0
// PrepareArabianCommander ;
 239: CALL 2983 0 0
// PrepareArabian ;
 243: CALL 3035 0 0
// BuildArabianBase ;
 247: CALL 11289 0 0
// TameApemans ;
 251: CALL 17066 0 0
// end ;
 255: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 256: LD_EXP 60
 260: PUSH
 261: LD_INT 1
 263: EQUAL
 264: IFFALSE 570
 266: GO 268
 268: DISABLE
 269: LD_INT 0
 271: PPUSH
// begin enable ;
 272: ENABLE
// fogoff ( true ) ;
 273: LD_INT 1
 275: PPUSH
 276: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 21
 297: PUSH
 298: LD_INT 1
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PPUSH
 309: CALL_OW 69
 313: PUSH
 314: FOR_IN
 315: IFFALSE 331
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 314
 331: POP
 332: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 30
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: FOR_IN
 386: IFFALSE 410
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 388: LD_VAR 0 1
 392: PPUSH
 393: CALL_OW 274
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: LD_INT 9999
 403: PPUSH
 404: CALL_OW 277
 408: GO 385
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 2
 429: PUSH
 430: LD_INT 30
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 30
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PPUSH
 459: CALL_OW 69
 463: PUSH
 464: FOR_IN
 465: IFFALSE 489
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 274
 476: PPUSH
 477: LD_INT 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 464
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 3
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// end ; end_of_file
 570: PPOPN 1
 572: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 573: LD_INT 0
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
// uc_side = 1 ;
 581: LD_ADDR_OWVAR 20
 585: PUSH
 586: LD_INT 1
 588: ST_TO_ADDR
// uc_nation = 1 ;
 589: LD_ADDR_OWVAR 21
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// count = 0 ;
 597: LD_ADDR_VAR 0 6
 601: PUSH
 602: LD_INT 0
 604: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING 10_JMM
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL 8184 0 2
 620: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 621: LD_ADDR_EXP 20
 625: PUSH
 626: LD_EXP 20
 630: PUSH
 631: LD_EXP 1
 635: ADD
 636: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 637: LD_ADDR_EXP 10
 641: PUSH
 642: LD_STRING 10_Gary
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: CALL 8184 0 2
 652: ST_TO_ADDR
// if Gary then
 653: LD_EXP 10
 657: IFFALSE 675
// JMMSquad = JMMSquad ^ Gary ;
 659: LD_ADDR_EXP 20
 663: PUSH
 664: LD_EXP 20
 668: PUSH
 669: LD_EXP 10
 673: ADD
 674: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 675: LD_ADDR_EXP 5
 679: PUSH
 680: LD_STRING 10_Cyrus
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 8184 0 2
 690: ST_TO_ADDR
// if Cyrus then
 691: LD_EXP 5
 695: IFFALSE 713
// JMMSquad = JMMSquad ^ Cyrus ;
 697: LD_ADDR_EXP 20
 701: PUSH
 702: LD_EXP 20
 706: PUSH
 707: LD_EXP 5
 711: ADD
 712: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 713: LD_ADDR_EXP 4
 717: PUSH
 718: LD_STRING 10_Bobby
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 8184 0 2
 728: ST_TO_ADDR
// if Bobby then
 729: LD_EXP 4
 733: IFFALSE 751
// JMMSquad = JMMSquad ^ Bobby ;
 735: LD_ADDR_EXP 20
 739: PUSH
 740: LD_EXP 20
 744: PUSH
 745: LD_EXP 4
 749: ADD
 750: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 751: LD_ADDR_EXP 6
 755: PUSH
 756: LD_STRING 10_Lisa
 758: PPUSH
 759: LD_INT 1
 761: PPUSH
 762: CALL 8184 0 2
 766: ST_TO_ADDR
// if Lisa then
 767: LD_EXP 6
 771: IFFALSE 789
// JMMSquad = JMMSquad ^ Lisa ;
 773: LD_ADDR_EXP 20
 777: PUSH
 778: LD_EXP 20
 782: PUSH
 783: LD_EXP 6
 787: ADD
 788: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 789: LD_ADDR_EXP 2
 793: PUSH
 794: LD_STRING 10_Brown
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: CALL 8184 0 2
 804: ST_TO_ADDR
// if Brown then
 805: LD_EXP 2
 809: IFFALSE 827
// JMMSquad = JMMSquad ^ Brown ;
 811: LD_ADDR_EXP 20
 815: PUSH
 816: LD_EXP 20
 820: PUSH
 821: LD_EXP 2
 825: ADD
 826: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 827: LD_ADDR_EXP 3
 831: PUSH
 832: LD_STRING 10_Donaldson
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL 8184 0 2
 842: ST_TO_ADDR
// if Donaldson then
 843: LD_EXP 3
 847: IFFALSE 865
// JMMSquad = JMMSquad ^ Donaldson ;
 849: LD_ADDR_EXP 20
 853: PUSH
 854: LD_EXP 20
 858: PUSH
 859: LD_EXP 3
 863: ADD
 864: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 865: LD_ADDR_EXP 7
 869: PUSH
 870: LD_STRING 10_Frank
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL 8184 0 2
 880: ST_TO_ADDR
// if Frank then
 881: LD_EXP 7
 885: IFFALSE 903
// JMMSquad = JMMSquad ^ Frank ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_EXP 20
 896: PUSH
 897: LD_EXP 7
 901: ADD
 902: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 903: LD_ADDR_EXP 9
 907: PUSH
 908: LD_STRING 10_Houten
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL 8184 0 2
 918: ST_TO_ADDR
// if Houten then
 919: LD_EXP 9
 923: IFFALSE 941
// JMMSquad = JMMSquad ^ Houten ;
 925: LD_ADDR_EXP 20
 929: PUSH
 930: LD_EXP 20
 934: PUSH
 935: LD_EXP 9
 939: ADD
 940: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 941: LD_ADDR_EXP 21
 945: PUSH
 946: LD_STRING OthersIn10
 948: PPUSH
 949: CALL_OW 31
 953: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 954: LD_ADDR_EXP 24
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL 8184 0 2
 969: ST_TO_ADDR
// for i in JMMSquad do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: LD_EXP 20
 979: PUSH
 980: FOR_IN
 981: IFFALSE 1240
// begin if count < 3 then
 983: LD_VAR 0 6
 987: PUSH
 988: LD_INT 3
 990: LESS
 991: IFFALSE 1108
// begin vc_engine = 1 ;
 993: LD_ADDR_OWVAR 39
 997: PUSH
 998: LD_INT 1
1000: ST_TO_ADDR
// vc_control = 1 ;
1001: LD_ADDR_OWVAR 38
1005: PUSH
1006: LD_INT 1
1008: ST_TO_ADDR
// vc_weapon = 12 ;
1009: LD_ADDR_OWVAR 40
1013: PUSH
1014: LD_INT 12
1016: ST_TO_ADDR
// vc_chassis = 3 ;
1017: LD_ADDR_OWVAR 37
1021: PUSH
1022: LD_INT 3
1024: ST_TO_ADDR
// veh = CreateVehicle ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: CALL_OW 45
1034: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 1
1042: PPUSH
1043: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1047: LD_VAR 0 4
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// if count mod 2 = 0 then
1062: LD_VAR 0 6
1066: PUSH
1067: LD_INT 2
1069: MOD
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: IFFALSE 1093
// AddCargo ( veh , 1 , 100 ) else
1076: LD_VAR 0 4
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 100
1086: PPUSH
1087: CALL_OW 291
1091: GO 1108
// AddCargo ( veh , 3 , 100 ) end ;
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_INT 3
1100: PPUSH
1101: LD_INT 100
1103: PPUSH
1104: CALL_OW 291
// if count >= 3 then
1108: LD_VAR 0 6
1112: PUSH
1113: LD_INT 3
1115: GREATEREQUAL
1116: IFFALSE 1210
// begin vc_engine = 1 ;
1118: LD_ADDR_OWVAR 39
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// vc_control = 1 ;
1126: LD_ADDR_OWVAR 38
1130: PUSH
1131: LD_INT 1
1133: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1134: LD_ADDR_OWVAR 40
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 4
1144: PUSH
1145: LD_INT 5
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 1
1155: PPUSH
1156: LD_INT 3
1158: PPUSH
1159: CALL_OW 12
1163: ARRAY
1164: ST_TO_ADDR
// vc_chassis = 3 ;
1165: LD_ADDR_OWVAR 37
1169: PUSH
1170: LD_INT 3
1172: ST_TO_ADDR
// veh = CreateVehicle ;
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: CALL_OW 45
1182: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1183: LD_VAR 0 4
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1195: LD_VAR 0 4
1199: PPUSH
1200: LD_INT 2
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 49
// end ; count = count + 1 ;
1210: LD_ADDR_VAR 0 6
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1224: LD_VAR 0 2
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 52
// end ;
1238: GO 980
1240: POP
1241: POP
// for i in others10 do
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_EXP 21
1251: PUSH
1252: FOR_IN
1253: IFFALSE 1379
// begin vc_engine = 1 ;
1255: LD_ADDR_OWVAR 39
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// vc_control = 1 ;
1263: LD_ADDR_OWVAR 38
1267: PUSH
1268: LD_INT 1
1270: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1271: LD_ADDR_OWVAR 40
1275: PUSH
1276: LD_INT 3
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 5
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 3
1295: PPUSH
1296: CALL_OW 12
1300: ARRAY
1301: ST_TO_ADDR
// vc_chassis = 3 ;
1302: LD_ADDR_OWVAR 37
1306: PUSH
1307: LD_INT 3
1309: ST_TO_ADDR
// veh = CreateVehicle ;
1310: LD_ADDR_VAR 0 4
1314: PUSH
1315: CALL_OW 45
1319: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1320: LD_VAR 0 4
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 2
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1347: LD_ADDR_EXP 28
1351: PUSH
1352: LD_EXP 28
1356: PUSH
1357: LD_VAR 0 4
1361: ADD
1362: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1363: LD_VAR 0 2
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: CALL_OW 52
// end ;
1377: GO 1252
1379: POP
1380: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1381: LD_INT 22
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 21
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: CALL_OW 336
// end ;
1417: LD_VAR 0 1
1421: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
1427: PPUSH
1428: PPUSH
// uc_side = 1 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 1
1436: ST_TO_ADDR
// uc_nation = 1 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 1
1444: ST_TO_ADDR
// for i := 1 to 10 do
1445: LD_ADDR_VAR 0 2
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 10
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1641
// begin vc_engine = 1 ;
1461: LD_ADDR_OWVAR 39
1465: PUSH
1466: LD_INT 1
1468: ST_TO_ADDR
// vc_control = 1 ;
1469: LD_ADDR_OWVAR 38
1473: PUSH
1474: LD_INT 1
1476: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1477: LD_ADDR_OWVAR 40
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: LD_INT 4
1487: PUSH
1488: LD_INT 5
1490: PUSH
1491: LD_INT 12
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 4
1505: PPUSH
1506: CALL_OW 12
1510: ARRAY
1511: ST_TO_ADDR
// vc_chassis = 3 ;
1512: LD_ADDR_OWVAR 37
1516: PUSH
1517: LD_INT 3
1519: ST_TO_ADDR
// veh = CreateVehicle ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 45
1529: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 1
1537: PPUSH
1538: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1557: LD_ADDR_EXP 28
1561: PUSH
1562: LD_EXP 28
1566: PUSH
1567: LD_VAR 0 3
1571: ADD
1572: ST_TO_ADDR
// if vc_weapon = 12 then
1573: LD_OWVAR 40
1577: PUSH
1578: LD_INT 12
1580: EQUAL
1581: IFFALSE 1639
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1583: LD_ADDR_VAR 0 4
1587: PUSH
1588: LD_INT 5
1590: PPUSH
1591: LD_INT 10
1593: PPUSH
1594: CALL_OW 12
1598: PUSH
1599: LD_INT 10
1601: MUL
1602: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 3
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 2
1623: PPUSH
1624: CALL_OW 12
1628: ARRAY
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL_OW 291
// end ; end ;
1639: GO 1458
1641: POP
1642: POP
// end ;
1643: LD_VAR 0 1
1647: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1648: LD_INT 0
1650: PPUSH
1651: PPUSH
1652: PPUSH
// uc_side = 4 ;
1653: LD_ADDR_OWVAR 20
1657: PUSH
1658: LD_INT 4
1660: ST_TO_ADDR
// uc_nation = 1 ;
1661: LD_ADDR_OWVAR 21
1665: PUSH
1666: LD_INT 1
1668: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1669: LD_ADDR_EXP 11
1673: PUSH
1674: LD_STRING Simms
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL 8184 0 2
1684: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1685: LD_ADDR_EXP 12
1689: PUSH
1690: LD_STRING 08_Denis
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL 8184 0 2
1700: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1701: LD_ADDR_EXP 13
1705: PUSH
1706: LD_STRING 08_Joan
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: CALL 8184 0 2
1716: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1717: LD_ADDR_EXP 14
1721: PUSH
1722: LD_STRING Khatam
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL 8184 0 2
1732: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_STRING Gladstone
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: CALL 8184 0 2
1748: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1749: LD_ADDR_EXP 17
1753: PUSH
1754: LD_STRING DeltaDoctor
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL 8184 0 2
1764: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1765: LD_STRING 08_Frank
1767: PPUSH
1768: CALL_OW 28
1772: PUSH
1773: LD_INT 1
1775: EQUAL
1776: IFFALSE 1794
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1778: LD_ADDR_EXP 8
1782: PUSH
1783: LD_STRING Yamoko
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: CALL 8184 0 2
1793: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1794: LD_ADDR_EXP 22
1798: PUSH
1799: LD_STRING 09_others
1801: PPUSH
1802: CALL_OW 31
1806: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1807: LD_ADDR_EXP 23
1811: PUSH
1812: LD_STRING 09_apes
1814: PPUSH
1815: CALL_OW 31
1819: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1820: LD_EXP 11
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1835: LD_EXP 12
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1850: LD_EXP 13
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1865: LD_EXP 14
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_INT 0
1875: PPUSH
1876: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1880: LD_EXP 15
1884: PPUSH
1885: LD_INT 1
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1895: LD_EXP 17
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1910: LD_EXP 8
1914: PPUSH
1915: LD_INT 1
1917: PPUSH
1918: LD_INT 0
1920: PPUSH
1921: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1925: LD_EXP 11
1929: PUSH
1930: LD_EXP 14
1934: PUSH
1935: LD_EXP 12
1939: PUSH
1940: LD_EXP 15
1944: PUSH
1945: LD_EXP 17
1949: PUSH
1950: LD_EXP 13
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 336
// if others09 > 2 then
1970: LD_EXP 22
1974: PUSH
1975: LD_INT 2
1977: GREATER
1978: IFFALSE 2023
// begin for i := 1 to 3 do
1980: LD_ADDR_VAR 0 2
1984: PUSH
1985: DOUBLE
1986: LD_INT 1
1988: DEC
1989: ST_TO_ADDR
1990: LD_INT 3
1992: PUSH
1993: FOR_TO
1994: IFFALSE 2019
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
1996: LD_EXP 22
2000: PUSH
2001: LD_VAR 0 2
2005: ARRAY
2006: PPUSH
2007: LD_INT 1
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 49
2017: GO 1993
2019: POP
2020: POP
// end else
2021: GO 2055
// begin for i in others09 do
2023: LD_ADDR_VAR 0 2
2027: PUSH
2028: LD_EXP 22
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2053
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2036: LD_VAR 0 2
2040: PPUSH
2041: LD_INT 1
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
2051: GO 2033
2053: POP
2054: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2055: LD_INT 22
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 25
2067: PUSH
2068: LD_INT 2
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: PPUSH
2079: CALL_OW 69
2083: PUSH
2084: LD_INT 0
2086: EQUAL
2087: IFFALSE 2205
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2089: LD_ADDR_VAR 0 3
2093: PUSH
2094: LD_INT 22
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 25
2106: PUSH
2107: LD_INT 2
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PPUSH
2118: CALL_OW 69
2122: PUSH
2123: LD_EXP 11
2127: PUSH
2128: LD_EXP 14
2132: PUSH
2133: LD_EXP 12
2137: PUSH
2138: LD_EXP 15
2142: PUSH
2143: LD_EXP 17
2147: PUSH
2148: LD_EXP 13
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: LIST
2160: DIFF
2161: ST_TO_ADDR
// if not tmp then
2162: LD_VAR 0 3
2166: NOT
2167: IFFALSE 2189
// begin if Denis then
2169: LD_EXP 12
2173: IFFALSE 2187
// SetClass ( Denis , 2 ) ;
2175: LD_EXP 12
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: CALL_OW 336
// exit ;
2187: GO 2355
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2189: LD_VAR 0 3
2193: PUSH
2194: LD_INT 1
2196: ARRAY
2197: PPUSH
2198: LD_INT 2
2200: PPUSH
2201: CALL_OW 336
// end ; for i in ape09 do
2205: LD_ADDR_VAR 0 2
2209: PUSH
2210: LD_EXP 23
2214: PUSH
2215: FOR_IN
2216: IFFALSE 2235
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2218: LD_VAR 0 2
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: LD_INT 0
2228: PPUSH
2229: CALL_OW 49
2233: GO 2215
2235: POP
2236: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2237: LD_INT 22
2239: PUSH
2240: LD_INT 4
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 25
2249: PUSH
2250: LD_INT 2
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: EMPTY
2258: LIST
2259: LIST
2260: PPUSH
2261: CALL_OW 69
2265: PPUSH
2266: LD_INT 0
2268: PPUSH
2269: LD_INT 101
2271: PPUSH
2272: LD_INT 30
2274: PPUSH
2275: LD_INT 2
2277: PPUSH
2278: CALL_OW 205
// uc_side = 1 ;
2282: LD_ADDR_OWVAR 20
2286: PUSH
2287: LD_INT 1
2289: ST_TO_ADDR
// hc_class := 1 ;
2290: LD_ADDR_OWVAR 28
2294: PUSH
2295: LD_INT 1
2297: ST_TO_ADDR
// hc_sex := sex_female ;
2298: LD_ADDR_OWVAR 27
2302: PUSH
2303: LD_INT 2
2305: ST_TO_ADDR
// hc_gallery :=  ;
2306: LD_ADDR_OWVAR 33
2310: PUSH
2311: LD_STRING 
2313: ST_TO_ADDR
// hc_name :=  ;
2314: LD_ADDR_OWVAR 26
2318: PUSH
2319: LD_STRING 
2321: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2322: LD_ADDR_OWVAR 31
2326: PUSH
2327: LD_INT 1
2329: PUSH
2330: LD_INT 7
2332: PUSH
2333: LD_INT 1
2335: PUSH
2336: LD_INT 0
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: LIST
2343: LIST
2344: ST_TO_ADDR
// AmScout = CreateHuman ;
2345: LD_ADDR_EXP 18
2349: PUSH
2350: CALL_OW 44
2354: ST_TO_ADDR
// end ;
2355: LD_VAR 0 1
2359: RET
// export function PrepareCornell ; begin
2360: LD_INT 0
2362: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2363: LD_INT 4
2365: PPUSH
2366: LD_INT 4
2368: PPUSH
2369: CALL_OW 343
// uc_side = 4 ;
2373: LD_ADDR_OWVAR 20
2377: PUSH
2378: LD_INT 4
2380: ST_TO_ADDR
// uc_nation = 1 ;
2381: LD_ADDR_OWVAR 21
2385: PUSH
2386: LD_INT 1
2388: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2389: LD_ADDR_EXP 19
2393: PUSH
2394: LD_STRING 03_Cornel
2396: PPUSH
2397: LD_INT 1
2399: PPUSH
2400: CALL 8184 0 2
2404: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2405: LD_EXP 19
2409: PPUSH
2410: LD_INT 8
2412: PPUSH
2413: LD_INT 0
2415: PPUSH
2416: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2420: LD_EXP 19
2424: PPUSH
2425: LD_INT 350
2427: PPUSH
2428: CALL_OW 234
// if IsInUnit ( JMM ) then
2432: LD_EXP 1
2436: PPUSH
2437: CALL_OW 310
2441: IFFALSE 2484
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2443: LD_EXP 19
2447: PPUSH
2448: LD_EXP 1
2452: PPUSH
2453: CALL_OW 310
2457: PPUSH
2458: CALL_OW 250
2462: PPUSH
2463: LD_EXP 1
2467: PPUSH
2468: CALL_OW 310
2472: PPUSH
2473: CALL_OW 251
2477: PPUSH
2478: CALL_OW 111
2482: GO 2513
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2484: LD_EXP 19
2488: PPUSH
2489: LD_EXP 1
2493: PPUSH
2494: CALL_OW 250
2498: PPUSH
2499: LD_EXP 1
2503: PPUSH
2504: CALL_OW 251
2508: PPUSH
2509: CALL_OW 111
// end ; end_of_file
2513: LD_VAR 0 1
2517: RET
// export function PrepareRussians ; var i , un ; begin
2518: LD_INT 0
2520: PPUSH
2521: PPUSH
2522: PPUSH
// uc_side = 3 ;
2523: LD_ADDR_OWVAR 20
2527: PUSH
2528: LD_INT 3
2530: ST_TO_ADDR
// uc_nation = 3 ;
2531: LD_ADDR_OWVAR 21
2535: PUSH
2536: LD_INT 3
2538: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2539: LD_ADDR_EXP 25
2543: PUSH
2544: LD_STRING Tsaritsyn
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL 8184 0 2
2554: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2555: LD_EXP 25
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: LD_INT 0
2565: PPUSH
2566: CALL_OW 49
// for i = 1 to 14 do
2570: LD_ADDR_VAR 0 2
2574: PUSH
2575: DOUBLE
2576: LD_INT 1
2578: DEC
2579: ST_TO_ADDR
2580: LD_INT 14
2582: PUSH
2583: FOR_TO
2584: IFFALSE 2670
// begin uc_side = 3 ;
2586: LD_ADDR_OWVAR 20
2590: PUSH
2591: LD_INT 3
2593: ST_TO_ADDR
// uc_nation = 3 ;
2594: LD_ADDR_OWVAR 21
2598: PUSH
2599: LD_INT 3
2601: ST_TO_ADDR
// hc_gallery =  ;
2602: LD_ADDR_OWVAR 33
2606: PUSH
2607: LD_STRING 
2609: ST_TO_ADDR
// hc_name =  ;
2610: LD_ADDR_OWVAR 26
2614: PUSH
2615: LD_STRING 
2617: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2618: LD_INT 0
2620: PPUSH
2621: LD_INT 1
2623: PPUSH
2624: LD_EXP 36
2628: PPUSH
2629: LD_EXP 37
2633: PPUSH
2634: CALL_OW 12
2638: PPUSH
2639: CALL_OW 380
// un = CreateHuman ;
2643: LD_ADDR_VAR 0 3
2647: PUSH
2648: CALL_OW 44
2652: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2653: LD_VAR 0 3
2657: PPUSH
2658: LD_INT 3
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL_OW 49
// end ;
2668: GO 2583
2670: POP
2671: POP
// for i = 1 to 6 do
2672: LD_ADDR_VAR 0 2
2676: PUSH
2677: DOUBLE
2678: LD_INT 1
2680: DEC
2681: ST_TO_ADDR
2682: LD_INT 6
2684: PUSH
2685: FOR_TO
2686: IFFALSE 2772
// begin uc_side = 3 ;
2688: LD_ADDR_OWVAR 20
2692: PUSH
2693: LD_INT 3
2695: ST_TO_ADDR
// uc_nation = 3 ;
2696: LD_ADDR_OWVAR 21
2700: PUSH
2701: LD_INT 3
2703: ST_TO_ADDR
// hc_gallery =  ;
2704: LD_ADDR_OWVAR 33
2708: PUSH
2709: LD_STRING 
2711: ST_TO_ADDR
// hc_name =  ;
2712: LD_ADDR_OWVAR 26
2716: PUSH
2717: LD_STRING 
2719: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2720: LD_INT 0
2722: PPUSH
2723: LD_INT 2
2725: PPUSH
2726: LD_EXP 36
2730: PPUSH
2731: LD_EXP 37
2735: PPUSH
2736: CALL_OW 12
2740: PPUSH
2741: CALL_OW 380
// un = CreateHuman ;
2745: LD_ADDR_VAR 0 3
2749: PUSH
2750: CALL_OW 44
2754: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2755: LD_VAR 0 3
2759: PPUSH
2760: LD_INT 3
2762: PPUSH
2763: LD_INT 0
2765: PPUSH
2766: CALL_OW 49
// end ;
2770: GO 2685
2772: POP
2773: POP
// for i = 1 to 6 do
2774: LD_ADDR_VAR 0 2
2778: PUSH
2779: DOUBLE
2780: LD_INT 1
2782: DEC
2783: ST_TO_ADDR
2784: LD_INT 6
2786: PUSH
2787: FOR_TO
2788: IFFALSE 2874
// begin uc_side = 3 ;
2790: LD_ADDR_OWVAR 20
2794: PUSH
2795: LD_INT 3
2797: ST_TO_ADDR
// uc_nation = 3 ;
2798: LD_ADDR_OWVAR 21
2802: PUSH
2803: LD_INT 3
2805: ST_TO_ADDR
// hc_gallery =  ;
2806: LD_ADDR_OWVAR 33
2810: PUSH
2811: LD_STRING 
2813: ST_TO_ADDR
// hc_name =  ;
2814: LD_ADDR_OWVAR 26
2818: PUSH
2819: LD_STRING 
2821: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2822: LD_INT 0
2824: PPUSH
2825: LD_INT 3
2827: PPUSH
2828: LD_EXP 36
2832: PPUSH
2833: LD_EXP 37
2837: PPUSH
2838: CALL_OW 12
2842: PPUSH
2843: CALL_OW 380
// un = CreateHuman ;
2847: LD_ADDR_VAR 0 3
2851: PUSH
2852: CALL_OW 44
2856: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2857: LD_VAR 0 3
2861: PPUSH
2862: LD_INT 3
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 49
// end ;
2872: GO 2787
2874: POP
2875: POP
// for i = 1 to 4 do
2876: LD_ADDR_VAR 0 2
2880: PUSH
2881: DOUBLE
2882: LD_INT 1
2884: DEC
2885: ST_TO_ADDR
2886: LD_INT 4
2888: PUSH
2889: FOR_TO
2890: IFFALSE 2976
// begin uc_side = 3 ;
2892: LD_ADDR_OWVAR 20
2896: PUSH
2897: LD_INT 3
2899: ST_TO_ADDR
// uc_nation = 3 ;
2900: LD_ADDR_OWVAR 21
2904: PUSH
2905: LD_INT 3
2907: ST_TO_ADDR
// hc_gallery =  ;
2908: LD_ADDR_OWVAR 33
2912: PUSH
2913: LD_STRING 
2915: ST_TO_ADDR
// hc_name =  ;
2916: LD_ADDR_OWVAR 26
2920: PUSH
2921: LD_STRING 
2923: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2924: LD_INT 0
2926: PPUSH
2927: LD_INT 4
2929: PPUSH
2930: LD_EXP 36
2934: PPUSH
2935: LD_EXP 37
2939: PPUSH
2940: CALL_OW 12
2944: PPUSH
2945: CALL_OW 380
// un = CreateHuman ;
2949: LD_ADDR_VAR 0 3
2953: PUSH
2954: CALL_OW 44
2958: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2959: LD_VAR 0 3
2963: PPUSH
2964: LD_INT 3
2966: PPUSH
2967: LD_INT 0
2969: PPUSH
2970: CALL_OW 49
// end ;
2974: GO 2889
2976: POP
2977: POP
// end ; end_of_file
2978: LD_VAR 0 1
2982: RET
// export function PrepareArabianCommander ; begin
2983: LD_INT 0
2985: PPUSH
// uc_side = 2 ;
2986: LD_ADDR_OWVAR 20
2990: PUSH
2991: LD_INT 2
2993: ST_TO_ADDR
// uc_nation = 2 ;
2994: LD_ADDR_OWVAR 21
2998: PUSH
2999: LD_INT 2
3001: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3002: LD_ADDR_EXP 26
3006: PUSH
3007: LD_STRING Dietrich
3009: PPUSH
3010: CALL_OW 25
3014: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3015: LD_EXP 26
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: LD_INT 0
3025: PPUSH
3026: CALL_OW 49
// end ;
3030: LD_VAR 0 1
3034: RET
// export function PrepareArabian ; var i , un , veh ; begin
3035: LD_INT 0
3037: PPUSH
3038: PPUSH
3039: PPUSH
3040: PPUSH
// uc_side := 2 ;
3041: LD_ADDR_OWVAR 20
3045: PUSH
3046: LD_INT 2
3048: ST_TO_ADDR
// uc_nation := 2 ;
3049: LD_ADDR_OWVAR 21
3053: PUSH
3054: LD_INT 2
3056: ST_TO_ADDR
// if not Ahmed then
3057: LD_EXP 27
3061: NOT
3062: IFFALSE 3130
// begin InitHc ;
3064: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3068: LD_INT 1
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: LD_EXP 36
3078: PPUSH
3079: LD_EXP 37
3083: PUSH
3084: LD_INT 1
3086: PLUS
3087: PPUSH
3088: CALL_OW 12
3092: PPUSH
3093: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3097: LD_ADDR_OWVAR 26
3101: PUSH
3102: LD_STRING Ahmed Abbasid
3104: ST_TO_ADDR
// Ahmed := CreateHuman ;
3105: LD_ADDR_EXP 27
3109: PUSH
3110: CALL_OW 44
3114: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3115: LD_EXP 27
3119: PPUSH
3120: LD_INT 4
3122: PPUSH
3123: LD_INT 0
3125: PPUSH
3126: CALL_OW 49
// end ; for i = 1 to 3 do
3130: LD_ADDR_VAR 0 2
3134: PUSH
3135: DOUBLE
3136: LD_INT 1
3138: DEC
3139: ST_TO_ADDR
3140: LD_INT 3
3142: PUSH
3143: FOR_TO
3144: IFFALSE 3230
// begin uc_side = 2 ;
3146: LD_ADDR_OWVAR 20
3150: PUSH
3151: LD_INT 2
3153: ST_TO_ADDR
// uc_nation = 2 ;
3154: LD_ADDR_OWVAR 21
3158: PUSH
3159: LD_INT 2
3161: ST_TO_ADDR
// hc_gallery =  ;
3162: LD_ADDR_OWVAR 33
3166: PUSH
3167: LD_STRING 
3169: ST_TO_ADDR
// hc_name =  ;
3170: LD_ADDR_OWVAR 26
3174: PUSH
3175: LD_STRING 
3177: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3178: LD_INT 0
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_EXP 36
3188: PPUSH
3189: LD_EXP 37
3193: PPUSH
3194: CALL_OW 12
3198: PPUSH
3199: CALL_OW 380
// un = CreateHuman ;
3203: LD_ADDR_VAR 0 3
3207: PUSH
3208: CALL_OW 44
3212: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3213: LD_VAR 0 3
3217: PPUSH
3218: LD_INT 4
3220: PPUSH
3221: LD_INT 0
3223: PPUSH
3224: CALL_OW 49
// end ;
3228: GO 3143
3230: POP
3231: POP
// for i = 1 to 6 do
3232: LD_ADDR_VAR 0 2
3236: PUSH
3237: DOUBLE
3238: LD_INT 1
3240: DEC
3241: ST_TO_ADDR
3242: LD_INT 6
3244: PUSH
3245: FOR_TO
3246: IFFALSE 3332
// begin uc_side = 2 ;
3248: LD_ADDR_OWVAR 20
3252: PUSH
3253: LD_INT 2
3255: ST_TO_ADDR
// uc_nation = 2 ;
3256: LD_ADDR_OWVAR 21
3260: PUSH
3261: LD_INT 2
3263: ST_TO_ADDR
// hc_gallery =  ;
3264: LD_ADDR_OWVAR 33
3268: PUSH
3269: LD_STRING 
3271: ST_TO_ADDR
// hc_name =  ;
3272: LD_ADDR_OWVAR 26
3276: PUSH
3277: LD_STRING 
3279: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3280: LD_INT 0
3282: PPUSH
3283: LD_INT 2
3285: PPUSH
3286: LD_EXP 36
3290: PPUSH
3291: LD_EXP 37
3295: PPUSH
3296: CALL_OW 12
3300: PPUSH
3301: CALL_OW 380
// un = CreateHuman ;
3305: LD_ADDR_VAR 0 3
3309: PUSH
3310: CALL_OW 44
3314: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3315: LD_VAR 0 3
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// end ;
3330: GO 3245
3332: POP
3333: POP
// for i = 1 to 6 do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: DOUBLE
3340: LD_INT 1
3342: DEC
3343: ST_TO_ADDR
3344: LD_INT 6
3346: PUSH
3347: FOR_TO
3348: IFFALSE 3434
// begin uc_side = 2 ;
3350: LD_ADDR_OWVAR 20
3354: PUSH
3355: LD_INT 2
3357: ST_TO_ADDR
// uc_nation = 2 ;
3358: LD_ADDR_OWVAR 21
3362: PUSH
3363: LD_INT 2
3365: ST_TO_ADDR
// hc_gallery =  ;
3366: LD_ADDR_OWVAR 33
3370: PUSH
3371: LD_STRING 
3373: ST_TO_ADDR
// hc_name =  ;
3374: LD_ADDR_OWVAR 26
3378: PUSH
3379: LD_STRING 
3381: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3382: LD_INT 0
3384: PPUSH
3385: LD_INT 1
3387: PPUSH
3388: LD_EXP 36
3392: PPUSH
3393: LD_EXP 37
3397: PPUSH
3398: CALL_OW 12
3402: PPUSH
3403: CALL_OW 380
// un = CreateHuman ;
3407: LD_ADDR_VAR 0 3
3411: PUSH
3412: CALL_OW 44
3416: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3417: LD_VAR 0 3
3421: PPUSH
3422: LD_INT 4
3424: PPUSH
3425: LD_INT 0
3427: PPUSH
3428: CALL_OW 49
// end ;
3432: GO 3347
3434: POP
3435: POP
// for i = 1 to 4 do
3436: LD_ADDR_VAR 0 2
3440: PUSH
3441: DOUBLE
3442: LD_INT 1
3444: DEC
3445: ST_TO_ADDR
3446: LD_INT 4
3448: PUSH
3449: FOR_TO
3450: IFFALSE 3536
// begin uc_side = 2 ;
3452: LD_ADDR_OWVAR 20
3456: PUSH
3457: LD_INT 2
3459: ST_TO_ADDR
// uc_nation = 2 ;
3460: LD_ADDR_OWVAR 21
3464: PUSH
3465: LD_INT 2
3467: ST_TO_ADDR
// hc_gallery =  ;
3468: LD_ADDR_OWVAR 33
3472: PUSH
3473: LD_STRING 
3475: ST_TO_ADDR
// hc_name =  ;
3476: LD_ADDR_OWVAR 26
3480: PUSH
3481: LD_STRING 
3483: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3484: LD_INT 0
3486: PPUSH
3487: LD_INT 4
3489: PPUSH
3490: LD_EXP 36
3494: PPUSH
3495: LD_EXP 37
3499: PPUSH
3500: CALL_OW 12
3504: PPUSH
3505: CALL_OW 380
// un = CreateHuman ;
3509: LD_ADDR_VAR 0 3
3513: PUSH
3514: CALL_OW 44
3518: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3519: LD_VAR 0 3
3523: PPUSH
3524: LD_INT 4
3526: PPUSH
3527: LD_INT 0
3529: PPUSH
3530: CALL_OW 49
// end ;
3534: GO 3449
3536: POP
3537: POP
// for i = 1 to 2 do
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: DOUBLE
3544: LD_INT 1
3546: DEC
3547: ST_TO_ADDR
3548: LD_INT 2
3550: PUSH
3551: FOR_TO
3552: IFFALSE 3682
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3554: LD_ADDR_VAR 0 4
3558: PUSH
3559: LD_INT 22
3561: PUSH
3562: LD_INT 2
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PUSH
3569: LD_INT 21
3571: PUSH
3572: LD_INT 2
3574: PUSH
3575: EMPTY
3576: LIST
3577: LIST
3578: PUSH
3579: LD_INT 58
3581: PUSH
3582: EMPTY
3583: LIST
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: PPUSH
3590: CALL_OW 69
3594: ST_TO_ADDR
// uc_side = 2 ;
3595: LD_ADDR_OWVAR 20
3599: PUSH
3600: LD_INT 2
3602: ST_TO_ADDR
// uc_nation = 2 ;
3603: LD_ADDR_OWVAR 21
3607: PUSH
3608: LD_INT 2
3610: ST_TO_ADDR
// hc_gallery =  ;
3611: LD_ADDR_OWVAR 33
3615: PUSH
3616: LD_STRING 
3618: ST_TO_ADDR
// hc_name =  ;
3619: LD_ADDR_OWVAR 26
3623: PUSH
3624: LD_STRING 
3626: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3627: LD_INT 0
3629: PPUSH
3630: LD_INT 3
3632: PPUSH
3633: LD_EXP 36
3637: PPUSH
3638: LD_EXP 37
3642: PPUSH
3643: CALL_OW 12
3647: PPUSH
3648: CALL_OW 380
// un = CreateHuman ;
3652: LD_ADDR_VAR 0 3
3656: PUSH
3657: CALL_OW 44
3661: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3662: LD_VAR 0 3
3666: PPUSH
3667: LD_VAR 0 4
3671: PUSH
3672: LD_INT 1
3674: ARRAY
3675: PPUSH
3676: CALL_OW 52
// end ;
3680: GO 3551
3682: POP
3683: POP
// end ; end_of_file
3684: LD_VAR 0 1
3688: RET
// every 1 do
3689: GO 3691
3691: DISABLE
// begin if FilterAllUnits ( [ [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] , [ f_class , 2 ] ] ) = 0 then
3692: LD_INT 2
3694: PUSH
3695: LD_INT 22
3697: PUSH
3698: LD_INT 1
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: PUSH
3705: LD_INT 22
3707: PUSH
3708: LD_INT 4
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: PUSH
3720: LD_INT 25
3722: PUSH
3723: LD_INT 2
3725: PUSH
3726: EMPTY
3727: LIST
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: PPUSH
3734: CALL_OW 69
3738: PUSH
3739: LD_INT 0
3741: EQUAL
3742: IFFALSE 3756
// SetClass ( JMM , 2 ) ;
3744: LD_EXP 1
3748: PPUSH
3749: LD_INT 2
3751: PPUSH
3752: CALL_OW 336
// InGameOn ;
3756: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_INT 19
3765: PPUSH
3766: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
3770: LD_EXP 11
3774: PPUSH
3775: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
3779: LD_INT 22
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: PUSH
3789: LD_INT 25
3791: PUSH
3792: LD_INT 2
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: EMPTY
3800: LIST
3801: LIST
3802: PPUSH
3803: CALL_OW 69
3807: IFFALSE 3855
// begin repeat wait ( 0 0$1 ) ;
3809: LD_INT 35
3811: PPUSH
3812: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
3816: LD_INT 22
3818: PUSH
3819: LD_INT 4
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: PUSH
3826: LD_INT 30
3828: PUSH
3829: LD_INT 0
3831: PUSH
3832: EMPTY
3833: LIST
3834: LIST
3835: PUSH
3836: EMPTY
3837: LIST
3838: LIST
3839: PPUSH
3840: CALL_OW 69
3844: IFFALSE 3809
// Wait ( 0 0$1 ) ;
3846: LD_INT 35
3848: PPUSH
3849: CALL_OW 67
// end else
3853: GO 3862
// Wait ( 0 0$3 ) ;
3855: LD_INT 105
3857: PPUSH
3858: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
3862: LD_EXP 1
3866: PPUSH
3867: CALL_OW 310
3871: PPUSH
3872: CALL_OW 85
// Wait ( 0 0$1 ) ;
3876: LD_INT 35
3878: PPUSH
3879: CALL_OW 67
// if IsOk ( Gary ) then
3883: LD_EXP 10
3887: PPUSH
3888: CALL_OW 302
3892: IFFALSE 3930
// begin Say ( Gary , D2-Gary-1 ) ;
3894: LD_EXP 10
3898: PPUSH
3899: LD_STRING D2-Gary-1
3901: PPUSH
3902: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3906: LD_EXP 1
3910: PPUSH
3911: LD_STRING D2-JMM-1
3913: PPUSH
3914: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3918: LD_EXP 10
3922: PPUSH
3923: LD_STRING D2-Gary-2
3925: PPUSH
3926: CALL_OW 88
// end ; InGameOff ;
3930: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3934: LD_STRING M1
3936: PPUSH
3937: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3941: LD_INT 38
3943: PPUSH
3944: LD_INT 1
3946: PPUSH
3947: LD_INT 100
3949: PPUSH
3950: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3954: LD_INT 47
3956: PPUSH
3957: LD_INT 1
3959: PPUSH
3960: LD_INT 50
3962: PPUSH
3963: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3967: LD_INT 47
3969: PPUSH
3970: LD_INT 3
3972: PPUSH
3973: LD_INT 50
3975: PPUSH
3976: CALL_OW 291
// SaveForQuickRestart ;
3980: CALL_OW 22
// end ;
3984: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3985: LD_EXP 1
3989: PPUSH
3990: LD_EXP 11
3994: PPUSH
3995: CALL_OW 296
3999: PUSH
4000: LD_INT 15
4002: LESS
4003: IFFALSE 4469
4005: GO 4007
4007: DISABLE
// begin InGameOn ;
4008: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4012: LD_EXP 1
4016: PPUSH
4017: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4021: LD_EXP 1
4025: PPUSH
4026: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4030: LD_EXP 1
4034: PPUSH
4035: LD_EXP 11
4039: PPUSH
4040: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4044: LD_INT 35
4046: PPUSH
4047: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4051: LD_EXP 11
4055: PUSH
4056: LD_EXP 13
4060: PUSH
4061: LD_EXP 12
4065: PUSH
4066: LD_EXP 14
4070: PUSH
4071: LD_EXP 8
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: LIST
4080: LIST
4081: LIST
4082: PPUSH
4083: LD_EXP 1
4087: PPUSH
4088: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4092: LD_EXP 1
4096: PPUSH
4097: LD_EXP 11
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 5
4109: LESS
4110: IFFALSE 4044
// ComTurnUnit ( JMM , Simms ) ;
4112: LD_EXP 1
4116: PPUSH
4117: LD_EXP 11
4121: PPUSH
4122: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4126: LD_EXP 11
4130: PUSH
4131: LD_EXP 13
4135: PUSH
4136: LD_EXP 12
4140: PUSH
4141: LD_EXP 14
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: LIST
4150: LIST
4151: PPUSH
4152: LD_EXP 1
4156: PPUSH
4157: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4161: LD_EXP 1
4165: PUSH
4166: LD_EXP 11
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4179: LD_EXP 11
4183: PPUSH
4184: LD_STRING D2a-Sim-1
4186: PPUSH
4187: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4191: LD_EXP 1
4195: PPUSH
4196: LD_STRING D2a-JMM-1
4198: PPUSH
4199: CALL_OW 88
// if IsOk ( Joan ) then
4203: LD_EXP 13
4207: PPUSH
4208: CALL_OW 302
4212: IFFALSE 4264
// begin ComTurnUnit ( JMM , Joan ) ;
4214: LD_EXP 1
4218: PPUSH
4219: LD_EXP 13
4223: PPUSH
4224: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4228: LD_EXP 13
4232: PPUSH
4233: LD_STRING D2b-Joan-1
4235: PPUSH
4236: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4240: LD_EXP 1
4244: PPUSH
4245: LD_STRING D2b-JMM-1
4247: PPUSH
4248: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4252: LD_EXP 13
4256: PPUSH
4257: LD_STRING D2b-Joan-2
4259: PPUSH
4260: CALL_OW 88
// end ; if IsOk ( Denis ) then
4264: LD_EXP 12
4268: PPUSH
4269: CALL_OW 302
4273: IFFALSE 4301
// begin ComTurnUnit ( JMM , Denis ) ;
4275: LD_EXP 1
4279: PPUSH
4280: LD_EXP 12
4284: PPUSH
4285: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4289: LD_EXP 12
4293: PPUSH
4294: LD_STRING D2c-Den-1
4296: PPUSH
4297: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4301: LD_EXP 8
4305: PPUSH
4306: CALL_OW 302
4310: IFFALSE 4379
// begin repeat wait ( 0 0$1 ) ;
4312: LD_INT 35
4314: PPUSH
4315: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4319: LD_EXP 8
4323: PPUSH
4324: LD_EXP 1
4328: PPUSH
4329: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4333: LD_EXP 1
4337: PPUSH
4338: LD_EXP 8
4342: PPUSH
4343: CALL_OW 296
4347: PUSH
4348: LD_INT 5
4350: LESS
4351: IFFALSE 4312
// ComTurnUnit ( JMM , Kikuchi ) ;
4353: LD_EXP 1
4357: PPUSH
4358: LD_EXP 8
4362: PPUSH
4363: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4367: LD_EXP 8
4371: PPUSH
4372: LD_STRING D3b-Yam-1
4374: PPUSH
4375: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4379: LD_EXP 14
4383: PPUSH
4384: CALL_OW 302
4388: IFFALSE 4428
// begin ComTurnUnit ( JMM , Khatam ) ;
4390: LD_EXP 1
4394: PPUSH
4395: LD_EXP 14
4399: PPUSH
4400: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4404: LD_EXP 1
4408: PPUSH
4409: LD_STRING D2c-JMM-1
4411: PPUSH
4412: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4416: LD_EXP 14
4420: PPUSH
4421: LD_STRING D2c-Khat-1
4423: PPUSH
4424: CALL_OW 88
// end ; InGameOff ;
4428: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4432: LD_INT 22
4434: PUSH
4435: LD_INT 4
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 69
4446: PPUSH
4447: LD_INT 1
4449: PPUSH
4450: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4454: LD_STRING M1a
4456: PPUSH
4457: CALL_OW 337
// joinEpsilon = 1 ;
4461: LD_ADDR_EXP 29
4465: PUSH
4466: LD_INT 1
4468: ST_TO_ADDR
// end ;
4469: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4470: LD_EXP 58
4474: PUSH
4475: LD_INT 1
4477: EQUAL
4478: IFFALSE 5363
4480: GO 4482
4482: DISABLE
4483: LD_INT 0
4485: PPUSH
4486: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4487: LD_ADDR_VAR 0 1
4491: PUSH
4492: LD_INT 22
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 25
4504: PUSH
4505: LD_INT 4
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 26
4514: PUSH
4515: LD_INT 1
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: PPUSH
4527: CALL_OW 69
4531: PUSH
4532: LD_EXP 1
4536: PUSH
4537: LD_EXP 2
4541: PUSH
4542: LD_EXP 3
4546: PUSH
4547: LD_EXP 4
4551: PUSH
4552: LD_EXP 5
4556: PUSH
4557: LD_EXP 6
4561: PUSH
4562: LD_EXP 7
4566: PUSH
4567: LD_EXP 8
4571: PUSH
4572: LD_EXP 9
4576: PUSH
4577: LD_EXP 10
4581: PUSH
4582: LD_EXP 11
4586: PUSH
4587: LD_EXP 12
4591: PUSH
4592: LD_EXP 13
4596: PUSH
4597: LD_EXP 14
4601: PUSH
4602: LD_EXP 15
4606: PUSH
4607: LD_EXP 16
4611: PUSH
4612: LD_EXP 17
4616: PUSH
4617: LD_EXP 18
4621: PUSH
4622: LD_EXP 19
4626: PUSH
4627: LD_EXP 24
4631: PUSH
4632: EMPTY
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: LIST
4644: LIST
4645: LIST
4646: LIST
4647: LIST
4648: LIST
4649: LIST
4650: LIST
4651: LIST
4652: LIST
4653: DIFF
4654: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4655: LD_ADDR_VAR 0 2
4659: PUSH
4660: LD_INT 22
4662: PUSH
4663: LD_INT 1
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 26
4672: PUSH
4673: LD_INT 1
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: LD_INT 2
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 1
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 2
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: LD_INT 25
4705: PUSH
4706: LD_INT 3
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: PUSH
4713: EMPTY
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: LIST
4723: PPUSH
4724: CALL_OW 69
4728: PUSH
4729: LD_EXP 1
4733: PUSH
4734: LD_EXP 2
4738: PUSH
4739: LD_EXP 3
4743: PUSH
4744: LD_EXP 4
4748: PUSH
4749: LD_EXP 5
4753: PUSH
4754: LD_EXP 6
4758: PUSH
4759: LD_EXP 7
4763: PUSH
4764: LD_EXP 8
4768: PUSH
4769: LD_EXP 9
4773: PUSH
4774: LD_EXP 10
4778: PUSH
4779: LD_EXP 11
4783: PUSH
4784: LD_EXP 12
4788: PUSH
4789: LD_EXP 13
4793: PUSH
4794: LD_EXP 14
4798: PUSH
4799: LD_EXP 15
4803: PUSH
4804: LD_EXP 16
4808: PUSH
4809: LD_EXP 17
4813: PUSH
4814: LD_EXP 18
4818: PUSH
4819: LD_EXP 19
4823: PUSH
4824: LD_EXP 24
4828: PUSH
4829: EMPTY
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: DIFF
4851: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
4852: LD_EXP 10
4856: PUSH
4857: LD_VAR 0 2
4861: OR
4862: PUSH
4863: LD_EXP 17
4867: PUSH
4868: LD_VAR 0 1
4872: OR
4873: AND
4874: IFFALSE 5093
// begin DialogueOn ;
4876: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4880: LD_EXP 17
4884: PPUSH
4885: CALL_OW 302
4889: IFFALSE 4905
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4891: LD_EXP 17
4895: PPUSH
4896: LD_STRING D3-Sci1-1
4898: PPUSH
4899: CALL_OW 88
4903: GO 4917
// Say ( tmp1 , D3-Sci1-1 ) ;
4905: LD_VAR 0 1
4909: PPUSH
4910: LD_STRING D3-Sci1-1
4912: PPUSH
4913: CALL_OW 88
// if IsOk ( Gary ) then
4917: LD_EXP 10
4921: PPUSH
4922: CALL_OW 302
4926: IFFALSE 4942
// Say ( Gary , D3-Gary-1 ) else
4928: LD_EXP 10
4932: PPUSH
4933: LD_STRING D3-Gary-1
4935: PPUSH
4936: CALL_OW 88
4940: GO 4954
// Say ( tmp2 , D3-Gary-1 ) ;
4942: LD_VAR 0 2
4946: PPUSH
4947: LD_STRING D3-Gary-1
4949: PPUSH
4950: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4954: LD_EXP 17
4958: PPUSH
4959: CALL_OW 302
4963: IFFALSE 4979
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4965: LD_EXP 17
4969: PPUSH
4970: LD_STRING D3-Sci1-2
4972: PPUSH
4973: CALL_OW 88
4977: GO 4991
// Say ( tmp1 , D3-Sci1-2 ) ;
4979: LD_VAR 0 1
4983: PPUSH
4984: LD_STRING D3-Sci1-2
4986: PPUSH
4987: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4991: LD_EXP 1
4995: PPUSH
4996: LD_STRING D3-JMM-2
4998: PPUSH
4999: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5003: LD_EXP 17
5007: PPUSH
5008: CALL_OW 302
5012: IFFALSE 5028
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5014: LD_EXP 17
5018: PPUSH
5019: LD_STRING D3-Sci1-3
5021: PPUSH
5022: CALL_OW 88
5026: GO 5040
// Say ( tmp1 , D3-Sci1-3 ) ;
5028: LD_VAR 0 1
5032: PPUSH
5033: LD_STRING D3-Sci1-3
5035: PPUSH
5036: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5040: LD_EXP 1
5044: PPUSH
5045: LD_STRING D3-JMM-3
5047: PPUSH
5048: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5052: LD_EXP 17
5056: PPUSH
5057: CALL_OW 302
5061: IFFALSE 5077
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5063: LD_EXP 17
5067: PPUSH
5068: LD_STRING D3-Sci1-4
5070: PPUSH
5071: CALL_OW 88
5075: GO 5089
// Say ( tmp1 , D3-Sci1-4 ) ;
5077: LD_VAR 0 1
5081: PPUSH
5082: LD_STRING D3-Sci1-4
5084: PPUSH
5085: CALL_OW 88
// DialogueOff ;
5089: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5093: LD_INT 12
5095: PPUSH
5096: LD_INT 1
5098: PPUSH
5099: LD_INT 1
5101: PPUSH
5102: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5106: LD_INT 32
5108: PPUSH
5109: LD_INT 1
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5119: LD_INT 12
5121: PPUSH
5122: LD_INT 1
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5132: LD_INT 33
5134: PPUSH
5135: LD_INT 1
5137: PPUSH
5138: LD_INT 1
5140: PPUSH
5141: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5145: LD_STRING M2
5147: PPUSH
5148: CALL_OW 337
// wait ( 3 3$0 ) ;
5152: LD_INT 6300
5154: PPUSH
5155: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5159: LD_INT 35
5161: PPUSH
5162: CALL_OW 67
// until not InBattle ( 1 ) ;
5166: LD_INT 1
5168: PPUSH
5169: CALL_OW 463
5173: NOT
5174: IFFALSE 5159
// if IsOK ( Simms ) and IsOk ( Denis ) then
5176: LD_EXP 11
5180: PPUSH
5181: CALL_OW 302
5185: PUSH
5186: LD_EXP 12
5190: PPUSH
5191: CALL_OW 302
5195: AND
5196: IFFALSE 5363
// begin DialogueOn ;
5198: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5202: LD_EXP 11
5206: PPUSH
5207: LD_STRING D3a-Sim-1
5209: PPUSH
5210: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
5214: LD_EXP 12
5218: PPUSH
5219: LD_STRING D3a-Sci1-1
5221: PPUSH
5222: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5226: LD_EXP 11
5230: PPUSH
5231: LD_STRING D3a-Sim-2
5233: PPUSH
5234: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
5238: LD_EXP 12
5242: PPUSH
5243: LD_STRING D3a-Sci1-2
5245: PPUSH
5246: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5250: LD_EXP 11
5254: PPUSH
5255: LD_STRING D3a-Sim-3
5257: PPUSH
5258: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
5262: LD_EXP 12
5266: PPUSH
5267: LD_STRING D3a-Sci1-3
5269: PPUSH
5270: CALL_OW 88
// if IsOK ( Joan ) then
5274: LD_EXP 13
5278: PPUSH
5279: CALL_OW 302
5283: IFFALSE 5299
// Say ( Simms , D3a-Sim-4 ) else
5285: LD_EXP 11
5289: PPUSH
5290: LD_STRING D3a-Sim-4
5292: PPUSH
5293: CALL_OW 88
5297: GO 5311
// Say ( Simms , D3a-Sim-4a ) ;
5299: LD_EXP 11
5303: PPUSH
5304: LD_STRING D3a-Sim-4a
5306: PPUSH
5307: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
5311: LD_EXP 12
5315: PPUSH
5316: LD_STRING D3a-Sci1-4
5318: PPUSH
5319: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5323: LD_EXP 11
5327: PPUSH
5328: LD_STRING D3a-Sim-5
5330: PPUSH
5331: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
5335: LD_EXP 12
5339: PPUSH
5340: LD_STRING D3a-Sci1-5
5342: PPUSH
5343: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5347: LD_EXP 11
5351: PPUSH
5352: LD_STRING D3a-Sim-6
5354: PPUSH
5355: CALL_OW 88
// DialogueOff ;
5359: CALL_OW 7
// end ; end ;
5363: PPOPN 2
5365: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
5366: LD_EXP 29
5370: PUSH
5371: LD_INT 1
5373: EQUAL
5374: IFFALSE 5694
5376: GO 5378
5378: DISABLE
5379: LD_INT 0
5381: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
5382: LD_EXP 18
5386: PPUSH
5387: LD_STRING D4-FSol1-1
5389: PPUSH
5390: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
5394: LD_STRING M3
5396: PPUSH
5397: CALL_OW 337
// PrepareRussians ;
5401: CALL 2518 0 0
// rnd = Rand ( 1 , 100 ) ;
5405: LD_ADDR_VAR 0 1
5409: PUSH
5410: LD_INT 1
5412: PPUSH
5413: LD_INT 100
5415: PPUSH
5416: CALL_OW 12
5420: ST_TO_ADDR
// if difficulty = 1 then
5421: LD_OWVAR 67
5425: PUSH
5426: LD_INT 1
5428: EQUAL
5429: IFFALSE 5512
// begin if rnd > 0 and rnd < 51 then
5431: LD_VAR 0 1
5435: PUSH
5436: LD_INT 0
5438: GREATER
5439: PUSH
5440: LD_VAR 0 1
5444: PUSH
5445: LD_INT 51
5447: LESS
5448: AND
5449: IFFALSE 5458
// BuildRussianBase ( 2 ) ;
5451: LD_INT 2
5453: PPUSH
5454: CALL 8910 0 1
// if rnd > 50 and rnd < 81 then
5458: LD_VAR 0 1
5462: PUSH
5463: LD_INT 50
5465: GREATER
5466: PUSH
5467: LD_VAR 0 1
5471: PUSH
5472: LD_INT 81
5474: LESS
5475: AND
5476: IFFALSE 5485
// BuildRussianBase ( 1 ) ;
5478: LD_INT 1
5480: PPUSH
5481: CALL 8910 0 1
// if rnd > 80 and rnd < 101 then
5485: LD_VAR 0 1
5489: PUSH
5490: LD_INT 80
5492: GREATER
5493: PUSH
5494: LD_VAR 0 1
5498: PUSH
5499: LD_INT 101
5501: LESS
5502: AND
5503: IFFALSE 5512
// BuildRussianBase ( 3 ) ;
5505: LD_INT 3
5507: PPUSH
5508: CALL 8910 0 1
// end ; if difficulty = 2 then
5512: LD_OWVAR 67
5516: PUSH
5517: LD_INT 2
5519: EQUAL
5520: IFFALSE 5603
// begin if rnd > 0 and rnd < 61 then
5522: LD_VAR 0 1
5526: PUSH
5527: LD_INT 0
5529: GREATER
5530: PUSH
5531: LD_VAR 0 1
5535: PUSH
5536: LD_INT 61
5538: LESS
5539: AND
5540: IFFALSE 5549
// BuildRussianBase ( 2 ) ;
5542: LD_INT 2
5544: PPUSH
5545: CALL 8910 0 1
// if rnd > 60 and rnd < 81 then
5549: LD_VAR 0 1
5553: PUSH
5554: LD_INT 60
5556: GREATER
5557: PUSH
5558: LD_VAR 0 1
5562: PUSH
5563: LD_INT 81
5565: LESS
5566: AND
5567: IFFALSE 5576
// BuildRussianBase ( 1 ) ;
5569: LD_INT 1
5571: PPUSH
5572: CALL 8910 0 1
// if rnd > 80 and rnd < 101 then
5576: LD_VAR 0 1
5580: PUSH
5581: LD_INT 80
5583: GREATER
5584: PUSH
5585: LD_VAR 0 1
5589: PUSH
5590: LD_INT 101
5592: LESS
5593: AND
5594: IFFALSE 5603
// BuildRussianBase ( 3 ) ;
5596: LD_INT 3
5598: PPUSH
5599: CALL 8910 0 1
// end ; if difficulty = 3 then
5603: LD_OWVAR 67
5607: PUSH
5608: LD_INT 3
5610: EQUAL
5611: IFFALSE 5694
// begin if rnd > 0 and rnd < 71 then
5613: LD_VAR 0 1
5617: PUSH
5618: LD_INT 0
5620: GREATER
5621: PUSH
5622: LD_VAR 0 1
5626: PUSH
5627: LD_INT 71
5629: LESS
5630: AND
5631: IFFALSE 5640
// BuildRussianBase ( 3 ) ;
5633: LD_INT 3
5635: PPUSH
5636: CALL 8910 0 1
// if rnd > 70 and rnd < 81 then
5640: LD_VAR 0 1
5644: PUSH
5645: LD_INT 70
5647: GREATER
5648: PUSH
5649: LD_VAR 0 1
5653: PUSH
5654: LD_INT 81
5656: LESS
5657: AND
5658: IFFALSE 5667
// BuildRussianBase ( 2 ) ;
5660: LD_INT 2
5662: PPUSH
5663: CALL 8910 0 1
// if rnd > 80 and rnd < 101 then
5667: LD_VAR 0 1
5671: PUSH
5672: LD_INT 80
5674: GREATER
5675: PUSH
5676: LD_VAR 0 1
5680: PUSH
5681: LD_INT 101
5683: LESS
5684: AND
5685: IFFALSE 5694
// BuildRussianBase ( 1 ) ;
5687: LD_INT 1
5689: PPUSH
5690: CALL 8910 0 1
// end ; end ;
5694: PPOPN 1
5696: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5697: LD_INT 54
5699: PPUSH
5700: LD_INT 1
5702: PPUSH
5703: CALL_OW 321
5707: PUSH
5708: LD_INT 2
5710: EQUAL
5711: PUSH
5712: LD_INT 21
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 321
5722: PUSH
5723: LD_INT 2
5725: EQUAL
5726: OR
5727: PUSH
5728: LD_INT 22
5730: PPUSH
5731: LD_INT 1
5733: PPUSH
5734: CALL_OW 321
5738: PUSH
5739: LD_INT 2
5741: EQUAL
5742: OR
5743: IFFALSE 6044
5745: GO 5747
5747: DISABLE
5748: LD_INT 0
5750: PPUSH
5751: PPUSH
// begin if IsOk ( DeltaDoctor ) then
5752: LD_EXP 17
5756: PPUSH
5757: CALL_OW 302
5761: IFFALSE 5775
// tmp := DeltaDoctor else
5763: LD_ADDR_VAR 0 2
5767: PUSH
5768: LD_EXP 17
5772: ST_TO_ADDR
5773: GO 5785
// tmp := Denis ;
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_EXP 12
5784: ST_TO_ADDR
// if tmp then
5785: LD_VAR 0 2
5789: IFFALSE 5883
// begin DialogueOn ;
5791: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5795: LD_EXP 1
5799: PPUSH
5800: LD_STRING D6-JMM-1
5802: PPUSH
5803: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5807: LD_EXP 12
5811: PPUSH
5812: LD_STRING D6-Sci1-1
5814: PPUSH
5815: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5819: LD_EXP 1
5823: PPUSH
5824: LD_STRING D6-JMM-2
5826: PPUSH
5827: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5831: LD_EXP 12
5835: PPUSH
5836: LD_STRING D6-Sci1-2
5838: PPUSH
5839: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5843: LD_EXP 1
5847: PPUSH
5848: LD_STRING D6-JMM-3
5850: PPUSH
5851: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5855: LD_EXP 12
5859: PPUSH
5860: LD_STRING D6-Sci1-3
5862: PPUSH
5863: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5867: LD_EXP 1
5871: PPUSH
5872: LD_STRING D6-JMM-4
5874: PPUSH
5875: CALL_OW 88
// DialogueOff ;
5879: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
5883: LD_INT 1050
5885: PPUSH
5886: CALL_OW 67
// if arabianTrait = 0 then
5890: LD_EXP 49
5894: PUSH
5895: LD_INT 0
5897: EQUAL
5898: IFFALSE 5956
// begin DialogueOn ;
5900: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
5904: LD_EXP 27
5908: PPUSH
5909: LD_STRING D5-Ar1-1
5911: PPUSH
5912: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
5916: LD_EXP 26
5920: PPUSH
5921: LD_STRING D5-Diet-1
5923: PPUSH
5924: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
5928: LD_EXP 27
5932: PPUSH
5933: LD_STRING D5-Ar1-2
5935: PPUSH
5936: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
5940: LD_EXP 26
5944: PPUSH
5945: LD_STRING D5-Diet-2
5947: PPUSH
5948: CALL_OW 88
// DialogueOff ;
5952: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5956: LD_INT 2100
5958: PUSH
5959: LD_INT 3150
5961: PUSH
5962: LD_INT 4200
5964: PUSH
5965: LD_INT 5250
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: PUSH
5974: LD_INT 1
5976: PPUSH
5977: LD_INT 4
5979: PPUSH
5980: CALL_OW 12
5984: ARRAY
5985: PPUSH
5986: CALL_OW 67
// if arabianTrait = 0 then
5990: LD_EXP 49
5994: PUSH
5995: LD_INT 0
5997: EQUAL
5998: IFFALSE 6044
// begin arabianTrait = 1 ;
6000: LD_ADDR_EXP 49
6004: PUSH
6005: LD_INT 1
6007: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6008: LD_INT 2
6010: PPUSH
6011: LD_INT 3
6013: PPUSH
6014: LD_INT 1
6016: PPUSH
6017: LD_INT 1
6019: PPUSH
6020: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6024: LD_INT 2
6026: PPUSH
6027: LD_INT 6
6029: PPUSH
6030: LD_INT 1
6032: PPUSH
6033: LD_INT 1
6035: PPUSH
6036: CALL_OW 80
// PrepareArabianTrait ;
6040: CALL 6047 0 0
// end ; end ;
6044: PPOPN 2
6046: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6047: LD_INT 0
6049: PPUSH
6050: PPUSH
6051: PPUSH
6052: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6053: LD_ADDR_VAR 0 2
6057: PUSH
6058: LD_INT 22
6060: PUSH
6061: LD_INT 2
6063: PUSH
6064: EMPTY
6065: LIST
6066: LIST
6067: PUSH
6068: LD_INT 25
6070: PUSH
6071: LD_INT 4
6073: PUSH
6074: EMPTY
6075: LIST
6076: LIST
6077: PUSH
6078: EMPTY
6079: LIST
6080: LIST
6081: PPUSH
6082: CALL_OW 69
6086: PUSH
6087: FOR_IN
6088: IFFALSE 6101
// ComExitBuilding ( i ) ;
6090: LD_VAR 0 2
6094: PPUSH
6095: CALL_OW 122
6099: GO 6087
6101: POP
6102: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6103: LD_ADDR_VAR 0 2
6107: PUSH
6108: LD_INT 22
6110: PUSH
6111: LD_INT 2
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: PUSH
6118: LD_INT 25
6120: PUSH
6121: LD_INT 3
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PPUSH
6132: CALL_OW 69
6136: PUSH
6137: FOR_IN
6138: IFFALSE 6151
// ComExitVehicle ( i ) ;
6140: LD_VAR 0 2
6144: PPUSH
6145: CALL_OW 121
6149: GO 6137
6151: POP
6152: POP
// wait ( 0 0$3 ) ;
6153: LD_INT 105
6155: PPUSH
6156: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6160: LD_INT 76
6162: PPUSH
6163: LD_INT 19
6165: PPUSH
6166: CALL_OW 84
// DialogueOn ;
6170: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6174: LD_INT 22
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 26
6186: PUSH
6187: LD_INT 1
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: EMPTY
6195: LIST
6196: LIST
6197: PPUSH
6198: CALL_OW 69
6202: PPUSH
6203: LD_STRING D8-Sol1-1
6205: PPUSH
6206: LD_STRING D8-Sol1-1
6208: PPUSH
6209: CALL 8241 0 3
// if IsOK ( DeltaDoctor ) then
6213: LD_EXP 17
6217: PPUSH
6218: CALL_OW 302
6222: IFFALSE 6238
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6224: LD_EXP 17
6228: PPUSH
6229: LD_STRING D8-Sci1-1
6231: PPUSH
6232: CALL_OW 88
6236: GO 6328
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 26
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 2
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: EMPTY
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: LIST
6307: PUSH
6308: EMPTY
6309: LIST
6310: LIST
6311: LIST
6312: PPUSH
6313: CALL_OW 69
6317: PPUSH
6318: LD_STRING D8-Sol1-1
6320: PPUSH
6321: LD_STRING D8-Sol1-1
6323: PPUSH
6324: CALL 8241 0 3
// Say ( JMM , D8-JMM-1 ) ;
6328: LD_EXP 1
6332: PPUSH
6333: LD_STRING D8-JMM-1
6335: PPUSH
6336: CALL_OW 88
// DialogueOff ;
6340: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
6344: LD_INT 2
6346: PPUSH
6347: LD_INT 2
6349: PPUSH
6350: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
6354: LD_INT 1
6356: PPUSH
6357: LD_INT 2
6359: PPUSH
6360: LD_INT 2
6362: PPUSH
6363: LD_INT 1
6365: PPUSH
6366: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6370: LD_INT 3
6372: PPUSH
6373: LD_INT 2
6375: PPUSH
6376: LD_INT 1
6378: PPUSH
6379: LD_INT 1
6381: PPUSH
6382: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
6386: LD_ADDR_VAR 0 2
6390: PUSH
6391: LD_INT 22
6393: PUSH
6394: LD_INT 2
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 21
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 69
6419: PUSH
6420: FOR_IN
6421: IFFALSE 6561
// begin ComExitBuilding ( i ) ;
6423: LD_VAR 0 2
6427: PPUSH
6428: CALL_OW 122
// wait ( 0 0$1 ) ;
6432: LD_INT 35
6434: PPUSH
6435: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
6439: LD_VAR 0 2
6443: PPUSH
6444: LD_INT 77
6446: PPUSH
6447: LD_INT 10
6449: PPUSH
6450: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
6454: LD_VAR 0 2
6458: PPUSH
6459: LD_INT 82
6461: PPUSH
6462: LD_INT 5
6464: PPUSH
6465: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
6469: LD_VAR 0 2
6473: PPUSH
6474: LD_INT 95
6476: PPUSH
6477: LD_INT 12
6479: PPUSH
6480: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
6484: LD_VAR 0 2
6488: PPUSH
6489: LD_INT 102
6491: PPUSH
6492: LD_INT 11
6494: PPUSH
6495: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_INT 116
6506: PPUSH
6507: LD_INT 15
6509: PPUSH
6510: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
6514: LD_VAR 0 2
6518: PPUSH
6519: LD_INT 140
6521: PPUSH
6522: LD_INT 25
6524: PPUSH
6525: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
6529: LD_VAR 0 2
6533: PPUSH
6534: LD_INT 160
6536: PPUSH
6537: LD_INT 56
6539: PPUSH
6540: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_INT 189
6551: PPUSH
6552: LD_INT 79
6554: PPUSH
6555: CALL_OW 174
// end ;
6559: GO 6420
6561: POP
6562: POP
// arabianAttackersAI = 1 ;
6563: LD_ADDR_EXP 46
6567: PUSH
6568: LD_INT 1
6570: ST_TO_ADDR
// wait ( 0 0$10 ) ;
6571: LD_INT 350
6573: PPUSH
6574: CALL_OW 67
// if IsOk ( Gary ) then
6578: LD_EXP 10
6582: PPUSH
6583: CALL_OW 302
6587: IFFALSE 6601
// Say ( Gary , D8a-Gary-1 ) ;
6589: LD_EXP 10
6593: PPUSH
6594: LD_STRING D8a-Gary-1
6596: PPUSH
6597: CALL_OW 88
// wait ( 0 0$5 ) ;
6601: LD_INT 175
6603: PPUSH
6604: CALL_OW 67
// if IsOK ( Khatam ) then
6608: LD_EXP 14
6612: PPUSH
6613: CALL_OW 302
6617: IFFALSE 7131
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
6619: LD_ADDR_VAR 0 3
6623: PUSH
6624: LD_INT 22
6626: PUSH
6627: LD_INT 1
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 25
6639: PUSH
6640: LD_INT 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 25
6649: PUSH
6650: LD_INT 2
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 25
6659: PUSH
6660: LD_INT 3
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: PUSH
6667: LD_INT 25
6669: PUSH
6670: LD_INT 4
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: LIST
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PPUSH
6688: CALL_OW 69
6692: PUSH
6693: LD_EXP 1
6697: PUSH
6698: LD_EXP 2
6702: PUSH
6703: LD_EXP 3
6707: PUSH
6708: LD_EXP 4
6712: PUSH
6713: LD_EXP 5
6717: PUSH
6718: LD_EXP 6
6722: PUSH
6723: LD_EXP 7
6727: PUSH
6728: LD_EXP 8
6732: PUSH
6733: LD_EXP 9
6737: PUSH
6738: LD_EXP 10
6742: PUSH
6743: LD_EXP 11
6747: PUSH
6748: LD_EXP 12
6752: PUSH
6753: LD_EXP 13
6757: PUSH
6758: LD_EXP 14
6762: PUSH
6763: LD_EXP 15
6767: PUSH
6768: LD_EXP 16
6772: PUSH
6773: LD_EXP 17
6777: PUSH
6778: LD_EXP 19
6782: PUSH
6783: LD_EXP 24
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: LIST
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: DIFF
6809: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6810: LD_EXP 14
6814: PPUSH
6815: LD_INT 8
6817: PPUSH
6818: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6822: LD_EXP 14
6826: PPUSH
6827: CALL_OW 122
// wait ( 0 0$1 ) ;
6831: LD_INT 35
6833: PPUSH
6834: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6838: LD_EXP 14
6842: PPUSH
6843: CALL_OW 121
// wait ( 0 0$1 ) ;
6847: LD_INT 35
6849: PPUSH
6850: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6854: LD_EXP 14
6858: PPUSH
6859: LD_INT 7
6861: PPUSH
6862: CALL_OW 113
// if not tmp then
6866: LD_VAR 0 3
6870: NOT
6871: IFFALSE 6875
// exit ;
6873: GO 7131
// DialogueOn ;
6875: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
6879: LD_VAR 0 3
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: CALL_OW 258
6892: PUSH
6893: LD_INT 1
6895: EQUAL
6896: IFFALSE 6916
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
6898: LD_VAR 0 3
6902: PUSH
6903: LD_INT 1
6905: ARRAY
6906: PPUSH
6907: LD_STRING D8b-Sol1-1
6909: PPUSH
6910: CALL_OW 88
6914: GO 6932
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
6916: LD_VAR 0 3
6920: PUSH
6921: LD_INT 1
6923: ARRAY
6924: PPUSH
6925: LD_STRING D8b-FSol1-1
6927: PPUSH
6928: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
6932: LD_EXP 14
6936: PPUSH
6937: LD_STRING D8b-Khat-1
6939: PPUSH
6940: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6944: LD_VAR 0 3
6948: PUSH
6949: LD_INT 1
6951: ARRAY
6952: PPUSH
6953: CALL_OW 258
6957: PUSH
6958: LD_INT 1
6960: EQUAL
6961: IFFALSE 6981
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
6963: LD_VAR 0 3
6967: PUSH
6968: LD_INT 1
6970: ARRAY
6971: PPUSH
6972: LD_STRING D8b-Sol1-2
6974: PPUSH
6975: CALL_OW 88
6979: GO 6997
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
6981: LD_VAR 0 3
6985: PUSH
6986: LD_INT 1
6988: ARRAY
6989: PPUSH
6990: LD_STRING D8b-FSol1-2
6992: PPUSH
6993: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
6997: LD_EXP 14
7001: PPUSH
7002: LD_STRING D8b-Khat-2
7004: PPUSH
7005: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
7009: LD_VAR 0 3
7013: PUSH
7014: LD_INT 1
7016: ARRAY
7017: PPUSH
7018: CALL_OW 258
7022: PUSH
7023: LD_INT 1
7025: EQUAL
7026: IFFALSE 7046
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
7028: LD_VAR 0 3
7032: PUSH
7033: LD_INT 1
7035: ARRAY
7036: PPUSH
7037: LD_STRING D8b-Sol1-3
7039: PPUSH
7040: CALL_OW 88
7044: GO 7062
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
7046: LD_VAR 0 3
7050: PUSH
7051: LD_INT 1
7053: ARRAY
7054: PPUSH
7055: LD_STRING D8b-FSol1-3
7057: PPUSH
7058: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
7062: LD_EXP 14
7066: PPUSH
7067: LD_STRING D8b-Khat-3
7069: PPUSH
7070: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
7074: LD_VAR 0 3
7078: PUSH
7079: LD_INT 1
7081: ARRAY
7082: PPUSH
7083: CALL_OW 258
7087: PUSH
7088: LD_INT 1
7090: EQUAL
7091: IFFALSE 7111
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
7093: LD_VAR 0 3
7097: PUSH
7098: LD_INT 1
7100: ARRAY
7101: PPUSH
7102: LD_STRING D8b-Sol1-4
7104: PPUSH
7105: CALL_OW 88
7109: GO 7127
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
7111: LD_VAR 0 3
7115: PUSH
7116: LD_INT 1
7118: ARRAY
7119: PPUSH
7120: LD_STRING D8b-FSol1-4
7122: PPUSH
7123: CALL_OW 88
// DialogueOff ;
7127: CALL_OW 7
// end ; end ;
7131: LD_VAR 0 1
7135: RET
// every 0 0$1 do var i ;
7136: GO 7138
7138: DISABLE
7139: LD_INT 0
7141: PPUSH
// begin enable ;
7142: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
7143: LD_ADDR_VAR 0 1
7147: PUSH
7148: LD_INT 7
7150: PPUSH
7151: LD_INT 22
7153: PUSH
7154: LD_INT 2
7156: PUSH
7157: EMPTY
7158: LIST
7159: LIST
7160: PPUSH
7161: CALL_OW 70
7165: PUSH
7166: FOR_IN
7167: IFFALSE 7235
// begin if GetClass ( i ) = 4 then
7169: LD_VAR 0 1
7173: PPUSH
7174: CALL_OW 257
7178: PUSH
7179: LD_INT 4
7181: EQUAL
7182: IFFALSE 7194
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
7184: LD_INT 1
7186: PPUSH
7187: LD_STRING 10_ScientistsEscape_1
7189: PPUSH
7190: CALL_OW 39
// if i = Dietrich then
7194: LD_VAR 0 1
7198: PUSH
7199: LD_EXP 26
7203: EQUAL
7204: IFFALSE 7216
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7206: LD_INT 1
7208: PPUSH
7209: LD_STRING 10_GensherEscape_1
7211: PPUSH
7212: CALL_OW 39
// arabianEscape = 1 ;
7216: LD_ADDR_EXP 47
7220: PUSH
7221: LD_INT 1
7223: ST_TO_ADDR
// RemoveUnit ( i ) ;
7224: LD_VAR 0 1
7228: PPUSH
7229: CALL_OW 64
// end ;
7233: GO 7166
7235: POP
7236: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
7237: LD_EXP 14
7241: PPUSH
7242: LD_INT 7
7244: PPUSH
7245: CALL_OW 308
7249: IFFALSE 7268
// begin KhatamStatus = 1 ;
7251: LD_ADDR_EXP 50
7255: PUSH
7256: LD_INT 1
7258: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
7259: LD_EXP 14
7263: PPUSH
7264: CALL_OW 64
// end ; end ;
7268: PPOPN 1
7270: END
// every 0 0$1 trigger IsDead ( Khatam ) do
7271: LD_EXP 14
7275: PPUSH
7276: CALL_OW 301
7280: IFFALSE 7293
7282: GO 7284
7284: DISABLE
// KhatamStatus = 0 ;
7285: LD_ADDR_EXP 50
7289: PUSH
7290: LD_INT 0
7292: ST_TO_ADDR
7293: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
7294: LD_INT 22
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 21
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PPUSH
7318: CALL_OW 69
7322: PUSH
7323: LD_INT 0
7325: EQUAL
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_INT 4
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: LD_INT 21
7339: PUSH
7340: LD_INT 1
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PPUSH
7351: CALL_OW 69
7355: PUSH
7356: LD_INT 0
7358: EQUAL
7359: AND
7360: IFFALSE 7373
7362: GO 7364
7364: DISABLE
// arabianDefeated = 1 ;
7365: LD_ADDR_EXP 48
7369: PUSH
7370: LD_INT 1
7372: ST_TO_ADDR
7373: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
7374: LD_INT 54
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 321
7384: PUSH
7385: LD_INT 2
7387: EQUAL
7388: PUSH
7389: LD_INT 55
7391: PPUSH
7392: LD_INT 1
7394: PPUSH
7395: CALL_OW 321
7399: PUSH
7400: LD_INT 2
7402: EQUAL
7403: AND
7404: PUSH
7405: LD_INT 21
7407: PPUSH
7408: LD_INT 1
7410: PPUSH
7411: CALL_OW 321
7415: PUSH
7416: LD_INT 2
7418: EQUAL
7419: AND
7420: PUSH
7421: LD_INT 22
7423: PPUSH
7424: LD_INT 1
7426: PPUSH
7427: CALL_OW 321
7431: PUSH
7432: LD_INT 2
7434: EQUAL
7435: AND
7436: PUSH
7437: LD_INT 12
7439: PPUSH
7440: LD_INT 1
7442: PPUSH
7443: CALL_OW 321
7447: PUSH
7448: LD_INT 2
7450: EQUAL
7451: AND
7452: PUSH
7453: LD_INT 32
7455: PPUSH
7456: LD_INT 1
7458: PPUSH
7459: CALL_OW 321
7463: PUSH
7464: LD_INT 2
7466: EQUAL
7467: AND
7468: PUSH
7469: LD_EXP 57
7473: PUSH
7474: LD_INT 0
7476: EQUAL
7477: AND
7478: PUSH
7479: LD_EXP 49
7483: PUSH
7484: LD_INT 0
7486: EQUAL
7487: AND
7488: PUSH
7489: LD_OWVAR 1
7493: PUSH
7494: LD_INT 31500
7496: GREATEREQUAL
7497: AND
7498: IFFALSE 7515
7500: GO 7502
7502: DISABLE
// begin arabianTrait = 1 ;
7503: LD_ADDR_EXP 49
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// PrepareArabianTrait ;
7511: CALL 6047 0 0
// end ;
7515: END
// every 8 8$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
7516: LD_EXP 29
7520: PUSH
7521: LD_STRING 02_mikhailStatus_1
7523: PPUSH
7524: LD_INT 0
7526: PPUSH
7527: CALL_OW 30
7531: PUSH
7532: LD_INT 1
7534: EQUAL
7535: AND
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 5
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PPUSH
7547: CALL_OW 69
7551: PUSH
7552: LD_INT 0
7554: EQUAL
7555: AND
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 2
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PPUSH
7567: CALL_OW 69
7571: PUSH
7572: LD_INT 0
7574: EQUAL
7575: PUSH
7576: LD_EXP 49
7580: PUSH
7581: LD_INT 0
7583: EQUAL
7584: OR
7585: AND
7586: IFFALSE 7595
7588: GO 7590
7590: DISABLE
// PrepareCornell ;
7591: CALL 2360 0 0
7595: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
7596: LD_INT 22
7598: PUSH
7599: LD_INT 1
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PPUSH
7606: CALL_OW 69
7610: PPUSH
7611: LD_EXP 19
7615: PPUSH
7616: CALL_OW 74
7620: PPUSH
7621: LD_EXP 19
7625: PPUSH
7626: CALL_OW 296
7630: PUSH
7631: LD_INT 9
7633: LESS
7634: IFFALSE 7844
7636: GO 7638
7638: DISABLE
// begin InGameOn ;
7639: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
7643: LD_EXP 19
7647: PPUSH
7648: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
7652: LD_EXP 19
7656: PPUSH
7657: LD_STRING D7-Corn-1
7659: PPUSH
7660: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
7664: LD_INT 22
7666: PUSH
7667: LD_INT 1
7669: PUSH
7670: EMPTY
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 2
7676: PUSH
7677: LD_INT 25
7679: PUSH
7680: LD_INT 1
7682: PUSH
7683: EMPTY
7684: LIST
7685: LIST
7686: PUSH
7687: LD_INT 25
7689: PUSH
7690: LD_INT 2
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 25
7699: PUSH
7700: LD_INT 3
7702: PUSH
7703: EMPTY
7704: LIST
7705: LIST
7706: PUSH
7707: LD_INT 25
7709: PUSH
7710: LD_INT 4
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: LIST
7721: LIST
7722: LIST
7723: PUSH
7724: EMPTY
7725: LIST
7726: LIST
7727: PPUSH
7728: CALL_OW 69
7732: PPUSH
7733: LD_STRING D7-Sol1-1
7735: PPUSH
7736: LD_STRING D7-FSol1-1
7738: PPUSH
7739: CALL 8241 0 3
// CenterNowOnUnits ( Cornell ) ;
7743: LD_EXP 19
7747: PPUSH
7748: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
7752: LD_EXP 19
7756: PPUSH
7757: LD_STRING D7-Corn-2
7759: PPUSH
7760: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7764: LD_EXP 1
7768: PPUSH
7769: LD_STRING D7-JMM-2
7771: PPUSH
7772: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
7776: LD_EXP 19
7780: PPUSH
7781: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
7785: LD_EXP 19
7789: PPUSH
7790: LD_STRING D7-Corn-3
7792: PPUSH
7793: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
7797: LD_EXP 19
7801: PPUSH
7802: LD_INT 250
7804: PPUSH
7805: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
7809: LD_EXP 19
7813: PPUSH
7814: LD_INT 1
7816: PPUSH
7817: CALL_OW 235
// wait ( 0 0$1 ) ;
7821: LD_INT 35
7823: PPUSH
7824: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
7828: LD_EXP 1
7832: PPUSH
7833: LD_STRING D7-JMM-3
7835: PPUSH
7836: CALL_OW 88
// InGameOff ;
7840: CALL_OW 9
// end ;
7844: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
7845: LD_EXP 19
7849: PPUSH
7850: CALL_OW 255
7854: PUSH
7855: LD_INT 1
7857: EQUAL
7858: PUSH
7859: LD_EXP 19
7863: PPUSH
7864: CALL_OW 256
7868: PUSH
7869: LD_INT 251
7871: GREATER
7872: AND
7873: IFFALSE 8066
7875: GO 7877
7877: DISABLE
// begin DialogueOn ;
7878: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7882: LD_EXP 1
7886: PPUSH
7887: LD_STRING D7a-JMM-1
7889: PPUSH
7890: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7894: LD_EXP 19
7898: PPUSH
7899: LD_STRING D7a-Corn-1
7901: PPUSH
7902: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7906: LD_EXP 1
7910: PPUSH
7911: LD_STRING D7a-JMM-2
7913: PPUSH
7914: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7918: LD_EXP 19
7922: PPUSH
7923: LD_STRING D7a-Corn-2
7925: PPUSH
7926: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7930: LD_EXP 1
7934: PPUSH
7935: LD_STRING D7a-JMM-3
7937: PPUSH
7938: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7942: LD_EXP 19
7946: PPUSH
7947: LD_STRING D7a-Corn-3
7949: PPUSH
7950: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D7a-JMM-4
7961: PPUSH
7962: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7966: LD_EXP 19
7970: PPUSH
7971: LD_STRING D7a-Corn-4
7973: PPUSH
7974: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7978: LD_EXP 1
7982: PPUSH
7983: LD_STRING D7a-JMM-5
7985: PPUSH
7986: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7990: LD_EXP 19
7994: PPUSH
7995: LD_STRING D7a-Corn-5
7997: PPUSH
7998: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
8002: LD_EXP 1
8006: PPUSH
8007: LD_STRING D7a-JMM-6
8009: PPUSH
8010: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
8014: LD_EXP 19
8018: PPUSH
8019: LD_STRING D7a-Corn-6
8021: PPUSH
8022: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
8026: LD_EXP 1
8030: PPUSH
8031: LD_STRING D7a-JMM-7
8033: PPUSH
8034: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
8038: LD_EXP 19
8042: PPUSH
8043: LD_STRING D7a-Corn-7
8045: PPUSH
8046: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D7a-JMM-8
8057: PPUSH
8058: CALL_OW 88
// DialogueOff ;
8062: CALL_OW 7
// end ;
8066: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
8067: LD_EXP 56
8071: PUSH
8072: LD_EXP 1
8076: PPUSH
8077: CALL_OW 302
8081: PUSH
8082: LD_EXP 5
8086: PPUSH
8087: CALL_OW 302
8091: OR
8092: AND
8093: IFFALSE 8183
8095: GO 8097
8097: DISABLE
// begin Wait ( 0 0$2 ) ;
8098: LD_INT 70
8100: PPUSH
8101: CALL_OW 67
// DialogueOn ;
8105: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
8109: LD_EXP 56
8113: PUSH
8114: LD_INT 1
8116: ARRAY
8117: PPUSH
8118: LD_EXP 56
8122: PUSH
8123: LD_INT 2
8125: ARRAY
8126: PPUSH
8127: CALL_OW 86
// if IsOk ( Cyrus ) then
8131: LD_EXP 5
8135: PPUSH
8136: CALL_OW 302
8140: IFFALSE 8156
// Say ( Cyrus , D10-Cyrus-1 ) else
8142: LD_EXP 5
8146: PPUSH
8147: LD_STRING D10-Cyrus-1
8149: PPUSH
8150: CALL_OW 88
8154: GO 8179
// if IsOk ( JMM ) then
8156: LD_EXP 1
8160: PPUSH
8161: CALL_OW 302
8165: IFFALSE 8179
// Say ( JMM , D10-JMM-1 ) ;
8167: LD_EXP 1
8171: PPUSH
8172: LD_STRING D10-JMM-1
8174: PPUSH
8175: CALL_OW 88
// DialogueOff ;
8179: CALL_OW 7
// end ; end_of_file
8183: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8184: LD_INT 0
8186: PPUSH
8187: PPUSH
// if exist_mode then
8188: LD_VAR 0 2
8192: IFFALSE 8211
// unit := CreateCharacter ( ident ) else
8194: LD_ADDR_VAR 0 4
8198: PUSH
8199: LD_VAR 0 1
8203: PPUSH
8204: CALL_OW 34
8208: ST_TO_ADDR
8209: GO 8226
// unit := NewCharacter ( ident ) ;
8211: LD_ADDR_VAR 0 4
8215: PUSH
8216: LD_VAR 0 1
8220: PPUSH
8221: CALL_OW 25
8225: ST_TO_ADDR
// result := unit ;
8226: LD_ADDR_VAR 0 3
8230: PUSH
8231: LD_VAR 0 4
8235: ST_TO_ADDR
// end ;
8236: LD_VAR 0 3
8240: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
8246: LD_ADDR_VAR 0 1
8250: PUSH
8251: LD_VAR 0 1
8255: PUSH
8256: LD_EXP 1
8260: PUSH
8261: LD_EXP 2
8265: PUSH
8266: LD_EXP 3
8270: PUSH
8271: LD_EXP 4
8275: PUSH
8276: LD_EXP 5
8280: PUSH
8281: LD_EXP 6
8285: PUSH
8286: LD_EXP 7
8290: PUSH
8291: LD_EXP 8
8295: PUSH
8296: LD_EXP 9
8300: PUSH
8301: LD_EXP 10
8305: PUSH
8306: LD_EXP 11
8310: PUSH
8311: LD_EXP 12
8315: PUSH
8316: LD_EXP 13
8320: PUSH
8321: LD_EXP 14
8325: PUSH
8326: LD_EXP 15
8330: PUSH
8331: LD_EXP 16
8335: PUSH
8336: LD_EXP 17
8340: PUSH
8341: LD_EXP 18
8345: PUSH
8346: LD_EXP 19
8350: PUSH
8351: LD_EXP 24
8355: PUSH
8356: EMPTY
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: LIST
8375: LIST
8376: LIST
8377: DIFF
8378: ST_TO_ADDR
// if not characters then
8379: LD_VAR 0 1
8383: NOT
8384: IFFALSE 8388
// exit ;
8386: GO 8534
// rnd = rand ( 1 , characters ) ;
8388: LD_ADDR_VAR 0 6
8392: PUSH
8393: LD_INT 1
8395: PPUSH
8396: LD_VAR 0 1
8400: PPUSH
8401: CALL_OW 12
8405: ST_TO_ADDR
// for i = 1 to characters do
8406: LD_ADDR_VAR 0 5
8410: PUSH
8411: DOUBLE
8412: LD_INT 1
8414: DEC
8415: ST_TO_ADDR
8416: LD_VAR 0 1
8420: PUSH
8421: FOR_TO
8422: IFFALSE 8532
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
8424: LD_VAR 0 5
8428: PUSH
8429: LD_VAR 0 6
8433: EQUAL
8434: PUSH
8435: LD_VAR 0 1
8439: PUSH
8440: LD_VAR 0 5
8444: ARRAY
8445: PPUSH
8446: CALL_OW 258
8450: PUSH
8451: LD_INT 1
8453: EQUAL
8454: AND
8455: IFFALSE 8477
// Say ( characters [ i ] , dialogMID ) ;
8457: LD_VAR 0 1
8461: PUSH
8462: LD_VAR 0 5
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 2
8472: PPUSH
8473: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
8477: LD_VAR 0 5
8481: PUSH
8482: LD_VAR 0 6
8486: EQUAL
8487: PUSH
8488: LD_VAR 0 1
8492: PUSH
8493: LD_VAR 0 5
8497: ARRAY
8498: PPUSH
8499: CALL_OW 258
8503: PUSH
8504: LD_INT 2
8506: EQUAL
8507: AND
8508: IFFALSE 8530
// Say ( characters [ i ] , dialogFID ) ;
8510: LD_VAR 0 1
8514: PUSH
8515: LD_VAR 0 5
8519: ARRAY
8520: PPUSH
8521: LD_VAR 0 3
8525: PPUSH
8526: CALL_OW 88
// end ;
8530: GO 8421
8532: POP
8533: POP
// end ;
8534: LD_VAR 0 4
8538: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8539: LD_INT 0
8541: PPUSH
8542: PPUSH
// for i in charactersList do
8543: LD_ADDR_VAR 0 4
8547: PUSH
8548: LD_VAR 0 1
8552: PUSH
8553: FOR_IN
8554: IFFALSE 8583
// begin if IsOk ( i ) then
8556: LD_VAR 0 4
8560: PPUSH
8561: CALL_OW 302
8565: IFFALSE 8581
// SaveCharacters ( i , ident ) ;
8567: LD_VAR 0 4
8571: PPUSH
8572: LD_VAR 0 2
8576: PPUSH
8577: CALL_OW 38
// end ;
8581: GO 8553
8583: POP
8584: POP
// end ;
8585: LD_VAR 0 3
8589: RET
// export function PrepareDifficulty ; begin
8590: LD_INT 0
8592: PPUSH
// if difficulty = 1 then
8593: LD_OWVAR 67
8597: PUSH
8598: LD_INT 1
8600: EQUAL
8601: IFFALSE 8645
// begin RuSolMinLevel = 4 ;
8603: LD_ADDR_EXP 36
8607: PUSH
8608: LD_INT 4
8610: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
8611: LD_ADDR_EXP 37
8615: PUSH
8616: LD_INT 7
8618: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8619: LD_INT 51
8621: PPUSH
8622: LD_INT 6
8624: PPUSH
8625: LD_INT 2
8627: PPUSH
8628: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8632: LD_INT 51
8634: PPUSH
8635: LD_INT 5
8637: PPUSH
8638: LD_INT 2
8640: PPUSH
8641: CALL_OW 322
// end ; if difficulty = 2 then
8645: LD_OWVAR 67
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: IFFALSE 8749
// begin RuSolMinLevel = 5 ;
8655: LD_ADDR_EXP 36
8659: PUSH
8660: LD_INT 5
8662: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
8663: LD_ADDR_EXP 37
8667: PUSH
8668: LD_INT 7
8670: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8671: LD_INT 51
8673: PPUSH
8674: LD_INT 6
8676: PPUSH
8677: LD_INT 2
8679: PPUSH
8680: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
8684: LD_INT 57
8686: PPUSH
8687: LD_INT 6
8689: PPUSH
8690: LD_INT 2
8692: PPUSH
8693: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8697: LD_INT 63
8699: PPUSH
8700: LD_INT 6
8702: PPUSH
8703: LD_INT 2
8705: PPUSH
8706: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8710: LD_INT 51
8712: PPUSH
8713: LD_INT 5
8715: PPUSH
8716: LD_INT 2
8718: PPUSH
8719: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
8723: LD_INT 5
8725: PPUSH
8726: LD_INT 2
8728: PPUSH
8729: LD_INT 2
8731: PPUSH
8732: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
8736: LD_INT 5
8738: PPUSH
8739: LD_INT 5
8741: PPUSH
8742: LD_INT 2
8744: PPUSH
8745: CALL_OW 322
// end ; if difficulty = 3 then
8749: LD_OWVAR 67
8753: PUSH
8754: LD_INT 3
8756: EQUAL
8757: IFFALSE 8905
// begin RuSolMinLevel = 6 ;
8759: LD_ADDR_EXP 36
8763: PUSH
8764: LD_INT 6
8766: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
8767: LD_ADDR_EXP 37
8771: PUSH
8772: LD_INT 8
8774: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8775: LD_INT 51
8777: PPUSH
8778: LD_INT 6
8780: PPUSH
8781: LD_INT 2
8783: PPUSH
8784: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
8788: LD_INT 57
8790: PPUSH
8791: LD_INT 6
8793: PPUSH
8794: LD_INT 2
8796: PPUSH
8797: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
8801: LD_INT 52
8803: PPUSH
8804: LD_INT 6
8806: PPUSH
8807: LD_INT 2
8809: PPUSH
8810: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
8814: LD_INT 58
8816: PPUSH
8817: LD_INT 6
8819: PPUSH
8820: LD_INT 2
8822: PPUSH
8823: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8827: LD_INT 63
8829: PPUSH
8830: LD_INT 6
8832: PPUSH
8833: LD_INT 2
8835: PPUSH
8836: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
8840: LD_INT 64
8842: PPUSH
8843: LD_INT 6
8845: PPUSH
8846: LD_INT 2
8848: PPUSH
8849: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8853: LD_INT 51
8855: PPUSH
8856: LD_INT 5
8858: PPUSH
8859: LD_INT 2
8861: PPUSH
8862: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
8866: LD_INT 52
8868: PPUSH
8869: LD_INT 5
8871: PPUSH
8872: LD_INT 2
8874: PPUSH
8875: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
8879: LD_INT 66
8881: PPUSH
8882: LD_INT 2
8884: PPUSH
8885: LD_INT 2
8887: PPUSH
8888: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
8892: LD_INT 66
8894: PPUSH
8895: LD_INT 5
8897: PPUSH
8898: LD_INT 2
8900: PPUSH
8901: CALL_OW 322
// end ; end ;
8905: LD_VAR 0 1
8909: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
8910: LD_INT 0
8912: PPUSH
8913: PPUSH
8914: PPUSH
8915: PPUSH
8916: PPUSH
// case position of 1 :
8917: LD_VAR 0 1
8921: PUSH
8922: LD_INT 1
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8941
8930: POP
// area := westConv ; 2 :
8931: LD_ADDR_VAR 0 6
8935: PUSH
8936: LD_INT 20
8938: ST_TO_ADDR
8939: GO 8980
8941: LD_INT 2
8943: DOUBLE
8944: EQUAL
8945: IFTRUE 8949
8947: GO 8960
8949: POP
// area := midConv ; 3 :
8950: LD_ADDR_VAR 0 6
8954: PUSH
8955: LD_INT 21
8957: ST_TO_ADDR
8958: GO 8980
8960: LD_INT 3
8962: DOUBLE
8963: EQUAL
8964: IFTRUE 8968
8966: GO 8979
8968: POP
// area := eastConv ; end ;
8969: LD_ADDR_VAR 0 6
8973: PUSH
8974: LD_INT 22
8976: ST_TO_ADDR
8977: GO 8980
8979: POP
// area := AreaToList ( area , 0 ) ;
8980: LD_ADDR_VAR 0 6
8984: PUSH
8985: LD_VAR 0 6
8989: PPUSH
8990: LD_INT 0
8992: PPUSH
8993: CALL_OW 517
8997: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
8998: LD_ADDR_VAR 0 3
9002: PUSH
9003: DOUBLE
9004: LD_INT 1
9006: DEC
9007: ST_TO_ADDR
9008: LD_VAR 0 6
9012: PUSH
9013: LD_INT 1
9015: ARRAY
9016: PUSH
9017: FOR_TO
9018: IFFALSE 9099
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
9020: LD_VAR 0 6
9024: PUSH
9025: LD_INT 1
9027: ARRAY
9028: PUSH
9029: LD_VAR 0 3
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 6
9039: PUSH
9040: LD_INT 2
9042: ARRAY
9043: PUSH
9044: LD_VAR 0 3
9048: ARRAY
9049: PPUSH
9050: LD_INT 1
9052: PPUSH
9053: LD_INT 1
9055: PPUSH
9056: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
9060: LD_VAR 0 6
9064: PUSH
9065: LD_INT 1
9067: ARRAY
9068: PUSH
9069: LD_VAR 0 3
9073: ARRAY
9074: PPUSH
9075: LD_VAR 0 6
9079: PUSH
9080: LD_INT 2
9082: ARRAY
9083: PUSH
9084: LD_VAR 0 3
9088: ARRAY
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 331
// end ;
9097: GO 9017
9099: POP
9100: POP
// ruPossition = position ;
9101: LD_ADDR_EXP 41
9105: PUSH
9106: LD_VAR 0 1
9110: ST_TO_ADDR
// if position = 1 then
9111: LD_VAR 0 1
9115: PUSH
9116: LD_INT 1
9118: EQUAL
9119: IFFALSE 9867
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9121: LD_ADDR_VAR 0 4
9125: PUSH
9126: LD_INT 22
9128: PUSH
9129: LD_INT 3
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: PUSH
9136: LD_INT 25
9138: PUSH
9139: LD_INT 2
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PPUSH
9150: CALL_OW 69
9154: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
9155: LD_ADDR_VAR 0 5
9159: PUSH
9160: LD_INT 0
9162: PUSH
9163: LD_INT 49
9165: PUSH
9166: LD_INT 74
9168: PUSH
9169: LD_INT 3
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 4
9180: PUSH
9181: LD_INT 73
9183: PUSH
9184: LD_INT 88
9186: PUSH
9187: LD_INT 5
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: PUSH
9196: LD_INT 4
9198: PUSH
9199: LD_INT 56
9201: PUSH
9202: LD_INT 62
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 29
9216: PUSH
9217: LD_INT 43
9219: PUSH
9220: LD_INT 68
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: PUSH
9232: LD_INT 30
9234: PUSH
9235: LD_INT 43
9237: PUSH
9238: LD_INT 79
9240: PUSH
9241: LD_INT 5
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 28
9252: PUSH
9253: LD_INT 60
9255: PUSH
9256: LD_INT 75
9258: PUSH
9259: LD_INT 1
9261: PUSH
9262: EMPTY
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: PUSH
9268: LD_INT 2
9270: PUSH
9271: LD_INT 50
9273: PUSH
9274: LD_INT 87
9276: PUSH
9277: LD_INT 1
9279: PUSH
9280: EMPTY
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: PUSH
9286: LD_INT 28
9288: PUSH
9289: LD_INT 45
9291: PUSH
9292: LD_INT 67
9294: PUSH
9295: LD_INT 2
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: LD_INT 17
9306: PUSH
9307: LD_INT 47
9309: PUSH
9310: LD_INT 84
9312: PUSH
9313: LD_INT 2
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: PUSH
9322: LD_INT 18
9324: PUSH
9325: LD_INT 46
9327: PUSH
9328: LD_INT 87
9330: PUSH
9331: LD_INT 1
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 28
9342: PUSH
9343: LD_INT 41
9345: PUSH
9346: LD_INT 64
9348: PUSH
9349: LD_INT 5
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: LD_INT 32
9360: PUSH
9361: LD_INT 75
9363: PUSH
9364: LD_INT 76
9366: PUSH
9367: LD_INT 5
9369: PUSH
9370: EMPTY
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: PUSH
9376: LD_INT 32
9378: PUSH
9379: LD_INT 77
9381: PUSH
9382: LD_INT 75
9384: PUSH
9385: LD_INT 5
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: PUSH
9394: LD_INT 32
9396: PUSH
9397: LD_INT 69
9399: PUSH
9400: LD_INT 68
9402: PUSH
9403: LD_INT 3
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: PUSH
9412: LD_INT 32
9414: PUSH
9415: LD_INT 59
9417: PUSH
9418: LD_INT 96
9420: PUSH
9421: LD_INT 5
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: PUSH
9430: LD_INT 32
9432: PUSH
9433: LD_INT 56
9435: PUSH
9436: LD_INT 96
9438: PUSH
9439: LD_INT 0
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 32
9450: PUSH
9451: LD_INT 51
9453: PUSH
9454: LD_INT 61
9456: PUSH
9457: LD_INT 3
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: PUSH
9466: LD_INT 32
9468: PUSH
9469: LD_INT 42
9471: PUSH
9472: LD_INT 60
9474: PUSH
9475: LD_INT 3
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: PUSH
9484: LD_INT 32
9486: PUSH
9487: LD_INT 36
9489: PUSH
9490: LD_INT 58
9492: PUSH
9493: LD_INT 3
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: PUSH
9502: LD_INT 32
9504: PUSH
9505: LD_INT 39
9507: PUSH
9508: LD_INT 59
9510: PUSH
9511: LD_INT 3
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: PUSH
9520: LD_INT 32
9522: PUSH
9523: LD_INT 61
9525: PUSH
9526: LD_INT 64
9528: PUSH
9529: LD_INT 3
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 33
9540: PUSH
9541: LD_INT 63
9543: PUSH
9544: LD_INT 90
9546: PUSH
9547: LD_INT 5
9549: PUSH
9550: EMPTY
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 33
9558: PUSH
9559: LD_INT 64
9561: PUSH
9562: LD_INT 88
9564: PUSH
9565: LD_INT 5
9567: PUSH
9568: EMPTY
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 33
9576: PUSH
9577: LD_INT 72
9579: PUSH
9580: LD_INT 82
9582: PUSH
9583: LD_INT 5
9585: PUSH
9586: EMPTY
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: PUSH
9592: LD_INT 6
9594: PUSH
9595: LD_INT 42
9597: PUSH
9598: LD_INT 74
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 6
9612: PUSH
9613: LD_INT 56
9615: PUSH
9616: LD_INT 77
9618: PUSH
9619: LD_INT 2
9621: PUSH
9622: EMPTY
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 21
9630: PUSH
9631: LD_INT 54
9633: PUSH
9634: LD_INT 91
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: LD_INT 16
9648: PUSH
9649: LD_INT 50
9651: PUSH
9652: LD_INT 83
9654: PUSH
9655: LD_INT 3
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: PUSH
9664: LD_INT 24
9666: PUSH
9667: LD_INT 50
9669: PUSH
9670: LD_INT 90
9672: PUSH
9673: LD_INT 0
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: PUSH
9682: EMPTY
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9713: LD_ADDR_VAR 0 3
9717: PUSH
9718: LD_INT 22
9720: PUSH
9721: LD_INT 3
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 3
9730: PUSH
9731: LD_INT 25
9733: PUSH
9734: LD_INT 2
9736: PUSH
9737: EMPTY
9738: LIST
9739: LIST
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PPUSH
9749: CALL_OW 69
9753: PUSH
9754: FOR_IN
9755: IFFALSE 9774
// AddComMoveXY ( i , 53 , 82 ) ;
9757: LD_VAR 0 3
9761: PPUSH
9762: LD_INT 53
9764: PPUSH
9765: LD_INT 82
9767: PPUSH
9768: CALL_OW 171
9772: GO 9754
9774: POP
9775: POP
// for i := 1 to buildingsTab do
9776: LD_ADDR_VAR 0 3
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 5
9790: PUSH
9791: FOR_TO
9792: IFFALSE 9865
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9794: LD_VAR 0 4
9798: PPUSH
9799: LD_VAR 0 5
9803: PUSH
9804: LD_VAR 0 3
9808: ARRAY
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: LD_VAR 0 5
9818: PUSH
9819: LD_VAR 0 3
9823: ARRAY
9824: PUSH
9825: LD_INT 2
9827: ARRAY
9828: PPUSH
9829: LD_VAR 0 5
9833: PUSH
9834: LD_VAR 0 3
9838: ARRAY
9839: PUSH
9840: LD_INT 3
9842: ARRAY
9843: PPUSH
9844: LD_VAR 0 5
9848: PUSH
9849: LD_VAR 0 3
9853: ARRAY
9854: PUSH
9855: LD_INT 4
9857: ARRAY
9858: PPUSH
9859: CALL_OW 205
9863: GO 9791
9865: POP
9866: POP
// end ; if position = 2 then
9867: LD_VAR 0 1
9871: PUSH
9872: LD_INT 2
9874: EQUAL
9875: IFFALSE 10490
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9877: LD_ADDR_VAR 0 4
9881: PUSH
9882: LD_INT 22
9884: PUSH
9885: LD_INT 3
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: PUSH
9892: LD_INT 25
9894: PUSH
9895: LD_INT 2
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: PPUSH
9906: CALL_OW 69
9910: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
9911: LD_ADDR_VAR 0 5
9915: PUSH
9916: LD_INT 0
9918: PUSH
9919: LD_INT 104
9921: PUSH
9922: LD_INT 110
9924: PUSH
9925: LD_INT 5
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 4
9936: PUSH
9937: LD_INT 98
9939: PUSH
9940: LD_INT 90
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 29
9954: PUSH
9955: LD_INT 103
9957: PUSH
9958: LD_INT 114
9960: PUSH
9961: LD_INT 2
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 30
9972: PUSH
9973: LD_INT 99
9975: PUSH
9976: LD_INT 114
9978: PUSH
9979: LD_INT 3
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 28
9990: PUSH
9991: LD_INT 100
9993: PUSH
9994: LD_INT 112
9996: PUSH
9997: LD_INT 1
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: LD_INT 92
10011: PUSH
10012: LD_INT 101
10014: PUSH
10015: LD_INT 0
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_INT 28
10026: PUSH
10027: LD_INT 97
10029: PUSH
10030: LD_INT 116
10032: PUSH
10033: LD_INT 5
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 17
10044: PUSH
10045: LD_INT 96
10047: PUSH
10048: LD_INT 101
10050: PUSH
10051: LD_INT 4
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 18
10062: PUSH
10063: LD_INT 88
10065: PUSH
10066: LD_INT 97
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 28
10080: PUSH
10081: LD_INT 106
10083: PUSH
10084: LD_INT 92
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 32
10098: PUSH
10099: LD_INT 88
10101: PUSH
10102: LD_INT 89
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 32
10116: PUSH
10117: LD_INT 86
10119: PUSH
10120: LD_INT 90
10122: PUSH
10123: LD_INT 2
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 32
10134: PUSH
10135: LD_INT 85
10137: PUSH
10138: LD_INT 99
10140: PUSH
10141: LD_INT 2
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 32
10152: PUSH
10153: LD_INT 85
10155: PUSH
10156: LD_INT 107
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 33
10170: PUSH
10171: LD_INT 105
10173: PUSH
10174: LD_INT 99
10176: PUSH
10177: LD_INT 1
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 33
10188: PUSH
10189: LD_INT 102
10191: PUSH
10192: LD_INT 92
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 33
10206: PUSH
10207: LD_INT 105
10209: PUSH
10210: LD_INT 92
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 6
10224: PUSH
10225: LD_INT 92
10227: PUSH
10228: LD_INT 110
10230: PUSH
10231: LD_INT 0
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 6
10242: PUSH
10243: LD_INT 103
10245: PUSH
10246: LD_INT 103
10248: PUSH
10249: LD_INT 5
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 21
10260: PUSH
10261: LD_INT 89
10263: PUSH
10264: LD_INT 101
10266: PUSH
10267: LD_INT 1
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 16
10278: PUSH
10279: LD_INT 95
10281: PUSH
10282: LD_INT 104
10284: PUSH
10285: LD_INT 4
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 24
10296: PUSH
10297: LD_INT 92
10299: PUSH
10300: LD_INT 105
10302: PUSH
10303: LD_INT 0
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10336: LD_ADDR_VAR 0 3
10340: PUSH
10341: LD_INT 22
10343: PUSH
10344: LD_INT 3
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PUSH
10351: LD_INT 3
10353: PUSH
10354: LD_INT 25
10356: PUSH
10357: LD_INT 2
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PPUSH
10372: CALL_OW 69
10376: PUSH
10377: FOR_IN
10378: IFFALSE 10397
// AddComMoveXY ( i , 96 , 99 ) ;
10380: LD_VAR 0 3
10384: PPUSH
10385: LD_INT 96
10387: PPUSH
10388: LD_INT 99
10390: PPUSH
10391: CALL_OW 171
10395: GO 10377
10397: POP
10398: POP
// for i := 1 to buildingsTab do
10399: LD_ADDR_VAR 0 3
10403: PUSH
10404: DOUBLE
10405: LD_INT 1
10407: DEC
10408: ST_TO_ADDR
10409: LD_VAR 0 5
10413: PUSH
10414: FOR_TO
10415: IFFALSE 10488
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10417: LD_VAR 0 4
10421: PPUSH
10422: LD_VAR 0 5
10426: PUSH
10427: LD_VAR 0 3
10431: ARRAY
10432: PUSH
10433: LD_INT 1
10435: ARRAY
10436: PPUSH
10437: LD_VAR 0 5
10441: PUSH
10442: LD_VAR 0 3
10446: ARRAY
10447: PUSH
10448: LD_INT 2
10450: ARRAY
10451: PPUSH
10452: LD_VAR 0 5
10456: PUSH
10457: LD_VAR 0 3
10461: ARRAY
10462: PUSH
10463: LD_INT 3
10465: ARRAY
10466: PPUSH
10467: LD_VAR 0 5
10471: PUSH
10472: LD_VAR 0 3
10476: ARRAY
10477: PUSH
10478: LD_INT 4
10480: ARRAY
10481: PPUSH
10482: CALL_OW 205
10486: GO 10414
10488: POP
10489: POP
// end ; if position = 3 then
10490: LD_VAR 0 1
10494: PUSH
10495: LD_INT 3
10497: EQUAL
10498: IFFALSE 11284
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10500: LD_ADDR_VAR 0 4
10504: PUSH
10505: LD_INT 22
10507: PUSH
10508: LD_INT 3
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: LD_INT 25
10517: PUSH
10518: LD_INT 2
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PPUSH
10529: CALL_OW 69
10533: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
10534: LD_ADDR_VAR 0 5
10538: PUSH
10539: LD_INT 0
10541: PUSH
10542: LD_INT 151
10544: PUSH
10545: LD_INT 71
10547: PUSH
10548: LD_INT 4
10550: PUSH
10551: EMPTY
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_INT 4
10559: PUSH
10560: LD_INT 145
10562: PUSH
10563: LD_INT 53
10565: PUSH
10566: LD_INT 3
10568: PUSH
10569: EMPTY
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: PUSH
10575: LD_INT 4
10577: PUSH
10578: LD_INT 172
10580: PUSH
10581: LD_INT 102
10583: PUSH
10584: LD_INT 5
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 29
10595: PUSH
10596: LD_INT 152
10598: PUSH
10599: LD_INT 85
10601: PUSH
10602: LD_INT 3
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 30
10613: PUSH
10614: LD_INT 156
10616: PUSH
10617: LD_INT 92
10619: PUSH
10620: LD_INT 3
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 28
10631: PUSH
10632: LD_INT 151
10634: PUSH
10635: LD_INT 66
10637: PUSH
10638: LD_INT 4
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: PUSH
10647: LD_INT 2
10649: PUSH
10650: LD_INT 163
10652: PUSH
10653: LD_INT 95
10655: PUSH
10656: LD_INT 5
10658: PUSH
10659: EMPTY
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: PUSH
10665: LD_INT 28
10667: PUSH
10668: LD_INT 149
10670: PUSH
10671: LD_INT 63
10673: PUSH
10674: LD_INT 4
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 17
10685: PUSH
10686: LD_INT 167
10688: PUSH
10689: LD_INT 99
10691: PUSH
10692: LD_INT 5
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 18
10703: PUSH
10704: LD_INT 163
10706: PUSH
10707: LD_INT 98
10709: PUSH
10710: LD_INT 0
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 28
10721: PUSH
10722: LD_INT 154
10724: PUSH
10725: LD_INT 70
10727: PUSH
10728: LD_INT 4
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 32
10739: PUSH
10740: LD_INT 155
10742: PUSH
10743: LD_INT 62
10745: PUSH
10746: LD_INT 4
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 32
10757: PUSH
10758: LD_INT 161
10760: PUSH
10761: LD_INT 69
10763: PUSH
10764: LD_INT 4
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 32
10775: PUSH
10776: LD_INT 168
10778: PUSH
10779: LD_INT 78
10781: PUSH
10782: LD_INT 4
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 32
10793: PUSH
10794: LD_INT 163
10796: PUSH
10797: LD_INT 80
10799: PUSH
10800: LD_INT 5
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 32
10811: PUSH
10812: LD_INT 136
10814: PUSH
10815: LD_INT 73
10817: PUSH
10818: LD_INT 0
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 32
10829: PUSH
10830: LD_INT 157
10832: PUSH
10833: LD_INT 98
10835: PUSH
10836: LD_INT 0
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 32
10847: PUSH
10848: LD_INT 150
10850: PUSH
10851: LD_INT 87
10853: PUSH
10854: LD_INT 1
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 33
10865: PUSH
10866: LD_INT 171
10868: PUSH
10869: LD_INT 97
10871: PUSH
10872: LD_INT 4
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 33
10883: PUSH
10884: LD_INT 168
10886: PUSH
10887: LD_INT 92
10889: PUSH
10890: LD_INT 4
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 33
10901: PUSH
10902: LD_INT 166
10904: PUSH
10905: LD_INT 80
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 33
10919: PUSH
10920: LD_INT 141
10922: PUSH
10923: LD_INT 54
10925: PUSH
10926: LD_INT 2
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 33
10937: PUSH
10938: LD_INT 133
10940: PUSH
10941: LD_INT 57
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 33
10955: PUSH
10956: LD_INT 132
10958: PUSH
10959: LD_INT 61
10961: PUSH
10962: LD_INT 2
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 33
10973: PUSH
10974: LD_INT 150
10976: PUSH
10977: LD_INT 82
10979: PUSH
10980: LD_INT 0
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 33
10991: PUSH
10992: LD_INT 132
10994: PUSH
10995: LD_INT 72
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 6
11009: PUSH
11010: LD_INT 146
11012: PUSH
11013: LD_INT 64
11015: PUSH
11016: LD_INT 4
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 6
11027: PUSH
11028: LD_INT 159
11030: PUSH
11031: LD_INT 85
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 21
11045: PUSH
11046: LD_INT 163
11048: PUSH
11049: LD_INT 91
11051: PUSH
11052: LD_INT 3
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 16
11063: PUSH
11064: LD_INT 166
11066: PUSH
11067: LD_INT 95
11069: PUSH
11070: LD_INT 4
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 24
11081: PUSH
11082: LD_INT 159
11084: PUSH
11085: LD_INT 95
11087: PUSH
11088: LD_INT 1
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11130: LD_ADDR_VAR 0 3
11134: PUSH
11135: LD_INT 22
11137: PUSH
11138: LD_INT 3
11140: PUSH
11141: EMPTY
11142: LIST
11143: LIST
11144: PUSH
11145: LD_INT 3
11147: PUSH
11148: LD_INT 25
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: PUSH
11158: EMPTY
11159: LIST
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PPUSH
11166: CALL_OW 69
11170: PUSH
11171: FOR_IN
11172: IFFALSE 11191
// AddComMoveXY ( i , 141 , 65 ) ;
11174: LD_VAR 0 3
11178: PPUSH
11179: LD_INT 141
11181: PPUSH
11182: LD_INT 65
11184: PPUSH
11185: CALL_OW 171
11189: GO 11171
11191: POP
11192: POP
// for i := 1 to buildingsTab do
11193: LD_ADDR_VAR 0 3
11197: PUSH
11198: DOUBLE
11199: LD_INT 1
11201: DEC
11202: ST_TO_ADDR
11203: LD_VAR 0 5
11207: PUSH
11208: FOR_TO
11209: IFFALSE 11282
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_VAR 0 5
11220: PUSH
11221: LD_VAR 0 3
11225: ARRAY
11226: PUSH
11227: LD_INT 1
11229: ARRAY
11230: PPUSH
11231: LD_VAR 0 5
11235: PUSH
11236: LD_VAR 0 3
11240: ARRAY
11241: PUSH
11242: LD_INT 2
11244: ARRAY
11245: PPUSH
11246: LD_VAR 0 5
11250: PUSH
11251: LD_VAR 0 3
11255: ARRAY
11256: PUSH
11257: LD_INT 3
11259: ARRAY
11260: PPUSH
11261: LD_VAR 0 5
11265: PUSH
11266: LD_VAR 0 3
11270: ARRAY
11271: PUSH
11272: LD_INT 4
11274: ARRAY
11275: PPUSH
11276: CALL_OW 205
11280: GO 11208
11282: POP
11283: POP
// end ; end ;
11284: LD_VAR 0 2
11288: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
11289: LD_INT 0
11291: PPUSH
11292: PPUSH
11293: PPUSH
11294: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
11295: LD_ADDR_VAR 0 3
11299: PUSH
11300: LD_INT 22
11302: PUSH
11303: LD_INT 2
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 25
11312: PUSH
11313: LD_INT 2
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: PPUSH
11324: CALL_OW 69
11328: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
11329: LD_VAR 0 3
11333: PPUSH
11334: LD_INT 0
11336: PPUSH
11337: LD_INT 71
11339: PPUSH
11340: LD_INT 15
11342: PPUSH
11343: LD_INT 3
11345: PPUSH
11346: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
11350: LD_ADDR_VAR 0 4
11354: PUSH
11355: LD_INT 6
11357: PUSH
11358: LD_INT 77
11360: PUSH
11361: LD_INT 18
11363: PUSH
11364: LD_INT 3
11366: PUSH
11367: EMPTY
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 4
11375: PUSH
11376: LD_INT 77
11378: PUSH
11379: LD_INT 26
11381: PUSH
11382: LD_INT 0
11384: PUSH
11385: EMPTY
11386: LIST
11387: LIST
11388: LIST
11389: LIST
11390: PUSH
11391: LD_INT 31
11393: PUSH
11394: LD_INT 82
11396: PUSH
11397: LD_INT 28
11399: PUSH
11400: LD_INT 0
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: PUSH
11409: LD_INT 31
11411: PUSH
11412: LD_INT 84
11414: PUSH
11415: LD_INT 21
11417: PUSH
11418: LD_INT 3
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: LIST
11426: PUSH
11427: LD_INT 31
11429: PUSH
11430: LD_INT 66
11432: PUSH
11433: LD_INT 14
11435: PUSH
11436: LD_INT 2
11438: PUSH
11439: EMPTY
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: LD_INT 27
11447: PUSH
11448: LD_INT 67
11450: PUSH
11451: LD_INT 18
11453: PUSH
11454: LD_INT 5
11456: PUSH
11457: EMPTY
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: PUSH
11463: LD_INT 27
11465: PUSH
11466: LD_INT 69
11468: PUSH
11469: LD_INT 23
11471: PUSH
11472: LD_INT 2
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: PUSH
11481: EMPTY
11482: LIST
11483: LIST
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: LIST
11489: ST_TO_ADDR
// for i := 1 to buildingsTab do
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: DOUBLE
11496: LD_INT 1
11498: DEC
11499: ST_TO_ADDR
11500: LD_VAR 0 4
11504: PUSH
11505: FOR_TO
11506: IFFALSE 11579
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11508: LD_VAR 0 3
11512: PPUSH
11513: LD_VAR 0 4
11517: PUSH
11518: LD_VAR 0 2
11522: ARRAY
11523: PUSH
11524: LD_INT 1
11526: ARRAY
11527: PPUSH
11528: LD_VAR 0 4
11532: PUSH
11533: LD_VAR 0 2
11537: ARRAY
11538: PUSH
11539: LD_INT 2
11541: ARRAY
11542: PPUSH
11543: LD_VAR 0 4
11547: PUSH
11548: LD_VAR 0 2
11552: ARRAY
11553: PUSH
11554: LD_INT 3
11556: ARRAY
11557: PPUSH
11558: LD_VAR 0 4
11562: PUSH
11563: LD_VAR 0 2
11567: ARRAY
11568: PUSH
11569: LD_INT 4
11571: ARRAY
11572: PPUSH
11573: CALL_OW 205
11577: GO 11505
11579: POP
11580: POP
// end ;
11581: LD_VAR 0 1
11585: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
11586: LD_INT 0
11588: PPUSH
11589: PPUSH
11590: PPUSH
11591: PPUSH
11592: PPUSH
11593: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
11594: LD_ADDR_VAR 0 7
11598: PUSH
11599: LD_INT 22
11601: PUSH
11602: LD_VAR 0 1
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PUSH
11611: LD_INT 25
11613: PUSH
11614: LD_INT 9
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: PPUSH
11625: CALL_OW 69
11629: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11630: LD_ADDR_VAR 0 8
11634: PUSH
11635: LD_INT 22
11637: PUSH
11638: LD_VAR 0 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: LD_INT 3
11649: PUSH
11650: LD_INT 21
11652: PUSH
11653: LD_INT 3
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PPUSH
11668: CALL_OW 69
11672: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
11673: LD_ADDR_VAR 0 5
11677: PUSH
11678: LD_INT 1
11680: PPUSH
11681: LD_INT 3
11683: PPUSH
11684: CALL_OW 12
11688: ST_TO_ADDR
// for i = 1 to list do
11689: LD_ADDR_VAR 0 6
11693: PUSH
11694: DOUBLE
11695: LD_INT 1
11697: DEC
11698: ST_TO_ADDR
11699: LD_VAR 0 7
11703: PUSH
11704: FOR_TO
11705: IFFALSE 12675
// for ta in filter do
11707: LD_ADDR_VAR 0 4
11711: PUSH
11712: LD_VAR 0 8
11716: PUSH
11717: FOR_IN
11718: IFFALSE 12671
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
11720: LD_VAR 0 7
11724: PUSH
11725: LD_VAR 0 6
11729: ARRAY
11730: PPUSH
11731: LD_VAR 0 4
11735: PPUSH
11736: CALL_OW 296
11740: PUSH
11741: LD_INT 12
11743: LESSEQUAL
11744: IFFALSE 12669
// begin case c of 1 :
11746: LD_VAR 0 5
11750: PUSH
11751: LD_INT 1
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 12191
11759: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
11760: LD_VAR 0 7
11764: PUSH
11765: LD_VAR 0 6
11769: ARRAY
11770: PPUSH
11771: LD_VAR 0 4
11775: PPUSH
11776: CALL_OW 250
11780: PPUSH
11781: LD_VAR 0 4
11785: PPUSH
11786: CALL_OW 251
11790: PPUSH
11791: CALL_OW 154
// if eventVar2 = 0 then
11795: LD_EXP 59
11799: PUSH
11800: LD_INT 0
11802: EQUAL
11803: IFFALSE 12189
// begin eventVar2 = 1 ;
11805: LD_ADDR_EXP 59
11809: PUSH
11810: LD_INT 1
11812: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11813: LD_INT 245
11815: PPUSH
11816: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11820: LD_VAR 0 4
11824: PPUSH
11825: CALL_OW 250
11829: PPUSH
11830: LD_VAR 0 4
11834: PPUSH
11835: CALL_OW 251
11839: PPUSH
11840: CALL_OW 84
// DialogueOn ;
11844: CALL_OW 6
// if IsOK ( Cyrus ) then
11848: LD_EXP 5
11852: PPUSH
11853: CALL_OW 302
11857: IFFALSE 11873
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11859: LD_EXP 5
11863: PPUSH
11864: LD_STRING D9a-Cyrus-1
11866: PPUSH
11867: CALL_OW 88
// end else
11871: GO 11995
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11873: LD_INT 22
11875: PUSH
11876: LD_INT 1
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 26
11885: PUSH
11886: LD_INT 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 2
11895: PUSH
11896: LD_INT 25
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 25
11908: PUSH
11909: LD_INT 2
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 25
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 25
11928: PUSH
11929: LD_INT 4
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 5
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: LIST
11958: PPUSH
11959: CALL_OW 69
11963: PUSH
11964: LD_EXP 1
11968: PUSH
11969: LD_EXP 14
11973: PUSH
11974: LD_EXP 5
11978: PUSH
11979: EMPTY
11980: LIST
11981: LIST
11982: LIST
11983: DIFF
11984: PPUSH
11985: LD_STRING D9a-Sol1-1
11987: PPUSH
11988: LD_STRING D9a-Sol1-1
11990: PPUSH
11991: CALL 8241 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11995: LD_INT 22
11997: PUSH
11998: LD_INT 1
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 26
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: LD_INT 2
12017: PUSH
12018: LD_INT 25
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 25
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: LD_INT 25
12040: PUSH
12041: LD_INT 3
12043: PUSH
12044: EMPTY
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 25
12050: PUSH
12051: LD_INT 4
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 25
12060: PUSH
12061: LD_INT 5
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: PUSH
12068: EMPTY
12069: LIST
12070: LIST
12071: LIST
12072: LIST
12073: LIST
12074: LIST
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: PPUSH
12081: CALL_OW 69
12085: PUSH
12086: LD_EXP 1
12090: PUSH
12091: LD_EXP 14
12095: PUSH
12096: LD_EXP 5
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: DIFF
12106: PPUSH
12107: LD_STRING D9b-Sol1-1
12109: PPUSH
12110: LD_STRING D9b-Sol1-1
12112: PPUSH
12113: CALL 8241 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
12117: LD_STRING 09_arInfo
12119: PPUSH
12120: LD_INT 0
12122: PPUSH
12123: CALL_OW 30
12127: PUSH
12128: LD_INT 1
12130: EQUAL
12131: IFFALSE 12145
// Say ( JMM , D9a-JMM-1 ) ;
12133: LD_EXP 1
12137: PPUSH
12138: LD_STRING D9a-JMM-1
12140: PPUSH
12141: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
12145: LD_EXP 1
12149: PPUSH
12150: LD_STRING D9c-JMM-1
12152: PPUSH
12153: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
12157: LD_INT 12
12159: PPUSH
12160: LD_INT 1
12162: PPUSH
12163: CALL_OW 321
12167: PUSH
12168: LD_INT 2
12170: EQUAL
12171: IFFALSE 12185
// Say ( JMM , D9c-JMM-1a ) ;
12173: LD_EXP 1
12177: PPUSH
12178: LD_STRING D9c-JMM-1a
12180: PPUSH
12181: CALL_OW 88
// DialogueOff ;
12185: CALL_OW 7
// end ; end ; 2 :
12189: GO 12669
12191: LD_INT 2
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12657
12199: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
12200: LD_VAR 0 7
12204: PUSH
12205: LD_VAR 0 6
12209: ARRAY
12210: PPUSH
12211: LD_VAR 0 4
12215: PPUSH
12216: CALL_OW 250
12220: PUSH
12221: LD_INT 1
12223: NEG
12224: PPUSH
12225: LD_INT 1
12227: PPUSH
12228: CALL_OW 12
12232: PLUS
12233: PPUSH
12234: LD_VAR 0 4
12238: PPUSH
12239: CALL_OW 251
12243: PUSH
12244: LD_INT 1
12246: NEG
12247: PPUSH
12248: LD_INT 1
12250: PPUSH
12251: CALL_OW 12
12255: PLUS
12256: PPUSH
12257: CALL_OW 153
// if eventVar2 = 0 then
12261: LD_EXP 59
12265: PUSH
12266: LD_INT 0
12268: EQUAL
12269: IFFALSE 12655
// begin eventVar2 = 1 ;
12271: LD_ADDR_EXP 59
12275: PUSH
12276: LD_INT 1
12278: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12279: LD_INT 245
12281: PPUSH
12282: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
12286: LD_VAR 0 4
12290: PPUSH
12291: CALL_OW 250
12295: PPUSH
12296: LD_VAR 0 4
12300: PPUSH
12301: CALL_OW 251
12305: PPUSH
12306: CALL_OW 84
// DialogueOn ;
12310: CALL_OW 6
// if IsOK ( Cyrus ) then
12314: LD_EXP 5
12318: PPUSH
12319: CALL_OW 302
12323: IFFALSE 12339
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
12325: LD_EXP 5
12329: PPUSH
12330: LD_STRING D9a-Cyrus-1
12332: PPUSH
12333: CALL_OW 88
// end else
12337: GO 12461
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
12339: LD_INT 22
12341: PUSH
12342: LD_INT 1
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 26
12351: PUSH
12352: LD_INT 1
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 2
12361: PUSH
12362: LD_INT 25
12364: PUSH
12365: LD_INT 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 25
12374: PUSH
12375: LD_INT 2
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: LD_INT 25
12384: PUSH
12385: LD_INT 3
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: PUSH
12392: LD_INT 25
12394: PUSH
12395: LD_INT 4
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 25
12404: PUSH
12405: LD_INT 5
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PUSH
12430: LD_EXP 1
12434: PUSH
12435: LD_EXP 14
12439: PUSH
12440: LD_EXP 5
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: DIFF
12450: PPUSH
12451: LD_STRING D9a-Sol1-1
12453: PPUSH
12454: LD_STRING D9a-Sol1-1
12456: PPUSH
12457: CALL 8241 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
12461: LD_INT 22
12463: PUSH
12464: LD_INT 1
12466: PUSH
12467: EMPTY
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 26
12473: PUSH
12474: LD_INT 1
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 2
12483: PUSH
12484: LD_INT 25
12486: PUSH
12487: LD_INT 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 25
12496: PUSH
12497: LD_INT 2
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 25
12506: PUSH
12507: LD_INT 3
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 4
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 25
12526: PUSH
12527: LD_INT 5
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: PUSH
12552: LD_EXP 1
12556: PUSH
12557: LD_EXP 14
12561: PUSH
12562: LD_EXP 5
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: DIFF
12572: PPUSH
12573: LD_STRING D9b-Sol1-1
12575: PPUSH
12576: LD_STRING D9b-Sol1-1
12578: PPUSH
12579: CALL 8241 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
12583: LD_STRING 09_arInfo
12585: PPUSH
12586: LD_INT 0
12588: PPUSH
12589: CALL_OW 30
12593: PUSH
12594: LD_INT 1
12596: EQUAL
12597: IFFALSE 12611
// Say ( JMM , D9a-JMM-1 ) ;
12599: LD_EXP 1
12603: PPUSH
12604: LD_STRING D9a-JMM-1
12606: PPUSH
12607: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
12611: LD_EXP 1
12615: PPUSH
12616: LD_STRING D9c-JMM-1
12618: PPUSH
12619: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
12623: LD_INT 12
12625: PPUSH
12626: LD_INT 1
12628: PPUSH
12629: CALL_OW 321
12633: PUSH
12634: LD_INT 2
12636: EQUAL
12637: IFFALSE 12651
// Say ( JMM , D9c-JMM-1a ) ;
12639: LD_EXP 1
12643: PPUSH
12644: LD_STRING D9c-JMM-1a
12646: PPUSH
12647: CALL_OW 88
// DialogueOff ;
12651: CALL_OW 7
// end ; end ; 3 :
12655: GO 12669
12657: LD_INT 3
12659: DOUBLE
12660: EQUAL
12661: IFTRUE 12665
12663: GO 12668
12665: POP
// ; end ;
12666: GO 12669
12668: POP
// end ; end ;
12669: GO 11717
12671: POP
12672: POP
12673: GO 11704
12675: POP
12676: POP
// end ;
12677: LD_VAR 0 3
12681: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
12682: LD_INT 0
12684: PPUSH
12685: PPUSH
12686: PPUSH
12687: PPUSH
// for i = 1 to 72 do
12688: LD_ADDR_VAR 0 5
12692: PUSH
12693: DOUBLE
12694: LD_INT 1
12696: DEC
12697: ST_TO_ADDR
12698: LD_INT 72
12700: PUSH
12701: FOR_TO
12702: IFFALSE 12760
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
12704: LD_VAR 0 5
12708: PPUSH
12709: LD_VAR 0 1
12713: PPUSH
12714: CALL_OW 321
12718: PUSH
12719: LD_INT 1
12721: EQUAL
12722: PUSH
12723: LD_VAR 0 5
12727: PPUSH
12728: LD_VAR 0 3
12732: PPUSH
12733: CALL_OW 482
12737: PUSH
12738: LD_INT 1
12740: EQUAL
12741: AND
12742: IFFALSE 12758
// AddComResearch ( lab , i ) ;
12744: LD_VAR 0 2
12748: PPUSH
12749: LD_VAR 0 5
12753: PPUSH
12754: CALL_OW 184
12758: GO 12701
12760: POP
12761: POP
// end ;
12762: LD_VAR 0 4
12766: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
12767: LD_INT 0
12769: PPUSH
12770: PPUSH
12771: PPUSH
12772: PPUSH
12773: PPUSH
12774: PPUSH
12775: PPUSH
12776: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
12777: LD_ADDR_VAR 0 6
12781: PUSH
12782: LD_INT 22
12784: PUSH
12785: LD_VAR 0 1
12789: PUSH
12790: EMPTY
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 56
12796: PUSH
12797: EMPTY
12798: LIST
12799: PUSH
12800: LD_INT 24
12802: PUSH
12803: LD_INT 700
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: LD_INT 2
12812: PUSH
12813: LD_INT 25
12815: PUSH
12816: LD_INT 1
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 25
12825: PUSH
12826: LD_INT 9
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: PPUSH
12844: CALL_OW 69
12848: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
12849: LD_ADDR_VAR 0 7
12853: PUSH
12854: LD_INT 22
12856: PUSH
12857: LD_VAR 0 1
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 30
12868: PUSH
12869: LD_INT 32
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: LD_INT 58
12878: PUSH
12879: EMPTY
12880: LIST
12881: PUSH
12882: LD_INT 24
12884: PUSH
12885: LD_INT 251
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: PUSH
12892: EMPTY
12893: LIST
12894: LIST
12895: LIST
12896: LIST
12897: PPUSH
12898: CALL_OW 69
12902: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
12903: LD_ADDR_VAR 0 9
12907: PUSH
12908: LD_INT 22
12910: PUSH
12911: LD_VAR 0 1
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: LD_INT 30
12925: PUSH
12926: LD_INT 4
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: LD_INT 30
12935: PUSH
12936: LD_INT 5
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: LD_INT 24
12950: PUSH
12951: LD_INT 251
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: PPUSH
12963: CALL_OW 69
12967: ST_TO_ADDR
// if barrackList > 0 then
12968: LD_VAR 0 9
12972: PUSH
12973: LD_INT 0
12975: GREATER
12976: IFFALSE 13111
// begin if turretList = 0 then
12978: LD_VAR 0 7
12982: PUSH
12983: LD_INT 0
12985: EQUAL
12986: IFFALSE 13035
// begin for i in soldiers_list do
12988: LD_ADDR_VAR 0 4
12992: PUSH
12993: LD_VAR 0 6
12997: PUSH
12998: FOR_IN
12999: IFFALSE 13031
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
13001: LD_VAR 0 4
13005: PPUSH
13006: LD_VAR 0 9
13010: PUSH
13011: LD_INT 1
13013: PPUSH
13014: LD_VAR 0 9
13018: PPUSH
13019: CALL_OW 12
13023: ARRAY
13024: PPUSH
13025: CALL_OW 120
13029: GO 12998
13031: POP
13032: POP
// end else
13033: GO 13111
// begin for i in barrackList do
13035: LD_ADDR_VAR 0 4
13039: PUSH
13040: LD_VAR 0 9
13044: PUSH
13045: FOR_IN
13046: IFFALSE 13109
// begin insideUnits = UnitsInside ( i ) ;
13048: LD_ADDR_VAR 0 10
13052: PUSH
13053: LD_VAR 0 4
13057: PPUSH
13058: CALL_OW 313
13062: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
13063: LD_VAR 0 10
13067: PUSH
13068: LD_INT 1
13070: ARRAY
13071: PPUSH
13072: LD_VAR 0 7
13076: PUSH
13077: LD_INT 1
13079: ARRAY
13080: PPUSH
13081: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
13085: LD_VAR 0 6
13089: PUSH
13090: LD_INT 1
13092: ARRAY
13093: PPUSH
13094: LD_VAR 0 7
13098: PUSH
13099: LD_INT 1
13101: ARRAY
13102: PPUSH
13103: CALL_OW 120
// end ;
13107: GO 13045
13109: POP
13110: POP
// end ; end ; end ;
13111: LD_VAR 0 3
13115: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13116: LD_INT 0
13118: PPUSH
13119: PPUSH
13120: PPUSH
13121: PPUSH
13122: PPUSH
13123: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13124: LD_ADDR_VAR 0 6
13128: PUSH
13129: LD_VAR 0 2
13133: PPUSH
13134: CALL_OW 313
13138: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
13139: LD_ADDR_VAR 0 7
13143: PUSH
13144: LD_INT 22
13146: PUSH
13147: LD_VAR 0 1
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: PUSH
13156: LD_INT 25
13158: PUSH
13159: LD_INT 2
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: PUSH
13166: LD_INT 24
13168: PUSH
13169: LD_INT 1000
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: PUSH
13176: EMPTY
13177: LIST
13178: LIST
13179: LIST
13180: PPUSH
13181: CALL_OW 69
13185: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13186: LD_ADDR_VAR 0 4
13190: PUSH
13191: LD_INT 22
13193: PUSH
13194: LD_VAR 0 1
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 21
13205: PUSH
13206: LD_INT 3
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: PUSH
13213: LD_INT 3
13215: PUSH
13216: LD_INT 24
13218: PUSH
13219: LD_INT 1000
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: PUSH
13235: EMPTY
13236: LIST
13237: PPUSH
13238: CALL_OW 69
13242: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
13243: LD_VAR 0 4
13247: NOT
13248: PUSH
13249: LD_VAR 0 7
13253: NOT
13254: AND
13255: IFFALSE 13259
// exit ;
13257: GO 13418
// if buildings_list > 0 and engineerOkInside > 0 then
13259: LD_VAR 0 4
13263: PUSH
13264: LD_INT 0
13266: GREATER
13267: PUSH
13268: LD_VAR 0 6
13272: PUSH
13273: LD_INT 0
13275: GREATER
13276: AND
13277: IFFALSE 13305
// for i in engineerOkInside do
13279: LD_ADDR_VAR 0 5
13283: PUSH
13284: LD_VAR 0 6
13288: PUSH
13289: FOR_IN
13290: IFFALSE 13303
// ComExitBuilding ( i ) ;
13292: LD_VAR 0 5
13296: PPUSH
13297: CALL_OW 122
13301: GO 13289
13303: POP
13304: POP
// if engineerOkOutside > 0 then
13305: LD_VAR 0 7
13309: PUSH
13310: LD_INT 0
13312: GREATER
13313: IFFALSE 13367
// begin for i in engineerOkOutside do
13315: LD_ADDR_VAR 0 5
13319: PUSH
13320: LD_VAR 0 7
13324: PUSH
13325: FOR_IN
13326: IFFALSE 13365
// for j in buildings_list do
13328: LD_ADDR_VAR 0 8
13332: PUSH
13333: LD_VAR 0 4
13337: PUSH
13338: FOR_IN
13339: IFFALSE 13361
// ComRepairBuilding ( i , j [ 1 ] ) ;
13341: LD_VAR 0 5
13345: PPUSH
13346: LD_VAR 0 8
13350: PUSH
13351: LD_INT 1
13353: ARRAY
13354: PPUSH
13355: CALL_OW 130
13359: GO 13338
13361: POP
13362: POP
13363: GO 13325
13365: POP
13366: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
13367: LD_VAR 0 4
13371: PUSH
13372: LD_INT 0
13374: EQUAL
13375: PUSH
13376: LD_VAR 0 7
13380: PUSH
13381: LD_INT 0
13383: GREATER
13384: AND
13385: IFFALSE 13418
// for i in engineerOkOutside do
13387: LD_ADDR_VAR 0 5
13391: PUSH
13392: LD_VAR 0 7
13396: PUSH
13397: FOR_IN
13398: IFFALSE 13416
// ComEnterUnit ( i , building ) ;
13400: LD_VAR 0 5
13404: PPUSH
13405: LD_VAR 0 2
13409: PPUSH
13410: CALL_OW 120
13414: GO 13397
13416: POP
13417: POP
// end ;
13418: LD_VAR 0 3
13422: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
13423: LD_INT 0
13425: PPUSH
13426: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
13427: LD_INT 22
13429: PUSH
13430: LD_VAR 0 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 25
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: PUSH
13458: LD_INT 0
13460: GREATER
13461: PUSH
13462: LD_INT 22
13464: PUSH
13465: LD_VAR 0 1
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: LD_INT 21
13476: PUSH
13477: LD_INT 3
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 3
13486: PUSH
13487: LD_INT 24
13489: PUSH
13490: LD_INT 1000
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: PUSH
13511: LD_INT 0
13513: EQUAL
13514: AND
13515: PUSH
13516: LD_VAR 0 2
13520: PUSH
13521: LD_INT 0
13523: GREATER
13524: AND
13525: IFFALSE 13624
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
13527: LD_ADDR_VAR 0 4
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_VAR 0 1
13539: PUSH
13540: EMPTY
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 25
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PPUSH
13558: CALL_OW 69
13562: PUSH
13563: FOR_IN
13564: IFFALSE 13622
// begin AddComExitBuilding ( i ) ;
13566: LD_VAR 0 4
13570: PPUSH
13571: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13575: LD_VAR 0 4
13579: PPUSH
13580: LD_VAR 0 2
13584: PUSH
13585: LD_INT 1
13587: ARRAY
13588: PPUSH
13589: LD_VAR 0 2
13593: PUSH
13594: LD_INT 2
13596: ARRAY
13597: PPUSH
13598: LD_VAR 0 2
13602: PUSH
13603: LD_INT 3
13605: ARRAY
13606: PPUSH
13607: LD_VAR 0 2
13611: PUSH
13612: LD_INT 4
13614: ARRAY
13615: PPUSH
13616: CALL_OW 205
// end ;
13620: GO 13563
13622: POP
13623: POP
// end ; end ;
13624: LD_VAR 0 3
13628: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13629: LD_INT 0
13631: PPUSH
13632: PPUSH
13633: PPUSH
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
13638: PPUSH
13639: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
13640: LD_ADDR_VAR 0 6
13644: PUSH
13645: LD_INT 22
13647: PUSH
13648: LD_VAR 0 1
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 25
13659: PUSH
13660: LD_INT 4
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PUSH
13667: LD_INT 24
13669: PUSH
13670: LD_INT 251
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: LIST
13681: PPUSH
13682: CALL_OW 69
13686: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
13687: LD_ADDR_VAR 0 7
13691: PUSH
13692: LD_VAR 0 3
13696: PPUSH
13697: LD_INT 22
13699: PUSH
13700: LD_VAR 0 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 25
13711: PUSH
13712: LD_INT 4
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 50
13721: PUSH
13722: EMPTY
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: PPUSH
13730: CALL_OW 70
13734: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13735: LD_ADDR_VAR 0 10
13739: PUSH
13740: LD_VAR 0 3
13744: PPUSH
13745: LD_INT 22
13747: PUSH
13748: LD_VAR 0 1
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: PUSH
13757: LD_INT 21
13759: PUSH
13760: LD_INT 1
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 3
13769: PUSH
13770: LD_INT 25
13772: PUSH
13773: LD_INT 3
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PUSH
13784: LD_INT 3
13786: PUSH
13787: LD_INT 24
13789: PUSH
13790: LD_INT 750
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 70
13811: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13812: LD_ADDR_VAR 0 11
13816: PUSH
13817: LD_VAR 0 2
13821: PPUSH
13822: LD_INT 22
13824: PUSH
13825: LD_VAR 0 1
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: LD_INT 21
13836: PUSH
13837: LD_INT 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: LD_INT 25
13849: PUSH
13850: LD_INT 3
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 3
13863: PUSH
13864: LD_INT 24
13866: PUSH
13867: LD_INT 1000
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PPUSH
13884: CALL_OW 70
13888: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
13889: LD_VAR 0 10
13893: NOT
13894: PUSH
13895: LD_VAR 0 7
13899: NOT
13900: AND
13901: PUSH
13902: LD_VAR 0 11
13906: NOT
13907: AND
13908: IFFALSE 13912
// exit ;
13910: GO 14172
// if damageUnits > 0 and sci_list > 0 then
13912: LD_VAR 0 10
13916: PUSH
13917: LD_INT 0
13919: GREATER
13920: PUSH
13921: LD_VAR 0 6
13925: PUSH
13926: LD_INT 0
13928: GREATER
13929: AND
13930: IFFALSE 13963
// for i in damageUnits do
13932: LD_ADDR_VAR 0 8
13936: PUSH
13937: LD_VAR 0 10
13941: PUSH
13942: FOR_IN
13943: IFFALSE 13961
// ComMoveToArea ( i , healArea ) ;
13945: LD_VAR 0 8
13949: PPUSH
13950: LD_VAR 0 2
13954: PPUSH
13955: CALL_OW 113
13959: GO 13942
13961: POP
13962: POP
// if unitsToHeal > 0 and sci_list > 0 then
13963: LD_VAR 0 11
13967: PUSH
13968: LD_INT 0
13970: GREATER
13971: PUSH
13972: LD_VAR 0 6
13976: PUSH
13977: LD_INT 0
13979: GREATER
13980: AND
13981: IFFALSE 14040
// begin for i in sci_list do
13983: LD_ADDR_VAR 0 8
13987: PUSH
13988: LD_VAR 0 6
13992: PUSH
13993: FOR_IN
13994: IFFALSE 14038
// begin ComExitBuilding ( i ) ;
13996: LD_VAR 0 8
14000: PPUSH
14001: CALL_OW 122
// for j in unitsToHeal do
14005: LD_ADDR_VAR 0 9
14009: PUSH
14010: LD_VAR 0 11
14014: PUSH
14015: FOR_IN
14016: IFFALSE 14034
// AddComHeal ( i , j ) ;
14018: LD_VAR 0 8
14022: PPUSH
14023: LD_VAR 0 9
14027: PPUSH
14028: CALL_OW 188
14032: GO 14015
14034: POP
14035: POP
// end ;
14036: GO 13993
14038: POP
14039: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14040: LD_VAR 0 10
14044: PUSH
14045: LD_INT 0
14047: EQUAL
14048: PUSH
14049: LD_VAR 0 11
14053: PUSH
14054: LD_INT 0
14056: EQUAL
14057: AND
14058: PUSH
14059: LD_VAR 0 7
14063: PUSH
14064: LD_INT 0
14066: GREATER
14067: AND
14068: IFFALSE 14172
// for i in sci_listOutside do
14070: LD_ADDR_VAR 0 8
14074: PUSH
14075: LD_VAR 0 7
14079: PUSH
14080: FOR_IN
14081: IFFALSE 14170
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14083: LD_ADDR_VAR 0 12
14087: PUSH
14088: LD_INT 22
14090: PUSH
14091: LD_VAR 0 1
14095: PUSH
14096: EMPTY
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 21
14102: PUSH
14103: LD_INT 3
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PUSH
14110: LD_INT 30
14112: PUSH
14113: LD_INT 8
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: PPUSH
14125: CALL_OW 69
14129: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14130: LD_ADDR_VAR 0 13
14134: PUSH
14135: LD_INT 1
14137: PPUSH
14138: LD_VAR 0 12
14142: PPUSH
14143: CALL_OW 12
14147: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
14148: LD_VAR 0 8
14152: PPUSH
14153: LD_VAR 0 12
14157: PUSH
14158: LD_VAR 0 13
14162: ARRAY
14163: PPUSH
14164: CALL_OW 120
// end ;
14168: GO 14080
14170: POP
14171: POP
// end ;
14172: LD_VAR 0 5
14176: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14177: LD_INT 0
14179: PPUSH
14180: PPUSH
14181: PPUSH
14182: PPUSH
14183: PPUSH
14184: PPUSH
14185: PPUSH
14186: PPUSH
14187: PPUSH
14188: PPUSH
14189: PPUSH
// amChassisTab = [ ] ;
14190: LD_ADDR_VAR 0 19
14194: PUSH
14195: EMPTY
14196: ST_TO_ADDR
// arChassisTab = [ ] ;
14197: LD_ADDR_VAR 0 18
14201: PUSH
14202: EMPTY
14203: ST_TO_ADDR
// ruChassisTab = [ ] ;
14204: LD_ADDR_VAR 0 17
14208: PUSH
14209: EMPTY
14210: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14211: LD_INT 35
14213: PPUSH
14214: CALL_OW 67
// if nation = 1 then
14218: LD_VAR 0 5
14222: PUSH
14223: LD_INT 1
14225: EQUAL
14226: IFFALSE 14731
// begin uc_side = side ;
14228: LD_ADDR_OWVAR 20
14232: PUSH
14233: LD_VAR 0 2
14237: ST_TO_ADDR
// uc_nation = nation ;
14238: LD_ADDR_OWVAR 21
14242: PUSH
14243: LD_VAR 0 5
14247: ST_TO_ADDR
// vc_engine = vehengine ;
14248: LD_ADDR_OWVAR 39
14252: PUSH
14253: LD_VAR 0 6
14257: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14258: LD_ADDR_OWVAR 38
14262: PUSH
14263: LD_VAR 0 7
14267: PUSH
14268: LD_INT 1
14270: PPUSH
14271: LD_VAR 0 7
14275: PPUSH
14276: CALL_OW 12
14280: ARRAY
14281: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14282: LD_ADDR_OWVAR 40
14286: PUSH
14287: LD_VAR 0 10
14291: PUSH
14292: LD_INT 1
14294: PPUSH
14295: LD_VAR 0 10
14299: PPUSH
14300: CALL_OW 12
14304: ARRAY
14305: ST_TO_ADDR
// for j = 1 to AMWeapon do
14306: LD_ADDR_VAR 0 14
14310: PUSH
14311: DOUBLE
14312: LD_INT 1
14314: DEC
14315: ST_TO_ADDR
14316: LD_VAR 0 10
14320: PUSH
14321: FOR_TO
14322: IFFALSE 14623
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14324: LD_VAR 0 10
14328: PUSH
14329: LD_VAR 0 14
14333: ARRAY
14334: PUSH
14335: LD_INT 2
14337: EQUAL
14338: PUSH
14339: LD_VAR 0 10
14343: PUSH
14344: LD_VAR 0 14
14348: ARRAY
14349: PUSH
14350: LD_INT 3
14352: EQUAL
14353: OR
14354: IFFALSE 14407
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14356: LD_ADDR_VAR 0 19
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: LD_INT 2
14366: PUSH
14367: LD_INT 3
14369: PUSH
14370: LD_INT 4
14372: PUSH
14373: LD_INT 5
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14383: LD_ADDR_OWVAR 37
14387: PUSH
14388: LD_VAR 0 19
14392: PUSH
14393: LD_INT 1
14395: PPUSH
14396: LD_VAR 0 19
14400: PPUSH
14401: CALL_OW 12
14405: ARRAY
14406: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14407: LD_VAR 0 10
14411: PUSH
14412: LD_VAR 0 14
14416: ARRAY
14417: PUSH
14418: LD_INT 4
14420: EQUAL
14421: PUSH
14422: LD_VAR 0 10
14426: PUSH
14427: LD_VAR 0 14
14431: ARRAY
14432: PUSH
14433: LD_INT 5
14435: EQUAL
14436: OR
14437: PUSH
14438: LD_VAR 0 10
14442: PUSH
14443: LD_VAR 0 14
14447: ARRAY
14448: PUSH
14449: LD_INT 9
14451: EQUAL
14452: OR
14453: PUSH
14454: LD_VAR 0 10
14458: PUSH
14459: LD_VAR 0 14
14463: ARRAY
14464: PUSH
14465: LD_INT 11
14467: EQUAL
14468: OR
14469: PUSH
14470: LD_VAR 0 10
14474: PUSH
14475: LD_VAR 0 14
14479: ARRAY
14480: PUSH
14481: LD_INT 7
14483: EQUAL
14484: OR
14485: IFFALSE 14534
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14487: LD_ADDR_VAR 0 19
14491: PUSH
14492: LD_INT 2
14494: PUSH
14495: LD_INT 3
14497: PUSH
14498: LD_INT 4
14500: PUSH
14501: LD_INT 5
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14510: LD_ADDR_OWVAR 37
14514: PUSH
14515: LD_VAR 0 19
14519: PUSH
14520: LD_INT 1
14522: PPUSH
14523: LD_VAR 0 19
14527: PPUSH
14528: CALL_OW 12
14532: ARRAY
14533: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14534: LD_VAR 0 10
14538: PUSH
14539: LD_VAR 0 14
14543: ARRAY
14544: PUSH
14545: LD_INT 8
14547: EQUAL
14548: PUSH
14549: LD_VAR 0 10
14553: PUSH
14554: LD_VAR 0 14
14558: ARRAY
14559: PUSH
14560: LD_INT 6
14562: EQUAL
14563: OR
14564: PUSH
14565: LD_VAR 0 10
14569: PUSH
14570: LD_VAR 0 14
14574: ARRAY
14575: PUSH
14576: LD_INT 10
14578: EQUAL
14579: OR
14580: IFFALSE 14621
// begin amChassisTab = [ 4 , 5 ] ;
14582: LD_ADDR_VAR 0 19
14586: PUSH
14587: LD_INT 4
14589: PUSH
14590: LD_INT 5
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14597: LD_ADDR_OWVAR 37
14601: PUSH
14602: LD_VAR 0 19
14606: PUSH
14607: LD_INT 1
14609: PPUSH
14610: LD_VAR 0 19
14614: PPUSH
14615: CALL_OW 12
14619: ARRAY
14620: ST_TO_ADDR
// end ; end ;
14621: GO 14321
14623: POP
14624: POP
// veh = CreateVehicle ;
14625: LD_ADDR_VAR 0 16
14629: PUSH
14630: CALL_OW 45
14634: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14635: LD_VAR 0 16
14639: PPUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 49
// if vc_control = 1 then
14652: LD_OWVAR 38
14656: PUSH
14657: LD_INT 1
14659: EQUAL
14660: IFFALSE 14717
// begin hc_gallery =  ;
14662: LD_ADDR_OWVAR 33
14666: PUSH
14667: LD_STRING 
14669: ST_TO_ADDR
// hc_name =  ;
14670: LD_ADDR_OWVAR 26
14674: PUSH
14675: LD_STRING 
14677: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14678: LD_INT 0
14680: PPUSH
14681: LD_INT 3
14683: PPUSH
14684: LD_VAR 0 4
14688: PPUSH
14689: CALL_OW 380
// un = CreateHuman ;
14693: LD_ADDR_VAR 0 15
14697: PUSH
14698: CALL_OW 44
14702: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14703: LD_VAR 0 15
14707: PPUSH
14708: LD_VAR 0 16
14712: PPUSH
14713: CALL_OW 52
// end ; i = i + 1 ;
14717: LD_ADDR_VAR 0 13
14721: PUSH
14722: LD_VAR 0 13
14726: PUSH
14727: LD_INT 1
14729: PLUS
14730: ST_TO_ADDR
// end ; if nation = 2 then
14731: LD_VAR 0 5
14735: PUSH
14736: LD_INT 2
14738: EQUAL
14739: IFFALSE 15161
// begin uc_side = side ;
14741: LD_ADDR_OWVAR 20
14745: PUSH
14746: LD_VAR 0 2
14750: ST_TO_ADDR
// uc_nation = nation ;
14751: LD_ADDR_OWVAR 21
14755: PUSH
14756: LD_VAR 0 5
14760: ST_TO_ADDR
// vc_engine = vehengine ;
14761: LD_ADDR_OWVAR 39
14765: PUSH
14766: LD_VAR 0 6
14770: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14771: LD_ADDR_OWVAR 38
14775: PUSH
14776: LD_VAR 0 7
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_VAR 0 7
14788: PPUSH
14789: CALL_OW 12
14793: ARRAY
14794: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14795: LD_ADDR_OWVAR 40
14799: PUSH
14800: LD_VAR 0 9
14804: PUSH
14805: LD_INT 1
14807: PPUSH
14808: LD_VAR 0 9
14812: PPUSH
14813: CALL_OW 12
14817: ARRAY
14818: ST_TO_ADDR
// for j = 1 to ARWeapons do
14819: LD_ADDR_VAR 0 14
14823: PUSH
14824: DOUBLE
14825: LD_INT 1
14827: DEC
14828: ST_TO_ADDR
14829: LD_VAR 0 9
14833: PUSH
14834: FOR_TO
14835: IFFALSE 15053
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14837: LD_VAR 0 9
14841: PUSH
14842: LD_VAR 0 14
14846: ARRAY
14847: PUSH
14848: LD_INT 24
14850: EQUAL
14851: PUSH
14852: LD_VAR 0 9
14856: PUSH
14857: LD_VAR 0 14
14861: ARRAY
14862: PUSH
14863: LD_INT 22
14865: EQUAL
14866: OR
14867: PUSH
14868: LD_VAR 0 9
14872: PUSH
14873: LD_VAR 0 14
14877: ARRAY
14878: PUSH
14879: LD_INT 23
14881: EQUAL
14882: OR
14883: PUSH
14884: LD_VAR 0 9
14888: PUSH
14889: LD_VAR 0 14
14893: ARRAY
14894: PUSH
14895: LD_INT 30
14897: EQUAL
14898: OR
14899: IFFALSE 14936
// begin arChassisTab = [ 14 ] ;
14901: LD_ADDR_VAR 0 18
14905: PUSH
14906: LD_INT 14
14908: PUSH
14909: EMPTY
14910: LIST
14911: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14912: LD_ADDR_OWVAR 37
14916: PUSH
14917: LD_VAR 0 18
14921: PUSH
14922: LD_INT 1
14924: PPUSH
14925: LD_VAR 0 18
14929: PPUSH
14930: CALL_OW 12
14934: ARRAY
14935: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14936: LD_VAR 0 9
14940: PUSH
14941: LD_VAR 0 14
14945: ARRAY
14946: PUSH
14947: LD_INT 29
14949: EQUAL
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: LD_VAR 0 14
14960: ARRAY
14961: PUSH
14962: LD_INT 28
14964: EQUAL
14965: OR
14966: PUSH
14967: LD_VAR 0 9
14971: PUSH
14972: LD_VAR 0 14
14976: ARRAY
14977: PUSH
14978: LD_INT 27
14980: EQUAL
14981: OR
14982: PUSH
14983: LD_VAR 0 9
14987: PUSH
14988: LD_VAR 0 14
14992: ARRAY
14993: PUSH
14994: LD_INT 26
14996: EQUAL
14997: OR
14998: PUSH
14999: LD_VAR 0 9
15003: PUSH
15004: LD_VAR 0 14
15008: ARRAY
15009: PUSH
15010: LD_INT 25
15012: EQUAL
15013: OR
15014: IFFALSE 15051
// begin arChassisTab = [ 14 ] ;
15016: LD_ADDR_VAR 0 18
15020: PUSH
15021: LD_INT 14
15023: PUSH
15024: EMPTY
15025: LIST
15026: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15027: LD_ADDR_OWVAR 37
15031: PUSH
15032: LD_VAR 0 18
15036: PUSH
15037: LD_INT 1
15039: PPUSH
15040: LD_VAR 0 18
15044: PPUSH
15045: CALL_OW 12
15049: ARRAY
15050: ST_TO_ADDR
// end ; end ;
15051: GO 14834
15053: POP
15054: POP
// veh = CreateVehicle ;
15055: LD_ADDR_VAR 0 16
15059: PUSH
15060: CALL_OW 45
15064: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15065: LD_VAR 0 16
15069: PPUSH
15070: LD_VAR 0 1
15074: PPUSH
15075: LD_INT 0
15077: PPUSH
15078: CALL_OW 49
// if vc_control = 1 then
15082: LD_OWVAR 38
15086: PUSH
15087: LD_INT 1
15089: EQUAL
15090: IFFALSE 15147
// begin hc_gallery =  ;
15092: LD_ADDR_OWVAR 33
15096: PUSH
15097: LD_STRING 
15099: ST_TO_ADDR
// hc_name =  ;
15100: LD_ADDR_OWVAR 26
15104: PUSH
15105: LD_STRING 
15107: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15108: LD_INT 0
15110: PPUSH
15111: LD_INT 3
15113: PPUSH
15114: LD_VAR 0 4
15118: PPUSH
15119: CALL_OW 380
// un = CreateHuman ;
15123: LD_ADDR_VAR 0 15
15127: PUSH
15128: CALL_OW 44
15132: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15133: LD_VAR 0 15
15137: PPUSH
15138: LD_VAR 0 16
15142: PPUSH
15143: CALL_OW 52
// end ; i = i + 1 ;
15147: LD_ADDR_VAR 0 13
15151: PUSH
15152: LD_VAR 0 13
15156: PUSH
15157: LD_INT 1
15159: PLUS
15160: ST_TO_ADDR
// end ; if nation = 3 then
15161: LD_VAR 0 5
15165: PUSH
15166: LD_INT 3
15168: EQUAL
15169: IFFALSE 15575
// begin uc_side = side ;
15171: LD_ADDR_OWVAR 20
15175: PUSH
15176: LD_VAR 0 2
15180: ST_TO_ADDR
// uc_nation = nation ;
15181: LD_ADDR_OWVAR 21
15185: PUSH
15186: LD_VAR 0 5
15190: ST_TO_ADDR
// vc_engine = vehengine ;
15191: LD_ADDR_OWVAR 39
15195: PUSH
15196: LD_VAR 0 6
15200: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15201: LD_ADDR_OWVAR 38
15205: PUSH
15206: LD_VAR 0 7
15210: PUSH
15211: LD_INT 1
15213: PPUSH
15214: LD_VAR 0 7
15218: PPUSH
15219: CALL_OW 12
15223: ARRAY
15224: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15225: LD_ADDR_OWVAR 40
15229: PUSH
15230: LD_VAR 0 8
15234: PUSH
15235: LD_INT 1
15237: PPUSH
15238: LD_VAR 0 8
15242: PPUSH
15243: CALL_OW 12
15247: ARRAY
15248: ST_TO_ADDR
// for j = 1 to RuWeapons do
15249: LD_ADDR_VAR 0 14
15253: PUSH
15254: DOUBLE
15255: LD_INT 1
15257: DEC
15258: ST_TO_ADDR
15259: LD_VAR 0 8
15263: PUSH
15264: FOR_TO
15265: IFFALSE 15467
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15267: LD_VAR 0 8
15271: PUSH
15272: LD_VAR 0 14
15276: ARRAY
15277: PUSH
15278: LD_INT 42
15280: EQUAL
15281: PUSH
15282: LD_VAR 0 8
15286: PUSH
15287: LD_VAR 0 14
15291: ARRAY
15292: PUSH
15293: LD_INT 43
15295: EQUAL
15296: OR
15297: PUSH
15298: LD_VAR 0 8
15302: PUSH
15303: LD_VAR 0 14
15307: ARRAY
15308: PUSH
15309: LD_INT 44
15311: EQUAL
15312: OR
15313: PUSH
15314: LD_VAR 0 8
15318: PUSH
15319: LD_VAR 0 14
15323: ARRAY
15324: PUSH
15325: LD_INT 45
15327: EQUAL
15328: OR
15329: PUSH
15330: LD_VAR 0 8
15334: PUSH
15335: LD_VAR 0 14
15339: ARRAY
15340: PUSH
15341: LD_INT 49
15343: EQUAL
15344: OR
15345: IFFALSE 15394
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15347: LD_ADDR_VAR 0 17
15351: PUSH
15352: LD_INT 21
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: LD_INT 23
15360: PUSH
15361: LD_INT 24
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15370: LD_ADDR_OWVAR 37
15374: PUSH
15375: LD_VAR 0 17
15379: PUSH
15380: LD_INT 1
15382: PPUSH
15383: LD_VAR 0 17
15387: PPUSH
15388: CALL_OW 12
15392: ARRAY
15393: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15394: LD_VAR 0 8
15398: PUSH
15399: LD_VAR 0 14
15403: ARRAY
15404: PUSH
15405: LD_INT 46
15407: EQUAL
15408: PUSH
15409: LD_VAR 0 8
15413: PUSH
15414: LD_VAR 0 14
15418: ARRAY
15419: PUSH
15420: LD_INT 47
15422: EQUAL
15423: OR
15424: IFFALSE 15465
// begin ruChassisTab = [ 23 , 24 ] ;
15426: LD_ADDR_VAR 0 17
15430: PUSH
15431: LD_INT 23
15433: PUSH
15434: LD_INT 24
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15441: LD_ADDR_OWVAR 37
15445: PUSH
15446: LD_VAR 0 17
15450: PUSH
15451: LD_INT 1
15453: PPUSH
15454: LD_VAR 0 17
15458: PPUSH
15459: CALL_OW 12
15463: ARRAY
15464: ST_TO_ADDR
// end ; end ;
15465: GO 15264
15467: POP
15468: POP
// veh = CreateVehicle ;
15469: LD_ADDR_VAR 0 16
15473: PUSH
15474: CALL_OW 45
15478: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15479: LD_VAR 0 16
15483: PPUSH
15484: LD_VAR 0 1
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 49
// if vc_control = 1 then
15496: LD_OWVAR 38
15500: PUSH
15501: LD_INT 1
15503: EQUAL
15504: IFFALSE 15561
// begin hc_gallery =  ;
15506: LD_ADDR_OWVAR 33
15510: PUSH
15511: LD_STRING 
15513: ST_TO_ADDR
// hc_name =  ;
15514: LD_ADDR_OWVAR 26
15518: PUSH
15519: LD_STRING 
15521: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15522: LD_INT 0
15524: PPUSH
15525: LD_INT 3
15527: PPUSH
15528: LD_VAR 0 4
15532: PPUSH
15533: CALL_OW 380
// un = CreateHuman ;
15537: LD_ADDR_VAR 0 15
15541: PUSH
15542: CALL_OW 44
15546: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15547: LD_VAR 0 15
15551: PPUSH
15552: LD_VAR 0 16
15556: PPUSH
15557: CALL_OW 52
// end ; i = i + 1 ;
15561: LD_ADDR_VAR 0 13
15565: PUSH
15566: LD_VAR 0 13
15570: PUSH
15571: LD_INT 1
15573: PLUS
15574: ST_TO_ADDR
// end ; until i = vehCount ;
15575: LD_VAR 0 13
15579: PUSH
15580: LD_VAR 0 3
15584: EQUAL
15585: IFFALSE 14211
// repeat wait ( 0 0$1 ) ;
15587: LD_INT 35
15589: PPUSH
15590: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
15594: LD_ADDR_VAR 0 20
15598: PUSH
15599: LD_INT 22
15601: PUSH
15602: LD_VAR 0 2
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PUSH
15611: LD_INT 21
15613: PUSH
15614: LD_INT 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 24
15623: PUSH
15624: LD_INT 650
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: EMPTY
15632: LIST
15633: LIST
15634: LIST
15635: PPUSH
15636: CALL_OW 69
15640: ST_TO_ADDR
// if vehicleOK_list > 0 then
15641: LD_VAR 0 20
15645: PUSH
15646: LD_INT 0
15648: GREATER
15649: IFFALSE 15840
// begin for i in vehicleOK_list do
15651: LD_ADDR_VAR 0 13
15655: PUSH
15656: LD_VAR 0 20
15660: PUSH
15661: FOR_IN
15662: IFFALSE 15838
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15664: LD_ADDR_VAR 0 21
15668: PUSH
15669: LD_INT 22
15671: PUSH
15672: LD_VAR 0 11
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: PPUSH
15686: LD_VAR 0 13
15690: PPUSH
15691: CALL_OW 74
15695: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15696: LD_ADDR_VAR 0 22
15700: PUSH
15701: LD_INT 22
15703: PUSH
15704: LD_VAR 0 11
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 2
15715: PUSH
15716: LD_INT 59
15718: PUSH
15719: EMPTY
15720: LIST
15721: PUSH
15722: LD_INT 21
15724: PUSH
15725: LD_INT 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: LD_INT 21
15734: PUSH
15735: LD_INT 2
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: PUSH
15742: EMPTY
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: PUSH
15748: EMPTY
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: PPUSH
15755: CALL_OW 69
15759: PPUSH
15760: LD_VAR 0 13
15764: PPUSH
15765: CALL_OW 74
15769: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15770: LD_VAR 0 13
15774: PPUSH
15775: LD_VAR 0 21
15779: PPUSH
15780: CALL_OW 296
15784: PUSH
15785: LD_INT 8
15787: PLUS
15788: PUSH
15789: LD_VAR 0 13
15793: PPUSH
15794: LD_VAR 0 22
15798: PPUSH
15799: CALL_OW 296
15803: LESS
15804: IFFALSE 15822
// begin ComAttackUnit ( i , target1 ) ;
15806: LD_VAR 0 13
15810: PPUSH
15811: LD_VAR 0 21
15815: PPUSH
15816: CALL_OW 115
// end else
15820: GO 15836
// begin ComAttackUnit ( i , target2 ) ;
15822: LD_VAR 0 13
15826: PPUSH
15827: LD_VAR 0 22
15831: PPUSH
15832: CALL_OW 115
// end ; end ;
15836: GO 15661
15838: POP
15839: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
15840: LD_INT 22
15842: PUSH
15843: LD_VAR 0 2
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PUSH
15852: LD_INT 21
15854: PUSH
15855: LD_INT 2
15857: PUSH
15858: EMPTY
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PPUSH
15866: CALL_OW 69
15870: PUSH
15871: LD_INT 0
15873: EQUAL
15874: IFFALSE 15587
// end ;
15876: LD_VAR 0 12
15880: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
15881: LD_INT 0
15883: PPUSH
15884: PPUSH
15885: PPUSH
15886: PPUSH
15887: PPUSH
15888: PPUSH
15889: PPUSH
15890: PPUSH
15891: PPUSH
15892: PPUSH
15893: PPUSH
// for i = 1 to soldierCount do
15894: LD_ADDR_VAR 0 13
15898: PUSH
15899: DOUBLE
15900: LD_INT 1
15902: DEC
15903: ST_TO_ADDR
15904: LD_VAR 0 3
15908: PUSH
15909: FOR_TO
15910: IFFALSE 15992
// begin uc_side = side ;
15912: LD_ADDR_OWVAR 20
15916: PUSH
15917: LD_VAR 0 1
15921: ST_TO_ADDR
// uc_nation = nation ;
15922: LD_ADDR_OWVAR 21
15926: PUSH
15927: LD_VAR 0 2
15931: ST_TO_ADDR
// hc_name =  ;
15932: LD_ADDR_OWVAR 26
15936: PUSH
15937: LD_STRING 
15939: ST_TO_ADDR
// hc_gallery =  ;
15940: LD_ADDR_OWVAR 33
15944: PUSH
15945: LD_STRING 
15947: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
15948: LD_INT 0
15950: PPUSH
15951: LD_INT 1
15953: PPUSH
15954: LD_VAR 0 8
15958: PPUSH
15959: CALL_OW 380
// un = CreateHuman ;
15963: LD_ADDR_VAR 0 15
15967: PUSH
15968: CALL_OW 44
15972: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15973: LD_VAR 0 15
15977: PPUSH
15978: LD_VAR 0 9
15982: PPUSH
15983: LD_INT 0
15985: PPUSH
15986: CALL_OW 49
// end ;
15990: GO 15909
15992: POP
15993: POP
// for i = 1 to sniperCount do
15994: LD_ADDR_VAR 0 13
15998: PUSH
15999: DOUBLE
16000: LD_INT 1
16002: DEC
16003: ST_TO_ADDR
16004: LD_VAR 0 4
16008: PUSH
16009: FOR_TO
16010: IFFALSE 16092
// begin uc_side = side ;
16012: LD_ADDR_OWVAR 20
16016: PUSH
16017: LD_VAR 0 1
16021: ST_TO_ADDR
// uc_nation = nation ;
16022: LD_ADDR_OWVAR 21
16026: PUSH
16027: LD_VAR 0 2
16031: ST_TO_ADDR
// hc_name =  ;
16032: LD_ADDR_OWVAR 26
16036: PUSH
16037: LD_STRING 
16039: ST_TO_ADDR
// hc_gallery =  ;
16040: LD_ADDR_OWVAR 33
16044: PUSH
16045: LD_STRING 
16047: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
16048: LD_INT 0
16050: PPUSH
16051: LD_INT 5
16053: PPUSH
16054: LD_VAR 0 8
16058: PPUSH
16059: CALL_OW 380
// un = CreateHuman ;
16063: LD_ADDR_VAR 0 15
16067: PUSH
16068: CALL_OW 44
16072: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16073: LD_VAR 0 15
16077: PPUSH
16078: LD_VAR 0 9
16082: PPUSH
16083: LD_INT 0
16085: PPUSH
16086: CALL_OW 49
// end ;
16090: GO 16009
16092: POP
16093: POP
// for i = 1 to bazookCount do
16094: LD_ADDR_VAR 0 13
16098: PUSH
16099: DOUBLE
16100: LD_INT 1
16102: DEC
16103: ST_TO_ADDR
16104: LD_VAR 0 5
16108: PUSH
16109: FOR_TO
16110: IFFALSE 16192
// begin uc_side = side ;
16112: LD_ADDR_OWVAR 20
16116: PUSH
16117: LD_VAR 0 1
16121: ST_TO_ADDR
// uc_nation = nation ;
16122: LD_ADDR_OWVAR 21
16126: PUSH
16127: LD_VAR 0 2
16131: ST_TO_ADDR
// hc_name =  ;
16132: LD_ADDR_OWVAR 26
16136: PUSH
16137: LD_STRING 
16139: ST_TO_ADDR
// hc_gallery =  ;
16140: LD_ADDR_OWVAR 33
16144: PUSH
16145: LD_STRING 
16147: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
16148: LD_INT 0
16150: PPUSH
16151: LD_INT 9
16153: PPUSH
16154: LD_VAR 0 8
16158: PPUSH
16159: CALL_OW 380
// un = CreateHuman ;
16163: LD_ADDR_VAR 0 15
16167: PUSH
16168: CALL_OW 44
16172: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16173: LD_VAR 0 15
16177: PPUSH
16178: LD_VAR 0 9
16182: PPUSH
16183: LD_INT 0
16185: PPUSH
16186: CALL_OW 49
// end ;
16190: GO 16109
16192: POP
16193: POP
// for i = 1 to mortalCount do
16194: LD_ADDR_VAR 0 13
16198: PUSH
16199: DOUBLE
16200: LD_INT 1
16202: DEC
16203: ST_TO_ADDR
16204: LD_VAR 0 6
16208: PUSH
16209: FOR_TO
16210: IFFALSE 16292
// begin uc_side = side ;
16212: LD_ADDR_OWVAR 20
16216: PUSH
16217: LD_VAR 0 1
16221: ST_TO_ADDR
// uc_nation = nation ;
16222: LD_ADDR_OWVAR 21
16226: PUSH
16227: LD_VAR 0 2
16231: ST_TO_ADDR
// hc_name =  ;
16232: LD_ADDR_OWVAR 26
16236: PUSH
16237: LD_STRING 
16239: ST_TO_ADDR
// hc_gallery =  ;
16240: LD_ADDR_OWVAR 33
16244: PUSH
16245: LD_STRING 
16247: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
16248: LD_INT 0
16250: PPUSH
16251: LD_INT 8
16253: PPUSH
16254: LD_VAR 0 8
16258: PPUSH
16259: CALL_OW 380
// un = CreateHuman ;
16263: LD_ADDR_VAR 0 15
16267: PUSH
16268: CALL_OW 44
16272: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16273: LD_VAR 0 15
16277: PPUSH
16278: LD_VAR 0 9
16282: PPUSH
16283: LD_INT 0
16285: PPUSH
16286: CALL_OW 49
// end ;
16290: GO 16209
16292: POP
16293: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
16294: LD_ADDR_VAR 0 18
16298: PUSH
16299: LD_INT 22
16301: PUSH
16302: LD_VAR 0 1
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 2
16313: PUSH
16314: LD_INT 25
16316: PUSH
16317: LD_INT 1
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: PUSH
16324: LD_INT 25
16326: PUSH
16327: LD_INT 5
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 25
16336: PUSH
16337: LD_INT 8
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: LD_INT 25
16346: PUSH
16347: LD_INT 9
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PPUSH
16365: CALL_OW 69
16369: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16370: LD_ADDR_VAR 0 17
16374: PUSH
16375: LD_INT 22
16377: PUSH
16378: LD_VAR 0 1
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 25
16389: PUSH
16390: LD_INT 4
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 69
16405: ST_TO_ADDR
// for i in medic_list do
16406: LD_ADDR_VAR 0 13
16410: PUSH
16411: LD_VAR 0 17
16415: PUSH
16416: FOR_IN
16417: IFFALSE 16435
// ComMoveToArea ( i , healArea ) ;
16419: LD_VAR 0 13
16423: PPUSH
16424: LD_VAR 0 10
16428: PPUSH
16429: CALL_OW 113
16433: GO 16416
16435: POP
16436: POP
// repeat wait ( 0 0$1 ) ;
16437: LD_INT 35
16439: PPUSH
16440: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16444: LD_ADDR_VAR 0 16
16448: PUSH
16449: LD_INT 22
16451: PUSH
16452: LD_VAR 0 1
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 1
16463: PUSH
16464: LD_INT 3
16466: PUSH
16467: LD_INT 24
16469: PUSH
16470: LD_INT 550
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 24
16483: PUSH
16484: LD_INT 250
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16505: LD_ADDR_VAR 0 18
16509: PUSH
16510: LD_INT 22
16512: PUSH
16513: LD_VAR 0 1
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: LD_INT 2
16524: PUSH
16525: LD_INT 25
16527: PUSH
16528: LD_INT 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 25
16537: PUSH
16538: LD_INT 5
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 25
16547: PUSH
16548: LD_INT 8
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 25
16557: PUSH
16558: LD_INT 9
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: EMPTY
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: PUSH
16572: LD_INT 24
16574: PUSH
16575: LD_INT 1000
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: PPUSH
16587: CALL_OW 69
16591: ST_TO_ADDR
// if medicCount > 0 then
16592: LD_VAR 0 7
16596: PUSH
16597: LD_INT 0
16599: GREATER
16600: IFFALSE 16674
// begin if damageUnit_list > 0 then
16602: LD_VAR 0 16
16606: PUSH
16607: LD_INT 0
16609: GREATER
16610: IFFALSE 16674
// begin for i in damageUnit_list do
16612: LD_ADDR_VAR 0 13
16616: PUSH
16617: LD_VAR 0 16
16621: PUSH
16622: FOR_IN
16623: IFFALSE 16672
// begin ComMoveToArea ( i , healArea ) ;
16625: LD_VAR 0 13
16629: PPUSH
16630: LD_VAR 0 10
16634: PPUSH
16635: CALL_OW 113
// for j in medic_list do
16639: LD_ADDR_VAR 0 14
16643: PUSH
16644: LD_VAR 0 17
16648: PUSH
16649: FOR_IN
16650: IFFALSE 16668
// AddComHeal ( j , i ) ;
16652: LD_VAR 0 14
16656: PPUSH
16657: LD_VAR 0 13
16661: PPUSH
16662: CALL_OW 188
16666: GO 16649
16668: POP
16669: POP
// end ;
16670: GO 16622
16672: POP
16673: POP
// end ; end ; for i in soldiersOK_list do
16674: LD_ADDR_VAR 0 13
16678: PUSH
16679: LD_VAR 0 18
16683: PUSH
16684: FOR_IN
16685: IFFALSE 16861
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16687: LD_ADDR_VAR 0 21
16691: PUSH
16692: LD_INT 22
16694: PUSH
16695: LD_VAR 0 11
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PPUSH
16704: CALL_OW 69
16708: PPUSH
16709: LD_VAR 0 13
16713: PPUSH
16714: CALL_OW 74
16718: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16719: LD_ADDR_VAR 0 22
16723: PUSH
16724: LD_INT 22
16726: PUSH
16727: LD_VAR 0 11
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 2
16738: PUSH
16739: LD_INT 59
16741: PUSH
16742: EMPTY
16743: LIST
16744: PUSH
16745: LD_INT 21
16747: PUSH
16748: LD_INT 1
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: PUSH
16755: LD_INT 21
16757: PUSH
16758: LD_INT 2
16760: PUSH
16761: EMPTY
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PUSH
16771: EMPTY
16772: LIST
16773: LIST
16774: PUSH
16775: EMPTY
16776: LIST
16777: PPUSH
16778: CALL_OW 69
16782: PPUSH
16783: LD_VAR 0 13
16787: PPUSH
16788: CALL_OW 74
16792: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16793: LD_VAR 0 13
16797: PPUSH
16798: LD_VAR 0 21
16802: PPUSH
16803: CALL_OW 296
16807: PUSH
16808: LD_INT 8
16810: PLUS
16811: PUSH
16812: LD_VAR 0 13
16816: PPUSH
16817: LD_VAR 0 22
16821: PPUSH
16822: CALL_OW 296
16826: LESS
16827: IFFALSE 16845
// begin ComAttackUnit ( i , target1 ) ;
16829: LD_VAR 0 13
16833: PPUSH
16834: LD_VAR 0 21
16838: PPUSH
16839: CALL_OW 115
// end else
16843: GO 16859
// begin ComAttackUnit ( i , target2 ) ;
16845: LD_VAR 0 13
16849: PPUSH
16850: LD_VAR 0 22
16854: PPUSH
16855: CALL_OW 115
// end ; end ;
16859: GO 16684
16861: POP
16862: POP
// for i in soldiersOK_list do
16863: LD_ADDR_VAR 0 13
16867: PUSH
16868: LD_VAR 0 18
16872: PUSH
16873: FOR_IN
16874: IFFALSE 17050
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16876: LD_ADDR_VAR 0 21
16880: PUSH
16881: LD_INT 22
16883: PUSH
16884: LD_VAR 0 11
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 69
16897: PPUSH
16898: LD_VAR 0 13
16902: PPUSH
16903: CALL_OW 74
16907: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16908: LD_ADDR_VAR 0 22
16912: PUSH
16913: LD_INT 22
16915: PUSH
16916: LD_VAR 0 11
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: LD_INT 2
16927: PUSH
16928: LD_INT 59
16930: PUSH
16931: EMPTY
16932: LIST
16933: PUSH
16934: LD_INT 21
16936: PUSH
16937: LD_INT 1
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 21
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: PPUSH
16967: CALL_OW 69
16971: PPUSH
16972: LD_VAR 0 13
16976: PPUSH
16977: CALL_OW 74
16981: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16982: LD_VAR 0 13
16986: PPUSH
16987: LD_VAR 0 21
16991: PPUSH
16992: CALL_OW 296
16996: PUSH
16997: LD_INT 8
16999: PLUS
17000: PUSH
17001: LD_VAR 0 13
17005: PPUSH
17006: LD_VAR 0 22
17010: PPUSH
17011: CALL_OW 296
17015: LESS
17016: IFFALSE 17034
// begin ComAttackUnit ( i , target1 ) ;
17018: LD_VAR 0 13
17022: PPUSH
17023: LD_VAR 0 21
17027: PPUSH
17028: CALL_OW 115
// end else
17032: GO 17048
// begin ComAttackUnit ( i , target2 ) ;
17034: LD_VAR 0 13
17038: PPUSH
17039: LD_VAR 0 22
17043: PPUSH
17044: CALL_OW 115
// end ; end ;
17048: GO 16873
17050: POP
17051: POP
// until soldiersOK_list = [ ] ;
17052: LD_VAR 0 18
17056: PUSH
17057: EMPTY
17058: EQUAL
17059: IFFALSE 16437
// end ;
17061: LD_VAR 0 12
17065: RET
// export function TameApemans ; var i , j ; begin
17066: LD_INT 0
17068: PPUSH
17069: PPUSH
17070: PPUSH
// repeat wait ( 0 0$1 ) ;
17071: LD_INT 35
17073: PPUSH
17074: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
17078: LD_ADDR_VAR 0 2
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_INT 2
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 25
17095: PUSH
17096: LD_INT 4
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PPUSH
17107: CALL_OW 69
17111: PUSH
17112: FOR_IN
17113: IFFALSE 17190
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17115: LD_ADDR_VAR 0 3
17119: PUSH
17120: LD_INT 5
17122: PPUSH
17123: LD_INT 22
17125: PUSH
17126: LD_INT 0
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: PUSH
17133: LD_INT 25
17135: PUSH
17136: LD_INT 12
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PPUSH
17147: CALL_OW 70
17151: PUSH
17152: FOR_IN
17153: IFFALSE 17186
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17155: LD_VAR 0 2
17159: PPUSH
17160: LD_VAR 0 3
17164: PPUSH
17165: CALL_OW 250
17169: PPUSH
17170: LD_VAR 0 3
17174: PPUSH
17175: CALL_OW 251
17179: PPUSH
17180: CALL_OW 191
// end ;
17184: GO 17152
17186: POP
17187: POP
// end ;
17188: GO 17112
17190: POP
17191: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17192: LD_INT 22
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 25
17204: PUSH
17205: LD_INT 4
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PPUSH
17216: CALL_OW 69
17220: PUSH
17221: LD_INT 0
17223: EQUAL
17224: PUSH
17225: LD_INT 5
17227: PPUSH
17228: LD_INT 22
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: LD_INT 25
17240: PUSH
17241: LD_INT 12
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 70
17256: PUSH
17257: LD_INT 0
17259: EQUAL
17260: OR
17261: IFFALSE 17071
// wait ( 0 0$30 ) ;
17263: LD_INT 1050
17265: PPUSH
17266: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
17270: LD_ADDR_VAR 0 2
17274: PUSH
17275: LD_INT 22
17277: PUSH
17278: LD_INT 2
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: LD_INT 25
17287: PUSH
17288: LD_INT 12
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PPUSH
17299: CALL_OW 69
17303: PUSH
17304: FOR_IN
17305: IFFALSE 17369
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
17307: LD_VAR 0 2
17311: PPUSH
17312: LD_EXP 43
17316: PPUSH
17317: CALL_OW 250
17321: PPUSH
17322: LD_EXP 43
17326: PPUSH
17327: CALL_OW 251
17331: PPUSH
17332: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
17336: LD_VAR 0 2
17340: PPUSH
17341: LD_INT 16
17343: PUSH
17344: LD_INT 15
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: LD_INT 1
17353: PPUSH
17354: LD_INT 2
17356: PPUSH
17357: CALL_OW 12
17361: ARRAY
17362: PPUSH
17363: CALL_OW 336
// end ;
17367: GO 17304
17369: POP
17370: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
17371: LD_ADDR_VAR 0 2
17375: PUSH
17376: LD_INT 22
17378: PUSH
17379: LD_INT 2
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 25
17388: PUSH
17389: LD_INT 4
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PPUSH
17400: CALL_OW 69
17404: PUSH
17405: FOR_IN
17406: IFFALSE 17452
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
17408: LD_VAR 0 2
17412: PPUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 30
17425: PUSH
17426: LD_INT 8
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: PPUSH
17437: CALL_OW 69
17441: PUSH
17442: LD_INT 1
17444: ARRAY
17445: PPUSH
17446: CALL_OW 120
17450: GO 17405
17452: POP
17453: POP
// end ;
17454: LD_VAR 0 1
17458: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
17459: LD_INT 0
17461: PPUSH
17462: PPUSH
17463: PPUSH
17464: PPUSH
17465: PPUSH
17466: PPUSH
17467: PPUSH
17468: PPUSH
17469: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
17470: LD_INT 22
17472: PUSH
17473: LD_VAR 0 1
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 21
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PPUSH
17496: CALL_OW 69
17500: PUSH
17501: LD_VAR 0 3
17505: LESSEQUAL
17506: IFFALSE 17650
// for i = 1 to vehCount do
17508: LD_ADDR_VAR 0 10
17512: PUSH
17513: DOUBLE
17514: LD_INT 1
17516: DEC
17517: ST_TO_ADDR
17518: LD_VAR 0 3
17522: PUSH
17523: FOR_TO
17524: IFFALSE 17648
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
17526: LD_ADDR_VAR 0 12
17530: PUSH
17531: LD_VAR 0 5
17535: PUSH
17536: LD_INT 1
17538: PPUSH
17539: LD_VAR 0 5
17543: PPUSH
17544: CALL_OW 12
17548: ARRAY
17549: ST_TO_ADDR
// if randWeapon = 46 then
17550: LD_VAR 0 12
17554: PUSH
17555: LD_INT 46
17557: EQUAL
17558: IFFALSE 17603
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
17560: LD_VAR 0 2
17564: PPUSH
17565: LD_INT 24
17567: PPUSH
17568: LD_VAR 0 6
17572: PPUSH
17573: LD_VAR 0 7
17577: PUSH
17578: LD_INT 1
17580: PPUSH
17581: LD_VAR 0 7
17585: PPUSH
17586: CALL_OW 12
17590: ARRAY
17591: PPUSH
17592: LD_VAR 0 12
17596: PPUSH
17597: CALL_OW 185
17601: GO 17646
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
17603: LD_VAR 0 2
17607: PPUSH
17608: LD_VAR 0 8
17612: PPUSH
17613: LD_VAR 0 6
17617: PPUSH
17618: LD_VAR 0 7
17622: PUSH
17623: LD_INT 1
17625: PPUSH
17626: LD_VAR 0 7
17630: PPUSH
17631: CALL_OW 12
17635: ARRAY
17636: PPUSH
17637: LD_VAR 0 12
17641: PPUSH
17642: CALL_OW 185
// end ;
17646: GO 17523
17648: POP
17649: POP
// repeat wait ( 0 0$1 ) ;
17650: LD_INT 35
17652: PPUSH
17653: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
17657: LD_INT 22
17659: PUSH
17660: LD_VAR 0 1
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 21
17671: PUSH
17672: LD_INT 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 24
17681: PUSH
17682: LD_INT 250
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: PPUSH
17694: CALL_OW 69
17698: PUSH
17699: LD_VAR 0 3
17703: GREATEREQUAL
17704: IFFALSE 17650
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
17706: LD_INT 22
17708: PUSH
17709: LD_VAR 0 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: LD_INT 21
17720: PUSH
17721: LD_INT 2
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: PUSH
17728: LD_INT 24
17730: PUSH
17731: LD_INT 250
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: LIST
17742: PPUSH
17743: CALL_OW 69
17747: PUSH
17748: LD_VAR 0 3
17752: GREATEREQUAL
17753: IFFALSE 18096
// begin repeat begin wait ( 0 0$1 ) ;
17755: LD_INT 35
17757: PPUSH
17758: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
17762: LD_INT 22
17764: PUSH
17765: LD_VAR 0 1
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 21
17776: PUSH
17777: LD_INT 2
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: LD_INT 24
17786: PUSH
17787: LD_INT 651
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PUSH
17804: LD_INT 0
17806: GREATER
17807: IFFALSE 18035
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
17809: LD_ADDR_VAR 0 10
17813: PUSH
17814: LD_INT 22
17816: PUSH
17817: LD_VAR 0 1
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: LD_INT 21
17828: PUSH
17829: LD_INT 2
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 24
17838: PUSH
17839: LD_INT 651
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: LIST
17850: PPUSH
17851: CALL_OW 69
17855: PUSH
17856: FOR_IN
17857: IFFALSE 18033
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17859: LD_ADDR_VAR 0 16
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_VAR 0 4
17871: PUSH
17872: EMPTY
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL_OW 69
17880: PPUSH
17881: LD_VAR 0 10
17885: PPUSH
17886: CALL_OW 74
17890: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17891: LD_ADDR_VAR 0 17
17895: PUSH
17896: LD_INT 22
17898: PUSH
17899: LD_VAR 0 4
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PUSH
17908: LD_INT 2
17910: PUSH
17911: LD_INT 59
17913: PUSH
17914: EMPTY
17915: LIST
17916: PUSH
17917: LD_INT 21
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 21
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: PPUSH
17955: LD_VAR 0 10
17959: PPUSH
17960: CALL_OW 74
17964: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17965: LD_VAR 0 10
17969: PPUSH
17970: LD_VAR 0 16
17974: PPUSH
17975: CALL_OW 296
17979: PUSH
17980: LD_INT 8
17982: PLUS
17983: PUSH
17984: LD_VAR 0 10
17988: PPUSH
17989: LD_VAR 0 17
17993: PPUSH
17994: CALL_OW 296
17998: LESS
17999: IFFALSE 18017
// begin ComAttackUnit ( i , target1 ) ;
18001: LD_VAR 0 10
18005: PPUSH
18006: LD_VAR 0 16
18010: PPUSH
18011: CALL_OW 115
// end else
18015: GO 18031
// begin ComAttackUnit ( i , target2 ) ;
18017: LD_VAR 0 10
18021: PPUSH
18022: LD_VAR 0 17
18026: PPUSH
18027: CALL_OW 115
// end ; end ;
18031: GO 17856
18033: POP
18034: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
18035: LD_INT 22
18037: PUSH
18038: LD_VAR 0 1
18042: PUSH
18043: EMPTY
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 21
18049: PUSH
18050: LD_INT 2
18052: PUSH
18053: EMPTY
18054: LIST
18055: LIST
18056: PUSH
18057: EMPTY
18058: LIST
18059: LIST
18060: PPUSH
18061: CALL_OW 69
18065: PUSH
18066: LD_INT 0
18068: EQUAL
18069: PUSH
18070: LD_INT 22
18072: PUSH
18073: LD_VAR 0 4
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: EMPTY
18083: LIST
18084: PPUSH
18085: CALL_OW 69
18089: PUSH
18090: LD_INT 0
18092: EQUAL
18093: OR
18094: IFFALSE 17755
// end ; end ; end_of_file
18096: LD_VAR 0 9
18100: RET
// every 0 0$1 trigger russianAI = 1 do
18101: LD_EXP 39
18105: PUSH
18106: LD_INT 1
18108: EQUAL
18109: IFFALSE 18328
18111: GO 18113
18113: DISABLE
// begin enable ;
18114: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
18115: LD_INT 3
18117: PPUSH
18118: LD_EXP 30
18122: PPUSH
18123: CALL 13116 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
18127: LD_INT 3
18129: PPUSH
18130: LD_EXP 42
18134: PPUSH
18135: CALL 13423 0 2
// if ruPossition = 1 then
18139: LD_EXP 41
18143: PUSH
18144: LD_INT 1
18146: EQUAL
18147: IFFALSE 18202
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
18149: LD_INT 3
18151: PPUSH
18152: LD_INT 13
18154: PPUSH
18155: LD_INT 10
18157: PPUSH
18158: LD_INT 22
18160: PUSH
18161: LD_INT 3
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: LD_INT 21
18170: PUSH
18171: LD_INT 3
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 30
18180: PUSH
18181: LD_INT 8
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: LIST
18192: PPUSH
18193: CALL_OW 69
18197: PPUSH
18198: CALL 13629 0 4
// if ruPossition = 2 then
18202: LD_EXP 41
18206: PUSH
18207: LD_INT 2
18209: EQUAL
18210: IFFALSE 18265
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
18212: LD_INT 3
18214: PPUSH
18215: LD_INT 14
18217: PPUSH
18218: LD_INT 11
18220: PPUSH
18221: LD_INT 22
18223: PUSH
18224: LD_INT 3
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: PUSH
18231: LD_INT 21
18233: PUSH
18234: LD_INT 3
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PUSH
18241: LD_INT 30
18243: PUSH
18244: LD_INT 8
18246: PUSH
18247: EMPTY
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: LIST
18255: PPUSH
18256: CALL_OW 69
18260: PPUSH
18261: CALL 13629 0 4
// if ruPossition = 3 then
18265: LD_EXP 41
18269: PUSH
18270: LD_INT 3
18272: EQUAL
18273: IFFALSE 18328
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
18275: LD_INT 3
18277: PPUSH
18278: LD_INT 15
18280: PPUSH
18281: LD_INT 12
18283: PPUSH
18284: LD_INT 22
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 21
18296: PUSH
18297: LD_INT 3
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 30
18306: PUSH
18307: LD_INT 8
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 69
18323: PPUSH
18324: CALL 13629 0 4
// end ;
18328: END
// every 0 0$1 do
18329: GO 18331
18331: DISABLE
// begin enable ;
18332: ENABLE
// if ruPossition = 1 then
18333: LD_EXP 41
18337: PUSH
18338: LD_INT 1
18340: EQUAL
18341: IFFALSE 18353
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
18343: LD_INT 3
18345: PPUSH
18346: LD_INT 10
18348: PPUSH
18349: CALL 12767 0 2
// if ruPossition = 2 then
18353: LD_EXP 41
18357: PUSH
18358: LD_INT 2
18360: EQUAL
18361: IFFALSE 18373
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
18363: LD_INT 3
18365: PPUSH
18366: LD_INT 11
18368: PPUSH
18369: CALL 12767 0 2
// if ruPossition = 3 then
18373: LD_EXP 41
18377: PUSH
18378: LD_INT 3
18380: EQUAL
18381: IFFALSE 18393
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
18383: LD_INT 3
18385: PPUSH
18386: LD_INT 12
18388: PPUSH
18389: CALL 12767 0 2
// IntBazooka ( 3 , 1 ) ;
18393: LD_INT 3
18395: PPUSH
18396: LD_INT 1
18398: PPUSH
18399: CALL 11586 0 2
// IntBazooka ( 6 , 1 ) ;
18403: LD_INT 6
18405: PPUSH
18406: LD_INT 1
18408: PPUSH
18409: CALL 11586 0 2
// end ;
18413: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
18414: LD_EXP 39
18418: PUSH
18419: LD_INT 1
18421: EQUAL
18422: PUSH
18423: LD_EXP 35
18427: PPUSH
18428: CALL_OW 302
18432: AND
18433: PUSH
18434: LD_EXP 35
18438: PPUSH
18439: CALL_OW 255
18443: PUSH
18444: LD_INT 3
18446: EQUAL
18447: AND
18448: PUSH
18449: LD_INT 22
18451: PUSH
18452: LD_INT 3
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 21
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: LD_INT 33
18471: PUSH
18472: LD_INT 3
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: LIST
18483: PPUSH
18484: CALL_OW 69
18488: PUSH
18489: LD_INT 0
18491: EQUAL
18492: AND
18493: IFFALSE 18701
18495: GO 18497
18497: DISABLE
// begin enable ;
18498: ENABLE
// if Difficulty = 1 then
18499: LD_OWVAR 67
18503: PUSH
18504: LD_INT 1
18506: EQUAL
18507: IFFALSE 18569
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
18509: LD_INT 3
18511: PPUSH
18512: LD_EXP 35
18516: PPUSH
18517: LD_INT 5
18519: PPUSH
18520: LD_INT 8
18522: PPUSH
18523: CALL_OW 12
18527: PPUSH
18528: LD_INT 1
18530: PPUSH
18531: LD_INT 43
18533: PUSH
18534: LD_INT 44
18536: PUSH
18537: LD_INT 45
18539: PUSH
18540: LD_INT 46
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: LD_INT 1
18554: PUSH
18555: LD_INT 3
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PPUSH
18562: LD_INT 22
18564: PPUSH
18565: CALL 17459 0 8
// if Difficulty = 2 then
18569: LD_OWVAR 67
18573: PUSH
18574: LD_INT 2
18576: EQUAL
18577: IFFALSE 18635
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
18579: LD_INT 3
18581: PPUSH
18582: LD_EXP 35
18586: PPUSH
18587: LD_INT 6
18589: PPUSH
18590: LD_INT 8
18592: PPUSH
18593: CALL_OW 12
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: LD_INT 44
18603: PUSH
18604: LD_INT 45
18606: PUSH
18607: LD_INT 46
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: PPUSH
18615: LD_INT 1
18617: PPUSH
18618: LD_INT 1
18620: PUSH
18621: LD_INT 3
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: LD_INT 22
18630: PPUSH
18631: CALL 17459 0 8
// if Difficulty = 3 then
18635: LD_OWVAR 67
18639: PUSH
18640: LD_INT 3
18642: EQUAL
18643: IFFALSE 18701
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
18645: LD_INT 3
18647: PPUSH
18648: LD_EXP 35
18652: PPUSH
18653: LD_INT 7
18655: PPUSH
18656: LD_INT 8
18658: PPUSH
18659: CALL_OW 12
18663: PPUSH
18664: LD_INT 1
18666: PPUSH
18667: LD_INT 44
18669: PUSH
18670: LD_INT 45
18672: PUSH
18673: LD_INT 46
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: LIST
18680: PPUSH
18681: LD_INT 1
18683: PPUSH
18684: LD_INT 1
18686: PUSH
18687: LD_INT 3
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PPUSH
18694: LD_INT 22
18696: PPUSH
18697: CALL 17459 0 8
// end ; end_of_file
18701: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
18702: LD_VAR 0 1
18706: PPUSH
18707: CALL_OW 255
18711: PUSH
18712: LD_INT 4
18714: EQUAL
18715: IFFALSE 18729
// SetBName ( building , epsilon ) ;
18717: LD_VAR 0 1
18721: PPUSH
18722: LD_STRING epsilon
18724: PPUSH
18725: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
18729: LD_VAR 0 1
18733: PPUSH
18734: CALL_OW 255
18738: PUSH
18739: LD_INT 1
18741: EQUAL
18742: PUSH
18743: LD_VAR 0 1
18747: PPUSH
18748: CALL_OW 266
18752: PUSH
18753: LD_INT 0
18755: EQUAL
18756: AND
18757: IFFALSE 18771
// SetBName ( building , epsilon ) ;
18759: LD_VAR 0 1
18763: PPUSH
18764: LD_STRING epsilon
18766: PPUSH
18767: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
18771: LD_VAR 0 1
18775: PPUSH
18776: CALL_OW 255
18780: PUSH
18781: LD_INT 3
18783: EQUAL
18784: PUSH
18785: LD_VAR 0 1
18789: PPUSH
18790: CALL_OW 266
18794: PUSH
18795: LD_INT 0
18797: EQUAL
18798: AND
18799: IFFALSE 18813
// SetBName ( building , chuikov ) ;
18801: LD_VAR 0 1
18805: PPUSH
18806: LD_STRING chuikov
18808: PPUSH
18809: CALL_OW 500
// if GetSide ( building ) = 2 then
18813: LD_VAR 0 1
18817: PPUSH
18818: CALL_OW 255
18822: PUSH
18823: LD_INT 2
18825: EQUAL
18826: IFFALSE 18882
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18828: LD_VAR 0 1
18832: PPUSH
18833: CALL_OW 266
18837: PUSH
18838: LD_INT 6
18840: EQUAL
18841: PUSH
18842: LD_VAR 0 1
18846: PPUSH
18847: CALL_OW 266
18851: PUSH
18852: LD_INT 9
18854: EQUAL
18855: OR
18856: IFFALSE 18882
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18858: LD_VAR 0 1
18862: PPUSH
18863: LD_INT 10
18865: PPUSH
18866: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18870: LD_VAR 0 1
18874: PPUSH
18875: LD_INT 11
18877: PPUSH
18878: CALL_OW 207
// end ; end ; end ;
18882: PPOPN 2
18884: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
18885: LD_VAR 0 1
18889: PUSH
18890: LD_INT 22
18892: PUSH
18893: LD_INT 3
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PUSH
18900: LD_INT 23
18902: PUSH
18903: LD_INT 3
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: PUSH
18910: LD_INT 21
18912: PUSH
18913: LD_INT 2
18915: PUSH
18916: EMPTY
18917: LIST
18918: LIST
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: LIST
18924: PPUSH
18925: CALL_OW 69
18929: IN
18930: PUSH
18931: LD_EXP 56
18935: NOT
18936: AND
18937: IFFALSE 18968
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
18939: LD_ADDR_EXP 56
18943: PUSH
18944: LD_VAR 0 1
18948: PPUSH
18949: CALL_OW 250
18953: PUSH
18954: LD_VAR 0 1
18958: PPUSH
18959: CALL_OW 251
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: ST_TO_ADDR
// end ;
18968: PPOPN 1
18970: END
// on BuildingComplete ( building ) do var i ;
18971: LD_INT 0
18973: PPUSH
// begin if GetSide ( building ) = 1 then
18974: LD_VAR 0 1
18978: PPUSH
18979: CALL_OW 255
18983: PUSH
18984: LD_INT 1
18986: EQUAL
18987: IFFALSE 19187
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
18989: LD_INT 22
18991: PUSH
18992: LD_INT 1
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: LD_INT 30
19004: PUSH
19005: LD_INT 7
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 30
19014: PUSH
19015: LD_INT 8
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 30
19027: PUSH
19028: LD_INT 11
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: LD_INT 2
19040: PUSH
19041: LD_INT 30
19043: PUSH
19044: LD_INT 26
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 27
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 30
19063: PUSH
19064: LD_INT 28
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: PPUSH
19096: CALL_OW 69
19100: PUSH
19101: LD_INT 0
19103: GREATER
19104: PUSH
19105: LD_INT 22
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 2
19117: PUSH
19118: LD_INT 30
19120: PUSH
19121: LD_INT 26
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: LD_INT 30
19130: PUSH
19131: LD_INT 27
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 30
19140: PUSH
19141: LD_INT 28
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: PUSH
19163: LD_INT 0
19165: GREATER
19166: AND
19167: PUSH
19168: LD_EXP 58
19172: PUSH
19173: LD_INT 0
19175: EQUAL
19176: AND
19177: IFFALSE 19187
// eventVar1 = 1 ;
19179: LD_ADDR_EXP 58
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
19187: LD_VAR 0 1
19191: PPUSH
19192: CALL_OW 255
19196: PUSH
19197: LD_INT 3
19199: EQUAL
19200: IFFALSE 19680
// begin if GetBType ( building ) = b_depot then
19202: LD_VAR 0 1
19206: PPUSH
19207: CALL_OW 266
19211: PUSH
19212: LD_INT 0
19214: EQUAL
19215: IFFALSE 19287
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
19217: LD_VAR 0 1
19221: PPUSH
19222: CALL_OW 274
19226: PPUSH
19227: LD_INT 1
19229: PPUSH
19230: LD_INT 5000
19232: PPUSH
19233: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 274
19246: PPUSH
19247: LD_INT 2
19249: PPUSH
19250: LD_INT 5000
19252: PPUSH
19253: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
19257: LD_VAR 0 1
19261: PPUSH
19262: CALL_OW 274
19266: PPUSH
19267: LD_INT 3
19269: PPUSH
19270: LD_INT 5000
19272: PPUSH
19273: CALL_OW 277
// ruDepot = building ;
19277: LD_ADDR_EXP 30
19281: PUSH
19282: LD_VAR 0 1
19286: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 266
19296: PUSH
19297: LD_INT 0
19299: EQUAL
19300: PUSH
19301: LD_VAR 0 1
19305: PPUSH
19306: CALL_OW 266
19310: PUSH
19311: LD_INT 2
19313: EQUAL
19314: OR
19315: PUSH
19316: LD_VAR 0 1
19320: PPUSH
19321: CALL_OW 266
19325: PUSH
19326: LD_INT 4
19328: EQUAL
19329: OR
19330: IFFALSE 19341
// ComUpgrade ( building ) ;
19332: LD_VAR 0 1
19336: PPUSH
19337: CALL_OW 146
// if GetBType ( building ) = b_lab then
19341: LD_VAR 0 1
19345: PPUSH
19346: CALL_OW 266
19350: PUSH
19351: LD_INT 6
19353: EQUAL
19354: IFFALSE 19557
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
19356: LD_INT 22
19358: PUSH
19359: LD_INT 3
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_INT 30
19368: PUSH
19369: LD_INT 8
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PPUSH
19380: CALL_OW 69
19384: PUSH
19385: LD_INT 0
19387: EQUAL
19388: IFFALSE 19426
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19390: LD_VAR 0 1
19394: PPUSH
19395: LD_INT 10
19397: PPUSH
19398: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19402: LD_VAR 0 1
19406: PPUSH
19407: LD_INT 12
19409: PPUSH
19410: CALL_OW 207
// ruLab1 = building ;
19414: LD_ADDR_EXP 31
19418: PUSH
19419: LD_VAR 0 1
19423: ST_TO_ADDR
// end else
19424: GO 19460
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
19426: LD_VAR 0 1
19430: PPUSH
19431: LD_INT 11
19433: PPUSH
19434: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
19438: LD_VAR 0 1
19442: PPUSH
19443: LD_INT 14
19445: PPUSH
19446: CALL_OW 207
// ruLab2 = building ;
19450: LD_ADDR_EXP 32
19454: PUSH
19455: LD_VAR 0 1
19459: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
19460: LD_INT 3
19462: PPUSH
19463: LD_VAR 0 1
19467: PPUSH
19468: LD_INT 3
19470: PPUSH
19471: CALL 12682 0 3
// if ruDestroyedBuildings > 0 then
19475: LD_EXP 42
19479: PUSH
19480: LD_INT 0
19482: GREATER
19483: IFFALSE 19557
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19485: LD_ADDR_EXP 42
19489: PUSH
19490: LD_EXP 42
19494: PPUSH
19495: LD_INT 1
19497: PPUSH
19498: CALL_OW 3
19502: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19503: LD_ADDR_EXP 42
19507: PUSH
19508: LD_EXP 42
19512: PPUSH
19513: LD_INT 1
19515: PPUSH
19516: CALL_OW 3
19520: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19521: LD_ADDR_EXP 42
19525: PUSH
19526: LD_EXP 42
19530: PPUSH
19531: LD_INT 1
19533: PPUSH
19534: CALL_OW 3
19538: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19539: LD_ADDR_EXP 42
19543: PUSH
19544: LD_EXP 42
19548: PPUSH
19549: LD_INT 1
19551: PPUSH
19552: CALL_OW 3
19556: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 266
19566: PUSH
19567: LD_INT 32
19569: EQUAL
19570: IFFALSE 19607
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_INT 44
19579: PUSH
19580: LD_INT 45
19582: PUSH
19583: LD_INT 46
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 1
19593: PPUSH
19594: LD_INT 3
19596: PPUSH
19597: CALL_OW 12
19601: ARRAY
19602: PPUSH
19603: CALL_OW 208
// if GetBType ( building ) = b_turret then
19607: LD_VAR 0 1
19611: PPUSH
19612: CALL_OW 266
19616: PUSH
19617: LD_INT 33
19619: EQUAL
19620: IFFALSE 19657
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19622: LD_VAR 0 1
19626: PPUSH
19627: LD_INT 44
19629: PUSH
19630: LD_INT 46
19632: PUSH
19633: LD_INT 46
19635: PUSH
19636: EMPTY
19637: LIST
19638: LIST
19639: LIST
19640: PUSH
19641: LD_INT 1
19643: PPUSH
19644: LD_INT 3
19646: PPUSH
19647: CALL_OW 12
19651: ARRAY
19652: PPUSH
19653: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19657: LD_VAR 0 1
19661: PPUSH
19662: CALL_OW 266
19666: PUSH
19667: LD_INT 24
19669: EQUAL
19670: IFFALSE 19680
// russianAI = 1 ;
19672: LD_ADDR_EXP 39
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 255
19689: PUSH
19690: LD_INT 2
19692: EQUAL
19693: IFFALSE 20251
// begin if GetBType ( building ) = b_depot then
19695: LD_VAR 0 1
19699: PPUSH
19700: CALL_OW 266
19704: PUSH
19705: LD_INT 0
19707: EQUAL
19708: IFFALSE 19794
// begin arDepot = building ;
19710: LD_ADDR_EXP 43
19714: PUSH
19715: LD_VAR 0 1
19719: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
19720: LD_INT 38
19722: PUSH
19723: LD_INT 47
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PPUSH
19730: LD_INT 71
19732: PPUSH
19733: LD_INT 19
19735: PPUSH
19736: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
19740: LD_VAR 0 1
19744: PPUSH
19745: CALL_OW 274
19749: PPUSH
19750: LD_INT 1
19752: PPUSH
19753: LD_INT 500
19755: PPUSH
19756: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
19760: LD_VAR 0 1
19764: PPUSH
19765: CALL_OW 274
19769: PPUSH
19770: LD_INT 3
19772: PPUSH
19773: LD_INT 30
19775: PPUSH
19776: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
19780: LD_EXP 26
19784: PPUSH
19785: LD_EXP 43
19789: PPUSH
19790: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
19794: LD_VAR 0 1
19798: PPUSH
19799: CALL_OW 266
19803: PUSH
19804: LD_INT 6
19806: EQUAL
19807: PUSH
19808: LD_VAR 0 1
19812: PPUSH
19813: CALL_OW 266
19817: PUSH
19818: LD_INT 9
19820: EQUAL
19821: OR
19822: IFFALSE 19873
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19824: LD_VAR 0 1
19828: PPUSH
19829: LD_INT 10
19831: PPUSH
19832: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
19836: LD_VAR 0 1
19840: PPUSH
19841: LD_INT 11
19843: PPUSH
19844: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
19848: LD_INT 2
19850: PPUSH
19851: LD_VAR 0 1
19855: PPUSH
19856: LD_INT 2
19858: PPUSH
19859: CALL 12682 0 3
// arLab = building ;
19863: LD_ADDR_EXP 44
19867: PUSH
19868: LD_VAR 0 1
19872: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 266
19882: PUSH
19883: LD_INT 2
19885: EQUAL
19886: PUSH
19887: LD_VAR 0 1
19891: PPUSH
19892: CALL_OW 266
19896: PUSH
19897: LD_INT 4
19899: EQUAL
19900: OR
19901: IFFALSE 19912
// ComUpgrade ( building ) ;
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
19912: LD_VAR 0 1
19916: PPUSH
19917: CALL_OW 266
19921: PUSH
19922: LD_INT 31
19924: EQUAL
19925: PUSH
19926: LD_INT 22
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 25
19938: PUSH
19939: LD_INT 1
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 54
19951: PUSH
19952: EMPTY
19953: LIST
19954: PUSH
19955: LD_INT 3
19957: PUSH
19958: LD_INT 60
19960: PUSH
19961: EMPTY
19962: LIST
19963: PUSH
19964: EMPTY
19965: LIST
19966: LIST
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: PPUSH
19978: CALL_OW 69
19982: PUSH
19983: LD_INT 0
19985: GREATER
19986: AND
19987: IFFALSE 20059
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
19989: LD_INT 22
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 25
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 3
20011: PUSH
20012: LD_INT 54
20014: PUSH
20015: EMPTY
20016: LIST
20017: PUSH
20018: LD_INT 3
20020: PUSH
20021: LD_INT 60
20023: PUSH
20024: EMPTY
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: LIST
20035: PUSH
20036: EMPTY
20037: LIST
20038: LIST
20039: LIST
20040: PPUSH
20041: CALL_OW 69
20045: PUSH
20046: LD_INT 1
20048: ARRAY
20049: PPUSH
20050: LD_VAR 0 1
20054: PPUSH
20055: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
20059: LD_VAR 0 1
20063: PPUSH
20064: CALL_OW 266
20068: PUSH
20069: LD_INT 27
20071: EQUAL
20072: IFFALSE 20251
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
20074: LD_INT 22
20076: PUSH
20077: LD_INT 2
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 30
20086: PUSH
20087: LD_INT 27
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: PPUSH
20098: CALL_OW 69
20102: PUSH
20103: LD_INT 2
20105: EQUAL
20106: IFFALSE 20251
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_INT 22
20115: PUSH
20116: LD_INT 2
20118: PUSH
20119: EMPTY
20120: LIST
20121: LIST
20122: PUSH
20123: LD_INT 21
20125: PUSH
20126: LD_INT 1
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PUSH
20133: LD_INT 25
20135: PUSH
20136: LD_INT 2
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: LIST
20147: PPUSH
20148: CALL_OW 69
20152: PUSH
20153: LD_INT 1
20155: ARRAY
20156: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
20157: LD_VAR 0 2
20161: PPUSH
20162: LD_INT 92
20164: PPUSH
20165: LD_INT 34
20167: PPUSH
20168: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
20172: LD_VAR 0 2
20176: PPUSH
20177: LD_INT 82
20179: PPUSH
20180: LD_INT 57
20182: PPUSH
20183: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
20187: LD_VAR 0 2
20191: PPUSH
20192: LD_INT 36
20194: PPUSH
20195: LD_INT 28
20197: PPUSH
20198: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
20202: LD_INT 22
20204: PUSH
20205: LD_INT 2
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: LD_INT 21
20214: PUSH
20215: LD_INT 1
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: PUSH
20222: LD_INT 25
20224: PUSH
20225: LD_INT 2
20227: PUSH
20228: EMPTY
20229: LIST
20230: LIST
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: LIST
20236: PPUSH
20237: CALL_OW 69
20241: PPUSH
20242: LD_EXP 43
20246: PPUSH
20247: CALL_OW 180
// end ; end ; end ;
20251: PPOPN 2
20253: END
// on UpgradeComplete ( building ) do var i ;
20254: LD_INT 0
20256: PPUSH
// begin if GetSide ( building ) = 1 then
20257: LD_VAR 0 1
20261: PPUSH
20262: CALL_OW 255
20266: PUSH
20267: LD_INT 1
20269: EQUAL
20270: IFFALSE 20470
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
20272: LD_INT 22
20274: PUSH
20275: LD_INT 1
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: PUSH
20282: LD_INT 2
20284: PUSH
20285: LD_INT 30
20287: PUSH
20288: LD_INT 7
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: LD_INT 30
20297: PUSH
20298: LD_INT 8
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 1
20307: PUSH
20308: LD_INT 30
20310: PUSH
20311: LD_INT 11
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 1
20320: PUSH
20321: LD_INT 2
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 26
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: LD_INT 30
20336: PUSH
20337: LD_INT 27
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 30
20346: PUSH
20347: LD_INT 28
20349: PUSH
20350: EMPTY
20351: LIST
20352: LIST
20353: PUSH
20354: EMPTY
20355: LIST
20356: LIST
20357: LIST
20358: LIST
20359: PUSH
20360: EMPTY
20361: LIST
20362: LIST
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: LIST
20368: PUSH
20369: EMPTY
20370: LIST
20371: LIST
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PPUSH
20379: CALL_OW 69
20383: PUSH
20384: LD_INT 0
20386: GREATER
20387: PUSH
20388: LD_INT 22
20390: PUSH
20391: LD_INT 1
20393: PUSH
20394: EMPTY
20395: LIST
20396: LIST
20397: PUSH
20398: LD_INT 2
20400: PUSH
20401: LD_INT 30
20403: PUSH
20404: LD_INT 26
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 30
20413: PUSH
20414: LD_INT 27
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 30
20423: PUSH
20424: LD_INT 28
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: PUSH
20446: LD_INT 0
20448: GREATER
20449: AND
20450: PUSH
20451: LD_EXP 58
20455: PUSH
20456: LD_INT 0
20458: EQUAL
20459: AND
20460: IFFALSE 20470
// eventVar1 = 1 ;
20462: LD_ADDR_EXP 58
20466: PUSH
20467: LD_INT 1
20469: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
20470: LD_VAR 0 1
20474: PPUSH
20475: CALL_OW 255
20479: PUSH
20480: LD_INT 2
20482: EQUAL
20483: IFFALSE 20588
// begin if GetBType ( building ) = b_barracks then
20485: LD_VAR 0 1
20489: PPUSH
20490: CALL_OW 266
20494: PUSH
20495: LD_INT 5
20497: EQUAL
20498: IFFALSE 20588
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
20500: LD_ADDR_VAR 0 2
20504: PUSH
20505: LD_INT 22
20507: PUSH
20508: LD_INT 2
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: LD_INT 25
20517: PUSH
20518: LD_INT 1
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: PUSH
20525: LD_INT 3
20527: PUSH
20528: LD_INT 54
20530: PUSH
20531: EMPTY
20532: LIST
20533: PUSH
20534: EMPTY
20535: LIST
20536: LIST
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: PPUSH
20543: CALL_OW 69
20547: PUSH
20548: LD_EXP 26
20552: PUSH
20553: EMPTY
20554: LIST
20555: DIFF
20556: PUSH
20557: FOR_IN
20558: IFFALSE 20576
// ComEnterUnit ( i , building ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_VAR 0 1
20569: PPUSH
20570: CALL_OW 120
20574: GO 20557
20576: POP
20577: POP
// arArm = building ;
20578: LD_ADDR_EXP 45
20582: PUSH
20583: LD_VAR 0 1
20587: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 255
20597: PUSH
20598: LD_INT 3
20600: EQUAL
20601: IFFALSE 21074
// begin if GetBType ( building ) = b_factory then
20603: LD_VAR 0 1
20607: PPUSH
20608: CALL_OW 266
20612: PUSH
20613: LD_INT 3
20615: EQUAL
20616: IFFALSE 20683
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20618: LD_ADDR_VAR 0 2
20622: PUSH
20623: LD_INT 22
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 25
20635: PUSH
20636: LD_INT 3
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: PUSH
20652: FOR_IN
20653: IFFALSE 20671
// ComEnterUnit ( i , building ) ;
20655: LD_VAR 0 2
20659: PPUSH
20660: LD_VAR 0 1
20664: PPUSH
20665: CALL_OW 120
20669: GO 20652
20671: POP
20672: POP
// ruFab = building ;
20673: LD_ADDR_EXP 35
20677: PUSH
20678: LD_VAR 0 1
20682: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
20683: LD_INT 22
20685: PUSH
20686: LD_INT 3
20688: PUSH
20689: EMPTY
20690: LIST
20691: LIST
20692: PUSH
20693: LD_INT 21
20695: PUSH
20696: LD_INT 3
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PUSH
20703: LD_INT 30
20705: PUSH
20706: LD_INT 8
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: PUSH
20713: EMPTY
20714: LIST
20715: LIST
20716: LIST
20717: PPUSH
20718: CALL_OW 69
20722: PUSH
20723: LD_INT 2
20725: EQUAL
20726: IFFALSE 20934
// begin for i = 1 to 2 do
20728: LD_ADDR_VAR 0 2
20732: PUSH
20733: DOUBLE
20734: LD_INT 1
20736: DEC
20737: ST_TO_ADDR
20738: LD_INT 2
20740: PUSH
20741: FOR_TO
20742: IFFALSE 20829
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20744: LD_INT 22
20746: PUSH
20747: LD_INT 3
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PUSH
20754: LD_INT 25
20756: PUSH
20757: LD_INT 4
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PPUSH
20768: CALL_OW 69
20772: PUSH
20773: LD_VAR 0 2
20777: ARRAY
20778: PPUSH
20779: LD_INT 22
20781: PUSH
20782: LD_INT 3
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 21
20791: PUSH
20792: LD_INT 3
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: LD_INT 30
20801: PUSH
20802: LD_INT 8
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: LIST
20813: PPUSH
20814: CALL_OW 69
20818: PUSH
20819: LD_INT 1
20821: ARRAY
20822: PPUSH
20823: CALL_OW 120
20827: GO 20741
20829: POP
20830: POP
// for i = 3 to 4 do
20831: LD_ADDR_VAR 0 2
20835: PUSH
20836: DOUBLE
20837: LD_INT 3
20839: DEC
20840: ST_TO_ADDR
20841: LD_INT 4
20843: PUSH
20844: FOR_TO
20845: IFFALSE 20932
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
20847: LD_INT 22
20849: PUSH
20850: LD_INT 3
20852: PUSH
20853: EMPTY
20854: LIST
20855: LIST
20856: PUSH
20857: LD_INT 25
20859: PUSH
20860: LD_INT 4
20862: PUSH
20863: EMPTY
20864: LIST
20865: LIST
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PPUSH
20871: CALL_OW 69
20875: PUSH
20876: LD_VAR 0 2
20880: ARRAY
20881: PPUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 3
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 21
20894: PUSH
20895: LD_INT 3
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: LD_INT 30
20904: PUSH
20905: LD_INT 8
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PUSH
20912: EMPTY
20913: LIST
20914: LIST
20915: LIST
20916: PPUSH
20917: CALL_OW 69
20921: PUSH
20922: LD_INT 2
20924: ARRAY
20925: PPUSH
20926: CALL_OW 120
20930: GO 20844
20932: POP
20933: POP
// end ; if GetBType ( building ) = b_barracks then
20934: LD_VAR 0 1
20938: PPUSH
20939: CALL_OW 266
20943: PUSH
20944: LD_INT 5
20946: EQUAL
20947: IFFALSE 21074
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
20949: LD_ADDR_VAR 0 2
20953: PUSH
20954: LD_INT 22
20956: PUSH
20957: LD_INT 3
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 25
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 3
20976: PUSH
20977: LD_INT 54
20979: PUSH
20980: EMPTY
20981: LIST
20982: PUSH
20983: EMPTY
20984: LIST
20985: LIST
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: LIST
20991: PPUSH
20992: CALL_OW 69
20996: PUSH
20997: FOR_IN
20998: IFFALSE 21016
// ComEnterUnit ( i , building ) ;
21000: LD_VAR 0 2
21004: PPUSH
21005: LD_VAR 0 1
21009: PPUSH
21010: CALL_OW 120
21014: GO 20997
21016: POP
21017: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
21018: LD_INT 22
21020: PUSH
21021: LD_INT 3
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 30
21030: PUSH
21031: LD_INT 5
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PPUSH
21042: CALL_OW 69
21046: PUSH
21047: LD_INT 0
21049: EQUAL
21050: IFFALSE 21064
// ruArm1 = building else
21052: LD_ADDR_EXP 33
21056: PUSH
21057: LD_VAR 0 1
21061: ST_TO_ADDR
21062: GO 21074
// ruArm2 = building ;
21064: LD_ADDR_EXP 34
21068: PUSH
21069: LD_VAR 0 1
21073: ST_TO_ADDR
// end ; end ; end ;
21074: PPOPN 2
21076: END
// on EnterBuilding ( building , human ) do var rnd ;
21077: LD_INT 0
21079: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
21080: LD_VAR 0 2
21084: PPUSH
21085: CALL_OW 255
21089: PUSH
21090: LD_INT 2
21092: EQUAL
21093: PUSH
21094: LD_VAR 0 2
21098: PPUSH
21099: CALL_OW 257
21103: PUSH
21104: LD_INT 1
21106: EQUAL
21107: AND
21108: PUSH
21109: LD_VAR 0 1
21113: PUSH
21114: LD_EXP 45
21118: EQUAL
21119: AND
21120: IFFALSE 21167
// begin wait ( 0 0$1 ) ;
21122: LD_INT 35
21124: PPUSH
21125: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
21129: LD_ADDR_VAR 0 3
21133: PUSH
21134: LD_INT 1
21136: PPUSH
21137: LD_INT 100
21139: PPUSH
21140: CALL_OW 12
21144: ST_TO_ADDR
// if rnd > 50 then
21145: LD_VAR 0 3
21149: PUSH
21150: LD_INT 50
21152: GREATER
21153: IFFALSE 21167
// SetClass ( human , class_mortar ) ;
21155: LD_VAR 0 2
21159: PPUSH
21160: LD_INT 8
21162: PPUSH
21163: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
21167: LD_VAR 0 2
21171: PPUSH
21172: CALL_OW 255
21176: PUSH
21177: LD_INT 3
21179: EQUAL
21180: PUSH
21181: LD_VAR 0 2
21185: PPUSH
21186: CALL_OW 257
21190: PUSH
21191: LD_INT 1
21193: EQUAL
21194: AND
21195: PUSH
21196: LD_VAR 0 1
21200: PUSH
21201: LD_EXP 33
21205: EQUAL
21206: PUSH
21207: LD_VAR 0 1
21211: PUSH
21212: LD_EXP 34
21216: EQUAL
21217: OR
21218: PUSH
21219: EMPTY
21220: LIST
21221: AND
21222: IFFALSE 21243
// begin wait ( 0 0$1 ) ;
21224: LD_INT 35
21226: PPUSH
21227: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
21231: LD_VAR 0 2
21235: PPUSH
21236: LD_INT 9
21238: PPUSH
21239: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
21243: LD_VAR 0 2
21247: PPUSH
21248: CALL_OW 255
21252: PUSH
21253: LD_INT 3
21255: EQUAL
21256: PUSH
21257: LD_VAR 0 2
21261: PPUSH
21262: CALL_OW 257
21266: PUSH
21267: LD_INT 9
21269: EQUAL
21270: AND
21271: PUSH
21272: LD_VAR 0 1
21276: PPUSH
21277: CALL_OW 266
21281: PUSH
21282: LD_INT 32
21284: EQUAL
21285: AND
21286: IFFALSE 21307
// begin wait ( 0 0$1 ) ;
21288: LD_INT 35
21290: PPUSH
21291: CALL_OW 67
// SetClass ( human , 1 ) ;
21295: LD_VAR 0 2
21299: PPUSH
21300: LD_INT 1
21302: PPUSH
21303: CALL_OW 336
// end ; end ;
21307: PPOPN 3
21309: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
21310: LD_VAR 0 1
21314: PUSH
21315: LD_INT 1
21317: EQUAL
21318: PUSH
21319: LD_VAR 0 2
21323: PUSH
21324: LD_INT 2
21326: EQUAL
21327: AND
21328: PUSH
21329: LD_INT 1
21331: PPUSH
21332: LD_INT 2
21334: PPUSH
21335: CALL_OW 81
21339: PUSH
21340: LD_INT 1
21342: EQUAL
21343: AND
21344: IFFALSE 21365
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
21346: LD_EXP 24
21350: PPUSH
21351: LD_STRING D6b-Pow-1
21353: PPUSH
21354: CALL_OW 94
// YouLost ( Powell ) ;
21358: LD_STRING Powell
21360: PPUSH
21361: CALL_OW 104
// end ; end ;
21365: PPOPN 2
21367: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
21368: LD_INT 23
21370: PPUSH
21371: LD_INT 22
21373: PUSH
21374: LD_INT 1
21376: PUSH
21377: EMPTY
21378: LIST
21379: LIST
21380: PUSH
21381: LD_INT 21
21383: PUSH
21384: LD_INT 3
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: PPUSH
21395: CALL_OW 70
21399: PUSH
21400: LD_INT 23
21402: PPUSH
21403: LD_INT 22
21405: PUSH
21406: LD_INT 1
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: LD_INT 21
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 58
21425: PUSH
21426: EMPTY
21427: LIST
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: LIST
21433: PPUSH
21434: CALL_OW 70
21438: OR
21439: PUSH
21440: LD_INT 1
21442: PPUSH
21443: LD_INT 2
21445: PPUSH
21446: CALL_OW 81
21450: PUSH
21451: LD_INT 1
21453: EQUAL
21454: AND
21455: IFFALSE 21479
21457: GO 21459
21459: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
21460: LD_EXP 24
21464: PPUSH
21465: LD_STRING D6b-Pow-1
21467: PPUSH
21468: CALL_OW 94
// YouLost ( Powell ) ;
21472: LD_STRING Powell
21474: PPUSH
21475: CALL_OW 104
// end ;
21479: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
21480: LD_VAR 0 1
21484: PUSH
21485: LD_EXP 1
21489: EQUAL
21490: IFFALSE 21499
// YouLost ( JMM ) ;
21492: LD_STRING JMM
21494: PPUSH
21495: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 255
21508: PUSH
21509: LD_INT 3
21511: EQUAL
21512: PUSH
21513: LD_VAR 0 1
21517: PPUSH
21518: CALL_OW 247
21522: PUSH
21523: LD_INT 3
21525: EQUAL
21526: AND
21527: IFFALSE 22219
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
21529: LD_VAR 0 1
21533: PPUSH
21534: CALL_OW 266
21538: PUSH
21539: LD_INT 31
21541: EQUAL
21542: PUSH
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 266
21552: PUSH
21553: LD_INT 32
21555: EQUAL
21556: OR
21557: PUSH
21558: LD_VAR 0 1
21562: PPUSH
21563: CALL_OW 266
21567: PUSH
21568: LD_INT 36
21570: EQUAL
21571: OR
21572: PUSH
21573: LD_VAR 0 1
21577: PPUSH
21578: CALL_OW 266
21582: PUSH
21583: LD_INT 0
21585: EQUAL
21586: OR
21587: PUSH
21588: LD_VAR 0 1
21592: PPUSH
21593: CALL_OW 266
21597: PUSH
21598: LD_INT 24
21600: EQUAL
21601: OR
21602: PUSH
21603: LD_VAR 0 1
21607: PPUSH
21608: CALL_OW 266
21612: PUSH
21613: LD_INT 17
21615: EQUAL
21616: OR
21617: PUSH
21618: LD_VAR 0 1
21622: PPUSH
21623: CALL_OW 266
21627: PUSH
21628: LD_INT 25
21630: EQUAL
21631: OR
21632: PUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: CALL_OW 266
21642: PUSH
21643: LD_INT 19
21645: EQUAL
21646: OR
21647: PUSH
21648: LD_VAR 0 1
21652: PPUSH
21653: CALL_OW 266
21657: PUSH
21658: LD_INT 20
21660: EQUAL
21661: OR
21662: PUSH
21663: LD_VAR 0 1
21667: PPUSH
21668: CALL_OW 266
21672: PUSH
21673: LD_INT 18
21675: EQUAL
21676: OR
21677: PUSH
21678: LD_VAR 0 1
21682: PPUSH
21683: CALL_OW 266
21687: PUSH
21688: LD_INT 21
21690: EQUAL
21691: OR
21692: PUSH
21693: LD_VAR 0 1
21697: PPUSH
21698: CALL_OW 266
21702: PUSH
21703: LD_INT 23
21705: EQUAL
21706: OR
21707: PUSH
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 266
21717: PUSH
21718: LD_INT 16
21720: EQUAL
21721: OR
21722: PUSH
21723: LD_VAR 0 1
21727: PPUSH
21728: CALL_OW 266
21732: PUSH
21733: LD_INT 6
21735: EQUAL
21736: OR
21737: PUSH
21738: LD_VAR 0 1
21742: PPUSH
21743: CALL_OW 266
21747: PUSH
21748: LD_INT 29
21750: EQUAL
21751: OR
21752: PUSH
21753: LD_VAR 0 1
21757: PPUSH
21758: CALL_OW 266
21762: PUSH
21763: LD_INT 26
21765: EQUAL
21766: OR
21767: PUSH
21768: LD_VAR 0 1
21772: PPUSH
21773: CALL_OW 266
21777: PUSH
21778: LD_INT 30
21780: EQUAL
21781: OR
21782: PUSH
21783: LD_VAR 0 1
21787: PPUSH
21788: CALL_OW 266
21792: PUSH
21793: LD_INT 28
21795: EQUAL
21796: OR
21797: PUSH
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 266
21807: PUSH
21808: LD_INT 27
21810: EQUAL
21811: OR
21812: PUSH
21813: LD_VAR 0 1
21817: PPUSH
21818: CALL_OW 266
21822: PUSH
21823: LD_INT 33
21825: EQUAL
21826: OR
21827: PUSH
21828: LD_VAR 0 1
21832: PPUSH
21833: CALL_OW 266
21837: PUSH
21838: LD_INT 2
21840: EQUAL
21841: OR
21842: PUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 266
21852: PUSH
21853: LD_INT 4
21855: EQUAL
21856: OR
21857: IFFALSE 21943
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21859: LD_ADDR_EXP 42
21863: PUSH
21864: LD_EXP 42
21868: PUSH
21869: LD_VAR 0 1
21873: PPUSH
21874: CALL_OW 266
21878: ADD
21879: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21880: LD_ADDR_EXP 42
21884: PUSH
21885: LD_EXP 42
21889: PUSH
21890: LD_VAR 0 1
21894: PPUSH
21895: CALL_OW 250
21899: ADD
21900: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21901: LD_ADDR_EXP 42
21905: PUSH
21906: LD_EXP 42
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL_OW 251
21920: ADD
21921: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21922: LD_ADDR_EXP 42
21926: PUSH
21927: LD_EXP 42
21931: PUSH
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 254
21941: ADD
21942: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21943: LD_VAR 0 1
21947: PPUSH
21948: CALL_OW 266
21952: PUSH
21953: LD_INT 1
21955: EQUAL
21956: IFFALSE 22035
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21958: LD_ADDR_EXP 42
21962: PUSH
21963: LD_EXP 42
21967: PUSH
21968: LD_INT 0
21970: ADD
21971: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21972: LD_ADDR_EXP 42
21976: PUSH
21977: LD_EXP 42
21981: PUSH
21982: LD_VAR 0 1
21986: PPUSH
21987: CALL_OW 250
21991: ADD
21992: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21993: LD_ADDR_EXP 42
21997: PUSH
21998: LD_EXP 42
22002: PUSH
22003: LD_VAR 0 1
22007: PPUSH
22008: CALL_OW 251
22012: ADD
22013: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22014: LD_ADDR_EXP 42
22018: PUSH
22019: LD_EXP 42
22023: PUSH
22024: LD_VAR 0 1
22028: PPUSH
22029: CALL_OW 254
22033: ADD
22034: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
22035: LD_VAR 0 1
22039: PPUSH
22040: CALL_OW 266
22044: PUSH
22045: LD_INT 3
22047: EQUAL
22048: IFFALSE 22127
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
22050: LD_ADDR_EXP 42
22054: PUSH
22055: LD_EXP 42
22059: PUSH
22060: LD_INT 2
22062: ADD
22063: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22064: LD_ADDR_EXP 42
22068: PUSH
22069: LD_EXP 42
22073: PUSH
22074: LD_VAR 0 1
22078: PPUSH
22079: CALL_OW 250
22083: ADD
22084: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22085: LD_ADDR_EXP 42
22089: PUSH
22090: LD_EXP 42
22094: PUSH
22095: LD_VAR 0 1
22099: PPUSH
22100: CALL_OW 251
22104: ADD
22105: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22106: LD_ADDR_EXP 42
22110: PUSH
22111: LD_EXP 42
22115: PUSH
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 254
22125: ADD
22126: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
22127: LD_VAR 0 1
22131: PPUSH
22132: CALL_OW 266
22136: PUSH
22137: LD_INT 5
22139: EQUAL
22140: IFFALSE 22219
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
22142: LD_ADDR_EXP 42
22146: PUSH
22147: LD_EXP 42
22151: PUSH
22152: LD_INT 4
22154: ADD
22155: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
22156: LD_ADDR_EXP 42
22160: PUSH
22161: LD_EXP 42
22165: PUSH
22166: LD_VAR 0 1
22170: PPUSH
22171: CALL_OW 250
22175: ADD
22176: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
22177: LD_ADDR_EXP 42
22181: PUSH
22182: LD_EXP 42
22186: PUSH
22187: LD_VAR 0 1
22191: PPUSH
22192: CALL_OW 251
22196: ADD
22197: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
22198: LD_ADDR_EXP 42
22202: PUSH
22203: LD_EXP 42
22207: PUSH
22208: LD_VAR 0 1
22212: PPUSH
22213: CALL_OW 254
22217: ADD
22218: ST_TO_ADDR
// end ; end ; end ;
22219: PPOPN 1
22221: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
22222: LD_ADDR_OWVAR 57
22226: PUSH
22227: LD_INT 0
22229: ST_TO_ADDR
// fastEnd = 1 ;
22230: LD_ADDR_EXP 57
22234: PUSH
22235: LD_INT 1
22237: ST_TO_ADDR
// FinishMission ;
22238: CALL 23418 0 0
// end ; end_of_file
22242: PPOPN 1
22244: END
// export function PrepareNature ; var i , un ; begin
22245: LD_INT 0
22247: PPUSH
22248: PPUSH
22249: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
22250: LD_ADDR_VAR 0 2
22254: PUSH
22255: DOUBLE
22256: LD_INT 1
22258: DEC
22259: ST_TO_ADDR
22260: LD_OWVAR 67
22264: PUSH
22265: LD_INT 1
22267: PPUSH
22268: LD_INT 5
22270: PPUSH
22271: CALL_OW 12
22275: PLUS
22276: PUSH
22277: FOR_TO
22278: IFFALSE 22423
// begin hc_sex = sex_male ;
22280: LD_ADDR_OWVAR 27
22284: PUSH
22285: LD_INT 1
22287: ST_TO_ADDR
// uc_side = 0 ;
22288: LD_ADDR_OWVAR 20
22292: PUSH
22293: LD_INT 0
22295: ST_TO_ADDR
// uc_nation = nation_nature ;
22296: LD_ADDR_OWVAR 21
22300: PUSH
22301: LD_INT 0
22303: ST_TO_ADDR
// hc_class = class_apeman ;
22304: LD_ADDR_OWVAR 28
22308: PUSH
22309: LD_INT 12
22311: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
22312: LD_ADDR_OWVAR 31
22316: PUSH
22317: LD_INT 2
22319: PPUSH
22320: LD_INT 7
22322: PPUSH
22323: CALL_OW 12
22327: PUSH
22328: LD_OWVAR 67
22332: PLUS
22333: PUSH
22334: LD_INT 2
22336: PPUSH
22337: LD_INT 10
22339: PPUSH
22340: CALL_OW 12
22344: PUSH
22345: LD_INT 2
22347: PPUSH
22348: LD_INT 10
22350: PPUSH
22351: CALL_OW 12
22355: PUSH
22356: LD_INT 2
22358: PPUSH
22359: LD_INT 10
22361: PPUSH
22362: CALL_OW 12
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22373: LD_ADDR_OWVAR 35
22377: PUSH
22378: LD_INT 5
22380: NEG
22381: PPUSH
22382: LD_INT 5
22384: PPUSH
22385: CALL_OW 12
22389: PUSH
22390: LD_OWVAR 67
22394: MUL
22395: ST_TO_ADDR
// un = CreateHuman ;
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: CALL_OW 44
22405: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
22406: LD_VAR 0 3
22410: PPUSH
22411: LD_INT 5
22413: PPUSH
22414: LD_INT 0
22416: PPUSH
22417: CALL_OW 49
// end ;
22421: GO 22277
22423: POP
22424: POP
// for i = 1 to Difficulty + 2 do
22425: LD_ADDR_VAR 0 2
22429: PUSH
22430: DOUBLE
22431: LD_INT 1
22433: DEC
22434: ST_TO_ADDR
22435: LD_OWVAR 67
22439: PUSH
22440: LD_INT 2
22442: PLUS
22443: PUSH
22444: FOR_TO
22445: IFFALSE 22554
// begin hc_sex = sex_male ;
22447: LD_ADDR_OWVAR 27
22451: PUSH
22452: LD_INT 1
22454: ST_TO_ADDR
// uc_side = 0 ;
22455: LD_ADDR_OWVAR 20
22459: PUSH
22460: LD_INT 0
22462: ST_TO_ADDR
// uc_nation = nation_nature ;
22463: LD_ADDR_OWVAR 21
22467: PUSH
22468: LD_INT 0
22470: ST_TO_ADDR
// hc_class = class_tiger ;
22471: LD_ADDR_OWVAR 28
22475: PUSH
22476: LD_INT 14
22478: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22479: LD_ADDR_OWVAR 31
22483: PUSH
22484: LD_EXP 37
22488: PUSH
22489: LD_INT 0
22491: PUSH
22492: LD_INT 0
22494: PUSH
22495: LD_INT 0
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
22504: LD_ADDR_OWVAR 35
22508: PUSH
22509: LD_INT 5
22511: NEG
22512: PPUSH
22513: LD_INT 5
22515: PPUSH
22516: CALL_OW 12
22520: PUSH
22521: LD_OWVAR 67
22525: MUL
22526: ST_TO_ADDR
// un = CreateHuman ;
22527: LD_ADDR_VAR 0 3
22531: PUSH
22532: CALL_OW 44
22536: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
22537: LD_VAR 0 3
22541: PPUSH
22542: LD_INT 6
22544: PPUSH
22545: LD_INT 0
22547: PPUSH
22548: CALL_OW 49
// end ;
22552: GO 22444
22554: POP
22555: POP
// for i = 1 to rand ( 3 , 4 ) do
22556: LD_ADDR_VAR 0 2
22560: PUSH
22561: DOUBLE
22562: LD_INT 1
22564: DEC
22565: ST_TO_ADDR
22566: LD_INT 3
22568: PPUSH
22569: LD_INT 4
22571: PPUSH
22572: CALL_OW 12
22576: PUSH
22577: FOR_TO
22578: IFFALSE 22672
// begin hc_sex = sex_male ;
22580: LD_ADDR_OWVAR 27
22584: PUSH
22585: LD_INT 1
22587: ST_TO_ADDR
// uc_side = 0 ;
22588: LD_ADDR_OWVAR 20
22592: PUSH
22593: LD_INT 0
22595: ST_TO_ADDR
// uc_nation = nation_nature ;
22596: LD_ADDR_OWVAR 21
22600: PUSH
22601: LD_INT 0
22603: ST_TO_ADDR
// hc_class = 18 ;
22604: LD_ADDR_OWVAR 28
22608: PUSH
22609: LD_INT 18
22611: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22612: LD_ADDR_OWVAR 31
22616: PUSH
22617: LD_EXP 37
22621: PUSH
22622: LD_INT 0
22624: PUSH
22625: LD_INT 0
22627: PUSH
22628: LD_INT 0
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: ST_TO_ADDR
// hc_agressivity = 0 ;
22637: LD_ADDR_OWVAR 35
22641: PUSH
22642: LD_INT 0
22644: ST_TO_ADDR
// un = CreateHuman ;
22645: LD_ADDR_VAR 0 3
22649: PUSH
22650: CALL_OW 44
22654: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
22655: LD_VAR 0 3
22659: PPUSH
22660: LD_INT 6
22662: PPUSH
22663: LD_INT 0
22665: PPUSH
22666: CALL_OW 49
// end ;
22670: GO 22577
22672: POP
22673: POP
// end ; end_of_file
22674: LD_VAR 0 1
22678: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
22679: LD_EXP 46
22683: PUSH
22684: LD_INT 1
22686: EQUAL
22687: IFFALSE 22771
22689: GO 22691
22691: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 6 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
22692: LD_INT 7
22694: PPUSH
22695: LD_INT 5
22697: PPUSH
22698: LD_INT 6
22700: PUSH
22701: LD_INT 8
22703: PUSH
22704: LD_INT 9
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: LIST
22711: PUSH
22712: LD_OWVAR 67
22716: ARRAY
22717: PPUSH
22718: LD_EXP 36
22722: PPUSH
22723: LD_EXP 37
22727: PPUSH
22728: CALL_OW 12
22732: PPUSH
22733: LD_INT 2
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: LD_INT 1
22741: PPUSH
22742: EMPTY
22743: PPUSH
22744: LD_INT 25
22746: PUSH
22747: LD_INT 26
22749: PUSH
22750: LD_INT 27
22752: PUSH
22753: LD_INT 28
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: PPUSH
22762: EMPTY
22763: PPUSH
22764: LD_INT 1
22766: PPUSH
22767: CALL 14177 0 11
22771: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
22772: LD_EXP 46
22776: PUSH
22777: LD_INT 1
22779: EQUAL
22780: IFFALSE 22868
22782: GO 22784
22784: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 9 , 10 , 12 ] [ Difficulty ] , 0 , 0 , [ 3 , 5 , 6 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
22785: LD_INT 5
22787: PPUSH
22788: LD_INT 2
22790: PPUSH
22791: LD_INT 9
22793: PUSH
22794: LD_INT 10
22796: PUSH
22797: LD_INT 12
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: LD_OWVAR 67
22809: ARRAY
22810: PPUSH
22811: LD_INT 0
22813: PPUSH
22814: LD_INT 0
22816: PPUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 5
22822: PUSH
22823: LD_INT 6
22825: PUSH
22826: EMPTY
22827: LIST
22828: LIST
22829: LIST
22830: PUSH
22831: LD_OWVAR 67
22835: ARRAY
22836: PPUSH
22837: LD_INT 0
22839: PPUSH
22840: LD_EXP 36
22844: PPUSH
22845: LD_EXP 37
22849: PPUSH
22850: CALL_OW 12
22854: PPUSH
22855: LD_INT 7
22857: PPUSH
22858: LD_INT 9
22860: PPUSH
22861: LD_INT 1
22863: PPUSH
22864: CALL 15881 0 11
22868: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon do
22869: LD_EXP 29
22873: IFFALSE 22940
22875: GO 22877
22877: DISABLE
// begin enable ;
22878: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , 0 , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22879: LD_INT 6
22881: PPUSH
22882: LD_INT 3
22884: PPUSH
22885: LD_EXP 55
22889: PPUSH
22890: LD_INT 0
22892: PPUSH
22893: LD_INT 0
22895: PPUSH
22896: LD_INT 0
22898: PPUSH
22899: LD_EXP 55
22903: PUSH
22904: LD_INT 3
22906: DIV
22907: PUSH
22908: LD_INT 1
22910: PLUS
22911: PPUSH
22912: LD_EXP 36
22916: PPUSH
22917: LD_EXP 37
22921: PPUSH
22922: CALL_OW 12
22926: PPUSH
22927: LD_INT 17
22929: PPUSH
22930: LD_INT 18
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL 15881 0 11
// end ;
22940: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon do
22941: LD_EXP 29
22945: IFFALSE 23022
22947: GO 22949
22949: DISABLE
// begin enable ;
22950: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22951: LD_INT 17
22953: PPUSH
22954: LD_INT 6
22956: PPUSH
22957: LD_EXP 54
22961: PPUSH
22962: LD_EXP 36
22966: PPUSH
22967: LD_EXP 37
22971: PPUSH
22972: CALL_OW 12
22976: PPUSH
22977: LD_INT 3
22979: PPUSH
22980: LD_INT 1
22982: PPUSH
22983: LD_INT 1
22985: PUSH
22986: LD_INT 3
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: PPUSH
22993: LD_INT 43
22995: PUSH
22996: LD_INT 44
22998: PUSH
22999: LD_INT 45
23001: PUSH
23002: LD_INT 46
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: PPUSH
23011: EMPTY
23012: PPUSH
23013: EMPTY
23014: PPUSH
23015: LD_INT 1
23017: PPUSH
23018: CALL 14177 0 11
// end ;
23022: END
// every 10 10$00 trigger joinEpsilon do
23023: LD_EXP 29
23027: IFFALSE 23061
23029: GO 23031
23031: DISABLE
// begin enable ;
23032: ENABLE
// ru_vehs_counter := ru_vehs_counter + 3 ;
23033: LD_ADDR_EXP 54
23037: PUSH
23038: LD_EXP 54
23042: PUSH
23043: LD_INT 3
23045: PLUS
23046: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + 3 ;
23047: LD_ADDR_EXP 55
23051: PUSH
23052: LD_EXP 55
23056: PUSH
23057: LD_INT 3
23059: PLUS
23060: ST_TO_ADDR
// end ; end_of_file
23061: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
23062: LD_INT 54
23064: PPUSH
23065: LD_INT 1
23067: PPUSH
23068: CALL_OW 321
23072: PUSH
23073: LD_INT 2
23075: EQUAL
23076: PUSH
23077: LD_INT 55
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 321
23087: PUSH
23088: LD_INT 2
23090: EQUAL
23091: AND
23092: PUSH
23093: LD_INT 21
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 321
23103: PUSH
23104: LD_INT 2
23106: EQUAL
23107: AND
23108: PUSH
23109: LD_INT 22
23111: PPUSH
23112: LD_INT 1
23114: PPUSH
23115: CALL_OW 321
23119: PUSH
23120: LD_INT 2
23122: EQUAL
23123: AND
23124: PUSH
23125: LD_INT 12
23127: PPUSH
23128: LD_INT 1
23130: PPUSH
23131: CALL_OW 321
23135: PUSH
23136: LD_INT 1
23138: EQUAL
23139: PUSH
23140: LD_INT 32
23142: PPUSH
23143: LD_INT 1
23145: PPUSH
23146: CALL_OW 321
23150: PUSH
23151: LD_INT 1
23153: EQUAL
23154: OR
23155: PUSH
23156: EMPTY
23157: LIST
23158: AND
23159: PUSH
23160: LD_EXP 48
23164: PUSH
23165: LD_INT 1
23167: EQUAL
23168: AND
23169: PUSH
23170: LD_INT 22
23172: PUSH
23173: LD_INT 3
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 21
23182: PUSH
23183: LD_INT 1
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PPUSH
23194: CALL_OW 69
23198: PUSH
23199: LD_INT 0
23201: EQUAL
23202: AND
23203: IFFALSE 23259
23205: GO 23207
23207: DISABLE
// begin case query ( QEndMission ) of 1 :
23208: LD_STRING QEndMission
23210: PPUSH
23211: CALL_OW 97
23215: PUSH
23216: LD_INT 1
23218: DOUBLE
23219: EQUAL
23220: IFTRUE 23224
23222: GO 23235
23224: POP
// begin end_the_mission_allowed = true ;
23225: LD_ADDR_OWVAR 57
23229: PUSH
23230: LD_INT 1
23232: ST_TO_ADDR
// end ; 2 :
23233: GO 23259
23235: LD_INT 2
23237: DOUBLE
23238: EQUAL
23239: IFTRUE 23243
23241: GO 23258
23243: POP
// begin fastEnd = 1 ;
23244: LD_ADDR_EXP 57
23248: PUSH
23249: LD_INT 1
23251: ST_TO_ADDR
// FinishMission ;
23252: CALL 23418 0 0
// end ; end ;
23256: GO 23259
23258: POP
// end ;
23259: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
23260: LD_INT 54
23262: PPUSH
23263: LD_INT 1
23265: PPUSH
23266: CALL_OW 321
23270: PUSH
23271: LD_INT 2
23273: EQUAL
23274: PUSH
23275: LD_INT 55
23277: PPUSH
23278: LD_INT 1
23280: PPUSH
23281: CALL_OW 321
23285: PUSH
23286: LD_INT 2
23288: EQUAL
23289: AND
23290: PUSH
23291: LD_INT 21
23293: PPUSH
23294: LD_INT 1
23296: PPUSH
23297: CALL_OW 321
23301: PUSH
23302: LD_INT 2
23304: EQUAL
23305: AND
23306: PUSH
23307: LD_INT 22
23309: PPUSH
23310: LD_INT 1
23312: PPUSH
23313: CALL_OW 321
23317: PUSH
23318: LD_INT 2
23320: EQUAL
23321: AND
23322: PUSH
23323: LD_INT 12
23325: PPUSH
23326: LD_INT 1
23328: PPUSH
23329: CALL_OW 321
23333: PUSH
23334: LD_INT 2
23336: EQUAL
23337: AND
23338: PUSH
23339: LD_INT 32
23341: PPUSH
23342: LD_INT 1
23344: PPUSH
23345: CALL_OW 321
23349: PUSH
23350: LD_INT 2
23352: EQUAL
23353: AND
23354: PUSH
23355: LD_EXP 57
23359: PUSH
23360: LD_INT 0
23362: EQUAL
23363: AND
23364: PUSH
23365: LD_EXP 48
23369: PUSH
23370: LD_INT 1
23372: EQUAL
23373: AND
23374: PUSH
23375: LD_INT 22
23377: PUSH
23378: LD_INT 3
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: PUSH
23385: LD_INT 21
23387: PUSH
23388: LD_INT 1
23390: PUSH
23391: EMPTY
23392: LIST
23393: LIST
23394: PUSH
23395: EMPTY
23396: LIST
23397: LIST
23398: PPUSH
23399: CALL_OW 69
23403: PUSH
23404: LD_INT 0
23406: EQUAL
23407: AND
23408: IFFALSE 23417
23410: GO 23412
23412: DISABLE
// FinishMission ;
23413: CALL 23418 0 0
23417: END
// export function FinishMission ; begin
23418: LD_INT 0
23420: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
23421: LD_EXP 50
23425: PPUSH
23426: LD_STRING 10_KhatamStatus_1
23428: PPUSH
23429: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
23433: LD_INT 12
23435: PPUSH
23436: LD_INT 1
23438: PPUSH
23439: CALL_OW 321
23443: PUSH
23444: LD_INT 2
23446: EQUAL
23447: IFFALSE 23461
// begin AddMedal ( sights , 1 ) ;
23449: LD_STRING sights
23451: PPUSH
23452: LD_INT 1
23454: PPUSH
23455: CALL_OW 101
// end else
23459: GO 23472
// begin AddMedal ( sights , - 1 ) ;
23461: LD_STRING sights
23463: PPUSH
23464: LD_INT 1
23466: NEG
23467: PPUSH
23468: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
23472: LD_INT 32
23474: PPUSH
23475: LD_INT 1
23477: PPUSH
23478: CALL_OW 321
23482: PUSH
23483: LD_INT 2
23485: EQUAL
23486: IFFALSE 23500
// begin AddMedal ( computers , 1 ) ;
23488: LD_STRING computers
23490: PPUSH
23491: LD_INT 1
23493: PPUSH
23494: CALL_OW 101
// end else
23498: GO 23511
// begin AddMedal ( computers , - 1 ) ;
23500: LD_STRING computers
23502: PPUSH
23503: LD_INT 1
23505: NEG
23506: PPUSH
23507: CALL_OW 101
// end ; if arabianEscape = 0 then
23511: LD_EXP 47
23515: PUSH
23516: LD_INT 0
23518: EQUAL
23519: IFFALSE 23543
// begin AddMedal ( renegades , 2 ) ;
23521: LD_STRING renegades
23523: PPUSH
23524: LD_INT 2
23526: PPUSH
23527: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
23531: LD_INT 0
23533: PPUSH
23534: LD_STRING 10_ScientistsEscape_1
23536: PPUSH
23537: CALL_OW 39
// end else
23541: GO 23554
// begin AddMedal ( renegades , - 1 ) ;
23543: LD_STRING renegades
23545: PPUSH
23546: LD_INT 1
23548: NEG
23549: PPUSH
23550: CALL_OW 101
// end ; SaveEpsilonBase ;
23554: CALL 24144 0 0
// Query ( kaj ) ;
23558: LD_STRING kaj
23560: PPUSH
23561: CALL_OW 97
// GiveMedals ( Main ) ;
23565: LD_STRING Main
23567: PPUSH
23568: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
23572: LD_INT 22
23574: PUSH
23575: LD_INT 1
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: PUSH
23582: LD_INT 23
23584: PUSH
23585: LD_INT 1
23587: PUSH
23588: EMPTY
23589: LIST
23590: LIST
23591: PUSH
23592: LD_INT 21
23594: PUSH
23595: LD_INT 1
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 2
23604: PUSH
23605: LD_INT 25
23607: PUSH
23608: LD_INT 1
23610: PUSH
23611: EMPTY
23612: LIST
23613: LIST
23614: PUSH
23615: LD_INT 25
23617: PUSH
23618: LD_INT 2
23620: PUSH
23621: EMPTY
23622: LIST
23623: LIST
23624: PUSH
23625: LD_INT 25
23627: PUSH
23628: LD_INT 3
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 25
23637: PUSH
23638: LD_INT 4
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: LD_INT 25
23647: PUSH
23648: LD_INT 5
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: PPUSH
23669: CALL_OW 69
23673: PPUSH
23674: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23678: LD_EXP 1
23682: PPUSH
23683: LD_EXP 51
23687: PUSH
23688: LD_STRING JMM
23690: STR
23691: PPUSH
23692: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23696: LD_EXP 2
23700: PPUSH
23701: LD_EXP 51
23705: PUSH
23706: LD_STRING Brown
23708: STR
23709: PPUSH
23710: CALL 8539 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23714: LD_EXP 3
23718: PPUSH
23719: LD_EXP 51
23723: PUSH
23724: LD_STRING Donaldson
23726: STR
23727: PPUSH
23728: CALL 8539 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23732: LD_EXP 4
23736: PPUSH
23737: LD_EXP 51
23741: PUSH
23742: LD_STRING Bobby
23744: STR
23745: PPUSH
23746: CALL 8539 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23750: LD_EXP 5
23754: PPUSH
23755: LD_EXP 51
23759: PUSH
23760: LD_STRING Cyrus
23762: STR
23763: PPUSH
23764: CALL 8539 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23768: LD_EXP 6
23772: PPUSH
23773: LD_EXP 51
23777: PUSH
23778: LD_STRING Lisa
23780: STR
23781: PPUSH
23782: CALL 8539 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23786: LD_EXP 7
23790: PPUSH
23791: LD_EXP 51
23795: PUSH
23796: LD_STRING Frank
23798: STR
23799: PPUSH
23800: CALL 8539 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23804: LD_EXP 8
23808: PPUSH
23809: LD_EXP 51
23813: PUSH
23814: LD_STRING Kikuchi
23816: STR
23817: PPUSH
23818: CALL 8539 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23822: LD_EXP 9
23826: PPUSH
23827: LD_EXP 51
23831: PUSH
23832: LD_STRING Houten
23834: STR
23835: PPUSH
23836: CALL 8539 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23840: LD_EXP 10
23844: PPUSH
23845: LD_EXP 51
23849: PUSH
23850: LD_STRING Gary
23852: STR
23853: PPUSH
23854: CALL 8539 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23858: LD_EXP 11
23862: PPUSH
23863: LD_EXP 51
23867: PUSH
23868: LD_STRING Simms
23870: STR
23871: PPUSH
23872: CALL 8539 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23876: LD_EXP 12
23880: PPUSH
23881: LD_EXP 51
23885: PUSH
23886: LD_STRING Denis
23888: STR
23889: PPUSH
23890: CALL 8539 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23894: LD_EXP 13
23898: PPUSH
23899: LD_EXP 51
23903: PUSH
23904: LD_STRING Joan
23906: STR
23907: PPUSH
23908: CALL 8539 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23912: LD_EXP 15
23916: PPUSH
23917: LD_EXP 51
23921: PUSH
23922: LD_STRING Gladstone
23924: STR
23925: PPUSH
23926: CALL 8539 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23930: LD_EXP 17
23934: PPUSH
23935: LD_EXP 51
23939: PUSH
23940: LD_STRING DeltaDoctor
23942: STR
23943: PPUSH
23944: CALL 8539 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23948: LD_INT 50
23950: PUSH
23951: EMPTY
23952: LIST
23953: PUSH
23954: LD_INT 22
23956: PUSH
23957: LD_INT 1
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 21
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: LD_INT 2
23976: PUSH
23977: LD_INT 25
23979: PUSH
23980: LD_INT 1
23982: PUSH
23983: EMPTY
23984: LIST
23985: LIST
23986: PUSH
23987: LD_INT 25
23989: PUSH
23990: LD_INT 2
23992: PUSH
23993: EMPTY
23994: LIST
23995: LIST
23996: PUSH
23997: LD_INT 25
23999: PUSH
24000: LD_INT 3
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: PUSH
24007: LD_INT 25
24009: PUSH
24010: LD_INT 4
24012: PUSH
24013: EMPTY
24014: LIST
24015: LIST
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: PUSH
24024: EMPTY
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: PPUSH
24030: CALL_OW 69
24034: PUSH
24035: LD_EXP 1
24039: PUSH
24040: LD_EXP 2
24044: PUSH
24045: LD_EXP 3
24049: PUSH
24050: LD_EXP 4
24054: PUSH
24055: LD_EXP 5
24059: PUSH
24060: LD_EXP 6
24064: PUSH
24065: LD_EXP 7
24069: PUSH
24070: LD_EXP 15
24074: PUSH
24075: LD_EXP 8
24079: PUSH
24080: LD_EXP 12
24084: PUSH
24085: LD_EXP 13
24089: PUSH
24090: LD_EXP 9
24094: PUSH
24095: LD_EXP 11
24099: PUSH
24100: LD_EXP 10
24104: PUSH
24105: LD_EXP 17
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: DIFF
24127: PPUSH
24128: LD_STRING 10_other_survivors
24130: PPUSH
24131: CALL_OW 38
// YouWin ;
24135: CALL_OW 103
// end ;
24139: LD_VAR 0 1
24143: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
24144: LD_INT 0
24146: PPUSH
24147: PPUSH
24148: PPUSH
24149: PPUSH
// epsilonBase = [ ] ;
24150: LD_ADDR_VAR 0 2
24154: PUSH
24155: EMPTY
24156: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24157: LD_ADDR_VAR 0 3
24161: PUSH
24162: LD_INT 22
24164: PUSH
24165: LD_INT 1
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PUSH
24172: LD_INT 21
24174: PUSH
24175: LD_INT 3
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 50
24184: PUSH
24185: EMPTY
24186: LIST
24187: PUSH
24188: EMPTY
24189: LIST
24190: LIST
24191: LIST
24192: PPUSH
24193: CALL_OW 69
24197: ST_TO_ADDR
// for i in buildings do
24198: LD_ADDR_VAR 0 4
24202: PUSH
24203: LD_VAR 0 3
24207: PUSH
24208: FOR_IN
24209: IFFALSE 24646
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24211: LD_VAR 0 4
24215: PPUSH
24216: CALL_OW 266
24220: PUSH
24221: LD_INT 6
24223: PUSH
24224: LD_INT 7
24226: PUSH
24227: LD_INT 8
24229: PUSH
24230: EMPTY
24231: LIST
24232: LIST
24233: LIST
24234: IN
24235: IFFALSE 24349
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24237: LD_ADDR_VAR 0 2
24241: PUSH
24242: LD_VAR 0 2
24246: PUSH
24247: LD_VAR 0 4
24251: PPUSH
24252: CALL_OW 266
24256: PUSH
24257: LD_VAR 0 4
24261: PPUSH
24262: CALL_OW 250
24266: PUSH
24267: LD_VAR 0 4
24271: PPUSH
24272: CALL_OW 251
24276: PUSH
24277: LD_VAR 0 4
24281: PPUSH
24282: CALL_OW 254
24286: PUSH
24287: LD_VAR 0 4
24291: PPUSH
24292: CALL_OW 267
24296: PUSH
24297: LD_VAR 0 4
24301: PPUSH
24302: CALL_OW 248
24306: PUSH
24307: LD_VAR 0 4
24311: PPUSH
24312: LD_INT 1
24314: PPUSH
24315: CALL_OW 268
24319: PUSH
24320: LD_VAR 0 4
24324: PPUSH
24325: LD_INT 2
24327: PPUSH
24328: CALL_OW 268
24332: PUSH
24333: EMPTY
24334: LIST
24335: LIST
24336: LIST
24337: LIST
24338: LIST
24339: LIST
24340: LIST
24341: LIST
24342: PUSH
24343: EMPTY
24344: LIST
24345: ADD
24346: ST_TO_ADDR
24347: GO 24644
// if GetBType ( i ) = b_bunker then
24349: LD_VAR 0 4
24353: PPUSH
24354: CALL_OW 266
24358: PUSH
24359: LD_INT 32
24361: EQUAL
24362: IFFALSE 24459
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24364: LD_ADDR_VAR 0 2
24368: PUSH
24369: LD_VAR 0 2
24373: PUSH
24374: LD_VAR 0 4
24378: PPUSH
24379: CALL_OW 266
24383: PUSH
24384: LD_VAR 0 4
24388: PPUSH
24389: CALL_OW 250
24393: PUSH
24394: LD_VAR 0 4
24398: PPUSH
24399: CALL_OW 251
24403: PUSH
24404: LD_VAR 0 4
24408: PPUSH
24409: CALL_OW 254
24413: PUSH
24414: LD_VAR 0 4
24418: PPUSH
24419: CALL_OW 267
24423: PUSH
24424: LD_VAR 0 4
24428: PPUSH
24429: CALL_OW 248
24433: PUSH
24434: LD_VAR 0 4
24438: PPUSH
24439: CALL_OW 269
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: ADD
24456: ST_TO_ADDR
24457: GO 24644
// if GetBType ( i ) = b_factory then
24459: LD_VAR 0 4
24463: PPUSH
24464: CALL_OW 266
24468: PUSH
24469: LD_INT 3
24471: EQUAL
24472: IFFALSE 24562
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_VAR 0 2
24483: PPUSH
24484: LD_INT 1
24486: PPUSH
24487: LD_VAR 0 4
24491: PPUSH
24492: CALL_OW 266
24496: PUSH
24497: LD_VAR 0 4
24501: PPUSH
24502: CALL_OW 250
24506: PUSH
24507: LD_VAR 0 4
24511: PPUSH
24512: CALL_OW 251
24516: PUSH
24517: LD_VAR 0 4
24521: PPUSH
24522: CALL_OW 254
24526: PUSH
24527: LD_VAR 0 4
24531: PPUSH
24532: CALL_OW 267
24536: PUSH
24537: LD_VAR 0 4
24541: PPUSH
24542: CALL_OW 248
24546: PUSH
24547: EMPTY
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: LIST
24553: LIST
24554: PPUSH
24555: CALL_OW 2
24559: ST_TO_ADDR
24560: GO 24644
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24562: LD_ADDR_VAR 0 2
24566: PUSH
24567: LD_VAR 0 2
24571: PUSH
24572: LD_VAR 0 4
24576: PPUSH
24577: CALL_OW 266
24581: PUSH
24582: LD_VAR 0 4
24586: PPUSH
24587: CALL_OW 250
24591: PUSH
24592: LD_VAR 0 4
24596: PPUSH
24597: CALL_OW 251
24601: PUSH
24602: LD_VAR 0 4
24606: PPUSH
24607: CALL_OW 254
24611: PUSH
24612: LD_VAR 0 4
24616: PPUSH
24617: CALL_OW 267
24621: PUSH
24622: LD_VAR 0 4
24626: PPUSH
24627: CALL_OW 248
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: PUSH
24640: EMPTY
24641: LIST
24642: ADD
24643: ST_TO_ADDR
// end ;
24644: GO 24208
24646: POP
24647: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
24648: LD_VAR 0 2
24652: PPUSH
24653: LD_STRING 10_EpsilonBase
24655: PPUSH
24656: CALL_OW 39
// end ; end_of_file
24660: LD_VAR 0 1
24664: RET
// every 0 0$30 do
24665: GO 24667
24667: DISABLE
// begin enable ;
24668: ENABLE
// if cratesSpawned < 6 then
24669: LD_EXP 53
24673: PUSH
24674: LD_INT 6
24676: LESS
24677: IFFALSE 24714
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24679: LD_INT 3
24681: PPUSH
24682: LD_INT 5
24684: PPUSH
24685: CALL_OW 12
24689: PPUSH
24690: LD_INT 16
24692: PPUSH
24693: LD_INT 1
24695: PPUSH
24696: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24700: LD_ADDR_EXP 53
24704: PUSH
24705: LD_EXP 53
24709: PUSH
24710: LD_INT 1
24712: PLUS
24713: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
24714: LD_EXP 53
24718: PUSH
24719: LD_INT 6
24721: GREATEREQUAL
24722: PUSH
24723: LD_EXP 53
24727: PUSH
24728: LD_INT 12
24730: LESS
24731: AND
24732: IFFALSE 24776
// begin wait ( 0 0$30 ) ;
24734: LD_INT 1050
24736: PPUSH
24737: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24741: LD_INT 3
24743: PPUSH
24744: LD_INT 5
24746: PPUSH
24747: CALL_OW 12
24751: PPUSH
24752: LD_INT 16
24754: PPUSH
24755: LD_INT 1
24757: PPUSH
24758: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24762: LD_ADDR_EXP 53
24766: PUSH
24767: LD_EXP 53
24771: PUSH
24772: LD_INT 1
24774: PLUS
24775: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
24776: LD_EXP 53
24780: PUSH
24781: LD_INT 12
24783: GREATEREQUAL
24784: IFFALSE 24828
// begin wait ( 1 1$0 ) ;
24786: LD_INT 2100
24788: PPUSH
24789: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24793: LD_INT 3
24795: PPUSH
24796: LD_INT 5
24798: PPUSH
24799: CALL_OW 12
24803: PPUSH
24804: LD_INT 16
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24814: LD_ADDR_EXP 53
24818: PUSH
24819: LD_EXP 53
24823: PUSH
24824: LD_INT 1
24826: PLUS
24827: ST_TO_ADDR
// end ; end ;
24828: END
