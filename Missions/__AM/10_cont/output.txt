// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export mission_prefix , mission_prefix_prev ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 23
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 24
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 33
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 34
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 35
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// ruPossition = 0 ;
  47: LD_ADDR_EXP 36
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  55: LD_ADDR_EXP 37
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// arabianEscape = 0 ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  70: LD_ADDR_EXP 41
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// eventVar1 = 0 ;
  78: LD_ADDR_EXP 45
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// eventVar2 = 0 ;
  86: LD_ADDR_EXP 46
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// mission_prefix := 10_ ;
  94: LD_ADDR_EXP 43
  98: PUSH
  99: LD_STRING 10_
 101: ST_TO_ADDR
// mission_prefix_prev := 09c_ ;
 102: LD_ADDR_EXP 44
 106: PUSH
 107: LD_STRING 09c_
 109: ST_TO_ADDR
// debugMode = 1 ;
 110: LD_ADDR_EXP 47
 114: PUSH
 115: LD_INT 1
 117: ST_TO_ADDR
// PrepareDifficulty ;
 118: CALL 5859 0 0
// PrepareVehicles ;
 122: CALL 633 0 0
// PrepareJMMTeam ;
 126: CALL 423 0 0
// PrepareCathyTeam ;
 130: CALL 1040 0 0
// PrepareArabianCommander ;
 134: CALL 2054 0 0
// PrepareArabian ;
 138: CALL 2106 0 0
// BuildArabianBase ;
 142: CALL 8457 0 0
// PrepareNature ;
 146: CALL 18040 0 0
// TameApemans ;
 150: CALL 13330 0 0
// SaveForQuickRestart ;
 154: CALL_OW 22
// end ;
 158: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 159: LD_EXP 47
 163: PUSH
 164: LD_INT 1
 166: EQUAL
 167: IFFALSE 420
 169: GO 171
 171: DISABLE
 172: LD_INT 0
 174: PPUSH
// begin enable ;
 175: ENABLE
// fogoff ( true ) ;
 176: LD_INT 1
 178: PPUSH
 179: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 183: LD_ADDR_VAR 0 1
 187: PUSH
 188: LD_INT 22
 190: PUSH
 191: LD_INT 1
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: PUSH
 198: LD_INT 2
 200: PUSH
 201: LD_INT 30
 203: PUSH
 204: LD_INT 0
 206: PUSH
 207: EMPTY
 208: LIST
 209: LIST
 210: PUSH
 211: LD_INT 30
 213: PUSH
 214: LD_INT 1
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: LIST
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: PPUSH
 230: CALL_OW 69
 234: PUSH
 235: FOR_IN
 236: IFFALSE 260
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 238: LD_VAR 0 1
 242: PPUSH
 243: CALL_OW 274
 247: PPUSH
 248: LD_INT 1
 250: PPUSH
 251: LD_INT 9999
 253: PPUSH
 254: CALL_OW 277
 258: GO 235
 260: POP
 261: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 262: LD_ADDR_VAR 0 1
 266: PUSH
 267: LD_INT 22
 269: PUSH
 270: LD_INT 1
 272: PUSH
 273: EMPTY
 274: LIST
 275: LIST
 276: PUSH
 277: LD_INT 2
 279: PUSH
 280: LD_INT 30
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 30
 292: PUSH
 293: LD_INT 1
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PPUSH
 309: CALL_OW 69
 313: PUSH
 314: FOR_IN
 315: IFFALSE 339
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: CALL_OW 274
 326: PPUSH
 327: LD_INT 2
 329: PPUSH
 330: LD_INT 9999
 332: PPUSH
 333: CALL_OW 277
 337: GO 314
 339: POP
 340: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 341: LD_ADDR_VAR 0 1
 345: PUSH
 346: LD_INT 22
 348: PUSH
 349: LD_INT 1
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: PUSH
 356: LD_INT 2
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 0
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 30
 371: PUSH
 372: LD_INT 1
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: LIST
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PPUSH
 388: CALL_OW 69
 392: PUSH
 393: FOR_IN
 394: IFFALSE 418
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 396: LD_VAR 0 1
 400: PPUSH
 401: CALL_OW 274
 405: PPUSH
 406: LD_INT 3
 408: PPUSH
 409: LD_INT 9999
 411: PPUSH
 412: CALL_OW 277
 416: GO 393
 418: POP
 419: POP
// end ; end_of_file
 420: PPOPN 1
 422: END
// export function PrepareJMMTeam ; begin
 423: LD_INT 0
 425: PPUSH
// uc_side = 1 ;
 426: LD_ADDR_OWVAR 20
 430: PUSH
 431: LD_INT 1
 433: ST_TO_ADDR
// uc_nation = 1 ;
 434: LD_ADDR_OWVAR 21
 438: PUSH
 439: LD_INT 1
 441: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 442: LD_ADDR_EXP 1
 446: PUSH
 447: LD_STRING JMM
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL 5595 0 2
 457: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 458: LD_ADDR_EXP 10
 462: PUSH
 463: LD_STRING Gary
 465: PPUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL 5595 0 2
 473: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 474: LD_ADDR_EXP 5
 478: PUSH
 479: LD_STRING Cyrus
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 5595 0 2
 489: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 490: LD_ADDR_EXP 4
 494: PUSH
 495: LD_STRING Bobby
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: CALL 5595 0 2
 505: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 506: LD_ADDR_EXP 6
 510: PUSH
 511: LD_STRING Lisa
 513: PPUSH
 514: LD_INT 0
 516: PPUSH
 517: CALL 5595 0 2
 521: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 522: LD_ADDR_EXP 20
 526: PUSH
 527: LD_STRING Powell
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL 5595 0 2
 537: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 538: LD_EXP 1
 542: PPUSH
 543: LD_EXP 23
 547: PUSH
 548: LD_INT 1
 550: ARRAY
 551: PPUSH
 552: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 556: LD_EXP 10
 560: PPUSH
 561: LD_EXP 23
 565: PUSH
 566: LD_INT 2
 568: ARRAY
 569: PPUSH
 570: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 574: LD_EXP 5
 578: PPUSH
 579: LD_EXP 23
 583: PUSH
 584: LD_INT 3
 586: ARRAY
 587: PPUSH
 588: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 592: LD_EXP 4
 596: PPUSH
 597: LD_EXP 23
 601: PUSH
 602: LD_INT 4
 604: ARRAY
 605: PPUSH
 606: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 610: LD_EXP 6
 614: PPUSH
 615: LD_EXP 23
 619: PUSH
 620: LD_INT 5
 622: ARRAY
 623: PPUSH
 624: CALL_OW 52
// end ;
 628: LD_VAR 0 1
 632: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount , rest ; begin
 633: LD_INT 0
 635: PPUSH
 636: PPUSH
 637: PPUSH
 638: PPUSH
 639: PPUSH
 640: PPUSH
// uc_side = 1 ;
 641: LD_ADDR_OWVAR 20
 645: PUSH
 646: LD_INT 1
 648: ST_TO_ADDR
// uc_nation = 1 ;
 649: LD_ADDR_OWVAR 21
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// rest = 0 ;
 657: LD_ADDR_VAR 0 6
 661: PUSH
 662: LD_INT 0
 664: ST_TO_ADDR
// for i := 1 to 5 do
 665: LD_ADDR_VAR 0 2
 669: PUSH
 670: DOUBLE
 671: LD_INT 1
 673: DEC
 674: ST_TO_ADDR
 675: LD_INT 5
 677: PUSH
 678: FOR_TO
 679: IFFALSE 1033
// begin vc_engine = 1 ;
 681: LD_ADDR_OWVAR 39
 685: PUSH
 686: LD_INT 1
 688: ST_TO_ADDR
// vc_control = 1 ;
 689: LD_ADDR_OWVAR 38
 693: PUSH
 694: LD_INT 1
 696: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
 697: LD_ADDR_OWVAR 40
 701: PUSH
 702: LD_INT 3
 704: PUSH
 705: LD_INT 4
 707: PUSH
 708: LD_INT 5
 710: PUSH
 711: LD_INT 12
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 1
 722: PPUSH
 723: LD_INT 4
 725: PPUSH
 726: CALL_OW 12
 730: ARRAY
 731: ST_TO_ADDR
// vc_chassis = 3 ;
 732: LD_ADDR_OWVAR 37
 736: PUSH
 737: LD_INT 3
 739: ST_TO_ADDR
// veh = CreateVehicle ;
 740: LD_ADDR_VAR 0 3
 744: PUSH
 745: CALL_OW 45
 749: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 750: LD_VAR 0 3
 754: PPUSH
 755: LD_INT 1
 757: PPUSH
 758: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 762: LD_VAR 0 3
 766: PPUSH
 767: LD_INT 2
 769: PPUSH
 770: LD_INT 0
 772: PPUSH
 773: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
 777: LD_ADDR_EXP 23
 781: PUSH
 782: LD_EXP 23
 786: PUSH
 787: LD_VAR 0 3
 791: ADD
 792: ST_TO_ADDR
// if vc_weapon = 12 then
 793: LD_OWVAR 40
 797: PUSH
 798: LD_INT 12
 800: EQUAL
 801: IFFALSE 1031
// begin rnd = Rand ( 1 , 10 ) * 10 ;
 803: LD_ADDR_VAR 0 4
 807: PUSH
 808: LD_INT 1
 810: PPUSH
 811: LD_INT 10
 813: PPUSH
 814: CALL_OW 12
 818: PUSH
 819: LD_INT 10
 821: MUL
 822: ST_TO_ADDR
// rest = 100 - rest - rnd ;
 823: LD_ADDR_VAR 0 6
 827: PUSH
 828: LD_INT 100
 830: PUSH
 831: LD_VAR 0 6
 835: MINUS
 836: PUSH
 837: LD_VAR 0 4
 841: MINUS
 842: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
 843: LD_VAR 0 3
 847: PPUSH
 848: LD_INT 1
 850: PUSH
 851: LD_INT 3
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: LD_INT 1
 860: PPUSH
 861: LD_INT 2
 863: PPUSH
 864: CALL_OW 12
 868: ARRAY
 869: PPUSH
 870: LD_VAR 0 4
 874: PPUSH
 875: CALL_OW 291
// cargoAmmount = rnd ;
 879: LD_ADDR_VAR 0 5
 883: PUSH
 884: LD_VAR 0 4
 888: ST_TO_ADDR
// if rnd = 100 then
 889: LD_VAR 0 4
 893: PUSH
 894: LD_INT 100
 896: EQUAL
 897: IFFALSE 903
// exit ;
 899: POP
 900: POP
 901: GO 1035
// repeat rest = 100 - rest - rnd ;
 903: LD_ADDR_VAR 0 6
 907: PUSH
 908: LD_INT 100
 910: PUSH
 911: LD_VAR 0 6
 915: MINUS
 916: PUSH
 917: LD_VAR 0 4
 921: MINUS
 922: ST_TO_ADDR
// rnd = Rand ( 1 , rest / 10 ) * 10 ;
 923: LD_ADDR_VAR 0 4
 927: PUSH
 928: LD_INT 1
 930: PPUSH
 931: LD_VAR 0 6
 935: PUSH
 936: LD_INT 10
 938: DIVREAL
 939: PPUSH
 940: CALL_OW 12
 944: PUSH
 945: LD_INT 10
 947: MUL
 948: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
 949: LD_VAR 0 3
 953: PPUSH
 954: LD_INT 1
 956: PUSH
 957: LD_INT 3
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: LD_INT 1
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: CALL_OW 12
 974: ARRAY
 975: PPUSH
 976: LD_VAR 0 4
 980: PPUSH
 981: CALL_OW 291
// until rest = 0 ;
 985: LD_VAR 0 6
 989: PUSH
 990: LD_INT 0
 992: EQUAL
 993: IFFALSE 903
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
 995: LD_VAR 0 3
 999: PPUSH
1000: LD_INT 1
1002: PUSH
1003: LD_INT 3
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_INT 2
1015: PPUSH
1016: CALL_OW 12
1020: ARRAY
1021: PPUSH
1022: LD_VAR 0 4
1026: PPUSH
1027: CALL_OW 291
// end ; end ;
1031: GO 678
1033: POP
1034: POP
// end ;
1035: LD_VAR 0 1
1039: RET
// export function PrepareCathyTeam ; begin
1040: LD_INT 0
1042: PPUSH
// uc_side = 4 ;
1043: LD_ADDR_OWVAR 20
1047: PUSH
1048: LD_INT 4
1050: ST_TO_ADDR
// uc_nation = 1 ;
1051: LD_ADDR_OWVAR 21
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1059: LD_ADDR_EXP 11
1063: PUSH
1064: LD_STRING Simms
1066: PPUSH
1067: LD_INT 0
1069: PPUSH
1070: CALL 5595 0 2
1074: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
1075: LD_ADDR_EXP 12
1079: PUSH
1080: LD_STRING Denis
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: CALL 5595 0 2
1090: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
1091: LD_ADDR_EXP 13
1095: PUSH
1096: LD_STRING Joan
1098: PPUSH
1099: LD_INT 0
1101: PPUSH
1102: CALL 5595 0 2
1106: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , false ) ;
1107: LD_ADDR_EXP 14
1111: PUSH
1112: LD_STRING Khatam
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL 5595 0 2
1122: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
1123: LD_ADDR_EXP 15
1127: PUSH
1128: LD_STRING Gladstone
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: CALL 5595 0 2
1138: ST_TO_ADDR
// Gladstone = PrepareUnit ( DeltaDoctor , false ) ;
1139: LD_ADDR_EXP 15
1143: PUSH
1144: LD_STRING DeltaDoctor
1146: PPUSH
1147: LD_INT 0
1149: PPUSH
1150: CALL 5595 0 2
1154: ST_TO_ADDR
// hc_class := 2 ;
1155: LD_ADDR_OWVAR 28
1159: PUSH
1160: LD_INT 2
1162: ST_TO_ADDR
// hc_sex := sex_male ;
1163: LD_ADDR_OWVAR 27
1167: PUSH
1168: LD_INT 1
1170: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1171: LD_ADDR_OWVAR 33
1175: PUSH
1176: LD_STRING SecondCharsGal
1178: ST_TO_ADDR
// hc_face_number := 60 ;
1179: LD_ADDR_OWVAR 34
1183: PUSH
1184: LD_INT 60
1186: ST_TO_ADDR
// hc_name := Steve Holland ;
1187: LD_ADDR_OWVAR 26
1191: PUSH
1192: LD_STRING Steve Holland
1194: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
1195: LD_ADDR_OWVAR 31
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 7
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: LD_INT 0
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: LIST
1216: LIST
1217: ST_TO_ADDR
// Steve = CreateHuman ;
1218: LD_ADDR_EXP 16
1222: PUSH
1223: CALL_OW 44
1227: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1228: LD_EXP 11
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: LD_INT 0
1238: PPUSH
1239: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1243: LD_EXP 12
1247: PPUSH
1248: LD_INT 1
1250: PPUSH
1251: LD_INT 0
1253: PPUSH
1254: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1258: LD_EXP 13
1262: PPUSH
1263: LD_INT 1
1265: PPUSH
1266: LD_INT 0
1268: PPUSH
1269: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1273: LD_EXP 14
1277: PPUSH
1278: LD_INT 1
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1288: LD_EXP 15
1292: PPUSH
1293: LD_INT 1
1295: PPUSH
1296: LD_INT 0
1298: PPUSH
1299: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1303: LD_EXP 17
1307: PPUSH
1308: LD_INT 1
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
1318: LD_EXP 16
1322: PPUSH
1323: LD_INT 1
1325: PPUSH
1326: LD_INT 0
1328: PPUSH
1329: CALL_OW 49
// SetClass ( [ Khatam , Denis ] , 4 ) ;
1333: LD_EXP 14
1337: PUSH
1338: LD_EXP 12
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PPUSH
1347: LD_INT 4
1349: PPUSH
1350: CALL_OW 336
// AddComBuild ( Steve , b_depot , 101 , 30 , 2 ) ;
1354: LD_EXP 16
1358: PPUSH
1359: LD_INT 0
1361: PPUSH
1362: LD_INT 101
1364: PPUSH
1365: LD_INT 30
1367: PPUSH
1368: LD_INT 2
1370: PPUSH
1371: CALL_OW 205
// uc_side = 1 ;
1375: LD_ADDR_OWVAR 20
1379: PUSH
1380: LD_INT 1
1382: ST_TO_ADDR
// hc_class := 1 ;
1383: LD_ADDR_OWVAR 28
1387: PUSH
1388: LD_INT 1
1390: ST_TO_ADDR
// hc_sex := sex_female ;
1391: LD_ADDR_OWVAR 27
1395: PUSH
1396: LD_INT 2
1398: ST_TO_ADDR
// hc_gallery :=  ;
1399: LD_ADDR_OWVAR 33
1403: PUSH
1404: LD_STRING 
1406: ST_TO_ADDR
// hc_name :=  ;
1407: LD_ADDR_OWVAR 26
1411: PUSH
1412: LD_STRING 
1414: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
1415: LD_ADDR_OWVAR 31
1419: PUSH
1420: LD_INT 1
1422: PUSH
1423: LD_INT 7
1425: PUSH
1426: LD_INT 1
1428: PUSH
1429: LD_INT 0
1431: PUSH
1432: EMPTY
1433: LIST
1434: LIST
1435: LIST
1436: LIST
1437: ST_TO_ADDR
// AmScout = CreateHuman ;
1438: LD_ADDR_EXP 18
1442: PUSH
1443: CALL_OW 44
1447: ST_TO_ADDR
// end ;
1448: LD_VAR 0 1
1452: RET
// export function PrepareCornell ; begin
1453: LD_INT 0
1455: PPUSH
// uc_side = 4 ;
1456: LD_ADDR_OWVAR 20
1460: PUSH
1461: LD_INT 4
1463: ST_TO_ADDR
// uc_nation = 1 ;
1464: LD_ADDR_OWVAR 21
1468: PUSH
1469: LD_INT 1
1471: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornell , false ) ;
1472: LD_ADDR_EXP 19
1476: PUSH
1477: LD_STRING Cornell
1479: PPUSH
1480: LD_INT 0
1482: PPUSH
1483: CALL 5595 0 2
1487: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
1488: LD_EXP 19
1492: PPUSH
1493: LD_INT 8
1495: PPUSH
1496: LD_INT 0
1498: PPUSH
1499: CALL_OW 49
// if IsInUnit ( JMM ) then
1503: LD_EXP 1
1507: PPUSH
1508: CALL_OW 310
1512: IFFALSE 1555
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
1514: LD_EXP 19
1518: PPUSH
1519: LD_EXP 1
1523: PPUSH
1524: CALL_OW 310
1528: PPUSH
1529: CALL_OW 250
1533: PPUSH
1534: LD_EXP 1
1538: PPUSH
1539: CALL_OW 310
1543: PPUSH
1544: CALL_OW 251
1548: PPUSH
1549: CALL_OW 111
1553: GO 1584
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
1555: LD_EXP 19
1559: PPUSH
1560: LD_EXP 1
1564: PPUSH
1565: CALL_OW 250
1569: PPUSH
1570: LD_EXP 1
1574: PPUSH
1575: CALL_OW 251
1579: PPUSH
1580: CALL_OW 111
// end ; end_of_file
1584: LD_VAR 0 1
1588: RET
// export function PrepareRussians ; var i , un ; begin
1589: LD_INT 0
1591: PPUSH
1592: PPUSH
1593: PPUSH
// uc_side = 3 ;
1594: LD_ADDR_OWVAR 20
1598: PUSH
1599: LD_INT 3
1601: ST_TO_ADDR
// uc_nation = 3 ;
1602: LD_ADDR_OWVAR 21
1606: PUSH
1607: LD_INT 3
1609: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
1610: LD_ADDR_EXP 21
1614: PUSH
1615: LD_STRING Tsaritsyn
1617: PPUSH
1618: LD_INT 0
1620: PPUSH
1621: CALL 5595 0 2
1625: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
1626: LD_EXP 21
1630: PPUSH
1631: LD_INT 3
1633: PPUSH
1634: LD_INT 0
1636: PPUSH
1637: CALL_OW 49
// for i = 1 to 14 do
1641: LD_ADDR_VAR 0 2
1645: PUSH
1646: DOUBLE
1647: LD_INT 1
1649: DEC
1650: ST_TO_ADDR
1651: LD_INT 14
1653: PUSH
1654: FOR_TO
1655: IFFALSE 1741
// begin uc_side = 3 ;
1657: LD_ADDR_OWVAR 20
1661: PUSH
1662: LD_INT 3
1664: ST_TO_ADDR
// uc_nation = 3 ;
1665: LD_ADDR_OWVAR 21
1669: PUSH
1670: LD_INT 3
1672: ST_TO_ADDR
// hc_gallery =  ;
1673: LD_ADDR_OWVAR 33
1677: PUSH
1678: LD_STRING 
1680: ST_TO_ADDR
// hc_name =  ;
1681: LD_ADDR_OWVAR 26
1685: PUSH
1686: LD_STRING 
1688: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1689: LD_INT 0
1691: PPUSH
1692: LD_INT 1
1694: PPUSH
1695: LD_EXP 31
1699: PPUSH
1700: LD_EXP 32
1704: PPUSH
1705: CALL_OW 12
1709: PPUSH
1710: CALL_OW 380
// un = CreateHuman ;
1714: LD_ADDR_VAR 0 3
1718: PUSH
1719: CALL_OW 44
1723: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1724: LD_VAR 0 3
1728: PPUSH
1729: LD_INT 3
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// end ;
1739: GO 1654
1741: POP
1742: POP
// for i = 1 to 6 do
1743: LD_ADDR_VAR 0 2
1747: PUSH
1748: DOUBLE
1749: LD_INT 1
1751: DEC
1752: ST_TO_ADDR
1753: LD_INT 6
1755: PUSH
1756: FOR_TO
1757: IFFALSE 1843
// begin uc_side = 3 ;
1759: LD_ADDR_OWVAR 20
1763: PUSH
1764: LD_INT 3
1766: ST_TO_ADDR
// uc_nation = 3 ;
1767: LD_ADDR_OWVAR 21
1771: PUSH
1772: LD_INT 3
1774: ST_TO_ADDR
// hc_gallery =  ;
1775: LD_ADDR_OWVAR 33
1779: PUSH
1780: LD_STRING 
1782: ST_TO_ADDR
// hc_name =  ;
1783: LD_ADDR_OWVAR 26
1787: PUSH
1788: LD_STRING 
1790: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1791: LD_INT 0
1793: PPUSH
1794: LD_INT 2
1796: PPUSH
1797: LD_EXP 31
1801: PPUSH
1802: LD_EXP 32
1806: PPUSH
1807: CALL_OW 12
1811: PPUSH
1812: CALL_OW 380
// un = CreateHuman ;
1816: LD_ADDR_VAR 0 3
1820: PUSH
1821: CALL_OW 44
1825: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1826: LD_VAR 0 3
1830: PPUSH
1831: LD_INT 3
1833: PPUSH
1834: LD_INT 0
1836: PPUSH
1837: CALL_OW 49
// end ;
1841: GO 1756
1843: POP
1844: POP
// for i = 1 to 6 do
1845: LD_ADDR_VAR 0 2
1849: PUSH
1850: DOUBLE
1851: LD_INT 1
1853: DEC
1854: ST_TO_ADDR
1855: LD_INT 6
1857: PUSH
1858: FOR_TO
1859: IFFALSE 1945
// begin uc_side = 3 ;
1861: LD_ADDR_OWVAR 20
1865: PUSH
1866: LD_INT 3
1868: ST_TO_ADDR
// uc_nation = 3 ;
1869: LD_ADDR_OWVAR 21
1873: PUSH
1874: LD_INT 3
1876: ST_TO_ADDR
// hc_gallery =  ;
1877: LD_ADDR_OWVAR 33
1881: PUSH
1882: LD_STRING 
1884: ST_TO_ADDR
// hc_name =  ;
1885: LD_ADDR_OWVAR 26
1889: PUSH
1890: LD_STRING 
1892: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1893: LD_INT 0
1895: PPUSH
1896: LD_INT 3
1898: PPUSH
1899: LD_EXP 31
1903: PPUSH
1904: LD_EXP 32
1908: PPUSH
1909: CALL_OW 12
1913: PPUSH
1914: CALL_OW 380
// un = CreateHuman ;
1918: LD_ADDR_VAR 0 3
1922: PUSH
1923: CALL_OW 44
1927: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1928: LD_VAR 0 3
1932: PPUSH
1933: LD_INT 3
1935: PPUSH
1936: LD_INT 0
1938: PPUSH
1939: CALL_OW 49
// end ;
1943: GO 1858
1945: POP
1946: POP
// for i = 1 to 4 do
1947: LD_ADDR_VAR 0 2
1951: PUSH
1952: DOUBLE
1953: LD_INT 1
1955: DEC
1956: ST_TO_ADDR
1957: LD_INT 4
1959: PUSH
1960: FOR_TO
1961: IFFALSE 2047
// begin uc_side = 3 ;
1963: LD_ADDR_OWVAR 20
1967: PUSH
1968: LD_INT 3
1970: ST_TO_ADDR
// uc_nation = 3 ;
1971: LD_ADDR_OWVAR 21
1975: PUSH
1976: LD_INT 3
1978: ST_TO_ADDR
// hc_gallery =  ;
1979: LD_ADDR_OWVAR 33
1983: PUSH
1984: LD_STRING 
1986: ST_TO_ADDR
// hc_name =  ;
1987: LD_ADDR_OWVAR 26
1991: PUSH
1992: LD_STRING 
1994: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1995: LD_INT 0
1997: PPUSH
1998: LD_INT 4
2000: PPUSH
2001: LD_EXP 31
2005: PPUSH
2006: LD_EXP 32
2010: PPUSH
2011: CALL_OW 12
2015: PPUSH
2016: CALL_OW 380
// un = CreateHuman ;
2020: LD_ADDR_VAR 0 3
2024: PUSH
2025: CALL_OW 44
2029: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2030: LD_VAR 0 3
2034: PPUSH
2035: LD_INT 3
2037: PPUSH
2038: LD_INT 0
2040: PPUSH
2041: CALL_OW 49
// end ;
2045: GO 1960
2047: POP
2048: POP
// end ; end_of_file
2049: LD_VAR 0 1
2053: RET
// export function PrepareArabianCommander ; begin
2054: LD_INT 0
2056: PPUSH
// uc_side = 2 ;
2057: LD_ADDR_OWVAR 20
2061: PUSH
2062: LD_INT 2
2064: ST_TO_ADDR
// uc_nation = 2 ;
2065: LD_ADDR_OWVAR 21
2069: PUSH
2070: LD_INT 2
2072: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
2073: LD_ADDR_EXP 22
2077: PUSH
2078: LD_STRING Dietrich
2080: PPUSH
2081: CALL_OW 25
2085: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
2086: LD_EXP 22
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// end ;
2101: LD_VAR 0 1
2105: RET
// export function PrepareArabian ; var i , un , veh ; begin
2106: LD_INT 0
2108: PPUSH
2109: PPUSH
2110: PPUSH
2111: PPUSH
// for i = 1 to 3 do
2112: LD_ADDR_VAR 0 2
2116: PUSH
2117: DOUBLE
2118: LD_INT 1
2120: DEC
2121: ST_TO_ADDR
2122: LD_INT 3
2124: PUSH
2125: FOR_TO
2126: IFFALSE 2212
// begin uc_side = 2 ;
2128: LD_ADDR_OWVAR 20
2132: PUSH
2133: LD_INT 2
2135: ST_TO_ADDR
// uc_nation = 2 ;
2136: LD_ADDR_OWVAR 21
2140: PUSH
2141: LD_INT 2
2143: ST_TO_ADDR
// hc_gallery =  ;
2144: LD_ADDR_OWVAR 33
2148: PUSH
2149: LD_STRING 
2151: ST_TO_ADDR
// hc_name =  ;
2152: LD_ADDR_OWVAR 26
2156: PUSH
2157: LD_STRING 
2159: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2160: LD_INT 0
2162: PPUSH
2163: LD_INT 1
2165: PPUSH
2166: LD_EXP 31
2170: PPUSH
2171: LD_EXP 32
2175: PPUSH
2176: CALL_OW 12
2180: PPUSH
2181: CALL_OW 380
// un = CreateHuman ;
2185: LD_ADDR_VAR 0 3
2189: PUSH
2190: CALL_OW 44
2194: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2195: LD_VAR 0 3
2199: PPUSH
2200: LD_INT 4
2202: PPUSH
2203: LD_INT 0
2205: PPUSH
2206: CALL_OW 49
// end ;
2210: GO 2125
2212: POP
2213: POP
// for i = 1 to 6 do
2214: LD_ADDR_VAR 0 2
2218: PUSH
2219: DOUBLE
2220: LD_INT 1
2222: DEC
2223: ST_TO_ADDR
2224: LD_INT 6
2226: PUSH
2227: FOR_TO
2228: IFFALSE 2314
// begin uc_side = 2 ;
2230: LD_ADDR_OWVAR 20
2234: PUSH
2235: LD_INT 2
2237: ST_TO_ADDR
// uc_nation = 2 ;
2238: LD_ADDR_OWVAR 21
2242: PUSH
2243: LD_INT 2
2245: ST_TO_ADDR
// hc_gallery =  ;
2246: LD_ADDR_OWVAR 33
2250: PUSH
2251: LD_STRING 
2253: ST_TO_ADDR
// hc_name =  ;
2254: LD_ADDR_OWVAR 26
2258: PUSH
2259: LD_STRING 
2261: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2262: LD_INT 0
2264: PPUSH
2265: LD_INT 2
2267: PPUSH
2268: LD_EXP 31
2272: PPUSH
2273: LD_EXP 32
2277: PPUSH
2278: CALL_OW 12
2282: PPUSH
2283: CALL_OW 380
// un = CreateHuman ;
2287: LD_ADDR_VAR 0 3
2291: PUSH
2292: CALL_OW 44
2296: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2297: LD_VAR 0 3
2301: PPUSH
2302: LD_INT 4
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 49
// end ;
2312: GO 2227
2314: POP
2315: POP
// for i = 1 to 6 do
2316: LD_ADDR_VAR 0 2
2320: PUSH
2321: DOUBLE
2322: LD_INT 1
2324: DEC
2325: ST_TO_ADDR
2326: LD_INT 6
2328: PUSH
2329: FOR_TO
2330: IFFALSE 2416
// begin uc_side = 2 ;
2332: LD_ADDR_OWVAR 20
2336: PUSH
2337: LD_INT 2
2339: ST_TO_ADDR
// uc_nation = 2 ;
2340: LD_ADDR_OWVAR 21
2344: PUSH
2345: LD_INT 2
2347: ST_TO_ADDR
// hc_gallery =  ;
2348: LD_ADDR_OWVAR 33
2352: PUSH
2353: LD_STRING 
2355: ST_TO_ADDR
// hc_name =  ;
2356: LD_ADDR_OWVAR 26
2360: PUSH
2361: LD_STRING 
2363: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2364: LD_INT 0
2366: PPUSH
2367: LD_INT 1
2369: PPUSH
2370: LD_EXP 31
2374: PPUSH
2375: LD_EXP 32
2379: PPUSH
2380: CALL_OW 12
2384: PPUSH
2385: CALL_OW 380
// un = CreateHuman ;
2389: LD_ADDR_VAR 0 3
2393: PUSH
2394: CALL_OW 44
2398: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2399: LD_VAR 0 3
2403: PPUSH
2404: LD_INT 4
2406: PPUSH
2407: LD_INT 0
2409: PPUSH
2410: CALL_OW 49
// end ;
2414: GO 2329
2416: POP
2417: POP
// for i = 1 to 4 do
2418: LD_ADDR_VAR 0 2
2422: PUSH
2423: DOUBLE
2424: LD_INT 1
2426: DEC
2427: ST_TO_ADDR
2428: LD_INT 4
2430: PUSH
2431: FOR_TO
2432: IFFALSE 2518
// begin uc_side = 2 ;
2434: LD_ADDR_OWVAR 20
2438: PUSH
2439: LD_INT 2
2441: ST_TO_ADDR
// uc_nation = 2 ;
2442: LD_ADDR_OWVAR 21
2446: PUSH
2447: LD_INT 2
2449: ST_TO_ADDR
// hc_gallery =  ;
2450: LD_ADDR_OWVAR 33
2454: PUSH
2455: LD_STRING 
2457: ST_TO_ADDR
// hc_name =  ;
2458: LD_ADDR_OWVAR 26
2462: PUSH
2463: LD_STRING 
2465: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2466: LD_INT 0
2468: PPUSH
2469: LD_INT 4
2471: PPUSH
2472: LD_EXP 31
2476: PPUSH
2477: LD_EXP 32
2481: PPUSH
2482: CALL_OW 12
2486: PPUSH
2487: CALL_OW 380
// un = CreateHuman ;
2491: LD_ADDR_VAR 0 3
2495: PUSH
2496: CALL_OW 44
2500: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_INT 4
2508: PPUSH
2509: LD_INT 0
2511: PPUSH
2512: CALL_OW 49
// end ;
2516: GO 2431
2518: POP
2519: POP
// for i = 1 to 2 do
2520: LD_ADDR_VAR 0 2
2524: PUSH
2525: DOUBLE
2526: LD_INT 1
2528: DEC
2529: ST_TO_ADDR
2530: LD_INT 2
2532: PUSH
2533: FOR_TO
2534: IFFALSE 2664
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2536: LD_ADDR_VAR 0 4
2540: PUSH
2541: LD_INT 22
2543: PUSH
2544: LD_INT 2
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 21
2553: PUSH
2554: LD_INT 2
2556: PUSH
2557: EMPTY
2558: LIST
2559: LIST
2560: PUSH
2561: LD_INT 58
2563: PUSH
2564: EMPTY
2565: LIST
2566: PUSH
2567: EMPTY
2568: LIST
2569: LIST
2570: LIST
2571: PPUSH
2572: CALL_OW 69
2576: ST_TO_ADDR
// uc_side = 2 ;
2577: LD_ADDR_OWVAR 20
2581: PUSH
2582: LD_INT 2
2584: ST_TO_ADDR
// uc_nation = 2 ;
2585: LD_ADDR_OWVAR 21
2589: PUSH
2590: LD_INT 2
2592: ST_TO_ADDR
// hc_gallery =  ;
2593: LD_ADDR_OWVAR 33
2597: PUSH
2598: LD_STRING 
2600: ST_TO_ADDR
// hc_name =  ;
2601: LD_ADDR_OWVAR 26
2605: PUSH
2606: LD_STRING 
2608: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 3
2614: PPUSH
2615: LD_EXP 31
2619: PPUSH
2620: LD_EXP 32
2624: PPUSH
2625: CALL_OW 12
2629: PPUSH
2630: CALL_OW 380
// un = CreateHuman ;
2634: LD_ADDR_VAR 0 3
2638: PUSH
2639: CALL_OW 44
2643: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
2644: LD_VAR 0 3
2648: PPUSH
2649: LD_VAR 0 4
2653: PUSH
2654: LD_INT 1
2656: ARRAY
2657: PPUSH
2658: CALL_OW 52
// end ;
2662: GO 2533
2664: POP
2665: POP
// end ; end_of_file
2666: LD_VAR 0 1
2670: RET
// every 1 do
2671: GO 2673
2673: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
2674: LD_EXP 1
2678: PPUSH
2679: CALL_OW 87
// DialogueOn ;
2683: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
2687: LD_EXP 10
2691: PPUSH
2692: LD_STRING D2-Gary-1
2694: PPUSH
2695: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
2699: LD_EXP 1
2703: PPUSH
2704: LD_STRING D2-JMM-1
2706: PPUSH
2707: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
2711: LD_EXP 10
2715: PPUSH
2716: LD_STRING D2-Gary-2
2718: PPUSH
2719: CALL_OW 88
// DialogueOff ;
2723: CALL_OW 7
// ChangeMissionObjectives ( M1 ) ;
2727: LD_STRING M1
2729: PPUSH
2730: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
2734: LD_INT 38
2736: PPUSH
2737: LD_INT 1
2739: PPUSH
2740: LD_INT 100
2742: PPUSH
2743: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
2747: LD_INT 47
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_INT 50
2755: PPUSH
2756: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
2760: LD_INT 47
2762: PPUSH
2763: LD_INT 3
2765: PPUSH
2766: LD_INT 50
2768: PPUSH
2769: CALL_OW 291
// end ;
2773: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
2774: LD_EXP 1
2778: PPUSH
2779: LD_EXP 11
2783: PPUSH
2784: CALL_OW 296
2788: PUSH
2789: LD_INT 15
2791: LESS
2792: IFFALSE 3134
2794: GO 2796
2796: DISABLE
// begin InGameOn ;
2797: CALL_OW 8
// ComExitVehicle ( JMM ) ;
2801: LD_EXP 1
2805: PPUSH
2806: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
2810: LD_EXP 1
2814: PPUSH
2815: CALL_OW 87
// wait ( 0 0$1 ) ;
2819: LD_INT 35
2821: PPUSH
2822: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2826: LD_INT 35
2828: PPUSH
2829: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2833: LD_EXP 11
2837: PUSH
2838: LD_EXP 13
2842: PUSH
2843: LD_EXP 12
2847: PUSH
2848: LD_EXP 14
2852: PUSH
2853: EMPTY
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: PPUSH
2859: LD_EXP 1
2863: PPUSH
2864: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
2868: LD_EXP 1
2872: PPUSH
2873: LD_EXP 11
2877: PPUSH
2878: CALL_OW 296
2882: PUSH
2883: LD_INT 5
2885: LESS
2886: IFFALSE 2826
// ComTurnUnit ( JMM , Simms ) ;
2888: LD_EXP 1
2892: PPUSH
2893: LD_EXP 11
2897: PPUSH
2898: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2902: LD_EXP 11
2906: PUSH
2907: LD_EXP 13
2911: PUSH
2912: LD_EXP 12
2916: PUSH
2917: LD_EXP 14
2921: PUSH
2922: EMPTY
2923: LIST
2924: LIST
2925: LIST
2926: LIST
2927: PPUSH
2928: LD_EXP 1
2932: PPUSH
2933: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
2937: LD_EXP 1
2941: PUSH
2942: LD_EXP 11
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: PPUSH
2951: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
2955: LD_EXP 11
2959: PPUSH
2960: LD_STRING D2a-Sim-1
2962: PPUSH
2963: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
2967: LD_EXP 1
2971: PPUSH
2972: LD_STRING D2a-JMM-1
2974: PPUSH
2975: CALL_OW 88
// ComTurnUnit ( JMM , Joan ) ;
2979: LD_EXP 1
2983: PPUSH
2984: LD_EXP 13
2988: PPUSH
2989: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
2993: LD_EXP 13
2997: PPUSH
2998: LD_STRING D2b-Joan-1
3000: PPUSH
3001: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
3005: LD_EXP 1
3009: PPUSH
3010: LD_STRING D2b-JMM-1
3012: PPUSH
3013: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
3017: LD_EXP 13
3021: PPUSH
3022: LD_STRING D2b-Joan-2
3024: PPUSH
3025: CALL_OW 88
// ComTurnUnit ( JMM , Denis ) ;
3029: LD_EXP 1
3033: PPUSH
3034: LD_EXP 12
3038: PPUSH
3039: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
3043: LD_EXP 12
3047: PPUSH
3048: LD_STRING D2c-Den-1
3050: PPUSH
3051: CALL_OW 88
// ComTurnUnit ( JMM , Khatam ) ;
3055: LD_EXP 1
3059: PPUSH
3060: LD_EXP 14
3064: PPUSH
3065: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
3069: LD_EXP 1
3073: PPUSH
3074: LD_STRING D2c-JMM-1
3076: PPUSH
3077: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
3081: LD_EXP 14
3085: PPUSH
3086: LD_STRING D2c-Khat-1
3088: PPUSH
3089: CALL_OW 88
// InGameOff ;
3093: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
3097: LD_INT 22
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PPUSH
3107: CALL_OW 69
3111: PPUSH
3112: LD_INT 1
3114: PPUSH
3115: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
3119: LD_STRING M1a
3121: PPUSH
3122: CALL_OW 337
// joinEpsilon = 1 ;
3126: LD_ADDR_EXP 24
3130: PUSH
3131: LD_INT 1
3133: ST_TO_ADDR
// end ;
3134: END
// every 0 0$1 trigger eventVar1 = 1 do
3135: LD_EXP 45
3139: PUSH
3140: LD_INT 1
3142: EQUAL
3143: IFFALSE 3760
3145: GO 3147
3147: DISABLE
// begin DialogueOn ;
3148: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-1 , D3-Sci1-1 ) ;
3152: LD_INT 22
3154: PUSH
3155: LD_INT 1
3157: PUSH
3158: EMPTY
3159: LIST
3160: LIST
3161: PUSH
3162: LD_INT 25
3164: PUSH
3165: LD_INT 4
3167: PUSH
3168: EMPTY
3169: LIST
3170: LIST
3171: PUSH
3172: LD_INT 26
3174: PUSH
3175: LD_INT 1
3177: PUSH
3178: EMPTY
3179: LIST
3180: LIST
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: LIST
3186: PPUSH
3187: CALL_OW 69
3191: PPUSH
3192: LD_STRING D3-Sci1-1
3194: PPUSH
3195: LD_STRING D3-Sci1-1
3197: PPUSH
3198: CALL 5652 0 3
// Say ( Gary , D3-Gary-1 ) ;
3202: LD_EXP 10
3206: PPUSH
3207: LD_STRING D3-Gary-1
3209: PPUSH
3210: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-2 , D3-Sci1-2 ) ;
3214: LD_INT 22
3216: PUSH
3217: LD_INT 1
3219: PUSH
3220: EMPTY
3221: LIST
3222: LIST
3223: PUSH
3224: LD_INT 25
3226: PUSH
3227: LD_INT 4
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: PUSH
3234: LD_INT 26
3236: PUSH
3237: LD_INT 1
3239: PUSH
3240: EMPTY
3241: LIST
3242: LIST
3243: PUSH
3244: EMPTY
3245: LIST
3246: LIST
3247: LIST
3248: PPUSH
3249: CALL_OW 69
3253: PPUSH
3254: LD_STRING D3-Sci1-2
3256: PPUSH
3257: LD_STRING D3-Sci1-2
3259: PPUSH
3260: CALL 5652 0 3
// Say ( JMM , D3-JMM-2 ) ;
3264: LD_EXP 1
3268: PPUSH
3269: LD_STRING D3-JMM-2
3271: PPUSH
3272: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-3 , D3-Sci1-3 ) ;
3276: LD_INT 22
3278: PUSH
3279: LD_INT 1
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PUSH
3286: LD_INT 25
3288: PUSH
3289: LD_INT 4
3291: PUSH
3292: EMPTY
3293: LIST
3294: LIST
3295: PUSH
3296: LD_INT 26
3298: PUSH
3299: LD_INT 1
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: PUSH
3306: EMPTY
3307: LIST
3308: LIST
3309: LIST
3310: PPUSH
3311: CALL_OW 69
3315: PPUSH
3316: LD_STRING D3-Sci1-3
3318: PPUSH
3319: LD_STRING D3-Sci1-3
3321: PPUSH
3322: CALL 5652 0 3
// Say ( JMM , D3-JMM-3 ) ;
3326: LD_EXP 1
3330: PPUSH
3331: LD_STRING D3-JMM-3
3333: PPUSH
3334: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-4 , D3-Sci1-4 ) ;
3338: LD_INT 22
3340: PUSH
3341: LD_INT 1
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 25
3350: PUSH
3351: LD_INT 4
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: LD_INT 26
3360: PUSH
3361: LD_INT 1
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 69
3377: PPUSH
3378: LD_STRING D3-Sci1-4
3380: PPUSH
3381: LD_STRING D3-Sci1-4
3383: PPUSH
3384: CALL 5652 0 3
// DialogueOff ;
3388: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
3392: LD_INT 12
3394: PPUSH
3395: LD_INT 1
3397: PPUSH
3398: LD_INT 1
3400: PPUSH
3401: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
3405: LD_INT 32
3407: PPUSH
3408: LD_INT 1
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
3418: LD_INT 12
3420: PPUSH
3421: LD_INT 1
3423: PPUSH
3424: LD_INT 1
3426: PPUSH
3427: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
3431: LD_STRING M2
3433: PPUSH
3434: CALL_OW 337
// wait ( 5 5$0 ) ;
3438: LD_INT 10500
3440: PPUSH
3441: CALL_OW 67
// if IsOK ( Simms ) then
3445: LD_EXP 11
3449: PPUSH
3450: CALL_OW 302
3454: IFFALSE 3621
// begin DialogueOn ;
3456: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
3460: LD_EXP 11
3464: PPUSH
3465: LD_STRING D3a-Sim-1
3467: PPUSH
3468: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
3472: LD_EXP 12
3476: PPUSH
3477: LD_STRING D3a-Sci1-1
3479: PPUSH
3480: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
3484: LD_EXP 11
3488: PPUSH
3489: LD_STRING D3a-Sim-2
3491: PPUSH
3492: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
3496: LD_EXP 12
3500: PPUSH
3501: LD_STRING D3a-Sci1-2
3503: PPUSH
3504: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
3508: LD_EXP 11
3512: PPUSH
3513: LD_STRING D3a-Sim-3
3515: PPUSH
3516: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
3520: LD_EXP 12
3524: PPUSH
3525: LD_STRING D3a-Sci1-3
3527: PPUSH
3528: CALL_OW 88
// if IsOK ( Joan ) then
3532: LD_EXP 13
3536: PPUSH
3537: CALL_OW 302
3541: IFFALSE 3557
// Say ( Simms , D3a-Sim-4 ) else
3543: LD_EXP 11
3547: PPUSH
3548: LD_STRING D3a-Sim-4
3550: PPUSH
3551: CALL_OW 88
3555: GO 3569
// Say ( Simms , D3a-Sim-4a ) ;
3557: LD_EXP 11
3561: PPUSH
3562: LD_STRING D3a-Sim-4a
3564: PPUSH
3565: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
3569: LD_EXP 12
3573: PPUSH
3574: LD_STRING D3a-Sci1-4
3576: PPUSH
3577: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
3581: LD_EXP 11
3585: PPUSH
3586: LD_STRING D3a-Sim-5
3588: PPUSH
3589: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
3593: LD_EXP 12
3597: PPUSH
3598: LD_STRING D3a-Sci1-5
3600: PPUSH
3601: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
3605: LD_EXP 11
3609: PPUSH
3610: LD_STRING D3a-Sim-6
3612: PPUSH
3613: CALL_OW 88
// DialogueOff ;
3617: CALL_OW 7
// end ; wait ( 3 3$0 ) ;
3621: LD_INT 6300
3623: PPUSH
3624: CALL_OW 67
// DialogueOn ;
3628: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
3632: LD_INT 22
3634: PUSH
3635: LD_INT 2
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PUSH
3642: LD_INT 25
3644: PUSH
3645: LD_INT 4
3647: PUSH
3648: EMPTY
3649: LIST
3650: LIST
3651: PUSH
3652: LD_INT 26
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: EMPTY
3659: LIST
3660: LIST
3661: PUSH
3662: EMPTY
3663: LIST
3664: LIST
3665: LIST
3666: PPUSH
3667: CALL_OW 69
3671: PPUSH
3672: LD_STRING D5-Ar1-1
3674: PPUSH
3675: LD_STRING D5-Ar1-1
3677: PPUSH
3678: CALL 5652 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
3682: LD_EXP 22
3686: PPUSH
3687: LD_STRING D5-Diet-1
3689: PPUSH
3690: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
3694: LD_INT 22
3696: PUSH
3697: LD_INT 2
3699: PUSH
3700: EMPTY
3701: LIST
3702: LIST
3703: PUSH
3704: LD_INT 25
3706: PUSH
3707: LD_INT 4
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 26
3716: PUSH
3717: LD_INT 1
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: EMPTY
3725: LIST
3726: LIST
3727: LIST
3728: PPUSH
3729: CALL_OW 69
3733: PPUSH
3734: LD_STRING D5-Ar1-2
3736: PPUSH
3737: LD_STRING D5-Ar1-2
3739: PPUSH
3740: CALL 5652 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
3744: LD_EXP 22
3748: PPUSH
3749: LD_STRING D5-Diet-2
3751: PPUSH
3752: CALL_OW 88
// DialogueOff ;
3756: CALL_OW 7
// end ;
3760: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
3761: LD_EXP 24
3765: PUSH
3766: LD_INT 1
3768: EQUAL
3769: IFFALSE 4089
3771: GO 3773
3773: DISABLE
3774: LD_INT 0
3776: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
3777: LD_EXP 18
3781: PPUSH
3782: LD_STRING D4-FSol1-1
3784: PPUSH
3785: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
3789: LD_STRING M3
3791: PPUSH
3792: CALL_OW 337
// PrepareRussians ;
3796: CALL 1589 0 0
// rnd = Rand ( 1 , 100 ) ;
3800: LD_ADDR_VAR 0 1
3804: PUSH
3805: LD_INT 1
3807: PPUSH
3808: LD_INT 100
3810: PPUSH
3811: CALL_OW 12
3815: ST_TO_ADDR
// if difficulty = 1 then
3816: LD_OWVAR 67
3820: PUSH
3821: LD_INT 1
3823: EQUAL
3824: IFFALSE 3907
// begin if rnd > 0 and rnd < 51 then
3826: LD_VAR 0 1
3830: PUSH
3831: LD_INT 0
3833: GREATER
3834: PUSH
3835: LD_VAR 0 1
3839: PUSH
3840: LD_INT 51
3842: LESS
3843: AND
3844: IFFALSE 3853
// BuildRussianBase ( 2 ) ;
3846: LD_INT 2
3848: PPUSH
3849: CALL 6179 0 1
// if rnd > 50 and rnd < 81 then
3853: LD_VAR 0 1
3857: PUSH
3858: LD_INT 50
3860: GREATER
3861: PUSH
3862: LD_VAR 0 1
3866: PUSH
3867: LD_INT 81
3869: LESS
3870: AND
3871: IFFALSE 3880
// BuildRussianBase ( 1 ) ;
3873: LD_INT 1
3875: PPUSH
3876: CALL 6179 0 1
// if rnd > 80 and rnd < 101 then
3880: LD_VAR 0 1
3884: PUSH
3885: LD_INT 80
3887: GREATER
3888: PUSH
3889: LD_VAR 0 1
3893: PUSH
3894: LD_INT 101
3896: LESS
3897: AND
3898: IFFALSE 3907
// BuildRussianBase ( 3 ) ;
3900: LD_INT 3
3902: PPUSH
3903: CALL 6179 0 1
// end ; if difficulty = 2 then
3907: LD_OWVAR 67
3911: PUSH
3912: LD_INT 2
3914: EQUAL
3915: IFFALSE 3998
// begin if rnd > 0 and rnd < 61 then
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 0
3924: GREATER
3925: PUSH
3926: LD_VAR 0 1
3930: PUSH
3931: LD_INT 61
3933: LESS
3934: AND
3935: IFFALSE 3944
// BuildRussianBase ( 2 ) ;
3937: LD_INT 2
3939: PPUSH
3940: CALL 6179 0 1
// if rnd > 60 and rnd < 81 then
3944: LD_VAR 0 1
3948: PUSH
3949: LD_INT 60
3951: GREATER
3952: PUSH
3953: LD_VAR 0 1
3957: PUSH
3958: LD_INT 81
3960: LESS
3961: AND
3962: IFFALSE 3971
// BuildRussianBase ( 1 ) ;
3964: LD_INT 1
3966: PPUSH
3967: CALL 6179 0 1
// if rnd > 80 and rnd < 101 then
3971: LD_VAR 0 1
3975: PUSH
3976: LD_INT 80
3978: GREATER
3979: PUSH
3980: LD_VAR 0 1
3984: PUSH
3985: LD_INT 101
3987: LESS
3988: AND
3989: IFFALSE 3998
// BuildRussianBase ( 3 ) ;
3991: LD_INT 3
3993: PPUSH
3994: CALL 6179 0 1
// end ; if difficulty = 3 then
3998: LD_OWVAR 67
4002: PUSH
4003: LD_INT 3
4005: EQUAL
4006: IFFALSE 4089
// begin if rnd > 0 and rnd < 71 then
4008: LD_VAR 0 1
4012: PUSH
4013: LD_INT 0
4015: GREATER
4016: PUSH
4017: LD_VAR 0 1
4021: PUSH
4022: LD_INT 71
4024: LESS
4025: AND
4026: IFFALSE 4035
// BuildRussianBase ( 3 ) ;
4028: LD_INT 3
4030: PPUSH
4031: CALL 6179 0 1
// if rnd > 70 and rnd < 81 then
4035: LD_VAR 0 1
4039: PUSH
4040: LD_INT 70
4042: GREATER
4043: PUSH
4044: LD_VAR 0 1
4048: PUSH
4049: LD_INT 81
4051: LESS
4052: AND
4053: IFFALSE 4062
// BuildRussianBase ( 2 ) ;
4055: LD_INT 2
4057: PPUSH
4058: CALL 6179 0 1
// if rnd > 80 and rnd < 101 then
4062: LD_VAR 0 1
4066: PUSH
4067: LD_INT 80
4069: GREATER
4070: PUSH
4071: LD_VAR 0 1
4075: PUSH
4076: LD_INT 101
4078: LESS
4079: AND
4080: IFFALSE 4089
// BuildRussianBase ( 1 ) ;
4082: LD_INT 1
4084: PPUSH
4085: CALL 6179 0 1
// end ; end ;
4089: PPOPN 1
4091: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i ;
4092: LD_INT 54
4094: PPUSH
4095: LD_INT 1
4097: PPUSH
4098: CALL_OW 321
4102: PUSH
4103: LD_INT 2
4105: EQUAL
4106: PUSH
4107: LD_INT 21
4109: PPUSH
4110: LD_INT 1
4112: PPUSH
4113: CALL_OW 321
4117: PUSH
4118: LD_INT 2
4120: EQUAL
4121: OR
4122: PUSH
4123: LD_INT 22
4125: PPUSH
4126: LD_INT 1
4128: PPUSH
4129: CALL_OW 321
4133: PUSH
4134: LD_INT 2
4136: EQUAL
4137: OR
4138: IFFALSE 4764
4140: GO 4142
4142: DISABLE
4143: LD_INT 0
4145: PPUSH
// begin DialogueOn ;
4146: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4150: LD_EXP 1
4154: PPUSH
4155: LD_STRING D6-JMM-1
4157: PPUSH
4158: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
4162: LD_EXP 12
4166: PPUSH
4167: LD_STRING D6-Sci1-1
4169: PPUSH
4170: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4174: LD_EXP 1
4178: PPUSH
4179: LD_STRING D6-JMM-2
4181: PPUSH
4182: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
4186: LD_EXP 12
4190: PPUSH
4191: LD_STRING D6-Sci1-2
4193: PPUSH
4194: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4198: LD_EXP 1
4202: PPUSH
4203: LD_STRING D6-JMM-3
4205: PPUSH
4206: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
4210: LD_EXP 12
4214: PPUSH
4215: LD_STRING D6-Sci1-3
4217: PPUSH
4218: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4222: LD_EXP 1
4226: PPUSH
4227: LD_STRING D6-JMM-4
4229: PPUSH
4230: CALL_OW 88
// DialogueOff ;
4234: CALL_OW 7
// wait ( [ 8 8$0 , 8 8$30 , 9 9$0 , 9 9$30 , 10 10$0 , 10 10$30 ] [ Rand ( 1 , 6 ) ] ) ;
4238: LD_INT 16800
4240: PUSH
4241: LD_INT 17850
4243: PUSH
4244: LD_INT 18900
4246: PUSH
4247: LD_INT 19950
4249: PUSH
4250: LD_INT 21000
4252: PUSH
4253: LD_INT 22050
4255: PUSH
4256: EMPTY
4257: LIST
4258: LIST
4259: LIST
4260: LIST
4261: LIST
4262: LIST
4263: PUSH
4264: LD_INT 1
4266: PPUSH
4267: LD_INT 6
4269: PPUSH
4270: CALL_OW 12
4274: ARRAY
4275: PPUSH
4276: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
4280: LD_ADDR_VAR 0 1
4284: PUSH
4285: LD_INT 22
4287: PUSH
4288: LD_INT 2
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 25
4297: PUSH
4298: LD_INT 4
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PUSH
4314: FOR_IN
4315: IFFALSE 4328
// ComExitBuilding ( i ) ;
4317: LD_VAR 0 1
4321: PPUSH
4322: CALL_OW 122
4326: GO 4314
4328: POP
4329: POP
// wait ( 0 0$1 ) ;
4330: LD_INT 35
4332: PPUSH
4333: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
4337: LD_INT 76
4339: PPUSH
4340: LD_INT 19
4342: PPUSH
4343: CALL_OW 84
// DialogueOn ;
4347: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
4351: LD_INT 22
4353: PUSH
4354: LD_INT 1
4356: PUSH
4357: EMPTY
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 26
4363: PUSH
4364: LD_INT 1
4366: PUSH
4367: EMPTY
4368: LIST
4369: LIST
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PUSH
4375: LD_EXP 1
4379: PUSH
4380: EMPTY
4381: LIST
4382: DIFF
4383: PPUSH
4384: CALL_OW 69
4388: PPUSH
4389: LD_STRING D8-Sol1-1
4391: PPUSH
4392: LD_STRING D8-Sol1-1
4394: PPUSH
4395: CALL 5652 0 3
// Say ( DeltaDoctor , D8-Sci1-1 ) ;
4399: LD_EXP 17
4403: PPUSH
4404: LD_STRING D8-Sci1-1
4406: PPUSH
4407: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
4411: LD_EXP 1
4415: PPUSH
4416: LD_STRING D8-JMM-1
4418: PPUSH
4419: CALL_OW 88
// DialogueOff ;
4423: CALL_OW 7
// ArabianTrait ;
4427: CALL 4767 0 0
// wait ( 0 0$30 ) ;
4431: LD_INT 1050
4433: PPUSH
4434: CALL_OW 67
// Say ( Gary , D8a-Gary-1 ) ;
4438: LD_EXP 10
4442: PPUSH
4443: LD_STRING D8a-Gary-1
4445: PPUSH
4446: CALL_OW 88
// wait ( 0 0$5 ) ;
4450: LD_INT 175
4452: PPUSH
4453: CALL_OW 67
// if IsOK ( Khatam ) then
4457: LD_EXP 14
4461: PPUSH
4462: CALL_OW 302
4466: IFFALSE 4764
// begin SetSide ( Khatam , 8 ) ;
4468: LD_EXP 14
4472: PPUSH
4473: LD_INT 8
4475: PPUSH
4476: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
4480: LD_EXP 14
4484: PPUSH
4485: CALL_OW 122
// wait ( 0 0$1 ) ;
4489: LD_INT 35
4491: PPUSH
4492: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
4496: LD_EXP 14
4500: PPUSH
4501: CALL_OW 121
// wait ( 0 0$1 ) ;
4505: LD_INT 35
4507: PPUSH
4508: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
4512: LD_EXP 14
4516: PPUSH
4517: LD_INT 7
4519: PPUSH
4520: CALL_OW 113
// DialogueOn ;
4524: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-1 , D8b-FSol1-1 ) ;
4528: LD_INT 22
4530: PUSH
4531: LD_INT 1
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: PUSH
4538: EMPTY
4539: LIST
4540: PUSH
4541: LD_EXP 1
4545: PUSH
4546: LD_EXP 14
4550: PUSH
4551: LD_EXP 13
4555: PUSH
4556: EMPTY
4557: LIST
4558: LIST
4559: LIST
4560: DIFF
4561: PPUSH
4562: CALL_OW 69
4566: PPUSH
4567: LD_STRING D8b-Sol1-1
4569: PPUSH
4570: LD_STRING D8b-FSol1-1
4572: PPUSH
4573: CALL 5652 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
4577: LD_EXP 14
4581: PPUSH
4582: LD_STRING D8b-Khat-1
4584: PPUSH
4585: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-2 , D8b-FSol1-2 ) ;
4589: LD_INT 22
4591: PUSH
4592: LD_INT 1
4594: PUSH
4595: EMPTY
4596: LIST
4597: LIST
4598: PUSH
4599: EMPTY
4600: LIST
4601: PUSH
4602: LD_EXP 1
4606: PUSH
4607: LD_EXP 14
4611: PUSH
4612: LD_EXP 13
4616: PUSH
4617: EMPTY
4618: LIST
4619: LIST
4620: LIST
4621: DIFF
4622: PPUSH
4623: CALL_OW 69
4627: PPUSH
4628: LD_STRING D8b-Sol1-2
4630: PPUSH
4631: LD_STRING D8b-FSol1-2
4633: PPUSH
4634: CALL 5652 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
4638: LD_EXP 14
4642: PPUSH
4643: LD_STRING D8b-Khat-2
4645: PPUSH
4646: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-3 , D8b-FSol1-3 ) ;
4650: LD_INT 22
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: PUSH
4663: LD_EXP 1
4667: PUSH
4668: LD_EXP 14
4672: PUSH
4673: LD_EXP 13
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: LIST
4682: DIFF
4683: PPUSH
4684: CALL_OW 69
4688: PPUSH
4689: LD_STRING D8b-Sol1-3
4691: PPUSH
4692: LD_STRING D8b-FSol1-3
4694: PPUSH
4695: CALL 5652 0 3
// Say ( Khatam , D8b-Khat-4 ) ;
4699: LD_EXP 14
4703: PPUSH
4704: LD_STRING D8b-Khat-4
4706: PPUSH
4707: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-4 , D8b-FSol1-4 ) ;
4711: LD_INT 22
4713: PUSH
4714: LD_INT 1
4716: PUSH
4717: EMPTY
4718: LIST
4719: LIST
4720: PUSH
4721: EMPTY
4722: LIST
4723: PUSH
4724: LD_EXP 1
4728: PUSH
4729: LD_EXP 14
4733: PUSH
4734: LD_EXP 13
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: DIFF
4744: PPUSH
4745: CALL_OW 69
4749: PPUSH
4750: LD_STRING D8b-Sol1-4
4752: PPUSH
4753: LD_STRING D8b-FSol1-4
4755: PPUSH
4756: CALL 5652 0 3
// DialogueOff ;
4760: CALL_OW 7
// end ; end ;
4764: PPOPN 1
4766: END
// export function ArabianTrait ; var i ; begin
4767: LD_INT 0
4769: PPUSH
4770: PPUSH
// ChangeSideFog ( 2 , 2 ) ;
4771: LD_INT 2
4773: PPUSH
4774: LD_INT 2
4776: PPUSH
4777: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
4781: LD_INT 1
4783: PPUSH
4784: LD_INT 2
4786: PPUSH
4787: LD_INT 2
4789: PPUSH
4790: LD_INT 1
4792: PPUSH
4793: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
4797: LD_INT 3
4799: PPUSH
4800: LD_INT 2
4802: PPUSH
4803: LD_INT 1
4805: PPUSH
4806: LD_INT 1
4808: PPUSH
4809: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: LD_INT 22
4820: PUSH
4821: LD_INT 2
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 21
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PPUSH
4842: CALL_OW 69
4846: PUSH
4847: FOR_IN
4848: IFFALSE 4988
// begin ComExitBuilding ( i ) ;
4850: LD_VAR 0 2
4854: PPUSH
4855: CALL_OW 122
// wait ( 0 0$1 ) ;
4859: LD_INT 35
4861: PPUSH
4862: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
4866: LD_VAR 0 2
4870: PPUSH
4871: LD_INT 77
4873: PPUSH
4874: LD_INT 10
4876: PPUSH
4877: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
4881: LD_VAR 0 2
4885: PPUSH
4886: LD_INT 82
4888: PPUSH
4889: LD_INT 5
4891: PPUSH
4892: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
4896: LD_VAR 0 2
4900: PPUSH
4901: LD_INT 95
4903: PPUSH
4904: LD_INT 12
4906: PPUSH
4907: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
4911: LD_VAR 0 2
4915: PPUSH
4916: LD_INT 102
4918: PPUSH
4919: LD_INT 11
4921: PPUSH
4922: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
4926: LD_VAR 0 2
4930: PPUSH
4931: LD_INT 116
4933: PPUSH
4934: LD_INT 15
4936: PPUSH
4937: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
4941: LD_VAR 0 2
4945: PPUSH
4946: LD_INT 140
4948: PPUSH
4949: LD_INT 25
4951: PPUSH
4952: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
4956: LD_VAR 0 2
4960: PPUSH
4961: LD_INT 160
4963: PPUSH
4964: LD_INT 56
4966: PPUSH
4967: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
4971: LD_VAR 0 2
4975: PPUSH
4976: LD_INT 189
4978: PPUSH
4979: LD_INT 79
4981: PPUSH
4982: CALL_OW 174
// end ;
4986: GO 4847
4988: POP
4989: POP
// arabianAttackersAI = 1 ;
4990: LD_ADDR_EXP 41
4994: PUSH
4995: LD_INT 1
4997: ST_TO_ADDR
// end ;
4998: LD_VAR 0 1
5002: RET
// every 0 0$1 do var i ;
5003: GO 5005
5005: DISABLE
5006: LD_INT 0
5008: PPUSH
// begin enable ;
5009: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
5010: LD_ADDR_VAR 0 1
5014: PUSH
5015: LD_INT 7
5017: PPUSH
5018: LD_INT 22
5020: PUSH
5021: LD_INT 2
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: PPUSH
5028: CALL_OW 70
5032: PUSH
5033: FOR_IN
5034: IFFALSE 5065
// begin RemoveUnit ( i ) ;
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL_OW 64
// arabianEscape = 1 ;
5045: LD_ADDR_EXP 42
5049: PUSH
5050: LD_INT 1
5052: ST_TO_ADDR
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
5053: LD_INT 1
5055: PPUSH
5056: LD_STRING 10_ScientistsEscape_1
5058: PPUSH
5059: CALL_OW 39
// end ;
5063: GO 5033
5065: POP
5066: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
5067: LD_EXP 14
5071: PPUSH
5072: LD_INT 7
5074: PPUSH
5075: CALL_OW 308
5079: IFFALSE 5090
// RemoveUnit ( Khatam ) ;
5081: LD_EXP 14
5085: PPUSH
5086: CALL_OW 64
// if IsInArea ( Dietrich , ArabianSpawn2 ) then
5090: LD_EXP 22
5094: PPUSH
5095: LD_INT 7
5097: PPUSH
5098: CALL_OW 308
5102: IFFALSE 5114
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
5104: LD_INT 1
5106: PPUSH
5107: LD_STRING 10_GensherEscape_1
5109: PPUSH
5110: CALL_OW 39
// end ;
5114: PPOPN 1
5116: END
// every 6 6$30 trigger joinEpsilon = 1 do
5117: LD_EXP 24
5121: PUSH
5122: LD_INT 1
5124: EQUAL
5125: IFFALSE 5134
5127: GO 5129
5129: DISABLE
// PrepareCornell ;
5130: CALL 1453 0 0
5134: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
5135: LD_INT 1
5137: PPUSH
5138: LD_EXP 19
5142: PPUSH
5143: CALL_OW 292
5147: IFFALSE 5372
5149: GO 5151
5151: DISABLE
// begin InGameOn ;
5152: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
5156: LD_EXP 19
5160: PPUSH
5161: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
5165: LD_EXP 19
5169: PPUSH
5170: LD_STRING D7-Corn-1
5172: PPUSH
5173: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM , Joan ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
5177: LD_INT 22
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 2
5189: PUSH
5190: LD_INT 25
5192: PUSH
5193: LD_INT 1
5195: PUSH
5196: EMPTY
5197: LIST
5198: LIST
5199: PUSH
5200: LD_INT 25
5202: PUSH
5203: LD_INT 2
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 3
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: LD_INT 25
5222: PUSH
5223: LD_INT 4
5225: PUSH
5226: EMPTY
5227: LIST
5228: LIST
5229: PUSH
5230: EMPTY
5231: LIST
5232: LIST
5233: LIST
5234: LIST
5235: LIST
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: LD_EXP 1
5245: PUSH
5246: LD_EXP 13
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: DIFF
5255: PPUSH
5256: CALL_OW 69
5260: PPUSH
5261: LD_STRING D7-Sol1-1
5263: PPUSH
5264: LD_STRING D7-FSol1-1
5266: PPUSH
5267: CALL 5652 0 3
// CenterNowOnUnits ( Cornell ) ;
5271: LD_EXP 19
5275: PPUSH
5276: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
5280: LD_EXP 19
5284: PPUSH
5285: LD_STRING D7-Corn-2
5287: PPUSH
5288: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
5292: LD_EXP 1
5296: PPUSH
5297: LD_STRING D7-JMM-2
5299: PPUSH
5300: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
5304: LD_EXP 19
5308: PPUSH
5309: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
5313: LD_EXP 19
5317: PPUSH
5318: LD_STRING D7-Corn-3
5320: PPUSH
5321: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
5325: LD_EXP 19
5329: PPUSH
5330: LD_INT 250
5332: PPUSH
5333: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
5337: LD_EXP 19
5341: PPUSH
5342: LD_INT 1
5344: PPUSH
5345: CALL_OW 235
// wait ( 0 0$1 ) ;
5349: LD_INT 35
5351: PPUSH
5352: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
5356: LD_EXP 1
5360: PPUSH
5361: LD_STRING D7-JMM-3
5363: PPUSH
5364: CALL_OW 88
// InGameOff ;
5368: CALL_OW 9
// end ;
5372: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
5373: LD_EXP 19
5377: PPUSH
5378: CALL_OW 255
5382: PUSH
5383: LD_INT 1
5385: EQUAL
5386: PUSH
5387: LD_EXP 19
5391: PPUSH
5392: CALL_OW 256
5396: PUSH
5397: LD_INT 251
5399: GREATER
5400: AND
5401: IFFALSE 5594
5403: GO 5405
5405: DISABLE
// begin DialogueOn ;
5406: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
5410: LD_EXP 1
5414: PPUSH
5415: LD_STRING D7a-JMM-1
5417: PPUSH
5418: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
5422: LD_EXP 19
5426: PPUSH
5427: LD_STRING D7a-Corn-1
5429: PPUSH
5430: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
5434: LD_EXP 1
5438: PPUSH
5439: LD_STRING D7a-JMM-2
5441: PPUSH
5442: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
5446: LD_EXP 19
5450: PPUSH
5451: LD_STRING D7a-Corn-2
5453: PPUSH
5454: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
5458: LD_EXP 1
5462: PPUSH
5463: LD_STRING D7a-JMM-3
5465: PPUSH
5466: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
5470: LD_EXP 19
5474: PPUSH
5475: LD_STRING D7a-Corn-3
5477: PPUSH
5478: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
5482: LD_EXP 1
5486: PPUSH
5487: LD_STRING D7a-JMM-4
5489: PPUSH
5490: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
5494: LD_EXP 19
5498: PPUSH
5499: LD_STRING D7a-Corn-4
5501: PPUSH
5502: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
5506: LD_EXP 1
5510: PPUSH
5511: LD_STRING D7a-JMM-5
5513: PPUSH
5514: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
5518: LD_EXP 19
5522: PPUSH
5523: LD_STRING D7a-Corn-5
5525: PPUSH
5526: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
5530: LD_EXP 1
5534: PPUSH
5535: LD_STRING D7a-JMM-6
5537: PPUSH
5538: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
5542: LD_EXP 19
5546: PPUSH
5547: LD_STRING D7a-Corn-6
5549: PPUSH
5550: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
5554: LD_EXP 1
5558: PPUSH
5559: LD_STRING D7a-JMM-7
5561: PPUSH
5562: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
5566: LD_EXP 19
5570: PPUSH
5571: LD_STRING D7a-Corn-7
5573: PPUSH
5574: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
5578: LD_EXP 1
5582: PPUSH
5583: LD_STRING D7a-JMM-8
5585: PPUSH
5586: CALL_OW 88
// DialogueOff ;
5590: CALL_OW 7
// end ; end_of_file
5594: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5595: LD_INT 0
5597: PPUSH
5598: PPUSH
// if exist_mode then
5599: LD_VAR 0 2
5603: IFFALSE 5622
// unit := CreateCharacter ( ident ) else
5605: LD_ADDR_VAR 0 4
5609: PUSH
5610: LD_VAR 0 1
5614: PPUSH
5615: CALL_OW 34
5619: ST_TO_ADDR
5620: GO 5637
// unit := NewCharacter ( ident ) ;
5622: LD_ADDR_VAR 0 4
5626: PUSH
5627: LD_VAR 0 1
5631: PPUSH
5632: CALL_OW 25
5636: ST_TO_ADDR
// result := unit ;
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_VAR 0 4
5646: ST_TO_ADDR
// end ;
5647: LD_VAR 0 3
5651: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5652: LD_INT 0
5654: PPUSH
5655: PPUSH
5656: PPUSH
// rnd = rand ( 1 , characters ) ;
5657: LD_ADDR_VAR 0 6
5661: PUSH
5662: LD_INT 1
5664: PPUSH
5665: LD_VAR 0 1
5669: PPUSH
5670: CALL_OW 12
5674: ST_TO_ADDR
// for i = 1 to characters do
5675: LD_ADDR_VAR 0 5
5679: PUSH
5680: DOUBLE
5681: LD_INT 1
5683: DEC
5684: ST_TO_ADDR
5685: LD_VAR 0 1
5689: PUSH
5690: FOR_TO
5691: IFFALSE 5801
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5693: LD_VAR 0 5
5697: PUSH
5698: LD_VAR 0 6
5702: EQUAL
5703: PUSH
5704: LD_VAR 0 1
5708: PUSH
5709: LD_VAR 0 5
5713: ARRAY
5714: PPUSH
5715: CALL_OW 258
5719: PUSH
5720: LD_INT 1
5722: EQUAL
5723: AND
5724: IFFALSE 5746
// Say ( characters [ i ] , dialogMID ) ;
5726: LD_VAR 0 1
5730: PUSH
5731: LD_VAR 0 5
5735: ARRAY
5736: PPUSH
5737: LD_VAR 0 2
5741: PPUSH
5742: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5746: LD_VAR 0 5
5750: PUSH
5751: LD_VAR 0 6
5755: EQUAL
5756: PUSH
5757: LD_VAR 0 1
5761: PUSH
5762: LD_VAR 0 5
5766: ARRAY
5767: PPUSH
5768: CALL_OW 258
5772: PUSH
5773: LD_INT 2
5775: EQUAL
5776: AND
5777: IFFALSE 5799
// Say ( characters [ i ] , dialogFID ) ;
5779: LD_VAR 0 1
5783: PUSH
5784: LD_VAR 0 5
5788: ARRAY
5789: PPUSH
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 88
// end ;
5799: GO 5690
5801: POP
5802: POP
// end ;
5803: LD_VAR 0 4
5807: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
5808: LD_INT 0
5810: PPUSH
5811: PPUSH
// for i in charactersList do
5812: LD_ADDR_VAR 0 4
5816: PUSH
5817: LD_VAR 0 1
5821: PUSH
5822: FOR_IN
5823: IFFALSE 5852
// begin if IsOk ( i ) then
5825: LD_VAR 0 4
5829: PPUSH
5830: CALL_OW 302
5834: IFFALSE 5850
// SaveCharacters ( i , ident ) ;
5836: LD_VAR 0 4
5840: PPUSH
5841: LD_VAR 0 2
5845: PPUSH
5846: CALL_OW 38
// end ;
5850: GO 5822
5852: POP
5853: POP
// end ;
5854: LD_VAR 0 3
5858: RET
// export function PrepareDifficulty ; begin
5859: LD_INT 0
5861: PPUSH
// if difficulty = 1 then
5862: LD_OWVAR 67
5866: PUSH
5867: LD_INT 1
5869: EQUAL
5870: IFFALSE 5914
// begin RuSolMinLevel = 4 ;
5872: LD_ADDR_EXP 31
5876: PUSH
5877: LD_INT 4
5879: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5880: LD_ADDR_EXP 32
5884: PUSH
5885: LD_INT 7
5887: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
5888: LD_INT 51
5890: PPUSH
5891: LD_INT 6
5893: PPUSH
5894: LD_INT 2
5896: PPUSH
5897: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
5901: LD_INT 51
5903: PPUSH
5904: LD_INT 5
5906: PPUSH
5907: LD_INT 2
5909: PPUSH
5910: CALL_OW 322
// end ; if difficulty = 2 then
5914: LD_OWVAR 67
5918: PUSH
5919: LD_INT 2
5921: EQUAL
5922: IFFALSE 6018
// begin RuSolMinLevel = 5 ;
5924: LD_ADDR_EXP 31
5928: PUSH
5929: LD_INT 5
5931: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
5932: LD_ADDR_EXP 32
5936: PUSH
5937: LD_INT 7
5939: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
5940: LD_INT 51
5942: PPUSH
5943: LD_INT 6
5945: PPUSH
5946: LD_INT 2
5948: PPUSH
5949: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
5953: LD_INT 57
5955: PPUSH
5956: LD_INT 6
5958: PPUSH
5959: LD_INT 2
5961: PPUSH
5962: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
5966: LD_INT 63
5968: PPUSH
5969: LD_INT 6
5971: PPUSH
5972: LD_INT 2
5974: PPUSH
5975: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
5979: LD_INT 51
5981: PPUSH
5982: LD_INT 5
5984: PPUSH
5985: LD_INT 2
5987: PPUSH
5988: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
5992: LD_INT 5
5994: PPUSH
5995: LD_INT 2
5997: PPUSH
5998: LD_INT 2
6000: PPUSH
6001: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
6005: LD_INT 5
6007: PPUSH
6008: LD_INT 5
6010: PPUSH
6011: LD_INT 2
6013: PPUSH
6014: CALL_OW 322
// end ; if difficulty = 3 then
6018: LD_OWVAR 67
6022: PUSH
6023: LD_INT 3
6025: EQUAL
6026: IFFALSE 6174
// begin RuSolMinLevel = 6 ;
6028: LD_ADDR_EXP 31
6032: PUSH
6033: LD_INT 6
6035: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
6036: LD_ADDR_EXP 32
6040: PUSH
6041: LD_INT 8
6043: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
6044: LD_INT 51
6046: PPUSH
6047: LD_INT 6
6049: PPUSH
6050: LD_INT 2
6052: PPUSH
6053: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
6057: LD_INT 57
6059: PPUSH
6060: LD_INT 6
6062: PPUSH
6063: LD_INT 2
6065: PPUSH
6066: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
6070: LD_INT 52
6072: PPUSH
6073: LD_INT 6
6075: PPUSH
6076: LD_INT 2
6078: PPUSH
6079: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
6083: LD_INT 58
6085: PPUSH
6086: LD_INT 6
6088: PPUSH
6089: LD_INT 2
6091: PPUSH
6092: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
6096: LD_INT 63
6098: PPUSH
6099: LD_INT 6
6101: PPUSH
6102: LD_INT 2
6104: PPUSH
6105: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
6109: LD_INT 64
6111: PPUSH
6112: LD_INT 6
6114: PPUSH
6115: LD_INT 2
6117: PPUSH
6118: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
6122: LD_INT 51
6124: PPUSH
6125: LD_INT 5
6127: PPUSH
6128: LD_INT 2
6130: PPUSH
6131: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
6135: LD_INT 52
6137: PPUSH
6138: LD_INT 5
6140: PPUSH
6141: LD_INT 2
6143: PPUSH
6144: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
6148: LD_INT 66
6150: PPUSH
6151: LD_INT 2
6153: PPUSH
6154: LD_INT 2
6156: PPUSH
6157: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
6161: LD_INT 66
6163: PPUSH
6164: LD_INT 5
6166: PPUSH
6167: LD_INT 2
6169: PPUSH
6170: CALL_OW 322
// end ; end ;
6174: LD_VAR 0 1
6178: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
6179: LD_INT 0
6181: PPUSH
6182: PPUSH
6183: PPUSH
6184: PPUSH
// ruPossition = position ;
6185: LD_ADDR_EXP 36
6189: PUSH
6190: LD_VAR 0 1
6194: ST_TO_ADDR
// if position = 1 then
6195: LD_VAR 0 1
6199: PUSH
6200: LD_INT 1
6202: EQUAL
6203: IFFALSE 6979
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6205: LD_ADDR_VAR 0 4
6209: PUSH
6210: LD_INT 22
6212: PUSH
6213: LD_INT 3
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 25
6222: PUSH
6223: LD_INT 2
6225: PUSH
6226: EMPTY
6227: LIST
6228: LIST
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
6239: LD_ADDR_VAR 0 5
6243: PUSH
6244: LD_INT 0
6246: PUSH
6247: LD_INT 49
6249: PUSH
6250: LD_INT 74
6252: PUSH
6253: LD_INT 3
6255: PUSH
6256: EMPTY
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 4
6264: PUSH
6265: LD_INT 73
6267: PUSH
6268: LD_INT 88
6270: PUSH
6271: LD_INT 5
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: PUSH
6280: LD_INT 4
6282: PUSH
6283: LD_INT 56
6285: PUSH
6286: LD_INT 62
6288: PUSH
6289: LD_INT 3
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 29
6300: PUSH
6301: LD_INT 43
6303: PUSH
6304: LD_INT 68
6306: PUSH
6307: LD_INT 2
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: PUSH
6316: LD_INT 30
6318: PUSH
6319: LD_INT 43
6321: PUSH
6322: LD_INT 79
6324: PUSH
6325: LD_INT 5
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: PUSH
6334: LD_INT 28
6336: PUSH
6337: LD_INT 60
6339: PUSH
6340: LD_INT 75
6342: PUSH
6343: LD_INT 1
6345: PUSH
6346: EMPTY
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: PUSH
6352: LD_INT 2
6354: PUSH
6355: LD_INT 50
6357: PUSH
6358: LD_INT 87
6360: PUSH
6361: LD_INT 1
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 28
6372: PUSH
6373: LD_INT 45
6375: PUSH
6376: LD_INT 67
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: LIST
6386: LIST
6387: PUSH
6388: LD_INT 17
6390: PUSH
6391: LD_INT 47
6393: PUSH
6394: LD_INT 84
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: LD_INT 18
6408: PUSH
6409: LD_INT 46
6411: PUSH
6412: LD_INT 87
6414: PUSH
6415: LD_INT 1
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: LIST
6422: LIST
6423: PUSH
6424: LD_INT 28
6426: PUSH
6427: LD_INT 41
6429: PUSH
6430: LD_INT 64
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 32
6444: PUSH
6445: LD_INT 75
6447: PUSH
6448: LD_INT 76
6450: PUSH
6451: LD_INT 5
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: PUSH
6460: LD_INT 32
6462: PUSH
6463: LD_INT 77
6465: PUSH
6466: LD_INT 75
6468: PUSH
6469: LD_INT 5
6471: PUSH
6472: EMPTY
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 32
6480: PUSH
6481: LD_INT 69
6483: PUSH
6484: LD_INT 68
6486: PUSH
6487: LD_INT 3
6489: PUSH
6490: EMPTY
6491: LIST
6492: LIST
6493: LIST
6494: LIST
6495: PUSH
6496: LD_INT 32
6498: PUSH
6499: LD_INT 59
6501: PUSH
6502: LD_INT 96
6504: PUSH
6505: LD_INT 5
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 32
6516: PUSH
6517: LD_INT 56
6519: PUSH
6520: LD_INT 96
6522: PUSH
6523: LD_INT 0
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 32
6534: PUSH
6535: LD_INT 51
6537: PUSH
6538: LD_INT 61
6540: PUSH
6541: LD_INT 3
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: PUSH
6550: LD_INT 32
6552: PUSH
6553: LD_INT 42
6555: PUSH
6556: LD_INT 60
6558: PUSH
6559: LD_INT 3
6561: PUSH
6562: EMPTY
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 32
6570: PUSH
6571: LD_INT 36
6573: PUSH
6574: LD_INT 58
6576: PUSH
6577: LD_INT 3
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 32
6588: PUSH
6589: LD_INT 39
6591: PUSH
6592: LD_INT 59
6594: PUSH
6595: LD_INT 3
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 32
6606: PUSH
6607: LD_INT 61
6609: PUSH
6610: LD_INT 64
6612: PUSH
6613: LD_INT 3
6615: PUSH
6616: EMPTY
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 33
6624: PUSH
6625: LD_INT 63
6627: PUSH
6628: LD_INT 90
6630: PUSH
6631: LD_INT 5
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: PUSH
6640: LD_INT 33
6642: PUSH
6643: LD_INT 64
6645: PUSH
6646: LD_INT 88
6648: PUSH
6649: LD_INT 5
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: PUSH
6658: LD_INT 33
6660: PUSH
6661: LD_INT 72
6663: PUSH
6664: LD_INT 82
6666: PUSH
6667: LD_INT 5
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 6
6678: PUSH
6679: LD_INT 42
6681: PUSH
6682: LD_INT 74
6684: PUSH
6685: LD_INT 1
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: PUSH
6694: LD_INT 6
6696: PUSH
6697: LD_INT 56
6699: PUSH
6700: LD_INT 77
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 21
6714: PUSH
6715: LD_INT 54
6717: PUSH
6718: LD_INT 91
6720: PUSH
6721: LD_INT 5
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: PUSH
6730: LD_INT 16
6732: PUSH
6733: LD_INT 50
6735: PUSH
6736: LD_INT 83
6738: PUSH
6739: LD_INT 3
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: PUSH
6748: LD_INT 24
6750: PUSH
6751: LD_INT 50
6753: PUSH
6754: LD_INT 90
6756: PUSH
6757: LD_INT 0
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: LIST
6778: LIST
6779: LIST
6780: LIST
6781: LIST
6782: LIST
6783: LIST
6784: LIST
6785: LIST
6786: LIST
6787: LIST
6788: LIST
6789: LIST
6790: LIST
6791: LIST
6792: LIST
6793: LIST
6794: LIST
6795: LIST
6796: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
6797: LD_ADDR_VAR 0 3
6801: PUSH
6802: LD_INT 22
6804: PUSH
6805: LD_INT 3
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: PUSH
6812: LD_INT 3
6814: PUSH
6815: LD_INT 25
6817: PUSH
6818: LD_INT 2
6820: PUSH
6821: EMPTY
6822: LIST
6823: LIST
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PPUSH
6833: CALL_OW 69
6837: PUSH
6838: FOR_IN
6839: IFFALSE 6886
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
6841: LD_VAR 0 3
6845: PPUSH
6846: LD_VAR 0 5
6850: PUSH
6851: LD_INT 2
6853: ARRAY
6854: PUSH
6855: LD_INT 2
6857: ARRAY
6858: PUSH
6859: LD_INT 3
6861: PLUS
6862: PPUSH
6863: LD_VAR 0 5
6867: PUSH
6868: LD_INT 2
6870: ARRAY
6871: PUSH
6872: LD_INT 3
6874: ARRAY
6875: PUSH
6876: LD_INT 2
6878: PLUS
6879: PPUSH
6880: CALL_OW 171
6884: GO 6838
6886: POP
6887: POP
// for i := 1 to buildingsTab do
6888: LD_ADDR_VAR 0 3
6892: PUSH
6893: DOUBLE
6894: LD_INT 1
6896: DEC
6897: ST_TO_ADDR
6898: LD_VAR 0 5
6902: PUSH
6903: FOR_TO
6904: IFFALSE 6977
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6906: LD_VAR 0 4
6910: PPUSH
6911: LD_VAR 0 5
6915: PUSH
6916: LD_VAR 0 3
6920: ARRAY
6921: PUSH
6922: LD_INT 1
6924: ARRAY
6925: PPUSH
6926: LD_VAR 0 5
6930: PUSH
6931: LD_VAR 0 3
6935: ARRAY
6936: PUSH
6937: LD_INT 2
6939: ARRAY
6940: PPUSH
6941: LD_VAR 0 5
6945: PUSH
6946: LD_VAR 0 3
6950: ARRAY
6951: PUSH
6952: LD_INT 3
6954: ARRAY
6955: PPUSH
6956: LD_VAR 0 5
6960: PUSH
6961: LD_VAR 0 3
6965: ARRAY
6966: PUSH
6967: LD_INT 4
6969: ARRAY
6970: PPUSH
6971: CALL_OW 205
6975: GO 6903
6977: POP
6978: POP
// end ; if position = 2 then
6979: LD_VAR 0 1
6983: PUSH
6984: LD_INT 2
6986: EQUAL
6987: IFFALSE 7630
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6989: LD_ADDR_VAR 0 4
6993: PUSH
6994: LD_INT 22
6996: PUSH
6997: LD_INT 3
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: LD_INT 25
7006: PUSH
7007: LD_INT 2
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PPUSH
7018: CALL_OW 69
7022: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
7023: LD_ADDR_VAR 0 5
7027: PUSH
7028: LD_INT 0
7030: PUSH
7031: LD_INT 104
7033: PUSH
7034: LD_INT 110
7036: PUSH
7037: LD_INT 5
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: LD_INT 4
7048: PUSH
7049: LD_INT 98
7051: PUSH
7052: LD_INT 90
7054: PUSH
7055: LD_INT 3
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 29
7066: PUSH
7067: LD_INT 103
7069: PUSH
7070: LD_INT 114
7072: PUSH
7073: LD_INT 2
7075: PUSH
7076: EMPTY
7077: LIST
7078: LIST
7079: LIST
7080: LIST
7081: PUSH
7082: LD_INT 30
7084: PUSH
7085: LD_INT 99
7087: PUSH
7088: LD_INT 114
7090: PUSH
7091: LD_INT 3
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 28
7102: PUSH
7103: LD_INT 100
7105: PUSH
7106: LD_INT 112
7108: PUSH
7109: LD_INT 1
7111: PUSH
7112: EMPTY
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: LD_INT 92
7123: PUSH
7124: LD_INT 101
7126: PUSH
7127: LD_INT 0
7129: PUSH
7130: EMPTY
7131: LIST
7132: LIST
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 28
7138: PUSH
7139: LD_INT 97
7141: PUSH
7142: LD_INT 116
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: PUSH
7154: LD_INT 17
7156: PUSH
7157: LD_INT 96
7159: PUSH
7160: LD_INT 101
7162: PUSH
7163: LD_INT 4
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 18
7174: PUSH
7175: LD_INT 88
7177: PUSH
7178: LD_INT 97
7180: PUSH
7181: LD_INT 2
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 28
7192: PUSH
7193: LD_INT 106
7195: PUSH
7196: LD_INT 92
7198: PUSH
7199: LD_INT 2
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: LD_INT 32
7210: PUSH
7211: LD_INT 88
7213: PUSH
7214: LD_INT 89
7216: PUSH
7217: LD_INT 2
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 32
7228: PUSH
7229: LD_INT 86
7231: PUSH
7232: LD_INT 90
7234: PUSH
7235: LD_INT 2
7237: PUSH
7238: EMPTY
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: PUSH
7244: LD_INT 32
7246: PUSH
7247: LD_INT 85
7249: PUSH
7250: LD_INT 99
7252: PUSH
7253: LD_INT 2
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: PUSH
7262: LD_INT 32
7264: PUSH
7265: LD_INT 85
7267: PUSH
7268: LD_INT 107
7270: PUSH
7271: LD_INT 1
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_INT 33
7282: PUSH
7283: LD_INT 105
7285: PUSH
7286: LD_INT 99
7288: PUSH
7289: LD_INT 1
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 33
7300: PUSH
7301: LD_INT 102
7303: PUSH
7304: LD_INT 92
7306: PUSH
7307: LD_INT 3
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: PUSH
7316: LD_INT 33
7318: PUSH
7319: LD_INT 105
7321: PUSH
7322: LD_INT 92
7324: PUSH
7325: LD_INT 2
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 6
7336: PUSH
7337: LD_INT 92
7339: PUSH
7340: LD_INT 110
7342: PUSH
7343: LD_INT 0
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 6
7354: PUSH
7355: LD_INT 103
7357: PUSH
7358: LD_INT 103
7360: PUSH
7361: LD_INT 5
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: PUSH
7370: LD_INT 21
7372: PUSH
7373: LD_INT 89
7375: PUSH
7376: LD_INT 101
7378: PUSH
7379: LD_INT 1
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: PUSH
7388: LD_INT 16
7390: PUSH
7391: LD_INT 95
7393: PUSH
7394: LD_INT 104
7396: PUSH
7397: LD_INT 4
7399: PUSH
7400: EMPTY
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: PUSH
7406: LD_INT 24
7408: PUSH
7409: LD_INT 92
7411: PUSH
7412: LD_INT 105
7414: PUSH
7415: LD_INT 0
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: LIST
7422: LIST
7423: PUSH
7424: EMPTY
7425: LIST
7426: LIST
7427: LIST
7428: LIST
7429: LIST
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: LIST
7437: LIST
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
7448: LD_ADDR_VAR 0 3
7452: PUSH
7453: LD_INT 22
7455: PUSH
7456: LD_INT 3
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 3
7465: PUSH
7466: LD_INT 25
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 69
7488: PUSH
7489: FOR_IN
7490: IFFALSE 7537
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
7492: LD_VAR 0 3
7496: PPUSH
7497: LD_VAR 0 5
7501: PUSH
7502: LD_INT 2
7504: ARRAY
7505: PUSH
7506: LD_INT 2
7508: ARRAY
7509: PUSH
7510: LD_INT 2
7512: PLUS
7513: PPUSH
7514: LD_VAR 0 5
7518: PUSH
7519: LD_INT 2
7521: ARRAY
7522: PUSH
7523: LD_INT 3
7525: ARRAY
7526: PUSH
7527: LD_INT 1
7529: PLUS
7530: PPUSH
7531: CALL_OW 171
7535: GO 7489
7537: POP
7538: POP
// for i := 1 to buildingsTab do
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: DOUBLE
7545: LD_INT 1
7547: DEC
7548: ST_TO_ADDR
7549: LD_VAR 0 5
7553: PUSH
7554: FOR_TO
7555: IFFALSE 7628
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7557: LD_VAR 0 4
7561: PPUSH
7562: LD_VAR 0 5
7566: PUSH
7567: LD_VAR 0 3
7571: ARRAY
7572: PUSH
7573: LD_INT 1
7575: ARRAY
7576: PPUSH
7577: LD_VAR 0 5
7581: PUSH
7582: LD_VAR 0 3
7586: ARRAY
7587: PUSH
7588: LD_INT 2
7590: ARRAY
7591: PPUSH
7592: LD_VAR 0 5
7596: PUSH
7597: LD_VAR 0 3
7601: ARRAY
7602: PUSH
7603: LD_INT 3
7605: ARRAY
7606: PPUSH
7607: LD_VAR 0 5
7611: PUSH
7612: LD_VAR 0 3
7616: ARRAY
7617: PUSH
7618: LD_INT 4
7620: ARRAY
7621: PPUSH
7622: CALL_OW 205
7626: GO 7554
7628: POP
7629: POP
// end ; if position = 3 then
7630: LD_VAR 0 1
7634: PUSH
7635: LD_INT 3
7637: EQUAL
7638: IFFALSE 8452
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7640: LD_ADDR_VAR 0 4
7644: PUSH
7645: LD_INT 22
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 2
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PPUSH
7669: CALL_OW 69
7673: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
7674: LD_ADDR_VAR 0 5
7678: PUSH
7679: LD_INT 0
7681: PUSH
7682: LD_INT 151
7684: PUSH
7685: LD_INT 71
7687: PUSH
7688: LD_INT 4
7690: PUSH
7691: EMPTY
7692: LIST
7693: LIST
7694: LIST
7695: LIST
7696: PUSH
7697: LD_INT 4
7699: PUSH
7700: LD_INT 145
7702: PUSH
7703: LD_INT 53
7705: PUSH
7706: LD_INT 3
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: LIST
7713: LIST
7714: PUSH
7715: LD_INT 4
7717: PUSH
7718: LD_INT 172
7720: PUSH
7721: LD_INT 102
7723: PUSH
7724: LD_INT 5
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: LIST
7731: LIST
7732: PUSH
7733: LD_INT 29
7735: PUSH
7736: LD_INT 152
7738: PUSH
7739: LD_INT 85
7741: PUSH
7742: LD_INT 3
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 30
7753: PUSH
7754: LD_INT 156
7756: PUSH
7757: LD_INT 92
7759: PUSH
7760: LD_INT 3
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 28
7771: PUSH
7772: LD_INT 151
7774: PUSH
7775: LD_INT 66
7777: PUSH
7778: LD_INT 4
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: LIST
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 163
7792: PUSH
7793: LD_INT 95
7795: PUSH
7796: LD_INT 5
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 28
7807: PUSH
7808: LD_INT 149
7810: PUSH
7811: LD_INT 63
7813: PUSH
7814: LD_INT 4
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: PUSH
7823: LD_INT 17
7825: PUSH
7826: LD_INT 167
7828: PUSH
7829: LD_INT 99
7831: PUSH
7832: LD_INT 5
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: PUSH
7841: LD_INT 18
7843: PUSH
7844: LD_INT 163
7846: PUSH
7847: LD_INT 98
7849: PUSH
7850: LD_INT 0
7852: PUSH
7853: EMPTY
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 28
7861: PUSH
7862: LD_INT 154
7864: PUSH
7865: LD_INT 70
7867: PUSH
7868: LD_INT 4
7870: PUSH
7871: EMPTY
7872: LIST
7873: LIST
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 32
7879: PUSH
7880: LD_INT 155
7882: PUSH
7883: LD_INT 62
7885: PUSH
7886: LD_INT 4
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: PUSH
7895: LD_INT 32
7897: PUSH
7898: LD_INT 161
7900: PUSH
7901: LD_INT 69
7903: PUSH
7904: LD_INT 4
7906: PUSH
7907: EMPTY
7908: LIST
7909: LIST
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 32
7915: PUSH
7916: LD_INT 168
7918: PUSH
7919: LD_INT 78
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: LD_INT 32
7933: PUSH
7934: LD_INT 163
7936: PUSH
7937: LD_INT 80
7939: PUSH
7940: LD_INT 5
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 32
7951: PUSH
7952: LD_INT 136
7954: PUSH
7955: LD_INT 73
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: PUSH
7967: LD_INT 32
7969: PUSH
7970: LD_INT 157
7972: PUSH
7973: LD_INT 98
7975: PUSH
7976: LD_INT 0
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: PUSH
7985: LD_INT 32
7987: PUSH
7988: LD_INT 150
7990: PUSH
7991: LD_INT 87
7993: PUSH
7994: LD_INT 1
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: PUSH
8003: LD_INT 33
8005: PUSH
8006: LD_INT 171
8008: PUSH
8009: LD_INT 97
8011: PUSH
8012: LD_INT 4
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 33
8023: PUSH
8024: LD_INT 168
8026: PUSH
8027: LD_INT 92
8029: PUSH
8030: LD_INT 4
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: PUSH
8039: LD_INT 33
8041: PUSH
8042: LD_INT 166
8044: PUSH
8045: LD_INT 80
8047: PUSH
8048: LD_INT 5
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 33
8059: PUSH
8060: LD_INT 141
8062: PUSH
8063: LD_INT 54
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: PUSH
8075: LD_INT 33
8077: PUSH
8078: LD_INT 133
8080: PUSH
8081: LD_INT 57
8083: PUSH
8084: LD_INT 2
8086: PUSH
8087: EMPTY
8088: LIST
8089: LIST
8090: LIST
8091: LIST
8092: PUSH
8093: LD_INT 33
8095: PUSH
8096: LD_INT 132
8098: PUSH
8099: LD_INT 61
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PUSH
8111: LD_INT 33
8113: PUSH
8114: LD_INT 150
8116: PUSH
8117: LD_INT 82
8119: PUSH
8120: LD_INT 0
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 33
8131: PUSH
8132: LD_INT 132
8134: PUSH
8135: LD_INT 72
8137: PUSH
8138: LD_INT 0
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 6
8149: PUSH
8150: LD_INT 146
8152: PUSH
8153: LD_INT 64
8155: PUSH
8156: LD_INT 4
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: PUSH
8165: LD_INT 6
8167: PUSH
8168: LD_INT 159
8170: PUSH
8171: LD_INT 85
8173: PUSH
8174: LD_INT 4
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: LIST
8181: LIST
8182: PUSH
8183: LD_INT 21
8185: PUSH
8186: LD_INT 163
8188: PUSH
8189: LD_INT 91
8191: PUSH
8192: LD_INT 3
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 16
8203: PUSH
8204: LD_INT 166
8206: PUSH
8207: LD_INT 95
8209: PUSH
8210: LD_INT 4
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: PUSH
8219: LD_INT 24
8221: PUSH
8222: LD_INT 159
8224: PUSH
8225: LD_INT 95
8227: PUSH
8228: LD_INT 1
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: LIST
8249: LIST
8250: LIST
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: LIST
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8270: LD_ADDR_VAR 0 3
8274: PUSH
8275: LD_INT 22
8277: PUSH
8278: LD_INT 3
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 25
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: PPUSH
8306: CALL_OW 69
8310: PUSH
8311: FOR_IN
8312: IFFALSE 8359
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
8314: LD_VAR 0 3
8318: PPUSH
8319: LD_VAR 0 5
8323: PUSH
8324: LD_INT 2
8326: ARRAY
8327: PUSH
8328: LD_INT 2
8330: ARRAY
8331: PUSH
8332: LD_INT 2
8334: PLUS
8335: PPUSH
8336: LD_VAR 0 5
8340: PUSH
8341: LD_INT 2
8343: ARRAY
8344: PUSH
8345: LD_INT 3
8347: ARRAY
8348: PUSH
8349: LD_INT 3
8351: PLUS
8352: PPUSH
8353: CALL_OW 171
8357: GO 8311
8359: POP
8360: POP
// for i := 1 to buildingsTab do
8361: LD_ADDR_VAR 0 3
8365: PUSH
8366: DOUBLE
8367: LD_INT 1
8369: DEC
8370: ST_TO_ADDR
8371: LD_VAR 0 5
8375: PUSH
8376: FOR_TO
8377: IFFALSE 8450
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8379: LD_VAR 0 4
8383: PPUSH
8384: LD_VAR 0 5
8388: PUSH
8389: LD_VAR 0 3
8393: ARRAY
8394: PUSH
8395: LD_INT 1
8397: ARRAY
8398: PPUSH
8399: LD_VAR 0 5
8403: PUSH
8404: LD_VAR 0 3
8408: ARRAY
8409: PUSH
8410: LD_INT 2
8412: ARRAY
8413: PPUSH
8414: LD_VAR 0 5
8418: PUSH
8419: LD_VAR 0 3
8423: ARRAY
8424: PUSH
8425: LD_INT 3
8427: ARRAY
8428: PPUSH
8429: LD_VAR 0 5
8433: PUSH
8434: LD_VAR 0 3
8438: ARRAY
8439: PUSH
8440: LD_INT 4
8442: ARRAY
8443: PPUSH
8444: CALL_OW 205
8448: GO 8376
8450: POP
8451: POP
// end ; end ;
8452: LD_VAR 0 2
8456: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
8457: LD_INT 0
8459: PPUSH
8460: PPUSH
8461: PPUSH
8462: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
8463: LD_ADDR_VAR 0 3
8467: PUSH
8468: LD_INT 22
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: PUSH
8478: LD_INT 25
8480: PUSH
8481: LD_INT 2
8483: PUSH
8484: EMPTY
8485: LIST
8486: LIST
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PPUSH
8492: CALL_OW 69
8496: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
8497: LD_VAR 0 3
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: LD_INT 71
8507: PPUSH
8508: LD_INT 15
8510: PPUSH
8511: LD_INT 3
8513: PPUSH
8514: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
8518: LD_ADDR_VAR 0 4
8522: PUSH
8523: LD_INT 6
8525: PUSH
8526: LD_INT 77
8528: PUSH
8529: LD_INT 18
8531: PUSH
8532: LD_INT 3
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 4
8543: PUSH
8544: LD_INT 77
8546: PUSH
8547: LD_INT 26
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 31
8561: PUSH
8562: LD_INT 82
8564: PUSH
8565: LD_INT 28
8567: PUSH
8568: LD_INT 0
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 31
8579: PUSH
8580: LD_INT 84
8582: PUSH
8583: LD_INT 21
8585: PUSH
8586: LD_INT 3
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 31
8597: PUSH
8598: LD_INT 66
8600: PUSH
8601: LD_INT 14
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 27
8615: PUSH
8616: LD_INT 67
8618: PUSH
8619: LD_INT 18
8621: PUSH
8622: LD_INT 5
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 27
8633: PUSH
8634: LD_INT 69
8636: PUSH
8637: LD_INT 23
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: ST_TO_ADDR
// for i := 1 to buildingsTab do
8658: LD_ADDR_VAR 0 2
8662: PUSH
8663: DOUBLE
8664: LD_INT 1
8666: DEC
8667: ST_TO_ADDR
8668: LD_VAR 0 4
8672: PUSH
8673: FOR_TO
8674: IFFALSE 8747
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8676: LD_VAR 0 3
8680: PPUSH
8681: LD_VAR 0 4
8685: PUSH
8686: LD_VAR 0 2
8690: ARRAY
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: PPUSH
8696: LD_VAR 0 4
8700: PUSH
8701: LD_VAR 0 2
8705: ARRAY
8706: PUSH
8707: LD_INT 2
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 4
8715: PUSH
8716: LD_VAR 0 2
8720: ARRAY
8721: PUSH
8722: LD_INT 3
8724: ARRAY
8725: PPUSH
8726: LD_VAR 0 4
8730: PUSH
8731: LD_VAR 0 2
8735: ARRAY
8736: PUSH
8737: LD_INT 4
8739: ARRAY
8740: PPUSH
8741: CALL_OW 205
8745: GO 8673
8747: POP
8748: POP
// end ;
8749: LD_VAR 0 1
8753: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
8754: LD_INT 0
8756: PPUSH
8757: PPUSH
8758: PPUSH
8759: PPUSH
8760: PPUSH
8761: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
8762: LD_ADDR_VAR 0 7
8766: PUSH
8767: LD_INT 22
8769: PUSH
8770: LD_VAR 0 1
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 25
8781: PUSH
8782: LD_INT 9
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8798: LD_ADDR_VAR 0 8
8802: PUSH
8803: LD_INT 22
8805: PUSH
8806: LD_VAR 0 2
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: LD_INT 3
8817: PUSH
8818: LD_INT 21
8820: PUSH
8821: LD_INT 3
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 69
8840: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
8841: LD_ADDR_VAR 0 5
8845: PUSH
8846: LD_INT 1
8848: PPUSH
8849: LD_INT 3
8851: PPUSH
8852: CALL_OW 12
8856: ST_TO_ADDR
// for i = 1 to list do
8857: LD_ADDR_VAR 0 6
8861: PUSH
8862: DOUBLE
8863: LD_INT 1
8865: DEC
8866: ST_TO_ADDR
8867: LD_VAR 0 7
8871: PUSH
8872: FOR_TO
8873: IFFALSE 9055
// for ta in filter do
8875: LD_ADDR_VAR 0 4
8879: PUSH
8880: LD_VAR 0 8
8884: PUSH
8885: FOR_IN
8886: IFFALSE 9051
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
8888: LD_VAR 0 7
8892: PUSH
8893: LD_VAR 0 6
8897: ARRAY
8898: PPUSH
8899: LD_VAR 0 4
8903: PPUSH
8904: CALL_OW 296
8908: PUSH
8909: LD_INT 13
8911: LESSEQUAL
8912: IFFALSE 9049
// begin case c of 1 :
8914: LD_VAR 0 5
8918: PUSH
8919: LD_INT 1
8921: DOUBLE
8922: EQUAL
8923: IFTRUE 8927
8925: GO 8965
8927: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
8928: LD_VAR 0 7
8932: PUSH
8933: LD_VAR 0 6
8937: ARRAY
8938: PPUSH
8939: LD_VAR 0 4
8943: PPUSH
8944: CALL_OW 250
8948: PPUSH
8949: LD_VAR 0 4
8953: PPUSH
8954: CALL_OW 251
8958: PPUSH
8959: CALL_OW 154
8963: GO 9049
8965: LD_INT 2
8967: DOUBLE
8968: EQUAL
8969: IFTRUE 8973
8971: GO 9037
8973: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
8974: LD_VAR 0 7
8978: PUSH
8979: LD_VAR 0 6
8983: ARRAY
8984: PPUSH
8985: LD_VAR 0 4
8989: PPUSH
8990: CALL_OW 250
8994: PUSH
8995: LD_INT 1
8997: NEG
8998: PPUSH
8999: LD_INT 1
9001: PPUSH
9002: CALL_OW 12
9006: PLUS
9007: PPUSH
9008: LD_VAR 0 4
9012: PPUSH
9013: CALL_OW 251
9017: PUSH
9018: LD_INT 1
9020: NEG
9021: PPUSH
9022: LD_INT 1
9024: PPUSH
9025: CALL_OW 12
9029: PLUS
9030: PPUSH
9031: CALL_OW 153
9035: GO 9049
9037: LD_INT 3
9039: DOUBLE
9040: EQUAL
9041: IFTRUE 9045
9043: GO 9048
9045: POP
// ; end ;
9046: GO 9049
9048: POP
// end ; end ;
9049: GO 8885
9051: POP
9052: POP
9053: GO 8872
9055: POP
9056: POP
// end ;
9057: LD_VAR 0 3
9061: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
9062: LD_INT 0
9064: PPUSH
9065: PPUSH
9066: PPUSH
9067: PPUSH
// for i = 1 to 72 do
9068: LD_ADDR_VAR 0 5
9072: PUSH
9073: DOUBLE
9074: LD_INT 1
9076: DEC
9077: ST_TO_ADDR
9078: LD_INT 72
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9140
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
9084: LD_VAR 0 5
9088: PPUSH
9089: LD_VAR 0 1
9093: PPUSH
9094: CALL_OW 321
9098: PUSH
9099: LD_INT 1
9101: EQUAL
9102: PUSH
9103: LD_VAR 0 5
9107: PPUSH
9108: LD_VAR 0 3
9112: PPUSH
9113: CALL_OW 482
9117: PUSH
9118: LD_INT 1
9120: EQUAL
9121: AND
9122: IFFALSE 9138
// AddComResearch ( lab , i ) ;
9124: LD_VAR 0 2
9128: PPUSH
9129: LD_VAR 0 5
9133: PPUSH
9134: CALL_OW 184
9138: GO 9081
9140: POP
9141: POP
// end ;
9142: LD_VAR 0 4
9146: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
9147: LD_INT 0
9149: PPUSH
9150: PPUSH
9151: PPUSH
9152: PPUSH
9153: PPUSH
9154: PPUSH
9155: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
9156: LD_ADDR_VAR 0 6
9160: PUSH
9161: LD_INT 22
9163: PUSH
9164: LD_VAR 0 1
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 56
9175: PUSH
9176: EMPTY
9177: LIST
9178: PUSH
9179: LD_INT 24
9181: PUSH
9182: LD_INT 700
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: LD_INT 2
9191: PUSH
9192: LD_INT 25
9194: PUSH
9195: LD_INT 1
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 25
9204: PUSH
9205: LD_INT 9
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: PUSH
9212: EMPTY
9213: LIST
9214: LIST
9215: LIST
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: PPUSH
9223: CALL_OW 69
9227: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9228: LD_ADDR_VAR 0 7
9232: PUSH
9233: LD_INT 22
9235: PUSH
9236: LD_VAR 0 1
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 30
9247: PUSH
9248: LD_INT 32
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PUSH
9255: LD_INT 58
9257: PUSH
9258: EMPTY
9259: LIST
9260: PUSH
9261: LD_INT 24
9263: PUSH
9264: LD_INT 251
9266: PUSH
9267: EMPTY
9268: LIST
9269: LIST
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: PPUSH
9277: CALL_OW 69
9281: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9282: LD_ADDR_VAR 0 9
9286: PUSH
9287: LD_INT 22
9289: PUSH
9290: LD_VAR 0 1
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 2
9301: PUSH
9302: LD_INT 30
9304: PUSH
9305: LD_INT 4
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 30
9314: PUSH
9315: LD_INT 5
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: PUSH
9327: LD_INT 24
9329: PUSH
9330: LD_INT 251
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: PUSH
9337: EMPTY
9338: LIST
9339: LIST
9340: LIST
9341: PPUSH
9342: CALL_OW 69
9346: ST_TO_ADDR
// if barrackList > 0 then
9347: LD_VAR 0 9
9351: PUSH
9352: LD_INT 0
9354: GREATER
9355: IFFALSE 9444
// begin if turretList = 0 then
9357: LD_VAR 0 7
9361: PUSH
9362: LD_INT 0
9364: EQUAL
9365: IFFALSE 9404
// begin for i in soldiers_list do
9367: LD_ADDR_VAR 0 4
9371: PUSH
9372: LD_VAR 0 6
9376: PUSH
9377: FOR_IN
9378: IFFALSE 9400
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
9380: LD_VAR 0 4
9384: PPUSH
9385: LD_VAR 0 9
9389: PUSH
9390: LD_INT 1
9392: ARRAY
9393: PPUSH
9394: CALL_OW 120
9398: GO 9377
9400: POP
9401: POP
// end else
9402: GO 9444
// begin for i in barrackList do
9404: LD_ADDR_VAR 0 4
9408: PUSH
9409: LD_VAR 0 9
9413: PUSH
9414: FOR_IN
9415: IFFALSE 9442
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
9417: LD_VAR 0 4
9421: PPUSH
9422: CALL_OW 313
9426: PPUSH
9427: LD_VAR 0 7
9431: PUSH
9432: LD_INT 1
9434: ARRAY
9435: PPUSH
9436: CALL_OW 120
// end ;
9440: GO 9414
9442: POP
9443: POP
// end ; end ; end ;
9444: LD_VAR 0 3
9448: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
9449: LD_INT 0
9451: PPUSH
9452: PPUSH
9453: PPUSH
9454: PPUSH
9455: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
9456: LD_ADDR_VAR 0 6
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_VAR 0 1
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: LD_INT 2
9475: PUSH
9476: LD_INT 25
9478: PUSH
9479: LD_INT 2
9481: PUSH
9482: EMPTY
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 25
9488: PUSH
9489: LD_INT 16
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: PUSH
9496: EMPTY
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 24
9503: PUSH
9504: LD_INT 1000
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: PPUSH
9516: CALL_OW 69
9520: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9521: LD_ADDR_VAR 0 4
9525: PUSH
9526: LD_INT 22
9528: PUSH
9529: LD_VAR 0 1
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: PUSH
9538: LD_INT 21
9540: PUSH
9541: LD_INT 3
9543: PUSH
9544: EMPTY
9545: LIST
9546: LIST
9547: PUSH
9548: LD_INT 3
9550: PUSH
9551: LD_INT 24
9553: PUSH
9554: LD_INT 1000
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: PPUSH
9573: CALL_OW 69
9577: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
9578: LD_VAR 0 4
9582: PUSH
9583: LD_INT 0
9585: GREATER
9586: PUSH
9587: LD_VAR 0 6
9591: PUSH
9592: LD_INT 0
9594: GREATER
9595: AND
9596: IFFALSE 9662
// begin for i in engineerOk_list do
9598: LD_ADDR_VAR 0 5
9602: PUSH
9603: LD_VAR 0 6
9607: PUSH
9608: FOR_IN
9609: IFFALSE 9660
// begin for j in buildings_list do
9611: LD_ADDR_VAR 0 7
9615: PUSH
9616: LD_VAR 0 4
9620: PUSH
9621: FOR_IN
9622: IFFALSE 9656
// begin AddComExitBuilding ( i ) ;
9624: LD_VAR 0 5
9628: PPUSH
9629: CALL_OW 182
// wait ( 0 0$1 ) ;
9633: LD_INT 35
9635: PPUSH
9636: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
9640: LD_VAR 0 5
9644: PPUSH
9645: LD_VAR 0 7
9649: PPUSH
9650: CALL_OW 190
// end ;
9654: GO 9621
9656: POP
9657: POP
// end ;
9658: GO 9608
9660: POP
9661: POP
// end ; if buildings_list = 0 then
9662: LD_VAR 0 4
9666: PUSH
9667: LD_INT 0
9669: EQUAL
9670: IFFALSE 9703
// begin for i in engineerOK_list do
9672: LD_ADDR_VAR 0 5
9676: PUSH
9677: LD_VAR 0 6
9681: PUSH
9682: FOR_IN
9683: IFFALSE 9701
// ComEnterUnit ( i , building ) ;
9685: LD_VAR 0 5
9689: PPUSH
9690: LD_VAR 0 2
9694: PPUSH
9695: CALL_OW 120
9699: GO 9682
9701: POP
9702: POP
// end ; end ;
9703: LD_VAR 0 3
9707: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
9708: LD_INT 0
9710: PPUSH
9711: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
9712: LD_INT 22
9714: PUSH
9715: LD_VAR 0 1
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PUSH
9724: LD_INT 25
9726: PUSH
9727: LD_INT 2
9729: PUSH
9730: EMPTY
9731: LIST
9732: LIST
9733: PUSH
9734: EMPTY
9735: LIST
9736: LIST
9737: PPUSH
9738: CALL_OW 69
9742: PUSH
9743: LD_INT 0
9745: GREATER
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_VAR 0 1
9754: PUSH
9755: EMPTY
9756: LIST
9757: LIST
9758: PUSH
9759: LD_INT 21
9761: PUSH
9762: LD_INT 3
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: PUSH
9769: LD_INT 3
9771: PUSH
9772: LD_INT 24
9774: PUSH
9775: LD_INT 1000
9777: PUSH
9778: EMPTY
9779: LIST
9780: LIST
9781: PUSH
9782: EMPTY
9783: LIST
9784: LIST
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: PUSH
9796: LD_INT 0
9798: EQUAL
9799: AND
9800: PUSH
9801: LD_VAR 0 2
9805: PUSH
9806: LD_INT 0
9808: GREATER
9809: AND
9810: IFFALSE 9909
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
9812: LD_ADDR_VAR 0 4
9816: PUSH
9817: LD_INT 22
9819: PUSH
9820: LD_VAR 0 1
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: LD_INT 25
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: PPUSH
9843: CALL_OW 69
9847: PUSH
9848: FOR_IN
9849: IFFALSE 9907
// begin AddComExitBuilding ( i ) ;
9851: LD_VAR 0 4
9855: PPUSH
9856: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9860: LD_VAR 0 4
9864: PPUSH
9865: LD_VAR 0 2
9869: PUSH
9870: LD_INT 1
9872: ARRAY
9873: PPUSH
9874: LD_VAR 0 2
9878: PUSH
9879: LD_INT 2
9881: ARRAY
9882: PPUSH
9883: LD_VAR 0 2
9887: PUSH
9888: LD_INT 3
9890: ARRAY
9891: PPUSH
9892: LD_VAR 0 2
9896: PUSH
9897: LD_INT 4
9899: ARRAY
9900: PPUSH
9901: CALL_OW 205
// end ;
9905: GO 9848
9907: POP
9908: POP
// end ; end ;
9909: LD_VAR 0 3
9913: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
9914: LD_INT 0
9916: PPUSH
9917: PPUSH
9918: PPUSH
9919: PPUSH
9920: PPUSH
9921: PPUSH
9922: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9923: LD_ADDR_VAR 0 9
9927: PUSH
9928: LD_INT 22
9930: PUSH
9931: LD_VAR 0 1
9935: PUSH
9936: EMPTY
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 24
9942: PUSH
9943: LD_INT 251
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: PUSH
9950: LD_INT 2
9952: PUSH
9953: LD_INT 30
9955: PUSH
9956: LD_INT 9
9958: PUSH
9959: EMPTY
9960: LIST
9961: LIST
9962: PUSH
9963: LD_INT 30
9965: PUSH
9966: LD_INT 7
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: PUSH
9973: LD_INT 30
9975: PUSH
9976: LD_INT 8
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: LIST
9993: PPUSH
9994: CALL_OW 69
9998: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
9999: LD_ADDR_VAR 0 7
10003: PUSH
10004: LD_VAR 0 3
10008: PPUSH
10009: LD_INT 22
10011: PUSH
10012: LD_VAR 0 1
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 25
10023: PUSH
10024: LD_INT 4
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 24
10033: PUSH
10034: LD_INT 251
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: LIST
10045: PPUSH
10046: CALL_OW 70
10050: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
10051: LD_ADDR_VAR 0 10
10055: PUSH
10056: LD_VAR 0 3
10060: PPUSH
10061: LD_INT 22
10063: PUSH
10064: LD_VAR 0 1
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 21
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PUSH
10083: LD_INT 3
10085: PUSH
10086: LD_INT 24
10088: PUSH
10089: LD_INT 750
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: LIST
10104: PPUSH
10105: CALL_OW 70
10109: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
10110: LD_VAR 0 9
10114: PUSH
10115: LD_INT 0
10117: GREATER
10118: PUSH
10119: LD_VAR 0 10
10123: PUSH
10124: LD_INT 0
10126: GREATER
10127: AND
10128: IFFALSE 10162
// for i in labs do
10130: LD_ADDR_VAR 0 5
10134: PUSH
10135: LD_VAR 0 9
10139: PUSH
10140: FOR_IN
10141: IFFALSE 10160
// scientisticsInside = UnitsInside ( i ) ;
10143: LD_ADDR_VAR 0 8
10147: PUSH
10148: LD_VAR 0 5
10152: PPUSH
10153: CALL_OW 313
10157: ST_TO_ADDR
10158: GO 10140
10160: POP
10161: POP
// if labs > 0 and damageUnits > 0 then
10162: LD_VAR 0 9
10166: PUSH
10167: LD_INT 0
10169: GREATER
10170: PUSH
10171: LD_VAR 0 10
10175: PUSH
10176: LD_INT 0
10178: GREATER
10179: AND
10180: IFFALSE 10208
// for i in scientisticsInside do
10182: LD_ADDR_VAR 0 5
10186: PUSH
10187: LD_VAR 0 8
10191: PUSH
10192: FOR_IN
10193: IFFALSE 10206
// ComExitBuilding ( i ) ;
10195: LD_VAR 0 5
10199: PPUSH
10200: CALL_OW 122
10204: GO 10192
10206: POP
10207: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
10208: LD_VAR 0 10
10212: PUSH
10213: LD_INT 0
10215: GREATER
10216: PUSH
10217: LD_VAR 0 7
10221: PUSH
10222: LD_INT 0
10224: GREATER
10225: AND
10226: IFFALSE 10292
// begin ComMoveToArea ( damageUnits , healArea ) ;
10228: LD_VAR 0 10
10232: PPUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 113
// for i in scientisticsOutside do
10242: LD_ADDR_VAR 0 5
10246: PUSH
10247: LD_VAR 0 7
10251: PUSH
10252: FOR_IN
10253: IFFALSE 10288
// for j in damageUnits do
10255: LD_ADDR_VAR 0 6
10259: PUSH
10260: LD_VAR 0 10
10264: PUSH
10265: FOR_IN
10266: IFFALSE 10284
// AddComHeal ( i , j ) ;
10268: LD_VAR 0 5
10272: PPUSH
10273: LD_VAR 0 6
10277: PPUSH
10278: CALL_OW 188
10282: GO 10265
10284: POP
10285: POP
10286: GO 10252
10288: POP
10289: POP
// end else
10290: GO 10320
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
10292: LD_VAR 0 7
10296: PPUSH
10297: LD_VAR 0 9
10301: PUSH
10302: LD_INT 1
10304: PPUSH
10305: LD_VAR 0 9
10309: PPUSH
10310: CALL_OW 12
10314: ARRAY
10315: PPUSH
10316: CALL_OW 120
// end ; end ;
10320: LD_VAR 0 4
10324: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
10325: LD_INT 0
10327: PPUSH
10328: PPUSH
10329: PPUSH
10330: PPUSH
10331: PPUSH
10332: PPUSH
10333: PPUSH
10334: PPUSH
10335: PPUSH
10336: PPUSH
10337: PPUSH
// amChassisTab = [ ] ;
10338: LD_ADDR_VAR 0 19
10342: PUSH
10343: EMPTY
10344: ST_TO_ADDR
// arChassisTab = [ ] ;
10345: LD_ADDR_VAR 0 18
10349: PUSH
10350: EMPTY
10351: ST_TO_ADDR
// ruChassisTab = [ ] ;
10352: LD_ADDR_VAR 0 17
10356: PUSH
10357: EMPTY
10358: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10359: LD_INT 35
10361: PPUSH
10362: CALL_OW 67
// if nation = 1 then
10366: LD_VAR 0 5
10370: PUSH
10371: LD_INT 1
10373: EQUAL
10374: IFFALSE 10879
// begin uc_side = side ;
10376: LD_ADDR_OWVAR 20
10380: PUSH
10381: LD_VAR 0 2
10385: ST_TO_ADDR
// uc_nation = nation ;
10386: LD_ADDR_OWVAR 21
10390: PUSH
10391: LD_VAR 0 5
10395: ST_TO_ADDR
// vc_engine = vehengine ;
10396: LD_ADDR_OWVAR 39
10400: PUSH
10401: LD_VAR 0 6
10405: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
10406: LD_ADDR_OWVAR 38
10410: PUSH
10411: LD_VAR 0 7
10415: PUSH
10416: LD_INT 1
10418: PPUSH
10419: LD_VAR 0 7
10423: PPUSH
10424: CALL_OW 12
10428: ARRAY
10429: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
10430: LD_ADDR_OWVAR 40
10434: PUSH
10435: LD_VAR 0 10
10439: PUSH
10440: LD_INT 1
10442: PPUSH
10443: LD_VAR 0 10
10447: PPUSH
10448: CALL_OW 12
10452: ARRAY
10453: ST_TO_ADDR
// for j = 1 to AMWeapon do
10454: LD_ADDR_VAR 0 14
10458: PUSH
10459: DOUBLE
10460: LD_INT 1
10462: DEC
10463: ST_TO_ADDR
10464: LD_VAR 0 10
10468: PUSH
10469: FOR_TO
10470: IFFALSE 10771
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
10472: LD_VAR 0 10
10476: PUSH
10477: LD_VAR 0 14
10481: ARRAY
10482: PUSH
10483: LD_INT 2
10485: EQUAL
10486: PUSH
10487: LD_VAR 0 10
10491: PUSH
10492: LD_VAR 0 14
10496: ARRAY
10497: PUSH
10498: LD_INT 3
10500: EQUAL
10501: OR
10502: IFFALSE 10555
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
10504: LD_ADDR_VAR 0 19
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: LD_INT 2
10514: PUSH
10515: LD_INT 3
10517: PUSH
10518: LD_INT 4
10520: PUSH
10521: LD_INT 5
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10531: LD_ADDR_OWVAR 37
10535: PUSH
10536: LD_VAR 0 19
10540: PUSH
10541: LD_INT 1
10543: PPUSH
10544: LD_VAR 0 19
10548: PPUSH
10549: CALL_OW 12
10553: ARRAY
10554: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
10555: LD_VAR 0 10
10559: PUSH
10560: LD_VAR 0 14
10564: ARRAY
10565: PUSH
10566: LD_INT 4
10568: EQUAL
10569: PUSH
10570: LD_VAR 0 10
10574: PUSH
10575: LD_VAR 0 14
10579: ARRAY
10580: PUSH
10581: LD_INT 5
10583: EQUAL
10584: OR
10585: PUSH
10586: LD_VAR 0 10
10590: PUSH
10591: LD_VAR 0 14
10595: ARRAY
10596: PUSH
10597: LD_INT 9
10599: EQUAL
10600: OR
10601: PUSH
10602: LD_VAR 0 10
10606: PUSH
10607: LD_VAR 0 14
10611: ARRAY
10612: PUSH
10613: LD_INT 11
10615: EQUAL
10616: OR
10617: PUSH
10618: LD_VAR 0 10
10622: PUSH
10623: LD_VAR 0 14
10627: ARRAY
10628: PUSH
10629: LD_INT 7
10631: EQUAL
10632: OR
10633: IFFALSE 10682
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10635: LD_ADDR_VAR 0 19
10639: PUSH
10640: LD_INT 2
10642: PUSH
10643: LD_INT 3
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: LD_INT 5
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10658: LD_ADDR_OWVAR 37
10662: PUSH
10663: LD_VAR 0 19
10667: PUSH
10668: LD_INT 1
10670: PPUSH
10671: LD_VAR 0 19
10675: PPUSH
10676: CALL_OW 12
10680: ARRAY
10681: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10682: LD_VAR 0 10
10686: PUSH
10687: LD_VAR 0 14
10691: ARRAY
10692: PUSH
10693: LD_INT 8
10695: EQUAL
10696: PUSH
10697: LD_VAR 0 10
10701: PUSH
10702: LD_VAR 0 14
10706: ARRAY
10707: PUSH
10708: LD_INT 6
10710: EQUAL
10711: OR
10712: PUSH
10713: LD_VAR 0 10
10717: PUSH
10718: LD_VAR 0 14
10722: ARRAY
10723: PUSH
10724: LD_INT 10
10726: EQUAL
10727: OR
10728: IFFALSE 10769
// begin amChassisTab = [ 4 , 5 ] ;
10730: LD_ADDR_VAR 0 19
10734: PUSH
10735: LD_INT 4
10737: PUSH
10738: LD_INT 5
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10745: LD_ADDR_OWVAR 37
10749: PUSH
10750: LD_VAR 0 19
10754: PUSH
10755: LD_INT 1
10757: PPUSH
10758: LD_VAR 0 19
10762: PPUSH
10763: CALL_OW 12
10767: ARRAY
10768: ST_TO_ADDR
// end ; end ;
10769: GO 10469
10771: POP
10772: POP
// veh = CreateVehicle ;
10773: LD_ADDR_VAR 0 16
10777: PUSH
10778: CALL_OW 45
10782: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10783: LD_VAR 0 16
10787: PPUSH
10788: LD_VAR 0 1
10792: PPUSH
10793: LD_INT 0
10795: PPUSH
10796: CALL_OW 49
// if vc_control = 1 then
10800: LD_OWVAR 38
10804: PUSH
10805: LD_INT 1
10807: EQUAL
10808: IFFALSE 10865
// begin hc_gallery =  ;
10810: LD_ADDR_OWVAR 33
10814: PUSH
10815: LD_STRING 
10817: ST_TO_ADDR
// hc_name =  ;
10818: LD_ADDR_OWVAR 26
10822: PUSH
10823: LD_STRING 
10825: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10826: LD_INT 0
10828: PPUSH
10829: LD_INT 3
10831: PPUSH
10832: LD_VAR 0 4
10836: PPUSH
10837: CALL_OW 380
// un = CreateHuman ;
10841: LD_ADDR_VAR 0 15
10845: PUSH
10846: CALL_OW 44
10850: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10851: LD_VAR 0 15
10855: PPUSH
10856: LD_VAR 0 16
10860: PPUSH
10861: CALL_OW 52
// end ; i = i + 1 ;
10865: LD_ADDR_VAR 0 13
10869: PUSH
10870: LD_VAR 0 13
10874: PUSH
10875: LD_INT 1
10877: PLUS
10878: ST_TO_ADDR
// end ; if nation = 2 then
10879: LD_VAR 0 5
10883: PUSH
10884: LD_INT 2
10886: EQUAL
10887: IFFALSE 11325
// begin uc_side = side ;
10889: LD_ADDR_OWVAR 20
10893: PUSH
10894: LD_VAR 0 2
10898: ST_TO_ADDR
// uc_nation = nation ;
10899: LD_ADDR_OWVAR 21
10903: PUSH
10904: LD_VAR 0 5
10908: ST_TO_ADDR
// vc_engine = vehengine ;
10909: LD_ADDR_OWVAR 39
10913: PUSH
10914: LD_VAR 0 6
10918: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
10919: LD_ADDR_OWVAR 38
10923: PUSH
10924: LD_VAR 0 7
10928: PUSH
10929: LD_INT 1
10931: PPUSH
10932: LD_VAR 0 7
10936: PPUSH
10937: CALL_OW 12
10941: ARRAY
10942: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10943: LD_ADDR_OWVAR 40
10947: PUSH
10948: LD_VAR 0 9
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_VAR 0 9
10960: PPUSH
10961: CALL_OW 12
10965: ARRAY
10966: ST_TO_ADDR
// for j = 1 to ARWeapons do
10967: LD_ADDR_VAR 0 14
10971: PUSH
10972: DOUBLE
10973: LD_INT 1
10975: DEC
10976: ST_TO_ADDR
10977: LD_VAR 0 9
10981: PUSH
10982: FOR_TO
10983: IFFALSE 11217
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10985: LD_VAR 0 9
10989: PUSH
10990: LD_VAR 0 14
10994: ARRAY
10995: PUSH
10996: LD_INT 24
10998: EQUAL
10999: PUSH
11000: LD_VAR 0 9
11004: PUSH
11005: LD_VAR 0 14
11009: ARRAY
11010: PUSH
11011: LD_INT 22
11013: EQUAL
11014: OR
11015: PUSH
11016: LD_VAR 0 9
11020: PUSH
11021: LD_VAR 0 14
11025: ARRAY
11026: PUSH
11027: LD_INT 23
11029: EQUAL
11030: OR
11031: PUSH
11032: LD_VAR 0 9
11036: PUSH
11037: LD_VAR 0 14
11041: ARRAY
11042: PUSH
11043: LD_INT 30
11045: EQUAL
11046: OR
11047: IFFALSE 11096
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
11049: LD_ADDR_VAR 0 18
11053: PUSH
11054: LD_INT 11
11056: PUSH
11057: LD_INT 12
11059: PUSH
11060: LD_INT 13
11062: PUSH
11063: LD_INT 14
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
11072: LD_ADDR_OWVAR 37
11076: PUSH
11077: LD_VAR 0 18
11081: PUSH
11082: LD_INT 1
11084: PPUSH
11085: LD_VAR 0 18
11089: PPUSH
11090: CALL_OW 12
11094: ARRAY
11095: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
11096: LD_VAR 0 9
11100: PUSH
11101: LD_VAR 0 14
11105: ARRAY
11106: PUSH
11107: LD_INT 29
11109: EQUAL
11110: PUSH
11111: LD_VAR 0 9
11115: PUSH
11116: LD_VAR 0 14
11120: ARRAY
11121: PUSH
11122: LD_INT 28
11124: EQUAL
11125: OR
11126: PUSH
11127: LD_VAR 0 9
11131: PUSH
11132: LD_VAR 0 14
11136: ARRAY
11137: PUSH
11138: LD_INT 27
11140: EQUAL
11141: OR
11142: PUSH
11143: LD_VAR 0 9
11147: PUSH
11148: LD_VAR 0 14
11152: ARRAY
11153: PUSH
11154: LD_INT 26
11156: EQUAL
11157: OR
11158: PUSH
11159: LD_VAR 0 9
11163: PUSH
11164: LD_VAR 0 14
11168: ARRAY
11169: PUSH
11170: LD_INT 25
11172: EQUAL
11173: OR
11174: IFFALSE 11215
// begin arChassisTab = [ 13 , 14 ] ;
11176: LD_ADDR_VAR 0 18
11180: PUSH
11181: LD_INT 13
11183: PUSH
11184: LD_INT 14
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
11191: LD_ADDR_OWVAR 37
11195: PUSH
11196: LD_VAR 0 18
11200: PUSH
11201: LD_INT 1
11203: PPUSH
11204: LD_VAR 0 18
11208: PPUSH
11209: CALL_OW 12
11213: ARRAY
11214: ST_TO_ADDR
// end ; end ;
11215: GO 10982
11217: POP
11218: POP
// veh = CreateVehicle ;
11219: LD_ADDR_VAR 0 16
11223: PUSH
11224: CALL_OW 45
11228: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11229: LD_VAR 0 16
11233: PPUSH
11234: LD_VAR 0 1
11238: PPUSH
11239: LD_INT 0
11241: PPUSH
11242: CALL_OW 49
// if vc_control = 1 then
11246: LD_OWVAR 38
11250: PUSH
11251: LD_INT 1
11253: EQUAL
11254: IFFALSE 11311
// begin hc_gallery =  ;
11256: LD_ADDR_OWVAR 33
11260: PUSH
11261: LD_STRING 
11263: ST_TO_ADDR
// hc_name =  ;
11264: LD_ADDR_OWVAR 26
11268: PUSH
11269: LD_STRING 
11271: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11272: LD_INT 0
11274: PPUSH
11275: LD_INT 3
11277: PPUSH
11278: LD_VAR 0 4
11282: PPUSH
11283: CALL_OW 380
// un = CreateHuman ;
11287: LD_ADDR_VAR 0 15
11291: PUSH
11292: CALL_OW 44
11296: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11297: LD_VAR 0 15
11301: PPUSH
11302: LD_VAR 0 16
11306: PPUSH
11307: CALL_OW 52
// end ; i = i + 1 ;
11311: LD_ADDR_VAR 0 13
11315: PUSH
11316: LD_VAR 0 13
11320: PUSH
11321: LD_INT 1
11323: PLUS
11324: ST_TO_ADDR
// end ; if nation = 3 then
11325: LD_VAR 0 5
11329: PUSH
11330: LD_INT 3
11332: EQUAL
11333: IFFALSE 11739
// begin uc_side = side ;
11335: LD_ADDR_OWVAR 20
11339: PUSH
11340: LD_VAR 0 2
11344: ST_TO_ADDR
// uc_nation = nation ;
11345: LD_ADDR_OWVAR 21
11349: PUSH
11350: LD_VAR 0 5
11354: ST_TO_ADDR
// vc_engine = vehengine ;
11355: LD_ADDR_OWVAR 39
11359: PUSH
11360: LD_VAR 0 6
11364: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
11365: LD_ADDR_OWVAR 38
11369: PUSH
11370: LD_VAR 0 7
11374: PUSH
11375: LD_INT 1
11377: PPUSH
11378: LD_VAR 0 7
11382: PPUSH
11383: CALL_OW 12
11387: ARRAY
11388: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
11389: LD_ADDR_OWVAR 40
11393: PUSH
11394: LD_VAR 0 8
11398: PUSH
11399: LD_INT 1
11401: PPUSH
11402: LD_VAR 0 8
11406: PPUSH
11407: CALL_OW 12
11411: ARRAY
11412: ST_TO_ADDR
// for j = 1 to RuWeapons do
11413: LD_ADDR_VAR 0 14
11417: PUSH
11418: DOUBLE
11419: LD_INT 1
11421: DEC
11422: ST_TO_ADDR
11423: LD_VAR 0 8
11427: PUSH
11428: FOR_TO
11429: IFFALSE 11631
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
11431: LD_VAR 0 8
11435: PUSH
11436: LD_VAR 0 14
11440: ARRAY
11441: PUSH
11442: LD_INT 42
11444: EQUAL
11445: PUSH
11446: LD_VAR 0 8
11450: PUSH
11451: LD_VAR 0 14
11455: ARRAY
11456: PUSH
11457: LD_INT 43
11459: EQUAL
11460: OR
11461: PUSH
11462: LD_VAR 0 8
11466: PUSH
11467: LD_VAR 0 14
11471: ARRAY
11472: PUSH
11473: LD_INT 44
11475: EQUAL
11476: OR
11477: PUSH
11478: LD_VAR 0 8
11482: PUSH
11483: LD_VAR 0 14
11487: ARRAY
11488: PUSH
11489: LD_INT 45
11491: EQUAL
11492: OR
11493: PUSH
11494: LD_VAR 0 8
11498: PUSH
11499: LD_VAR 0 14
11503: ARRAY
11504: PUSH
11505: LD_INT 49
11507: EQUAL
11508: OR
11509: IFFALSE 11558
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
11511: LD_ADDR_VAR 0 17
11515: PUSH
11516: LD_INT 21
11518: PUSH
11519: LD_INT 22
11521: PUSH
11522: LD_INT 23
11524: PUSH
11525: LD_INT 24
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
11534: LD_ADDR_OWVAR 37
11538: PUSH
11539: LD_VAR 0 17
11543: PUSH
11544: LD_INT 1
11546: PPUSH
11547: LD_VAR 0 17
11551: PPUSH
11552: CALL_OW 12
11556: ARRAY
11557: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
11558: LD_VAR 0 8
11562: PUSH
11563: LD_VAR 0 14
11567: ARRAY
11568: PUSH
11569: LD_INT 46
11571: EQUAL
11572: PUSH
11573: LD_VAR 0 8
11577: PUSH
11578: LD_VAR 0 14
11582: ARRAY
11583: PUSH
11584: LD_INT 47
11586: EQUAL
11587: OR
11588: IFFALSE 11629
// begin ruChassisTab = [ 23 , 24 ] ;
11590: LD_ADDR_VAR 0 17
11594: PUSH
11595: LD_INT 23
11597: PUSH
11598: LD_INT 24
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
11605: LD_ADDR_OWVAR 37
11609: PUSH
11610: LD_VAR 0 17
11614: PUSH
11615: LD_INT 1
11617: PPUSH
11618: LD_VAR 0 17
11622: PPUSH
11623: CALL_OW 12
11627: ARRAY
11628: ST_TO_ADDR
// end ; end ;
11629: GO 11428
11631: POP
11632: POP
// veh = CreateVehicle ;
11633: LD_ADDR_VAR 0 16
11637: PUSH
11638: CALL_OW 45
11642: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11643: LD_VAR 0 16
11647: PPUSH
11648: LD_VAR 0 1
11652: PPUSH
11653: LD_INT 0
11655: PPUSH
11656: CALL_OW 49
// if vc_control = 1 then
11660: LD_OWVAR 38
11664: PUSH
11665: LD_INT 1
11667: EQUAL
11668: IFFALSE 11725
// begin hc_gallery =  ;
11670: LD_ADDR_OWVAR 33
11674: PUSH
11675: LD_STRING 
11677: ST_TO_ADDR
// hc_name =  ;
11678: LD_ADDR_OWVAR 26
11682: PUSH
11683: LD_STRING 
11685: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11686: LD_INT 0
11688: PPUSH
11689: LD_INT 3
11691: PPUSH
11692: LD_VAR 0 4
11696: PPUSH
11697: CALL_OW 380
// un = CreateHuman ;
11701: LD_ADDR_VAR 0 15
11705: PUSH
11706: CALL_OW 44
11710: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11711: LD_VAR 0 15
11715: PPUSH
11716: LD_VAR 0 16
11720: PPUSH
11721: CALL_OW 52
// end ; i = i + 1 ;
11725: LD_ADDR_VAR 0 13
11729: PUSH
11730: LD_VAR 0 13
11734: PUSH
11735: LD_INT 1
11737: PLUS
11738: ST_TO_ADDR
// end ; until i = vehCount ;
11739: LD_VAR 0 13
11743: PUSH
11744: LD_VAR 0 3
11748: EQUAL
11749: IFFALSE 10359
// repeat wait ( 0 0$1 ) ;
11751: LD_INT 35
11753: PPUSH
11754: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
11758: LD_ADDR_VAR 0 20
11762: PUSH
11763: LD_INT 22
11765: PUSH
11766: LD_VAR 0 2
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: PUSH
11775: LD_INT 21
11777: PUSH
11778: LD_INT 2
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 24
11787: PUSH
11788: LD_INT 650
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: PPUSH
11800: CALL_OW 69
11804: ST_TO_ADDR
// if vehicleOK_list > 0 then
11805: LD_VAR 0 20
11809: PUSH
11810: LD_INT 0
11812: GREATER
11813: IFFALSE 12004
// begin for i in vehicleOK_list do
11815: LD_ADDR_VAR 0 13
11819: PUSH
11820: LD_VAR 0 20
11824: PUSH
11825: FOR_IN
11826: IFFALSE 12002
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11828: LD_ADDR_VAR 0 21
11832: PUSH
11833: LD_INT 22
11835: PUSH
11836: LD_VAR 0 11
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: PPUSH
11845: CALL_OW 69
11849: PPUSH
11850: LD_VAR 0 13
11854: PPUSH
11855: CALL_OW 74
11859: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11860: LD_ADDR_VAR 0 22
11864: PUSH
11865: LD_INT 22
11867: PUSH
11868: LD_VAR 0 11
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 2
11879: PUSH
11880: LD_INT 59
11882: PUSH
11883: EMPTY
11884: LIST
11885: PUSH
11886: LD_INT 21
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 21
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: PPUSH
11924: LD_VAR 0 13
11928: PPUSH
11929: CALL_OW 74
11933: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11934: LD_VAR 0 13
11938: PPUSH
11939: LD_VAR 0 21
11943: PPUSH
11944: CALL_OW 296
11948: PUSH
11949: LD_INT 8
11951: PLUS
11952: PUSH
11953: LD_VAR 0 13
11957: PPUSH
11958: LD_VAR 0 22
11962: PPUSH
11963: CALL_OW 296
11967: LESS
11968: IFFALSE 11986
// begin ComAttackUnit ( i , target1 ) ;
11970: LD_VAR 0 13
11974: PPUSH
11975: LD_VAR 0 21
11979: PPUSH
11980: CALL_OW 115
// end else
11984: GO 12000
// begin ComAttackUnit ( i , target2 ) ;
11986: LD_VAR 0 13
11990: PPUSH
11991: LD_VAR 0 22
11995: PPUSH
11996: CALL_OW 115
// end ; end ;
12000: GO 11825
12002: POP
12003: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
12004: LD_INT 22
12006: PUSH
12007: LD_VAR 0 2
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 21
12018: PUSH
12019: LD_INT 2
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 69
12034: PUSH
12035: LD_INT 0
12037: EQUAL
12038: IFFALSE 11751
// end ;
12040: LD_VAR 0 12
12044: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
12045: LD_INT 0
12047: PPUSH
12048: PPUSH
12049: PPUSH
12050: PPUSH
12051: PPUSH
12052: PPUSH
12053: PPUSH
12054: PPUSH
12055: PPUSH
12056: PPUSH
12057: PPUSH
// for i = 1 to medicCount do
12058: LD_ADDR_VAR 0 13
12062: PUSH
12063: DOUBLE
12064: LD_INT 1
12066: DEC
12067: ST_TO_ADDR
12068: LD_VAR 0 7
12072: PUSH
12073: FOR_TO
12074: IFFALSE 12156
// begin uc_side = side ;
12076: LD_ADDR_OWVAR 20
12080: PUSH
12081: LD_VAR 0 1
12085: ST_TO_ADDR
// uc_nation = nation ;
12086: LD_ADDR_OWVAR 21
12090: PUSH
12091: LD_VAR 0 2
12095: ST_TO_ADDR
// hc_name =  ;
12096: LD_ADDR_OWVAR 26
12100: PUSH
12101: LD_STRING 
12103: ST_TO_ADDR
// hc_gallery =  ;
12104: LD_ADDR_OWVAR 33
12108: PUSH
12109: LD_STRING 
12111: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
12112: LD_INT 0
12114: PPUSH
12115: LD_INT 4
12117: PPUSH
12118: LD_VAR 0 8
12122: PPUSH
12123: CALL_OW 380
// un = CreateHuman ;
12127: LD_ADDR_VAR 0 15
12131: PUSH
12132: CALL_OW 44
12136: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12137: LD_VAR 0 15
12141: PPUSH
12142: LD_VAR 0 9
12146: PPUSH
12147: LD_INT 0
12149: PPUSH
12150: CALL_OW 49
// end ;
12154: GO 12073
12156: POP
12157: POP
// for i = 1 to soldierCount do
12158: LD_ADDR_VAR 0 13
12162: PUSH
12163: DOUBLE
12164: LD_INT 1
12166: DEC
12167: ST_TO_ADDR
12168: LD_VAR 0 3
12172: PUSH
12173: FOR_TO
12174: IFFALSE 12256
// begin uc_side = side ;
12176: LD_ADDR_OWVAR 20
12180: PUSH
12181: LD_VAR 0 1
12185: ST_TO_ADDR
// uc_nation = nation ;
12186: LD_ADDR_OWVAR 21
12190: PUSH
12191: LD_VAR 0 2
12195: ST_TO_ADDR
// hc_name =  ;
12196: LD_ADDR_OWVAR 26
12200: PUSH
12201: LD_STRING 
12203: ST_TO_ADDR
// hc_gallery =  ;
12204: LD_ADDR_OWVAR 33
12208: PUSH
12209: LD_STRING 
12211: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12212: LD_INT 0
12214: PPUSH
12215: LD_INT 1
12217: PPUSH
12218: LD_VAR 0 8
12222: PPUSH
12223: CALL_OW 380
// un = CreateHuman ;
12227: LD_ADDR_VAR 0 15
12231: PUSH
12232: CALL_OW 44
12236: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12237: LD_VAR 0 15
12241: PPUSH
12242: LD_VAR 0 9
12246: PPUSH
12247: LD_INT 0
12249: PPUSH
12250: CALL_OW 49
// end ;
12254: GO 12173
12256: POP
12257: POP
// for i = 1 to sniperCount do
12258: LD_ADDR_VAR 0 13
12262: PUSH
12263: DOUBLE
12264: LD_INT 1
12266: DEC
12267: ST_TO_ADDR
12268: LD_VAR 0 4
12272: PUSH
12273: FOR_TO
12274: IFFALSE 12356
// begin uc_side = side ;
12276: LD_ADDR_OWVAR 20
12280: PUSH
12281: LD_VAR 0 1
12285: ST_TO_ADDR
// uc_nation = nation ;
12286: LD_ADDR_OWVAR 21
12290: PUSH
12291: LD_VAR 0 2
12295: ST_TO_ADDR
// hc_name =  ;
12296: LD_ADDR_OWVAR 26
12300: PUSH
12301: LD_STRING 
12303: ST_TO_ADDR
// hc_gallery =  ;
12304: LD_ADDR_OWVAR 33
12308: PUSH
12309: LD_STRING 
12311: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12312: LD_INT 0
12314: PPUSH
12315: LD_INT 5
12317: PPUSH
12318: LD_VAR 0 8
12322: PPUSH
12323: CALL_OW 380
// un = CreateHuman ;
12327: LD_ADDR_VAR 0 15
12331: PUSH
12332: CALL_OW 44
12336: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12337: LD_VAR 0 15
12341: PPUSH
12342: LD_VAR 0 9
12346: PPUSH
12347: LD_INT 0
12349: PPUSH
12350: CALL_OW 49
// end ;
12354: GO 12273
12356: POP
12357: POP
// for i = 1 to bazookCount do
12358: LD_ADDR_VAR 0 13
12362: PUSH
12363: DOUBLE
12364: LD_INT 1
12366: DEC
12367: ST_TO_ADDR
12368: LD_VAR 0 5
12372: PUSH
12373: FOR_TO
12374: IFFALSE 12456
// begin uc_side = side ;
12376: LD_ADDR_OWVAR 20
12380: PUSH
12381: LD_VAR 0 1
12385: ST_TO_ADDR
// uc_nation = nation ;
12386: LD_ADDR_OWVAR 21
12390: PUSH
12391: LD_VAR 0 2
12395: ST_TO_ADDR
// hc_name =  ;
12396: LD_ADDR_OWVAR 26
12400: PUSH
12401: LD_STRING 
12403: ST_TO_ADDR
// hc_gallery =  ;
12404: LD_ADDR_OWVAR 33
12408: PUSH
12409: LD_STRING 
12411: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12412: LD_INT 0
12414: PPUSH
12415: LD_INT 9
12417: PPUSH
12418: LD_VAR 0 8
12422: PPUSH
12423: CALL_OW 380
// un = CreateHuman ;
12427: LD_ADDR_VAR 0 15
12431: PUSH
12432: CALL_OW 44
12436: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12437: LD_VAR 0 15
12441: PPUSH
12442: LD_VAR 0 9
12446: PPUSH
12447: LD_INT 0
12449: PPUSH
12450: CALL_OW 49
// end ;
12454: GO 12373
12456: POP
12457: POP
// for i = 1 to mortalCount do
12458: LD_ADDR_VAR 0 13
12462: PUSH
12463: DOUBLE
12464: LD_INT 1
12466: DEC
12467: ST_TO_ADDR
12468: LD_VAR 0 6
12472: PUSH
12473: FOR_TO
12474: IFFALSE 12556
// begin uc_side = side ;
12476: LD_ADDR_OWVAR 20
12480: PUSH
12481: LD_VAR 0 1
12485: ST_TO_ADDR
// uc_nation = nation ;
12486: LD_ADDR_OWVAR 21
12490: PUSH
12491: LD_VAR 0 2
12495: ST_TO_ADDR
// hc_name =  ;
12496: LD_ADDR_OWVAR 26
12500: PUSH
12501: LD_STRING 
12503: ST_TO_ADDR
// hc_gallery =  ;
12504: LD_ADDR_OWVAR 33
12508: PUSH
12509: LD_STRING 
12511: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12512: LD_INT 0
12514: PPUSH
12515: LD_INT 8
12517: PPUSH
12518: LD_VAR 0 8
12522: PPUSH
12523: CALL_OW 380
// un = CreateHuman ;
12527: LD_ADDR_VAR 0 15
12531: PUSH
12532: CALL_OW 44
12536: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12537: LD_VAR 0 15
12541: PPUSH
12542: LD_VAR 0 9
12546: PPUSH
12547: LD_INT 0
12549: PPUSH
12550: CALL_OW 49
// end ;
12554: GO 12473
12556: POP
12557: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12558: LD_ADDR_VAR 0 18
12562: PUSH
12563: LD_INT 22
12565: PUSH
12566: LD_VAR 0 1
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 25
12580: PUSH
12581: LD_INT 1
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 25
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 8
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: LD_INT 25
12610: PUSH
12611: LD_INT 9
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PPUSH
12629: CALL_OW 69
12633: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12634: LD_ADDR_VAR 0 17
12638: PUSH
12639: LD_INT 22
12641: PUSH
12642: LD_VAR 0 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 25
12653: PUSH
12654: LD_INT 4
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: PPUSH
12665: CALL_OW 69
12669: ST_TO_ADDR
// for i in medic_list do
12670: LD_ADDR_VAR 0 13
12674: PUSH
12675: LD_VAR 0 17
12679: PUSH
12680: FOR_IN
12681: IFFALSE 12699
// ComMoveToArea ( i , healArea ) ;
12683: LD_VAR 0 13
12687: PPUSH
12688: LD_VAR 0 10
12692: PPUSH
12693: CALL_OW 113
12697: GO 12680
12699: POP
12700: POP
// repeat wait ( 0 0$1 ) ;
12701: LD_INT 35
12703: PPUSH
12704: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12708: LD_ADDR_VAR 0 16
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_VAR 0 1
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: LD_INT 3
12730: PUSH
12731: LD_INT 24
12733: PUSH
12734: LD_INT 550
12736: PUSH
12737: EMPTY
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: PUSH
12745: LD_INT 24
12747: PUSH
12748: LD_INT 250
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: LIST
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: PPUSH
12764: CALL_OW 69
12768: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12769: LD_ADDR_VAR 0 18
12773: PUSH
12774: LD_INT 22
12776: PUSH
12777: LD_VAR 0 1
12781: PUSH
12782: EMPTY
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 2
12788: PUSH
12789: LD_INT 25
12791: PUSH
12792: LD_INT 1
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: LD_INT 25
12801: PUSH
12802: LD_INT 5
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 25
12811: PUSH
12812: LD_INT 8
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 25
12821: PUSH
12822: LD_INT 9
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 24
12838: PUSH
12839: LD_INT 1000
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: LIST
12850: PPUSH
12851: CALL_OW 69
12855: ST_TO_ADDR
// if medicCount > 0 then
12856: LD_VAR 0 7
12860: PUSH
12861: LD_INT 0
12863: GREATER
12864: IFFALSE 12938
// begin if damageUnit_list > 0 then
12866: LD_VAR 0 16
12870: PUSH
12871: LD_INT 0
12873: GREATER
12874: IFFALSE 12938
// begin for i in damageUnit_list do
12876: LD_ADDR_VAR 0 13
12880: PUSH
12881: LD_VAR 0 16
12885: PUSH
12886: FOR_IN
12887: IFFALSE 12936
// begin ComMoveToArea ( i , healArea ) ;
12889: LD_VAR 0 13
12893: PPUSH
12894: LD_VAR 0 10
12898: PPUSH
12899: CALL_OW 113
// for j in medic_list do
12903: LD_ADDR_VAR 0 14
12907: PUSH
12908: LD_VAR 0 17
12912: PUSH
12913: FOR_IN
12914: IFFALSE 12932
// AddComHeal ( j , i ) ;
12916: LD_VAR 0 14
12920: PPUSH
12921: LD_VAR 0 13
12925: PPUSH
12926: CALL_OW 188
12930: GO 12913
12932: POP
12933: POP
// end ;
12934: GO 12886
12936: POP
12937: POP
// end ; end ; for i in soldiersOK_list do
12938: LD_ADDR_VAR 0 13
12942: PUSH
12943: LD_VAR 0 18
12947: PUSH
12948: FOR_IN
12949: IFFALSE 13125
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12951: LD_ADDR_VAR 0 21
12955: PUSH
12956: LD_INT 22
12958: PUSH
12959: LD_VAR 0 11
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: PPUSH
12968: CALL_OW 69
12972: PPUSH
12973: LD_VAR 0 13
12977: PPUSH
12978: CALL_OW 74
12982: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12983: LD_ADDR_VAR 0 22
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_VAR 0 11
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 2
13002: PUSH
13003: LD_INT 59
13005: PUSH
13006: EMPTY
13007: LIST
13008: PUSH
13009: LD_INT 21
13011: PUSH
13012: LD_INT 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 21
13021: PUSH
13022: LD_INT 2
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: PUSH
13035: EMPTY
13036: LIST
13037: LIST
13038: PUSH
13039: EMPTY
13040: LIST
13041: PPUSH
13042: CALL_OW 69
13046: PPUSH
13047: LD_VAR 0 13
13051: PPUSH
13052: CALL_OW 74
13056: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13057: LD_VAR 0 13
13061: PPUSH
13062: LD_VAR 0 21
13066: PPUSH
13067: CALL_OW 296
13071: PUSH
13072: LD_INT 8
13074: PLUS
13075: PUSH
13076: LD_VAR 0 13
13080: PPUSH
13081: LD_VAR 0 22
13085: PPUSH
13086: CALL_OW 296
13090: LESS
13091: IFFALSE 13109
// begin ComAttackUnit ( i , target1 ) ;
13093: LD_VAR 0 13
13097: PPUSH
13098: LD_VAR 0 21
13102: PPUSH
13103: CALL_OW 115
// end else
13107: GO 13123
// begin ComAttackUnit ( i , target2 ) ;
13109: LD_VAR 0 13
13113: PPUSH
13114: LD_VAR 0 22
13118: PPUSH
13119: CALL_OW 115
// end ; end ;
13123: GO 12948
13125: POP
13126: POP
// for i in soldiersOK_list do
13127: LD_ADDR_VAR 0 13
13131: PUSH
13132: LD_VAR 0 18
13136: PUSH
13137: FOR_IN
13138: IFFALSE 13314
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13140: LD_ADDR_VAR 0 21
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: LD_VAR 0 11
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PPUSH
13157: CALL_OW 69
13161: PPUSH
13162: LD_VAR 0 13
13166: PPUSH
13167: CALL_OW 74
13171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13172: LD_ADDR_VAR 0 22
13176: PUSH
13177: LD_INT 22
13179: PUSH
13180: LD_VAR 0 11
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 2
13191: PUSH
13192: LD_INT 59
13194: PUSH
13195: EMPTY
13196: LIST
13197: PUSH
13198: LD_INT 21
13200: PUSH
13201: LD_INT 1
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 21
13210: PUSH
13211: LD_INT 2
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: PUSH
13228: EMPTY
13229: LIST
13230: PPUSH
13231: CALL_OW 69
13235: PPUSH
13236: LD_VAR 0 13
13240: PPUSH
13241: CALL_OW 74
13245: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13246: LD_VAR 0 13
13250: PPUSH
13251: LD_VAR 0 21
13255: PPUSH
13256: CALL_OW 296
13260: PUSH
13261: LD_INT 8
13263: PLUS
13264: PUSH
13265: LD_VAR 0 13
13269: PPUSH
13270: LD_VAR 0 22
13274: PPUSH
13275: CALL_OW 296
13279: LESS
13280: IFFALSE 13298
// begin ComAttackUnit ( i , target1 ) ;
13282: LD_VAR 0 13
13286: PPUSH
13287: LD_VAR 0 21
13291: PPUSH
13292: CALL_OW 115
// end else
13296: GO 13312
// begin ComAttackUnit ( i , target2 ) ;
13298: LD_VAR 0 13
13302: PPUSH
13303: LD_VAR 0 22
13307: PPUSH
13308: CALL_OW 115
// end ; end ;
13312: GO 13137
13314: POP
13315: POP
// until soldiersOK_list = [ ] ;
13316: LD_VAR 0 18
13320: PUSH
13321: EMPTY
13322: EQUAL
13323: IFFALSE 12701
// end ;
13325: LD_VAR 0 12
13329: RET
// export function TameApemans ; var i , j ; begin
13330: LD_INT 0
13332: PPUSH
13333: PPUSH
13334: PPUSH
// repeat wait ( 0 0$1 ) ;
13335: LD_INT 35
13337: PPUSH
13338: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
13342: LD_ADDR_VAR 0 2
13346: PUSH
13347: LD_INT 22
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 25
13359: PUSH
13360: LD_INT 4
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PPUSH
13371: CALL_OW 69
13375: PUSH
13376: FOR_IN
13377: IFFALSE 13454
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
13379: LD_ADDR_VAR 0 3
13383: PUSH
13384: LD_INT 5
13386: PPUSH
13387: LD_INT 22
13389: PUSH
13390: LD_INT 0
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PUSH
13397: LD_INT 25
13399: PUSH
13400: LD_INT 12
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PPUSH
13411: CALL_OW 70
13415: PUSH
13416: FOR_IN
13417: IFFALSE 13450
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
13419: LD_VAR 0 2
13423: PPUSH
13424: LD_VAR 0 3
13428: PPUSH
13429: CALL_OW 250
13433: PPUSH
13434: LD_VAR 0 3
13438: PPUSH
13439: CALL_OW 251
13443: PPUSH
13444: CALL_OW 191
// end ;
13448: GO 13416
13450: POP
13451: POP
// end ;
13452: GO 13376
13454: POP
13455: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
13456: LD_INT 22
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 25
13468: PUSH
13469: LD_INT 4
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_INT 0
13487: EQUAL
13488: PUSH
13489: LD_INT 5
13491: PPUSH
13492: LD_INT 22
13494: PUSH
13495: LD_INT 0
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 25
13504: PUSH
13505: LD_INT 12
13507: PUSH
13508: EMPTY
13509: LIST
13510: LIST
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PPUSH
13516: CALL_OW 70
13520: PUSH
13521: LD_INT 0
13523: EQUAL
13524: OR
13525: IFFALSE 13335
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
13527: LD_ADDR_VAR 0 2
13531: PUSH
13532: LD_INT 22
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: PUSH
13542: LD_INT 25
13544: PUSH
13545: LD_INT 12
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: PPUSH
13556: CALL_OW 69
13560: PUSH
13561: FOR_IN
13562: IFFALSE 13597
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
13564: LD_VAR 0 2
13568: PPUSH
13569: LD_INT 16
13571: PUSH
13572: LD_INT 15
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 1
13581: PPUSH
13582: LD_INT 2
13584: PPUSH
13585: CALL_OW 12
13589: ARRAY
13590: PPUSH
13591: CALL_OW 336
13595: GO 13561
13597: POP
13598: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
13599: LD_ADDR_VAR 0 2
13603: PUSH
13604: LD_INT 22
13606: PUSH
13607: LD_INT 2
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: PUSH
13614: LD_INT 25
13616: PUSH
13617: LD_INT 4
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 69
13632: PUSH
13633: FOR_IN
13634: IFFALSE 13652
// ComEnterUnit ( i , arLab ) ;
13636: LD_VAR 0 2
13640: PPUSH
13641: LD_EXP 39
13645: PPUSH
13646: CALL_OW 120
13650: GO 13633
13652: POP
13653: POP
// end ;
13654: LD_VAR 0 1
13658: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
13659: LD_INT 0
13661: PPUSH
13662: PPUSH
13663: PPUSH
13664: PPUSH
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
13669: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13670: LD_INT 22
13672: PUSH
13673: LD_VAR 0 1
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 21
13684: PUSH
13685: LD_INT 2
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 69
13700: PUSH
13701: LD_VAR 0 3
13705: LESSEQUAL
13706: IFFALSE 13850
// for i = 1 to vehCount do
13708: LD_ADDR_VAR 0 10
13712: PUSH
13713: DOUBLE
13714: LD_INT 1
13716: DEC
13717: ST_TO_ADDR
13718: LD_VAR 0 3
13722: PUSH
13723: FOR_TO
13724: IFFALSE 13848
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
13726: LD_ADDR_VAR 0 12
13730: PUSH
13731: LD_VAR 0 5
13735: PUSH
13736: LD_INT 1
13738: PPUSH
13739: LD_VAR 0 5
13743: PPUSH
13744: CALL_OW 12
13748: ARRAY
13749: ST_TO_ADDR
// if randWeapon = 46 then
13750: LD_VAR 0 12
13754: PUSH
13755: LD_INT 46
13757: EQUAL
13758: IFFALSE 13803
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
13760: LD_VAR 0 2
13764: PPUSH
13765: LD_INT 24
13767: PPUSH
13768: LD_VAR 0 6
13772: PPUSH
13773: LD_VAR 0 7
13777: PUSH
13778: LD_INT 1
13780: PPUSH
13781: LD_VAR 0 7
13785: PPUSH
13786: CALL_OW 12
13790: ARRAY
13791: PPUSH
13792: LD_VAR 0 12
13796: PPUSH
13797: CALL_OW 185
13801: GO 13846
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
13803: LD_VAR 0 2
13807: PPUSH
13808: LD_VAR 0 8
13812: PPUSH
13813: LD_VAR 0 6
13817: PPUSH
13818: LD_VAR 0 7
13822: PUSH
13823: LD_INT 1
13825: PPUSH
13826: LD_VAR 0 7
13830: PPUSH
13831: CALL_OW 12
13835: ARRAY
13836: PPUSH
13837: LD_VAR 0 12
13841: PPUSH
13842: CALL_OW 185
// end ;
13846: GO 13723
13848: POP
13849: POP
// repeat wait ( 0 0$1 ) ;
13850: LD_INT 35
13852: PPUSH
13853: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
13857: LD_INT 22
13859: PUSH
13860: LD_VAR 0 1
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 21
13871: PUSH
13872: LD_INT 2
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: LD_INT 24
13881: PUSH
13882: LD_INT 250
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PUSH
13889: EMPTY
13890: LIST
13891: LIST
13892: LIST
13893: PPUSH
13894: CALL_OW 69
13898: PUSH
13899: LD_VAR 0 3
13903: GREATEREQUAL
13904: IFFALSE 13850
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
13906: LD_INT 22
13908: PUSH
13909: LD_VAR 0 1
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 21
13920: PUSH
13921: LD_INT 2
13923: PUSH
13924: EMPTY
13925: LIST
13926: LIST
13927: PUSH
13928: LD_INT 24
13930: PUSH
13931: LD_INT 250
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PUSH
13938: EMPTY
13939: LIST
13940: LIST
13941: LIST
13942: PPUSH
13943: CALL_OW 69
13947: PUSH
13948: LD_VAR 0 3
13952: GREATEREQUAL
13953: IFFALSE 14296
// begin repeat begin wait ( 0 0$1 ) ;
13955: LD_INT 35
13957: PPUSH
13958: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
13962: LD_INT 22
13964: PUSH
13965: LD_VAR 0 1
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 21
13976: PUSH
13977: LD_INT 2
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 24
13986: PUSH
13987: LD_INT 651
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: LIST
13998: PPUSH
13999: CALL_OW 69
14003: PUSH
14004: LD_INT 0
14006: GREATER
14007: IFFALSE 14235
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
14009: LD_ADDR_VAR 0 10
14013: PUSH
14014: LD_INT 22
14016: PUSH
14017: LD_VAR 0 1
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 21
14028: PUSH
14029: LD_INT 2
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 24
14038: PUSH
14039: LD_INT 651
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: LIST
14050: PPUSH
14051: CALL_OW 69
14055: PUSH
14056: FOR_IN
14057: IFFALSE 14233
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14059: LD_ADDR_VAR 0 16
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_VAR 0 4
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PPUSH
14076: CALL_OW 69
14080: PPUSH
14081: LD_VAR 0 10
14085: PPUSH
14086: CALL_OW 74
14090: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14091: LD_ADDR_VAR 0 17
14095: PUSH
14096: LD_INT 22
14098: PUSH
14099: LD_VAR 0 4
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: PUSH
14108: LD_INT 2
14110: PUSH
14111: LD_INT 59
14113: PUSH
14114: EMPTY
14115: LIST
14116: PUSH
14117: LD_INT 21
14119: PUSH
14120: LD_INT 1
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 21
14129: PUSH
14130: LD_INT 2
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: PPUSH
14150: CALL_OW 69
14154: PPUSH
14155: LD_VAR 0 10
14159: PPUSH
14160: CALL_OW 74
14164: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14165: LD_VAR 0 10
14169: PPUSH
14170: LD_VAR 0 16
14174: PPUSH
14175: CALL_OW 296
14179: PUSH
14180: LD_INT 8
14182: PLUS
14183: PUSH
14184: LD_VAR 0 10
14188: PPUSH
14189: LD_VAR 0 17
14193: PPUSH
14194: CALL_OW 296
14198: LESS
14199: IFFALSE 14217
// begin ComAttackUnit ( i , target1 ) ;
14201: LD_VAR 0 10
14205: PPUSH
14206: LD_VAR 0 16
14210: PPUSH
14211: CALL_OW 115
// end else
14215: GO 14231
// begin ComAttackUnit ( i , target2 ) ;
14217: LD_VAR 0 10
14221: PPUSH
14222: LD_VAR 0 17
14226: PPUSH
14227: CALL_OW 115
// end ; end ;
14231: GO 14056
14233: POP
14234: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
14235: LD_INT 22
14237: PUSH
14238: LD_VAR 0 1
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: PUSH
14266: LD_INT 0
14268: EQUAL
14269: PUSH
14270: LD_INT 22
14272: PUSH
14273: LD_VAR 0 4
14277: PUSH
14278: EMPTY
14279: LIST
14280: LIST
14281: PUSH
14282: EMPTY
14283: LIST
14284: PPUSH
14285: CALL_OW 69
14289: PUSH
14290: LD_INT 0
14292: EQUAL
14293: OR
14294: IFFALSE 13955
// end ; end ; end_of_file
14296: LD_VAR 0 9
14300: RET
// every 0 0$1 trigger russianAI = 1 do
14301: LD_EXP 34
14305: PUSH
14306: LD_INT 1
14308: EQUAL
14309: IFFALSE 14408
14311: GO 14313
14313: DISABLE
// begin enable ;
14314: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
14315: LD_INT 3
14317: PPUSH
14318: LD_EXP 25
14322: PPUSH
14323: CALL 9449 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
14327: LD_INT 3
14329: PPUSH
14330: LD_EXP 37
14334: PPUSH
14335: CALL 9708 0 2
// if ruPossition = 1 then
14339: LD_EXP 36
14343: PUSH
14344: LD_INT 1
14346: EQUAL
14347: IFFALSE 14362
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase ) ;
14349: LD_INT 3
14351: PPUSH
14352: LD_INT 13
14354: PPUSH
14355: LD_INT 10
14357: PPUSH
14358: CALL 9914 0 3
// if ruPossition = 2 then
14362: LD_EXP 36
14366: PUSH
14367: LD_INT 2
14369: EQUAL
14370: IFFALSE 14385
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase ) ;
14372: LD_INT 3
14374: PPUSH
14375: LD_INT 14
14377: PPUSH
14378: LD_INT 11
14380: PPUSH
14381: CALL 9914 0 3
// if ruPossition = 3 then
14385: LD_EXP 36
14389: PUSH
14390: LD_INT 3
14392: EQUAL
14393: IFFALSE 14408
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase ) ;
14395: LD_INT 3
14397: PPUSH
14398: LD_INT 15
14400: PPUSH
14401: LD_INT 12
14403: PPUSH
14404: CALL 9914 0 3
// end ;
14408: END
// every 0 0$1 do
14409: GO 14411
14411: DISABLE
// begin enable ;
14412: ENABLE
// if ruPossition = 1 then
14413: LD_EXP 36
14417: PUSH
14418: LD_INT 1
14420: EQUAL
14421: IFFALSE 14433
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
14423: LD_INT 3
14425: PPUSH
14426: LD_INT 10
14428: PPUSH
14429: CALL 9147 0 2
// if ruPossition = 2 then
14433: LD_EXP 36
14437: PUSH
14438: LD_INT 2
14440: EQUAL
14441: IFFALSE 14453
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
14443: LD_INT 3
14445: PPUSH
14446: LD_INT 11
14448: PPUSH
14449: CALL 9147 0 2
// if ruPossition = 3 then
14453: LD_EXP 36
14457: PUSH
14458: LD_INT 3
14460: EQUAL
14461: IFFALSE 14473
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
14463: LD_INT 3
14465: PPUSH
14466: LD_INT 12
14468: PPUSH
14469: CALL 9147 0 2
// IntBazooka ( 3 , 1 ) ;
14473: LD_INT 3
14475: PPUSH
14476: LD_INT 1
14478: PPUSH
14479: CALL 8754 0 2
// IntBazooka ( 6 , 1 ) ;
14483: LD_INT 6
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL 8754 0 2
// end ;
14493: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
14494: LD_EXP 34
14498: PUSH
14499: LD_INT 1
14501: EQUAL
14502: PUSH
14503: LD_EXP 30
14507: PPUSH
14508: CALL_OW 302
14512: AND
14513: PUSH
14514: LD_EXP 30
14518: PPUSH
14519: CALL_OW 255
14523: PUSH
14524: LD_INT 3
14526: EQUAL
14527: AND
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_INT 3
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 21
14541: PUSH
14542: LD_INT 2
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 33
14551: PUSH
14552: LD_INT 3
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: PPUSH
14564: CALL_OW 69
14568: PUSH
14569: LD_INT 0
14571: EQUAL
14572: AND
14573: IFFALSE 14781
14575: GO 14577
14577: DISABLE
// begin enable ;
14578: ENABLE
// if Difficulty = 1 then
14579: LD_OWVAR 67
14583: PUSH
14584: LD_INT 1
14586: EQUAL
14587: IFFALSE 14649
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
14589: LD_INT 3
14591: PPUSH
14592: LD_EXP 30
14596: PPUSH
14597: LD_INT 5
14599: PPUSH
14600: LD_INT 8
14602: PPUSH
14603: CALL_OW 12
14607: PPUSH
14608: LD_INT 1
14610: PPUSH
14611: LD_INT 43
14613: PUSH
14614: LD_INT 44
14616: PUSH
14617: LD_INT 45
14619: PUSH
14620: LD_INT 46
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: LD_INT 1
14634: PUSH
14635: LD_INT 3
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PPUSH
14642: LD_INT 22
14644: PPUSH
14645: CALL 13659 0 8
// if Difficulty = 2 then
14649: LD_OWVAR 67
14653: PUSH
14654: LD_INT 2
14656: EQUAL
14657: IFFALSE 14715
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
14659: LD_INT 3
14661: PPUSH
14662: LD_EXP 30
14666: PPUSH
14667: LD_INT 6
14669: PPUSH
14670: LD_INT 8
14672: PPUSH
14673: CALL_OW 12
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: LD_INT 44
14683: PUSH
14684: LD_INT 45
14686: PUSH
14687: LD_INT 46
14689: PUSH
14690: EMPTY
14691: LIST
14692: LIST
14693: LIST
14694: PPUSH
14695: LD_INT 1
14697: PPUSH
14698: LD_INT 1
14700: PUSH
14701: LD_INT 3
14703: PUSH
14704: EMPTY
14705: LIST
14706: LIST
14707: PPUSH
14708: LD_INT 22
14710: PPUSH
14711: CALL 13659 0 8
// if Difficulty = 3 then
14715: LD_OWVAR 67
14719: PUSH
14720: LD_INT 3
14722: EQUAL
14723: IFFALSE 14781
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
14725: LD_INT 3
14727: PPUSH
14728: LD_EXP 30
14732: PPUSH
14733: LD_INT 7
14735: PPUSH
14736: LD_INT 8
14738: PPUSH
14739: CALL_OW 12
14743: PPUSH
14744: LD_INT 1
14746: PPUSH
14747: LD_INT 44
14749: PUSH
14750: LD_INT 45
14752: PUSH
14753: LD_INT 46
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: LIST
14760: PPUSH
14761: LD_INT 1
14763: PPUSH
14764: LD_INT 1
14766: PUSH
14767: LD_INT 3
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: LD_INT 22
14776: PPUSH
14777: CALL 13659 0 8
// end ; end_of_file
14781: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
14782: LD_VAR 0 1
14786: PPUSH
14787: CALL_OW 255
14791: PUSH
14792: LD_INT 4
14794: EQUAL
14795: IFFALSE 14809
// SetBName ( building , epsilon ) ;
14797: LD_VAR 0 1
14801: PPUSH
14802: LD_STRING epsilon
14804: PPUSH
14805: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
14809: LD_VAR 0 1
14813: PPUSH
14814: CALL_OW 255
14818: PUSH
14819: LD_INT 1
14821: EQUAL
14822: PUSH
14823: LD_VAR 0 1
14827: PPUSH
14828: CALL_OW 266
14832: PUSH
14833: LD_INT 0
14835: EQUAL
14836: AND
14837: IFFALSE 14851
// SetBName ( building , epsilon ) ;
14839: LD_VAR 0 1
14843: PPUSH
14844: LD_STRING epsilon
14846: PPUSH
14847: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
14851: LD_VAR 0 1
14855: PPUSH
14856: CALL_OW 255
14860: PUSH
14861: LD_INT 3
14863: EQUAL
14864: PUSH
14865: LD_VAR 0 1
14869: PPUSH
14870: CALL_OW 266
14874: PUSH
14875: LD_INT 0
14877: EQUAL
14878: AND
14879: IFFALSE 14893
// SetBName ( building , chuikov ) ;
14881: LD_VAR 0 1
14885: PPUSH
14886: LD_STRING chuikov
14888: PPUSH
14889: CALL_OW 500
// end ;
14893: PPOPN 2
14895: END
// on BuildingComplete ( building ) do var i ;
14896: LD_INT 0
14898: PPUSH
// begin if GetSide ( building ) = 1 then
14899: LD_VAR 0 1
14903: PPUSH
14904: CALL_OW 255
14908: PUSH
14909: LD_INT 1
14911: EQUAL
14912: IFFALSE 15112
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
14914: LD_INT 22
14916: PUSH
14917: LD_INT 1
14919: PUSH
14920: EMPTY
14921: LIST
14922: LIST
14923: PUSH
14924: LD_INT 2
14926: PUSH
14927: LD_INT 30
14929: PUSH
14930: LD_INT 7
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 30
14939: PUSH
14940: LD_INT 8
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: PUSH
14947: LD_INT 1
14949: PUSH
14950: LD_INT 30
14952: PUSH
14953: LD_INT 11
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 1
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: LD_INT 30
14968: PUSH
14969: LD_INT 26
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 30
14978: PUSH
14979: LD_INT 27
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: LD_INT 30
14988: PUSH
14989: LD_INT 28
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: LIST
15010: PUSH
15011: EMPTY
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: PUSH
15026: LD_INT 0
15028: GREATER
15029: PUSH
15030: LD_INT 22
15032: PUSH
15033: LD_INT 1
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 26
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: LD_INT 30
15055: PUSH
15056: LD_INT 27
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PUSH
15063: LD_INT 30
15065: PUSH
15066: LD_INT 28
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 69
15087: PUSH
15088: LD_INT 0
15090: GREATER
15091: AND
15092: PUSH
15093: LD_EXP 45
15097: PUSH
15098: LD_INT 0
15100: EQUAL
15101: AND
15102: IFFALSE 15112
// eventVar1 = 1 ;
15104: LD_ADDR_EXP 45
15108: PUSH
15109: LD_INT 1
15111: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
15112: LD_VAR 0 1
15116: PPUSH
15117: CALL_OW 255
15121: PUSH
15122: LD_INT 3
15124: EQUAL
15125: IFFALSE 15605
// begin if GetBType ( building ) = b_depot then
15127: LD_VAR 0 1
15131: PPUSH
15132: CALL_OW 266
15136: PUSH
15137: LD_INT 0
15139: EQUAL
15140: IFFALSE 15212
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
15142: LD_VAR 0 1
15146: PPUSH
15147: CALL_OW 274
15151: PPUSH
15152: LD_INT 1
15154: PPUSH
15155: LD_INT 5000
15157: PPUSH
15158: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 274
15171: PPUSH
15172: LD_INT 2
15174: PPUSH
15175: LD_INT 5000
15177: PPUSH
15178: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
15182: LD_VAR 0 1
15186: PPUSH
15187: CALL_OW 274
15191: PPUSH
15192: LD_INT 3
15194: PPUSH
15195: LD_INT 5000
15197: PPUSH
15198: CALL_OW 277
// ruDepot = building ;
15202: LD_ADDR_EXP 25
15206: PUSH
15207: LD_VAR 0 1
15211: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
15212: LD_VAR 0 1
15216: PPUSH
15217: CALL_OW 266
15221: PUSH
15222: LD_INT 0
15224: EQUAL
15225: PUSH
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 266
15235: PUSH
15236: LD_INT 2
15238: EQUAL
15239: OR
15240: PUSH
15241: LD_VAR 0 1
15245: PPUSH
15246: CALL_OW 266
15250: PUSH
15251: LD_INT 4
15253: EQUAL
15254: OR
15255: IFFALSE 15266
// ComUpgrade ( building ) ;
15257: LD_VAR 0 1
15261: PPUSH
15262: CALL_OW 146
// if GetBType ( building ) = b_lab then
15266: LD_VAR 0 1
15270: PPUSH
15271: CALL_OW 266
15275: PUSH
15276: LD_INT 6
15278: EQUAL
15279: IFFALSE 15482
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
15281: LD_INT 22
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 30
15293: PUSH
15294: LD_INT 8
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: EMPTY
15302: LIST
15303: LIST
15304: PPUSH
15305: CALL_OW 69
15309: PUSH
15310: LD_INT 0
15312: EQUAL
15313: IFFALSE 15351
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
15315: LD_VAR 0 1
15319: PPUSH
15320: LD_INT 10
15322: PPUSH
15323: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
15327: LD_VAR 0 1
15331: PPUSH
15332: LD_INT 12
15334: PPUSH
15335: CALL_OW 207
// ruLab1 = building ;
15339: LD_ADDR_EXP 26
15343: PUSH
15344: LD_VAR 0 1
15348: ST_TO_ADDR
// end else
15349: GO 15385
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
15351: LD_VAR 0 1
15355: PPUSH
15356: LD_INT 11
15358: PPUSH
15359: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
15363: LD_VAR 0 1
15367: PPUSH
15368: LD_INT 14
15370: PPUSH
15371: CALL_OW 207
// ruLab2 = building ;
15375: LD_ADDR_EXP 27
15379: PUSH
15380: LD_VAR 0 1
15384: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
15385: LD_INT 3
15387: PPUSH
15388: LD_VAR 0 1
15392: PPUSH
15393: LD_INT 3
15395: PPUSH
15396: CALL 9062 0 3
// if ruDestroyedBuildings > 0 then
15400: LD_EXP 37
15404: PUSH
15405: LD_INT 0
15407: GREATER
15408: IFFALSE 15482
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15410: LD_ADDR_EXP 37
15414: PUSH
15415: LD_EXP 37
15419: PPUSH
15420: LD_INT 1
15422: PPUSH
15423: CALL_OW 3
15427: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15428: LD_ADDR_EXP 37
15432: PUSH
15433: LD_EXP 37
15437: PPUSH
15438: LD_INT 1
15440: PPUSH
15441: CALL_OW 3
15445: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15446: LD_ADDR_EXP 37
15450: PUSH
15451: LD_EXP 37
15455: PPUSH
15456: LD_INT 1
15458: PPUSH
15459: CALL_OW 3
15463: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
15464: LD_ADDR_EXP 37
15468: PUSH
15469: LD_EXP 37
15473: PPUSH
15474: LD_INT 1
15476: PPUSH
15477: CALL_OW 3
15481: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
15482: LD_VAR 0 1
15486: PPUSH
15487: CALL_OW 266
15491: PUSH
15492: LD_INT 32
15494: EQUAL
15495: IFFALSE 15532
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 44
15504: PUSH
15505: LD_INT 45
15507: PUSH
15508: LD_INT 46
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: PUSH
15516: LD_INT 1
15518: PPUSH
15519: LD_INT 3
15521: PPUSH
15522: CALL_OW 12
15526: ARRAY
15527: PPUSH
15528: CALL_OW 208
// if GetBType ( building ) = b_turret then
15532: LD_VAR 0 1
15536: PPUSH
15537: CALL_OW 266
15541: PUSH
15542: LD_INT 33
15544: EQUAL
15545: IFFALSE 15582
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
15547: LD_VAR 0 1
15551: PPUSH
15552: LD_INT 44
15554: PUSH
15555: LD_INT 46
15557: PUSH
15558: LD_INT 46
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: LIST
15565: PUSH
15566: LD_INT 1
15568: PPUSH
15569: LD_INT 3
15571: PPUSH
15572: CALL_OW 12
15576: ARRAY
15577: PPUSH
15578: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
15582: LD_VAR 0 1
15586: PPUSH
15587: CALL_OW 266
15591: PUSH
15592: LD_INT 24
15594: EQUAL
15595: IFFALSE 15605
// russianAI = 1 ;
15597: LD_ADDR_EXP 34
15601: PUSH
15602: LD_INT 1
15604: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
15605: LD_VAR 0 1
15609: PPUSH
15610: CALL_OW 255
15614: PUSH
15615: LD_INT 2
15617: EQUAL
15618: IFFALSE 15907
// begin if GetBType ( building ) = b_depot then
15620: LD_VAR 0 1
15624: PPUSH
15625: CALL_OW 266
15629: PUSH
15630: LD_INT 0
15632: EQUAL
15633: IFFALSE 15719
// begin arDepot = building ;
15635: LD_ADDR_EXP 38
15639: PUSH
15640: LD_VAR 0 1
15644: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
15645: LD_INT 38
15647: PUSH
15648: LD_INT 47
15650: PUSH
15651: EMPTY
15652: LIST
15653: LIST
15654: PPUSH
15655: LD_INT 71
15657: PPUSH
15658: LD_INT 19
15660: PPUSH
15661: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
15665: LD_VAR 0 1
15669: PPUSH
15670: CALL_OW 274
15674: PPUSH
15675: LD_INT 1
15677: PPUSH
15678: LD_INT 500
15680: PPUSH
15681: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 274
15694: PPUSH
15695: LD_INT 3
15697: PPUSH
15698: LD_INT 30
15700: PPUSH
15701: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
15705: LD_EXP 22
15709: PPUSH
15710: LD_EXP 38
15714: PPUSH
15715: CALL_OW 120
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
15719: LD_VAR 0 1
15723: PPUSH
15724: CALL_OW 266
15728: PUSH
15729: LD_INT 2
15731: EQUAL
15732: PUSH
15733: LD_VAR 0 1
15737: PPUSH
15738: CALL_OW 266
15742: PUSH
15743: LD_INT 4
15745: EQUAL
15746: OR
15747: IFFALSE 15758
// ComUpgrade ( building ) ;
15749: LD_VAR 0 1
15753: PPUSH
15754: CALL_OW 146
// if GetBType ( building ) = b_lab then
15758: LD_VAR 0 1
15762: PPUSH
15763: CALL_OW 266
15767: PUSH
15768: LD_INT 6
15770: EQUAL
15771: IFFALSE 15822
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
15773: LD_VAR 0 1
15777: PPUSH
15778: LD_INT 10
15780: PPUSH
15781: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
15785: LD_VAR 0 1
15789: PPUSH
15790: LD_INT 11
15792: PPUSH
15793: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
15797: LD_INT 2
15799: PPUSH
15800: LD_VAR 0 1
15804: PPUSH
15805: LD_INT 2
15807: PPUSH
15808: CALL 9062 0 3
// arLab = building ;
15812: LD_ADDR_EXP 39
15816: PUSH
15817: LD_VAR 0 1
15821: ST_TO_ADDR
// end ; if GetBType ( building ) = b_breastwork then
15822: LD_VAR 0 1
15826: PPUSH
15827: CALL_OW 266
15831: PUSH
15832: LD_INT 31
15834: EQUAL
15835: IFFALSE 15907
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
15837: LD_INT 22
15839: PUSH
15840: LD_INT 2
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 25
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: LD_INT 54
15862: PUSH
15863: EMPTY
15864: LIST
15865: PUSH
15866: LD_INT 3
15868: PUSH
15869: LD_INT 60
15871: PUSH
15872: EMPTY
15873: LIST
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: PUSH
15894: LD_INT 1
15896: ARRAY
15897: PPUSH
15898: LD_VAR 0 1
15902: PPUSH
15903: CALL_OW 120
// end ; end ;
15907: PPOPN 2
15909: END
// on UpgradeComplete ( building ) do var i ;
15910: LD_INT 0
15912: PPUSH
// begin if GetSide ( building ) = 1 then
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 255
15922: PUSH
15923: LD_INT 1
15925: EQUAL
15926: IFFALSE 16126
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
15928: LD_INT 22
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: LD_INT 2
15940: PUSH
15941: LD_INT 30
15943: PUSH
15944: LD_INT 7
15946: PUSH
15947: EMPTY
15948: LIST
15949: LIST
15950: PUSH
15951: LD_INT 30
15953: PUSH
15954: LD_INT 8
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 1
15963: PUSH
15964: LD_INT 30
15966: PUSH
15967: LD_INT 11
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: LD_INT 2
15979: PUSH
15980: LD_INT 30
15982: PUSH
15983: LD_INT 26
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: PUSH
15990: LD_INT 30
15992: PUSH
15993: LD_INT 27
15995: PUSH
15996: EMPTY
15997: LIST
15998: LIST
15999: PUSH
16000: LD_INT 30
16002: PUSH
16003: LD_INT 28
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: LIST
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PPUSH
16035: CALL_OW 69
16039: PUSH
16040: LD_INT 0
16042: GREATER
16043: PUSH
16044: LD_INT 22
16046: PUSH
16047: LD_INT 1
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: LD_INT 2
16056: PUSH
16057: LD_INT 30
16059: PUSH
16060: LD_INT 26
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 30
16069: PUSH
16070: LD_INT 27
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 30
16079: PUSH
16080: LD_INT 28
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PPUSH
16097: CALL_OW 69
16101: PUSH
16102: LD_INT 0
16104: GREATER
16105: AND
16106: PUSH
16107: LD_EXP 45
16111: PUSH
16112: LD_INT 0
16114: EQUAL
16115: AND
16116: IFFALSE 16126
// eventVar1 = 1 ;
16118: LD_ADDR_EXP 45
16122: PUSH
16123: LD_INT 1
16125: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
16126: LD_VAR 0 1
16130: PPUSH
16131: CALL_OW 255
16135: PUSH
16136: LD_INT 2
16138: EQUAL
16139: IFFALSE 16244
// begin if GetBType ( building ) = b_barracks then
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 266
16150: PUSH
16151: LD_INT 5
16153: EQUAL
16154: IFFALSE 16244
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
16156: LD_ADDR_VAR 0 2
16160: PUSH
16161: LD_INT 22
16163: PUSH
16164: LD_INT 2
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: PUSH
16171: LD_INT 25
16173: PUSH
16174: LD_INT 1
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 3
16183: PUSH
16184: LD_INT 54
16186: PUSH
16187: EMPTY
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: LIST
16198: PPUSH
16199: CALL_OW 69
16203: PUSH
16204: LD_EXP 22
16208: PUSH
16209: EMPTY
16210: LIST
16211: DIFF
16212: PUSH
16213: FOR_IN
16214: IFFALSE 16232
// ComEnterUnit ( i , building ) ;
16216: LD_VAR 0 2
16220: PPUSH
16221: LD_VAR 0 1
16225: PPUSH
16226: CALL_OW 120
16230: GO 16213
16232: POP
16233: POP
// arArm = building ;
16234: LD_ADDR_EXP 40
16238: PUSH
16239: LD_VAR 0 1
16243: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
16244: LD_VAR 0 1
16248: PPUSH
16249: CALL_OW 255
16253: PUSH
16254: LD_INT 3
16256: EQUAL
16257: IFFALSE 16730
// begin if GetBType ( building ) = b_factory then
16259: LD_VAR 0 1
16263: PPUSH
16264: CALL_OW 266
16268: PUSH
16269: LD_INT 3
16271: EQUAL
16272: IFFALSE 16339
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
16274: LD_ADDR_VAR 0 2
16278: PUSH
16279: LD_INT 22
16281: PUSH
16282: LD_INT 3
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 25
16291: PUSH
16292: LD_INT 3
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: PPUSH
16303: CALL_OW 69
16307: PUSH
16308: FOR_IN
16309: IFFALSE 16327
// ComEnterUnit ( i , building ) ;
16311: LD_VAR 0 2
16315: PPUSH
16316: LD_VAR 0 1
16320: PPUSH
16321: CALL_OW 120
16325: GO 16308
16327: POP
16328: POP
// ruFab = building ;
16329: LD_ADDR_EXP 30
16333: PUSH
16334: LD_VAR 0 1
16338: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
16339: LD_INT 22
16341: PUSH
16342: LD_INT 3
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 21
16351: PUSH
16352: LD_INT 3
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: LD_INT 30
16361: PUSH
16362: LD_INT 8
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: LIST
16373: PPUSH
16374: CALL_OW 69
16378: PUSH
16379: LD_INT 2
16381: EQUAL
16382: IFFALSE 16590
// begin for i = 1 to 2 do
16384: LD_ADDR_VAR 0 2
16388: PUSH
16389: DOUBLE
16390: LD_INT 1
16392: DEC
16393: ST_TO_ADDR
16394: LD_INT 2
16396: PUSH
16397: FOR_TO
16398: IFFALSE 16485
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
16400: LD_INT 22
16402: PUSH
16403: LD_INT 3
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 25
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PPUSH
16424: CALL_OW 69
16428: PUSH
16429: LD_VAR 0 2
16433: ARRAY
16434: PPUSH
16435: LD_INT 22
16437: PUSH
16438: LD_INT 3
16440: PUSH
16441: EMPTY
16442: LIST
16443: LIST
16444: PUSH
16445: LD_INT 21
16447: PUSH
16448: LD_INT 3
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 30
16457: PUSH
16458: LD_INT 8
16460: PUSH
16461: EMPTY
16462: LIST
16463: LIST
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: PPUSH
16470: CALL_OW 69
16474: PUSH
16475: LD_INT 1
16477: ARRAY
16478: PPUSH
16479: CALL_OW 120
16483: GO 16397
16485: POP
16486: POP
// for i = 3 to 4 do
16487: LD_ADDR_VAR 0 2
16491: PUSH
16492: DOUBLE
16493: LD_INT 3
16495: DEC
16496: ST_TO_ADDR
16497: LD_INT 4
16499: PUSH
16500: FOR_TO
16501: IFFALSE 16588
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
16503: LD_INT 22
16505: PUSH
16506: LD_INT 3
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 25
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PPUSH
16527: CALL_OW 69
16531: PUSH
16532: LD_VAR 0 2
16536: ARRAY
16537: PPUSH
16538: LD_INT 22
16540: PUSH
16541: LD_INT 3
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 21
16550: PUSH
16551: LD_INT 3
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: LD_INT 30
16560: PUSH
16561: LD_INT 8
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 69
16577: PUSH
16578: LD_INT 2
16580: ARRAY
16581: PPUSH
16582: CALL_OW 120
16586: GO 16500
16588: POP
16589: POP
// end ; if GetBType ( building ) = b_barracks then
16590: LD_VAR 0 1
16594: PPUSH
16595: CALL_OW 266
16599: PUSH
16600: LD_INT 5
16602: EQUAL
16603: IFFALSE 16730
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
16605: LD_ADDR_VAR 0 2
16609: PUSH
16610: LD_INT 22
16612: PUSH
16613: LD_INT 3
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PUSH
16620: LD_INT 25
16622: PUSH
16623: LD_INT 1
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: LD_INT 3
16632: PUSH
16633: LD_INT 54
16635: PUSH
16636: EMPTY
16637: LIST
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: LIST
16647: PPUSH
16648: CALL_OW 69
16652: PUSH
16653: FOR_IN
16654: IFFALSE 16672
// ComEnterUnit ( i , building ) ;
16656: LD_VAR 0 2
16660: PPUSH
16661: LD_VAR 0 1
16665: PPUSH
16666: CALL_OW 120
16670: GO 16653
16672: POP
16673: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
16674: LD_INT 22
16676: PUSH
16677: LD_INT 3
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: LD_INT 5
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PPUSH
16698: CALL_OW 69
16702: PUSH
16703: LD_INT 0
16705: EQUAL
16706: IFFALSE 16720
// ruArm1 = building else
16708: LD_ADDR_EXP 28
16712: PUSH
16713: LD_VAR 0 1
16717: ST_TO_ADDR
16718: GO 16730
// ruArm2 = building ;
16720: LD_ADDR_EXP 29
16724: PUSH
16725: LD_VAR 0 1
16729: ST_TO_ADDR
// end ; end ; end ;
16730: PPOPN 2
16732: END
// on EnterBuilding ( building , human ) do var rnd ;
16733: LD_INT 0
16735: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
16736: LD_VAR 0 2
16740: PPUSH
16741: CALL_OW 255
16745: PUSH
16746: LD_INT 2
16748: EQUAL
16749: PUSH
16750: LD_VAR 0 2
16754: PPUSH
16755: CALL_OW 257
16759: PUSH
16760: LD_INT 1
16762: EQUAL
16763: AND
16764: PUSH
16765: LD_VAR 0 1
16769: PUSH
16770: LD_EXP 40
16774: EQUAL
16775: AND
16776: IFFALSE 16823
// begin wait ( 0 0$1 ) ;
16778: LD_INT 35
16780: PPUSH
16781: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
16785: LD_ADDR_VAR 0 3
16789: PUSH
16790: LD_INT 1
16792: PPUSH
16793: LD_INT 100
16795: PPUSH
16796: CALL_OW 12
16800: ST_TO_ADDR
// if rnd > 50 then
16801: LD_VAR 0 3
16805: PUSH
16806: LD_INT 50
16808: GREATER
16809: IFFALSE 16823
// SetClass ( human , class_mortar ) ;
16811: LD_VAR 0 2
16815: PPUSH
16816: LD_INT 8
16818: PPUSH
16819: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
16823: LD_VAR 0 2
16827: PPUSH
16828: CALL_OW 255
16832: PUSH
16833: LD_INT 3
16835: EQUAL
16836: PUSH
16837: LD_VAR 0 2
16841: PPUSH
16842: CALL_OW 257
16846: PUSH
16847: LD_INT 1
16849: EQUAL
16850: AND
16851: PUSH
16852: LD_VAR 0 1
16856: PUSH
16857: LD_EXP 28
16861: EQUAL
16862: PUSH
16863: LD_VAR 0 1
16867: PUSH
16868: LD_EXP 29
16872: EQUAL
16873: OR
16874: PUSH
16875: EMPTY
16876: LIST
16877: AND
16878: IFFALSE 16899
// begin wait ( 0 0$1 ) ;
16880: LD_INT 35
16882: PPUSH
16883: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
16887: LD_VAR 0 2
16891: PPUSH
16892: LD_INT 9
16894: PPUSH
16895: CALL_OW 336
// end ; end ;
16899: PPOPN 3
16901: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
16902: LD_VAR 0 1
16906: PUSH
16907: LD_INT 1
16909: EQUAL
16910: PUSH
16911: LD_VAR 0 2
16915: PUSH
16916: LD_INT 2
16918: EQUAL
16919: AND
16920: PUSH
16921: LD_INT 1
16923: PPUSH
16924: LD_INT 2
16926: PPUSH
16927: CALL_OW 81
16931: PUSH
16932: LD_INT 1
16934: EQUAL
16935: AND
16936: IFFALSE 16957
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
16938: LD_EXP 20
16942: PPUSH
16943: LD_STRING D6b-Pow-1
16945: PPUSH
16946: CALL_OW 94
// YouLost ( Powell ) ;
16950: LD_STRING Powell
16952: PPUSH
16953: CALL_OW 104
// end ; end ;
16957: PPOPN 2
16959: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
16960: LD_VAR 0 1
16964: PPUSH
16965: CALL_OW 255
16969: PUSH
16970: LD_INT 3
16972: EQUAL
16973: PUSH
16974: LD_VAR 0 1
16978: PPUSH
16979: CALL_OW 247
16983: PUSH
16984: LD_INT 3
16986: EQUAL
16987: AND
16988: IFFALSE 17680
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
16990: LD_VAR 0 1
16994: PPUSH
16995: CALL_OW 266
16999: PUSH
17000: LD_INT 31
17002: EQUAL
17003: PUSH
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 266
17013: PUSH
17014: LD_INT 32
17016: EQUAL
17017: OR
17018: PUSH
17019: LD_VAR 0 1
17023: PPUSH
17024: CALL_OW 266
17028: PUSH
17029: LD_INT 36
17031: EQUAL
17032: OR
17033: PUSH
17034: LD_VAR 0 1
17038: PPUSH
17039: CALL_OW 266
17043: PUSH
17044: LD_INT 0
17046: EQUAL
17047: OR
17048: PUSH
17049: LD_VAR 0 1
17053: PPUSH
17054: CALL_OW 266
17058: PUSH
17059: LD_INT 24
17061: EQUAL
17062: OR
17063: PUSH
17064: LD_VAR 0 1
17068: PPUSH
17069: CALL_OW 266
17073: PUSH
17074: LD_INT 17
17076: EQUAL
17077: OR
17078: PUSH
17079: LD_VAR 0 1
17083: PPUSH
17084: CALL_OW 266
17088: PUSH
17089: LD_INT 25
17091: EQUAL
17092: OR
17093: PUSH
17094: LD_VAR 0 1
17098: PPUSH
17099: CALL_OW 266
17103: PUSH
17104: LD_INT 19
17106: EQUAL
17107: OR
17108: PUSH
17109: LD_VAR 0 1
17113: PPUSH
17114: CALL_OW 266
17118: PUSH
17119: LD_INT 20
17121: EQUAL
17122: OR
17123: PUSH
17124: LD_VAR 0 1
17128: PPUSH
17129: CALL_OW 266
17133: PUSH
17134: LD_INT 18
17136: EQUAL
17137: OR
17138: PUSH
17139: LD_VAR 0 1
17143: PPUSH
17144: CALL_OW 266
17148: PUSH
17149: LD_INT 21
17151: EQUAL
17152: OR
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 266
17163: PUSH
17164: LD_INT 23
17166: EQUAL
17167: OR
17168: PUSH
17169: LD_VAR 0 1
17173: PPUSH
17174: CALL_OW 266
17178: PUSH
17179: LD_INT 16
17181: EQUAL
17182: OR
17183: PUSH
17184: LD_VAR 0 1
17188: PPUSH
17189: CALL_OW 266
17193: PUSH
17194: LD_INT 6
17196: EQUAL
17197: OR
17198: PUSH
17199: LD_VAR 0 1
17203: PPUSH
17204: CALL_OW 266
17208: PUSH
17209: LD_INT 29
17211: EQUAL
17212: OR
17213: PUSH
17214: LD_VAR 0 1
17218: PPUSH
17219: CALL_OW 266
17223: PUSH
17224: LD_INT 26
17226: EQUAL
17227: OR
17228: PUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 266
17238: PUSH
17239: LD_INT 30
17241: EQUAL
17242: OR
17243: PUSH
17244: LD_VAR 0 1
17248: PPUSH
17249: CALL_OW 266
17253: PUSH
17254: LD_INT 28
17256: EQUAL
17257: OR
17258: PUSH
17259: LD_VAR 0 1
17263: PPUSH
17264: CALL_OW 266
17268: PUSH
17269: LD_INT 27
17271: EQUAL
17272: OR
17273: PUSH
17274: LD_VAR 0 1
17278: PPUSH
17279: CALL_OW 266
17283: PUSH
17284: LD_INT 33
17286: EQUAL
17287: OR
17288: PUSH
17289: LD_VAR 0 1
17293: PPUSH
17294: CALL_OW 266
17298: PUSH
17299: LD_INT 2
17301: EQUAL
17302: OR
17303: PUSH
17304: LD_VAR 0 1
17308: PPUSH
17309: CALL_OW 266
17313: PUSH
17314: LD_INT 4
17316: EQUAL
17317: OR
17318: IFFALSE 17404
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
17320: LD_ADDR_EXP 37
17324: PUSH
17325: LD_EXP 37
17329: PUSH
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 266
17339: ADD
17340: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17341: LD_ADDR_EXP 37
17345: PUSH
17346: LD_EXP 37
17350: PUSH
17351: LD_VAR 0 1
17355: PPUSH
17356: CALL_OW 250
17360: ADD
17361: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17362: LD_ADDR_EXP 37
17366: PUSH
17367: LD_EXP 37
17371: PUSH
17372: LD_VAR 0 1
17376: PPUSH
17377: CALL_OW 251
17381: ADD
17382: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17383: LD_ADDR_EXP 37
17387: PUSH
17388: LD_EXP 37
17392: PUSH
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 254
17402: ADD
17403: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
17404: LD_VAR 0 1
17408: PPUSH
17409: CALL_OW 266
17413: PUSH
17414: LD_INT 1
17416: EQUAL
17417: IFFALSE 17496
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
17419: LD_ADDR_EXP 37
17423: PUSH
17424: LD_EXP 37
17428: PUSH
17429: LD_INT 0
17431: ADD
17432: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17433: LD_ADDR_EXP 37
17437: PUSH
17438: LD_EXP 37
17442: PUSH
17443: LD_VAR 0 1
17447: PPUSH
17448: CALL_OW 250
17452: ADD
17453: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17454: LD_ADDR_EXP 37
17458: PUSH
17459: LD_EXP 37
17463: PUSH
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 251
17473: ADD
17474: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17475: LD_ADDR_EXP 37
17479: PUSH
17480: LD_EXP 37
17484: PUSH
17485: LD_VAR 0 1
17489: PPUSH
17490: CALL_OW 254
17494: ADD
17495: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
17496: LD_VAR 0 1
17500: PPUSH
17501: CALL_OW 266
17505: PUSH
17506: LD_INT 3
17508: EQUAL
17509: IFFALSE 17588
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
17511: LD_ADDR_EXP 37
17515: PUSH
17516: LD_EXP 37
17520: PUSH
17521: LD_INT 2
17523: ADD
17524: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17525: LD_ADDR_EXP 37
17529: PUSH
17530: LD_EXP 37
17534: PUSH
17535: LD_VAR 0 1
17539: PPUSH
17540: CALL_OW 250
17544: ADD
17545: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17546: LD_ADDR_EXP 37
17550: PUSH
17551: LD_EXP 37
17555: PUSH
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 251
17565: ADD
17566: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17567: LD_ADDR_EXP 37
17571: PUSH
17572: LD_EXP 37
17576: PUSH
17577: LD_VAR 0 1
17581: PPUSH
17582: CALL_OW 254
17586: ADD
17587: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
17588: LD_VAR 0 1
17592: PPUSH
17593: CALL_OW 266
17597: PUSH
17598: LD_INT 5
17600: EQUAL
17601: IFFALSE 17680
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
17603: LD_ADDR_EXP 37
17607: PUSH
17608: LD_EXP 37
17612: PUSH
17613: LD_INT 4
17615: ADD
17616: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
17617: LD_ADDR_EXP 37
17621: PUSH
17622: LD_EXP 37
17626: PUSH
17627: LD_VAR 0 1
17631: PPUSH
17632: CALL_OW 250
17636: ADD
17637: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
17638: LD_ADDR_EXP 37
17642: PUSH
17643: LD_EXP 37
17647: PUSH
17648: LD_VAR 0 1
17652: PPUSH
17653: CALL_OW 251
17657: ADD
17658: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
17659: LD_ADDR_EXP 37
17663: PUSH
17664: LD_EXP 37
17668: PUSH
17669: LD_VAR 0 1
17673: PPUSH
17674: CALL_OW 254
17678: ADD
17679: ST_TO_ADDR
// end ; end ; end ;
17680: PPOPN 1
17682: END
// on Command ( comandid ) do var i , j , tmp ;
17683: LD_INT 0
17685: PPUSH
17686: PPUSH
17687: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 9 ] ] ) do
17688: LD_ADDR_VAR 0 2
17692: PUSH
17693: LD_INT 22
17695: PUSH
17696: LD_INT 3
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 25
17705: PUSH
17706: LD_INT 9
17708: PUSH
17709: EMPTY
17710: LIST
17711: LIST
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PPUSH
17717: CALL_OW 69
17721: PUSH
17722: FOR_IN
17723: IFFALSE 18035
// begin if GetTaskList ( i ) > 0 and eventVar2 = 0 and [ comandid = 37 or comandid = 38 ] then
17725: LD_VAR 0 2
17729: PPUSH
17730: CALL_OW 437
17734: PUSH
17735: LD_INT 0
17737: GREATER
17738: PUSH
17739: LD_EXP 46
17743: PUSH
17744: LD_INT 0
17746: EQUAL
17747: AND
17748: PUSH
17749: LD_VAR 0 1
17753: PUSH
17754: LD_INT 37
17756: EQUAL
17757: PUSH
17758: LD_VAR 0 1
17762: PUSH
17763: LD_INT 38
17765: EQUAL
17766: OR
17767: PUSH
17768: EMPTY
17769: LIST
17770: AND
17771: IFFALSE 18033
// begin for j = 1 to GetTaskList ( i ) do
17773: LD_ADDR_VAR 0 3
17777: PUSH
17778: DOUBLE
17779: LD_INT 1
17781: DEC
17782: ST_TO_ADDR
17783: LD_VAR 0 2
17787: PPUSH
17788: CALL_OW 437
17792: PUSH
17793: FOR_TO
17794: IFFALSE 18031
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
17796: LD_ADDR_VAR 0 4
17800: PUSH
17801: LD_VAR 0 2
17805: PPUSH
17806: CALL_OW 437
17810: PUSH
17811: LD_VAR 0 3
17815: ARRAY
17816: PUSH
17817: LD_INT 4
17819: ARRAY
17820: ST_TO_ADDR
// eventVar2 = 1 ;
17821: LD_ADDR_EXP 46
17825: PUSH
17826: LD_INT 1
17828: ST_TO_ADDR
// wait ( 0 0$5 ) ;
17829: LD_INT 175
17831: PPUSH
17832: CALL_OW 67
// DialogueOn ;
17836: CALL_OW 6
// if IsOK ( Cyrus ) then
17840: LD_EXP 5
17844: PPUSH
17845: CALL_OW 302
17849: IFFALSE 17865
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
17851: LD_EXP 5
17855: PPUSH
17856: LD_STRING D9a-Cyrus-1
17858: PPUSH
17859: CALL_OW 88
// end else
17863: GO 17919
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
17865: LD_INT 22
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 26
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PUSH
17889: LD_EXP 1
17893: PUSH
17894: LD_EXP 14
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: DIFF
17903: PPUSH
17904: CALL_OW 69
17908: PPUSH
17909: LD_STRING D9a-Sol1-1
17911: PPUSH
17912: LD_STRING D9a-Sol1-1
17914: PPUSH
17915: CALL 5652 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
17919: LD_INT 22
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 26
17931: PUSH
17932: LD_INT 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_EXP 1
17947: PUSH
17948: LD_EXP 14
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: DIFF
17957: PPUSH
17958: CALL_OW 69
17962: PPUSH
17963: LD_STRING D9b-Sol1-1
17965: PPUSH
17966: LD_STRING D9b-Sol1-1
17968: PPUSH
17969: CALL 5652 0 3
// Say ( JMM , D9a-JMM-1 ) ;
17973: LD_EXP 1
17977: PPUSH
17978: LD_STRING D9a-JMM-1
17980: PPUSH
17981: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
17985: LD_EXP 1
17989: PPUSH
17990: LD_STRING D9c-JMM-1
17992: PPUSH
17993: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
17997: LD_INT 12
17999: PPUSH
18000: LD_INT 1
18002: PPUSH
18003: CALL_OW 321
18007: PUSH
18008: LD_INT 2
18010: EQUAL
18011: IFFALSE 18025
// Say ( JMM , D9c-JMM-1a ) ;
18013: LD_EXP 1
18017: PPUSH
18018: LD_STRING D9c-JMM-1a
18020: PPUSH
18021: CALL_OW 88
// DialogueOff ;
18025: CALL_OW 7
// end ;
18029: GO 17793
18031: POP
18032: POP
// end ; end ;
18033: GO 17722
18035: POP
18036: POP
// end ; end_of_file
18037: PPOPN 4
18039: END
// export function PrepareNature ; var i , un ; begin
18040: LD_INT 0
18042: PPUSH
18043: PPUSH
18044: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
18045: LD_ADDR_VAR 0 2
18049: PUSH
18050: DOUBLE
18051: LD_INT 1
18053: DEC
18054: ST_TO_ADDR
18055: LD_OWVAR 67
18059: PUSH
18060: LD_INT 1
18062: PPUSH
18063: LD_INT 5
18065: PPUSH
18066: CALL_OW 12
18070: PLUS
18071: PUSH
18072: FOR_TO
18073: IFFALSE 18218
// begin hc_sex = sex_male ;
18075: LD_ADDR_OWVAR 27
18079: PUSH
18080: LD_INT 1
18082: ST_TO_ADDR
// uc_side = 0 ;
18083: LD_ADDR_OWVAR 20
18087: PUSH
18088: LD_INT 0
18090: ST_TO_ADDR
// uc_nation = nation_nature ;
18091: LD_ADDR_OWVAR 21
18095: PUSH
18096: LD_INT 0
18098: ST_TO_ADDR
// hc_class = class_apeman ;
18099: LD_ADDR_OWVAR 28
18103: PUSH
18104: LD_INT 12
18106: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
18107: LD_ADDR_OWVAR 31
18111: PUSH
18112: LD_INT 2
18114: PPUSH
18115: LD_INT 7
18117: PPUSH
18118: CALL_OW 12
18122: PUSH
18123: LD_OWVAR 67
18127: PLUS
18128: PUSH
18129: LD_INT 2
18131: PPUSH
18132: LD_INT 10
18134: PPUSH
18135: CALL_OW 12
18139: PUSH
18140: LD_INT 2
18142: PPUSH
18143: LD_INT 10
18145: PPUSH
18146: CALL_OW 12
18150: PUSH
18151: LD_INT 2
18153: PPUSH
18154: LD_INT 10
18156: PPUSH
18157: CALL_OW 12
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
18168: LD_ADDR_OWVAR 35
18172: PUSH
18173: LD_INT 5
18175: NEG
18176: PPUSH
18177: LD_INT 5
18179: PPUSH
18180: CALL_OW 12
18184: PUSH
18185: LD_OWVAR 67
18189: MUL
18190: ST_TO_ADDR
// un = CreateHuman ;
18191: LD_ADDR_VAR 0 3
18195: PUSH
18196: CALL_OW 44
18200: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
18201: LD_VAR 0 3
18205: PPUSH
18206: LD_INT 5
18208: PPUSH
18209: LD_INT 0
18211: PPUSH
18212: CALL_OW 49
// end ;
18216: GO 18072
18218: POP
18219: POP
// for i = 1 to Difficulty + 2 do
18220: LD_ADDR_VAR 0 2
18224: PUSH
18225: DOUBLE
18226: LD_INT 1
18228: DEC
18229: ST_TO_ADDR
18230: LD_OWVAR 67
18234: PUSH
18235: LD_INT 2
18237: PLUS
18238: PUSH
18239: FOR_TO
18240: IFFALSE 18349
// begin hc_sex = sex_male ;
18242: LD_ADDR_OWVAR 27
18246: PUSH
18247: LD_INT 1
18249: ST_TO_ADDR
// uc_side = 0 ;
18250: LD_ADDR_OWVAR 20
18254: PUSH
18255: LD_INT 0
18257: ST_TO_ADDR
// uc_nation = nation_nature ;
18258: LD_ADDR_OWVAR 21
18262: PUSH
18263: LD_INT 0
18265: ST_TO_ADDR
// hc_class = class_tiger ;
18266: LD_ADDR_OWVAR 28
18270: PUSH
18271: LD_INT 14
18273: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
18274: LD_ADDR_OWVAR 31
18278: PUSH
18279: LD_EXP 32
18283: PUSH
18284: LD_INT 0
18286: PUSH
18287: LD_INT 0
18289: PUSH
18290: LD_INT 0
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
18299: LD_ADDR_OWVAR 35
18303: PUSH
18304: LD_INT 5
18306: NEG
18307: PPUSH
18308: LD_INT 5
18310: PPUSH
18311: CALL_OW 12
18315: PUSH
18316: LD_OWVAR 67
18320: MUL
18321: ST_TO_ADDR
// un = CreateHuman ;
18322: LD_ADDR_VAR 0 3
18326: PUSH
18327: CALL_OW 44
18331: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
18332: LD_VAR 0 3
18336: PPUSH
18337: LD_INT 6
18339: PPUSH
18340: LD_INT 0
18342: PPUSH
18343: CALL_OW 49
// end ;
18347: GO 18239
18349: POP
18350: POP
// for i = 1 to rand ( 3 , 4 ) do
18351: LD_ADDR_VAR 0 2
18355: PUSH
18356: DOUBLE
18357: LD_INT 1
18359: DEC
18360: ST_TO_ADDR
18361: LD_INT 3
18363: PPUSH
18364: LD_INT 4
18366: PPUSH
18367: CALL_OW 12
18371: PUSH
18372: FOR_TO
18373: IFFALSE 18467
// begin hc_sex = sex_male ;
18375: LD_ADDR_OWVAR 27
18379: PUSH
18380: LD_INT 1
18382: ST_TO_ADDR
// uc_side = 0 ;
18383: LD_ADDR_OWVAR 20
18387: PUSH
18388: LD_INT 0
18390: ST_TO_ADDR
// uc_nation = nation_nature ;
18391: LD_ADDR_OWVAR 21
18395: PUSH
18396: LD_INT 0
18398: ST_TO_ADDR
// hc_class = 18 ;
18399: LD_ADDR_OWVAR 28
18403: PUSH
18404: LD_INT 18
18406: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
18407: LD_ADDR_OWVAR 31
18411: PUSH
18412: LD_EXP 32
18416: PUSH
18417: LD_INT 0
18419: PUSH
18420: LD_INT 0
18422: PUSH
18423: LD_INT 0
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: ST_TO_ADDR
// hc_agressivity = 0 ;
18432: LD_ADDR_OWVAR 35
18436: PUSH
18437: LD_INT 0
18439: ST_TO_ADDR
// un = CreateHuman ;
18440: LD_ADDR_VAR 0 3
18444: PUSH
18445: CALL_OW 44
18449: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
18450: LD_VAR 0 3
18454: PPUSH
18455: LD_INT 6
18457: PPUSH
18458: LD_INT 0
18460: PPUSH
18461: CALL_OW 49
// end ;
18465: GO 18372
18467: POP
18468: POP
// end ; end_of_file
18469: LD_VAR 0 1
18473: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
18474: LD_EXP 41
18478: PUSH
18479: LD_INT 1
18481: EQUAL
18482: IFFALSE 18584
18484: GO 18486
18486: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
18487: LD_INT 7
18489: PPUSH
18490: LD_INT 5
18492: PPUSH
18493: LD_INT 4
18495: PPUSH
18496: LD_INT 6
18498: PPUSH
18499: CALL_OW 12
18503: PUSH
18504: LD_INT 6
18506: PPUSH
18507: LD_INT 8
18509: PPUSH
18510: CALL_OW 12
18514: PUSH
18515: LD_INT 7
18517: PPUSH
18518: LD_INT 9
18520: PPUSH
18521: CALL_OW 12
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: LIST
18530: PPUSH
18531: LD_EXP 31
18535: PPUSH
18536: LD_EXP 32
18540: PPUSH
18541: CALL_OW 12
18545: PPUSH
18546: LD_INT 2
18548: PPUSH
18549: LD_INT 1
18551: PPUSH
18552: LD_INT 1
18554: PPUSH
18555: EMPTY
18556: PPUSH
18557: LD_INT 25
18559: PUSH
18560: LD_INT 26
18562: PUSH
18563: LD_INT 27
18565: PUSH
18566: LD_INT 28
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: PPUSH
18575: EMPTY
18576: PPUSH
18577: LD_INT 1
18579: PPUSH
18580: CALL 10325 0 11
18584: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
18585: LD_EXP 41
18589: PUSH
18590: LD_INT 1
18592: EQUAL
18593: IFFALSE 18729
18595: GO 18597
18597: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
18598: LD_INT 5
18600: PPUSH
18601: LD_INT 2
18603: PPUSH
18604: LD_INT 7
18606: PPUSH
18607: LD_INT 9
18609: PPUSH
18610: CALL_OW 12
18614: PUSH
18615: LD_INT 8
18617: PPUSH
18618: LD_INT 10
18620: PPUSH
18621: CALL_OW 12
18625: PUSH
18626: LD_INT 9
18628: PPUSH
18629: LD_INT 12
18631: PPUSH
18632: CALL_OW 12
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: PUSH
18642: LD_OWVAR 67
18646: ARRAY
18647: PPUSH
18648: LD_INT 0
18650: PPUSH
18651: LD_INT 0
18653: PPUSH
18654: LD_INT 3
18656: PPUSH
18657: LD_INT 4
18659: PPUSH
18660: CALL_OW 12
18664: PUSH
18665: LD_INT 4
18667: PPUSH
18668: LD_INT 5
18670: PPUSH
18671: CALL_OW 12
18675: PUSH
18676: LD_INT 5
18678: PPUSH
18679: LD_INT 6
18681: PPUSH
18682: CALL_OW 12
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: LD_OWVAR 67
18696: ARRAY
18697: PPUSH
18698: LD_INT 5
18700: PPUSH
18701: LD_EXP 31
18705: PPUSH
18706: LD_EXP 32
18710: PPUSH
18711: CALL_OW 12
18715: PPUSH
18716: LD_INT 7
18718: PPUSH
18719: LD_INT 9
18721: PPUSH
18722: LD_INT 1
18724: PPUSH
18725: CALL 12045 0 11
18729: END
// every 0 0$30 trigger joinEpsilon = 1 do
18730: LD_EXP 24
18734: PUSH
18735: LD_INT 1
18737: EQUAL
18738: IFFALSE 18800
18740: GO 18742
18742: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
18743: LD_INT 6
18745: PPUSH
18746: LD_INT 3
18748: PPUSH
18749: LD_INT 5
18751: PPUSH
18752: LD_INT 8
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: LD_INT 0
18762: PPUSH
18763: LD_INT 0
18765: PPUSH
18766: LD_INT 0
18768: PPUSH
18769: LD_INT 0
18771: PPUSH
18772: LD_EXP 31
18776: PPUSH
18777: LD_EXP 32
18781: PPUSH
18782: CALL_OW 12
18786: PPUSH
18787: LD_INT 17
18789: PPUSH
18790: LD_INT 18
18792: PPUSH
18793: LD_INT 1
18795: PPUSH
18796: CALL 12045 0 11
18800: END
// every 0 0$30 trigger joinEpsilon = 1 do
18801: LD_EXP 24
18805: PUSH
18806: LD_INT 1
18808: EQUAL
18809: IFFALSE 18891
18811: GO 18813
18813: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
18814: LD_INT 17
18816: PPUSH
18817: LD_INT 6
18819: PPUSH
18820: LD_INT 1
18822: PPUSH
18823: LD_INT 3
18825: PPUSH
18826: CALL_OW 12
18830: PPUSH
18831: LD_EXP 31
18835: PPUSH
18836: LD_EXP 32
18840: PPUSH
18841: CALL_OW 12
18845: PPUSH
18846: LD_INT 3
18848: PPUSH
18849: LD_INT 1
18851: PPUSH
18852: LD_INT 1
18854: PUSH
18855: LD_INT 3
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PPUSH
18862: LD_INT 43
18864: PUSH
18865: LD_INT 44
18867: PUSH
18868: LD_INT 45
18870: PUSH
18871: LD_INT 46
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: PPUSH
18880: EMPTY
18881: PPUSH
18882: EMPTY
18883: PPUSH
18884: LD_INT 1
18886: PPUSH
18887: CALL 10325 0 11
18891: END
// every 6 6$30 trigger joinEpsilon = 1 do
18892: LD_EXP 24
18896: PUSH
18897: LD_INT 1
18899: EQUAL
18900: IFFALSE 18970
18902: GO 18904
18904: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 5 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
18905: LD_INT 6
18907: PPUSH
18908: LD_INT 3
18910: PPUSH
18911: LD_INT 5
18913: PPUSH
18914: LD_INT 8
18916: PPUSH
18917: CALL_OW 12
18921: PPUSH
18922: LD_INT 0
18924: PPUSH
18925: LD_INT 3
18927: PPUSH
18928: LD_INT 5
18930: PPUSH
18931: CALL_OW 12
18935: PPUSH
18936: LD_INT 0
18938: PPUSH
18939: LD_INT 6
18941: PPUSH
18942: LD_EXP 31
18946: PPUSH
18947: LD_EXP 32
18951: PPUSH
18952: CALL_OW 12
18956: PPUSH
18957: LD_INT 17
18959: PPUSH
18960: LD_INT 18
18962: PPUSH
18963: LD_INT 1
18965: PPUSH
18966: CALL 12045 0 11
18970: END
// every 6 6$30 trigger joinEpsilon = 1 do
18971: LD_EXP 24
18975: PUSH
18976: LD_INT 1
18978: EQUAL
18979: IFFALSE 19061
18981: GO 18983
18983: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 3 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
18984: LD_INT 17
18986: PPUSH
18987: LD_INT 6
18989: PPUSH
18990: LD_INT 3
18992: PPUSH
18993: LD_INT 5
18995: PPUSH
18996: CALL_OW 12
19000: PPUSH
19001: LD_EXP 31
19005: PPUSH
19006: LD_EXP 32
19010: PPUSH
19011: CALL_OW 12
19015: PPUSH
19016: LD_INT 3
19018: PPUSH
19019: LD_INT 1
19021: PPUSH
19022: LD_INT 1
19024: PUSH
19025: LD_INT 3
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PPUSH
19032: LD_INT 43
19034: PUSH
19035: LD_INT 44
19037: PUSH
19038: LD_INT 45
19040: PUSH
19041: LD_INT 46
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: PPUSH
19050: EMPTY
19051: PPUSH
19052: EMPTY
19053: PPUSH
19054: LD_INT 1
19056: PPUSH
19057: CALL 10325 0 11
19061: END
// every 15 15$30 trigger joinEpsilon = 1 do
19062: LD_EXP 24
19066: PUSH
19067: LD_INT 1
19069: EQUAL
19070: IFFALSE 19140
19072: GO 19074
19074: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
19075: LD_INT 6
19077: PPUSH
19078: LD_INT 3
19080: PPUSH
19081: LD_INT 7
19083: PPUSH
19084: LD_INT 10
19086: PPUSH
19087: CALL_OW 12
19091: PPUSH
19092: LD_INT 0
19094: PPUSH
19095: LD_INT 3
19097: PPUSH
19098: LD_INT 8
19100: PPUSH
19101: CALL_OW 12
19105: PPUSH
19106: LD_INT 0
19108: PPUSH
19109: LD_INT 6
19111: PPUSH
19112: LD_EXP 31
19116: PPUSH
19117: LD_EXP 32
19121: PPUSH
19122: CALL_OW 12
19126: PPUSH
19127: LD_INT 17
19129: PPUSH
19130: LD_INT 18
19132: PPUSH
19133: LD_INT 1
19135: PPUSH
19136: CALL 12045 0 11
19140: END
// every 15 15$30 trigger joinEpsilon = 1 do
19141: LD_EXP 24
19145: PUSH
19146: LD_INT 1
19148: EQUAL
19149: IFFALSE 19231
19151: GO 19153
19153: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
19154: LD_INT 17
19156: PPUSH
19157: LD_INT 6
19159: PPUSH
19160: LD_INT 5
19162: PPUSH
19163: LD_INT 8
19165: PPUSH
19166: CALL_OW 12
19170: PPUSH
19171: LD_EXP 31
19175: PPUSH
19176: LD_EXP 32
19180: PPUSH
19181: CALL_OW 12
19185: PPUSH
19186: LD_INT 3
19188: PPUSH
19189: LD_INT 1
19191: PPUSH
19192: LD_INT 1
19194: PUSH
19195: LD_INT 3
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PPUSH
19202: LD_INT 43
19204: PUSH
19205: LD_INT 44
19207: PUSH
19208: LD_INT 45
19210: PUSH
19211: LD_INT 46
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: PPUSH
19220: EMPTY
19221: PPUSH
19222: EMPTY
19223: PPUSH
19224: LD_INT 1
19226: PPUSH
19227: CALL 10325 0 11
19231: END
// every 27 27$30 trigger joinEpsilon = 1 do
19232: LD_EXP 24
19236: PUSH
19237: LD_INT 1
19239: EQUAL
19240: IFFALSE 19310
19242: GO 19244
19244: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
19245: LD_INT 6
19247: PPUSH
19248: LD_INT 3
19250: PPUSH
19251: LD_INT 7
19253: PPUSH
19254: LD_INT 10
19256: PPUSH
19257: CALL_OW 12
19261: PPUSH
19262: LD_INT 0
19264: PPUSH
19265: LD_INT 3
19267: PPUSH
19268: LD_INT 8
19270: PPUSH
19271: CALL_OW 12
19275: PPUSH
19276: LD_INT 0
19278: PPUSH
19279: LD_INT 6
19281: PPUSH
19282: LD_EXP 31
19286: PPUSH
19287: LD_EXP 32
19291: PPUSH
19292: CALL_OW 12
19296: PPUSH
19297: LD_INT 17
19299: PPUSH
19300: LD_INT 18
19302: PPUSH
19303: LD_INT 1
19305: PPUSH
19306: CALL 12045 0 11
19310: END
// every 27 27$30 trigger joinEpsilon = 1 do
19311: LD_EXP 24
19315: PUSH
19316: LD_INT 1
19318: EQUAL
19319: IFFALSE 19401
19321: GO 19323
19323: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
19324: LD_INT 17
19326: PPUSH
19327: LD_INT 6
19329: PPUSH
19330: LD_INT 5
19332: PPUSH
19333: LD_INT 8
19335: PPUSH
19336: CALL_OW 12
19340: PPUSH
19341: LD_EXP 31
19345: PPUSH
19346: LD_EXP 32
19350: PPUSH
19351: CALL_OW 12
19355: PPUSH
19356: LD_INT 3
19358: PPUSH
19359: LD_INT 1
19361: PPUSH
19362: LD_INT 1
19364: PUSH
19365: LD_INT 3
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PPUSH
19372: LD_INT 43
19374: PUSH
19375: LD_INT 44
19377: PUSH
19378: LD_INT 45
19380: PUSH
19381: LD_INT 46
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: PPUSH
19390: EMPTY
19391: PPUSH
19392: EMPTY
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: CALL 10325 0 11
19401: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] do
19402: LD_INT 54
19404: PPUSH
19405: LD_INT 1
19407: PPUSH
19408: CALL_OW 321
19412: PUSH
19413: LD_INT 2
19415: EQUAL
19416: PUSH
19417: LD_INT 55
19419: PPUSH
19420: LD_INT 1
19422: PPUSH
19423: CALL_OW 321
19427: PUSH
19428: LD_INT 2
19430: EQUAL
19431: AND
19432: PUSH
19433: LD_INT 21
19435: PPUSH
19436: LD_INT 1
19438: PPUSH
19439: CALL_OW 321
19443: PUSH
19444: LD_INT 2
19446: EQUAL
19447: AND
19448: PUSH
19449: LD_INT 22
19451: PPUSH
19452: LD_INT 1
19454: PPUSH
19455: CALL_OW 321
19459: PUSH
19460: LD_INT 2
19462: EQUAL
19463: AND
19464: PUSH
19465: LD_INT 12
19467: PPUSH
19468: LD_INT 1
19470: PPUSH
19471: CALL_OW 321
19475: PUSH
19476: LD_INT 1
19478: EQUAL
19479: PUSH
19480: LD_INT 32
19482: PPUSH
19483: LD_INT 1
19485: PPUSH
19486: CALL_OW 321
19490: PUSH
19491: LD_INT 1
19493: EQUAL
19494: OR
19495: PUSH
19496: EMPTY
19497: LIST
19498: AND
19499: IFFALSE 19539
19501: GO 19503
19503: DISABLE
// begin case query ( QEndMission ) of 1 :
19504: LD_STRING QEndMission
19506: PPUSH
19507: CALL_OW 97
19511: PUSH
19512: LD_INT 1
19514: DOUBLE
19515: EQUAL
19516: IFTRUE 19520
19518: GO 19523
19520: POP
// begin end ; 2 :
19521: GO 19539
19523: LD_INT 2
19525: DOUBLE
19526: EQUAL
19527: IFTRUE 19531
19529: GO 19538
19531: POP
// begin FinishMission ;
19532: CALL 19644 0 0
// end ; end ;
19536: GO 19539
19538: POP
// end ;
19539: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched do
19540: LD_INT 54
19542: PPUSH
19543: LD_INT 1
19545: PPUSH
19546: CALL_OW 321
19550: PUSH
19551: LD_INT 2
19553: EQUAL
19554: PUSH
19555: LD_INT 55
19557: PPUSH
19558: LD_INT 1
19560: PPUSH
19561: CALL_OW 321
19565: PUSH
19566: LD_INT 2
19568: EQUAL
19569: AND
19570: PUSH
19571: LD_INT 21
19573: PPUSH
19574: LD_INT 1
19576: PPUSH
19577: CALL_OW 321
19581: PUSH
19582: LD_INT 2
19584: EQUAL
19585: AND
19586: PUSH
19587: LD_INT 22
19589: PPUSH
19590: LD_INT 1
19592: PPUSH
19593: CALL_OW 321
19597: PUSH
19598: LD_INT 2
19600: EQUAL
19601: AND
19602: PUSH
19603: LD_INT 12
19605: PPUSH
19606: LD_INT 1
19608: PPUSH
19609: CALL_OW 321
19613: PUSH
19614: LD_INT 2
19616: EQUAL
19617: AND
19618: PUSH
19619: LD_INT 32
19621: PPUSH
19622: LD_INT 1
19624: PPUSH
19625: CALL_OW 321
19629: PUSH
19630: LD_INT 2
19632: EQUAL
19633: AND
19634: IFFALSE 19643
19636: GO 19638
19638: DISABLE
// FinishMission ;
19639: CALL 19644 0 0
19643: END
// export function FinishMission ; begin
19644: LD_INT 0
19646: PPUSH
// if GetTech ( tech_LasSight , 1 ) = state_researched then
19647: LD_INT 12
19649: PPUSH
19650: LD_INT 1
19652: PPUSH
19653: CALL_OW 321
19657: PUSH
19658: LD_INT 2
19660: EQUAL
19661: IFFALSE 19675
// begin AddMedal ( sights , 1 ) ;
19663: LD_STRING sights
19665: PPUSH
19666: LD_INT 1
19668: PPUSH
19669: CALL_OW 101
// end else
19673: GO 19686
// begin AddMedal ( sights , - 1 ) ;
19675: LD_STRING sights
19677: PPUSH
19678: LD_INT 1
19680: NEG
19681: PPUSH
19682: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
19686: LD_INT 32
19688: PPUSH
19689: LD_INT 1
19691: PPUSH
19692: CALL_OW 321
19696: PUSH
19697: LD_INT 2
19699: EQUAL
19700: IFFALSE 19714
// begin AddMedal ( computers , 1 ) ;
19702: LD_STRING computers
19704: PPUSH
19705: LD_INT 1
19707: PPUSH
19708: CALL_OW 101
// end else
19712: GO 19725
// begin AddMedal ( computers , - 1 ) ;
19714: LD_STRING computers
19716: PPUSH
19717: LD_INT 1
19719: NEG
19720: PPUSH
19721: CALL_OW 101
// end ; if arabianEscape = 0 then
19725: LD_EXP 42
19729: PUSH
19730: LD_INT 0
19732: EQUAL
19733: IFFALSE 19767
// begin AddMedal ( renegades , 2 ) ;
19735: LD_STRING renegades
19737: PPUSH
19738: LD_INT 2
19740: PPUSH
19741: CALL_OW 101
// SaveVariable ( 0 , 10_GensherEscape_1 ) ;
19745: LD_INT 0
19747: PPUSH
19748: LD_STRING 10_GensherEscape_1
19750: PPUSH
19751: CALL_OW 39
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
19755: LD_INT 0
19757: PPUSH
19758: LD_STRING 10_ScientistsEscape_1
19760: PPUSH
19761: CALL_OW 39
// end else
19765: GO 19778
// begin AddMedal ( renegades , - 1 ) ;
19767: LD_STRING renegades
19769: PPUSH
19770: LD_INT 1
19772: NEG
19773: PPUSH
19774: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19778: LD_STRING Main
19780: PPUSH
19781: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
19785: LD_INT 22
19787: PUSH
19788: LD_INT 1
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: PUSH
19795: LD_INT 23
19797: PUSH
19798: LD_INT 1
19800: PUSH
19801: EMPTY
19802: LIST
19803: LIST
19804: PUSH
19805: LD_INT 21
19807: PUSH
19808: LD_INT 1
19810: PUSH
19811: EMPTY
19812: LIST
19813: LIST
19814: PUSH
19815: LD_INT 2
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 1
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 25
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 25
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 25
19850: PUSH
19851: LD_INT 4
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: PUSH
19858: LD_INT 25
19860: PUSH
19861: LD_INT 5
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: PPUSH
19882: CALL_OW 69
19886: PPUSH
19887: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19891: LD_EXP 1
19895: PPUSH
19896: LD_EXP 43
19900: PUSH
19901: LD_STRING JMM
19903: STR
19904: PPUSH
19905: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
19909: LD_EXP 2
19913: PPUSH
19914: LD_EXP 43
19918: PUSH
19919: LD_STRING Brown
19921: STR
19922: PPUSH
19923: CALL 5808 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19927: LD_EXP 3
19931: PPUSH
19932: LD_EXP 43
19936: PUSH
19937: LD_STRING Donaldson
19939: STR
19940: PPUSH
19941: CALL 5808 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19945: LD_EXP 4
19949: PPUSH
19950: LD_EXP 43
19954: PUSH
19955: LD_STRING Bobby
19957: STR
19958: PPUSH
19959: CALL 5808 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19963: LD_EXP 5
19967: PPUSH
19968: LD_EXP 43
19972: PUSH
19973: LD_STRING Cyrus
19975: STR
19976: PPUSH
19977: CALL 5808 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19981: LD_EXP 6
19985: PPUSH
19986: LD_EXP 43
19990: PUSH
19991: LD_STRING Lisa
19993: STR
19994: PPUSH
19995: CALL 5808 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
19999: LD_EXP 7
20003: PPUSH
20004: LD_EXP 43
20008: PUSH
20009: LD_STRING Frank
20011: STR
20012: PPUSH
20013: CALL 5808 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
20017: LD_EXP 15
20021: PPUSH
20022: LD_EXP 43
20026: PUSH
20027: LD_STRING Gladstone
20029: STR
20030: PPUSH
20031: CALL 5808 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
20035: LD_EXP 8
20039: PPUSH
20040: LD_EXP 43
20044: PUSH
20045: LD_STRING Kikuchi
20047: STR
20048: PPUSH
20049: CALL 5808 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
20053: LD_EXP 12
20057: PPUSH
20058: LD_EXP 43
20062: PUSH
20063: LD_STRING Denis
20065: STR
20066: PPUSH
20067: CALL 5808 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
20071: LD_EXP 13
20075: PPUSH
20076: LD_EXP 43
20080: PUSH
20081: LD_STRING Joan
20083: STR
20084: PPUSH
20085: CALL 5808 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
20089: LD_EXP 9
20093: PPUSH
20094: LD_EXP 43
20098: PUSH
20099: LD_STRING Houten
20101: STR
20102: PPUSH
20103: CALL 5808 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
20107: LD_EXP 11
20111: PPUSH
20112: LD_EXP 43
20116: PUSH
20117: LD_STRING Simms
20119: STR
20120: PPUSH
20121: CALL 5808 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
20125: LD_EXP 10
20129: PPUSH
20130: LD_EXP 43
20134: PUSH
20135: LD_STRING Gary
20137: STR
20138: PPUSH
20139: CALL 5808 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary ] , 10_other_survivors ) ;
20143: LD_INT 50
20145: PUSH
20146: EMPTY
20147: LIST
20148: PUSH
20149: LD_INT 22
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 21
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 2
20171: PUSH
20172: LD_INT 25
20174: PUSH
20175: LD_INT 1
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: LD_INT 25
20184: PUSH
20185: LD_INT 2
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: PUSH
20192: LD_INT 25
20194: PUSH
20195: LD_INT 3
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PUSH
20202: LD_INT 25
20204: PUSH
20205: LD_INT 4
20207: PUSH
20208: EMPTY
20209: LIST
20210: LIST
20211: PUSH
20212: EMPTY
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 69
20229: PUSH
20230: LD_EXP 1
20234: PUSH
20235: LD_EXP 2
20239: PUSH
20240: LD_EXP 3
20244: PUSH
20245: LD_EXP 4
20249: PUSH
20250: LD_EXP 5
20254: PUSH
20255: LD_EXP 6
20259: PUSH
20260: LD_EXP 7
20264: PUSH
20265: LD_EXP 15
20269: PUSH
20270: LD_EXP 8
20274: PUSH
20275: LD_EXP 12
20279: PUSH
20280: LD_EXP 13
20284: PUSH
20285: LD_EXP 9
20289: PUSH
20290: LD_EXP 11
20294: PUSH
20295: LD_EXP 10
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: DIFF
20316: PPUSH
20317: LD_STRING 10_other_survivors
20319: PPUSH
20320: CALL_OW 38
// YouWin ;
20324: CALL_OW 103
// end ; end_of_file
20328: LD_VAR 0 1
20332: RET
// every 0 0$1 trigger IsDead ( JMM ) do
20333: LD_EXP 1
20337: PPUSH
20338: CALL_OW 301
20342: IFFALSE 20354
20344: GO 20346
20346: DISABLE
// YouLost ( JMM ) ; end_of_file
20347: LD_STRING JMM
20349: PPUSH
20350: CALL_OW 104
20354: END
// every 1 1$30 do
20355: GO 20357
20357: DISABLE
// begin enable ;
20358: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20359: LD_INT 3
20361: PPUSH
20362: LD_INT 5
20364: PPUSH
20365: CALL_OW 12
20369: PPUSH
20370: LD_INT 16
20372: PPUSH
20373: LD_INT 1
20375: PPUSH
20376: CALL_OW 55
// end ;
20380: END
