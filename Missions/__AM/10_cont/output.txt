// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 26
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 36
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 37
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 38
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// ruPossition = 0 ;
  47: LD_ADDR_EXP 39
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  55: LD_ADDR_EXP 40
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// arabianEscape = 0 ;
  62: LD_ADDR_EXP 45
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  70: LD_ADDR_EXP 44
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// arabianDefeated = 0 ;
  78: LD_ADDR_EXP 46
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// arabianTrait = 0 ;
  86: LD_ADDR_EXP 47
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// eventVar1 = 0 ;
  94: LD_ADDR_EXP 53
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// eventVar2 = 0 ;
 102: LD_ADDR_EXP 54
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// fastEnd = 0 ;
 110: LD_ADDR_EXP 52
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// KhatamStatus = 0 ;
 118: LD_ADDR_EXP 48
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// cratesSpawned = 0 ;
 126: LD_ADDR_EXP 51
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// mission_prefix := 10_ ;
 134: LD_ADDR_EXP 49
 138: PUSH
 139: LD_STRING 10_
 141: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 142: LD_ADDR_EXP 50
 146: PUSH
 147: LD_STRING 09_
 149: ST_TO_ADDR
// debugMode = 0 ;
 150: LD_ADDR_EXP 55
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// PrepareDifficulty ;
 158: CALL 8729 0 0
// PrepareVehicles ;
 162: CALL 2695 0 0
// PrepareJMMTeam ;
 166: CALL 512 0 0
// PrepareCathyTeam ;
 170: CALL 2960 0 0
// PrepareArabianCommander ;
 174: CALL 4289 0 0
// PrepareArabian ;
 178: CALL 4341 0 0
// BuildArabianBase ;
 182: CALL 11327 0 0
// PrepareNature ;
 186: CALL 21698 0 0
// TameApemans ;
 190: CALL 16901 0 0
// end ;
 194: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 195: LD_EXP 55
 199: PUSH
 200: LD_INT 1
 202: EQUAL
 203: IFFALSE 509
 205: GO 207
 207: DISABLE
 208: LD_INT 0
 210: PPUSH
// begin enable ;
 211: ENABLE
// fogoff ( true ) ;
 212: LD_INT 1
 214: PPUSH
 215: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 219: LD_ADDR_VAR 0 1
 223: PUSH
 224: LD_INT 22
 226: PUSH
 227: LD_INT 1
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 21
 236: PUSH
 237: LD_INT 1
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PUSH
 253: FOR_IN
 254: IFFALSE 270
// SetLives ( i , 1000 ) ;
 256: LD_VAR 0 1
 260: PPUSH
 261: LD_INT 1000
 263: PPUSH
 264: CALL_OW 234
 268: GO 253
 270: POP
 271: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 272: LD_ADDR_VAR 0 1
 276: PUSH
 277: LD_INT 22
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: EMPTY
 284: LIST
 285: LIST
 286: PUSH
 287: LD_INT 2
 289: PUSH
 290: LD_INT 30
 292: PUSH
 293: LD_INT 0
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PUSH
 300: LD_INT 30
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: LIST
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PPUSH
 319: CALL_OW 69
 323: PUSH
 324: FOR_IN
 325: IFFALSE 349
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 327: LD_VAR 0 1
 331: PPUSH
 332: CALL_OW 274
 336: PPUSH
 337: LD_INT 1
 339: PPUSH
 340: LD_INT 9999
 342: PPUSH
 343: CALL_OW 277
 347: GO 324
 349: POP
 350: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 351: LD_ADDR_VAR 0 1
 355: PUSH
 356: LD_INT 22
 358: PUSH
 359: LD_INT 1
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: PUSH
 366: LD_INT 2
 368: PUSH
 369: LD_INT 30
 371: PUSH
 372: LD_INT 0
 374: PUSH
 375: EMPTY
 376: LIST
 377: LIST
 378: PUSH
 379: LD_INT 30
 381: PUSH
 382: LD_INT 1
 384: PUSH
 385: EMPTY
 386: LIST
 387: LIST
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PPUSH
 398: CALL_OW 69
 402: PUSH
 403: FOR_IN
 404: IFFALSE 428
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 406: LD_VAR 0 1
 410: PPUSH
 411: CALL_OW 274
 415: PPUSH
 416: LD_INT 2
 418: PPUSH
 419: LD_INT 9999
 421: PPUSH
 422: CALL_OW 277
 426: GO 403
 428: POP
 429: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 430: LD_ADDR_VAR 0 1
 434: PUSH
 435: LD_INT 22
 437: PUSH
 438: LD_INT 1
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: LD_INT 2
 447: PUSH
 448: LD_INT 30
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: EMPTY
 455: LIST
 456: LIST
 457: PUSH
 458: LD_INT 30
 460: PUSH
 461: LD_INT 1
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PPUSH
 477: CALL_OW 69
 481: PUSH
 482: FOR_IN
 483: IFFALSE 507
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 485: LD_VAR 0 1
 489: PPUSH
 490: CALL_OW 274
 494: PPUSH
 495: LD_INT 3
 497: PPUSH
 498: LD_INT 9999
 500: PPUSH
 501: CALL_OW 277
 505: GO 482
 507: POP
 508: POP
// end ; end_of_file
 509: PPOPN 1
 511: END
// export function PrepareJMMTeam ; var i , j ; begin
 512: LD_INT 0
 514: PPUSH
 515: PPUSH
 516: PPUSH
// uc_side = 1 ;
 517: LD_ADDR_OWVAR 20
 521: PUSH
 522: LD_INT 1
 524: ST_TO_ADDR
// uc_nation = 1 ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_INT 1
 532: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 533: LD_ADDR_EXP 1
 537: PUSH
 538: LD_STRING 10_JMM
 540: PPUSH
 541: LD_INT 1
 543: PPUSH
 544: CALL 8465 0 2
 548: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 549: LD_ADDR_EXP 10
 553: PUSH
 554: LD_STRING 10_Gary
 556: PPUSH
 557: LD_INT 1
 559: PPUSH
 560: CALL 8465 0 2
 564: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 565: LD_ADDR_EXP 5
 569: PUSH
 570: LD_STRING 10_Cyrus
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 8465 0 2
 580: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 581: LD_ADDR_EXP 4
 585: PUSH
 586: LD_STRING 10_Bobby
 588: PPUSH
 589: LD_INT 1
 591: PPUSH
 592: CALL 8465 0 2
 596: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 597: LD_ADDR_EXP 6
 601: PUSH
 602: LD_STRING 10_Lisa
 604: PPUSH
 605: LD_INT 1
 607: PPUSH
 608: CALL 8465 0 2
 612: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 10_Kikuchi , true ) ;
 613: LD_ADDR_EXP 8
 617: PUSH
 618: LD_STRING 10_Kikuchi
 620: PPUSH
 621: LD_INT 1
 623: PPUSH
 624: CALL 8465 0 2
 628: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 629: LD_ADDR_EXP 2
 633: PUSH
 634: LD_STRING 10_Brown
 636: PPUSH
 637: LD_INT 1
 639: PPUSH
 640: CALL 8465 0 2
 644: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 645: LD_ADDR_EXP 3
 649: PUSH
 650: LD_STRING 10_Donaldson
 652: PPUSH
 653: LD_INT 1
 655: PPUSH
 656: CALL 8465 0 2
 660: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 661: LD_ADDR_EXP 7
 665: PUSH
 666: LD_STRING 10_Frank
 668: PPUSH
 669: LD_INT 1
 671: PPUSH
 672: CALL 8465 0 2
 676: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 677: LD_ADDR_EXP 9
 681: PUSH
 682: LD_STRING 10_Houten
 684: PPUSH
 685: LD_INT 1
 687: PPUSH
 688: CALL 8465 0 2
 692: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 693: LD_ADDR_EXP 20
 697: PUSH
 698: LD_STRING OthersIn10
 700: PPUSH
 701: CALL_OW 31
 705: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 706: LD_ADDR_EXP 23
 710: PUSH
 711: LD_STRING Powell
 713: PPUSH
 714: LD_INT 0
 716: PPUSH
 717: CALL 8465 0 2
 721: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 722: LD_EXP 1
 726: PPUSH
 727: LD_EXP 26
 731: PUSH
 732: LD_INT 1
 734: ARRAY
 735: PPUSH
 736: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 740: LD_EXP 10
 744: PPUSH
 745: LD_EXP 26
 749: PUSH
 750: LD_INT 2
 752: ARRAY
 753: PPUSH
 754: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 758: LD_EXP 10
 762: PPUSH
 763: CALL_OW 305
 767: NOT
 768: PUSH
 769: LD_EXP 2
 773: PPUSH
 774: CALL_OW 305
 778: NOT
 779: AND
 780: PUSH
 781: LD_EXP 26
 785: PUSH
 786: LD_INT 2
 788: ARRAY
 789: PPUSH
 790: CALL_OW 313
 794: PUSH
 795: EMPTY
 796: EQUAL
 797: AND
 798: IFFALSE 818
// PlaceHumanInUnit ( Brown , playerVehs [ 2 ] ) ;
 800: LD_EXP 2
 804: PPUSH
 805: LD_EXP 26
 809: PUSH
 810: LD_INT 2
 812: ARRAY
 813: PPUSH
 814: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 818: LD_EXP 10
 822: PPUSH
 823: CALL_OW 305
 827: NOT
 828: PUSH
 829: LD_EXP 3
 833: PPUSH
 834: CALL_OW 305
 838: NOT
 839: AND
 840: PUSH
 841: LD_EXP 26
 845: PUSH
 846: LD_INT 2
 848: ARRAY
 849: PPUSH
 850: CALL_OW 313
 854: PUSH
 855: EMPTY
 856: EQUAL
 857: AND
 858: IFFALSE 878
// PlaceHumanInUnit ( Donaldson , playerVehs [ 2 ] ) ;
 860: LD_EXP 3
 864: PPUSH
 865: LD_EXP 26
 869: PUSH
 870: LD_INT 2
 872: ARRAY
 873: PPUSH
 874: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 878: LD_EXP 10
 882: PPUSH
 883: CALL_OW 305
 887: NOT
 888: PUSH
 889: LD_EXP 7
 893: PPUSH
 894: CALL_OW 305
 898: NOT
 899: AND
 900: PUSH
 901: LD_EXP 26
 905: PUSH
 906: LD_INT 2
 908: ARRAY
 909: PPUSH
 910: CALL_OW 313
 914: PUSH
 915: EMPTY
 916: EQUAL
 917: AND
 918: IFFALSE 938
// PlaceHumanInUnit ( Frank , playerVehs [ 2 ] ) ;
 920: LD_EXP 7
 924: PPUSH
 925: LD_EXP 26
 929: PUSH
 930: LD_INT 2
 932: ARRAY
 933: PPUSH
 934: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 938: LD_EXP 10
 942: PPUSH
 943: CALL_OW 305
 947: NOT
 948: PUSH
 949: LD_EXP 9
 953: PPUSH
 954: CALL_OW 305
 958: NOT
 959: AND
 960: PUSH
 961: LD_EXP 26
 965: PUSH
 966: LD_INT 2
 968: ARRAY
 969: PPUSH
 970: CALL_OW 313
 974: PUSH
 975: EMPTY
 976: EQUAL
 977: AND
 978: IFFALSE 998
// PlaceHumanInUnit ( Houten , playerVehs [ 2 ] ) ;
 980: LD_EXP 9
 984: PPUSH
 985: LD_EXP 26
 989: PUSH
 990: LD_INT 2
 992: ARRAY
 993: PPUSH
 994: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 998: LD_EXP 5
1002: PPUSH
1003: LD_EXP 26
1007: PUSH
1008: LD_INT 3
1010: ARRAY
1011: PPUSH
1012: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1016: LD_EXP 5
1020: PPUSH
1021: CALL_OW 305
1025: NOT
1026: PUSH
1027: LD_EXP 2
1031: PPUSH
1032: CALL_OW 305
1036: NOT
1037: AND
1038: PUSH
1039: LD_EXP 26
1043: PUSH
1044: LD_INT 3
1046: ARRAY
1047: PPUSH
1048: CALL_OW 313
1052: PUSH
1053: EMPTY
1054: EQUAL
1055: AND
1056: IFFALSE 1076
// PlaceHumanInUnit ( Brown , playerVehs [ 3 ] ) ;
1058: LD_EXP 2
1062: PPUSH
1063: LD_EXP 26
1067: PUSH
1068: LD_INT 3
1070: ARRAY
1071: PPUSH
1072: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1076: LD_EXP 5
1080: PPUSH
1081: CALL_OW 305
1085: NOT
1086: PUSH
1087: LD_EXP 3
1091: PPUSH
1092: CALL_OW 305
1096: NOT
1097: AND
1098: PUSH
1099: LD_EXP 26
1103: PUSH
1104: LD_INT 3
1106: ARRAY
1107: PPUSH
1108: CALL_OW 313
1112: PUSH
1113: EMPTY
1114: EQUAL
1115: AND
1116: IFFALSE 1136
// PlaceHumanInUnit ( Donaldson , playerVehs [ 3 ] ) ;
1118: LD_EXP 3
1122: PPUSH
1123: LD_EXP 26
1127: PUSH
1128: LD_INT 3
1130: ARRAY
1131: PPUSH
1132: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1136: LD_EXP 5
1140: PPUSH
1141: CALL_OW 305
1145: NOT
1146: PUSH
1147: LD_EXP 7
1151: PPUSH
1152: CALL_OW 305
1156: NOT
1157: AND
1158: PUSH
1159: LD_EXP 26
1163: PUSH
1164: LD_INT 3
1166: ARRAY
1167: PPUSH
1168: CALL_OW 313
1172: PUSH
1173: EMPTY
1174: EQUAL
1175: AND
1176: IFFALSE 1196
// PlaceHumanInUnit ( Frank , playerVehs [ 3 ] ) ;
1178: LD_EXP 7
1182: PPUSH
1183: LD_EXP 26
1187: PUSH
1188: LD_INT 3
1190: ARRAY
1191: PPUSH
1192: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1196: LD_EXP 5
1200: PPUSH
1201: CALL_OW 305
1205: NOT
1206: PUSH
1207: LD_EXP 9
1211: PPUSH
1212: CALL_OW 305
1216: NOT
1217: AND
1218: PUSH
1219: LD_EXP 26
1223: PUSH
1224: LD_INT 3
1226: ARRAY
1227: PPUSH
1228: CALL_OW 313
1232: PUSH
1233: EMPTY
1234: EQUAL
1235: AND
1236: IFFALSE 1256
// PlaceHumanInUnit ( Houten , playerVehs [ 3 ] ) ;
1238: LD_EXP 9
1242: PPUSH
1243: LD_EXP 26
1247: PUSH
1248: LD_INT 3
1250: ARRAY
1251: PPUSH
1252: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
1256: LD_EXP 4
1260: PPUSH
1261: LD_EXP 26
1265: PUSH
1266: LD_INT 4
1268: ARRAY
1269: PPUSH
1270: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1274: LD_EXP 4
1278: PPUSH
1279: CALL_OW 305
1283: NOT
1284: PUSH
1285: LD_EXP 2
1289: PPUSH
1290: CALL_OW 305
1294: NOT
1295: AND
1296: PUSH
1297: LD_EXP 26
1301: PUSH
1302: LD_INT 4
1304: ARRAY
1305: PPUSH
1306: CALL_OW 313
1310: PUSH
1311: EMPTY
1312: EQUAL
1313: AND
1314: IFFALSE 1334
// PlaceHumanInUnit ( Brown , playerVehs [ 4 ] ) ;
1316: LD_EXP 2
1320: PPUSH
1321: LD_EXP 26
1325: PUSH
1326: LD_INT 4
1328: ARRAY
1329: PPUSH
1330: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1334: LD_EXP 4
1338: PPUSH
1339: CALL_OW 305
1343: NOT
1344: PUSH
1345: LD_EXP 3
1349: PPUSH
1350: CALL_OW 305
1354: NOT
1355: AND
1356: PUSH
1357: LD_EXP 26
1361: PUSH
1362: LD_INT 4
1364: ARRAY
1365: PPUSH
1366: CALL_OW 313
1370: PUSH
1371: EMPTY
1372: EQUAL
1373: AND
1374: IFFALSE 1394
// PlaceHumanInUnit ( Donaldson , playerVehs [ 4 ] ) ;
1376: LD_EXP 3
1380: PPUSH
1381: LD_EXP 26
1385: PUSH
1386: LD_INT 4
1388: ARRAY
1389: PPUSH
1390: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1394: LD_EXP 4
1398: PPUSH
1399: CALL_OW 305
1403: NOT
1404: PUSH
1405: LD_EXP 7
1409: PPUSH
1410: CALL_OW 305
1414: NOT
1415: AND
1416: PUSH
1417: LD_EXP 26
1421: PUSH
1422: LD_INT 4
1424: ARRAY
1425: PPUSH
1426: CALL_OW 313
1430: PUSH
1431: EMPTY
1432: EQUAL
1433: AND
1434: IFFALSE 1454
// PlaceHumanInUnit ( Frank , playerVehs [ 4 ] ) ;
1436: LD_EXP 7
1440: PPUSH
1441: LD_EXP 26
1445: PUSH
1446: LD_INT 4
1448: ARRAY
1449: PPUSH
1450: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1454: LD_EXP 4
1458: PPUSH
1459: CALL_OW 305
1463: NOT
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 305
1474: NOT
1475: AND
1476: PUSH
1477: LD_EXP 26
1481: PUSH
1482: LD_INT 4
1484: ARRAY
1485: PPUSH
1486: CALL_OW 313
1490: PUSH
1491: EMPTY
1492: EQUAL
1493: AND
1494: IFFALSE 1514
// PlaceHumanInUnit ( Houten , playerVehs [ 4 ] ) ;
1496: LD_EXP 9
1500: PPUSH
1501: LD_EXP 26
1505: PUSH
1506: LD_INT 4
1508: ARRAY
1509: PPUSH
1510: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
1514: LD_EXP 6
1518: PPUSH
1519: LD_EXP 26
1523: PUSH
1524: LD_INT 5
1526: ARRAY
1527: PPUSH
1528: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1532: LD_EXP 6
1536: PPUSH
1537: CALL_OW 305
1541: NOT
1542: PUSH
1543: LD_EXP 2
1547: PPUSH
1548: CALL_OW 305
1552: NOT
1553: AND
1554: PUSH
1555: LD_EXP 26
1559: PUSH
1560: LD_INT 5
1562: ARRAY
1563: PPUSH
1564: CALL_OW 313
1568: PUSH
1569: EMPTY
1570: EQUAL
1571: AND
1572: IFFALSE 1592
// PlaceHumanInUnit ( Brown , playerVehs [ 5 ] ) ;
1574: LD_EXP 2
1578: PPUSH
1579: LD_EXP 26
1583: PUSH
1584: LD_INT 5
1586: ARRAY
1587: PPUSH
1588: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1592: LD_EXP 6
1596: PPUSH
1597: CALL_OW 305
1601: NOT
1602: PUSH
1603: LD_EXP 3
1607: PPUSH
1608: CALL_OW 305
1612: NOT
1613: AND
1614: PUSH
1615: LD_EXP 26
1619: PUSH
1620: LD_INT 5
1622: ARRAY
1623: PPUSH
1624: CALL_OW 313
1628: PUSH
1629: EMPTY
1630: EQUAL
1631: AND
1632: IFFALSE 1652
// PlaceHumanInUnit ( Donaldson , playerVehs [ 5 ] ) ;
1634: LD_EXP 3
1638: PPUSH
1639: LD_EXP 26
1643: PUSH
1644: LD_INT 5
1646: ARRAY
1647: PPUSH
1648: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1652: LD_EXP 6
1656: PPUSH
1657: CALL_OW 305
1661: NOT
1662: PUSH
1663: LD_EXP 7
1667: PPUSH
1668: CALL_OW 305
1672: NOT
1673: AND
1674: PUSH
1675: LD_EXP 26
1679: PUSH
1680: LD_INT 5
1682: ARRAY
1683: PPUSH
1684: CALL_OW 313
1688: PUSH
1689: EMPTY
1690: EQUAL
1691: AND
1692: IFFALSE 1712
// PlaceHumanInUnit ( Frank , playerVehs [ 5 ] ) ;
1694: LD_EXP 7
1698: PPUSH
1699: LD_EXP 26
1703: PUSH
1704: LD_INT 5
1706: ARRAY
1707: PPUSH
1708: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1712: LD_EXP 6
1716: PPUSH
1717: CALL_OW 305
1721: NOT
1722: PUSH
1723: LD_EXP 9
1727: PPUSH
1728: CALL_OW 305
1732: NOT
1733: AND
1734: PUSH
1735: LD_EXP 26
1739: PUSH
1740: LD_INT 5
1742: ARRAY
1743: PPUSH
1744: CALL_OW 313
1748: PUSH
1749: EMPTY
1750: EQUAL
1751: AND
1752: IFFALSE 1772
// PlaceHumanInUnit ( Houten , playerVehs [ 5 ] ) ;
1754: LD_EXP 9
1758: PPUSH
1759: LD_EXP 26
1763: PUSH
1764: LD_INT 5
1766: ARRAY
1767: PPUSH
1768: CALL_OW 52
// if TestCharacters ( 08_Frank ) then
1772: LD_STRING 08_Frank
1774: PPUSH
1775: CALL_OW 28
1779: IFFALSE 1799
// PlaceHumanInUnit ( Kikuchi , playerVehs [ 6 ] ) ;
1781: LD_EXP 8
1785: PPUSH
1786: LD_EXP 26
1790: PUSH
1791: LD_INT 6
1793: ARRAY
1794: PPUSH
1795: CALL_OW 52
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1799: LD_INT 22
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: PUSH
1809: LD_INT 21
1811: PUSH
1812: LD_INT 1
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PPUSH
1823: CALL_OW 69
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: CALL_OW 336
// BonusVehicles ;
1835: CALL 2384 0 0
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
1839: LD_INT 22
1841: PUSH
1842: LD_INT 1
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: PUSH
1849: LD_INT 21
1851: PUSH
1852: LD_INT 2
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: PUSH
1859: LD_INT 58
1861: PUSH
1862: EMPTY
1863: LIST
1864: PUSH
1865: EMPTY
1866: LIST
1867: LIST
1868: LIST
1869: PPUSH
1870: CALL_OW 69
1874: PUSH
1875: LD_INT 0
1877: GREATER
1878: IFFALSE 1971
// begin for i in others10 do
1880: LD_ADDR_VAR 0 2
1884: PUSH
1885: LD_EXP 20
1889: PUSH
1890: FOR_IN
1891: IFFALSE 1969
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
1893: LD_ADDR_VAR 0 3
1897: PUSH
1898: LD_INT 22
1900: PUSH
1901: LD_INT 1
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: PUSH
1908: LD_INT 21
1910: PUSH
1911: LD_INT 2
1913: PUSH
1914: EMPTY
1915: LIST
1916: LIST
1917: PUSH
1918: LD_INT 58
1920: PUSH
1921: EMPTY
1922: LIST
1923: PUSH
1924: EMPTY
1925: LIST
1926: LIST
1927: LIST
1928: PPUSH
1929: CALL_OW 69
1933: PUSH
1934: FOR_IN
1935: IFFALSE 1965
// begin PlaceHumanInUnit ( i , j ) ;
1937: LD_VAR 0 2
1941: PPUSH
1942: LD_VAR 0 3
1946: PPUSH
1947: CALL_OW 52
// SetClass ( i , 1 ) ;
1951: LD_VAR 0 2
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: CALL_OW 336
// end ;
1963: GO 1934
1965: POP
1966: POP
// end ;
1967: GO 1890
1969: POP
1970: POP
// end ; if not IsPlaced ( Brown ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
1971: LD_EXP 2
1975: PPUSH
1976: CALL_OW 305
1980: NOT
1981: PUSH
1982: LD_INT 22
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 21
1994: PUSH
1995: LD_INT 2
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: LD_INT 58
2004: PUSH
2005: EMPTY
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: LIST
2012: PPUSH
2013: CALL_OW 69
2017: PUSH
2018: LD_INT 0
2020: GREATER
2021: AND
2022: IFFALSE 2073
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2024: LD_EXP 2
2028: PPUSH
2029: LD_INT 22
2031: PUSH
2032: LD_INT 1
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: PUSH
2039: LD_INT 21
2041: PUSH
2042: LD_INT 2
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 58
2051: PUSH
2052: EMPTY
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: LIST
2059: PPUSH
2060: CALL_OW 69
2064: PUSH
2065: LD_INT 1
2067: ARRAY
2068: PPUSH
2069: CALL_OW 52
// if not IsPlaced ( Donaldson ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
2073: LD_EXP 3
2077: PPUSH
2078: CALL_OW 305
2082: NOT
2083: PUSH
2084: LD_INT 22
2086: PUSH
2087: LD_INT 1
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: PUSH
2094: LD_INT 21
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 58
2106: PUSH
2107: EMPTY
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PPUSH
2115: CALL_OW 69
2119: PUSH
2120: LD_INT 0
2122: GREATER
2123: AND
2124: IFFALSE 2175
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2126: LD_EXP 3
2130: PPUSH
2131: LD_INT 22
2133: PUSH
2134: LD_INT 1
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 21
2143: PUSH
2144: LD_INT 2
2146: PUSH
2147: EMPTY
2148: LIST
2149: LIST
2150: PUSH
2151: LD_INT 58
2153: PUSH
2154: EMPTY
2155: LIST
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: LIST
2161: PPUSH
2162: CALL_OW 69
2166: PUSH
2167: LD_INT 1
2169: ARRAY
2170: PPUSH
2171: CALL_OW 52
// if not IsPlaced ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
2175: LD_EXP 7
2179: PPUSH
2180: CALL_OW 305
2184: NOT
2185: PUSH
2186: LD_INT 22
2188: PUSH
2189: LD_INT 1
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: PUSH
2196: LD_INT 21
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: LIST
2205: PUSH
2206: LD_INT 58
2208: PUSH
2209: EMPTY
2210: LIST
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: LIST
2216: PPUSH
2217: CALL_OW 69
2221: PUSH
2222: LD_INT 0
2224: GREATER
2225: AND
2226: IFFALSE 2277
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2228: LD_EXP 7
2232: PPUSH
2233: LD_INT 22
2235: PUSH
2236: LD_INT 1
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: LD_INT 21
2245: PUSH
2246: LD_INT 2
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: PUSH
2253: LD_INT 58
2255: PUSH
2256: EMPTY
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: LIST
2263: PPUSH
2264: CALL_OW 69
2268: PUSH
2269: LD_INT 1
2271: ARRAY
2272: PPUSH
2273: CALL_OW 52
// if not IsPlaced ( Houten ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
2277: LD_EXP 9
2281: PPUSH
2282: CALL_OW 305
2286: NOT
2287: PUSH
2288: LD_INT 22
2290: PUSH
2291: LD_INT 1
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: LD_INT 21
2300: PUSH
2301: LD_INT 2
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PUSH
2308: LD_INT 58
2310: PUSH
2311: EMPTY
2312: LIST
2313: PUSH
2314: EMPTY
2315: LIST
2316: LIST
2317: LIST
2318: PPUSH
2319: CALL_OW 69
2323: PUSH
2324: LD_INT 0
2326: GREATER
2327: AND
2328: IFFALSE 2379
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2330: LD_EXP 9
2334: PPUSH
2335: LD_INT 22
2337: PUSH
2338: LD_INT 1
2340: PUSH
2341: EMPTY
2342: LIST
2343: LIST
2344: PUSH
2345: LD_INT 21
2347: PUSH
2348: LD_INT 2
2350: PUSH
2351: EMPTY
2352: LIST
2353: LIST
2354: PUSH
2355: LD_INT 58
2357: PUSH
2358: EMPTY
2359: LIST
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: LIST
2365: PPUSH
2366: CALL_OW 69
2370: PUSH
2371: LD_INT 1
2373: ARRAY
2374: PPUSH
2375: CALL_OW 52
// end ;
2379: LD_VAR 0 1
2383: RET
// export function BonusVehicles ; var i , siberite , rnd , veh ; begin
2384: LD_INT 0
2386: PPUSH
2387: PPUSH
2388: PPUSH
2389: PPUSH
2390: PPUSH
// siberite = LoadVariable ( 09_SibRes , 0 ) ;
2391: LD_ADDR_VAR 0 3
2395: PUSH
2396: LD_STRING 09_SibRes
2398: PPUSH
2399: LD_INT 0
2401: PPUSH
2402: CALL_OW 30
2406: ST_TO_ADDR
// if siberite >= 200 then
2407: LD_VAR 0 3
2411: PUSH
2412: LD_INT 200
2414: GREATEREQUAL
2415: IFFALSE 2562
// begin for i := 1 to 2 do
2417: LD_ADDR_VAR 0 2
2421: PUSH
2422: DOUBLE
2423: LD_INT 1
2425: DEC
2426: ST_TO_ADDR
2427: LD_INT 2
2429: PUSH
2430: FOR_TO
2431: IFFALSE 2560
// begin rnd = Rand ( 1 , 10 ) * 10 ;
2433: LD_ADDR_VAR 0 4
2437: PUSH
2438: LD_INT 1
2440: PPUSH
2441: LD_INT 10
2443: PPUSH
2444: CALL_OW 12
2448: PUSH
2449: LD_INT 10
2451: MUL
2452: ST_TO_ADDR
// vc_engine = 1 ;
2453: LD_ADDR_OWVAR 39
2457: PUSH
2458: LD_INT 1
2460: ST_TO_ADDR
// vc_control = 1 ;
2461: LD_ADDR_OWVAR 38
2465: PUSH
2466: LD_INT 1
2468: ST_TO_ADDR
// vc_weapon = 12 ;
2469: LD_ADDR_OWVAR 40
2473: PUSH
2474: LD_INT 12
2476: ST_TO_ADDR
// vc_chassis = 3 ;
2477: LD_ADDR_OWVAR 37
2481: PUSH
2482: LD_INT 3
2484: ST_TO_ADDR
// veh = CreateVehicle ;
2485: LD_ADDR_VAR 0 5
2489: PUSH
2490: CALL_OW 45
2494: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2495: LD_VAR 0 5
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2507: LD_VAR 0 5
2511: PPUSH
2512: LD_INT 2
2514: PPUSH
2515: LD_INT 0
2517: PPUSH
2518: CALL_OW 49
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2522: LD_VAR 0 5
2526: PPUSH
2527: LD_INT 1
2529: PUSH
2530: LD_INT 3
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 1
2539: PPUSH
2540: LD_INT 2
2542: PPUSH
2543: CALL_OW 12
2547: ARRAY
2548: PPUSH
2549: LD_VAR 0 4
2553: PPUSH
2554: CALL_OW 291
// end ;
2558: GO 2430
2560: POP
2561: POP
// end ; if siberite > 200 then
2562: LD_VAR 0 3
2566: PUSH
2567: LD_INT 200
2569: GREATER
2570: IFFALSE 2690
// begin for i := 1 to siberite / 100 do
2572: LD_ADDR_VAR 0 2
2576: PUSH
2577: DOUBLE
2578: LD_INT 1
2580: DEC
2581: ST_TO_ADDR
2582: LD_VAR 0 3
2586: PUSH
2587: LD_INT 100
2589: DIVREAL
2590: PUSH
2591: FOR_TO
2592: IFFALSE 2688
// begin vc_engine = 1 ;
2594: LD_ADDR_OWVAR 39
2598: PUSH
2599: LD_INT 1
2601: ST_TO_ADDR
// vc_control = 1 ;
2602: LD_ADDR_OWVAR 38
2606: PUSH
2607: LD_INT 1
2609: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2610: LD_ADDR_OWVAR 40
2614: PUSH
2615: LD_INT 3
2617: PUSH
2618: LD_INT 4
2620: PUSH
2621: LD_INT 5
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 1
2631: PPUSH
2632: LD_INT 3
2634: PPUSH
2635: CALL_OW 12
2639: ARRAY
2640: ST_TO_ADDR
// vc_chassis = 3 ;
2641: LD_ADDR_OWVAR 37
2645: PUSH
2646: LD_INT 3
2648: ST_TO_ADDR
// veh = CreateVehicle ;
2649: LD_ADDR_VAR 0 5
2653: PUSH
2654: CALL_OW 45
2658: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2659: LD_VAR 0 5
2663: PPUSH
2664: LD_INT 1
2666: PPUSH
2667: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2671: LD_VAR 0 5
2675: PPUSH
2676: LD_INT 2
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL_OW 49
// end ;
2686: GO 2591
2688: POP
2689: POP
// end ; end ;
2690: LD_VAR 0 1
2694: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount , rest , count ; begin
2695: LD_INT 0
2697: PPUSH
2698: PPUSH
2699: PPUSH
2700: PPUSH
2701: PPUSH
2702: PPUSH
2703: PPUSH
// uc_side = 1 ;
2704: LD_ADDR_OWVAR 20
2708: PUSH
2709: LD_INT 1
2711: ST_TO_ADDR
// uc_nation = 1 ;
2712: LD_ADDR_OWVAR 21
2716: PUSH
2717: LD_INT 1
2719: ST_TO_ADDR
// rest = 0 ;
2720: LD_ADDR_VAR 0 6
2724: PUSH
2725: LD_INT 0
2727: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) then
2728: LD_STRING 08_Frank
2730: PPUSH
2731: CALL_OW 28
2735: IFFALSE 2747
// count = 6 else
2737: LD_ADDR_VAR 0 7
2741: PUSH
2742: LD_INT 6
2744: ST_TO_ADDR
2745: GO 2755
// count = 5 ;
2747: LD_ADDR_VAR 0 7
2751: PUSH
2752: LD_INT 5
2754: ST_TO_ADDR
// for i := 1 to count do
2755: LD_ADDR_VAR 0 2
2759: PUSH
2760: DOUBLE
2761: LD_INT 1
2763: DEC
2764: ST_TO_ADDR
2765: LD_VAR 0 7
2769: PUSH
2770: FOR_TO
2771: IFFALSE 2953
// begin vc_engine = 1 ;
2773: LD_ADDR_OWVAR 39
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// vc_control = 1 ;
2781: LD_ADDR_OWVAR 38
2785: PUSH
2786: LD_INT 1
2788: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2789: LD_ADDR_OWVAR 40
2793: PUSH
2794: LD_INT 3
2796: PUSH
2797: LD_INT 4
2799: PUSH
2800: LD_INT 5
2802: PUSH
2803: LD_INT 12
2805: PUSH
2806: EMPTY
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: PUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_INT 4
2817: PPUSH
2818: CALL_OW 12
2822: ARRAY
2823: ST_TO_ADDR
// vc_chassis = 3 ;
2824: LD_ADDR_OWVAR 37
2828: PUSH
2829: LD_INT 3
2831: ST_TO_ADDR
// veh = CreateVehicle ;
2832: LD_ADDR_VAR 0 3
2836: PUSH
2837: CALL_OW 45
2841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2842: LD_VAR 0 3
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2854: LD_VAR 0 3
2858: PPUSH
2859: LD_INT 2
2861: PPUSH
2862: LD_INT 0
2864: PPUSH
2865: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2869: LD_ADDR_EXP 26
2873: PUSH
2874: LD_EXP 26
2878: PUSH
2879: LD_VAR 0 3
2883: ADD
2884: ST_TO_ADDR
// if vc_weapon = 12 then
2885: LD_OWVAR 40
2889: PUSH
2890: LD_INT 12
2892: EQUAL
2893: IFFALSE 2951
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2895: LD_ADDR_VAR 0 4
2899: PUSH
2900: LD_INT 5
2902: PPUSH
2903: LD_INT 10
2905: PPUSH
2906: CALL_OW 12
2910: PUSH
2911: LD_INT 10
2913: MUL
2914: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2915: LD_VAR 0 3
2919: PPUSH
2920: LD_INT 1
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 1
2932: PPUSH
2933: LD_INT 2
2935: PPUSH
2936: CALL_OW 12
2940: ARRAY
2941: PPUSH
2942: LD_VAR 0 4
2946: PPUSH
2947: CALL_OW 291
// end ; end ;
2951: GO 2770
2953: POP
2954: POP
// end ;
2955: LD_VAR 0 1
2959: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2960: LD_INT 0
2962: PPUSH
2963: PPUSH
2964: PPUSH
// uc_side = 4 ;
2965: LD_ADDR_OWVAR 20
2969: PUSH
2970: LD_INT 4
2972: ST_TO_ADDR
// uc_nation = 1 ;
2973: LD_ADDR_OWVAR 21
2977: PUSH
2978: LD_INT 1
2980: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2981: LD_ADDR_EXP 11
2985: PUSH
2986: LD_STRING Simms
2988: PPUSH
2989: LD_INT 0
2991: PPUSH
2992: CALL 8465 0 2
2996: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
2997: LD_ADDR_EXP 12
3001: PUSH
3002: LD_STRING 08_Denis
3004: PPUSH
3005: LD_INT 1
3007: PPUSH
3008: CALL 8465 0 2
3012: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
3013: LD_ADDR_EXP 13
3017: PUSH
3018: LD_STRING 08_Joan
3020: PPUSH
3021: LD_INT 1
3023: PPUSH
3024: CALL 8465 0 2
3028: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
3029: LD_ADDR_EXP 14
3033: PUSH
3034: LD_STRING Khatam
3036: PPUSH
3037: LD_INT 1
3039: PPUSH
3040: CALL 8465 0 2
3044: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
3045: LD_ADDR_EXP 15
3049: PUSH
3050: LD_STRING Gladstone
3052: PPUSH
3053: LD_INT 1
3055: PPUSH
3056: CALL 8465 0 2
3060: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
3061: LD_ADDR_EXP 17
3065: PUSH
3066: LD_STRING DeltaDoctor
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: CALL 8465 0 2
3076: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
3077: LD_ADDR_EXP 21
3081: PUSH
3082: LD_STRING 09_others
3084: PPUSH
3085: CALL_OW 31
3089: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
3090: LD_ADDR_EXP 22
3094: PUSH
3095: LD_STRING 09_apes
3097: PPUSH
3098: CALL_OW 31
3102: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
3103: LD_EXP 11
3107: PPUSH
3108: LD_INT 1
3110: PPUSH
3111: LD_INT 0
3113: PPUSH
3114: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
3118: LD_EXP 12
3122: PPUSH
3123: LD_INT 1
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
3133: LD_EXP 13
3137: PPUSH
3138: LD_INT 1
3140: PPUSH
3141: LD_INT 0
3143: PPUSH
3144: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
3148: LD_EXP 14
3152: PPUSH
3153: LD_INT 1
3155: PPUSH
3156: LD_INT 0
3158: PPUSH
3159: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3163: LD_EXP 15
3167: PPUSH
3168: LD_INT 1
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3178: LD_EXP 17
3182: PPUSH
3183: LD_INT 1
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
3193: LD_EXP 16
3197: PPUSH
3198: LD_INT 1
3200: PPUSH
3201: LD_INT 0
3203: PPUSH
3204: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3208: LD_EXP 11
3212: PUSH
3213: LD_EXP 14
3217: PUSH
3218: LD_EXP 12
3222: PUSH
3223: LD_EXP 15
3227: PUSH
3228: LD_EXP 17
3232: PUSH
3233: LD_EXP 13
3237: PUSH
3238: EMPTY
3239: LIST
3240: LIST
3241: LIST
3242: LIST
3243: LIST
3244: LIST
3245: PPUSH
3246: LD_INT 4
3248: PPUSH
3249: CALL_OW 336
// if others09 > 2 then
3253: LD_EXP 21
3257: PUSH
3258: LD_INT 2
3260: GREATER
3261: IFFALSE 3306
// begin for i := 1 to 3 do
3263: LD_ADDR_VAR 0 2
3267: PUSH
3268: DOUBLE
3269: LD_INT 1
3271: DEC
3272: ST_TO_ADDR
3273: LD_INT 3
3275: PUSH
3276: FOR_TO
3277: IFFALSE 3302
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3279: LD_EXP 21
3283: PUSH
3284: LD_VAR 0 2
3288: ARRAY
3289: PPUSH
3290: LD_INT 1
3292: PPUSH
3293: LD_INT 0
3295: PPUSH
3296: CALL_OW 49
3300: GO 3276
3302: POP
3303: POP
// end else
3304: GO 3338
// begin for i in others09 do
3306: LD_ADDR_VAR 0 2
3310: PUSH
3311: LD_EXP 21
3315: PUSH
3316: FOR_IN
3317: IFFALSE 3336
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3319: LD_VAR 0 2
3323: PPUSH
3324: LD_INT 1
3326: PPUSH
3327: LD_INT 0
3329: PPUSH
3330: CALL_OW 49
3334: GO 3316
3336: POP
3337: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
3338: LD_INT 22
3340: PUSH
3341: LD_INT 4
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: PUSH
3348: LD_INT 21
3350: PUSH
3351: LD_INT 1
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: PUSH
3358: LD_INT 25
3360: PUSH
3361: LD_INT 2
3363: PUSH
3364: EMPTY
3365: LIST
3366: LIST
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: LIST
3372: PPUSH
3373: CALL_OW 69
3377: PUSH
3378: LD_EXP 11
3382: PUSH
3383: LD_EXP 14
3387: PUSH
3388: LD_EXP 12
3392: PUSH
3393: LD_EXP 15
3397: PUSH
3398: LD_EXP 17
3402: PUSH
3403: LD_EXP 13
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: PUSH
3416: LD_INT 0
3418: EQUAL
3419: DIFF
3420: IFFALSE 3522
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3422: LD_ADDR_VAR 0 3
3426: PUSH
3427: LD_INT 22
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 21
3439: PUSH
3440: LD_INT 1
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 25
3449: PUSH
3450: LD_INT 2
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: LIST
3461: PPUSH
3462: CALL_OW 69
3466: PUSH
3467: LD_EXP 11
3471: PUSH
3472: LD_EXP 14
3476: PUSH
3477: LD_EXP 12
3481: PUSH
3482: LD_EXP 15
3486: PUSH
3487: LD_EXP 17
3491: PUSH
3492: LD_EXP 13
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: DIFF
3505: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
3506: LD_VAR 0 3
3510: PUSH
3511: LD_INT 1
3513: ARRAY
3514: PPUSH
3515: LD_INT 2
3517: PPUSH
3518: CALL_OW 336
// end ; for i in ape09 do
3522: LD_ADDR_VAR 0 2
3526: PUSH
3527: LD_EXP 22
3531: PUSH
3532: FOR_IN
3533: IFFALSE 3552
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3535: LD_VAR 0 2
3539: PPUSH
3540: LD_INT 1
3542: PPUSH
3543: LD_INT 0
3545: PPUSH
3546: CALL_OW 49
3550: GO 3532
3552: POP
3553: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
3554: LD_INT 22
3556: PUSH
3557: LD_INT 4
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: LD_INT 21
3566: PUSH
3567: LD_INT 1
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PUSH
3574: LD_INT 25
3576: PUSH
3577: LD_INT 2
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: LIST
3588: PPUSH
3589: CALL_OW 69
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: LD_INT 101
3599: PPUSH
3600: LD_INT 30
3602: PPUSH
3603: LD_INT 2
3605: PPUSH
3606: CALL_OW 205
// uc_side = 1 ;
3610: LD_ADDR_OWVAR 20
3614: PUSH
3615: LD_INT 1
3617: ST_TO_ADDR
// hc_class := 1 ;
3618: LD_ADDR_OWVAR 28
3622: PUSH
3623: LD_INT 1
3625: ST_TO_ADDR
// hc_sex := sex_female ;
3626: LD_ADDR_OWVAR 27
3630: PUSH
3631: LD_INT 2
3633: ST_TO_ADDR
// hc_gallery :=  ;
3634: LD_ADDR_OWVAR 33
3638: PUSH
3639: LD_STRING 
3641: ST_TO_ADDR
// hc_name :=  ;
3642: LD_ADDR_OWVAR 26
3646: PUSH
3647: LD_STRING 
3649: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3650: LD_ADDR_OWVAR 31
3654: PUSH
3655: LD_INT 1
3657: PUSH
3658: LD_INT 7
3660: PUSH
3661: LD_INT 1
3663: PUSH
3664: LD_INT 0
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: ST_TO_ADDR
// AmScout = CreateHuman ;
3673: LD_ADDR_EXP 18
3677: PUSH
3678: CALL_OW 44
3682: ST_TO_ADDR
// end ;
3683: LD_VAR 0 1
3687: RET
// export function PrepareCornell ; begin
3688: LD_INT 0
3690: PPUSH
// uc_side = 4 ;
3691: LD_ADDR_OWVAR 20
3695: PUSH
3696: LD_INT 4
3698: ST_TO_ADDR
// uc_nation = 1 ;
3699: LD_ADDR_OWVAR 21
3703: PUSH
3704: LD_INT 1
3706: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3707: LD_ADDR_EXP 19
3711: PUSH
3712: LD_STRING 03_Cornel
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: CALL 8465 0 2
3722: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3723: LD_EXP 19
3727: PPUSH
3728: LD_INT 8
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 49
// if IsInUnit ( JMM ) then
3738: LD_EXP 1
3742: PPUSH
3743: CALL_OW 310
3747: IFFALSE 3790
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3749: LD_EXP 19
3753: PPUSH
3754: LD_EXP 1
3758: PPUSH
3759: CALL_OW 310
3763: PPUSH
3764: CALL_OW 250
3768: PPUSH
3769: LD_EXP 1
3773: PPUSH
3774: CALL_OW 310
3778: PPUSH
3779: CALL_OW 251
3783: PPUSH
3784: CALL_OW 111
3788: GO 3819
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3790: LD_EXP 19
3794: PPUSH
3795: LD_EXP 1
3799: PPUSH
3800: CALL_OW 250
3804: PPUSH
3805: LD_EXP 1
3809: PPUSH
3810: CALL_OW 251
3814: PPUSH
3815: CALL_OW 111
// end ; end_of_file
3819: LD_VAR 0 1
3823: RET
// export function PrepareRussians ; var i , un ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
3828: PPUSH
// uc_side = 3 ;
3829: LD_ADDR_OWVAR 20
3833: PUSH
3834: LD_INT 3
3836: ST_TO_ADDR
// uc_nation = 3 ;
3837: LD_ADDR_OWVAR 21
3841: PUSH
3842: LD_INT 3
3844: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3845: LD_ADDR_EXP 24
3849: PUSH
3850: LD_STRING Tsaritsyn
3852: PPUSH
3853: LD_INT 0
3855: PPUSH
3856: CALL 8465 0 2
3860: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3861: LD_EXP 24
3865: PPUSH
3866: LD_INT 3
3868: PPUSH
3869: LD_INT 0
3871: PPUSH
3872: CALL_OW 49
// for i = 1 to 14 do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 14
3888: PUSH
3889: FOR_TO
3890: IFFALSE 3976
// begin uc_side = 3 ;
3892: LD_ADDR_OWVAR 20
3896: PUSH
3897: LD_INT 3
3899: ST_TO_ADDR
// uc_nation = 3 ;
3900: LD_ADDR_OWVAR 21
3904: PUSH
3905: LD_INT 3
3907: ST_TO_ADDR
// hc_gallery =  ;
3908: LD_ADDR_OWVAR 33
3912: PUSH
3913: LD_STRING 
3915: ST_TO_ADDR
// hc_name =  ;
3916: LD_ADDR_OWVAR 26
3920: PUSH
3921: LD_STRING 
3923: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3924: LD_INT 0
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: LD_EXP 34
3934: PPUSH
3935: LD_EXP 35
3939: PPUSH
3940: CALL_OW 12
3944: PPUSH
3945: CALL_OW 380
// un = CreateHuman ;
3949: LD_ADDR_VAR 0 3
3953: PUSH
3954: CALL_OW 44
3958: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3959: LD_VAR 0 3
3963: PPUSH
3964: LD_INT 3
3966: PPUSH
3967: LD_INT 0
3969: PPUSH
3970: CALL_OW 49
// end ;
3974: GO 3889
3976: POP
3977: POP
// for i = 1 to 6 do
3978: LD_ADDR_VAR 0 2
3982: PUSH
3983: DOUBLE
3984: LD_INT 1
3986: DEC
3987: ST_TO_ADDR
3988: LD_INT 6
3990: PUSH
3991: FOR_TO
3992: IFFALSE 4078
// begin uc_side = 3 ;
3994: LD_ADDR_OWVAR 20
3998: PUSH
3999: LD_INT 3
4001: ST_TO_ADDR
// uc_nation = 3 ;
4002: LD_ADDR_OWVAR 21
4006: PUSH
4007: LD_INT 3
4009: ST_TO_ADDR
// hc_gallery =  ;
4010: LD_ADDR_OWVAR 33
4014: PUSH
4015: LD_STRING 
4017: ST_TO_ADDR
// hc_name =  ;
4018: LD_ADDR_OWVAR 26
4022: PUSH
4023: LD_STRING 
4025: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_INT 2
4031: PPUSH
4032: LD_EXP 34
4036: PPUSH
4037: LD_EXP 35
4041: PPUSH
4042: CALL_OW 12
4046: PPUSH
4047: CALL_OW 380
// un = CreateHuman ;
4051: LD_ADDR_VAR 0 3
4055: PUSH
4056: CALL_OW 44
4060: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4061: LD_VAR 0 3
4065: PPUSH
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 0
4071: PPUSH
4072: CALL_OW 49
// end ;
4076: GO 3991
4078: POP
4079: POP
// for i = 1 to 6 do
4080: LD_ADDR_VAR 0 2
4084: PUSH
4085: DOUBLE
4086: LD_INT 1
4088: DEC
4089: ST_TO_ADDR
4090: LD_INT 6
4092: PUSH
4093: FOR_TO
4094: IFFALSE 4180
// begin uc_side = 3 ;
4096: LD_ADDR_OWVAR 20
4100: PUSH
4101: LD_INT 3
4103: ST_TO_ADDR
// uc_nation = 3 ;
4104: LD_ADDR_OWVAR 21
4108: PUSH
4109: LD_INT 3
4111: ST_TO_ADDR
// hc_gallery =  ;
4112: LD_ADDR_OWVAR 33
4116: PUSH
4117: LD_STRING 
4119: ST_TO_ADDR
// hc_name =  ;
4120: LD_ADDR_OWVAR 26
4124: PUSH
4125: LD_STRING 
4127: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4128: LD_INT 0
4130: PPUSH
4131: LD_INT 3
4133: PPUSH
4134: LD_EXP 34
4138: PPUSH
4139: LD_EXP 35
4143: PPUSH
4144: CALL_OW 12
4148: PPUSH
4149: CALL_OW 380
// un = CreateHuman ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: CALL_OW 44
4162: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4163: LD_VAR 0 3
4167: PPUSH
4168: LD_INT 3
4170: PPUSH
4171: LD_INT 0
4173: PPUSH
4174: CALL_OW 49
// end ;
4178: GO 4093
4180: POP
4181: POP
// for i = 1 to 4 do
4182: LD_ADDR_VAR 0 2
4186: PUSH
4187: DOUBLE
4188: LD_INT 1
4190: DEC
4191: ST_TO_ADDR
4192: LD_INT 4
4194: PUSH
4195: FOR_TO
4196: IFFALSE 4282
// begin uc_side = 3 ;
4198: LD_ADDR_OWVAR 20
4202: PUSH
4203: LD_INT 3
4205: ST_TO_ADDR
// uc_nation = 3 ;
4206: LD_ADDR_OWVAR 21
4210: PUSH
4211: LD_INT 3
4213: ST_TO_ADDR
// hc_gallery =  ;
4214: LD_ADDR_OWVAR 33
4218: PUSH
4219: LD_STRING 
4221: ST_TO_ADDR
// hc_name =  ;
4222: LD_ADDR_OWVAR 26
4226: PUSH
4227: LD_STRING 
4229: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4230: LD_INT 0
4232: PPUSH
4233: LD_INT 4
4235: PPUSH
4236: LD_EXP 34
4240: PPUSH
4241: LD_EXP 35
4245: PPUSH
4246: CALL_OW 12
4250: PPUSH
4251: CALL_OW 380
// un = CreateHuman ;
4255: LD_ADDR_VAR 0 3
4259: PUSH
4260: CALL_OW 44
4264: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4265: LD_VAR 0 3
4269: PPUSH
4270: LD_INT 3
4272: PPUSH
4273: LD_INT 0
4275: PPUSH
4276: CALL_OW 49
// end ;
4280: GO 4195
4282: POP
4283: POP
// end ; end_of_file
4284: LD_VAR 0 1
4288: RET
// export function PrepareArabianCommander ; begin
4289: LD_INT 0
4291: PPUSH
// uc_side = 2 ;
4292: LD_ADDR_OWVAR 20
4296: PUSH
4297: LD_INT 2
4299: ST_TO_ADDR
// uc_nation = 2 ;
4300: LD_ADDR_OWVAR 21
4304: PUSH
4305: LD_INT 2
4307: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4308: LD_ADDR_EXP 25
4312: PUSH
4313: LD_STRING Dietrich
4315: PPUSH
4316: CALL_OW 25
4320: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4321: LD_EXP 25
4325: PPUSH
4326: LD_INT 4
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 49
// end ;
4336: LD_VAR 0 1
4340: RET
// export function PrepareArabian ; var i , un , veh ; begin
4341: LD_INT 0
4343: PPUSH
4344: PPUSH
4345: PPUSH
4346: PPUSH
// for i = 1 to 3 do
4347: LD_ADDR_VAR 0 2
4351: PUSH
4352: DOUBLE
4353: LD_INT 1
4355: DEC
4356: ST_TO_ADDR
4357: LD_INT 3
4359: PUSH
4360: FOR_TO
4361: IFFALSE 4447
// begin uc_side = 2 ;
4363: LD_ADDR_OWVAR 20
4367: PUSH
4368: LD_INT 2
4370: ST_TO_ADDR
// uc_nation = 2 ;
4371: LD_ADDR_OWVAR 21
4375: PUSH
4376: LD_INT 2
4378: ST_TO_ADDR
// hc_gallery =  ;
4379: LD_ADDR_OWVAR 33
4383: PUSH
4384: LD_STRING 
4386: ST_TO_ADDR
// hc_name =  ;
4387: LD_ADDR_OWVAR 26
4391: PUSH
4392: LD_STRING 
4394: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4395: LD_INT 0
4397: PPUSH
4398: LD_INT 1
4400: PPUSH
4401: LD_EXP 34
4405: PPUSH
4406: LD_EXP 35
4410: PPUSH
4411: CALL_OW 12
4415: PPUSH
4416: CALL_OW 380
// un = CreateHuman ;
4420: LD_ADDR_VAR 0 3
4424: PUSH
4425: CALL_OW 44
4429: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4430: LD_VAR 0 3
4434: PPUSH
4435: LD_INT 4
4437: PPUSH
4438: LD_INT 0
4440: PPUSH
4441: CALL_OW 49
// end ;
4445: GO 4360
4447: POP
4448: POP
// for i = 1 to 6 do
4449: LD_ADDR_VAR 0 2
4453: PUSH
4454: DOUBLE
4455: LD_INT 1
4457: DEC
4458: ST_TO_ADDR
4459: LD_INT 6
4461: PUSH
4462: FOR_TO
4463: IFFALSE 4549
// begin uc_side = 2 ;
4465: LD_ADDR_OWVAR 20
4469: PUSH
4470: LD_INT 2
4472: ST_TO_ADDR
// uc_nation = 2 ;
4473: LD_ADDR_OWVAR 21
4477: PUSH
4478: LD_INT 2
4480: ST_TO_ADDR
// hc_gallery =  ;
4481: LD_ADDR_OWVAR 33
4485: PUSH
4486: LD_STRING 
4488: ST_TO_ADDR
// hc_name =  ;
4489: LD_ADDR_OWVAR 26
4493: PUSH
4494: LD_STRING 
4496: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4497: LD_INT 0
4499: PPUSH
4500: LD_INT 2
4502: PPUSH
4503: LD_EXP 34
4507: PPUSH
4508: LD_EXP 35
4512: PPUSH
4513: CALL_OW 12
4517: PPUSH
4518: CALL_OW 380
// un = CreateHuman ;
4522: LD_ADDR_VAR 0 3
4526: PUSH
4527: CALL_OW 44
4531: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4532: LD_VAR 0 3
4536: PPUSH
4537: LD_INT 4
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// end ;
4547: GO 4462
4549: POP
4550: POP
// for i = 1 to 6 do
4551: LD_ADDR_VAR 0 2
4555: PUSH
4556: DOUBLE
4557: LD_INT 1
4559: DEC
4560: ST_TO_ADDR
4561: LD_INT 6
4563: PUSH
4564: FOR_TO
4565: IFFALSE 4651
// begin uc_side = 2 ;
4567: LD_ADDR_OWVAR 20
4571: PUSH
4572: LD_INT 2
4574: ST_TO_ADDR
// uc_nation = 2 ;
4575: LD_ADDR_OWVAR 21
4579: PUSH
4580: LD_INT 2
4582: ST_TO_ADDR
// hc_gallery =  ;
4583: LD_ADDR_OWVAR 33
4587: PUSH
4588: LD_STRING 
4590: ST_TO_ADDR
// hc_name =  ;
4591: LD_ADDR_OWVAR 26
4595: PUSH
4596: LD_STRING 
4598: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4599: LD_INT 0
4601: PPUSH
4602: LD_INT 1
4604: PPUSH
4605: LD_EXP 34
4609: PPUSH
4610: LD_EXP 35
4614: PPUSH
4615: CALL_OW 12
4619: PPUSH
4620: CALL_OW 380
// un = CreateHuman ;
4624: LD_ADDR_VAR 0 3
4628: PUSH
4629: CALL_OW 44
4633: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4634: LD_VAR 0 3
4638: PPUSH
4639: LD_INT 4
4641: PPUSH
4642: LD_INT 0
4644: PPUSH
4645: CALL_OW 49
// end ;
4649: GO 4564
4651: POP
4652: POP
// for i = 1 to 4 do
4653: LD_ADDR_VAR 0 2
4657: PUSH
4658: DOUBLE
4659: LD_INT 1
4661: DEC
4662: ST_TO_ADDR
4663: LD_INT 4
4665: PUSH
4666: FOR_TO
4667: IFFALSE 4753
// begin uc_side = 2 ;
4669: LD_ADDR_OWVAR 20
4673: PUSH
4674: LD_INT 2
4676: ST_TO_ADDR
// uc_nation = 2 ;
4677: LD_ADDR_OWVAR 21
4681: PUSH
4682: LD_INT 2
4684: ST_TO_ADDR
// hc_gallery =  ;
4685: LD_ADDR_OWVAR 33
4689: PUSH
4690: LD_STRING 
4692: ST_TO_ADDR
// hc_name =  ;
4693: LD_ADDR_OWVAR 26
4697: PUSH
4698: LD_STRING 
4700: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4701: LD_INT 0
4703: PPUSH
4704: LD_INT 4
4706: PPUSH
4707: LD_EXP 34
4711: PPUSH
4712: LD_EXP 35
4716: PPUSH
4717: CALL_OW 12
4721: PPUSH
4722: CALL_OW 380
// un = CreateHuman ;
4726: LD_ADDR_VAR 0 3
4730: PUSH
4731: CALL_OW 44
4735: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4736: LD_VAR 0 3
4740: PPUSH
4741: LD_INT 4
4743: PPUSH
4744: LD_INT 0
4746: PPUSH
4747: CALL_OW 49
// end ;
4751: GO 4666
4753: POP
4754: POP
// for i = 1 to 2 do
4755: LD_ADDR_VAR 0 2
4759: PUSH
4760: DOUBLE
4761: LD_INT 1
4763: DEC
4764: ST_TO_ADDR
4765: LD_INT 2
4767: PUSH
4768: FOR_TO
4769: IFFALSE 4899
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4771: LD_ADDR_VAR 0 4
4775: PUSH
4776: LD_INT 22
4778: PUSH
4779: LD_INT 2
4781: PUSH
4782: EMPTY
4783: LIST
4784: LIST
4785: PUSH
4786: LD_INT 21
4788: PUSH
4789: LD_INT 2
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: PUSH
4796: LD_INT 58
4798: PUSH
4799: EMPTY
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: LIST
4806: PPUSH
4807: CALL_OW 69
4811: ST_TO_ADDR
// uc_side = 2 ;
4812: LD_ADDR_OWVAR 20
4816: PUSH
4817: LD_INT 2
4819: ST_TO_ADDR
// uc_nation = 2 ;
4820: LD_ADDR_OWVAR 21
4824: PUSH
4825: LD_INT 2
4827: ST_TO_ADDR
// hc_gallery =  ;
4828: LD_ADDR_OWVAR 33
4832: PUSH
4833: LD_STRING 
4835: ST_TO_ADDR
// hc_name =  ;
4836: LD_ADDR_OWVAR 26
4840: PUSH
4841: LD_STRING 
4843: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4844: LD_INT 0
4846: PPUSH
4847: LD_INT 3
4849: PPUSH
4850: LD_EXP 34
4854: PPUSH
4855: LD_EXP 35
4859: PPUSH
4860: CALL_OW 12
4864: PPUSH
4865: CALL_OW 380
// un = CreateHuman ;
4869: LD_ADDR_VAR 0 3
4873: PUSH
4874: CALL_OW 44
4878: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4879: LD_VAR 0 3
4883: PPUSH
4884: LD_VAR 0 4
4888: PUSH
4889: LD_INT 1
4891: ARRAY
4892: PPUSH
4893: CALL_OW 52
// end ;
4897: GO 4768
4899: POP
4900: POP
// end ; end_of_file
4901: LD_VAR 0 1
4905: RET
// every 1 do
4906: GO 4908
4908: DISABLE
// begin CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
4909: LD_EXP 1
4913: PPUSH
4914: CALL_OW 310
4918: PPUSH
4919: CALL_OW 87
// if IsOk ( Gary ) then
4923: LD_EXP 10
4927: PPUSH
4928: CALL_OW 302
4932: IFFALSE 4978
// begin DialogueOn ;
4934: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
4938: LD_EXP 10
4942: PPUSH
4943: LD_STRING D2-Gary-1
4945: PPUSH
4946: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4950: LD_EXP 1
4954: PPUSH
4955: LD_STRING D2-JMM-1
4957: PPUSH
4958: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4962: LD_EXP 10
4966: PPUSH
4967: LD_STRING D2-Gary-2
4969: PPUSH
4970: CALL_OW 88
// DialogueOff ;
4974: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
4978: LD_STRING M1
4980: PPUSH
4981: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4985: LD_INT 38
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: LD_INT 100
4993: PPUSH
4994: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4998: LD_INT 47
5000: PPUSH
5001: LD_INT 1
5003: PPUSH
5004: LD_INT 50
5006: PPUSH
5007: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5011: LD_INT 47
5013: PPUSH
5014: LD_INT 3
5016: PPUSH
5017: LD_INT 50
5019: PPUSH
5020: CALL_OW 291
// SaveForQuickRestart ;
5024: CALL_OW 22
// end ;
5028: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
5029: LD_EXP 1
5033: PPUSH
5034: LD_EXP 11
5038: PPUSH
5039: CALL_OW 296
5043: PUSH
5044: LD_INT 15
5046: LESS
5047: IFFALSE 5422
5049: GO 5051
5051: DISABLE
// begin InGameOn ;
5052: CALL_OW 8
// ComExitVehicle ( JMM ) ;
5056: LD_EXP 1
5060: PPUSH
5061: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5065: LD_EXP 1
5069: PPUSH
5070: CALL_OW 87
// wait ( 0 0$1 ) ;
5074: LD_INT 35
5076: PPUSH
5077: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5081: LD_INT 35
5083: PPUSH
5084: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5088: LD_EXP 11
5092: PUSH
5093: LD_EXP 13
5097: PUSH
5098: LD_EXP 12
5102: PUSH
5103: LD_EXP 14
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: PPUSH
5114: LD_EXP 1
5118: PPUSH
5119: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
5123: LD_EXP 1
5127: PPUSH
5128: LD_EXP 11
5132: PPUSH
5133: CALL_OW 296
5137: PUSH
5138: LD_INT 5
5140: LESS
5141: IFFALSE 5081
// ComTurnUnit ( JMM , Simms ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_EXP 11
5152: PPUSH
5153: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5157: LD_EXP 11
5161: PUSH
5162: LD_EXP 13
5166: PUSH
5167: LD_EXP 12
5171: PUSH
5172: LD_EXP 14
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: PPUSH
5183: LD_EXP 1
5187: PPUSH
5188: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5192: LD_EXP 1
5196: PUSH
5197: LD_EXP 11
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PPUSH
5206: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5210: LD_EXP 11
5214: PPUSH
5215: LD_STRING D2a-Sim-1
5217: PPUSH
5218: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5222: LD_EXP 1
5226: PPUSH
5227: LD_STRING D2a-JMM-1
5229: PPUSH
5230: CALL_OW 88
// if IsOk ( Joan ) then
5234: LD_EXP 13
5238: PPUSH
5239: CALL_OW 302
5243: IFFALSE 5295
// begin ComTurnUnit ( JMM , Joan ) ;
5245: LD_EXP 1
5249: PPUSH
5250: LD_EXP 13
5254: PPUSH
5255: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5259: LD_EXP 13
5263: PPUSH
5264: LD_STRING D2b-Joan-1
5266: PPUSH
5267: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D2b-JMM-1
5278: PPUSH
5279: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5283: LD_EXP 13
5287: PPUSH
5288: LD_STRING D2b-Joan-2
5290: PPUSH
5291: CALL_OW 88
// end ; if IsOk ( Denis ) then
5295: LD_EXP 12
5299: PPUSH
5300: CALL_OW 302
5304: IFFALSE 5332
// begin ComTurnUnit ( JMM , Denis ) ;
5306: LD_EXP 1
5310: PPUSH
5311: LD_EXP 12
5315: PPUSH
5316: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5320: LD_EXP 12
5324: PPUSH
5325: LD_STRING D2c-Den-1
5327: PPUSH
5328: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5332: LD_EXP 14
5336: PPUSH
5337: CALL_OW 302
5341: IFFALSE 5381
// begin ComTurnUnit ( JMM , Khatam ) ;
5343: LD_EXP 1
5347: PPUSH
5348: LD_EXP 14
5352: PPUSH
5353: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5357: LD_EXP 1
5361: PPUSH
5362: LD_STRING D2c-JMM-1
5364: PPUSH
5365: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5369: LD_EXP 14
5373: PPUSH
5374: LD_STRING D2c-Khat-1
5376: PPUSH
5377: CALL_OW 88
// end ; InGameOff ;
5381: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5385: LD_INT 22
5387: PUSH
5388: LD_INT 4
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PPUSH
5395: CALL_OW 69
5399: PPUSH
5400: LD_INT 1
5402: PPUSH
5403: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5407: LD_STRING M1a
5409: PPUSH
5410: CALL_OW 337
// joinEpsilon = 1 ;
5414: LD_ADDR_EXP 27
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// end ;
5422: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
5423: LD_EXP 53
5427: PUSH
5428: LD_INT 1
5430: EQUAL
5431: IFFALSE 6037
5433: GO 5435
5435: DISABLE
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
5440: LD_ADDR_VAR 0 1
5444: PUSH
5445: LD_INT 22
5447: PUSH
5448: LD_INT 1
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 25
5457: PUSH
5458: LD_INT 4
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 26
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: PPUSH
5480: CALL_OW 69
5484: PUSH
5485: LD_INT 1
5487: ARRAY
5488: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: LD_INT 22
5496: PUSH
5497: LD_INT 1
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 26
5506: PUSH
5507: LD_INT 1
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 2
5516: PUSH
5517: LD_INT 25
5519: PUSH
5520: LD_INT 1
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 25
5529: PUSH
5530: LD_INT 2
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 25
5539: PUSH
5540: LD_INT 3
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL_OW 69
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: ST_TO_ADDR
// DialogueOn ;
5567: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5571: LD_EXP 17
5575: PPUSH
5576: CALL_OW 302
5580: IFFALSE 5596
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5582: LD_EXP 17
5586: PPUSH
5587: LD_STRING D3-Sci1-1
5589: PPUSH
5590: CALL_OW 88
5594: GO 5608
// Say ( tmp1 , D3-Sci1-1 ) ;
5596: LD_VAR 0 1
5600: PPUSH
5601: LD_STRING D3-Sci1-1
5603: PPUSH
5604: CALL_OW 88
// if IsOk ( Gary ) then
5608: LD_EXP 10
5612: PPUSH
5613: CALL_OW 302
5617: IFFALSE 5633
// Say ( Gary , D3-Gary-1 ) else
5619: LD_EXP 10
5623: PPUSH
5624: LD_STRING D3-Gary-1
5626: PPUSH
5627: CALL_OW 88
5631: GO 5645
// Say ( tmp2 , D3-Gary-1 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_STRING D3-Gary-1
5640: PPUSH
5641: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5645: LD_EXP 17
5649: PPUSH
5650: CALL_OW 302
5654: IFFALSE 5670
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5656: LD_EXP 17
5660: PPUSH
5661: LD_STRING D3-Sci1-2
5663: PPUSH
5664: CALL_OW 88
5668: GO 5682
// Say ( tmp1 , D3-Sci1-2 ) ;
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_STRING D3-Sci1-2
5677: PPUSH
5678: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5682: LD_EXP 1
5686: PPUSH
5687: LD_STRING D3-JMM-2
5689: PPUSH
5690: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5694: LD_EXP 17
5698: PPUSH
5699: CALL_OW 302
5703: IFFALSE 5719
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5705: LD_EXP 17
5709: PPUSH
5710: LD_STRING D3-Sci1-3
5712: PPUSH
5713: CALL_OW 88
5717: GO 5731
// Say ( tmp1 , D3-Sci1-3 ) ;
5719: LD_VAR 0 1
5723: PPUSH
5724: LD_STRING D3-Sci1-3
5726: PPUSH
5727: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5731: LD_EXP 1
5735: PPUSH
5736: LD_STRING D3-JMM-3
5738: PPUSH
5739: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5743: LD_EXP 17
5747: PPUSH
5748: CALL_OW 302
5752: IFFALSE 5768
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5754: LD_EXP 17
5758: PPUSH
5759: LD_STRING D3-Sci1-4
5761: PPUSH
5762: CALL_OW 88
5766: GO 5780
// Say ( tmp1 , D3-Sci1-4 ) ;
5768: LD_VAR 0 1
5772: PPUSH
5773: LD_STRING D3-Sci1-4
5775: PPUSH
5776: CALL_OW 88
// DialogueOff ;
5780: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
5784: LD_INT 12
5786: PPUSH
5787: LD_INT 1
5789: PPUSH
5790: LD_INT 1
5792: PPUSH
5793: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5797: LD_INT 32
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5810: LD_INT 12
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5823: LD_INT 33
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5836: LD_STRING M2
5838: PPUSH
5839: CALL_OW 337
// wait ( 5 5$0 ) ;
5843: LD_INT 10500
5845: PPUSH
5846: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
5850: LD_EXP 11
5854: PPUSH
5855: CALL_OW 302
5859: PUSH
5860: LD_EXP 12
5864: PPUSH
5865: CALL_OW 302
5869: AND
5870: IFFALSE 6037
// begin DialogueOn ;
5872: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5876: LD_EXP 11
5880: PPUSH
5881: LD_STRING D3a-Sim-1
5883: PPUSH
5884: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
5888: LD_EXP 12
5892: PPUSH
5893: LD_STRING D3a-Sci1-1
5895: PPUSH
5896: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5900: LD_EXP 11
5904: PPUSH
5905: LD_STRING D3a-Sim-2
5907: PPUSH
5908: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
5912: LD_EXP 12
5916: PPUSH
5917: LD_STRING D3a-Sci1-2
5919: PPUSH
5920: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5924: LD_EXP 11
5928: PPUSH
5929: LD_STRING D3a-Sim-3
5931: PPUSH
5932: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
5936: LD_EXP 12
5940: PPUSH
5941: LD_STRING D3a-Sci1-3
5943: PPUSH
5944: CALL_OW 88
// if IsOK ( Joan ) then
5948: LD_EXP 13
5952: PPUSH
5953: CALL_OW 302
5957: IFFALSE 5973
// Say ( Simms , D3a-Sim-4 ) else
5959: LD_EXP 11
5963: PPUSH
5964: LD_STRING D3a-Sim-4
5966: PPUSH
5967: CALL_OW 88
5971: GO 5985
// Say ( Simms , D3a-Sim-4a ) ;
5973: LD_EXP 11
5977: PPUSH
5978: LD_STRING D3a-Sim-4a
5980: PPUSH
5981: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
5985: LD_EXP 12
5989: PPUSH
5990: LD_STRING D3a-Sci1-4
5992: PPUSH
5993: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5997: LD_EXP 11
6001: PPUSH
6002: LD_STRING D3a-Sim-5
6004: PPUSH
6005: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
6009: LD_EXP 12
6013: PPUSH
6014: LD_STRING D3a-Sci1-5
6016: PPUSH
6017: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6021: LD_EXP 11
6025: PPUSH
6026: LD_STRING D3a-Sim-6
6028: PPUSH
6029: CALL_OW 88
// DialogueOff ;
6033: CALL_OW 7
// end ; end ;
6037: PPOPN 2
6039: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6040: LD_EXP 27
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: IFFALSE 6368
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6056: LD_EXP 18
6060: PPUSH
6061: LD_STRING D4-FSol1-1
6063: PPUSH
6064: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6068: LD_STRING M3
6070: PPUSH
6071: CALL_OW 337
// PrepareRussians ;
6075: CALL 3824 0 0
// rnd = Rand ( 1 , 100 ) ;
6079: LD_ADDR_VAR 0 1
6083: PUSH
6084: LD_INT 1
6086: PPUSH
6087: LD_INT 100
6089: PPUSH
6090: CALL_OW 12
6094: ST_TO_ADDR
// if difficulty = 1 then
6095: LD_OWVAR 67
6099: PUSH
6100: LD_INT 1
6102: EQUAL
6103: IFFALSE 6186
// begin if rnd > 0 and rnd < 51 then
6105: LD_VAR 0 1
6109: PUSH
6110: LD_INT 0
6112: GREATER
6113: PUSH
6114: LD_VAR 0 1
6118: PUSH
6119: LD_INT 51
6121: LESS
6122: AND
6123: IFFALSE 6132
// BuildRussianBase ( 2 ) ;
6125: LD_INT 2
6127: PPUSH
6128: CALL 9049 0 1
// if rnd > 50 and rnd < 81 then
6132: LD_VAR 0 1
6136: PUSH
6137: LD_INT 50
6139: GREATER
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: LD_INT 81
6148: LESS
6149: AND
6150: IFFALSE 6159
// BuildRussianBase ( 1 ) ;
6152: LD_INT 1
6154: PPUSH
6155: CALL 9049 0 1
// if rnd > 80 and rnd < 101 then
6159: LD_VAR 0 1
6163: PUSH
6164: LD_INT 80
6166: GREATER
6167: PUSH
6168: LD_VAR 0 1
6172: PUSH
6173: LD_INT 101
6175: LESS
6176: AND
6177: IFFALSE 6186
// BuildRussianBase ( 3 ) ;
6179: LD_INT 3
6181: PPUSH
6182: CALL 9049 0 1
// end ; if difficulty = 2 then
6186: LD_OWVAR 67
6190: PUSH
6191: LD_INT 2
6193: EQUAL
6194: IFFALSE 6277
// begin if rnd > 0 and rnd < 61 then
6196: LD_VAR 0 1
6200: PUSH
6201: LD_INT 0
6203: GREATER
6204: PUSH
6205: LD_VAR 0 1
6209: PUSH
6210: LD_INT 61
6212: LESS
6213: AND
6214: IFFALSE 6223
// BuildRussianBase ( 2 ) ;
6216: LD_INT 2
6218: PPUSH
6219: CALL 9049 0 1
// if rnd > 60 and rnd < 81 then
6223: LD_VAR 0 1
6227: PUSH
6228: LD_INT 60
6230: GREATER
6231: PUSH
6232: LD_VAR 0 1
6236: PUSH
6237: LD_INT 81
6239: LESS
6240: AND
6241: IFFALSE 6250
// BuildRussianBase ( 1 ) ;
6243: LD_INT 1
6245: PPUSH
6246: CALL 9049 0 1
// if rnd > 80 and rnd < 101 then
6250: LD_VAR 0 1
6254: PUSH
6255: LD_INT 80
6257: GREATER
6258: PUSH
6259: LD_VAR 0 1
6263: PUSH
6264: LD_INT 101
6266: LESS
6267: AND
6268: IFFALSE 6277
// BuildRussianBase ( 3 ) ;
6270: LD_INT 3
6272: PPUSH
6273: CALL 9049 0 1
// end ; if difficulty = 3 then
6277: LD_OWVAR 67
6281: PUSH
6282: LD_INT 3
6284: EQUAL
6285: IFFALSE 6368
// begin if rnd > 0 and rnd < 71 then
6287: LD_VAR 0 1
6291: PUSH
6292: LD_INT 0
6294: GREATER
6295: PUSH
6296: LD_VAR 0 1
6300: PUSH
6301: LD_INT 71
6303: LESS
6304: AND
6305: IFFALSE 6314
// BuildRussianBase ( 3 ) ;
6307: LD_INT 3
6309: PPUSH
6310: CALL 9049 0 1
// if rnd > 70 and rnd < 81 then
6314: LD_VAR 0 1
6318: PUSH
6319: LD_INT 70
6321: GREATER
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: LD_INT 81
6330: LESS
6331: AND
6332: IFFALSE 6341
// BuildRussianBase ( 2 ) ;
6334: LD_INT 2
6336: PPUSH
6337: CALL 9049 0 1
// if rnd > 80 and rnd < 101 then
6341: LD_VAR 0 1
6345: PUSH
6346: LD_INT 80
6348: GREATER
6349: PUSH
6350: LD_VAR 0 1
6354: PUSH
6355: LD_INT 101
6357: LESS
6358: AND
6359: IFFALSE 6368
// BuildRussianBase ( 1 ) ;
6361: LD_INT 1
6363: PPUSH
6364: CALL 9049 0 1
// end ; end ;
6368: PPOPN 1
6370: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6371: LD_INT 54
6373: PPUSH
6374: LD_INT 1
6376: PPUSH
6377: CALL_OW 321
6381: PUSH
6382: LD_INT 2
6384: EQUAL
6385: PUSH
6386: LD_INT 21
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: CALL_OW 321
6396: PUSH
6397: LD_INT 2
6399: EQUAL
6400: OR
6401: PUSH
6402: LD_INT 22
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL_OW 321
6412: PUSH
6413: LD_INT 2
6415: EQUAL
6416: OR
6417: IFFALSE 6734
6419: GO 6421
6421: DISABLE
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// begin if IsOk ( Denis ) then
6426: LD_EXP 12
6430: PPUSH
6431: CALL_OW 302
6435: IFFALSE 6529
// begin DialogueOn ;
6437: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D6-JMM-1
6448: PPUSH
6449: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
6453: LD_EXP 12
6457: PPUSH
6458: LD_STRING D6-Sci1-1
6460: PPUSH
6461: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6465: LD_EXP 1
6469: PPUSH
6470: LD_STRING D6-JMM-2
6472: PPUSH
6473: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
6477: LD_EXP 12
6481: PPUSH
6482: LD_STRING D6-Sci1-2
6484: PPUSH
6485: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6489: LD_EXP 1
6493: PPUSH
6494: LD_STRING D6-JMM-3
6496: PPUSH
6497: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
6501: LD_EXP 12
6505: PPUSH
6506: LD_STRING D6-Sci1-3
6508: PPUSH
6509: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6513: LD_EXP 1
6517: PPUSH
6518: LD_STRING D6-JMM-4
6520: PPUSH
6521: CALL_OW 88
// DialogueOff ;
6525: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6529: LD_INT 1050
6531: PPUSH
6532: CALL_OW 67
// if arabianTrait = 0 then
6536: LD_EXP 47
6540: PUSH
6541: LD_INT 0
6543: EQUAL
6544: IFFALSE 6678
// begin DialogueOn ;
6546: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 4
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 26
6572: PUSH
6573: LD_INT 1
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: PPUSH
6590: LD_STRING D5-Ar1-1
6592: PPUSH
6593: LD_STRING D5-Ar1-1
6595: PPUSH
6596: CALL 8522 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
6600: LD_EXP 25
6604: PPUSH
6605: LD_STRING D5-Diet-1
6607: PPUSH
6608: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
6612: LD_INT 22
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 4
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 26
6634: PUSH
6635: LD_INT 1
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: PPUSH
6652: LD_STRING D5-Ar1-2
6654: PPUSH
6655: LD_STRING D5-Ar1-2
6657: PPUSH
6658: CALL 8522 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
6662: LD_EXP 25
6666: PPUSH
6667: LD_STRING D5-Diet-2
6669: PPUSH
6670: CALL_OW 88
// DialogueOff ;
6674: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6678: LD_INT 2100
6680: PUSH
6681: LD_INT 3150
6683: PUSH
6684: LD_INT 4200
6686: PUSH
6687: LD_INT 5250
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 4
6701: PPUSH
6702: CALL_OW 12
6706: ARRAY
6707: PPUSH
6708: CALL_OW 67
// if arabianTrait = 0 then
6712: LD_EXP 47
6716: PUSH
6717: LD_INT 0
6719: EQUAL
6720: IFFALSE 6726
// PrepareArabianTrait ;
6722: CALL 6737 0 0
// arabianTrait = 1 ;
6726: LD_ADDR_EXP 47
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// end ;
6734: PPOPN 2
6736: END
// export function PrepareArabianTrait ; var i , tmp ; begin
6737: LD_INT 0
6739: PPUSH
6740: PPUSH
6741: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: LD_INT 22
6749: PUSH
6750: LD_INT 2
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 25
6759: PUSH
6760: LD_INT 4
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PPUSH
6771: CALL_OW 69
6775: PUSH
6776: FOR_IN
6777: IFFALSE 6790
// ComExitBuilding ( i ) ;
6779: LD_VAR 0 2
6783: PPUSH
6784: CALL_OW 122
6788: GO 6776
6790: POP
6791: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6792: LD_ADDR_VAR 0 2
6796: PUSH
6797: LD_INT 22
6799: PUSH
6800: LD_INT 2
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: LD_INT 25
6809: PUSH
6810: LD_INT 3
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PUSH
6817: EMPTY
6818: LIST
6819: LIST
6820: PPUSH
6821: CALL_OW 69
6825: PUSH
6826: FOR_IN
6827: IFFALSE 6840
// ComExitVehicle ( i ) ;
6829: LD_VAR 0 2
6833: PPUSH
6834: CALL_OW 121
6838: GO 6826
6840: POP
6841: POP
// wait ( 0 0$3 ) ;
6842: LD_INT 105
6844: PPUSH
6845: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6849: LD_INT 76
6851: PPUSH
6852: LD_INT 19
6854: PPUSH
6855: CALL_OW 84
// DialogueOn ;
6859: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6863: LD_INT 22
6865: PUSH
6866: LD_INT 1
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 26
6875: PUSH
6876: LD_INT 1
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_EXP 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: DIFF
6895: PPUSH
6896: CALL_OW 69
6900: PPUSH
6901: LD_STRING D8-Sol1-1
6903: PPUSH
6904: LD_STRING D8-Sol1-1
6906: PPUSH
6907: CALL 8522 0 3
// if IsOK ( DeltaDoctor ) then
6911: LD_EXP 17
6915: PPUSH
6916: CALL_OW 302
6920: IFFALSE 6936
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6922: LD_EXP 17
6926: PPUSH
6927: LD_STRING D8-Sci1-1
6929: PPUSH
6930: CALL_OW 88
6934: GO 7035
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6936: LD_INT 22
6938: PUSH
6939: LD_INT 1
6941: PUSH
6942: EMPTY
6943: LIST
6944: LIST
6945: PUSH
6946: LD_INT 26
6948: PUSH
6949: LD_INT 1
6951: PUSH
6952: EMPTY
6953: LIST
6954: LIST
6955: PUSH
6956: LD_INT 2
6958: PUSH
6959: LD_INT 25
6961: PUSH
6962: LD_INT 1
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 25
6971: PUSH
6972: LD_INT 2
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 25
6981: PUSH
6982: LD_INT 3
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 25
6991: PUSH
6992: LD_INT 4
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: LIST
7010: PUSH
7011: LD_EXP 1
7015: PUSH
7016: EMPTY
7017: LIST
7018: DIFF
7019: PPUSH
7020: CALL_OW 69
7024: PPUSH
7025: LD_STRING D8-Sol1-1
7027: PPUSH
7028: LD_STRING D8-Sol1-1
7030: PPUSH
7031: CALL 8522 0 3
// Say ( JMM , D8-JMM-1 ) ;
7035: LD_EXP 1
7039: PPUSH
7040: LD_STRING D8-JMM-1
7042: PPUSH
7043: CALL_OW 88
// DialogueOff ;
7047: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7051: LD_INT 2
7053: PPUSH
7054: LD_INT 2
7056: PPUSH
7057: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7061: LD_INT 1
7063: PPUSH
7064: LD_INT 2
7066: PPUSH
7067: LD_INT 2
7069: PPUSH
7070: LD_INT 1
7072: PPUSH
7073: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7077: LD_INT 3
7079: PPUSH
7080: LD_INT 2
7082: PPUSH
7083: LD_INT 1
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
7093: LD_ADDR_VAR 0 2
7097: PUSH
7098: LD_INT 22
7100: PUSH
7101: LD_INT 2
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: PUSH
7108: LD_INT 21
7110: PUSH
7111: LD_INT 1
7113: PUSH
7114: EMPTY
7115: LIST
7116: LIST
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PPUSH
7122: CALL_OW 69
7126: PUSH
7127: FOR_IN
7128: IFFALSE 7268
// begin ComExitBuilding ( i ) ;
7130: LD_VAR 0 2
7134: PPUSH
7135: CALL_OW 122
// wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7146: LD_VAR 0 2
7150: PPUSH
7151: LD_INT 77
7153: PPUSH
7154: LD_INT 10
7156: PPUSH
7157: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7161: LD_VAR 0 2
7165: PPUSH
7166: LD_INT 82
7168: PPUSH
7169: LD_INT 5
7171: PPUSH
7172: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7176: LD_VAR 0 2
7180: PPUSH
7181: LD_INT 95
7183: PPUSH
7184: LD_INT 12
7186: PPUSH
7187: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7191: LD_VAR 0 2
7195: PPUSH
7196: LD_INT 102
7198: PPUSH
7199: LD_INT 11
7201: PPUSH
7202: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7206: LD_VAR 0 2
7210: PPUSH
7211: LD_INT 116
7213: PPUSH
7214: LD_INT 15
7216: PPUSH
7217: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7221: LD_VAR 0 2
7225: PPUSH
7226: LD_INT 140
7228: PPUSH
7229: LD_INT 25
7231: PPUSH
7232: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7236: LD_VAR 0 2
7240: PPUSH
7241: LD_INT 160
7243: PPUSH
7244: LD_INT 56
7246: PPUSH
7247: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7251: LD_VAR 0 2
7255: PPUSH
7256: LD_INT 189
7258: PPUSH
7259: LD_INT 79
7261: PPUSH
7262: CALL_OW 174
// end ;
7266: GO 7127
7268: POP
7269: POP
// arabianAttackersAI = 1 ;
7270: LD_ADDR_EXP 44
7274: PUSH
7275: LD_INT 1
7277: ST_TO_ADDR
// wait ( 0 0$30 ) ;
7278: LD_INT 1050
7280: PPUSH
7281: CALL_OW 67
// if IsOk ( Gary ) then
7285: LD_EXP 10
7289: PPUSH
7290: CALL_OW 302
7294: IFFALSE 7308
// Say ( Gary , D8a-Gary-1 ) ;
7296: LD_EXP 10
7300: PPUSH
7301: LD_STRING D8a-Gary-1
7303: PPUSH
7304: CALL_OW 88
// wait ( 0 0$5 ) ;
7308: LD_INT 175
7310: PPUSH
7311: CALL_OW 67
// if IsOK ( Khatam ) then
7315: LD_EXP 14
7319: PPUSH
7320: CALL_OW 302
7324: IFFALSE 7596
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] [ 1 ] ;
7326: LD_ADDR_VAR 0 3
7330: PUSH
7331: LD_INT 22
7333: PUSH
7334: LD_INT 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 26
7343: PUSH
7344: LD_INT 1
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 2
7353: PUSH
7354: LD_INT 25
7356: PUSH
7357: LD_INT 1
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: PUSH
7364: LD_INT 25
7366: PUSH
7367: LD_INT 2
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 3
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 25
7386: PUSH
7387: LD_INT 4
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: LIST
7405: PPUSH
7406: CALL_OW 69
7410: PUSH
7411: LD_EXP 1
7415: PUSH
7416: LD_EXP 14
7420: PUSH
7421: LD_EXP 13
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: LIST
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: DIFF
7435: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7436: LD_EXP 14
7440: PPUSH
7441: LD_INT 8
7443: PPUSH
7444: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7448: LD_EXP 14
7452: PPUSH
7453: CALL_OW 122
// wait ( 0 0$1 ) ;
7457: LD_INT 35
7459: PPUSH
7460: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7464: LD_EXP 14
7468: PPUSH
7469: CALL_OW 121
// wait ( 0 0$1 ) ;
7473: LD_INT 35
7475: PPUSH
7476: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7480: LD_EXP 14
7484: PPUSH
7485: LD_INT 7
7487: PPUSH
7488: CALL_OW 113
// DialogueOn ;
7492: CALL_OW 6
// DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
7496: LD_VAR 0 3
7500: PPUSH
7501: LD_STRING D8b-Sol1-1
7503: PPUSH
7504: LD_STRING D8b-FSol1-1
7506: PPUSH
7507: CALL 8522 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
7511: LD_EXP 14
7515: PPUSH
7516: LD_STRING D8b-Khat-1
7518: PPUSH
7519: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-2 , D8b-FSol1-2 ) ;
7523: LD_VAR 0 3
7527: PPUSH
7528: LD_STRING D8b-Sol1-2
7530: PPUSH
7531: LD_STRING D8b-FSol1-2
7533: PPUSH
7534: CALL 8522 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
7538: LD_EXP 14
7542: PPUSH
7543: LD_STRING D8b-Khat-2
7545: PPUSH
7546: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-3 , D8b-FSol1-3 ) ;
7550: LD_VAR 0 3
7554: PPUSH
7555: LD_STRING D8b-Sol1-3
7557: PPUSH
7558: LD_STRING D8b-FSol1-3
7560: PPUSH
7561: CALL 8522 0 3
// Say ( Khatam , D8b-Khat-3 ) ;
7565: LD_EXP 14
7569: PPUSH
7570: LD_STRING D8b-Khat-3
7572: PPUSH
7573: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-4 , D8b-FSol1-4 ) ;
7577: LD_VAR 0 3
7581: PPUSH
7582: LD_STRING D8b-Sol1-4
7584: PPUSH
7585: LD_STRING D8b-FSol1-4
7587: PPUSH
7588: CALL 8522 0 3
// DialogueOff ;
7592: CALL_OW 7
// end ; end ;
7596: LD_VAR 0 1
7600: RET
// every 0 0$1 do var i ;
7601: GO 7603
7603: DISABLE
7604: LD_INT 0
7606: PPUSH
// begin enable ;
7607: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
7608: LD_ADDR_VAR 0 1
7612: PUSH
7613: LD_INT 7
7615: PPUSH
7616: LD_INT 22
7618: PUSH
7619: LD_INT 2
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PPUSH
7626: CALL_OW 70
7630: PUSH
7631: FOR_IN
7632: IFFALSE 7700
// begin if GetClass ( i ) = 4 then
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 257
7643: PUSH
7644: LD_INT 4
7646: EQUAL
7647: IFFALSE 7659
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
7649: LD_INT 1
7651: PPUSH
7652: LD_STRING 10_ScientistsEscape_1
7654: PPUSH
7655: CALL_OW 39
// if i = Dietrich then
7659: LD_VAR 0 1
7663: PUSH
7664: LD_EXP 25
7668: EQUAL
7669: IFFALSE 7681
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7671: LD_INT 1
7673: PPUSH
7674: LD_STRING 10_GensherEscape_1
7676: PPUSH
7677: CALL_OW 39
// arabianEscape = 1 ;
7681: LD_ADDR_EXP 45
7685: PUSH
7686: LD_INT 1
7688: ST_TO_ADDR
// RemoveUnit ( i ) ;
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 64
// end ;
7698: GO 7631
7700: POP
7701: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
7702: LD_EXP 14
7706: PPUSH
7707: LD_INT 7
7709: PPUSH
7710: CALL_OW 308
7714: IFFALSE 7733
// begin KhatamStatus = 1 ;
7716: LD_ADDR_EXP 48
7720: PUSH
7721: LD_INT 1
7723: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
7724: LD_EXP 14
7728: PPUSH
7729: CALL_OW 64
// end ; end ;
7733: PPOPN 1
7735: END
// every 0 0$1 trigger IsDead ( Khatam ) do
7736: LD_EXP 14
7740: PPUSH
7741: CALL_OW 301
7745: IFFALSE 7758
7747: GO 7749
7749: DISABLE
// KhatamStatus = 0 ;
7750: LD_ADDR_EXP 48
7754: PUSH
7755: LD_INT 0
7757: ST_TO_ADDR
7758: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
7759: LD_INT 22
7761: PUSH
7762: LD_INT 2
7764: PUSH
7765: EMPTY
7766: LIST
7767: LIST
7768: PUSH
7769: LD_INT 21
7771: PUSH
7772: LD_INT 1
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PPUSH
7783: CALL_OW 69
7787: PUSH
7788: LD_INT 0
7790: EQUAL
7791: PUSH
7792: LD_INT 22
7794: PUSH
7795: LD_INT 4
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 21
7804: PUSH
7805: LD_INT 1
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PPUSH
7816: CALL_OW 69
7820: PUSH
7821: LD_INT 0
7823: EQUAL
7824: AND
7825: IFFALSE 7838
7827: GO 7829
7829: DISABLE
// arabianDefeated = 1 ;
7830: LD_ADDR_EXP 46
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
7838: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
7839: LD_INT 54
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: CALL_OW 321
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: PUSH
7854: LD_INT 55
7856: PPUSH
7857: LD_INT 1
7859: PPUSH
7860: CALL_OW 321
7864: PUSH
7865: LD_INT 2
7867: EQUAL
7868: AND
7869: PUSH
7870: LD_INT 21
7872: PPUSH
7873: LD_INT 1
7875: PPUSH
7876: CALL_OW 321
7880: PUSH
7881: LD_INT 2
7883: EQUAL
7884: AND
7885: PUSH
7886: LD_INT 22
7888: PPUSH
7889: LD_INT 1
7891: PPUSH
7892: CALL_OW 321
7896: PUSH
7897: LD_INT 2
7899: EQUAL
7900: AND
7901: PUSH
7902: LD_INT 12
7904: PPUSH
7905: LD_INT 1
7907: PPUSH
7908: CALL_OW 321
7912: PUSH
7913: LD_INT 2
7915: EQUAL
7916: AND
7917: PUSH
7918: LD_INT 32
7920: PPUSH
7921: LD_INT 1
7923: PPUSH
7924: CALL_OW 321
7928: PUSH
7929: LD_INT 2
7931: EQUAL
7932: AND
7933: PUSH
7934: LD_EXP 52
7938: PUSH
7939: LD_INT 0
7941: EQUAL
7942: AND
7943: PUSH
7944: LD_EXP 47
7948: PUSH
7949: LD_INT 0
7951: EQUAL
7952: AND
7953: IFFALSE 7970
7955: GO 7957
7957: DISABLE
// begin PrepareArabianTrait ;
7958: CALL 6737 0 0
// arabianTrait = 1 ;
7962: LD_ADDR_EXP 47
7966: PUSH
7967: LD_INT 1
7969: ST_TO_ADDR
// end ;
7970: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
7971: LD_EXP 27
7975: PUSH
7976: LD_INT 1
7978: EQUAL
7979: PUSH
7980: LD_STRING 02_mikhailStatus_1
7982: PPUSH
7983: LD_INT 0
7985: PPUSH
7986: CALL_OW 30
7990: PUSH
7991: LD_INT 1
7993: EQUAL
7994: AND
7995: IFFALSE 8004
7997: GO 7999
7999: DISABLE
// PrepareCornell ;
8000: CALL 3688 0 0
8004: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
8005: LD_INT 1
8007: PPUSH
8008: LD_EXP 19
8012: PPUSH
8013: CALL_OW 292
8017: IFFALSE 8242
8019: GO 8021
8021: DISABLE
// begin InGameOn ;
8022: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8026: LD_EXP 19
8030: PPUSH
8031: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8035: LD_EXP 19
8039: PPUSH
8040: LD_STRING D7-Corn-1
8042: PPUSH
8043: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
8047: LD_INT 22
8049: PUSH
8050: LD_INT 1
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 25
8062: PUSH
8063: LD_INT 1
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 25
8072: PUSH
8073: LD_INT 2
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PUSH
8080: LD_INT 25
8082: PUSH
8083: LD_INT 3
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PUSH
8090: LD_INT 25
8092: PUSH
8093: LD_INT 4
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: LIST
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: PUSH
8116: LD_EXP 1
8120: PUSH
8121: LD_EXP 13
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: DIFF
8130: PPUSH
8131: LD_STRING D7-Sol1-1
8133: PPUSH
8134: LD_STRING D7-FSol1-1
8136: PPUSH
8137: CALL 8522 0 3
// CenterNowOnUnits ( Cornell ) ;
8141: LD_EXP 19
8145: PPUSH
8146: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8150: LD_EXP 19
8154: PPUSH
8155: LD_STRING D7-Corn-2
8157: PPUSH
8158: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8162: LD_EXP 1
8166: PPUSH
8167: LD_STRING D7-JMM-2
8169: PPUSH
8170: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8174: LD_EXP 19
8178: PPUSH
8179: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8183: LD_EXP 19
8187: PPUSH
8188: LD_STRING D7-Corn-3
8190: PPUSH
8191: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8195: LD_EXP 19
8199: PPUSH
8200: LD_INT 250
8202: PPUSH
8203: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
8207: LD_EXP 19
8211: PPUSH
8212: LD_INT 1
8214: PPUSH
8215: CALL_OW 235
// wait ( 0 0$1 ) ;
8219: LD_INT 35
8221: PPUSH
8222: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
8226: LD_EXP 1
8230: PPUSH
8231: LD_STRING D7-JMM-3
8233: PPUSH
8234: CALL_OW 88
// InGameOff ;
8238: CALL_OW 9
// end ;
8242: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
8243: LD_EXP 19
8247: PPUSH
8248: CALL_OW 255
8252: PUSH
8253: LD_INT 1
8255: EQUAL
8256: PUSH
8257: LD_EXP 19
8261: PPUSH
8262: CALL_OW 256
8266: PUSH
8267: LD_INT 251
8269: GREATER
8270: AND
8271: IFFALSE 8464
8273: GO 8275
8275: DISABLE
// begin DialogueOn ;
8276: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
8280: LD_EXP 1
8284: PPUSH
8285: LD_STRING D7a-JMM-1
8287: PPUSH
8288: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
8292: LD_EXP 19
8296: PPUSH
8297: LD_STRING D7a-Corn-1
8299: PPUSH
8300: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
8304: LD_EXP 1
8308: PPUSH
8309: LD_STRING D7a-JMM-2
8311: PPUSH
8312: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
8316: LD_EXP 19
8320: PPUSH
8321: LD_STRING D7a-Corn-2
8323: PPUSH
8324: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
8328: LD_EXP 1
8332: PPUSH
8333: LD_STRING D7a-JMM-3
8335: PPUSH
8336: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
8340: LD_EXP 19
8344: PPUSH
8345: LD_STRING D7a-Corn-3
8347: PPUSH
8348: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
8352: LD_EXP 1
8356: PPUSH
8357: LD_STRING D7a-JMM-4
8359: PPUSH
8360: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
8364: LD_EXP 19
8368: PPUSH
8369: LD_STRING D7a-Corn-4
8371: PPUSH
8372: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
8376: LD_EXP 1
8380: PPUSH
8381: LD_STRING D7a-JMM-5
8383: PPUSH
8384: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
8388: LD_EXP 19
8392: PPUSH
8393: LD_STRING D7a-Corn-5
8395: PPUSH
8396: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
8400: LD_EXP 1
8404: PPUSH
8405: LD_STRING D7a-JMM-6
8407: PPUSH
8408: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
8412: LD_EXP 19
8416: PPUSH
8417: LD_STRING D7a-Corn-6
8419: PPUSH
8420: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
8424: LD_EXP 1
8428: PPUSH
8429: LD_STRING D7a-JMM-7
8431: PPUSH
8432: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
8436: LD_EXP 19
8440: PPUSH
8441: LD_STRING D7a-Corn-7
8443: PPUSH
8444: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
8448: LD_EXP 1
8452: PPUSH
8453: LD_STRING D7a-JMM-8
8455: PPUSH
8456: CALL_OW 88
// DialogueOff ;
8460: CALL_OW 7
// end ; end_of_file
8464: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8465: LD_INT 0
8467: PPUSH
8468: PPUSH
// if exist_mode then
8469: LD_VAR 0 2
8473: IFFALSE 8492
// unit := CreateCharacter ( ident ) else
8475: LD_ADDR_VAR 0 4
8479: PUSH
8480: LD_VAR 0 1
8484: PPUSH
8485: CALL_OW 34
8489: ST_TO_ADDR
8490: GO 8507
// unit := NewCharacter ( ident ) ;
8492: LD_ADDR_VAR 0 4
8496: PUSH
8497: LD_VAR 0 1
8501: PPUSH
8502: CALL_OW 25
8506: ST_TO_ADDR
// result := unit ;
8507: LD_ADDR_VAR 0 3
8511: PUSH
8512: LD_VAR 0 4
8516: ST_TO_ADDR
// end ;
8517: LD_VAR 0 3
8521: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
8522: LD_INT 0
8524: PPUSH
8525: PPUSH
8526: PPUSH
// rnd = rand ( 1 , characters ) ;
8527: LD_ADDR_VAR 0 6
8531: PUSH
8532: LD_INT 1
8534: PPUSH
8535: LD_VAR 0 1
8539: PPUSH
8540: CALL_OW 12
8544: ST_TO_ADDR
// for i = 1 to characters do
8545: LD_ADDR_VAR 0 5
8549: PUSH
8550: DOUBLE
8551: LD_INT 1
8553: DEC
8554: ST_TO_ADDR
8555: LD_VAR 0 1
8559: PUSH
8560: FOR_TO
8561: IFFALSE 8671
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
8563: LD_VAR 0 5
8567: PUSH
8568: LD_VAR 0 6
8572: EQUAL
8573: PUSH
8574: LD_VAR 0 1
8578: PUSH
8579: LD_VAR 0 5
8583: ARRAY
8584: PPUSH
8585: CALL_OW 258
8589: PUSH
8590: LD_INT 1
8592: EQUAL
8593: AND
8594: IFFALSE 8616
// Say ( characters [ i ] , dialogMID ) ;
8596: LD_VAR 0 1
8600: PUSH
8601: LD_VAR 0 5
8605: ARRAY
8606: PPUSH
8607: LD_VAR 0 2
8611: PPUSH
8612: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
8616: LD_VAR 0 5
8620: PUSH
8621: LD_VAR 0 6
8625: EQUAL
8626: PUSH
8627: LD_VAR 0 1
8631: PUSH
8632: LD_VAR 0 5
8636: ARRAY
8637: PPUSH
8638: CALL_OW 258
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: AND
8647: IFFALSE 8669
// Say ( characters [ i ] , dialogFID ) ;
8649: LD_VAR 0 1
8653: PUSH
8654: LD_VAR 0 5
8658: ARRAY
8659: PPUSH
8660: LD_VAR 0 3
8664: PPUSH
8665: CALL_OW 88
// end ;
8669: GO 8560
8671: POP
8672: POP
// end ;
8673: LD_VAR 0 4
8677: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8678: LD_INT 0
8680: PPUSH
8681: PPUSH
// for i in charactersList do
8682: LD_ADDR_VAR 0 4
8686: PUSH
8687: LD_VAR 0 1
8691: PUSH
8692: FOR_IN
8693: IFFALSE 8722
// begin if IsOk ( i ) then
8695: LD_VAR 0 4
8699: PPUSH
8700: CALL_OW 302
8704: IFFALSE 8720
// SaveCharacters ( i , ident ) ;
8706: LD_VAR 0 4
8710: PPUSH
8711: LD_VAR 0 2
8715: PPUSH
8716: CALL_OW 38
// end ;
8720: GO 8692
8722: POP
8723: POP
// end ;
8724: LD_VAR 0 3
8728: RET
// export function PrepareDifficulty ; begin
8729: LD_INT 0
8731: PPUSH
// if difficulty = 1 then
8732: LD_OWVAR 67
8736: PUSH
8737: LD_INT 1
8739: EQUAL
8740: IFFALSE 8784
// begin RuSolMinLevel = 4 ;
8742: LD_ADDR_EXP 34
8746: PUSH
8747: LD_INT 4
8749: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
8750: LD_ADDR_EXP 35
8754: PUSH
8755: LD_INT 7
8757: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8758: LD_INT 51
8760: PPUSH
8761: LD_INT 6
8763: PPUSH
8764: LD_INT 2
8766: PPUSH
8767: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8771: LD_INT 51
8773: PPUSH
8774: LD_INT 5
8776: PPUSH
8777: LD_INT 2
8779: PPUSH
8780: CALL_OW 322
// end ; if difficulty = 2 then
8784: LD_OWVAR 67
8788: PUSH
8789: LD_INT 2
8791: EQUAL
8792: IFFALSE 8888
// begin RuSolMinLevel = 5 ;
8794: LD_ADDR_EXP 34
8798: PUSH
8799: LD_INT 5
8801: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
8802: LD_ADDR_EXP 35
8806: PUSH
8807: LD_INT 7
8809: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8810: LD_INT 51
8812: PPUSH
8813: LD_INT 6
8815: PPUSH
8816: LD_INT 2
8818: PPUSH
8819: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
8823: LD_INT 57
8825: PPUSH
8826: LD_INT 6
8828: PPUSH
8829: LD_INT 2
8831: PPUSH
8832: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8836: LD_INT 63
8838: PPUSH
8839: LD_INT 6
8841: PPUSH
8842: LD_INT 2
8844: PPUSH
8845: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8849: LD_INT 51
8851: PPUSH
8852: LD_INT 5
8854: PPUSH
8855: LD_INT 2
8857: PPUSH
8858: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
8862: LD_INT 5
8864: PPUSH
8865: LD_INT 2
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
8875: LD_INT 5
8877: PPUSH
8878: LD_INT 5
8880: PPUSH
8881: LD_INT 2
8883: PPUSH
8884: CALL_OW 322
// end ; if difficulty = 3 then
8888: LD_OWVAR 67
8892: PUSH
8893: LD_INT 3
8895: EQUAL
8896: IFFALSE 9044
// begin RuSolMinLevel = 6 ;
8898: LD_ADDR_EXP 34
8902: PUSH
8903: LD_INT 6
8905: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
8906: LD_ADDR_EXP 35
8910: PUSH
8911: LD_INT 8
8913: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8914: LD_INT 51
8916: PPUSH
8917: LD_INT 6
8919: PPUSH
8920: LD_INT 2
8922: PPUSH
8923: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
8927: LD_INT 57
8929: PPUSH
8930: LD_INT 6
8932: PPUSH
8933: LD_INT 2
8935: PPUSH
8936: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
8940: LD_INT 52
8942: PPUSH
8943: LD_INT 6
8945: PPUSH
8946: LD_INT 2
8948: PPUSH
8949: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
8953: LD_INT 58
8955: PPUSH
8956: LD_INT 6
8958: PPUSH
8959: LD_INT 2
8961: PPUSH
8962: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8966: LD_INT 63
8968: PPUSH
8969: LD_INT 6
8971: PPUSH
8972: LD_INT 2
8974: PPUSH
8975: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
8979: LD_INT 64
8981: PPUSH
8982: LD_INT 6
8984: PPUSH
8985: LD_INT 2
8987: PPUSH
8988: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8992: LD_INT 51
8994: PPUSH
8995: LD_INT 5
8997: PPUSH
8998: LD_INT 2
9000: PPUSH
9001: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
9005: LD_INT 52
9007: PPUSH
9008: LD_INT 5
9010: PPUSH
9011: LD_INT 2
9013: PPUSH
9014: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
9018: LD_INT 66
9020: PPUSH
9021: LD_INT 2
9023: PPUSH
9024: LD_INT 2
9026: PPUSH
9027: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
9031: LD_INT 66
9033: PPUSH
9034: LD_INT 5
9036: PPUSH
9037: LD_INT 2
9039: PPUSH
9040: CALL_OW 322
// end ; end ;
9044: LD_VAR 0 1
9048: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
9049: LD_INT 0
9051: PPUSH
9052: PPUSH
9053: PPUSH
9054: PPUSH
// ruPossition = position ;
9055: LD_ADDR_EXP 39
9059: PUSH
9060: LD_VAR 0 1
9064: ST_TO_ADDR
// if position = 1 then
9065: LD_VAR 0 1
9069: PUSH
9070: LD_INT 1
9072: EQUAL
9073: IFFALSE 9849
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9075: LD_ADDR_VAR 0 4
9079: PUSH
9080: LD_INT 22
9082: PUSH
9083: LD_INT 3
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: PUSH
9090: LD_INT 25
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: EMPTY
9097: LIST
9098: LIST
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PPUSH
9104: CALL_OW 69
9108: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
9109: LD_ADDR_VAR 0 5
9113: PUSH
9114: LD_INT 0
9116: PUSH
9117: LD_INT 49
9119: PUSH
9120: LD_INT 74
9122: PUSH
9123: LD_INT 3
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: PUSH
9132: LD_INT 4
9134: PUSH
9135: LD_INT 73
9137: PUSH
9138: LD_INT 88
9140: PUSH
9141: LD_INT 5
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 4
9152: PUSH
9153: LD_INT 56
9155: PUSH
9156: LD_INT 62
9158: PUSH
9159: LD_INT 3
9161: PUSH
9162: EMPTY
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 29
9170: PUSH
9171: LD_INT 43
9173: PUSH
9174: LD_INT 68
9176: PUSH
9177: LD_INT 2
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 30
9188: PUSH
9189: LD_INT 43
9191: PUSH
9192: LD_INT 79
9194: PUSH
9195: LD_INT 5
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 28
9206: PUSH
9207: LD_INT 60
9209: PUSH
9210: LD_INT 75
9212: PUSH
9213: LD_INT 1
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 2
9224: PUSH
9225: LD_INT 50
9227: PUSH
9228: LD_INT 87
9230: PUSH
9231: LD_INT 1
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 28
9242: PUSH
9243: LD_INT 45
9245: PUSH
9246: LD_INT 67
9248: PUSH
9249: LD_INT 2
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: LIST
9256: LIST
9257: PUSH
9258: LD_INT 17
9260: PUSH
9261: LD_INT 47
9263: PUSH
9264: LD_INT 84
9266: PUSH
9267: LD_INT 2
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 18
9278: PUSH
9279: LD_INT 46
9281: PUSH
9282: LD_INT 87
9284: PUSH
9285: LD_INT 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 28
9296: PUSH
9297: LD_INT 41
9299: PUSH
9300: LD_INT 64
9302: PUSH
9303: LD_INT 5
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: LD_INT 32
9314: PUSH
9315: LD_INT 75
9317: PUSH
9318: LD_INT 76
9320: PUSH
9321: LD_INT 5
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 32
9332: PUSH
9333: LD_INT 77
9335: PUSH
9336: LD_INT 75
9338: PUSH
9339: LD_INT 5
9341: PUSH
9342: EMPTY
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PUSH
9348: LD_INT 32
9350: PUSH
9351: LD_INT 69
9353: PUSH
9354: LD_INT 68
9356: PUSH
9357: LD_INT 3
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: PUSH
9366: LD_INT 32
9368: PUSH
9369: LD_INT 59
9371: PUSH
9372: LD_INT 96
9374: PUSH
9375: LD_INT 5
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: LIST
9382: LIST
9383: PUSH
9384: LD_INT 32
9386: PUSH
9387: LD_INT 56
9389: PUSH
9390: LD_INT 96
9392: PUSH
9393: LD_INT 0
9395: PUSH
9396: EMPTY
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: PUSH
9402: LD_INT 32
9404: PUSH
9405: LD_INT 51
9407: PUSH
9408: LD_INT 61
9410: PUSH
9411: LD_INT 3
9413: PUSH
9414: EMPTY
9415: LIST
9416: LIST
9417: LIST
9418: LIST
9419: PUSH
9420: LD_INT 32
9422: PUSH
9423: LD_INT 42
9425: PUSH
9426: LD_INT 60
9428: PUSH
9429: LD_INT 3
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 32
9440: PUSH
9441: LD_INT 36
9443: PUSH
9444: LD_INT 58
9446: PUSH
9447: LD_INT 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: LIST
9454: LIST
9455: PUSH
9456: LD_INT 32
9458: PUSH
9459: LD_INT 39
9461: PUSH
9462: LD_INT 59
9464: PUSH
9465: LD_INT 3
9467: PUSH
9468: EMPTY
9469: LIST
9470: LIST
9471: LIST
9472: LIST
9473: PUSH
9474: LD_INT 32
9476: PUSH
9477: LD_INT 61
9479: PUSH
9480: LD_INT 64
9482: PUSH
9483: LD_INT 3
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: PUSH
9492: LD_INT 33
9494: PUSH
9495: LD_INT 63
9497: PUSH
9498: LD_INT 90
9500: PUSH
9501: LD_INT 5
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: PUSH
9510: LD_INT 33
9512: PUSH
9513: LD_INT 64
9515: PUSH
9516: LD_INT 88
9518: PUSH
9519: LD_INT 5
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: PUSH
9528: LD_INT 33
9530: PUSH
9531: LD_INT 72
9533: PUSH
9534: LD_INT 82
9536: PUSH
9537: LD_INT 5
9539: PUSH
9540: EMPTY
9541: LIST
9542: LIST
9543: LIST
9544: LIST
9545: PUSH
9546: LD_INT 6
9548: PUSH
9549: LD_INT 42
9551: PUSH
9552: LD_INT 74
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 6
9566: PUSH
9567: LD_INT 56
9569: PUSH
9570: LD_INT 77
9572: PUSH
9573: LD_INT 2
9575: PUSH
9576: EMPTY
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: PUSH
9582: LD_INT 21
9584: PUSH
9585: LD_INT 54
9587: PUSH
9588: LD_INT 91
9590: PUSH
9591: LD_INT 5
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 16
9602: PUSH
9603: LD_INT 50
9605: PUSH
9606: LD_INT 83
9608: PUSH
9609: LD_INT 3
9611: PUSH
9612: EMPTY
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 24
9620: PUSH
9621: LD_INT 50
9623: PUSH
9624: LD_INT 90
9626: PUSH
9627: LD_INT 0
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9667: LD_ADDR_VAR 0 3
9671: PUSH
9672: LD_INT 22
9674: PUSH
9675: LD_INT 3
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: PUSH
9682: LD_INT 3
9684: PUSH
9685: LD_INT 25
9687: PUSH
9688: LD_INT 2
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PPUSH
9703: CALL_OW 69
9707: PUSH
9708: FOR_IN
9709: IFFALSE 9756
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
9711: LD_VAR 0 3
9715: PPUSH
9716: LD_VAR 0 5
9720: PUSH
9721: LD_INT 2
9723: ARRAY
9724: PUSH
9725: LD_INT 2
9727: ARRAY
9728: PUSH
9729: LD_INT 3
9731: PLUS
9732: PPUSH
9733: LD_VAR 0 5
9737: PUSH
9738: LD_INT 2
9740: ARRAY
9741: PUSH
9742: LD_INT 3
9744: ARRAY
9745: PUSH
9746: LD_INT 2
9748: PLUS
9749: PPUSH
9750: CALL_OW 171
9754: GO 9708
9756: POP
9757: POP
// for i := 1 to buildingsTab do
9758: LD_ADDR_VAR 0 3
9762: PUSH
9763: DOUBLE
9764: LD_INT 1
9766: DEC
9767: ST_TO_ADDR
9768: LD_VAR 0 5
9772: PUSH
9773: FOR_TO
9774: IFFALSE 9847
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9776: LD_VAR 0 4
9780: PPUSH
9781: LD_VAR 0 5
9785: PUSH
9786: LD_VAR 0 3
9790: ARRAY
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PPUSH
9796: LD_VAR 0 5
9800: PUSH
9801: LD_VAR 0 3
9805: ARRAY
9806: PUSH
9807: LD_INT 2
9809: ARRAY
9810: PPUSH
9811: LD_VAR 0 5
9815: PUSH
9816: LD_VAR 0 3
9820: ARRAY
9821: PUSH
9822: LD_INT 3
9824: ARRAY
9825: PPUSH
9826: LD_VAR 0 5
9830: PUSH
9831: LD_VAR 0 3
9835: ARRAY
9836: PUSH
9837: LD_INT 4
9839: ARRAY
9840: PPUSH
9841: CALL_OW 205
9845: GO 9773
9847: POP
9848: POP
// end ; if position = 2 then
9849: LD_VAR 0 1
9853: PUSH
9854: LD_INT 2
9856: EQUAL
9857: IFFALSE 10500
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9859: LD_ADDR_VAR 0 4
9863: PUSH
9864: LD_INT 22
9866: PUSH
9867: LD_INT 3
9869: PUSH
9870: EMPTY
9871: LIST
9872: LIST
9873: PUSH
9874: LD_INT 25
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: PPUSH
9888: CALL_OW 69
9892: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
9893: LD_ADDR_VAR 0 5
9897: PUSH
9898: LD_INT 0
9900: PUSH
9901: LD_INT 104
9903: PUSH
9904: LD_INT 110
9906: PUSH
9907: LD_INT 5
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: PUSH
9916: LD_INT 4
9918: PUSH
9919: LD_INT 98
9921: PUSH
9922: LD_INT 90
9924: PUSH
9925: LD_INT 3
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: LIST
9932: LIST
9933: PUSH
9934: LD_INT 29
9936: PUSH
9937: LD_INT 103
9939: PUSH
9940: LD_INT 114
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: EMPTY
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: PUSH
9952: LD_INT 30
9954: PUSH
9955: LD_INT 99
9957: PUSH
9958: LD_INT 114
9960: PUSH
9961: LD_INT 3
9963: PUSH
9964: EMPTY
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: PUSH
9970: LD_INT 28
9972: PUSH
9973: LD_INT 100
9975: PUSH
9976: LD_INT 112
9978: PUSH
9979: LD_INT 1
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: LD_INT 92
9993: PUSH
9994: LD_INT 101
9996: PUSH
9997: LD_INT 0
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 28
10008: PUSH
10009: LD_INT 97
10011: PUSH
10012: LD_INT 116
10014: PUSH
10015: LD_INT 5
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_INT 17
10026: PUSH
10027: LD_INT 96
10029: PUSH
10030: LD_INT 101
10032: PUSH
10033: LD_INT 4
10035: PUSH
10036: EMPTY
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: PUSH
10042: LD_INT 18
10044: PUSH
10045: LD_INT 88
10047: PUSH
10048: LD_INT 97
10050: PUSH
10051: LD_INT 2
10053: PUSH
10054: EMPTY
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: PUSH
10060: LD_INT 28
10062: PUSH
10063: LD_INT 106
10065: PUSH
10066: LD_INT 92
10068: PUSH
10069: LD_INT 2
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: PUSH
10078: LD_INT 32
10080: PUSH
10081: LD_INT 88
10083: PUSH
10084: LD_INT 89
10086: PUSH
10087: LD_INT 2
10089: PUSH
10090: EMPTY
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 32
10098: PUSH
10099: LD_INT 86
10101: PUSH
10102: LD_INT 90
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: PUSH
10114: LD_INT 32
10116: PUSH
10117: LD_INT 85
10119: PUSH
10120: LD_INT 99
10122: PUSH
10123: LD_INT 2
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_INT 32
10134: PUSH
10135: LD_INT 85
10137: PUSH
10138: LD_INT 107
10140: PUSH
10141: LD_INT 1
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 33
10152: PUSH
10153: LD_INT 105
10155: PUSH
10156: LD_INT 99
10158: PUSH
10159: LD_INT 1
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 33
10170: PUSH
10171: LD_INT 102
10173: PUSH
10174: LD_INT 92
10176: PUSH
10177: LD_INT 3
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 33
10188: PUSH
10189: LD_INT 105
10191: PUSH
10192: LD_INT 92
10194: PUSH
10195: LD_INT 2
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 6
10206: PUSH
10207: LD_INT 92
10209: PUSH
10210: LD_INT 110
10212: PUSH
10213: LD_INT 0
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 6
10224: PUSH
10225: LD_INT 103
10227: PUSH
10228: LD_INT 103
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 21
10242: PUSH
10243: LD_INT 89
10245: PUSH
10246: LD_INT 101
10248: PUSH
10249: LD_INT 1
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 16
10260: PUSH
10261: LD_INT 95
10263: PUSH
10264: LD_INT 104
10266: PUSH
10267: LD_INT 4
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 24
10278: PUSH
10279: LD_INT 92
10281: PUSH
10282: LD_INT 105
10284: PUSH
10285: LD_INT 0
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10318: LD_ADDR_VAR 0 3
10322: PUSH
10323: LD_INT 22
10325: PUSH
10326: LD_INT 3
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 3
10335: PUSH
10336: LD_INT 25
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PPUSH
10354: CALL_OW 69
10358: PUSH
10359: FOR_IN
10360: IFFALSE 10407
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_VAR 0 5
10371: PUSH
10372: LD_INT 2
10374: ARRAY
10375: PUSH
10376: LD_INT 2
10378: ARRAY
10379: PUSH
10380: LD_INT 2
10382: PLUS
10383: PPUSH
10384: LD_VAR 0 5
10388: PUSH
10389: LD_INT 2
10391: ARRAY
10392: PUSH
10393: LD_INT 3
10395: ARRAY
10396: PUSH
10397: LD_INT 1
10399: PLUS
10400: PPUSH
10401: CALL_OW 171
10405: GO 10359
10407: POP
10408: POP
// for i := 1 to buildingsTab do
10409: LD_ADDR_VAR 0 3
10413: PUSH
10414: DOUBLE
10415: LD_INT 1
10417: DEC
10418: ST_TO_ADDR
10419: LD_VAR 0 5
10423: PUSH
10424: FOR_TO
10425: IFFALSE 10498
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10427: LD_VAR 0 4
10431: PPUSH
10432: LD_VAR 0 5
10436: PUSH
10437: LD_VAR 0 3
10441: ARRAY
10442: PUSH
10443: LD_INT 1
10445: ARRAY
10446: PPUSH
10447: LD_VAR 0 5
10451: PUSH
10452: LD_VAR 0 3
10456: ARRAY
10457: PUSH
10458: LD_INT 2
10460: ARRAY
10461: PPUSH
10462: LD_VAR 0 5
10466: PUSH
10467: LD_VAR 0 3
10471: ARRAY
10472: PUSH
10473: LD_INT 3
10475: ARRAY
10476: PPUSH
10477: LD_VAR 0 5
10481: PUSH
10482: LD_VAR 0 3
10486: ARRAY
10487: PUSH
10488: LD_INT 4
10490: ARRAY
10491: PPUSH
10492: CALL_OW 205
10496: GO 10424
10498: POP
10499: POP
// end ; if position = 3 then
10500: LD_VAR 0 1
10504: PUSH
10505: LD_INT 3
10507: EQUAL
10508: IFFALSE 11322
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10510: LD_ADDR_VAR 0 4
10514: PUSH
10515: LD_INT 22
10517: PUSH
10518: LD_INT 3
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 25
10527: PUSH
10528: LD_INT 2
10530: PUSH
10531: EMPTY
10532: LIST
10533: LIST
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PPUSH
10539: CALL_OW 69
10543: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
10544: LD_ADDR_VAR 0 5
10548: PUSH
10549: LD_INT 0
10551: PUSH
10552: LD_INT 151
10554: PUSH
10555: LD_INT 71
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: EMPTY
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: PUSH
10567: LD_INT 4
10569: PUSH
10570: LD_INT 145
10572: PUSH
10573: LD_INT 53
10575: PUSH
10576: LD_INT 3
10578: PUSH
10579: EMPTY
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: LD_INT 172
10590: PUSH
10591: LD_INT 102
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 29
10605: PUSH
10606: LD_INT 152
10608: PUSH
10609: LD_INT 85
10611: PUSH
10612: LD_INT 3
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: PUSH
10621: LD_INT 30
10623: PUSH
10624: LD_INT 156
10626: PUSH
10627: LD_INT 92
10629: PUSH
10630: LD_INT 3
10632: PUSH
10633: EMPTY
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: PUSH
10639: LD_INT 28
10641: PUSH
10642: LD_INT 151
10644: PUSH
10645: LD_INT 66
10647: PUSH
10648: LD_INT 4
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: PUSH
10657: LD_INT 2
10659: PUSH
10660: LD_INT 163
10662: PUSH
10663: LD_INT 95
10665: PUSH
10666: LD_INT 5
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: PUSH
10675: LD_INT 28
10677: PUSH
10678: LD_INT 149
10680: PUSH
10681: LD_INT 63
10683: PUSH
10684: LD_INT 4
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PUSH
10693: LD_INT 17
10695: PUSH
10696: LD_INT 167
10698: PUSH
10699: LD_INT 99
10701: PUSH
10702: LD_INT 5
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 18
10713: PUSH
10714: LD_INT 163
10716: PUSH
10717: LD_INT 98
10719: PUSH
10720: LD_INT 0
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: PUSH
10729: LD_INT 28
10731: PUSH
10732: LD_INT 154
10734: PUSH
10735: LD_INT 70
10737: PUSH
10738: LD_INT 4
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 32
10749: PUSH
10750: LD_INT 155
10752: PUSH
10753: LD_INT 62
10755: PUSH
10756: LD_INT 4
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: PUSH
10765: LD_INT 32
10767: PUSH
10768: LD_INT 161
10770: PUSH
10771: LD_INT 69
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 32
10785: PUSH
10786: LD_INT 168
10788: PUSH
10789: LD_INT 78
10791: PUSH
10792: LD_INT 4
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 32
10803: PUSH
10804: LD_INT 163
10806: PUSH
10807: LD_INT 80
10809: PUSH
10810: LD_INT 5
10812: PUSH
10813: EMPTY
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: PUSH
10819: LD_INT 32
10821: PUSH
10822: LD_INT 136
10824: PUSH
10825: LD_INT 73
10827: PUSH
10828: LD_INT 0
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: PUSH
10837: LD_INT 32
10839: PUSH
10840: LD_INT 157
10842: PUSH
10843: LD_INT 98
10845: PUSH
10846: LD_INT 0
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 32
10857: PUSH
10858: LD_INT 150
10860: PUSH
10861: LD_INT 87
10863: PUSH
10864: LD_INT 1
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 33
10875: PUSH
10876: LD_INT 171
10878: PUSH
10879: LD_INT 97
10881: PUSH
10882: LD_INT 4
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 33
10893: PUSH
10894: LD_INT 168
10896: PUSH
10897: LD_INT 92
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 33
10911: PUSH
10912: LD_INT 166
10914: PUSH
10915: LD_INT 80
10917: PUSH
10918: LD_INT 5
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: LD_INT 33
10929: PUSH
10930: LD_INT 141
10932: PUSH
10933: LD_INT 54
10935: PUSH
10936: LD_INT 2
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: PUSH
10945: LD_INT 33
10947: PUSH
10948: LD_INT 133
10950: PUSH
10951: LD_INT 57
10953: PUSH
10954: LD_INT 2
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 33
10965: PUSH
10966: LD_INT 132
10968: PUSH
10969: LD_INT 61
10971: PUSH
10972: LD_INT 2
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 33
10983: PUSH
10984: LD_INT 150
10986: PUSH
10987: LD_INT 82
10989: PUSH
10990: LD_INT 0
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 33
11001: PUSH
11002: LD_INT 132
11004: PUSH
11005: LD_INT 72
11007: PUSH
11008: LD_INT 0
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 6
11019: PUSH
11020: LD_INT 146
11022: PUSH
11023: LD_INT 64
11025: PUSH
11026: LD_INT 4
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 6
11037: PUSH
11038: LD_INT 159
11040: PUSH
11041: LD_INT 85
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 21
11055: PUSH
11056: LD_INT 163
11058: PUSH
11059: LD_INT 91
11061: PUSH
11062: LD_INT 3
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 16
11073: PUSH
11074: LD_INT 166
11076: PUSH
11077: LD_INT 95
11079: PUSH
11080: LD_INT 4
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 24
11091: PUSH
11092: LD_INT 159
11094: PUSH
11095: LD_INT 95
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11140: LD_ADDR_VAR 0 3
11144: PUSH
11145: LD_INT 22
11147: PUSH
11148: LD_INT 3
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 3
11157: PUSH
11158: LD_INT 25
11160: PUSH
11161: LD_INT 2
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: PUSH
11168: EMPTY
11169: LIST
11170: LIST
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: PPUSH
11176: CALL_OW 69
11180: PUSH
11181: FOR_IN
11182: IFFALSE 11229
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
11184: LD_VAR 0 3
11188: PPUSH
11189: LD_VAR 0 5
11193: PUSH
11194: LD_INT 2
11196: ARRAY
11197: PUSH
11198: LD_INT 2
11200: ARRAY
11201: PUSH
11202: LD_INT 2
11204: PLUS
11205: PPUSH
11206: LD_VAR 0 5
11210: PUSH
11211: LD_INT 2
11213: ARRAY
11214: PUSH
11215: LD_INT 3
11217: ARRAY
11218: PUSH
11219: LD_INT 3
11221: PLUS
11222: PPUSH
11223: CALL_OW 171
11227: GO 11181
11229: POP
11230: POP
// for i := 1 to buildingsTab do
11231: LD_ADDR_VAR 0 3
11235: PUSH
11236: DOUBLE
11237: LD_INT 1
11239: DEC
11240: ST_TO_ADDR
11241: LD_VAR 0 5
11245: PUSH
11246: FOR_TO
11247: IFFALSE 11320
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11249: LD_VAR 0 4
11253: PPUSH
11254: LD_VAR 0 5
11258: PUSH
11259: LD_VAR 0 3
11263: ARRAY
11264: PUSH
11265: LD_INT 1
11267: ARRAY
11268: PPUSH
11269: LD_VAR 0 5
11273: PUSH
11274: LD_VAR 0 3
11278: ARRAY
11279: PUSH
11280: LD_INT 2
11282: ARRAY
11283: PPUSH
11284: LD_VAR 0 5
11288: PUSH
11289: LD_VAR 0 3
11293: ARRAY
11294: PUSH
11295: LD_INT 3
11297: ARRAY
11298: PPUSH
11299: LD_VAR 0 5
11303: PUSH
11304: LD_VAR 0 3
11308: ARRAY
11309: PUSH
11310: LD_INT 4
11312: ARRAY
11313: PPUSH
11314: CALL_OW 205
11318: GO 11246
11320: POP
11321: POP
// end ; end ;
11322: LD_VAR 0 2
11326: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
11327: LD_INT 0
11329: PPUSH
11330: PPUSH
11331: PPUSH
11332: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
11333: LD_ADDR_VAR 0 3
11337: PUSH
11338: LD_INT 22
11340: PUSH
11341: LD_INT 2
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: EMPTY
11359: LIST
11360: LIST
11361: PPUSH
11362: CALL_OW 69
11366: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
11367: LD_VAR 0 3
11371: PPUSH
11372: LD_INT 0
11374: PPUSH
11375: LD_INT 71
11377: PPUSH
11378: LD_INT 15
11380: PPUSH
11381: LD_INT 3
11383: PPUSH
11384: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
11388: LD_ADDR_VAR 0 4
11392: PUSH
11393: LD_INT 6
11395: PUSH
11396: LD_INT 77
11398: PUSH
11399: LD_INT 18
11401: PUSH
11402: LD_INT 3
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 4
11413: PUSH
11414: LD_INT 77
11416: PUSH
11417: LD_INT 26
11419: PUSH
11420: LD_INT 0
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 31
11431: PUSH
11432: LD_INT 82
11434: PUSH
11435: LD_INT 28
11437: PUSH
11438: LD_INT 0
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 31
11449: PUSH
11450: LD_INT 84
11452: PUSH
11453: LD_INT 21
11455: PUSH
11456: LD_INT 3
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 31
11467: PUSH
11468: LD_INT 66
11470: PUSH
11471: LD_INT 14
11473: PUSH
11474: LD_INT 2
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 27
11485: PUSH
11486: LD_INT 67
11488: PUSH
11489: LD_INT 18
11491: PUSH
11492: LD_INT 5
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 27
11503: PUSH
11504: LD_INT 69
11506: PUSH
11507: LD_INT 23
11509: PUSH
11510: LD_INT 2
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: ST_TO_ADDR
// for i := 1 to buildingsTab do
11528: LD_ADDR_VAR 0 2
11532: PUSH
11533: DOUBLE
11534: LD_INT 1
11536: DEC
11537: ST_TO_ADDR
11538: LD_VAR 0 4
11542: PUSH
11543: FOR_TO
11544: IFFALSE 11617
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11546: LD_VAR 0 3
11550: PPUSH
11551: LD_VAR 0 4
11555: PUSH
11556: LD_VAR 0 2
11560: ARRAY
11561: PUSH
11562: LD_INT 1
11564: ARRAY
11565: PPUSH
11566: LD_VAR 0 4
11570: PUSH
11571: LD_VAR 0 2
11575: ARRAY
11576: PUSH
11577: LD_INT 2
11579: ARRAY
11580: PPUSH
11581: LD_VAR 0 4
11585: PUSH
11586: LD_VAR 0 2
11590: ARRAY
11591: PUSH
11592: LD_INT 3
11594: ARRAY
11595: PPUSH
11596: LD_VAR 0 4
11600: PUSH
11601: LD_VAR 0 2
11605: ARRAY
11606: PUSH
11607: LD_INT 4
11609: ARRAY
11610: PPUSH
11611: CALL_OW 205
11615: GO 11543
11617: POP
11618: POP
// end ;
11619: LD_VAR 0 1
11623: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
11624: LD_INT 0
11626: PPUSH
11627: PPUSH
11628: PPUSH
11629: PPUSH
11630: PPUSH
11631: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
11632: LD_ADDR_VAR 0 7
11636: PUSH
11637: LD_INT 22
11639: PUSH
11640: LD_VAR 0 1
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: PUSH
11649: LD_INT 25
11651: PUSH
11652: LD_INT 9
11654: PUSH
11655: EMPTY
11656: LIST
11657: LIST
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PPUSH
11663: CALL_OW 69
11667: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11668: LD_ADDR_VAR 0 8
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_VAR 0 2
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 3
11687: PUSH
11688: LD_INT 21
11690: PUSH
11691: LD_INT 3
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: EMPTY
11699: LIST
11700: LIST
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: PPUSH
11706: CALL_OW 69
11710: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
11711: LD_ADDR_VAR 0 5
11715: PUSH
11716: LD_INT 1
11718: PPUSH
11719: LD_INT 3
11721: PPUSH
11722: CALL_OW 12
11726: ST_TO_ADDR
// for i = 1 to list do
11727: LD_ADDR_VAR 0 6
11731: PUSH
11732: DOUBLE
11733: LD_INT 1
11735: DEC
11736: ST_TO_ADDR
11737: LD_VAR 0 7
11741: PUSH
11742: FOR_TO
11743: IFFALSE 12441
// for ta in filter do
11745: LD_ADDR_VAR 0 4
11749: PUSH
11750: LD_VAR 0 8
11754: PUSH
11755: FOR_IN
11756: IFFALSE 12437
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
11758: LD_VAR 0 7
11762: PUSH
11763: LD_VAR 0 6
11767: ARRAY
11768: PPUSH
11769: LD_VAR 0 4
11773: PPUSH
11774: CALL_OW 296
11778: PUSH
11779: LD_INT 12
11781: LESSEQUAL
11782: IFFALSE 12435
// begin case c of 1 :
11784: LD_VAR 0 5
11788: PUSH
11789: LD_INT 1
11791: DOUBLE
11792: EQUAL
11793: IFTRUE 11797
11795: GO 12093
11797: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
11798: LD_VAR 0 7
11802: PUSH
11803: LD_VAR 0 6
11807: ARRAY
11808: PPUSH
11809: LD_VAR 0 4
11813: PPUSH
11814: CALL_OW 250
11818: PPUSH
11819: LD_VAR 0 4
11823: PPUSH
11824: CALL_OW 251
11828: PPUSH
11829: CALL_OW 154
// if eventVar2 = 0 then
11833: LD_EXP 54
11837: PUSH
11838: LD_INT 0
11840: EQUAL
11841: IFFALSE 12091
// begin eventVar2 = 1 ;
11843: LD_ADDR_EXP 54
11847: PUSH
11848: LD_INT 1
11850: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11851: LD_INT 245
11853: PPUSH
11854: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11858: LD_VAR 0 4
11862: PPUSH
11863: CALL_OW 250
11867: PPUSH
11868: LD_VAR 0 4
11872: PPUSH
11873: CALL_OW 251
11877: PPUSH
11878: CALL_OW 84
// DialogueOn ;
11882: CALL_OW 6
// if IsOK ( Cyrus ) then
11886: LD_EXP 5
11890: PPUSH
11891: CALL_OW 302
11895: IFFALSE 11911
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11897: LD_EXP 5
11901: PPUSH
11902: LD_STRING D9a-Cyrus-1
11904: PPUSH
11905: CALL_OW 88
// end else
11909: GO 11965
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11911: LD_INT 22
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 26
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_EXP 1
11939: PUSH
11940: LD_EXP 14
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: DIFF
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D9a-Sol1-1
11957: PPUSH
11958: LD_STRING D9a-Sol1-1
11960: PPUSH
11961: CALL 8522 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11965: LD_INT 22
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 26
11977: PUSH
11978: LD_INT 1
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_EXP 1
11993: PUSH
11994: LD_EXP 14
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: DIFF
12003: PPUSH
12004: CALL_OW 69
12008: PPUSH
12009: LD_STRING D9b-Sol1-1
12011: PPUSH
12012: LD_STRING D9b-Sol1-1
12014: PPUSH
12015: CALL 8522 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
12019: LD_STRING 09_arInfo
12021: PPUSH
12022: LD_INT 0
12024: PPUSH
12025: CALL_OW 30
12029: PUSH
12030: LD_INT 1
12032: EQUAL
12033: IFFALSE 12047
// Say ( JMM , D9a-JMM-1 ) ;
12035: LD_EXP 1
12039: PPUSH
12040: LD_STRING D9a-JMM-1
12042: PPUSH
12043: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
12047: LD_EXP 1
12051: PPUSH
12052: LD_STRING D9c-JMM-1
12054: PPUSH
12055: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
12059: LD_INT 12
12061: PPUSH
12062: LD_INT 1
12064: PPUSH
12065: CALL_OW 321
12069: PUSH
12070: LD_INT 2
12072: EQUAL
12073: IFFALSE 12087
// Say ( JMM , D9c-JMM-1a ) ;
12075: LD_EXP 1
12079: PPUSH
12080: LD_STRING D9c-JMM-1a
12082: PPUSH
12083: CALL_OW 88
// DialogueOff ;
12087: CALL_OW 7
// end ; end ; 2 :
12091: GO 12435
12093: LD_INT 2
12095: DOUBLE
12096: EQUAL
12097: IFTRUE 12101
12099: GO 12423
12101: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
12102: LD_VAR 0 7
12106: PUSH
12107: LD_VAR 0 6
12111: ARRAY
12112: PPUSH
12113: LD_VAR 0 4
12117: PPUSH
12118: CALL_OW 250
12122: PUSH
12123: LD_INT 1
12125: NEG
12126: PPUSH
12127: LD_INT 1
12129: PPUSH
12130: CALL_OW 12
12134: PLUS
12135: PPUSH
12136: LD_VAR 0 4
12140: PPUSH
12141: CALL_OW 251
12145: PUSH
12146: LD_INT 1
12148: NEG
12149: PPUSH
12150: LD_INT 1
12152: PPUSH
12153: CALL_OW 12
12157: PLUS
12158: PPUSH
12159: CALL_OW 153
// if eventVar2 = 0 then
12163: LD_EXP 54
12167: PUSH
12168: LD_INT 0
12170: EQUAL
12171: IFFALSE 12421
// begin eventVar2 = 1 ;
12173: LD_ADDR_EXP 54
12177: PUSH
12178: LD_INT 1
12180: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12181: LD_INT 245
12183: PPUSH
12184: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
12188: LD_VAR 0 4
12192: PPUSH
12193: CALL_OW 250
12197: PPUSH
12198: LD_VAR 0 4
12202: PPUSH
12203: CALL_OW 251
12207: PPUSH
12208: CALL_OW 84
// DialogueOn ;
12212: CALL_OW 6
// if IsOK ( Cyrus ) then
12216: LD_EXP 5
12220: PPUSH
12221: CALL_OW 302
12225: IFFALSE 12241
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
12227: LD_EXP 5
12231: PPUSH
12232: LD_STRING D9a-Cyrus-1
12234: PPUSH
12235: CALL_OW 88
// end else
12239: GO 12295
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
12241: LD_INT 22
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 26
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: PUSH
12261: EMPTY
12262: LIST
12263: LIST
12264: PUSH
12265: LD_EXP 1
12269: PUSH
12270: LD_EXP 14
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: DIFF
12279: PPUSH
12280: CALL_OW 69
12284: PPUSH
12285: LD_STRING D9a-Sol1-1
12287: PPUSH
12288: LD_STRING D9a-Sol1-1
12290: PPUSH
12291: CALL 8522 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
12295: LD_INT 22
12297: PUSH
12298: LD_INT 1
12300: PUSH
12301: EMPTY
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 26
12307: PUSH
12308: LD_INT 1
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_EXP 1
12323: PUSH
12324: LD_EXP 14
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: DIFF
12333: PPUSH
12334: CALL_OW 69
12338: PPUSH
12339: LD_STRING D9b-Sol1-1
12341: PPUSH
12342: LD_STRING D9b-Sol1-1
12344: PPUSH
12345: CALL 8522 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
12349: LD_STRING 09_arInfo
12351: PPUSH
12352: LD_INT 0
12354: PPUSH
12355: CALL_OW 30
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: IFFALSE 12377
// Say ( JMM , D9a-JMM-1 ) ;
12365: LD_EXP 1
12369: PPUSH
12370: LD_STRING D9a-JMM-1
12372: PPUSH
12373: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
12377: LD_EXP 1
12381: PPUSH
12382: LD_STRING D9c-JMM-1
12384: PPUSH
12385: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
12389: LD_INT 12
12391: PPUSH
12392: LD_INT 1
12394: PPUSH
12395: CALL_OW 321
12399: PUSH
12400: LD_INT 2
12402: EQUAL
12403: IFFALSE 12417
// Say ( JMM , D9c-JMM-1a ) ;
12405: LD_EXP 1
12409: PPUSH
12410: LD_STRING D9c-JMM-1a
12412: PPUSH
12413: CALL_OW 88
// DialogueOff ;
12417: CALL_OW 7
// end ; end ; 3 :
12421: GO 12435
12423: LD_INT 3
12425: DOUBLE
12426: EQUAL
12427: IFTRUE 12431
12429: GO 12434
12431: POP
// ; end ;
12432: GO 12435
12434: POP
// end ; end ;
12435: GO 11755
12437: POP
12438: POP
12439: GO 11742
12441: POP
12442: POP
// end ;
12443: LD_VAR 0 3
12447: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
12448: LD_INT 0
12450: PPUSH
12451: PPUSH
12452: PPUSH
12453: PPUSH
// for i = 1 to 72 do
12454: LD_ADDR_VAR 0 5
12458: PUSH
12459: DOUBLE
12460: LD_INT 1
12462: DEC
12463: ST_TO_ADDR
12464: LD_INT 72
12466: PUSH
12467: FOR_TO
12468: IFFALSE 12526
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
12470: LD_VAR 0 5
12474: PPUSH
12475: LD_VAR 0 1
12479: PPUSH
12480: CALL_OW 321
12484: PUSH
12485: LD_INT 1
12487: EQUAL
12488: PUSH
12489: LD_VAR 0 5
12493: PPUSH
12494: LD_VAR 0 3
12498: PPUSH
12499: CALL_OW 482
12503: PUSH
12504: LD_INT 1
12506: EQUAL
12507: AND
12508: IFFALSE 12524
// AddComResearch ( lab , i ) ;
12510: LD_VAR 0 2
12514: PPUSH
12515: LD_VAR 0 5
12519: PPUSH
12520: CALL_OW 184
12524: GO 12467
12526: POP
12527: POP
// end ;
12528: LD_VAR 0 4
12532: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
12533: LD_INT 0
12535: PPUSH
12536: PPUSH
12537: PPUSH
12538: PPUSH
12539: PPUSH
12540: PPUSH
12541: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
12542: LD_ADDR_VAR 0 6
12546: PUSH
12547: LD_INT 22
12549: PUSH
12550: LD_VAR 0 1
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 56
12561: PUSH
12562: EMPTY
12563: LIST
12564: PUSH
12565: LD_INT 24
12567: PUSH
12568: LD_INT 700
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: PUSH
12575: LD_INT 2
12577: PUSH
12578: LD_INT 25
12580: PUSH
12581: LD_INT 1
12583: PUSH
12584: EMPTY
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 25
12590: PUSH
12591: LD_INT 9
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PPUSH
12609: CALL_OW 69
12613: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
12614: LD_ADDR_VAR 0 7
12618: PUSH
12619: LD_INT 22
12621: PUSH
12622: LD_VAR 0 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 30
12633: PUSH
12634: LD_INT 32
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 58
12643: PUSH
12644: EMPTY
12645: LIST
12646: PUSH
12647: LD_INT 24
12649: PUSH
12650: LD_INT 251
12652: PUSH
12653: EMPTY
12654: LIST
12655: LIST
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PPUSH
12663: CALL_OW 69
12667: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
12668: LD_ADDR_VAR 0 9
12672: PUSH
12673: LD_INT 22
12675: PUSH
12676: LD_VAR 0 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 2
12687: PUSH
12688: LD_INT 30
12690: PUSH
12691: LD_INT 4
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 30
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: PUSH
12713: LD_INT 24
12715: PUSH
12716: LD_INT 251
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PUSH
12723: EMPTY
12724: LIST
12725: LIST
12726: LIST
12727: PPUSH
12728: CALL_OW 69
12732: ST_TO_ADDR
// if barrackList > 0 then
12733: LD_VAR 0 9
12737: PUSH
12738: LD_INT 0
12740: GREATER
12741: IFFALSE 12830
// begin if turretList = 0 then
12743: LD_VAR 0 7
12747: PUSH
12748: LD_INT 0
12750: EQUAL
12751: IFFALSE 12790
// begin for i in soldiers_list do
12753: LD_ADDR_VAR 0 4
12757: PUSH
12758: LD_VAR 0 6
12762: PUSH
12763: FOR_IN
12764: IFFALSE 12786
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
12766: LD_VAR 0 4
12770: PPUSH
12771: LD_VAR 0 9
12775: PUSH
12776: LD_INT 1
12778: ARRAY
12779: PPUSH
12780: CALL_OW 120
12784: GO 12763
12786: POP
12787: POP
// end else
12788: GO 12830
// begin for i in barrackList do
12790: LD_ADDR_VAR 0 4
12794: PUSH
12795: LD_VAR 0 9
12799: PUSH
12800: FOR_IN
12801: IFFALSE 12828
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
12803: LD_VAR 0 4
12807: PPUSH
12808: CALL_OW 313
12812: PPUSH
12813: LD_VAR 0 7
12817: PUSH
12818: LD_INT 1
12820: ARRAY
12821: PPUSH
12822: CALL_OW 120
// end ;
12826: GO 12800
12828: POP
12829: POP
// end ; end ; end ;
12830: LD_VAR 0 3
12834: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12835: LD_INT 0
12837: PPUSH
12838: PPUSH
12839: PPUSH
12840: PPUSH
12841: PPUSH
12842: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12843: LD_ADDR_VAR 0 6
12847: PUSH
12848: LD_VAR 0 2
12852: PPUSH
12853: CALL_OW 313
12857: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
12858: LD_ADDR_VAR 0 7
12862: PUSH
12863: LD_INT 22
12865: PUSH
12866: LD_VAR 0 1
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 25
12877: PUSH
12878: LD_INT 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: PUSH
12885: LD_INT 24
12887: PUSH
12888: LD_INT 1000
12890: PUSH
12891: EMPTY
12892: LIST
12893: LIST
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: PPUSH
12900: CALL_OW 69
12904: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12905: LD_ADDR_VAR 0 4
12909: PUSH
12910: LD_INT 22
12912: PUSH
12913: LD_VAR 0 1
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: LD_INT 21
12924: PUSH
12925: LD_INT 3
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 3
12934: PUSH
12935: LD_INT 24
12937: PUSH
12938: LD_INT 1000
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: PUSH
12954: EMPTY
12955: LIST
12956: PPUSH
12957: CALL_OW 69
12961: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12962: LD_VAR 0 4
12966: NOT
12967: PUSH
12968: LD_VAR 0 7
12972: NOT
12973: AND
12974: IFFALSE 12978
// exit ;
12976: GO 13137
// if buildings_list > 0 and engineerOkInside > 0 then
12978: LD_VAR 0 4
12982: PUSH
12983: LD_INT 0
12985: GREATER
12986: PUSH
12987: LD_VAR 0 6
12991: PUSH
12992: LD_INT 0
12994: GREATER
12995: AND
12996: IFFALSE 13024
// for i in engineerOkInside do
12998: LD_ADDR_VAR 0 5
13002: PUSH
13003: LD_VAR 0 6
13007: PUSH
13008: FOR_IN
13009: IFFALSE 13022
// ComExitBuilding ( i ) ;
13011: LD_VAR 0 5
13015: PPUSH
13016: CALL_OW 122
13020: GO 13008
13022: POP
13023: POP
// if engineerOkOutside > 0 then
13024: LD_VAR 0 7
13028: PUSH
13029: LD_INT 0
13031: GREATER
13032: IFFALSE 13086
// begin for i in engineerOkOutside do
13034: LD_ADDR_VAR 0 5
13038: PUSH
13039: LD_VAR 0 7
13043: PUSH
13044: FOR_IN
13045: IFFALSE 13084
// for j in buildings_list do
13047: LD_ADDR_VAR 0 8
13051: PUSH
13052: LD_VAR 0 4
13056: PUSH
13057: FOR_IN
13058: IFFALSE 13080
// ComRepairBuilding ( i , j [ 1 ] ) ;
13060: LD_VAR 0 5
13064: PPUSH
13065: LD_VAR 0 8
13069: PUSH
13070: LD_INT 1
13072: ARRAY
13073: PPUSH
13074: CALL_OW 130
13078: GO 13057
13080: POP
13081: POP
13082: GO 13044
13084: POP
13085: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
13086: LD_VAR 0 4
13090: PUSH
13091: LD_INT 0
13093: EQUAL
13094: PUSH
13095: LD_VAR 0 7
13099: PUSH
13100: LD_INT 0
13102: GREATER
13103: AND
13104: IFFALSE 13137
// for i in engineerOkOutside do
13106: LD_ADDR_VAR 0 5
13110: PUSH
13111: LD_VAR 0 7
13115: PUSH
13116: FOR_IN
13117: IFFALSE 13135
// ComEnterUnit ( i , building ) ;
13119: LD_VAR 0 5
13123: PPUSH
13124: LD_VAR 0 2
13128: PPUSH
13129: CALL_OW 120
13133: GO 13116
13135: POP
13136: POP
// end ;
13137: LD_VAR 0 3
13141: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
13142: LD_INT 0
13144: PPUSH
13145: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
13146: LD_INT 22
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 25
13160: PUSH
13161: LD_INT 2
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: PPUSH
13172: CALL_OW 69
13176: PUSH
13177: LD_INT 0
13179: GREATER
13180: PUSH
13181: LD_INT 22
13183: PUSH
13184: LD_VAR 0 1
13188: PUSH
13189: EMPTY
13190: LIST
13191: LIST
13192: PUSH
13193: LD_INT 21
13195: PUSH
13196: LD_INT 3
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: PUSH
13203: LD_INT 3
13205: PUSH
13206: LD_INT 24
13208: PUSH
13209: LD_INT 1000
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: LIST
13224: PPUSH
13225: CALL_OW 69
13229: PUSH
13230: LD_INT 0
13232: EQUAL
13233: AND
13234: PUSH
13235: LD_VAR 0 2
13239: PUSH
13240: LD_INT 0
13242: GREATER
13243: AND
13244: IFFALSE 13343
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
13246: LD_ADDR_VAR 0 4
13250: PUSH
13251: LD_INT 22
13253: PUSH
13254: LD_VAR 0 1
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 25
13265: PUSH
13266: LD_INT 2
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: PUSH
13282: FOR_IN
13283: IFFALSE 13341
// begin AddComExitBuilding ( i ) ;
13285: LD_VAR 0 4
13289: PPUSH
13290: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13294: LD_VAR 0 4
13298: PPUSH
13299: LD_VAR 0 2
13303: PUSH
13304: LD_INT 1
13306: ARRAY
13307: PPUSH
13308: LD_VAR 0 2
13312: PUSH
13313: LD_INT 2
13315: ARRAY
13316: PPUSH
13317: LD_VAR 0 2
13321: PUSH
13322: LD_INT 3
13324: ARRAY
13325: PPUSH
13326: LD_VAR 0 2
13330: PUSH
13331: LD_INT 4
13333: ARRAY
13334: PPUSH
13335: CALL_OW 205
// end ;
13339: GO 13282
13341: POP
13342: POP
// end ; end ;
13343: LD_VAR 0 3
13347: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13348: LD_INT 0
13350: PPUSH
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
13355: PPUSH
13356: PPUSH
13357: PPUSH
13358: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
13359: LD_ADDR_VAR 0 6
13363: PUSH
13364: LD_INT 22
13366: PUSH
13367: LD_VAR 0 1
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 25
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 24
13388: PUSH
13389: LD_INT 251
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: PPUSH
13401: CALL_OW 69
13405: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
13406: LD_ADDR_VAR 0 7
13410: PUSH
13411: LD_VAR 0 3
13415: PPUSH
13416: LD_INT 22
13418: PUSH
13419: LD_VAR 0 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 4
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 50
13440: PUSH
13441: EMPTY
13442: LIST
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: PPUSH
13449: CALL_OW 70
13453: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13454: LD_ADDR_VAR 0 10
13458: PUSH
13459: LD_VAR 0 3
13463: PPUSH
13464: LD_INT 22
13466: PUSH
13467: LD_VAR 0 1
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: LD_INT 21
13478: PUSH
13479: LD_INT 1
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 3
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 3
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 3
13505: PUSH
13506: LD_INT 24
13508: PUSH
13509: LD_INT 750
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PPUSH
13526: CALL_OW 70
13530: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13531: LD_ADDR_VAR 0 11
13535: PUSH
13536: LD_VAR 0 2
13540: PPUSH
13541: LD_INT 22
13543: PUSH
13544: LD_VAR 0 1
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 21
13555: PUSH
13556: LD_INT 1
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: LD_INT 25
13568: PUSH
13569: LD_INT 3
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 3
13582: PUSH
13583: LD_INT 24
13585: PUSH
13586: LD_INT 1000
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 70
13607: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
13608: LD_VAR 0 10
13612: NOT
13613: PUSH
13614: LD_VAR 0 7
13618: NOT
13619: AND
13620: PUSH
13621: LD_VAR 0 11
13625: NOT
13626: AND
13627: IFFALSE 13631
// exit ;
13629: GO 13891
// if damageUnits > 0 and sci_list > 0 then
13631: LD_VAR 0 10
13635: PUSH
13636: LD_INT 0
13638: GREATER
13639: PUSH
13640: LD_VAR 0 6
13644: PUSH
13645: LD_INT 0
13647: GREATER
13648: AND
13649: IFFALSE 13682
// for i in damageUnits do
13651: LD_ADDR_VAR 0 8
13655: PUSH
13656: LD_VAR 0 10
13660: PUSH
13661: FOR_IN
13662: IFFALSE 13680
// ComMoveToArea ( i , healArea ) ;
13664: LD_VAR 0 8
13668: PPUSH
13669: LD_VAR 0 2
13673: PPUSH
13674: CALL_OW 113
13678: GO 13661
13680: POP
13681: POP
// if unitsToHeal > 0 and sci_list > 0 then
13682: LD_VAR 0 11
13686: PUSH
13687: LD_INT 0
13689: GREATER
13690: PUSH
13691: LD_VAR 0 6
13695: PUSH
13696: LD_INT 0
13698: GREATER
13699: AND
13700: IFFALSE 13759
// begin for i in sci_list do
13702: LD_ADDR_VAR 0 8
13706: PUSH
13707: LD_VAR 0 6
13711: PUSH
13712: FOR_IN
13713: IFFALSE 13757
// begin ComExitBuilding ( i ) ;
13715: LD_VAR 0 8
13719: PPUSH
13720: CALL_OW 122
// for j in unitsToHeal do
13724: LD_ADDR_VAR 0 9
13728: PUSH
13729: LD_VAR 0 11
13733: PUSH
13734: FOR_IN
13735: IFFALSE 13753
// AddComHeal ( i , j ) ;
13737: LD_VAR 0 8
13741: PPUSH
13742: LD_VAR 0 9
13746: PPUSH
13747: CALL_OW 188
13751: GO 13734
13753: POP
13754: POP
// end ;
13755: GO 13712
13757: POP
13758: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13759: LD_VAR 0 10
13763: PUSH
13764: LD_INT 0
13766: EQUAL
13767: PUSH
13768: LD_VAR 0 11
13772: PUSH
13773: LD_INT 0
13775: EQUAL
13776: AND
13777: PUSH
13778: LD_VAR 0 7
13782: PUSH
13783: LD_INT 0
13785: GREATER
13786: AND
13787: IFFALSE 13891
// for i in sci_listOutside do
13789: LD_ADDR_VAR 0 8
13793: PUSH
13794: LD_VAR 0 7
13798: PUSH
13799: FOR_IN
13800: IFFALSE 13889
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13802: LD_ADDR_VAR 0 12
13806: PUSH
13807: LD_INT 22
13809: PUSH
13810: LD_VAR 0 1
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 21
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 30
13831: PUSH
13832: LD_INT 8
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: LIST
13843: PPUSH
13844: CALL_OW 69
13848: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13849: LD_ADDR_VAR 0 13
13853: PUSH
13854: LD_INT 1
13856: PPUSH
13857: LD_VAR 0 12
13861: PPUSH
13862: CALL_OW 12
13866: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
13867: LD_VAR 0 8
13871: PPUSH
13872: LD_VAR 0 12
13876: PUSH
13877: LD_VAR 0 13
13881: ARRAY
13882: PPUSH
13883: CALL_OW 120
// end ;
13887: GO 13799
13889: POP
13890: POP
// end ;
13891: LD_VAR 0 5
13895: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13896: LD_INT 0
13898: PPUSH
13899: PPUSH
13900: PPUSH
13901: PPUSH
13902: PPUSH
13903: PPUSH
13904: PPUSH
13905: PPUSH
13906: PPUSH
13907: PPUSH
13908: PPUSH
// amChassisTab = [ ] ;
13909: LD_ADDR_VAR 0 19
13913: PUSH
13914: EMPTY
13915: ST_TO_ADDR
// arChassisTab = [ ] ;
13916: LD_ADDR_VAR 0 18
13920: PUSH
13921: EMPTY
13922: ST_TO_ADDR
// ruChassisTab = [ ] ;
13923: LD_ADDR_VAR 0 17
13927: PUSH
13928: EMPTY
13929: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13930: LD_INT 35
13932: PPUSH
13933: CALL_OW 67
// if nation = 1 then
13937: LD_VAR 0 5
13941: PUSH
13942: LD_INT 1
13944: EQUAL
13945: IFFALSE 14450
// begin uc_side = side ;
13947: LD_ADDR_OWVAR 20
13951: PUSH
13952: LD_VAR 0 2
13956: ST_TO_ADDR
// uc_nation = nation ;
13957: LD_ADDR_OWVAR 21
13961: PUSH
13962: LD_VAR 0 5
13966: ST_TO_ADDR
// vc_engine = vehengine ;
13967: LD_ADDR_OWVAR 39
13971: PUSH
13972: LD_VAR 0 6
13976: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13977: LD_ADDR_OWVAR 38
13981: PUSH
13982: LD_VAR 0 7
13986: PUSH
13987: LD_INT 1
13989: PPUSH
13990: LD_VAR 0 7
13994: PPUSH
13995: CALL_OW 12
13999: ARRAY
14000: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14001: LD_ADDR_OWVAR 40
14005: PUSH
14006: LD_VAR 0 10
14010: PUSH
14011: LD_INT 1
14013: PPUSH
14014: LD_VAR 0 10
14018: PPUSH
14019: CALL_OW 12
14023: ARRAY
14024: ST_TO_ADDR
// for j = 1 to AMWeapon do
14025: LD_ADDR_VAR 0 14
14029: PUSH
14030: DOUBLE
14031: LD_INT 1
14033: DEC
14034: ST_TO_ADDR
14035: LD_VAR 0 10
14039: PUSH
14040: FOR_TO
14041: IFFALSE 14342
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14043: LD_VAR 0 10
14047: PUSH
14048: LD_VAR 0 14
14052: ARRAY
14053: PUSH
14054: LD_INT 2
14056: EQUAL
14057: PUSH
14058: LD_VAR 0 10
14062: PUSH
14063: LD_VAR 0 14
14067: ARRAY
14068: PUSH
14069: LD_INT 3
14071: EQUAL
14072: OR
14073: IFFALSE 14126
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14075: LD_ADDR_VAR 0 19
14079: PUSH
14080: LD_INT 1
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: LD_INT 4
14091: PUSH
14092: LD_INT 5
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14102: LD_ADDR_OWVAR 37
14106: PUSH
14107: LD_VAR 0 19
14111: PUSH
14112: LD_INT 1
14114: PPUSH
14115: LD_VAR 0 19
14119: PPUSH
14120: CALL_OW 12
14124: ARRAY
14125: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14126: LD_VAR 0 10
14130: PUSH
14131: LD_VAR 0 14
14135: ARRAY
14136: PUSH
14137: LD_INT 4
14139: EQUAL
14140: PUSH
14141: LD_VAR 0 10
14145: PUSH
14146: LD_VAR 0 14
14150: ARRAY
14151: PUSH
14152: LD_INT 5
14154: EQUAL
14155: OR
14156: PUSH
14157: LD_VAR 0 10
14161: PUSH
14162: LD_VAR 0 14
14166: ARRAY
14167: PUSH
14168: LD_INT 9
14170: EQUAL
14171: OR
14172: PUSH
14173: LD_VAR 0 10
14177: PUSH
14178: LD_VAR 0 14
14182: ARRAY
14183: PUSH
14184: LD_INT 11
14186: EQUAL
14187: OR
14188: PUSH
14189: LD_VAR 0 10
14193: PUSH
14194: LD_VAR 0 14
14198: ARRAY
14199: PUSH
14200: LD_INT 7
14202: EQUAL
14203: OR
14204: IFFALSE 14253
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14206: LD_ADDR_VAR 0 19
14210: PUSH
14211: LD_INT 2
14213: PUSH
14214: LD_INT 3
14216: PUSH
14217: LD_INT 4
14219: PUSH
14220: LD_INT 5
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14229: LD_ADDR_OWVAR 37
14233: PUSH
14234: LD_VAR 0 19
14238: PUSH
14239: LD_INT 1
14241: PPUSH
14242: LD_VAR 0 19
14246: PPUSH
14247: CALL_OW 12
14251: ARRAY
14252: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14253: LD_VAR 0 10
14257: PUSH
14258: LD_VAR 0 14
14262: ARRAY
14263: PUSH
14264: LD_INT 8
14266: EQUAL
14267: PUSH
14268: LD_VAR 0 10
14272: PUSH
14273: LD_VAR 0 14
14277: ARRAY
14278: PUSH
14279: LD_INT 6
14281: EQUAL
14282: OR
14283: PUSH
14284: LD_VAR 0 10
14288: PUSH
14289: LD_VAR 0 14
14293: ARRAY
14294: PUSH
14295: LD_INT 10
14297: EQUAL
14298: OR
14299: IFFALSE 14340
// begin amChassisTab = [ 4 , 5 ] ;
14301: LD_ADDR_VAR 0 19
14305: PUSH
14306: LD_INT 4
14308: PUSH
14309: LD_INT 5
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14316: LD_ADDR_OWVAR 37
14320: PUSH
14321: LD_VAR 0 19
14325: PUSH
14326: LD_INT 1
14328: PPUSH
14329: LD_VAR 0 19
14333: PPUSH
14334: CALL_OW 12
14338: ARRAY
14339: ST_TO_ADDR
// end ; end ;
14340: GO 14040
14342: POP
14343: POP
// veh = CreateVehicle ;
14344: LD_ADDR_VAR 0 16
14348: PUSH
14349: CALL_OW 45
14353: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14354: LD_VAR 0 16
14358: PPUSH
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_INT 0
14366: PPUSH
14367: CALL_OW 49
// if vc_control = 1 then
14371: LD_OWVAR 38
14375: PUSH
14376: LD_INT 1
14378: EQUAL
14379: IFFALSE 14436
// begin hc_gallery =  ;
14381: LD_ADDR_OWVAR 33
14385: PUSH
14386: LD_STRING 
14388: ST_TO_ADDR
// hc_name =  ;
14389: LD_ADDR_OWVAR 26
14393: PUSH
14394: LD_STRING 
14396: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14397: LD_INT 0
14399: PPUSH
14400: LD_INT 3
14402: PPUSH
14403: LD_VAR 0 4
14407: PPUSH
14408: CALL_OW 380
// un = CreateHuman ;
14412: LD_ADDR_VAR 0 15
14416: PUSH
14417: CALL_OW 44
14421: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14422: LD_VAR 0 15
14426: PPUSH
14427: LD_VAR 0 16
14431: PPUSH
14432: CALL_OW 52
// end ; i = i + 1 ;
14436: LD_ADDR_VAR 0 13
14440: PUSH
14441: LD_VAR 0 13
14445: PUSH
14446: LD_INT 1
14448: PLUS
14449: ST_TO_ADDR
// end ; if nation = 2 then
14450: LD_VAR 0 5
14454: PUSH
14455: LD_INT 2
14457: EQUAL
14458: IFFALSE 14896
// begin uc_side = side ;
14460: LD_ADDR_OWVAR 20
14464: PUSH
14465: LD_VAR 0 2
14469: ST_TO_ADDR
// uc_nation = nation ;
14470: LD_ADDR_OWVAR 21
14474: PUSH
14475: LD_VAR 0 5
14479: ST_TO_ADDR
// vc_engine = vehengine ;
14480: LD_ADDR_OWVAR 39
14484: PUSH
14485: LD_VAR 0 6
14489: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14490: LD_ADDR_OWVAR 38
14494: PUSH
14495: LD_VAR 0 7
14499: PUSH
14500: LD_INT 1
14502: PPUSH
14503: LD_VAR 0 7
14507: PPUSH
14508: CALL_OW 12
14512: ARRAY
14513: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
14514: LD_ADDR_OWVAR 40
14518: PUSH
14519: LD_VAR 0 9
14523: PUSH
14524: LD_INT 1
14526: PPUSH
14527: LD_VAR 0 9
14531: PPUSH
14532: CALL_OW 12
14536: ARRAY
14537: ST_TO_ADDR
// for j = 1 to ARWeapons do
14538: LD_ADDR_VAR 0 14
14542: PUSH
14543: DOUBLE
14544: LD_INT 1
14546: DEC
14547: ST_TO_ADDR
14548: LD_VAR 0 9
14552: PUSH
14553: FOR_TO
14554: IFFALSE 14788
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14556: LD_VAR 0 9
14560: PUSH
14561: LD_VAR 0 14
14565: ARRAY
14566: PUSH
14567: LD_INT 24
14569: EQUAL
14570: PUSH
14571: LD_VAR 0 9
14575: PUSH
14576: LD_VAR 0 14
14580: ARRAY
14581: PUSH
14582: LD_INT 22
14584: EQUAL
14585: OR
14586: PUSH
14587: LD_VAR 0 9
14591: PUSH
14592: LD_VAR 0 14
14596: ARRAY
14597: PUSH
14598: LD_INT 23
14600: EQUAL
14601: OR
14602: PUSH
14603: LD_VAR 0 9
14607: PUSH
14608: LD_VAR 0 14
14612: ARRAY
14613: PUSH
14614: LD_INT 30
14616: EQUAL
14617: OR
14618: IFFALSE 14667
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14620: LD_ADDR_VAR 0 18
14624: PUSH
14625: LD_INT 11
14627: PUSH
14628: LD_INT 12
14630: PUSH
14631: LD_INT 13
14633: PUSH
14634: LD_INT 14
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14643: LD_ADDR_OWVAR 37
14647: PUSH
14648: LD_VAR 0 18
14652: PUSH
14653: LD_INT 1
14655: PPUSH
14656: LD_VAR 0 18
14660: PPUSH
14661: CALL_OW 12
14665: ARRAY
14666: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14667: LD_VAR 0 9
14671: PUSH
14672: LD_VAR 0 14
14676: ARRAY
14677: PUSH
14678: LD_INT 29
14680: EQUAL
14681: PUSH
14682: LD_VAR 0 9
14686: PUSH
14687: LD_VAR 0 14
14691: ARRAY
14692: PUSH
14693: LD_INT 28
14695: EQUAL
14696: OR
14697: PUSH
14698: LD_VAR 0 9
14702: PUSH
14703: LD_VAR 0 14
14707: ARRAY
14708: PUSH
14709: LD_INT 27
14711: EQUAL
14712: OR
14713: PUSH
14714: LD_VAR 0 9
14718: PUSH
14719: LD_VAR 0 14
14723: ARRAY
14724: PUSH
14725: LD_INT 26
14727: EQUAL
14728: OR
14729: PUSH
14730: LD_VAR 0 9
14734: PUSH
14735: LD_VAR 0 14
14739: ARRAY
14740: PUSH
14741: LD_INT 25
14743: EQUAL
14744: OR
14745: IFFALSE 14786
// begin arChassisTab = [ 13 , 14 ] ;
14747: LD_ADDR_VAR 0 18
14751: PUSH
14752: LD_INT 13
14754: PUSH
14755: LD_INT 14
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14762: LD_ADDR_OWVAR 37
14766: PUSH
14767: LD_VAR 0 18
14771: PUSH
14772: LD_INT 1
14774: PPUSH
14775: LD_VAR 0 18
14779: PPUSH
14780: CALL_OW 12
14784: ARRAY
14785: ST_TO_ADDR
// end ; end ;
14786: GO 14553
14788: POP
14789: POP
// veh = CreateVehicle ;
14790: LD_ADDR_VAR 0 16
14794: PUSH
14795: CALL_OW 45
14799: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14800: LD_VAR 0 16
14804: PPUSH
14805: LD_VAR 0 1
14809: PPUSH
14810: LD_INT 0
14812: PPUSH
14813: CALL_OW 49
// if vc_control = 1 then
14817: LD_OWVAR 38
14821: PUSH
14822: LD_INT 1
14824: EQUAL
14825: IFFALSE 14882
// begin hc_gallery =  ;
14827: LD_ADDR_OWVAR 33
14831: PUSH
14832: LD_STRING 
14834: ST_TO_ADDR
// hc_name =  ;
14835: LD_ADDR_OWVAR 26
14839: PUSH
14840: LD_STRING 
14842: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14843: LD_INT 0
14845: PPUSH
14846: LD_INT 3
14848: PPUSH
14849: LD_VAR 0 4
14853: PPUSH
14854: CALL_OW 380
// un = CreateHuman ;
14858: LD_ADDR_VAR 0 15
14862: PUSH
14863: CALL_OW 44
14867: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14868: LD_VAR 0 15
14872: PPUSH
14873: LD_VAR 0 16
14877: PPUSH
14878: CALL_OW 52
// end ; i = i + 1 ;
14882: LD_ADDR_VAR 0 13
14886: PUSH
14887: LD_VAR 0 13
14891: PUSH
14892: LD_INT 1
14894: PLUS
14895: ST_TO_ADDR
// end ; if nation = 3 then
14896: LD_VAR 0 5
14900: PUSH
14901: LD_INT 3
14903: EQUAL
14904: IFFALSE 15310
// begin uc_side = side ;
14906: LD_ADDR_OWVAR 20
14910: PUSH
14911: LD_VAR 0 2
14915: ST_TO_ADDR
// uc_nation = nation ;
14916: LD_ADDR_OWVAR 21
14920: PUSH
14921: LD_VAR 0 5
14925: ST_TO_ADDR
// vc_engine = vehengine ;
14926: LD_ADDR_OWVAR 39
14930: PUSH
14931: LD_VAR 0 6
14935: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14936: LD_ADDR_OWVAR 38
14940: PUSH
14941: LD_VAR 0 7
14945: PUSH
14946: LD_INT 1
14948: PPUSH
14949: LD_VAR 0 7
14953: PPUSH
14954: CALL_OW 12
14958: ARRAY
14959: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14960: LD_ADDR_OWVAR 40
14964: PUSH
14965: LD_VAR 0 8
14969: PUSH
14970: LD_INT 1
14972: PPUSH
14973: LD_VAR 0 8
14977: PPUSH
14978: CALL_OW 12
14982: ARRAY
14983: ST_TO_ADDR
// for j = 1 to RuWeapons do
14984: LD_ADDR_VAR 0 14
14988: PUSH
14989: DOUBLE
14990: LD_INT 1
14992: DEC
14993: ST_TO_ADDR
14994: LD_VAR 0 8
14998: PUSH
14999: FOR_TO
15000: IFFALSE 15202
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15002: LD_VAR 0 8
15006: PUSH
15007: LD_VAR 0 14
15011: ARRAY
15012: PUSH
15013: LD_INT 42
15015: EQUAL
15016: PUSH
15017: LD_VAR 0 8
15021: PUSH
15022: LD_VAR 0 14
15026: ARRAY
15027: PUSH
15028: LD_INT 43
15030: EQUAL
15031: OR
15032: PUSH
15033: LD_VAR 0 8
15037: PUSH
15038: LD_VAR 0 14
15042: ARRAY
15043: PUSH
15044: LD_INT 44
15046: EQUAL
15047: OR
15048: PUSH
15049: LD_VAR 0 8
15053: PUSH
15054: LD_VAR 0 14
15058: ARRAY
15059: PUSH
15060: LD_INT 45
15062: EQUAL
15063: OR
15064: PUSH
15065: LD_VAR 0 8
15069: PUSH
15070: LD_VAR 0 14
15074: ARRAY
15075: PUSH
15076: LD_INT 49
15078: EQUAL
15079: OR
15080: IFFALSE 15129
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15082: LD_ADDR_VAR 0 17
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 22
15092: PUSH
15093: LD_INT 23
15095: PUSH
15096: LD_INT 24
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15105: LD_ADDR_OWVAR 37
15109: PUSH
15110: LD_VAR 0 17
15114: PUSH
15115: LD_INT 1
15117: PPUSH
15118: LD_VAR 0 17
15122: PPUSH
15123: CALL_OW 12
15127: ARRAY
15128: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 14
15138: ARRAY
15139: PUSH
15140: LD_INT 46
15142: EQUAL
15143: PUSH
15144: LD_VAR 0 8
15148: PUSH
15149: LD_VAR 0 14
15153: ARRAY
15154: PUSH
15155: LD_INT 47
15157: EQUAL
15158: OR
15159: IFFALSE 15200
// begin ruChassisTab = [ 23 , 24 ] ;
15161: LD_ADDR_VAR 0 17
15165: PUSH
15166: LD_INT 23
15168: PUSH
15169: LD_INT 24
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15176: LD_ADDR_OWVAR 37
15180: PUSH
15181: LD_VAR 0 17
15185: PUSH
15186: LD_INT 1
15188: PPUSH
15189: LD_VAR 0 17
15193: PPUSH
15194: CALL_OW 12
15198: ARRAY
15199: ST_TO_ADDR
// end ; end ;
15200: GO 14999
15202: POP
15203: POP
// veh = CreateVehicle ;
15204: LD_ADDR_VAR 0 16
15208: PUSH
15209: CALL_OW 45
15213: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15214: LD_VAR 0 16
15218: PPUSH
15219: LD_VAR 0 1
15223: PPUSH
15224: LD_INT 0
15226: PPUSH
15227: CALL_OW 49
// if vc_control = 1 then
15231: LD_OWVAR 38
15235: PUSH
15236: LD_INT 1
15238: EQUAL
15239: IFFALSE 15296
// begin hc_gallery =  ;
15241: LD_ADDR_OWVAR 33
15245: PUSH
15246: LD_STRING 
15248: ST_TO_ADDR
// hc_name =  ;
15249: LD_ADDR_OWVAR 26
15253: PUSH
15254: LD_STRING 
15256: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15257: LD_INT 0
15259: PPUSH
15260: LD_INT 3
15262: PPUSH
15263: LD_VAR 0 4
15267: PPUSH
15268: CALL_OW 380
// un = CreateHuman ;
15272: LD_ADDR_VAR 0 15
15276: PUSH
15277: CALL_OW 44
15281: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15282: LD_VAR 0 15
15286: PPUSH
15287: LD_VAR 0 16
15291: PPUSH
15292: CALL_OW 52
// end ; i = i + 1 ;
15296: LD_ADDR_VAR 0 13
15300: PUSH
15301: LD_VAR 0 13
15305: PUSH
15306: LD_INT 1
15308: PLUS
15309: ST_TO_ADDR
// end ; until i = vehCount ;
15310: LD_VAR 0 13
15314: PUSH
15315: LD_VAR 0 3
15319: EQUAL
15320: IFFALSE 13930
// repeat wait ( 0 0$1 ) ;
15322: LD_INT 35
15324: PPUSH
15325: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
15329: LD_ADDR_VAR 0 20
15333: PUSH
15334: LD_INT 22
15336: PUSH
15337: LD_VAR 0 2
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 24
15358: PUSH
15359: LD_INT 650
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: EMPTY
15367: LIST
15368: LIST
15369: LIST
15370: PPUSH
15371: CALL_OW 69
15375: ST_TO_ADDR
// if vehicleOK_list > 0 then
15376: LD_VAR 0 20
15380: PUSH
15381: LD_INT 0
15383: GREATER
15384: IFFALSE 15575
// begin for i in vehicleOK_list do
15386: LD_ADDR_VAR 0 13
15390: PUSH
15391: LD_VAR 0 20
15395: PUSH
15396: FOR_IN
15397: IFFALSE 15573
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15399: LD_ADDR_VAR 0 21
15403: PUSH
15404: LD_INT 22
15406: PUSH
15407: LD_VAR 0 11
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 69
15420: PPUSH
15421: LD_VAR 0 13
15425: PPUSH
15426: CALL_OW 74
15430: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15431: LD_ADDR_VAR 0 22
15435: PUSH
15436: LD_INT 22
15438: PUSH
15439: LD_VAR 0 11
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: PUSH
15448: LD_INT 2
15450: PUSH
15451: LD_INT 59
15453: PUSH
15454: EMPTY
15455: LIST
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 1
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: LD_INT 21
15469: PUSH
15470: LD_INT 2
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PUSH
15477: EMPTY
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: PPUSH
15490: CALL_OW 69
15494: PPUSH
15495: LD_VAR 0 13
15499: PPUSH
15500: CALL_OW 74
15504: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15505: LD_VAR 0 13
15509: PPUSH
15510: LD_VAR 0 21
15514: PPUSH
15515: CALL_OW 296
15519: PUSH
15520: LD_INT 8
15522: PLUS
15523: PUSH
15524: LD_VAR 0 13
15528: PPUSH
15529: LD_VAR 0 22
15533: PPUSH
15534: CALL_OW 296
15538: LESS
15539: IFFALSE 15557
// begin ComAttackUnit ( i , target1 ) ;
15541: LD_VAR 0 13
15545: PPUSH
15546: LD_VAR 0 21
15550: PPUSH
15551: CALL_OW 115
// end else
15555: GO 15571
// begin ComAttackUnit ( i , target2 ) ;
15557: LD_VAR 0 13
15561: PPUSH
15562: LD_VAR 0 22
15566: PPUSH
15567: CALL_OW 115
// end ; end ;
15571: GO 15396
15573: POP
15574: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
15575: LD_INT 22
15577: PUSH
15578: LD_VAR 0 2
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PUSH
15587: LD_INT 21
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: PPUSH
15601: CALL_OW 69
15605: PUSH
15606: LD_INT 0
15608: EQUAL
15609: IFFALSE 15322
// end ;
15611: LD_VAR 0 12
15615: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
15616: LD_INT 0
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
15625: PPUSH
15626: PPUSH
15627: PPUSH
15628: PPUSH
// for i = 1 to medicCount do
15629: LD_ADDR_VAR 0 13
15633: PUSH
15634: DOUBLE
15635: LD_INT 1
15637: DEC
15638: ST_TO_ADDR
15639: LD_VAR 0 7
15643: PUSH
15644: FOR_TO
15645: IFFALSE 15727
// begin uc_side = side ;
15647: LD_ADDR_OWVAR 20
15651: PUSH
15652: LD_VAR 0 1
15656: ST_TO_ADDR
// uc_nation = nation ;
15657: LD_ADDR_OWVAR 21
15661: PUSH
15662: LD_VAR 0 2
15666: ST_TO_ADDR
// hc_name =  ;
15667: LD_ADDR_OWVAR 26
15671: PUSH
15672: LD_STRING 
15674: ST_TO_ADDR
// hc_gallery =  ;
15675: LD_ADDR_OWVAR 33
15679: PUSH
15680: LD_STRING 
15682: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
15683: LD_INT 0
15685: PPUSH
15686: LD_INT 4
15688: PPUSH
15689: LD_VAR 0 8
15693: PPUSH
15694: CALL_OW 380
// un = CreateHuman ;
15698: LD_ADDR_VAR 0 15
15702: PUSH
15703: CALL_OW 44
15707: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15708: LD_VAR 0 15
15712: PPUSH
15713: LD_VAR 0 9
15717: PPUSH
15718: LD_INT 0
15720: PPUSH
15721: CALL_OW 49
// end ;
15725: GO 15644
15727: POP
15728: POP
// for i = 1 to soldierCount do
15729: LD_ADDR_VAR 0 13
15733: PUSH
15734: DOUBLE
15735: LD_INT 1
15737: DEC
15738: ST_TO_ADDR
15739: LD_VAR 0 3
15743: PUSH
15744: FOR_TO
15745: IFFALSE 15827
// begin uc_side = side ;
15747: LD_ADDR_OWVAR 20
15751: PUSH
15752: LD_VAR 0 1
15756: ST_TO_ADDR
// uc_nation = nation ;
15757: LD_ADDR_OWVAR 21
15761: PUSH
15762: LD_VAR 0 2
15766: ST_TO_ADDR
// hc_name =  ;
15767: LD_ADDR_OWVAR 26
15771: PUSH
15772: LD_STRING 
15774: ST_TO_ADDR
// hc_gallery =  ;
15775: LD_ADDR_OWVAR 33
15779: PUSH
15780: LD_STRING 
15782: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
15783: LD_INT 0
15785: PPUSH
15786: LD_INT 1
15788: PPUSH
15789: LD_VAR 0 8
15793: PPUSH
15794: CALL_OW 380
// un = CreateHuman ;
15798: LD_ADDR_VAR 0 15
15802: PUSH
15803: CALL_OW 44
15807: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15808: LD_VAR 0 15
15812: PPUSH
15813: LD_VAR 0 9
15817: PPUSH
15818: LD_INT 0
15820: PPUSH
15821: CALL_OW 49
// end ;
15825: GO 15744
15827: POP
15828: POP
// for i = 1 to sniperCount do
15829: LD_ADDR_VAR 0 13
15833: PUSH
15834: DOUBLE
15835: LD_INT 1
15837: DEC
15838: ST_TO_ADDR
15839: LD_VAR 0 4
15843: PUSH
15844: FOR_TO
15845: IFFALSE 15927
// begin uc_side = side ;
15847: LD_ADDR_OWVAR 20
15851: PUSH
15852: LD_VAR 0 1
15856: ST_TO_ADDR
// uc_nation = nation ;
15857: LD_ADDR_OWVAR 21
15861: PUSH
15862: LD_VAR 0 2
15866: ST_TO_ADDR
// hc_name =  ;
15867: LD_ADDR_OWVAR 26
15871: PUSH
15872: LD_STRING 
15874: ST_TO_ADDR
// hc_gallery =  ;
15875: LD_ADDR_OWVAR 33
15879: PUSH
15880: LD_STRING 
15882: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
15883: LD_INT 0
15885: PPUSH
15886: LD_INT 5
15888: PPUSH
15889: LD_VAR 0 8
15893: PPUSH
15894: CALL_OW 380
// un = CreateHuman ;
15898: LD_ADDR_VAR 0 15
15902: PUSH
15903: CALL_OW 44
15907: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15908: LD_VAR 0 15
15912: PPUSH
15913: LD_VAR 0 9
15917: PPUSH
15918: LD_INT 0
15920: PPUSH
15921: CALL_OW 49
// end ;
15925: GO 15844
15927: POP
15928: POP
// for i = 1 to bazookCount do
15929: LD_ADDR_VAR 0 13
15933: PUSH
15934: DOUBLE
15935: LD_INT 1
15937: DEC
15938: ST_TO_ADDR
15939: LD_VAR 0 5
15943: PUSH
15944: FOR_TO
15945: IFFALSE 16027
// begin uc_side = side ;
15947: LD_ADDR_OWVAR 20
15951: PUSH
15952: LD_VAR 0 1
15956: ST_TO_ADDR
// uc_nation = nation ;
15957: LD_ADDR_OWVAR 21
15961: PUSH
15962: LD_VAR 0 2
15966: ST_TO_ADDR
// hc_name =  ;
15967: LD_ADDR_OWVAR 26
15971: PUSH
15972: LD_STRING 
15974: ST_TO_ADDR
// hc_gallery =  ;
15975: LD_ADDR_OWVAR 33
15979: PUSH
15980: LD_STRING 
15982: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
15983: LD_INT 0
15985: PPUSH
15986: LD_INT 9
15988: PPUSH
15989: LD_VAR 0 8
15993: PPUSH
15994: CALL_OW 380
// un = CreateHuman ;
15998: LD_ADDR_VAR 0 15
16002: PUSH
16003: CALL_OW 44
16007: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16008: LD_VAR 0 15
16012: PPUSH
16013: LD_VAR 0 9
16017: PPUSH
16018: LD_INT 0
16020: PPUSH
16021: CALL_OW 49
// end ;
16025: GO 15944
16027: POP
16028: POP
// for i = 1 to mortalCount do
16029: LD_ADDR_VAR 0 13
16033: PUSH
16034: DOUBLE
16035: LD_INT 1
16037: DEC
16038: ST_TO_ADDR
16039: LD_VAR 0 6
16043: PUSH
16044: FOR_TO
16045: IFFALSE 16127
// begin uc_side = side ;
16047: LD_ADDR_OWVAR 20
16051: PUSH
16052: LD_VAR 0 1
16056: ST_TO_ADDR
// uc_nation = nation ;
16057: LD_ADDR_OWVAR 21
16061: PUSH
16062: LD_VAR 0 2
16066: ST_TO_ADDR
// hc_name =  ;
16067: LD_ADDR_OWVAR 26
16071: PUSH
16072: LD_STRING 
16074: ST_TO_ADDR
// hc_gallery =  ;
16075: LD_ADDR_OWVAR 33
16079: PUSH
16080: LD_STRING 
16082: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
16083: LD_INT 0
16085: PPUSH
16086: LD_INT 8
16088: PPUSH
16089: LD_VAR 0 8
16093: PPUSH
16094: CALL_OW 380
// un = CreateHuman ;
16098: LD_ADDR_VAR 0 15
16102: PUSH
16103: CALL_OW 44
16107: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16108: LD_VAR 0 15
16112: PPUSH
16113: LD_VAR 0 9
16117: PPUSH
16118: LD_INT 0
16120: PPUSH
16121: CALL_OW 49
// end ;
16125: GO 16044
16127: POP
16128: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
16129: LD_ADDR_VAR 0 18
16133: PUSH
16134: LD_INT 22
16136: PUSH
16137: LD_VAR 0 1
16141: PUSH
16142: EMPTY
16143: LIST
16144: LIST
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: LD_INT 25
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 5
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 25
16171: PUSH
16172: LD_INT 8
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: LD_INT 25
16181: PUSH
16182: LD_INT 9
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PPUSH
16200: CALL_OW 69
16204: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16205: LD_ADDR_VAR 0 17
16209: PUSH
16210: LD_INT 22
16212: PUSH
16213: LD_VAR 0 1
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: PUSH
16222: LD_INT 25
16224: PUSH
16225: LD_INT 4
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PPUSH
16236: CALL_OW 69
16240: ST_TO_ADDR
// for i in medic_list do
16241: LD_ADDR_VAR 0 13
16245: PUSH
16246: LD_VAR 0 17
16250: PUSH
16251: FOR_IN
16252: IFFALSE 16270
// ComMoveToArea ( i , healArea ) ;
16254: LD_VAR 0 13
16258: PPUSH
16259: LD_VAR 0 10
16263: PPUSH
16264: CALL_OW 113
16268: GO 16251
16270: POP
16271: POP
// repeat wait ( 0 0$1 ) ;
16272: LD_INT 35
16274: PPUSH
16275: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16279: LD_ADDR_VAR 0 16
16283: PUSH
16284: LD_INT 22
16286: PUSH
16287: LD_VAR 0 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: LD_INT 3
16301: PUSH
16302: LD_INT 24
16304: PUSH
16305: LD_INT 550
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: PUSH
16316: LD_INT 24
16318: PUSH
16319: LD_INT 250
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: PUSH
16331: EMPTY
16332: LIST
16333: LIST
16334: PPUSH
16335: CALL_OW 69
16339: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16340: LD_ADDR_VAR 0 18
16344: PUSH
16345: LD_INT 22
16347: PUSH
16348: LD_VAR 0 1
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 25
16362: PUSH
16363: LD_INT 1
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 25
16372: PUSH
16373: LD_INT 5
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 25
16382: PUSH
16383: LD_INT 8
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: LD_INT 25
16392: PUSH
16393: LD_INT 9
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: EMPTY
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 24
16409: PUSH
16410: LD_INT 1000
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: PPUSH
16422: CALL_OW 69
16426: ST_TO_ADDR
// if medicCount > 0 then
16427: LD_VAR 0 7
16431: PUSH
16432: LD_INT 0
16434: GREATER
16435: IFFALSE 16509
// begin if damageUnit_list > 0 then
16437: LD_VAR 0 16
16441: PUSH
16442: LD_INT 0
16444: GREATER
16445: IFFALSE 16509
// begin for i in damageUnit_list do
16447: LD_ADDR_VAR 0 13
16451: PUSH
16452: LD_VAR 0 16
16456: PUSH
16457: FOR_IN
16458: IFFALSE 16507
// begin ComMoveToArea ( i , healArea ) ;
16460: LD_VAR 0 13
16464: PPUSH
16465: LD_VAR 0 10
16469: PPUSH
16470: CALL_OW 113
// for j in medic_list do
16474: LD_ADDR_VAR 0 14
16478: PUSH
16479: LD_VAR 0 17
16483: PUSH
16484: FOR_IN
16485: IFFALSE 16503
// AddComHeal ( j , i ) ;
16487: LD_VAR 0 14
16491: PPUSH
16492: LD_VAR 0 13
16496: PPUSH
16497: CALL_OW 188
16501: GO 16484
16503: POP
16504: POP
// end ;
16505: GO 16457
16507: POP
16508: POP
// end ; end ; for i in soldiersOK_list do
16509: LD_ADDR_VAR 0 13
16513: PUSH
16514: LD_VAR 0 18
16518: PUSH
16519: FOR_IN
16520: IFFALSE 16696
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16522: LD_ADDR_VAR 0 21
16526: PUSH
16527: LD_INT 22
16529: PUSH
16530: LD_VAR 0 11
16534: PUSH
16535: EMPTY
16536: LIST
16537: LIST
16538: PPUSH
16539: CALL_OW 69
16543: PPUSH
16544: LD_VAR 0 13
16548: PPUSH
16549: CALL_OW 74
16553: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16554: LD_ADDR_VAR 0 22
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 11
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 2
16573: PUSH
16574: LD_INT 59
16576: PUSH
16577: EMPTY
16578: LIST
16579: PUSH
16580: LD_INT 21
16582: PUSH
16583: LD_INT 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 2
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: PPUSH
16613: CALL_OW 69
16617: PPUSH
16618: LD_VAR 0 13
16622: PPUSH
16623: CALL_OW 74
16627: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16628: LD_VAR 0 13
16632: PPUSH
16633: LD_VAR 0 21
16637: PPUSH
16638: CALL_OW 296
16642: PUSH
16643: LD_INT 8
16645: PLUS
16646: PUSH
16647: LD_VAR 0 13
16651: PPUSH
16652: LD_VAR 0 22
16656: PPUSH
16657: CALL_OW 296
16661: LESS
16662: IFFALSE 16680
// begin ComAttackUnit ( i , target1 ) ;
16664: LD_VAR 0 13
16668: PPUSH
16669: LD_VAR 0 21
16673: PPUSH
16674: CALL_OW 115
// end else
16678: GO 16694
// begin ComAttackUnit ( i , target2 ) ;
16680: LD_VAR 0 13
16684: PPUSH
16685: LD_VAR 0 22
16689: PPUSH
16690: CALL_OW 115
// end ; end ;
16694: GO 16519
16696: POP
16697: POP
// for i in soldiersOK_list do
16698: LD_ADDR_VAR 0 13
16702: PUSH
16703: LD_VAR 0 18
16707: PUSH
16708: FOR_IN
16709: IFFALSE 16885
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16711: LD_ADDR_VAR 0 21
16715: PUSH
16716: LD_INT 22
16718: PUSH
16719: LD_VAR 0 11
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PPUSH
16733: LD_VAR 0 13
16737: PPUSH
16738: CALL_OW 74
16742: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16743: LD_ADDR_VAR 0 22
16747: PUSH
16748: LD_INT 22
16750: PUSH
16751: LD_VAR 0 11
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 2
16762: PUSH
16763: LD_INT 59
16765: PUSH
16766: EMPTY
16767: LIST
16768: PUSH
16769: LD_INT 21
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: LD_INT 21
16781: PUSH
16782: LD_INT 2
16784: PUSH
16785: EMPTY
16786: LIST
16787: LIST
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: PPUSH
16802: CALL_OW 69
16806: PPUSH
16807: LD_VAR 0 13
16811: PPUSH
16812: CALL_OW 74
16816: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16817: LD_VAR 0 13
16821: PPUSH
16822: LD_VAR 0 21
16826: PPUSH
16827: CALL_OW 296
16831: PUSH
16832: LD_INT 8
16834: PLUS
16835: PUSH
16836: LD_VAR 0 13
16840: PPUSH
16841: LD_VAR 0 22
16845: PPUSH
16846: CALL_OW 296
16850: LESS
16851: IFFALSE 16869
// begin ComAttackUnit ( i , target1 ) ;
16853: LD_VAR 0 13
16857: PPUSH
16858: LD_VAR 0 21
16862: PPUSH
16863: CALL_OW 115
// end else
16867: GO 16883
// begin ComAttackUnit ( i , target2 ) ;
16869: LD_VAR 0 13
16873: PPUSH
16874: LD_VAR 0 22
16878: PPUSH
16879: CALL_OW 115
// end ; end ;
16883: GO 16708
16885: POP
16886: POP
// until soldiersOK_list = [ ] ;
16887: LD_VAR 0 18
16891: PUSH
16892: EMPTY
16893: EQUAL
16894: IFFALSE 16272
// end ;
16896: LD_VAR 0 12
16900: RET
// export function TameApemans ; var i , j ; begin
16901: LD_INT 0
16903: PPUSH
16904: PPUSH
16905: PPUSH
// repeat wait ( 0 0$1 ) ;
16906: LD_INT 35
16908: PPUSH
16909: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16913: LD_ADDR_VAR 0 2
16917: PUSH
16918: LD_INT 22
16920: PUSH
16921: LD_INT 2
16923: PUSH
16924: EMPTY
16925: LIST
16926: LIST
16927: PUSH
16928: LD_INT 25
16930: PUSH
16931: LD_INT 4
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PPUSH
16942: CALL_OW 69
16946: PUSH
16947: FOR_IN
16948: IFFALSE 17025
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16950: LD_ADDR_VAR 0 3
16954: PUSH
16955: LD_INT 5
16957: PPUSH
16958: LD_INT 22
16960: PUSH
16961: LD_INT 0
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 25
16970: PUSH
16971: LD_INT 12
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PPUSH
16982: CALL_OW 70
16986: PUSH
16987: FOR_IN
16988: IFFALSE 17021
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16990: LD_VAR 0 2
16994: PPUSH
16995: LD_VAR 0 3
16999: PPUSH
17000: CALL_OW 250
17004: PPUSH
17005: LD_VAR 0 3
17009: PPUSH
17010: CALL_OW 251
17014: PPUSH
17015: CALL_OW 191
// end ;
17019: GO 16987
17021: POP
17022: POP
// end ;
17023: GO 16947
17025: POP
17026: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17027: LD_INT 22
17029: PUSH
17030: LD_INT 2
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 25
17039: PUSH
17040: LD_INT 4
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PPUSH
17051: CALL_OW 69
17055: PUSH
17056: LD_INT 0
17058: EQUAL
17059: PUSH
17060: LD_INT 5
17062: PPUSH
17063: LD_INT 22
17065: PUSH
17066: LD_INT 0
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 25
17075: PUSH
17076: LD_INT 12
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PPUSH
17087: CALL_OW 70
17091: PUSH
17092: LD_INT 0
17094: EQUAL
17095: OR
17096: IFFALSE 16906
// wait ( 0 0$30 ) ;
17098: LD_INT 1050
17100: PPUSH
17101: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
17105: LD_ADDR_VAR 0 2
17109: PUSH
17110: LD_INT 22
17112: PUSH
17113: LD_INT 2
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 25
17122: PUSH
17123: LD_INT 12
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PPUSH
17134: CALL_OW 69
17138: PUSH
17139: FOR_IN
17140: IFFALSE 17204
// begin SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
17142: LD_VAR 0 2
17146: PPUSH
17147: LD_INT 16
17149: PUSH
17150: LD_INT 15
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 1
17159: PPUSH
17160: LD_INT 2
17162: PPUSH
17163: CALL_OW 12
17167: ARRAY
17168: PPUSH
17169: CALL_OW 336
// ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
17173: LD_VAR 0 2
17177: PPUSH
17178: LD_EXP 41
17182: PPUSH
17183: CALL_OW 250
17187: PPUSH
17188: LD_EXP 41
17192: PPUSH
17193: CALL_OW 251
17197: PPUSH
17198: CALL_OW 111
// end ;
17202: GO 17139
17204: POP
17205: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
17206: LD_ADDR_VAR 0 2
17210: PUSH
17211: LD_INT 22
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: PUSH
17221: LD_INT 25
17223: PUSH
17224: LD_INT 4
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PPUSH
17235: CALL_OW 69
17239: PUSH
17240: FOR_IN
17241: IFFALSE 17287
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
17243: LD_VAR 0 2
17247: PPUSH
17248: LD_INT 22
17250: PUSH
17251: LD_INT 2
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 30
17260: PUSH
17261: LD_INT 8
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PPUSH
17272: CALL_OW 69
17276: PUSH
17277: LD_INT 1
17279: ARRAY
17280: PPUSH
17281: CALL_OW 120
17285: GO 17240
17287: POP
17288: POP
// end ;
17289: LD_VAR 0 1
17293: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
17294: LD_INT 0
17296: PPUSH
17297: PPUSH
17298: PPUSH
17299: PPUSH
17300: PPUSH
17301: PPUSH
17302: PPUSH
17303: PPUSH
17304: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
17305: LD_INT 22
17307: PUSH
17308: LD_VAR 0 1
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: PUSH
17317: LD_INT 21
17319: PUSH
17320: LD_INT 2
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PPUSH
17331: CALL_OW 69
17335: PUSH
17336: LD_VAR 0 3
17340: LESSEQUAL
17341: IFFALSE 17485
// for i = 1 to vehCount do
17343: LD_ADDR_VAR 0 10
17347: PUSH
17348: DOUBLE
17349: LD_INT 1
17351: DEC
17352: ST_TO_ADDR
17353: LD_VAR 0 3
17357: PUSH
17358: FOR_TO
17359: IFFALSE 17483
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
17361: LD_ADDR_VAR 0 12
17365: PUSH
17366: LD_VAR 0 5
17370: PUSH
17371: LD_INT 1
17373: PPUSH
17374: LD_VAR 0 5
17378: PPUSH
17379: CALL_OW 12
17383: ARRAY
17384: ST_TO_ADDR
// if randWeapon = 46 then
17385: LD_VAR 0 12
17389: PUSH
17390: LD_INT 46
17392: EQUAL
17393: IFFALSE 17438
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
17395: LD_VAR 0 2
17399: PPUSH
17400: LD_INT 24
17402: PPUSH
17403: LD_VAR 0 6
17407: PPUSH
17408: LD_VAR 0 7
17412: PUSH
17413: LD_INT 1
17415: PPUSH
17416: LD_VAR 0 7
17420: PPUSH
17421: CALL_OW 12
17425: ARRAY
17426: PPUSH
17427: LD_VAR 0 12
17431: PPUSH
17432: CALL_OW 185
17436: GO 17481
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
17438: LD_VAR 0 2
17442: PPUSH
17443: LD_VAR 0 8
17447: PPUSH
17448: LD_VAR 0 6
17452: PPUSH
17453: LD_VAR 0 7
17457: PUSH
17458: LD_INT 1
17460: PPUSH
17461: LD_VAR 0 7
17465: PPUSH
17466: CALL_OW 12
17470: ARRAY
17471: PPUSH
17472: LD_VAR 0 12
17476: PPUSH
17477: CALL_OW 185
// end ;
17481: GO 17358
17483: POP
17484: POP
// repeat wait ( 0 0$1 ) ;
17485: LD_INT 35
17487: PPUSH
17488: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
17492: LD_INT 22
17494: PUSH
17495: LD_VAR 0 1
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 21
17506: PUSH
17507: LD_INT 2
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: PUSH
17514: LD_INT 24
17516: PUSH
17517: LD_INT 250
17519: PUSH
17520: EMPTY
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: PPUSH
17529: CALL_OW 69
17533: PUSH
17534: LD_VAR 0 3
17538: GREATEREQUAL
17539: IFFALSE 17485
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
17541: LD_INT 22
17543: PUSH
17544: LD_VAR 0 1
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 21
17555: PUSH
17556: LD_INT 2
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: LD_INT 24
17565: PUSH
17566: LD_INT 250
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: LIST
17577: PPUSH
17578: CALL_OW 69
17582: PUSH
17583: LD_VAR 0 3
17587: GREATEREQUAL
17588: IFFALSE 17931
// begin repeat begin wait ( 0 0$1 ) ;
17590: LD_INT 35
17592: PPUSH
17593: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
17597: LD_INT 22
17599: PUSH
17600: LD_VAR 0 1
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: LD_INT 21
17611: PUSH
17612: LD_INT 2
17614: PUSH
17615: EMPTY
17616: LIST
17617: LIST
17618: PUSH
17619: LD_INT 24
17621: PUSH
17622: LD_INT 651
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: PUSH
17629: EMPTY
17630: LIST
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: PUSH
17639: LD_INT 0
17641: GREATER
17642: IFFALSE 17870
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
17644: LD_ADDR_VAR 0 10
17648: PUSH
17649: LD_INT 22
17651: PUSH
17652: LD_VAR 0 1
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 21
17663: PUSH
17664: LD_INT 2
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: LD_INT 24
17673: PUSH
17674: LD_INT 651
17676: PUSH
17677: EMPTY
17678: LIST
17679: LIST
17680: PUSH
17681: EMPTY
17682: LIST
17683: LIST
17684: LIST
17685: PPUSH
17686: CALL_OW 69
17690: PUSH
17691: FOR_IN
17692: IFFALSE 17868
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17694: LD_ADDR_VAR 0 16
17698: PUSH
17699: LD_INT 22
17701: PUSH
17702: LD_VAR 0 4
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PPUSH
17711: CALL_OW 69
17715: PPUSH
17716: LD_VAR 0 10
17720: PPUSH
17721: CALL_OW 74
17725: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17726: LD_ADDR_VAR 0 17
17730: PUSH
17731: LD_INT 22
17733: PUSH
17734: LD_VAR 0 4
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: PUSH
17743: LD_INT 2
17745: PUSH
17746: LD_INT 59
17748: PUSH
17749: EMPTY
17750: LIST
17751: PUSH
17752: LD_INT 21
17754: PUSH
17755: LD_INT 1
17757: PUSH
17758: EMPTY
17759: LIST
17760: LIST
17761: PUSH
17762: LD_INT 21
17764: PUSH
17765: LD_INT 2
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: EMPTY
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 69
17789: PPUSH
17790: LD_VAR 0 10
17794: PPUSH
17795: CALL_OW 74
17799: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17800: LD_VAR 0 10
17804: PPUSH
17805: LD_VAR 0 16
17809: PPUSH
17810: CALL_OW 296
17814: PUSH
17815: LD_INT 8
17817: PLUS
17818: PUSH
17819: LD_VAR 0 10
17823: PPUSH
17824: LD_VAR 0 17
17828: PPUSH
17829: CALL_OW 296
17833: LESS
17834: IFFALSE 17852
// begin ComAttackUnit ( i , target1 ) ;
17836: LD_VAR 0 10
17840: PPUSH
17841: LD_VAR 0 16
17845: PPUSH
17846: CALL_OW 115
// end else
17850: GO 17866
// begin ComAttackUnit ( i , target2 ) ;
17852: LD_VAR 0 10
17856: PPUSH
17857: LD_VAR 0 17
17861: PPUSH
17862: CALL_OW 115
// end ; end ;
17866: GO 17691
17868: POP
17869: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
17870: LD_INT 22
17872: PUSH
17873: LD_VAR 0 1
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 21
17884: PUSH
17885: LD_INT 2
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: PUSH
17901: LD_INT 0
17903: EQUAL
17904: PUSH
17905: LD_INT 22
17907: PUSH
17908: LD_VAR 0 4
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: EMPTY
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: PUSH
17925: LD_INT 0
17927: EQUAL
17928: OR
17929: IFFALSE 17590
// end ; end ; end_of_file
17931: LD_VAR 0 9
17935: RET
// every 0 0$1 trigger russianAI = 1 do
17936: LD_EXP 37
17940: PUSH
17941: LD_INT 1
17943: EQUAL
17944: IFFALSE 18163
17946: GO 17948
17948: DISABLE
// begin enable ;
17949: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
17950: LD_INT 3
17952: PPUSH
17953: LD_EXP 28
17957: PPUSH
17958: CALL 12835 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17962: LD_INT 3
17964: PPUSH
17965: LD_EXP 40
17969: PPUSH
17970: CALL 13142 0 2
// if ruPossition = 1 then
17974: LD_EXP 39
17978: PUSH
17979: LD_INT 1
17981: EQUAL
17982: IFFALSE 18037
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17984: LD_INT 3
17986: PPUSH
17987: LD_INT 13
17989: PPUSH
17990: LD_INT 10
17992: PPUSH
17993: LD_INT 22
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: EMPTY
18000: LIST
18001: LIST
18002: PUSH
18003: LD_INT 21
18005: PUSH
18006: LD_INT 3
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 30
18015: PUSH
18016: LD_INT 8
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: PPUSH
18028: CALL_OW 69
18032: PPUSH
18033: CALL 13348 0 4
// if ruPossition = 2 then
18037: LD_EXP 39
18041: PUSH
18042: LD_INT 2
18044: EQUAL
18045: IFFALSE 18100
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
18047: LD_INT 3
18049: PPUSH
18050: LD_INT 14
18052: PPUSH
18053: LD_INT 11
18055: PPUSH
18056: LD_INT 22
18058: PUSH
18059: LD_INT 3
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 21
18068: PUSH
18069: LD_INT 3
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: LD_INT 30
18078: PUSH
18079: LD_INT 8
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL_OW 69
18095: PPUSH
18096: CALL 13348 0 4
// if ruPossition = 3 then
18100: LD_EXP 39
18104: PUSH
18105: LD_INT 3
18107: EQUAL
18108: IFFALSE 18163
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
18110: LD_INT 3
18112: PPUSH
18113: LD_INT 15
18115: PPUSH
18116: LD_INT 12
18118: PPUSH
18119: LD_INT 22
18121: PUSH
18122: LD_INT 3
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: LD_INT 21
18131: PUSH
18132: LD_INT 3
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PUSH
18139: LD_INT 30
18141: PUSH
18142: LD_INT 8
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 69
18158: PPUSH
18159: CALL 13348 0 4
// end ;
18163: END
// every 0 0$1 do
18164: GO 18166
18166: DISABLE
// begin enable ;
18167: ENABLE
// if ruPossition = 1 then
18168: LD_EXP 39
18172: PUSH
18173: LD_INT 1
18175: EQUAL
18176: IFFALSE 18188
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
18178: LD_INT 3
18180: PPUSH
18181: LD_INT 10
18183: PPUSH
18184: CALL 12533 0 2
// if ruPossition = 2 then
18188: LD_EXP 39
18192: PUSH
18193: LD_INT 2
18195: EQUAL
18196: IFFALSE 18208
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
18198: LD_INT 3
18200: PPUSH
18201: LD_INT 11
18203: PPUSH
18204: CALL 12533 0 2
// if ruPossition = 3 then
18208: LD_EXP 39
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18228
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
18218: LD_INT 3
18220: PPUSH
18221: LD_INT 12
18223: PPUSH
18224: CALL 12533 0 2
// IntBazooka ( 3 , 1 ) ;
18228: LD_INT 3
18230: PPUSH
18231: LD_INT 1
18233: PPUSH
18234: CALL 11624 0 2
// IntBazooka ( 6 , 1 ) ;
18238: LD_INT 6
18240: PPUSH
18241: LD_INT 1
18243: PPUSH
18244: CALL 11624 0 2
// end ;
18248: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
18249: LD_EXP 37
18253: PUSH
18254: LD_INT 1
18256: EQUAL
18257: PUSH
18258: LD_EXP 33
18262: PPUSH
18263: CALL_OW 302
18267: AND
18268: PUSH
18269: LD_EXP 33
18273: PPUSH
18274: CALL_OW 255
18278: PUSH
18279: LD_INT 3
18281: EQUAL
18282: AND
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: LD_INT 21
18296: PUSH
18297: LD_INT 2
18299: PUSH
18300: EMPTY
18301: LIST
18302: LIST
18303: PUSH
18304: LD_INT 33
18306: PUSH
18307: LD_INT 3
18309: PUSH
18310: EMPTY
18311: LIST
18312: LIST
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: LIST
18318: PPUSH
18319: CALL_OW 69
18323: PUSH
18324: LD_INT 0
18326: EQUAL
18327: AND
18328: IFFALSE 18536
18330: GO 18332
18332: DISABLE
// begin enable ;
18333: ENABLE
// if Difficulty = 1 then
18334: LD_OWVAR 67
18338: PUSH
18339: LD_INT 1
18341: EQUAL
18342: IFFALSE 18404
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
18344: LD_INT 3
18346: PPUSH
18347: LD_EXP 33
18351: PPUSH
18352: LD_INT 5
18354: PPUSH
18355: LD_INT 8
18357: PPUSH
18358: CALL_OW 12
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: LD_INT 43
18368: PUSH
18369: LD_INT 44
18371: PUSH
18372: LD_INT 45
18374: PUSH
18375: LD_INT 46
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: PPUSH
18384: LD_INT 1
18386: PPUSH
18387: LD_INT 1
18389: PUSH
18390: LD_INT 3
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PPUSH
18397: LD_INT 22
18399: PPUSH
18400: CALL 17294 0 8
// if Difficulty = 2 then
18404: LD_OWVAR 67
18408: PUSH
18409: LD_INT 2
18411: EQUAL
18412: IFFALSE 18470
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
18414: LD_INT 3
18416: PPUSH
18417: LD_EXP 33
18421: PPUSH
18422: LD_INT 6
18424: PPUSH
18425: LD_INT 8
18427: PPUSH
18428: CALL_OW 12
18432: PPUSH
18433: LD_INT 1
18435: PPUSH
18436: LD_INT 44
18438: PUSH
18439: LD_INT 45
18441: PUSH
18442: LD_INT 46
18444: PUSH
18445: EMPTY
18446: LIST
18447: LIST
18448: LIST
18449: PPUSH
18450: LD_INT 1
18452: PPUSH
18453: LD_INT 1
18455: PUSH
18456: LD_INT 3
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PPUSH
18463: LD_INT 22
18465: PPUSH
18466: CALL 17294 0 8
// if Difficulty = 3 then
18470: LD_OWVAR 67
18474: PUSH
18475: LD_INT 3
18477: EQUAL
18478: IFFALSE 18536
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
18480: LD_INT 3
18482: PPUSH
18483: LD_EXP 33
18487: PPUSH
18488: LD_INT 7
18490: PPUSH
18491: LD_INT 8
18493: PPUSH
18494: CALL_OW 12
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: LD_INT 44
18504: PUSH
18505: LD_INT 45
18507: PUSH
18508: LD_INT 46
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: LIST
18515: PPUSH
18516: LD_INT 1
18518: PPUSH
18519: LD_INT 1
18521: PUSH
18522: LD_INT 3
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PPUSH
18529: LD_INT 22
18531: PPUSH
18532: CALL 17294 0 8
// end ; end_of_file
18536: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
18537: LD_VAR 0 1
18541: PPUSH
18542: CALL_OW 255
18546: PUSH
18547: LD_INT 4
18549: EQUAL
18550: IFFALSE 18564
// SetBName ( building , epsilon ) ;
18552: LD_VAR 0 1
18556: PPUSH
18557: LD_STRING epsilon
18559: PPUSH
18560: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
18564: LD_VAR 0 1
18568: PPUSH
18569: CALL_OW 255
18573: PUSH
18574: LD_INT 1
18576: EQUAL
18577: PUSH
18578: LD_VAR 0 1
18582: PPUSH
18583: CALL_OW 266
18587: PUSH
18588: LD_INT 0
18590: EQUAL
18591: AND
18592: IFFALSE 18606
// SetBName ( building , epsilon ) ;
18594: LD_VAR 0 1
18598: PPUSH
18599: LD_STRING epsilon
18601: PPUSH
18602: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
18606: LD_VAR 0 1
18610: PPUSH
18611: CALL_OW 255
18615: PUSH
18616: LD_INT 3
18618: EQUAL
18619: PUSH
18620: LD_VAR 0 1
18624: PPUSH
18625: CALL_OW 266
18629: PUSH
18630: LD_INT 0
18632: EQUAL
18633: AND
18634: IFFALSE 18648
// SetBName ( building , chuikov ) ;
18636: LD_VAR 0 1
18640: PPUSH
18641: LD_STRING chuikov
18643: PPUSH
18644: CALL_OW 500
// end ;
18648: PPOPN 2
18650: END
// on BuildingComplete ( building ) do var i ;
18651: LD_INT 0
18653: PPUSH
// begin if GetSide ( building ) = 1 then
18654: LD_VAR 0 1
18658: PPUSH
18659: CALL_OW 255
18663: PUSH
18664: LD_INT 1
18666: EQUAL
18667: IFFALSE 18867
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
18669: LD_INT 22
18671: PUSH
18672: LD_INT 1
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: LD_INT 2
18681: PUSH
18682: LD_INT 30
18684: PUSH
18685: LD_INT 7
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 30
18694: PUSH
18695: LD_INT 8
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 1
18704: PUSH
18705: LD_INT 30
18707: PUSH
18708: LD_INT 11
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 1
18717: PUSH
18718: LD_INT 2
18720: PUSH
18721: LD_INT 30
18723: PUSH
18724: LD_INT 26
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 30
18733: PUSH
18734: LD_INT 27
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: LD_INT 30
18743: PUSH
18744: LD_INT 28
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PPUSH
18776: CALL_OW 69
18780: PUSH
18781: LD_INT 0
18783: GREATER
18784: PUSH
18785: LD_INT 22
18787: PUSH
18788: LD_INT 1
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 2
18797: PUSH
18798: LD_INT 30
18800: PUSH
18801: LD_INT 26
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 30
18810: PUSH
18811: LD_INT 27
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: LD_INT 30
18820: PUSH
18821: LD_INT 28
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: PPUSH
18838: CALL_OW 69
18842: PUSH
18843: LD_INT 0
18845: GREATER
18846: AND
18847: PUSH
18848: LD_EXP 53
18852: PUSH
18853: LD_INT 0
18855: EQUAL
18856: AND
18857: IFFALSE 18867
// eventVar1 = 1 ;
18859: LD_ADDR_EXP 53
18863: PUSH
18864: LD_INT 1
18866: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
18867: LD_VAR 0 1
18871: PPUSH
18872: CALL_OW 255
18876: PUSH
18877: LD_INT 3
18879: EQUAL
18880: IFFALSE 19360
// begin if GetBType ( building ) = b_depot then
18882: LD_VAR 0 1
18886: PPUSH
18887: CALL_OW 266
18891: PUSH
18892: LD_INT 0
18894: EQUAL
18895: IFFALSE 18967
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 274
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: LD_INT 5000
18912: PPUSH
18913: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18917: LD_VAR 0 1
18921: PPUSH
18922: CALL_OW 274
18926: PPUSH
18927: LD_INT 2
18929: PPUSH
18930: LD_INT 5000
18932: PPUSH
18933: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
18937: LD_VAR 0 1
18941: PPUSH
18942: CALL_OW 274
18946: PPUSH
18947: LD_INT 3
18949: PPUSH
18950: LD_INT 5000
18952: PPUSH
18953: CALL_OW 277
// ruDepot = building ;
18957: LD_ADDR_EXP 28
18961: PUSH
18962: LD_VAR 0 1
18966: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18967: LD_VAR 0 1
18971: PPUSH
18972: CALL_OW 266
18976: PUSH
18977: LD_INT 0
18979: EQUAL
18980: PUSH
18981: LD_VAR 0 1
18985: PPUSH
18986: CALL_OW 266
18990: PUSH
18991: LD_INT 2
18993: EQUAL
18994: OR
18995: PUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: CALL_OW 266
19005: PUSH
19006: LD_INT 4
19008: EQUAL
19009: OR
19010: IFFALSE 19021
// ComUpgrade ( building ) ;
19012: LD_VAR 0 1
19016: PPUSH
19017: CALL_OW 146
// if GetBType ( building ) = b_lab then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 266
19030: PUSH
19031: LD_INT 6
19033: EQUAL
19034: IFFALSE 19237
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
19036: LD_INT 22
19038: PUSH
19039: LD_INT 3
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 30
19048: PUSH
19049: LD_INT 8
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PPUSH
19060: CALL_OW 69
19064: PUSH
19065: LD_INT 0
19067: EQUAL
19068: IFFALSE 19106
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19070: LD_VAR 0 1
19074: PPUSH
19075: LD_INT 10
19077: PPUSH
19078: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
19082: LD_VAR 0 1
19086: PPUSH
19087: LD_INT 12
19089: PPUSH
19090: CALL_OW 207
// ruLab1 = building ;
19094: LD_ADDR_EXP 29
19098: PUSH
19099: LD_VAR 0 1
19103: ST_TO_ADDR
// end else
19104: GO 19140
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
19106: LD_VAR 0 1
19110: PPUSH
19111: LD_INT 11
19113: PPUSH
19114: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
19118: LD_VAR 0 1
19122: PPUSH
19123: LD_INT 14
19125: PPUSH
19126: CALL_OW 207
// ruLab2 = building ;
19130: LD_ADDR_EXP 30
19134: PUSH
19135: LD_VAR 0 1
19139: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
19140: LD_INT 3
19142: PPUSH
19143: LD_VAR 0 1
19147: PPUSH
19148: LD_INT 3
19150: PPUSH
19151: CALL 12448 0 3
// if ruDestroyedBuildings > 0 then
19155: LD_EXP 40
19159: PUSH
19160: LD_INT 0
19162: GREATER
19163: IFFALSE 19237
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19165: LD_ADDR_EXP 40
19169: PUSH
19170: LD_EXP 40
19174: PPUSH
19175: LD_INT 1
19177: PPUSH
19178: CALL_OW 3
19182: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19183: LD_ADDR_EXP 40
19187: PUSH
19188: LD_EXP 40
19192: PPUSH
19193: LD_INT 1
19195: PPUSH
19196: CALL_OW 3
19200: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19201: LD_ADDR_EXP 40
19205: PUSH
19206: LD_EXP 40
19210: PPUSH
19211: LD_INT 1
19213: PPUSH
19214: CALL_OW 3
19218: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
19219: LD_ADDR_EXP 40
19223: PUSH
19224: LD_EXP 40
19228: PPUSH
19229: LD_INT 1
19231: PPUSH
19232: CALL_OW 3
19236: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
19237: LD_VAR 0 1
19241: PPUSH
19242: CALL_OW 266
19246: PUSH
19247: LD_INT 32
19249: EQUAL
19250: IFFALSE 19287
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19252: LD_VAR 0 1
19256: PPUSH
19257: LD_INT 44
19259: PUSH
19260: LD_INT 45
19262: PUSH
19263: LD_INT 46
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: LIST
19270: PUSH
19271: LD_INT 1
19273: PPUSH
19274: LD_INT 3
19276: PPUSH
19277: CALL_OW 12
19281: ARRAY
19282: PPUSH
19283: CALL_OW 208
// if GetBType ( building ) = b_turret then
19287: LD_VAR 0 1
19291: PPUSH
19292: CALL_OW 266
19296: PUSH
19297: LD_INT 33
19299: EQUAL
19300: IFFALSE 19337
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
19302: LD_VAR 0 1
19306: PPUSH
19307: LD_INT 44
19309: PUSH
19310: LD_INT 46
19312: PUSH
19313: LD_INT 46
19315: PUSH
19316: EMPTY
19317: LIST
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 1
19323: PPUSH
19324: LD_INT 3
19326: PPUSH
19327: CALL_OW 12
19331: ARRAY
19332: PPUSH
19333: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 266
19346: PUSH
19347: LD_INT 24
19349: EQUAL
19350: IFFALSE 19360
// russianAI = 1 ;
19352: LD_ADDR_EXP 37
19356: PUSH
19357: LD_INT 1
19359: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 255
19369: PUSH
19370: LD_INT 2
19372: EQUAL
19373: IFFALSE 19899
// begin if GetBType ( building ) = b_depot then
19375: LD_VAR 0 1
19379: PPUSH
19380: CALL_OW 266
19384: PUSH
19385: LD_INT 0
19387: EQUAL
19388: IFFALSE 19474
// begin arDepot = building ;
19390: LD_ADDR_EXP 41
19394: PUSH
19395: LD_VAR 0 1
19399: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
19400: LD_INT 38
19402: PUSH
19403: LD_INT 47
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PPUSH
19410: LD_INT 71
19412: PPUSH
19413: LD_INT 19
19415: PPUSH
19416: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
19420: LD_VAR 0 1
19424: PPUSH
19425: CALL_OW 274
19429: PPUSH
19430: LD_INT 1
19432: PPUSH
19433: LD_INT 500
19435: PPUSH
19436: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
19440: LD_VAR 0 1
19444: PPUSH
19445: CALL_OW 274
19449: PPUSH
19450: LD_INT 3
19452: PPUSH
19453: LD_INT 30
19455: PPUSH
19456: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
19460: LD_EXP 25
19464: PPUSH
19465: LD_EXP 41
19469: PPUSH
19470: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 266
19483: PUSH
19484: LD_INT 6
19486: EQUAL
19487: PUSH
19488: LD_VAR 0 1
19492: PPUSH
19493: CALL_OW 266
19497: PUSH
19498: LD_INT 9
19500: EQUAL
19501: OR
19502: IFFALSE 19553
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19504: LD_VAR 0 1
19508: PPUSH
19509: LD_INT 10
19511: PPUSH
19512: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
19516: LD_VAR 0 1
19520: PPUSH
19521: LD_INT 11
19523: PPUSH
19524: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
19528: LD_INT 2
19530: PPUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: LD_INT 2
19538: PPUSH
19539: CALL 12448 0 3
// arLab = building ;
19543: LD_ADDR_EXP 42
19547: PUSH
19548: LD_VAR 0 1
19552: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19553: LD_VAR 0 1
19557: PPUSH
19558: CALL_OW 266
19562: PUSH
19563: LD_INT 2
19565: EQUAL
19566: PUSH
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 266
19576: PUSH
19577: LD_INT 4
19579: EQUAL
19580: OR
19581: IFFALSE 19592
// ComUpgrade ( building ) ;
19583: LD_VAR 0 1
19587: PPUSH
19588: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
19592: LD_VAR 0 1
19596: PPUSH
19597: CALL_OW 266
19601: PUSH
19602: LD_INT 31
19604: EQUAL
19605: PUSH
19606: LD_INT 22
19608: PUSH
19609: LD_INT 2
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: LD_INT 25
19618: PUSH
19619: LD_INT 1
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PUSH
19626: LD_INT 3
19628: PUSH
19629: LD_INT 54
19631: PUSH
19632: EMPTY
19633: LIST
19634: PUSH
19635: LD_INT 3
19637: PUSH
19638: LD_INT 60
19640: PUSH
19641: EMPTY
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: LIST
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: LIST
19657: PPUSH
19658: CALL_OW 69
19662: PUSH
19663: LD_INT 0
19665: GREATER
19666: AND
19667: IFFALSE 19739
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
19669: LD_INT 22
19671: PUSH
19672: LD_INT 2
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 25
19681: PUSH
19682: LD_INT 1
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 3
19691: PUSH
19692: LD_INT 54
19694: PUSH
19695: EMPTY
19696: LIST
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: LD_INT 60
19703: PUSH
19704: EMPTY
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PPUSH
19721: CALL_OW 69
19725: PUSH
19726: LD_INT 1
19728: ARRAY
19729: PPUSH
19730: LD_VAR 0 1
19734: PPUSH
19735: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
19739: LD_VAR 0 1
19743: PPUSH
19744: CALL_OW 266
19748: PUSH
19749: LD_INT 27
19751: EQUAL
19752: IFFALSE 19899
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
19754: LD_INT 22
19756: PUSH
19757: LD_INT 2
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: PUSH
19764: LD_INT 30
19766: PUSH
19767: LD_INT 27
19769: PUSH
19770: EMPTY
19771: LIST
19772: LIST
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PPUSH
19778: CALL_OW 69
19782: PUSH
19783: LD_INT 2
19785: EQUAL
19786: IFFALSE 19899
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) do
19788: LD_ADDR_VAR 0 2
19792: PUSH
19793: LD_INT 22
19795: PUSH
19796: LD_INT 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 21
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 25
19815: PUSH
19816: LD_INT 2
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: LIST
19827: PPUSH
19828: CALL_OW 69
19832: PUSH
19833: FOR_IN
19834: IFFALSE 19897
// begin AddComMoveXY ( i , 92 , 34 ) ;
19836: LD_VAR 0 2
19840: PPUSH
19841: LD_INT 92
19843: PPUSH
19844: LD_INT 34
19846: PPUSH
19847: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
19851: LD_VAR 0 2
19855: PPUSH
19856: LD_INT 82
19858: PPUSH
19859: LD_INT 57
19861: PPUSH
19862: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: LD_INT 36
19873: PPUSH
19874: LD_INT 28
19876: PPUSH
19877: CALL_OW 171
// AddComEnterUnit ( i , arDepot ) ;
19881: LD_VAR 0 2
19885: PPUSH
19886: LD_EXP 41
19890: PPUSH
19891: CALL_OW 180
// end ;
19895: GO 19833
19897: POP
19898: POP
// end ; end ; end ;
19899: PPOPN 2
19901: END
// on UpgradeComplete ( building ) do var i ;
19902: LD_INT 0
19904: PPUSH
// begin if GetSide ( building ) = 1 then
19905: LD_VAR 0 1
19909: PPUSH
19910: CALL_OW 255
19914: PUSH
19915: LD_INT 1
19917: EQUAL
19918: IFFALSE 20118
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19920: LD_INT 22
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 2
19932: PUSH
19933: LD_INT 30
19935: PUSH
19936: LD_INT 7
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_INT 8
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: LD_INT 1
19955: PUSH
19956: LD_INT 30
19958: PUSH
19959: LD_INT 11
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 1
19968: PUSH
19969: LD_INT 2
19971: PUSH
19972: LD_INT 30
19974: PUSH
19975: LD_INT 26
19977: PUSH
19978: EMPTY
19979: LIST
19980: LIST
19981: PUSH
19982: LD_INT 30
19984: PUSH
19985: LD_INT 27
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: PUSH
19992: LD_INT 30
19994: PUSH
19995: LD_INT 28
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: PUSH
20002: EMPTY
20003: LIST
20004: LIST
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: PUSH
20023: EMPTY
20024: LIST
20025: LIST
20026: PPUSH
20027: CALL_OW 69
20031: PUSH
20032: LD_INT 0
20034: GREATER
20035: PUSH
20036: LD_INT 22
20038: PUSH
20039: LD_INT 1
20041: PUSH
20042: EMPTY
20043: LIST
20044: LIST
20045: PUSH
20046: LD_INT 2
20048: PUSH
20049: LD_INT 30
20051: PUSH
20052: LD_INT 26
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: PUSH
20059: LD_INT 30
20061: PUSH
20062: LD_INT 27
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PUSH
20069: LD_INT 30
20071: PUSH
20072: LD_INT 28
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: PUSH
20079: EMPTY
20080: LIST
20081: LIST
20082: LIST
20083: LIST
20084: PUSH
20085: EMPTY
20086: LIST
20087: LIST
20088: PPUSH
20089: CALL_OW 69
20093: PUSH
20094: LD_INT 0
20096: GREATER
20097: AND
20098: PUSH
20099: LD_EXP 53
20103: PUSH
20104: LD_INT 0
20106: EQUAL
20107: AND
20108: IFFALSE 20118
// eventVar1 = 1 ;
20110: LD_ADDR_EXP 53
20114: PUSH
20115: LD_INT 1
20117: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
20118: LD_VAR 0 1
20122: PPUSH
20123: CALL_OW 255
20127: PUSH
20128: LD_INT 2
20130: EQUAL
20131: IFFALSE 20236
// begin if GetBType ( building ) = b_barracks then
20133: LD_VAR 0 1
20137: PPUSH
20138: CALL_OW 266
20142: PUSH
20143: LD_INT 5
20145: EQUAL
20146: IFFALSE 20236
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
20148: LD_ADDR_VAR 0 2
20152: PUSH
20153: LD_INT 22
20155: PUSH
20156: LD_INT 2
20158: PUSH
20159: EMPTY
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 25
20165: PUSH
20166: LD_INT 1
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: PUSH
20173: LD_INT 3
20175: PUSH
20176: LD_INT 54
20178: PUSH
20179: EMPTY
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: LIST
20185: PUSH
20186: EMPTY
20187: LIST
20188: LIST
20189: LIST
20190: PPUSH
20191: CALL_OW 69
20195: PUSH
20196: LD_EXP 25
20200: PUSH
20201: EMPTY
20202: LIST
20203: DIFF
20204: PUSH
20205: FOR_IN
20206: IFFALSE 20224
// ComEnterUnit ( i , building ) ;
20208: LD_VAR 0 2
20212: PPUSH
20213: LD_VAR 0 1
20217: PPUSH
20218: CALL_OW 120
20222: GO 20205
20224: POP
20225: POP
// arArm = building ;
20226: LD_ADDR_EXP 43
20230: PUSH
20231: LD_VAR 0 1
20235: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
20236: LD_VAR 0 1
20240: PPUSH
20241: CALL_OW 255
20245: PUSH
20246: LD_INT 3
20248: EQUAL
20249: IFFALSE 20722
// begin if GetBType ( building ) = b_factory then
20251: LD_VAR 0 1
20255: PPUSH
20256: CALL_OW 266
20260: PUSH
20261: LD_INT 3
20263: EQUAL
20264: IFFALSE 20331
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
20266: LD_ADDR_VAR 0 2
20270: PUSH
20271: LD_INT 22
20273: PUSH
20274: LD_INT 3
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 25
20283: PUSH
20284: LD_INT 3
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PPUSH
20295: CALL_OW 69
20299: PUSH
20300: FOR_IN
20301: IFFALSE 20319
// ComEnterUnit ( i , building ) ;
20303: LD_VAR 0 2
20307: PPUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: CALL_OW 120
20317: GO 20300
20319: POP
20320: POP
// ruFab = building ;
20321: LD_ADDR_EXP 33
20325: PUSH
20326: LD_VAR 0 1
20330: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
20331: LD_INT 22
20333: PUSH
20334: LD_INT 3
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 3
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 30
20353: PUSH
20354: LD_INT 8
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: PPUSH
20366: CALL_OW 69
20370: PUSH
20371: LD_INT 2
20373: EQUAL
20374: IFFALSE 20582
// begin for i = 1 to 2 do
20376: LD_ADDR_VAR 0 2
20380: PUSH
20381: DOUBLE
20382: LD_INT 1
20384: DEC
20385: ST_TO_ADDR
20386: LD_INT 2
20388: PUSH
20389: FOR_TO
20390: IFFALSE 20477
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20392: LD_INT 22
20394: PUSH
20395: LD_INT 3
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 25
20404: PUSH
20405: LD_INT 4
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PPUSH
20416: CALL_OW 69
20420: PUSH
20421: LD_VAR 0 2
20425: ARRAY
20426: PPUSH
20427: LD_INT 22
20429: PUSH
20430: LD_INT 3
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: PUSH
20437: LD_INT 21
20439: PUSH
20440: LD_INT 3
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PUSH
20447: LD_INT 30
20449: PUSH
20450: LD_INT 8
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: PUSH
20457: EMPTY
20458: LIST
20459: LIST
20460: LIST
20461: PPUSH
20462: CALL_OW 69
20466: PUSH
20467: LD_INT 1
20469: ARRAY
20470: PPUSH
20471: CALL_OW 120
20475: GO 20389
20477: POP
20478: POP
// for i = 3 to 4 do
20479: LD_ADDR_VAR 0 2
20483: PUSH
20484: DOUBLE
20485: LD_INT 3
20487: DEC
20488: ST_TO_ADDR
20489: LD_INT 4
20491: PUSH
20492: FOR_TO
20493: IFFALSE 20580
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
20495: LD_INT 22
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: EMPTY
20502: LIST
20503: LIST
20504: PUSH
20505: LD_INT 25
20507: PUSH
20508: LD_INT 4
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PPUSH
20519: CALL_OW 69
20523: PUSH
20524: LD_VAR 0 2
20528: ARRAY
20529: PPUSH
20530: LD_INT 22
20532: PUSH
20533: LD_INT 3
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 21
20542: PUSH
20543: LD_INT 3
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: LD_INT 30
20552: PUSH
20553: LD_INT 8
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: LIST
20564: PPUSH
20565: CALL_OW 69
20569: PUSH
20570: LD_INT 2
20572: ARRAY
20573: PPUSH
20574: CALL_OW 120
20578: GO 20492
20580: POP
20581: POP
// end ; if GetBType ( building ) = b_barracks then
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 266
20591: PUSH
20592: LD_INT 5
20594: EQUAL
20595: IFFALSE 20722
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
20597: LD_ADDR_VAR 0 2
20601: PUSH
20602: LD_INT 22
20604: PUSH
20605: LD_INT 3
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 25
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 3
20624: PUSH
20625: LD_INT 54
20627: PUSH
20628: EMPTY
20629: LIST
20630: PUSH
20631: EMPTY
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: LIST
20639: PPUSH
20640: CALL_OW 69
20644: PUSH
20645: FOR_IN
20646: IFFALSE 20664
// ComEnterUnit ( i , building ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_VAR 0 1
20657: PPUSH
20658: CALL_OW 120
20662: GO 20645
20664: POP
20665: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
20666: LD_INT 22
20668: PUSH
20669: LD_INT 3
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: LD_INT 30
20678: PUSH
20679: LD_INT 5
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PPUSH
20690: CALL_OW 69
20694: PUSH
20695: LD_INT 0
20697: EQUAL
20698: IFFALSE 20712
// ruArm1 = building else
20700: LD_ADDR_EXP 31
20704: PUSH
20705: LD_VAR 0 1
20709: ST_TO_ADDR
20710: GO 20722
// ruArm2 = building ;
20712: LD_ADDR_EXP 32
20716: PUSH
20717: LD_VAR 0 1
20721: ST_TO_ADDR
// end ; end ; end ;
20722: PPOPN 2
20724: END
// on EnterBuilding ( building , human ) do var rnd ;
20725: LD_INT 0
20727: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
20728: LD_VAR 0 2
20732: PPUSH
20733: CALL_OW 255
20737: PUSH
20738: LD_INT 2
20740: EQUAL
20741: PUSH
20742: LD_VAR 0 2
20746: PPUSH
20747: CALL_OW 257
20751: PUSH
20752: LD_INT 1
20754: EQUAL
20755: AND
20756: PUSH
20757: LD_VAR 0 1
20761: PUSH
20762: LD_EXP 43
20766: EQUAL
20767: AND
20768: IFFALSE 20815
// begin wait ( 0 0$1 ) ;
20770: LD_INT 35
20772: PPUSH
20773: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
20777: LD_ADDR_VAR 0 3
20781: PUSH
20782: LD_INT 1
20784: PPUSH
20785: LD_INT 100
20787: PPUSH
20788: CALL_OW 12
20792: ST_TO_ADDR
// if rnd > 50 then
20793: LD_VAR 0 3
20797: PUSH
20798: LD_INT 50
20800: GREATER
20801: IFFALSE 20815
// SetClass ( human , class_mortar ) ;
20803: LD_VAR 0 2
20807: PPUSH
20808: LD_INT 8
20810: PPUSH
20811: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
20815: LD_VAR 0 2
20819: PPUSH
20820: CALL_OW 255
20824: PUSH
20825: LD_INT 3
20827: EQUAL
20828: PUSH
20829: LD_VAR 0 2
20833: PPUSH
20834: CALL_OW 257
20838: PUSH
20839: LD_INT 1
20841: EQUAL
20842: AND
20843: PUSH
20844: LD_VAR 0 1
20848: PUSH
20849: LD_EXP 31
20853: EQUAL
20854: PUSH
20855: LD_VAR 0 1
20859: PUSH
20860: LD_EXP 32
20864: EQUAL
20865: OR
20866: PUSH
20867: EMPTY
20868: LIST
20869: AND
20870: IFFALSE 20891
// begin wait ( 0 0$1 ) ;
20872: LD_INT 35
20874: PPUSH
20875: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
20879: LD_VAR 0 2
20883: PPUSH
20884: LD_INT 9
20886: PPUSH
20887: CALL_OW 336
// end ; end ;
20891: PPOPN 3
20893: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
20894: LD_VAR 0 1
20898: PUSH
20899: LD_INT 1
20901: EQUAL
20902: PUSH
20903: LD_VAR 0 2
20907: PUSH
20908: LD_INT 2
20910: EQUAL
20911: AND
20912: PUSH
20913: LD_INT 1
20915: PPUSH
20916: LD_INT 2
20918: PPUSH
20919: CALL_OW 81
20923: PUSH
20924: LD_INT 1
20926: EQUAL
20927: AND
20928: IFFALSE 20949
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20930: LD_EXP 23
20934: PPUSH
20935: LD_STRING D6b-Pow-1
20937: PPUSH
20938: CALL_OW 94
// YouLost ( Powell ) ;
20942: LD_STRING Powell
20944: PPUSH
20945: CALL_OW 104
// end ; end ;
20949: PPOPN 2
20951: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20952: LD_VAR 0 1
20956: PPUSH
20957: CALL_OW 255
20961: PUSH
20962: LD_INT 3
20964: EQUAL
20965: PUSH
20966: LD_VAR 0 1
20970: PPUSH
20971: CALL_OW 247
20975: PUSH
20976: LD_INT 3
20978: EQUAL
20979: AND
20980: IFFALSE 21672
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 266
20991: PUSH
20992: LD_INT 31
20994: EQUAL
20995: PUSH
20996: LD_VAR 0 1
21000: PPUSH
21001: CALL_OW 266
21005: PUSH
21006: LD_INT 32
21008: EQUAL
21009: OR
21010: PUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 266
21020: PUSH
21021: LD_INT 36
21023: EQUAL
21024: OR
21025: PUSH
21026: LD_VAR 0 1
21030: PPUSH
21031: CALL_OW 266
21035: PUSH
21036: LD_INT 0
21038: EQUAL
21039: OR
21040: PUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 266
21050: PUSH
21051: LD_INT 24
21053: EQUAL
21054: OR
21055: PUSH
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 266
21065: PUSH
21066: LD_INT 17
21068: EQUAL
21069: OR
21070: PUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 266
21080: PUSH
21081: LD_INT 25
21083: EQUAL
21084: OR
21085: PUSH
21086: LD_VAR 0 1
21090: PPUSH
21091: CALL_OW 266
21095: PUSH
21096: LD_INT 19
21098: EQUAL
21099: OR
21100: PUSH
21101: LD_VAR 0 1
21105: PPUSH
21106: CALL_OW 266
21110: PUSH
21111: LD_INT 20
21113: EQUAL
21114: OR
21115: PUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 266
21125: PUSH
21126: LD_INT 18
21128: EQUAL
21129: OR
21130: PUSH
21131: LD_VAR 0 1
21135: PPUSH
21136: CALL_OW 266
21140: PUSH
21141: LD_INT 21
21143: EQUAL
21144: OR
21145: PUSH
21146: LD_VAR 0 1
21150: PPUSH
21151: CALL_OW 266
21155: PUSH
21156: LD_INT 23
21158: EQUAL
21159: OR
21160: PUSH
21161: LD_VAR 0 1
21165: PPUSH
21166: CALL_OW 266
21170: PUSH
21171: LD_INT 16
21173: EQUAL
21174: OR
21175: PUSH
21176: LD_VAR 0 1
21180: PPUSH
21181: CALL_OW 266
21185: PUSH
21186: LD_INT 6
21188: EQUAL
21189: OR
21190: PUSH
21191: LD_VAR 0 1
21195: PPUSH
21196: CALL_OW 266
21200: PUSH
21201: LD_INT 29
21203: EQUAL
21204: OR
21205: PUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL_OW 266
21215: PUSH
21216: LD_INT 26
21218: EQUAL
21219: OR
21220: PUSH
21221: LD_VAR 0 1
21225: PPUSH
21226: CALL_OW 266
21230: PUSH
21231: LD_INT 30
21233: EQUAL
21234: OR
21235: PUSH
21236: LD_VAR 0 1
21240: PPUSH
21241: CALL_OW 266
21245: PUSH
21246: LD_INT 28
21248: EQUAL
21249: OR
21250: PUSH
21251: LD_VAR 0 1
21255: PPUSH
21256: CALL_OW 266
21260: PUSH
21261: LD_INT 27
21263: EQUAL
21264: OR
21265: PUSH
21266: LD_VAR 0 1
21270: PPUSH
21271: CALL_OW 266
21275: PUSH
21276: LD_INT 33
21278: EQUAL
21279: OR
21280: PUSH
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 266
21290: PUSH
21291: LD_INT 2
21293: EQUAL
21294: OR
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 266
21305: PUSH
21306: LD_INT 4
21308: EQUAL
21309: OR
21310: IFFALSE 21396
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21312: LD_ADDR_EXP 40
21316: PUSH
21317: LD_EXP 40
21321: PUSH
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 266
21331: ADD
21332: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21333: LD_ADDR_EXP 40
21337: PUSH
21338: LD_EXP 40
21342: PUSH
21343: LD_VAR 0 1
21347: PPUSH
21348: CALL_OW 250
21352: ADD
21353: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21354: LD_ADDR_EXP 40
21358: PUSH
21359: LD_EXP 40
21363: PUSH
21364: LD_VAR 0 1
21368: PPUSH
21369: CALL_OW 251
21373: ADD
21374: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21375: LD_ADDR_EXP 40
21379: PUSH
21380: LD_EXP 40
21384: PUSH
21385: LD_VAR 0 1
21389: PPUSH
21390: CALL_OW 254
21394: ADD
21395: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21396: LD_VAR 0 1
21400: PPUSH
21401: CALL_OW 266
21405: PUSH
21406: LD_INT 1
21408: EQUAL
21409: IFFALSE 21488
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21411: LD_ADDR_EXP 40
21415: PUSH
21416: LD_EXP 40
21420: PUSH
21421: LD_INT 0
21423: ADD
21424: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21425: LD_ADDR_EXP 40
21429: PUSH
21430: LD_EXP 40
21434: PUSH
21435: LD_VAR 0 1
21439: PPUSH
21440: CALL_OW 250
21444: ADD
21445: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21446: LD_ADDR_EXP 40
21450: PUSH
21451: LD_EXP 40
21455: PUSH
21456: LD_VAR 0 1
21460: PPUSH
21461: CALL_OW 251
21465: ADD
21466: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21467: LD_ADDR_EXP 40
21471: PUSH
21472: LD_EXP 40
21476: PUSH
21477: LD_VAR 0 1
21481: PPUSH
21482: CALL_OW 254
21486: ADD
21487: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21488: LD_VAR 0 1
21492: PPUSH
21493: CALL_OW 266
21497: PUSH
21498: LD_INT 3
21500: EQUAL
21501: IFFALSE 21580
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21503: LD_ADDR_EXP 40
21507: PUSH
21508: LD_EXP 40
21512: PUSH
21513: LD_INT 2
21515: ADD
21516: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21517: LD_ADDR_EXP 40
21521: PUSH
21522: LD_EXP 40
21526: PUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 250
21536: ADD
21537: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21538: LD_ADDR_EXP 40
21542: PUSH
21543: LD_EXP 40
21547: PUSH
21548: LD_VAR 0 1
21552: PPUSH
21553: CALL_OW 251
21557: ADD
21558: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21559: LD_ADDR_EXP 40
21563: PUSH
21564: LD_EXP 40
21568: PUSH
21569: LD_VAR 0 1
21573: PPUSH
21574: CALL_OW 254
21578: ADD
21579: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21580: LD_VAR 0 1
21584: PPUSH
21585: CALL_OW 266
21589: PUSH
21590: LD_INT 5
21592: EQUAL
21593: IFFALSE 21672
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21595: LD_ADDR_EXP 40
21599: PUSH
21600: LD_EXP 40
21604: PUSH
21605: LD_INT 4
21607: ADD
21608: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21609: LD_ADDR_EXP 40
21613: PUSH
21614: LD_EXP 40
21618: PUSH
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 250
21628: ADD
21629: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21630: LD_ADDR_EXP 40
21634: PUSH
21635: LD_EXP 40
21639: PUSH
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 251
21649: ADD
21650: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21651: LD_ADDR_EXP 40
21655: PUSH
21656: LD_EXP 40
21660: PUSH
21661: LD_VAR 0 1
21665: PPUSH
21666: CALL_OW 254
21670: ADD
21671: ST_TO_ADDR
// end ; end ; end ;
21672: PPOPN 1
21674: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
21675: LD_ADDR_OWVAR 57
21679: PUSH
21680: LD_INT 0
21682: ST_TO_ADDR
// fastEnd = 1 ;
21683: LD_ADDR_EXP 52
21687: PUSH
21688: LD_INT 1
21690: ST_TO_ADDR
// FinishMission ;
21691: CALL 23354 0 0
// end ; end_of_file
21695: PPOPN 1
21697: END
// export function PrepareNature ; var i , un ; begin
21698: LD_INT 0
21700: PPUSH
21701: PPUSH
21702: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
21703: LD_ADDR_VAR 0 2
21707: PUSH
21708: DOUBLE
21709: LD_INT 1
21711: DEC
21712: ST_TO_ADDR
21713: LD_OWVAR 67
21717: PUSH
21718: LD_INT 1
21720: PPUSH
21721: LD_INT 5
21723: PPUSH
21724: CALL_OW 12
21728: PLUS
21729: PUSH
21730: FOR_TO
21731: IFFALSE 21876
// begin hc_sex = sex_male ;
21733: LD_ADDR_OWVAR 27
21737: PUSH
21738: LD_INT 1
21740: ST_TO_ADDR
// uc_side = 0 ;
21741: LD_ADDR_OWVAR 20
21745: PUSH
21746: LD_INT 0
21748: ST_TO_ADDR
// uc_nation = nation_nature ;
21749: LD_ADDR_OWVAR 21
21753: PUSH
21754: LD_INT 0
21756: ST_TO_ADDR
// hc_class = class_apeman ;
21757: LD_ADDR_OWVAR 28
21761: PUSH
21762: LD_INT 12
21764: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
21765: LD_ADDR_OWVAR 31
21769: PUSH
21770: LD_INT 2
21772: PPUSH
21773: LD_INT 7
21775: PPUSH
21776: CALL_OW 12
21780: PUSH
21781: LD_OWVAR 67
21785: PLUS
21786: PUSH
21787: LD_INT 2
21789: PPUSH
21790: LD_INT 10
21792: PPUSH
21793: CALL_OW 12
21797: PUSH
21798: LD_INT 2
21800: PPUSH
21801: LD_INT 10
21803: PPUSH
21804: CALL_OW 12
21808: PUSH
21809: LD_INT 2
21811: PPUSH
21812: LD_INT 10
21814: PPUSH
21815: CALL_OW 12
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21826: LD_ADDR_OWVAR 35
21830: PUSH
21831: LD_INT 5
21833: NEG
21834: PPUSH
21835: LD_INT 5
21837: PPUSH
21838: CALL_OW 12
21842: PUSH
21843: LD_OWVAR 67
21847: MUL
21848: ST_TO_ADDR
// un = CreateHuman ;
21849: LD_ADDR_VAR 0 3
21853: PUSH
21854: CALL_OW 44
21858: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21859: LD_VAR 0 3
21863: PPUSH
21864: LD_INT 5
21866: PPUSH
21867: LD_INT 0
21869: PPUSH
21870: CALL_OW 49
// end ;
21874: GO 21730
21876: POP
21877: POP
// for i = 1 to Difficulty + 2 do
21878: LD_ADDR_VAR 0 2
21882: PUSH
21883: DOUBLE
21884: LD_INT 1
21886: DEC
21887: ST_TO_ADDR
21888: LD_OWVAR 67
21892: PUSH
21893: LD_INT 2
21895: PLUS
21896: PUSH
21897: FOR_TO
21898: IFFALSE 22007
// begin hc_sex = sex_male ;
21900: LD_ADDR_OWVAR 27
21904: PUSH
21905: LD_INT 1
21907: ST_TO_ADDR
// uc_side = 0 ;
21908: LD_ADDR_OWVAR 20
21912: PUSH
21913: LD_INT 0
21915: ST_TO_ADDR
// uc_nation = nation_nature ;
21916: LD_ADDR_OWVAR 21
21920: PUSH
21921: LD_INT 0
21923: ST_TO_ADDR
// hc_class = class_tiger ;
21924: LD_ADDR_OWVAR 28
21928: PUSH
21929: LD_INT 14
21931: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21932: LD_ADDR_OWVAR 31
21936: PUSH
21937: LD_EXP 35
21941: PUSH
21942: LD_INT 0
21944: PUSH
21945: LD_INT 0
21947: PUSH
21948: LD_INT 0
21950: PUSH
21951: EMPTY
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21957: LD_ADDR_OWVAR 35
21961: PUSH
21962: LD_INT 5
21964: NEG
21965: PPUSH
21966: LD_INT 5
21968: PPUSH
21969: CALL_OW 12
21973: PUSH
21974: LD_OWVAR 67
21978: MUL
21979: ST_TO_ADDR
// un = CreateHuman ;
21980: LD_ADDR_VAR 0 3
21984: PUSH
21985: CALL_OW 44
21989: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21990: LD_VAR 0 3
21994: PPUSH
21995: LD_INT 6
21997: PPUSH
21998: LD_INT 0
22000: PPUSH
22001: CALL_OW 49
// end ;
22005: GO 21897
22007: POP
22008: POP
// for i = 1 to rand ( 3 , 4 ) do
22009: LD_ADDR_VAR 0 2
22013: PUSH
22014: DOUBLE
22015: LD_INT 1
22017: DEC
22018: ST_TO_ADDR
22019: LD_INT 3
22021: PPUSH
22022: LD_INT 4
22024: PPUSH
22025: CALL_OW 12
22029: PUSH
22030: FOR_TO
22031: IFFALSE 22125
// begin hc_sex = sex_male ;
22033: LD_ADDR_OWVAR 27
22037: PUSH
22038: LD_INT 1
22040: ST_TO_ADDR
// uc_side = 0 ;
22041: LD_ADDR_OWVAR 20
22045: PUSH
22046: LD_INT 0
22048: ST_TO_ADDR
// uc_nation = nation_nature ;
22049: LD_ADDR_OWVAR 21
22053: PUSH
22054: LD_INT 0
22056: ST_TO_ADDR
// hc_class = 18 ;
22057: LD_ADDR_OWVAR 28
22061: PUSH
22062: LD_INT 18
22064: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
22065: LD_ADDR_OWVAR 31
22069: PUSH
22070: LD_EXP 35
22074: PUSH
22075: LD_INT 0
22077: PUSH
22078: LD_INT 0
22080: PUSH
22081: LD_INT 0
22083: PUSH
22084: EMPTY
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: ST_TO_ADDR
// hc_agressivity = 0 ;
22090: LD_ADDR_OWVAR 35
22094: PUSH
22095: LD_INT 0
22097: ST_TO_ADDR
// un = CreateHuman ;
22098: LD_ADDR_VAR 0 3
22102: PUSH
22103: CALL_OW 44
22107: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
22108: LD_VAR 0 3
22112: PPUSH
22113: LD_INT 6
22115: PPUSH
22116: LD_INT 0
22118: PPUSH
22119: CALL_OW 49
// end ;
22123: GO 22030
22125: POP
22126: POP
// end ; end_of_file
22127: LD_VAR 0 1
22131: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
22132: LD_EXP 44
22136: PUSH
22137: LD_INT 1
22139: EQUAL
22140: IFFALSE 22248
22142: GO 22144
22144: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
22145: LD_INT 7
22147: PPUSH
22148: LD_INT 5
22150: PPUSH
22151: LD_INT 4
22153: PPUSH
22154: LD_INT 6
22156: PPUSH
22157: CALL_OW 12
22161: PUSH
22162: LD_INT 6
22164: PPUSH
22165: LD_INT 8
22167: PPUSH
22168: CALL_OW 12
22172: PUSH
22173: LD_INT 7
22175: PPUSH
22176: LD_INT 9
22178: PPUSH
22179: CALL_OW 12
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: LIST
22188: PUSH
22189: LD_OWVAR 67
22193: ARRAY
22194: PPUSH
22195: LD_EXP 34
22199: PPUSH
22200: LD_EXP 35
22204: PPUSH
22205: CALL_OW 12
22209: PPUSH
22210: LD_INT 2
22212: PPUSH
22213: LD_INT 1
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: EMPTY
22220: PPUSH
22221: LD_INT 25
22223: PUSH
22224: LD_INT 26
22226: PUSH
22227: LD_INT 27
22229: PUSH
22230: LD_INT 28
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: PPUSH
22239: EMPTY
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: CALL 13896 0 11
22248: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
22249: LD_EXP 44
22253: PUSH
22254: LD_INT 1
22256: EQUAL
22257: IFFALSE 22393
22259: GO 22261
22261: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
22262: LD_INT 5
22264: PPUSH
22265: LD_INT 2
22267: PPUSH
22268: LD_INT 7
22270: PPUSH
22271: LD_INT 9
22273: PPUSH
22274: CALL_OW 12
22278: PUSH
22279: LD_INT 8
22281: PPUSH
22282: LD_INT 10
22284: PPUSH
22285: CALL_OW 12
22289: PUSH
22290: LD_INT 9
22292: PPUSH
22293: LD_INT 12
22295: PPUSH
22296: CALL_OW 12
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: LIST
22305: PUSH
22306: LD_OWVAR 67
22310: ARRAY
22311: PPUSH
22312: LD_INT 0
22314: PPUSH
22315: LD_INT 0
22317: PPUSH
22318: LD_INT 3
22320: PPUSH
22321: LD_INT 4
22323: PPUSH
22324: CALL_OW 12
22328: PUSH
22329: LD_INT 4
22331: PPUSH
22332: LD_INT 5
22334: PPUSH
22335: CALL_OW 12
22339: PUSH
22340: LD_INT 5
22342: PPUSH
22343: LD_INT 6
22345: PPUSH
22346: CALL_OW 12
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: PUSH
22356: LD_OWVAR 67
22360: ARRAY
22361: PPUSH
22362: LD_INT 5
22364: PPUSH
22365: LD_EXP 34
22369: PPUSH
22370: LD_EXP 35
22374: PPUSH
22375: CALL_OW 12
22379: PPUSH
22380: LD_INT 7
22382: PPUSH
22383: LD_INT 9
22385: PPUSH
22386: LD_INT 1
22388: PPUSH
22389: CALL 15616 0 11
22393: END
// every 4 4$30 trigger joinEpsilon = 1 do
22394: LD_EXP 27
22398: PUSH
22399: LD_INT 1
22401: EQUAL
22402: IFFALSE 22464
22404: GO 22406
22406: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 2 , 4 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22407: LD_INT 6
22409: PPUSH
22410: LD_INT 3
22412: PPUSH
22413: LD_INT 2
22415: PPUSH
22416: LD_INT 4
22418: PPUSH
22419: CALL_OW 12
22423: PPUSH
22424: LD_INT 0
22426: PPUSH
22427: LD_INT 0
22429: PPUSH
22430: LD_INT 0
22432: PPUSH
22433: LD_INT 0
22435: PPUSH
22436: LD_EXP 34
22440: PPUSH
22441: LD_EXP 35
22445: PPUSH
22446: CALL_OW 12
22450: PPUSH
22451: LD_INT 17
22453: PPUSH
22454: LD_INT 18
22456: PPUSH
22457: LD_INT 1
22459: PPUSH
22460: CALL 15616 0 11
22464: END
// every 4 4$30 trigger joinEpsilon = 1 do
22465: LD_EXP 27
22469: PUSH
22470: LD_INT 1
22472: EQUAL
22473: IFFALSE 22555
22475: GO 22477
22477: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22478: LD_INT 17
22480: PPUSH
22481: LD_INT 6
22483: PPUSH
22484: LD_INT 1
22486: PPUSH
22487: LD_INT 3
22489: PPUSH
22490: CALL_OW 12
22494: PPUSH
22495: LD_EXP 34
22499: PPUSH
22500: LD_EXP 35
22504: PPUSH
22505: CALL_OW 12
22509: PPUSH
22510: LD_INT 3
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: LD_INT 1
22518: PUSH
22519: LD_INT 3
22521: PUSH
22522: EMPTY
22523: LIST
22524: LIST
22525: PPUSH
22526: LD_INT 43
22528: PUSH
22529: LD_INT 44
22531: PUSH
22532: LD_INT 45
22534: PUSH
22535: LD_INT 46
22537: PUSH
22538: EMPTY
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: PPUSH
22544: EMPTY
22545: PPUSH
22546: EMPTY
22547: PPUSH
22548: LD_INT 1
22550: PPUSH
22551: CALL 13896 0 11
22555: END
// every 8 8$30 trigger joinEpsilon = 1 do
22556: LD_EXP 27
22560: PUSH
22561: LD_INT 1
22563: EQUAL
22564: IFFALSE 22634
22566: GO 22568
22568: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 3 , 6 ) , 0 , rand ( 3 , 5 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22569: LD_INT 6
22571: PPUSH
22572: LD_INT 3
22574: PPUSH
22575: LD_INT 3
22577: PPUSH
22578: LD_INT 6
22580: PPUSH
22581: CALL_OW 12
22585: PPUSH
22586: LD_INT 0
22588: PPUSH
22589: LD_INT 3
22591: PPUSH
22592: LD_INT 5
22594: PPUSH
22595: CALL_OW 12
22599: PPUSH
22600: LD_INT 0
22602: PPUSH
22603: LD_INT 0
22605: PPUSH
22606: LD_EXP 34
22610: PPUSH
22611: LD_EXP 35
22615: PPUSH
22616: CALL_OW 12
22620: PPUSH
22621: LD_INT 17
22623: PPUSH
22624: LD_INT 18
22626: PPUSH
22627: LD_INT 1
22629: PPUSH
22630: CALL 15616 0 11
22634: END
// every 8 8$30 trigger joinEpsilon = 1 do
22635: LD_EXP 27
22639: PUSH
22640: LD_INT 1
22642: EQUAL
22643: IFFALSE 22725
22645: GO 22647
22647: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22648: LD_INT 17
22650: PPUSH
22651: LD_INT 6
22653: PPUSH
22654: LD_INT 1
22656: PPUSH
22657: LD_INT 5
22659: PPUSH
22660: CALL_OW 12
22664: PPUSH
22665: LD_EXP 34
22669: PPUSH
22670: LD_EXP 35
22674: PPUSH
22675: CALL_OW 12
22679: PPUSH
22680: LD_INT 3
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: LD_INT 1
22688: PUSH
22689: LD_INT 3
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: PPUSH
22696: LD_INT 43
22698: PUSH
22699: LD_INT 44
22701: PUSH
22702: LD_INT 45
22704: PUSH
22705: LD_INT 46
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: PPUSH
22714: EMPTY
22715: PPUSH
22716: EMPTY
22717: PPUSH
22718: LD_INT 1
22720: PPUSH
22721: CALL 13896 0 11
22725: END
// every 15 15$30 trigger joinEpsilon = 1 do
22726: LD_EXP 27
22730: PUSH
22731: LD_INT 1
22733: EQUAL
22734: IFFALSE 22804
22736: GO 22738
22738: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22739: LD_INT 6
22741: PPUSH
22742: LD_INT 3
22744: PPUSH
22745: LD_INT 5
22747: PPUSH
22748: LD_INT 8
22750: PPUSH
22751: CALL_OW 12
22755: PPUSH
22756: LD_INT 0
22758: PPUSH
22759: LD_INT 3
22761: PPUSH
22762: LD_INT 8
22764: PPUSH
22765: CALL_OW 12
22769: PPUSH
22770: LD_INT 0
22772: PPUSH
22773: LD_INT 0
22775: PPUSH
22776: LD_EXP 34
22780: PPUSH
22781: LD_EXP 35
22785: PPUSH
22786: CALL_OW 12
22790: PPUSH
22791: LD_INT 17
22793: PPUSH
22794: LD_INT 18
22796: PPUSH
22797: LD_INT 1
22799: PPUSH
22800: CALL 15616 0 11
22804: END
// every 15 15$30 trigger joinEpsilon = 1 do
22805: LD_EXP 27
22809: PUSH
22810: LD_INT 1
22812: EQUAL
22813: IFFALSE 22895
22815: GO 22817
22817: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22818: LD_INT 17
22820: PPUSH
22821: LD_INT 6
22823: PPUSH
22824: LD_INT 5
22826: PPUSH
22827: LD_INT 8
22829: PPUSH
22830: CALL_OW 12
22834: PPUSH
22835: LD_EXP 34
22839: PPUSH
22840: LD_EXP 35
22844: PPUSH
22845: CALL_OW 12
22849: PPUSH
22850: LD_INT 3
22852: PPUSH
22853: LD_INT 1
22855: PPUSH
22856: LD_INT 1
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: EMPTY
22863: LIST
22864: LIST
22865: PPUSH
22866: LD_INT 43
22868: PUSH
22869: LD_INT 44
22871: PUSH
22872: LD_INT 45
22874: PUSH
22875: LD_INT 46
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: LIST
22882: LIST
22883: PPUSH
22884: EMPTY
22885: PPUSH
22886: EMPTY
22887: PPUSH
22888: LD_INT 1
22890: PPUSH
22891: CALL 13896 0 11
22895: END
// every 27 27$30 trigger joinEpsilon = 1 do
22896: LD_EXP 27
22900: PUSH
22901: LD_INT 1
22903: EQUAL
22904: IFFALSE 22974
22906: GO 22908
22908: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22909: LD_INT 6
22911: PPUSH
22912: LD_INT 3
22914: PPUSH
22915: LD_INT 7
22917: PPUSH
22918: LD_INT 10
22920: PPUSH
22921: CALL_OW 12
22925: PPUSH
22926: LD_INT 0
22928: PPUSH
22929: LD_INT 3
22931: PPUSH
22932: LD_INT 8
22934: PPUSH
22935: CALL_OW 12
22939: PPUSH
22940: LD_INT 0
22942: PPUSH
22943: LD_INT 0
22945: PPUSH
22946: LD_EXP 34
22950: PPUSH
22951: LD_EXP 35
22955: PPUSH
22956: CALL_OW 12
22960: PPUSH
22961: LD_INT 17
22963: PPUSH
22964: LD_INT 18
22966: PPUSH
22967: LD_INT 1
22969: PPUSH
22970: CALL 15616 0 11
22974: END
// every 27 27$30 trigger joinEpsilon = 1 do
22975: LD_EXP 27
22979: PUSH
22980: LD_INT 1
22982: EQUAL
22983: IFFALSE 23065
22985: GO 22987
22987: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22988: LD_INT 17
22990: PPUSH
22991: LD_INT 6
22993: PPUSH
22994: LD_INT 5
22996: PPUSH
22997: LD_INT 8
22999: PPUSH
23000: CALL_OW 12
23004: PPUSH
23005: LD_EXP 34
23009: PPUSH
23010: LD_EXP 35
23014: PPUSH
23015: CALL_OW 12
23019: PPUSH
23020: LD_INT 3
23022: PPUSH
23023: LD_INT 1
23025: PPUSH
23026: LD_INT 1
23028: PUSH
23029: LD_INT 3
23031: PUSH
23032: EMPTY
23033: LIST
23034: LIST
23035: PPUSH
23036: LD_INT 43
23038: PUSH
23039: LD_INT 44
23041: PUSH
23042: LD_INT 45
23044: PUSH
23045: LD_INT 46
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: PPUSH
23054: EMPTY
23055: PPUSH
23056: EMPTY
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: CALL 13896 0 11
23065: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 do
23066: LD_INT 54
23068: PPUSH
23069: LD_INT 1
23071: PPUSH
23072: CALL_OW 321
23076: PUSH
23077: LD_INT 2
23079: EQUAL
23080: PUSH
23081: LD_INT 55
23083: PPUSH
23084: LD_INT 1
23086: PPUSH
23087: CALL_OW 321
23091: PUSH
23092: LD_INT 2
23094: EQUAL
23095: AND
23096: PUSH
23097: LD_INT 21
23099: PPUSH
23100: LD_INT 1
23102: PPUSH
23103: CALL_OW 321
23107: PUSH
23108: LD_INT 2
23110: EQUAL
23111: AND
23112: PUSH
23113: LD_INT 22
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 321
23123: PUSH
23124: LD_INT 2
23126: EQUAL
23127: AND
23128: PUSH
23129: LD_INT 12
23131: PPUSH
23132: LD_INT 1
23134: PPUSH
23135: CALL_OW 321
23139: PUSH
23140: LD_INT 1
23142: EQUAL
23143: PUSH
23144: LD_INT 32
23146: PPUSH
23147: LD_INT 1
23149: PPUSH
23150: CALL_OW 321
23154: PUSH
23155: LD_INT 1
23157: EQUAL
23158: OR
23159: PUSH
23160: EMPTY
23161: LIST
23162: AND
23163: PUSH
23164: LD_EXP 46
23168: PUSH
23169: LD_INT 1
23171: EQUAL
23172: AND
23173: IFFALSE 23229
23175: GO 23177
23177: DISABLE
// begin case query ( QEndMission ) of 1 :
23178: LD_STRING QEndMission
23180: PPUSH
23181: CALL_OW 97
23185: PUSH
23186: LD_INT 1
23188: DOUBLE
23189: EQUAL
23190: IFTRUE 23194
23192: GO 23205
23194: POP
// begin end_the_mission_allowed = true ;
23195: LD_ADDR_OWVAR 57
23199: PUSH
23200: LD_INT 1
23202: ST_TO_ADDR
// end ; 2 :
23203: GO 23229
23205: LD_INT 2
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23228
23213: POP
// begin fastEnd = 1 ;
23214: LD_ADDR_EXP 52
23218: PUSH
23219: LD_INT 1
23221: ST_TO_ADDR
// FinishMission ;
23222: CALL 23354 0 0
// end ; end ;
23226: GO 23229
23228: POP
// end ;
23229: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 do
23230: LD_INT 54
23232: PPUSH
23233: LD_INT 1
23235: PPUSH
23236: CALL_OW 321
23240: PUSH
23241: LD_INT 2
23243: EQUAL
23244: PUSH
23245: LD_INT 55
23247: PPUSH
23248: LD_INT 1
23250: PPUSH
23251: CALL_OW 321
23255: PUSH
23256: LD_INT 2
23258: EQUAL
23259: AND
23260: PUSH
23261: LD_INT 21
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 321
23271: PUSH
23272: LD_INT 2
23274: EQUAL
23275: AND
23276: PUSH
23277: LD_INT 22
23279: PPUSH
23280: LD_INT 1
23282: PPUSH
23283: CALL_OW 321
23287: PUSH
23288: LD_INT 2
23290: EQUAL
23291: AND
23292: PUSH
23293: LD_INT 12
23295: PPUSH
23296: LD_INT 1
23298: PPUSH
23299: CALL_OW 321
23303: PUSH
23304: LD_INT 2
23306: EQUAL
23307: AND
23308: PUSH
23309: LD_INT 32
23311: PPUSH
23312: LD_INT 1
23314: PPUSH
23315: CALL_OW 321
23319: PUSH
23320: LD_INT 2
23322: EQUAL
23323: AND
23324: PUSH
23325: LD_EXP 52
23329: PUSH
23330: LD_INT 0
23332: EQUAL
23333: AND
23334: PUSH
23335: LD_EXP 46
23339: PUSH
23340: LD_INT 1
23342: EQUAL
23343: AND
23344: IFFALSE 23353
23346: GO 23348
23348: DISABLE
// FinishMission ;
23349: CALL 23354 0 0
23353: END
// export function FinishMission ; begin
23354: LD_INT 0
23356: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
23357: LD_EXP 48
23361: PPUSH
23362: LD_STRING 10_KhatamStatus_1
23364: PPUSH
23365: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
23369: LD_INT 12
23371: PPUSH
23372: LD_INT 1
23374: PPUSH
23375: CALL_OW 321
23379: PUSH
23380: LD_INT 2
23382: EQUAL
23383: IFFALSE 23397
// begin AddMedal ( sights , 1 ) ;
23385: LD_STRING sights
23387: PPUSH
23388: LD_INT 1
23390: PPUSH
23391: CALL_OW 101
// end else
23395: GO 23408
// begin AddMedal ( sights , - 1 ) ;
23397: LD_STRING sights
23399: PPUSH
23400: LD_INT 1
23402: NEG
23403: PPUSH
23404: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
23408: LD_INT 32
23410: PPUSH
23411: LD_INT 1
23413: PPUSH
23414: CALL_OW 321
23418: PUSH
23419: LD_INT 2
23421: EQUAL
23422: IFFALSE 23436
// begin AddMedal ( computers , 1 ) ;
23424: LD_STRING computers
23426: PPUSH
23427: LD_INT 1
23429: PPUSH
23430: CALL_OW 101
// end else
23434: GO 23447
// begin AddMedal ( computers , - 1 ) ;
23436: LD_STRING computers
23438: PPUSH
23439: LD_INT 1
23441: NEG
23442: PPUSH
23443: CALL_OW 101
// end ; if arabianEscape = 0 then
23447: LD_EXP 45
23451: PUSH
23452: LD_INT 0
23454: EQUAL
23455: IFFALSE 23479
// begin AddMedal ( renegades , 2 ) ;
23457: LD_STRING renegades
23459: PPUSH
23460: LD_INT 2
23462: PPUSH
23463: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
23467: LD_INT 0
23469: PPUSH
23470: LD_STRING 10_ScientistsEscape_1
23472: PPUSH
23473: CALL_OW 39
// end else
23477: GO 23490
// begin AddMedal ( renegades , - 1 ) ;
23479: LD_STRING renegades
23481: PPUSH
23482: LD_INT 1
23484: NEG
23485: PPUSH
23486: CALL_OW 101
// end ; SaveEpsilonBase ;
23490: CALL 24080 0 0
// Query ( kaj ) ;
23494: LD_STRING kaj
23496: PPUSH
23497: CALL_OW 97
// GiveMedals ( Main ) ;
23501: LD_STRING Main
23503: PPUSH
23504: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
23508: LD_INT 22
23510: PUSH
23511: LD_INT 1
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: PUSH
23518: LD_INT 23
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 21
23530: PUSH
23531: LD_INT 1
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 2
23540: PUSH
23541: LD_INT 25
23543: PUSH
23544: LD_INT 1
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: PUSH
23551: LD_INT 25
23553: PUSH
23554: LD_INT 2
23556: PUSH
23557: EMPTY
23558: LIST
23559: LIST
23560: PUSH
23561: LD_INT 25
23563: PUSH
23564: LD_INT 3
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: PUSH
23571: LD_INT 25
23573: PUSH
23574: LD_INT 4
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 25
23583: PUSH
23584: LD_INT 5
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: PPUSH
23605: CALL_OW 69
23609: PPUSH
23610: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23614: LD_EXP 1
23618: PPUSH
23619: LD_EXP 49
23623: PUSH
23624: LD_STRING JMM
23626: STR
23627: PPUSH
23628: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23632: LD_EXP 2
23636: PPUSH
23637: LD_EXP 49
23641: PUSH
23642: LD_STRING Brown
23644: STR
23645: PPUSH
23646: CALL 8678 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23650: LD_EXP 3
23654: PPUSH
23655: LD_EXP 49
23659: PUSH
23660: LD_STRING Donaldson
23662: STR
23663: PPUSH
23664: CALL 8678 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23668: LD_EXP 4
23672: PPUSH
23673: LD_EXP 49
23677: PUSH
23678: LD_STRING Bobby
23680: STR
23681: PPUSH
23682: CALL 8678 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23686: LD_EXP 5
23690: PPUSH
23691: LD_EXP 49
23695: PUSH
23696: LD_STRING Cyrus
23698: STR
23699: PPUSH
23700: CALL 8678 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23704: LD_EXP 6
23708: PPUSH
23709: LD_EXP 49
23713: PUSH
23714: LD_STRING Lisa
23716: STR
23717: PPUSH
23718: CALL 8678 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23722: LD_EXP 7
23726: PPUSH
23727: LD_EXP 49
23731: PUSH
23732: LD_STRING Frank
23734: STR
23735: PPUSH
23736: CALL 8678 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23740: LD_EXP 8
23744: PPUSH
23745: LD_EXP 49
23749: PUSH
23750: LD_STRING Kikuchi
23752: STR
23753: PPUSH
23754: CALL 8678 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23758: LD_EXP 9
23762: PPUSH
23763: LD_EXP 49
23767: PUSH
23768: LD_STRING Houten
23770: STR
23771: PPUSH
23772: CALL 8678 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23776: LD_EXP 10
23780: PPUSH
23781: LD_EXP 49
23785: PUSH
23786: LD_STRING Gary
23788: STR
23789: PPUSH
23790: CALL 8678 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23794: LD_EXP 11
23798: PPUSH
23799: LD_EXP 49
23803: PUSH
23804: LD_STRING Simms
23806: STR
23807: PPUSH
23808: CALL 8678 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23812: LD_EXP 12
23816: PPUSH
23817: LD_EXP 49
23821: PUSH
23822: LD_STRING Denis
23824: STR
23825: PPUSH
23826: CALL 8678 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23830: LD_EXP 13
23834: PPUSH
23835: LD_EXP 49
23839: PUSH
23840: LD_STRING Joan
23842: STR
23843: PPUSH
23844: CALL 8678 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23848: LD_EXP 15
23852: PPUSH
23853: LD_EXP 49
23857: PUSH
23858: LD_STRING Gladstone
23860: STR
23861: PPUSH
23862: CALL 8678 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23866: LD_EXP 17
23870: PPUSH
23871: LD_EXP 49
23875: PUSH
23876: LD_STRING DeltaDoctor
23878: STR
23879: PPUSH
23880: CALL 8678 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23884: LD_INT 50
23886: PUSH
23887: EMPTY
23888: LIST
23889: PUSH
23890: LD_INT 22
23892: PUSH
23893: LD_INT 1
23895: PUSH
23896: EMPTY
23897: LIST
23898: LIST
23899: PUSH
23900: LD_INT 21
23902: PUSH
23903: LD_INT 1
23905: PUSH
23906: EMPTY
23907: LIST
23908: LIST
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: LD_INT 25
23915: PUSH
23916: LD_INT 1
23918: PUSH
23919: EMPTY
23920: LIST
23921: LIST
23922: PUSH
23923: LD_INT 25
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 25
23935: PUSH
23936: LD_INT 3
23938: PUSH
23939: EMPTY
23940: LIST
23941: LIST
23942: PUSH
23943: LD_INT 25
23945: PUSH
23946: LD_INT 4
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: PPUSH
23966: CALL_OW 69
23970: PUSH
23971: LD_EXP 1
23975: PUSH
23976: LD_EXP 2
23980: PUSH
23981: LD_EXP 3
23985: PUSH
23986: LD_EXP 4
23990: PUSH
23991: LD_EXP 5
23995: PUSH
23996: LD_EXP 6
24000: PUSH
24001: LD_EXP 7
24005: PUSH
24006: LD_EXP 15
24010: PUSH
24011: LD_EXP 8
24015: PUSH
24016: LD_EXP 12
24020: PUSH
24021: LD_EXP 13
24025: PUSH
24026: LD_EXP 9
24030: PUSH
24031: LD_EXP 11
24035: PUSH
24036: LD_EXP 10
24040: PUSH
24041: LD_EXP 17
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: DIFF
24063: PPUSH
24064: LD_STRING 10_other_survivors
24066: PPUSH
24067: CALL_OW 38
// YouWin ;
24071: CALL_OW 103
// end ;
24075: LD_VAR 0 1
24079: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
24080: LD_INT 0
24082: PPUSH
24083: PPUSH
24084: PPUSH
24085: PPUSH
// epsilonBase = [ ] ;
24086: LD_ADDR_VAR 0 2
24090: PUSH
24091: EMPTY
24092: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
24093: LD_ADDR_VAR 0 3
24097: PUSH
24098: LD_INT 22
24100: PUSH
24101: LD_INT 1
24103: PUSH
24104: EMPTY
24105: LIST
24106: LIST
24107: PUSH
24108: LD_INT 21
24110: PUSH
24111: LD_INT 3
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: PUSH
24118: LD_INT 50
24120: PUSH
24121: EMPTY
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 69
24133: ST_TO_ADDR
// for i in buildings do
24134: LD_ADDR_VAR 0 4
24138: PUSH
24139: LD_VAR 0 3
24143: PUSH
24144: FOR_IN
24145: IFFALSE 24582
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
24147: LD_VAR 0 4
24151: PPUSH
24152: CALL_OW 266
24156: PUSH
24157: LD_INT 6
24159: PUSH
24160: LD_INT 7
24162: PUSH
24163: LD_INT 8
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: LIST
24170: IN
24171: IFFALSE 24285
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
24173: LD_ADDR_VAR 0 2
24177: PUSH
24178: LD_VAR 0 2
24182: PUSH
24183: LD_VAR 0 4
24187: PPUSH
24188: CALL_OW 266
24192: PUSH
24193: LD_VAR 0 4
24197: PPUSH
24198: CALL_OW 250
24202: PUSH
24203: LD_VAR 0 4
24207: PPUSH
24208: CALL_OW 251
24212: PUSH
24213: LD_VAR 0 4
24217: PPUSH
24218: CALL_OW 254
24222: PUSH
24223: LD_VAR 0 4
24227: PPUSH
24228: CALL_OW 267
24232: PUSH
24233: LD_VAR 0 4
24237: PPUSH
24238: CALL_OW 248
24242: PUSH
24243: LD_VAR 0 4
24247: PPUSH
24248: LD_INT 1
24250: PPUSH
24251: CALL_OW 268
24255: PUSH
24256: LD_VAR 0 4
24260: PPUSH
24261: LD_INT 2
24263: PPUSH
24264: CALL_OW 268
24268: PUSH
24269: EMPTY
24270: LIST
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: PUSH
24279: EMPTY
24280: LIST
24281: ADD
24282: ST_TO_ADDR
24283: GO 24580
// if GetBType ( i ) = b_bunker then
24285: LD_VAR 0 4
24289: PPUSH
24290: CALL_OW 266
24294: PUSH
24295: LD_INT 32
24297: EQUAL
24298: IFFALSE 24395
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
24300: LD_ADDR_VAR 0 2
24304: PUSH
24305: LD_VAR 0 2
24309: PUSH
24310: LD_VAR 0 4
24314: PPUSH
24315: CALL_OW 266
24319: PUSH
24320: LD_VAR 0 4
24324: PPUSH
24325: CALL_OW 250
24329: PUSH
24330: LD_VAR 0 4
24334: PPUSH
24335: CALL_OW 251
24339: PUSH
24340: LD_VAR 0 4
24344: PPUSH
24345: CALL_OW 254
24349: PUSH
24350: LD_VAR 0 4
24354: PPUSH
24355: CALL_OW 267
24359: PUSH
24360: LD_VAR 0 4
24364: PPUSH
24365: CALL_OW 248
24369: PUSH
24370: LD_VAR 0 4
24374: PPUSH
24375: CALL_OW 269
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: ADD
24392: ST_TO_ADDR
24393: GO 24580
// if GetBType ( i ) = b_factory then
24395: LD_VAR 0 4
24399: PPUSH
24400: CALL_OW 266
24404: PUSH
24405: LD_INT 3
24407: EQUAL
24408: IFFALSE 24498
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_VAR 0 2
24419: PPUSH
24420: LD_INT 1
24422: PPUSH
24423: LD_VAR 0 4
24427: PPUSH
24428: CALL_OW 266
24432: PUSH
24433: LD_VAR 0 4
24437: PPUSH
24438: CALL_OW 250
24442: PUSH
24443: LD_VAR 0 4
24447: PPUSH
24448: CALL_OW 251
24452: PUSH
24453: LD_VAR 0 4
24457: PPUSH
24458: CALL_OW 254
24462: PUSH
24463: LD_VAR 0 4
24467: PPUSH
24468: CALL_OW 267
24472: PUSH
24473: LD_VAR 0 4
24477: PPUSH
24478: CALL_OW 248
24482: PUSH
24483: EMPTY
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: PPUSH
24491: CALL_OW 2
24495: ST_TO_ADDR
24496: GO 24580
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
24498: LD_ADDR_VAR 0 2
24502: PUSH
24503: LD_VAR 0 2
24507: PUSH
24508: LD_VAR 0 4
24512: PPUSH
24513: CALL_OW 266
24517: PUSH
24518: LD_VAR 0 4
24522: PPUSH
24523: CALL_OW 250
24527: PUSH
24528: LD_VAR 0 4
24532: PPUSH
24533: CALL_OW 251
24537: PUSH
24538: LD_VAR 0 4
24542: PPUSH
24543: CALL_OW 254
24547: PUSH
24548: LD_VAR 0 4
24552: PPUSH
24553: CALL_OW 267
24557: PUSH
24558: LD_VAR 0 4
24562: PPUSH
24563: CALL_OW 248
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: LIST
24572: LIST
24573: LIST
24574: LIST
24575: PUSH
24576: EMPTY
24577: LIST
24578: ADD
24579: ST_TO_ADDR
// end ;
24580: GO 24144
24582: POP
24583: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
24584: LD_VAR 0 2
24588: PPUSH
24589: LD_STRING 10_EpsilonBase
24591: PPUSH
24592: CALL_OW 39
// end ; end_of_file
24596: LD_VAR 0 1
24600: RET
// every 0 0$1 trigger IsDead ( JMM ) do
24601: LD_EXP 1
24605: PPUSH
24606: CALL_OW 301
24610: IFFALSE 24622
24612: GO 24614
24614: DISABLE
// YouLost ( JMM ) ; end_of_file
24615: LD_STRING JMM
24617: PPUSH
24618: CALL_OW 104
24622: END
// every 0 0$30 do
24623: GO 24625
24625: DISABLE
// begin enable ;
24626: ENABLE
// if cratesSpawned < 6 then
24627: LD_EXP 51
24631: PUSH
24632: LD_INT 6
24634: LESS
24635: IFFALSE 24672
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24637: LD_INT 3
24639: PPUSH
24640: LD_INT 5
24642: PPUSH
24643: CALL_OW 12
24647: PPUSH
24648: LD_INT 16
24650: PPUSH
24651: LD_INT 1
24653: PPUSH
24654: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24658: LD_ADDR_EXP 51
24662: PUSH
24663: LD_EXP 51
24667: PUSH
24668: LD_INT 1
24670: PLUS
24671: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
24672: LD_EXP 51
24676: PUSH
24677: LD_INT 6
24679: GREATEREQUAL
24680: PUSH
24681: LD_EXP 51
24685: PUSH
24686: LD_INT 12
24688: LESS
24689: AND
24690: IFFALSE 24734
// begin wait ( 0 0$30 ) ;
24692: LD_INT 1050
24694: PPUSH
24695: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24699: LD_INT 3
24701: PPUSH
24702: LD_INT 5
24704: PPUSH
24705: CALL_OW 12
24709: PPUSH
24710: LD_INT 16
24712: PPUSH
24713: LD_INT 1
24715: PPUSH
24716: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24720: LD_ADDR_EXP 51
24724: PUSH
24725: LD_EXP 51
24729: PUSH
24730: LD_INT 1
24732: PLUS
24733: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
24734: LD_EXP 51
24738: PUSH
24739: LD_INT 12
24741: GREATEREQUAL
24742: IFFALSE 24786
// begin wait ( 1 1$0 ) ;
24744: LD_INT 2100
24746: PPUSH
24747: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24751: LD_INT 3
24753: PPUSH
24754: LD_INT 5
24756: PPUSH
24757: CALL_OW 12
24761: PPUSH
24762: LD_INT 16
24764: PPUSH
24765: LD_INT 1
24767: PPUSH
24768: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24772: LD_ADDR_EXP 51
24776: PUSH
24777: LD_EXP 51
24781: PUSH
24782: LD_INT 1
24784: PLUS
24785: ST_TO_ADDR
// end ; end ;
24786: END
