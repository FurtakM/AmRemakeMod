// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export others08 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 26
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 36
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 37
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 38
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// ruPossition = 0 ;
  47: LD_ADDR_EXP 39
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  55: LD_ADDR_EXP 40
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// arabianEscape = 0 ;
  62: LD_ADDR_EXP 45
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  70: LD_ADDR_EXP 44
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// eventVar1 = 0 ;
  78: LD_ADDR_EXP 49
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// eventVar2 = 0 ;
  86: LD_ADDR_EXP 50
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// KhatamStatus = 0 ;
  94: LD_ADDR_EXP 46
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// mission_prefix := 10_ ;
 102: LD_ADDR_EXP 47
 106: PUSH
 107: LD_STRING 10_
 109: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 110: LD_ADDR_EXP 48
 114: PUSH
 115: LD_STRING 09_
 117: ST_TO_ADDR
// debugMode = 0 ;
 118: LD_ADDR_EXP 51
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// PrepareDifficulty ;
 126: CALL 7274 0 0
// PrepareVehicles ;
 130: CALL 1259 0 0
// PrepareJMMTeam ;
 134: CALL 484 0 0
// PrepareCathyTeam ;
 138: CALL 1682 0 0
// PrepareArabianCommander ;
 142: CALL 3045 0 0
// PrepareArabian ;
 146: CALL 3097 0 0
// BuildArabianBase ;
 150: CALL 9872 0 0
// PrepareNature ;
 154: CALL 19455 0 0
// TameApemans ;
 158: CALL 14745 0 0
// SaveForQuickRestart ;
 162: CALL_OW 22
// end ;
 166: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 167: LD_EXP 51
 171: PUSH
 172: LD_INT 1
 174: EQUAL
 175: IFFALSE 481
 177: GO 179
 179: DISABLE
 180: LD_INT 0
 182: PPUSH
// begin enable ;
 183: ENABLE
// fogoff ( true ) ;
 184: LD_INT 1
 186: PPUSH
 187: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 191: LD_ADDR_VAR 0 1
 195: PUSH
 196: LD_INT 22
 198: PUSH
 199: LD_INT 1
 201: PUSH
 202: EMPTY
 203: LIST
 204: LIST
 205: PUSH
 206: LD_INT 21
 208: PUSH
 209: LD_INT 1
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PUSH
 216: EMPTY
 217: LIST
 218: LIST
 219: PPUSH
 220: CALL_OW 69
 224: PUSH
 225: FOR_IN
 226: IFFALSE 242
// SetLives ( i , 1000 ) ;
 228: LD_VAR 0 1
 232: PPUSH
 233: LD_INT 1000
 235: PPUSH
 236: CALL_OW 234
 240: GO 225
 242: POP
 243: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 244: LD_ADDR_VAR 0 1
 248: PUSH
 249: LD_INT 22
 251: PUSH
 252: LD_INT 1
 254: PUSH
 255: EMPTY
 256: LIST
 257: LIST
 258: PUSH
 259: LD_INT 2
 261: PUSH
 262: LD_INT 30
 264: PUSH
 265: LD_INT 0
 267: PUSH
 268: EMPTY
 269: LIST
 270: LIST
 271: PUSH
 272: LD_INT 30
 274: PUSH
 275: LD_INT 1
 277: PUSH
 278: EMPTY
 279: LIST
 280: LIST
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: LIST
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PPUSH
 291: CALL_OW 69
 295: PUSH
 296: FOR_IN
 297: IFFALSE 321
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 299: LD_VAR 0 1
 303: PPUSH
 304: CALL_OW 274
 308: PPUSH
 309: LD_INT 1
 311: PPUSH
 312: LD_INT 9999
 314: PPUSH
 315: CALL_OW 277
 319: GO 296
 321: POP
 322: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 323: LD_ADDR_VAR 0 1
 327: PUSH
 328: LD_INT 22
 330: PUSH
 331: LD_INT 1
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: LD_INT 30
 343: PUSH
 344: LD_INT 0
 346: PUSH
 347: EMPTY
 348: LIST
 349: LIST
 350: PUSH
 351: LD_INT 30
 353: PUSH
 354: LD_INT 1
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: EMPTY
 362: LIST
 363: LIST
 364: LIST
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PPUSH
 370: CALL_OW 69
 374: PUSH
 375: FOR_IN
 376: IFFALSE 400
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 378: LD_VAR 0 1
 382: PPUSH
 383: CALL_OW 274
 387: PPUSH
 388: LD_INT 2
 390: PPUSH
 391: LD_INT 9999
 393: PPUSH
 394: CALL_OW 277
 398: GO 375
 400: POP
 401: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 402: LD_ADDR_VAR 0 1
 406: PUSH
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 2
 419: PUSH
 420: LD_INT 30
 422: PUSH
 423: LD_INT 0
 425: PUSH
 426: EMPTY
 427: LIST
 428: LIST
 429: PUSH
 430: LD_INT 30
 432: PUSH
 433: LD_INT 1
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PPUSH
 449: CALL_OW 69
 453: PUSH
 454: FOR_IN
 455: IFFALSE 479
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 457: LD_VAR 0 1
 461: PPUSH
 462: CALL_OW 274
 466: PPUSH
 467: LD_INT 3
 469: PPUSH
 470: LD_INT 9999
 472: PPUSH
 473: CALL_OW 277
 477: GO 454
 479: POP
 480: POP
// end ; end_of_file
 481: PPOPN 1
 483: END
// export function PrepareJMMTeam ; var i , j ; begin
 484: LD_INT 0
 486: PPUSH
 487: PPUSH
 488: PPUSH
// uc_side = 1 ;
 489: LD_ADDR_OWVAR 20
 493: PUSH
 494: LD_INT 1
 496: ST_TO_ADDR
// uc_nation = 1 ;
 497: LD_ADDR_OWVAR 21
 501: PUSH
 502: LD_INT 1
 504: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 505: LD_ADDR_EXP 1
 509: PUSH
 510: LD_STRING 10_JMM
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: CALL 7010 0 2
 520: ST_TO_ADDR
// Gary = PrepareUnit ( mission_prefix_prev & Gary , true ) ;
 521: LD_ADDR_EXP 10
 525: PUSH
 526: LD_EXP 48
 530: PUSH
 531: LD_STRING Gary
 533: STR
 534: PPUSH
 535: LD_INT 1
 537: PPUSH
 538: CALL 7010 0 2
 542: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
 543: LD_ADDR_EXP 5
 547: PUSH
 548: LD_EXP 48
 552: PUSH
 553: LD_STRING Cyrus
 555: STR
 556: PPUSH
 557: LD_INT 1
 559: PPUSH
 560: CALL 7010 0 2
 564: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
 565: LD_ADDR_EXP 4
 569: PUSH
 570: LD_EXP 48
 574: PUSH
 575: LD_STRING Bobby
 577: STR
 578: PPUSH
 579: LD_INT 1
 581: PPUSH
 582: CALL 7010 0 2
 586: ST_TO_ADDR
// Lisa = PrepareUnit ( 08_Lisa , true ) ;
 587: LD_ADDR_EXP 6
 591: PUSH
 592: LD_STRING 08_Lisa
 594: PPUSH
 595: LD_INT 1
 597: PPUSH
 598: CALL 7010 0 2
 602: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) then
 603: LD_STRING 08_Frank
 605: PPUSH
 606: CALL_OW 28
 610: IFFALSE 628
// Kikuchi = PrepareUnit ( 10_Kikuchi , true ) ;
 612: LD_ADDR_EXP 8
 616: PUSH
 617: LD_STRING 10_Kikuchi
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL 7010 0 2
 627: ST_TO_ADDR
// others08 = CreateCharacterSet ( 08_other_survivors ) ;
 628: LD_ADDR_EXP 20
 632: PUSH
 633: LD_STRING 08_other_survivors
 635: PPUSH
 636: CALL_OW 31
 640: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 641: LD_ADDR_EXP 23
 645: PUSH
 646: LD_STRING Powell
 648: PPUSH
 649: LD_INT 0
 651: PPUSH
 652: CALL 7010 0 2
 656: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 657: LD_EXP 1
 661: PPUSH
 662: LD_EXP 26
 666: PUSH
 667: LD_INT 1
 669: ARRAY
 670: PPUSH
 671: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 675: LD_EXP 10
 679: PPUSH
 680: LD_EXP 26
 684: PUSH
 685: LD_INT 2
 687: ARRAY
 688: PPUSH
 689: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 693: LD_EXP 5
 697: PPUSH
 698: LD_EXP 26
 702: PUSH
 703: LD_INT 3
 705: ARRAY
 706: PPUSH
 707: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 711: LD_EXP 4
 715: PPUSH
 716: LD_EXP 26
 720: PUSH
 721: LD_INT 4
 723: ARRAY
 724: PPUSH
 725: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 729: LD_EXP 6
 733: PPUSH
 734: LD_EXP 26
 738: PUSH
 739: LD_INT 5
 741: ARRAY
 742: PPUSH
 743: CALL_OW 52
// if TestCharacters ( 08_Frank ) then
 747: LD_STRING 08_Frank
 749: PPUSH
 750: CALL_OW 28
 754: IFFALSE 774
// PlaceHumanInUnit ( Kikuchi , playerVehs [ 6 ] ) ;
 756: LD_EXP 8
 760: PPUSH
 761: LD_EXP 26
 765: PUSH
 766: LD_INT 6
 768: ARRAY
 769: PPUSH
 770: CALL_OW 52
// SetClass ( [ Gary , Cyrus , Bobby , Lisa ] , 1 ) ;
 774: LD_EXP 10
 778: PUSH
 779: LD_EXP 5
 783: PUSH
 784: LD_EXP 4
 788: PUSH
 789: LD_EXP 6
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: LIST
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// BonusVehicles ;
 807: CALL 948 0 0
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
 811: LD_INT 22
 813: PUSH
 814: LD_INT 1
 816: PUSH
 817: EMPTY
 818: LIST
 819: LIST
 820: PUSH
 821: LD_INT 21
 823: PUSH
 824: LD_INT 2
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 58
 833: PUSH
 834: EMPTY
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PPUSH
 842: CALL_OW 69
 846: PUSH
 847: LD_INT 0
 849: GREATER
 850: IFFALSE 943
// begin for i in others08 do
 852: LD_ADDR_VAR 0 2
 856: PUSH
 857: LD_EXP 20
 861: PUSH
 862: FOR_IN
 863: IFFALSE 941
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
 865: LD_ADDR_VAR 0 3
 869: PUSH
 870: LD_INT 22
 872: PUSH
 873: LD_INT 1
 875: PUSH
 876: EMPTY
 877: LIST
 878: LIST
 879: PUSH
 880: LD_INT 21
 882: PUSH
 883: LD_INT 2
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 58
 892: PUSH
 893: EMPTY
 894: LIST
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: LIST
 900: PPUSH
 901: CALL_OW 69
 905: PUSH
 906: FOR_IN
 907: IFFALSE 937
// begin PlaceHumanInUnit ( i , j ) ;
 909: LD_VAR 0 2
 913: PPUSH
 914: LD_VAR 0 3
 918: PPUSH
 919: CALL_OW 52
// SetClass ( i , 1 ) ;
 923: LD_VAR 0 2
 927: PPUSH
 928: LD_INT 1
 930: PPUSH
 931: CALL_OW 336
// end ;
 935: GO 906
 937: POP
 938: POP
// end ;
 939: GO 862
 941: POP
 942: POP
// end ; end ;
 943: LD_VAR 0 1
 947: RET
// export function BonusVehicles ; var i , siberite , rnd , veh ; begin
 948: LD_INT 0
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
// siberite = LoadVariable ( 09_SibRes , 0 ) ;
 955: LD_ADDR_VAR 0 3
 959: PUSH
 960: LD_STRING 09_SibRes
 962: PPUSH
 963: LD_INT 0
 965: PPUSH
 966: CALL_OW 30
 970: ST_TO_ADDR
// if siberite >= 200 then
 971: LD_VAR 0 3
 975: PUSH
 976: LD_INT 200
 978: GREATEREQUAL
 979: IFFALSE 1126
// begin for i := 1 to 2 do
 981: LD_ADDR_VAR 0 2
 985: PUSH
 986: DOUBLE
 987: LD_INT 1
 989: DEC
 990: ST_TO_ADDR
 991: LD_INT 2
 993: PUSH
 994: FOR_TO
 995: IFFALSE 1124
// begin rnd = Rand ( 1 , 10 ) * 10 ;
 997: LD_ADDR_VAR 0 4
1001: PUSH
1002: LD_INT 1
1004: PPUSH
1005: LD_INT 10
1007: PPUSH
1008: CALL_OW 12
1012: PUSH
1013: LD_INT 10
1015: MUL
1016: ST_TO_ADDR
// vc_engine = 1 ;
1017: LD_ADDR_OWVAR 39
1021: PUSH
1022: LD_INT 1
1024: ST_TO_ADDR
// vc_control = 1 ;
1025: LD_ADDR_OWVAR 38
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// vc_weapon = 12 ;
1033: LD_ADDR_OWVAR 40
1037: PUSH
1038: LD_INT 12
1040: ST_TO_ADDR
// vc_chassis = 3 ;
1041: LD_ADDR_OWVAR 37
1045: PUSH
1046: LD_INT 3
1048: ST_TO_ADDR
// veh = CreateVehicle ;
1049: LD_ADDR_VAR 0 5
1053: PUSH
1054: CALL_OW 45
1058: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1059: LD_VAR 0 5
1063: PPUSH
1064: LD_INT 1
1066: PPUSH
1067: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1071: LD_VAR 0 5
1075: PPUSH
1076: LD_INT 2
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL_OW 49
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1086: LD_VAR 0 5
1090: PPUSH
1091: LD_INT 1
1093: PUSH
1094: LD_INT 3
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 2
1106: PPUSH
1107: CALL_OW 12
1111: ARRAY
1112: PPUSH
1113: LD_VAR 0 4
1117: PPUSH
1118: CALL_OW 291
// end ;
1122: GO 994
1124: POP
1125: POP
// end ; if siberite > 200 then
1126: LD_VAR 0 3
1130: PUSH
1131: LD_INT 200
1133: GREATER
1134: IFFALSE 1254
// begin for i := 1 to siberite / 100 do
1136: LD_ADDR_VAR 0 2
1140: PUSH
1141: DOUBLE
1142: LD_INT 1
1144: DEC
1145: ST_TO_ADDR
1146: LD_VAR 0 3
1150: PUSH
1151: LD_INT 100
1153: DIVREAL
1154: PUSH
1155: FOR_TO
1156: IFFALSE 1252
// begin vc_engine = 1 ;
1158: LD_ADDR_OWVAR 39
1162: PUSH
1163: LD_INT 1
1165: ST_TO_ADDR
// vc_control = 1 ;
1166: LD_ADDR_OWVAR 38
1170: PUSH
1171: LD_INT 1
1173: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1174: LD_ADDR_OWVAR 40
1178: PUSH
1179: LD_INT 3
1181: PUSH
1182: LD_INT 4
1184: PUSH
1185: LD_INT 5
1187: PUSH
1188: EMPTY
1189: LIST
1190: LIST
1191: LIST
1192: PUSH
1193: LD_INT 1
1195: PPUSH
1196: LD_INT 3
1198: PPUSH
1199: CALL_OW 12
1203: ARRAY
1204: ST_TO_ADDR
// vc_chassis = 3 ;
1205: LD_ADDR_OWVAR 37
1209: PUSH
1210: LD_INT 3
1212: ST_TO_ADDR
// veh = CreateVehicle ;
1213: LD_ADDR_VAR 0 5
1217: PUSH
1218: CALL_OW 45
1222: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1223: LD_VAR 0 5
1227: PPUSH
1228: LD_INT 1
1230: PPUSH
1231: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1235: LD_VAR 0 5
1239: PPUSH
1240: LD_INT 2
1242: PPUSH
1243: LD_INT 0
1245: PPUSH
1246: CALL_OW 49
// end ;
1250: GO 1155
1252: POP
1253: POP
// end ; end ;
1254: LD_VAR 0 1
1258: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount , rest , count ; begin
1259: LD_INT 0
1261: PPUSH
1262: PPUSH
1263: PPUSH
1264: PPUSH
1265: PPUSH
1266: PPUSH
1267: PPUSH
// uc_side = 1 ;
1268: LD_ADDR_OWVAR 20
1272: PUSH
1273: LD_INT 1
1275: ST_TO_ADDR
// uc_nation = 1 ;
1276: LD_ADDR_OWVAR 21
1280: PUSH
1281: LD_INT 1
1283: ST_TO_ADDR
// rest = 0 ;
1284: LD_ADDR_VAR 0 6
1288: PUSH
1289: LD_INT 0
1291: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) then
1292: LD_STRING 08_Frank
1294: PPUSH
1295: CALL_OW 28
1299: IFFALSE 1311
// count = 6 else
1301: LD_ADDR_VAR 0 7
1305: PUSH
1306: LD_INT 6
1308: ST_TO_ADDR
1309: GO 1319
// count = 5 ;
1311: LD_ADDR_VAR 0 7
1315: PUSH
1316: LD_INT 5
1318: ST_TO_ADDR
// for i := 1 to count do
1319: LD_ADDR_VAR 0 2
1323: PUSH
1324: DOUBLE
1325: LD_INT 1
1327: DEC
1328: ST_TO_ADDR
1329: LD_VAR 0 7
1333: PUSH
1334: FOR_TO
1335: IFFALSE 1675
// begin vc_engine = 1 ;
1337: LD_ADDR_OWVAR 39
1341: PUSH
1342: LD_INT 1
1344: ST_TO_ADDR
// vc_control = 1 ;
1345: LD_ADDR_OWVAR 38
1349: PUSH
1350: LD_INT 1
1352: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1353: LD_ADDR_OWVAR 40
1357: PUSH
1358: LD_INT 3
1360: PUSH
1361: LD_INT 4
1363: PUSH
1364: LD_INT 5
1366: PUSH
1367: LD_INT 12
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: LIST
1374: LIST
1375: PUSH
1376: LD_INT 1
1378: PPUSH
1379: LD_INT 4
1381: PPUSH
1382: CALL_OW 12
1386: ARRAY
1387: ST_TO_ADDR
// vc_chassis = 3 ;
1388: LD_ADDR_OWVAR 37
1392: PUSH
1393: LD_INT 3
1395: ST_TO_ADDR
// veh = CreateVehicle ;
1396: LD_ADDR_VAR 0 3
1400: PUSH
1401: CALL_OW 45
1405: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1406: LD_VAR 0 3
1410: PPUSH
1411: LD_INT 1
1413: PPUSH
1414: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1418: LD_VAR 0 3
1422: PPUSH
1423: LD_INT 2
1425: PPUSH
1426: LD_INT 0
1428: PPUSH
1429: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1433: LD_ADDR_EXP 26
1437: PUSH
1438: LD_EXP 26
1442: PUSH
1443: LD_VAR 0 3
1447: ADD
1448: ST_TO_ADDR
// if vc_weapon = 12 then
1449: LD_OWVAR 40
1453: PUSH
1454: LD_INT 12
1456: EQUAL
1457: IFFALSE 1673
// begin rnd = Rand ( 1 , 10 ) * 10 ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: LD_INT 1
1466: PPUSH
1467: LD_INT 10
1469: PPUSH
1470: CALL_OW 12
1474: PUSH
1475: LD_INT 10
1477: MUL
1478: ST_TO_ADDR
// rest = 100 - rest - rnd ;
1479: LD_ADDR_VAR 0 6
1483: PUSH
1484: LD_INT 100
1486: PUSH
1487: LD_VAR 0 6
1491: MINUS
1492: PUSH
1493: LD_VAR 0 4
1497: MINUS
1498: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1499: LD_VAR 0 3
1503: PPUSH
1504: LD_INT 1
1506: PUSH
1507: LD_INT 3
1509: PUSH
1510: EMPTY
1511: LIST
1512: LIST
1513: PUSH
1514: LD_INT 1
1516: PPUSH
1517: LD_INT 2
1519: PPUSH
1520: CALL_OW 12
1524: ARRAY
1525: PPUSH
1526: LD_VAR 0 4
1530: PPUSH
1531: CALL_OW 291
// cargoAmmount = rnd ;
1535: LD_ADDR_VAR 0 5
1539: PUSH
1540: LD_VAR 0 4
1544: ST_TO_ADDR
// repeat rest = 100 - rest - rnd ;
1545: LD_ADDR_VAR 0 6
1549: PUSH
1550: LD_INT 100
1552: PUSH
1553: LD_VAR 0 6
1557: MINUS
1558: PUSH
1559: LD_VAR 0 4
1563: MINUS
1564: ST_TO_ADDR
// rnd = Rand ( 1 , rest / 10 ) * 10 ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_INT 1
1572: PPUSH
1573: LD_VAR 0 6
1577: PUSH
1578: LD_INT 10
1580: DIVREAL
1581: PPUSH
1582: CALL_OW 12
1586: PUSH
1587: LD_INT 10
1589: MUL
1590: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1591: LD_VAR 0 3
1595: PPUSH
1596: LD_INT 1
1598: PUSH
1599: LD_INT 3
1601: PUSH
1602: EMPTY
1603: LIST
1604: LIST
1605: PUSH
1606: LD_INT 1
1608: PPUSH
1609: LD_INT 2
1611: PPUSH
1612: CALL_OW 12
1616: ARRAY
1617: PPUSH
1618: LD_VAR 0 4
1622: PPUSH
1623: CALL_OW 291
// until rest = 0 ;
1627: LD_VAR 0 6
1631: PUSH
1632: LD_INT 0
1634: EQUAL
1635: IFFALSE 1545
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1637: LD_VAR 0 3
1641: PPUSH
1642: LD_INT 1
1644: PUSH
1645: LD_INT 3
1647: PUSH
1648: EMPTY
1649: LIST
1650: LIST
1651: PUSH
1652: LD_INT 1
1654: PPUSH
1655: LD_INT 2
1657: PPUSH
1658: CALL_OW 12
1662: ARRAY
1663: PPUSH
1664: LD_VAR 0 4
1668: PPUSH
1669: CALL_OW 291
// end ; end ;
1673: GO 1334
1675: POP
1676: POP
// end ;
1677: LD_VAR 0 1
1681: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1682: LD_INT 0
1684: PPUSH
1685: PPUSH
1686: PPUSH
// uc_side = 4 ;
1687: LD_ADDR_OWVAR 20
1691: PUSH
1692: LD_INT 4
1694: ST_TO_ADDR
// uc_nation = 1 ;
1695: LD_ADDR_OWVAR 21
1699: PUSH
1700: LD_INT 1
1702: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1703: LD_ADDR_EXP 11
1707: PUSH
1708: LD_STRING Simms
1710: PPUSH
1711: LD_INT 0
1713: PPUSH
1714: CALL 7010 0 2
1718: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1719: LD_ADDR_EXP 12
1723: PUSH
1724: LD_STRING 08_Denis
1726: PPUSH
1727: LD_INT 1
1729: PPUSH
1730: CALL 7010 0 2
1734: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1735: LD_ADDR_EXP 13
1739: PUSH
1740: LD_STRING 08_Joan
1742: PPUSH
1743: LD_INT 1
1745: PPUSH
1746: CALL 7010 0 2
1750: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1751: LD_ADDR_EXP 14
1755: PUSH
1756: LD_STRING Khatam
1758: PPUSH
1759: LD_INT 1
1761: PPUSH
1762: CALL 7010 0 2
1766: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1767: LD_ADDR_EXP 15
1771: PUSH
1772: LD_STRING Gladstone
1774: PPUSH
1775: LD_INT 1
1777: PPUSH
1778: CALL 7010 0 2
1782: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1783: LD_ADDR_EXP 17
1787: PUSH
1788: LD_STRING DeltaDoctor
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: CALL 7010 0 2
1798: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1799: LD_ADDR_EXP 21
1803: PUSH
1804: LD_STRING 09_others
1806: PPUSH
1807: CALL_OW 31
1811: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1812: LD_ADDR_EXP 22
1816: PUSH
1817: LD_STRING 09_apes
1819: PPUSH
1820: CALL_OW 31
1824: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1825: LD_EXP 11
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: LD_INT 0
1835: PPUSH
1836: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1840: LD_EXP 12
1844: PPUSH
1845: LD_INT 1
1847: PPUSH
1848: LD_INT 0
1850: PPUSH
1851: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1855: LD_EXP 13
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: LD_INT 0
1865: PPUSH
1866: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1870: LD_EXP 14
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: LD_INT 0
1880: PPUSH
1881: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1885: LD_EXP 15
1889: PPUSH
1890: LD_INT 1
1892: PPUSH
1893: LD_INT 0
1895: PPUSH
1896: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1900: LD_EXP 17
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 0
1910: PPUSH
1911: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
1915: LD_EXP 16
1919: PPUSH
1920: LD_INT 1
1922: PPUSH
1923: LD_INT 0
1925: PPUSH
1926: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1930: LD_EXP 11
1934: PUSH
1935: LD_EXP 14
1939: PUSH
1940: LD_EXP 12
1944: PUSH
1945: LD_EXP 15
1949: PUSH
1950: LD_EXP 17
1954: PUSH
1955: LD_EXP 13
1959: PUSH
1960: EMPTY
1961: LIST
1962: LIST
1963: LIST
1964: LIST
1965: LIST
1966: LIST
1967: PPUSH
1968: LD_INT 4
1970: PPUSH
1971: CALL_OW 336
// if others09 > [ 6 , 5 , 4 ] [ Difficulty ] then
1975: LD_EXP 21
1979: PUSH
1980: LD_INT 6
1982: PUSH
1983: LD_INT 5
1985: PUSH
1986: LD_INT 4
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: LIST
1993: PUSH
1994: LD_OWVAR 67
1998: ARRAY
1999: GREATER
2000: IFFALSE 2062
// begin for i := 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2002: LD_ADDR_VAR 0 2
2006: PUSH
2007: DOUBLE
2008: LD_INT 1
2010: DEC
2011: ST_TO_ADDR
2012: LD_INT 7
2014: PUSH
2015: LD_INT 6
2017: PUSH
2018: LD_INT 5
2020: PUSH
2021: EMPTY
2022: LIST
2023: LIST
2024: LIST
2025: PUSH
2026: LD_OWVAR 67
2030: ARRAY
2031: PUSH
2032: FOR_TO
2033: IFFALSE 2058
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2035: LD_EXP 21
2039: PUSH
2040: LD_VAR 0 2
2044: ARRAY
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 49
2056: GO 2032
2058: POP
2059: POP
// end else
2060: GO 2094
// begin for i in others09 do
2062: LD_ADDR_VAR 0 2
2066: PUSH
2067: LD_EXP 21
2071: PUSH
2072: FOR_IN
2073: IFFALSE 2092
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2075: LD_VAR 0 2
2079: PPUSH
2080: LD_INT 1
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL_OW 49
2090: GO 2072
2092: POP
2093: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
2094: LD_INT 22
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 21
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: PUSH
2114: LD_INT 25
2116: PUSH
2117: LD_INT 2
2119: PUSH
2120: EMPTY
2121: LIST
2122: LIST
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: LIST
2128: PPUSH
2129: CALL_OW 69
2133: PUSH
2134: LD_EXP 11
2138: PUSH
2139: LD_EXP 14
2143: PUSH
2144: LD_EXP 12
2148: PUSH
2149: LD_EXP 15
2153: PUSH
2154: LD_EXP 17
2158: PUSH
2159: LD_EXP 13
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 0
2174: EQUAL
2175: DIFF
2176: IFFALSE 2278
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_INT 22
2185: PUSH
2186: LD_INT 4
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: PUSH
2193: LD_INT 21
2195: PUSH
2196: LD_INT 1
2198: PUSH
2199: EMPTY
2200: LIST
2201: LIST
2202: PUSH
2203: LD_INT 25
2205: PUSH
2206: LD_INT 2
2208: PUSH
2209: EMPTY
2210: LIST
2211: LIST
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: LIST
2217: PPUSH
2218: CALL_OW 69
2222: PUSH
2223: LD_EXP 11
2227: PUSH
2228: LD_EXP 14
2232: PUSH
2233: LD_EXP 12
2237: PUSH
2238: LD_EXP 15
2242: PUSH
2243: LD_EXP 17
2247: PUSH
2248: LD_EXP 13
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: LIST
2257: LIST
2258: LIST
2259: LIST
2260: DIFF
2261: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2262: LD_VAR 0 3
2266: PUSH
2267: LD_INT 1
2269: ARRAY
2270: PPUSH
2271: LD_INT 2
2273: PPUSH
2274: CALL_OW 336
// end ; for i in ape09 do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_EXP 22
2287: PUSH
2288: FOR_IN
2289: IFFALSE 2308
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2291: LD_VAR 0 2
2295: PPUSH
2296: LD_INT 1
2298: PPUSH
2299: LD_INT 0
2301: PPUSH
2302: CALL_OW 49
2306: GO 2288
2308: POP
2309: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2310: LD_INT 22
2312: PUSH
2313: LD_INT 4
2315: PUSH
2316: EMPTY
2317: LIST
2318: LIST
2319: PUSH
2320: LD_INT 21
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: PUSH
2330: LD_INT 25
2332: PUSH
2333: LD_INT 2
2335: PUSH
2336: EMPTY
2337: LIST
2338: LIST
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: LIST
2344: PPUSH
2345: CALL_OW 69
2349: PPUSH
2350: LD_INT 0
2352: PPUSH
2353: LD_INT 101
2355: PPUSH
2356: LD_INT 30
2358: PPUSH
2359: LD_INT 2
2361: PPUSH
2362: CALL_OW 205
// uc_side = 1 ;
2366: LD_ADDR_OWVAR 20
2370: PUSH
2371: LD_INT 1
2373: ST_TO_ADDR
// hc_class := 1 ;
2374: LD_ADDR_OWVAR 28
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// hc_sex := sex_female ;
2382: LD_ADDR_OWVAR 27
2386: PUSH
2387: LD_INT 2
2389: ST_TO_ADDR
// hc_gallery :=  ;
2390: LD_ADDR_OWVAR 33
2394: PUSH
2395: LD_STRING 
2397: ST_TO_ADDR
// hc_name :=  ;
2398: LD_ADDR_OWVAR 26
2402: PUSH
2403: LD_STRING 
2405: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2406: LD_ADDR_OWVAR 31
2410: PUSH
2411: LD_INT 1
2413: PUSH
2414: LD_INT 7
2416: PUSH
2417: LD_INT 1
2419: PUSH
2420: LD_INT 0
2422: PUSH
2423: EMPTY
2424: LIST
2425: LIST
2426: LIST
2427: LIST
2428: ST_TO_ADDR
// AmScout = CreateHuman ;
2429: LD_ADDR_EXP 18
2433: PUSH
2434: CALL_OW 44
2438: ST_TO_ADDR
// end ;
2439: LD_VAR 0 1
2443: RET
// export function PrepareCornell ; begin
2444: LD_INT 0
2446: PPUSH
// uc_side = 4 ;
2447: LD_ADDR_OWVAR 20
2451: PUSH
2452: LD_INT 4
2454: ST_TO_ADDR
// uc_nation = 1 ;
2455: LD_ADDR_OWVAR 21
2459: PUSH
2460: LD_INT 1
2462: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2463: LD_ADDR_EXP 19
2467: PUSH
2468: LD_STRING 03_Cornel
2470: PPUSH
2471: LD_INT 1
2473: PPUSH
2474: CALL 7010 0 2
2478: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2479: LD_EXP 19
2483: PPUSH
2484: LD_INT 8
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: CALL_OW 49
// if IsInUnit ( JMM ) then
2494: LD_EXP 1
2498: PPUSH
2499: CALL_OW 310
2503: IFFALSE 2546
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2505: LD_EXP 19
2509: PPUSH
2510: LD_EXP 1
2514: PPUSH
2515: CALL_OW 310
2519: PPUSH
2520: CALL_OW 250
2524: PPUSH
2525: LD_EXP 1
2529: PPUSH
2530: CALL_OW 310
2534: PPUSH
2535: CALL_OW 251
2539: PPUSH
2540: CALL_OW 111
2544: GO 2575
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2546: LD_EXP 19
2550: PPUSH
2551: LD_EXP 1
2555: PPUSH
2556: CALL_OW 250
2560: PPUSH
2561: LD_EXP 1
2565: PPUSH
2566: CALL_OW 251
2570: PPUSH
2571: CALL_OW 111
// end ; end_of_file
2575: LD_VAR 0 1
2579: RET
// export function PrepareRussians ; var i , un ; begin
2580: LD_INT 0
2582: PPUSH
2583: PPUSH
2584: PPUSH
// uc_side = 3 ;
2585: LD_ADDR_OWVAR 20
2589: PUSH
2590: LD_INT 3
2592: ST_TO_ADDR
// uc_nation = 3 ;
2593: LD_ADDR_OWVAR 21
2597: PUSH
2598: LD_INT 3
2600: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2601: LD_ADDR_EXP 24
2605: PUSH
2606: LD_STRING Tsaritsyn
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: CALL 7010 0 2
2616: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2617: LD_EXP 24
2621: PPUSH
2622: LD_INT 3
2624: PPUSH
2625: LD_INT 0
2627: PPUSH
2628: CALL_OW 49
// for i = 1 to 14 do
2632: LD_ADDR_VAR 0 2
2636: PUSH
2637: DOUBLE
2638: LD_INT 1
2640: DEC
2641: ST_TO_ADDR
2642: LD_INT 14
2644: PUSH
2645: FOR_TO
2646: IFFALSE 2732
// begin uc_side = 3 ;
2648: LD_ADDR_OWVAR 20
2652: PUSH
2653: LD_INT 3
2655: ST_TO_ADDR
// uc_nation = 3 ;
2656: LD_ADDR_OWVAR 21
2660: PUSH
2661: LD_INT 3
2663: ST_TO_ADDR
// hc_gallery =  ;
2664: LD_ADDR_OWVAR 33
2668: PUSH
2669: LD_STRING 
2671: ST_TO_ADDR
// hc_name =  ;
2672: LD_ADDR_OWVAR 26
2676: PUSH
2677: LD_STRING 
2679: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2680: LD_INT 0
2682: PPUSH
2683: LD_INT 1
2685: PPUSH
2686: LD_EXP 34
2690: PPUSH
2691: LD_EXP 35
2695: PPUSH
2696: CALL_OW 12
2700: PPUSH
2701: CALL_OW 380
// un = CreateHuman ;
2705: LD_ADDR_VAR 0 3
2709: PUSH
2710: CALL_OW 44
2714: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2715: LD_VAR 0 3
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// end ;
2730: GO 2645
2732: POP
2733: POP
// for i = 1 to 6 do
2734: LD_ADDR_VAR 0 2
2738: PUSH
2739: DOUBLE
2740: LD_INT 1
2742: DEC
2743: ST_TO_ADDR
2744: LD_INT 6
2746: PUSH
2747: FOR_TO
2748: IFFALSE 2834
// begin uc_side = 3 ;
2750: LD_ADDR_OWVAR 20
2754: PUSH
2755: LD_INT 3
2757: ST_TO_ADDR
// uc_nation = 3 ;
2758: LD_ADDR_OWVAR 21
2762: PUSH
2763: LD_INT 3
2765: ST_TO_ADDR
// hc_gallery =  ;
2766: LD_ADDR_OWVAR 33
2770: PUSH
2771: LD_STRING 
2773: ST_TO_ADDR
// hc_name =  ;
2774: LD_ADDR_OWVAR 26
2778: PUSH
2779: LD_STRING 
2781: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2782: LD_INT 0
2784: PPUSH
2785: LD_INT 2
2787: PPUSH
2788: LD_EXP 34
2792: PPUSH
2793: LD_EXP 35
2797: PPUSH
2798: CALL_OW 12
2802: PPUSH
2803: CALL_OW 380
// un = CreateHuman ;
2807: LD_ADDR_VAR 0 3
2811: PUSH
2812: CALL_OW 44
2816: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2817: LD_VAR 0 3
2821: PPUSH
2822: LD_INT 3
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
// end ;
2832: GO 2747
2834: POP
2835: POP
// for i = 1 to 6 do
2836: LD_ADDR_VAR 0 2
2840: PUSH
2841: DOUBLE
2842: LD_INT 1
2844: DEC
2845: ST_TO_ADDR
2846: LD_INT 6
2848: PUSH
2849: FOR_TO
2850: IFFALSE 2936
// begin uc_side = 3 ;
2852: LD_ADDR_OWVAR 20
2856: PUSH
2857: LD_INT 3
2859: ST_TO_ADDR
// uc_nation = 3 ;
2860: LD_ADDR_OWVAR 21
2864: PUSH
2865: LD_INT 3
2867: ST_TO_ADDR
// hc_gallery =  ;
2868: LD_ADDR_OWVAR 33
2872: PUSH
2873: LD_STRING 
2875: ST_TO_ADDR
// hc_name =  ;
2876: LD_ADDR_OWVAR 26
2880: PUSH
2881: LD_STRING 
2883: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2884: LD_INT 0
2886: PPUSH
2887: LD_INT 3
2889: PPUSH
2890: LD_EXP 34
2894: PPUSH
2895: LD_EXP 35
2899: PPUSH
2900: CALL_OW 12
2904: PPUSH
2905: CALL_OW 380
// un = CreateHuman ;
2909: LD_ADDR_VAR 0 3
2913: PUSH
2914: CALL_OW 44
2918: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: LD_INT 0
2929: PPUSH
2930: CALL_OW 49
// end ;
2934: GO 2849
2936: POP
2937: POP
// for i = 1 to 4 do
2938: LD_ADDR_VAR 0 2
2942: PUSH
2943: DOUBLE
2944: LD_INT 1
2946: DEC
2947: ST_TO_ADDR
2948: LD_INT 4
2950: PUSH
2951: FOR_TO
2952: IFFALSE 3038
// begin uc_side = 3 ;
2954: LD_ADDR_OWVAR 20
2958: PUSH
2959: LD_INT 3
2961: ST_TO_ADDR
// uc_nation = 3 ;
2962: LD_ADDR_OWVAR 21
2966: PUSH
2967: LD_INT 3
2969: ST_TO_ADDR
// hc_gallery =  ;
2970: LD_ADDR_OWVAR 33
2974: PUSH
2975: LD_STRING 
2977: ST_TO_ADDR
// hc_name =  ;
2978: LD_ADDR_OWVAR 26
2982: PUSH
2983: LD_STRING 
2985: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2986: LD_INT 0
2988: PPUSH
2989: LD_INT 4
2991: PPUSH
2992: LD_EXP 34
2996: PPUSH
2997: LD_EXP 35
3001: PPUSH
3002: CALL_OW 12
3006: PPUSH
3007: CALL_OW 380
// un = CreateHuman ;
3011: LD_ADDR_VAR 0 3
3015: PUSH
3016: CALL_OW 44
3020: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3021: LD_VAR 0 3
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: LD_INT 0
3031: PPUSH
3032: CALL_OW 49
// end ;
3036: GO 2951
3038: POP
3039: POP
// end ; end_of_file
3040: LD_VAR 0 1
3044: RET
// export function PrepareArabianCommander ; begin
3045: LD_INT 0
3047: PPUSH
// uc_side = 2 ;
3048: LD_ADDR_OWVAR 20
3052: PUSH
3053: LD_INT 2
3055: ST_TO_ADDR
// uc_nation = 2 ;
3056: LD_ADDR_OWVAR 21
3060: PUSH
3061: LD_INT 2
3063: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3064: LD_ADDR_EXP 25
3068: PUSH
3069: LD_STRING Dietrich
3071: PPUSH
3072: CALL_OW 25
3076: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3077: LD_EXP 25
3081: PPUSH
3082: LD_INT 4
3084: PPUSH
3085: LD_INT 0
3087: PPUSH
3088: CALL_OW 49
// end ;
3092: LD_VAR 0 1
3096: RET
// export function PrepareArabian ; var i , un , veh ; begin
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
3101: PPUSH
3102: PPUSH
// for i = 1 to 3 do
3103: LD_ADDR_VAR 0 2
3107: PUSH
3108: DOUBLE
3109: LD_INT 1
3111: DEC
3112: ST_TO_ADDR
3113: LD_INT 3
3115: PUSH
3116: FOR_TO
3117: IFFALSE 3203
// begin uc_side = 2 ;
3119: LD_ADDR_OWVAR 20
3123: PUSH
3124: LD_INT 2
3126: ST_TO_ADDR
// uc_nation = 2 ;
3127: LD_ADDR_OWVAR 21
3131: PUSH
3132: LD_INT 2
3134: ST_TO_ADDR
// hc_gallery =  ;
3135: LD_ADDR_OWVAR 33
3139: PUSH
3140: LD_STRING 
3142: ST_TO_ADDR
// hc_name =  ;
3143: LD_ADDR_OWVAR 26
3147: PUSH
3148: LD_STRING 
3150: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3151: LD_INT 0
3153: PPUSH
3154: LD_INT 1
3156: PPUSH
3157: LD_EXP 34
3161: PPUSH
3162: LD_EXP 35
3166: PPUSH
3167: CALL_OW 12
3171: PPUSH
3172: CALL_OW 380
// un = CreateHuman ;
3176: LD_ADDR_VAR 0 3
3180: PUSH
3181: CALL_OW 44
3185: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3186: LD_VAR 0 3
3190: PPUSH
3191: LD_INT 4
3193: PPUSH
3194: LD_INT 0
3196: PPUSH
3197: CALL_OW 49
// end ;
3201: GO 3116
3203: POP
3204: POP
// for i = 1 to 6 do
3205: LD_ADDR_VAR 0 2
3209: PUSH
3210: DOUBLE
3211: LD_INT 1
3213: DEC
3214: ST_TO_ADDR
3215: LD_INT 6
3217: PUSH
3218: FOR_TO
3219: IFFALSE 3305
// begin uc_side = 2 ;
3221: LD_ADDR_OWVAR 20
3225: PUSH
3226: LD_INT 2
3228: ST_TO_ADDR
// uc_nation = 2 ;
3229: LD_ADDR_OWVAR 21
3233: PUSH
3234: LD_INT 2
3236: ST_TO_ADDR
// hc_gallery =  ;
3237: LD_ADDR_OWVAR 33
3241: PUSH
3242: LD_STRING 
3244: ST_TO_ADDR
// hc_name =  ;
3245: LD_ADDR_OWVAR 26
3249: PUSH
3250: LD_STRING 
3252: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3253: LD_INT 0
3255: PPUSH
3256: LD_INT 2
3258: PPUSH
3259: LD_EXP 34
3263: PPUSH
3264: LD_EXP 35
3268: PPUSH
3269: CALL_OW 12
3273: PPUSH
3274: CALL_OW 380
// un = CreateHuman ;
3278: LD_ADDR_VAR 0 3
3282: PUSH
3283: CALL_OW 44
3287: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3288: LD_VAR 0 3
3292: PPUSH
3293: LD_INT 4
3295: PPUSH
3296: LD_INT 0
3298: PPUSH
3299: CALL_OW 49
// end ;
3303: GO 3218
3305: POP
3306: POP
// for i = 1 to 6 do
3307: LD_ADDR_VAR 0 2
3311: PUSH
3312: DOUBLE
3313: LD_INT 1
3315: DEC
3316: ST_TO_ADDR
3317: LD_INT 6
3319: PUSH
3320: FOR_TO
3321: IFFALSE 3407
// begin uc_side = 2 ;
3323: LD_ADDR_OWVAR 20
3327: PUSH
3328: LD_INT 2
3330: ST_TO_ADDR
// uc_nation = 2 ;
3331: LD_ADDR_OWVAR 21
3335: PUSH
3336: LD_INT 2
3338: ST_TO_ADDR
// hc_gallery =  ;
3339: LD_ADDR_OWVAR 33
3343: PUSH
3344: LD_STRING 
3346: ST_TO_ADDR
// hc_name =  ;
3347: LD_ADDR_OWVAR 26
3351: PUSH
3352: LD_STRING 
3354: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3355: LD_INT 0
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_EXP 34
3365: PPUSH
3366: LD_EXP 35
3370: PPUSH
3371: CALL_OW 12
3375: PPUSH
3376: CALL_OW 380
// un = CreateHuman ;
3380: LD_ADDR_VAR 0 3
3384: PUSH
3385: CALL_OW 44
3389: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3390: LD_VAR 0 3
3394: PPUSH
3395: LD_INT 4
3397: PPUSH
3398: LD_INT 0
3400: PPUSH
3401: CALL_OW 49
// end ;
3405: GO 3320
3407: POP
3408: POP
// for i = 1 to 4 do
3409: LD_ADDR_VAR 0 2
3413: PUSH
3414: DOUBLE
3415: LD_INT 1
3417: DEC
3418: ST_TO_ADDR
3419: LD_INT 4
3421: PUSH
3422: FOR_TO
3423: IFFALSE 3509
// begin uc_side = 2 ;
3425: LD_ADDR_OWVAR 20
3429: PUSH
3430: LD_INT 2
3432: ST_TO_ADDR
// uc_nation = 2 ;
3433: LD_ADDR_OWVAR 21
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// hc_gallery =  ;
3441: LD_ADDR_OWVAR 33
3445: PUSH
3446: LD_STRING 
3448: ST_TO_ADDR
// hc_name =  ;
3449: LD_ADDR_OWVAR 26
3453: PUSH
3454: LD_STRING 
3456: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3457: LD_INT 0
3459: PPUSH
3460: LD_INT 4
3462: PPUSH
3463: LD_EXP 34
3467: PPUSH
3468: LD_EXP 35
3472: PPUSH
3473: CALL_OW 12
3477: PPUSH
3478: CALL_OW 380
// un = CreateHuman ;
3482: LD_ADDR_VAR 0 3
3486: PUSH
3487: CALL_OW 44
3491: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3492: LD_VAR 0 3
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 0
3502: PPUSH
3503: CALL_OW 49
// end ;
3507: GO 3422
3509: POP
3510: POP
// for i = 1 to 2 do
3511: LD_ADDR_VAR 0 2
3515: PUSH
3516: DOUBLE
3517: LD_INT 1
3519: DEC
3520: ST_TO_ADDR
3521: LD_INT 2
3523: PUSH
3524: FOR_TO
3525: IFFALSE 3655
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3527: LD_ADDR_VAR 0 4
3531: PUSH
3532: LD_INT 22
3534: PUSH
3535: LD_INT 2
3537: PUSH
3538: EMPTY
3539: LIST
3540: LIST
3541: PUSH
3542: LD_INT 21
3544: PUSH
3545: LD_INT 2
3547: PUSH
3548: EMPTY
3549: LIST
3550: LIST
3551: PUSH
3552: LD_INT 58
3554: PUSH
3555: EMPTY
3556: LIST
3557: PUSH
3558: EMPTY
3559: LIST
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 69
3567: ST_TO_ADDR
// uc_side = 2 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 2
3575: ST_TO_ADDR
// uc_nation = 2 ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 2
3583: ST_TO_ADDR
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 3
3605: PPUSH
3606: LD_EXP 34
3610: PPUSH
3611: LD_EXP 35
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3635: LD_VAR 0 3
3639: PPUSH
3640: LD_VAR 0 4
3644: PUSH
3645: LD_INT 1
3647: ARRAY
3648: PPUSH
3649: CALL_OW 52
// end ;
3653: GO 3524
3655: POP
3656: POP
// end ; end_of_file
3657: LD_VAR 0 1
3661: RET
// every 1 do
3662: GO 3664
3664: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
3665: LD_EXP 1
3669: PPUSH
3670: CALL_OW 87
// if IsOk ( Gary ) then
3674: LD_EXP 10
3678: PPUSH
3679: CALL_OW 302
3683: IFFALSE 3729
// begin DialogueOn ;
3685: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3689: LD_EXP 10
3693: PPUSH
3694: LD_STRING D2-Gary-1
3696: PPUSH
3697: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3701: LD_EXP 1
3705: PPUSH
3706: LD_STRING D2-JMM-1
3708: PPUSH
3709: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3713: LD_EXP 10
3717: PPUSH
3718: LD_STRING D2-Gary-2
3720: PPUSH
3721: CALL_OW 88
// DialogueOff ;
3725: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3729: LD_STRING M1
3731: PPUSH
3732: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3736: LD_INT 38
3738: PPUSH
3739: LD_INT 1
3741: PPUSH
3742: LD_INT 100
3744: PPUSH
3745: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3749: LD_INT 47
3751: PPUSH
3752: LD_INT 1
3754: PPUSH
3755: LD_INT 50
3757: PPUSH
3758: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3762: LD_INT 47
3764: PPUSH
3765: LD_INT 3
3767: PPUSH
3768: LD_INT 50
3770: PPUSH
3771: CALL_OW 291
// end ;
3775: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3776: LD_EXP 1
3780: PPUSH
3781: LD_EXP 11
3785: PPUSH
3786: CALL_OW 296
3790: PUSH
3791: LD_INT 15
3793: LESS
3794: IFFALSE 4169
3796: GO 3798
3798: DISABLE
// begin InGameOn ;
3799: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3803: LD_EXP 1
3807: PPUSH
3808: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 87
// wait ( 0 0$1 ) ;
3821: LD_INT 35
3823: PPUSH
3824: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3828: LD_INT 35
3830: PPUSH
3831: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3835: LD_EXP 11
3839: PUSH
3840: LD_EXP 13
3844: PUSH
3845: LD_EXP 12
3849: PUSH
3850: LD_EXP 14
3854: PUSH
3855: EMPTY
3856: LIST
3857: LIST
3858: LIST
3859: LIST
3860: PPUSH
3861: LD_EXP 1
3865: PPUSH
3866: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3870: LD_EXP 1
3874: PPUSH
3875: LD_EXP 11
3879: PPUSH
3880: CALL_OW 296
3884: PUSH
3885: LD_INT 5
3887: LESS
3888: IFFALSE 3828
// ComTurnUnit ( JMM , Simms ) ;
3890: LD_EXP 1
3894: PPUSH
3895: LD_EXP 11
3899: PPUSH
3900: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3904: LD_EXP 11
3908: PUSH
3909: LD_EXP 13
3913: PUSH
3914: LD_EXP 12
3918: PUSH
3919: LD_EXP 14
3923: PUSH
3924: EMPTY
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: PPUSH
3930: LD_EXP 1
3934: PPUSH
3935: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3939: LD_EXP 1
3943: PUSH
3944: LD_EXP 11
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PPUSH
3953: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3957: LD_EXP 11
3961: PPUSH
3962: LD_STRING D2a-Sim-1
3964: PPUSH
3965: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3969: LD_EXP 1
3973: PPUSH
3974: LD_STRING D2a-JMM-1
3976: PPUSH
3977: CALL_OW 88
// if IsOk ( Joan ) then
3981: LD_EXP 13
3985: PPUSH
3986: CALL_OW 302
3990: IFFALSE 4042
// begin ComTurnUnit ( JMM , Joan ) ;
3992: LD_EXP 1
3996: PPUSH
3997: LD_EXP 13
4001: PPUSH
4002: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4006: LD_EXP 13
4010: PPUSH
4011: LD_STRING D2b-Joan-1
4013: PPUSH
4014: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_STRING D2b-JMM-1
4025: PPUSH
4026: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4030: LD_EXP 13
4034: PPUSH
4035: LD_STRING D2b-Joan-2
4037: PPUSH
4038: CALL_OW 88
// end ; if IsOk ( Denis ) then
4042: LD_EXP 12
4046: PPUSH
4047: CALL_OW 302
4051: IFFALSE 4079
// begin ComTurnUnit ( JMM , Denis ) ;
4053: LD_EXP 1
4057: PPUSH
4058: LD_EXP 12
4062: PPUSH
4063: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4067: LD_EXP 12
4071: PPUSH
4072: LD_STRING D2c-Den-1
4074: PPUSH
4075: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4079: LD_EXP 14
4083: PPUSH
4084: CALL_OW 302
4088: IFFALSE 4128
// begin ComTurnUnit ( JMM , Khatam ) ;
4090: LD_EXP 1
4094: PPUSH
4095: LD_EXP 14
4099: PPUSH
4100: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4104: LD_EXP 1
4108: PPUSH
4109: LD_STRING D2c-JMM-1
4111: PPUSH
4112: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4116: LD_EXP 14
4120: PPUSH
4121: LD_STRING D2c-Khat-1
4123: PPUSH
4124: CALL_OW 88
// end ; InGameOff ;
4128: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4132: LD_INT 22
4134: PUSH
4135: LD_INT 4
4137: PUSH
4138: EMPTY
4139: LIST
4140: LIST
4141: PPUSH
4142: CALL_OW 69
4146: PPUSH
4147: LD_INT 1
4149: PPUSH
4150: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4154: LD_STRING M1a
4156: PPUSH
4157: CALL_OW 337
// joinEpsilon = 1 ;
4161: LD_ADDR_EXP 27
4165: PUSH
4166: LD_INT 1
4168: ST_TO_ADDR
// end ;
4169: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4170: LD_EXP 49
4174: PUSH
4175: LD_INT 1
4177: EQUAL
4178: IFFALSE 4910
4180: GO 4182
4182: DISABLE
4183: LD_INT 0
4185: PPUSH
4186: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4187: LD_ADDR_VAR 0 1
4191: PUSH
4192: LD_INT 22
4194: PUSH
4195: LD_INT 1
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: LD_INT 25
4204: PUSH
4205: LD_INT 4
4207: PUSH
4208: EMPTY
4209: LIST
4210: LIST
4211: PUSH
4212: LD_INT 26
4214: PUSH
4215: LD_INT 1
4217: PUSH
4218: EMPTY
4219: LIST
4220: LIST
4221: PUSH
4222: EMPTY
4223: LIST
4224: LIST
4225: LIST
4226: PPUSH
4227: CALL_OW 69
4231: PUSH
4232: LD_INT 1
4234: ARRAY
4235: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4236: LD_ADDR_VAR 0 2
4240: PUSH
4241: LD_INT 22
4243: PUSH
4244: LD_INT 1
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: PUSH
4251: LD_INT 26
4253: PUSH
4254: LD_INT 1
4256: PUSH
4257: EMPTY
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 2
4263: PUSH
4264: LD_INT 25
4266: PUSH
4267: LD_INT 1
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: PUSH
4274: LD_INT 25
4276: PUSH
4277: LD_INT 2
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: PUSH
4284: LD_INT 25
4286: PUSH
4287: LD_INT 3
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: PUSH
4294: EMPTY
4295: LIST
4296: LIST
4297: LIST
4298: LIST
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: LIST
4304: PPUSH
4305: CALL_OW 69
4309: PUSH
4310: LD_INT 1
4312: ARRAY
4313: ST_TO_ADDR
// DialogueOn ;
4314: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4318: LD_EXP 17
4322: PPUSH
4323: CALL_OW 302
4327: IFFALSE 4343
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4329: LD_EXP 17
4333: PPUSH
4334: LD_STRING D3-Sci1-1
4336: PPUSH
4337: CALL_OW 88
4341: GO 4355
// Say ( tmp1 , D3-Sci1-1 ) ;
4343: LD_VAR 0 1
4347: PPUSH
4348: LD_STRING D3-Sci1-1
4350: PPUSH
4351: CALL_OW 88
// if IsOk ( Gary ) then
4355: LD_EXP 10
4359: PPUSH
4360: CALL_OW 302
4364: IFFALSE 4380
// Say ( Gary , D3-Gary-1 ) else
4366: LD_EXP 10
4370: PPUSH
4371: LD_STRING D3-Gary-1
4373: PPUSH
4374: CALL_OW 88
4378: GO 4392
// Say ( tmp2 , D3-Gary-1 ) ;
4380: LD_VAR 0 2
4384: PPUSH
4385: LD_STRING D3-Gary-1
4387: PPUSH
4388: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4392: LD_EXP 17
4396: PPUSH
4397: CALL_OW 302
4401: IFFALSE 4417
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4403: LD_EXP 17
4407: PPUSH
4408: LD_STRING D3-Sci1-2
4410: PPUSH
4411: CALL_OW 88
4415: GO 4429
// Say ( tmp1 , D3-Sci1-2 ) ;
4417: LD_VAR 0 1
4421: PPUSH
4422: LD_STRING D3-Sci1-2
4424: PPUSH
4425: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4429: LD_EXP 1
4433: PPUSH
4434: LD_STRING D3-JMM-2
4436: PPUSH
4437: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4441: LD_EXP 17
4445: PPUSH
4446: CALL_OW 302
4450: IFFALSE 4466
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4452: LD_EXP 17
4456: PPUSH
4457: LD_STRING D3-Sci1-3
4459: PPUSH
4460: CALL_OW 88
4464: GO 4478
// Say ( tmp1 , D3-Sci1-3 ) ;
4466: LD_VAR 0 1
4470: PPUSH
4471: LD_STRING D3-Sci1-3
4473: PPUSH
4474: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4478: LD_EXP 1
4482: PPUSH
4483: LD_STRING D3-JMM-3
4485: PPUSH
4486: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4490: LD_EXP 17
4494: PPUSH
4495: CALL_OW 302
4499: IFFALSE 4515
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4501: LD_EXP 17
4505: PPUSH
4506: LD_STRING D3-Sci1-4
4508: PPUSH
4509: CALL_OW 88
4513: GO 4527
// Say ( tmp1 , D3-Sci1-4 ) ;
4515: LD_VAR 0 1
4519: PPUSH
4520: LD_STRING D3-Sci1-4
4522: PPUSH
4523: CALL_OW 88
// DialogueOff ;
4527: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4531: LD_INT 12
4533: PPUSH
4534: LD_INT 1
4536: PPUSH
4537: LD_INT 1
4539: PPUSH
4540: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4544: LD_INT 32
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4557: LD_INT 12
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_INT 1
4565: PPUSH
4566: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4570: LD_STRING M2
4572: PPUSH
4573: CALL_OW 337
// wait ( 5 5$0 ) ;
4577: LD_INT 10500
4579: PPUSH
4580: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4584: LD_EXP 11
4588: PPUSH
4589: CALL_OW 302
4593: PUSH
4594: LD_EXP 12
4598: PPUSH
4599: CALL_OW 302
4603: AND
4604: IFFALSE 4771
// begin DialogueOn ;
4606: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4610: LD_EXP 11
4614: PPUSH
4615: LD_STRING D3a-Sim-1
4617: PPUSH
4618: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4622: LD_EXP 12
4626: PPUSH
4627: LD_STRING D3a-Sci1-1
4629: PPUSH
4630: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4634: LD_EXP 11
4638: PPUSH
4639: LD_STRING D3a-Sim-2
4641: PPUSH
4642: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4646: LD_EXP 12
4650: PPUSH
4651: LD_STRING D3a-Sci1-2
4653: PPUSH
4654: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4658: LD_EXP 11
4662: PPUSH
4663: LD_STRING D3a-Sim-3
4665: PPUSH
4666: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4670: LD_EXP 12
4674: PPUSH
4675: LD_STRING D3a-Sci1-3
4677: PPUSH
4678: CALL_OW 88
// if IsOK ( Joan ) then
4682: LD_EXP 13
4686: PPUSH
4687: CALL_OW 302
4691: IFFALSE 4707
// Say ( Simms , D3a-Sim-4 ) else
4693: LD_EXP 11
4697: PPUSH
4698: LD_STRING D3a-Sim-4
4700: PPUSH
4701: CALL_OW 88
4705: GO 4719
// Say ( Simms , D3a-Sim-4a ) ;
4707: LD_EXP 11
4711: PPUSH
4712: LD_STRING D3a-Sim-4a
4714: PPUSH
4715: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4719: LD_EXP 12
4723: PPUSH
4724: LD_STRING D3a-Sci1-4
4726: PPUSH
4727: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4731: LD_EXP 11
4735: PPUSH
4736: LD_STRING D3a-Sim-5
4738: PPUSH
4739: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4743: LD_EXP 12
4747: PPUSH
4748: LD_STRING D3a-Sci1-5
4750: PPUSH
4751: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4755: LD_EXP 11
4759: PPUSH
4760: LD_STRING D3a-Sim-6
4762: PPUSH
4763: CALL_OW 88
// DialogueOff ;
4767: CALL_OW 7
// end ; wait ( 3 3$0 ) ;
4771: LD_INT 6300
4773: PPUSH
4774: CALL_OW 67
// DialogueOn ;
4778: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
4782: LD_INT 22
4784: PUSH
4785: LD_INT 2
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 25
4794: PUSH
4795: LD_INT 4
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: LD_INT 26
4804: PUSH
4805: LD_INT 1
4807: PUSH
4808: EMPTY
4809: LIST
4810: LIST
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: LIST
4816: PPUSH
4817: CALL_OW 69
4821: PPUSH
4822: LD_STRING D5-Ar1-1
4824: PPUSH
4825: LD_STRING D5-Ar1-1
4827: PPUSH
4828: CALL 7067 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
4832: LD_EXP 25
4836: PPUSH
4837: LD_STRING D5-Diet-1
4839: PPUSH
4840: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
4844: LD_INT 22
4846: PUSH
4847: LD_INT 2
4849: PUSH
4850: EMPTY
4851: LIST
4852: LIST
4853: PUSH
4854: LD_INT 25
4856: PUSH
4857: LD_INT 4
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 26
4866: PUSH
4867: LD_INT 1
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: LIST
4878: PPUSH
4879: CALL_OW 69
4883: PPUSH
4884: LD_STRING D5-Ar1-2
4886: PPUSH
4887: LD_STRING D5-Ar1-2
4889: PPUSH
4890: CALL 7067 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
4894: LD_EXP 25
4898: PPUSH
4899: LD_STRING D5-Diet-2
4901: PPUSH
4902: CALL_OW 88
// DialogueOff ;
4906: CALL_OW 7
// end ;
4910: PPOPN 2
4912: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4913: LD_EXP 27
4917: PUSH
4918: LD_INT 1
4920: EQUAL
4921: IFFALSE 5241
4923: GO 4925
4925: DISABLE
4926: LD_INT 0
4928: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4929: LD_EXP 18
4933: PPUSH
4934: LD_STRING D4-FSol1-1
4936: PPUSH
4937: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4941: LD_STRING M3
4943: PPUSH
4944: CALL_OW 337
// PrepareRussians ;
4948: CALL 2580 0 0
// rnd = Rand ( 1 , 100 ) ;
4952: LD_ADDR_VAR 0 1
4956: PUSH
4957: LD_INT 1
4959: PPUSH
4960: LD_INT 100
4962: PPUSH
4963: CALL_OW 12
4967: ST_TO_ADDR
// if difficulty = 1 then
4968: LD_OWVAR 67
4972: PUSH
4973: LD_INT 1
4975: EQUAL
4976: IFFALSE 5059
// begin if rnd > 0 and rnd < 51 then
4978: LD_VAR 0 1
4982: PUSH
4983: LD_INT 0
4985: GREATER
4986: PUSH
4987: LD_VAR 0 1
4991: PUSH
4992: LD_INT 51
4994: LESS
4995: AND
4996: IFFALSE 5005
// BuildRussianBase ( 2 ) ;
4998: LD_INT 2
5000: PPUSH
5001: CALL 7594 0 1
// if rnd > 50 and rnd < 81 then
5005: LD_VAR 0 1
5009: PUSH
5010: LD_INT 50
5012: GREATER
5013: PUSH
5014: LD_VAR 0 1
5018: PUSH
5019: LD_INT 81
5021: LESS
5022: AND
5023: IFFALSE 5032
// BuildRussianBase ( 1 ) ;
5025: LD_INT 1
5027: PPUSH
5028: CALL 7594 0 1
// if rnd > 80 and rnd < 101 then
5032: LD_VAR 0 1
5036: PUSH
5037: LD_INT 80
5039: GREATER
5040: PUSH
5041: LD_VAR 0 1
5045: PUSH
5046: LD_INT 101
5048: LESS
5049: AND
5050: IFFALSE 5059
// BuildRussianBase ( 3 ) ;
5052: LD_INT 3
5054: PPUSH
5055: CALL 7594 0 1
// end ; if difficulty = 2 then
5059: LD_OWVAR 67
5063: PUSH
5064: LD_INT 2
5066: EQUAL
5067: IFFALSE 5150
// begin if rnd > 0 and rnd < 61 then
5069: LD_VAR 0 1
5073: PUSH
5074: LD_INT 0
5076: GREATER
5077: PUSH
5078: LD_VAR 0 1
5082: PUSH
5083: LD_INT 61
5085: LESS
5086: AND
5087: IFFALSE 5096
// BuildRussianBase ( 2 ) ;
5089: LD_INT 2
5091: PPUSH
5092: CALL 7594 0 1
// if rnd > 60 and rnd < 81 then
5096: LD_VAR 0 1
5100: PUSH
5101: LD_INT 60
5103: GREATER
5104: PUSH
5105: LD_VAR 0 1
5109: PUSH
5110: LD_INT 81
5112: LESS
5113: AND
5114: IFFALSE 5123
// BuildRussianBase ( 1 ) ;
5116: LD_INT 1
5118: PPUSH
5119: CALL 7594 0 1
// if rnd > 80 and rnd < 101 then
5123: LD_VAR 0 1
5127: PUSH
5128: LD_INT 80
5130: GREATER
5131: PUSH
5132: LD_VAR 0 1
5136: PUSH
5137: LD_INT 101
5139: LESS
5140: AND
5141: IFFALSE 5150
// BuildRussianBase ( 3 ) ;
5143: LD_INT 3
5145: PPUSH
5146: CALL 7594 0 1
// end ; if difficulty = 3 then
5150: LD_OWVAR 67
5154: PUSH
5155: LD_INT 3
5157: EQUAL
5158: IFFALSE 5241
// begin if rnd > 0 and rnd < 71 then
5160: LD_VAR 0 1
5164: PUSH
5165: LD_INT 0
5167: GREATER
5168: PUSH
5169: LD_VAR 0 1
5173: PUSH
5174: LD_INT 71
5176: LESS
5177: AND
5178: IFFALSE 5187
// BuildRussianBase ( 3 ) ;
5180: LD_INT 3
5182: PPUSH
5183: CALL 7594 0 1
// if rnd > 70 and rnd < 81 then
5187: LD_VAR 0 1
5191: PUSH
5192: LD_INT 70
5194: GREATER
5195: PUSH
5196: LD_VAR 0 1
5200: PUSH
5201: LD_INT 81
5203: LESS
5204: AND
5205: IFFALSE 5214
// BuildRussianBase ( 2 ) ;
5207: LD_INT 2
5209: PPUSH
5210: CALL 7594 0 1
// if rnd > 80 and rnd < 101 then
5214: LD_VAR 0 1
5218: PUSH
5219: LD_INT 80
5221: GREATER
5222: PUSH
5223: LD_VAR 0 1
5227: PUSH
5228: LD_INT 101
5230: LESS
5231: AND
5232: IFFALSE 5241
// BuildRussianBase ( 1 ) ;
5234: LD_INT 1
5236: PPUSH
5237: CALL 7594 0 1
// end ; end ;
5241: PPOPN 1
5243: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5244: LD_INT 54
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: CALL_OW 321
5254: PUSH
5255: LD_INT 2
5257: EQUAL
5258: PUSH
5259: LD_INT 21
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: CALL_OW 321
5269: PUSH
5270: LD_INT 2
5272: EQUAL
5273: OR
5274: PUSH
5275: LD_INT 22
5277: PPUSH
5278: LD_INT 1
5280: PPUSH
5281: CALL_OW 321
5285: PUSH
5286: LD_INT 2
5288: EQUAL
5289: OR
5290: IFFALSE 6132
5292: GO 5294
5294: DISABLE
5295: LD_INT 0
5297: PPUSH
5298: PPUSH
// begin if IsOk ( Denis ) then
5299: LD_EXP 12
5303: PPUSH
5304: CALL_OW 302
5308: IFFALSE 5402
// begin DialogueOn ;
5310: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5314: LD_EXP 1
5318: PPUSH
5319: LD_STRING D6-JMM-1
5321: PPUSH
5322: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5326: LD_EXP 12
5330: PPUSH
5331: LD_STRING D6-Sci1-1
5333: PPUSH
5334: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5338: LD_EXP 1
5342: PPUSH
5343: LD_STRING D6-JMM-2
5345: PPUSH
5346: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5350: LD_EXP 12
5354: PPUSH
5355: LD_STRING D6-Sci1-2
5357: PPUSH
5358: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5362: LD_EXP 1
5366: PPUSH
5367: LD_STRING D6-JMM-3
5369: PPUSH
5370: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5374: LD_EXP 12
5378: PPUSH
5379: LD_STRING D6-Sci1-3
5381: PPUSH
5382: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5386: LD_EXP 1
5390: PPUSH
5391: LD_STRING D6-JMM-4
5393: PPUSH
5394: CALL_OW 88
// DialogueOff ;
5398: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5402: LD_INT 2100
5404: PUSH
5405: LD_INT 3150
5407: PUSH
5408: LD_INT 4200
5410: PUSH
5411: LD_INT 5250
5413: PUSH
5414: EMPTY
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: PUSH
5420: LD_INT 1
5422: PPUSH
5423: LD_INT 4
5425: PPUSH
5426: CALL_OW 12
5430: ARRAY
5431: PPUSH
5432: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5436: LD_ADDR_VAR 0 1
5440: PUSH
5441: LD_INT 22
5443: PUSH
5444: LD_INT 2
5446: PUSH
5447: EMPTY
5448: LIST
5449: LIST
5450: PUSH
5451: LD_INT 25
5453: PUSH
5454: LD_INT 4
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 69
5469: PUSH
5470: FOR_IN
5471: IFFALSE 5484
// ComExitBuilding ( i ) ;
5473: LD_VAR 0 1
5477: PPUSH
5478: CALL_OW 122
5482: GO 5470
5484: POP
5485: POP
// wait ( 0 0$1 ) ;
5486: LD_INT 35
5488: PPUSH
5489: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5493: LD_INT 76
5495: PPUSH
5496: LD_INT 19
5498: PPUSH
5499: CALL_OW 84
// DialogueOn ;
5503: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5507: LD_INT 22
5509: PUSH
5510: LD_INT 1
5512: PUSH
5513: EMPTY
5514: LIST
5515: LIST
5516: PUSH
5517: LD_INT 26
5519: PUSH
5520: LD_INT 1
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PUSH
5531: LD_EXP 1
5535: PUSH
5536: EMPTY
5537: LIST
5538: DIFF
5539: PPUSH
5540: CALL_OW 69
5544: PPUSH
5545: LD_STRING D8-Sol1-1
5547: PPUSH
5548: LD_STRING D8-Sol1-1
5550: PPUSH
5551: CALL 7067 0 3
// if IsOK ( DeltaDoctor ) then
5555: LD_EXP 17
5559: PPUSH
5560: CALL_OW 302
5564: IFFALSE 5580
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5566: LD_EXP 17
5570: PPUSH
5571: LD_STRING D8-Sci1-1
5573: PPUSH
5574: CALL_OW 88
5578: GO 5679
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PUSH
5590: LD_INT 26
5592: PUSH
5593: LD_INT 1
5595: PUSH
5596: EMPTY
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 2
5602: PUSH
5603: LD_INT 25
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 25
5615: PUSH
5616: LD_INT 2
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: LD_INT 25
5625: PUSH
5626: LD_INT 3
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 25
5635: PUSH
5636: LD_INT 4
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: EMPTY
5644: LIST
5645: LIST
5646: LIST
5647: LIST
5648: LIST
5649: PUSH
5650: EMPTY
5651: LIST
5652: LIST
5653: LIST
5654: PUSH
5655: LD_EXP 1
5659: PUSH
5660: EMPTY
5661: LIST
5662: DIFF
5663: PPUSH
5664: CALL_OW 69
5668: PPUSH
5669: LD_STRING D8-Sol1-1
5671: PPUSH
5672: LD_STRING D8-Sol1-1
5674: PPUSH
5675: CALL 7067 0 3
// Say ( JMM , D8-JMM-1 ) ;
5679: LD_EXP 1
5683: PPUSH
5684: LD_STRING D8-JMM-1
5686: PPUSH
5687: CALL_OW 88
// DialogueOff ;
5691: CALL_OW 7
// ArabianTrait ;
5695: CALL 6135 0 0
// wait ( 0 0$30 ) ;
5699: LD_INT 1050
5701: PPUSH
5702: CALL_OW 67
// if IsOk ( Gary ) then
5706: LD_EXP 10
5710: PPUSH
5711: CALL_OW 302
5715: IFFALSE 5729
// Say ( Gary , D8a-Gary-1 ) ;
5717: LD_EXP 10
5721: PPUSH
5722: LD_STRING D8a-Gary-1
5724: PPUSH
5725: CALL_OW 88
// wait ( 0 0$5 ) ;
5729: LD_INT 175
5731: PPUSH
5732: CALL_OW 67
// if IsOK ( Khatam ) then
5736: LD_EXP 14
5740: PPUSH
5741: CALL_OW 302
5745: IFFALSE 6132
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) [ 1 ] ;
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: LD_INT 22
5754: PUSH
5755: LD_INT 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 26
5764: PUSH
5765: LD_INT 1
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 2
5774: PUSH
5775: LD_INT 25
5777: PUSH
5778: LD_INT 1
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: LD_INT 25
5787: PUSH
5788: LD_INT 2
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: LD_INT 25
5797: PUSH
5798: LD_INT 3
5800: PUSH
5801: EMPTY
5802: LIST
5803: LIST
5804: PUSH
5805: LD_INT 25
5807: PUSH
5808: LD_INT 4
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: PPUSH
5827: CALL_OW 69
5831: PUSH
5832: LD_INT 1
5834: ARRAY
5835: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
5836: LD_EXP 14
5840: PPUSH
5841: LD_INT 8
5843: PPUSH
5844: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
5848: LD_EXP 14
5852: PPUSH
5853: CALL_OW 122
// wait ( 0 0$1 ) ;
5857: LD_INT 35
5859: PPUSH
5860: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
5864: LD_EXP 14
5868: PPUSH
5869: CALL_OW 121
// wait ( 0 0$1 ) ;
5873: LD_INT 35
5875: PPUSH
5876: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
5880: LD_EXP 14
5884: PPUSH
5885: LD_INT 7
5887: PPUSH
5888: CALL_OW 113
// DialogueOn ;
5892: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-1 , D8b-FSol1-1 ) ;
5896: LD_INT 22
5898: PUSH
5899: LD_INT 1
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: EMPTY
5907: LIST
5908: PUSH
5909: LD_EXP 1
5913: PUSH
5914: LD_EXP 14
5918: PUSH
5919: LD_EXP 13
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: LIST
5928: DIFF
5929: PPUSH
5930: CALL_OW 69
5934: PPUSH
5935: LD_STRING D8b-Sol1-1
5937: PPUSH
5938: LD_STRING D8b-FSol1-1
5940: PPUSH
5941: CALL 7067 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
5945: LD_EXP 14
5949: PPUSH
5950: LD_STRING D8b-Khat-1
5952: PPUSH
5953: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-2 , D8b-FSol1-2 ) ;
5957: LD_INT 22
5959: PUSH
5960: LD_INT 1
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: EMPTY
5968: LIST
5969: PUSH
5970: LD_EXP 1
5974: PUSH
5975: LD_EXP 14
5979: PUSH
5980: LD_EXP 13
5984: PUSH
5985: EMPTY
5986: LIST
5987: LIST
5988: LIST
5989: DIFF
5990: PPUSH
5991: CALL_OW 69
5995: PPUSH
5996: LD_STRING D8b-Sol1-2
5998: PPUSH
5999: LD_STRING D8b-FSol1-2
6001: PPUSH
6002: CALL 7067 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
6006: LD_EXP 14
6010: PPUSH
6011: LD_STRING D8b-Khat-2
6013: PPUSH
6014: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-3 , D8b-FSol1-3 ) ;
6018: LD_INT 22
6020: PUSH
6021: LD_INT 1
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: PUSH
6028: EMPTY
6029: LIST
6030: PUSH
6031: LD_EXP 1
6035: PUSH
6036: LD_EXP 14
6040: PUSH
6041: LD_EXP 13
6045: PUSH
6046: EMPTY
6047: LIST
6048: LIST
6049: LIST
6050: DIFF
6051: PPUSH
6052: CALL_OW 69
6056: PPUSH
6057: LD_STRING D8b-Sol1-3
6059: PPUSH
6060: LD_STRING D8b-FSol1-3
6062: PPUSH
6063: CALL 7067 0 3
// Say ( Khatam , D8b-Khat-3 ) ;
6067: LD_EXP 14
6071: PPUSH
6072: LD_STRING D8b-Khat-3
6074: PPUSH
6075: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-4 , D8b-FSol1-4 ) ;
6079: LD_INT 22
6081: PUSH
6082: LD_INT 1
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: PUSH
6092: LD_EXP 1
6096: PUSH
6097: LD_EXP 14
6101: PUSH
6102: LD_EXP 13
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: LIST
6111: DIFF
6112: PPUSH
6113: CALL_OW 69
6117: PPUSH
6118: LD_STRING D8b-Sol1-4
6120: PPUSH
6121: LD_STRING D8b-FSol1-4
6123: PPUSH
6124: CALL 7067 0 3
// DialogueOff ;
6128: CALL_OW 7
// end ; end ;
6132: PPOPN 2
6134: END
// export function ArabianTrait ; var i ; begin
6135: LD_INT 0
6137: PPUSH
6138: PPUSH
// ChangeSideFog ( 2 , 2 ) ;
6139: LD_INT 2
6141: PPUSH
6142: LD_INT 2
6144: PPUSH
6145: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
6149: LD_INT 1
6151: PPUSH
6152: LD_INT 2
6154: PPUSH
6155: LD_INT 2
6157: PPUSH
6158: LD_INT 1
6160: PPUSH
6161: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6165: LD_INT 3
6167: PPUSH
6168: LD_INT 2
6170: PPUSH
6171: LD_INT 1
6173: PPUSH
6174: LD_INT 1
6176: PPUSH
6177: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
6181: LD_ADDR_VAR 0 2
6185: PUSH
6186: LD_INT 22
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: LD_INT 21
6198: PUSH
6199: LD_INT 1
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PPUSH
6210: CALL_OW 69
6214: PUSH
6215: FOR_IN
6216: IFFALSE 6356
// begin ComExitBuilding ( i ) ;
6218: LD_VAR 0 2
6222: PPUSH
6223: CALL_OW 122
// wait ( 0 0$1 ) ;
6227: LD_INT 35
6229: PPUSH
6230: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
6234: LD_VAR 0 2
6238: PPUSH
6239: LD_INT 77
6241: PPUSH
6242: LD_INT 10
6244: PPUSH
6245: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
6249: LD_VAR 0 2
6253: PPUSH
6254: LD_INT 82
6256: PPUSH
6257: LD_INT 5
6259: PPUSH
6260: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
6264: LD_VAR 0 2
6268: PPUSH
6269: LD_INT 95
6271: PPUSH
6272: LD_INT 12
6274: PPUSH
6275: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
6279: LD_VAR 0 2
6283: PPUSH
6284: LD_INT 102
6286: PPUSH
6287: LD_INT 11
6289: PPUSH
6290: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
6294: LD_VAR 0 2
6298: PPUSH
6299: LD_INT 116
6301: PPUSH
6302: LD_INT 15
6304: PPUSH
6305: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
6309: LD_VAR 0 2
6313: PPUSH
6314: LD_INT 140
6316: PPUSH
6317: LD_INT 25
6319: PPUSH
6320: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
6324: LD_VAR 0 2
6328: PPUSH
6329: LD_INT 160
6331: PPUSH
6332: LD_INT 56
6334: PPUSH
6335: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6339: LD_VAR 0 2
6343: PPUSH
6344: LD_INT 189
6346: PPUSH
6347: LD_INT 79
6349: PPUSH
6350: CALL_OW 174
// end ;
6354: GO 6215
6356: POP
6357: POP
// arabianAttackersAI = 1 ;
6358: LD_ADDR_EXP 44
6362: PUSH
6363: LD_INT 1
6365: ST_TO_ADDR
// end ;
6366: LD_VAR 0 1
6370: RET
// every 0 0$1 do var i ;
6371: GO 6373
6373: DISABLE
6374: LD_INT 0
6376: PPUSH
// begin enable ;
6377: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6378: LD_ADDR_VAR 0 1
6382: PUSH
6383: LD_INT 7
6385: PPUSH
6386: LD_INT 22
6388: PUSH
6389: LD_INT 2
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: PPUSH
6396: CALL_OW 70
6400: PUSH
6401: FOR_IN
6402: IFFALSE 6433
// begin RemoveUnit ( i ) ;
6404: LD_VAR 0 1
6408: PPUSH
6409: CALL_OW 64
// arabianEscape = 1 ;
6413: LD_ADDR_EXP 45
6417: PUSH
6418: LD_INT 1
6420: ST_TO_ADDR
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6421: LD_INT 1
6423: PPUSH
6424: LD_STRING 10_ScientistsEscape_1
6426: PPUSH
6427: CALL_OW 39
// end ;
6431: GO 6401
6433: POP
6434: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6435: LD_EXP 14
6439: PPUSH
6440: LD_INT 7
6442: PPUSH
6443: CALL_OW 308
6447: IFFALSE 6466
// begin KhatamStatus = 1 ;
6449: LD_ADDR_EXP 46
6453: PUSH
6454: LD_INT 1
6456: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6457: LD_EXP 14
6461: PPUSH
6462: CALL_OW 64
// end ; if IsInArea ( Dietrich , ArabianSpawn2 ) then
6466: LD_EXP 25
6470: PPUSH
6471: LD_INT 7
6473: PPUSH
6474: CALL_OW 308
6478: IFFALSE 6490
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6480: LD_INT 1
6482: PPUSH
6483: LD_STRING 10_GensherEscape_1
6485: PPUSH
6486: CALL_OW 39
// end ;
6490: PPOPN 1
6492: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6493: LD_EXP 14
6497: PPUSH
6498: CALL_OW 301
6502: IFFALSE 6515
6504: GO 6506
6506: DISABLE
// KhatamStatus = 0 ;
6507: LD_ADDR_EXP 46
6511: PUSH
6512: LD_INT 0
6514: ST_TO_ADDR
6515: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6516: LD_EXP 27
6520: PUSH
6521: LD_INT 1
6523: EQUAL
6524: PUSH
6525: LD_STRING 02_mikhailStatus_1
6527: PPUSH
6528: LD_INT 0
6530: PPUSH
6531: CALL_OW 30
6535: PUSH
6536: LD_INT 1
6538: EQUAL
6539: AND
6540: IFFALSE 6549
6542: GO 6544
6544: DISABLE
// PrepareCornell ;
6545: CALL 2444 0 0
6549: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6550: LD_INT 1
6552: PPUSH
6553: LD_EXP 19
6557: PPUSH
6558: CALL_OW 292
6562: IFFALSE 6787
6564: GO 6566
6566: DISABLE
// begin InGameOn ;
6567: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6571: LD_EXP 19
6575: PPUSH
6576: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6580: LD_EXP 19
6584: PPUSH
6585: LD_STRING D7-Corn-1
6587: PPUSH
6588: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM , Joan ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
6592: LD_INT 22
6594: PUSH
6595: LD_INT 1
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: LD_INT 25
6607: PUSH
6608: LD_INT 1
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PUSH
6615: LD_INT 25
6617: PUSH
6618: LD_INT 2
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 25
6627: PUSH
6628: LD_INT 3
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 25
6637: PUSH
6638: LD_INT 4
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_EXP 1
6660: PUSH
6661: LD_EXP 13
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: DIFF
6670: PPUSH
6671: CALL_OW 69
6675: PPUSH
6676: LD_STRING D7-Sol1-1
6678: PPUSH
6679: LD_STRING D7-FSol1-1
6681: PPUSH
6682: CALL 7067 0 3
// CenterNowOnUnits ( Cornell ) ;
6686: LD_EXP 19
6690: PPUSH
6691: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
6695: LD_EXP 19
6699: PPUSH
6700: LD_STRING D7-Corn-2
6702: PPUSH
6703: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6707: LD_EXP 1
6711: PPUSH
6712: LD_STRING D7-JMM-2
6714: PPUSH
6715: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
6719: LD_EXP 19
6723: PPUSH
6724: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
6728: LD_EXP 19
6732: PPUSH
6733: LD_STRING D7-Corn-3
6735: PPUSH
6736: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
6740: LD_EXP 19
6744: PPUSH
6745: LD_INT 250
6747: PPUSH
6748: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
6752: LD_EXP 19
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 235
// wait ( 0 0$1 ) ;
6764: LD_INT 35
6766: PPUSH
6767: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
6771: LD_EXP 1
6775: PPUSH
6776: LD_STRING D7-JMM-3
6778: PPUSH
6779: CALL_OW 88
// InGameOff ;
6783: CALL_OW 9
// end ;
6787: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
6788: LD_EXP 19
6792: PPUSH
6793: CALL_OW 255
6797: PUSH
6798: LD_INT 1
6800: EQUAL
6801: PUSH
6802: LD_EXP 19
6806: PPUSH
6807: CALL_OW 256
6811: PUSH
6812: LD_INT 251
6814: GREATER
6815: AND
6816: IFFALSE 7009
6818: GO 6820
6820: DISABLE
// begin DialogueOn ;
6821: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
6825: LD_EXP 1
6829: PPUSH
6830: LD_STRING D7a-JMM-1
6832: PPUSH
6833: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
6837: LD_EXP 19
6841: PPUSH
6842: LD_STRING D7a-Corn-1
6844: PPUSH
6845: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
6849: LD_EXP 1
6853: PPUSH
6854: LD_STRING D7a-JMM-2
6856: PPUSH
6857: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
6861: LD_EXP 19
6865: PPUSH
6866: LD_STRING D7a-Corn-2
6868: PPUSH
6869: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
6873: LD_EXP 1
6877: PPUSH
6878: LD_STRING D7a-JMM-3
6880: PPUSH
6881: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
6885: LD_EXP 19
6889: PPUSH
6890: LD_STRING D7a-Corn-3
6892: PPUSH
6893: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
6897: LD_EXP 1
6901: PPUSH
6902: LD_STRING D7a-JMM-4
6904: PPUSH
6905: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
6909: LD_EXP 19
6913: PPUSH
6914: LD_STRING D7a-Corn-4
6916: PPUSH
6917: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
6921: LD_EXP 1
6925: PPUSH
6926: LD_STRING D7a-JMM-5
6928: PPUSH
6929: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
6933: LD_EXP 19
6937: PPUSH
6938: LD_STRING D7a-Corn-5
6940: PPUSH
6941: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
6945: LD_EXP 1
6949: PPUSH
6950: LD_STRING D7a-JMM-6
6952: PPUSH
6953: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
6957: LD_EXP 19
6961: PPUSH
6962: LD_STRING D7a-Corn-6
6964: PPUSH
6965: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
6969: LD_EXP 1
6973: PPUSH
6974: LD_STRING D7a-JMM-7
6976: PPUSH
6977: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
6981: LD_EXP 19
6985: PPUSH
6986: LD_STRING D7a-Corn-7
6988: PPUSH
6989: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
6993: LD_EXP 1
6997: PPUSH
6998: LD_STRING D7a-JMM-8
7000: PPUSH
7001: CALL_OW 88
// DialogueOff ;
7005: CALL_OW 7
// end ; end_of_file
7009: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7010: LD_INT 0
7012: PPUSH
7013: PPUSH
// if exist_mode then
7014: LD_VAR 0 2
7018: IFFALSE 7037
// unit := CreateCharacter ( ident ) else
7020: LD_ADDR_VAR 0 4
7024: PUSH
7025: LD_VAR 0 1
7029: PPUSH
7030: CALL_OW 34
7034: ST_TO_ADDR
7035: GO 7052
// unit := NewCharacter ( ident ) ;
7037: LD_ADDR_VAR 0 4
7041: PUSH
7042: LD_VAR 0 1
7046: PPUSH
7047: CALL_OW 25
7051: ST_TO_ADDR
// result := unit ;
7052: LD_ADDR_VAR 0 3
7056: PUSH
7057: LD_VAR 0 4
7061: ST_TO_ADDR
// end ;
7062: LD_VAR 0 3
7066: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7067: LD_INT 0
7069: PPUSH
7070: PPUSH
7071: PPUSH
// rnd = rand ( 1 , characters ) ;
7072: LD_ADDR_VAR 0 6
7076: PUSH
7077: LD_INT 1
7079: PPUSH
7080: LD_VAR 0 1
7084: PPUSH
7085: CALL_OW 12
7089: ST_TO_ADDR
// for i = 1 to characters do
7090: LD_ADDR_VAR 0 5
7094: PUSH
7095: DOUBLE
7096: LD_INT 1
7098: DEC
7099: ST_TO_ADDR
7100: LD_VAR 0 1
7104: PUSH
7105: FOR_TO
7106: IFFALSE 7216
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7108: LD_VAR 0 5
7112: PUSH
7113: LD_VAR 0 6
7117: EQUAL
7118: PUSH
7119: LD_VAR 0 1
7123: PUSH
7124: LD_VAR 0 5
7128: ARRAY
7129: PPUSH
7130: CALL_OW 258
7134: PUSH
7135: LD_INT 1
7137: EQUAL
7138: AND
7139: IFFALSE 7161
// Say ( characters [ i ] , dialogMID ) ;
7141: LD_VAR 0 1
7145: PUSH
7146: LD_VAR 0 5
7150: ARRAY
7151: PPUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7161: LD_VAR 0 5
7165: PUSH
7166: LD_VAR 0 6
7170: EQUAL
7171: PUSH
7172: LD_VAR 0 1
7176: PUSH
7177: LD_VAR 0 5
7181: ARRAY
7182: PPUSH
7183: CALL_OW 258
7187: PUSH
7188: LD_INT 2
7190: EQUAL
7191: AND
7192: IFFALSE 7214
// Say ( characters [ i ] , dialogFID ) ;
7194: LD_VAR 0 1
7198: PUSH
7199: LD_VAR 0 5
7203: ARRAY
7204: PPUSH
7205: LD_VAR 0 3
7209: PPUSH
7210: CALL_OW 88
// end ;
7214: GO 7105
7216: POP
7217: POP
// end ;
7218: LD_VAR 0 4
7222: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
// for i in charactersList do
7227: LD_ADDR_VAR 0 4
7231: PUSH
7232: LD_VAR 0 1
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7267
// begin if IsOk ( i ) then
7240: LD_VAR 0 4
7244: PPUSH
7245: CALL_OW 302
7249: IFFALSE 7265
// SaveCharacters ( i , ident ) ;
7251: LD_VAR 0 4
7255: PPUSH
7256: LD_VAR 0 2
7260: PPUSH
7261: CALL_OW 38
// end ;
7265: GO 7237
7267: POP
7268: POP
// end ;
7269: LD_VAR 0 3
7273: RET
// export function PrepareDifficulty ; begin
7274: LD_INT 0
7276: PPUSH
// if difficulty = 1 then
7277: LD_OWVAR 67
7281: PUSH
7282: LD_INT 1
7284: EQUAL
7285: IFFALSE 7329
// begin RuSolMinLevel = 4 ;
7287: LD_ADDR_EXP 34
7291: PUSH
7292: LD_INT 4
7294: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7295: LD_ADDR_EXP 35
7299: PUSH
7300: LD_INT 7
7302: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7303: LD_INT 51
7305: PPUSH
7306: LD_INT 6
7308: PPUSH
7309: LD_INT 2
7311: PPUSH
7312: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7316: LD_INT 51
7318: PPUSH
7319: LD_INT 5
7321: PPUSH
7322: LD_INT 2
7324: PPUSH
7325: CALL_OW 322
// end ; if difficulty = 2 then
7329: LD_OWVAR 67
7333: PUSH
7334: LD_INT 2
7336: EQUAL
7337: IFFALSE 7433
// begin RuSolMinLevel = 5 ;
7339: LD_ADDR_EXP 34
7343: PUSH
7344: LD_INT 5
7346: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7347: LD_ADDR_EXP 35
7351: PUSH
7352: LD_INT 7
7354: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7355: LD_INT 51
7357: PPUSH
7358: LD_INT 6
7360: PPUSH
7361: LD_INT 2
7363: PPUSH
7364: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7368: LD_INT 57
7370: PPUSH
7371: LD_INT 6
7373: PPUSH
7374: LD_INT 2
7376: PPUSH
7377: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7381: LD_INT 63
7383: PPUSH
7384: LD_INT 6
7386: PPUSH
7387: LD_INT 2
7389: PPUSH
7390: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7394: LD_INT 51
7396: PPUSH
7397: LD_INT 5
7399: PPUSH
7400: LD_INT 2
7402: PPUSH
7403: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7407: LD_INT 5
7409: PPUSH
7410: LD_INT 2
7412: PPUSH
7413: LD_INT 2
7415: PPUSH
7416: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7420: LD_INT 5
7422: PPUSH
7423: LD_INT 5
7425: PPUSH
7426: LD_INT 2
7428: PPUSH
7429: CALL_OW 322
// end ; if difficulty = 3 then
7433: LD_OWVAR 67
7437: PUSH
7438: LD_INT 3
7440: EQUAL
7441: IFFALSE 7589
// begin RuSolMinLevel = 6 ;
7443: LD_ADDR_EXP 34
7447: PUSH
7448: LD_INT 6
7450: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7451: LD_ADDR_EXP 35
7455: PUSH
7456: LD_INT 8
7458: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7459: LD_INT 51
7461: PPUSH
7462: LD_INT 6
7464: PPUSH
7465: LD_INT 2
7467: PPUSH
7468: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7472: LD_INT 57
7474: PPUSH
7475: LD_INT 6
7477: PPUSH
7478: LD_INT 2
7480: PPUSH
7481: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7485: LD_INT 52
7487: PPUSH
7488: LD_INT 6
7490: PPUSH
7491: LD_INT 2
7493: PPUSH
7494: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7498: LD_INT 58
7500: PPUSH
7501: LD_INT 6
7503: PPUSH
7504: LD_INT 2
7506: PPUSH
7507: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7511: LD_INT 63
7513: PPUSH
7514: LD_INT 6
7516: PPUSH
7517: LD_INT 2
7519: PPUSH
7520: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7524: LD_INT 64
7526: PPUSH
7527: LD_INT 6
7529: PPUSH
7530: LD_INT 2
7532: PPUSH
7533: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7537: LD_INT 51
7539: PPUSH
7540: LD_INT 5
7542: PPUSH
7543: LD_INT 2
7545: PPUSH
7546: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7550: LD_INT 52
7552: PPUSH
7553: LD_INT 5
7555: PPUSH
7556: LD_INT 2
7558: PPUSH
7559: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7563: LD_INT 66
7565: PPUSH
7566: LD_INT 2
7568: PPUSH
7569: LD_INT 2
7571: PPUSH
7572: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7576: LD_INT 66
7578: PPUSH
7579: LD_INT 5
7581: PPUSH
7582: LD_INT 2
7584: PPUSH
7585: CALL_OW 322
// end ; end ;
7589: LD_VAR 0 1
7593: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
7598: PPUSH
7599: PPUSH
// ruPossition = position ;
7600: LD_ADDR_EXP 39
7604: PUSH
7605: LD_VAR 0 1
7609: ST_TO_ADDR
// if position = 1 then
7610: LD_VAR 0 1
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 8394
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7620: LD_ADDR_VAR 0 4
7624: PUSH
7625: LD_INT 22
7627: PUSH
7628: LD_INT 3
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_INT 25
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: EMPTY
7646: LIST
7647: LIST
7648: PPUSH
7649: CALL_OW 69
7653: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
7654: LD_ADDR_VAR 0 5
7658: PUSH
7659: LD_INT 0
7661: PUSH
7662: LD_INT 49
7664: PUSH
7665: LD_INT 74
7667: PUSH
7668: LD_INT 3
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 4
7679: PUSH
7680: LD_INT 73
7682: PUSH
7683: LD_INT 88
7685: PUSH
7686: LD_INT 5
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 56
7700: PUSH
7701: LD_INT 62
7703: PUSH
7704: LD_INT 3
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 29
7715: PUSH
7716: LD_INT 43
7718: PUSH
7719: LD_INT 68
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 30
7733: PUSH
7734: LD_INT 43
7736: PUSH
7737: LD_INT 79
7739: PUSH
7740: LD_INT 5
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: PUSH
7749: LD_INT 28
7751: PUSH
7752: LD_INT 60
7754: PUSH
7755: LD_INT 75
7757: PUSH
7758: LD_INT 1
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 50
7772: PUSH
7773: LD_INT 87
7775: PUSH
7776: LD_INT 1
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: LIST
7783: LIST
7784: PUSH
7785: LD_INT 28
7787: PUSH
7788: LD_INT 45
7790: PUSH
7791: LD_INT 67
7793: PUSH
7794: LD_INT 2
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 17
7805: PUSH
7806: LD_INT 47
7808: PUSH
7809: LD_INT 84
7811: PUSH
7812: LD_INT 2
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: PUSH
7821: LD_INT 18
7823: PUSH
7824: LD_INT 46
7826: PUSH
7827: LD_INT 87
7829: PUSH
7830: LD_INT 1
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: LD_INT 28
7841: PUSH
7842: LD_INT 41
7844: PUSH
7845: LD_INT 64
7847: PUSH
7848: LD_INT 5
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: PUSH
7857: LD_INT 32
7859: PUSH
7860: LD_INT 75
7862: PUSH
7863: LD_INT 76
7865: PUSH
7866: LD_INT 5
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: LIST
7873: LIST
7874: PUSH
7875: LD_INT 32
7877: PUSH
7878: LD_INT 77
7880: PUSH
7881: LD_INT 75
7883: PUSH
7884: LD_INT 5
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: LD_INT 32
7895: PUSH
7896: LD_INT 69
7898: PUSH
7899: LD_INT 68
7901: PUSH
7902: LD_INT 3
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: LIST
7909: LIST
7910: PUSH
7911: LD_INT 32
7913: PUSH
7914: LD_INT 59
7916: PUSH
7917: LD_INT 96
7919: PUSH
7920: LD_INT 5
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 32
7931: PUSH
7932: LD_INT 56
7934: PUSH
7935: LD_INT 96
7937: PUSH
7938: LD_INT 0
7940: PUSH
7941: EMPTY
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 32
7949: PUSH
7950: LD_INT 51
7952: PUSH
7953: LD_INT 61
7955: PUSH
7956: LD_INT 3
7958: PUSH
7959: EMPTY
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 32
7967: PUSH
7968: LD_INT 42
7970: PUSH
7971: LD_INT 60
7973: PUSH
7974: LD_INT 3
7976: PUSH
7977: EMPTY
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: PUSH
7983: LD_INT 32
7985: PUSH
7986: LD_INT 36
7988: PUSH
7989: LD_INT 58
7991: PUSH
7992: LD_INT 3
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: PUSH
8001: LD_INT 32
8003: PUSH
8004: LD_INT 39
8006: PUSH
8007: LD_INT 59
8009: PUSH
8010: LD_INT 3
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 32
8021: PUSH
8022: LD_INT 61
8024: PUSH
8025: LD_INT 64
8027: PUSH
8028: LD_INT 3
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 33
8039: PUSH
8040: LD_INT 63
8042: PUSH
8043: LD_INT 90
8045: PUSH
8046: LD_INT 5
8048: PUSH
8049: EMPTY
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_INT 33
8057: PUSH
8058: LD_INT 64
8060: PUSH
8061: LD_INT 88
8063: PUSH
8064: LD_INT 5
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: PUSH
8073: LD_INT 33
8075: PUSH
8076: LD_INT 72
8078: PUSH
8079: LD_INT 82
8081: PUSH
8082: LD_INT 5
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 6
8093: PUSH
8094: LD_INT 42
8096: PUSH
8097: LD_INT 74
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 6
8111: PUSH
8112: LD_INT 56
8114: PUSH
8115: LD_INT 77
8117: PUSH
8118: LD_INT 2
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 21
8129: PUSH
8130: LD_INT 54
8132: PUSH
8133: LD_INT 91
8135: PUSH
8136: LD_INT 5
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 16
8147: PUSH
8148: LD_INT 50
8150: PUSH
8151: LD_INT 83
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 24
8165: PUSH
8166: LD_INT 50
8168: PUSH
8169: LD_INT 90
8171: PUSH
8172: LD_INT 0
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: LIST
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8212: LD_ADDR_VAR 0 3
8216: PUSH
8217: LD_INT 22
8219: PUSH
8220: LD_INT 3
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 3
8229: PUSH
8230: LD_INT 25
8232: PUSH
8233: LD_INT 2
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PPUSH
8248: CALL_OW 69
8252: PUSH
8253: FOR_IN
8254: IFFALSE 8301
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
8256: LD_VAR 0 3
8260: PPUSH
8261: LD_VAR 0 5
8265: PUSH
8266: LD_INT 2
8268: ARRAY
8269: PUSH
8270: LD_INT 2
8272: ARRAY
8273: PUSH
8274: LD_INT 3
8276: PLUS
8277: PPUSH
8278: LD_VAR 0 5
8282: PUSH
8283: LD_INT 2
8285: ARRAY
8286: PUSH
8287: LD_INT 3
8289: ARRAY
8290: PUSH
8291: LD_INT 2
8293: PLUS
8294: PPUSH
8295: CALL_OW 171
8299: GO 8253
8301: POP
8302: POP
// for i := 1 to buildingsTab do
8303: LD_ADDR_VAR 0 3
8307: PUSH
8308: DOUBLE
8309: LD_INT 1
8311: DEC
8312: ST_TO_ADDR
8313: LD_VAR 0 5
8317: PUSH
8318: FOR_TO
8319: IFFALSE 8392
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8321: LD_VAR 0 4
8325: PPUSH
8326: LD_VAR 0 5
8330: PUSH
8331: LD_VAR 0 3
8335: ARRAY
8336: PUSH
8337: LD_INT 1
8339: ARRAY
8340: PPUSH
8341: LD_VAR 0 5
8345: PUSH
8346: LD_VAR 0 3
8350: ARRAY
8351: PUSH
8352: LD_INT 2
8354: ARRAY
8355: PPUSH
8356: LD_VAR 0 5
8360: PUSH
8361: LD_VAR 0 3
8365: ARRAY
8366: PUSH
8367: LD_INT 3
8369: ARRAY
8370: PPUSH
8371: LD_VAR 0 5
8375: PUSH
8376: LD_VAR 0 3
8380: ARRAY
8381: PUSH
8382: LD_INT 4
8384: ARRAY
8385: PPUSH
8386: CALL_OW 205
8390: GO 8318
8392: POP
8393: POP
// end ; if position = 2 then
8394: LD_VAR 0 1
8398: PUSH
8399: LD_INT 2
8401: EQUAL
8402: IFFALSE 9045
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8404: LD_ADDR_VAR 0 4
8408: PUSH
8409: LD_INT 22
8411: PUSH
8412: LD_INT 3
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_INT 25
8421: PUSH
8422: LD_INT 2
8424: PUSH
8425: EMPTY
8426: LIST
8427: LIST
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: PPUSH
8433: CALL_OW 69
8437: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8438: LD_ADDR_VAR 0 5
8442: PUSH
8443: LD_INT 0
8445: PUSH
8446: LD_INT 104
8448: PUSH
8449: LD_INT 110
8451: PUSH
8452: LD_INT 5
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 4
8463: PUSH
8464: LD_INT 98
8466: PUSH
8467: LD_INT 90
8469: PUSH
8470: LD_INT 3
8472: PUSH
8473: EMPTY
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 29
8481: PUSH
8482: LD_INT 103
8484: PUSH
8485: LD_INT 114
8487: PUSH
8488: LD_INT 2
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: LD_INT 30
8499: PUSH
8500: LD_INT 99
8502: PUSH
8503: LD_INT 114
8505: PUSH
8506: LD_INT 3
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: PUSH
8515: LD_INT 28
8517: PUSH
8518: LD_INT 100
8520: PUSH
8521: LD_INT 112
8523: PUSH
8524: LD_INT 1
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: LD_INT 92
8538: PUSH
8539: LD_INT 101
8541: PUSH
8542: LD_INT 0
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: PUSH
8551: LD_INT 28
8553: PUSH
8554: LD_INT 97
8556: PUSH
8557: LD_INT 116
8559: PUSH
8560: LD_INT 5
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: LIST
8567: LIST
8568: PUSH
8569: LD_INT 17
8571: PUSH
8572: LD_INT 96
8574: PUSH
8575: LD_INT 101
8577: PUSH
8578: LD_INT 4
8580: PUSH
8581: EMPTY
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: PUSH
8587: LD_INT 18
8589: PUSH
8590: LD_INT 88
8592: PUSH
8593: LD_INT 97
8595: PUSH
8596: LD_INT 2
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: PUSH
8605: LD_INT 28
8607: PUSH
8608: LD_INT 106
8610: PUSH
8611: LD_INT 92
8613: PUSH
8614: LD_INT 2
8616: PUSH
8617: EMPTY
8618: LIST
8619: LIST
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 32
8625: PUSH
8626: LD_INT 88
8628: PUSH
8629: LD_INT 89
8631: PUSH
8632: LD_INT 2
8634: PUSH
8635: EMPTY
8636: LIST
8637: LIST
8638: LIST
8639: LIST
8640: PUSH
8641: LD_INT 32
8643: PUSH
8644: LD_INT 86
8646: PUSH
8647: LD_INT 90
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: PUSH
8659: LD_INT 32
8661: PUSH
8662: LD_INT 85
8664: PUSH
8665: LD_INT 99
8667: PUSH
8668: LD_INT 2
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 32
8679: PUSH
8680: LD_INT 85
8682: PUSH
8683: LD_INT 107
8685: PUSH
8686: LD_INT 1
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 33
8697: PUSH
8698: LD_INT 105
8700: PUSH
8701: LD_INT 99
8703: PUSH
8704: LD_INT 1
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: PUSH
8713: LD_INT 33
8715: PUSH
8716: LD_INT 102
8718: PUSH
8719: LD_INT 92
8721: PUSH
8722: LD_INT 3
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: PUSH
8731: LD_INT 33
8733: PUSH
8734: LD_INT 105
8736: PUSH
8737: LD_INT 92
8739: PUSH
8740: LD_INT 2
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: LIST
8747: LIST
8748: PUSH
8749: LD_INT 6
8751: PUSH
8752: LD_INT 92
8754: PUSH
8755: LD_INT 110
8757: PUSH
8758: LD_INT 0
8760: PUSH
8761: EMPTY
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: PUSH
8767: LD_INT 6
8769: PUSH
8770: LD_INT 103
8772: PUSH
8773: LD_INT 103
8775: PUSH
8776: LD_INT 5
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 21
8787: PUSH
8788: LD_INT 89
8790: PUSH
8791: LD_INT 101
8793: PUSH
8794: LD_INT 1
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 16
8805: PUSH
8806: LD_INT 95
8808: PUSH
8809: LD_INT 104
8811: PUSH
8812: LD_INT 4
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 24
8823: PUSH
8824: LD_INT 92
8826: PUSH
8827: LD_INT 105
8829: PUSH
8830: LD_INT 0
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8863: LD_ADDR_VAR 0 3
8867: PUSH
8868: LD_INT 22
8870: PUSH
8871: LD_INT 3
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 3
8880: PUSH
8881: LD_INT 25
8883: PUSH
8884: LD_INT 2
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PPUSH
8899: CALL_OW 69
8903: PUSH
8904: FOR_IN
8905: IFFALSE 8952
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
8907: LD_VAR 0 3
8911: PPUSH
8912: LD_VAR 0 5
8916: PUSH
8917: LD_INT 2
8919: ARRAY
8920: PUSH
8921: LD_INT 2
8923: ARRAY
8924: PUSH
8925: LD_INT 2
8927: PLUS
8928: PPUSH
8929: LD_VAR 0 5
8933: PUSH
8934: LD_INT 2
8936: ARRAY
8937: PUSH
8938: LD_INT 3
8940: ARRAY
8941: PUSH
8942: LD_INT 1
8944: PLUS
8945: PPUSH
8946: CALL_OW 171
8950: GO 8904
8952: POP
8953: POP
// for i := 1 to buildingsTab do
8954: LD_ADDR_VAR 0 3
8958: PUSH
8959: DOUBLE
8960: LD_INT 1
8962: DEC
8963: ST_TO_ADDR
8964: LD_VAR 0 5
8968: PUSH
8969: FOR_TO
8970: IFFALSE 9043
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8972: LD_VAR 0 4
8976: PPUSH
8977: LD_VAR 0 5
8981: PUSH
8982: LD_VAR 0 3
8986: ARRAY
8987: PUSH
8988: LD_INT 1
8990: ARRAY
8991: PPUSH
8992: LD_VAR 0 5
8996: PUSH
8997: LD_VAR 0 3
9001: ARRAY
9002: PUSH
9003: LD_INT 2
9005: ARRAY
9006: PPUSH
9007: LD_VAR 0 5
9011: PUSH
9012: LD_VAR 0 3
9016: ARRAY
9017: PUSH
9018: LD_INT 3
9020: ARRAY
9021: PPUSH
9022: LD_VAR 0 5
9026: PUSH
9027: LD_VAR 0 3
9031: ARRAY
9032: PUSH
9033: LD_INT 4
9035: ARRAY
9036: PPUSH
9037: CALL_OW 205
9041: GO 8969
9043: POP
9044: POP
// end ; if position = 3 then
9045: LD_VAR 0 1
9049: PUSH
9050: LD_INT 3
9052: EQUAL
9053: IFFALSE 9867
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9055: LD_ADDR_VAR 0 4
9059: PUSH
9060: LD_INT 22
9062: PUSH
9063: LD_INT 3
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PUSH
9070: LD_INT 25
9072: PUSH
9073: LD_INT 2
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: PPUSH
9084: CALL_OW 69
9088: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9089: LD_ADDR_VAR 0 5
9093: PUSH
9094: LD_INT 0
9096: PUSH
9097: LD_INT 151
9099: PUSH
9100: LD_INT 71
9102: PUSH
9103: LD_INT 4
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 4
9114: PUSH
9115: LD_INT 145
9117: PUSH
9118: LD_INT 53
9120: PUSH
9121: LD_INT 3
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 4
9132: PUSH
9133: LD_INT 172
9135: PUSH
9136: LD_INT 102
9138: PUSH
9139: LD_INT 5
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 29
9150: PUSH
9151: LD_INT 152
9153: PUSH
9154: LD_INT 85
9156: PUSH
9157: LD_INT 3
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: LD_INT 30
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: LD_INT 3
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 28
9186: PUSH
9187: LD_INT 151
9189: PUSH
9190: LD_INT 66
9192: PUSH
9193: LD_INT 4
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: PUSH
9202: LD_INT 2
9204: PUSH
9205: LD_INT 163
9207: PUSH
9208: LD_INT 95
9210: PUSH
9211: LD_INT 5
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 28
9222: PUSH
9223: LD_INT 149
9225: PUSH
9226: LD_INT 63
9228: PUSH
9229: LD_INT 4
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: LD_INT 167
9243: PUSH
9244: LD_INT 99
9246: PUSH
9247: LD_INT 5
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 18
9258: PUSH
9259: LD_INT 163
9261: PUSH
9262: LD_INT 98
9264: PUSH
9265: LD_INT 0
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: PUSH
9274: LD_INT 28
9276: PUSH
9277: LD_INT 154
9279: PUSH
9280: LD_INT 70
9282: PUSH
9283: LD_INT 4
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 32
9294: PUSH
9295: LD_INT 155
9297: PUSH
9298: LD_INT 62
9300: PUSH
9301: LD_INT 4
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 32
9312: PUSH
9313: LD_INT 161
9315: PUSH
9316: LD_INT 69
9318: PUSH
9319: LD_INT 4
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 32
9330: PUSH
9331: LD_INT 168
9333: PUSH
9334: LD_INT 78
9336: PUSH
9337: LD_INT 4
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_INT 32
9348: PUSH
9349: LD_INT 163
9351: PUSH
9352: LD_INT 80
9354: PUSH
9355: LD_INT 5
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: LD_INT 32
9366: PUSH
9367: LD_INT 136
9369: PUSH
9370: LD_INT 73
9372: PUSH
9373: LD_INT 0
9375: PUSH
9376: EMPTY
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 32
9384: PUSH
9385: LD_INT 157
9387: PUSH
9388: LD_INT 98
9390: PUSH
9391: LD_INT 0
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: PUSH
9400: LD_INT 32
9402: PUSH
9403: LD_INT 150
9405: PUSH
9406: LD_INT 87
9408: PUSH
9409: LD_INT 1
9411: PUSH
9412: EMPTY
9413: LIST
9414: LIST
9415: LIST
9416: LIST
9417: PUSH
9418: LD_INT 33
9420: PUSH
9421: LD_INT 171
9423: PUSH
9424: LD_INT 97
9426: PUSH
9427: LD_INT 4
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: PUSH
9436: LD_INT 33
9438: PUSH
9439: LD_INT 168
9441: PUSH
9442: LD_INT 92
9444: PUSH
9445: LD_INT 4
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 33
9456: PUSH
9457: LD_INT 166
9459: PUSH
9460: LD_INT 80
9462: PUSH
9463: LD_INT 5
9465: PUSH
9466: EMPTY
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: PUSH
9472: LD_INT 33
9474: PUSH
9475: LD_INT 141
9477: PUSH
9478: LD_INT 54
9480: PUSH
9481: LD_INT 2
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: PUSH
9490: LD_INT 33
9492: PUSH
9493: LD_INT 133
9495: PUSH
9496: LD_INT 57
9498: PUSH
9499: LD_INT 2
9501: PUSH
9502: EMPTY
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 33
9510: PUSH
9511: LD_INT 132
9513: PUSH
9514: LD_INT 61
9516: PUSH
9517: LD_INT 2
9519: PUSH
9520: EMPTY
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: PUSH
9526: LD_INT 33
9528: PUSH
9529: LD_INT 150
9531: PUSH
9532: LD_INT 82
9534: PUSH
9535: LD_INT 0
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: LIST
9542: LIST
9543: PUSH
9544: LD_INT 33
9546: PUSH
9547: LD_INT 132
9549: PUSH
9550: LD_INT 72
9552: PUSH
9553: LD_INT 0
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 6
9564: PUSH
9565: LD_INT 146
9567: PUSH
9568: LD_INT 64
9570: PUSH
9571: LD_INT 4
9573: PUSH
9574: EMPTY
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: PUSH
9580: LD_INT 6
9582: PUSH
9583: LD_INT 159
9585: PUSH
9586: LD_INT 85
9588: PUSH
9589: LD_INT 4
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 21
9600: PUSH
9601: LD_INT 163
9603: PUSH
9604: LD_INT 91
9606: PUSH
9607: LD_INT 3
9609: PUSH
9610: EMPTY
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: LD_INT 16
9618: PUSH
9619: LD_INT 166
9621: PUSH
9622: LD_INT 95
9624: PUSH
9625: LD_INT 4
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 24
9636: PUSH
9637: LD_INT 159
9639: PUSH
9640: LD_INT 95
9642: PUSH
9643: LD_INT 1
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9685: LD_ADDR_VAR 0 3
9689: PUSH
9690: LD_INT 22
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 3
9702: PUSH
9703: LD_INT 25
9705: PUSH
9706: LD_INT 2
9708: PUSH
9709: EMPTY
9710: LIST
9711: LIST
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PPUSH
9721: CALL_OW 69
9725: PUSH
9726: FOR_IN
9727: IFFALSE 9774
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
9729: LD_VAR 0 3
9733: PPUSH
9734: LD_VAR 0 5
9738: PUSH
9739: LD_INT 2
9741: ARRAY
9742: PUSH
9743: LD_INT 2
9745: ARRAY
9746: PUSH
9747: LD_INT 2
9749: PLUS
9750: PPUSH
9751: LD_VAR 0 5
9755: PUSH
9756: LD_INT 2
9758: ARRAY
9759: PUSH
9760: LD_INT 3
9762: ARRAY
9763: PUSH
9764: LD_INT 3
9766: PLUS
9767: PPUSH
9768: CALL_OW 171
9772: GO 9726
9774: POP
9775: POP
// for i := 1 to buildingsTab do
9776: LD_ADDR_VAR 0 3
9780: PUSH
9781: DOUBLE
9782: LD_INT 1
9784: DEC
9785: ST_TO_ADDR
9786: LD_VAR 0 5
9790: PUSH
9791: FOR_TO
9792: IFFALSE 9865
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9794: LD_VAR 0 4
9798: PPUSH
9799: LD_VAR 0 5
9803: PUSH
9804: LD_VAR 0 3
9808: ARRAY
9809: PUSH
9810: LD_INT 1
9812: ARRAY
9813: PPUSH
9814: LD_VAR 0 5
9818: PUSH
9819: LD_VAR 0 3
9823: ARRAY
9824: PUSH
9825: LD_INT 2
9827: ARRAY
9828: PPUSH
9829: LD_VAR 0 5
9833: PUSH
9834: LD_VAR 0 3
9838: ARRAY
9839: PUSH
9840: LD_INT 3
9842: ARRAY
9843: PPUSH
9844: LD_VAR 0 5
9848: PUSH
9849: LD_VAR 0 3
9853: ARRAY
9854: PUSH
9855: LD_INT 4
9857: ARRAY
9858: PPUSH
9859: CALL_OW 205
9863: GO 9791
9865: POP
9866: POP
// end ; end ;
9867: LD_VAR 0 2
9871: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
9872: LD_INT 0
9874: PPUSH
9875: PPUSH
9876: PPUSH
9877: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
9878: LD_ADDR_VAR 0 3
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: LD_INT 2
9888: PUSH
9889: EMPTY
9890: LIST
9891: LIST
9892: PUSH
9893: LD_INT 25
9895: PUSH
9896: LD_INT 2
9898: PUSH
9899: EMPTY
9900: LIST
9901: LIST
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PPUSH
9907: CALL_OW 69
9911: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
9912: LD_VAR 0 3
9916: PPUSH
9917: LD_INT 0
9919: PPUSH
9920: LD_INT 71
9922: PPUSH
9923: LD_INT 15
9925: PPUSH
9926: LD_INT 3
9928: PPUSH
9929: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
9933: LD_ADDR_VAR 0 4
9937: PUSH
9938: LD_INT 6
9940: PUSH
9941: LD_INT 77
9943: PUSH
9944: LD_INT 18
9946: PUSH
9947: LD_INT 3
9949: PUSH
9950: EMPTY
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 4
9958: PUSH
9959: LD_INT 77
9961: PUSH
9962: LD_INT 26
9964: PUSH
9965: LD_INT 0
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 31
9976: PUSH
9977: LD_INT 82
9979: PUSH
9980: LD_INT 28
9982: PUSH
9983: LD_INT 0
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 31
9994: PUSH
9995: LD_INT 84
9997: PUSH
9998: LD_INT 21
10000: PUSH
10001: LD_INT 3
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: LD_INT 31
10012: PUSH
10013: LD_INT 66
10015: PUSH
10016: LD_INT 14
10018: PUSH
10019: LD_INT 2
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: PUSH
10028: LD_INT 27
10030: PUSH
10031: LD_INT 67
10033: PUSH
10034: LD_INT 18
10036: PUSH
10037: LD_INT 5
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 27
10048: PUSH
10049: LD_INT 69
10051: PUSH
10052: LD_INT 23
10054: PUSH
10055: LD_INT 2
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: ST_TO_ADDR
// for i := 1 to buildingsTab do
10073: LD_ADDR_VAR 0 2
10077: PUSH
10078: DOUBLE
10079: LD_INT 1
10081: DEC
10082: ST_TO_ADDR
10083: LD_VAR 0 4
10087: PUSH
10088: FOR_TO
10089: IFFALSE 10162
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10091: LD_VAR 0 3
10095: PPUSH
10096: LD_VAR 0 4
10100: PUSH
10101: LD_VAR 0 2
10105: ARRAY
10106: PUSH
10107: LD_INT 1
10109: ARRAY
10110: PPUSH
10111: LD_VAR 0 4
10115: PUSH
10116: LD_VAR 0 2
10120: ARRAY
10121: PUSH
10122: LD_INT 2
10124: ARRAY
10125: PPUSH
10126: LD_VAR 0 4
10130: PUSH
10131: LD_VAR 0 2
10135: ARRAY
10136: PUSH
10137: LD_INT 3
10139: ARRAY
10140: PPUSH
10141: LD_VAR 0 4
10145: PUSH
10146: LD_VAR 0 2
10150: ARRAY
10151: PUSH
10152: LD_INT 4
10154: ARRAY
10155: PPUSH
10156: CALL_OW 205
10160: GO 10088
10162: POP
10163: POP
// end ;
10164: LD_VAR 0 1
10168: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10169: LD_INT 0
10171: PPUSH
10172: PPUSH
10173: PPUSH
10174: PPUSH
10175: PPUSH
10176: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10177: LD_ADDR_VAR 0 7
10181: PUSH
10182: LD_INT 22
10184: PUSH
10185: LD_VAR 0 1
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 25
10196: PUSH
10197: LD_INT 9
10199: PUSH
10200: EMPTY
10201: LIST
10202: LIST
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 69
10212: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10213: LD_ADDR_VAR 0 8
10217: PUSH
10218: LD_INT 22
10220: PUSH
10221: LD_VAR 0 2
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: PUSH
10230: LD_INT 3
10232: PUSH
10233: LD_INT 21
10235: PUSH
10236: LD_INT 3
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PPUSH
10251: CALL_OW 69
10255: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10256: LD_ADDR_VAR 0 5
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_INT 3
10266: PPUSH
10267: CALL_OW 12
10271: ST_TO_ADDR
// for i = 1 to list do
10272: LD_ADDR_VAR 0 6
10276: PUSH
10277: DOUBLE
10278: LD_INT 1
10280: DEC
10281: ST_TO_ADDR
10282: LD_VAR 0 7
10286: PUSH
10287: FOR_TO
10288: IFFALSE 10470
// for ta in filter do
10290: LD_ADDR_VAR 0 4
10294: PUSH
10295: LD_VAR 0 8
10299: PUSH
10300: FOR_IN
10301: IFFALSE 10466
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
10303: LD_VAR 0 7
10307: PUSH
10308: LD_VAR 0 6
10312: ARRAY
10313: PPUSH
10314: LD_VAR 0 4
10318: PPUSH
10319: CALL_OW 296
10323: PUSH
10324: LD_INT 13
10326: LESSEQUAL
10327: IFFALSE 10464
// begin case c of 1 :
10329: LD_VAR 0 5
10333: PUSH
10334: LD_INT 1
10336: DOUBLE
10337: EQUAL
10338: IFTRUE 10342
10340: GO 10380
10342: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
10343: LD_VAR 0 7
10347: PUSH
10348: LD_VAR 0 6
10352: ARRAY
10353: PPUSH
10354: LD_VAR 0 4
10358: PPUSH
10359: CALL_OW 250
10363: PPUSH
10364: LD_VAR 0 4
10368: PPUSH
10369: CALL_OW 251
10373: PPUSH
10374: CALL_OW 154
10378: GO 10464
10380: LD_INT 2
10382: DOUBLE
10383: EQUAL
10384: IFTRUE 10388
10386: GO 10452
10388: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
10389: LD_VAR 0 7
10393: PUSH
10394: LD_VAR 0 6
10398: ARRAY
10399: PPUSH
10400: LD_VAR 0 4
10404: PPUSH
10405: CALL_OW 250
10409: PUSH
10410: LD_INT 1
10412: NEG
10413: PPUSH
10414: LD_INT 1
10416: PPUSH
10417: CALL_OW 12
10421: PLUS
10422: PPUSH
10423: LD_VAR 0 4
10427: PPUSH
10428: CALL_OW 251
10432: PUSH
10433: LD_INT 1
10435: NEG
10436: PPUSH
10437: LD_INT 1
10439: PPUSH
10440: CALL_OW 12
10444: PLUS
10445: PPUSH
10446: CALL_OW 153
10450: GO 10464
10452: LD_INT 3
10454: DOUBLE
10455: EQUAL
10456: IFTRUE 10460
10458: GO 10463
10460: POP
// ; end ;
10461: GO 10464
10463: POP
// end ; end ;
10464: GO 10300
10466: POP
10467: POP
10468: GO 10287
10470: POP
10471: POP
// end ;
10472: LD_VAR 0 3
10476: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
10477: LD_INT 0
10479: PPUSH
10480: PPUSH
10481: PPUSH
10482: PPUSH
// for i = 1 to 72 do
10483: LD_ADDR_VAR 0 5
10487: PUSH
10488: DOUBLE
10489: LD_INT 1
10491: DEC
10492: ST_TO_ADDR
10493: LD_INT 72
10495: PUSH
10496: FOR_TO
10497: IFFALSE 10555
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
10499: LD_VAR 0 5
10503: PPUSH
10504: LD_VAR 0 1
10508: PPUSH
10509: CALL_OW 321
10513: PUSH
10514: LD_INT 1
10516: EQUAL
10517: PUSH
10518: LD_VAR 0 5
10522: PPUSH
10523: LD_VAR 0 3
10527: PPUSH
10528: CALL_OW 482
10532: PUSH
10533: LD_INT 1
10535: EQUAL
10536: AND
10537: IFFALSE 10553
// AddComResearch ( lab , i ) ;
10539: LD_VAR 0 2
10543: PPUSH
10544: LD_VAR 0 5
10548: PPUSH
10549: CALL_OW 184
10553: GO 10496
10555: POP
10556: POP
// end ;
10557: LD_VAR 0 4
10561: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
10562: LD_INT 0
10564: PPUSH
10565: PPUSH
10566: PPUSH
10567: PPUSH
10568: PPUSH
10569: PPUSH
10570: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
10571: LD_ADDR_VAR 0 6
10575: PUSH
10576: LD_INT 22
10578: PUSH
10579: LD_VAR 0 1
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 56
10590: PUSH
10591: EMPTY
10592: LIST
10593: PUSH
10594: LD_INT 24
10596: PUSH
10597: LD_INT 700
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 2
10606: PUSH
10607: LD_INT 25
10609: PUSH
10610: LD_INT 1
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 25
10619: PUSH
10620: LD_INT 9
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PPUSH
10638: CALL_OW 69
10642: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
10643: LD_ADDR_VAR 0 7
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_VAR 0 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 30
10662: PUSH
10663: LD_INT 32
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 58
10672: PUSH
10673: EMPTY
10674: LIST
10675: PUSH
10676: LD_INT 24
10678: PUSH
10679: LD_INT 251
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
10697: LD_ADDR_VAR 0 9
10701: PUSH
10702: LD_INT 22
10704: PUSH
10705: LD_VAR 0 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 2
10716: PUSH
10717: LD_INT 30
10719: PUSH
10720: LD_INT 4
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 30
10729: PUSH
10730: LD_INT 5
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: EMPTY
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 24
10744: PUSH
10745: LD_INT 251
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: EMPTY
10753: LIST
10754: LIST
10755: LIST
10756: PPUSH
10757: CALL_OW 69
10761: ST_TO_ADDR
// if barrackList > 0 then
10762: LD_VAR 0 9
10766: PUSH
10767: LD_INT 0
10769: GREATER
10770: IFFALSE 10859
// begin if turretList = 0 then
10772: LD_VAR 0 7
10776: PUSH
10777: LD_INT 0
10779: EQUAL
10780: IFFALSE 10819
// begin for i in soldiers_list do
10782: LD_ADDR_VAR 0 4
10786: PUSH
10787: LD_VAR 0 6
10791: PUSH
10792: FOR_IN
10793: IFFALSE 10815
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
10795: LD_VAR 0 4
10799: PPUSH
10800: LD_VAR 0 9
10804: PUSH
10805: LD_INT 1
10807: ARRAY
10808: PPUSH
10809: CALL_OW 120
10813: GO 10792
10815: POP
10816: POP
// end else
10817: GO 10859
// begin for i in barrackList do
10819: LD_ADDR_VAR 0 4
10823: PUSH
10824: LD_VAR 0 9
10828: PUSH
10829: FOR_IN
10830: IFFALSE 10857
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
10832: LD_VAR 0 4
10836: PPUSH
10837: CALL_OW 313
10841: PPUSH
10842: LD_VAR 0 7
10846: PUSH
10847: LD_INT 1
10849: ARRAY
10850: PPUSH
10851: CALL_OW 120
// end ;
10855: GO 10829
10857: POP
10858: POP
// end ; end ; end ;
10859: LD_VAR 0 3
10863: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
10864: LD_INT 0
10866: PPUSH
10867: PPUSH
10868: PPUSH
10869: PPUSH
10870: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
10871: LD_ADDR_VAR 0 6
10875: PUSH
10876: LD_INT 22
10878: PUSH
10879: LD_VAR 0 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 25
10893: PUSH
10894: LD_INT 2
10896: PUSH
10897: EMPTY
10898: LIST
10899: LIST
10900: PUSH
10901: LD_INT 25
10903: PUSH
10904: LD_INT 16
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 24
10918: PUSH
10919: LD_INT 1000
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: EMPTY
10927: LIST
10928: LIST
10929: LIST
10930: PPUSH
10931: CALL_OW 69
10935: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10936: LD_ADDR_VAR 0 4
10940: PUSH
10941: LD_INT 22
10943: PUSH
10944: LD_VAR 0 1
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 21
10955: PUSH
10956: LD_INT 3
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 3
10965: PUSH
10966: LD_INT 24
10968: PUSH
10969: LD_INT 1000
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: PUSH
10976: EMPTY
10977: LIST
10978: LIST
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: LIST
10984: PUSH
10985: EMPTY
10986: LIST
10987: PPUSH
10988: CALL_OW 69
10992: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
10993: LD_VAR 0 4
10997: PUSH
10998: LD_INT 0
11000: GREATER
11001: PUSH
11002: LD_VAR 0 6
11006: PUSH
11007: LD_INT 0
11009: GREATER
11010: AND
11011: IFFALSE 11077
// begin for i in engineerOk_list do
11013: LD_ADDR_VAR 0 5
11017: PUSH
11018: LD_VAR 0 6
11022: PUSH
11023: FOR_IN
11024: IFFALSE 11075
// begin for j in buildings_list do
11026: LD_ADDR_VAR 0 7
11030: PUSH
11031: LD_VAR 0 4
11035: PUSH
11036: FOR_IN
11037: IFFALSE 11071
// begin AddComExitBuilding ( i ) ;
11039: LD_VAR 0 5
11043: PPUSH
11044: CALL_OW 182
// wait ( 0 0$1 ) ;
11048: LD_INT 35
11050: PPUSH
11051: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
11055: LD_VAR 0 5
11059: PPUSH
11060: LD_VAR 0 7
11064: PPUSH
11065: CALL_OW 190
// end ;
11069: GO 11036
11071: POP
11072: POP
// end ;
11073: GO 11023
11075: POP
11076: POP
// end ; if buildings_list = 0 then
11077: LD_VAR 0 4
11081: PUSH
11082: LD_INT 0
11084: EQUAL
11085: IFFALSE 11118
// begin for i in engineerOK_list do
11087: LD_ADDR_VAR 0 5
11091: PUSH
11092: LD_VAR 0 6
11096: PUSH
11097: FOR_IN
11098: IFFALSE 11116
// ComEnterUnit ( i , building ) ;
11100: LD_VAR 0 5
11104: PPUSH
11105: LD_VAR 0 2
11109: PPUSH
11110: CALL_OW 120
11114: GO 11097
11116: POP
11117: POP
// end ; end ;
11118: LD_VAR 0 3
11122: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
11123: LD_INT 0
11125: PPUSH
11126: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
11127: LD_INT 22
11129: PUSH
11130: LD_VAR 0 1
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: PUSH
11139: LD_INT 25
11141: PUSH
11142: LD_INT 2
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: PPUSH
11153: CALL_OW 69
11157: PUSH
11158: LD_INT 0
11160: GREATER
11161: PUSH
11162: LD_INT 22
11164: PUSH
11165: LD_VAR 0 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 21
11176: PUSH
11177: LD_INT 3
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 3
11186: PUSH
11187: LD_INT 24
11189: PUSH
11190: LD_INT 1000
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: LIST
11205: PPUSH
11206: CALL_OW 69
11210: PUSH
11211: LD_INT 0
11213: EQUAL
11214: AND
11215: PUSH
11216: LD_VAR 0 2
11220: PUSH
11221: LD_INT 0
11223: GREATER
11224: AND
11225: IFFALSE 11324
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
11227: LD_ADDR_VAR 0 4
11231: PUSH
11232: LD_INT 22
11234: PUSH
11235: LD_VAR 0 1
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PUSH
11244: LD_INT 25
11246: PUSH
11247: LD_INT 2
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PPUSH
11258: CALL_OW 69
11262: PUSH
11263: FOR_IN
11264: IFFALSE 11322
// begin AddComExitBuilding ( i ) ;
11266: LD_VAR 0 4
11270: PPUSH
11271: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11275: LD_VAR 0 4
11279: PPUSH
11280: LD_VAR 0 2
11284: PUSH
11285: LD_INT 1
11287: ARRAY
11288: PPUSH
11289: LD_VAR 0 2
11293: PUSH
11294: LD_INT 2
11296: ARRAY
11297: PPUSH
11298: LD_VAR 0 2
11302: PUSH
11303: LD_INT 3
11305: ARRAY
11306: PPUSH
11307: LD_VAR 0 2
11311: PUSH
11312: LD_INT 4
11314: ARRAY
11315: PPUSH
11316: CALL_OW 205
// end ;
11320: GO 11263
11322: POP
11323: POP
// end ; end ;
11324: LD_VAR 0 3
11328: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
11329: LD_INT 0
11331: PPUSH
11332: PPUSH
11333: PPUSH
11334: PPUSH
11335: PPUSH
11336: PPUSH
11337: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11338: LD_ADDR_VAR 0 9
11342: PUSH
11343: LD_INT 22
11345: PUSH
11346: LD_VAR 0 1
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: PUSH
11355: LD_INT 24
11357: PUSH
11358: LD_INT 251
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 2
11367: PUSH
11368: LD_INT 30
11370: PUSH
11371: LD_INT 9
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 30
11380: PUSH
11381: LD_INT 7
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 30
11390: PUSH
11391: LD_INT 8
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: LIST
11408: PPUSH
11409: CALL_OW 69
11413: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
11414: LD_ADDR_VAR 0 7
11418: PUSH
11419: LD_VAR 0 3
11423: PPUSH
11424: LD_INT 22
11426: PUSH
11427: LD_VAR 0 1
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: PUSH
11436: LD_INT 25
11438: PUSH
11439: LD_INT 4
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 24
11448: PUSH
11449: LD_INT 251
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: PPUSH
11461: CALL_OW 70
11465: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11466: LD_ADDR_VAR 0 10
11470: PUSH
11471: LD_VAR 0 3
11475: PPUSH
11476: LD_INT 22
11478: PUSH
11479: LD_VAR 0 1
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 21
11490: PUSH
11491: LD_INT 1
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 3
11500: PUSH
11501: LD_INT 24
11503: PUSH
11504: LD_INT 750
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: LIST
11519: PPUSH
11520: CALL_OW 70
11524: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
11525: LD_VAR 0 9
11529: PUSH
11530: LD_INT 0
11532: GREATER
11533: PUSH
11534: LD_VAR 0 10
11538: PUSH
11539: LD_INT 0
11541: GREATER
11542: AND
11543: IFFALSE 11577
// for i in labs do
11545: LD_ADDR_VAR 0 5
11549: PUSH
11550: LD_VAR 0 9
11554: PUSH
11555: FOR_IN
11556: IFFALSE 11575
// scientisticsInside = UnitsInside ( i ) ;
11558: LD_ADDR_VAR 0 8
11562: PUSH
11563: LD_VAR 0 5
11567: PPUSH
11568: CALL_OW 313
11572: ST_TO_ADDR
11573: GO 11555
11575: POP
11576: POP
// if labs > 0 and damageUnits > 0 then
11577: LD_VAR 0 9
11581: PUSH
11582: LD_INT 0
11584: GREATER
11585: PUSH
11586: LD_VAR 0 10
11590: PUSH
11591: LD_INT 0
11593: GREATER
11594: AND
11595: IFFALSE 11623
// for i in scientisticsInside do
11597: LD_ADDR_VAR 0 5
11601: PUSH
11602: LD_VAR 0 8
11606: PUSH
11607: FOR_IN
11608: IFFALSE 11621
// ComExitBuilding ( i ) ;
11610: LD_VAR 0 5
11614: PPUSH
11615: CALL_OW 122
11619: GO 11607
11621: POP
11622: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
11623: LD_VAR 0 10
11627: PUSH
11628: LD_INT 0
11630: GREATER
11631: PUSH
11632: LD_VAR 0 7
11636: PUSH
11637: LD_INT 0
11639: GREATER
11640: AND
11641: IFFALSE 11707
// begin ComMoveToArea ( damageUnits , healArea ) ;
11643: LD_VAR 0 10
11647: PPUSH
11648: LD_VAR 0 2
11652: PPUSH
11653: CALL_OW 113
// for i in scientisticsOutside do
11657: LD_ADDR_VAR 0 5
11661: PUSH
11662: LD_VAR 0 7
11666: PUSH
11667: FOR_IN
11668: IFFALSE 11703
// for j in damageUnits do
11670: LD_ADDR_VAR 0 6
11674: PUSH
11675: LD_VAR 0 10
11679: PUSH
11680: FOR_IN
11681: IFFALSE 11699
// AddComHeal ( i , j ) ;
11683: LD_VAR 0 5
11687: PPUSH
11688: LD_VAR 0 6
11692: PPUSH
11693: CALL_OW 188
11697: GO 11680
11699: POP
11700: POP
11701: GO 11667
11703: POP
11704: POP
// end else
11705: GO 11735
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
11707: LD_VAR 0 7
11711: PPUSH
11712: LD_VAR 0 9
11716: PUSH
11717: LD_INT 1
11719: PPUSH
11720: LD_VAR 0 9
11724: PPUSH
11725: CALL_OW 12
11729: ARRAY
11730: PPUSH
11731: CALL_OW 120
// end ; end ;
11735: LD_VAR 0 4
11739: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
11740: LD_INT 0
11742: PPUSH
11743: PPUSH
11744: PPUSH
11745: PPUSH
11746: PPUSH
11747: PPUSH
11748: PPUSH
11749: PPUSH
11750: PPUSH
11751: PPUSH
11752: PPUSH
// amChassisTab = [ ] ;
11753: LD_ADDR_VAR 0 19
11757: PUSH
11758: EMPTY
11759: ST_TO_ADDR
// arChassisTab = [ ] ;
11760: LD_ADDR_VAR 0 18
11764: PUSH
11765: EMPTY
11766: ST_TO_ADDR
// ruChassisTab = [ ] ;
11767: LD_ADDR_VAR 0 17
11771: PUSH
11772: EMPTY
11773: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11774: LD_INT 35
11776: PPUSH
11777: CALL_OW 67
// if nation = 1 then
11781: LD_VAR 0 5
11785: PUSH
11786: LD_INT 1
11788: EQUAL
11789: IFFALSE 12294
// begin uc_side = side ;
11791: LD_ADDR_OWVAR 20
11795: PUSH
11796: LD_VAR 0 2
11800: ST_TO_ADDR
// uc_nation = nation ;
11801: LD_ADDR_OWVAR 21
11805: PUSH
11806: LD_VAR 0 5
11810: ST_TO_ADDR
// vc_engine = vehengine ;
11811: LD_ADDR_OWVAR 39
11815: PUSH
11816: LD_VAR 0 6
11820: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
11821: LD_ADDR_OWVAR 38
11825: PUSH
11826: LD_VAR 0 7
11830: PUSH
11831: LD_INT 1
11833: PPUSH
11834: LD_VAR 0 7
11838: PPUSH
11839: CALL_OW 12
11843: ARRAY
11844: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
11845: LD_ADDR_OWVAR 40
11849: PUSH
11850: LD_VAR 0 10
11854: PUSH
11855: LD_INT 1
11857: PPUSH
11858: LD_VAR 0 10
11862: PPUSH
11863: CALL_OW 12
11867: ARRAY
11868: ST_TO_ADDR
// for j = 1 to AMWeapon do
11869: LD_ADDR_VAR 0 14
11873: PUSH
11874: DOUBLE
11875: LD_INT 1
11877: DEC
11878: ST_TO_ADDR
11879: LD_VAR 0 10
11883: PUSH
11884: FOR_TO
11885: IFFALSE 12186
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
11887: LD_VAR 0 10
11891: PUSH
11892: LD_VAR 0 14
11896: ARRAY
11897: PUSH
11898: LD_INT 2
11900: EQUAL
11901: PUSH
11902: LD_VAR 0 10
11906: PUSH
11907: LD_VAR 0 14
11911: ARRAY
11912: PUSH
11913: LD_INT 3
11915: EQUAL
11916: OR
11917: IFFALSE 11970
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
11919: LD_ADDR_VAR 0 19
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: LD_INT 2
11929: PUSH
11930: LD_INT 3
11932: PUSH
11933: LD_INT 4
11935: PUSH
11936: LD_INT 5
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
11946: LD_ADDR_OWVAR 37
11950: PUSH
11951: LD_VAR 0 19
11955: PUSH
11956: LD_INT 1
11958: PPUSH
11959: LD_VAR 0 19
11963: PPUSH
11964: CALL_OW 12
11968: ARRAY
11969: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
11970: LD_VAR 0 10
11974: PUSH
11975: LD_VAR 0 14
11979: ARRAY
11980: PUSH
11981: LD_INT 4
11983: EQUAL
11984: PUSH
11985: LD_VAR 0 10
11989: PUSH
11990: LD_VAR 0 14
11994: ARRAY
11995: PUSH
11996: LD_INT 5
11998: EQUAL
11999: OR
12000: PUSH
12001: LD_VAR 0 10
12005: PUSH
12006: LD_VAR 0 14
12010: ARRAY
12011: PUSH
12012: LD_INT 9
12014: EQUAL
12015: OR
12016: PUSH
12017: LD_VAR 0 10
12021: PUSH
12022: LD_VAR 0 14
12026: ARRAY
12027: PUSH
12028: LD_INT 11
12030: EQUAL
12031: OR
12032: PUSH
12033: LD_VAR 0 10
12037: PUSH
12038: LD_VAR 0 14
12042: ARRAY
12043: PUSH
12044: LD_INT 7
12046: EQUAL
12047: OR
12048: IFFALSE 12097
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12050: LD_ADDR_VAR 0 19
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: LD_INT 3
12060: PUSH
12061: LD_INT 4
12063: PUSH
12064: LD_INT 5
12066: PUSH
12067: EMPTY
12068: LIST
12069: LIST
12070: LIST
12071: LIST
12072: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12073: LD_ADDR_OWVAR 37
12077: PUSH
12078: LD_VAR 0 19
12082: PUSH
12083: LD_INT 1
12085: PPUSH
12086: LD_VAR 0 19
12090: PPUSH
12091: CALL_OW 12
12095: ARRAY
12096: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12097: LD_VAR 0 10
12101: PUSH
12102: LD_VAR 0 14
12106: ARRAY
12107: PUSH
12108: LD_INT 8
12110: EQUAL
12111: PUSH
12112: LD_VAR 0 10
12116: PUSH
12117: LD_VAR 0 14
12121: ARRAY
12122: PUSH
12123: LD_INT 6
12125: EQUAL
12126: OR
12127: PUSH
12128: LD_VAR 0 10
12132: PUSH
12133: LD_VAR 0 14
12137: ARRAY
12138: PUSH
12139: LD_INT 10
12141: EQUAL
12142: OR
12143: IFFALSE 12184
// begin amChassisTab = [ 4 , 5 ] ;
12145: LD_ADDR_VAR 0 19
12149: PUSH
12150: LD_INT 4
12152: PUSH
12153: LD_INT 5
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12160: LD_ADDR_OWVAR 37
12164: PUSH
12165: LD_VAR 0 19
12169: PUSH
12170: LD_INT 1
12172: PPUSH
12173: LD_VAR 0 19
12177: PPUSH
12178: CALL_OW 12
12182: ARRAY
12183: ST_TO_ADDR
// end ; end ;
12184: GO 11884
12186: POP
12187: POP
// veh = CreateVehicle ;
12188: LD_ADDR_VAR 0 16
12192: PUSH
12193: CALL_OW 45
12197: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12198: LD_VAR 0 16
12202: PPUSH
12203: LD_VAR 0 1
12207: PPUSH
12208: LD_INT 0
12210: PPUSH
12211: CALL_OW 49
// if vc_control = 1 then
12215: LD_OWVAR 38
12219: PUSH
12220: LD_INT 1
12222: EQUAL
12223: IFFALSE 12280
// begin hc_gallery =  ;
12225: LD_ADDR_OWVAR 33
12229: PUSH
12230: LD_STRING 
12232: ST_TO_ADDR
// hc_name =  ;
12233: LD_ADDR_OWVAR 26
12237: PUSH
12238: LD_STRING 
12240: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12241: LD_INT 0
12243: PPUSH
12244: LD_INT 3
12246: PPUSH
12247: LD_VAR 0 4
12251: PPUSH
12252: CALL_OW 380
// un = CreateHuman ;
12256: LD_ADDR_VAR 0 15
12260: PUSH
12261: CALL_OW 44
12265: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12266: LD_VAR 0 15
12270: PPUSH
12271: LD_VAR 0 16
12275: PPUSH
12276: CALL_OW 52
// end ; i = i + 1 ;
12280: LD_ADDR_VAR 0 13
12284: PUSH
12285: LD_VAR 0 13
12289: PUSH
12290: LD_INT 1
12292: PLUS
12293: ST_TO_ADDR
// end ; if nation = 2 then
12294: LD_VAR 0 5
12298: PUSH
12299: LD_INT 2
12301: EQUAL
12302: IFFALSE 12740
// begin uc_side = side ;
12304: LD_ADDR_OWVAR 20
12308: PUSH
12309: LD_VAR 0 2
12313: ST_TO_ADDR
// uc_nation = nation ;
12314: LD_ADDR_OWVAR 21
12318: PUSH
12319: LD_VAR 0 5
12323: ST_TO_ADDR
// vc_engine = vehengine ;
12324: LD_ADDR_OWVAR 39
12328: PUSH
12329: LD_VAR 0 6
12333: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12334: LD_ADDR_OWVAR 38
12338: PUSH
12339: LD_VAR 0 7
12343: PUSH
12344: LD_INT 1
12346: PPUSH
12347: LD_VAR 0 7
12351: PPUSH
12352: CALL_OW 12
12356: ARRAY
12357: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12358: LD_ADDR_OWVAR 40
12362: PUSH
12363: LD_VAR 0 9
12367: PUSH
12368: LD_INT 1
12370: PPUSH
12371: LD_VAR 0 9
12375: PPUSH
12376: CALL_OW 12
12380: ARRAY
12381: ST_TO_ADDR
// for j = 1 to ARWeapons do
12382: LD_ADDR_VAR 0 14
12386: PUSH
12387: DOUBLE
12388: LD_INT 1
12390: DEC
12391: ST_TO_ADDR
12392: LD_VAR 0 9
12396: PUSH
12397: FOR_TO
12398: IFFALSE 12632
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12400: LD_VAR 0 9
12404: PUSH
12405: LD_VAR 0 14
12409: ARRAY
12410: PUSH
12411: LD_INT 24
12413: EQUAL
12414: PUSH
12415: LD_VAR 0 9
12419: PUSH
12420: LD_VAR 0 14
12424: ARRAY
12425: PUSH
12426: LD_INT 22
12428: EQUAL
12429: OR
12430: PUSH
12431: LD_VAR 0 9
12435: PUSH
12436: LD_VAR 0 14
12440: ARRAY
12441: PUSH
12442: LD_INT 23
12444: EQUAL
12445: OR
12446: PUSH
12447: LD_VAR 0 9
12451: PUSH
12452: LD_VAR 0 14
12456: ARRAY
12457: PUSH
12458: LD_INT 30
12460: EQUAL
12461: OR
12462: IFFALSE 12511
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
12464: LD_ADDR_VAR 0 18
12468: PUSH
12469: LD_INT 11
12471: PUSH
12472: LD_INT 12
12474: PUSH
12475: LD_INT 13
12477: PUSH
12478: LD_INT 14
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12487: LD_ADDR_OWVAR 37
12491: PUSH
12492: LD_VAR 0 18
12496: PUSH
12497: LD_INT 1
12499: PPUSH
12500: LD_VAR 0 18
12504: PPUSH
12505: CALL_OW 12
12509: ARRAY
12510: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
12511: LD_VAR 0 9
12515: PUSH
12516: LD_VAR 0 14
12520: ARRAY
12521: PUSH
12522: LD_INT 29
12524: EQUAL
12525: PUSH
12526: LD_VAR 0 9
12530: PUSH
12531: LD_VAR 0 14
12535: ARRAY
12536: PUSH
12537: LD_INT 28
12539: EQUAL
12540: OR
12541: PUSH
12542: LD_VAR 0 9
12546: PUSH
12547: LD_VAR 0 14
12551: ARRAY
12552: PUSH
12553: LD_INT 27
12555: EQUAL
12556: OR
12557: PUSH
12558: LD_VAR 0 9
12562: PUSH
12563: LD_VAR 0 14
12567: ARRAY
12568: PUSH
12569: LD_INT 26
12571: EQUAL
12572: OR
12573: PUSH
12574: LD_VAR 0 9
12578: PUSH
12579: LD_VAR 0 14
12583: ARRAY
12584: PUSH
12585: LD_INT 25
12587: EQUAL
12588: OR
12589: IFFALSE 12630
// begin arChassisTab = [ 13 , 14 ] ;
12591: LD_ADDR_VAR 0 18
12595: PUSH
12596: LD_INT 13
12598: PUSH
12599: LD_INT 14
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12606: LD_ADDR_OWVAR 37
12610: PUSH
12611: LD_VAR 0 18
12615: PUSH
12616: LD_INT 1
12618: PPUSH
12619: LD_VAR 0 18
12623: PPUSH
12624: CALL_OW 12
12628: ARRAY
12629: ST_TO_ADDR
// end ; end ;
12630: GO 12397
12632: POP
12633: POP
// veh = CreateVehicle ;
12634: LD_ADDR_VAR 0 16
12638: PUSH
12639: CALL_OW 45
12643: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12644: LD_VAR 0 16
12648: PPUSH
12649: LD_VAR 0 1
12653: PPUSH
12654: LD_INT 0
12656: PPUSH
12657: CALL_OW 49
// if vc_control = 1 then
12661: LD_OWVAR 38
12665: PUSH
12666: LD_INT 1
12668: EQUAL
12669: IFFALSE 12726
// begin hc_gallery =  ;
12671: LD_ADDR_OWVAR 33
12675: PUSH
12676: LD_STRING 
12678: ST_TO_ADDR
// hc_name =  ;
12679: LD_ADDR_OWVAR 26
12683: PUSH
12684: LD_STRING 
12686: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12687: LD_INT 0
12689: PPUSH
12690: LD_INT 3
12692: PPUSH
12693: LD_VAR 0 4
12697: PPUSH
12698: CALL_OW 380
// un = CreateHuman ;
12702: LD_ADDR_VAR 0 15
12706: PUSH
12707: CALL_OW 44
12711: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12712: LD_VAR 0 15
12716: PPUSH
12717: LD_VAR 0 16
12721: PPUSH
12722: CALL_OW 52
// end ; i = i + 1 ;
12726: LD_ADDR_VAR 0 13
12730: PUSH
12731: LD_VAR 0 13
12735: PUSH
12736: LD_INT 1
12738: PLUS
12739: ST_TO_ADDR
// end ; if nation = 3 then
12740: LD_VAR 0 5
12744: PUSH
12745: LD_INT 3
12747: EQUAL
12748: IFFALSE 13154
// begin uc_side = side ;
12750: LD_ADDR_OWVAR 20
12754: PUSH
12755: LD_VAR 0 2
12759: ST_TO_ADDR
// uc_nation = nation ;
12760: LD_ADDR_OWVAR 21
12764: PUSH
12765: LD_VAR 0 5
12769: ST_TO_ADDR
// vc_engine = vehengine ;
12770: LD_ADDR_OWVAR 39
12774: PUSH
12775: LD_VAR 0 6
12779: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12780: LD_ADDR_OWVAR 38
12784: PUSH
12785: LD_VAR 0 7
12789: PUSH
12790: LD_INT 1
12792: PPUSH
12793: LD_VAR 0 7
12797: PPUSH
12798: CALL_OW 12
12802: ARRAY
12803: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
12804: LD_ADDR_OWVAR 40
12808: PUSH
12809: LD_VAR 0 8
12813: PUSH
12814: LD_INT 1
12816: PPUSH
12817: LD_VAR 0 8
12821: PPUSH
12822: CALL_OW 12
12826: ARRAY
12827: ST_TO_ADDR
// for j = 1 to RuWeapons do
12828: LD_ADDR_VAR 0 14
12832: PUSH
12833: DOUBLE
12834: LD_INT 1
12836: DEC
12837: ST_TO_ADDR
12838: LD_VAR 0 8
12842: PUSH
12843: FOR_TO
12844: IFFALSE 13046
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
12846: LD_VAR 0 8
12850: PUSH
12851: LD_VAR 0 14
12855: ARRAY
12856: PUSH
12857: LD_INT 42
12859: EQUAL
12860: PUSH
12861: LD_VAR 0 8
12865: PUSH
12866: LD_VAR 0 14
12870: ARRAY
12871: PUSH
12872: LD_INT 43
12874: EQUAL
12875: OR
12876: PUSH
12877: LD_VAR 0 8
12881: PUSH
12882: LD_VAR 0 14
12886: ARRAY
12887: PUSH
12888: LD_INT 44
12890: EQUAL
12891: OR
12892: PUSH
12893: LD_VAR 0 8
12897: PUSH
12898: LD_VAR 0 14
12902: ARRAY
12903: PUSH
12904: LD_INT 45
12906: EQUAL
12907: OR
12908: PUSH
12909: LD_VAR 0 8
12913: PUSH
12914: LD_VAR 0 14
12918: ARRAY
12919: PUSH
12920: LD_INT 49
12922: EQUAL
12923: OR
12924: IFFALSE 12973
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
12926: LD_ADDR_VAR 0 17
12930: PUSH
12931: LD_INT 21
12933: PUSH
12934: LD_INT 22
12936: PUSH
12937: LD_INT 23
12939: PUSH
12940: LD_INT 24
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
12949: LD_ADDR_OWVAR 37
12953: PUSH
12954: LD_VAR 0 17
12958: PUSH
12959: LD_INT 1
12961: PPUSH
12962: LD_VAR 0 17
12966: PPUSH
12967: CALL_OW 12
12971: ARRAY
12972: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
12973: LD_VAR 0 8
12977: PUSH
12978: LD_VAR 0 14
12982: ARRAY
12983: PUSH
12984: LD_INT 46
12986: EQUAL
12987: PUSH
12988: LD_VAR 0 8
12992: PUSH
12993: LD_VAR 0 14
12997: ARRAY
12998: PUSH
12999: LD_INT 47
13001: EQUAL
13002: OR
13003: IFFALSE 13044
// begin ruChassisTab = [ 23 , 24 ] ;
13005: LD_ADDR_VAR 0 17
13009: PUSH
13010: LD_INT 23
13012: PUSH
13013: LD_INT 24
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13020: LD_ADDR_OWVAR 37
13024: PUSH
13025: LD_VAR 0 17
13029: PUSH
13030: LD_INT 1
13032: PPUSH
13033: LD_VAR 0 17
13037: PPUSH
13038: CALL_OW 12
13042: ARRAY
13043: ST_TO_ADDR
// end ; end ;
13044: GO 12843
13046: POP
13047: POP
// veh = CreateVehicle ;
13048: LD_ADDR_VAR 0 16
13052: PUSH
13053: CALL_OW 45
13057: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13058: LD_VAR 0 16
13062: PPUSH
13063: LD_VAR 0 1
13067: PPUSH
13068: LD_INT 0
13070: PPUSH
13071: CALL_OW 49
// if vc_control = 1 then
13075: LD_OWVAR 38
13079: PUSH
13080: LD_INT 1
13082: EQUAL
13083: IFFALSE 13140
// begin hc_gallery =  ;
13085: LD_ADDR_OWVAR 33
13089: PUSH
13090: LD_STRING 
13092: ST_TO_ADDR
// hc_name =  ;
13093: LD_ADDR_OWVAR 26
13097: PUSH
13098: LD_STRING 
13100: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13101: LD_INT 0
13103: PPUSH
13104: LD_INT 3
13106: PPUSH
13107: LD_VAR 0 4
13111: PPUSH
13112: CALL_OW 380
// un = CreateHuman ;
13116: LD_ADDR_VAR 0 15
13120: PUSH
13121: CALL_OW 44
13125: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13126: LD_VAR 0 15
13130: PPUSH
13131: LD_VAR 0 16
13135: PPUSH
13136: CALL_OW 52
// end ; i = i + 1 ;
13140: LD_ADDR_VAR 0 13
13144: PUSH
13145: LD_VAR 0 13
13149: PUSH
13150: LD_INT 1
13152: PLUS
13153: ST_TO_ADDR
// end ; until i = vehCount ;
13154: LD_VAR 0 13
13158: PUSH
13159: LD_VAR 0 3
13163: EQUAL
13164: IFFALSE 11774
// repeat wait ( 0 0$1 ) ;
13166: LD_INT 35
13168: PPUSH
13169: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
13173: LD_ADDR_VAR 0 20
13177: PUSH
13178: LD_INT 22
13180: PUSH
13181: LD_VAR 0 2
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PUSH
13190: LD_INT 21
13192: PUSH
13193: LD_INT 2
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 24
13202: PUSH
13203: LD_INT 650
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: LIST
13214: PPUSH
13215: CALL_OW 69
13219: ST_TO_ADDR
// if vehicleOK_list > 0 then
13220: LD_VAR 0 20
13224: PUSH
13225: LD_INT 0
13227: GREATER
13228: IFFALSE 13419
// begin for i in vehicleOK_list do
13230: LD_ADDR_VAR 0 13
13234: PUSH
13235: LD_VAR 0 20
13239: PUSH
13240: FOR_IN
13241: IFFALSE 13417
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13243: LD_ADDR_VAR 0 21
13247: PUSH
13248: LD_INT 22
13250: PUSH
13251: LD_VAR 0 11
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PPUSH
13260: CALL_OW 69
13264: PPUSH
13265: LD_VAR 0 13
13269: PPUSH
13270: CALL_OW 74
13274: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13275: LD_ADDR_VAR 0 22
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_VAR 0 11
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 2
13294: PUSH
13295: LD_INT 59
13297: PUSH
13298: EMPTY
13299: LIST
13300: PUSH
13301: LD_INT 21
13303: PUSH
13304: LD_INT 1
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: PUSH
13311: LD_INT 21
13313: PUSH
13314: LD_INT 2
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: PPUSH
13339: LD_VAR 0 13
13343: PPUSH
13344: CALL_OW 74
13348: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13349: LD_VAR 0 13
13353: PPUSH
13354: LD_VAR 0 21
13358: PPUSH
13359: CALL_OW 296
13363: PUSH
13364: LD_INT 8
13366: PLUS
13367: PUSH
13368: LD_VAR 0 13
13372: PPUSH
13373: LD_VAR 0 22
13377: PPUSH
13378: CALL_OW 296
13382: LESS
13383: IFFALSE 13401
// begin ComAttackUnit ( i , target1 ) ;
13385: LD_VAR 0 13
13389: PPUSH
13390: LD_VAR 0 21
13394: PPUSH
13395: CALL_OW 115
// end else
13399: GO 13415
// begin ComAttackUnit ( i , target2 ) ;
13401: LD_VAR 0 13
13405: PPUSH
13406: LD_VAR 0 22
13410: PPUSH
13411: CALL_OW 115
// end ; end ;
13415: GO 13240
13417: POP
13418: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
13419: LD_INT 22
13421: PUSH
13422: LD_VAR 0 2
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 2
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PPUSH
13445: CALL_OW 69
13449: PUSH
13450: LD_INT 0
13452: EQUAL
13453: IFFALSE 13166
// end ;
13455: LD_VAR 0 12
13459: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
13460: LD_INT 0
13462: PPUSH
13463: PPUSH
13464: PPUSH
13465: PPUSH
13466: PPUSH
13467: PPUSH
13468: PPUSH
13469: PPUSH
13470: PPUSH
13471: PPUSH
13472: PPUSH
// for i = 1 to medicCount do
13473: LD_ADDR_VAR 0 13
13477: PUSH
13478: DOUBLE
13479: LD_INT 1
13481: DEC
13482: ST_TO_ADDR
13483: LD_VAR 0 7
13487: PUSH
13488: FOR_TO
13489: IFFALSE 13571
// begin uc_side = side ;
13491: LD_ADDR_OWVAR 20
13495: PUSH
13496: LD_VAR 0 1
13500: ST_TO_ADDR
// uc_nation = nation ;
13501: LD_ADDR_OWVAR 21
13505: PUSH
13506: LD_VAR 0 2
13510: ST_TO_ADDR
// hc_name =  ;
13511: LD_ADDR_OWVAR 26
13515: PUSH
13516: LD_STRING 
13518: ST_TO_ADDR
// hc_gallery =  ;
13519: LD_ADDR_OWVAR 33
13523: PUSH
13524: LD_STRING 
13526: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
13527: LD_INT 0
13529: PPUSH
13530: LD_INT 4
13532: PPUSH
13533: LD_VAR 0 8
13537: PPUSH
13538: CALL_OW 380
// un = CreateHuman ;
13542: LD_ADDR_VAR 0 15
13546: PUSH
13547: CALL_OW 44
13551: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13552: LD_VAR 0 15
13556: PPUSH
13557: LD_VAR 0 9
13561: PPUSH
13562: LD_INT 0
13564: PPUSH
13565: CALL_OW 49
// end ;
13569: GO 13488
13571: POP
13572: POP
// for i = 1 to soldierCount do
13573: LD_ADDR_VAR 0 13
13577: PUSH
13578: DOUBLE
13579: LD_INT 1
13581: DEC
13582: ST_TO_ADDR
13583: LD_VAR 0 3
13587: PUSH
13588: FOR_TO
13589: IFFALSE 13671
// begin uc_side = side ;
13591: LD_ADDR_OWVAR 20
13595: PUSH
13596: LD_VAR 0 1
13600: ST_TO_ADDR
// uc_nation = nation ;
13601: LD_ADDR_OWVAR 21
13605: PUSH
13606: LD_VAR 0 2
13610: ST_TO_ADDR
// hc_name =  ;
13611: LD_ADDR_OWVAR 26
13615: PUSH
13616: LD_STRING 
13618: ST_TO_ADDR
// hc_gallery =  ;
13619: LD_ADDR_OWVAR 33
13623: PUSH
13624: LD_STRING 
13626: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
13627: LD_INT 0
13629: PPUSH
13630: LD_INT 1
13632: PPUSH
13633: LD_VAR 0 8
13637: PPUSH
13638: CALL_OW 380
// un = CreateHuman ;
13642: LD_ADDR_VAR 0 15
13646: PUSH
13647: CALL_OW 44
13651: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13652: LD_VAR 0 15
13656: PPUSH
13657: LD_VAR 0 9
13661: PPUSH
13662: LD_INT 0
13664: PPUSH
13665: CALL_OW 49
// end ;
13669: GO 13588
13671: POP
13672: POP
// for i = 1 to sniperCount do
13673: LD_ADDR_VAR 0 13
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 4
13687: PUSH
13688: FOR_TO
13689: IFFALSE 13771
// begin uc_side = side ;
13691: LD_ADDR_OWVAR 20
13695: PUSH
13696: LD_VAR 0 1
13700: ST_TO_ADDR
// uc_nation = nation ;
13701: LD_ADDR_OWVAR 21
13705: PUSH
13706: LD_VAR 0 2
13710: ST_TO_ADDR
// hc_name =  ;
13711: LD_ADDR_OWVAR 26
13715: PUSH
13716: LD_STRING 
13718: ST_TO_ADDR
// hc_gallery =  ;
13719: LD_ADDR_OWVAR 33
13723: PUSH
13724: LD_STRING 
13726: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
13727: LD_INT 0
13729: PPUSH
13730: LD_INT 5
13732: PPUSH
13733: LD_VAR 0 8
13737: PPUSH
13738: CALL_OW 380
// un = CreateHuman ;
13742: LD_ADDR_VAR 0 15
13746: PUSH
13747: CALL_OW 44
13751: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13752: LD_VAR 0 15
13756: PPUSH
13757: LD_VAR 0 9
13761: PPUSH
13762: LD_INT 0
13764: PPUSH
13765: CALL_OW 49
// end ;
13769: GO 13688
13771: POP
13772: POP
// for i = 1 to bazookCount do
13773: LD_ADDR_VAR 0 13
13777: PUSH
13778: DOUBLE
13779: LD_INT 1
13781: DEC
13782: ST_TO_ADDR
13783: LD_VAR 0 5
13787: PUSH
13788: FOR_TO
13789: IFFALSE 13871
// begin uc_side = side ;
13791: LD_ADDR_OWVAR 20
13795: PUSH
13796: LD_VAR 0 1
13800: ST_TO_ADDR
// uc_nation = nation ;
13801: LD_ADDR_OWVAR 21
13805: PUSH
13806: LD_VAR 0 2
13810: ST_TO_ADDR
// hc_name =  ;
13811: LD_ADDR_OWVAR 26
13815: PUSH
13816: LD_STRING 
13818: ST_TO_ADDR
// hc_gallery =  ;
13819: LD_ADDR_OWVAR 33
13823: PUSH
13824: LD_STRING 
13826: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13827: LD_INT 0
13829: PPUSH
13830: LD_INT 9
13832: PPUSH
13833: LD_VAR 0 8
13837: PPUSH
13838: CALL_OW 380
// un = CreateHuman ;
13842: LD_ADDR_VAR 0 15
13846: PUSH
13847: CALL_OW 44
13851: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13852: LD_VAR 0 15
13856: PPUSH
13857: LD_VAR 0 9
13861: PPUSH
13862: LD_INT 0
13864: PPUSH
13865: CALL_OW 49
// end ;
13869: GO 13788
13871: POP
13872: POP
// for i = 1 to mortalCount do
13873: LD_ADDR_VAR 0 13
13877: PUSH
13878: DOUBLE
13879: LD_INT 1
13881: DEC
13882: ST_TO_ADDR
13883: LD_VAR 0 6
13887: PUSH
13888: FOR_TO
13889: IFFALSE 13971
// begin uc_side = side ;
13891: LD_ADDR_OWVAR 20
13895: PUSH
13896: LD_VAR 0 1
13900: ST_TO_ADDR
// uc_nation = nation ;
13901: LD_ADDR_OWVAR 21
13905: PUSH
13906: LD_VAR 0 2
13910: ST_TO_ADDR
// hc_name =  ;
13911: LD_ADDR_OWVAR 26
13915: PUSH
13916: LD_STRING 
13918: ST_TO_ADDR
// hc_gallery =  ;
13919: LD_ADDR_OWVAR 33
13923: PUSH
13924: LD_STRING 
13926: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13927: LD_INT 0
13929: PPUSH
13930: LD_INT 8
13932: PPUSH
13933: LD_VAR 0 8
13937: PPUSH
13938: CALL_OW 380
// un = CreateHuman ;
13942: LD_ADDR_VAR 0 15
13946: PUSH
13947: CALL_OW 44
13951: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13952: LD_VAR 0 15
13956: PPUSH
13957: LD_VAR 0 9
13961: PPUSH
13962: LD_INT 0
13964: PPUSH
13965: CALL_OW 49
// end ;
13969: GO 13888
13971: POP
13972: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13973: LD_ADDR_VAR 0 18
13977: PUSH
13978: LD_INT 22
13980: PUSH
13981: LD_VAR 0 1
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 25
13995: PUSH
13996: LD_INT 1
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 5
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: LD_INT 25
14015: PUSH
14016: LD_INT 8
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PUSH
14023: LD_INT 25
14025: PUSH
14026: LD_INT 9
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 69
14048: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14049: LD_ADDR_VAR 0 17
14053: PUSH
14054: LD_INT 22
14056: PUSH
14057: LD_VAR 0 1
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PUSH
14066: LD_INT 25
14068: PUSH
14069: LD_INT 4
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PPUSH
14080: CALL_OW 69
14084: ST_TO_ADDR
// for i in medic_list do
14085: LD_ADDR_VAR 0 13
14089: PUSH
14090: LD_VAR 0 17
14094: PUSH
14095: FOR_IN
14096: IFFALSE 14114
// ComMoveToArea ( i , healArea ) ;
14098: LD_VAR 0 13
14102: PPUSH
14103: LD_VAR 0 10
14107: PPUSH
14108: CALL_OW 113
14112: GO 14095
14114: POP
14115: POP
// repeat wait ( 0 0$1 ) ;
14116: LD_INT 35
14118: PPUSH
14119: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14123: LD_ADDR_VAR 0 16
14127: PUSH
14128: LD_INT 22
14130: PUSH
14131: LD_VAR 0 1
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PUSH
14140: LD_INT 1
14142: PUSH
14143: LD_INT 3
14145: PUSH
14146: LD_INT 24
14148: PUSH
14149: LD_INT 550
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 24
14162: PUSH
14163: LD_INT 250
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: LIST
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: PPUSH
14179: CALL_OW 69
14183: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14184: LD_ADDR_VAR 0 18
14188: PUSH
14189: LD_INT 22
14191: PUSH
14192: LD_VAR 0 1
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 2
14203: PUSH
14204: LD_INT 25
14206: PUSH
14207: LD_INT 1
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: LD_INT 25
14216: PUSH
14217: LD_INT 5
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: LD_INT 25
14226: PUSH
14227: LD_INT 8
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: PUSH
14234: LD_INT 25
14236: PUSH
14237: LD_INT 9
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 24
14253: PUSH
14254: LD_INT 1000
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// if medicCount > 0 then
14271: LD_VAR 0 7
14275: PUSH
14276: LD_INT 0
14278: GREATER
14279: IFFALSE 14353
// begin if damageUnit_list > 0 then
14281: LD_VAR 0 16
14285: PUSH
14286: LD_INT 0
14288: GREATER
14289: IFFALSE 14353
// begin for i in damageUnit_list do
14291: LD_ADDR_VAR 0 13
14295: PUSH
14296: LD_VAR 0 16
14300: PUSH
14301: FOR_IN
14302: IFFALSE 14351
// begin ComMoveToArea ( i , healArea ) ;
14304: LD_VAR 0 13
14308: PPUSH
14309: LD_VAR 0 10
14313: PPUSH
14314: CALL_OW 113
// for j in medic_list do
14318: LD_ADDR_VAR 0 14
14322: PUSH
14323: LD_VAR 0 17
14327: PUSH
14328: FOR_IN
14329: IFFALSE 14347
// AddComHeal ( j , i ) ;
14331: LD_VAR 0 14
14335: PPUSH
14336: LD_VAR 0 13
14340: PPUSH
14341: CALL_OW 188
14345: GO 14328
14347: POP
14348: POP
// end ;
14349: GO 14301
14351: POP
14352: POP
// end ; end ; for i in soldiersOK_list do
14353: LD_ADDR_VAR 0 13
14357: PUSH
14358: LD_VAR 0 18
14362: PUSH
14363: FOR_IN
14364: IFFALSE 14540
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14366: LD_ADDR_VAR 0 21
14370: PUSH
14371: LD_INT 22
14373: PUSH
14374: LD_VAR 0 11
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: PPUSH
14388: LD_VAR 0 13
14392: PPUSH
14393: CALL_OW 74
14397: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14398: LD_ADDR_VAR 0 22
14402: PUSH
14403: LD_INT 22
14405: PUSH
14406: LD_VAR 0 11
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 59
14420: PUSH
14421: EMPTY
14422: LIST
14423: PUSH
14424: LD_INT 21
14426: PUSH
14427: LD_INT 1
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: PUSH
14434: LD_INT 21
14436: PUSH
14437: LD_INT 2
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: PPUSH
14457: CALL_OW 69
14461: PPUSH
14462: LD_VAR 0 13
14466: PPUSH
14467: CALL_OW 74
14471: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14472: LD_VAR 0 13
14476: PPUSH
14477: LD_VAR 0 21
14481: PPUSH
14482: CALL_OW 296
14486: PUSH
14487: LD_INT 8
14489: PLUS
14490: PUSH
14491: LD_VAR 0 13
14495: PPUSH
14496: LD_VAR 0 22
14500: PPUSH
14501: CALL_OW 296
14505: LESS
14506: IFFALSE 14524
// begin ComAttackUnit ( i , target1 ) ;
14508: LD_VAR 0 13
14512: PPUSH
14513: LD_VAR 0 21
14517: PPUSH
14518: CALL_OW 115
// end else
14522: GO 14538
// begin ComAttackUnit ( i , target2 ) ;
14524: LD_VAR 0 13
14528: PPUSH
14529: LD_VAR 0 22
14533: PPUSH
14534: CALL_OW 115
// end ; end ;
14538: GO 14363
14540: POP
14541: POP
// for i in soldiersOK_list do
14542: LD_ADDR_VAR 0 13
14546: PUSH
14547: LD_VAR 0 18
14551: PUSH
14552: FOR_IN
14553: IFFALSE 14729
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14555: LD_ADDR_VAR 0 21
14559: PUSH
14560: LD_INT 22
14562: PUSH
14563: LD_VAR 0 11
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PPUSH
14572: CALL_OW 69
14576: PPUSH
14577: LD_VAR 0 13
14581: PPUSH
14582: CALL_OW 74
14586: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14587: LD_ADDR_VAR 0 22
14591: PUSH
14592: LD_INT 22
14594: PUSH
14595: LD_VAR 0 11
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: LD_INT 2
14606: PUSH
14607: LD_INT 59
14609: PUSH
14610: EMPTY
14611: LIST
14612: PUSH
14613: LD_INT 21
14615: PUSH
14616: LD_INT 1
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 2
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: PUSH
14643: EMPTY
14644: LIST
14645: PPUSH
14646: CALL_OW 69
14650: PPUSH
14651: LD_VAR 0 13
14655: PPUSH
14656: CALL_OW 74
14660: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14661: LD_VAR 0 13
14665: PPUSH
14666: LD_VAR 0 21
14670: PPUSH
14671: CALL_OW 296
14675: PUSH
14676: LD_INT 8
14678: PLUS
14679: PUSH
14680: LD_VAR 0 13
14684: PPUSH
14685: LD_VAR 0 22
14689: PPUSH
14690: CALL_OW 296
14694: LESS
14695: IFFALSE 14713
// begin ComAttackUnit ( i , target1 ) ;
14697: LD_VAR 0 13
14701: PPUSH
14702: LD_VAR 0 21
14706: PPUSH
14707: CALL_OW 115
// end else
14711: GO 14727
// begin ComAttackUnit ( i , target2 ) ;
14713: LD_VAR 0 13
14717: PPUSH
14718: LD_VAR 0 22
14722: PPUSH
14723: CALL_OW 115
// end ; end ;
14727: GO 14552
14729: POP
14730: POP
// until soldiersOK_list = [ ] ;
14731: LD_VAR 0 18
14735: PUSH
14736: EMPTY
14737: EQUAL
14738: IFFALSE 14116
// end ;
14740: LD_VAR 0 12
14744: RET
// export function TameApemans ; var i , j ; begin
14745: LD_INT 0
14747: PPUSH
14748: PPUSH
14749: PPUSH
// repeat wait ( 0 0$1 ) ;
14750: LD_INT 35
14752: PPUSH
14753: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
14757: LD_ADDR_VAR 0 2
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 2
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 25
14774: PUSH
14775: LD_INT 4
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: PPUSH
14786: CALL_OW 69
14790: PUSH
14791: FOR_IN
14792: IFFALSE 14869
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
14794: LD_ADDR_VAR 0 3
14798: PUSH
14799: LD_INT 5
14801: PPUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 0
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: LD_INT 25
14814: PUSH
14815: LD_INT 12
14817: PUSH
14818: EMPTY
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PPUSH
14826: CALL_OW 70
14830: PUSH
14831: FOR_IN
14832: IFFALSE 14865
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
14834: LD_VAR 0 2
14838: PPUSH
14839: LD_VAR 0 3
14843: PPUSH
14844: CALL_OW 250
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PPUSH
14859: CALL_OW 191
// end ;
14863: GO 14831
14865: POP
14866: POP
// end ;
14867: GO 14791
14869: POP
14870: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
14871: LD_INT 22
14873: PUSH
14874: LD_INT 2
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PUSH
14881: LD_INT 25
14883: PUSH
14884: LD_INT 4
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PPUSH
14895: CALL_OW 69
14899: PUSH
14900: LD_INT 0
14902: EQUAL
14903: PUSH
14904: LD_INT 5
14906: PPUSH
14907: LD_INT 22
14909: PUSH
14910: LD_INT 0
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 25
14919: PUSH
14920: LD_INT 12
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PPUSH
14931: CALL_OW 70
14935: PUSH
14936: LD_INT 0
14938: EQUAL
14939: OR
14940: IFFALSE 14750
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
14942: LD_ADDR_VAR 0 2
14946: PUSH
14947: LD_INT 22
14949: PUSH
14950: LD_INT 2
14952: PUSH
14953: EMPTY
14954: LIST
14955: LIST
14956: PUSH
14957: LD_INT 25
14959: PUSH
14960: LD_INT 12
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PPUSH
14971: CALL_OW 69
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15012
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
14979: LD_VAR 0 2
14983: PPUSH
14984: LD_INT 16
14986: PUSH
14987: LD_INT 15
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 1
14996: PPUSH
14997: LD_INT 2
14999: PPUSH
15000: CALL_OW 12
15004: ARRAY
15005: PPUSH
15006: CALL_OW 336
15010: GO 14976
15012: POP
15013: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
15014: LD_ADDR_VAR 0 2
15018: PUSH
15019: LD_INT 22
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: EMPTY
15026: LIST
15027: LIST
15028: PUSH
15029: LD_INT 25
15031: PUSH
15032: LD_INT 4
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL_OW 69
15047: PUSH
15048: FOR_IN
15049: IFFALSE 15067
// ComEnterUnit ( i , arLab ) ;
15051: LD_VAR 0 2
15055: PPUSH
15056: LD_EXP 42
15060: PPUSH
15061: CALL_OW 120
15065: GO 15048
15067: POP
15068: POP
// end ;
15069: LD_VAR 0 1
15073: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
15074: LD_INT 0
15076: PPUSH
15077: PPUSH
15078: PPUSH
15079: PPUSH
15080: PPUSH
15081: PPUSH
15082: PPUSH
15083: PPUSH
15084: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15085: LD_INT 22
15087: PUSH
15088: LD_VAR 0 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 21
15099: PUSH
15100: LD_INT 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: PPUSH
15111: CALL_OW 69
15115: PUSH
15116: LD_VAR 0 3
15120: LESSEQUAL
15121: IFFALSE 15265
// for i = 1 to vehCount do
15123: LD_ADDR_VAR 0 10
15127: PUSH
15128: DOUBLE
15129: LD_INT 1
15131: DEC
15132: ST_TO_ADDR
15133: LD_VAR 0 3
15137: PUSH
15138: FOR_TO
15139: IFFALSE 15263
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
15141: LD_ADDR_VAR 0 12
15145: PUSH
15146: LD_VAR 0 5
15150: PUSH
15151: LD_INT 1
15153: PPUSH
15154: LD_VAR 0 5
15158: PPUSH
15159: CALL_OW 12
15163: ARRAY
15164: ST_TO_ADDR
// if randWeapon = 46 then
15165: LD_VAR 0 12
15169: PUSH
15170: LD_INT 46
15172: EQUAL
15173: IFFALSE 15218
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
15175: LD_VAR 0 2
15179: PPUSH
15180: LD_INT 24
15182: PPUSH
15183: LD_VAR 0 6
15187: PPUSH
15188: LD_VAR 0 7
15192: PUSH
15193: LD_INT 1
15195: PPUSH
15196: LD_VAR 0 7
15200: PPUSH
15201: CALL_OW 12
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 12
15211: PPUSH
15212: CALL_OW 185
15216: GO 15261
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
15218: LD_VAR 0 2
15222: PPUSH
15223: LD_VAR 0 8
15227: PPUSH
15228: LD_VAR 0 6
15232: PPUSH
15233: LD_VAR 0 7
15237: PUSH
15238: LD_INT 1
15240: PPUSH
15241: LD_VAR 0 7
15245: PPUSH
15246: CALL_OW 12
15250: ARRAY
15251: PPUSH
15252: LD_VAR 0 12
15256: PPUSH
15257: CALL_OW 185
// end ;
15261: GO 15138
15263: POP
15264: POP
// repeat wait ( 0 0$1 ) ;
15265: LD_INT 35
15267: PPUSH
15268: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
15272: LD_INT 22
15274: PUSH
15275: LD_VAR 0 1
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: PUSH
15284: LD_INT 21
15286: PUSH
15287: LD_INT 2
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 24
15296: PUSH
15297: LD_INT 250
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 69
15313: PUSH
15314: LD_VAR 0 3
15318: GREATEREQUAL
15319: IFFALSE 15265
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
15321: LD_INT 22
15323: PUSH
15324: LD_VAR 0 1
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 21
15335: PUSH
15336: LD_INT 2
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 24
15345: PUSH
15346: LD_INT 250
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: LIST
15357: PPUSH
15358: CALL_OW 69
15362: PUSH
15363: LD_VAR 0 3
15367: GREATEREQUAL
15368: IFFALSE 15711
// begin repeat begin wait ( 0 0$1 ) ;
15370: LD_INT 35
15372: PPUSH
15373: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
15377: LD_INT 22
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: LD_INT 21
15391: PUSH
15392: LD_INT 2
15394: PUSH
15395: EMPTY
15396: LIST
15397: LIST
15398: PUSH
15399: LD_INT 24
15401: PUSH
15402: LD_INT 651
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 69
15418: PUSH
15419: LD_INT 0
15421: GREATER
15422: IFFALSE 15650
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
15424: LD_ADDR_VAR 0 10
15428: PUSH
15429: LD_INT 22
15431: PUSH
15432: LD_VAR 0 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 21
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: EMPTY
15448: LIST
15449: LIST
15450: PUSH
15451: LD_INT 24
15453: PUSH
15454: LD_INT 651
15456: PUSH
15457: EMPTY
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: CALL_OW 69
15470: PUSH
15471: FOR_IN
15472: IFFALSE 15648
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15474: LD_ADDR_VAR 0 16
15478: PUSH
15479: LD_INT 22
15481: PUSH
15482: LD_VAR 0 4
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PPUSH
15491: CALL_OW 69
15495: PPUSH
15496: LD_VAR 0 10
15500: PPUSH
15501: CALL_OW 74
15505: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15506: LD_ADDR_VAR 0 17
15510: PUSH
15511: LD_INT 22
15513: PUSH
15514: LD_VAR 0 4
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: PUSH
15523: LD_INT 2
15525: PUSH
15526: LD_INT 59
15528: PUSH
15529: EMPTY
15530: LIST
15531: PUSH
15532: LD_INT 21
15534: PUSH
15535: LD_INT 1
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: PUSH
15542: LD_INT 21
15544: PUSH
15545: LD_INT 2
15547: PUSH
15548: EMPTY
15549: LIST
15550: LIST
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: EMPTY
15563: LIST
15564: PPUSH
15565: CALL_OW 69
15569: PPUSH
15570: LD_VAR 0 10
15574: PPUSH
15575: CALL_OW 74
15579: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15580: LD_VAR 0 10
15584: PPUSH
15585: LD_VAR 0 16
15589: PPUSH
15590: CALL_OW 296
15594: PUSH
15595: LD_INT 8
15597: PLUS
15598: PUSH
15599: LD_VAR 0 10
15603: PPUSH
15604: LD_VAR 0 17
15608: PPUSH
15609: CALL_OW 296
15613: LESS
15614: IFFALSE 15632
// begin ComAttackUnit ( i , target1 ) ;
15616: LD_VAR 0 10
15620: PPUSH
15621: LD_VAR 0 16
15625: PPUSH
15626: CALL_OW 115
// end else
15630: GO 15646
// begin ComAttackUnit ( i , target2 ) ;
15632: LD_VAR 0 10
15636: PPUSH
15637: LD_VAR 0 17
15641: PPUSH
15642: CALL_OW 115
// end ; end ;
15646: GO 15471
15648: POP
15649: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
15650: LD_INT 22
15652: PUSH
15653: LD_VAR 0 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: LD_INT 21
15664: PUSH
15665: LD_INT 2
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PPUSH
15676: CALL_OW 69
15680: PUSH
15681: LD_INT 0
15683: EQUAL
15684: PUSH
15685: LD_INT 22
15687: PUSH
15688: LD_VAR 0 4
15692: PUSH
15693: EMPTY
15694: LIST
15695: LIST
15696: PUSH
15697: EMPTY
15698: LIST
15699: PPUSH
15700: CALL_OW 69
15704: PUSH
15705: LD_INT 0
15707: EQUAL
15708: OR
15709: IFFALSE 15370
// end ; end ; end_of_file
15711: LD_VAR 0 9
15715: RET
// every 0 0$1 trigger russianAI = 1 do
15716: LD_EXP 37
15720: PUSH
15721: LD_INT 1
15723: EQUAL
15724: IFFALSE 15823
15726: GO 15728
15728: DISABLE
// begin enable ;
15729: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
15730: LD_INT 3
15732: PPUSH
15733: LD_EXP 28
15737: PPUSH
15738: CALL 10864 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
15742: LD_INT 3
15744: PPUSH
15745: LD_EXP 40
15749: PPUSH
15750: CALL 11123 0 2
// if ruPossition = 1 then
15754: LD_EXP 39
15758: PUSH
15759: LD_INT 1
15761: EQUAL
15762: IFFALSE 15777
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase ) ;
15764: LD_INT 3
15766: PPUSH
15767: LD_INT 13
15769: PPUSH
15770: LD_INT 10
15772: PPUSH
15773: CALL 11329 0 3
// if ruPossition = 2 then
15777: LD_EXP 39
15781: PUSH
15782: LD_INT 2
15784: EQUAL
15785: IFFALSE 15800
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase ) ;
15787: LD_INT 3
15789: PPUSH
15790: LD_INT 14
15792: PPUSH
15793: LD_INT 11
15795: PPUSH
15796: CALL 11329 0 3
// if ruPossition = 3 then
15800: LD_EXP 39
15804: PUSH
15805: LD_INT 3
15807: EQUAL
15808: IFFALSE 15823
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase ) ;
15810: LD_INT 3
15812: PPUSH
15813: LD_INT 15
15815: PPUSH
15816: LD_INT 12
15818: PPUSH
15819: CALL 11329 0 3
// end ;
15823: END
// every 0 0$1 do
15824: GO 15826
15826: DISABLE
// begin enable ;
15827: ENABLE
// if ruPossition = 1 then
15828: LD_EXP 39
15832: PUSH
15833: LD_INT 1
15835: EQUAL
15836: IFFALSE 15848
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
15838: LD_INT 3
15840: PPUSH
15841: LD_INT 10
15843: PPUSH
15844: CALL 10562 0 2
// if ruPossition = 2 then
15848: LD_EXP 39
15852: PUSH
15853: LD_INT 2
15855: EQUAL
15856: IFFALSE 15868
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
15858: LD_INT 3
15860: PPUSH
15861: LD_INT 11
15863: PPUSH
15864: CALL 10562 0 2
// if ruPossition = 3 then
15868: LD_EXP 39
15872: PUSH
15873: LD_INT 3
15875: EQUAL
15876: IFFALSE 15888
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
15878: LD_INT 3
15880: PPUSH
15881: LD_INT 12
15883: PPUSH
15884: CALL 10562 0 2
// IntBazooka ( 3 , 1 ) ;
15888: LD_INT 3
15890: PPUSH
15891: LD_INT 1
15893: PPUSH
15894: CALL 10169 0 2
// IntBazooka ( 6 , 1 ) ;
15898: LD_INT 6
15900: PPUSH
15901: LD_INT 1
15903: PPUSH
15904: CALL 10169 0 2
// end ;
15908: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
15909: LD_EXP 37
15913: PUSH
15914: LD_INT 1
15916: EQUAL
15917: PUSH
15918: LD_EXP 33
15922: PPUSH
15923: CALL_OW 302
15927: AND
15928: PUSH
15929: LD_EXP 33
15933: PPUSH
15934: CALL_OW 255
15938: PUSH
15939: LD_INT 3
15941: EQUAL
15942: AND
15943: PUSH
15944: LD_INT 22
15946: PUSH
15947: LD_INT 3
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: PUSH
15954: LD_INT 21
15956: PUSH
15957: LD_INT 2
15959: PUSH
15960: EMPTY
15961: LIST
15962: LIST
15963: PUSH
15964: LD_INT 33
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PUSH
15974: EMPTY
15975: LIST
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: PUSH
15984: LD_INT 0
15986: EQUAL
15987: AND
15988: IFFALSE 16196
15990: GO 15992
15992: DISABLE
// begin enable ;
15993: ENABLE
// if Difficulty = 1 then
15994: LD_OWVAR 67
15998: PUSH
15999: LD_INT 1
16001: EQUAL
16002: IFFALSE 16064
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
16004: LD_INT 3
16006: PPUSH
16007: LD_EXP 33
16011: PPUSH
16012: LD_INT 5
16014: PPUSH
16015: LD_INT 8
16017: PPUSH
16018: CALL_OW 12
16022: PPUSH
16023: LD_INT 1
16025: PPUSH
16026: LD_INT 43
16028: PUSH
16029: LD_INT 44
16031: PUSH
16032: LD_INT 45
16034: PUSH
16035: LD_INT 46
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: PPUSH
16044: LD_INT 1
16046: PPUSH
16047: LD_INT 1
16049: PUSH
16050: LD_INT 3
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PPUSH
16057: LD_INT 22
16059: PPUSH
16060: CALL 15074 0 8
// if Difficulty = 2 then
16064: LD_OWVAR 67
16068: PUSH
16069: LD_INT 2
16071: EQUAL
16072: IFFALSE 16130
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
16074: LD_INT 3
16076: PPUSH
16077: LD_EXP 33
16081: PPUSH
16082: LD_INT 6
16084: PPUSH
16085: LD_INT 8
16087: PPUSH
16088: CALL_OW 12
16092: PPUSH
16093: LD_INT 1
16095: PPUSH
16096: LD_INT 44
16098: PUSH
16099: LD_INT 45
16101: PUSH
16102: LD_INT 46
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: LIST
16109: PPUSH
16110: LD_INT 1
16112: PPUSH
16113: LD_INT 1
16115: PUSH
16116: LD_INT 3
16118: PUSH
16119: EMPTY
16120: LIST
16121: LIST
16122: PPUSH
16123: LD_INT 22
16125: PPUSH
16126: CALL 15074 0 8
// if Difficulty = 3 then
16130: LD_OWVAR 67
16134: PUSH
16135: LD_INT 3
16137: EQUAL
16138: IFFALSE 16196
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
16140: LD_INT 3
16142: PPUSH
16143: LD_EXP 33
16147: PPUSH
16148: LD_INT 7
16150: PPUSH
16151: LD_INT 8
16153: PPUSH
16154: CALL_OW 12
16158: PPUSH
16159: LD_INT 1
16161: PPUSH
16162: LD_INT 44
16164: PUSH
16165: LD_INT 45
16167: PUSH
16168: LD_INT 46
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: PPUSH
16176: LD_INT 1
16178: PPUSH
16179: LD_INT 1
16181: PUSH
16182: LD_INT 3
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: PPUSH
16189: LD_INT 22
16191: PPUSH
16192: CALL 15074 0 8
// end ; end_of_file
16196: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
16197: LD_VAR 0 1
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 4
16209: EQUAL
16210: IFFALSE 16224
// SetBName ( building , epsilon ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_STRING epsilon
16219: PPUSH
16220: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
16224: LD_VAR 0 1
16228: PPUSH
16229: CALL_OW 255
16233: PUSH
16234: LD_INT 1
16236: EQUAL
16237: PUSH
16238: LD_VAR 0 1
16242: PPUSH
16243: CALL_OW 266
16247: PUSH
16248: LD_INT 0
16250: EQUAL
16251: AND
16252: IFFALSE 16266
// SetBName ( building , epsilon ) ;
16254: LD_VAR 0 1
16258: PPUSH
16259: LD_STRING epsilon
16261: PPUSH
16262: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
16266: LD_VAR 0 1
16270: PPUSH
16271: CALL_OW 255
16275: PUSH
16276: LD_INT 3
16278: EQUAL
16279: PUSH
16280: LD_VAR 0 1
16284: PPUSH
16285: CALL_OW 266
16289: PUSH
16290: LD_INT 0
16292: EQUAL
16293: AND
16294: IFFALSE 16308
// SetBName ( building , chuikov ) ;
16296: LD_VAR 0 1
16300: PPUSH
16301: LD_STRING chuikov
16303: PPUSH
16304: CALL_OW 500
// end ;
16308: PPOPN 2
16310: END
// on BuildingComplete ( building ) do var i ;
16311: LD_INT 0
16313: PPUSH
// begin if GetSide ( building ) = 1 then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 255
16323: PUSH
16324: LD_INT 1
16326: EQUAL
16327: IFFALSE 16527
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
16329: LD_INT 22
16331: PUSH
16332: LD_INT 1
16334: PUSH
16335: EMPTY
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: LD_INT 30
16344: PUSH
16345: LD_INT 7
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 30
16354: PUSH
16355: LD_INT 8
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 1
16364: PUSH
16365: LD_INT 30
16367: PUSH
16368: LD_INT 11
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: LD_INT 2
16380: PUSH
16381: LD_INT 30
16383: PUSH
16384: LD_INT 26
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PUSH
16391: LD_INT 30
16393: PUSH
16394: LD_INT 27
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PUSH
16401: LD_INT 30
16403: PUSH
16404: LD_INT 28
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: PUSH
16411: EMPTY
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: PUSH
16426: EMPTY
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PPUSH
16436: CALL_OW 69
16440: PUSH
16441: LD_INT 0
16443: GREATER
16444: PUSH
16445: LD_INT 22
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: PUSH
16455: LD_INT 2
16457: PUSH
16458: LD_INT 30
16460: PUSH
16461: LD_INT 26
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 30
16470: PUSH
16471: LD_INT 27
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: PUSH
16478: LD_INT 30
16480: PUSH
16481: LD_INT 28
16483: PUSH
16484: EMPTY
16485: LIST
16486: LIST
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PPUSH
16498: CALL_OW 69
16502: PUSH
16503: LD_INT 0
16505: GREATER
16506: AND
16507: PUSH
16508: LD_EXP 49
16512: PUSH
16513: LD_INT 0
16515: EQUAL
16516: AND
16517: IFFALSE 16527
// eventVar1 = 1 ;
16519: LD_ADDR_EXP 49
16523: PUSH
16524: LD_INT 1
16526: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 255
16536: PUSH
16537: LD_INT 3
16539: EQUAL
16540: IFFALSE 17020
// begin if GetBType ( building ) = b_depot then
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 266
16551: PUSH
16552: LD_INT 0
16554: EQUAL
16555: IFFALSE 16627
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
16557: LD_VAR 0 1
16561: PPUSH
16562: CALL_OW 274
16566: PPUSH
16567: LD_INT 1
16569: PPUSH
16570: LD_INT 5000
16572: PPUSH
16573: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
16577: LD_VAR 0 1
16581: PPUSH
16582: CALL_OW 274
16586: PPUSH
16587: LD_INT 2
16589: PPUSH
16590: LD_INT 5000
16592: PPUSH
16593: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
16597: LD_VAR 0 1
16601: PPUSH
16602: CALL_OW 274
16606: PPUSH
16607: LD_INT 3
16609: PPUSH
16610: LD_INT 5000
16612: PPUSH
16613: CALL_OW 277
// ruDepot = building ;
16617: LD_ADDR_EXP 28
16621: PUSH
16622: LD_VAR 0 1
16626: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
16627: LD_VAR 0 1
16631: PPUSH
16632: CALL_OW 266
16636: PUSH
16637: LD_INT 0
16639: EQUAL
16640: PUSH
16641: LD_VAR 0 1
16645: PPUSH
16646: CALL_OW 266
16650: PUSH
16651: LD_INT 2
16653: EQUAL
16654: OR
16655: PUSH
16656: LD_VAR 0 1
16660: PPUSH
16661: CALL_OW 266
16665: PUSH
16666: LD_INT 4
16668: EQUAL
16669: OR
16670: IFFALSE 16681
// ComUpgrade ( building ) ;
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 146
// if GetBType ( building ) = b_lab then
16681: LD_VAR 0 1
16685: PPUSH
16686: CALL_OW 266
16690: PUSH
16691: LD_INT 6
16693: EQUAL
16694: IFFALSE 16897
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
16696: LD_INT 22
16698: PUSH
16699: LD_INT 3
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: LD_INT 30
16708: PUSH
16709: LD_INT 8
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PUSH
16716: EMPTY
16717: LIST
16718: LIST
16719: PPUSH
16720: CALL_OW 69
16724: PUSH
16725: LD_INT 0
16727: EQUAL
16728: IFFALSE 16766
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_INT 10
16737: PPUSH
16738: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
16742: LD_VAR 0 1
16746: PPUSH
16747: LD_INT 12
16749: PPUSH
16750: CALL_OW 207
// ruLab1 = building ;
16754: LD_ADDR_EXP 29
16758: PUSH
16759: LD_VAR 0 1
16763: ST_TO_ADDR
// end else
16764: GO 16800
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
16766: LD_VAR 0 1
16770: PPUSH
16771: LD_INT 11
16773: PPUSH
16774: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
16778: LD_VAR 0 1
16782: PPUSH
16783: LD_INT 14
16785: PPUSH
16786: CALL_OW 207
// ruLab2 = building ;
16790: LD_ADDR_EXP 30
16794: PUSH
16795: LD_VAR 0 1
16799: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
16800: LD_INT 3
16802: PPUSH
16803: LD_VAR 0 1
16807: PPUSH
16808: LD_INT 3
16810: PPUSH
16811: CALL 10477 0 3
// if ruDestroyedBuildings > 0 then
16815: LD_EXP 40
16819: PUSH
16820: LD_INT 0
16822: GREATER
16823: IFFALSE 16897
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16825: LD_ADDR_EXP 40
16829: PUSH
16830: LD_EXP 40
16834: PPUSH
16835: LD_INT 1
16837: PPUSH
16838: CALL_OW 3
16842: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16843: LD_ADDR_EXP 40
16847: PUSH
16848: LD_EXP 40
16852: PPUSH
16853: LD_INT 1
16855: PPUSH
16856: CALL_OW 3
16860: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16861: LD_ADDR_EXP 40
16865: PUSH
16866: LD_EXP 40
16870: PPUSH
16871: LD_INT 1
16873: PPUSH
16874: CALL_OW 3
16878: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16879: LD_ADDR_EXP 40
16883: PUSH
16884: LD_EXP 40
16888: PPUSH
16889: LD_INT 1
16891: PPUSH
16892: CALL_OW 3
16896: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
16897: LD_VAR 0 1
16901: PPUSH
16902: CALL_OW 266
16906: PUSH
16907: LD_INT 32
16909: EQUAL
16910: IFFALSE 16947
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16912: LD_VAR 0 1
16916: PPUSH
16917: LD_INT 44
16919: PUSH
16920: LD_INT 45
16922: PUSH
16923: LD_INT 46
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 1
16933: PPUSH
16934: LD_INT 3
16936: PPUSH
16937: CALL_OW 12
16941: ARRAY
16942: PPUSH
16943: CALL_OW 208
// if GetBType ( building ) = b_turret then
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 266
16956: PUSH
16957: LD_INT 33
16959: EQUAL
16960: IFFALSE 16997
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 44
16969: PUSH
16970: LD_INT 46
16972: PUSH
16973: LD_INT 46
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 1
16983: PPUSH
16984: LD_INT 3
16986: PPUSH
16987: CALL_OW 12
16991: ARRAY
16992: PPUSH
16993: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 266
17006: PUSH
17007: LD_INT 24
17009: EQUAL
17010: IFFALSE 17020
// russianAI = 1 ;
17012: LD_ADDR_EXP 37
17016: PUSH
17017: LD_INT 1
17019: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
17020: LD_VAR 0 1
17024: PPUSH
17025: CALL_OW 255
17029: PUSH
17030: LD_INT 2
17032: EQUAL
17033: IFFALSE 17322
// begin if GetBType ( building ) = b_depot then
17035: LD_VAR 0 1
17039: PPUSH
17040: CALL_OW 266
17044: PUSH
17045: LD_INT 0
17047: EQUAL
17048: IFFALSE 17134
// begin arDepot = building ;
17050: LD_ADDR_EXP 41
17054: PUSH
17055: LD_VAR 0 1
17059: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
17060: LD_INT 38
17062: PUSH
17063: LD_INT 47
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PPUSH
17070: LD_INT 71
17072: PPUSH
17073: LD_INT 19
17075: PPUSH
17076: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
17080: LD_VAR 0 1
17084: PPUSH
17085: CALL_OW 274
17089: PPUSH
17090: LD_INT 1
17092: PPUSH
17093: LD_INT 500
17095: PPUSH
17096: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
17100: LD_VAR 0 1
17104: PPUSH
17105: CALL_OW 274
17109: PPUSH
17110: LD_INT 3
17112: PPUSH
17113: LD_INT 30
17115: PPUSH
17116: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
17120: LD_EXP 25
17124: PPUSH
17125: LD_EXP 41
17129: PPUSH
17130: CALL_OW 120
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17134: LD_VAR 0 1
17138: PPUSH
17139: CALL_OW 266
17143: PUSH
17144: LD_INT 2
17146: EQUAL
17147: PUSH
17148: LD_VAR 0 1
17152: PPUSH
17153: CALL_OW 266
17157: PUSH
17158: LD_INT 4
17160: EQUAL
17161: OR
17162: IFFALSE 17173
// ComUpgrade ( building ) ;
17164: LD_VAR 0 1
17168: PPUSH
17169: CALL_OW 146
// if GetBType ( building ) = b_lab then
17173: LD_VAR 0 1
17177: PPUSH
17178: CALL_OW 266
17182: PUSH
17183: LD_INT 6
17185: EQUAL
17186: IFFALSE 17237
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17188: LD_VAR 0 1
17192: PPUSH
17193: LD_INT 10
17195: PPUSH
17196: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
17200: LD_VAR 0 1
17204: PPUSH
17205: LD_INT 11
17207: PPUSH
17208: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
17212: LD_INT 2
17214: PPUSH
17215: LD_VAR 0 1
17219: PPUSH
17220: LD_INT 2
17222: PPUSH
17223: CALL 10477 0 3
// arLab = building ;
17227: LD_ADDR_EXP 42
17231: PUSH
17232: LD_VAR 0 1
17236: ST_TO_ADDR
// end ; if GetBType ( building ) = b_breastwork then
17237: LD_VAR 0 1
17241: PPUSH
17242: CALL_OW 266
17246: PUSH
17247: LD_INT 31
17249: EQUAL
17250: IFFALSE 17322
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
17252: LD_INT 22
17254: PUSH
17255: LD_INT 2
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 25
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 3
17274: PUSH
17275: LD_INT 54
17277: PUSH
17278: EMPTY
17279: LIST
17280: PUSH
17281: LD_INT 3
17283: PUSH
17284: LD_INT 60
17286: PUSH
17287: EMPTY
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: LIST
17303: PPUSH
17304: CALL_OW 69
17308: PUSH
17309: LD_INT 1
17311: ARRAY
17312: PPUSH
17313: LD_VAR 0 1
17317: PPUSH
17318: CALL_OW 120
// end ; end ;
17322: PPOPN 2
17324: END
// on UpgradeComplete ( building ) do var i ;
17325: LD_INT 0
17327: PPUSH
// begin if GetSide ( building ) = 1 then
17328: LD_VAR 0 1
17332: PPUSH
17333: CALL_OW 255
17337: PUSH
17338: LD_INT 1
17340: EQUAL
17341: IFFALSE 17541
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17343: LD_INT 22
17345: PUSH
17346: LD_INT 1
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: LD_INT 30
17358: PUSH
17359: LD_INT 7
17361: PUSH
17362: EMPTY
17363: LIST
17364: LIST
17365: PUSH
17366: LD_INT 30
17368: PUSH
17369: LD_INT 8
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: PUSH
17376: LD_INT 1
17378: PUSH
17379: LD_INT 30
17381: PUSH
17382: LD_INT 11
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 1
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: LD_INT 30
17397: PUSH
17398: LD_INT 26
17400: PUSH
17401: EMPTY
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 30
17407: PUSH
17408: LD_INT 27
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 30
17417: PUSH
17418: LD_INT 28
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: PUSH
17431: EMPTY
17432: LIST
17433: LIST
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: LIST
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PPUSH
17450: CALL_OW 69
17454: PUSH
17455: LD_INT 0
17457: GREATER
17458: PUSH
17459: LD_INT 22
17461: PUSH
17462: LD_INT 1
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 2
17471: PUSH
17472: LD_INT 30
17474: PUSH
17475: LD_INT 26
17477: PUSH
17478: EMPTY
17479: LIST
17480: LIST
17481: PUSH
17482: LD_INT 30
17484: PUSH
17485: LD_INT 27
17487: PUSH
17488: EMPTY
17489: LIST
17490: LIST
17491: PUSH
17492: LD_INT 30
17494: PUSH
17495: LD_INT 28
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: LIST
17506: LIST
17507: PUSH
17508: EMPTY
17509: LIST
17510: LIST
17511: PPUSH
17512: CALL_OW 69
17516: PUSH
17517: LD_INT 0
17519: GREATER
17520: AND
17521: PUSH
17522: LD_EXP 49
17526: PUSH
17527: LD_INT 0
17529: EQUAL
17530: AND
17531: IFFALSE 17541
// eventVar1 = 1 ;
17533: LD_ADDR_EXP 49
17537: PUSH
17538: LD_INT 1
17540: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
17541: LD_VAR 0 1
17545: PPUSH
17546: CALL_OW 255
17550: PUSH
17551: LD_INT 2
17553: EQUAL
17554: IFFALSE 17659
// begin if GetBType ( building ) = b_barracks then
17556: LD_VAR 0 1
17560: PPUSH
17561: CALL_OW 266
17565: PUSH
17566: LD_INT 5
17568: EQUAL
17569: IFFALSE 17659
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
17571: LD_ADDR_VAR 0 2
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_INT 2
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: PUSH
17586: LD_INT 25
17588: PUSH
17589: LD_INT 1
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: LD_INT 3
17598: PUSH
17599: LD_INT 54
17601: PUSH
17602: EMPTY
17603: LIST
17604: PUSH
17605: EMPTY
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 69
17618: PUSH
17619: LD_EXP 25
17623: PUSH
17624: EMPTY
17625: LIST
17626: DIFF
17627: PUSH
17628: FOR_IN
17629: IFFALSE 17647
// ComEnterUnit ( i , building ) ;
17631: LD_VAR 0 2
17635: PPUSH
17636: LD_VAR 0 1
17640: PPUSH
17641: CALL_OW 120
17645: GO 17628
17647: POP
17648: POP
// arArm = building ;
17649: LD_ADDR_EXP 43
17653: PUSH
17654: LD_VAR 0 1
17658: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
17659: LD_VAR 0 1
17663: PPUSH
17664: CALL_OW 255
17668: PUSH
17669: LD_INT 3
17671: EQUAL
17672: IFFALSE 18145
// begin if GetBType ( building ) = b_factory then
17674: LD_VAR 0 1
17678: PPUSH
17679: CALL_OW 266
17683: PUSH
17684: LD_INT 3
17686: EQUAL
17687: IFFALSE 17754
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17689: LD_ADDR_VAR 0 2
17693: PUSH
17694: LD_INT 22
17696: PUSH
17697: LD_INT 3
17699: PUSH
17700: EMPTY
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 25
17706: PUSH
17707: LD_INT 3
17709: PUSH
17710: EMPTY
17711: LIST
17712: LIST
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PPUSH
17718: CALL_OW 69
17722: PUSH
17723: FOR_IN
17724: IFFALSE 17742
// ComEnterUnit ( i , building ) ;
17726: LD_VAR 0 2
17730: PPUSH
17731: LD_VAR 0 1
17735: PPUSH
17736: CALL_OW 120
17740: GO 17723
17742: POP
17743: POP
// ruFab = building ;
17744: LD_ADDR_EXP 33
17748: PUSH
17749: LD_VAR 0 1
17753: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
17754: LD_INT 22
17756: PUSH
17757: LD_INT 3
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 21
17766: PUSH
17767: LD_INT 3
17769: PUSH
17770: EMPTY
17771: LIST
17772: LIST
17773: PUSH
17774: LD_INT 30
17776: PUSH
17777: LD_INT 8
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: LIST
17788: PPUSH
17789: CALL_OW 69
17793: PUSH
17794: LD_INT 2
17796: EQUAL
17797: IFFALSE 18005
// begin for i = 1 to 2 do
17799: LD_ADDR_VAR 0 2
17803: PUSH
17804: DOUBLE
17805: LD_INT 1
17807: DEC
17808: ST_TO_ADDR
17809: LD_INT 2
17811: PUSH
17812: FOR_TO
17813: IFFALSE 17900
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
17815: LD_INT 22
17817: PUSH
17818: LD_INT 3
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: LD_INT 25
17827: PUSH
17828: LD_INT 4
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PUSH
17835: EMPTY
17836: LIST
17837: LIST
17838: PPUSH
17839: CALL_OW 69
17843: PUSH
17844: LD_VAR 0 2
17848: ARRAY
17849: PPUSH
17850: LD_INT 22
17852: PUSH
17853: LD_INT 3
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: LD_INT 21
17862: PUSH
17863: LD_INT 3
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 30
17872: PUSH
17873: LD_INT 8
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: PPUSH
17885: CALL_OW 69
17889: PUSH
17890: LD_INT 1
17892: ARRAY
17893: PPUSH
17894: CALL_OW 120
17898: GO 17812
17900: POP
17901: POP
// for i = 3 to 4 do
17902: LD_ADDR_VAR 0 2
17906: PUSH
17907: DOUBLE
17908: LD_INT 3
17910: DEC
17911: ST_TO_ADDR
17912: LD_INT 4
17914: PUSH
17915: FOR_TO
17916: IFFALSE 18003
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
17918: LD_INT 22
17920: PUSH
17921: LD_INT 3
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: PUSH
17928: LD_INT 25
17930: PUSH
17931: LD_INT 4
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PUSH
17938: EMPTY
17939: LIST
17940: LIST
17941: PPUSH
17942: CALL_OW 69
17946: PUSH
17947: LD_VAR 0 2
17951: ARRAY
17952: PPUSH
17953: LD_INT 22
17955: PUSH
17956: LD_INT 3
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: LD_INT 21
17965: PUSH
17966: LD_INT 3
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 30
17975: PUSH
17976: LD_INT 8
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: LIST
17987: PPUSH
17988: CALL_OW 69
17992: PUSH
17993: LD_INT 2
17995: ARRAY
17996: PPUSH
17997: CALL_OW 120
18001: GO 17915
18003: POP
18004: POP
// end ; if GetBType ( building ) = b_barracks then
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 266
18014: PUSH
18015: LD_INT 5
18017: EQUAL
18018: IFFALSE 18145
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18020: LD_ADDR_VAR 0 2
18024: PUSH
18025: LD_INT 22
18027: PUSH
18028: LD_INT 3
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: LD_INT 25
18037: PUSH
18038: LD_INT 1
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: PUSH
18045: LD_INT 3
18047: PUSH
18048: LD_INT 54
18050: PUSH
18051: EMPTY
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: PUSH
18068: FOR_IN
18069: IFFALSE 18087
// ComEnterUnit ( i , building ) ;
18071: LD_VAR 0 2
18075: PPUSH
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 120
18085: GO 18068
18087: POP
18088: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
18089: LD_INT 22
18091: PUSH
18092: LD_INT 3
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 30
18101: PUSH
18102: LD_INT 5
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PPUSH
18113: CALL_OW 69
18117: PUSH
18118: LD_INT 0
18120: EQUAL
18121: IFFALSE 18135
// ruArm1 = building else
18123: LD_ADDR_EXP 31
18127: PUSH
18128: LD_VAR 0 1
18132: ST_TO_ADDR
18133: GO 18145
// ruArm2 = building ;
18135: LD_ADDR_EXP 32
18139: PUSH
18140: LD_VAR 0 1
18144: ST_TO_ADDR
// end ; end ; end ;
18145: PPOPN 2
18147: END
// on EnterBuilding ( building , human ) do var rnd ;
18148: LD_INT 0
18150: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
18151: LD_VAR 0 2
18155: PPUSH
18156: CALL_OW 255
18160: PUSH
18161: LD_INT 2
18163: EQUAL
18164: PUSH
18165: LD_VAR 0 2
18169: PPUSH
18170: CALL_OW 257
18174: PUSH
18175: LD_INT 1
18177: EQUAL
18178: AND
18179: PUSH
18180: LD_VAR 0 1
18184: PUSH
18185: LD_EXP 43
18189: EQUAL
18190: AND
18191: IFFALSE 18238
// begin wait ( 0 0$1 ) ;
18193: LD_INT 35
18195: PPUSH
18196: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
18200: LD_ADDR_VAR 0 3
18204: PUSH
18205: LD_INT 1
18207: PPUSH
18208: LD_INT 100
18210: PPUSH
18211: CALL_OW 12
18215: ST_TO_ADDR
// if rnd > 50 then
18216: LD_VAR 0 3
18220: PUSH
18221: LD_INT 50
18223: GREATER
18224: IFFALSE 18238
// SetClass ( human , class_mortar ) ;
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_INT 8
18233: PPUSH
18234: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
18238: LD_VAR 0 2
18242: PPUSH
18243: CALL_OW 255
18247: PUSH
18248: LD_INT 3
18250: EQUAL
18251: PUSH
18252: LD_VAR 0 2
18256: PPUSH
18257: CALL_OW 257
18261: PUSH
18262: LD_INT 1
18264: EQUAL
18265: AND
18266: PUSH
18267: LD_VAR 0 1
18271: PUSH
18272: LD_EXP 31
18276: EQUAL
18277: PUSH
18278: LD_VAR 0 1
18282: PUSH
18283: LD_EXP 32
18287: EQUAL
18288: OR
18289: PUSH
18290: EMPTY
18291: LIST
18292: AND
18293: IFFALSE 18314
// begin wait ( 0 0$1 ) ;
18295: LD_INT 35
18297: PPUSH
18298: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
18302: LD_VAR 0 2
18306: PPUSH
18307: LD_INT 9
18309: PPUSH
18310: CALL_OW 336
// end ; end ;
18314: PPOPN 3
18316: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
18317: LD_VAR 0 1
18321: PUSH
18322: LD_INT 1
18324: EQUAL
18325: PUSH
18326: LD_VAR 0 2
18330: PUSH
18331: LD_INT 2
18333: EQUAL
18334: AND
18335: PUSH
18336: LD_INT 1
18338: PPUSH
18339: LD_INT 2
18341: PPUSH
18342: CALL_OW 81
18346: PUSH
18347: LD_INT 1
18349: EQUAL
18350: AND
18351: IFFALSE 18372
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
18353: LD_EXP 23
18357: PPUSH
18358: LD_STRING D6b-Pow-1
18360: PPUSH
18361: CALL_OW 94
// YouLost ( Powell ) ;
18365: LD_STRING Powell
18367: PPUSH
18368: CALL_OW 104
// end ; end ;
18372: PPOPN 2
18374: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
18375: LD_VAR 0 1
18379: PPUSH
18380: CALL_OW 255
18384: PUSH
18385: LD_INT 3
18387: EQUAL
18388: PUSH
18389: LD_VAR 0 1
18393: PPUSH
18394: CALL_OW 247
18398: PUSH
18399: LD_INT 3
18401: EQUAL
18402: AND
18403: IFFALSE 19095
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
18405: LD_VAR 0 1
18409: PPUSH
18410: CALL_OW 266
18414: PUSH
18415: LD_INT 31
18417: EQUAL
18418: PUSH
18419: LD_VAR 0 1
18423: PPUSH
18424: CALL_OW 266
18428: PUSH
18429: LD_INT 32
18431: EQUAL
18432: OR
18433: PUSH
18434: LD_VAR 0 1
18438: PPUSH
18439: CALL_OW 266
18443: PUSH
18444: LD_INT 36
18446: EQUAL
18447: OR
18448: PUSH
18449: LD_VAR 0 1
18453: PPUSH
18454: CALL_OW 266
18458: PUSH
18459: LD_INT 0
18461: EQUAL
18462: OR
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 266
18473: PUSH
18474: LD_INT 24
18476: EQUAL
18477: OR
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 266
18488: PUSH
18489: LD_INT 17
18491: EQUAL
18492: OR
18493: PUSH
18494: LD_VAR 0 1
18498: PPUSH
18499: CALL_OW 266
18503: PUSH
18504: LD_INT 25
18506: EQUAL
18507: OR
18508: PUSH
18509: LD_VAR 0 1
18513: PPUSH
18514: CALL_OW 266
18518: PUSH
18519: LD_INT 19
18521: EQUAL
18522: OR
18523: PUSH
18524: LD_VAR 0 1
18528: PPUSH
18529: CALL_OW 266
18533: PUSH
18534: LD_INT 20
18536: EQUAL
18537: OR
18538: PUSH
18539: LD_VAR 0 1
18543: PPUSH
18544: CALL_OW 266
18548: PUSH
18549: LD_INT 18
18551: EQUAL
18552: OR
18553: PUSH
18554: LD_VAR 0 1
18558: PPUSH
18559: CALL_OW 266
18563: PUSH
18564: LD_INT 21
18566: EQUAL
18567: OR
18568: PUSH
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 266
18578: PUSH
18579: LD_INT 23
18581: EQUAL
18582: OR
18583: PUSH
18584: LD_VAR 0 1
18588: PPUSH
18589: CALL_OW 266
18593: PUSH
18594: LD_INT 16
18596: EQUAL
18597: OR
18598: PUSH
18599: LD_VAR 0 1
18603: PPUSH
18604: CALL_OW 266
18608: PUSH
18609: LD_INT 6
18611: EQUAL
18612: OR
18613: PUSH
18614: LD_VAR 0 1
18618: PPUSH
18619: CALL_OW 266
18623: PUSH
18624: LD_INT 29
18626: EQUAL
18627: OR
18628: PUSH
18629: LD_VAR 0 1
18633: PPUSH
18634: CALL_OW 266
18638: PUSH
18639: LD_INT 26
18641: EQUAL
18642: OR
18643: PUSH
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 266
18653: PUSH
18654: LD_INT 30
18656: EQUAL
18657: OR
18658: PUSH
18659: LD_VAR 0 1
18663: PPUSH
18664: CALL_OW 266
18668: PUSH
18669: LD_INT 28
18671: EQUAL
18672: OR
18673: PUSH
18674: LD_VAR 0 1
18678: PPUSH
18679: CALL_OW 266
18683: PUSH
18684: LD_INT 27
18686: EQUAL
18687: OR
18688: PUSH
18689: LD_VAR 0 1
18693: PPUSH
18694: CALL_OW 266
18698: PUSH
18699: LD_INT 33
18701: EQUAL
18702: OR
18703: PUSH
18704: LD_VAR 0 1
18708: PPUSH
18709: CALL_OW 266
18713: PUSH
18714: LD_INT 2
18716: EQUAL
18717: OR
18718: PUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: CALL_OW 266
18728: PUSH
18729: LD_INT 4
18731: EQUAL
18732: OR
18733: IFFALSE 18819
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18735: LD_ADDR_EXP 40
18739: PUSH
18740: LD_EXP 40
18744: PUSH
18745: LD_VAR 0 1
18749: PPUSH
18750: CALL_OW 266
18754: ADD
18755: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18756: LD_ADDR_EXP 40
18760: PUSH
18761: LD_EXP 40
18765: PUSH
18766: LD_VAR 0 1
18770: PPUSH
18771: CALL_OW 250
18775: ADD
18776: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18777: LD_ADDR_EXP 40
18781: PUSH
18782: LD_EXP 40
18786: PUSH
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 251
18796: ADD
18797: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18798: LD_ADDR_EXP 40
18802: PUSH
18803: LD_EXP 40
18807: PUSH
18808: LD_VAR 0 1
18812: PPUSH
18813: CALL_OW 254
18817: ADD
18818: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 266
18828: PUSH
18829: LD_INT 1
18831: EQUAL
18832: IFFALSE 18911
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18834: LD_ADDR_EXP 40
18838: PUSH
18839: LD_EXP 40
18843: PUSH
18844: LD_INT 0
18846: ADD
18847: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18848: LD_ADDR_EXP 40
18852: PUSH
18853: LD_EXP 40
18857: PUSH
18858: LD_VAR 0 1
18862: PPUSH
18863: CALL_OW 250
18867: ADD
18868: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18869: LD_ADDR_EXP 40
18873: PUSH
18874: LD_EXP 40
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 251
18888: ADD
18889: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18890: LD_ADDR_EXP 40
18894: PUSH
18895: LD_EXP 40
18899: PUSH
18900: LD_VAR 0 1
18904: PPUSH
18905: CALL_OW 254
18909: ADD
18910: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18911: LD_VAR 0 1
18915: PPUSH
18916: CALL_OW 266
18920: PUSH
18921: LD_INT 3
18923: EQUAL
18924: IFFALSE 19003
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18926: LD_ADDR_EXP 40
18930: PUSH
18931: LD_EXP 40
18935: PUSH
18936: LD_INT 2
18938: ADD
18939: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18940: LD_ADDR_EXP 40
18944: PUSH
18945: LD_EXP 40
18949: PUSH
18950: LD_VAR 0 1
18954: PPUSH
18955: CALL_OW 250
18959: ADD
18960: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18961: LD_ADDR_EXP 40
18965: PUSH
18966: LD_EXP 40
18970: PUSH
18971: LD_VAR 0 1
18975: PPUSH
18976: CALL_OW 251
18980: ADD
18981: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18982: LD_ADDR_EXP 40
18986: PUSH
18987: LD_EXP 40
18991: PUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 254
19001: ADD
19002: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
19003: LD_VAR 0 1
19007: PPUSH
19008: CALL_OW 266
19012: PUSH
19013: LD_INT 5
19015: EQUAL
19016: IFFALSE 19095
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
19018: LD_ADDR_EXP 40
19022: PUSH
19023: LD_EXP 40
19027: PUSH
19028: LD_INT 4
19030: ADD
19031: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19032: LD_ADDR_EXP 40
19036: PUSH
19037: LD_EXP 40
19041: PUSH
19042: LD_VAR 0 1
19046: PPUSH
19047: CALL_OW 250
19051: ADD
19052: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19053: LD_ADDR_EXP 40
19057: PUSH
19058: LD_EXP 40
19062: PUSH
19063: LD_VAR 0 1
19067: PPUSH
19068: CALL_OW 251
19072: ADD
19073: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19074: LD_ADDR_EXP 40
19078: PUSH
19079: LD_EXP 40
19083: PUSH
19084: LD_VAR 0 1
19088: PPUSH
19089: CALL_OW 254
19093: ADD
19094: ST_TO_ADDR
// end ; end ; end ;
19095: PPOPN 1
19097: END
// on Command ( comandid ) do var i , j , tmp ;
19098: LD_INT 0
19100: PPUSH
19101: PPUSH
19102: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 9 ] ] ) do
19103: LD_ADDR_VAR 0 2
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_INT 6
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: PUSH
19118: LD_INT 25
19120: PUSH
19121: LD_INT 9
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PPUSH
19132: CALL_OW 69
19136: PUSH
19137: FOR_IN
19138: IFFALSE 19450
// begin if GetTaskList ( i ) > 0 and eventVar2 = 0 and [ comandid = 37 or comandid = 38 ] then
19140: LD_VAR 0 2
19144: PPUSH
19145: CALL_OW 437
19149: PUSH
19150: LD_INT 0
19152: GREATER
19153: PUSH
19154: LD_EXP 50
19158: PUSH
19159: LD_INT 0
19161: EQUAL
19162: AND
19163: PUSH
19164: LD_VAR 0 1
19168: PUSH
19169: LD_INT 37
19171: EQUAL
19172: PUSH
19173: LD_VAR 0 1
19177: PUSH
19178: LD_INT 38
19180: EQUAL
19181: OR
19182: PUSH
19183: EMPTY
19184: LIST
19185: AND
19186: IFFALSE 19448
// begin for j = 1 to GetTaskList ( i ) do
19188: LD_ADDR_VAR 0 3
19192: PUSH
19193: DOUBLE
19194: LD_INT 1
19196: DEC
19197: ST_TO_ADDR
19198: LD_VAR 0 2
19202: PPUSH
19203: CALL_OW 437
19207: PUSH
19208: FOR_TO
19209: IFFALSE 19446
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19211: LD_ADDR_VAR 0 4
19215: PUSH
19216: LD_VAR 0 2
19220: PPUSH
19221: CALL_OW 437
19225: PUSH
19226: LD_VAR 0 3
19230: ARRAY
19231: PUSH
19232: LD_INT 4
19234: ARRAY
19235: ST_TO_ADDR
// eventVar2 = 1 ;
19236: LD_ADDR_EXP 50
19240: PUSH
19241: LD_INT 1
19243: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19244: LD_INT 175
19246: PPUSH
19247: CALL_OW 67
// DialogueOn ;
19251: CALL_OW 6
// if IsOK ( Cyrus ) then
19255: LD_EXP 5
19259: PPUSH
19260: CALL_OW 302
19264: IFFALSE 19280
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
19266: LD_EXP 5
19270: PPUSH
19271: LD_STRING D9a-Cyrus-1
19273: PPUSH
19274: CALL_OW 88
// end else
19278: GO 19334
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
19280: LD_INT 22
19282: PUSH
19283: LD_INT 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 26
19292: PUSH
19293: LD_INT 1
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_EXP 1
19308: PUSH
19309: LD_EXP 14
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: DIFF
19318: PPUSH
19319: CALL_OW 69
19323: PPUSH
19324: LD_STRING D9a-Sol1-1
19326: PPUSH
19327: LD_STRING D9a-Sol1-1
19329: PPUSH
19330: CALL 7067 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
19334: LD_INT 22
19336: PUSH
19337: LD_INT 1
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: LD_INT 26
19346: PUSH
19347: LD_INT 1
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_EXP 1
19362: PUSH
19363: LD_EXP 14
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: DIFF
19372: PPUSH
19373: CALL_OW 69
19377: PPUSH
19378: LD_STRING D9b-Sol1-1
19380: PPUSH
19381: LD_STRING D9b-Sol1-1
19383: PPUSH
19384: CALL 7067 0 3
// Say ( JMM , D9a-JMM-1 ) ;
19388: LD_EXP 1
19392: PPUSH
19393: LD_STRING D9a-JMM-1
19395: PPUSH
19396: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
19400: LD_EXP 1
19404: PPUSH
19405: LD_STRING D9c-JMM-1
19407: PPUSH
19408: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
19412: LD_INT 12
19414: PPUSH
19415: LD_INT 1
19417: PPUSH
19418: CALL_OW 321
19422: PUSH
19423: LD_INT 2
19425: EQUAL
19426: IFFALSE 19440
// Say ( JMM , D9c-JMM-1a ) ;
19428: LD_EXP 1
19432: PPUSH
19433: LD_STRING D9c-JMM-1a
19435: PPUSH
19436: CALL_OW 88
// DialogueOff ;
19440: CALL_OW 7
// end ;
19444: GO 19208
19446: POP
19447: POP
// end ; end ;
19448: GO 19137
19450: POP
19451: POP
// end ; end_of_file
19452: PPOPN 4
19454: END
// export function PrepareNature ; var i , un ; begin
19455: LD_INT 0
19457: PPUSH
19458: PPUSH
19459: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
19460: LD_ADDR_VAR 0 2
19464: PUSH
19465: DOUBLE
19466: LD_INT 1
19468: DEC
19469: ST_TO_ADDR
19470: LD_OWVAR 67
19474: PUSH
19475: LD_INT 1
19477: PPUSH
19478: LD_INT 5
19480: PPUSH
19481: CALL_OW 12
19485: PLUS
19486: PUSH
19487: FOR_TO
19488: IFFALSE 19633
// begin hc_sex = sex_male ;
19490: LD_ADDR_OWVAR 27
19494: PUSH
19495: LD_INT 1
19497: ST_TO_ADDR
// uc_side = 0 ;
19498: LD_ADDR_OWVAR 20
19502: PUSH
19503: LD_INT 0
19505: ST_TO_ADDR
// uc_nation = nation_nature ;
19506: LD_ADDR_OWVAR 21
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// hc_class = class_apeman ;
19514: LD_ADDR_OWVAR 28
19518: PUSH
19519: LD_INT 12
19521: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
19522: LD_ADDR_OWVAR 31
19526: PUSH
19527: LD_INT 2
19529: PPUSH
19530: LD_INT 7
19532: PPUSH
19533: CALL_OW 12
19537: PUSH
19538: LD_OWVAR 67
19542: PLUS
19543: PUSH
19544: LD_INT 2
19546: PPUSH
19547: LD_INT 10
19549: PPUSH
19550: CALL_OW 12
19554: PUSH
19555: LD_INT 2
19557: PPUSH
19558: LD_INT 10
19560: PPUSH
19561: CALL_OW 12
19565: PUSH
19566: LD_INT 2
19568: PPUSH
19569: LD_INT 10
19571: PPUSH
19572: CALL_OW 12
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19583: LD_ADDR_OWVAR 35
19587: PUSH
19588: LD_INT 5
19590: NEG
19591: PPUSH
19592: LD_INT 5
19594: PPUSH
19595: CALL_OW 12
19599: PUSH
19600: LD_OWVAR 67
19604: MUL
19605: ST_TO_ADDR
// un = CreateHuman ;
19606: LD_ADDR_VAR 0 3
19610: PUSH
19611: CALL_OW 44
19615: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
19616: LD_VAR 0 3
19620: PPUSH
19621: LD_INT 5
19623: PPUSH
19624: LD_INT 0
19626: PPUSH
19627: CALL_OW 49
// end ;
19631: GO 19487
19633: POP
19634: POP
// for i = 1 to Difficulty + 2 do
19635: LD_ADDR_VAR 0 2
19639: PUSH
19640: DOUBLE
19641: LD_INT 1
19643: DEC
19644: ST_TO_ADDR
19645: LD_OWVAR 67
19649: PUSH
19650: LD_INT 2
19652: PLUS
19653: PUSH
19654: FOR_TO
19655: IFFALSE 19764
// begin hc_sex = sex_male ;
19657: LD_ADDR_OWVAR 27
19661: PUSH
19662: LD_INT 1
19664: ST_TO_ADDR
// uc_side = 0 ;
19665: LD_ADDR_OWVAR 20
19669: PUSH
19670: LD_INT 0
19672: ST_TO_ADDR
// uc_nation = nation_nature ;
19673: LD_ADDR_OWVAR 21
19677: PUSH
19678: LD_INT 0
19680: ST_TO_ADDR
// hc_class = class_tiger ;
19681: LD_ADDR_OWVAR 28
19685: PUSH
19686: LD_INT 14
19688: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19689: LD_ADDR_OWVAR 31
19693: PUSH
19694: LD_EXP 35
19698: PUSH
19699: LD_INT 0
19701: PUSH
19702: LD_INT 0
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: LIST
19712: LIST
19713: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19714: LD_ADDR_OWVAR 35
19718: PUSH
19719: LD_INT 5
19721: NEG
19722: PPUSH
19723: LD_INT 5
19725: PPUSH
19726: CALL_OW 12
19730: PUSH
19731: LD_OWVAR 67
19735: MUL
19736: ST_TO_ADDR
// un = CreateHuman ;
19737: LD_ADDR_VAR 0 3
19741: PUSH
19742: CALL_OW 44
19746: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
19747: LD_VAR 0 3
19751: PPUSH
19752: LD_INT 6
19754: PPUSH
19755: LD_INT 0
19757: PPUSH
19758: CALL_OW 49
// end ;
19762: GO 19654
19764: POP
19765: POP
// for i = 1 to rand ( 3 , 4 ) do
19766: LD_ADDR_VAR 0 2
19770: PUSH
19771: DOUBLE
19772: LD_INT 1
19774: DEC
19775: ST_TO_ADDR
19776: LD_INT 3
19778: PPUSH
19779: LD_INT 4
19781: PPUSH
19782: CALL_OW 12
19786: PUSH
19787: FOR_TO
19788: IFFALSE 19882
// begin hc_sex = sex_male ;
19790: LD_ADDR_OWVAR 27
19794: PUSH
19795: LD_INT 1
19797: ST_TO_ADDR
// uc_side = 0 ;
19798: LD_ADDR_OWVAR 20
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// uc_nation = nation_nature ;
19806: LD_ADDR_OWVAR 21
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// hc_class = 18 ;
19814: LD_ADDR_OWVAR 28
19818: PUSH
19819: LD_INT 18
19821: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19822: LD_ADDR_OWVAR 31
19826: PUSH
19827: LD_EXP 35
19831: PUSH
19832: LD_INT 0
19834: PUSH
19835: LD_INT 0
19837: PUSH
19838: LD_INT 0
19840: PUSH
19841: EMPTY
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: ST_TO_ADDR
// hc_agressivity = 0 ;
19847: LD_ADDR_OWVAR 35
19851: PUSH
19852: LD_INT 0
19854: ST_TO_ADDR
// un = CreateHuman ;
19855: LD_ADDR_VAR 0 3
19859: PUSH
19860: CALL_OW 44
19864: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
19865: LD_VAR 0 3
19869: PPUSH
19870: LD_INT 6
19872: PPUSH
19873: LD_INT 0
19875: PPUSH
19876: CALL_OW 49
// end ;
19880: GO 19787
19882: POP
19883: POP
// end ; end_of_file
19884: LD_VAR 0 1
19888: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
19889: LD_EXP 44
19893: PUSH
19894: LD_INT 1
19896: EQUAL
19897: IFFALSE 19999
19899: GO 19901
19901: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
19902: LD_INT 7
19904: PPUSH
19905: LD_INT 5
19907: PPUSH
19908: LD_INT 4
19910: PPUSH
19911: LD_INT 6
19913: PPUSH
19914: CALL_OW 12
19918: PUSH
19919: LD_INT 6
19921: PPUSH
19922: LD_INT 8
19924: PPUSH
19925: CALL_OW 12
19929: PUSH
19930: LD_INT 7
19932: PPUSH
19933: LD_INT 9
19935: PPUSH
19936: CALL_OW 12
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: PPUSH
19946: LD_EXP 34
19950: PPUSH
19951: LD_EXP 35
19955: PPUSH
19956: CALL_OW 12
19960: PPUSH
19961: LD_INT 2
19963: PPUSH
19964: LD_INT 1
19966: PPUSH
19967: LD_INT 1
19969: PPUSH
19970: EMPTY
19971: PPUSH
19972: LD_INT 25
19974: PUSH
19975: LD_INT 26
19977: PUSH
19978: LD_INT 27
19980: PUSH
19981: LD_INT 28
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: LIST
19988: LIST
19989: PPUSH
19990: EMPTY
19991: PPUSH
19992: LD_INT 1
19994: PPUSH
19995: CALL 11740 0 11
19999: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
20000: LD_EXP 44
20004: PUSH
20005: LD_INT 1
20007: EQUAL
20008: IFFALSE 20144
20010: GO 20012
20012: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
20013: LD_INT 5
20015: PPUSH
20016: LD_INT 2
20018: PPUSH
20019: LD_INT 7
20021: PPUSH
20022: LD_INT 9
20024: PPUSH
20025: CALL_OW 12
20029: PUSH
20030: LD_INT 8
20032: PPUSH
20033: LD_INT 10
20035: PPUSH
20036: CALL_OW 12
20040: PUSH
20041: LD_INT 9
20043: PPUSH
20044: LD_INT 12
20046: PPUSH
20047: CALL_OW 12
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PUSH
20057: LD_OWVAR 67
20061: ARRAY
20062: PPUSH
20063: LD_INT 0
20065: PPUSH
20066: LD_INT 0
20068: PPUSH
20069: LD_INT 3
20071: PPUSH
20072: LD_INT 4
20074: PPUSH
20075: CALL_OW 12
20079: PUSH
20080: LD_INT 4
20082: PPUSH
20083: LD_INT 5
20085: PPUSH
20086: CALL_OW 12
20090: PUSH
20091: LD_INT 5
20093: PPUSH
20094: LD_INT 6
20096: PPUSH
20097: CALL_OW 12
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: PUSH
20107: LD_OWVAR 67
20111: ARRAY
20112: PPUSH
20113: LD_INT 5
20115: PPUSH
20116: LD_EXP 34
20120: PPUSH
20121: LD_EXP 35
20125: PPUSH
20126: CALL_OW 12
20130: PPUSH
20131: LD_INT 7
20133: PPUSH
20134: LD_INT 9
20136: PPUSH
20137: LD_INT 1
20139: PPUSH
20140: CALL 13460 0 11
20144: END
// every 2 2$30 trigger joinEpsilon = 1 do
20145: LD_EXP 27
20149: PUSH
20150: LD_INT 1
20152: EQUAL
20153: IFFALSE 20215
20155: GO 20157
20157: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20158: LD_INT 6
20160: PPUSH
20161: LD_INT 3
20163: PPUSH
20164: LD_INT 5
20166: PPUSH
20167: LD_INT 8
20169: PPUSH
20170: CALL_OW 12
20174: PPUSH
20175: LD_INT 0
20177: PPUSH
20178: LD_INT 0
20180: PPUSH
20181: LD_INT 0
20183: PPUSH
20184: LD_INT 0
20186: PPUSH
20187: LD_EXP 34
20191: PPUSH
20192: LD_EXP 35
20196: PPUSH
20197: CALL_OW 12
20201: PPUSH
20202: LD_INT 17
20204: PPUSH
20205: LD_INT 18
20207: PPUSH
20208: LD_INT 1
20210: PPUSH
20211: CALL 13460 0 11
20215: END
// every 2 2$30 trigger joinEpsilon = 1 do
20216: LD_EXP 27
20220: PUSH
20221: LD_INT 1
20223: EQUAL
20224: IFFALSE 20306
20226: GO 20228
20228: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20229: LD_INT 17
20231: PPUSH
20232: LD_INT 6
20234: PPUSH
20235: LD_INT 1
20237: PPUSH
20238: LD_INT 3
20240: PPUSH
20241: CALL_OW 12
20245: PPUSH
20246: LD_EXP 34
20250: PPUSH
20251: LD_EXP 35
20255: PPUSH
20256: CALL_OW 12
20260: PPUSH
20261: LD_INT 3
20263: PPUSH
20264: LD_INT 1
20266: PPUSH
20267: LD_INT 1
20269: PUSH
20270: LD_INT 3
20272: PUSH
20273: EMPTY
20274: LIST
20275: LIST
20276: PPUSH
20277: LD_INT 43
20279: PUSH
20280: LD_INT 44
20282: PUSH
20283: LD_INT 45
20285: PUSH
20286: LD_INT 46
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: PPUSH
20295: EMPTY
20296: PPUSH
20297: EMPTY
20298: PPUSH
20299: LD_INT 1
20301: PPUSH
20302: CALL 11740 0 11
20306: END
// every 6 6$30 trigger joinEpsilon = 1 do
20307: LD_EXP 27
20311: PUSH
20312: LD_INT 1
20314: EQUAL
20315: IFFALSE 20385
20317: GO 20319
20319: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 5 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20320: LD_INT 6
20322: PPUSH
20323: LD_INT 3
20325: PPUSH
20326: LD_INT 5
20328: PPUSH
20329: LD_INT 8
20331: PPUSH
20332: CALL_OW 12
20336: PPUSH
20337: LD_INT 0
20339: PPUSH
20340: LD_INT 3
20342: PPUSH
20343: LD_INT 5
20345: PPUSH
20346: CALL_OW 12
20350: PPUSH
20351: LD_INT 0
20353: PPUSH
20354: LD_INT 6
20356: PPUSH
20357: LD_EXP 34
20361: PPUSH
20362: LD_EXP 35
20366: PPUSH
20367: CALL_OW 12
20371: PPUSH
20372: LD_INT 17
20374: PPUSH
20375: LD_INT 18
20377: PPUSH
20378: LD_INT 1
20380: PPUSH
20381: CALL 13460 0 11
20385: END
// every 6 6$30 trigger joinEpsilon = 1 do
20386: LD_EXP 27
20390: PUSH
20391: LD_INT 1
20393: EQUAL
20394: IFFALSE 20476
20396: GO 20398
20398: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 3 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20399: LD_INT 17
20401: PPUSH
20402: LD_INT 6
20404: PPUSH
20405: LD_INT 3
20407: PPUSH
20408: LD_INT 5
20410: PPUSH
20411: CALL_OW 12
20415: PPUSH
20416: LD_EXP 34
20420: PPUSH
20421: LD_EXP 35
20425: PPUSH
20426: CALL_OW 12
20430: PPUSH
20431: LD_INT 3
20433: PPUSH
20434: LD_INT 1
20436: PPUSH
20437: LD_INT 1
20439: PUSH
20440: LD_INT 3
20442: PUSH
20443: EMPTY
20444: LIST
20445: LIST
20446: PPUSH
20447: LD_INT 43
20449: PUSH
20450: LD_INT 44
20452: PUSH
20453: LD_INT 45
20455: PUSH
20456: LD_INT 46
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: LIST
20463: LIST
20464: PPUSH
20465: EMPTY
20466: PPUSH
20467: EMPTY
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: CALL 11740 0 11
20476: END
// every 15 15$30 trigger joinEpsilon = 1 do
20477: LD_EXP 27
20481: PUSH
20482: LD_INT 1
20484: EQUAL
20485: IFFALSE 20555
20487: GO 20489
20489: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20490: LD_INT 6
20492: PPUSH
20493: LD_INT 3
20495: PPUSH
20496: LD_INT 7
20498: PPUSH
20499: LD_INT 10
20501: PPUSH
20502: CALL_OW 12
20506: PPUSH
20507: LD_INT 0
20509: PPUSH
20510: LD_INT 3
20512: PPUSH
20513: LD_INT 8
20515: PPUSH
20516: CALL_OW 12
20520: PPUSH
20521: LD_INT 0
20523: PPUSH
20524: LD_INT 6
20526: PPUSH
20527: LD_EXP 34
20531: PPUSH
20532: LD_EXP 35
20536: PPUSH
20537: CALL_OW 12
20541: PPUSH
20542: LD_INT 17
20544: PPUSH
20545: LD_INT 18
20547: PPUSH
20548: LD_INT 1
20550: PPUSH
20551: CALL 13460 0 11
20555: END
// every 15 15$30 trigger joinEpsilon = 1 do
20556: LD_EXP 27
20560: PUSH
20561: LD_INT 1
20563: EQUAL
20564: IFFALSE 20646
20566: GO 20568
20568: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20569: LD_INT 17
20571: PPUSH
20572: LD_INT 6
20574: PPUSH
20575: LD_INT 5
20577: PPUSH
20578: LD_INT 8
20580: PPUSH
20581: CALL_OW 12
20585: PPUSH
20586: LD_EXP 34
20590: PPUSH
20591: LD_EXP 35
20595: PPUSH
20596: CALL_OW 12
20600: PPUSH
20601: LD_INT 3
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_INT 1
20609: PUSH
20610: LD_INT 3
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PPUSH
20617: LD_INT 43
20619: PUSH
20620: LD_INT 44
20622: PUSH
20623: LD_INT 45
20625: PUSH
20626: LD_INT 46
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: PPUSH
20635: EMPTY
20636: PPUSH
20637: EMPTY
20638: PPUSH
20639: LD_INT 1
20641: PPUSH
20642: CALL 11740 0 11
20646: END
// every 27 27$30 trigger joinEpsilon = 1 do
20647: LD_EXP 27
20651: PUSH
20652: LD_INT 1
20654: EQUAL
20655: IFFALSE 20725
20657: GO 20659
20659: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20660: LD_INT 6
20662: PPUSH
20663: LD_INT 3
20665: PPUSH
20666: LD_INT 7
20668: PPUSH
20669: LD_INT 10
20671: PPUSH
20672: CALL_OW 12
20676: PPUSH
20677: LD_INT 0
20679: PPUSH
20680: LD_INT 3
20682: PPUSH
20683: LD_INT 8
20685: PPUSH
20686: CALL_OW 12
20690: PPUSH
20691: LD_INT 0
20693: PPUSH
20694: LD_INT 6
20696: PPUSH
20697: LD_EXP 34
20701: PPUSH
20702: LD_EXP 35
20706: PPUSH
20707: CALL_OW 12
20711: PPUSH
20712: LD_INT 17
20714: PPUSH
20715: LD_INT 18
20717: PPUSH
20718: LD_INT 1
20720: PPUSH
20721: CALL 13460 0 11
20725: END
// every 27 27$30 trigger joinEpsilon = 1 do
20726: LD_EXP 27
20730: PUSH
20731: LD_INT 1
20733: EQUAL
20734: IFFALSE 20816
20736: GO 20738
20738: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
20739: LD_INT 17
20741: PPUSH
20742: LD_INT 6
20744: PPUSH
20745: LD_INT 5
20747: PPUSH
20748: LD_INT 8
20750: PPUSH
20751: CALL_OW 12
20755: PPUSH
20756: LD_EXP 34
20760: PPUSH
20761: LD_EXP 35
20765: PPUSH
20766: CALL_OW 12
20770: PPUSH
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 1
20776: PPUSH
20777: LD_INT 1
20779: PUSH
20780: LD_INT 3
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PPUSH
20787: LD_INT 43
20789: PUSH
20790: LD_INT 44
20792: PUSH
20793: LD_INT 45
20795: PUSH
20796: LD_INT 46
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PPUSH
20805: EMPTY
20806: PPUSH
20807: EMPTY
20808: PPUSH
20809: LD_INT 1
20811: PPUSH
20812: CALL 11740 0 11
20816: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] do
20817: LD_INT 54
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: CALL_OW 321
20827: PUSH
20828: LD_INT 2
20830: EQUAL
20831: PUSH
20832: LD_INT 55
20834: PPUSH
20835: LD_INT 1
20837: PPUSH
20838: CALL_OW 321
20842: PUSH
20843: LD_INT 2
20845: EQUAL
20846: AND
20847: PUSH
20848: LD_INT 21
20850: PPUSH
20851: LD_INT 1
20853: PPUSH
20854: CALL_OW 321
20858: PUSH
20859: LD_INT 2
20861: EQUAL
20862: AND
20863: PUSH
20864: LD_INT 22
20866: PPUSH
20867: LD_INT 1
20869: PPUSH
20870: CALL_OW 321
20874: PUSH
20875: LD_INT 2
20877: EQUAL
20878: AND
20879: PUSH
20880: LD_INT 12
20882: PPUSH
20883: LD_INT 1
20885: PPUSH
20886: CALL_OW 321
20890: PUSH
20891: LD_INT 1
20893: EQUAL
20894: PUSH
20895: LD_INT 32
20897: PPUSH
20898: LD_INT 1
20900: PPUSH
20901: CALL_OW 321
20905: PUSH
20906: LD_INT 1
20908: EQUAL
20909: OR
20910: PUSH
20911: EMPTY
20912: LIST
20913: AND
20914: IFFALSE 20962
20916: GO 20918
20918: DISABLE
// begin case query ( QEndMission ) of 1 :
20919: LD_STRING QEndMission
20921: PPUSH
20922: CALL_OW 97
20926: PUSH
20927: LD_INT 1
20929: DOUBLE
20930: EQUAL
20931: IFTRUE 20935
20933: GO 20946
20935: POP
// begin end_the_mission_allowed = true ;
20936: LD_ADDR_OWVAR 57
20940: PUSH
20941: LD_INT 1
20943: ST_TO_ADDR
// end ; 2 :
20944: GO 20962
20946: LD_INT 2
20948: DOUBLE
20949: EQUAL
20950: IFTRUE 20954
20952: GO 20961
20954: POP
// begin FinishMission ;
20955: CALL 21067 0 0
// end ; end ;
20959: GO 20962
20961: POP
// end ;
20962: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched do
20963: LD_INT 54
20965: PPUSH
20966: LD_INT 1
20968: PPUSH
20969: CALL_OW 321
20973: PUSH
20974: LD_INT 2
20976: EQUAL
20977: PUSH
20978: LD_INT 55
20980: PPUSH
20981: LD_INT 1
20983: PPUSH
20984: CALL_OW 321
20988: PUSH
20989: LD_INT 2
20991: EQUAL
20992: AND
20993: PUSH
20994: LD_INT 21
20996: PPUSH
20997: LD_INT 1
20999: PPUSH
21000: CALL_OW 321
21004: PUSH
21005: LD_INT 2
21007: EQUAL
21008: AND
21009: PUSH
21010: LD_INT 22
21012: PPUSH
21013: LD_INT 1
21015: PPUSH
21016: CALL_OW 321
21020: PUSH
21021: LD_INT 2
21023: EQUAL
21024: AND
21025: PUSH
21026: LD_INT 12
21028: PPUSH
21029: LD_INT 1
21031: PPUSH
21032: CALL_OW 321
21036: PUSH
21037: LD_INT 2
21039: EQUAL
21040: AND
21041: PUSH
21042: LD_INT 32
21044: PPUSH
21045: LD_INT 1
21047: PPUSH
21048: CALL_OW 321
21052: PUSH
21053: LD_INT 2
21055: EQUAL
21056: AND
21057: IFFALSE 21066
21059: GO 21061
21061: DISABLE
// FinishMission ;
21062: CALL 21067 0 0
21066: END
// export function FinishMission ; begin
21067: LD_INT 0
21069: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
21070: LD_EXP 46
21074: PPUSH
21075: LD_STRING 10_KhatamStatus_1
21077: PPUSH
21078: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
21082: LD_INT 12
21084: PPUSH
21085: LD_INT 1
21087: PPUSH
21088: CALL_OW 321
21092: PUSH
21093: LD_INT 2
21095: EQUAL
21096: IFFALSE 21110
// begin AddMedal ( sights , 1 ) ;
21098: LD_STRING sights
21100: PPUSH
21101: LD_INT 1
21103: PPUSH
21104: CALL_OW 101
// end else
21108: GO 21121
// begin AddMedal ( sights , - 1 ) ;
21110: LD_STRING sights
21112: PPUSH
21113: LD_INT 1
21115: NEG
21116: PPUSH
21117: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
21121: LD_INT 32
21123: PPUSH
21124: LD_INT 1
21126: PPUSH
21127: CALL_OW 321
21131: PUSH
21132: LD_INT 2
21134: EQUAL
21135: IFFALSE 21149
// begin AddMedal ( computers , 1 ) ;
21137: LD_STRING computers
21139: PPUSH
21140: LD_INT 1
21142: PPUSH
21143: CALL_OW 101
// end else
21147: GO 21160
// begin AddMedal ( computers , - 1 ) ;
21149: LD_STRING computers
21151: PPUSH
21152: LD_INT 1
21154: NEG
21155: PPUSH
21156: CALL_OW 101
// end ; if arabianEscape = 0 then
21160: LD_EXP 45
21164: PUSH
21165: LD_INT 0
21167: EQUAL
21168: IFFALSE 21202
// begin AddMedal ( renegades , 2 ) ;
21170: LD_STRING renegades
21172: PPUSH
21173: LD_INT 2
21175: PPUSH
21176: CALL_OW 101
// SaveVariable ( 0 , 10_GensherEscape_1 ) ;
21180: LD_INT 0
21182: PPUSH
21183: LD_STRING 10_GensherEscape_1
21185: PPUSH
21186: CALL_OW 39
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
21190: LD_INT 0
21192: PPUSH
21193: LD_STRING 10_ScientistsEscape_1
21195: PPUSH
21196: CALL_OW 39
// end else
21200: GO 21213
// begin AddMedal ( renegades , - 1 ) ;
21202: LD_STRING renegades
21204: PPUSH
21205: LD_INT 1
21207: NEG
21208: PPUSH
21209: CALL_OW 101
// end ; Query ( kaj ) ;
21213: LD_STRING kaj
21215: PPUSH
21216: CALL_OW 97
// GiveMedals ( Main ) ;
21220: LD_STRING Main
21222: PPUSH
21223: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
21227: LD_INT 22
21229: PUSH
21230: LD_INT 1
21232: PUSH
21233: EMPTY
21234: LIST
21235: LIST
21236: PUSH
21237: LD_INT 23
21239: PUSH
21240: LD_INT 1
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: PUSH
21247: LD_INT 21
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 25
21262: PUSH
21263: LD_INT 1
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 25
21272: PUSH
21273: LD_INT 2
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 25
21282: PUSH
21283: LD_INT 3
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 25
21292: PUSH
21293: LD_INT 4
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: LD_INT 25
21302: PUSH
21303: LD_INT 5
21305: PUSH
21306: EMPTY
21307: LIST
21308: LIST
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: PPUSH
21324: CALL_OW 69
21328: PPUSH
21329: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21333: LD_EXP 1
21337: PPUSH
21338: LD_EXP 47
21342: PUSH
21343: LD_STRING JMM
21345: STR
21346: PPUSH
21347: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21351: LD_EXP 2
21355: PPUSH
21356: LD_EXP 47
21360: PUSH
21361: LD_STRING Brown
21363: STR
21364: PPUSH
21365: CALL 7223 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21369: LD_EXP 3
21373: PPUSH
21374: LD_EXP 47
21378: PUSH
21379: LD_STRING Donaldson
21381: STR
21382: PPUSH
21383: CALL 7223 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21387: LD_EXP 4
21391: PPUSH
21392: LD_EXP 47
21396: PUSH
21397: LD_STRING Bobby
21399: STR
21400: PPUSH
21401: CALL 7223 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21405: LD_EXP 5
21409: PPUSH
21410: LD_EXP 47
21414: PUSH
21415: LD_STRING Cyrus
21417: STR
21418: PPUSH
21419: CALL 7223 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21423: LD_EXP 6
21427: PPUSH
21428: LD_EXP 47
21432: PUSH
21433: LD_STRING Lisa
21435: STR
21436: PPUSH
21437: CALL 7223 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21441: LD_EXP 7
21445: PPUSH
21446: LD_EXP 47
21450: PUSH
21451: LD_STRING Frank
21453: STR
21454: PPUSH
21455: CALL 7223 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21459: LD_EXP 15
21463: PPUSH
21464: LD_EXP 47
21468: PUSH
21469: LD_STRING Gladstone
21471: STR
21472: PPUSH
21473: CALL 7223 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
21477: LD_EXP 8
21481: PPUSH
21482: LD_EXP 47
21486: PUSH
21487: LD_STRING Kikuchi
21489: STR
21490: PPUSH
21491: CALL 7223 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21495: LD_EXP 12
21499: PPUSH
21500: LD_EXP 47
21504: PUSH
21505: LD_STRING Denis
21507: STR
21508: PPUSH
21509: CALL 7223 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21513: LD_EXP 13
21517: PPUSH
21518: LD_EXP 47
21522: PUSH
21523: LD_STRING Joan
21525: STR
21526: PPUSH
21527: CALL 7223 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
21531: LD_EXP 9
21535: PPUSH
21536: LD_EXP 47
21540: PUSH
21541: LD_STRING Houten
21543: STR
21544: PPUSH
21545: CALL 7223 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
21549: LD_EXP 11
21553: PPUSH
21554: LD_EXP 47
21558: PUSH
21559: LD_STRING Simms
21561: STR
21562: PPUSH
21563: CALL 7223 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
21567: LD_EXP 10
21571: PPUSH
21572: LD_EXP 47
21576: PUSH
21577: LD_STRING Gary
21579: STR
21580: PPUSH
21581: CALL 7223 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
21585: LD_EXP 17
21589: PPUSH
21590: LD_EXP 47
21594: PUSH
21595: LD_STRING DeltaDoctor
21597: STR
21598: PPUSH
21599: CALL 7223 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
21603: LD_INT 50
21605: PUSH
21606: EMPTY
21607: LIST
21608: PUSH
21609: LD_INT 22
21611: PUSH
21612: LD_INT 1
21614: PUSH
21615: EMPTY
21616: LIST
21617: LIST
21618: PUSH
21619: LD_INT 21
21621: PUSH
21622: LD_INT 1
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PUSH
21629: LD_INT 2
21631: PUSH
21632: LD_INT 25
21634: PUSH
21635: LD_INT 1
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PUSH
21642: LD_INT 25
21644: PUSH
21645: LD_INT 2
21647: PUSH
21648: EMPTY
21649: LIST
21650: LIST
21651: PUSH
21652: LD_INT 25
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 25
21664: PUSH
21665: LD_INT 4
21667: PUSH
21668: EMPTY
21669: LIST
21670: LIST
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: PUSH
21679: EMPTY
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: PPUSH
21685: CALL_OW 69
21689: PUSH
21690: LD_EXP 1
21694: PUSH
21695: LD_EXP 2
21699: PUSH
21700: LD_EXP 3
21704: PUSH
21705: LD_EXP 4
21709: PUSH
21710: LD_EXP 5
21714: PUSH
21715: LD_EXP 6
21719: PUSH
21720: LD_EXP 7
21724: PUSH
21725: LD_EXP 15
21729: PUSH
21730: LD_EXP 8
21734: PUSH
21735: LD_EXP 12
21739: PUSH
21740: LD_EXP 13
21744: PUSH
21745: LD_EXP 9
21749: PUSH
21750: LD_EXP 11
21754: PUSH
21755: LD_EXP 10
21759: PUSH
21760: LD_EXP 17
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: DIFF
21782: PPUSH
21783: LD_STRING 10_other_survivors
21785: PPUSH
21786: CALL_OW 38
// YouWin ;
21790: CALL_OW 103
// end ; end_of_file
21794: LD_VAR 0 1
21798: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21799: LD_EXP 1
21803: PPUSH
21804: CALL_OW 301
21808: IFFALSE 21820
21810: GO 21812
21812: DISABLE
// YouLost ( JMM ) ; end_of_file
21813: LD_STRING JMM
21815: PPUSH
21816: CALL_OW 104
21820: END
// every 1 1$30 do
21821: GO 21823
21823: DISABLE
// begin enable ;
21824: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
21825: LD_INT 3
21827: PPUSH
21828: LD_INT 5
21830: PPUSH
21831: CALL_OW 12
21835: PPUSH
21836: LD_INT 16
21838: PPUSH
21839: LD_INT 1
21841: PPUSH
21842: CALL_OW 55
// end ;
21846: END
