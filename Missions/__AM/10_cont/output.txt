// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 4
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24872 0 0
// PrepareDifficulty ;
 250: CALL 9996 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19860 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19860 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19860 0 2
// PrepareArabianCommander ;
 354: CALL 3201 0 0
// PrepareArabian ;
 358: CALL 3253 0 0
// BuildArabianBase ;
 362: CALL 12811 0 0
// TameApemans ;
 366: CALL 18675 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9601 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9601 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9601 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9601 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9601 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9601 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9601 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9601 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9601 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9601 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9601 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9601 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9601 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9601 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9601 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING 08_Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9601 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9601 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9601 0 2
1944: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
1945: LD_STRING 08_Kikuchi
1947: PPUSH
1948: CALL_OW 28
1952: IFFALSE 1970
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
1954: LD_ADDR_EXP 8
1958: PUSH
1959: LD_STRING 08_Kikuchi
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: CALL 9601 0 2
1969: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1970: LD_ADDR_EXP 22
1974: PUSH
1975: LD_STRING 09_others
1977: PPUSH
1978: CALL_OW 31
1982: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1983: LD_ADDR_EXP 23
1987: PUSH
1988: LD_STRING 09_apes
1990: PPUSH
1991: CALL_OW 31
1995: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1996: LD_EXP 11
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2011: LD_EXP 12
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2026: LD_EXP 13
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2041: LD_EXP 14
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2056: LD_EXP 15
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2071: LD_EXP 17
2075: PPUSH
2076: LD_INT 1
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2086: LD_EXP 8
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2101: LD_EXP 11
2105: PUSH
2106: LD_EXP 14
2110: PUSH
2111: LD_EXP 12
2115: PUSH
2116: LD_EXP 15
2120: PUSH
2121: LD_EXP 17
2125: PUSH
2126: LD_EXP 13
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// if others09 > 2 then
2146: LD_EXP 22
2150: PUSH
2151: LD_INT 2
2153: GREATER
2154: IFFALSE 2235
// begin for i := 1 to 3 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 3
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2231
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2172: LD_EXP 22
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2193: LD_ADDR_EXP 22
2197: PUSH
2198: LD_EXP 22
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 3
2210: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2211: LD_EXP 22
2215: PUSH
2216: LD_VAR 0 2
2220: ARRAY
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: CALL_OW 336
// end ;
2229: GO 2169
2231: POP
2232: POP
// end else
2233: GO 2295
// begin for i in others09 do
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_EXP 22
2244: PUSH
2245: FOR_IN
2246: IFFALSE 2293
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2248: LD_VAR 0 2
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: CALL_OW 49
// others09 = others09 diff i ;
2263: LD_ADDR_EXP 22
2267: PUSH
2268: LD_EXP 22
2272: PUSH
2273: LD_VAR 0 2
2277: DIFF
2278: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL_OW 336
// end ;
2291: GO 2245
2293: POP
2294: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2295: LD_INT 22
2297: PUSH
2298: LD_INT 4
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 25
2307: PUSH
2308: LD_INT 2
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PPUSH
2319: CALL_OW 69
2323: PUSH
2324: LD_INT 0
2326: EQUAL
2327: IFFALSE 2459
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2329: LD_ADDR_VAR 0 3
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_INT 4
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PPUSH
2358: CALL_OW 69
2362: PUSH
2363: LD_EXP 11
2367: PUSH
2368: LD_EXP 14
2372: PUSH
2373: LD_EXP 12
2377: PUSH
2378: LD_EXP 15
2382: PUSH
2383: LD_EXP 17
2387: PUSH
2388: LD_EXP 13
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: DIFF
2401: ST_TO_ADDR
// if not tmp then
2402: LD_VAR 0 3
2406: NOT
2407: IFFALSE 2443
// begin if Denis then
2409: LD_EXP 12
2413: IFFALSE 2429
// SetClass ( Denis , 2 ) else
2415: LD_EXP 12
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL_OW 336
2427: GO 2441
// SetClass ( DeltaDoctor , 2 ) ;
2429: LD_EXP 17
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 336
// end else
2441: GO 2459
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2443: LD_VAR 0 3
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 336
// end ; end ; for i in ape09 do
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_EXP 23
2468: PUSH
2469: FOR_IN
2470: IFFALSE 2489
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 49
2487: GO 2469
2489: POP
2490: POP
// uc_side = 4 ;
2491: LD_ADDR_OWVAR 20
2495: PUSH
2496: LD_INT 4
2498: ST_TO_ADDR
// hc_class := 1 ;
2499: LD_ADDR_OWVAR 28
2503: PUSH
2504: LD_INT 1
2506: ST_TO_ADDR
// hc_sex := sex_female ;
2507: LD_ADDR_OWVAR 27
2511: PUSH
2512: LD_INT 2
2514: ST_TO_ADDR
// hc_gallery :=  ;
2515: LD_ADDR_OWVAR 33
2519: PUSH
2520: LD_STRING 
2522: ST_TO_ADDR
// hc_name :=  ;
2523: LD_ADDR_OWVAR 26
2527: PUSH
2528: LD_STRING 
2530: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2531: LD_ADDR_OWVAR 31
2535: PUSH
2536: LD_INT 1
2538: PUSH
2539: LD_INT 7
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: ST_TO_ADDR
// AmScout = CreateHuman ;
2554: LD_ADDR_EXP 18
2558: PUSH
2559: CALL_OW 44
2563: ST_TO_ADDR
// end ;
2564: LD_VAR 0 1
2568: RET
// export function PrepareCornell ; begin
2569: LD_INT 0
2571: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2572: LD_INT 4
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 343
// uc_side = 4 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 4
2589: ST_TO_ADDR
// uc_nation = 1 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 1
2597: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2598: LD_ADDR_EXP 19
2602: PUSH
2603: LD_STRING 03_Cornel
2605: PPUSH
2606: LD_INT 1
2608: PPUSH
2609: CALL 9601 0 2
2613: ST_TO_ADDR
// if not Cornell then
2614: LD_EXP 19
2618: NOT
2619: IFFALSE 2623
// exit ;
2621: GO 2731
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2623: LD_EXP 19
2627: PPUSH
2628: LD_INT 8
2630: PPUSH
2631: LD_INT 0
2633: PPUSH
2634: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2638: LD_EXP 19
2642: PPUSH
2643: LD_INT 350
2645: PPUSH
2646: CALL_OW 234
// if IsInUnit ( JMM ) then
2650: LD_EXP 1
2654: PPUSH
2655: CALL_OW 310
2659: IFFALSE 2702
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2661: LD_EXP 19
2665: PPUSH
2666: LD_EXP 1
2670: PPUSH
2671: CALL_OW 310
2675: PPUSH
2676: CALL_OW 250
2680: PPUSH
2681: LD_EXP 1
2685: PPUSH
2686: CALL_OW 310
2690: PPUSH
2691: CALL_OW 251
2695: PPUSH
2696: CALL_OW 111
2700: GO 2731
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2702: LD_EXP 19
2706: PPUSH
2707: LD_EXP 1
2711: PPUSH
2712: CALL_OW 250
2716: PPUSH
2717: LD_EXP 1
2721: PPUSH
2722: CALL_OW 251
2726: PPUSH
2727: CALL_OW 111
// end ; end_of_file
2731: LD_VAR 0 1
2735: RET
// export function PrepareRussians ; var i , un ; begin
2736: LD_INT 0
2738: PPUSH
2739: PPUSH
2740: PPUSH
// uc_side = 3 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// uc_nation = 3 ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2757: LD_ADDR_EXP 25
2761: PUSH
2762: LD_STRING Tsaritsyn
2764: PPUSH
2765: LD_INT 0
2767: PPUSH
2768: CALL 9601 0 2
2772: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 3
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL_OW 49
// for i = 1 to 14 do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: DOUBLE
2794: LD_INT 1
2796: DEC
2797: ST_TO_ADDR
2798: LD_INT 14
2800: PUSH
2801: FOR_TO
2802: IFFALSE 2888
// begin uc_side = 3 ;
2804: LD_ADDR_OWVAR 20
2808: PUSH
2809: LD_INT 3
2811: ST_TO_ADDR
// uc_nation = 3 ;
2812: LD_ADDR_OWVAR 21
2816: PUSH
2817: LD_INT 3
2819: ST_TO_ADDR
// hc_gallery =  ;
2820: LD_ADDR_OWVAR 33
2824: PUSH
2825: LD_STRING 
2827: ST_TO_ADDR
// hc_name =  ;
2828: LD_ADDR_OWVAR 26
2832: PUSH
2833: LD_STRING 
2835: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2836: LD_INT 0
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_EXP 36
2846: PPUSH
2847: LD_EXP 37
2851: PPUSH
2852: CALL_OW 12
2856: PPUSH
2857: CALL_OW 380
// un = CreateHuman ;
2861: LD_ADDR_VAR 0 3
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2871: LD_VAR 0 3
2875: PPUSH
2876: LD_INT 3
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// end ;
2886: GO 2801
2888: POP
2889: POP
// for i = 1 to 6 do
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 6
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2990
// begin uc_side = 3 ;
2906: LD_ADDR_OWVAR 20
2910: PUSH
2911: LD_INT 3
2913: ST_TO_ADDR
// uc_nation = 3 ;
2914: LD_ADDR_OWVAR 21
2918: PUSH
2919: LD_INT 3
2921: ST_TO_ADDR
// hc_gallery =  ;
2922: LD_ADDR_OWVAR 33
2926: PUSH
2927: LD_STRING 
2929: ST_TO_ADDR
// hc_name =  ;
2930: LD_ADDR_OWVAR 26
2934: PUSH
2935: LD_STRING 
2937: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2938: LD_INT 0
2940: PPUSH
2941: LD_INT 2
2943: PPUSH
2944: LD_EXP 36
2948: PPUSH
2949: LD_EXP 37
2953: PPUSH
2954: CALL_OW 12
2958: PPUSH
2959: CALL_OW 380
// un = CreateHuman ;
2963: LD_ADDR_VAR 0 3
2967: PUSH
2968: CALL_OW 44
2972: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2973: LD_VAR 0 3
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 0
2983: PPUSH
2984: CALL_OW 49
// end ;
2988: GO 2903
2990: POP
2991: POP
// for i = 1 to 6 do
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: DOUBLE
2998: LD_INT 1
3000: DEC
3001: ST_TO_ADDR
3002: LD_INT 6
3004: PUSH
3005: FOR_TO
3006: IFFALSE 3092
// begin uc_side = 3 ;
3008: LD_ADDR_OWVAR 20
3012: PUSH
3013: LD_INT 3
3015: ST_TO_ADDR
// uc_nation = 3 ;
3016: LD_ADDR_OWVAR 21
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// hc_gallery =  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_name =  ;
3032: LD_ADDR_OWVAR 26
3036: PUSH
3037: LD_STRING 
3039: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3040: LD_INT 0
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_EXP 36
3050: PPUSH
3051: LD_EXP 37
3055: PPUSH
3056: CALL_OW 12
3060: PPUSH
3061: CALL_OW 380
// un = CreateHuman ;
3065: LD_ADDR_VAR 0 3
3069: PUSH
3070: CALL_OW 44
3074: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3075: LD_VAR 0 3
3079: PPUSH
3080: LD_INT 3
3082: PPUSH
3083: LD_INT 0
3085: PPUSH
3086: CALL_OW 49
// end ;
3090: GO 3005
3092: POP
3093: POP
// for i = 1 to 4 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 4
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3194
// begin uc_side = 3 ;
3110: LD_ADDR_OWVAR 20
3114: PUSH
3115: LD_INT 3
3117: ST_TO_ADDR
// uc_nation = 3 ;
3118: LD_ADDR_OWVAR 21
3122: PUSH
3123: LD_INT 3
3125: ST_TO_ADDR
// hc_gallery =  ;
3126: LD_ADDR_OWVAR 33
3130: PUSH
3131: LD_STRING 
3133: ST_TO_ADDR
// hc_name =  ;
3134: LD_ADDR_OWVAR 26
3138: PUSH
3139: LD_STRING 
3141: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3142: LD_INT 0
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: LD_EXP 36
3152: PPUSH
3153: LD_EXP 37
3157: PPUSH
3158: CALL_OW 12
3162: PPUSH
3163: CALL_OW 380
// un = CreateHuman ;
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: CALL_OW 44
3176: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3177: LD_VAR 0 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 0
3187: PPUSH
3188: CALL_OW 49
// end ;
3192: GO 3107
3194: POP
3195: POP
// end ; end_of_file
3196: LD_VAR 0 1
3200: RET
// export function PrepareArabianCommander ; begin
3201: LD_INT 0
3203: PPUSH
// uc_side = 2 ;
3204: LD_ADDR_OWVAR 20
3208: PUSH
3209: LD_INT 2
3211: ST_TO_ADDR
// uc_nation = 2 ;
3212: LD_ADDR_OWVAR 21
3216: PUSH
3217: LD_INT 2
3219: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3220: LD_ADDR_EXP 26
3224: PUSH
3225: LD_STRING Dietrich
3227: PPUSH
3228: CALL_OW 25
3232: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3233: LD_EXP 26
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: LD_INT 0
3243: PPUSH
3244: CALL_OW 49
// end ;
3248: LD_VAR 0 1
3252: RET
// export function PrepareArabian ; var i , un , veh ; begin
3253: LD_INT 0
3255: PPUSH
3256: PPUSH
3257: PPUSH
3258: PPUSH
// uc_side := 2 ;
3259: LD_ADDR_OWVAR 20
3263: PUSH
3264: LD_INT 2
3266: ST_TO_ADDR
// uc_nation := 2 ;
3267: LD_ADDR_OWVAR 21
3271: PUSH
3272: LD_INT 2
3274: ST_TO_ADDR
// if not Ahmed then
3275: LD_EXP 27
3279: NOT
3280: IFFALSE 3348
// begin InitHc ;
3282: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 1
3291: PPUSH
3292: LD_EXP 36
3296: PPUSH
3297: LD_EXP 37
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 12
3310: PPUSH
3311: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3315: LD_ADDR_OWVAR 26
3319: PUSH
3320: LD_STRING Ahmed Abbasid
3322: ST_TO_ADDR
// Ahmed := CreateHuman ;
3323: LD_ADDR_EXP 27
3327: PUSH
3328: CALL_OW 44
3332: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3333: LD_EXP 27
3337: PPUSH
3338: LD_INT 4
3340: PPUSH
3341: LD_INT 0
3343: PPUSH
3344: CALL_OW 49
// end ; for i = 1 to 4 do
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: DOUBLE
3354: LD_INT 1
3356: DEC
3357: ST_TO_ADDR
3358: LD_INT 4
3360: PUSH
3361: FOR_TO
3362: IFFALSE 3448
// begin uc_side = 2 ;
3364: LD_ADDR_OWVAR 20
3368: PUSH
3369: LD_INT 2
3371: ST_TO_ADDR
// uc_nation = 2 ;
3372: LD_ADDR_OWVAR 21
3376: PUSH
3377: LD_INT 2
3379: ST_TO_ADDR
// hc_gallery =  ;
3380: LD_ADDR_OWVAR 33
3384: PUSH
3385: LD_STRING 
3387: ST_TO_ADDR
// hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 2
3401: PPUSH
3402: LD_EXP 36
3406: PPUSH
3407: LD_EXP 37
3411: PPUSH
3412: CALL_OW 12
3416: PPUSH
3417: CALL_OW 380
// un = CreateHuman ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: CALL_OW 44
3430: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_INT 4
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 49
// end ;
3446: GO 3361
3448: POP
3449: POP
// for i = 1 to 5 do
3450: LD_ADDR_VAR 0 2
3454: PUSH
3455: DOUBLE
3456: LD_INT 1
3458: DEC
3459: ST_TO_ADDR
3460: LD_INT 5
3462: PUSH
3463: FOR_TO
3464: IFFALSE 3550
// begin uc_side = 2 ;
3466: LD_ADDR_OWVAR 20
3470: PUSH
3471: LD_INT 2
3473: ST_TO_ADDR
// uc_nation = 2 ;
3474: LD_ADDR_OWVAR 21
3478: PUSH
3479: LD_INT 2
3481: ST_TO_ADDR
// hc_gallery =  ;
3482: LD_ADDR_OWVAR 33
3486: PUSH
3487: LD_STRING 
3489: ST_TO_ADDR
// hc_name =  ;
3490: LD_ADDR_OWVAR 26
3494: PUSH
3495: LD_STRING 
3497: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_EXP 36
3508: PPUSH
3509: LD_EXP 37
3513: PPUSH
3514: CALL_OW 12
3518: PPUSH
3519: CALL_OW 380
// un = CreateHuman ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3533: LD_VAR 0 3
3537: PPUSH
3538: LD_INT 4
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// end ;
3548: GO 3463
3550: POP
3551: POP
// for i = 1 to 4 do
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: DOUBLE
3558: LD_INT 1
3560: DEC
3561: ST_TO_ADDR
3562: LD_INT 4
3564: PUSH
3565: FOR_TO
3566: IFFALSE 3652
// begin uc_side = 2 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 2
3575: ST_TO_ADDR
// uc_nation = 2 ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 2
3583: ST_TO_ADDR
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_EXP 36
3610: PPUSH
3611: LD_EXP 37
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3635: LD_VAR 0 3
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: CALL_OW 49
// end ;
3650: GO 3565
3652: POP
3653: POP
// for i = 1 to 2 do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_INT 2
3666: PUSH
3667: FOR_TO
3668: IFFALSE 3798
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_INT 22
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 21
3687: PUSH
3688: LD_INT 2
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 58
3697: PUSH
3698: EMPTY
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PPUSH
3706: CALL_OW 69
3710: ST_TO_ADDR
// uc_side = 2 ;
3711: LD_ADDR_OWVAR 20
3715: PUSH
3716: LD_INT 2
3718: ST_TO_ADDR
// uc_nation = 2 ;
3719: LD_ADDR_OWVAR 21
3723: PUSH
3724: LD_INT 2
3726: ST_TO_ADDR
// hc_gallery =  ;
3727: LD_ADDR_OWVAR 33
3731: PUSH
3732: LD_STRING 
3734: ST_TO_ADDR
// hc_name =  ;
3735: LD_ADDR_OWVAR 26
3739: PUSH
3740: LD_STRING 
3742: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3743: LD_INT 0
3745: PPUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_EXP 36
3753: PPUSH
3754: LD_EXP 37
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: CALL_OW 380
// un = CreateHuman ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: CALL_OW 44
3777: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3778: LD_VAR 0 3
3782: PPUSH
3783: LD_VAR 0 4
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: PPUSH
3792: CALL_OW 52
// end ;
3796: GO 3667
3798: POP
3799: POP
// end ;
3800: LD_VAR 0 1
3804: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
3812: PPUSH
// for i := 1 to 2 do
3813: LD_ADDR_VAR 0 2
3817: PUSH
3818: DOUBLE
3819: LD_INT 1
3821: DEC
3822: ST_TO_ADDR
3823: LD_INT 2
3825: PUSH
3826: FOR_TO
3827: IFFALSE 3953
// begin uc_side = 5 ;
3829: LD_ADDR_OWVAR 20
3833: PUSH
3834: LD_INT 5
3836: ST_TO_ADDR
// uc_nation = 2 ;
3837: LD_ADDR_OWVAR 21
3841: PUSH
3842: LD_INT 2
3844: ST_TO_ADDR
// vc_chassis := 31 ;
3845: LD_ADDR_OWVAR 37
3849: PUSH
3850: LD_INT 31
3852: ST_TO_ADDR
// vc_control := control_rider ;
3853: LD_ADDR_OWVAR 38
3857: PUSH
3858: LD_INT 4
3860: ST_TO_ADDR
// animal := CreateVehicle ;
3861: LD_ADDR_VAR 0 3
3865: PUSH
3866: CALL_OW 45
3870: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3871: LD_VAR 0 3
3875: PPUSH
3876: LD_INT 7
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 49
// hc_gallery =  ;
3886: LD_ADDR_OWVAR 33
3890: PUSH
3891: LD_STRING 
3893: ST_TO_ADDR
// hc_name =  ;
3894: LD_ADDR_OWVAR 26
3898: PUSH
3899: LD_STRING 
3901: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3902: LD_INT 0
3904: PPUSH
3905: LD_INT 11
3907: PPUSH
3908: LD_EXP 36
3912: PPUSH
3913: LD_EXP 37
3917: PPUSH
3918: CALL_OW 12
3922: PPUSH
3923: CALL_OW 380
// un = CreateHuman ;
3927: LD_ADDR_VAR 0 4
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3937: LD_VAR 0 4
3941: PPUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 52
// end ;
3951: GO 3826
3953: POP
3954: POP
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3962: LD_ADDR_VAR 0 5
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: PPUSH
3982: LD_VAR 0 2
3986: PPUSH
3987: CALL_OW 74
3991: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3992: LD_ADDR_VAR 0 6
3996: PUSH
3997: LD_INT 22
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_INT 59
4012: PUSH
4013: EMPTY
4014: LIST
4015: PUSH
4016: LD_INT 21
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 21
4028: PUSH
4029: LD_INT 2
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: PPUSH
4049: CALL_OW 69
4053: PPUSH
4054: LD_VAR 0 2
4058: PPUSH
4059: CALL_OW 74
4063: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4064: LD_ADDR_VAR 0 2
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 5
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 11
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: PUSH
4098: FOR_IN
4099: IFFALSE 4169
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4101: LD_VAR 0 2
4105: PPUSH
4106: LD_VAR 0 5
4110: PPUSH
4111: CALL_OW 296
4115: PUSH
4116: LD_INT 8
4118: PLUS
4119: PUSH
4120: LD_VAR 0 2
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 296
4134: LESS
4135: IFFALSE 4153
// ComAttackUnit ( i , target1 ) else
4137: LD_VAR 0 2
4141: PPUSH
4142: LD_VAR 0 5
4146: PPUSH
4147: CALL_OW 115
4151: GO 4167
// ComAttackUnit ( i , target2 ) ;
4153: LD_VAR 0 2
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: CALL_OW 115
// end ;
4167: GO 4098
4169: POP
4170: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 5
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 25
4183: PUSH
4184: LD_INT 11
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: PUSH
4204: LD_INT 22
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 69
4218: PUSH
4219: LD_INT 0
4221: EQUAL
4222: OR
4223: IFFALSE 3955
// end ; end_of_file
4225: LD_VAR 0 1
4229: RET
// every 1 do
4230: GO 4232
4232: DISABLE
// begin InGameOn ;
4233: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 19
4242: PPUSH
4243: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4247: LD_EXP 11
4251: PPUSH
4252: CALL_OW 87
// wait ( 0 0$3 ) ;
4256: LD_INT 105
4258: PPUSH
4259: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4263: LD_EXP 1
4267: PPUSH
4268: CALL_OW 310
4272: PPUSH
4273: CALL_OW 85
// Wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// if IsOk ( Gary ) then
4284: LD_EXP 10
4288: PPUSH
4289: CALL_OW 302
4293: IFFALSE 4331
// begin Say ( Gary , D2-Gary-1 ) ;
4295: LD_EXP 10
4299: PPUSH
4300: LD_STRING D2-Gary-1
4302: PPUSH
4303: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4307: LD_EXP 1
4311: PPUSH
4312: LD_STRING D2-JMM-1
4314: PPUSH
4315: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4319: LD_EXP 10
4323: PPUSH
4324: LD_STRING D2-Gary-2
4326: PPUSH
4327: CALL_OW 88
// end ; InGameOff ;
4331: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4335: LD_STRING M1
4337: PPUSH
4338: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4342: LD_INT 38
4344: PPUSH
4345: LD_INT 1
4347: PPUSH
4348: LD_INT 100
4350: PPUSH
4351: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4355: LD_INT 47
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 50
4363: PPUSH
4364: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4368: LD_INT 47
4370: PPUSH
4371: LD_INT 3
4373: PPUSH
4374: LD_INT 50
4376: PPUSH
4377: CALL_OW 291
// SaveForQuickRestart ;
4381: CALL_OW 22
// end ;
4385: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4386: LD_EXP 1
4390: PPUSH
4391: LD_EXP 11
4395: PPUSH
4396: CALL_OW 296
4400: PUSH
4401: LD_INT 15
4403: LESS
4404: IFFALSE 4880
4406: GO 4408
4408: DISABLE
// begin InGameOn ;
4409: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4413: LD_EXP 1
4417: PPUSH
4418: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4422: LD_EXP 1
4426: PPUSH
4427: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4431: LD_EXP 1
4435: PPUSH
4436: LD_EXP 11
4440: PPUSH
4441: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4445: LD_INT 35
4447: PPUSH
4448: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4452: LD_EXP 11
4456: PUSH
4457: LD_EXP 13
4461: PUSH
4462: LD_EXP 12
4466: PUSH
4467: LD_EXP 14
4471: PUSH
4472: LD_EXP 8
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PPUSH
4484: LD_EXP 1
4488: PPUSH
4489: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4493: LD_EXP 1
4497: PPUSH
4498: LD_EXP 11
4502: PPUSH
4503: CALL_OW 296
4507: PUSH
4508: LD_INT 5
4510: LESS
4511: IFFALSE 4445
// ComTurnUnit ( JMM , Simms ) ;
4513: LD_EXP 1
4517: PPUSH
4518: LD_EXP 11
4522: PPUSH
4523: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4527: LD_EXP 11
4531: PUSH
4532: LD_EXP 13
4536: PUSH
4537: LD_EXP 12
4541: PUSH
4542: LD_EXP 14
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: PPUSH
4553: LD_EXP 1
4557: PPUSH
4558: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4562: LD_EXP 1
4566: PUSH
4567: LD_EXP 11
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4580: LD_EXP 11
4584: PPUSH
4585: LD_STRING D2a-Sim-1
4587: PPUSH
4588: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4592: LD_EXP 1
4596: PPUSH
4597: LD_STRING D2a-JMM-1
4599: PPUSH
4600: CALL_OW 88
// if IsOk ( Joan ) then
4604: LD_EXP 13
4608: PPUSH
4609: CALL_OW 302
4613: IFFALSE 4665
// begin ComTurnUnit ( JMM , Joan ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_EXP 13
4624: PPUSH
4625: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4629: LD_EXP 13
4633: PPUSH
4634: LD_STRING D2b-Joan-1
4636: PPUSH
4637: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4641: LD_EXP 1
4645: PPUSH
4646: LD_STRING D2b-JMM-1
4648: PPUSH
4649: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4653: LD_EXP 13
4657: PPUSH
4658: LD_STRING D2b-Joan-2
4660: PPUSH
4661: CALL_OW 88
// end ; if IsOk ( Denis ) then
4665: LD_EXP 12
4669: PPUSH
4670: CALL_OW 302
4674: IFFALSE 4702
// begin ComTurnUnit ( JMM , Denis ) ;
4676: LD_EXP 1
4680: PPUSH
4681: LD_EXP 12
4685: PPUSH
4686: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4690: LD_EXP 12
4694: PPUSH
4695: LD_STRING D2c-Den-1
4697: PPUSH
4698: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
4702: LD_EXP 8
4706: PPUSH
4707: CALL_OW 302
4711: PUSH
4712: LD_STRING 08_Kikuchi
4714: PPUSH
4715: CALL_OW 28
4719: NOT
4720: AND
4721: IFFALSE 4790
// begin repeat wait ( 0 0$1 ) ;
4723: LD_INT 35
4725: PPUSH
4726: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4730: LD_EXP 8
4734: PPUSH
4735: LD_EXP 1
4739: PPUSH
4740: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4744: LD_EXP 1
4748: PPUSH
4749: LD_EXP 8
4753: PPUSH
4754: CALL_OW 296
4758: PUSH
4759: LD_INT 5
4761: LESS
4762: IFFALSE 4723
// ComTurnUnit ( JMM , Kikuchi ) ;
4764: LD_EXP 1
4768: PPUSH
4769: LD_EXP 8
4773: PPUSH
4774: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4778: LD_EXP 8
4782: PPUSH
4783: LD_STRING D3b-Yam-1
4785: PPUSH
4786: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4790: LD_EXP 14
4794: PPUSH
4795: CALL_OW 302
4799: IFFALSE 4839
// begin ComTurnUnit ( JMM , Khatam ) ;
4801: LD_EXP 1
4805: PPUSH
4806: LD_EXP 14
4810: PPUSH
4811: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4815: LD_EXP 1
4819: PPUSH
4820: LD_STRING D2c-JMM-1
4822: PPUSH
4823: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4827: LD_EXP 14
4831: PPUSH
4832: LD_STRING D2c-Khat-1
4834: PPUSH
4835: CALL_OW 88
// end ; InGameOff ;
4839: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4843: LD_INT 22
4845: PUSH
4846: LD_INT 4
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4865: LD_STRING M1a
4867: PPUSH
4868: CALL_OW 337
// joinEpsilon = 1 ;
4872: LD_ADDR_EXP 29
4876: PUSH
4877: LD_INT 1
4879: ST_TO_ADDR
// end ;
4880: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4881: LD_INT 38
4883: PPUSH
4884: LD_INT 1
4886: PPUSH
4887: CALL_OW 289
4891: PUSH
4892: LD_INT 0
4894: EQUAL
4895: PUSH
4896: LD_INT 47
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: CALL_OW 289
4906: PUSH
4907: LD_INT 0
4909: EQUAL
4910: AND
4911: PUSH
4912: LD_INT 47
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL_OW 289
4922: PUSH
4923: LD_INT 0
4925: EQUAL
4926: AND
4927: IFFALSE 4952
4929: GO 4931
4931: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4932: LD_INT 38
4934: PUSH
4935: LD_INT 47
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PPUSH
4942: LD_INT 62
4944: PPUSH
4945: LD_INT 6
4947: PPUSH
4948: CALL_OW 111
4952: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4953: LD_EXP 61
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: IFFALSE 6093
4963: GO 4965
4965: DISABLE
4966: LD_INT 0
4968: PPUSH
4969: PPUSH
4970: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4971: LD_ADDR_VAR 0 1
4975: PUSH
4976: LD_INT 22
4978: PUSH
4979: LD_INT 1
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 4
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 26
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: PPUSH
5011: CALL_OW 69
5015: PUSH
5016: LD_EXP 1
5020: PUSH
5021: LD_EXP 2
5025: PUSH
5026: LD_EXP 3
5030: PUSH
5031: LD_EXP 4
5035: PUSH
5036: LD_EXP 5
5040: PUSH
5041: LD_EXP 6
5045: PUSH
5046: LD_EXP 7
5050: PUSH
5051: LD_EXP 8
5055: PUSH
5056: LD_EXP 9
5060: PUSH
5061: LD_EXP 10
5065: PUSH
5066: LD_EXP 11
5070: PUSH
5071: LD_EXP 12
5075: PUSH
5076: LD_EXP 13
5080: PUSH
5081: LD_EXP 14
5085: PUSH
5086: LD_EXP 15
5090: PUSH
5091: LD_EXP 16
5095: PUSH
5096: LD_EXP 17
5100: PUSH
5101: LD_EXP 18
5105: PUSH
5106: LD_EXP 19
5110: PUSH
5111: LD_EXP 24
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: DIFF
5138: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_INT 22
5146: PUSH
5147: LD_INT 1
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 25
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 25
5179: PUSH
5180: LD_INT 2
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 25
5189: PUSH
5190: LD_INT 3
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 2
5222: PUSH
5223: LD_EXP 3
5227: PUSH
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 5
5237: PUSH
5238: LD_EXP 6
5242: PUSH
5243: LD_EXP 7
5247: PUSH
5248: LD_EXP 8
5252: PUSH
5253: LD_EXP 9
5257: PUSH
5258: LD_EXP 10
5262: PUSH
5263: LD_EXP 11
5267: PUSH
5268: LD_EXP 12
5272: PUSH
5273: LD_EXP 13
5277: PUSH
5278: LD_EXP 14
5282: PUSH
5283: LD_EXP 15
5287: PUSH
5288: LD_EXP 16
5292: PUSH
5293: LD_EXP 17
5297: PUSH
5298: LD_EXP 18
5302: PUSH
5303: LD_EXP 19
5307: PUSH
5308: LD_EXP 24
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: DIFF
5335: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5336: LD_EXP 10
5340: PUSH
5341: LD_VAR 0 2
5345: OR
5346: PUSH
5347: LD_EXP 17
5351: PUSH
5352: LD_VAR 0 1
5356: OR
5357: AND
5358: IFFALSE 5577
// begin DialogueOn ;
5360: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5364: LD_EXP 17
5368: PPUSH
5369: CALL_OW 302
5373: IFFALSE 5389
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5375: LD_EXP 17
5379: PPUSH
5380: LD_STRING D3-Sci1-1
5382: PPUSH
5383: CALL_OW 88
5387: GO 5401
// Say ( tmp1 , D3-Sci1-1 ) ;
5389: LD_VAR 0 1
5393: PPUSH
5394: LD_STRING D3-Sci1-1
5396: PPUSH
5397: CALL_OW 88
// if IsOk ( Gary ) then
5401: LD_EXP 10
5405: PPUSH
5406: CALL_OW 302
5410: IFFALSE 5426
// Say ( Gary , D3-Gary-1 ) else
5412: LD_EXP 10
5416: PPUSH
5417: LD_STRING D3-Gary-1
5419: PPUSH
5420: CALL_OW 88
5424: GO 5438
// Say ( tmp2 , D3-Gary-1 ) ;
5426: LD_VAR 0 2
5430: PPUSH
5431: LD_STRING D3-Gary-1
5433: PPUSH
5434: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 302
5447: IFFALSE 5463
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5449: LD_EXP 17
5453: PPUSH
5454: LD_STRING D3-Sci1-2
5456: PPUSH
5457: CALL_OW 88
5461: GO 5475
// Say ( tmp1 , D3-Sci1-2 ) ;
5463: LD_VAR 0 1
5467: PPUSH
5468: LD_STRING D3-Sci1-2
5470: PPUSH
5471: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_STRING D3-JMM-2
5482: PPUSH
5483: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5487: LD_EXP 17
5491: PPUSH
5492: CALL_OW 302
5496: IFFALSE 5512
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING D3-Sci1-3
5505: PPUSH
5506: CALL_OW 88
5510: GO 5524
// Say ( tmp1 , D3-Sci1-3 ) ;
5512: LD_VAR 0 1
5516: PPUSH
5517: LD_STRING D3-Sci1-3
5519: PPUSH
5520: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D3-JMM-3
5531: PPUSH
5532: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5536: LD_EXP 17
5540: PPUSH
5541: CALL_OW 302
5545: IFFALSE 5561
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5547: LD_EXP 17
5551: PPUSH
5552: LD_STRING D3-Sci1-4
5554: PPUSH
5555: CALL_OW 88
5559: GO 5573
// Say ( tmp1 , D3-Sci1-4 ) ;
5561: LD_VAR 0 1
5565: PPUSH
5566: LD_STRING D3-Sci1-4
5568: PPUSH
5569: CALL_OW 88
// DialogueOff ;
5573: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5577: LD_INT 12
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5590: LD_INT 32
5592: PPUSH
5593: LD_INT 1
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5603: LD_INT 12
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5616: LD_INT 33
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5629: LD_STRING M2
5631: PPUSH
5632: CALL_OW 337
// wait ( 3 3$0 ) ;
5636: LD_INT 6300
5638: PPUSH
5639: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5643: LD_INT 35
5645: PPUSH
5646: CALL_OW 67
// until not InBattle ( 1 ) ;
5650: LD_INT 1
5652: PPUSH
5653: CALL_OW 463
5657: NOT
5658: IFFALSE 5643
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5660: LD_EXP 11
5664: PPUSH
5665: CALL_OW 302
5669: PUSH
5670: LD_EXP 17
5674: PPUSH
5675: CALL_OW 302
5679: AND
5680: IFFALSE 5849
// begin DialogueOn ;
5682: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5686: LD_EXP 11
5690: PPUSH
5691: LD_STRING D3a-Sim-1
5693: PPUSH
5694: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5698: LD_EXP 17
5702: PPUSH
5703: LD_STRING D3a-Sci1-1
5705: PPUSH
5706: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5710: LD_EXP 11
5714: PPUSH
5715: LD_STRING D3a-Sim-2
5717: PPUSH
5718: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_STRING D3a-Sci1-2
5729: PPUSH
5730: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5734: LD_EXP 11
5738: PPUSH
5739: LD_STRING D3a-Sim-3
5741: PPUSH
5742: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5746: LD_EXP 17
5750: PPUSH
5751: LD_STRING D3a-Sci1-3
5753: PPUSH
5754: CALL_OW 88
// if IsOK ( Joan ) then
5758: LD_EXP 13
5762: PPUSH
5763: CALL_OW 302
5767: IFFALSE 5783
// Say ( Simms , D3a-Sim-4 ) else
5769: LD_EXP 11
5773: PPUSH
5774: LD_STRING D3a-Sim-4
5776: PPUSH
5777: CALL_OW 88
5781: GO 5795
// Say ( Simms , D3a-Sim-4a ) ;
5783: LD_EXP 11
5787: PPUSH
5788: LD_STRING D3a-Sim-4a
5790: PPUSH
5791: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5795: LD_EXP 17
5799: PPUSH
5800: LD_STRING D3a-Sci1-4
5802: PPUSH
5803: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5807: LD_EXP 11
5811: PPUSH
5812: LD_STRING D3a-Sim-5
5814: PPUSH
5815: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5819: LD_EXP 17
5823: PPUSH
5824: LD_STRING D3a-Sci1-5
5826: PPUSH
5827: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5831: LD_EXP 11
5835: PPUSH
5836: LD_STRING D3a-Sim-6
5838: PPUSH
5839: CALL_OW 88
// DialogueOff ;
5843: CALL_OW 7
// end else
5847: GO 6093
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5849: LD_ADDR_VAR 0 3
5853: PUSH
5854: LD_INT 22
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 25
5866: PUSH
5867: LD_INT 4
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: PUSH
5883: LD_EXP 11
5887: PUSH
5888: LD_EXP 14
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: DIFF
5897: ST_TO_ADDR
// if tmp3 > 0 then
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 0
5905: GREATER
5906: IFFALSE 6093
// begin DialogueOn ;
5908: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5912: LD_EXP 11
5916: PPUSH
5917: LD_STRING D3a-Sim-1
5919: PPUSH
5920: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 1
5931: ARRAY
5932: PPUSH
5933: LD_STRING D3a-Sci1-1
5935: PPUSH
5936: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5940: LD_EXP 11
5944: PPUSH
5945: LD_STRING D3a-Sim-2
5947: PPUSH
5948: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: PPUSH
5961: LD_STRING D3a-Sci1-2
5963: PPUSH
5964: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5968: LD_EXP 11
5972: PPUSH
5973: LD_STRING D3a-Sim-3
5975: PPUSH
5976: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5980: LD_VAR 0 3
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: PPUSH
5989: LD_STRING D3a-Sci1-3
5991: PPUSH
5992: CALL_OW 88
// if IsOK ( Joan ) then
5996: LD_EXP 13
6000: PPUSH
6001: CALL_OW 302
6005: IFFALSE 6021
// Say ( Simms , D3a-Sim-4 ) else
6007: LD_EXP 11
6011: PPUSH
6012: LD_STRING D3a-Sim-4
6014: PPUSH
6015: CALL_OW 88
6019: GO 6033
// Say ( Simms , D3a-Sim-4a ) ;
6021: LD_EXP 11
6025: PPUSH
6026: LD_STRING D3a-Sim-4a
6028: PPUSH
6029: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6033: LD_VAR 0 3
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: LD_STRING D3a-Sci1-4
6044: PPUSH
6045: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6049: LD_EXP 11
6053: PPUSH
6054: LD_STRING D3a-Sim-5
6056: PPUSH
6057: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PPUSH
6070: LD_STRING D3a-Sci1-5
6072: PPUSH
6073: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6077: LD_EXP 11
6081: PPUSH
6082: LD_STRING D3a-Sim-6
6084: PPUSH
6085: CALL_OW 88
// DialogueOff ;
6089: CALL_OW 7
// end ; end ; end ;
6093: PPOPN 3
6095: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6096: LD_EXP 29
6100: PUSH
6101: LD_INT 1
6103: EQUAL
6104: IFFALSE 6424
6106: GO 6108
6108: DISABLE
6109: LD_INT 0
6111: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6112: LD_EXP 18
6116: PPUSH
6117: LD_STRING D4-FSol1-1
6119: PPUSH
6120: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6124: LD_STRING M3
6126: PPUSH
6127: CALL_OW 337
// PrepareRussians ;
6131: CALL 2736 0 0
// rnd = Rand ( 1 , 100 ) ;
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_INT 100
6145: PPUSH
6146: CALL_OW 12
6150: ST_TO_ADDR
// if difficulty = 1 then
6151: LD_OWVAR 67
6155: PUSH
6156: LD_INT 1
6158: EQUAL
6159: IFFALSE 6242
// begin if rnd > 0 and rnd < 51 then
6161: LD_VAR 0 1
6165: PUSH
6166: LD_INT 0
6168: GREATER
6169: PUSH
6170: LD_VAR 0 1
6174: PUSH
6175: LD_INT 51
6177: LESS
6178: AND
6179: IFFALSE 6188
// BuildRussianBase ( 2 ) ;
6181: LD_INT 2
6183: PPUSH
6184: CALL 10316 0 1
// if rnd > 50 and rnd < 81 then
6188: LD_VAR 0 1
6192: PUSH
6193: LD_INT 50
6195: GREATER
6196: PUSH
6197: LD_VAR 0 1
6201: PUSH
6202: LD_INT 81
6204: LESS
6205: AND
6206: IFFALSE 6215
// BuildRussianBase ( 1 ) ;
6208: LD_INT 1
6210: PPUSH
6211: CALL 10316 0 1
// if rnd > 80 and rnd < 101 then
6215: LD_VAR 0 1
6219: PUSH
6220: LD_INT 80
6222: GREATER
6223: PUSH
6224: LD_VAR 0 1
6228: PUSH
6229: LD_INT 101
6231: LESS
6232: AND
6233: IFFALSE 6242
// BuildRussianBase ( 3 ) ;
6235: LD_INT 3
6237: PPUSH
6238: CALL 10316 0 1
// end ; if difficulty = 2 then
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 2
6249: EQUAL
6250: IFFALSE 6333
// begin if rnd > 0 and rnd < 61 then
6252: LD_VAR 0 1
6256: PUSH
6257: LD_INT 0
6259: GREATER
6260: PUSH
6261: LD_VAR 0 1
6265: PUSH
6266: LD_INT 61
6268: LESS
6269: AND
6270: IFFALSE 6279
// BuildRussianBase ( 2 ) ;
6272: LD_INT 2
6274: PPUSH
6275: CALL 10316 0 1
// if rnd > 60 and rnd < 81 then
6279: LD_VAR 0 1
6283: PUSH
6284: LD_INT 60
6286: GREATER
6287: PUSH
6288: LD_VAR 0 1
6292: PUSH
6293: LD_INT 81
6295: LESS
6296: AND
6297: IFFALSE 6306
// BuildRussianBase ( 1 ) ;
6299: LD_INT 1
6301: PPUSH
6302: CALL 10316 0 1
// if rnd > 80 and rnd < 101 then
6306: LD_VAR 0 1
6310: PUSH
6311: LD_INT 80
6313: GREATER
6314: PUSH
6315: LD_VAR 0 1
6319: PUSH
6320: LD_INT 101
6322: LESS
6323: AND
6324: IFFALSE 6333
// BuildRussianBase ( 3 ) ;
6326: LD_INT 3
6328: PPUSH
6329: CALL 10316 0 1
// end ; if difficulty = 3 then
6333: LD_OWVAR 67
6337: PUSH
6338: LD_INT 3
6340: EQUAL
6341: IFFALSE 6424
// begin if rnd > 0 and rnd < 71 then
6343: LD_VAR 0 1
6347: PUSH
6348: LD_INT 0
6350: GREATER
6351: PUSH
6352: LD_VAR 0 1
6356: PUSH
6357: LD_INT 71
6359: LESS
6360: AND
6361: IFFALSE 6370
// BuildRussianBase ( 3 ) ;
6363: LD_INT 3
6365: PPUSH
6366: CALL 10316 0 1
// if rnd > 70 and rnd < 81 then
6370: LD_VAR 0 1
6374: PUSH
6375: LD_INT 70
6377: GREATER
6378: PUSH
6379: LD_VAR 0 1
6383: PUSH
6384: LD_INT 81
6386: LESS
6387: AND
6388: IFFALSE 6397
// BuildRussianBase ( 2 ) ;
6390: LD_INT 2
6392: PPUSH
6393: CALL 10316 0 1
// if rnd > 80 and rnd < 101 then
6397: LD_VAR 0 1
6401: PUSH
6402: LD_INT 80
6404: GREATER
6405: PUSH
6406: LD_VAR 0 1
6410: PUSH
6411: LD_INT 101
6413: LESS
6414: AND
6415: IFFALSE 6424
// BuildRussianBase ( 1 ) ;
6417: LD_INT 1
6419: PPUSH
6420: CALL 10316 0 1
// end ; end ;
6424: PPOPN 1
6426: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6427: LD_INT 54
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: CALL_OW 321
6437: PUSH
6438: LD_INT 2
6440: EQUAL
6441: PUSH
6442: LD_INT 21
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 321
6452: PUSH
6453: LD_INT 2
6455: EQUAL
6456: OR
6457: PUSH
6458: LD_INT 22
6460: PPUSH
6461: LD_INT 1
6463: PPUSH
6464: CALL_OW 321
6468: PUSH
6469: LD_INT 2
6471: EQUAL
6472: OR
6473: IFFALSE 6785
6475: GO 6477
6477: DISABLE
6478: LD_INT 0
6480: PPUSH
6481: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6482: LD_EXP 17
6486: PPUSH
6487: CALL_OW 302
6491: IFFALSE 6505
// tmp := DeltaDoctor else
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_EXP 17
6502: ST_TO_ADDR
6503: GO 6515
// tmp := Denis ;
6505: LD_ADDR_VAR 0 2
6509: PUSH
6510: LD_EXP 12
6514: ST_TO_ADDR
// if tmp then
6515: LD_VAR 0 2
6519: IFFALSE 6613
// begin DialogueOn ;
6521: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6525: LD_EXP 1
6529: PPUSH
6530: LD_STRING D6-JMM-1
6532: PPUSH
6533: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6537: LD_VAR 0 2
6541: PPUSH
6542: LD_STRING D6-Sci1-1
6544: PPUSH
6545: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6549: LD_EXP 1
6553: PPUSH
6554: LD_STRING D6-JMM-2
6556: PPUSH
6557: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6561: LD_VAR 0 2
6565: PPUSH
6566: LD_STRING D6-Sci1-2
6568: PPUSH
6569: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6573: LD_EXP 1
6577: PPUSH
6578: LD_STRING D6-JMM-3
6580: PPUSH
6581: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6585: LD_VAR 0 2
6589: PPUSH
6590: LD_STRING D6-Sci1-3
6592: PPUSH
6593: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6597: LD_EXP 1
6601: PPUSH
6602: LD_STRING D6-JMM-4
6604: PPUSH
6605: CALL_OW 88
// DialogueOff ;
6609: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6613: LD_INT 1050
6615: PPUSH
6616: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6620: LD_EXP 49
6624: PUSH
6625: LD_INT 0
6627: EQUAL
6628: PUSH
6629: LD_EXP 14
6633: PPUSH
6634: CALL_OW 302
6638: AND
6639: IFFALSE 6697
// begin DialogueOn ;
6641: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6645: LD_EXP 27
6649: PPUSH
6650: LD_STRING D5-Ar1-1
6652: PPUSH
6653: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6657: LD_EXP 26
6661: PPUSH
6662: LD_STRING D5-Diet-1
6664: PPUSH
6665: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6669: LD_EXP 27
6673: PPUSH
6674: LD_STRING D5-Ar1-2
6676: PPUSH
6677: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6681: LD_EXP 26
6685: PPUSH
6686: LD_STRING D5-Diet-2
6688: PPUSH
6689: CALL_OW 88
// DialogueOff ;
6693: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6697: LD_INT 2100
6699: PUSH
6700: LD_INT 3150
6702: PUSH
6703: LD_INT 4200
6705: PUSH
6706: LD_INT 5250
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 1
6717: PPUSH
6718: LD_INT 4
6720: PPUSH
6721: CALL_OW 12
6725: ARRAY
6726: PPUSH
6727: CALL_OW 67
// if arabianTrait = 0 then
6731: LD_EXP 49
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: IFFALSE 6785
// begin arabianTrait = 1 ;
6741: LD_ADDR_EXP 49
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6749: LD_INT 2
6751: PPUSH
6752: LD_INT 3
6754: PPUSH
6755: LD_INT 1
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6765: LD_INT 2
6767: PPUSH
6768: LD_INT 6
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 80
// PrepareArabianTrait ;
6781: CALL 6788 0 0
// end ; end ;
6785: PPOPN 2
6787: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6788: LD_INT 0
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6796: LD_INT 22
6798: PUSH
6799: LD_INT 2
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 25
6808: PUSH
6809: LD_INT 4
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PPUSH
6820: CALL_OW 69
6824: PPUSH
6825: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6829: LD_INT 22
6831: PUSH
6832: LD_INT 2
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 69
6857: PPUSH
6858: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6862: LD_EXP 26
6866: PPUSH
6867: LD_INT 8
6869: PPUSH
6870: CALL_OW 336
// wait ( 0 0$3 ) ;
6874: LD_INT 105
6876: PPUSH
6877: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6881: LD_INT 76
6883: PPUSH
6884: LD_INT 19
6886: PPUSH
6887: CALL_OW 84
// DialogueOn ;
6891: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6895: LD_INT 22
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 26
6907: PUSH
6908: LD_INT 1
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 2
6917: PUSH
6918: LD_INT 25
6920: PUSH
6921: LD_INT 1
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 25
6930: PUSH
6931: LD_INT 2
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 25
6940: PUSH
6941: LD_INT 3
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 25
6950: PUSH
6951: LD_INT 4
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 5
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 69
6985: PPUSH
6986: LD_STRING D8-Sol1-1
6988: PPUSH
6989: LD_STRING D8-Sol1-1
6991: PPUSH
6992: CALL 9658 0 3
// if IsOK ( DeltaDoctor ) then
6996: LD_EXP 17
7000: PPUSH
7001: CALL_OW 302
7005: IFFALSE 7021
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7007: LD_EXP 17
7011: PPUSH
7012: LD_STRING D8-Sci1-1
7014: PPUSH
7015: CALL_OW 88
7019: GO 7122
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7021: LD_INT 22
7023: PUSH
7024: LD_INT 1
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 26
7033: PUSH
7034: LD_INT 1
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 2
7043: PUSH
7044: LD_INT 25
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 25
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 25
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 25
7076: PUSH
7077: LD_INT 4
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 25
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 69
7111: PPUSH
7112: LD_STRING D8-Sol1-1
7114: PPUSH
7115: LD_STRING D8-Sol1-1
7117: PPUSH
7118: CALL 9658 0 3
// Say ( JMM , D8-JMM-1 ) ;
7122: LD_EXP 1
7126: PPUSH
7127: LD_STRING D8-JMM-1
7129: PPUSH
7130: CALL_OW 88
// DialogueOff ;
7134: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7138: LD_INT 2
7140: PPUSH
7141: LD_INT 2
7143: PPUSH
7144: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7148: LD_INT 1
7150: PPUSH
7151: LD_INT 2
7153: PPUSH
7154: LD_INT 2
7156: PPUSH
7157: LD_INT 1
7159: PPUSH
7160: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7164: LD_INT 3
7166: PPUSH
7167: LD_INT 2
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7180: LD_EXP 26
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7192: LD_STRING M4
7194: PPUSH
7195: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7199: LD_ADDR_VAR 0 5
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 2
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 2
7226: PUSH
7227: LD_INT 25
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 25
7239: PUSH
7240: LD_INT 8
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 15
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PPUSH
7268: CALL_OW 69
7272: PUSH
7273: LD_EXP 26
7277: PUSH
7278: EMPTY
7279: LIST
7280: DIFF
7281: ST_TO_ADDR
// if IsLive ( Khatam ) then
7282: LD_EXP 14
7286: PPUSH
7287: CALL_OW 300
7291: IFFALSE 7305
// DoNotAttack ( 2 , Khatam ) ;
7293: LD_INT 2
7295: PPUSH
7296: LD_EXP 14
7300: PPUSH
7301: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7305: LD_VAR 0 5
7309: PPUSH
7310: CALL_OW 122
// wait ( 0 0$1 ) ;
7314: LD_INT 35
7316: PPUSH
7317: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
7321: LD_VAR 0 5
7325: PPUSH
7326: LD_INT 84
7328: PPUSH
7329: LD_INT 22
7331: PPUSH
7332: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7336: LD_VAR 0 5
7340: PPUSH
7341: LD_INT 82
7343: PPUSH
7344: LD_INT 5
7346: PPUSH
7347: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_INT 95
7358: PPUSH
7359: LD_INT 12
7361: PPUSH
7362: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7366: LD_VAR 0 5
7370: PPUSH
7371: LD_INT 102
7373: PPUSH
7374: LD_INT 11
7376: PPUSH
7377: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_INT 116
7388: PPUSH
7389: LD_INT 15
7391: PPUSH
7392: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7396: LD_VAR 0 5
7400: PPUSH
7401: LD_INT 140
7403: PPUSH
7404: LD_INT 25
7406: PPUSH
7407: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7411: LD_VAR 0 5
7415: PPUSH
7416: LD_INT 160
7418: PPUSH
7419: LD_INT 56
7421: PPUSH
7422: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7426: LD_VAR 0 5
7430: PPUSH
7431: LD_INT 189
7433: PPUSH
7434: LD_INT 79
7436: PPUSH
7437: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
7441: LD_ADDR_VAR 0 6
7445: PUSH
7446: LD_INT 22
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 21
7458: PUSH
7459: LD_INT 1
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 3
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 4
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 12
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 25
7511: PUSH
7512: LD_INT 16
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: PPUSH
7532: CALL_OW 69
7536: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7537: LD_ADDR_VAR 0 6
7541: PUSH
7542: LD_VAR 0 6
7546: PUSH
7547: LD_EXP 26
7551: ADD
7552: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7553: LD_INT 350
7555: PPUSH
7556: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7560: LD_VAR 0 6
7564: PPUSH
7565: CALL_OW 122
// wait ( 0 0$1 ) ;
7569: LD_INT 35
7571: PPUSH
7572: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
7576: LD_VAR 0 6
7580: PPUSH
7581: LD_INT 81
7583: PPUSH
7584: LD_INT 5
7586: PPUSH
7587: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7591: LD_VAR 0 6
7595: PPUSH
7596: LD_INT 82
7598: PPUSH
7599: LD_INT 5
7601: PPUSH
7602: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7606: LD_VAR 0 6
7610: PPUSH
7611: LD_INT 95
7613: PPUSH
7614: LD_INT 12
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7621: LD_VAR 0 6
7625: PPUSH
7626: LD_INT 102
7628: PPUSH
7629: LD_INT 11
7631: PPUSH
7632: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7636: LD_VAR 0 6
7640: PPUSH
7641: LD_INT 116
7643: PPUSH
7644: LD_INT 15
7646: PPUSH
7647: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7651: LD_VAR 0 6
7655: PPUSH
7656: LD_INT 140
7658: PPUSH
7659: LD_INT 25
7661: PPUSH
7662: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7666: LD_VAR 0 6
7670: PPUSH
7671: LD_INT 160
7673: PPUSH
7674: LD_INT 56
7676: PPUSH
7677: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7681: LD_VAR 0 6
7685: PPUSH
7686: LD_INT 189
7688: PPUSH
7689: LD_INT 79
7691: PPUSH
7692: CALL_OW 171
// arabianAttackersAI = 1 ;
7696: LD_ADDR_EXP 46
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7704: LD_INT 350
7706: PPUSH
7707: CALL_OW 67
// if IsOk ( Gary ) then
7711: LD_EXP 10
7715: PPUSH
7716: CALL_OW 302
7720: IFFALSE 7734
// Say ( Gary , D8a-Gary-1 ) ;
7722: LD_EXP 10
7726: PPUSH
7727: LD_STRING D8a-Gary-1
7729: PPUSH
7730: CALL_OW 88
// wait ( 0 0$5 ) ;
7734: LD_INT 175
7736: PPUSH
7737: CALL_OW 67
// if IsOK ( Khatam ) then
7741: LD_EXP 14
7745: PPUSH
7746: CALL_OW 302
7750: IFFALSE 8286
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7752: LD_ADDR_VAR 0 3
7756: PUSH
7757: LD_INT 22
7759: PUSH
7760: LD_INT 1
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 1
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 25
7782: PUSH
7783: LD_INT 2
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 25
7792: PUSH
7793: LD_INT 3
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 25
7802: PUSH
7803: LD_INT 4
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 25
7812: PUSH
7813: LD_INT 5
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 25
7822: PUSH
7823: LD_INT 8
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 69
7847: PUSH
7848: LD_EXP 1
7852: PUSH
7853: LD_EXP 2
7857: PUSH
7858: LD_EXP 3
7862: PUSH
7863: LD_EXP 4
7867: PUSH
7868: LD_EXP 5
7872: PUSH
7873: LD_EXP 6
7877: PUSH
7878: LD_EXP 7
7882: PUSH
7883: LD_EXP 8
7887: PUSH
7888: LD_EXP 9
7892: PUSH
7893: LD_EXP 10
7897: PUSH
7898: LD_EXP 11
7902: PUSH
7903: LD_EXP 12
7907: PUSH
7908: LD_EXP 13
7912: PUSH
7913: LD_EXP 14
7917: PUSH
7918: LD_EXP 15
7922: PUSH
7923: LD_EXP 16
7927: PUSH
7928: LD_EXP 17
7932: PUSH
7933: LD_EXP 19
7937: PUSH
7938: LD_EXP 24
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: DIFF
7964: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7965: LD_EXP 14
7969: PPUSH
7970: LD_INT 8
7972: PPUSH
7973: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7977: LD_EXP 14
7981: PPUSH
7982: CALL_OW 122
// wait ( 0 0$1 ) ;
7986: LD_INT 35
7988: PPUSH
7989: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7993: LD_EXP 14
7997: PPUSH
7998: CALL_OW 121
// wait ( 0 0$1 ) ;
8002: LD_INT 35
8004: PPUSH
8005: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8009: LD_EXP 14
8013: PPUSH
8014: LD_INT 7
8016: PPUSH
8017: CALL_OW 113
// if not tmp then
8021: LD_VAR 0 3
8025: NOT
8026: IFFALSE 8030
// exit ;
8028: GO 8286
// DialogueOn ;
8030: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8034: LD_VAR 0 3
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: CALL_OW 258
8047: PUSH
8048: LD_INT 1
8050: EQUAL
8051: IFFALSE 8071
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8053: LD_VAR 0 3
8057: PUSH
8058: LD_INT 1
8060: ARRAY
8061: PPUSH
8062: LD_STRING D8b-Sol1-1
8064: PPUSH
8065: CALL_OW 88
8069: GO 8087
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 1
8078: ARRAY
8079: PPUSH
8080: LD_STRING D8b-FSol1-1
8082: PPUSH
8083: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8087: LD_EXP 14
8091: PPUSH
8092: LD_STRING D8b-Khat-1
8094: PPUSH
8095: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8099: LD_VAR 0 3
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: CALL_OW 258
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8136
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: PPUSH
8127: LD_STRING D8b-Sol1-2
8129: PPUSH
8130: CALL_OW 88
8134: GO 8152
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 1
8143: ARRAY
8144: PPUSH
8145: LD_STRING D8b-FSol1-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8152: LD_EXP 14
8156: PPUSH
8157: LD_STRING D8b-Khat-2
8159: PPUSH
8160: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8164: LD_VAR 0 3
8168: PUSH
8169: LD_INT 1
8171: ARRAY
8172: PPUSH
8173: CALL_OW 258
8177: PUSH
8178: LD_INT 1
8180: EQUAL
8181: IFFALSE 8201
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8183: LD_VAR 0 3
8187: PUSH
8188: LD_INT 1
8190: ARRAY
8191: PPUSH
8192: LD_STRING D8b-Sol1-3
8194: PPUSH
8195: CALL_OW 88
8199: GO 8217
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: PPUSH
8210: LD_STRING D8b-FSol1-3
8212: PPUSH
8213: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8217: LD_EXP 14
8221: PPUSH
8222: LD_STRING D8b-Khat-3
8224: PPUSH
8225: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 1
8236: ARRAY
8237: PPUSH
8238: CALL_OW 258
8242: PUSH
8243: LD_INT 1
8245: EQUAL
8246: IFFALSE 8266
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: LD_STRING D8b-Sol1-4
8259: PPUSH
8260: CALL_OW 88
8264: GO 8282
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 1
8273: ARRAY
8274: PPUSH
8275: LD_STRING D8b-FSol1-4
8277: PPUSH
8278: CALL_OW 88
// DialogueOff ;
8282: CALL_OW 7
// end ; end ;
8286: LD_VAR 0 1
8290: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8291: LD_INT 7
8293: PPUSH
8294: LD_INT 22
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PPUSH
8304: CALL_OW 70
8308: PUSH
8309: LD_INT 0
8311: GREATER
8312: PUSH
8313: LD_EXP 14
8317: PPUSH
8318: LD_INT 7
8320: PPUSH
8321: CALL_OW 308
8325: OR
8326: IFFALSE 8533
8328: GO 8330
8330: DISABLE
8331: LD_INT 0
8333: PPUSH
// begin enable ;
8334: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8335: LD_ADDR_VAR 0 1
8339: PUSH
8340: LD_INT 7
8342: PPUSH
8343: LD_INT 22
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: FOR_IN
8359: IFFALSE 8500
// begin if GetClass ( i ) = 4 then
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 257
8370: PUSH
8371: LD_INT 4
8373: EQUAL
8374: IFFALSE 8386
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8376: LD_INT 1
8378: PPUSH
8379: LD_STRING 10_ScientistsEscape_1
8381: PPUSH
8382: CALL_OW 39
// if i = Dietrich then
8386: LD_VAR 0 1
8390: PUSH
8391: LD_EXP 26
8395: EQUAL
8396: IFFALSE 8406
// GensherStatus = 1 ;
8398: LD_ADDR_EXP 51
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 257
8415: PUSH
8416: LD_INT 1
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 257
8429: PUSH
8430: LD_INT 2
8432: EQUAL
8433: OR
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: CALL_OW 257
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: OR
8449: PUSH
8450: LD_VAR 0 1
8454: PPUSH
8455: CALL_OW 257
8459: PUSH
8460: LD_INT 4
8462: EQUAL
8463: OR
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 257
8474: PUSH
8475: LD_INT 8
8477: EQUAL
8478: OR
8479: IFFALSE 8489
// arabianEscape = 1 ;
8481: LD_ADDR_EXP 47
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// RemoveUnit ( i ) ;
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 64
// end ;
8498: GO 8358
8500: POP
8501: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8502: LD_EXP 14
8506: PPUSH
8507: LD_INT 7
8509: PPUSH
8510: CALL_OW 308
8514: IFFALSE 8533
// begin KhatamStatus = 1 ;
8516: LD_ADDR_EXP 52
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8524: LD_EXP 14
8528: PPUSH
8529: CALL_OW 64
// end ; end ;
8533: PPOPN 1
8535: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8536: LD_INT 22
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 21
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PPUSH
8560: CALL_OW 69
8564: PUSH
8565: LD_INT 0
8567: EQUAL
8568: PUSH
8569: LD_INT 22
8571: PUSH
8572: LD_INT 4
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 21
8581: PUSH
8582: LD_INT 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 69
8597: PUSH
8598: LD_INT 0
8600: EQUAL
8601: AND
8602: IFFALSE 8615
8604: GO 8606
8606: DISABLE
// arabianDefeated = 1 ;
8607: LD_ADDR_EXP 48
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
8615: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8616: LD_INT 54
8618: PPUSH
8619: LD_INT 1
8621: PPUSH
8622: CALL_OW 321
8626: PUSH
8627: LD_INT 2
8629: EQUAL
8630: PUSH
8631: LD_INT 55
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 321
8641: PUSH
8642: LD_INT 2
8644: EQUAL
8645: AND
8646: PUSH
8647: LD_INT 21
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: CALL_OW 321
8657: PUSH
8658: LD_INT 2
8660: EQUAL
8661: AND
8662: PUSH
8663: LD_INT 22
8665: PPUSH
8666: LD_INT 1
8668: PPUSH
8669: CALL_OW 321
8673: PUSH
8674: LD_INT 2
8676: EQUAL
8677: AND
8678: PUSH
8679: LD_INT 12
8681: PPUSH
8682: LD_INT 1
8684: PPUSH
8685: CALL_OW 321
8689: PUSH
8690: LD_INT 2
8692: EQUAL
8693: AND
8694: PUSH
8695: LD_INT 32
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: CALL_OW 321
8705: PUSH
8706: LD_INT 2
8708: EQUAL
8709: AND
8710: PUSH
8711: LD_EXP 59
8715: PUSH
8716: LD_INT 0
8718: EQUAL
8719: AND
8720: PUSH
8721: LD_EXP 49
8725: PUSH
8726: LD_INT 0
8728: EQUAL
8729: AND
8730: PUSH
8731: LD_OWVAR 1
8735: PUSH
8736: LD_INT 31500
8738: GREATEREQUAL
8739: AND
8740: IFFALSE 8757
8742: GO 8744
8744: DISABLE
// begin arabianTrait = 1 ;
8745: LD_ADDR_EXP 49
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// PrepareArabianTrait ;
8753: CALL 6788 0 0
// end ;
8757: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
8758: LD_EXP 29
8762: PUSH
8763: LD_STRING 02_mikhailStatus_1
8765: PPUSH
8766: LD_INT 0
8768: PPUSH
8769: CALL_OW 30
8773: PUSH
8774: LD_INT 1
8776: EQUAL
8777: AND
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 5
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PPUSH
8789: CALL_OW 69
8793: PUSH
8794: LD_INT 0
8796: EQUAL
8797: AND
8798: PUSH
8799: LD_INT 22
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 69
8827: PUSH
8828: LD_INT 0
8830: EQUAL
8831: PUSH
8832: LD_EXP 49
8836: PUSH
8837: LD_INT 0
8839: EQUAL
8840: OR
8841: AND
8842: IFFALSE 8851
8844: GO 8846
8846: DISABLE
// PrepareCornell ;
8847: CALL 2569 0 0
8851: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8852: LD_INT 22
8854: PUSH
8855: LD_INT 1
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 69
8866: PPUSH
8867: LD_EXP 19
8871: PPUSH
8872: CALL_OW 74
8876: PPUSH
8877: LD_EXP 19
8881: PPUSH
8882: CALL_OW 296
8886: PUSH
8887: LD_INT 9
8889: LESS
8890: IFFALSE 9111
8892: GO 8894
8894: DISABLE
// begin InGameOn ;
8895: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8899: LD_EXP 19
8903: PPUSH
8904: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8908: LD_EXP 19
8912: PPUSH
8913: LD_STRING D7-Corn-1
8915: PPUSH
8916: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8920: LD_INT 22
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 25
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 25
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 25
8965: PUSH
8966: LD_INT 4
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 25
8975: PUSH
8976: LD_INT 5
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PPUSH
8995: CALL_OW 69
8999: PPUSH
9000: LD_STRING D7-Sol1-1
9002: PPUSH
9003: LD_STRING D7-FSol1-1
9005: PPUSH
9006: CALL 9658 0 3
// CenterNowOnUnits ( Cornell ) ;
9010: LD_EXP 19
9014: PPUSH
9015: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9019: LD_EXP 19
9023: PPUSH
9024: LD_STRING D7-Corn-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D7-JMM-2
9038: PPUSH
9039: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9043: LD_EXP 19
9047: PPUSH
9048: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9052: LD_EXP 19
9056: PPUSH
9057: LD_STRING D7-Corn-3
9059: PPUSH
9060: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9064: LD_EXP 19
9068: PPUSH
9069: LD_INT 250
9071: PPUSH
9072: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9076: LD_EXP 19
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 235
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9095: LD_EXP 1
9099: PPUSH
9100: LD_STRING D7-JMM-3
9102: PPUSH
9103: CALL_OW 88
// InGameOff ;
9107: CALL_OW 9
// end ;
9111: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9112: LD_EXP 19
9116: PPUSH
9117: CALL_OW 255
9121: PUSH
9122: LD_INT 1
9124: EQUAL
9125: PUSH
9126: LD_EXP 19
9130: PPUSH
9131: CALL_OW 256
9135: PUSH
9136: LD_INT 350
9138: GREATER
9139: AND
9140: IFFALSE 9333
9142: GO 9144
9144: DISABLE
// begin DialogueOn ;
9145: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9149: LD_EXP 1
9153: PPUSH
9154: LD_STRING D7a-JMM-1
9156: PPUSH
9157: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9161: LD_EXP 19
9165: PPUSH
9166: LD_STRING D7a-Corn-1
9168: PPUSH
9169: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9173: LD_EXP 1
9177: PPUSH
9178: LD_STRING D7a-JMM-2
9180: PPUSH
9181: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9185: LD_EXP 19
9189: PPUSH
9190: LD_STRING D7a-Corn-2
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9197: LD_EXP 1
9201: PPUSH
9202: LD_STRING D7a-JMM-3
9204: PPUSH
9205: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9209: LD_EXP 19
9213: PPUSH
9214: LD_STRING D7a-Corn-3
9216: PPUSH
9217: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9221: LD_EXP 1
9225: PPUSH
9226: LD_STRING D7a-JMM-4
9228: PPUSH
9229: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9233: LD_EXP 19
9237: PPUSH
9238: LD_STRING D7a-Corn-4
9240: PPUSH
9241: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9245: LD_EXP 1
9249: PPUSH
9250: LD_STRING D7a-JMM-5
9252: PPUSH
9253: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9257: LD_EXP 19
9261: PPUSH
9262: LD_STRING D7a-Corn-5
9264: PPUSH
9265: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9269: LD_EXP 1
9273: PPUSH
9274: LD_STRING D7a-JMM-6
9276: PPUSH
9277: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9281: LD_EXP 19
9285: PPUSH
9286: LD_STRING D7a-Corn-6
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D7a-JMM-7
9300: PPUSH
9301: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9305: LD_EXP 19
9309: PPUSH
9310: LD_STRING D7a-Corn-7
9312: PPUSH
9313: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9317: LD_EXP 1
9321: PPUSH
9322: LD_STRING D7a-JMM-8
9324: PPUSH
9325: CALL_OW 88
// DialogueOff ;
9329: CALL_OW 7
// end ;
9333: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9334: LD_EXP 58
9338: PUSH
9339: LD_EXP 1
9343: PPUSH
9344: CALL_OW 302
9348: PUSH
9349: LD_EXP 5
9353: PPUSH
9354: CALL_OW 302
9358: OR
9359: AND
9360: IFFALSE 9450
9362: GO 9364
9364: DISABLE
// begin Wait ( 0 0$2 ) ;
9365: LD_INT 70
9367: PPUSH
9368: CALL_OW 67
// DialogueOn ;
9372: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9376: LD_EXP 58
9380: PUSH
9381: LD_INT 1
9383: ARRAY
9384: PPUSH
9385: LD_EXP 58
9389: PUSH
9390: LD_INT 2
9392: ARRAY
9393: PPUSH
9394: CALL_OW 86
// if IsOk ( Cyrus ) then
9398: LD_EXP 5
9402: PPUSH
9403: CALL_OW 302
9407: IFFALSE 9423
// Say ( Cyrus , D10-Cyrus-1 ) else
9409: LD_EXP 5
9413: PPUSH
9414: LD_STRING D10-Cyrus-1
9416: PPUSH
9417: CALL_OW 88
9421: GO 9446
// if IsOk ( JMM ) then
9423: LD_EXP 1
9427: PPUSH
9428: CALL_OW 302
9432: IFFALSE 9446
// Say ( JMM , D10-JMM-1 ) ;
9434: LD_EXP 1
9438: PPUSH
9439: LD_STRING D10-JMM-1
9441: PPUSH
9442: CALL_OW 88
// DialogueOff ;
9446: CALL_OW 7
// end ;
9450: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9451: LD_INT 12
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: CALL_OW 321
9461: PUSH
9462: LD_INT 2
9464: EQUAL
9465: IFFALSE 9477
9467: GO 9469
9469: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9470: LD_STRING M2b
9472: PPUSH
9473: CALL_OW 337
9477: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9478: LD_INT 32
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 321
9488: PUSH
9489: LD_INT 2
9491: EQUAL
9492: IFFALSE 9504
9494: GO 9496
9496: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9497: LD_STRING M2c
9499: PPUSH
9500: CALL_OW 337
9504: END
// every 0 0$1 trigger arabianDefeated = 1 do
9505: LD_EXP 48
9509: PUSH
9510: LD_INT 1
9512: EQUAL
9513: IFFALSE 9525
9515: GO 9517
9517: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9518: LD_STRING M4a
9520: PPUSH
9521: CALL_OW 337
9525: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9526: LD_INT 54
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 321
9536: PUSH
9537: LD_INT 2
9539: EQUAL
9540: PUSH
9541: LD_INT 55
9543: PPUSH
9544: LD_INT 1
9546: PPUSH
9547: CALL_OW 321
9551: PUSH
9552: LD_INT 2
9554: EQUAL
9555: AND
9556: PUSH
9557: LD_INT 21
9559: PPUSH
9560: LD_INT 1
9562: PPUSH
9563: CALL_OW 321
9567: PUSH
9568: LD_INT 2
9570: EQUAL
9571: AND
9572: PUSH
9573: LD_INT 22
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: CALL_OW 321
9583: PUSH
9584: LD_INT 2
9586: EQUAL
9587: AND
9588: IFFALSE 9600
9590: GO 9592
9592: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9593: LD_STRING M2a
9595: PPUSH
9596: CALL_OW 337
9600: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9601: LD_INT 0
9603: PPUSH
9604: PPUSH
// if exist_mode then
9605: LD_VAR 0 2
9609: IFFALSE 9628
// unit := CreateCharacter ( ident ) else
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 34
9625: ST_TO_ADDR
9626: GO 9643
// unit := NewCharacter ( ident ) ;
9628: LD_ADDR_VAR 0 4
9632: PUSH
9633: LD_VAR 0 1
9637: PPUSH
9638: CALL_OW 25
9642: ST_TO_ADDR
// result := unit ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 4
9652: ST_TO_ADDR
// end ;
9653: LD_VAR 0 3
9657: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9658: LD_INT 0
9660: PPUSH
9661: PPUSH
9662: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9663: LD_ADDR_VAR 0 1
9667: PUSH
9668: LD_VAR 0 1
9672: PUSH
9673: LD_EXP 1
9677: PUSH
9678: LD_EXP 2
9682: PUSH
9683: LD_EXP 3
9687: PUSH
9688: LD_EXP 4
9692: PUSH
9693: LD_EXP 5
9697: PUSH
9698: LD_EXP 6
9702: PUSH
9703: LD_EXP 7
9707: PUSH
9708: LD_EXP 8
9712: PUSH
9713: LD_EXP 9
9717: PUSH
9718: LD_EXP 10
9722: PUSH
9723: LD_EXP 11
9727: PUSH
9728: LD_EXP 12
9732: PUSH
9733: LD_EXP 13
9737: PUSH
9738: LD_EXP 14
9742: PUSH
9743: LD_EXP 15
9747: PUSH
9748: LD_EXP 16
9752: PUSH
9753: LD_EXP 17
9757: PUSH
9758: LD_EXP 18
9762: PUSH
9763: LD_EXP 19
9767: PUSH
9768: LD_EXP 24
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: DIFF
9795: ST_TO_ADDR
// if not characters then
9796: LD_VAR 0 1
9800: NOT
9801: IFFALSE 9805
// exit ;
9803: GO 9951
// rnd = rand ( 1 , characters ) ;
9805: LD_ADDR_VAR 0 6
9809: PUSH
9810: LD_INT 1
9812: PPUSH
9813: LD_VAR 0 1
9817: PPUSH
9818: CALL_OW 12
9822: ST_TO_ADDR
// for i = 1 to characters do
9823: LD_ADDR_VAR 0 5
9827: PUSH
9828: DOUBLE
9829: LD_INT 1
9831: DEC
9832: ST_TO_ADDR
9833: LD_VAR 0 1
9837: PUSH
9838: FOR_TO
9839: IFFALSE 9949
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9841: LD_VAR 0 5
9845: PUSH
9846: LD_VAR 0 6
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 1
9856: PUSH
9857: LD_VAR 0 5
9861: ARRAY
9862: PPUSH
9863: CALL_OW 258
9867: PUSH
9868: LD_INT 1
9870: EQUAL
9871: AND
9872: IFFALSE 9894
// Say ( characters [ i ] , dialogMID ) ;
9874: LD_VAR 0 1
9878: PUSH
9879: LD_VAR 0 5
9883: ARRAY
9884: PPUSH
9885: LD_VAR 0 2
9889: PPUSH
9890: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9894: LD_VAR 0 5
9898: PUSH
9899: LD_VAR 0 6
9903: EQUAL
9904: PUSH
9905: LD_VAR 0 1
9909: PUSH
9910: LD_VAR 0 5
9914: ARRAY
9915: PPUSH
9916: CALL_OW 258
9920: PUSH
9921: LD_INT 2
9923: EQUAL
9924: AND
9925: IFFALSE 9947
// Say ( characters [ i ] , dialogFID ) ;
9927: LD_VAR 0 1
9931: PUSH
9932: LD_VAR 0 5
9936: ARRAY
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: CALL_OW 88
// end ;
9947: GO 9838
9949: POP
9950: POP
// end ;
9951: LD_VAR 0 4
9955: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9956: LD_INT 0
9958: PPUSH
9959: PPUSH
// for i in charactersList do
9960: LD_ADDR_VAR 0 4
9964: PUSH
9965: LD_VAR 0 1
9969: PUSH
9970: FOR_IN
9971: IFFALSE 9989
// SaveCharacters ( i , ident ) ;
9973: LD_VAR 0 4
9977: PPUSH
9978: LD_VAR 0 2
9982: PPUSH
9983: CALL_OW 38
9987: GO 9970
9989: POP
9990: POP
// end ;
9991: LD_VAR 0 3
9995: RET
// export function PrepareDifficulty ; begin
9996: LD_INT 0
9998: PPUSH
// if difficulty = 1 then
9999: LD_OWVAR 67
10003: PUSH
10004: LD_INT 1
10006: EQUAL
10007: IFFALSE 10051
// begin RuSolMinLevel = 4 ;
10009: LD_ADDR_EXP 36
10013: PUSH
10014: LD_INT 4
10016: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10017: LD_ADDR_EXP 37
10021: PUSH
10022: LD_INT 7
10024: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10025: LD_INT 51
10027: PPUSH
10028: LD_INT 6
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10038: LD_INT 51
10040: PPUSH
10041: LD_INT 5
10043: PPUSH
10044: LD_INT 2
10046: PPUSH
10047: CALL_OW 322
// end ; if difficulty = 2 then
10051: LD_OWVAR 67
10055: PUSH
10056: LD_INT 2
10058: EQUAL
10059: IFFALSE 10155
// begin RuSolMinLevel = 5 ;
10061: LD_ADDR_EXP 36
10065: PUSH
10066: LD_INT 5
10068: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10069: LD_ADDR_EXP 37
10073: PUSH
10074: LD_INT 7
10076: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10077: LD_INT 51
10079: PPUSH
10080: LD_INT 6
10082: PPUSH
10083: LD_INT 2
10085: PPUSH
10086: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10090: LD_INT 57
10092: PPUSH
10093: LD_INT 6
10095: PPUSH
10096: LD_INT 2
10098: PPUSH
10099: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10103: LD_INT 63
10105: PPUSH
10106: LD_INT 6
10108: PPUSH
10109: LD_INT 2
10111: PPUSH
10112: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10116: LD_INT 51
10118: PPUSH
10119: LD_INT 5
10121: PPUSH
10122: LD_INT 2
10124: PPUSH
10125: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10129: LD_INT 5
10131: PPUSH
10132: LD_INT 2
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 5
10147: PPUSH
10148: LD_INT 2
10150: PPUSH
10151: CALL_OW 322
// end ; if difficulty = 3 then
10155: LD_OWVAR 67
10159: PUSH
10160: LD_INT 3
10162: EQUAL
10163: IFFALSE 10311
// begin RuSolMinLevel = 6 ;
10165: LD_ADDR_EXP 36
10169: PUSH
10170: LD_INT 6
10172: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10173: LD_ADDR_EXP 37
10177: PUSH
10178: LD_INT 8
10180: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10181: LD_INT 51
10183: PPUSH
10184: LD_INT 6
10186: PPUSH
10187: LD_INT 2
10189: PPUSH
10190: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10194: LD_INT 57
10196: PPUSH
10197: LD_INT 6
10199: PPUSH
10200: LD_INT 2
10202: PPUSH
10203: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10207: LD_INT 52
10209: PPUSH
10210: LD_INT 6
10212: PPUSH
10213: LD_INT 2
10215: PPUSH
10216: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10220: LD_INT 58
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: LD_INT 2
10228: PPUSH
10229: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10233: LD_INT 63
10235: PPUSH
10236: LD_INT 6
10238: PPUSH
10239: LD_INT 2
10241: PPUSH
10242: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10246: LD_INT 64
10248: PPUSH
10249: LD_INT 6
10251: PPUSH
10252: LD_INT 2
10254: PPUSH
10255: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10259: LD_INT 51
10261: PPUSH
10262: LD_INT 5
10264: PPUSH
10265: LD_INT 2
10267: PPUSH
10268: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10272: LD_INT 52
10274: PPUSH
10275: LD_INT 5
10277: PPUSH
10278: LD_INT 2
10280: PPUSH
10281: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10285: LD_INT 66
10287: PPUSH
10288: LD_INT 2
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10298: LD_INT 66
10300: PPUSH
10301: LD_INT 5
10303: PPUSH
10304: LD_INT 2
10306: PPUSH
10307: CALL_OW 322
// end ; end ;
10311: LD_VAR 0 1
10315: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
10323: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
10324: LD_ADDR_VAR 0 7
10328: PUSH
10329: LD_INT 43
10331: PUSH
10332: LD_INT 68
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: PUSH
10339: LD_INT 43
10341: PUSH
10342: LD_INT 79
10344: PUSH
10345: EMPTY
10346: LIST
10347: LIST
10348: PUSH
10349: LD_INT 99
10351: PUSH
10352: LD_INT 114
10354: PUSH
10355: EMPTY
10356: LIST
10357: LIST
10358: PUSH
10359: LD_INT 103
10361: PUSH
10362: LD_INT 114
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: PUSH
10369: LD_INT 156
10371: PUSH
10372: LD_INT 92
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 152
10381: PUSH
10382: LD_INT 85
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: ST_TO_ADDR
// for i in sources do
10397: LD_ADDR_VAR 0 3
10401: PUSH
10402: LD_VAR 0 7
10406: PUSH
10407: FOR_IN
10408: IFFALSE 10437
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
10410: LD_VAR 0 3
10414: PUSH
10415: LD_INT 1
10417: ARRAY
10418: PPUSH
10419: LD_VAR 0 3
10423: PUSH
10424: LD_INT 2
10426: ARRAY
10427: PPUSH
10428: LD_INT 3
10430: PPUSH
10431: CALL_OW 441
10435: GO 10407
10437: POP
10438: POP
// case position of 1 :
10439: LD_VAR 0 1
10443: PUSH
10444: LD_INT 1
10446: DOUBLE
10447: EQUAL
10448: IFTRUE 10452
10450: GO 10463
10452: POP
// area := westConv ; 2 :
10453: LD_ADDR_VAR 0 6
10457: PUSH
10458: LD_INT 20
10460: ST_TO_ADDR
10461: GO 10502
10463: LD_INT 2
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10482
10471: POP
// area := midConv ; 3 :
10472: LD_ADDR_VAR 0 6
10476: PUSH
10477: LD_INT 21
10479: ST_TO_ADDR
10480: GO 10502
10482: LD_INT 3
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10501
10490: POP
// area := eastConv ; end ;
10491: LD_ADDR_VAR 0 6
10495: PUSH
10496: LD_INT 22
10498: ST_TO_ADDR
10499: GO 10502
10501: POP
// area := AreaToList ( area , 0 ) ;
10502: LD_ADDR_VAR 0 6
10506: PUSH
10507: LD_VAR 0 6
10511: PPUSH
10512: LD_INT 0
10514: PPUSH
10515: CALL_OW 517
10519: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10520: LD_ADDR_VAR 0 3
10524: PUSH
10525: DOUBLE
10526: LD_INT 1
10528: DEC
10529: ST_TO_ADDR
10530: LD_VAR 0 6
10534: PUSH
10535: LD_INT 1
10537: ARRAY
10538: PUSH
10539: FOR_TO
10540: IFFALSE 10621
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10542: LD_VAR 0 6
10546: PUSH
10547: LD_INT 1
10549: ARRAY
10550: PUSH
10551: LD_VAR 0 3
10555: ARRAY
10556: PPUSH
10557: LD_VAR 0 6
10561: PUSH
10562: LD_INT 2
10564: ARRAY
10565: PUSH
10566: LD_VAR 0 3
10570: ARRAY
10571: PPUSH
10572: LD_INT 1
10574: PPUSH
10575: LD_INT 1
10577: PPUSH
10578: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10582: LD_VAR 0 6
10586: PUSH
10587: LD_INT 1
10589: ARRAY
10590: PUSH
10591: LD_VAR 0 3
10595: ARRAY
10596: PPUSH
10597: LD_VAR 0 6
10601: PUSH
10602: LD_INT 2
10604: ARRAY
10605: PUSH
10606: LD_VAR 0 3
10610: ARRAY
10611: PPUSH
10612: LD_INT 1
10614: PPUSH
10615: CALL_OW 331
// end ;
10619: GO 10539
10621: POP
10622: POP
// ruPossition = position ;
10623: LD_ADDR_EXP 41
10627: PUSH
10628: LD_VAR 0 1
10632: ST_TO_ADDR
// if position = 1 then
10633: LD_VAR 0 1
10637: PUSH
10638: LD_INT 1
10640: EQUAL
10641: IFFALSE 11389
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10643: LD_ADDR_VAR 0 4
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 3
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PPUSH
10672: CALL_OW 69
10676: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10677: LD_ADDR_VAR 0 5
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: LD_INT 49
10687: PUSH
10688: LD_INT 74
10690: PUSH
10691: LD_INT 3
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 4
10702: PUSH
10703: LD_INT 73
10705: PUSH
10706: LD_INT 88
10708: PUSH
10709: LD_INT 5
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 4
10720: PUSH
10721: LD_INT 56
10723: PUSH
10724: LD_INT 62
10726: PUSH
10727: LD_INT 3
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 29
10738: PUSH
10739: LD_INT 43
10741: PUSH
10742: LD_INT 68
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 30
10756: PUSH
10757: LD_INT 43
10759: PUSH
10760: LD_INT 79
10762: PUSH
10763: LD_INT 5
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 28
10774: PUSH
10775: LD_INT 60
10777: PUSH
10778: LD_INT 75
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 2
10792: PUSH
10793: LD_INT 50
10795: PUSH
10796: LD_INT 87
10798: PUSH
10799: LD_INT 1
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 28
10810: PUSH
10811: LD_INT 45
10813: PUSH
10814: LD_INT 67
10816: PUSH
10817: LD_INT 2
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 17
10828: PUSH
10829: LD_INT 47
10831: PUSH
10832: LD_INT 84
10834: PUSH
10835: LD_INT 2
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 18
10846: PUSH
10847: LD_INT 46
10849: PUSH
10850: LD_INT 87
10852: PUSH
10853: LD_INT 1
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 28
10864: PUSH
10865: LD_INT 41
10867: PUSH
10868: LD_INT 64
10870: PUSH
10871: LD_INT 5
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 32
10882: PUSH
10883: LD_INT 75
10885: PUSH
10886: LD_INT 76
10888: PUSH
10889: LD_INT 5
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 32
10900: PUSH
10901: LD_INT 77
10903: PUSH
10904: LD_INT 75
10906: PUSH
10907: LD_INT 5
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: LD_INT 69
10921: PUSH
10922: LD_INT 68
10924: PUSH
10925: LD_INT 3
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: PUSH
10934: LD_INT 32
10936: PUSH
10937: LD_INT 59
10939: PUSH
10940: LD_INT 96
10942: PUSH
10943: LD_INT 5
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 32
10954: PUSH
10955: LD_INT 56
10957: PUSH
10958: LD_INT 96
10960: PUSH
10961: LD_INT 0
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 32
10972: PUSH
10973: LD_INT 51
10975: PUSH
10976: LD_INT 61
10978: PUSH
10979: LD_INT 3
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 32
10990: PUSH
10991: LD_INT 42
10993: PUSH
10994: LD_INT 60
10996: PUSH
10997: LD_INT 3
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 32
11008: PUSH
11009: LD_INT 36
11011: PUSH
11012: LD_INT 58
11014: PUSH
11015: LD_INT 3
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 32
11026: PUSH
11027: LD_INT 39
11029: PUSH
11030: LD_INT 59
11032: PUSH
11033: LD_INT 3
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 32
11044: PUSH
11045: LD_INT 61
11047: PUSH
11048: LD_INT 64
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 33
11062: PUSH
11063: LD_INT 63
11065: PUSH
11066: LD_INT 90
11068: PUSH
11069: LD_INT 5
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 33
11080: PUSH
11081: LD_INT 64
11083: PUSH
11084: LD_INT 88
11086: PUSH
11087: LD_INT 5
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 33
11098: PUSH
11099: LD_INT 72
11101: PUSH
11102: LD_INT 82
11104: PUSH
11105: LD_INT 5
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 6
11116: PUSH
11117: LD_INT 42
11119: PUSH
11120: LD_INT 74
11122: PUSH
11123: LD_INT 1
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 6
11134: PUSH
11135: LD_INT 56
11137: PUSH
11138: LD_INT 77
11140: PUSH
11141: LD_INT 2
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 21
11152: PUSH
11153: LD_INT 54
11155: PUSH
11156: LD_INT 91
11158: PUSH
11159: LD_INT 5
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: PUSH
11168: LD_INT 16
11170: PUSH
11171: LD_INT 50
11173: PUSH
11174: LD_INT 83
11176: PUSH
11177: LD_INT 3
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 24
11188: PUSH
11189: LD_INT 50
11191: PUSH
11192: LD_INT 90
11194: PUSH
11195: LD_INT 0
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: PUSH
11204: EMPTY
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11235: LD_ADDR_VAR 0 3
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_INT 3
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: LD_INT 25
11255: PUSH
11256: LD_INT 2
11258: PUSH
11259: EMPTY
11260: LIST
11261: LIST
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PPUSH
11271: CALL_OW 69
11275: PUSH
11276: FOR_IN
11277: IFFALSE 11296
// AddComAgressiveMove ( i , 53 , 82 ) ;
11279: LD_VAR 0 3
11283: PPUSH
11284: LD_INT 53
11286: PPUSH
11287: LD_INT 82
11289: PPUSH
11290: CALL_OW 174
11294: GO 11276
11296: POP
11297: POP
// for i := 1 to buildingsTab do
11298: LD_ADDR_VAR 0 3
11302: PUSH
11303: DOUBLE
11304: LD_INT 1
11306: DEC
11307: ST_TO_ADDR
11308: LD_VAR 0 5
11312: PUSH
11313: FOR_TO
11314: IFFALSE 11387
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11316: LD_VAR 0 4
11320: PPUSH
11321: LD_VAR 0 5
11325: PUSH
11326: LD_VAR 0 3
11330: ARRAY
11331: PUSH
11332: LD_INT 1
11334: ARRAY
11335: PPUSH
11336: LD_VAR 0 5
11340: PUSH
11341: LD_VAR 0 3
11345: ARRAY
11346: PUSH
11347: LD_INT 2
11349: ARRAY
11350: PPUSH
11351: LD_VAR 0 5
11355: PUSH
11356: LD_VAR 0 3
11360: ARRAY
11361: PUSH
11362: LD_INT 3
11364: ARRAY
11365: PPUSH
11366: LD_VAR 0 5
11370: PUSH
11371: LD_VAR 0 3
11375: ARRAY
11376: PUSH
11377: LD_INT 4
11379: ARRAY
11380: PPUSH
11381: CALL_OW 205
11385: GO 11313
11387: POP
11388: POP
// end ; if position = 2 then
11389: LD_VAR 0 1
11393: PUSH
11394: LD_INT 2
11396: EQUAL
11397: IFFALSE 12012
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11399: LD_ADDR_VAR 0 4
11403: PUSH
11404: LD_INT 22
11406: PUSH
11407: LD_INT 3
11409: PUSH
11410: EMPTY
11411: LIST
11412: LIST
11413: PUSH
11414: LD_INT 25
11416: PUSH
11417: LD_INT 2
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: PPUSH
11428: CALL_OW 69
11432: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11433: LD_ADDR_VAR 0 5
11437: PUSH
11438: LD_INT 0
11440: PUSH
11441: LD_INT 104
11443: PUSH
11444: LD_INT 110
11446: PUSH
11447: LD_INT 5
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 4
11458: PUSH
11459: LD_INT 98
11461: PUSH
11462: LD_INT 90
11464: PUSH
11465: LD_INT 3
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 29
11476: PUSH
11477: LD_INT 103
11479: PUSH
11480: LD_INT 114
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 30
11494: PUSH
11495: LD_INT 99
11497: PUSH
11498: LD_INT 114
11500: PUSH
11501: LD_INT 3
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 28
11512: PUSH
11513: LD_INT 100
11515: PUSH
11516: LD_INT 112
11518: PUSH
11519: LD_INT 1
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 2
11530: PUSH
11531: LD_INT 92
11533: PUSH
11534: LD_INT 101
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 97
11551: PUSH
11552: LD_INT 116
11554: PUSH
11555: LD_INT 5
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 17
11566: PUSH
11567: LD_INT 96
11569: PUSH
11570: LD_INT 101
11572: PUSH
11573: LD_INT 4
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 18
11584: PUSH
11585: LD_INT 88
11587: PUSH
11588: LD_INT 97
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 28
11602: PUSH
11603: LD_INT 106
11605: PUSH
11606: LD_INT 92
11608: PUSH
11609: LD_INT 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 32
11620: PUSH
11621: LD_INT 88
11623: PUSH
11624: LD_INT 89
11626: PUSH
11627: LD_INT 2
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 32
11638: PUSH
11639: LD_INT 86
11641: PUSH
11642: LD_INT 90
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 32
11656: PUSH
11657: LD_INT 85
11659: PUSH
11660: LD_INT 99
11662: PUSH
11663: LD_INT 2
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 32
11674: PUSH
11675: LD_INT 85
11677: PUSH
11678: LD_INT 107
11680: PUSH
11681: LD_INT 1
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 33
11692: PUSH
11693: LD_INT 105
11695: PUSH
11696: LD_INT 99
11698: PUSH
11699: LD_INT 1
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 33
11710: PUSH
11711: LD_INT 102
11713: PUSH
11714: LD_INT 92
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 33
11728: PUSH
11729: LD_INT 105
11731: PUSH
11732: LD_INT 92
11734: PUSH
11735: LD_INT 2
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 6
11746: PUSH
11747: LD_INT 92
11749: PUSH
11750: LD_INT 110
11752: PUSH
11753: LD_INT 0
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: PUSH
11762: LD_INT 6
11764: PUSH
11765: LD_INT 103
11767: PUSH
11768: LD_INT 103
11770: PUSH
11771: LD_INT 5
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 21
11782: PUSH
11783: LD_INT 89
11785: PUSH
11786: LD_INT 101
11788: PUSH
11789: LD_INT 1
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: PUSH
11798: LD_INT 16
11800: PUSH
11801: LD_INT 95
11803: PUSH
11804: LD_INT 104
11806: PUSH
11807: LD_INT 4
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: PUSH
11816: LD_INT 24
11818: PUSH
11819: LD_INT 92
11821: PUSH
11822: LD_INT 105
11824: PUSH
11825: LD_INT 0
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11858: LD_ADDR_VAR 0 3
11862: PUSH
11863: LD_INT 22
11865: PUSH
11866: LD_INT 3
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: LD_INT 3
11875: PUSH
11876: LD_INT 25
11878: PUSH
11879: LD_INT 2
11881: PUSH
11882: EMPTY
11883: LIST
11884: LIST
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 69
11898: PUSH
11899: FOR_IN
11900: IFFALSE 11919
// AddComAgressiveMove ( i , 96 , 99 ) ;
11902: LD_VAR 0 3
11906: PPUSH
11907: LD_INT 96
11909: PPUSH
11910: LD_INT 99
11912: PPUSH
11913: CALL_OW 174
11917: GO 11899
11919: POP
11920: POP
// for i := 1 to buildingsTab do
11921: LD_ADDR_VAR 0 3
11925: PUSH
11926: DOUBLE
11927: LD_INT 1
11929: DEC
11930: ST_TO_ADDR
11931: LD_VAR 0 5
11935: PUSH
11936: FOR_TO
11937: IFFALSE 12010
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11939: LD_VAR 0 4
11943: PPUSH
11944: LD_VAR 0 5
11948: PUSH
11949: LD_VAR 0 3
11953: ARRAY
11954: PUSH
11955: LD_INT 1
11957: ARRAY
11958: PPUSH
11959: LD_VAR 0 5
11963: PUSH
11964: LD_VAR 0 3
11968: ARRAY
11969: PUSH
11970: LD_INT 2
11972: ARRAY
11973: PPUSH
11974: LD_VAR 0 5
11978: PUSH
11979: LD_VAR 0 3
11983: ARRAY
11984: PUSH
11985: LD_INT 3
11987: ARRAY
11988: PPUSH
11989: LD_VAR 0 5
11993: PUSH
11994: LD_VAR 0 3
11998: ARRAY
11999: PUSH
12000: LD_INT 4
12002: ARRAY
12003: PPUSH
12004: CALL_OW 205
12008: GO 11936
12010: POP
12011: POP
// end ; if position = 3 then
12012: LD_VAR 0 1
12016: PUSH
12017: LD_INT 3
12019: EQUAL
12020: IFFALSE 12806
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12022: LD_ADDR_VAR 0 4
12026: PUSH
12027: LD_INT 22
12029: PUSH
12030: LD_INT 3
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: PUSH
12037: LD_INT 25
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
12056: LD_ADDR_VAR 0 5
12060: PUSH
12061: LD_INT 0
12063: PUSH
12064: LD_INT 151
12066: PUSH
12067: LD_INT 71
12069: PUSH
12070: LD_INT 4
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 4
12081: PUSH
12082: LD_INT 145
12084: PUSH
12085: LD_INT 53
12087: PUSH
12088: LD_INT 3
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 4
12099: PUSH
12100: LD_INT 172
12102: PUSH
12103: LD_INT 102
12105: PUSH
12106: LD_INT 5
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 29
12117: PUSH
12118: LD_INT 152
12120: PUSH
12121: LD_INT 85
12123: PUSH
12124: LD_INT 3
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 30
12135: PUSH
12136: LD_INT 156
12138: PUSH
12139: LD_INT 92
12141: PUSH
12142: LD_INT 3
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 28
12153: PUSH
12154: LD_INT 151
12156: PUSH
12157: LD_INT 66
12159: PUSH
12160: LD_INT 4
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 2
12171: PUSH
12172: LD_INT 163
12174: PUSH
12175: LD_INT 95
12177: PUSH
12178: LD_INT 5
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 28
12189: PUSH
12190: LD_INT 149
12192: PUSH
12193: LD_INT 63
12195: PUSH
12196: LD_INT 4
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 17
12207: PUSH
12208: LD_INT 167
12210: PUSH
12211: LD_INT 99
12213: PUSH
12214: LD_INT 5
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 18
12225: PUSH
12226: LD_INT 163
12228: PUSH
12229: LD_INT 98
12231: PUSH
12232: LD_INT 0
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 28
12243: PUSH
12244: LD_INT 154
12246: PUSH
12247: LD_INT 70
12249: PUSH
12250: LD_INT 4
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: LD_INT 155
12264: PUSH
12265: LD_INT 62
12267: PUSH
12268: LD_INT 4
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 32
12279: PUSH
12280: LD_INT 161
12282: PUSH
12283: LD_INT 69
12285: PUSH
12286: LD_INT 4
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 32
12297: PUSH
12298: LD_INT 168
12300: PUSH
12301: LD_INT 78
12303: PUSH
12304: LD_INT 4
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 32
12315: PUSH
12316: LD_INT 163
12318: PUSH
12319: LD_INT 80
12321: PUSH
12322: LD_INT 5
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 32
12333: PUSH
12334: LD_INT 136
12336: PUSH
12337: LD_INT 73
12339: PUSH
12340: LD_INT 0
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 32
12351: PUSH
12352: LD_INT 157
12354: PUSH
12355: LD_INT 98
12357: PUSH
12358: LD_INT 0
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 32
12369: PUSH
12370: LD_INT 150
12372: PUSH
12373: LD_INT 87
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 33
12387: PUSH
12388: LD_INT 171
12390: PUSH
12391: LD_INT 97
12393: PUSH
12394: LD_INT 4
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 33
12405: PUSH
12406: LD_INT 168
12408: PUSH
12409: LD_INT 92
12411: PUSH
12412: LD_INT 4
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 33
12423: PUSH
12424: LD_INT 166
12426: PUSH
12427: LD_INT 80
12429: PUSH
12430: LD_INT 5
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 33
12441: PUSH
12442: LD_INT 141
12444: PUSH
12445: LD_INT 54
12447: PUSH
12448: LD_INT 2
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 33
12459: PUSH
12460: LD_INT 133
12462: PUSH
12463: LD_INT 57
12465: PUSH
12466: LD_INT 2
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 33
12477: PUSH
12478: LD_INT 132
12480: PUSH
12481: LD_INT 61
12483: PUSH
12484: LD_INT 2
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 33
12495: PUSH
12496: LD_INT 150
12498: PUSH
12499: LD_INT 82
12501: PUSH
12502: LD_INT 0
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 33
12513: PUSH
12514: LD_INT 132
12516: PUSH
12517: LD_INT 72
12519: PUSH
12520: LD_INT 0
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 6
12531: PUSH
12532: LD_INT 146
12534: PUSH
12535: LD_INT 64
12537: PUSH
12538: LD_INT 4
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: LD_INT 6
12549: PUSH
12550: LD_INT 159
12552: PUSH
12553: LD_INT 85
12555: PUSH
12556: LD_INT 4
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: PUSH
12565: LD_INT 21
12567: PUSH
12568: LD_INT 163
12570: PUSH
12571: LD_INT 91
12573: PUSH
12574: LD_INT 3
12576: PUSH
12577: EMPTY
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: PUSH
12583: LD_INT 16
12585: PUSH
12586: LD_INT 166
12588: PUSH
12589: LD_INT 95
12591: PUSH
12592: LD_INT 4
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: PUSH
12601: LD_INT 24
12603: PUSH
12604: LD_INT 159
12606: PUSH
12607: LD_INT 95
12609: PUSH
12610: LD_INT 1
12612: PUSH
12613: EMPTY
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12652: LD_ADDR_VAR 0 3
12656: PUSH
12657: LD_INT 22
12659: PUSH
12660: LD_INT 3
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 3
12669: PUSH
12670: LD_INT 25
12672: PUSH
12673: LD_INT 2
12675: PUSH
12676: EMPTY
12677: LIST
12678: LIST
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PPUSH
12688: CALL_OW 69
12692: PUSH
12693: FOR_IN
12694: IFFALSE 12713
// AddComAgressiveMove ( i , 141 , 65 ) ;
12696: LD_VAR 0 3
12700: PPUSH
12701: LD_INT 141
12703: PPUSH
12704: LD_INT 65
12706: PPUSH
12707: CALL_OW 174
12711: GO 12693
12713: POP
12714: POP
// for i := 1 to buildingsTab do
12715: LD_ADDR_VAR 0 3
12719: PUSH
12720: DOUBLE
12721: LD_INT 1
12723: DEC
12724: ST_TO_ADDR
12725: LD_VAR 0 5
12729: PUSH
12730: FOR_TO
12731: IFFALSE 12804
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12733: LD_VAR 0 4
12737: PPUSH
12738: LD_VAR 0 5
12742: PUSH
12743: LD_VAR 0 3
12747: ARRAY
12748: PUSH
12749: LD_INT 1
12751: ARRAY
12752: PPUSH
12753: LD_VAR 0 5
12757: PUSH
12758: LD_VAR 0 3
12762: ARRAY
12763: PUSH
12764: LD_INT 2
12766: ARRAY
12767: PPUSH
12768: LD_VAR 0 5
12772: PUSH
12773: LD_VAR 0 3
12777: ARRAY
12778: PUSH
12779: LD_INT 3
12781: ARRAY
12782: PPUSH
12783: LD_VAR 0 5
12787: PUSH
12788: LD_VAR 0 3
12792: ARRAY
12793: PUSH
12794: LD_INT 4
12796: ARRAY
12797: PPUSH
12798: CALL_OW 205
12802: GO 12730
12804: POP
12805: POP
// end ; end ;
12806: LD_VAR 0 2
12810: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12811: LD_INT 0
12813: PPUSH
12814: PPUSH
12815: PPUSH
12816: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12817: LD_ADDR_VAR 0 3
12821: PUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 2
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 25
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 69
12850: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12851: LD_VAR 0 3
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: LD_INT 71
12861: PPUSH
12862: LD_INT 15
12864: PPUSH
12865: LD_INT 3
12867: PPUSH
12868: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12872: LD_ADDR_VAR 0 4
12876: PUSH
12877: LD_INT 6
12879: PUSH
12880: LD_INT 77
12882: PUSH
12883: LD_INT 18
12885: PUSH
12886: LD_INT 3
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 4
12897: PUSH
12898: LD_INT 77
12900: PUSH
12901: LD_INT 26
12903: PUSH
12904: LD_INT 0
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 31
12915: PUSH
12916: LD_INT 82
12918: PUSH
12919: LD_INT 28
12921: PUSH
12922: LD_INT 0
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 31
12933: PUSH
12934: LD_INT 84
12936: PUSH
12937: LD_INT 21
12939: PUSH
12940: LD_INT 3
12942: PUSH
12943: EMPTY
12944: LIST
12945: LIST
12946: LIST
12947: LIST
12948: PUSH
12949: LD_INT 31
12951: PUSH
12952: LD_INT 66
12954: PUSH
12955: LD_INT 14
12957: PUSH
12958: LD_INT 2
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: PUSH
12967: LD_INT 27
12969: PUSH
12970: LD_INT 67
12972: PUSH
12973: LD_INT 18
12975: PUSH
12976: LD_INT 5
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: PUSH
12985: LD_INT 27
12987: PUSH
12988: LD_INT 69
12990: PUSH
12991: LD_INT 23
12993: PUSH
12994: LD_INT 2
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: ST_TO_ADDR
// for i := 1 to buildingsTab do
13012: LD_ADDR_VAR 0 2
13016: PUSH
13017: DOUBLE
13018: LD_INT 1
13020: DEC
13021: ST_TO_ADDR
13022: LD_VAR 0 4
13026: PUSH
13027: FOR_TO
13028: IFFALSE 13101
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_VAR 0 4
13039: PUSH
13040: LD_VAR 0 2
13044: ARRAY
13045: PUSH
13046: LD_INT 1
13048: ARRAY
13049: PPUSH
13050: LD_VAR 0 4
13054: PUSH
13055: LD_VAR 0 2
13059: ARRAY
13060: PUSH
13061: LD_INT 2
13063: ARRAY
13064: PPUSH
13065: LD_VAR 0 4
13069: PUSH
13070: LD_VAR 0 2
13074: ARRAY
13075: PUSH
13076: LD_INT 3
13078: ARRAY
13079: PPUSH
13080: LD_VAR 0 4
13084: PUSH
13085: LD_VAR 0 2
13089: ARRAY
13090: PUSH
13091: LD_INT 4
13093: ARRAY
13094: PPUSH
13095: CALL_OW 205
13099: GO 13027
13101: POP
13102: POP
// end ;
13103: LD_VAR 0 1
13107: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13108: LD_INT 0
13110: PPUSH
13111: PPUSH
13112: PPUSH
13113: PPUSH
13114: PPUSH
13115: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13116: LD_ADDR_VAR 0 7
13120: PUSH
13121: LD_INT 22
13123: PUSH
13124: LD_VAR 0 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 25
13135: PUSH
13136: LD_INT 9
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13152: LD_ADDR_VAR 0 8
13156: PUSH
13157: LD_INT 22
13159: PUSH
13160: LD_VAR 0 2
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: LD_INT 21
13174: PUSH
13175: LD_INT 3
13177: PUSH
13178: EMPTY
13179: LIST
13180: LIST
13181: PUSH
13182: EMPTY
13183: LIST
13184: LIST
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: PPUSH
13190: CALL_OW 69
13194: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13195: LD_ADDR_VAR 0 5
13199: PUSH
13200: LD_INT 1
13202: PPUSH
13203: LD_INT 3
13205: PPUSH
13206: CALL_OW 12
13210: ST_TO_ADDR
// for i = 1 to list do
13211: LD_ADDR_VAR 0 6
13215: PUSH
13216: DOUBLE
13217: LD_INT 1
13219: DEC
13220: ST_TO_ADDR
13221: LD_VAR 0 7
13225: PUSH
13226: FOR_TO
13227: IFFALSE 14217
// for ta in filter do
13229: LD_ADDR_VAR 0 4
13233: PUSH
13234: LD_VAR 0 8
13238: PUSH
13239: FOR_IN
13240: IFFALSE 14213
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13242: LD_VAR 0 7
13246: PUSH
13247: LD_VAR 0 6
13251: ARRAY
13252: PPUSH
13253: LD_VAR 0 4
13257: PPUSH
13258: CALL_OW 296
13262: PUSH
13263: LD_INT 15
13265: LESSEQUAL
13266: IFFALSE 14211
// begin case c of 1 :
13268: LD_VAR 0 5
13272: PUSH
13273: LD_INT 1
13275: DOUBLE
13276: EQUAL
13277: IFTRUE 13281
13279: GO 13713
13281: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13282: LD_VAR 0 7
13286: PUSH
13287: LD_VAR 0 6
13291: ARRAY
13292: PPUSH
13293: LD_VAR 0 4
13297: PPUSH
13298: CALL_OW 250
13302: PPUSH
13303: LD_VAR 0 4
13307: PPUSH
13308: CALL_OW 251
13312: PPUSH
13313: CALL_OW 154
// if eventVar2 = 0 then
13317: LD_EXP 62
13321: PUSH
13322: LD_INT 0
13324: EQUAL
13325: IFFALSE 13711
// begin eventVar2 = 1 ;
13327: LD_ADDR_EXP 62
13331: PUSH
13332: LD_INT 1
13334: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13335: LD_INT 245
13337: PPUSH
13338: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13342: LD_VAR 0 4
13346: PPUSH
13347: CALL_OW 250
13351: PPUSH
13352: LD_VAR 0 4
13356: PPUSH
13357: CALL_OW 251
13361: PPUSH
13362: CALL_OW 84
// DialogueOn ;
13366: CALL_OW 6
// if IsOK ( Cyrus ) then
13370: LD_EXP 5
13374: PPUSH
13375: CALL_OW 302
13379: IFFALSE 13395
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13381: LD_EXP 5
13385: PPUSH
13386: LD_STRING D9a-Cyrus-1
13388: PPUSH
13389: CALL_OW 88
// end else
13393: GO 13517
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13395: LD_INT 22
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 26
13407: PUSH
13408: LD_INT 1
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 2
13417: PUSH
13418: LD_INT 25
13420: PUSH
13421: LD_INT 1
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 25
13430: PUSH
13431: LD_INT 2
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: PUSH
13438: LD_INT 25
13440: PUSH
13441: LD_INT 3
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 25
13450: PUSH
13451: LD_INT 4
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 25
13460: PUSH
13461: LD_INT 5
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: EMPTY
13469: LIST
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: PPUSH
13481: CALL_OW 69
13485: PUSH
13486: LD_EXP 1
13490: PUSH
13491: LD_EXP 14
13495: PUSH
13496: LD_EXP 5
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: DIFF
13506: PPUSH
13507: LD_STRING D9a-Sol1-1
13509: PPUSH
13510: LD_STRING D9a-Sol1-1
13512: PPUSH
13513: CALL 9658 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13517: LD_INT 22
13519: PUSH
13520: LD_INT 1
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 26
13529: PUSH
13530: LD_INT 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 2
13539: PUSH
13540: LD_INT 25
13542: PUSH
13543: LD_INT 1
13545: PUSH
13546: EMPTY
13547: LIST
13548: LIST
13549: PUSH
13550: LD_INT 25
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: PUSH
13560: LD_INT 25
13562: PUSH
13563: LD_INT 3
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: LD_INT 25
13572: PUSH
13573: LD_INT 4
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 25
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: EMPTY
13599: LIST
13600: LIST
13601: LIST
13602: PPUSH
13603: CALL_OW 69
13607: PUSH
13608: LD_EXP 1
13612: PUSH
13613: LD_EXP 14
13617: PUSH
13618: LD_EXP 5
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: DIFF
13628: PPUSH
13629: LD_STRING D9b-Sol1-1
13631: PPUSH
13632: LD_STRING D9b-Sol1-1
13634: PPUSH
13635: CALL 9658 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13639: LD_STRING 09_arInfo
13641: PPUSH
13642: LD_INT 0
13644: PPUSH
13645: CALL_OW 30
13649: PUSH
13650: LD_INT 1
13652: EQUAL
13653: IFFALSE 13667
// Say ( JMM , D9a-JMM-1 ) ;
13655: LD_EXP 1
13659: PPUSH
13660: LD_STRING D9a-JMM-1
13662: PPUSH
13663: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13667: LD_EXP 1
13671: PPUSH
13672: LD_STRING D9c-JMM-1
13674: PPUSH
13675: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13679: LD_INT 12
13681: PPUSH
13682: LD_INT 1
13684: PPUSH
13685: CALL_OW 321
13689: PUSH
13690: LD_INT 2
13692: EQUAL
13693: IFFALSE 13707
// Say ( JMM , D9c-JMM-1a ) ;
13695: LD_EXP 1
13699: PPUSH
13700: LD_STRING D9c-JMM-1a
13702: PPUSH
13703: CALL_OW 88
// DialogueOff ;
13707: CALL_OW 7
// end ; end ; 2 :
13711: GO 14211
13713: LD_INT 2
13715: DOUBLE
13716: EQUAL
13717: IFTRUE 13721
13719: GO 14179
13721: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13722: LD_VAR 0 7
13726: PUSH
13727: LD_VAR 0 6
13731: ARRAY
13732: PPUSH
13733: LD_VAR 0 4
13737: PPUSH
13738: CALL_OW 250
13742: PUSH
13743: LD_INT 1
13745: NEG
13746: PPUSH
13747: LD_INT 1
13749: PPUSH
13750: CALL_OW 12
13754: PLUS
13755: PPUSH
13756: LD_VAR 0 4
13760: PPUSH
13761: CALL_OW 251
13765: PUSH
13766: LD_INT 1
13768: NEG
13769: PPUSH
13770: LD_INT 1
13772: PPUSH
13773: CALL_OW 12
13777: PLUS
13778: PPUSH
13779: CALL_OW 153
// if eventVar2 = 0 then
13783: LD_EXP 62
13787: PUSH
13788: LD_INT 0
13790: EQUAL
13791: IFFALSE 14177
// begin eventVar2 = 1 ;
13793: LD_ADDR_EXP 62
13797: PUSH
13798: LD_INT 1
13800: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13801: LD_INT 245
13803: PPUSH
13804: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13808: LD_VAR 0 4
13812: PPUSH
13813: CALL_OW 250
13817: PPUSH
13818: LD_VAR 0 4
13822: PPUSH
13823: CALL_OW 251
13827: PPUSH
13828: CALL_OW 84
// DialogueOn ;
13832: CALL_OW 6
// if IsOK ( Cyrus ) then
13836: LD_EXP 5
13840: PPUSH
13841: CALL_OW 302
13845: IFFALSE 13861
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13847: LD_EXP 5
13851: PPUSH
13852: LD_STRING D9a-Cyrus-1
13854: PPUSH
13855: CALL_OW 88
// end else
13859: GO 13983
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13861: LD_INT 22
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 26
13873: PUSH
13874: LD_INT 1
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 2
13883: PUSH
13884: LD_INT 25
13886: PUSH
13887: LD_INT 1
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: PUSH
13894: LD_INT 25
13896: PUSH
13897: LD_INT 2
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 25
13906: PUSH
13907: LD_INT 3
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PUSH
13914: LD_INT 25
13916: PUSH
13917: LD_INT 4
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 25
13926: PUSH
13927: LD_INT 5
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: PUSH
13942: EMPTY
13943: LIST
13944: LIST
13945: LIST
13946: PPUSH
13947: CALL_OW 69
13951: PUSH
13952: LD_EXP 1
13956: PUSH
13957: LD_EXP 14
13961: PUSH
13962: LD_EXP 5
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: DIFF
13972: PPUSH
13973: LD_STRING D9a-Sol1-1
13975: PPUSH
13976: LD_STRING D9a-Sol1-1
13978: PPUSH
13979: CALL 9658 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13983: LD_INT 22
13985: PUSH
13986: LD_INT 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 26
13995: PUSH
13996: LD_INT 1
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: LD_INT 25
14008: PUSH
14009: LD_INT 1
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 25
14018: PUSH
14019: LD_INT 2
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PUSH
14026: LD_INT 25
14028: PUSH
14029: LD_INT 3
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: PUSH
14036: LD_INT 25
14038: PUSH
14039: LD_INT 4
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 25
14048: PUSH
14049: LD_INT 5
14051: PUSH
14052: EMPTY
14053: LIST
14054: LIST
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: PPUSH
14069: CALL_OW 69
14073: PUSH
14074: LD_EXP 1
14078: PUSH
14079: LD_EXP 14
14083: PUSH
14084: LD_EXP 5
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: DIFF
14094: PPUSH
14095: LD_STRING D9b-Sol1-1
14097: PPUSH
14098: LD_STRING D9b-Sol1-1
14100: PPUSH
14101: CALL 9658 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14105: LD_STRING 09_arInfo
14107: PPUSH
14108: LD_INT 0
14110: PPUSH
14111: CALL_OW 30
14115: PUSH
14116: LD_INT 1
14118: EQUAL
14119: IFFALSE 14133
// Say ( JMM , D9a-JMM-1 ) ;
14121: LD_EXP 1
14125: PPUSH
14126: LD_STRING D9a-JMM-1
14128: PPUSH
14129: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14133: LD_EXP 1
14137: PPUSH
14138: LD_STRING D9c-JMM-1
14140: PPUSH
14141: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14145: LD_INT 12
14147: PPUSH
14148: LD_INT 1
14150: PPUSH
14151: CALL_OW 321
14155: PUSH
14156: LD_INT 2
14158: EQUAL
14159: IFFALSE 14173
// Say ( JMM , D9c-JMM-1a ) ;
14161: LD_EXP 1
14165: PPUSH
14166: LD_STRING D9c-JMM-1a
14168: PPUSH
14169: CALL_OW 88
// DialogueOff ;
14173: CALL_OW 7
// end ; end ; 3 :
14177: GO 14211
14179: LD_INT 3
14181: DOUBLE
14182: EQUAL
14183: IFTRUE 14187
14185: GO 14210
14187: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14188: LD_VAR 0 7
14192: PUSH
14193: LD_VAR 0 6
14197: ARRAY
14198: PPUSH
14199: LD_VAR 0 4
14203: PPUSH
14204: CALL_OW 115
14208: GO 14211
14210: POP
// end ; end ;
14211: GO 13239
14213: POP
14214: POP
14215: GO 13226
14217: POP
14218: POP
// end ;
14219: LD_VAR 0 3
14223: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14224: LD_INT 0
14226: PPUSH
14227: PPUSH
14228: PPUSH
14229: PPUSH
// for i = 1 to 72 do
14230: LD_ADDR_VAR 0 5
14234: PUSH
14235: DOUBLE
14236: LD_INT 1
14238: DEC
14239: ST_TO_ADDR
14240: LD_INT 72
14242: PUSH
14243: FOR_TO
14244: IFFALSE 14302
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14246: LD_VAR 0 5
14250: PPUSH
14251: LD_VAR 0 1
14255: PPUSH
14256: CALL_OW 321
14260: PUSH
14261: LD_INT 1
14263: EQUAL
14264: PUSH
14265: LD_VAR 0 5
14269: PPUSH
14270: LD_VAR 0 3
14274: PPUSH
14275: CALL_OW 482
14279: PUSH
14280: LD_INT 1
14282: EQUAL
14283: AND
14284: IFFALSE 14300
// AddComResearch ( lab , i ) ;
14286: LD_VAR 0 2
14290: PPUSH
14291: LD_VAR 0 5
14295: PPUSH
14296: CALL_OW 184
14300: GO 14243
14302: POP
14303: POP
// end ;
14304: LD_VAR 0 4
14308: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14309: LD_INT 0
14311: PPUSH
14312: PPUSH
14313: PPUSH
14314: PPUSH
14315: PPUSH
14316: PPUSH
14317: PPUSH
14318: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14319: LD_ADDR_VAR 0 6
14323: PUSH
14324: LD_INT 22
14326: PUSH
14327: LD_VAR 0 1
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: LD_INT 56
14338: PUSH
14339: EMPTY
14340: LIST
14341: PUSH
14342: LD_INT 24
14344: PUSH
14345: LD_INT 700
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: LD_INT 60
14357: PUSH
14358: EMPTY
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 2
14367: PUSH
14368: LD_INT 25
14370: PUSH
14371: LD_INT 1
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: LD_INT 25
14380: PUSH
14381: LD_INT 9
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: LIST
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 69
14404: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14405: LD_ADDR_VAR 0 7
14409: PUSH
14410: LD_INT 22
14412: PUSH
14413: LD_VAR 0 1
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 30
14424: PUSH
14425: LD_INT 32
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 58
14434: PUSH
14435: EMPTY
14436: LIST
14437: PUSH
14438: LD_INT 24
14440: PUSH
14441: LD_INT 251
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: PPUSH
14454: CALL_OW 69
14458: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14459: LD_ADDR_VAR 0 9
14463: PUSH
14464: LD_INT 22
14466: PUSH
14467: LD_VAR 0 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 2
14478: PUSH
14479: LD_INT 30
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: LD_INT 30
14491: PUSH
14492: LD_INT 5
14494: PUSH
14495: EMPTY
14496: LIST
14497: LIST
14498: PUSH
14499: EMPTY
14500: LIST
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 24
14506: PUSH
14507: LD_INT 251
14509: PUSH
14510: EMPTY
14511: LIST
14512: LIST
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: PPUSH
14519: CALL_OW 69
14523: ST_TO_ADDR
// if barrackList > 0 then
14524: LD_VAR 0 9
14528: PUSH
14529: LD_INT 0
14531: GREATER
14532: IFFALSE 14667
// begin if turretList = 0 then
14534: LD_VAR 0 7
14538: PUSH
14539: LD_INT 0
14541: EQUAL
14542: IFFALSE 14591
// begin for i in soldiers_list do
14544: LD_ADDR_VAR 0 4
14548: PUSH
14549: LD_VAR 0 6
14553: PUSH
14554: FOR_IN
14555: IFFALSE 14587
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14557: LD_VAR 0 4
14561: PPUSH
14562: LD_VAR 0 9
14566: PUSH
14567: LD_INT 1
14569: PPUSH
14570: LD_VAR 0 9
14574: PPUSH
14575: CALL_OW 12
14579: ARRAY
14580: PPUSH
14581: CALL_OW 120
14585: GO 14554
14587: POP
14588: POP
// end else
14589: GO 14667
// begin for i in barrackList do
14591: LD_ADDR_VAR 0 4
14595: PUSH
14596: LD_VAR 0 9
14600: PUSH
14601: FOR_IN
14602: IFFALSE 14665
// begin insideUnits = UnitsInside ( i ) ;
14604: LD_ADDR_VAR 0 10
14608: PUSH
14609: LD_VAR 0 4
14613: PPUSH
14614: CALL_OW 313
14618: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14619: LD_VAR 0 10
14623: PUSH
14624: LD_INT 1
14626: ARRAY
14627: PPUSH
14628: LD_VAR 0 7
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14641: LD_VAR 0 6
14645: PUSH
14646: LD_INT 1
14648: ARRAY
14649: PPUSH
14650: LD_VAR 0 7
14654: PUSH
14655: LD_INT 1
14657: ARRAY
14658: PPUSH
14659: CALL_OW 120
// end ;
14663: GO 14601
14665: POP
14666: POP
// end ; end ; end ;
14667: LD_VAR 0 3
14671: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14672: LD_INT 0
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14680: LD_ADDR_VAR 0 6
14684: PUSH
14685: LD_VAR 0 2
14689: PPUSH
14690: CALL_OW 313
14694: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14695: LD_ADDR_VAR 0 7
14699: PUSH
14700: LD_INT 22
14702: PUSH
14703: LD_VAR 0 1
14707: PUSH
14708: EMPTY
14709: LIST
14710: LIST
14711: PUSH
14712: LD_INT 25
14714: PUSH
14715: LD_INT 2
14717: PUSH
14718: EMPTY
14719: LIST
14720: LIST
14721: PUSH
14722: LD_INT 24
14724: PUSH
14725: LD_INT 1000
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: LD_INT 54
14737: PUSH
14738: EMPTY
14739: LIST
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: PPUSH
14751: CALL_OW 69
14755: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14756: LD_ADDR_VAR 0 4
14760: PUSH
14761: LD_INT 22
14763: PUSH
14764: LD_VAR 0 1
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 21
14775: PUSH
14776: LD_INT 3
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: LD_INT 3
14785: PUSH
14786: LD_INT 24
14788: PUSH
14789: LD_INT 1000
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: LIST
14804: PUSH
14805: EMPTY
14806: LIST
14807: PPUSH
14808: CALL_OW 69
14812: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14813: LD_VAR 0 4
14817: NOT
14818: PUSH
14819: LD_VAR 0 7
14823: NOT
14824: AND
14825: PUSH
14826: LD_EXP 42
14830: NOT
14831: AND
14832: IFFALSE 14836
// exit ;
14834: GO 15027
// if buildings_list > 0 and engineerOkInside then
14836: LD_VAR 0 4
14840: PUSH
14841: LD_INT 0
14843: GREATER
14844: PUSH
14845: LD_VAR 0 6
14849: AND
14850: IFFALSE 14904
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14852: LD_ADDR_VAR 0 5
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_VAR 0 1
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 25
14871: PUSH
14872: LD_INT 2
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PPUSH
14883: CALL_OW 69
14887: PUSH
14888: FOR_IN
14889: IFFALSE 14902
// ComExitBuilding ( i ) ;
14891: LD_VAR 0 5
14895: PPUSH
14896: CALL_OW 122
14900: GO 14888
14902: POP
14903: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14904: LD_VAR 0 4
14908: PUSH
14909: LD_INT 0
14911: GREATER
14912: PUSH
14913: LD_VAR 0 7
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: AND
14922: IFFALSE 14976
// begin for i in engineerOkOutside do
14924: LD_ADDR_VAR 0 5
14928: PUSH
14929: LD_VAR 0 7
14933: PUSH
14934: FOR_IN
14935: IFFALSE 14974
// for j in buildings_list do
14937: LD_ADDR_VAR 0 8
14941: PUSH
14942: LD_VAR 0 4
14946: PUSH
14947: FOR_IN
14948: IFFALSE 14970
// ComRepairBuilding ( i , j [ 1 ] ) ;
14950: LD_VAR 0 5
14954: PPUSH
14955: LD_VAR 0 8
14959: PUSH
14960: LD_INT 1
14962: ARRAY
14963: PPUSH
14964: CALL_OW 130
14968: GO 14947
14970: POP
14971: POP
14972: GO 14934
14974: POP
14975: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 0
14983: EQUAL
14984: PUSH
14985: LD_VAR 0 7
14989: PUSH
14990: LD_INT 0
14992: GREATER
14993: AND
14994: IFFALSE 15027
// for i in engineerOkOutside do
14996: LD_ADDR_VAR 0 5
15000: PUSH
15001: LD_VAR 0 7
15005: PUSH
15006: FOR_IN
15007: IFFALSE 15025
// ComEnterUnit ( i , building ) ;
15009: LD_VAR 0 5
15013: PPUSH
15014: LD_VAR 0 2
15018: PPUSH
15019: CALL_OW 120
15023: GO 15006
15025: POP
15026: POP
// end ;
15027: LD_VAR 0 3
15031: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
15032: LD_INT 0
15034: PPUSH
15035: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
15036: LD_INT 22
15038: PUSH
15039: LD_VAR 0 1
15043: PUSH
15044: EMPTY
15045: LIST
15046: LIST
15047: PUSH
15048: LD_INT 25
15050: PUSH
15051: LD_INT 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: EMPTY
15059: LIST
15060: LIST
15061: PPUSH
15062: CALL_OW 69
15066: PUSH
15067: LD_INT 0
15069: GREATER
15070: PUSH
15071: LD_INT 22
15073: PUSH
15074: LD_VAR 0 1
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 21
15085: PUSH
15086: LD_INT 3
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: LD_INT 24
15098: PUSH
15099: LD_INT 1000
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: LIST
15114: PPUSH
15115: CALL_OW 69
15119: PUSH
15120: LD_INT 0
15122: EQUAL
15123: AND
15124: PUSH
15125: LD_VAR 0 2
15129: PUSH
15130: LD_INT 0
15132: GREATER
15133: AND
15134: IFFALSE 15233
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15136: LD_ADDR_VAR 0 4
15140: PUSH
15141: LD_INT 22
15143: PUSH
15144: LD_VAR 0 1
15148: PUSH
15149: EMPTY
15150: LIST
15151: LIST
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 2
15158: PUSH
15159: EMPTY
15160: LIST
15161: LIST
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PPUSH
15167: CALL_OW 69
15171: PUSH
15172: FOR_IN
15173: IFFALSE 15231
// begin AddComExitBuilding ( i ) ;
15175: LD_VAR 0 4
15179: PPUSH
15180: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15184: LD_VAR 0 4
15188: PPUSH
15189: LD_VAR 0 2
15193: PUSH
15194: LD_INT 1
15196: ARRAY
15197: PPUSH
15198: LD_VAR 0 2
15202: PUSH
15203: LD_INT 2
15205: ARRAY
15206: PPUSH
15207: LD_VAR 0 2
15211: PUSH
15212: LD_INT 3
15214: ARRAY
15215: PPUSH
15216: LD_VAR 0 2
15220: PUSH
15221: LD_INT 4
15223: ARRAY
15224: PPUSH
15225: CALL_OW 205
// end ;
15229: GO 15172
15231: POP
15232: POP
// end ; end ;
15233: LD_VAR 0 3
15237: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15238: LD_INT 0
15240: PPUSH
15241: PPUSH
15242: PPUSH
15243: PPUSH
15244: PPUSH
15245: PPUSH
15246: PPUSH
15247: PPUSH
15248: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15249: LD_ADDR_VAR 0 6
15253: PUSH
15254: LD_INT 22
15256: PUSH
15257: LD_VAR 0 1
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: LD_INT 25
15268: PUSH
15269: LD_INT 4
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PUSH
15276: LD_INT 24
15278: PUSH
15279: LD_INT 251
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: LIST
15290: PPUSH
15291: CALL_OW 69
15295: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15296: LD_ADDR_VAR 0 7
15300: PUSH
15301: LD_VAR 0 3
15305: PPUSH
15306: LD_INT 22
15308: PUSH
15309: LD_VAR 0 1
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PUSH
15318: LD_INT 25
15320: PUSH
15321: LD_INT 4
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 50
15330: PUSH
15331: EMPTY
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: LIST
15338: PPUSH
15339: CALL_OW 70
15343: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15344: LD_ADDR_VAR 0 10
15348: PUSH
15349: LD_VAR 0 3
15353: PPUSH
15354: LD_INT 22
15356: PUSH
15357: LD_VAR 0 1
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: PUSH
15366: LD_INT 21
15368: PUSH
15369: LD_INT 1
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: LD_INT 25
15381: PUSH
15382: LD_INT 3
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 3
15395: PUSH
15396: LD_INT 24
15398: PUSH
15399: LD_INT 750
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: PUSH
15406: EMPTY
15407: LIST
15408: LIST
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PPUSH
15416: CALL_OW 70
15420: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15421: LD_ADDR_VAR 0 11
15425: PUSH
15426: LD_VAR 0 2
15430: PPUSH
15431: LD_INT 22
15433: PUSH
15434: LD_VAR 0 1
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 21
15445: PUSH
15446: LD_INT 1
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 25
15458: PUSH
15459: LD_INT 3
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: LD_INT 3
15472: PUSH
15473: LD_INT 24
15475: PUSH
15476: LD_INT 1000
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: PPUSH
15493: CALL_OW 70
15497: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15498: LD_VAR 0 10
15502: NOT
15503: PUSH
15504: LD_VAR 0 7
15508: NOT
15509: AND
15510: PUSH
15511: LD_VAR 0 11
15515: NOT
15516: AND
15517: IFFALSE 15521
// exit ;
15519: GO 15781
// if damageUnits > 0 and sci_list > 0 then
15521: LD_VAR 0 10
15525: PUSH
15526: LD_INT 0
15528: GREATER
15529: PUSH
15530: LD_VAR 0 6
15534: PUSH
15535: LD_INT 0
15537: GREATER
15538: AND
15539: IFFALSE 15572
// for i in damageUnits do
15541: LD_ADDR_VAR 0 8
15545: PUSH
15546: LD_VAR 0 10
15550: PUSH
15551: FOR_IN
15552: IFFALSE 15570
// ComMoveToArea ( i , healArea ) ;
15554: LD_VAR 0 8
15558: PPUSH
15559: LD_VAR 0 2
15563: PPUSH
15564: CALL_OW 113
15568: GO 15551
15570: POP
15571: POP
// if unitsToHeal > 0 and sci_list > 0 then
15572: LD_VAR 0 11
15576: PUSH
15577: LD_INT 0
15579: GREATER
15580: PUSH
15581: LD_VAR 0 6
15585: PUSH
15586: LD_INT 0
15588: GREATER
15589: AND
15590: IFFALSE 15649
// begin for i in sci_list do
15592: LD_ADDR_VAR 0 8
15596: PUSH
15597: LD_VAR 0 6
15601: PUSH
15602: FOR_IN
15603: IFFALSE 15647
// begin ComExitBuilding ( i ) ;
15605: LD_VAR 0 8
15609: PPUSH
15610: CALL_OW 122
// for j in unitsToHeal do
15614: LD_ADDR_VAR 0 9
15618: PUSH
15619: LD_VAR 0 11
15623: PUSH
15624: FOR_IN
15625: IFFALSE 15643
// AddComHeal ( i , j ) ;
15627: LD_VAR 0 8
15631: PPUSH
15632: LD_VAR 0 9
15636: PPUSH
15637: CALL_OW 188
15641: GO 15624
15643: POP
15644: POP
// end ;
15645: GO 15602
15647: POP
15648: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15649: LD_VAR 0 10
15653: PUSH
15654: LD_INT 0
15656: EQUAL
15657: PUSH
15658: LD_VAR 0 11
15662: PUSH
15663: LD_INT 0
15665: EQUAL
15666: AND
15667: PUSH
15668: LD_VAR 0 7
15672: PUSH
15673: LD_INT 0
15675: GREATER
15676: AND
15677: IFFALSE 15781
// for i in sci_listOutside do
15679: LD_ADDR_VAR 0 8
15683: PUSH
15684: LD_VAR 0 7
15688: PUSH
15689: FOR_IN
15690: IFFALSE 15779
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15692: LD_ADDR_VAR 0 12
15696: PUSH
15697: LD_INT 22
15699: PUSH
15700: LD_VAR 0 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 3
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: LD_INT 30
15721: PUSH
15722: LD_INT 8
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: PPUSH
15734: CALL_OW 69
15738: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15739: LD_ADDR_VAR 0 13
15743: PUSH
15744: LD_INT 1
15746: PPUSH
15747: LD_VAR 0 12
15751: PPUSH
15752: CALL_OW 12
15756: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15757: LD_VAR 0 8
15761: PPUSH
15762: LD_VAR 0 12
15766: PUSH
15767: LD_VAR 0 13
15771: ARRAY
15772: PPUSH
15773: CALL_OW 120
// end ;
15777: GO 15689
15779: POP
15780: POP
// end ;
15781: LD_VAR 0 5
15785: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15786: LD_INT 0
15788: PPUSH
15789: PPUSH
15790: PPUSH
15791: PPUSH
15792: PPUSH
15793: PPUSH
15794: PPUSH
15795: PPUSH
15796: PPUSH
15797: PPUSH
15798: PPUSH
// amChassisTab = [ ] ;
15799: LD_ADDR_VAR 0 19
15803: PUSH
15804: EMPTY
15805: ST_TO_ADDR
// arChassisTab = [ ] ;
15806: LD_ADDR_VAR 0 18
15810: PUSH
15811: EMPTY
15812: ST_TO_ADDR
// ruChassisTab = [ ] ;
15813: LD_ADDR_VAR 0 17
15817: PUSH
15818: EMPTY
15819: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15820: LD_INT 35
15822: PPUSH
15823: CALL_OW 67
// if nation = 1 then
15827: LD_VAR 0 5
15831: PUSH
15832: LD_INT 1
15834: EQUAL
15835: IFFALSE 16340
// begin uc_side = side ;
15837: LD_ADDR_OWVAR 20
15841: PUSH
15842: LD_VAR 0 2
15846: ST_TO_ADDR
// uc_nation = nation ;
15847: LD_ADDR_OWVAR 21
15851: PUSH
15852: LD_VAR 0 5
15856: ST_TO_ADDR
// vc_engine = vehengine ;
15857: LD_ADDR_OWVAR 39
15861: PUSH
15862: LD_VAR 0 6
15866: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15867: LD_ADDR_OWVAR 38
15871: PUSH
15872: LD_VAR 0 7
15876: PUSH
15877: LD_INT 1
15879: PPUSH
15880: LD_VAR 0 7
15884: PPUSH
15885: CALL_OW 12
15889: ARRAY
15890: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15891: LD_ADDR_OWVAR 40
15895: PUSH
15896: LD_VAR 0 10
15900: PUSH
15901: LD_INT 1
15903: PPUSH
15904: LD_VAR 0 10
15908: PPUSH
15909: CALL_OW 12
15913: ARRAY
15914: ST_TO_ADDR
// for j = 1 to AMWeapon do
15915: LD_ADDR_VAR 0 14
15919: PUSH
15920: DOUBLE
15921: LD_INT 1
15923: DEC
15924: ST_TO_ADDR
15925: LD_VAR 0 10
15929: PUSH
15930: FOR_TO
15931: IFFALSE 16232
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15933: LD_VAR 0 10
15937: PUSH
15938: LD_VAR 0 14
15942: ARRAY
15943: PUSH
15944: LD_INT 2
15946: EQUAL
15947: PUSH
15948: LD_VAR 0 10
15952: PUSH
15953: LD_VAR 0 14
15957: ARRAY
15958: PUSH
15959: LD_INT 3
15961: EQUAL
15962: OR
15963: IFFALSE 16016
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15965: LD_ADDR_VAR 0 19
15969: PUSH
15970: LD_INT 1
15972: PUSH
15973: LD_INT 2
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: LD_INT 4
15981: PUSH
15982: LD_INT 5
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15992: LD_ADDR_OWVAR 37
15996: PUSH
15997: LD_VAR 0 19
16001: PUSH
16002: LD_INT 1
16004: PPUSH
16005: LD_VAR 0 19
16009: PPUSH
16010: CALL_OW 12
16014: ARRAY
16015: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
16016: LD_VAR 0 10
16020: PUSH
16021: LD_VAR 0 14
16025: ARRAY
16026: PUSH
16027: LD_INT 4
16029: EQUAL
16030: PUSH
16031: LD_VAR 0 10
16035: PUSH
16036: LD_VAR 0 14
16040: ARRAY
16041: PUSH
16042: LD_INT 5
16044: EQUAL
16045: OR
16046: PUSH
16047: LD_VAR 0 10
16051: PUSH
16052: LD_VAR 0 14
16056: ARRAY
16057: PUSH
16058: LD_INT 9
16060: EQUAL
16061: OR
16062: PUSH
16063: LD_VAR 0 10
16067: PUSH
16068: LD_VAR 0 14
16072: ARRAY
16073: PUSH
16074: LD_INT 11
16076: EQUAL
16077: OR
16078: PUSH
16079: LD_VAR 0 10
16083: PUSH
16084: LD_VAR 0 14
16088: ARRAY
16089: PUSH
16090: LD_INT 7
16092: EQUAL
16093: OR
16094: IFFALSE 16143
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16096: LD_ADDR_VAR 0 19
16100: PUSH
16101: LD_INT 2
16103: PUSH
16104: LD_INT 3
16106: PUSH
16107: LD_INT 4
16109: PUSH
16110: LD_INT 5
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16119: LD_ADDR_OWVAR 37
16123: PUSH
16124: LD_VAR 0 19
16128: PUSH
16129: LD_INT 1
16131: PPUSH
16132: LD_VAR 0 19
16136: PPUSH
16137: CALL_OW 12
16141: ARRAY
16142: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16143: LD_VAR 0 10
16147: PUSH
16148: LD_VAR 0 14
16152: ARRAY
16153: PUSH
16154: LD_INT 8
16156: EQUAL
16157: PUSH
16158: LD_VAR 0 10
16162: PUSH
16163: LD_VAR 0 14
16167: ARRAY
16168: PUSH
16169: LD_INT 6
16171: EQUAL
16172: OR
16173: PUSH
16174: LD_VAR 0 10
16178: PUSH
16179: LD_VAR 0 14
16183: ARRAY
16184: PUSH
16185: LD_INT 10
16187: EQUAL
16188: OR
16189: IFFALSE 16230
// begin amChassisTab = [ 4 , 5 ] ;
16191: LD_ADDR_VAR 0 19
16195: PUSH
16196: LD_INT 4
16198: PUSH
16199: LD_INT 5
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16206: LD_ADDR_OWVAR 37
16210: PUSH
16211: LD_VAR 0 19
16215: PUSH
16216: LD_INT 1
16218: PPUSH
16219: LD_VAR 0 19
16223: PPUSH
16224: CALL_OW 12
16228: ARRAY
16229: ST_TO_ADDR
// end ; end ;
16230: GO 15930
16232: POP
16233: POP
// veh = CreateVehicle ;
16234: LD_ADDR_VAR 0 16
16238: PUSH
16239: CALL_OW 45
16243: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16244: LD_VAR 0 16
16248: PPUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: LD_INT 0
16256: PPUSH
16257: CALL_OW 49
// if vc_control = 1 then
16261: LD_OWVAR 38
16265: PUSH
16266: LD_INT 1
16268: EQUAL
16269: IFFALSE 16326
// begin hc_gallery =  ;
16271: LD_ADDR_OWVAR 33
16275: PUSH
16276: LD_STRING 
16278: ST_TO_ADDR
// hc_name =  ;
16279: LD_ADDR_OWVAR 26
16283: PUSH
16284: LD_STRING 
16286: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16287: LD_INT 0
16289: PPUSH
16290: LD_INT 3
16292: PPUSH
16293: LD_VAR 0 4
16297: PPUSH
16298: CALL_OW 380
// un = CreateHuman ;
16302: LD_ADDR_VAR 0 15
16306: PUSH
16307: CALL_OW 44
16311: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16312: LD_VAR 0 15
16316: PPUSH
16317: LD_VAR 0 16
16321: PPUSH
16322: CALL_OW 52
// end ; i = i + 1 ;
16326: LD_ADDR_VAR 0 13
16330: PUSH
16331: LD_VAR 0 13
16335: PUSH
16336: LD_INT 1
16338: PLUS
16339: ST_TO_ADDR
// end ; if nation = 2 then
16340: LD_VAR 0 5
16344: PUSH
16345: LD_INT 2
16347: EQUAL
16348: IFFALSE 16770
// begin uc_side = side ;
16350: LD_ADDR_OWVAR 20
16354: PUSH
16355: LD_VAR 0 2
16359: ST_TO_ADDR
// uc_nation = nation ;
16360: LD_ADDR_OWVAR 21
16364: PUSH
16365: LD_VAR 0 5
16369: ST_TO_ADDR
// vc_engine = vehengine ;
16370: LD_ADDR_OWVAR 39
16374: PUSH
16375: LD_VAR 0 6
16379: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16380: LD_ADDR_OWVAR 38
16384: PUSH
16385: LD_VAR 0 7
16389: PUSH
16390: LD_INT 1
16392: PPUSH
16393: LD_VAR 0 7
16397: PPUSH
16398: CALL_OW 12
16402: ARRAY
16403: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16404: LD_ADDR_OWVAR 40
16408: PUSH
16409: LD_VAR 0 9
16413: PUSH
16414: LD_INT 1
16416: PPUSH
16417: LD_VAR 0 9
16421: PPUSH
16422: CALL_OW 12
16426: ARRAY
16427: ST_TO_ADDR
// for j = 1 to ARWeapons do
16428: LD_ADDR_VAR 0 14
16432: PUSH
16433: DOUBLE
16434: LD_INT 1
16436: DEC
16437: ST_TO_ADDR
16438: LD_VAR 0 9
16442: PUSH
16443: FOR_TO
16444: IFFALSE 16662
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16446: LD_VAR 0 9
16450: PUSH
16451: LD_VAR 0 14
16455: ARRAY
16456: PUSH
16457: LD_INT 24
16459: EQUAL
16460: PUSH
16461: LD_VAR 0 9
16465: PUSH
16466: LD_VAR 0 14
16470: ARRAY
16471: PUSH
16472: LD_INT 22
16474: EQUAL
16475: OR
16476: PUSH
16477: LD_VAR 0 9
16481: PUSH
16482: LD_VAR 0 14
16486: ARRAY
16487: PUSH
16488: LD_INT 23
16490: EQUAL
16491: OR
16492: PUSH
16493: LD_VAR 0 9
16497: PUSH
16498: LD_VAR 0 14
16502: ARRAY
16503: PUSH
16504: LD_INT 30
16506: EQUAL
16507: OR
16508: IFFALSE 16545
// begin arChassisTab = [ 14 ] ;
16510: LD_ADDR_VAR 0 18
16514: PUSH
16515: LD_INT 14
16517: PUSH
16518: EMPTY
16519: LIST
16520: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16521: LD_ADDR_OWVAR 37
16525: PUSH
16526: LD_VAR 0 18
16530: PUSH
16531: LD_INT 1
16533: PPUSH
16534: LD_VAR 0 18
16538: PPUSH
16539: CALL_OW 12
16543: ARRAY
16544: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16545: LD_VAR 0 9
16549: PUSH
16550: LD_VAR 0 14
16554: ARRAY
16555: PUSH
16556: LD_INT 29
16558: EQUAL
16559: PUSH
16560: LD_VAR 0 9
16564: PUSH
16565: LD_VAR 0 14
16569: ARRAY
16570: PUSH
16571: LD_INT 28
16573: EQUAL
16574: OR
16575: PUSH
16576: LD_VAR 0 9
16580: PUSH
16581: LD_VAR 0 14
16585: ARRAY
16586: PUSH
16587: LD_INT 27
16589: EQUAL
16590: OR
16591: PUSH
16592: LD_VAR 0 9
16596: PUSH
16597: LD_VAR 0 14
16601: ARRAY
16602: PUSH
16603: LD_INT 26
16605: EQUAL
16606: OR
16607: PUSH
16608: LD_VAR 0 9
16612: PUSH
16613: LD_VAR 0 14
16617: ARRAY
16618: PUSH
16619: LD_INT 25
16621: EQUAL
16622: OR
16623: IFFALSE 16660
// begin arChassisTab = [ 14 ] ;
16625: LD_ADDR_VAR 0 18
16629: PUSH
16630: LD_INT 14
16632: PUSH
16633: EMPTY
16634: LIST
16635: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16636: LD_ADDR_OWVAR 37
16640: PUSH
16641: LD_VAR 0 18
16645: PUSH
16646: LD_INT 1
16648: PPUSH
16649: LD_VAR 0 18
16653: PPUSH
16654: CALL_OW 12
16658: ARRAY
16659: ST_TO_ADDR
// end ; end ;
16660: GO 16443
16662: POP
16663: POP
// veh = CreateVehicle ;
16664: LD_ADDR_VAR 0 16
16668: PUSH
16669: CALL_OW 45
16673: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16674: LD_VAR 0 16
16678: PPUSH
16679: LD_VAR 0 1
16683: PPUSH
16684: LD_INT 0
16686: PPUSH
16687: CALL_OW 49
// if vc_control = 1 then
16691: LD_OWVAR 38
16695: PUSH
16696: LD_INT 1
16698: EQUAL
16699: IFFALSE 16756
// begin hc_gallery =  ;
16701: LD_ADDR_OWVAR 33
16705: PUSH
16706: LD_STRING 
16708: ST_TO_ADDR
// hc_name =  ;
16709: LD_ADDR_OWVAR 26
16713: PUSH
16714: LD_STRING 
16716: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16717: LD_INT 0
16719: PPUSH
16720: LD_INT 3
16722: PPUSH
16723: LD_VAR 0 4
16727: PPUSH
16728: CALL_OW 380
// un = CreateHuman ;
16732: LD_ADDR_VAR 0 15
16736: PUSH
16737: CALL_OW 44
16741: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16742: LD_VAR 0 15
16746: PPUSH
16747: LD_VAR 0 16
16751: PPUSH
16752: CALL_OW 52
// end ; i = i + 1 ;
16756: LD_ADDR_VAR 0 13
16760: PUSH
16761: LD_VAR 0 13
16765: PUSH
16766: LD_INT 1
16768: PLUS
16769: ST_TO_ADDR
// end ; if nation = 3 then
16770: LD_VAR 0 5
16774: PUSH
16775: LD_INT 3
16777: EQUAL
16778: IFFALSE 17184
// begin uc_side = side ;
16780: LD_ADDR_OWVAR 20
16784: PUSH
16785: LD_VAR 0 2
16789: ST_TO_ADDR
// uc_nation = nation ;
16790: LD_ADDR_OWVAR 21
16794: PUSH
16795: LD_VAR 0 5
16799: ST_TO_ADDR
// vc_engine = vehengine ;
16800: LD_ADDR_OWVAR 39
16804: PUSH
16805: LD_VAR 0 6
16809: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16810: LD_ADDR_OWVAR 38
16814: PUSH
16815: LD_VAR 0 7
16819: PUSH
16820: LD_INT 1
16822: PPUSH
16823: LD_VAR 0 7
16827: PPUSH
16828: CALL_OW 12
16832: ARRAY
16833: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16834: LD_ADDR_OWVAR 40
16838: PUSH
16839: LD_VAR 0 8
16843: PUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_VAR 0 8
16851: PPUSH
16852: CALL_OW 12
16856: ARRAY
16857: ST_TO_ADDR
// for j = 1 to RuWeapons do
16858: LD_ADDR_VAR 0 14
16862: PUSH
16863: DOUBLE
16864: LD_INT 1
16866: DEC
16867: ST_TO_ADDR
16868: LD_VAR 0 8
16872: PUSH
16873: FOR_TO
16874: IFFALSE 17076
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16876: LD_VAR 0 8
16880: PUSH
16881: LD_VAR 0 14
16885: ARRAY
16886: PUSH
16887: LD_INT 42
16889: EQUAL
16890: PUSH
16891: LD_VAR 0 8
16895: PUSH
16896: LD_VAR 0 14
16900: ARRAY
16901: PUSH
16902: LD_INT 43
16904: EQUAL
16905: OR
16906: PUSH
16907: LD_VAR 0 8
16911: PUSH
16912: LD_VAR 0 14
16916: ARRAY
16917: PUSH
16918: LD_INT 44
16920: EQUAL
16921: OR
16922: PUSH
16923: LD_VAR 0 8
16927: PUSH
16928: LD_VAR 0 14
16932: ARRAY
16933: PUSH
16934: LD_INT 45
16936: EQUAL
16937: OR
16938: PUSH
16939: LD_VAR 0 8
16943: PUSH
16944: LD_VAR 0 14
16948: ARRAY
16949: PUSH
16950: LD_INT 49
16952: EQUAL
16953: OR
16954: IFFALSE 17003
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16956: LD_ADDR_VAR 0 17
16960: PUSH
16961: LD_INT 21
16963: PUSH
16964: LD_INT 22
16966: PUSH
16967: LD_INT 23
16969: PUSH
16970: LD_INT 24
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16979: LD_ADDR_OWVAR 37
16983: PUSH
16984: LD_VAR 0 17
16988: PUSH
16989: LD_INT 1
16991: PPUSH
16992: LD_VAR 0 17
16996: PPUSH
16997: CALL_OW 12
17001: ARRAY
17002: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
17003: LD_VAR 0 8
17007: PUSH
17008: LD_VAR 0 14
17012: ARRAY
17013: PUSH
17014: LD_INT 46
17016: EQUAL
17017: PUSH
17018: LD_VAR 0 8
17022: PUSH
17023: LD_VAR 0 14
17027: ARRAY
17028: PUSH
17029: LD_INT 47
17031: EQUAL
17032: OR
17033: IFFALSE 17074
// begin ruChassisTab = [ 23 , 24 ] ;
17035: LD_ADDR_VAR 0 17
17039: PUSH
17040: LD_INT 23
17042: PUSH
17043: LD_INT 24
17045: PUSH
17046: EMPTY
17047: LIST
17048: LIST
17049: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17050: LD_ADDR_OWVAR 37
17054: PUSH
17055: LD_VAR 0 17
17059: PUSH
17060: LD_INT 1
17062: PPUSH
17063: LD_VAR 0 17
17067: PPUSH
17068: CALL_OW 12
17072: ARRAY
17073: ST_TO_ADDR
// end ; end ;
17074: GO 16873
17076: POP
17077: POP
// veh = CreateVehicle ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: CALL_OW 45
17087: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17088: LD_VAR 0 16
17092: PPUSH
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_INT 0
17100: PPUSH
17101: CALL_OW 49
// if vc_control = 1 then
17105: LD_OWVAR 38
17109: PUSH
17110: LD_INT 1
17112: EQUAL
17113: IFFALSE 17170
// begin hc_gallery =  ;
17115: LD_ADDR_OWVAR 33
17119: PUSH
17120: LD_STRING 
17122: ST_TO_ADDR
// hc_name =  ;
17123: LD_ADDR_OWVAR 26
17127: PUSH
17128: LD_STRING 
17130: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17131: LD_INT 0
17133: PPUSH
17134: LD_INT 3
17136: PPUSH
17137: LD_VAR 0 4
17141: PPUSH
17142: CALL_OW 380
// un = CreateHuman ;
17146: LD_ADDR_VAR 0 15
17150: PUSH
17151: CALL_OW 44
17155: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17156: LD_VAR 0 15
17160: PPUSH
17161: LD_VAR 0 16
17165: PPUSH
17166: CALL_OW 52
// end ; i = i + 1 ;
17170: LD_ADDR_VAR 0 13
17174: PUSH
17175: LD_VAR 0 13
17179: PUSH
17180: LD_INT 1
17182: PLUS
17183: ST_TO_ADDR
// end ; until i = vehCount ;
17184: LD_VAR 0 13
17188: PUSH
17189: LD_VAR 0 3
17193: EQUAL
17194: IFFALSE 15820
// repeat wait ( 0 0$1 ) ;
17196: LD_INT 35
17198: PPUSH
17199: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17203: LD_ADDR_VAR 0 20
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_VAR 0 2
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: LD_INT 21
17222: PUSH
17223: LD_INT 2
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: PUSH
17230: LD_INT 24
17232: PUSH
17233: LD_INT 650
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: LIST
17244: PPUSH
17245: CALL_OW 69
17249: ST_TO_ADDR
// if vehicleOK_list > 0 then
17250: LD_VAR 0 20
17254: PUSH
17255: LD_INT 0
17257: GREATER
17258: IFFALSE 17449
// begin for i in vehicleOK_list do
17260: LD_ADDR_VAR 0 13
17264: PUSH
17265: LD_VAR 0 20
17269: PUSH
17270: FOR_IN
17271: IFFALSE 17447
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17273: LD_ADDR_VAR 0 21
17277: PUSH
17278: LD_INT 22
17280: PUSH
17281: LD_VAR 0 11
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: PPUSH
17290: CALL_OW 69
17294: PPUSH
17295: LD_VAR 0 13
17299: PPUSH
17300: CALL_OW 74
17304: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17305: LD_ADDR_VAR 0 22
17309: PUSH
17310: LD_INT 22
17312: PUSH
17313: LD_VAR 0 11
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 59
17327: PUSH
17328: EMPTY
17329: LIST
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 1
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: PUSH
17341: LD_INT 21
17343: PUSH
17344: LD_INT 2
17346: PUSH
17347: EMPTY
17348: LIST
17349: LIST
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: EMPTY
17362: LIST
17363: PPUSH
17364: CALL_OW 69
17368: PPUSH
17369: LD_VAR 0 13
17373: PPUSH
17374: CALL_OW 74
17378: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17379: LD_VAR 0 13
17383: PPUSH
17384: LD_VAR 0 21
17388: PPUSH
17389: CALL_OW 296
17393: PUSH
17394: LD_INT 8
17396: PLUS
17397: PUSH
17398: LD_VAR 0 13
17402: PPUSH
17403: LD_VAR 0 22
17407: PPUSH
17408: CALL_OW 296
17412: LESS
17413: IFFALSE 17431
// begin ComAttackUnit ( i , target1 ) ;
17415: LD_VAR 0 13
17419: PPUSH
17420: LD_VAR 0 21
17424: PPUSH
17425: CALL_OW 115
// end else
17429: GO 17445
// begin ComAttackUnit ( i , target2 ) ;
17431: LD_VAR 0 13
17435: PPUSH
17436: LD_VAR 0 22
17440: PPUSH
17441: CALL_OW 115
// end ; end ;
17445: GO 17270
17447: POP
17448: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17449: LD_INT 22
17451: PUSH
17452: LD_VAR 0 2
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: PUSH
17461: LD_INT 21
17463: PUSH
17464: LD_INT 2
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 69
17479: PUSH
17480: LD_INT 0
17482: EQUAL
17483: IFFALSE 17196
// end ;
17485: LD_VAR 0 12
17489: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17490: LD_INT 0
17492: PPUSH
17493: PPUSH
17494: PPUSH
17495: PPUSH
17496: PPUSH
17497: PPUSH
17498: PPUSH
17499: PPUSH
17500: PPUSH
17501: PPUSH
17502: PPUSH
// for i = 1 to soldierCount do
17503: LD_ADDR_VAR 0 13
17507: PUSH
17508: DOUBLE
17509: LD_INT 1
17511: DEC
17512: ST_TO_ADDR
17513: LD_VAR 0 3
17517: PUSH
17518: FOR_TO
17519: IFFALSE 17601
// begin uc_side = side ;
17521: LD_ADDR_OWVAR 20
17525: PUSH
17526: LD_VAR 0 1
17530: ST_TO_ADDR
// uc_nation = nation ;
17531: LD_ADDR_OWVAR 21
17535: PUSH
17536: LD_VAR 0 2
17540: ST_TO_ADDR
// hc_name =  ;
17541: LD_ADDR_OWVAR 26
17545: PUSH
17546: LD_STRING 
17548: ST_TO_ADDR
// hc_gallery =  ;
17549: LD_ADDR_OWVAR 33
17553: PUSH
17554: LD_STRING 
17556: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17557: LD_INT 0
17559: PPUSH
17560: LD_INT 1
17562: PPUSH
17563: LD_VAR 0 8
17567: PPUSH
17568: CALL_OW 380
// un = CreateHuman ;
17572: LD_ADDR_VAR 0 15
17576: PUSH
17577: CALL_OW 44
17581: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17582: LD_VAR 0 15
17586: PPUSH
17587: LD_VAR 0 9
17591: PPUSH
17592: LD_INT 0
17594: PPUSH
17595: CALL_OW 49
// end ;
17599: GO 17518
17601: POP
17602: POP
// for i = 1 to sniperCount do
17603: LD_ADDR_VAR 0 13
17607: PUSH
17608: DOUBLE
17609: LD_INT 1
17611: DEC
17612: ST_TO_ADDR
17613: LD_VAR 0 4
17617: PUSH
17618: FOR_TO
17619: IFFALSE 17701
// begin uc_side = side ;
17621: LD_ADDR_OWVAR 20
17625: PUSH
17626: LD_VAR 0 1
17630: ST_TO_ADDR
// uc_nation = nation ;
17631: LD_ADDR_OWVAR 21
17635: PUSH
17636: LD_VAR 0 2
17640: ST_TO_ADDR
// hc_name =  ;
17641: LD_ADDR_OWVAR 26
17645: PUSH
17646: LD_STRING 
17648: ST_TO_ADDR
// hc_gallery =  ;
17649: LD_ADDR_OWVAR 33
17653: PUSH
17654: LD_STRING 
17656: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17657: LD_INT 0
17659: PPUSH
17660: LD_INT 5
17662: PPUSH
17663: LD_VAR 0 8
17667: PPUSH
17668: CALL_OW 380
// un = CreateHuman ;
17672: LD_ADDR_VAR 0 15
17676: PUSH
17677: CALL_OW 44
17681: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17682: LD_VAR 0 15
17686: PPUSH
17687: LD_VAR 0 9
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 49
// end ;
17699: GO 17618
17701: POP
17702: POP
// for i = 1 to bazookCount do
17703: LD_ADDR_VAR 0 13
17707: PUSH
17708: DOUBLE
17709: LD_INT 1
17711: DEC
17712: ST_TO_ADDR
17713: LD_VAR 0 5
17717: PUSH
17718: FOR_TO
17719: IFFALSE 17801
// begin uc_side = side ;
17721: LD_ADDR_OWVAR 20
17725: PUSH
17726: LD_VAR 0 1
17730: ST_TO_ADDR
// uc_nation = nation ;
17731: LD_ADDR_OWVAR 21
17735: PUSH
17736: LD_VAR 0 2
17740: ST_TO_ADDR
// hc_name =  ;
17741: LD_ADDR_OWVAR 26
17745: PUSH
17746: LD_STRING 
17748: ST_TO_ADDR
// hc_gallery =  ;
17749: LD_ADDR_OWVAR 33
17753: PUSH
17754: LD_STRING 
17756: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17757: LD_INT 0
17759: PPUSH
17760: LD_INT 9
17762: PPUSH
17763: LD_VAR 0 8
17767: PPUSH
17768: CALL_OW 380
// un = CreateHuman ;
17772: LD_ADDR_VAR 0 15
17776: PUSH
17777: CALL_OW 44
17781: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17782: LD_VAR 0 15
17786: PPUSH
17787: LD_VAR 0 9
17791: PPUSH
17792: LD_INT 0
17794: PPUSH
17795: CALL_OW 49
// end ;
17799: GO 17718
17801: POP
17802: POP
// for i = 1 to mortalCount do
17803: LD_ADDR_VAR 0 13
17807: PUSH
17808: DOUBLE
17809: LD_INT 1
17811: DEC
17812: ST_TO_ADDR
17813: LD_VAR 0 6
17817: PUSH
17818: FOR_TO
17819: IFFALSE 17901
// begin uc_side = side ;
17821: LD_ADDR_OWVAR 20
17825: PUSH
17826: LD_VAR 0 1
17830: ST_TO_ADDR
// uc_nation = nation ;
17831: LD_ADDR_OWVAR 21
17835: PUSH
17836: LD_VAR 0 2
17840: ST_TO_ADDR
// hc_name =  ;
17841: LD_ADDR_OWVAR 26
17845: PUSH
17846: LD_STRING 
17848: ST_TO_ADDR
// hc_gallery =  ;
17849: LD_ADDR_OWVAR 33
17853: PUSH
17854: LD_STRING 
17856: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17857: LD_INT 0
17859: PPUSH
17860: LD_INT 8
17862: PPUSH
17863: LD_VAR 0 8
17867: PPUSH
17868: CALL_OW 380
// un = CreateHuman ;
17872: LD_ADDR_VAR 0 15
17876: PUSH
17877: CALL_OW 44
17881: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17882: LD_VAR 0 15
17886: PPUSH
17887: LD_VAR 0 9
17891: PPUSH
17892: LD_INT 0
17894: PPUSH
17895: CALL_OW 49
// end ;
17899: GO 17818
17901: POP
17902: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17903: LD_ADDR_VAR 0 18
17907: PUSH
17908: LD_INT 22
17910: PUSH
17911: LD_VAR 0 1
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 2
17922: PUSH
17923: LD_INT 25
17925: PUSH
17926: LD_INT 1
17928: PUSH
17929: EMPTY
17930: LIST
17931: LIST
17932: PUSH
17933: LD_INT 25
17935: PUSH
17936: LD_INT 5
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 25
17945: PUSH
17946: LD_INT 8
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 25
17955: PUSH
17956: LD_INT 9
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PPUSH
17974: CALL_OW 69
17978: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17979: LD_ADDR_VAR 0 17
17983: PUSH
17984: LD_INT 22
17986: PUSH
17987: LD_VAR 0 1
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 25
17998: PUSH
17999: LD_INT 4
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: EMPTY
18007: LIST
18008: LIST
18009: PPUSH
18010: CALL_OW 69
18014: ST_TO_ADDR
// for i in medic_list do
18015: LD_ADDR_VAR 0 13
18019: PUSH
18020: LD_VAR 0 17
18024: PUSH
18025: FOR_IN
18026: IFFALSE 18044
// ComMoveToArea ( i , healArea ) ;
18028: LD_VAR 0 13
18032: PPUSH
18033: LD_VAR 0 10
18037: PPUSH
18038: CALL_OW 113
18042: GO 18025
18044: POP
18045: POP
// repeat wait ( 0 0$1 ) ;
18046: LD_INT 35
18048: PPUSH
18049: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
18053: LD_ADDR_VAR 0 16
18057: PUSH
18058: LD_INT 22
18060: PUSH
18061: LD_VAR 0 1
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 1
18072: PUSH
18073: LD_INT 3
18075: PUSH
18076: LD_INT 24
18078: PUSH
18079: LD_INT 550
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: PUSH
18090: LD_INT 24
18092: PUSH
18093: LD_INT 250
18095: PUSH
18096: EMPTY
18097: LIST
18098: LIST
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18114: LD_ADDR_VAR 0 18
18118: PUSH
18119: LD_INT 22
18121: PUSH
18122: LD_VAR 0 1
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: LD_INT 25
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 25
18146: PUSH
18147: LD_INT 5
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 25
18156: PUSH
18157: LD_INT 8
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 25
18166: PUSH
18167: LD_INT 9
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 24
18183: PUSH
18184: LD_INT 1000
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: LIST
18195: PPUSH
18196: CALL_OW 69
18200: ST_TO_ADDR
// if medicCount > 0 then
18201: LD_VAR 0 7
18205: PUSH
18206: LD_INT 0
18208: GREATER
18209: IFFALSE 18283
// begin if damageUnit_list > 0 then
18211: LD_VAR 0 16
18215: PUSH
18216: LD_INT 0
18218: GREATER
18219: IFFALSE 18283
// begin for i in damageUnit_list do
18221: LD_ADDR_VAR 0 13
18225: PUSH
18226: LD_VAR 0 16
18230: PUSH
18231: FOR_IN
18232: IFFALSE 18281
// begin ComMoveToArea ( i , healArea ) ;
18234: LD_VAR 0 13
18238: PPUSH
18239: LD_VAR 0 10
18243: PPUSH
18244: CALL_OW 113
// for j in medic_list do
18248: LD_ADDR_VAR 0 14
18252: PUSH
18253: LD_VAR 0 17
18257: PUSH
18258: FOR_IN
18259: IFFALSE 18277
// AddComHeal ( j , i ) ;
18261: LD_VAR 0 14
18265: PPUSH
18266: LD_VAR 0 13
18270: PPUSH
18271: CALL_OW 188
18275: GO 18258
18277: POP
18278: POP
// end ;
18279: GO 18231
18281: POP
18282: POP
// end ; end ; for i in soldiersOK_list do
18283: LD_ADDR_VAR 0 13
18287: PUSH
18288: LD_VAR 0 18
18292: PUSH
18293: FOR_IN
18294: IFFALSE 18470
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18296: LD_ADDR_VAR 0 21
18300: PUSH
18301: LD_INT 22
18303: PUSH
18304: LD_VAR 0 11
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PPUSH
18313: CALL_OW 69
18317: PPUSH
18318: LD_VAR 0 13
18322: PPUSH
18323: CALL_OW 74
18327: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18328: LD_ADDR_VAR 0 22
18332: PUSH
18333: LD_INT 22
18335: PUSH
18336: LD_VAR 0 11
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 2
18347: PUSH
18348: LD_INT 59
18350: PUSH
18351: EMPTY
18352: LIST
18353: PUSH
18354: LD_INT 21
18356: PUSH
18357: LD_INT 1
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 21
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: EMPTY
18385: LIST
18386: PPUSH
18387: CALL_OW 69
18391: PPUSH
18392: LD_VAR 0 13
18396: PPUSH
18397: CALL_OW 74
18401: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18402: LD_VAR 0 13
18406: PPUSH
18407: LD_VAR 0 21
18411: PPUSH
18412: CALL_OW 296
18416: PUSH
18417: LD_INT 8
18419: PLUS
18420: PUSH
18421: LD_VAR 0 13
18425: PPUSH
18426: LD_VAR 0 22
18430: PPUSH
18431: CALL_OW 296
18435: LESS
18436: IFFALSE 18454
// begin ComAttackUnit ( i , target1 ) ;
18438: LD_VAR 0 13
18442: PPUSH
18443: LD_VAR 0 21
18447: PPUSH
18448: CALL_OW 115
// end else
18452: GO 18468
// begin ComAttackUnit ( i , target2 ) ;
18454: LD_VAR 0 13
18458: PPUSH
18459: LD_VAR 0 22
18463: PPUSH
18464: CALL_OW 115
// end ; end ;
18468: GO 18293
18470: POP
18471: POP
// for i in soldiersOK_list do
18472: LD_ADDR_VAR 0 13
18476: PUSH
18477: LD_VAR 0 18
18481: PUSH
18482: FOR_IN
18483: IFFALSE 18659
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18485: LD_ADDR_VAR 0 21
18489: PUSH
18490: LD_INT 22
18492: PUSH
18493: LD_VAR 0 11
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: PPUSH
18507: LD_VAR 0 13
18511: PPUSH
18512: CALL_OW 74
18516: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18517: LD_ADDR_VAR 0 22
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_VAR 0 11
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 2
18536: PUSH
18537: LD_INT 59
18539: PUSH
18540: EMPTY
18541: LIST
18542: PUSH
18543: LD_INT 21
18545: PUSH
18546: LD_INT 1
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: LD_INT 21
18555: PUSH
18556: LD_INT 2
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: PUSH
18569: EMPTY
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: PPUSH
18576: CALL_OW 69
18580: PPUSH
18581: LD_VAR 0 13
18585: PPUSH
18586: CALL_OW 74
18590: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18591: LD_VAR 0 13
18595: PPUSH
18596: LD_VAR 0 21
18600: PPUSH
18601: CALL_OW 296
18605: PUSH
18606: LD_INT 8
18608: PLUS
18609: PUSH
18610: LD_VAR 0 13
18614: PPUSH
18615: LD_VAR 0 22
18619: PPUSH
18620: CALL_OW 296
18624: LESS
18625: IFFALSE 18643
// begin ComAttackUnit ( i , target1 ) ;
18627: LD_VAR 0 13
18631: PPUSH
18632: LD_VAR 0 21
18636: PPUSH
18637: CALL_OW 115
// end else
18641: GO 18657
// begin ComAttackUnit ( i , target2 ) ;
18643: LD_VAR 0 13
18647: PPUSH
18648: LD_VAR 0 22
18652: PPUSH
18653: CALL_OW 115
// end ; end ;
18657: GO 18482
18659: POP
18660: POP
// until soldiersOK_list = [ ] ;
18661: LD_VAR 0 18
18665: PUSH
18666: EMPTY
18667: EQUAL
18668: IFFALSE 18046
// end ;
18670: LD_VAR 0 12
18674: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
18675: LD_INT 0
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
// repeat wait ( 0 0$1 ) ;
18684: LD_INT 35
18686: PPUSH
18687: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
18691: LD_ADDR_VAR 0 7
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_INT 2
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 25
18708: PUSH
18709: LD_INT 4
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 3
18718: PUSH
18719: LD_INT 60
18721: PUSH
18722: EMPTY
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: LIST
18733: PPUSH
18734: CALL_OW 69
18738: ST_TO_ADDR
// if not tmp then
18739: LD_VAR 0 7
18743: NOT
18744: IFFALSE 18748
// continue ;
18746: GO 18684
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18748: LD_ADDR_VAR 0 3
18752: PUSH
18753: LD_INT 5
18755: PPUSH
18756: LD_INT 22
18758: PUSH
18759: LD_INT 0
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: LD_INT 25
18768: PUSH
18769: LD_INT 12
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PPUSH
18780: CALL_OW 70
18784: PUSH
18785: FOR_IN
18786: IFFALSE 18819
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
18788: LD_VAR 0 7
18792: PPUSH
18793: LD_VAR 0 3
18797: PPUSH
18798: CALL_OW 250
18802: PPUSH
18803: LD_VAR 0 3
18807: PPUSH
18808: CALL_OW 251
18812: PPUSH
18813: CALL_OW 131
18817: GO 18785
18819: POP
18820: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18821: LD_INT 22
18823: PUSH
18824: LD_INT 2
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 25
18833: PUSH
18834: LD_INT 4
18836: PUSH
18837: EMPTY
18838: LIST
18839: LIST
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PPUSH
18845: CALL_OW 69
18849: PUSH
18850: LD_INT 0
18852: EQUAL
18853: PUSH
18854: LD_INT 5
18856: PPUSH
18857: LD_INT 22
18859: PUSH
18860: LD_INT 0
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 25
18869: PUSH
18870: LD_INT 12
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: EMPTY
18878: LIST
18879: LIST
18880: PPUSH
18881: CALL_OW 70
18885: PUSH
18886: LD_INT 0
18888: EQUAL
18889: OR
18890: IFFALSE 18684
// repeat wait ( 0 0$1 ) ;
18892: LD_INT 35
18894: PPUSH
18895: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
18899: LD_ADDR_VAR 0 5
18903: PUSH
18904: LD_INT 22
18906: PUSH
18907: LD_INT 2
18909: PUSH
18910: EMPTY
18911: LIST
18912: LIST
18913: PUSH
18914: LD_INT 30
18916: PUSH
18917: LD_INT 5
18919: PUSH
18920: EMPTY
18921: LIST
18922: LIST
18923: PUSH
18924: EMPTY
18925: LIST
18926: LIST
18927: PPUSH
18928: CALL_OW 69
18932: ST_TO_ADDR
// until arm ;
18933: LD_VAR 0 5
18937: IFFALSE 18892
// wait ( 0 0$25 ) ;
18939: LD_INT 875
18941: PPUSH
18942: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18946: LD_ADDR_VAR 0 6
18950: PUSH
18951: LD_INT 22
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 30
18966: PUSH
18967: LD_INT 0
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 30
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: LIST
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: PPUSH
18993: CALL_OW 69
18997: ST_TO_ADDR
// j := 0 ;
18998: LD_ADDR_VAR 0 3
19002: PUSH
19003: LD_INT 0
19005: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
19006: LD_ADDR_VAR 0 2
19010: PUSH
19011: LD_INT 22
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 25
19023: PUSH
19024: LD_INT 12
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PPUSH
19035: CALL_OW 69
19039: PUSH
19040: FOR_IN
19041: IFFALSE 19128
// begin ComMoveXY ( i , 63 , 16 ) ;
19043: LD_VAR 0 2
19047: PPUSH
19048: LD_INT 63
19050: PPUSH
19051: LD_INT 16
19053: PPUSH
19054: CALL_OW 111
// j := j + 1 ;
19058: LD_ADDR_VAR 0 3
19062: PUSH
19063: LD_VAR 0 3
19067: PUSH
19068: LD_INT 1
19070: PLUS
19071: ST_TO_ADDR
// if j < 5 then
19072: LD_VAR 0 3
19076: PUSH
19077: LD_INT 5
19079: LESS
19080: IFFALSE 19098
// b := arm [ 1 ] else
19082: LD_ADDR_VAR 0 4
19086: PUSH
19087: LD_VAR 0 5
19091: PUSH
19092: LD_INT 1
19094: ARRAY
19095: ST_TO_ADDR
19096: GO 19112
// b := dep [ 1 ] ;
19098: LD_ADDR_VAR 0 4
19102: PUSH
19103: LD_VAR 0 6
19107: PUSH
19108: LD_INT 1
19110: ARRAY
19111: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
19112: LD_VAR 0 2
19116: PPUSH
19117: LD_VAR 0 4
19121: PPUSH
19122: CALL_OW 180
// end ;
19126: GO 19040
19128: POP
19129: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 25
19147: PUSH
19148: LD_INT 4
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PPUSH
19159: CALL_OW 69
19163: PUSH
19164: FOR_IN
19165: IFFALSE 19211
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19167: LD_VAR 0 2
19171: PPUSH
19172: LD_INT 22
19174: PUSH
19175: LD_INT 2
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 30
19184: PUSH
19185: LD_INT 8
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 69
19200: PUSH
19201: LD_INT 1
19203: ARRAY
19204: PPUSH
19205: CALL_OW 120
19209: GO 19164
19211: POP
19212: POP
// end ;
19213: LD_VAR 0 1
19217: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19218: LD_INT 0
19220: PPUSH
19221: PPUSH
19222: PPUSH
19223: PPUSH
19224: PPUSH
19225: PPUSH
19226: PPUSH
19227: PPUSH
19228: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19229: LD_INT 22
19231: PUSH
19232: LD_VAR 0 1
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 21
19243: PUSH
19244: LD_INT 2
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PPUSH
19255: CALL_OW 69
19259: PUSH
19260: LD_VAR 0 3
19264: LESSEQUAL
19265: IFFALSE 19409
// for i = 1 to vehCount do
19267: LD_ADDR_VAR 0 10
19271: PUSH
19272: DOUBLE
19273: LD_INT 1
19275: DEC
19276: ST_TO_ADDR
19277: LD_VAR 0 3
19281: PUSH
19282: FOR_TO
19283: IFFALSE 19407
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19285: LD_ADDR_VAR 0 12
19289: PUSH
19290: LD_VAR 0 5
19294: PUSH
19295: LD_INT 1
19297: PPUSH
19298: LD_VAR 0 5
19302: PPUSH
19303: CALL_OW 12
19307: ARRAY
19308: ST_TO_ADDR
// if randWeapon = 46 then
19309: LD_VAR 0 12
19313: PUSH
19314: LD_INT 46
19316: EQUAL
19317: IFFALSE 19362
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19319: LD_VAR 0 2
19323: PPUSH
19324: LD_INT 24
19326: PPUSH
19327: LD_VAR 0 6
19331: PPUSH
19332: LD_VAR 0 7
19336: PUSH
19337: LD_INT 1
19339: PPUSH
19340: LD_VAR 0 7
19344: PPUSH
19345: CALL_OW 12
19349: ARRAY
19350: PPUSH
19351: LD_VAR 0 12
19355: PPUSH
19356: CALL_OW 185
19360: GO 19405
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19362: LD_VAR 0 2
19366: PPUSH
19367: LD_VAR 0 8
19371: PPUSH
19372: LD_VAR 0 6
19376: PPUSH
19377: LD_VAR 0 7
19381: PUSH
19382: LD_INT 1
19384: PPUSH
19385: LD_VAR 0 7
19389: PPUSH
19390: CALL_OW 12
19394: ARRAY
19395: PPUSH
19396: LD_VAR 0 12
19400: PPUSH
19401: CALL_OW 185
// end ;
19405: GO 19282
19407: POP
19408: POP
// repeat wait ( 0 0$1 ) ;
19409: LD_INT 35
19411: PPUSH
19412: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19416: LD_INT 22
19418: PUSH
19419: LD_VAR 0 1
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PUSH
19428: LD_INT 21
19430: PUSH
19431: LD_INT 2
19433: PUSH
19434: EMPTY
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 24
19440: PUSH
19441: LD_INT 250
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: LIST
19452: PPUSH
19453: CALL_OW 69
19457: PUSH
19458: LD_VAR 0 3
19462: GREATEREQUAL
19463: IFFALSE 19409
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19465: LD_INT 22
19467: PUSH
19468: LD_VAR 0 1
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 21
19479: PUSH
19480: LD_INT 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 24
19489: PUSH
19490: LD_INT 250
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: LIST
19501: PPUSH
19502: CALL_OW 69
19506: PUSH
19507: LD_VAR 0 3
19511: GREATEREQUAL
19512: IFFALSE 19855
// begin repeat begin wait ( 0 0$1 ) ;
19514: LD_INT 35
19516: PPUSH
19517: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19521: LD_INT 22
19523: PUSH
19524: LD_VAR 0 1
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: PUSH
19533: LD_INT 21
19535: PUSH
19536: LD_INT 2
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: PUSH
19543: LD_INT 24
19545: PUSH
19546: LD_INT 651
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: EMPTY
19554: LIST
19555: LIST
19556: LIST
19557: PPUSH
19558: CALL_OW 69
19562: PUSH
19563: LD_INT 0
19565: GREATER
19566: IFFALSE 19794
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19568: LD_ADDR_VAR 0 10
19572: PUSH
19573: LD_INT 22
19575: PUSH
19576: LD_VAR 0 1
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: LD_INT 21
19587: PUSH
19588: LD_INT 2
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 24
19597: PUSH
19598: LD_INT 651
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: LIST
19609: PPUSH
19610: CALL_OW 69
19614: PUSH
19615: FOR_IN
19616: IFFALSE 19792
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19618: LD_ADDR_VAR 0 16
19622: PUSH
19623: LD_INT 22
19625: PUSH
19626: LD_VAR 0 4
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PPUSH
19635: CALL_OW 69
19639: PPUSH
19640: LD_VAR 0 10
19644: PPUSH
19645: CALL_OW 74
19649: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19650: LD_ADDR_VAR 0 17
19654: PUSH
19655: LD_INT 22
19657: PUSH
19658: LD_VAR 0 4
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 59
19672: PUSH
19673: EMPTY
19674: LIST
19675: PUSH
19676: LD_INT 21
19678: PUSH
19679: LD_INT 1
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 21
19688: PUSH
19689: LD_INT 2
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: PPUSH
19714: LD_VAR 0 10
19718: PPUSH
19719: CALL_OW 74
19723: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19724: LD_VAR 0 10
19728: PPUSH
19729: LD_VAR 0 16
19733: PPUSH
19734: CALL_OW 296
19738: PUSH
19739: LD_INT 8
19741: PLUS
19742: PUSH
19743: LD_VAR 0 10
19747: PPUSH
19748: LD_VAR 0 17
19752: PPUSH
19753: CALL_OW 296
19757: LESS
19758: IFFALSE 19776
// begin ComAttackUnit ( i , target1 ) ;
19760: LD_VAR 0 10
19764: PPUSH
19765: LD_VAR 0 16
19769: PPUSH
19770: CALL_OW 115
// end else
19774: GO 19790
// begin ComAttackUnit ( i , target2 ) ;
19776: LD_VAR 0 10
19780: PPUSH
19781: LD_VAR 0 17
19785: PPUSH
19786: CALL_OW 115
// end ; end ;
19790: GO 19615
19792: POP
19793: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19794: LD_INT 22
19796: PUSH
19797: LD_VAR 0 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: LD_INT 21
19808: PUSH
19809: LD_INT 2
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: PUSH
19816: EMPTY
19817: LIST
19818: LIST
19819: PPUSH
19820: CALL_OW 69
19824: PUSH
19825: LD_INT 0
19827: EQUAL
19828: PUSH
19829: LD_INT 22
19831: PUSH
19832: LD_VAR 0 4
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: PUSH
19841: EMPTY
19842: LIST
19843: PPUSH
19844: CALL_OW 69
19848: PUSH
19849: LD_INT 0
19851: EQUAL
19852: OR
19853: IFFALSE 19514
// end ; end ;
19855: LD_VAR 0 9
19859: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19860: LD_INT 0
19862: PPUSH
19863: PPUSH
19864: PPUSH
19865: PPUSH
// r := 100 ;
19866: LD_ADDR_VAR 0 5
19870: PUSH
19871: LD_INT 100
19873: ST_TO_ADDR
// x := 0 ;
19874: LD_ADDR_VAR 0 6
19878: PUSH
19879: LD_INT 0
19881: ST_TO_ADDR
// while ( x < n ) do
19882: LD_VAR 0 6
19886: PUSH
19887: LD_VAR 0 2
19891: LESS
19892: IFFALSE 20179
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19894: LD_ADDR_VAR 0 4
19898: PUSH
19899: DOUBLE
19900: LD_INT 1
19902: DEC
19903: ST_TO_ADDR
19904: LD_VAR 0 1
19908: PPUSH
19909: LD_INT 0
19911: PPUSH
19912: CALL_OW 517
19916: PUSH
19917: LD_INT 1
19919: ARRAY
19920: PUSH
19921: FOR_TO
19922: IFFALSE 20175
// begin if r > 50 then
19924: LD_VAR 0 5
19928: PUSH
19929: LD_INT 50
19931: GREATER
19932: IFFALSE 20151
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19934: LD_VAR 0 1
19938: PPUSH
19939: LD_INT 0
19941: PPUSH
19942: CALL_OW 517
19946: PUSH
19947: LD_INT 1
19949: ARRAY
19950: PUSH
19951: LD_VAR 0 4
19955: ARRAY
19956: PPUSH
19957: LD_VAR 0 1
19961: PPUSH
19962: LD_INT 0
19964: PPUSH
19965: CALL_OW 517
19969: PUSH
19970: LD_INT 2
19972: ARRAY
19973: PUSH
19974: LD_VAR 0 4
19978: ARRAY
19979: PPUSH
19980: CALL_OW 458
19984: NOT
19985: IFFALSE 20135
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19987: LD_VAR 0 1
19991: PPUSH
19992: LD_INT 0
19994: PPUSH
19995: CALL_OW 517
19999: PUSH
20000: LD_INT 1
20002: ARRAY
20003: PUSH
20004: LD_VAR 0 4
20008: ARRAY
20009: PPUSH
20010: LD_VAR 0 1
20014: PPUSH
20015: LD_INT 0
20017: PPUSH
20018: CALL_OW 517
20022: PUSH
20023: LD_INT 2
20025: ARRAY
20026: PUSH
20027: LD_VAR 0 4
20031: ARRAY
20032: PPUSH
20033: LD_INT 5
20035: PPUSH
20036: LD_INT 0
20038: PPUSH
20039: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
20043: LD_ADDR_EXP 50
20047: PUSH
20048: LD_EXP 50
20052: PPUSH
20053: LD_INT 1
20055: PPUSH
20056: LD_VAR 0 1
20060: PPUSH
20061: LD_INT 0
20063: PPUSH
20064: CALL_OW 517
20068: PUSH
20069: LD_INT 1
20071: ARRAY
20072: PUSH
20073: LD_VAR 0 4
20077: ARRAY
20078: PUSH
20079: LD_VAR 0 1
20083: PPUSH
20084: LD_INT 0
20086: PPUSH
20087: CALL_OW 517
20091: PUSH
20092: LD_INT 2
20094: ARRAY
20095: PUSH
20096: LD_VAR 0 4
20100: ARRAY
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: PPUSH
20106: CALL_OW 2
20110: ST_TO_ADDR
// r := 0 ;
20111: LD_ADDR_VAR 0 5
20115: PUSH
20116: LD_INT 0
20118: ST_TO_ADDR
// x := x + 1 ;
20119: LD_ADDR_VAR 0 6
20123: PUSH
20124: LD_VAR 0 6
20128: PUSH
20129: LD_INT 1
20131: PLUS
20132: ST_TO_ADDR
// end else
20133: GO 20149
// r := r + 35 ;
20135: LD_ADDR_VAR 0 5
20139: PUSH
20140: LD_VAR 0 5
20144: PUSH
20145: LD_INT 35
20147: PLUS
20148: ST_TO_ADDR
// end else
20149: GO 20173
// r := r + rand ( 10 , 25 ) ;
20151: LD_ADDR_VAR 0 5
20155: PUSH
20156: LD_VAR 0 5
20160: PUSH
20161: LD_INT 10
20163: PPUSH
20164: LD_INT 25
20166: PPUSH
20167: CALL_OW 12
20171: PLUS
20172: ST_TO_ADDR
// end ;
20173: GO 19921
20175: POP
20176: POP
20177: GO 19882
// end ; end_of_file
20179: LD_VAR 0 3
20183: RET
// every 0 0$1 trigger russianAI = 1 do
20184: LD_EXP 39
20188: PUSH
20189: LD_INT 1
20191: EQUAL
20192: IFFALSE 20411
20194: GO 20196
20196: DISABLE
// begin enable ;
20197: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20198: LD_INT 3
20200: PPUSH
20201: LD_EXP 30
20205: PPUSH
20206: CALL 14672 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20210: LD_INT 3
20212: PPUSH
20213: LD_EXP 42
20217: PPUSH
20218: CALL 15032 0 2
// if ruPossition = 1 then
20222: LD_EXP 41
20226: PUSH
20227: LD_INT 1
20229: EQUAL
20230: IFFALSE 20285
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20232: LD_INT 3
20234: PPUSH
20235: LD_INT 13
20237: PPUSH
20238: LD_INT 10
20240: PPUSH
20241: LD_INT 22
20243: PUSH
20244: LD_INT 3
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: LD_INT 21
20253: PUSH
20254: LD_INT 3
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 30
20263: PUSH
20264: LD_INT 8
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: EMPTY
20272: LIST
20273: LIST
20274: LIST
20275: PPUSH
20276: CALL_OW 69
20280: PPUSH
20281: CALL 15238 0 4
// if ruPossition = 2 then
20285: LD_EXP 41
20289: PUSH
20290: LD_INT 2
20292: EQUAL
20293: IFFALSE 20348
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20295: LD_INT 3
20297: PPUSH
20298: LD_INT 14
20300: PPUSH
20301: LD_INT 11
20303: PPUSH
20304: LD_INT 22
20306: PUSH
20307: LD_INT 3
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PUSH
20314: LD_INT 21
20316: PUSH
20317: LD_INT 3
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: PUSH
20324: LD_INT 30
20326: PUSH
20327: LD_INT 8
20329: PUSH
20330: EMPTY
20331: LIST
20332: LIST
20333: PUSH
20334: EMPTY
20335: LIST
20336: LIST
20337: LIST
20338: PPUSH
20339: CALL_OW 69
20343: PPUSH
20344: CALL 15238 0 4
// if ruPossition = 3 then
20348: LD_EXP 41
20352: PUSH
20353: LD_INT 3
20355: EQUAL
20356: IFFALSE 20411
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20358: LD_INT 3
20360: PPUSH
20361: LD_INT 15
20363: PPUSH
20364: LD_INT 12
20366: PPUSH
20367: LD_INT 22
20369: PUSH
20370: LD_INT 3
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: LD_INT 21
20379: PUSH
20380: LD_INT 3
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 30
20389: PUSH
20390: LD_INT 8
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: LIST
20401: PPUSH
20402: CALL_OW 69
20406: PPUSH
20407: CALL 15238 0 4
// end ;
20411: END
// every 0 0$1 do
20412: GO 20414
20414: DISABLE
// begin enable ;
20415: ENABLE
// if ruPossition = 1 then
20416: LD_EXP 41
20420: PUSH
20421: LD_INT 1
20423: EQUAL
20424: IFFALSE 20436
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20426: LD_INT 3
20428: PPUSH
20429: LD_INT 10
20431: PPUSH
20432: CALL 14309 0 2
// if ruPossition = 2 then
20436: LD_EXP 41
20440: PUSH
20441: LD_INT 2
20443: EQUAL
20444: IFFALSE 20456
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20446: LD_INT 3
20448: PPUSH
20449: LD_INT 11
20451: PPUSH
20452: CALL 14309 0 2
// if ruPossition = 3 then
20456: LD_EXP 41
20460: PUSH
20461: LD_INT 3
20463: EQUAL
20464: IFFALSE 20476
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20466: LD_INT 3
20468: PPUSH
20469: LD_INT 12
20471: PPUSH
20472: CALL 14309 0 2
// IntBazooka ( 3 , 1 ) ;
20476: LD_INT 3
20478: PPUSH
20479: LD_INT 1
20481: PPUSH
20482: CALL 13108 0 2
// IntBazooka ( 6 , 1 ) ;
20486: LD_INT 6
20488: PPUSH
20489: LD_INT 1
20491: PPUSH
20492: CALL 13108 0 2
// end ;
20496: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20497: LD_EXP 39
20501: PUSH
20502: LD_INT 1
20504: EQUAL
20505: PUSH
20506: LD_EXP 35
20510: PPUSH
20511: CALL_OW 302
20515: AND
20516: PUSH
20517: LD_EXP 35
20521: PPUSH
20522: CALL_OW 255
20526: PUSH
20527: LD_INT 3
20529: EQUAL
20530: AND
20531: PUSH
20532: LD_INT 22
20534: PUSH
20535: LD_INT 3
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 21
20544: PUSH
20545: LD_INT 2
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: PUSH
20552: LD_INT 33
20554: PUSH
20555: LD_INT 3
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: LIST
20566: PPUSH
20567: CALL_OW 69
20571: PUSH
20572: LD_INT 0
20574: EQUAL
20575: AND
20576: IFFALSE 20784
20578: GO 20580
20580: DISABLE
// begin enable ;
20581: ENABLE
// if Difficulty = 1 then
20582: LD_OWVAR 67
20586: PUSH
20587: LD_INT 1
20589: EQUAL
20590: IFFALSE 20652
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20592: LD_INT 3
20594: PPUSH
20595: LD_EXP 35
20599: PPUSH
20600: LD_INT 5
20602: PPUSH
20603: LD_INT 8
20605: PPUSH
20606: CALL_OW 12
20610: PPUSH
20611: LD_INT 1
20613: PPUSH
20614: LD_INT 43
20616: PUSH
20617: LD_INT 44
20619: PUSH
20620: LD_INT 45
20622: PUSH
20623: LD_INT 46
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: PPUSH
20632: LD_INT 1
20634: PPUSH
20635: LD_INT 3
20637: PUSH
20638: LD_INT 3
20640: PUSH
20641: EMPTY
20642: LIST
20643: LIST
20644: PPUSH
20645: LD_INT 22
20647: PPUSH
20648: CALL 19218 0 8
// if Difficulty = 2 then
20652: LD_OWVAR 67
20656: PUSH
20657: LD_INT 2
20659: EQUAL
20660: IFFALSE 20718
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20662: LD_INT 3
20664: PPUSH
20665: LD_EXP 35
20669: PPUSH
20670: LD_INT 6
20672: PPUSH
20673: LD_INT 8
20675: PPUSH
20676: CALL_OW 12
20680: PPUSH
20681: LD_INT 1
20683: PPUSH
20684: LD_INT 44
20686: PUSH
20687: LD_INT 45
20689: PUSH
20690: LD_INT 46
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: LIST
20697: PPUSH
20698: LD_INT 1
20700: PPUSH
20701: LD_INT 3
20703: PUSH
20704: LD_INT 3
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PPUSH
20711: LD_INT 22
20713: PPUSH
20714: CALL 19218 0 8
// if Difficulty = 3 then
20718: LD_OWVAR 67
20722: PUSH
20723: LD_INT 3
20725: EQUAL
20726: IFFALSE 20784
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20728: LD_INT 3
20730: PPUSH
20731: LD_EXP 35
20735: PPUSH
20736: LD_INT 7
20738: PPUSH
20739: LD_INT 8
20741: PPUSH
20742: CALL_OW 12
20746: PPUSH
20747: LD_INT 1
20749: PPUSH
20750: LD_INT 44
20752: PUSH
20753: LD_INT 45
20755: PUSH
20756: LD_INT 46
20758: PUSH
20759: EMPTY
20760: LIST
20761: LIST
20762: LIST
20763: PPUSH
20764: LD_INT 1
20766: PPUSH
20767: LD_INT 3
20769: PUSH
20770: LD_INT 3
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PPUSH
20777: LD_INT 22
20779: PPUSH
20780: CALL 19218 0 8
// end ;
20784: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20785: LD_EXP 50
20789: PUSH
20790: LD_EXP 49
20794: AND
20795: IFFALSE 20916
20797: GO 20799
20799: DISABLE
20800: LD_INT 0
20802: PPUSH
// begin enable ;
20803: ENABLE
// for i in arabianMines do
20804: LD_ADDR_VAR 0 1
20808: PUSH
20809: LD_EXP 50
20813: PUSH
20814: FOR_IN
20815: IFFALSE 20914
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20817: LD_INT 22
20819: PUSH
20820: LD_INT 1
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PUSH
20827: LD_INT 92
20829: PUSH
20830: LD_VAR 0 1
20834: PUSH
20835: LD_INT 1
20837: ARRAY
20838: PUSH
20839: LD_VAR 0 1
20843: PUSH
20844: LD_INT 2
20846: ARRAY
20847: PUSH
20848: LD_INT 3
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: LIST
20855: LIST
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PPUSH
20861: CALL_OW 69
20865: IFFALSE 20912
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20867: LD_VAR 0 1
20871: PUSH
20872: LD_INT 1
20874: ARRAY
20875: PPUSH
20876: LD_VAR 0 1
20880: PUSH
20881: LD_INT 2
20883: ARRAY
20884: PPUSH
20885: LD_INT 5
20887: PPUSH
20888: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20892: LD_ADDR_EXP 50
20896: PUSH
20897: LD_EXP 50
20901: PPUSH
20902: LD_VAR 0 1
20906: PPUSH
20907: CALL_OW 3
20911: ST_TO_ADDR
// end ; end ;
20912: GO 20814
20914: POP
20915: POP
// end ; end_of_file
20916: PPOPN 1
20918: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 255
20928: PUSH
20929: LD_INT 4
20931: EQUAL
20932: IFFALSE 20946
// SetBName ( building , epsilon ) ;
20934: LD_VAR 0 1
20938: PPUSH
20939: LD_STRING epsilon
20941: PPUSH
20942: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20946: LD_VAR 0 1
20950: PPUSH
20951: CALL_OW 255
20955: PUSH
20956: LD_INT 1
20958: EQUAL
20959: PUSH
20960: LD_VAR 0 1
20964: PPUSH
20965: CALL_OW 266
20969: PUSH
20970: LD_INT 0
20972: EQUAL
20973: AND
20974: IFFALSE 20988
// SetBName ( building , epsilon ) ;
20976: LD_VAR 0 1
20980: PPUSH
20981: LD_STRING epsilon
20983: PPUSH
20984: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20988: LD_VAR 0 1
20992: PPUSH
20993: CALL_OW 255
20997: PUSH
20998: LD_INT 3
21000: EQUAL
21001: PUSH
21002: LD_VAR 0 1
21006: PPUSH
21007: CALL_OW 266
21011: PUSH
21012: LD_INT 0
21014: EQUAL
21015: AND
21016: IFFALSE 21030
// SetBName ( building , chuikov ) ;
21018: LD_VAR 0 1
21022: PPUSH
21023: LD_STRING chuikov
21025: PPUSH
21026: CALL_OW 500
// if GetSide ( building ) = 2 then
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 255
21039: PUSH
21040: LD_INT 2
21042: EQUAL
21043: IFFALSE 21099
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21045: LD_VAR 0 1
21049: PPUSH
21050: CALL_OW 266
21054: PUSH
21055: LD_INT 6
21057: EQUAL
21058: PUSH
21059: LD_VAR 0 1
21063: PPUSH
21064: CALL_OW 266
21068: PUSH
21069: LD_INT 9
21071: EQUAL
21072: OR
21073: IFFALSE 21099
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21075: LD_VAR 0 1
21079: PPUSH
21080: LD_INT 10
21082: PPUSH
21083: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21087: LD_VAR 0 1
21091: PPUSH
21092: LD_INT 11
21094: PPUSH
21095: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
21099: LD_VAR 0 1
21103: PPUSH
21104: CALL_OW 255
21108: PUSH
21109: LD_INT 3
21111: EQUAL
21112: IFFALSE 21138
// begin if GetBType ( building ) = 2 then
21114: LD_VAR 0 1
21118: PPUSH
21119: CALL_OW 266
21123: PUSH
21124: LD_INT 2
21126: EQUAL
21127: IFFALSE 21138
// AddComUpgrade ( building ) ;
21129: LD_VAR 0 1
21133: PPUSH
21134: CALL_OW 206
// end ; end ;
21138: PPOPN 2
21140: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21141: LD_INT 0
21143: PPUSH
21144: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21145: LD_VAR 0 1
21149: PUSH
21150: LD_INT 22
21152: PUSH
21153: LD_INT 3
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: PUSH
21160: LD_INT 23
21162: PUSH
21163: LD_INT 3
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PUSH
21170: LD_INT 21
21172: PUSH
21173: LD_INT 2
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: PUSH
21180: EMPTY
21181: LIST
21182: LIST
21183: LIST
21184: PPUSH
21185: CALL_OW 69
21189: IN
21190: PUSH
21191: LD_EXP 58
21195: NOT
21196: AND
21197: IFFALSE 21228
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21199: LD_ADDR_EXP 58
21203: PUSH
21204: LD_VAR 0 1
21208: PPUSH
21209: CALL_OW 250
21213: PUSH
21214: LD_VAR 0 1
21218: PPUSH
21219: CALL_OW 251
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: ST_TO_ADDR
// end ;
21228: PPOPN 3
21230: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21231: LD_VAR 0 2
21235: PPUSH
21236: CALL_OW 255
21240: PUSH
21241: LD_INT 3
21243: EQUAL
21244: PUSH
21245: LD_EXP 35
21249: PPUSH
21250: CALL_OW 255
21254: PUSH
21255: LD_INT 3
21257: EQUAL
21258: AND
21259: PUSH
21260: LD_EXP 35
21264: PPUSH
21265: CALL_OW 302
21269: AND
21270: IFFALSE 21286
// ComEnterUnit ( human , ruFab ) ;
21272: LD_VAR 0 2
21276: PPUSH
21277: LD_EXP 35
21281: PPUSH
21282: CALL_OW 120
// end ;
21286: PPOPN 2
21288: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21289: LD_INT 0
21291: PPUSH
21292: PPUSH
21293: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21294: LD_VAR 0 1
21298: PPUSH
21299: CALL_OW 255
21303: PUSH
21304: LD_INT 1
21306: EQUAL
21307: PUSH
21308: LD_EXP 61
21312: PUSH
21313: LD_INT 0
21315: EQUAL
21316: AND
21317: IFFALSE 21519
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21319: LD_VAR 0 1
21323: PPUSH
21324: CALL_OW 266
21328: PUSH
21329: LD_INT 26
21331: EQUAL
21332: PUSH
21333: LD_VAR 0 1
21337: PPUSH
21338: CALL_OW 266
21342: PUSH
21343: LD_INT 27
21345: EQUAL
21346: OR
21347: PUSH
21348: LD_VAR 0 1
21352: PPUSH
21353: CALL_OW 266
21357: PUSH
21358: LD_INT 28
21360: EQUAL
21361: OR
21362: IFFALSE 21519
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21364: LD_INT 22
21366: PUSH
21367: LD_INT 1
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: PUSH
21374: LD_INT 2
21376: PUSH
21377: LD_INT 30
21379: PUSH
21380: LD_INT 7
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 30
21389: PUSH
21390: LD_INT 8
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PPUSH
21406: CALL_OW 69
21410: PUSH
21411: LD_INT 0
21413: GREATER
21414: IFFALSE 21519
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21416: LD_ADDR_VAR 0 2
21420: PUSH
21421: LD_INT 22
21423: PUSH
21424: LD_INT 1
21426: PUSH
21427: EMPTY
21428: LIST
21429: LIST
21430: PUSH
21431: LD_INT 2
21433: PUSH
21434: LD_INT 30
21436: PUSH
21437: LD_INT 7
21439: PUSH
21440: EMPTY
21441: LIST
21442: LIST
21443: PUSH
21444: LD_INT 30
21446: PUSH
21447: LD_INT 8
21449: PUSH
21450: EMPTY
21451: LIST
21452: LIST
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: PPUSH
21463: CALL_OW 69
21467: PUSH
21468: FOR_IN
21469: IFFALSE 21517
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21471: LD_VAR 0 2
21475: PPUSH
21476: LD_INT 1
21478: PPUSH
21479: CALL_OW 268
21483: PUSH
21484: LD_INT 11
21486: EQUAL
21487: PUSH
21488: LD_VAR 0 2
21492: PPUSH
21493: LD_INT 2
21495: PPUSH
21496: CALL_OW 268
21500: PUSH
21501: LD_INT 11
21503: EQUAL
21504: OR
21505: IFFALSE 21515
// eventVar1 = 1 ;
21507: LD_ADDR_EXP 61
21511: PUSH
21512: LD_INT 1
21514: ST_TO_ADDR
21515: GO 21468
21517: POP
21518: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21519: LD_VAR 0 1
21523: PPUSH
21524: CALL_OW 255
21528: PUSH
21529: LD_INT 3
21531: EQUAL
21532: IFFALSE 22012
// begin if GetBType ( building ) = b_depot then
21534: LD_VAR 0 1
21538: PPUSH
21539: CALL_OW 266
21543: PUSH
21544: LD_INT 0
21546: EQUAL
21547: IFFALSE 21619
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21549: LD_VAR 0 1
21553: PPUSH
21554: CALL_OW 274
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: LD_INT 5000
21564: PPUSH
21565: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
21569: LD_VAR 0 1
21573: PPUSH
21574: CALL_OW 274
21578: PPUSH
21579: LD_INT 2
21581: PPUSH
21582: LD_INT 300
21584: PPUSH
21585: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
21589: LD_VAR 0 1
21593: PPUSH
21594: CALL_OW 274
21598: PPUSH
21599: LD_INT 3
21601: PPUSH
21602: LD_INT 100
21604: PPUSH
21605: CALL_OW 277
// ruDepot = building ;
21609: LD_ADDR_EXP 30
21613: PUSH
21614: LD_VAR 0 1
21618: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21619: LD_VAR 0 1
21623: PPUSH
21624: CALL_OW 266
21628: PUSH
21629: LD_INT 0
21631: EQUAL
21632: PUSH
21633: LD_VAR 0 1
21637: PPUSH
21638: CALL_OW 266
21642: PUSH
21643: LD_INT 2
21645: EQUAL
21646: OR
21647: PUSH
21648: LD_VAR 0 1
21652: PPUSH
21653: CALL_OW 266
21657: PUSH
21658: LD_INT 4
21660: EQUAL
21661: OR
21662: IFFALSE 21673
// ComUpgrade ( building ) ;
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 146
// if GetBType ( building ) = b_lab then
21673: LD_VAR 0 1
21677: PPUSH
21678: CALL_OW 266
21682: PUSH
21683: LD_INT 6
21685: EQUAL
21686: IFFALSE 21889
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21688: LD_INT 22
21690: PUSH
21691: LD_INT 3
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: PUSH
21698: LD_INT 30
21700: PUSH
21701: LD_INT 8
21703: PUSH
21704: EMPTY
21705: LIST
21706: LIST
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PPUSH
21712: CALL_OW 69
21716: PUSH
21717: LD_INT 0
21719: EQUAL
21720: IFFALSE 21758
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21722: LD_VAR 0 1
21726: PPUSH
21727: LD_INT 10
21729: PPUSH
21730: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_INT 12
21741: PPUSH
21742: CALL_OW 207
// ruLab1 = building ;
21746: LD_ADDR_EXP 31
21750: PUSH
21751: LD_VAR 0 1
21755: ST_TO_ADDR
// end else
21756: GO 21792
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21758: LD_VAR 0 1
21762: PPUSH
21763: LD_INT 11
21765: PPUSH
21766: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21770: LD_VAR 0 1
21774: PPUSH
21775: LD_INT 14
21777: PPUSH
21778: CALL_OW 207
// ruLab2 = building ;
21782: LD_ADDR_EXP 32
21786: PUSH
21787: LD_VAR 0 1
21791: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21792: LD_INT 3
21794: PPUSH
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_INT 3
21802: PPUSH
21803: CALL 14224 0 3
// if ruDestroyedBuildings > 0 then
21807: LD_EXP 42
21811: PUSH
21812: LD_INT 0
21814: GREATER
21815: IFFALSE 21889
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21817: LD_ADDR_EXP 42
21821: PUSH
21822: LD_EXP 42
21826: PPUSH
21827: LD_INT 1
21829: PPUSH
21830: CALL_OW 3
21834: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21835: LD_ADDR_EXP 42
21839: PUSH
21840: LD_EXP 42
21844: PPUSH
21845: LD_INT 1
21847: PPUSH
21848: CALL_OW 3
21852: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21853: LD_ADDR_EXP 42
21857: PUSH
21858: LD_EXP 42
21862: PPUSH
21863: LD_INT 1
21865: PPUSH
21866: CALL_OW 3
21870: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21871: LD_ADDR_EXP 42
21875: PUSH
21876: LD_EXP 42
21880: PPUSH
21881: LD_INT 1
21883: PPUSH
21884: CALL_OW 3
21888: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 266
21898: PUSH
21899: LD_INT 32
21901: EQUAL
21902: IFFALSE 21939
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21904: LD_VAR 0 1
21908: PPUSH
21909: LD_INT 44
21911: PUSH
21912: LD_INT 45
21914: PUSH
21915: LD_INT 46
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 1
21925: PPUSH
21926: LD_INT 3
21928: PPUSH
21929: CALL_OW 12
21933: ARRAY
21934: PPUSH
21935: CALL_OW 208
// if GetBType ( building ) = b_turret then
21939: LD_VAR 0 1
21943: PPUSH
21944: CALL_OW 266
21948: PUSH
21949: LD_INT 33
21951: EQUAL
21952: IFFALSE 21989
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21954: LD_VAR 0 1
21958: PPUSH
21959: LD_INT 44
21961: PUSH
21962: LD_INT 45
21964: PUSH
21965: LD_INT 46
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: LIST
21972: PUSH
21973: LD_INT 1
21975: PPUSH
21976: LD_INT 3
21978: PPUSH
21979: CALL_OW 12
21983: ARRAY
21984: PPUSH
21985: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21989: LD_VAR 0 1
21993: PPUSH
21994: CALL_OW 266
21998: PUSH
21999: LD_INT 24
22001: EQUAL
22002: IFFALSE 22012
// russianAI = 1 ;
22004: LD_ADDR_EXP 39
22008: PUSH
22009: LD_INT 1
22011: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22012: LD_VAR 0 1
22016: PPUSH
22017: CALL_OW 255
22021: PUSH
22022: LD_INT 2
22024: EQUAL
22025: IFFALSE 22595
// begin if GetBType ( building ) = b_breastwork then
22027: LD_VAR 0 1
22031: PPUSH
22032: CALL_OW 266
22036: PUSH
22037: LD_INT 31
22039: EQUAL
22040: IFFALSE 22186
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
22042: LD_ADDR_VAR 0 3
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PUSH
22057: LD_INT 2
22059: PUSH
22060: LD_INT 25
22062: PUSH
22063: LD_INT 1
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: PUSH
22070: LD_INT 25
22072: PUSH
22073: LD_INT 8
22075: PUSH
22076: EMPTY
22077: LIST
22078: LIST
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PPUSH
22089: CALL_OW 69
22093: PUSH
22094: LD_EXP 26
22098: DIFF
22099: ST_TO_ADDR
// if not sol then
22100: LD_VAR 0 3
22104: NOT
22105: IFFALSE 22109
// exit ;
22107: GO 22595
// for i in sol do
22109: LD_ADDR_VAR 0 2
22113: PUSH
22114: LD_VAR 0 3
22118: PUSH
22119: FOR_IN
22120: IFFALSE 22184
// if not GetTag ( i ) then
22122: LD_VAR 0 2
22126: PPUSH
22127: CALL_OW 110
22131: NOT
22132: IFFALSE 22182
// begin if IsInUnit ( i ) then
22134: LD_VAR 0 2
22138: PPUSH
22139: CALL_OW 310
22143: IFFALSE 22154
// ComExitBuilding ( i ) ;
22145: LD_VAR 0 2
22149: PPUSH
22150: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22154: LD_VAR 0 2
22158: PPUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 180
// SetTag ( i , 11 ) ;
22168: LD_VAR 0 2
22172: PPUSH
22173: LD_INT 11
22175: PPUSH
22176: CALL_OW 109
// break ;
22180: GO 22184
// end ;
22182: GO 22119
22184: POP
22185: POP
// end ; if GetBType ( building ) = b_depot then
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 266
22195: PUSH
22196: LD_INT 0
22198: EQUAL
22199: IFFALSE 22285
// begin arDepot = building ;
22201: LD_ADDR_EXP 43
22205: PUSH
22206: LD_VAR 0 1
22210: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22211: LD_INT 38
22213: PUSH
22214: LD_INT 47
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: LD_INT 71
22223: PPUSH
22224: LD_INT 19
22226: PPUSH
22227: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22231: LD_VAR 0 1
22235: PPUSH
22236: CALL_OW 274
22240: PPUSH
22241: LD_INT 1
22243: PPUSH
22244: LD_INT 500
22246: PPUSH
22247: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22251: LD_VAR 0 1
22255: PPUSH
22256: CALL_OW 274
22260: PPUSH
22261: LD_INT 3
22263: PPUSH
22264: LD_INT 30
22266: PPUSH
22267: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22271: LD_EXP 26
22275: PPUSH
22276: LD_EXP 43
22280: PPUSH
22281: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22285: LD_VAR 0 1
22289: PPUSH
22290: CALL_OW 266
22294: PUSH
22295: LD_INT 6
22297: EQUAL
22298: PUSH
22299: LD_VAR 0 1
22303: PPUSH
22304: CALL_OW 266
22308: PUSH
22309: LD_INT 9
22311: EQUAL
22312: OR
22313: IFFALSE 22364
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: LD_INT 10
22322: PPUSH
22323: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22327: LD_VAR 0 1
22331: PPUSH
22332: LD_INT 11
22334: PPUSH
22335: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
22339: LD_INT 2
22341: PPUSH
22342: LD_VAR 0 1
22346: PPUSH
22347: LD_INT 2
22349: PPUSH
22350: CALL 14224 0 3
// arLab = building ;
22354: LD_ADDR_EXP 44
22358: PUSH
22359: LD_VAR 0 1
22363: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22364: LD_VAR 0 1
22368: PPUSH
22369: CALL_OW 266
22373: PUSH
22374: LD_INT 2
22376: EQUAL
22377: PUSH
22378: LD_VAR 0 1
22382: PPUSH
22383: CALL_OW 266
22387: PUSH
22388: LD_INT 4
22390: EQUAL
22391: OR
22392: IFFALSE 22403
// ComUpgrade ( building ) ;
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
22403: LD_VAR 0 1
22407: PPUSH
22408: CALL_OW 266
22412: PUSH
22413: LD_INT 27
22415: EQUAL
22416: IFFALSE 22595
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22418: LD_INT 22
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PUSH
22428: LD_INT 30
22430: PUSH
22431: LD_INT 27
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PPUSH
22442: CALL_OW 69
22446: PUSH
22447: LD_INT 2
22449: EQUAL
22450: IFFALSE 22595
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_INT 22
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: LD_INT 21
22469: PUSH
22470: LD_INT 1
22472: PUSH
22473: EMPTY
22474: LIST
22475: LIST
22476: PUSH
22477: LD_INT 25
22479: PUSH
22480: LD_INT 2
22482: PUSH
22483: EMPTY
22484: LIST
22485: LIST
22486: PUSH
22487: EMPTY
22488: LIST
22489: LIST
22490: LIST
22491: PPUSH
22492: CALL_OW 69
22496: PUSH
22497: LD_INT 1
22499: ARRAY
22500: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22501: LD_VAR 0 2
22505: PPUSH
22506: LD_INT 92
22508: PPUSH
22509: LD_INT 34
22511: PPUSH
22512: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22516: LD_VAR 0 2
22520: PPUSH
22521: LD_INT 82
22523: PPUSH
22524: LD_INT 57
22526: PPUSH
22527: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22531: LD_VAR 0 2
22535: PPUSH
22536: LD_INT 36
22538: PPUSH
22539: LD_INT 28
22541: PPUSH
22542: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22546: LD_INT 22
22548: PUSH
22549: LD_INT 2
22551: PUSH
22552: EMPTY
22553: LIST
22554: LIST
22555: PUSH
22556: LD_INT 21
22558: PUSH
22559: LD_INT 1
22561: PUSH
22562: EMPTY
22563: LIST
22564: LIST
22565: PUSH
22566: LD_INT 25
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: EMPTY
22573: LIST
22574: LIST
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: LIST
22580: PPUSH
22581: CALL_OW 69
22585: PPUSH
22586: LD_EXP 43
22590: PPUSH
22591: CALL_OW 180
// end ; end ; end ;
22595: PPOPN 4
22597: END
// on UpgradeComplete ( building ) do var i ;
22598: LD_INT 0
22600: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22601: LD_VAR 0 1
22605: PPUSH
22606: CALL_OW 255
22610: PUSH
22611: LD_INT 1
22613: EQUAL
22614: PUSH
22615: LD_EXP 61
22619: PUSH
22620: LD_INT 0
22622: EQUAL
22623: AND
22624: IFFALSE 22822
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22626: LD_VAR 0 1
22630: PPUSH
22631: CALL_OW 266
22635: PUSH
22636: LD_INT 7
22638: EQUAL
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL_OW 266
22649: PUSH
22650: LD_INT 8
22652: EQUAL
22653: OR
22654: IFFALSE 22822
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22656: LD_INT 22
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 26
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 30
22681: PUSH
22682: LD_INT 27
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: LD_INT 30
22691: PUSH
22692: LD_INT 28
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PUSH
22705: EMPTY
22706: LIST
22707: LIST
22708: PPUSH
22709: CALL_OW 69
22713: PUSH
22714: LD_INT 0
22716: GREATER
22717: IFFALSE 22822
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22719: LD_ADDR_VAR 0 2
22723: PUSH
22724: LD_INT 22
22726: PUSH
22727: LD_INT 1
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: PUSH
22734: LD_INT 2
22736: PUSH
22737: LD_INT 30
22739: PUSH
22740: LD_INT 7
22742: PUSH
22743: EMPTY
22744: LIST
22745: LIST
22746: PUSH
22747: LD_INT 30
22749: PUSH
22750: LD_INT 8
22752: PUSH
22753: EMPTY
22754: LIST
22755: LIST
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PPUSH
22766: CALL_OW 69
22770: PUSH
22771: FOR_IN
22772: IFFALSE 22820
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22774: LD_VAR 0 2
22778: PPUSH
22779: LD_INT 1
22781: PPUSH
22782: CALL_OW 268
22786: PUSH
22787: LD_INT 11
22789: EQUAL
22790: PUSH
22791: LD_VAR 0 2
22795: PPUSH
22796: LD_INT 2
22798: PPUSH
22799: CALL_OW 268
22803: PUSH
22804: LD_INT 11
22806: EQUAL
22807: OR
22808: IFFALSE 22818
// eventVar1 = 1 ;
22810: LD_ADDR_EXP 61
22814: PUSH
22815: LD_INT 1
22817: ST_TO_ADDR
22818: GO 22771
22820: POP
22821: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL_OW 255
22831: PUSH
22832: LD_INT 2
22834: EQUAL
22835: IFFALSE 22940
// begin if GetBType ( building ) = b_barracks then
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 266
22846: PUSH
22847: LD_INT 5
22849: EQUAL
22850: IFFALSE 22940
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22852: LD_ADDR_VAR 0 2
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 25
22869: PUSH
22870: LD_INT 1
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: LD_INT 3
22879: PUSH
22880: LD_INT 54
22882: PUSH
22883: EMPTY
22884: LIST
22885: PUSH
22886: EMPTY
22887: LIST
22888: LIST
22889: PUSH
22890: EMPTY
22891: LIST
22892: LIST
22893: LIST
22894: PPUSH
22895: CALL_OW 69
22899: PUSH
22900: LD_EXP 26
22904: PUSH
22905: EMPTY
22906: LIST
22907: DIFF
22908: PUSH
22909: FOR_IN
22910: IFFALSE 22928
// ComEnterUnit ( i , building ) ;
22912: LD_VAR 0 2
22916: PPUSH
22917: LD_VAR 0 1
22921: PPUSH
22922: CALL_OW 120
22926: GO 22909
22928: POP
22929: POP
// arArm = building ;
22930: LD_ADDR_EXP 45
22934: PUSH
22935: LD_VAR 0 1
22939: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22940: LD_VAR 0 1
22944: PPUSH
22945: CALL_OW 255
22949: PUSH
22950: LD_INT 3
22952: EQUAL
22953: IFFALSE 23426
// begin if GetBType ( building ) = b_factory then
22955: LD_VAR 0 1
22959: PPUSH
22960: CALL_OW 266
22964: PUSH
22965: LD_INT 3
22967: EQUAL
22968: IFFALSE 23035
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22970: LD_ADDR_VAR 0 2
22974: PUSH
22975: LD_INT 22
22977: PUSH
22978: LD_INT 3
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: LD_INT 25
22987: PUSH
22988: LD_INT 3
22990: PUSH
22991: EMPTY
22992: LIST
22993: LIST
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PPUSH
22999: CALL_OW 69
23003: PUSH
23004: FOR_IN
23005: IFFALSE 23023
// ComEnterUnit ( i , building ) ;
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 120
23021: GO 23004
23023: POP
23024: POP
// ruFab = building ;
23025: LD_ADDR_EXP 35
23029: PUSH
23030: LD_VAR 0 1
23034: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
23035: LD_INT 22
23037: PUSH
23038: LD_INT 3
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: LD_INT 21
23047: PUSH
23048: LD_INT 3
23050: PUSH
23051: EMPTY
23052: LIST
23053: LIST
23054: PUSH
23055: LD_INT 30
23057: PUSH
23058: LD_INT 8
23060: PUSH
23061: EMPTY
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: LIST
23069: PPUSH
23070: CALL_OW 69
23074: PUSH
23075: LD_INT 2
23077: EQUAL
23078: IFFALSE 23286
// begin for i = 1 to 2 do
23080: LD_ADDR_VAR 0 2
23084: PUSH
23085: DOUBLE
23086: LD_INT 1
23088: DEC
23089: ST_TO_ADDR
23090: LD_INT 2
23092: PUSH
23093: FOR_TO
23094: IFFALSE 23181
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23096: LD_INT 22
23098: PUSH
23099: LD_INT 3
23101: PUSH
23102: EMPTY
23103: LIST
23104: LIST
23105: PUSH
23106: LD_INT 25
23108: PUSH
23109: LD_INT 4
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PPUSH
23120: CALL_OW 69
23124: PUSH
23125: LD_VAR 0 2
23129: ARRAY
23130: PPUSH
23131: LD_INT 22
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 21
23143: PUSH
23144: LD_INT 3
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 30
23153: PUSH
23154: LD_INT 8
23156: PUSH
23157: EMPTY
23158: LIST
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: LIST
23165: PPUSH
23166: CALL_OW 69
23170: PUSH
23171: LD_INT 1
23173: ARRAY
23174: PPUSH
23175: CALL_OW 120
23179: GO 23093
23181: POP
23182: POP
// for i = 3 to 4 do
23183: LD_ADDR_VAR 0 2
23187: PUSH
23188: DOUBLE
23189: LD_INT 3
23191: DEC
23192: ST_TO_ADDR
23193: LD_INT 4
23195: PUSH
23196: FOR_TO
23197: IFFALSE 23284
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23199: LD_INT 22
23201: PUSH
23202: LD_INT 3
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: LD_INT 25
23211: PUSH
23212: LD_INT 4
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: PUSH
23228: LD_VAR 0 2
23232: ARRAY
23233: PPUSH
23234: LD_INT 22
23236: PUSH
23237: LD_INT 3
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 21
23246: PUSH
23247: LD_INT 3
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: PUSH
23254: LD_INT 30
23256: PUSH
23257: LD_INT 8
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: EMPTY
23265: LIST
23266: LIST
23267: LIST
23268: PPUSH
23269: CALL_OW 69
23273: PUSH
23274: LD_INT 2
23276: ARRAY
23277: PPUSH
23278: CALL_OW 120
23282: GO 23196
23284: POP
23285: POP
// end ; if GetBType ( building ) = b_barracks then
23286: LD_VAR 0 1
23290: PPUSH
23291: CALL_OW 266
23295: PUSH
23296: LD_INT 5
23298: EQUAL
23299: IFFALSE 23426
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23301: LD_ADDR_VAR 0 2
23305: PUSH
23306: LD_INT 22
23308: PUSH
23309: LD_INT 3
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: PUSH
23316: LD_INT 25
23318: PUSH
23319: LD_INT 1
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 54
23331: PUSH
23332: EMPTY
23333: LIST
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: LIST
23343: PPUSH
23344: CALL_OW 69
23348: PUSH
23349: FOR_IN
23350: IFFALSE 23368
// ComEnterUnit ( i , building ) ;
23352: LD_VAR 0 2
23356: PPUSH
23357: LD_VAR 0 1
23361: PPUSH
23362: CALL_OW 120
23366: GO 23349
23368: POP
23369: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23370: LD_INT 22
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: EMPTY
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 30
23382: PUSH
23383: LD_INT 5
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PUSH
23390: EMPTY
23391: LIST
23392: LIST
23393: PPUSH
23394: CALL_OW 69
23398: PUSH
23399: LD_INT 0
23401: EQUAL
23402: IFFALSE 23416
// ruArm1 = building else
23404: LD_ADDR_EXP 33
23408: PUSH
23409: LD_VAR 0 1
23413: ST_TO_ADDR
23414: GO 23426
// ruArm2 = building ;
23416: LD_ADDR_EXP 34
23420: PUSH
23421: LD_VAR 0 1
23425: ST_TO_ADDR
// end ; end ; end ;
23426: PPOPN 2
23428: END
// on EnterBuilding ( building , human ) do var rnd ;
23429: LD_INT 0
23431: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23432: LD_VAR 0 2
23436: PPUSH
23437: CALL_OW 255
23441: PUSH
23442: LD_INT 2
23444: EQUAL
23445: PUSH
23446: LD_VAR 0 2
23450: PPUSH
23451: CALL_OW 257
23455: PUSH
23456: LD_INT 1
23458: EQUAL
23459: AND
23460: PUSH
23461: LD_VAR 0 1
23465: PUSH
23466: LD_EXP 45
23470: EQUAL
23471: AND
23472: IFFALSE 23519
// begin wait ( 0 0$1 ) ;
23474: LD_INT 35
23476: PPUSH
23477: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23481: LD_ADDR_VAR 0 3
23485: PUSH
23486: LD_INT 1
23488: PPUSH
23489: LD_INT 100
23491: PPUSH
23492: CALL_OW 12
23496: ST_TO_ADDR
// if rnd > 50 then
23497: LD_VAR 0 3
23501: PUSH
23502: LD_INT 50
23504: GREATER
23505: IFFALSE 23519
// SetClass ( human , class_mortar ) ;
23507: LD_VAR 0 2
23511: PPUSH
23512: LD_INT 8
23514: PPUSH
23515: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
23519: LD_VAR 0 2
23523: PUSH
23524: LD_INT 22
23526: PUSH
23527: LD_INT 2
23529: PUSH
23530: EMPTY
23531: LIST
23532: LIST
23533: PUSH
23534: LD_INT 25
23536: PUSH
23537: LD_INT 12
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PPUSH
23548: CALL_OW 69
23552: IN
23553: IFFALSE 23603
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
23555: LD_VAR 0 1
23559: PPUSH
23560: CALL_OW 266
23564: PUSH
23565: LD_INT 0
23567: PUSH
23568: LD_INT 1
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: IN
23575: IFFALSE 23591
// SetClass ( human , class_apeman_engineer ) else
23577: LD_VAR 0 2
23581: PPUSH
23582: LD_INT 16
23584: PPUSH
23585: CALL_OW 336
23589: GO 23603
// SetClass ( human , class_apeman_soldier ) ;
23591: LD_VAR 0 2
23595: PPUSH
23596: LD_INT 15
23598: PPUSH
23599: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23603: LD_VAR 0 2
23607: PPUSH
23608: CALL_OW 255
23612: PUSH
23613: LD_INT 3
23615: EQUAL
23616: PUSH
23617: LD_VAR 0 2
23621: PPUSH
23622: CALL_OW 257
23626: PUSH
23627: LD_INT 1
23629: EQUAL
23630: AND
23631: PUSH
23632: LD_VAR 0 1
23636: PUSH
23637: LD_EXP 33
23641: EQUAL
23642: PUSH
23643: LD_VAR 0 1
23647: PUSH
23648: LD_EXP 34
23652: EQUAL
23653: OR
23654: PUSH
23655: EMPTY
23656: LIST
23657: AND
23658: IFFALSE 23679
// begin wait ( 0 0$1 ) ;
23660: LD_INT 35
23662: PPUSH
23663: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23667: LD_VAR 0 2
23671: PPUSH
23672: LD_INT 9
23674: PPUSH
23675: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23679: LD_VAR 0 2
23683: PPUSH
23684: CALL_OW 255
23688: PUSH
23689: LD_INT 3
23691: EQUAL
23692: PUSH
23693: LD_VAR 0 2
23697: PPUSH
23698: CALL_OW 257
23702: PUSH
23703: LD_INT 9
23705: EQUAL
23706: AND
23707: PUSH
23708: LD_VAR 0 1
23712: PPUSH
23713: CALL_OW 266
23717: PUSH
23718: LD_INT 32
23720: EQUAL
23721: AND
23722: IFFALSE 23743
// begin wait ( 0 0$1 ) ;
23724: LD_INT 35
23726: PPUSH
23727: CALL_OW 67
// SetClass ( human , 1 ) ;
23731: LD_VAR 0 2
23735: PPUSH
23736: LD_INT 1
23738: PPUSH
23739: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23743: LD_VAR 0 2
23747: PPUSH
23748: CALL_OW 255
23752: PUSH
23753: LD_INT 3
23755: EQUAL
23756: PUSH
23757: LD_VAR 0 2
23761: PPUSH
23762: CALL_OW 257
23766: PUSH
23767: LD_INT 3
23769: EQUAL
23770: AND
23771: PUSH
23772: LD_VAR 0 1
23776: PUSH
23777: LD_EXP 35
23781: EQUAL
23782: AND
23783: IFFALSE 23797
// SetLives ( human , 1000 ) ;
23785: LD_VAR 0 2
23789: PPUSH
23790: LD_INT 1000
23792: PPUSH
23793: CALL_OW 234
// end ;
23797: PPOPN 3
23799: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23800: LD_VAR 0 1
23804: PUSH
23805: LD_INT 1
23807: EQUAL
23808: PUSH
23809: LD_VAR 0 2
23813: PUSH
23814: LD_INT 2
23816: EQUAL
23817: AND
23818: PUSH
23819: LD_INT 1
23821: PPUSH
23822: LD_INT 2
23824: PPUSH
23825: CALL_OW 81
23829: PUSH
23830: LD_INT 1
23832: EQUAL
23833: AND
23834: IFFALSE 23855
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23836: LD_EXP 24
23840: PPUSH
23841: LD_STRING D6b-Pow-1
23843: PPUSH
23844: CALL_OW 94
// YouLost ( Powell ) ;
23848: LD_STRING Powell
23850: PPUSH
23851: CALL_OW 104
// end ; end ;
23855: PPOPN 2
23857: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23858: LD_INT 23
23860: PPUSH
23861: LD_INT 22
23863: PUSH
23864: LD_INT 1
23866: PUSH
23867: EMPTY
23868: LIST
23869: LIST
23870: PUSH
23871: LD_INT 21
23873: PUSH
23874: LD_INT 3
23876: PUSH
23877: EMPTY
23878: LIST
23879: LIST
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PPUSH
23885: CALL_OW 70
23889: PUSH
23890: LD_INT 23
23892: PPUSH
23893: LD_INT 22
23895: PUSH
23896: LD_INT 1
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: PUSH
23903: LD_INT 21
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PPUSH
23917: CALL_OW 70
23921: OR
23922: PUSH
23923: LD_INT 1
23925: PPUSH
23926: LD_INT 2
23928: PPUSH
23929: CALL_OW 81
23933: PUSH
23934: LD_INT 1
23936: EQUAL
23937: AND
23938: IFFALSE 23962
23940: GO 23942
23942: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23943: LD_EXP 24
23947: PPUSH
23948: LD_STRING D6b-Pow-1
23950: PPUSH
23951: CALL_OW 94
// YouLost ( Powell ) ;
23955: LD_STRING Powell
23957: PPUSH
23958: CALL_OW 104
// end ;
23962: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23963: LD_VAR 0 1
23967: PUSH
23968: LD_EXP 1
23972: EQUAL
23973: IFFALSE 23982
// YouLost ( JMM ) ;
23975: LD_STRING JMM
23977: PPUSH
23978: CALL_OW 104
// if unit = Khatam then
23982: LD_VAR 0 1
23986: PUSH
23987: LD_EXP 14
23991: EQUAL
23992: IFFALSE 24002
// KhatamStatus = 0 ;
23994: LD_ADDR_EXP 52
23998: PUSH
23999: LD_INT 0
24001: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
24002: LD_VAR 0 1
24006: PPUSH
24007: CALL_OW 255
24011: PUSH
24012: LD_INT 3
24014: EQUAL
24015: PUSH
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 247
24025: PUSH
24026: LD_INT 3
24028: EQUAL
24029: AND
24030: IFFALSE 24722
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
24032: LD_VAR 0 1
24036: PPUSH
24037: CALL_OW 266
24041: PUSH
24042: LD_INT 31
24044: EQUAL
24045: PUSH
24046: LD_VAR 0 1
24050: PPUSH
24051: CALL_OW 266
24055: PUSH
24056: LD_INT 32
24058: EQUAL
24059: OR
24060: PUSH
24061: LD_VAR 0 1
24065: PPUSH
24066: CALL_OW 266
24070: PUSH
24071: LD_INT 36
24073: EQUAL
24074: OR
24075: PUSH
24076: LD_VAR 0 1
24080: PPUSH
24081: CALL_OW 266
24085: PUSH
24086: LD_INT 0
24088: EQUAL
24089: OR
24090: PUSH
24091: LD_VAR 0 1
24095: PPUSH
24096: CALL_OW 266
24100: PUSH
24101: LD_INT 24
24103: EQUAL
24104: OR
24105: PUSH
24106: LD_VAR 0 1
24110: PPUSH
24111: CALL_OW 266
24115: PUSH
24116: LD_INT 17
24118: EQUAL
24119: OR
24120: PUSH
24121: LD_VAR 0 1
24125: PPUSH
24126: CALL_OW 266
24130: PUSH
24131: LD_INT 25
24133: EQUAL
24134: OR
24135: PUSH
24136: LD_VAR 0 1
24140: PPUSH
24141: CALL_OW 266
24145: PUSH
24146: LD_INT 19
24148: EQUAL
24149: OR
24150: PUSH
24151: LD_VAR 0 1
24155: PPUSH
24156: CALL_OW 266
24160: PUSH
24161: LD_INT 20
24163: EQUAL
24164: OR
24165: PUSH
24166: LD_VAR 0 1
24170: PPUSH
24171: CALL_OW 266
24175: PUSH
24176: LD_INT 18
24178: EQUAL
24179: OR
24180: PUSH
24181: LD_VAR 0 1
24185: PPUSH
24186: CALL_OW 266
24190: PUSH
24191: LD_INT 21
24193: EQUAL
24194: OR
24195: PUSH
24196: LD_VAR 0 1
24200: PPUSH
24201: CALL_OW 266
24205: PUSH
24206: LD_INT 23
24208: EQUAL
24209: OR
24210: PUSH
24211: LD_VAR 0 1
24215: PPUSH
24216: CALL_OW 266
24220: PUSH
24221: LD_INT 16
24223: EQUAL
24224: OR
24225: PUSH
24226: LD_VAR 0 1
24230: PPUSH
24231: CALL_OW 266
24235: PUSH
24236: LD_INT 6
24238: EQUAL
24239: OR
24240: PUSH
24241: LD_VAR 0 1
24245: PPUSH
24246: CALL_OW 266
24250: PUSH
24251: LD_INT 29
24253: EQUAL
24254: OR
24255: PUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL_OW 266
24265: PUSH
24266: LD_INT 26
24268: EQUAL
24269: OR
24270: PUSH
24271: LD_VAR 0 1
24275: PPUSH
24276: CALL_OW 266
24280: PUSH
24281: LD_INT 30
24283: EQUAL
24284: OR
24285: PUSH
24286: LD_VAR 0 1
24290: PPUSH
24291: CALL_OW 266
24295: PUSH
24296: LD_INT 28
24298: EQUAL
24299: OR
24300: PUSH
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 266
24310: PUSH
24311: LD_INT 27
24313: EQUAL
24314: OR
24315: PUSH
24316: LD_VAR 0 1
24320: PPUSH
24321: CALL_OW 266
24325: PUSH
24326: LD_INT 33
24328: EQUAL
24329: OR
24330: PUSH
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 266
24340: PUSH
24341: LD_INT 2
24343: EQUAL
24344: OR
24345: PUSH
24346: LD_VAR 0 1
24350: PPUSH
24351: CALL_OW 266
24355: PUSH
24356: LD_INT 4
24358: EQUAL
24359: OR
24360: IFFALSE 24446
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24362: LD_ADDR_EXP 42
24366: PUSH
24367: LD_EXP 42
24371: PUSH
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 266
24381: ADD
24382: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24383: LD_ADDR_EXP 42
24387: PUSH
24388: LD_EXP 42
24392: PUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 250
24402: ADD
24403: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24404: LD_ADDR_EXP 42
24408: PUSH
24409: LD_EXP 42
24413: PUSH
24414: LD_VAR 0 1
24418: PPUSH
24419: CALL_OW 251
24423: ADD
24424: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24425: LD_ADDR_EXP 42
24429: PUSH
24430: LD_EXP 42
24434: PUSH
24435: LD_VAR 0 1
24439: PPUSH
24440: CALL_OW 254
24444: ADD
24445: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24446: LD_VAR 0 1
24450: PPUSH
24451: CALL_OW 266
24455: PUSH
24456: LD_INT 1
24458: EQUAL
24459: IFFALSE 24538
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24461: LD_ADDR_EXP 42
24465: PUSH
24466: LD_EXP 42
24470: PUSH
24471: LD_INT 0
24473: ADD
24474: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24475: LD_ADDR_EXP 42
24479: PUSH
24480: LD_EXP 42
24484: PUSH
24485: LD_VAR 0 1
24489: PPUSH
24490: CALL_OW 250
24494: ADD
24495: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24496: LD_ADDR_EXP 42
24500: PUSH
24501: LD_EXP 42
24505: PUSH
24506: LD_VAR 0 1
24510: PPUSH
24511: CALL_OW 251
24515: ADD
24516: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24517: LD_ADDR_EXP 42
24521: PUSH
24522: LD_EXP 42
24526: PUSH
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 254
24536: ADD
24537: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24538: LD_VAR 0 1
24542: PPUSH
24543: CALL_OW 266
24547: PUSH
24548: LD_INT 3
24550: EQUAL
24551: IFFALSE 24630
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24553: LD_ADDR_EXP 42
24557: PUSH
24558: LD_EXP 42
24562: PUSH
24563: LD_INT 2
24565: ADD
24566: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24567: LD_ADDR_EXP 42
24571: PUSH
24572: LD_EXP 42
24576: PUSH
24577: LD_VAR 0 1
24581: PPUSH
24582: CALL_OW 250
24586: ADD
24587: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24588: LD_ADDR_EXP 42
24592: PUSH
24593: LD_EXP 42
24597: PUSH
24598: LD_VAR 0 1
24602: PPUSH
24603: CALL_OW 251
24607: ADD
24608: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24609: LD_ADDR_EXP 42
24613: PUSH
24614: LD_EXP 42
24618: PUSH
24619: LD_VAR 0 1
24623: PPUSH
24624: CALL_OW 254
24628: ADD
24629: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24630: LD_VAR 0 1
24634: PPUSH
24635: CALL_OW 266
24639: PUSH
24640: LD_INT 5
24642: EQUAL
24643: IFFALSE 24722
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24645: LD_ADDR_EXP 42
24649: PUSH
24650: LD_EXP 42
24654: PUSH
24655: LD_INT 4
24657: ADD
24658: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24659: LD_ADDR_EXP 42
24663: PUSH
24664: LD_EXP 42
24668: PUSH
24669: LD_VAR 0 1
24673: PPUSH
24674: CALL_OW 250
24678: ADD
24679: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24680: LD_ADDR_EXP 42
24684: PUSH
24685: LD_EXP 42
24689: PUSH
24690: LD_VAR 0 1
24694: PPUSH
24695: CALL_OW 251
24699: ADD
24700: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24701: LD_ADDR_EXP 42
24705: PUSH
24706: LD_EXP 42
24710: PUSH
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL_OW 254
24720: ADD
24721: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24722: LD_VAR 0 1
24726: PPUSH
24727: CALL_OW 257
24731: PUSH
24732: LD_INT 3
24734: EQUAL
24735: PUSH
24736: LD_VAR 0 1
24740: PPUSH
24741: CALL_OW 255
24745: PUSH
24746: LD_INT 3
24748: EQUAL
24749: AND
24750: PUSH
24751: LD_EXP 35
24755: PPUSH
24756: CALL_OW 302
24760: AND
24761: PUSH
24762: LD_EXP 35
24766: PPUSH
24767: CALL_OW 255
24771: PUSH
24772: LD_INT 3
24774: EQUAL
24775: AND
24776: IFFALSE 24846
// begin uc_side = 3 ;
24778: LD_ADDR_OWVAR 20
24782: PUSH
24783: LD_INT 3
24785: ST_TO_ADDR
// uc_nation = 3 ;
24786: LD_ADDR_OWVAR 21
24790: PUSH
24791: LD_INT 3
24793: ST_TO_ADDR
// hc_gallery :=  ;
24794: LD_ADDR_OWVAR 33
24798: PUSH
24799: LD_STRING 
24801: ST_TO_ADDR
// hc_name :=  ;
24802: LD_ADDR_OWVAR 26
24806: PUSH
24807: LD_STRING 
24809: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24810: LD_INT 0
24812: PPUSH
24813: LD_EXP 36
24817: PPUSH
24818: LD_EXP 37
24822: PPUSH
24823: CALL_OW 12
24827: PPUSH
24828: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24832: CALL_OW 44
24836: PPUSH
24837: LD_EXP 35
24841: PPUSH
24842: CALL_OW 52
// end ; end ;
24846: PPOPN 1
24848: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24849: LD_ADDR_OWVAR 57
24853: PUSH
24854: LD_INT 0
24856: ST_TO_ADDR
// fastEnd = 1 ;
24857: LD_ADDR_EXP 59
24861: PUSH
24862: LD_INT 1
24864: ST_TO_ADDR
// FinishMission ;
24865: CALL 25969 0 0
// end ; end_of_file
24869: PPOPN 1
24871: END
// export function PrepareNature ; var i , un ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24877: LD_ADDR_VAR 0 2
24881: PUSH
24882: DOUBLE
24883: LD_INT 1
24885: DEC
24886: ST_TO_ADDR
24887: LD_OWVAR 67
24891: PUSH
24892: LD_INT 1
24894: PPUSH
24895: LD_INT 5
24897: PPUSH
24898: CALL_OW 12
24902: PLUS
24903: PUSH
24904: FOR_TO
24905: IFFALSE 25050
// begin hc_sex = sex_male ;
24907: LD_ADDR_OWVAR 27
24911: PUSH
24912: LD_INT 1
24914: ST_TO_ADDR
// uc_side = 0 ;
24915: LD_ADDR_OWVAR 20
24919: PUSH
24920: LD_INT 0
24922: ST_TO_ADDR
// uc_nation = nation_nature ;
24923: LD_ADDR_OWVAR 21
24927: PUSH
24928: LD_INT 0
24930: ST_TO_ADDR
// hc_class = class_apeman ;
24931: LD_ADDR_OWVAR 28
24935: PUSH
24936: LD_INT 12
24938: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24939: LD_ADDR_OWVAR 31
24943: PUSH
24944: LD_INT 2
24946: PPUSH
24947: LD_INT 7
24949: PPUSH
24950: CALL_OW 12
24954: PUSH
24955: LD_OWVAR 67
24959: PLUS
24960: PUSH
24961: LD_INT 2
24963: PPUSH
24964: LD_INT 10
24966: PPUSH
24967: CALL_OW 12
24971: PUSH
24972: LD_INT 2
24974: PPUSH
24975: LD_INT 10
24977: PPUSH
24978: CALL_OW 12
24982: PUSH
24983: LD_INT 2
24985: PPUSH
24986: LD_INT 10
24988: PPUSH
24989: CALL_OW 12
24993: PUSH
24994: EMPTY
24995: LIST
24996: LIST
24997: LIST
24998: LIST
24999: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25000: LD_ADDR_OWVAR 35
25004: PUSH
25005: LD_INT 5
25007: NEG
25008: PPUSH
25009: LD_INT 5
25011: PPUSH
25012: CALL_OW 12
25016: PUSH
25017: LD_OWVAR 67
25021: MUL
25022: ST_TO_ADDR
// un = CreateHuman ;
25023: LD_ADDR_VAR 0 3
25027: PUSH
25028: CALL_OW 44
25032: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
25033: LD_VAR 0 3
25037: PPUSH
25038: LD_INT 5
25040: PPUSH
25041: LD_INT 0
25043: PPUSH
25044: CALL_OW 49
// end ;
25048: GO 24904
25050: POP
25051: POP
// for i = 1 to Difficulty + 2 do
25052: LD_ADDR_VAR 0 2
25056: PUSH
25057: DOUBLE
25058: LD_INT 1
25060: DEC
25061: ST_TO_ADDR
25062: LD_OWVAR 67
25066: PUSH
25067: LD_INT 2
25069: PLUS
25070: PUSH
25071: FOR_TO
25072: IFFALSE 25181
// begin hc_sex = sex_male ;
25074: LD_ADDR_OWVAR 27
25078: PUSH
25079: LD_INT 1
25081: ST_TO_ADDR
// uc_side = 0 ;
25082: LD_ADDR_OWVAR 20
25086: PUSH
25087: LD_INT 0
25089: ST_TO_ADDR
// uc_nation = nation_nature ;
25090: LD_ADDR_OWVAR 21
25094: PUSH
25095: LD_INT 0
25097: ST_TO_ADDR
// hc_class = class_tiger ;
25098: LD_ADDR_OWVAR 28
25102: PUSH
25103: LD_INT 14
25105: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25106: LD_ADDR_OWVAR 31
25110: PUSH
25111: LD_EXP 37
25115: PUSH
25116: LD_INT 0
25118: PUSH
25119: LD_INT 0
25121: PUSH
25122: LD_INT 0
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25131: LD_ADDR_OWVAR 35
25135: PUSH
25136: LD_INT 5
25138: NEG
25139: PPUSH
25140: LD_INT 5
25142: PPUSH
25143: CALL_OW 12
25147: PUSH
25148: LD_OWVAR 67
25152: MUL
25153: ST_TO_ADDR
// un = CreateHuman ;
25154: LD_ADDR_VAR 0 3
25158: PUSH
25159: CALL_OW 44
25163: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25164: LD_VAR 0 3
25168: PPUSH
25169: LD_INT 6
25171: PPUSH
25172: LD_INT 0
25174: PPUSH
25175: CALL_OW 49
// end ;
25179: GO 25071
25181: POP
25182: POP
// for i = 1 to rand ( 3 , 4 ) do
25183: LD_ADDR_VAR 0 2
25187: PUSH
25188: DOUBLE
25189: LD_INT 1
25191: DEC
25192: ST_TO_ADDR
25193: LD_INT 3
25195: PPUSH
25196: LD_INT 4
25198: PPUSH
25199: CALL_OW 12
25203: PUSH
25204: FOR_TO
25205: IFFALSE 25299
// begin hc_sex = sex_male ;
25207: LD_ADDR_OWVAR 27
25211: PUSH
25212: LD_INT 1
25214: ST_TO_ADDR
// uc_side = 0 ;
25215: LD_ADDR_OWVAR 20
25219: PUSH
25220: LD_INT 0
25222: ST_TO_ADDR
// uc_nation = nation_nature ;
25223: LD_ADDR_OWVAR 21
25227: PUSH
25228: LD_INT 0
25230: ST_TO_ADDR
// hc_class = 18 ;
25231: LD_ADDR_OWVAR 28
25235: PUSH
25236: LD_INT 18
25238: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25239: LD_ADDR_OWVAR 31
25243: PUSH
25244: LD_EXP 37
25248: PUSH
25249: LD_INT 0
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 0
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: ST_TO_ADDR
// hc_agressivity = 0 ;
25264: LD_ADDR_OWVAR 35
25268: PUSH
25269: LD_INT 0
25271: ST_TO_ADDR
// un = CreateHuman ;
25272: LD_ADDR_VAR 0 3
25276: PUSH
25277: CALL_OW 44
25281: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25282: LD_VAR 0 3
25286: PPUSH
25287: LD_INT 6
25289: PPUSH
25290: LD_INT 0
25292: PPUSH
25293: CALL_OW 49
// end ;
25297: GO 25204
25299: POP
25300: POP
// end ; end_of_file
25301: LD_VAR 0 1
25305: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25306: LD_EXP 46
25310: PUSH
25311: LD_INT 1
25313: EQUAL
25314: IFFALSE 25398
25316: GO 25318
25318: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25319: LD_INT 7
25321: PPUSH
25322: LD_INT 5
25324: PPUSH
25325: LD_INT 4
25327: PUSH
25328: LD_INT 5
25330: PUSH
25331: LD_INT 6
25333: PUSH
25334: EMPTY
25335: LIST
25336: LIST
25337: LIST
25338: PUSH
25339: LD_OWVAR 67
25343: ARRAY
25344: PPUSH
25345: LD_EXP 36
25349: PPUSH
25350: LD_EXP 37
25354: PPUSH
25355: CALL_OW 12
25359: PPUSH
25360: LD_INT 2
25362: PPUSH
25363: LD_INT 1
25365: PPUSH
25366: LD_INT 1
25368: PPUSH
25369: EMPTY
25370: PPUSH
25371: LD_INT 25
25373: PUSH
25374: LD_INT 26
25376: PUSH
25377: LD_INT 27
25379: PUSH
25380: LD_INT 28
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: PPUSH
25389: EMPTY
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: CALL 15786 0 11
25398: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25399: LD_EXP 46
25403: PUSH
25404: LD_INT 1
25406: EQUAL
25407: IFFALSE 25495
25409: GO 25411
25411: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25412: LD_INT 5
25414: PPUSH
25415: LD_INT 2
25417: PPUSH
25418: LD_INT 6
25420: PUSH
25421: LD_INT 7
25423: PUSH
25424: LD_INT 8
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: PUSH
25432: LD_OWVAR 67
25436: ARRAY
25437: PPUSH
25438: LD_INT 0
25440: PPUSH
25441: LD_INT 0
25443: PPUSH
25444: LD_INT 2
25446: PUSH
25447: LD_INT 4
25449: PUSH
25450: LD_INT 5
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: PUSH
25458: LD_OWVAR 67
25462: ARRAY
25463: PPUSH
25464: LD_INT 0
25466: PPUSH
25467: LD_EXP 36
25471: PPUSH
25472: LD_EXP 37
25476: PPUSH
25477: CALL_OW 12
25481: PPUSH
25482: LD_INT 7
25484: PPUSH
25485: LD_INT 9
25487: PPUSH
25488: LD_INT 1
25490: PPUSH
25491: CALL 17490 0 11
25495: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25496: LD_EXP 46
25500: PUSH
25501: LD_INT 1
25503: EQUAL
25504: IFFALSE 25513
25506: GO 25508
25508: DISABLE
// PrepareArabianSheik ;
25509: CALL 3805 0 0
25513: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25514: LD_EXP 29
25518: PUSH
25519: LD_EXP 60
25523: PUSH
25524: LD_INT 1
25526: EQUAL
25527: AND
25528: IFFALSE 25597
25530: GO 25532
25532: DISABLE
// begin enable ;
25533: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25534: LD_INT 6
25536: PPUSH
25537: LD_INT 3
25539: PPUSH
25540: LD_EXP 57
25544: PPUSH
25545: LD_INT 0
25547: PPUSH
25548: LD_OWVAR 67
25552: PPUSH
25553: LD_INT 0
25555: PPUSH
25556: LD_EXP 57
25560: PUSH
25561: LD_INT 3
25563: DIV
25564: PUSH
25565: LD_INT 1
25567: PLUS
25568: PPUSH
25569: LD_EXP 36
25573: PPUSH
25574: LD_EXP 37
25578: PPUSH
25579: CALL_OW 12
25583: PPUSH
25584: LD_INT 17
25586: PPUSH
25587: LD_INT 18
25589: PPUSH
25590: LD_INT 1
25592: PPUSH
25593: CALL 17490 0 11
// end ;
25597: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25598: LD_EXP 29
25602: PUSH
25603: LD_EXP 60
25607: PUSH
25608: LD_INT 1
25610: EQUAL
25611: AND
25612: IFFALSE 25689
25614: GO 25616
25616: DISABLE
// begin enable ;
25617: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25618: LD_INT 17
25620: PPUSH
25621: LD_INT 6
25623: PPUSH
25624: LD_EXP 56
25628: PPUSH
25629: LD_EXP 36
25633: PPUSH
25634: LD_EXP 37
25638: PPUSH
25639: CALL_OW 12
25643: PPUSH
25644: LD_INT 3
25646: PPUSH
25647: LD_INT 1
25649: PPUSH
25650: LD_INT 3
25652: PUSH
25653: LD_INT 3
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PPUSH
25660: LD_INT 43
25662: PUSH
25663: LD_INT 44
25665: PUSH
25666: LD_INT 45
25668: PUSH
25669: LD_INT 46
25671: PUSH
25672: EMPTY
25673: LIST
25674: LIST
25675: LIST
25676: LIST
25677: PPUSH
25678: EMPTY
25679: PPUSH
25680: EMPTY
25681: PPUSH
25682: LD_INT 1
25684: PPUSH
25685: CALL 15786 0 11
// end ;
25689: END
// every 10 10$00 trigger joinEpsilon do
25690: LD_EXP 29
25694: IFFALSE 25748
25696: GO 25698
25698: DISABLE
// begin enable ;
25699: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25700: LD_ADDR_EXP 56
25704: PUSH
25705: LD_EXP 56
25709: PUSH
25710: LD_INT 1
25712: PPUSH
25713: LD_OWVAR 67
25717: PPUSH
25718: CALL_OW 12
25722: PLUS
25723: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25724: LD_ADDR_EXP 57
25728: PUSH
25729: LD_EXP 57
25733: PUSH
25734: LD_INT 1
25736: PPUSH
25737: LD_OWVAR 67
25741: PPUSH
25742: CALL_OW 12
25746: PLUS
25747: ST_TO_ADDR
// end ;
25748: END
// every 21 21$0 trigger attackAvalaible = 1 do
25749: LD_EXP 60
25753: PUSH
25754: LD_INT 1
25756: EQUAL
25757: IFFALSE 25770
25759: GO 25761
25761: DISABLE
// attackAvalaible = 0 ; end_of_file
25762: LD_ADDR_EXP 60
25766: PUSH
25767: LD_INT 0
25769: ST_TO_ADDR
25770: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25771: LD_INT 54
25773: PPUSH
25774: LD_INT 1
25776: PPUSH
25777: CALL_OW 321
25781: PUSH
25782: LD_INT 2
25784: EQUAL
25785: PUSH
25786: LD_INT 55
25788: PPUSH
25789: LD_INT 1
25791: PPUSH
25792: CALL_OW 321
25796: PUSH
25797: LD_INT 2
25799: EQUAL
25800: AND
25801: PUSH
25802: LD_INT 21
25804: PPUSH
25805: LD_INT 1
25807: PPUSH
25808: CALL_OW 321
25812: PUSH
25813: LD_INT 2
25815: EQUAL
25816: AND
25817: PUSH
25818: LD_INT 22
25820: PPUSH
25821: LD_INT 1
25823: PPUSH
25824: CALL_OW 321
25828: PUSH
25829: LD_INT 2
25831: EQUAL
25832: AND
25833: PUSH
25834: LD_INT 12
25836: PPUSH
25837: LD_INT 1
25839: PPUSH
25840: CALL_OW 321
25844: PUSH
25845: LD_INT 1
25847: EQUAL
25848: PUSH
25849: LD_INT 32
25851: PPUSH
25852: LD_INT 1
25854: PPUSH
25855: CALL_OW 321
25859: PUSH
25860: LD_INT 1
25862: EQUAL
25863: OR
25864: PUSH
25865: EMPTY
25866: LIST
25867: AND
25868: PUSH
25869: LD_EXP 48
25873: PUSH
25874: LD_INT 1
25876: EQUAL
25877: AND
25878: PUSH
25879: LD_INT 22
25881: PUSH
25882: LD_INT 3
25884: PUSH
25885: EMPTY
25886: LIST
25887: LIST
25888: PUSH
25889: LD_INT 21
25891: PUSH
25892: LD_INT 1
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PPUSH
25903: CALL_OW 69
25907: PUSH
25908: LD_INT 0
25910: EQUAL
25911: AND
25912: IFFALSE 25968
25914: GO 25916
25916: DISABLE
// begin case query ( QEndMission ) of 1 :
25917: LD_STRING QEndMission
25919: PPUSH
25920: CALL_OW 97
25924: PUSH
25925: LD_INT 1
25927: DOUBLE
25928: EQUAL
25929: IFTRUE 25933
25931: GO 25944
25933: POP
// begin end_the_mission_allowed = true ;
25934: LD_ADDR_OWVAR 57
25938: PUSH
25939: LD_INT 1
25941: ST_TO_ADDR
// end ; 2 :
25942: GO 25968
25944: LD_INT 2
25946: DOUBLE
25947: EQUAL
25948: IFTRUE 25952
25950: GO 25967
25952: POP
// begin fastEnd = 1 ;
25953: LD_ADDR_EXP 59
25957: PUSH
25958: LD_INT 1
25960: ST_TO_ADDR
// FinishMission ;
25961: CALL 25969 0 0
// end ; end ;
25965: GO 25968
25967: POP
// end ;
25968: END
// export function FinishMission ; begin
25969: LD_INT 0
25971: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25972: LD_EXP 52
25976: PPUSH
25977: LD_STRING 10_KhatamStatus_1
25979: PPUSH
25980: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25984: LD_EXP 51
25988: PPUSH
25989: LD_STRING 10_GensherEscape_1
25991: PPUSH
25992: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25996: LD_INT 12
25998: PPUSH
25999: LD_INT 1
26001: PPUSH
26002: CALL_OW 321
26006: PUSH
26007: LD_INT 2
26009: EQUAL
26010: IFFALSE 26024
// begin AddMedal ( sights , 1 ) ;
26012: LD_STRING sights
26014: PPUSH
26015: LD_INT 1
26017: PPUSH
26018: CALL_OW 101
// end else
26022: GO 26035
// begin AddMedal ( sights , - 1 ) ;
26024: LD_STRING sights
26026: PPUSH
26027: LD_INT 1
26029: NEG
26030: PPUSH
26031: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26035: LD_INT 32
26037: PPUSH
26038: LD_INT 1
26040: PPUSH
26041: CALL_OW 321
26045: PUSH
26046: LD_INT 2
26048: EQUAL
26049: IFFALSE 26063
// begin AddMedal ( computers , 1 ) ;
26051: LD_STRING computers
26053: PPUSH
26054: LD_INT 1
26056: PPUSH
26057: CALL_OW 101
// end else
26061: GO 26074
// begin AddMedal ( computers , - 1 ) ;
26063: LD_STRING computers
26065: PPUSH
26066: LD_INT 1
26068: NEG
26069: PPUSH
26070: CALL_OW 101
// end ; if arabianEscape = 0 then
26074: LD_EXP 47
26078: PUSH
26079: LD_INT 0
26081: EQUAL
26082: IFFALSE 26106
// begin AddMedal ( renegades , 2 ) ;
26084: LD_STRING renegades
26086: PPUSH
26087: LD_INT 2
26089: PPUSH
26090: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26094: LD_INT 0
26096: PPUSH
26097: LD_STRING 10_ScientistsEscape_1
26099: PPUSH
26100: CALL_OW 39
// end else
26104: GO 26117
// begin AddMedal ( renegades , - 1 ) ;
26106: LD_STRING renegades
26108: PPUSH
26109: LD_INT 1
26111: NEG
26112: PPUSH
26113: CALL_OW 101
// end ; SaveEpsilonBase ;
26117: CALL 26841 0 0
// GiveMedals ( Main ) ;
26121: LD_STRING Main
26123: PPUSH
26124: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26128: LD_INT 22
26130: PUSH
26131: LD_INT 1
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 23
26140: PUSH
26141: LD_INT 1
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: LD_INT 21
26150: PUSH
26151: LD_INT 1
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 2
26160: PUSH
26161: LD_INT 25
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: PUSH
26171: LD_INT 25
26173: PUSH
26174: LD_INT 2
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 25
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 25
26193: PUSH
26194: LD_INT 4
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 25
26203: PUSH
26204: LD_INT 5
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: LD_INT 25
26213: PUSH
26214: LD_INT 8
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: LIST
26229: PUSH
26230: EMPTY
26231: LIST
26232: LIST
26233: LIST
26234: LIST
26235: PPUSH
26236: CALL_OW 69
26240: PPUSH
26241: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26245: LD_EXP 1
26249: PPUSH
26250: LD_EXP 53
26254: PUSH
26255: LD_STRING JMM
26257: STR
26258: PPUSH
26259: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26263: LD_EXP 2
26267: PPUSH
26268: LD_EXP 53
26272: PUSH
26273: LD_STRING Brown
26275: STR
26276: PPUSH
26277: CALL 9956 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26281: LD_EXP 3
26285: PPUSH
26286: LD_EXP 53
26290: PUSH
26291: LD_STRING Donaldson
26293: STR
26294: PPUSH
26295: CALL 9956 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26299: LD_EXP 4
26303: PPUSH
26304: LD_EXP 53
26308: PUSH
26309: LD_STRING Bobby
26311: STR
26312: PPUSH
26313: CALL 9956 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26317: LD_EXP 5
26321: PPUSH
26322: LD_EXP 53
26326: PUSH
26327: LD_STRING Cyrus
26329: STR
26330: PPUSH
26331: CALL 9956 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26335: LD_EXP 6
26339: PPUSH
26340: LD_EXP 53
26344: PUSH
26345: LD_STRING Lisa
26347: STR
26348: PPUSH
26349: CALL 9956 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26353: LD_EXP 7
26357: PPUSH
26358: LD_EXP 53
26362: PUSH
26363: LD_STRING Frank
26365: STR
26366: PPUSH
26367: CALL 9956 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26371: LD_EXP 8
26375: PPUSH
26376: LD_EXP 53
26380: PUSH
26381: LD_STRING Kikuchi
26383: STR
26384: PPUSH
26385: CALL 9956 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26389: LD_EXP 9
26393: PPUSH
26394: LD_EXP 53
26398: PUSH
26399: LD_STRING Houten
26401: STR
26402: PPUSH
26403: CALL 9956 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26407: LD_EXP 10
26411: PPUSH
26412: LD_EXP 53
26416: PUSH
26417: LD_STRING Gary
26419: STR
26420: PPUSH
26421: CALL 9956 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26425: LD_EXP 19
26429: PPUSH
26430: LD_EXP 53
26434: PUSH
26435: LD_STRING Cornell
26437: STR
26438: PPUSH
26439: CALL 9956 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26443: LD_EXP 11
26447: PPUSH
26448: LD_EXP 53
26452: PUSH
26453: LD_STRING Simms
26455: STR
26456: PPUSH
26457: CALL 9956 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26461: LD_EXP 12
26465: PPUSH
26466: LD_EXP 53
26470: PUSH
26471: LD_STRING Denis
26473: STR
26474: PPUSH
26475: CALL 9956 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26479: LD_EXP 13
26483: PPUSH
26484: LD_EXP 53
26488: PUSH
26489: LD_STRING Joan
26491: STR
26492: PPUSH
26493: CALL 9956 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26497: LD_EXP 15
26501: PPUSH
26502: LD_EXP 53
26506: PUSH
26507: LD_STRING Gladstone
26509: STR
26510: PPUSH
26511: CALL 9956 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26515: LD_EXP 17
26519: PPUSH
26520: LD_EXP 53
26524: PUSH
26525: LD_STRING DeltaDoctor
26527: STR
26528: PPUSH
26529: CALL 9956 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26533: LD_EXP 22
26537: PPUSH
26538: LD_STRING 10c_lock
26540: PPUSH
26541: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26545: LD_INT 50
26547: PUSH
26548: EMPTY
26549: LIST
26550: PUSH
26551: LD_INT 22
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 21
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 2
26573: PUSH
26574: LD_INT 25
26576: PUSH
26577: LD_INT 1
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: PUSH
26584: LD_INT 25
26586: PUSH
26587: LD_INT 2
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 25
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: PUSH
26604: LD_INT 25
26606: PUSH
26607: LD_INT 4
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PUSH
26614: LD_INT 25
26616: PUSH
26617: LD_INT 5
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: PUSH
26624: LD_INT 25
26626: PUSH
26627: LD_INT 8
26629: PUSH
26630: EMPTY
26631: LIST
26632: LIST
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: PPUSH
26649: CALL_OW 69
26653: PUSH
26654: LD_EXP 1
26658: PUSH
26659: LD_EXP 2
26663: PUSH
26664: LD_EXP 3
26668: PUSH
26669: LD_EXP 4
26673: PUSH
26674: LD_EXP 5
26678: PUSH
26679: LD_EXP 6
26683: PUSH
26684: LD_EXP 7
26688: PUSH
26689: LD_EXP 15
26693: PUSH
26694: LD_EXP 8
26698: PUSH
26699: LD_EXP 12
26703: PUSH
26704: LD_EXP 13
26708: PUSH
26709: LD_EXP 9
26713: PUSH
26714: LD_EXP 11
26718: PUSH
26719: LD_EXP 10
26723: PUSH
26724: LD_EXP 17
26728: PUSH
26729: LD_EXP 19
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: DIFF
26752: PPUSH
26753: LD_STRING 10_other_survivors
26755: PPUSH
26756: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26760: LD_INT 50
26762: PUSH
26763: EMPTY
26764: LIST
26765: PUSH
26766: LD_INT 22
26768: PUSH
26769: LD_INT 1
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 21
26778: PUSH
26779: LD_INT 1
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 25
26791: PUSH
26792: LD_INT 16
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PUSH
26799: LD_INT 25
26801: PUSH
26802: LD_INT 12
26804: PUSH
26805: EMPTY
26806: LIST
26807: LIST
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: LIST
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: PPUSH
26820: CALL_OW 69
26824: PPUSH
26825: LD_STRING 10_ape
26827: PPUSH
26828: CALL_OW 38
// YouWin ;
26832: CALL_OW 103
// end ;
26836: LD_VAR 0 1
26840: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26841: LD_INT 0
26843: PPUSH
26844: PPUSH
26845: PPUSH
26846: PPUSH
// epsilonBase = [ ] ;
26847: LD_ADDR_VAR 0 2
26851: PUSH
26852: EMPTY
26853: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26854: LD_ADDR_VAR 0 3
26858: PUSH
26859: LD_INT 22
26861: PUSH
26862: LD_INT 1
26864: PUSH
26865: EMPTY
26866: LIST
26867: LIST
26868: PUSH
26869: LD_INT 23
26871: PUSH
26872: LD_INT 1
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 21
26881: PUSH
26882: LD_INT 3
26884: PUSH
26885: EMPTY
26886: LIST
26887: LIST
26888: PUSH
26889: LD_INT 50
26891: PUSH
26892: EMPTY
26893: LIST
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: PPUSH
26901: CALL_OW 69
26905: ST_TO_ADDR
// for i in buildings do
26906: LD_ADDR_VAR 0 4
26910: PUSH
26911: LD_VAR 0 3
26915: PUSH
26916: FOR_IN
26917: IFFALSE 27369
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26919: LD_VAR 0 4
26923: PPUSH
26924: CALL_OW 266
26928: PUSH
26929: LD_INT 6
26931: PUSH
26932: LD_INT 7
26934: PUSH
26935: LD_INT 8
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: LIST
26942: IN
26943: IFFALSE 27057
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26945: LD_ADDR_VAR 0 2
26949: PUSH
26950: LD_VAR 0 2
26954: PUSH
26955: LD_VAR 0 4
26959: PPUSH
26960: CALL_OW 266
26964: PUSH
26965: LD_VAR 0 4
26969: PPUSH
26970: CALL_OW 250
26974: PUSH
26975: LD_VAR 0 4
26979: PPUSH
26980: CALL_OW 251
26984: PUSH
26985: LD_VAR 0 4
26989: PPUSH
26990: CALL_OW 254
26994: PUSH
26995: LD_VAR 0 4
26999: PPUSH
27000: CALL_OW 267
27004: PUSH
27005: LD_VAR 0 4
27009: PPUSH
27010: CALL_OW 248
27014: PUSH
27015: LD_VAR 0 4
27019: PPUSH
27020: LD_INT 1
27022: PPUSH
27023: CALL_OW 268
27027: PUSH
27028: LD_VAR 0 4
27032: PPUSH
27033: LD_INT 2
27035: PPUSH
27036: CALL_OW 268
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: PUSH
27051: EMPTY
27052: LIST
27053: ADD
27054: ST_TO_ADDR
27055: GO 27367
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
27057: LD_VAR 0 4
27061: PPUSH
27062: CALL_OW 266
27066: PUSH
27067: LD_INT 32
27069: EQUAL
27070: PUSH
27071: LD_VAR 0 4
27075: PPUSH
27076: CALL_OW 266
27080: PUSH
27081: LD_INT 33
27083: EQUAL
27084: OR
27085: IFFALSE 27182
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27087: LD_ADDR_VAR 0 2
27091: PUSH
27092: LD_VAR 0 2
27096: PUSH
27097: LD_VAR 0 4
27101: PPUSH
27102: CALL_OW 266
27106: PUSH
27107: LD_VAR 0 4
27111: PPUSH
27112: CALL_OW 250
27116: PUSH
27117: LD_VAR 0 4
27121: PPUSH
27122: CALL_OW 251
27126: PUSH
27127: LD_VAR 0 4
27131: PPUSH
27132: CALL_OW 254
27136: PUSH
27137: LD_VAR 0 4
27141: PPUSH
27142: CALL_OW 267
27146: PUSH
27147: LD_VAR 0 4
27151: PPUSH
27152: CALL_OW 248
27156: PUSH
27157: LD_VAR 0 4
27161: PPUSH
27162: CALL_OW 269
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: PUSH
27176: EMPTY
27177: LIST
27178: ADD
27179: ST_TO_ADDR
27180: GO 27367
// if GetBType ( i ) = b_factory then
27182: LD_VAR 0 4
27186: PPUSH
27187: CALL_OW 266
27191: PUSH
27192: LD_INT 3
27194: EQUAL
27195: IFFALSE 27285
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27197: LD_ADDR_VAR 0 2
27201: PUSH
27202: LD_VAR 0 2
27206: PPUSH
27207: LD_INT 1
27209: PPUSH
27210: LD_VAR 0 4
27214: PPUSH
27215: CALL_OW 266
27219: PUSH
27220: LD_VAR 0 4
27224: PPUSH
27225: CALL_OW 250
27229: PUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: CALL_OW 251
27239: PUSH
27240: LD_VAR 0 4
27244: PPUSH
27245: CALL_OW 254
27249: PUSH
27250: LD_VAR 0 4
27254: PPUSH
27255: CALL_OW 267
27259: PUSH
27260: LD_VAR 0 4
27264: PPUSH
27265: CALL_OW 248
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: PPUSH
27278: CALL_OW 2
27282: ST_TO_ADDR
27283: GO 27367
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27285: LD_ADDR_VAR 0 2
27289: PUSH
27290: LD_VAR 0 2
27294: PUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: CALL_OW 266
27304: PUSH
27305: LD_VAR 0 4
27309: PPUSH
27310: CALL_OW 250
27314: PUSH
27315: LD_VAR 0 4
27319: PPUSH
27320: CALL_OW 251
27324: PUSH
27325: LD_VAR 0 4
27329: PPUSH
27330: CALL_OW 254
27334: PUSH
27335: LD_VAR 0 4
27339: PPUSH
27340: CALL_OW 267
27344: PUSH
27345: LD_VAR 0 4
27349: PPUSH
27350: CALL_OW 248
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: ADD
27366: ST_TO_ADDR
// end ;
27367: GO 26916
27369: POP
27370: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27371: LD_VAR 0 2
27375: PPUSH
27376: LD_STRING 10_EpsilonBase
27378: PPUSH
27379: CALL_OW 39
// end ; end_of_file
27383: LD_VAR 0 1
27387: RET
// every 0 0$01 do var timer ;
27388: GO 27390
27390: DISABLE
27391: LD_INT 0
27393: PPUSH
// begin timer := 0 0$30 ;
27394: LD_ADDR_VAR 0 1
27398: PUSH
27399: LD_INT 1050
27401: ST_TO_ADDR
// repeat wait ( timer ) ;
27402: LD_VAR 0 1
27406: PPUSH
27407: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27411: LD_EXP 55
27415: PUSH
27416: LD_INT 6
27418: GREATEREQUAL
27419: PUSH
27420: LD_EXP 55
27424: PUSH
27425: LD_INT 12
27427: LESS
27428: AND
27429: IFFALSE 27445
// timer := timer + 0 0$3 ;
27431: LD_ADDR_VAR 0 1
27435: PUSH
27436: LD_VAR 0 1
27440: PUSH
27441: LD_INT 105
27443: PLUS
27444: ST_TO_ADDR
// if cratesSpawned >= 12 then
27445: LD_EXP 55
27449: PUSH
27450: LD_INT 12
27452: GREATEREQUAL
27453: IFFALSE 27469
// timer := timer + 0 0$9 ;
27455: LD_ADDR_VAR 0 1
27459: PUSH
27460: LD_VAR 0 1
27464: PUSH
27465: LD_INT 315
27467: PLUS
27468: ST_TO_ADDR
// if timer > 3 3$00 then
27469: LD_VAR 0 1
27473: PUSH
27474: LD_INT 6300
27476: GREATER
27477: IFFALSE 27487
// timer := 0 0$50 ;
27479: LD_ADDR_VAR 0 1
27483: PUSH
27484: LD_INT 1750
27486: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
27487: LD_INT 1
27489: PPUSH
27490: LD_INT 5
27492: PPUSH
27493: CALL_OW 12
27497: PPUSH
27498: LD_INT 16
27500: PPUSH
27501: LD_INT 1
27503: PPUSH
27504: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27508: LD_ADDR_EXP 55
27512: PUSH
27513: LD_EXP 55
27517: PUSH
27518: LD_INT 1
27520: PLUS
27521: ST_TO_ADDR
// until true ;
27522: LD_INT 1
27524: IFFALSE 27402
// end ;
27526: PPOPN 1
27528: END
