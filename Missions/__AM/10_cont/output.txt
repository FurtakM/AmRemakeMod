// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 4
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 1 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 1
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24698 0 0
// PrepareDifficulty ;
 250: CALL 9938 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19686 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19686 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19686 0 2
// PrepareArabianCommander ;
 354: CALL 3167 0 0
// PrepareArabian ;
 358: CALL 3219 0 0
// BuildArabianBase ;
 362: CALL 12637 0 0
// TameApemans ;
 366: CALL 18501 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9532 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9532 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9532 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9532 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9532 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9532 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9532 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9532 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9532 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9532 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9532 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9532 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9532 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9532 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9532 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING 08_Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9532 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9532 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9532 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2210
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2206
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2168: LD_ADDR_EXP 22
2172: PUSH
2173: LD_EXP 22
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: CALL_OW 3
2185: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2186: LD_EXP 22
2190: PUSH
2191: LD_VAR 0 2
2195: ARRAY
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: CALL_OW 336
// end ;
2204: GO 2144
2206: POP
2207: POP
// end else
2208: GO 2270
// begin for i in others09 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_EXP 22
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2268
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 49
// others09 = others09 diff i ;
2238: LD_ADDR_EXP 22
2242: PUSH
2243: LD_EXP 22
2247: PUSH
2248: LD_VAR 0 2
2252: DIFF
2253: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_INT 2
2261: PPUSH
2262: CALL_OW 336
// end ;
2266: GO 2220
2268: POP
2269: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2270: LD_INT 22
2272: PUSH
2273: LD_INT 4
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 69
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: IFFALSE 2434
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2304: LD_ADDR_VAR 0 3
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 2
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 11
2342: PUSH
2343: LD_EXP 14
2347: PUSH
2348: LD_EXP 12
2352: PUSH
2353: LD_EXP 15
2357: PUSH
2358: LD_EXP 17
2362: PUSH
2363: LD_EXP 13
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: DIFF
2376: ST_TO_ADDR
// if not tmp then
2377: LD_VAR 0 3
2381: NOT
2382: IFFALSE 2418
// begin if Denis then
2384: LD_EXP 12
2388: IFFALSE 2404
// SetClass ( Denis , 2 ) else
2390: LD_EXP 12
2394: PPUSH
2395: LD_INT 2
2397: PPUSH
2398: CALL_OW 336
2402: GO 2416
// SetClass ( DeltaDoctor , 2 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_INT 2
2411: PPUSH
2412: CALL_OW 336
// end else
2416: GO 2434
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2418: LD_VAR 0 3
2422: PUSH
2423: LD_INT 1
2425: ARRAY
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 336
// end ; end ; for i in ape09 do
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_EXP 23
2443: PUSH
2444: FOR_IN
2445: IFFALSE 2464
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2447: LD_VAR 0 2
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
2462: GO 2444
2464: POP
2465: POP
// uc_side = 1 ;
2466: LD_ADDR_OWVAR 20
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// hc_class := 1 ;
2474: LD_ADDR_OWVAR 28
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// hc_sex := sex_female ;
2482: LD_ADDR_OWVAR 27
2486: PUSH
2487: LD_INT 2
2489: ST_TO_ADDR
// hc_gallery :=  ;
2490: LD_ADDR_OWVAR 33
2494: PUSH
2495: LD_STRING 
2497: ST_TO_ADDR
// hc_name :=  ;
2498: LD_ADDR_OWVAR 26
2502: PUSH
2503: LD_STRING 
2505: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2506: LD_ADDR_OWVAR 31
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: LD_INT 7
2516: PUSH
2517: LD_INT 1
2519: PUSH
2520: LD_INT 0
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: ST_TO_ADDR
// AmScout = CreateHuman ;
2529: LD_ADDR_EXP 18
2533: PUSH
2534: CALL_OW 44
2538: ST_TO_ADDR
// end ;
2539: LD_VAR 0 1
2543: RET
// export function PrepareCornell ; begin
2544: LD_INT 0
2546: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2547: LD_INT 4
2549: PPUSH
2550: LD_INT 4
2552: PPUSH
2553: CALL_OW 343
// uc_side = 4 ;
2557: LD_ADDR_OWVAR 20
2561: PUSH
2562: LD_INT 4
2564: ST_TO_ADDR
// uc_nation = 1 ;
2565: LD_ADDR_OWVAR 21
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2573: LD_ADDR_EXP 19
2577: PUSH
2578: LD_STRING 03_Cornel
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL 9532 0 2
2588: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2589: LD_EXP 19
2593: PPUSH
2594: LD_INT 8
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2604: LD_EXP 19
2608: PPUSH
2609: LD_INT 350
2611: PPUSH
2612: CALL_OW 234
// if IsInUnit ( JMM ) then
2616: LD_EXP 1
2620: PPUSH
2621: CALL_OW 310
2625: IFFALSE 2668
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2627: LD_EXP 19
2631: PPUSH
2632: LD_EXP 1
2636: PPUSH
2637: CALL_OW 310
2641: PPUSH
2642: CALL_OW 250
2646: PPUSH
2647: LD_EXP 1
2651: PPUSH
2652: CALL_OW 310
2656: PPUSH
2657: CALL_OW 251
2661: PPUSH
2662: CALL_OW 111
2666: GO 2697
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_EXP 1
2677: PPUSH
2678: CALL_OW 250
2682: PPUSH
2683: LD_EXP 1
2687: PPUSH
2688: CALL_OW 251
2692: PPUSH
2693: CALL_OW 111
// end ; end_of_file
2697: LD_VAR 0 1
2701: RET
// export function PrepareRussians ; var i , un ; begin
2702: LD_INT 0
2704: PPUSH
2705: PPUSH
2706: PPUSH
// uc_side = 3 ;
2707: LD_ADDR_OWVAR 20
2711: PUSH
2712: LD_INT 3
2714: ST_TO_ADDR
// uc_nation = 3 ;
2715: LD_ADDR_OWVAR 21
2719: PUSH
2720: LD_INT 3
2722: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2723: LD_ADDR_EXP 25
2727: PUSH
2728: LD_STRING Tsaritsyn
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: CALL 9532 0 2
2738: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2739: LD_EXP 25
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// for i = 1 to 14 do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_INT 14
2766: PUSH
2767: FOR_TO
2768: IFFALSE 2854
// begin uc_side = 3 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 3
2777: ST_TO_ADDR
// uc_nation = 3 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// hc_gallery =  ;
2786: LD_ADDR_OWVAR 33
2790: PUSH
2791: LD_STRING 
2793: ST_TO_ADDR
// hc_name =  ;
2794: LD_ADDR_OWVAR 26
2798: PUSH
2799: LD_STRING 
2801: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2802: LD_INT 0
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: LD_EXP 36
2812: PPUSH
2813: LD_EXP 37
2817: PPUSH
2818: CALL_OW 12
2822: PPUSH
2823: CALL_OW 380
// un = CreateHuman ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2837: LD_VAR 0 3
2841: PPUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 0
2847: PPUSH
2848: CALL_OW 49
// end ;
2852: GO 2767
2854: POP
2855: POP
// for i = 1 to 6 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 6
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2956
// begin uc_side = 3 ;
2872: LD_ADDR_OWVAR 20
2876: PUSH
2877: LD_INT 3
2879: ST_TO_ADDR
// uc_nation = 3 ;
2880: LD_ADDR_OWVAR 21
2884: PUSH
2885: LD_INT 3
2887: ST_TO_ADDR
// hc_gallery =  ;
2888: LD_ADDR_OWVAR 33
2892: PUSH
2893: LD_STRING 
2895: ST_TO_ADDR
// hc_name =  ;
2896: LD_ADDR_OWVAR 26
2900: PUSH
2901: LD_STRING 
2903: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2904: LD_INT 0
2906: PPUSH
2907: LD_INT 2
2909: PPUSH
2910: LD_EXP 36
2914: PPUSH
2915: LD_EXP 37
2919: PPUSH
2920: CALL_OW 12
2924: PPUSH
2925: CALL_OW 380
// un = CreateHuman ;
2929: LD_ADDR_VAR 0 3
2933: PUSH
2934: CALL_OW 44
2938: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 49
// end ;
2954: GO 2869
2956: POP
2957: POP
// for i = 1 to 6 do
2958: LD_ADDR_VAR 0 2
2962: PUSH
2963: DOUBLE
2964: LD_INT 1
2966: DEC
2967: ST_TO_ADDR
2968: LD_INT 6
2970: PUSH
2971: FOR_TO
2972: IFFALSE 3058
// begin uc_side = 3 ;
2974: LD_ADDR_OWVAR 20
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// uc_nation = 3 ;
2982: LD_ADDR_OWVAR 21
2986: PUSH
2987: LD_INT 3
2989: ST_TO_ADDR
// hc_gallery =  ;
2990: LD_ADDR_OWVAR 33
2994: PUSH
2995: LD_STRING 
2997: ST_TO_ADDR
// hc_name =  ;
2998: LD_ADDR_OWVAR 26
3002: PUSH
3003: LD_STRING 
3005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3006: LD_INT 0
3008: PPUSH
3009: LD_INT 3
3011: PPUSH
3012: LD_EXP 36
3016: PPUSH
3017: LD_EXP 37
3021: PPUSH
3022: CALL_OW 12
3026: PPUSH
3027: CALL_OW 380
// un = CreateHuman ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: CALL_OW 44
3040: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3041: LD_VAR 0 3
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 49
// end ;
3056: GO 2971
3058: POP
3059: POP
// for i = 1 to 4 do
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: DOUBLE
3066: LD_INT 1
3068: DEC
3069: ST_TO_ADDR
3070: LD_INT 4
3072: PUSH
3073: FOR_TO
3074: IFFALSE 3160
// begin uc_side = 3 ;
3076: LD_ADDR_OWVAR 20
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// uc_nation = 3 ;
3084: LD_ADDR_OWVAR 21
3088: PUSH
3089: LD_INT 3
3091: ST_TO_ADDR
// hc_gallery =  ;
3092: LD_ADDR_OWVAR 33
3096: PUSH
3097: LD_STRING 
3099: ST_TO_ADDR
// hc_name =  ;
3100: LD_ADDR_OWVAR 26
3104: PUSH
3105: LD_STRING 
3107: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3108: LD_INT 0
3110: PPUSH
3111: LD_INT 4
3113: PPUSH
3114: LD_EXP 36
3118: PPUSH
3119: LD_EXP 37
3123: PPUSH
3124: CALL_OW 12
3128: PPUSH
3129: CALL_OW 380
// un = CreateHuman ;
3133: LD_ADDR_VAR 0 3
3137: PUSH
3138: CALL_OW 44
3142: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3143: LD_VAR 0 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: CALL_OW 49
// end ;
3158: GO 3073
3160: POP
3161: POP
// end ; end_of_file
3162: LD_VAR 0 1
3166: RET
// export function PrepareArabianCommander ; begin
3167: LD_INT 0
3169: PPUSH
// uc_side = 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation = 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3186: LD_ADDR_EXP 26
3190: PUSH
3191: LD_STRING Dietrich
3193: PPUSH
3194: CALL_OW 25
3198: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3199: LD_EXP 26
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: LD_INT 0
3209: PPUSH
3210: CALL_OW 49
// end ;
3214: LD_VAR 0 1
3218: RET
// export function PrepareArabian ; var i , un , veh ; begin
3219: LD_INT 0
3221: PPUSH
3222: PPUSH
3223: PPUSH
3224: PPUSH
// uc_side := 2 ;
3225: LD_ADDR_OWVAR 20
3229: PUSH
3230: LD_INT 2
3232: ST_TO_ADDR
// uc_nation := 2 ;
3233: LD_ADDR_OWVAR 21
3237: PUSH
3238: LD_INT 2
3240: ST_TO_ADDR
// if not Ahmed then
3241: LD_EXP 27
3245: NOT
3246: IFFALSE 3314
// begin InitHc ;
3248: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3252: LD_INT 1
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_EXP 36
3262: PPUSH
3263: LD_EXP 37
3267: PUSH
3268: LD_INT 1
3270: PLUS
3271: PPUSH
3272: CALL_OW 12
3276: PPUSH
3277: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3281: LD_ADDR_OWVAR 26
3285: PUSH
3286: LD_STRING Ahmed Abbasid
3288: ST_TO_ADDR
// Ahmed := CreateHuman ;
3289: LD_ADDR_EXP 27
3293: PUSH
3294: CALL_OW 44
3298: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3299: LD_EXP 27
3303: PPUSH
3304: LD_INT 4
3306: PPUSH
3307: LD_INT 0
3309: PPUSH
3310: CALL_OW 49
// end ; for i = 1 to 4 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 4
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3414
// begin uc_side = 2 ;
3330: LD_ADDR_OWVAR 20
3334: PUSH
3335: LD_INT 2
3337: ST_TO_ADDR
// uc_nation = 2 ;
3338: LD_ADDR_OWVAR 21
3342: PUSH
3343: LD_INT 2
3345: ST_TO_ADDR
// hc_gallery =  ;
3346: LD_ADDR_OWVAR 33
3350: PUSH
3351: LD_STRING 
3353: ST_TO_ADDR
// hc_name =  ;
3354: LD_ADDR_OWVAR 26
3358: PUSH
3359: LD_STRING 
3361: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3362: LD_INT 0
3364: PPUSH
3365: LD_INT 2
3367: PPUSH
3368: LD_EXP 36
3372: PPUSH
3373: LD_EXP 37
3377: PPUSH
3378: CALL_OW 12
3382: PPUSH
3383: CALL_OW 380
// un = CreateHuman ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3397: LD_VAR 0 3
3401: PPUSH
3402: LD_INT 4
3404: PPUSH
3405: LD_INT 0
3407: PPUSH
3408: CALL_OW 49
// end ;
3412: GO 3327
3414: POP
3415: POP
// for i = 1 to 5 do
3416: LD_ADDR_VAR 0 2
3420: PUSH
3421: DOUBLE
3422: LD_INT 1
3424: DEC
3425: ST_TO_ADDR
3426: LD_INT 5
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3516
// begin uc_side = 2 ;
3432: LD_ADDR_OWVAR 20
3436: PUSH
3437: LD_INT 2
3439: ST_TO_ADDR
// uc_nation = 2 ;
3440: LD_ADDR_OWVAR 21
3444: PUSH
3445: LD_INT 2
3447: ST_TO_ADDR
// hc_gallery =  ;
3448: LD_ADDR_OWVAR 33
3452: PUSH
3453: LD_STRING 
3455: ST_TO_ADDR
// hc_name =  ;
3456: LD_ADDR_OWVAR 26
3460: PUSH
3461: LD_STRING 
3463: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3464: LD_INT 0
3466: PPUSH
3467: LD_INT 1
3469: PPUSH
3470: LD_EXP 36
3474: PPUSH
3475: LD_EXP 37
3479: PPUSH
3480: CALL_OW 12
3484: PPUSH
3485: CALL_OW 380
// un = CreateHuman ;
3489: LD_ADDR_VAR 0 3
3493: PUSH
3494: CALL_OW 44
3498: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3429
3516: POP
3517: POP
// for i = 1 to 4 do
3518: LD_ADDR_VAR 0 2
3522: PUSH
3523: DOUBLE
3524: LD_INT 1
3526: DEC
3527: ST_TO_ADDR
3528: LD_INT 4
3530: PUSH
3531: FOR_TO
3532: IFFALSE 3618
// begin uc_side = 2 ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_INT 2
3541: ST_TO_ADDR
// uc_nation = 2 ;
3542: LD_ADDR_OWVAR 21
3546: PUSH
3547: LD_INT 2
3549: ST_TO_ADDR
// hc_gallery =  ;
3550: LD_ADDR_OWVAR 33
3554: PUSH
3555: LD_STRING 
3557: ST_TO_ADDR
// hc_name =  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3566: LD_INT 0
3568: PPUSH
3569: LD_INT 4
3571: PPUSH
3572: LD_EXP 36
3576: PPUSH
3577: LD_EXP 37
3581: PPUSH
3582: CALL_OW 12
3586: PPUSH
3587: CALL_OW 380
// un = CreateHuman ;
3591: LD_ADDR_VAR 0 3
3595: PUSH
3596: CALL_OW 44
3600: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_INT 4
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 49
// end ;
3616: GO 3531
3618: POP
3619: POP
// for i = 1 to 2 do
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_INT 2
3632: PUSH
3633: FOR_TO
3634: IFFALSE 3764
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3636: LD_ADDR_VAR 0 4
3640: PUSH
3641: LD_INT 22
3643: PUSH
3644: LD_INT 2
3646: PUSH
3647: EMPTY
3648: LIST
3649: LIST
3650: PUSH
3651: LD_INT 21
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 58
3663: PUSH
3664: EMPTY
3665: LIST
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: LIST
3671: PPUSH
3672: CALL_OW 69
3676: ST_TO_ADDR
// uc_side = 2 ;
3677: LD_ADDR_OWVAR 20
3681: PUSH
3682: LD_INT 2
3684: ST_TO_ADDR
// uc_nation = 2 ;
3685: LD_ADDR_OWVAR 21
3689: PUSH
3690: LD_INT 2
3692: ST_TO_ADDR
// hc_gallery =  ;
3693: LD_ADDR_OWVAR 33
3697: PUSH
3698: LD_STRING 
3700: ST_TO_ADDR
// hc_name =  ;
3701: LD_ADDR_OWVAR 26
3705: PUSH
3706: LD_STRING 
3708: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3709: LD_INT 0
3711: PPUSH
3712: LD_INT 3
3714: PPUSH
3715: LD_EXP 36
3719: PPUSH
3720: LD_EXP 37
3724: PPUSH
3725: CALL_OW 12
3729: PPUSH
3730: CALL_OW 380
// un = CreateHuman ;
3734: LD_ADDR_VAR 0 3
3738: PUSH
3739: CALL_OW 44
3743: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3744: LD_VAR 0 3
3748: PPUSH
3749: LD_VAR 0 4
3753: PUSH
3754: LD_INT 1
3756: ARRAY
3757: PPUSH
3758: CALL_OW 52
// end ;
3762: GO 3633
3764: POP
3765: POP
// end ;
3766: LD_VAR 0 1
3770: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3771: LD_INT 0
3773: PPUSH
3774: PPUSH
3775: PPUSH
3776: PPUSH
3777: PPUSH
3778: PPUSH
// for i := 1 to 2 do
3779: LD_ADDR_VAR 0 2
3783: PUSH
3784: DOUBLE
3785: LD_INT 1
3787: DEC
3788: ST_TO_ADDR
3789: LD_INT 2
3791: PUSH
3792: FOR_TO
3793: IFFALSE 3919
// begin uc_side = 5 ;
3795: LD_ADDR_OWVAR 20
3799: PUSH
3800: LD_INT 5
3802: ST_TO_ADDR
// uc_nation = 2 ;
3803: LD_ADDR_OWVAR 21
3807: PUSH
3808: LD_INT 2
3810: ST_TO_ADDR
// vc_chassis := 31 ;
3811: LD_ADDR_OWVAR 37
3815: PUSH
3816: LD_INT 31
3818: ST_TO_ADDR
// vc_control := control_rider ;
3819: LD_ADDR_OWVAR 38
3823: PUSH
3824: LD_INT 4
3826: ST_TO_ADDR
// animal := CreateVehicle ;
3827: LD_ADDR_VAR 0 3
3831: PUSH
3832: CALL_OW 45
3836: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3837: LD_VAR 0 3
3841: PPUSH
3842: LD_INT 7
3844: PPUSH
3845: LD_INT 0
3847: PPUSH
3848: CALL_OW 49
// hc_gallery =  ;
3852: LD_ADDR_OWVAR 33
3856: PUSH
3857: LD_STRING 
3859: ST_TO_ADDR
// hc_name =  ;
3860: LD_ADDR_OWVAR 26
3864: PUSH
3865: LD_STRING 
3867: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3868: LD_INT 0
3870: PPUSH
3871: LD_INT 11
3873: PPUSH
3874: LD_EXP 36
3878: PPUSH
3879: LD_EXP 37
3883: PPUSH
3884: CALL_OW 12
3888: PPUSH
3889: CALL_OW 380
// un = CreateHuman ;
3893: LD_ADDR_VAR 0 4
3897: PUSH
3898: CALL_OW 44
3902: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3903: LD_VAR 0 4
3907: PPUSH
3908: LD_VAR 0 3
3912: PPUSH
3913: CALL_OW 52
// end ;
3917: GO 3792
3919: POP
3920: POP
// repeat wait ( 0 0$1 ) ;
3921: LD_INT 35
3923: PPUSH
3924: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3928: LD_ADDR_VAR 0 5
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_INT 1
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PPUSH
3943: CALL_OW 69
3947: PPUSH
3948: LD_VAR 0 2
3952: PPUSH
3953: CALL_OW 74
3957: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3958: LD_ADDR_VAR 0 6
3962: PUSH
3963: LD_INT 22
3965: PUSH
3966: LD_INT 1
3968: PUSH
3969: EMPTY
3970: LIST
3971: LIST
3972: PUSH
3973: LD_INT 2
3975: PUSH
3976: LD_INT 59
3978: PUSH
3979: EMPTY
3980: LIST
3981: PUSH
3982: LD_INT 21
3984: PUSH
3985: LD_INT 1
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 21
3994: PUSH
3995: LD_INT 2
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: EMPTY
4013: LIST
4014: PPUSH
4015: CALL_OW 69
4019: PPUSH
4020: LD_VAR 0 2
4024: PPUSH
4025: CALL_OW 74
4029: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4030: LD_ADDR_VAR 0 2
4034: PUSH
4035: LD_INT 22
4037: PUSH
4038: LD_INT 5
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PUSH
4045: LD_INT 25
4047: PUSH
4048: LD_INT 11
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PPUSH
4059: CALL_OW 69
4063: PUSH
4064: FOR_IN
4065: IFFALSE 4135
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4067: LD_VAR 0 2
4071: PPUSH
4072: LD_VAR 0 5
4076: PPUSH
4077: CALL_OW 296
4081: PUSH
4082: LD_INT 8
4084: PLUS
4085: PUSH
4086: LD_VAR 0 2
4090: PPUSH
4091: LD_VAR 0 6
4095: PPUSH
4096: CALL_OW 296
4100: LESS
4101: IFFALSE 4119
// ComAttackUnit ( i , target1 ) else
4103: LD_VAR 0 2
4107: PPUSH
4108: LD_VAR 0 5
4112: PPUSH
4113: CALL_OW 115
4117: GO 4133
// ComAttackUnit ( i , target2 ) ;
4119: LD_VAR 0 2
4123: PPUSH
4124: LD_VAR 0 6
4128: PPUSH
4129: CALL_OW 115
// end ;
4133: GO 4064
4135: POP
4136: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4137: LD_INT 22
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: LD_INT 25
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PPUSH
4161: CALL_OW 69
4165: PUSH
4166: LD_INT 0
4168: EQUAL
4169: PUSH
4170: LD_INT 22
4172: PUSH
4173: LD_INT 1
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PUSH
4185: LD_INT 0
4187: EQUAL
4188: OR
4189: IFFALSE 3921
// end ; end_of_file
4191: LD_VAR 0 1
4195: RET
// every 1 do
4196: GO 4198
4198: DISABLE
// begin InGameOn ;
4199: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4203: LD_INT 1
4205: PPUSH
4206: LD_INT 19
4208: PPUSH
4209: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4213: LD_EXP 11
4217: PPUSH
4218: CALL_OW 87
// wait ( 0 0$3 ) ;
4222: LD_INT 105
4224: PPUSH
4225: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4229: LD_EXP 1
4233: PPUSH
4234: CALL_OW 310
4238: PPUSH
4239: CALL_OW 85
// Wait ( 0 0$1 ) ;
4243: LD_INT 35
4245: PPUSH
4246: CALL_OW 67
// if IsOk ( Gary ) then
4250: LD_EXP 10
4254: PPUSH
4255: CALL_OW 302
4259: IFFALSE 4297
// begin Say ( Gary , D2-Gary-1 ) ;
4261: LD_EXP 10
4265: PPUSH
4266: LD_STRING D2-Gary-1
4268: PPUSH
4269: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4273: LD_EXP 1
4277: PPUSH
4278: LD_STRING D2-JMM-1
4280: PPUSH
4281: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4285: LD_EXP 10
4289: PPUSH
4290: LD_STRING D2-Gary-2
4292: PPUSH
4293: CALL_OW 88
// end ; InGameOff ;
4297: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4301: LD_STRING M1
4303: PPUSH
4304: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4308: LD_INT 38
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 100
4316: PPUSH
4317: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4321: LD_INT 47
4323: PPUSH
4324: LD_INT 1
4326: PPUSH
4327: LD_INT 50
4329: PPUSH
4330: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4334: LD_INT 47
4336: PPUSH
4337: LD_INT 3
4339: PPUSH
4340: LD_INT 50
4342: PPUSH
4343: CALL_OW 291
// SaveForQuickRestart ;
4347: CALL_OW 22
// end ;
4351: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4352: LD_EXP 1
4356: PPUSH
4357: LD_EXP 11
4361: PPUSH
4362: CALL_OW 296
4366: PUSH
4367: LD_INT 15
4369: LESS
4370: IFFALSE 4836
4372: GO 4374
4374: DISABLE
// begin InGameOn ;
4375: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4379: LD_EXP 1
4383: PPUSH
4384: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4388: LD_EXP 1
4392: PPUSH
4393: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4397: LD_EXP 1
4401: PPUSH
4402: LD_EXP 11
4406: PPUSH
4407: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4411: LD_INT 35
4413: PPUSH
4414: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4418: LD_EXP 11
4422: PUSH
4423: LD_EXP 13
4427: PUSH
4428: LD_EXP 12
4432: PUSH
4433: LD_EXP 14
4437: PUSH
4438: LD_EXP 8
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: PPUSH
4450: LD_EXP 1
4454: PPUSH
4455: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4459: LD_EXP 1
4463: PPUSH
4464: LD_EXP 11
4468: PPUSH
4469: CALL_OW 296
4473: PUSH
4474: LD_INT 5
4476: LESS
4477: IFFALSE 4411
// ComTurnUnit ( JMM , Simms ) ;
4479: LD_EXP 1
4483: PPUSH
4484: LD_EXP 11
4488: PPUSH
4489: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4493: LD_EXP 11
4497: PUSH
4498: LD_EXP 13
4502: PUSH
4503: LD_EXP 12
4507: PUSH
4508: LD_EXP 14
4512: PUSH
4513: EMPTY
4514: LIST
4515: LIST
4516: LIST
4517: LIST
4518: PPUSH
4519: LD_EXP 1
4523: PPUSH
4524: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4528: LD_EXP 1
4532: PUSH
4533: LD_EXP 11
4537: PUSH
4538: EMPTY
4539: LIST
4540: LIST
4541: PPUSH
4542: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4546: LD_EXP 11
4550: PPUSH
4551: LD_STRING D2a-Sim-1
4553: PPUSH
4554: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4558: LD_EXP 1
4562: PPUSH
4563: LD_STRING D2a-JMM-1
4565: PPUSH
4566: CALL_OW 88
// if IsOk ( Joan ) then
4570: LD_EXP 13
4574: PPUSH
4575: CALL_OW 302
4579: IFFALSE 4631
// begin ComTurnUnit ( JMM , Joan ) ;
4581: LD_EXP 1
4585: PPUSH
4586: LD_EXP 13
4590: PPUSH
4591: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4595: LD_EXP 13
4599: PPUSH
4600: LD_STRING D2b-Joan-1
4602: PPUSH
4603: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4607: LD_EXP 1
4611: PPUSH
4612: LD_STRING D2b-JMM-1
4614: PPUSH
4615: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4619: LD_EXP 13
4623: PPUSH
4624: LD_STRING D2b-Joan-2
4626: PPUSH
4627: CALL_OW 88
// end ; if IsOk ( Denis ) then
4631: LD_EXP 12
4635: PPUSH
4636: CALL_OW 302
4640: IFFALSE 4668
// begin ComTurnUnit ( JMM , Denis ) ;
4642: LD_EXP 1
4646: PPUSH
4647: LD_EXP 12
4651: PPUSH
4652: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4656: LD_EXP 12
4660: PPUSH
4661: LD_STRING D2c-Den-1
4663: PPUSH
4664: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4668: LD_EXP 8
4672: PPUSH
4673: CALL_OW 302
4677: IFFALSE 4746
// begin repeat wait ( 0 0$1 ) ;
4679: LD_INT 35
4681: PPUSH
4682: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4686: LD_EXP 8
4690: PPUSH
4691: LD_EXP 1
4695: PPUSH
4696: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4700: LD_EXP 1
4704: PPUSH
4705: LD_EXP 8
4709: PPUSH
4710: CALL_OW 296
4714: PUSH
4715: LD_INT 5
4717: LESS
4718: IFFALSE 4679
// ComTurnUnit ( JMM , Kikuchi ) ;
4720: LD_EXP 1
4724: PPUSH
4725: LD_EXP 8
4729: PPUSH
4730: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4734: LD_EXP 8
4738: PPUSH
4739: LD_STRING D3b-Yam-1
4741: PPUSH
4742: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4746: LD_EXP 14
4750: PPUSH
4751: CALL_OW 302
4755: IFFALSE 4795
// begin ComTurnUnit ( JMM , Khatam ) ;
4757: LD_EXP 1
4761: PPUSH
4762: LD_EXP 14
4766: PPUSH
4767: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4771: LD_EXP 1
4775: PPUSH
4776: LD_STRING D2c-JMM-1
4778: PPUSH
4779: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4783: LD_EXP 14
4787: PPUSH
4788: LD_STRING D2c-Khat-1
4790: PPUSH
4791: CALL_OW 88
// end ; InGameOff ;
4795: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4799: LD_INT 22
4801: PUSH
4802: LD_INT 4
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PPUSH
4809: CALL_OW 69
4813: PPUSH
4814: LD_INT 1
4816: PPUSH
4817: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4821: LD_STRING M1a
4823: PPUSH
4824: CALL_OW 337
// joinEpsilon = 1 ;
4828: LD_ADDR_EXP 29
4832: PUSH
4833: LD_INT 1
4835: ST_TO_ADDR
// end ;
4836: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4837: LD_INT 38
4839: PPUSH
4840: LD_INT 1
4842: PPUSH
4843: CALL_OW 289
4847: PUSH
4848: LD_INT 0
4850: EQUAL
4851: PUSH
4852: LD_INT 47
4854: PPUSH
4855: LD_INT 1
4857: PPUSH
4858: CALL_OW 289
4862: PUSH
4863: LD_INT 0
4865: EQUAL
4866: AND
4867: PUSH
4868: LD_INT 47
4870: PPUSH
4871: LD_INT 2
4873: PPUSH
4874: CALL_OW 289
4878: PUSH
4879: LD_INT 0
4881: EQUAL
4882: AND
4883: IFFALSE 4908
4885: GO 4887
4887: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4888: LD_INT 38
4890: PUSH
4891: LD_INT 47
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: PPUSH
4898: LD_INT 62
4900: PPUSH
4901: LD_INT 6
4903: PPUSH
4904: CALL_OW 111
4908: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4909: LD_EXP 61
4913: PUSH
4914: LD_INT 1
4916: EQUAL
4917: IFFALSE 6049
4919: GO 4921
4921: DISABLE
4922: LD_INT 0
4924: PPUSH
4925: PPUSH
4926: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4927: LD_ADDR_VAR 0 1
4931: PUSH
4932: LD_INT 22
4934: PUSH
4935: LD_INT 1
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PUSH
4942: LD_INT 25
4944: PUSH
4945: LD_INT 4
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: PUSH
4952: LD_INT 26
4954: PUSH
4955: LD_INT 1
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: EMPTY
4963: LIST
4964: LIST
4965: LIST
4966: PPUSH
4967: CALL_OW 69
4971: PUSH
4972: LD_EXP 1
4976: PUSH
4977: LD_EXP 2
4981: PUSH
4982: LD_EXP 3
4986: PUSH
4987: LD_EXP 4
4991: PUSH
4992: LD_EXP 5
4996: PUSH
4997: LD_EXP 6
5001: PUSH
5002: LD_EXP 7
5006: PUSH
5007: LD_EXP 8
5011: PUSH
5012: LD_EXP 9
5016: PUSH
5017: LD_EXP 10
5021: PUSH
5022: LD_EXP 11
5026: PUSH
5027: LD_EXP 12
5031: PUSH
5032: LD_EXP 13
5036: PUSH
5037: LD_EXP 14
5041: PUSH
5042: LD_EXP 15
5046: PUSH
5047: LD_EXP 16
5051: PUSH
5052: LD_EXP 17
5056: PUSH
5057: LD_EXP 18
5061: PUSH
5062: LD_EXP 19
5066: PUSH
5067: LD_EXP 24
5071: PUSH
5072: EMPTY
5073: LIST
5074: LIST
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: LIST
5080: LIST
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: LIST
5088: LIST
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: DIFF
5094: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5095: LD_ADDR_VAR 0 2
5099: PUSH
5100: LD_INT 22
5102: PUSH
5103: LD_INT 1
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: PUSH
5110: LD_INT 26
5112: PUSH
5113: LD_INT 1
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: PUSH
5120: LD_INT 2
5122: PUSH
5123: LD_INT 25
5125: PUSH
5126: LD_INT 1
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 25
5135: PUSH
5136: LD_INT 2
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: PUSH
5143: LD_INT 25
5145: PUSH
5146: LD_INT 3
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: LIST
5163: PPUSH
5164: CALL_OW 69
5168: PUSH
5169: LD_EXP 1
5173: PUSH
5174: LD_EXP 2
5178: PUSH
5179: LD_EXP 3
5183: PUSH
5184: LD_EXP 4
5188: PUSH
5189: LD_EXP 5
5193: PUSH
5194: LD_EXP 6
5198: PUSH
5199: LD_EXP 7
5203: PUSH
5204: LD_EXP 8
5208: PUSH
5209: LD_EXP 9
5213: PUSH
5214: LD_EXP 10
5218: PUSH
5219: LD_EXP 11
5223: PUSH
5224: LD_EXP 12
5228: PUSH
5229: LD_EXP 13
5233: PUSH
5234: LD_EXP 14
5238: PUSH
5239: LD_EXP 15
5243: PUSH
5244: LD_EXP 16
5248: PUSH
5249: LD_EXP 17
5253: PUSH
5254: LD_EXP 18
5258: PUSH
5259: LD_EXP 19
5263: PUSH
5264: LD_EXP 24
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: LIST
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: LIST
5281: LIST
5282: LIST
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: DIFF
5291: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5292: LD_EXP 10
5296: PUSH
5297: LD_VAR 0 2
5301: OR
5302: PUSH
5303: LD_EXP 17
5307: PUSH
5308: LD_VAR 0 1
5312: OR
5313: AND
5314: IFFALSE 5533
// begin DialogueOn ;
5316: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5320: LD_EXP 17
5324: PPUSH
5325: CALL_OW 302
5329: IFFALSE 5345
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5331: LD_EXP 17
5335: PPUSH
5336: LD_STRING D3-Sci1-1
5338: PPUSH
5339: CALL_OW 88
5343: GO 5357
// Say ( tmp1 , D3-Sci1-1 ) ;
5345: LD_VAR 0 1
5349: PPUSH
5350: LD_STRING D3-Sci1-1
5352: PPUSH
5353: CALL_OW 88
// if IsOk ( Gary ) then
5357: LD_EXP 10
5361: PPUSH
5362: CALL_OW 302
5366: IFFALSE 5382
// Say ( Gary , D3-Gary-1 ) else
5368: LD_EXP 10
5372: PPUSH
5373: LD_STRING D3-Gary-1
5375: PPUSH
5376: CALL_OW 88
5380: GO 5394
// Say ( tmp2 , D3-Gary-1 ) ;
5382: LD_VAR 0 2
5386: PPUSH
5387: LD_STRING D3-Gary-1
5389: PPUSH
5390: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5394: LD_EXP 17
5398: PPUSH
5399: CALL_OW 302
5403: IFFALSE 5419
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5405: LD_EXP 17
5409: PPUSH
5410: LD_STRING D3-Sci1-2
5412: PPUSH
5413: CALL_OW 88
5417: GO 5431
// Say ( tmp1 , D3-Sci1-2 ) ;
5419: LD_VAR 0 1
5423: PPUSH
5424: LD_STRING D3-Sci1-2
5426: PPUSH
5427: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5431: LD_EXP 1
5435: PPUSH
5436: LD_STRING D3-JMM-2
5438: PPUSH
5439: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5443: LD_EXP 17
5447: PPUSH
5448: CALL_OW 302
5452: IFFALSE 5468
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5454: LD_EXP 17
5458: PPUSH
5459: LD_STRING D3-Sci1-3
5461: PPUSH
5462: CALL_OW 88
5466: GO 5480
// Say ( tmp1 , D3-Sci1-3 ) ;
5468: LD_VAR 0 1
5472: PPUSH
5473: LD_STRING D3-Sci1-3
5475: PPUSH
5476: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5480: LD_EXP 1
5484: PPUSH
5485: LD_STRING D3-JMM-3
5487: PPUSH
5488: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5492: LD_EXP 17
5496: PPUSH
5497: CALL_OW 302
5501: IFFALSE 5517
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5503: LD_EXP 17
5507: PPUSH
5508: LD_STRING D3-Sci1-4
5510: PPUSH
5511: CALL_OW 88
5515: GO 5529
// Say ( tmp1 , D3-Sci1-4 ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: LD_STRING D3-Sci1-4
5524: PPUSH
5525: CALL_OW 88
// DialogueOff ;
5529: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5533: LD_INT 12
5535: PPUSH
5536: LD_INT 1
5538: PPUSH
5539: LD_INT 1
5541: PPUSH
5542: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5546: LD_INT 32
5548: PPUSH
5549: LD_INT 1
5551: PPUSH
5552: LD_INT 1
5554: PPUSH
5555: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5559: LD_INT 12
5561: PPUSH
5562: LD_INT 1
5564: PPUSH
5565: LD_INT 1
5567: PPUSH
5568: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5572: LD_INT 33
5574: PPUSH
5575: LD_INT 1
5577: PPUSH
5578: LD_INT 1
5580: PPUSH
5581: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5585: LD_STRING M2
5587: PPUSH
5588: CALL_OW 337
// wait ( 3 3$0 ) ;
5592: LD_INT 6300
5594: PPUSH
5595: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5599: LD_INT 35
5601: PPUSH
5602: CALL_OW 67
// until not InBattle ( 1 ) ;
5606: LD_INT 1
5608: PPUSH
5609: CALL_OW 463
5613: NOT
5614: IFFALSE 5599
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5616: LD_EXP 11
5620: PPUSH
5621: CALL_OW 302
5625: PUSH
5626: LD_EXP 17
5630: PPUSH
5631: CALL_OW 302
5635: AND
5636: IFFALSE 5805
// begin DialogueOn ;
5638: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5642: LD_EXP 11
5646: PPUSH
5647: LD_STRING D3a-Sim-1
5649: PPUSH
5650: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5654: LD_EXP 17
5658: PPUSH
5659: LD_STRING D3a-Sci1-1
5661: PPUSH
5662: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5666: LD_EXP 11
5670: PPUSH
5671: LD_STRING D3a-Sim-2
5673: PPUSH
5674: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5678: LD_EXP 17
5682: PPUSH
5683: LD_STRING D3a-Sci1-2
5685: PPUSH
5686: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5690: LD_EXP 11
5694: PPUSH
5695: LD_STRING D3a-Sim-3
5697: PPUSH
5698: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5702: LD_EXP 17
5706: PPUSH
5707: LD_STRING D3a-Sci1-3
5709: PPUSH
5710: CALL_OW 88
// if IsOK ( Joan ) then
5714: LD_EXP 13
5718: PPUSH
5719: CALL_OW 302
5723: IFFALSE 5739
// Say ( Simms , D3a-Sim-4 ) else
5725: LD_EXP 11
5729: PPUSH
5730: LD_STRING D3a-Sim-4
5732: PPUSH
5733: CALL_OW 88
5737: GO 5751
// Say ( Simms , D3a-Sim-4a ) ;
5739: LD_EXP 11
5743: PPUSH
5744: LD_STRING D3a-Sim-4a
5746: PPUSH
5747: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5751: LD_EXP 17
5755: PPUSH
5756: LD_STRING D3a-Sci1-4
5758: PPUSH
5759: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5763: LD_EXP 11
5767: PPUSH
5768: LD_STRING D3a-Sim-5
5770: PPUSH
5771: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5775: LD_EXP 17
5779: PPUSH
5780: LD_STRING D3a-Sci1-5
5782: PPUSH
5783: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5787: LD_EXP 11
5791: PPUSH
5792: LD_STRING D3a-Sim-6
5794: PPUSH
5795: CALL_OW 88
// DialogueOff ;
5799: CALL_OW 7
// end else
5803: GO 6049
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5805: LD_ADDR_VAR 0 3
5809: PUSH
5810: LD_INT 22
5812: PUSH
5813: LD_INT 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 25
5822: PUSH
5823: LD_INT 4
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: PPUSH
5834: CALL_OW 69
5838: PUSH
5839: LD_EXP 11
5843: PUSH
5844: LD_EXP 14
5848: PUSH
5849: EMPTY
5850: LIST
5851: LIST
5852: DIFF
5853: ST_TO_ADDR
// if tmp3 > 0 then
5854: LD_VAR 0 3
5858: PUSH
5859: LD_INT 0
5861: GREATER
5862: IFFALSE 6049
// begin DialogueOn ;
5864: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5868: LD_EXP 11
5872: PPUSH
5873: LD_STRING D3a-Sim-1
5875: PPUSH
5876: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5880: LD_VAR 0 3
5884: PUSH
5885: LD_INT 1
5887: ARRAY
5888: PPUSH
5889: LD_STRING D3a-Sci1-1
5891: PPUSH
5892: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5896: LD_EXP 11
5900: PPUSH
5901: LD_STRING D3a-Sim-2
5903: PPUSH
5904: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5908: LD_VAR 0 3
5912: PUSH
5913: LD_INT 1
5915: ARRAY
5916: PPUSH
5917: LD_STRING D3a-Sci1-2
5919: PPUSH
5920: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5924: LD_EXP 11
5928: PPUSH
5929: LD_STRING D3a-Sim-3
5931: PPUSH
5932: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5936: LD_VAR 0 3
5940: PUSH
5941: LD_INT 1
5943: ARRAY
5944: PPUSH
5945: LD_STRING D3a-Sci1-3
5947: PPUSH
5948: CALL_OW 88
// if IsOK ( Joan ) then
5952: LD_EXP 13
5956: PPUSH
5957: CALL_OW 302
5961: IFFALSE 5977
// Say ( Simms , D3a-Sim-4 ) else
5963: LD_EXP 11
5967: PPUSH
5968: LD_STRING D3a-Sim-4
5970: PPUSH
5971: CALL_OW 88
5975: GO 5989
// Say ( Simms , D3a-Sim-4a ) ;
5977: LD_EXP 11
5981: PPUSH
5982: LD_STRING D3a-Sim-4a
5984: PPUSH
5985: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
5989: LD_VAR 0 3
5993: PUSH
5994: LD_INT 1
5996: ARRAY
5997: PPUSH
5998: LD_STRING D3a-Sci1-4
6000: PPUSH
6001: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6005: LD_EXP 11
6009: PPUSH
6010: LD_STRING D3a-Sim-5
6012: PPUSH
6013: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6017: LD_VAR 0 3
6021: PUSH
6022: LD_INT 1
6024: ARRAY
6025: PPUSH
6026: LD_STRING D3a-Sci1-5
6028: PPUSH
6029: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6033: LD_EXP 11
6037: PPUSH
6038: LD_STRING D3a-Sim-6
6040: PPUSH
6041: CALL_OW 88
// DialogueOff ;
6045: CALL_OW 7
// end ; end ; end ;
6049: PPOPN 3
6051: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6052: LD_EXP 29
6056: PUSH
6057: LD_INT 1
6059: EQUAL
6060: IFFALSE 6380
6062: GO 6064
6064: DISABLE
6065: LD_INT 0
6067: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6068: LD_EXP 18
6072: PPUSH
6073: LD_STRING D4-FSol1-1
6075: PPUSH
6076: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6080: LD_STRING M3
6082: PPUSH
6083: CALL_OW 337
// PrepareRussians ;
6087: CALL 2702 0 0
// rnd = Rand ( 1 , 100 ) ;
6091: LD_ADDR_VAR 0 1
6095: PUSH
6096: LD_INT 1
6098: PPUSH
6099: LD_INT 100
6101: PPUSH
6102: CALL_OW 12
6106: ST_TO_ADDR
// if difficulty = 1 then
6107: LD_OWVAR 67
6111: PUSH
6112: LD_INT 1
6114: EQUAL
6115: IFFALSE 6198
// begin if rnd > 0 and rnd < 51 then
6117: LD_VAR 0 1
6121: PUSH
6122: LD_INT 0
6124: GREATER
6125: PUSH
6126: LD_VAR 0 1
6130: PUSH
6131: LD_INT 51
6133: LESS
6134: AND
6135: IFFALSE 6144
// BuildRussianBase ( 2 ) ;
6137: LD_INT 2
6139: PPUSH
6140: CALL 10258 0 1
// if rnd > 50 and rnd < 81 then
6144: LD_VAR 0 1
6148: PUSH
6149: LD_INT 50
6151: GREATER
6152: PUSH
6153: LD_VAR 0 1
6157: PUSH
6158: LD_INT 81
6160: LESS
6161: AND
6162: IFFALSE 6171
// BuildRussianBase ( 1 ) ;
6164: LD_INT 1
6166: PPUSH
6167: CALL 10258 0 1
// if rnd > 80 and rnd < 101 then
6171: LD_VAR 0 1
6175: PUSH
6176: LD_INT 80
6178: GREATER
6179: PUSH
6180: LD_VAR 0 1
6184: PUSH
6185: LD_INT 101
6187: LESS
6188: AND
6189: IFFALSE 6198
// BuildRussianBase ( 3 ) ;
6191: LD_INT 3
6193: PPUSH
6194: CALL 10258 0 1
// end ; if difficulty = 2 then
6198: LD_OWVAR 67
6202: PUSH
6203: LD_INT 2
6205: EQUAL
6206: IFFALSE 6289
// begin if rnd > 0 and rnd < 61 then
6208: LD_VAR 0 1
6212: PUSH
6213: LD_INT 0
6215: GREATER
6216: PUSH
6217: LD_VAR 0 1
6221: PUSH
6222: LD_INT 61
6224: LESS
6225: AND
6226: IFFALSE 6235
// BuildRussianBase ( 2 ) ;
6228: LD_INT 2
6230: PPUSH
6231: CALL 10258 0 1
// if rnd > 60 and rnd < 81 then
6235: LD_VAR 0 1
6239: PUSH
6240: LD_INT 60
6242: GREATER
6243: PUSH
6244: LD_VAR 0 1
6248: PUSH
6249: LD_INT 81
6251: LESS
6252: AND
6253: IFFALSE 6262
// BuildRussianBase ( 1 ) ;
6255: LD_INT 1
6257: PPUSH
6258: CALL 10258 0 1
// if rnd > 80 and rnd < 101 then
6262: LD_VAR 0 1
6266: PUSH
6267: LD_INT 80
6269: GREATER
6270: PUSH
6271: LD_VAR 0 1
6275: PUSH
6276: LD_INT 101
6278: LESS
6279: AND
6280: IFFALSE 6289
// BuildRussianBase ( 3 ) ;
6282: LD_INT 3
6284: PPUSH
6285: CALL 10258 0 1
// end ; if difficulty = 3 then
6289: LD_OWVAR 67
6293: PUSH
6294: LD_INT 3
6296: EQUAL
6297: IFFALSE 6380
// begin if rnd > 0 and rnd < 71 then
6299: LD_VAR 0 1
6303: PUSH
6304: LD_INT 0
6306: GREATER
6307: PUSH
6308: LD_VAR 0 1
6312: PUSH
6313: LD_INT 71
6315: LESS
6316: AND
6317: IFFALSE 6326
// BuildRussianBase ( 3 ) ;
6319: LD_INT 3
6321: PPUSH
6322: CALL 10258 0 1
// if rnd > 70 and rnd < 81 then
6326: LD_VAR 0 1
6330: PUSH
6331: LD_INT 70
6333: GREATER
6334: PUSH
6335: LD_VAR 0 1
6339: PUSH
6340: LD_INT 81
6342: LESS
6343: AND
6344: IFFALSE 6353
// BuildRussianBase ( 2 ) ;
6346: LD_INT 2
6348: PPUSH
6349: CALL 10258 0 1
// if rnd > 80 and rnd < 101 then
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 80
6360: GREATER
6361: PUSH
6362: LD_VAR 0 1
6366: PUSH
6367: LD_INT 101
6369: LESS
6370: AND
6371: IFFALSE 6380
// BuildRussianBase ( 1 ) ;
6373: LD_INT 1
6375: PPUSH
6376: CALL 10258 0 1
// end ; end ;
6380: PPOPN 1
6382: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6383: LD_INT 54
6385: PPUSH
6386: LD_INT 1
6388: PPUSH
6389: CALL_OW 321
6393: PUSH
6394: LD_INT 2
6396: EQUAL
6397: PUSH
6398: LD_INT 21
6400: PPUSH
6401: LD_INT 1
6403: PPUSH
6404: CALL_OW 321
6408: PUSH
6409: LD_INT 2
6411: EQUAL
6412: OR
6413: PUSH
6414: LD_INT 22
6416: PPUSH
6417: LD_INT 1
6419: PPUSH
6420: CALL_OW 321
6424: PUSH
6425: LD_INT 2
6427: EQUAL
6428: OR
6429: IFFALSE 6741
6431: GO 6433
6433: DISABLE
6434: LD_INT 0
6436: PPUSH
6437: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6438: LD_EXP 17
6442: PPUSH
6443: CALL_OW 302
6447: IFFALSE 6461
// tmp := DeltaDoctor else
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_EXP 17
6458: ST_TO_ADDR
6459: GO 6471
// tmp := Denis ;
6461: LD_ADDR_VAR 0 2
6465: PUSH
6466: LD_EXP 12
6470: ST_TO_ADDR
// if tmp then
6471: LD_VAR 0 2
6475: IFFALSE 6569
// begin DialogueOn ;
6477: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6481: LD_EXP 1
6485: PPUSH
6486: LD_STRING D6-JMM-1
6488: PPUSH
6489: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6493: LD_VAR 0 2
6497: PPUSH
6498: LD_STRING D6-Sci1-1
6500: PPUSH
6501: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6505: LD_EXP 1
6509: PPUSH
6510: LD_STRING D6-JMM-2
6512: PPUSH
6513: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6517: LD_VAR 0 2
6521: PPUSH
6522: LD_STRING D6-Sci1-2
6524: PPUSH
6525: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6529: LD_EXP 1
6533: PPUSH
6534: LD_STRING D6-JMM-3
6536: PPUSH
6537: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_STRING D6-Sci1-3
6548: PPUSH
6549: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6553: LD_EXP 1
6557: PPUSH
6558: LD_STRING D6-JMM-4
6560: PPUSH
6561: CALL_OW 88
// DialogueOff ;
6565: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6569: LD_INT 1050
6571: PPUSH
6572: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6576: LD_EXP 49
6580: PUSH
6581: LD_INT 0
6583: EQUAL
6584: PUSH
6585: LD_EXP 14
6589: PPUSH
6590: CALL_OW 302
6594: AND
6595: IFFALSE 6653
// begin DialogueOn ;
6597: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6601: LD_EXP 27
6605: PPUSH
6606: LD_STRING D5-Ar1-1
6608: PPUSH
6609: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6613: LD_EXP 26
6617: PPUSH
6618: LD_STRING D5-Diet-1
6620: PPUSH
6621: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6625: LD_EXP 27
6629: PPUSH
6630: LD_STRING D5-Ar1-2
6632: PPUSH
6633: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6637: LD_EXP 26
6641: PPUSH
6642: LD_STRING D5-Diet-2
6644: PPUSH
6645: CALL_OW 88
// DialogueOff ;
6649: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6653: LD_INT 2100
6655: PUSH
6656: LD_INT 3150
6658: PUSH
6659: LD_INT 4200
6661: PUSH
6662: LD_INT 5250
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: PUSH
6671: LD_INT 1
6673: PPUSH
6674: LD_INT 4
6676: PPUSH
6677: CALL_OW 12
6681: ARRAY
6682: PPUSH
6683: CALL_OW 67
// if arabianTrait = 0 then
6687: LD_EXP 49
6691: PUSH
6692: LD_INT 0
6694: EQUAL
6695: IFFALSE 6741
// begin arabianTrait = 1 ;
6697: LD_ADDR_EXP 49
6701: PUSH
6702: LD_INT 1
6704: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6705: LD_INT 2
6707: PPUSH
6708: LD_INT 3
6710: PPUSH
6711: LD_INT 1
6713: PPUSH
6714: LD_INT 1
6716: PPUSH
6717: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6721: LD_INT 2
6723: PPUSH
6724: LD_INT 6
6726: PPUSH
6727: LD_INT 1
6729: PPUSH
6730: LD_INT 1
6732: PPUSH
6733: CALL_OW 80
// PrepareArabianTrait ;
6737: CALL 6744 0 0
// end ; end ;
6741: PPOPN 2
6743: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6744: LD_INT 0
6746: PPUSH
6747: PPUSH
6748: PPUSH
6749: PPUSH
6750: PPUSH
6751: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6752: LD_INT 22
6754: PUSH
6755: LD_INT 2
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PUSH
6762: LD_INT 25
6764: PUSH
6765: LD_INT 4
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: EMPTY
6773: LIST
6774: LIST
6775: PPUSH
6776: CALL_OW 69
6780: PPUSH
6781: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6785: LD_INT 22
6787: PUSH
6788: LD_INT 2
6790: PUSH
6791: EMPTY
6792: LIST
6793: LIST
6794: PUSH
6795: LD_INT 25
6797: PUSH
6798: LD_INT 3
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PPUSH
6809: CALL_OW 69
6813: PPUSH
6814: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6818: LD_EXP 26
6822: PPUSH
6823: LD_INT 8
6825: PPUSH
6826: CALL_OW 336
// wait ( 0 0$3 ) ;
6830: LD_INT 105
6832: PPUSH
6833: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6837: LD_INT 76
6839: PPUSH
6840: LD_INT 19
6842: PPUSH
6843: CALL_OW 84
// DialogueOn ;
6847: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6851: LD_INT 22
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 26
6863: PUSH
6864: LD_INT 1
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 2
6873: PUSH
6874: LD_INT 25
6876: PUSH
6877: LD_INT 1
6879: PUSH
6880: EMPTY
6881: LIST
6882: LIST
6883: PUSH
6884: LD_INT 25
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PUSH
6894: LD_INT 25
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 25
6906: PUSH
6907: LD_INT 4
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 25
6916: PUSH
6917: LD_INT 5
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: LIST
6930: LIST
6931: PUSH
6932: EMPTY
6933: LIST
6934: LIST
6935: LIST
6936: PPUSH
6937: CALL_OW 69
6941: PPUSH
6942: LD_STRING D8-Sol1-1
6944: PPUSH
6945: LD_STRING D8-Sol1-1
6947: PPUSH
6948: CALL 9589 0 3
// if IsOK ( DeltaDoctor ) then
6952: LD_EXP 17
6956: PPUSH
6957: CALL_OW 302
6961: IFFALSE 6977
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6963: LD_EXP 17
6967: PPUSH
6968: LD_STRING D8-Sci1-1
6970: PPUSH
6971: CALL_OW 88
6975: GO 7078
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6977: LD_INT 22
6979: PUSH
6980: LD_INT 1
6982: PUSH
6983: EMPTY
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 26
6989: PUSH
6990: LD_INT 1
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: LD_INT 25
7002: PUSH
7003: LD_INT 1
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: LD_INT 25
7012: PUSH
7013: LD_INT 2
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: LD_INT 25
7022: PUSH
7023: LD_INT 3
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 25
7032: PUSH
7033: LD_INT 4
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: LD_INT 25
7042: PUSH
7043: LD_INT 5
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: LIST
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: PPUSH
7063: CALL_OW 69
7067: PPUSH
7068: LD_STRING D8-Sol1-1
7070: PPUSH
7071: LD_STRING D8-Sol1-1
7073: PPUSH
7074: CALL 9589 0 3
// Say ( JMM , D8-JMM-1 ) ;
7078: LD_EXP 1
7082: PPUSH
7083: LD_STRING D8-JMM-1
7085: PPUSH
7086: CALL_OW 88
// DialogueOff ;
7090: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7094: LD_INT 2
7096: PPUSH
7097: LD_INT 2
7099: PPUSH
7100: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7104: LD_INT 1
7106: PPUSH
7107: LD_INT 2
7109: PPUSH
7110: LD_INT 2
7112: PPUSH
7113: LD_INT 1
7115: PPUSH
7116: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7120: LD_INT 3
7122: PPUSH
7123: LD_INT 2
7125: PPUSH
7126: LD_INT 1
7128: PPUSH
7129: LD_INT 1
7131: PPUSH
7132: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7136: LD_EXP 26
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7148: LD_STRING M4
7150: PPUSH
7151: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7155: LD_ADDR_VAR 0 5
7159: PUSH
7160: LD_INT 22
7162: PUSH
7163: LD_INT 2
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 21
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 2
7182: PUSH
7183: LD_INT 25
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 8
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 25
7205: PUSH
7206: LD_INT 15
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PPUSH
7224: CALL_OW 69
7228: PUSH
7229: LD_EXP 26
7233: PUSH
7234: EMPTY
7235: LIST
7236: DIFF
7237: ST_TO_ADDR
// if IsLive ( Khatam ) then
7238: LD_EXP 14
7242: PPUSH
7243: CALL_OW 300
7247: IFFALSE 7261
// DoNotAttack ( 2 , Khatam ) ;
7249: LD_INT 2
7251: PPUSH
7252: LD_EXP 14
7256: PPUSH
7257: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7261: LD_VAR 0 5
7265: PPUSH
7266: CALL_OW 122
// wait ( 0 0$1 ) ;
7270: LD_INT 35
7272: PPUSH
7273: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 77 , 10 ) ;
7277: LD_VAR 0 5
7281: PPUSH
7282: LD_INT 77
7284: PPUSH
7285: LD_INT 10
7287: PPUSH
7288: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7292: LD_VAR 0 5
7296: PPUSH
7297: LD_INT 82
7299: PPUSH
7300: LD_INT 5
7302: PPUSH
7303: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7307: LD_VAR 0 5
7311: PPUSH
7312: LD_INT 95
7314: PPUSH
7315: LD_INT 12
7317: PPUSH
7318: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7322: LD_VAR 0 5
7326: PPUSH
7327: LD_INT 102
7329: PPUSH
7330: LD_INT 11
7332: PPUSH
7333: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7337: LD_VAR 0 5
7341: PPUSH
7342: LD_INT 116
7344: PPUSH
7345: LD_INT 15
7347: PPUSH
7348: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7352: LD_VAR 0 5
7356: PPUSH
7357: LD_INT 140
7359: PPUSH
7360: LD_INT 25
7362: PPUSH
7363: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7367: LD_VAR 0 5
7371: PPUSH
7372: LD_INT 160
7374: PPUSH
7375: LD_INT 56
7377: PPUSH
7378: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7382: LD_VAR 0 5
7386: PPUSH
7387: LD_INT 189
7389: PPUSH
7390: LD_INT 79
7392: PPUSH
7393: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) ;
7397: LD_ADDR_VAR 0 6
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 2
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 21
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 2
7424: PUSH
7425: LD_INT 25
7427: PUSH
7428: LD_INT 2
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: LD_INT 25
7437: PUSH
7438: LD_INT 3
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: PUSH
7445: LD_INT 25
7447: PUSH
7448: LD_INT 4
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 25
7457: PUSH
7458: LD_INT 16
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: LIST
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: LIST
7476: PPUSH
7477: CALL_OW 69
7481: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7482: LD_ADDR_VAR 0 6
7486: PUSH
7487: LD_VAR 0 6
7491: PUSH
7492: LD_EXP 26
7496: ADD
7497: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7498: LD_INT 700
7500: PPUSH
7501: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7505: LD_VAR 0 6
7509: PPUSH
7510: CALL_OW 122
// wait ( 0 0$1 ) ;
7514: LD_INT 35
7516: PPUSH
7517: CALL_OW 67
// AddComMoveXY ( arCivilian , 77 , 10 ) ;
7521: LD_VAR 0 6
7525: PPUSH
7526: LD_INT 77
7528: PPUSH
7529: LD_INT 10
7531: PPUSH
7532: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7536: LD_VAR 0 6
7540: PPUSH
7541: LD_INT 82
7543: PPUSH
7544: LD_INT 5
7546: PPUSH
7547: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7551: LD_VAR 0 6
7555: PPUSH
7556: LD_INT 95
7558: PPUSH
7559: LD_INT 12
7561: PPUSH
7562: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7566: LD_VAR 0 6
7570: PPUSH
7571: LD_INT 102
7573: PPUSH
7574: LD_INT 11
7576: PPUSH
7577: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7581: LD_VAR 0 6
7585: PPUSH
7586: LD_INT 116
7588: PPUSH
7589: LD_INT 15
7591: PPUSH
7592: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7596: LD_VAR 0 6
7600: PPUSH
7601: LD_INT 140
7603: PPUSH
7604: LD_INT 25
7606: PPUSH
7607: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7611: LD_VAR 0 6
7615: PPUSH
7616: LD_INT 160
7618: PPUSH
7619: LD_INT 56
7621: PPUSH
7622: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7626: LD_VAR 0 6
7630: PPUSH
7631: LD_INT 189
7633: PPUSH
7634: LD_INT 79
7636: PPUSH
7637: CALL_OW 171
// arabianAttackersAI = 1 ;
7641: LD_ADDR_EXP 46
7645: PUSH
7646: LD_INT 1
7648: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7649: LD_INT 350
7651: PPUSH
7652: CALL_OW 67
// if IsOk ( Gary ) then
7656: LD_EXP 10
7660: PPUSH
7661: CALL_OW 302
7665: IFFALSE 7679
// Say ( Gary , D8a-Gary-1 ) ;
7667: LD_EXP 10
7671: PPUSH
7672: LD_STRING D8a-Gary-1
7674: PPUSH
7675: CALL_OW 88
// wait ( 0 0$5 ) ;
7679: LD_INT 175
7681: PPUSH
7682: CALL_OW 67
// if IsOK ( Khatam ) then
7686: LD_EXP 14
7690: PPUSH
7691: CALL_OW 302
7695: IFFALSE 8231
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7697: LD_ADDR_VAR 0 3
7701: PUSH
7702: LD_INT 22
7704: PUSH
7705: LD_INT 1
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 2
7714: PUSH
7715: LD_INT 25
7717: PUSH
7718: LD_INT 1
7720: PUSH
7721: EMPTY
7722: LIST
7723: LIST
7724: PUSH
7725: LD_INT 25
7727: PUSH
7728: LD_INT 2
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: PUSH
7735: LD_INT 25
7737: PUSH
7738: LD_INT 3
7740: PUSH
7741: EMPTY
7742: LIST
7743: LIST
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 4
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 5
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 8
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: LIST
7782: LIST
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: PPUSH
7788: CALL_OW 69
7792: PUSH
7793: LD_EXP 1
7797: PUSH
7798: LD_EXP 2
7802: PUSH
7803: LD_EXP 3
7807: PUSH
7808: LD_EXP 4
7812: PUSH
7813: LD_EXP 5
7817: PUSH
7818: LD_EXP 6
7822: PUSH
7823: LD_EXP 7
7827: PUSH
7828: LD_EXP 8
7832: PUSH
7833: LD_EXP 9
7837: PUSH
7838: LD_EXP 10
7842: PUSH
7843: LD_EXP 11
7847: PUSH
7848: LD_EXP 12
7852: PUSH
7853: LD_EXP 13
7857: PUSH
7858: LD_EXP 14
7862: PUSH
7863: LD_EXP 15
7867: PUSH
7868: LD_EXP 16
7872: PUSH
7873: LD_EXP 17
7877: PUSH
7878: LD_EXP 19
7882: PUSH
7883: LD_EXP 24
7887: PUSH
7888: EMPTY
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: LIST
7908: DIFF
7909: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7910: LD_EXP 14
7914: PPUSH
7915: LD_INT 8
7917: PPUSH
7918: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7922: LD_EXP 14
7926: PPUSH
7927: CALL_OW 122
// wait ( 0 0$1 ) ;
7931: LD_INT 35
7933: PPUSH
7934: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7938: LD_EXP 14
7942: PPUSH
7943: CALL_OW 121
// wait ( 0 0$1 ) ;
7947: LD_INT 35
7949: PPUSH
7950: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7954: LD_EXP 14
7958: PPUSH
7959: LD_INT 7
7961: PPUSH
7962: CALL_OW 113
// if not tmp then
7966: LD_VAR 0 3
7970: NOT
7971: IFFALSE 7975
// exit ;
7973: GO 8231
// DialogueOn ;
7975: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 1
7986: ARRAY
7987: PPUSH
7988: CALL_OW 258
7992: PUSH
7993: LD_INT 1
7995: EQUAL
7996: IFFALSE 8016
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
7998: LD_VAR 0 3
8002: PUSH
8003: LD_INT 1
8005: ARRAY
8006: PPUSH
8007: LD_STRING D8b-Sol1-1
8009: PPUSH
8010: CALL_OW 88
8014: GO 8032
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8016: LD_VAR 0 3
8020: PUSH
8021: LD_INT 1
8023: ARRAY
8024: PPUSH
8025: LD_STRING D8b-FSol1-1
8027: PPUSH
8028: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8032: LD_EXP 14
8036: PPUSH
8037: LD_STRING D8b-Khat-1
8039: PPUSH
8040: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 1
8051: ARRAY
8052: PPUSH
8053: CALL_OW 258
8057: PUSH
8058: LD_INT 1
8060: EQUAL
8061: IFFALSE 8081
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8063: LD_VAR 0 3
8067: PUSH
8068: LD_INT 1
8070: ARRAY
8071: PPUSH
8072: LD_STRING D8b-Sol1-2
8074: PPUSH
8075: CALL_OW 88
8079: GO 8097
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8081: LD_VAR 0 3
8085: PUSH
8086: LD_INT 1
8088: ARRAY
8089: PPUSH
8090: LD_STRING D8b-FSol1-2
8092: PPUSH
8093: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8097: LD_EXP 14
8101: PPUSH
8102: LD_STRING D8b-Khat-2
8104: PPUSH
8105: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_INT 1
8116: ARRAY
8117: PPUSH
8118: CALL_OW 258
8122: PUSH
8123: LD_INT 1
8125: EQUAL
8126: IFFALSE 8146
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8128: LD_VAR 0 3
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: PPUSH
8137: LD_STRING D8b-Sol1-3
8139: PPUSH
8140: CALL_OW 88
8144: GO 8162
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8146: LD_VAR 0 3
8150: PUSH
8151: LD_INT 1
8153: ARRAY
8154: PPUSH
8155: LD_STRING D8b-FSol1-3
8157: PPUSH
8158: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8162: LD_EXP 14
8166: PPUSH
8167: LD_STRING D8b-Khat-3
8169: PPUSH
8170: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8174: LD_VAR 0 3
8178: PUSH
8179: LD_INT 1
8181: ARRAY
8182: PPUSH
8183: CALL_OW 258
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: IFFALSE 8211
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 1
8200: ARRAY
8201: PPUSH
8202: LD_STRING D8b-Sol1-4
8204: PPUSH
8205: CALL_OW 88
8209: GO 8227
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 1
8218: ARRAY
8219: PPUSH
8220: LD_STRING D8b-FSol1-4
8222: PPUSH
8223: CALL_OW 88
// DialogueOff ;
8227: CALL_OW 7
// end ; end ;
8231: LD_VAR 0 1
8235: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8236: LD_INT 7
8238: PPUSH
8239: LD_INT 22
8241: PUSH
8242: LD_INT 2
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PPUSH
8249: CALL_OW 70
8253: PUSH
8254: LD_INT 0
8256: GREATER
8257: PUSH
8258: LD_EXP 14
8262: PPUSH
8263: LD_INT 7
8265: PPUSH
8266: CALL_OW 308
8270: OR
8271: IFFALSE 8478
8273: GO 8275
8275: DISABLE
8276: LD_INT 0
8278: PPUSH
// begin enable ;
8279: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8280: LD_ADDR_VAR 0 1
8284: PUSH
8285: LD_INT 7
8287: PPUSH
8288: LD_INT 22
8290: PUSH
8291: LD_INT 2
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PPUSH
8298: CALL_OW 70
8302: PUSH
8303: FOR_IN
8304: IFFALSE 8445
// begin if GetClass ( i ) = 4 then
8306: LD_VAR 0 1
8310: PPUSH
8311: CALL_OW 257
8315: PUSH
8316: LD_INT 4
8318: EQUAL
8319: IFFALSE 8331
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8321: LD_INT 1
8323: PPUSH
8324: LD_STRING 10_ScientistsEscape_1
8326: PPUSH
8327: CALL_OW 39
// if i = Dietrich then
8331: LD_VAR 0 1
8335: PUSH
8336: LD_EXP 26
8340: EQUAL
8341: IFFALSE 8351
// GensherStatus = 1 ;
8343: LD_ADDR_EXP 51
8347: PUSH
8348: LD_INT 1
8350: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8351: LD_VAR 0 1
8355: PPUSH
8356: CALL_OW 257
8360: PUSH
8361: LD_INT 1
8363: EQUAL
8364: PUSH
8365: LD_VAR 0 1
8369: PPUSH
8370: CALL_OW 257
8374: PUSH
8375: LD_INT 2
8377: EQUAL
8378: OR
8379: PUSH
8380: LD_VAR 0 1
8384: PPUSH
8385: CALL_OW 257
8389: PUSH
8390: LD_INT 3
8392: EQUAL
8393: OR
8394: PUSH
8395: LD_VAR 0 1
8399: PPUSH
8400: CALL_OW 257
8404: PUSH
8405: LD_INT 4
8407: EQUAL
8408: OR
8409: PUSH
8410: LD_VAR 0 1
8414: PPUSH
8415: CALL_OW 257
8419: PUSH
8420: LD_INT 8
8422: EQUAL
8423: OR
8424: IFFALSE 8434
// arabianEscape = 1 ;
8426: LD_ADDR_EXP 47
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// RemoveUnit ( i ) ;
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 64
// end ;
8443: GO 8303
8445: POP
8446: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8447: LD_EXP 14
8451: PPUSH
8452: LD_INT 7
8454: PPUSH
8455: CALL_OW 308
8459: IFFALSE 8478
// begin KhatamStatus = 1 ;
8461: LD_ADDR_EXP 52
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8469: LD_EXP 14
8473: PPUSH
8474: CALL_OW 64
// end ; end ;
8478: PPOPN 1
8480: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8481: LD_INT 22
8483: PUSH
8484: LD_INT 2
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 21
8493: PUSH
8494: LD_INT 1
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: PPUSH
8505: CALL_OW 69
8509: PUSH
8510: LD_INT 0
8512: EQUAL
8513: PUSH
8514: LD_INT 22
8516: PUSH
8517: LD_INT 4
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PUSH
8524: LD_INT 21
8526: PUSH
8527: LD_INT 1
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PUSH
8534: EMPTY
8535: LIST
8536: LIST
8537: PPUSH
8538: CALL_OW 69
8542: PUSH
8543: LD_INT 0
8545: EQUAL
8546: AND
8547: IFFALSE 8560
8549: GO 8551
8551: DISABLE
// arabianDefeated = 1 ;
8552: LD_ADDR_EXP 48
8556: PUSH
8557: LD_INT 1
8559: ST_TO_ADDR
8560: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8561: LD_INT 54
8563: PPUSH
8564: LD_INT 1
8566: PPUSH
8567: CALL_OW 321
8571: PUSH
8572: LD_INT 2
8574: EQUAL
8575: PUSH
8576: LD_INT 55
8578: PPUSH
8579: LD_INT 1
8581: PPUSH
8582: CALL_OW 321
8586: PUSH
8587: LD_INT 2
8589: EQUAL
8590: AND
8591: PUSH
8592: LD_INT 21
8594: PPUSH
8595: LD_INT 1
8597: PPUSH
8598: CALL_OW 321
8602: PUSH
8603: LD_INT 2
8605: EQUAL
8606: AND
8607: PUSH
8608: LD_INT 22
8610: PPUSH
8611: LD_INT 1
8613: PPUSH
8614: CALL_OW 321
8618: PUSH
8619: LD_INT 2
8621: EQUAL
8622: AND
8623: PUSH
8624: LD_INT 12
8626: PPUSH
8627: LD_INT 1
8629: PPUSH
8630: CALL_OW 321
8634: PUSH
8635: LD_INT 2
8637: EQUAL
8638: AND
8639: PUSH
8640: LD_INT 32
8642: PPUSH
8643: LD_INT 1
8645: PPUSH
8646: CALL_OW 321
8650: PUSH
8651: LD_INT 2
8653: EQUAL
8654: AND
8655: PUSH
8656: LD_EXP 59
8660: PUSH
8661: LD_INT 0
8663: EQUAL
8664: AND
8665: PUSH
8666: LD_EXP 49
8670: PUSH
8671: LD_INT 0
8673: EQUAL
8674: AND
8675: PUSH
8676: LD_OWVAR 1
8680: PUSH
8681: LD_INT 31500
8683: GREATEREQUAL
8684: AND
8685: IFFALSE 8702
8687: GO 8689
8689: DISABLE
// begin arabianTrait = 1 ;
8690: LD_ADDR_EXP 49
8694: PUSH
8695: LD_INT 1
8697: ST_TO_ADDR
// PrepareArabianTrait ;
8698: CALL 6744 0 0
// end ;
8702: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8703: LD_EXP 29
8707: PUSH
8708: LD_STRING 02_mikhailStatus_1
8710: PPUSH
8711: LD_INT 0
8713: PPUSH
8714: CALL_OW 30
8718: PUSH
8719: LD_INT 1
8721: EQUAL
8722: AND
8723: PUSH
8724: LD_INT 22
8726: PUSH
8727: LD_INT 5
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: PUSH
8739: LD_INT 0
8741: EQUAL
8742: AND
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_INT 2
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PPUSH
8754: CALL_OW 69
8758: PUSH
8759: LD_INT 0
8761: EQUAL
8762: PUSH
8763: LD_EXP 49
8767: PUSH
8768: LD_INT 0
8770: EQUAL
8771: OR
8772: AND
8773: IFFALSE 8782
8775: GO 8777
8777: DISABLE
// PrepareCornell ;
8778: CALL 2544 0 0
8782: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8783: LD_INT 22
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PPUSH
8798: LD_EXP 19
8802: PPUSH
8803: CALL_OW 74
8807: PPUSH
8808: LD_EXP 19
8812: PPUSH
8813: CALL_OW 296
8817: PUSH
8818: LD_INT 9
8820: LESS
8821: IFFALSE 9042
8823: GO 8825
8825: DISABLE
// begin InGameOn ;
8826: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8830: LD_EXP 19
8834: PPUSH
8835: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8839: LD_EXP 19
8843: PPUSH
8844: LD_STRING D7-Corn-1
8846: PPUSH
8847: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8851: LD_INT 22
8853: PUSH
8854: LD_INT 1
8856: PUSH
8857: EMPTY
8858: LIST
8859: LIST
8860: PUSH
8861: LD_INT 2
8863: PUSH
8864: LD_INT 25
8866: PUSH
8867: LD_INT 1
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 25
8876: PUSH
8877: LD_INT 2
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 25
8886: PUSH
8887: LD_INT 3
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 25
8896: PUSH
8897: LD_INT 4
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: PUSH
8904: LD_INT 25
8906: PUSH
8907: LD_INT 5
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PPUSH
8926: CALL_OW 69
8930: PPUSH
8931: LD_STRING D7-Sol1-1
8933: PPUSH
8934: LD_STRING D7-FSol1-1
8936: PPUSH
8937: CALL 9589 0 3
// CenterNowOnUnits ( Cornell ) ;
8941: LD_EXP 19
8945: PPUSH
8946: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8950: LD_EXP 19
8954: PPUSH
8955: LD_STRING D7-Corn-2
8957: PPUSH
8958: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8962: LD_EXP 1
8966: PPUSH
8967: LD_STRING D7-JMM-2
8969: PPUSH
8970: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8974: LD_EXP 19
8978: PPUSH
8979: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8983: LD_EXP 19
8987: PPUSH
8988: LD_STRING D7-Corn-3
8990: PPUSH
8991: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8995: LD_EXP 19
8999: PPUSH
9000: LD_INT 250
9002: PPUSH
9003: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9007: LD_EXP 19
9011: PPUSH
9012: LD_INT 1
9014: PPUSH
9015: CALL_OW 235
// wait ( 0 0$1 ) ;
9019: LD_INT 35
9021: PPUSH
9022: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9026: LD_EXP 1
9030: PPUSH
9031: LD_STRING D7-JMM-3
9033: PPUSH
9034: CALL_OW 88
// InGameOff ;
9038: CALL_OW 9
// end ;
9042: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9043: LD_EXP 19
9047: PPUSH
9048: CALL_OW 255
9052: PUSH
9053: LD_INT 1
9055: EQUAL
9056: PUSH
9057: LD_EXP 19
9061: PPUSH
9062: CALL_OW 256
9066: PUSH
9067: LD_INT 251
9069: GREATER
9070: AND
9071: IFFALSE 9264
9073: GO 9075
9075: DISABLE
// begin DialogueOn ;
9076: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9080: LD_EXP 1
9084: PPUSH
9085: LD_STRING D7a-JMM-1
9087: PPUSH
9088: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9092: LD_EXP 19
9096: PPUSH
9097: LD_STRING D7a-Corn-1
9099: PPUSH
9100: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9104: LD_EXP 1
9108: PPUSH
9109: LD_STRING D7a-JMM-2
9111: PPUSH
9112: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9116: LD_EXP 19
9120: PPUSH
9121: LD_STRING D7a-Corn-2
9123: PPUSH
9124: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9128: LD_EXP 1
9132: PPUSH
9133: LD_STRING D7a-JMM-3
9135: PPUSH
9136: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9140: LD_EXP 19
9144: PPUSH
9145: LD_STRING D7a-Corn-3
9147: PPUSH
9148: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9152: LD_EXP 1
9156: PPUSH
9157: LD_STRING D7a-JMM-4
9159: PPUSH
9160: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9164: LD_EXP 19
9168: PPUSH
9169: LD_STRING D7a-Corn-4
9171: PPUSH
9172: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9176: LD_EXP 1
9180: PPUSH
9181: LD_STRING D7a-JMM-5
9183: PPUSH
9184: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9188: LD_EXP 19
9192: PPUSH
9193: LD_STRING D7a-Corn-5
9195: PPUSH
9196: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9200: LD_EXP 1
9204: PPUSH
9205: LD_STRING D7a-JMM-6
9207: PPUSH
9208: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9212: LD_EXP 19
9216: PPUSH
9217: LD_STRING D7a-Corn-6
9219: PPUSH
9220: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9224: LD_EXP 1
9228: PPUSH
9229: LD_STRING D7a-JMM-7
9231: PPUSH
9232: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9236: LD_EXP 19
9240: PPUSH
9241: LD_STRING D7a-Corn-7
9243: PPUSH
9244: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9248: LD_EXP 1
9252: PPUSH
9253: LD_STRING D7a-JMM-8
9255: PPUSH
9256: CALL_OW 88
// DialogueOff ;
9260: CALL_OW 7
// end ;
9264: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9265: LD_EXP 58
9269: PUSH
9270: LD_EXP 1
9274: PPUSH
9275: CALL_OW 302
9279: PUSH
9280: LD_EXP 5
9284: PPUSH
9285: CALL_OW 302
9289: OR
9290: AND
9291: IFFALSE 9381
9293: GO 9295
9295: DISABLE
// begin Wait ( 0 0$2 ) ;
9296: LD_INT 70
9298: PPUSH
9299: CALL_OW 67
// DialogueOn ;
9303: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9307: LD_EXP 58
9311: PUSH
9312: LD_INT 1
9314: ARRAY
9315: PPUSH
9316: LD_EXP 58
9320: PUSH
9321: LD_INT 2
9323: ARRAY
9324: PPUSH
9325: CALL_OW 86
// if IsOk ( Cyrus ) then
9329: LD_EXP 5
9333: PPUSH
9334: CALL_OW 302
9338: IFFALSE 9354
// Say ( Cyrus , D10-Cyrus-1 ) else
9340: LD_EXP 5
9344: PPUSH
9345: LD_STRING D10-Cyrus-1
9347: PPUSH
9348: CALL_OW 88
9352: GO 9377
// if IsOk ( JMM ) then
9354: LD_EXP 1
9358: PPUSH
9359: CALL_OW 302
9363: IFFALSE 9377
// Say ( JMM , D10-JMM-1 ) ;
9365: LD_EXP 1
9369: PPUSH
9370: LD_STRING D10-JMM-1
9372: PPUSH
9373: CALL_OW 88
// DialogueOff ;
9377: CALL_OW 7
// end ;
9381: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9382: LD_INT 12
9384: PPUSH
9385: LD_INT 1
9387: PPUSH
9388: CALL_OW 321
9392: PUSH
9393: LD_INT 2
9395: EQUAL
9396: IFFALSE 9408
9398: GO 9400
9400: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9401: LD_STRING M2b
9403: PPUSH
9404: CALL_OW 337
9408: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9409: LD_INT 32
9411: PPUSH
9412: LD_INT 1
9414: PPUSH
9415: CALL_OW 321
9419: PUSH
9420: LD_INT 2
9422: EQUAL
9423: IFFALSE 9435
9425: GO 9427
9427: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9428: LD_STRING M2c
9430: PPUSH
9431: CALL_OW 337
9435: END
// every 0 0$1 trigger arabianDefeated = 1 do
9436: LD_EXP 48
9440: PUSH
9441: LD_INT 1
9443: EQUAL
9444: IFFALSE 9456
9446: GO 9448
9448: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9449: LD_STRING M4a
9451: PPUSH
9452: CALL_OW 337
9456: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9457: LD_INT 54
9459: PPUSH
9460: LD_INT 1
9462: PPUSH
9463: CALL_OW 321
9467: PUSH
9468: LD_INT 2
9470: EQUAL
9471: PUSH
9472: LD_INT 55
9474: PPUSH
9475: LD_INT 1
9477: PPUSH
9478: CALL_OW 321
9482: PUSH
9483: LD_INT 2
9485: EQUAL
9486: AND
9487: PUSH
9488: LD_INT 21
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: CALL_OW 321
9498: PUSH
9499: LD_INT 2
9501: EQUAL
9502: AND
9503: PUSH
9504: LD_INT 22
9506: PPUSH
9507: LD_INT 1
9509: PPUSH
9510: CALL_OW 321
9514: PUSH
9515: LD_INT 2
9517: EQUAL
9518: AND
9519: IFFALSE 9531
9521: GO 9523
9523: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9524: LD_STRING M2a
9526: PPUSH
9527: CALL_OW 337
9531: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9532: LD_INT 0
9534: PPUSH
9535: PPUSH
// if exist_mode then
9536: LD_VAR 0 2
9540: IFFALSE 9559
// unit := CreateCharacter ( ident ) else
9542: LD_ADDR_VAR 0 4
9546: PUSH
9547: LD_VAR 0 1
9551: PPUSH
9552: CALL_OW 34
9556: ST_TO_ADDR
9557: GO 9574
// unit := NewCharacter ( ident ) ;
9559: LD_ADDR_VAR 0 4
9563: PUSH
9564: LD_VAR 0 1
9568: PPUSH
9569: CALL_OW 25
9573: ST_TO_ADDR
// result := unit ;
9574: LD_ADDR_VAR 0 3
9578: PUSH
9579: LD_VAR 0 4
9583: ST_TO_ADDR
// end ;
9584: LD_VAR 0 3
9588: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9589: LD_INT 0
9591: PPUSH
9592: PPUSH
9593: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9594: LD_ADDR_VAR 0 1
9598: PUSH
9599: LD_VAR 0 1
9603: PUSH
9604: LD_EXP 1
9608: PUSH
9609: LD_EXP 2
9613: PUSH
9614: LD_EXP 3
9618: PUSH
9619: LD_EXP 4
9623: PUSH
9624: LD_EXP 5
9628: PUSH
9629: LD_EXP 6
9633: PUSH
9634: LD_EXP 7
9638: PUSH
9639: LD_EXP 8
9643: PUSH
9644: LD_EXP 9
9648: PUSH
9649: LD_EXP 10
9653: PUSH
9654: LD_EXP 11
9658: PUSH
9659: LD_EXP 12
9663: PUSH
9664: LD_EXP 13
9668: PUSH
9669: LD_EXP 14
9673: PUSH
9674: LD_EXP 15
9678: PUSH
9679: LD_EXP 16
9683: PUSH
9684: LD_EXP 17
9688: PUSH
9689: LD_EXP 18
9693: PUSH
9694: LD_EXP 19
9698: PUSH
9699: LD_EXP 24
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: DIFF
9726: ST_TO_ADDR
// if not characters then
9727: LD_VAR 0 1
9731: NOT
9732: IFFALSE 9736
// exit ;
9734: GO 9882
// rnd = rand ( 1 , characters ) ;
9736: LD_ADDR_VAR 0 6
9740: PUSH
9741: LD_INT 1
9743: PPUSH
9744: LD_VAR 0 1
9748: PPUSH
9749: CALL_OW 12
9753: ST_TO_ADDR
// for i = 1 to characters do
9754: LD_ADDR_VAR 0 5
9758: PUSH
9759: DOUBLE
9760: LD_INT 1
9762: DEC
9763: ST_TO_ADDR
9764: LD_VAR 0 1
9768: PUSH
9769: FOR_TO
9770: IFFALSE 9880
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9772: LD_VAR 0 5
9776: PUSH
9777: LD_VAR 0 6
9781: EQUAL
9782: PUSH
9783: LD_VAR 0 1
9787: PUSH
9788: LD_VAR 0 5
9792: ARRAY
9793: PPUSH
9794: CALL_OW 258
9798: PUSH
9799: LD_INT 1
9801: EQUAL
9802: AND
9803: IFFALSE 9825
// Say ( characters [ i ] , dialogMID ) ;
9805: LD_VAR 0 1
9809: PUSH
9810: LD_VAR 0 5
9814: ARRAY
9815: PPUSH
9816: LD_VAR 0 2
9820: PPUSH
9821: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9825: LD_VAR 0 5
9829: PUSH
9830: LD_VAR 0 6
9834: EQUAL
9835: PUSH
9836: LD_VAR 0 1
9840: PUSH
9841: LD_VAR 0 5
9845: ARRAY
9846: PPUSH
9847: CALL_OW 258
9851: PUSH
9852: LD_INT 2
9854: EQUAL
9855: AND
9856: IFFALSE 9878
// Say ( characters [ i ] , dialogFID ) ;
9858: LD_VAR 0 1
9862: PUSH
9863: LD_VAR 0 5
9867: ARRAY
9868: PPUSH
9869: LD_VAR 0 3
9873: PPUSH
9874: CALL_OW 88
// end ;
9878: GO 9769
9880: POP
9881: POP
// end ;
9882: LD_VAR 0 4
9886: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9887: LD_INT 0
9889: PPUSH
9890: PPUSH
// for i in charactersList do
9891: LD_ADDR_VAR 0 4
9895: PUSH
9896: LD_VAR 0 1
9900: PUSH
9901: FOR_IN
9902: IFFALSE 9931
// begin if IsOk ( i ) then
9904: LD_VAR 0 4
9908: PPUSH
9909: CALL_OW 302
9913: IFFALSE 9929
// SaveCharacters ( i , ident ) ;
9915: LD_VAR 0 4
9919: PPUSH
9920: LD_VAR 0 2
9924: PPUSH
9925: CALL_OW 38
// end ;
9929: GO 9901
9931: POP
9932: POP
// end ;
9933: LD_VAR 0 3
9937: RET
// export function PrepareDifficulty ; begin
9938: LD_INT 0
9940: PPUSH
// if difficulty = 1 then
9941: LD_OWVAR 67
9945: PUSH
9946: LD_INT 1
9948: EQUAL
9949: IFFALSE 9993
// begin RuSolMinLevel = 4 ;
9951: LD_ADDR_EXP 36
9955: PUSH
9956: LD_INT 4
9958: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9959: LD_ADDR_EXP 37
9963: PUSH
9964: LD_INT 7
9966: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9967: LD_INT 51
9969: PPUSH
9970: LD_INT 6
9972: PPUSH
9973: LD_INT 2
9975: PPUSH
9976: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9980: LD_INT 51
9982: PPUSH
9983: LD_INT 5
9985: PPUSH
9986: LD_INT 2
9988: PPUSH
9989: CALL_OW 322
// end ; if difficulty = 2 then
9993: LD_OWVAR 67
9997: PUSH
9998: LD_INT 2
10000: EQUAL
10001: IFFALSE 10097
// begin RuSolMinLevel = 5 ;
10003: LD_ADDR_EXP 36
10007: PUSH
10008: LD_INT 5
10010: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10011: LD_ADDR_EXP 37
10015: PUSH
10016: LD_INT 7
10018: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10019: LD_INT 51
10021: PPUSH
10022: LD_INT 6
10024: PPUSH
10025: LD_INT 2
10027: PPUSH
10028: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10032: LD_INT 57
10034: PPUSH
10035: LD_INT 6
10037: PPUSH
10038: LD_INT 2
10040: PPUSH
10041: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10045: LD_INT 63
10047: PPUSH
10048: LD_INT 6
10050: PPUSH
10051: LD_INT 2
10053: PPUSH
10054: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10058: LD_INT 51
10060: PPUSH
10061: LD_INT 5
10063: PPUSH
10064: LD_INT 2
10066: PPUSH
10067: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10071: LD_INT 5
10073: PPUSH
10074: LD_INT 2
10076: PPUSH
10077: LD_INT 2
10079: PPUSH
10080: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10084: LD_INT 5
10086: PPUSH
10087: LD_INT 5
10089: PPUSH
10090: LD_INT 2
10092: PPUSH
10093: CALL_OW 322
// end ; if difficulty = 3 then
10097: LD_OWVAR 67
10101: PUSH
10102: LD_INT 3
10104: EQUAL
10105: IFFALSE 10253
// begin RuSolMinLevel = 6 ;
10107: LD_ADDR_EXP 36
10111: PUSH
10112: LD_INT 6
10114: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10115: LD_ADDR_EXP 37
10119: PUSH
10120: LD_INT 8
10122: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10123: LD_INT 51
10125: PPUSH
10126: LD_INT 6
10128: PPUSH
10129: LD_INT 2
10131: PPUSH
10132: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10136: LD_INT 57
10138: PPUSH
10139: LD_INT 6
10141: PPUSH
10142: LD_INT 2
10144: PPUSH
10145: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10149: LD_INT 52
10151: PPUSH
10152: LD_INT 6
10154: PPUSH
10155: LD_INT 2
10157: PPUSH
10158: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10162: LD_INT 58
10164: PPUSH
10165: LD_INT 6
10167: PPUSH
10168: LD_INT 2
10170: PPUSH
10171: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10175: LD_INT 63
10177: PPUSH
10178: LD_INT 6
10180: PPUSH
10181: LD_INT 2
10183: PPUSH
10184: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10188: LD_INT 64
10190: PPUSH
10191: LD_INT 6
10193: PPUSH
10194: LD_INT 2
10196: PPUSH
10197: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10201: LD_INT 51
10203: PPUSH
10204: LD_INT 5
10206: PPUSH
10207: LD_INT 2
10209: PPUSH
10210: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10214: LD_INT 52
10216: PPUSH
10217: LD_INT 5
10219: PPUSH
10220: LD_INT 2
10222: PPUSH
10223: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10227: LD_INT 66
10229: PPUSH
10230: LD_INT 2
10232: PPUSH
10233: LD_INT 2
10235: PPUSH
10236: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10240: LD_INT 66
10242: PPUSH
10243: LD_INT 5
10245: PPUSH
10246: LD_INT 2
10248: PPUSH
10249: CALL_OW 322
// end ; end ;
10253: LD_VAR 0 1
10257: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10258: LD_INT 0
10260: PPUSH
10261: PPUSH
10262: PPUSH
10263: PPUSH
10264: PPUSH
// case position of 1 :
10265: LD_VAR 0 1
10269: PUSH
10270: LD_INT 1
10272: DOUBLE
10273: EQUAL
10274: IFTRUE 10278
10276: GO 10289
10278: POP
// area := westConv ; 2 :
10279: LD_ADDR_VAR 0 6
10283: PUSH
10284: LD_INT 20
10286: ST_TO_ADDR
10287: GO 10328
10289: LD_INT 2
10291: DOUBLE
10292: EQUAL
10293: IFTRUE 10297
10295: GO 10308
10297: POP
// area := midConv ; 3 :
10298: LD_ADDR_VAR 0 6
10302: PUSH
10303: LD_INT 21
10305: ST_TO_ADDR
10306: GO 10328
10308: LD_INT 3
10310: DOUBLE
10311: EQUAL
10312: IFTRUE 10316
10314: GO 10327
10316: POP
// area := eastConv ; end ;
10317: LD_ADDR_VAR 0 6
10321: PUSH
10322: LD_INT 22
10324: ST_TO_ADDR
10325: GO 10328
10327: POP
// area := AreaToList ( area , 0 ) ;
10328: LD_ADDR_VAR 0 6
10332: PUSH
10333: LD_VAR 0 6
10337: PPUSH
10338: LD_INT 0
10340: PPUSH
10341: CALL_OW 517
10345: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: DOUBLE
10352: LD_INT 1
10354: DEC
10355: ST_TO_ADDR
10356: LD_VAR 0 6
10360: PUSH
10361: LD_INT 1
10363: ARRAY
10364: PUSH
10365: FOR_TO
10366: IFFALSE 10447
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10368: LD_VAR 0 6
10372: PUSH
10373: LD_INT 1
10375: ARRAY
10376: PUSH
10377: LD_VAR 0 3
10381: ARRAY
10382: PPUSH
10383: LD_VAR 0 6
10387: PUSH
10388: LD_INT 2
10390: ARRAY
10391: PUSH
10392: LD_VAR 0 3
10396: ARRAY
10397: PPUSH
10398: LD_INT 1
10400: PPUSH
10401: LD_INT 1
10403: PPUSH
10404: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10408: LD_VAR 0 6
10412: PUSH
10413: LD_INT 1
10415: ARRAY
10416: PUSH
10417: LD_VAR 0 3
10421: ARRAY
10422: PPUSH
10423: LD_VAR 0 6
10427: PUSH
10428: LD_INT 2
10430: ARRAY
10431: PUSH
10432: LD_VAR 0 3
10436: ARRAY
10437: PPUSH
10438: LD_INT 1
10440: PPUSH
10441: CALL_OW 331
// end ;
10445: GO 10365
10447: POP
10448: POP
// ruPossition = position ;
10449: LD_ADDR_EXP 41
10453: PUSH
10454: LD_VAR 0 1
10458: ST_TO_ADDR
// if position = 1 then
10459: LD_VAR 0 1
10463: PUSH
10464: LD_INT 1
10466: EQUAL
10467: IFFALSE 11215
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10469: LD_ADDR_VAR 0 4
10473: PUSH
10474: LD_INT 22
10476: PUSH
10477: LD_INT 3
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: EMPTY
10495: LIST
10496: LIST
10497: PPUSH
10498: CALL_OW 69
10502: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10503: LD_ADDR_VAR 0 5
10507: PUSH
10508: LD_INT 0
10510: PUSH
10511: LD_INT 49
10513: PUSH
10514: LD_INT 74
10516: PUSH
10517: LD_INT 3
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: PUSH
10526: LD_INT 4
10528: PUSH
10529: LD_INT 73
10531: PUSH
10532: LD_INT 88
10534: PUSH
10535: LD_INT 5
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: LD_INT 56
10549: PUSH
10550: LD_INT 62
10552: PUSH
10553: LD_INT 3
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 29
10564: PUSH
10565: LD_INT 43
10567: PUSH
10568: LD_INT 68
10570: PUSH
10571: LD_INT 2
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 30
10582: PUSH
10583: LD_INT 43
10585: PUSH
10586: LD_INT 79
10588: PUSH
10589: LD_INT 5
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 28
10600: PUSH
10601: LD_INT 60
10603: PUSH
10604: LD_INT 75
10606: PUSH
10607: LD_INT 1
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 2
10618: PUSH
10619: LD_INT 50
10621: PUSH
10622: LD_INT 87
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 28
10636: PUSH
10637: LD_INT 45
10639: PUSH
10640: LD_INT 67
10642: PUSH
10643: LD_INT 2
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 17
10654: PUSH
10655: LD_INT 47
10657: PUSH
10658: LD_INT 84
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 18
10672: PUSH
10673: LD_INT 46
10675: PUSH
10676: LD_INT 87
10678: PUSH
10679: LD_INT 1
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 28
10690: PUSH
10691: LD_INT 41
10693: PUSH
10694: LD_INT 64
10696: PUSH
10697: LD_INT 5
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 32
10708: PUSH
10709: LD_INT 75
10711: PUSH
10712: LD_INT 76
10714: PUSH
10715: LD_INT 5
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 32
10726: PUSH
10727: LD_INT 77
10729: PUSH
10730: LD_INT 75
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 32
10744: PUSH
10745: LD_INT 69
10747: PUSH
10748: LD_INT 68
10750: PUSH
10751: LD_INT 3
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 32
10762: PUSH
10763: LD_INT 59
10765: PUSH
10766: LD_INT 96
10768: PUSH
10769: LD_INT 5
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 32
10780: PUSH
10781: LD_INT 56
10783: PUSH
10784: LD_INT 96
10786: PUSH
10787: LD_INT 0
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 32
10798: PUSH
10799: LD_INT 51
10801: PUSH
10802: LD_INT 61
10804: PUSH
10805: LD_INT 3
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 32
10816: PUSH
10817: LD_INT 42
10819: PUSH
10820: LD_INT 60
10822: PUSH
10823: LD_INT 3
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 32
10834: PUSH
10835: LD_INT 36
10837: PUSH
10838: LD_INT 58
10840: PUSH
10841: LD_INT 3
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 32
10852: PUSH
10853: LD_INT 39
10855: PUSH
10856: LD_INT 59
10858: PUSH
10859: LD_INT 3
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 32
10870: PUSH
10871: LD_INT 61
10873: PUSH
10874: LD_INT 64
10876: PUSH
10877: LD_INT 3
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 33
10888: PUSH
10889: LD_INT 63
10891: PUSH
10892: LD_INT 90
10894: PUSH
10895: LD_INT 5
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 33
10906: PUSH
10907: LD_INT 64
10909: PUSH
10910: LD_INT 88
10912: PUSH
10913: LD_INT 5
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 33
10924: PUSH
10925: LD_INT 72
10927: PUSH
10928: LD_INT 82
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 6
10942: PUSH
10943: LD_INT 42
10945: PUSH
10946: LD_INT 74
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 6
10960: PUSH
10961: LD_INT 56
10963: PUSH
10964: LD_INT 77
10966: PUSH
10967: LD_INT 2
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 21
10978: PUSH
10979: LD_INT 54
10981: PUSH
10982: LD_INT 91
10984: PUSH
10985: LD_INT 5
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 16
10996: PUSH
10997: LD_INT 50
10999: PUSH
11000: LD_INT 83
11002: PUSH
11003: LD_INT 3
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 24
11014: PUSH
11015: LD_INT 50
11017: PUSH
11018: LD_INT 90
11020: PUSH
11021: LD_INT 0
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: EMPTY
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11061: LD_ADDR_VAR 0 3
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 3
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 3
11078: PUSH
11079: LD_INT 25
11081: PUSH
11082: LD_INT 2
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PPUSH
11097: CALL_OW 69
11101: PUSH
11102: FOR_IN
11103: IFFALSE 11122
// AddComAgressiveMove ( i , 53 , 82 ) ;
11105: LD_VAR 0 3
11109: PPUSH
11110: LD_INT 53
11112: PPUSH
11113: LD_INT 82
11115: PPUSH
11116: CALL_OW 174
11120: GO 11102
11122: POP
11123: POP
// for i := 1 to buildingsTab do
11124: LD_ADDR_VAR 0 3
11128: PUSH
11129: DOUBLE
11130: LD_INT 1
11132: DEC
11133: ST_TO_ADDR
11134: LD_VAR 0 5
11138: PUSH
11139: FOR_TO
11140: IFFALSE 11213
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11142: LD_VAR 0 4
11146: PPUSH
11147: LD_VAR 0 5
11151: PUSH
11152: LD_VAR 0 3
11156: ARRAY
11157: PUSH
11158: LD_INT 1
11160: ARRAY
11161: PPUSH
11162: LD_VAR 0 5
11166: PUSH
11167: LD_VAR 0 3
11171: ARRAY
11172: PUSH
11173: LD_INT 2
11175: ARRAY
11176: PPUSH
11177: LD_VAR 0 5
11181: PUSH
11182: LD_VAR 0 3
11186: ARRAY
11187: PUSH
11188: LD_INT 3
11190: ARRAY
11191: PPUSH
11192: LD_VAR 0 5
11196: PUSH
11197: LD_VAR 0 3
11201: ARRAY
11202: PUSH
11203: LD_INT 4
11205: ARRAY
11206: PPUSH
11207: CALL_OW 205
11211: GO 11139
11213: POP
11214: POP
// end ; if position = 2 then
11215: LD_VAR 0 1
11219: PUSH
11220: LD_INT 2
11222: EQUAL
11223: IFFALSE 11838
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11225: LD_ADDR_VAR 0 4
11229: PUSH
11230: LD_INT 22
11232: PUSH
11233: LD_INT 3
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: LD_INT 25
11242: PUSH
11243: LD_INT 2
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PPUSH
11254: CALL_OW 69
11258: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11259: LD_ADDR_VAR 0 5
11263: PUSH
11264: LD_INT 0
11266: PUSH
11267: LD_INT 104
11269: PUSH
11270: LD_INT 110
11272: PUSH
11273: LD_INT 5
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: LIST
11280: LIST
11281: PUSH
11282: LD_INT 4
11284: PUSH
11285: LD_INT 98
11287: PUSH
11288: LD_INT 90
11290: PUSH
11291: LD_INT 3
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 29
11302: PUSH
11303: LD_INT 103
11305: PUSH
11306: LD_INT 114
11308: PUSH
11309: LD_INT 2
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 30
11320: PUSH
11321: LD_INT 99
11323: PUSH
11324: LD_INT 114
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 28
11338: PUSH
11339: LD_INT 100
11341: PUSH
11342: LD_INT 112
11344: PUSH
11345: LD_INT 1
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 2
11356: PUSH
11357: LD_INT 92
11359: PUSH
11360: LD_INT 101
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 28
11374: PUSH
11375: LD_INT 97
11377: PUSH
11378: LD_INT 116
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 17
11392: PUSH
11393: LD_INT 96
11395: PUSH
11396: LD_INT 101
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 18
11410: PUSH
11411: LD_INT 88
11413: PUSH
11414: LD_INT 97
11416: PUSH
11417: LD_INT 2
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 28
11428: PUSH
11429: LD_INT 106
11431: PUSH
11432: LD_INT 92
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 32
11446: PUSH
11447: LD_INT 88
11449: PUSH
11450: LD_INT 89
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: LD_INT 86
11467: PUSH
11468: LD_INT 90
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 32
11482: PUSH
11483: LD_INT 85
11485: PUSH
11486: LD_INT 99
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 32
11500: PUSH
11501: LD_INT 85
11503: PUSH
11504: LD_INT 107
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 33
11518: PUSH
11519: LD_INT 105
11521: PUSH
11522: LD_INT 99
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 33
11536: PUSH
11537: LD_INT 102
11539: PUSH
11540: LD_INT 92
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 33
11554: PUSH
11555: LD_INT 105
11557: PUSH
11558: LD_INT 92
11560: PUSH
11561: LD_INT 2
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 6
11572: PUSH
11573: LD_INT 92
11575: PUSH
11576: LD_INT 110
11578: PUSH
11579: LD_INT 0
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 6
11590: PUSH
11591: LD_INT 103
11593: PUSH
11594: LD_INT 103
11596: PUSH
11597: LD_INT 5
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 21
11608: PUSH
11609: LD_INT 89
11611: PUSH
11612: LD_INT 101
11614: PUSH
11615: LD_INT 1
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 16
11626: PUSH
11627: LD_INT 95
11629: PUSH
11630: LD_INT 104
11632: PUSH
11633: LD_INT 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 24
11644: PUSH
11645: LD_INT 92
11647: PUSH
11648: LD_INT 105
11650: PUSH
11651: LD_INT 0
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11684: LD_ADDR_VAR 0 3
11688: PUSH
11689: LD_INT 22
11691: PUSH
11692: LD_INT 3
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 3
11701: PUSH
11702: LD_INT 25
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PPUSH
11720: CALL_OW 69
11724: PUSH
11725: FOR_IN
11726: IFFALSE 11745
// AddComAgressiveMove ( i , 96 , 99 ) ;
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_INT 96
11735: PPUSH
11736: LD_INT 99
11738: PPUSH
11739: CALL_OW 174
11743: GO 11725
11745: POP
11746: POP
// for i := 1 to buildingsTab do
11747: LD_ADDR_VAR 0 3
11751: PUSH
11752: DOUBLE
11753: LD_INT 1
11755: DEC
11756: ST_TO_ADDR
11757: LD_VAR 0 5
11761: PUSH
11762: FOR_TO
11763: IFFALSE 11836
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11765: LD_VAR 0 4
11769: PPUSH
11770: LD_VAR 0 5
11774: PUSH
11775: LD_VAR 0 3
11779: ARRAY
11780: PUSH
11781: LD_INT 1
11783: ARRAY
11784: PPUSH
11785: LD_VAR 0 5
11789: PUSH
11790: LD_VAR 0 3
11794: ARRAY
11795: PUSH
11796: LD_INT 2
11798: ARRAY
11799: PPUSH
11800: LD_VAR 0 5
11804: PUSH
11805: LD_VAR 0 3
11809: ARRAY
11810: PUSH
11811: LD_INT 3
11813: ARRAY
11814: PPUSH
11815: LD_VAR 0 5
11819: PUSH
11820: LD_VAR 0 3
11824: ARRAY
11825: PUSH
11826: LD_INT 4
11828: ARRAY
11829: PPUSH
11830: CALL_OW 205
11834: GO 11762
11836: POP
11837: POP
// end ; if position = 3 then
11838: LD_VAR 0 1
11842: PUSH
11843: LD_INT 3
11845: EQUAL
11846: IFFALSE 12632
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11848: LD_ADDR_VAR 0 4
11852: PUSH
11853: LD_INT 22
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: EMPTY
11860: LIST
11861: LIST
11862: PUSH
11863: LD_INT 25
11865: PUSH
11866: LD_INT 2
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11882: LD_ADDR_VAR 0 5
11886: PUSH
11887: LD_INT 0
11889: PUSH
11890: LD_INT 151
11892: PUSH
11893: LD_INT 71
11895: PUSH
11896: LD_INT 4
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 4
11907: PUSH
11908: LD_INT 145
11910: PUSH
11911: LD_INT 53
11913: PUSH
11914: LD_INT 3
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: LD_INT 172
11928: PUSH
11929: LD_INT 102
11931: PUSH
11932: LD_INT 5
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 29
11943: PUSH
11944: LD_INT 152
11946: PUSH
11947: LD_INT 85
11949: PUSH
11950: LD_INT 3
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 30
11961: PUSH
11962: LD_INT 156
11964: PUSH
11965: LD_INT 92
11967: PUSH
11968: LD_INT 3
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 28
11979: PUSH
11980: LD_INT 151
11982: PUSH
11983: LD_INT 66
11985: PUSH
11986: LD_INT 4
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 163
12000: PUSH
12001: LD_INT 95
12003: PUSH
12004: LD_INT 5
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 28
12015: PUSH
12016: LD_INT 149
12018: PUSH
12019: LD_INT 63
12021: PUSH
12022: LD_INT 4
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 17
12033: PUSH
12034: LD_INT 167
12036: PUSH
12037: LD_INT 99
12039: PUSH
12040: LD_INT 5
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 18
12051: PUSH
12052: LD_INT 163
12054: PUSH
12055: LD_INT 98
12057: PUSH
12058: LD_INT 0
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 28
12069: PUSH
12070: LD_INT 154
12072: PUSH
12073: LD_INT 70
12075: PUSH
12076: LD_INT 4
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 32
12087: PUSH
12088: LD_INT 155
12090: PUSH
12091: LD_INT 62
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 161
12108: PUSH
12109: LD_INT 69
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 32
12123: PUSH
12124: LD_INT 168
12126: PUSH
12127: LD_INT 78
12129: PUSH
12130: LD_INT 4
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 32
12141: PUSH
12142: LD_INT 163
12144: PUSH
12145: LD_INT 80
12147: PUSH
12148: LD_INT 5
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: LD_INT 136
12162: PUSH
12163: LD_INT 73
12165: PUSH
12166: LD_INT 0
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 157
12180: PUSH
12181: LD_INT 98
12183: PUSH
12184: LD_INT 0
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 32
12195: PUSH
12196: LD_INT 150
12198: PUSH
12199: LD_INT 87
12201: PUSH
12202: LD_INT 1
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 33
12213: PUSH
12214: LD_INT 171
12216: PUSH
12217: LD_INT 97
12219: PUSH
12220: LD_INT 4
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 168
12234: PUSH
12235: LD_INT 92
12237: PUSH
12238: LD_INT 4
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 33
12249: PUSH
12250: LD_INT 166
12252: PUSH
12253: LD_INT 80
12255: PUSH
12256: LD_INT 5
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 33
12267: PUSH
12268: LD_INT 141
12270: PUSH
12271: LD_INT 54
12273: PUSH
12274: LD_INT 2
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 33
12285: PUSH
12286: LD_INT 133
12288: PUSH
12289: LD_INT 57
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 33
12303: PUSH
12304: LD_INT 132
12306: PUSH
12307: LD_INT 61
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 33
12321: PUSH
12322: LD_INT 150
12324: PUSH
12325: LD_INT 82
12327: PUSH
12328: LD_INT 0
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 132
12342: PUSH
12343: LD_INT 72
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 6
12357: PUSH
12358: LD_INT 146
12360: PUSH
12361: LD_INT 64
12363: PUSH
12364: LD_INT 4
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 159
12378: PUSH
12379: LD_INT 85
12381: PUSH
12382: LD_INT 4
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 21
12393: PUSH
12394: LD_INT 163
12396: PUSH
12397: LD_INT 91
12399: PUSH
12400: LD_INT 3
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 16
12411: PUSH
12412: LD_INT 166
12414: PUSH
12415: LD_INT 95
12417: PUSH
12418: LD_INT 4
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 24
12429: PUSH
12430: LD_INT 159
12432: PUSH
12433: LD_INT 95
12435: PUSH
12436: LD_INT 1
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12478: LD_ADDR_VAR 0 3
12482: PUSH
12483: LD_INT 22
12485: PUSH
12486: LD_INT 3
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 3
12495: PUSH
12496: LD_INT 25
12498: PUSH
12499: LD_INT 2
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PPUSH
12514: CALL_OW 69
12518: PUSH
12519: FOR_IN
12520: IFFALSE 12539
// AddComAgressiveMove ( i , 141 , 65 ) ;
12522: LD_VAR 0 3
12526: PPUSH
12527: LD_INT 141
12529: PPUSH
12530: LD_INT 65
12532: PPUSH
12533: CALL_OW 174
12537: GO 12519
12539: POP
12540: POP
// for i := 1 to buildingsTab do
12541: LD_ADDR_VAR 0 3
12545: PUSH
12546: DOUBLE
12547: LD_INT 1
12549: DEC
12550: ST_TO_ADDR
12551: LD_VAR 0 5
12555: PUSH
12556: FOR_TO
12557: IFFALSE 12630
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12559: LD_VAR 0 4
12563: PPUSH
12564: LD_VAR 0 5
12568: PUSH
12569: LD_VAR 0 3
12573: ARRAY
12574: PUSH
12575: LD_INT 1
12577: ARRAY
12578: PPUSH
12579: LD_VAR 0 5
12583: PUSH
12584: LD_VAR 0 3
12588: ARRAY
12589: PUSH
12590: LD_INT 2
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 5
12598: PUSH
12599: LD_VAR 0 3
12603: ARRAY
12604: PUSH
12605: LD_INT 3
12607: ARRAY
12608: PPUSH
12609: LD_VAR 0 5
12613: PUSH
12614: LD_VAR 0 3
12618: ARRAY
12619: PUSH
12620: LD_INT 4
12622: ARRAY
12623: PPUSH
12624: CALL_OW 205
12628: GO 12556
12630: POP
12631: POP
// end ; end ;
12632: LD_VAR 0 2
12636: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12637: LD_INT 0
12639: PPUSH
12640: PPUSH
12641: PPUSH
12642: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12643: LD_ADDR_VAR 0 3
12647: PUSH
12648: LD_INT 22
12650: PUSH
12651: LD_INT 2
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 25
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: EMPTY
12665: LIST
12666: LIST
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: PPUSH
12672: CALL_OW 69
12676: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12677: LD_VAR 0 3
12681: PPUSH
12682: LD_INT 0
12684: PPUSH
12685: LD_INT 71
12687: PPUSH
12688: LD_INT 15
12690: PPUSH
12691: LD_INT 3
12693: PPUSH
12694: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12698: LD_ADDR_VAR 0 4
12702: PUSH
12703: LD_INT 6
12705: PUSH
12706: LD_INT 77
12708: PUSH
12709: LD_INT 18
12711: PUSH
12712: LD_INT 3
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 4
12723: PUSH
12724: LD_INT 77
12726: PUSH
12727: LD_INT 26
12729: PUSH
12730: LD_INT 0
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 31
12741: PUSH
12742: LD_INT 82
12744: PUSH
12745: LD_INT 28
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 31
12759: PUSH
12760: LD_INT 84
12762: PUSH
12763: LD_INT 21
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 31
12777: PUSH
12778: LD_INT 66
12780: PUSH
12781: LD_INT 14
12783: PUSH
12784: LD_INT 2
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 27
12795: PUSH
12796: LD_INT 67
12798: PUSH
12799: LD_INT 18
12801: PUSH
12802: LD_INT 5
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 27
12813: PUSH
12814: LD_INT 69
12816: PUSH
12817: LD_INT 23
12819: PUSH
12820: LD_INT 2
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: EMPTY
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: ST_TO_ADDR
// for i := 1 to buildingsTab do
12838: LD_ADDR_VAR 0 2
12842: PUSH
12843: DOUBLE
12844: LD_INT 1
12846: DEC
12847: ST_TO_ADDR
12848: LD_VAR 0 4
12852: PUSH
12853: FOR_TO
12854: IFFALSE 12927
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12856: LD_VAR 0 3
12860: PPUSH
12861: LD_VAR 0 4
12865: PUSH
12866: LD_VAR 0 2
12870: ARRAY
12871: PUSH
12872: LD_INT 1
12874: ARRAY
12875: PPUSH
12876: LD_VAR 0 4
12880: PUSH
12881: LD_VAR 0 2
12885: ARRAY
12886: PUSH
12887: LD_INT 2
12889: ARRAY
12890: PPUSH
12891: LD_VAR 0 4
12895: PUSH
12896: LD_VAR 0 2
12900: ARRAY
12901: PUSH
12902: LD_INT 3
12904: ARRAY
12905: PPUSH
12906: LD_VAR 0 4
12910: PUSH
12911: LD_VAR 0 2
12915: ARRAY
12916: PUSH
12917: LD_INT 4
12919: ARRAY
12920: PPUSH
12921: CALL_OW 205
12925: GO 12853
12927: POP
12928: POP
// end ;
12929: LD_VAR 0 1
12933: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12934: LD_INT 0
12936: PPUSH
12937: PPUSH
12938: PPUSH
12939: PPUSH
12940: PPUSH
12941: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12942: LD_ADDR_VAR 0 7
12946: PUSH
12947: LD_INT 22
12949: PUSH
12950: LD_VAR 0 1
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: PUSH
12959: LD_INT 25
12961: PUSH
12962: LD_INT 9
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: EMPTY
12970: LIST
12971: LIST
12972: PPUSH
12973: CALL_OW 69
12977: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12978: LD_ADDR_VAR 0 8
12982: PUSH
12983: LD_INT 22
12985: PUSH
12986: LD_VAR 0 2
12990: PUSH
12991: EMPTY
12992: LIST
12993: LIST
12994: PUSH
12995: LD_INT 3
12997: PUSH
12998: LD_INT 21
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: EMPTY
13005: LIST
13006: LIST
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PPUSH
13016: CALL_OW 69
13020: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13021: LD_ADDR_VAR 0 5
13025: PUSH
13026: LD_INT 1
13028: PPUSH
13029: LD_INT 3
13031: PPUSH
13032: CALL_OW 12
13036: ST_TO_ADDR
// for i = 1 to list do
13037: LD_ADDR_VAR 0 6
13041: PUSH
13042: DOUBLE
13043: LD_INT 1
13045: DEC
13046: ST_TO_ADDR
13047: LD_VAR 0 7
13051: PUSH
13052: FOR_TO
13053: IFFALSE 14043
// for ta in filter do
13055: LD_ADDR_VAR 0 4
13059: PUSH
13060: LD_VAR 0 8
13064: PUSH
13065: FOR_IN
13066: IFFALSE 14039
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13068: LD_VAR 0 7
13072: PUSH
13073: LD_VAR 0 6
13077: ARRAY
13078: PPUSH
13079: LD_VAR 0 4
13083: PPUSH
13084: CALL_OW 296
13088: PUSH
13089: LD_INT 15
13091: LESSEQUAL
13092: IFFALSE 14037
// begin case c of 1 :
13094: LD_VAR 0 5
13098: PUSH
13099: LD_INT 1
13101: DOUBLE
13102: EQUAL
13103: IFTRUE 13107
13105: GO 13539
13107: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13108: LD_VAR 0 7
13112: PUSH
13113: LD_VAR 0 6
13117: ARRAY
13118: PPUSH
13119: LD_VAR 0 4
13123: PPUSH
13124: CALL_OW 250
13128: PPUSH
13129: LD_VAR 0 4
13133: PPUSH
13134: CALL_OW 251
13138: PPUSH
13139: CALL_OW 154
// if eventVar2 = 0 then
13143: LD_EXP 62
13147: PUSH
13148: LD_INT 0
13150: EQUAL
13151: IFFALSE 13537
// begin eventVar2 = 1 ;
13153: LD_ADDR_EXP 62
13157: PUSH
13158: LD_INT 1
13160: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13161: LD_INT 245
13163: PPUSH
13164: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13168: LD_VAR 0 4
13172: PPUSH
13173: CALL_OW 250
13177: PPUSH
13178: LD_VAR 0 4
13182: PPUSH
13183: CALL_OW 251
13187: PPUSH
13188: CALL_OW 84
// DialogueOn ;
13192: CALL_OW 6
// if IsOK ( Cyrus ) then
13196: LD_EXP 5
13200: PPUSH
13201: CALL_OW 302
13205: IFFALSE 13221
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13207: LD_EXP 5
13211: PPUSH
13212: LD_STRING D9a-Cyrus-1
13214: PPUSH
13215: CALL_OW 88
// end else
13219: GO 13343
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13221: LD_INT 22
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 26
13233: PUSH
13234: LD_INT 1
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: PUSH
13241: LD_INT 2
13243: PUSH
13244: LD_INT 25
13246: PUSH
13247: LD_INT 1
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: PUSH
13254: LD_INT 25
13256: PUSH
13257: LD_INT 2
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: LD_INT 25
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: PUSH
13274: LD_INT 25
13276: PUSH
13277: LD_INT 4
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 25
13286: PUSH
13287: LD_INT 5
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: LIST
13306: PPUSH
13307: CALL_OW 69
13311: PUSH
13312: LD_EXP 1
13316: PUSH
13317: LD_EXP 14
13321: PUSH
13322: LD_EXP 5
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: DIFF
13332: PPUSH
13333: LD_STRING D9a-Sol1-1
13335: PPUSH
13336: LD_STRING D9a-Sol1-1
13338: PPUSH
13339: CALL 9589 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13343: LD_INT 22
13345: PUSH
13346: LD_INT 1
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 26
13355: PUSH
13356: LD_INT 1
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: LD_INT 2
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 1
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 25
13378: PUSH
13379: LD_INT 2
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 3
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 25
13398: PUSH
13399: LD_INT 4
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 25
13408: PUSH
13409: LD_INT 5
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 69
13433: PUSH
13434: LD_EXP 1
13438: PUSH
13439: LD_EXP 14
13443: PUSH
13444: LD_EXP 5
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: DIFF
13454: PPUSH
13455: LD_STRING D9b-Sol1-1
13457: PPUSH
13458: LD_STRING D9b-Sol1-1
13460: PPUSH
13461: CALL 9589 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13465: LD_STRING 09_arInfo
13467: PPUSH
13468: LD_INT 0
13470: PPUSH
13471: CALL_OW 30
13475: PUSH
13476: LD_INT 1
13478: EQUAL
13479: IFFALSE 13493
// Say ( JMM , D9a-JMM-1 ) ;
13481: LD_EXP 1
13485: PPUSH
13486: LD_STRING D9a-JMM-1
13488: PPUSH
13489: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13493: LD_EXP 1
13497: PPUSH
13498: LD_STRING D9c-JMM-1
13500: PPUSH
13501: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13505: LD_INT 12
13507: PPUSH
13508: LD_INT 1
13510: PPUSH
13511: CALL_OW 321
13515: PUSH
13516: LD_INT 2
13518: EQUAL
13519: IFFALSE 13533
// Say ( JMM , D9c-JMM-1a ) ;
13521: LD_EXP 1
13525: PPUSH
13526: LD_STRING D9c-JMM-1a
13528: PPUSH
13529: CALL_OW 88
// DialogueOff ;
13533: CALL_OW 7
// end ; end ; 2 :
13537: GO 14037
13539: LD_INT 2
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 14005
13547: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13548: LD_VAR 0 7
13552: PUSH
13553: LD_VAR 0 6
13557: ARRAY
13558: PPUSH
13559: LD_VAR 0 4
13563: PPUSH
13564: CALL_OW 250
13568: PUSH
13569: LD_INT 1
13571: NEG
13572: PPUSH
13573: LD_INT 1
13575: PPUSH
13576: CALL_OW 12
13580: PLUS
13581: PPUSH
13582: LD_VAR 0 4
13586: PPUSH
13587: CALL_OW 251
13591: PUSH
13592: LD_INT 1
13594: NEG
13595: PPUSH
13596: LD_INT 1
13598: PPUSH
13599: CALL_OW 12
13603: PLUS
13604: PPUSH
13605: CALL_OW 153
// if eventVar2 = 0 then
13609: LD_EXP 62
13613: PUSH
13614: LD_INT 0
13616: EQUAL
13617: IFFALSE 14003
// begin eventVar2 = 1 ;
13619: LD_ADDR_EXP 62
13623: PUSH
13624: LD_INT 1
13626: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13627: LD_INT 245
13629: PPUSH
13630: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13634: LD_VAR 0 4
13638: PPUSH
13639: CALL_OW 250
13643: PPUSH
13644: LD_VAR 0 4
13648: PPUSH
13649: CALL_OW 251
13653: PPUSH
13654: CALL_OW 84
// DialogueOn ;
13658: CALL_OW 6
// if IsOK ( Cyrus ) then
13662: LD_EXP 5
13666: PPUSH
13667: CALL_OW 302
13671: IFFALSE 13687
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13673: LD_EXP 5
13677: PPUSH
13678: LD_STRING D9a-Cyrus-1
13680: PPUSH
13681: CALL_OW 88
// end else
13685: GO 13809
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13687: LD_INT 22
13689: PUSH
13690: LD_INT 1
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PUSH
13697: LD_INT 26
13699: PUSH
13700: LD_INT 1
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 25
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: PUSH
13720: LD_INT 25
13722: PUSH
13723: LD_INT 2
13725: PUSH
13726: EMPTY
13727: LIST
13728: LIST
13729: PUSH
13730: LD_INT 25
13732: PUSH
13733: LD_INT 3
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 25
13742: PUSH
13743: LD_INT 4
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 25
13752: PUSH
13753: LD_INT 5
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: LIST
13772: PPUSH
13773: CALL_OW 69
13777: PUSH
13778: LD_EXP 1
13782: PUSH
13783: LD_EXP 14
13787: PUSH
13788: LD_EXP 5
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: DIFF
13798: PPUSH
13799: LD_STRING D9a-Sol1-1
13801: PPUSH
13802: LD_STRING D9a-Sol1-1
13804: PPUSH
13805: CALL 9589 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13809: LD_INT 22
13811: PUSH
13812: LD_INT 1
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 26
13821: PUSH
13822: LD_INT 1
13824: PUSH
13825: EMPTY
13826: LIST
13827: LIST
13828: PUSH
13829: LD_INT 2
13831: PUSH
13832: LD_INT 25
13834: PUSH
13835: LD_INT 1
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 25
13844: PUSH
13845: LD_INT 2
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 25
13854: PUSH
13855: LD_INT 3
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: LD_INT 25
13864: PUSH
13865: LD_INT 4
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: LD_INT 25
13874: PUSH
13875: LD_INT 5
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: LIST
13894: PPUSH
13895: CALL_OW 69
13899: PUSH
13900: LD_EXP 1
13904: PUSH
13905: LD_EXP 14
13909: PUSH
13910: LD_EXP 5
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: LIST
13919: DIFF
13920: PPUSH
13921: LD_STRING D9b-Sol1-1
13923: PPUSH
13924: LD_STRING D9b-Sol1-1
13926: PPUSH
13927: CALL 9589 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13931: LD_STRING 09_arInfo
13933: PPUSH
13934: LD_INT 0
13936: PPUSH
13937: CALL_OW 30
13941: PUSH
13942: LD_INT 1
13944: EQUAL
13945: IFFALSE 13959
// Say ( JMM , D9a-JMM-1 ) ;
13947: LD_EXP 1
13951: PPUSH
13952: LD_STRING D9a-JMM-1
13954: PPUSH
13955: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13959: LD_EXP 1
13963: PPUSH
13964: LD_STRING D9c-JMM-1
13966: PPUSH
13967: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13971: LD_INT 12
13973: PPUSH
13974: LD_INT 1
13976: PPUSH
13977: CALL_OW 321
13981: PUSH
13982: LD_INT 2
13984: EQUAL
13985: IFFALSE 13999
// Say ( JMM , D9c-JMM-1a ) ;
13987: LD_EXP 1
13991: PPUSH
13992: LD_STRING D9c-JMM-1a
13994: PPUSH
13995: CALL_OW 88
// DialogueOff ;
13999: CALL_OW 7
// end ; end ; 3 :
14003: GO 14037
14005: LD_INT 3
14007: DOUBLE
14008: EQUAL
14009: IFTRUE 14013
14011: GO 14036
14013: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14014: LD_VAR 0 7
14018: PUSH
14019: LD_VAR 0 6
14023: ARRAY
14024: PPUSH
14025: LD_VAR 0 4
14029: PPUSH
14030: CALL_OW 115
14034: GO 14037
14036: POP
// end ; end ;
14037: GO 13065
14039: POP
14040: POP
14041: GO 13052
14043: POP
14044: POP
// end ;
14045: LD_VAR 0 3
14049: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14050: LD_INT 0
14052: PPUSH
14053: PPUSH
14054: PPUSH
14055: PPUSH
// for i = 1 to 72 do
14056: LD_ADDR_VAR 0 5
14060: PUSH
14061: DOUBLE
14062: LD_INT 1
14064: DEC
14065: ST_TO_ADDR
14066: LD_INT 72
14068: PUSH
14069: FOR_TO
14070: IFFALSE 14128
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14072: LD_VAR 0 5
14076: PPUSH
14077: LD_VAR 0 1
14081: PPUSH
14082: CALL_OW 321
14086: PUSH
14087: LD_INT 1
14089: EQUAL
14090: PUSH
14091: LD_VAR 0 5
14095: PPUSH
14096: LD_VAR 0 3
14100: PPUSH
14101: CALL_OW 482
14105: PUSH
14106: LD_INT 1
14108: EQUAL
14109: AND
14110: IFFALSE 14126
// AddComResearch ( lab , i ) ;
14112: LD_VAR 0 2
14116: PPUSH
14117: LD_VAR 0 5
14121: PPUSH
14122: CALL_OW 184
14126: GO 14069
14128: POP
14129: POP
// end ;
14130: LD_VAR 0 4
14134: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14135: LD_INT 0
14137: PPUSH
14138: PPUSH
14139: PPUSH
14140: PPUSH
14141: PPUSH
14142: PPUSH
14143: PPUSH
14144: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14145: LD_ADDR_VAR 0 6
14149: PUSH
14150: LD_INT 22
14152: PUSH
14153: LD_VAR 0 1
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 56
14164: PUSH
14165: EMPTY
14166: LIST
14167: PUSH
14168: LD_INT 24
14170: PUSH
14171: LD_INT 700
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 3
14180: PUSH
14181: LD_INT 60
14183: PUSH
14184: EMPTY
14185: LIST
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: LD_INT 25
14196: PUSH
14197: LD_INT 1
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 25
14206: PUSH
14207: LD_INT 9
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PPUSH
14226: CALL_OW 69
14230: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14231: LD_ADDR_VAR 0 7
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_VAR 0 1
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 30
14250: PUSH
14251: LD_INT 32
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 58
14260: PUSH
14261: EMPTY
14262: LIST
14263: PUSH
14264: LD_INT 24
14266: PUSH
14267: LD_INT 251
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: PPUSH
14280: CALL_OW 69
14284: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14285: LD_ADDR_VAR 0 9
14289: PUSH
14290: LD_INT 22
14292: PUSH
14293: LD_VAR 0 1
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PUSH
14302: LD_INT 2
14304: PUSH
14305: LD_INT 30
14307: PUSH
14308: LD_INT 4
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: PUSH
14315: LD_INT 30
14317: PUSH
14318: LD_INT 5
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 24
14332: PUSH
14333: LD_INT 251
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: LIST
14344: PPUSH
14345: CALL_OW 69
14349: ST_TO_ADDR
// if barrackList > 0 then
14350: LD_VAR 0 9
14354: PUSH
14355: LD_INT 0
14357: GREATER
14358: IFFALSE 14493
// begin if turretList = 0 then
14360: LD_VAR 0 7
14364: PUSH
14365: LD_INT 0
14367: EQUAL
14368: IFFALSE 14417
// begin for i in soldiers_list do
14370: LD_ADDR_VAR 0 4
14374: PUSH
14375: LD_VAR 0 6
14379: PUSH
14380: FOR_IN
14381: IFFALSE 14413
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14383: LD_VAR 0 4
14387: PPUSH
14388: LD_VAR 0 9
14392: PUSH
14393: LD_INT 1
14395: PPUSH
14396: LD_VAR 0 9
14400: PPUSH
14401: CALL_OW 12
14405: ARRAY
14406: PPUSH
14407: CALL_OW 120
14411: GO 14380
14413: POP
14414: POP
// end else
14415: GO 14493
// begin for i in barrackList do
14417: LD_ADDR_VAR 0 4
14421: PUSH
14422: LD_VAR 0 9
14426: PUSH
14427: FOR_IN
14428: IFFALSE 14491
// begin insideUnits = UnitsInside ( i ) ;
14430: LD_ADDR_VAR 0 10
14434: PUSH
14435: LD_VAR 0 4
14439: PPUSH
14440: CALL_OW 313
14444: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14445: LD_VAR 0 10
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: LD_VAR 0 7
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PPUSH
14463: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14467: LD_VAR 0 6
14471: PUSH
14472: LD_INT 1
14474: ARRAY
14475: PPUSH
14476: LD_VAR 0 7
14480: PUSH
14481: LD_INT 1
14483: ARRAY
14484: PPUSH
14485: CALL_OW 120
// end ;
14489: GO 14427
14491: POP
14492: POP
// end ; end ; end ;
14493: LD_VAR 0 3
14497: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14498: LD_INT 0
14500: PPUSH
14501: PPUSH
14502: PPUSH
14503: PPUSH
14504: PPUSH
14505: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14506: LD_ADDR_VAR 0 6
14510: PUSH
14511: LD_VAR 0 2
14515: PPUSH
14516: CALL_OW 313
14520: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14521: LD_ADDR_VAR 0 7
14525: PUSH
14526: LD_INT 22
14528: PUSH
14529: LD_VAR 0 1
14533: PUSH
14534: EMPTY
14535: LIST
14536: LIST
14537: PUSH
14538: LD_INT 25
14540: PUSH
14541: LD_INT 2
14543: PUSH
14544: EMPTY
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 24
14550: PUSH
14551: LD_INT 1000
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 3
14560: PUSH
14561: LD_INT 54
14563: PUSH
14564: EMPTY
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14582: LD_ADDR_VAR 0 4
14586: PUSH
14587: LD_INT 22
14589: PUSH
14590: LD_VAR 0 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 21
14601: PUSH
14602: LD_INT 3
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 3
14611: PUSH
14612: LD_INT 24
14614: PUSH
14615: LD_INT 1000
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: PPUSH
14634: CALL_OW 69
14638: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14639: LD_VAR 0 4
14643: NOT
14644: PUSH
14645: LD_VAR 0 7
14649: NOT
14650: AND
14651: PUSH
14652: LD_EXP 42
14656: NOT
14657: AND
14658: IFFALSE 14662
// exit ;
14660: GO 14853
// if buildings_list > 0 and engineerOkInside then
14662: LD_VAR 0 4
14666: PUSH
14667: LD_INT 0
14669: GREATER
14670: PUSH
14671: LD_VAR 0 6
14675: AND
14676: IFFALSE 14730
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14678: LD_ADDR_VAR 0 5
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_VAR 0 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 25
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: EMPTY
14706: LIST
14707: LIST
14708: PPUSH
14709: CALL_OW 69
14713: PUSH
14714: FOR_IN
14715: IFFALSE 14728
// ComExitBuilding ( i ) ;
14717: LD_VAR 0 5
14721: PPUSH
14722: CALL_OW 122
14726: GO 14714
14728: POP
14729: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14730: LD_VAR 0 4
14734: PUSH
14735: LD_INT 0
14737: GREATER
14738: PUSH
14739: LD_VAR 0 7
14743: PUSH
14744: LD_INT 0
14746: GREATER
14747: AND
14748: IFFALSE 14802
// begin for i in engineerOkOutside do
14750: LD_ADDR_VAR 0 5
14754: PUSH
14755: LD_VAR 0 7
14759: PUSH
14760: FOR_IN
14761: IFFALSE 14800
// for j in buildings_list do
14763: LD_ADDR_VAR 0 8
14767: PUSH
14768: LD_VAR 0 4
14772: PUSH
14773: FOR_IN
14774: IFFALSE 14796
// ComRepairBuilding ( i , j [ 1 ] ) ;
14776: LD_VAR 0 5
14780: PPUSH
14781: LD_VAR 0 8
14785: PUSH
14786: LD_INT 1
14788: ARRAY
14789: PPUSH
14790: CALL_OW 130
14794: GO 14773
14796: POP
14797: POP
14798: GO 14760
14800: POP
14801: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14802: LD_VAR 0 4
14806: PUSH
14807: LD_INT 0
14809: EQUAL
14810: PUSH
14811: LD_VAR 0 7
14815: PUSH
14816: LD_INT 0
14818: GREATER
14819: AND
14820: IFFALSE 14853
// for i in engineerOkOutside do
14822: LD_ADDR_VAR 0 5
14826: PUSH
14827: LD_VAR 0 7
14831: PUSH
14832: FOR_IN
14833: IFFALSE 14851
// ComEnterUnit ( i , building ) ;
14835: LD_VAR 0 5
14839: PPUSH
14840: LD_VAR 0 2
14844: PPUSH
14845: CALL_OW 120
14849: GO 14832
14851: POP
14852: POP
// end ;
14853: LD_VAR 0 3
14857: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14858: LD_INT 0
14860: PPUSH
14861: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14862: LD_INT 22
14864: PUSH
14865: LD_VAR 0 1
14869: PUSH
14870: EMPTY
14871: LIST
14872: LIST
14873: PUSH
14874: LD_INT 25
14876: PUSH
14877: LD_INT 2
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PPUSH
14888: CALL_OW 69
14892: PUSH
14893: LD_INT 0
14895: GREATER
14896: PUSH
14897: LD_INT 22
14899: PUSH
14900: LD_VAR 0 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 21
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: LD_INT 3
14921: PUSH
14922: LD_INT 24
14924: PUSH
14925: LD_INT 1000
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: EMPTY
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: PUSH
14946: LD_INT 0
14948: EQUAL
14949: AND
14950: PUSH
14951: LD_VAR 0 2
14955: PUSH
14956: LD_INT 0
14958: GREATER
14959: AND
14960: IFFALSE 15059
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14962: LD_ADDR_VAR 0 4
14966: PUSH
14967: LD_INT 22
14969: PUSH
14970: LD_VAR 0 1
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PUSH
14979: LD_INT 25
14981: PUSH
14982: LD_INT 2
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 69
14997: PUSH
14998: FOR_IN
14999: IFFALSE 15057
// begin AddComExitBuilding ( i ) ;
15001: LD_VAR 0 4
15005: PPUSH
15006: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15010: LD_VAR 0 4
15014: PPUSH
15015: LD_VAR 0 2
15019: PUSH
15020: LD_INT 1
15022: ARRAY
15023: PPUSH
15024: LD_VAR 0 2
15028: PUSH
15029: LD_INT 2
15031: ARRAY
15032: PPUSH
15033: LD_VAR 0 2
15037: PUSH
15038: LD_INT 3
15040: ARRAY
15041: PPUSH
15042: LD_VAR 0 2
15046: PUSH
15047: LD_INT 4
15049: ARRAY
15050: PPUSH
15051: CALL_OW 205
// end ;
15055: GO 14998
15057: POP
15058: POP
// end ; end ;
15059: LD_VAR 0 3
15063: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15064: LD_INT 0
15066: PPUSH
15067: PPUSH
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
15073: PPUSH
15074: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15075: LD_ADDR_VAR 0 6
15079: PUSH
15080: LD_INT 22
15082: PUSH
15083: LD_VAR 0 1
15087: PUSH
15088: EMPTY
15089: LIST
15090: LIST
15091: PUSH
15092: LD_INT 25
15094: PUSH
15095: LD_INT 4
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 24
15104: PUSH
15105: LD_INT 251
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: LIST
15116: PPUSH
15117: CALL_OW 69
15121: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15122: LD_ADDR_VAR 0 7
15126: PUSH
15127: LD_VAR 0 3
15131: PPUSH
15132: LD_INT 22
15134: PUSH
15135: LD_VAR 0 1
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: LD_INT 25
15146: PUSH
15147: LD_INT 4
15149: PUSH
15150: EMPTY
15151: LIST
15152: LIST
15153: PUSH
15154: LD_INT 50
15156: PUSH
15157: EMPTY
15158: LIST
15159: PUSH
15160: EMPTY
15161: LIST
15162: LIST
15163: LIST
15164: PPUSH
15165: CALL_OW 70
15169: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15170: LD_ADDR_VAR 0 10
15174: PUSH
15175: LD_VAR 0 3
15179: PPUSH
15180: LD_INT 22
15182: PUSH
15183: LD_VAR 0 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 21
15194: PUSH
15195: LD_INT 1
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 3
15204: PUSH
15205: LD_INT 25
15207: PUSH
15208: LD_INT 3
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 3
15221: PUSH
15222: LD_INT 24
15224: PUSH
15225: LD_INT 750
15227: PUSH
15228: EMPTY
15229: LIST
15230: LIST
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 70
15246: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15247: LD_ADDR_VAR 0 11
15251: PUSH
15252: LD_VAR 0 2
15256: PPUSH
15257: LD_INT 22
15259: PUSH
15260: LD_VAR 0 1
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: LD_INT 21
15271: PUSH
15272: LD_INT 1
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: PUSH
15279: LD_INT 3
15281: PUSH
15282: LD_INT 25
15284: PUSH
15285: LD_INT 3
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: EMPTY
15293: LIST
15294: LIST
15295: PUSH
15296: LD_INT 3
15298: PUSH
15299: LD_INT 24
15301: PUSH
15302: LD_INT 1000
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 70
15323: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15324: LD_VAR 0 10
15328: NOT
15329: PUSH
15330: LD_VAR 0 7
15334: NOT
15335: AND
15336: PUSH
15337: LD_VAR 0 11
15341: NOT
15342: AND
15343: IFFALSE 15347
// exit ;
15345: GO 15607
// if damageUnits > 0 and sci_list > 0 then
15347: LD_VAR 0 10
15351: PUSH
15352: LD_INT 0
15354: GREATER
15355: PUSH
15356: LD_VAR 0 6
15360: PUSH
15361: LD_INT 0
15363: GREATER
15364: AND
15365: IFFALSE 15398
// for i in damageUnits do
15367: LD_ADDR_VAR 0 8
15371: PUSH
15372: LD_VAR 0 10
15376: PUSH
15377: FOR_IN
15378: IFFALSE 15396
// ComMoveToArea ( i , healArea ) ;
15380: LD_VAR 0 8
15384: PPUSH
15385: LD_VAR 0 2
15389: PPUSH
15390: CALL_OW 113
15394: GO 15377
15396: POP
15397: POP
// if unitsToHeal > 0 and sci_list > 0 then
15398: LD_VAR 0 11
15402: PUSH
15403: LD_INT 0
15405: GREATER
15406: PUSH
15407: LD_VAR 0 6
15411: PUSH
15412: LD_INT 0
15414: GREATER
15415: AND
15416: IFFALSE 15475
// begin for i in sci_list do
15418: LD_ADDR_VAR 0 8
15422: PUSH
15423: LD_VAR 0 6
15427: PUSH
15428: FOR_IN
15429: IFFALSE 15473
// begin ComExitBuilding ( i ) ;
15431: LD_VAR 0 8
15435: PPUSH
15436: CALL_OW 122
// for j in unitsToHeal do
15440: LD_ADDR_VAR 0 9
15444: PUSH
15445: LD_VAR 0 11
15449: PUSH
15450: FOR_IN
15451: IFFALSE 15469
// AddComHeal ( i , j ) ;
15453: LD_VAR 0 8
15457: PPUSH
15458: LD_VAR 0 9
15462: PPUSH
15463: CALL_OW 188
15467: GO 15450
15469: POP
15470: POP
// end ;
15471: GO 15428
15473: POP
15474: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15475: LD_VAR 0 10
15479: PUSH
15480: LD_INT 0
15482: EQUAL
15483: PUSH
15484: LD_VAR 0 11
15488: PUSH
15489: LD_INT 0
15491: EQUAL
15492: AND
15493: PUSH
15494: LD_VAR 0 7
15498: PUSH
15499: LD_INT 0
15501: GREATER
15502: AND
15503: IFFALSE 15607
// for i in sci_listOutside do
15505: LD_ADDR_VAR 0 8
15509: PUSH
15510: LD_VAR 0 7
15514: PUSH
15515: FOR_IN
15516: IFFALSE 15605
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15518: LD_ADDR_VAR 0 12
15522: PUSH
15523: LD_INT 22
15525: PUSH
15526: LD_VAR 0 1
15530: PUSH
15531: EMPTY
15532: LIST
15533: LIST
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 3
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 30
15547: PUSH
15548: LD_INT 8
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: PPUSH
15560: CALL_OW 69
15564: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15565: LD_ADDR_VAR 0 13
15569: PUSH
15570: LD_INT 1
15572: PPUSH
15573: LD_VAR 0 12
15577: PPUSH
15578: CALL_OW 12
15582: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15583: LD_VAR 0 8
15587: PPUSH
15588: LD_VAR 0 12
15592: PUSH
15593: LD_VAR 0 13
15597: ARRAY
15598: PPUSH
15599: CALL_OW 120
// end ;
15603: GO 15515
15605: POP
15606: POP
// end ;
15607: LD_VAR 0 5
15611: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15612: LD_INT 0
15614: PPUSH
15615: PPUSH
15616: PPUSH
15617: PPUSH
15618: PPUSH
15619: PPUSH
15620: PPUSH
15621: PPUSH
15622: PPUSH
15623: PPUSH
15624: PPUSH
// amChassisTab = [ ] ;
15625: LD_ADDR_VAR 0 19
15629: PUSH
15630: EMPTY
15631: ST_TO_ADDR
// arChassisTab = [ ] ;
15632: LD_ADDR_VAR 0 18
15636: PUSH
15637: EMPTY
15638: ST_TO_ADDR
// ruChassisTab = [ ] ;
15639: LD_ADDR_VAR 0 17
15643: PUSH
15644: EMPTY
15645: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// if nation = 1 then
15653: LD_VAR 0 5
15657: PUSH
15658: LD_INT 1
15660: EQUAL
15661: IFFALSE 16166
// begin uc_side = side ;
15663: LD_ADDR_OWVAR 20
15667: PUSH
15668: LD_VAR 0 2
15672: ST_TO_ADDR
// uc_nation = nation ;
15673: LD_ADDR_OWVAR 21
15677: PUSH
15678: LD_VAR 0 5
15682: ST_TO_ADDR
// vc_engine = vehengine ;
15683: LD_ADDR_OWVAR 39
15687: PUSH
15688: LD_VAR 0 6
15692: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15693: LD_ADDR_OWVAR 38
15697: PUSH
15698: LD_VAR 0 7
15702: PUSH
15703: LD_INT 1
15705: PPUSH
15706: LD_VAR 0 7
15710: PPUSH
15711: CALL_OW 12
15715: ARRAY
15716: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15717: LD_ADDR_OWVAR 40
15721: PUSH
15722: LD_VAR 0 10
15726: PUSH
15727: LD_INT 1
15729: PPUSH
15730: LD_VAR 0 10
15734: PPUSH
15735: CALL_OW 12
15739: ARRAY
15740: ST_TO_ADDR
// for j = 1 to AMWeapon do
15741: LD_ADDR_VAR 0 14
15745: PUSH
15746: DOUBLE
15747: LD_INT 1
15749: DEC
15750: ST_TO_ADDR
15751: LD_VAR 0 10
15755: PUSH
15756: FOR_TO
15757: IFFALSE 16058
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15759: LD_VAR 0 10
15763: PUSH
15764: LD_VAR 0 14
15768: ARRAY
15769: PUSH
15770: LD_INT 2
15772: EQUAL
15773: PUSH
15774: LD_VAR 0 10
15778: PUSH
15779: LD_VAR 0 14
15783: ARRAY
15784: PUSH
15785: LD_INT 3
15787: EQUAL
15788: OR
15789: IFFALSE 15842
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15791: LD_ADDR_VAR 0 19
15795: PUSH
15796: LD_INT 1
15798: PUSH
15799: LD_INT 2
15801: PUSH
15802: LD_INT 3
15804: PUSH
15805: LD_INT 4
15807: PUSH
15808: LD_INT 5
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15818: LD_ADDR_OWVAR 37
15822: PUSH
15823: LD_VAR 0 19
15827: PUSH
15828: LD_INT 1
15830: PPUSH
15831: LD_VAR 0 19
15835: PPUSH
15836: CALL_OW 12
15840: ARRAY
15841: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15842: LD_VAR 0 10
15846: PUSH
15847: LD_VAR 0 14
15851: ARRAY
15852: PUSH
15853: LD_INT 4
15855: EQUAL
15856: PUSH
15857: LD_VAR 0 10
15861: PUSH
15862: LD_VAR 0 14
15866: ARRAY
15867: PUSH
15868: LD_INT 5
15870: EQUAL
15871: OR
15872: PUSH
15873: LD_VAR 0 10
15877: PUSH
15878: LD_VAR 0 14
15882: ARRAY
15883: PUSH
15884: LD_INT 9
15886: EQUAL
15887: OR
15888: PUSH
15889: LD_VAR 0 10
15893: PUSH
15894: LD_VAR 0 14
15898: ARRAY
15899: PUSH
15900: LD_INT 11
15902: EQUAL
15903: OR
15904: PUSH
15905: LD_VAR 0 10
15909: PUSH
15910: LD_VAR 0 14
15914: ARRAY
15915: PUSH
15916: LD_INT 7
15918: EQUAL
15919: OR
15920: IFFALSE 15969
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15922: LD_ADDR_VAR 0 19
15926: PUSH
15927: LD_INT 2
15929: PUSH
15930: LD_INT 3
15932: PUSH
15933: LD_INT 4
15935: PUSH
15936: LD_INT 5
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15945: LD_ADDR_OWVAR 37
15949: PUSH
15950: LD_VAR 0 19
15954: PUSH
15955: LD_INT 1
15957: PPUSH
15958: LD_VAR 0 19
15962: PPUSH
15963: CALL_OW 12
15967: ARRAY
15968: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15969: LD_VAR 0 10
15973: PUSH
15974: LD_VAR 0 14
15978: ARRAY
15979: PUSH
15980: LD_INT 8
15982: EQUAL
15983: PUSH
15984: LD_VAR 0 10
15988: PUSH
15989: LD_VAR 0 14
15993: ARRAY
15994: PUSH
15995: LD_INT 6
15997: EQUAL
15998: OR
15999: PUSH
16000: LD_VAR 0 10
16004: PUSH
16005: LD_VAR 0 14
16009: ARRAY
16010: PUSH
16011: LD_INT 10
16013: EQUAL
16014: OR
16015: IFFALSE 16056
// begin amChassisTab = [ 4 , 5 ] ;
16017: LD_ADDR_VAR 0 19
16021: PUSH
16022: LD_INT 4
16024: PUSH
16025: LD_INT 5
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16032: LD_ADDR_OWVAR 37
16036: PUSH
16037: LD_VAR 0 19
16041: PUSH
16042: LD_INT 1
16044: PPUSH
16045: LD_VAR 0 19
16049: PPUSH
16050: CALL_OW 12
16054: ARRAY
16055: ST_TO_ADDR
// end ; end ;
16056: GO 15756
16058: POP
16059: POP
// veh = CreateVehicle ;
16060: LD_ADDR_VAR 0 16
16064: PUSH
16065: CALL_OW 45
16069: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16070: LD_VAR 0 16
16074: PPUSH
16075: LD_VAR 0 1
16079: PPUSH
16080: LD_INT 0
16082: PPUSH
16083: CALL_OW 49
// if vc_control = 1 then
16087: LD_OWVAR 38
16091: PUSH
16092: LD_INT 1
16094: EQUAL
16095: IFFALSE 16152
// begin hc_gallery =  ;
16097: LD_ADDR_OWVAR 33
16101: PUSH
16102: LD_STRING 
16104: ST_TO_ADDR
// hc_name =  ;
16105: LD_ADDR_OWVAR 26
16109: PUSH
16110: LD_STRING 
16112: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16113: LD_INT 0
16115: PPUSH
16116: LD_INT 3
16118: PPUSH
16119: LD_VAR 0 4
16123: PPUSH
16124: CALL_OW 380
// un = CreateHuman ;
16128: LD_ADDR_VAR 0 15
16132: PUSH
16133: CALL_OW 44
16137: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16138: LD_VAR 0 15
16142: PPUSH
16143: LD_VAR 0 16
16147: PPUSH
16148: CALL_OW 52
// end ; i = i + 1 ;
16152: LD_ADDR_VAR 0 13
16156: PUSH
16157: LD_VAR 0 13
16161: PUSH
16162: LD_INT 1
16164: PLUS
16165: ST_TO_ADDR
// end ; if nation = 2 then
16166: LD_VAR 0 5
16170: PUSH
16171: LD_INT 2
16173: EQUAL
16174: IFFALSE 16596
// begin uc_side = side ;
16176: LD_ADDR_OWVAR 20
16180: PUSH
16181: LD_VAR 0 2
16185: ST_TO_ADDR
// uc_nation = nation ;
16186: LD_ADDR_OWVAR 21
16190: PUSH
16191: LD_VAR 0 5
16195: ST_TO_ADDR
// vc_engine = vehengine ;
16196: LD_ADDR_OWVAR 39
16200: PUSH
16201: LD_VAR 0 6
16205: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16206: LD_ADDR_OWVAR 38
16210: PUSH
16211: LD_VAR 0 7
16215: PUSH
16216: LD_INT 1
16218: PPUSH
16219: LD_VAR 0 7
16223: PPUSH
16224: CALL_OW 12
16228: ARRAY
16229: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16230: LD_ADDR_OWVAR 40
16234: PUSH
16235: LD_VAR 0 9
16239: PUSH
16240: LD_INT 1
16242: PPUSH
16243: LD_VAR 0 9
16247: PPUSH
16248: CALL_OW 12
16252: ARRAY
16253: ST_TO_ADDR
// for j = 1 to ARWeapons do
16254: LD_ADDR_VAR 0 14
16258: PUSH
16259: DOUBLE
16260: LD_INT 1
16262: DEC
16263: ST_TO_ADDR
16264: LD_VAR 0 9
16268: PUSH
16269: FOR_TO
16270: IFFALSE 16488
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16272: LD_VAR 0 9
16276: PUSH
16277: LD_VAR 0 14
16281: ARRAY
16282: PUSH
16283: LD_INT 24
16285: EQUAL
16286: PUSH
16287: LD_VAR 0 9
16291: PUSH
16292: LD_VAR 0 14
16296: ARRAY
16297: PUSH
16298: LD_INT 22
16300: EQUAL
16301: OR
16302: PUSH
16303: LD_VAR 0 9
16307: PUSH
16308: LD_VAR 0 14
16312: ARRAY
16313: PUSH
16314: LD_INT 23
16316: EQUAL
16317: OR
16318: PUSH
16319: LD_VAR 0 9
16323: PUSH
16324: LD_VAR 0 14
16328: ARRAY
16329: PUSH
16330: LD_INT 30
16332: EQUAL
16333: OR
16334: IFFALSE 16371
// begin arChassisTab = [ 14 ] ;
16336: LD_ADDR_VAR 0 18
16340: PUSH
16341: LD_INT 14
16343: PUSH
16344: EMPTY
16345: LIST
16346: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16347: LD_ADDR_OWVAR 37
16351: PUSH
16352: LD_VAR 0 18
16356: PUSH
16357: LD_INT 1
16359: PPUSH
16360: LD_VAR 0 18
16364: PPUSH
16365: CALL_OW 12
16369: ARRAY
16370: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16371: LD_VAR 0 9
16375: PUSH
16376: LD_VAR 0 14
16380: ARRAY
16381: PUSH
16382: LD_INT 29
16384: EQUAL
16385: PUSH
16386: LD_VAR 0 9
16390: PUSH
16391: LD_VAR 0 14
16395: ARRAY
16396: PUSH
16397: LD_INT 28
16399: EQUAL
16400: OR
16401: PUSH
16402: LD_VAR 0 9
16406: PUSH
16407: LD_VAR 0 14
16411: ARRAY
16412: PUSH
16413: LD_INT 27
16415: EQUAL
16416: OR
16417: PUSH
16418: LD_VAR 0 9
16422: PUSH
16423: LD_VAR 0 14
16427: ARRAY
16428: PUSH
16429: LD_INT 26
16431: EQUAL
16432: OR
16433: PUSH
16434: LD_VAR 0 9
16438: PUSH
16439: LD_VAR 0 14
16443: ARRAY
16444: PUSH
16445: LD_INT 25
16447: EQUAL
16448: OR
16449: IFFALSE 16486
// begin arChassisTab = [ 14 ] ;
16451: LD_ADDR_VAR 0 18
16455: PUSH
16456: LD_INT 14
16458: PUSH
16459: EMPTY
16460: LIST
16461: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16462: LD_ADDR_OWVAR 37
16466: PUSH
16467: LD_VAR 0 18
16471: PUSH
16472: LD_INT 1
16474: PPUSH
16475: LD_VAR 0 18
16479: PPUSH
16480: CALL_OW 12
16484: ARRAY
16485: ST_TO_ADDR
// end ; end ;
16486: GO 16269
16488: POP
16489: POP
// veh = CreateVehicle ;
16490: LD_ADDR_VAR 0 16
16494: PUSH
16495: CALL_OW 45
16499: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16500: LD_VAR 0 16
16504: PPUSH
16505: LD_VAR 0 1
16509: PPUSH
16510: LD_INT 0
16512: PPUSH
16513: CALL_OW 49
// if vc_control = 1 then
16517: LD_OWVAR 38
16521: PUSH
16522: LD_INT 1
16524: EQUAL
16525: IFFALSE 16582
// begin hc_gallery =  ;
16527: LD_ADDR_OWVAR 33
16531: PUSH
16532: LD_STRING 
16534: ST_TO_ADDR
// hc_name =  ;
16535: LD_ADDR_OWVAR 26
16539: PUSH
16540: LD_STRING 
16542: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16543: LD_INT 0
16545: PPUSH
16546: LD_INT 3
16548: PPUSH
16549: LD_VAR 0 4
16553: PPUSH
16554: CALL_OW 380
// un = CreateHuman ;
16558: LD_ADDR_VAR 0 15
16562: PUSH
16563: CALL_OW 44
16567: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16568: LD_VAR 0 15
16572: PPUSH
16573: LD_VAR 0 16
16577: PPUSH
16578: CALL_OW 52
// end ; i = i + 1 ;
16582: LD_ADDR_VAR 0 13
16586: PUSH
16587: LD_VAR 0 13
16591: PUSH
16592: LD_INT 1
16594: PLUS
16595: ST_TO_ADDR
// end ; if nation = 3 then
16596: LD_VAR 0 5
16600: PUSH
16601: LD_INT 3
16603: EQUAL
16604: IFFALSE 17010
// begin uc_side = side ;
16606: LD_ADDR_OWVAR 20
16610: PUSH
16611: LD_VAR 0 2
16615: ST_TO_ADDR
// uc_nation = nation ;
16616: LD_ADDR_OWVAR 21
16620: PUSH
16621: LD_VAR 0 5
16625: ST_TO_ADDR
// vc_engine = vehengine ;
16626: LD_ADDR_OWVAR 39
16630: PUSH
16631: LD_VAR 0 6
16635: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16636: LD_ADDR_OWVAR 38
16640: PUSH
16641: LD_VAR 0 7
16645: PUSH
16646: LD_INT 1
16648: PPUSH
16649: LD_VAR 0 7
16653: PPUSH
16654: CALL_OW 12
16658: ARRAY
16659: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16660: LD_ADDR_OWVAR 40
16664: PUSH
16665: LD_VAR 0 8
16669: PUSH
16670: LD_INT 1
16672: PPUSH
16673: LD_VAR 0 8
16677: PPUSH
16678: CALL_OW 12
16682: ARRAY
16683: ST_TO_ADDR
// for j = 1 to RuWeapons do
16684: LD_ADDR_VAR 0 14
16688: PUSH
16689: DOUBLE
16690: LD_INT 1
16692: DEC
16693: ST_TO_ADDR
16694: LD_VAR 0 8
16698: PUSH
16699: FOR_TO
16700: IFFALSE 16902
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16702: LD_VAR 0 8
16706: PUSH
16707: LD_VAR 0 14
16711: ARRAY
16712: PUSH
16713: LD_INT 42
16715: EQUAL
16716: PUSH
16717: LD_VAR 0 8
16721: PUSH
16722: LD_VAR 0 14
16726: ARRAY
16727: PUSH
16728: LD_INT 43
16730: EQUAL
16731: OR
16732: PUSH
16733: LD_VAR 0 8
16737: PUSH
16738: LD_VAR 0 14
16742: ARRAY
16743: PUSH
16744: LD_INT 44
16746: EQUAL
16747: OR
16748: PUSH
16749: LD_VAR 0 8
16753: PUSH
16754: LD_VAR 0 14
16758: ARRAY
16759: PUSH
16760: LD_INT 45
16762: EQUAL
16763: OR
16764: PUSH
16765: LD_VAR 0 8
16769: PUSH
16770: LD_VAR 0 14
16774: ARRAY
16775: PUSH
16776: LD_INT 49
16778: EQUAL
16779: OR
16780: IFFALSE 16829
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16782: LD_ADDR_VAR 0 17
16786: PUSH
16787: LD_INT 21
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_INT 23
16795: PUSH
16796: LD_INT 24
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16805: LD_ADDR_OWVAR 37
16809: PUSH
16810: LD_VAR 0 17
16814: PUSH
16815: LD_INT 1
16817: PPUSH
16818: LD_VAR 0 17
16822: PPUSH
16823: CALL_OW 12
16827: ARRAY
16828: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16829: LD_VAR 0 8
16833: PUSH
16834: LD_VAR 0 14
16838: ARRAY
16839: PUSH
16840: LD_INT 46
16842: EQUAL
16843: PUSH
16844: LD_VAR 0 8
16848: PUSH
16849: LD_VAR 0 14
16853: ARRAY
16854: PUSH
16855: LD_INT 47
16857: EQUAL
16858: OR
16859: IFFALSE 16900
// begin ruChassisTab = [ 23 , 24 ] ;
16861: LD_ADDR_VAR 0 17
16865: PUSH
16866: LD_INT 23
16868: PUSH
16869: LD_INT 24
16871: PUSH
16872: EMPTY
16873: LIST
16874: LIST
16875: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16876: LD_ADDR_OWVAR 37
16880: PUSH
16881: LD_VAR 0 17
16885: PUSH
16886: LD_INT 1
16888: PPUSH
16889: LD_VAR 0 17
16893: PPUSH
16894: CALL_OW 12
16898: ARRAY
16899: ST_TO_ADDR
// end ; end ;
16900: GO 16699
16902: POP
16903: POP
// veh = CreateVehicle ;
16904: LD_ADDR_VAR 0 16
16908: PUSH
16909: CALL_OW 45
16913: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16914: LD_VAR 0 16
16918: PPUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: LD_INT 0
16926: PPUSH
16927: CALL_OW 49
// if vc_control = 1 then
16931: LD_OWVAR 38
16935: PUSH
16936: LD_INT 1
16938: EQUAL
16939: IFFALSE 16996
// begin hc_gallery =  ;
16941: LD_ADDR_OWVAR 33
16945: PUSH
16946: LD_STRING 
16948: ST_TO_ADDR
// hc_name =  ;
16949: LD_ADDR_OWVAR 26
16953: PUSH
16954: LD_STRING 
16956: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16957: LD_INT 0
16959: PPUSH
16960: LD_INT 3
16962: PPUSH
16963: LD_VAR 0 4
16967: PPUSH
16968: CALL_OW 380
// un = CreateHuman ;
16972: LD_ADDR_VAR 0 15
16976: PUSH
16977: CALL_OW 44
16981: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16982: LD_VAR 0 15
16986: PPUSH
16987: LD_VAR 0 16
16991: PPUSH
16992: CALL_OW 52
// end ; i = i + 1 ;
16996: LD_ADDR_VAR 0 13
17000: PUSH
17001: LD_VAR 0 13
17005: PUSH
17006: LD_INT 1
17008: PLUS
17009: ST_TO_ADDR
// end ; until i = vehCount ;
17010: LD_VAR 0 13
17014: PUSH
17015: LD_VAR 0 3
17019: EQUAL
17020: IFFALSE 15646
// repeat wait ( 0 0$1 ) ;
17022: LD_INT 35
17024: PPUSH
17025: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17029: LD_ADDR_VAR 0 20
17033: PUSH
17034: LD_INT 22
17036: PUSH
17037: LD_VAR 0 2
17041: PUSH
17042: EMPTY
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 21
17048: PUSH
17049: LD_INT 2
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: PUSH
17056: LD_INT 24
17058: PUSH
17059: LD_INT 650
17061: PUSH
17062: EMPTY
17063: LIST
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: LIST
17070: PPUSH
17071: CALL_OW 69
17075: ST_TO_ADDR
// if vehicleOK_list > 0 then
17076: LD_VAR 0 20
17080: PUSH
17081: LD_INT 0
17083: GREATER
17084: IFFALSE 17275
// begin for i in vehicleOK_list do
17086: LD_ADDR_VAR 0 13
17090: PUSH
17091: LD_VAR 0 20
17095: PUSH
17096: FOR_IN
17097: IFFALSE 17273
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17099: LD_ADDR_VAR 0 21
17103: PUSH
17104: LD_INT 22
17106: PUSH
17107: LD_VAR 0 11
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PPUSH
17116: CALL_OW 69
17120: PPUSH
17121: LD_VAR 0 13
17125: PPUSH
17126: CALL_OW 74
17130: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17131: LD_ADDR_VAR 0 22
17135: PUSH
17136: LD_INT 22
17138: PUSH
17139: LD_VAR 0 11
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 59
17153: PUSH
17154: EMPTY
17155: LIST
17156: PUSH
17157: LD_INT 21
17159: PUSH
17160: LD_INT 1
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: LD_INT 21
17169: PUSH
17170: LD_INT 2
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: PPUSH
17190: CALL_OW 69
17194: PPUSH
17195: LD_VAR 0 13
17199: PPUSH
17200: CALL_OW 74
17204: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17205: LD_VAR 0 13
17209: PPUSH
17210: LD_VAR 0 21
17214: PPUSH
17215: CALL_OW 296
17219: PUSH
17220: LD_INT 8
17222: PLUS
17223: PUSH
17224: LD_VAR 0 13
17228: PPUSH
17229: LD_VAR 0 22
17233: PPUSH
17234: CALL_OW 296
17238: LESS
17239: IFFALSE 17257
// begin ComAttackUnit ( i , target1 ) ;
17241: LD_VAR 0 13
17245: PPUSH
17246: LD_VAR 0 21
17250: PPUSH
17251: CALL_OW 115
// end else
17255: GO 17271
// begin ComAttackUnit ( i , target2 ) ;
17257: LD_VAR 0 13
17261: PPUSH
17262: LD_VAR 0 22
17266: PPUSH
17267: CALL_OW 115
// end ; end ;
17271: GO 17096
17273: POP
17274: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17275: LD_INT 22
17277: PUSH
17278: LD_VAR 0 2
17282: PUSH
17283: EMPTY
17284: LIST
17285: LIST
17286: PUSH
17287: LD_INT 21
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PPUSH
17301: CALL_OW 69
17305: PUSH
17306: LD_INT 0
17308: EQUAL
17309: IFFALSE 17022
// end ;
17311: LD_VAR 0 12
17315: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17316: LD_INT 0
17318: PPUSH
17319: PPUSH
17320: PPUSH
17321: PPUSH
17322: PPUSH
17323: PPUSH
17324: PPUSH
17325: PPUSH
17326: PPUSH
17327: PPUSH
17328: PPUSH
// for i = 1 to soldierCount do
17329: LD_ADDR_VAR 0 13
17333: PUSH
17334: DOUBLE
17335: LD_INT 1
17337: DEC
17338: ST_TO_ADDR
17339: LD_VAR 0 3
17343: PUSH
17344: FOR_TO
17345: IFFALSE 17427
// begin uc_side = side ;
17347: LD_ADDR_OWVAR 20
17351: PUSH
17352: LD_VAR 0 1
17356: ST_TO_ADDR
// uc_nation = nation ;
17357: LD_ADDR_OWVAR 21
17361: PUSH
17362: LD_VAR 0 2
17366: ST_TO_ADDR
// hc_name =  ;
17367: LD_ADDR_OWVAR 26
17371: PUSH
17372: LD_STRING 
17374: ST_TO_ADDR
// hc_gallery =  ;
17375: LD_ADDR_OWVAR 33
17379: PUSH
17380: LD_STRING 
17382: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17383: LD_INT 0
17385: PPUSH
17386: LD_INT 1
17388: PPUSH
17389: LD_VAR 0 8
17393: PPUSH
17394: CALL_OW 380
// un = CreateHuman ;
17398: LD_ADDR_VAR 0 15
17402: PUSH
17403: CALL_OW 44
17407: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17408: LD_VAR 0 15
17412: PPUSH
17413: LD_VAR 0 9
17417: PPUSH
17418: LD_INT 0
17420: PPUSH
17421: CALL_OW 49
// end ;
17425: GO 17344
17427: POP
17428: POP
// for i = 1 to sniperCount do
17429: LD_ADDR_VAR 0 13
17433: PUSH
17434: DOUBLE
17435: LD_INT 1
17437: DEC
17438: ST_TO_ADDR
17439: LD_VAR 0 4
17443: PUSH
17444: FOR_TO
17445: IFFALSE 17527
// begin uc_side = side ;
17447: LD_ADDR_OWVAR 20
17451: PUSH
17452: LD_VAR 0 1
17456: ST_TO_ADDR
// uc_nation = nation ;
17457: LD_ADDR_OWVAR 21
17461: PUSH
17462: LD_VAR 0 2
17466: ST_TO_ADDR
// hc_name =  ;
17467: LD_ADDR_OWVAR 26
17471: PUSH
17472: LD_STRING 
17474: ST_TO_ADDR
// hc_gallery =  ;
17475: LD_ADDR_OWVAR 33
17479: PUSH
17480: LD_STRING 
17482: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17483: LD_INT 0
17485: PPUSH
17486: LD_INT 5
17488: PPUSH
17489: LD_VAR 0 8
17493: PPUSH
17494: CALL_OW 380
// un = CreateHuman ;
17498: LD_ADDR_VAR 0 15
17502: PUSH
17503: CALL_OW 44
17507: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17508: LD_VAR 0 15
17512: PPUSH
17513: LD_VAR 0 9
17517: PPUSH
17518: LD_INT 0
17520: PPUSH
17521: CALL_OW 49
// end ;
17525: GO 17444
17527: POP
17528: POP
// for i = 1 to bazookCount do
17529: LD_ADDR_VAR 0 13
17533: PUSH
17534: DOUBLE
17535: LD_INT 1
17537: DEC
17538: ST_TO_ADDR
17539: LD_VAR 0 5
17543: PUSH
17544: FOR_TO
17545: IFFALSE 17627
// begin uc_side = side ;
17547: LD_ADDR_OWVAR 20
17551: PUSH
17552: LD_VAR 0 1
17556: ST_TO_ADDR
// uc_nation = nation ;
17557: LD_ADDR_OWVAR 21
17561: PUSH
17562: LD_VAR 0 2
17566: ST_TO_ADDR
// hc_name =  ;
17567: LD_ADDR_OWVAR 26
17571: PUSH
17572: LD_STRING 
17574: ST_TO_ADDR
// hc_gallery =  ;
17575: LD_ADDR_OWVAR 33
17579: PUSH
17580: LD_STRING 
17582: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17583: LD_INT 0
17585: PPUSH
17586: LD_INT 9
17588: PPUSH
17589: LD_VAR 0 8
17593: PPUSH
17594: CALL_OW 380
// un = CreateHuman ;
17598: LD_ADDR_VAR 0 15
17602: PUSH
17603: CALL_OW 44
17607: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17608: LD_VAR 0 15
17612: PPUSH
17613: LD_VAR 0 9
17617: PPUSH
17618: LD_INT 0
17620: PPUSH
17621: CALL_OW 49
// end ;
17625: GO 17544
17627: POP
17628: POP
// for i = 1 to mortalCount do
17629: LD_ADDR_VAR 0 13
17633: PUSH
17634: DOUBLE
17635: LD_INT 1
17637: DEC
17638: ST_TO_ADDR
17639: LD_VAR 0 6
17643: PUSH
17644: FOR_TO
17645: IFFALSE 17727
// begin uc_side = side ;
17647: LD_ADDR_OWVAR 20
17651: PUSH
17652: LD_VAR 0 1
17656: ST_TO_ADDR
// uc_nation = nation ;
17657: LD_ADDR_OWVAR 21
17661: PUSH
17662: LD_VAR 0 2
17666: ST_TO_ADDR
// hc_name =  ;
17667: LD_ADDR_OWVAR 26
17671: PUSH
17672: LD_STRING 
17674: ST_TO_ADDR
// hc_gallery =  ;
17675: LD_ADDR_OWVAR 33
17679: PUSH
17680: LD_STRING 
17682: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17683: LD_INT 0
17685: PPUSH
17686: LD_INT 8
17688: PPUSH
17689: LD_VAR 0 8
17693: PPUSH
17694: CALL_OW 380
// un = CreateHuman ;
17698: LD_ADDR_VAR 0 15
17702: PUSH
17703: CALL_OW 44
17707: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17708: LD_VAR 0 15
17712: PPUSH
17713: LD_VAR 0 9
17717: PPUSH
17718: LD_INT 0
17720: PPUSH
17721: CALL_OW 49
// end ;
17725: GO 17644
17727: POP
17728: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17729: LD_ADDR_VAR 0 18
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_VAR 0 1
17741: PUSH
17742: EMPTY
17743: LIST
17744: LIST
17745: PUSH
17746: LD_INT 2
17748: PUSH
17749: LD_INT 25
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 25
17761: PUSH
17762: LD_INT 5
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 25
17771: PUSH
17772: LD_INT 8
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: LD_INT 25
17781: PUSH
17782: LD_INT 9
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: PUSH
17789: EMPTY
17790: LIST
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17805: LD_ADDR_VAR 0 17
17809: PUSH
17810: LD_INT 22
17812: PUSH
17813: LD_VAR 0 1
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 25
17824: PUSH
17825: LD_INT 4
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PPUSH
17836: CALL_OW 69
17840: ST_TO_ADDR
// for i in medic_list do
17841: LD_ADDR_VAR 0 13
17845: PUSH
17846: LD_VAR 0 17
17850: PUSH
17851: FOR_IN
17852: IFFALSE 17870
// ComMoveToArea ( i , healArea ) ;
17854: LD_VAR 0 13
17858: PPUSH
17859: LD_VAR 0 10
17863: PPUSH
17864: CALL_OW 113
17868: GO 17851
17870: POP
17871: POP
// repeat wait ( 0 0$1 ) ;
17872: LD_INT 35
17874: PPUSH
17875: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17879: LD_ADDR_VAR 0 16
17883: PUSH
17884: LD_INT 22
17886: PUSH
17887: LD_VAR 0 1
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PUSH
17896: LD_INT 1
17898: PUSH
17899: LD_INT 3
17901: PUSH
17902: LD_INT 24
17904: PUSH
17905: LD_INT 550
17907: PUSH
17908: EMPTY
17909: LIST
17910: LIST
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 24
17918: PUSH
17919: LD_INT 250
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17940: LD_ADDR_VAR 0 18
17944: PUSH
17945: LD_INT 22
17947: PUSH
17948: LD_VAR 0 1
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 2
17959: PUSH
17960: LD_INT 25
17962: PUSH
17963: LD_INT 1
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 25
17972: PUSH
17973: LD_INT 5
17975: PUSH
17976: EMPTY
17977: LIST
17978: LIST
17979: PUSH
17980: LD_INT 25
17982: PUSH
17983: LD_INT 8
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: PUSH
17990: LD_INT 25
17992: PUSH
17993: LD_INT 9
17995: PUSH
17996: EMPTY
17997: LIST
17998: LIST
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: LIST
18004: LIST
18005: LIST
18006: PUSH
18007: LD_INT 24
18009: PUSH
18010: LD_INT 1000
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: LIST
18021: PPUSH
18022: CALL_OW 69
18026: ST_TO_ADDR
// if medicCount > 0 then
18027: LD_VAR 0 7
18031: PUSH
18032: LD_INT 0
18034: GREATER
18035: IFFALSE 18109
// begin if damageUnit_list > 0 then
18037: LD_VAR 0 16
18041: PUSH
18042: LD_INT 0
18044: GREATER
18045: IFFALSE 18109
// begin for i in damageUnit_list do
18047: LD_ADDR_VAR 0 13
18051: PUSH
18052: LD_VAR 0 16
18056: PUSH
18057: FOR_IN
18058: IFFALSE 18107
// begin ComMoveToArea ( i , healArea ) ;
18060: LD_VAR 0 13
18064: PPUSH
18065: LD_VAR 0 10
18069: PPUSH
18070: CALL_OW 113
// for j in medic_list do
18074: LD_ADDR_VAR 0 14
18078: PUSH
18079: LD_VAR 0 17
18083: PUSH
18084: FOR_IN
18085: IFFALSE 18103
// AddComHeal ( j , i ) ;
18087: LD_VAR 0 14
18091: PPUSH
18092: LD_VAR 0 13
18096: PPUSH
18097: CALL_OW 188
18101: GO 18084
18103: POP
18104: POP
// end ;
18105: GO 18057
18107: POP
18108: POP
// end ; end ; for i in soldiersOK_list do
18109: LD_ADDR_VAR 0 13
18113: PUSH
18114: LD_VAR 0 18
18118: PUSH
18119: FOR_IN
18120: IFFALSE 18296
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18122: LD_ADDR_VAR 0 21
18126: PUSH
18127: LD_INT 22
18129: PUSH
18130: LD_VAR 0 11
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: PPUSH
18144: LD_VAR 0 13
18148: PPUSH
18149: CALL_OW 74
18153: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18154: LD_ADDR_VAR 0 22
18158: PUSH
18159: LD_INT 22
18161: PUSH
18162: LD_VAR 0 11
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PUSH
18171: LD_INT 2
18173: PUSH
18174: LD_INT 59
18176: PUSH
18177: EMPTY
18178: LIST
18179: PUSH
18180: LD_INT 21
18182: PUSH
18183: LD_INT 1
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: PUSH
18190: LD_INT 21
18192: PUSH
18193: LD_INT 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: PPUSH
18213: CALL_OW 69
18217: PPUSH
18218: LD_VAR 0 13
18222: PPUSH
18223: CALL_OW 74
18227: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18228: LD_VAR 0 13
18232: PPUSH
18233: LD_VAR 0 21
18237: PPUSH
18238: CALL_OW 296
18242: PUSH
18243: LD_INT 8
18245: PLUS
18246: PUSH
18247: LD_VAR 0 13
18251: PPUSH
18252: LD_VAR 0 22
18256: PPUSH
18257: CALL_OW 296
18261: LESS
18262: IFFALSE 18280
// begin ComAttackUnit ( i , target1 ) ;
18264: LD_VAR 0 13
18268: PPUSH
18269: LD_VAR 0 21
18273: PPUSH
18274: CALL_OW 115
// end else
18278: GO 18294
// begin ComAttackUnit ( i , target2 ) ;
18280: LD_VAR 0 13
18284: PPUSH
18285: LD_VAR 0 22
18289: PPUSH
18290: CALL_OW 115
// end ; end ;
18294: GO 18119
18296: POP
18297: POP
// for i in soldiersOK_list do
18298: LD_ADDR_VAR 0 13
18302: PUSH
18303: LD_VAR 0 18
18307: PUSH
18308: FOR_IN
18309: IFFALSE 18485
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18311: LD_ADDR_VAR 0 21
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_VAR 0 11
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: PPUSH
18333: LD_VAR 0 13
18337: PPUSH
18338: CALL_OW 74
18342: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18343: LD_ADDR_VAR 0 22
18347: PUSH
18348: LD_INT 22
18350: PUSH
18351: LD_VAR 0 11
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PUSH
18360: LD_INT 2
18362: PUSH
18363: LD_INT 59
18365: PUSH
18366: EMPTY
18367: LIST
18368: PUSH
18369: LD_INT 21
18371: PUSH
18372: LD_INT 1
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 21
18381: PUSH
18382: LD_INT 2
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: PPUSH
18402: CALL_OW 69
18406: PPUSH
18407: LD_VAR 0 13
18411: PPUSH
18412: CALL_OW 74
18416: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18417: LD_VAR 0 13
18421: PPUSH
18422: LD_VAR 0 21
18426: PPUSH
18427: CALL_OW 296
18431: PUSH
18432: LD_INT 8
18434: PLUS
18435: PUSH
18436: LD_VAR 0 13
18440: PPUSH
18441: LD_VAR 0 22
18445: PPUSH
18446: CALL_OW 296
18450: LESS
18451: IFFALSE 18469
// begin ComAttackUnit ( i , target1 ) ;
18453: LD_VAR 0 13
18457: PPUSH
18458: LD_VAR 0 21
18462: PPUSH
18463: CALL_OW 115
// end else
18467: GO 18483
// begin ComAttackUnit ( i , target2 ) ;
18469: LD_VAR 0 13
18473: PPUSH
18474: LD_VAR 0 22
18478: PPUSH
18479: CALL_OW 115
// end ; end ;
18483: GO 18308
18485: POP
18486: POP
// until soldiersOK_list = [ ] ;
18487: LD_VAR 0 18
18491: PUSH
18492: EMPTY
18493: EQUAL
18494: IFFALSE 17872
// end ;
18496: LD_VAR 0 12
18500: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
18501: LD_INT 0
18503: PPUSH
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
// repeat wait ( 0 0$1 ) ;
18510: LD_INT 35
18512: PPUSH
18513: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
18517: LD_ADDR_VAR 0 7
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_INT 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 25
18534: PUSH
18535: LD_INT 4
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 60
18547: PUSH
18548: EMPTY
18549: LIST
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: ST_TO_ADDR
// if not tmp then
18565: LD_VAR 0 7
18569: NOT
18570: IFFALSE 18574
// continue ;
18572: GO 18510
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18574: LD_ADDR_VAR 0 3
18578: PUSH
18579: LD_INT 5
18581: PPUSH
18582: LD_INT 22
18584: PUSH
18585: LD_INT 0
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 25
18594: PUSH
18595: LD_INT 12
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PPUSH
18606: CALL_OW 70
18610: PUSH
18611: FOR_IN
18612: IFFALSE 18645
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
18614: LD_VAR 0 7
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: CALL_OW 250
18628: PPUSH
18629: LD_VAR 0 3
18633: PPUSH
18634: CALL_OW 251
18638: PPUSH
18639: CALL_OW 131
18643: GO 18611
18645: POP
18646: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18647: LD_INT 22
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: EMPTY
18654: LIST
18655: LIST
18656: PUSH
18657: LD_INT 25
18659: PUSH
18660: LD_INT 4
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: EMPTY
18668: LIST
18669: LIST
18670: PPUSH
18671: CALL_OW 69
18675: PUSH
18676: LD_INT 0
18678: EQUAL
18679: PUSH
18680: LD_INT 5
18682: PPUSH
18683: LD_INT 22
18685: PUSH
18686: LD_INT 0
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: LD_INT 25
18695: PUSH
18696: LD_INT 12
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PPUSH
18707: CALL_OW 70
18711: PUSH
18712: LD_INT 0
18714: EQUAL
18715: OR
18716: IFFALSE 18510
// repeat wait ( 0 0$1 ) ;
18718: LD_INT 35
18720: PPUSH
18721: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
18725: LD_ADDR_VAR 0 5
18729: PUSH
18730: LD_INT 22
18732: PUSH
18733: LD_INT 2
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 30
18742: PUSH
18743: LD_INT 5
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PUSH
18750: EMPTY
18751: LIST
18752: LIST
18753: PPUSH
18754: CALL_OW 69
18758: ST_TO_ADDR
// until arm ;
18759: LD_VAR 0 5
18763: IFFALSE 18718
// wait ( 0 0$25 ) ;
18765: LD_INT 875
18767: PPUSH
18768: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18772: LD_ADDR_VAR 0 6
18776: PUSH
18777: LD_INT 22
18779: PUSH
18780: LD_INT 2
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: PUSH
18787: LD_INT 2
18789: PUSH
18790: LD_INT 30
18792: PUSH
18793: LD_INT 0
18795: PUSH
18796: EMPTY
18797: LIST
18798: LIST
18799: PUSH
18800: LD_INT 30
18802: PUSH
18803: LD_INT 1
18805: PUSH
18806: EMPTY
18807: LIST
18808: LIST
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: LIST
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: PPUSH
18819: CALL_OW 69
18823: ST_TO_ADDR
// j := 0 ;
18824: LD_ADDR_VAR 0 3
18828: PUSH
18829: LD_INT 0
18831: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18832: LD_ADDR_VAR 0 2
18836: PUSH
18837: LD_INT 22
18839: PUSH
18840: LD_INT 2
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: LD_INT 25
18849: PUSH
18850: LD_INT 12
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: EMPTY
18858: LIST
18859: LIST
18860: PPUSH
18861: CALL_OW 69
18865: PUSH
18866: FOR_IN
18867: IFFALSE 18954
// begin ComMoveXY ( i , 63 , 16 ) ;
18869: LD_VAR 0 2
18873: PPUSH
18874: LD_INT 63
18876: PPUSH
18877: LD_INT 16
18879: PPUSH
18880: CALL_OW 111
// j := j + 1 ;
18884: LD_ADDR_VAR 0 3
18888: PUSH
18889: LD_VAR 0 3
18893: PUSH
18894: LD_INT 1
18896: PLUS
18897: ST_TO_ADDR
// if j < 5 then
18898: LD_VAR 0 3
18902: PUSH
18903: LD_INT 5
18905: LESS
18906: IFFALSE 18924
// b := arm [ 1 ] else
18908: LD_ADDR_VAR 0 4
18912: PUSH
18913: LD_VAR 0 5
18917: PUSH
18918: LD_INT 1
18920: ARRAY
18921: ST_TO_ADDR
18922: GO 18938
// b := dep [ 1 ] ;
18924: LD_ADDR_VAR 0 4
18928: PUSH
18929: LD_VAR 0 6
18933: PUSH
18934: LD_INT 1
18936: ARRAY
18937: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
18938: LD_VAR 0 2
18942: PPUSH
18943: LD_VAR 0 4
18947: PPUSH
18948: CALL_OW 180
// end ;
18952: GO 18866
18954: POP
18955: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18956: LD_ADDR_VAR 0 2
18960: PUSH
18961: LD_INT 22
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: PUSH
18971: LD_INT 25
18973: PUSH
18974: LD_INT 4
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: PUSH
18981: EMPTY
18982: LIST
18983: LIST
18984: PPUSH
18985: CALL_OW 69
18989: PUSH
18990: FOR_IN
18991: IFFALSE 19037
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18993: LD_VAR 0 2
18997: PPUSH
18998: LD_INT 22
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: PUSH
19008: LD_INT 30
19010: PUSH
19011: LD_INT 8
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PPUSH
19022: CALL_OW 69
19026: PUSH
19027: LD_INT 1
19029: ARRAY
19030: PPUSH
19031: CALL_OW 120
19035: GO 18990
19037: POP
19038: POP
// end ;
19039: LD_VAR 0 1
19043: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19044: LD_INT 0
19046: PPUSH
19047: PPUSH
19048: PPUSH
19049: PPUSH
19050: PPUSH
19051: PPUSH
19052: PPUSH
19053: PPUSH
19054: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19055: LD_INT 22
19057: PUSH
19058: LD_VAR 0 1
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 21
19069: PUSH
19070: LD_INT 2
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PPUSH
19081: CALL_OW 69
19085: PUSH
19086: LD_VAR 0 3
19090: LESSEQUAL
19091: IFFALSE 19235
// for i = 1 to vehCount do
19093: LD_ADDR_VAR 0 10
19097: PUSH
19098: DOUBLE
19099: LD_INT 1
19101: DEC
19102: ST_TO_ADDR
19103: LD_VAR 0 3
19107: PUSH
19108: FOR_TO
19109: IFFALSE 19233
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19111: LD_ADDR_VAR 0 12
19115: PUSH
19116: LD_VAR 0 5
19120: PUSH
19121: LD_INT 1
19123: PPUSH
19124: LD_VAR 0 5
19128: PPUSH
19129: CALL_OW 12
19133: ARRAY
19134: ST_TO_ADDR
// if randWeapon = 46 then
19135: LD_VAR 0 12
19139: PUSH
19140: LD_INT 46
19142: EQUAL
19143: IFFALSE 19188
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19145: LD_VAR 0 2
19149: PPUSH
19150: LD_INT 24
19152: PPUSH
19153: LD_VAR 0 6
19157: PPUSH
19158: LD_VAR 0 7
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_VAR 0 7
19170: PPUSH
19171: CALL_OW 12
19175: ARRAY
19176: PPUSH
19177: LD_VAR 0 12
19181: PPUSH
19182: CALL_OW 185
19186: GO 19231
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19188: LD_VAR 0 2
19192: PPUSH
19193: LD_VAR 0 8
19197: PPUSH
19198: LD_VAR 0 6
19202: PPUSH
19203: LD_VAR 0 7
19207: PUSH
19208: LD_INT 1
19210: PPUSH
19211: LD_VAR 0 7
19215: PPUSH
19216: CALL_OW 12
19220: ARRAY
19221: PPUSH
19222: LD_VAR 0 12
19226: PPUSH
19227: CALL_OW 185
// end ;
19231: GO 19108
19233: POP
19234: POP
// repeat wait ( 0 0$1 ) ;
19235: LD_INT 35
19237: PPUSH
19238: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19242: LD_INT 22
19244: PUSH
19245: LD_VAR 0 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 21
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 24
19266: PUSH
19267: LD_INT 250
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: LIST
19278: PPUSH
19279: CALL_OW 69
19283: PUSH
19284: LD_VAR 0 3
19288: GREATEREQUAL
19289: IFFALSE 19235
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19291: LD_INT 22
19293: PUSH
19294: LD_VAR 0 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 21
19305: PUSH
19306: LD_INT 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 24
19315: PUSH
19316: LD_INT 250
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: LIST
19327: PPUSH
19328: CALL_OW 69
19332: PUSH
19333: LD_VAR 0 3
19337: GREATEREQUAL
19338: IFFALSE 19681
// begin repeat begin wait ( 0 0$1 ) ;
19340: LD_INT 35
19342: PPUSH
19343: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19347: LD_INT 22
19349: PUSH
19350: LD_VAR 0 1
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: LD_INT 21
19361: PUSH
19362: LD_INT 2
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PUSH
19369: LD_INT 24
19371: PUSH
19372: LD_INT 651
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: LIST
19383: PPUSH
19384: CALL_OW 69
19388: PUSH
19389: LD_INT 0
19391: GREATER
19392: IFFALSE 19620
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19394: LD_ADDR_VAR 0 10
19398: PUSH
19399: LD_INT 22
19401: PUSH
19402: LD_VAR 0 1
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 21
19413: PUSH
19414: LD_INT 2
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 24
19423: PUSH
19424: LD_INT 651
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: LIST
19435: PPUSH
19436: CALL_OW 69
19440: PUSH
19441: FOR_IN
19442: IFFALSE 19618
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19444: LD_ADDR_VAR 0 16
19448: PUSH
19449: LD_INT 22
19451: PUSH
19452: LD_VAR 0 4
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PPUSH
19461: CALL_OW 69
19465: PPUSH
19466: LD_VAR 0 10
19470: PPUSH
19471: CALL_OW 74
19475: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19476: LD_ADDR_VAR 0 17
19480: PUSH
19481: LD_INT 22
19483: PUSH
19484: LD_VAR 0 4
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 2
19495: PUSH
19496: LD_INT 59
19498: PUSH
19499: EMPTY
19500: LIST
19501: PUSH
19502: LD_INT 21
19504: PUSH
19505: LD_INT 1
19507: PUSH
19508: EMPTY
19509: LIST
19510: LIST
19511: PUSH
19512: LD_INT 21
19514: PUSH
19515: LD_INT 2
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: PUSH
19532: EMPTY
19533: LIST
19534: PPUSH
19535: CALL_OW 69
19539: PPUSH
19540: LD_VAR 0 10
19544: PPUSH
19545: CALL_OW 74
19549: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19550: LD_VAR 0 10
19554: PPUSH
19555: LD_VAR 0 16
19559: PPUSH
19560: CALL_OW 296
19564: PUSH
19565: LD_INT 8
19567: PLUS
19568: PUSH
19569: LD_VAR 0 10
19573: PPUSH
19574: LD_VAR 0 17
19578: PPUSH
19579: CALL_OW 296
19583: LESS
19584: IFFALSE 19602
// begin ComAttackUnit ( i , target1 ) ;
19586: LD_VAR 0 10
19590: PPUSH
19591: LD_VAR 0 16
19595: PPUSH
19596: CALL_OW 115
// end else
19600: GO 19616
// begin ComAttackUnit ( i , target2 ) ;
19602: LD_VAR 0 10
19606: PPUSH
19607: LD_VAR 0 17
19611: PPUSH
19612: CALL_OW 115
// end ; end ;
19616: GO 19441
19618: POP
19619: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19620: LD_INT 22
19622: PUSH
19623: LD_VAR 0 1
19627: PUSH
19628: EMPTY
19629: LIST
19630: LIST
19631: PUSH
19632: LD_INT 21
19634: PUSH
19635: LD_INT 2
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 69
19650: PUSH
19651: LD_INT 0
19653: EQUAL
19654: PUSH
19655: LD_INT 22
19657: PUSH
19658: LD_VAR 0 4
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: EMPTY
19668: LIST
19669: PPUSH
19670: CALL_OW 69
19674: PUSH
19675: LD_INT 0
19677: EQUAL
19678: OR
19679: IFFALSE 19340
// end ; end ;
19681: LD_VAR 0 9
19685: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19686: LD_INT 0
19688: PPUSH
19689: PPUSH
19690: PPUSH
19691: PPUSH
// r := 100 ;
19692: LD_ADDR_VAR 0 5
19696: PUSH
19697: LD_INT 100
19699: ST_TO_ADDR
// x := 0 ;
19700: LD_ADDR_VAR 0 6
19704: PUSH
19705: LD_INT 0
19707: ST_TO_ADDR
// while ( x < n ) do
19708: LD_VAR 0 6
19712: PUSH
19713: LD_VAR 0 2
19717: LESS
19718: IFFALSE 20005
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19720: LD_ADDR_VAR 0 4
19724: PUSH
19725: DOUBLE
19726: LD_INT 1
19728: DEC
19729: ST_TO_ADDR
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_INT 0
19737: PPUSH
19738: CALL_OW 517
19742: PUSH
19743: LD_INT 1
19745: ARRAY
19746: PUSH
19747: FOR_TO
19748: IFFALSE 20001
// begin if r > 50 then
19750: LD_VAR 0 5
19754: PUSH
19755: LD_INT 50
19757: GREATER
19758: IFFALSE 19977
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19760: LD_VAR 0 1
19764: PPUSH
19765: LD_INT 0
19767: PPUSH
19768: CALL_OW 517
19772: PUSH
19773: LD_INT 1
19775: ARRAY
19776: PUSH
19777: LD_VAR 0 4
19781: ARRAY
19782: PPUSH
19783: LD_VAR 0 1
19787: PPUSH
19788: LD_INT 0
19790: PPUSH
19791: CALL_OW 517
19795: PUSH
19796: LD_INT 2
19798: ARRAY
19799: PUSH
19800: LD_VAR 0 4
19804: ARRAY
19805: PPUSH
19806: CALL_OW 458
19810: NOT
19811: IFFALSE 19961
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19813: LD_VAR 0 1
19817: PPUSH
19818: LD_INT 0
19820: PPUSH
19821: CALL_OW 517
19825: PUSH
19826: LD_INT 1
19828: ARRAY
19829: PUSH
19830: LD_VAR 0 4
19834: ARRAY
19835: PPUSH
19836: LD_VAR 0 1
19840: PPUSH
19841: LD_INT 0
19843: PPUSH
19844: CALL_OW 517
19848: PUSH
19849: LD_INT 2
19851: ARRAY
19852: PUSH
19853: LD_VAR 0 4
19857: ARRAY
19858: PPUSH
19859: LD_INT 5
19861: PPUSH
19862: LD_INT 0
19864: PPUSH
19865: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19869: LD_ADDR_EXP 50
19873: PUSH
19874: LD_EXP 50
19878: PPUSH
19879: LD_INT 1
19881: PPUSH
19882: LD_VAR 0 1
19886: PPUSH
19887: LD_INT 0
19889: PPUSH
19890: CALL_OW 517
19894: PUSH
19895: LD_INT 1
19897: ARRAY
19898: PUSH
19899: LD_VAR 0 4
19903: ARRAY
19904: PUSH
19905: LD_VAR 0 1
19909: PPUSH
19910: LD_INT 0
19912: PPUSH
19913: CALL_OW 517
19917: PUSH
19918: LD_INT 2
19920: ARRAY
19921: PUSH
19922: LD_VAR 0 4
19926: ARRAY
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PPUSH
19932: CALL_OW 2
19936: ST_TO_ADDR
// r := 0 ;
19937: LD_ADDR_VAR 0 5
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// x := x + 1 ;
19945: LD_ADDR_VAR 0 6
19949: PUSH
19950: LD_VAR 0 6
19954: PUSH
19955: LD_INT 1
19957: PLUS
19958: ST_TO_ADDR
// end else
19959: GO 19975
// r := r + 35 ;
19961: LD_ADDR_VAR 0 5
19965: PUSH
19966: LD_VAR 0 5
19970: PUSH
19971: LD_INT 35
19973: PLUS
19974: ST_TO_ADDR
// end else
19975: GO 19999
// r := r + rand ( 10 , 25 ) ;
19977: LD_ADDR_VAR 0 5
19981: PUSH
19982: LD_VAR 0 5
19986: PUSH
19987: LD_INT 10
19989: PPUSH
19990: LD_INT 25
19992: PPUSH
19993: CALL_OW 12
19997: PLUS
19998: ST_TO_ADDR
// end ;
19999: GO 19747
20001: POP
20002: POP
20003: GO 19708
// end ; end_of_file
20005: LD_VAR 0 3
20009: RET
// every 0 0$1 trigger russianAI = 1 do
20010: LD_EXP 39
20014: PUSH
20015: LD_INT 1
20017: EQUAL
20018: IFFALSE 20237
20020: GO 20022
20022: DISABLE
// begin enable ;
20023: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20024: LD_INT 3
20026: PPUSH
20027: LD_EXP 30
20031: PPUSH
20032: CALL 14498 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20036: LD_INT 3
20038: PPUSH
20039: LD_EXP 42
20043: PPUSH
20044: CALL 14858 0 2
// if ruPossition = 1 then
20048: LD_EXP 41
20052: PUSH
20053: LD_INT 1
20055: EQUAL
20056: IFFALSE 20111
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20058: LD_INT 3
20060: PPUSH
20061: LD_INT 13
20063: PPUSH
20064: LD_INT 10
20066: PPUSH
20067: LD_INT 22
20069: PUSH
20070: LD_INT 3
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 21
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 30
20089: PUSH
20090: LD_INT 8
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: PPUSH
20107: CALL 15064 0 4
// if ruPossition = 2 then
20111: LD_EXP 41
20115: PUSH
20116: LD_INT 2
20118: EQUAL
20119: IFFALSE 20174
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20121: LD_INT 3
20123: PPUSH
20124: LD_INT 14
20126: PPUSH
20127: LD_INT 11
20129: PPUSH
20130: LD_INT 22
20132: PUSH
20133: LD_INT 3
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 21
20142: PUSH
20143: LD_INT 3
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PUSH
20150: LD_INT 30
20152: PUSH
20153: LD_INT 8
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: PUSH
20160: EMPTY
20161: LIST
20162: LIST
20163: LIST
20164: PPUSH
20165: CALL_OW 69
20169: PPUSH
20170: CALL 15064 0 4
// if ruPossition = 3 then
20174: LD_EXP 41
20178: PUSH
20179: LD_INT 3
20181: EQUAL
20182: IFFALSE 20237
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20184: LD_INT 3
20186: PPUSH
20187: LD_INT 15
20189: PPUSH
20190: LD_INT 12
20192: PPUSH
20193: LD_INT 22
20195: PUSH
20196: LD_INT 3
20198: PUSH
20199: EMPTY
20200: LIST
20201: LIST
20202: PUSH
20203: LD_INT 21
20205: PUSH
20206: LD_INT 3
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 30
20215: PUSH
20216: LD_INT 8
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: PPUSH
20228: CALL_OW 69
20232: PPUSH
20233: CALL 15064 0 4
// end ;
20237: END
// every 0 0$1 do
20238: GO 20240
20240: DISABLE
// begin enable ;
20241: ENABLE
// if ruPossition = 1 then
20242: LD_EXP 41
20246: PUSH
20247: LD_INT 1
20249: EQUAL
20250: IFFALSE 20262
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20252: LD_INT 3
20254: PPUSH
20255: LD_INT 10
20257: PPUSH
20258: CALL 14135 0 2
// if ruPossition = 2 then
20262: LD_EXP 41
20266: PUSH
20267: LD_INT 2
20269: EQUAL
20270: IFFALSE 20282
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20272: LD_INT 3
20274: PPUSH
20275: LD_INT 11
20277: PPUSH
20278: CALL 14135 0 2
// if ruPossition = 3 then
20282: LD_EXP 41
20286: PUSH
20287: LD_INT 3
20289: EQUAL
20290: IFFALSE 20302
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20292: LD_INT 3
20294: PPUSH
20295: LD_INT 12
20297: PPUSH
20298: CALL 14135 0 2
// IntBazooka ( 3 , 1 ) ;
20302: LD_INT 3
20304: PPUSH
20305: LD_INT 1
20307: PPUSH
20308: CALL 12934 0 2
// IntBazooka ( 6 , 1 ) ;
20312: LD_INT 6
20314: PPUSH
20315: LD_INT 1
20317: PPUSH
20318: CALL 12934 0 2
// end ;
20322: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20323: LD_EXP 39
20327: PUSH
20328: LD_INT 1
20330: EQUAL
20331: PUSH
20332: LD_EXP 35
20336: PPUSH
20337: CALL_OW 302
20341: AND
20342: PUSH
20343: LD_EXP 35
20347: PPUSH
20348: CALL_OW 255
20352: PUSH
20353: LD_INT 3
20355: EQUAL
20356: AND
20357: PUSH
20358: LD_INT 22
20360: PUSH
20361: LD_INT 3
20363: PUSH
20364: EMPTY
20365: LIST
20366: LIST
20367: PUSH
20368: LD_INT 21
20370: PUSH
20371: LD_INT 2
20373: PUSH
20374: EMPTY
20375: LIST
20376: LIST
20377: PUSH
20378: LD_INT 33
20380: PUSH
20381: LD_INT 3
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: PUSH
20388: EMPTY
20389: LIST
20390: LIST
20391: LIST
20392: PPUSH
20393: CALL_OW 69
20397: PUSH
20398: LD_INT 0
20400: EQUAL
20401: AND
20402: IFFALSE 20610
20404: GO 20406
20406: DISABLE
// begin enable ;
20407: ENABLE
// if Difficulty = 1 then
20408: LD_OWVAR 67
20412: PUSH
20413: LD_INT 1
20415: EQUAL
20416: IFFALSE 20478
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20418: LD_INT 3
20420: PPUSH
20421: LD_EXP 35
20425: PPUSH
20426: LD_INT 5
20428: PPUSH
20429: LD_INT 8
20431: PPUSH
20432: CALL_OW 12
20436: PPUSH
20437: LD_INT 1
20439: PPUSH
20440: LD_INT 43
20442: PUSH
20443: LD_INT 44
20445: PUSH
20446: LD_INT 45
20448: PUSH
20449: LD_INT 46
20451: PUSH
20452: EMPTY
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PPUSH
20458: LD_INT 1
20460: PPUSH
20461: LD_INT 3
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: LD_INT 22
20473: PPUSH
20474: CALL 19044 0 8
// if Difficulty = 2 then
20478: LD_OWVAR 67
20482: PUSH
20483: LD_INT 2
20485: EQUAL
20486: IFFALSE 20544
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20488: LD_INT 3
20490: PPUSH
20491: LD_EXP 35
20495: PPUSH
20496: LD_INT 6
20498: PPUSH
20499: LD_INT 8
20501: PPUSH
20502: CALL_OW 12
20506: PPUSH
20507: LD_INT 1
20509: PPUSH
20510: LD_INT 44
20512: PUSH
20513: LD_INT 45
20515: PUSH
20516: LD_INT 46
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: LIST
20523: PPUSH
20524: LD_INT 1
20526: PPUSH
20527: LD_INT 3
20529: PUSH
20530: LD_INT 3
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PPUSH
20537: LD_INT 22
20539: PPUSH
20540: CALL 19044 0 8
// if Difficulty = 3 then
20544: LD_OWVAR 67
20548: PUSH
20549: LD_INT 3
20551: EQUAL
20552: IFFALSE 20610
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20554: LD_INT 3
20556: PPUSH
20557: LD_EXP 35
20561: PPUSH
20562: LD_INT 7
20564: PPUSH
20565: LD_INT 8
20567: PPUSH
20568: CALL_OW 12
20572: PPUSH
20573: LD_INT 1
20575: PPUSH
20576: LD_INT 44
20578: PUSH
20579: LD_INT 45
20581: PUSH
20582: LD_INT 46
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: LIST
20589: PPUSH
20590: LD_INT 1
20592: PPUSH
20593: LD_INT 3
20595: PUSH
20596: LD_INT 3
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PPUSH
20603: LD_INT 22
20605: PPUSH
20606: CALL 19044 0 8
// end ;
20610: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20611: LD_EXP 50
20615: PUSH
20616: LD_EXP 49
20620: AND
20621: IFFALSE 20742
20623: GO 20625
20625: DISABLE
20626: LD_INT 0
20628: PPUSH
// begin enable ;
20629: ENABLE
// for i in arabianMines do
20630: LD_ADDR_VAR 0 1
20634: PUSH
20635: LD_EXP 50
20639: PUSH
20640: FOR_IN
20641: IFFALSE 20740
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20643: LD_INT 22
20645: PUSH
20646: LD_INT 1
20648: PUSH
20649: EMPTY
20650: LIST
20651: LIST
20652: PUSH
20653: LD_INT 92
20655: PUSH
20656: LD_VAR 0 1
20660: PUSH
20661: LD_INT 1
20663: ARRAY
20664: PUSH
20665: LD_VAR 0 1
20669: PUSH
20670: LD_INT 2
20672: ARRAY
20673: PUSH
20674: LD_INT 3
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PPUSH
20687: CALL_OW 69
20691: IFFALSE 20738
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20693: LD_VAR 0 1
20697: PUSH
20698: LD_INT 1
20700: ARRAY
20701: PPUSH
20702: LD_VAR 0 1
20706: PUSH
20707: LD_INT 2
20709: ARRAY
20710: PPUSH
20711: LD_INT 5
20713: PPUSH
20714: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20718: LD_ADDR_EXP 50
20722: PUSH
20723: LD_EXP 50
20727: PPUSH
20728: LD_VAR 0 1
20732: PPUSH
20733: CALL_OW 3
20737: ST_TO_ADDR
// end ; end ;
20738: GO 20640
20740: POP
20741: POP
// end ; end_of_file
20742: PPOPN 1
20744: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20745: LD_VAR 0 1
20749: PPUSH
20750: CALL_OW 255
20754: PUSH
20755: LD_INT 4
20757: EQUAL
20758: IFFALSE 20772
// SetBName ( building , epsilon ) ;
20760: LD_VAR 0 1
20764: PPUSH
20765: LD_STRING epsilon
20767: PPUSH
20768: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 255
20781: PUSH
20782: LD_INT 1
20784: EQUAL
20785: PUSH
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 266
20795: PUSH
20796: LD_INT 0
20798: EQUAL
20799: AND
20800: IFFALSE 20814
// SetBName ( building , epsilon ) ;
20802: LD_VAR 0 1
20806: PPUSH
20807: LD_STRING epsilon
20809: PPUSH
20810: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20814: LD_VAR 0 1
20818: PPUSH
20819: CALL_OW 255
20823: PUSH
20824: LD_INT 3
20826: EQUAL
20827: PUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 266
20837: PUSH
20838: LD_INT 0
20840: EQUAL
20841: AND
20842: IFFALSE 20856
// SetBName ( building , chuikov ) ;
20844: LD_VAR 0 1
20848: PPUSH
20849: LD_STRING chuikov
20851: PPUSH
20852: CALL_OW 500
// if GetSide ( building ) = 2 then
20856: LD_VAR 0 1
20860: PPUSH
20861: CALL_OW 255
20865: PUSH
20866: LD_INT 2
20868: EQUAL
20869: IFFALSE 20925
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL_OW 266
20880: PUSH
20881: LD_INT 6
20883: EQUAL
20884: PUSH
20885: LD_VAR 0 1
20889: PPUSH
20890: CALL_OW 266
20894: PUSH
20895: LD_INT 9
20897: EQUAL
20898: OR
20899: IFFALSE 20925
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20901: LD_VAR 0 1
20905: PPUSH
20906: LD_INT 10
20908: PPUSH
20909: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20913: LD_VAR 0 1
20917: PPUSH
20918: LD_INT 11
20920: PPUSH
20921: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20925: LD_VAR 0 1
20929: PPUSH
20930: CALL_OW 255
20934: PUSH
20935: LD_INT 3
20937: EQUAL
20938: IFFALSE 20964
// begin if GetBType ( building ) = 2 then
20940: LD_VAR 0 1
20944: PPUSH
20945: CALL_OW 266
20949: PUSH
20950: LD_INT 2
20952: EQUAL
20953: IFFALSE 20964
// AddComUpgrade ( building ) ;
20955: LD_VAR 0 1
20959: PPUSH
20960: CALL_OW 206
// end ; end ;
20964: PPOPN 2
20966: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20967: LD_INT 0
20969: PPUSH
20970: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20971: LD_VAR 0 1
20975: PUSH
20976: LD_INT 22
20978: PUSH
20979: LD_INT 3
20981: PUSH
20982: EMPTY
20983: LIST
20984: LIST
20985: PUSH
20986: LD_INT 23
20988: PUSH
20989: LD_INT 3
20991: PUSH
20992: EMPTY
20993: LIST
20994: LIST
20995: PUSH
20996: LD_INT 21
20998: PUSH
20999: LD_INT 2
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: LIST
21010: PPUSH
21011: CALL_OW 69
21015: IN
21016: PUSH
21017: LD_EXP 58
21021: NOT
21022: AND
21023: IFFALSE 21054
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21025: LD_ADDR_EXP 58
21029: PUSH
21030: LD_VAR 0 1
21034: PPUSH
21035: CALL_OW 250
21039: PUSH
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 251
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: ST_TO_ADDR
// end ;
21054: PPOPN 3
21056: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21057: LD_VAR 0 2
21061: PPUSH
21062: CALL_OW 255
21066: PUSH
21067: LD_INT 3
21069: EQUAL
21070: PUSH
21071: LD_EXP 35
21075: PPUSH
21076: CALL_OW 255
21080: PUSH
21081: LD_INT 3
21083: EQUAL
21084: AND
21085: PUSH
21086: LD_EXP 35
21090: PPUSH
21091: CALL_OW 302
21095: AND
21096: IFFALSE 21112
// ComEnterUnit ( human , ruFab ) ;
21098: LD_VAR 0 2
21102: PPUSH
21103: LD_EXP 35
21107: PPUSH
21108: CALL_OW 120
// end ;
21112: PPOPN 2
21114: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21115: LD_INT 0
21117: PPUSH
21118: PPUSH
21119: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21120: LD_VAR 0 1
21124: PPUSH
21125: CALL_OW 255
21129: PUSH
21130: LD_INT 1
21132: EQUAL
21133: PUSH
21134: LD_EXP 61
21138: PUSH
21139: LD_INT 0
21141: EQUAL
21142: AND
21143: IFFALSE 21345
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21145: LD_VAR 0 1
21149: PPUSH
21150: CALL_OW 266
21154: PUSH
21155: LD_INT 26
21157: EQUAL
21158: PUSH
21159: LD_VAR 0 1
21163: PPUSH
21164: CALL_OW 266
21168: PUSH
21169: LD_INT 27
21171: EQUAL
21172: OR
21173: PUSH
21174: LD_VAR 0 1
21178: PPUSH
21179: CALL_OW 266
21183: PUSH
21184: LD_INT 28
21186: EQUAL
21187: OR
21188: IFFALSE 21345
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21190: LD_INT 22
21192: PUSH
21193: LD_INT 1
21195: PUSH
21196: EMPTY
21197: LIST
21198: LIST
21199: PUSH
21200: LD_INT 2
21202: PUSH
21203: LD_INT 30
21205: PUSH
21206: LD_INT 7
21208: PUSH
21209: EMPTY
21210: LIST
21211: LIST
21212: PUSH
21213: LD_INT 30
21215: PUSH
21216: LD_INT 8
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: EMPTY
21224: LIST
21225: LIST
21226: LIST
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: PPUSH
21232: CALL_OW 69
21236: PUSH
21237: LD_INT 0
21239: GREATER
21240: IFFALSE 21345
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21242: LD_ADDR_VAR 0 2
21246: PUSH
21247: LD_INT 22
21249: PUSH
21250: LD_INT 1
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: LD_INT 30
21262: PUSH
21263: LD_INT 7
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 30
21272: PUSH
21273: LD_INT 8
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: LIST
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PPUSH
21289: CALL_OW 69
21293: PUSH
21294: FOR_IN
21295: IFFALSE 21343
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21297: LD_VAR 0 2
21301: PPUSH
21302: LD_INT 1
21304: PPUSH
21305: CALL_OW 268
21309: PUSH
21310: LD_INT 11
21312: EQUAL
21313: PUSH
21314: LD_VAR 0 2
21318: PPUSH
21319: LD_INT 2
21321: PPUSH
21322: CALL_OW 268
21326: PUSH
21327: LD_INT 11
21329: EQUAL
21330: OR
21331: IFFALSE 21341
// eventVar1 = 1 ;
21333: LD_ADDR_EXP 61
21337: PUSH
21338: LD_INT 1
21340: ST_TO_ADDR
21341: GO 21294
21343: POP
21344: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21345: LD_VAR 0 1
21349: PPUSH
21350: CALL_OW 255
21354: PUSH
21355: LD_INT 3
21357: EQUAL
21358: IFFALSE 21838
// begin if GetBType ( building ) = b_depot then
21360: LD_VAR 0 1
21364: PPUSH
21365: CALL_OW 266
21369: PUSH
21370: LD_INT 0
21372: EQUAL
21373: IFFALSE 21445
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21375: LD_VAR 0 1
21379: PPUSH
21380: CALL_OW 274
21384: PPUSH
21385: LD_INT 1
21387: PPUSH
21388: LD_INT 5000
21390: PPUSH
21391: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21395: LD_VAR 0 1
21399: PPUSH
21400: CALL_OW 274
21404: PPUSH
21405: LD_INT 2
21407: PPUSH
21408: LD_INT 5000
21410: PPUSH
21411: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21415: LD_VAR 0 1
21419: PPUSH
21420: CALL_OW 274
21424: PPUSH
21425: LD_INT 3
21427: PPUSH
21428: LD_INT 5000
21430: PPUSH
21431: CALL_OW 277
// ruDepot = building ;
21435: LD_ADDR_EXP 30
21439: PUSH
21440: LD_VAR 0 1
21444: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21445: LD_VAR 0 1
21449: PPUSH
21450: CALL_OW 266
21454: PUSH
21455: LD_INT 0
21457: EQUAL
21458: PUSH
21459: LD_VAR 0 1
21463: PPUSH
21464: CALL_OW 266
21468: PUSH
21469: LD_INT 2
21471: EQUAL
21472: OR
21473: PUSH
21474: LD_VAR 0 1
21478: PPUSH
21479: CALL_OW 266
21483: PUSH
21484: LD_INT 4
21486: EQUAL
21487: OR
21488: IFFALSE 21499
// ComUpgrade ( building ) ;
21490: LD_VAR 0 1
21494: PPUSH
21495: CALL_OW 146
// if GetBType ( building ) = b_lab then
21499: LD_VAR 0 1
21503: PPUSH
21504: CALL_OW 266
21508: PUSH
21509: LD_INT 6
21511: EQUAL
21512: IFFALSE 21715
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21514: LD_INT 22
21516: PUSH
21517: LD_INT 3
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 30
21526: PUSH
21527: LD_INT 8
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: EMPTY
21535: LIST
21536: LIST
21537: PPUSH
21538: CALL_OW 69
21542: PUSH
21543: LD_INT 0
21545: EQUAL
21546: IFFALSE 21584
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21548: LD_VAR 0 1
21552: PPUSH
21553: LD_INT 10
21555: PPUSH
21556: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21560: LD_VAR 0 1
21564: PPUSH
21565: LD_INT 12
21567: PPUSH
21568: CALL_OW 207
// ruLab1 = building ;
21572: LD_ADDR_EXP 31
21576: PUSH
21577: LD_VAR 0 1
21581: ST_TO_ADDR
// end else
21582: GO 21618
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21584: LD_VAR 0 1
21588: PPUSH
21589: LD_INT 11
21591: PPUSH
21592: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21596: LD_VAR 0 1
21600: PPUSH
21601: LD_INT 14
21603: PPUSH
21604: CALL_OW 207
// ruLab2 = building ;
21608: LD_ADDR_EXP 32
21612: PUSH
21613: LD_VAR 0 1
21617: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21618: LD_INT 3
21620: PPUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: LD_INT 3
21628: PPUSH
21629: CALL 14050 0 3
// if ruDestroyedBuildings > 0 then
21633: LD_EXP 42
21637: PUSH
21638: LD_INT 0
21640: GREATER
21641: IFFALSE 21715
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21643: LD_ADDR_EXP 42
21647: PUSH
21648: LD_EXP 42
21652: PPUSH
21653: LD_INT 1
21655: PPUSH
21656: CALL_OW 3
21660: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21661: LD_ADDR_EXP 42
21665: PUSH
21666: LD_EXP 42
21670: PPUSH
21671: LD_INT 1
21673: PPUSH
21674: CALL_OW 3
21678: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21679: LD_ADDR_EXP 42
21683: PUSH
21684: LD_EXP 42
21688: PPUSH
21689: LD_INT 1
21691: PPUSH
21692: CALL_OW 3
21696: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21697: LD_ADDR_EXP 42
21701: PUSH
21702: LD_EXP 42
21706: PPUSH
21707: LD_INT 1
21709: PPUSH
21710: CALL_OW 3
21714: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 266
21724: PUSH
21725: LD_INT 32
21727: EQUAL
21728: IFFALSE 21765
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21730: LD_VAR 0 1
21734: PPUSH
21735: LD_INT 44
21737: PUSH
21738: LD_INT 45
21740: PUSH
21741: LD_INT 46
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PPUSH
21752: LD_INT 3
21754: PPUSH
21755: CALL_OW 12
21759: ARRAY
21760: PPUSH
21761: CALL_OW 208
// if GetBType ( building ) = b_turret then
21765: LD_VAR 0 1
21769: PPUSH
21770: CALL_OW 266
21774: PUSH
21775: LD_INT 33
21777: EQUAL
21778: IFFALSE 21815
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21780: LD_VAR 0 1
21784: PPUSH
21785: LD_INT 44
21787: PUSH
21788: LD_INT 45
21790: PUSH
21791: LD_INT 46
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: PUSH
21799: LD_INT 1
21801: PPUSH
21802: LD_INT 3
21804: PPUSH
21805: CALL_OW 12
21809: ARRAY
21810: PPUSH
21811: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21815: LD_VAR 0 1
21819: PPUSH
21820: CALL_OW 266
21824: PUSH
21825: LD_INT 24
21827: EQUAL
21828: IFFALSE 21838
// russianAI = 1 ;
21830: LD_ADDR_EXP 39
21834: PUSH
21835: LD_INT 1
21837: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21838: LD_VAR 0 1
21842: PPUSH
21843: CALL_OW 255
21847: PUSH
21848: LD_INT 2
21850: EQUAL
21851: IFFALSE 22421
// begin if GetBType ( building ) = b_breastwork then
21853: LD_VAR 0 1
21857: PPUSH
21858: CALL_OW 266
21862: PUSH
21863: LD_INT 31
21865: EQUAL
21866: IFFALSE 22012
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
21868: LD_ADDR_VAR 0 3
21872: PUSH
21873: LD_INT 22
21875: PUSH
21876: LD_INT 2
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: LD_INT 2
21885: PUSH
21886: LD_INT 25
21888: PUSH
21889: LD_INT 1
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: PUSH
21896: LD_INT 25
21898: PUSH
21899: LD_INT 8
21901: PUSH
21902: EMPTY
21903: LIST
21904: LIST
21905: PUSH
21906: EMPTY
21907: LIST
21908: LIST
21909: LIST
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: PPUSH
21915: CALL_OW 69
21919: PUSH
21920: LD_EXP 26
21924: DIFF
21925: ST_TO_ADDR
// if not sol then
21926: LD_VAR 0 3
21930: NOT
21931: IFFALSE 21935
// exit ;
21933: GO 22421
// for i in sol do
21935: LD_ADDR_VAR 0 2
21939: PUSH
21940: LD_VAR 0 3
21944: PUSH
21945: FOR_IN
21946: IFFALSE 22010
// if not GetTag ( i ) then
21948: LD_VAR 0 2
21952: PPUSH
21953: CALL_OW 110
21957: NOT
21958: IFFALSE 22008
// begin if IsInUnit ( i ) then
21960: LD_VAR 0 2
21964: PPUSH
21965: CALL_OW 310
21969: IFFALSE 21980
// ComExitBuilding ( i ) ;
21971: LD_VAR 0 2
21975: PPUSH
21976: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
21980: LD_VAR 0 2
21984: PPUSH
21985: LD_VAR 0 1
21989: PPUSH
21990: CALL_OW 180
// SetTag ( i , 11 ) ;
21994: LD_VAR 0 2
21998: PPUSH
21999: LD_INT 11
22001: PPUSH
22002: CALL_OW 109
// break ;
22006: GO 22010
// end ;
22008: GO 21945
22010: POP
22011: POP
// end ; if GetBType ( building ) = b_depot then
22012: LD_VAR 0 1
22016: PPUSH
22017: CALL_OW 266
22021: PUSH
22022: LD_INT 0
22024: EQUAL
22025: IFFALSE 22111
// begin arDepot = building ;
22027: LD_ADDR_EXP 43
22031: PUSH
22032: LD_VAR 0 1
22036: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22037: LD_INT 38
22039: PUSH
22040: LD_INT 47
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: PPUSH
22047: LD_INT 71
22049: PPUSH
22050: LD_INT 19
22052: PPUSH
22053: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22057: LD_VAR 0 1
22061: PPUSH
22062: CALL_OW 274
22066: PPUSH
22067: LD_INT 1
22069: PPUSH
22070: LD_INT 500
22072: PPUSH
22073: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 274
22086: PPUSH
22087: LD_INT 3
22089: PPUSH
22090: LD_INT 30
22092: PPUSH
22093: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22097: LD_EXP 26
22101: PPUSH
22102: LD_EXP 43
22106: PPUSH
22107: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22111: LD_VAR 0 1
22115: PPUSH
22116: CALL_OW 266
22120: PUSH
22121: LD_INT 6
22123: EQUAL
22124: PUSH
22125: LD_VAR 0 1
22129: PPUSH
22130: CALL_OW 266
22134: PUSH
22135: LD_INT 9
22137: EQUAL
22138: OR
22139: IFFALSE 22190
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22141: LD_VAR 0 1
22145: PPUSH
22146: LD_INT 10
22148: PPUSH
22149: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22153: LD_VAR 0 1
22157: PPUSH
22158: LD_INT 11
22160: PPUSH
22161: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
22165: LD_INT 2
22167: PPUSH
22168: LD_VAR 0 1
22172: PPUSH
22173: LD_INT 2
22175: PPUSH
22176: CALL 14050 0 3
// arLab = building ;
22180: LD_ADDR_EXP 44
22184: PUSH
22185: LD_VAR 0 1
22189: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22190: LD_VAR 0 1
22194: PPUSH
22195: CALL_OW 266
22199: PUSH
22200: LD_INT 2
22202: EQUAL
22203: PUSH
22204: LD_VAR 0 1
22208: PPUSH
22209: CALL_OW 266
22213: PUSH
22214: LD_INT 4
22216: EQUAL
22217: OR
22218: IFFALSE 22229
// ComUpgrade ( building ) ;
22220: LD_VAR 0 1
22224: PPUSH
22225: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 266
22238: PUSH
22239: LD_INT 27
22241: EQUAL
22242: IFFALSE 22421
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22244: LD_INT 22
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 30
22256: PUSH
22257: LD_INT 27
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PPUSH
22268: CALL_OW 69
22272: PUSH
22273: LD_INT 2
22275: EQUAL
22276: IFFALSE 22421
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22278: LD_ADDR_VAR 0 2
22282: PUSH
22283: LD_INT 22
22285: PUSH
22286: LD_INT 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 21
22295: PUSH
22296: LD_INT 1
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: LD_INT 25
22305: PUSH
22306: LD_INT 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: LIST
22317: PPUSH
22318: CALL_OW 69
22322: PUSH
22323: LD_INT 1
22325: ARRAY
22326: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22327: LD_VAR 0 2
22331: PPUSH
22332: LD_INT 92
22334: PPUSH
22335: LD_INT 34
22337: PPUSH
22338: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22342: LD_VAR 0 2
22346: PPUSH
22347: LD_INT 82
22349: PPUSH
22350: LD_INT 57
22352: PPUSH
22353: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22357: LD_VAR 0 2
22361: PPUSH
22362: LD_INT 36
22364: PPUSH
22365: LD_INT 28
22367: PPUSH
22368: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22372: LD_INT 22
22374: PUSH
22375: LD_INT 2
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: LD_INT 21
22384: PUSH
22385: LD_INT 1
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PUSH
22392: LD_INT 25
22394: PUSH
22395: LD_INT 2
22397: PUSH
22398: EMPTY
22399: LIST
22400: LIST
22401: PUSH
22402: EMPTY
22403: LIST
22404: LIST
22405: LIST
22406: PPUSH
22407: CALL_OW 69
22411: PPUSH
22412: LD_EXP 43
22416: PPUSH
22417: CALL_OW 180
// end ; end ; end ;
22421: PPOPN 4
22423: END
// on UpgradeComplete ( building ) do var i ;
22424: LD_INT 0
22426: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22427: LD_VAR 0 1
22431: PPUSH
22432: CALL_OW 255
22436: PUSH
22437: LD_INT 1
22439: EQUAL
22440: PUSH
22441: LD_EXP 61
22445: PUSH
22446: LD_INT 0
22448: EQUAL
22449: AND
22450: IFFALSE 22648
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22452: LD_VAR 0 1
22456: PPUSH
22457: CALL_OW 266
22461: PUSH
22462: LD_INT 7
22464: EQUAL
22465: PUSH
22466: LD_VAR 0 1
22470: PPUSH
22471: CALL_OW 266
22475: PUSH
22476: LD_INT 8
22478: EQUAL
22479: OR
22480: IFFALSE 22648
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22482: LD_INT 22
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: LD_INT 2
22494: PUSH
22495: LD_INT 30
22497: PUSH
22498: LD_INT 26
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PUSH
22505: LD_INT 30
22507: PUSH
22508: LD_INT 27
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: PUSH
22515: LD_INT 30
22517: PUSH
22518: LD_INT 28
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: PUSH
22531: EMPTY
22532: LIST
22533: LIST
22534: PPUSH
22535: CALL_OW 69
22539: PUSH
22540: LD_INT 0
22542: GREATER
22543: IFFALSE 22648
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22545: LD_ADDR_VAR 0 2
22549: PUSH
22550: LD_INT 22
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: LD_INT 2
22562: PUSH
22563: LD_INT 30
22565: PUSH
22566: LD_INT 7
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 8
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PPUSH
22592: CALL_OW 69
22596: PUSH
22597: FOR_IN
22598: IFFALSE 22646
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22600: LD_VAR 0 2
22604: PPUSH
22605: LD_INT 1
22607: PPUSH
22608: CALL_OW 268
22612: PUSH
22613: LD_INT 11
22615: EQUAL
22616: PUSH
22617: LD_VAR 0 2
22621: PPUSH
22622: LD_INT 2
22624: PPUSH
22625: CALL_OW 268
22629: PUSH
22630: LD_INT 11
22632: EQUAL
22633: OR
22634: IFFALSE 22644
// eventVar1 = 1 ;
22636: LD_ADDR_EXP 61
22640: PUSH
22641: LD_INT 1
22643: ST_TO_ADDR
22644: GO 22597
22646: POP
22647: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 255
22657: PUSH
22658: LD_INT 2
22660: EQUAL
22661: IFFALSE 22766
// begin if GetBType ( building ) = b_barracks then
22663: LD_VAR 0 1
22667: PPUSH
22668: CALL_OW 266
22672: PUSH
22673: LD_INT 5
22675: EQUAL
22676: IFFALSE 22766
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22678: LD_ADDR_VAR 0 2
22682: PUSH
22683: LD_INT 22
22685: PUSH
22686: LD_INT 2
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: PUSH
22693: LD_INT 25
22695: PUSH
22696: LD_INT 1
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: PUSH
22703: LD_INT 3
22705: PUSH
22706: LD_INT 54
22708: PUSH
22709: EMPTY
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: LIST
22720: PPUSH
22721: CALL_OW 69
22725: PUSH
22726: LD_EXP 26
22730: PUSH
22731: EMPTY
22732: LIST
22733: DIFF
22734: PUSH
22735: FOR_IN
22736: IFFALSE 22754
// ComEnterUnit ( i , building ) ;
22738: LD_VAR 0 2
22742: PPUSH
22743: LD_VAR 0 1
22747: PPUSH
22748: CALL_OW 120
22752: GO 22735
22754: POP
22755: POP
// arArm = building ;
22756: LD_ADDR_EXP 45
22760: PUSH
22761: LD_VAR 0 1
22765: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22766: LD_VAR 0 1
22770: PPUSH
22771: CALL_OW 255
22775: PUSH
22776: LD_INT 3
22778: EQUAL
22779: IFFALSE 23252
// begin if GetBType ( building ) = b_factory then
22781: LD_VAR 0 1
22785: PPUSH
22786: CALL_OW 266
22790: PUSH
22791: LD_INT 3
22793: EQUAL
22794: IFFALSE 22861
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22796: LD_ADDR_VAR 0 2
22800: PUSH
22801: LD_INT 22
22803: PUSH
22804: LD_INT 3
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 25
22813: PUSH
22814: LD_INT 3
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PUSH
22821: EMPTY
22822: LIST
22823: LIST
22824: PPUSH
22825: CALL_OW 69
22829: PUSH
22830: FOR_IN
22831: IFFALSE 22849
// ComEnterUnit ( i , building ) ;
22833: LD_VAR 0 2
22837: PPUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 120
22847: GO 22830
22849: POP
22850: POP
// ruFab = building ;
22851: LD_ADDR_EXP 35
22855: PUSH
22856: LD_VAR 0 1
22860: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22861: LD_INT 22
22863: PUSH
22864: LD_INT 3
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: PUSH
22871: LD_INT 21
22873: PUSH
22874: LD_INT 3
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 8
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: PPUSH
22896: CALL_OW 69
22900: PUSH
22901: LD_INT 2
22903: EQUAL
22904: IFFALSE 23112
// begin for i = 1 to 2 do
22906: LD_ADDR_VAR 0 2
22910: PUSH
22911: DOUBLE
22912: LD_INT 1
22914: DEC
22915: ST_TO_ADDR
22916: LD_INT 2
22918: PUSH
22919: FOR_TO
22920: IFFALSE 23007
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22922: LD_INT 22
22924: PUSH
22925: LD_INT 3
22927: PUSH
22928: EMPTY
22929: LIST
22930: LIST
22931: PUSH
22932: LD_INT 25
22934: PUSH
22935: LD_INT 4
22937: PUSH
22938: EMPTY
22939: LIST
22940: LIST
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: PPUSH
22946: CALL_OW 69
22950: PUSH
22951: LD_VAR 0 2
22955: ARRAY
22956: PPUSH
22957: LD_INT 22
22959: PUSH
22960: LD_INT 3
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: PUSH
22967: LD_INT 21
22969: PUSH
22970: LD_INT 3
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 30
22979: PUSH
22980: LD_INT 8
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: LIST
22991: PPUSH
22992: CALL_OW 69
22996: PUSH
22997: LD_INT 1
22999: ARRAY
23000: PPUSH
23001: CALL_OW 120
23005: GO 22919
23007: POP
23008: POP
// for i = 3 to 4 do
23009: LD_ADDR_VAR 0 2
23013: PUSH
23014: DOUBLE
23015: LD_INT 3
23017: DEC
23018: ST_TO_ADDR
23019: LD_INT 4
23021: PUSH
23022: FOR_TO
23023: IFFALSE 23110
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23025: LD_INT 22
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 25
23037: PUSH
23038: LD_INT 4
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: PPUSH
23049: CALL_OW 69
23053: PUSH
23054: LD_VAR 0 2
23058: ARRAY
23059: PPUSH
23060: LD_INT 22
23062: PUSH
23063: LD_INT 3
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: PUSH
23070: LD_INT 21
23072: PUSH
23073: LD_INT 3
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: PUSH
23080: LD_INT 30
23082: PUSH
23083: LD_INT 8
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: LIST
23094: PPUSH
23095: CALL_OW 69
23099: PUSH
23100: LD_INT 2
23102: ARRAY
23103: PPUSH
23104: CALL_OW 120
23108: GO 23022
23110: POP
23111: POP
// end ; if GetBType ( building ) = b_barracks then
23112: LD_VAR 0 1
23116: PPUSH
23117: CALL_OW 266
23121: PUSH
23122: LD_INT 5
23124: EQUAL
23125: IFFALSE 23252
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: LD_INT 22
23134: PUSH
23135: LD_INT 3
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PUSH
23142: LD_INT 25
23144: PUSH
23145: LD_INT 1
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: PUSH
23152: LD_INT 3
23154: PUSH
23155: LD_INT 54
23157: PUSH
23158: EMPTY
23159: LIST
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: PPUSH
23170: CALL_OW 69
23174: PUSH
23175: FOR_IN
23176: IFFALSE 23194
// ComEnterUnit ( i , building ) ;
23178: LD_VAR 0 2
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 120
23192: GO 23175
23194: POP
23195: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23196: LD_INT 22
23198: PUSH
23199: LD_INT 3
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 30
23208: PUSH
23209: LD_INT 5
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: PUSH
23225: LD_INT 0
23227: EQUAL
23228: IFFALSE 23242
// ruArm1 = building else
23230: LD_ADDR_EXP 33
23234: PUSH
23235: LD_VAR 0 1
23239: ST_TO_ADDR
23240: GO 23252
// ruArm2 = building ;
23242: LD_ADDR_EXP 34
23246: PUSH
23247: LD_VAR 0 1
23251: ST_TO_ADDR
// end ; end ; end ;
23252: PPOPN 2
23254: END
// on EnterBuilding ( building , human ) do var rnd ;
23255: LD_INT 0
23257: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23258: LD_VAR 0 2
23262: PPUSH
23263: CALL_OW 255
23267: PUSH
23268: LD_INT 2
23270: EQUAL
23271: PUSH
23272: LD_VAR 0 2
23276: PPUSH
23277: CALL_OW 257
23281: PUSH
23282: LD_INT 1
23284: EQUAL
23285: AND
23286: PUSH
23287: LD_VAR 0 1
23291: PUSH
23292: LD_EXP 45
23296: EQUAL
23297: AND
23298: IFFALSE 23345
// begin wait ( 0 0$1 ) ;
23300: LD_INT 35
23302: PPUSH
23303: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23307: LD_ADDR_VAR 0 3
23311: PUSH
23312: LD_INT 1
23314: PPUSH
23315: LD_INT 100
23317: PPUSH
23318: CALL_OW 12
23322: ST_TO_ADDR
// if rnd > 50 then
23323: LD_VAR 0 3
23327: PUSH
23328: LD_INT 50
23330: GREATER
23331: IFFALSE 23345
// SetClass ( human , class_mortar ) ;
23333: LD_VAR 0 2
23337: PPUSH
23338: LD_INT 8
23340: PPUSH
23341: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
23345: LD_VAR 0 2
23349: PUSH
23350: LD_INT 22
23352: PUSH
23353: LD_INT 2
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 25
23362: PUSH
23363: LD_INT 12
23365: PUSH
23366: EMPTY
23367: LIST
23368: LIST
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PPUSH
23374: CALL_OW 69
23378: IN
23379: IFFALSE 23429
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
23381: LD_VAR 0 1
23385: PPUSH
23386: CALL_OW 266
23390: PUSH
23391: LD_INT 0
23393: PUSH
23394: LD_INT 1
23396: PUSH
23397: EMPTY
23398: LIST
23399: LIST
23400: IN
23401: IFFALSE 23417
// SetClass ( human , class_apeman_engineer ) else
23403: LD_VAR 0 2
23407: PPUSH
23408: LD_INT 16
23410: PPUSH
23411: CALL_OW 336
23415: GO 23429
// SetClass ( human , class_apeman_soldier ) ;
23417: LD_VAR 0 2
23421: PPUSH
23422: LD_INT 15
23424: PPUSH
23425: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23429: LD_VAR 0 2
23433: PPUSH
23434: CALL_OW 255
23438: PUSH
23439: LD_INT 3
23441: EQUAL
23442: PUSH
23443: LD_VAR 0 2
23447: PPUSH
23448: CALL_OW 257
23452: PUSH
23453: LD_INT 1
23455: EQUAL
23456: AND
23457: PUSH
23458: LD_VAR 0 1
23462: PUSH
23463: LD_EXP 33
23467: EQUAL
23468: PUSH
23469: LD_VAR 0 1
23473: PUSH
23474: LD_EXP 34
23478: EQUAL
23479: OR
23480: PUSH
23481: EMPTY
23482: LIST
23483: AND
23484: IFFALSE 23505
// begin wait ( 0 0$1 ) ;
23486: LD_INT 35
23488: PPUSH
23489: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23493: LD_VAR 0 2
23497: PPUSH
23498: LD_INT 9
23500: PPUSH
23501: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23505: LD_VAR 0 2
23509: PPUSH
23510: CALL_OW 255
23514: PUSH
23515: LD_INT 3
23517: EQUAL
23518: PUSH
23519: LD_VAR 0 2
23523: PPUSH
23524: CALL_OW 257
23528: PUSH
23529: LD_INT 9
23531: EQUAL
23532: AND
23533: PUSH
23534: LD_VAR 0 1
23538: PPUSH
23539: CALL_OW 266
23543: PUSH
23544: LD_INT 32
23546: EQUAL
23547: AND
23548: IFFALSE 23569
// begin wait ( 0 0$1 ) ;
23550: LD_INT 35
23552: PPUSH
23553: CALL_OW 67
// SetClass ( human , 1 ) ;
23557: LD_VAR 0 2
23561: PPUSH
23562: LD_INT 1
23564: PPUSH
23565: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23569: LD_VAR 0 2
23573: PPUSH
23574: CALL_OW 255
23578: PUSH
23579: LD_INT 3
23581: EQUAL
23582: PUSH
23583: LD_VAR 0 2
23587: PPUSH
23588: CALL_OW 257
23592: PUSH
23593: LD_INT 3
23595: EQUAL
23596: AND
23597: PUSH
23598: LD_VAR 0 1
23602: PUSH
23603: LD_EXP 35
23607: EQUAL
23608: AND
23609: IFFALSE 23623
// SetLives ( human , 1000 ) ;
23611: LD_VAR 0 2
23615: PPUSH
23616: LD_INT 1000
23618: PPUSH
23619: CALL_OW 234
// end ;
23623: PPOPN 3
23625: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23626: LD_VAR 0 1
23630: PUSH
23631: LD_INT 1
23633: EQUAL
23634: PUSH
23635: LD_VAR 0 2
23639: PUSH
23640: LD_INT 2
23642: EQUAL
23643: AND
23644: PUSH
23645: LD_INT 1
23647: PPUSH
23648: LD_INT 2
23650: PPUSH
23651: CALL_OW 81
23655: PUSH
23656: LD_INT 1
23658: EQUAL
23659: AND
23660: IFFALSE 23681
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23662: LD_EXP 24
23666: PPUSH
23667: LD_STRING D6b-Pow-1
23669: PPUSH
23670: CALL_OW 94
// YouLost ( Powell ) ;
23674: LD_STRING Powell
23676: PPUSH
23677: CALL_OW 104
// end ; end ;
23681: PPOPN 2
23683: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23684: LD_INT 23
23686: PPUSH
23687: LD_INT 22
23689: PUSH
23690: LD_INT 1
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: LD_INT 21
23699: PUSH
23700: LD_INT 3
23702: PUSH
23703: EMPTY
23704: LIST
23705: LIST
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PPUSH
23711: CALL_OW 70
23715: PUSH
23716: LD_INT 23
23718: PPUSH
23719: LD_INT 22
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 21
23731: PUSH
23732: LD_INT 2
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 70
23747: OR
23748: PUSH
23749: LD_INT 1
23751: PPUSH
23752: LD_INT 2
23754: PPUSH
23755: CALL_OW 81
23759: PUSH
23760: LD_INT 1
23762: EQUAL
23763: AND
23764: IFFALSE 23788
23766: GO 23768
23768: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23769: LD_EXP 24
23773: PPUSH
23774: LD_STRING D6b-Pow-1
23776: PPUSH
23777: CALL_OW 94
// YouLost ( Powell ) ;
23781: LD_STRING Powell
23783: PPUSH
23784: CALL_OW 104
// end ;
23788: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23789: LD_VAR 0 1
23793: PUSH
23794: LD_EXP 1
23798: EQUAL
23799: IFFALSE 23808
// YouLost ( JMM ) ;
23801: LD_STRING JMM
23803: PPUSH
23804: CALL_OW 104
// if unit = Khatam then
23808: LD_VAR 0 1
23812: PUSH
23813: LD_EXP 14
23817: EQUAL
23818: IFFALSE 23828
// KhatamStatus = 0 ;
23820: LD_ADDR_EXP 52
23824: PUSH
23825: LD_INT 0
23827: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 255
23837: PUSH
23838: LD_INT 3
23840: EQUAL
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 247
23851: PUSH
23852: LD_INT 3
23854: EQUAL
23855: AND
23856: IFFALSE 24548
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 266
23867: PUSH
23868: LD_INT 31
23870: EQUAL
23871: PUSH
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 266
23881: PUSH
23882: LD_INT 32
23884: EQUAL
23885: OR
23886: PUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 266
23896: PUSH
23897: LD_INT 36
23899: EQUAL
23900: OR
23901: PUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 266
23911: PUSH
23912: LD_INT 0
23914: EQUAL
23915: OR
23916: PUSH
23917: LD_VAR 0 1
23921: PPUSH
23922: CALL_OW 266
23926: PUSH
23927: LD_INT 24
23929: EQUAL
23930: OR
23931: PUSH
23932: LD_VAR 0 1
23936: PPUSH
23937: CALL_OW 266
23941: PUSH
23942: LD_INT 17
23944: EQUAL
23945: OR
23946: PUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL_OW 266
23956: PUSH
23957: LD_INT 25
23959: EQUAL
23960: OR
23961: PUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 266
23971: PUSH
23972: LD_INT 19
23974: EQUAL
23975: OR
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 266
23986: PUSH
23987: LD_INT 20
23989: EQUAL
23990: OR
23991: PUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 266
24001: PUSH
24002: LD_INT 18
24004: EQUAL
24005: OR
24006: PUSH
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 266
24016: PUSH
24017: LD_INT 21
24019: EQUAL
24020: OR
24021: PUSH
24022: LD_VAR 0 1
24026: PPUSH
24027: CALL_OW 266
24031: PUSH
24032: LD_INT 23
24034: EQUAL
24035: OR
24036: PUSH
24037: LD_VAR 0 1
24041: PPUSH
24042: CALL_OW 266
24046: PUSH
24047: LD_INT 16
24049: EQUAL
24050: OR
24051: PUSH
24052: LD_VAR 0 1
24056: PPUSH
24057: CALL_OW 266
24061: PUSH
24062: LD_INT 6
24064: EQUAL
24065: OR
24066: PUSH
24067: LD_VAR 0 1
24071: PPUSH
24072: CALL_OW 266
24076: PUSH
24077: LD_INT 29
24079: EQUAL
24080: OR
24081: PUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 266
24091: PUSH
24092: LD_INT 26
24094: EQUAL
24095: OR
24096: PUSH
24097: LD_VAR 0 1
24101: PPUSH
24102: CALL_OW 266
24106: PUSH
24107: LD_INT 30
24109: EQUAL
24110: OR
24111: PUSH
24112: LD_VAR 0 1
24116: PPUSH
24117: CALL_OW 266
24121: PUSH
24122: LD_INT 28
24124: EQUAL
24125: OR
24126: PUSH
24127: LD_VAR 0 1
24131: PPUSH
24132: CALL_OW 266
24136: PUSH
24137: LD_INT 27
24139: EQUAL
24140: OR
24141: PUSH
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 266
24151: PUSH
24152: LD_INT 33
24154: EQUAL
24155: OR
24156: PUSH
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 266
24166: PUSH
24167: LD_INT 2
24169: EQUAL
24170: OR
24171: PUSH
24172: LD_VAR 0 1
24176: PPUSH
24177: CALL_OW 266
24181: PUSH
24182: LD_INT 4
24184: EQUAL
24185: OR
24186: IFFALSE 24272
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24188: LD_ADDR_EXP 42
24192: PUSH
24193: LD_EXP 42
24197: PUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 266
24207: ADD
24208: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24209: LD_ADDR_EXP 42
24213: PUSH
24214: LD_EXP 42
24218: PUSH
24219: LD_VAR 0 1
24223: PPUSH
24224: CALL_OW 250
24228: ADD
24229: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24230: LD_ADDR_EXP 42
24234: PUSH
24235: LD_EXP 42
24239: PUSH
24240: LD_VAR 0 1
24244: PPUSH
24245: CALL_OW 251
24249: ADD
24250: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24251: LD_ADDR_EXP 42
24255: PUSH
24256: LD_EXP 42
24260: PUSH
24261: LD_VAR 0 1
24265: PPUSH
24266: CALL_OW 254
24270: ADD
24271: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: PUSH
24282: LD_INT 1
24284: EQUAL
24285: IFFALSE 24364
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24287: LD_ADDR_EXP 42
24291: PUSH
24292: LD_EXP 42
24296: PUSH
24297: LD_INT 0
24299: ADD
24300: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24301: LD_ADDR_EXP 42
24305: PUSH
24306: LD_EXP 42
24310: PUSH
24311: LD_VAR 0 1
24315: PPUSH
24316: CALL_OW 250
24320: ADD
24321: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24322: LD_ADDR_EXP 42
24326: PUSH
24327: LD_EXP 42
24331: PUSH
24332: LD_VAR 0 1
24336: PPUSH
24337: CALL_OW 251
24341: ADD
24342: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24343: LD_ADDR_EXP 42
24347: PUSH
24348: LD_EXP 42
24352: PUSH
24353: LD_VAR 0 1
24357: PPUSH
24358: CALL_OW 254
24362: ADD
24363: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24364: LD_VAR 0 1
24368: PPUSH
24369: CALL_OW 266
24373: PUSH
24374: LD_INT 3
24376: EQUAL
24377: IFFALSE 24456
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24379: LD_ADDR_EXP 42
24383: PUSH
24384: LD_EXP 42
24388: PUSH
24389: LD_INT 2
24391: ADD
24392: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24393: LD_ADDR_EXP 42
24397: PUSH
24398: LD_EXP 42
24402: PUSH
24403: LD_VAR 0 1
24407: PPUSH
24408: CALL_OW 250
24412: ADD
24413: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24414: LD_ADDR_EXP 42
24418: PUSH
24419: LD_EXP 42
24423: PUSH
24424: LD_VAR 0 1
24428: PPUSH
24429: CALL_OW 251
24433: ADD
24434: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24435: LD_ADDR_EXP 42
24439: PUSH
24440: LD_EXP 42
24444: PUSH
24445: LD_VAR 0 1
24449: PPUSH
24450: CALL_OW 254
24454: ADD
24455: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 266
24465: PUSH
24466: LD_INT 5
24468: EQUAL
24469: IFFALSE 24548
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24471: LD_ADDR_EXP 42
24475: PUSH
24476: LD_EXP 42
24480: PUSH
24481: LD_INT 4
24483: ADD
24484: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24485: LD_ADDR_EXP 42
24489: PUSH
24490: LD_EXP 42
24494: PUSH
24495: LD_VAR 0 1
24499: PPUSH
24500: CALL_OW 250
24504: ADD
24505: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24506: LD_ADDR_EXP 42
24510: PUSH
24511: LD_EXP 42
24515: PUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 251
24525: ADD
24526: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24527: LD_ADDR_EXP 42
24531: PUSH
24532: LD_EXP 42
24536: PUSH
24537: LD_VAR 0 1
24541: PPUSH
24542: CALL_OW 254
24546: ADD
24547: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24548: LD_VAR 0 1
24552: PPUSH
24553: CALL_OW 257
24557: PUSH
24558: LD_INT 3
24560: EQUAL
24561: PUSH
24562: LD_VAR 0 1
24566: PPUSH
24567: CALL_OW 255
24571: PUSH
24572: LD_INT 3
24574: EQUAL
24575: AND
24576: PUSH
24577: LD_EXP 35
24581: PPUSH
24582: CALL_OW 302
24586: AND
24587: PUSH
24588: LD_EXP 35
24592: PPUSH
24593: CALL_OW 255
24597: PUSH
24598: LD_INT 3
24600: EQUAL
24601: AND
24602: IFFALSE 24672
// begin uc_side = 3 ;
24604: LD_ADDR_OWVAR 20
24608: PUSH
24609: LD_INT 3
24611: ST_TO_ADDR
// uc_nation = 3 ;
24612: LD_ADDR_OWVAR 21
24616: PUSH
24617: LD_INT 3
24619: ST_TO_ADDR
// hc_gallery :=  ;
24620: LD_ADDR_OWVAR 33
24624: PUSH
24625: LD_STRING 
24627: ST_TO_ADDR
// hc_name :=  ;
24628: LD_ADDR_OWVAR 26
24632: PUSH
24633: LD_STRING 
24635: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24636: LD_INT 0
24638: PPUSH
24639: LD_EXP 36
24643: PPUSH
24644: LD_EXP 37
24648: PPUSH
24649: CALL_OW 12
24653: PPUSH
24654: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24658: CALL_OW 44
24662: PPUSH
24663: LD_EXP 35
24667: PPUSH
24668: CALL_OW 52
// end ; end ;
24672: PPOPN 1
24674: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24675: LD_ADDR_OWVAR 57
24679: PUSH
24680: LD_INT 0
24682: ST_TO_ADDR
// fastEnd = 1 ;
24683: LD_ADDR_EXP 59
24687: PUSH
24688: LD_INT 1
24690: ST_TO_ADDR
// FinishMission ;
24691: CALL 25795 0 0
// end ; end_of_file
24695: PPOPN 1
24697: END
// export function PrepareNature ; var i , un ; begin
24698: LD_INT 0
24700: PPUSH
24701: PPUSH
24702: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24703: LD_ADDR_VAR 0 2
24707: PUSH
24708: DOUBLE
24709: LD_INT 1
24711: DEC
24712: ST_TO_ADDR
24713: LD_OWVAR 67
24717: PUSH
24718: LD_INT 1
24720: PPUSH
24721: LD_INT 5
24723: PPUSH
24724: CALL_OW 12
24728: PLUS
24729: PUSH
24730: FOR_TO
24731: IFFALSE 24876
// begin hc_sex = sex_male ;
24733: LD_ADDR_OWVAR 27
24737: PUSH
24738: LD_INT 1
24740: ST_TO_ADDR
// uc_side = 0 ;
24741: LD_ADDR_OWVAR 20
24745: PUSH
24746: LD_INT 0
24748: ST_TO_ADDR
// uc_nation = nation_nature ;
24749: LD_ADDR_OWVAR 21
24753: PUSH
24754: LD_INT 0
24756: ST_TO_ADDR
// hc_class = class_apeman ;
24757: LD_ADDR_OWVAR 28
24761: PUSH
24762: LD_INT 12
24764: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24765: LD_ADDR_OWVAR 31
24769: PUSH
24770: LD_INT 2
24772: PPUSH
24773: LD_INT 7
24775: PPUSH
24776: CALL_OW 12
24780: PUSH
24781: LD_OWVAR 67
24785: PLUS
24786: PUSH
24787: LD_INT 2
24789: PPUSH
24790: LD_INT 10
24792: PPUSH
24793: CALL_OW 12
24797: PUSH
24798: LD_INT 2
24800: PPUSH
24801: LD_INT 10
24803: PPUSH
24804: CALL_OW 12
24808: PUSH
24809: LD_INT 2
24811: PPUSH
24812: LD_INT 10
24814: PPUSH
24815: CALL_OW 12
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24826: LD_ADDR_OWVAR 35
24830: PUSH
24831: LD_INT 5
24833: NEG
24834: PPUSH
24835: LD_INT 5
24837: PPUSH
24838: CALL_OW 12
24842: PUSH
24843: LD_OWVAR 67
24847: MUL
24848: ST_TO_ADDR
// un = CreateHuman ;
24849: LD_ADDR_VAR 0 3
24853: PUSH
24854: CALL_OW 44
24858: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24859: LD_VAR 0 3
24863: PPUSH
24864: LD_INT 5
24866: PPUSH
24867: LD_INT 0
24869: PPUSH
24870: CALL_OW 49
// end ;
24874: GO 24730
24876: POP
24877: POP
// for i = 1 to Difficulty + 2 do
24878: LD_ADDR_VAR 0 2
24882: PUSH
24883: DOUBLE
24884: LD_INT 1
24886: DEC
24887: ST_TO_ADDR
24888: LD_OWVAR 67
24892: PUSH
24893: LD_INT 2
24895: PLUS
24896: PUSH
24897: FOR_TO
24898: IFFALSE 25007
// begin hc_sex = sex_male ;
24900: LD_ADDR_OWVAR 27
24904: PUSH
24905: LD_INT 1
24907: ST_TO_ADDR
// uc_side = 0 ;
24908: LD_ADDR_OWVAR 20
24912: PUSH
24913: LD_INT 0
24915: ST_TO_ADDR
// uc_nation = nation_nature ;
24916: LD_ADDR_OWVAR 21
24920: PUSH
24921: LD_INT 0
24923: ST_TO_ADDR
// hc_class = class_tiger ;
24924: LD_ADDR_OWVAR 28
24928: PUSH
24929: LD_INT 14
24931: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24932: LD_ADDR_OWVAR 31
24936: PUSH
24937: LD_EXP 37
24941: PUSH
24942: LD_INT 0
24944: PUSH
24945: LD_INT 0
24947: PUSH
24948: LD_INT 0
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24957: LD_ADDR_OWVAR 35
24961: PUSH
24962: LD_INT 5
24964: NEG
24965: PPUSH
24966: LD_INT 5
24968: PPUSH
24969: CALL_OW 12
24973: PUSH
24974: LD_OWVAR 67
24978: MUL
24979: ST_TO_ADDR
// un = CreateHuman ;
24980: LD_ADDR_VAR 0 3
24984: PUSH
24985: CALL_OW 44
24989: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24990: LD_VAR 0 3
24994: PPUSH
24995: LD_INT 6
24997: PPUSH
24998: LD_INT 0
25000: PPUSH
25001: CALL_OW 49
// end ;
25005: GO 24897
25007: POP
25008: POP
// for i = 1 to rand ( 3 , 4 ) do
25009: LD_ADDR_VAR 0 2
25013: PUSH
25014: DOUBLE
25015: LD_INT 1
25017: DEC
25018: ST_TO_ADDR
25019: LD_INT 3
25021: PPUSH
25022: LD_INT 4
25024: PPUSH
25025: CALL_OW 12
25029: PUSH
25030: FOR_TO
25031: IFFALSE 25125
// begin hc_sex = sex_male ;
25033: LD_ADDR_OWVAR 27
25037: PUSH
25038: LD_INT 1
25040: ST_TO_ADDR
// uc_side = 0 ;
25041: LD_ADDR_OWVAR 20
25045: PUSH
25046: LD_INT 0
25048: ST_TO_ADDR
// uc_nation = nation_nature ;
25049: LD_ADDR_OWVAR 21
25053: PUSH
25054: LD_INT 0
25056: ST_TO_ADDR
// hc_class = 18 ;
25057: LD_ADDR_OWVAR 28
25061: PUSH
25062: LD_INT 18
25064: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25065: LD_ADDR_OWVAR 31
25069: PUSH
25070: LD_EXP 37
25074: PUSH
25075: LD_INT 0
25077: PUSH
25078: LD_INT 0
25080: PUSH
25081: LD_INT 0
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// hc_agressivity = 0 ;
25090: LD_ADDR_OWVAR 35
25094: PUSH
25095: LD_INT 0
25097: ST_TO_ADDR
// un = CreateHuman ;
25098: LD_ADDR_VAR 0 3
25102: PUSH
25103: CALL_OW 44
25107: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25108: LD_VAR 0 3
25112: PPUSH
25113: LD_INT 6
25115: PPUSH
25116: LD_INT 0
25118: PPUSH
25119: CALL_OW 49
// end ;
25123: GO 25030
25125: POP
25126: POP
// end ; end_of_file
25127: LD_VAR 0 1
25131: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25132: LD_EXP 46
25136: PUSH
25137: LD_INT 1
25139: EQUAL
25140: IFFALSE 25224
25142: GO 25144
25144: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25145: LD_INT 7
25147: PPUSH
25148: LD_INT 5
25150: PPUSH
25151: LD_INT 4
25153: PUSH
25154: LD_INT 5
25156: PUSH
25157: LD_INT 6
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: LIST
25164: PUSH
25165: LD_OWVAR 67
25169: ARRAY
25170: PPUSH
25171: LD_EXP 36
25175: PPUSH
25176: LD_EXP 37
25180: PPUSH
25181: CALL_OW 12
25185: PPUSH
25186: LD_INT 2
25188: PPUSH
25189: LD_INT 1
25191: PPUSH
25192: LD_INT 1
25194: PPUSH
25195: EMPTY
25196: PPUSH
25197: LD_INT 25
25199: PUSH
25200: LD_INT 26
25202: PUSH
25203: LD_INT 27
25205: PUSH
25206: LD_INT 28
25208: PUSH
25209: EMPTY
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: PPUSH
25215: EMPTY
25216: PPUSH
25217: LD_INT 1
25219: PPUSH
25220: CALL 15612 0 11
25224: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25225: LD_EXP 46
25229: PUSH
25230: LD_INT 1
25232: EQUAL
25233: IFFALSE 25321
25235: GO 25237
25237: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25238: LD_INT 5
25240: PPUSH
25241: LD_INT 2
25243: PPUSH
25244: LD_INT 6
25246: PUSH
25247: LD_INT 7
25249: PUSH
25250: LD_INT 8
25252: PUSH
25253: EMPTY
25254: LIST
25255: LIST
25256: LIST
25257: PUSH
25258: LD_OWVAR 67
25262: ARRAY
25263: PPUSH
25264: LD_INT 0
25266: PPUSH
25267: LD_INT 0
25269: PPUSH
25270: LD_INT 2
25272: PUSH
25273: LD_INT 4
25275: PUSH
25276: LD_INT 5
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: LIST
25283: PUSH
25284: LD_OWVAR 67
25288: ARRAY
25289: PPUSH
25290: LD_INT 0
25292: PPUSH
25293: LD_EXP 36
25297: PPUSH
25298: LD_EXP 37
25302: PPUSH
25303: CALL_OW 12
25307: PPUSH
25308: LD_INT 7
25310: PPUSH
25311: LD_INT 9
25313: PPUSH
25314: LD_INT 1
25316: PPUSH
25317: CALL 17316 0 11
25321: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25322: LD_EXP 46
25326: PUSH
25327: LD_INT 1
25329: EQUAL
25330: IFFALSE 25339
25332: GO 25334
25334: DISABLE
// PrepareArabianSheik ;
25335: CALL 3771 0 0
25339: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25340: LD_EXP 29
25344: PUSH
25345: LD_EXP 60
25349: PUSH
25350: LD_INT 1
25352: EQUAL
25353: AND
25354: IFFALSE 25423
25356: GO 25358
25358: DISABLE
// begin enable ;
25359: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25360: LD_INT 6
25362: PPUSH
25363: LD_INT 3
25365: PPUSH
25366: LD_EXP 57
25370: PPUSH
25371: LD_INT 0
25373: PPUSH
25374: LD_OWVAR 67
25378: PPUSH
25379: LD_INT 0
25381: PPUSH
25382: LD_EXP 57
25386: PUSH
25387: LD_INT 3
25389: DIV
25390: PUSH
25391: LD_INT 1
25393: PLUS
25394: PPUSH
25395: LD_EXP 36
25399: PPUSH
25400: LD_EXP 37
25404: PPUSH
25405: CALL_OW 12
25409: PPUSH
25410: LD_INT 17
25412: PPUSH
25413: LD_INT 18
25415: PPUSH
25416: LD_INT 1
25418: PPUSH
25419: CALL 17316 0 11
// end ;
25423: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25424: LD_EXP 29
25428: PUSH
25429: LD_EXP 60
25433: PUSH
25434: LD_INT 1
25436: EQUAL
25437: AND
25438: IFFALSE 25515
25440: GO 25442
25442: DISABLE
// begin enable ;
25443: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25444: LD_INT 17
25446: PPUSH
25447: LD_INT 6
25449: PPUSH
25450: LD_EXP 56
25454: PPUSH
25455: LD_EXP 36
25459: PPUSH
25460: LD_EXP 37
25464: PPUSH
25465: CALL_OW 12
25469: PPUSH
25470: LD_INT 3
25472: PPUSH
25473: LD_INT 1
25475: PPUSH
25476: LD_INT 3
25478: PUSH
25479: LD_INT 3
25481: PUSH
25482: EMPTY
25483: LIST
25484: LIST
25485: PPUSH
25486: LD_INT 43
25488: PUSH
25489: LD_INT 44
25491: PUSH
25492: LD_INT 45
25494: PUSH
25495: LD_INT 46
25497: PUSH
25498: EMPTY
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: PPUSH
25504: EMPTY
25505: PPUSH
25506: EMPTY
25507: PPUSH
25508: LD_INT 1
25510: PPUSH
25511: CALL 15612 0 11
// end ;
25515: END
// every 10 10$00 trigger joinEpsilon do
25516: LD_EXP 29
25520: IFFALSE 25574
25522: GO 25524
25524: DISABLE
// begin enable ;
25525: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25526: LD_ADDR_EXP 56
25530: PUSH
25531: LD_EXP 56
25535: PUSH
25536: LD_INT 1
25538: PPUSH
25539: LD_OWVAR 67
25543: PPUSH
25544: CALL_OW 12
25548: PLUS
25549: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25550: LD_ADDR_EXP 57
25554: PUSH
25555: LD_EXP 57
25559: PUSH
25560: LD_INT 1
25562: PPUSH
25563: LD_OWVAR 67
25567: PPUSH
25568: CALL_OW 12
25572: PLUS
25573: ST_TO_ADDR
// end ;
25574: END
// every 21 21$0 trigger attackAvalaible = 1 do
25575: LD_EXP 60
25579: PUSH
25580: LD_INT 1
25582: EQUAL
25583: IFFALSE 25596
25585: GO 25587
25587: DISABLE
// attackAvalaible = 0 ; end_of_file
25588: LD_ADDR_EXP 60
25592: PUSH
25593: LD_INT 0
25595: ST_TO_ADDR
25596: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25597: LD_INT 54
25599: PPUSH
25600: LD_INT 1
25602: PPUSH
25603: CALL_OW 321
25607: PUSH
25608: LD_INT 2
25610: EQUAL
25611: PUSH
25612: LD_INT 55
25614: PPUSH
25615: LD_INT 1
25617: PPUSH
25618: CALL_OW 321
25622: PUSH
25623: LD_INT 2
25625: EQUAL
25626: AND
25627: PUSH
25628: LD_INT 21
25630: PPUSH
25631: LD_INT 1
25633: PPUSH
25634: CALL_OW 321
25638: PUSH
25639: LD_INT 2
25641: EQUAL
25642: AND
25643: PUSH
25644: LD_INT 22
25646: PPUSH
25647: LD_INT 1
25649: PPUSH
25650: CALL_OW 321
25654: PUSH
25655: LD_INT 2
25657: EQUAL
25658: AND
25659: PUSH
25660: LD_INT 12
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 321
25670: PUSH
25671: LD_INT 1
25673: EQUAL
25674: PUSH
25675: LD_INT 32
25677: PPUSH
25678: LD_INT 1
25680: PPUSH
25681: CALL_OW 321
25685: PUSH
25686: LD_INT 1
25688: EQUAL
25689: OR
25690: PUSH
25691: EMPTY
25692: LIST
25693: AND
25694: PUSH
25695: LD_EXP 48
25699: PUSH
25700: LD_INT 1
25702: EQUAL
25703: AND
25704: PUSH
25705: LD_INT 22
25707: PUSH
25708: LD_INT 3
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 21
25717: PUSH
25718: LD_INT 1
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PPUSH
25729: CALL_OW 69
25733: PUSH
25734: LD_INT 0
25736: EQUAL
25737: AND
25738: IFFALSE 25794
25740: GO 25742
25742: DISABLE
// begin case query ( QEndMission ) of 1 :
25743: LD_STRING QEndMission
25745: PPUSH
25746: CALL_OW 97
25750: PUSH
25751: LD_INT 1
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25770
25759: POP
// begin end_the_mission_allowed = true ;
25760: LD_ADDR_OWVAR 57
25764: PUSH
25765: LD_INT 1
25767: ST_TO_ADDR
// end ; 2 :
25768: GO 25794
25770: LD_INT 2
25772: DOUBLE
25773: EQUAL
25774: IFTRUE 25778
25776: GO 25793
25778: POP
// begin fastEnd = 1 ;
25779: LD_ADDR_EXP 59
25783: PUSH
25784: LD_INT 1
25786: ST_TO_ADDR
// FinishMission ;
25787: CALL 25795 0 0
// end ; end ;
25791: GO 25794
25793: POP
// end ;
25794: END
// export function FinishMission ; begin
25795: LD_INT 0
25797: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25798: LD_EXP 52
25802: PPUSH
25803: LD_STRING 10_KhatamStatus_1
25805: PPUSH
25806: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25810: LD_EXP 51
25814: PPUSH
25815: LD_STRING 10_GensherEscape_1
25817: PPUSH
25818: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25822: LD_INT 12
25824: PPUSH
25825: LD_INT 1
25827: PPUSH
25828: CALL_OW 321
25832: PUSH
25833: LD_INT 2
25835: EQUAL
25836: IFFALSE 25850
// begin AddMedal ( sights , 1 ) ;
25838: LD_STRING sights
25840: PPUSH
25841: LD_INT 1
25843: PPUSH
25844: CALL_OW 101
// end else
25848: GO 25861
// begin AddMedal ( sights , - 1 ) ;
25850: LD_STRING sights
25852: PPUSH
25853: LD_INT 1
25855: NEG
25856: PPUSH
25857: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25861: LD_INT 32
25863: PPUSH
25864: LD_INT 1
25866: PPUSH
25867: CALL_OW 321
25871: PUSH
25872: LD_INT 2
25874: EQUAL
25875: IFFALSE 25889
// begin AddMedal ( computers , 1 ) ;
25877: LD_STRING computers
25879: PPUSH
25880: LD_INT 1
25882: PPUSH
25883: CALL_OW 101
// end else
25887: GO 25900
// begin AddMedal ( computers , - 1 ) ;
25889: LD_STRING computers
25891: PPUSH
25892: LD_INT 1
25894: NEG
25895: PPUSH
25896: CALL_OW 101
// end ; if arabianEscape = 0 then
25900: LD_EXP 47
25904: PUSH
25905: LD_INT 0
25907: EQUAL
25908: IFFALSE 25932
// begin AddMedal ( renegades , 2 ) ;
25910: LD_STRING renegades
25912: PPUSH
25913: LD_INT 2
25915: PPUSH
25916: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
25920: LD_INT 0
25922: PPUSH
25923: LD_STRING 10_ScientistsEscape_1
25925: PPUSH
25926: CALL_OW 39
// end else
25930: GO 25943
// begin AddMedal ( renegades , - 1 ) ;
25932: LD_STRING renegades
25934: PPUSH
25935: LD_INT 1
25937: NEG
25938: PPUSH
25939: CALL_OW 101
// end ; SaveEpsilonBase ;
25943: CALL 26667 0 0
// GiveMedals ( Main ) ;
25947: LD_STRING Main
25949: PPUSH
25950: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
25954: LD_INT 22
25956: PUSH
25957: LD_INT 1
25959: PUSH
25960: EMPTY
25961: LIST
25962: LIST
25963: PUSH
25964: LD_INT 23
25966: PUSH
25967: LD_INT 1
25969: PUSH
25970: EMPTY
25971: LIST
25972: LIST
25973: PUSH
25974: LD_INT 21
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 2
25986: PUSH
25987: LD_INT 25
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 25
25999: PUSH
26000: LD_INT 2
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 25
26009: PUSH
26010: LD_INT 3
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 25
26019: PUSH
26020: LD_INT 4
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: LD_INT 25
26029: PUSH
26030: LD_INT 5
26032: PUSH
26033: EMPTY
26034: LIST
26035: LIST
26036: PUSH
26037: LD_INT 25
26039: PUSH
26040: LD_INT 8
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: PUSH
26056: EMPTY
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: PPUSH
26062: CALL_OW 69
26066: PPUSH
26067: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26071: LD_EXP 1
26075: PPUSH
26076: LD_EXP 53
26080: PUSH
26081: LD_STRING JMM
26083: STR
26084: PPUSH
26085: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26089: LD_EXP 2
26093: PPUSH
26094: LD_EXP 53
26098: PUSH
26099: LD_STRING Brown
26101: STR
26102: PPUSH
26103: CALL 9887 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26107: LD_EXP 3
26111: PPUSH
26112: LD_EXP 53
26116: PUSH
26117: LD_STRING Donaldson
26119: STR
26120: PPUSH
26121: CALL 9887 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26125: LD_EXP 4
26129: PPUSH
26130: LD_EXP 53
26134: PUSH
26135: LD_STRING Bobby
26137: STR
26138: PPUSH
26139: CALL 9887 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26143: LD_EXP 5
26147: PPUSH
26148: LD_EXP 53
26152: PUSH
26153: LD_STRING Cyrus
26155: STR
26156: PPUSH
26157: CALL 9887 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26161: LD_EXP 6
26165: PPUSH
26166: LD_EXP 53
26170: PUSH
26171: LD_STRING Lisa
26173: STR
26174: PPUSH
26175: CALL 9887 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26179: LD_EXP 7
26183: PPUSH
26184: LD_EXP 53
26188: PUSH
26189: LD_STRING Frank
26191: STR
26192: PPUSH
26193: CALL 9887 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26197: LD_EXP 8
26201: PPUSH
26202: LD_EXP 53
26206: PUSH
26207: LD_STRING Kikuchi
26209: STR
26210: PPUSH
26211: CALL 9887 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26215: LD_EXP 9
26219: PPUSH
26220: LD_EXP 53
26224: PUSH
26225: LD_STRING Houten
26227: STR
26228: PPUSH
26229: CALL 9887 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26233: LD_EXP 10
26237: PPUSH
26238: LD_EXP 53
26242: PUSH
26243: LD_STRING Gary
26245: STR
26246: PPUSH
26247: CALL 9887 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26251: LD_EXP 19
26255: PPUSH
26256: LD_EXP 53
26260: PUSH
26261: LD_STRING Cornell
26263: STR
26264: PPUSH
26265: CALL 9887 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26269: LD_EXP 11
26273: PPUSH
26274: LD_EXP 53
26278: PUSH
26279: LD_STRING Simms
26281: STR
26282: PPUSH
26283: CALL 9887 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26287: LD_EXP 12
26291: PPUSH
26292: LD_EXP 53
26296: PUSH
26297: LD_STRING Denis
26299: STR
26300: PPUSH
26301: CALL 9887 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26305: LD_EXP 13
26309: PPUSH
26310: LD_EXP 53
26314: PUSH
26315: LD_STRING Joan
26317: STR
26318: PPUSH
26319: CALL 9887 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26323: LD_EXP 15
26327: PPUSH
26328: LD_EXP 53
26332: PUSH
26333: LD_STRING Gladstone
26335: STR
26336: PPUSH
26337: CALL 9887 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26341: LD_EXP 17
26345: PPUSH
26346: LD_EXP 53
26350: PUSH
26351: LD_STRING DeltaDoctor
26353: STR
26354: PPUSH
26355: CALL 9887 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26359: LD_EXP 22
26363: PPUSH
26364: LD_STRING 10c_lock
26366: PPUSH
26367: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26371: LD_INT 50
26373: PUSH
26374: EMPTY
26375: LIST
26376: PUSH
26377: LD_INT 22
26379: PUSH
26380: LD_INT 1
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: PUSH
26387: LD_INT 21
26389: PUSH
26390: LD_INT 1
26392: PUSH
26393: EMPTY
26394: LIST
26395: LIST
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: LD_INT 25
26402: PUSH
26403: LD_INT 1
26405: PUSH
26406: EMPTY
26407: LIST
26408: LIST
26409: PUSH
26410: LD_INT 25
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: EMPTY
26417: LIST
26418: LIST
26419: PUSH
26420: LD_INT 25
26422: PUSH
26423: LD_INT 3
26425: PUSH
26426: EMPTY
26427: LIST
26428: LIST
26429: PUSH
26430: LD_INT 25
26432: PUSH
26433: LD_INT 4
26435: PUSH
26436: EMPTY
26437: LIST
26438: LIST
26439: PUSH
26440: LD_INT 25
26442: PUSH
26443: LD_INT 5
26445: PUSH
26446: EMPTY
26447: LIST
26448: LIST
26449: PUSH
26450: LD_INT 25
26452: PUSH
26453: LD_INT 8
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: PPUSH
26475: CALL_OW 69
26479: PUSH
26480: LD_EXP 1
26484: PUSH
26485: LD_EXP 2
26489: PUSH
26490: LD_EXP 3
26494: PUSH
26495: LD_EXP 4
26499: PUSH
26500: LD_EXP 5
26504: PUSH
26505: LD_EXP 6
26509: PUSH
26510: LD_EXP 7
26514: PUSH
26515: LD_EXP 15
26519: PUSH
26520: LD_EXP 8
26524: PUSH
26525: LD_EXP 12
26529: PUSH
26530: LD_EXP 13
26534: PUSH
26535: LD_EXP 9
26539: PUSH
26540: LD_EXP 11
26544: PUSH
26545: LD_EXP 10
26549: PUSH
26550: LD_EXP 17
26554: PUSH
26555: LD_EXP 19
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: LIST
26572: LIST
26573: LIST
26574: LIST
26575: LIST
26576: LIST
26577: DIFF
26578: PPUSH
26579: LD_STRING 10_other_survivors
26581: PPUSH
26582: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26586: LD_INT 50
26588: PUSH
26589: EMPTY
26590: LIST
26591: PUSH
26592: LD_INT 22
26594: PUSH
26595: LD_INT 1
26597: PUSH
26598: EMPTY
26599: LIST
26600: LIST
26601: PUSH
26602: LD_INT 21
26604: PUSH
26605: LD_INT 1
26607: PUSH
26608: EMPTY
26609: LIST
26610: LIST
26611: PUSH
26612: LD_INT 2
26614: PUSH
26615: LD_INT 25
26617: PUSH
26618: LD_INT 16
26620: PUSH
26621: EMPTY
26622: LIST
26623: LIST
26624: PUSH
26625: LD_INT 25
26627: PUSH
26628: LD_INT 12
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL_OW 69
26650: PPUSH
26651: LD_STRING 10_ape
26653: PPUSH
26654: CALL_OW 38
// YouWin ;
26658: CALL_OW 103
// end ;
26662: LD_VAR 0 1
26666: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26667: LD_INT 0
26669: PPUSH
26670: PPUSH
26671: PPUSH
26672: PPUSH
// epsilonBase = [ ] ;
26673: LD_ADDR_VAR 0 2
26677: PUSH
26678: EMPTY
26679: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26680: LD_ADDR_VAR 0 3
26684: PUSH
26685: LD_INT 22
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 23
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 21
26707: PUSH
26708: LD_INT 3
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 50
26717: PUSH
26718: EMPTY
26719: LIST
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: PPUSH
26727: CALL_OW 69
26731: ST_TO_ADDR
// for i in buildings do
26732: LD_ADDR_VAR 0 4
26736: PUSH
26737: LD_VAR 0 3
26741: PUSH
26742: FOR_IN
26743: IFFALSE 27195
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26745: LD_VAR 0 4
26749: PPUSH
26750: CALL_OW 266
26754: PUSH
26755: LD_INT 6
26757: PUSH
26758: LD_INT 7
26760: PUSH
26761: LD_INT 8
26763: PUSH
26764: EMPTY
26765: LIST
26766: LIST
26767: LIST
26768: IN
26769: IFFALSE 26883
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26771: LD_ADDR_VAR 0 2
26775: PUSH
26776: LD_VAR 0 2
26780: PUSH
26781: LD_VAR 0 4
26785: PPUSH
26786: CALL_OW 266
26790: PUSH
26791: LD_VAR 0 4
26795: PPUSH
26796: CALL_OW 250
26800: PUSH
26801: LD_VAR 0 4
26805: PPUSH
26806: CALL_OW 251
26810: PUSH
26811: LD_VAR 0 4
26815: PPUSH
26816: CALL_OW 254
26820: PUSH
26821: LD_VAR 0 4
26825: PPUSH
26826: CALL_OW 267
26830: PUSH
26831: LD_VAR 0 4
26835: PPUSH
26836: CALL_OW 248
26840: PUSH
26841: LD_VAR 0 4
26845: PPUSH
26846: LD_INT 1
26848: PPUSH
26849: CALL_OW 268
26853: PUSH
26854: LD_VAR 0 4
26858: PPUSH
26859: LD_INT 2
26861: PPUSH
26862: CALL_OW 268
26866: PUSH
26867: EMPTY
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: PUSH
26877: EMPTY
26878: LIST
26879: ADD
26880: ST_TO_ADDR
26881: GO 27193
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
26883: LD_VAR 0 4
26887: PPUSH
26888: CALL_OW 266
26892: PUSH
26893: LD_INT 32
26895: EQUAL
26896: PUSH
26897: LD_VAR 0 4
26901: PPUSH
26902: CALL_OW 266
26906: PUSH
26907: LD_INT 33
26909: EQUAL
26910: OR
26911: IFFALSE 27008
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26913: LD_ADDR_VAR 0 2
26917: PUSH
26918: LD_VAR 0 2
26922: PUSH
26923: LD_VAR 0 4
26927: PPUSH
26928: CALL_OW 266
26932: PUSH
26933: LD_VAR 0 4
26937: PPUSH
26938: CALL_OW 250
26942: PUSH
26943: LD_VAR 0 4
26947: PPUSH
26948: CALL_OW 251
26952: PUSH
26953: LD_VAR 0 4
26957: PPUSH
26958: CALL_OW 254
26962: PUSH
26963: LD_VAR 0 4
26967: PPUSH
26968: CALL_OW 267
26972: PUSH
26973: LD_VAR 0 4
26977: PPUSH
26978: CALL_OW 248
26982: PUSH
26983: LD_VAR 0 4
26987: PPUSH
26988: CALL_OW 269
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: LIST
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: ADD
27005: ST_TO_ADDR
27006: GO 27193
// if GetBType ( i ) = b_factory then
27008: LD_VAR 0 4
27012: PPUSH
27013: CALL_OW 266
27017: PUSH
27018: LD_INT 3
27020: EQUAL
27021: IFFALSE 27111
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27023: LD_ADDR_VAR 0 2
27027: PUSH
27028: LD_VAR 0 2
27032: PPUSH
27033: LD_INT 1
27035: PPUSH
27036: LD_VAR 0 4
27040: PPUSH
27041: CALL_OW 266
27045: PUSH
27046: LD_VAR 0 4
27050: PPUSH
27051: CALL_OW 250
27055: PUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: CALL_OW 251
27065: PUSH
27066: LD_VAR 0 4
27070: PPUSH
27071: CALL_OW 254
27075: PUSH
27076: LD_VAR 0 4
27080: PPUSH
27081: CALL_OW 267
27085: PUSH
27086: LD_VAR 0 4
27090: PPUSH
27091: CALL_OW 248
27095: PUSH
27096: EMPTY
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: PPUSH
27104: CALL_OW 2
27108: ST_TO_ADDR
27109: GO 27193
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27111: LD_ADDR_VAR 0 2
27115: PUSH
27116: LD_VAR 0 2
27120: PUSH
27121: LD_VAR 0 4
27125: PPUSH
27126: CALL_OW 266
27130: PUSH
27131: LD_VAR 0 4
27135: PPUSH
27136: CALL_OW 250
27140: PUSH
27141: LD_VAR 0 4
27145: PPUSH
27146: CALL_OW 251
27150: PUSH
27151: LD_VAR 0 4
27155: PPUSH
27156: CALL_OW 254
27160: PUSH
27161: LD_VAR 0 4
27165: PPUSH
27166: CALL_OW 267
27170: PUSH
27171: LD_VAR 0 4
27175: PPUSH
27176: CALL_OW 248
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: PUSH
27189: EMPTY
27190: LIST
27191: ADD
27192: ST_TO_ADDR
// end ;
27193: GO 26742
27195: POP
27196: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27197: LD_VAR 0 2
27201: PPUSH
27202: LD_STRING 10_EpsilonBase
27204: PPUSH
27205: CALL_OW 39
// end ; end_of_file
27209: LD_VAR 0 1
27213: RET
// every 0 0$01 do
27214: GO 27216
27216: DISABLE
// begin repeat wait ( 0 0$30 ) ;
27217: LD_INT 1050
27219: PPUSH
27220: CALL_OW 67
// if cratesSpawned < 6 then
27224: LD_EXP 55
27228: PUSH
27229: LD_INT 6
27231: LESS
27232: IFFALSE 27269
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27234: LD_INT 3
27236: PPUSH
27237: LD_INT 5
27239: PPUSH
27240: CALL_OW 12
27244: PPUSH
27245: LD_INT 16
27247: PPUSH
27248: LD_INT 1
27250: PPUSH
27251: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27255: LD_ADDR_EXP 55
27259: PUSH
27260: LD_EXP 55
27264: PUSH
27265: LD_INT 1
27267: PLUS
27268: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27269: LD_EXP 55
27273: PUSH
27274: LD_INT 6
27276: GREATEREQUAL
27277: PUSH
27278: LD_EXP 55
27282: PUSH
27283: LD_INT 12
27285: LESS
27286: AND
27287: IFFALSE 27331
// begin wait ( 0 0$30 ) ;
27289: LD_INT 1050
27291: PPUSH
27292: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27296: LD_INT 3
27298: PPUSH
27299: LD_INT 5
27301: PPUSH
27302: CALL_OW 12
27306: PPUSH
27307: LD_INT 16
27309: PPUSH
27310: LD_INT 1
27312: PPUSH
27313: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27317: LD_ADDR_EXP 55
27321: PUSH
27322: LD_EXP 55
27326: PUSH
27327: LD_INT 1
27329: PLUS
27330: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27331: LD_EXP 55
27335: PUSH
27336: LD_INT 12
27338: GREATEREQUAL
27339: IFFALSE 27383
// begin wait ( 1 1$30 ) ;
27341: LD_INT 3150
27343: PPUSH
27344: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27348: LD_INT 3
27350: PPUSH
27351: LD_INT 5
27353: PPUSH
27354: CALL_OW 12
27358: PPUSH
27359: LD_INT 16
27361: PPUSH
27362: LD_INT 1
27364: PPUSH
27365: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27369: LD_ADDR_EXP 55
27373: PUSH
27374: LD_EXP 55
27378: PUSH
27379: LD_INT 1
27381: PLUS
27382: ST_TO_ADDR
// end ; until cratesSpawned >= 35 ;
27383: LD_EXP 55
27387: PUSH
27388: LD_INT 35
27390: GREATEREQUAL
27391: IFFALSE 27217
// end ;
27393: END
