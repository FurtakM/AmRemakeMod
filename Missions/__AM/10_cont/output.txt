// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 28
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 38
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 39
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 40
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 41
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianEscape = 0 ;
  69: LD_ADDR_EXP 46
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  77: LD_ADDR_EXP 45
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// arabianDefeated = 0 ;
  85: LD_ADDR_EXP 47
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// arabianTrait = 0 ;
  93: LD_ADDR_EXP 48
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// eventVar1 = 0 ;
 101: LD_ADDR_EXP 54
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar2 = 0 ;
 109: LD_ADDR_EXP 55
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// fastEnd = 0 ;
 117: LD_ADDR_EXP 53
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// KhatamStatus = 0 ;
 125: LD_ADDR_EXP 49
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cratesSpawned = 0 ;
 133: LD_ADDR_EXP 52
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mission_prefix := 10_ ;
 141: LD_ADDR_EXP 50
 145: PUSH
 146: LD_STRING 10_
 148: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 149: LD_ADDR_EXP 51
 153: PUSH
 154: LD_STRING 09_
 156: ST_TO_ADDR
// debugMode = 0 ;
 157: LD_ADDR_EXP 56
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// PrepareNature ;
 165: CALL 20886 0 0
// PrepareDifficulty ;
 169: CALL 7629 0 0
// PrepareJMMTeam ;
 173: CALL 515 0 0
// PrepareCathyTeam ;
 177: CALL 1590 0 0
// PrepareArabianCommander ;
 181: CALL 2948 0 0
// PrepareArabian ;
 185: CALL 3000 0 0
// BuildArabianBase ;
 189: CALL 10227 0 0
// TameApemans ;
 193: CALL 15856 0 0
// end ;
 197: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 198: LD_EXP 56
 202: PUSH
 203: LD_INT 1
 205: EQUAL
 206: IFFALSE 512
 208: GO 210
 210: DISABLE
 211: LD_INT 0
 213: PPUSH
// begin enable ;
 214: ENABLE
// fogoff ( true ) ;
 215: LD_INT 1
 217: PPUSH
 218: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 222: LD_ADDR_VAR 0 1
 226: PUSH
 227: LD_INT 22
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: PUSH
 237: LD_INT 21
 239: PUSH
 240: LD_INT 1
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PPUSH
 251: CALL_OW 69
 255: PUSH
 256: FOR_IN
 257: IFFALSE 273
// SetLives ( i , 1000 ) ;
 259: LD_VAR 0 1
 263: PPUSH
 264: LD_INT 1000
 266: PPUSH
 267: CALL_OW 234
 271: GO 256
 273: POP
 274: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 2
 292: PUSH
 293: LD_INT 30
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: LD_INT 30
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PPUSH
 322: CALL_OW 69
 326: PUSH
 327: FOR_IN
 328: IFFALSE 352
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 330: LD_VAR 0 1
 334: PPUSH
 335: CALL_OW 274
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 9999
 345: PPUSH
 346: CALL_OW 277
 350: GO 327
 352: POP
 353: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 30
 384: PUSH
 385: LD_INT 1
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PPUSH
 401: CALL_OW 69
 405: PUSH
 406: FOR_IN
 407: IFFALSE 431
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 409: LD_VAR 0 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 9999
 424: PPUSH
 425: CALL_OW 277
 429: GO 406
 431: POP
 432: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 433: LD_ADDR_VAR 0 1
 437: PUSH
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 2
 450: PUSH
 451: LD_INT 30
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PPUSH
 480: CALL_OW 69
 484: PUSH
 485: FOR_IN
 486: IFFALSE 510
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: CALL_OW 274
 497: PPUSH
 498: LD_INT 3
 500: PPUSH
 501: LD_INT 9999
 503: PPUSH
 504: CALL_OW 277
 508: GO 485
 510: POP
 511: POP
// end ; end_of_file
 512: PPOPN 1
 514: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
 522: PPUSH
// uc_side = 1 ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// uc_nation = 1 ;
 531: LD_ADDR_OWVAR 21
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// count = 0 ;
 539: LD_ADDR_VAR 0 6
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 547: LD_ADDR_EXP 1
 551: PUSH
 552: LD_STRING 10_JMM
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL 7365 0 2
 562: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 563: LD_ADDR_EXP 20
 567: PUSH
 568: LD_EXP 20
 572: PUSH
 573: LD_EXP 1
 577: ADD
 578: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 579: LD_ADDR_EXP 10
 583: PUSH
 584: LD_STRING 10_Gary
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 7365 0 2
 594: ST_TO_ADDR
// if Gary then
 595: LD_EXP 10
 599: IFFALSE 617
// JMMSquad = JMMSquad ^ Gary ;
 601: LD_ADDR_EXP 20
 605: PUSH
 606: LD_EXP 20
 610: PUSH
 611: LD_EXP 10
 615: ADD
 616: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 617: LD_ADDR_EXP 5
 621: PUSH
 622: LD_STRING 10_Cyrus
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 7365 0 2
 632: ST_TO_ADDR
// if Cyrus then
 633: LD_EXP 5
 637: IFFALSE 655
// JMMSquad = JMMSquad ^ Cyrus ;
 639: LD_ADDR_EXP 20
 643: PUSH
 644: LD_EXP 20
 648: PUSH
 649: LD_EXP 5
 653: ADD
 654: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 655: LD_ADDR_EXP 4
 659: PUSH
 660: LD_STRING 10_Bobby
 662: PPUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL 7365 0 2
 670: ST_TO_ADDR
// if Bobby then
 671: LD_EXP 4
 675: IFFALSE 693
// JMMSquad = JMMSquad ^ Bobby ;
 677: LD_ADDR_EXP 20
 681: PUSH
 682: LD_EXP 20
 686: PUSH
 687: LD_EXP 4
 691: ADD
 692: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_STRING 10_Lisa
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL 7365 0 2
 708: ST_TO_ADDR
// if Lisa then
 709: LD_EXP 6
 713: IFFALSE 731
// JMMSquad = JMMSquad ^ Lisa ;
 715: LD_ADDR_EXP 20
 719: PUSH
 720: LD_EXP 20
 724: PUSH
 725: LD_EXP 6
 729: ADD
 730: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 731: LD_ADDR_EXP 2
 735: PUSH
 736: LD_STRING 10_Brown
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL 7365 0 2
 746: ST_TO_ADDR
// if Brown then
 747: LD_EXP 2
 751: IFFALSE 769
// JMMSquad = JMMSquad ^ Brown ;
 753: LD_ADDR_EXP 20
 757: PUSH
 758: LD_EXP 20
 762: PUSH
 763: LD_EXP 2
 767: ADD
 768: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 769: LD_ADDR_EXP 3
 773: PUSH
 774: LD_STRING 10_Donaldson
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL 7365 0 2
 784: ST_TO_ADDR
// if Donaldson then
 785: LD_EXP 3
 789: IFFALSE 807
// JMMSquad = JMMSquad ^ Donaldson ;
 791: LD_ADDR_EXP 20
 795: PUSH
 796: LD_EXP 20
 800: PUSH
 801: LD_EXP 3
 805: ADD
 806: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 807: LD_ADDR_EXP 7
 811: PUSH
 812: LD_STRING 10_Frank
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 7365 0 2
 822: ST_TO_ADDR
// if Frank then
 823: LD_EXP 7
 827: IFFALSE 845
// JMMSquad = JMMSquad ^ Frank ;
 829: LD_ADDR_EXP 20
 833: PUSH
 834: LD_EXP 20
 838: PUSH
 839: LD_EXP 7
 843: ADD
 844: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 845: LD_ADDR_EXP 9
 849: PUSH
 850: LD_STRING 10_Houten
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: CALL 7365 0 2
 860: ST_TO_ADDR
// if Houten then
 861: LD_EXP 9
 865: IFFALSE 883
// JMMSquad = JMMSquad ^ Houten ;
 867: LD_ADDR_EXP 20
 871: PUSH
 872: LD_EXP 20
 876: PUSH
 877: LD_EXP 9
 881: ADD
 882: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 883: LD_ADDR_EXP 21
 887: PUSH
 888: LD_STRING OthersIn10
 890: PPUSH
 891: CALL_OW 31
 895: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING Powell
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL 7365 0 2
 911: ST_TO_ADDR
// for i in JMMSquad do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: LD_EXP 20
 921: PUSH
 922: FOR_IN
 923: IFFALSE 1182
// begin if count < 3 then
 925: LD_VAR 0 6
 929: PUSH
 930: LD_INT 3
 932: LESS
 933: IFFALSE 1050
// begin vc_engine = 1 ;
 935: LD_ADDR_OWVAR 39
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
// vc_control = 1 ;
 943: LD_ADDR_OWVAR 38
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
// vc_weapon = 12 ;
 951: LD_ADDR_OWVAR 40
 955: PUSH
 956: LD_INT 12
 958: ST_TO_ADDR
// vc_chassis = 3 ;
 959: LD_ADDR_OWVAR 37
 963: PUSH
 964: LD_INT 3
 966: ST_TO_ADDR
// veh = CreateVehicle ;
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: CALL_OW 45
 976: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 977: LD_VAR 0 4
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 989: LD_VAR 0 4
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// if count mod 2 = 0 then
1004: LD_VAR 0 6
1008: PUSH
1009: LD_INT 2
1011: MOD
1012: PUSH
1013: LD_INT 0
1015: EQUAL
1016: IFFALSE 1035
// AddCargo ( veh , 1 , 100 ) else
1018: LD_VAR 0 4
1022: PPUSH
1023: LD_INT 1
1025: PPUSH
1026: LD_INT 100
1028: PPUSH
1029: CALL_OW 291
1033: GO 1050
// AddCargo ( veh , 3 , 100 ) end ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 3
1042: PPUSH
1043: LD_INT 100
1045: PPUSH
1046: CALL_OW 291
// if count >= 3 then
1050: LD_VAR 0 6
1054: PUSH
1055: LD_INT 3
1057: GREATEREQUAL
1058: IFFALSE 1152
// begin vc_engine = 1 ;
1060: LD_ADDR_OWVAR 39
1064: PUSH
1065: LD_INT 1
1067: ST_TO_ADDR
// vc_control = 1 ;
1068: LD_ADDR_OWVAR 38
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1076: LD_ADDR_OWVAR 40
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: LD_INT 5
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 3
1100: PPUSH
1101: CALL_OW 12
1105: ARRAY
1106: ST_TO_ADDR
// vc_chassis = 3 ;
1107: LD_ADDR_OWVAR 37
1111: PUSH
1112: LD_INT 3
1114: ST_TO_ADDR
// veh = CreateVehicle ;
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: CALL_OW 45
1124: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1125: LD_VAR 0 4
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_INT 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 49
// end ; count = count + 1 ;
1152: LD_ADDR_VAR 0 6
1156: PUSH
1157: LD_VAR 0 6
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1166: LD_VAR 0 2
1170: PPUSH
1171: LD_VAR 0 4
1175: PPUSH
1176: CALL_OW 52
// end ;
1180: GO 922
1182: POP
1183: POP
// for i in others10 do
1184: LD_ADDR_VAR 0 2
1188: PUSH
1189: LD_EXP 21
1193: PUSH
1194: FOR_IN
1195: IFFALSE 1321
// begin vc_engine = 1 ;
1197: LD_ADDR_OWVAR 39
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// vc_control = 1 ;
1205: LD_ADDR_OWVAR 38
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1213: LD_ADDR_OWVAR 40
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: LD_INT 4
1223: PUSH
1224: LD_INT 5
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 1
1234: PPUSH
1235: LD_INT 3
1237: PPUSH
1238: CALL_OW 12
1242: ARRAY
1243: ST_TO_ADDR
// vc_chassis = 3 ;
1244: LD_ADDR_OWVAR 37
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// veh = CreateVehicle ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: CALL_OW 45
1261: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1262: LD_VAR 0 4
1266: PPUSH
1267: LD_INT 1
1269: PPUSH
1270: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1274: LD_VAR 0 4
1278: PPUSH
1279: LD_INT 2
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1289: LD_ADDR_EXP 27
1293: PUSH
1294: LD_EXP 27
1298: PUSH
1299: LD_VAR 0 4
1303: ADD
1304: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1305: LD_VAR 0 2
1309: PPUSH
1310: LD_VAR 0 4
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1194
1321: POP
1322: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1323: LD_INT 22
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PUSH
1333: LD_INT 21
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PPUSH
1347: CALL_OW 69
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL_OW 336
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// for i := 1 to 10 do
1387: LD_ADDR_VAR 0 2
1391: PUSH
1392: DOUBLE
1393: LD_INT 1
1395: DEC
1396: ST_TO_ADDR
1397: LD_INT 10
1399: PUSH
1400: FOR_TO
1401: IFFALSE 1583
// begin vc_engine = 1 ;
1403: LD_ADDR_OWVAR 39
1407: PUSH
1408: LD_INT 1
1410: ST_TO_ADDR
// vc_control = 1 ;
1411: LD_ADDR_OWVAR 38
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1419: LD_ADDR_OWVAR 40
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 4
1429: PUSH
1430: LD_INT 5
1432: PUSH
1433: LD_INT 12
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 4
1447: PPUSH
1448: CALL_OW 12
1452: ARRAY
1453: ST_TO_ADDR
// vc_chassis = 3 ;
1454: LD_ADDR_OWVAR 37
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// veh = CreateVehicle ;
1462: LD_ADDR_VAR 0 3
1466: PUSH
1467: CALL_OW 45
1471: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1472: LD_VAR 0 3
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1484: LD_VAR 0 3
1488: PPUSH
1489: LD_INT 2
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1499: LD_ADDR_EXP 27
1503: PUSH
1504: LD_EXP 27
1508: PUSH
1509: LD_VAR 0 3
1513: ADD
1514: ST_TO_ADDR
// if vc_weapon = 12 then
1515: LD_OWVAR 40
1519: PUSH
1520: LD_INT 12
1522: EQUAL
1523: IFFALSE 1581
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1525: LD_ADDR_VAR 0 4
1529: PUSH
1530: LD_INT 5
1532: PPUSH
1533: LD_INT 10
1535: PPUSH
1536: CALL_OW 12
1540: PUSH
1541: LD_INT 10
1543: MUL
1544: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 3
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 1
1562: PPUSH
1563: LD_INT 2
1565: PPUSH
1566: CALL_OW 12
1570: ARRAY
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL_OW 291
// end ; end ;
1581: GO 1400
1583: POP
1584: POP
// end ;
1585: LD_VAR 0 1
1589: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
1594: PPUSH
// uc_side = 4 ;
1595: LD_ADDR_OWVAR 20
1599: PUSH
1600: LD_INT 4
1602: ST_TO_ADDR
// uc_nation = 1 ;
1603: LD_ADDR_OWVAR 21
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1611: LD_ADDR_EXP 11
1615: PUSH
1616: LD_STRING Simms
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 7365 0 2
1626: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1627: LD_ADDR_EXP 12
1631: PUSH
1632: LD_STRING 08_Denis
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: CALL 7365 0 2
1642: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1643: LD_ADDR_EXP 13
1647: PUSH
1648: LD_STRING 08_Joan
1650: PPUSH
1651: LD_INT 1
1653: PPUSH
1654: CALL 7365 0 2
1658: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1659: LD_ADDR_EXP 14
1663: PUSH
1664: LD_STRING Khatam
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: CALL 7365 0 2
1674: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1675: LD_ADDR_EXP 15
1679: PUSH
1680: LD_STRING Gladstone
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 7365 0 2
1690: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1691: LD_ADDR_EXP 17
1695: PUSH
1696: LD_STRING DeltaDoctor
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: CALL 7365 0 2
1706: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1707: LD_STRING 08_Frank
1709: PPUSH
1710: CALL_OW 28
1714: PUSH
1715: LD_INT 1
1717: EQUAL
1718: IFFALSE 1736
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1720: LD_ADDR_EXP 8
1724: PUSH
1725: LD_STRING Yamoko
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL 7365 0 2
1735: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1736: LD_ADDR_EXP 22
1740: PUSH
1741: LD_STRING 09_others
1743: PPUSH
1744: CALL_OW 31
1748: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1749: LD_ADDR_EXP 23
1753: PUSH
1754: LD_STRING 09_apes
1756: PPUSH
1757: CALL_OW 31
1761: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1762: LD_EXP 11
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1777: LD_EXP 12
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1792: LD_EXP 13
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1807: LD_EXP 14
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1822: LD_EXP 15
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1852: LD_EXP 8
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1867: LD_EXP 11
1871: PUSH
1872: LD_EXP 14
1876: PUSH
1877: LD_EXP 12
1881: PUSH
1882: LD_EXP 15
1886: PUSH
1887: LD_EXP 17
1891: PUSH
1892: LD_EXP 13
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: CALL_OW 336
// if others09 > 2 then
1912: LD_EXP 22
1916: PUSH
1917: LD_INT 2
1919: GREATER
1920: IFFALSE 1965
// begin for i := 1 to 3 do
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: DOUBLE
1928: LD_INT 1
1930: DEC
1931: ST_TO_ADDR
1932: LD_INT 3
1934: PUSH
1935: FOR_TO
1936: IFFALSE 1961
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
1938: LD_EXP 22
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
1959: GO 1935
1961: POP
1962: POP
// end else
1963: GO 1997
// begin for i in others09 do
1965: LD_ADDR_VAR 0 2
1969: PUSH
1970: LD_EXP 22
1974: PUSH
1975: FOR_IN
1976: IFFALSE 1995
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_INT 1
1985: PPUSH
1986: LD_INT 0
1988: PPUSH
1989: CALL_OW 49
1993: GO 1975
1995: POP
1996: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
1997: LD_INT 22
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 21
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 25
2019: PUSH
2020: LD_INT 2
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PPUSH
2032: CALL_OW 69
2036: PUSH
2037: LD_EXP 11
2041: PUSH
2042: LD_EXP 14
2046: PUSH
2047: LD_EXP 12
2051: PUSH
2052: LD_EXP 15
2056: PUSH
2057: LD_EXP 17
2061: PUSH
2062: LD_EXP 13
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 0
2077: EQUAL
2078: DIFF
2079: IFFALSE 2181
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: LD_INT 4
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 21
2098: PUSH
2099: LD_INT 1
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 25
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: LD_EXP 11
2130: PUSH
2131: LD_EXP 14
2135: PUSH
2136: LD_EXP 12
2140: PUSH
2141: LD_EXP 15
2145: PUSH
2146: LD_EXP 17
2150: PUSH
2151: LD_EXP 13
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: DIFF
2164: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2165: LD_VAR 0 3
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 336
// end ; for i in ape09 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_EXP 23
2190: PUSH
2191: FOR_IN
2192: IFFALSE 2211
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 49
2209: GO 2191
2211: POP
2212: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2213: LD_INT 22
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 21
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 25
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PPUSH
2248: CALL_OW 69
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 101
2258: PPUSH
2259: LD_INT 30
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 205
// uc_side = 1 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// hc_class := 1 ;
2277: LD_ADDR_OWVAR 28
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// hc_sex := sex_female ;
2285: LD_ADDR_OWVAR 27
2289: PUSH
2290: LD_INT 2
2292: ST_TO_ADDR
// hc_gallery :=  ;
2293: LD_ADDR_OWVAR 33
2297: PUSH
2298: LD_STRING 
2300: ST_TO_ADDR
// hc_name :=  ;
2301: LD_ADDR_OWVAR 26
2305: PUSH
2306: LD_STRING 
2308: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2309: LD_ADDR_OWVAR 31
2313: PUSH
2314: LD_INT 1
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: LD_INT 0
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: ST_TO_ADDR
// AmScout = CreateHuman ;
2332: LD_ADDR_EXP 18
2336: PUSH
2337: CALL_OW 44
2341: ST_TO_ADDR
// end ;
2342: LD_VAR 0 1
2346: RET
// export function PrepareCornell ; begin
2347: LD_INT 0
2349: PPUSH
// uc_side = 4 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 4
2357: ST_TO_ADDR
// uc_nation = 1 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 1
2365: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2366: LD_ADDR_EXP 19
2370: PUSH
2371: LD_STRING 03_Cornel
2373: PPUSH
2374: LD_INT 1
2376: PPUSH
2377: CALL 7365 0 2
2381: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2382: LD_EXP 19
2386: PPUSH
2387: LD_INT 8
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// if IsInUnit ( JMM ) then
2397: LD_EXP 1
2401: PPUSH
2402: CALL_OW 310
2406: IFFALSE 2449
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2408: LD_EXP 19
2412: PPUSH
2413: LD_EXP 1
2417: PPUSH
2418: CALL_OW 310
2422: PPUSH
2423: CALL_OW 250
2427: PPUSH
2428: LD_EXP 1
2432: PPUSH
2433: CALL_OW 310
2437: PPUSH
2438: CALL_OW 251
2442: PPUSH
2443: CALL_OW 111
2447: GO 2478
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2449: LD_EXP 19
2453: PPUSH
2454: LD_EXP 1
2458: PPUSH
2459: CALL_OW 250
2463: PPUSH
2464: LD_EXP 1
2468: PPUSH
2469: CALL_OW 251
2473: PPUSH
2474: CALL_OW 111
// end ; end_of_file
2478: LD_VAR 0 1
2482: RET
// export function PrepareRussians ; var i , un ; begin
2483: LD_INT 0
2485: PPUSH
2486: PPUSH
2487: PPUSH
// uc_side = 3 ;
2488: LD_ADDR_OWVAR 20
2492: PUSH
2493: LD_INT 3
2495: ST_TO_ADDR
// uc_nation = 3 ;
2496: LD_ADDR_OWVAR 21
2500: PUSH
2501: LD_INT 3
2503: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2504: LD_ADDR_EXP 25
2508: PUSH
2509: LD_STRING Tsaritsyn
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 7365 0 2
2519: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2520: LD_EXP 25
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// for i = 1 to 14 do
2535: LD_ADDR_VAR 0 2
2539: PUSH
2540: DOUBLE
2541: LD_INT 1
2543: DEC
2544: ST_TO_ADDR
2545: LD_INT 14
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2635
// begin uc_side = 3 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 3
2558: ST_TO_ADDR
// uc_nation = 3 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 3
2566: ST_TO_ADDR
// hc_gallery =  ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING 
2574: ST_TO_ADDR
// hc_name =  ;
2575: LD_ADDR_OWVAR 26
2579: PUSH
2580: LD_STRING 
2582: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2583: LD_INT 0
2585: PPUSH
2586: LD_INT 1
2588: PPUSH
2589: LD_EXP 35
2593: PPUSH
2594: LD_EXP 36
2598: PPUSH
2599: CALL_OW 12
2603: PPUSH
2604: CALL_OW 380
// un = CreateHuman ;
2608: LD_ADDR_VAR 0 3
2612: PUSH
2613: CALL_OW 44
2617: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2618: LD_VAR 0 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// end ;
2633: GO 2548
2635: POP
2636: POP
// for i = 1 to 6 do
2637: LD_ADDR_VAR 0 2
2641: PUSH
2642: DOUBLE
2643: LD_INT 1
2645: DEC
2646: ST_TO_ADDR
2647: LD_INT 6
2649: PUSH
2650: FOR_TO
2651: IFFALSE 2737
// begin uc_side = 3 ;
2653: LD_ADDR_OWVAR 20
2657: PUSH
2658: LD_INT 3
2660: ST_TO_ADDR
// uc_nation = 3 ;
2661: LD_ADDR_OWVAR 21
2665: PUSH
2666: LD_INT 3
2668: ST_TO_ADDR
// hc_gallery =  ;
2669: LD_ADDR_OWVAR 33
2673: PUSH
2674: LD_STRING 
2676: ST_TO_ADDR
// hc_name =  ;
2677: LD_ADDR_OWVAR 26
2681: PUSH
2682: LD_STRING 
2684: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: LD_EXP 35
2695: PPUSH
2696: LD_EXP 36
2700: PPUSH
2701: CALL_OW 12
2705: PPUSH
2706: CALL_OW 380
// un = CreateHuman ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: CALL_OW 44
2719: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2720: LD_VAR 0 3
2724: PPUSH
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: CALL_OW 49
// end ;
2735: GO 2650
2737: POP
2738: POP
// for i = 1 to 6 do
2739: LD_ADDR_VAR 0 2
2743: PUSH
2744: DOUBLE
2745: LD_INT 1
2747: DEC
2748: ST_TO_ADDR
2749: LD_INT 6
2751: PUSH
2752: FOR_TO
2753: IFFALSE 2839
// begin uc_side = 3 ;
2755: LD_ADDR_OWVAR 20
2759: PUSH
2760: LD_INT 3
2762: ST_TO_ADDR
// uc_nation = 3 ;
2763: LD_ADDR_OWVAR 21
2767: PUSH
2768: LD_INT 3
2770: ST_TO_ADDR
// hc_gallery =  ;
2771: LD_ADDR_OWVAR 33
2775: PUSH
2776: LD_STRING 
2778: ST_TO_ADDR
// hc_name =  ;
2779: LD_ADDR_OWVAR 26
2783: PUSH
2784: LD_STRING 
2786: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2787: LD_INT 0
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: LD_EXP 35
2797: PPUSH
2798: LD_EXP 36
2802: PPUSH
2803: CALL_OW 12
2807: PPUSH
2808: CALL_OW 380
// un = CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2822: LD_VAR 0 3
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 49
// end ;
2837: GO 2752
2839: POP
2840: POP
// for i = 1 to 4 do
2841: LD_ADDR_VAR 0 2
2845: PUSH
2846: DOUBLE
2847: LD_INT 1
2849: DEC
2850: ST_TO_ADDR
2851: LD_INT 4
2853: PUSH
2854: FOR_TO
2855: IFFALSE 2941
// begin uc_side = 3 ;
2857: LD_ADDR_OWVAR 20
2861: PUSH
2862: LD_INT 3
2864: ST_TO_ADDR
// uc_nation = 3 ;
2865: LD_ADDR_OWVAR 21
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// hc_gallery =  ;
2873: LD_ADDR_OWVAR 33
2877: PUSH
2878: LD_STRING 
2880: ST_TO_ADDR
// hc_name =  ;
2881: LD_ADDR_OWVAR 26
2885: PUSH
2886: LD_STRING 
2888: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2889: LD_INT 0
2891: PPUSH
2892: LD_INT 4
2894: PPUSH
2895: LD_EXP 35
2899: PPUSH
2900: LD_EXP 36
2904: PPUSH
2905: CALL_OW 12
2909: PPUSH
2910: CALL_OW 380
// un = CreateHuman ;
2914: LD_ADDR_VAR 0 3
2918: PUSH
2919: CALL_OW 44
2923: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_INT 3
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 49
// end ;
2939: GO 2854
2941: POP
2942: POP
// end ; end_of_file
2943: LD_VAR 0 1
2947: RET
// export function PrepareArabianCommander ; begin
2948: LD_INT 0
2950: PPUSH
// uc_side = 2 ;
2951: LD_ADDR_OWVAR 20
2955: PUSH
2956: LD_INT 2
2958: ST_TO_ADDR
// uc_nation = 2 ;
2959: LD_ADDR_OWVAR 21
2963: PUSH
2964: LD_INT 2
2966: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
2967: LD_ADDR_EXP 26
2971: PUSH
2972: LD_STRING Dietrich
2974: PPUSH
2975: CALL_OW 25
2979: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
2980: LD_EXP 26
2984: PPUSH
2985: LD_INT 4
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// end ;
2995: LD_VAR 0 1
2999: RET
// export function PrepareArabian ; var i , un , veh ; begin
3000: LD_INT 0
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// for i = 1 to 3 do
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: DOUBLE
3012: LD_INT 1
3014: DEC
3015: ST_TO_ADDR
3016: LD_INT 3
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3106
// begin uc_side = 2 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 2
3029: ST_TO_ADDR
// uc_nation = 2 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 2
3037: ST_TO_ADDR
// hc_gallery =  ;
3038: LD_ADDR_OWVAR 33
3042: PUSH
3043: LD_STRING 
3045: ST_TO_ADDR
// hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 35
3064: PPUSH
3065: LD_EXP 36
3069: PPUSH
3070: CALL_OW 12
3074: PPUSH
3075: CALL_OW 380
// un = CreateHuman ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: CALL_OW 44
3088: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3089: LD_VAR 0 3
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: LD_INT 0
3099: PPUSH
3100: CALL_OW 49
// end ;
3104: GO 3019
3106: POP
3107: POP
// for i = 1 to 6 do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 6
3120: PUSH
3121: FOR_TO
3122: IFFALSE 3208
// begin uc_side = 2 ;
3124: LD_ADDR_OWVAR 20
3128: PUSH
3129: LD_INT 2
3131: ST_TO_ADDR
// uc_nation = 2 ;
3132: LD_ADDR_OWVAR 21
3136: PUSH
3137: LD_INT 2
3139: ST_TO_ADDR
// hc_gallery =  ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING 
3147: ST_TO_ADDR
// hc_name =  ;
3148: LD_ADDR_OWVAR 26
3152: PUSH
3153: LD_STRING 
3155: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3156: LD_INT 0
3158: PPUSH
3159: LD_INT 2
3161: PPUSH
3162: LD_EXP 35
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: CALL_OW 12
3176: PPUSH
3177: CALL_OW 380
// un = CreateHuman ;
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: CALL_OW 44
3190: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3191: LD_VAR 0 3
3195: PPUSH
3196: LD_INT 4
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 49
// end ;
3206: GO 3121
3208: POP
3209: POP
// for i = 1 to 6 do
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: DOUBLE
3216: LD_INT 1
3218: DEC
3219: ST_TO_ADDR
3220: LD_INT 6
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3310
// begin uc_side = 2 ;
3226: LD_ADDR_OWVAR 20
3230: PUSH
3231: LD_INT 2
3233: ST_TO_ADDR
// uc_nation = 2 ;
3234: LD_ADDR_OWVAR 21
3238: PUSH
3239: LD_INT 2
3241: ST_TO_ADDR
// hc_gallery =  ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING 
3249: ST_TO_ADDR
// hc_name =  ;
3250: LD_ADDR_OWVAR 26
3254: PUSH
3255: LD_STRING 
3257: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_EXP 35
3268: PPUSH
3269: LD_EXP 36
3273: PPUSH
3274: CALL_OW 12
3278: PPUSH
3279: CALL_OW 380
// un = CreateHuman ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: CALL_OW 44
3292: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3293: LD_VAR 0 3
3297: PPUSH
3298: LD_INT 4
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL_OW 49
// end ;
3308: GO 3223
3310: POP
3311: POP
// for i = 1 to 4 do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: DOUBLE
3318: LD_INT 1
3320: DEC
3321: ST_TO_ADDR
3322: LD_INT 4
3324: PUSH
3325: FOR_TO
3326: IFFALSE 3412
// begin uc_side = 2 ;
3328: LD_ADDR_OWVAR 20
3332: PUSH
3333: LD_INT 2
3335: ST_TO_ADDR
// uc_nation = 2 ;
3336: LD_ADDR_OWVAR 21
3340: PUSH
3341: LD_INT 2
3343: ST_TO_ADDR
// hc_gallery =  ;
3344: LD_ADDR_OWVAR 33
3348: PUSH
3349: LD_STRING 
3351: ST_TO_ADDR
// hc_name =  ;
3352: LD_ADDR_OWVAR 26
3356: PUSH
3357: LD_STRING 
3359: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_EXP 35
3370: PPUSH
3371: LD_EXP 36
3375: PPUSH
3376: CALL_OW 12
3380: PPUSH
3381: CALL_OW 380
// un = CreateHuman ;
3385: LD_ADDR_VAR 0 3
3389: PUSH
3390: CALL_OW 44
3394: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3395: LD_VAR 0 3
3399: PPUSH
3400: LD_INT 4
3402: PPUSH
3403: LD_INT 0
3405: PPUSH
3406: CALL_OW 49
// end ;
3410: GO 3325
3412: POP
3413: POP
// for i = 1 to 2 do
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_INT 2
3426: PUSH
3427: FOR_TO
3428: IFFALSE 3558
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 22
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 21
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 58
3457: PUSH
3458: EMPTY
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PPUSH
3466: CALL_OW 69
3470: ST_TO_ADDR
// uc_side = 2 ;
3471: LD_ADDR_OWVAR 20
3475: PUSH
3476: LD_INT 2
3478: ST_TO_ADDR
// uc_nation = 2 ;
3479: LD_ADDR_OWVAR 21
3483: PUSH
3484: LD_INT 2
3486: ST_TO_ADDR
// hc_gallery =  ;
3487: LD_ADDR_OWVAR 33
3491: PUSH
3492: LD_STRING 
3494: ST_TO_ADDR
// hc_name =  ;
3495: LD_ADDR_OWVAR 26
3499: PUSH
3500: LD_STRING 
3502: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3503: LD_INT 0
3505: PPUSH
3506: LD_INT 3
3508: PPUSH
3509: LD_EXP 35
3513: PPUSH
3514: LD_EXP 36
3518: PPUSH
3519: CALL_OW 12
3523: PPUSH
3524: CALL_OW 380
// un = CreateHuman ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: CALL_OW 44
3537: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 4
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 52
// end ;
3556: GO 3427
3558: POP
3559: POP
// end ; end_of_file
3560: LD_VAR 0 1
3564: RET
// every 1 do
3565: GO 3567
3567: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
3568: LD_INT 1
3570: PPUSH
3571: LD_INT 19
3573: PPUSH
3574: CALL_OW 332
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
3578: LD_EXP 1
3582: PPUSH
3583: CALL_OW 310
3587: PPUSH
3588: CALL_OW 87
// if IsOk ( Gary ) then
3592: LD_EXP 10
3596: PPUSH
3597: CALL_OW 302
3601: IFFALSE 3647
// begin DialogueOn ;
3603: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3607: LD_EXP 10
3611: PPUSH
3612: LD_STRING D2-Gary-1
3614: PPUSH
3615: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3619: LD_EXP 1
3623: PPUSH
3624: LD_STRING D2-JMM-1
3626: PPUSH
3627: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3631: LD_EXP 10
3635: PPUSH
3636: LD_STRING D2-Gary-2
3638: PPUSH
3639: CALL_OW 88
// DialogueOff ;
3643: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3647: LD_STRING M1
3649: PPUSH
3650: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3654: LD_INT 38
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3667: LD_INT 47
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: LD_INT 50
3675: PPUSH
3676: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3680: LD_INT 47
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: LD_INT 50
3688: PPUSH
3689: CALL_OW 291
// SaveForQuickRestart ;
3693: CALL_OW 22
// end ;
3697: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3698: LD_EXP 1
3702: PPUSH
3703: LD_EXP 11
3707: PPUSH
3708: CALL_OW 296
3712: PUSH
3713: LD_INT 15
3715: LESS
3716: IFFALSE 4161
3718: GO 3720
3720: DISABLE
// begin InGameOn ;
3721: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3725: LD_EXP 1
3729: PPUSH
3730: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3734: LD_EXP 1
3738: PPUSH
3739: CALL_OW 87
// wait ( 0 0$1 ) ;
3743: LD_INT 35
3745: PPUSH
3746: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3750: LD_INT 35
3752: PPUSH
3753: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
3757: LD_EXP 11
3761: PUSH
3762: LD_EXP 13
3766: PUSH
3767: LD_EXP 12
3771: PUSH
3772: LD_EXP 14
3776: PUSH
3777: LD_EXP 8
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PPUSH
3789: LD_EXP 1
3793: PPUSH
3794: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3798: LD_EXP 1
3802: PPUSH
3803: LD_EXP 11
3807: PPUSH
3808: CALL_OW 296
3812: PUSH
3813: LD_INT 5
3815: LESS
3816: IFFALSE 3750
// ComTurnUnit ( JMM , Simms ) ;
3818: LD_EXP 1
3822: PPUSH
3823: LD_EXP 11
3827: PPUSH
3828: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3832: LD_EXP 11
3836: PUSH
3837: LD_EXP 13
3841: PUSH
3842: LD_EXP 12
3846: PUSH
3847: LD_EXP 14
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3867: LD_EXP 1
3871: PUSH
3872: LD_EXP 11
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PPUSH
3881: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3885: LD_EXP 11
3889: PPUSH
3890: LD_STRING D2a-Sim-1
3892: PPUSH
3893: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3897: LD_EXP 1
3901: PPUSH
3902: LD_STRING D2a-JMM-1
3904: PPUSH
3905: CALL_OW 88
// if IsOk ( Joan ) then
3909: LD_EXP 13
3913: PPUSH
3914: CALL_OW 302
3918: IFFALSE 3970
// begin ComTurnUnit ( JMM , Joan ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
3934: LD_EXP 13
3938: PPUSH
3939: LD_STRING D2b-Joan-1
3941: PPUSH
3942: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D2b-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
3958: LD_EXP 13
3962: PPUSH
3963: LD_STRING D2b-Joan-2
3965: PPUSH
3966: CALL_OW 88
// end ; if IsOk ( Denis ) then
3970: LD_EXP 12
3974: PPUSH
3975: CALL_OW 302
3979: IFFALSE 4007
// begin ComTurnUnit ( JMM , Denis ) ;
3981: LD_EXP 1
3985: PPUSH
3986: LD_EXP 12
3990: PPUSH
3991: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
3995: LD_EXP 12
3999: PPUSH
4000: LD_STRING D2c-Den-1
4002: PPUSH
4003: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4007: LD_EXP 14
4011: PPUSH
4012: CALL_OW 302
4016: IFFALSE 4056
// begin ComTurnUnit ( JMM , Khatam ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_EXP 14
4027: PPUSH
4028: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4032: LD_EXP 1
4036: PPUSH
4037: LD_STRING D2c-JMM-1
4039: PPUSH
4040: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4044: LD_EXP 14
4048: PPUSH
4049: LD_STRING D2c-Khat-1
4051: PPUSH
4052: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4056: LD_EXP 8
4060: PPUSH
4061: CALL_OW 302
4065: IFFALSE 4120
// begin repeat wait ( 0 0$1 ) ;
4067: LD_INT 35
4069: PPUSH
4070: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4074: LD_EXP 8
4078: PPUSH
4079: LD_EXP 1
4083: PPUSH
4084: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4088: LD_EXP 1
4092: PPUSH
4093: LD_EXP 8
4097: PPUSH
4098: CALL_OW 296
4102: PUSH
4103: LD_INT 5
4105: LESS
4106: IFFALSE 4067
// Say ( Kikuchi , D3b-Yam-1 ) ;
4108: LD_EXP 8
4112: PPUSH
4113: LD_STRING D3b-Yam-1
4115: PPUSH
4116: CALL_OW 88
// end ; InGameOff ;
4120: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4124: LD_INT 22
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: PPUSH
4139: LD_INT 1
4141: PPUSH
4142: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4146: LD_STRING M1a
4148: PPUSH
4149: CALL_OW 337
// joinEpsilon = 1 ;
4153: LD_ADDR_EXP 28
4157: PUSH
4158: LD_INT 1
4160: ST_TO_ADDR
// end ;
4161: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4162: LD_EXP 54
4166: PUSH
4167: LD_INT 1
4169: EQUAL
4170: IFFALSE 4776
4172: GO 4174
4174: DISABLE
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4179: LD_ADDR_VAR 0 1
4183: PUSH
4184: LD_INT 22
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 4
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 26
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 26
4245: PUSH
4246: LD_INT 1
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 1
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: PPUSH
4297: CALL_OW 69
4301: PUSH
4302: LD_INT 1
4304: ARRAY
4305: ST_TO_ADDR
// DialogueOn ;
4306: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4310: LD_EXP 17
4314: PPUSH
4315: CALL_OW 302
4319: IFFALSE 4335
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4321: LD_EXP 17
4325: PPUSH
4326: LD_STRING D3-Sci1-1
4328: PPUSH
4329: CALL_OW 88
4333: GO 4347
// Say ( tmp1 , D3-Sci1-1 ) ;
4335: LD_VAR 0 1
4339: PPUSH
4340: LD_STRING D3-Sci1-1
4342: PPUSH
4343: CALL_OW 88
// if IsOk ( Gary ) then
4347: LD_EXP 10
4351: PPUSH
4352: CALL_OW 302
4356: IFFALSE 4372
// Say ( Gary , D3-Gary-1 ) else
4358: LD_EXP 10
4362: PPUSH
4363: LD_STRING D3-Gary-1
4365: PPUSH
4366: CALL_OW 88
4370: GO 4384
// Say ( tmp2 , D3-Gary-1 ) ;
4372: LD_VAR 0 2
4376: PPUSH
4377: LD_STRING D3-Gary-1
4379: PPUSH
4380: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4384: LD_EXP 17
4388: PPUSH
4389: CALL_OW 302
4393: IFFALSE 4409
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4395: LD_EXP 17
4399: PPUSH
4400: LD_STRING D3-Sci1-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4421
// Say ( tmp1 , D3-Sci1-2 ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: LD_STRING D3-Sci1-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4421: LD_EXP 1
4425: PPUSH
4426: LD_STRING D3-JMM-2
4428: PPUSH
4429: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4433: LD_EXP 17
4437: PPUSH
4438: CALL_OW 302
4442: IFFALSE 4458
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4444: LD_EXP 17
4448: PPUSH
4449: LD_STRING D3-Sci1-3
4451: PPUSH
4452: CALL_OW 88
4456: GO 4470
// Say ( tmp1 , D3-Sci1-3 ) ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_STRING D3-Sci1-3
4465: PPUSH
4466: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4470: LD_EXP 1
4474: PPUSH
4475: LD_STRING D3-JMM-3
4477: PPUSH
4478: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4482: LD_EXP 17
4486: PPUSH
4487: CALL_OW 302
4491: IFFALSE 4507
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4493: LD_EXP 17
4497: PPUSH
4498: LD_STRING D3-Sci1-4
4500: PPUSH
4501: CALL_OW 88
4505: GO 4519
// Say ( tmp1 , D3-Sci1-4 ) ;
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_STRING D3-Sci1-4
4514: PPUSH
4515: CALL_OW 88
// DialogueOff ;
4519: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4523: LD_INT 12
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4536: LD_INT 32
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4549: LD_INT 12
4551: PPUSH
4552: LD_INT 1
4554: PPUSH
4555: LD_INT 1
4557: PPUSH
4558: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
4562: LD_INT 33
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4575: LD_STRING M2
4577: PPUSH
4578: CALL_OW 337
// wait ( 5 5$0 ) ;
4582: LD_INT 10500
4584: PPUSH
4585: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4589: LD_EXP 11
4593: PPUSH
4594: CALL_OW 302
4598: PUSH
4599: LD_EXP 12
4603: PPUSH
4604: CALL_OW 302
4608: AND
4609: IFFALSE 4776
// begin DialogueOn ;
4611: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4615: LD_EXP 11
4619: PPUSH
4620: LD_STRING D3a-Sim-1
4622: PPUSH
4623: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4627: LD_EXP 12
4631: PPUSH
4632: LD_STRING D3a-Sci1-1
4634: PPUSH
4635: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4639: LD_EXP 11
4643: PPUSH
4644: LD_STRING D3a-Sim-2
4646: PPUSH
4647: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4651: LD_EXP 12
4655: PPUSH
4656: LD_STRING D3a-Sci1-2
4658: PPUSH
4659: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4663: LD_EXP 11
4667: PPUSH
4668: LD_STRING D3a-Sim-3
4670: PPUSH
4671: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4675: LD_EXP 12
4679: PPUSH
4680: LD_STRING D3a-Sci1-3
4682: PPUSH
4683: CALL_OW 88
// if IsOK ( Joan ) then
4687: LD_EXP 13
4691: PPUSH
4692: CALL_OW 302
4696: IFFALSE 4712
// Say ( Simms , D3a-Sim-4 ) else
4698: LD_EXP 11
4702: PPUSH
4703: LD_STRING D3a-Sim-4
4705: PPUSH
4706: CALL_OW 88
4710: GO 4724
// Say ( Simms , D3a-Sim-4a ) ;
4712: LD_EXP 11
4716: PPUSH
4717: LD_STRING D3a-Sim-4a
4719: PPUSH
4720: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4724: LD_EXP 12
4728: PPUSH
4729: LD_STRING D3a-Sci1-4
4731: PPUSH
4732: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4736: LD_EXP 11
4740: PPUSH
4741: LD_STRING D3a-Sim-5
4743: PPUSH
4744: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4748: LD_EXP 12
4752: PPUSH
4753: LD_STRING D3a-Sci1-5
4755: PPUSH
4756: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4760: LD_EXP 11
4764: PPUSH
4765: LD_STRING D3a-Sim-6
4767: PPUSH
4768: CALL_OW 88
// DialogueOff ;
4772: CALL_OW 7
// end ; end ;
4776: PPOPN 2
4778: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4779: LD_EXP 28
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: IFFALSE 5107
4789: GO 4791
4791: DISABLE
4792: LD_INT 0
4794: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4795: LD_EXP 18
4799: PPUSH
4800: LD_STRING D4-FSol1-1
4802: PPUSH
4803: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4807: LD_STRING M3
4809: PPUSH
4810: CALL_OW 337
// PrepareRussians ;
4814: CALL 2483 0 0
// rnd = Rand ( 1 , 100 ) ;
4818: LD_ADDR_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 100
4828: PPUSH
4829: CALL_OW 12
4833: ST_TO_ADDR
// if difficulty = 1 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 1
4841: EQUAL
4842: IFFALSE 4925
// begin if rnd > 0 and rnd < 51 then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_INT 0
4851: GREATER
4852: PUSH
4853: LD_VAR 0 1
4857: PUSH
4858: LD_INT 51
4860: LESS
4861: AND
4862: IFFALSE 4871
// BuildRussianBase ( 2 ) ;
4864: LD_INT 2
4866: PPUSH
4867: CALL 7949 0 1
// if rnd > 50 and rnd < 81 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 50
4878: GREATER
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_INT 81
4887: LESS
4888: AND
4889: IFFALSE 4898
// BuildRussianBase ( 1 ) ;
4891: LD_INT 1
4893: PPUSH
4894: CALL 7949 0 1
// if rnd > 80 and rnd < 101 then
4898: LD_VAR 0 1
4902: PUSH
4903: LD_INT 80
4905: GREATER
4906: PUSH
4907: LD_VAR 0 1
4911: PUSH
4912: LD_INT 101
4914: LESS
4915: AND
4916: IFFALSE 4925
// BuildRussianBase ( 3 ) ;
4918: LD_INT 3
4920: PPUSH
4921: CALL 7949 0 1
// end ; if difficulty = 2 then
4925: LD_OWVAR 67
4929: PUSH
4930: LD_INT 2
4932: EQUAL
4933: IFFALSE 5016
// begin if rnd > 0 and rnd < 61 then
4935: LD_VAR 0 1
4939: PUSH
4940: LD_INT 0
4942: GREATER
4943: PUSH
4944: LD_VAR 0 1
4948: PUSH
4949: LD_INT 61
4951: LESS
4952: AND
4953: IFFALSE 4962
// BuildRussianBase ( 2 ) ;
4955: LD_INT 2
4957: PPUSH
4958: CALL 7949 0 1
// if rnd > 60 and rnd < 81 then
4962: LD_VAR 0 1
4966: PUSH
4967: LD_INT 60
4969: GREATER
4970: PUSH
4971: LD_VAR 0 1
4975: PUSH
4976: LD_INT 81
4978: LESS
4979: AND
4980: IFFALSE 4989
// BuildRussianBase ( 1 ) ;
4982: LD_INT 1
4984: PPUSH
4985: CALL 7949 0 1
// if rnd > 80 and rnd < 101 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 80
4996: GREATER
4997: PUSH
4998: LD_VAR 0 1
5002: PUSH
5003: LD_INT 101
5005: LESS
5006: AND
5007: IFFALSE 5016
// BuildRussianBase ( 3 ) ;
5009: LD_INT 3
5011: PPUSH
5012: CALL 7949 0 1
// end ; if difficulty = 3 then
5016: LD_OWVAR 67
5020: PUSH
5021: LD_INT 3
5023: EQUAL
5024: IFFALSE 5107
// begin if rnd > 0 and rnd < 71 then
5026: LD_VAR 0 1
5030: PUSH
5031: LD_INT 0
5033: GREATER
5034: PUSH
5035: LD_VAR 0 1
5039: PUSH
5040: LD_INT 71
5042: LESS
5043: AND
5044: IFFALSE 5053
// BuildRussianBase ( 3 ) ;
5046: LD_INT 3
5048: PPUSH
5049: CALL 7949 0 1
// if rnd > 70 and rnd < 81 then
5053: LD_VAR 0 1
5057: PUSH
5058: LD_INT 70
5060: GREATER
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: LD_INT 81
5069: LESS
5070: AND
5071: IFFALSE 5080
// BuildRussianBase ( 2 ) ;
5073: LD_INT 2
5075: PPUSH
5076: CALL 7949 0 1
// if rnd > 80 and rnd < 101 then
5080: LD_VAR 0 1
5084: PUSH
5085: LD_INT 80
5087: GREATER
5088: PUSH
5089: LD_VAR 0 1
5093: PUSH
5094: LD_INT 101
5096: LESS
5097: AND
5098: IFFALSE 5107
// BuildRussianBase ( 1 ) ;
5100: LD_INT 1
5102: PPUSH
5103: CALL 7949 0 1
// end ; end ;
5107: PPOPN 1
5109: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5110: LD_INT 54
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 321
5120: PUSH
5121: LD_INT 2
5123: EQUAL
5124: PUSH
5125: LD_INT 21
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 321
5135: PUSH
5136: LD_INT 2
5138: EQUAL
5139: OR
5140: PUSH
5141: LD_INT 22
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 321
5151: PUSH
5152: LD_INT 2
5154: EQUAL
5155: OR
5156: IFFALSE 5473
5158: GO 5160
5160: DISABLE
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
// begin if IsOk ( Denis ) then
5165: LD_EXP 12
5169: PPUSH
5170: CALL_OW 302
5174: IFFALSE 5268
// begin DialogueOn ;
5176: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5180: LD_EXP 1
5184: PPUSH
5185: LD_STRING D6-JMM-1
5187: PPUSH
5188: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5192: LD_EXP 12
5196: PPUSH
5197: LD_STRING D6-Sci1-1
5199: PPUSH
5200: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5204: LD_EXP 1
5208: PPUSH
5209: LD_STRING D6-JMM-2
5211: PPUSH
5212: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5216: LD_EXP 12
5220: PPUSH
5221: LD_STRING D6-Sci1-2
5223: PPUSH
5224: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5228: LD_EXP 1
5232: PPUSH
5233: LD_STRING D6-JMM-3
5235: PPUSH
5236: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5240: LD_EXP 12
5244: PPUSH
5245: LD_STRING D6-Sci1-3
5247: PPUSH
5248: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5252: LD_EXP 1
5256: PPUSH
5257: LD_STRING D6-JMM-4
5259: PPUSH
5260: CALL_OW 88
// DialogueOff ;
5264: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
5268: LD_INT 1050
5270: PPUSH
5271: CALL_OW 67
// if arabianTrait = 0 then
5275: LD_EXP 48
5279: PUSH
5280: LD_INT 0
5282: EQUAL
5283: IFFALSE 5417
// begin DialogueOn ;
5285: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
5289: LD_INT 22
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 25
5301: PUSH
5302: LD_INT 4
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 26
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL_OW 69
5328: PPUSH
5329: LD_STRING D5-Ar1-1
5331: PPUSH
5332: LD_STRING D5-Ar1-1
5334: PPUSH
5335: CALL 7422 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
5339: LD_EXP 26
5343: PPUSH
5344: LD_STRING D5-Diet-1
5346: PPUSH
5347: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
5351: LD_INT 22
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 25
5363: PUSH
5364: LD_INT 4
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 26
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 69
5390: PPUSH
5391: LD_STRING D5-Ar1-2
5393: PPUSH
5394: LD_STRING D5-Ar1-2
5396: PPUSH
5397: CALL 7422 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
5401: LD_EXP 26
5405: PPUSH
5406: LD_STRING D5-Diet-2
5408: PPUSH
5409: CALL_OW 88
// DialogueOff ;
5413: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5417: LD_INT 2100
5419: PUSH
5420: LD_INT 3150
5422: PUSH
5423: LD_INT 4200
5425: PUSH
5426: LD_INT 5250
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 4
5440: PPUSH
5441: CALL_OW 12
5445: ARRAY
5446: PPUSH
5447: CALL_OW 67
// if arabianTrait = 0 then
5451: LD_EXP 48
5455: PUSH
5456: LD_INT 0
5458: EQUAL
5459: IFFALSE 5473
// begin arabianTrait = 1 ;
5461: LD_ADDR_EXP 48
5465: PUSH
5466: LD_INT 1
5468: ST_TO_ADDR
// PrepareArabianTrait ;
5469: CALL 5476 0 0
// end ; end ;
5473: PPOPN 2
5475: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
5476: LD_INT 0
5478: PPUSH
5479: PPUSH
5480: PPUSH
5481: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5482: LD_ADDR_VAR 0 2
5486: PUSH
5487: LD_INT 22
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 25
5499: PUSH
5500: LD_INT 4
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PPUSH
5511: CALL_OW 69
5515: PUSH
5516: FOR_IN
5517: IFFALSE 5530
// ComExitBuilding ( i ) ;
5519: LD_VAR 0 2
5523: PPUSH
5524: CALL_OW 122
5528: GO 5516
5530: POP
5531: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 22
5539: PUSH
5540: LD_INT 2
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 25
5549: PUSH
5550: LD_INT 3
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 69
5565: PUSH
5566: FOR_IN
5567: IFFALSE 5580
// ComExitVehicle ( i ) ;
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 121
5578: GO 5566
5580: POP
5581: POP
// wait ( 0 0$3 ) ;
5582: LD_INT 105
5584: PPUSH
5585: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5589: LD_INT 76
5591: PPUSH
5592: LD_INT 19
5594: PPUSH
5595: CALL_OW 84
// DialogueOn ;
5599: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 26
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PPUSH
5627: CALL_OW 69
5631: PUSH
5632: LD_EXP 1
5636: PUSH
5637: LD_EXP 14
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: DIFF
5646: PPUSH
5647: LD_STRING D8-Sol1-1
5649: PPUSH
5650: LD_STRING D8-Sol1-1
5652: PPUSH
5653: CALL 7422 0 3
// if IsOK ( DeltaDoctor ) then
5657: LD_EXP 17
5661: PPUSH
5662: CALL_OW 302
5666: IFFALSE 5682
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING D8-Sci1-1
5675: PPUSH
5676: CALL_OW 88
5680: GO 5787
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5682: LD_INT 22
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 26
5694: PUSH
5695: LD_INT 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 2
5704: PUSH
5705: LD_INT 25
5707: PUSH
5708: LD_INT 1
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 25
5717: PUSH
5718: LD_INT 2
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 25
5727: PUSH
5728: LD_INT 3
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 25
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: PPUSH
5757: CALL_OW 69
5761: PUSH
5762: LD_EXP 1
5766: PUSH
5767: LD_EXP 14
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: DIFF
5776: PPUSH
5777: LD_STRING D8-Sol1-1
5779: PPUSH
5780: LD_STRING D8-Sol1-1
5782: PPUSH
5783: CALL 7422 0 3
// Say ( JMM , D8-JMM-1 ) ;
5787: LD_EXP 1
5791: PPUSH
5792: LD_STRING D8-JMM-1
5794: PPUSH
5795: CALL_OW 88
// DialogueOff ;
5799: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
5803: LD_INT 2
5805: PPUSH
5806: LD_INT 2
5808: PPUSH
5809: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
5813: LD_INT 1
5815: PPUSH
5816: LD_INT 2
5818: PPUSH
5819: LD_INT 2
5821: PPUSH
5822: LD_INT 1
5824: PPUSH
5825: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
5829: LD_INT 3
5831: PPUSH
5832: LD_INT 2
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
5845: LD_ADDR_VAR 0 2
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 2
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 21
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 69
5878: PUSH
5879: FOR_IN
5880: IFFALSE 6020
// begin ComExitBuilding ( i ) ;
5882: LD_VAR 0 2
5886: PPUSH
5887: CALL_OW 122
// wait ( 0 0$1 ) ;
5891: LD_INT 35
5893: PPUSH
5894: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
5898: LD_VAR 0 2
5902: PPUSH
5903: LD_INT 77
5905: PPUSH
5906: LD_INT 10
5908: PPUSH
5909: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_INT 82
5920: PPUSH
5921: LD_INT 5
5923: PPUSH
5924: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
5928: LD_VAR 0 2
5932: PPUSH
5933: LD_INT 95
5935: PPUSH
5936: LD_INT 12
5938: PPUSH
5939: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 102
5950: PPUSH
5951: LD_INT 11
5953: PPUSH
5954: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_INT 116
5965: PPUSH
5966: LD_INT 15
5968: PPUSH
5969: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
5973: LD_VAR 0 2
5977: PPUSH
5978: LD_INT 140
5980: PPUSH
5981: LD_INT 25
5983: PPUSH
5984: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: LD_INT 160
5995: PPUSH
5996: LD_INT 56
5998: PPUSH
5999: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_INT 189
6010: PPUSH
6011: LD_INT 79
6013: PPUSH
6014: CALL_OW 174
// end ;
6018: GO 5879
6020: POP
6021: POP
// arabianAttackersAI = 1 ;
6022: LD_ADDR_EXP 45
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// wait ( 0 0$30 ) ;
6030: LD_INT 1050
6032: PPUSH
6033: CALL_OW 67
// if IsOk ( Gary ) then
6037: LD_EXP 10
6041: PPUSH
6042: CALL_OW 302
6046: IFFALSE 6060
// Say ( Gary , D8a-Gary-1 ) ;
6048: LD_EXP 10
6052: PPUSH
6053: LD_STRING D8a-Gary-1
6055: PPUSH
6056: CALL_OW 88
// wait ( 0 0$5 ) ;
6060: LD_INT 175
6062: PPUSH
6063: CALL_OW 67
// if IsOK ( Khatam ) then
6067: LD_EXP 14
6071: PPUSH
6072: CALL_OW 302
6076: IFFALSE 6496
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 2
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 1
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 25
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 25
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: LD_EXP 1
6167: PUSH
6168: LD_EXP 14
6172: PUSH
6173: LD_EXP 13
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: DIFF
6183: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6184: LD_EXP 14
6188: PPUSH
6189: LD_INT 8
6191: PPUSH
6192: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6196: LD_EXP 14
6200: PPUSH
6201: CALL_OW 122
// wait ( 0 0$1 ) ;
6205: LD_INT 35
6207: PPUSH
6208: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6212: LD_EXP 14
6216: PPUSH
6217: CALL_OW 121
// wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6228: LD_EXP 14
6232: PPUSH
6233: LD_INT 7
6235: PPUSH
6236: CALL_OW 113
// DialogueOn ;
6240: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
6244: LD_VAR 0 3
6248: PUSH
6249: LD_INT 1
6251: ARRAY
6252: PPUSH
6253: CALL_OW 258
6257: PUSH
6258: LD_INT 1
6260: EQUAL
6261: IFFALSE 6281
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 1
6270: ARRAY
6271: PPUSH
6272: LD_STRING D8b-Sol1-1
6274: PPUSH
6275: CALL_OW 88
6279: GO 6297
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: ARRAY
6289: PPUSH
6290: LD_STRING D8b-FSol1-1
6292: PPUSH
6293: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
6297: LD_EXP 14
6301: PPUSH
6302: LD_STRING D8b-Khat-1
6304: PPUSH
6305: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6309: LD_VAR 0 3
6313: PUSH
6314: LD_INT 1
6316: ARRAY
6317: PPUSH
6318: CALL_OW 258
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 6346
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_STRING D8b-Sol1-2
6339: PPUSH
6340: CALL_OW 88
6344: GO 6362
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: ARRAY
6354: PPUSH
6355: LD_STRING D8b-FSol1-2
6357: PPUSH
6358: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
6362: LD_EXP 14
6366: PPUSH
6367: LD_STRING D8b-Khat-2
6369: PPUSH
6370: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 1
6381: ARRAY
6382: PPUSH
6383: CALL_OW 258
6387: PUSH
6388: LD_INT 1
6390: EQUAL
6391: IFFALSE 6411
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: PPUSH
6402: LD_STRING D8b-Sol1-3
6404: PPUSH
6405: CALL_OW 88
6409: GO 6427
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
6411: LD_VAR 0 3
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: PPUSH
6420: LD_STRING D8b-FSol1-3
6422: PPUSH
6423: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
6427: LD_EXP 14
6431: PPUSH
6432: LD_STRING D8b-Khat-3
6434: PPUSH
6435: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6439: LD_VAR 0 3
6443: PUSH
6444: LD_INT 1
6446: ARRAY
6447: PPUSH
6448: CALL_OW 258
6452: PUSH
6453: LD_INT 1
6455: EQUAL
6456: IFFALSE 6476
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
6458: LD_VAR 0 3
6462: PUSH
6463: LD_INT 1
6465: ARRAY
6466: PPUSH
6467: LD_STRING D8b-Sol1-4
6469: PPUSH
6470: CALL_OW 88
6474: GO 6492
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PPUSH
6485: LD_STRING D8b-FSol1-4
6487: PPUSH
6488: CALL_OW 88
// DialogueOff ;
6492: CALL_OW 7
// end ; end ;
6496: LD_VAR 0 1
6500: RET
// every 0 0$1 do var i ;
6501: GO 6503
6503: DISABLE
6504: LD_INT 0
6506: PPUSH
// begin enable ;
6507: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6508: LD_ADDR_VAR 0 1
6512: PUSH
6513: LD_INT 7
6515: PPUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 70
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6600
// begin if GetClass ( i ) = 4 then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 257
6543: PUSH
6544: LD_INT 4
6546: EQUAL
6547: IFFALSE 6559
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6549: LD_INT 1
6551: PPUSH
6552: LD_STRING 10_ScientistsEscape_1
6554: PPUSH
6555: CALL_OW 39
// if i = Dietrich then
6559: LD_VAR 0 1
6563: PUSH
6564: LD_EXP 26
6568: EQUAL
6569: IFFALSE 6581
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6571: LD_INT 1
6573: PPUSH
6574: LD_STRING 10_GensherEscape_1
6576: PPUSH
6577: CALL_OW 39
// arabianEscape = 1 ;
6581: LD_ADDR_EXP 46
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// RemoveUnit ( i ) ;
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 64
// end ;
6598: GO 6531
6600: POP
6601: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6602: LD_EXP 14
6606: PPUSH
6607: LD_INT 7
6609: PPUSH
6610: CALL_OW 308
6614: IFFALSE 6633
// begin KhatamStatus = 1 ;
6616: LD_ADDR_EXP 49
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6624: LD_EXP 14
6628: PPUSH
6629: CALL_OW 64
// end ; end ;
6633: PPOPN 1
6635: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6636: LD_EXP 14
6640: PPUSH
6641: CALL_OW 301
6645: IFFALSE 6658
6647: GO 6649
6649: DISABLE
// KhatamStatus = 0 ;
6650: LD_ADDR_EXP 49
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
6658: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
6659: LD_INT 22
6661: PUSH
6662: LD_INT 2
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 21
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PPUSH
6683: CALL_OW 69
6687: PUSH
6688: LD_INT 0
6690: EQUAL
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: PUSH
6721: LD_INT 0
6723: EQUAL
6724: AND
6725: IFFALSE 6738
6727: GO 6729
6729: DISABLE
// arabianDefeated = 1 ;
6730: LD_ADDR_EXP 47
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
6738: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
6739: LD_INT 54
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 321
6749: PUSH
6750: LD_INT 2
6752: EQUAL
6753: PUSH
6754: LD_INT 55
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 321
6764: PUSH
6765: LD_INT 2
6767: EQUAL
6768: AND
6769: PUSH
6770: LD_INT 21
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: CALL_OW 321
6780: PUSH
6781: LD_INT 2
6783: EQUAL
6784: AND
6785: PUSH
6786: LD_INT 22
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 321
6796: PUSH
6797: LD_INT 2
6799: EQUAL
6800: AND
6801: PUSH
6802: LD_INT 12
6804: PPUSH
6805: LD_INT 1
6807: PPUSH
6808: CALL_OW 321
6812: PUSH
6813: LD_INT 2
6815: EQUAL
6816: AND
6817: PUSH
6818: LD_INT 32
6820: PPUSH
6821: LD_INT 1
6823: PPUSH
6824: CALL_OW 321
6828: PUSH
6829: LD_INT 2
6831: EQUAL
6832: AND
6833: PUSH
6834: LD_EXP 53
6838: PUSH
6839: LD_INT 0
6841: EQUAL
6842: AND
6843: PUSH
6844: LD_EXP 48
6848: PUSH
6849: LD_INT 0
6851: EQUAL
6852: AND
6853: IFFALSE 6870
6855: GO 6857
6857: DISABLE
// begin arabianTrait = 1 ;
6858: LD_ADDR_EXP 48
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// PrepareArabianTrait ;
6866: CALL 5476 0 0
// end ;
6870: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6871: LD_EXP 28
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: PUSH
6880: LD_STRING 02_mikhailStatus_1
6882: PPUSH
6883: LD_INT 0
6885: PPUSH
6886: CALL_OW 30
6890: PUSH
6891: LD_INT 1
6893: EQUAL
6894: AND
6895: IFFALSE 6904
6897: GO 6899
6899: DISABLE
// PrepareCornell ;
6900: CALL 2347 0 0
6904: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6905: LD_INT 1
6907: PPUSH
6908: LD_EXP 19
6912: PPUSH
6913: CALL_OW 292
6917: IFFALSE 7142
6919: GO 6921
6921: DISABLE
// begin InGameOn ;
6922: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6926: LD_EXP 19
6930: PPUSH
6931: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6935: LD_EXP 19
6939: PPUSH
6940: LD_STRING D7-Corn-1
6942: PPUSH
6943: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
6947: LD_INT 22
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 3
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: PUSH
7016: LD_EXP 1
7020: PUSH
7021: LD_EXP 13
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: DIFF
7030: PPUSH
7031: LD_STRING D7-Sol1-1
7033: PPUSH
7034: LD_STRING D7-FSol1-1
7036: PPUSH
7037: CALL 7422 0 3
// CenterNowOnUnits ( Cornell ) ;
7041: LD_EXP 19
7045: PPUSH
7046: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
7050: LD_EXP 19
7054: PPUSH
7055: LD_STRING D7-Corn-2
7057: PPUSH
7058: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7062: LD_EXP 1
7066: PPUSH
7067: LD_STRING D7-JMM-2
7069: PPUSH
7070: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
7074: LD_EXP 19
7078: PPUSH
7079: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING D7-Corn-3
7090: PPUSH
7091: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
7095: LD_EXP 19
7099: PPUSH
7100: LD_INT 250
7102: PPUSH
7103: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
7107: LD_EXP 19
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 235
// wait ( 0 0$1 ) ;
7119: LD_INT 35
7121: PPUSH
7122: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
7126: LD_EXP 1
7130: PPUSH
7131: LD_STRING D7-JMM-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// end ;
7142: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
7143: LD_EXP 19
7147: PPUSH
7148: CALL_OW 255
7152: PUSH
7153: LD_INT 1
7155: EQUAL
7156: PUSH
7157: LD_EXP 19
7161: PPUSH
7162: CALL_OW 256
7166: PUSH
7167: LD_INT 251
7169: GREATER
7170: AND
7171: IFFALSE 7364
7173: GO 7175
7175: DISABLE
// begin DialogueOn ;
7176: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D7a-JMM-1
7187: PPUSH
7188: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7192: LD_EXP 19
7196: PPUSH
7197: LD_STRING D7a-Corn-1
7199: PPUSH
7200: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7204: LD_EXP 1
7208: PPUSH
7209: LD_STRING D7a-JMM-2
7211: PPUSH
7212: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7216: LD_EXP 19
7220: PPUSH
7221: LD_STRING D7a-Corn-2
7223: PPUSH
7224: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7228: LD_EXP 1
7232: PPUSH
7233: LD_STRING D7a-JMM-3
7235: PPUSH
7236: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7240: LD_EXP 19
7244: PPUSH
7245: LD_STRING D7a-Corn-3
7247: PPUSH
7248: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7252: LD_EXP 1
7256: PPUSH
7257: LD_STRING D7a-JMM-4
7259: PPUSH
7260: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7264: LD_EXP 19
7268: PPUSH
7269: LD_STRING D7a-Corn-4
7271: PPUSH
7272: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7276: LD_EXP 1
7280: PPUSH
7281: LD_STRING D7a-JMM-5
7283: PPUSH
7284: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7288: LD_EXP 19
7292: PPUSH
7293: LD_STRING D7a-Corn-5
7295: PPUSH
7296: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
7300: LD_EXP 1
7304: PPUSH
7305: LD_STRING D7a-JMM-6
7307: PPUSH
7308: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
7312: LD_EXP 19
7316: PPUSH
7317: LD_STRING D7a-Corn-6
7319: PPUSH
7320: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
7324: LD_EXP 1
7328: PPUSH
7329: LD_STRING D7a-JMM-7
7331: PPUSH
7332: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
7336: LD_EXP 19
7340: PPUSH
7341: LD_STRING D7a-Corn-7
7343: PPUSH
7344: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7348: LD_EXP 1
7352: PPUSH
7353: LD_STRING D7a-JMM-8
7355: PPUSH
7356: CALL_OW 88
// DialogueOff ;
7360: CALL_OW 7
// end ; end_of_file
7364: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7365: LD_INT 0
7367: PPUSH
7368: PPUSH
// if exist_mode then
7369: LD_VAR 0 2
7373: IFFALSE 7392
// unit := CreateCharacter ( ident ) else
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 34
7389: ST_TO_ADDR
7390: GO 7407
// unit := NewCharacter ( ident ) ;
7392: LD_ADDR_VAR 0 4
7396: PUSH
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 25
7406: ST_TO_ADDR
// result := unit ;
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_VAR 0 4
7416: ST_TO_ADDR
// end ;
7417: LD_VAR 0 3
7421: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7422: LD_INT 0
7424: PPUSH
7425: PPUSH
7426: PPUSH
// rnd = rand ( 1 , characters ) ;
7427: LD_ADDR_VAR 0 6
7431: PUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 12
7444: ST_TO_ADDR
// for i = 1 to characters do
7445: LD_ADDR_VAR 0 5
7449: PUSH
7450: DOUBLE
7451: LD_INT 1
7453: DEC
7454: ST_TO_ADDR
7455: LD_VAR 0 1
7459: PUSH
7460: FOR_TO
7461: IFFALSE 7571
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7463: LD_VAR 0 5
7467: PUSH
7468: LD_VAR 0 6
7472: EQUAL
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: LD_VAR 0 5
7483: ARRAY
7484: PPUSH
7485: CALL_OW 258
7489: PUSH
7490: LD_INT 1
7492: EQUAL
7493: AND
7494: IFFALSE 7516
// Say ( characters [ i ] , dialogMID ) ;
7496: LD_VAR 0 1
7500: PUSH
7501: LD_VAR 0 5
7505: ARRAY
7506: PPUSH
7507: LD_VAR 0 2
7511: PPUSH
7512: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7516: LD_VAR 0 5
7520: PUSH
7521: LD_VAR 0 6
7525: EQUAL
7526: PUSH
7527: LD_VAR 0 1
7531: PUSH
7532: LD_VAR 0 5
7536: ARRAY
7537: PPUSH
7538: CALL_OW 258
7542: PUSH
7543: LD_INT 2
7545: EQUAL
7546: AND
7547: IFFALSE 7569
// Say ( characters [ i ] , dialogFID ) ;
7549: LD_VAR 0 1
7553: PUSH
7554: LD_VAR 0 5
7558: ARRAY
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 88
// end ;
7569: GO 7460
7571: POP
7572: POP
// end ;
7573: LD_VAR 0 4
7577: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7578: LD_INT 0
7580: PPUSH
7581: PPUSH
// for i in charactersList do
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_VAR 0 1
7591: PUSH
7592: FOR_IN
7593: IFFALSE 7622
// begin if IsOk ( i ) then
7595: LD_VAR 0 4
7599: PPUSH
7600: CALL_OW 302
7604: IFFALSE 7620
// SaveCharacters ( i , ident ) ;
7606: LD_VAR 0 4
7610: PPUSH
7611: LD_VAR 0 2
7615: PPUSH
7616: CALL_OW 38
// end ;
7620: GO 7592
7622: POP
7623: POP
// end ;
7624: LD_VAR 0 3
7628: RET
// export function PrepareDifficulty ; begin
7629: LD_INT 0
7631: PPUSH
// if difficulty = 1 then
7632: LD_OWVAR 67
7636: PUSH
7637: LD_INT 1
7639: EQUAL
7640: IFFALSE 7684
// begin RuSolMinLevel = 4 ;
7642: LD_ADDR_EXP 35
7646: PUSH
7647: LD_INT 4
7649: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7650: LD_ADDR_EXP 36
7654: PUSH
7655: LD_INT 7
7657: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7658: LD_INT 51
7660: PPUSH
7661: LD_INT 6
7663: PPUSH
7664: LD_INT 2
7666: PPUSH
7667: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7671: LD_INT 51
7673: PPUSH
7674: LD_INT 5
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 322
// end ; if difficulty = 2 then
7684: LD_OWVAR 67
7688: PUSH
7689: LD_INT 2
7691: EQUAL
7692: IFFALSE 7788
// begin RuSolMinLevel = 5 ;
7694: LD_ADDR_EXP 35
7698: PUSH
7699: LD_INT 5
7701: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7702: LD_ADDR_EXP 36
7706: PUSH
7707: LD_INT 7
7709: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7710: LD_INT 51
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7723: LD_INT 57
7725: PPUSH
7726: LD_INT 6
7728: PPUSH
7729: LD_INT 2
7731: PPUSH
7732: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7736: LD_INT 63
7738: PPUSH
7739: LD_INT 6
7741: PPUSH
7742: LD_INT 2
7744: PPUSH
7745: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7749: LD_INT 51
7751: PPUSH
7752: LD_INT 5
7754: PPUSH
7755: LD_INT 2
7757: PPUSH
7758: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7762: LD_INT 5
7764: PPUSH
7765: LD_INT 2
7767: PPUSH
7768: LD_INT 2
7770: PPUSH
7771: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7775: LD_INT 5
7777: PPUSH
7778: LD_INT 5
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 322
// end ; if difficulty = 3 then
7788: LD_OWVAR 67
7792: PUSH
7793: LD_INT 3
7795: EQUAL
7796: IFFALSE 7944
// begin RuSolMinLevel = 6 ;
7798: LD_ADDR_EXP 35
7802: PUSH
7803: LD_INT 6
7805: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7806: LD_ADDR_EXP 36
7810: PUSH
7811: LD_INT 8
7813: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7814: LD_INT 51
7816: PPUSH
7817: LD_INT 6
7819: PPUSH
7820: LD_INT 2
7822: PPUSH
7823: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7827: LD_INT 57
7829: PPUSH
7830: LD_INT 6
7832: PPUSH
7833: LD_INT 2
7835: PPUSH
7836: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7840: LD_INT 52
7842: PPUSH
7843: LD_INT 6
7845: PPUSH
7846: LD_INT 2
7848: PPUSH
7849: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7853: LD_INT 58
7855: PPUSH
7856: LD_INT 6
7858: PPUSH
7859: LD_INT 2
7861: PPUSH
7862: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7866: LD_INT 63
7868: PPUSH
7869: LD_INT 6
7871: PPUSH
7872: LD_INT 2
7874: PPUSH
7875: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7879: LD_INT 64
7881: PPUSH
7882: LD_INT 6
7884: PPUSH
7885: LD_INT 2
7887: PPUSH
7888: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7892: LD_INT 51
7894: PPUSH
7895: LD_INT 5
7897: PPUSH
7898: LD_INT 2
7900: PPUSH
7901: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7905: LD_INT 52
7907: PPUSH
7908: LD_INT 5
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7918: LD_INT 66
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7931: LD_INT 66
7933: PPUSH
7934: LD_INT 5
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 322
// end ; end ;
7944: LD_VAR 0 1
7948: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// ruPossition = position ;
7955: LD_ADDR_EXP 40
7959: PUSH
7960: LD_VAR 0 1
7964: ST_TO_ADDR
// if position = 1 then
7965: LD_VAR 0 1
7969: PUSH
7970: LD_INT 1
7972: EQUAL
7973: IFFALSE 8749
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7975: LD_ADDR_VAR 0 4
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_INT 3
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 2
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 69
8008: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
8009: LD_ADDR_VAR 0 5
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 49
8019: PUSH
8020: LD_INT 74
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 4
8034: PUSH
8035: LD_INT 73
8037: PUSH
8038: LD_INT 88
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 4
8052: PUSH
8053: LD_INT 56
8055: PUSH
8056: LD_INT 62
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 29
8070: PUSH
8071: LD_INT 43
8073: PUSH
8074: LD_INT 68
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 30
8088: PUSH
8089: LD_INT 43
8091: PUSH
8092: LD_INT 79
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 28
8106: PUSH
8107: LD_INT 60
8109: PUSH
8110: LD_INT 75
8112: PUSH
8113: LD_INT 1
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 50
8127: PUSH
8128: LD_INT 87
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 28
8142: PUSH
8143: LD_INT 45
8145: PUSH
8146: LD_INT 67
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 17
8160: PUSH
8161: LD_INT 47
8163: PUSH
8164: LD_INT 84
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 18
8178: PUSH
8179: LD_INT 46
8181: PUSH
8182: LD_INT 87
8184: PUSH
8185: LD_INT 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 28
8196: PUSH
8197: LD_INT 41
8199: PUSH
8200: LD_INT 64
8202: PUSH
8203: LD_INT 5
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 32
8214: PUSH
8215: LD_INT 75
8217: PUSH
8218: LD_INT 76
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 32
8232: PUSH
8233: LD_INT 77
8235: PUSH
8236: LD_INT 75
8238: PUSH
8239: LD_INT 5
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 32
8250: PUSH
8251: LD_INT 69
8253: PUSH
8254: LD_INT 68
8256: PUSH
8257: LD_INT 3
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 59
8271: PUSH
8272: LD_INT 96
8274: PUSH
8275: LD_INT 5
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 32
8286: PUSH
8287: LD_INT 56
8289: PUSH
8290: LD_INT 96
8292: PUSH
8293: LD_INT 0
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 32
8304: PUSH
8305: LD_INT 51
8307: PUSH
8308: LD_INT 61
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 32
8322: PUSH
8323: LD_INT 42
8325: PUSH
8326: LD_INT 60
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 32
8340: PUSH
8341: LD_INT 36
8343: PUSH
8344: LD_INT 58
8346: PUSH
8347: LD_INT 3
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 32
8358: PUSH
8359: LD_INT 39
8361: PUSH
8362: LD_INT 59
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 32
8376: PUSH
8377: LD_INT 61
8379: PUSH
8380: LD_INT 64
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 33
8394: PUSH
8395: LD_INT 63
8397: PUSH
8398: LD_INT 90
8400: PUSH
8401: LD_INT 5
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 33
8412: PUSH
8413: LD_INT 64
8415: PUSH
8416: LD_INT 88
8418: PUSH
8419: LD_INT 5
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 33
8430: PUSH
8431: LD_INT 72
8433: PUSH
8434: LD_INT 82
8436: PUSH
8437: LD_INT 5
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 42
8451: PUSH
8452: LD_INT 74
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 56
8469: PUSH
8470: LD_INT 77
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 21
8484: PUSH
8485: LD_INT 54
8487: PUSH
8488: LD_INT 91
8490: PUSH
8491: LD_INT 5
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 16
8502: PUSH
8503: LD_INT 50
8505: PUSH
8506: LD_INT 83
8508: PUSH
8509: LD_INT 3
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 24
8520: PUSH
8521: LD_INT 50
8523: PUSH
8524: LD_INT 90
8526: PUSH
8527: LD_INT 0
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8567: LD_ADDR_VAR 0 3
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: LD_INT 25
8587: PUSH
8588: LD_INT 2
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: PUSH
8608: FOR_IN
8609: IFFALSE 8656
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_VAR 0 5
8620: PUSH
8621: LD_INT 2
8623: ARRAY
8624: PUSH
8625: LD_INT 2
8627: ARRAY
8628: PUSH
8629: LD_INT 3
8631: PLUS
8632: PPUSH
8633: LD_VAR 0 5
8637: PUSH
8638: LD_INT 2
8640: ARRAY
8641: PUSH
8642: LD_INT 3
8644: ARRAY
8645: PUSH
8646: LD_INT 2
8648: PLUS
8649: PPUSH
8650: CALL_OW 171
8654: GO 8608
8656: POP
8657: POP
// for i := 1 to buildingsTab do
8658: LD_ADDR_VAR 0 3
8662: PUSH
8663: DOUBLE
8664: LD_INT 1
8666: DEC
8667: ST_TO_ADDR
8668: LD_VAR 0 5
8672: PUSH
8673: FOR_TO
8674: IFFALSE 8747
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8676: LD_VAR 0 4
8680: PPUSH
8681: LD_VAR 0 5
8685: PUSH
8686: LD_VAR 0 3
8690: ARRAY
8691: PUSH
8692: LD_INT 1
8694: ARRAY
8695: PPUSH
8696: LD_VAR 0 5
8700: PUSH
8701: LD_VAR 0 3
8705: ARRAY
8706: PUSH
8707: LD_INT 2
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 5
8715: PUSH
8716: LD_VAR 0 3
8720: ARRAY
8721: PUSH
8722: LD_INT 3
8724: ARRAY
8725: PPUSH
8726: LD_VAR 0 5
8730: PUSH
8731: LD_VAR 0 3
8735: ARRAY
8736: PUSH
8737: LD_INT 4
8739: ARRAY
8740: PPUSH
8741: CALL_OW 205
8745: GO 8673
8747: POP
8748: POP
// end ; if position = 2 then
8749: LD_VAR 0 1
8753: PUSH
8754: LD_INT 2
8756: EQUAL
8757: IFFALSE 9400
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8759: LD_ADDR_VAR 0 4
8763: PUSH
8764: LD_INT 22
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: LD_INT 25
8776: PUSH
8777: LD_INT 2
8779: PUSH
8780: EMPTY
8781: LIST
8782: LIST
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PPUSH
8788: CALL_OW 69
8792: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8793: LD_ADDR_VAR 0 5
8797: PUSH
8798: LD_INT 0
8800: PUSH
8801: LD_INT 104
8803: PUSH
8804: LD_INT 110
8806: PUSH
8807: LD_INT 5
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: LD_INT 98
8821: PUSH
8822: LD_INT 90
8824: PUSH
8825: LD_INT 3
8827: PUSH
8828: EMPTY
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 29
8836: PUSH
8837: LD_INT 103
8839: PUSH
8840: LD_INT 114
8842: PUSH
8843: LD_INT 2
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: PUSH
8852: LD_INT 30
8854: PUSH
8855: LD_INT 99
8857: PUSH
8858: LD_INT 114
8860: PUSH
8861: LD_INT 3
8863: PUSH
8864: EMPTY
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 28
8872: PUSH
8873: LD_INT 100
8875: PUSH
8876: LD_INT 112
8878: PUSH
8879: LD_INT 1
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: PUSH
8888: LD_INT 2
8890: PUSH
8891: LD_INT 92
8893: PUSH
8894: LD_INT 101
8896: PUSH
8897: LD_INT 0
8899: PUSH
8900: EMPTY
8901: LIST
8902: LIST
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 28
8908: PUSH
8909: LD_INT 97
8911: PUSH
8912: LD_INT 116
8914: PUSH
8915: LD_INT 5
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: PUSH
8924: LD_INT 17
8926: PUSH
8927: LD_INT 96
8929: PUSH
8930: LD_INT 101
8932: PUSH
8933: LD_INT 4
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: PUSH
8942: LD_INT 18
8944: PUSH
8945: LD_INT 88
8947: PUSH
8948: LD_INT 97
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 28
8962: PUSH
8963: LD_INT 106
8965: PUSH
8966: LD_INT 92
8968: PUSH
8969: LD_INT 2
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 32
8980: PUSH
8981: LD_INT 88
8983: PUSH
8984: LD_INT 89
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: EMPTY
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 32
8998: PUSH
8999: LD_INT 86
9001: PUSH
9002: LD_INT 90
9004: PUSH
9005: LD_INT 2
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: LD_INT 32
9016: PUSH
9017: LD_INT 85
9019: PUSH
9020: LD_INT 99
9022: PUSH
9023: LD_INT 2
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 32
9034: PUSH
9035: LD_INT 85
9037: PUSH
9038: LD_INT 107
9040: PUSH
9041: LD_INT 1
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: PUSH
9050: LD_INT 33
9052: PUSH
9053: LD_INT 105
9055: PUSH
9056: LD_INT 99
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: EMPTY
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: PUSH
9068: LD_INT 33
9070: PUSH
9071: LD_INT 102
9073: PUSH
9074: LD_INT 92
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: EMPTY
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: PUSH
9086: LD_INT 33
9088: PUSH
9089: LD_INT 105
9091: PUSH
9092: LD_INT 92
9094: PUSH
9095: LD_INT 2
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 6
9106: PUSH
9107: LD_INT 92
9109: PUSH
9110: LD_INT 110
9112: PUSH
9113: LD_INT 0
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 6
9124: PUSH
9125: LD_INT 103
9127: PUSH
9128: LD_INT 103
9130: PUSH
9131: LD_INT 5
9133: PUSH
9134: EMPTY
9135: LIST
9136: LIST
9137: LIST
9138: LIST
9139: PUSH
9140: LD_INT 21
9142: PUSH
9143: LD_INT 89
9145: PUSH
9146: LD_INT 101
9148: PUSH
9149: LD_INT 1
9151: PUSH
9152: EMPTY
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: PUSH
9158: LD_INT 16
9160: PUSH
9161: LD_INT 95
9163: PUSH
9164: LD_INT 104
9166: PUSH
9167: LD_INT 4
9169: PUSH
9170: EMPTY
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: PUSH
9176: LD_INT 24
9178: PUSH
9179: LD_INT 92
9181: PUSH
9182: LD_INT 105
9184: PUSH
9185: LD_INT 0
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: LIST
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9218: LD_ADDR_VAR 0 3
9222: PUSH
9223: LD_INT 22
9225: PUSH
9226: LD_INT 3
9228: PUSH
9229: EMPTY
9230: LIST
9231: LIST
9232: PUSH
9233: LD_INT 3
9235: PUSH
9236: LD_INT 25
9238: PUSH
9239: LD_INT 2
9241: PUSH
9242: EMPTY
9243: LIST
9244: LIST
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: EMPTY
9251: LIST
9252: LIST
9253: PPUSH
9254: CALL_OW 69
9258: PUSH
9259: FOR_IN
9260: IFFALSE 9307
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
9262: LD_VAR 0 3
9266: PPUSH
9267: LD_VAR 0 5
9271: PUSH
9272: LD_INT 2
9274: ARRAY
9275: PUSH
9276: LD_INT 2
9278: ARRAY
9279: PUSH
9280: LD_INT 2
9282: PLUS
9283: PPUSH
9284: LD_VAR 0 5
9288: PUSH
9289: LD_INT 2
9291: ARRAY
9292: PUSH
9293: LD_INT 3
9295: ARRAY
9296: PUSH
9297: LD_INT 1
9299: PLUS
9300: PPUSH
9301: CALL_OW 171
9305: GO 9259
9307: POP
9308: POP
// for i := 1 to buildingsTab do
9309: LD_ADDR_VAR 0 3
9313: PUSH
9314: DOUBLE
9315: LD_INT 1
9317: DEC
9318: ST_TO_ADDR
9319: LD_VAR 0 5
9323: PUSH
9324: FOR_TO
9325: IFFALSE 9398
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9327: LD_VAR 0 4
9331: PPUSH
9332: LD_VAR 0 5
9336: PUSH
9337: LD_VAR 0 3
9341: ARRAY
9342: PUSH
9343: LD_INT 1
9345: ARRAY
9346: PPUSH
9347: LD_VAR 0 5
9351: PUSH
9352: LD_VAR 0 3
9356: ARRAY
9357: PUSH
9358: LD_INT 2
9360: ARRAY
9361: PPUSH
9362: LD_VAR 0 5
9366: PUSH
9367: LD_VAR 0 3
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: ARRAY
9376: PPUSH
9377: LD_VAR 0 5
9381: PUSH
9382: LD_VAR 0 3
9386: ARRAY
9387: PUSH
9388: LD_INT 4
9390: ARRAY
9391: PPUSH
9392: CALL_OW 205
9396: GO 9324
9398: POP
9399: POP
// end ; if position = 3 then
9400: LD_VAR 0 1
9404: PUSH
9405: LD_INT 3
9407: EQUAL
9408: IFFALSE 10222
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9410: LD_ADDR_VAR 0 4
9414: PUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: EMPTY
9436: LIST
9437: LIST
9438: PPUSH
9439: CALL_OW 69
9443: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9444: LD_ADDR_VAR 0 5
9448: PUSH
9449: LD_INT 0
9451: PUSH
9452: LD_INT 151
9454: PUSH
9455: LD_INT 71
9457: PUSH
9458: LD_INT 4
9460: PUSH
9461: EMPTY
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: PUSH
9467: LD_INT 4
9469: PUSH
9470: LD_INT 145
9472: PUSH
9473: LD_INT 53
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: PUSH
9485: LD_INT 4
9487: PUSH
9488: LD_INT 172
9490: PUSH
9491: LD_INT 102
9493: PUSH
9494: LD_INT 5
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: PUSH
9503: LD_INT 29
9505: PUSH
9506: LD_INT 152
9508: PUSH
9509: LD_INT 85
9511: PUSH
9512: LD_INT 3
9514: PUSH
9515: EMPTY
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 30
9523: PUSH
9524: LD_INT 156
9526: PUSH
9527: LD_INT 92
9529: PUSH
9530: LD_INT 3
9532: PUSH
9533: EMPTY
9534: LIST
9535: LIST
9536: LIST
9537: LIST
9538: PUSH
9539: LD_INT 28
9541: PUSH
9542: LD_INT 151
9544: PUSH
9545: LD_INT 66
9547: PUSH
9548: LD_INT 4
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: PUSH
9557: LD_INT 2
9559: PUSH
9560: LD_INT 163
9562: PUSH
9563: LD_INT 95
9565: PUSH
9566: LD_INT 5
9568: PUSH
9569: EMPTY
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 28
9577: PUSH
9578: LD_INT 149
9580: PUSH
9581: LD_INT 63
9583: PUSH
9584: LD_INT 4
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: PUSH
9593: LD_INT 17
9595: PUSH
9596: LD_INT 167
9598: PUSH
9599: LD_INT 99
9601: PUSH
9602: LD_INT 5
9604: PUSH
9605: EMPTY
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: PUSH
9611: LD_INT 18
9613: PUSH
9614: LD_INT 163
9616: PUSH
9617: LD_INT 98
9619: PUSH
9620: LD_INT 0
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: PUSH
9629: LD_INT 28
9631: PUSH
9632: LD_INT 154
9634: PUSH
9635: LD_INT 70
9637: PUSH
9638: LD_INT 4
9640: PUSH
9641: EMPTY
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: LD_INT 32
9649: PUSH
9650: LD_INT 155
9652: PUSH
9653: LD_INT 62
9655: PUSH
9656: LD_INT 4
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 32
9667: PUSH
9668: LD_INT 161
9670: PUSH
9671: LD_INT 69
9673: PUSH
9674: LD_INT 4
9676: PUSH
9677: EMPTY
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: PUSH
9683: LD_INT 32
9685: PUSH
9686: LD_INT 168
9688: PUSH
9689: LD_INT 78
9691: PUSH
9692: LD_INT 4
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: LD_INT 32
9703: PUSH
9704: LD_INT 163
9706: PUSH
9707: LD_INT 80
9709: PUSH
9710: LD_INT 5
9712: PUSH
9713: EMPTY
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: PUSH
9719: LD_INT 32
9721: PUSH
9722: LD_INT 136
9724: PUSH
9725: LD_INT 73
9727: PUSH
9728: LD_INT 0
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: PUSH
9737: LD_INT 32
9739: PUSH
9740: LD_INT 157
9742: PUSH
9743: LD_INT 98
9745: PUSH
9746: LD_INT 0
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: PUSH
9755: LD_INT 32
9757: PUSH
9758: LD_INT 150
9760: PUSH
9761: LD_INT 87
9763: PUSH
9764: LD_INT 1
9766: PUSH
9767: EMPTY
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: PUSH
9773: LD_INT 33
9775: PUSH
9776: LD_INT 171
9778: PUSH
9779: LD_INT 97
9781: PUSH
9782: LD_INT 4
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: PUSH
9791: LD_INT 33
9793: PUSH
9794: LD_INT 168
9796: PUSH
9797: LD_INT 92
9799: PUSH
9800: LD_INT 4
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: PUSH
9809: LD_INT 33
9811: PUSH
9812: LD_INT 166
9814: PUSH
9815: LD_INT 80
9817: PUSH
9818: LD_INT 5
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: PUSH
9827: LD_INT 33
9829: PUSH
9830: LD_INT 141
9832: PUSH
9833: LD_INT 54
9835: PUSH
9836: LD_INT 2
9838: PUSH
9839: EMPTY
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: PUSH
9845: LD_INT 33
9847: PUSH
9848: LD_INT 133
9850: PUSH
9851: LD_INT 57
9853: PUSH
9854: LD_INT 2
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: PUSH
9863: LD_INT 33
9865: PUSH
9866: LD_INT 132
9868: PUSH
9869: LD_INT 61
9871: PUSH
9872: LD_INT 2
9874: PUSH
9875: EMPTY
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 33
9883: PUSH
9884: LD_INT 150
9886: PUSH
9887: LD_INT 82
9889: PUSH
9890: LD_INT 0
9892: PUSH
9893: EMPTY
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: PUSH
9899: LD_INT 33
9901: PUSH
9902: LD_INT 132
9904: PUSH
9905: LD_INT 72
9907: PUSH
9908: LD_INT 0
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: PUSH
9917: LD_INT 6
9919: PUSH
9920: LD_INT 146
9922: PUSH
9923: LD_INT 64
9925: PUSH
9926: LD_INT 4
9928: PUSH
9929: EMPTY
9930: LIST
9931: LIST
9932: LIST
9933: LIST
9934: PUSH
9935: LD_INT 6
9937: PUSH
9938: LD_INT 159
9940: PUSH
9941: LD_INT 85
9943: PUSH
9944: LD_INT 4
9946: PUSH
9947: EMPTY
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: PUSH
9953: LD_INT 21
9955: PUSH
9956: LD_INT 163
9958: PUSH
9959: LD_INT 91
9961: PUSH
9962: LD_INT 3
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: PUSH
9971: LD_INT 16
9973: PUSH
9974: LD_INT 166
9976: PUSH
9977: LD_INT 95
9979: PUSH
9980: LD_INT 4
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: PUSH
9989: LD_INT 24
9991: PUSH
9992: LD_INT 159
9994: PUSH
9995: LD_INT 95
9997: PUSH
9998: LD_INT 1
10000: PUSH
10001: EMPTY
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10040: LD_ADDR_VAR 0 3
10044: PUSH
10045: LD_INT 22
10047: PUSH
10048: LD_INT 3
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 3
10057: PUSH
10058: LD_INT 25
10060: PUSH
10061: LD_INT 2
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PPUSH
10076: CALL_OW 69
10080: PUSH
10081: FOR_IN
10082: IFFALSE 10129
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
10084: LD_VAR 0 3
10088: PPUSH
10089: LD_VAR 0 5
10093: PUSH
10094: LD_INT 2
10096: ARRAY
10097: PUSH
10098: LD_INT 2
10100: ARRAY
10101: PUSH
10102: LD_INT 2
10104: PLUS
10105: PPUSH
10106: LD_VAR 0 5
10110: PUSH
10111: LD_INT 2
10113: ARRAY
10114: PUSH
10115: LD_INT 3
10117: ARRAY
10118: PUSH
10119: LD_INT 3
10121: PLUS
10122: PPUSH
10123: CALL_OW 171
10127: GO 10081
10129: POP
10130: POP
// for i := 1 to buildingsTab do
10131: LD_ADDR_VAR 0 3
10135: PUSH
10136: DOUBLE
10137: LD_INT 1
10139: DEC
10140: ST_TO_ADDR
10141: LD_VAR 0 5
10145: PUSH
10146: FOR_TO
10147: IFFALSE 10220
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10149: LD_VAR 0 4
10153: PPUSH
10154: LD_VAR 0 5
10158: PUSH
10159: LD_VAR 0 3
10163: ARRAY
10164: PUSH
10165: LD_INT 1
10167: ARRAY
10168: PPUSH
10169: LD_VAR 0 5
10173: PUSH
10174: LD_VAR 0 3
10178: ARRAY
10179: PUSH
10180: LD_INT 2
10182: ARRAY
10183: PPUSH
10184: LD_VAR 0 5
10188: PUSH
10189: LD_VAR 0 3
10193: ARRAY
10194: PUSH
10195: LD_INT 3
10197: ARRAY
10198: PPUSH
10199: LD_VAR 0 5
10203: PUSH
10204: LD_VAR 0 3
10208: ARRAY
10209: PUSH
10210: LD_INT 4
10212: ARRAY
10213: PPUSH
10214: CALL_OW 205
10218: GO 10146
10220: POP
10221: POP
// end ; end ;
10222: LD_VAR 0 2
10226: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
10227: LD_INT 0
10229: PPUSH
10230: PPUSH
10231: PPUSH
10232: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
10233: LD_ADDR_VAR 0 3
10237: PUSH
10238: LD_INT 22
10240: PUSH
10241: LD_INT 2
10243: PUSH
10244: EMPTY
10245: LIST
10246: LIST
10247: PUSH
10248: LD_INT 25
10250: PUSH
10251: LD_INT 2
10253: PUSH
10254: EMPTY
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: PPUSH
10262: CALL_OW 69
10266: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
10267: LD_VAR 0 3
10271: PPUSH
10272: LD_INT 0
10274: PPUSH
10275: LD_INT 71
10277: PPUSH
10278: LD_INT 15
10280: PPUSH
10281: LD_INT 3
10283: PPUSH
10284: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
10288: LD_ADDR_VAR 0 4
10292: PUSH
10293: LD_INT 6
10295: PUSH
10296: LD_INT 77
10298: PUSH
10299: LD_INT 18
10301: PUSH
10302: LD_INT 3
10304: PUSH
10305: EMPTY
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: LD_INT 4
10313: PUSH
10314: LD_INT 77
10316: PUSH
10317: LD_INT 26
10319: PUSH
10320: LD_INT 0
10322: PUSH
10323: EMPTY
10324: LIST
10325: LIST
10326: LIST
10327: LIST
10328: PUSH
10329: LD_INT 31
10331: PUSH
10332: LD_INT 82
10334: PUSH
10335: LD_INT 28
10337: PUSH
10338: LD_INT 0
10340: PUSH
10341: EMPTY
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: LD_INT 31
10349: PUSH
10350: LD_INT 84
10352: PUSH
10353: LD_INT 21
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: PUSH
10365: LD_INT 31
10367: PUSH
10368: LD_INT 66
10370: PUSH
10371: LD_INT 14
10373: PUSH
10374: LD_INT 2
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 27
10385: PUSH
10386: LD_INT 67
10388: PUSH
10389: LD_INT 18
10391: PUSH
10392: LD_INT 5
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 27
10403: PUSH
10404: LD_INT 69
10406: PUSH
10407: LD_INT 23
10409: PUSH
10410: LD_INT 2
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: ST_TO_ADDR
// for i := 1 to buildingsTab do
10428: LD_ADDR_VAR 0 2
10432: PUSH
10433: DOUBLE
10434: LD_INT 1
10436: DEC
10437: ST_TO_ADDR
10438: LD_VAR 0 4
10442: PUSH
10443: FOR_TO
10444: IFFALSE 10517
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10446: LD_VAR 0 3
10450: PPUSH
10451: LD_VAR 0 4
10455: PUSH
10456: LD_VAR 0 2
10460: ARRAY
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PPUSH
10466: LD_VAR 0 4
10470: PUSH
10471: LD_VAR 0 2
10475: ARRAY
10476: PUSH
10477: LD_INT 2
10479: ARRAY
10480: PPUSH
10481: LD_VAR 0 4
10485: PUSH
10486: LD_VAR 0 2
10490: ARRAY
10491: PUSH
10492: LD_INT 3
10494: ARRAY
10495: PPUSH
10496: LD_VAR 0 4
10500: PUSH
10501: LD_VAR 0 2
10505: ARRAY
10506: PUSH
10507: LD_INT 4
10509: ARRAY
10510: PPUSH
10511: CALL_OW 205
10515: GO 10443
10517: POP
10518: POP
// end ;
10519: LD_VAR 0 1
10523: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10524: LD_INT 0
10526: PPUSH
10527: PPUSH
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10532: LD_ADDR_VAR 0 7
10536: PUSH
10537: LD_INT 22
10539: PUSH
10540: LD_VAR 0 1
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: LD_INT 25
10551: PUSH
10552: LD_INT 9
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10568: LD_ADDR_VAR 0 8
10572: PUSH
10573: LD_INT 22
10575: PUSH
10576: LD_VAR 0 2
10580: PUSH
10581: EMPTY
10582: LIST
10583: LIST
10584: PUSH
10585: LD_INT 3
10587: PUSH
10588: LD_INT 21
10590: PUSH
10591: LD_INT 3
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PPUSH
10606: CALL_OW 69
10610: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10611: LD_ADDR_VAR 0 5
10615: PUSH
10616: LD_INT 1
10618: PPUSH
10619: LD_INT 3
10621: PPUSH
10622: CALL_OW 12
10626: ST_TO_ADDR
// for i = 1 to list do
10627: LD_ADDR_VAR 0 6
10631: PUSH
10632: DOUBLE
10633: LD_INT 1
10635: DEC
10636: ST_TO_ADDR
10637: LD_VAR 0 7
10641: PUSH
10642: FOR_TO
10643: IFFALSE 11365
// for ta in filter do
10645: LD_ADDR_VAR 0 4
10649: PUSH
10650: LD_VAR 0 8
10654: PUSH
10655: FOR_IN
10656: IFFALSE 11361
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
10658: LD_VAR 0 7
10662: PUSH
10663: LD_VAR 0 6
10667: ARRAY
10668: PPUSH
10669: LD_VAR 0 4
10673: PPUSH
10674: CALL_OW 296
10678: PUSH
10679: LD_INT 12
10681: LESSEQUAL
10682: IFFALSE 11359
// begin case c of 1 :
10684: LD_VAR 0 5
10688: PUSH
10689: LD_INT 1
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 11005
10697: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
10698: LD_VAR 0 7
10702: PUSH
10703: LD_VAR 0 6
10707: ARRAY
10708: PPUSH
10709: LD_VAR 0 4
10713: PPUSH
10714: CALL_OW 250
10718: PPUSH
10719: LD_VAR 0 4
10723: PPUSH
10724: CALL_OW 251
10728: PPUSH
10729: CALL_OW 154
// if eventVar2 = 0 then
10733: LD_EXP 55
10737: PUSH
10738: LD_INT 0
10740: EQUAL
10741: IFFALSE 11003
// begin eventVar2 = 1 ;
10743: LD_ADDR_EXP 55
10747: PUSH
10748: LD_INT 1
10750: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10751: LD_INT 245
10753: PPUSH
10754: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
10758: LD_VAR 0 4
10762: PPUSH
10763: CALL_OW 250
10767: PPUSH
10768: LD_VAR 0 4
10772: PPUSH
10773: CALL_OW 251
10777: PPUSH
10778: CALL_OW 84
// DialogueOn ;
10782: CALL_OW 6
// if IsOK ( Cyrus ) then
10786: LD_EXP 5
10790: PPUSH
10791: CALL_OW 302
10795: IFFALSE 10811
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
10797: LD_EXP 5
10801: PPUSH
10802: LD_STRING D9a-Cyrus-1
10804: PPUSH
10805: CALL_OW 88
// end else
10809: GO 10871
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
10811: LD_INT 22
10813: PUSH
10814: LD_INT 1
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 26
10823: PUSH
10824: LD_INT 1
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: PPUSH
10835: CALL_OW 69
10839: PUSH
10840: LD_EXP 1
10844: PUSH
10845: LD_EXP 14
10849: PUSH
10850: LD_EXP 5
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: DIFF
10860: PPUSH
10861: LD_STRING D9a-Sol1-1
10863: PPUSH
10864: LD_STRING D9a-Sol1-1
10866: PPUSH
10867: CALL 7422 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
10871: LD_INT 22
10873: PUSH
10874: LD_INT 1
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 26
10883: PUSH
10884: LD_INT 1
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: PPUSH
10895: CALL_OW 69
10899: PUSH
10900: LD_EXP 1
10904: PUSH
10905: LD_EXP 14
10909: PUSH
10910: LD_EXP 5
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: LIST
10919: DIFF
10920: PPUSH
10921: LD_STRING D9b-Sol1-1
10923: PPUSH
10924: LD_STRING D9b-Sol1-1
10926: PPUSH
10927: CALL 7422 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
10931: LD_STRING 09_arInfo
10933: PPUSH
10934: LD_INT 0
10936: PPUSH
10937: CALL_OW 30
10941: PUSH
10942: LD_INT 1
10944: EQUAL
10945: IFFALSE 10959
// Say ( JMM , D9a-JMM-1 ) ;
10947: LD_EXP 1
10951: PPUSH
10952: LD_STRING D9a-JMM-1
10954: PPUSH
10955: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
10959: LD_EXP 1
10963: PPUSH
10964: LD_STRING D9c-JMM-1
10966: PPUSH
10967: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
10971: LD_INT 12
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 321
10981: PUSH
10982: LD_INT 2
10984: EQUAL
10985: IFFALSE 10999
// Say ( JMM , D9c-JMM-1a ) ;
10987: LD_EXP 1
10991: PPUSH
10992: LD_STRING D9c-JMM-1a
10994: PPUSH
10995: CALL_OW 88
// DialogueOff ;
10999: CALL_OW 7
// end ; end ; 2 :
11003: GO 11359
11005: LD_INT 2
11007: DOUBLE
11008: EQUAL
11009: IFTRUE 11013
11011: GO 11347
11013: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
11014: LD_VAR 0 7
11018: PUSH
11019: LD_VAR 0 6
11023: ARRAY
11024: PPUSH
11025: LD_VAR 0 4
11029: PPUSH
11030: CALL_OW 250
11034: PUSH
11035: LD_INT 1
11037: NEG
11038: PPUSH
11039: LD_INT 1
11041: PPUSH
11042: CALL_OW 12
11046: PLUS
11047: PPUSH
11048: LD_VAR 0 4
11052: PPUSH
11053: CALL_OW 251
11057: PUSH
11058: LD_INT 1
11060: NEG
11061: PPUSH
11062: LD_INT 1
11064: PPUSH
11065: CALL_OW 12
11069: PLUS
11070: PPUSH
11071: CALL_OW 153
// if eventVar2 = 0 then
11075: LD_EXP 55
11079: PUSH
11080: LD_INT 0
11082: EQUAL
11083: IFFALSE 11345
// begin eventVar2 = 1 ;
11085: LD_ADDR_EXP 55
11089: PUSH
11090: LD_INT 1
11092: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11093: LD_INT 245
11095: PPUSH
11096: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11100: LD_VAR 0 4
11104: PPUSH
11105: CALL_OW 250
11109: PPUSH
11110: LD_VAR 0 4
11114: PPUSH
11115: CALL_OW 251
11119: PPUSH
11120: CALL_OW 84
// DialogueOn ;
11124: CALL_OW 6
// if IsOK ( Cyrus ) then
11128: LD_EXP 5
11132: PPUSH
11133: CALL_OW 302
11137: IFFALSE 11153
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11139: LD_EXP 5
11143: PPUSH
11144: LD_STRING D9a-Cyrus-1
11146: PPUSH
11147: CALL_OW 88
// end else
11151: GO 11213
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11153: LD_INT 22
11155: PUSH
11156: LD_INT 1
11158: PUSH
11159: EMPTY
11160: LIST
11161: LIST
11162: PUSH
11163: LD_INT 26
11165: PUSH
11166: LD_INT 1
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: PPUSH
11177: CALL_OW 69
11181: PUSH
11182: LD_EXP 1
11186: PUSH
11187: LD_EXP 14
11191: PUSH
11192: LD_EXP 5
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: DIFF
11202: PPUSH
11203: LD_STRING D9a-Sol1-1
11205: PPUSH
11206: LD_STRING D9a-Sol1-1
11208: PPUSH
11209: CALL 7422 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11213: LD_INT 22
11215: PUSH
11216: LD_INT 1
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 26
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PPUSH
11237: CALL_OW 69
11241: PUSH
11242: LD_EXP 1
11246: PUSH
11247: LD_EXP 14
11251: PUSH
11252: LD_EXP 5
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: DIFF
11262: PPUSH
11263: LD_STRING D9b-Sol1-1
11265: PPUSH
11266: LD_STRING D9b-Sol1-1
11268: PPUSH
11269: CALL 7422 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11273: LD_STRING 09_arInfo
11275: PPUSH
11276: LD_INT 0
11278: PPUSH
11279: CALL_OW 30
11283: PUSH
11284: LD_INT 1
11286: EQUAL
11287: IFFALSE 11301
// Say ( JMM , D9a-JMM-1 ) ;
11289: LD_EXP 1
11293: PPUSH
11294: LD_STRING D9a-JMM-1
11296: PPUSH
11297: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11301: LD_EXP 1
11305: PPUSH
11306: LD_STRING D9c-JMM-1
11308: PPUSH
11309: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11313: LD_INT 12
11315: PPUSH
11316: LD_INT 1
11318: PPUSH
11319: CALL_OW 321
11323: PUSH
11324: LD_INT 2
11326: EQUAL
11327: IFFALSE 11341
// Say ( JMM , D9c-JMM-1a ) ;
11329: LD_EXP 1
11333: PPUSH
11334: LD_STRING D9c-JMM-1a
11336: PPUSH
11337: CALL_OW 88
// DialogueOff ;
11341: CALL_OW 7
// end ; end ; 3 :
11345: GO 11359
11347: LD_INT 3
11349: DOUBLE
11350: EQUAL
11351: IFTRUE 11355
11353: GO 11358
11355: POP
// ; end ;
11356: GO 11359
11358: POP
// end ; end ;
11359: GO 10655
11361: POP
11362: POP
11363: GO 10642
11365: POP
11366: POP
// end ;
11367: LD_VAR 0 3
11371: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11372: LD_INT 0
11374: PPUSH
11375: PPUSH
11376: PPUSH
11377: PPUSH
// for i = 1 to 72 do
11378: LD_ADDR_VAR 0 5
11382: PUSH
11383: DOUBLE
11384: LD_INT 1
11386: DEC
11387: ST_TO_ADDR
11388: LD_INT 72
11390: PUSH
11391: FOR_TO
11392: IFFALSE 11450
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11394: LD_VAR 0 5
11398: PPUSH
11399: LD_VAR 0 1
11403: PPUSH
11404: CALL_OW 321
11408: PUSH
11409: LD_INT 1
11411: EQUAL
11412: PUSH
11413: LD_VAR 0 5
11417: PPUSH
11418: LD_VAR 0 3
11422: PPUSH
11423: CALL_OW 482
11427: PUSH
11428: LD_INT 1
11430: EQUAL
11431: AND
11432: IFFALSE 11448
// AddComResearch ( lab , i ) ;
11434: LD_VAR 0 2
11438: PPUSH
11439: LD_VAR 0 5
11443: PPUSH
11444: CALL_OW 184
11448: GO 11391
11450: POP
11451: POP
// end ;
11452: LD_VAR 0 4
11456: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11457: LD_INT 0
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11467: LD_ADDR_VAR 0 6
11471: PUSH
11472: LD_INT 22
11474: PUSH
11475: LD_VAR 0 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 56
11486: PUSH
11487: EMPTY
11488: LIST
11489: PUSH
11490: LD_INT 24
11492: PUSH
11493: LD_INT 700
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 1
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: LD_INT 25
11515: PUSH
11516: LD_INT 9
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PPUSH
11534: CALL_OW 69
11538: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11539: LD_ADDR_VAR 0 7
11543: PUSH
11544: LD_INT 22
11546: PUSH
11547: LD_VAR 0 1
11551: PUSH
11552: EMPTY
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 30
11558: PUSH
11559: LD_INT 32
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: PUSH
11566: LD_INT 58
11568: PUSH
11569: EMPTY
11570: LIST
11571: PUSH
11572: LD_INT 24
11574: PUSH
11575: LD_INT 251
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PPUSH
11588: CALL_OW 69
11592: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11593: LD_ADDR_VAR 0 9
11597: PUSH
11598: LD_INT 22
11600: PUSH
11601: LD_VAR 0 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: LD_INT 30
11615: PUSH
11616: LD_INT 4
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 30
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: LIST
11637: PUSH
11638: LD_INT 24
11640: PUSH
11641: LD_INT 251
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: PPUSH
11653: CALL_OW 69
11657: ST_TO_ADDR
// if barrackList > 0 then
11658: LD_VAR 0 9
11662: PUSH
11663: LD_INT 0
11665: GREATER
11666: IFFALSE 11801
// begin if turretList = 0 then
11668: LD_VAR 0 7
11672: PUSH
11673: LD_INT 0
11675: EQUAL
11676: IFFALSE 11725
// begin for i in soldiers_list do
11678: LD_ADDR_VAR 0 4
11682: PUSH
11683: LD_VAR 0 6
11687: PUSH
11688: FOR_IN
11689: IFFALSE 11721
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11691: LD_VAR 0 4
11695: PPUSH
11696: LD_VAR 0 9
11700: PUSH
11701: LD_INT 1
11703: PPUSH
11704: LD_VAR 0 9
11708: PPUSH
11709: CALL_OW 12
11713: ARRAY
11714: PPUSH
11715: CALL_OW 120
11719: GO 11688
11721: POP
11722: POP
// end else
11723: GO 11801
// begin for i in barrackList do
11725: LD_ADDR_VAR 0 4
11729: PUSH
11730: LD_VAR 0 9
11734: PUSH
11735: FOR_IN
11736: IFFALSE 11799
// begin insideUnits = UnitsInside ( i ) ;
11738: LD_ADDR_VAR 0 10
11742: PUSH
11743: LD_VAR 0 4
11747: PPUSH
11748: CALL_OW 313
11752: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11753: LD_VAR 0 10
11757: PUSH
11758: LD_INT 1
11760: ARRAY
11761: PPUSH
11762: LD_VAR 0 7
11766: PUSH
11767: LD_INT 1
11769: ARRAY
11770: PPUSH
11771: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11775: LD_VAR 0 6
11779: PUSH
11780: LD_INT 1
11782: ARRAY
11783: PPUSH
11784: LD_VAR 0 7
11788: PUSH
11789: LD_INT 1
11791: ARRAY
11792: PPUSH
11793: CALL_OW 120
// end ;
11797: GO 11735
11799: POP
11800: POP
// end ; end ; end ;
11801: LD_VAR 0 3
11805: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11806: LD_INT 0
11808: PPUSH
11809: PPUSH
11810: PPUSH
11811: PPUSH
11812: PPUSH
11813: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11814: LD_ADDR_VAR 0 6
11818: PUSH
11819: LD_VAR 0 2
11823: PPUSH
11824: CALL_OW 313
11828: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
11829: LD_ADDR_VAR 0 7
11833: PUSH
11834: LD_INT 22
11836: PUSH
11837: LD_VAR 0 1
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: LD_INT 25
11848: PUSH
11849: LD_INT 2
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 24
11858: PUSH
11859: LD_INT 1000
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 69
11875: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11876: LD_ADDR_VAR 0 4
11880: PUSH
11881: LD_INT 22
11883: PUSH
11884: LD_VAR 0 1
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: PUSH
11893: LD_INT 21
11895: PUSH
11896: LD_INT 3
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 3
11905: PUSH
11906: LD_INT 24
11908: PUSH
11909: LD_INT 1000
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: PUSH
11925: EMPTY
11926: LIST
11927: PPUSH
11928: CALL_OW 69
11932: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
11933: LD_VAR 0 4
11937: NOT
11938: PUSH
11939: LD_VAR 0 7
11943: NOT
11944: AND
11945: IFFALSE 11949
// exit ;
11947: GO 12108
// if buildings_list > 0 and engineerOkInside > 0 then
11949: LD_VAR 0 4
11953: PUSH
11954: LD_INT 0
11956: GREATER
11957: PUSH
11958: LD_VAR 0 6
11962: PUSH
11963: LD_INT 0
11965: GREATER
11966: AND
11967: IFFALSE 11995
// for i in engineerOkInside do
11969: LD_ADDR_VAR 0 5
11973: PUSH
11974: LD_VAR 0 6
11978: PUSH
11979: FOR_IN
11980: IFFALSE 11993
// ComExitBuilding ( i ) ;
11982: LD_VAR 0 5
11986: PPUSH
11987: CALL_OW 122
11991: GO 11979
11993: POP
11994: POP
// if engineerOkOutside > 0 then
11995: LD_VAR 0 7
11999: PUSH
12000: LD_INT 0
12002: GREATER
12003: IFFALSE 12057
// begin for i in engineerOkOutside do
12005: LD_ADDR_VAR 0 5
12009: PUSH
12010: LD_VAR 0 7
12014: PUSH
12015: FOR_IN
12016: IFFALSE 12055
// for j in buildings_list do
12018: LD_ADDR_VAR 0 8
12022: PUSH
12023: LD_VAR 0 4
12027: PUSH
12028: FOR_IN
12029: IFFALSE 12051
// ComRepairBuilding ( i , j [ 1 ] ) ;
12031: LD_VAR 0 5
12035: PPUSH
12036: LD_VAR 0 8
12040: PUSH
12041: LD_INT 1
12043: ARRAY
12044: PPUSH
12045: CALL_OW 130
12049: GO 12028
12051: POP
12052: POP
12053: GO 12015
12055: POP
12056: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12057: LD_VAR 0 4
12061: PUSH
12062: LD_INT 0
12064: EQUAL
12065: PUSH
12066: LD_VAR 0 7
12070: PUSH
12071: LD_INT 0
12073: GREATER
12074: AND
12075: IFFALSE 12108
// for i in engineerOkOutside do
12077: LD_ADDR_VAR 0 5
12081: PUSH
12082: LD_VAR 0 7
12086: PUSH
12087: FOR_IN
12088: IFFALSE 12106
// ComEnterUnit ( i , building ) ;
12090: LD_VAR 0 5
12094: PPUSH
12095: LD_VAR 0 2
12099: PPUSH
12100: CALL_OW 120
12104: GO 12087
12106: POP
12107: POP
// end ;
12108: LD_VAR 0 3
12112: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
12113: LD_INT 0
12115: PPUSH
12116: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
12117: LD_INT 22
12119: PUSH
12120: LD_VAR 0 1
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: LD_INT 25
12131: PUSH
12132: LD_INT 2
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PPUSH
12143: CALL_OW 69
12147: PUSH
12148: LD_INT 0
12150: GREATER
12151: PUSH
12152: LD_INT 22
12154: PUSH
12155: LD_VAR 0 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 21
12166: PUSH
12167: LD_INT 3
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 3
12176: PUSH
12177: LD_INT 24
12179: PUSH
12180: LD_INT 1000
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: PPUSH
12196: CALL_OW 69
12200: PUSH
12201: LD_INT 0
12203: EQUAL
12204: AND
12205: PUSH
12206: LD_VAR 0 2
12210: PUSH
12211: LD_INT 0
12213: GREATER
12214: AND
12215: IFFALSE 12314
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12217: LD_ADDR_VAR 0 4
12221: PUSH
12222: LD_INT 22
12224: PUSH
12225: LD_VAR 0 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 25
12236: PUSH
12237: LD_INT 2
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: EMPTY
12245: LIST
12246: LIST
12247: PPUSH
12248: CALL_OW 69
12252: PUSH
12253: FOR_IN
12254: IFFALSE 12312
// begin AddComExitBuilding ( i ) ;
12256: LD_VAR 0 4
12260: PPUSH
12261: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12265: LD_VAR 0 4
12269: PPUSH
12270: LD_VAR 0 2
12274: PUSH
12275: LD_INT 1
12277: ARRAY
12278: PPUSH
12279: LD_VAR 0 2
12283: PUSH
12284: LD_INT 2
12286: ARRAY
12287: PPUSH
12288: LD_VAR 0 2
12292: PUSH
12293: LD_INT 3
12295: ARRAY
12296: PPUSH
12297: LD_VAR 0 2
12301: PUSH
12302: LD_INT 4
12304: ARRAY
12305: PPUSH
12306: CALL_OW 205
// end ;
12310: GO 12253
12312: POP
12313: POP
// end ; end ;
12314: LD_VAR 0 3
12318: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12319: LD_INT 0
12321: PPUSH
12322: PPUSH
12323: PPUSH
12324: PPUSH
12325: PPUSH
12326: PPUSH
12327: PPUSH
12328: PPUSH
12329: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12330: LD_ADDR_VAR 0 6
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_VAR 0 1
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: PUSH
12347: LD_INT 25
12349: PUSH
12350: LD_INT 4
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 24
12359: PUSH
12360: LD_INT 251
12362: PUSH
12363: EMPTY
12364: LIST
12365: LIST
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: PPUSH
12372: CALL_OW 69
12376: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12377: LD_ADDR_VAR 0 7
12381: PUSH
12382: LD_VAR 0 3
12386: PPUSH
12387: LD_INT 22
12389: PUSH
12390: LD_VAR 0 1
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 25
12401: PUSH
12402: LD_INT 4
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 50
12411: PUSH
12412: EMPTY
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: PPUSH
12420: CALL_OW 70
12424: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12425: LD_ADDR_VAR 0 10
12429: PUSH
12430: LD_VAR 0 3
12434: PPUSH
12435: LD_INT 22
12437: PUSH
12438: LD_VAR 0 1
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 21
12449: PUSH
12450: LD_INT 1
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 3
12459: PUSH
12460: LD_INT 25
12462: PUSH
12463: LD_INT 3
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 3
12476: PUSH
12477: LD_INT 24
12479: PUSH
12480: LD_INT 750
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: PPUSH
12497: CALL_OW 70
12501: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12502: LD_ADDR_VAR 0 11
12506: PUSH
12507: LD_VAR 0 2
12511: PPUSH
12512: LD_INT 22
12514: PUSH
12515: LD_VAR 0 1
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 21
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 3
12536: PUSH
12537: LD_INT 25
12539: PUSH
12540: LD_INT 3
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: LD_INT 24
12556: PUSH
12557: LD_INT 1000
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: PPUSH
12574: CALL_OW 70
12578: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12579: LD_VAR 0 10
12583: NOT
12584: PUSH
12585: LD_VAR 0 7
12589: NOT
12590: AND
12591: PUSH
12592: LD_VAR 0 11
12596: NOT
12597: AND
12598: IFFALSE 12602
// exit ;
12600: GO 12862
// if damageUnits > 0 and sci_list > 0 then
12602: LD_VAR 0 10
12606: PUSH
12607: LD_INT 0
12609: GREATER
12610: PUSH
12611: LD_VAR 0 6
12615: PUSH
12616: LD_INT 0
12618: GREATER
12619: AND
12620: IFFALSE 12653
// for i in damageUnits do
12622: LD_ADDR_VAR 0 8
12626: PUSH
12627: LD_VAR 0 10
12631: PUSH
12632: FOR_IN
12633: IFFALSE 12651
// ComMoveToArea ( i , healArea ) ;
12635: LD_VAR 0 8
12639: PPUSH
12640: LD_VAR 0 2
12644: PPUSH
12645: CALL_OW 113
12649: GO 12632
12651: POP
12652: POP
// if unitsToHeal > 0 and sci_list > 0 then
12653: LD_VAR 0 11
12657: PUSH
12658: LD_INT 0
12660: GREATER
12661: PUSH
12662: LD_VAR 0 6
12666: PUSH
12667: LD_INT 0
12669: GREATER
12670: AND
12671: IFFALSE 12730
// begin for i in sci_list do
12673: LD_ADDR_VAR 0 8
12677: PUSH
12678: LD_VAR 0 6
12682: PUSH
12683: FOR_IN
12684: IFFALSE 12728
// begin ComExitBuilding ( i ) ;
12686: LD_VAR 0 8
12690: PPUSH
12691: CALL_OW 122
// for j in unitsToHeal do
12695: LD_ADDR_VAR 0 9
12699: PUSH
12700: LD_VAR 0 11
12704: PUSH
12705: FOR_IN
12706: IFFALSE 12724
// AddComHeal ( i , j ) ;
12708: LD_VAR 0 8
12712: PPUSH
12713: LD_VAR 0 9
12717: PPUSH
12718: CALL_OW 188
12722: GO 12705
12724: POP
12725: POP
// end ;
12726: GO 12683
12728: POP
12729: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12730: LD_VAR 0 10
12734: PUSH
12735: LD_INT 0
12737: EQUAL
12738: PUSH
12739: LD_VAR 0 11
12743: PUSH
12744: LD_INT 0
12746: EQUAL
12747: AND
12748: PUSH
12749: LD_VAR 0 7
12753: PUSH
12754: LD_INT 0
12756: GREATER
12757: AND
12758: IFFALSE 12862
// for i in sci_listOutside do
12760: LD_ADDR_VAR 0 8
12764: PUSH
12765: LD_VAR 0 7
12769: PUSH
12770: FOR_IN
12771: IFFALSE 12860
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12773: LD_ADDR_VAR 0 12
12777: PUSH
12778: LD_INT 22
12780: PUSH
12781: LD_VAR 0 1
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: PUSH
12790: LD_INT 21
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 30
12802: PUSH
12803: LD_INT 8
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: PPUSH
12815: CALL_OW 69
12819: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12820: LD_ADDR_VAR 0 13
12824: PUSH
12825: LD_INT 1
12827: PPUSH
12828: LD_VAR 0 12
12832: PPUSH
12833: CALL_OW 12
12837: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
12838: LD_VAR 0 8
12842: PPUSH
12843: LD_VAR 0 12
12847: PUSH
12848: LD_VAR 0 13
12852: ARRAY
12853: PPUSH
12854: CALL_OW 120
// end ;
12858: GO 12770
12860: POP
12861: POP
// end ;
12862: LD_VAR 0 5
12866: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12867: LD_INT 0
12869: PPUSH
12870: PPUSH
12871: PPUSH
12872: PPUSH
12873: PPUSH
12874: PPUSH
12875: PPUSH
12876: PPUSH
12877: PPUSH
12878: PPUSH
12879: PPUSH
// amChassisTab = [ ] ;
12880: LD_ADDR_VAR 0 19
12884: PUSH
12885: EMPTY
12886: ST_TO_ADDR
// arChassisTab = [ ] ;
12887: LD_ADDR_VAR 0 18
12891: PUSH
12892: EMPTY
12893: ST_TO_ADDR
// ruChassisTab = [ ] ;
12894: LD_ADDR_VAR 0 17
12898: PUSH
12899: EMPTY
12900: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12901: LD_INT 35
12903: PPUSH
12904: CALL_OW 67
// if nation = 1 then
12908: LD_VAR 0 5
12912: PUSH
12913: LD_INT 1
12915: EQUAL
12916: IFFALSE 13421
// begin uc_side = side ;
12918: LD_ADDR_OWVAR 20
12922: PUSH
12923: LD_VAR 0 2
12927: ST_TO_ADDR
// uc_nation = nation ;
12928: LD_ADDR_OWVAR 21
12932: PUSH
12933: LD_VAR 0 5
12937: ST_TO_ADDR
// vc_engine = vehengine ;
12938: LD_ADDR_OWVAR 39
12942: PUSH
12943: LD_VAR 0 6
12947: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12948: LD_ADDR_OWVAR 38
12952: PUSH
12953: LD_VAR 0 7
12957: PUSH
12958: LD_INT 1
12960: PPUSH
12961: LD_VAR 0 7
12965: PPUSH
12966: CALL_OW 12
12970: ARRAY
12971: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12972: LD_ADDR_OWVAR 40
12976: PUSH
12977: LD_VAR 0 10
12981: PUSH
12982: LD_INT 1
12984: PPUSH
12985: LD_VAR 0 10
12989: PPUSH
12990: CALL_OW 12
12994: ARRAY
12995: ST_TO_ADDR
// for j = 1 to AMWeapon do
12996: LD_ADDR_VAR 0 14
13000: PUSH
13001: DOUBLE
13002: LD_INT 1
13004: DEC
13005: ST_TO_ADDR
13006: LD_VAR 0 10
13010: PUSH
13011: FOR_TO
13012: IFFALSE 13313
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13014: LD_VAR 0 10
13018: PUSH
13019: LD_VAR 0 14
13023: ARRAY
13024: PUSH
13025: LD_INT 2
13027: EQUAL
13028: PUSH
13029: LD_VAR 0 10
13033: PUSH
13034: LD_VAR 0 14
13038: ARRAY
13039: PUSH
13040: LD_INT 3
13042: EQUAL
13043: OR
13044: IFFALSE 13097
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13046: LD_ADDR_VAR 0 19
13050: PUSH
13051: LD_INT 1
13053: PUSH
13054: LD_INT 2
13056: PUSH
13057: LD_INT 3
13059: PUSH
13060: LD_INT 4
13062: PUSH
13063: LD_INT 5
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13073: LD_ADDR_OWVAR 37
13077: PUSH
13078: LD_VAR 0 19
13082: PUSH
13083: LD_INT 1
13085: PPUSH
13086: LD_VAR 0 19
13090: PPUSH
13091: CALL_OW 12
13095: ARRAY
13096: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13097: LD_VAR 0 10
13101: PUSH
13102: LD_VAR 0 14
13106: ARRAY
13107: PUSH
13108: LD_INT 4
13110: EQUAL
13111: PUSH
13112: LD_VAR 0 10
13116: PUSH
13117: LD_VAR 0 14
13121: ARRAY
13122: PUSH
13123: LD_INT 5
13125: EQUAL
13126: OR
13127: PUSH
13128: LD_VAR 0 10
13132: PUSH
13133: LD_VAR 0 14
13137: ARRAY
13138: PUSH
13139: LD_INT 9
13141: EQUAL
13142: OR
13143: PUSH
13144: LD_VAR 0 10
13148: PUSH
13149: LD_VAR 0 14
13153: ARRAY
13154: PUSH
13155: LD_INT 11
13157: EQUAL
13158: OR
13159: PUSH
13160: LD_VAR 0 10
13164: PUSH
13165: LD_VAR 0 14
13169: ARRAY
13170: PUSH
13171: LD_INT 7
13173: EQUAL
13174: OR
13175: IFFALSE 13224
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13177: LD_ADDR_VAR 0 19
13181: PUSH
13182: LD_INT 2
13184: PUSH
13185: LD_INT 3
13187: PUSH
13188: LD_INT 4
13190: PUSH
13191: LD_INT 5
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13200: LD_ADDR_OWVAR 37
13204: PUSH
13205: LD_VAR 0 19
13209: PUSH
13210: LD_INT 1
13212: PPUSH
13213: LD_VAR 0 19
13217: PPUSH
13218: CALL_OW 12
13222: ARRAY
13223: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13224: LD_VAR 0 10
13228: PUSH
13229: LD_VAR 0 14
13233: ARRAY
13234: PUSH
13235: LD_INT 8
13237: EQUAL
13238: PUSH
13239: LD_VAR 0 10
13243: PUSH
13244: LD_VAR 0 14
13248: ARRAY
13249: PUSH
13250: LD_INT 6
13252: EQUAL
13253: OR
13254: PUSH
13255: LD_VAR 0 10
13259: PUSH
13260: LD_VAR 0 14
13264: ARRAY
13265: PUSH
13266: LD_INT 10
13268: EQUAL
13269: OR
13270: IFFALSE 13311
// begin amChassisTab = [ 4 , 5 ] ;
13272: LD_ADDR_VAR 0 19
13276: PUSH
13277: LD_INT 4
13279: PUSH
13280: LD_INT 5
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13287: LD_ADDR_OWVAR 37
13291: PUSH
13292: LD_VAR 0 19
13296: PUSH
13297: LD_INT 1
13299: PPUSH
13300: LD_VAR 0 19
13304: PPUSH
13305: CALL_OW 12
13309: ARRAY
13310: ST_TO_ADDR
// end ; end ;
13311: GO 13011
13313: POP
13314: POP
// veh = CreateVehicle ;
13315: LD_ADDR_VAR 0 16
13319: PUSH
13320: CALL_OW 45
13324: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13325: LD_VAR 0 16
13329: PPUSH
13330: LD_VAR 0 1
13334: PPUSH
13335: LD_INT 0
13337: PPUSH
13338: CALL_OW 49
// if vc_control = 1 then
13342: LD_OWVAR 38
13346: PUSH
13347: LD_INT 1
13349: EQUAL
13350: IFFALSE 13407
// begin hc_gallery =  ;
13352: LD_ADDR_OWVAR 33
13356: PUSH
13357: LD_STRING 
13359: ST_TO_ADDR
// hc_name =  ;
13360: LD_ADDR_OWVAR 26
13364: PUSH
13365: LD_STRING 
13367: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13368: LD_INT 0
13370: PPUSH
13371: LD_INT 3
13373: PPUSH
13374: LD_VAR 0 4
13378: PPUSH
13379: CALL_OW 380
// un = CreateHuman ;
13383: LD_ADDR_VAR 0 15
13387: PUSH
13388: CALL_OW 44
13392: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13393: LD_VAR 0 15
13397: PPUSH
13398: LD_VAR 0 16
13402: PPUSH
13403: CALL_OW 52
// end ; i = i + 1 ;
13407: LD_ADDR_VAR 0 13
13411: PUSH
13412: LD_VAR 0 13
13416: PUSH
13417: LD_INT 1
13419: PLUS
13420: ST_TO_ADDR
// end ; if nation = 2 then
13421: LD_VAR 0 5
13425: PUSH
13426: LD_INT 2
13428: EQUAL
13429: IFFALSE 13851
// begin uc_side = side ;
13431: LD_ADDR_OWVAR 20
13435: PUSH
13436: LD_VAR 0 2
13440: ST_TO_ADDR
// uc_nation = nation ;
13441: LD_ADDR_OWVAR 21
13445: PUSH
13446: LD_VAR 0 5
13450: ST_TO_ADDR
// vc_engine = vehengine ;
13451: LD_ADDR_OWVAR 39
13455: PUSH
13456: LD_VAR 0 6
13460: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13461: LD_ADDR_OWVAR 38
13465: PUSH
13466: LD_VAR 0 7
13470: PUSH
13471: LD_INT 1
13473: PPUSH
13474: LD_VAR 0 7
13478: PPUSH
13479: CALL_OW 12
13483: ARRAY
13484: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13485: LD_ADDR_OWVAR 40
13489: PUSH
13490: LD_VAR 0 9
13494: PUSH
13495: LD_INT 1
13497: PPUSH
13498: LD_VAR 0 9
13502: PPUSH
13503: CALL_OW 12
13507: ARRAY
13508: ST_TO_ADDR
// for j = 1 to ARWeapons do
13509: LD_ADDR_VAR 0 14
13513: PUSH
13514: DOUBLE
13515: LD_INT 1
13517: DEC
13518: ST_TO_ADDR
13519: LD_VAR 0 9
13523: PUSH
13524: FOR_TO
13525: IFFALSE 13743
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13527: LD_VAR 0 9
13531: PUSH
13532: LD_VAR 0 14
13536: ARRAY
13537: PUSH
13538: LD_INT 24
13540: EQUAL
13541: PUSH
13542: LD_VAR 0 9
13546: PUSH
13547: LD_VAR 0 14
13551: ARRAY
13552: PUSH
13553: LD_INT 22
13555: EQUAL
13556: OR
13557: PUSH
13558: LD_VAR 0 9
13562: PUSH
13563: LD_VAR 0 14
13567: ARRAY
13568: PUSH
13569: LD_INT 23
13571: EQUAL
13572: OR
13573: PUSH
13574: LD_VAR 0 9
13578: PUSH
13579: LD_VAR 0 14
13583: ARRAY
13584: PUSH
13585: LD_INT 30
13587: EQUAL
13588: OR
13589: IFFALSE 13626
// begin arChassisTab = [ 14 ] ;
13591: LD_ADDR_VAR 0 18
13595: PUSH
13596: LD_INT 14
13598: PUSH
13599: EMPTY
13600: LIST
13601: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13602: LD_ADDR_OWVAR 37
13606: PUSH
13607: LD_VAR 0 18
13611: PUSH
13612: LD_INT 1
13614: PPUSH
13615: LD_VAR 0 18
13619: PPUSH
13620: CALL_OW 12
13624: ARRAY
13625: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13626: LD_VAR 0 9
13630: PUSH
13631: LD_VAR 0 14
13635: ARRAY
13636: PUSH
13637: LD_INT 29
13639: EQUAL
13640: PUSH
13641: LD_VAR 0 9
13645: PUSH
13646: LD_VAR 0 14
13650: ARRAY
13651: PUSH
13652: LD_INT 28
13654: EQUAL
13655: OR
13656: PUSH
13657: LD_VAR 0 9
13661: PUSH
13662: LD_VAR 0 14
13666: ARRAY
13667: PUSH
13668: LD_INT 27
13670: EQUAL
13671: OR
13672: PUSH
13673: LD_VAR 0 9
13677: PUSH
13678: LD_VAR 0 14
13682: ARRAY
13683: PUSH
13684: LD_INT 26
13686: EQUAL
13687: OR
13688: PUSH
13689: LD_VAR 0 9
13693: PUSH
13694: LD_VAR 0 14
13698: ARRAY
13699: PUSH
13700: LD_INT 25
13702: EQUAL
13703: OR
13704: IFFALSE 13741
// begin arChassisTab = [ 14 ] ;
13706: LD_ADDR_VAR 0 18
13710: PUSH
13711: LD_INT 14
13713: PUSH
13714: EMPTY
13715: LIST
13716: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13717: LD_ADDR_OWVAR 37
13721: PUSH
13722: LD_VAR 0 18
13726: PUSH
13727: LD_INT 1
13729: PPUSH
13730: LD_VAR 0 18
13734: PPUSH
13735: CALL_OW 12
13739: ARRAY
13740: ST_TO_ADDR
// end ; end ;
13741: GO 13524
13743: POP
13744: POP
// veh = CreateVehicle ;
13745: LD_ADDR_VAR 0 16
13749: PUSH
13750: CALL_OW 45
13754: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13755: LD_VAR 0 16
13759: PPUSH
13760: LD_VAR 0 1
13764: PPUSH
13765: LD_INT 0
13767: PPUSH
13768: CALL_OW 49
// if vc_control = 1 then
13772: LD_OWVAR 38
13776: PUSH
13777: LD_INT 1
13779: EQUAL
13780: IFFALSE 13837
// begin hc_gallery =  ;
13782: LD_ADDR_OWVAR 33
13786: PUSH
13787: LD_STRING 
13789: ST_TO_ADDR
// hc_name =  ;
13790: LD_ADDR_OWVAR 26
13794: PUSH
13795: LD_STRING 
13797: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13798: LD_INT 0
13800: PPUSH
13801: LD_INT 3
13803: PPUSH
13804: LD_VAR 0 4
13808: PPUSH
13809: CALL_OW 380
// un = CreateHuman ;
13813: LD_ADDR_VAR 0 15
13817: PUSH
13818: CALL_OW 44
13822: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13823: LD_VAR 0 15
13827: PPUSH
13828: LD_VAR 0 16
13832: PPUSH
13833: CALL_OW 52
// end ; i = i + 1 ;
13837: LD_ADDR_VAR 0 13
13841: PUSH
13842: LD_VAR 0 13
13846: PUSH
13847: LD_INT 1
13849: PLUS
13850: ST_TO_ADDR
// end ; if nation = 3 then
13851: LD_VAR 0 5
13855: PUSH
13856: LD_INT 3
13858: EQUAL
13859: IFFALSE 14265
// begin uc_side = side ;
13861: LD_ADDR_OWVAR 20
13865: PUSH
13866: LD_VAR 0 2
13870: ST_TO_ADDR
// uc_nation = nation ;
13871: LD_ADDR_OWVAR 21
13875: PUSH
13876: LD_VAR 0 5
13880: ST_TO_ADDR
// vc_engine = vehengine ;
13881: LD_ADDR_OWVAR 39
13885: PUSH
13886: LD_VAR 0 6
13890: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13891: LD_ADDR_OWVAR 38
13895: PUSH
13896: LD_VAR 0 7
13900: PUSH
13901: LD_INT 1
13903: PPUSH
13904: LD_VAR 0 7
13908: PPUSH
13909: CALL_OW 12
13913: ARRAY
13914: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13915: LD_ADDR_OWVAR 40
13919: PUSH
13920: LD_VAR 0 8
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_VAR 0 8
13932: PPUSH
13933: CALL_OW 12
13937: ARRAY
13938: ST_TO_ADDR
// for j = 1 to RuWeapons do
13939: LD_ADDR_VAR 0 14
13943: PUSH
13944: DOUBLE
13945: LD_INT 1
13947: DEC
13948: ST_TO_ADDR
13949: LD_VAR 0 8
13953: PUSH
13954: FOR_TO
13955: IFFALSE 14157
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13957: LD_VAR 0 8
13961: PUSH
13962: LD_VAR 0 14
13966: ARRAY
13967: PUSH
13968: LD_INT 42
13970: EQUAL
13971: PUSH
13972: LD_VAR 0 8
13976: PUSH
13977: LD_VAR 0 14
13981: ARRAY
13982: PUSH
13983: LD_INT 43
13985: EQUAL
13986: OR
13987: PUSH
13988: LD_VAR 0 8
13992: PUSH
13993: LD_VAR 0 14
13997: ARRAY
13998: PUSH
13999: LD_INT 44
14001: EQUAL
14002: OR
14003: PUSH
14004: LD_VAR 0 8
14008: PUSH
14009: LD_VAR 0 14
14013: ARRAY
14014: PUSH
14015: LD_INT 45
14017: EQUAL
14018: OR
14019: PUSH
14020: LD_VAR 0 8
14024: PUSH
14025: LD_VAR 0 14
14029: ARRAY
14030: PUSH
14031: LD_INT 49
14033: EQUAL
14034: OR
14035: IFFALSE 14084
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14037: LD_ADDR_VAR 0 17
14041: PUSH
14042: LD_INT 21
14044: PUSH
14045: LD_INT 22
14047: PUSH
14048: LD_INT 23
14050: PUSH
14051: LD_INT 24
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14060: LD_ADDR_OWVAR 37
14064: PUSH
14065: LD_VAR 0 17
14069: PUSH
14070: LD_INT 1
14072: PPUSH
14073: LD_VAR 0 17
14077: PPUSH
14078: CALL_OW 12
14082: ARRAY
14083: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14084: LD_VAR 0 8
14088: PUSH
14089: LD_VAR 0 14
14093: ARRAY
14094: PUSH
14095: LD_INT 46
14097: EQUAL
14098: PUSH
14099: LD_VAR 0 8
14103: PUSH
14104: LD_VAR 0 14
14108: ARRAY
14109: PUSH
14110: LD_INT 47
14112: EQUAL
14113: OR
14114: IFFALSE 14155
// begin ruChassisTab = [ 23 , 24 ] ;
14116: LD_ADDR_VAR 0 17
14120: PUSH
14121: LD_INT 23
14123: PUSH
14124: LD_INT 24
14126: PUSH
14127: EMPTY
14128: LIST
14129: LIST
14130: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14131: LD_ADDR_OWVAR 37
14135: PUSH
14136: LD_VAR 0 17
14140: PUSH
14141: LD_INT 1
14143: PPUSH
14144: LD_VAR 0 17
14148: PPUSH
14149: CALL_OW 12
14153: ARRAY
14154: ST_TO_ADDR
// end ; end ;
14155: GO 13954
14157: POP
14158: POP
// veh = CreateVehicle ;
14159: LD_ADDR_VAR 0 16
14163: PUSH
14164: CALL_OW 45
14168: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14169: LD_VAR 0 16
14173: PPUSH
14174: LD_VAR 0 1
14178: PPUSH
14179: LD_INT 0
14181: PPUSH
14182: CALL_OW 49
// if vc_control = 1 then
14186: LD_OWVAR 38
14190: PUSH
14191: LD_INT 1
14193: EQUAL
14194: IFFALSE 14251
// begin hc_gallery =  ;
14196: LD_ADDR_OWVAR 33
14200: PUSH
14201: LD_STRING 
14203: ST_TO_ADDR
// hc_name =  ;
14204: LD_ADDR_OWVAR 26
14208: PUSH
14209: LD_STRING 
14211: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14212: LD_INT 0
14214: PPUSH
14215: LD_INT 3
14217: PPUSH
14218: LD_VAR 0 4
14222: PPUSH
14223: CALL_OW 380
// un = CreateHuman ;
14227: LD_ADDR_VAR 0 15
14231: PUSH
14232: CALL_OW 44
14236: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14237: LD_VAR 0 15
14241: PPUSH
14242: LD_VAR 0 16
14246: PPUSH
14247: CALL_OW 52
// end ; i = i + 1 ;
14251: LD_ADDR_VAR 0 13
14255: PUSH
14256: LD_VAR 0 13
14260: PUSH
14261: LD_INT 1
14263: PLUS
14264: ST_TO_ADDR
// end ; until i = vehCount ;
14265: LD_VAR 0 13
14269: PUSH
14270: LD_VAR 0 3
14274: EQUAL
14275: IFFALSE 12901
// repeat wait ( 0 0$1 ) ;
14277: LD_INT 35
14279: PPUSH
14280: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14284: LD_ADDR_VAR 0 20
14288: PUSH
14289: LD_INT 22
14291: PUSH
14292: LD_VAR 0 2
14296: PUSH
14297: EMPTY
14298: LIST
14299: LIST
14300: PUSH
14301: LD_INT 21
14303: PUSH
14304: LD_INT 2
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 24
14313: PUSH
14314: LD_INT 650
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: PPUSH
14326: CALL_OW 69
14330: ST_TO_ADDR
// if vehicleOK_list > 0 then
14331: LD_VAR 0 20
14335: PUSH
14336: LD_INT 0
14338: GREATER
14339: IFFALSE 14530
// begin for i in vehicleOK_list do
14341: LD_ADDR_VAR 0 13
14345: PUSH
14346: LD_VAR 0 20
14350: PUSH
14351: FOR_IN
14352: IFFALSE 14528
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14354: LD_ADDR_VAR 0 21
14358: PUSH
14359: LD_INT 22
14361: PUSH
14362: LD_VAR 0 11
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 69
14375: PPUSH
14376: LD_VAR 0 13
14380: PPUSH
14381: CALL_OW 74
14385: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14386: LD_ADDR_VAR 0 22
14390: PUSH
14391: LD_INT 22
14393: PUSH
14394: LD_VAR 0 11
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 2
14405: PUSH
14406: LD_INT 59
14408: PUSH
14409: EMPTY
14410: LIST
14411: PUSH
14412: LD_INT 21
14414: PUSH
14415: LD_INT 1
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PUSH
14422: LD_INT 21
14424: PUSH
14425: LD_INT 2
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: PPUSH
14445: CALL_OW 69
14449: PPUSH
14450: LD_VAR 0 13
14454: PPUSH
14455: CALL_OW 74
14459: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14460: LD_VAR 0 13
14464: PPUSH
14465: LD_VAR 0 21
14469: PPUSH
14470: CALL_OW 296
14474: PUSH
14475: LD_INT 8
14477: PLUS
14478: PUSH
14479: LD_VAR 0 13
14483: PPUSH
14484: LD_VAR 0 22
14488: PPUSH
14489: CALL_OW 296
14493: LESS
14494: IFFALSE 14512
// begin ComAttackUnit ( i , target1 ) ;
14496: LD_VAR 0 13
14500: PPUSH
14501: LD_VAR 0 21
14505: PPUSH
14506: CALL_OW 115
// end else
14510: GO 14526
// begin ComAttackUnit ( i , target2 ) ;
14512: LD_VAR 0 13
14516: PPUSH
14517: LD_VAR 0 22
14521: PPUSH
14522: CALL_OW 115
// end ; end ;
14526: GO 14351
14528: POP
14529: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14530: LD_INT 22
14532: PUSH
14533: LD_VAR 0 2
14537: PUSH
14538: EMPTY
14539: LIST
14540: LIST
14541: PUSH
14542: LD_INT 21
14544: PUSH
14545: LD_INT 2
14547: PUSH
14548: EMPTY
14549: LIST
14550: LIST
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PPUSH
14556: CALL_OW 69
14560: PUSH
14561: LD_INT 0
14563: EQUAL
14564: IFFALSE 14277
// end ;
14566: LD_VAR 0 12
14570: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
14571: LD_INT 0
14573: PPUSH
14574: PPUSH
14575: PPUSH
14576: PPUSH
14577: PPUSH
14578: PPUSH
14579: PPUSH
14580: PPUSH
14581: PPUSH
14582: PPUSH
14583: PPUSH
// for i = 1 to medicCount do
14584: LD_ADDR_VAR 0 13
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 7
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14682
// begin uc_side = side ;
14602: LD_ADDR_OWVAR 20
14606: PUSH
14607: LD_VAR 0 1
14611: ST_TO_ADDR
// uc_nation = nation ;
14612: LD_ADDR_OWVAR 21
14616: PUSH
14617: LD_VAR 0 2
14621: ST_TO_ADDR
// hc_name =  ;
14622: LD_ADDR_OWVAR 26
14626: PUSH
14627: LD_STRING 
14629: ST_TO_ADDR
// hc_gallery =  ;
14630: LD_ADDR_OWVAR 33
14634: PUSH
14635: LD_STRING 
14637: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
14638: LD_INT 0
14640: PPUSH
14641: LD_INT 4
14643: PPUSH
14644: LD_VAR 0 8
14648: PPUSH
14649: CALL_OW 380
// un = CreateHuman ;
14653: LD_ADDR_VAR 0 15
14657: PUSH
14658: CALL_OW 44
14662: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14663: LD_VAR 0 15
14667: PPUSH
14668: LD_VAR 0 9
14672: PPUSH
14673: LD_INT 0
14675: PPUSH
14676: CALL_OW 49
// end ;
14680: GO 14599
14682: POP
14683: POP
// for i = 1 to soldierCount do
14684: LD_ADDR_VAR 0 13
14688: PUSH
14689: DOUBLE
14690: LD_INT 1
14692: DEC
14693: ST_TO_ADDR
14694: LD_VAR 0 3
14698: PUSH
14699: FOR_TO
14700: IFFALSE 14782
// begin uc_side = side ;
14702: LD_ADDR_OWVAR 20
14706: PUSH
14707: LD_VAR 0 1
14711: ST_TO_ADDR
// uc_nation = nation ;
14712: LD_ADDR_OWVAR 21
14716: PUSH
14717: LD_VAR 0 2
14721: ST_TO_ADDR
// hc_name =  ;
14722: LD_ADDR_OWVAR 26
14726: PUSH
14727: LD_STRING 
14729: ST_TO_ADDR
// hc_gallery =  ;
14730: LD_ADDR_OWVAR 33
14734: PUSH
14735: LD_STRING 
14737: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14738: LD_INT 0
14740: PPUSH
14741: LD_INT 1
14743: PPUSH
14744: LD_VAR 0 8
14748: PPUSH
14749: CALL_OW 380
// un = CreateHuman ;
14753: LD_ADDR_VAR 0 15
14757: PUSH
14758: CALL_OW 44
14762: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14763: LD_VAR 0 15
14767: PPUSH
14768: LD_VAR 0 9
14772: PPUSH
14773: LD_INT 0
14775: PPUSH
14776: CALL_OW 49
// end ;
14780: GO 14699
14782: POP
14783: POP
// for i = 1 to sniperCount do
14784: LD_ADDR_VAR 0 13
14788: PUSH
14789: DOUBLE
14790: LD_INT 1
14792: DEC
14793: ST_TO_ADDR
14794: LD_VAR 0 4
14798: PUSH
14799: FOR_TO
14800: IFFALSE 14882
// begin uc_side = side ;
14802: LD_ADDR_OWVAR 20
14806: PUSH
14807: LD_VAR 0 1
14811: ST_TO_ADDR
// uc_nation = nation ;
14812: LD_ADDR_OWVAR 21
14816: PUSH
14817: LD_VAR 0 2
14821: ST_TO_ADDR
// hc_name =  ;
14822: LD_ADDR_OWVAR 26
14826: PUSH
14827: LD_STRING 
14829: ST_TO_ADDR
// hc_gallery =  ;
14830: LD_ADDR_OWVAR 33
14834: PUSH
14835: LD_STRING 
14837: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
14838: LD_INT 0
14840: PPUSH
14841: LD_INT 5
14843: PPUSH
14844: LD_VAR 0 8
14848: PPUSH
14849: CALL_OW 380
// un = CreateHuman ;
14853: LD_ADDR_VAR 0 15
14857: PUSH
14858: CALL_OW 44
14862: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14863: LD_VAR 0 15
14867: PPUSH
14868: LD_VAR 0 9
14872: PPUSH
14873: LD_INT 0
14875: PPUSH
14876: CALL_OW 49
// end ;
14880: GO 14799
14882: POP
14883: POP
// for i = 1 to bazookCount do
14884: LD_ADDR_VAR 0 13
14888: PUSH
14889: DOUBLE
14890: LD_INT 1
14892: DEC
14893: ST_TO_ADDR
14894: LD_VAR 0 5
14898: PUSH
14899: FOR_TO
14900: IFFALSE 14982
// begin uc_side = side ;
14902: LD_ADDR_OWVAR 20
14906: PUSH
14907: LD_VAR 0 1
14911: ST_TO_ADDR
// uc_nation = nation ;
14912: LD_ADDR_OWVAR 21
14916: PUSH
14917: LD_VAR 0 2
14921: ST_TO_ADDR
// hc_name =  ;
14922: LD_ADDR_OWVAR 26
14926: PUSH
14927: LD_STRING 
14929: ST_TO_ADDR
// hc_gallery =  ;
14930: LD_ADDR_OWVAR 33
14934: PUSH
14935: LD_STRING 
14937: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
14938: LD_INT 0
14940: PPUSH
14941: LD_INT 9
14943: PPUSH
14944: LD_VAR 0 8
14948: PPUSH
14949: CALL_OW 380
// un = CreateHuman ;
14953: LD_ADDR_VAR 0 15
14957: PUSH
14958: CALL_OW 44
14962: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14963: LD_VAR 0 15
14967: PPUSH
14968: LD_VAR 0 9
14972: PPUSH
14973: LD_INT 0
14975: PPUSH
14976: CALL_OW 49
// end ;
14980: GO 14899
14982: POP
14983: POP
// for i = 1 to mortalCount do
14984: LD_ADDR_VAR 0 13
14988: PUSH
14989: DOUBLE
14990: LD_INT 1
14992: DEC
14993: ST_TO_ADDR
14994: LD_VAR 0 6
14998: PUSH
14999: FOR_TO
15000: IFFALSE 15082
// begin uc_side = side ;
15002: LD_ADDR_OWVAR 20
15006: PUSH
15007: LD_VAR 0 1
15011: ST_TO_ADDR
// uc_nation = nation ;
15012: LD_ADDR_OWVAR 21
15016: PUSH
15017: LD_VAR 0 2
15021: ST_TO_ADDR
// hc_name =  ;
15022: LD_ADDR_OWVAR 26
15026: PUSH
15027: LD_STRING 
15029: ST_TO_ADDR
// hc_gallery =  ;
15030: LD_ADDR_OWVAR 33
15034: PUSH
15035: LD_STRING 
15037: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15038: LD_INT 0
15040: PPUSH
15041: LD_INT 8
15043: PPUSH
15044: LD_VAR 0 8
15048: PPUSH
15049: CALL_OW 380
// un = CreateHuman ;
15053: LD_ADDR_VAR 0 15
15057: PUSH
15058: CALL_OW 44
15062: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15063: LD_VAR 0 15
15067: PPUSH
15068: LD_VAR 0 9
15072: PPUSH
15073: LD_INT 0
15075: PPUSH
15076: CALL_OW 49
// end ;
15080: GO 14999
15082: POP
15083: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
15084: LD_ADDR_VAR 0 18
15088: PUSH
15089: LD_INT 22
15091: PUSH
15092: LD_VAR 0 1
15096: PUSH
15097: EMPTY
15098: LIST
15099: LIST
15100: PUSH
15101: LD_INT 2
15103: PUSH
15104: LD_INT 25
15106: PUSH
15107: LD_INT 1
15109: PUSH
15110: EMPTY
15111: LIST
15112: LIST
15113: PUSH
15114: LD_INT 25
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: EMPTY
15121: LIST
15122: LIST
15123: PUSH
15124: LD_INT 25
15126: PUSH
15127: LD_INT 8
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: LD_INT 25
15136: PUSH
15137: LD_INT 9
15139: PUSH
15140: EMPTY
15141: LIST
15142: LIST
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PPUSH
15155: CALL_OW 69
15159: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15160: LD_ADDR_VAR 0 17
15164: PUSH
15165: LD_INT 22
15167: PUSH
15168: LD_VAR 0 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 25
15179: PUSH
15180: LD_INT 4
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PPUSH
15191: CALL_OW 69
15195: ST_TO_ADDR
// for i in medic_list do
15196: LD_ADDR_VAR 0 13
15200: PUSH
15201: LD_VAR 0 17
15205: PUSH
15206: FOR_IN
15207: IFFALSE 15225
// ComMoveToArea ( i , healArea ) ;
15209: LD_VAR 0 13
15213: PPUSH
15214: LD_VAR 0 10
15218: PPUSH
15219: CALL_OW 113
15223: GO 15206
15225: POP
15226: POP
// repeat wait ( 0 0$1 ) ;
15227: LD_INT 35
15229: PPUSH
15230: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15234: LD_ADDR_VAR 0 16
15238: PUSH
15239: LD_INT 22
15241: PUSH
15242: LD_VAR 0 1
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: PUSH
15251: LD_INT 1
15253: PUSH
15254: LD_INT 3
15256: PUSH
15257: LD_INT 24
15259: PUSH
15260: LD_INT 550
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: PUSH
15271: LD_INT 24
15273: PUSH
15274: LD_INT 250
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PPUSH
15290: CALL_OW 69
15294: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15295: LD_ADDR_VAR 0 18
15299: PUSH
15300: LD_INT 22
15302: PUSH
15303: LD_VAR 0 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 2
15314: PUSH
15315: LD_INT 25
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 25
15327: PUSH
15328: LD_INT 5
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 25
15337: PUSH
15338: LD_INT 8
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 25
15347: PUSH
15348: LD_INT 9
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 24
15364: PUSH
15365: LD_INT 1000
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: PPUSH
15377: CALL_OW 69
15381: ST_TO_ADDR
// if medicCount > 0 then
15382: LD_VAR 0 7
15386: PUSH
15387: LD_INT 0
15389: GREATER
15390: IFFALSE 15464
// begin if damageUnit_list > 0 then
15392: LD_VAR 0 16
15396: PUSH
15397: LD_INT 0
15399: GREATER
15400: IFFALSE 15464
// begin for i in damageUnit_list do
15402: LD_ADDR_VAR 0 13
15406: PUSH
15407: LD_VAR 0 16
15411: PUSH
15412: FOR_IN
15413: IFFALSE 15462
// begin ComMoveToArea ( i , healArea ) ;
15415: LD_VAR 0 13
15419: PPUSH
15420: LD_VAR 0 10
15424: PPUSH
15425: CALL_OW 113
// for j in medic_list do
15429: LD_ADDR_VAR 0 14
15433: PUSH
15434: LD_VAR 0 17
15438: PUSH
15439: FOR_IN
15440: IFFALSE 15458
// AddComHeal ( j , i ) ;
15442: LD_VAR 0 14
15446: PPUSH
15447: LD_VAR 0 13
15451: PPUSH
15452: CALL_OW 188
15456: GO 15439
15458: POP
15459: POP
// end ;
15460: GO 15412
15462: POP
15463: POP
// end ; end ; for i in soldiersOK_list do
15464: LD_ADDR_VAR 0 13
15468: PUSH
15469: LD_VAR 0 18
15473: PUSH
15474: FOR_IN
15475: IFFALSE 15651
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15477: LD_ADDR_VAR 0 21
15481: PUSH
15482: LD_INT 22
15484: PUSH
15485: LD_VAR 0 11
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 69
15498: PPUSH
15499: LD_VAR 0 13
15503: PPUSH
15504: CALL_OW 74
15508: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15509: LD_ADDR_VAR 0 22
15513: PUSH
15514: LD_INT 22
15516: PUSH
15517: LD_VAR 0 11
15521: PUSH
15522: EMPTY
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 2
15528: PUSH
15529: LD_INT 59
15531: PUSH
15532: EMPTY
15533: LIST
15534: PUSH
15535: LD_INT 21
15537: PUSH
15538: LD_INT 1
15540: PUSH
15541: EMPTY
15542: LIST
15543: LIST
15544: PUSH
15545: LD_INT 21
15547: PUSH
15548: LD_INT 2
15550: PUSH
15551: EMPTY
15552: LIST
15553: LIST
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: PUSH
15561: EMPTY
15562: LIST
15563: LIST
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: PPUSH
15573: LD_VAR 0 13
15577: PPUSH
15578: CALL_OW 74
15582: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15583: LD_VAR 0 13
15587: PPUSH
15588: LD_VAR 0 21
15592: PPUSH
15593: CALL_OW 296
15597: PUSH
15598: LD_INT 8
15600: PLUS
15601: PUSH
15602: LD_VAR 0 13
15606: PPUSH
15607: LD_VAR 0 22
15611: PPUSH
15612: CALL_OW 296
15616: LESS
15617: IFFALSE 15635
// begin ComAttackUnit ( i , target1 ) ;
15619: LD_VAR 0 13
15623: PPUSH
15624: LD_VAR 0 21
15628: PPUSH
15629: CALL_OW 115
// end else
15633: GO 15649
// begin ComAttackUnit ( i , target2 ) ;
15635: LD_VAR 0 13
15639: PPUSH
15640: LD_VAR 0 22
15644: PPUSH
15645: CALL_OW 115
// end ; end ;
15649: GO 15474
15651: POP
15652: POP
// for i in soldiersOK_list do
15653: LD_ADDR_VAR 0 13
15657: PUSH
15658: LD_VAR 0 18
15662: PUSH
15663: FOR_IN
15664: IFFALSE 15840
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15666: LD_ADDR_VAR 0 21
15670: PUSH
15671: LD_INT 22
15673: PUSH
15674: LD_VAR 0 11
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PPUSH
15683: CALL_OW 69
15687: PPUSH
15688: LD_VAR 0 13
15692: PPUSH
15693: CALL_OW 74
15697: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15698: LD_ADDR_VAR 0 22
15702: PUSH
15703: LD_INT 22
15705: PUSH
15706: LD_VAR 0 11
15710: PUSH
15711: EMPTY
15712: LIST
15713: LIST
15714: PUSH
15715: LD_INT 2
15717: PUSH
15718: LD_INT 59
15720: PUSH
15721: EMPTY
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 21
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: PPUSH
15757: CALL_OW 69
15761: PPUSH
15762: LD_VAR 0 13
15766: PPUSH
15767: CALL_OW 74
15771: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15772: LD_VAR 0 13
15776: PPUSH
15777: LD_VAR 0 21
15781: PPUSH
15782: CALL_OW 296
15786: PUSH
15787: LD_INT 8
15789: PLUS
15790: PUSH
15791: LD_VAR 0 13
15795: PPUSH
15796: LD_VAR 0 22
15800: PPUSH
15801: CALL_OW 296
15805: LESS
15806: IFFALSE 15824
// begin ComAttackUnit ( i , target1 ) ;
15808: LD_VAR 0 13
15812: PPUSH
15813: LD_VAR 0 21
15817: PPUSH
15818: CALL_OW 115
// end else
15822: GO 15838
// begin ComAttackUnit ( i , target2 ) ;
15824: LD_VAR 0 13
15828: PPUSH
15829: LD_VAR 0 22
15833: PPUSH
15834: CALL_OW 115
// end ; end ;
15838: GO 15663
15840: POP
15841: POP
// until soldiersOK_list = [ ] ;
15842: LD_VAR 0 18
15846: PUSH
15847: EMPTY
15848: EQUAL
15849: IFFALSE 15227
// end ;
15851: LD_VAR 0 12
15855: RET
// export function TameApemans ; var i , j ; begin
15856: LD_INT 0
15858: PPUSH
15859: PPUSH
15860: PPUSH
// repeat wait ( 0 0$1 ) ;
15861: LD_INT 35
15863: PPUSH
15864: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
15868: LD_ADDR_VAR 0 2
15872: PUSH
15873: LD_INT 22
15875: PUSH
15876: LD_INT 2
15878: PUSH
15879: EMPTY
15880: LIST
15881: LIST
15882: PUSH
15883: LD_INT 25
15885: PUSH
15886: LD_INT 4
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PPUSH
15897: CALL_OW 69
15901: PUSH
15902: FOR_IN
15903: IFFALSE 15980
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
15905: LD_ADDR_VAR 0 3
15909: PUSH
15910: LD_INT 5
15912: PPUSH
15913: LD_INT 22
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 25
15925: PUSH
15926: LD_INT 12
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 70
15941: PUSH
15942: FOR_IN
15943: IFFALSE 15976
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
15945: LD_VAR 0 2
15949: PPUSH
15950: LD_VAR 0 3
15954: PPUSH
15955: CALL_OW 250
15959: PPUSH
15960: LD_VAR 0 3
15964: PPUSH
15965: CALL_OW 251
15969: PPUSH
15970: CALL_OW 191
// end ;
15974: GO 15942
15976: POP
15977: POP
// end ;
15978: GO 15902
15980: POP
15981: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
15982: LD_INT 22
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 25
15994: PUSH
15995: LD_INT 4
15997: PUSH
15998: EMPTY
15999: LIST
16000: LIST
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 69
16010: PUSH
16011: LD_INT 0
16013: EQUAL
16014: PUSH
16015: LD_INT 5
16017: PPUSH
16018: LD_INT 22
16020: PUSH
16021: LD_INT 0
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 25
16030: PUSH
16031: LD_INT 12
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PPUSH
16042: CALL_OW 70
16046: PUSH
16047: LD_INT 0
16049: EQUAL
16050: OR
16051: IFFALSE 15861
// wait ( 0 0$30 ) ;
16053: LD_INT 1050
16055: PPUSH
16056: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
16060: LD_ADDR_VAR 0 2
16064: PUSH
16065: LD_INT 22
16067: PUSH
16068: LD_INT 2
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: LD_INT 25
16077: PUSH
16078: LD_INT 12
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PPUSH
16089: CALL_OW 69
16093: PUSH
16094: FOR_IN
16095: IFFALSE 16159
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
16097: LD_VAR 0 2
16101: PPUSH
16102: LD_EXP 42
16106: PPUSH
16107: CALL_OW 250
16111: PPUSH
16112: LD_EXP 42
16116: PPUSH
16117: CALL_OW 251
16121: PPUSH
16122: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
16126: LD_VAR 0 2
16130: PPUSH
16131: LD_INT 16
16133: PUSH
16134: LD_INT 15
16136: PUSH
16137: EMPTY
16138: LIST
16139: LIST
16140: PUSH
16141: LD_INT 1
16143: PPUSH
16144: LD_INT 2
16146: PPUSH
16147: CALL_OW 12
16151: ARRAY
16152: PPUSH
16153: CALL_OW 336
// end ;
16157: GO 16094
16159: POP
16160: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16161: LD_ADDR_VAR 0 2
16165: PUSH
16166: LD_INT 22
16168: PUSH
16169: LD_INT 2
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 25
16178: PUSH
16179: LD_INT 4
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: PPUSH
16190: CALL_OW 69
16194: PUSH
16195: FOR_IN
16196: IFFALSE 16242
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
16198: LD_VAR 0 2
16202: PPUSH
16203: LD_INT 22
16205: PUSH
16206: LD_INT 2
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 30
16215: PUSH
16216: LD_INT 8
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: LIST
16226: PPUSH
16227: CALL_OW 69
16231: PUSH
16232: LD_INT 1
16234: ARRAY
16235: PPUSH
16236: CALL_OW 120
16240: GO 16195
16242: POP
16243: POP
// end ;
16244: LD_VAR 0 1
16248: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16249: LD_INT 0
16251: PPUSH
16252: PPUSH
16253: PPUSH
16254: PPUSH
16255: PPUSH
16256: PPUSH
16257: PPUSH
16258: PPUSH
16259: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16260: LD_INT 22
16262: PUSH
16263: LD_VAR 0 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 21
16274: PUSH
16275: LD_INT 2
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_VAR 0 3
16295: LESSEQUAL
16296: IFFALSE 16440
// for i = 1 to vehCount do
16298: LD_ADDR_VAR 0 10
16302: PUSH
16303: DOUBLE
16304: LD_INT 1
16306: DEC
16307: ST_TO_ADDR
16308: LD_VAR 0 3
16312: PUSH
16313: FOR_TO
16314: IFFALSE 16438
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16316: LD_ADDR_VAR 0 12
16320: PUSH
16321: LD_VAR 0 5
16325: PUSH
16326: LD_INT 1
16328: PPUSH
16329: LD_VAR 0 5
16333: PPUSH
16334: CALL_OW 12
16338: ARRAY
16339: ST_TO_ADDR
// if randWeapon = 46 then
16340: LD_VAR 0 12
16344: PUSH
16345: LD_INT 46
16347: EQUAL
16348: IFFALSE 16393
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16350: LD_VAR 0 2
16354: PPUSH
16355: LD_INT 24
16357: PPUSH
16358: LD_VAR 0 6
16362: PPUSH
16363: LD_VAR 0 7
16367: PUSH
16368: LD_INT 1
16370: PPUSH
16371: LD_VAR 0 7
16375: PPUSH
16376: CALL_OW 12
16380: ARRAY
16381: PPUSH
16382: LD_VAR 0 12
16386: PPUSH
16387: CALL_OW 185
16391: GO 16436
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16393: LD_VAR 0 2
16397: PPUSH
16398: LD_VAR 0 8
16402: PPUSH
16403: LD_VAR 0 6
16407: PPUSH
16408: LD_VAR 0 7
16412: PUSH
16413: LD_INT 1
16415: PPUSH
16416: LD_VAR 0 7
16420: PPUSH
16421: CALL_OW 12
16425: ARRAY
16426: PPUSH
16427: LD_VAR 0 12
16431: PPUSH
16432: CALL_OW 185
// end ;
16436: GO 16313
16438: POP
16439: POP
// repeat wait ( 0 0$1 ) ;
16440: LD_INT 35
16442: PPUSH
16443: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16447: LD_INT 22
16449: PUSH
16450: LD_VAR 0 1
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 21
16461: PUSH
16462: LD_INT 2
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 24
16471: PUSH
16472: LD_INT 250
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: PUSH
16489: LD_VAR 0 3
16493: GREATEREQUAL
16494: IFFALSE 16440
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16496: LD_INT 22
16498: PUSH
16499: LD_VAR 0 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 2
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PUSH
16518: LD_INT 24
16520: PUSH
16521: LD_INT 250
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: PUSH
16538: LD_VAR 0 3
16542: GREATEREQUAL
16543: IFFALSE 16886
// begin repeat begin wait ( 0 0$1 ) ;
16545: LD_INT 35
16547: PPUSH
16548: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16552: LD_INT 22
16554: PUSH
16555: LD_VAR 0 1
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: LD_INT 21
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: PUSH
16574: LD_INT 24
16576: PUSH
16577: LD_INT 651
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: PUSH
16594: LD_INT 0
16596: GREATER
16597: IFFALSE 16825
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
16599: LD_ADDR_VAR 0 10
16603: PUSH
16604: LD_INT 22
16606: PUSH
16607: LD_VAR 0 1
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 21
16618: PUSH
16619: LD_INT 2
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: LD_INT 24
16628: PUSH
16629: LD_INT 651
16631: PUSH
16632: EMPTY
16633: LIST
16634: LIST
16635: PUSH
16636: EMPTY
16637: LIST
16638: LIST
16639: LIST
16640: PPUSH
16641: CALL_OW 69
16645: PUSH
16646: FOR_IN
16647: IFFALSE 16823
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16649: LD_ADDR_VAR 0 16
16653: PUSH
16654: LD_INT 22
16656: PUSH
16657: LD_VAR 0 4
16661: PUSH
16662: EMPTY
16663: LIST
16664: LIST
16665: PPUSH
16666: CALL_OW 69
16670: PPUSH
16671: LD_VAR 0 10
16675: PPUSH
16676: CALL_OW 74
16680: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16681: LD_ADDR_VAR 0 17
16685: PUSH
16686: LD_INT 22
16688: PUSH
16689: LD_VAR 0 4
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 2
16700: PUSH
16701: LD_INT 59
16703: PUSH
16704: EMPTY
16705: LIST
16706: PUSH
16707: LD_INT 21
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 21
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: EMPTY
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: EMPTY
16738: LIST
16739: PPUSH
16740: CALL_OW 69
16744: PPUSH
16745: LD_VAR 0 10
16749: PPUSH
16750: CALL_OW 74
16754: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16755: LD_VAR 0 10
16759: PPUSH
16760: LD_VAR 0 16
16764: PPUSH
16765: CALL_OW 296
16769: PUSH
16770: LD_INT 8
16772: PLUS
16773: PUSH
16774: LD_VAR 0 10
16778: PPUSH
16779: LD_VAR 0 17
16783: PPUSH
16784: CALL_OW 296
16788: LESS
16789: IFFALSE 16807
// begin ComAttackUnit ( i , target1 ) ;
16791: LD_VAR 0 10
16795: PPUSH
16796: LD_VAR 0 16
16800: PPUSH
16801: CALL_OW 115
// end else
16805: GO 16821
// begin ComAttackUnit ( i , target2 ) ;
16807: LD_VAR 0 10
16811: PPUSH
16812: LD_VAR 0 17
16816: PPUSH
16817: CALL_OW 115
// end ; end ;
16821: GO 16646
16823: POP
16824: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
16825: LD_INT 22
16827: PUSH
16828: LD_VAR 0 1
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 21
16839: PUSH
16840: LD_INT 2
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 69
16855: PUSH
16856: LD_INT 0
16858: EQUAL
16859: PUSH
16860: LD_INT 22
16862: PUSH
16863: LD_VAR 0 4
16867: PUSH
16868: EMPTY
16869: LIST
16870: LIST
16871: PUSH
16872: EMPTY
16873: LIST
16874: PPUSH
16875: CALL_OW 69
16879: PUSH
16880: LD_INT 0
16882: EQUAL
16883: OR
16884: IFFALSE 16545
// end ; end ; end_of_file
16886: LD_VAR 0 9
16890: RET
// every 0 0$1 trigger russianAI = 1 do
16891: LD_EXP 38
16895: PUSH
16896: LD_INT 1
16898: EQUAL
16899: IFFALSE 17118
16901: GO 16903
16903: DISABLE
// begin enable ;
16904: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
16905: LD_INT 3
16907: PPUSH
16908: LD_EXP 29
16912: PPUSH
16913: CALL 11806 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
16917: LD_INT 3
16919: PPUSH
16920: LD_EXP 41
16924: PPUSH
16925: CALL 12113 0 2
// if ruPossition = 1 then
16929: LD_EXP 40
16933: PUSH
16934: LD_INT 1
16936: EQUAL
16937: IFFALSE 16992
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
16939: LD_INT 3
16941: PPUSH
16942: LD_INT 13
16944: PPUSH
16945: LD_INT 10
16947: PPUSH
16948: LD_INT 22
16950: PUSH
16951: LD_INT 3
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: LD_INT 21
16960: PUSH
16961: LD_INT 3
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: LD_INT 30
16970: PUSH
16971: LD_INT 8
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: LIST
16982: PPUSH
16983: CALL_OW 69
16987: PPUSH
16988: CALL 12319 0 4
// if ruPossition = 2 then
16992: LD_EXP 40
16996: PUSH
16997: LD_INT 2
16999: EQUAL
17000: IFFALSE 17055
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17002: LD_INT 3
17004: PPUSH
17005: LD_INT 14
17007: PPUSH
17008: LD_INT 11
17010: PPUSH
17011: LD_INT 22
17013: PUSH
17014: LD_INT 3
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 21
17023: PUSH
17024: LD_INT 3
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 30
17033: PUSH
17034: LD_INT 8
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 69
17050: PPUSH
17051: CALL 12319 0 4
// if ruPossition = 3 then
17055: LD_EXP 40
17059: PUSH
17060: LD_INT 3
17062: EQUAL
17063: IFFALSE 17118
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17065: LD_INT 3
17067: PPUSH
17068: LD_INT 15
17070: PPUSH
17071: LD_INT 12
17073: PPUSH
17074: LD_INT 22
17076: PUSH
17077: LD_INT 3
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: LD_INT 21
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 30
17096: PUSH
17097: LD_INT 8
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: PPUSH
17109: CALL_OW 69
17113: PPUSH
17114: CALL 12319 0 4
// end ;
17118: END
// every 0 0$1 do
17119: GO 17121
17121: DISABLE
// begin enable ;
17122: ENABLE
// if ruPossition = 1 then
17123: LD_EXP 40
17127: PUSH
17128: LD_INT 1
17130: EQUAL
17131: IFFALSE 17143
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
17133: LD_INT 3
17135: PPUSH
17136: LD_INT 10
17138: PPUSH
17139: CALL 11457 0 2
// if ruPossition = 2 then
17143: LD_EXP 40
17147: PUSH
17148: LD_INT 2
17150: EQUAL
17151: IFFALSE 17163
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
17153: LD_INT 3
17155: PPUSH
17156: LD_INT 11
17158: PPUSH
17159: CALL 11457 0 2
// if ruPossition = 3 then
17163: LD_EXP 40
17167: PUSH
17168: LD_INT 3
17170: EQUAL
17171: IFFALSE 17183
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
17173: LD_INT 3
17175: PPUSH
17176: LD_INT 12
17178: PPUSH
17179: CALL 11457 0 2
// IntBazooka ( 3 , 1 ) ;
17183: LD_INT 3
17185: PPUSH
17186: LD_INT 1
17188: PPUSH
17189: CALL 10524 0 2
// IntBazooka ( 6 , 1 ) ;
17193: LD_INT 6
17195: PPUSH
17196: LD_INT 1
17198: PPUSH
17199: CALL 10524 0 2
// end ;
17203: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17204: LD_EXP 38
17208: PUSH
17209: LD_INT 1
17211: EQUAL
17212: PUSH
17213: LD_EXP 34
17217: PPUSH
17218: CALL_OW 302
17222: AND
17223: PUSH
17224: LD_EXP 34
17228: PPUSH
17229: CALL_OW 255
17233: PUSH
17234: LD_INT 3
17236: EQUAL
17237: AND
17238: PUSH
17239: LD_INT 22
17241: PUSH
17242: LD_INT 3
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 21
17251: PUSH
17252: LD_INT 2
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PUSH
17259: LD_INT 33
17261: PUSH
17262: LD_INT 3
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 69
17278: PUSH
17279: LD_INT 0
17281: EQUAL
17282: AND
17283: IFFALSE 17491
17285: GO 17287
17287: DISABLE
// begin enable ;
17288: ENABLE
// if Difficulty = 1 then
17289: LD_OWVAR 67
17293: PUSH
17294: LD_INT 1
17296: EQUAL
17297: IFFALSE 17359
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17299: LD_INT 3
17301: PPUSH
17302: LD_EXP 34
17306: PPUSH
17307: LD_INT 5
17309: PPUSH
17310: LD_INT 8
17312: PPUSH
17313: CALL_OW 12
17317: PPUSH
17318: LD_INT 1
17320: PPUSH
17321: LD_INT 43
17323: PUSH
17324: LD_INT 44
17326: PUSH
17327: LD_INT 45
17329: PUSH
17330: LD_INT 46
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: PPUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_INT 1
17344: PUSH
17345: LD_INT 3
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: LD_INT 22
17354: PPUSH
17355: CALL 16249 0 8
// if Difficulty = 2 then
17359: LD_OWVAR 67
17363: PUSH
17364: LD_INT 2
17366: EQUAL
17367: IFFALSE 17425
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17369: LD_INT 3
17371: PPUSH
17372: LD_EXP 34
17376: PPUSH
17377: LD_INT 6
17379: PPUSH
17380: LD_INT 8
17382: PPUSH
17383: CALL_OW 12
17387: PPUSH
17388: LD_INT 1
17390: PPUSH
17391: LD_INT 44
17393: PUSH
17394: LD_INT 45
17396: PUSH
17397: LD_INT 46
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: LIST
17404: PPUSH
17405: LD_INT 1
17407: PPUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 3
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PPUSH
17418: LD_INT 22
17420: PPUSH
17421: CALL 16249 0 8
// if Difficulty = 3 then
17425: LD_OWVAR 67
17429: PUSH
17430: LD_INT 3
17432: EQUAL
17433: IFFALSE 17491
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17435: LD_INT 3
17437: PPUSH
17438: LD_EXP 34
17442: PPUSH
17443: LD_INT 7
17445: PPUSH
17446: LD_INT 8
17448: PPUSH
17449: CALL_OW 12
17453: PPUSH
17454: LD_INT 1
17456: PPUSH
17457: LD_INT 44
17459: PUSH
17460: LD_INT 45
17462: PUSH
17463: LD_INT 46
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: PPUSH
17471: LD_INT 1
17473: PPUSH
17474: LD_INT 1
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PPUSH
17484: LD_INT 22
17486: PPUSH
17487: CALL 16249 0 8
// end ; end_of_file
17491: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17492: LD_VAR 0 1
17496: PPUSH
17497: CALL_OW 255
17501: PUSH
17502: LD_INT 4
17504: EQUAL
17505: IFFALSE 17519
// SetBName ( building , epsilon ) ;
17507: LD_VAR 0 1
17511: PPUSH
17512: LD_STRING epsilon
17514: PPUSH
17515: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 255
17528: PUSH
17529: LD_INT 1
17531: EQUAL
17532: PUSH
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 266
17542: PUSH
17543: LD_INT 0
17545: EQUAL
17546: AND
17547: IFFALSE 17561
// SetBName ( building , epsilon ) ;
17549: LD_VAR 0 1
17553: PPUSH
17554: LD_STRING epsilon
17556: PPUSH
17557: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17561: LD_VAR 0 1
17565: PPUSH
17566: CALL_OW 255
17570: PUSH
17571: LD_INT 3
17573: EQUAL
17574: PUSH
17575: LD_VAR 0 1
17579: PPUSH
17580: CALL_OW 266
17584: PUSH
17585: LD_INT 0
17587: EQUAL
17588: AND
17589: IFFALSE 17603
// SetBName ( building , chuikov ) ;
17591: LD_VAR 0 1
17595: PPUSH
17596: LD_STRING chuikov
17598: PPUSH
17599: CALL_OW 500
// if GetSide ( building ) = 2 then
17603: LD_VAR 0 1
17607: PPUSH
17608: CALL_OW 255
17612: PUSH
17613: LD_INT 2
17615: EQUAL
17616: IFFALSE 17672
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
17618: LD_VAR 0 1
17622: PPUSH
17623: CALL_OW 266
17627: PUSH
17628: LD_INT 6
17630: EQUAL
17631: PUSH
17632: LD_VAR 0 1
17636: PPUSH
17637: CALL_OW 266
17641: PUSH
17642: LD_INT 9
17644: EQUAL
17645: OR
17646: IFFALSE 17672
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17648: LD_VAR 0 1
17652: PPUSH
17653: LD_INT 10
17655: PPUSH
17656: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 11
17667: PPUSH
17668: CALL_OW 207
// end ; end ; end ;
17672: PPOPN 2
17674: END
// on BuildingComplete ( building ) do var i ;
17675: LD_INT 0
17677: PPUSH
// begin if GetSide ( building ) = 1 then
17678: LD_VAR 0 1
17682: PPUSH
17683: CALL_OW 255
17687: PUSH
17688: LD_INT 1
17690: EQUAL
17691: IFFALSE 17891
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17693: LD_INT 22
17695: PUSH
17696: LD_INT 1
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: LD_INT 2
17705: PUSH
17706: LD_INT 30
17708: PUSH
17709: LD_INT 7
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PUSH
17716: LD_INT 30
17718: PUSH
17719: LD_INT 8
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PUSH
17726: LD_INT 1
17728: PUSH
17729: LD_INT 30
17731: PUSH
17732: LD_INT 11
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: PUSH
17739: LD_INT 1
17741: PUSH
17742: LD_INT 2
17744: PUSH
17745: LD_INT 30
17747: PUSH
17748: LD_INT 26
17750: PUSH
17751: EMPTY
17752: LIST
17753: LIST
17754: PUSH
17755: LD_INT 30
17757: PUSH
17758: LD_INT 27
17760: PUSH
17761: EMPTY
17762: LIST
17763: LIST
17764: PUSH
17765: LD_INT 30
17767: PUSH
17768: LD_INT 28
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: EMPTY
17786: LIST
17787: LIST
17788: LIST
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PPUSH
17800: CALL_OW 69
17804: PUSH
17805: LD_INT 0
17807: GREATER
17808: PUSH
17809: LD_INT 22
17811: PUSH
17812: LD_INT 1
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PUSH
17819: LD_INT 2
17821: PUSH
17822: LD_INT 30
17824: PUSH
17825: LD_INT 26
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: LD_INT 30
17834: PUSH
17835: LD_INT 27
17837: PUSH
17838: EMPTY
17839: LIST
17840: LIST
17841: PUSH
17842: LD_INT 30
17844: PUSH
17845: LD_INT 28
17847: PUSH
17848: EMPTY
17849: LIST
17850: LIST
17851: PUSH
17852: EMPTY
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: PUSH
17858: EMPTY
17859: LIST
17860: LIST
17861: PPUSH
17862: CALL_OW 69
17866: PUSH
17867: LD_INT 0
17869: GREATER
17870: AND
17871: PUSH
17872: LD_EXP 54
17876: PUSH
17877: LD_INT 0
17879: EQUAL
17880: AND
17881: IFFALSE 17891
// eventVar1 = 1 ;
17883: LD_ADDR_EXP 54
17887: PUSH
17888: LD_INT 1
17890: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
17891: LD_VAR 0 1
17895: PPUSH
17896: CALL_OW 255
17900: PUSH
17901: LD_INT 3
17903: EQUAL
17904: IFFALSE 18384
// begin if GetBType ( building ) = b_depot then
17906: LD_VAR 0 1
17910: PPUSH
17911: CALL_OW 266
17915: PUSH
17916: LD_INT 0
17918: EQUAL
17919: IFFALSE 17991
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 274
17930: PPUSH
17931: LD_INT 1
17933: PPUSH
17934: LD_INT 5000
17936: PPUSH
17937: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17941: LD_VAR 0 1
17945: PPUSH
17946: CALL_OW 274
17950: PPUSH
17951: LD_INT 2
17953: PPUSH
17954: LD_INT 5000
17956: PPUSH
17957: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
17961: LD_VAR 0 1
17965: PPUSH
17966: CALL_OW 274
17970: PPUSH
17971: LD_INT 3
17973: PPUSH
17974: LD_INT 5000
17976: PPUSH
17977: CALL_OW 277
// ruDepot = building ;
17981: LD_ADDR_EXP 29
17985: PUSH
17986: LD_VAR 0 1
17990: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 266
18000: PUSH
18001: LD_INT 0
18003: EQUAL
18004: PUSH
18005: LD_VAR 0 1
18009: PPUSH
18010: CALL_OW 266
18014: PUSH
18015: LD_INT 2
18017: EQUAL
18018: OR
18019: PUSH
18020: LD_VAR 0 1
18024: PPUSH
18025: CALL_OW 266
18029: PUSH
18030: LD_INT 4
18032: EQUAL
18033: OR
18034: IFFALSE 18045
// ComUpgrade ( building ) ;
18036: LD_VAR 0 1
18040: PPUSH
18041: CALL_OW 146
// if GetBType ( building ) = b_lab then
18045: LD_VAR 0 1
18049: PPUSH
18050: CALL_OW 266
18054: PUSH
18055: LD_INT 6
18057: EQUAL
18058: IFFALSE 18261
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
18060: LD_INT 22
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 30
18072: PUSH
18073: LD_INT 8
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: PPUSH
18084: CALL_OW 69
18088: PUSH
18089: LD_INT 0
18091: EQUAL
18092: IFFALSE 18130
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18094: LD_VAR 0 1
18098: PPUSH
18099: LD_INT 10
18101: PPUSH
18102: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18106: LD_VAR 0 1
18110: PPUSH
18111: LD_INT 12
18113: PPUSH
18114: CALL_OW 207
// ruLab1 = building ;
18118: LD_ADDR_EXP 30
18122: PUSH
18123: LD_VAR 0 1
18127: ST_TO_ADDR
// end else
18128: GO 18164
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 11
18137: PPUSH
18138: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
18142: LD_VAR 0 1
18146: PPUSH
18147: LD_INT 14
18149: PPUSH
18150: CALL_OW 207
// ruLab2 = building ;
18154: LD_ADDR_EXP 31
18158: PUSH
18159: LD_VAR 0 1
18163: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
18164: LD_INT 3
18166: PPUSH
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_INT 3
18174: PPUSH
18175: CALL 11372 0 3
// if ruDestroyedBuildings > 0 then
18179: LD_EXP 41
18183: PUSH
18184: LD_INT 0
18186: GREATER
18187: IFFALSE 18261
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18189: LD_ADDR_EXP 41
18193: PUSH
18194: LD_EXP 41
18198: PPUSH
18199: LD_INT 1
18201: PPUSH
18202: CALL_OW 3
18206: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18207: LD_ADDR_EXP 41
18211: PUSH
18212: LD_EXP 41
18216: PPUSH
18217: LD_INT 1
18219: PPUSH
18220: CALL_OW 3
18224: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18225: LD_ADDR_EXP 41
18229: PUSH
18230: LD_EXP 41
18234: PPUSH
18235: LD_INT 1
18237: PPUSH
18238: CALL_OW 3
18242: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18243: LD_ADDR_EXP 41
18247: PUSH
18248: LD_EXP 41
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: CALL_OW 3
18260: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 32
18273: EQUAL
18274: IFFALSE 18311
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 44
18283: PUSH
18284: LD_INT 45
18286: PUSH
18287: LD_INT 46
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 1
18297: PPUSH
18298: LD_INT 3
18300: PPUSH
18301: CALL_OW 12
18305: ARRAY
18306: PPUSH
18307: CALL_OW 208
// if GetBType ( building ) = b_turret then
18311: LD_VAR 0 1
18315: PPUSH
18316: CALL_OW 266
18320: PUSH
18321: LD_INT 33
18323: EQUAL
18324: IFFALSE 18361
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18326: LD_VAR 0 1
18330: PPUSH
18331: LD_INT 44
18333: PUSH
18334: LD_INT 46
18336: PUSH
18337: LD_INT 46
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 1
18347: PPUSH
18348: LD_INT 3
18350: PPUSH
18351: CALL_OW 12
18355: ARRAY
18356: PPUSH
18357: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18361: LD_VAR 0 1
18365: PPUSH
18366: CALL_OW 266
18370: PUSH
18371: LD_INT 24
18373: EQUAL
18374: IFFALSE 18384
// russianAI = 1 ;
18376: LD_ADDR_EXP 38
18380: PUSH
18381: LD_INT 1
18383: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 255
18393: PUSH
18394: LD_INT 2
18396: EQUAL
18397: IFFALSE 19023
// begin if GetBType ( building ) = b_depot then
18399: LD_VAR 0 1
18403: PPUSH
18404: CALL_OW 266
18408: PUSH
18409: LD_INT 0
18411: EQUAL
18412: IFFALSE 18498
// begin arDepot = building ;
18414: LD_ADDR_EXP 42
18418: PUSH
18419: LD_VAR 0 1
18423: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18424: LD_INT 38
18426: PUSH
18427: LD_INT 47
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PPUSH
18434: LD_INT 71
18436: PPUSH
18437: LD_INT 19
18439: PPUSH
18440: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18444: LD_VAR 0 1
18448: PPUSH
18449: CALL_OW 274
18453: PPUSH
18454: LD_INT 1
18456: PPUSH
18457: LD_INT 500
18459: PPUSH
18460: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 274
18473: PPUSH
18474: LD_INT 3
18476: PPUSH
18477: LD_INT 30
18479: PPUSH
18480: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18484: LD_EXP 26
18488: PPUSH
18489: LD_EXP 42
18493: PPUSH
18494: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18498: LD_VAR 0 1
18502: PPUSH
18503: CALL_OW 266
18507: PUSH
18508: LD_INT 6
18510: EQUAL
18511: PUSH
18512: LD_VAR 0 1
18516: PPUSH
18517: CALL_OW 266
18521: PUSH
18522: LD_INT 9
18524: EQUAL
18525: OR
18526: IFFALSE 18577
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18528: LD_VAR 0 1
18532: PPUSH
18533: LD_INT 10
18535: PPUSH
18536: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18540: LD_VAR 0 1
18544: PPUSH
18545: LD_INT 11
18547: PPUSH
18548: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
18552: LD_INT 2
18554: PPUSH
18555: LD_VAR 0 1
18559: PPUSH
18560: LD_INT 2
18562: PPUSH
18563: CALL 11372 0 3
// arLab = building ;
18567: LD_ADDR_EXP 43
18571: PUSH
18572: LD_VAR 0 1
18576: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 266
18586: PUSH
18587: LD_INT 2
18589: EQUAL
18590: PUSH
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 266
18600: PUSH
18601: LD_INT 4
18603: EQUAL
18604: OR
18605: IFFALSE 18616
// ComUpgrade ( building ) ;
18607: LD_VAR 0 1
18611: PPUSH
18612: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
18616: LD_VAR 0 1
18620: PPUSH
18621: CALL_OW 266
18625: PUSH
18626: LD_INT 31
18628: EQUAL
18629: PUSH
18630: LD_INT 22
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: LD_INT 25
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 54
18655: PUSH
18656: EMPTY
18657: LIST
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: LD_INT 60
18664: PUSH
18665: EMPTY
18666: LIST
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: LIST
18676: PUSH
18677: EMPTY
18678: LIST
18679: LIST
18680: LIST
18681: PPUSH
18682: CALL_OW 69
18686: PUSH
18687: LD_INT 0
18689: GREATER
18690: AND
18691: IFFALSE 18763
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
18693: LD_INT 22
18695: PUSH
18696: LD_INT 2
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PUSH
18703: LD_INT 25
18705: PUSH
18706: LD_INT 1
18708: PUSH
18709: EMPTY
18710: LIST
18711: LIST
18712: PUSH
18713: LD_INT 3
18715: PUSH
18716: LD_INT 54
18718: PUSH
18719: EMPTY
18720: LIST
18721: PUSH
18722: LD_INT 3
18724: PUSH
18725: LD_INT 60
18727: PUSH
18728: EMPTY
18729: LIST
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: PPUSH
18745: CALL_OW 69
18749: PUSH
18750: LD_INT 1
18752: ARRAY
18753: PPUSH
18754: LD_VAR 0 1
18758: PPUSH
18759: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
18763: LD_VAR 0 1
18767: PPUSH
18768: CALL_OW 266
18772: PUSH
18773: LD_INT 27
18775: EQUAL
18776: IFFALSE 19023
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
18778: LD_INT 22
18780: PUSH
18781: LD_INT 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 30
18790: PUSH
18791: LD_INT 27
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: PUSH
18807: LD_INT 2
18809: EQUAL
18810: IFFALSE 19023
// begin AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 92 , 34 ) ;
18812: LD_INT 22
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 21
18824: PUSH
18825: LD_INT 1
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: LD_INT 25
18834: PUSH
18835: LD_INT 2
18837: PUSH
18838: EMPTY
18839: LIST
18840: LIST
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: PPUSH
18847: CALL_OW 69
18851: PUSH
18852: LD_INT 1
18854: ARRAY
18855: PPUSH
18856: LD_INT 92
18858: PPUSH
18859: LD_INT 34
18861: PPUSH
18862: CALL_OW 171
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 82 , 57 ) ;
18866: LD_INT 22
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 21
18878: PUSH
18879: LD_INT 1
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: LD_INT 25
18888: PUSH
18889: LD_INT 2
18891: PUSH
18892: EMPTY
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PPUSH
18910: LD_INT 82
18912: PPUSH
18913: LD_INT 57
18915: PPUSH
18916: CALL_OW 171
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 36 , 28 ) ;
18920: LD_INT 22
18922: PUSH
18923: LD_INT 2
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: LD_INT 21
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 25
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: LIST
18954: PPUSH
18955: CALL_OW 69
18959: PUSH
18960: LD_INT 1
18962: ARRAY
18963: PPUSH
18964: LD_INT 36
18966: PPUSH
18967: LD_INT 28
18969: PPUSH
18970: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
18974: LD_INT 22
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 25
18996: PUSH
18997: LD_INT 2
18999: PUSH
19000: EMPTY
19001: LIST
19002: LIST
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL_OW 69
19013: PPUSH
19014: LD_EXP 42
19018: PPUSH
19019: CALL_OW 180
// end ; end ; end ;
19023: PPOPN 2
19025: END
// on UpgradeComplete ( building ) do var i ;
19026: LD_INT 0
19028: PPUSH
// begin if GetSide ( building ) = 1 then
19029: LD_VAR 0 1
19033: PPUSH
19034: CALL_OW 255
19038: PUSH
19039: LD_INT 1
19041: EQUAL
19042: IFFALSE 19242
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19044: LD_INT 22
19046: PUSH
19047: LD_INT 1
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PUSH
19054: LD_INT 2
19056: PUSH
19057: LD_INT 30
19059: PUSH
19060: LD_INT 7
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PUSH
19067: LD_INT 30
19069: PUSH
19070: LD_INT 8
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: LD_INT 30
19082: PUSH
19083: LD_INT 11
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 1
19092: PUSH
19093: LD_INT 2
19095: PUSH
19096: LD_INT 30
19098: PUSH
19099: LD_INT 26
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 30
19108: PUSH
19109: LD_INT 27
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: LD_INT 30
19118: PUSH
19119: LD_INT 28
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: EMPTY
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PPUSH
19151: CALL_OW 69
19155: PUSH
19156: LD_INT 0
19158: GREATER
19159: PUSH
19160: LD_INT 22
19162: PUSH
19163: LD_INT 1
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: LD_INT 2
19172: PUSH
19173: LD_INT 30
19175: PUSH
19176: LD_INT 26
19178: PUSH
19179: EMPTY
19180: LIST
19181: LIST
19182: PUSH
19183: LD_INT 30
19185: PUSH
19186: LD_INT 27
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 30
19195: PUSH
19196: LD_INT 28
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 69
19217: PUSH
19218: LD_INT 0
19220: GREATER
19221: AND
19222: PUSH
19223: LD_EXP 54
19227: PUSH
19228: LD_INT 0
19230: EQUAL
19231: AND
19232: IFFALSE 19242
// eventVar1 = 1 ;
19234: LD_ADDR_EXP 54
19238: PUSH
19239: LD_INT 1
19241: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19242: LD_VAR 0 1
19246: PPUSH
19247: CALL_OW 255
19251: PUSH
19252: LD_INT 2
19254: EQUAL
19255: IFFALSE 19360
// begin if GetBType ( building ) = b_barracks then
19257: LD_VAR 0 1
19261: PPUSH
19262: CALL_OW 266
19266: PUSH
19267: LD_INT 5
19269: EQUAL
19270: IFFALSE 19360
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
19272: LD_ADDR_VAR 0 2
19276: PUSH
19277: LD_INT 22
19279: PUSH
19280: LD_INT 2
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: LD_INT 25
19289: PUSH
19290: LD_INT 1
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: LD_INT 54
19302: PUSH
19303: EMPTY
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: PUSH
19320: LD_EXP 26
19324: PUSH
19325: EMPTY
19326: LIST
19327: DIFF
19328: PUSH
19329: FOR_IN
19330: IFFALSE 19348
// ComEnterUnit ( i , building ) ;
19332: LD_VAR 0 2
19336: PPUSH
19337: LD_VAR 0 1
19341: PPUSH
19342: CALL_OW 120
19346: GO 19329
19348: POP
19349: POP
// arArm = building ;
19350: LD_ADDR_EXP 44
19354: PUSH
19355: LD_VAR 0 1
19359: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
19360: LD_VAR 0 1
19364: PPUSH
19365: CALL_OW 255
19369: PUSH
19370: LD_INT 3
19372: EQUAL
19373: IFFALSE 19846
// begin if GetBType ( building ) = b_factory then
19375: LD_VAR 0 1
19379: PPUSH
19380: CALL_OW 266
19384: PUSH
19385: LD_INT 3
19387: EQUAL
19388: IFFALSE 19455
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19390: LD_ADDR_VAR 0 2
19394: PUSH
19395: LD_INT 22
19397: PUSH
19398: LD_INT 3
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 25
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 69
19423: PUSH
19424: FOR_IN
19425: IFFALSE 19443
// ComEnterUnit ( i , building ) ;
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_VAR 0 1
19436: PPUSH
19437: CALL_OW 120
19441: GO 19424
19443: POP
19444: POP
// ruFab = building ;
19445: LD_ADDR_EXP 34
19449: PUSH
19450: LD_VAR 0 1
19454: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19455: LD_INT 22
19457: PUSH
19458: LD_INT 3
19460: PUSH
19461: EMPTY
19462: LIST
19463: LIST
19464: PUSH
19465: LD_INT 21
19467: PUSH
19468: LD_INT 3
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 30
19477: PUSH
19478: LD_INT 8
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: LIST
19489: PPUSH
19490: CALL_OW 69
19494: PUSH
19495: LD_INT 2
19497: EQUAL
19498: IFFALSE 19706
// begin for i = 1 to 2 do
19500: LD_ADDR_VAR 0 2
19504: PUSH
19505: DOUBLE
19506: LD_INT 1
19508: DEC
19509: ST_TO_ADDR
19510: LD_INT 2
19512: PUSH
19513: FOR_TO
19514: IFFALSE 19601
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19516: LD_INT 22
19518: PUSH
19519: LD_INT 3
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 25
19528: PUSH
19529: LD_INT 4
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PPUSH
19540: CALL_OW 69
19544: PUSH
19545: LD_VAR 0 2
19549: ARRAY
19550: PPUSH
19551: LD_INT 22
19553: PUSH
19554: LD_INT 3
19556: PUSH
19557: EMPTY
19558: LIST
19559: LIST
19560: PUSH
19561: LD_INT 21
19563: PUSH
19564: LD_INT 3
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 30
19573: PUSH
19574: LD_INT 8
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PPUSH
19586: CALL_OW 69
19590: PUSH
19591: LD_INT 1
19593: ARRAY
19594: PPUSH
19595: CALL_OW 120
19599: GO 19513
19601: POP
19602: POP
// for i = 3 to 4 do
19603: LD_ADDR_VAR 0 2
19607: PUSH
19608: DOUBLE
19609: LD_INT 3
19611: DEC
19612: ST_TO_ADDR
19613: LD_INT 4
19615: PUSH
19616: FOR_TO
19617: IFFALSE 19704
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
19619: LD_INT 22
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 25
19631: PUSH
19632: LD_INT 4
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: EMPTY
19640: LIST
19641: LIST
19642: PPUSH
19643: CALL_OW 69
19647: PUSH
19648: LD_VAR 0 2
19652: ARRAY
19653: PPUSH
19654: LD_INT 22
19656: PUSH
19657: LD_INT 3
19659: PUSH
19660: EMPTY
19661: LIST
19662: LIST
19663: PUSH
19664: LD_INT 21
19666: PUSH
19667: LD_INT 3
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 30
19676: PUSH
19677: LD_INT 8
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: LIST
19688: PPUSH
19689: CALL_OW 69
19693: PUSH
19694: LD_INT 2
19696: ARRAY
19697: PPUSH
19698: CALL_OW 120
19702: GO 19616
19704: POP
19705: POP
// end ; if GetBType ( building ) = b_barracks then
19706: LD_VAR 0 1
19710: PPUSH
19711: CALL_OW 266
19715: PUSH
19716: LD_INT 5
19718: EQUAL
19719: IFFALSE 19846
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
19721: LD_ADDR_VAR 0 2
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_INT 3
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 25
19738: PUSH
19739: LD_INT 1
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: LD_INT 3
19748: PUSH
19749: LD_INT 54
19751: PUSH
19752: EMPTY
19753: LIST
19754: PUSH
19755: EMPTY
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: LIST
19763: PPUSH
19764: CALL_OW 69
19768: PUSH
19769: FOR_IN
19770: IFFALSE 19788
// ComEnterUnit ( i , building ) ;
19772: LD_VAR 0 2
19776: PPUSH
19777: LD_VAR 0 1
19781: PPUSH
19782: CALL_OW 120
19786: GO 19769
19788: POP
19789: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
19790: LD_INT 22
19792: PUSH
19793: LD_INT 3
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PUSH
19800: LD_INT 30
19802: PUSH
19803: LD_INT 5
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PPUSH
19814: CALL_OW 69
19818: PUSH
19819: LD_INT 0
19821: EQUAL
19822: IFFALSE 19836
// ruArm1 = building else
19824: LD_ADDR_EXP 32
19828: PUSH
19829: LD_VAR 0 1
19833: ST_TO_ADDR
19834: GO 19846
// ruArm2 = building ;
19836: LD_ADDR_EXP 33
19840: PUSH
19841: LD_VAR 0 1
19845: ST_TO_ADDR
// end ; end ; end ;
19846: PPOPN 2
19848: END
// on EnterBuilding ( building , human ) do var rnd ;
19849: LD_INT 0
19851: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
19852: LD_VAR 0 2
19856: PPUSH
19857: CALL_OW 255
19861: PUSH
19862: LD_INT 2
19864: EQUAL
19865: PUSH
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 257
19875: PUSH
19876: LD_INT 1
19878: EQUAL
19879: AND
19880: PUSH
19881: LD_VAR 0 1
19885: PUSH
19886: LD_EXP 44
19890: EQUAL
19891: AND
19892: IFFALSE 19939
// begin wait ( 0 0$1 ) ;
19894: LD_INT 35
19896: PPUSH
19897: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
19901: LD_ADDR_VAR 0 3
19905: PUSH
19906: LD_INT 1
19908: PPUSH
19909: LD_INT 100
19911: PPUSH
19912: CALL_OW 12
19916: ST_TO_ADDR
// if rnd > 50 then
19917: LD_VAR 0 3
19921: PUSH
19922: LD_INT 50
19924: GREATER
19925: IFFALSE 19939
// SetClass ( human , class_mortar ) ;
19927: LD_VAR 0 2
19931: PPUSH
19932: LD_INT 8
19934: PPUSH
19935: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
19939: LD_VAR 0 2
19943: PPUSH
19944: CALL_OW 255
19948: PUSH
19949: LD_INT 3
19951: EQUAL
19952: PUSH
19953: LD_VAR 0 2
19957: PPUSH
19958: CALL_OW 257
19962: PUSH
19963: LD_INT 1
19965: EQUAL
19966: AND
19967: PUSH
19968: LD_VAR 0 1
19972: PUSH
19973: LD_EXP 32
19977: EQUAL
19978: PUSH
19979: LD_VAR 0 1
19983: PUSH
19984: LD_EXP 33
19988: EQUAL
19989: OR
19990: PUSH
19991: EMPTY
19992: LIST
19993: AND
19994: IFFALSE 20015
// begin wait ( 0 0$1 ) ;
19996: LD_INT 35
19998: PPUSH
19999: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
20003: LD_VAR 0 2
20007: PPUSH
20008: LD_INT 9
20010: PPUSH
20011: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
20015: LD_VAR 0 2
20019: PPUSH
20020: CALL_OW 255
20024: PUSH
20025: LD_INT 3
20027: EQUAL
20028: PUSH
20029: LD_VAR 0 2
20033: PPUSH
20034: CALL_OW 257
20038: PUSH
20039: LD_INT 9
20041: EQUAL
20042: AND
20043: PUSH
20044: LD_VAR 0 1
20048: PPUSH
20049: CALL_OW 266
20053: PUSH
20054: LD_INT 32
20056: EQUAL
20057: AND
20058: IFFALSE 20079
// begin wait ( 0 0$1 ) ;
20060: LD_INT 35
20062: PPUSH
20063: CALL_OW 67
// SetClass ( human , 1 ) ;
20067: LD_VAR 0 2
20071: PPUSH
20072: LD_INT 1
20074: PPUSH
20075: CALL_OW 336
// end ; end ;
20079: PPOPN 3
20081: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
20082: LD_VAR 0 1
20086: PUSH
20087: LD_INT 1
20089: EQUAL
20090: PUSH
20091: LD_VAR 0 2
20095: PUSH
20096: LD_INT 2
20098: EQUAL
20099: AND
20100: PUSH
20101: LD_INT 1
20103: PPUSH
20104: LD_INT 2
20106: PPUSH
20107: CALL_OW 81
20111: PUSH
20112: LD_INT 1
20114: EQUAL
20115: AND
20116: IFFALSE 20137
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20118: LD_EXP 24
20122: PPUSH
20123: LD_STRING D6b-Pow-1
20125: PPUSH
20126: CALL_OW 94
// YouLost ( Powell ) ;
20130: LD_STRING Powell
20132: PPUSH
20133: CALL_OW 104
// end ; end ;
20137: PPOPN 2
20139: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 255
20149: PUSH
20150: LD_INT 3
20152: EQUAL
20153: PUSH
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 247
20163: PUSH
20164: LD_INT 3
20166: EQUAL
20167: AND
20168: IFFALSE 20860
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20170: LD_VAR 0 1
20174: PPUSH
20175: CALL_OW 266
20179: PUSH
20180: LD_INT 31
20182: EQUAL
20183: PUSH
20184: LD_VAR 0 1
20188: PPUSH
20189: CALL_OW 266
20193: PUSH
20194: LD_INT 32
20196: EQUAL
20197: OR
20198: PUSH
20199: LD_VAR 0 1
20203: PPUSH
20204: CALL_OW 266
20208: PUSH
20209: LD_INT 36
20211: EQUAL
20212: OR
20213: PUSH
20214: LD_VAR 0 1
20218: PPUSH
20219: CALL_OW 266
20223: PUSH
20224: LD_INT 0
20226: EQUAL
20227: OR
20228: PUSH
20229: LD_VAR 0 1
20233: PPUSH
20234: CALL_OW 266
20238: PUSH
20239: LD_INT 24
20241: EQUAL
20242: OR
20243: PUSH
20244: LD_VAR 0 1
20248: PPUSH
20249: CALL_OW 266
20253: PUSH
20254: LD_INT 17
20256: EQUAL
20257: OR
20258: PUSH
20259: LD_VAR 0 1
20263: PPUSH
20264: CALL_OW 266
20268: PUSH
20269: LD_INT 25
20271: EQUAL
20272: OR
20273: PUSH
20274: LD_VAR 0 1
20278: PPUSH
20279: CALL_OW 266
20283: PUSH
20284: LD_INT 19
20286: EQUAL
20287: OR
20288: PUSH
20289: LD_VAR 0 1
20293: PPUSH
20294: CALL_OW 266
20298: PUSH
20299: LD_INT 20
20301: EQUAL
20302: OR
20303: PUSH
20304: LD_VAR 0 1
20308: PPUSH
20309: CALL_OW 266
20313: PUSH
20314: LD_INT 18
20316: EQUAL
20317: OR
20318: PUSH
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 266
20328: PUSH
20329: LD_INT 21
20331: EQUAL
20332: OR
20333: PUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 266
20343: PUSH
20344: LD_INT 23
20346: EQUAL
20347: OR
20348: PUSH
20349: LD_VAR 0 1
20353: PPUSH
20354: CALL_OW 266
20358: PUSH
20359: LD_INT 16
20361: EQUAL
20362: OR
20363: PUSH
20364: LD_VAR 0 1
20368: PPUSH
20369: CALL_OW 266
20373: PUSH
20374: LD_INT 6
20376: EQUAL
20377: OR
20378: PUSH
20379: LD_VAR 0 1
20383: PPUSH
20384: CALL_OW 266
20388: PUSH
20389: LD_INT 29
20391: EQUAL
20392: OR
20393: PUSH
20394: LD_VAR 0 1
20398: PPUSH
20399: CALL_OW 266
20403: PUSH
20404: LD_INT 26
20406: EQUAL
20407: OR
20408: PUSH
20409: LD_VAR 0 1
20413: PPUSH
20414: CALL_OW 266
20418: PUSH
20419: LD_INT 30
20421: EQUAL
20422: OR
20423: PUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 266
20433: PUSH
20434: LD_INT 28
20436: EQUAL
20437: OR
20438: PUSH
20439: LD_VAR 0 1
20443: PPUSH
20444: CALL_OW 266
20448: PUSH
20449: LD_INT 27
20451: EQUAL
20452: OR
20453: PUSH
20454: LD_VAR 0 1
20458: PPUSH
20459: CALL_OW 266
20463: PUSH
20464: LD_INT 33
20466: EQUAL
20467: OR
20468: PUSH
20469: LD_VAR 0 1
20473: PPUSH
20474: CALL_OW 266
20478: PUSH
20479: LD_INT 2
20481: EQUAL
20482: OR
20483: PUSH
20484: LD_VAR 0 1
20488: PPUSH
20489: CALL_OW 266
20493: PUSH
20494: LD_INT 4
20496: EQUAL
20497: OR
20498: IFFALSE 20584
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20500: LD_ADDR_EXP 41
20504: PUSH
20505: LD_EXP 41
20509: PUSH
20510: LD_VAR 0 1
20514: PPUSH
20515: CALL_OW 266
20519: ADD
20520: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20521: LD_ADDR_EXP 41
20525: PUSH
20526: LD_EXP 41
20530: PUSH
20531: LD_VAR 0 1
20535: PPUSH
20536: CALL_OW 250
20540: ADD
20541: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20542: LD_ADDR_EXP 41
20546: PUSH
20547: LD_EXP 41
20551: PUSH
20552: LD_VAR 0 1
20556: PPUSH
20557: CALL_OW 251
20561: ADD
20562: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20563: LD_ADDR_EXP 41
20567: PUSH
20568: LD_EXP 41
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 254
20582: ADD
20583: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20584: LD_VAR 0 1
20588: PPUSH
20589: CALL_OW 266
20593: PUSH
20594: LD_INT 1
20596: EQUAL
20597: IFFALSE 20676
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20599: LD_ADDR_EXP 41
20603: PUSH
20604: LD_EXP 41
20608: PUSH
20609: LD_INT 0
20611: ADD
20612: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20613: LD_ADDR_EXP 41
20617: PUSH
20618: LD_EXP 41
20622: PUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 250
20632: ADD
20633: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20634: LD_ADDR_EXP 41
20638: PUSH
20639: LD_EXP 41
20643: PUSH
20644: LD_VAR 0 1
20648: PPUSH
20649: CALL_OW 251
20653: ADD
20654: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20655: LD_ADDR_EXP 41
20659: PUSH
20660: LD_EXP 41
20664: PUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 254
20674: ADD
20675: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 266
20685: PUSH
20686: LD_INT 3
20688: EQUAL
20689: IFFALSE 20768
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20691: LD_ADDR_EXP 41
20695: PUSH
20696: LD_EXP 41
20700: PUSH
20701: LD_INT 2
20703: ADD
20704: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20705: LD_ADDR_EXP 41
20709: PUSH
20710: LD_EXP 41
20714: PUSH
20715: LD_VAR 0 1
20719: PPUSH
20720: CALL_OW 250
20724: ADD
20725: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20726: LD_ADDR_EXP 41
20730: PUSH
20731: LD_EXP 41
20735: PUSH
20736: LD_VAR 0 1
20740: PPUSH
20741: CALL_OW 251
20745: ADD
20746: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20747: LD_ADDR_EXP 41
20751: PUSH
20752: LD_EXP 41
20756: PUSH
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 254
20766: ADD
20767: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20768: LD_VAR 0 1
20772: PPUSH
20773: CALL_OW 266
20777: PUSH
20778: LD_INT 5
20780: EQUAL
20781: IFFALSE 20860
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20783: LD_ADDR_EXP 41
20787: PUSH
20788: LD_EXP 41
20792: PUSH
20793: LD_INT 4
20795: ADD
20796: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20797: LD_ADDR_EXP 41
20801: PUSH
20802: LD_EXP 41
20806: PUSH
20807: LD_VAR 0 1
20811: PPUSH
20812: CALL_OW 250
20816: ADD
20817: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20818: LD_ADDR_EXP 41
20822: PUSH
20823: LD_EXP 41
20827: PUSH
20828: LD_VAR 0 1
20832: PPUSH
20833: CALL_OW 251
20837: ADD
20838: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20839: LD_ADDR_EXP 41
20843: PUSH
20844: LD_EXP 41
20848: PUSH
20849: LD_VAR 0 1
20853: PPUSH
20854: CALL_OW 254
20858: ADD
20859: ST_TO_ADDR
// end ; end ; end ;
20860: PPOPN 1
20862: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
20863: LD_ADDR_OWVAR 57
20867: PUSH
20868: LD_INT 0
20870: ST_TO_ADDR
// fastEnd = 1 ;
20871: LD_ADDR_EXP 53
20875: PUSH
20876: LD_INT 1
20878: ST_TO_ADDR
// FinishMission ;
20879: CALL 22610 0 0
// end ; end_of_file
20883: PPOPN 1
20885: END
// export function PrepareNature ; var i , un ; begin
20886: LD_INT 0
20888: PPUSH
20889: PPUSH
20890: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
20891: LD_ADDR_VAR 0 2
20895: PUSH
20896: DOUBLE
20897: LD_INT 1
20899: DEC
20900: ST_TO_ADDR
20901: LD_OWVAR 67
20905: PUSH
20906: LD_INT 1
20908: PPUSH
20909: LD_INT 5
20911: PPUSH
20912: CALL_OW 12
20916: PLUS
20917: PUSH
20918: FOR_TO
20919: IFFALSE 21064
// begin hc_sex = sex_male ;
20921: LD_ADDR_OWVAR 27
20925: PUSH
20926: LD_INT 1
20928: ST_TO_ADDR
// uc_side = 0 ;
20929: LD_ADDR_OWVAR 20
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// uc_nation = nation_nature ;
20937: LD_ADDR_OWVAR 21
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// hc_class = class_apeman ;
20945: LD_ADDR_OWVAR 28
20949: PUSH
20950: LD_INT 12
20952: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
20953: LD_ADDR_OWVAR 31
20957: PUSH
20958: LD_INT 2
20960: PPUSH
20961: LD_INT 7
20963: PPUSH
20964: CALL_OW 12
20968: PUSH
20969: LD_OWVAR 67
20973: PLUS
20974: PUSH
20975: LD_INT 2
20977: PPUSH
20978: LD_INT 10
20980: PPUSH
20981: CALL_OW 12
20985: PUSH
20986: LD_INT 2
20988: PPUSH
20989: LD_INT 10
20991: PPUSH
20992: CALL_OW 12
20996: PUSH
20997: LD_INT 2
20999: PPUSH
21000: LD_INT 10
21002: PPUSH
21003: CALL_OW 12
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21014: LD_ADDR_OWVAR 35
21018: PUSH
21019: LD_INT 5
21021: NEG
21022: PPUSH
21023: LD_INT 5
21025: PPUSH
21026: CALL_OW 12
21030: PUSH
21031: LD_OWVAR 67
21035: MUL
21036: ST_TO_ADDR
// un = CreateHuman ;
21037: LD_ADDR_VAR 0 3
21041: PUSH
21042: CALL_OW 44
21046: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21047: LD_VAR 0 3
21051: PPUSH
21052: LD_INT 5
21054: PPUSH
21055: LD_INT 0
21057: PPUSH
21058: CALL_OW 49
// end ;
21062: GO 20918
21064: POP
21065: POP
// for i = 1 to Difficulty + 2 do
21066: LD_ADDR_VAR 0 2
21070: PUSH
21071: DOUBLE
21072: LD_INT 1
21074: DEC
21075: ST_TO_ADDR
21076: LD_OWVAR 67
21080: PUSH
21081: LD_INT 2
21083: PLUS
21084: PUSH
21085: FOR_TO
21086: IFFALSE 21195
// begin hc_sex = sex_male ;
21088: LD_ADDR_OWVAR 27
21092: PUSH
21093: LD_INT 1
21095: ST_TO_ADDR
// uc_side = 0 ;
21096: LD_ADDR_OWVAR 20
21100: PUSH
21101: LD_INT 0
21103: ST_TO_ADDR
// uc_nation = nation_nature ;
21104: LD_ADDR_OWVAR 21
21108: PUSH
21109: LD_INT 0
21111: ST_TO_ADDR
// hc_class = class_tiger ;
21112: LD_ADDR_OWVAR 28
21116: PUSH
21117: LD_INT 14
21119: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21120: LD_ADDR_OWVAR 31
21124: PUSH
21125: LD_EXP 36
21129: PUSH
21130: LD_INT 0
21132: PUSH
21133: LD_INT 0
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21145: LD_ADDR_OWVAR 35
21149: PUSH
21150: LD_INT 5
21152: NEG
21153: PPUSH
21154: LD_INT 5
21156: PPUSH
21157: CALL_OW 12
21161: PUSH
21162: LD_OWVAR 67
21166: MUL
21167: ST_TO_ADDR
// un = CreateHuman ;
21168: LD_ADDR_VAR 0 3
21172: PUSH
21173: CALL_OW 44
21177: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21178: LD_VAR 0 3
21182: PPUSH
21183: LD_INT 6
21185: PPUSH
21186: LD_INT 0
21188: PPUSH
21189: CALL_OW 49
// end ;
21193: GO 21085
21195: POP
21196: POP
// for i = 1 to rand ( 3 , 4 ) do
21197: LD_ADDR_VAR 0 2
21201: PUSH
21202: DOUBLE
21203: LD_INT 1
21205: DEC
21206: ST_TO_ADDR
21207: LD_INT 3
21209: PPUSH
21210: LD_INT 4
21212: PPUSH
21213: CALL_OW 12
21217: PUSH
21218: FOR_TO
21219: IFFALSE 21313
// begin hc_sex = sex_male ;
21221: LD_ADDR_OWVAR 27
21225: PUSH
21226: LD_INT 1
21228: ST_TO_ADDR
// uc_side = 0 ;
21229: LD_ADDR_OWVAR 20
21233: PUSH
21234: LD_INT 0
21236: ST_TO_ADDR
// uc_nation = nation_nature ;
21237: LD_ADDR_OWVAR 21
21241: PUSH
21242: LD_INT 0
21244: ST_TO_ADDR
// hc_class = 18 ;
21245: LD_ADDR_OWVAR 28
21249: PUSH
21250: LD_INT 18
21252: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21253: LD_ADDR_OWVAR 31
21257: PUSH
21258: LD_EXP 36
21262: PUSH
21263: LD_INT 0
21265: PUSH
21266: LD_INT 0
21268: PUSH
21269: LD_INT 0
21271: PUSH
21272: EMPTY
21273: LIST
21274: LIST
21275: LIST
21276: LIST
21277: ST_TO_ADDR
// hc_agressivity = 0 ;
21278: LD_ADDR_OWVAR 35
21282: PUSH
21283: LD_INT 0
21285: ST_TO_ADDR
// un = CreateHuman ;
21286: LD_ADDR_VAR 0 3
21290: PUSH
21291: CALL_OW 44
21295: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21296: LD_VAR 0 3
21300: PPUSH
21301: LD_INT 6
21303: PPUSH
21304: LD_INT 0
21306: PPUSH
21307: CALL_OW 49
// end ;
21311: GO 21218
21313: POP
21314: POP
// end ; end_of_file
21315: LD_VAR 0 1
21319: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
21320: LD_EXP 45
21324: PUSH
21325: LD_INT 1
21327: EQUAL
21328: IFFALSE 21436
21330: GO 21332
21332: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
21333: LD_INT 7
21335: PPUSH
21336: LD_INT 5
21338: PPUSH
21339: LD_INT 4
21341: PPUSH
21342: LD_INT 6
21344: PPUSH
21345: CALL_OW 12
21349: PUSH
21350: LD_INT 6
21352: PPUSH
21353: LD_INT 8
21355: PPUSH
21356: CALL_OW 12
21360: PUSH
21361: LD_INT 7
21363: PPUSH
21364: LD_INT 9
21366: PPUSH
21367: CALL_OW 12
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: PUSH
21377: LD_OWVAR 67
21381: ARRAY
21382: PPUSH
21383: LD_EXP 35
21387: PPUSH
21388: LD_EXP 36
21392: PPUSH
21393: CALL_OW 12
21397: PPUSH
21398: LD_INT 2
21400: PPUSH
21401: LD_INT 1
21403: PPUSH
21404: LD_INT 1
21406: PPUSH
21407: EMPTY
21408: PPUSH
21409: LD_INT 25
21411: PUSH
21412: LD_INT 26
21414: PUSH
21415: LD_INT 27
21417: PUSH
21418: LD_INT 28
21420: PUSH
21421: EMPTY
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: PPUSH
21427: EMPTY
21428: PPUSH
21429: LD_INT 1
21431: PPUSH
21432: CALL 12867 0 11
21436: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
21437: LD_EXP 45
21441: PUSH
21442: LD_INT 1
21444: EQUAL
21445: IFFALSE 21581
21447: GO 21449
21449: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21450: LD_INT 5
21452: PPUSH
21453: LD_INT 2
21455: PPUSH
21456: LD_INT 7
21458: PPUSH
21459: LD_INT 9
21461: PPUSH
21462: CALL_OW 12
21466: PUSH
21467: LD_INT 8
21469: PPUSH
21470: LD_INT 10
21472: PPUSH
21473: CALL_OW 12
21477: PUSH
21478: LD_INT 9
21480: PPUSH
21481: LD_INT 12
21483: PPUSH
21484: CALL_OW 12
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: LD_OWVAR 67
21498: ARRAY
21499: PPUSH
21500: LD_INT 0
21502: PPUSH
21503: LD_INT 0
21505: PPUSH
21506: LD_INT 3
21508: PPUSH
21509: LD_INT 4
21511: PPUSH
21512: CALL_OW 12
21516: PUSH
21517: LD_INT 4
21519: PPUSH
21520: LD_INT 5
21522: PPUSH
21523: CALL_OW 12
21527: PUSH
21528: LD_INT 5
21530: PPUSH
21531: LD_INT 6
21533: PPUSH
21534: CALL_OW 12
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: LIST
21543: PUSH
21544: LD_OWVAR 67
21548: ARRAY
21549: PPUSH
21550: LD_INT 0
21552: PPUSH
21553: LD_EXP 35
21557: PPUSH
21558: LD_EXP 36
21562: PPUSH
21563: CALL_OW 12
21567: PPUSH
21568: LD_INT 7
21570: PPUSH
21571: LD_INT 9
21573: PPUSH
21574: LD_INT 1
21576: PPUSH
21577: CALL 14571 0 11
21581: END
// every 4 4$30 trigger joinEpsilon = 1 do
21582: LD_EXP 28
21586: PUSH
21587: LD_INT 1
21589: EQUAL
21590: IFFALSE 21652
21592: GO 21594
21594: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 2 , 4 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21595: LD_INT 6
21597: PPUSH
21598: LD_INT 3
21600: PPUSH
21601: LD_INT 2
21603: PPUSH
21604: LD_INT 4
21606: PPUSH
21607: CALL_OW 12
21611: PPUSH
21612: LD_INT 0
21614: PPUSH
21615: LD_INT 0
21617: PPUSH
21618: LD_INT 0
21620: PPUSH
21621: LD_INT 0
21623: PPUSH
21624: LD_EXP 35
21628: PPUSH
21629: LD_EXP 36
21633: PPUSH
21634: CALL_OW 12
21638: PPUSH
21639: LD_INT 17
21641: PPUSH
21642: LD_INT 18
21644: PPUSH
21645: LD_INT 1
21647: PPUSH
21648: CALL 14571 0 11
21652: END
// every 4 4$30 trigger joinEpsilon = 1 do
21653: LD_EXP 28
21657: PUSH
21658: LD_INT 1
21660: EQUAL
21661: IFFALSE 21743
21663: GO 21665
21665: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21666: LD_INT 17
21668: PPUSH
21669: LD_INT 6
21671: PPUSH
21672: LD_INT 1
21674: PPUSH
21675: LD_INT 3
21677: PPUSH
21678: CALL_OW 12
21682: PPUSH
21683: LD_EXP 35
21687: PPUSH
21688: LD_EXP 36
21692: PPUSH
21693: CALL_OW 12
21697: PPUSH
21698: LD_INT 3
21700: PPUSH
21701: LD_INT 1
21703: PPUSH
21704: LD_INT 1
21706: PUSH
21707: LD_INT 3
21709: PUSH
21710: EMPTY
21711: LIST
21712: LIST
21713: PPUSH
21714: LD_INT 43
21716: PUSH
21717: LD_INT 44
21719: PUSH
21720: LD_INT 45
21722: PUSH
21723: LD_INT 46
21725: PUSH
21726: EMPTY
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: PPUSH
21732: EMPTY
21733: PPUSH
21734: EMPTY
21735: PPUSH
21736: LD_INT 1
21738: PPUSH
21739: CALL 12867 0 11
21743: END
// every 8 8$30 trigger joinEpsilon = 1 do
21744: LD_EXP 28
21748: PUSH
21749: LD_INT 1
21751: EQUAL
21752: IFFALSE 21822
21754: GO 21756
21756: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 3 , 6 ) , 0 , rand ( 3 , 5 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21757: LD_INT 6
21759: PPUSH
21760: LD_INT 3
21762: PPUSH
21763: LD_INT 3
21765: PPUSH
21766: LD_INT 6
21768: PPUSH
21769: CALL_OW 12
21773: PPUSH
21774: LD_INT 0
21776: PPUSH
21777: LD_INT 3
21779: PPUSH
21780: LD_INT 5
21782: PPUSH
21783: CALL_OW 12
21787: PPUSH
21788: LD_INT 0
21790: PPUSH
21791: LD_INT 0
21793: PPUSH
21794: LD_EXP 35
21798: PPUSH
21799: LD_EXP 36
21803: PPUSH
21804: CALL_OW 12
21808: PPUSH
21809: LD_INT 17
21811: PPUSH
21812: LD_INT 18
21814: PPUSH
21815: LD_INT 1
21817: PPUSH
21818: CALL 14571 0 11
21822: END
// every 8 8$30 trigger joinEpsilon = 1 do
21823: LD_EXP 28
21827: PUSH
21828: LD_INT 1
21830: EQUAL
21831: IFFALSE 21913
21833: GO 21835
21835: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21836: LD_INT 17
21838: PPUSH
21839: LD_INT 6
21841: PPUSH
21842: LD_INT 1
21844: PPUSH
21845: LD_INT 5
21847: PPUSH
21848: CALL_OW 12
21852: PPUSH
21853: LD_EXP 35
21857: PPUSH
21858: LD_EXP 36
21862: PPUSH
21863: CALL_OW 12
21867: PPUSH
21868: LD_INT 3
21870: PPUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_INT 1
21876: PUSH
21877: LD_INT 3
21879: PUSH
21880: EMPTY
21881: LIST
21882: LIST
21883: PPUSH
21884: LD_INT 43
21886: PUSH
21887: LD_INT 44
21889: PUSH
21890: LD_INT 45
21892: PUSH
21893: LD_INT 46
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: PPUSH
21902: EMPTY
21903: PPUSH
21904: EMPTY
21905: PPUSH
21906: LD_INT 1
21908: PPUSH
21909: CALL 12867 0 11
21913: END
// every 15 15$30 trigger joinEpsilon = 1 do
21914: LD_EXP 28
21918: PUSH
21919: LD_INT 1
21921: EQUAL
21922: IFFALSE 21992
21924: GO 21926
21926: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21927: LD_INT 6
21929: PPUSH
21930: LD_INT 3
21932: PPUSH
21933: LD_INT 5
21935: PPUSH
21936: LD_INT 8
21938: PPUSH
21939: CALL_OW 12
21943: PPUSH
21944: LD_INT 0
21946: PPUSH
21947: LD_INT 3
21949: PPUSH
21950: LD_INT 8
21952: PPUSH
21953: CALL_OW 12
21957: PPUSH
21958: LD_INT 0
21960: PPUSH
21961: LD_INT 0
21963: PPUSH
21964: LD_EXP 35
21968: PPUSH
21969: LD_EXP 36
21973: PPUSH
21974: CALL_OW 12
21978: PPUSH
21979: LD_INT 17
21981: PPUSH
21982: LD_INT 18
21984: PPUSH
21985: LD_INT 1
21987: PPUSH
21988: CALL 14571 0 11
21992: END
// every 15 15$30 trigger joinEpsilon = 1 do
21993: LD_EXP 28
21997: PUSH
21998: LD_INT 1
22000: EQUAL
22001: IFFALSE 22083
22003: GO 22005
22005: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22006: LD_INT 17
22008: PPUSH
22009: LD_INT 6
22011: PPUSH
22012: LD_INT 5
22014: PPUSH
22015: LD_INT 8
22017: PPUSH
22018: CALL_OW 12
22022: PPUSH
22023: LD_EXP 35
22027: PPUSH
22028: LD_EXP 36
22032: PPUSH
22033: CALL_OW 12
22037: PPUSH
22038: LD_INT 3
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: LD_INT 1
22046: PUSH
22047: LD_INT 3
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: PPUSH
22054: LD_INT 43
22056: PUSH
22057: LD_INT 44
22059: PUSH
22060: LD_INT 45
22062: PUSH
22063: LD_INT 46
22065: PUSH
22066: EMPTY
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PPUSH
22072: EMPTY
22073: PPUSH
22074: EMPTY
22075: PPUSH
22076: LD_INT 1
22078: PPUSH
22079: CALL 12867 0 11
22083: END
// every 27 27$30 trigger joinEpsilon = 1 do
22084: LD_EXP 28
22088: PUSH
22089: LD_INT 1
22091: EQUAL
22092: IFFALSE 22162
22094: GO 22096
22096: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22097: LD_INT 6
22099: PPUSH
22100: LD_INT 3
22102: PPUSH
22103: LD_INT 7
22105: PPUSH
22106: LD_INT 10
22108: PPUSH
22109: CALL_OW 12
22113: PPUSH
22114: LD_INT 0
22116: PPUSH
22117: LD_INT 3
22119: PPUSH
22120: LD_INT 8
22122: PPUSH
22123: CALL_OW 12
22127: PPUSH
22128: LD_INT 0
22130: PPUSH
22131: LD_INT 0
22133: PPUSH
22134: LD_EXP 35
22138: PPUSH
22139: LD_EXP 36
22143: PPUSH
22144: CALL_OW 12
22148: PPUSH
22149: LD_INT 17
22151: PPUSH
22152: LD_INT 18
22154: PPUSH
22155: LD_INT 1
22157: PPUSH
22158: CALL 14571 0 11
22162: END
// every 27 27$30 trigger joinEpsilon = 1 do
22163: LD_EXP 28
22167: PUSH
22168: LD_INT 1
22170: EQUAL
22171: IFFALSE 22253
22173: GO 22175
22175: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22176: LD_INT 17
22178: PPUSH
22179: LD_INT 6
22181: PPUSH
22182: LD_INT 5
22184: PPUSH
22185: LD_INT 8
22187: PPUSH
22188: CALL_OW 12
22192: PPUSH
22193: LD_EXP 35
22197: PPUSH
22198: LD_EXP 36
22202: PPUSH
22203: CALL_OW 12
22207: PPUSH
22208: LD_INT 3
22210: PPUSH
22211: LD_INT 1
22213: PPUSH
22214: LD_INT 1
22216: PUSH
22217: LD_INT 3
22219: PUSH
22220: EMPTY
22221: LIST
22222: LIST
22223: PPUSH
22224: LD_INT 43
22226: PUSH
22227: LD_INT 44
22229: PUSH
22230: LD_INT 45
22232: PUSH
22233: LD_INT 46
22235: PUSH
22236: EMPTY
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: PPUSH
22242: EMPTY
22243: PPUSH
22244: EMPTY
22245: PPUSH
22246: LD_INT 1
22248: PPUSH
22249: CALL 12867 0 11
22253: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22254: LD_INT 54
22256: PPUSH
22257: LD_INT 1
22259: PPUSH
22260: CALL_OW 321
22264: PUSH
22265: LD_INT 2
22267: EQUAL
22268: PUSH
22269: LD_INT 55
22271: PPUSH
22272: LD_INT 1
22274: PPUSH
22275: CALL_OW 321
22279: PUSH
22280: LD_INT 2
22282: EQUAL
22283: AND
22284: PUSH
22285: LD_INT 21
22287: PPUSH
22288: LD_INT 1
22290: PPUSH
22291: CALL_OW 321
22295: PUSH
22296: LD_INT 2
22298: EQUAL
22299: AND
22300: PUSH
22301: LD_INT 22
22303: PPUSH
22304: LD_INT 1
22306: PPUSH
22307: CALL_OW 321
22311: PUSH
22312: LD_INT 2
22314: EQUAL
22315: AND
22316: PUSH
22317: LD_INT 12
22319: PPUSH
22320: LD_INT 1
22322: PPUSH
22323: CALL_OW 321
22327: PUSH
22328: LD_INT 1
22330: EQUAL
22331: PUSH
22332: LD_INT 32
22334: PPUSH
22335: LD_INT 1
22337: PPUSH
22338: CALL_OW 321
22342: PUSH
22343: LD_INT 1
22345: EQUAL
22346: OR
22347: PUSH
22348: EMPTY
22349: LIST
22350: AND
22351: PUSH
22352: LD_EXP 47
22356: PUSH
22357: LD_INT 1
22359: EQUAL
22360: AND
22361: PUSH
22362: LD_INT 22
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PUSH
22372: LD_INT 21
22374: PUSH
22375: LD_INT 1
22377: PUSH
22378: EMPTY
22379: LIST
22380: LIST
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: PPUSH
22386: CALL_OW 69
22390: PUSH
22391: LD_INT 0
22393: EQUAL
22394: AND
22395: IFFALSE 22451
22397: GO 22399
22399: DISABLE
// begin case query ( QEndMission ) of 1 :
22400: LD_STRING QEndMission
22402: PPUSH
22403: CALL_OW 97
22407: PUSH
22408: LD_INT 1
22410: DOUBLE
22411: EQUAL
22412: IFTRUE 22416
22414: GO 22427
22416: POP
// begin end_the_mission_allowed = true ;
22417: LD_ADDR_OWVAR 57
22421: PUSH
22422: LD_INT 1
22424: ST_TO_ADDR
// end ; 2 :
22425: GO 22451
22427: LD_INT 2
22429: DOUBLE
22430: EQUAL
22431: IFTRUE 22435
22433: GO 22450
22435: POP
// begin fastEnd = 1 ;
22436: LD_ADDR_EXP 53
22440: PUSH
22441: LD_INT 1
22443: ST_TO_ADDR
// FinishMission ;
22444: CALL 22610 0 0
// end ; end ;
22448: GO 22451
22450: POP
// end ;
22451: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22452: LD_INT 54
22454: PPUSH
22455: LD_INT 1
22457: PPUSH
22458: CALL_OW 321
22462: PUSH
22463: LD_INT 2
22465: EQUAL
22466: PUSH
22467: LD_INT 55
22469: PPUSH
22470: LD_INT 1
22472: PPUSH
22473: CALL_OW 321
22477: PUSH
22478: LD_INT 2
22480: EQUAL
22481: AND
22482: PUSH
22483: LD_INT 21
22485: PPUSH
22486: LD_INT 1
22488: PPUSH
22489: CALL_OW 321
22493: PUSH
22494: LD_INT 2
22496: EQUAL
22497: AND
22498: PUSH
22499: LD_INT 22
22501: PPUSH
22502: LD_INT 1
22504: PPUSH
22505: CALL_OW 321
22509: PUSH
22510: LD_INT 2
22512: EQUAL
22513: AND
22514: PUSH
22515: LD_INT 12
22517: PPUSH
22518: LD_INT 1
22520: PPUSH
22521: CALL_OW 321
22525: PUSH
22526: LD_INT 2
22528: EQUAL
22529: AND
22530: PUSH
22531: LD_INT 32
22533: PPUSH
22534: LD_INT 1
22536: PPUSH
22537: CALL_OW 321
22541: PUSH
22542: LD_INT 2
22544: EQUAL
22545: AND
22546: PUSH
22547: LD_EXP 53
22551: PUSH
22552: LD_INT 0
22554: EQUAL
22555: AND
22556: PUSH
22557: LD_EXP 47
22561: PUSH
22562: LD_INT 1
22564: EQUAL
22565: AND
22566: PUSH
22567: LD_INT 22
22569: PUSH
22570: LD_INT 3
22572: PUSH
22573: EMPTY
22574: LIST
22575: LIST
22576: PUSH
22577: LD_INT 21
22579: PUSH
22580: LD_INT 1
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: PPUSH
22591: CALL_OW 69
22595: PUSH
22596: LD_INT 0
22598: EQUAL
22599: AND
22600: IFFALSE 22609
22602: GO 22604
22604: DISABLE
// FinishMission ;
22605: CALL 22610 0 0
22609: END
// export function FinishMission ; begin
22610: LD_INT 0
22612: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22613: LD_EXP 49
22617: PPUSH
22618: LD_STRING 10_KhatamStatus_1
22620: PPUSH
22621: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22625: LD_INT 12
22627: PPUSH
22628: LD_INT 1
22630: PPUSH
22631: CALL_OW 321
22635: PUSH
22636: LD_INT 2
22638: EQUAL
22639: IFFALSE 22653
// begin AddMedal ( sights , 1 ) ;
22641: LD_STRING sights
22643: PPUSH
22644: LD_INT 1
22646: PPUSH
22647: CALL_OW 101
// end else
22651: GO 22664
// begin AddMedal ( sights , - 1 ) ;
22653: LD_STRING sights
22655: PPUSH
22656: LD_INT 1
22658: NEG
22659: PPUSH
22660: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22664: LD_INT 32
22666: PPUSH
22667: LD_INT 1
22669: PPUSH
22670: CALL_OW 321
22674: PUSH
22675: LD_INT 2
22677: EQUAL
22678: IFFALSE 22692
// begin AddMedal ( computers , 1 ) ;
22680: LD_STRING computers
22682: PPUSH
22683: LD_INT 1
22685: PPUSH
22686: CALL_OW 101
// end else
22690: GO 22703
// begin AddMedal ( computers , - 1 ) ;
22692: LD_STRING computers
22694: PPUSH
22695: LD_INT 1
22697: NEG
22698: PPUSH
22699: CALL_OW 101
// end ; if arabianEscape = 0 then
22703: LD_EXP 46
22707: PUSH
22708: LD_INT 0
22710: EQUAL
22711: IFFALSE 22735
// begin AddMedal ( renegades , 2 ) ;
22713: LD_STRING renegades
22715: PPUSH
22716: LD_INT 2
22718: PPUSH
22719: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22723: LD_INT 0
22725: PPUSH
22726: LD_STRING 10_ScientistsEscape_1
22728: PPUSH
22729: CALL_OW 39
// end else
22733: GO 22746
// begin AddMedal ( renegades , - 1 ) ;
22735: LD_STRING renegades
22737: PPUSH
22738: LD_INT 1
22740: NEG
22741: PPUSH
22742: CALL_OW 101
// end ; SaveEpsilonBase ;
22746: CALL 23336 0 0
// Query ( kaj ) ;
22750: LD_STRING kaj
22752: PPUSH
22753: CALL_OW 97
// GiveMedals ( Main ) ;
22757: LD_STRING Main
22759: PPUSH
22760: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22764: LD_INT 22
22766: PUSH
22767: LD_INT 1
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 23
22776: PUSH
22777: LD_INT 1
22779: PUSH
22780: EMPTY
22781: LIST
22782: LIST
22783: PUSH
22784: LD_INT 21
22786: PUSH
22787: LD_INT 1
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 2
22796: PUSH
22797: LD_INT 25
22799: PUSH
22800: LD_INT 1
22802: PUSH
22803: EMPTY
22804: LIST
22805: LIST
22806: PUSH
22807: LD_INT 25
22809: PUSH
22810: LD_INT 2
22812: PUSH
22813: EMPTY
22814: LIST
22815: LIST
22816: PUSH
22817: LD_INT 25
22819: PUSH
22820: LD_INT 3
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 25
22829: PUSH
22830: LD_INT 4
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 25
22839: PUSH
22840: LD_INT 5
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: PUSH
22855: EMPTY
22856: LIST
22857: LIST
22858: LIST
22859: LIST
22860: PPUSH
22861: CALL_OW 69
22865: PPUSH
22866: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22870: LD_EXP 1
22874: PPUSH
22875: LD_EXP 50
22879: PUSH
22880: LD_STRING JMM
22882: STR
22883: PPUSH
22884: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22888: LD_EXP 2
22892: PPUSH
22893: LD_EXP 50
22897: PUSH
22898: LD_STRING Brown
22900: STR
22901: PPUSH
22902: CALL 7578 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22906: LD_EXP 3
22910: PPUSH
22911: LD_EXP 50
22915: PUSH
22916: LD_STRING Donaldson
22918: STR
22919: PPUSH
22920: CALL 7578 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22924: LD_EXP 4
22928: PPUSH
22929: LD_EXP 50
22933: PUSH
22934: LD_STRING Bobby
22936: STR
22937: PPUSH
22938: CALL 7578 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22942: LD_EXP 5
22946: PPUSH
22947: LD_EXP 50
22951: PUSH
22952: LD_STRING Cyrus
22954: STR
22955: PPUSH
22956: CALL 7578 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22960: LD_EXP 6
22964: PPUSH
22965: LD_EXP 50
22969: PUSH
22970: LD_STRING Lisa
22972: STR
22973: PPUSH
22974: CALL 7578 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22978: LD_EXP 7
22982: PPUSH
22983: LD_EXP 50
22987: PUSH
22988: LD_STRING Frank
22990: STR
22991: PPUSH
22992: CALL 7578 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22996: LD_EXP 8
23000: PPUSH
23001: LD_EXP 50
23005: PUSH
23006: LD_STRING Kikuchi
23008: STR
23009: PPUSH
23010: CALL 7578 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23014: LD_EXP 9
23018: PPUSH
23019: LD_EXP 50
23023: PUSH
23024: LD_STRING Houten
23026: STR
23027: PPUSH
23028: CALL 7578 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23032: LD_EXP 10
23036: PPUSH
23037: LD_EXP 50
23041: PUSH
23042: LD_STRING Gary
23044: STR
23045: PPUSH
23046: CALL 7578 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23050: LD_EXP 11
23054: PPUSH
23055: LD_EXP 50
23059: PUSH
23060: LD_STRING Simms
23062: STR
23063: PPUSH
23064: CALL 7578 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23068: LD_EXP 12
23072: PPUSH
23073: LD_EXP 50
23077: PUSH
23078: LD_STRING Denis
23080: STR
23081: PPUSH
23082: CALL 7578 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23086: LD_EXP 13
23090: PPUSH
23091: LD_EXP 50
23095: PUSH
23096: LD_STRING Joan
23098: STR
23099: PPUSH
23100: CALL 7578 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23104: LD_EXP 15
23108: PPUSH
23109: LD_EXP 50
23113: PUSH
23114: LD_STRING Gladstone
23116: STR
23117: PPUSH
23118: CALL 7578 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23122: LD_EXP 17
23126: PPUSH
23127: LD_EXP 50
23131: PUSH
23132: LD_STRING DeltaDoctor
23134: STR
23135: PPUSH
23136: CALL 7578 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23140: LD_INT 50
23142: PUSH
23143: EMPTY
23144: LIST
23145: PUSH
23146: LD_INT 22
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 21
23158: PUSH
23159: LD_INT 1
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 2
23168: PUSH
23169: LD_INT 25
23171: PUSH
23172: LD_INT 1
23174: PUSH
23175: EMPTY
23176: LIST
23177: LIST
23178: PUSH
23179: LD_INT 25
23181: PUSH
23182: LD_INT 2
23184: PUSH
23185: EMPTY
23186: LIST
23187: LIST
23188: PUSH
23189: LD_INT 25
23191: PUSH
23192: LD_INT 3
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: PUSH
23199: LD_INT 25
23201: PUSH
23202: LD_INT 4
23204: PUSH
23205: EMPTY
23206: LIST
23207: LIST
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: PPUSH
23222: CALL_OW 69
23226: PUSH
23227: LD_EXP 1
23231: PUSH
23232: LD_EXP 2
23236: PUSH
23237: LD_EXP 3
23241: PUSH
23242: LD_EXP 4
23246: PUSH
23247: LD_EXP 5
23251: PUSH
23252: LD_EXP 6
23256: PUSH
23257: LD_EXP 7
23261: PUSH
23262: LD_EXP 15
23266: PUSH
23267: LD_EXP 8
23271: PUSH
23272: LD_EXP 12
23276: PUSH
23277: LD_EXP 13
23281: PUSH
23282: LD_EXP 9
23286: PUSH
23287: LD_EXP 11
23291: PUSH
23292: LD_EXP 10
23296: PUSH
23297: LD_EXP 17
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: DIFF
23319: PPUSH
23320: LD_STRING 10_other_survivors
23322: PPUSH
23323: CALL_OW 38
// YouWin ;
23327: CALL_OW 103
// end ;
23331: LD_VAR 0 1
23335: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
23336: LD_INT 0
23338: PPUSH
23339: PPUSH
23340: PPUSH
23341: PPUSH
// epsilonBase = [ ] ;
23342: LD_ADDR_VAR 0 2
23346: PUSH
23347: EMPTY
23348: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
23349: LD_ADDR_VAR 0 3
23353: PUSH
23354: LD_INT 22
23356: PUSH
23357: LD_INT 1
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PUSH
23364: LD_INT 21
23366: PUSH
23367: LD_INT 3
23369: PUSH
23370: EMPTY
23371: LIST
23372: LIST
23373: PUSH
23374: LD_INT 50
23376: PUSH
23377: EMPTY
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: PPUSH
23385: CALL_OW 69
23389: ST_TO_ADDR
// for i in buildings do
23390: LD_ADDR_VAR 0 4
23394: PUSH
23395: LD_VAR 0 3
23399: PUSH
23400: FOR_IN
23401: IFFALSE 23838
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
23403: LD_VAR 0 4
23407: PPUSH
23408: CALL_OW 266
23412: PUSH
23413: LD_INT 6
23415: PUSH
23416: LD_INT 7
23418: PUSH
23419: LD_INT 8
23421: PUSH
23422: EMPTY
23423: LIST
23424: LIST
23425: LIST
23426: IN
23427: IFFALSE 23541
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
23429: LD_ADDR_VAR 0 2
23433: PUSH
23434: LD_VAR 0 2
23438: PUSH
23439: LD_VAR 0 4
23443: PPUSH
23444: CALL_OW 266
23448: PUSH
23449: LD_VAR 0 4
23453: PPUSH
23454: CALL_OW 250
23458: PUSH
23459: LD_VAR 0 4
23463: PPUSH
23464: CALL_OW 251
23468: PUSH
23469: LD_VAR 0 4
23473: PPUSH
23474: CALL_OW 254
23478: PUSH
23479: LD_VAR 0 4
23483: PPUSH
23484: CALL_OW 267
23488: PUSH
23489: LD_VAR 0 4
23493: PPUSH
23494: CALL_OW 248
23498: PUSH
23499: LD_VAR 0 4
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 268
23511: PUSH
23512: LD_VAR 0 4
23516: PPUSH
23517: LD_INT 2
23519: PPUSH
23520: CALL_OW 268
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: PUSH
23535: EMPTY
23536: LIST
23537: ADD
23538: ST_TO_ADDR
23539: GO 23836
// if GetBType ( i ) = b_bunker then
23541: LD_VAR 0 4
23545: PPUSH
23546: CALL_OW 266
23550: PUSH
23551: LD_INT 32
23553: EQUAL
23554: IFFALSE 23651
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
23556: LD_ADDR_VAR 0 2
23560: PUSH
23561: LD_VAR 0 2
23565: PUSH
23566: LD_VAR 0 4
23570: PPUSH
23571: CALL_OW 266
23575: PUSH
23576: LD_VAR 0 4
23580: PPUSH
23581: CALL_OW 250
23585: PUSH
23586: LD_VAR 0 4
23590: PPUSH
23591: CALL_OW 251
23595: PUSH
23596: LD_VAR 0 4
23600: PPUSH
23601: CALL_OW 254
23605: PUSH
23606: LD_VAR 0 4
23610: PPUSH
23611: CALL_OW 267
23615: PUSH
23616: LD_VAR 0 4
23620: PPUSH
23621: CALL_OW 248
23625: PUSH
23626: LD_VAR 0 4
23630: PPUSH
23631: CALL_OW 269
23635: PUSH
23636: EMPTY
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: PUSH
23645: EMPTY
23646: LIST
23647: ADD
23648: ST_TO_ADDR
23649: GO 23836
// if GetBType ( i ) = b_factory then
23651: LD_VAR 0 4
23655: PPUSH
23656: CALL_OW 266
23660: PUSH
23661: LD_INT 3
23663: EQUAL
23664: IFFALSE 23754
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
23666: LD_ADDR_VAR 0 2
23670: PUSH
23671: LD_VAR 0 2
23675: PPUSH
23676: LD_INT 1
23678: PPUSH
23679: LD_VAR 0 4
23683: PPUSH
23684: CALL_OW 266
23688: PUSH
23689: LD_VAR 0 4
23693: PPUSH
23694: CALL_OW 250
23698: PUSH
23699: LD_VAR 0 4
23703: PPUSH
23704: CALL_OW 251
23708: PUSH
23709: LD_VAR 0 4
23713: PPUSH
23714: CALL_OW 254
23718: PUSH
23719: LD_VAR 0 4
23723: PPUSH
23724: CALL_OW 267
23728: PUSH
23729: LD_VAR 0 4
23733: PPUSH
23734: CALL_OW 248
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: PPUSH
23747: CALL_OW 2
23751: ST_TO_ADDR
23752: GO 23836
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23754: LD_ADDR_VAR 0 2
23758: PUSH
23759: LD_VAR 0 2
23763: PUSH
23764: LD_VAR 0 4
23768: PPUSH
23769: CALL_OW 266
23773: PUSH
23774: LD_VAR 0 4
23778: PPUSH
23779: CALL_OW 250
23783: PUSH
23784: LD_VAR 0 4
23788: PPUSH
23789: CALL_OW 251
23793: PUSH
23794: LD_VAR 0 4
23798: PPUSH
23799: CALL_OW 254
23803: PUSH
23804: LD_VAR 0 4
23808: PPUSH
23809: CALL_OW 267
23813: PUSH
23814: LD_VAR 0 4
23818: PPUSH
23819: CALL_OW 248
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: ADD
23835: ST_TO_ADDR
// end ;
23836: GO 23400
23838: POP
23839: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
23840: LD_VAR 0 2
23844: PPUSH
23845: LD_STRING 10_EpsilonBase
23847: PPUSH
23848: CALL_OW 39
// end ; end_of_file
23852: LD_VAR 0 1
23856: RET
// every 0 0$1 trigger IsDead ( JMM ) do
23857: LD_EXP 1
23861: PPUSH
23862: CALL_OW 301
23866: IFFALSE 23878
23868: GO 23870
23870: DISABLE
// YouLost ( JMM ) ; end_of_file
23871: LD_STRING JMM
23873: PPUSH
23874: CALL_OW 104
23878: END
// every 0 0$30 do
23879: GO 23881
23881: DISABLE
// begin enable ;
23882: ENABLE
// if cratesSpawned < 6 then
23883: LD_EXP 52
23887: PUSH
23888: LD_INT 6
23890: LESS
23891: IFFALSE 23928
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23893: LD_INT 3
23895: PPUSH
23896: LD_INT 5
23898: PPUSH
23899: CALL_OW 12
23903: PPUSH
23904: LD_INT 16
23906: PPUSH
23907: LD_INT 1
23909: PPUSH
23910: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23914: LD_ADDR_EXP 52
23918: PUSH
23919: LD_EXP 52
23923: PUSH
23924: LD_INT 1
23926: PLUS
23927: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
23928: LD_EXP 52
23932: PUSH
23933: LD_INT 6
23935: GREATEREQUAL
23936: PUSH
23937: LD_EXP 52
23941: PUSH
23942: LD_INT 12
23944: LESS
23945: AND
23946: IFFALSE 23990
// begin wait ( 0 0$30 ) ;
23948: LD_INT 1050
23950: PPUSH
23951: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23955: LD_INT 3
23957: PPUSH
23958: LD_INT 5
23960: PPUSH
23961: CALL_OW 12
23965: PPUSH
23966: LD_INT 16
23968: PPUSH
23969: LD_INT 1
23971: PPUSH
23972: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23976: LD_ADDR_EXP 52
23980: PUSH
23981: LD_EXP 52
23985: PUSH
23986: LD_INT 1
23988: PLUS
23989: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
23990: LD_EXP 52
23994: PUSH
23995: LD_INT 12
23997: GREATEREQUAL
23998: IFFALSE 24042
// begin wait ( 1 1$0 ) ;
24000: LD_INT 2100
24002: PPUSH
24003: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24007: LD_INT 3
24009: PPUSH
24010: LD_INT 5
24012: PPUSH
24013: CALL_OW 12
24017: PPUSH
24018: LD_INT 16
24020: PPUSH
24021: LD_INT 1
24023: PPUSH
24024: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24028: LD_ADDR_EXP 52
24032: PUSH
24033: LD_EXP 52
24037: PUSH
24038: LD_INT 1
24040: PLUS
24041: ST_TO_ADDR
// end ; end ;
24042: END
