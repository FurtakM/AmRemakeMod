// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24623 0 0
// PrepareDifficulty ;
 250: CALL 9956 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19554 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19554 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19554 0 2
// PrepareArabianCommander ;
 354: CALL 3128 0 0
// PrepareArabian ;
 358: CALL 3180 0 0
// BuildArabianBase ;
 362: CALL 12655 0 0
// TameApemans ;
 366: CALL 18519 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9550 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9550 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9550 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9550 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9550 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9550 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9550 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9550 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9550 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9550 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9550 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9550 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9550 0 2
1831: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1832: LD_ADDR_EXP 14
1836: PUSH
1837: LD_STRING Khatam
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: CALL 9550 0 2
1847: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1848: LD_ADDR_EXP 15
1852: PUSH
1853: LD_STRING Gladstone
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 9550 0 2
1863: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1864: LD_ADDR_EXP 17
1868: PUSH
1869: LD_STRING DeltaDoctor
1871: PPUSH
1872: LD_INT 1
1874: PPUSH
1875: CALL 9550 0 2
1879: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1880: LD_STRING 08_Frank
1882: PPUSH
1883: CALL_OW 28
1887: PUSH
1888: LD_INT 1
1890: EQUAL
1891: IFFALSE 1909
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1893: LD_ADDR_EXP 8
1897: PUSH
1898: LD_STRING Yamoko
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL 9550 0 2
1908: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1909: LD_ADDR_EXP 22
1913: PUSH
1914: LD_STRING 09_others
1916: PPUSH
1917: CALL_OW 31
1921: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1922: LD_ADDR_EXP 23
1926: PUSH
1927: LD_STRING 09_apes
1929: PPUSH
1930: CALL_OW 31
1934: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1935: LD_EXP 11
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_INT 0
1945: PPUSH
1946: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1950: LD_EXP 12
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1965: LD_EXP 13
1969: PPUSH
1970: LD_INT 1
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1980: LD_EXP 14
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1995: LD_EXP 15
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2010: LD_EXP 17
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2025: LD_EXP 8
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2040: LD_EXP 11
2044: PUSH
2045: LD_EXP 14
2049: PUSH
2050: LD_EXP 12
2054: PUSH
2055: LD_EXP 15
2059: PUSH
2060: LD_EXP 17
2064: PUSH
2065: LD_EXP 13
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 336
// if others09 > 2 then
2085: LD_EXP 22
2089: PUSH
2090: LD_INT 2
2092: GREATER
2093: IFFALSE 2156
// begin for i := 1 to 3 do
2095: LD_ADDR_VAR 0 2
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_INT 3
2107: PUSH
2108: FOR_TO
2109: IFFALSE 2152
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2111: LD_EXP 22
2115: PUSH
2116: LD_VAR 0 2
2120: ARRAY
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 0
2127: PPUSH
2128: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2132: LD_EXP 22
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 336
// end ;
2150: GO 2108
2152: POP
2153: POP
// end else
2154: GO 2200
// begin for i in others09 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: LD_EXP 22
2165: PUSH
2166: FOR_IN
2167: IFFALSE 2198
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetClass ( i , 2 ) ;
2184: LD_VAR 0 2
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 336
// end ;
2196: GO 2166
2198: POP
2199: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2200: LD_INT 22
2202: PUSH
2203: LD_INT 4
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 25
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PPUSH
2224: CALL_OW 69
2228: PUSH
2229: LD_INT 0
2231: EQUAL
2232: IFFALSE 2350
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: LD_INT 22
2241: PUSH
2242: LD_INT 4
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 25
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 69
2267: PUSH
2268: LD_EXP 11
2272: PUSH
2273: LD_EXP 14
2277: PUSH
2278: LD_EXP 12
2282: PUSH
2283: LD_EXP 15
2287: PUSH
2288: LD_EXP 17
2292: PUSH
2293: LD_EXP 13
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: DIFF
2306: ST_TO_ADDR
// if not tmp then
2307: LD_VAR 0 3
2311: NOT
2312: IFFALSE 2334
// begin if Denis then
2314: LD_EXP 12
2318: IFFALSE 2332
// SetClass ( Denis , 2 ) ;
2320: LD_EXP 12
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 336
// exit ;
2332: GO 2500
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2334: LD_VAR 0 3
2338: PUSH
2339: LD_INT 1
2341: ARRAY
2342: PPUSH
2343: LD_INT 2
2345: PPUSH
2346: CALL_OW 336
// end ; for i in ape09 do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: FOR_IN
2361: IFFALSE 2380
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
2378: GO 2360
2380: POP
2381: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2382: LD_INT 22
2384: PUSH
2385: LD_INT 4
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 25
2394: PUSH
2395: LD_INT 2
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PPUSH
2406: CALL_OW 69
2410: PPUSH
2411: LD_INT 0
2413: PPUSH
2414: LD_INT 101
2416: PPUSH
2417: LD_INT 30
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL_OW 205
// uc_side = 1 ;
2427: LD_ADDR_OWVAR 20
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// hc_class := 1 ;
2435: LD_ADDR_OWVAR 28
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// hc_sex := sex_female ;
2443: LD_ADDR_OWVAR 27
2447: PUSH
2448: LD_INT 2
2450: ST_TO_ADDR
// hc_gallery :=  ;
2451: LD_ADDR_OWVAR 33
2455: PUSH
2456: LD_STRING 
2458: ST_TO_ADDR
// hc_name :=  ;
2459: LD_ADDR_OWVAR 26
2463: PUSH
2464: LD_STRING 
2466: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2467: LD_ADDR_OWVAR 31
2471: PUSH
2472: LD_INT 1
2474: PUSH
2475: LD_INT 7
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: ST_TO_ADDR
// AmScout = CreateHuman ;
2490: LD_ADDR_EXP 18
2494: PUSH
2495: CALL_OW 44
2499: ST_TO_ADDR
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareCornell ; begin
2505: LD_INT 0
2507: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2508: LD_INT 4
2510: PPUSH
2511: LD_INT 4
2513: PPUSH
2514: CALL_OW 343
// uc_side = 4 ;
2518: LD_ADDR_OWVAR 20
2522: PUSH
2523: LD_INT 4
2525: ST_TO_ADDR
// uc_nation = 1 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2534: LD_ADDR_EXP 19
2538: PUSH
2539: LD_STRING 03_Cornel
2541: PPUSH
2542: LD_INT 1
2544: PPUSH
2545: CALL 9550 0 2
2549: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2550: LD_EXP 19
2554: PPUSH
2555: LD_INT 8
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2565: LD_EXP 19
2569: PPUSH
2570: LD_INT 350
2572: PPUSH
2573: CALL_OW 234
// if IsInUnit ( JMM ) then
2577: LD_EXP 1
2581: PPUSH
2582: CALL_OW 310
2586: IFFALSE 2629
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2588: LD_EXP 19
2592: PPUSH
2593: LD_EXP 1
2597: PPUSH
2598: CALL_OW 310
2602: PPUSH
2603: CALL_OW 250
2607: PPUSH
2608: LD_EXP 1
2612: PPUSH
2613: CALL_OW 310
2617: PPUSH
2618: CALL_OW 251
2622: PPUSH
2623: CALL_OW 111
2627: GO 2658
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2629: LD_EXP 19
2633: PPUSH
2634: LD_EXP 1
2638: PPUSH
2639: CALL_OW 250
2643: PPUSH
2644: LD_EXP 1
2648: PPUSH
2649: CALL_OW 251
2653: PPUSH
2654: CALL_OW 111
// end ; end_of_file
2658: LD_VAR 0 1
2662: RET
// export function PrepareRussians ; var i , un ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
2667: PPUSH
// uc_side = 3 ;
2668: LD_ADDR_OWVAR 20
2672: PUSH
2673: LD_INT 3
2675: ST_TO_ADDR
// uc_nation = 3 ;
2676: LD_ADDR_OWVAR 21
2680: PUSH
2681: LD_INT 3
2683: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2684: LD_ADDR_EXP 25
2688: PUSH
2689: LD_STRING Tsaritsyn
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: CALL 9550 0 2
2699: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2700: LD_EXP 25
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 49
// for i = 1 to 14 do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_INT 14
2727: PUSH
2728: FOR_TO
2729: IFFALSE 2815
// begin uc_side = 3 ;
2731: LD_ADDR_OWVAR 20
2735: PUSH
2736: LD_INT 3
2738: ST_TO_ADDR
// uc_nation = 3 ;
2739: LD_ADDR_OWVAR 21
2743: PUSH
2744: LD_INT 3
2746: ST_TO_ADDR
// hc_gallery =  ;
2747: LD_ADDR_OWVAR 33
2751: PUSH
2752: LD_STRING 
2754: ST_TO_ADDR
// hc_name =  ;
2755: LD_ADDR_OWVAR 26
2759: PUSH
2760: LD_STRING 
2762: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2763: LD_INT 0
2765: PPUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_EXP 36
2773: PPUSH
2774: LD_EXP 37
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: CALL_OW 380
// un = CreateHuman ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: CALL_OW 44
2797: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2798: LD_VAR 0 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 49
// end ;
2813: GO 2728
2815: POP
2816: POP
// for i = 1 to 6 do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 6
2829: PUSH
2830: FOR_TO
2831: IFFALSE 2917
// begin uc_side = 3 ;
2833: LD_ADDR_OWVAR 20
2837: PUSH
2838: LD_INT 3
2840: ST_TO_ADDR
// uc_nation = 3 ;
2841: LD_ADDR_OWVAR 21
2845: PUSH
2846: LD_INT 3
2848: ST_TO_ADDR
// hc_gallery =  ;
2849: LD_ADDR_OWVAR 33
2853: PUSH
2854: LD_STRING 
2856: ST_TO_ADDR
// hc_name =  ;
2857: LD_ADDR_OWVAR 26
2861: PUSH
2862: LD_STRING 
2864: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 2
2870: PPUSH
2871: LD_EXP 36
2875: PPUSH
2876: LD_EXP 37
2880: PPUSH
2881: CALL_OW 12
2885: PPUSH
2886: CALL_OW 380
// un = CreateHuman ;
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_INT 3
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 49
// end ;
2915: GO 2830
2917: POP
2918: POP
// for i = 1 to 6 do
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: DOUBLE
2925: LD_INT 1
2927: DEC
2928: ST_TO_ADDR
2929: LD_INT 6
2931: PUSH
2932: FOR_TO
2933: IFFALSE 3019
// begin uc_side = 3 ;
2935: LD_ADDR_OWVAR 20
2939: PUSH
2940: LD_INT 3
2942: ST_TO_ADDR
// uc_nation = 3 ;
2943: LD_ADDR_OWVAR 21
2947: PUSH
2948: LD_INT 3
2950: ST_TO_ADDR
// hc_gallery =  ;
2951: LD_ADDR_OWVAR 33
2955: PUSH
2956: LD_STRING 
2958: ST_TO_ADDR
// hc_name =  ;
2959: LD_ADDR_OWVAR 26
2963: PUSH
2964: LD_STRING 
2966: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2967: LD_INT 0
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_EXP 36
2977: PPUSH
2978: LD_EXP 37
2982: PPUSH
2983: CALL_OW 12
2987: PPUSH
2988: CALL_OW 380
// un = CreateHuman ;
2992: LD_ADDR_VAR 0 3
2996: PUSH
2997: CALL_OW 44
3001: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 3
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 49
// end ;
3017: GO 2932
3019: POP
3020: POP
// for i = 1 to 4 do
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: DOUBLE
3027: LD_INT 1
3029: DEC
3030: ST_TO_ADDR
3031: LD_INT 4
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3121
// begin uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// uc_nation = 3 ;
3045: LD_ADDR_OWVAR 21
3049: PUSH
3050: LD_INT 3
3052: ST_TO_ADDR
// hc_gallery =  ;
3053: LD_ADDR_OWVAR 33
3057: PUSH
3058: LD_STRING 
3060: ST_TO_ADDR
// hc_name =  ;
3061: LD_ADDR_OWVAR 26
3065: PUSH
3066: LD_STRING 
3068: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3069: LD_INT 0
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_EXP 36
3079: PPUSH
3080: LD_EXP 37
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: CALL_OW 380
// un = CreateHuman ;
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: CALL_OW 44
3103: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3104: LD_VAR 0 3
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// end ;
3119: GO 3034
3121: POP
3122: POP
// end ; end_of_file
3123: LD_VAR 0 1
3127: RET
// export function PrepareArabianCommander ; begin
3128: LD_INT 0
3130: PPUSH
// uc_side = 2 ;
3131: LD_ADDR_OWVAR 20
3135: PUSH
3136: LD_INT 2
3138: ST_TO_ADDR
// uc_nation = 2 ;
3139: LD_ADDR_OWVAR 21
3143: PUSH
3144: LD_INT 2
3146: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3147: LD_ADDR_EXP 26
3151: PUSH
3152: LD_STRING Dietrich
3154: PPUSH
3155: CALL_OW 25
3159: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3160: LD_EXP 26
3164: PPUSH
3165: LD_INT 4
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 49
// end ;
3175: LD_VAR 0 1
3179: RET
// export function PrepareArabian ; var i , un , veh ; begin
3180: LD_INT 0
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
// uc_side := 2 ;
3186: LD_ADDR_OWVAR 20
3190: PUSH
3191: LD_INT 2
3193: ST_TO_ADDR
// uc_nation := 2 ;
3194: LD_ADDR_OWVAR 21
3198: PUSH
3199: LD_INT 2
3201: ST_TO_ADDR
// if not Ahmed then
3202: LD_EXP 27
3206: NOT
3207: IFFALSE 3275
// begin InitHc ;
3209: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 1
3218: PPUSH
3219: LD_EXP 36
3223: PPUSH
3224: LD_EXP 37
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: PPUSH
3233: CALL_OW 12
3237: PPUSH
3238: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3242: LD_ADDR_OWVAR 26
3246: PUSH
3247: LD_STRING Ahmed Abbasid
3249: ST_TO_ADDR
// Ahmed := CreateHuman ;
3250: LD_ADDR_EXP 27
3254: PUSH
3255: CALL_OW 44
3259: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3260: LD_EXP 27
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: LD_INT 0
3270: PPUSH
3271: CALL_OW 49
// end ; for i = 1 to 3 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 3
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3375
// begin uc_side = 2 ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_INT 2
3298: ST_TO_ADDR
// uc_nation = 2 ;
3299: LD_ADDR_OWVAR 21
3303: PUSH
3304: LD_INT 2
3306: ST_TO_ADDR
// hc_gallery =  ;
3307: LD_ADDR_OWVAR 33
3311: PUSH
3312: LD_STRING 
3314: ST_TO_ADDR
// hc_name =  ;
3315: LD_ADDR_OWVAR 26
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3323: LD_INT 0
3325: PPUSH
3326: LD_INT 1
3328: PPUSH
3329: LD_EXP 36
3333: PPUSH
3334: LD_EXP 37
3338: PPUSH
3339: CALL_OW 12
3343: PPUSH
3344: CALL_OW 380
// un = CreateHuman ;
3348: LD_ADDR_VAR 0 3
3352: PUSH
3353: CALL_OW 44
3357: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
// end ;
3373: GO 3288
3375: POP
3376: POP
// for i = 1 to 6 do
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: DOUBLE
3383: LD_INT 1
3385: DEC
3386: ST_TO_ADDR
3387: LD_INT 6
3389: PUSH
3390: FOR_TO
3391: IFFALSE 3477
// begin uc_side = 2 ;
3393: LD_ADDR_OWVAR 20
3397: PUSH
3398: LD_INT 2
3400: ST_TO_ADDR
// uc_nation = 2 ;
3401: LD_ADDR_OWVAR 21
3405: PUSH
3406: LD_INT 2
3408: ST_TO_ADDR
// hc_gallery =  ;
3409: LD_ADDR_OWVAR 33
3413: PUSH
3414: LD_STRING 
3416: ST_TO_ADDR
// hc_name =  ;
3417: LD_ADDR_OWVAR 26
3421: PUSH
3422: LD_STRING 
3424: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3425: LD_INT 0
3427: PPUSH
3428: LD_INT 2
3430: PPUSH
3431: LD_EXP 36
3435: PPUSH
3436: LD_EXP 37
3440: PPUSH
3441: CALL_OW 12
3445: PPUSH
3446: CALL_OW 380
// un = CreateHuman ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: CALL_OW 44
3459: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_INT 4
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 49
// end ;
3475: GO 3390
3477: POP
3478: POP
// for i = 1 to 6 do
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_INT 6
3491: PUSH
3492: FOR_TO
3493: IFFALSE 3579
// begin uc_side = 2 ;
3495: LD_ADDR_OWVAR 20
3499: PUSH
3500: LD_INT 2
3502: ST_TO_ADDR
// uc_nation = 2 ;
3503: LD_ADDR_OWVAR 21
3507: PUSH
3508: LD_INT 2
3510: ST_TO_ADDR
// hc_gallery =  ;
3511: LD_ADDR_OWVAR 33
3515: PUSH
3516: LD_STRING 
3518: ST_TO_ADDR
// hc_name =  ;
3519: LD_ADDR_OWVAR 26
3523: PUSH
3524: LD_STRING 
3526: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3527: LD_INT 0
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: LD_EXP 36
3537: PPUSH
3538: LD_EXP 37
3542: PPUSH
3543: CALL_OW 12
3547: PPUSH
3548: CALL_OW 380
// un = CreateHuman ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: CALL_OW 44
3561: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3562: LD_VAR 0 3
3566: PPUSH
3567: LD_INT 4
3569: PPUSH
3570: LD_INT 0
3572: PPUSH
3573: CALL_OW 49
// end ;
3577: GO 3492
3579: POP
3580: POP
// for i = 1 to 4 do
3581: LD_ADDR_VAR 0 2
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 4
3593: PUSH
3594: FOR_TO
3595: IFFALSE 3681
// begin uc_side = 2 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 2
3604: ST_TO_ADDR
// uc_nation = 2 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 2
3612: ST_TO_ADDR
// hc_gallery =  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// hc_name =  ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 4
3634: PPUSH
3635: LD_EXP 36
3639: PPUSH
3640: LD_EXP 37
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: CALL_OW 380
// un = CreateHuman ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: CALL_OW 44
3663: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 49
// end ;
3679: GO 3594
3681: POP
3682: POP
// for i = 1 to 2 do
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: DOUBLE
3689: LD_INT 1
3691: DEC
3692: ST_TO_ADDR
3693: LD_INT 2
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3827
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 22
3706: PUSH
3707: LD_INT 2
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 21
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 58
3726: PUSH
3727: EMPTY
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: ST_TO_ADDR
// uc_side = 2 ;
3740: LD_ADDR_OWVAR 20
3744: PUSH
3745: LD_INT 2
3747: ST_TO_ADDR
// uc_nation = 2 ;
3748: LD_ADDR_OWVAR 21
3752: PUSH
3753: LD_INT 2
3755: ST_TO_ADDR
// hc_gallery =  ;
3756: LD_ADDR_OWVAR 33
3760: PUSH
3761: LD_STRING 
3763: ST_TO_ADDR
// hc_name =  ;
3764: LD_ADDR_OWVAR 26
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3772: LD_INT 0
3774: PPUSH
3775: LD_INT 3
3777: PPUSH
3778: LD_EXP 36
3782: PPUSH
3783: LD_EXP 37
3787: PPUSH
3788: CALL_OW 12
3792: PPUSH
3793: CALL_OW 380
// un = CreateHuman ;
3797: LD_ADDR_VAR 0 3
3801: PUSH
3802: CALL_OW 44
3806: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3807: LD_VAR 0 3
3811: PPUSH
3812: LD_VAR 0 4
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: PPUSH
3821: CALL_OW 52
// end ;
3825: GO 3696
3827: POP
3828: POP
// end ;
3829: LD_VAR 0 1
3833: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3834: LD_INT 0
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
// for i := 1 to 2 do
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: DOUBLE
3848: LD_INT 1
3850: DEC
3851: ST_TO_ADDR
3852: LD_INT 2
3854: PUSH
3855: FOR_TO
3856: IFFALSE 3982
// begin uc_side = 5 ;
3858: LD_ADDR_OWVAR 20
3862: PUSH
3863: LD_INT 5
3865: ST_TO_ADDR
// uc_nation = 2 ;
3866: LD_ADDR_OWVAR 21
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// vc_chassis := 31 ;
3874: LD_ADDR_OWVAR 37
3878: PUSH
3879: LD_INT 31
3881: ST_TO_ADDR
// vc_control := control_rider ;
3882: LD_ADDR_OWVAR 38
3886: PUSH
3887: LD_INT 4
3889: ST_TO_ADDR
// animal := CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 7
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// hc_gallery =  ;
3915: LD_ADDR_OWVAR 33
3919: PUSH
3920: LD_STRING 
3922: ST_TO_ADDR
// hc_name =  ;
3923: LD_ADDR_OWVAR 26
3927: PUSH
3928: LD_STRING 
3930: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3931: LD_INT 0
3933: PPUSH
3934: LD_INT 11
3936: PPUSH
3937: LD_EXP 36
3941: PPUSH
3942: LD_EXP 37
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 380
// un = CreateHuman ;
3956: LD_ADDR_VAR 0 4
3960: PUSH
3961: CALL_OW 44
3965: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3966: LD_VAR 0 4
3970: PPUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: CALL_OW 52
// end ;
3980: GO 3855
3982: POP
3983: POP
// repeat wait ( 0 0$1 ) ;
3984: LD_INT 35
3986: PPUSH
3987: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3991: LD_ADDR_VAR 0 5
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 69
4010: PPUSH
4011: LD_VAR 0 2
4015: PPUSH
4016: CALL_OW 74
4020: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4021: LD_ADDR_VAR 0 6
4025: PUSH
4026: LD_INT 22
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 59
4041: PUSH
4042: EMPTY
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 2
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: PPUSH
4078: CALL_OW 69
4082: PPUSH
4083: LD_VAR 0 2
4087: PPUSH
4088: CALL_OW 74
4092: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 25
4110: PUSH
4111: LD_INT 11
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 69
4126: PUSH
4127: FOR_IN
4128: IFFALSE 4198
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4130: LD_VAR 0 2
4134: PPUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: CALL_OW 296
4144: PUSH
4145: LD_INT 8
4147: PLUS
4148: PUSH
4149: LD_VAR 0 2
4153: PPUSH
4154: LD_VAR 0 6
4158: PPUSH
4159: CALL_OW 296
4163: LESS
4164: IFFALSE 4182
// ComAttackUnit ( i , target1 ) else
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: CALL_OW 115
4180: GO 4196
// ComAttackUnit ( i , target2 ) ;
4182: LD_VAR 0 2
4186: PPUSH
4187: LD_VAR 0 6
4191: PPUSH
4192: CALL_OW 115
// end ;
4196: GO 4127
4198: POP
4199: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4200: LD_INT 22
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 25
4212: PUSH
4213: LD_INT 11
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 69
4228: PUSH
4229: LD_INT 0
4231: EQUAL
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PUSH
4248: LD_INT 0
4250: EQUAL
4251: OR
4252: IFFALSE 3984
// end ; end_of_file
4254: LD_VAR 0 1
4258: RET
// every 1 do
4259: GO 4261
4261: DISABLE
// begin InGameOn ;
4262: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4266: LD_INT 1
4268: PPUSH
4269: LD_INT 19
4271: PPUSH
4272: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4276: LD_EXP 11
4280: PPUSH
4281: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4285: LD_INT 22
4287: PUSH
4288: LD_INT 4
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 25
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: IFFALSE 4361
// begin repeat wait ( 0 0$1 ) ;
4315: LD_INT 35
4317: PPUSH
4318: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4322: LD_INT 22
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 30
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PPUSH
4346: CALL_OW 69
4350: IFFALSE 4315
// Wait ( 0 0$1 ) ;
4352: LD_INT 35
4354: PPUSH
4355: CALL_OW 67
// end else
4359: GO 4368
// Wait ( 0 0$3 ) ;
4361: LD_INT 105
4363: PPUSH
4364: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4368: LD_EXP 1
4372: PPUSH
4373: CALL_OW 310
4377: PPUSH
4378: CALL_OW 85
// Wait ( 0 0$1 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// if IsOk ( Gary ) then
4389: LD_EXP 10
4393: PPUSH
4394: CALL_OW 302
4398: IFFALSE 4436
// begin Say ( Gary , D2-Gary-1 ) ;
4400: LD_EXP 10
4404: PPUSH
4405: LD_STRING D2-Gary-1
4407: PPUSH
4408: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4412: LD_EXP 1
4416: PPUSH
4417: LD_STRING D2-JMM-1
4419: PPUSH
4420: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4424: LD_EXP 10
4428: PPUSH
4429: LD_STRING D2-Gary-2
4431: PPUSH
4432: CALL_OW 88
// end ; InGameOff ;
4436: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4440: LD_STRING M1
4442: PPUSH
4443: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4447: LD_INT 38
4449: PPUSH
4450: LD_INT 1
4452: PPUSH
4453: LD_INT 100
4455: PPUSH
4456: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4460: LD_INT 47
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 50
4468: PPUSH
4469: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4473: LD_INT 47
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_INT 50
4481: PPUSH
4482: CALL_OW 291
// SaveForQuickRestart ;
4486: CALL_OW 22
// end ;
4490: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4491: LD_EXP 1
4495: PPUSH
4496: LD_EXP 11
4500: PPUSH
4501: CALL_OW 296
4505: PUSH
4506: LD_INT 15
4508: LESS
4509: IFFALSE 4975
4511: GO 4513
4513: DISABLE
// begin InGameOn ;
4514: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4518: LD_EXP 1
4522: PPUSH
4523: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4527: LD_EXP 1
4531: PPUSH
4532: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4536: LD_EXP 1
4540: PPUSH
4541: LD_EXP 11
4545: PPUSH
4546: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4550: LD_INT 35
4552: PPUSH
4553: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4557: LD_EXP 11
4561: PUSH
4562: LD_EXP 13
4566: PUSH
4567: LD_EXP 12
4571: PUSH
4572: LD_EXP 14
4576: PUSH
4577: LD_EXP 8
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PPUSH
4589: LD_EXP 1
4593: PPUSH
4594: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4598: LD_EXP 1
4602: PPUSH
4603: LD_EXP 11
4607: PPUSH
4608: CALL_OW 296
4612: PUSH
4613: LD_INT 5
4615: LESS
4616: IFFALSE 4550
// ComTurnUnit ( JMM , Simms ) ;
4618: LD_EXP 1
4622: PPUSH
4623: LD_EXP 11
4627: PPUSH
4628: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4632: LD_EXP 11
4636: PUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_EXP 12
4646: PUSH
4647: LD_EXP 14
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: LD_EXP 1
4662: PPUSH
4663: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4667: LD_EXP 1
4671: PUSH
4672: LD_EXP 11
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PPUSH
4681: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4685: LD_EXP 11
4689: PPUSH
4690: LD_STRING D2a-Sim-1
4692: PPUSH
4693: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4697: LD_EXP 1
4701: PPUSH
4702: LD_STRING D2a-JMM-1
4704: PPUSH
4705: CALL_OW 88
// if IsOk ( Joan ) then
4709: LD_EXP 13
4713: PPUSH
4714: CALL_OW 302
4718: IFFALSE 4770
// begin ComTurnUnit ( JMM , Joan ) ;
4720: LD_EXP 1
4724: PPUSH
4725: LD_EXP 13
4729: PPUSH
4730: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4734: LD_EXP 13
4738: PPUSH
4739: LD_STRING D2b-Joan-1
4741: PPUSH
4742: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4746: LD_EXP 1
4750: PPUSH
4751: LD_STRING D2b-JMM-1
4753: PPUSH
4754: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4758: LD_EXP 13
4762: PPUSH
4763: LD_STRING D2b-Joan-2
4765: PPUSH
4766: CALL_OW 88
// end ; if IsOk ( Denis ) then
4770: LD_EXP 12
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4807
// begin ComTurnUnit ( JMM , Denis ) ;
4781: LD_EXP 1
4785: PPUSH
4786: LD_EXP 12
4790: PPUSH
4791: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4795: LD_EXP 12
4799: PPUSH
4800: LD_STRING D2c-Den-1
4802: PPUSH
4803: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4807: LD_EXP 8
4811: PPUSH
4812: CALL_OW 302
4816: IFFALSE 4885
// begin repeat wait ( 0 0$1 ) ;
4818: LD_INT 35
4820: PPUSH
4821: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4825: LD_EXP 8
4829: PPUSH
4830: LD_EXP 1
4834: PPUSH
4835: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4839: LD_EXP 1
4843: PPUSH
4844: LD_EXP 8
4848: PPUSH
4849: CALL_OW 296
4853: PUSH
4854: LD_INT 5
4856: LESS
4857: IFFALSE 4818
// ComTurnUnit ( JMM , Kikuchi ) ;
4859: LD_EXP 1
4863: PPUSH
4864: LD_EXP 8
4868: PPUSH
4869: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4873: LD_EXP 8
4877: PPUSH
4878: LD_STRING D3b-Yam-1
4880: PPUSH
4881: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4885: LD_EXP 14
4889: PPUSH
4890: CALL_OW 302
4894: IFFALSE 4934
// begin ComTurnUnit ( JMM , Khatam ) ;
4896: LD_EXP 1
4900: PPUSH
4901: LD_EXP 14
4905: PPUSH
4906: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4910: LD_EXP 1
4914: PPUSH
4915: LD_STRING D2c-JMM-1
4917: PPUSH
4918: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4922: LD_EXP 14
4926: PPUSH
4927: LD_STRING D2c-Khat-1
4929: PPUSH
4930: CALL_OW 88
// end ; InGameOff ;
4934: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4938: LD_INT 22
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4960: LD_STRING M1a
4962: PPUSH
4963: CALL_OW 337
// joinEpsilon = 1 ;
4967: LD_ADDR_EXP 29
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4976: LD_INT 38
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 289
4986: PUSH
4987: LD_INT 0
4989: EQUAL
4990: PUSH
4991: LD_INT 47
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL_OW 289
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: PUSH
5007: LD_INT 47
5009: PPUSH
5010: LD_INT 2
5012: PPUSH
5013: CALL_OW 289
5017: PUSH
5018: LD_INT 0
5020: EQUAL
5021: AND
5022: IFFALSE 5047
5024: GO 5026
5026: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5027: LD_INT 38
5029: PUSH
5030: LD_INT 47
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 62
5039: PPUSH
5040: LD_INT 6
5042: PPUSH
5043: CALL_OW 111
5047: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5048: LD_EXP 61
5052: PUSH
5053: LD_INT 1
5055: EQUAL
5056: IFFALSE 6188
5058: GO 5060
5060: DISABLE
5061: LD_INT 0
5063: PPUSH
5064: PPUSH
5065: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5066: LD_ADDR_VAR 0 1
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 25
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: PPUSH
5106: CALL_OW 69
5110: PUSH
5111: LD_EXP 1
5115: PUSH
5116: LD_EXP 2
5120: PUSH
5121: LD_EXP 3
5125: PUSH
5126: LD_EXP 4
5130: PUSH
5131: LD_EXP 5
5135: PUSH
5136: LD_EXP 6
5140: PUSH
5141: LD_EXP 7
5145: PUSH
5146: LD_EXP 8
5150: PUSH
5151: LD_EXP 9
5155: PUSH
5156: LD_EXP 10
5160: PUSH
5161: LD_EXP 11
5165: PUSH
5166: LD_EXP 12
5170: PUSH
5171: LD_EXP 13
5175: PUSH
5176: LD_EXP 14
5180: PUSH
5181: LD_EXP 15
5185: PUSH
5186: LD_EXP 16
5190: PUSH
5191: LD_EXP 17
5195: PUSH
5196: LD_EXP 18
5200: PUSH
5201: LD_EXP 19
5205: PUSH
5206: LD_EXP 24
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: DIFF
5233: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: LD_INT 22
5241: PUSH
5242: LD_INT 1
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 26
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 2
5261: PUSH
5262: LD_INT 25
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 25
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 25
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: CALL_OW 69
5307: PUSH
5308: LD_EXP 1
5312: PUSH
5313: LD_EXP 2
5317: PUSH
5318: LD_EXP 3
5322: PUSH
5323: LD_EXP 4
5327: PUSH
5328: LD_EXP 5
5332: PUSH
5333: LD_EXP 6
5337: PUSH
5338: LD_EXP 7
5342: PUSH
5343: LD_EXP 8
5347: PUSH
5348: LD_EXP 9
5352: PUSH
5353: LD_EXP 10
5357: PUSH
5358: LD_EXP 11
5362: PUSH
5363: LD_EXP 12
5367: PUSH
5368: LD_EXP 13
5372: PUSH
5373: LD_EXP 14
5377: PUSH
5378: LD_EXP 15
5382: PUSH
5383: LD_EXP 16
5387: PUSH
5388: LD_EXP 17
5392: PUSH
5393: LD_EXP 18
5397: PUSH
5398: LD_EXP 19
5402: PUSH
5403: LD_EXP 24
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: DIFF
5430: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5431: LD_EXP 10
5435: PUSH
5436: LD_VAR 0 2
5440: OR
5441: PUSH
5442: LD_EXP 17
5446: PUSH
5447: LD_VAR 0 1
5451: OR
5452: AND
5453: IFFALSE 5672
// begin DialogueOn ;
5455: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5459: LD_EXP 17
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5484
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5470: LD_EXP 17
5474: PPUSH
5475: LD_STRING D3-Sci1-1
5477: PPUSH
5478: CALL_OW 88
5482: GO 5496
// Say ( tmp1 , D3-Sci1-1 ) ;
5484: LD_VAR 0 1
5488: PPUSH
5489: LD_STRING D3-Sci1-1
5491: PPUSH
5492: CALL_OW 88
// if IsOk ( Gary ) then
5496: LD_EXP 10
5500: PPUSH
5501: CALL_OW 302
5505: IFFALSE 5521
// Say ( Gary , D3-Gary-1 ) else
5507: LD_EXP 10
5511: PPUSH
5512: LD_STRING D3-Gary-1
5514: PPUSH
5515: CALL_OW 88
5519: GO 5533
// Say ( tmp2 , D3-Gary-1 ) ;
5521: LD_VAR 0 2
5525: PPUSH
5526: LD_STRING D3-Gary-1
5528: PPUSH
5529: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5533: LD_EXP 17
5537: PPUSH
5538: CALL_OW 302
5542: IFFALSE 5558
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5544: LD_EXP 17
5548: PPUSH
5549: LD_STRING D3-Sci1-2
5551: PPUSH
5552: CALL_OW 88
5556: GO 5570
// Say ( tmp1 , D3-Sci1-2 ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_STRING D3-Sci1-2
5565: PPUSH
5566: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5570: LD_EXP 1
5574: PPUSH
5575: LD_STRING D3-JMM-2
5577: PPUSH
5578: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5582: LD_EXP 17
5586: PPUSH
5587: CALL_OW 302
5591: IFFALSE 5607
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5593: LD_EXP 17
5597: PPUSH
5598: LD_STRING D3-Sci1-3
5600: PPUSH
5601: CALL_OW 88
5605: GO 5619
// Say ( tmp1 , D3-Sci1-3 ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_STRING D3-Sci1-3
5614: PPUSH
5615: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_STRING D3-JMM-3
5626: PPUSH
5627: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5631: LD_EXP 17
5635: PPUSH
5636: CALL_OW 302
5640: IFFALSE 5656
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5642: LD_EXP 17
5646: PPUSH
5647: LD_STRING D3-Sci1-4
5649: PPUSH
5650: CALL_OW 88
5654: GO 5668
// Say ( tmp1 , D3-Sci1-4 ) ;
5656: LD_VAR 0 1
5660: PPUSH
5661: LD_STRING D3-Sci1-4
5663: PPUSH
5664: CALL_OW 88
// DialogueOff ;
5668: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5672: LD_INT 12
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5685: LD_INT 32
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5698: LD_INT 12
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: LD_INT 1
5706: PPUSH
5707: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5711: LD_INT 33
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5724: LD_STRING M2
5726: PPUSH
5727: CALL_OW 337
// wait ( 3 3$0 ) ;
5731: LD_INT 6300
5733: PPUSH
5734: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5738: LD_INT 35
5740: PPUSH
5741: CALL_OW 67
// until not InBattle ( 1 ) ;
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 463
5752: NOT
5753: IFFALSE 5738
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5755: LD_EXP 11
5759: PPUSH
5760: CALL_OW 302
5764: PUSH
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: AND
5775: IFFALSE 5944
// begin DialogueOn ;
5777: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5781: LD_EXP 11
5785: PPUSH
5786: LD_STRING D3a-Sim-1
5788: PPUSH
5789: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5793: LD_EXP 17
5797: PPUSH
5798: LD_STRING D3a-Sci1-1
5800: PPUSH
5801: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5805: LD_EXP 11
5809: PPUSH
5810: LD_STRING D3a-Sim-2
5812: PPUSH
5813: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5817: LD_EXP 17
5821: PPUSH
5822: LD_STRING D3a-Sci1-2
5824: PPUSH
5825: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5829: LD_EXP 11
5833: PPUSH
5834: LD_STRING D3a-Sim-3
5836: PPUSH
5837: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5841: LD_EXP 17
5845: PPUSH
5846: LD_STRING D3a-Sci1-3
5848: PPUSH
5849: CALL_OW 88
// if IsOK ( Joan ) then
5853: LD_EXP 13
5857: PPUSH
5858: CALL_OW 302
5862: IFFALSE 5878
// Say ( Simms , D3a-Sim-4 ) else
5864: LD_EXP 11
5868: PPUSH
5869: LD_STRING D3a-Sim-4
5871: PPUSH
5872: CALL_OW 88
5876: GO 5890
// Say ( Simms , D3a-Sim-4a ) ;
5878: LD_EXP 11
5882: PPUSH
5883: LD_STRING D3a-Sim-4a
5885: PPUSH
5886: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5890: LD_EXP 17
5894: PPUSH
5895: LD_STRING D3a-Sci1-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5902: LD_EXP 11
5906: PPUSH
5907: LD_STRING D3a-Sim-5
5909: PPUSH
5910: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5914: LD_EXP 17
5918: PPUSH
5919: LD_STRING D3a-Sci1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5926: LD_EXP 11
5930: PPUSH
5931: LD_STRING D3a-Sim-6
5933: PPUSH
5934: CALL_OW 88
// DialogueOff ;
5938: CALL_OW 7
// end else
5942: GO 6188
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5944: LD_ADDR_VAR 0 3
5948: PUSH
5949: LD_INT 22
5951: PUSH
5952: LD_INT 1
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 4
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 69
5977: PUSH
5978: LD_EXP 11
5982: PUSH
5983: LD_EXP 14
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: DIFF
5992: ST_TO_ADDR
// if tmp3 > 0 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 0
6000: GREATER
6001: IFFALSE 6188
// begin DialogueOn ;
6003: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6007: LD_EXP 11
6011: PPUSH
6012: LD_STRING D3a-Sim-1
6014: PPUSH
6015: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PPUSH
6028: LD_STRING D3a-Sci1-1
6030: PPUSH
6031: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6035: LD_EXP 11
6039: PPUSH
6040: LD_STRING D3a-Sim-2
6042: PPUSH
6043: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: LD_STRING D3a-Sci1-2
6058: PPUSH
6059: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6063: LD_EXP 11
6067: PPUSH
6068: LD_STRING D3a-Sim-3
6070: PPUSH
6071: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_STRING D3a-Sci1-3
6086: PPUSH
6087: CALL_OW 88
// if IsOK ( Joan ) then
6091: LD_EXP 13
6095: PPUSH
6096: CALL_OW 302
6100: IFFALSE 6116
// Say ( Simms , D3a-Sim-4 ) else
6102: LD_EXP 11
6106: PPUSH
6107: LD_STRING D3a-Sim-4
6109: PPUSH
6110: CALL_OW 88
6114: GO 6128
// Say ( Simms , D3a-Sim-4a ) ;
6116: LD_EXP 11
6120: PPUSH
6121: LD_STRING D3a-Sim-4a
6123: PPUSH
6124: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: LD_STRING D3a-Sci1-4
6139: PPUSH
6140: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6144: LD_EXP 11
6148: PPUSH
6149: LD_STRING D3a-Sim-5
6151: PPUSH
6152: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: LD_STRING D3a-Sci1-5
6167: PPUSH
6168: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6172: LD_EXP 11
6176: PPUSH
6177: LD_STRING D3a-Sim-6
6179: PPUSH
6180: CALL_OW 88
// DialogueOff ;
6184: CALL_OW 7
// end ; end ; end ;
6188: PPOPN 3
6190: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6191: LD_EXP 29
6195: PUSH
6196: LD_INT 1
6198: EQUAL
6199: IFFALSE 6519
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6207: LD_EXP 18
6211: PPUSH
6212: LD_STRING D4-FSol1-1
6214: PPUSH
6215: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6219: LD_STRING M3
6221: PPUSH
6222: CALL_OW 337
// PrepareRussians ;
6226: CALL 2663 0 0
// rnd = Rand ( 1 , 100 ) ;
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_INT 1
6237: PPUSH
6238: LD_INT 100
6240: PPUSH
6241: CALL_OW 12
6245: ST_TO_ADDR
// if difficulty = 1 then
6246: LD_OWVAR 67
6250: PUSH
6251: LD_INT 1
6253: EQUAL
6254: IFFALSE 6337
// begin if rnd > 0 and rnd < 51 then
6256: LD_VAR 0 1
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: LD_INT 51
6272: LESS
6273: AND
6274: IFFALSE 6283
// BuildRussianBase ( 2 ) ;
6276: LD_INT 2
6278: PPUSH
6279: CALL 10276 0 1
// if rnd > 50 and rnd < 81 then
6283: LD_VAR 0 1
6287: PUSH
6288: LD_INT 50
6290: GREATER
6291: PUSH
6292: LD_VAR 0 1
6296: PUSH
6297: LD_INT 81
6299: LESS
6300: AND
6301: IFFALSE 6310
// BuildRussianBase ( 1 ) ;
6303: LD_INT 1
6305: PPUSH
6306: CALL 10276 0 1
// if rnd > 80 and rnd < 101 then
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 80
6317: GREATER
6318: PUSH
6319: LD_VAR 0 1
6323: PUSH
6324: LD_INT 101
6326: LESS
6327: AND
6328: IFFALSE 6337
// BuildRussianBase ( 3 ) ;
6330: LD_INT 3
6332: PPUSH
6333: CALL 10276 0 1
// end ; if difficulty = 2 then
6337: LD_OWVAR 67
6341: PUSH
6342: LD_INT 2
6344: EQUAL
6345: IFFALSE 6428
// begin if rnd > 0 and rnd < 61 then
6347: LD_VAR 0 1
6351: PUSH
6352: LD_INT 0
6354: GREATER
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: LD_INT 61
6363: LESS
6364: AND
6365: IFFALSE 6374
// BuildRussianBase ( 2 ) ;
6367: LD_INT 2
6369: PPUSH
6370: CALL 10276 0 1
// if rnd > 60 and rnd < 81 then
6374: LD_VAR 0 1
6378: PUSH
6379: LD_INT 60
6381: GREATER
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: LD_INT 81
6390: LESS
6391: AND
6392: IFFALSE 6401
// BuildRussianBase ( 1 ) ;
6394: LD_INT 1
6396: PPUSH
6397: CALL 10276 0 1
// if rnd > 80 and rnd < 101 then
6401: LD_VAR 0 1
6405: PUSH
6406: LD_INT 80
6408: GREATER
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 101
6417: LESS
6418: AND
6419: IFFALSE 6428
// BuildRussianBase ( 3 ) ;
6421: LD_INT 3
6423: PPUSH
6424: CALL 10276 0 1
// end ; if difficulty = 3 then
6428: LD_OWVAR 67
6432: PUSH
6433: LD_INT 3
6435: EQUAL
6436: IFFALSE 6519
// begin if rnd > 0 and rnd < 71 then
6438: LD_VAR 0 1
6442: PUSH
6443: LD_INT 0
6445: GREATER
6446: PUSH
6447: LD_VAR 0 1
6451: PUSH
6452: LD_INT 71
6454: LESS
6455: AND
6456: IFFALSE 6465
// BuildRussianBase ( 3 ) ;
6458: LD_INT 3
6460: PPUSH
6461: CALL 10276 0 1
// if rnd > 70 and rnd < 81 then
6465: LD_VAR 0 1
6469: PUSH
6470: LD_INT 70
6472: GREATER
6473: PUSH
6474: LD_VAR 0 1
6478: PUSH
6479: LD_INT 81
6481: LESS
6482: AND
6483: IFFALSE 6492
// BuildRussianBase ( 2 ) ;
6485: LD_INT 2
6487: PPUSH
6488: CALL 10276 0 1
// if rnd > 80 and rnd < 101 then
6492: LD_VAR 0 1
6496: PUSH
6497: LD_INT 80
6499: GREATER
6500: PUSH
6501: LD_VAR 0 1
6505: PUSH
6506: LD_INT 101
6508: LESS
6509: AND
6510: IFFALSE 6519
// BuildRussianBase ( 1 ) ;
6512: LD_INT 1
6514: PPUSH
6515: CALL 10276 0 1
// end ; end ;
6519: PPOPN 1
6521: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6522: LD_INT 54
6524: PPUSH
6525: LD_INT 1
6527: PPUSH
6528: CALL_OW 321
6532: PUSH
6533: LD_INT 2
6535: EQUAL
6536: PUSH
6537: LD_INT 21
6539: PPUSH
6540: LD_INT 1
6542: PPUSH
6543: CALL_OW 321
6547: PUSH
6548: LD_INT 2
6550: EQUAL
6551: OR
6552: PUSH
6553: LD_INT 22
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL_OW 321
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: OR
6568: IFFALSE 6869
6570: GO 6572
6572: DISABLE
6573: LD_INT 0
6575: PPUSH
6576: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6577: LD_EXP 17
6581: PPUSH
6582: CALL_OW 302
6586: IFFALSE 6600
// tmp := DeltaDoctor else
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: LD_EXP 17
6597: ST_TO_ADDR
6598: GO 6610
// tmp := Denis ;
6600: LD_ADDR_VAR 0 2
6604: PUSH
6605: LD_EXP 12
6609: ST_TO_ADDR
// if tmp then
6610: LD_VAR 0 2
6614: IFFALSE 6708
// begin DialogueOn ;
6616: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_STRING D6-JMM-1
6627: PPUSH
6628: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_STRING D6-Sci1-1
6639: PPUSH
6640: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6644: LD_EXP 1
6648: PPUSH
6649: LD_STRING D6-JMM-2
6651: PPUSH
6652: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6656: LD_VAR 0 2
6660: PPUSH
6661: LD_STRING D6-Sci1-2
6663: PPUSH
6664: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6668: LD_EXP 1
6672: PPUSH
6673: LD_STRING D6-JMM-3
6675: PPUSH
6676: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6680: LD_VAR 0 2
6684: PPUSH
6685: LD_STRING D6-Sci1-3
6687: PPUSH
6688: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6692: LD_EXP 1
6696: PPUSH
6697: LD_STRING D6-JMM-4
6699: PPUSH
6700: CALL_OW 88
// DialogueOff ;
6704: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6708: LD_INT 1050
6710: PPUSH
6711: CALL_OW 67
// if arabianTrait = 0 then
6715: LD_EXP 49
6719: PUSH
6720: LD_INT 0
6722: EQUAL
6723: IFFALSE 6781
// begin DialogueOn ;
6725: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6729: LD_EXP 27
6733: PPUSH
6734: LD_STRING D5-Ar1-1
6736: PPUSH
6737: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6741: LD_EXP 26
6745: PPUSH
6746: LD_STRING D5-Diet-1
6748: PPUSH
6749: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6753: LD_EXP 27
6757: PPUSH
6758: LD_STRING D5-Ar1-2
6760: PPUSH
6761: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6765: LD_EXP 26
6769: PPUSH
6770: LD_STRING D5-Diet-2
6772: PPUSH
6773: CALL_OW 88
// DialogueOff ;
6777: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6781: LD_INT 2100
6783: PUSH
6784: LD_INT 3150
6786: PUSH
6787: LD_INT 4200
6789: PUSH
6790: LD_INT 5250
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: LIST
6797: LIST
6798: PUSH
6799: LD_INT 1
6801: PPUSH
6802: LD_INT 4
6804: PPUSH
6805: CALL_OW 12
6809: ARRAY
6810: PPUSH
6811: CALL_OW 67
// if arabianTrait = 0 then
6815: LD_EXP 49
6819: PUSH
6820: LD_INT 0
6822: EQUAL
6823: IFFALSE 6869
// begin arabianTrait = 1 ;
6825: LD_ADDR_EXP 49
6829: PUSH
6830: LD_INT 1
6832: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6833: LD_INT 2
6835: PPUSH
6836: LD_INT 3
6838: PPUSH
6839: LD_INT 1
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6849: LD_INT 2
6851: PPUSH
6852: LD_INT 6
6854: PPUSH
6855: LD_INT 1
6857: PPUSH
6858: LD_INT 1
6860: PPUSH
6861: CALL_OW 80
// PrepareArabianTrait ;
6865: CALL 6872 0 0
// end ; end ;
6869: PPOPN 2
6871: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6872: LD_INT 0
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6878: LD_ADDR_VAR 0 2
6882: PUSH
6883: LD_INT 22
6885: PUSH
6886: LD_INT 2
6888: PUSH
6889: EMPTY
6890: LIST
6891: LIST
6892: PUSH
6893: LD_INT 25
6895: PUSH
6896: LD_INT 4
6898: PUSH
6899: EMPTY
6900: LIST
6901: LIST
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PPUSH
6907: CALL_OW 69
6911: PUSH
6912: FOR_IN
6913: IFFALSE 6926
// ComExitBuilding ( i ) ;
6915: LD_VAR 0 2
6919: PPUSH
6920: CALL_OW 122
6924: GO 6912
6926: POP
6927: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 22
6935: PUSH
6936: LD_INT 2
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PUSH
6943: LD_INT 25
6945: PUSH
6946: LD_INT 3
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PPUSH
6957: CALL_OW 69
6961: PUSH
6962: FOR_IN
6963: IFFALSE 6976
// ComExitVehicle ( i ) ;
6965: LD_VAR 0 2
6969: PPUSH
6970: CALL_OW 121
6974: GO 6962
6976: POP
6977: POP
// SetClass ( Dietrich , 8 ) ;
6978: LD_EXP 26
6982: PPUSH
6983: LD_INT 8
6985: PPUSH
6986: CALL_OW 336
// wait ( 0 0$3 ) ;
6990: LD_INT 105
6992: PPUSH
6993: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6997: LD_INT 76
6999: PPUSH
7000: LD_INT 19
7002: PPUSH
7003: CALL_OW 84
// DialogueOn ;
7007: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7011: LD_INT 22
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: LD_INT 26
7023: PUSH
7024: LD_INT 1
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: LD_INT 25
7036: PUSH
7037: LD_INT 1
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: PUSH
7044: LD_INT 25
7046: PUSH
7047: LD_INT 2
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 25
7056: PUSH
7057: LD_INT 3
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 25
7066: PUSH
7067: LD_INT 4
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 25
7076: PUSH
7077: LD_INT 5
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: LIST
7096: PPUSH
7097: CALL_OW 69
7101: PPUSH
7102: LD_STRING D8-Sol1-1
7104: PPUSH
7105: LD_STRING D8-Sol1-1
7107: PPUSH
7108: CALL 9607 0 3
// if IsOK ( DeltaDoctor ) then
7112: LD_EXP 17
7116: PPUSH
7117: CALL_OW 302
7121: IFFALSE 7137
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7123: LD_EXP 17
7127: PPUSH
7128: LD_STRING D8-Sci1-1
7130: PPUSH
7131: CALL_OW 88
7135: GO 7238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7137: LD_INT 22
7139: PUSH
7140: LD_INT 1
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: LD_INT 26
7149: PUSH
7150: LD_INT 1
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PUSH
7157: LD_INT 2
7159: PUSH
7160: LD_INT 25
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 25
7172: PUSH
7173: LD_INT 2
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 25
7202: PUSH
7203: LD_INT 5
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: PPUSH
7228: LD_STRING D8-Sol1-1
7230: PPUSH
7231: LD_STRING D8-Sol1-1
7233: PPUSH
7234: CALL 9607 0 3
// Say ( JMM , D8-JMM-1 ) ;
7238: LD_EXP 1
7242: PPUSH
7243: LD_STRING D8-JMM-1
7245: PPUSH
7246: CALL_OW 88
// DialogueOff ;
7250: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7254: LD_INT 2
7256: PPUSH
7257: LD_INT 2
7259: PPUSH
7260: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7264: LD_INT 1
7266: PPUSH
7267: LD_INT 2
7269: PPUSH
7270: LD_INT 2
7272: PPUSH
7273: LD_INT 1
7275: PPUSH
7276: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7280: LD_INT 3
7282: PPUSH
7283: LD_INT 2
7285: PPUSH
7286: LD_INT 1
7288: PPUSH
7289: LD_INT 1
7291: PPUSH
7292: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7296: LD_STRING M4
7298: PPUSH
7299: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7303: LD_ADDR_VAR 0 2
7307: PUSH
7308: LD_INT 22
7310: PUSH
7311: LD_INT 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 21
7320: PUSH
7321: LD_INT 1
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 2
7330: PUSH
7331: LD_INT 25
7333: PUSH
7334: LD_INT 1
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 8
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: LD_INT 25
7353: PUSH
7354: LD_INT 15
7356: PUSH
7357: EMPTY
7358: LIST
7359: LIST
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: LIST
7371: PPUSH
7372: CALL_OW 69
7376: PUSH
7377: FOR_IN
7378: IFFALSE 7518
// begin ComExitBuilding ( i ) ;
7380: LD_VAR 0 2
7384: PPUSH
7385: CALL_OW 122
// wait ( 0 0$1 ) ;
7389: LD_INT 35
7391: PPUSH
7392: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7396: LD_VAR 0 2
7400: PPUSH
7401: LD_INT 77
7403: PPUSH
7404: LD_INT 10
7406: PPUSH
7407: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7411: LD_VAR 0 2
7415: PPUSH
7416: LD_INT 82
7418: PPUSH
7419: LD_INT 5
7421: PPUSH
7422: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7426: LD_VAR 0 2
7430: PPUSH
7431: LD_INT 95
7433: PPUSH
7434: LD_INT 12
7436: PPUSH
7437: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7441: LD_VAR 0 2
7445: PPUSH
7446: LD_INT 102
7448: PPUSH
7449: LD_INT 11
7451: PPUSH
7452: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7456: LD_VAR 0 2
7460: PPUSH
7461: LD_INT 116
7463: PPUSH
7464: LD_INT 15
7466: PPUSH
7467: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7471: LD_VAR 0 2
7475: PPUSH
7476: LD_INT 140
7478: PPUSH
7479: LD_INT 25
7481: PPUSH
7482: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7486: LD_VAR 0 2
7490: PPUSH
7491: LD_INT 160
7493: PPUSH
7494: LD_INT 56
7496: PPUSH
7497: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7501: LD_VAR 0 2
7505: PPUSH
7506: LD_INT 189
7508: PPUSH
7509: LD_INT 79
7511: PPUSH
7512: CALL_OW 174
// end ;
7516: GO 7377
7518: POP
7519: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7520: LD_ADDR_VAR 0 2
7524: PUSH
7525: LD_INT 22
7527: PUSH
7528: LD_INT 2
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: PUSH
7535: LD_INT 21
7537: PUSH
7538: LD_INT 1
7540: PUSH
7541: EMPTY
7542: LIST
7543: LIST
7544: PUSH
7545: LD_INT 2
7547: PUSH
7548: LD_INT 25
7550: PUSH
7551: LD_INT 2
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_INT 25
7560: PUSH
7561: LD_INT 3
7563: PUSH
7564: EMPTY
7565: LIST
7566: LIST
7567: PUSH
7568: LD_INT 25
7570: PUSH
7571: LD_INT 4
7573: PUSH
7574: EMPTY
7575: LIST
7576: LIST
7577: PUSH
7578: LD_INT 25
7580: PUSH
7581: LD_INT 16
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: LIST
7599: PPUSH
7600: CALL_OW 69
7604: PUSH
7605: FOR_IN
7606: IFFALSE 7746
// begin ComExitBuilding ( i ) ;
7608: LD_VAR 0 2
7612: PPUSH
7613: CALL_OW 122
// wait ( 0 0$1 ) ;
7617: LD_INT 35
7619: PPUSH
7620: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7624: LD_VAR 0 2
7628: PPUSH
7629: LD_INT 77
7631: PPUSH
7632: LD_INT 10
7634: PPUSH
7635: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7639: LD_VAR 0 2
7643: PPUSH
7644: LD_INT 82
7646: PPUSH
7647: LD_INT 5
7649: PPUSH
7650: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7654: LD_VAR 0 2
7658: PPUSH
7659: LD_INT 95
7661: PPUSH
7662: LD_INT 12
7664: PPUSH
7665: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7669: LD_VAR 0 2
7673: PPUSH
7674: LD_INT 102
7676: PPUSH
7677: LD_INT 11
7679: PPUSH
7680: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7684: LD_VAR 0 2
7688: PPUSH
7689: LD_INT 116
7691: PPUSH
7692: LD_INT 15
7694: PPUSH
7695: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7699: LD_VAR 0 2
7703: PPUSH
7704: LD_INT 140
7706: PPUSH
7707: LD_INT 25
7709: PPUSH
7710: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7714: LD_VAR 0 2
7718: PPUSH
7719: LD_INT 160
7721: PPUSH
7722: LD_INT 56
7724: PPUSH
7725: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7729: LD_VAR 0 2
7733: PPUSH
7734: LD_INT 189
7736: PPUSH
7737: LD_INT 79
7739: PPUSH
7740: CALL_OW 171
// end ;
7744: GO 7605
7746: POP
7747: POP
// arabianAttackersAI = 1 ;
7748: LD_ADDR_EXP 46
7752: PUSH
7753: LD_INT 1
7755: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7756: LD_INT 350
7758: PPUSH
7759: CALL_OW 67
// if IsOk ( Gary ) then
7763: LD_EXP 10
7767: PPUSH
7768: CALL_OW 302
7772: IFFALSE 7786
// Say ( Gary , D8a-Gary-1 ) ;
7774: LD_EXP 10
7778: PPUSH
7779: LD_STRING D8a-Gary-1
7781: PPUSH
7782: CALL_OW 88
// wait ( 0 0$5 ) ;
7786: LD_INT 175
7788: PPUSH
7789: CALL_OW 67
// if IsOK ( Khatam ) then
7793: LD_EXP 14
7797: PPUSH
7798: CALL_OW 302
7802: IFFALSE 8338
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7804: LD_ADDR_VAR 0 3
7808: PUSH
7809: LD_INT 22
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 2
7821: PUSH
7822: LD_INT 25
7824: PUSH
7825: LD_INT 1
7827: PUSH
7828: EMPTY
7829: LIST
7830: LIST
7831: PUSH
7832: LD_INT 25
7834: PUSH
7835: LD_INT 2
7837: PUSH
7838: EMPTY
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 25
7844: PUSH
7845: LD_INT 3
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PUSH
7852: LD_INT 25
7854: PUSH
7855: LD_INT 4
7857: PUSH
7858: EMPTY
7859: LIST
7860: LIST
7861: PUSH
7862: LD_INT 25
7864: PUSH
7865: LD_INT 5
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 25
7874: PUSH
7875: LD_INT 8
7877: PUSH
7878: EMPTY
7879: LIST
7880: LIST
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: PUSH
7891: EMPTY
7892: LIST
7893: LIST
7894: PPUSH
7895: CALL_OW 69
7899: PUSH
7900: LD_EXP 1
7904: PUSH
7905: LD_EXP 2
7909: PUSH
7910: LD_EXP 3
7914: PUSH
7915: LD_EXP 4
7919: PUSH
7920: LD_EXP 5
7924: PUSH
7925: LD_EXP 6
7929: PUSH
7930: LD_EXP 7
7934: PUSH
7935: LD_EXP 8
7939: PUSH
7940: LD_EXP 9
7944: PUSH
7945: LD_EXP 10
7949: PUSH
7950: LD_EXP 11
7954: PUSH
7955: LD_EXP 12
7959: PUSH
7960: LD_EXP 13
7964: PUSH
7965: LD_EXP 14
7969: PUSH
7970: LD_EXP 15
7974: PUSH
7975: LD_EXP 16
7979: PUSH
7980: LD_EXP 17
7984: PUSH
7985: LD_EXP 19
7989: PUSH
7990: LD_EXP 24
7994: PUSH
7995: EMPTY
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: DIFF
8016: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8017: LD_EXP 14
8021: PPUSH
8022: LD_INT 8
8024: PPUSH
8025: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8029: LD_EXP 14
8033: PPUSH
8034: CALL_OW 122
// wait ( 0 0$1 ) ;
8038: LD_INT 35
8040: PPUSH
8041: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8045: LD_EXP 14
8049: PPUSH
8050: CALL_OW 121
// wait ( 0 0$1 ) ;
8054: LD_INT 35
8056: PPUSH
8057: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8061: LD_EXP 14
8065: PPUSH
8066: LD_INT 7
8068: PPUSH
8069: CALL_OW 113
// if not tmp then
8073: LD_VAR 0 3
8077: NOT
8078: IFFALSE 8082
// exit ;
8080: GO 8338
// DialogueOn ;
8082: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8086: LD_VAR 0 3
8090: PUSH
8091: LD_INT 1
8093: ARRAY
8094: PPUSH
8095: CALL_OW 258
8099: PUSH
8100: LD_INT 1
8102: EQUAL
8103: IFFALSE 8123
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 1
8112: ARRAY
8113: PPUSH
8114: LD_STRING D8b-Sol1-1
8116: PPUSH
8117: CALL_OW 88
8121: GO 8139
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: LD_STRING D8b-FSol1-1
8134: PPUSH
8135: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8139: LD_EXP 14
8143: PPUSH
8144: LD_STRING D8b-Khat-1
8146: PPUSH
8147: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 1
8158: ARRAY
8159: PPUSH
8160: CALL_OW 258
8164: PUSH
8165: LD_INT 1
8167: EQUAL
8168: IFFALSE 8188
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 1
8177: ARRAY
8178: PPUSH
8179: LD_STRING D8b-Sol1-2
8181: PPUSH
8182: CALL_OW 88
8186: GO 8204
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: LD_STRING D8b-FSol1-2
8199: PPUSH
8200: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8204: LD_EXP 14
8208: PPUSH
8209: LD_STRING D8b-Khat-2
8211: PPUSH
8212: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8216: LD_VAR 0 3
8220: PUSH
8221: LD_INT 1
8223: ARRAY
8224: PPUSH
8225: CALL_OW 258
8229: PUSH
8230: LD_INT 1
8232: EQUAL
8233: IFFALSE 8253
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 1
8242: ARRAY
8243: PPUSH
8244: LD_STRING D8b-Sol1-3
8246: PPUSH
8247: CALL_OW 88
8251: GO 8269
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: LD_STRING D8b-FSol1-3
8264: PPUSH
8265: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8269: LD_EXP 14
8273: PPUSH
8274: LD_STRING D8b-Khat-3
8276: PPUSH
8277: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8281: LD_VAR 0 3
8285: PUSH
8286: LD_INT 1
8288: ARRAY
8289: PPUSH
8290: CALL_OW 258
8294: PUSH
8295: LD_INT 1
8297: EQUAL
8298: IFFALSE 8318
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8300: LD_VAR 0 3
8304: PUSH
8305: LD_INT 1
8307: ARRAY
8308: PPUSH
8309: LD_STRING D8b-Sol1-4
8311: PPUSH
8312: CALL_OW 88
8316: GO 8334
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8318: LD_VAR 0 3
8322: PUSH
8323: LD_INT 1
8325: ARRAY
8326: PPUSH
8327: LD_STRING D8b-FSol1-4
8329: PPUSH
8330: CALL_OW 88
// DialogueOff ;
8334: CALL_OW 7
// end ; end ;
8338: LD_VAR 0 1
8342: RET
// every 0 0$1 do var i ;
8343: GO 8345
8345: DISABLE
8346: LD_INT 0
8348: PPUSH
// begin enable ;
8349: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8350: LD_ADDR_VAR 0 1
8354: PUSH
8355: LD_INT 7
8357: PPUSH
8358: LD_INT 22
8360: PUSH
8361: LD_INT 2
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PPUSH
8368: CALL_OW 70
8372: PUSH
8373: FOR_IN
8374: IFFALSE 8440
// begin if GetClass ( i ) = 4 then
8376: LD_VAR 0 1
8380: PPUSH
8381: CALL_OW 257
8385: PUSH
8386: LD_INT 4
8388: EQUAL
8389: IFFALSE 8401
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8391: LD_INT 1
8393: PPUSH
8394: LD_STRING 10_ScientistsEscape_1
8396: PPUSH
8397: CALL_OW 39
// if i = Dietrich then
8401: LD_VAR 0 1
8405: PUSH
8406: LD_EXP 26
8410: EQUAL
8411: IFFALSE 8421
// GensherStatus = 1 ;
8413: LD_ADDR_EXP 51
8417: PUSH
8418: LD_INT 1
8420: ST_TO_ADDR
// arabianEscape = 1 ;
8421: LD_ADDR_EXP 47
8425: PUSH
8426: LD_INT 1
8428: ST_TO_ADDR
// RemoveUnit ( i ) ;
8429: LD_VAR 0 1
8433: PPUSH
8434: CALL_OW 64
// end ;
8438: GO 8373
8440: POP
8441: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8442: LD_EXP 14
8446: PPUSH
8447: LD_INT 7
8449: PPUSH
8450: CALL_OW 308
8454: IFFALSE 8473
// begin KhatamStatus = 1 ;
8456: LD_ADDR_EXP 52
8460: PUSH
8461: LD_INT 1
8463: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8464: LD_EXP 14
8468: PPUSH
8469: CALL_OW 64
// end ; end ;
8473: PPOPN 1
8475: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8476: LD_EXP 14
8480: PPUSH
8481: CALL_OW 301
8485: IFFALSE 8498
8487: GO 8489
8489: DISABLE
// KhatamStatus = 0 ;
8490: LD_ADDR_EXP 52
8494: PUSH
8495: LD_INT 0
8497: ST_TO_ADDR
8498: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8499: LD_INT 22
8501: PUSH
8502: LD_INT 2
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: LD_INT 21
8511: PUSH
8512: LD_INT 1
8514: PUSH
8515: EMPTY
8516: LIST
8517: LIST
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PPUSH
8523: CALL_OW 69
8527: PUSH
8528: LD_INT 0
8530: EQUAL
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_INT 4
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: LD_INT 21
8544: PUSH
8545: LD_INT 1
8547: PUSH
8548: EMPTY
8549: LIST
8550: LIST
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PPUSH
8556: CALL_OW 69
8560: PUSH
8561: LD_INT 0
8563: EQUAL
8564: AND
8565: IFFALSE 8578
8567: GO 8569
8569: DISABLE
// arabianDefeated = 1 ;
8570: LD_ADDR_EXP 48
8574: PUSH
8575: LD_INT 1
8577: ST_TO_ADDR
8578: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8579: LD_INT 54
8581: PPUSH
8582: LD_INT 1
8584: PPUSH
8585: CALL_OW 321
8589: PUSH
8590: LD_INT 2
8592: EQUAL
8593: PUSH
8594: LD_INT 55
8596: PPUSH
8597: LD_INT 1
8599: PPUSH
8600: CALL_OW 321
8604: PUSH
8605: LD_INT 2
8607: EQUAL
8608: AND
8609: PUSH
8610: LD_INT 21
8612: PPUSH
8613: LD_INT 1
8615: PPUSH
8616: CALL_OW 321
8620: PUSH
8621: LD_INT 2
8623: EQUAL
8624: AND
8625: PUSH
8626: LD_INT 22
8628: PPUSH
8629: LD_INT 1
8631: PPUSH
8632: CALL_OW 321
8636: PUSH
8637: LD_INT 2
8639: EQUAL
8640: AND
8641: PUSH
8642: LD_INT 12
8644: PPUSH
8645: LD_INT 1
8647: PPUSH
8648: CALL_OW 321
8652: PUSH
8653: LD_INT 2
8655: EQUAL
8656: AND
8657: PUSH
8658: LD_INT 32
8660: PPUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 321
8668: PUSH
8669: LD_INT 2
8671: EQUAL
8672: AND
8673: PUSH
8674: LD_EXP 59
8678: PUSH
8679: LD_INT 0
8681: EQUAL
8682: AND
8683: PUSH
8684: LD_EXP 49
8688: PUSH
8689: LD_INT 0
8691: EQUAL
8692: AND
8693: PUSH
8694: LD_OWVAR 1
8698: PUSH
8699: LD_INT 31500
8701: GREATEREQUAL
8702: AND
8703: IFFALSE 8720
8705: GO 8707
8707: DISABLE
// begin arabianTrait = 1 ;
8708: LD_ADDR_EXP 49
8712: PUSH
8713: LD_INT 1
8715: ST_TO_ADDR
// PrepareArabianTrait ;
8716: CALL 6872 0 0
// end ;
8720: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8721: LD_EXP 29
8725: PUSH
8726: LD_STRING 02_mikhailStatus_1
8728: PPUSH
8729: LD_INT 0
8731: PPUSH
8732: CALL_OW 30
8736: PUSH
8737: LD_INT 1
8739: EQUAL
8740: AND
8741: PUSH
8742: LD_INT 22
8744: PUSH
8745: LD_INT 5
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PPUSH
8752: CALL_OW 69
8756: PUSH
8757: LD_INT 0
8759: EQUAL
8760: AND
8761: PUSH
8762: LD_INT 22
8764: PUSH
8765: LD_INT 2
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 69
8776: PUSH
8777: LD_INT 0
8779: EQUAL
8780: PUSH
8781: LD_EXP 49
8785: PUSH
8786: LD_INT 0
8788: EQUAL
8789: OR
8790: AND
8791: IFFALSE 8800
8793: GO 8795
8795: DISABLE
// PrepareCornell ;
8796: CALL 2505 0 0
8800: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8801: LD_INT 22
8803: PUSH
8804: LD_INT 1
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 69
8815: PPUSH
8816: LD_EXP 19
8820: PPUSH
8821: CALL_OW 74
8825: PPUSH
8826: LD_EXP 19
8830: PPUSH
8831: CALL_OW 296
8835: PUSH
8836: LD_INT 9
8838: LESS
8839: IFFALSE 9060
8841: GO 8843
8843: DISABLE
// begin InGameOn ;
8844: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8848: LD_EXP 19
8852: PPUSH
8853: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8857: LD_EXP 19
8861: PPUSH
8862: LD_STRING D7-Corn-1
8864: PPUSH
8865: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8869: LD_INT 22
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: LD_INT 2
8881: PUSH
8882: LD_INT 25
8884: PUSH
8885: LD_INT 1
8887: PUSH
8888: EMPTY
8889: LIST
8890: LIST
8891: PUSH
8892: LD_INT 25
8894: PUSH
8895: LD_INT 2
8897: PUSH
8898: EMPTY
8899: LIST
8900: LIST
8901: PUSH
8902: LD_INT 25
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 25
8914: PUSH
8915: LD_INT 4
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 25
8924: PUSH
8925: LD_INT 5
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: PUSH
8940: EMPTY
8941: LIST
8942: LIST
8943: PPUSH
8944: CALL_OW 69
8948: PPUSH
8949: LD_STRING D7-Sol1-1
8951: PPUSH
8952: LD_STRING D7-FSol1-1
8954: PPUSH
8955: CALL 9607 0 3
// CenterNowOnUnits ( Cornell ) ;
8959: LD_EXP 19
8963: PPUSH
8964: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8968: LD_EXP 19
8972: PPUSH
8973: LD_STRING D7-Corn-2
8975: PPUSH
8976: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8980: LD_EXP 1
8984: PPUSH
8985: LD_STRING D7-JMM-2
8987: PPUSH
8988: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8992: LD_EXP 19
8996: PPUSH
8997: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9001: LD_EXP 19
9005: PPUSH
9006: LD_STRING D7-Corn-3
9008: PPUSH
9009: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9013: LD_EXP 19
9017: PPUSH
9018: LD_INT 250
9020: PPUSH
9021: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9025: LD_EXP 19
9029: PPUSH
9030: LD_INT 1
9032: PPUSH
9033: CALL_OW 235
// wait ( 0 0$1 ) ;
9037: LD_INT 35
9039: PPUSH
9040: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9044: LD_EXP 1
9048: PPUSH
9049: LD_STRING D7-JMM-3
9051: PPUSH
9052: CALL_OW 88
// InGameOff ;
9056: CALL_OW 9
// end ;
9060: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9061: LD_EXP 19
9065: PPUSH
9066: CALL_OW 255
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: PUSH
9075: LD_EXP 19
9079: PPUSH
9080: CALL_OW 256
9084: PUSH
9085: LD_INT 251
9087: GREATER
9088: AND
9089: IFFALSE 9282
9091: GO 9093
9093: DISABLE
// begin DialogueOn ;
9094: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9098: LD_EXP 1
9102: PPUSH
9103: LD_STRING D7a-JMM-1
9105: PPUSH
9106: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9110: LD_EXP 19
9114: PPUSH
9115: LD_STRING D7a-Corn-1
9117: PPUSH
9118: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9122: LD_EXP 1
9126: PPUSH
9127: LD_STRING D7a-JMM-2
9129: PPUSH
9130: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9134: LD_EXP 19
9138: PPUSH
9139: LD_STRING D7a-Corn-2
9141: PPUSH
9142: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9146: LD_EXP 1
9150: PPUSH
9151: LD_STRING D7a-JMM-3
9153: PPUSH
9154: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9158: LD_EXP 19
9162: PPUSH
9163: LD_STRING D7a-Corn-3
9165: PPUSH
9166: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9170: LD_EXP 1
9174: PPUSH
9175: LD_STRING D7a-JMM-4
9177: PPUSH
9178: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9182: LD_EXP 19
9186: PPUSH
9187: LD_STRING D7a-Corn-4
9189: PPUSH
9190: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9194: LD_EXP 1
9198: PPUSH
9199: LD_STRING D7a-JMM-5
9201: PPUSH
9202: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9206: LD_EXP 19
9210: PPUSH
9211: LD_STRING D7a-Corn-5
9213: PPUSH
9214: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9218: LD_EXP 1
9222: PPUSH
9223: LD_STRING D7a-JMM-6
9225: PPUSH
9226: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9230: LD_EXP 19
9234: PPUSH
9235: LD_STRING D7a-Corn-6
9237: PPUSH
9238: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9242: LD_EXP 1
9246: PPUSH
9247: LD_STRING D7a-JMM-7
9249: PPUSH
9250: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9254: LD_EXP 19
9258: PPUSH
9259: LD_STRING D7a-Corn-7
9261: PPUSH
9262: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9266: LD_EXP 1
9270: PPUSH
9271: LD_STRING D7a-JMM-8
9273: PPUSH
9274: CALL_OW 88
// DialogueOff ;
9278: CALL_OW 7
// end ;
9282: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9283: LD_EXP 58
9287: PUSH
9288: LD_EXP 1
9292: PPUSH
9293: CALL_OW 302
9297: PUSH
9298: LD_EXP 5
9302: PPUSH
9303: CALL_OW 302
9307: OR
9308: AND
9309: IFFALSE 9399
9311: GO 9313
9313: DISABLE
// begin Wait ( 0 0$2 ) ;
9314: LD_INT 70
9316: PPUSH
9317: CALL_OW 67
// DialogueOn ;
9321: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9325: LD_EXP 58
9329: PUSH
9330: LD_INT 1
9332: ARRAY
9333: PPUSH
9334: LD_EXP 58
9338: PUSH
9339: LD_INT 2
9341: ARRAY
9342: PPUSH
9343: CALL_OW 86
// if IsOk ( Cyrus ) then
9347: LD_EXP 5
9351: PPUSH
9352: CALL_OW 302
9356: IFFALSE 9372
// Say ( Cyrus , D10-Cyrus-1 ) else
9358: LD_EXP 5
9362: PPUSH
9363: LD_STRING D10-Cyrus-1
9365: PPUSH
9366: CALL_OW 88
9370: GO 9395
// if IsOk ( JMM ) then
9372: LD_EXP 1
9376: PPUSH
9377: CALL_OW 302
9381: IFFALSE 9395
// Say ( JMM , D10-JMM-1 ) ;
9383: LD_EXP 1
9387: PPUSH
9388: LD_STRING D10-JMM-1
9390: PPUSH
9391: CALL_OW 88
// DialogueOff ;
9395: CALL_OW 7
// end ;
9399: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9400: LD_INT 12
9402: PPUSH
9403: LD_INT 1
9405: PPUSH
9406: CALL_OW 321
9410: PUSH
9411: LD_INT 2
9413: EQUAL
9414: IFFALSE 9426
9416: GO 9418
9418: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9419: LD_STRING M2b
9421: PPUSH
9422: CALL_OW 337
9426: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9427: LD_INT 32
9429: PPUSH
9430: LD_INT 1
9432: PPUSH
9433: CALL_OW 321
9437: PUSH
9438: LD_INT 2
9440: EQUAL
9441: IFFALSE 9453
9443: GO 9445
9445: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9446: LD_STRING M2c
9448: PPUSH
9449: CALL_OW 337
9453: END
// every 0 0$1 trigger arabianDefeated = 1 do
9454: LD_EXP 48
9458: PUSH
9459: LD_INT 1
9461: EQUAL
9462: IFFALSE 9474
9464: GO 9466
9466: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9467: LD_STRING M4a
9469: PPUSH
9470: CALL_OW 337
9474: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9475: LD_INT 54
9477: PPUSH
9478: LD_INT 1
9480: PPUSH
9481: CALL_OW 321
9485: PUSH
9486: LD_INT 2
9488: EQUAL
9489: PUSH
9490: LD_INT 55
9492: PPUSH
9493: LD_INT 1
9495: PPUSH
9496: CALL_OW 321
9500: PUSH
9501: LD_INT 2
9503: EQUAL
9504: AND
9505: PUSH
9506: LD_INT 21
9508: PPUSH
9509: LD_INT 1
9511: PPUSH
9512: CALL_OW 321
9516: PUSH
9517: LD_INT 2
9519: EQUAL
9520: AND
9521: PUSH
9522: LD_INT 22
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: CALL_OW 321
9532: PUSH
9533: LD_INT 2
9535: EQUAL
9536: AND
9537: IFFALSE 9549
9539: GO 9541
9541: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9542: LD_STRING M2a
9544: PPUSH
9545: CALL_OW 337
9549: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9550: LD_INT 0
9552: PPUSH
9553: PPUSH
// if exist_mode then
9554: LD_VAR 0 2
9558: IFFALSE 9577
// unit := CreateCharacter ( ident ) else
9560: LD_ADDR_VAR 0 4
9564: PUSH
9565: LD_VAR 0 1
9569: PPUSH
9570: CALL_OW 34
9574: ST_TO_ADDR
9575: GO 9592
// unit := NewCharacter ( ident ) ;
9577: LD_ADDR_VAR 0 4
9581: PUSH
9582: LD_VAR 0 1
9586: PPUSH
9587: CALL_OW 25
9591: ST_TO_ADDR
// result := unit ;
9592: LD_ADDR_VAR 0 3
9596: PUSH
9597: LD_VAR 0 4
9601: ST_TO_ADDR
// end ;
9602: LD_VAR 0 3
9606: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9607: LD_INT 0
9609: PPUSH
9610: PPUSH
9611: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9612: LD_ADDR_VAR 0 1
9616: PUSH
9617: LD_VAR 0 1
9621: PUSH
9622: LD_EXP 1
9626: PUSH
9627: LD_EXP 2
9631: PUSH
9632: LD_EXP 3
9636: PUSH
9637: LD_EXP 4
9641: PUSH
9642: LD_EXP 5
9646: PUSH
9647: LD_EXP 6
9651: PUSH
9652: LD_EXP 7
9656: PUSH
9657: LD_EXP 8
9661: PUSH
9662: LD_EXP 9
9666: PUSH
9667: LD_EXP 10
9671: PUSH
9672: LD_EXP 11
9676: PUSH
9677: LD_EXP 12
9681: PUSH
9682: LD_EXP 13
9686: PUSH
9687: LD_EXP 14
9691: PUSH
9692: LD_EXP 15
9696: PUSH
9697: LD_EXP 16
9701: PUSH
9702: LD_EXP 17
9706: PUSH
9707: LD_EXP 18
9711: PUSH
9712: LD_EXP 19
9716: PUSH
9717: LD_EXP 24
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: DIFF
9744: ST_TO_ADDR
// if not characters then
9745: LD_VAR 0 1
9749: NOT
9750: IFFALSE 9754
// exit ;
9752: GO 9900
// rnd = rand ( 1 , characters ) ;
9754: LD_ADDR_VAR 0 6
9758: PUSH
9759: LD_INT 1
9761: PPUSH
9762: LD_VAR 0 1
9766: PPUSH
9767: CALL_OW 12
9771: ST_TO_ADDR
// for i = 1 to characters do
9772: LD_ADDR_VAR 0 5
9776: PUSH
9777: DOUBLE
9778: LD_INT 1
9780: DEC
9781: ST_TO_ADDR
9782: LD_VAR 0 1
9786: PUSH
9787: FOR_TO
9788: IFFALSE 9898
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9790: LD_VAR 0 5
9794: PUSH
9795: LD_VAR 0 6
9799: EQUAL
9800: PUSH
9801: LD_VAR 0 1
9805: PUSH
9806: LD_VAR 0 5
9810: ARRAY
9811: PPUSH
9812: CALL_OW 258
9816: PUSH
9817: LD_INT 1
9819: EQUAL
9820: AND
9821: IFFALSE 9843
// Say ( characters [ i ] , dialogMID ) ;
9823: LD_VAR 0 1
9827: PUSH
9828: LD_VAR 0 5
9832: ARRAY
9833: PPUSH
9834: LD_VAR 0 2
9838: PPUSH
9839: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9843: LD_VAR 0 5
9847: PUSH
9848: LD_VAR 0 6
9852: EQUAL
9853: PUSH
9854: LD_VAR 0 1
9858: PUSH
9859: LD_VAR 0 5
9863: ARRAY
9864: PPUSH
9865: CALL_OW 258
9869: PUSH
9870: LD_INT 2
9872: EQUAL
9873: AND
9874: IFFALSE 9896
// Say ( characters [ i ] , dialogFID ) ;
9876: LD_VAR 0 1
9880: PUSH
9881: LD_VAR 0 5
9885: ARRAY
9886: PPUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: CALL_OW 88
// end ;
9896: GO 9787
9898: POP
9899: POP
// end ;
9900: LD_VAR 0 4
9904: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9905: LD_INT 0
9907: PPUSH
9908: PPUSH
// for i in charactersList do
9909: LD_ADDR_VAR 0 4
9913: PUSH
9914: LD_VAR 0 1
9918: PUSH
9919: FOR_IN
9920: IFFALSE 9949
// begin if IsOk ( i ) then
9922: LD_VAR 0 4
9926: PPUSH
9927: CALL_OW 302
9931: IFFALSE 9947
// SaveCharacters ( i , ident ) ;
9933: LD_VAR 0 4
9937: PPUSH
9938: LD_VAR 0 2
9942: PPUSH
9943: CALL_OW 38
// end ;
9947: GO 9919
9949: POP
9950: POP
// end ;
9951: LD_VAR 0 3
9955: RET
// export function PrepareDifficulty ; begin
9956: LD_INT 0
9958: PPUSH
// if difficulty = 1 then
9959: LD_OWVAR 67
9963: PUSH
9964: LD_INT 1
9966: EQUAL
9967: IFFALSE 10011
// begin RuSolMinLevel = 4 ;
9969: LD_ADDR_EXP 36
9973: PUSH
9974: LD_INT 4
9976: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9977: LD_ADDR_EXP 37
9981: PUSH
9982: LD_INT 7
9984: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9985: LD_INT 51
9987: PPUSH
9988: LD_INT 6
9990: PPUSH
9991: LD_INT 2
9993: PPUSH
9994: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9998: LD_INT 51
10000: PPUSH
10001: LD_INT 5
10003: PPUSH
10004: LD_INT 2
10006: PPUSH
10007: CALL_OW 322
// end ; if difficulty = 2 then
10011: LD_OWVAR 67
10015: PUSH
10016: LD_INT 2
10018: EQUAL
10019: IFFALSE 10115
// begin RuSolMinLevel = 5 ;
10021: LD_ADDR_EXP 36
10025: PUSH
10026: LD_INT 5
10028: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10029: LD_ADDR_EXP 37
10033: PUSH
10034: LD_INT 7
10036: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10037: LD_INT 51
10039: PPUSH
10040: LD_INT 6
10042: PPUSH
10043: LD_INT 2
10045: PPUSH
10046: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10050: LD_INT 57
10052: PPUSH
10053: LD_INT 6
10055: PPUSH
10056: LD_INT 2
10058: PPUSH
10059: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10063: LD_INT 63
10065: PPUSH
10066: LD_INT 6
10068: PPUSH
10069: LD_INT 2
10071: PPUSH
10072: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10076: LD_INT 51
10078: PPUSH
10079: LD_INT 5
10081: PPUSH
10082: LD_INT 2
10084: PPUSH
10085: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10089: LD_INT 5
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: LD_INT 2
10097: PPUSH
10098: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10102: LD_INT 5
10104: PPUSH
10105: LD_INT 5
10107: PPUSH
10108: LD_INT 2
10110: PPUSH
10111: CALL_OW 322
// end ; if difficulty = 3 then
10115: LD_OWVAR 67
10119: PUSH
10120: LD_INT 3
10122: EQUAL
10123: IFFALSE 10271
// begin RuSolMinLevel = 6 ;
10125: LD_ADDR_EXP 36
10129: PUSH
10130: LD_INT 6
10132: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10133: LD_ADDR_EXP 37
10137: PUSH
10138: LD_INT 8
10140: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10141: LD_INT 51
10143: PPUSH
10144: LD_INT 6
10146: PPUSH
10147: LD_INT 2
10149: PPUSH
10150: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10154: LD_INT 57
10156: PPUSH
10157: LD_INT 6
10159: PPUSH
10160: LD_INT 2
10162: PPUSH
10163: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10167: LD_INT 52
10169: PPUSH
10170: LD_INT 6
10172: PPUSH
10173: LD_INT 2
10175: PPUSH
10176: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10180: LD_INT 58
10182: PPUSH
10183: LD_INT 6
10185: PPUSH
10186: LD_INT 2
10188: PPUSH
10189: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10193: LD_INT 63
10195: PPUSH
10196: LD_INT 6
10198: PPUSH
10199: LD_INT 2
10201: PPUSH
10202: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10206: LD_INT 64
10208: PPUSH
10209: LD_INT 6
10211: PPUSH
10212: LD_INT 2
10214: PPUSH
10215: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10219: LD_INT 51
10221: PPUSH
10222: LD_INT 5
10224: PPUSH
10225: LD_INT 2
10227: PPUSH
10228: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10232: LD_INT 52
10234: PPUSH
10235: LD_INT 5
10237: PPUSH
10238: LD_INT 2
10240: PPUSH
10241: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10245: LD_INT 66
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: LD_INT 2
10253: PPUSH
10254: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10258: LD_INT 66
10260: PPUSH
10261: LD_INT 5
10263: PPUSH
10264: LD_INT 2
10266: PPUSH
10267: CALL_OW 322
// end ; end ;
10271: LD_VAR 0 1
10275: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10276: LD_INT 0
10278: PPUSH
10279: PPUSH
10280: PPUSH
10281: PPUSH
10282: PPUSH
// case position of 1 :
10283: LD_VAR 0 1
10287: PUSH
10288: LD_INT 1
10290: DOUBLE
10291: EQUAL
10292: IFTRUE 10296
10294: GO 10307
10296: POP
// area := westConv ; 2 :
10297: LD_ADDR_VAR 0 6
10301: PUSH
10302: LD_INT 20
10304: ST_TO_ADDR
10305: GO 10346
10307: LD_INT 2
10309: DOUBLE
10310: EQUAL
10311: IFTRUE 10315
10313: GO 10326
10315: POP
// area := midConv ; 3 :
10316: LD_ADDR_VAR 0 6
10320: PUSH
10321: LD_INT 21
10323: ST_TO_ADDR
10324: GO 10346
10326: LD_INT 3
10328: DOUBLE
10329: EQUAL
10330: IFTRUE 10334
10332: GO 10345
10334: POP
// area := eastConv ; end ;
10335: LD_ADDR_VAR 0 6
10339: PUSH
10340: LD_INT 22
10342: ST_TO_ADDR
10343: GO 10346
10345: POP
// area := AreaToList ( area , 0 ) ;
10346: LD_ADDR_VAR 0 6
10350: PUSH
10351: LD_VAR 0 6
10355: PPUSH
10356: LD_INT 0
10358: PPUSH
10359: CALL_OW 517
10363: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10364: LD_ADDR_VAR 0 3
10368: PUSH
10369: DOUBLE
10370: LD_INT 1
10372: DEC
10373: ST_TO_ADDR
10374: LD_VAR 0 6
10378: PUSH
10379: LD_INT 1
10381: ARRAY
10382: PUSH
10383: FOR_TO
10384: IFFALSE 10465
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10386: LD_VAR 0 6
10390: PUSH
10391: LD_INT 1
10393: ARRAY
10394: PUSH
10395: LD_VAR 0 3
10399: ARRAY
10400: PPUSH
10401: LD_VAR 0 6
10405: PUSH
10406: LD_INT 2
10408: ARRAY
10409: PUSH
10410: LD_VAR 0 3
10414: ARRAY
10415: PPUSH
10416: LD_INT 1
10418: PPUSH
10419: LD_INT 1
10421: PPUSH
10422: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10426: LD_VAR 0 6
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PUSH
10435: LD_VAR 0 3
10439: ARRAY
10440: PPUSH
10441: LD_VAR 0 6
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PUSH
10450: LD_VAR 0 3
10454: ARRAY
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: CALL_OW 331
// end ;
10463: GO 10383
10465: POP
10466: POP
// ruPossition = position ;
10467: LD_ADDR_EXP 41
10471: PUSH
10472: LD_VAR 0 1
10476: ST_TO_ADDR
// if position = 1 then
10477: LD_VAR 0 1
10481: PUSH
10482: LD_INT 1
10484: EQUAL
10485: IFFALSE 11233
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_INT 22
10494: PUSH
10495: LD_INT 3
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 25
10504: PUSH
10505: LD_INT 2
10507: PUSH
10508: EMPTY
10509: LIST
10510: LIST
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PPUSH
10516: CALL_OW 69
10520: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10521: LD_ADDR_VAR 0 5
10525: PUSH
10526: LD_INT 0
10528: PUSH
10529: LD_INT 49
10531: PUSH
10532: LD_INT 74
10534: PUSH
10535: LD_INT 3
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 4
10546: PUSH
10547: LD_INT 73
10549: PUSH
10550: LD_INT 88
10552: PUSH
10553: LD_INT 5
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 4
10564: PUSH
10565: LD_INT 56
10567: PUSH
10568: LD_INT 62
10570: PUSH
10571: LD_INT 3
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 29
10582: PUSH
10583: LD_INT 43
10585: PUSH
10586: LD_INT 68
10588: PUSH
10589: LD_INT 2
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: PUSH
10598: LD_INT 30
10600: PUSH
10601: LD_INT 43
10603: PUSH
10604: LD_INT 79
10606: PUSH
10607: LD_INT 5
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: LIST
10614: LIST
10615: PUSH
10616: LD_INT 28
10618: PUSH
10619: LD_INT 60
10621: PUSH
10622: LD_INT 75
10624: PUSH
10625: LD_INT 1
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 2
10636: PUSH
10637: LD_INT 50
10639: PUSH
10640: LD_INT 87
10642: PUSH
10643: LD_INT 1
10645: PUSH
10646: EMPTY
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 28
10654: PUSH
10655: LD_INT 45
10657: PUSH
10658: LD_INT 67
10660: PUSH
10661: LD_INT 2
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 17
10672: PUSH
10673: LD_INT 47
10675: PUSH
10676: LD_INT 84
10678: PUSH
10679: LD_INT 2
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: PUSH
10688: LD_INT 18
10690: PUSH
10691: LD_INT 46
10693: PUSH
10694: LD_INT 87
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: PUSH
10706: LD_INT 28
10708: PUSH
10709: LD_INT 41
10711: PUSH
10712: LD_INT 64
10714: PUSH
10715: LD_INT 5
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 32
10726: PUSH
10727: LD_INT 75
10729: PUSH
10730: LD_INT 76
10732: PUSH
10733: LD_INT 5
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 32
10744: PUSH
10745: LD_INT 77
10747: PUSH
10748: LD_INT 75
10750: PUSH
10751: LD_INT 5
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 32
10762: PUSH
10763: LD_INT 69
10765: PUSH
10766: LD_INT 68
10768: PUSH
10769: LD_INT 3
10771: PUSH
10772: EMPTY
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 32
10780: PUSH
10781: LD_INT 59
10783: PUSH
10784: LD_INT 96
10786: PUSH
10787: LD_INT 5
10789: PUSH
10790: EMPTY
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 32
10798: PUSH
10799: LD_INT 56
10801: PUSH
10802: LD_INT 96
10804: PUSH
10805: LD_INT 0
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: PUSH
10814: LD_INT 32
10816: PUSH
10817: LD_INT 51
10819: PUSH
10820: LD_INT 61
10822: PUSH
10823: LD_INT 3
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 32
10834: PUSH
10835: LD_INT 42
10837: PUSH
10838: LD_INT 60
10840: PUSH
10841: LD_INT 3
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: LD_INT 32
10852: PUSH
10853: LD_INT 36
10855: PUSH
10856: LD_INT 58
10858: PUSH
10859: LD_INT 3
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 32
10870: PUSH
10871: LD_INT 39
10873: PUSH
10874: LD_INT 59
10876: PUSH
10877: LD_INT 3
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: PUSH
10886: LD_INT 32
10888: PUSH
10889: LD_INT 61
10891: PUSH
10892: LD_INT 64
10894: PUSH
10895: LD_INT 3
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: PUSH
10904: LD_INT 33
10906: PUSH
10907: LD_INT 63
10909: PUSH
10910: LD_INT 90
10912: PUSH
10913: LD_INT 5
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 33
10924: PUSH
10925: LD_INT 64
10927: PUSH
10928: LD_INT 88
10930: PUSH
10931: LD_INT 5
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 33
10942: PUSH
10943: LD_INT 72
10945: PUSH
10946: LD_INT 82
10948: PUSH
10949: LD_INT 5
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: PUSH
10958: LD_INT 6
10960: PUSH
10961: LD_INT 42
10963: PUSH
10964: LD_INT 74
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: PUSH
10976: LD_INT 6
10978: PUSH
10979: LD_INT 56
10981: PUSH
10982: LD_INT 77
10984: PUSH
10985: LD_INT 2
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: PUSH
10994: LD_INT 21
10996: PUSH
10997: LD_INT 54
10999: PUSH
11000: LD_INT 91
11002: PUSH
11003: LD_INT 5
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: PUSH
11012: LD_INT 16
11014: PUSH
11015: LD_INT 50
11017: PUSH
11018: LD_INT 83
11020: PUSH
11021: LD_INT 3
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 24
11032: PUSH
11033: LD_INT 50
11035: PUSH
11036: LD_INT 90
11038: PUSH
11039: LD_INT 0
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: LIST
11046: LIST
11047: PUSH
11048: EMPTY
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11079: LD_ADDR_VAR 0 3
11083: PUSH
11084: LD_INT 22
11086: PUSH
11087: LD_INT 3
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: PUSH
11094: LD_INT 3
11096: PUSH
11097: LD_INT 25
11099: PUSH
11100: LD_INT 2
11102: PUSH
11103: EMPTY
11104: LIST
11105: LIST
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PPUSH
11115: CALL_OW 69
11119: PUSH
11120: FOR_IN
11121: IFFALSE 11140
// AddComAgressiveMove ( i , 53 , 82 ) ;
11123: LD_VAR 0 3
11127: PPUSH
11128: LD_INT 53
11130: PPUSH
11131: LD_INT 82
11133: PPUSH
11134: CALL_OW 174
11138: GO 11120
11140: POP
11141: POP
// for i := 1 to buildingsTab do
11142: LD_ADDR_VAR 0 3
11146: PUSH
11147: DOUBLE
11148: LD_INT 1
11150: DEC
11151: ST_TO_ADDR
11152: LD_VAR 0 5
11156: PUSH
11157: FOR_TO
11158: IFFALSE 11231
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11160: LD_VAR 0 4
11164: PPUSH
11165: LD_VAR 0 5
11169: PUSH
11170: LD_VAR 0 3
11174: ARRAY
11175: PUSH
11176: LD_INT 1
11178: ARRAY
11179: PPUSH
11180: LD_VAR 0 5
11184: PUSH
11185: LD_VAR 0 3
11189: ARRAY
11190: PUSH
11191: LD_INT 2
11193: ARRAY
11194: PPUSH
11195: LD_VAR 0 5
11199: PUSH
11200: LD_VAR 0 3
11204: ARRAY
11205: PUSH
11206: LD_INT 3
11208: ARRAY
11209: PPUSH
11210: LD_VAR 0 5
11214: PUSH
11215: LD_VAR 0 3
11219: ARRAY
11220: PUSH
11221: LD_INT 4
11223: ARRAY
11224: PPUSH
11225: CALL_OW 205
11229: GO 11157
11231: POP
11232: POP
// end ; if position = 2 then
11233: LD_VAR 0 1
11237: PUSH
11238: LD_INT 2
11240: EQUAL
11241: IFFALSE 11856
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11243: LD_ADDR_VAR 0 4
11247: PUSH
11248: LD_INT 22
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 25
11260: PUSH
11261: LD_INT 2
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: PPUSH
11272: CALL_OW 69
11276: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11277: LD_ADDR_VAR 0 5
11281: PUSH
11282: LD_INT 0
11284: PUSH
11285: LD_INT 104
11287: PUSH
11288: LD_INT 110
11290: PUSH
11291: LD_INT 5
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: LD_INT 4
11302: PUSH
11303: LD_INT 98
11305: PUSH
11306: LD_INT 90
11308: PUSH
11309: LD_INT 3
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: LIST
11316: LIST
11317: PUSH
11318: LD_INT 29
11320: PUSH
11321: LD_INT 103
11323: PUSH
11324: LD_INT 114
11326: PUSH
11327: LD_INT 2
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 30
11338: PUSH
11339: LD_INT 99
11341: PUSH
11342: LD_INT 114
11344: PUSH
11345: LD_INT 3
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 28
11356: PUSH
11357: LD_INT 100
11359: PUSH
11360: LD_INT 112
11362: PUSH
11363: LD_INT 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 2
11374: PUSH
11375: LD_INT 92
11377: PUSH
11378: LD_INT 101
11380: PUSH
11381: LD_INT 0
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 28
11392: PUSH
11393: LD_INT 97
11395: PUSH
11396: LD_INT 116
11398: PUSH
11399: LD_INT 5
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 17
11410: PUSH
11411: LD_INT 96
11413: PUSH
11414: LD_INT 101
11416: PUSH
11417: LD_INT 4
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 18
11428: PUSH
11429: LD_INT 88
11431: PUSH
11432: LD_INT 97
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 28
11446: PUSH
11447: LD_INT 106
11449: PUSH
11450: LD_INT 92
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 32
11464: PUSH
11465: LD_INT 88
11467: PUSH
11468: LD_INT 89
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 32
11482: PUSH
11483: LD_INT 86
11485: PUSH
11486: LD_INT 90
11488: PUSH
11489: LD_INT 2
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 32
11500: PUSH
11501: LD_INT 85
11503: PUSH
11504: LD_INT 99
11506: PUSH
11507: LD_INT 2
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 32
11518: PUSH
11519: LD_INT 85
11521: PUSH
11522: LD_INT 107
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 33
11536: PUSH
11537: LD_INT 105
11539: PUSH
11540: LD_INT 99
11542: PUSH
11543: LD_INT 1
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 33
11554: PUSH
11555: LD_INT 102
11557: PUSH
11558: LD_INT 92
11560: PUSH
11561: LD_INT 3
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 33
11572: PUSH
11573: LD_INT 105
11575: PUSH
11576: LD_INT 92
11578: PUSH
11579: LD_INT 2
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 6
11590: PUSH
11591: LD_INT 92
11593: PUSH
11594: LD_INT 110
11596: PUSH
11597: LD_INT 0
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 6
11608: PUSH
11609: LD_INT 103
11611: PUSH
11612: LD_INT 103
11614: PUSH
11615: LD_INT 5
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 21
11626: PUSH
11627: LD_INT 89
11629: PUSH
11630: LD_INT 101
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 16
11644: PUSH
11645: LD_INT 95
11647: PUSH
11648: LD_INT 104
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 24
11662: PUSH
11663: LD_INT 92
11665: PUSH
11666: LD_INT 105
11668: PUSH
11669: LD_INT 0
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11702: LD_ADDR_VAR 0 3
11706: PUSH
11707: LD_INT 22
11709: PUSH
11710: LD_INT 3
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 3
11719: PUSH
11720: LD_INT 25
11722: PUSH
11723: LD_INT 2
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: EMPTY
11731: LIST
11732: LIST
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PPUSH
11738: CALL_OW 69
11742: PUSH
11743: FOR_IN
11744: IFFALSE 11763
// AddComAgressiveMove ( i , 96 , 99 ) ;
11746: LD_VAR 0 3
11750: PPUSH
11751: LD_INT 96
11753: PPUSH
11754: LD_INT 99
11756: PPUSH
11757: CALL_OW 174
11761: GO 11743
11763: POP
11764: POP
// for i := 1 to buildingsTab do
11765: LD_ADDR_VAR 0 3
11769: PUSH
11770: DOUBLE
11771: LD_INT 1
11773: DEC
11774: ST_TO_ADDR
11775: LD_VAR 0 5
11779: PUSH
11780: FOR_TO
11781: IFFALSE 11854
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11783: LD_VAR 0 4
11787: PPUSH
11788: LD_VAR 0 5
11792: PUSH
11793: LD_VAR 0 3
11797: ARRAY
11798: PUSH
11799: LD_INT 1
11801: ARRAY
11802: PPUSH
11803: LD_VAR 0 5
11807: PUSH
11808: LD_VAR 0 3
11812: ARRAY
11813: PUSH
11814: LD_INT 2
11816: ARRAY
11817: PPUSH
11818: LD_VAR 0 5
11822: PUSH
11823: LD_VAR 0 3
11827: ARRAY
11828: PUSH
11829: LD_INT 3
11831: ARRAY
11832: PPUSH
11833: LD_VAR 0 5
11837: PUSH
11838: LD_VAR 0 3
11842: ARRAY
11843: PUSH
11844: LD_INT 4
11846: ARRAY
11847: PPUSH
11848: CALL_OW 205
11852: GO 11780
11854: POP
11855: POP
// end ; if position = 3 then
11856: LD_VAR 0 1
11860: PUSH
11861: LD_INT 3
11863: EQUAL
11864: IFFALSE 12650
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11866: LD_ADDR_VAR 0 4
11870: PUSH
11871: LD_INT 22
11873: PUSH
11874: LD_INT 3
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 25
11883: PUSH
11884: LD_INT 2
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PPUSH
11895: CALL_OW 69
11899: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11900: LD_ADDR_VAR 0 5
11904: PUSH
11905: LD_INT 0
11907: PUSH
11908: LD_INT 151
11910: PUSH
11911: LD_INT 71
11913: PUSH
11914: LD_INT 4
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: LD_INT 145
11928: PUSH
11929: LD_INT 53
11931: PUSH
11932: LD_INT 3
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 4
11943: PUSH
11944: LD_INT 172
11946: PUSH
11947: LD_INT 102
11949: PUSH
11950: LD_INT 5
11952: PUSH
11953: EMPTY
11954: LIST
11955: LIST
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 29
11961: PUSH
11962: LD_INT 152
11964: PUSH
11965: LD_INT 85
11967: PUSH
11968: LD_INT 3
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: PUSH
11977: LD_INT 30
11979: PUSH
11980: LD_INT 156
11982: PUSH
11983: LD_INT 92
11985: PUSH
11986: LD_INT 3
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_INT 151
12000: PUSH
12001: LD_INT 66
12003: PUSH
12004: LD_INT 4
12006: PUSH
12007: EMPTY
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: LD_INT 163
12018: PUSH
12019: LD_INT 95
12021: PUSH
12022: LD_INT 5
12024: PUSH
12025: EMPTY
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 28
12033: PUSH
12034: LD_INT 149
12036: PUSH
12037: LD_INT 63
12039: PUSH
12040: LD_INT 4
12042: PUSH
12043: EMPTY
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: PUSH
12049: LD_INT 17
12051: PUSH
12052: LD_INT 167
12054: PUSH
12055: LD_INT 99
12057: PUSH
12058: LD_INT 5
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 18
12069: PUSH
12070: LD_INT 163
12072: PUSH
12073: LD_INT 98
12075: PUSH
12076: LD_INT 0
12078: PUSH
12079: EMPTY
12080: LIST
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 28
12087: PUSH
12088: LD_INT 154
12090: PUSH
12091: LD_INT 70
12093: PUSH
12094: LD_INT 4
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 32
12105: PUSH
12106: LD_INT 155
12108: PUSH
12109: LD_INT 62
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: PUSH
12121: LD_INT 32
12123: PUSH
12124: LD_INT 161
12126: PUSH
12127: LD_INT 69
12129: PUSH
12130: LD_INT 4
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: PUSH
12139: LD_INT 32
12141: PUSH
12142: LD_INT 168
12144: PUSH
12145: LD_INT 78
12147: PUSH
12148: LD_INT 4
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: LIST
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: LD_INT 163
12162: PUSH
12163: LD_INT 80
12165: PUSH
12166: LD_INT 5
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 32
12177: PUSH
12178: LD_INT 136
12180: PUSH
12181: LD_INT 73
12183: PUSH
12184: LD_INT 0
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: PUSH
12193: LD_INT 32
12195: PUSH
12196: LD_INT 157
12198: PUSH
12199: LD_INT 98
12201: PUSH
12202: LD_INT 0
12204: PUSH
12205: EMPTY
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: LD_INT 150
12216: PUSH
12217: LD_INT 87
12219: PUSH
12220: LD_INT 1
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 33
12231: PUSH
12232: LD_INT 171
12234: PUSH
12235: LD_INT 97
12237: PUSH
12238: LD_INT 4
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 33
12249: PUSH
12250: LD_INT 168
12252: PUSH
12253: LD_INT 92
12255: PUSH
12256: LD_INT 4
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PUSH
12265: LD_INT 33
12267: PUSH
12268: LD_INT 166
12270: PUSH
12271: LD_INT 80
12273: PUSH
12274: LD_INT 5
12276: PUSH
12277: EMPTY
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: PUSH
12283: LD_INT 33
12285: PUSH
12286: LD_INT 141
12288: PUSH
12289: LD_INT 54
12291: PUSH
12292: LD_INT 2
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 33
12303: PUSH
12304: LD_INT 133
12306: PUSH
12307: LD_INT 57
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 33
12321: PUSH
12322: LD_INT 132
12324: PUSH
12325: LD_INT 61
12327: PUSH
12328: LD_INT 2
12330: PUSH
12331: EMPTY
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: PUSH
12337: LD_INT 33
12339: PUSH
12340: LD_INT 150
12342: PUSH
12343: LD_INT 82
12345: PUSH
12346: LD_INT 0
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 33
12357: PUSH
12358: LD_INT 132
12360: PUSH
12361: LD_INT 72
12363: PUSH
12364: LD_INT 0
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 6
12375: PUSH
12376: LD_INT 146
12378: PUSH
12379: LD_INT 64
12381: PUSH
12382: LD_INT 4
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 6
12393: PUSH
12394: LD_INT 159
12396: PUSH
12397: LD_INT 85
12399: PUSH
12400: LD_INT 4
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 21
12411: PUSH
12412: LD_INT 163
12414: PUSH
12415: LD_INT 91
12417: PUSH
12418: LD_INT 3
12420: PUSH
12421: EMPTY
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: PUSH
12427: LD_INT 16
12429: PUSH
12430: LD_INT 166
12432: PUSH
12433: LD_INT 95
12435: PUSH
12436: LD_INT 4
12438: PUSH
12439: EMPTY
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 24
12447: PUSH
12448: LD_INT 159
12450: PUSH
12451: LD_INT 95
12453: PUSH
12454: LD_INT 1
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12496: LD_ADDR_VAR 0 3
12500: PUSH
12501: LD_INT 22
12503: PUSH
12504: LD_INT 3
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 3
12513: PUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 2
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: PUSH
12537: FOR_IN
12538: IFFALSE 12557
// AddComAgressiveMove ( i , 141 , 65 ) ;
12540: LD_VAR 0 3
12544: PPUSH
12545: LD_INT 141
12547: PPUSH
12548: LD_INT 65
12550: PPUSH
12551: CALL_OW 174
12555: GO 12537
12557: POP
12558: POP
// for i := 1 to buildingsTab do
12559: LD_ADDR_VAR 0 3
12563: PUSH
12564: DOUBLE
12565: LD_INT 1
12567: DEC
12568: ST_TO_ADDR
12569: LD_VAR 0 5
12573: PUSH
12574: FOR_TO
12575: IFFALSE 12648
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12577: LD_VAR 0 4
12581: PPUSH
12582: LD_VAR 0 5
12586: PUSH
12587: LD_VAR 0 3
12591: ARRAY
12592: PUSH
12593: LD_INT 1
12595: ARRAY
12596: PPUSH
12597: LD_VAR 0 5
12601: PUSH
12602: LD_VAR 0 3
12606: ARRAY
12607: PUSH
12608: LD_INT 2
12610: ARRAY
12611: PPUSH
12612: LD_VAR 0 5
12616: PUSH
12617: LD_VAR 0 3
12621: ARRAY
12622: PUSH
12623: LD_INT 3
12625: ARRAY
12626: PPUSH
12627: LD_VAR 0 5
12631: PUSH
12632: LD_VAR 0 3
12636: ARRAY
12637: PUSH
12638: LD_INT 4
12640: ARRAY
12641: PPUSH
12642: CALL_OW 205
12646: GO 12574
12648: POP
12649: POP
// end ; end ;
12650: LD_VAR 0 2
12654: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12655: LD_INT 0
12657: PPUSH
12658: PPUSH
12659: PPUSH
12660: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12661: LD_ADDR_VAR 0 3
12665: PUSH
12666: LD_INT 22
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 25
12678: PUSH
12679: LD_INT 2
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: PPUSH
12690: CALL_OW 69
12694: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12695: LD_VAR 0 3
12699: PPUSH
12700: LD_INT 0
12702: PPUSH
12703: LD_INT 71
12705: PPUSH
12706: LD_INT 15
12708: PPUSH
12709: LD_INT 3
12711: PPUSH
12712: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12716: LD_ADDR_VAR 0 4
12720: PUSH
12721: LD_INT 6
12723: PUSH
12724: LD_INT 77
12726: PUSH
12727: LD_INT 18
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 4
12741: PUSH
12742: LD_INT 77
12744: PUSH
12745: LD_INT 26
12747: PUSH
12748: LD_INT 0
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 31
12759: PUSH
12760: LD_INT 82
12762: PUSH
12763: LD_INT 28
12765: PUSH
12766: LD_INT 0
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 31
12777: PUSH
12778: LD_INT 84
12780: PUSH
12781: LD_INT 21
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 31
12795: PUSH
12796: LD_INT 66
12798: PUSH
12799: LD_INT 14
12801: PUSH
12802: LD_INT 2
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 27
12813: PUSH
12814: LD_INT 67
12816: PUSH
12817: LD_INT 18
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 27
12831: PUSH
12832: LD_INT 69
12834: PUSH
12835: LD_INT 23
12837: PUSH
12838: LD_INT 2
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: ST_TO_ADDR
// for i := 1 to buildingsTab do
12856: LD_ADDR_VAR 0 2
12860: PUSH
12861: DOUBLE
12862: LD_INT 1
12864: DEC
12865: ST_TO_ADDR
12866: LD_VAR 0 4
12870: PUSH
12871: FOR_TO
12872: IFFALSE 12945
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12874: LD_VAR 0 3
12878: PPUSH
12879: LD_VAR 0 4
12883: PUSH
12884: LD_VAR 0 2
12888: ARRAY
12889: PUSH
12890: LD_INT 1
12892: ARRAY
12893: PPUSH
12894: LD_VAR 0 4
12898: PUSH
12899: LD_VAR 0 2
12903: ARRAY
12904: PUSH
12905: LD_INT 2
12907: ARRAY
12908: PPUSH
12909: LD_VAR 0 4
12913: PUSH
12914: LD_VAR 0 2
12918: ARRAY
12919: PUSH
12920: LD_INT 3
12922: ARRAY
12923: PPUSH
12924: LD_VAR 0 4
12928: PUSH
12929: LD_VAR 0 2
12933: ARRAY
12934: PUSH
12935: LD_INT 4
12937: ARRAY
12938: PPUSH
12939: CALL_OW 205
12943: GO 12871
12945: POP
12946: POP
// end ;
12947: LD_VAR 0 1
12951: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12952: LD_INT 0
12954: PPUSH
12955: PPUSH
12956: PPUSH
12957: PPUSH
12958: PPUSH
12959: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12960: LD_ADDR_VAR 0 7
12964: PUSH
12965: LD_INT 22
12967: PUSH
12968: LD_VAR 0 1
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: PUSH
12977: LD_INT 25
12979: PUSH
12980: LD_INT 9
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PPUSH
12991: CALL_OW 69
12995: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12996: LD_ADDR_VAR 0 8
13000: PUSH
13001: LD_INT 22
13003: PUSH
13004: LD_VAR 0 2
13008: PUSH
13009: EMPTY
13010: LIST
13011: LIST
13012: PUSH
13013: LD_INT 3
13015: PUSH
13016: LD_INT 21
13018: PUSH
13019: LD_INT 3
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PPUSH
13034: CALL_OW 69
13038: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13039: LD_ADDR_VAR 0 5
13043: PUSH
13044: LD_INT 1
13046: PPUSH
13047: LD_INT 3
13049: PPUSH
13050: CALL_OW 12
13054: ST_TO_ADDR
// for i = 1 to list do
13055: LD_ADDR_VAR 0 6
13059: PUSH
13060: DOUBLE
13061: LD_INT 1
13063: DEC
13064: ST_TO_ADDR
13065: LD_VAR 0 7
13069: PUSH
13070: FOR_TO
13071: IFFALSE 14061
// for ta in filter do
13073: LD_ADDR_VAR 0 4
13077: PUSH
13078: LD_VAR 0 8
13082: PUSH
13083: FOR_IN
13084: IFFALSE 14057
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13086: LD_VAR 0 7
13090: PUSH
13091: LD_VAR 0 6
13095: ARRAY
13096: PPUSH
13097: LD_VAR 0 4
13101: PPUSH
13102: CALL_OW 296
13106: PUSH
13107: LD_INT 15
13109: LESSEQUAL
13110: IFFALSE 14055
// begin case c of 1 :
13112: LD_VAR 0 5
13116: PUSH
13117: LD_INT 1
13119: DOUBLE
13120: EQUAL
13121: IFTRUE 13125
13123: GO 13557
13125: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13126: LD_VAR 0 7
13130: PUSH
13131: LD_VAR 0 6
13135: ARRAY
13136: PPUSH
13137: LD_VAR 0 4
13141: PPUSH
13142: CALL_OW 250
13146: PPUSH
13147: LD_VAR 0 4
13151: PPUSH
13152: CALL_OW 251
13156: PPUSH
13157: CALL_OW 154
// if eventVar2 = 0 then
13161: LD_EXP 62
13165: PUSH
13166: LD_INT 0
13168: EQUAL
13169: IFFALSE 13555
// begin eventVar2 = 1 ;
13171: LD_ADDR_EXP 62
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13179: LD_INT 245
13181: PPUSH
13182: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13186: LD_VAR 0 4
13190: PPUSH
13191: CALL_OW 250
13195: PPUSH
13196: LD_VAR 0 4
13200: PPUSH
13201: CALL_OW 251
13205: PPUSH
13206: CALL_OW 84
// DialogueOn ;
13210: CALL_OW 6
// if IsOK ( Cyrus ) then
13214: LD_EXP 5
13218: PPUSH
13219: CALL_OW 302
13223: IFFALSE 13239
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13225: LD_EXP 5
13229: PPUSH
13230: LD_STRING D9a-Cyrus-1
13232: PPUSH
13233: CALL_OW 88
// end else
13237: GO 13361
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13239: LD_INT 22
13241: PUSH
13242: LD_INT 1
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: LD_INT 26
13251: PUSH
13252: LD_INT 1
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: PUSH
13259: LD_INT 2
13261: PUSH
13262: LD_INT 25
13264: PUSH
13265: LD_INT 1
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: PUSH
13272: LD_INT 25
13274: PUSH
13275: LD_INT 2
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: LD_INT 25
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 4
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 25
13304: PUSH
13305: LD_INT 5
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: LIST
13324: PPUSH
13325: CALL_OW 69
13329: PUSH
13330: LD_EXP 1
13334: PUSH
13335: LD_EXP 14
13339: PUSH
13340: LD_EXP 5
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: DIFF
13350: PPUSH
13351: LD_STRING D9a-Sol1-1
13353: PPUSH
13354: LD_STRING D9a-Sol1-1
13356: PPUSH
13357: CALL 9607 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13361: LD_INT 22
13363: PUSH
13364: LD_INT 1
13366: PUSH
13367: EMPTY
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 26
13373: PUSH
13374: LD_INT 1
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: PUSH
13381: LD_INT 2
13383: PUSH
13384: LD_INT 25
13386: PUSH
13387: LD_INT 1
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 25
13396: PUSH
13397: LD_INT 2
13399: PUSH
13400: EMPTY
13401: LIST
13402: LIST
13403: PUSH
13404: LD_INT 25
13406: PUSH
13407: LD_INT 3
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 25
13416: PUSH
13417: LD_INT 4
13419: PUSH
13420: EMPTY
13421: LIST
13422: LIST
13423: PUSH
13424: LD_INT 25
13426: PUSH
13427: LD_INT 5
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: EMPTY
13435: LIST
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: LIST
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: PPUSH
13447: CALL_OW 69
13451: PUSH
13452: LD_EXP 1
13456: PUSH
13457: LD_EXP 14
13461: PUSH
13462: LD_EXP 5
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: DIFF
13472: PPUSH
13473: LD_STRING D9b-Sol1-1
13475: PPUSH
13476: LD_STRING D9b-Sol1-1
13478: PPUSH
13479: CALL 9607 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13483: LD_STRING 09_arInfo
13485: PPUSH
13486: LD_INT 0
13488: PPUSH
13489: CALL_OW 30
13493: PUSH
13494: LD_INT 1
13496: EQUAL
13497: IFFALSE 13511
// Say ( JMM , D9a-JMM-1 ) ;
13499: LD_EXP 1
13503: PPUSH
13504: LD_STRING D9a-JMM-1
13506: PPUSH
13507: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13511: LD_EXP 1
13515: PPUSH
13516: LD_STRING D9c-JMM-1
13518: PPUSH
13519: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13523: LD_INT 12
13525: PPUSH
13526: LD_INT 1
13528: PPUSH
13529: CALL_OW 321
13533: PUSH
13534: LD_INT 2
13536: EQUAL
13537: IFFALSE 13551
// Say ( JMM , D9c-JMM-1a ) ;
13539: LD_EXP 1
13543: PPUSH
13544: LD_STRING D9c-JMM-1a
13546: PPUSH
13547: CALL_OW 88
// DialogueOff ;
13551: CALL_OW 7
// end ; end ; 2 :
13555: GO 14055
13557: LD_INT 2
13559: DOUBLE
13560: EQUAL
13561: IFTRUE 13565
13563: GO 14023
13565: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13566: LD_VAR 0 7
13570: PUSH
13571: LD_VAR 0 6
13575: ARRAY
13576: PPUSH
13577: LD_VAR 0 4
13581: PPUSH
13582: CALL_OW 250
13586: PUSH
13587: LD_INT 1
13589: NEG
13590: PPUSH
13591: LD_INT 1
13593: PPUSH
13594: CALL_OW 12
13598: PLUS
13599: PPUSH
13600: LD_VAR 0 4
13604: PPUSH
13605: CALL_OW 251
13609: PUSH
13610: LD_INT 1
13612: NEG
13613: PPUSH
13614: LD_INT 1
13616: PPUSH
13617: CALL_OW 12
13621: PLUS
13622: PPUSH
13623: CALL_OW 153
// if eventVar2 = 0 then
13627: LD_EXP 62
13631: PUSH
13632: LD_INT 0
13634: EQUAL
13635: IFFALSE 14021
// begin eventVar2 = 1 ;
13637: LD_ADDR_EXP 62
13641: PUSH
13642: LD_INT 1
13644: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13645: LD_INT 245
13647: PPUSH
13648: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13652: LD_VAR 0 4
13656: PPUSH
13657: CALL_OW 250
13661: PPUSH
13662: LD_VAR 0 4
13666: PPUSH
13667: CALL_OW 251
13671: PPUSH
13672: CALL_OW 84
// DialogueOn ;
13676: CALL_OW 6
// if IsOK ( Cyrus ) then
13680: LD_EXP 5
13684: PPUSH
13685: CALL_OW 302
13689: IFFALSE 13705
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13691: LD_EXP 5
13695: PPUSH
13696: LD_STRING D9a-Cyrus-1
13698: PPUSH
13699: CALL_OW 88
// end else
13703: GO 13827
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13705: LD_INT 22
13707: PUSH
13708: LD_INT 1
13710: PUSH
13711: EMPTY
13712: LIST
13713: LIST
13714: PUSH
13715: LD_INT 26
13717: PUSH
13718: LD_INT 1
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: LD_INT 2
13727: PUSH
13728: LD_INT 25
13730: PUSH
13731: LD_INT 1
13733: PUSH
13734: EMPTY
13735: LIST
13736: LIST
13737: PUSH
13738: LD_INT 25
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: EMPTY
13745: LIST
13746: LIST
13747: PUSH
13748: LD_INT 25
13750: PUSH
13751: LD_INT 3
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 25
13760: PUSH
13761: LD_INT 4
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: LD_INT 25
13770: PUSH
13771: LD_INT 5
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: LIST
13790: PPUSH
13791: CALL_OW 69
13795: PUSH
13796: LD_EXP 1
13800: PUSH
13801: LD_EXP 14
13805: PUSH
13806: LD_EXP 5
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: DIFF
13816: PPUSH
13817: LD_STRING D9a-Sol1-1
13819: PPUSH
13820: LD_STRING D9a-Sol1-1
13822: PPUSH
13823: CALL 9607 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13827: LD_INT 22
13829: PUSH
13830: LD_INT 1
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 26
13839: PUSH
13840: LD_INT 1
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: LD_INT 25
13852: PUSH
13853: LD_INT 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 25
13862: PUSH
13863: LD_INT 2
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 25
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: LD_INT 25
13882: PUSH
13883: LD_INT 4
13885: PUSH
13886: EMPTY
13887: LIST
13888: LIST
13889: PUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 5
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PPUSH
13913: CALL_OW 69
13917: PUSH
13918: LD_EXP 1
13922: PUSH
13923: LD_EXP 14
13927: PUSH
13928: LD_EXP 5
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: DIFF
13938: PPUSH
13939: LD_STRING D9b-Sol1-1
13941: PPUSH
13942: LD_STRING D9b-Sol1-1
13944: PPUSH
13945: CALL 9607 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13949: LD_STRING 09_arInfo
13951: PPUSH
13952: LD_INT 0
13954: PPUSH
13955: CALL_OW 30
13959: PUSH
13960: LD_INT 1
13962: EQUAL
13963: IFFALSE 13977
// Say ( JMM , D9a-JMM-1 ) ;
13965: LD_EXP 1
13969: PPUSH
13970: LD_STRING D9a-JMM-1
13972: PPUSH
13973: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13977: LD_EXP 1
13981: PPUSH
13982: LD_STRING D9c-JMM-1
13984: PPUSH
13985: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13989: LD_INT 12
13991: PPUSH
13992: LD_INT 1
13994: PPUSH
13995: CALL_OW 321
13999: PUSH
14000: LD_INT 2
14002: EQUAL
14003: IFFALSE 14017
// Say ( JMM , D9c-JMM-1a ) ;
14005: LD_EXP 1
14009: PPUSH
14010: LD_STRING D9c-JMM-1a
14012: PPUSH
14013: CALL_OW 88
// DialogueOff ;
14017: CALL_OW 7
// end ; end ; 3 :
14021: GO 14055
14023: LD_INT 3
14025: DOUBLE
14026: EQUAL
14027: IFTRUE 14031
14029: GO 14054
14031: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14032: LD_VAR 0 7
14036: PUSH
14037: LD_VAR 0 6
14041: ARRAY
14042: PPUSH
14043: LD_VAR 0 4
14047: PPUSH
14048: CALL_OW 115
14052: GO 14055
14054: POP
// end ; end ;
14055: GO 13083
14057: POP
14058: POP
14059: GO 13070
14061: POP
14062: POP
// end ;
14063: LD_VAR 0 3
14067: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14068: LD_INT 0
14070: PPUSH
14071: PPUSH
14072: PPUSH
14073: PPUSH
// for i = 1 to 72 do
14074: LD_ADDR_VAR 0 5
14078: PUSH
14079: DOUBLE
14080: LD_INT 1
14082: DEC
14083: ST_TO_ADDR
14084: LD_INT 72
14086: PUSH
14087: FOR_TO
14088: IFFALSE 14146
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14090: LD_VAR 0 5
14094: PPUSH
14095: LD_VAR 0 1
14099: PPUSH
14100: CALL_OW 321
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: PUSH
14109: LD_VAR 0 5
14113: PPUSH
14114: LD_VAR 0 3
14118: PPUSH
14119: CALL_OW 482
14123: PUSH
14124: LD_INT 1
14126: EQUAL
14127: AND
14128: IFFALSE 14144
// AddComResearch ( lab , i ) ;
14130: LD_VAR 0 2
14134: PPUSH
14135: LD_VAR 0 5
14139: PPUSH
14140: CALL_OW 184
14144: GO 14087
14146: POP
14147: POP
// end ;
14148: LD_VAR 0 4
14152: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14153: LD_INT 0
14155: PPUSH
14156: PPUSH
14157: PPUSH
14158: PPUSH
14159: PPUSH
14160: PPUSH
14161: PPUSH
14162: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14163: LD_ADDR_VAR 0 6
14167: PUSH
14168: LD_INT 22
14170: PUSH
14171: LD_VAR 0 1
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: LD_INT 56
14182: PUSH
14183: EMPTY
14184: LIST
14185: PUSH
14186: LD_INT 24
14188: PUSH
14189: LD_INT 700
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: LD_INT 60
14201: PUSH
14202: EMPTY
14203: LIST
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: LD_INT 25
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 25
14224: PUSH
14225: LD_INT 9
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14249: LD_ADDR_VAR 0 7
14253: PUSH
14254: LD_INT 22
14256: PUSH
14257: LD_VAR 0 1
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: LD_INT 30
14268: PUSH
14269: LD_INT 32
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: PUSH
14276: LD_INT 58
14278: PUSH
14279: EMPTY
14280: LIST
14281: PUSH
14282: LD_INT 24
14284: PUSH
14285: LD_INT 251
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PPUSH
14298: CALL_OW 69
14302: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14303: LD_ADDR_VAR 0 9
14307: PUSH
14308: LD_INT 22
14310: PUSH
14311: LD_VAR 0 1
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 2
14322: PUSH
14323: LD_INT 30
14325: PUSH
14326: LD_INT 4
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 30
14335: PUSH
14336: LD_INT 5
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 24
14350: PUSH
14351: LD_INT 251
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: EMPTY
14359: LIST
14360: LIST
14361: LIST
14362: PPUSH
14363: CALL_OW 69
14367: ST_TO_ADDR
// if barrackList > 0 then
14368: LD_VAR 0 9
14372: PUSH
14373: LD_INT 0
14375: GREATER
14376: IFFALSE 14511
// begin if turretList = 0 then
14378: LD_VAR 0 7
14382: PUSH
14383: LD_INT 0
14385: EQUAL
14386: IFFALSE 14435
// begin for i in soldiers_list do
14388: LD_ADDR_VAR 0 4
14392: PUSH
14393: LD_VAR 0 6
14397: PUSH
14398: FOR_IN
14399: IFFALSE 14431
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14401: LD_VAR 0 4
14405: PPUSH
14406: LD_VAR 0 9
14410: PUSH
14411: LD_INT 1
14413: PPUSH
14414: LD_VAR 0 9
14418: PPUSH
14419: CALL_OW 12
14423: ARRAY
14424: PPUSH
14425: CALL_OW 120
14429: GO 14398
14431: POP
14432: POP
// end else
14433: GO 14511
// begin for i in barrackList do
14435: LD_ADDR_VAR 0 4
14439: PUSH
14440: LD_VAR 0 9
14444: PUSH
14445: FOR_IN
14446: IFFALSE 14509
// begin insideUnits = UnitsInside ( i ) ;
14448: LD_ADDR_VAR 0 10
14452: PUSH
14453: LD_VAR 0 4
14457: PPUSH
14458: CALL_OW 313
14462: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14463: LD_VAR 0 10
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: LD_VAR 0 7
14476: PUSH
14477: LD_INT 1
14479: ARRAY
14480: PPUSH
14481: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14485: LD_VAR 0 6
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: PPUSH
14494: LD_VAR 0 7
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: CALL_OW 120
// end ;
14507: GO 14445
14509: POP
14510: POP
// end ; end ; end ;
14511: LD_VAR 0 3
14515: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14516: LD_INT 0
14518: PPUSH
14519: PPUSH
14520: PPUSH
14521: PPUSH
14522: PPUSH
14523: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14524: LD_ADDR_VAR 0 6
14528: PUSH
14529: LD_VAR 0 2
14533: PPUSH
14534: CALL_OW 313
14538: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14539: LD_ADDR_VAR 0 7
14543: PUSH
14544: LD_INT 22
14546: PUSH
14547: LD_VAR 0 1
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 25
14558: PUSH
14559: LD_INT 2
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: LD_INT 24
14568: PUSH
14569: LD_INT 1000
14571: PUSH
14572: EMPTY
14573: LIST
14574: LIST
14575: PUSH
14576: LD_INT 3
14578: PUSH
14579: LD_INT 54
14581: PUSH
14582: EMPTY
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: EMPTY
14590: LIST
14591: LIST
14592: LIST
14593: LIST
14594: PPUSH
14595: CALL_OW 69
14599: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: LD_INT 22
14607: PUSH
14608: LD_VAR 0 1
14612: PUSH
14613: EMPTY
14614: LIST
14615: LIST
14616: PUSH
14617: LD_INT 21
14619: PUSH
14620: LD_INT 3
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: LD_INT 3
14629: PUSH
14630: LD_INT 24
14632: PUSH
14633: LD_INT 1000
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: PPUSH
14652: CALL_OW 69
14656: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14657: LD_VAR 0 4
14661: NOT
14662: PUSH
14663: LD_VAR 0 7
14667: NOT
14668: AND
14669: PUSH
14670: LD_EXP 42
14674: NOT
14675: AND
14676: IFFALSE 14680
// exit ;
14678: GO 14871
// if buildings_list > 0 and engineerOkInside then
14680: LD_VAR 0 4
14684: PUSH
14685: LD_INT 0
14687: GREATER
14688: PUSH
14689: LD_VAR 0 6
14693: AND
14694: IFFALSE 14748
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14696: LD_ADDR_VAR 0 5
14700: PUSH
14701: LD_INT 22
14703: PUSH
14704: LD_VAR 0 1
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: LD_INT 25
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: PUSH
14723: EMPTY
14724: LIST
14725: LIST
14726: PPUSH
14727: CALL_OW 69
14731: PUSH
14732: FOR_IN
14733: IFFALSE 14746
// ComExitBuilding ( i ) ;
14735: LD_VAR 0 5
14739: PPUSH
14740: CALL_OW 122
14744: GO 14732
14746: POP
14747: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14748: LD_VAR 0 4
14752: PUSH
14753: LD_INT 0
14755: GREATER
14756: PUSH
14757: LD_VAR 0 7
14761: PUSH
14762: LD_INT 0
14764: GREATER
14765: AND
14766: IFFALSE 14820
// begin for i in engineerOkOutside do
14768: LD_ADDR_VAR 0 5
14772: PUSH
14773: LD_VAR 0 7
14777: PUSH
14778: FOR_IN
14779: IFFALSE 14818
// for j in buildings_list do
14781: LD_ADDR_VAR 0 8
14785: PUSH
14786: LD_VAR 0 4
14790: PUSH
14791: FOR_IN
14792: IFFALSE 14814
// ComRepairBuilding ( i , j [ 1 ] ) ;
14794: LD_VAR 0 5
14798: PPUSH
14799: LD_VAR 0 8
14803: PUSH
14804: LD_INT 1
14806: ARRAY
14807: PPUSH
14808: CALL_OW 130
14812: GO 14791
14814: POP
14815: POP
14816: GO 14778
14818: POP
14819: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14820: LD_VAR 0 4
14824: PUSH
14825: LD_INT 0
14827: EQUAL
14828: PUSH
14829: LD_VAR 0 7
14833: PUSH
14834: LD_INT 0
14836: GREATER
14837: AND
14838: IFFALSE 14871
// for i in engineerOkOutside do
14840: LD_ADDR_VAR 0 5
14844: PUSH
14845: LD_VAR 0 7
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14869
// ComEnterUnit ( i , building ) ;
14853: LD_VAR 0 5
14857: PPUSH
14858: LD_VAR 0 2
14862: PPUSH
14863: CALL_OW 120
14867: GO 14850
14869: POP
14870: POP
// end ;
14871: LD_VAR 0 3
14875: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14876: LD_INT 0
14878: PPUSH
14879: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14880: LD_INT 22
14882: PUSH
14883: LD_VAR 0 1
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PUSH
14892: LD_INT 25
14894: PUSH
14895: LD_INT 2
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PPUSH
14906: CALL_OW 69
14910: PUSH
14911: LD_INT 0
14913: GREATER
14914: PUSH
14915: LD_INT 22
14917: PUSH
14918: LD_VAR 0 1
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 21
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: LD_INT 3
14939: PUSH
14940: LD_INT 24
14942: PUSH
14943: LD_INT 1000
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: LIST
14958: PPUSH
14959: CALL_OW 69
14963: PUSH
14964: LD_INT 0
14966: EQUAL
14967: AND
14968: PUSH
14969: LD_VAR 0 2
14973: PUSH
14974: LD_INT 0
14976: GREATER
14977: AND
14978: IFFALSE 15077
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14980: LD_ADDR_VAR 0 4
14984: PUSH
14985: LD_INT 22
14987: PUSH
14988: LD_VAR 0 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 25
14999: PUSH
15000: LD_INT 2
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PPUSH
15011: CALL_OW 69
15015: PUSH
15016: FOR_IN
15017: IFFALSE 15075
// begin AddComExitBuilding ( i ) ;
15019: LD_VAR 0 4
15023: PPUSH
15024: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15028: LD_VAR 0 4
15032: PPUSH
15033: LD_VAR 0 2
15037: PUSH
15038: LD_INT 1
15040: ARRAY
15041: PPUSH
15042: LD_VAR 0 2
15046: PUSH
15047: LD_INT 2
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 2
15055: PUSH
15056: LD_INT 3
15058: ARRAY
15059: PPUSH
15060: LD_VAR 0 2
15064: PUSH
15065: LD_INT 4
15067: ARRAY
15068: PPUSH
15069: CALL_OW 205
// end ;
15073: GO 15016
15075: POP
15076: POP
// end ; end ;
15077: LD_VAR 0 3
15081: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15093: LD_ADDR_VAR 0 6
15097: PUSH
15098: LD_INT 22
15100: PUSH
15101: LD_VAR 0 1
15105: PUSH
15106: EMPTY
15107: LIST
15108: LIST
15109: PUSH
15110: LD_INT 25
15112: PUSH
15113: LD_INT 4
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 24
15122: PUSH
15123: LD_INT 251
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 69
15139: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15140: LD_ADDR_VAR 0 7
15144: PUSH
15145: LD_VAR 0 3
15149: PPUSH
15150: LD_INT 22
15152: PUSH
15153: LD_VAR 0 1
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 25
15164: PUSH
15165: LD_INT 4
15167: PUSH
15168: EMPTY
15169: LIST
15170: LIST
15171: PUSH
15172: LD_INT 50
15174: PUSH
15175: EMPTY
15176: LIST
15177: PUSH
15178: EMPTY
15179: LIST
15180: LIST
15181: LIST
15182: PPUSH
15183: CALL_OW 70
15187: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15188: LD_ADDR_VAR 0 10
15192: PUSH
15193: LD_VAR 0 3
15197: PPUSH
15198: LD_INT 22
15200: PUSH
15201: LD_VAR 0 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 21
15212: PUSH
15213: LD_INT 1
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 3
15222: PUSH
15223: LD_INT 25
15225: PUSH
15226: LD_INT 3
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: PUSH
15237: LD_INT 3
15239: PUSH
15240: LD_INT 24
15242: PUSH
15243: LD_INT 750
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: PPUSH
15260: CALL_OW 70
15264: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15265: LD_ADDR_VAR 0 11
15269: PUSH
15270: LD_VAR 0 2
15274: PPUSH
15275: LD_INT 22
15277: PUSH
15278: LD_VAR 0 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 21
15289: PUSH
15290: LD_INT 1
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 3
15299: PUSH
15300: LD_INT 25
15302: PUSH
15303: LD_INT 3
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: LD_INT 24
15319: PUSH
15320: LD_INT 1000
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: PPUSH
15337: CALL_OW 70
15341: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15342: LD_VAR 0 10
15346: NOT
15347: PUSH
15348: LD_VAR 0 7
15352: NOT
15353: AND
15354: PUSH
15355: LD_VAR 0 11
15359: NOT
15360: AND
15361: IFFALSE 15365
// exit ;
15363: GO 15625
// if damageUnits > 0 and sci_list > 0 then
15365: LD_VAR 0 10
15369: PUSH
15370: LD_INT 0
15372: GREATER
15373: PUSH
15374: LD_VAR 0 6
15378: PUSH
15379: LD_INT 0
15381: GREATER
15382: AND
15383: IFFALSE 15416
// for i in damageUnits do
15385: LD_ADDR_VAR 0 8
15389: PUSH
15390: LD_VAR 0 10
15394: PUSH
15395: FOR_IN
15396: IFFALSE 15414
// ComMoveToArea ( i , healArea ) ;
15398: LD_VAR 0 8
15402: PPUSH
15403: LD_VAR 0 2
15407: PPUSH
15408: CALL_OW 113
15412: GO 15395
15414: POP
15415: POP
// if unitsToHeal > 0 and sci_list > 0 then
15416: LD_VAR 0 11
15420: PUSH
15421: LD_INT 0
15423: GREATER
15424: PUSH
15425: LD_VAR 0 6
15429: PUSH
15430: LD_INT 0
15432: GREATER
15433: AND
15434: IFFALSE 15493
// begin for i in sci_list do
15436: LD_ADDR_VAR 0 8
15440: PUSH
15441: LD_VAR 0 6
15445: PUSH
15446: FOR_IN
15447: IFFALSE 15491
// begin ComExitBuilding ( i ) ;
15449: LD_VAR 0 8
15453: PPUSH
15454: CALL_OW 122
// for j in unitsToHeal do
15458: LD_ADDR_VAR 0 9
15462: PUSH
15463: LD_VAR 0 11
15467: PUSH
15468: FOR_IN
15469: IFFALSE 15487
// AddComHeal ( i , j ) ;
15471: LD_VAR 0 8
15475: PPUSH
15476: LD_VAR 0 9
15480: PPUSH
15481: CALL_OW 188
15485: GO 15468
15487: POP
15488: POP
// end ;
15489: GO 15446
15491: POP
15492: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15493: LD_VAR 0 10
15497: PUSH
15498: LD_INT 0
15500: EQUAL
15501: PUSH
15502: LD_VAR 0 11
15506: PUSH
15507: LD_INT 0
15509: EQUAL
15510: AND
15511: PUSH
15512: LD_VAR 0 7
15516: PUSH
15517: LD_INT 0
15519: GREATER
15520: AND
15521: IFFALSE 15625
// for i in sci_listOutside do
15523: LD_ADDR_VAR 0 8
15527: PUSH
15528: LD_VAR 0 7
15532: PUSH
15533: FOR_IN
15534: IFFALSE 15623
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15536: LD_ADDR_VAR 0 12
15540: PUSH
15541: LD_INT 22
15543: PUSH
15544: LD_VAR 0 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 21
15555: PUSH
15556: LD_INT 3
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: LD_INT 30
15565: PUSH
15566: LD_INT 8
15568: PUSH
15569: EMPTY
15570: LIST
15571: LIST
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: LIST
15577: PPUSH
15578: CALL_OW 69
15582: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15583: LD_ADDR_VAR 0 13
15587: PUSH
15588: LD_INT 1
15590: PPUSH
15591: LD_VAR 0 12
15595: PPUSH
15596: CALL_OW 12
15600: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15601: LD_VAR 0 8
15605: PPUSH
15606: LD_VAR 0 12
15610: PUSH
15611: LD_VAR 0 13
15615: ARRAY
15616: PPUSH
15617: CALL_OW 120
// end ;
15621: GO 15533
15623: POP
15624: POP
// end ;
15625: LD_VAR 0 5
15629: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15630: LD_INT 0
15632: PPUSH
15633: PPUSH
15634: PPUSH
15635: PPUSH
15636: PPUSH
15637: PPUSH
15638: PPUSH
15639: PPUSH
15640: PPUSH
15641: PPUSH
15642: PPUSH
// amChassisTab = [ ] ;
15643: LD_ADDR_VAR 0 19
15647: PUSH
15648: EMPTY
15649: ST_TO_ADDR
// arChassisTab = [ ] ;
15650: LD_ADDR_VAR 0 18
15654: PUSH
15655: EMPTY
15656: ST_TO_ADDR
// ruChassisTab = [ ] ;
15657: LD_ADDR_VAR 0 17
15661: PUSH
15662: EMPTY
15663: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15664: LD_INT 35
15666: PPUSH
15667: CALL_OW 67
// if nation = 1 then
15671: LD_VAR 0 5
15675: PUSH
15676: LD_INT 1
15678: EQUAL
15679: IFFALSE 16184
// begin uc_side = side ;
15681: LD_ADDR_OWVAR 20
15685: PUSH
15686: LD_VAR 0 2
15690: ST_TO_ADDR
// uc_nation = nation ;
15691: LD_ADDR_OWVAR 21
15695: PUSH
15696: LD_VAR 0 5
15700: ST_TO_ADDR
// vc_engine = vehengine ;
15701: LD_ADDR_OWVAR 39
15705: PUSH
15706: LD_VAR 0 6
15710: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15711: LD_ADDR_OWVAR 38
15715: PUSH
15716: LD_VAR 0 7
15720: PUSH
15721: LD_INT 1
15723: PPUSH
15724: LD_VAR 0 7
15728: PPUSH
15729: CALL_OW 12
15733: ARRAY
15734: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15735: LD_ADDR_OWVAR 40
15739: PUSH
15740: LD_VAR 0 10
15744: PUSH
15745: LD_INT 1
15747: PPUSH
15748: LD_VAR 0 10
15752: PPUSH
15753: CALL_OW 12
15757: ARRAY
15758: ST_TO_ADDR
// for j = 1 to AMWeapon do
15759: LD_ADDR_VAR 0 14
15763: PUSH
15764: DOUBLE
15765: LD_INT 1
15767: DEC
15768: ST_TO_ADDR
15769: LD_VAR 0 10
15773: PUSH
15774: FOR_TO
15775: IFFALSE 16076
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15777: LD_VAR 0 10
15781: PUSH
15782: LD_VAR 0 14
15786: ARRAY
15787: PUSH
15788: LD_INT 2
15790: EQUAL
15791: PUSH
15792: LD_VAR 0 10
15796: PUSH
15797: LD_VAR 0 14
15801: ARRAY
15802: PUSH
15803: LD_INT 3
15805: EQUAL
15806: OR
15807: IFFALSE 15860
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15809: LD_ADDR_VAR 0 19
15813: PUSH
15814: LD_INT 1
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 3
15822: PUSH
15823: LD_INT 4
15825: PUSH
15826: LD_INT 5
15828: PUSH
15829: EMPTY
15830: LIST
15831: LIST
15832: LIST
15833: LIST
15834: LIST
15835: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15836: LD_ADDR_OWVAR 37
15840: PUSH
15841: LD_VAR 0 19
15845: PUSH
15846: LD_INT 1
15848: PPUSH
15849: LD_VAR 0 19
15853: PPUSH
15854: CALL_OW 12
15858: ARRAY
15859: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15860: LD_VAR 0 10
15864: PUSH
15865: LD_VAR 0 14
15869: ARRAY
15870: PUSH
15871: LD_INT 4
15873: EQUAL
15874: PUSH
15875: LD_VAR 0 10
15879: PUSH
15880: LD_VAR 0 14
15884: ARRAY
15885: PUSH
15886: LD_INT 5
15888: EQUAL
15889: OR
15890: PUSH
15891: LD_VAR 0 10
15895: PUSH
15896: LD_VAR 0 14
15900: ARRAY
15901: PUSH
15902: LD_INT 9
15904: EQUAL
15905: OR
15906: PUSH
15907: LD_VAR 0 10
15911: PUSH
15912: LD_VAR 0 14
15916: ARRAY
15917: PUSH
15918: LD_INT 11
15920: EQUAL
15921: OR
15922: PUSH
15923: LD_VAR 0 10
15927: PUSH
15928: LD_VAR 0 14
15932: ARRAY
15933: PUSH
15934: LD_INT 7
15936: EQUAL
15937: OR
15938: IFFALSE 15987
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15940: LD_ADDR_VAR 0 19
15944: PUSH
15945: LD_INT 2
15947: PUSH
15948: LD_INT 3
15950: PUSH
15951: LD_INT 4
15953: PUSH
15954: LD_INT 5
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15963: LD_ADDR_OWVAR 37
15967: PUSH
15968: LD_VAR 0 19
15972: PUSH
15973: LD_INT 1
15975: PPUSH
15976: LD_VAR 0 19
15980: PPUSH
15981: CALL_OW 12
15985: ARRAY
15986: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15987: LD_VAR 0 10
15991: PUSH
15992: LD_VAR 0 14
15996: ARRAY
15997: PUSH
15998: LD_INT 8
16000: EQUAL
16001: PUSH
16002: LD_VAR 0 10
16006: PUSH
16007: LD_VAR 0 14
16011: ARRAY
16012: PUSH
16013: LD_INT 6
16015: EQUAL
16016: OR
16017: PUSH
16018: LD_VAR 0 10
16022: PUSH
16023: LD_VAR 0 14
16027: ARRAY
16028: PUSH
16029: LD_INT 10
16031: EQUAL
16032: OR
16033: IFFALSE 16074
// begin amChassisTab = [ 4 , 5 ] ;
16035: LD_ADDR_VAR 0 19
16039: PUSH
16040: LD_INT 4
16042: PUSH
16043: LD_INT 5
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16050: LD_ADDR_OWVAR 37
16054: PUSH
16055: LD_VAR 0 19
16059: PUSH
16060: LD_INT 1
16062: PPUSH
16063: LD_VAR 0 19
16067: PPUSH
16068: CALL_OW 12
16072: ARRAY
16073: ST_TO_ADDR
// end ; end ;
16074: GO 15774
16076: POP
16077: POP
// veh = CreateVehicle ;
16078: LD_ADDR_VAR 0 16
16082: PUSH
16083: CALL_OW 45
16087: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16088: LD_VAR 0 16
16092: PPUSH
16093: LD_VAR 0 1
16097: PPUSH
16098: LD_INT 0
16100: PPUSH
16101: CALL_OW 49
// if vc_control = 1 then
16105: LD_OWVAR 38
16109: PUSH
16110: LD_INT 1
16112: EQUAL
16113: IFFALSE 16170
// begin hc_gallery =  ;
16115: LD_ADDR_OWVAR 33
16119: PUSH
16120: LD_STRING 
16122: ST_TO_ADDR
// hc_name =  ;
16123: LD_ADDR_OWVAR 26
16127: PUSH
16128: LD_STRING 
16130: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16131: LD_INT 0
16133: PPUSH
16134: LD_INT 3
16136: PPUSH
16137: LD_VAR 0 4
16141: PPUSH
16142: CALL_OW 380
// un = CreateHuman ;
16146: LD_ADDR_VAR 0 15
16150: PUSH
16151: CALL_OW 44
16155: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16156: LD_VAR 0 15
16160: PPUSH
16161: LD_VAR 0 16
16165: PPUSH
16166: CALL_OW 52
// end ; i = i + 1 ;
16170: LD_ADDR_VAR 0 13
16174: PUSH
16175: LD_VAR 0 13
16179: PUSH
16180: LD_INT 1
16182: PLUS
16183: ST_TO_ADDR
// end ; if nation = 2 then
16184: LD_VAR 0 5
16188: PUSH
16189: LD_INT 2
16191: EQUAL
16192: IFFALSE 16614
// begin uc_side = side ;
16194: LD_ADDR_OWVAR 20
16198: PUSH
16199: LD_VAR 0 2
16203: ST_TO_ADDR
// uc_nation = nation ;
16204: LD_ADDR_OWVAR 21
16208: PUSH
16209: LD_VAR 0 5
16213: ST_TO_ADDR
// vc_engine = vehengine ;
16214: LD_ADDR_OWVAR 39
16218: PUSH
16219: LD_VAR 0 6
16223: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16224: LD_ADDR_OWVAR 38
16228: PUSH
16229: LD_VAR 0 7
16233: PUSH
16234: LD_INT 1
16236: PPUSH
16237: LD_VAR 0 7
16241: PPUSH
16242: CALL_OW 12
16246: ARRAY
16247: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16248: LD_ADDR_OWVAR 40
16252: PUSH
16253: LD_VAR 0 9
16257: PUSH
16258: LD_INT 1
16260: PPUSH
16261: LD_VAR 0 9
16265: PPUSH
16266: CALL_OW 12
16270: ARRAY
16271: ST_TO_ADDR
// for j = 1 to ARWeapons do
16272: LD_ADDR_VAR 0 14
16276: PUSH
16277: DOUBLE
16278: LD_INT 1
16280: DEC
16281: ST_TO_ADDR
16282: LD_VAR 0 9
16286: PUSH
16287: FOR_TO
16288: IFFALSE 16506
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16290: LD_VAR 0 9
16294: PUSH
16295: LD_VAR 0 14
16299: ARRAY
16300: PUSH
16301: LD_INT 24
16303: EQUAL
16304: PUSH
16305: LD_VAR 0 9
16309: PUSH
16310: LD_VAR 0 14
16314: ARRAY
16315: PUSH
16316: LD_INT 22
16318: EQUAL
16319: OR
16320: PUSH
16321: LD_VAR 0 9
16325: PUSH
16326: LD_VAR 0 14
16330: ARRAY
16331: PUSH
16332: LD_INT 23
16334: EQUAL
16335: OR
16336: PUSH
16337: LD_VAR 0 9
16341: PUSH
16342: LD_VAR 0 14
16346: ARRAY
16347: PUSH
16348: LD_INT 30
16350: EQUAL
16351: OR
16352: IFFALSE 16389
// begin arChassisTab = [ 14 ] ;
16354: LD_ADDR_VAR 0 18
16358: PUSH
16359: LD_INT 14
16361: PUSH
16362: EMPTY
16363: LIST
16364: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16365: LD_ADDR_OWVAR 37
16369: PUSH
16370: LD_VAR 0 18
16374: PUSH
16375: LD_INT 1
16377: PPUSH
16378: LD_VAR 0 18
16382: PPUSH
16383: CALL_OW 12
16387: ARRAY
16388: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16389: LD_VAR 0 9
16393: PUSH
16394: LD_VAR 0 14
16398: ARRAY
16399: PUSH
16400: LD_INT 29
16402: EQUAL
16403: PUSH
16404: LD_VAR 0 9
16408: PUSH
16409: LD_VAR 0 14
16413: ARRAY
16414: PUSH
16415: LD_INT 28
16417: EQUAL
16418: OR
16419: PUSH
16420: LD_VAR 0 9
16424: PUSH
16425: LD_VAR 0 14
16429: ARRAY
16430: PUSH
16431: LD_INT 27
16433: EQUAL
16434: OR
16435: PUSH
16436: LD_VAR 0 9
16440: PUSH
16441: LD_VAR 0 14
16445: ARRAY
16446: PUSH
16447: LD_INT 26
16449: EQUAL
16450: OR
16451: PUSH
16452: LD_VAR 0 9
16456: PUSH
16457: LD_VAR 0 14
16461: ARRAY
16462: PUSH
16463: LD_INT 25
16465: EQUAL
16466: OR
16467: IFFALSE 16504
// begin arChassisTab = [ 14 ] ;
16469: LD_ADDR_VAR 0 18
16473: PUSH
16474: LD_INT 14
16476: PUSH
16477: EMPTY
16478: LIST
16479: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16480: LD_ADDR_OWVAR 37
16484: PUSH
16485: LD_VAR 0 18
16489: PUSH
16490: LD_INT 1
16492: PPUSH
16493: LD_VAR 0 18
16497: PPUSH
16498: CALL_OW 12
16502: ARRAY
16503: ST_TO_ADDR
// end ; end ;
16504: GO 16287
16506: POP
16507: POP
// veh = CreateVehicle ;
16508: LD_ADDR_VAR 0 16
16512: PUSH
16513: CALL_OW 45
16517: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16518: LD_VAR 0 16
16522: PPUSH
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_INT 0
16530: PPUSH
16531: CALL_OW 49
// if vc_control = 1 then
16535: LD_OWVAR 38
16539: PUSH
16540: LD_INT 1
16542: EQUAL
16543: IFFALSE 16600
// begin hc_gallery =  ;
16545: LD_ADDR_OWVAR 33
16549: PUSH
16550: LD_STRING 
16552: ST_TO_ADDR
// hc_name =  ;
16553: LD_ADDR_OWVAR 26
16557: PUSH
16558: LD_STRING 
16560: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16561: LD_INT 0
16563: PPUSH
16564: LD_INT 3
16566: PPUSH
16567: LD_VAR 0 4
16571: PPUSH
16572: CALL_OW 380
// un = CreateHuman ;
16576: LD_ADDR_VAR 0 15
16580: PUSH
16581: CALL_OW 44
16585: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16586: LD_VAR 0 15
16590: PPUSH
16591: LD_VAR 0 16
16595: PPUSH
16596: CALL_OW 52
// end ; i = i + 1 ;
16600: LD_ADDR_VAR 0 13
16604: PUSH
16605: LD_VAR 0 13
16609: PUSH
16610: LD_INT 1
16612: PLUS
16613: ST_TO_ADDR
// end ; if nation = 3 then
16614: LD_VAR 0 5
16618: PUSH
16619: LD_INT 3
16621: EQUAL
16622: IFFALSE 17028
// begin uc_side = side ;
16624: LD_ADDR_OWVAR 20
16628: PUSH
16629: LD_VAR 0 2
16633: ST_TO_ADDR
// uc_nation = nation ;
16634: LD_ADDR_OWVAR 21
16638: PUSH
16639: LD_VAR 0 5
16643: ST_TO_ADDR
// vc_engine = vehengine ;
16644: LD_ADDR_OWVAR 39
16648: PUSH
16649: LD_VAR 0 6
16653: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16654: LD_ADDR_OWVAR 38
16658: PUSH
16659: LD_VAR 0 7
16663: PUSH
16664: LD_INT 1
16666: PPUSH
16667: LD_VAR 0 7
16671: PPUSH
16672: CALL_OW 12
16676: ARRAY
16677: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16678: LD_ADDR_OWVAR 40
16682: PUSH
16683: LD_VAR 0 8
16687: PUSH
16688: LD_INT 1
16690: PPUSH
16691: LD_VAR 0 8
16695: PPUSH
16696: CALL_OW 12
16700: ARRAY
16701: ST_TO_ADDR
// for j = 1 to RuWeapons do
16702: LD_ADDR_VAR 0 14
16706: PUSH
16707: DOUBLE
16708: LD_INT 1
16710: DEC
16711: ST_TO_ADDR
16712: LD_VAR 0 8
16716: PUSH
16717: FOR_TO
16718: IFFALSE 16920
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16720: LD_VAR 0 8
16724: PUSH
16725: LD_VAR 0 14
16729: ARRAY
16730: PUSH
16731: LD_INT 42
16733: EQUAL
16734: PUSH
16735: LD_VAR 0 8
16739: PUSH
16740: LD_VAR 0 14
16744: ARRAY
16745: PUSH
16746: LD_INT 43
16748: EQUAL
16749: OR
16750: PUSH
16751: LD_VAR 0 8
16755: PUSH
16756: LD_VAR 0 14
16760: ARRAY
16761: PUSH
16762: LD_INT 44
16764: EQUAL
16765: OR
16766: PUSH
16767: LD_VAR 0 8
16771: PUSH
16772: LD_VAR 0 14
16776: ARRAY
16777: PUSH
16778: LD_INT 45
16780: EQUAL
16781: OR
16782: PUSH
16783: LD_VAR 0 8
16787: PUSH
16788: LD_VAR 0 14
16792: ARRAY
16793: PUSH
16794: LD_INT 49
16796: EQUAL
16797: OR
16798: IFFALSE 16847
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16800: LD_ADDR_VAR 0 17
16804: PUSH
16805: LD_INT 21
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_INT 23
16813: PUSH
16814: LD_INT 24
16816: PUSH
16817: EMPTY
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16823: LD_ADDR_OWVAR 37
16827: PUSH
16828: LD_VAR 0 17
16832: PUSH
16833: LD_INT 1
16835: PPUSH
16836: LD_VAR 0 17
16840: PPUSH
16841: CALL_OW 12
16845: ARRAY
16846: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16847: LD_VAR 0 8
16851: PUSH
16852: LD_VAR 0 14
16856: ARRAY
16857: PUSH
16858: LD_INT 46
16860: EQUAL
16861: PUSH
16862: LD_VAR 0 8
16866: PUSH
16867: LD_VAR 0 14
16871: ARRAY
16872: PUSH
16873: LD_INT 47
16875: EQUAL
16876: OR
16877: IFFALSE 16918
// begin ruChassisTab = [ 23 , 24 ] ;
16879: LD_ADDR_VAR 0 17
16883: PUSH
16884: LD_INT 23
16886: PUSH
16887: LD_INT 24
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16894: LD_ADDR_OWVAR 37
16898: PUSH
16899: LD_VAR 0 17
16903: PUSH
16904: LD_INT 1
16906: PPUSH
16907: LD_VAR 0 17
16911: PPUSH
16912: CALL_OW 12
16916: ARRAY
16917: ST_TO_ADDR
// end ; end ;
16918: GO 16717
16920: POP
16921: POP
// veh = CreateVehicle ;
16922: LD_ADDR_VAR 0 16
16926: PUSH
16927: CALL_OW 45
16931: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16932: LD_VAR 0 16
16936: PPUSH
16937: LD_VAR 0 1
16941: PPUSH
16942: LD_INT 0
16944: PPUSH
16945: CALL_OW 49
// if vc_control = 1 then
16949: LD_OWVAR 38
16953: PUSH
16954: LD_INT 1
16956: EQUAL
16957: IFFALSE 17014
// begin hc_gallery =  ;
16959: LD_ADDR_OWVAR 33
16963: PUSH
16964: LD_STRING 
16966: ST_TO_ADDR
// hc_name =  ;
16967: LD_ADDR_OWVAR 26
16971: PUSH
16972: LD_STRING 
16974: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16975: LD_INT 0
16977: PPUSH
16978: LD_INT 3
16980: PPUSH
16981: LD_VAR 0 4
16985: PPUSH
16986: CALL_OW 380
// un = CreateHuman ;
16990: LD_ADDR_VAR 0 15
16994: PUSH
16995: CALL_OW 44
16999: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17000: LD_VAR 0 15
17004: PPUSH
17005: LD_VAR 0 16
17009: PPUSH
17010: CALL_OW 52
// end ; i = i + 1 ;
17014: LD_ADDR_VAR 0 13
17018: PUSH
17019: LD_VAR 0 13
17023: PUSH
17024: LD_INT 1
17026: PLUS
17027: ST_TO_ADDR
// end ; until i = vehCount ;
17028: LD_VAR 0 13
17032: PUSH
17033: LD_VAR 0 3
17037: EQUAL
17038: IFFALSE 15664
// repeat wait ( 0 0$1 ) ;
17040: LD_INT 35
17042: PPUSH
17043: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17047: LD_ADDR_VAR 0 20
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_VAR 0 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 21
17066: PUSH
17067: LD_INT 2
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 24
17076: PUSH
17077: LD_INT 650
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: ST_TO_ADDR
// if vehicleOK_list > 0 then
17094: LD_VAR 0 20
17098: PUSH
17099: LD_INT 0
17101: GREATER
17102: IFFALSE 17293
// begin for i in vehicleOK_list do
17104: LD_ADDR_VAR 0 13
17108: PUSH
17109: LD_VAR 0 20
17113: PUSH
17114: FOR_IN
17115: IFFALSE 17291
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17117: LD_ADDR_VAR 0 21
17121: PUSH
17122: LD_INT 22
17124: PUSH
17125: LD_VAR 0 11
17129: PUSH
17130: EMPTY
17131: LIST
17132: LIST
17133: PPUSH
17134: CALL_OW 69
17138: PPUSH
17139: LD_VAR 0 13
17143: PPUSH
17144: CALL_OW 74
17148: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17149: LD_ADDR_VAR 0 22
17153: PUSH
17154: LD_INT 22
17156: PUSH
17157: LD_VAR 0 11
17161: PUSH
17162: EMPTY
17163: LIST
17164: LIST
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 59
17171: PUSH
17172: EMPTY
17173: LIST
17174: PUSH
17175: LD_INT 21
17177: PUSH
17178: LD_INT 1
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 21
17187: PUSH
17188: LD_INT 2
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: PPUSH
17208: CALL_OW 69
17212: PPUSH
17213: LD_VAR 0 13
17217: PPUSH
17218: CALL_OW 74
17222: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17223: LD_VAR 0 13
17227: PPUSH
17228: LD_VAR 0 21
17232: PPUSH
17233: CALL_OW 296
17237: PUSH
17238: LD_INT 8
17240: PLUS
17241: PUSH
17242: LD_VAR 0 13
17246: PPUSH
17247: LD_VAR 0 22
17251: PPUSH
17252: CALL_OW 296
17256: LESS
17257: IFFALSE 17275
// begin ComAttackUnit ( i , target1 ) ;
17259: LD_VAR 0 13
17263: PPUSH
17264: LD_VAR 0 21
17268: PPUSH
17269: CALL_OW 115
// end else
17273: GO 17289
// begin ComAttackUnit ( i , target2 ) ;
17275: LD_VAR 0 13
17279: PPUSH
17280: LD_VAR 0 22
17284: PPUSH
17285: CALL_OW 115
// end ; end ;
17289: GO 17114
17291: POP
17292: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17293: LD_INT 22
17295: PUSH
17296: LD_VAR 0 2
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 21
17307: PUSH
17308: LD_INT 2
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: PUSH
17324: LD_INT 0
17326: EQUAL
17327: IFFALSE 17040
// end ;
17329: LD_VAR 0 12
17333: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17334: LD_INT 0
17336: PPUSH
17337: PPUSH
17338: PPUSH
17339: PPUSH
17340: PPUSH
17341: PPUSH
17342: PPUSH
17343: PPUSH
17344: PPUSH
17345: PPUSH
17346: PPUSH
// for i = 1 to soldierCount do
17347: LD_ADDR_VAR 0 13
17351: PUSH
17352: DOUBLE
17353: LD_INT 1
17355: DEC
17356: ST_TO_ADDR
17357: LD_VAR 0 3
17361: PUSH
17362: FOR_TO
17363: IFFALSE 17445
// begin uc_side = side ;
17365: LD_ADDR_OWVAR 20
17369: PUSH
17370: LD_VAR 0 1
17374: ST_TO_ADDR
// uc_nation = nation ;
17375: LD_ADDR_OWVAR 21
17379: PUSH
17380: LD_VAR 0 2
17384: ST_TO_ADDR
// hc_name =  ;
17385: LD_ADDR_OWVAR 26
17389: PUSH
17390: LD_STRING 
17392: ST_TO_ADDR
// hc_gallery =  ;
17393: LD_ADDR_OWVAR 33
17397: PUSH
17398: LD_STRING 
17400: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17401: LD_INT 0
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: LD_VAR 0 8
17411: PPUSH
17412: CALL_OW 380
// un = CreateHuman ;
17416: LD_ADDR_VAR 0 15
17420: PUSH
17421: CALL_OW 44
17425: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17426: LD_VAR 0 15
17430: PPUSH
17431: LD_VAR 0 9
17435: PPUSH
17436: LD_INT 0
17438: PPUSH
17439: CALL_OW 49
// end ;
17443: GO 17362
17445: POP
17446: POP
// for i = 1 to sniperCount do
17447: LD_ADDR_VAR 0 13
17451: PUSH
17452: DOUBLE
17453: LD_INT 1
17455: DEC
17456: ST_TO_ADDR
17457: LD_VAR 0 4
17461: PUSH
17462: FOR_TO
17463: IFFALSE 17545
// begin uc_side = side ;
17465: LD_ADDR_OWVAR 20
17469: PUSH
17470: LD_VAR 0 1
17474: ST_TO_ADDR
// uc_nation = nation ;
17475: LD_ADDR_OWVAR 21
17479: PUSH
17480: LD_VAR 0 2
17484: ST_TO_ADDR
// hc_name =  ;
17485: LD_ADDR_OWVAR 26
17489: PUSH
17490: LD_STRING 
17492: ST_TO_ADDR
// hc_gallery =  ;
17493: LD_ADDR_OWVAR 33
17497: PUSH
17498: LD_STRING 
17500: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17501: LD_INT 0
17503: PPUSH
17504: LD_INT 5
17506: PPUSH
17507: LD_VAR 0 8
17511: PPUSH
17512: CALL_OW 380
// un = CreateHuman ;
17516: LD_ADDR_VAR 0 15
17520: PUSH
17521: CALL_OW 44
17525: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17526: LD_VAR 0 15
17530: PPUSH
17531: LD_VAR 0 9
17535: PPUSH
17536: LD_INT 0
17538: PPUSH
17539: CALL_OW 49
// end ;
17543: GO 17462
17545: POP
17546: POP
// for i = 1 to bazookCount do
17547: LD_ADDR_VAR 0 13
17551: PUSH
17552: DOUBLE
17553: LD_INT 1
17555: DEC
17556: ST_TO_ADDR
17557: LD_VAR 0 5
17561: PUSH
17562: FOR_TO
17563: IFFALSE 17645
// begin uc_side = side ;
17565: LD_ADDR_OWVAR 20
17569: PUSH
17570: LD_VAR 0 1
17574: ST_TO_ADDR
// uc_nation = nation ;
17575: LD_ADDR_OWVAR 21
17579: PUSH
17580: LD_VAR 0 2
17584: ST_TO_ADDR
// hc_name =  ;
17585: LD_ADDR_OWVAR 26
17589: PUSH
17590: LD_STRING 
17592: ST_TO_ADDR
// hc_gallery =  ;
17593: LD_ADDR_OWVAR 33
17597: PUSH
17598: LD_STRING 
17600: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17601: LD_INT 0
17603: PPUSH
17604: LD_INT 9
17606: PPUSH
17607: LD_VAR 0 8
17611: PPUSH
17612: CALL_OW 380
// un = CreateHuman ;
17616: LD_ADDR_VAR 0 15
17620: PUSH
17621: CALL_OW 44
17625: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17626: LD_VAR 0 15
17630: PPUSH
17631: LD_VAR 0 9
17635: PPUSH
17636: LD_INT 0
17638: PPUSH
17639: CALL_OW 49
// end ;
17643: GO 17562
17645: POP
17646: POP
// for i = 1 to mortalCount do
17647: LD_ADDR_VAR 0 13
17651: PUSH
17652: DOUBLE
17653: LD_INT 1
17655: DEC
17656: ST_TO_ADDR
17657: LD_VAR 0 6
17661: PUSH
17662: FOR_TO
17663: IFFALSE 17745
// begin uc_side = side ;
17665: LD_ADDR_OWVAR 20
17669: PUSH
17670: LD_VAR 0 1
17674: ST_TO_ADDR
// uc_nation = nation ;
17675: LD_ADDR_OWVAR 21
17679: PUSH
17680: LD_VAR 0 2
17684: ST_TO_ADDR
// hc_name =  ;
17685: LD_ADDR_OWVAR 26
17689: PUSH
17690: LD_STRING 
17692: ST_TO_ADDR
// hc_gallery =  ;
17693: LD_ADDR_OWVAR 33
17697: PUSH
17698: LD_STRING 
17700: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17701: LD_INT 0
17703: PPUSH
17704: LD_INT 8
17706: PPUSH
17707: LD_VAR 0 8
17711: PPUSH
17712: CALL_OW 380
// un = CreateHuman ;
17716: LD_ADDR_VAR 0 15
17720: PUSH
17721: CALL_OW 44
17725: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17726: LD_VAR 0 15
17730: PPUSH
17731: LD_VAR 0 9
17735: PPUSH
17736: LD_INT 0
17738: PPUSH
17739: CALL_OW 49
// end ;
17743: GO 17662
17745: POP
17746: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17747: LD_ADDR_VAR 0 18
17751: PUSH
17752: LD_INT 22
17754: PUSH
17755: LD_VAR 0 1
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PUSH
17764: LD_INT 2
17766: PUSH
17767: LD_INT 25
17769: PUSH
17770: LD_INT 1
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 25
17779: PUSH
17780: LD_INT 5
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: LD_INT 25
17789: PUSH
17790: LD_INT 8
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: PUSH
17797: LD_INT 25
17799: PUSH
17800: LD_INT 9
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: PUSH
17807: EMPTY
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PPUSH
17818: CALL_OW 69
17822: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17823: LD_ADDR_VAR 0 17
17827: PUSH
17828: LD_INT 22
17830: PUSH
17831: LD_VAR 0 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PUSH
17840: LD_INT 25
17842: PUSH
17843: LD_INT 4
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: PPUSH
17854: CALL_OW 69
17858: ST_TO_ADDR
// for i in medic_list do
17859: LD_ADDR_VAR 0 13
17863: PUSH
17864: LD_VAR 0 17
17868: PUSH
17869: FOR_IN
17870: IFFALSE 17888
// ComMoveToArea ( i , healArea ) ;
17872: LD_VAR 0 13
17876: PPUSH
17877: LD_VAR 0 10
17881: PPUSH
17882: CALL_OW 113
17886: GO 17869
17888: POP
17889: POP
// repeat wait ( 0 0$1 ) ;
17890: LD_INT 35
17892: PPUSH
17893: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17897: LD_ADDR_VAR 0 16
17901: PUSH
17902: LD_INT 22
17904: PUSH
17905: LD_VAR 0 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: LD_INT 1
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: LD_INT 24
17922: PUSH
17923: LD_INT 550
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 24
17936: PUSH
17937: LD_INT 250
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PPUSH
17953: CALL_OW 69
17957: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17958: LD_ADDR_VAR 0 18
17962: PUSH
17963: LD_INT 22
17965: PUSH
17966: LD_VAR 0 1
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: LD_INT 25
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 25
17990: PUSH
17991: LD_INT 5
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 25
18000: PUSH
18001: LD_INT 8
18003: PUSH
18004: EMPTY
18005: LIST
18006: LIST
18007: PUSH
18008: LD_INT 25
18010: PUSH
18011: LD_INT 9
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: EMPTY
18019: LIST
18020: LIST
18021: LIST
18022: LIST
18023: LIST
18024: PUSH
18025: LD_INT 24
18027: PUSH
18028: LD_INT 1000
18030: PUSH
18031: EMPTY
18032: LIST
18033: LIST
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: LIST
18039: PPUSH
18040: CALL_OW 69
18044: ST_TO_ADDR
// if medicCount > 0 then
18045: LD_VAR 0 7
18049: PUSH
18050: LD_INT 0
18052: GREATER
18053: IFFALSE 18127
// begin if damageUnit_list > 0 then
18055: LD_VAR 0 16
18059: PUSH
18060: LD_INT 0
18062: GREATER
18063: IFFALSE 18127
// begin for i in damageUnit_list do
18065: LD_ADDR_VAR 0 13
18069: PUSH
18070: LD_VAR 0 16
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18125
// begin ComMoveToArea ( i , healArea ) ;
18078: LD_VAR 0 13
18082: PPUSH
18083: LD_VAR 0 10
18087: PPUSH
18088: CALL_OW 113
// for j in medic_list do
18092: LD_ADDR_VAR 0 14
18096: PUSH
18097: LD_VAR 0 17
18101: PUSH
18102: FOR_IN
18103: IFFALSE 18121
// AddComHeal ( j , i ) ;
18105: LD_VAR 0 14
18109: PPUSH
18110: LD_VAR 0 13
18114: PPUSH
18115: CALL_OW 188
18119: GO 18102
18121: POP
18122: POP
// end ;
18123: GO 18075
18125: POP
18126: POP
// end ; end ; for i in soldiersOK_list do
18127: LD_ADDR_VAR 0 13
18131: PUSH
18132: LD_VAR 0 18
18136: PUSH
18137: FOR_IN
18138: IFFALSE 18314
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18140: LD_ADDR_VAR 0 21
18144: PUSH
18145: LD_INT 22
18147: PUSH
18148: LD_VAR 0 11
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PPUSH
18157: CALL_OW 69
18161: PPUSH
18162: LD_VAR 0 13
18166: PPUSH
18167: CALL_OW 74
18171: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18172: LD_ADDR_VAR 0 22
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_VAR 0 11
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 2
18191: PUSH
18192: LD_INT 59
18194: PUSH
18195: EMPTY
18196: LIST
18197: PUSH
18198: LD_INT 21
18200: PUSH
18201: LD_INT 1
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 21
18210: PUSH
18211: LD_INT 2
18213: PUSH
18214: EMPTY
18215: LIST
18216: LIST
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: PUSH
18228: EMPTY
18229: LIST
18230: PPUSH
18231: CALL_OW 69
18235: PPUSH
18236: LD_VAR 0 13
18240: PPUSH
18241: CALL_OW 74
18245: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18246: LD_VAR 0 13
18250: PPUSH
18251: LD_VAR 0 21
18255: PPUSH
18256: CALL_OW 296
18260: PUSH
18261: LD_INT 8
18263: PLUS
18264: PUSH
18265: LD_VAR 0 13
18269: PPUSH
18270: LD_VAR 0 22
18274: PPUSH
18275: CALL_OW 296
18279: LESS
18280: IFFALSE 18298
// begin ComAttackUnit ( i , target1 ) ;
18282: LD_VAR 0 13
18286: PPUSH
18287: LD_VAR 0 21
18291: PPUSH
18292: CALL_OW 115
// end else
18296: GO 18312
// begin ComAttackUnit ( i , target2 ) ;
18298: LD_VAR 0 13
18302: PPUSH
18303: LD_VAR 0 22
18307: PPUSH
18308: CALL_OW 115
// end ; end ;
18312: GO 18137
18314: POP
18315: POP
// for i in soldiersOK_list do
18316: LD_ADDR_VAR 0 13
18320: PUSH
18321: LD_VAR 0 18
18325: PUSH
18326: FOR_IN
18327: IFFALSE 18503
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18329: LD_ADDR_VAR 0 21
18333: PUSH
18334: LD_INT 22
18336: PUSH
18337: LD_VAR 0 11
18341: PUSH
18342: EMPTY
18343: LIST
18344: LIST
18345: PPUSH
18346: CALL_OW 69
18350: PPUSH
18351: LD_VAR 0 13
18355: PPUSH
18356: CALL_OW 74
18360: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18361: LD_ADDR_VAR 0 22
18365: PUSH
18366: LD_INT 22
18368: PUSH
18369: LD_VAR 0 11
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 2
18380: PUSH
18381: LD_INT 59
18383: PUSH
18384: EMPTY
18385: LIST
18386: PUSH
18387: LD_INT 21
18389: PUSH
18390: LD_INT 1
18392: PUSH
18393: EMPTY
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 21
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PUSH
18417: EMPTY
18418: LIST
18419: PPUSH
18420: CALL_OW 69
18424: PPUSH
18425: LD_VAR 0 13
18429: PPUSH
18430: CALL_OW 74
18434: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18435: LD_VAR 0 13
18439: PPUSH
18440: LD_VAR 0 21
18444: PPUSH
18445: CALL_OW 296
18449: PUSH
18450: LD_INT 8
18452: PLUS
18453: PUSH
18454: LD_VAR 0 13
18458: PPUSH
18459: LD_VAR 0 22
18463: PPUSH
18464: CALL_OW 296
18468: LESS
18469: IFFALSE 18487
// begin ComAttackUnit ( i , target1 ) ;
18471: LD_VAR 0 13
18475: PPUSH
18476: LD_VAR 0 21
18480: PPUSH
18481: CALL_OW 115
// end else
18485: GO 18501
// begin ComAttackUnit ( i , target2 ) ;
18487: LD_VAR 0 13
18491: PPUSH
18492: LD_VAR 0 22
18496: PPUSH
18497: CALL_OW 115
// end ; end ;
18501: GO 18326
18503: POP
18504: POP
// until soldiersOK_list = [ ] ;
18505: LD_VAR 0 18
18509: PUSH
18510: EMPTY
18511: EQUAL
18512: IFFALSE 17890
// end ;
18514: LD_VAR 0 12
18518: RET
// export function TameApemans ; var i , j ; begin
18519: LD_INT 0
18521: PPUSH
18522: PPUSH
18523: PPUSH
// repeat wait ( 0 0$1 ) ;
18524: LD_INT 35
18526: PPUSH
18527: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18531: LD_ADDR_VAR 0 2
18535: PUSH
18536: LD_INT 22
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 25
18548: PUSH
18549: LD_INT 4
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PPUSH
18560: CALL_OW 69
18564: PUSH
18565: FOR_IN
18566: IFFALSE 18643
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18568: LD_ADDR_VAR 0 3
18572: PUSH
18573: LD_INT 5
18575: PPUSH
18576: LD_INT 22
18578: PUSH
18579: LD_INT 0
18581: PUSH
18582: EMPTY
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 25
18588: PUSH
18589: LD_INT 12
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PPUSH
18600: CALL_OW 70
18604: PUSH
18605: FOR_IN
18606: IFFALSE 18639
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18608: LD_VAR 0 2
18612: PPUSH
18613: LD_VAR 0 3
18617: PPUSH
18618: CALL_OW 250
18622: PPUSH
18623: LD_VAR 0 3
18627: PPUSH
18628: CALL_OW 251
18632: PPUSH
18633: CALL_OW 191
// end ;
18637: GO 18605
18639: POP
18640: POP
// end ;
18641: GO 18565
18643: POP
18644: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18645: LD_INT 22
18647: PUSH
18648: LD_INT 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 4
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PPUSH
18669: CALL_OW 69
18673: PUSH
18674: LD_INT 0
18676: EQUAL
18677: PUSH
18678: LD_INT 5
18680: PPUSH
18681: LD_INT 22
18683: PUSH
18684: LD_INT 0
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: PUSH
18691: LD_INT 25
18693: PUSH
18694: LD_INT 12
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PPUSH
18705: CALL_OW 70
18709: PUSH
18710: LD_INT 0
18712: EQUAL
18713: OR
18714: IFFALSE 18524
// wait ( 0 0$30 ) ;
18716: LD_INT 1050
18718: PPUSH
18719: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18723: LD_ADDR_VAR 0 2
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_INT 2
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 25
18740: PUSH
18741: LD_INT 12
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PPUSH
18752: CALL_OW 69
18756: PUSH
18757: FOR_IN
18758: IFFALSE 18822
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18760: LD_VAR 0 2
18764: PPUSH
18765: LD_EXP 43
18769: PPUSH
18770: CALL_OW 250
18774: PPUSH
18775: LD_EXP 43
18779: PPUSH
18780: CALL_OW 251
18784: PPUSH
18785: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18789: LD_VAR 0 2
18793: PPUSH
18794: LD_INT 16
18796: PUSH
18797: LD_INT 15
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 1
18806: PPUSH
18807: LD_INT 2
18809: PPUSH
18810: CALL_OW 12
18814: ARRAY
18815: PPUSH
18816: CALL_OW 336
// end ;
18820: GO 18757
18822: POP
18823: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18824: LD_ADDR_VAR 0 2
18828: PUSH
18829: LD_INT 22
18831: PUSH
18832: LD_INT 2
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 25
18841: PUSH
18842: LD_INT 4
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PPUSH
18853: CALL_OW 69
18857: PUSH
18858: FOR_IN
18859: IFFALSE 18905
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18861: LD_VAR 0 2
18865: PPUSH
18866: LD_INT 22
18868: PUSH
18869: LD_INT 2
18871: PUSH
18872: EMPTY
18873: LIST
18874: LIST
18875: PUSH
18876: LD_INT 30
18878: PUSH
18879: LD_INT 8
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PPUSH
18890: CALL_OW 69
18894: PUSH
18895: LD_INT 1
18897: ARRAY
18898: PPUSH
18899: CALL_OW 120
18903: GO 18858
18905: POP
18906: POP
// end ;
18907: LD_VAR 0 1
18911: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18912: LD_INT 0
18914: PPUSH
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
18921: PPUSH
18922: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18923: LD_INT 22
18925: PUSH
18926: LD_VAR 0 1
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: PUSH
18935: LD_INT 21
18937: PUSH
18938: LD_INT 2
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PUSH
18945: EMPTY
18946: LIST
18947: LIST
18948: PPUSH
18949: CALL_OW 69
18953: PUSH
18954: LD_VAR 0 3
18958: LESSEQUAL
18959: IFFALSE 19103
// for i = 1 to vehCount do
18961: LD_ADDR_VAR 0 10
18965: PUSH
18966: DOUBLE
18967: LD_INT 1
18969: DEC
18970: ST_TO_ADDR
18971: LD_VAR 0 3
18975: PUSH
18976: FOR_TO
18977: IFFALSE 19101
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18979: LD_ADDR_VAR 0 12
18983: PUSH
18984: LD_VAR 0 5
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_VAR 0 5
18996: PPUSH
18997: CALL_OW 12
19001: ARRAY
19002: ST_TO_ADDR
// if randWeapon = 46 then
19003: LD_VAR 0 12
19007: PUSH
19008: LD_INT 46
19010: EQUAL
19011: IFFALSE 19056
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19013: LD_VAR 0 2
19017: PPUSH
19018: LD_INT 24
19020: PPUSH
19021: LD_VAR 0 6
19025: PPUSH
19026: LD_VAR 0 7
19030: PUSH
19031: LD_INT 1
19033: PPUSH
19034: LD_VAR 0 7
19038: PPUSH
19039: CALL_OW 12
19043: ARRAY
19044: PPUSH
19045: LD_VAR 0 12
19049: PPUSH
19050: CALL_OW 185
19054: GO 19099
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19056: LD_VAR 0 2
19060: PPUSH
19061: LD_VAR 0 8
19065: PPUSH
19066: LD_VAR 0 6
19070: PPUSH
19071: LD_VAR 0 7
19075: PUSH
19076: LD_INT 1
19078: PPUSH
19079: LD_VAR 0 7
19083: PPUSH
19084: CALL_OW 12
19088: ARRAY
19089: PPUSH
19090: LD_VAR 0 12
19094: PPUSH
19095: CALL_OW 185
// end ;
19099: GO 18976
19101: POP
19102: POP
// repeat wait ( 0 0$1 ) ;
19103: LD_INT 35
19105: PPUSH
19106: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19110: LD_INT 22
19112: PUSH
19113: LD_VAR 0 1
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: PUSH
19122: LD_INT 21
19124: PUSH
19125: LD_INT 2
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 24
19134: PUSH
19135: LD_INT 250
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: LIST
19146: PPUSH
19147: CALL_OW 69
19151: PUSH
19152: LD_VAR 0 3
19156: GREATEREQUAL
19157: IFFALSE 19103
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19159: LD_INT 22
19161: PUSH
19162: LD_VAR 0 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 21
19173: PUSH
19174: LD_INT 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 24
19183: PUSH
19184: LD_INT 250
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: LIST
19195: PPUSH
19196: CALL_OW 69
19200: PUSH
19201: LD_VAR 0 3
19205: GREATEREQUAL
19206: IFFALSE 19549
// begin repeat begin wait ( 0 0$1 ) ;
19208: LD_INT 35
19210: PPUSH
19211: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19215: LD_INT 22
19217: PUSH
19218: LD_VAR 0 1
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 21
19229: PUSH
19230: LD_INT 2
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 24
19239: PUSH
19240: LD_INT 651
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: PPUSH
19252: CALL_OW 69
19256: PUSH
19257: LD_INT 0
19259: GREATER
19260: IFFALSE 19488
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19262: LD_ADDR_VAR 0 10
19266: PUSH
19267: LD_INT 22
19269: PUSH
19270: LD_VAR 0 1
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 2
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 24
19291: PUSH
19292: LD_INT 651
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: PUSH
19309: FOR_IN
19310: IFFALSE 19486
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19312: LD_ADDR_VAR 0 16
19316: PUSH
19317: LD_INT 22
19319: PUSH
19320: LD_VAR 0 4
19324: PUSH
19325: EMPTY
19326: LIST
19327: LIST
19328: PPUSH
19329: CALL_OW 69
19333: PPUSH
19334: LD_VAR 0 10
19338: PPUSH
19339: CALL_OW 74
19343: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19344: LD_ADDR_VAR 0 17
19348: PUSH
19349: LD_INT 22
19351: PUSH
19352: LD_VAR 0 4
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 2
19363: PUSH
19364: LD_INT 59
19366: PUSH
19367: EMPTY
19368: LIST
19369: PUSH
19370: LD_INT 21
19372: PUSH
19373: LD_INT 1
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: PUSH
19380: LD_INT 21
19382: PUSH
19383: LD_INT 2
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: EMPTY
19401: LIST
19402: PPUSH
19403: CALL_OW 69
19407: PPUSH
19408: LD_VAR 0 10
19412: PPUSH
19413: CALL_OW 74
19417: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19418: LD_VAR 0 10
19422: PPUSH
19423: LD_VAR 0 16
19427: PPUSH
19428: CALL_OW 296
19432: PUSH
19433: LD_INT 8
19435: PLUS
19436: PUSH
19437: LD_VAR 0 10
19441: PPUSH
19442: LD_VAR 0 17
19446: PPUSH
19447: CALL_OW 296
19451: LESS
19452: IFFALSE 19470
// begin ComAttackUnit ( i , target1 ) ;
19454: LD_VAR 0 10
19458: PPUSH
19459: LD_VAR 0 16
19463: PPUSH
19464: CALL_OW 115
// end else
19468: GO 19484
// begin ComAttackUnit ( i , target2 ) ;
19470: LD_VAR 0 10
19474: PPUSH
19475: LD_VAR 0 17
19479: PPUSH
19480: CALL_OW 115
// end ; end ;
19484: GO 19309
19486: POP
19487: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19488: LD_INT 22
19490: PUSH
19491: LD_VAR 0 1
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 21
19502: PUSH
19503: LD_INT 2
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 69
19518: PUSH
19519: LD_INT 0
19521: EQUAL
19522: PUSH
19523: LD_INT 22
19525: PUSH
19526: LD_VAR 0 4
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: EMPTY
19536: LIST
19537: PPUSH
19538: CALL_OW 69
19542: PUSH
19543: LD_INT 0
19545: EQUAL
19546: OR
19547: IFFALSE 19208
// end ; end ;
19549: LD_VAR 0 9
19553: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19554: LD_INT 0
19556: PPUSH
19557: PPUSH
19558: PPUSH
19559: PPUSH
// r := 100 ;
19560: LD_ADDR_VAR 0 5
19564: PUSH
19565: LD_INT 100
19567: ST_TO_ADDR
// x := 0 ;
19568: LD_ADDR_VAR 0 6
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
// while ( x < n ) do
19576: LD_VAR 0 6
19580: PUSH
19581: LD_VAR 0 2
19585: LESS
19586: IFFALSE 19873
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19588: LD_ADDR_VAR 0 4
19592: PUSH
19593: DOUBLE
19594: LD_INT 1
19596: DEC
19597: ST_TO_ADDR
19598: LD_VAR 0 1
19602: PPUSH
19603: LD_INT 0
19605: PPUSH
19606: CALL_OW 517
19610: PUSH
19611: LD_INT 1
19613: ARRAY
19614: PUSH
19615: FOR_TO
19616: IFFALSE 19869
// begin if r > 50 then
19618: LD_VAR 0 5
19622: PUSH
19623: LD_INT 50
19625: GREATER
19626: IFFALSE 19845
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19628: LD_VAR 0 1
19632: PPUSH
19633: LD_INT 0
19635: PPUSH
19636: CALL_OW 517
19640: PUSH
19641: LD_INT 1
19643: ARRAY
19644: PUSH
19645: LD_VAR 0 4
19649: ARRAY
19650: PPUSH
19651: LD_VAR 0 1
19655: PPUSH
19656: LD_INT 0
19658: PPUSH
19659: CALL_OW 517
19663: PUSH
19664: LD_INT 2
19666: ARRAY
19667: PUSH
19668: LD_VAR 0 4
19672: ARRAY
19673: PPUSH
19674: CALL_OW 458
19678: NOT
19679: IFFALSE 19829
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19681: LD_VAR 0 1
19685: PPUSH
19686: LD_INT 0
19688: PPUSH
19689: CALL_OW 517
19693: PUSH
19694: LD_INT 1
19696: ARRAY
19697: PUSH
19698: LD_VAR 0 4
19702: ARRAY
19703: PPUSH
19704: LD_VAR 0 1
19708: PPUSH
19709: LD_INT 0
19711: PPUSH
19712: CALL_OW 517
19716: PUSH
19717: LD_INT 2
19719: ARRAY
19720: PUSH
19721: LD_VAR 0 4
19725: ARRAY
19726: PPUSH
19727: LD_INT 5
19729: PPUSH
19730: LD_INT 0
19732: PPUSH
19733: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19737: LD_ADDR_EXP 50
19741: PUSH
19742: LD_EXP 50
19746: PPUSH
19747: LD_INT 1
19749: PPUSH
19750: LD_VAR 0 1
19754: PPUSH
19755: LD_INT 0
19757: PPUSH
19758: CALL_OW 517
19762: PUSH
19763: LD_INT 1
19765: ARRAY
19766: PUSH
19767: LD_VAR 0 4
19771: ARRAY
19772: PUSH
19773: LD_VAR 0 1
19777: PPUSH
19778: LD_INT 0
19780: PPUSH
19781: CALL_OW 517
19785: PUSH
19786: LD_INT 2
19788: ARRAY
19789: PUSH
19790: LD_VAR 0 4
19794: ARRAY
19795: PUSH
19796: EMPTY
19797: LIST
19798: LIST
19799: PPUSH
19800: CALL_OW 2
19804: ST_TO_ADDR
// r := 0 ;
19805: LD_ADDR_VAR 0 5
19809: PUSH
19810: LD_INT 0
19812: ST_TO_ADDR
// x := x + 1 ;
19813: LD_ADDR_VAR 0 6
19817: PUSH
19818: LD_VAR 0 6
19822: PUSH
19823: LD_INT 1
19825: PLUS
19826: ST_TO_ADDR
// end else
19827: GO 19843
// r := r + 35 ;
19829: LD_ADDR_VAR 0 5
19833: PUSH
19834: LD_VAR 0 5
19838: PUSH
19839: LD_INT 35
19841: PLUS
19842: ST_TO_ADDR
// end else
19843: GO 19867
// r := r + rand ( 10 , 25 ) ;
19845: LD_ADDR_VAR 0 5
19849: PUSH
19850: LD_VAR 0 5
19854: PUSH
19855: LD_INT 10
19857: PPUSH
19858: LD_INT 25
19860: PPUSH
19861: CALL_OW 12
19865: PLUS
19866: ST_TO_ADDR
// end ;
19867: GO 19615
19869: POP
19870: POP
19871: GO 19576
// end ; end_of_file
19873: LD_VAR 0 3
19877: RET
// every 0 0$1 trigger russianAI = 1 do
19878: LD_EXP 39
19882: PUSH
19883: LD_INT 1
19885: EQUAL
19886: IFFALSE 20105
19888: GO 19890
19890: DISABLE
// begin enable ;
19891: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19892: LD_INT 3
19894: PPUSH
19895: LD_EXP 30
19899: PPUSH
19900: CALL 14516 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19904: LD_INT 3
19906: PPUSH
19907: LD_EXP 42
19911: PPUSH
19912: CALL 14876 0 2
// if ruPossition = 1 then
19916: LD_EXP 41
19920: PUSH
19921: LD_INT 1
19923: EQUAL
19924: IFFALSE 19979
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19926: LD_INT 3
19928: PPUSH
19929: LD_INT 13
19931: PPUSH
19932: LD_INT 10
19934: PPUSH
19935: LD_INT 22
19937: PUSH
19938: LD_INT 3
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 21
19947: PUSH
19948: LD_INT 3
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 30
19957: PUSH
19958: LD_INT 8
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 69
19974: PPUSH
19975: CALL 15082 0 4
// if ruPossition = 2 then
19979: LD_EXP 41
19983: PUSH
19984: LD_INT 2
19986: EQUAL
19987: IFFALSE 20042
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19989: LD_INT 3
19991: PPUSH
19992: LD_INT 14
19994: PPUSH
19995: LD_INT 11
19997: PPUSH
19998: LD_INT 22
20000: PUSH
20001: LD_INT 3
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: LD_INT 21
20010: PUSH
20011: LD_INT 3
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 30
20020: PUSH
20021: LD_INT 8
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: LIST
20032: PPUSH
20033: CALL_OW 69
20037: PPUSH
20038: CALL 15082 0 4
// if ruPossition = 3 then
20042: LD_EXP 41
20046: PUSH
20047: LD_INT 3
20049: EQUAL
20050: IFFALSE 20105
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20052: LD_INT 3
20054: PPUSH
20055: LD_INT 15
20057: PPUSH
20058: LD_INT 12
20060: PPUSH
20061: LD_INT 22
20063: PUSH
20064: LD_INT 3
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 21
20073: PUSH
20074: LD_INT 3
20076: PUSH
20077: EMPTY
20078: LIST
20079: LIST
20080: PUSH
20081: LD_INT 30
20083: PUSH
20084: LD_INT 8
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: LIST
20095: PPUSH
20096: CALL_OW 69
20100: PPUSH
20101: CALL 15082 0 4
// end ;
20105: END
// every 0 0$1 do
20106: GO 20108
20108: DISABLE
// begin enable ;
20109: ENABLE
// if ruPossition = 1 then
20110: LD_EXP 41
20114: PUSH
20115: LD_INT 1
20117: EQUAL
20118: IFFALSE 20130
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20120: LD_INT 3
20122: PPUSH
20123: LD_INT 10
20125: PPUSH
20126: CALL 14153 0 2
// if ruPossition = 2 then
20130: LD_EXP 41
20134: PUSH
20135: LD_INT 2
20137: EQUAL
20138: IFFALSE 20150
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20140: LD_INT 3
20142: PPUSH
20143: LD_INT 11
20145: PPUSH
20146: CALL 14153 0 2
// if ruPossition = 3 then
20150: LD_EXP 41
20154: PUSH
20155: LD_INT 3
20157: EQUAL
20158: IFFALSE 20170
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20160: LD_INT 3
20162: PPUSH
20163: LD_INT 12
20165: PPUSH
20166: CALL 14153 0 2
// IntBazooka ( 3 , 1 ) ;
20170: LD_INT 3
20172: PPUSH
20173: LD_INT 1
20175: PPUSH
20176: CALL 12952 0 2
// IntBazooka ( 6 , 1 ) ;
20180: LD_INT 6
20182: PPUSH
20183: LD_INT 1
20185: PPUSH
20186: CALL 12952 0 2
// end ;
20190: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20191: LD_EXP 39
20195: PUSH
20196: LD_INT 1
20198: EQUAL
20199: PUSH
20200: LD_EXP 35
20204: PPUSH
20205: CALL_OW 302
20209: AND
20210: PUSH
20211: LD_EXP 35
20215: PPUSH
20216: CALL_OW 255
20220: PUSH
20221: LD_INT 3
20223: EQUAL
20224: AND
20225: PUSH
20226: LD_INT 22
20228: PUSH
20229: LD_INT 3
20231: PUSH
20232: EMPTY
20233: LIST
20234: LIST
20235: PUSH
20236: LD_INT 21
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: LD_INT 33
20248: PUSH
20249: LD_INT 3
20251: PUSH
20252: EMPTY
20253: LIST
20254: LIST
20255: PUSH
20256: EMPTY
20257: LIST
20258: LIST
20259: LIST
20260: PPUSH
20261: CALL_OW 69
20265: PUSH
20266: LD_INT 0
20268: EQUAL
20269: AND
20270: IFFALSE 20478
20272: GO 20274
20274: DISABLE
// begin enable ;
20275: ENABLE
// if Difficulty = 1 then
20276: LD_OWVAR 67
20280: PUSH
20281: LD_INT 1
20283: EQUAL
20284: IFFALSE 20346
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20286: LD_INT 3
20288: PPUSH
20289: LD_EXP 35
20293: PPUSH
20294: LD_INT 5
20296: PPUSH
20297: LD_INT 8
20299: PPUSH
20300: CALL_OW 12
20304: PPUSH
20305: LD_INT 1
20307: PPUSH
20308: LD_INT 43
20310: PUSH
20311: LD_INT 44
20313: PUSH
20314: LD_INT 45
20316: PUSH
20317: LD_INT 46
20319: PUSH
20320: EMPTY
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: PPUSH
20326: LD_INT 1
20328: PPUSH
20329: LD_INT 1
20331: PUSH
20332: LD_INT 3
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PPUSH
20339: LD_INT 22
20341: PPUSH
20342: CALL 18912 0 8
// if Difficulty = 2 then
20346: LD_OWVAR 67
20350: PUSH
20351: LD_INT 2
20353: EQUAL
20354: IFFALSE 20412
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20356: LD_INT 3
20358: PPUSH
20359: LD_EXP 35
20363: PPUSH
20364: LD_INT 6
20366: PPUSH
20367: LD_INT 8
20369: PPUSH
20370: CALL_OW 12
20374: PPUSH
20375: LD_INT 1
20377: PPUSH
20378: LD_INT 44
20380: PUSH
20381: LD_INT 45
20383: PUSH
20384: LD_INT 46
20386: PUSH
20387: EMPTY
20388: LIST
20389: LIST
20390: LIST
20391: PPUSH
20392: LD_INT 1
20394: PPUSH
20395: LD_INT 1
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PPUSH
20405: LD_INT 22
20407: PPUSH
20408: CALL 18912 0 8
// if Difficulty = 3 then
20412: LD_OWVAR 67
20416: PUSH
20417: LD_INT 3
20419: EQUAL
20420: IFFALSE 20478
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20422: LD_INT 3
20424: PPUSH
20425: LD_EXP 35
20429: PPUSH
20430: LD_INT 7
20432: PPUSH
20433: LD_INT 8
20435: PPUSH
20436: CALL_OW 12
20440: PPUSH
20441: LD_INT 1
20443: PPUSH
20444: LD_INT 44
20446: PUSH
20447: LD_INT 45
20449: PUSH
20450: LD_INT 46
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: LIST
20457: PPUSH
20458: LD_INT 1
20460: PPUSH
20461: LD_INT 1
20463: PUSH
20464: LD_INT 3
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: PPUSH
20471: LD_INT 22
20473: PPUSH
20474: CALL 18912 0 8
// end ;
20478: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20479: LD_EXP 50
20483: PUSH
20484: LD_EXP 49
20488: AND
20489: IFFALSE 20610
20491: GO 20493
20493: DISABLE
20494: LD_INT 0
20496: PPUSH
// begin enable ;
20497: ENABLE
// for i in arabianMines do
20498: LD_ADDR_VAR 0 1
20502: PUSH
20503: LD_EXP 50
20507: PUSH
20508: FOR_IN
20509: IFFALSE 20608
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20511: LD_INT 22
20513: PUSH
20514: LD_INT 1
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 92
20523: PUSH
20524: LD_VAR 0 1
20528: PUSH
20529: LD_INT 1
20531: ARRAY
20532: PUSH
20533: LD_VAR 0 1
20537: PUSH
20538: LD_INT 2
20540: ARRAY
20541: PUSH
20542: LD_INT 3
20544: PUSH
20545: EMPTY
20546: LIST
20547: LIST
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: IFFALSE 20606
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20561: LD_VAR 0 1
20565: PUSH
20566: LD_INT 1
20568: ARRAY
20569: PPUSH
20570: LD_VAR 0 1
20574: PUSH
20575: LD_INT 2
20577: ARRAY
20578: PPUSH
20579: LD_INT 5
20581: PPUSH
20582: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20586: LD_ADDR_EXP 50
20590: PUSH
20591: LD_EXP 50
20595: PPUSH
20596: LD_VAR 0 1
20600: PPUSH
20601: CALL_OW 3
20605: ST_TO_ADDR
// end ; end ;
20606: GO 20508
20608: POP
20609: POP
// end ; end_of_file
20610: PPOPN 1
20612: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20613: LD_VAR 0 1
20617: PPUSH
20618: CALL_OW 255
20622: PUSH
20623: LD_INT 4
20625: EQUAL
20626: IFFALSE 20640
// SetBName ( building , epsilon ) ;
20628: LD_VAR 0 1
20632: PPUSH
20633: LD_STRING epsilon
20635: PPUSH
20636: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20640: LD_VAR 0 1
20644: PPUSH
20645: CALL_OW 255
20649: PUSH
20650: LD_INT 1
20652: EQUAL
20653: PUSH
20654: LD_VAR 0 1
20658: PPUSH
20659: CALL_OW 266
20663: PUSH
20664: LD_INT 0
20666: EQUAL
20667: AND
20668: IFFALSE 20682
// SetBName ( building , epsilon ) ;
20670: LD_VAR 0 1
20674: PPUSH
20675: LD_STRING epsilon
20677: PPUSH
20678: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20682: LD_VAR 0 1
20686: PPUSH
20687: CALL_OW 255
20691: PUSH
20692: LD_INT 3
20694: EQUAL
20695: PUSH
20696: LD_VAR 0 1
20700: PPUSH
20701: CALL_OW 266
20705: PUSH
20706: LD_INT 0
20708: EQUAL
20709: AND
20710: IFFALSE 20724
// SetBName ( building , chuikov ) ;
20712: LD_VAR 0 1
20716: PPUSH
20717: LD_STRING chuikov
20719: PPUSH
20720: CALL_OW 500
// if GetSide ( building ) = 2 then
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 255
20733: PUSH
20734: LD_INT 2
20736: EQUAL
20737: IFFALSE 20793
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 266
20748: PUSH
20749: LD_INT 6
20751: EQUAL
20752: PUSH
20753: LD_VAR 0 1
20757: PPUSH
20758: CALL_OW 266
20762: PUSH
20763: LD_INT 9
20765: EQUAL
20766: OR
20767: IFFALSE 20793
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20769: LD_VAR 0 1
20773: PPUSH
20774: LD_INT 10
20776: PPUSH
20777: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20781: LD_VAR 0 1
20785: PPUSH
20786: LD_INT 11
20788: PPUSH
20789: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20793: LD_VAR 0 1
20797: PPUSH
20798: CALL_OW 255
20802: PUSH
20803: LD_INT 3
20805: EQUAL
20806: IFFALSE 20832
// begin if GetBType ( building ) = 2 then
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 266
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: IFFALSE 20832
// AddComUpgrade ( building ) ;
20823: LD_VAR 0 1
20827: PPUSH
20828: CALL_OW 206
// end ; end ;
20832: PPOPN 2
20834: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20835: LD_INT 0
20837: PPUSH
20838: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20839: LD_VAR 0 1
20843: PUSH
20844: LD_INT 22
20846: PUSH
20847: LD_INT 3
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: LD_INT 23
20856: PUSH
20857: LD_INT 3
20859: PUSH
20860: EMPTY
20861: LIST
20862: LIST
20863: PUSH
20864: LD_INT 21
20866: PUSH
20867: LD_INT 2
20869: PUSH
20870: EMPTY
20871: LIST
20872: LIST
20873: PUSH
20874: EMPTY
20875: LIST
20876: LIST
20877: LIST
20878: PPUSH
20879: CALL_OW 69
20883: IN
20884: PUSH
20885: LD_EXP 58
20889: NOT
20890: AND
20891: IFFALSE 20922
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20893: LD_ADDR_EXP 58
20897: PUSH
20898: LD_VAR 0 1
20902: PPUSH
20903: CALL_OW 250
20907: PUSH
20908: LD_VAR 0 1
20912: PPUSH
20913: CALL_OW 251
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: ST_TO_ADDR
// end ;
20922: PPOPN 3
20924: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20925: LD_VAR 0 2
20929: PPUSH
20930: CALL_OW 255
20934: PUSH
20935: LD_INT 3
20937: EQUAL
20938: PUSH
20939: LD_EXP 35
20943: PPUSH
20944: CALL_OW 255
20948: PUSH
20949: LD_INT 3
20951: EQUAL
20952: AND
20953: PUSH
20954: LD_EXP 35
20958: PPUSH
20959: CALL_OW 302
20963: AND
20964: IFFALSE 20980
// ComEnterUnit ( human , ruFab ) ;
20966: LD_VAR 0 2
20970: PPUSH
20971: LD_EXP 35
20975: PPUSH
20976: CALL_OW 120
// end ;
20980: PPOPN 2
20982: END
// on BuildingComplete ( building ) do var i ;
20983: LD_INT 0
20985: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
20986: LD_VAR 0 1
20990: PPUSH
20991: CALL_OW 255
20995: PUSH
20996: LD_INT 1
20998: EQUAL
20999: PUSH
21000: LD_EXP 61
21004: PUSH
21005: LD_INT 0
21007: EQUAL
21008: AND
21009: IFFALSE 21211
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 266
21020: PUSH
21021: LD_INT 26
21023: EQUAL
21024: PUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 266
21034: PUSH
21035: LD_INT 27
21037: EQUAL
21038: OR
21039: PUSH
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 266
21049: PUSH
21050: LD_INT 28
21052: EQUAL
21053: OR
21054: IFFALSE 21211
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21056: LD_INT 22
21058: PUSH
21059: LD_INT 1
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: LD_INT 2
21068: PUSH
21069: LD_INT 30
21071: PUSH
21072: LD_INT 7
21074: PUSH
21075: EMPTY
21076: LIST
21077: LIST
21078: PUSH
21079: LD_INT 30
21081: PUSH
21082: LD_INT 8
21084: PUSH
21085: EMPTY
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: LIST
21093: PUSH
21094: EMPTY
21095: LIST
21096: LIST
21097: PPUSH
21098: CALL_OW 69
21102: PUSH
21103: LD_INT 0
21105: GREATER
21106: IFFALSE 21211
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21108: LD_ADDR_VAR 0 2
21112: PUSH
21113: LD_INT 22
21115: PUSH
21116: LD_INT 1
21118: PUSH
21119: EMPTY
21120: LIST
21121: LIST
21122: PUSH
21123: LD_INT 2
21125: PUSH
21126: LD_INT 30
21128: PUSH
21129: LD_INT 7
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: LD_INT 30
21138: PUSH
21139: LD_INT 8
21141: PUSH
21142: EMPTY
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PPUSH
21155: CALL_OW 69
21159: PUSH
21160: FOR_IN
21161: IFFALSE 21209
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21163: LD_VAR 0 2
21167: PPUSH
21168: LD_INT 1
21170: PPUSH
21171: CALL_OW 268
21175: PUSH
21176: LD_INT 11
21178: EQUAL
21179: PUSH
21180: LD_VAR 0 2
21184: PPUSH
21185: LD_INT 2
21187: PPUSH
21188: CALL_OW 268
21192: PUSH
21193: LD_INT 11
21195: EQUAL
21196: OR
21197: IFFALSE 21207
// eventVar1 = 1 ;
21199: LD_ADDR_EXP 61
21203: PUSH
21204: LD_INT 1
21206: ST_TO_ADDR
21207: GO 21160
21209: POP
21210: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21211: LD_VAR 0 1
21215: PPUSH
21216: CALL_OW 255
21220: PUSH
21221: LD_INT 3
21223: EQUAL
21224: IFFALSE 21704
// begin if GetBType ( building ) = b_depot then
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 266
21235: PUSH
21236: LD_INT 0
21238: EQUAL
21239: IFFALSE 21311
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21241: LD_VAR 0 1
21245: PPUSH
21246: CALL_OW 274
21250: PPUSH
21251: LD_INT 1
21253: PPUSH
21254: LD_INT 5000
21256: PPUSH
21257: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21261: LD_VAR 0 1
21265: PPUSH
21266: CALL_OW 274
21270: PPUSH
21271: LD_INT 2
21273: PPUSH
21274: LD_INT 5000
21276: PPUSH
21277: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21281: LD_VAR 0 1
21285: PPUSH
21286: CALL_OW 274
21290: PPUSH
21291: LD_INT 3
21293: PPUSH
21294: LD_INT 5000
21296: PPUSH
21297: CALL_OW 277
// ruDepot = building ;
21301: LD_ADDR_EXP 30
21305: PUSH
21306: LD_VAR 0 1
21310: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21311: LD_VAR 0 1
21315: PPUSH
21316: CALL_OW 266
21320: PUSH
21321: LD_INT 0
21323: EQUAL
21324: PUSH
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 266
21334: PUSH
21335: LD_INT 2
21337: EQUAL
21338: OR
21339: PUSH
21340: LD_VAR 0 1
21344: PPUSH
21345: CALL_OW 266
21349: PUSH
21350: LD_INT 4
21352: EQUAL
21353: OR
21354: IFFALSE 21365
// ComUpgrade ( building ) ;
21356: LD_VAR 0 1
21360: PPUSH
21361: CALL_OW 146
// if GetBType ( building ) = b_lab then
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 266
21374: PUSH
21375: LD_INT 6
21377: EQUAL
21378: IFFALSE 21581
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21380: LD_INT 22
21382: PUSH
21383: LD_INT 3
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 30
21392: PUSH
21393: LD_INT 8
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: PUSH
21400: EMPTY
21401: LIST
21402: LIST
21403: PPUSH
21404: CALL_OW 69
21408: PUSH
21409: LD_INT 0
21411: EQUAL
21412: IFFALSE 21450
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21414: LD_VAR 0 1
21418: PPUSH
21419: LD_INT 10
21421: PPUSH
21422: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21426: LD_VAR 0 1
21430: PPUSH
21431: LD_INT 12
21433: PPUSH
21434: CALL_OW 207
// ruLab1 = building ;
21438: LD_ADDR_EXP 31
21442: PUSH
21443: LD_VAR 0 1
21447: ST_TO_ADDR
// end else
21448: GO 21484
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21450: LD_VAR 0 1
21454: PPUSH
21455: LD_INT 11
21457: PPUSH
21458: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21462: LD_VAR 0 1
21466: PPUSH
21467: LD_INT 14
21469: PPUSH
21470: CALL_OW 207
// ruLab2 = building ;
21474: LD_ADDR_EXP 32
21478: PUSH
21479: LD_VAR 0 1
21483: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21484: LD_INT 3
21486: PPUSH
21487: LD_VAR 0 1
21491: PPUSH
21492: LD_INT 3
21494: PPUSH
21495: CALL 14068 0 3
// if ruDestroyedBuildings > 0 then
21499: LD_EXP 42
21503: PUSH
21504: LD_INT 0
21506: GREATER
21507: IFFALSE 21581
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21509: LD_ADDR_EXP 42
21513: PUSH
21514: LD_EXP 42
21518: PPUSH
21519: LD_INT 1
21521: PPUSH
21522: CALL_OW 3
21526: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21527: LD_ADDR_EXP 42
21531: PUSH
21532: LD_EXP 42
21536: PPUSH
21537: LD_INT 1
21539: PPUSH
21540: CALL_OW 3
21544: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21545: LD_ADDR_EXP 42
21549: PUSH
21550: LD_EXP 42
21554: PPUSH
21555: LD_INT 1
21557: PPUSH
21558: CALL_OW 3
21562: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21563: LD_ADDR_EXP 42
21567: PUSH
21568: LD_EXP 42
21572: PPUSH
21573: LD_INT 1
21575: PPUSH
21576: CALL_OW 3
21580: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21581: LD_VAR 0 1
21585: PPUSH
21586: CALL_OW 266
21590: PUSH
21591: LD_INT 32
21593: EQUAL
21594: IFFALSE 21631
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21596: LD_VAR 0 1
21600: PPUSH
21601: LD_INT 44
21603: PUSH
21604: LD_INT 45
21606: PUSH
21607: LD_INT 46
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 1
21617: PPUSH
21618: LD_INT 3
21620: PPUSH
21621: CALL_OW 12
21625: ARRAY
21626: PPUSH
21627: CALL_OW 208
// if GetBType ( building ) = b_turret then
21631: LD_VAR 0 1
21635: PPUSH
21636: CALL_OW 266
21640: PUSH
21641: LD_INT 33
21643: EQUAL
21644: IFFALSE 21681
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21646: LD_VAR 0 1
21650: PPUSH
21651: LD_INT 44
21653: PUSH
21654: LD_INT 45
21656: PUSH
21657: LD_INT 46
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: PUSH
21665: LD_INT 1
21667: PPUSH
21668: LD_INT 3
21670: PPUSH
21671: CALL_OW 12
21675: ARRAY
21676: PPUSH
21677: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21681: LD_VAR 0 1
21685: PPUSH
21686: CALL_OW 266
21690: PUSH
21691: LD_INT 24
21693: EQUAL
21694: IFFALSE 21704
// russianAI = 1 ;
21696: LD_ADDR_EXP 39
21700: PUSH
21701: LD_INT 1
21703: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21704: LD_VAR 0 1
21708: PPUSH
21709: CALL_OW 255
21713: PUSH
21714: LD_INT 2
21716: EQUAL
21717: IFFALSE 22443
// begin if GetBType ( building ) = b_depot then
21719: LD_VAR 0 1
21723: PPUSH
21724: CALL_OW 266
21728: PUSH
21729: LD_INT 0
21731: EQUAL
21732: IFFALSE 21818
// begin arDepot = building ;
21734: LD_ADDR_EXP 43
21738: PUSH
21739: LD_VAR 0 1
21743: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21744: LD_INT 38
21746: PUSH
21747: LD_INT 47
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PPUSH
21754: LD_INT 71
21756: PPUSH
21757: LD_INT 19
21759: PPUSH
21760: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21764: LD_VAR 0 1
21768: PPUSH
21769: CALL_OW 274
21773: PPUSH
21774: LD_INT 1
21776: PPUSH
21777: LD_INT 500
21779: PPUSH
21780: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21784: LD_VAR 0 1
21788: PPUSH
21789: CALL_OW 274
21793: PPUSH
21794: LD_INT 3
21796: PPUSH
21797: LD_INT 30
21799: PPUSH
21800: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21804: LD_EXP 26
21808: PPUSH
21809: LD_EXP 43
21813: PPUSH
21814: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21818: LD_VAR 0 1
21822: PPUSH
21823: CALL_OW 266
21827: PUSH
21828: LD_INT 6
21830: EQUAL
21831: PUSH
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 9
21844: EQUAL
21845: OR
21846: IFFALSE 21897
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21848: LD_VAR 0 1
21852: PPUSH
21853: LD_INT 10
21855: PPUSH
21856: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21860: LD_VAR 0 1
21864: PPUSH
21865: LD_INT 11
21867: PPUSH
21868: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21872: LD_INT 2
21874: PPUSH
21875: LD_VAR 0 1
21879: PPUSH
21880: LD_INT 2
21882: PPUSH
21883: CALL 14068 0 3
// arLab = building ;
21887: LD_ADDR_EXP 44
21891: PUSH
21892: LD_VAR 0 1
21896: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21897: LD_VAR 0 1
21901: PPUSH
21902: CALL_OW 266
21906: PUSH
21907: LD_INT 2
21909: EQUAL
21910: PUSH
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL_OW 266
21920: PUSH
21921: LD_INT 4
21923: EQUAL
21924: OR
21925: IFFALSE 21936
// ComUpgrade ( building ) ;
21927: LD_VAR 0 1
21931: PPUSH
21932: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 266
21945: PUSH
21946: LD_INT 27
21948: EQUAL
21949: IFFALSE 22443
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21951: LD_INT 22
21953: PUSH
21954: LD_INT 2
21956: PUSH
21957: EMPTY
21958: LIST
21959: LIST
21960: PUSH
21961: LD_INT 30
21963: PUSH
21964: LD_INT 27
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PUSH
21971: EMPTY
21972: LIST
21973: LIST
21974: PPUSH
21975: CALL_OW 69
21979: PUSH
21980: LD_INT 2
21982: EQUAL
21983: IFFALSE 22443
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
21985: LD_ADDR_VAR 0 2
21989: PUSH
21990: LD_INT 22
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 21
22002: PUSH
22003: LD_INT 1
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: LD_INT 25
22012: PUSH
22013: LD_INT 2
22015: PUSH
22016: EMPTY
22017: LIST
22018: LIST
22019: PUSH
22020: EMPTY
22021: LIST
22022: LIST
22023: LIST
22024: PPUSH
22025: CALL_OW 69
22029: PUSH
22030: LD_INT 1
22032: ARRAY
22033: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22034: LD_VAR 0 2
22038: PPUSH
22039: LD_INT 92
22041: PPUSH
22042: LD_INT 34
22044: PPUSH
22045: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22049: LD_VAR 0 2
22053: PPUSH
22054: LD_INT 82
22056: PPUSH
22057: LD_INT 57
22059: PPUSH
22060: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22064: LD_VAR 0 2
22068: PPUSH
22069: LD_INT 36
22071: PPUSH
22072: LD_INT 28
22074: PPUSH
22075: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22079: LD_INT 22
22081: PUSH
22082: LD_INT 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 21
22091: PUSH
22092: LD_INT 1
22094: PUSH
22095: EMPTY
22096: LIST
22097: LIST
22098: PUSH
22099: LD_INT 25
22101: PUSH
22102: LD_INT 2
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: LIST
22113: PPUSH
22114: CALL_OW 69
22118: PPUSH
22119: LD_EXP 43
22123: PPUSH
22124: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22128: LD_INT 22
22130: PUSH
22131: LD_INT 2
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: LD_INT 25
22140: PUSH
22141: LD_INT 1
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: PUSH
22148: LD_INT 3
22150: PUSH
22151: LD_INT 54
22153: PUSH
22154: EMPTY
22155: LIST
22156: PUSH
22157: LD_INT 3
22159: PUSH
22160: LD_INT 60
22162: PUSH
22163: EMPTY
22164: LIST
22165: PUSH
22166: EMPTY
22167: LIST
22168: LIST
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: LIST
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: LIST
22179: PPUSH
22180: CALL_OW 69
22184: PUSH
22185: LD_INT 1
22187: ARRAY
22188: PPUSH
22189: LD_INT 22
22191: PUSH
22192: LD_INT 2
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 30
22201: PUSH
22202: LD_INT 31
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: PUSH
22209: LD_INT 58
22211: PUSH
22212: EMPTY
22213: LIST
22214: PUSH
22215: EMPTY
22216: LIST
22217: LIST
22218: LIST
22219: PPUSH
22220: CALL_OW 69
22224: PUSH
22225: LD_INT 1
22227: ARRAY
22228: PPUSH
22229: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22233: LD_INT 22
22235: PUSH
22236: LD_INT 2
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: LD_INT 25
22245: PUSH
22246: LD_INT 1
22248: PUSH
22249: EMPTY
22250: LIST
22251: LIST
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: LD_INT 54
22258: PUSH
22259: EMPTY
22260: LIST
22261: PUSH
22262: LD_INT 3
22264: PUSH
22265: LD_INT 60
22267: PUSH
22268: EMPTY
22269: LIST
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: EMPTY
22276: LIST
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: PPUSH
22285: CALL_OW 69
22289: PUSH
22290: LD_INT 2
22292: ARRAY
22293: PPUSH
22294: LD_INT 22
22296: PUSH
22297: LD_INT 2
22299: PUSH
22300: EMPTY
22301: LIST
22302: LIST
22303: PUSH
22304: LD_INT 30
22306: PUSH
22307: LD_INT 31
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 58
22316: PUSH
22317: EMPTY
22318: LIST
22319: PUSH
22320: EMPTY
22321: LIST
22322: LIST
22323: LIST
22324: PPUSH
22325: CALL_OW 69
22329: PUSH
22330: LD_INT 2
22332: ARRAY
22333: PPUSH
22334: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22338: LD_INT 22
22340: PUSH
22341: LD_INT 2
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: LD_INT 25
22350: PUSH
22351: LD_INT 1
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: PUSH
22358: LD_INT 3
22360: PUSH
22361: LD_INT 54
22363: PUSH
22364: EMPTY
22365: LIST
22366: PUSH
22367: LD_INT 3
22369: PUSH
22370: LD_INT 60
22372: PUSH
22373: EMPTY
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: LIST
22384: PUSH
22385: EMPTY
22386: LIST
22387: LIST
22388: LIST
22389: PPUSH
22390: CALL_OW 69
22394: PUSH
22395: LD_INT 3
22397: ARRAY
22398: PPUSH
22399: LD_INT 22
22401: PUSH
22402: LD_INT 2
22404: PUSH
22405: EMPTY
22406: LIST
22407: LIST
22408: PUSH
22409: LD_INT 30
22411: PUSH
22412: LD_INT 31
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PUSH
22419: LD_INT 58
22421: PUSH
22422: EMPTY
22423: LIST
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: LIST
22429: PPUSH
22430: CALL_OW 69
22434: PUSH
22435: LD_INT 3
22437: ARRAY
22438: PPUSH
22439: CALL_OW 120
// end ; end ; end ;
22443: PPOPN 2
22445: END
// on UpgradeComplete ( building ) do var i ;
22446: LD_INT 0
22448: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22449: LD_VAR 0 1
22453: PPUSH
22454: CALL_OW 255
22458: PUSH
22459: LD_INT 1
22461: EQUAL
22462: PUSH
22463: LD_EXP 61
22467: PUSH
22468: LD_INT 0
22470: EQUAL
22471: AND
22472: IFFALSE 22670
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22474: LD_VAR 0 1
22478: PPUSH
22479: CALL_OW 266
22483: PUSH
22484: LD_INT 7
22486: EQUAL
22487: PUSH
22488: LD_VAR 0 1
22492: PPUSH
22493: CALL_OW 266
22497: PUSH
22498: LD_INT 8
22500: EQUAL
22501: OR
22502: IFFALSE 22670
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22504: LD_INT 22
22506: PUSH
22507: LD_INT 1
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 2
22516: PUSH
22517: LD_INT 30
22519: PUSH
22520: LD_INT 26
22522: PUSH
22523: EMPTY
22524: LIST
22525: LIST
22526: PUSH
22527: LD_INT 30
22529: PUSH
22530: LD_INT 27
22532: PUSH
22533: EMPTY
22534: LIST
22535: LIST
22536: PUSH
22537: LD_INT 30
22539: PUSH
22540: LD_INT 28
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: EMPTY
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 69
22561: PUSH
22562: LD_INT 0
22564: GREATER
22565: IFFALSE 22670
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22567: LD_ADDR_VAR 0 2
22571: PUSH
22572: LD_INT 22
22574: PUSH
22575: LD_INT 1
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 2
22584: PUSH
22585: LD_INT 30
22587: PUSH
22588: LD_INT 7
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 30
22597: PUSH
22598: LD_INT 8
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: PUSH
22610: EMPTY
22611: LIST
22612: LIST
22613: PPUSH
22614: CALL_OW 69
22618: PUSH
22619: FOR_IN
22620: IFFALSE 22668
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22622: LD_VAR 0 2
22626: PPUSH
22627: LD_INT 1
22629: PPUSH
22630: CALL_OW 268
22634: PUSH
22635: LD_INT 11
22637: EQUAL
22638: PUSH
22639: LD_VAR 0 2
22643: PPUSH
22644: LD_INT 2
22646: PPUSH
22647: CALL_OW 268
22651: PUSH
22652: LD_INT 11
22654: EQUAL
22655: OR
22656: IFFALSE 22666
// eventVar1 = 1 ;
22658: LD_ADDR_EXP 61
22662: PUSH
22663: LD_INT 1
22665: ST_TO_ADDR
22666: GO 22619
22668: POP
22669: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 255
22679: PUSH
22680: LD_INT 2
22682: EQUAL
22683: IFFALSE 22788
// begin if GetBType ( building ) = b_barracks then
22685: LD_VAR 0 1
22689: PPUSH
22690: CALL_OW 266
22694: PUSH
22695: LD_INT 5
22697: EQUAL
22698: IFFALSE 22788
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22700: LD_ADDR_VAR 0 2
22704: PUSH
22705: LD_INT 22
22707: PUSH
22708: LD_INT 2
22710: PUSH
22711: EMPTY
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 25
22717: PUSH
22718: LD_INT 1
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PUSH
22725: LD_INT 3
22727: PUSH
22728: LD_INT 54
22730: PUSH
22731: EMPTY
22732: LIST
22733: PUSH
22734: EMPTY
22735: LIST
22736: LIST
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: LIST
22742: PPUSH
22743: CALL_OW 69
22747: PUSH
22748: LD_EXP 26
22752: PUSH
22753: EMPTY
22754: LIST
22755: DIFF
22756: PUSH
22757: FOR_IN
22758: IFFALSE 22776
// ComEnterUnit ( i , building ) ;
22760: LD_VAR 0 2
22764: PPUSH
22765: LD_VAR 0 1
22769: PPUSH
22770: CALL_OW 120
22774: GO 22757
22776: POP
22777: POP
// arArm = building ;
22778: LD_ADDR_EXP 45
22782: PUSH
22783: LD_VAR 0 1
22787: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22788: LD_VAR 0 1
22792: PPUSH
22793: CALL_OW 255
22797: PUSH
22798: LD_INT 3
22800: EQUAL
22801: IFFALSE 23274
// begin if GetBType ( building ) = b_factory then
22803: LD_VAR 0 1
22807: PPUSH
22808: CALL_OW 266
22812: PUSH
22813: LD_INT 3
22815: EQUAL
22816: IFFALSE 22883
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22818: LD_ADDR_VAR 0 2
22822: PUSH
22823: LD_INT 22
22825: PUSH
22826: LD_INT 3
22828: PUSH
22829: EMPTY
22830: LIST
22831: LIST
22832: PUSH
22833: LD_INT 25
22835: PUSH
22836: LD_INT 3
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL_OW 69
22851: PUSH
22852: FOR_IN
22853: IFFALSE 22871
// ComEnterUnit ( i , building ) ;
22855: LD_VAR 0 2
22859: PPUSH
22860: LD_VAR 0 1
22864: PPUSH
22865: CALL_OW 120
22869: GO 22852
22871: POP
22872: POP
// ruFab = building ;
22873: LD_ADDR_EXP 35
22877: PUSH
22878: LD_VAR 0 1
22882: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22883: LD_INT 22
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 21
22895: PUSH
22896: LD_INT 3
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 30
22905: PUSH
22906: LD_INT 8
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: LIST
22917: PPUSH
22918: CALL_OW 69
22922: PUSH
22923: LD_INT 2
22925: EQUAL
22926: IFFALSE 23134
// begin for i = 1 to 2 do
22928: LD_ADDR_VAR 0 2
22932: PUSH
22933: DOUBLE
22934: LD_INT 1
22936: DEC
22937: ST_TO_ADDR
22938: LD_INT 2
22940: PUSH
22941: FOR_TO
22942: IFFALSE 23029
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22944: LD_INT 22
22946: PUSH
22947: LD_INT 3
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 25
22956: PUSH
22957: LD_INT 4
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: PUSH
22973: LD_VAR 0 2
22977: ARRAY
22978: PPUSH
22979: LD_INT 22
22981: PUSH
22982: LD_INT 3
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: LD_INT 21
22991: PUSH
22992: LD_INT 3
22994: PUSH
22995: EMPTY
22996: LIST
22997: LIST
22998: PUSH
22999: LD_INT 30
23001: PUSH
23002: LD_INT 8
23004: PUSH
23005: EMPTY
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: LIST
23013: PPUSH
23014: CALL_OW 69
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: PPUSH
23023: CALL_OW 120
23027: GO 22941
23029: POP
23030: POP
// for i = 3 to 4 do
23031: LD_ADDR_VAR 0 2
23035: PUSH
23036: DOUBLE
23037: LD_INT 3
23039: DEC
23040: ST_TO_ADDR
23041: LD_INT 4
23043: PUSH
23044: FOR_TO
23045: IFFALSE 23132
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23047: LD_INT 22
23049: PUSH
23050: LD_INT 3
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 25
23059: PUSH
23060: LD_INT 4
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PPUSH
23071: CALL_OW 69
23075: PUSH
23076: LD_VAR 0 2
23080: ARRAY
23081: PPUSH
23082: LD_INT 22
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 21
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 30
23104: PUSH
23105: LD_INT 8
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 69
23121: PUSH
23122: LD_INT 2
23124: ARRAY
23125: PPUSH
23126: CALL_OW 120
23130: GO 23044
23132: POP
23133: POP
// end ; if GetBType ( building ) = b_barracks then
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 5
23146: EQUAL
23147: IFFALSE 23274
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23149: LD_ADDR_VAR 0 2
23153: PUSH
23154: LD_INT 22
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: PUSH
23164: LD_INT 25
23166: PUSH
23167: LD_INT 1
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PUSH
23174: LD_INT 3
23176: PUSH
23177: LD_INT 54
23179: PUSH
23180: EMPTY
23181: LIST
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: LIST
23191: PPUSH
23192: CALL_OW 69
23196: PUSH
23197: FOR_IN
23198: IFFALSE 23216
// ComEnterUnit ( i , building ) ;
23200: LD_VAR 0 2
23204: PPUSH
23205: LD_VAR 0 1
23209: PPUSH
23210: CALL_OW 120
23214: GO 23197
23216: POP
23217: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23218: LD_INT 22
23220: PUSH
23221: LD_INT 3
23223: PUSH
23224: EMPTY
23225: LIST
23226: LIST
23227: PUSH
23228: LD_INT 30
23230: PUSH
23231: LD_INT 5
23233: PUSH
23234: EMPTY
23235: LIST
23236: LIST
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PPUSH
23242: CALL_OW 69
23246: PUSH
23247: LD_INT 0
23249: EQUAL
23250: IFFALSE 23264
// ruArm1 = building else
23252: LD_ADDR_EXP 33
23256: PUSH
23257: LD_VAR 0 1
23261: ST_TO_ADDR
23262: GO 23274
// ruArm2 = building ;
23264: LD_ADDR_EXP 34
23268: PUSH
23269: LD_VAR 0 1
23273: ST_TO_ADDR
// end ; end ; end ;
23274: PPOPN 2
23276: END
// on EnterBuilding ( building , human ) do var rnd ;
23277: LD_INT 0
23279: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23280: LD_VAR 0 2
23284: PPUSH
23285: CALL_OW 255
23289: PUSH
23290: LD_INT 2
23292: EQUAL
23293: PUSH
23294: LD_VAR 0 2
23298: PPUSH
23299: CALL_OW 257
23303: PUSH
23304: LD_INT 1
23306: EQUAL
23307: AND
23308: PUSH
23309: LD_VAR 0 1
23313: PUSH
23314: LD_EXP 45
23318: EQUAL
23319: AND
23320: IFFALSE 23367
// begin wait ( 0 0$1 ) ;
23322: LD_INT 35
23324: PPUSH
23325: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23329: LD_ADDR_VAR 0 3
23333: PUSH
23334: LD_INT 1
23336: PPUSH
23337: LD_INT 100
23339: PPUSH
23340: CALL_OW 12
23344: ST_TO_ADDR
// if rnd > 50 then
23345: LD_VAR 0 3
23349: PUSH
23350: LD_INT 50
23352: GREATER
23353: IFFALSE 23367
// SetClass ( human , class_mortar ) ;
23355: LD_VAR 0 2
23359: PPUSH
23360: LD_INT 8
23362: PPUSH
23363: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23367: LD_VAR 0 2
23371: PPUSH
23372: CALL_OW 255
23376: PUSH
23377: LD_INT 3
23379: EQUAL
23380: PUSH
23381: LD_VAR 0 2
23385: PPUSH
23386: CALL_OW 257
23390: PUSH
23391: LD_INT 1
23393: EQUAL
23394: AND
23395: PUSH
23396: LD_VAR 0 1
23400: PUSH
23401: LD_EXP 33
23405: EQUAL
23406: PUSH
23407: LD_VAR 0 1
23411: PUSH
23412: LD_EXP 34
23416: EQUAL
23417: OR
23418: PUSH
23419: EMPTY
23420: LIST
23421: AND
23422: IFFALSE 23443
// begin wait ( 0 0$1 ) ;
23424: LD_INT 35
23426: PPUSH
23427: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23431: LD_VAR 0 2
23435: PPUSH
23436: LD_INT 9
23438: PPUSH
23439: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23443: LD_VAR 0 2
23447: PPUSH
23448: CALL_OW 255
23452: PUSH
23453: LD_INT 3
23455: EQUAL
23456: PUSH
23457: LD_VAR 0 2
23461: PPUSH
23462: CALL_OW 257
23466: PUSH
23467: LD_INT 9
23469: EQUAL
23470: AND
23471: PUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 266
23481: PUSH
23482: LD_INT 32
23484: EQUAL
23485: AND
23486: IFFALSE 23507
// begin wait ( 0 0$1 ) ;
23488: LD_INT 35
23490: PPUSH
23491: CALL_OW 67
// SetClass ( human , 1 ) ;
23495: LD_VAR 0 2
23499: PPUSH
23500: LD_INT 1
23502: PPUSH
23503: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23507: LD_VAR 0 2
23511: PPUSH
23512: CALL_OW 255
23516: PUSH
23517: LD_INT 3
23519: EQUAL
23520: PUSH
23521: LD_VAR 0 2
23525: PPUSH
23526: CALL_OW 257
23530: PUSH
23531: LD_INT 3
23533: EQUAL
23534: AND
23535: PUSH
23536: LD_VAR 0 1
23540: PUSH
23541: LD_EXP 35
23545: EQUAL
23546: AND
23547: IFFALSE 23561
// SetLives ( human , 1000 ) ;
23549: LD_VAR 0 2
23553: PPUSH
23554: LD_INT 1000
23556: PPUSH
23557: CALL_OW 234
// end ;
23561: PPOPN 3
23563: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23564: LD_VAR 0 1
23568: PUSH
23569: LD_INT 1
23571: EQUAL
23572: PUSH
23573: LD_VAR 0 2
23577: PUSH
23578: LD_INT 2
23580: EQUAL
23581: AND
23582: PUSH
23583: LD_INT 1
23585: PPUSH
23586: LD_INT 2
23588: PPUSH
23589: CALL_OW 81
23593: PUSH
23594: LD_INT 1
23596: EQUAL
23597: AND
23598: IFFALSE 23619
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23600: LD_EXP 24
23604: PPUSH
23605: LD_STRING D6b-Pow-1
23607: PPUSH
23608: CALL_OW 94
// YouLost ( Powell ) ;
23612: LD_STRING Powell
23614: PPUSH
23615: CALL_OW 104
// end ; end ;
23619: PPOPN 2
23621: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23622: LD_INT 23
23624: PPUSH
23625: LD_INT 22
23627: PUSH
23628: LD_INT 1
23630: PUSH
23631: EMPTY
23632: LIST
23633: LIST
23634: PUSH
23635: LD_INT 21
23637: PUSH
23638: LD_INT 3
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PPUSH
23649: CALL_OW 70
23653: PUSH
23654: LD_INT 23
23656: PPUSH
23657: LD_INT 22
23659: PUSH
23660: LD_INT 1
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 21
23669: PUSH
23670: LD_INT 2
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 58
23679: PUSH
23680: EMPTY
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: LIST
23687: PPUSH
23688: CALL_OW 70
23692: OR
23693: PUSH
23694: LD_INT 1
23696: PPUSH
23697: LD_INT 2
23699: PPUSH
23700: CALL_OW 81
23704: PUSH
23705: LD_INT 1
23707: EQUAL
23708: AND
23709: IFFALSE 23733
23711: GO 23713
23713: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23714: LD_EXP 24
23718: PPUSH
23719: LD_STRING D6b-Pow-1
23721: PPUSH
23722: CALL_OW 94
// YouLost ( Powell ) ;
23726: LD_STRING Powell
23728: PPUSH
23729: CALL_OW 104
// end ;
23733: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23734: LD_VAR 0 1
23738: PUSH
23739: LD_EXP 1
23743: EQUAL
23744: IFFALSE 23753
// YouLost ( JMM ) ;
23746: LD_STRING JMM
23748: PPUSH
23749: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23753: LD_VAR 0 1
23757: PPUSH
23758: CALL_OW 255
23762: PUSH
23763: LD_INT 3
23765: EQUAL
23766: PUSH
23767: LD_VAR 0 1
23771: PPUSH
23772: CALL_OW 247
23776: PUSH
23777: LD_INT 3
23779: EQUAL
23780: AND
23781: IFFALSE 24473
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23783: LD_VAR 0 1
23787: PPUSH
23788: CALL_OW 266
23792: PUSH
23793: LD_INT 31
23795: EQUAL
23796: PUSH
23797: LD_VAR 0 1
23801: PPUSH
23802: CALL_OW 266
23806: PUSH
23807: LD_INT 32
23809: EQUAL
23810: OR
23811: PUSH
23812: LD_VAR 0 1
23816: PPUSH
23817: CALL_OW 266
23821: PUSH
23822: LD_INT 36
23824: EQUAL
23825: OR
23826: PUSH
23827: LD_VAR 0 1
23831: PPUSH
23832: CALL_OW 266
23836: PUSH
23837: LD_INT 0
23839: EQUAL
23840: OR
23841: PUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 266
23851: PUSH
23852: LD_INT 24
23854: EQUAL
23855: OR
23856: PUSH
23857: LD_VAR 0 1
23861: PPUSH
23862: CALL_OW 266
23866: PUSH
23867: LD_INT 17
23869: EQUAL
23870: OR
23871: PUSH
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 266
23881: PUSH
23882: LD_INT 25
23884: EQUAL
23885: OR
23886: PUSH
23887: LD_VAR 0 1
23891: PPUSH
23892: CALL_OW 266
23896: PUSH
23897: LD_INT 19
23899: EQUAL
23900: OR
23901: PUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 266
23911: PUSH
23912: LD_INT 20
23914: EQUAL
23915: OR
23916: PUSH
23917: LD_VAR 0 1
23921: PPUSH
23922: CALL_OW 266
23926: PUSH
23927: LD_INT 18
23929: EQUAL
23930: OR
23931: PUSH
23932: LD_VAR 0 1
23936: PPUSH
23937: CALL_OW 266
23941: PUSH
23942: LD_INT 21
23944: EQUAL
23945: OR
23946: PUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL_OW 266
23956: PUSH
23957: LD_INT 23
23959: EQUAL
23960: OR
23961: PUSH
23962: LD_VAR 0 1
23966: PPUSH
23967: CALL_OW 266
23971: PUSH
23972: LD_INT 16
23974: EQUAL
23975: OR
23976: PUSH
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 266
23986: PUSH
23987: LD_INT 6
23989: EQUAL
23990: OR
23991: PUSH
23992: LD_VAR 0 1
23996: PPUSH
23997: CALL_OW 266
24001: PUSH
24002: LD_INT 29
24004: EQUAL
24005: OR
24006: PUSH
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 266
24016: PUSH
24017: LD_INT 26
24019: EQUAL
24020: OR
24021: PUSH
24022: LD_VAR 0 1
24026: PPUSH
24027: CALL_OW 266
24031: PUSH
24032: LD_INT 30
24034: EQUAL
24035: OR
24036: PUSH
24037: LD_VAR 0 1
24041: PPUSH
24042: CALL_OW 266
24046: PUSH
24047: LD_INT 28
24049: EQUAL
24050: OR
24051: PUSH
24052: LD_VAR 0 1
24056: PPUSH
24057: CALL_OW 266
24061: PUSH
24062: LD_INT 27
24064: EQUAL
24065: OR
24066: PUSH
24067: LD_VAR 0 1
24071: PPUSH
24072: CALL_OW 266
24076: PUSH
24077: LD_INT 33
24079: EQUAL
24080: OR
24081: PUSH
24082: LD_VAR 0 1
24086: PPUSH
24087: CALL_OW 266
24091: PUSH
24092: LD_INT 2
24094: EQUAL
24095: OR
24096: PUSH
24097: LD_VAR 0 1
24101: PPUSH
24102: CALL_OW 266
24106: PUSH
24107: LD_INT 4
24109: EQUAL
24110: OR
24111: IFFALSE 24197
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24113: LD_ADDR_EXP 42
24117: PUSH
24118: LD_EXP 42
24122: PUSH
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 266
24132: ADD
24133: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24134: LD_ADDR_EXP 42
24138: PUSH
24139: LD_EXP 42
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 250
24153: ADD
24154: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24155: LD_ADDR_EXP 42
24159: PUSH
24160: LD_EXP 42
24164: PUSH
24165: LD_VAR 0 1
24169: PPUSH
24170: CALL_OW 251
24174: ADD
24175: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24176: LD_ADDR_EXP 42
24180: PUSH
24181: LD_EXP 42
24185: PUSH
24186: LD_VAR 0 1
24190: PPUSH
24191: CALL_OW 254
24195: ADD
24196: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 266
24206: PUSH
24207: LD_INT 1
24209: EQUAL
24210: IFFALSE 24289
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24212: LD_ADDR_EXP 42
24216: PUSH
24217: LD_EXP 42
24221: PUSH
24222: LD_INT 0
24224: ADD
24225: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24226: LD_ADDR_EXP 42
24230: PUSH
24231: LD_EXP 42
24235: PUSH
24236: LD_VAR 0 1
24240: PPUSH
24241: CALL_OW 250
24245: ADD
24246: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24247: LD_ADDR_EXP 42
24251: PUSH
24252: LD_EXP 42
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 251
24266: ADD
24267: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24268: LD_ADDR_EXP 42
24272: PUSH
24273: LD_EXP 42
24277: PUSH
24278: LD_VAR 0 1
24282: PPUSH
24283: CALL_OW 254
24287: ADD
24288: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24289: LD_VAR 0 1
24293: PPUSH
24294: CALL_OW 266
24298: PUSH
24299: LD_INT 3
24301: EQUAL
24302: IFFALSE 24381
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24304: LD_ADDR_EXP 42
24308: PUSH
24309: LD_EXP 42
24313: PUSH
24314: LD_INT 2
24316: ADD
24317: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24318: LD_ADDR_EXP 42
24322: PUSH
24323: LD_EXP 42
24327: PUSH
24328: LD_VAR 0 1
24332: PPUSH
24333: CALL_OW 250
24337: ADD
24338: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24339: LD_ADDR_EXP 42
24343: PUSH
24344: LD_EXP 42
24348: PUSH
24349: LD_VAR 0 1
24353: PPUSH
24354: CALL_OW 251
24358: ADD
24359: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24360: LD_ADDR_EXP 42
24364: PUSH
24365: LD_EXP 42
24369: PUSH
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 254
24379: ADD
24380: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 266
24390: PUSH
24391: LD_INT 5
24393: EQUAL
24394: IFFALSE 24473
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24396: LD_ADDR_EXP 42
24400: PUSH
24401: LD_EXP 42
24405: PUSH
24406: LD_INT 4
24408: ADD
24409: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24410: LD_ADDR_EXP 42
24414: PUSH
24415: LD_EXP 42
24419: PUSH
24420: LD_VAR 0 1
24424: PPUSH
24425: CALL_OW 250
24429: ADD
24430: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24431: LD_ADDR_EXP 42
24435: PUSH
24436: LD_EXP 42
24440: PUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 251
24450: ADD
24451: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24452: LD_ADDR_EXP 42
24456: PUSH
24457: LD_EXP 42
24461: PUSH
24462: LD_VAR 0 1
24466: PPUSH
24467: CALL_OW 254
24471: ADD
24472: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 257
24482: PUSH
24483: LD_INT 3
24485: EQUAL
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 255
24496: PUSH
24497: LD_INT 3
24499: EQUAL
24500: AND
24501: PUSH
24502: LD_EXP 35
24506: PPUSH
24507: CALL_OW 302
24511: AND
24512: PUSH
24513: LD_EXP 35
24517: PPUSH
24518: CALL_OW 255
24522: PUSH
24523: LD_INT 3
24525: EQUAL
24526: AND
24527: IFFALSE 24597
// begin uc_side = 3 ;
24529: LD_ADDR_OWVAR 20
24533: PUSH
24534: LD_INT 3
24536: ST_TO_ADDR
// uc_nation = 3 ;
24537: LD_ADDR_OWVAR 21
24541: PUSH
24542: LD_INT 3
24544: ST_TO_ADDR
// hc_gallery :=  ;
24545: LD_ADDR_OWVAR 33
24549: PUSH
24550: LD_STRING 
24552: ST_TO_ADDR
// hc_name :=  ;
24553: LD_ADDR_OWVAR 26
24557: PUSH
24558: LD_STRING 
24560: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24561: LD_INT 0
24563: PPUSH
24564: LD_EXP 36
24568: PPUSH
24569: LD_EXP 37
24573: PPUSH
24574: CALL_OW 12
24578: PPUSH
24579: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24583: CALL_OW 44
24587: PPUSH
24588: LD_EXP 35
24592: PPUSH
24593: CALL_OW 52
// end ; end ;
24597: PPOPN 1
24599: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24600: LD_ADDR_OWVAR 57
24604: PUSH
24605: LD_INT 0
24607: ST_TO_ADDR
// fastEnd = 1 ;
24608: LD_ADDR_EXP 59
24612: PUSH
24613: LD_INT 1
24615: ST_TO_ADDR
// FinishMission ;
24616: CALL 25878 0 0
// end ; end_of_file
24620: PPOPN 1
24622: END
// export function PrepareNature ; var i , un ; begin
24623: LD_INT 0
24625: PPUSH
24626: PPUSH
24627: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24628: LD_ADDR_VAR 0 2
24632: PUSH
24633: DOUBLE
24634: LD_INT 1
24636: DEC
24637: ST_TO_ADDR
24638: LD_OWVAR 67
24642: PUSH
24643: LD_INT 1
24645: PPUSH
24646: LD_INT 5
24648: PPUSH
24649: CALL_OW 12
24653: PLUS
24654: PUSH
24655: FOR_TO
24656: IFFALSE 24801
// begin hc_sex = sex_male ;
24658: LD_ADDR_OWVAR 27
24662: PUSH
24663: LD_INT 1
24665: ST_TO_ADDR
// uc_side = 0 ;
24666: LD_ADDR_OWVAR 20
24670: PUSH
24671: LD_INT 0
24673: ST_TO_ADDR
// uc_nation = nation_nature ;
24674: LD_ADDR_OWVAR 21
24678: PUSH
24679: LD_INT 0
24681: ST_TO_ADDR
// hc_class = class_apeman ;
24682: LD_ADDR_OWVAR 28
24686: PUSH
24687: LD_INT 12
24689: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24690: LD_ADDR_OWVAR 31
24694: PUSH
24695: LD_INT 2
24697: PPUSH
24698: LD_INT 7
24700: PPUSH
24701: CALL_OW 12
24705: PUSH
24706: LD_OWVAR 67
24710: PLUS
24711: PUSH
24712: LD_INT 2
24714: PPUSH
24715: LD_INT 10
24717: PPUSH
24718: CALL_OW 12
24722: PUSH
24723: LD_INT 2
24725: PPUSH
24726: LD_INT 10
24728: PPUSH
24729: CALL_OW 12
24733: PUSH
24734: LD_INT 2
24736: PPUSH
24737: LD_INT 10
24739: PPUSH
24740: CALL_OW 12
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24751: LD_ADDR_OWVAR 35
24755: PUSH
24756: LD_INT 5
24758: NEG
24759: PPUSH
24760: LD_INT 5
24762: PPUSH
24763: CALL_OW 12
24767: PUSH
24768: LD_OWVAR 67
24772: MUL
24773: ST_TO_ADDR
// un = CreateHuman ;
24774: LD_ADDR_VAR 0 3
24778: PUSH
24779: CALL_OW 44
24783: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24784: LD_VAR 0 3
24788: PPUSH
24789: LD_INT 5
24791: PPUSH
24792: LD_INT 0
24794: PPUSH
24795: CALL_OW 49
// end ;
24799: GO 24655
24801: POP
24802: POP
// for i = 1 to Difficulty + 2 do
24803: LD_ADDR_VAR 0 2
24807: PUSH
24808: DOUBLE
24809: LD_INT 1
24811: DEC
24812: ST_TO_ADDR
24813: LD_OWVAR 67
24817: PUSH
24818: LD_INT 2
24820: PLUS
24821: PUSH
24822: FOR_TO
24823: IFFALSE 24932
// begin hc_sex = sex_male ;
24825: LD_ADDR_OWVAR 27
24829: PUSH
24830: LD_INT 1
24832: ST_TO_ADDR
// uc_side = 0 ;
24833: LD_ADDR_OWVAR 20
24837: PUSH
24838: LD_INT 0
24840: ST_TO_ADDR
// uc_nation = nation_nature ;
24841: LD_ADDR_OWVAR 21
24845: PUSH
24846: LD_INT 0
24848: ST_TO_ADDR
// hc_class = class_tiger ;
24849: LD_ADDR_OWVAR 28
24853: PUSH
24854: LD_INT 14
24856: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24857: LD_ADDR_OWVAR 31
24861: PUSH
24862: LD_EXP 37
24866: PUSH
24867: LD_INT 0
24869: PUSH
24870: LD_INT 0
24872: PUSH
24873: LD_INT 0
24875: PUSH
24876: EMPTY
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24882: LD_ADDR_OWVAR 35
24886: PUSH
24887: LD_INT 5
24889: NEG
24890: PPUSH
24891: LD_INT 5
24893: PPUSH
24894: CALL_OW 12
24898: PUSH
24899: LD_OWVAR 67
24903: MUL
24904: ST_TO_ADDR
// un = CreateHuman ;
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: CALL_OW 44
24914: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24915: LD_VAR 0 3
24919: PPUSH
24920: LD_INT 6
24922: PPUSH
24923: LD_INT 0
24925: PPUSH
24926: CALL_OW 49
// end ;
24930: GO 24822
24932: POP
24933: POP
// for i = 1 to rand ( 3 , 4 ) do
24934: LD_ADDR_VAR 0 2
24938: PUSH
24939: DOUBLE
24940: LD_INT 1
24942: DEC
24943: ST_TO_ADDR
24944: LD_INT 3
24946: PPUSH
24947: LD_INT 4
24949: PPUSH
24950: CALL_OW 12
24954: PUSH
24955: FOR_TO
24956: IFFALSE 25050
// begin hc_sex = sex_male ;
24958: LD_ADDR_OWVAR 27
24962: PUSH
24963: LD_INT 1
24965: ST_TO_ADDR
// uc_side = 0 ;
24966: LD_ADDR_OWVAR 20
24970: PUSH
24971: LD_INT 0
24973: ST_TO_ADDR
// uc_nation = nation_nature ;
24974: LD_ADDR_OWVAR 21
24978: PUSH
24979: LD_INT 0
24981: ST_TO_ADDR
// hc_class = 18 ;
24982: LD_ADDR_OWVAR 28
24986: PUSH
24987: LD_INT 18
24989: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24990: LD_ADDR_OWVAR 31
24994: PUSH
24995: LD_EXP 37
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: ST_TO_ADDR
// hc_agressivity = 0 ;
25015: LD_ADDR_OWVAR 35
25019: PUSH
25020: LD_INT 0
25022: ST_TO_ADDR
// un = CreateHuman ;
25023: LD_ADDR_VAR 0 3
25027: PUSH
25028: CALL_OW 44
25032: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25033: LD_VAR 0 3
25037: PPUSH
25038: LD_INT 6
25040: PPUSH
25041: LD_INT 0
25043: PPUSH
25044: CALL_OW 49
// end ;
25048: GO 24955
25050: POP
25051: POP
// end ; end_of_file
25052: LD_VAR 0 1
25056: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25057: LD_EXP 46
25061: PUSH
25062: LD_INT 1
25064: EQUAL
25065: IFFALSE 25149
25067: GO 25069
25069: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25070: LD_INT 7
25072: PPUSH
25073: LD_INT 5
25075: PPUSH
25076: LD_INT 4
25078: PUSH
25079: LD_INT 5
25081: PUSH
25082: LD_INT 6
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: PUSH
25090: LD_OWVAR 67
25094: ARRAY
25095: PPUSH
25096: LD_EXP 36
25100: PPUSH
25101: LD_EXP 37
25105: PPUSH
25106: CALL_OW 12
25110: PPUSH
25111: LD_INT 2
25113: PPUSH
25114: LD_INT 1
25116: PPUSH
25117: LD_INT 1
25119: PPUSH
25120: EMPTY
25121: PPUSH
25122: LD_INT 25
25124: PUSH
25125: LD_INT 26
25127: PUSH
25128: LD_INT 27
25130: PUSH
25131: LD_INT 28
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: PPUSH
25140: EMPTY
25141: PPUSH
25142: LD_INT 1
25144: PPUSH
25145: CALL 15630 0 11
25149: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25150: LD_EXP 46
25154: PUSH
25155: LD_INT 1
25157: EQUAL
25158: IFFALSE 25246
25160: GO 25162
25162: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25163: LD_INT 5
25165: PPUSH
25166: LD_INT 2
25168: PPUSH
25169: LD_INT 7
25171: PUSH
25172: LD_INT 8
25174: PUSH
25175: LD_INT 10
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: LD_OWVAR 67
25187: ARRAY
25188: PPUSH
25189: LD_INT 0
25191: PPUSH
25192: LD_INT 0
25194: PPUSH
25195: LD_INT 2
25197: PUSH
25198: LD_INT 4
25200: PUSH
25201: LD_INT 5
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: LIST
25208: PUSH
25209: LD_OWVAR 67
25213: ARRAY
25214: PPUSH
25215: LD_INT 0
25217: PPUSH
25218: LD_EXP 36
25222: PPUSH
25223: LD_EXP 37
25227: PPUSH
25228: CALL_OW 12
25232: PPUSH
25233: LD_INT 7
25235: PPUSH
25236: LD_INT 9
25238: PPUSH
25239: LD_INT 1
25241: PPUSH
25242: CALL 17334 0 11
25246: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25247: LD_EXP 46
25251: PUSH
25252: LD_INT 1
25254: EQUAL
25255: IFFALSE 25264
25257: GO 25259
25259: DISABLE
// PrepareArabianSheik ;
25260: CALL 3834 0 0
25264: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25265: LD_EXP 29
25269: PUSH
25270: LD_EXP 60
25274: PUSH
25275: LD_INT 1
25277: EQUAL
25278: AND
25279: IFFALSE 25348
25281: GO 25283
25283: DISABLE
// begin enable ;
25284: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25285: LD_INT 6
25287: PPUSH
25288: LD_INT 3
25290: PPUSH
25291: LD_EXP 57
25295: PPUSH
25296: LD_INT 0
25298: PPUSH
25299: LD_OWVAR 67
25303: PPUSH
25304: LD_INT 0
25306: PPUSH
25307: LD_EXP 57
25311: PUSH
25312: LD_INT 3
25314: DIV
25315: PUSH
25316: LD_INT 1
25318: PLUS
25319: PPUSH
25320: LD_EXP 36
25324: PPUSH
25325: LD_EXP 37
25329: PPUSH
25330: CALL_OW 12
25334: PPUSH
25335: LD_INT 17
25337: PPUSH
25338: LD_INT 18
25340: PPUSH
25341: LD_INT 1
25343: PPUSH
25344: CALL 17334 0 11
// end ;
25348: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25349: LD_EXP 29
25353: PUSH
25354: LD_EXP 60
25358: PUSH
25359: LD_INT 1
25361: EQUAL
25362: AND
25363: IFFALSE 25440
25365: GO 25367
25367: DISABLE
// begin enable ;
25368: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25369: LD_INT 17
25371: PPUSH
25372: LD_INT 6
25374: PPUSH
25375: LD_EXP 56
25379: PPUSH
25380: LD_EXP 36
25384: PPUSH
25385: LD_EXP 37
25389: PPUSH
25390: CALL_OW 12
25394: PPUSH
25395: LD_INT 3
25397: PPUSH
25398: LD_INT 1
25400: PPUSH
25401: LD_INT 1
25403: PUSH
25404: LD_INT 3
25406: PUSH
25407: EMPTY
25408: LIST
25409: LIST
25410: PPUSH
25411: LD_INT 43
25413: PUSH
25414: LD_INT 44
25416: PUSH
25417: LD_INT 45
25419: PUSH
25420: LD_INT 46
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: PPUSH
25429: EMPTY
25430: PPUSH
25431: EMPTY
25432: PPUSH
25433: LD_INT 1
25435: PPUSH
25436: CALL 15630 0 11
// end ;
25440: END
// every 10 10$00 trigger joinEpsilon do
25441: LD_EXP 29
25445: IFFALSE 25499
25447: GO 25449
25449: DISABLE
// begin enable ;
25450: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25451: LD_ADDR_EXP 56
25455: PUSH
25456: LD_EXP 56
25460: PUSH
25461: LD_INT 1
25463: PPUSH
25464: LD_OWVAR 67
25468: PPUSH
25469: CALL_OW 12
25473: PLUS
25474: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25475: LD_ADDR_EXP 57
25479: PUSH
25480: LD_EXP 57
25484: PUSH
25485: LD_INT 1
25487: PPUSH
25488: LD_OWVAR 67
25492: PPUSH
25493: CALL_OW 12
25497: PLUS
25498: ST_TO_ADDR
// end ;
25499: END
// every 21 21$0 trigger attackAvalaible = 1 do
25500: LD_EXP 60
25504: PUSH
25505: LD_INT 1
25507: EQUAL
25508: IFFALSE 25521
25510: GO 25512
25512: DISABLE
// attackAvalaible = 0 ; end_of_file
25513: LD_ADDR_EXP 60
25517: PUSH
25518: LD_INT 0
25520: ST_TO_ADDR
25521: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25522: LD_INT 54
25524: PPUSH
25525: LD_INT 1
25527: PPUSH
25528: CALL_OW 321
25532: PUSH
25533: LD_INT 2
25535: EQUAL
25536: PUSH
25537: LD_INT 55
25539: PPUSH
25540: LD_INT 1
25542: PPUSH
25543: CALL_OW 321
25547: PUSH
25548: LD_INT 2
25550: EQUAL
25551: AND
25552: PUSH
25553: LD_INT 21
25555: PPUSH
25556: LD_INT 1
25558: PPUSH
25559: CALL_OW 321
25563: PUSH
25564: LD_INT 2
25566: EQUAL
25567: AND
25568: PUSH
25569: LD_INT 22
25571: PPUSH
25572: LD_INT 1
25574: PPUSH
25575: CALL_OW 321
25579: PUSH
25580: LD_INT 2
25582: EQUAL
25583: AND
25584: PUSH
25585: LD_INT 12
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: CALL_OW 321
25595: PUSH
25596: LD_INT 1
25598: EQUAL
25599: PUSH
25600: LD_INT 32
25602: PPUSH
25603: LD_INT 1
25605: PPUSH
25606: CALL_OW 321
25610: PUSH
25611: LD_INT 1
25613: EQUAL
25614: OR
25615: PUSH
25616: EMPTY
25617: LIST
25618: AND
25619: PUSH
25620: LD_EXP 48
25624: PUSH
25625: LD_INT 1
25627: EQUAL
25628: AND
25629: PUSH
25630: LD_INT 22
25632: PUSH
25633: LD_INT 3
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: PUSH
25640: LD_INT 21
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PPUSH
25654: CALL_OW 69
25658: PUSH
25659: LD_INT 0
25661: EQUAL
25662: AND
25663: IFFALSE 25719
25665: GO 25667
25667: DISABLE
// begin case query ( QEndMission ) of 1 :
25668: LD_STRING QEndMission
25670: PPUSH
25671: CALL_OW 97
25675: PUSH
25676: LD_INT 1
25678: DOUBLE
25679: EQUAL
25680: IFTRUE 25684
25682: GO 25695
25684: POP
// begin end_the_mission_allowed = true ;
25685: LD_ADDR_OWVAR 57
25689: PUSH
25690: LD_INT 1
25692: ST_TO_ADDR
// end ; 2 :
25693: GO 25719
25695: LD_INT 2
25697: DOUBLE
25698: EQUAL
25699: IFTRUE 25703
25701: GO 25718
25703: POP
// begin fastEnd = 1 ;
25704: LD_ADDR_EXP 59
25708: PUSH
25709: LD_INT 1
25711: ST_TO_ADDR
// FinishMission ;
25712: CALL 25878 0 0
// end ; end ;
25716: GO 25719
25718: POP
// end ;
25719: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25720: LD_INT 54
25722: PPUSH
25723: LD_INT 1
25725: PPUSH
25726: CALL_OW 321
25730: PUSH
25731: LD_INT 2
25733: EQUAL
25734: PUSH
25735: LD_INT 55
25737: PPUSH
25738: LD_INT 1
25740: PPUSH
25741: CALL_OW 321
25745: PUSH
25746: LD_INT 2
25748: EQUAL
25749: AND
25750: PUSH
25751: LD_INT 21
25753: PPUSH
25754: LD_INT 1
25756: PPUSH
25757: CALL_OW 321
25761: PUSH
25762: LD_INT 2
25764: EQUAL
25765: AND
25766: PUSH
25767: LD_INT 22
25769: PPUSH
25770: LD_INT 1
25772: PPUSH
25773: CALL_OW 321
25777: PUSH
25778: LD_INT 2
25780: EQUAL
25781: AND
25782: PUSH
25783: LD_INT 12
25785: PPUSH
25786: LD_INT 1
25788: PPUSH
25789: CALL_OW 321
25793: PUSH
25794: LD_INT 2
25796: EQUAL
25797: AND
25798: PUSH
25799: LD_INT 32
25801: PPUSH
25802: LD_INT 1
25804: PPUSH
25805: CALL_OW 321
25809: PUSH
25810: LD_INT 2
25812: EQUAL
25813: AND
25814: PUSH
25815: LD_EXP 59
25819: PUSH
25820: LD_INT 0
25822: EQUAL
25823: AND
25824: PUSH
25825: LD_EXP 48
25829: PUSH
25830: LD_INT 1
25832: EQUAL
25833: AND
25834: PUSH
25835: LD_INT 22
25837: PUSH
25838: LD_INT 3
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 21
25847: PUSH
25848: LD_INT 1
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: PUSH
25864: LD_INT 0
25866: EQUAL
25867: AND
25868: IFFALSE 25877
25870: GO 25872
25872: DISABLE
// FinishMission ;
25873: CALL 25878 0 0
25877: END
// export function FinishMission ; begin
25878: LD_INT 0
25880: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25881: LD_EXP 52
25885: PPUSH
25886: LD_STRING 10_KhatamStatus_1
25888: PPUSH
25889: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25893: LD_EXP 51
25897: PPUSH
25898: LD_STRING 10_GensherEscape_1
25900: PPUSH
25901: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25905: LD_INT 12
25907: PPUSH
25908: LD_INT 1
25910: PPUSH
25911: CALL_OW 321
25915: PUSH
25916: LD_INT 2
25918: EQUAL
25919: IFFALSE 25933
// begin AddMedal ( sights , 1 ) ;
25921: LD_STRING sights
25923: PPUSH
25924: LD_INT 1
25926: PPUSH
25927: CALL_OW 101
// end else
25931: GO 25944
// begin AddMedal ( sights , - 1 ) ;
25933: LD_STRING sights
25935: PPUSH
25936: LD_INT 1
25938: NEG
25939: PPUSH
25940: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25944: LD_INT 32
25946: PPUSH
25947: LD_INT 1
25949: PPUSH
25950: CALL_OW 321
25954: PUSH
25955: LD_INT 2
25957: EQUAL
25958: IFFALSE 25972
// begin AddMedal ( computers , 1 ) ;
25960: LD_STRING computers
25962: PPUSH
25963: LD_INT 1
25965: PPUSH
25966: CALL_OW 101
// end else
25970: GO 25983
// begin AddMedal ( computers , - 1 ) ;
25972: LD_STRING computers
25974: PPUSH
25975: LD_INT 1
25977: NEG
25978: PPUSH
25979: CALL_OW 101
// end ; if arabianEscape = 0 then
25983: LD_EXP 47
25987: PUSH
25988: LD_INT 0
25990: EQUAL
25991: IFFALSE 26015
// begin AddMedal ( renegades , 2 ) ;
25993: LD_STRING renegades
25995: PPUSH
25996: LD_INT 2
25998: PPUSH
25999: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26003: LD_INT 0
26005: PPUSH
26006: LD_STRING 10_ScientistsEscape_1
26008: PPUSH
26009: CALL_OW 39
// end else
26013: GO 26026
// begin AddMedal ( renegades , - 1 ) ;
26015: LD_STRING renegades
26017: PPUSH
26018: LD_INT 1
26020: NEG
26021: PPUSH
26022: CALL_OW 101
// end ; SaveEpsilonBase ;
26026: CALL 26745 0 0
// Query ( kaj ) ;
26030: LD_STRING kaj
26032: PPUSH
26033: CALL_OW 97
// GiveMedals ( Main ) ;
26037: LD_STRING Main
26039: PPUSH
26040: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26044: LD_INT 22
26046: PUSH
26047: LD_INT 1
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 23
26056: PUSH
26057: LD_INT 1
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 21
26066: PUSH
26067: LD_INT 1
26069: PUSH
26070: EMPTY
26071: LIST
26072: LIST
26073: PUSH
26074: LD_INT 2
26076: PUSH
26077: LD_INT 25
26079: PUSH
26080: LD_INT 1
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: LD_INT 25
26089: PUSH
26090: LD_INT 2
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 25
26099: PUSH
26100: LD_INT 3
26102: PUSH
26103: EMPTY
26104: LIST
26105: LIST
26106: PUSH
26107: LD_INT 25
26109: PUSH
26110: LD_INT 4
26112: PUSH
26113: EMPTY
26114: LIST
26115: LIST
26116: PUSH
26117: LD_INT 25
26119: PUSH
26120: LD_INT 5
26122: PUSH
26123: EMPTY
26124: LIST
26125: LIST
26126: PUSH
26127: LD_INT 25
26129: PUSH
26130: LD_INT 8
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: PPUSH
26152: CALL_OW 69
26156: PPUSH
26157: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26161: LD_EXP 1
26165: PPUSH
26166: LD_EXP 53
26170: PUSH
26171: LD_STRING JMM
26173: STR
26174: PPUSH
26175: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26179: LD_EXP 2
26183: PPUSH
26184: LD_EXP 53
26188: PUSH
26189: LD_STRING Brown
26191: STR
26192: PPUSH
26193: CALL 9905 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26197: LD_EXP 3
26201: PPUSH
26202: LD_EXP 53
26206: PUSH
26207: LD_STRING Donaldson
26209: STR
26210: PPUSH
26211: CALL 9905 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26215: LD_EXP 4
26219: PPUSH
26220: LD_EXP 53
26224: PUSH
26225: LD_STRING Bobby
26227: STR
26228: PPUSH
26229: CALL 9905 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26233: LD_EXP 5
26237: PPUSH
26238: LD_EXP 53
26242: PUSH
26243: LD_STRING Cyrus
26245: STR
26246: PPUSH
26247: CALL 9905 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26251: LD_EXP 6
26255: PPUSH
26256: LD_EXP 53
26260: PUSH
26261: LD_STRING Lisa
26263: STR
26264: PPUSH
26265: CALL 9905 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26269: LD_EXP 7
26273: PPUSH
26274: LD_EXP 53
26278: PUSH
26279: LD_STRING Frank
26281: STR
26282: PPUSH
26283: CALL 9905 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26287: LD_EXP 8
26291: PPUSH
26292: LD_EXP 53
26296: PUSH
26297: LD_STRING Kikuchi
26299: STR
26300: PPUSH
26301: CALL 9905 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26305: LD_EXP 9
26309: PPUSH
26310: LD_EXP 53
26314: PUSH
26315: LD_STRING Houten
26317: STR
26318: PPUSH
26319: CALL 9905 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26323: LD_EXP 10
26327: PPUSH
26328: LD_EXP 53
26332: PUSH
26333: LD_STRING Gary
26335: STR
26336: PPUSH
26337: CALL 9905 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26341: LD_EXP 19
26345: PPUSH
26346: LD_EXP 53
26350: PUSH
26351: LD_STRING Cornell
26353: STR
26354: PPUSH
26355: CALL 9905 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26359: LD_EXP 11
26363: PPUSH
26364: LD_EXP 53
26368: PUSH
26369: LD_STRING Simms
26371: STR
26372: PPUSH
26373: CALL 9905 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26377: LD_EXP 12
26381: PPUSH
26382: LD_EXP 53
26386: PUSH
26387: LD_STRING Denis
26389: STR
26390: PPUSH
26391: CALL 9905 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26395: LD_EXP 13
26399: PPUSH
26400: LD_EXP 53
26404: PUSH
26405: LD_STRING Joan
26407: STR
26408: PPUSH
26409: CALL 9905 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26413: LD_EXP 15
26417: PPUSH
26418: LD_EXP 53
26422: PUSH
26423: LD_STRING Gladstone
26425: STR
26426: PPUSH
26427: CALL 9905 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26431: LD_EXP 17
26435: PPUSH
26436: LD_EXP 53
26440: PUSH
26441: LD_STRING DeltaDoctor
26443: STR
26444: PPUSH
26445: CALL 9905 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26449: LD_INT 50
26451: PUSH
26452: EMPTY
26453: LIST
26454: PUSH
26455: LD_INT 22
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 21
26467: PUSH
26468: LD_INT 1
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: LD_INT 2
26477: PUSH
26478: LD_INT 25
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 25
26490: PUSH
26491: LD_INT 2
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 25
26500: PUSH
26501: LD_INT 3
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 25
26510: PUSH
26511: LD_INT 4
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: LD_INT 25
26520: PUSH
26521: LD_INT 5
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 25
26530: PUSH
26531: LD_INT 8
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: EMPTY
26539: LIST
26540: LIST
26541: LIST
26542: LIST
26543: LIST
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: PPUSH
26553: CALL_OW 69
26557: PUSH
26558: LD_EXP 1
26562: PUSH
26563: LD_EXP 2
26567: PUSH
26568: LD_EXP 3
26572: PUSH
26573: LD_EXP 4
26577: PUSH
26578: LD_EXP 5
26582: PUSH
26583: LD_EXP 6
26587: PUSH
26588: LD_EXP 7
26592: PUSH
26593: LD_EXP 15
26597: PUSH
26598: LD_EXP 8
26602: PUSH
26603: LD_EXP 12
26607: PUSH
26608: LD_EXP 13
26612: PUSH
26613: LD_EXP 9
26617: PUSH
26618: LD_EXP 11
26622: PUSH
26623: LD_EXP 10
26627: PUSH
26628: LD_EXP 17
26632: PUSH
26633: LD_EXP 19
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: DIFF
26656: PPUSH
26657: LD_STRING 10_other_survivors
26659: PPUSH
26660: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26664: LD_INT 50
26666: PUSH
26667: EMPTY
26668: LIST
26669: PUSH
26670: LD_INT 22
26672: PUSH
26673: LD_INT 1
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: PUSH
26680: LD_INT 21
26682: PUSH
26683: LD_INT 1
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: PUSH
26690: LD_INT 2
26692: PUSH
26693: LD_INT 25
26695: PUSH
26696: LD_INT 16
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 25
26705: PUSH
26706: LD_INT 12
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: LIST
26717: PUSH
26718: EMPTY
26719: LIST
26720: LIST
26721: LIST
26722: LIST
26723: PPUSH
26724: CALL_OW 69
26728: PPUSH
26729: LD_STRING 10_ape
26731: PPUSH
26732: CALL_OW 38
// YouWin ;
26736: CALL_OW 103
// end ;
26740: LD_VAR 0 1
26744: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
26749: PPUSH
26750: PPUSH
// epsilonBase = [ ] ;
26751: LD_ADDR_VAR 0 2
26755: PUSH
26756: EMPTY
26757: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26758: LD_ADDR_VAR 0 3
26762: PUSH
26763: LD_INT 22
26765: PUSH
26766: LD_INT 1
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 21
26775: PUSH
26776: LD_INT 3
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: PUSH
26783: LD_INT 50
26785: PUSH
26786: EMPTY
26787: LIST
26788: PUSH
26789: EMPTY
26790: LIST
26791: LIST
26792: LIST
26793: PPUSH
26794: CALL_OW 69
26798: ST_TO_ADDR
// for i in buildings do
26799: LD_ADDR_VAR 0 4
26803: PUSH
26804: LD_VAR 0 3
26808: PUSH
26809: FOR_IN
26810: IFFALSE 27247
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26812: LD_VAR 0 4
26816: PPUSH
26817: CALL_OW 266
26821: PUSH
26822: LD_INT 6
26824: PUSH
26825: LD_INT 7
26827: PUSH
26828: LD_INT 8
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: IN
26836: IFFALSE 26950
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26838: LD_ADDR_VAR 0 2
26842: PUSH
26843: LD_VAR 0 2
26847: PUSH
26848: LD_VAR 0 4
26852: PPUSH
26853: CALL_OW 266
26857: PUSH
26858: LD_VAR 0 4
26862: PPUSH
26863: CALL_OW 250
26867: PUSH
26868: LD_VAR 0 4
26872: PPUSH
26873: CALL_OW 251
26877: PUSH
26878: LD_VAR 0 4
26882: PPUSH
26883: CALL_OW 254
26887: PUSH
26888: LD_VAR 0 4
26892: PPUSH
26893: CALL_OW 267
26897: PUSH
26898: LD_VAR 0 4
26902: PPUSH
26903: CALL_OW 248
26907: PUSH
26908: LD_VAR 0 4
26912: PPUSH
26913: LD_INT 1
26915: PPUSH
26916: CALL_OW 268
26920: PUSH
26921: LD_VAR 0 4
26925: PPUSH
26926: LD_INT 2
26928: PPUSH
26929: CALL_OW 268
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: PUSH
26944: EMPTY
26945: LIST
26946: ADD
26947: ST_TO_ADDR
26948: GO 27245
// if GetBType ( i ) = b_bunker then
26950: LD_VAR 0 4
26954: PPUSH
26955: CALL_OW 266
26959: PUSH
26960: LD_INT 32
26962: EQUAL
26963: IFFALSE 27060
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26965: LD_ADDR_VAR 0 2
26969: PUSH
26970: LD_VAR 0 2
26974: PUSH
26975: LD_VAR 0 4
26979: PPUSH
26980: CALL_OW 266
26984: PUSH
26985: LD_VAR 0 4
26989: PPUSH
26990: CALL_OW 250
26994: PUSH
26995: LD_VAR 0 4
26999: PPUSH
27000: CALL_OW 251
27004: PUSH
27005: LD_VAR 0 4
27009: PPUSH
27010: CALL_OW 254
27014: PUSH
27015: LD_VAR 0 4
27019: PPUSH
27020: CALL_OW 267
27024: PUSH
27025: LD_VAR 0 4
27029: PPUSH
27030: CALL_OW 248
27034: PUSH
27035: LD_VAR 0 4
27039: PPUSH
27040: CALL_OW 269
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: LIST
27052: LIST
27053: PUSH
27054: EMPTY
27055: LIST
27056: ADD
27057: ST_TO_ADDR
27058: GO 27245
// if GetBType ( i ) = b_factory then
27060: LD_VAR 0 4
27064: PPUSH
27065: CALL_OW 266
27069: PUSH
27070: LD_INT 3
27072: EQUAL
27073: IFFALSE 27163
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27075: LD_ADDR_VAR 0 2
27079: PUSH
27080: LD_VAR 0 2
27084: PPUSH
27085: LD_INT 1
27087: PPUSH
27088: LD_VAR 0 4
27092: PPUSH
27093: CALL_OW 266
27097: PUSH
27098: LD_VAR 0 4
27102: PPUSH
27103: CALL_OW 250
27107: PUSH
27108: LD_VAR 0 4
27112: PPUSH
27113: CALL_OW 251
27117: PUSH
27118: LD_VAR 0 4
27122: PPUSH
27123: CALL_OW 254
27127: PUSH
27128: LD_VAR 0 4
27132: PPUSH
27133: CALL_OW 267
27137: PUSH
27138: LD_VAR 0 4
27142: PPUSH
27143: CALL_OW 248
27147: PUSH
27148: EMPTY
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: PPUSH
27156: CALL_OW 2
27160: ST_TO_ADDR
27161: GO 27245
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27163: LD_ADDR_VAR 0 2
27167: PUSH
27168: LD_VAR 0 2
27172: PUSH
27173: LD_VAR 0 4
27177: PPUSH
27178: CALL_OW 266
27182: PUSH
27183: LD_VAR 0 4
27187: PPUSH
27188: CALL_OW 250
27192: PUSH
27193: LD_VAR 0 4
27197: PPUSH
27198: CALL_OW 251
27202: PUSH
27203: LD_VAR 0 4
27207: PPUSH
27208: CALL_OW 254
27212: PUSH
27213: LD_VAR 0 4
27217: PPUSH
27218: CALL_OW 267
27222: PUSH
27223: LD_VAR 0 4
27227: PPUSH
27228: CALL_OW 248
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: LIST
27239: LIST
27240: PUSH
27241: EMPTY
27242: LIST
27243: ADD
27244: ST_TO_ADDR
// end ;
27245: GO 26809
27247: POP
27248: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27249: LD_VAR 0 2
27253: PPUSH
27254: LD_STRING 10_EpsilonBase
27256: PPUSH
27257: CALL_OW 39
// end ; end_of_file
27261: LD_VAR 0 1
27265: RET
// every 0 0$30 do
27266: GO 27268
27268: DISABLE
// begin enable ;
27269: ENABLE
// if cratesSpawned < 6 then
27270: LD_EXP 55
27274: PUSH
27275: LD_INT 6
27277: LESS
27278: IFFALSE 27315
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27280: LD_INT 3
27282: PPUSH
27283: LD_INT 5
27285: PPUSH
27286: CALL_OW 12
27290: PPUSH
27291: LD_INT 16
27293: PPUSH
27294: LD_INT 1
27296: PPUSH
27297: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27301: LD_ADDR_EXP 55
27305: PUSH
27306: LD_EXP 55
27310: PUSH
27311: LD_INT 1
27313: PLUS
27314: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27315: LD_EXP 55
27319: PUSH
27320: LD_INT 6
27322: GREATEREQUAL
27323: PUSH
27324: LD_EXP 55
27328: PUSH
27329: LD_INT 12
27331: LESS
27332: AND
27333: IFFALSE 27377
// begin wait ( 0 0$30 ) ;
27335: LD_INT 1050
27337: PPUSH
27338: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27342: LD_INT 3
27344: PPUSH
27345: LD_INT 5
27347: PPUSH
27348: CALL_OW 12
27352: PPUSH
27353: LD_INT 16
27355: PPUSH
27356: LD_INT 1
27358: PPUSH
27359: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27363: LD_ADDR_EXP 55
27367: PUSH
27368: LD_EXP 55
27372: PUSH
27373: LD_INT 1
27375: PLUS
27376: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27377: LD_EXP 55
27381: PUSH
27382: LD_INT 12
27384: GREATEREQUAL
27385: IFFALSE 27429
// begin wait ( 1 1$30 ) ;
27387: LD_INT 3150
27389: PPUSH
27390: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27394: LD_INT 3
27396: PPUSH
27397: LD_INT 5
27399: PPUSH
27400: CALL_OW 12
27404: PPUSH
27405: LD_INT 16
27407: PPUSH
27408: LD_INT 1
27410: PPUSH
27411: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27415: LD_ADDR_EXP 55
27419: PUSH
27420: LD_EXP 55
27424: PUSH
27425: LD_INT 1
27427: PLUS
27428: ST_TO_ADDR
// end ; end ;
27429: END
