// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 28
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 38
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 39
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 40
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 41
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianEscape = 0 ;
  69: LD_ADDR_EXP 46
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  77: LD_ADDR_EXP 45
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// arabianDefeated = 0 ;
  85: LD_ADDR_EXP 47
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// arabianTrait = 0 ;
  93: LD_ADDR_EXP 48
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// telep_ru_dialog := false ;
 101: LD_ADDR_EXP 55
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar1 = 0 ;
 109: LD_ADDR_EXP 57
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// eventVar2 = 0 ;
 117: LD_ADDR_EXP 58
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// fastEnd = 0 ;
 125: LD_ADDR_EXP 56
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// KhatamStatus = 0 ;
 133: LD_ADDR_EXP 49
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// cratesSpawned = 0 ;
 141: LD_ADDR_EXP 52
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// ru_vehs_counter := [ 2 , 3 , 4 ] [ Difficulty ] ;
 149: LD_ADDR_EXP 53
 153: PUSH
 154: LD_INT 2
 156: PUSH
 157: LD_INT 3
 159: PUSH
 160: LD_INT 4
 162: PUSH
 163: EMPTY
 164: LIST
 165: LIST
 166: LIST
 167: PUSH
 168: LD_OWVAR 67
 172: ARRAY
 173: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 174: LD_ADDR_EXP 54
 178: PUSH
 179: LD_INT 3
 181: PUSH
 182: LD_INT 4
 184: PUSH
 185: LD_INT 5
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: LIST
 192: PUSH
 193: LD_OWVAR 67
 197: ARRAY
 198: ST_TO_ADDR
// mission_prefix := 10_ ;
 199: LD_ADDR_EXP 50
 203: PUSH
 204: LD_STRING 10_
 206: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 207: LD_ADDR_EXP 51
 211: PUSH
 212: LD_STRING 09_
 214: ST_TO_ADDR
// debugMode = 0 ;
 215: LD_ADDR_EXP 59
 219: PUSH
 220: LD_INT 0
 222: ST_TO_ADDR
// PrepareNature ;
 223: CALL 21434 0 0
// PrepareDifficulty ;
 227: CALL 7775 0 0
// PrepareJMMTeam ;
 231: CALL 573 0 0
// PrepareCathyTeam ;
 235: CALL 1648 0 0
// PrepareArabianCommander ;
 239: CALL 3006 0 0
// PrepareArabian ;
 243: CALL 3058 0 0
// BuildArabianBase ;
 247: CALL 10474 0 0
// TameApemans ;
 251: CALL 16251 0 0
// end ;
 255: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 256: LD_EXP 59
 260: PUSH
 261: LD_INT 1
 263: EQUAL
 264: IFFALSE 570
 266: GO 268
 268: DISABLE
 269: LD_INT 0
 271: PPUSH
// begin enable ;
 272: ENABLE
// fogoff ( true ) ;
 273: LD_INT 1
 275: PPUSH
 276: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 280: LD_ADDR_VAR 0 1
 284: PUSH
 285: LD_INT 22
 287: PUSH
 288: LD_INT 1
 290: PUSH
 291: EMPTY
 292: LIST
 293: LIST
 294: PUSH
 295: LD_INT 21
 297: PUSH
 298: LD_INT 1
 300: PUSH
 301: EMPTY
 302: LIST
 303: LIST
 304: PUSH
 305: EMPTY
 306: LIST
 307: LIST
 308: PPUSH
 309: CALL_OW 69
 313: PUSH
 314: FOR_IN
 315: IFFALSE 331
// SetLives ( i , 1000 ) ;
 317: LD_VAR 0 1
 321: PPUSH
 322: LD_INT 1000
 324: PPUSH
 325: CALL_OW 234
 329: GO 314
 331: POP
 332: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 333: LD_ADDR_VAR 0 1
 337: PUSH
 338: LD_INT 22
 340: PUSH
 341: LD_INT 1
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 30
 353: PUSH
 354: LD_INT 0
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 30
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: LIST
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: FOR_IN
 386: IFFALSE 410
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 388: LD_VAR 0 1
 392: PPUSH
 393: CALL_OW 274
 397: PPUSH
 398: LD_INT 1
 400: PPUSH
 401: LD_INT 9999
 403: PPUSH
 404: CALL_OW 277
 408: GO 385
 410: POP
 411: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 412: LD_ADDR_VAR 0 1
 416: PUSH
 417: LD_INT 22
 419: PUSH
 420: LD_INT 1
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 2
 429: PUSH
 430: LD_INT 30
 432: PUSH
 433: LD_INT 0
 435: PUSH
 436: EMPTY
 437: LIST
 438: LIST
 439: PUSH
 440: LD_INT 30
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: LIST
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PPUSH
 459: CALL_OW 69
 463: PUSH
 464: FOR_IN
 465: IFFALSE 489
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 467: LD_VAR 0 1
 471: PPUSH
 472: CALL_OW 274
 476: PPUSH
 477: LD_INT 2
 479: PPUSH
 480: LD_INT 9999
 482: PPUSH
 483: CALL_OW 277
 487: GO 464
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 3
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// end ; end_of_file
 570: PPOPN 1
 572: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 573: LD_INT 0
 575: PPUSH
 576: PPUSH
 577: PPUSH
 578: PPUSH
 579: PPUSH
 580: PPUSH
// uc_side = 1 ;
 581: LD_ADDR_OWVAR 20
 585: PUSH
 586: LD_INT 1
 588: ST_TO_ADDR
// uc_nation = 1 ;
 589: LD_ADDR_OWVAR 21
 593: PUSH
 594: LD_INT 1
 596: ST_TO_ADDR
// count = 0 ;
 597: LD_ADDR_VAR 0 6
 601: PUSH
 602: LD_INT 0
 604: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 605: LD_ADDR_EXP 1
 609: PUSH
 610: LD_STRING 10_JMM
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL 7511 0 2
 620: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 621: LD_ADDR_EXP 20
 625: PUSH
 626: LD_EXP 20
 630: PUSH
 631: LD_EXP 1
 635: ADD
 636: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 637: LD_ADDR_EXP 10
 641: PUSH
 642: LD_STRING 10_Gary
 644: PPUSH
 645: LD_INT 1
 647: PPUSH
 648: CALL 7511 0 2
 652: ST_TO_ADDR
// if Gary then
 653: LD_EXP 10
 657: IFFALSE 675
// JMMSquad = JMMSquad ^ Gary ;
 659: LD_ADDR_EXP 20
 663: PUSH
 664: LD_EXP 20
 668: PUSH
 669: LD_EXP 10
 673: ADD
 674: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 675: LD_ADDR_EXP 5
 679: PUSH
 680: LD_STRING 10_Cyrus
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 7511 0 2
 690: ST_TO_ADDR
// if Cyrus then
 691: LD_EXP 5
 695: IFFALSE 713
// JMMSquad = JMMSquad ^ Cyrus ;
 697: LD_ADDR_EXP 20
 701: PUSH
 702: LD_EXP 20
 706: PUSH
 707: LD_EXP 5
 711: ADD
 712: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 713: LD_ADDR_EXP 4
 717: PUSH
 718: LD_STRING 10_Bobby
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: CALL 7511 0 2
 728: ST_TO_ADDR
// if Bobby then
 729: LD_EXP 4
 733: IFFALSE 751
// JMMSquad = JMMSquad ^ Bobby ;
 735: LD_ADDR_EXP 20
 739: PUSH
 740: LD_EXP 20
 744: PUSH
 745: LD_EXP 4
 749: ADD
 750: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 751: LD_ADDR_EXP 6
 755: PUSH
 756: LD_STRING 10_Lisa
 758: PPUSH
 759: LD_INT 1
 761: PPUSH
 762: CALL 7511 0 2
 766: ST_TO_ADDR
// if Lisa then
 767: LD_EXP 6
 771: IFFALSE 789
// JMMSquad = JMMSquad ^ Lisa ;
 773: LD_ADDR_EXP 20
 777: PUSH
 778: LD_EXP 20
 782: PUSH
 783: LD_EXP 6
 787: ADD
 788: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 789: LD_ADDR_EXP 2
 793: PUSH
 794: LD_STRING 10_Brown
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: CALL 7511 0 2
 804: ST_TO_ADDR
// if Brown then
 805: LD_EXP 2
 809: IFFALSE 827
// JMMSquad = JMMSquad ^ Brown ;
 811: LD_ADDR_EXP 20
 815: PUSH
 816: LD_EXP 20
 820: PUSH
 821: LD_EXP 2
 825: ADD
 826: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 827: LD_ADDR_EXP 3
 831: PUSH
 832: LD_STRING 10_Donaldson
 834: PPUSH
 835: LD_INT 1
 837: PPUSH
 838: CALL 7511 0 2
 842: ST_TO_ADDR
// if Donaldson then
 843: LD_EXP 3
 847: IFFALSE 865
// JMMSquad = JMMSquad ^ Donaldson ;
 849: LD_ADDR_EXP 20
 853: PUSH
 854: LD_EXP 20
 858: PUSH
 859: LD_EXP 3
 863: ADD
 864: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 865: LD_ADDR_EXP 7
 869: PUSH
 870: LD_STRING 10_Frank
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL 7511 0 2
 880: ST_TO_ADDR
// if Frank then
 881: LD_EXP 7
 885: IFFALSE 903
// JMMSquad = JMMSquad ^ Frank ;
 887: LD_ADDR_EXP 20
 891: PUSH
 892: LD_EXP 20
 896: PUSH
 897: LD_EXP 7
 901: ADD
 902: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 903: LD_ADDR_EXP 9
 907: PUSH
 908: LD_STRING 10_Houten
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: CALL 7511 0 2
 918: ST_TO_ADDR
// if Houten then
 919: LD_EXP 9
 923: IFFALSE 941
// JMMSquad = JMMSquad ^ Houten ;
 925: LD_ADDR_EXP 20
 929: PUSH
 930: LD_EXP 20
 934: PUSH
 935: LD_EXP 9
 939: ADD
 940: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 941: LD_ADDR_EXP 21
 945: PUSH
 946: LD_STRING OthersIn10
 948: PPUSH
 949: CALL_OW 31
 953: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 954: LD_ADDR_EXP 24
 958: PUSH
 959: LD_STRING Powell
 961: PPUSH
 962: LD_INT 0
 964: PPUSH
 965: CALL 7511 0 2
 969: ST_TO_ADDR
// for i in JMMSquad do
 970: LD_ADDR_VAR 0 2
 974: PUSH
 975: LD_EXP 20
 979: PUSH
 980: FOR_IN
 981: IFFALSE 1240
// begin if count < 3 then
 983: LD_VAR 0 6
 987: PUSH
 988: LD_INT 3
 990: LESS
 991: IFFALSE 1108
// begin vc_engine = 1 ;
 993: LD_ADDR_OWVAR 39
 997: PUSH
 998: LD_INT 1
1000: ST_TO_ADDR
// vc_control = 1 ;
1001: LD_ADDR_OWVAR 38
1005: PUSH
1006: LD_INT 1
1008: ST_TO_ADDR
// vc_weapon = 12 ;
1009: LD_ADDR_OWVAR 40
1013: PUSH
1014: LD_INT 12
1016: ST_TO_ADDR
// vc_chassis = 3 ;
1017: LD_ADDR_OWVAR 37
1021: PUSH
1022: LD_INT 3
1024: ST_TO_ADDR
// veh = CreateVehicle ;
1025: LD_ADDR_VAR 0 4
1029: PUSH
1030: CALL_OW 45
1034: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 1
1042: PPUSH
1043: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1047: LD_VAR 0 4
1051: PPUSH
1052: LD_INT 2
1054: PPUSH
1055: LD_INT 0
1057: PPUSH
1058: CALL_OW 49
// if count mod 2 = 0 then
1062: LD_VAR 0 6
1066: PUSH
1067: LD_INT 2
1069: MOD
1070: PUSH
1071: LD_INT 0
1073: EQUAL
1074: IFFALSE 1093
// AddCargo ( veh , 1 , 100 ) else
1076: LD_VAR 0 4
1080: PPUSH
1081: LD_INT 1
1083: PPUSH
1084: LD_INT 100
1086: PPUSH
1087: CALL_OW 291
1091: GO 1108
// AddCargo ( veh , 3 , 100 ) end ;
1093: LD_VAR 0 4
1097: PPUSH
1098: LD_INT 3
1100: PPUSH
1101: LD_INT 100
1103: PPUSH
1104: CALL_OW 291
// if count >= 3 then
1108: LD_VAR 0 6
1112: PUSH
1113: LD_INT 3
1115: GREATEREQUAL
1116: IFFALSE 1210
// begin vc_engine = 1 ;
1118: LD_ADDR_OWVAR 39
1122: PUSH
1123: LD_INT 1
1125: ST_TO_ADDR
// vc_control = 1 ;
1126: LD_ADDR_OWVAR 38
1130: PUSH
1131: LD_INT 1
1133: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1134: LD_ADDR_OWVAR 40
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 4
1144: PUSH
1145: LD_INT 5
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: LIST
1152: PUSH
1153: LD_INT 1
1155: PPUSH
1156: LD_INT 3
1158: PPUSH
1159: CALL_OW 12
1163: ARRAY
1164: ST_TO_ADDR
// vc_chassis = 3 ;
1165: LD_ADDR_OWVAR 37
1169: PUSH
1170: LD_INT 3
1172: ST_TO_ADDR
// veh = CreateVehicle ;
1173: LD_ADDR_VAR 0 4
1177: PUSH
1178: CALL_OW 45
1182: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1183: LD_VAR 0 4
1187: PPUSH
1188: LD_INT 1
1190: PPUSH
1191: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1195: LD_VAR 0 4
1199: PPUSH
1200: LD_INT 2
1202: PPUSH
1203: LD_INT 0
1205: PPUSH
1206: CALL_OW 49
// end ; count = count + 1 ;
1210: LD_ADDR_VAR 0 6
1214: PUSH
1215: LD_VAR 0 6
1219: PUSH
1220: LD_INT 1
1222: PLUS
1223: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1224: LD_VAR 0 2
1228: PPUSH
1229: LD_VAR 0 4
1233: PPUSH
1234: CALL_OW 52
// end ;
1238: GO 980
1240: POP
1241: POP
// for i in others10 do
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_EXP 21
1251: PUSH
1252: FOR_IN
1253: IFFALSE 1379
// begin vc_engine = 1 ;
1255: LD_ADDR_OWVAR 39
1259: PUSH
1260: LD_INT 1
1262: ST_TO_ADDR
// vc_control = 1 ;
1263: LD_ADDR_OWVAR 38
1267: PUSH
1268: LD_INT 1
1270: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1271: LD_ADDR_OWVAR 40
1275: PUSH
1276: LD_INT 3
1278: PUSH
1279: LD_INT 4
1281: PUSH
1282: LD_INT 5
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: LIST
1289: PUSH
1290: LD_INT 1
1292: PPUSH
1293: LD_INT 3
1295: PPUSH
1296: CALL_OW 12
1300: ARRAY
1301: ST_TO_ADDR
// vc_chassis = 3 ;
1302: LD_ADDR_OWVAR 37
1306: PUSH
1307: LD_INT 3
1309: ST_TO_ADDR
// veh = CreateVehicle ;
1310: LD_ADDR_VAR 0 4
1314: PUSH
1315: CALL_OW 45
1319: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1320: LD_VAR 0 4
1324: PPUSH
1325: LD_INT 1
1327: PPUSH
1328: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1332: LD_VAR 0 4
1336: PPUSH
1337: LD_INT 2
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1347: LD_ADDR_EXP 27
1351: PUSH
1352: LD_EXP 27
1356: PUSH
1357: LD_VAR 0 4
1361: ADD
1362: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1363: LD_VAR 0 2
1367: PPUSH
1368: LD_VAR 0 4
1372: PPUSH
1373: CALL_OW 52
// end ;
1377: GO 1252
1379: POP
1380: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1381: LD_INT 22
1383: PUSH
1384: LD_INT 1
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 21
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: EMPTY
1402: LIST
1403: LIST
1404: PPUSH
1405: CALL_OW 69
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: CALL_OW 336
// end ;
1417: LD_VAR 0 1
1421: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1422: LD_INT 0
1424: PPUSH
1425: PPUSH
1426: PPUSH
1427: PPUSH
1428: PPUSH
// uc_side = 1 ;
1429: LD_ADDR_OWVAR 20
1433: PUSH
1434: LD_INT 1
1436: ST_TO_ADDR
// uc_nation = 1 ;
1437: LD_ADDR_OWVAR 21
1441: PUSH
1442: LD_INT 1
1444: ST_TO_ADDR
// for i := 1 to 10 do
1445: LD_ADDR_VAR 0 2
1449: PUSH
1450: DOUBLE
1451: LD_INT 1
1453: DEC
1454: ST_TO_ADDR
1455: LD_INT 10
1457: PUSH
1458: FOR_TO
1459: IFFALSE 1641
// begin vc_engine = 1 ;
1461: LD_ADDR_OWVAR 39
1465: PUSH
1466: LD_INT 1
1468: ST_TO_ADDR
// vc_control = 1 ;
1469: LD_ADDR_OWVAR 38
1473: PUSH
1474: LD_INT 1
1476: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1477: LD_ADDR_OWVAR 40
1481: PUSH
1482: LD_INT 3
1484: PUSH
1485: LD_INT 4
1487: PUSH
1488: LD_INT 5
1490: PUSH
1491: LD_INT 12
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: LIST
1498: LIST
1499: PUSH
1500: LD_INT 1
1502: PPUSH
1503: LD_INT 4
1505: PPUSH
1506: CALL_OW 12
1510: ARRAY
1511: ST_TO_ADDR
// vc_chassis = 3 ;
1512: LD_ADDR_OWVAR 37
1516: PUSH
1517: LD_INT 3
1519: ST_TO_ADDR
// veh = CreateVehicle ;
1520: LD_ADDR_VAR 0 3
1524: PUSH
1525: CALL_OW 45
1529: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1530: LD_VAR 0 3
1534: PPUSH
1535: LD_INT 1
1537: PPUSH
1538: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1542: LD_VAR 0 3
1546: PPUSH
1547: LD_INT 2
1549: PPUSH
1550: LD_INT 0
1552: PPUSH
1553: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1557: LD_ADDR_EXP 27
1561: PUSH
1562: LD_EXP 27
1566: PUSH
1567: LD_VAR 0 3
1571: ADD
1572: ST_TO_ADDR
// if vc_weapon = 12 then
1573: LD_OWVAR 40
1577: PUSH
1578: LD_INT 12
1580: EQUAL
1581: IFFALSE 1639
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1583: LD_ADDR_VAR 0 4
1587: PUSH
1588: LD_INT 5
1590: PPUSH
1591: LD_INT 10
1593: PPUSH
1594: CALL_OW 12
1598: PUSH
1599: LD_INT 10
1601: MUL
1602: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: LD_INT 1
1610: PUSH
1611: LD_INT 3
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: LD_INT 1
1620: PPUSH
1621: LD_INT 2
1623: PPUSH
1624: CALL_OW 12
1628: ARRAY
1629: PPUSH
1630: LD_VAR 0 4
1634: PPUSH
1635: CALL_OW 291
// end ; end ;
1639: GO 1458
1641: POP
1642: POP
// end ;
1643: LD_VAR 0 1
1647: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1648: LD_INT 0
1650: PPUSH
1651: PPUSH
1652: PPUSH
// uc_side = 4 ;
1653: LD_ADDR_OWVAR 20
1657: PUSH
1658: LD_INT 4
1660: ST_TO_ADDR
// uc_nation = 1 ;
1661: LD_ADDR_OWVAR 21
1665: PUSH
1666: LD_INT 1
1668: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1669: LD_ADDR_EXP 11
1673: PUSH
1674: LD_STRING Simms
1676: PPUSH
1677: LD_INT 0
1679: PPUSH
1680: CALL 7511 0 2
1684: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1685: LD_ADDR_EXP 12
1689: PUSH
1690: LD_STRING 08_Denis
1692: PPUSH
1693: LD_INT 1
1695: PPUSH
1696: CALL 7511 0 2
1700: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1701: LD_ADDR_EXP 13
1705: PUSH
1706: LD_STRING 08_Joan
1708: PPUSH
1709: LD_INT 1
1711: PPUSH
1712: CALL 7511 0 2
1716: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1717: LD_ADDR_EXP 14
1721: PUSH
1722: LD_STRING Khatam
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL 7511 0 2
1732: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1733: LD_ADDR_EXP 15
1737: PUSH
1738: LD_STRING Gladstone
1740: PPUSH
1741: LD_INT 1
1743: PPUSH
1744: CALL 7511 0 2
1748: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1749: LD_ADDR_EXP 17
1753: PUSH
1754: LD_STRING DeltaDoctor
1756: PPUSH
1757: LD_INT 1
1759: PPUSH
1760: CALL 7511 0 2
1764: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1765: LD_STRING 08_Frank
1767: PPUSH
1768: CALL_OW 28
1772: PUSH
1773: LD_INT 1
1775: EQUAL
1776: IFFALSE 1794
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1778: LD_ADDR_EXP 8
1782: PUSH
1783: LD_STRING Yamoko
1785: PPUSH
1786: LD_INT 1
1788: PPUSH
1789: CALL 7511 0 2
1793: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1794: LD_ADDR_EXP 22
1798: PUSH
1799: LD_STRING 09_others
1801: PPUSH
1802: CALL_OW 31
1806: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1807: LD_ADDR_EXP 23
1811: PUSH
1812: LD_STRING 09_apes
1814: PPUSH
1815: CALL_OW 31
1819: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1820: LD_EXP 11
1824: PPUSH
1825: LD_INT 1
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1835: LD_EXP 12
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: LD_INT 0
1845: PPUSH
1846: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1850: LD_EXP 13
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1865: LD_EXP 14
1869: PPUSH
1870: LD_INT 1
1872: PPUSH
1873: LD_INT 0
1875: PPUSH
1876: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1880: LD_EXP 15
1884: PPUSH
1885: LD_INT 1
1887: PPUSH
1888: LD_INT 0
1890: PPUSH
1891: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1895: LD_EXP 17
1899: PPUSH
1900: LD_INT 1
1902: PPUSH
1903: LD_INT 0
1905: PPUSH
1906: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1910: LD_EXP 8
1914: PPUSH
1915: LD_INT 1
1917: PPUSH
1918: LD_INT 0
1920: PPUSH
1921: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1925: LD_EXP 11
1929: PUSH
1930: LD_EXP 14
1934: PUSH
1935: LD_EXP 12
1939: PUSH
1940: LD_EXP 15
1944: PUSH
1945: LD_EXP 17
1949: PUSH
1950: LD_EXP 13
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: LIST
1961: LIST
1962: PPUSH
1963: LD_INT 4
1965: PPUSH
1966: CALL_OW 336
// if others09 > 2 then
1970: LD_EXP 22
1974: PUSH
1975: LD_INT 2
1977: GREATER
1978: IFFALSE 2023
// begin for i := 1 to 3 do
1980: LD_ADDR_VAR 0 2
1984: PUSH
1985: DOUBLE
1986: LD_INT 1
1988: DEC
1989: ST_TO_ADDR
1990: LD_INT 3
1992: PUSH
1993: FOR_TO
1994: IFFALSE 2019
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
1996: LD_EXP 22
2000: PUSH
2001: LD_VAR 0 2
2005: ARRAY
2006: PPUSH
2007: LD_INT 1
2009: PPUSH
2010: LD_INT 0
2012: PPUSH
2013: CALL_OW 49
2017: GO 1993
2019: POP
2020: POP
// end else
2021: GO 2055
// begin for i in others09 do
2023: LD_ADDR_VAR 0 2
2027: PUSH
2028: LD_EXP 22
2032: PUSH
2033: FOR_IN
2034: IFFALSE 2053
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2036: LD_VAR 0 2
2040: PPUSH
2041: LD_INT 1
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
2051: GO 2033
2053: POP
2054: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
2055: LD_INT 22
2057: PUSH
2058: LD_INT 4
2060: PUSH
2061: EMPTY
2062: LIST
2063: LIST
2064: PUSH
2065: LD_INT 21
2067: PUSH
2068: LD_INT 1
2070: PUSH
2071: EMPTY
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 25
2077: PUSH
2078: LD_INT 2
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: LIST
2089: PPUSH
2090: CALL_OW 69
2094: PUSH
2095: LD_EXP 11
2099: PUSH
2100: LD_EXP 14
2104: PUSH
2105: LD_EXP 12
2109: PUSH
2110: LD_EXP 15
2114: PUSH
2115: LD_EXP 17
2119: PUSH
2120: LD_EXP 13
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: LIST
2131: LIST
2132: PUSH
2133: LD_INT 0
2135: EQUAL
2136: DIFF
2137: IFFALSE 2239
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2139: LD_ADDR_VAR 0 3
2143: PUSH
2144: LD_INT 22
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: EMPTY
2151: LIST
2152: LIST
2153: PUSH
2154: LD_INT 21
2156: PUSH
2157: LD_INT 1
2159: PUSH
2160: EMPTY
2161: LIST
2162: LIST
2163: PUSH
2164: LD_INT 25
2166: PUSH
2167: LD_INT 2
2169: PUSH
2170: EMPTY
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: PPUSH
2179: CALL_OW 69
2183: PUSH
2184: LD_EXP 11
2188: PUSH
2189: LD_EXP 14
2193: PUSH
2194: LD_EXP 12
2198: PUSH
2199: LD_EXP 15
2203: PUSH
2204: LD_EXP 17
2208: PUSH
2209: LD_EXP 13
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: LIST
2218: LIST
2219: LIST
2220: LIST
2221: DIFF
2222: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2223: LD_VAR 0 3
2227: PUSH
2228: LD_INT 1
2230: ARRAY
2231: PPUSH
2232: LD_INT 2
2234: PPUSH
2235: CALL_OW 336
// end ; for i in ape09 do
2239: LD_ADDR_VAR 0 2
2243: PUSH
2244: LD_EXP 23
2248: PUSH
2249: FOR_IN
2250: IFFALSE 2269
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2252: LD_VAR 0 2
2256: PPUSH
2257: LD_INT 1
2259: PPUSH
2260: LD_INT 0
2262: PPUSH
2263: CALL_OW 49
2267: GO 2249
2269: POP
2270: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2271: LD_INT 22
2273: PUSH
2274: LD_INT 4
2276: PUSH
2277: EMPTY
2278: LIST
2279: LIST
2280: PUSH
2281: LD_INT 21
2283: PUSH
2284: LD_INT 1
2286: PUSH
2287: EMPTY
2288: LIST
2289: LIST
2290: PUSH
2291: LD_INT 25
2293: PUSH
2294: LD_INT 2
2296: PUSH
2297: EMPTY
2298: LIST
2299: LIST
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: LIST
2305: PPUSH
2306: CALL_OW 69
2310: PPUSH
2311: LD_INT 0
2313: PPUSH
2314: LD_INT 101
2316: PPUSH
2317: LD_INT 30
2319: PPUSH
2320: LD_INT 2
2322: PPUSH
2323: CALL_OW 205
// uc_side = 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// hc_class := 1 ;
2335: LD_ADDR_OWVAR 28
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// hc_sex := sex_female ;
2343: LD_ADDR_OWVAR 27
2347: PUSH
2348: LD_INT 2
2350: ST_TO_ADDR
// hc_gallery :=  ;
2351: LD_ADDR_OWVAR 33
2355: PUSH
2356: LD_STRING 
2358: ST_TO_ADDR
// hc_name :=  ;
2359: LD_ADDR_OWVAR 26
2363: PUSH
2364: LD_STRING 
2366: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2367: LD_ADDR_OWVAR 31
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: LD_INT 7
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: LD_INT 0
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// AmScout = CreateHuman ;
2390: LD_ADDR_EXP 18
2394: PUSH
2395: CALL_OW 44
2399: ST_TO_ADDR
// end ;
2400: LD_VAR 0 1
2404: RET
// export function PrepareCornell ; begin
2405: LD_INT 0
2407: PPUSH
// uc_side = 4 ;
2408: LD_ADDR_OWVAR 20
2412: PUSH
2413: LD_INT 4
2415: ST_TO_ADDR
// uc_nation = 1 ;
2416: LD_ADDR_OWVAR 21
2420: PUSH
2421: LD_INT 1
2423: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2424: LD_ADDR_EXP 19
2428: PUSH
2429: LD_STRING 03_Cornel
2431: PPUSH
2432: LD_INT 1
2434: PPUSH
2435: CALL 7511 0 2
2439: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2440: LD_EXP 19
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 0
2450: PPUSH
2451: CALL_OW 49
// if IsInUnit ( JMM ) then
2455: LD_EXP 1
2459: PPUSH
2460: CALL_OW 310
2464: IFFALSE 2507
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2466: LD_EXP 19
2470: PPUSH
2471: LD_EXP 1
2475: PPUSH
2476: CALL_OW 310
2480: PPUSH
2481: CALL_OW 250
2485: PPUSH
2486: LD_EXP 1
2490: PPUSH
2491: CALL_OW 310
2495: PPUSH
2496: CALL_OW 251
2500: PPUSH
2501: CALL_OW 111
2505: GO 2536
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2507: LD_EXP 19
2511: PPUSH
2512: LD_EXP 1
2516: PPUSH
2517: CALL_OW 250
2521: PPUSH
2522: LD_EXP 1
2526: PPUSH
2527: CALL_OW 251
2531: PPUSH
2532: CALL_OW 111
// end ; end_of_file
2536: LD_VAR 0 1
2540: RET
// export function PrepareRussians ; var i , un ; begin
2541: LD_INT 0
2543: PPUSH
2544: PPUSH
2545: PPUSH
// uc_side = 3 ;
2546: LD_ADDR_OWVAR 20
2550: PUSH
2551: LD_INT 3
2553: ST_TO_ADDR
// uc_nation = 3 ;
2554: LD_ADDR_OWVAR 21
2558: PUSH
2559: LD_INT 3
2561: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2562: LD_ADDR_EXP 25
2566: PUSH
2567: LD_STRING Tsaritsyn
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL 7511 0 2
2577: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2578: LD_EXP 25
2582: PPUSH
2583: LD_INT 3
2585: PPUSH
2586: LD_INT 0
2588: PPUSH
2589: CALL_OW 49
// for i = 1 to 14 do
2593: LD_ADDR_VAR 0 2
2597: PUSH
2598: DOUBLE
2599: LD_INT 1
2601: DEC
2602: ST_TO_ADDR
2603: LD_INT 14
2605: PUSH
2606: FOR_TO
2607: IFFALSE 2693
// begin uc_side = 3 ;
2609: LD_ADDR_OWVAR 20
2613: PUSH
2614: LD_INT 3
2616: ST_TO_ADDR
// uc_nation = 3 ;
2617: LD_ADDR_OWVAR 21
2621: PUSH
2622: LD_INT 3
2624: ST_TO_ADDR
// hc_gallery =  ;
2625: LD_ADDR_OWVAR 33
2629: PUSH
2630: LD_STRING 
2632: ST_TO_ADDR
// hc_name =  ;
2633: LD_ADDR_OWVAR 26
2637: PUSH
2638: LD_STRING 
2640: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2641: LD_INT 0
2643: PPUSH
2644: LD_INT 1
2646: PPUSH
2647: LD_EXP 35
2651: PPUSH
2652: LD_EXP 36
2656: PPUSH
2657: CALL_OW 12
2661: PPUSH
2662: CALL_OW 380
// un = CreateHuman ;
2666: LD_ADDR_VAR 0 3
2670: PUSH
2671: CALL_OW 44
2675: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2676: LD_VAR 0 3
2680: PPUSH
2681: LD_INT 3
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// end ;
2691: GO 2606
2693: POP
2694: POP
// for i = 1 to 6 do
2695: LD_ADDR_VAR 0 2
2699: PUSH
2700: DOUBLE
2701: LD_INT 1
2703: DEC
2704: ST_TO_ADDR
2705: LD_INT 6
2707: PUSH
2708: FOR_TO
2709: IFFALSE 2795
// begin uc_side = 3 ;
2711: LD_ADDR_OWVAR 20
2715: PUSH
2716: LD_INT 3
2718: ST_TO_ADDR
// uc_nation = 3 ;
2719: LD_ADDR_OWVAR 21
2723: PUSH
2724: LD_INT 3
2726: ST_TO_ADDR
// hc_gallery =  ;
2727: LD_ADDR_OWVAR 33
2731: PUSH
2732: LD_STRING 
2734: ST_TO_ADDR
// hc_name =  ;
2735: LD_ADDR_OWVAR 26
2739: PUSH
2740: LD_STRING 
2742: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2743: LD_INT 0
2745: PPUSH
2746: LD_INT 2
2748: PPUSH
2749: LD_EXP 35
2753: PPUSH
2754: LD_EXP 36
2758: PPUSH
2759: CALL_OW 12
2763: PPUSH
2764: CALL_OW 380
// un = CreateHuman ;
2768: LD_ADDR_VAR 0 3
2772: PUSH
2773: CALL_OW 44
2777: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2778: LD_VAR 0 3
2782: PPUSH
2783: LD_INT 3
2785: PPUSH
2786: LD_INT 0
2788: PPUSH
2789: CALL_OW 49
// end ;
2793: GO 2708
2795: POP
2796: POP
// for i = 1 to 6 do
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: DOUBLE
2803: LD_INT 1
2805: DEC
2806: ST_TO_ADDR
2807: LD_INT 6
2809: PUSH
2810: FOR_TO
2811: IFFALSE 2897
// begin uc_side = 3 ;
2813: LD_ADDR_OWVAR 20
2817: PUSH
2818: LD_INT 3
2820: ST_TO_ADDR
// uc_nation = 3 ;
2821: LD_ADDR_OWVAR 21
2825: PUSH
2826: LD_INT 3
2828: ST_TO_ADDR
// hc_gallery =  ;
2829: LD_ADDR_OWVAR 33
2833: PUSH
2834: LD_STRING 
2836: ST_TO_ADDR
// hc_name =  ;
2837: LD_ADDR_OWVAR 26
2841: PUSH
2842: LD_STRING 
2844: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2845: LD_INT 0
2847: PPUSH
2848: LD_INT 3
2850: PPUSH
2851: LD_EXP 35
2855: PPUSH
2856: LD_EXP 36
2860: PPUSH
2861: CALL_OW 12
2865: PPUSH
2866: CALL_OW 380
// un = CreateHuman ;
2870: LD_ADDR_VAR 0 3
2874: PUSH
2875: CALL_OW 44
2879: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2880: LD_VAR 0 3
2884: PPUSH
2885: LD_INT 3
2887: PPUSH
2888: LD_INT 0
2890: PPUSH
2891: CALL_OW 49
// end ;
2895: GO 2810
2897: POP
2898: POP
// for i = 1 to 4 do
2899: LD_ADDR_VAR 0 2
2903: PUSH
2904: DOUBLE
2905: LD_INT 1
2907: DEC
2908: ST_TO_ADDR
2909: LD_INT 4
2911: PUSH
2912: FOR_TO
2913: IFFALSE 2999
// begin uc_side = 3 ;
2915: LD_ADDR_OWVAR 20
2919: PUSH
2920: LD_INT 3
2922: ST_TO_ADDR
// uc_nation = 3 ;
2923: LD_ADDR_OWVAR 21
2927: PUSH
2928: LD_INT 3
2930: ST_TO_ADDR
// hc_gallery =  ;
2931: LD_ADDR_OWVAR 33
2935: PUSH
2936: LD_STRING 
2938: ST_TO_ADDR
// hc_name =  ;
2939: LD_ADDR_OWVAR 26
2943: PUSH
2944: LD_STRING 
2946: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2947: LD_INT 0
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: LD_EXP 35
2957: PPUSH
2958: LD_EXP 36
2962: PPUSH
2963: CALL_OW 12
2967: PPUSH
2968: CALL_OW 380
// un = CreateHuman ;
2972: LD_ADDR_VAR 0 3
2976: PUSH
2977: CALL_OW 44
2981: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2982: LD_VAR 0 3
2986: PPUSH
2987: LD_INT 3
2989: PPUSH
2990: LD_INT 0
2992: PPUSH
2993: CALL_OW 49
// end ;
2997: GO 2912
2999: POP
3000: POP
// end ; end_of_file
3001: LD_VAR 0 1
3005: RET
// export function PrepareArabianCommander ; begin
3006: LD_INT 0
3008: PPUSH
// uc_side = 2 ;
3009: LD_ADDR_OWVAR 20
3013: PUSH
3014: LD_INT 2
3016: ST_TO_ADDR
// uc_nation = 2 ;
3017: LD_ADDR_OWVAR 21
3021: PUSH
3022: LD_INT 2
3024: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3025: LD_ADDR_EXP 26
3029: PUSH
3030: LD_STRING Dietrich
3032: PPUSH
3033: CALL_OW 25
3037: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3038: LD_EXP 26
3042: PPUSH
3043: LD_INT 4
3045: PPUSH
3046: LD_INT 0
3048: PPUSH
3049: CALL_OW 49
// end ;
3053: LD_VAR 0 1
3057: RET
// export function PrepareArabian ; var i , un , veh ; begin
3058: LD_INT 0
3060: PPUSH
3061: PPUSH
3062: PPUSH
3063: PPUSH
// for i = 1 to 3 do
3064: LD_ADDR_VAR 0 2
3068: PUSH
3069: DOUBLE
3070: LD_INT 1
3072: DEC
3073: ST_TO_ADDR
3074: LD_INT 3
3076: PUSH
3077: FOR_TO
3078: IFFALSE 3164
// begin uc_side = 2 ;
3080: LD_ADDR_OWVAR 20
3084: PUSH
3085: LD_INT 2
3087: ST_TO_ADDR
// uc_nation = 2 ;
3088: LD_ADDR_OWVAR 21
3092: PUSH
3093: LD_INT 2
3095: ST_TO_ADDR
// hc_gallery =  ;
3096: LD_ADDR_OWVAR 33
3100: PUSH
3101: LD_STRING 
3103: ST_TO_ADDR
// hc_name =  ;
3104: LD_ADDR_OWVAR 26
3108: PUSH
3109: LD_STRING 
3111: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3112: LD_INT 0
3114: PPUSH
3115: LD_INT 1
3117: PPUSH
3118: LD_EXP 35
3122: PPUSH
3123: LD_EXP 36
3127: PPUSH
3128: CALL_OW 12
3132: PPUSH
3133: CALL_OW 380
// un = CreateHuman ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_INT 4
3154: PPUSH
3155: LD_INT 0
3157: PPUSH
3158: CALL_OW 49
// end ;
3162: GO 3077
3164: POP
3165: POP
// for i = 1 to 6 do
3166: LD_ADDR_VAR 0 2
3170: PUSH
3171: DOUBLE
3172: LD_INT 1
3174: DEC
3175: ST_TO_ADDR
3176: LD_INT 6
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3266
// begin uc_side = 2 ;
3182: LD_ADDR_OWVAR 20
3186: PUSH
3187: LD_INT 2
3189: ST_TO_ADDR
// uc_nation = 2 ;
3190: LD_ADDR_OWVAR 21
3194: PUSH
3195: LD_INT 2
3197: ST_TO_ADDR
// hc_gallery =  ;
3198: LD_ADDR_OWVAR 33
3202: PUSH
3203: LD_STRING 
3205: ST_TO_ADDR
// hc_name =  ;
3206: LD_ADDR_OWVAR 26
3210: PUSH
3211: LD_STRING 
3213: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3214: LD_INT 0
3216: PPUSH
3217: LD_INT 2
3219: PPUSH
3220: LD_EXP 35
3224: PPUSH
3225: LD_EXP 36
3229: PPUSH
3230: CALL_OW 12
3234: PPUSH
3235: CALL_OW 380
// un = CreateHuman ;
3239: LD_ADDR_VAR 0 3
3243: PUSH
3244: CALL_OW 44
3248: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3249: LD_VAR 0 3
3253: PPUSH
3254: LD_INT 4
3256: PPUSH
3257: LD_INT 0
3259: PPUSH
3260: CALL_OW 49
// end ;
3264: GO 3179
3266: POP
3267: POP
// for i = 1 to 6 do
3268: LD_ADDR_VAR 0 2
3272: PUSH
3273: DOUBLE
3274: LD_INT 1
3276: DEC
3277: ST_TO_ADDR
3278: LD_INT 6
3280: PUSH
3281: FOR_TO
3282: IFFALSE 3368
// begin uc_side = 2 ;
3284: LD_ADDR_OWVAR 20
3288: PUSH
3289: LD_INT 2
3291: ST_TO_ADDR
// uc_nation = 2 ;
3292: LD_ADDR_OWVAR 21
3296: PUSH
3297: LD_INT 2
3299: ST_TO_ADDR
// hc_gallery =  ;
3300: LD_ADDR_OWVAR 33
3304: PUSH
3305: LD_STRING 
3307: ST_TO_ADDR
// hc_name =  ;
3308: LD_ADDR_OWVAR 26
3312: PUSH
3313: LD_STRING 
3315: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3316: LD_INT 0
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: LD_EXP 35
3326: PPUSH
3327: LD_EXP 36
3331: PPUSH
3332: CALL_OW 12
3336: PPUSH
3337: CALL_OW 380
// un = CreateHuman ;
3341: LD_ADDR_VAR 0 3
3345: PUSH
3346: CALL_OW 44
3350: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3351: LD_VAR 0 3
3355: PPUSH
3356: LD_INT 4
3358: PPUSH
3359: LD_INT 0
3361: PPUSH
3362: CALL_OW 49
// end ;
3366: GO 3281
3368: POP
3369: POP
// for i = 1 to 4 do
3370: LD_ADDR_VAR 0 2
3374: PUSH
3375: DOUBLE
3376: LD_INT 1
3378: DEC
3379: ST_TO_ADDR
3380: LD_INT 4
3382: PUSH
3383: FOR_TO
3384: IFFALSE 3470
// begin uc_side = 2 ;
3386: LD_ADDR_OWVAR 20
3390: PUSH
3391: LD_INT 2
3393: ST_TO_ADDR
// uc_nation = 2 ;
3394: LD_ADDR_OWVAR 21
3398: PUSH
3399: LD_INT 2
3401: ST_TO_ADDR
// hc_gallery =  ;
3402: LD_ADDR_OWVAR 33
3406: PUSH
3407: LD_STRING 
3409: ST_TO_ADDR
// hc_name =  ;
3410: LD_ADDR_OWVAR 26
3414: PUSH
3415: LD_STRING 
3417: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3418: LD_INT 0
3420: PPUSH
3421: LD_INT 4
3423: PPUSH
3424: LD_EXP 35
3428: PPUSH
3429: LD_EXP 36
3433: PPUSH
3434: CALL_OW 12
3438: PPUSH
3439: CALL_OW 380
// un = CreateHuman ;
3443: LD_ADDR_VAR 0 3
3447: PUSH
3448: CALL_OW 44
3452: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3453: LD_VAR 0 3
3457: PPUSH
3458: LD_INT 4
3460: PPUSH
3461: LD_INT 0
3463: PPUSH
3464: CALL_OW 49
// end ;
3468: GO 3383
3470: POP
3471: POP
// for i = 1 to 2 do
3472: LD_ADDR_VAR 0 2
3476: PUSH
3477: DOUBLE
3478: LD_INT 1
3480: DEC
3481: ST_TO_ADDR
3482: LD_INT 2
3484: PUSH
3485: FOR_TO
3486: IFFALSE 3616
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3488: LD_ADDR_VAR 0 4
3492: PUSH
3493: LD_INT 22
3495: PUSH
3496: LD_INT 2
3498: PUSH
3499: EMPTY
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 21
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PUSH
3513: LD_INT 58
3515: PUSH
3516: EMPTY
3517: LIST
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: LIST
3523: PPUSH
3524: CALL_OW 69
3528: ST_TO_ADDR
// uc_side = 2 ;
3529: LD_ADDR_OWVAR 20
3533: PUSH
3534: LD_INT 2
3536: ST_TO_ADDR
// uc_nation = 2 ;
3537: LD_ADDR_OWVAR 21
3541: PUSH
3542: LD_INT 2
3544: ST_TO_ADDR
// hc_gallery =  ;
3545: LD_ADDR_OWVAR 33
3549: PUSH
3550: LD_STRING 
3552: ST_TO_ADDR
// hc_name =  ;
3553: LD_ADDR_OWVAR 26
3557: PUSH
3558: LD_STRING 
3560: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3561: LD_INT 0
3563: PPUSH
3564: LD_INT 3
3566: PPUSH
3567: LD_EXP 35
3571: PPUSH
3572: LD_EXP 36
3576: PPUSH
3577: CALL_OW 12
3581: PPUSH
3582: CALL_OW 380
// un = CreateHuman ;
3586: LD_ADDR_VAR 0 3
3590: PUSH
3591: CALL_OW 44
3595: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3596: LD_VAR 0 3
3600: PPUSH
3601: LD_VAR 0 4
3605: PUSH
3606: LD_INT 1
3608: ARRAY
3609: PPUSH
3610: CALL_OW 52
// end ;
3614: GO 3485
3616: POP
3617: POP
// end ; end_of_file
3618: LD_VAR 0 1
3622: RET
// every 1 do
3623: GO 3625
3625: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
3626: LD_INT 1
3628: PPUSH
3629: LD_INT 19
3631: PPUSH
3632: CALL_OW 332
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
3636: LD_EXP 1
3640: PPUSH
3641: CALL_OW 310
3645: PPUSH
3646: CALL_OW 87
// if IsOk ( Gary ) then
3650: LD_EXP 10
3654: PPUSH
3655: CALL_OW 302
3659: IFFALSE 3705
// begin DialogueOn ;
3661: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3665: LD_EXP 10
3669: PPUSH
3670: LD_STRING D2-Gary-1
3672: PPUSH
3673: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3677: LD_EXP 1
3681: PPUSH
3682: LD_STRING D2-JMM-1
3684: PPUSH
3685: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3689: LD_EXP 10
3693: PPUSH
3694: LD_STRING D2-Gary-2
3696: PPUSH
3697: CALL_OW 88
// DialogueOff ;
3701: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3705: LD_STRING M1
3707: PPUSH
3708: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3712: LD_INT 38
3714: PPUSH
3715: LD_INT 1
3717: PPUSH
3718: LD_INT 100
3720: PPUSH
3721: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3725: LD_INT 47
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 50
3733: PPUSH
3734: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3738: LD_INT 47
3740: PPUSH
3741: LD_INT 3
3743: PPUSH
3744: LD_INT 50
3746: PPUSH
3747: CALL_OW 291
// SaveForQuickRestart ;
3751: CALL_OW 22
// end ;
3755: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3756: LD_EXP 1
3760: PPUSH
3761: LD_EXP 11
3765: PPUSH
3766: CALL_OW 296
3770: PUSH
3771: LD_INT 15
3773: LESS
3774: IFFALSE 4219
3776: GO 3778
3778: DISABLE
// begin InGameOn ;
3779: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3783: LD_EXP 1
3787: PPUSH
3788: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3792: LD_EXP 1
3796: PPUSH
3797: CALL_OW 87
// wait ( 0 0$1 ) ;
3801: LD_INT 35
3803: PPUSH
3804: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3808: LD_INT 35
3810: PPUSH
3811: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
3815: LD_EXP 11
3819: PUSH
3820: LD_EXP 13
3824: PUSH
3825: LD_EXP 12
3829: PUSH
3830: LD_EXP 14
3834: PUSH
3835: LD_EXP 8
3839: PUSH
3840: EMPTY
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3856: LD_EXP 1
3860: PPUSH
3861: LD_EXP 11
3865: PPUSH
3866: CALL_OW 296
3870: PUSH
3871: LD_INT 5
3873: LESS
3874: IFFALSE 3808
// ComTurnUnit ( JMM , Simms ) ;
3876: LD_EXP 1
3880: PPUSH
3881: LD_EXP 11
3885: PPUSH
3886: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3890: LD_EXP 11
3894: PUSH
3895: LD_EXP 13
3899: PUSH
3900: LD_EXP 12
3904: PUSH
3905: LD_EXP 14
3909: PUSH
3910: EMPTY
3911: LIST
3912: LIST
3913: LIST
3914: LIST
3915: PPUSH
3916: LD_EXP 1
3920: PPUSH
3921: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3925: LD_EXP 1
3929: PUSH
3930: LD_EXP 11
3934: PUSH
3935: EMPTY
3936: LIST
3937: LIST
3938: PPUSH
3939: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3943: LD_EXP 11
3947: PPUSH
3948: LD_STRING D2a-Sim-1
3950: PPUSH
3951: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3955: LD_EXP 1
3959: PPUSH
3960: LD_STRING D2a-JMM-1
3962: PPUSH
3963: CALL_OW 88
// if IsOk ( Joan ) then
3967: LD_EXP 13
3971: PPUSH
3972: CALL_OW 302
3976: IFFALSE 4028
// begin ComTurnUnit ( JMM , Joan ) ;
3978: LD_EXP 1
3982: PPUSH
3983: LD_EXP 13
3987: PPUSH
3988: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
3992: LD_EXP 13
3996: PPUSH
3997: LD_STRING D2b-Joan-1
3999: PPUSH
4000: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4004: LD_EXP 1
4008: PPUSH
4009: LD_STRING D2b-JMM-1
4011: PPUSH
4012: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4016: LD_EXP 13
4020: PPUSH
4021: LD_STRING D2b-Joan-2
4023: PPUSH
4024: CALL_OW 88
// end ; if IsOk ( Denis ) then
4028: LD_EXP 12
4032: PPUSH
4033: CALL_OW 302
4037: IFFALSE 4065
// begin ComTurnUnit ( JMM , Denis ) ;
4039: LD_EXP 1
4043: PPUSH
4044: LD_EXP 12
4048: PPUSH
4049: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4053: LD_EXP 12
4057: PPUSH
4058: LD_STRING D2c-Den-1
4060: PPUSH
4061: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4065: LD_EXP 14
4069: PPUSH
4070: CALL_OW 302
4074: IFFALSE 4114
// begin ComTurnUnit ( JMM , Khatam ) ;
4076: LD_EXP 1
4080: PPUSH
4081: LD_EXP 14
4085: PPUSH
4086: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4090: LD_EXP 1
4094: PPUSH
4095: LD_STRING D2c-JMM-1
4097: PPUSH
4098: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4102: LD_EXP 14
4106: PPUSH
4107: LD_STRING D2c-Khat-1
4109: PPUSH
4110: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4114: LD_EXP 8
4118: PPUSH
4119: CALL_OW 302
4123: IFFALSE 4178
// begin repeat wait ( 0 0$1 ) ;
4125: LD_INT 35
4127: PPUSH
4128: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4132: LD_EXP 8
4136: PPUSH
4137: LD_EXP 1
4141: PPUSH
4142: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4146: LD_EXP 1
4150: PPUSH
4151: LD_EXP 8
4155: PPUSH
4156: CALL_OW 296
4160: PUSH
4161: LD_INT 5
4163: LESS
4164: IFFALSE 4125
// Say ( Kikuchi , D3b-Yam-1 ) ;
4166: LD_EXP 8
4170: PPUSH
4171: LD_STRING D3b-Yam-1
4173: PPUSH
4174: CALL_OW 88
// end ; InGameOff ;
4178: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4182: LD_INT 22
4184: PUSH
4185: LD_INT 4
4187: PUSH
4188: EMPTY
4189: LIST
4190: LIST
4191: PPUSH
4192: CALL_OW 69
4196: PPUSH
4197: LD_INT 1
4199: PPUSH
4200: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4204: LD_STRING M1a
4206: PPUSH
4207: CALL_OW 337
// joinEpsilon = 1 ;
4211: LD_ADDR_EXP 28
4215: PUSH
4216: LD_INT 1
4218: ST_TO_ADDR
// end ;
4219: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4220: LD_EXP 57
4224: PUSH
4225: LD_INT 1
4227: EQUAL
4228: IFFALSE 4834
4230: GO 4232
4232: DISABLE
4233: LD_INT 0
4235: PPUSH
4236: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4237: LD_ADDR_VAR 0 1
4241: PUSH
4242: LD_INT 22
4244: PUSH
4245: LD_INT 1
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PUSH
4252: LD_INT 25
4254: PUSH
4255: LD_INT 4
4257: PUSH
4258: EMPTY
4259: LIST
4260: LIST
4261: PUSH
4262: LD_INT 26
4264: PUSH
4265: LD_INT 1
4267: PUSH
4268: EMPTY
4269: LIST
4270: LIST
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: PPUSH
4277: CALL_OW 69
4281: PUSH
4282: LD_INT 1
4284: ARRAY
4285: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4286: LD_ADDR_VAR 0 2
4290: PUSH
4291: LD_INT 22
4293: PUSH
4294: LD_INT 1
4296: PUSH
4297: EMPTY
4298: LIST
4299: LIST
4300: PUSH
4301: LD_INT 26
4303: PUSH
4304: LD_INT 1
4306: PUSH
4307: EMPTY
4308: LIST
4309: LIST
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: LD_INT 25
4316: PUSH
4317: LD_INT 1
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 25
4326: PUSH
4327: LD_INT 2
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 25
4336: PUSH
4337: LD_INT 3
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: LIST
4354: PPUSH
4355: CALL_OW 69
4359: PUSH
4360: LD_INT 1
4362: ARRAY
4363: ST_TO_ADDR
// DialogueOn ;
4364: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4368: LD_EXP 17
4372: PPUSH
4373: CALL_OW 302
4377: IFFALSE 4393
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4379: LD_EXP 17
4383: PPUSH
4384: LD_STRING D3-Sci1-1
4386: PPUSH
4387: CALL_OW 88
4391: GO 4405
// Say ( tmp1 , D3-Sci1-1 ) ;
4393: LD_VAR 0 1
4397: PPUSH
4398: LD_STRING D3-Sci1-1
4400: PPUSH
4401: CALL_OW 88
// if IsOk ( Gary ) then
4405: LD_EXP 10
4409: PPUSH
4410: CALL_OW 302
4414: IFFALSE 4430
// Say ( Gary , D3-Gary-1 ) else
4416: LD_EXP 10
4420: PPUSH
4421: LD_STRING D3-Gary-1
4423: PPUSH
4424: CALL_OW 88
4428: GO 4442
// Say ( tmp2 , D3-Gary-1 ) ;
4430: LD_VAR 0 2
4434: PPUSH
4435: LD_STRING D3-Gary-1
4437: PPUSH
4438: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4442: LD_EXP 17
4446: PPUSH
4447: CALL_OW 302
4451: IFFALSE 4467
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4453: LD_EXP 17
4457: PPUSH
4458: LD_STRING D3-Sci1-2
4460: PPUSH
4461: CALL_OW 88
4465: GO 4479
// Say ( tmp1 , D3-Sci1-2 ) ;
4467: LD_VAR 0 1
4471: PPUSH
4472: LD_STRING D3-Sci1-2
4474: PPUSH
4475: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4479: LD_EXP 1
4483: PPUSH
4484: LD_STRING D3-JMM-2
4486: PPUSH
4487: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4491: LD_EXP 17
4495: PPUSH
4496: CALL_OW 302
4500: IFFALSE 4516
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4502: LD_EXP 17
4506: PPUSH
4507: LD_STRING D3-Sci1-3
4509: PPUSH
4510: CALL_OW 88
4514: GO 4528
// Say ( tmp1 , D3-Sci1-3 ) ;
4516: LD_VAR 0 1
4520: PPUSH
4521: LD_STRING D3-Sci1-3
4523: PPUSH
4524: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4528: LD_EXP 1
4532: PPUSH
4533: LD_STRING D3-JMM-3
4535: PPUSH
4536: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4540: LD_EXP 17
4544: PPUSH
4545: CALL_OW 302
4549: IFFALSE 4565
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4551: LD_EXP 17
4555: PPUSH
4556: LD_STRING D3-Sci1-4
4558: PPUSH
4559: CALL_OW 88
4563: GO 4577
// Say ( tmp1 , D3-Sci1-4 ) ;
4565: LD_VAR 0 1
4569: PPUSH
4570: LD_STRING D3-Sci1-4
4572: PPUSH
4573: CALL_OW 88
// DialogueOff ;
4577: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4581: LD_INT 12
4583: PPUSH
4584: LD_INT 1
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4594: LD_INT 32
4596: PPUSH
4597: LD_INT 1
4599: PPUSH
4600: LD_INT 1
4602: PPUSH
4603: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4607: LD_INT 12
4609: PPUSH
4610: LD_INT 1
4612: PPUSH
4613: LD_INT 1
4615: PPUSH
4616: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
4620: LD_INT 33
4622: PPUSH
4623: LD_INT 1
4625: PPUSH
4626: LD_INT 1
4628: PPUSH
4629: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4633: LD_STRING M2
4635: PPUSH
4636: CALL_OW 337
// wait ( 5 5$0 ) ;
4640: LD_INT 10500
4642: PPUSH
4643: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4647: LD_EXP 11
4651: PPUSH
4652: CALL_OW 302
4656: PUSH
4657: LD_EXP 12
4661: PPUSH
4662: CALL_OW 302
4666: AND
4667: IFFALSE 4834
// begin DialogueOn ;
4669: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4673: LD_EXP 11
4677: PPUSH
4678: LD_STRING D3a-Sim-1
4680: PPUSH
4681: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4685: LD_EXP 12
4689: PPUSH
4690: LD_STRING D3a-Sci1-1
4692: PPUSH
4693: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4697: LD_EXP 11
4701: PPUSH
4702: LD_STRING D3a-Sim-2
4704: PPUSH
4705: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4709: LD_EXP 12
4713: PPUSH
4714: LD_STRING D3a-Sci1-2
4716: PPUSH
4717: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4721: LD_EXP 11
4725: PPUSH
4726: LD_STRING D3a-Sim-3
4728: PPUSH
4729: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4733: LD_EXP 12
4737: PPUSH
4738: LD_STRING D3a-Sci1-3
4740: PPUSH
4741: CALL_OW 88
// if IsOK ( Joan ) then
4745: LD_EXP 13
4749: PPUSH
4750: CALL_OW 302
4754: IFFALSE 4770
// Say ( Simms , D3a-Sim-4 ) else
4756: LD_EXP 11
4760: PPUSH
4761: LD_STRING D3a-Sim-4
4763: PPUSH
4764: CALL_OW 88
4768: GO 4782
// Say ( Simms , D3a-Sim-4a ) ;
4770: LD_EXP 11
4774: PPUSH
4775: LD_STRING D3a-Sim-4a
4777: PPUSH
4778: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4782: LD_EXP 12
4786: PPUSH
4787: LD_STRING D3a-Sci1-4
4789: PPUSH
4790: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4794: LD_EXP 11
4798: PPUSH
4799: LD_STRING D3a-Sim-5
4801: PPUSH
4802: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4806: LD_EXP 12
4810: PPUSH
4811: LD_STRING D3a-Sci1-5
4813: PPUSH
4814: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4818: LD_EXP 11
4822: PPUSH
4823: LD_STRING D3a-Sim-6
4825: PPUSH
4826: CALL_OW 88
// DialogueOff ;
4830: CALL_OW 7
// end ; end ;
4834: PPOPN 2
4836: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4837: LD_EXP 28
4841: PUSH
4842: LD_INT 1
4844: EQUAL
4845: IFFALSE 5165
4847: GO 4849
4849: DISABLE
4850: LD_INT 0
4852: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4853: LD_EXP 18
4857: PPUSH
4858: LD_STRING D4-FSol1-1
4860: PPUSH
4861: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4865: LD_STRING M3
4867: PPUSH
4868: CALL_OW 337
// PrepareRussians ;
4872: CALL 2541 0 0
// rnd = Rand ( 1 , 100 ) ;
4876: LD_ADDR_VAR 0 1
4880: PUSH
4881: LD_INT 1
4883: PPUSH
4884: LD_INT 100
4886: PPUSH
4887: CALL_OW 12
4891: ST_TO_ADDR
// if difficulty = 1 then
4892: LD_OWVAR 67
4896: PUSH
4897: LD_INT 1
4899: EQUAL
4900: IFFALSE 4983
// begin if rnd > 0 and rnd < 51 then
4902: LD_VAR 0 1
4906: PUSH
4907: LD_INT 0
4909: GREATER
4910: PUSH
4911: LD_VAR 0 1
4915: PUSH
4916: LD_INT 51
4918: LESS
4919: AND
4920: IFFALSE 4929
// BuildRussianBase ( 2 ) ;
4922: LD_INT 2
4924: PPUSH
4925: CALL 8095 0 1
// if rnd > 50 and rnd < 81 then
4929: LD_VAR 0 1
4933: PUSH
4934: LD_INT 50
4936: GREATER
4937: PUSH
4938: LD_VAR 0 1
4942: PUSH
4943: LD_INT 81
4945: LESS
4946: AND
4947: IFFALSE 4956
// BuildRussianBase ( 1 ) ;
4949: LD_INT 1
4951: PPUSH
4952: CALL 8095 0 1
// if rnd > 80 and rnd < 101 then
4956: LD_VAR 0 1
4960: PUSH
4961: LD_INT 80
4963: GREATER
4964: PUSH
4965: LD_VAR 0 1
4969: PUSH
4970: LD_INT 101
4972: LESS
4973: AND
4974: IFFALSE 4983
// BuildRussianBase ( 3 ) ;
4976: LD_INT 3
4978: PPUSH
4979: CALL 8095 0 1
// end ; if difficulty = 2 then
4983: LD_OWVAR 67
4987: PUSH
4988: LD_INT 2
4990: EQUAL
4991: IFFALSE 5074
// begin if rnd > 0 and rnd < 61 then
4993: LD_VAR 0 1
4997: PUSH
4998: LD_INT 0
5000: GREATER
5001: PUSH
5002: LD_VAR 0 1
5006: PUSH
5007: LD_INT 61
5009: LESS
5010: AND
5011: IFFALSE 5020
// BuildRussianBase ( 2 ) ;
5013: LD_INT 2
5015: PPUSH
5016: CALL 8095 0 1
// if rnd > 60 and rnd < 81 then
5020: LD_VAR 0 1
5024: PUSH
5025: LD_INT 60
5027: GREATER
5028: PUSH
5029: LD_VAR 0 1
5033: PUSH
5034: LD_INT 81
5036: LESS
5037: AND
5038: IFFALSE 5047
// BuildRussianBase ( 1 ) ;
5040: LD_INT 1
5042: PPUSH
5043: CALL 8095 0 1
// if rnd > 80 and rnd < 101 then
5047: LD_VAR 0 1
5051: PUSH
5052: LD_INT 80
5054: GREATER
5055: PUSH
5056: LD_VAR 0 1
5060: PUSH
5061: LD_INT 101
5063: LESS
5064: AND
5065: IFFALSE 5074
// BuildRussianBase ( 3 ) ;
5067: LD_INT 3
5069: PPUSH
5070: CALL 8095 0 1
// end ; if difficulty = 3 then
5074: LD_OWVAR 67
5078: PUSH
5079: LD_INT 3
5081: EQUAL
5082: IFFALSE 5165
// begin if rnd > 0 and rnd < 71 then
5084: LD_VAR 0 1
5088: PUSH
5089: LD_INT 0
5091: GREATER
5092: PUSH
5093: LD_VAR 0 1
5097: PUSH
5098: LD_INT 71
5100: LESS
5101: AND
5102: IFFALSE 5111
// BuildRussianBase ( 3 ) ;
5104: LD_INT 3
5106: PPUSH
5107: CALL 8095 0 1
// if rnd > 70 and rnd < 81 then
5111: LD_VAR 0 1
5115: PUSH
5116: LD_INT 70
5118: GREATER
5119: PUSH
5120: LD_VAR 0 1
5124: PUSH
5125: LD_INT 81
5127: LESS
5128: AND
5129: IFFALSE 5138
// BuildRussianBase ( 2 ) ;
5131: LD_INT 2
5133: PPUSH
5134: CALL 8095 0 1
// if rnd > 80 and rnd < 101 then
5138: LD_VAR 0 1
5142: PUSH
5143: LD_INT 80
5145: GREATER
5146: PUSH
5147: LD_VAR 0 1
5151: PUSH
5152: LD_INT 101
5154: LESS
5155: AND
5156: IFFALSE 5165
// BuildRussianBase ( 1 ) ;
5158: LD_INT 1
5160: PPUSH
5161: CALL 8095 0 1
// end ; end ;
5165: PPOPN 1
5167: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5168: LD_INT 54
5170: PPUSH
5171: LD_INT 1
5173: PPUSH
5174: CALL_OW 321
5178: PUSH
5179: LD_INT 2
5181: EQUAL
5182: PUSH
5183: LD_INT 21
5185: PPUSH
5186: LD_INT 1
5188: PPUSH
5189: CALL_OW 321
5193: PUSH
5194: LD_INT 2
5196: EQUAL
5197: OR
5198: PUSH
5199: LD_INT 22
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: CALL_OW 321
5209: PUSH
5210: LD_INT 2
5212: EQUAL
5213: OR
5214: IFFALSE 5531
5216: GO 5218
5218: DISABLE
5219: LD_INT 0
5221: PPUSH
5222: PPUSH
// begin if IsOk ( Denis ) then
5223: LD_EXP 12
5227: PPUSH
5228: CALL_OW 302
5232: IFFALSE 5326
// begin DialogueOn ;
5234: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5238: LD_EXP 1
5242: PPUSH
5243: LD_STRING D6-JMM-1
5245: PPUSH
5246: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5250: LD_EXP 12
5254: PPUSH
5255: LD_STRING D6-Sci1-1
5257: PPUSH
5258: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5262: LD_EXP 1
5266: PPUSH
5267: LD_STRING D6-JMM-2
5269: PPUSH
5270: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5274: LD_EXP 12
5278: PPUSH
5279: LD_STRING D6-Sci1-2
5281: PPUSH
5282: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5286: LD_EXP 1
5290: PPUSH
5291: LD_STRING D6-JMM-3
5293: PPUSH
5294: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5298: LD_EXP 12
5302: PPUSH
5303: LD_STRING D6-Sci1-3
5305: PPUSH
5306: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5310: LD_EXP 1
5314: PPUSH
5315: LD_STRING D6-JMM-4
5317: PPUSH
5318: CALL_OW 88
// DialogueOff ;
5322: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
5326: LD_INT 1050
5328: PPUSH
5329: CALL_OW 67
// if arabianTrait = 0 then
5333: LD_EXP 48
5337: PUSH
5338: LD_INT 0
5340: EQUAL
5341: IFFALSE 5475
// begin DialogueOn ;
5343: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
5347: LD_INT 22
5349: PUSH
5350: LD_INT 2
5352: PUSH
5353: EMPTY
5354: LIST
5355: LIST
5356: PUSH
5357: LD_INT 25
5359: PUSH
5360: LD_INT 4
5362: PUSH
5363: EMPTY
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 26
5369: PUSH
5370: LD_INT 1
5372: PUSH
5373: EMPTY
5374: LIST
5375: LIST
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: LIST
5381: PPUSH
5382: CALL_OW 69
5386: PPUSH
5387: LD_STRING D5-Ar1-1
5389: PPUSH
5390: LD_STRING D5-Ar1-1
5392: PPUSH
5393: CALL 7568 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
5397: LD_EXP 26
5401: PPUSH
5402: LD_STRING D5-Diet-1
5404: PPUSH
5405: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
5409: LD_INT 22
5411: PUSH
5412: LD_INT 2
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: PUSH
5419: LD_INT 25
5421: PUSH
5422: LD_INT 4
5424: PUSH
5425: EMPTY
5426: LIST
5427: LIST
5428: PUSH
5429: LD_INT 26
5431: PUSH
5432: LD_INT 1
5434: PUSH
5435: EMPTY
5436: LIST
5437: LIST
5438: PUSH
5439: EMPTY
5440: LIST
5441: LIST
5442: LIST
5443: PPUSH
5444: CALL_OW 69
5448: PPUSH
5449: LD_STRING D5-Ar1-2
5451: PPUSH
5452: LD_STRING D5-Ar1-2
5454: PPUSH
5455: CALL 7568 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
5459: LD_EXP 26
5463: PPUSH
5464: LD_STRING D5-Diet-2
5466: PPUSH
5467: CALL_OW 88
// DialogueOff ;
5471: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5475: LD_INT 2100
5477: PUSH
5478: LD_INT 3150
5480: PUSH
5481: LD_INT 4200
5483: PUSH
5484: LD_INT 5250
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_INT 4
5498: PPUSH
5499: CALL_OW 12
5503: ARRAY
5504: PPUSH
5505: CALL_OW 67
// if arabianTrait = 0 then
5509: LD_EXP 48
5513: PUSH
5514: LD_INT 0
5516: EQUAL
5517: IFFALSE 5531
// begin arabianTrait = 1 ;
5519: LD_ADDR_EXP 48
5523: PUSH
5524: LD_INT 1
5526: ST_TO_ADDR
// PrepareArabianTrait ;
5527: CALL 5534 0 0
// end ; end ;
5531: PPOPN 2
5533: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
5534: LD_INT 0
5536: PPUSH
5537: PPUSH
5538: PPUSH
5539: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5540: LD_ADDR_VAR 0 2
5544: PUSH
5545: LD_INT 22
5547: PUSH
5548: LD_INT 2
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 25
5557: PUSH
5558: LD_INT 4
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PPUSH
5569: CALL_OW 69
5573: PUSH
5574: FOR_IN
5575: IFFALSE 5588
// ComExitBuilding ( i ) ;
5577: LD_VAR 0 2
5581: PPUSH
5582: CALL_OW 122
5586: GO 5574
5588: POP
5589: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
5590: LD_ADDR_VAR 0 2
5594: PUSH
5595: LD_INT 22
5597: PUSH
5598: LD_INT 2
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 25
5607: PUSH
5608: LD_INT 3
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: PPUSH
5619: CALL_OW 69
5623: PUSH
5624: FOR_IN
5625: IFFALSE 5638
// ComExitVehicle ( i ) ;
5627: LD_VAR 0 2
5631: PPUSH
5632: CALL_OW 121
5636: GO 5624
5638: POP
5639: POP
// wait ( 0 0$3 ) ;
5640: LD_INT 105
5642: PPUSH
5643: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5647: LD_INT 76
5649: PPUSH
5650: LD_INT 19
5652: PPUSH
5653: CALL_OW 84
// DialogueOn ;
5657: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5661: LD_INT 22
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 26
5673: PUSH
5674: LD_INT 1
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PPUSH
5685: CALL_OW 69
5689: PUSH
5690: LD_EXP 1
5694: PUSH
5695: LD_EXP 14
5699: PUSH
5700: EMPTY
5701: LIST
5702: LIST
5703: DIFF
5704: PPUSH
5705: LD_STRING D8-Sol1-1
5707: PPUSH
5708: LD_STRING D8-Sol1-1
5710: PPUSH
5711: CALL 7568 0 3
// if IsOK ( DeltaDoctor ) then
5715: LD_EXP 17
5719: PPUSH
5720: CALL_OW 302
5724: IFFALSE 5740
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5726: LD_EXP 17
5730: PPUSH
5731: LD_STRING D8-Sci1-1
5733: PPUSH
5734: CALL_OW 88
5738: GO 5845
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5740: LD_INT 22
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 26
5752: PUSH
5753: LD_INT 1
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 25
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 25
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: EMPTY
5804: LIST
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: PUSH
5810: EMPTY
5811: LIST
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 69
5819: PUSH
5820: LD_EXP 1
5824: PUSH
5825: LD_EXP 14
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: DIFF
5834: PPUSH
5835: LD_STRING D8-Sol1-1
5837: PPUSH
5838: LD_STRING D8-Sol1-1
5840: PPUSH
5841: CALL 7568 0 3
// Say ( JMM , D8-JMM-1 ) ;
5845: LD_EXP 1
5849: PPUSH
5850: LD_STRING D8-JMM-1
5852: PPUSH
5853: CALL_OW 88
// DialogueOff ;
5857: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
5861: LD_INT 2
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
5871: LD_INT 1
5873: PPUSH
5874: LD_INT 2
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: LD_INT 1
5882: PPUSH
5883: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
5887: LD_INT 3
5889: PPUSH
5890: LD_INT 2
5892: PPUSH
5893: LD_INT 1
5895: PPUSH
5896: LD_INT 1
5898: PPUSH
5899: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
5903: LD_ADDR_VAR 0 2
5907: PUSH
5908: LD_INT 22
5910: PUSH
5911: LD_INT 2
5913: PUSH
5914: EMPTY
5915: LIST
5916: LIST
5917: PUSH
5918: LD_INT 21
5920: PUSH
5921: LD_INT 1
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PPUSH
5932: CALL_OW 69
5936: PUSH
5937: FOR_IN
5938: IFFALSE 6078
// begin ComExitBuilding ( i ) ;
5940: LD_VAR 0 2
5944: PPUSH
5945: CALL_OW 122
// wait ( 0 0$1 ) ;
5949: LD_INT 35
5951: PPUSH
5952: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
5956: LD_VAR 0 2
5960: PPUSH
5961: LD_INT 77
5963: PPUSH
5964: LD_INT 10
5966: PPUSH
5967: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_INT 82
5978: PPUSH
5979: LD_INT 5
5981: PPUSH
5982: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
5986: LD_VAR 0 2
5990: PPUSH
5991: LD_INT 95
5993: PPUSH
5994: LD_INT 12
5996: PPUSH
5997: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
6001: LD_VAR 0 2
6005: PPUSH
6006: LD_INT 102
6008: PPUSH
6009: LD_INT 11
6011: PPUSH
6012: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
6016: LD_VAR 0 2
6020: PPUSH
6021: LD_INT 116
6023: PPUSH
6024: LD_INT 15
6026: PPUSH
6027: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
6031: LD_VAR 0 2
6035: PPUSH
6036: LD_INT 140
6038: PPUSH
6039: LD_INT 25
6041: PPUSH
6042: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
6046: LD_VAR 0 2
6050: PPUSH
6051: LD_INT 160
6053: PPUSH
6054: LD_INT 56
6056: PPUSH
6057: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: LD_INT 189
6068: PPUSH
6069: LD_INT 79
6071: PPUSH
6072: CALL_OW 174
// end ;
6076: GO 5937
6078: POP
6079: POP
// arabianAttackersAI = 1 ;
6080: LD_ADDR_EXP 45
6084: PUSH
6085: LD_INT 1
6087: ST_TO_ADDR
// wait ( 0 0$30 ) ;
6088: LD_INT 1050
6090: PPUSH
6091: CALL_OW 67
// if IsOk ( Gary ) then
6095: LD_EXP 10
6099: PPUSH
6100: CALL_OW 302
6104: IFFALSE 6118
// Say ( Gary , D8a-Gary-1 ) ;
6106: LD_EXP 10
6110: PPUSH
6111: LD_STRING D8a-Gary-1
6113: PPUSH
6114: CALL_OW 88
// wait ( 0 0$5 ) ;
6118: LD_INT 175
6120: PPUSH
6121: CALL_OW 67
// if IsOK ( Khatam ) then
6125: LD_EXP 14
6129: PPUSH
6130: CALL_OW 302
6134: IFFALSE 6554
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] ;
6136: LD_ADDR_VAR 0 3
6140: PUSH
6141: LD_INT 22
6143: PUSH
6144: LD_INT 1
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 26
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 2
6163: PUSH
6164: LD_INT 25
6166: PUSH
6167: LD_INT 1
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 25
6176: PUSH
6177: LD_INT 2
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 3
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 4
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: LIST
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PPUSH
6216: CALL_OW 69
6220: PUSH
6221: LD_EXP 1
6225: PUSH
6226: LD_EXP 14
6230: PUSH
6231: LD_EXP 13
6235: PUSH
6236: EMPTY
6237: LIST
6238: LIST
6239: LIST
6240: DIFF
6241: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6242: LD_EXP 14
6246: PPUSH
6247: LD_INT 8
6249: PPUSH
6250: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6254: LD_EXP 14
6258: PPUSH
6259: CALL_OW 122
// wait ( 0 0$1 ) ;
6263: LD_INT 35
6265: PPUSH
6266: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6270: LD_EXP 14
6274: PPUSH
6275: CALL_OW 121
// wait ( 0 0$1 ) ;
6279: LD_INT 35
6281: PPUSH
6282: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6286: LD_EXP 14
6290: PPUSH
6291: LD_INT 7
6293: PPUSH
6294: CALL_OW 113
// DialogueOn ;
6298: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
6302: LD_VAR 0 3
6306: PUSH
6307: LD_INT 1
6309: ARRAY
6310: PPUSH
6311: CALL_OW 258
6315: PUSH
6316: LD_INT 1
6318: EQUAL
6319: IFFALSE 6339
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
6321: LD_VAR 0 3
6325: PUSH
6326: LD_INT 1
6328: ARRAY
6329: PPUSH
6330: LD_STRING D8b-Sol1-1
6332: PPUSH
6333: CALL_OW 88
6337: GO 6355
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
6339: LD_VAR 0 3
6343: PUSH
6344: LD_INT 1
6346: ARRAY
6347: PPUSH
6348: LD_STRING D8b-FSol1-1
6350: PPUSH
6351: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
6355: LD_EXP 14
6359: PPUSH
6360: LD_STRING D8b-Khat-1
6362: PPUSH
6363: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6367: LD_VAR 0 3
6371: PUSH
6372: LD_INT 1
6374: ARRAY
6375: PPUSH
6376: CALL_OW 258
6380: PUSH
6381: LD_INT 1
6383: EQUAL
6384: IFFALSE 6404
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
6386: LD_VAR 0 3
6390: PUSH
6391: LD_INT 1
6393: ARRAY
6394: PPUSH
6395: LD_STRING D8b-Sol1-2
6397: PPUSH
6398: CALL_OW 88
6402: GO 6420
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
6404: LD_VAR 0 3
6408: PUSH
6409: LD_INT 1
6411: ARRAY
6412: PPUSH
6413: LD_STRING D8b-FSol1-2
6415: PPUSH
6416: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
6420: LD_EXP 14
6424: PPUSH
6425: LD_STRING D8b-Khat-2
6427: PPUSH
6428: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6432: LD_VAR 0 3
6436: PUSH
6437: LD_INT 1
6439: ARRAY
6440: PPUSH
6441: CALL_OW 258
6445: PUSH
6446: LD_INT 1
6448: EQUAL
6449: IFFALSE 6469
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
6451: LD_VAR 0 3
6455: PUSH
6456: LD_INT 1
6458: ARRAY
6459: PPUSH
6460: LD_STRING D8b-Sol1-3
6462: PPUSH
6463: CALL_OW 88
6467: GO 6485
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
6469: LD_VAR 0 3
6473: PUSH
6474: LD_INT 1
6476: ARRAY
6477: PPUSH
6478: LD_STRING D8b-FSol1-3
6480: PPUSH
6481: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
6485: LD_EXP 14
6489: PPUSH
6490: LD_STRING D8b-Khat-3
6492: PPUSH
6493: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6497: LD_VAR 0 3
6501: PUSH
6502: LD_INT 1
6504: ARRAY
6505: PPUSH
6506: CALL_OW 258
6510: PUSH
6511: LD_INT 1
6513: EQUAL
6514: IFFALSE 6534
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
6516: LD_VAR 0 3
6520: PUSH
6521: LD_INT 1
6523: ARRAY
6524: PPUSH
6525: LD_STRING D8b-Sol1-4
6527: PPUSH
6528: CALL_OW 88
6532: GO 6550
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
6534: LD_VAR 0 3
6538: PUSH
6539: LD_INT 1
6541: ARRAY
6542: PPUSH
6543: LD_STRING D8b-FSol1-4
6545: PPUSH
6546: CALL_OW 88
// DialogueOff ;
6550: CALL_OW 7
// end ; end ;
6554: LD_VAR 0 1
6558: RET
// every 0 0$1 do var i ;
6559: GO 6561
6561: DISABLE
6562: LD_INT 0
6564: PPUSH
// begin enable ;
6565: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6566: LD_ADDR_VAR 0 1
6570: PUSH
6571: LD_INT 7
6573: PPUSH
6574: LD_INT 22
6576: PUSH
6577: LD_INT 2
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: PPUSH
6584: CALL_OW 70
6588: PUSH
6589: FOR_IN
6590: IFFALSE 6658
// begin if GetClass ( i ) = 4 then
6592: LD_VAR 0 1
6596: PPUSH
6597: CALL_OW 257
6601: PUSH
6602: LD_INT 4
6604: EQUAL
6605: IFFALSE 6617
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6607: LD_INT 1
6609: PPUSH
6610: LD_STRING 10_ScientistsEscape_1
6612: PPUSH
6613: CALL_OW 39
// if i = Dietrich then
6617: LD_VAR 0 1
6621: PUSH
6622: LD_EXP 26
6626: EQUAL
6627: IFFALSE 6639
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6629: LD_INT 1
6631: PPUSH
6632: LD_STRING 10_GensherEscape_1
6634: PPUSH
6635: CALL_OW 39
// arabianEscape = 1 ;
6639: LD_ADDR_EXP 46
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// RemoveUnit ( i ) ;
6647: LD_VAR 0 1
6651: PPUSH
6652: CALL_OW 64
// end ;
6656: GO 6589
6658: POP
6659: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6660: LD_EXP 14
6664: PPUSH
6665: LD_INT 7
6667: PPUSH
6668: CALL_OW 308
6672: IFFALSE 6691
// begin KhatamStatus = 1 ;
6674: LD_ADDR_EXP 49
6678: PUSH
6679: LD_INT 1
6681: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6682: LD_EXP 14
6686: PPUSH
6687: CALL_OW 64
// end ; end ;
6691: PPOPN 1
6693: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6694: LD_EXP 14
6698: PPUSH
6699: CALL_OW 301
6703: IFFALSE 6716
6705: GO 6707
6707: DISABLE
// KhatamStatus = 0 ;
6708: LD_ADDR_EXP 49
6712: PUSH
6713: LD_INT 0
6715: ST_TO_ADDR
6716: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
6717: LD_INT 22
6719: PUSH
6720: LD_INT 2
6722: PUSH
6723: EMPTY
6724: LIST
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 1
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PPUSH
6741: CALL_OW 69
6745: PUSH
6746: LD_INT 0
6748: EQUAL
6749: PUSH
6750: LD_INT 22
6752: PUSH
6753: LD_INT 4
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 21
6762: PUSH
6763: LD_INT 1
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PUSH
6779: LD_INT 0
6781: EQUAL
6782: AND
6783: IFFALSE 6796
6785: GO 6787
6787: DISABLE
// arabianDefeated = 1 ;
6788: LD_ADDR_EXP 47
6792: PUSH
6793: LD_INT 1
6795: ST_TO_ADDR
6796: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
6797: LD_INT 54
6799: PPUSH
6800: LD_INT 1
6802: PPUSH
6803: CALL_OW 321
6807: PUSH
6808: LD_INT 2
6810: EQUAL
6811: PUSH
6812: LD_INT 55
6814: PPUSH
6815: LD_INT 1
6817: PPUSH
6818: CALL_OW 321
6822: PUSH
6823: LD_INT 2
6825: EQUAL
6826: AND
6827: PUSH
6828: LD_INT 21
6830: PPUSH
6831: LD_INT 1
6833: PPUSH
6834: CALL_OW 321
6838: PUSH
6839: LD_INT 2
6841: EQUAL
6842: AND
6843: PUSH
6844: LD_INT 22
6846: PPUSH
6847: LD_INT 1
6849: PPUSH
6850: CALL_OW 321
6854: PUSH
6855: LD_INT 2
6857: EQUAL
6858: AND
6859: PUSH
6860: LD_INT 12
6862: PPUSH
6863: LD_INT 1
6865: PPUSH
6866: CALL_OW 321
6870: PUSH
6871: LD_INT 2
6873: EQUAL
6874: AND
6875: PUSH
6876: LD_INT 32
6878: PPUSH
6879: LD_INT 1
6881: PPUSH
6882: CALL_OW 321
6886: PUSH
6887: LD_INT 2
6889: EQUAL
6890: AND
6891: PUSH
6892: LD_EXP 56
6896: PUSH
6897: LD_INT 0
6899: EQUAL
6900: AND
6901: PUSH
6902: LD_EXP 48
6906: PUSH
6907: LD_INT 0
6909: EQUAL
6910: AND
6911: IFFALSE 6928
6913: GO 6915
6915: DISABLE
// begin arabianTrait = 1 ;
6916: LD_ADDR_EXP 48
6920: PUSH
6921: LD_INT 1
6923: ST_TO_ADDR
// PrepareArabianTrait ;
6924: CALL 5534 0 0
// end ;
6928: END
// every 9 9$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6929: LD_EXP 28
6933: PUSH
6934: LD_INT 1
6936: EQUAL
6937: PUSH
6938: LD_STRING 02_mikhailStatus_1
6940: PPUSH
6941: LD_INT 0
6943: PPUSH
6944: CALL_OW 30
6948: PUSH
6949: LD_INT 1
6951: EQUAL
6952: AND
6953: IFFALSE 6962
6955: GO 6957
6957: DISABLE
// PrepareCornell ;
6958: CALL 2405 0 0
6962: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6963: LD_INT 1
6965: PPUSH
6966: LD_EXP 19
6970: PPUSH
6971: CALL_OW 292
6975: IFFALSE 7200
6977: GO 6979
6979: DISABLE
// begin InGameOn ;
6980: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6984: LD_EXP 19
6988: PPUSH
6989: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6993: LD_EXP 19
6997: PPUSH
6998: LD_STRING D7-Corn-1
7000: PPUSH
7001: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
7005: LD_INT 22
7007: PUSH
7008: LD_INT 1
7010: PUSH
7011: EMPTY
7012: LIST
7013: LIST
7014: PUSH
7015: LD_INT 2
7017: PUSH
7018: LD_INT 25
7020: PUSH
7021: LD_INT 1
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 25
7030: PUSH
7031: LD_INT 2
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: PUSH
7038: LD_INT 25
7040: PUSH
7041: LD_INT 3
7043: PUSH
7044: EMPTY
7045: LIST
7046: LIST
7047: PUSH
7048: LD_INT 25
7050: PUSH
7051: LD_INT 4
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PPUSH
7069: CALL_OW 69
7073: PUSH
7074: LD_EXP 1
7078: PUSH
7079: LD_EXP 13
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: DIFF
7088: PPUSH
7089: LD_STRING D7-Sol1-1
7091: PPUSH
7092: LD_STRING D7-FSol1-1
7094: PPUSH
7095: CALL 7568 0 3
// CenterNowOnUnits ( Cornell ) ;
7099: LD_EXP 19
7103: PPUSH
7104: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
7108: LD_EXP 19
7112: PPUSH
7113: LD_STRING D7-Corn-2
7115: PPUSH
7116: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7120: LD_EXP 1
7124: PPUSH
7125: LD_STRING D7-JMM-2
7127: PPUSH
7128: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
7132: LD_EXP 19
7136: PPUSH
7137: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
7141: LD_EXP 19
7145: PPUSH
7146: LD_STRING D7-Corn-3
7148: PPUSH
7149: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
7153: LD_EXP 19
7157: PPUSH
7158: LD_INT 250
7160: PPUSH
7161: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
7165: LD_EXP 19
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: CALL_OW 235
// wait ( 0 0$1 ) ;
7177: LD_INT 35
7179: PPUSH
7180: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
7184: LD_EXP 1
7188: PPUSH
7189: LD_STRING D7-JMM-3
7191: PPUSH
7192: CALL_OW 88
// InGameOff ;
7196: CALL_OW 9
// end ;
7200: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
7201: LD_EXP 19
7205: PPUSH
7206: CALL_OW 255
7210: PUSH
7211: LD_INT 1
7213: EQUAL
7214: PUSH
7215: LD_EXP 19
7219: PPUSH
7220: CALL_OW 256
7224: PUSH
7225: LD_INT 251
7227: GREATER
7228: AND
7229: IFFALSE 7422
7231: GO 7233
7233: DISABLE
// begin DialogueOn ;
7234: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7238: LD_EXP 1
7242: PPUSH
7243: LD_STRING D7a-JMM-1
7245: PPUSH
7246: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7250: LD_EXP 19
7254: PPUSH
7255: LD_STRING D7a-Corn-1
7257: PPUSH
7258: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7262: LD_EXP 1
7266: PPUSH
7267: LD_STRING D7a-JMM-2
7269: PPUSH
7270: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7274: LD_EXP 19
7278: PPUSH
7279: LD_STRING D7a-Corn-2
7281: PPUSH
7282: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7286: LD_EXP 1
7290: PPUSH
7291: LD_STRING D7a-JMM-3
7293: PPUSH
7294: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7298: LD_EXP 19
7302: PPUSH
7303: LD_STRING D7a-Corn-3
7305: PPUSH
7306: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7310: LD_EXP 1
7314: PPUSH
7315: LD_STRING D7a-JMM-4
7317: PPUSH
7318: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7322: LD_EXP 19
7326: PPUSH
7327: LD_STRING D7a-Corn-4
7329: PPUSH
7330: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7334: LD_EXP 1
7338: PPUSH
7339: LD_STRING D7a-JMM-5
7341: PPUSH
7342: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7346: LD_EXP 19
7350: PPUSH
7351: LD_STRING D7a-Corn-5
7353: PPUSH
7354: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
7358: LD_EXP 1
7362: PPUSH
7363: LD_STRING D7a-JMM-6
7365: PPUSH
7366: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
7370: LD_EXP 19
7374: PPUSH
7375: LD_STRING D7a-Corn-6
7377: PPUSH
7378: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
7382: LD_EXP 1
7386: PPUSH
7387: LD_STRING D7a-JMM-7
7389: PPUSH
7390: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
7394: LD_EXP 19
7398: PPUSH
7399: LD_STRING D7a-Corn-7
7401: PPUSH
7402: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7406: LD_EXP 1
7410: PPUSH
7411: LD_STRING D7a-JMM-8
7413: PPUSH
7414: CALL_OW 88
// DialogueOff ;
7418: CALL_OW 7
// end ;
7422: END
// every 0 0$1 trigger telep_ru_dialog do
7423: LD_EXP 55
7427: IFFALSE 7510
7429: GO 7431
7431: DISABLE
// begin DialogueOn ;
7432: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
7436: LD_EXP 55
7440: PUSH
7441: LD_INT 1
7443: ARRAY
7444: PPUSH
7445: LD_EXP 55
7449: PUSH
7450: LD_INT 2
7452: ARRAY
7453: PPUSH
7454: CALL_OW 86
// if IsOk ( Cyrus ) then
7458: LD_EXP 5
7462: PPUSH
7463: CALL_OW 302
7467: IFFALSE 7483
// Say ( Cyrus , D10-Cyrus-1 ) else
7469: LD_EXP 5
7473: PPUSH
7474: LD_STRING D10-Cyrus-1
7476: PPUSH
7477: CALL_OW 88
7481: GO 7506
// if IsOk ( JMM ) then
7483: LD_EXP 1
7487: PPUSH
7488: CALL_OW 302
7492: IFFALSE 7506
// Say ( JMM , D10-JMM-1 ) ;
7494: LD_EXP 1
7498: PPUSH
7499: LD_STRING D10-JMM-1
7501: PPUSH
7502: CALL_OW 88
// DialogueOff ;
7506: CALL_OW 7
// end ; end_of_file
7510: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7511: LD_INT 0
7513: PPUSH
7514: PPUSH
// if exist_mode then
7515: LD_VAR 0 2
7519: IFFALSE 7538
// unit := CreateCharacter ( ident ) else
7521: LD_ADDR_VAR 0 4
7525: PUSH
7526: LD_VAR 0 1
7530: PPUSH
7531: CALL_OW 34
7535: ST_TO_ADDR
7536: GO 7553
// unit := NewCharacter ( ident ) ;
7538: LD_ADDR_VAR 0 4
7542: PUSH
7543: LD_VAR 0 1
7547: PPUSH
7548: CALL_OW 25
7552: ST_TO_ADDR
// result := unit ;
7553: LD_ADDR_VAR 0 3
7557: PUSH
7558: LD_VAR 0 4
7562: ST_TO_ADDR
// end ;
7563: LD_VAR 0 3
7567: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7568: LD_INT 0
7570: PPUSH
7571: PPUSH
7572: PPUSH
// rnd = rand ( 1 , characters ) ;
7573: LD_ADDR_VAR 0 6
7577: PUSH
7578: LD_INT 1
7580: PPUSH
7581: LD_VAR 0 1
7585: PPUSH
7586: CALL_OW 12
7590: ST_TO_ADDR
// for i = 1 to characters do
7591: LD_ADDR_VAR 0 5
7595: PUSH
7596: DOUBLE
7597: LD_INT 1
7599: DEC
7600: ST_TO_ADDR
7601: LD_VAR 0 1
7605: PUSH
7606: FOR_TO
7607: IFFALSE 7717
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7609: LD_VAR 0 5
7613: PUSH
7614: LD_VAR 0 6
7618: EQUAL
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: LD_VAR 0 5
7629: ARRAY
7630: PPUSH
7631: CALL_OW 258
7635: PUSH
7636: LD_INT 1
7638: EQUAL
7639: AND
7640: IFFALSE 7662
// Say ( characters [ i ] , dialogMID ) ;
7642: LD_VAR 0 1
7646: PUSH
7647: LD_VAR 0 5
7651: ARRAY
7652: PPUSH
7653: LD_VAR 0 2
7657: PPUSH
7658: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7662: LD_VAR 0 5
7666: PUSH
7667: LD_VAR 0 6
7671: EQUAL
7672: PUSH
7673: LD_VAR 0 1
7677: PUSH
7678: LD_VAR 0 5
7682: ARRAY
7683: PPUSH
7684: CALL_OW 258
7688: PUSH
7689: LD_INT 2
7691: EQUAL
7692: AND
7693: IFFALSE 7715
// Say ( characters [ i ] , dialogFID ) ;
7695: LD_VAR 0 1
7699: PUSH
7700: LD_VAR 0 5
7704: ARRAY
7705: PPUSH
7706: LD_VAR 0 3
7710: PPUSH
7711: CALL_OW 88
// end ;
7715: GO 7606
7717: POP
7718: POP
// end ;
7719: LD_VAR 0 4
7723: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7724: LD_INT 0
7726: PPUSH
7727: PPUSH
// for i in charactersList do
7728: LD_ADDR_VAR 0 4
7732: PUSH
7733: LD_VAR 0 1
7737: PUSH
7738: FOR_IN
7739: IFFALSE 7768
// begin if IsOk ( i ) then
7741: LD_VAR 0 4
7745: PPUSH
7746: CALL_OW 302
7750: IFFALSE 7766
// SaveCharacters ( i , ident ) ;
7752: LD_VAR 0 4
7756: PPUSH
7757: LD_VAR 0 2
7761: PPUSH
7762: CALL_OW 38
// end ;
7766: GO 7738
7768: POP
7769: POP
// end ;
7770: LD_VAR 0 3
7774: RET
// export function PrepareDifficulty ; begin
7775: LD_INT 0
7777: PPUSH
// if difficulty = 1 then
7778: LD_OWVAR 67
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: IFFALSE 7830
// begin RuSolMinLevel = 4 ;
7788: LD_ADDR_EXP 35
7792: PUSH
7793: LD_INT 4
7795: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7796: LD_ADDR_EXP 36
7800: PUSH
7801: LD_INT 7
7803: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7804: LD_INT 51
7806: PPUSH
7807: LD_INT 6
7809: PPUSH
7810: LD_INT 2
7812: PPUSH
7813: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7817: LD_INT 51
7819: PPUSH
7820: LD_INT 5
7822: PPUSH
7823: LD_INT 2
7825: PPUSH
7826: CALL_OW 322
// end ; if difficulty = 2 then
7830: LD_OWVAR 67
7834: PUSH
7835: LD_INT 2
7837: EQUAL
7838: IFFALSE 7934
// begin RuSolMinLevel = 5 ;
7840: LD_ADDR_EXP 35
7844: PUSH
7845: LD_INT 5
7847: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7848: LD_ADDR_EXP 36
7852: PUSH
7853: LD_INT 7
7855: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7856: LD_INT 51
7858: PPUSH
7859: LD_INT 6
7861: PPUSH
7862: LD_INT 2
7864: PPUSH
7865: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7869: LD_INT 57
7871: PPUSH
7872: LD_INT 6
7874: PPUSH
7875: LD_INT 2
7877: PPUSH
7878: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7882: LD_INT 63
7884: PPUSH
7885: LD_INT 6
7887: PPUSH
7888: LD_INT 2
7890: PPUSH
7891: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7895: LD_INT 51
7897: PPUSH
7898: LD_INT 5
7900: PPUSH
7901: LD_INT 2
7903: PPUSH
7904: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7908: LD_INT 5
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: LD_INT 2
7916: PPUSH
7917: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7921: LD_INT 5
7923: PPUSH
7924: LD_INT 5
7926: PPUSH
7927: LD_INT 2
7929: PPUSH
7930: CALL_OW 322
// end ; if difficulty = 3 then
7934: LD_OWVAR 67
7938: PUSH
7939: LD_INT 3
7941: EQUAL
7942: IFFALSE 8090
// begin RuSolMinLevel = 6 ;
7944: LD_ADDR_EXP 35
7948: PUSH
7949: LD_INT 6
7951: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7952: LD_ADDR_EXP 36
7956: PUSH
7957: LD_INT 8
7959: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7960: LD_INT 51
7962: PPUSH
7963: LD_INT 6
7965: PPUSH
7966: LD_INT 2
7968: PPUSH
7969: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7973: LD_INT 57
7975: PPUSH
7976: LD_INT 6
7978: PPUSH
7979: LD_INT 2
7981: PPUSH
7982: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7986: LD_INT 52
7988: PPUSH
7989: LD_INT 6
7991: PPUSH
7992: LD_INT 2
7994: PPUSH
7995: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7999: LD_INT 58
8001: PPUSH
8002: LD_INT 6
8004: PPUSH
8005: LD_INT 2
8007: PPUSH
8008: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8012: LD_INT 63
8014: PPUSH
8015: LD_INT 6
8017: PPUSH
8018: LD_INT 2
8020: PPUSH
8021: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
8025: LD_INT 64
8027: PPUSH
8028: LD_INT 6
8030: PPUSH
8031: LD_INT 2
8033: PPUSH
8034: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8038: LD_INT 51
8040: PPUSH
8041: LD_INT 5
8043: PPUSH
8044: LD_INT 2
8046: PPUSH
8047: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
8051: LD_INT 52
8053: PPUSH
8054: LD_INT 5
8056: PPUSH
8057: LD_INT 2
8059: PPUSH
8060: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
8064: LD_INT 66
8066: PPUSH
8067: LD_INT 2
8069: PPUSH
8070: LD_INT 2
8072: PPUSH
8073: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
8077: LD_INT 66
8079: PPUSH
8080: LD_INT 5
8082: PPUSH
8083: LD_INT 2
8085: PPUSH
8086: CALL_OW 322
// end ; end ;
8090: LD_VAR 0 1
8094: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
8095: LD_INT 0
8097: PPUSH
8098: PPUSH
8099: PPUSH
8100: PPUSH
8101: PPUSH
// case position of 1 :
8102: LD_VAR 0 1
8106: PUSH
8107: LD_INT 1
8109: DOUBLE
8110: EQUAL
8111: IFTRUE 8115
8113: GO 8126
8115: POP
// area := westConv ; 2 :
8116: LD_ADDR_VAR 0 6
8120: PUSH
8121: LD_INT 20
8123: ST_TO_ADDR
8124: GO 8165
8126: LD_INT 2
8128: DOUBLE
8129: EQUAL
8130: IFTRUE 8134
8132: GO 8145
8134: POP
// area := midConv ; 3 :
8135: LD_ADDR_VAR 0 6
8139: PUSH
8140: LD_INT 21
8142: ST_TO_ADDR
8143: GO 8165
8145: LD_INT 3
8147: DOUBLE
8148: EQUAL
8149: IFTRUE 8153
8151: GO 8164
8153: POP
// area := eastConv ; end ;
8154: LD_ADDR_VAR 0 6
8158: PUSH
8159: LD_INT 22
8161: ST_TO_ADDR
8162: GO 8165
8164: POP
// area := AreaToList ( area , 0 ) ;
8165: LD_ADDR_VAR 0 6
8169: PUSH
8170: LD_VAR 0 6
8174: PPUSH
8175: LD_INT 0
8177: PPUSH
8178: CALL_OW 517
8182: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
8183: LD_ADDR_VAR 0 3
8187: PUSH
8188: DOUBLE
8189: LD_INT 1
8191: DEC
8192: ST_TO_ADDR
8193: LD_VAR 0 6
8197: PUSH
8198: LD_INT 1
8200: ARRAY
8201: PUSH
8202: FOR_TO
8203: IFFALSE 8284
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
8205: LD_VAR 0 6
8209: PUSH
8210: LD_INT 1
8212: ARRAY
8213: PUSH
8214: LD_VAR 0 3
8218: ARRAY
8219: PPUSH
8220: LD_VAR 0 6
8224: PUSH
8225: LD_INT 2
8227: ARRAY
8228: PUSH
8229: LD_VAR 0 3
8233: ARRAY
8234: PPUSH
8235: LD_INT 1
8237: PPUSH
8238: LD_INT 1
8240: PPUSH
8241: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
8245: LD_VAR 0 6
8249: PUSH
8250: LD_INT 1
8252: ARRAY
8253: PUSH
8254: LD_VAR 0 3
8258: ARRAY
8259: PPUSH
8260: LD_VAR 0 6
8264: PUSH
8265: LD_INT 2
8267: ARRAY
8268: PUSH
8269: LD_VAR 0 3
8273: ARRAY
8274: PPUSH
8275: LD_INT 1
8277: PPUSH
8278: CALL_OW 331
// end ;
8282: GO 8202
8284: POP
8285: POP
// ruPossition = position ;
8286: LD_ADDR_EXP 40
8290: PUSH
8291: LD_VAR 0 1
8295: ST_TO_ADDR
// if position = 1 then
8296: LD_VAR 0 1
8300: PUSH
8301: LD_INT 1
8303: EQUAL
8304: IFFALSE 9052
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8306: LD_ADDR_VAR 0 4
8310: PUSH
8311: LD_INT 22
8313: PUSH
8314: LD_INT 3
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 25
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: EMPTY
8328: LIST
8329: LIST
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PPUSH
8335: CALL_OW 69
8339: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
8340: LD_ADDR_VAR 0 5
8344: PUSH
8345: LD_INT 0
8347: PUSH
8348: LD_INT 49
8350: PUSH
8351: LD_INT 74
8353: PUSH
8354: LD_INT 3
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 4
8365: PUSH
8366: LD_INT 73
8368: PUSH
8369: LD_INT 88
8371: PUSH
8372: LD_INT 5
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: PUSH
8381: LD_INT 4
8383: PUSH
8384: LD_INT 56
8386: PUSH
8387: LD_INT 62
8389: PUSH
8390: LD_INT 3
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: PUSH
8399: LD_INT 29
8401: PUSH
8402: LD_INT 43
8404: PUSH
8405: LD_INT 68
8407: PUSH
8408: LD_INT 2
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: LIST
8415: LIST
8416: PUSH
8417: LD_INT 30
8419: PUSH
8420: LD_INT 43
8422: PUSH
8423: LD_INT 79
8425: PUSH
8426: LD_INT 5
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: LIST
8433: LIST
8434: PUSH
8435: LD_INT 28
8437: PUSH
8438: LD_INT 60
8440: PUSH
8441: LD_INT 75
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: PUSH
8453: LD_INT 2
8455: PUSH
8456: LD_INT 50
8458: PUSH
8459: LD_INT 87
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 28
8473: PUSH
8474: LD_INT 45
8476: PUSH
8477: LD_INT 67
8479: PUSH
8480: LD_INT 2
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 17
8491: PUSH
8492: LD_INT 47
8494: PUSH
8495: LD_INT 84
8497: PUSH
8498: LD_INT 2
8500: PUSH
8501: EMPTY
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 18
8509: PUSH
8510: LD_INT 46
8512: PUSH
8513: LD_INT 87
8515: PUSH
8516: LD_INT 1
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: PUSH
8525: LD_INT 28
8527: PUSH
8528: LD_INT 41
8530: PUSH
8531: LD_INT 64
8533: PUSH
8534: LD_INT 5
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: PUSH
8543: LD_INT 32
8545: PUSH
8546: LD_INT 75
8548: PUSH
8549: LD_INT 76
8551: PUSH
8552: LD_INT 5
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 32
8563: PUSH
8564: LD_INT 77
8566: PUSH
8567: LD_INT 75
8569: PUSH
8570: LD_INT 5
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 32
8581: PUSH
8582: LD_INT 69
8584: PUSH
8585: LD_INT 68
8587: PUSH
8588: LD_INT 3
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: PUSH
8597: LD_INT 32
8599: PUSH
8600: LD_INT 59
8602: PUSH
8603: LD_INT 96
8605: PUSH
8606: LD_INT 5
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 32
8617: PUSH
8618: LD_INT 56
8620: PUSH
8621: LD_INT 96
8623: PUSH
8624: LD_INT 0
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: LIST
8631: LIST
8632: PUSH
8633: LD_INT 32
8635: PUSH
8636: LD_INT 51
8638: PUSH
8639: LD_INT 61
8641: PUSH
8642: LD_INT 3
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 32
8653: PUSH
8654: LD_INT 42
8656: PUSH
8657: LD_INT 60
8659: PUSH
8660: LD_INT 3
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: PUSH
8669: LD_INT 32
8671: PUSH
8672: LD_INT 36
8674: PUSH
8675: LD_INT 58
8677: PUSH
8678: LD_INT 3
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 32
8689: PUSH
8690: LD_INT 39
8692: PUSH
8693: LD_INT 59
8695: PUSH
8696: LD_INT 3
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 32
8707: PUSH
8708: LD_INT 61
8710: PUSH
8711: LD_INT 64
8713: PUSH
8714: LD_INT 3
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: LIST
8721: LIST
8722: PUSH
8723: LD_INT 33
8725: PUSH
8726: LD_INT 63
8728: PUSH
8729: LD_INT 90
8731: PUSH
8732: LD_INT 5
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: PUSH
8741: LD_INT 33
8743: PUSH
8744: LD_INT 64
8746: PUSH
8747: LD_INT 88
8749: PUSH
8750: LD_INT 5
8752: PUSH
8753: EMPTY
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: PUSH
8759: LD_INT 33
8761: PUSH
8762: LD_INT 72
8764: PUSH
8765: LD_INT 82
8767: PUSH
8768: LD_INT 5
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: PUSH
8777: LD_INT 6
8779: PUSH
8780: LD_INT 42
8782: PUSH
8783: LD_INT 74
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: LIST
8793: LIST
8794: PUSH
8795: LD_INT 6
8797: PUSH
8798: LD_INT 56
8800: PUSH
8801: LD_INT 77
8803: PUSH
8804: LD_INT 2
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 21
8815: PUSH
8816: LD_INT 54
8818: PUSH
8819: LD_INT 91
8821: PUSH
8822: LD_INT 5
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: PUSH
8831: LD_INT 16
8833: PUSH
8834: LD_INT 50
8836: PUSH
8837: LD_INT 83
8839: PUSH
8840: LD_INT 3
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 24
8851: PUSH
8852: LD_INT 50
8854: PUSH
8855: LD_INT 90
8857: PUSH
8858: LD_INT 0
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: PUSH
8867: EMPTY
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: LIST
8878: LIST
8879: LIST
8880: LIST
8881: LIST
8882: LIST
8883: LIST
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8898: LD_ADDR_VAR 0 3
8902: PUSH
8903: LD_INT 22
8905: PUSH
8906: LD_INT 3
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 3
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 2
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PPUSH
8934: CALL_OW 69
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8959
// AddComMoveXY ( i , 53 , 82 ) ;
8942: LD_VAR 0 3
8946: PPUSH
8947: LD_INT 53
8949: PPUSH
8950: LD_INT 82
8952: PPUSH
8953: CALL_OW 171
8957: GO 8939
8959: POP
8960: POP
// for i := 1 to buildingsTab do
8961: LD_ADDR_VAR 0 3
8965: PUSH
8966: DOUBLE
8967: LD_INT 1
8969: DEC
8970: ST_TO_ADDR
8971: LD_VAR 0 5
8975: PUSH
8976: FOR_TO
8977: IFFALSE 9050
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8979: LD_VAR 0 4
8983: PPUSH
8984: LD_VAR 0 5
8988: PUSH
8989: LD_VAR 0 3
8993: ARRAY
8994: PUSH
8995: LD_INT 1
8997: ARRAY
8998: PPUSH
8999: LD_VAR 0 5
9003: PUSH
9004: LD_VAR 0 3
9008: ARRAY
9009: PUSH
9010: LD_INT 2
9012: ARRAY
9013: PPUSH
9014: LD_VAR 0 5
9018: PUSH
9019: LD_VAR 0 3
9023: ARRAY
9024: PUSH
9025: LD_INT 3
9027: ARRAY
9028: PPUSH
9029: LD_VAR 0 5
9033: PUSH
9034: LD_VAR 0 3
9038: ARRAY
9039: PUSH
9040: LD_INT 4
9042: ARRAY
9043: PPUSH
9044: CALL_OW 205
9048: GO 8976
9050: POP
9051: POP
// end ; if position = 2 then
9052: LD_VAR 0 1
9056: PUSH
9057: LD_INT 2
9059: EQUAL
9060: IFFALSE 9675
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9062: LD_ADDR_VAR 0 4
9066: PUSH
9067: LD_INT 22
9069: PUSH
9070: LD_INT 3
9072: PUSH
9073: EMPTY
9074: LIST
9075: LIST
9076: PUSH
9077: LD_INT 25
9079: PUSH
9080: LD_INT 2
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 69
9095: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
9096: LD_ADDR_VAR 0 5
9100: PUSH
9101: LD_INT 0
9103: PUSH
9104: LD_INT 104
9106: PUSH
9107: LD_INT 110
9109: PUSH
9110: LD_INT 5
9112: PUSH
9113: EMPTY
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PUSH
9119: LD_INT 4
9121: PUSH
9122: LD_INT 98
9124: PUSH
9125: LD_INT 90
9127: PUSH
9128: LD_INT 3
9130: PUSH
9131: EMPTY
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: PUSH
9137: LD_INT 29
9139: PUSH
9140: LD_INT 103
9142: PUSH
9143: LD_INT 114
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: EMPTY
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: PUSH
9155: LD_INT 30
9157: PUSH
9158: LD_INT 99
9160: PUSH
9161: LD_INT 114
9163: PUSH
9164: LD_INT 3
9166: PUSH
9167: EMPTY
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: PUSH
9173: LD_INT 28
9175: PUSH
9176: LD_INT 100
9178: PUSH
9179: LD_INT 112
9181: PUSH
9182: LD_INT 1
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: LIST
9189: LIST
9190: PUSH
9191: LD_INT 2
9193: PUSH
9194: LD_INT 92
9196: PUSH
9197: LD_INT 101
9199: PUSH
9200: LD_INT 0
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: PUSH
9209: LD_INT 28
9211: PUSH
9212: LD_INT 97
9214: PUSH
9215: LD_INT 116
9217: PUSH
9218: LD_INT 5
9220: PUSH
9221: EMPTY
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 17
9229: PUSH
9230: LD_INT 96
9232: PUSH
9233: LD_INT 101
9235: PUSH
9236: LD_INT 4
9238: PUSH
9239: EMPTY
9240: LIST
9241: LIST
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 18
9247: PUSH
9248: LD_INT 88
9250: PUSH
9251: LD_INT 97
9253: PUSH
9254: LD_INT 2
9256: PUSH
9257: EMPTY
9258: LIST
9259: LIST
9260: LIST
9261: LIST
9262: PUSH
9263: LD_INT 28
9265: PUSH
9266: LD_INT 106
9268: PUSH
9269: LD_INT 92
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: PUSH
9281: LD_INT 32
9283: PUSH
9284: LD_INT 88
9286: PUSH
9287: LD_INT 89
9289: PUSH
9290: LD_INT 2
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 32
9301: PUSH
9302: LD_INT 86
9304: PUSH
9305: LD_INT 90
9307: PUSH
9308: LD_INT 2
9310: PUSH
9311: EMPTY
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: PUSH
9317: LD_INT 32
9319: PUSH
9320: LD_INT 85
9322: PUSH
9323: LD_INT 99
9325: PUSH
9326: LD_INT 2
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: LIST
9333: LIST
9334: PUSH
9335: LD_INT 32
9337: PUSH
9338: LD_INT 85
9340: PUSH
9341: LD_INT 107
9343: PUSH
9344: LD_INT 1
9346: PUSH
9347: EMPTY
9348: LIST
9349: LIST
9350: LIST
9351: LIST
9352: PUSH
9353: LD_INT 33
9355: PUSH
9356: LD_INT 105
9358: PUSH
9359: LD_INT 99
9361: PUSH
9362: LD_INT 1
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: PUSH
9371: LD_INT 33
9373: PUSH
9374: LD_INT 102
9376: PUSH
9377: LD_INT 92
9379: PUSH
9380: LD_INT 3
9382: PUSH
9383: EMPTY
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: PUSH
9389: LD_INT 33
9391: PUSH
9392: LD_INT 105
9394: PUSH
9395: LD_INT 92
9397: PUSH
9398: LD_INT 2
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 6
9409: PUSH
9410: LD_INT 92
9412: PUSH
9413: LD_INT 110
9415: PUSH
9416: LD_INT 0
9418: PUSH
9419: EMPTY
9420: LIST
9421: LIST
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 6
9427: PUSH
9428: LD_INT 103
9430: PUSH
9431: LD_INT 103
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: PUSH
9443: LD_INT 21
9445: PUSH
9446: LD_INT 89
9448: PUSH
9449: LD_INT 101
9451: PUSH
9452: LD_INT 1
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: PUSH
9461: LD_INT 16
9463: PUSH
9464: LD_INT 95
9466: PUSH
9467: LD_INT 104
9469: PUSH
9470: LD_INT 4
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: LIST
9477: LIST
9478: PUSH
9479: LD_INT 24
9481: PUSH
9482: LD_INT 92
9484: PUSH
9485: LD_INT 105
9487: PUSH
9488: LD_INT 0
9490: PUSH
9491: EMPTY
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: PUSH
9497: EMPTY
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9521: LD_ADDR_VAR 0 3
9525: PUSH
9526: LD_INT 22
9528: PUSH
9529: LD_INT 3
9531: PUSH
9532: EMPTY
9533: LIST
9534: LIST
9535: PUSH
9536: LD_INT 3
9538: PUSH
9539: LD_INT 25
9541: PUSH
9542: LD_INT 2
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PUSH
9553: EMPTY
9554: LIST
9555: LIST
9556: PPUSH
9557: CALL_OW 69
9561: PUSH
9562: FOR_IN
9563: IFFALSE 9582
// AddComMoveXY ( i , 96 , 99 ) ;
9565: LD_VAR 0 3
9569: PPUSH
9570: LD_INT 96
9572: PPUSH
9573: LD_INT 99
9575: PPUSH
9576: CALL_OW 171
9580: GO 9562
9582: POP
9583: POP
// for i := 1 to buildingsTab do
9584: LD_ADDR_VAR 0 3
9588: PUSH
9589: DOUBLE
9590: LD_INT 1
9592: DEC
9593: ST_TO_ADDR
9594: LD_VAR 0 5
9598: PUSH
9599: FOR_TO
9600: IFFALSE 9673
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9602: LD_VAR 0 4
9606: PPUSH
9607: LD_VAR 0 5
9611: PUSH
9612: LD_VAR 0 3
9616: ARRAY
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 5
9626: PUSH
9627: LD_VAR 0 3
9631: ARRAY
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: LD_VAR 0 5
9641: PUSH
9642: LD_VAR 0 3
9646: ARRAY
9647: PUSH
9648: LD_INT 3
9650: ARRAY
9651: PPUSH
9652: LD_VAR 0 5
9656: PUSH
9657: LD_VAR 0 3
9661: ARRAY
9662: PUSH
9663: LD_INT 4
9665: ARRAY
9666: PPUSH
9667: CALL_OW 205
9671: GO 9599
9673: POP
9674: POP
// end ; if position = 3 then
9675: LD_VAR 0 1
9679: PUSH
9680: LD_INT 3
9682: EQUAL
9683: IFFALSE 10469
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9685: LD_ADDR_VAR 0 4
9689: PUSH
9690: LD_INT 22
9692: PUSH
9693: LD_INT 3
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: PUSH
9700: LD_INT 25
9702: PUSH
9703: LD_INT 2
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PUSH
9710: EMPTY
9711: LIST
9712: LIST
9713: PPUSH
9714: CALL_OW 69
9718: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9719: LD_ADDR_VAR 0 5
9723: PUSH
9724: LD_INT 0
9726: PUSH
9727: LD_INT 151
9729: PUSH
9730: LD_INT 71
9732: PUSH
9733: LD_INT 4
9735: PUSH
9736: EMPTY
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: PUSH
9742: LD_INT 4
9744: PUSH
9745: LD_INT 145
9747: PUSH
9748: LD_INT 53
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: PUSH
9760: LD_INT 4
9762: PUSH
9763: LD_INT 172
9765: PUSH
9766: LD_INT 102
9768: PUSH
9769: LD_INT 5
9771: PUSH
9772: EMPTY
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: PUSH
9778: LD_INT 29
9780: PUSH
9781: LD_INT 152
9783: PUSH
9784: LD_INT 85
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: LD_INT 30
9798: PUSH
9799: LD_INT 156
9801: PUSH
9802: LD_INT 92
9804: PUSH
9805: LD_INT 3
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: PUSH
9814: LD_INT 28
9816: PUSH
9817: LD_INT 151
9819: PUSH
9820: LD_INT 66
9822: PUSH
9823: LD_INT 4
9825: PUSH
9826: EMPTY
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: PUSH
9832: LD_INT 2
9834: PUSH
9835: LD_INT 163
9837: PUSH
9838: LD_INT 95
9840: PUSH
9841: LD_INT 5
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: PUSH
9850: LD_INT 28
9852: PUSH
9853: LD_INT 149
9855: PUSH
9856: LD_INT 63
9858: PUSH
9859: LD_INT 4
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 17
9870: PUSH
9871: LD_INT 167
9873: PUSH
9874: LD_INT 99
9876: PUSH
9877: LD_INT 5
9879: PUSH
9880: EMPTY
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 18
9888: PUSH
9889: LD_INT 163
9891: PUSH
9892: LD_INT 98
9894: PUSH
9895: LD_INT 0
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 28
9906: PUSH
9907: LD_INT 154
9909: PUSH
9910: LD_INT 70
9912: PUSH
9913: LD_INT 4
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 32
9924: PUSH
9925: LD_INT 155
9927: PUSH
9928: LD_INT 62
9930: PUSH
9931: LD_INT 4
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: LD_INT 32
9942: PUSH
9943: LD_INT 161
9945: PUSH
9946: LD_INT 69
9948: PUSH
9949: LD_INT 4
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: LD_INT 32
9960: PUSH
9961: LD_INT 168
9963: PUSH
9964: LD_INT 78
9966: PUSH
9967: LD_INT 4
9969: PUSH
9970: EMPTY
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: PUSH
9976: LD_INT 32
9978: PUSH
9979: LD_INT 163
9981: PUSH
9982: LD_INT 80
9984: PUSH
9985: LD_INT 5
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: PUSH
9994: LD_INT 32
9996: PUSH
9997: LD_INT 136
9999: PUSH
10000: LD_INT 73
10002: PUSH
10003: LD_INT 0
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: PUSH
10012: LD_INT 32
10014: PUSH
10015: LD_INT 157
10017: PUSH
10018: LD_INT 98
10020: PUSH
10021: LD_INT 0
10023: PUSH
10024: EMPTY
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: PUSH
10030: LD_INT 32
10032: PUSH
10033: LD_INT 150
10035: PUSH
10036: LD_INT 87
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: PUSH
10048: LD_INT 33
10050: PUSH
10051: LD_INT 171
10053: PUSH
10054: LD_INT 97
10056: PUSH
10057: LD_INT 4
10059: PUSH
10060: EMPTY
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 33
10068: PUSH
10069: LD_INT 168
10071: PUSH
10072: LD_INT 92
10074: PUSH
10075: LD_INT 4
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: PUSH
10084: LD_INT 33
10086: PUSH
10087: LD_INT 166
10089: PUSH
10090: LD_INT 80
10092: PUSH
10093: LD_INT 5
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 33
10104: PUSH
10105: LD_INT 141
10107: PUSH
10108: LD_INT 54
10110: PUSH
10111: LD_INT 2
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 33
10122: PUSH
10123: LD_INT 133
10125: PUSH
10126: LD_INT 57
10128: PUSH
10129: LD_INT 2
10131: PUSH
10132: EMPTY
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: PUSH
10138: LD_INT 33
10140: PUSH
10141: LD_INT 132
10143: PUSH
10144: LD_INT 61
10146: PUSH
10147: LD_INT 2
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: PUSH
10156: LD_INT 33
10158: PUSH
10159: LD_INT 150
10161: PUSH
10162: LD_INT 82
10164: PUSH
10165: LD_INT 0
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: PUSH
10174: LD_INT 33
10176: PUSH
10177: LD_INT 132
10179: PUSH
10180: LD_INT 72
10182: PUSH
10183: LD_INT 0
10185: PUSH
10186: EMPTY
10187: LIST
10188: LIST
10189: LIST
10190: LIST
10191: PUSH
10192: LD_INT 6
10194: PUSH
10195: LD_INT 146
10197: PUSH
10198: LD_INT 64
10200: PUSH
10201: LD_INT 4
10203: PUSH
10204: EMPTY
10205: LIST
10206: LIST
10207: LIST
10208: LIST
10209: PUSH
10210: LD_INT 6
10212: PUSH
10213: LD_INT 159
10215: PUSH
10216: LD_INT 85
10218: PUSH
10219: LD_INT 4
10221: PUSH
10222: EMPTY
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: PUSH
10228: LD_INT 21
10230: PUSH
10231: LD_INT 163
10233: PUSH
10234: LD_INT 91
10236: PUSH
10237: LD_INT 3
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: PUSH
10246: LD_INT 16
10248: PUSH
10249: LD_INT 166
10251: PUSH
10252: LD_INT 95
10254: PUSH
10255: LD_INT 4
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: PUSH
10264: LD_INT 24
10266: PUSH
10267: LD_INT 159
10269: PUSH
10270: LD_INT 95
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: PUSH
10282: EMPTY
10283: LIST
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10315: LD_ADDR_VAR 0 3
10319: PUSH
10320: LD_INT 22
10322: PUSH
10323: LD_INT 3
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 3
10332: PUSH
10333: LD_INT 25
10335: PUSH
10336: LD_INT 2
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PUSH
10356: FOR_IN
10357: IFFALSE 10376
// AddComMoveXY ( i , 141 , 65 ) ;
10359: LD_VAR 0 3
10363: PPUSH
10364: LD_INT 141
10366: PPUSH
10367: LD_INT 65
10369: PPUSH
10370: CALL_OW 171
10374: GO 10356
10376: POP
10377: POP
// for i := 1 to buildingsTab do
10378: LD_ADDR_VAR 0 3
10382: PUSH
10383: DOUBLE
10384: LD_INT 1
10386: DEC
10387: ST_TO_ADDR
10388: LD_VAR 0 5
10392: PUSH
10393: FOR_TO
10394: IFFALSE 10467
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10396: LD_VAR 0 4
10400: PPUSH
10401: LD_VAR 0 5
10405: PUSH
10406: LD_VAR 0 3
10410: ARRAY
10411: PUSH
10412: LD_INT 1
10414: ARRAY
10415: PPUSH
10416: LD_VAR 0 5
10420: PUSH
10421: LD_VAR 0 3
10425: ARRAY
10426: PUSH
10427: LD_INT 2
10429: ARRAY
10430: PPUSH
10431: LD_VAR 0 5
10435: PUSH
10436: LD_VAR 0 3
10440: ARRAY
10441: PUSH
10442: LD_INT 3
10444: ARRAY
10445: PPUSH
10446: LD_VAR 0 5
10450: PUSH
10451: LD_VAR 0 3
10455: ARRAY
10456: PUSH
10457: LD_INT 4
10459: ARRAY
10460: PPUSH
10461: CALL_OW 205
10465: GO 10393
10467: POP
10468: POP
// end ; end ;
10469: LD_VAR 0 2
10473: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
10474: LD_INT 0
10476: PPUSH
10477: PPUSH
10478: PPUSH
10479: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
10480: LD_ADDR_VAR 0 3
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_INT 2
10490: PUSH
10491: EMPTY
10492: LIST
10493: LIST
10494: PUSH
10495: LD_INT 25
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PPUSH
10509: CALL_OW 69
10513: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
10514: LD_VAR 0 3
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: LD_INT 71
10524: PPUSH
10525: LD_INT 15
10527: PPUSH
10528: LD_INT 3
10530: PPUSH
10531: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
10535: LD_ADDR_VAR 0 4
10539: PUSH
10540: LD_INT 6
10542: PUSH
10543: LD_INT 77
10545: PUSH
10546: LD_INT 18
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 4
10560: PUSH
10561: LD_INT 77
10563: PUSH
10564: LD_INT 26
10566: PUSH
10567: LD_INT 0
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 31
10578: PUSH
10579: LD_INT 82
10581: PUSH
10582: LD_INT 28
10584: PUSH
10585: LD_INT 0
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 31
10596: PUSH
10597: LD_INT 84
10599: PUSH
10600: LD_INT 21
10602: PUSH
10603: LD_INT 3
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 31
10614: PUSH
10615: LD_INT 66
10617: PUSH
10618: LD_INT 14
10620: PUSH
10621: LD_INT 2
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 27
10632: PUSH
10633: LD_INT 67
10635: PUSH
10636: LD_INT 18
10638: PUSH
10639: LD_INT 5
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 27
10650: PUSH
10651: LD_INT 69
10653: PUSH
10654: LD_INT 23
10656: PUSH
10657: LD_INT 2
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: ST_TO_ADDR
// for i := 1 to buildingsTab do
10675: LD_ADDR_VAR 0 2
10679: PUSH
10680: DOUBLE
10681: LD_INT 1
10683: DEC
10684: ST_TO_ADDR
10685: LD_VAR 0 4
10689: PUSH
10690: FOR_TO
10691: IFFALSE 10764
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10693: LD_VAR 0 3
10697: PPUSH
10698: LD_VAR 0 4
10702: PUSH
10703: LD_VAR 0 2
10707: ARRAY
10708: PUSH
10709: LD_INT 1
10711: ARRAY
10712: PPUSH
10713: LD_VAR 0 4
10717: PUSH
10718: LD_VAR 0 2
10722: ARRAY
10723: PUSH
10724: LD_INT 2
10726: ARRAY
10727: PPUSH
10728: LD_VAR 0 4
10732: PUSH
10733: LD_VAR 0 2
10737: ARRAY
10738: PUSH
10739: LD_INT 3
10741: ARRAY
10742: PPUSH
10743: LD_VAR 0 4
10747: PUSH
10748: LD_VAR 0 2
10752: ARRAY
10753: PUSH
10754: LD_INT 4
10756: ARRAY
10757: PPUSH
10758: CALL_OW 205
10762: GO 10690
10764: POP
10765: POP
// end ;
10766: LD_VAR 0 1
10770: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10771: LD_INT 0
10773: PPUSH
10774: PPUSH
10775: PPUSH
10776: PPUSH
10777: PPUSH
10778: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10779: LD_ADDR_VAR 0 7
10783: PUSH
10784: LD_INT 22
10786: PUSH
10787: LD_VAR 0 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 9
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PPUSH
10810: CALL_OW 69
10814: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10815: LD_ADDR_VAR 0 8
10819: PUSH
10820: LD_INT 22
10822: PUSH
10823: LD_VAR 0 2
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 3
10834: PUSH
10835: LD_INT 21
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: EMPTY
10846: LIST
10847: LIST
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: PPUSH
10853: CALL_OW 69
10857: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10858: LD_ADDR_VAR 0 5
10862: PUSH
10863: LD_INT 1
10865: PPUSH
10866: LD_INT 3
10868: PPUSH
10869: CALL_OW 12
10873: ST_TO_ADDR
// for i = 1 to list do
10874: LD_ADDR_VAR 0 6
10878: PUSH
10879: DOUBLE
10880: LD_INT 1
10882: DEC
10883: ST_TO_ADDR
10884: LD_VAR 0 7
10888: PUSH
10889: FOR_TO
10890: IFFALSE 11860
// for ta in filter do
10892: LD_ADDR_VAR 0 4
10896: PUSH
10897: LD_VAR 0 8
10901: PUSH
10902: FOR_IN
10903: IFFALSE 11856
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
10905: LD_VAR 0 7
10909: PUSH
10910: LD_VAR 0 6
10914: ARRAY
10915: PPUSH
10916: LD_VAR 0 4
10920: PPUSH
10921: CALL_OW 296
10925: PUSH
10926: LD_INT 12
10928: LESSEQUAL
10929: IFFALSE 11854
// begin case c of 1 :
10931: LD_VAR 0 5
10935: PUSH
10936: LD_INT 1
10938: DOUBLE
10939: EQUAL
10940: IFTRUE 10944
10942: GO 11376
10944: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
10945: LD_VAR 0 7
10949: PUSH
10950: LD_VAR 0 6
10954: ARRAY
10955: PPUSH
10956: LD_VAR 0 4
10960: PPUSH
10961: CALL_OW 250
10965: PPUSH
10966: LD_VAR 0 4
10970: PPUSH
10971: CALL_OW 251
10975: PPUSH
10976: CALL_OW 154
// if eventVar2 = 0 then
10980: LD_EXP 58
10984: PUSH
10985: LD_INT 0
10987: EQUAL
10988: IFFALSE 11374
// begin eventVar2 = 1 ;
10990: LD_ADDR_EXP 58
10994: PUSH
10995: LD_INT 1
10997: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10998: LD_INT 245
11000: PPUSH
11001: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11005: LD_VAR 0 4
11009: PPUSH
11010: CALL_OW 250
11014: PPUSH
11015: LD_VAR 0 4
11019: PPUSH
11020: CALL_OW 251
11024: PPUSH
11025: CALL_OW 84
// DialogueOn ;
11029: CALL_OW 6
// if IsOK ( Cyrus ) then
11033: LD_EXP 5
11037: PPUSH
11038: CALL_OW 302
11042: IFFALSE 11058
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11044: LD_EXP 5
11048: PPUSH
11049: LD_STRING D9a-Cyrus-1
11051: PPUSH
11052: CALL_OW 88
// end else
11056: GO 11180
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11058: LD_INT 22
11060: PUSH
11061: LD_INT 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 26
11070: PUSH
11071: LD_INT 1
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 2
11080: PUSH
11081: LD_INT 25
11083: PUSH
11084: LD_INT 1
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 25
11093: PUSH
11094: LD_INT 2
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 25
11103: PUSH
11104: LD_INT 3
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 25
11113: PUSH
11114: LD_INT 4
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 25
11123: PUSH
11124: LD_INT 5
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: PUSH
11139: EMPTY
11140: LIST
11141: LIST
11142: LIST
11143: PPUSH
11144: CALL_OW 69
11148: PUSH
11149: LD_EXP 1
11153: PUSH
11154: LD_EXP 14
11158: PUSH
11159: LD_EXP 5
11163: PUSH
11164: EMPTY
11165: LIST
11166: LIST
11167: LIST
11168: DIFF
11169: PPUSH
11170: LD_STRING D9a-Sol1-1
11172: PPUSH
11173: LD_STRING D9a-Sol1-1
11175: PPUSH
11176: CALL 7568 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11180: LD_INT 22
11182: PUSH
11183: LD_INT 1
11185: PUSH
11186: EMPTY
11187: LIST
11188: LIST
11189: PUSH
11190: LD_INT 26
11192: PUSH
11193: LD_INT 1
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: LD_INT 25
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 25
11215: PUSH
11216: LD_INT 2
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 25
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 25
11235: PUSH
11236: LD_INT 4
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: LD_INT 25
11245: PUSH
11246: LD_INT 5
11248: PUSH
11249: EMPTY
11250: LIST
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: PPUSH
11266: CALL_OW 69
11270: PUSH
11271: LD_EXP 1
11275: PUSH
11276: LD_EXP 14
11280: PUSH
11281: LD_EXP 5
11285: PUSH
11286: EMPTY
11287: LIST
11288: LIST
11289: LIST
11290: DIFF
11291: PPUSH
11292: LD_STRING D9b-Sol1-1
11294: PPUSH
11295: LD_STRING D9b-Sol1-1
11297: PPUSH
11298: CALL 7568 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11302: LD_STRING 09_arInfo
11304: PPUSH
11305: LD_INT 0
11307: PPUSH
11308: CALL_OW 30
11312: PUSH
11313: LD_INT 1
11315: EQUAL
11316: IFFALSE 11330
// Say ( JMM , D9a-JMM-1 ) ;
11318: LD_EXP 1
11322: PPUSH
11323: LD_STRING D9a-JMM-1
11325: PPUSH
11326: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11330: LD_EXP 1
11334: PPUSH
11335: LD_STRING D9c-JMM-1
11337: PPUSH
11338: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11342: LD_INT 12
11344: PPUSH
11345: LD_INT 1
11347: PPUSH
11348: CALL_OW 321
11352: PUSH
11353: LD_INT 2
11355: EQUAL
11356: IFFALSE 11370
// Say ( JMM , D9c-JMM-1a ) ;
11358: LD_EXP 1
11362: PPUSH
11363: LD_STRING D9c-JMM-1a
11365: PPUSH
11366: CALL_OW 88
// DialogueOff ;
11370: CALL_OW 7
// end ; end ; 2 :
11374: GO 11854
11376: LD_INT 2
11378: DOUBLE
11379: EQUAL
11380: IFTRUE 11384
11382: GO 11842
11384: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
11385: LD_VAR 0 7
11389: PUSH
11390: LD_VAR 0 6
11394: ARRAY
11395: PPUSH
11396: LD_VAR 0 4
11400: PPUSH
11401: CALL_OW 250
11405: PUSH
11406: LD_INT 1
11408: NEG
11409: PPUSH
11410: LD_INT 1
11412: PPUSH
11413: CALL_OW 12
11417: PLUS
11418: PPUSH
11419: LD_VAR 0 4
11423: PPUSH
11424: CALL_OW 251
11428: PUSH
11429: LD_INT 1
11431: NEG
11432: PPUSH
11433: LD_INT 1
11435: PPUSH
11436: CALL_OW 12
11440: PLUS
11441: PPUSH
11442: CALL_OW 153
// if eventVar2 = 0 then
11446: LD_EXP 58
11450: PUSH
11451: LD_INT 0
11453: EQUAL
11454: IFFALSE 11840
// begin eventVar2 = 1 ;
11456: LD_ADDR_EXP 58
11460: PUSH
11461: LD_INT 1
11463: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11464: LD_INT 245
11466: PPUSH
11467: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11471: LD_VAR 0 4
11475: PPUSH
11476: CALL_OW 250
11480: PPUSH
11481: LD_VAR 0 4
11485: PPUSH
11486: CALL_OW 251
11490: PPUSH
11491: CALL_OW 84
// DialogueOn ;
11495: CALL_OW 6
// if IsOK ( Cyrus ) then
11499: LD_EXP 5
11503: PPUSH
11504: CALL_OW 302
11508: IFFALSE 11524
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11510: LD_EXP 5
11514: PPUSH
11515: LD_STRING D9a-Cyrus-1
11517: PPUSH
11518: CALL_OW 88
// end else
11522: GO 11646
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11524: LD_INT 22
11526: PUSH
11527: LD_INT 1
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 26
11536: PUSH
11537: LD_INT 1
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 2
11546: PUSH
11547: LD_INT 25
11549: PUSH
11550: LD_INT 1
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 25
11559: PUSH
11560: LD_INT 2
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 25
11569: PUSH
11570: LD_INT 3
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 25
11579: PUSH
11580: LD_INT 4
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 25
11589: PUSH
11590: LD_INT 5
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: EMPTY
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: EMPTY
11606: LIST
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 69
11614: PUSH
11615: LD_EXP 1
11619: PUSH
11620: LD_EXP 14
11624: PUSH
11625: LD_EXP 5
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: DIFF
11635: PPUSH
11636: LD_STRING D9a-Sol1-1
11638: PPUSH
11639: LD_STRING D9a-Sol1-1
11641: PPUSH
11642: CALL 7568 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11646: LD_INT 22
11648: PUSH
11649: LD_INT 1
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PUSH
11656: LD_INT 26
11658: PUSH
11659: LD_INT 1
11661: PUSH
11662: EMPTY
11663: LIST
11664: LIST
11665: PUSH
11666: LD_INT 2
11668: PUSH
11669: LD_INT 25
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 25
11681: PUSH
11682: LD_INT 2
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 25
11691: PUSH
11692: LD_INT 3
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 25
11701: PUSH
11702: LD_INT 4
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 25
11711: PUSH
11712: LD_INT 5
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: PUSH
11719: EMPTY
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PUSH
11727: EMPTY
11728: LIST
11729: LIST
11730: LIST
11731: PPUSH
11732: CALL_OW 69
11736: PUSH
11737: LD_EXP 1
11741: PUSH
11742: LD_EXP 14
11746: PUSH
11747: LD_EXP 5
11751: PUSH
11752: EMPTY
11753: LIST
11754: LIST
11755: LIST
11756: DIFF
11757: PPUSH
11758: LD_STRING D9b-Sol1-1
11760: PPUSH
11761: LD_STRING D9b-Sol1-1
11763: PPUSH
11764: CALL 7568 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11768: LD_STRING 09_arInfo
11770: PPUSH
11771: LD_INT 0
11773: PPUSH
11774: CALL_OW 30
11778: PUSH
11779: LD_INT 1
11781: EQUAL
11782: IFFALSE 11796
// Say ( JMM , D9a-JMM-1 ) ;
11784: LD_EXP 1
11788: PPUSH
11789: LD_STRING D9a-JMM-1
11791: PPUSH
11792: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11796: LD_EXP 1
11800: PPUSH
11801: LD_STRING D9c-JMM-1
11803: PPUSH
11804: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11808: LD_INT 12
11810: PPUSH
11811: LD_INT 1
11813: PPUSH
11814: CALL_OW 321
11818: PUSH
11819: LD_INT 2
11821: EQUAL
11822: IFFALSE 11836
// Say ( JMM , D9c-JMM-1a ) ;
11824: LD_EXP 1
11828: PPUSH
11829: LD_STRING D9c-JMM-1a
11831: PPUSH
11832: CALL_OW 88
// DialogueOff ;
11836: CALL_OW 7
// end ; end ; 3 :
11840: GO 11854
11842: LD_INT 3
11844: DOUBLE
11845: EQUAL
11846: IFTRUE 11850
11848: GO 11853
11850: POP
// ; end ;
11851: GO 11854
11853: POP
// end ; end ;
11854: GO 10902
11856: POP
11857: POP
11858: GO 10889
11860: POP
11861: POP
// end ;
11862: LD_VAR 0 3
11866: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11867: LD_INT 0
11869: PPUSH
11870: PPUSH
11871: PPUSH
11872: PPUSH
// for i = 1 to 72 do
11873: LD_ADDR_VAR 0 5
11877: PUSH
11878: DOUBLE
11879: LD_INT 1
11881: DEC
11882: ST_TO_ADDR
11883: LD_INT 72
11885: PUSH
11886: FOR_TO
11887: IFFALSE 11945
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11889: LD_VAR 0 5
11893: PPUSH
11894: LD_VAR 0 1
11898: PPUSH
11899: CALL_OW 321
11903: PUSH
11904: LD_INT 1
11906: EQUAL
11907: PUSH
11908: LD_VAR 0 5
11912: PPUSH
11913: LD_VAR 0 3
11917: PPUSH
11918: CALL_OW 482
11922: PUSH
11923: LD_INT 1
11925: EQUAL
11926: AND
11927: IFFALSE 11943
// AddComResearch ( lab , i ) ;
11929: LD_VAR 0 2
11933: PPUSH
11934: LD_VAR 0 5
11938: PPUSH
11939: CALL_OW 184
11943: GO 11886
11945: POP
11946: POP
// end ;
11947: LD_VAR 0 4
11951: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11952: LD_INT 0
11954: PPUSH
11955: PPUSH
11956: PPUSH
11957: PPUSH
11958: PPUSH
11959: PPUSH
11960: PPUSH
11961: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11962: LD_ADDR_VAR 0 6
11966: PUSH
11967: LD_INT 22
11969: PUSH
11970: LD_VAR 0 1
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 56
11981: PUSH
11982: EMPTY
11983: LIST
11984: PUSH
11985: LD_INT 24
11987: PUSH
11988: LD_INT 700
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: PUSH
11995: LD_INT 2
11997: PUSH
11998: LD_INT 25
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 25
12010: PUSH
12011: LD_INT 9
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PPUSH
12029: CALL_OW 69
12033: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
12034: LD_ADDR_VAR 0 7
12038: PUSH
12039: LD_INT 22
12041: PUSH
12042: LD_VAR 0 1
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: PUSH
12051: LD_INT 30
12053: PUSH
12054: LD_INT 32
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 58
12063: PUSH
12064: EMPTY
12065: LIST
12066: PUSH
12067: LD_INT 24
12069: PUSH
12070: LD_INT 251
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PPUSH
12083: CALL_OW 69
12087: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
12088: LD_ADDR_VAR 0 9
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_VAR 0 1
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: PUSH
12105: LD_INT 2
12107: PUSH
12108: LD_INT 30
12110: PUSH
12111: LD_INT 4
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 30
12120: PUSH
12121: LD_INT 5
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 24
12135: PUSH
12136: LD_INT 251
12138: PUSH
12139: EMPTY
12140: LIST
12141: LIST
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 69
12152: ST_TO_ADDR
// if barrackList > 0 then
12153: LD_VAR 0 9
12157: PUSH
12158: LD_INT 0
12160: GREATER
12161: IFFALSE 12296
// begin if turretList = 0 then
12163: LD_VAR 0 7
12167: PUSH
12168: LD_INT 0
12170: EQUAL
12171: IFFALSE 12220
// begin for i in soldiers_list do
12173: LD_ADDR_VAR 0 4
12177: PUSH
12178: LD_VAR 0 6
12182: PUSH
12183: FOR_IN
12184: IFFALSE 12216
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
12186: LD_VAR 0 4
12190: PPUSH
12191: LD_VAR 0 9
12195: PUSH
12196: LD_INT 1
12198: PPUSH
12199: LD_VAR 0 9
12203: PPUSH
12204: CALL_OW 12
12208: ARRAY
12209: PPUSH
12210: CALL_OW 120
12214: GO 12183
12216: POP
12217: POP
// end else
12218: GO 12296
// begin for i in barrackList do
12220: LD_ADDR_VAR 0 4
12224: PUSH
12225: LD_VAR 0 9
12229: PUSH
12230: FOR_IN
12231: IFFALSE 12294
// begin insideUnits = UnitsInside ( i ) ;
12233: LD_ADDR_VAR 0 10
12237: PUSH
12238: LD_VAR 0 4
12242: PPUSH
12243: CALL_OW 313
12247: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
12248: LD_VAR 0 10
12252: PUSH
12253: LD_INT 1
12255: ARRAY
12256: PPUSH
12257: LD_VAR 0 7
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
12270: LD_VAR 0 6
12274: PUSH
12275: LD_INT 1
12277: ARRAY
12278: PPUSH
12279: LD_VAR 0 7
12283: PUSH
12284: LD_INT 1
12286: ARRAY
12287: PPUSH
12288: CALL_OW 120
// end ;
12292: GO 12230
12294: POP
12295: POP
// end ; end ; end ;
12296: LD_VAR 0 3
12300: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12301: LD_INT 0
12303: PPUSH
12304: PPUSH
12305: PPUSH
12306: PPUSH
12307: PPUSH
12308: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12309: LD_ADDR_VAR 0 6
12313: PUSH
12314: LD_VAR 0 2
12318: PPUSH
12319: CALL_OW 313
12323: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
12324: LD_ADDR_VAR 0 7
12328: PUSH
12329: LD_INT 22
12331: PUSH
12332: LD_VAR 0 1
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 2
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 24
12353: PUSH
12354: LD_INT 1000
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: PPUSH
12366: CALL_OW 69
12370: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12371: LD_ADDR_VAR 0 4
12375: PUSH
12376: LD_INT 22
12378: PUSH
12379: LD_VAR 0 1
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 21
12390: PUSH
12391: LD_INT 3
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 3
12400: PUSH
12401: LD_INT 24
12403: PUSH
12404: LD_INT 1000
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12428: LD_VAR 0 4
12432: NOT
12433: PUSH
12434: LD_VAR 0 7
12438: NOT
12439: AND
12440: IFFALSE 12444
// exit ;
12442: GO 12603
// if buildings_list > 0 and engineerOkInside > 0 then
12444: LD_VAR 0 4
12448: PUSH
12449: LD_INT 0
12451: GREATER
12452: PUSH
12453: LD_VAR 0 6
12457: PUSH
12458: LD_INT 0
12460: GREATER
12461: AND
12462: IFFALSE 12490
// for i in engineerOkInside do
12464: LD_ADDR_VAR 0 5
12468: PUSH
12469: LD_VAR 0 6
12473: PUSH
12474: FOR_IN
12475: IFFALSE 12488
// ComExitBuilding ( i ) ;
12477: LD_VAR 0 5
12481: PPUSH
12482: CALL_OW 122
12486: GO 12474
12488: POP
12489: POP
// if engineerOkOutside > 0 then
12490: LD_VAR 0 7
12494: PUSH
12495: LD_INT 0
12497: GREATER
12498: IFFALSE 12552
// begin for i in engineerOkOutside do
12500: LD_ADDR_VAR 0 5
12504: PUSH
12505: LD_VAR 0 7
12509: PUSH
12510: FOR_IN
12511: IFFALSE 12550
// for j in buildings_list do
12513: LD_ADDR_VAR 0 8
12517: PUSH
12518: LD_VAR 0 4
12522: PUSH
12523: FOR_IN
12524: IFFALSE 12546
// ComRepairBuilding ( i , j [ 1 ] ) ;
12526: LD_VAR 0 5
12530: PPUSH
12531: LD_VAR 0 8
12535: PUSH
12536: LD_INT 1
12538: ARRAY
12539: PPUSH
12540: CALL_OW 130
12544: GO 12523
12546: POP
12547: POP
12548: GO 12510
12550: POP
12551: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12552: LD_VAR 0 4
12556: PUSH
12557: LD_INT 0
12559: EQUAL
12560: PUSH
12561: LD_VAR 0 7
12565: PUSH
12566: LD_INT 0
12568: GREATER
12569: AND
12570: IFFALSE 12603
// for i in engineerOkOutside do
12572: LD_ADDR_VAR 0 5
12576: PUSH
12577: LD_VAR 0 7
12581: PUSH
12582: FOR_IN
12583: IFFALSE 12601
// ComEnterUnit ( i , building ) ;
12585: LD_VAR 0 5
12589: PPUSH
12590: LD_VAR 0 2
12594: PPUSH
12595: CALL_OW 120
12599: GO 12582
12601: POP
12602: POP
// end ;
12603: LD_VAR 0 3
12607: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
12608: LD_INT 0
12610: PPUSH
12611: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
12612: LD_INT 22
12614: PUSH
12615: LD_VAR 0 1
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 25
12626: PUSH
12627: LD_INT 2
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PPUSH
12638: CALL_OW 69
12642: PUSH
12643: LD_INT 0
12645: GREATER
12646: PUSH
12647: LD_INT 22
12649: PUSH
12650: LD_VAR 0 1
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: PUSH
12659: LD_INT 21
12661: PUSH
12662: LD_INT 3
12664: PUSH
12665: EMPTY
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 3
12671: PUSH
12672: LD_INT 24
12674: PUSH
12675: LD_INT 1000
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: EMPTY
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: PPUSH
12691: CALL_OW 69
12695: PUSH
12696: LD_INT 0
12698: EQUAL
12699: AND
12700: PUSH
12701: LD_VAR 0 2
12705: PUSH
12706: LD_INT 0
12708: GREATER
12709: AND
12710: IFFALSE 12809
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12712: LD_ADDR_VAR 0 4
12716: PUSH
12717: LD_INT 22
12719: PUSH
12720: LD_VAR 0 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: LD_INT 25
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: PPUSH
12743: CALL_OW 69
12747: PUSH
12748: FOR_IN
12749: IFFALSE 12807
// begin AddComExitBuilding ( i ) ;
12751: LD_VAR 0 4
12755: PPUSH
12756: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12760: LD_VAR 0 4
12764: PPUSH
12765: LD_VAR 0 2
12769: PUSH
12770: LD_INT 1
12772: ARRAY
12773: PPUSH
12774: LD_VAR 0 2
12778: PUSH
12779: LD_INT 2
12781: ARRAY
12782: PPUSH
12783: LD_VAR 0 2
12787: PUSH
12788: LD_INT 3
12790: ARRAY
12791: PPUSH
12792: LD_VAR 0 2
12796: PUSH
12797: LD_INT 4
12799: ARRAY
12800: PPUSH
12801: CALL_OW 205
// end ;
12805: GO 12748
12807: POP
12808: POP
// end ; end ;
12809: LD_VAR 0 3
12813: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12814: LD_INT 0
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
12821: PPUSH
12822: PPUSH
12823: PPUSH
12824: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12825: LD_ADDR_VAR 0 6
12829: PUSH
12830: LD_INT 22
12832: PUSH
12833: LD_VAR 0 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 25
12844: PUSH
12845: LD_INT 4
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 24
12854: PUSH
12855: LD_INT 251
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: LIST
12866: PPUSH
12867: CALL_OW 69
12871: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12872: LD_ADDR_VAR 0 7
12876: PUSH
12877: LD_VAR 0 3
12881: PPUSH
12882: LD_INT 22
12884: PUSH
12885: LD_VAR 0 1
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: PUSH
12894: LD_INT 25
12896: PUSH
12897: LD_INT 4
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: PUSH
12904: LD_INT 50
12906: PUSH
12907: EMPTY
12908: LIST
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: PPUSH
12915: CALL_OW 70
12919: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12920: LD_ADDR_VAR 0 10
12924: PUSH
12925: LD_VAR 0 3
12929: PPUSH
12930: LD_INT 22
12932: PUSH
12933: LD_VAR 0 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 21
12944: PUSH
12945: LD_INT 1
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: PUSH
12952: LD_INT 3
12954: PUSH
12955: LD_INT 25
12957: PUSH
12958: LD_INT 3
12960: PUSH
12961: EMPTY
12962: LIST
12963: LIST
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: PUSH
12969: LD_INT 3
12971: PUSH
12972: LD_INT 24
12974: PUSH
12975: LD_INT 750
12977: PUSH
12978: EMPTY
12979: LIST
12980: LIST
12981: PUSH
12982: EMPTY
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: PPUSH
12992: CALL_OW 70
12996: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12997: LD_ADDR_VAR 0 11
13001: PUSH
13002: LD_VAR 0 2
13006: PPUSH
13007: LD_INT 22
13009: PUSH
13010: LD_VAR 0 1
13014: PUSH
13015: EMPTY
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 21
13021: PUSH
13022: LD_INT 1
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PUSH
13029: LD_INT 3
13031: PUSH
13032: LD_INT 25
13034: PUSH
13035: LD_INT 3
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 3
13048: PUSH
13049: LD_INT 24
13051: PUSH
13052: LD_INT 1000
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: LIST
13068: PPUSH
13069: CALL_OW 70
13073: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
13074: LD_VAR 0 10
13078: NOT
13079: PUSH
13080: LD_VAR 0 7
13084: NOT
13085: AND
13086: PUSH
13087: LD_VAR 0 11
13091: NOT
13092: AND
13093: IFFALSE 13097
// exit ;
13095: GO 13357
// if damageUnits > 0 and sci_list > 0 then
13097: LD_VAR 0 10
13101: PUSH
13102: LD_INT 0
13104: GREATER
13105: PUSH
13106: LD_VAR 0 6
13110: PUSH
13111: LD_INT 0
13113: GREATER
13114: AND
13115: IFFALSE 13148
// for i in damageUnits do
13117: LD_ADDR_VAR 0 8
13121: PUSH
13122: LD_VAR 0 10
13126: PUSH
13127: FOR_IN
13128: IFFALSE 13146
// ComMoveToArea ( i , healArea ) ;
13130: LD_VAR 0 8
13134: PPUSH
13135: LD_VAR 0 2
13139: PPUSH
13140: CALL_OW 113
13144: GO 13127
13146: POP
13147: POP
// if unitsToHeal > 0 and sci_list > 0 then
13148: LD_VAR 0 11
13152: PUSH
13153: LD_INT 0
13155: GREATER
13156: PUSH
13157: LD_VAR 0 6
13161: PUSH
13162: LD_INT 0
13164: GREATER
13165: AND
13166: IFFALSE 13225
// begin for i in sci_list do
13168: LD_ADDR_VAR 0 8
13172: PUSH
13173: LD_VAR 0 6
13177: PUSH
13178: FOR_IN
13179: IFFALSE 13223
// begin ComExitBuilding ( i ) ;
13181: LD_VAR 0 8
13185: PPUSH
13186: CALL_OW 122
// for j in unitsToHeal do
13190: LD_ADDR_VAR 0 9
13194: PUSH
13195: LD_VAR 0 11
13199: PUSH
13200: FOR_IN
13201: IFFALSE 13219
// AddComHeal ( i , j ) ;
13203: LD_VAR 0 8
13207: PPUSH
13208: LD_VAR 0 9
13212: PPUSH
13213: CALL_OW 188
13217: GO 13200
13219: POP
13220: POP
// end ;
13221: GO 13178
13223: POP
13224: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13225: LD_VAR 0 10
13229: PUSH
13230: LD_INT 0
13232: EQUAL
13233: PUSH
13234: LD_VAR 0 11
13238: PUSH
13239: LD_INT 0
13241: EQUAL
13242: AND
13243: PUSH
13244: LD_VAR 0 7
13248: PUSH
13249: LD_INT 0
13251: GREATER
13252: AND
13253: IFFALSE 13357
// for i in sci_listOutside do
13255: LD_ADDR_VAR 0 8
13259: PUSH
13260: LD_VAR 0 7
13264: PUSH
13265: FOR_IN
13266: IFFALSE 13355
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13268: LD_ADDR_VAR 0 12
13272: PUSH
13273: LD_INT 22
13275: PUSH
13276: LD_VAR 0 1
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: LD_INT 21
13287: PUSH
13288: LD_INT 3
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 30
13297: PUSH
13298: LD_INT 8
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: LIST
13309: PPUSH
13310: CALL_OW 69
13314: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13315: LD_ADDR_VAR 0 13
13319: PUSH
13320: LD_INT 1
13322: PPUSH
13323: LD_VAR 0 12
13327: PPUSH
13328: CALL_OW 12
13332: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
13333: LD_VAR 0 8
13337: PPUSH
13338: LD_VAR 0 12
13342: PUSH
13343: LD_VAR 0 13
13347: ARRAY
13348: PPUSH
13349: CALL_OW 120
// end ;
13353: GO 13265
13355: POP
13356: POP
// end ;
13357: LD_VAR 0 5
13361: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13362: LD_INT 0
13364: PPUSH
13365: PPUSH
13366: PPUSH
13367: PPUSH
13368: PPUSH
13369: PPUSH
13370: PPUSH
13371: PPUSH
13372: PPUSH
13373: PPUSH
13374: PPUSH
// amChassisTab = [ ] ;
13375: LD_ADDR_VAR 0 19
13379: PUSH
13380: EMPTY
13381: ST_TO_ADDR
// arChassisTab = [ ] ;
13382: LD_ADDR_VAR 0 18
13386: PUSH
13387: EMPTY
13388: ST_TO_ADDR
// ruChassisTab = [ ] ;
13389: LD_ADDR_VAR 0 17
13393: PUSH
13394: EMPTY
13395: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13396: LD_INT 35
13398: PPUSH
13399: CALL_OW 67
// if nation = 1 then
13403: LD_VAR 0 5
13407: PUSH
13408: LD_INT 1
13410: EQUAL
13411: IFFALSE 13916
// begin uc_side = side ;
13413: LD_ADDR_OWVAR 20
13417: PUSH
13418: LD_VAR 0 2
13422: ST_TO_ADDR
// uc_nation = nation ;
13423: LD_ADDR_OWVAR 21
13427: PUSH
13428: LD_VAR 0 5
13432: ST_TO_ADDR
// vc_engine = vehengine ;
13433: LD_ADDR_OWVAR 39
13437: PUSH
13438: LD_VAR 0 6
13442: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13443: LD_ADDR_OWVAR 38
13447: PUSH
13448: LD_VAR 0 7
13452: PUSH
13453: LD_INT 1
13455: PPUSH
13456: LD_VAR 0 7
13460: PPUSH
13461: CALL_OW 12
13465: ARRAY
13466: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13467: LD_ADDR_OWVAR 40
13471: PUSH
13472: LD_VAR 0 10
13476: PUSH
13477: LD_INT 1
13479: PPUSH
13480: LD_VAR 0 10
13484: PPUSH
13485: CALL_OW 12
13489: ARRAY
13490: ST_TO_ADDR
// for j = 1 to AMWeapon do
13491: LD_ADDR_VAR 0 14
13495: PUSH
13496: DOUBLE
13497: LD_INT 1
13499: DEC
13500: ST_TO_ADDR
13501: LD_VAR 0 10
13505: PUSH
13506: FOR_TO
13507: IFFALSE 13808
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13509: LD_VAR 0 10
13513: PUSH
13514: LD_VAR 0 14
13518: ARRAY
13519: PUSH
13520: LD_INT 2
13522: EQUAL
13523: PUSH
13524: LD_VAR 0 10
13528: PUSH
13529: LD_VAR 0 14
13533: ARRAY
13534: PUSH
13535: LD_INT 3
13537: EQUAL
13538: OR
13539: IFFALSE 13592
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13541: LD_ADDR_VAR 0 19
13545: PUSH
13546: LD_INT 1
13548: PUSH
13549: LD_INT 2
13551: PUSH
13552: LD_INT 3
13554: PUSH
13555: LD_INT 4
13557: PUSH
13558: LD_INT 5
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13568: LD_ADDR_OWVAR 37
13572: PUSH
13573: LD_VAR 0 19
13577: PUSH
13578: LD_INT 1
13580: PPUSH
13581: LD_VAR 0 19
13585: PPUSH
13586: CALL_OW 12
13590: ARRAY
13591: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13592: LD_VAR 0 10
13596: PUSH
13597: LD_VAR 0 14
13601: ARRAY
13602: PUSH
13603: LD_INT 4
13605: EQUAL
13606: PUSH
13607: LD_VAR 0 10
13611: PUSH
13612: LD_VAR 0 14
13616: ARRAY
13617: PUSH
13618: LD_INT 5
13620: EQUAL
13621: OR
13622: PUSH
13623: LD_VAR 0 10
13627: PUSH
13628: LD_VAR 0 14
13632: ARRAY
13633: PUSH
13634: LD_INT 9
13636: EQUAL
13637: OR
13638: PUSH
13639: LD_VAR 0 10
13643: PUSH
13644: LD_VAR 0 14
13648: ARRAY
13649: PUSH
13650: LD_INT 11
13652: EQUAL
13653: OR
13654: PUSH
13655: LD_VAR 0 10
13659: PUSH
13660: LD_VAR 0 14
13664: ARRAY
13665: PUSH
13666: LD_INT 7
13668: EQUAL
13669: OR
13670: IFFALSE 13719
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13672: LD_ADDR_VAR 0 19
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 3
13682: PUSH
13683: LD_INT 4
13685: PUSH
13686: LD_INT 5
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13695: LD_ADDR_OWVAR 37
13699: PUSH
13700: LD_VAR 0 19
13704: PUSH
13705: LD_INT 1
13707: PPUSH
13708: LD_VAR 0 19
13712: PPUSH
13713: CALL_OW 12
13717: ARRAY
13718: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13719: LD_VAR 0 10
13723: PUSH
13724: LD_VAR 0 14
13728: ARRAY
13729: PUSH
13730: LD_INT 8
13732: EQUAL
13733: PUSH
13734: LD_VAR 0 10
13738: PUSH
13739: LD_VAR 0 14
13743: ARRAY
13744: PUSH
13745: LD_INT 6
13747: EQUAL
13748: OR
13749: PUSH
13750: LD_VAR 0 10
13754: PUSH
13755: LD_VAR 0 14
13759: ARRAY
13760: PUSH
13761: LD_INT 10
13763: EQUAL
13764: OR
13765: IFFALSE 13806
// begin amChassisTab = [ 4 , 5 ] ;
13767: LD_ADDR_VAR 0 19
13771: PUSH
13772: LD_INT 4
13774: PUSH
13775: LD_INT 5
13777: PUSH
13778: EMPTY
13779: LIST
13780: LIST
13781: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13782: LD_ADDR_OWVAR 37
13786: PUSH
13787: LD_VAR 0 19
13791: PUSH
13792: LD_INT 1
13794: PPUSH
13795: LD_VAR 0 19
13799: PPUSH
13800: CALL_OW 12
13804: ARRAY
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13506
13808: POP
13809: POP
// veh = CreateVehicle ;
13810: LD_ADDR_VAR 0 16
13814: PUSH
13815: CALL_OW 45
13819: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13820: LD_VAR 0 16
13824: PPUSH
13825: LD_VAR 0 1
13829: PPUSH
13830: LD_INT 0
13832: PPUSH
13833: CALL_OW 49
// if vc_control = 1 then
13837: LD_OWVAR 38
13841: PUSH
13842: LD_INT 1
13844: EQUAL
13845: IFFALSE 13902
// begin hc_gallery =  ;
13847: LD_ADDR_OWVAR 33
13851: PUSH
13852: LD_STRING 
13854: ST_TO_ADDR
// hc_name =  ;
13855: LD_ADDR_OWVAR 26
13859: PUSH
13860: LD_STRING 
13862: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13863: LD_INT 0
13865: PPUSH
13866: LD_INT 3
13868: PPUSH
13869: LD_VAR 0 4
13873: PPUSH
13874: CALL_OW 380
// un = CreateHuman ;
13878: LD_ADDR_VAR 0 15
13882: PUSH
13883: CALL_OW 44
13887: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13888: LD_VAR 0 15
13892: PPUSH
13893: LD_VAR 0 16
13897: PPUSH
13898: CALL_OW 52
// end ; i = i + 1 ;
13902: LD_ADDR_VAR 0 13
13906: PUSH
13907: LD_VAR 0 13
13911: PUSH
13912: LD_INT 1
13914: PLUS
13915: ST_TO_ADDR
// end ; if nation = 2 then
13916: LD_VAR 0 5
13920: PUSH
13921: LD_INT 2
13923: EQUAL
13924: IFFALSE 14346
// begin uc_side = side ;
13926: LD_ADDR_OWVAR 20
13930: PUSH
13931: LD_VAR 0 2
13935: ST_TO_ADDR
// uc_nation = nation ;
13936: LD_ADDR_OWVAR 21
13940: PUSH
13941: LD_VAR 0 5
13945: ST_TO_ADDR
// vc_engine = vehengine ;
13946: LD_ADDR_OWVAR 39
13950: PUSH
13951: LD_VAR 0 6
13955: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13956: LD_ADDR_OWVAR 38
13960: PUSH
13961: LD_VAR 0 7
13965: PUSH
13966: LD_INT 1
13968: PPUSH
13969: LD_VAR 0 7
13973: PPUSH
13974: CALL_OW 12
13978: ARRAY
13979: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13980: LD_ADDR_OWVAR 40
13984: PUSH
13985: LD_VAR 0 9
13989: PUSH
13990: LD_INT 1
13992: PPUSH
13993: LD_VAR 0 9
13997: PPUSH
13998: CALL_OW 12
14002: ARRAY
14003: ST_TO_ADDR
// for j = 1 to ARWeapons do
14004: LD_ADDR_VAR 0 14
14008: PUSH
14009: DOUBLE
14010: LD_INT 1
14012: DEC
14013: ST_TO_ADDR
14014: LD_VAR 0 9
14018: PUSH
14019: FOR_TO
14020: IFFALSE 14238
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
14022: LD_VAR 0 9
14026: PUSH
14027: LD_VAR 0 14
14031: ARRAY
14032: PUSH
14033: LD_INT 24
14035: EQUAL
14036: PUSH
14037: LD_VAR 0 9
14041: PUSH
14042: LD_VAR 0 14
14046: ARRAY
14047: PUSH
14048: LD_INT 22
14050: EQUAL
14051: OR
14052: PUSH
14053: LD_VAR 0 9
14057: PUSH
14058: LD_VAR 0 14
14062: ARRAY
14063: PUSH
14064: LD_INT 23
14066: EQUAL
14067: OR
14068: PUSH
14069: LD_VAR 0 9
14073: PUSH
14074: LD_VAR 0 14
14078: ARRAY
14079: PUSH
14080: LD_INT 30
14082: EQUAL
14083: OR
14084: IFFALSE 14121
// begin arChassisTab = [ 14 ] ;
14086: LD_ADDR_VAR 0 18
14090: PUSH
14091: LD_INT 14
14093: PUSH
14094: EMPTY
14095: LIST
14096: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14097: LD_ADDR_OWVAR 37
14101: PUSH
14102: LD_VAR 0 18
14106: PUSH
14107: LD_INT 1
14109: PPUSH
14110: LD_VAR 0 18
14114: PPUSH
14115: CALL_OW 12
14119: ARRAY
14120: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14121: LD_VAR 0 9
14125: PUSH
14126: LD_VAR 0 14
14130: ARRAY
14131: PUSH
14132: LD_INT 29
14134: EQUAL
14135: PUSH
14136: LD_VAR 0 9
14140: PUSH
14141: LD_VAR 0 14
14145: ARRAY
14146: PUSH
14147: LD_INT 28
14149: EQUAL
14150: OR
14151: PUSH
14152: LD_VAR 0 9
14156: PUSH
14157: LD_VAR 0 14
14161: ARRAY
14162: PUSH
14163: LD_INT 27
14165: EQUAL
14166: OR
14167: PUSH
14168: LD_VAR 0 9
14172: PUSH
14173: LD_VAR 0 14
14177: ARRAY
14178: PUSH
14179: LD_INT 26
14181: EQUAL
14182: OR
14183: PUSH
14184: LD_VAR 0 9
14188: PUSH
14189: LD_VAR 0 14
14193: ARRAY
14194: PUSH
14195: LD_INT 25
14197: EQUAL
14198: OR
14199: IFFALSE 14236
// begin arChassisTab = [ 14 ] ;
14201: LD_ADDR_VAR 0 18
14205: PUSH
14206: LD_INT 14
14208: PUSH
14209: EMPTY
14210: LIST
14211: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14212: LD_ADDR_OWVAR 37
14216: PUSH
14217: LD_VAR 0 18
14221: PUSH
14222: LD_INT 1
14224: PPUSH
14225: LD_VAR 0 18
14229: PPUSH
14230: CALL_OW 12
14234: ARRAY
14235: ST_TO_ADDR
// end ; end ;
14236: GO 14019
14238: POP
14239: POP
// veh = CreateVehicle ;
14240: LD_ADDR_VAR 0 16
14244: PUSH
14245: CALL_OW 45
14249: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14250: LD_VAR 0 16
14254: PPUSH
14255: LD_VAR 0 1
14259: PPUSH
14260: LD_INT 0
14262: PPUSH
14263: CALL_OW 49
// if vc_control = 1 then
14267: LD_OWVAR 38
14271: PUSH
14272: LD_INT 1
14274: EQUAL
14275: IFFALSE 14332
// begin hc_gallery =  ;
14277: LD_ADDR_OWVAR 33
14281: PUSH
14282: LD_STRING 
14284: ST_TO_ADDR
// hc_name =  ;
14285: LD_ADDR_OWVAR 26
14289: PUSH
14290: LD_STRING 
14292: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14293: LD_INT 0
14295: PPUSH
14296: LD_INT 3
14298: PPUSH
14299: LD_VAR 0 4
14303: PPUSH
14304: CALL_OW 380
// un = CreateHuman ;
14308: LD_ADDR_VAR 0 15
14312: PUSH
14313: CALL_OW 44
14317: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14318: LD_VAR 0 15
14322: PPUSH
14323: LD_VAR 0 16
14327: PPUSH
14328: CALL_OW 52
// end ; i = i + 1 ;
14332: LD_ADDR_VAR 0 13
14336: PUSH
14337: LD_VAR 0 13
14341: PUSH
14342: LD_INT 1
14344: PLUS
14345: ST_TO_ADDR
// end ; if nation = 3 then
14346: LD_VAR 0 5
14350: PUSH
14351: LD_INT 3
14353: EQUAL
14354: IFFALSE 14760
// begin uc_side = side ;
14356: LD_ADDR_OWVAR 20
14360: PUSH
14361: LD_VAR 0 2
14365: ST_TO_ADDR
// uc_nation = nation ;
14366: LD_ADDR_OWVAR 21
14370: PUSH
14371: LD_VAR 0 5
14375: ST_TO_ADDR
// vc_engine = vehengine ;
14376: LD_ADDR_OWVAR 39
14380: PUSH
14381: LD_VAR 0 6
14385: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14386: LD_ADDR_OWVAR 38
14390: PUSH
14391: LD_VAR 0 7
14395: PUSH
14396: LD_INT 1
14398: PPUSH
14399: LD_VAR 0 7
14403: PPUSH
14404: CALL_OW 12
14408: ARRAY
14409: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14410: LD_ADDR_OWVAR 40
14414: PUSH
14415: LD_VAR 0 8
14419: PUSH
14420: LD_INT 1
14422: PPUSH
14423: LD_VAR 0 8
14427: PPUSH
14428: CALL_OW 12
14432: ARRAY
14433: ST_TO_ADDR
// for j = 1 to RuWeapons do
14434: LD_ADDR_VAR 0 14
14438: PUSH
14439: DOUBLE
14440: LD_INT 1
14442: DEC
14443: ST_TO_ADDR
14444: LD_VAR 0 8
14448: PUSH
14449: FOR_TO
14450: IFFALSE 14652
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14452: LD_VAR 0 8
14456: PUSH
14457: LD_VAR 0 14
14461: ARRAY
14462: PUSH
14463: LD_INT 42
14465: EQUAL
14466: PUSH
14467: LD_VAR 0 8
14471: PUSH
14472: LD_VAR 0 14
14476: ARRAY
14477: PUSH
14478: LD_INT 43
14480: EQUAL
14481: OR
14482: PUSH
14483: LD_VAR 0 8
14487: PUSH
14488: LD_VAR 0 14
14492: ARRAY
14493: PUSH
14494: LD_INT 44
14496: EQUAL
14497: OR
14498: PUSH
14499: LD_VAR 0 8
14503: PUSH
14504: LD_VAR 0 14
14508: ARRAY
14509: PUSH
14510: LD_INT 45
14512: EQUAL
14513: OR
14514: PUSH
14515: LD_VAR 0 8
14519: PUSH
14520: LD_VAR 0 14
14524: ARRAY
14525: PUSH
14526: LD_INT 49
14528: EQUAL
14529: OR
14530: IFFALSE 14579
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14532: LD_ADDR_VAR 0 17
14536: PUSH
14537: LD_INT 21
14539: PUSH
14540: LD_INT 22
14542: PUSH
14543: LD_INT 23
14545: PUSH
14546: LD_INT 24
14548: PUSH
14549: EMPTY
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14555: LD_ADDR_OWVAR 37
14559: PUSH
14560: LD_VAR 0 17
14564: PUSH
14565: LD_INT 1
14567: PPUSH
14568: LD_VAR 0 17
14572: PPUSH
14573: CALL_OW 12
14577: ARRAY
14578: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14579: LD_VAR 0 8
14583: PUSH
14584: LD_VAR 0 14
14588: ARRAY
14589: PUSH
14590: LD_INT 46
14592: EQUAL
14593: PUSH
14594: LD_VAR 0 8
14598: PUSH
14599: LD_VAR 0 14
14603: ARRAY
14604: PUSH
14605: LD_INT 47
14607: EQUAL
14608: OR
14609: IFFALSE 14650
// begin ruChassisTab = [ 23 , 24 ] ;
14611: LD_ADDR_VAR 0 17
14615: PUSH
14616: LD_INT 23
14618: PUSH
14619: LD_INT 24
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14626: LD_ADDR_OWVAR 37
14630: PUSH
14631: LD_VAR 0 17
14635: PUSH
14636: LD_INT 1
14638: PPUSH
14639: LD_VAR 0 17
14643: PPUSH
14644: CALL_OW 12
14648: ARRAY
14649: ST_TO_ADDR
// end ; end ;
14650: GO 14449
14652: POP
14653: POP
// veh = CreateVehicle ;
14654: LD_ADDR_VAR 0 16
14658: PUSH
14659: CALL_OW 45
14663: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14664: LD_VAR 0 16
14668: PPUSH
14669: LD_VAR 0 1
14673: PPUSH
14674: LD_INT 0
14676: PPUSH
14677: CALL_OW 49
// if vc_control = 1 then
14681: LD_OWVAR 38
14685: PUSH
14686: LD_INT 1
14688: EQUAL
14689: IFFALSE 14746
// begin hc_gallery =  ;
14691: LD_ADDR_OWVAR 33
14695: PUSH
14696: LD_STRING 
14698: ST_TO_ADDR
// hc_name =  ;
14699: LD_ADDR_OWVAR 26
14703: PUSH
14704: LD_STRING 
14706: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14707: LD_INT 0
14709: PPUSH
14710: LD_INT 3
14712: PPUSH
14713: LD_VAR 0 4
14717: PPUSH
14718: CALL_OW 380
// un = CreateHuman ;
14722: LD_ADDR_VAR 0 15
14726: PUSH
14727: CALL_OW 44
14731: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14732: LD_VAR 0 15
14736: PPUSH
14737: LD_VAR 0 16
14741: PPUSH
14742: CALL_OW 52
// end ; i = i + 1 ;
14746: LD_ADDR_VAR 0 13
14750: PUSH
14751: LD_VAR 0 13
14755: PUSH
14756: LD_INT 1
14758: PLUS
14759: ST_TO_ADDR
// end ; until i = vehCount ;
14760: LD_VAR 0 13
14764: PUSH
14765: LD_VAR 0 3
14769: EQUAL
14770: IFFALSE 13396
// repeat wait ( 0 0$1 ) ;
14772: LD_INT 35
14774: PPUSH
14775: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14779: LD_ADDR_VAR 0 20
14783: PUSH
14784: LD_INT 22
14786: PUSH
14787: LD_VAR 0 2
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PUSH
14796: LD_INT 21
14798: PUSH
14799: LD_INT 2
14801: PUSH
14802: EMPTY
14803: LIST
14804: LIST
14805: PUSH
14806: LD_INT 24
14808: PUSH
14809: LD_INT 650
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: ST_TO_ADDR
// if vehicleOK_list > 0 then
14826: LD_VAR 0 20
14830: PUSH
14831: LD_INT 0
14833: GREATER
14834: IFFALSE 15025
// begin for i in vehicleOK_list do
14836: LD_ADDR_VAR 0 13
14840: PUSH
14841: LD_VAR 0 20
14845: PUSH
14846: FOR_IN
14847: IFFALSE 15023
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14849: LD_ADDR_VAR 0 21
14853: PUSH
14854: LD_INT 22
14856: PUSH
14857: LD_VAR 0 11
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: PPUSH
14871: LD_VAR 0 13
14875: PPUSH
14876: CALL_OW 74
14880: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14881: LD_ADDR_VAR 0 22
14885: PUSH
14886: LD_INT 22
14888: PUSH
14889: LD_VAR 0 11
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 2
14900: PUSH
14901: LD_INT 59
14903: PUSH
14904: EMPTY
14905: LIST
14906: PUSH
14907: LD_INT 21
14909: PUSH
14910: LD_INT 1
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 21
14919: PUSH
14920: LD_INT 2
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: PPUSH
14940: CALL_OW 69
14944: PPUSH
14945: LD_VAR 0 13
14949: PPUSH
14950: CALL_OW 74
14954: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14955: LD_VAR 0 13
14959: PPUSH
14960: LD_VAR 0 21
14964: PPUSH
14965: CALL_OW 296
14969: PUSH
14970: LD_INT 8
14972: PLUS
14973: PUSH
14974: LD_VAR 0 13
14978: PPUSH
14979: LD_VAR 0 22
14983: PPUSH
14984: CALL_OW 296
14988: LESS
14989: IFFALSE 15007
// begin ComAttackUnit ( i , target1 ) ;
14991: LD_VAR 0 13
14995: PPUSH
14996: LD_VAR 0 21
15000: PPUSH
15001: CALL_OW 115
// end else
15005: GO 15021
// begin ComAttackUnit ( i , target2 ) ;
15007: LD_VAR 0 13
15011: PPUSH
15012: LD_VAR 0 22
15016: PPUSH
15017: CALL_OW 115
// end ; end ;
15021: GO 14846
15023: POP
15024: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
15025: LD_INT 22
15027: PUSH
15028: LD_VAR 0 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 21
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: PUSH
15056: LD_INT 0
15058: EQUAL
15059: IFFALSE 14772
// end ;
15061: LD_VAR 0 12
15065: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
15066: LD_INT 0
15068: PPUSH
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
15073: PPUSH
15074: PPUSH
15075: PPUSH
15076: PPUSH
15077: PPUSH
15078: PPUSH
// for i = 1 to soldierCount do
15079: LD_ADDR_VAR 0 13
15083: PUSH
15084: DOUBLE
15085: LD_INT 1
15087: DEC
15088: ST_TO_ADDR
15089: LD_VAR 0 3
15093: PUSH
15094: FOR_TO
15095: IFFALSE 15177
// begin uc_side = side ;
15097: LD_ADDR_OWVAR 20
15101: PUSH
15102: LD_VAR 0 1
15106: ST_TO_ADDR
// uc_nation = nation ;
15107: LD_ADDR_OWVAR 21
15111: PUSH
15112: LD_VAR 0 2
15116: ST_TO_ADDR
// hc_name =  ;
15117: LD_ADDR_OWVAR 26
15121: PUSH
15122: LD_STRING 
15124: ST_TO_ADDR
// hc_gallery =  ;
15125: LD_ADDR_OWVAR 33
15129: PUSH
15130: LD_STRING 
15132: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
15133: LD_INT 0
15135: PPUSH
15136: LD_INT 1
15138: PPUSH
15139: LD_VAR 0 8
15143: PPUSH
15144: CALL_OW 380
// un = CreateHuman ;
15148: LD_ADDR_VAR 0 15
15152: PUSH
15153: CALL_OW 44
15157: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15158: LD_VAR 0 15
15162: PPUSH
15163: LD_VAR 0 9
15167: PPUSH
15168: LD_INT 0
15170: PPUSH
15171: CALL_OW 49
// end ;
15175: GO 15094
15177: POP
15178: POP
// for i = 1 to sniperCount do
15179: LD_ADDR_VAR 0 13
15183: PUSH
15184: DOUBLE
15185: LD_INT 1
15187: DEC
15188: ST_TO_ADDR
15189: LD_VAR 0 4
15193: PUSH
15194: FOR_TO
15195: IFFALSE 15277
// begin uc_side = side ;
15197: LD_ADDR_OWVAR 20
15201: PUSH
15202: LD_VAR 0 1
15206: ST_TO_ADDR
// uc_nation = nation ;
15207: LD_ADDR_OWVAR 21
15211: PUSH
15212: LD_VAR 0 2
15216: ST_TO_ADDR
// hc_name =  ;
15217: LD_ADDR_OWVAR 26
15221: PUSH
15222: LD_STRING 
15224: ST_TO_ADDR
// hc_gallery =  ;
15225: LD_ADDR_OWVAR 33
15229: PUSH
15230: LD_STRING 
15232: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
15233: LD_INT 0
15235: PPUSH
15236: LD_INT 5
15238: PPUSH
15239: LD_VAR 0 8
15243: PPUSH
15244: CALL_OW 380
// un = CreateHuman ;
15248: LD_ADDR_VAR 0 15
15252: PUSH
15253: CALL_OW 44
15257: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15258: LD_VAR 0 15
15262: PPUSH
15263: LD_VAR 0 9
15267: PPUSH
15268: LD_INT 0
15270: PPUSH
15271: CALL_OW 49
// end ;
15275: GO 15194
15277: POP
15278: POP
// for i = 1 to bazookCount do
15279: LD_ADDR_VAR 0 13
15283: PUSH
15284: DOUBLE
15285: LD_INT 1
15287: DEC
15288: ST_TO_ADDR
15289: LD_VAR 0 5
15293: PUSH
15294: FOR_TO
15295: IFFALSE 15377
// begin uc_side = side ;
15297: LD_ADDR_OWVAR 20
15301: PUSH
15302: LD_VAR 0 1
15306: ST_TO_ADDR
// uc_nation = nation ;
15307: LD_ADDR_OWVAR 21
15311: PUSH
15312: LD_VAR 0 2
15316: ST_TO_ADDR
// hc_name =  ;
15317: LD_ADDR_OWVAR 26
15321: PUSH
15322: LD_STRING 
15324: ST_TO_ADDR
// hc_gallery =  ;
15325: LD_ADDR_OWVAR 33
15329: PUSH
15330: LD_STRING 
15332: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
15333: LD_INT 0
15335: PPUSH
15336: LD_INT 9
15338: PPUSH
15339: LD_VAR 0 8
15343: PPUSH
15344: CALL_OW 380
// un = CreateHuman ;
15348: LD_ADDR_VAR 0 15
15352: PUSH
15353: CALL_OW 44
15357: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15358: LD_VAR 0 15
15362: PPUSH
15363: LD_VAR 0 9
15367: PPUSH
15368: LD_INT 0
15370: PPUSH
15371: CALL_OW 49
// end ;
15375: GO 15294
15377: POP
15378: POP
// for i = 1 to mortalCount do
15379: LD_ADDR_VAR 0 13
15383: PUSH
15384: DOUBLE
15385: LD_INT 1
15387: DEC
15388: ST_TO_ADDR
15389: LD_VAR 0 6
15393: PUSH
15394: FOR_TO
15395: IFFALSE 15477
// begin uc_side = side ;
15397: LD_ADDR_OWVAR 20
15401: PUSH
15402: LD_VAR 0 1
15406: ST_TO_ADDR
// uc_nation = nation ;
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_VAR 0 2
15416: ST_TO_ADDR
// hc_name =  ;
15417: LD_ADDR_OWVAR 26
15421: PUSH
15422: LD_STRING 
15424: ST_TO_ADDR
// hc_gallery =  ;
15425: LD_ADDR_OWVAR 33
15429: PUSH
15430: LD_STRING 
15432: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15433: LD_INT 0
15435: PPUSH
15436: LD_INT 8
15438: PPUSH
15439: LD_VAR 0 8
15443: PPUSH
15444: CALL_OW 380
// un = CreateHuman ;
15448: LD_ADDR_VAR 0 15
15452: PUSH
15453: CALL_OW 44
15457: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15458: LD_VAR 0 15
15462: PPUSH
15463: LD_VAR 0 9
15467: PPUSH
15468: LD_INT 0
15470: PPUSH
15471: CALL_OW 49
// end ;
15475: GO 15394
15477: POP
15478: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
15479: LD_ADDR_VAR 0 18
15483: PUSH
15484: LD_INT 22
15486: PUSH
15487: LD_VAR 0 1
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 2
15498: PUSH
15499: LD_INT 25
15501: PUSH
15502: LD_INT 1
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 25
15511: PUSH
15512: LD_INT 5
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 25
15521: PUSH
15522: LD_INT 8
15524: PUSH
15525: EMPTY
15526: LIST
15527: LIST
15528: PUSH
15529: LD_INT 25
15531: PUSH
15532: LD_INT 9
15534: PUSH
15535: EMPTY
15536: LIST
15537: LIST
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PPUSH
15550: CALL_OW 69
15554: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15555: LD_ADDR_VAR 0 17
15559: PUSH
15560: LD_INT 22
15562: PUSH
15563: LD_VAR 0 1
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 25
15574: PUSH
15575: LD_INT 4
15577: PUSH
15578: EMPTY
15579: LIST
15580: LIST
15581: PUSH
15582: EMPTY
15583: LIST
15584: LIST
15585: PPUSH
15586: CALL_OW 69
15590: ST_TO_ADDR
// for i in medic_list do
15591: LD_ADDR_VAR 0 13
15595: PUSH
15596: LD_VAR 0 17
15600: PUSH
15601: FOR_IN
15602: IFFALSE 15620
// ComMoveToArea ( i , healArea ) ;
15604: LD_VAR 0 13
15608: PPUSH
15609: LD_VAR 0 10
15613: PPUSH
15614: CALL_OW 113
15618: GO 15601
15620: POP
15621: POP
// repeat wait ( 0 0$1 ) ;
15622: LD_INT 35
15624: PPUSH
15625: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15629: LD_ADDR_VAR 0 16
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_VAR 0 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: LD_INT 3
15651: PUSH
15652: LD_INT 24
15654: PUSH
15655: LD_INT 550
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 24
15668: PUSH
15669: LD_INT 250
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PPUSH
15685: CALL_OW 69
15689: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15690: LD_ADDR_VAR 0 18
15694: PUSH
15695: LD_INT 22
15697: PUSH
15698: LD_VAR 0 1
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 2
15709: PUSH
15710: LD_INT 25
15712: PUSH
15713: LD_INT 1
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: PUSH
15720: LD_INT 25
15722: PUSH
15723: LD_INT 5
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 25
15732: PUSH
15733: LD_INT 8
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 25
15742: PUSH
15743: LD_INT 9
15745: PUSH
15746: EMPTY
15747: LIST
15748: LIST
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: PUSH
15757: LD_INT 24
15759: PUSH
15760: LD_INT 1000
15762: PUSH
15763: EMPTY
15764: LIST
15765: LIST
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: LIST
15771: PPUSH
15772: CALL_OW 69
15776: ST_TO_ADDR
// if medicCount > 0 then
15777: LD_VAR 0 7
15781: PUSH
15782: LD_INT 0
15784: GREATER
15785: IFFALSE 15859
// begin if damageUnit_list > 0 then
15787: LD_VAR 0 16
15791: PUSH
15792: LD_INT 0
15794: GREATER
15795: IFFALSE 15859
// begin for i in damageUnit_list do
15797: LD_ADDR_VAR 0 13
15801: PUSH
15802: LD_VAR 0 16
15806: PUSH
15807: FOR_IN
15808: IFFALSE 15857
// begin ComMoveToArea ( i , healArea ) ;
15810: LD_VAR 0 13
15814: PPUSH
15815: LD_VAR 0 10
15819: PPUSH
15820: CALL_OW 113
// for j in medic_list do
15824: LD_ADDR_VAR 0 14
15828: PUSH
15829: LD_VAR 0 17
15833: PUSH
15834: FOR_IN
15835: IFFALSE 15853
// AddComHeal ( j , i ) ;
15837: LD_VAR 0 14
15841: PPUSH
15842: LD_VAR 0 13
15846: PPUSH
15847: CALL_OW 188
15851: GO 15834
15853: POP
15854: POP
// end ;
15855: GO 15807
15857: POP
15858: POP
// end ; end ; for i in soldiersOK_list do
15859: LD_ADDR_VAR 0 13
15863: PUSH
15864: LD_VAR 0 18
15868: PUSH
15869: FOR_IN
15870: IFFALSE 16046
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15872: LD_ADDR_VAR 0 21
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_VAR 0 11
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PPUSH
15889: CALL_OW 69
15893: PPUSH
15894: LD_VAR 0 13
15898: PPUSH
15899: CALL_OW 74
15903: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15904: LD_ADDR_VAR 0 22
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_VAR 0 11
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: PUSH
15921: LD_INT 2
15923: PUSH
15924: LD_INT 59
15926: PUSH
15927: EMPTY
15928: LIST
15929: PUSH
15930: LD_INT 21
15932: PUSH
15933: LD_INT 1
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: LD_INT 21
15942: PUSH
15943: LD_INT 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: EMPTY
15961: LIST
15962: PPUSH
15963: CALL_OW 69
15967: PPUSH
15968: LD_VAR 0 13
15972: PPUSH
15973: CALL_OW 74
15977: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15978: LD_VAR 0 13
15982: PPUSH
15983: LD_VAR 0 21
15987: PPUSH
15988: CALL_OW 296
15992: PUSH
15993: LD_INT 8
15995: PLUS
15996: PUSH
15997: LD_VAR 0 13
16001: PPUSH
16002: LD_VAR 0 22
16006: PPUSH
16007: CALL_OW 296
16011: LESS
16012: IFFALSE 16030
// begin ComAttackUnit ( i , target1 ) ;
16014: LD_VAR 0 13
16018: PPUSH
16019: LD_VAR 0 21
16023: PPUSH
16024: CALL_OW 115
// end else
16028: GO 16044
// begin ComAttackUnit ( i , target2 ) ;
16030: LD_VAR 0 13
16034: PPUSH
16035: LD_VAR 0 22
16039: PPUSH
16040: CALL_OW 115
// end ; end ;
16044: GO 15869
16046: POP
16047: POP
// for i in soldiersOK_list do
16048: LD_ADDR_VAR 0 13
16052: PUSH
16053: LD_VAR 0 18
16057: PUSH
16058: FOR_IN
16059: IFFALSE 16235
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16061: LD_ADDR_VAR 0 21
16065: PUSH
16066: LD_INT 22
16068: PUSH
16069: LD_VAR 0 11
16073: PUSH
16074: EMPTY
16075: LIST
16076: LIST
16077: PPUSH
16078: CALL_OW 69
16082: PPUSH
16083: LD_VAR 0 13
16087: PPUSH
16088: CALL_OW 74
16092: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16093: LD_ADDR_VAR 0 22
16097: PUSH
16098: LD_INT 22
16100: PUSH
16101: LD_VAR 0 11
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: LD_INT 2
16112: PUSH
16113: LD_INT 59
16115: PUSH
16116: EMPTY
16117: LIST
16118: PUSH
16119: LD_INT 21
16121: PUSH
16122: LD_INT 1
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: PUSH
16129: LD_INT 21
16131: PUSH
16132: LD_INT 2
16134: PUSH
16135: EMPTY
16136: LIST
16137: LIST
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: EMPTY
16150: LIST
16151: PPUSH
16152: CALL_OW 69
16156: PPUSH
16157: LD_VAR 0 13
16161: PPUSH
16162: CALL_OW 74
16166: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16167: LD_VAR 0 13
16171: PPUSH
16172: LD_VAR 0 21
16176: PPUSH
16177: CALL_OW 296
16181: PUSH
16182: LD_INT 8
16184: PLUS
16185: PUSH
16186: LD_VAR 0 13
16190: PPUSH
16191: LD_VAR 0 22
16195: PPUSH
16196: CALL_OW 296
16200: LESS
16201: IFFALSE 16219
// begin ComAttackUnit ( i , target1 ) ;
16203: LD_VAR 0 13
16207: PPUSH
16208: LD_VAR 0 21
16212: PPUSH
16213: CALL_OW 115
// end else
16217: GO 16233
// begin ComAttackUnit ( i , target2 ) ;
16219: LD_VAR 0 13
16223: PPUSH
16224: LD_VAR 0 22
16228: PPUSH
16229: CALL_OW 115
// end ; end ;
16233: GO 16058
16235: POP
16236: POP
// until soldiersOK_list = [ ] ;
16237: LD_VAR 0 18
16241: PUSH
16242: EMPTY
16243: EQUAL
16244: IFFALSE 15622
// end ;
16246: LD_VAR 0 12
16250: RET
// export function TameApemans ; var i , j ; begin
16251: LD_INT 0
16253: PPUSH
16254: PPUSH
16255: PPUSH
// repeat wait ( 0 0$1 ) ;
16256: LD_INT 35
16258: PPUSH
16259: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16263: LD_ADDR_VAR 0 2
16267: PUSH
16268: LD_INT 22
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: PUSH
16278: LD_INT 25
16280: PUSH
16281: LD_INT 4
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PPUSH
16292: CALL_OW 69
16296: PUSH
16297: FOR_IN
16298: IFFALSE 16375
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16300: LD_ADDR_VAR 0 3
16304: PUSH
16305: LD_INT 5
16307: PPUSH
16308: LD_INT 22
16310: PUSH
16311: LD_INT 0
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: PUSH
16318: LD_INT 25
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: EMPTY
16325: LIST
16326: LIST
16327: PUSH
16328: EMPTY
16329: LIST
16330: LIST
16331: PPUSH
16332: CALL_OW 70
16336: PUSH
16337: FOR_IN
16338: IFFALSE 16371
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16340: LD_VAR 0 2
16344: PPUSH
16345: LD_VAR 0 3
16349: PPUSH
16350: CALL_OW 250
16354: PPUSH
16355: LD_VAR 0 3
16359: PPUSH
16360: CALL_OW 251
16364: PPUSH
16365: CALL_OW 191
// end ;
16369: GO 16337
16371: POP
16372: POP
// end ;
16373: GO 16297
16375: POP
16376: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
16377: LD_INT 22
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: LD_INT 25
16389: PUSH
16390: LD_INT 4
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: PPUSH
16401: CALL_OW 69
16405: PUSH
16406: LD_INT 0
16408: EQUAL
16409: PUSH
16410: LD_INT 5
16412: PPUSH
16413: LD_INT 22
16415: PUSH
16416: LD_INT 0
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 25
16425: PUSH
16426: LD_INT 12
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PPUSH
16437: CALL_OW 70
16441: PUSH
16442: LD_INT 0
16444: EQUAL
16445: OR
16446: IFFALSE 16256
// wait ( 0 0$30 ) ;
16448: LD_INT 1050
16450: PPUSH
16451: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
16455: LD_ADDR_VAR 0 2
16459: PUSH
16460: LD_INT 22
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: LD_INT 25
16472: PUSH
16473: LD_INT 12
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: PUSH
16489: FOR_IN
16490: IFFALSE 16554
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
16492: LD_VAR 0 2
16496: PPUSH
16497: LD_EXP 42
16501: PPUSH
16502: CALL_OW 250
16506: PPUSH
16507: LD_EXP 42
16511: PPUSH
16512: CALL_OW 251
16516: PPUSH
16517: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
16521: LD_VAR 0 2
16525: PPUSH
16526: LD_INT 16
16528: PUSH
16529: LD_INT 15
16531: PUSH
16532: EMPTY
16533: LIST
16534: LIST
16535: PUSH
16536: LD_INT 1
16538: PPUSH
16539: LD_INT 2
16541: PPUSH
16542: CALL_OW 12
16546: ARRAY
16547: PPUSH
16548: CALL_OW 336
// end ;
16552: GO 16489
16554: POP
16555: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16556: LD_ADDR_VAR 0 2
16560: PUSH
16561: LD_INT 22
16563: PUSH
16564: LD_INT 2
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 25
16573: PUSH
16574: LD_INT 4
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: PUSH
16590: FOR_IN
16591: IFFALSE 16637
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
16593: LD_VAR 0 2
16597: PPUSH
16598: LD_INT 22
16600: PUSH
16601: LD_INT 2
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: LD_INT 30
16610: PUSH
16611: LD_INT 8
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PPUSH
16622: CALL_OW 69
16626: PUSH
16627: LD_INT 1
16629: ARRAY
16630: PPUSH
16631: CALL_OW 120
16635: GO 16590
16637: POP
16638: POP
// end ;
16639: LD_VAR 0 1
16643: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16644: LD_INT 0
16646: PPUSH
16647: PPUSH
16648: PPUSH
16649: PPUSH
16650: PPUSH
16651: PPUSH
16652: PPUSH
16653: PPUSH
16654: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16655: LD_INT 22
16657: PUSH
16658: LD_VAR 0 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 21
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: LD_VAR 0 3
16690: LESSEQUAL
16691: IFFALSE 16835
// for i = 1 to vehCount do
16693: LD_ADDR_VAR 0 10
16697: PUSH
16698: DOUBLE
16699: LD_INT 1
16701: DEC
16702: ST_TO_ADDR
16703: LD_VAR 0 3
16707: PUSH
16708: FOR_TO
16709: IFFALSE 16833
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16711: LD_ADDR_VAR 0 12
16715: PUSH
16716: LD_VAR 0 5
16720: PUSH
16721: LD_INT 1
16723: PPUSH
16724: LD_VAR 0 5
16728: PPUSH
16729: CALL_OW 12
16733: ARRAY
16734: ST_TO_ADDR
// if randWeapon = 46 then
16735: LD_VAR 0 12
16739: PUSH
16740: LD_INT 46
16742: EQUAL
16743: IFFALSE 16788
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16745: LD_VAR 0 2
16749: PPUSH
16750: LD_INT 24
16752: PPUSH
16753: LD_VAR 0 6
16757: PPUSH
16758: LD_VAR 0 7
16762: PUSH
16763: LD_INT 1
16765: PPUSH
16766: LD_VAR 0 7
16770: PPUSH
16771: CALL_OW 12
16775: ARRAY
16776: PPUSH
16777: LD_VAR 0 12
16781: PPUSH
16782: CALL_OW 185
16786: GO 16831
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16788: LD_VAR 0 2
16792: PPUSH
16793: LD_VAR 0 8
16797: PPUSH
16798: LD_VAR 0 6
16802: PPUSH
16803: LD_VAR 0 7
16807: PUSH
16808: LD_INT 1
16810: PPUSH
16811: LD_VAR 0 7
16815: PPUSH
16816: CALL_OW 12
16820: ARRAY
16821: PPUSH
16822: LD_VAR 0 12
16826: PPUSH
16827: CALL_OW 185
// end ;
16831: GO 16708
16833: POP
16834: POP
// repeat wait ( 0 0$1 ) ;
16835: LD_INT 35
16837: PPUSH
16838: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16842: LD_INT 22
16844: PUSH
16845: LD_VAR 0 1
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: PUSH
16854: LD_INT 21
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 24
16866: PUSH
16867: LD_INT 250
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 69
16883: PUSH
16884: LD_VAR 0 3
16888: GREATEREQUAL
16889: IFFALSE 16835
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16891: LD_INT 22
16893: PUSH
16894: LD_VAR 0 1
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 24
16915: PUSH
16916: LD_INT 250
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: LIST
16927: PPUSH
16928: CALL_OW 69
16932: PUSH
16933: LD_VAR 0 3
16937: GREATEREQUAL
16938: IFFALSE 17281
// begin repeat begin wait ( 0 0$1 ) ;
16940: LD_INT 35
16942: PPUSH
16943: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16947: LD_INT 22
16949: PUSH
16950: LD_VAR 0 1
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 21
16961: PUSH
16962: LD_INT 2
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 24
16971: PUSH
16972: LD_INT 651
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: PPUSH
16984: CALL_OW 69
16988: PUSH
16989: LD_INT 0
16991: GREATER
16992: IFFALSE 17220
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
16994: LD_ADDR_VAR 0 10
16998: PUSH
16999: LD_INT 22
17001: PUSH
17002: LD_VAR 0 1
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: LD_INT 21
17013: PUSH
17014: LD_INT 2
17016: PUSH
17017: EMPTY
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 24
17023: PUSH
17024: LD_INT 651
17026: PUSH
17027: EMPTY
17028: LIST
17029: LIST
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: PPUSH
17036: CALL_OW 69
17040: PUSH
17041: FOR_IN
17042: IFFALSE 17218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17044: LD_ADDR_VAR 0 16
17048: PUSH
17049: LD_INT 22
17051: PUSH
17052: LD_VAR 0 4
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: PPUSH
17061: CALL_OW 69
17065: PPUSH
17066: LD_VAR 0 10
17070: PPUSH
17071: CALL_OW 74
17075: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17076: LD_ADDR_VAR 0 17
17080: PUSH
17081: LD_INT 22
17083: PUSH
17084: LD_VAR 0 4
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: PUSH
17093: LD_INT 2
17095: PUSH
17096: LD_INT 59
17098: PUSH
17099: EMPTY
17100: LIST
17101: PUSH
17102: LD_INT 21
17104: PUSH
17105: LD_INT 1
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: PUSH
17112: LD_INT 21
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: PPUSH
17135: CALL_OW 69
17139: PPUSH
17140: LD_VAR 0 10
17144: PPUSH
17145: CALL_OW 74
17149: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17150: LD_VAR 0 10
17154: PPUSH
17155: LD_VAR 0 16
17159: PPUSH
17160: CALL_OW 296
17164: PUSH
17165: LD_INT 8
17167: PLUS
17168: PUSH
17169: LD_VAR 0 10
17173: PPUSH
17174: LD_VAR 0 17
17178: PPUSH
17179: CALL_OW 296
17183: LESS
17184: IFFALSE 17202
// begin ComAttackUnit ( i , target1 ) ;
17186: LD_VAR 0 10
17190: PPUSH
17191: LD_VAR 0 16
17195: PPUSH
17196: CALL_OW 115
// end else
17200: GO 17216
// begin ComAttackUnit ( i , target2 ) ;
17202: LD_VAR 0 10
17206: PPUSH
17207: LD_VAR 0 17
17211: PPUSH
17212: CALL_OW 115
// end ; end ;
17216: GO 17041
17218: POP
17219: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
17220: LD_INT 22
17222: PUSH
17223: LD_VAR 0 1
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PUSH
17232: LD_INT 21
17234: PUSH
17235: LD_INT 2
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PPUSH
17246: CALL_OW 69
17250: PUSH
17251: LD_INT 0
17253: EQUAL
17254: PUSH
17255: LD_INT 22
17257: PUSH
17258: LD_VAR 0 4
17262: PUSH
17263: EMPTY
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: PPUSH
17270: CALL_OW 69
17274: PUSH
17275: LD_INT 0
17277: EQUAL
17278: OR
17279: IFFALSE 16940
// end ; end ; end_of_file
17281: LD_VAR 0 9
17285: RET
// every 0 0$1 trigger russianAI = 1 do
17286: LD_EXP 38
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: IFFALSE 17513
17296: GO 17298
17298: DISABLE
// begin enable ;
17299: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
17300: LD_INT 3
17302: PPUSH
17303: LD_EXP 29
17307: PPUSH
17308: CALL 12301 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17312: LD_INT 3
17314: PPUSH
17315: LD_EXP 41
17319: PPUSH
17320: CALL 12608 0 2
// if ruPossition = 1 then
17324: LD_EXP 40
17328: PUSH
17329: LD_INT 1
17331: EQUAL
17332: IFFALSE 17387
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17334: LD_INT 3
17336: PPUSH
17337: LD_INT 13
17339: PPUSH
17340: LD_INT 10
17342: PPUSH
17343: LD_INT 22
17345: PUSH
17346: LD_INT 3
17348: PUSH
17349: EMPTY
17350: LIST
17351: LIST
17352: PUSH
17353: LD_INT 21
17355: PUSH
17356: LD_INT 3
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: LD_INT 30
17365: PUSH
17366: LD_INT 8
17368: PUSH
17369: EMPTY
17370: LIST
17371: LIST
17372: PUSH
17373: EMPTY
17374: LIST
17375: LIST
17376: LIST
17377: PPUSH
17378: CALL_OW 69
17382: PPUSH
17383: CALL 12814 0 4
// if ruPossition = 2 then
17387: LD_EXP 40
17391: PUSH
17392: LD_INT 2
17394: EQUAL
17395: IFFALSE 17450
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17397: LD_INT 3
17399: PPUSH
17400: LD_INT 14
17402: PPUSH
17403: LD_INT 11
17405: PPUSH
17406: LD_INT 22
17408: PUSH
17409: LD_INT 3
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: LD_INT 21
17418: PUSH
17419: LD_INT 3
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PUSH
17426: LD_INT 30
17428: PUSH
17429: LD_INT 8
17431: PUSH
17432: EMPTY
17433: LIST
17434: LIST
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: LIST
17440: PPUSH
17441: CALL_OW 69
17445: PPUSH
17446: CALL 12814 0 4
// if ruPossition = 3 then
17450: LD_EXP 40
17454: PUSH
17455: LD_INT 3
17457: EQUAL
17458: IFFALSE 17513
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17460: LD_INT 3
17462: PPUSH
17463: LD_INT 15
17465: PPUSH
17466: LD_INT 12
17468: PPUSH
17469: LD_INT 22
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 3
17484: PUSH
17485: EMPTY
17486: LIST
17487: LIST
17488: PUSH
17489: LD_INT 30
17491: PUSH
17492: LD_INT 8
17494: PUSH
17495: EMPTY
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: PPUSH
17509: CALL 12814 0 4
// end ;
17513: END
// every 0 0$1 do
17514: GO 17516
17516: DISABLE
// begin enable ;
17517: ENABLE
// if ruPossition = 1 then
17518: LD_EXP 40
17522: PUSH
17523: LD_INT 1
17525: EQUAL
17526: IFFALSE 17538
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
17528: LD_INT 3
17530: PPUSH
17531: LD_INT 10
17533: PPUSH
17534: CALL 11952 0 2
// if ruPossition = 2 then
17538: LD_EXP 40
17542: PUSH
17543: LD_INT 2
17545: EQUAL
17546: IFFALSE 17558
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
17548: LD_INT 3
17550: PPUSH
17551: LD_INT 11
17553: PPUSH
17554: CALL 11952 0 2
// if ruPossition = 3 then
17558: LD_EXP 40
17562: PUSH
17563: LD_INT 3
17565: EQUAL
17566: IFFALSE 17578
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
17568: LD_INT 3
17570: PPUSH
17571: LD_INT 12
17573: PPUSH
17574: CALL 11952 0 2
// IntBazooka ( 3 , 1 ) ;
17578: LD_INT 3
17580: PPUSH
17581: LD_INT 1
17583: PPUSH
17584: CALL 10771 0 2
// IntBazooka ( 6 , 1 ) ;
17588: LD_INT 6
17590: PPUSH
17591: LD_INT 1
17593: PPUSH
17594: CALL 10771 0 2
// end ;
17598: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17599: LD_EXP 38
17603: PUSH
17604: LD_INT 1
17606: EQUAL
17607: PUSH
17608: LD_EXP 34
17612: PPUSH
17613: CALL_OW 302
17617: AND
17618: PUSH
17619: LD_EXP 34
17623: PPUSH
17624: CALL_OW 255
17628: PUSH
17629: LD_INT 3
17631: EQUAL
17632: AND
17633: PUSH
17634: LD_INT 22
17636: PUSH
17637: LD_INT 3
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 21
17646: PUSH
17647: LD_INT 2
17649: PUSH
17650: EMPTY
17651: LIST
17652: LIST
17653: PUSH
17654: LD_INT 33
17656: PUSH
17657: LD_INT 3
17659: PUSH
17660: EMPTY
17661: LIST
17662: LIST
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: PPUSH
17669: CALL_OW 69
17673: PUSH
17674: LD_INT 0
17676: EQUAL
17677: AND
17678: IFFALSE 17886
17680: GO 17682
17682: DISABLE
// begin enable ;
17683: ENABLE
// if Difficulty = 1 then
17684: LD_OWVAR 67
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17754
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17694: LD_INT 3
17696: PPUSH
17697: LD_EXP 34
17701: PPUSH
17702: LD_INT 5
17704: PPUSH
17705: LD_INT 8
17707: PPUSH
17708: CALL_OW 12
17712: PPUSH
17713: LD_INT 1
17715: PPUSH
17716: LD_INT 43
17718: PUSH
17719: LD_INT 44
17721: PUSH
17722: LD_INT 45
17724: PUSH
17725: LD_INT 46
17727: PUSH
17728: EMPTY
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: LD_INT 1
17739: PUSH
17740: LD_INT 3
17742: PUSH
17743: EMPTY
17744: LIST
17745: LIST
17746: PPUSH
17747: LD_INT 22
17749: PPUSH
17750: CALL 16644 0 8
// if Difficulty = 2 then
17754: LD_OWVAR 67
17758: PUSH
17759: LD_INT 2
17761: EQUAL
17762: IFFALSE 17820
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17764: LD_INT 3
17766: PPUSH
17767: LD_EXP 34
17771: PPUSH
17772: LD_INT 6
17774: PPUSH
17775: LD_INT 8
17777: PPUSH
17778: CALL_OW 12
17782: PPUSH
17783: LD_INT 1
17785: PPUSH
17786: LD_INT 44
17788: PUSH
17789: LD_INT 45
17791: PUSH
17792: LD_INT 46
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: LIST
17799: PPUSH
17800: LD_INT 1
17802: PPUSH
17803: LD_INT 1
17805: PUSH
17806: LD_INT 3
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: LD_INT 22
17815: PPUSH
17816: CALL 16644 0 8
// if Difficulty = 3 then
17820: LD_OWVAR 67
17824: PUSH
17825: LD_INT 3
17827: EQUAL
17828: IFFALSE 17886
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17830: LD_INT 3
17832: PPUSH
17833: LD_EXP 34
17837: PPUSH
17838: LD_INT 7
17840: PPUSH
17841: LD_INT 8
17843: PPUSH
17844: CALL_OW 12
17848: PPUSH
17849: LD_INT 1
17851: PPUSH
17852: LD_INT 44
17854: PUSH
17855: LD_INT 45
17857: PUSH
17858: LD_INT 46
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: LIST
17865: PPUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_INT 1
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PPUSH
17879: LD_INT 22
17881: PPUSH
17882: CALL 16644 0 8
// end ; end_of_file
17886: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17887: LD_VAR 0 1
17891: PPUSH
17892: CALL_OW 255
17896: PUSH
17897: LD_INT 4
17899: EQUAL
17900: IFFALSE 17914
// SetBName ( building , epsilon ) ;
17902: LD_VAR 0 1
17906: PPUSH
17907: LD_STRING epsilon
17909: PPUSH
17910: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 255
17923: PUSH
17924: LD_INT 1
17926: EQUAL
17927: PUSH
17928: LD_VAR 0 1
17932: PPUSH
17933: CALL_OW 266
17937: PUSH
17938: LD_INT 0
17940: EQUAL
17941: AND
17942: IFFALSE 17956
// SetBName ( building , epsilon ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_STRING epsilon
17951: PPUSH
17952: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17956: LD_VAR 0 1
17960: PPUSH
17961: CALL_OW 255
17965: PUSH
17966: LD_INT 3
17968: EQUAL
17969: PUSH
17970: LD_VAR 0 1
17974: PPUSH
17975: CALL_OW 266
17979: PUSH
17980: LD_INT 0
17982: EQUAL
17983: AND
17984: IFFALSE 17998
// SetBName ( building , chuikov ) ;
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_STRING chuikov
17993: PPUSH
17994: CALL_OW 500
// if GetSide ( building ) = 2 then
17998: LD_VAR 0 1
18002: PPUSH
18003: CALL_OW 255
18007: PUSH
18008: LD_INT 2
18010: EQUAL
18011: IFFALSE 18067
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18013: LD_VAR 0 1
18017: PPUSH
18018: CALL_OW 266
18022: PUSH
18023: LD_INT 6
18025: EQUAL
18026: PUSH
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 266
18036: PUSH
18037: LD_INT 9
18039: EQUAL
18040: OR
18041: IFFALSE 18067
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18043: LD_VAR 0 1
18047: PPUSH
18048: LD_INT 10
18050: PPUSH
18051: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18055: LD_VAR 0 1
18059: PPUSH
18060: LD_INT 11
18062: PPUSH
18063: CALL_OW 207
// end ; end ; end ;
18067: PPOPN 2
18069: END
// on UnitGoesToRed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 6 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
18070: LD_VAR 0 1
18074: PUSH
18075: LD_INT 22
18077: PUSH
18078: LD_INT 6
18080: PUSH
18081: EMPTY
18082: LIST
18083: LIST
18084: PUSH
18085: LD_INT 23
18087: PUSH
18088: LD_INT 3
18090: PUSH
18091: EMPTY
18092: LIST
18093: LIST
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 2
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: LIST
18109: PPUSH
18110: CALL_OW 69
18114: IN
18115: PUSH
18116: LD_EXP 55
18120: NOT
18121: AND
18122: IFFALSE 18153
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
18124: LD_ADDR_EXP 55
18128: PUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 250
18138: PUSH
18139: LD_VAR 0 1
18143: PPUSH
18144: CALL_OW 251
18148: PUSH
18149: EMPTY
18150: LIST
18151: LIST
18152: ST_TO_ADDR
// end ;
18153: PPOPN 1
18155: END
// on BuildingComplete ( building ) do var i ;
18156: LD_INT 0
18158: PPUSH
// begin if GetSide ( building ) = 1 then
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 255
18168: PUSH
18169: LD_INT 1
18171: EQUAL
18172: IFFALSE 18372
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
18174: LD_INT 22
18176: PUSH
18177: LD_INT 1
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 2
18186: PUSH
18187: LD_INT 30
18189: PUSH
18190: LD_INT 7
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 30
18199: PUSH
18200: LD_INT 8
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 1
18209: PUSH
18210: LD_INT 30
18212: PUSH
18213: LD_INT 11
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: LD_INT 1
18222: PUSH
18223: LD_INT 2
18225: PUSH
18226: LD_INT 30
18228: PUSH
18229: LD_INT 26
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: PUSH
18236: LD_INT 30
18238: PUSH
18239: LD_INT 27
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 30
18248: PUSH
18249: LD_INT 28
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: PUSH
18262: EMPTY
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: LIST
18270: PUSH
18271: EMPTY
18272: LIST
18273: LIST
18274: LIST
18275: LIST
18276: PUSH
18277: EMPTY
18278: LIST
18279: LIST
18280: PPUSH
18281: CALL_OW 69
18285: PUSH
18286: LD_INT 0
18288: GREATER
18289: PUSH
18290: LD_INT 22
18292: PUSH
18293: LD_INT 1
18295: PUSH
18296: EMPTY
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 2
18302: PUSH
18303: LD_INT 30
18305: PUSH
18306: LD_INT 26
18308: PUSH
18309: EMPTY
18310: LIST
18311: LIST
18312: PUSH
18313: LD_INT 30
18315: PUSH
18316: LD_INT 27
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PUSH
18323: LD_INT 30
18325: PUSH
18326: LD_INT 28
18328: PUSH
18329: EMPTY
18330: LIST
18331: LIST
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PPUSH
18343: CALL_OW 69
18347: PUSH
18348: LD_INT 0
18350: GREATER
18351: AND
18352: PUSH
18353: LD_EXP 57
18357: PUSH
18358: LD_INT 0
18360: EQUAL
18361: AND
18362: IFFALSE 18372
// eventVar1 = 1 ;
18364: LD_ADDR_EXP 57
18368: PUSH
18369: LD_INT 1
18371: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
18372: LD_VAR 0 1
18376: PPUSH
18377: CALL_OW 255
18381: PUSH
18382: LD_INT 3
18384: EQUAL
18385: IFFALSE 18865
// begin if GetBType ( building ) = b_depot then
18387: LD_VAR 0 1
18391: PPUSH
18392: CALL_OW 266
18396: PUSH
18397: LD_INT 0
18399: EQUAL
18400: IFFALSE 18472
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 274
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_INT 5000
18417: PPUSH
18418: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 274
18431: PPUSH
18432: LD_INT 2
18434: PPUSH
18435: LD_INT 5000
18437: PPUSH
18438: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 274
18451: PPUSH
18452: LD_INT 3
18454: PPUSH
18455: LD_INT 5000
18457: PPUSH
18458: CALL_OW 277
// ruDepot = building ;
18462: LD_ADDR_EXP 29
18466: PUSH
18467: LD_VAR 0 1
18471: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 266
18481: PUSH
18482: LD_INT 0
18484: EQUAL
18485: PUSH
18486: LD_VAR 0 1
18490: PPUSH
18491: CALL_OW 266
18495: PUSH
18496: LD_INT 2
18498: EQUAL
18499: OR
18500: PUSH
18501: LD_VAR 0 1
18505: PPUSH
18506: CALL_OW 266
18510: PUSH
18511: LD_INT 4
18513: EQUAL
18514: OR
18515: IFFALSE 18526
// ComUpgrade ( building ) ;
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 146
// if GetBType ( building ) = b_lab then
18526: LD_VAR 0 1
18530: PPUSH
18531: CALL_OW 266
18535: PUSH
18536: LD_INT 6
18538: EQUAL
18539: IFFALSE 18742
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
18541: LD_INT 22
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 30
18553: PUSH
18554: LD_INT 8
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL_OW 69
18569: PUSH
18570: LD_INT 0
18572: EQUAL
18573: IFFALSE 18611
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18575: LD_VAR 0 1
18579: PPUSH
18580: LD_INT 10
18582: PPUSH
18583: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18587: LD_VAR 0 1
18591: PPUSH
18592: LD_INT 12
18594: PPUSH
18595: CALL_OW 207
// ruLab1 = building ;
18599: LD_ADDR_EXP 30
18603: PUSH
18604: LD_VAR 0 1
18608: ST_TO_ADDR
// end else
18609: GO 18645
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
18611: LD_VAR 0 1
18615: PPUSH
18616: LD_INT 11
18618: PPUSH
18619: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
18623: LD_VAR 0 1
18627: PPUSH
18628: LD_INT 14
18630: PPUSH
18631: CALL_OW 207
// ruLab2 = building ;
18635: LD_ADDR_EXP 31
18639: PUSH
18640: LD_VAR 0 1
18644: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
18645: LD_INT 3
18647: PPUSH
18648: LD_VAR 0 1
18652: PPUSH
18653: LD_INT 3
18655: PPUSH
18656: CALL 11867 0 3
// if ruDestroyedBuildings > 0 then
18660: LD_EXP 41
18664: PUSH
18665: LD_INT 0
18667: GREATER
18668: IFFALSE 18742
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18670: LD_ADDR_EXP 41
18674: PUSH
18675: LD_EXP 41
18679: PPUSH
18680: LD_INT 1
18682: PPUSH
18683: CALL_OW 3
18687: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18688: LD_ADDR_EXP 41
18692: PUSH
18693: LD_EXP 41
18697: PPUSH
18698: LD_INT 1
18700: PPUSH
18701: CALL_OW 3
18705: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18706: LD_ADDR_EXP 41
18710: PUSH
18711: LD_EXP 41
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: CALL_OW 3
18723: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18724: LD_ADDR_EXP 41
18728: PUSH
18729: LD_EXP 41
18733: PPUSH
18734: LD_INT 1
18736: PPUSH
18737: CALL_OW 3
18741: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
18742: LD_VAR 0 1
18746: PPUSH
18747: CALL_OW 266
18751: PUSH
18752: LD_INT 32
18754: EQUAL
18755: IFFALSE 18792
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18757: LD_VAR 0 1
18761: PPUSH
18762: LD_INT 44
18764: PUSH
18765: LD_INT 45
18767: PUSH
18768: LD_INT 46
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: PUSH
18776: LD_INT 1
18778: PPUSH
18779: LD_INT 3
18781: PPUSH
18782: CALL_OW 12
18786: ARRAY
18787: PPUSH
18788: CALL_OW 208
// if GetBType ( building ) = b_turret then
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 266
18801: PUSH
18802: LD_INT 33
18804: EQUAL
18805: IFFALSE 18842
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_INT 44
18814: PUSH
18815: LD_INT 46
18817: PUSH
18818: LD_INT 46
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 1
18828: PPUSH
18829: LD_INT 3
18831: PPUSH
18832: CALL_OW 12
18836: ARRAY
18837: PPUSH
18838: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18842: LD_VAR 0 1
18846: PPUSH
18847: CALL_OW 266
18851: PUSH
18852: LD_INT 24
18854: EQUAL
18855: IFFALSE 18865
// russianAI = 1 ;
18857: LD_ADDR_EXP 38
18861: PUSH
18862: LD_INT 1
18864: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18865: LD_VAR 0 1
18869: PPUSH
18870: CALL_OW 255
18874: PUSH
18875: LD_INT 2
18877: EQUAL
18878: IFFALSE 19436
// begin if GetBType ( building ) = b_depot then
18880: LD_VAR 0 1
18884: PPUSH
18885: CALL_OW 266
18889: PUSH
18890: LD_INT 0
18892: EQUAL
18893: IFFALSE 18979
// begin arDepot = building ;
18895: LD_ADDR_EXP 42
18899: PUSH
18900: LD_VAR 0 1
18904: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18905: LD_INT 38
18907: PUSH
18908: LD_INT 47
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PPUSH
18915: LD_INT 71
18917: PPUSH
18918: LD_INT 19
18920: PPUSH
18921: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18925: LD_VAR 0 1
18929: PPUSH
18930: CALL_OW 274
18934: PPUSH
18935: LD_INT 1
18937: PPUSH
18938: LD_INT 500
18940: PPUSH
18941: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18945: LD_VAR 0 1
18949: PPUSH
18950: CALL_OW 274
18954: PPUSH
18955: LD_INT 3
18957: PPUSH
18958: LD_INT 30
18960: PPUSH
18961: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18965: LD_EXP 26
18969: PPUSH
18970: LD_EXP 42
18974: PPUSH
18975: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL_OW 266
18988: PUSH
18989: LD_INT 6
18991: EQUAL
18992: PUSH
18993: LD_VAR 0 1
18997: PPUSH
18998: CALL_OW 266
19002: PUSH
19003: LD_INT 9
19005: EQUAL
19006: OR
19007: IFFALSE 19058
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19009: LD_VAR 0 1
19013: PPUSH
19014: LD_INT 10
19016: PPUSH
19017: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
19021: LD_VAR 0 1
19025: PPUSH
19026: LD_INT 11
19028: PPUSH
19029: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
19033: LD_INT 2
19035: PPUSH
19036: LD_VAR 0 1
19040: PPUSH
19041: LD_INT 2
19043: PPUSH
19044: CALL 11867 0 3
// arLab = building ;
19048: LD_ADDR_EXP 43
19052: PUSH
19053: LD_VAR 0 1
19057: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
19058: LD_VAR 0 1
19062: PPUSH
19063: CALL_OW 266
19067: PUSH
19068: LD_INT 2
19070: EQUAL
19071: PUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 266
19081: PUSH
19082: LD_INT 4
19084: EQUAL
19085: OR
19086: IFFALSE 19097
// ComUpgrade ( building ) ;
19088: LD_VAR 0 1
19092: PPUSH
19093: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
19097: LD_VAR 0 1
19101: PPUSH
19102: CALL_OW 266
19106: PUSH
19107: LD_INT 31
19109: EQUAL
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_INT 2
19116: PUSH
19117: EMPTY
19118: LIST
19119: LIST
19120: PUSH
19121: LD_INT 25
19123: PUSH
19124: LD_INT 1
19126: PUSH
19127: EMPTY
19128: LIST
19129: LIST
19130: PUSH
19131: LD_INT 3
19133: PUSH
19134: LD_INT 54
19136: PUSH
19137: EMPTY
19138: LIST
19139: PUSH
19140: LD_INT 3
19142: PUSH
19143: LD_INT 60
19145: PUSH
19146: EMPTY
19147: LIST
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PUSH
19158: EMPTY
19159: LIST
19160: LIST
19161: LIST
19162: PPUSH
19163: CALL_OW 69
19167: PUSH
19168: LD_INT 0
19170: GREATER
19171: AND
19172: IFFALSE 19244
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
19174: LD_INT 22
19176: PUSH
19177: LD_INT 2
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 25
19186: PUSH
19187: LD_INT 1
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PUSH
19194: LD_INT 3
19196: PUSH
19197: LD_INT 54
19199: PUSH
19200: EMPTY
19201: LIST
19202: PUSH
19203: LD_INT 3
19205: PUSH
19206: LD_INT 60
19208: PUSH
19209: EMPTY
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: LIST
19225: PPUSH
19226: CALL_OW 69
19230: PUSH
19231: LD_INT 1
19233: ARRAY
19234: PPUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 266
19253: PUSH
19254: LD_INT 27
19256: EQUAL
19257: IFFALSE 19436
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
19259: LD_INT 22
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: LD_INT 30
19271: PUSH
19272: LD_INT 27
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 69
19287: PUSH
19288: LD_INT 2
19290: EQUAL
19291: IFFALSE 19436
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
19293: LD_ADDR_VAR 0 2
19297: PUSH
19298: LD_INT 22
19300: PUSH
19301: LD_INT 2
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 21
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: EMPTY
19315: LIST
19316: LIST
19317: PUSH
19318: LD_INT 25
19320: PUSH
19321: LD_INT 2
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 69
19337: PUSH
19338: LD_INT 1
19340: ARRAY
19341: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
19342: LD_VAR 0 2
19346: PPUSH
19347: LD_INT 92
19349: PPUSH
19350: LD_INT 34
19352: PPUSH
19353: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
19357: LD_VAR 0 2
19361: PPUSH
19362: LD_INT 82
19364: PPUSH
19365: LD_INT 57
19367: PPUSH
19368: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
19372: LD_VAR 0 2
19376: PPUSH
19377: LD_INT 36
19379: PPUSH
19380: LD_INT 28
19382: PPUSH
19383: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
19387: LD_INT 22
19389: PUSH
19390: LD_INT 2
19392: PUSH
19393: EMPTY
19394: LIST
19395: LIST
19396: PUSH
19397: LD_INT 21
19399: PUSH
19400: LD_INT 1
19402: PUSH
19403: EMPTY
19404: LIST
19405: LIST
19406: PUSH
19407: LD_INT 25
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: LIST
19421: PPUSH
19422: CALL_OW 69
19426: PPUSH
19427: LD_EXP 42
19431: PPUSH
19432: CALL_OW 180
// end ; end ; end ;
19436: PPOPN 2
19438: END
// on UpgradeComplete ( building ) do var i ;
19439: LD_INT 0
19441: PPUSH
// begin if GetSide ( building ) = 1 then
19442: LD_VAR 0 1
19446: PPUSH
19447: CALL_OW 255
19451: PUSH
19452: LD_INT 1
19454: EQUAL
19455: IFFALSE 19655
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19457: LD_INT 22
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: LD_INT 30
19472: PUSH
19473: LD_INT 7
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 30
19482: PUSH
19483: LD_INT 8
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: LD_INT 30
19495: PUSH
19496: LD_INT 11
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 1
19505: PUSH
19506: LD_INT 2
19508: PUSH
19509: LD_INT 30
19511: PUSH
19512: LD_INT 26
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: LD_INT 30
19521: PUSH
19522: LD_INT 27
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 30
19531: PUSH
19532: LD_INT 28
19534: PUSH
19535: EMPTY
19536: LIST
19537: LIST
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: LIST
19558: LIST
19559: PUSH
19560: EMPTY
19561: LIST
19562: LIST
19563: PPUSH
19564: CALL_OW 69
19568: PUSH
19569: LD_INT 0
19571: GREATER
19572: PUSH
19573: LD_INT 22
19575: PUSH
19576: LD_INT 1
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PUSH
19583: LD_INT 2
19585: PUSH
19586: LD_INT 30
19588: PUSH
19589: LD_INT 26
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: PUSH
19596: LD_INT 30
19598: PUSH
19599: LD_INT 27
19601: PUSH
19602: EMPTY
19603: LIST
19604: LIST
19605: PUSH
19606: LD_INT 30
19608: PUSH
19609: LD_INT 28
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: PUSH
19616: EMPTY
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: PUSH
19622: EMPTY
19623: LIST
19624: LIST
19625: PPUSH
19626: CALL_OW 69
19630: PUSH
19631: LD_INT 0
19633: GREATER
19634: AND
19635: PUSH
19636: LD_EXP 57
19640: PUSH
19641: LD_INT 0
19643: EQUAL
19644: AND
19645: IFFALSE 19655
// eventVar1 = 1 ;
19647: LD_ADDR_EXP 57
19651: PUSH
19652: LD_INT 1
19654: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19655: LD_VAR 0 1
19659: PPUSH
19660: CALL_OW 255
19664: PUSH
19665: LD_INT 2
19667: EQUAL
19668: IFFALSE 19773
// begin if GetBType ( building ) = b_barracks then
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 266
19679: PUSH
19680: LD_INT 5
19682: EQUAL
19683: IFFALSE 19773
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
19685: LD_ADDR_VAR 0 2
19689: PUSH
19690: LD_INT 22
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: LD_INT 25
19702: PUSH
19703: LD_INT 1
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: PUSH
19710: LD_INT 3
19712: PUSH
19713: LD_INT 54
19715: PUSH
19716: EMPTY
19717: LIST
19718: PUSH
19719: EMPTY
19720: LIST
19721: LIST
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: PUSH
19733: LD_EXP 26
19737: PUSH
19738: EMPTY
19739: LIST
19740: DIFF
19741: PUSH
19742: FOR_IN
19743: IFFALSE 19761
// ComEnterUnit ( i , building ) ;
19745: LD_VAR 0 2
19749: PPUSH
19750: LD_VAR 0 1
19754: PPUSH
19755: CALL_OW 120
19759: GO 19742
19761: POP
19762: POP
// arArm = building ;
19763: LD_ADDR_EXP 44
19767: PUSH
19768: LD_VAR 0 1
19772: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
19773: LD_VAR 0 1
19777: PPUSH
19778: CALL_OW 255
19782: PUSH
19783: LD_INT 3
19785: EQUAL
19786: IFFALSE 20259
// begin if GetBType ( building ) = b_factory then
19788: LD_VAR 0 1
19792: PPUSH
19793: CALL_OW 266
19797: PUSH
19798: LD_INT 3
19800: EQUAL
19801: IFFALSE 19868
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19803: LD_ADDR_VAR 0 2
19807: PUSH
19808: LD_INT 22
19810: PUSH
19811: LD_INT 3
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 25
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PPUSH
19832: CALL_OW 69
19836: PUSH
19837: FOR_IN
19838: IFFALSE 19856
// ComEnterUnit ( i , building ) ;
19840: LD_VAR 0 2
19844: PPUSH
19845: LD_VAR 0 1
19849: PPUSH
19850: CALL_OW 120
19854: GO 19837
19856: POP
19857: POP
// ruFab = building ;
19858: LD_ADDR_EXP 34
19862: PUSH
19863: LD_VAR 0 1
19867: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19868: LD_INT 22
19870: PUSH
19871: LD_INT 3
19873: PUSH
19874: EMPTY
19875: LIST
19876: LIST
19877: PUSH
19878: LD_INT 21
19880: PUSH
19881: LD_INT 3
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 30
19890: PUSH
19891: LD_INT 8
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: PPUSH
19903: CALL_OW 69
19907: PUSH
19908: LD_INT 2
19910: EQUAL
19911: IFFALSE 20119
// begin for i = 1 to 2 do
19913: LD_ADDR_VAR 0 2
19917: PUSH
19918: DOUBLE
19919: LD_INT 1
19921: DEC
19922: ST_TO_ADDR
19923: LD_INT 2
19925: PUSH
19926: FOR_TO
19927: IFFALSE 20014
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19929: LD_INT 22
19931: PUSH
19932: LD_INT 3
19934: PUSH
19935: EMPTY
19936: LIST
19937: LIST
19938: PUSH
19939: LD_INT 25
19941: PUSH
19942: LD_INT 4
19944: PUSH
19945: EMPTY
19946: LIST
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PPUSH
19953: CALL_OW 69
19957: PUSH
19958: LD_VAR 0 2
19962: ARRAY
19963: PPUSH
19964: LD_INT 22
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 21
19976: PUSH
19977: LD_INT 3
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 30
19986: PUSH
19987: LD_INT 8
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: LIST
19998: PPUSH
19999: CALL_OW 69
20003: PUSH
20004: LD_INT 1
20006: ARRAY
20007: PPUSH
20008: CALL_OW 120
20012: GO 19926
20014: POP
20015: POP
// for i = 3 to 4 do
20016: LD_ADDR_VAR 0 2
20020: PUSH
20021: DOUBLE
20022: LD_INT 3
20024: DEC
20025: ST_TO_ADDR
20026: LD_INT 4
20028: PUSH
20029: FOR_TO
20030: IFFALSE 20117
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
20032: LD_INT 22
20034: PUSH
20035: LD_INT 3
20037: PUSH
20038: EMPTY
20039: LIST
20040: LIST
20041: PUSH
20042: LD_INT 25
20044: PUSH
20045: LD_INT 4
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: PPUSH
20056: CALL_OW 69
20060: PUSH
20061: LD_VAR 0 2
20065: ARRAY
20066: PPUSH
20067: LD_INT 22
20069: PUSH
20070: LD_INT 3
20072: PUSH
20073: EMPTY
20074: LIST
20075: LIST
20076: PUSH
20077: LD_INT 21
20079: PUSH
20080: LD_INT 3
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: PUSH
20087: LD_INT 30
20089: PUSH
20090: LD_INT 8
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: PPUSH
20102: CALL_OW 69
20106: PUSH
20107: LD_INT 2
20109: ARRAY
20110: PPUSH
20111: CALL_OW 120
20115: GO 20029
20117: POP
20118: POP
// end ; if GetBType ( building ) = b_barracks then
20119: LD_VAR 0 1
20123: PPUSH
20124: CALL_OW 266
20128: PUSH
20129: LD_INT 5
20131: EQUAL
20132: IFFALSE 20259
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
20134: LD_ADDR_VAR 0 2
20138: PUSH
20139: LD_INT 22
20141: PUSH
20142: LD_INT 3
20144: PUSH
20145: EMPTY
20146: LIST
20147: LIST
20148: PUSH
20149: LD_INT 25
20151: PUSH
20152: LD_INT 1
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 3
20161: PUSH
20162: LD_INT 54
20164: PUSH
20165: EMPTY
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: PPUSH
20177: CALL_OW 69
20181: PUSH
20182: FOR_IN
20183: IFFALSE 20201
// ComEnterUnit ( i , building ) ;
20185: LD_VAR 0 2
20189: PPUSH
20190: LD_VAR 0 1
20194: PPUSH
20195: CALL_OW 120
20199: GO 20182
20201: POP
20202: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
20203: LD_INT 22
20205: PUSH
20206: LD_INT 3
20208: PUSH
20209: EMPTY
20210: LIST
20211: LIST
20212: PUSH
20213: LD_INT 30
20215: PUSH
20216: LD_INT 5
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PPUSH
20227: CALL_OW 69
20231: PUSH
20232: LD_INT 0
20234: EQUAL
20235: IFFALSE 20249
// ruArm1 = building else
20237: LD_ADDR_EXP 32
20241: PUSH
20242: LD_VAR 0 1
20246: ST_TO_ADDR
20247: GO 20259
// ruArm2 = building ;
20249: LD_ADDR_EXP 33
20253: PUSH
20254: LD_VAR 0 1
20258: ST_TO_ADDR
// end ; end ; end ;
20259: PPOPN 2
20261: END
// on EnterBuilding ( building , human ) do var rnd ;
20262: LD_INT 0
20264: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
20265: LD_VAR 0 2
20269: PPUSH
20270: CALL_OW 255
20274: PUSH
20275: LD_INT 2
20277: EQUAL
20278: PUSH
20279: LD_VAR 0 2
20283: PPUSH
20284: CALL_OW 257
20288: PUSH
20289: LD_INT 1
20291: EQUAL
20292: AND
20293: PUSH
20294: LD_VAR 0 1
20298: PUSH
20299: LD_EXP 44
20303: EQUAL
20304: AND
20305: IFFALSE 20352
// begin wait ( 0 0$1 ) ;
20307: LD_INT 35
20309: PPUSH
20310: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
20314: LD_ADDR_VAR 0 3
20318: PUSH
20319: LD_INT 1
20321: PPUSH
20322: LD_INT 100
20324: PPUSH
20325: CALL_OW 12
20329: ST_TO_ADDR
// if rnd > 50 then
20330: LD_VAR 0 3
20334: PUSH
20335: LD_INT 50
20337: GREATER
20338: IFFALSE 20352
// SetClass ( human , class_mortar ) ;
20340: LD_VAR 0 2
20344: PPUSH
20345: LD_INT 8
20347: PPUSH
20348: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
20352: LD_VAR 0 2
20356: PPUSH
20357: CALL_OW 255
20361: PUSH
20362: LD_INT 3
20364: EQUAL
20365: PUSH
20366: LD_VAR 0 2
20370: PPUSH
20371: CALL_OW 257
20375: PUSH
20376: LD_INT 1
20378: EQUAL
20379: AND
20380: PUSH
20381: LD_VAR 0 1
20385: PUSH
20386: LD_EXP 32
20390: EQUAL
20391: PUSH
20392: LD_VAR 0 1
20396: PUSH
20397: LD_EXP 33
20401: EQUAL
20402: OR
20403: PUSH
20404: EMPTY
20405: LIST
20406: AND
20407: IFFALSE 20428
// begin wait ( 0 0$1 ) ;
20409: LD_INT 35
20411: PPUSH
20412: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
20416: LD_VAR 0 2
20420: PPUSH
20421: LD_INT 9
20423: PPUSH
20424: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
20428: LD_VAR 0 2
20432: PPUSH
20433: CALL_OW 255
20437: PUSH
20438: LD_INT 3
20440: EQUAL
20441: PUSH
20442: LD_VAR 0 2
20446: PPUSH
20447: CALL_OW 257
20451: PUSH
20452: LD_INT 9
20454: EQUAL
20455: AND
20456: PUSH
20457: LD_VAR 0 1
20461: PPUSH
20462: CALL_OW 266
20466: PUSH
20467: LD_INT 32
20469: EQUAL
20470: AND
20471: IFFALSE 20492
// begin wait ( 0 0$1 ) ;
20473: LD_INT 35
20475: PPUSH
20476: CALL_OW 67
// SetClass ( human , 1 ) ;
20480: LD_VAR 0 2
20484: PPUSH
20485: LD_INT 1
20487: PPUSH
20488: CALL_OW 336
// end ; end ;
20492: PPOPN 3
20494: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
20495: LD_VAR 0 1
20499: PUSH
20500: LD_INT 1
20502: EQUAL
20503: PUSH
20504: LD_VAR 0 2
20508: PUSH
20509: LD_INT 2
20511: EQUAL
20512: AND
20513: PUSH
20514: LD_INT 1
20516: PPUSH
20517: LD_INT 2
20519: PPUSH
20520: CALL_OW 81
20524: PUSH
20525: LD_INT 1
20527: EQUAL
20528: AND
20529: IFFALSE 20550
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20531: LD_EXP 24
20535: PPUSH
20536: LD_STRING D6b-Pow-1
20538: PPUSH
20539: CALL_OW 94
// YouLost ( Powell ) ;
20543: LD_STRING Powell
20545: PPUSH
20546: CALL_OW 104
// end ; end ;
20550: PPOPN 2
20552: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 2 ) and GetAttitude ( 1 , 2 ) = att_friend do
20553: LD_INT 23
20555: PPUSH
20556: LD_INT 22
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: LD_INT 21
20568: PUSH
20569: LD_INT 3
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 70
20584: PUSH
20585: LD_INT 23
20587: PPUSH
20588: LD_INT 22
20590: PUSH
20591: LD_INT 1
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: LD_INT 21
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: LD_INT 58
20610: PUSH
20611: EMPTY
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: LIST
20618: PPUSH
20619: CALL_OW 70
20623: PUSH
20624: LD_INT 2
20626: GREATER
20627: OR
20628: PUSH
20629: LD_INT 1
20631: PPUSH
20632: LD_INT 2
20634: PPUSH
20635: CALL_OW 81
20639: PUSH
20640: LD_INT 1
20642: EQUAL
20643: AND
20644: IFFALSE 20668
20646: GO 20648
20648: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20649: LD_EXP 24
20653: PPUSH
20654: LD_STRING D6b-Pow-1
20656: PPUSH
20657: CALL_OW 94
// YouLost ( Powell ) ;
20661: LD_STRING Powell
20663: PPUSH
20664: CALL_OW 104
// end ;
20668: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
20669: LD_VAR 0 1
20673: PUSH
20674: LD_EXP 1
20678: EQUAL
20679: IFFALSE 20688
// YouLost ( JMM ) ;
20681: LD_STRING JMM
20683: PPUSH
20684: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20688: LD_VAR 0 1
20692: PPUSH
20693: CALL_OW 255
20697: PUSH
20698: LD_INT 3
20700: EQUAL
20701: PUSH
20702: LD_VAR 0 1
20706: PPUSH
20707: CALL_OW 247
20711: PUSH
20712: LD_INT 3
20714: EQUAL
20715: AND
20716: IFFALSE 21408
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20718: LD_VAR 0 1
20722: PPUSH
20723: CALL_OW 266
20727: PUSH
20728: LD_INT 31
20730: EQUAL
20731: PUSH
20732: LD_VAR 0 1
20736: PPUSH
20737: CALL_OW 266
20741: PUSH
20742: LD_INT 32
20744: EQUAL
20745: OR
20746: PUSH
20747: LD_VAR 0 1
20751: PPUSH
20752: CALL_OW 266
20756: PUSH
20757: LD_INT 36
20759: EQUAL
20760: OR
20761: PUSH
20762: LD_VAR 0 1
20766: PPUSH
20767: CALL_OW 266
20771: PUSH
20772: LD_INT 0
20774: EQUAL
20775: OR
20776: PUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 266
20786: PUSH
20787: LD_INT 24
20789: EQUAL
20790: OR
20791: PUSH
20792: LD_VAR 0 1
20796: PPUSH
20797: CALL_OW 266
20801: PUSH
20802: LD_INT 17
20804: EQUAL
20805: OR
20806: PUSH
20807: LD_VAR 0 1
20811: PPUSH
20812: CALL_OW 266
20816: PUSH
20817: LD_INT 25
20819: EQUAL
20820: OR
20821: PUSH
20822: LD_VAR 0 1
20826: PPUSH
20827: CALL_OW 266
20831: PUSH
20832: LD_INT 19
20834: EQUAL
20835: OR
20836: PUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 266
20846: PUSH
20847: LD_INT 20
20849: EQUAL
20850: OR
20851: PUSH
20852: LD_VAR 0 1
20856: PPUSH
20857: CALL_OW 266
20861: PUSH
20862: LD_INT 18
20864: EQUAL
20865: OR
20866: PUSH
20867: LD_VAR 0 1
20871: PPUSH
20872: CALL_OW 266
20876: PUSH
20877: LD_INT 21
20879: EQUAL
20880: OR
20881: PUSH
20882: LD_VAR 0 1
20886: PPUSH
20887: CALL_OW 266
20891: PUSH
20892: LD_INT 23
20894: EQUAL
20895: OR
20896: PUSH
20897: LD_VAR 0 1
20901: PPUSH
20902: CALL_OW 266
20906: PUSH
20907: LD_INT 16
20909: EQUAL
20910: OR
20911: PUSH
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 266
20921: PUSH
20922: LD_INT 6
20924: EQUAL
20925: OR
20926: PUSH
20927: LD_VAR 0 1
20931: PPUSH
20932: CALL_OW 266
20936: PUSH
20937: LD_INT 29
20939: EQUAL
20940: OR
20941: PUSH
20942: LD_VAR 0 1
20946: PPUSH
20947: CALL_OW 266
20951: PUSH
20952: LD_INT 26
20954: EQUAL
20955: OR
20956: PUSH
20957: LD_VAR 0 1
20961: PPUSH
20962: CALL_OW 266
20966: PUSH
20967: LD_INT 30
20969: EQUAL
20970: OR
20971: PUSH
20972: LD_VAR 0 1
20976: PPUSH
20977: CALL_OW 266
20981: PUSH
20982: LD_INT 28
20984: EQUAL
20985: OR
20986: PUSH
20987: LD_VAR 0 1
20991: PPUSH
20992: CALL_OW 266
20996: PUSH
20997: LD_INT 27
20999: EQUAL
21000: OR
21001: PUSH
21002: LD_VAR 0 1
21006: PPUSH
21007: CALL_OW 266
21011: PUSH
21012: LD_INT 33
21014: EQUAL
21015: OR
21016: PUSH
21017: LD_VAR 0 1
21021: PPUSH
21022: CALL_OW 266
21026: PUSH
21027: LD_INT 2
21029: EQUAL
21030: OR
21031: PUSH
21032: LD_VAR 0 1
21036: PPUSH
21037: CALL_OW 266
21041: PUSH
21042: LD_INT 4
21044: EQUAL
21045: OR
21046: IFFALSE 21132
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
21048: LD_ADDR_EXP 41
21052: PUSH
21053: LD_EXP 41
21057: PUSH
21058: LD_VAR 0 1
21062: PPUSH
21063: CALL_OW 266
21067: ADD
21068: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21069: LD_ADDR_EXP 41
21073: PUSH
21074: LD_EXP 41
21078: PUSH
21079: LD_VAR 0 1
21083: PPUSH
21084: CALL_OW 250
21088: ADD
21089: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21090: LD_ADDR_EXP 41
21094: PUSH
21095: LD_EXP 41
21099: PUSH
21100: LD_VAR 0 1
21104: PPUSH
21105: CALL_OW 251
21109: ADD
21110: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21111: LD_ADDR_EXP 41
21115: PUSH
21116: LD_EXP 41
21120: PUSH
21121: LD_VAR 0 1
21125: PPUSH
21126: CALL_OW 254
21130: ADD
21131: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
21132: LD_VAR 0 1
21136: PPUSH
21137: CALL_OW 266
21141: PUSH
21142: LD_INT 1
21144: EQUAL
21145: IFFALSE 21224
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
21147: LD_ADDR_EXP 41
21151: PUSH
21152: LD_EXP 41
21156: PUSH
21157: LD_INT 0
21159: ADD
21160: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21161: LD_ADDR_EXP 41
21165: PUSH
21166: LD_EXP 41
21170: PUSH
21171: LD_VAR 0 1
21175: PPUSH
21176: CALL_OW 250
21180: ADD
21181: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21182: LD_ADDR_EXP 41
21186: PUSH
21187: LD_EXP 41
21191: PUSH
21192: LD_VAR 0 1
21196: PPUSH
21197: CALL_OW 251
21201: ADD
21202: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21203: LD_ADDR_EXP 41
21207: PUSH
21208: LD_EXP 41
21212: PUSH
21213: LD_VAR 0 1
21217: PPUSH
21218: CALL_OW 254
21222: ADD
21223: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
21224: LD_VAR 0 1
21228: PPUSH
21229: CALL_OW 266
21233: PUSH
21234: LD_INT 3
21236: EQUAL
21237: IFFALSE 21316
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
21239: LD_ADDR_EXP 41
21243: PUSH
21244: LD_EXP 41
21248: PUSH
21249: LD_INT 2
21251: ADD
21252: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21253: LD_ADDR_EXP 41
21257: PUSH
21258: LD_EXP 41
21262: PUSH
21263: LD_VAR 0 1
21267: PPUSH
21268: CALL_OW 250
21272: ADD
21273: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21274: LD_ADDR_EXP 41
21278: PUSH
21279: LD_EXP 41
21283: PUSH
21284: LD_VAR 0 1
21288: PPUSH
21289: CALL_OW 251
21293: ADD
21294: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21295: LD_ADDR_EXP 41
21299: PUSH
21300: LD_EXP 41
21304: PUSH
21305: LD_VAR 0 1
21309: PPUSH
21310: CALL_OW 254
21314: ADD
21315: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
21316: LD_VAR 0 1
21320: PPUSH
21321: CALL_OW 266
21325: PUSH
21326: LD_INT 5
21328: EQUAL
21329: IFFALSE 21408
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
21331: LD_ADDR_EXP 41
21335: PUSH
21336: LD_EXP 41
21340: PUSH
21341: LD_INT 4
21343: ADD
21344: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
21345: LD_ADDR_EXP 41
21349: PUSH
21350: LD_EXP 41
21354: PUSH
21355: LD_VAR 0 1
21359: PPUSH
21360: CALL_OW 250
21364: ADD
21365: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
21366: LD_ADDR_EXP 41
21370: PUSH
21371: LD_EXP 41
21375: PUSH
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 251
21385: ADD
21386: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21387: LD_ADDR_EXP 41
21391: PUSH
21392: LD_EXP 41
21396: PUSH
21397: LD_VAR 0 1
21401: PPUSH
21402: CALL_OW 254
21406: ADD
21407: ST_TO_ADDR
// end ; end ; end ;
21408: PPOPN 1
21410: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
21411: LD_ADDR_OWVAR 57
21415: PUSH
21416: LD_INT 0
21418: ST_TO_ADDR
// fastEnd = 1 ;
21419: LD_ADDR_EXP 56
21423: PUSH
21424: LD_INT 1
21426: ST_TO_ADDR
// FinishMission ;
21427: CALL 22611 0 0
// end ; end_of_file
21431: PPOPN 1
21433: END
// export function PrepareNature ; var i , un ; begin
21434: LD_INT 0
21436: PPUSH
21437: PPUSH
21438: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
21439: LD_ADDR_VAR 0 2
21443: PUSH
21444: DOUBLE
21445: LD_INT 1
21447: DEC
21448: ST_TO_ADDR
21449: LD_OWVAR 67
21453: PUSH
21454: LD_INT 1
21456: PPUSH
21457: LD_INT 5
21459: PPUSH
21460: CALL_OW 12
21464: PLUS
21465: PUSH
21466: FOR_TO
21467: IFFALSE 21612
// begin hc_sex = sex_male ;
21469: LD_ADDR_OWVAR 27
21473: PUSH
21474: LD_INT 1
21476: ST_TO_ADDR
// uc_side = 0 ;
21477: LD_ADDR_OWVAR 20
21481: PUSH
21482: LD_INT 0
21484: ST_TO_ADDR
// uc_nation = nation_nature ;
21485: LD_ADDR_OWVAR 21
21489: PUSH
21490: LD_INT 0
21492: ST_TO_ADDR
// hc_class = class_apeman ;
21493: LD_ADDR_OWVAR 28
21497: PUSH
21498: LD_INT 12
21500: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
21501: LD_ADDR_OWVAR 31
21505: PUSH
21506: LD_INT 2
21508: PPUSH
21509: LD_INT 7
21511: PPUSH
21512: CALL_OW 12
21516: PUSH
21517: LD_OWVAR 67
21521: PLUS
21522: PUSH
21523: LD_INT 2
21525: PPUSH
21526: LD_INT 10
21528: PPUSH
21529: CALL_OW 12
21533: PUSH
21534: LD_INT 2
21536: PPUSH
21537: LD_INT 10
21539: PPUSH
21540: CALL_OW 12
21544: PUSH
21545: LD_INT 2
21547: PPUSH
21548: LD_INT 10
21550: PPUSH
21551: CALL_OW 12
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: LIST
21560: LIST
21561: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21562: LD_ADDR_OWVAR 35
21566: PUSH
21567: LD_INT 5
21569: NEG
21570: PPUSH
21571: LD_INT 5
21573: PPUSH
21574: CALL_OW 12
21578: PUSH
21579: LD_OWVAR 67
21583: MUL
21584: ST_TO_ADDR
// un = CreateHuman ;
21585: LD_ADDR_VAR 0 3
21589: PUSH
21590: CALL_OW 44
21594: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21595: LD_VAR 0 3
21599: PPUSH
21600: LD_INT 5
21602: PPUSH
21603: LD_INT 0
21605: PPUSH
21606: CALL_OW 49
// end ;
21610: GO 21466
21612: POP
21613: POP
// for i = 1 to Difficulty + 2 do
21614: LD_ADDR_VAR 0 2
21618: PUSH
21619: DOUBLE
21620: LD_INT 1
21622: DEC
21623: ST_TO_ADDR
21624: LD_OWVAR 67
21628: PUSH
21629: LD_INT 2
21631: PLUS
21632: PUSH
21633: FOR_TO
21634: IFFALSE 21743
// begin hc_sex = sex_male ;
21636: LD_ADDR_OWVAR 27
21640: PUSH
21641: LD_INT 1
21643: ST_TO_ADDR
// uc_side = 0 ;
21644: LD_ADDR_OWVAR 20
21648: PUSH
21649: LD_INT 0
21651: ST_TO_ADDR
// uc_nation = nation_nature ;
21652: LD_ADDR_OWVAR 21
21656: PUSH
21657: LD_INT 0
21659: ST_TO_ADDR
// hc_class = class_tiger ;
21660: LD_ADDR_OWVAR 28
21664: PUSH
21665: LD_INT 14
21667: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21668: LD_ADDR_OWVAR 31
21672: PUSH
21673: LD_EXP 36
21677: PUSH
21678: LD_INT 0
21680: PUSH
21681: LD_INT 0
21683: PUSH
21684: LD_INT 0
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21693: LD_ADDR_OWVAR 35
21697: PUSH
21698: LD_INT 5
21700: NEG
21701: PPUSH
21702: LD_INT 5
21704: PPUSH
21705: CALL_OW 12
21709: PUSH
21710: LD_OWVAR 67
21714: MUL
21715: ST_TO_ADDR
// un = CreateHuman ;
21716: LD_ADDR_VAR 0 3
21720: PUSH
21721: CALL_OW 44
21725: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21726: LD_VAR 0 3
21730: PPUSH
21731: LD_INT 6
21733: PPUSH
21734: LD_INT 0
21736: PPUSH
21737: CALL_OW 49
// end ;
21741: GO 21633
21743: POP
21744: POP
// for i = 1 to rand ( 3 , 4 ) do
21745: LD_ADDR_VAR 0 2
21749: PUSH
21750: DOUBLE
21751: LD_INT 1
21753: DEC
21754: ST_TO_ADDR
21755: LD_INT 3
21757: PPUSH
21758: LD_INT 4
21760: PPUSH
21761: CALL_OW 12
21765: PUSH
21766: FOR_TO
21767: IFFALSE 21861
// begin hc_sex = sex_male ;
21769: LD_ADDR_OWVAR 27
21773: PUSH
21774: LD_INT 1
21776: ST_TO_ADDR
// uc_side = 0 ;
21777: LD_ADDR_OWVAR 20
21781: PUSH
21782: LD_INT 0
21784: ST_TO_ADDR
// uc_nation = nation_nature ;
21785: LD_ADDR_OWVAR 21
21789: PUSH
21790: LD_INT 0
21792: ST_TO_ADDR
// hc_class = 18 ;
21793: LD_ADDR_OWVAR 28
21797: PUSH
21798: LD_INT 18
21800: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21801: LD_ADDR_OWVAR 31
21805: PUSH
21806: LD_EXP 36
21810: PUSH
21811: LD_INT 0
21813: PUSH
21814: LD_INT 0
21816: PUSH
21817: LD_INT 0
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: ST_TO_ADDR
// hc_agressivity = 0 ;
21826: LD_ADDR_OWVAR 35
21830: PUSH
21831: LD_INT 0
21833: ST_TO_ADDR
// un = CreateHuman ;
21834: LD_ADDR_VAR 0 3
21838: PUSH
21839: CALL_OW 44
21843: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21844: LD_VAR 0 3
21848: PPUSH
21849: LD_INT 6
21851: PPUSH
21852: LD_INT 0
21854: PPUSH
21855: CALL_OW 49
// end ;
21859: GO 21766
21861: POP
21862: POP
// end ; end_of_file
21863: LD_VAR 0 1
21867: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
21868: LD_EXP 45
21872: PUSH
21873: LD_INT 1
21875: EQUAL
21876: IFFALSE 21960
21878: GO 21880
21880: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 6 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
21881: LD_INT 7
21883: PPUSH
21884: LD_INT 5
21886: PPUSH
21887: LD_INT 6
21889: PUSH
21890: LD_INT 8
21892: PUSH
21893: LD_INT 9
21895: PUSH
21896: EMPTY
21897: LIST
21898: LIST
21899: LIST
21900: PUSH
21901: LD_OWVAR 67
21905: ARRAY
21906: PPUSH
21907: LD_EXP 35
21911: PPUSH
21912: LD_EXP 36
21916: PPUSH
21917: CALL_OW 12
21921: PPUSH
21922: LD_INT 2
21924: PPUSH
21925: LD_INT 1
21927: PPUSH
21928: LD_INT 1
21930: PPUSH
21931: EMPTY
21932: PPUSH
21933: LD_INT 25
21935: PUSH
21936: LD_INT 26
21938: PUSH
21939: LD_INT 27
21941: PUSH
21942: LD_INT 28
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: PPUSH
21951: EMPTY
21952: PPUSH
21953: LD_INT 1
21955: PPUSH
21956: CALL 13362 0 11
21960: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
21961: LD_EXP 45
21965: PUSH
21966: LD_INT 1
21968: EQUAL
21969: IFFALSE 22057
21971: GO 21973
21973: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 9 , 10 , 12 ] [ Difficulty ] , 0 , 0 , [ 3 , 5 , 6 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21974: LD_INT 5
21976: PPUSH
21977: LD_INT 2
21979: PPUSH
21980: LD_INT 9
21982: PUSH
21983: LD_INT 10
21985: PUSH
21986: LD_INT 12
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: LIST
21993: PUSH
21994: LD_OWVAR 67
21998: ARRAY
21999: PPUSH
22000: LD_INT 0
22002: PPUSH
22003: LD_INT 0
22005: PPUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 5
22011: PUSH
22012: LD_INT 6
22014: PUSH
22015: EMPTY
22016: LIST
22017: LIST
22018: LIST
22019: PUSH
22020: LD_OWVAR 67
22024: ARRAY
22025: PPUSH
22026: LD_INT 0
22028: PPUSH
22029: LD_EXP 35
22033: PPUSH
22034: LD_EXP 36
22038: PPUSH
22039: CALL_OW 12
22043: PPUSH
22044: LD_INT 7
22046: PPUSH
22047: LD_INT 9
22049: PPUSH
22050: LD_INT 1
22052: PPUSH
22053: CALL 15066 0 11
22057: END
// every 6 6$30 + 3 3$0 trigger joinEpsilon = 1 do
22058: LD_EXP 28
22062: PUSH
22063: LD_INT 1
22065: EQUAL
22066: IFFALSE 22129
22068: GO 22070
22070: DISABLE
// begin enable ;
22071: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , 0 , 0 , ru_sold_counter div 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22072: LD_INT 6
22074: PPUSH
22075: LD_INT 3
22077: PPUSH
22078: LD_EXP 54
22082: PPUSH
22083: LD_INT 0
22085: PPUSH
22086: LD_INT 0
22088: PPUSH
22089: LD_INT 0
22091: PPUSH
22092: LD_EXP 54
22096: PUSH
22097: LD_INT 3
22099: DIV
22100: PPUSH
22101: LD_EXP 35
22105: PPUSH
22106: LD_EXP 36
22110: PPUSH
22111: CALL_OW 12
22115: PPUSH
22116: LD_INT 17
22118: PPUSH
22119: LD_INT 18
22121: PPUSH
22122: LD_INT 1
22124: PPUSH
22125: CALL 15066 0 11
// end ;
22129: END
// every 6 6$30 + 3 3$0 trigger joinEpsilon = 1 do
22130: LD_EXP 28
22134: PUSH
22135: LD_INT 1
22137: EQUAL
22138: IFFALSE 22215
22140: GO 22142
22142: DISABLE
// begin enable ;
22143: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22144: LD_INT 17
22146: PPUSH
22147: LD_INT 6
22149: PPUSH
22150: LD_EXP 53
22154: PPUSH
22155: LD_EXP 35
22159: PPUSH
22160: LD_EXP 36
22164: PPUSH
22165: CALL_OW 12
22169: PPUSH
22170: LD_INT 3
22172: PPUSH
22173: LD_INT 1
22175: PPUSH
22176: LD_INT 1
22178: PUSH
22179: LD_INT 3
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PPUSH
22186: LD_INT 43
22188: PUSH
22189: LD_INT 44
22191: PUSH
22192: LD_INT 45
22194: PUSH
22195: LD_INT 46
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: PPUSH
22204: EMPTY
22205: PPUSH
22206: EMPTY
22207: PPUSH
22208: LD_INT 1
22210: PPUSH
22211: CALL 13362 0 11
// end ;
22215: END
// every 10 10$00 trigger joinEpsilon do
22216: LD_EXP 28
22220: IFFALSE 22254
22222: GO 22224
22224: DISABLE
// begin enable ;
22225: ENABLE
// ru_vehs_counter := ru_vehs_counter + 3 ;
22226: LD_ADDR_EXP 53
22230: PUSH
22231: LD_EXP 53
22235: PUSH
22236: LD_INT 3
22238: PLUS
22239: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + 3 ;
22240: LD_ADDR_EXP 54
22244: PUSH
22245: LD_EXP 54
22249: PUSH
22250: LD_INT 3
22252: PLUS
22253: ST_TO_ADDR
// end ; end_of_file
22254: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22255: LD_INT 54
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 321
22265: PUSH
22266: LD_INT 2
22268: EQUAL
22269: PUSH
22270: LD_INT 55
22272: PPUSH
22273: LD_INT 1
22275: PPUSH
22276: CALL_OW 321
22280: PUSH
22281: LD_INT 2
22283: EQUAL
22284: AND
22285: PUSH
22286: LD_INT 21
22288: PPUSH
22289: LD_INT 1
22291: PPUSH
22292: CALL_OW 321
22296: PUSH
22297: LD_INT 2
22299: EQUAL
22300: AND
22301: PUSH
22302: LD_INT 22
22304: PPUSH
22305: LD_INT 1
22307: PPUSH
22308: CALL_OW 321
22312: PUSH
22313: LD_INT 2
22315: EQUAL
22316: AND
22317: PUSH
22318: LD_INT 12
22320: PPUSH
22321: LD_INT 1
22323: PPUSH
22324: CALL_OW 321
22328: PUSH
22329: LD_INT 1
22331: EQUAL
22332: PUSH
22333: LD_INT 32
22335: PPUSH
22336: LD_INT 1
22338: PPUSH
22339: CALL_OW 321
22343: PUSH
22344: LD_INT 1
22346: EQUAL
22347: OR
22348: PUSH
22349: EMPTY
22350: LIST
22351: AND
22352: PUSH
22353: LD_EXP 47
22357: PUSH
22358: LD_INT 1
22360: EQUAL
22361: AND
22362: PUSH
22363: LD_INT 22
22365: PUSH
22366: LD_INT 3
22368: PUSH
22369: EMPTY
22370: LIST
22371: LIST
22372: PUSH
22373: LD_INT 21
22375: PUSH
22376: LD_INT 1
22378: PUSH
22379: EMPTY
22380: LIST
22381: LIST
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PPUSH
22387: CALL_OW 69
22391: PUSH
22392: LD_INT 0
22394: EQUAL
22395: AND
22396: IFFALSE 22452
22398: GO 22400
22400: DISABLE
// begin case query ( QEndMission ) of 1 :
22401: LD_STRING QEndMission
22403: PPUSH
22404: CALL_OW 97
22408: PUSH
22409: LD_INT 1
22411: DOUBLE
22412: EQUAL
22413: IFTRUE 22417
22415: GO 22428
22417: POP
// begin end_the_mission_allowed = true ;
22418: LD_ADDR_OWVAR 57
22422: PUSH
22423: LD_INT 1
22425: ST_TO_ADDR
// end ; 2 :
22426: GO 22452
22428: LD_INT 2
22430: DOUBLE
22431: EQUAL
22432: IFTRUE 22436
22434: GO 22451
22436: POP
// begin fastEnd = 1 ;
22437: LD_ADDR_EXP 56
22441: PUSH
22442: LD_INT 1
22444: ST_TO_ADDR
// FinishMission ;
22445: CALL 22611 0 0
// end ; end ;
22449: GO 22452
22451: POP
// end ;
22452: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22453: LD_INT 54
22455: PPUSH
22456: LD_INT 1
22458: PPUSH
22459: CALL_OW 321
22463: PUSH
22464: LD_INT 2
22466: EQUAL
22467: PUSH
22468: LD_INT 55
22470: PPUSH
22471: LD_INT 1
22473: PPUSH
22474: CALL_OW 321
22478: PUSH
22479: LD_INT 2
22481: EQUAL
22482: AND
22483: PUSH
22484: LD_INT 21
22486: PPUSH
22487: LD_INT 1
22489: PPUSH
22490: CALL_OW 321
22494: PUSH
22495: LD_INT 2
22497: EQUAL
22498: AND
22499: PUSH
22500: LD_INT 22
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 321
22510: PUSH
22511: LD_INT 2
22513: EQUAL
22514: AND
22515: PUSH
22516: LD_INT 12
22518: PPUSH
22519: LD_INT 1
22521: PPUSH
22522: CALL_OW 321
22526: PUSH
22527: LD_INT 2
22529: EQUAL
22530: AND
22531: PUSH
22532: LD_INT 32
22534: PPUSH
22535: LD_INT 1
22537: PPUSH
22538: CALL_OW 321
22542: PUSH
22543: LD_INT 2
22545: EQUAL
22546: AND
22547: PUSH
22548: LD_EXP 56
22552: PUSH
22553: LD_INT 0
22555: EQUAL
22556: AND
22557: PUSH
22558: LD_EXP 47
22562: PUSH
22563: LD_INT 1
22565: EQUAL
22566: AND
22567: PUSH
22568: LD_INT 22
22570: PUSH
22571: LD_INT 3
22573: PUSH
22574: EMPTY
22575: LIST
22576: LIST
22577: PUSH
22578: LD_INT 21
22580: PUSH
22581: LD_INT 1
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PPUSH
22592: CALL_OW 69
22596: PUSH
22597: LD_INT 0
22599: EQUAL
22600: AND
22601: IFFALSE 22610
22603: GO 22605
22605: DISABLE
// FinishMission ;
22606: CALL 22611 0 0
22610: END
// export function FinishMission ; begin
22611: LD_INT 0
22613: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22614: LD_EXP 49
22618: PPUSH
22619: LD_STRING 10_KhatamStatus_1
22621: PPUSH
22622: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22626: LD_INT 12
22628: PPUSH
22629: LD_INT 1
22631: PPUSH
22632: CALL_OW 321
22636: PUSH
22637: LD_INT 2
22639: EQUAL
22640: IFFALSE 22654
// begin AddMedal ( sights , 1 ) ;
22642: LD_STRING sights
22644: PPUSH
22645: LD_INT 1
22647: PPUSH
22648: CALL_OW 101
// end else
22652: GO 22665
// begin AddMedal ( sights , - 1 ) ;
22654: LD_STRING sights
22656: PPUSH
22657: LD_INT 1
22659: NEG
22660: PPUSH
22661: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22665: LD_INT 32
22667: PPUSH
22668: LD_INT 1
22670: PPUSH
22671: CALL_OW 321
22675: PUSH
22676: LD_INT 2
22678: EQUAL
22679: IFFALSE 22693
// begin AddMedal ( computers , 1 ) ;
22681: LD_STRING computers
22683: PPUSH
22684: LD_INT 1
22686: PPUSH
22687: CALL_OW 101
// end else
22691: GO 22704
// begin AddMedal ( computers , - 1 ) ;
22693: LD_STRING computers
22695: PPUSH
22696: LD_INT 1
22698: NEG
22699: PPUSH
22700: CALL_OW 101
// end ; if arabianEscape = 0 then
22704: LD_EXP 46
22708: PUSH
22709: LD_INT 0
22711: EQUAL
22712: IFFALSE 22736
// begin AddMedal ( renegades , 2 ) ;
22714: LD_STRING renegades
22716: PPUSH
22717: LD_INT 2
22719: PPUSH
22720: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22724: LD_INT 0
22726: PPUSH
22727: LD_STRING 10_ScientistsEscape_1
22729: PPUSH
22730: CALL_OW 39
// end else
22734: GO 22747
// begin AddMedal ( renegades , - 1 ) ;
22736: LD_STRING renegades
22738: PPUSH
22739: LD_INT 1
22741: NEG
22742: PPUSH
22743: CALL_OW 101
// end ; SaveEpsilonBase ;
22747: CALL 23337 0 0
// Query ( kaj ) ;
22751: LD_STRING kaj
22753: PPUSH
22754: CALL_OW 97
// GiveMedals ( Main ) ;
22758: LD_STRING Main
22760: PPUSH
22761: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22765: LD_INT 22
22767: PUSH
22768: LD_INT 1
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: PUSH
22775: LD_INT 23
22777: PUSH
22778: LD_INT 1
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: PUSH
22785: LD_INT 21
22787: PUSH
22788: LD_INT 1
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: PUSH
22795: LD_INT 2
22797: PUSH
22798: LD_INT 25
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: PUSH
22808: LD_INT 25
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: PUSH
22818: LD_INT 25
22820: PUSH
22821: LD_INT 3
22823: PUSH
22824: EMPTY
22825: LIST
22826: LIST
22827: PUSH
22828: LD_INT 25
22830: PUSH
22831: LD_INT 4
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PUSH
22838: LD_INT 25
22840: PUSH
22841: LD_INT 5
22843: PUSH
22844: EMPTY
22845: LIST
22846: LIST
22847: PUSH
22848: EMPTY
22849: LIST
22850: LIST
22851: LIST
22852: LIST
22853: LIST
22854: LIST
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: LIST
22861: PPUSH
22862: CALL_OW 69
22866: PPUSH
22867: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22871: LD_EXP 1
22875: PPUSH
22876: LD_EXP 50
22880: PUSH
22881: LD_STRING JMM
22883: STR
22884: PPUSH
22885: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22889: LD_EXP 2
22893: PPUSH
22894: LD_EXP 50
22898: PUSH
22899: LD_STRING Brown
22901: STR
22902: PPUSH
22903: CALL 7724 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22907: LD_EXP 3
22911: PPUSH
22912: LD_EXP 50
22916: PUSH
22917: LD_STRING Donaldson
22919: STR
22920: PPUSH
22921: CALL 7724 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22925: LD_EXP 4
22929: PPUSH
22930: LD_EXP 50
22934: PUSH
22935: LD_STRING Bobby
22937: STR
22938: PPUSH
22939: CALL 7724 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22943: LD_EXP 5
22947: PPUSH
22948: LD_EXP 50
22952: PUSH
22953: LD_STRING Cyrus
22955: STR
22956: PPUSH
22957: CALL 7724 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22961: LD_EXP 6
22965: PPUSH
22966: LD_EXP 50
22970: PUSH
22971: LD_STRING Lisa
22973: STR
22974: PPUSH
22975: CALL 7724 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22979: LD_EXP 7
22983: PPUSH
22984: LD_EXP 50
22988: PUSH
22989: LD_STRING Frank
22991: STR
22992: PPUSH
22993: CALL 7724 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22997: LD_EXP 8
23001: PPUSH
23002: LD_EXP 50
23006: PUSH
23007: LD_STRING Kikuchi
23009: STR
23010: PPUSH
23011: CALL 7724 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23015: LD_EXP 9
23019: PPUSH
23020: LD_EXP 50
23024: PUSH
23025: LD_STRING Houten
23027: STR
23028: PPUSH
23029: CALL 7724 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23033: LD_EXP 10
23037: PPUSH
23038: LD_EXP 50
23042: PUSH
23043: LD_STRING Gary
23045: STR
23046: PPUSH
23047: CALL 7724 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23051: LD_EXP 11
23055: PPUSH
23056: LD_EXP 50
23060: PUSH
23061: LD_STRING Simms
23063: STR
23064: PPUSH
23065: CALL 7724 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23069: LD_EXP 12
23073: PPUSH
23074: LD_EXP 50
23078: PUSH
23079: LD_STRING Denis
23081: STR
23082: PPUSH
23083: CALL 7724 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23087: LD_EXP 13
23091: PPUSH
23092: LD_EXP 50
23096: PUSH
23097: LD_STRING Joan
23099: STR
23100: PPUSH
23101: CALL 7724 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23105: LD_EXP 15
23109: PPUSH
23110: LD_EXP 50
23114: PUSH
23115: LD_STRING Gladstone
23117: STR
23118: PPUSH
23119: CALL 7724 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23123: LD_EXP 17
23127: PPUSH
23128: LD_EXP 50
23132: PUSH
23133: LD_STRING DeltaDoctor
23135: STR
23136: PPUSH
23137: CALL 7724 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23141: LD_INT 50
23143: PUSH
23144: EMPTY
23145: LIST
23146: PUSH
23147: LD_INT 22
23149: PUSH
23150: LD_INT 1
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 21
23159: PUSH
23160: LD_INT 1
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: LD_INT 2
23169: PUSH
23170: LD_INT 25
23172: PUSH
23173: LD_INT 1
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 25
23182: PUSH
23183: LD_INT 2
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: PUSH
23190: LD_INT 25
23192: PUSH
23193: LD_INT 3
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 25
23202: PUSH
23203: LD_INT 4
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: PUSH
23217: EMPTY
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: PUSH
23228: LD_EXP 1
23232: PUSH
23233: LD_EXP 2
23237: PUSH
23238: LD_EXP 3
23242: PUSH
23243: LD_EXP 4
23247: PUSH
23248: LD_EXP 5
23252: PUSH
23253: LD_EXP 6
23257: PUSH
23258: LD_EXP 7
23262: PUSH
23263: LD_EXP 15
23267: PUSH
23268: LD_EXP 8
23272: PUSH
23273: LD_EXP 12
23277: PUSH
23278: LD_EXP 13
23282: PUSH
23283: LD_EXP 9
23287: PUSH
23288: LD_EXP 11
23292: PUSH
23293: LD_EXP 10
23297: PUSH
23298: LD_EXP 17
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: LIST
23318: LIST
23319: DIFF
23320: PPUSH
23321: LD_STRING 10_other_survivors
23323: PPUSH
23324: CALL_OW 38
// YouWin ;
23328: CALL_OW 103
// end ;
23332: LD_VAR 0 1
23336: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
23337: LD_INT 0
23339: PPUSH
23340: PPUSH
23341: PPUSH
23342: PPUSH
// epsilonBase = [ ] ;
23343: LD_ADDR_VAR 0 2
23347: PUSH
23348: EMPTY
23349: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
23350: LD_ADDR_VAR 0 3
23354: PUSH
23355: LD_INT 22
23357: PUSH
23358: LD_INT 1
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: PUSH
23365: LD_INT 21
23367: PUSH
23368: LD_INT 3
23370: PUSH
23371: EMPTY
23372: LIST
23373: LIST
23374: PUSH
23375: LD_INT 50
23377: PUSH
23378: EMPTY
23379: LIST
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 69
23390: ST_TO_ADDR
// for i in buildings do
23391: LD_ADDR_VAR 0 4
23395: PUSH
23396: LD_VAR 0 3
23400: PUSH
23401: FOR_IN
23402: IFFALSE 23839
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
23404: LD_VAR 0 4
23408: PPUSH
23409: CALL_OW 266
23413: PUSH
23414: LD_INT 6
23416: PUSH
23417: LD_INT 7
23419: PUSH
23420: LD_INT 8
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: LIST
23427: IN
23428: IFFALSE 23542
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
23430: LD_ADDR_VAR 0 2
23434: PUSH
23435: LD_VAR 0 2
23439: PUSH
23440: LD_VAR 0 4
23444: PPUSH
23445: CALL_OW 266
23449: PUSH
23450: LD_VAR 0 4
23454: PPUSH
23455: CALL_OW 250
23459: PUSH
23460: LD_VAR 0 4
23464: PPUSH
23465: CALL_OW 251
23469: PUSH
23470: LD_VAR 0 4
23474: PPUSH
23475: CALL_OW 254
23479: PUSH
23480: LD_VAR 0 4
23484: PPUSH
23485: CALL_OW 267
23489: PUSH
23490: LD_VAR 0 4
23494: PPUSH
23495: CALL_OW 248
23499: PUSH
23500: LD_VAR 0 4
23504: PPUSH
23505: LD_INT 1
23507: PPUSH
23508: CALL_OW 268
23512: PUSH
23513: LD_VAR 0 4
23517: PPUSH
23518: LD_INT 2
23520: PPUSH
23521: CALL_OW 268
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: PUSH
23536: EMPTY
23537: LIST
23538: ADD
23539: ST_TO_ADDR
23540: GO 23837
// if GetBType ( i ) = b_bunker then
23542: LD_VAR 0 4
23546: PPUSH
23547: CALL_OW 266
23551: PUSH
23552: LD_INT 32
23554: EQUAL
23555: IFFALSE 23652
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
23557: LD_ADDR_VAR 0 2
23561: PUSH
23562: LD_VAR 0 2
23566: PUSH
23567: LD_VAR 0 4
23571: PPUSH
23572: CALL_OW 266
23576: PUSH
23577: LD_VAR 0 4
23581: PPUSH
23582: CALL_OW 250
23586: PUSH
23587: LD_VAR 0 4
23591: PPUSH
23592: CALL_OW 251
23596: PUSH
23597: LD_VAR 0 4
23601: PPUSH
23602: CALL_OW 254
23606: PUSH
23607: LD_VAR 0 4
23611: PPUSH
23612: CALL_OW 267
23616: PUSH
23617: LD_VAR 0 4
23621: PPUSH
23622: CALL_OW 248
23626: PUSH
23627: LD_VAR 0 4
23631: PPUSH
23632: CALL_OW 269
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: PUSH
23646: EMPTY
23647: LIST
23648: ADD
23649: ST_TO_ADDR
23650: GO 23837
// if GetBType ( i ) = b_factory then
23652: LD_VAR 0 4
23656: PPUSH
23657: CALL_OW 266
23661: PUSH
23662: LD_INT 3
23664: EQUAL
23665: IFFALSE 23755
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
23667: LD_ADDR_VAR 0 2
23671: PUSH
23672: LD_VAR 0 2
23676: PPUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 4
23684: PPUSH
23685: CALL_OW 266
23689: PUSH
23690: LD_VAR 0 4
23694: PPUSH
23695: CALL_OW 250
23699: PUSH
23700: LD_VAR 0 4
23704: PPUSH
23705: CALL_OW 251
23709: PUSH
23710: LD_VAR 0 4
23714: PPUSH
23715: CALL_OW 254
23719: PUSH
23720: LD_VAR 0 4
23724: PPUSH
23725: CALL_OW 267
23729: PUSH
23730: LD_VAR 0 4
23734: PPUSH
23735: CALL_OW 248
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: PPUSH
23748: CALL_OW 2
23752: ST_TO_ADDR
23753: GO 23837
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23755: LD_ADDR_VAR 0 2
23759: PUSH
23760: LD_VAR 0 2
23764: PUSH
23765: LD_VAR 0 4
23769: PPUSH
23770: CALL_OW 266
23774: PUSH
23775: LD_VAR 0 4
23779: PPUSH
23780: CALL_OW 250
23784: PUSH
23785: LD_VAR 0 4
23789: PPUSH
23790: CALL_OW 251
23794: PUSH
23795: LD_VAR 0 4
23799: PPUSH
23800: CALL_OW 254
23804: PUSH
23805: LD_VAR 0 4
23809: PPUSH
23810: CALL_OW 267
23814: PUSH
23815: LD_VAR 0 4
23819: PPUSH
23820: CALL_OW 248
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: ADD
23836: ST_TO_ADDR
// end ;
23837: GO 23401
23839: POP
23840: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: LD_STRING 10_EpsilonBase
23848: PPUSH
23849: CALL_OW 39
// end ; end_of_file
23853: LD_VAR 0 1
23857: RET
// every 0 0$30 do
23858: GO 23860
23860: DISABLE
// begin enable ;
23861: ENABLE
// if cratesSpawned < 6 then
23862: LD_EXP 52
23866: PUSH
23867: LD_INT 6
23869: LESS
23870: IFFALSE 23907
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23872: LD_INT 3
23874: PPUSH
23875: LD_INT 5
23877: PPUSH
23878: CALL_OW 12
23882: PPUSH
23883: LD_INT 16
23885: PPUSH
23886: LD_INT 1
23888: PPUSH
23889: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23893: LD_ADDR_EXP 52
23897: PUSH
23898: LD_EXP 52
23902: PUSH
23903: LD_INT 1
23905: PLUS
23906: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
23907: LD_EXP 52
23911: PUSH
23912: LD_INT 6
23914: GREATEREQUAL
23915: PUSH
23916: LD_EXP 52
23920: PUSH
23921: LD_INT 12
23923: LESS
23924: AND
23925: IFFALSE 23969
// begin wait ( 0 0$30 ) ;
23927: LD_INT 1050
23929: PPUSH
23930: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23934: LD_INT 3
23936: PPUSH
23937: LD_INT 5
23939: PPUSH
23940: CALL_OW 12
23944: PPUSH
23945: LD_INT 16
23947: PPUSH
23948: LD_INT 1
23950: PPUSH
23951: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23955: LD_ADDR_EXP 52
23959: PUSH
23960: LD_EXP 52
23964: PUSH
23965: LD_INT 1
23967: PLUS
23968: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
23969: LD_EXP 52
23973: PUSH
23974: LD_INT 12
23976: GREATEREQUAL
23977: IFFALSE 24021
// begin wait ( 1 1$0 ) ;
23979: LD_INT 2100
23981: PPUSH
23982: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23986: LD_INT 3
23988: PPUSH
23989: LD_INT 5
23991: PPUSH
23992: CALL_OW 12
23996: PPUSH
23997: LD_INT 16
23999: PPUSH
24000: LD_INT 1
24002: PPUSH
24003: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24007: LD_ADDR_EXP 52
24011: PUSH
24012: LD_EXP 52
24016: PUSH
24017: LD_INT 1
24019: PLUS
24020: ST_TO_ADDR
// end ; end ;
24021: END
