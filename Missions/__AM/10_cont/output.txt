// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 26
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 36
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 37
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 38
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// ruPossition = 0 ;
  47: LD_ADDR_EXP 39
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  55: LD_ADDR_EXP 40
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// arabianEscape = 0 ;
  62: LD_ADDR_EXP 45
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  70: LD_ADDR_EXP 44
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// arabianDefeated = 0 ;
  78: LD_ADDR_EXP 46
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// arabianTrait = 0 ;
  86: LD_ADDR_EXP 47
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// eventVar1 = 0 ;
  94: LD_ADDR_EXP 53
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// eventVar2 = 0 ;
 102: LD_ADDR_EXP 54
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// fastEnd = 0 ;
 110: LD_ADDR_EXP 52
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// KhatamStatus = 0 ;
 118: LD_ADDR_EXP 48
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// cratesSpawned = 0 ;
 126: LD_ADDR_EXP 51
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// mission_prefix := 10_ ;
 134: LD_ADDR_EXP 49
 138: PUSH
 139: LD_STRING 10_
 141: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 142: LD_ADDR_EXP 50
 146: PUSH
 147: LD_STRING 09_
 149: ST_TO_ADDR
// debugMode = 0 ;
 150: LD_ADDR_EXP 55
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// PrepareDifficulty ;
 158: CALL 8666 0 0
// PrepareVehicles ;
 162: CALL 2699 0 0
// PrepareJMMTeam ;
 166: CALL 516 0 0
// PrepareCathyTeam ;
 170: CALL 2964 0 0
// PrepareArabianCommander ;
 174: CALL 4293 0 0
// PrepareArabian ;
 178: CALL 4345 0 0
// BuildArabianBase ;
 182: CALL 11264 0 0
// PrepareNature ;
 186: CALL 21040 0 0
// TameApemans ;
 190: CALL 16322 0 0
// SaveForQuickRestart ;
 194: CALL_OW 22
// end ;
 198: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 199: LD_EXP 55
 203: PUSH
 204: LD_INT 1
 206: EQUAL
 207: IFFALSE 513
 209: GO 211
 211: DISABLE
 212: LD_INT 0
 214: PPUSH
// begin enable ;
 215: ENABLE
// fogoff ( true ) ;
 216: LD_INT 1
 218: PPUSH
 219: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 223: LD_ADDR_VAR 0 1
 227: PUSH
 228: LD_INT 22
 230: PUSH
 231: LD_INT 1
 233: PUSH
 234: EMPTY
 235: LIST
 236: LIST
 237: PUSH
 238: LD_INT 21
 240: PUSH
 241: LD_INT 1
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PPUSH
 252: CALL_OW 69
 256: PUSH
 257: FOR_IN
 258: IFFALSE 274
// SetLives ( i , 1000 ) ;
 260: LD_VAR 0 1
 264: PPUSH
 265: LD_INT 1000
 267: PPUSH
 268: CALL_OW 234
 272: GO 257
 274: POP
 275: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 276: LD_ADDR_VAR 0 1
 280: PUSH
 281: LD_INT 22
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: LD_INT 2
 293: PUSH
 294: LD_INT 30
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 30
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: LIST
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PPUSH
 323: CALL_OW 69
 327: PUSH
 328: FOR_IN
 329: IFFALSE 353
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 331: LD_VAR 0 1
 335: PPUSH
 336: CALL_OW 274
 340: PPUSH
 341: LD_INT 1
 343: PPUSH
 344: LD_INT 9999
 346: PPUSH
 347: CALL_OW 277
 351: GO 328
 353: POP
 354: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 355: LD_ADDR_VAR 0 1
 359: PUSH
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PPUSH
 402: CALL_OW 69
 406: PUSH
 407: FOR_IN
 408: IFFALSE 432
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 410: LD_VAR 0 1
 414: PPUSH
 415: CALL_OW 274
 419: PPUSH
 420: LD_INT 2
 422: PPUSH
 423: LD_INT 9999
 425: PPUSH
 426: CALL_OW 277
 430: GO 407
 432: POP
 433: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 434: LD_ADDR_VAR 0 1
 438: PUSH
 439: LD_INT 22
 441: PUSH
 442: LD_INT 1
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: PUSH
 449: LD_INT 2
 451: PUSH
 452: LD_INT 30
 454: PUSH
 455: LD_INT 0
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 30
 464: PUSH
 465: LD_INT 1
 467: PUSH
 468: EMPTY
 469: LIST
 470: LIST
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PPUSH
 481: CALL_OW 69
 485: PUSH
 486: FOR_IN
 487: IFFALSE 511
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 489: LD_VAR 0 1
 493: PPUSH
 494: CALL_OW 274
 498: PPUSH
 499: LD_INT 3
 501: PPUSH
 502: LD_INT 9999
 504: PPUSH
 505: CALL_OW 277
 509: GO 486
 511: POP
 512: POP
// end ; end_of_file
 513: PPOPN 1
 515: END
// export function PrepareJMMTeam ; var i , j ; begin
 516: LD_INT 0
 518: PPUSH
 519: PPUSH
 520: PPUSH
// uc_side = 1 ;
 521: LD_ADDR_OWVAR 20
 525: PUSH
 526: LD_INT 1
 528: ST_TO_ADDR
// uc_nation = 1 ;
 529: LD_ADDR_OWVAR 21
 533: PUSH
 534: LD_INT 1
 536: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 537: LD_ADDR_EXP 1
 541: PUSH
 542: LD_STRING 10_JMM
 544: PPUSH
 545: LD_INT 1
 547: PPUSH
 548: CALL 8402 0 2
 552: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 553: LD_ADDR_EXP 10
 557: PUSH
 558: LD_STRING 10_Gary
 560: PPUSH
 561: LD_INT 1
 563: PPUSH
 564: CALL 8402 0 2
 568: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 569: LD_ADDR_EXP 5
 573: PUSH
 574: LD_STRING 10_Cyrus
 576: PPUSH
 577: LD_INT 1
 579: PPUSH
 580: CALL 8402 0 2
 584: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 585: LD_ADDR_EXP 4
 589: PUSH
 590: LD_STRING 10_Bobby
 592: PPUSH
 593: LD_INT 1
 595: PPUSH
 596: CALL 8402 0 2
 600: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 601: LD_ADDR_EXP 6
 605: PUSH
 606: LD_STRING 10_Lisa
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 8402 0 2
 616: ST_TO_ADDR
// Kikuchi = PrepareUnit ( 10_Kikuchi , true ) ;
 617: LD_ADDR_EXP 8
 621: PUSH
 622: LD_STRING 10_Kikuchi
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 8402 0 2
 632: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 633: LD_ADDR_EXP 2
 637: PUSH
 638: LD_STRING 10_Brown
 640: PPUSH
 641: LD_INT 1
 643: PPUSH
 644: CALL 8402 0 2
 648: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 649: LD_ADDR_EXP 3
 653: PUSH
 654: LD_STRING 10_Donaldson
 656: PPUSH
 657: LD_INT 1
 659: PPUSH
 660: CALL 8402 0 2
 664: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 665: LD_ADDR_EXP 7
 669: PUSH
 670: LD_STRING 10_Frank
 672: PPUSH
 673: LD_INT 1
 675: PPUSH
 676: CALL 8402 0 2
 680: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 681: LD_ADDR_EXP 9
 685: PUSH
 686: LD_STRING 10_Houten
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: CALL 8402 0 2
 696: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 697: LD_ADDR_EXP 20
 701: PUSH
 702: LD_STRING OthersIn10
 704: PPUSH
 705: CALL_OW 31
 709: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 710: LD_ADDR_EXP 23
 714: PUSH
 715: LD_STRING Powell
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: CALL 8402 0 2
 725: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 726: LD_EXP 1
 730: PPUSH
 731: LD_EXP 26
 735: PUSH
 736: LD_INT 1
 738: ARRAY
 739: PPUSH
 740: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 744: LD_EXP 10
 748: PPUSH
 749: LD_EXP 26
 753: PUSH
 754: LD_INT 2
 756: ARRAY
 757: PPUSH
 758: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 762: LD_EXP 10
 766: PPUSH
 767: CALL_OW 305
 771: NOT
 772: PUSH
 773: LD_EXP 2
 777: PPUSH
 778: CALL_OW 305
 782: NOT
 783: AND
 784: PUSH
 785: LD_EXP 26
 789: PUSH
 790: LD_INT 2
 792: ARRAY
 793: PPUSH
 794: CALL_OW 313
 798: PUSH
 799: EMPTY
 800: EQUAL
 801: AND
 802: IFFALSE 822
// PlaceHumanInUnit ( Brown , playerVehs [ 2 ] ) ;
 804: LD_EXP 2
 808: PPUSH
 809: LD_EXP 26
 813: PUSH
 814: LD_INT 2
 816: ARRAY
 817: PPUSH
 818: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 822: LD_EXP 10
 826: PPUSH
 827: CALL_OW 305
 831: NOT
 832: PUSH
 833: LD_EXP 3
 837: PPUSH
 838: CALL_OW 305
 842: NOT
 843: AND
 844: PUSH
 845: LD_EXP 26
 849: PUSH
 850: LD_INT 2
 852: ARRAY
 853: PPUSH
 854: CALL_OW 313
 858: PUSH
 859: EMPTY
 860: EQUAL
 861: AND
 862: IFFALSE 882
// PlaceHumanInUnit ( Donaldson , playerVehs [ 2 ] ) ;
 864: LD_EXP 3
 868: PPUSH
 869: LD_EXP 26
 873: PUSH
 874: LD_INT 2
 876: ARRAY
 877: PPUSH
 878: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 882: LD_EXP 10
 886: PPUSH
 887: CALL_OW 305
 891: NOT
 892: PUSH
 893: LD_EXP 7
 897: PPUSH
 898: CALL_OW 305
 902: NOT
 903: AND
 904: PUSH
 905: LD_EXP 26
 909: PUSH
 910: LD_INT 2
 912: ARRAY
 913: PPUSH
 914: CALL_OW 313
 918: PUSH
 919: EMPTY
 920: EQUAL
 921: AND
 922: IFFALSE 942
// PlaceHumanInUnit ( Frank , playerVehs [ 2 ] ) ;
 924: LD_EXP 7
 928: PPUSH
 929: LD_EXP 26
 933: PUSH
 934: LD_INT 2
 936: ARRAY
 937: PPUSH
 938: CALL_OW 52
// if not IsPlaced ( Gary ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 2 ] ) = [ ] then
 942: LD_EXP 10
 946: PPUSH
 947: CALL_OW 305
 951: NOT
 952: PUSH
 953: LD_EXP 9
 957: PPUSH
 958: CALL_OW 305
 962: NOT
 963: AND
 964: PUSH
 965: LD_EXP 26
 969: PUSH
 970: LD_INT 2
 972: ARRAY
 973: PPUSH
 974: CALL_OW 313
 978: PUSH
 979: EMPTY
 980: EQUAL
 981: AND
 982: IFFALSE 1002
// PlaceHumanInUnit ( Houten , playerVehs [ 2 ] ) ;
 984: LD_EXP 9
 988: PPUSH
 989: LD_EXP 26
 993: PUSH
 994: LD_INT 2
 996: ARRAY
 997: PPUSH
 998: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
1002: LD_EXP 5
1006: PPUSH
1007: LD_EXP 26
1011: PUSH
1012: LD_INT 3
1014: ARRAY
1015: PPUSH
1016: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1020: LD_EXP 5
1024: PPUSH
1025: CALL_OW 305
1029: NOT
1030: PUSH
1031: LD_EXP 2
1035: PPUSH
1036: CALL_OW 305
1040: NOT
1041: AND
1042: PUSH
1043: LD_EXP 26
1047: PUSH
1048: LD_INT 3
1050: ARRAY
1051: PPUSH
1052: CALL_OW 313
1056: PUSH
1057: EMPTY
1058: EQUAL
1059: AND
1060: IFFALSE 1080
// PlaceHumanInUnit ( Brown , playerVehs [ 3 ] ) ;
1062: LD_EXP 2
1066: PPUSH
1067: LD_EXP 26
1071: PUSH
1072: LD_INT 3
1074: ARRAY
1075: PPUSH
1076: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1080: LD_EXP 5
1084: PPUSH
1085: CALL_OW 305
1089: NOT
1090: PUSH
1091: LD_EXP 3
1095: PPUSH
1096: CALL_OW 305
1100: NOT
1101: AND
1102: PUSH
1103: LD_EXP 26
1107: PUSH
1108: LD_INT 3
1110: ARRAY
1111: PPUSH
1112: CALL_OW 313
1116: PUSH
1117: EMPTY
1118: EQUAL
1119: AND
1120: IFFALSE 1140
// PlaceHumanInUnit ( Donaldson , playerVehs [ 3 ] ) ;
1122: LD_EXP 3
1126: PPUSH
1127: LD_EXP 26
1131: PUSH
1132: LD_INT 3
1134: ARRAY
1135: PPUSH
1136: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1140: LD_EXP 5
1144: PPUSH
1145: CALL_OW 305
1149: NOT
1150: PUSH
1151: LD_EXP 7
1155: PPUSH
1156: CALL_OW 305
1160: NOT
1161: AND
1162: PUSH
1163: LD_EXP 26
1167: PUSH
1168: LD_INT 3
1170: ARRAY
1171: PPUSH
1172: CALL_OW 313
1176: PUSH
1177: EMPTY
1178: EQUAL
1179: AND
1180: IFFALSE 1200
// PlaceHumanInUnit ( Frank , playerVehs [ 3 ] ) ;
1182: LD_EXP 7
1186: PPUSH
1187: LD_EXP 26
1191: PUSH
1192: LD_INT 3
1194: ARRAY
1195: PPUSH
1196: CALL_OW 52
// if not IsPlaced ( Cyrus ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 3 ] ) = [ ] then
1200: LD_EXP 5
1204: PPUSH
1205: CALL_OW 305
1209: NOT
1210: PUSH
1211: LD_EXP 9
1215: PPUSH
1216: CALL_OW 305
1220: NOT
1221: AND
1222: PUSH
1223: LD_EXP 26
1227: PUSH
1228: LD_INT 3
1230: ARRAY
1231: PPUSH
1232: CALL_OW 313
1236: PUSH
1237: EMPTY
1238: EQUAL
1239: AND
1240: IFFALSE 1260
// PlaceHumanInUnit ( Houten , playerVehs [ 3 ] ) ;
1242: LD_EXP 9
1246: PPUSH
1247: LD_EXP 26
1251: PUSH
1252: LD_INT 3
1254: ARRAY
1255: PPUSH
1256: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
1260: LD_EXP 4
1264: PPUSH
1265: LD_EXP 26
1269: PUSH
1270: LD_INT 4
1272: ARRAY
1273: PPUSH
1274: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1278: LD_EXP 4
1282: PPUSH
1283: CALL_OW 305
1287: NOT
1288: PUSH
1289: LD_EXP 2
1293: PPUSH
1294: CALL_OW 305
1298: NOT
1299: AND
1300: PUSH
1301: LD_EXP 26
1305: PUSH
1306: LD_INT 4
1308: ARRAY
1309: PPUSH
1310: CALL_OW 313
1314: PUSH
1315: EMPTY
1316: EQUAL
1317: AND
1318: IFFALSE 1338
// PlaceHumanInUnit ( Brown , playerVehs [ 4 ] ) ;
1320: LD_EXP 2
1324: PPUSH
1325: LD_EXP 26
1329: PUSH
1330: LD_INT 4
1332: ARRAY
1333: PPUSH
1334: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1338: LD_EXP 4
1342: PPUSH
1343: CALL_OW 305
1347: NOT
1348: PUSH
1349: LD_EXP 3
1353: PPUSH
1354: CALL_OW 305
1358: NOT
1359: AND
1360: PUSH
1361: LD_EXP 26
1365: PUSH
1366: LD_INT 4
1368: ARRAY
1369: PPUSH
1370: CALL_OW 313
1374: PUSH
1375: EMPTY
1376: EQUAL
1377: AND
1378: IFFALSE 1398
// PlaceHumanInUnit ( Donaldson , playerVehs [ 4 ] ) ;
1380: LD_EXP 3
1384: PPUSH
1385: LD_EXP 26
1389: PUSH
1390: LD_INT 4
1392: ARRAY
1393: PPUSH
1394: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1398: LD_EXP 4
1402: PPUSH
1403: CALL_OW 305
1407: NOT
1408: PUSH
1409: LD_EXP 7
1413: PPUSH
1414: CALL_OW 305
1418: NOT
1419: AND
1420: PUSH
1421: LD_EXP 26
1425: PUSH
1426: LD_INT 4
1428: ARRAY
1429: PPUSH
1430: CALL_OW 313
1434: PUSH
1435: EMPTY
1436: EQUAL
1437: AND
1438: IFFALSE 1458
// PlaceHumanInUnit ( Frank , playerVehs [ 4 ] ) ;
1440: LD_EXP 7
1444: PPUSH
1445: LD_EXP 26
1449: PUSH
1450: LD_INT 4
1452: ARRAY
1453: PPUSH
1454: CALL_OW 52
// if not IsPlaced ( Bobby ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 4 ] ) = [ ] then
1458: LD_EXP 4
1462: PPUSH
1463: CALL_OW 305
1467: NOT
1468: PUSH
1469: LD_EXP 9
1473: PPUSH
1474: CALL_OW 305
1478: NOT
1479: AND
1480: PUSH
1481: LD_EXP 26
1485: PUSH
1486: LD_INT 4
1488: ARRAY
1489: PPUSH
1490: CALL_OW 313
1494: PUSH
1495: EMPTY
1496: EQUAL
1497: AND
1498: IFFALSE 1518
// PlaceHumanInUnit ( Houten , playerVehs [ 4 ] ) ;
1500: LD_EXP 9
1504: PPUSH
1505: LD_EXP 26
1509: PUSH
1510: LD_INT 4
1512: ARRAY
1513: PPUSH
1514: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
1518: LD_EXP 6
1522: PPUSH
1523: LD_EXP 26
1527: PUSH
1528: LD_INT 5
1530: ARRAY
1531: PPUSH
1532: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Brown ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1536: LD_EXP 6
1540: PPUSH
1541: CALL_OW 305
1545: NOT
1546: PUSH
1547: LD_EXP 2
1551: PPUSH
1552: CALL_OW 305
1556: NOT
1557: AND
1558: PUSH
1559: LD_EXP 26
1563: PUSH
1564: LD_INT 5
1566: ARRAY
1567: PPUSH
1568: CALL_OW 313
1572: PUSH
1573: EMPTY
1574: EQUAL
1575: AND
1576: IFFALSE 1596
// PlaceHumanInUnit ( Brown , playerVehs [ 5 ] ) ;
1578: LD_EXP 2
1582: PPUSH
1583: LD_EXP 26
1587: PUSH
1588: LD_INT 5
1590: ARRAY
1591: PPUSH
1592: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Donaldson ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1596: LD_EXP 6
1600: PPUSH
1601: CALL_OW 305
1605: NOT
1606: PUSH
1607: LD_EXP 3
1611: PPUSH
1612: CALL_OW 305
1616: NOT
1617: AND
1618: PUSH
1619: LD_EXP 26
1623: PUSH
1624: LD_INT 5
1626: ARRAY
1627: PPUSH
1628: CALL_OW 313
1632: PUSH
1633: EMPTY
1634: EQUAL
1635: AND
1636: IFFALSE 1656
// PlaceHumanInUnit ( Donaldson , playerVehs [ 5 ] ) ;
1638: LD_EXP 3
1642: PPUSH
1643: LD_EXP 26
1647: PUSH
1648: LD_INT 5
1650: ARRAY
1651: PPUSH
1652: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Frank ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1656: LD_EXP 6
1660: PPUSH
1661: CALL_OW 305
1665: NOT
1666: PUSH
1667: LD_EXP 7
1671: PPUSH
1672: CALL_OW 305
1676: NOT
1677: AND
1678: PUSH
1679: LD_EXP 26
1683: PUSH
1684: LD_INT 5
1686: ARRAY
1687: PPUSH
1688: CALL_OW 313
1692: PUSH
1693: EMPTY
1694: EQUAL
1695: AND
1696: IFFALSE 1716
// PlaceHumanInUnit ( Frank , playerVehs [ 5 ] ) ;
1698: LD_EXP 7
1702: PPUSH
1703: LD_EXP 26
1707: PUSH
1708: LD_INT 5
1710: ARRAY
1711: PPUSH
1712: CALL_OW 52
// if not IsPlaced ( Lisa ) and not IsPlaced ( Houten ) and UnitsInside ( playerVehs [ 5 ] ) = [ ] then
1716: LD_EXP 6
1720: PPUSH
1721: CALL_OW 305
1725: NOT
1726: PUSH
1727: LD_EXP 9
1731: PPUSH
1732: CALL_OW 305
1736: NOT
1737: AND
1738: PUSH
1739: LD_EXP 26
1743: PUSH
1744: LD_INT 5
1746: ARRAY
1747: PPUSH
1748: CALL_OW 313
1752: PUSH
1753: EMPTY
1754: EQUAL
1755: AND
1756: IFFALSE 1776
// PlaceHumanInUnit ( Houten , playerVehs [ 5 ] ) ;
1758: LD_EXP 9
1762: PPUSH
1763: LD_EXP 26
1767: PUSH
1768: LD_INT 5
1770: ARRAY
1771: PPUSH
1772: CALL_OW 52
// if TestCharacters ( 08_Frank ) then
1776: LD_STRING 08_Frank
1778: PPUSH
1779: CALL_OW 28
1783: IFFALSE 1803
// PlaceHumanInUnit ( Kikuchi , playerVehs [ 6 ] ) ;
1785: LD_EXP 8
1789: PPUSH
1790: LD_EXP 26
1794: PUSH
1795: LD_INT 6
1797: ARRAY
1798: PPUSH
1799: CALL_OW 52
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1803: LD_INT 22
1805: PUSH
1806: LD_INT 1
1808: PUSH
1809: EMPTY
1810: LIST
1811: LIST
1812: PUSH
1813: LD_INT 21
1815: PUSH
1816: LD_INT 1
1818: PUSH
1819: EMPTY
1820: LIST
1821: LIST
1822: PUSH
1823: EMPTY
1824: LIST
1825: LIST
1826: PPUSH
1827: CALL_OW 69
1831: PPUSH
1832: LD_INT 1
1834: PPUSH
1835: CALL_OW 336
// BonusVehicles ;
1839: CALL 2388 0 0
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
1843: LD_INT 22
1845: PUSH
1846: LD_INT 1
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 21
1855: PUSH
1856: LD_INT 2
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: LD_INT 58
1865: PUSH
1866: EMPTY
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: LIST
1873: PPUSH
1874: CALL_OW 69
1878: PUSH
1879: LD_INT 0
1881: GREATER
1882: IFFALSE 1975
// begin for i in others10 do
1884: LD_ADDR_VAR 0 2
1888: PUSH
1889: LD_EXP 20
1893: PUSH
1894: FOR_IN
1895: IFFALSE 1973
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
1897: LD_ADDR_VAR 0 3
1901: PUSH
1902: LD_INT 22
1904: PUSH
1905: LD_INT 1
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: PUSH
1912: LD_INT 21
1914: PUSH
1915: LD_INT 2
1917: PUSH
1918: EMPTY
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 58
1924: PUSH
1925: EMPTY
1926: LIST
1927: PUSH
1928: EMPTY
1929: LIST
1930: LIST
1931: LIST
1932: PPUSH
1933: CALL_OW 69
1937: PUSH
1938: FOR_IN
1939: IFFALSE 1969
// begin PlaceHumanInUnit ( i , j ) ;
1941: LD_VAR 0 2
1945: PPUSH
1946: LD_VAR 0 3
1950: PPUSH
1951: CALL_OW 52
// SetClass ( i , 1 ) ;
1955: LD_VAR 0 2
1959: PPUSH
1960: LD_INT 1
1962: PPUSH
1963: CALL_OW 336
// end ;
1967: GO 1938
1969: POP
1970: POP
// end ;
1971: GO 1894
1973: POP
1974: POP
// end ; if not IsPlaced ( Brown ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
1975: LD_EXP 2
1979: PPUSH
1980: CALL_OW 305
1984: NOT
1985: PUSH
1986: LD_INT 22
1988: PUSH
1989: LD_INT 1
1991: PUSH
1992: EMPTY
1993: LIST
1994: LIST
1995: PUSH
1996: LD_INT 21
1998: PUSH
1999: LD_INT 2
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: PUSH
2006: LD_INT 58
2008: PUSH
2009: EMPTY
2010: LIST
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: PPUSH
2017: CALL_OW 69
2021: PUSH
2022: LD_INT 0
2024: GREATER
2025: AND
2026: IFFALSE 2077
// PlaceHumanInUnit ( Brown , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2028: LD_EXP 2
2032: PPUSH
2033: LD_INT 22
2035: PUSH
2036: LD_INT 1
2038: PUSH
2039: EMPTY
2040: LIST
2041: LIST
2042: PUSH
2043: LD_INT 21
2045: PUSH
2046: LD_INT 2
2048: PUSH
2049: EMPTY
2050: LIST
2051: LIST
2052: PUSH
2053: LD_INT 58
2055: PUSH
2056: EMPTY
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: LIST
2063: PPUSH
2064: CALL_OW 69
2068: PUSH
2069: LD_INT 1
2071: ARRAY
2072: PPUSH
2073: CALL_OW 52
// if not IsPlaced ( Donaldson ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
2077: LD_EXP 3
2081: PPUSH
2082: CALL_OW 305
2086: NOT
2087: PUSH
2088: LD_INT 22
2090: PUSH
2091: LD_INT 1
2093: PUSH
2094: EMPTY
2095: LIST
2096: LIST
2097: PUSH
2098: LD_INT 21
2100: PUSH
2101: LD_INT 2
2103: PUSH
2104: EMPTY
2105: LIST
2106: LIST
2107: PUSH
2108: LD_INT 58
2110: PUSH
2111: EMPTY
2112: LIST
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: CALL_OW 69
2123: PUSH
2124: LD_INT 0
2126: GREATER
2127: AND
2128: IFFALSE 2179
// PlaceHumanInUnit ( Donaldson , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2130: LD_EXP 3
2134: PPUSH
2135: LD_INT 22
2137: PUSH
2138: LD_INT 1
2140: PUSH
2141: EMPTY
2142: LIST
2143: LIST
2144: PUSH
2145: LD_INT 21
2147: PUSH
2148: LD_INT 2
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 58
2157: PUSH
2158: EMPTY
2159: LIST
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: LIST
2165: PPUSH
2166: CALL_OW 69
2170: PUSH
2171: LD_INT 1
2173: ARRAY
2174: PPUSH
2175: CALL_OW 52
// if not IsPlaced ( Frank ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
2179: LD_EXP 7
2183: PPUSH
2184: CALL_OW 305
2188: NOT
2189: PUSH
2190: LD_INT 22
2192: PUSH
2193: LD_INT 1
2195: PUSH
2196: EMPTY
2197: LIST
2198: LIST
2199: PUSH
2200: LD_INT 21
2202: PUSH
2203: LD_INT 2
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 58
2212: PUSH
2213: EMPTY
2214: LIST
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL_OW 69
2225: PUSH
2226: LD_INT 0
2228: GREATER
2229: AND
2230: IFFALSE 2281
// PlaceHumanInUnit ( Frank , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2232: LD_EXP 7
2236: PPUSH
2237: LD_INT 22
2239: PUSH
2240: LD_INT 1
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: PUSH
2247: LD_INT 21
2249: PUSH
2250: LD_INT 2
2252: PUSH
2253: EMPTY
2254: LIST
2255: LIST
2256: PUSH
2257: LD_INT 58
2259: PUSH
2260: EMPTY
2261: LIST
2262: PUSH
2263: EMPTY
2264: LIST
2265: LIST
2266: LIST
2267: PPUSH
2268: CALL_OW 69
2272: PUSH
2273: LD_INT 1
2275: ARRAY
2276: PPUSH
2277: CALL_OW 52
// if not IsPlaced ( Houten ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
2281: LD_EXP 9
2285: PPUSH
2286: CALL_OW 305
2290: NOT
2291: PUSH
2292: LD_INT 22
2294: PUSH
2295: LD_INT 1
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PUSH
2302: LD_INT 21
2304: PUSH
2305: LD_INT 2
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PUSH
2312: LD_INT 58
2314: PUSH
2315: EMPTY
2316: LIST
2317: PUSH
2318: EMPTY
2319: LIST
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: PUSH
2328: LD_INT 0
2330: GREATER
2331: AND
2332: IFFALSE 2383
// PlaceHumanInUnit ( Houten , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
2334: LD_EXP 9
2338: PPUSH
2339: LD_INT 22
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 21
2351: PUSH
2352: LD_INT 2
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 58
2361: PUSH
2362: EMPTY
2363: LIST
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: LIST
2369: PPUSH
2370: CALL_OW 69
2374: PUSH
2375: LD_INT 1
2377: ARRAY
2378: PPUSH
2379: CALL_OW 52
// end ;
2383: LD_VAR 0 1
2387: RET
// export function BonusVehicles ; var i , siberite , rnd , veh ; begin
2388: LD_INT 0
2390: PPUSH
2391: PPUSH
2392: PPUSH
2393: PPUSH
2394: PPUSH
// siberite = LoadVariable ( 09_SibRes , 0 ) ;
2395: LD_ADDR_VAR 0 3
2399: PUSH
2400: LD_STRING 09_SibRes
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: CALL_OW 30
2410: ST_TO_ADDR
// if siberite >= 200 then
2411: LD_VAR 0 3
2415: PUSH
2416: LD_INT 200
2418: GREATEREQUAL
2419: IFFALSE 2566
// begin for i := 1 to 2 do
2421: LD_ADDR_VAR 0 2
2425: PUSH
2426: DOUBLE
2427: LD_INT 1
2429: DEC
2430: ST_TO_ADDR
2431: LD_INT 2
2433: PUSH
2434: FOR_TO
2435: IFFALSE 2564
// begin rnd = Rand ( 1 , 10 ) * 10 ;
2437: LD_ADDR_VAR 0 4
2441: PUSH
2442: LD_INT 1
2444: PPUSH
2445: LD_INT 10
2447: PPUSH
2448: CALL_OW 12
2452: PUSH
2453: LD_INT 10
2455: MUL
2456: ST_TO_ADDR
// vc_engine = 1 ;
2457: LD_ADDR_OWVAR 39
2461: PUSH
2462: LD_INT 1
2464: ST_TO_ADDR
// vc_control = 1 ;
2465: LD_ADDR_OWVAR 38
2469: PUSH
2470: LD_INT 1
2472: ST_TO_ADDR
// vc_weapon = 12 ;
2473: LD_ADDR_OWVAR 40
2477: PUSH
2478: LD_INT 12
2480: ST_TO_ADDR
// vc_chassis = 3 ;
2481: LD_ADDR_OWVAR 37
2485: PUSH
2486: LD_INT 3
2488: ST_TO_ADDR
// veh = CreateVehicle ;
2489: LD_ADDR_VAR 0 5
2493: PUSH
2494: CALL_OW 45
2498: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2499: LD_VAR 0 5
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2511: LD_VAR 0 5
2515: PPUSH
2516: LD_INT 2
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: CALL_OW 49
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2526: LD_VAR 0 5
2530: PPUSH
2531: LD_INT 1
2533: PUSH
2534: LD_INT 3
2536: PUSH
2537: EMPTY
2538: LIST
2539: LIST
2540: PUSH
2541: LD_INT 1
2543: PPUSH
2544: LD_INT 2
2546: PPUSH
2547: CALL_OW 12
2551: ARRAY
2552: PPUSH
2553: LD_VAR 0 4
2557: PPUSH
2558: CALL_OW 291
// end ;
2562: GO 2434
2564: POP
2565: POP
// end ; if siberite > 200 then
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 200
2573: GREATER
2574: IFFALSE 2694
// begin for i := 1 to siberite / 100 do
2576: LD_ADDR_VAR 0 2
2580: PUSH
2581: DOUBLE
2582: LD_INT 1
2584: DEC
2585: ST_TO_ADDR
2586: LD_VAR 0 3
2590: PUSH
2591: LD_INT 100
2593: DIVREAL
2594: PUSH
2595: FOR_TO
2596: IFFALSE 2692
// begin vc_engine = 1 ;
2598: LD_ADDR_OWVAR 39
2602: PUSH
2603: LD_INT 1
2605: ST_TO_ADDR
// vc_control = 1 ;
2606: LD_ADDR_OWVAR 38
2610: PUSH
2611: LD_INT 1
2613: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2614: LD_ADDR_OWVAR 40
2618: PUSH
2619: LD_INT 3
2621: PUSH
2622: LD_INT 4
2624: PUSH
2625: LD_INT 5
2627: PUSH
2628: EMPTY
2629: LIST
2630: LIST
2631: LIST
2632: PUSH
2633: LD_INT 1
2635: PPUSH
2636: LD_INT 3
2638: PPUSH
2639: CALL_OW 12
2643: ARRAY
2644: ST_TO_ADDR
// vc_chassis = 3 ;
2645: LD_ADDR_OWVAR 37
2649: PUSH
2650: LD_INT 3
2652: ST_TO_ADDR
// veh = CreateVehicle ;
2653: LD_ADDR_VAR 0 5
2657: PUSH
2658: CALL_OW 45
2662: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2663: LD_VAR 0 5
2667: PPUSH
2668: LD_INT 1
2670: PPUSH
2671: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2675: LD_VAR 0 5
2679: PPUSH
2680: LD_INT 2
2682: PPUSH
2683: LD_INT 0
2685: PPUSH
2686: CALL_OW 49
// end ;
2690: GO 2595
2692: POP
2693: POP
// end ; end ;
2694: LD_VAR 0 1
2698: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount , rest , count ; begin
2699: LD_INT 0
2701: PPUSH
2702: PPUSH
2703: PPUSH
2704: PPUSH
2705: PPUSH
2706: PPUSH
2707: PPUSH
// uc_side = 1 ;
2708: LD_ADDR_OWVAR 20
2712: PUSH
2713: LD_INT 1
2715: ST_TO_ADDR
// uc_nation = 1 ;
2716: LD_ADDR_OWVAR 21
2720: PUSH
2721: LD_INT 1
2723: ST_TO_ADDR
// rest = 0 ;
2724: LD_ADDR_VAR 0 6
2728: PUSH
2729: LD_INT 0
2731: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) then
2732: LD_STRING 08_Frank
2734: PPUSH
2735: CALL_OW 28
2739: IFFALSE 2751
// count = 6 else
2741: LD_ADDR_VAR 0 7
2745: PUSH
2746: LD_INT 6
2748: ST_TO_ADDR
2749: GO 2759
// count = 5 ;
2751: LD_ADDR_VAR 0 7
2755: PUSH
2756: LD_INT 5
2758: ST_TO_ADDR
// for i := 1 to count do
2759: LD_ADDR_VAR 0 2
2763: PUSH
2764: DOUBLE
2765: LD_INT 1
2767: DEC
2768: ST_TO_ADDR
2769: LD_VAR 0 7
2773: PUSH
2774: FOR_TO
2775: IFFALSE 2957
// begin vc_engine = 1 ;
2777: LD_ADDR_OWVAR 39
2781: PUSH
2782: LD_INT 1
2784: ST_TO_ADDR
// vc_control = 1 ;
2785: LD_ADDR_OWVAR 38
2789: PUSH
2790: LD_INT 1
2792: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2793: LD_ADDR_OWVAR 40
2797: PUSH
2798: LD_INT 3
2800: PUSH
2801: LD_INT 4
2803: PUSH
2804: LD_INT 5
2806: PUSH
2807: LD_INT 12
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 1
2818: PPUSH
2819: LD_INT 4
2821: PPUSH
2822: CALL_OW 12
2826: ARRAY
2827: ST_TO_ADDR
// vc_chassis = 3 ;
2828: LD_ADDR_OWVAR 37
2832: PUSH
2833: LD_INT 3
2835: ST_TO_ADDR
// veh = CreateVehicle ;
2836: LD_ADDR_VAR 0 3
2840: PUSH
2841: CALL_OW 45
2845: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2846: LD_VAR 0 3
2850: PPUSH
2851: LD_INT 1
2853: PPUSH
2854: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2858: LD_VAR 0 3
2862: PPUSH
2863: LD_INT 2
2865: PPUSH
2866: LD_INT 0
2868: PPUSH
2869: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2873: LD_ADDR_EXP 26
2877: PUSH
2878: LD_EXP 26
2882: PUSH
2883: LD_VAR 0 3
2887: ADD
2888: ST_TO_ADDR
// if vc_weapon = 12 then
2889: LD_OWVAR 40
2893: PUSH
2894: LD_INT 12
2896: EQUAL
2897: IFFALSE 2955
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: LD_INT 5
2906: PPUSH
2907: LD_INT 10
2909: PPUSH
2910: CALL_OW 12
2914: PUSH
2915: LD_INT 10
2917: MUL
2918: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2919: LD_VAR 0 3
2923: PPUSH
2924: LD_INT 1
2926: PUSH
2927: LD_INT 3
2929: PUSH
2930: EMPTY
2931: LIST
2932: LIST
2933: PUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 2
2939: PPUSH
2940: CALL_OW 12
2944: ARRAY
2945: PPUSH
2946: LD_VAR 0 4
2950: PPUSH
2951: CALL_OW 291
// end ; end ;
2955: GO 2774
2957: POP
2958: POP
// end ;
2959: LD_VAR 0 1
2963: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2964: LD_INT 0
2966: PPUSH
2967: PPUSH
2968: PPUSH
// uc_side = 4 ;
2969: LD_ADDR_OWVAR 20
2973: PUSH
2974: LD_INT 4
2976: ST_TO_ADDR
// uc_nation = 1 ;
2977: LD_ADDR_OWVAR 21
2981: PUSH
2982: LD_INT 1
2984: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2985: LD_ADDR_EXP 11
2989: PUSH
2990: LD_STRING Simms
2992: PPUSH
2993: LD_INT 0
2995: PPUSH
2996: CALL 8402 0 2
3000: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
3001: LD_ADDR_EXP 12
3005: PUSH
3006: LD_STRING 08_Denis
3008: PPUSH
3009: LD_INT 1
3011: PPUSH
3012: CALL 8402 0 2
3016: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
3017: LD_ADDR_EXP 13
3021: PUSH
3022: LD_STRING 08_Joan
3024: PPUSH
3025: LD_INT 1
3027: PPUSH
3028: CALL 8402 0 2
3032: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
3033: LD_ADDR_EXP 14
3037: PUSH
3038: LD_STRING Khatam
3040: PPUSH
3041: LD_INT 1
3043: PPUSH
3044: CALL 8402 0 2
3048: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
3049: LD_ADDR_EXP 15
3053: PUSH
3054: LD_STRING Gladstone
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: CALL 8402 0 2
3064: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
3065: LD_ADDR_EXP 17
3069: PUSH
3070: LD_STRING DeltaDoctor
3072: PPUSH
3073: LD_INT 1
3075: PPUSH
3076: CALL 8402 0 2
3080: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
3081: LD_ADDR_EXP 21
3085: PUSH
3086: LD_STRING 09_others
3088: PPUSH
3089: CALL_OW 31
3093: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
3094: LD_ADDR_EXP 22
3098: PUSH
3099: LD_STRING 09_apes
3101: PPUSH
3102: CALL_OW 31
3106: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
3107: LD_EXP 11
3111: PPUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_INT 0
3117: PPUSH
3118: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
3122: LD_EXP 12
3126: PPUSH
3127: LD_INT 1
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
3137: LD_EXP 13
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
3152: LD_EXP 14
3156: PPUSH
3157: LD_INT 1
3159: PPUSH
3160: LD_INT 0
3162: PPUSH
3163: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3167: LD_EXP 15
3171: PPUSH
3172: LD_INT 1
3174: PPUSH
3175: LD_INT 0
3177: PPUSH
3178: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3182: LD_EXP 17
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_INT 0
3192: PPUSH
3193: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
3197: LD_EXP 16
3201: PPUSH
3202: LD_INT 1
3204: PPUSH
3205: LD_INT 0
3207: PPUSH
3208: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3212: LD_EXP 11
3216: PUSH
3217: LD_EXP 14
3221: PUSH
3222: LD_EXP 12
3226: PUSH
3227: LD_EXP 15
3231: PUSH
3232: LD_EXP 17
3236: PUSH
3237: LD_EXP 13
3241: PUSH
3242: EMPTY
3243: LIST
3244: LIST
3245: LIST
3246: LIST
3247: LIST
3248: LIST
3249: PPUSH
3250: LD_INT 4
3252: PPUSH
3253: CALL_OW 336
// if others09 > 2 then
3257: LD_EXP 21
3261: PUSH
3262: LD_INT 2
3264: GREATER
3265: IFFALSE 3310
// begin for i := 1 to 3 do
3267: LD_ADDR_VAR 0 2
3271: PUSH
3272: DOUBLE
3273: LD_INT 1
3275: DEC
3276: ST_TO_ADDR
3277: LD_INT 3
3279: PUSH
3280: FOR_TO
3281: IFFALSE 3306
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3283: LD_EXP 21
3287: PUSH
3288: LD_VAR 0 2
3292: ARRAY
3293: PPUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_INT 0
3299: PPUSH
3300: CALL_OW 49
3304: GO 3280
3306: POP
3307: POP
// end else
3308: GO 3342
// begin for i in others09 do
3310: LD_ADDR_VAR 0 2
3314: PUSH
3315: LD_EXP 21
3319: PUSH
3320: FOR_IN
3321: IFFALSE 3340
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3323: LD_VAR 0 2
3327: PPUSH
3328: LD_INT 1
3330: PPUSH
3331: LD_INT 0
3333: PPUSH
3334: CALL_OW 49
3338: GO 3320
3340: POP
3341: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
3342: LD_INT 22
3344: PUSH
3345: LD_INT 4
3347: PUSH
3348: EMPTY
3349: LIST
3350: LIST
3351: PUSH
3352: LD_INT 21
3354: PUSH
3355: LD_INT 1
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 25
3364: PUSH
3365: LD_INT 2
3367: PUSH
3368: EMPTY
3369: LIST
3370: LIST
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: LIST
3376: PPUSH
3377: CALL_OW 69
3381: PUSH
3382: LD_EXP 11
3386: PUSH
3387: LD_EXP 14
3391: PUSH
3392: LD_EXP 12
3396: PUSH
3397: LD_EXP 15
3401: PUSH
3402: LD_EXP 17
3406: PUSH
3407: LD_EXP 13
3411: PUSH
3412: EMPTY
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: PUSH
3420: LD_INT 0
3422: EQUAL
3423: DIFF
3424: IFFALSE 3526
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3426: LD_ADDR_VAR 0 3
3430: PUSH
3431: LD_INT 22
3433: PUSH
3434: LD_INT 4
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: LD_INT 21
3443: PUSH
3444: LD_INT 1
3446: PUSH
3447: EMPTY
3448: LIST
3449: LIST
3450: PUSH
3451: LD_INT 25
3453: PUSH
3454: LD_INT 2
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PPUSH
3466: CALL_OW 69
3470: PUSH
3471: LD_EXP 11
3475: PUSH
3476: LD_EXP 14
3480: PUSH
3481: LD_EXP 12
3485: PUSH
3486: LD_EXP 15
3490: PUSH
3491: LD_EXP 17
3495: PUSH
3496: LD_EXP 13
3500: PUSH
3501: EMPTY
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: DIFF
3509: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
3510: LD_VAR 0 3
3514: PUSH
3515: LD_INT 1
3517: ARRAY
3518: PPUSH
3519: LD_INT 2
3521: PPUSH
3522: CALL_OW 336
// end ; for i in ape09 do
3526: LD_ADDR_VAR 0 2
3530: PUSH
3531: LD_EXP 22
3535: PUSH
3536: FOR_IN
3537: IFFALSE 3556
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3539: LD_VAR 0 2
3543: PPUSH
3544: LD_INT 1
3546: PPUSH
3547: LD_INT 0
3549: PPUSH
3550: CALL_OW 49
3554: GO 3536
3556: POP
3557: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
3558: LD_INT 22
3560: PUSH
3561: LD_INT 4
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: PUSH
3568: LD_INT 21
3570: PUSH
3571: LD_INT 1
3573: PUSH
3574: EMPTY
3575: LIST
3576: LIST
3577: PUSH
3578: LD_INT 25
3580: PUSH
3581: LD_INT 2
3583: PUSH
3584: EMPTY
3585: LIST
3586: LIST
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: PPUSH
3593: CALL_OW 69
3597: PPUSH
3598: LD_INT 0
3600: PPUSH
3601: LD_INT 101
3603: PPUSH
3604: LD_INT 30
3606: PPUSH
3607: LD_INT 2
3609: PPUSH
3610: CALL_OW 205
// uc_side = 1 ;
3614: LD_ADDR_OWVAR 20
3618: PUSH
3619: LD_INT 1
3621: ST_TO_ADDR
// hc_class := 1 ;
3622: LD_ADDR_OWVAR 28
3626: PUSH
3627: LD_INT 1
3629: ST_TO_ADDR
// hc_sex := sex_female ;
3630: LD_ADDR_OWVAR 27
3634: PUSH
3635: LD_INT 2
3637: ST_TO_ADDR
// hc_gallery :=  ;
3638: LD_ADDR_OWVAR 33
3642: PUSH
3643: LD_STRING 
3645: ST_TO_ADDR
// hc_name :=  ;
3646: LD_ADDR_OWVAR 26
3650: PUSH
3651: LD_STRING 
3653: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3654: LD_ADDR_OWVAR 31
3658: PUSH
3659: LD_INT 1
3661: PUSH
3662: LD_INT 7
3664: PUSH
3665: LD_INT 1
3667: PUSH
3668: LD_INT 0
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: LIST
3675: LIST
3676: ST_TO_ADDR
// AmScout = CreateHuman ;
3677: LD_ADDR_EXP 18
3681: PUSH
3682: CALL_OW 44
3686: ST_TO_ADDR
// end ;
3687: LD_VAR 0 1
3691: RET
// export function PrepareCornell ; begin
3692: LD_INT 0
3694: PPUSH
// uc_side = 4 ;
3695: LD_ADDR_OWVAR 20
3699: PUSH
3700: LD_INT 4
3702: ST_TO_ADDR
// uc_nation = 1 ;
3703: LD_ADDR_OWVAR 21
3707: PUSH
3708: LD_INT 1
3710: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3711: LD_ADDR_EXP 19
3715: PUSH
3716: LD_STRING 03_Cornel
3718: PPUSH
3719: LD_INT 1
3721: PPUSH
3722: CALL 8402 0 2
3726: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3727: LD_EXP 19
3731: PPUSH
3732: LD_INT 8
3734: PPUSH
3735: LD_INT 0
3737: PPUSH
3738: CALL_OW 49
// if IsInUnit ( JMM ) then
3742: LD_EXP 1
3746: PPUSH
3747: CALL_OW 310
3751: IFFALSE 3794
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3753: LD_EXP 19
3757: PPUSH
3758: LD_EXP 1
3762: PPUSH
3763: CALL_OW 310
3767: PPUSH
3768: CALL_OW 250
3772: PPUSH
3773: LD_EXP 1
3777: PPUSH
3778: CALL_OW 310
3782: PPUSH
3783: CALL_OW 251
3787: PPUSH
3788: CALL_OW 111
3792: GO 3823
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3794: LD_EXP 19
3798: PPUSH
3799: LD_EXP 1
3803: PPUSH
3804: CALL_OW 250
3808: PPUSH
3809: LD_EXP 1
3813: PPUSH
3814: CALL_OW 251
3818: PPUSH
3819: CALL_OW 111
// end ; end_of_file
3823: LD_VAR 0 1
3827: RET
// export function PrepareRussians ; var i , un ; begin
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
3832: PPUSH
// uc_side = 3 ;
3833: LD_ADDR_OWVAR 20
3837: PUSH
3838: LD_INT 3
3840: ST_TO_ADDR
// uc_nation = 3 ;
3841: LD_ADDR_OWVAR 21
3845: PUSH
3846: LD_INT 3
3848: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3849: LD_ADDR_EXP 24
3853: PUSH
3854: LD_STRING Tsaritsyn
3856: PPUSH
3857: LD_INT 0
3859: PPUSH
3860: CALL 8402 0 2
3864: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3865: LD_EXP 24
3869: PPUSH
3870: LD_INT 3
3872: PPUSH
3873: LD_INT 0
3875: PPUSH
3876: CALL_OW 49
// for i = 1 to 14 do
3880: LD_ADDR_VAR 0 2
3884: PUSH
3885: DOUBLE
3886: LD_INT 1
3888: DEC
3889: ST_TO_ADDR
3890: LD_INT 14
3892: PUSH
3893: FOR_TO
3894: IFFALSE 3980
// begin uc_side = 3 ;
3896: LD_ADDR_OWVAR 20
3900: PUSH
3901: LD_INT 3
3903: ST_TO_ADDR
// uc_nation = 3 ;
3904: LD_ADDR_OWVAR 21
3908: PUSH
3909: LD_INT 3
3911: ST_TO_ADDR
// hc_gallery =  ;
3912: LD_ADDR_OWVAR 33
3916: PUSH
3917: LD_STRING 
3919: ST_TO_ADDR
// hc_name =  ;
3920: LD_ADDR_OWVAR 26
3924: PUSH
3925: LD_STRING 
3927: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3928: LD_INT 0
3930: PPUSH
3931: LD_INT 1
3933: PPUSH
3934: LD_EXP 34
3938: PPUSH
3939: LD_EXP 35
3943: PPUSH
3944: CALL_OW 12
3948: PPUSH
3949: CALL_OW 380
// un = CreateHuman ;
3953: LD_ADDR_VAR 0 3
3957: PUSH
3958: CALL_OW 44
3962: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3963: LD_VAR 0 3
3967: PPUSH
3968: LD_INT 3
3970: PPUSH
3971: LD_INT 0
3973: PPUSH
3974: CALL_OW 49
// end ;
3978: GO 3893
3980: POP
3981: POP
// for i = 1 to 6 do
3982: LD_ADDR_VAR 0 2
3986: PUSH
3987: DOUBLE
3988: LD_INT 1
3990: DEC
3991: ST_TO_ADDR
3992: LD_INT 6
3994: PUSH
3995: FOR_TO
3996: IFFALSE 4082
// begin uc_side = 3 ;
3998: LD_ADDR_OWVAR 20
4002: PUSH
4003: LD_INT 3
4005: ST_TO_ADDR
// uc_nation = 3 ;
4006: LD_ADDR_OWVAR 21
4010: PUSH
4011: LD_INT 3
4013: ST_TO_ADDR
// hc_gallery =  ;
4014: LD_ADDR_OWVAR 33
4018: PUSH
4019: LD_STRING 
4021: ST_TO_ADDR
// hc_name =  ;
4022: LD_ADDR_OWVAR 26
4026: PUSH
4027: LD_STRING 
4029: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4030: LD_INT 0
4032: PPUSH
4033: LD_INT 2
4035: PPUSH
4036: LD_EXP 34
4040: PPUSH
4041: LD_EXP 35
4045: PPUSH
4046: CALL_OW 12
4050: PPUSH
4051: CALL_OW 380
// un = CreateHuman ;
4055: LD_ADDR_VAR 0 3
4059: PUSH
4060: CALL_OW 44
4064: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4065: LD_VAR 0 3
4069: PPUSH
4070: LD_INT 3
4072: PPUSH
4073: LD_INT 0
4075: PPUSH
4076: CALL_OW 49
// end ;
4080: GO 3995
4082: POP
4083: POP
// for i = 1 to 6 do
4084: LD_ADDR_VAR 0 2
4088: PUSH
4089: DOUBLE
4090: LD_INT 1
4092: DEC
4093: ST_TO_ADDR
4094: LD_INT 6
4096: PUSH
4097: FOR_TO
4098: IFFALSE 4184
// begin uc_side = 3 ;
4100: LD_ADDR_OWVAR 20
4104: PUSH
4105: LD_INT 3
4107: ST_TO_ADDR
// uc_nation = 3 ;
4108: LD_ADDR_OWVAR 21
4112: PUSH
4113: LD_INT 3
4115: ST_TO_ADDR
// hc_gallery =  ;
4116: LD_ADDR_OWVAR 33
4120: PUSH
4121: LD_STRING 
4123: ST_TO_ADDR
// hc_name =  ;
4124: LD_ADDR_OWVAR 26
4128: PUSH
4129: LD_STRING 
4131: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 3
4137: PPUSH
4138: LD_EXP 34
4142: PPUSH
4143: LD_EXP 35
4147: PPUSH
4148: CALL_OW 12
4152: PPUSH
4153: CALL_OW 380
// un = CreateHuman ;
4157: LD_ADDR_VAR 0 3
4161: PUSH
4162: CALL_OW 44
4166: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4167: LD_VAR 0 3
4171: PPUSH
4172: LD_INT 3
4174: PPUSH
4175: LD_INT 0
4177: PPUSH
4178: CALL_OW 49
// end ;
4182: GO 4097
4184: POP
4185: POP
// for i = 1 to 4 do
4186: LD_ADDR_VAR 0 2
4190: PUSH
4191: DOUBLE
4192: LD_INT 1
4194: DEC
4195: ST_TO_ADDR
4196: LD_INT 4
4198: PUSH
4199: FOR_TO
4200: IFFALSE 4286
// begin uc_side = 3 ;
4202: LD_ADDR_OWVAR 20
4206: PUSH
4207: LD_INT 3
4209: ST_TO_ADDR
// uc_nation = 3 ;
4210: LD_ADDR_OWVAR 21
4214: PUSH
4215: LD_INT 3
4217: ST_TO_ADDR
// hc_gallery =  ;
4218: LD_ADDR_OWVAR 33
4222: PUSH
4223: LD_STRING 
4225: ST_TO_ADDR
// hc_name =  ;
4226: LD_ADDR_OWVAR 26
4230: PUSH
4231: LD_STRING 
4233: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4234: LD_INT 0
4236: PPUSH
4237: LD_INT 4
4239: PPUSH
4240: LD_EXP 34
4244: PPUSH
4245: LD_EXP 35
4249: PPUSH
4250: CALL_OW 12
4254: PPUSH
4255: CALL_OW 380
// un = CreateHuman ;
4259: LD_ADDR_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4269: LD_VAR 0 3
4273: PPUSH
4274: LD_INT 3
4276: PPUSH
4277: LD_INT 0
4279: PPUSH
4280: CALL_OW 49
// end ;
4284: GO 4199
4286: POP
4287: POP
// end ; end_of_file
4288: LD_VAR 0 1
4292: RET
// export function PrepareArabianCommander ; begin
4293: LD_INT 0
4295: PPUSH
// uc_side = 2 ;
4296: LD_ADDR_OWVAR 20
4300: PUSH
4301: LD_INT 2
4303: ST_TO_ADDR
// uc_nation = 2 ;
4304: LD_ADDR_OWVAR 21
4308: PUSH
4309: LD_INT 2
4311: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4312: LD_ADDR_EXP 25
4316: PUSH
4317: LD_STRING Dietrich
4319: PPUSH
4320: CALL_OW 25
4324: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4325: LD_EXP 25
4329: PPUSH
4330: LD_INT 4
4332: PPUSH
4333: LD_INT 0
4335: PPUSH
4336: CALL_OW 49
// end ;
4340: LD_VAR 0 1
4344: RET
// export function PrepareArabian ; var i , un , veh ; begin
4345: LD_INT 0
4347: PPUSH
4348: PPUSH
4349: PPUSH
4350: PPUSH
// for i = 1 to 3 do
4351: LD_ADDR_VAR 0 2
4355: PUSH
4356: DOUBLE
4357: LD_INT 1
4359: DEC
4360: ST_TO_ADDR
4361: LD_INT 3
4363: PUSH
4364: FOR_TO
4365: IFFALSE 4451
// begin uc_side = 2 ;
4367: LD_ADDR_OWVAR 20
4371: PUSH
4372: LD_INT 2
4374: ST_TO_ADDR
// uc_nation = 2 ;
4375: LD_ADDR_OWVAR 21
4379: PUSH
4380: LD_INT 2
4382: ST_TO_ADDR
// hc_gallery =  ;
4383: LD_ADDR_OWVAR 33
4387: PUSH
4388: LD_STRING 
4390: ST_TO_ADDR
// hc_name =  ;
4391: LD_ADDR_OWVAR 26
4395: PUSH
4396: LD_STRING 
4398: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4399: LD_INT 0
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: LD_EXP 34
4409: PPUSH
4410: LD_EXP 35
4414: PPUSH
4415: CALL_OW 12
4419: PPUSH
4420: CALL_OW 380
// un = CreateHuman ;
4424: LD_ADDR_VAR 0 3
4428: PUSH
4429: CALL_OW 44
4433: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4434: LD_VAR 0 3
4438: PPUSH
4439: LD_INT 4
4441: PPUSH
4442: LD_INT 0
4444: PPUSH
4445: CALL_OW 49
// end ;
4449: GO 4364
4451: POP
4452: POP
// for i = 1 to 6 do
4453: LD_ADDR_VAR 0 2
4457: PUSH
4458: DOUBLE
4459: LD_INT 1
4461: DEC
4462: ST_TO_ADDR
4463: LD_INT 6
4465: PUSH
4466: FOR_TO
4467: IFFALSE 4553
// begin uc_side = 2 ;
4469: LD_ADDR_OWVAR 20
4473: PUSH
4474: LD_INT 2
4476: ST_TO_ADDR
// uc_nation = 2 ;
4477: LD_ADDR_OWVAR 21
4481: PUSH
4482: LD_INT 2
4484: ST_TO_ADDR
// hc_gallery =  ;
4485: LD_ADDR_OWVAR 33
4489: PUSH
4490: LD_STRING 
4492: ST_TO_ADDR
// hc_name =  ;
4493: LD_ADDR_OWVAR 26
4497: PUSH
4498: LD_STRING 
4500: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4501: LD_INT 0
4503: PPUSH
4504: LD_INT 2
4506: PPUSH
4507: LD_EXP 34
4511: PPUSH
4512: LD_EXP 35
4516: PPUSH
4517: CALL_OW 12
4521: PPUSH
4522: CALL_OW 380
// un = CreateHuman ;
4526: LD_ADDR_VAR 0 3
4530: PUSH
4531: CALL_OW 44
4535: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4536: LD_VAR 0 3
4540: PPUSH
4541: LD_INT 4
4543: PPUSH
4544: LD_INT 0
4546: PPUSH
4547: CALL_OW 49
// end ;
4551: GO 4466
4553: POP
4554: POP
// for i = 1 to 6 do
4555: LD_ADDR_VAR 0 2
4559: PUSH
4560: DOUBLE
4561: LD_INT 1
4563: DEC
4564: ST_TO_ADDR
4565: LD_INT 6
4567: PUSH
4568: FOR_TO
4569: IFFALSE 4655
// begin uc_side = 2 ;
4571: LD_ADDR_OWVAR 20
4575: PUSH
4576: LD_INT 2
4578: ST_TO_ADDR
// uc_nation = 2 ;
4579: LD_ADDR_OWVAR 21
4583: PUSH
4584: LD_INT 2
4586: ST_TO_ADDR
// hc_gallery =  ;
4587: LD_ADDR_OWVAR 33
4591: PUSH
4592: LD_STRING 
4594: ST_TO_ADDR
// hc_name =  ;
4595: LD_ADDR_OWVAR 26
4599: PUSH
4600: LD_STRING 
4602: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4603: LD_INT 0
4605: PPUSH
4606: LD_INT 1
4608: PPUSH
4609: LD_EXP 34
4613: PPUSH
4614: LD_EXP 35
4618: PPUSH
4619: CALL_OW 12
4623: PPUSH
4624: CALL_OW 380
// un = CreateHuman ;
4628: LD_ADDR_VAR 0 3
4632: PUSH
4633: CALL_OW 44
4637: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4638: LD_VAR 0 3
4642: PPUSH
4643: LD_INT 4
4645: PPUSH
4646: LD_INT 0
4648: PPUSH
4649: CALL_OW 49
// end ;
4653: GO 4568
4655: POP
4656: POP
// for i = 1 to 4 do
4657: LD_ADDR_VAR 0 2
4661: PUSH
4662: DOUBLE
4663: LD_INT 1
4665: DEC
4666: ST_TO_ADDR
4667: LD_INT 4
4669: PUSH
4670: FOR_TO
4671: IFFALSE 4757
// begin uc_side = 2 ;
4673: LD_ADDR_OWVAR 20
4677: PUSH
4678: LD_INT 2
4680: ST_TO_ADDR
// uc_nation = 2 ;
4681: LD_ADDR_OWVAR 21
4685: PUSH
4686: LD_INT 2
4688: ST_TO_ADDR
// hc_gallery =  ;
4689: LD_ADDR_OWVAR 33
4693: PUSH
4694: LD_STRING 
4696: ST_TO_ADDR
// hc_name =  ;
4697: LD_ADDR_OWVAR 26
4701: PUSH
4702: LD_STRING 
4704: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4705: LD_INT 0
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_EXP 34
4715: PPUSH
4716: LD_EXP 35
4720: PPUSH
4721: CALL_OW 12
4725: PPUSH
4726: CALL_OW 380
// un = CreateHuman ;
4730: LD_ADDR_VAR 0 3
4734: PUSH
4735: CALL_OW 44
4739: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4740: LD_VAR 0 3
4744: PPUSH
4745: LD_INT 4
4747: PPUSH
4748: LD_INT 0
4750: PPUSH
4751: CALL_OW 49
// end ;
4755: GO 4670
4757: POP
4758: POP
// for i = 1 to 2 do
4759: LD_ADDR_VAR 0 2
4763: PUSH
4764: DOUBLE
4765: LD_INT 1
4767: DEC
4768: ST_TO_ADDR
4769: LD_INT 2
4771: PUSH
4772: FOR_TO
4773: IFFALSE 4903
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4775: LD_ADDR_VAR 0 4
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 2
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 21
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 58
4802: PUSH
4803: EMPTY
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: LIST
4810: PPUSH
4811: CALL_OW 69
4815: ST_TO_ADDR
// uc_side = 2 ;
4816: LD_ADDR_OWVAR 20
4820: PUSH
4821: LD_INT 2
4823: ST_TO_ADDR
// uc_nation = 2 ;
4824: LD_ADDR_OWVAR 21
4828: PUSH
4829: LD_INT 2
4831: ST_TO_ADDR
// hc_gallery =  ;
4832: LD_ADDR_OWVAR 33
4836: PUSH
4837: LD_STRING 
4839: ST_TO_ADDR
// hc_name =  ;
4840: LD_ADDR_OWVAR 26
4844: PUSH
4845: LD_STRING 
4847: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4848: LD_INT 0
4850: PPUSH
4851: LD_INT 3
4853: PPUSH
4854: LD_EXP 34
4858: PPUSH
4859: LD_EXP 35
4863: PPUSH
4864: CALL_OW 12
4868: PPUSH
4869: CALL_OW 380
// un = CreateHuman ;
4873: LD_ADDR_VAR 0 3
4877: PUSH
4878: CALL_OW 44
4882: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4883: LD_VAR 0 3
4887: PPUSH
4888: LD_VAR 0 4
4892: PUSH
4893: LD_INT 1
4895: ARRAY
4896: PPUSH
4897: CALL_OW 52
// end ;
4901: GO 4772
4903: POP
4904: POP
// end ; end_of_file
4905: LD_VAR 0 1
4909: RET
// every 1 do
4910: GO 4912
4912: DISABLE
// begin CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
4913: LD_EXP 1
4917: PPUSH
4918: CALL_OW 310
4922: PPUSH
4923: CALL_OW 87
// if IsOk ( Gary ) then
4927: LD_EXP 10
4931: PPUSH
4932: CALL_OW 302
4936: IFFALSE 4982
// begin DialogueOn ;
4938: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
4942: LD_EXP 10
4946: PPUSH
4947: LD_STRING D2-Gary-1
4949: PPUSH
4950: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4954: LD_EXP 1
4958: PPUSH
4959: LD_STRING D2-JMM-1
4961: PPUSH
4962: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4966: LD_EXP 10
4970: PPUSH
4971: LD_STRING D2-Gary-2
4973: PPUSH
4974: CALL_OW 88
// DialogueOff ;
4978: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
4982: LD_STRING M1
4984: PPUSH
4985: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4989: LD_INT 38
4991: PPUSH
4992: LD_INT 1
4994: PPUSH
4995: LD_INT 100
4997: PPUSH
4998: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5002: LD_INT 47
5004: PPUSH
5005: LD_INT 1
5007: PPUSH
5008: LD_INT 50
5010: PPUSH
5011: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5015: LD_INT 47
5017: PPUSH
5018: LD_INT 3
5020: PPUSH
5021: LD_INT 50
5023: PPUSH
5024: CALL_OW 291
// end ;
5028: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
5029: LD_EXP 1
5033: PPUSH
5034: LD_EXP 11
5038: PPUSH
5039: CALL_OW 296
5043: PUSH
5044: LD_INT 15
5046: LESS
5047: IFFALSE 5422
5049: GO 5051
5051: DISABLE
// begin InGameOn ;
5052: CALL_OW 8
// ComExitVehicle ( JMM ) ;
5056: LD_EXP 1
5060: PPUSH
5061: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5065: LD_EXP 1
5069: PPUSH
5070: CALL_OW 87
// wait ( 0 0$1 ) ;
5074: LD_INT 35
5076: PPUSH
5077: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5081: LD_INT 35
5083: PPUSH
5084: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5088: LD_EXP 11
5092: PUSH
5093: LD_EXP 13
5097: PUSH
5098: LD_EXP 12
5102: PUSH
5103: LD_EXP 14
5107: PUSH
5108: EMPTY
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: PPUSH
5114: LD_EXP 1
5118: PPUSH
5119: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
5123: LD_EXP 1
5127: PPUSH
5128: LD_EXP 11
5132: PPUSH
5133: CALL_OW 296
5137: PUSH
5138: LD_INT 5
5140: LESS
5141: IFFALSE 5081
// ComTurnUnit ( JMM , Simms ) ;
5143: LD_EXP 1
5147: PPUSH
5148: LD_EXP 11
5152: PPUSH
5153: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5157: LD_EXP 11
5161: PUSH
5162: LD_EXP 13
5166: PUSH
5167: LD_EXP 12
5171: PUSH
5172: LD_EXP 14
5176: PUSH
5177: EMPTY
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: PPUSH
5183: LD_EXP 1
5187: PPUSH
5188: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5192: LD_EXP 1
5196: PUSH
5197: LD_EXP 11
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: PPUSH
5206: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5210: LD_EXP 11
5214: PPUSH
5215: LD_STRING D2a-Sim-1
5217: PPUSH
5218: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5222: LD_EXP 1
5226: PPUSH
5227: LD_STRING D2a-JMM-1
5229: PPUSH
5230: CALL_OW 88
// if IsOk ( Joan ) then
5234: LD_EXP 13
5238: PPUSH
5239: CALL_OW 302
5243: IFFALSE 5295
// begin ComTurnUnit ( JMM , Joan ) ;
5245: LD_EXP 1
5249: PPUSH
5250: LD_EXP 13
5254: PPUSH
5255: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5259: LD_EXP 13
5263: PPUSH
5264: LD_STRING D2b-Joan-1
5266: PPUSH
5267: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5271: LD_EXP 1
5275: PPUSH
5276: LD_STRING D2b-JMM-1
5278: PPUSH
5279: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5283: LD_EXP 13
5287: PPUSH
5288: LD_STRING D2b-Joan-2
5290: PPUSH
5291: CALL_OW 88
// end ; if IsOk ( Denis ) then
5295: LD_EXP 12
5299: PPUSH
5300: CALL_OW 302
5304: IFFALSE 5332
// begin ComTurnUnit ( JMM , Denis ) ;
5306: LD_EXP 1
5310: PPUSH
5311: LD_EXP 12
5315: PPUSH
5316: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5320: LD_EXP 12
5324: PPUSH
5325: LD_STRING D2c-Den-1
5327: PPUSH
5328: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5332: LD_EXP 14
5336: PPUSH
5337: CALL_OW 302
5341: IFFALSE 5381
// begin ComTurnUnit ( JMM , Khatam ) ;
5343: LD_EXP 1
5347: PPUSH
5348: LD_EXP 14
5352: PPUSH
5353: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5357: LD_EXP 1
5361: PPUSH
5362: LD_STRING D2c-JMM-1
5364: PPUSH
5365: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5369: LD_EXP 14
5373: PPUSH
5374: LD_STRING D2c-Khat-1
5376: PPUSH
5377: CALL_OW 88
// end ; InGameOff ;
5381: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5385: LD_INT 22
5387: PUSH
5388: LD_INT 4
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PPUSH
5395: CALL_OW 69
5399: PPUSH
5400: LD_INT 1
5402: PPUSH
5403: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5407: LD_STRING M1a
5409: PPUSH
5410: CALL_OW 337
// joinEpsilon = 1 ;
5414: LD_ADDR_EXP 27
5418: PUSH
5419: LD_INT 1
5421: ST_TO_ADDR
// end ;
5422: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
5423: LD_EXP 53
5427: PUSH
5428: LD_INT 1
5430: EQUAL
5431: IFFALSE 6037
5433: GO 5435
5435: DISABLE
5436: LD_INT 0
5438: PPUSH
5439: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
5440: LD_ADDR_VAR 0 1
5444: PUSH
5445: LD_INT 22
5447: PUSH
5448: LD_INT 1
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: PUSH
5455: LD_INT 25
5457: PUSH
5458: LD_INT 4
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PUSH
5465: LD_INT 26
5467: PUSH
5468: LD_INT 1
5470: PUSH
5471: EMPTY
5472: LIST
5473: LIST
5474: PUSH
5475: EMPTY
5476: LIST
5477: LIST
5478: LIST
5479: PPUSH
5480: CALL_OW 69
5484: PUSH
5485: LD_INT 1
5487: ARRAY
5488: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
5489: LD_ADDR_VAR 0 2
5493: PUSH
5494: LD_INT 22
5496: PUSH
5497: LD_INT 1
5499: PUSH
5500: EMPTY
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 26
5506: PUSH
5507: LD_INT 1
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PUSH
5514: LD_INT 2
5516: PUSH
5517: LD_INT 25
5519: PUSH
5520: LD_INT 1
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PUSH
5527: LD_INT 25
5529: PUSH
5530: LD_INT 2
5532: PUSH
5533: EMPTY
5534: LIST
5535: LIST
5536: PUSH
5537: LD_INT 25
5539: PUSH
5540: LD_INT 3
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: EMPTY
5548: LIST
5549: LIST
5550: LIST
5551: LIST
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: LIST
5557: PPUSH
5558: CALL_OW 69
5562: PUSH
5563: LD_INT 1
5565: ARRAY
5566: ST_TO_ADDR
// DialogueOn ;
5567: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5571: LD_EXP 17
5575: PPUSH
5576: CALL_OW 302
5580: IFFALSE 5596
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5582: LD_EXP 17
5586: PPUSH
5587: LD_STRING D3-Sci1-1
5589: PPUSH
5590: CALL_OW 88
5594: GO 5608
// Say ( tmp1 , D3-Sci1-1 ) ;
5596: LD_VAR 0 1
5600: PPUSH
5601: LD_STRING D3-Sci1-1
5603: PPUSH
5604: CALL_OW 88
// if IsOk ( Gary ) then
5608: LD_EXP 10
5612: PPUSH
5613: CALL_OW 302
5617: IFFALSE 5633
// Say ( Gary , D3-Gary-1 ) else
5619: LD_EXP 10
5623: PPUSH
5624: LD_STRING D3-Gary-1
5626: PPUSH
5627: CALL_OW 88
5631: GO 5645
// Say ( tmp2 , D3-Gary-1 ) ;
5633: LD_VAR 0 2
5637: PPUSH
5638: LD_STRING D3-Gary-1
5640: PPUSH
5641: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5645: LD_EXP 17
5649: PPUSH
5650: CALL_OW 302
5654: IFFALSE 5670
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5656: LD_EXP 17
5660: PPUSH
5661: LD_STRING D3-Sci1-2
5663: PPUSH
5664: CALL_OW 88
5668: GO 5682
// Say ( tmp1 , D3-Sci1-2 ) ;
5670: LD_VAR 0 1
5674: PPUSH
5675: LD_STRING D3-Sci1-2
5677: PPUSH
5678: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5682: LD_EXP 1
5686: PPUSH
5687: LD_STRING D3-JMM-2
5689: PPUSH
5690: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5694: LD_EXP 17
5698: PPUSH
5699: CALL_OW 302
5703: IFFALSE 5719
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5705: LD_EXP 17
5709: PPUSH
5710: LD_STRING D3-Sci1-3
5712: PPUSH
5713: CALL_OW 88
5717: GO 5731
// Say ( tmp1 , D3-Sci1-3 ) ;
5719: LD_VAR 0 1
5723: PPUSH
5724: LD_STRING D3-Sci1-3
5726: PPUSH
5727: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5731: LD_EXP 1
5735: PPUSH
5736: LD_STRING D3-JMM-3
5738: PPUSH
5739: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5743: LD_EXP 17
5747: PPUSH
5748: CALL_OW 302
5752: IFFALSE 5768
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5754: LD_EXP 17
5758: PPUSH
5759: LD_STRING D3-Sci1-4
5761: PPUSH
5762: CALL_OW 88
5766: GO 5780
// Say ( tmp1 , D3-Sci1-4 ) ;
5768: LD_VAR 0 1
5772: PPUSH
5773: LD_STRING D3-Sci1-4
5775: PPUSH
5776: CALL_OW 88
// DialogueOff ;
5780: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
5784: LD_INT 12
5786: PPUSH
5787: LD_INT 1
5789: PPUSH
5790: LD_INT 1
5792: PPUSH
5793: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5797: LD_INT 32
5799: PPUSH
5800: LD_INT 1
5802: PPUSH
5803: LD_INT 1
5805: PPUSH
5806: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5810: LD_INT 12
5812: PPUSH
5813: LD_INT 1
5815: PPUSH
5816: LD_INT 1
5818: PPUSH
5819: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5823: LD_INT 33
5825: PPUSH
5826: LD_INT 1
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5836: LD_STRING M2
5838: PPUSH
5839: CALL_OW 337
// wait ( 5 5$0 ) ;
5843: LD_INT 10500
5845: PPUSH
5846: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
5850: LD_EXP 11
5854: PPUSH
5855: CALL_OW 302
5859: PUSH
5860: LD_EXP 12
5864: PPUSH
5865: CALL_OW 302
5869: AND
5870: IFFALSE 6037
// begin DialogueOn ;
5872: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5876: LD_EXP 11
5880: PPUSH
5881: LD_STRING D3a-Sim-1
5883: PPUSH
5884: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
5888: LD_EXP 12
5892: PPUSH
5893: LD_STRING D3a-Sci1-1
5895: PPUSH
5896: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5900: LD_EXP 11
5904: PPUSH
5905: LD_STRING D3a-Sim-2
5907: PPUSH
5908: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
5912: LD_EXP 12
5916: PPUSH
5917: LD_STRING D3a-Sci1-2
5919: PPUSH
5920: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5924: LD_EXP 11
5928: PPUSH
5929: LD_STRING D3a-Sim-3
5931: PPUSH
5932: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
5936: LD_EXP 12
5940: PPUSH
5941: LD_STRING D3a-Sci1-3
5943: PPUSH
5944: CALL_OW 88
// if IsOK ( Joan ) then
5948: LD_EXP 13
5952: PPUSH
5953: CALL_OW 302
5957: IFFALSE 5973
// Say ( Simms , D3a-Sim-4 ) else
5959: LD_EXP 11
5963: PPUSH
5964: LD_STRING D3a-Sim-4
5966: PPUSH
5967: CALL_OW 88
5971: GO 5985
// Say ( Simms , D3a-Sim-4a ) ;
5973: LD_EXP 11
5977: PPUSH
5978: LD_STRING D3a-Sim-4a
5980: PPUSH
5981: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
5985: LD_EXP 12
5989: PPUSH
5990: LD_STRING D3a-Sci1-4
5992: PPUSH
5993: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5997: LD_EXP 11
6001: PPUSH
6002: LD_STRING D3a-Sim-5
6004: PPUSH
6005: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
6009: LD_EXP 12
6013: PPUSH
6014: LD_STRING D3a-Sci1-5
6016: PPUSH
6017: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6021: LD_EXP 11
6025: PPUSH
6026: LD_STRING D3a-Sim-6
6028: PPUSH
6029: CALL_OW 88
// DialogueOff ;
6033: CALL_OW 7
// end ; end ;
6037: PPOPN 2
6039: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6040: LD_EXP 27
6044: PUSH
6045: LD_INT 1
6047: EQUAL
6048: IFFALSE 6368
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6056: LD_EXP 18
6060: PPUSH
6061: LD_STRING D4-FSol1-1
6063: PPUSH
6064: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6068: LD_STRING M3
6070: PPUSH
6071: CALL_OW 337
// PrepareRussians ;
6075: CALL 3828 0 0
// rnd = Rand ( 1 , 100 ) ;
6079: LD_ADDR_VAR 0 1
6083: PUSH
6084: LD_INT 1
6086: PPUSH
6087: LD_INT 100
6089: PPUSH
6090: CALL_OW 12
6094: ST_TO_ADDR
// if difficulty = 1 then
6095: LD_OWVAR 67
6099: PUSH
6100: LD_INT 1
6102: EQUAL
6103: IFFALSE 6186
// begin if rnd > 0 and rnd < 51 then
6105: LD_VAR 0 1
6109: PUSH
6110: LD_INT 0
6112: GREATER
6113: PUSH
6114: LD_VAR 0 1
6118: PUSH
6119: LD_INT 51
6121: LESS
6122: AND
6123: IFFALSE 6132
// BuildRussianBase ( 2 ) ;
6125: LD_INT 2
6127: PPUSH
6128: CALL 8986 0 1
// if rnd > 50 and rnd < 81 then
6132: LD_VAR 0 1
6136: PUSH
6137: LD_INT 50
6139: GREATER
6140: PUSH
6141: LD_VAR 0 1
6145: PUSH
6146: LD_INT 81
6148: LESS
6149: AND
6150: IFFALSE 6159
// BuildRussianBase ( 1 ) ;
6152: LD_INT 1
6154: PPUSH
6155: CALL 8986 0 1
// if rnd > 80 and rnd < 101 then
6159: LD_VAR 0 1
6163: PUSH
6164: LD_INT 80
6166: GREATER
6167: PUSH
6168: LD_VAR 0 1
6172: PUSH
6173: LD_INT 101
6175: LESS
6176: AND
6177: IFFALSE 6186
// BuildRussianBase ( 3 ) ;
6179: LD_INT 3
6181: PPUSH
6182: CALL 8986 0 1
// end ; if difficulty = 2 then
6186: LD_OWVAR 67
6190: PUSH
6191: LD_INT 2
6193: EQUAL
6194: IFFALSE 6277
// begin if rnd > 0 and rnd < 61 then
6196: LD_VAR 0 1
6200: PUSH
6201: LD_INT 0
6203: GREATER
6204: PUSH
6205: LD_VAR 0 1
6209: PUSH
6210: LD_INT 61
6212: LESS
6213: AND
6214: IFFALSE 6223
// BuildRussianBase ( 2 ) ;
6216: LD_INT 2
6218: PPUSH
6219: CALL 8986 0 1
// if rnd > 60 and rnd < 81 then
6223: LD_VAR 0 1
6227: PUSH
6228: LD_INT 60
6230: GREATER
6231: PUSH
6232: LD_VAR 0 1
6236: PUSH
6237: LD_INT 81
6239: LESS
6240: AND
6241: IFFALSE 6250
// BuildRussianBase ( 1 ) ;
6243: LD_INT 1
6245: PPUSH
6246: CALL 8986 0 1
// if rnd > 80 and rnd < 101 then
6250: LD_VAR 0 1
6254: PUSH
6255: LD_INT 80
6257: GREATER
6258: PUSH
6259: LD_VAR 0 1
6263: PUSH
6264: LD_INT 101
6266: LESS
6267: AND
6268: IFFALSE 6277
// BuildRussianBase ( 3 ) ;
6270: LD_INT 3
6272: PPUSH
6273: CALL 8986 0 1
// end ; if difficulty = 3 then
6277: LD_OWVAR 67
6281: PUSH
6282: LD_INT 3
6284: EQUAL
6285: IFFALSE 6368
// begin if rnd > 0 and rnd < 71 then
6287: LD_VAR 0 1
6291: PUSH
6292: LD_INT 0
6294: GREATER
6295: PUSH
6296: LD_VAR 0 1
6300: PUSH
6301: LD_INT 71
6303: LESS
6304: AND
6305: IFFALSE 6314
// BuildRussianBase ( 3 ) ;
6307: LD_INT 3
6309: PPUSH
6310: CALL 8986 0 1
// if rnd > 70 and rnd < 81 then
6314: LD_VAR 0 1
6318: PUSH
6319: LD_INT 70
6321: GREATER
6322: PUSH
6323: LD_VAR 0 1
6327: PUSH
6328: LD_INT 81
6330: LESS
6331: AND
6332: IFFALSE 6341
// BuildRussianBase ( 2 ) ;
6334: LD_INT 2
6336: PPUSH
6337: CALL 8986 0 1
// if rnd > 80 and rnd < 101 then
6341: LD_VAR 0 1
6345: PUSH
6346: LD_INT 80
6348: GREATER
6349: PUSH
6350: LD_VAR 0 1
6354: PUSH
6355: LD_INT 101
6357: LESS
6358: AND
6359: IFFALSE 6368
// BuildRussianBase ( 1 ) ;
6361: LD_INT 1
6363: PPUSH
6364: CALL 8986 0 1
// end ; end ;
6368: PPOPN 1
6370: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6371: LD_INT 54
6373: PPUSH
6374: LD_INT 1
6376: PPUSH
6377: CALL_OW 321
6381: PUSH
6382: LD_INT 2
6384: EQUAL
6385: PUSH
6386: LD_INT 21
6388: PPUSH
6389: LD_INT 1
6391: PPUSH
6392: CALL_OW 321
6396: PUSH
6397: LD_INT 2
6399: EQUAL
6400: OR
6401: PUSH
6402: LD_INT 22
6404: PPUSH
6405: LD_INT 1
6407: PPUSH
6408: CALL_OW 321
6412: PUSH
6413: LD_INT 2
6415: EQUAL
6416: OR
6417: IFFALSE 6734
6419: GO 6421
6421: DISABLE
6422: LD_INT 0
6424: PPUSH
6425: PPUSH
// begin if IsOk ( Denis ) then
6426: LD_EXP 12
6430: PPUSH
6431: CALL_OW 302
6435: IFFALSE 6529
// begin DialogueOn ;
6437: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6441: LD_EXP 1
6445: PPUSH
6446: LD_STRING D6-JMM-1
6448: PPUSH
6449: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
6453: LD_EXP 12
6457: PPUSH
6458: LD_STRING D6-Sci1-1
6460: PPUSH
6461: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6465: LD_EXP 1
6469: PPUSH
6470: LD_STRING D6-JMM-2
6472: PPUSH
6473: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
6477: LD_EXP 12
6481: PPUSH
6482: LD_STRING D6-Sci1-2
6484: PPUSH
6485: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6489: LD_EXP 1
6493: PPUSH
6494: LD_STRING D6-JMM-3
6496: PPUSH
6497: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
6501: LD_EXP 12
6505: PPUSH
6506: LD_STRING D6-Sci1-3
6508: PPUSH
6509: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6513: LD_EXP 1
6517: PPUSH
6518: LD_STRING D6-JMM-4
6520: PPUSH
6521: CALL_OW 88
// DialogueOff ;
6525: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6529: LD_INT 1050
6531: PPUSH
6532: CALL_OW 67
// if arabianTrait = 0 then
6536: LD_EXP 47
6540: PUSH
6541: LD_INT 0
6543: EQUAL
6544: IFFALSE 6678
// begin DialogueOn ;
6546: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
6550: LD_INT 22
6552: PUSH
6553: LD_INT 2
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 25
6562: PUSH
6563: LD_INT 4
6565: PUSH
6566: EMPTY
6567: LIST
6568: LIST
6569: PUSH
6570: LD_INT 26
6572: PUSH
6573: LD_INT 1
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: EMPTY
6581: LIST
6582: LIST
6583: LIST
6584: PPUSH
6585: CALL_OW 69
6589: PPUSH
6590: LD_STRING D5-Ar1-1
6592: PPUSH
6593: LD_STRING D5-Ar1-1
6595: PPUSH
6596: CALL 8459 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
6600: LD_EXP 25
6604: PPUSH
6605: LD_STRING D5-Diet-1
6607: PPUSH
6608: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
6612: LD_INT 22
6614: PUSH
6615: LD_INT 2
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 25
6624: PUSH
6625: LD_INT 4
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: LD_INT 26
6634: PUSH
6635: LD_INT 1
6637: PUSH
6638: EMPTY
6639: LIST
6640: LIST
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: LIST
6646: PPUSH
6647: CALL_OW 69
6651: PPUSH
6652: LD_STRING D5-Ar1-2
6654: PPUSH
6655: LD_STRING D5-Ar1-2
6657: PPUSH
6658: CALL 8459 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
6662: LD_EXP 25
6666: PPUSH
6667: LD_STRING D5-Diet-2
6669: PPUSH
6670: CALL_OW 88
// DialogueOff ;
6674: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6678: LD_INT 2100
6680: PUSH
6681: LD_INT 3150
6683: PUSH
6684: LD_INT 4200
6686: PUSH
6687: LD_INT 5250
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 1
6698: PPUSH
6699: LD_INT 4
6701: PPUSH
6702: CALL_OW 12
6706: ARRAY
6707: PPUSH
6708: CALL_OW 67
// if arabianTrait = 0 then
6712: LD_EXP 47
6716: PUSH
6717: LD_INT 0
6719: EQUAL
6720: IFFALSE 6726
// PrepareArabianTrait ;
6722: CALL 6737 0 0
// arabianTrait = 1 ;
6726: LD_ADDR_EXP 47
6730: PUSH
6731: LD_INT 1
6733: ST_TO_ADDR
// end ;
6734: PPOPN 2
6736: END
// export function PrepareArabianTrait ; var i , tmp ; begin
6737: LD_INT 0
6739: PPUSH
6740: PPUSH
6741: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6742: LD_ADDR_VAR 0 2
6746: PUSH
6747: LD_INT 22
6749: PUSH
6750: LD_INT 2
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: LD_INT 25
6759: PUSH
6760: LD_INT 4
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: PPUSH
6771: CALL_OW 69
6775: PUSH
6776: FOR_IN
6777: IFFALSE 6790
// ComExitBuilding ( i ) ;
6779: LD_VAR 0 2
6783: PPUSH
6784: CALL_OW 122
6788: GO 6776
6790: POP
6791: POP
// wait ( 0 0$1 ) ;
6792: LD_INT 35
6794: PPUSH
6795: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6799: LD_INT 76
6801: PPUSH
6802: LD_INT 19
6804: PPUSH
6805: CALL_OW 84
// DialogueOn ;
6809: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6813: LD_INT 22
6815: PUSH
6816: LD_INT 1
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: PUSH
6823: LD_INT 26
6825: PUSH
6826: LD_INT 1
6828: PUSH
6829: EMPTY
6830: LIST
6831: LIST
6832: PUSH
6833: EMPTY
6834: LIST
6835: LIST
6836: PUSH
6837: LD_EXP 1
6841: PUSH
6842: EMPTY
6843: LIST
6844: DIFF
6845: PPUSH
6846: CALL_OW 69
6850: PPUSH
6851: LD_STRING D8-Sol1-1
6853: PPUSH
6854: LD_STRING D8-Sol1-1
6856: PPUSH
6857: CALL 8459 0 3
// if IsOK ( DeltaDoctor ) then
6861: LD_EXP 17
6865: PPUSH
6866: CALL_OW 302
6870: IFFALSE 6886
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6872: LD_EXP 17
6876: PPUSH
6877: LD_STRING D8-Sci1-1
6879: PPUSH
6880: CALL_OW 88
6884: GO 6985
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6886: LD_INT 22
6888: PUSH
6889: LD_INT 1
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: PUSH
6896: LD_INT 26
6898: PUSH
6899: LD_INT 1
6901: PUSH
6902: EMPTY
6903: LIST
6904: LIST
6905: PUSH
6906: LD_INT 2
6908: PUSH
6909: LD_INT 25
6911: PUSH
6912: LD_INT 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 25
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: LD_INT 25
6931: PUSH
6932: LD_INT 3
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: LD_INT 25
6941: PUSH
6942: LD_INT 4
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: LIST
6960: PUSH
6961: LD_EXP 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: DIFF
6969: PPUSH
6970: CALL_OW 69
6974: PPUSH
6975: LD_STRING D8-Sol1-1
6977: PPUSH
6978: LD_STRING D8-Sol1-1
6980: PPUSH
6981: CALL 8459 0 3
// Say ( JMM , D8-JMM-1 ) ;
6985: LD_EXP 1
6989: PPUSH
6990: LD_STRING D8-JMM-1
6992: PPUSH
6993: CALL_OW 88
// DialogueOff ;
6997: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7001: LD_INT 2
7003: PPUSH
7004: LD_INT 2
7006: PPUSH
7007: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7011: LD_INT 1
7013: PPUSH
7014: LD_INT 2
7016: PPUSH
7017: LD_INT 2
7019: PPUSH
7020: LD_INT 1
7022: PPUSH
7023: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7027: LD_INT 3
7029: PPUSH
7030: LD_INT 2
7032: PPUSH
7033: LD_INT 1
7035: PPUSH
7036: LD_INT 1
7038: PPUSH
7039: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
7043: LD_ADDR_VAR 0 2
7047: PUSH
7048: LD_INT 22
7050: PUSH
7051: LD_INT 2
7053: PUSH
7054: EMPTY
7055: LIST
7056: LIST
7057: PUSH
7058: LD_INT 21
7060: PUSH
7061: LD_INT 1
7063: PUSH
7064: EMPTY
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PPUSH
7072: CALL_OW 69
7076: PUSH
7077: FOR_IN
7078: IFFALSE 7218
// begin ComExitBuilding ( i ) ;
7080: LD_VAR 0 2
7084: PPUSH
7085: CALL_OW 122
// wait ( 0 0$1 ) ;
7089: LD_INT 35
7091: PPUSH
7092: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7096: LD_VAR 0 2
7100: PPUSH
7101: LD_INT 77
7103: PPUSH
7104: LD_INT 10
7106: PPUSH
7107: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_INT 82
7118: PPUSH
7119: LD_INT 5
7121: PPUSH
7122: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7126: LD_VAR 0 2
7130: PPUSH
7131: LD_INT 95
7133: PPUSH
7134: LD_INT 12
7136: PPUSH
7137: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7141: LD_VAR 0 2
7145: PPUSH
7146: LD_INT 102
7148: PPUSH
7149: LD_INT 11
7151: PPUSH
7152: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7156: LD_VAR 0 2
7160: PPUSH
7161: LD_INT 116
7163: PPUSH
7164: LD_INT 15
7166: PPUSH
7167: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7171: LD_VAR 0 2
7175: PPUSH
7176: LD_INT 140
7178: PPUSH
7179: LD_INT 25
7181: PPUSH
7182: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7186: LD_VAR 0 2
7190: PPUSH
7191: LD_INT 160
7193: PPUSH
7194: LD_INT 56
7196: PPUSH
7197: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7201: LD_VAR 0 2
7205: PPUSH
7206: LD_INT 189
7208: PPUSH
7209: LD_INT 79
7211: PPUSH
7212: CALL_OW 174
// end ;
7216: GO 7077
7218: POP
7219: POP
// arabianAttackersAI = 1 ;
7220: LD_ADDR_EXP 44
7224: PUSH
7225: LD_INT 1
7227: ST_TO_ADDR
// wait ( 0 0$30 ) ;
7228: LD_INT 1050
7230: PPUSH
7231: CALL_OW 67
// if IsOk ( Gary ) then
7235: LD_EXP 10
7239: PPUSH
7240: CALL_OW 302
7244: IFFALSE 7258
// Say ( Gary , D8a-Gary-1 ) ;
7246: LD_EXP 10
7250: PPUSH
7251: LD_STRING D8a-Gary-1
7253: PPUSH
7254: CALL_OW 88
// wait ( 0 0$5 ) ;
7258: LD_INT 175
7260: PPUSH
7261: CALL_OW 67
// if IsOK ( Khatam ) then
7265: LD_EXP 14
7269: PPUSH
7270: CALL_OW 302
7274: IFFALSE 7546
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] [ 1 ] ;
7276: LD_ADDR_VAR 0 3
7280: PUSH
7281: LD_INT 22
7283: PUSH
7284: LD_INT 1
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PUSH
7291: LD_INT 26
7293: PUSH
7294: LD_INT 1
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 25
7306: PUSH
7307: LD_INT 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 2
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 25
7326: PUSH
7327: LD_INT 3
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 25
7336: PUSH
7337: LD_INT 4
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PUSH
7361: LD_EXP 1
7365: PUSH
7366: LD_EXP 14
7370: PUSH
7371: LD_EXP 13
7375: PUSH
7376: EMPTY
7377: LIST
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 1
7383: ARRAY
7384: DIFF
7385: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7386: LD_EXP 14
7390: PPUSH
7391: LD_INT 8
7393: PPUSH
7394: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7398: LD_EXP 14
7402: PPUSH
7403: CALL_OW 122
// wait ( 0 0$1 ) ;
7407: LD_INT 35
7409: PPUSH
7410: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7414: LD_EXP 14
7418: PPUSH
7419: CALL_OW 121
// wait ( 0 0$1 ) ;
7423: LD_INT 35
7425: PPUSH
7426: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7430: LD_EXP 14
7434: PPUSH
7435: LD_INT 7
7437: PPUSH
7438: CALL_OW 113
// DialogueOn ;
7442: CALL_OW 6
// DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
7446: LD_VAR 0 3
7450: PPUSH
7451: LD_STRING D8b-Sol1-1
7453: PPUSH
7454: LD_STRING D8b-FSol1-1
7456: PPUSH
7457: CALL 8459 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
7461: LD_EXP 14
7465: PPUSH
7466: LD_STRING D8b-Khat-1
7468: PPUSH
7469: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-2 , D8b-FSol1-2 ) ;
7473: LD_VAR 0 3
7477: PPUSH
7478: LD_STRING D8b-Sol1-2
7480: PPUSH
7481: LD_STRING D8b-FSol1-2
7483: PPUSH
7484: CALL 8459 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
7488: LD_EXP 14
7492: PPUSH
7493: LD_STRING D8b-Khat-2
7495: PPUSH
7496: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-3 , D8b-FSol1-3 ) ;
7500: LD_VAR 0 3
7504: PPUSH
7505: LD_STRING D8b-Sol1-3
7507: PPUSH
7508: LD_STRING D8b-FSol1-3
7510: PPUSH
7511: CALL 8459 0 3
// Say ( Khatam , D8b-Khat-3 ) ;
7515: LD_EXP 14
7519: PPUSH
7520: LD_STRING D8b-Khat-3
7522: PPUSH
7523: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-4 , D8b-FSol1-4 ) ;
7527: LD_VAR 0 3
7531: PPUSH
7532: LD_STRING D8b-Sol1-4
7534: PPUSH
7535: LD_STRING D8b-FSol1-4
7537: PPUSH
7538: CALL 8459 0 3
// DialogueOff ;
7542: CALL_OW 7
// end ; end ;
7546: LD_VAR 0 1
7550: RET
// every 0 0$1 do var i ;
7551: GO 7553
7553: DISABLE
7554: LD_INT 0
7556: PPUSH
// begin enable ;
7557: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
7558: LD_ADDR_VAR 0 1
7562: PUSH
7563: LD_INT 7
7565: PPUSH
7566: LD_INT 22
7568: PUSH
7569: LD_INT 2
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 70
7580: PUSH
7581: FOR_IN
7582: IFFALSE 7613
// begin RemoveUnit ( i ) ;
7584: LD_VAR 0 1
7588: PPUSH
7589: CALL_OW 64
// arabianEscape = 1 ;
7593: LD_ADDR_EXP 45
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
7601: LD_INT 1
7603: PPUSH
7604: LD_STRING 10_ScientistsEscape_1
7606: PPUSH
7607: CALL_OW 39
// end ;
7611: GO 7581
7613: POP
7614: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
7615: LD_EXP 14
7619: PPUSH
7620: LD_INT 7
7622: PPUSH
7623: CALL_OW 308
7627: IFFALSE 7646
// begin KhatamStatus = 1 ;
7629: LD_ADDR_EXP 48
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
7637: LD_EXP 14
7641: PPUSH
7642: CALL_OW 64
// end ; if IsInArea ( Dietrich , ArabianSpawn2 ) then
7646: LD_EXP 25
7650: PPUSH
7651: LD_INT 7
7653: PPUSH
7654: CALL_OW 308
7658: IFFALSE 7670
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7660: LD_INT 1
7662: PPUSH
7663: LD_STRING 10_GensherEscape_1
7665: PPUSH
7666: CALL_OW 39
// end ;
7670: PPOPN 1
7672: END
// every 0 0$1 trigger IsDead ( Khatam ) do
7673: LD_EXP 14
7677: PPUSH
7678: CALL_OW 301
7682: IFFALSE 7695
7684: GO 7686
7686: DISABLE
// KhatamStatus = 0 ;
7687: LD_ADDR_EXP 48
7691: PUSH
7692: LD_INT 0
7694: ST_TO_ADDR
7695: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
7696: LD_INT 22
7698: PUSH
7699: LD_INT 2
7701: PUSH
7702: EMPTY
7703: LIST
7704: LIST
7705: PUSH
7706: LD_INT 21
7708: PUSH
7709: LD_INT 1
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: PUSH
7725: LD_INT 0
7727: EQUAL
7728: PUSH
7729: LD_INT 22
7731: PUSH
7732: LD_INT 4
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 21
7741: PUSH
7742: LD_INT 1
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PPUSH
7753: CALL_OW 69
7757: PUSH
7758: LD_INT 0
7760: EQUAL
7761: AND
7762: IFFALSE 7775
7764: GO 7766
7766: DISABLE
// arabianDefeated = 1 ;
7767: LD_ADDR_EXP 46
7771: PUSH
7772: LD_INT 1
7774: ST_TO_ADDR
7775: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
7776: LD_INT 54
7778: PPUSH
7779: LD_INT 1
7781: PPUSH
7782: CALL_OW 321
7786: PUSH
7787: LD_INT 2
7789: EQUAL
7790: PUSH
7791: LD_INT 55
7793: PPUSH
7794: LD_INT 1
7796: PPUSH
7797: CALL_OW 321
7801: PUSH
7802: LD_INT 2
7804: EQUAL
7805: AND
7806: PUSH
7807: LD_INT 21
7809: PPUSH
7810: LD_INT 1
7812: PPUSH
7813: CALL_OW 321
7817: PUSH
7818: LD_INT 2
7820: EQUAL
7821: AND
7822: PUSH
7823: LD_INT 22
7825: PPUSH
7826: LD_INT 1
7828: PPUSH
7829: CALL_OW 321
7833: PUSH
7834: LD_INT 2
7836: EQUAL
7837: AND
7838: PUSH
7839: LD_INT 12
7841: PPUSH
7842: LD_INT 1
7844: PPUSH
7845: CALL_OW 321
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: AND
7854: PUSH
7855: LD_INT 32
7857: PPUSH
7858: LD_INT 1
7860: PPUSH
7861: CALL_OW 321
7865: PUSH
7866: LD_INT 2
7868: EQUAL
7869: AND
7870: PUSH
7871: LD_EXP 52
7875: PUSH
7876: LD_INT 0
7878: EQUAL
7879: AND
7880: PUSH
7881: LD_EXP 47
7885: PUSH
7886: LD_INT 0
7888: EQUAL
7889: AND
7890: IFFALSE 7907
7892: GO 7894
7894: DISABLE
// begin PrepareArabianTrait ;
7895: CALL 6737 0 0
// arabianTrait = 1 ;
7899: LD_ADDR_EXP 47
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// end ;
7907: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
7908: LD_EXP 27
7912: PUSH
7913: LD_INT 1
7915: EQUAL
7916: PUSH
7917: LD_STRING 02_mikhailStatus_1
7919: PPUSH
7920: LD_INT 0
7922: PPUSH
7923: CALL_OW 30
7927: PUSH
7928: LD_INT 1
7930: EQUAL
7931: AND
7932: IFFALSE 7941
7934: GO 7936
7936: DISABLE
// PrepareCornell ;
7937: CALL 3692 0 0
7941: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
7942: LD_INT 1
7944: PPUSH
7945: LD_EXP 19
7949: PPUSH
7950: CALL_OW 292
7954: IFFALSE 8179
7956: GO 7958
7958: DISABLE
// begin InGameOn ;
7959: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
7963: LD_EXP 19
7967: PPUSH
7968: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
7972: LD_EXP 19
7976: PPUSH
7977: LD_STRING D7-Corn-1
7979: PPUSH
7980: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
7984: LD_INT 22
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 2
7996: PUSH
7997: LD_INT 25
7999: PUSH
8000: LD_INT 1
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 25
8009: PUSH
8010: LD_INT 2
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: LD_INT 25
8019: PUSH
8020: LD_INT 3
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 25
8029: PUSH
8030: LD_INT 4
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PPUSH
8048: CALL_OW 69
8052: PUSH
8053: LD_EXP 1
8057: PUSH
8058: LD_EXP 13
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: DIFF
8067: PPUSH
8068: LD_STRING D7-Sol1-1
8070: PPUSH
8071: LD_STRING D7-FSol1-1
8073: PPUSH
8074: CALL 8459 0 3
// CenterNowOnUnits ( Cornell ) ;
8078: LD_EXP 19
8082: PPUSH
8083: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8087: LD_EXP 19
8091: PPUSH
8092: LD_STRING D7-Corn-2
8094: PPUSH
8095: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8099: LD_EXP 1
8103: PPUSH
8104: LD_STRING D7-JMM-2
8106: PPUSH
8107: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8111: LD_EXP 19
8115: PPUSH
8116: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8120: LD_EXP 19
8124: PPUSH
8125: LD_STRING D7-Corn-3
8127: PPUSH
8128: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8132: LD_EXP 19
8136: PPUSH
8137: LD_INT 250
8139: PPUSH
8140: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
8144: LD_EXP 19
8148: PPUSH
8149: LD_INT 1
8151: PPUSH
8152: CALL_OW 235
// wait ( 0 0$1 ) ;
8156: LD_INT 35
8158: PPUSH
8159: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
8163: LD_EXP 1
8167: PPUSH
8168: LD_STRING D7-JMM-3
8170: PPUSH
8171: CALL_OW 88
// InGameOff ;
8175: CALL_OW 9
// end ;
8179: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
8180: LD_EXP 19
8184: PPUSH
8185: CALL_OW 255
8189: PUSH
8190: LD_INT 1
8192: EQUAL
8193: PUSH
8194: LD_EXP 19
8198: PPUSH
8199: CALL_OW 256
8203: PUSH
8204: LD_INT 251
8206: GREATER
8207: AND
8208: IFFALSE 8401
8210: GO 8212
8212: DISABLE
// begin DialogueOn ;
8213: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
8217: LD_EXP 1
8221: PPUSH
8222: LD_STRING D7a-JMM-1
8224: PPUSH
8225: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
8229: LD_EXP 19
8233: PPUSH
8234: LD_STRING D7a-Corn-1
8236: PPUSH
8237: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
8241: LD_EXP 1
8245: PPUSH
8246: LD_STRING D7a-JMM-2
8248: PPUSH
8249: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
8253: LD_EXP 19
8257: PPUSH
8258: LD_STRING D7a-Corn-2
8260: PPUSH
8261: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
8265: LD_EXP 1
8269: PPUSH
8270: LD_STRING D7a-JMM-3
8272: PPUSH
8273: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
8277: LD_EXP 19
8281: PPUSH
8282: LD_STRING D7a-Corn-3
8284: PPUSH
8285: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
8289: LD_EXP 1
8293: PPUSH
8294: LD_STRING D7a-JMM-4
8296: PPUSH
8297: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
8301: LD_EXP 19
8305: PPUSH
8306: LD_STRING D7a-Corn-4
8308: PPUSH
8309: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
8313: LD_EXP 1
8317: PPUSH
8318: LD_STRING D7a-JMM-5
8320: PPUSH
8321: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
8325: LD_EXP 19
8329: PPUSH
8330: LD_STRING D7a-Corn-5
8332: PPUSH
8333: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
8337: LD_EXP 1
8341: PPUSH
8342: LD_STRING D7a-JMM-6
8344: PPUSH
8345: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
8349: LD_EXP 19
8353: PPUSH
8354: LD_STRING D7a-Corn-6
8356: PPUSH
8357: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
8361: LD_EXP 1
8365: PPUSH
8366: LD_STRING D7a-JMM-7
8368: PPUSH
8369: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
8373: LD_EXP 19
8377: PPUSH
8378: LD_STRING D7a-Corn-7
8380: PPUSH
8381: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
8385: LD_EXP 1
8389: PPUSH
8390: LD_STRING D7a-JMM-8
8392: PPUSH
8393: CALL_OW 88
// DialogueOff ;
8397: CALL_OW 7
// end ; end_of_file
8401: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8402: LD_INT 0
8404: PPUSH
8405: PPUSH
// if exist_mode then
8406: LD_VAR 0 2
8410: IFFALSE 8429
// unit := CreateCharacter ( ident ) else
8412: LD_ADDR_VAR 0 4
8416: PUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 34
8426: ST_TO_ADDR
8427: GO 8444
// unit := NewCharacter ( ident ) ;
8429: LD_ADDR_VAR 0 4
8433: PUSH
8434: LD_VAR 0 1
8438: PPUSH
8439: CALL_OW 25
8443: ST_TO_ADDR
// result := unit ;
8444: LD_ADDR_VAR 0 3
8448: PUSH
8449: LD_VAR 0 4
8453: ST_TO_ADDR
// end ;
8454: LD_VAR 0 3
8458: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
8459: LD_INT 0
8461: PPUSH
8462: PPUSH
8463: PPUSH
// rnd = rand ( 1 , characters ) ;
8464: LD_ADDR_VAR 0 6
8468: PUSH
8469: LD_INT 1
8471: PPUSH
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 12
8481: ST_TO_ADDR
// for i = 1 to characters do
8482: LD_ADDR_VAR 0 5
8486: PUSH
8487: DOUBLE
8488: LD_INT 1
8490: DEC
8491: ST_TO_ADDR
8492: LD_VAR 0 1
8496: PUSH
8497: FOR_TO
8498: IFFALSE 8608
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
8500: LD_VAR 0 5
8504: PUSH
8505: LD_VAR 0 6
8509: EQUAL
8510: PUSH
8511: LD_VAR 0 1
8515: PUSH
8516: LD_VAR 0 5
8520: ARRAY
8521: PPUSH
8522: CALL_OW 258
8526: PUSH
8527: LD_INT 1
8529: EQUAL
8530: AND
8531: IFFALSE 8553
// Say ( characters [ i ] , dialogMID ) ;
8533: LD_VAR 0 1
8537: PUSH
8538: LD_VAR 0 5
8542: ARRAY
8543: PPUSH
8544: LD_VAR 0 2
8548: PPUSH
8549: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
8553: LD_VAR 0 5
8557: PUSH
8558: LD_VAR 0 6
8562: EQUAL
8563: PUSH
8564: LD_VAR 0 1
8568: PUSH
8569: LD_VAR 0 5
8573: ARRAY
8574: PPUSH
8575: CALL_OW 258
8579: PUSH
8580: LD_INT 2
8582: EQUAL
8583: AND
8584: IFFALSE 8606
// Say ( characters [ i ] , dialogFID ) ;
8586: LD_VAR 0 1
8590: PUSH
8591: LD_VAR 0 5
8595: ARRAY
8596: PPUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL_OW 88
// end ;
8606: GO 8497
8608: POP
8609: POP
// end ;
8610: LD_VAR 0 4
8614: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8615: LD_INT 0
8617: PPUSH
8618: PPUSH
// for i in charactersList do
8619: LD_ADDR_VAR 0 4
8623: PUSH
8624: LD_VAR 0 1
8628: PUSH
8629: FOR_IN
8630: IFFALSE 8659
// begin if IsOk ( i ) then
8632: LD_VAR 0 4
8636: PPUSH
8637: CALL_OW 302
8641: IFFALSE 8657
// SaveCharacters ( i , ident ) ;
8643: LD_VAR 0 4
8647: PPUSH
8648: LD_VAR 0 2
8652: PPUSH
8653: CALL_OW 38
// end ;
8657: GO 8629
8659: POP
8660: POP
// end ;
8661: LD_VAR 0 3
8665: RET
// export function PrepareDifficulty ; begin
8666: LD_INT 0
8668: PPUSH
// if difficulty = 1 then
8669: LD_OWVAR 67
8673: PUSH
8674: LD_INT 1
8676: EQUAL
8677: IFFALSE 8721
// begin RuSolMinLevel = 4 ;
8679: LD_ADDR_EXP 34
8683: PUSH
8684: LD_INT 4
8686: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
8687: LD_ADDR_EXP 35
8691: PUSH
8692: LD_INT 7
8694: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8695: LD_INT 51
8697: PPUSH
8698: LD_INT 6
8700: PPUSH
8701: LD_INT 2
8703: PPUSH
8704: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8708: LD_INT 51
8710: PPUSH
8711: LD_INT 5
8713: PPUSH
8714: LD_INT 2
8716: PPUSH
8717: CALL_OW 322
// end ; if difficulty = 2 then
8721: LD_OWVAR 67
8725: PUSH
8726: LD_INT 2
8728: EQUAL
8729: IFFALSE 8825
// begin RuSolMinLevel = 5 ;
8731: LD_ADDR_EXP 34
8735: PUSH
8736: LD_INT 5
8738: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
8739: LD_ADDR_EXP 35
8743: PUSH
8744: LD_INT 7
8746: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8747: LD_INT 51
8749: PPUSH
8750: LD_INT 6
8752: PPUSH
8753: LD_INT 2
8755: PPUSH
8756: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
8760: LD_INT 57
8762: PPUSH
8763: LD_INT 6
8765: PPUSH
8766: LD_INT 2
8768: PPUSH
8769: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8773: LD_INT 63
8775: PPUSH
8776: LD_INT 6
8778: PPUSH
8779: LD_INT 2
8781: PPUSH
8782: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8786: LD_INT 51
8788: PPUSH
8789: LD_INT 5
8791: PPUSH
8792: LD_INT 2
8794: PPUSH
8795: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
8799: LD_INT 5
8801: PPUSH
8802: LD_INT 2
8804: PPUSH
8805: LD_INT 2
8807: PPUSH
8808: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
8812: LD_INT 5
8814: PPUSH
8815: LD_INT 5
8817: PPUSH
8818: LD_INT 2
8820: PPUSH
8821: CALL_OW 322
// end ; if difficulty = 3 then
8825: LD_OWVAR 67
8829: PUSH
8830: LD_INT 3
8832: EQUAL
8833: IFFALSE 8981
// begin RuSolMinLevel = 6 ;
8835: LD_ADDR_EXP 34
8839: PUSH
8840: LD_INT 6
8842: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
8843: LD_ADDR_EXP 35
8847: PUSH
8848: LD_INT 8
8850: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
8851: LD_INT 51
8853: PPUSH
8854: LD_INT 6
8856: PPUSH
8857: LD_INT 2
8859: PPUSH
8860: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
8864: LD_INT 57
8866: PPUSH
8867: LD_INT 6
8869: PPUSH
8870: LD_INT 2
8872: PPUSH
8873: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
8877: LD_INT 52
8879: PPUSH
8880: LD_INT 6
8882: PPUSH
8883: LD_INT 2
8885: PPUSH
8886: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
8890: LD_INT 58
8892: PPUSH
8893: LD_INT 6
8895: PPUSH
8896: LD_INT 2
8898: PPUSH
8899: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
8903: LD_INT 63
8905: PPUSH
8906: LD_INT 6
8908: PPUSH
8909: LD_INT 2
8911: PPUSH
8912: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
8916: LD_INT 64
8918: PPUSH
8919: LD_INT 6
8921: PPUSH
8922: LD_INT 2
8924: PPUSH
8925: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
8929: LD_INT 51
8931: PPUSH
8932: LD_INT 5
8934: PPUSH
8935: LD_INT 2
8937: PPUSH
8938: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
8942: LD_INT 52
8944: PPUSH
8945: LD_INT 5
8947: PPUSH
8948: LD_INT 2
8950: PPUSH
8951: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
8955: LD_INT 66
8957: PPUSH
8958: LD_INT 2
8960: PPUSH
8961: LD_INT 2
8963: PPUSH
8964: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
8968: LD_INT 66
8970: PPUSH
8971: LD_INT 5
8973: PPUSH
8974: LD_INT 2
8976: PPUSH
8977: CALL_OW 322
// end ; end ;
8981: LD_VAR 0 1
8985: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
8986: LD_INT 0
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
// ruPossition = position ;
8992: LD_ADDR_EXP 39
8996: PUSH
8997: LD_VAR 0 1
9001: ST_TO_ADDR
// if position = 1 then
9002: LD_VAR 0 1
9006: PUSH
9007: LD_INT 1
9009: EQUAL
9010: IFFALSE 9786
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9012: LD_ADDR_VAR 0 4
9016: PUSH
9017: LD_INT 22
9019: PUSH
9020: LD_INT 3
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 25
9029: PUSH
9030: LD_INT 2
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
9046: LD_ADDR_VAR 0 5
9050: PUSH
9051: LD_INT 0
9053: PUSH
9054: LD_INT 49
9056: PUSH
9057: LD_INT 74
9059: PUSH
9060: LD_INT 3
9062: PUSH
9063: EMPTY
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: PUSH
9069: LD_INT 4
9071: PUSH
9072: LD_INT 73
9074: PUSH
9075: LD_INT 88
9077: PUSH
9078: LD_INT 5
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 4
9089: PUSH
9090: LD_INT 56
9092: PUSH
9093: LD_INT 62
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: LD_INT 29
9107: PUSH
9108: LD_INT 43
9110: PUSH
9111: LD_INT 68
9113: PUSH
9114: LD_INT 2
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: PUSH
9123: LD_INT 30
9125: PUSH
9126: LD_INT 43
9128: PUSH
9129: LD_INT 79
9131: PUSH
9132: LD_INT 5
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: PUSH
9141: LD_INT 28
9143: PUSH
9144: LD_INT 60
9146: PUSH
9147: LD_INT 75
9149: PUSH
9150: LD_INT 1
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 2
9161: PUSH
9162: LD_INT 50
9164: PUSH
9165: LD_INT 87
9167: PUSH
9168: LD_INT 1
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: PUSH
9177: LD_INT 28
9179: PUSH
9180: LD_INT 45
9182: PUSH
9183: LD_INT 67
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: PUSH
9195: LD_INT 17
9197: PUSH
9198: LD_INT 47
9200: PUSH
9201: LD_INT 84
9203: PUSH
9204: LD_INT 2
9206: PUSH
9207: EMPTY
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: PUSH
9213: LD_INT 18
9215: PUSH
9216: LD_INT 46
9218: PUSH
9219: LD_INT 87
9221: PUSH
9222: LD_INT 1
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: PUSH
9231: LD_INT 28
9233: PUSH
9234: LD_INT 41
9236: PUSH
9237: LD_INT 64
9239: PUSH
9240: LD_INT 5
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: LIST
9247: LIST
9248: PUSH
9249: LD_INT 32
9251: PUSH
9252: LD_INT 75
9254: PUSH
9255: LD_INT 76
9257: PUSH
9258: LD_INT 5
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 32
9269: PUSH
9270: LD_INT 77
9272: PUSH
9273: LD_INT 75
9275: PUSH
9276: LD_INT 5
9278: PUSH
9279: EMPTY
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 32
9287: PUSH
9288: LD_INT 69
9290: PUSH
9291: LD_INT 68
9293: PUSH
9294: LD_INT 3
9296: PUSH
9297: EMPTY
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: PUSH
9303: LD_INT 32
9305: PUSH
9306: LD_INT 59
9308: PUSH
9309: LD_INT 96
9311: PUSH
9312: LD_INT 5
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: PUSH
9321: LD_INT 32
9323: PUSH
9324: LD_INT 56
9326: PUSH
9327: LD_INT 96
9329: PUSH
9330: LD_INT 0
9332: PUSH
9333: EMPTY
9334: LIST
9335: LIST
9336: LIST
9337: LIST
9338: PUSH
9339: LD_INT 32
9341: PUSH
9342: LD_INT 51
9344: PUSH
9345: LD_INT 61
9347: PUSH
9348: LD_INT 3
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: PUSH
9357: LD_INT 32
9359: PUSH
9360: LD_INT 42
9362: PUSH
9363: LD_INT 60
9365: PUSH
9366: LD_INT 3
9368: PUSH
9369: EMPTY
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: PUSH
9375: LD_INT 32
9377: PUSH
9378: LD_INT 36
9380: PUSH
9381: LD_INT 58
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: PUSH
9393: LD_INT 32
9395: PUSH
9396: LD_INT 39
9398: PUSH
9399: LD_INT 59
9401: PUSH
9402: LD_INT 3
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 32
9413: PUSH
9414: LD_INT 61
9416: PUSH
9417: LD_INT 64
9419: PUSH
9420: LD_INT 3
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 33
9431: PUSH
9432: LD_INT 63
9434: PUSH
9435: LD_INT 90
9437: PUSH
9438: LD_INT 5
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 33
9449: PUSH
9450: LD_INT 64
9452: PUSH
9453: LD_INT 88
9455: PUSH
9456: LD_INT 5
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 33
9467: PUSH
9468: LD_INT 72
9470: PUSH
9471: LD_INT 82
9473: PUSH
9474: LD_INT 5
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 6
9485: PUSH
9486: LD_INT 42
9488: PUSH
9489: LD_INT 74
9491: PUSH
9492: LD_INT 1
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 6
9503: PUSH
9504: LD_INT 56
9506: PUSH
9507: LD_INT 77
9509: PUSH
9510: LD_INT 2
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 21
9521: PUSH
9522: LD_INT 54
9524: PUSH
9525: LD_INT 91
9527: PUSH
9528: LD_INT 5
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 16
9539: PUSH
9540: LD_INT 50
9542: PUSH
9543: LD_INT 83
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 24
9557: PUSH
9558: LD_INT 50
9560: PUSH
9561: LD_INT 90
9563: PUSH
9564: LD_INT 0
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9604: LD_ADDR_VAR 0 3
9608: PUSH
9609: LD_INT 22
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: PUSH
9619: LD_INT 3
9621: PUSH
9622: LD_INT 25
9624: PUSH
9625: LD_INT 2
9627: PUSH
9628: EMPTY
9629: LIST
9630: LIST
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: PPUSH
9640: CALL_OW 69
9644: PUSH
9645: FOR_IN
9646: IFFALSE 9693
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
9648: LD_VAR 0 3
9652: PPUSH
9653: LD_VAR 0 5
9657: PUSH
9658: LD_INT 2
9660: ARRAY
9661: PUSH
9662: LD_INT 2
9664: ARRAY
9665: PUSH
9666: LD_INT 3
9668: PLUS
9669: PPUSH
9670: LD_VAR 0 5
9674: PUSH
9675: LD_INT 2
9677: ARRAY
9678: PUSH
9679: LD_INT 3
9681: ARRAY
9682: PUSH
9683: LD_INT 2
9685: PLUS
9686: PPUSH
9687: CALL_OW 171
9691: GO 9645
9693: POP
9694: POP
// for i := 1 to buildingsTab do
9695: LD_ADDR_VAR 0 3
9699: PUSH
9700: DOUBLE
9701: LD_INT 1
9703: DEC
9704: ST_TO_ADDR
9705: LD_VAR 0 5
9709: PUSH
9710: FOR_TO
9711: IFFALSE 9784
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9713: LD_VAR 0 4
9717: PPUSH
9718: LD_VAR 0 5
9722: PUSH
9723: LD_VAR 0 3
9727: ARRAY
9728: PUSH
9729: LD_INT 1
9731: ARRAY
9732: PPUSH
9733: LD_VAR 0 5
9737: PUSH
9738: LD_VAR 0 3
9742: ARRAY
9743: PUSH
9744: LD_INT 2
9746: ARRAY
9747: PPUSH
9748: LD_VAR 0 5
9752: PUSH
9753: LD_VAR 0 3
9757: ARRAY
9758: PUSH
9759: LD_INT 3
9761: ARRAY
9762: PPUSH
9763: LD_VAR 0 5
9767: PUSH
9768: LD_VAR 0 3
9772: ARRAY
9773: PUSH
9774: LD_INT 4
9776: ARRAY
9777: PPUSH
9778: CALL_OW 205
9782: GO 9710
9784: POP
9785: POP
// end ; if position = 2 then
9786: LD_VAR 0 1
9790: PUSH
9791: LD_INT 2
9793: EQUAL
9794: IFFALSE 10437
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9796: LD_ADDR_VAR 0 4
9800: PUSH
9801: LD_INT 22
9803: PUSH
9804: LD_INT 3
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PUSH
9811: LD_INT 25
9813: PUSH
9814: LD_INT 2
9816: PUSH
9817: EMPTY
9818: LIST
9819: LIST
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PPUSH
9825: CALL_OW 69
9829: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
9830: LD_ADDR_VAR 0 5
9834: PUSH
9835: LD_INT 0
9837: PUSH
9838: LD_INT 104
9840: PUSH
9841: LD_INT 110
9843: PUSH
9844: LD_INT 5
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: PUSH
9853: LD_INT 4
9855: PUSH
9856: LD_INT 98
9858: PUSH
9859: LD_INT 90
9861: PUSH
9862: LD_INT 3
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: PUSH
9871: LD_INT 29
9873: PUSH
9874: LD_INT 103
9876: PUSH
9877: LD_INT 114
9879: PUSH
9880: LD_INT 2
9882: PUSH
9883: EMPTY
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 30
9891: PUSH
9892: LD_INT 99
9894: PUSH
9895: LD_INT 114
9897: PUSH
9898: LD_INT 3
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: PUSH
9907: LD_INT 28
9909: PUSH
9910: LD_INT 100
9912: PUSH
9913: LD_INT 112
9915: PUSH
9916: LD_INT 1
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: LIST
9923: LIST
9924: PUSH
9925: LD_INT 2
9927: PUSH
9928: LD_INT 92
9930: PUSH
9931: LD_INT 101
9933: PUSH
9934: LD_INT 0
9936: PUSH
9937: EMPTY
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: PUSH
9943: LD_INT 28
9945: PUSH
9946: LD_INT 97
9948: PUSH
9949: LD_INT 116
9951: PUSH
9952: LD_INT 5
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 17
9963: PUSH
9964: LD_INT 96
9966: PUSH
9967: LD_INT 101
9969: PUSH
9970: LD_INT 4
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 18
9981: PUSH
9982: LD_INT 88
9984: PUSH
9985: LD_INT 97
9987: PUSH
9988: LD_INT 2
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: PUSH
9997: LD_INT 28
9999: PUSH
10000: LD_INT 106
10002: PUSH
10003: LD_INT 92
10005: PUSH
10006: LD_INT 2
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: PUSH
10015: LD_INT 32
10017: PUSH
10018: LD_INT 88
10020: PUSH
10021: LD_INT 89
10023: PUSH
10024: LD_INT 2
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 32
10035: PUSH
10036: LD_INT 86
10038: PUSH
10039: LD_INT 90
10041: PUSH
10042: LD_INT 2
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 32
10053: PUSH
10054: LD_INT 85
10056: PUSH
10057: LD_INT 99
10059: PUSH
10060: LD_INT 2
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: PUSH
10069: LD_INT 32
10071: PUSH
10072: LD_INT 85
10074: PUSH
10075: LD_INT 107
10077: PUSH
10078: LD_INT 1
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 33
10089: PUSH
10090: LD_INT 105
10092: PUSH
10093: LD_INT 99
10095: PUSH
10096: LD_INT 1
10098: PUSH
10099: EMPTY
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: LD_INT 33
10107: PUSH
10108: LD_INT 102
10110: PUSH
10111: LD_INT 92
10113: PUSH
10114: LD_INT 3
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: PUSH
10123: LD_INT 33
10125: PUSH
10126: LD_INT 105
10128: PUSH
10129: LD_INT 92
10131: PUSH
10132: LD_INT 2
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 6
10143: PUSH
10144: LD_INT 92
10146: PUSH
10147: LD_INT 110
10149: PUSH
10150: LD_INT 0
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 6
10161: PUSH
10162: LD_INT 103
10164: PUSH
10165: LD_INT 103
10167: PUSH
10168: LD_INT 5
10170: PUSH
10171: EMPTY
10172: LIST
10173: LIST
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 89
10182: PUSH
10183: LD_INT 101
10185: PUSH
10186: LD_INT 1
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: PUSH
10195: LD_INT 16
10197: PUSH
10198: LD_INT 95
10200: PUSH
10201: LD_INT 104
10203: PUSH
10204: LD_INT 4
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: PUSH
10213: LD_INT 24
10215: PUSH
10216: LD_INT 92
10218: PUSH
10219: LD_INT 105
10221: PUSH
10222: LD_INT 0
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10255: LD_ADDR_VAR 0 3
10259: PUSH
10260: LD_INT 22
10262: PUSH
10263: LD_INT 3
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PUSH
10270: LD_INT 3
10272: PUSH
10273: LD_INT 25
10275: PUSH
10276: LD_INT 2
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: PPUSH
10291: CALL_OW 69
10295: PUSH
10296: FOR_IN
10297: IFFALSE 10344
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
10299: LD_VAR 0 3
10303: PPUSH
10304: LD_VAR 0 5
10308: PUSH
10309: LD_INT 2
10311: ARRAY
10312: PUSH
10313: LD_INT 2
10315: ARRAY
10316: PUSH
10317: LD_INT 2
10319: PLUS
10320: PPUSH
10321: LD_VAR 0 5
10325: PUSH
10326: LD_INT 2
10328: ARRAY
10329: PUSH
10330: LD_INT 3
10332: ARRAY
10333: PUSH
10334: LD_INT 1
10336: PLUS
10337: PPUSH
10338: CALL_OW 171
10342: GO 10296
10344: POP
10345: POP
// for i := 1 to buildingsTab do
10346: LD_ADDR_VAR 0 3
10350: PUSH
10351: DOUBLE
10352: LD_INT 1
10354: DEC
10355: ST_TO_ADDR
10356: LD_VAR 0 5
10360: PUSH
10361: FOR_TO
10362: IFFALSE 10435
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10364: LD_VAR 0 4
10368: PPUSH
10369: LD_VAR 0 5
10373: PUSH
10374: LD_VAR 0 3
10378: ARRAY
10379: PUSH
10380: LD_INT 1
10382: ARRAY
10383: PPUSH
10384: LD_VAR 0 5
10388: PUSH
10389: LD_VAR 0 3
10393: ARRAY
10394: PUSH
10395: LD_INT 2
10397: ARRAY
10398: PPUSH
10399: LD_VAR 0 5
10403: PUSH
10404: LD_VAR 0 3
10408: ARRAY
10409: PUSH
10410: LD_INT 3
10412: ARRAY
10413: PPUSH
10414: LD_VAR 0 5
10418: PUSH
10419: LD_VAR 0 3
10423: ARRAY
10424: PUSH
10425: LD_INT 4
10427: ARRAY
10428: PPUSH
10429: CALL_OW 205
10433: GO 10361
10435: POP
10436: POP
// end ; if position = 3 then
10437: LD_VAR 0 1
10441: PUSH
10442: LD_INT 3
10444: EQUAL
10445: IFFALSE 11259
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10447: LD_ADDR_VAR 0 4
10451: PUSH
10452: LD_INT 22
10454: PUSH
10455: LD_INT 3
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
10481: LD_ADDR_VAR 0 5
10485: PUSH
10486: LD_INT 0
10488: PUSH
10489: LD_INT 151
10491: PUSH
10492: LD_INT 71
10494: PUSH
10495: LD_INT 4
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 4
10506: PUSH
10507: LD_INT 145
10509: PUSH
10510: LD_INT 53
10512: PUSH
10513: LD_INT 3
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: PUSH
10522: LD_INT 4
10524: PUSH
10525: LD_INT 172
10527: PUSH
10528: LD_INT 102
10530: PUSH
10531: LD_INT 5
10533: PUSH
10534: EMPTY
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 29
10542: PUSH
10543: LD_INT 152
10545: PUSH
10546: LD_INT 85
10548: PUSH
10549: LD_INT 3
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 30
10560: PUSH
10561: LD_INT 156
10563: PUSH
10564: LD_INT 92
10566: PUSH
10567: LD_INT 3
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 28
10578: PUSH
10579: LD_INT 151
10581: PUSH
10582: LD_INT 66
10584: PUSH
10585: LD_INT 4
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 2
10596: PUSH
10597: LD_INT 163
10599: PUSH
10600: LD_INT 95
10602: PUSH
10603: LD_INT 5
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 28
10614: PUSH
10615: LD_INT 149
10617: PUSH
10618: LD_INT 63
10620: PUSH
10621: LD_INT 4
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 17
10632: PUSH
10633: LD_INT 167
10635: PUSH
10636: LD_INT 99
10638: PUSH
10639: LD_INT 5
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 18
10650: PUSH
10651: LD_INT 163
10653: PUSH
10654: LD_INT 98
10656: PUSH
10657: LD_INT 0
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: PUSH
10666: LD_INT 28
10668: PUSH
10669: LD_INT 154
10671: PUSH
10672: LD_INT 70
10674: PUSH
10675: LD_INT 4
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: PUSH
10684: LD_INT 32
10686: PUSH
10687: LD_INT 155
10689: PUSH
10690: LD_INT 62
10692: PUSH
10693: LD_INT 4
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: PUSH
10702: LD_INT 32
10704: PUSH
10705: LD_INT 161
10707: PUSH
10708: LD_INT 69
10710: PUSH
10711: LD_INT 4
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: PUSH
10720: LD_INT 32
10722: PUSH
10723: LD_INT 168
10725: PUSH
10726: LD_INT 78
10728: PUSH
10729: LD_INT 4
10731: PUSH
10732: EMPTY
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 32
10740: PUSH
10741: LD_INT 163
10743: PUSH
10744: LD_INT 80
10746: PUSH
10747: LD_INT 5
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: PUSH
10756: LD_INT 32
10758: PUSH
10759: LD_INT 136
10761: PUSH
10762: LD_INT 73
10764: PUSH
10765: LD_INT 0
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: PUSH
10774: LD_INT 32
10776: PUSH
10777: LD_INT 157
10779: PUSH
10780: LD_INT 98
10782: PUSH
10783: LD_INT 0
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 32
10794: PUSH
10795: LD_INT 150
10797: PUSH
10798: LD_INT 87
10800: PUSH
10801: LD_INT 1
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 33
10812: PUSH
10813: LD_INT 171
10815: PUSH
10816: LD_INT 97
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: LIST
10826: LIST
10827: PUSH
10828: LD_INT 33
10830: PUSH
10831: LD_INT 168
10833: PUSH
10834: LD_INT 92
10836: PUSH
10837: LD_INT 4
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: PUSH
10846: LD_INT 33
10848: PUSH
10849: LD_INT 166
10851: PUSH
10852: LD_INT 80
10854: PUSH
10855: LD_INT 5
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: PUSH
10864: LD_INT 33
10866: PUSH
10867: LD_INT 141
10869: PUSH
10870: LD_INT 54
10872: PUSH
10873: LD_INT 2
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 33
10884: PUSH
10885: LD_INT 133
10887: PUSH
10888: LD_INT 57
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 33
10902: PUSH
10903: LD_INT 132
10905: PUSH
10906: LD_INT 61
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 33
10920: PUSH
10921: LD_INT 150
10923: PUSH
10924: LD_INT 82
10926: PUSH
10927: LD_INT 0
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 33
10938: PUSH
10939: LD_INT 132
10941: PUSH
10942: LD_INT 72
10944: PUSH
10945: LD_INT 0
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 6
10956: PUSH
10957: LD_INT 146
10959: PUSH
10960: LD_INT 64
10962: PUSH
10963: LD_INT 4
10965: PUSH
10966: EMPTY
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: PUSH
10972: LD_INT 6
10974: PUSH
10975: LD_INT 159
10977: PUSH
10978: LD_INT 85
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 21
10992: PUSH
10993: LD_INT 163
10995: PUSH
10996: LD_INT 91
10998: PUSH
10999: LD_INT 3
11001: PUSH
11002: EMPTY
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 16
11010: PUSH
11011: LD_INT 166
11013: PUSH
11014: LD_INT 95
11016: PUSH
11017: LD_INT 4
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: PUSH
11026: LD_INT 24
11028: PUSH
11029: LD_INT 159
11031: PUSH
11032: LD_INT 95
11034: PUSH
11035: LD_INT 1
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11077: LD_ADDR_VAR 0 3
11081: PUSH
11082: LD_INT 22
11084: PUSH
11085: LD_INT 3
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 3
11094: PUSH
11095: LD_INT 25
11097: PUSH
11098: LD_INT 2
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: EMPTY
11106: LIST
11107: LIST
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: PPUSH
11113: CALL_OW 69
11117: PUSH
11118: FOR_IN
11119: IFFALSE 11166
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
11121: LD_VAR 0 3
11125: PPUSH
11126: LD_VAR 0 5
11130: PUSH
11131: LD_INT 2
11133: ARRAY
11134: PUSH
11135: LD_INT 2
11137: ARRAY
11138: PUSH
11139: LD_INT 2
11141: PLUS
11142: PPUSH
11143: LD_VAR 0 5
11147: PUSH
11148: LD_INT 2
11150: ARRAY
11151: PUSH
11152: LD_INT 3
11154: ARRAY
11155: PUSH
11156: LD_INT 3
11158: PLUS
11159: PPUSH
11160: CALL_OW 171
11164: GO 11118
11166: POP
11167: POP
// for i := 1 to buildingsTab do
11168: LD_ADDR_VAR 0 3
11172: PUSH
11173: DOUBLE
11174: LD_INT 1
11176: DEC
11177: ST_TO_ADDR
11178: LD_VAR 0 5
11182: PUSH
11183: FOR_TO
11184: IFFALSE 11257
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11186: LD_VAR 0 4
11190: PPUSH
11191: LD_VAR 0 5
11195: PUSH
11196: LD_VAR 0 3
11200: ARRAY
11201: PUSH
11202: LD_INT 1
11204: ARRAY
11205: PPUSH
11206: LD_VAR 0 5
11210: PUSH
11211: LD_VAR 0 3
11215: ARRAY
11216: PUSH
11217: LD_INT 2
11219: ARRAY
11220: PPUSH
11221: LD_VAR 0 5
11225: PUSH
11226: LD_VAR 0 3
11230: ARRAY
11231: PUSH
11232: LD_INT 3
11234: ARRAY
11235: PPUSH
11236: LD_VAR 0 5
11240: PUSH
11241: LD_VAR 0 3
11245: ARRAY
11246: PUSH
11247: LD_INT 4
11249: ARRAY
11250: PPUSH
11251: CALL_OW 205
11255: GO 11183
11257: POP
11258: POP
// end ; end ;
11259: LD_VAR 0 2
11263: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
11264: LD_INT 0
11266: PPUSH
11267: PPUSH
11268: PPUSH
11269: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
11270: LD_ADDR_VAR 0 3
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 25
11287: PUSH
11288: LD_INT 2
11290: PUSH
11291: EMPTY
11292: LIST
11293: LIST
11294: PUSH
11295: EMPTY
11296: LIST
11297: LIST
11298: PPUSH
11299: CALL_OW 69
11303: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
11304: LD_VAR 0 3
11308: PPUSH
11309: LD_INT 0
11311: PPUSH
11312: LD_INT 71
11314: PPUSH
11315: LD_INT 15
11317: PPUSH
11318: LD_INT 3
11320: PPUSH
11321: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
11325: LD_ADDR_VAR 0 4
11329: PUSH
11330: LD_INT 6
11332: PUSH
11333: LD_INT 77
11335: PUSH
11336: LD_INT 18
11338: PUSH
11339: LD_INT 3
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 4
11350: PUSH
11351: LD_INT 77
11353: PUSH
11354: LD_INT 26
11356: PUSH
11357: LD_INT 0
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 31
11368: PUSH
11369: LD_INT 82
11371: PUSH
11372: LD_INT 28
11374: PUSH
11375: LD_INT 0
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 31
11386: PUSH
11387: LD_INT 84
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 31
11404: PUSH
11405: LD_INT 66
11407: PUSH
11408: LD_INT 14
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 27
11422: PUSH
11423: LD_INT 67
11425: PUSH
11426: LD_INT 18
11428: PUSH
11429: LD_INT 5
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 27
11440: PUSH
11441: LD_INT 69
11443: PUSH
11444: LD_INT 23
11446: PUSH
11447: LD_INT 2
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: ST_TO_ADDR
// for i := 1 to buildingsTab do
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: DOUBLE
11471: LD_INT 1
11473: DEC
11474: ST_TO_ADDR
11475: LD_VAR 0 4
11479: PUSH
11480: FOR_TO
11481: IFFALSE 11554
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11483: LD_VAR 0 3
11487: PPUSH
11488: LD_VAR 0 4
11492: PUSH
11493: LD_VAR 0 2
11497: ARRAY
11498: PUSH
11499: LD_INT 1
11501: ARRAY
11502: PPUSH
11503: LD_VAR 0 4
11507: PUSH
11508: LD_VAR 0 2
11512: ARRAY
11513: PUSH
11514: LD_INT 2
11516: ARRAY
11517: PPUSH
11518: LD_VAR 0 4
11522: PUSH
11523: LD_VAR 0 2
11527: ARRAY
11528: PUSH
11529: LD_INT 3
11531: ARRAY
11532: PPUSH
11533: LD_VAR 0 4
11537: PUSH
11538: LD_VAR 0 2
11542: ARRAY
11543: PUSH
11544: LD_INT 4
11546: ARRAY
11547: PPUSH
11548: CALL_OW 205
11552: GO 11480
11554: POP
11555: POP
// end ;
11556: LD_VAR 0 1
11560: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
11561: LD_INT 0
11563: PPUSH
11564: PPUSH
11565: PPUSH
11566: PPUSH
11567: PPUSH
11568: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
11569: LD_ADDR_VAR 0 7
11573: PUSH
11574: LD_INT 22
11576: PUSH
11577: LD_VAR 0 1
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: PUSH
11586: LD_INT 25
11588: PUSH
11589: LD_INT 9
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: PPUSH
11600: CALL_OW 69
11604: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11605: LD_ADDR_VAR 0 8
11609: PUSH
11610: LD_INT 22
11612: PUSH
11613: LD_VAR 0 2
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: PUSH
11622: LD_INT 3
11624: PUSH
11625: LD_INT 21
11627: PUSH
11628: LD_INT 3
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 69
11647: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
11648: LD_ADDR_VAR 0 5
11652: PUSH
11653: LD_INT 1
11655: PPUSH
11656: LD_INT 3
11658: PPUSH
11659: CALL_OW 12
11663: ST_TO_ADDR
// for i = 1 to list do
11664: LD_ADDR_VAR 0 6
11668: PUSH
11669: DOUBLE
11670: LD_INT 1
11672: DEC
11673: ST_TO_ADDR
11674: LD_VAR 0 7
11678: PUSH
11679: FOR_TO
11680: IFFALSE 11862
// for ta in filter do
11682: LD_ADDR_VAR 0 4
11686: PUSH
11687: LD_VAR 0 8
11691: PUSH
11692: FOR_IN
11693: IFFALSE 11858
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
11695: LD_VAR 0 7
11699: PUSH
11700: LD_VAR 0 6
11704: ARRAY
11705: PPUSH
11706: LD_VAR 0 4
11710: PPUSH
11711: CALL_OW 296
11715: PUSH
11716: LD_INT 12
11718: LESSEQUAL
11719: IFFALSE 11856
// begin case c of 1 :
11721: LD_VAR 0 5
11725: PUSH
11726: LD_INT 1
11728: DOUBLE
11729: EQUAL
11730: IFTRUE 11734
11732: GO 11772
11734: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
11735: LD_VAR 0 7
11739: PUSH
11740: LD_VAR 0 6
11744: ARRAY
11745: PPUSH
11746: LD_VAR 0 4
11750: PPUSH
11751: CALL_OW 250
11755: PPUSH
11756: LD_VAR 0 4
11760: PPUSH
11761: CALL_OW 251
11765: PPUSH
11766: CALL_OW 154
11770: GO 11856
11772: LD_INT 2
11774: DOUBLE
11775: EQUAL
11776: IFTRUE 11780
11778: GO 11844
11780: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
11781: LD_VAR 0 7
11785: PUSH
11786: LD_VAR 0 6
11790: ARRAY
11791: PPUSH
11792: LD_VAR 0 4
11796: PPUSH
11797: CALL_OW 250
11801: PUSH
11802: LD_INT 1
11804: NEG
11805: PPUSH
11806: LD_INT 1
11808: PPUSH
11809: CALL_OW 12
11813: PLUS
11814: PPUSH
11815: LD_VAR 0 4
11819: PPUSH
11820: CALL_OW 251
11824: PUSH
11825: LD_INT 1
11827: NEG
11828: PPUSH
11829: LD_INT 1
11831: PPUSH
11832: CALL_OW 12
11836: PLUS
11837: PPUSH
11838: CALL_OW 153
11842: GO 11856
11844: LD_INT 3
11846: DOUBLE
11847: EQUAL
11848: IFTRUE 11852
11850: GO 11855
11852: POP
// ; end ;
11853: GO 11856
11855: POP
// end ; end ;
11856: GO 11692
11858: POP
11859: POP
11860: GO 11679
11862: POP
11863: POP
// end ;
11864: LD_VAR 0 3
11868: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11869: LD_INT 0
11871: PPUSH
11872: PPUSH
11873: PPUSH
11874: PPUSH
// for i = 1 to 72 do
11875: LD_ADDR_VAR 0 5
11879: PUSH
11880: DOUBLE
11881: LD_INT 1
11883: DEC
11884: ST_TO_ADDR
11885: LD_INT 72
11887: PUSH
11888: FOR_TO
11889: IFFALSE 11947
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11891: LD_VAR 0 5
11895: PPUSH
11896: LD_VAR 0 1
11900: PPUSH
11901: CALL_OW 321
11905: PUSH
11906: LD_INT 1
11908: EQUAL
11909: PUSH
11910: LD_VAR 0 5
11914: PPUSH
11915: LD_VAR 0 3
11919: PPUSH
11920: CALL_OW 482
11924: PUSH
11925: LD_INT 1
11927: EQUAL
11928: AND
11929: IFFALSE 11945
// AddComResearch ( lab , i ) ;
11931: LD_VAR 0 2
11935: PPUSH
11936: LD_VAR 0 5
11940: PPUSH
11941: CALL_OW 184
11945: GO 11888
11947: POP
11948: POP
// end ;
11949: LD_VAR 0 4
11953: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
11954: LD_INT 0
11956: PPUSH
11957: PPUSH
11958: PPUSH
11959: PPUSH
11960: PPUSH
11961: PPUSH
11962: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11963: LD_ADDR_VAR 0 6
11967: PUSH
11968: LD_INT 22
11970: PUSH
11971: LD_VAR 0 1
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: PUSH
11980: LD_INT 56
11982: PUSH
11983: EMPTY
11984: LIST
11985: PUSH
11986: LD_INT 24
11988: PUSH
11989: LD_INT 700
11991: PUSH
11992: EMPTY
11993: LIST
11994: LIST
11995: PUSH
11996: LD_INT 2
11998: PUSH
11999: LD_INT 25
12001: PUSH
12002: LD_INT 1
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 25
12011: PUSH
12012: LD_INT 9
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 69
12034: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
12035: LD_ADDR_VAR 0 7
12039: PUSH
12040: LD_INT 22
12042: PUSH
12043: LD_VAR 0 1
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: LD_INT 30
12054: PUSH
12055: LD_INT 32
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 58
12064: PUSH
12065: EMPTY
12066: LIST
12067: PUSH
12068: LD_INT 24
12070: PUSH
12071: LD_INT 251
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PPUSH
12084: CALL_OW 69
12088: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
12089: LD_ADDR_VAR 0 9
12093: PUSH
12094: LD_INT 22
12096: PUSH
12097: LD_VAR 0 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 2
12108: PUSH
12109: LD_INT 30
12111: PUSH
12112: LD_INT 4
12114: PUSH
12115: EMPTY
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 30
12121: PUSH
12122: LD_INT 5
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 24
12136: PUSH
12137: LD_INT 251
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: PPUSH
12149: CALL_OW 69
12153: ST_TO_ADDR
// if barrackList > 0 then
12154: LD_VAR 0 9
12158: PUSH
12159: LD_INT 0
12161: GREATER
12162: IFFALSE 12251
// begin if turretList = 0 then
12164: LD_VAR 0 7
12168: PUSH
12169: LD_INT 0
12171: EQUAL
12172: IFFALSE 12211
// begin for i in soldiers_list do
12174: LD_ADDR_VAR 0 4
12178: PUSH
12179: LD_VAR 0 6
12183: PUSH
12184: FOR_IN
12185: IFFALSE 12207
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
12187: LD_VAR 0 4
12191: PPUSH
12192: LD_VAR 0 9
12196: PUSH
12197: LD_INT 1
12199: ARRAY
12200: PPUSH
12201: CALL_OW 120
12205: GO 12184
12207: POP
12208: POP
// end else
12209: GO 12251
// begin for i in barrackList do
12211: LD_ADDR_VAR 0 4
12215: PUSH
12216: LD_VAR 0 9
12220: PUSH
12221: FOR_IN
12222: IFFALSE 12249
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
12224: LD_VAR 0 4
12228: PPUSH
12229: CALL_OW 313
12233: PPUSH
12234: LD_VAR 0 7
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PPUSH
12243: CALL_OW 120
// end ;
12247: GO 12221
12249: POP
12250: POP
// end ; end ; end ;
12251: LD_VAR 0 3
12255: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12256: LD_INT 0
12258: PPUSH
12259: PPUSH
12260: PPUSH
12261: PPUSH
12262: PPUSH
12263: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12264: LD_ADDR_VAR 0 6
12268: PUSH
12269: LD_VAR 0 2
12273: PPUSH
12274: CALL_OW 313
12278: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
12279: LD_ADDR_VAR 0 7
12283: PUSH
12284: LD_INT 22
12286: PUSH
12287: LD_VAR 0 1
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 25
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 24
12308: PUSH
12309: LD_INT 1000
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 69
12325: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12326: LD_ADDR_VAR 0 4
12330: PUSH
12331: LD_INT 22
12333: PUSH
12334: LD_VAR 0 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 21
12345: PUSH
12346: LD_INT 3
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: LD_INT 3
12355: PUSH
12356: LD_INT 24
12358: PUSH
12359: LD_INT 1000
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: PUSH
12366: EMPTY
12367: LIST
12368: LIST
12369: PUSH
12370: EMPTY
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: EMPTY
12376: LIST
12377: PPUSH
12378: CALL_OW 69
12382: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12383: LD_VAR 0 4
12387: NOT
12388: PUSH
12389: LD_VAR 0 7
12393: NOT
12394: AND
12395: IFFALSE 12399
// exit ;
12397: GO 12558
// if buildings_list > 0 and engineerOkInside > 0 then
12399: LD_VAR 0 4
12403: PUSH
12404: LD_INT 0
12406: GREATER
12407: PUSH
12408: LD_VAR 0 6
12412: PUSH
12413: LD_INT 0
12415: GREATER
12416: AND
12417: IFFALSE 12445
// for i in engineerOkInside do
12419: LD_ADDR_VAR 0 5
12423: PUSH
12424: LD_VAR 0 6
12428: PUSH
12429: FOR_IN
12430: IFFALSE 12443
// ComExitBuilding ( i ) ;
12432: LD_VAR 0 5
12436: PPUSH
12437: CALL_OW 122
12441: GO 12429
12443: POP
12444: POP
// if engineerOkOutside > 0 then
12445: LD_VAR 0 7
12449: PUSH
12450: LD_INT 0
12452: GREATER
12453: IFFALSE 12507
// begin for i in engineerOkOutside do
12455: LD_ADDR_VAR 0 5
12459: PUSH
12460: LD_VAR 0 7
12464: PUSH
12465: FOR_IN
12466: IFFALSE 12505
// for j in buildings_list do
12468: LD_ADDR_VAR 0 8
12472: PUSH
12473: LD_VAR 0 4
12477: PUSH
12478: FOR_IN
12479: IFFALSE 12501
// ComRepairBuilding ( i , j [ 1 ] ) ;
12481: LD_VAR 0 5
12485: PPUSH
12486: LD_VAR 0 8
12490: PUSH
12491: LD_INT 1
12493: ARRAY
12494: PPUSH
12495: CALL_OW 130
12499: GO 12478
12501: POP
12502: POP
12503: GO 12465
12505: POP
12506: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12507: LD_VAR 0 4
12511: PUSH
12512: LD_INT 0
12514: EQUAL
12515: PUSH
12516: LD_VAR 0 7
12520: PUSH
12521: LD_INT 0
12523: GREATER
12524: AND
12525: IFFALSE 12558
// for i in engineerOkOutside do
12527: LD_ADDR_VAR 0 5
12531: PUSH
12532: LD_VAR 0 7
12536: PUSH
12537: FOR_IN
12538: IFFALSE 12556
// ComEnterUnit ( i , building ) ;
12540: LD_VAR 0 5
12544: PPUSH
12545: LD_VAR 0 2
12549: PPUSH
12550: CALL_OW 120
12554: GO 12537
12556: POP
12557: POP
// end ;
12558: LD_VAR 0 3
12562: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
12563: LD_INT 0
12565: PPUSH
12566: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
12567: LD_INT 22
12569: PUSH
12570: LD_VAR 0 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 25
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: PPUSH
12593: CALL_OW 69
12597: PUSH
12598: LD_INT 0
12600: GREATER
12601: PUSH
12602: LD_INT 22
12604: PUSH
12605: LD_VAR 0 1
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PUSH
12614: LD_INT 21
12616: PUSH
12617: LD_INT 3
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 3
12626: PUSH
12627: LD_INT 24
12629: PUSH
12630: LD_INT 1000
12632: PUSH
12633: EMPTY
12634: LIST
12635: LIST
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: EMPTY
12642: LIST
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 69
12650: PUSH
12651: LD_INT 0
12653: EQUAL
12654: AND
12655: PUSH
12656: LD_VAR 0 2
12660: PUSH
12661: LD_INT 0
12663: GREATER
12664: AND
12665: IFFALSE 12764
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12667: LD_ADDR_VAR 0 4
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_VAR 0 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: PUSH
12684: LD_INT 25
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PPUSH
12698: CALL_OW 69
12702: PUSH
12703: FOR_IN
12704: IFFALSE 12762
// begin AddComExitBuilding ( i ) ;
12706: LD_VAR 0 4
12710: PPUSH
12711: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12715: LD_VAR 0 4
12719: PPUSH
12720: LD_VAR 0 2
12724: PUSH
12725: LD_INT 1
12727: ARRAY
12728: PPUSH
12729: LD_VAR 0 2
12733: PUSH
12734: LD_INT 2
12736: ARRAY
12737: PPUSH
12738: LD_VAR 0 2
12742: PUSH
12743: LD_INT 3
12745: ARRAY
12746: PPUSH
12747: LD_VAR 0 2
12751: PUSH
12752: LD_INT 4
12754: ARRAY
12755: PPUSH
12756: CALL_OW 205
// end ;
12760: GO 12703
12762: POP
12763: POP
// end ; end ;
12764: LD_VAR 0 3
12768: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12769: LD_INT 0
12771: PPUSH
12772: PPUSH
12773: PPUSH
12774: PPUSH
12775: PPUSH
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12780: LD_ADDR_VAR 0 6
12784: PUSH
12785: LD_INT 22
12787: PUSH
12788: LD_VAR 0 1
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 25
12799: PUSH
12800: LD_INT 4
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: LD_INT 24
12809: PUSH
12810: LD_INT 251
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 69
12826: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12827: LD_ADDR_VAR 0 7
12831: PUSH
12832: LD_VAR 0 3
12836: PPUSH
12837: LD_INT 22
12839: PUSH
12840: LD_VAR 0 1
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: PUSH
12849: LD_INT 25
12851: PUSH
12852: LD_INT 4
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 50
12861: PUSH
12862: EMPTY
12863: LIST
12864: PUSH
12865: EMPTY
12866: LIST
12867: LIST
12868: LIST
12869: PPUSH
12870: CALL_OW 70
12874: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12875: LD_ADDR_VAR 0 10
12879: PUSH
12880: LD_VAR 0 3
12884: PPUSH
12885: LD_INT 22
12887: PUSH
12888: LD_VAR 0 1
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: PUSH
12897: LD_INT 21
12899: PUSH
12900: LD_INT 1
12902: PUSH
12903: EMPTY
12904: LIST
12905: LIST
12906: PUSH
12907: LD_INT 3
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 3
12926: PUSH
12927: LD_INT 24
12929: PUSH
12930: LD_INT 750
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 70
12951: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12952: LD_ADDR_VAR 0 11
12956: PUSH
12957: LD_VAR 0 2
12961: PPUSH
12962: LD_INT 22
12964: PUSH
12965: LD_VAR 0 1
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: LD_INT 21
12976: PUSH
12977: LD_INT 1
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: PUSH
12984: LD_INT 3
12986: PUSH
12987: LD_INT 25
12989: PUSH
12990: LD_INT 3
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 24
13006: PUSH
13007: LD_INT 1000
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PPUSH
13024: CALL_OW 70
13028: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
13029: LD_VAR 0 10
13033: NOT
13034: PUSH
13035: LD_VAR 0 7
13039: NOT
13040: AND
13041: PUSH
13042: LD_VAR 0 11
13046: NOT
13047: AND
13048: IFFALSE 13052
// exit ;
13050: GO 13312
// if damageUnits > 0 and sci_list > 0 then
13052: LD_VAR 0 10
13056: PUSH
13057: LD_INT 0
13059: GREATER
13060: PUSH
13061: LD_VAR 0 6
13065: PUSH
13066: LD_INT 0
13068: GREATER
13069: AND
13070: IFFALSE 13103
// for i in damageUnits do
13072: LD_ADDR_VAR 0 8
13076: PUSH
13077: LD_VAR 0 10
13081: PUSH
13082: FOR_IN
13083: IFFALSE 13101
// ComMoveToArea ( i , healArea ) ;
13085: LD_VAR 0 8
13089: PPUSH
13090: LD_VAR 0 2
13094: PPUSH
13095: CALL_OW 113
13099: GO 13082
13101: POP
13102: POP
// if unitsToHeal > 0 and sci_list > 0 then
13103: LD_VAR 0 11
13107: PUSH
13108: LD_INT 0
13110: GREATER
13111: PUSH
13112: LD_VAR 0 6
13116: PUSH
13117: LD_INT 0
13119: GREATER
13120: AND
13121: IFFALSE 13180
// begin for i in sci_list do
13123: LD_ADDR_VAR 0 8
13127: PUSH
13128: LD_VAR 0 6
13132: PUSH
13133: FOR_IN
13134: IFFALSE 13178
// begin ComExitBuilding ( i ) ;
13136: LD_VAR 0 8
13140: PPUSH
13141: CALL_OW 122
// for j in unitsToHeal do
13145: LD_ADDR_VAR 0 9
13149: PUSH
13150: LD_VAR 0 11
13154: PUSH
13155: FOR_IN
13156: IFFALSE 13174
// AddComHeal ( i , j ) ;
13158: LD_VAR 0 8
13162: PPUSH
13163: LD_VAR 0 9
13167: PPUSH
13168: CALL_OW 188
13172: GO 13155
13174: POP
13175: POP
// end ;
13176: GO 13133
13178: POP
13179: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13180: LD_VAR 0 10
13184: PUSH
13185: LD_INT 0
13187: EQUAL
13188: PUSH
13189: LD_VAR 0 11
13193: PUSH
13194: LD_INT 0
13196: EQUAL
13197: AND
13198: PUSH
13199: LD_VAR 0 7
13203: PUSH
13204: LD_INT 0
13206: GREATER
13207: AND
13208: IFFALSE 13312
// for i in sci_listOutside do
13210: LD_ADDR_VAR 0 8
13214: PUSH
13215: LD_VAR 0 7
13219: PUSH
13220: FOR_IN
13221: IFFALSE 13310
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13223: LD_ADDR_VAR 0 12
13227: PUSH
13228: LD_INT 22
13230: PUSH
13231: LD_VAR 0 1
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 21
13242: PUSH
13243: LD_INT 3
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 30
13252: PUSH
13253: LD_INT 8
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: PPUSH
13265: CALL_OW 69
13269: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13270: LD_ADDR_VAR 0 13
13274: PUSH
13275: LD_INT 1
13277: PPUSH
13278: LD_VAR 0 12
13282: PPUSH
13283: CALL_OW 12
13287: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
13288: LD_VAR 0 8
13292: PPUSH
13293: LD_VAR 0 12
13297: PUSH
13298: LD_VAR 0 13
13302: ARRAY
13303: PPUSH
13304: CALL_OW 120
// end ;
13308: GO 13220
13310: POP
13311: POP
// end ;
13312: LD_VAR 0 5
13316: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13317: LD_INT 0
13319: PPUSH
13320: PPUSH
13321: PPUSH
13322: PPUSH
13323: PPUSH
13324: PPUSH
13325: PPUSH
13326: PPUSH
13327: PPUSH
13328: PPUSH
13329: PPUSH
// amChassisTab = [ ] ;
13330: LD_ADDR_VAR 0 19
13334: PUSH
13335: EMPTY
13336: ST_TO_ADDR
// arChassisTab = [ ] ;
13337: LD_ADDR_VAR 0 18
13341: PUSH
13342: EMPTY
13343: ST_TO_ADDR
// ruChassisTab = [ ] ;
13344: LD_ADDR_VAR 0 17
13348: PUSH
13349: EMPTY
13350: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13351: LD_INT 35
13353: PPUSH
13354: CALL_OW 67
// if nation = 1 then
13358: LD_VAR 0 5
13362: PUSH
13363: LD_INT 1
13365: EQUAL
13366: IFFALSE 13871
// begin uc_side = side ;
13368: LD_ADDR_OWVAR 20
13372: PUSH
13373: LD_VAR 0 2
13377: ST_TO_ADDR
// uc_nation = nation ;
13378: LD_ADDR_OWVAR 21
13382: PUSH
13383: LD_VAR 0 5
13387: ST_TO_ADDR
// vc_engine = vehengine ;
13388: LD_ADDR_OWVAR 39
13392: PUSH
13393: LD_VAR 0 6
13397: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13398: LD_ADDR_OWVAR 38
13402: PUSH
13403: LD_VAR 0 7
13407: PUSH
13408: LD_INT 1
13410: PPUSH
13411: LD_VAR 0 7
13415: PPUSH
13416: CALL_OW 12
13420: ARRAY
13421: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13422: LD_ADDR_OWVAR 40
13426: PUSH
13427: LD_VAR 0 10
13431: PUSH
13432: LD_INT 1
13434: PPUSH
13435: LD_VAR 0 10
13439: PPUSH
13440: CALL_OW 12
13444: ARRAY
13445: ST_TO_ADDR
// for j = 1 to AMWeapon do
13446: LD_ADDR_VAR 0 14
13450: PUSH
13451: DOUBLE
13452: LD_INT 1
13454: DEC
13455: ST_TO_ADDR
13456: LD_VAR 0 10
13460: PUSH
13461: FOR_TO
13462: IFFALSE 13763
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13464: LD_VAR 0 10
13468: PUSH
13469: LD_VAR 0 14
13473: ARRAY
13474: PUSH
13475: LD_INT 2
13477: EQUAL
13478: PUSH
13479: LD_VAR 0 10
13483: PUSH
13484: LD_VAR 0 14
13488: ARRAY
13489: PUSH
13490: LD_INT 3
13492: EQUAL
13493: OR
13494: IFFALSE 13547
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13496: LD_ADDR_VAR 0 19
13500: PUSH
13501: LD_INT 1
13503: PUSH
13504: LD_INT 2
13506: PUSH
13507: LD_INT 3
13509: PUSH
13510: LD_INT 4
13512: PUSH
13513: LD_INT 5
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13523: LD_ADDR_OWVAR 37
13527: PUSH
13528: LD_VAR 0 19
13532: PUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_VAR 0 19
13540: PPUSH
13541: CALL_OW 12
13545: ARRAY
13546: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13547: LD_VAR 0 10
13551: PUSH
13552: LD_VAR 0 14
13556: ARRAY
13557: PUSH
13558: LD_INT 4
13560: EQUAL
13561: PUSH
13562: LD_VAR 0 10
13566: PUSH
13567: LD_VAR 0 14
13571: ARRAY
13572: PUSH
13573: LD_INT 5
13575: EQUAL
13576: OR
13577: PUSH
13578: LD_VAR 0 10
13582: PUSH
13583: LD_VAR 0 14
13587: ARRAY
13588: PUSH
13589: LD_INT 9
13591: EQUAL
13592: OR
13593: PUSH
13594: LD_VAR 0 10
13598: PUSH
13599: LD_VAR 0 14
13603: ARRAY
13604: PUSH
13605: LD_INT 11
13607: EQUAL
13608: OR
13609: PUSH
13610: LD_VAR 0 10
13614: PUSH
13615: LD_VAR 0 14
13619: ARRAY
13620: PUSH
13621: LD_INT 7
13623: EQUAL
13624: OR
13625: IFFALSE 13674
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13627: LD_ADDR_VAR 0 19
13631: PUSH
13632: LD_INT 2
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: LD_INT 4
13640: PUSH
13641: LD_INT 5
13643: PUSH
13644: EMPTY
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13650: LD_ADDR_OWVAR 37
13654: PUSH
13655: LD_VAR 0 19
13659: PUSH
13660: LD_INT 1
13662: PPUSH
13663: LD_VAR 0 19
13667: PPUSH
13668: CALL_OW 12
13672: ARRAY
13673: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13674: LD_VAR 0 10
13678: PUSH
13679: LD_VAR 0 14
13683: ARRAY
13684: PUSH
13685: LD_INT 8
13687: EQUAL
13688: PUSH
13689: LD_VAR 0 10
13693: PUSH
13694: LD_VAR 0 14
13698: ARRAY
13699: PUSH
13700: LD_INT 6
13702: EQUAL
13703: OR
13704: PUSH
13705: LD_VAR 0 10
13709: PUSH
13710: LD_VAR 0 14
13714: ARRAY
13715: PUSH
13716: LD_INT 10
13718: EQUAL
13719: OR
13720: IFFALSE 13761
// begin amChassisTab = [ 4 , 5 ] ;
13722: LD_ADDR_VAR 0 19
13726: PUSH
13727: LD_INT 4
13729: PUSH
13730: LD_INT 5
13732: PUSH
13733: EMPTY
13734: LIST
13735: LIST
13736: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13737: LD_ADDR_OWVAR 37
13741: PUSH
13742: LD_VAR 0 19
13746: PUSH
13747: LD_INT 1
13749: PPUSH
13750: LD_VAR 0 19
13754: PPUSH
13755: CALL_OW 12
13759: ARRAY
13760: ST_TO_ADDR
// end ; end ;
13761: GO 13461
13763: POP
13764: POP
// veh = CreateVehicle ;
13765: LD_ADDR_VAR 0 16
13769: PUSH
13770: CALL_OW 45
13774: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13775: LD_VAR 0 16
13779: PPUSH
13780: LD_VAR 0 1
13784: PPUSH
13785: LD_INT 0
13787: PPUSH
13788: CALL_OW 49
// if vc_control = 1 then
13792: LD_OWVAR 38
13796: PUSH
13797: LD_INT 1
13799: EQUAL
13800: IFFALSE 13857
// begin hc_gallery =  ;
13802: LD_ADDR_OWVAR 33
13806: PUSH
13807: LD_STRING 
13809: ST_TO_ADDR
// hc_name =  ;
13810: LD_ADDR_OWVAR 26
13814: PUSH
13815: LD_STRING 
13817: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13818: LD_INT 0
13820: PPUSH
13821: LD_INT 3
13823: PPUSH
13824: LD_VAR 0 4
13828: PPUSH
13829: CALL_OW 380
// un = CreateHuman ;
13833: LD_ADDR_VAR 0 15
13837: PUSH
13838: CALL_OW 44
13842: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13843: LD_VAR 0 15
13847: PPUSH
13848: LD_VAR 0 16
13852: PPUSH
13853: CALL_OW 52
// end ; i = i + 1 ;
13857: LD_ADDR_VAR 0 13
13861: PUSH
13862: LD_VAR 0 13
13866: PUSH
13867: LD_INT 1
13869: PLUS
13870: ST_TO_ADDR
// end ; if nation = 2 then
13871: LD_VAR 0 5
13875: PUSH
13876: LD_INT 2
13878: EQUAL
13879: IFFALSE 14317
// begin uc_side = side ;
13881: LD_ADDR_OWVAR 20
13885: PUSH
13886: LD_VAR 0 2
13890: ST_TO_ADDR
// uc_nation = nation ;
13891: LD_ADDR_OWVAR 21
13895: PUSH
13896: LD_VAR 0 5
13900: ST_TO_ADDR
// vc_engine = vehengine ;
13901: LD_ADDR_OWVAR 39
13905: PUSH
13906: LD_VAR 0 6
13910: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13911: LD_ADDR_OWVAR 38
13915: PUSH
13916: LD_VAR 0 7
13920: PUSH
13921: LD_INT 1
13923: PPUSH
13924: LD_VAR 0 7
13928: PPUSH
13929: CALL_OW 12
13933: ARRAY
13934: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13935: LD_ADDR_OWVAR 40
13939: PUSH
13940: LD_VAR 0 9
13944: PUSH
13945: LD_INT 1
13947: PPUSH
13948: LD_VAR 0 9
13952: PPUSH
13953: CALL_OW 12
13957: ARRAY
13958: ST_TO_ADDR
// for j = 1 to ARWeapons do
13959: LD_ADDR_VAR 0 14
13963: PUSH
13964: DOUBLE
13965: LD_INT 1
13967: DEC
13968: ST_TO_ADDR
13969: LD_VAR 0 9
13973: PUSH
13974: FOR_TO
13975: IFFALSE 14209
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13977: LD_VAR 0 9
13981: PUSH
13982: LD_VAR 0 14
13986: ARRAY
13987: PUSH
13988: LD_INT 24
13990: EQUAL
13991: PUSH
13992: LD_VAR 0 9
13996: PUSH
13997: LD_VAR 0 14
14001: ARRAY
14002: PUSH
14003: LD_INT 22
14005: EQUAL
14006: OR
14007: PUSH
14008: LD_VAR 0 9
14012: PUSH
14013: LD_VAR 0 14
14017: ARRAY
14018: PUSH
14019: LD_INT 23
14021: EQUAL
14022: OR
14023: PUSH
14024: LD_VAR 0 9
14028: PUSH
14029: LD_VAR 0 14
14033: ARRAY
14034: PUSH
14035: LD_INT 30
14037: EQUAL
14038: OR
14039: IFFALSE 14088
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
14041: LD_ADDR_VAR 0 18
14045: PUSH
14046: LD_INT 11
14048: PUSH
14049: LD_INT 12
14051: PUSH
14052: LD_INT 13
14054: PUSH
14055: LD_INT 14
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14064: LD_ADDR_OWVAR 37
14068: PUSH
14069: LD_VAR 0 18
14073: PUSH
14074: LD_INT 1
14076: PPUSH
14077: LD_VAR 0 18
14081: PPUSH
14082: CALL_OW 12
14086: ARRAY
14087: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
14088: LD_VAR 0 9
14092: PUSH
14093: LD_VAR 0 14
14097: ARRAY
14098: PUSH
14099: LD_INT 29
14101: EQUAL
14102: PUSH
14103: LD_VAR 0 9
14107: PUSH
14108: LD_VAR 0 14
14112: ARRAY
14113: PUSH
14114: LD_INT 28
14116: EQUAL
14117: OR
14118: PUSH
14119: LD_VAR 0 9
14123: PUSH
14124: LD_VAR 0 14
14128: ARRAY
14129: PUSH
14130: LD_INT 27
14132: EQUAL
14133: OR
14134: PUSH
14135: LD_VAR 0 9
14139: PUSH
14140: LD_VAR 0 14
14144: ARRAY
14145: PUSH
14146: LD_INT 26
14148: EQUAL
14149: OR
14150: PUSH
14151: LD_VAR 0 9
14155: PUSH
14156: LD_VAR 0 14
14160: ARRAY
14161: PUSH
14162: LD_INT 25
14164: EQUAL
14165: OR
14166: IFFALSE 14207
// begin arChassisTab = [ 13 , 14 ] ;
14168: LD_ADDR_VAR 0 18
14172: PUSH
14173: LD_INT 13
14175: PUSH
14176: LD_INT 14
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
14183: LD_ADDR_OWVAR 37
14187: PUSH
14188: LD_VAR 0 18
14192: PUSH
14193: LD_INT 1
14195: PPUSH
14196: LD_VAR 0 18
14200: PPUSH
14201: CALL_OW 12
14205: ARRAY
14206: ST_TO_ADDR
// end ; end ;
14207: GO 13974
14209: POP
14210: POP
// veh = CreateVehicle ;
14211: LD_ADDR_VAR 0 16
14215: PUSH
14216: CALL_OW 45
14220: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14221: LD_VAR 0 16
14225: PPUSH
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_INT 0
14233: PPUSH
14234: CALL_OW 49
// if vc_control = 1 then
14238: LD_OWVAR 38
14242: PUSH
14243: LD_INT 1
14245: EQUAL
14246: IFFALSE 14303
// begin hc_gallery =  ;
14248: LD_ADDR_OWVAR 33
14252: PUSH
14253: LD_STRING 
14255: ST_TO_ADDR
// hc_name =  ;
14256: LD_ADDR_OWVAR 26
14260: PUSH
14261: LD_STRING 
14263: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14264: LD_INT 0
14266: PPUSH
14267: LD_INT 3
14269: PPUSH
14270: LD_VAR 0 4
14274: PPUSH
14275: CALL_OW 380
// un = CreateHuman ;
14279: LD_ADDR_VAR 0 15
14283: PUSH
14284: CALL_OW 44
14288: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14289: LD_VAR 0 15
14293: PPUSH
14294: LD_VAR 0 16
14298: PPUSH
14299: CALL_OW 52
// end ; i = i + 1 ;
14303: LD_ADDR_VAR 0 13
14307: PUSH
14308: LD_VAR 0 13
14312: PUSH
14313: LD_INT 1
14315: PLUS
14316: ST_TO_ADDR
// end ; if nation = 3 then
14317: LD_VAR 0 5
14321: PUSH
14322: LD_INT 3
14324: EQUAL
14325: IFFALSE 14731
// begin uc_side = side ;
14327: LD_ADDR_OWVAR 20
14331: PUSH
14332: LD_VAR 0 2
14336: ST_TO_ADDR
// uc_nation = nation ;
14337: LD_ADDR_OWVAR 21
14341: PUSH
14342: LD_VAR 0 5
14346: ST_TO_ADDR
// vc_engine = vehengine ;
14347: LD_ADDR_OWVAR 39
14351: PUSH
14352: LD_VAR 0 6
14356: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14357: LD_ADDR_OWVAR 38
14361: PUSH
14362: LD_VAR 0 7
14366: PUSH
14367: LD_INT 1
14369: PPUSH
14370: LD_VAR 0 7
14374: PPUSH
14375: CALL_OW 12
14379: ARRAY
14380: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14381: LD_ADDR_OWVAR 40
14385: PUSH
14386: LD_VAR 0 8
14390: PUSH
14391: LD_INT 1
14393: PPUSH
14394: LD_VAR 0 8
14398: PPUSH
14399: CALL_OW 12
14403: ARRAY
14404: ST_TO_ADDR
// for j = 1 to RuWeapons do
14405: LD_ADDR_VAR 0 14
14409: PUSH
14410: DOUBLE
14411: LD_INT 1
14413: DEC
14414: ST_TO_ADDR
14415: LD_VAR 0 8
14419: PUSH
14420: FOR_TO
14421: IFFALSE 14623
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14423: LD_VAR 0 8
14427: PUSH
14428: LD_VAR 0 14
14432: ARRAY
14433: PUSH
14434: LD_INT 42
14436: EQUAL
14437: PUSH
14438: LD_VAR 0 8
14442: PUSH
14443: LD_VAR 0 14
14447: ARRAY
14448: PUSH
14449: LD_INT 43
14451: EQUAL
14452: OR
14453: PUSH
14454: LD_VAR 0 8
14458: PUSH
14459: LD_VAR 0 14
14463: ARRAY
14464: PUSH
14465: LD_INT 44
14467: EQUAL
14468: OR
14469: PUSH
14470: LD_VAR 0 8
14474: PUSH
14475: LD_VAR 0 14
14479: ARRAY
14480: PUSH
14481: LD_INT 45
14483: EQUAL
14484: OR
14485: PUSH
14486: LD_VAR 0 8
14490: PUSH
14491: LD_VAR 0 14
14495: ARRAY
14496: PUSH
14497: LD_INT 49
14499: EQUAL
14500: OR
14501: IFFALSE 14550
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14503: LD_ADDR_VAR 0 17
14507: PUSH
14508: LD_INT 21
14510: PUSH
14511: LD_INT 22
14513: PUSH
14514: LD_INT 23
14516: PUSH
14517: LD_INT 24
14519: PUSH
14520: EMPTY
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14526: LD_ADDR_OWVAR 37
14530: PUSH
14531: LD_VAR 0 17
14535: PUSH
14536: LD_INT 1
14538: PPUSH
14539: LD_VAR 0 17
14543: PPUSH
14544: CALL_OW 12
14548: ARRAY
14549: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14550: LD_VAR 0 8
14554: PUSH
14555: LD_VAR 0 14
14559: ARRAY
14560: PUSH
14561: LD_INT 46
14563: EQUAL
14564: PUSH
14565: LD_VAR 0 8
14569: PUSH
14570: LD_VAR 0 14
14574: ARRAY
14575: PUSH
14576: LD_INT 47
14578: EQUAL
14579: OR
14580: IFFALSE 14621
// begin ruChassisTab = [ 23 , 24 ] ;
14582: LD_ADDR_VAR 0 17
14586: PUSH
14587: LD_INT 23
14589: PUSH
14590: LD_INT 24
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14597: LD_ADDR_OWVAR 37
14601: PUSH
14602: LD_VAR 0 17
14606: PUSH
14607: LD_INT 1
14609: PPUSH
14610: LD_VAR 0 17
14614: PPUSH
14615: CALL_OW 12
14619: ARRAY
14620: ST_TO_ADDR
// end ; end ;
14621: GO 14420
14623: POP
14624: POP
// veh = CreateVehicle ;
14625: LD_ADDR_VAR 0 16
14629: PUSH
14630: CALL_OW 45
14634: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14635: LD_VAR 0 16
14639: PPUSH
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 49
// if vc_control = 1 then
14652: LD_OWVAR 38
14656: PUSH
14657: LD_INT 1
14659: EQUAL
14660: IFFALSE 14717
// begin hc_gallery =  ;
14662: LD_ADDR_OWVAR 33
14666: PUSH
14667: LD_STRING 
14669: ST_TO_ADDR
// hc_name =  ;
14670: LD_ADDR_OWVAR 26
14674: PUSH
14675: LD_STRING 
14677: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14678: LD_INT 0
14680: PPUSH
14681: LD_INT 3
14683: PPUSH
14684: LD_VAR 0 4
14688: PPUSH
14689: CALL_OW 380
// un = CreateHuman ;
14693: LD_ADDR_VAR 0 15
14697: PUSH
14698: CALL_OW 44
14702: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14703: LD_VAR 0 15
14707: PPUSH
14708: LD_VAR 0 16
14712: PPUSH
14713: CALL_OW 52
// end ; i = i + 1 ;
14717: LD_ADDR_VAR 0 13
14721: PUSH
14722: LD_VAR 0 13
14726: PUSH
14727: LD_INT 1
14729: PLUS
14730: ST_TO_ADDR
// end ; until i = vehCount ;
14731: LD_VAR 0 13
14735: PUSH
14736: LD_VAR 0 3
14740: EQUAL
14741: IFFALSE 13351
// repeat wait ( 0 0$1 ) ;
14743: LD_INT 35
14745: PPUSH
14746: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14750: LD_ADDR_VAR 0 20
14754: PUSH
14755: LD_INT 22
14757: PUSH
14758: LD_VAR 0 2
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PUSH
14767: LD_INT 21
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 24
14779: PUSH
14780: LD_INT 650
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: LIST
14791: PPUSH
14792: CALL_OW 69
14796: ST_TO_ADDR
// if vehicleOK_list > 0 then
14797: LD_VAR 0 20
14801: PUSH
14802: LD_INT 0
14804: GREATER
14805: IFFALSE 14996
// begin for i in vehicleOK_list do
14807: LD_ADDR_VAR 0 13
14811: PUSH
14812: LD_VAR 0 20
14816: PUSH
14817: FOR_IN
14818: IFFALSE 14994
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14820: LD_ADDR_VAR 0 21
14824: PUSH
14825: LD_INT 22
14827: PUSH
14828: LD_VAR 0 11
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PPUSH
14837: CALL_OW 69
14841: PPUSH
14842: LD_VAR 0 13
14846: PPUSH
14847: CALL_OW 74
14851: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14852: LD_ADDR_VAR 0 22
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: LD_VAR 0 11
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: LD_INT 59
14874: PUSH
14875: EMPTY
14876: LIST
14877: PUSH
14878: LD_INT 21
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: LD_INT 21
14890: PUSH
14891: LD_INT 2
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: EMPTY
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: EMPTY
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: PPUSH
14916: LD_VAR 0 13
14920: PPUSH
14921: CALL_OW 74
14925: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14926: LD_VAR 0 13
14930: PPUSH
14931: LD_VAR 0 21
14935: PPUSH
14936: CALL_OW 296
14940: PUSH
14941: LD_INT 8
14943: PLUS
14944: PUSH
14945: LD_VAR 0 13
14949: PPUSH
14950: LD_VAR 0 22
14954: PPUSH
14955: CALL_OW 296
14959: LESS
14960: IFFALSE 14978
// begin ComAttackUnit ( i , target1 ) ;
14962: LD_VAR 0 13
14966: PPUSH
14967: LD_VAR 0 21
14971: PPUSH
14972: CALL_OW 115
// end else
14976: GO 14992
// begin ComAttackUnit ( i , target2 ) ;
14978: LD_VAR 0 13
14982: PPUSH
14983: LD_VAR 0 22
14987: PPUSH
14988: CALL_OW 115
// end ; end ;
14992: GO 14817
14994: POP
14995: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14996: LD_INT 22
14998: PUSH
14999: LD_VAR 0 2
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 21
15010: PUSH
15011: LD_INT 2
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PPUSH
15022: CALL_OW 69
15026: PUSH
15027: LD_INT 0
15029: EQUAL
15030: IFFALSE 14743
// end ;
15032: LD_VAR 0 12
15036: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
15037: LD_INT 0
15039: PPUSH
15040: PPUSH
15041: PPUSH
15042: PPUSH
15043: PPUSH
15044: PPUSH
15045: PPUSH
15046: PPUSH
15047: PPUSH
15048: PPUSH
15049: PPUSH
// for i = 1 to medicCount do
15050: LD_ADDR_VAR 0 13
15054: PUSH
15055: DOUBLE
15056: LD_INT 1
15058: DEC
15059: ST_TO_ADDR
15060: LD_VAR 0 7
15064: PUSH
15065: FOR_TO
15066: IFFALSE 15148
// begin uc_side = side ;
15068: LD_ADDR_OWVAR 20
15072: PUSH
15073: LD_VAR 0 1
15077: ST_TO_ADDR
// uc_nation = nation ;
15078: LD_ADDR_OWVAR 21
15082: PUSH
15083: LD_VAR 0 2
15087: ST_TO_ADDR
// hc_name =  ;
15088: LD_ADDR_OWVAR 26
15092: PUSH
15093: LD_STRING 
15095: ST_TO_ADDR
// hc_gallery =  ;
15096: LD_ADDR_OWVAR 33
15100: PUSH
15101: LD_STRING 
15103: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
15104: LD_INT 0
15106: PPUSH
15107: LD_INT 4
15109: PPUSH
15110: LD_VAR 0 8
15114: PPUSH
15115: CALL_OW 380
// un = CreateHuman ;
15119: LD_ADDR_VAR 0 15
15123: PUSH
15124: CALL_OW 44
15128: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15129: LD_VAR 0 15
15133: PPUSH
15134: LD_VAR 0 9
15138: PPUSH
15139: LD_INT 0
15141: PPUSH
15142: CALL_OW 49
// end ;
15146: GO 15065
15148: POP
15149: POP
// for i = 1 to soldierCount do
15150: LD_ADDR_VAR 0 13
15154: PUSH
15155: DOUBLE
15156: LD_INT 1
15158: DEC
15159: ST_TO_ADDR
15160: LD_VAR 0 3
15164: PUSH
15165: FOR_TO
15166: IFFALSE 15248
// begin uc_side = side ;
15168: LD_ADDR_OWVAR 20
15172: PUSH
15173: LD_VAR 0 1
15177: ST_TO_ADDR
// uc_nation = nation ;
15178: LD_ADDR_OWVAR 21
15182: PUSH
15183: LD_VAR 0 2
15187: ST_TO_ADDR
// hc_name =  ;
15188: LD_ADDR_OWVAR 26
15192: PUSH
15193: LD_STRING 
15195: ST_TO_ADDR
// hc_gallery =  ;
15196: LD_ADDR_OWVAR 33
15200: PUSH
15201: LD_STRING 
15203: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
15204: LD_INT 0
15206: PPUSH
15207: LD_INT 1
15209: PPUSH
15210: LD_VAR 0 8
15214: PPUSH
15215: CALL_OW 380
// un = CreateHuman ;
15219: LD_ADDR_VAR 0 15
15223: PUSH
15224: CALL_OW 44
15228: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15229: LD_VAR 0 15
15233: PPUSH
15234: LD_VAR 0 9
15238: PPUSH
15239: LD_INT 0
15241: PPUSH
15242: CALL_OW 49
// end ;
15246: GO 15165
15248: POP
15249: POP
// for i = 1 to sniperCount do
15250: LD_ADDR_VAR 0 13
15254: PUSH
15255: DOUBLE
15256: LD_INT 1
15258: DEC
15259: ST_TO_ADDR
15260: LD_VAR 0 4
15264: PUSH
15265: FOR_TO
15266: IFFALSE 15348
// begin uc_side = side ;
15268: LD_ADDR_OWVAR 20
15272: PUSH
15273: LD_VAR 0 1
15277: ST_TO_ADDR
// uc_nation = nation ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_VAR 0 2
15287: ST_TO_ADDR
// hc_name =  ;
15288: LD_ADDR_OWVAR 26
15292: PUSH
15293: LD_STRING 
15295: ST_TO_ADDR
// hc_gallery =  ;
15296: LD_ADDR_OWVAR 33
15300: PUSH
15301: LD_STRING 
15303: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
15304: LD_INT 0
15306: PPUSH
15307: LD_INT 5
15309: PPUSH
15310: LD_VAR 0 8
15314: PPUSH
15315: CALL_OW 380
// un = CreateHuman ;
15319: LD_ADDR_VAR 0 15
15323: PUSH
15324: CALL_OW 44
15328: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15329: LD_VAR 0 15
15333: PPUSH
15334: LD_VAR 0 9
15338: PPUSH
15339: LD_INT 0
15341: PPUSH
15342: CALL_OW 49
// end ;
15346: GO 15265
15348: POP
15349: POP
// for i = 1 to bazookCount do
15350: LD_ADDR_VAR 0 13
15354: PUSH
15355: DOUBLE
15356: LD_INT 1
15358: DEC
15359: ST_TO_ADDR
15360: LD_VAR 0 5
15364: PUSH
15365: FOR_TO
15366: IFFALSE 15448
// begin uc_side = side ;
15368: LD_ADDR_OWVAR 20
15372: PUSH
15373: LD_VAR 0 1
15377: ST_TO_ADDR
// uc_nation = nation ;
15378: LD_ADDR_OWVAR 21
15382: PUSH
15383: LD_VAR 0 2
15387: ST_TO_ADDR
// hc_name =  ;
15388: LD_ADDR_OWVAR 26
15392: PUSH
15393: LD_STRING 
15395: ST_TO_ADDR
// hc_gallery =  ;
15396: LD_ADDR_OWVAR 33
15400: PUSH
15401: LD_STRING 
15403: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
15404: LD_INT 0
15406: PPUSH
15407: LD_INT 9
15409: PPUSH
15410: LD_VAR 0 8
15414: PPUSH
15415: CALL_OW 380
// un = CreateHuman ;
15419: LD_ADDR_VAR 0 15
15423: PUSH
15424: CALL_OW 44
15428: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15429: LD_VAR 0 15
15433: PPUSH
15434: LD_VAR 0 9
15438: PPUSH
15439: LD_INT 0
15441: PPUSH
15442: CALL_OW 49
// end ;
15446: GO 15365
15448: POP
15449: POP
// for i = 1 to mortalCount do
15450: LD_ADDR_VAR 0 13
15454: PUSH
15455: DOUBLE
15456: LD_INT 1
15458: DEC
15459: ST_TO_ADDR
15460: LD_VAR 0 6
15464: PUSH
15465: FOR_TO
15466: IFFALSE 15548
// begin uc_side = side ;
15468: LD_ADDR_OWVAR 20
15472: PUSH
15473: LD_VAR 0 1
15477: ST_TO_ADDR
// uc_nation = nation ;
15478: LD_ADDR_OWVAR 21
15482: PUSH
15483: LD_VAR 0 2
15487: ST_TO_ADDR
// hc_name =  ;
15488: LD_ADDR_OWVAR 26
15492: PUSH
15493: LD_STRING 
15495: ST_TO_ADDR
// hc_gallery =  ;
15496: LD_ADDR_OWVAR 33
15500: PUSH
15501: LD_STRING 
15503: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15504: LD_INT 0
15506: PPUSH
15507: LD_INT 8
15509: PPUSH
15510: LD_VAR 0 8
15514: PPUSH
15515: CALL_OW 380
// un = CreateHuman ;
15519: LD_ADDR_VAR 0 15
15523: PUSH
15524: CALL_OW 44
15528: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15529: LD_VAR 0 15
15533: PPUSH
15534: LD_VAR 0 9
15538: PPUSH
15539: LD_INT 0
15541: PPUSH
15542: CALL_OW 49
// end ;
15546: GO 15465
15548: POP
15549: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
15550: LD_ADDR_VAR 0 18
15554: PUSH
15555: LD_INT 22
15557: PUSH
15558: LD_VAR 0 1
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: PUSH
15567: LD_INT 2
15569: PUSH
15570: LD_INT 25
15572: PUSH
15573: LD_INT 1
15575: PUSH
15576: EMPTY
15577: LIST
15578: LIST
15579: PUSH
15580: LD_INT 25
15582: PUSH
15583: LD_INT 5
15585: PUSH
15586: EMPTY
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 25
15592: PUSH
15593: LD_INT 8
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: PUSH
15600: LD_INT 25
15602: PUSH
15603: LD_INT 9
15605: PUSH
15606: EMPTY
15607: LIST
15608: LIST
15609: PUSH
15610: EMPTY
15611: LIST
15612: LIST
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PPUSH
15621: CALL_OW 69
15625: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15626: LD_ADDR_VAR 0 17
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_VAR 0 1
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: PUSH
15643: LD_INT 25
15645: PUSH
15646: LD_INT 4
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PPUSH
15657: CALL_OW 69
15661: ST_TO_ADDR
// for i in medic_list do
15662: LD_ADDR_VAR 0 13
15666: PUSH
15667: LD_VAR 0 17
15671: PUSH
15672: FOR_IN
15673: IFFALSE 15691
// ComMoveToArea ( i , healArea ) ;
15675: LD_VAR 0 13
15679: PPUSH
15680: LD_VAR 0 10
15684: PPUSH
15685: CALL_OW 113
15689: GO 15672
15691: POP
15692: POP
// repeat wait ( 0 0$1 ) ;
15693: LD_INT 35
15695: PPUSH
15696: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15700: LD_ADDR_VAR 0 16
15704: PUSH
15705: LD_INT 22
15707: PUSH
15708: LD_VAR 0 1
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: LD_INT 1
15719: PUSH
15720: LD_INT 3
15722: PUSH
15723: LD_INT 24
15725: PUSH
15726: LD_INT 550
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: PUSH
15733: EMPTY
15734: LIST
15735: LIST
15736: PUSH
15737: LD_INT 24
15739: PUSH
15740: LD_INT 250
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PUSH
15747: EMPTY
15748: LIST
15749: LIST
15750: LIST
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: PPUSH
15756: CALL_OW 69
15760: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15761: LD_ADDR_VAR 0 18
15765: PUSH
15766: LD_INT 22
15768: PUSH
15769: LD_VAR 0 1
15773: PUSH
15774: EMPTY
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 2
15780: PUSH
15781: LD_INT 25
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 25
15793: PUSH
15794: LD_INT 5
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 25
15803: PUSH
15804: LD_INT 8
15806: PUSH
15807: EMPTY
15808: LIST
15809: LIST
15810: PUSH
15811: LD_INT 25
15813: PUSH
15814: LD_INT 9
15816: PUSH
15817: EMPTY
15818: LIST
15819: LIST
15820: PUSH
15821: EMPTY
15822: LIST
15823: LIST
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 24
15830: PUSH
15831: LD_INT 1000
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: PPUSH
15843: CALL_OW 69
15847: ST_TO_ADDR
// if medicCount > 0 then
15848: LD_VAR 0 7
15852: PUSH
15853: LD_INT 0
15855: GREATER
15856: IFFALSE 15930
// begin if damageUnit_list > 0 then
15858: LD_VAR 0 16
15862: PUSH
15863: LD_INT 0
15865: GREATER
15866: IFFALSE 15930
// begin for i in damageUnit_list do
15868: LD_ADDR_VAR 0 13
15872: PUSH
15873: LD_VAR 0 16
15877: PUSH
15878: FOR_IN
15879: IFFALSE 15928
// begin ComMoveToArea ( i , healArea ) ;
15881: LD_VAR 0 13
15885: PPUSH
15886: LD_VAR 0 10
15890: PPUSH
15891: CALL_OW 113
// for j in medic_list do
15895: LD_ADDR_VAR 0 14
15899: PUSH
15900: LD_VAR 0 17
15904: PUSH
15905: FOR_IN
15906: IFFALSE 15924
// AddComHeal ( j , i ) ;
15908: LD_VAR 0 14
15912: PPUSH
15913: LD_VAR 0 13
15917: PPUSH
15918: CALL_OW 188
15922: GO 15905
15924: POP
15925: POP
// end ;
15926: GO 15878
15928: POP
15929: POP
// end ; end ; for i in soldiersOK_list do
15930: LD_ADDR_VAR 0 13
15934: PUSH
15935: LD_VAR 0 18
15939: PUSH
15940: FOR_IN
15941: IFFALSE 16117
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15943: LD_ADDR_VAR 0 21
15947: PUSH
15948: LD_INT 22
15950: PUSH
15951: LD_VAR 0 11
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PPUSH
15960: CALL_OW 69
15964: PPUSH
15965: LD_VAR 0 13
15969: PPUSH
15970: CALL_OW 74
15974: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15975: LD_ADDR_VAR 0 22
15979: PUSH
15980: LD_INT 22
15982: PUSH
15983: LD_VAR 0 11
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: LD_INT 59
15997: PUSH
15998: EMPTY
15999: LIST
16000: PUSH
16001: LD_INT 21
16003: PUSH
16004: LD_INT 1
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 21
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: PUSH
16027: EMPTY
16028: LIST
16029: LIST
16030: PUSH
16031: EMPTY
16032: LIST
16033: PPUSH
16034: CALL_OW 69
16038: PPUSH
16039: LD_VAR 0 13
16043: PPUSH
16044: CALL_OW 74
16048: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16049: LD_VAR 0 13
16053: PPUSH
16054: LD_VAR 0 21
16058: PPUSH
16059: CALL_OW 296
16063: PUSH
16064: LD_INT 8
16066: PLUS
16067: PUSH
16068: LD_VAR 0 13
16072: PPUSH
16073: LD_VAR 0 22
16077: PPUSH
16078: CALL_OW 296
16082: LESS
16083: IFFALSE 16101
// begin ComAttackUnit ( i , target1 ) ;
16085: LD_VAR 0 13
16089: PPUSH
16090: LD_VAR 0 21
16094: PPUSH
16095: CALL_OW 115
// end else
16099: GO 16115
// begin ComAttackUnit ( i , target2 ) ;
16101: LD_VAR 0 13
16105: PPUSH
16106: LD_VAR 0 22
16110: PPUSH
16111: CALL_OW 115
// end ; end ;
16115: GO 15940
16117: POP
16118: POP
// for i in soldiersOK_list do
16119: LD_ADDR_VAR 0 13
16123: PUSH
16124: LD_VAR 0 18
16128: PUSH
16129: FOR_IN
16130: IFFALSE 16306
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16132: LD_ADDR_VAR 0 21
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_VAR 0 11
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PPUSH
16149: CALL_OW 69
16153: PPUSH
16154: LD_VAR 0 13
16158: PPUSH
16159: CALL_OW 74
16163: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16164: LD_ADDR_VAR 0 22
16168: PUSH
16169: LD_INT 22
16171: PUSH
16172: LD_VAR 0 11
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PUSH
16181: LD_INT 2
16183: PUSH
16184: LD_INT 59
16186: PUSH
16187: EMPTY
16188: LIST
16189: PUSH
16190: LD_INT 21
16192: PUSH
16193: LD_INT 1
16195: PUSH
16196: EMPTY
16197: LIST
16198: LIST
16199: PUSH
16200: LD_INT 21
16202: PUSH
16203: LD_INT 2
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: LIST
16214: LIST
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: EMPTY
16221: LIST
16222: PPUSH
16223: CALL_OW 69
16227: PPUSH
16228: LD_VAR 0 13
16232: PPUSH
16233: CALL_OW 74
16237: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16238: LD_VAR 0 13
16242: PPUSH
16243: LD_VAR 0 21
16247: PPUSH
16248: CALL_OW 296
16252: PUSH
16253: LD_INT 8
16255: PLUS
16256: PUSH
16257: LD_VAR 0 13
16261: PPUSH
16262: LD_VAR 0 22
16266: PPUSH
16267: CALL_OW 296
16271: LESS
16272: IFFALSE 16290
// begin ComAttackUnit ( i , target1 ) ;
16274: LD_VAR 0 13
16278: PPUSH
16279: LD_VAR 0 21
16283: PPUSH
16284: CALL_OW 115
// end else
16288: GO 16304
// begin ComAttackUnit ( i , target2 ) ;
16290: LD_VAR 0 13
16294: PPUSH
16295: LD_VAR 0 22
16299: PPUSH
16300: CALL_OW 115
// end ; end ;
16304: GO 16129
16306: POP
16307: POP
// until soldiersOK_list = [ ] ;
16308: LD_VAR 0 18
16312: PUSH
16313: EMPTY
16314: EQUAL
16315: IFFALSE 15693
// end ;
16317: LD_VAR 0 12
16321: RET
// export function TameApemans ; var i , j ; begin
16322: LD_INT 0
16324: PPUSH
16325: PPUSH
16326: PPUSH
// repeat wait ( 0 0$1 ) ;
16327: LD_INT 35
16329: PPUSH
16330: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16334: LD_ADDR_VAR 0 2
16338: PUSH
16339: LD_INT 22
16341: PUSH
16342: LD_INT 2
16344: PUSH
16345: EMPTY
16346: LIST
16347: LIST
16348: PUSH
16349: LD_INT 25
16351: PUSH
16352: LD_INT 4
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: PPUSH
16363: CALL_OW 69
16367: PUSH
16368: FOR_IN
16369: IFFALSE 16446
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16371: LD_ADDR_VAR 0 3
16375: PUSH
16376: LD_INT 5
16378: PPUSH
16379: LD_INT 22
16381: PUSH
16382: LD_INT 0
16384: PUSH
16385: EMPTY
16386: LIST
16387: LIST
16388: PUSH
16389: LD_INT 25
16391: PUSH
16392: LD_INT 12
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 70
16407: PUSH
16408: FOR_IN
16409: IFFALSE 16442
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16411: LD_VAR 0 2
16415: PPUSH
16416: LD_VAR 0 3
16420: PPUSH
16421: CALL_OW 250
16425: PPUSH
16426: LD_VAR 0 3
16430: PPUSH
16431: CALL_OW 251
16435: PPUSH
16436: CALL_OW 191
// end ;
16440: GO 16408
16442: POP
16443: POP
// end ;
16444: GO 16368
16446: POP
16447: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
16448: LD_INT 22
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PUSH
16458: LD_INT 25
16460: PUSH
16461: LD_INT 4
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: PUSH
16468: EMPTY
16469: LIST
16470: LIST
16471: PPUSH
16472: CALL_OW 69
16476: PUSH
16477: LD_INT 0
16479: EQUAL
16480: PUSH
16481: LD_INT 5
16483: PPUSH
16484: LD_INT 22
16486: PUSH
16487: LD_INT 0
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 25
16496: PUSH
16497: LD_INT 12
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PPUSH
16508: CALL_OW 70
16512: PUSH
16513: LD_INT 0
16515: EQUAL
16516: OR
16517: IFFALSE 16327
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
16519: LD_ADDR_VAR 0 2
16523: PUSH
16524: LD_INT 22
16526: PUSH
16527: LD_INT 2
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: PUSH
16534: LD_INT 25
16536: PUSH
16537: LD_INT 12
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PPUSH
16548: CALL_OW 69
16552: PUSH
16553: FOR_IN
16554: IFFALSE 16589
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
16556: LD_VAR 0 2
16560: PPUSH
16561: LD_INT 16
16563: PUSH
16564: LD_INT 15
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 1
16573: PPUSH
16574: LD_INT 2
16576: PPUSH
16577: CALL_OW 12
16581: ARRAY
16582: PPUSH
16583: CALL_OW 336
16587: GO 16553
16589: POP
16590: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16591: LD_ADDR_VAR 0 2
16595: PUSH
16596: LD_INT 22
16598: PUSH
16599: LD_INT 2
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 4
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: PUSH
16625: FOR_IN
16626: IFFALSE 16644
// ComEnterUnit ( i , arLab ) ;
16628: LD_VAR 0 2
16632: PPUSH
16633: LD_EXP 42
16637: PPUSH
16638: CALL_OW 120
16642: GO 16625
16644: POP
16645: POP
// end ;
16646: LD_VAR 0 1
16650: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16651: LD_INT 0
16653: PPUSH
16654: PPUSH
16655: PPUSH
16656: PPUSH
16657: PPUSH
16658: PPUSH
16659: PPUSH
16660: PPUSH
16661: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16662: LD_INT 22
16664: PUSH
16665: LD_VAR 0 1
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: PUSH
16674: LD_INT 21
16676: PUSH
16677: LD_INT 2
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PPUSH
16688: CALL_OW 69
16692: PUSH
16693: LD_VAR 0 3
16697: LESSEQUAL
16698: IFFALSE 16842
// for i = 1 to vehCount do
16700: LD_ADDR_VAR 0 10
16704: PUSH
16705: DOUBLE
16706: LD_INT 1
16708: DEC
16709: ST_TO_ADDR
16710: LD_VAR 0 3
16714: PUSH
16715: FOR_TO
16716: IFFALSE 16840
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16718: LD_ADDR_VAR 0 12
16722: PUSH
16723: LD_VAR 0 5
16727: PUSH
16728: LD_INT 1
16730: PPUSH
16731: LD_VAR 0 5
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: ST_TO_ADDR
// if randWeapon = 46 then
16742: LD_VAR 0 12
16746: PUSH
16747: LD_INT 46
16749: EQUAL
16750: IFFALSE 16795
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16752: LD_VAR 0 2
16756: PPUSH
16757: LD_INT 24
16759: PPUSH
16760: LD_VAR 0 6
16764: PPUSH
16765: LD_VAR 0 7
16769: PUSH
16770: LD_INT 1
16772: PPUSH
16773: LD_VAR 0 7
16777: PPUSH
16778: CALL_OW 12
16782: ARRAY
16783: PPUSH
16784: LD_VAR 0 12
16788: PPUSH
16789: CALL_OW 185
16793: GO 16838
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16795: LD_VAR 0 2
16799: PPUSH
16800: LD_VAR 0 8
16804: PPUSH
16805: LD_VAR 0 6
16809: PPUSH
16810: LD_VAR 0 7
16814: PUSH
16815: LD_INT 1
16817: PPUSH
16818: LD_VAR 0 7
16822: PPUSH
16823: CALL_OW 12
16827: ARRAY
16828: PPUSH
16829: LD_VAR 0 12
16833: PPUSH
16834: CALL_OW 185
// end ;
16838: GO 16715
16840: POP
16841: POP
// repeat wait ( 0 0$1 ) ;
16842: LD_INT 35
16844: PPUSH
16845: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16849: LD_INT 22
16851: PUSH
16852: LD_VAR 0 1
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 2
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 24
16873: PUSH
16874: LD_INT 250
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: EMPTY
16882: LIST
16883: LIST
16884: LIST
16885: PPUSH
16886: CALL_OW 69
16890: PUSH
16891: LD_VAR 0 3
16895: GREATEREQUAL
16896: IFFALSE 16842
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16898: LD_INT 22
16900: PUSH
16901: LD_VAR 0 1
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 21
16912: PUSH
16913: LD_INT 2
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 24
16922: PUSH
16923: LD_INT 250
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: PUSH
16940: LD_VAR 0 3
16944: GREATEREQUAL
16945: IFFALSE 17288
// begin repeat begin wait ( 0 0$1 ) ;
16947: LD_INT 35
16949: PPUSH
16950: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16954: LD_INT 22
16956: PUSH
16957: LD_VAR 0 1
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 21
16968: PUSH
16969: LD_INT 2
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 24
16978: PUSH
16979: LD_INT 651
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: PUSH
16986: EMPTY
16987: LIST
16988: LIST
16989: LIST
16990: PPUSH
16991: CALL_OW 69
16995: PUSH
16996: LD_INT 0
16998: GREATER
16999: IFFALSE 17227
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
17001: LD_ADDR_VAR 0 10
17005: PUSH
17006: LD_INT 22
17008: PUSH
17009: LD_VAR 0 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: LD_INT 21
17020: PUSH
17021: LD_INT 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 24
17030: PUSH
17031: LD_INT 651
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: EMPTY
17039: LIST
17040: LIST
17041: LIST
17042: PPUSH
17043: CALL_OW 69
17047: PUSH
17048: FOR_IN
17049: IFFALSE 17225
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17051: LD_ADDR_VAR 0 16
17055: PUSH
17056: LD_INT 22
17058: PUSH
17059: LD_VAR 0 4
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PPUSH
17068: CALL_OW 69
17072: PPUSH
17073: LD_VAR 0 10
17077: PPUSH
17078: CALL_OW 74
17082: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17083: LD_ADDR_VAR 0 17
17087: PUSH
17088: LD_INT 22
17090: PUSH
17091: LD_VAR 0 4
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 59
17105: PUSH
17106: EMPTY
17107: LIST
17108: PUSH
17109: LD_INT 21
17111: PUSH
17112: LD_INT 1
17114: PUSH
17115: EMPTY
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 21
17121: PUSH
17122: LD_INT 2
17124: PUSH
17125: EMPTY
17126: LIST
17127: LIST
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: EMPTY
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: PPUSH
17147: LD_VAR 0 10
17151: PPUSH
17152: CALL_OW 74
17156: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17157: LD_VAR 0 10
17161: PPUSH
17162: LD_VAR 0 16
17166: PPUSH
17167: CALL_OW 296
17171: PUSH
17172: LD_INT 8
17174: PLUS
17175: PUSH
17176: LD_VAR 0 10
17180: PPUSH
17181: LD_VAR 0 17
17185: PPUSH
17186: CALL_OW 296
17190: LESS
17191: IFFALSE 17209
// begin ComAttackUnit ( i , target1 ) ;
17193: LD_VAR 0 10
17197: PPUSH
17198: LD_VAR 0 16
17202: PPUSH
17203: CALL_OW 115
// end else
17207: GO 17223
// begin ComAttackUnit ( i , target2 ) ;
17209: LD_VAR 0 10
17213: PPUSH
17214: LD_VAR 0 17
17218: PPUSH
17219: CALL_OW 115
// end ; end ;
17223: GO 17048
17225: POP
17226: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
17227: LD_INT 22
17229: PUSH
17230: LD_VAR 0 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 2
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: PUSH
17258: LD_INT 0
17260: EQUAL
17261: PUSH
17262: LD_INT 22
17264: PUSH
17265: LD_VAR 0 4
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: EMPTY
17275: LIST
17276: PPUSH
17277: CALL_OW 69
17281: PUSH
17282: LD_INT 0
17284: EQUAL
17285: OR
17286: IFFALSE 16947
// end ; end ; end_of_file
17288: LD_VAR 0 9
17292: RET
// every 0 0$1 trigger russianAI = 1 do
17293: LD_EXP 37
17297: PUSH
17298: LD_INT 1
17300: EQUAL
17301: IFFALSE 17520
17303: GO 17305
17305: DISABLE
// begin enable ;
17306: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
17307: LD_INT 3
17309: PPUSH
17310: LD_EXP 28
17314: PPUSH
17315: CALL 12256 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17319: LD_INT 3
17321: PPUSH
17322: LD_EXP 40
17326: PPUSH
17327: CALL 12563 0 2
// if ruPossition = 1 then
17331: LD_EXP 39
17335: PUSH
17336: LD_INT 1
17338: EQUAL
17339: IFFALSE 17394
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17341: LD_INT 3
17343: PPUSH
17344: LD_INT 13
17346: PPUSH
17347: LD_INT 10
17349: PPUSH
17350: LD_INT 22
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 21
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 30
17372: PUSH
17373: LD_INT 8
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: PPUSH
17385: CALL_OW 69
17389: PPUSH
17390: CALL 12769 0 4
// if ruPossition = 2 then
17394: LD_EXP 39
17398: PUSH
17399: LD_INT 2
17401: EQUAL
17402: IFFALSE 17457
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17404: LD_INT 3
17406: PPUSH
17407: LD_INT 14
17409: PPUSH
17410: LD_INT 11
17412: PPUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 3
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 3
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 30
17435: PUSH
17436: LD_INT 8
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: PPUSH
17448: CALL_OW 69
17452: PPUSH
17453: CALL 12769 0 4
// if ruPossition = 3 then
17457: LD_EXP 39
17461: PUSH
17462: LD_INT 3
17464: EQUAL
17465: IFFALSE 17520
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17467: LD_INT 3
17469: PPUSH
17470: LD_INT 15
17472: PPUSH
17473: LD_INT 12
17475: PPUSH
17476: LD_INT 22
17478: PUSH
17479: LD_INT 3
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 3
17491: PUSH
17492: EMPTY
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 30
17498: PUSH
17499: LD_INT 8
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: LIST
17510: PPUSH
17511: CALL_OW 69
17515: PPUSH
17516: CALL 12769 0 4
// end ;
17520: END
// every 0 0$1 do
17521: GO 17523
17523: DISABLE
// begin enable ;
17524: ENABLE
// if ruPossition = 1 then
17525: LD_EXP 39
17529: PUSH
17530: LD_INT 1
17532: EQUAL
17533: IFFALSE 17545
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
17535: LD_INT 3
17537: PPUSH
17538: LD_INT 10
17540: PPUSH
17541: CALL 11954 0 2
// if ruPossition = 2 then
17545: LD_EXP 39
17549: PUSH
17550: LD_INT 2
17552: EQUAL
17553: IFFALSE 17565
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
17555: LD_INT 3
17557: PPUSH
17558: LD_INT 11
17560: PPUSH
17561: CALL 11954 0 2
// if ruPossition = 3 then
17565: LD_EXP 39
17569: PUSH
17570: LD_INT 3
17572: EQUAL
17573: IFFALSE 17585
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
17575: LD_INT 3
17577: PPUSH
17578: LD_INT 12
17580: PPUSH
17581: CALL 11954 0 2
// IntBazooka ( 3 , 1 ) ;
17585: LD_INT 3
17587: PPUSH
17588: LD_INT 1
17590: PPUSH
17591: CALL 11561 0 2
// IntBazooka ( 6 , 1 ) ;
17595: LD_INT 6
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: CALL 11561 0 2
// end ;
17605: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17606: LD_EXP 37
17610: PUSH
17611: LD_INT 1
17613: EQUAL
17614: PUSH
17615: LD_EXP 33
17619: PPUSH
17620: CALL_OW 302
17624: AND
17625: PUSH
17626: LD_EXP 33
17630: PPUSH
17631: CALL_OW 255
17635: PUSH
17636: LD_INT 3
17638: EQUAL
17639: AND
17640: PUSH
17641: LD_INT 22
17643: PUSH
17644: LD_INT 3
17646: PUSH
17647: EMPTY
17648: LIST
17649: LIST
17650: PUSH
17651: LD_INT 21
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 33
17663: PUSH
17664: LD_INT 3
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: PPUSH
17676: CALL_OW 69
17680: PUSH
17681: LD_INT 0
17683: EQUAL
17684: AND
17685: IFFALSE 17893
17687: GO 17689
17689: DISABLE
// begin enable ;
17690: ENABLE
// if Difficulty = 1 then
17691: LD_OWVAR 67
17695: PUSH
17696: LD_INT 1
17698: EQUAL
17699: IFFALSE 17761
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17701: LD_INT 3
17703: PPUSH
17704: LD_EXP 33
17708: PPUSH
17709: LD_INT 5
17711: PPUSH
17712: LD_INT 8
17714: PPUSH
17715: CALL_OW 12
17719: PPUSH
17720: LD_INT 1
17722: PPUSH
17723: LD_INT 43
17725: PUSH
17726: LD_INT 44
17728: PUSH
17729: LD_INT 45
17731: PUSH
17732: LD_INT 46
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: LD_INT 1
17746: PUSH
17747: LD_INT 3
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PPUSH
17754: LD_INT 22
17756: PPUSH
17757: CALL 16651 0 8
// if Difficulty = 2 then
17761: LD_OWVAR 67
17765: PUSH
17766: LD_INT 2
17768: EQUAL
17769: IFFALSE 17827
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17771: LD_INT 3
17773: PPUSH
17774: LD_EXP 33
17778: PPUSH
17779: LD_INT 6
17781: PPUSH
17782: LD_INT 8
17784: PPUSH
17785: CALL_OW 12
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: LD_INT 44
17795: PUSH
17796: LD_INT 45
17798: PUSH
17799: LD_INT 46
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: LIST
17806: PPUSH
17807: LD_INT 1
17809: PPUSH
17810: LD_INT 1
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PPUSH
17820: LD_INT 22
17822: PPUSH
17823: CALL 16651 0 8
// if Difficulty = 3 then
17827: LD_OWVAR 67
17831: PUSH
17832: LD_INT 3
17834: EQUAL
17835: IFFALSE 17893
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17837: LD_INT 3
17839: PPUSH
17840: LD_EXP 33
17844: PPUSH
17845: LD_INT 7
17847: PPUSH
17848: LD_INT 8
17850: PPUSH
17851: CALL_OW 12
17855: PPUSH
17856: LD_INT 1
17858: PPUSH
17859: LD_INT 44
17861: PUSH
17862: LD_INT 45
17864: PUSH
17865: LD_INT 46
17867: PUSH
17868: EMPTY
17869: LIST
17870: LIST
17871: LIST
17872: PPUSH
17873: LD_INT 1
17875: PPUSH
17876: LD_INT 1
17878: PUSH
17879: LD_INT 3
17881: PUSH
17882: EMPTY
17883: LIST
17884: LIST
17885: PPUSH
17886: LD_INT 22
17888: PPUSH
17889: CALL 16651 0 8
// end ; end_of_file
17893: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17894: LD_VAR 0 1
17898: PPUSH
17899: CALL_OW 255
17903: PUSH
17904: LD_INT 4
17906: EQUAL
17907: IFFALSE 17921
// SetBName ( building , epsilon ) ;
17909: LD_VAR 0 1
17913: PPUSH
17914: LD_STRING epsilon
17916: PPUSH
17917: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17921: LD_VAR 0 1
17925: PPUSH
17926: CALL_OW 255
17930: PUSH
17931: LD_INT 1
17933: EQUAL
17934: PUSH
17935: LD_VAR 0 1
17939: PPUSH
17940: CALL_OW 266
17944: PUSH
17945: LD_INT 0
17947: EQUAL
17948: AND
17949: IFFALSE 17963
// SetBName ( building , epsilon ) ;
17951: LD_VAR 0 1
17955: PPUSH
17956: LD_STRING epsilon
17958: PPUSH
17959: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17963: LD_VAR 0 1
17967: PPUSH
17968: CALL_OW 255
17972: PUSH
17973: LD_INT 3
17975: EQUAL
17976: PUSH
17977: LD_VAR 0 1
17981: PPUSH
17982: CALL_OW 266
17986: PUSH
17987: LD_INT 0
17989: EQUAL
17990: AND
17991: IFFALSE 18005
// SetBName ( building , chuikov ) ;
17993: LD_VAR 0 1
17997: PPUSH
17998: LD_STRING chuikov
18000: PPUSH
18001: CALL_OW 500
// end ;
18005: PPOPN 2
18007: END
// on BuildingComplete ( building ) do var i ;
18008: LD_INT 0
18010: PPUSH
// begin if GetSide ( building ) = 1 then
18011: LD_VAR 0 1
18015: PPUSH
18016: CALL_OW 255
18020: PUSH
18021: LD_INT 1
18023: EQUAL
18024: IFFALSE 18224
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
18026: LD_INT 22
18028: PUSH
18029: LD_INT 1
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 2
18038: PUSH
18039: LD_INT 30
18041: PUSH
18042: LD_INT 7
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 30
18051: PUSH
18052: LD_INT 8
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 1
18061: PUSH
18062: LD_INT 30
18064: PUSH
18065: LD_INT 11
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 1
18074: PUSH
18075: LD_INT 2
18077: PUSH
18078: LD_INT 30
18080: PUSH
18081: LD_INT 26
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 30
18090: PUSH
18091: LD_INT 27
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: LD_INT 30
18100: PUSH
18101: LD_INT 28
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: PUSH
18118: EMPTY
18119: LIST
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PPUSH
18133: CALL_OW 69
18137: PUSH
18138: LD_INT 0
18140: GREATER
18141: PUSH
18142: LD_INT 22
18144: PUSH
18145: LD_INT 1
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: LD_INT 2
18154: PUSH
18155: LD_INT 30
18157: PUSH
18158: LD_INT 26
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 30
18167: PUSH
18168: LD_INT 27
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: LD_INT 30
18177: PUSH
18178: LD_INT 28
18180: PUSH
18181: EMPTY
18182: LIST
18183: LIST
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PPUSH
18195: CALL_OW 69
18199: PUSH
18200: LD_INT 0
18202: GREATER
18203: AND
18204: PUSH
18205: LD_EXP 53
18209: PUSH
18210: LD_INT 0
18212: EQUAL
18213: AND
18214: IFFALSE 18224
// eventVar1 = 1 ;
18216: LD_ADDR_EXP 53
18220: PUSH
18221: LD_INT 1
18223: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
18224: LD_VAR 0 1
18228: PPUSH
18229: CALL_OW 255
18233: PUSH
18234: LD_INT 3
18236: EQUAL
18237: IFFALSE 18717
// begin if GetBType ( building ) = b_depot then
18239: LD_VAR 0 1
18243: PPUSH
18244: CALL_OW 266
18248: PUSH
18249: LD_INT 0
18251: EQUAL
18252: IFFALSE 18324
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 274
18263: PPUSH
18264: LD_INT 1
18266: PPUSH
18267: LD_INT 5000
18269: PPUSH
18270: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18274: LD_VAR 0 1
18278: PPUSH
18279: CALL_OW 274
18283: PPUSH
18284: LD_INT 2
18286: PPUSH
18287: LD_INT 5000
18289: PPUSH
18290: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
18294: LD_VAR 0 1
18298: PPUSH
18299: CALL_OW 274
18303: PPUSH
18304: LD_INT 3
18306: PPUSH
18307: LD_INT 5000
18309: PPUSH
18310: CALL_OW 277
// ruDepot = building ;
18314: LD_ADDR_EXP 28
18318: PUSH
18319: LD_VAR 0 1
18323: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18324: LD_VAR 0 1
18328: PPUSH
18329: CALL_OW 266
18333: PUSH
18334: LD_INT 0
18336: EQUAL
18337: PUSH
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 266
18347: PUSH
18348: LD_INT 2
18350: EQUAL
18351: OR
18352: PUSH
18353: LD_VAR 0 1
18357: PPUSH
18358: CALL_OW 266
18362: PUSH
18363: LD_INT 4
18365: EQUAL
18366: OR
18367: IFFALSE 18378
// ComUpgrade ( building ) ;
18369: LD_VAR 0 1
18373: PPUSH
18374: CALL_OW 146
// if GetBType ( building ) = b_lab then
18378: LD_VAR 0 1
18382: PPUSH
18383: CALL_OW 266
18387: PUSH
18388: LD_INT 6
18390: EQUAL
18391: IFFALSE 18594
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
18393: LD_INT 22
18395: PUSH
18396: LD_INT 3
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PUSH
18403: LD_INT 30
18405: PUSH
18406: LD_INT 8
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: EMPTY
18414: LIST
18415: LIST
18416: PPUSH
18417: CALL_OW 69
18421: PUSH
18422: LD_INT 0
18424: EQUAL
18425: IFFALSE 18463
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18427: LD_VAR 0 1
18431: PPUSH
18432: LD_INT 10
18434: PPUSH
18435: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18439: LD_VAR 0 1
18443: PPUSH
18444: LD_INT 12
18446: PPUSH
18447: CALL_OW 207
// ruLab1 = building ;
18451: LD_ADDR_EXP 29
18455: PUSH
18456: LD_VAR 0 1
18460: ST_TO_ADDR
// end else
18461: GO 18497
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 11
18470: PPUSH
18471: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
18475: LD_VAR 0 1
18479: PPUSH
18480: LD_INT 14
18482: PPUSH
18483: CALL_OW 207
// ruLab2 = building ;
18487: LD_ADDR_EXP 30
18491: PUSH
18492: LD_VAR 0 1
18496: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
18497: LD_INT 3
18499: PPUSH
18500: LD_VAR 0 1
18504: PPUSH
18505: LD_INT 3
18507: PPUSH
18508: CALL 11869 0 3
// if ruDestroyedBuildings > 0 then
18512: LD_EXP 40
18516: PUSH
18517: LD_INT 0
18519: GREATER
18520: IFFALSE 18594
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18522: LD_ADDR_EXP 40
18526: PUSH
18527: LD_EXP 40
18531: PPUSH
18532: LD_INT 1
18534: PPUSH
18535: CALL_OW 3
18539: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18540: LD_ADDR_EXP 40
18544: PUSH
18545: LD_EXP 40
18549: PPUSH
18550: LD_INT 1
18552: PPUSH
18553: CALL_OW 3
18557: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18558: LD_ADDR_EXP 40
18562: PUSH
18563: LD_EXP 40
18567: PPUSH
18568: LD_INT 1
18570: PPUSH
18571: CALL_OW 3
18575: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18576: LD_ADDR_EXP 40
18580: PUSH
18581: LD_EXP 40
18585: PPUSH
18586: LD_INT 1
18588: PPUSH
18589: CALL_OW 3
18593: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
18594: LD_VAR 0 1
18598: PPUSH
18599: CALL_OW 266
18603: PUSH
18604: LD_INT 32
18606: EQUAL
18607: IFFALSE 18644
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18609: LD_VAR 0 1
18613: PPUSH
18614: LD_INT 44
18616: PUSH
18617: LD_INT 45
18619: PUSH
18620: LD_INT 46
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: LIST
18627: PUSH
18628: LD_INT 1
18630: PPUSH
18631: LD_INT 3
18633: PPUSH
18634: CALL_OW 12
18638: ARRAY
18639: PPUSH
18640: CALL_OW 208
// if GetBType ( building ) = b_turret then
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 266
18653: PUSH
18654: LD_INT 33
18656: EQUAL
18657: IFFALSE 18694
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18659: LD_VAR 0 1
18663: PPUSH
18664: LD_INT 44
18666: PUSH
18667: LD_INT 46
18669: PUSH
18670: LD_INT 46
18672: PUSH
18673: EMPTY
18674: LIST
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 1
18680: PPUSH
18681: LD_INT 3
18683: PPUSH
18684: CALL_OW 12
18688: ARRAY
18689: PPUSH
18690: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18694: LD_VAR 0 1
18698: PPUSH
18699: CALL_OW 266
18703: PUSH
18704: LD_INT 24
18706: EQUAL
18707: IFFALSE 18717
// russianAI = 1 ;
18709: LD_ADDR_EXP 37
18713: PUSH
18714: LD_INT 1
18716: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18717: LD_VAR 0 1
18721: PPUSH
18722: CALL_OW 255
18726: PUSH
18727: LD_INT 2
18729: EQUAL
18730: IFFALSE 19241
// begin if GetBType ( building ) = b_depot then
18732: LD_VAR 0 1
18736: PPUSH
18737: CALL_OW 266
18741: PUSH
18742: LD_INT 0
18744: EQUAL
18745: IFFALSE 18831
// begin arDepot = building ;
18747: LD_ADDR_EXP 41
18751: PUSH
18752: LD_VAR 0 1
18756: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18757: LD_INT 38
18759: PUSH
18760: LD_INT 47
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: PPUSH
18767: LD_INT 71
18769: PPUSH
18770: LD_INT 19
18772: PPUSH
18773: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18777: LD_VAR 0 1
18781: PPUSH
18782: CALL_OW 274
18786: PPUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_INT 500
18792: PPUSH
18793: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18797: LD_VAR 0 1
18801: PPUSH
18802: CALL_OW 274
18806: PPUSH
18807: LD_INT 3
18809: PPUSH
18810: LD_INT 30
18812: PPUSH
18813: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18817: LD_EXP 25
18821: PPUSH
18822: LD_EXP 41
18826: PPUSH
18827: CALL_OW 120
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18831: LD_VAR 0 1
18835: PPUSH
18836: CALL_OW 266
18840: PUSH
18841: LD_INT 2
18843: EQUAL
18844: PUSH
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 266
18854: PUSH
18855: LD_INT 4
18857: EQUAL
18858: OR
18859: IFFALSE 18870
// ComUpgrade ( building ) ;
18861: LD_VAR 0 1
18865: PPUSH
18866: CALL_OW 146
// if GetBType ( building ) = b_lab then
18870: LD_VAR 0 1
18874: PPUSH
18875: CALL_OW 266
18879: PUSH
18880: LD_INT 6
18882: EQUAL
18883: IFFALSE 18934
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18885: LD_VAR 0 1
18889: PPUSH
18890: LD_INT 10
18892: PPUSH
18893: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18897: LD_VAR 0 1
18901: PPUSH
18902: LD_INT 11
18904: PPUSH
18905: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
18909: LD_INT 2
18911: PPUSH
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_INT 2
18919: PPUSH
18920: CALL 11869 0 3
// arLab = building ;
18924: LD_ADDR_EXP 42
18928: PUSH
18929: LD_VAR 0 1
18933: ST_TO_ADDR
// end ; if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
18934: LD_VAR 0 1
18938: PPUSH
18939: CALL_OW 266
18943: PUSH
18944: LD_INT 31
18946: EQUAL
18947: PUSH
18948: LD_INT 22
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: PUSH
18958: LD_INT 25
18960: PUSH
18961: LD_INT 1
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 3
18970: PUSH
18971: LD_INT 54
18973: PUSH
18974: EMPTY
18975: LIST
18976: PUSH
18977: LD_INT 3
18979: PUSH
18980: LD_INT 60
18982: PUSH
18983: EMPTY
18984: LIST
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: PPUSH
19000: CALL_OW 69
19004: PUSH
19005: LD_INT 0
19007: GREATER
19008: AND
19009: IFFALSE 19081
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
19011: LD_INT 22
19013: PUSH
19014: LD_INT 2
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: PUSH
19021: LD_INT 25
19023: PUSH
19024: LD_INT 1
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 3
19033: PUSH
19034: LD_INT 54
19036: PUSH
19037: EMPTY
19038: LIST
19039: PUSH
19040: LD_INT 3
19042: PUSH
19043: LD_INT 60
19045: PUSH
19046: EMPTY
19047: LIST
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: LIST
19062: PPUSH
19063: CALL_OW 69
19067: PUSH
19068: LD_INT 1
19070: ARRAY
19071: PPUSH
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
19081: LD_VAR 0 1
19085: PPUSH
19086: CALL_OW 266
19090: PUSH
19091: LD_INT 27
19093: EQUAL
19094: IFFALSE 19241
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
19096: LD_INT 22
19098: PUSH
19099: LD_INT 2
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PUSH
19106: LD_INT 30
19108: PUSH
19109: LD_INT 27
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PPUSH
19120: CALL_OW 69
19124: PUSH
19125: LD_INT 2
19127: EQUAL
19128: IFFALSE 19241
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) do
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_INT 2
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 21
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 25
19157: PUSH
19158: LD_INT 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: PPUSH
19170: CALL_OW 69
19174: PUSH
19175: FOR_IN
19176: IFFALSE 19239
// begin AddComMoveXY ( i , 92 , 34 ) ;
19178: LD_VAR 0 2
19182: PPUSH
19183: LD_INT 92
19185: PPUSH
19186: LD_INT 34
19188: PPUSH
19189: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
19193: LD_VAR 0 2
19197: PPUSH
19198: LD_INT 82
19200: PPUSH
19201: LD_INT 57
19203: PPUSH
19204: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
19208: LD_VAR 0 2
19212: PPUSH
19213: LD_INT 36
19215: PPUSH
19216: LD_INT 28
19218: PPUSH
19219: CALL_OW 171
// AddComEnterUnit ( i , arDepot ) ;
19223: LD_VAR 0 2
19227: PPUSH
19228: LD_EXP 41
19232: PPUSH
19233: CALL_OW 180
// end ;
19237: GO 19175
19239: POP
19240: POP
// end ; end ; end ;
19241: PPOPN 2
19243: END
// on UpgradeComplete ( building ) do var i ;
19244: LD_INT 0
19246: PPUSH
// begin if GetSide ( building ) = 1 then
19247: LD_VAR 0 1
19251: PPUSH
19252: CALL_OW 255
19256: PUSH
19257: LD_INT 1
19259: EQUAL
19260: IFFALSE 19460
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19262: LD_INT 22
19264: PUSH
19265: LD_INT 1
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 2
19274: PUSH
19275: LD_INT 30
19277: PUSH
19278: LD_INT 7
19280: PUSH
19281: EMPTY
19282: LIST
19283: LIST
19284: PUSH
19285: LD_INT 30
19287: PUSH
19288: LD_INT 8
19290: PUSH
19291: EMPTY
19292: LIST
19293: LIST
19294: PUSH
19295: LD_INT 1
19297: PUSH
19298: LD_INT 30
19300: PUSH
19301: LD_INT 11
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: LD_INT 1
19310: PUSH
19311: LD_INT 2
19313: PUSH
19314: LD_INT 30
19316: PUSH
19317: LD_INT 26
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 30
19326: PUSH
19327: LD_INT 27
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 30
19336: PUSH
19337: LD_INT 28
19339: PUSH
19340: EMPTY
19341: LIST
19342: LIST
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: PUSH
19350: EMPTY
19351: LIST
19352: LIST
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: PPUSH
19369: CALL_OW 69
19373: PUSH
19374: LD_INT 0
19376: GREATER
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_INT 1
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 2
19390: PUSH
19391: LD_INT 30
19393: PUSH
19394: LD_INT 26
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: LD_INT 30
19403: PUSH
19404: LD_INT 27
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: LD_INT 30
19413: PUSH
19414: LD_INT 28
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PPUSH
19431: CALL_OW 69
19435: PUSH
19436: LD_INT 0
19438: GREATER
19439: AND
19440: PUSH
19441: LD_EXP 53
19445: PUSH
19446: LD_INT 0
19448: EQUAL
19449: AND
19450: IFFALSE 19460
// eventVar1 = 1 ;
19452: LD_ADDR_EXP 53
19456: PUSH
19457: LD_INT 1
19459: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19460: LD_VAR 0 1
19464: PPUSH
19465: CALL_OW 255
19469: PUSH
19470: LD_INT 2
19472: EQUAL
19473: IFFALSE 19578
// begin if GetBType ( building ) = b_barracks then
19475: LD_VAR 0 1
19479: PPUSH
19480: CALL_OW 266
19484: PUSH
19485: LD_INT 5
19487: EQUAL
19488: IFFALSE 19578
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
19490: LD_ADDR_VAR 0 2
19494: PUSH
19495: LD_INT 22
19497: PUSH
19498: LD_INT 2
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: LD_INT 25
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: LD_INT 3
19517: PUSH
19518: LD_INT 54
19520: PUSH
19521: EMPTY
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 69
19537: PUSH
19538: LD_EXP 25
19542: PUSH
19543: EMPTY
19544: LIST
19545: DIFF
19546: PUSH
19547: FOR_IN
19548: IFFALSE 19566
// ComEnterUnit ( i , building ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 1
19559: PPUSH
19560: CALL_OW 120
19564: GO 19547
19566: POP
19567: POP
// arArm = building ;
19568: LD_ADDR_EXP 43
19572: PUSH
19573: LD_VAR 0 1
19577: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 255
19587: PUSH
19588: LD_INT 3
19590: EQUAL
19591: IFFALSE 20064
// begin if GetBType ( building ) = b_factory then
19593: LD_VAR 0 1
19597: PPUSH
19598: CALL_OW 266
19602: PUSH
19603: LD_INT 3
19605: EQUAL
19606: IFFALSE 19673
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19608: LD_ADDR_VAR 0 2
19612: PUSH
19613: LD_INT 22
19615: PUSH
19616: LD_INT 3
19618: PUSH
19619: EMPTY
19620: LIST
19621: LIST
19622: PUSH
19623: LD_INT 25
19625: PUSH
19626: LD_INT 3
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PPUSH
19637: CALL_OW 69
19641: PUSH
19642: FOR_IN
19643: IFFALSE 19661
// ComEnterUnit ( i , building ) ;
19645: LD_VAR 0 2
19649: PPUSH
19650: LD_VAR 0 1
19654: PPUSH
19655: CALL_OW 120
19659: GO 19642
19661: POP
19662: POP
// ruFab = building ;
19663: LD_ADDR_EXP 33
19667: PUSH
19668: LD_VAR 0 1
19672: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19673: LD_INT 22
19675: PUSH
19676: LD_INT 3
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: PUSH
19683: LD_INT 21
19685: PUSH
19686: LD_INT 3
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: PUSH
19693: LD_INT 30
19695: PUSH
19696: LD_INT 8
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: LIST
19707: PPUSH
19708: CALL_OW 69
19712: PUSH
19713: LD_INT 2
19715: EQUAL
19716: IFFALSE 19924
// begin for i = 1 to 2 do
19718: LD_ADDR_VAR 0 2
19722: PUSH
19723: DOUBLE
19724: LD_INT 1
19726: DEC
19727: ST_TO_ADDR
19728: LD_INT 2
19730: PUSH
19731: FOR_TO
19732: IFFALSE 19819
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19734: LD_INT 22
19736: PUSH
19737: LD_INT 3
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: PUSH
19744: LD_INT 25
19746: PUSH
19747: LD_INT 4
19749: PUSH
19750: EMPTY
19751: LIST
19752: LIST
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PPUSH
19758: CALL_OW 69
19762: PUSH
19763: LD_VAR 0 2
19767: ARRAY
19768: PPUSH
19769: LD_INT 22
19771: PUSH
19772: LD_INT 3
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 21
19781: PUSH
19782: LD_INT 3
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 8
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: PPUSH
19804: CALL_OW 69
19808: PUSH
19809: LD_INT 1
19811: ARRAY
19812: PPUSH
19813: CALL_OW 120
19817: GO 19731
19819: POP
19820: POP
// for i = 3 to 4 do
19821: LD_ADDR_VAR 0 2
19825: PUSH
19826: DOUBLE
19827: LD_INT 3
19829: DEC
19830: ST_TO_ADDR
19831: LD_INT 4
19833: PUSH
19834: FOR_TO
19835: IFFALSE 19922
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
19837: LD_INT 22
19839: PUSH
19840: LD_INT 3
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 25
19849: PUSH
19850: LD_INT 4
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PPUSH
19861: CALL_OW 69
19865: PUSH
19866: LD_VAR 0 2
19870: ARRAY
19871: PPUSH
19872: LD_INT 22
19874: PUSH
19875: LD_INT 3
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 21
19884: PUSH
19885: LD_INT 3
19887: PUSH
19888: EMPTY
19889: LIST
19890: LIST
19891: PUSH
19892: LD_INT 30
19894: PUSH
19895: LD_INT 8
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: PUSH
19902: EMPTY
19903: LIST
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: PUSH
19912: LD_INT 2
19914: ARRAY
19915: PPUSH
19916: CALL_OW 120
19920: GO 19834
19922: POP
19923: POP
// end ; if GetBType ( building ) = b_barracks then
19924: LD_VAR 0 1
19928: PPUSH
19929: CALL_OW 266
19933: PUSH
19934: LD_INT 5
19936: EQUAL
19937: IFFALSE 20064
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
19939: LD_ADDR_VAR 0 2
19943: PUSH
19944: LD_INT 22
19946: PUSH
19947: LD_INT 3
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: LD_INT 25
19956: PUSH
19957: LD_INT 1
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 3
19966: PUSH
19967: LD_INT 54
19969: PUSH
19970: EMPTY
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: LIST
19981: PPUSH
19982: CALL_OW 69
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20006
// ComEnterUnit ( i , building ) ;
19990: LD_VAR 0 2
19994: PPUSH
19995: LD_VAR 0 1
19999: PPUSH
20000: CALL_OW 120
20004: GO 19987
20006: POP
20007: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
20008: LD_INT 22
20010: PUSH
20011: LD_INT 3
20013: PUSH
20014: EMPTY
20015: LIST
20016: LIST
20017: PUSH
20018: LD_INT 30
20020: PUSH
20021: LD_INT 5
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: PUSH
20028: EMPTY
20029: LIST
20030: LIST
20031: PPUSH
20032: CALL_OW 69
20036: PUSH
20037: LD_INT 0
20039: EQUAL
20040: IFFALSE 20054
// ruArm1 = building else
20042: LD_ADDR_EXP 31
20046: PUSH
20047: LD_VAR 0 1
20051: ST_TO_ADDR
20052: GO 20064
// ruArm2 = building ;
20054: LD_ADDR_EXP 32
20058: PUSH
20059: LD_VAR 0 1
20063: ST_TO_ADDR
// end ; end ; end ;
20064: PPOPN 2
20066: END
// on EnterBuilding ( building , human ) do var rnd ;
20067: LD_INT 0
20069: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
20070: LD_VAR 0 2
20074: PPUSH
20075: CALL_OW 255
20079: PUSH
20080: LD_INT 2
20082: EQUAL
20083: PUSH
20084: LD_VAR 0 2
20088: PPUSH
20089: CALL_OW 257
20093: PUSH
20094: LD_INT 1
20096: EQUAL
20097: AND
20098: PUSH
20099: LD_VAR 0 1
20103: PUSH
20104: LD_EXP 43
20108: EQUAL
20109: AND
20110: IFFALSE 20157
// begin wait ( 0 0$1 ) ;
20112: LD_INT 35
20114: PPUSH
20115: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
20119: LD_ADDR_VAR 0 3
20123: PUSH
20124: LD_INT 1
20126: PPUSH
20127: LD_INT 100
20129: PPUSH
20130: CALL_OW 12
20134: ST_TO_ADDR
// if rnd > 50 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 50
20142: GREATER
20143: IFFALSE 20157
// SetClass ( human , class_mortar ) ;
20145: LD_VAR 0 2
20149: PPUSH
20150: LD_INT 8
20152: PPUSH
20153: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
20157: LD_VAR 0 2
20161: PPUSH
20162: CALL_OW 255
20166: PUSH
20167: LD_INT 3
20169: EQUAL
20170: PUSH
20171: LD_VAR 0 2
20175: PPUSH
20176: CALL_OW 257
20180: PUSH
20181: LD_INT 1
20183: EQUAL
20184: AND
20185: PUSH
20186: LD_VAR 0 1
20190: PUSH
20191: LD_EXP 31
20195: EQUAL
20196: PUSH
20197: LD_VAR 0 1
20201: PUSH
20202: LD_EXP 32
20206: EQUAL
20207: OR
20208: PUSH
20209: EMPTY
20210: LIST
20211: AND
20212: IFFALSE 20233
// begin wait ( 0 0$1 ) ;
20214: LD_INT 35
20216: PPUSH
20217: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
20221: LD_VAR 0 2
20225: PPUSH
20226: LD_INT 9
20228: PPUSH
20229: CALL_OW 336
// end ; end ;
20233: PPOPN 3
20235: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
20236: LD_VAR 0 1
20240: PUSH
20241: LD_INT 1
20243: EQUAL
20244: PUSH
20245: LD_VAR 0 2
20249: PUSH
20250: LD_INT 2
20252: EQUAL
20253: AND
20254: PUSH
20255: LD_INT 1
20257: PPUSH
20258: LD_INT 2
20260: PPUSH
20261: CALL_OW 81
20265: PUSH
20266: LD_INT 1
20268: EQUAL
20269: AND
20270: IFFALSE 20291
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20272: LD_EXP 23
20276: PPUSH
20277: LD_STRING D6b-Pow-1
20279: PPUSH
20280: CALL_OW 94
// YouLost ( Powell ) ;
20284: LD_STRING Powell
20286: PPUSH
20287: CALL_OW 104
// end ; end ;
20291: PPOPN 2
20293: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20294: LD_VAR 0 1
20298: PPUSH
20299: CALL_OW 255
20303: PUSH
20304: LD_INT 3
20306: EQUAL
20307: PUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: CALL_OW 247
20317: PUSH
20318: LD_INT 3
20320: EQUAL
20321: AND
20322: IFFALSE 21014
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20324: LD_VAR 0 1
20328: PPUSH
20329: CALL_OW 266
20333: PUSH
20334: LD_INT 31
20336: EQUAL
20337: PUSH
20338: LD_VAR 0 1
20342: PPUSH
20343: CALL_OW 266
20347: PUSH
20348: LD_INT 32
20350: EQUAL
20351: OR
20352: PUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL_OW 266
20362: PUSH
20363: LD_INT 36
20365: EQUAL
20366: OR
20367: PUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 266
20377: PUSH
20378: LD_INT 0
20380: EQUAL
20381: OR
20382: PUSH
20383: LD_VAR 0 1
20387: PPUSH
20388: CALL_OW 266
20392: PUSH
20393: LD_INT 24
20395: EQUAL
20396: OR
20397: PUSH
20398: LD_VAR 0 1
20402: PPUSH
20403: CALL_OW 266
20407: PUSH
20408: LD_INT 17
20410: EQUAL
20411: OR
20412: PUSH
20413: LD_VAR 0 1
20417: PPUSH
20418: CALL_OW 266
20422: PUSH
20423: LD_INT 25
20425: EQUAL
20426: OR
20427: PUSH
20428: LD_VAR 0 1
20432: PPUSH
20433: CALL_OW 266
20437: PUSH
20438: LD_INT 19
20440: EQUAL
20441: OR
20442: PUSH
20443: LD_VAR 0 1
20447: PPUSH
20448: CALL_OW 266
20452: PUSH
20453: LD_INT 20
20455: EQUAL
20456: OR
20457: PUSH
20458: LD_VAR 0 1
20462: PPUSH
20463: CALL_OW 266
20467: PUSH
20468: LD_INT 18
20470: EQUAL
20471: OR
20472: PUSH
20473: LD_VAR 0 1
20477: PPUSH
20478: CALL_OW 266
20482: PUSH
20483: LD_INT 21
20485: EQUAL
20486: OR
20487: PUSH
20488: LD_VAR 0 1
20492: PPUSH
20493: CALL_OW 266
20497: PUSH
20498: LD_INT 23
20500: EQUAL
20501: OR
20502: PUSH
20503: LD_VAR 0 1
20507: PPUSH
20508: CALL_OW 266
20512: PUSH
20513: LD_INT 16
20515: EQUAL
20516: OR
20517: PUSH
20518: LD_VAR 0 1
20522: PPUSH
20523: CALL_OW 266
20527: PUSH
20528: LD_INT 6
20530: EQUAL
20531: OR
20532: PUSH
20533: LD_VAR 0 1
20537: PPUSH
20538: CALL_OW 266
20542: PUSH
20543: LD_INT 29
20545: EQUAL
20546: OR
20547: PUSH
20548: LD_VAR 0 1
20552: PPUSH
20553: CALL_OW 266
20557: PUSH
20558: LD_INT 26
20560: EQUAL
20561: OR
20562: PUSH
20563: LD_VAR 0 1
20567: PPUSH
20568: CALL_OW 266
20572: PUSH
20573: LD_INT 30
20575: EQUAL
20576: OR
20577: PUSH
20578: LD_VAR 0 1
20582: PPUSH
20583: CALL_OW 266
20587: PUSH
20588: LD_INT 28
20590: EQUAL
20591: OR
20592: PUSH
20593: LD_VAR 0 1
20597: PPUSH
20598: CALL_OW 266
20602: PUSH
20603: LD_INT 27
20605: EQUAL
20606: OR
20607: PUSH
20608: LD_VAR 0 1
20612: PPUSH
20613: CALL_OW 266
20617: PUSH
20618: LD_INT 33
20620: EQUAL
20621: OR
20622: PUSH
20623: LD_VAR 0 1
20627: PPUSH
20628: CALL_OW 266
20632: PUSH
20633: LD_INT 2
20635: EQUAL
20636: OR
20637: PUSH
20638: LD_VAR 0 1
20642: PPUSH
20643: CALL_OW 266
20647: PUSH
20648: LD_INT 4
20650: EQUAL
20651: OR
20652: IFFALSE 20738
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20654: LD_ADDR_EXP 40
20658: PUSH
20659: LD_EXP 40
20663: PUSH
20664: LD_VAR 0 1
20668: PPUSH
20669: CALL_OW 266
20673: ADD
20674: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20675: LD_ADDR_EXP 40
20679: PUSH
20680: LD_EXP 40
20684: PUSH
20685: LD_VAR 0 1
20689: PPUSH
20690: CALL_OW 250
20694: ADD
20695: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20696: LD_ADDR_EXP 40
20700: PUSH
20701: LD_EXP 40
20705: PUSH
20706: LD_VAR 0 1
20710: PPUSH
20711: CALL_OW 251
20715: ADD
20716: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20717: LD_ADDR_EXP 40
20721: PUSH
20722: LD_EXP 40
20726: PUSH
20727: LD_VAR 0 1
20731: PPUSH
20732: CALL_OW 254
20736: ADD
20737: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20738: LD_VAR 0 1
20742: PPUSH
20743: CALL_OW 266
20747: PUSH
20748: LD_INT 1
20750: EQUAL
20751: IFFALSE 20830
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20753: LD_ADDR_EXP 40
20757: PUSH
20758: LD_EXP 40
20762: PUSH
20763: LD_INT 0
20765: ADD
20766: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20767: LD_ADDR_EXP 40
20771: PUSH
20772: LD_EXP 40
20776: PUSH
20777: LD_VAR 0 1
20781: PPUSH
20782: CALL_OW 250
20786: ADD
20787: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20788: LD_ADDR_EXP 40
20792: PUSH
20793: LD_EXP 40
20797: PUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL_OW 251
20807: ADD
20808: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20809: LD_ADDR_EXP 40
20813: PUSH
20814: LD_EXP 40
20818: PUSH
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 254
20828: ADD
20829: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20830: LD_VAR 0 1
20834: PPUSH
20835: CALL_OW 266
20839: PUSH
20840: LD_INT 3
20842: EQUAL
20843: IFFALSE 20922
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20845: LD_ADDR_EXP 40
20849: PUSH
20850: LD_EXP 40
20854: PUSH
20855: LD_INT 2
20857: ADD
20858: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20859: LD_ADDR_EXP 40
20863: PUSH
20864: LD_EXP 40
20868: PUSH
20869: LD_VAR 0 1
20873: PPUSH
20874: CALL_OW 250
20878: ADD
20879: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20880: LD_ADDR_EXP 40
20884: PUSH
20885: LD_EXP 40
20889: PUSH
20890: LD_VAR 0 1
20894: PPUSH
20895: CALL_OW 251
20899: ADD
20900: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20901: LD_ADDR_EXP 40
20905: PUSH
20906: LD_EXP 40
20910: PUSH
20911: LD_VAR 0 1
20915: PPUSH
20916: CALL_OW 254
20920: ADD
20921: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20922: LD_VAR 0 1
20926: PPUSH
20927: CALL_OW 266
20931: PUSH
20932: LD_INT 5
20934: EQUAL
20935: IFFALSE 21014
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20937: LD_ADDR_EXP 40
20941: PUSH
20942: LD_EXP 40
20946: PUSH
20947: LD_INT 4
20949: ADD
20950: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20951: LD_ADDR_EXP 40
20955: PUSH
20956: LD_EXP 40
20960: PUSH
20961: LD_VAR 0 1
20965: PPUSH
20966: CALL_OW 250
20970: ADD
20971: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20972: LD_ADDR_EXP 40
20976: PUSH
20977: LD_EXP 40
20981: PUSH
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 251
20991: ADD
20992: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20993: LD_ADDR_EXP 40
20997: PUSH
20998: LD_EXP 40
21002: PUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 254
21012: ADD
21013: ST_TO_ADDR
// end ; end ; end ;
21014: PPOPN 1
21016: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
21017: LD_ADDR_OWVAR 57
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// fastEnd = 1 ;
21025: LD_ADDR_EXP 52
21029: PUSH
21030: LD_INT 1
21032: ST_TO_ADDR
// FinishMission ;
21033: CALL 22690 0 0
// end ; end_of_file
21037: PPOPN 1
21039: END
// export function PrepareNature ; var i , un ; begin
21040: LD_INT 0
21042: PPUSH
21043: PPUSH
21044: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
21045: LD_ADDR_VAR 0 2
21049: PUSH
21050: DOUBLE
21051: LD_INT 1
21053: DEC
21054: ST_TO_ADDR
21055: LD_OWVAR 67
21059: PUSH
21060: LD_INT 1
21062: PPUSH
21063: LD_INT 5
21065: PPUSH
21066: CALL_OW 12
21070: PLUS
21071: PUSH
21072: FOR_TO
21073: IFFALSE 21218
// begin hc_sex = sex_male ;
21075: LD_ADDR_OWVAR 27
21079: PUSH
21080: LD_INT 1
21082: ST_TO_ADDR
// uc_side = 0 ;
21083: LD_ADDR_OWVAR 20
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// uc_nation = nation_nature ;
21091: LD_ADDR_OWVAR 21
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// hc_class = class_apeman ;
21099: LD_ADDR_OWVAR 28
21103: PUSH
21104: LD_INT 12
21106: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
21107: LD_ADDR_OWVAR 31
21111: PUSH
21112: LD_INT 2
21114: PPUSH
21115: LD_INT 7
21117: PPUSH
21118: CALL_OW 12
21122: PUSH
21123: LD_OWVAR 67
21127: PLUS
21128: PUSH
21129: LD_INT 2
21131: PPUSH
21132: LD_INT 10
21134: PPUSH
21135: CALL_OW 12
21139: PUSH
21140: LD_INT 2
21142: PPUSH
21143: LD_INT 10
21145: PPUSH
21146: CALL_OW 12
21150: PUSH
21151: LD_INT 2
21153: PPUSH
21154: LD_INT 10
21156: PPUSH
21157: CALL_OW 12
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21168: LD_ADDR_OWVAR 35
21172: PUSH
21173: LD_INT 5
21175: NEG
21176: PPUSH
21177: LD_INT 5
21179: PPUSH
21180: CALL_OW 12
21184: PUSH
21185: LD_OWVAR 67
21189: MUL
21190: ST_TO_ADDR
// un = CreateHuman ;
21191: LD_ADDR_VAR 0 3
21195: PUSH
21196: CALL_OW 44
21200: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21201: LD_VAR 0 3
21205: PPUSH
21206: LD_INT 5
21208: PPUSH
21209: LD_INT 0
21211: PPUSH
21212: CALL_OW 49
// end ;
21216: GO 21072
21218: POP
21219: POP
// for i = 1 to Difficulty + 2 do
21220: LD_ADDR_VAR 0 2
21224: PUSH
21225: DOUBLE
21226: LD_INT 1
21228: DEC
21229: ST_TO_ADDR
21230: LD_OWVAR 67
21234: PUSH
21235: LD_INT 2
21237: PLUS
21238: PUSH
21239: FOR_TO
21240: IFFALSE 21349
// begin hc_sex = sex_male ;
21242: LD_ADDR_OWVAR 27
21246: PUSH
21247: LD_INT 1
21249: ST_TO_ADDR
// uc_side = 0 ;
21250: LD_ADDR_OWVAR 20
21254: PUSH
21255: LD_INT 0
21257: ST_TO_ADDR
// uc_nation = nation_nature ;
21258: LD_ADDR_OWVAR 21
21262: PUSH
21263: LD_INT 0
21265: ST_TO_ADDR
// hc_class = class_tiger ;
21266: LD_ADDR_OWVAR 28
21270: PUSH
21271: LD_INT 14
21273: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21274: LD_ADDR_OWVAR 31
21278: PUSH
21279: LD_EXP 35
21283: PUSH
21284: LD_INT 0
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: LD_INT 0
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21299: LD_ADDR_OWVAR 35
21303: PUSH
21304: LD_INT 5
21306: NEG
21307: PPUSH
21308: LD_INT 5
21310: PPUSH
21311: CALL_OW 12
21315: PUSH
21316: LD_OWVAR 67
21320: MUL
21321: ST_TO_ADDR
// un = CreateHuman ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: CALL_OW 44
21331: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21332: LD_VAR 0 3
21336: PPUSH
21337: LD_INT 6
21339: PPUSH
21340: LD_INT 0
21342: PPUSH
21343: CALL_OW 49
// end ;
21347: GO 21239
21349: POP
21350: POP
// for i = 1 to rand ( 3 , 4 ) do
21351: LD_ADDR_VAR 0 2
21355: PUSH
21356: DOUBLE
21357: LD_INT 1
21359: DEC
21360: ST_TO_ADDR
21361: LD_INT 3
21363: PPUSH
21364: LD_INT 4
21366: PPUSH
21367: CALL_OW 12
21371: PUSH
21372: FOR_TO
21373: IFFALSE 21467
// begin hc_sex = sex_male ;
21375: LD_ADDR_OWVAR 27
21379: PUSH
21380: LD_INT 1
21382: ST_TO_ADDR
// uc_side = 0 ;
21383: LD_ADDR_OWVAR 20
21387: PUSH
21388: LD_INT 0
21390: ST_TO_ADDR
// uc_nation = nation_nature ;
21391: LD_ADDR_OWVAR 21
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// hc_class = 18 ;
21399: LD_ADDR_OWVAR 28
21403: PUSH
21404: LD_INT 18
21406: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21407: LD_ADDR_OWVAR 31
21411: PUSH
21412: LD_EXP 35
21416: PUSH
21417: LD_INT 0
21419: PUSH
21420: LD_INT 0
21422: PUSH
21423: LD_INT 0
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: ST_TO_ADDR
// hc_agressivity = 0 ;
21432: LD_ADDR_OWVAR 35
21436: PUSH
21437: LD_INT 0
21439: ST_TO_ADDR
// un = CreateHuman ;
21440: LD_ADDR_VAR 0 3
21444: PUSH
21445: CALL_OW 44
21449: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21450: LD_VAR 0 3
21454: PPUSH
21455: LD_INT 6
21457: PPUSH
21458: LD_INT 0
21460: PPUSH
21461: CALL_OW 49
// end ;
21465: GO 21372
21467: POP
21468: POP
// end ; end_of_file
21469: LD_VAR 0 1
21473: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
21474: LD_EXP 44
21478: PUSH
21479: LD_INT 1
21481: EQUAL
21482: IFFALSE 21584
21484: GO 21486
21486: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
21487: LD_INT 7
21489: PPUSH
21490: LD_INT 5
21492: PPUSH
21493: LD_INT 4
21495: PPUSH
21496: LD_INT 6
21498: PPUSH
21499: CALL_OW 12
21503: PUSH
21504: LD_INT 6
21506: PPUSH
21507: LD_INT 8
21509: PPUSH
21510: CALL_OW 12
21514: PUSH
21515: LD_INT 7
21517: PPUSH
21518: LD_INT 9
21520: PPUSH
21521: CALL_OW 12
21525: PUSH
21526: EMPTY
21527: LIST
21528: LIST
21529: LIST
21530: PPUSH
21531: LD_EXP 34
21535: PPUSH
21536: LD_EXP 35
21540: PPUSH
21541: CALL_OW 12
21545: PPUSH
21546: LD_INT 2
21548: PPUSH
21549: LD_INT 1
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: EMPTY
21556: PPUSH
21557: LD_INT 25
21559: PUSH
21560: LD_INT 26
21562: PUSH
21563: LD_INT 27
21565: PUSH
21566: LD_INT 28
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: PPUSH
21575: EMPTY
21576: PPUSH
21577: LD_INT 1
21579: PPUSH
21580: CALL 13317 0 11
21584: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
21585: LD_EXP 44
21589: PUSH
21590: LD_INT 1
21592: EQUAL
21593: IFFALSE 21729
21595: GO 21597
21597: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21598: LD_INT 5
21600: PPUSH
21601: LD_INT 2
21603: PPUSH
21604: LD_INT 7
21606: PPUSH
21607: LD_INT 9
21609: PPUSH
21610: CALL_OW 12
21614: PUSH
21615: LD_INT 8
21617: PPUSH
21618: LD_INT 10
21620: PPUSH
21621: CALL_OW 12
21625: PUSH
21626: LD_INT 9
21628: PPUSH
21629: LD_INT 12
21631: PPUSH
21632: CALL_OW 12
21636: PUSH
21637: EMPTY
21638: LIST
21639: LIST
21640: LIST
21641: PUSH
21642: LD_OWVAR 67
21646: ARRAY
21647: PPUSH
21648: LD_INT 0
21650: PPUSH
21651: LD_INT 0
21653: PPUSH
21654: LD_INT 3
21656: PPUSH
21657: LD_INT 4
21659: PPUSH
21660: CALL_OW 12
21664: PUSH
21665: LD_INT 4
21667: PPUSH
21668: LD_INT 5
21670: PPUSH
21671: CALL_OW 12
21675: PUSH
21676: LD_INT 5
21678: PPUSH
21679: LD_INT 6
21681: PPUSH
21682: CALL_OW 12
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: PUSH
21692: LD_OWVAR 67
21696: ARRAY
21697: PPUSH
21698: LD_INT 5
21700: PPUSH
21701: LD_EXP 34
21705: PPUSH
21706: LD_EXP 35
21710: PPUSH
21711: CALL_OW 12
21715: PPUSH
21716: LD_INT 7
21718: PPUSH
21719: LD_INT 9
21721: PPUSH
21722: LD_INT 1
21724: PPUSH
21725: CALL 15037 0 11
21729: END
// every 4 4$30 trigger joinEpsilon = 1 do
21730: LD_EXP 27
21734: PUSH
21735: LD_INT 1
21737: EQUAL
21738: IFFALSE 21800
21740: GO 21742
21742: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 2 , 4 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21743: LD_INT 6
21745: PPUSH
21746: LD_INT 3
21748: PPUSH
21749: LD_INT 2
21751: PPUSH
21752: LD_INT 4
21754: PPUSH
21755: CALL_OW 12
21759: PPUSH
21760: LD_INT 0
21762: PPUSH
21763: LD_INT 0
21765: PPUSH
21766: LD_INT 0
21768: PPUSH
21769: LD_INT 0
21771: PPUSH
21772: LD_EXP 34
21776: PPUSH
21777: LD_EXP 35
21781: PPUSH
21782: CALL_OW 12
21786: PPUSH
21787: LD_INT 17
21789: PPUSH
21790: LD_INT 18
21792: PPUSH
21793: LD_INT 1
21795: PPUSH
21796: CALL 15037 0 11
21800: END
// every 4 4$30 trigger joinEpsilon = 1 do
21801: LD_EXP 27
21805: PUSH
21806: LD_INT 1
21808: EQUAL
21809: IFFALSE 21891
21811: GO 21813
21813: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21814: LD_INT 17
21816: PPUSH
21817: LD_INT 6
21819: PPUSH
21820: LD_INT 1
21822: PPUSH
21823: LD_INT 3
21825: PPUSH
21826: CALL_OW 12
21830: PPUSH
21831: LD_EXP 34
21835: PPUSH
21836: LD_EXP 35
21840: PPUSH
21841: CALL_OW 12
21845: PPUSH
21846: LD_INT 3
21848: PPUSH
21849: LD_INT 1
21851: PPUSH
21852: LD_INT 1
21854: PUSH
21855: LD_INT 3
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PPUSH
21862: LD_INT 43
21864: PUSH
21865: LD_INT 44
21867: PUSH
21868: LD_INT 45
21870: PUSH
21871: LD_INT 46
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: PPUSH
21880: EMPTY
21881: PPUSH
21882: EMPTY
21883: PPUSH
21884: LD_INT 1
21886: PPUSH
21887: CALL 13317 0 11
21891: END
// every 8 8$30 trigger joinEpsilon = 1 do
21892: LD_EXP 27
21896: PUSH
21897: LD_INT 1
21899: EQUAL
21900: IFFALSE 21970
21902: GO 21904
21904: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 3 , 6 ) , 0 , rand ( 3 , 5 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21905: LD_INT 6
21907: PPUSH
21908: LD_INT 3
21910: PPUSH
21911: LD_INT 3
21913: PPUSH
21914: LD_INT 6
21916: PPUSH
21917: CALL_OW 12
21921: PPUSH
21922: LD_INT 0
21924: PPUSH
21925: LD_INT 3
21927: PPUSH
21928: LD_INT 5
21930: PPUSH
21931: CALL_OW 12
21935: PPUSH
21936: LD_INT 0
21938: PPUSH
21939: LD_INT 0
21941: PPUSH
21942: LD_EXP 34
21946: PPUSH
21947: LD_EXP 35
21951: PPUSH
21952: CALL_OW 12
21956: PPUSH
21957: LD_INT 17
21959: PPUSH
21960: LD_INT 18
21962: PPUSH
21963: LD_INT 1
21965: PPUSH
21966: CALL 15037 0 11
21970: END
// every 8 8$30 trigger joinEpsilon = 1 do
21971: LD_EXP 27
21975: PUSH
21976: LD_INT 1
21978: EQUAL
21979: IFFALSE 22061
21981: GO 21983
21983: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21984: LD_INT 17
21986: PPUSH
21987: LD_INT 6
21989: PPUSH
21990: LD_INT 1
21992: PPUSH
21993: LD_INT 5
21995: PPUSH
21996: CALL_OW 12
22000: PPUSH
22001: LD_EXP 34
22005: PPUSH
22006: LD_EXP 35
22010: PPUSH
22011: CALL_OW 12
22015: PPUSH
22016: LD_INT 3
22018: PPUSH
22019: LD_INT 1
22021: PPUSH
22022: LD_INT 1
22024: PUSH
22025: LD_INT 3
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: PPUSH
22032: LD_INT 43
22034: PUSH
22035: LD_INT 44
22037: PUSH
22038: LD_INT 45
22040: PUSH
22041: LD_INT 46
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: PPUSH
22050: EMPTY
22051: PPUSH
22052: EMPTY
22053: PPUSH
22054: LD_INT 1
22056: PPUSH
22057: CALL 13317 0 11
22061: END
// every 15 15$30 trigger joinEpsilon = 1 do
22062: LD_EXP 27
22066: PUSH
22067: LD_INT 1
22069: EQUAL
22070: IFFALSE 22140
22072: GO 22074
22074: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22075: LD_INT 6
22077: PPUSH
22078: LD_INT 3
22080: PPUSH
22081: LD_INT 5
22083: PPUSH
22084: LD_INT 8
22086: PPUSH
22087: CALL_OW 12
22091: PPUSH
22092: LD_INT 0
22094: PPUSH
22095: LD_INT 3
22097: PPUSH
22098: LD_INT 8
22100: PPUSH
22101: CALL_OW 12
22105: PPUSH
22106: LD_INT 0
22108: PPUSH
22109: LD_INT 0
22111: PPUSH
22112: LD_EXP 34
22116: PPUSH
22117: LD_EXP 35
22121: PPUSH
22122: CALL_OW 12
22126: PPUSH
22127: LD_INT 17
22129: PPUSH
22130: LD_INT 18
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: CALL 15037 0 11
22140: END
// every 15 15$30 trigger joinEpsilon = 1 do
22141: LD_EXP 27
22145: PUSH
22146: LD_INT 1
22148: EQUAL
22149: IFFALSE 22231
22151: GO 22153
22153: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22154: LD_INT 17
22156: PPUSH
22157: LD_INT 6
22159: PPUSH
22160: LD_INT 5
22162: PPUSH
22163: LD_INT 8
22165: PPUSH
22166: CALL_OW 12
22170: PPUSH
22171: LD_EXP 34
22175: PPUSH
22176: LD_EXP 35
22180: PPUSH
22181: CALL_OW 12
22185: PPUSH
22186: LD_INT 3
22188: PPUSH
22189: LD_INT 1
22191: PPUSH
22192: LD_INT 1
22194: PUSH
22195: LD_INT 3
22197: PUSH
22198: EMPTY
22199: LIST
22200: LIST
22201: PPUSH
22202: LD_INT 43
22204: PUSH
22205: LD_INT 44
22207: PUSH
22208: LD_INT 45
22210: PUSH
22211: LD_INT 46
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: LIST
22218: LIST
22219: PPUSH
22220: EMPTY
22221: PPUSH
22222: EMPTY
22223: PPUSH
22224: LD_INT 1
22226: PPUSH
22227: CALL 13317 0 11
22231: END
// every 27 27$30 trigger joinEpsilon = 1 do
22232: LD_EXP 27
22236: PUSH
22237: LD_INT 1
22239: EQUAL
22240: IFFALSE 22310
22242: GO 22244
22244: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22245: LD_INT 6
22247: PPUSH
22248: LD_INT 3
22250: PPUSH
22251: LD_INT 7
22253: PPUSH
22254: LD_INT 10
22256: PPUSH
22257: CALL_OW 12
22261: PPUSH
22262: LD_INT 0
22264: PPUSH
22265: LD_INT 3
22267: PPUSH
22268: LD_INT 8
22270: PPUSH
22271: CALL_OW 12
22275: PPUSH
22276: LD_INT 0
22278: PPUSH
22279: LD_INT 0
22281: PPUSH
22282: LD_EXP 34
22286: PPUSH
22287: LD_EXP 35
22291: PPUSH
22292: CALL_OW 12
22296: PPUSH
22297: LD_INT 17
22299: PPUSH
22300: LD_INT 18
22302: PPUSH
22303: LD_INT 1
22305: PPUSH
22306: CALL 15037 0 11
22310: END
// every 27 27$30 trigger joinEpsilon = 1 do
22311: LD_EXP 27
22315: PUSH
22316: LD_INT 1
22318: EQUAL
22319: IFFALSE 22401
22321: GO 22323
22323: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22324: LD_INT 17
22326: PPUSH
22327: LD_INT 6
22329: PPUSH
22330: LD_INT 5
22332: PPUSH
22333: LD_INT 8
22335: PPUSH
22336: CALL_OW 12
22340: PPUSH
22341: LD_EXP 34
22345: PPUSH
22346: LD_EXP 35
22350: PPUSH
22351: CALL_OW 12
22355: PPUSH
22356: LD_INT 3
22358: PPUSH
22359: LD_INT 1
22361: PPUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 3
22367: PUSH
22368: EMPTY
22369: LIST
22370: LIST
22371: PPUSH
22372: LD_INT 43
22374: PUSH
22375: LD_INT 44
22377: PUSH
22378: LD_INT 45
22380: PUSH
22381: LD_INT 46
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: PPUSH
22390: EMPTY
22391: PPUSH
22392: EMPTY
22393: PPUSH
22394: LD_INT 1
22396: PPUSH
22397: CALL 13317 0 11
22401: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 do
22402: LD_INT 54
22404: PPUSH
22405: LD_INT 1
22407: PPUSH
22408: CALL_OW 321
22412: PUSH
22413: LD_INT 2
22415: EQUAL
22416: PUSH
22417: LD_INT 55
22419: PPUSH
22420: LD_INT 1
22422: PPUSH
22423: CALL_OW 321
22427: PUSH
22428: LD_INT 2
22430: EQUAL
22431: AND
22432: PUSH
22433: LD_INT 21
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: CALL_OW 321
22443: PUSH
22444: LD_INT 2
22446: EQUAL
22447: AND
22448: PUSH
22449: LD_INT 22
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL_OW 321
22459: PUSH
22460: LD_INT 2
22462: EQUAL
22463: AND
22464: PUSH
22465: LD_INT 12
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 321
22475: PUSH
22476: LD_INT 1
22478: EQUAL
22479: PUSH
22480: LD_INT 32
22482: PPUSH
22483: LD_INT 1
22485: PPUSH
22486: CALL_OW 321
22490: PUSH
22491: LD_INT 1
22493: EQUAL
22494: OR
22495: PUSH
22496: EMPTY
22497: LIST
22498: AND
22499: PUSH
22500: LD_EXP 46
22504: PUSH
22505: LD_INT 1
22507: EQUAL
22508: AND
22509: IFFALSE 22565
22511: GO 22513
22513: DISABLE
// begin case query ( QEndMission ) of 1 :
22514: LD_STRING QEndMission
22516: PPUSH
22517: CALL_OW 97
22521: PUSH
22522: LD_INT 1
22524: DOUBLE
22525: EQUAL
22526: IFTRUE 22530
22528: GO 22541
22530: POP
// begin end_the_mission_allowed = true ;
22531: LD_ADDR_OWVAR 57
22535: PUSH
22536: LD_INT 1
22538: ST_TO_ADDR
// end ; 2 :
22539: GO 22565
22541: LD_INT 2
22543: DOUBLE
22544: EQUAL
22545: IFTRUE 22549
22547: GO 22564
22549: POP
// begin fastEnd = 1 ;
22550: LD_ADDR_EXP 52
22554: PUSH
22555: LD_INT 1
22557: ST_TO_ADDR
// FinishMission ;
22558: CALL 22690 0 0
// end ; end ;
22562: GO 22565
22564: POP
// end ;
22565: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 do
22566: LD_INT 54
22568: PPUSH
22569: LD_INT 1
22571: PPUSH
22572: CALL_OW 321
22576: PUSH
22577: LD_INT 2
22579: EQUAL
22580: PUSH
22581: LD_INT 55
22583: PPUSH
22584: LD_INT 1
22586: PPUSH
22587: CALL_OW 321
22591: PUSH
22592: LD_INT 2
22594: EQUAL
22595: AND
22596: PUSH
22597: LD_INT 21
22599: PPUSH
22600: LD_INT 1
22602: PPUSH
22603: CALL_OW 321
22607: PUSH
22608: LD_INT 2
22610: EQUAL
22611: AND
22612: PUSH
22613: LD_INT 22
22615: PPUSH
22616: LD_INT 1
22618: PPUSH
22619: CALL_OW 321
22623: PUSH
22624: LD_INT 2
22626: EQUAL
22627: AND
22628: PUSH
22629: LD_INT 12
22631: PPUSH
22632: LD_INT 1
22634: PPUSH
22635: CALL_OW 321
22639: PUSH
22640: LD_INT 2
22642: EQUAL
22643: AND
22644: PUSH
22645: LD_INT 32
22647: PPUSH
22648: LD_INT 1
22650: PPUSH
22651: CALL_OW 321
22655: PUSH
22656: LD_INT 2
22658: EQUAL
22659: AND
22660: PUSH
22661: LD_EXP 52
22665: PUSH
22666: LD_INT 0
22668: EQUAL
22669: AND
22670: PUSH
22671: LD_EXP 46
22675: PUSH
22676: LD_INT 1
22678: EQUAL
22679: AND
22680: IFFALSE 22689
22682: GO 22684
22684: DISABLE
// FinishMission ;
22685: CALL 22690 0 0
22689: END
// export function FinishMission ; begin
22690: LD_INT 0
22692: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22693: LD_EXP 48
22697: PPUSH
22698: LD_STRING 10_KhatamStatus_1
22700: PPUSH
22701: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22705: LD_INT 12
22707: PPUSH
22708: LD_INT 1
22710: PPUSH
22711: CALL_OW 321
22715: PUSH
22716: LD_INT 2
22718: EQUAL
22719: IFFALSE 22733
// begin AddMedal ( sights , 1 ) ;
22721: LD_STRING sights
22723: PPUSH
22724: LD_INT 1
22726: PPUSH
22727: CALL_OW 101
// end else
22731: GO 22744
// begin AddMedal ( sights , - 1 ) ;
22733: LD_STRING sights
22735: PPUSH
22736: LD_INT 1
22738: NEG
22739: PPUSH
22740: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22744: LD_INT 32
22746: PPUSH
22747: LD_INT 1
22749: PPUSH
22750: CALL_OW 321
22754: PUSH
22755: LD_INT 2
22757: EQUAL
22758: IFFALSE 22772
// begin AddMedal ( computers , 1 ) ;
22760: LD_STRING computers
22762: PPUSH
22763: LD_INT 1
22765: PPUSH
22766: CALL_OW 101
// end else
22770: GO 22783
// begin AddMedal ( computers , - 1 ) ;
22772: LD_STRING computers
22774: PPUSH
22775: LD_INT 1
22777: NEG
22778: PPUSH
22779: CALL_OW 101
// end ; if arabianEscape = 0 then
22783: LD_EXP 45
22787: PUSH
22788: LD_INT 0
22790: EQUAL
22791: IFFALSE 22825
// begin AddMedal ( renegades , 2 ) ;
22793: LD_STRING renegades
22795: PPUSH
22796: LD_INT 2
22798: PPUSH
22799: CALL_OW 101
// SaveVariable ( 0 , 10_GensherEscape_1 ) ;
22803: LD_INT 0
22805: PPUSH
22806: LD_STRING 10_GensherEscape_1
22808: PPUSH
22809: CALL_OW 39
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22813: LD_INT 0
22815: PPUSH
22816: LD_STRING 10_ScientistsEscape_1
22818: PPUSH
22819: CALL_OW 39
// end else
22823: GO 22836
// begin AddMedal ( renegades , - 1 ) ;
22825: LD_STRING renegades
22827: PPUSH
22828: LD_INT 1
22830: NEG
22831: PPUSH
22832: CALL_OW 101
// end ; Query ( kaj ) ;
22836: LD_STRING kaj
22838: PPUSH
22839: CALL_OW 97
// GiveMedals ( Main ) ;
22843: LD_STRING Main
22845: PPUSH
22846: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22850: LD_INT 22
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 23
22862: PUSH
22863: LD_INT 1
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: LD_INT 21
22872: PUSH
22873: LD_INT 1
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: LD_INT 2
22882: PUSH
22883: LD_INT 25
22885: PUSH
22886: LD_INT 1
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 25
22895: PUSH
22896: LD_INT 2
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: LD_INT 25
22905: PUSH
22906: LD_INT 3
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PUSH
22913: LD_INT 25
22915: PUSH
22916: LD_INT 4
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: PUSH
22923: LD_INT 25
22925: PUSH
22926: LD_INT 5
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PUSH
22941: EMPTY
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: PPUSH
22952: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22956: LD_EXP 1
22960: PPUSH
22961: LD_EXP 49
22965: PUSH
22966: LD_STRING JMM
22968: STR
22969: PPUSH
22970: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22974: LD_EXP 2
22978: PPUSH
22979: LD_EXP 49
22983: PUSH
22984: LD_STRING Brown
22986: STR
22987: PPUSH
22988: CALL 8615 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22992: LD_EXP 3
22996: PPUSH
22997: LD_EXP 49
23001: PUSH
23002: LD_STRING Donaldson
23004: STR
23005: PPUSH
23006: CALL 8615 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23010: LD_EXP 4
23014: PPUSH
23015: LD_EXP 49
23019: PUSH
23020: LD_STRING Bobby
23022: STR
23023: PPUSH
23024: CALL 8615 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23028: LD_EXP 5
23032: PPUSH
23033: LD_EXP 49
23037: PUSH
23038: LD_STRING Cyrus
23040: STR
23041: PPUSH
23042: CALL 8615 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23046: LD_EXP 6
23050: PPUSH
23051: LD_EXP 49
23055: PUSH
23056: LD_STRING Lisa
23058: STR
23059: PPUSH
23060: CALL 8615 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23064: LD_EXP 7
23068: PPUSH
23069: LD_EXP 49
23073: PUSH
23074: LD_STRING Frank
23076: STR
23077: PPUSH
23078: CALL 8615 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23082: LD_EXP 15
23086: PPUSH
23087: LD_EXP 49
23091: PUSH
23092: LD_STRING Gladstone
23094: STR
23095: PPUSH
23096: CALL 8615 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23100: LD_EXP 8
23104: PPUSH
23105: LD_EXP 49
23109: PUSH
23110: LD_STRING Kikuchi
23112: STR
23113: PPUSH
23114: CALL 8615 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23118: LD_EXP 12
23122: PPUSH
23123: LD_EXP 49
23127: PUSH
23128: LD_STRING Denis
23130: STR
23131: PPUSH
23132: CALL 8615 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23136: LD_EXP 13
23140: PPUSH
23141: LD_EXP 49
23145: PUSH
23146: LD_STRING Joan
23148: STR
23149: PPUSH
23150: CALL 8615 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23154: LD_EXP 9
23158: PPUSH
23159: LD_EXP 49
23163: PUSH
23164: LD_STRING Houten
23166: STR
23167: PPUSH
23168: CALL 8615 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23172: LD_EXP 11
23176: PPUSH
23177: LD_EXP 49
23181: PUSH
23182: LD_STRING Simms
23184: STR
23185: PPUSH
23186: CALL 8615 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23190: LD_EXP 10
23194: PPUSH
23195: LD_EXP 49
23199: PUSH
23200: LD_STRING Gary
23202: STR
23203: PPUSH
23204: CALL 8615 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23208: LD_EXP 17
23212: PPUSH
23213: LD_EXP 49
23217: PUSH
23218: LD_STRING DeltaDoctor
23220: STR
23221: PPUSH
23222: CALL 8615 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23226: LD_INT 50
23228: PUSH
23229: EMPTY
23230: LIST
23231: PUSH
23232: LD_INT 22
23234: PUSH
23235: LD_INT 1
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: PUSH
23242: LD_INT 21
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: LD_INT 25
23257: PUSH
23258: LD_INT 1
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 25
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: PUSH
23275: LD_INT 25
23277: PUSH
23278: LD_INT 3
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 25
23287: PUSH
23288: LD_INT 4
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: PUSH
23302: EMPTY
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: PUSH
23313: LD_EXP 1
23317: PUSH
23318: LD_EXP 2
23322: PUSH
23323: LD_EXP 3
23327: PUSH
23328: LD_EXP 4
23332: PUSH
23333: LD_EXP 5
23337: PUSH
23338: LD_EXP 6
23342: PUSH
23343: LD_EXP 7
23347: PUSH
23348: LD_EXP 15
23352: PUSH
23353: LD_EXP 8
23357: PUSH
23358: LD_EXP 12
23362: PUSH
23363: LD_EXP 13
23367: PUSH
23368: LD_EXP 9
23372: PUSH
23373: LD_EXP 11
23377: PUSH
23378: LD_EXP 10
23382: PUSH
23383: LD_EXP 17
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: DIFF
23405: PPUSH
23406: LD_STRING 10_other_survivors
23408: PPUSH
23409: CALL_OW 38
// YouWin ;
23413: CALL_OW 103
// end ; end_of_file
23417: LD_VAR 0 1
23421: RET
// every 0 0$1 trigger IsDead ( JMM ) do
23422: LD_EXP 1
23426: PPUSH
23427: CALL_OW 301
23431: IFFALSE 23443
23433: GO 23435
23435: DISABLE
// YouLost ( JMM ) ; end_of_file
23436: LD_STRING JMM
23438: PPUSH
23439: CALL_OW 104
23443: END
// every 0 0$30 do
23444: GO 23446
23446: DISABLE
// begin enable ;
23447: ENABLE
// if cratesSpawned < 6 then
23448: LD_EXP 51
23452: PUSH
23453: LD_INT 6
23455: LESS
23456: IFFALSE 23493
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23458: LD_INT 3
23460: PPUSH
23461: LD_INT 5
23463: PPUSH
23464: CALL_OW 12
23468: PPUSH
23469: LD_INT 16
23471: PPUSH
23472: LD_INT 1
23474: PPUSH
23475: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23479: LD_ADDR_EXP 51
23483: PUSH
23484: LD_EXP 51
23488: PUSH
23489: LD_INT 1
23491: PLUS
23492: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
23493: LD_EXP 51
23497: PUSH
23498: LD_INT 6
23500: GREATEREQUAL
23501: PUSH
23502: LD_EXP 51
23506: PUSH
23507: LD_INT 12
23509: LESS
23510: AND
23511: IFFALSE 23555
// begin wait ( 0 0$30 ) ;
23513: LD_INT 1050
23515: PPUSH
23516: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23520: LD_INT 3
23522: PPUSH
23523: LD_INT 5
23525: PPUSH
23526: CALL_OW 12
23530: PPUSH
23531: LD_INT 16
23533: PPUSH
23534: LD_INT 1
23536: PPUSH
23537: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23541: LD_ADDR_EXP 51
23545: PUSH
23546: LD_EXP 51
23550: PUSH
23551: LD_INT 1
23553: PLUS
23554: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
23555: LD_EXP 51
23559: PUSH
23560: LD_INT 12
23562: GREATEREQUAL
23563: IFFALSE 23607
// begin wait ( 1 1$0 ) ;
23565: LD_INT 2100
23567: PPUSH
23568: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23572: LD_INT 3
23574: PPUSH
23575: LD_INT 5
23577: PPUSH
23578: CALL_OW 12
23582: PPUSH
23583: LD_INT 16
23585: PPUSH
23586: LD_INT 1
23588: PPUSH
23589: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23593: LD_ADDR_EXP 51
23597: PUSH
23598: LD_EXP 51
23602: PUSH
23603: LD_INT 1
23605: PLUS
23606: ST_TO_ADDR
// end ; end ;
23607: END
