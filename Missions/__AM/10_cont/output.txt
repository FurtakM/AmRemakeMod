// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 4
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24756 0 0
// PrepareDifficulty ;
 250: CALL 9996 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19744 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19744 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19744 0 2
// PrepareArabianCommander ;
 354: CALL 3201 0 0
// PrepareArabian ;
 358: CALL 3253 0 0
// BuildArabianBase ;
 362: CALL 12695 0 0
// TameApemans ;
 366: CALL 18559 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9601 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9601 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9601 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9601 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9601 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9601 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9601 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9601 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9601 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9601 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9601 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9601 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9601 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9601 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9601 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING 08_Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9601 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9601 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9601 0 2
1944: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
1945: LD_STRING 08_Kikuchi
1947: PPUSH
1948: CALL_OW 28
1952: IFFALSE 1970
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
1954: LD_ADDR_EXP 8
1958: PUSH
1959: LD_STRING 08_Kikuchi
1961: PPUSH
1962: LD_INT 1
1964: PPUSH
1965: CALL 9601 0 2
1969: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1970: LD_ADDR_EXP 22
1974: PUSH
1975: LD_STRING 09_others
1977: PPUSH
1978: CALL_OW 31
1982: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1983: LD_ADDR_EXP 23
1987: PUSH
1988: LD_STRING 09_apes
1990: PPUSH
1991: CALL_OW 31
1995: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1996: LD_EXP 11
2000: PPUSH
2001: LD_INT 1
2003: PPUSH
2004: LD_INT 0
2006: PPUSH
2007: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2011: LD_EXP 12
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2026: LD_EXP 13
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2041: LD_EXP 14
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2056: LD_EXP 15
2060: PPUSH
2061: LD_INT 1
2063: PPUSH
2064: LD_INT 0
2066: PPUSH
2067: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2071: LD_EXP 17
2075: PPUSH
2076: LD_INT 1
2078: PPUSH
2079: LD_INT 0
2081: PPUSH
2082: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2086: LD_EXP 8
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2101: LD_EXP 11
2105: PUSH
2106: LD_EXP 14
2110: PUSH
2111: LD_EXP 12
2115: PUSH
2116: LD_EXP 15
2120: PUSH
2121: LD_EXP 17
2125: PUSH
2126: LD_EXP 13
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: PPUSH
2139: LD_INT 4
2141: PPUSH
2142: CALL_OW 336
// if others09 > 2 then
2146: LD_EXP 22
2150: PUSH
2151: LD_INT 2
2153: GREATER
2154: IFFALSE 2235
// begin for i := 1 to 3 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: DOUBLE
2162: LD_INT 1
2164: DEC
2165: ST_TO_ADDR
2166: LD_INT 3
2168: PUSH
2169: FOR_TO
2170: IFFALSE 2231
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2172: LD_EXP 22
2176: PUSH
2177: LD_VAR 0 2
2181: ARRAY
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: LD_INT 0
2188: PPUSH
2189: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2193: LD_ADDR_EXP 22
2197: PUSH
2198: LD_EXP 22
2202: PPUSH
2203: LD_INT 1
2205: PPUSH
2206: CALL_OW 3
2210: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2211: LD_EXP 22
2215: PUSH
2216: LD_VAR 0 2
2220: ARRAY
2221: PPUSH
2222: LD_INT 2
2224: PPUSH
2225: CALL_OW 336
// end ;
2229: GO 2169
2231: POP
2232: POP
// end else
2233: GO 2295
// begin for i in others09 do
2235: LD_ADDR_VAR 0 2
2239: PUSH
2240: LD_EXP 22
2244: PUSH
2245: FOR_IN
2246: IFFALSE 2293
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2248: LD_VAR 0 2
2252: PPUSH
2253: LD_INT 1
2255: PPUSH
2256: LD_INT 0
2258: PPUSH
2259: CALL_OW 49
// others09 = others09 diff i ;
2263: LD_ADDR_EXP 22
2267: PUSH
2268: LD_EXP 22
2272: PUSH
2273: LD_VAR 0 2
2277: DIFF
2278: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2279: LD_VAR 0 2
2283: PPUSH
2284: LD_INT 2
2286: PPUSH
2287: CALL_OW 336
// end ;
2291: GO 2245
2293: POP
2294: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2295: LD_INT 22
2297: PUSH
2298: LD_INT 4
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: LD_INT 25
2307: PUSH
2308: LD_INT 2
2310: PUSH
2311: EMPTY
2312: LIST
2313: LIST
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PPUSH
2319: CALL_OW 69
2323: PUSH
2324: LD_INT 0
2326: EQUAL
2327: IFFALSE 2459
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2329: LD_ADDR_VAR 0 3
2333: PUSH
2334: LD_INT 22
2336: PUSH
2337: LD_INT 4
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 2
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: PPUSH
2358: CALL_OW 69
2362: PUSH
2363: LD_EXP 11
2367: PUSH
2368: LD_EXP 14
2372: PUSH
2373: LD_EXP 12
2377: PUSH
2378: LD_EXP 15
2382: PUSH
2383: LD_EXP 17
2387: PUSH
2388: LD_EXP 13
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: LIST
2398: LIST
2399: LIST
2400: DIFF
2401: ST_TO_ADDR
// if not tmp then
2402: LD_VAR 0 3
2406: NOT
2407: IFFALSE 2443
// begin if Denis then
2409: LD_EXP 12
2413: IFFALSE 2429
// SetClass ( Denis , 2 ) else
2415: LD_EXP 12
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL_OW 336
2427: GO 2441
// SetClass ( DeltaDoctor , 2 ) ;
2429: LD_EXP 17
2433: PPUSH
2434: LD_INT 2
2436: PPUSH
2437: CALL_OW 336
// end else
2441: GO 2459
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2443: LD_VAR 0 3
2447: PUSH
2448: LD_INT 1
2450: ARRAY
2451: PPUSH
2452: LD_INT 2
2454: PPUSH
2455: CALL_OW 336
// end ; end ; for i in ape09 do
2459: LD_ADDR_VAR 0 2
2463: PUSH
2464: LD_EXP 23
2468: PUSH
2469: FOR_IN
2470: IFFALSE 2489
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 49
2487: GO 2469
2489: POP
2490: POP
// uc_side = 4 ;
2491: LD_ADDR_OWVAR 20
2495: PUSH
2496: LD_INT 4
2498: ST_TO_ADDR
// hc_class := 1 ;
2499: LD_ADDR_OWVAR 28
2503: PUSH
2504: LD_INT 1
2506: ST_TO_ADDR
// hc_sex := sex_female ;
2507: LD_ADDR_OWVAR 27
2511: PUSH
2512: LD_INT 2
2514: ST_TO_ADDR
// hc_gallery :=  ;
2515: LD_ADDR_OWVAR 33
2519: PUSH
2520: LD_STRING 
2522: ST_TO_ADDR
// hc_name :=  ;
2523: LD_ADDR_OWVAR 26
2527: PUSH
2528: LD_STRING 
2530: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2531: LD_ADDR_OWVAR 31
2535: PUSH
2536: LD_INT 1
2538: PUSH
2539: LD_INT 7
2541: PUSH
2542: LD_INT 1
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: ST_TO_ADDR
// AmScout = CreateHuman ;
2554: LD_ADDR_EXP 18
2558: PUSH
2559: CALL_OW 44
2563: ST_TO_ADDR
// end ;
2564: LD_VAR 0 1
2568: RET
// export function PrepareCornell ; begin
2569: LD_INT 0
2571: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2572: LD_INT 4
2574: PPUSH
2575: LD_INT 4
2577: PPUSH
2578: CALL_OW 343
// uc_side = 4 ;
2582: LD_ADDR_OWVAR 20
2586: PUSH
2587: LD_INT 4
2589: ST_TO_ADDR
// uc_nation = 1 ;
2590: LD_ADDR_OWVAR 21
2594: PUSH
2595: LD_INT 1
2597: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2598: LD_ADDR_EXP 19
2602: PUSH
2603: LD_STRING 03_Cornel
2605: PPUSH
2606: LD_INT 1
2608: PPUSH
2609: CALL 9601 0 2
2613: ST_TO_ADDR
// if not Cornell then
2614: LD_EXP 19
2618: NOT
2619: IFFALSE 2623
// exit ;
2621: GO 2731
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2623: LD_EXP 19
2627: PPUSH
2628: LD_INT 8
2630: PPUSH
2631: LD_INT 0
2633: PPUSH
2634: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2638: LD_EXP 19
2642: PPUSH
2643: LD_INT 350
2645: PPUSH
2646: CALL_OW 234
// if IsInUnit ( JMM ) then
2650: LD_EXP 1
2654: PPUSH
2655: CALL_OW 310
2659: IFFALSE 2702
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2661: LD_EXP 19
2665: PPUSH
2666: LD_EXP 1
2670: PPUSH
2671: CALL_OW 310
2675: PPUSH
2676: CALL_OW 250
2680: PPUSH
2681: LD_EXP 1
2685: PPUSH
2686: CALL_OW 310
2690: PPUSH
2691: CALL_OW 251
2695: PPUSH
2696: CALL_OW 111
2700: GO 2731
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2702: LD_EXP 19
2706: PPUSH
2707: LD_EXP 1
2711: PPUSH
2712: CALL_OW 250
2716: PPUSH
2717: LD_EXP 1
2721: PPUSH
2722: CALL_OW 251
2726: PPUSH
2727: CALL_OW 111
// end ; end_of_file
2731: LD_VAR 0 1
2735: RET
// export function PrepareRussians ; var i , un ; begin
2736: LD_INT 0
2738: PPUSH
2739: PPUSH
2740: PPUSH
// uc_side = 3 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// uc_nation = 3 ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2757: LD_ADDR_EXP 25
2761: PUSH
2762: LD_STRING Tsaritsyn
2764: PPUSH
2765: LD_INT 0
2767: PPUSH
2768: CALL 9601 0 2
2772: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2773: LD_EXP 25
2777: PPUSH
2778: LD_INT 3
2780: PPUSH
2781: LD_INT 0
2783: PPUSH
2784: CALL_OW 49
// for i = 1 to 14 do
2788: LD_ADDR_VAR 0 2
2792: PUSH
2793: DOUBLE
2794: LD_INT 1
2796: DEC
2797: ST_TO_ADDR
2798: LD_INT 14
2800: PUSH
2801: FOR_TO
2802: IFFALSE 2888
// begin uc_side = 3 ;
2804: LD_ADDR_OWVAR 20
2808: PUSH
2809: LD_INT 3
2811: ST_TO_ADDR
// uc_nation = 3 ;
2812: LD_ADDR_OWVAR 21
2816: PUSH
2817: LD_INT 3
2819: ST_TO_ADDR
// hc_gallery =  ;
2820: LD_ADDR_OWVAR 33
2824: PUSH
2825: LD_STRING 
2827: ST_TO_ADDR
// hc_name =  ;
2828: LD_ADDR_OWVAR 26
2832: PUSH
2833: LD_STRING 
2835: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2836: LD_INT 0
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: LD_EXP 36
2846: PPUSH
2847: LD_EXP 37
2851: PPUSH
2852: CALL_OW 12
2856: PPUSH
2857: CALL_OW 380
// un = CreateHuman ;
2861: LD_ADDR_VAR 0 3
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2871: LD_VAR 0 3
2875: PPUSH
2876: LD_INT 3
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// end ;
2886: GO 2801
2888: POP
2889: POP
// for i = 1 to 6 do
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: DOUBLE
2896: LD_INT 1
2898: DEC
2899: ST_TO_ADDR
2900: LD_INT 6
2902: PUSH
2903: FOR_TO
2904: IFFALSE 2990
// begin uc_side = 3 ;
2906: LD_ADDR_OWVAR 20
2910: PUSH
2911: LD_INT 3
2913: ST_TO_ADDR
// uc_nation = 3 ;
2914: LD_ADDR_OWVAR 21
2918: PUSH
2919: LD_INT 3
2921: ST_TO_ADDR
// hc_gallery =  ;
2922: LD_ADDR_OWVAR 33
2926: PUSH
2927: LD_STRING 
2929: ST_TO_ADDR
// hc_name =  ;
2930: LD_ADDR_OWVAR 26
2934: PUSH
2935: LD_STRING 
2937: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2938: LD_INT 0
2940: PPUSH
2941: LD_INT 2
2943: PPUSH
2944: LD_EXP 36
2948: PPUSH
2949: LD_EXP 37
2953: PPUSH
2954: CALL_OW 12
2958: PPUSH
2959: CALL_OW 380
// un = CreateHuman ;
2963: LD_ADDR_VAR 0 3
2967: PUSH
2968: CALL_OW 44
2972: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2973: LD_VAR 0 3
2977: PPUSH
2978: LD_INT 3
2980: PPUSH
2981: LD_INT 0
2983: PPUSH
2984: CALL_OW 49
// end ;
2988: GO 2903
2990: POP
2991: POP
// for i = 1 to 6 do
2992: LD_ADDR_VAR 0 2
2996: PUSH
2997: DOUBLE
2998: LD_INT 1
3000: DEC
3001: ST_TO_ADDR
3002: LD_INT 6
3004: PUSH
3005: FOR_TO
3006: IFFALSE 3092
// begin uc_side = 3 ;
3008: LD_ADDR_OWVAR 20
3012: PUSH
3013: LD_INT 3
3015: ST_TO_ADDR
// uc_nation = 3 ;
3016: LD_ADDR_OWVAR 21
3020: PUSH
3021: LD_INT 3
3023: ST_TO_ADDR
// hc_gallery =  ;
3024: LD_ADDR_OWVAR 33
3028: PUSH
3029: LD_STRING 
3031: ST_TO_ADDR
// hc_name =  ;
3032: LD_ADDR_OWVAR 26
3036: PUSH
3037: LD_STRING 
3039: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3040: LD_INT 0
3042: PPUSH
3043: LD_INT 3
3045: PPUSH
3046: LD_EXP 36
3050: PPUSH
3051: LD_EXP 37
3055: PPUSH
3056: CALL_OW 12
3060: PPUSH
3061: CALL_OW 380
// un = CreateHuman ;
3065: LD_ADDR_VAR 0 3
3069: PUSH
3070: CALL_OW 44
3074: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3075: LD_VAR 0 3
3079: PPUSH
3080: LD_INT 3
3082: PPUSH
3083: LD_INT 0
3085: PPUSH
3086: CALL_OW 49
// end ;
3090: GO 3005
3092: POP
3093: POP
// for i = 1 to 4 do
3094: LD_ADDR_VAR 0 2
3098: PUSH
3099: DOUBLE
3100: LD_INT 1
3102: DEC
3103: ST_TO_ADDR
3104: LD_INT 4
3106: PUSH
3107: FOR_TO
3108: IFFALSE 3194
// begin uc_side = 3 ;
3110: LD_ADDR_OWVAR 20
3114: PUSH
3115: LD_INT 3
3117: ST_TO_ADDR
// uc_nation = 3 ;
3118: LD_ADDR_OWVAR 21
3122: PUSH
3123: LD_INT 3
3125: ST_TO_ADDR
// hc_gallery =  ;
3126: LD_ADDR_OWVAR 33
3130: PUSH
3131: LD_STRING 
3133: ST_TO_ADDR
// hc_name =  ;
3134: LD_ADDR_OWVAR 26
3138: PUSH
3139: LD_STRING 
3141: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3142: LD_INT 0
3144: PPUSH
3145: LD_INT 4
3147: PPUSH
3148: LD_EXP 36
3152: PPUSH
3153: LD_EXP 37
3157: PPUSH
3158: CALL_OW 12
3162: PPUSH
3163: CALL_OW 380
// un = CreateHuman ;
3167: LD_ADDR_VAR 0 3
3171: PUSH
3172: CALL_OW 44
3176: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3177: LD_VAR 0 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 0
3187: PPUSH
3188: CALL_OW 49
// end ;
3192: GO 3107
3194: POP
3195: POP
// end ; end_of_file
3196: LD_VAR 0 1
3200: RET
// export function PrepareArabianCommander ; begin
3201: LD_INT 0
3203: PPUSH
// uc_side = 2 ;
3204: LD_ADDR_OWVAR 20
3208: PUSH
3209: LD_INT 2
3211: ST_TO_ADDR
// uc_nation = 2 ;
3212: LD_ADDR_OWVAR 21
3216: PUSH
3217: LD_INT 2
3219: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3220: LD_ADDR_EXP 26
3224: PUSH
3225: LD_STRING Dietrich
3227: PPUSH
3228: CALL_OW 25
3232: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3233: LD_EXP 26
3237: PPUSH
3238: LD_INT 4
3240: PPUSH
3241: LD_INT 0
3243: PPUSH
3244: CALL_OW 49
// end ;
3248: LD_VAR 0 1
3252: RET
// export function PrepareArabian ; var i , un , veh ; begin
3253: LD_INT 0
3255: PPUSH
3256: PPUSH
3257: PPUSH
3258: PPUSH
// uc_side := 2 ;
3259: LD_ADDR_OWVAR 20
3263: PUSH
3264: LD_INT 2
3266: ST_TO_ADDR
// uc_nation := 2 ;
3267: LD_ADDR_OWVAR 21
3271: PUSH
3272: LD_INT 2
3274: ST_TO_ADDR
// if not Ahmed then
3275: LD_EXP 27
3279: NOT
3280: IFFALSE 3348
// begin InitHc ;
3282: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3286: LD_INT 1
3288: PPUSH
3289: LD_INT 1
3291: PPUSH
3292: LD_EXP 36
3296: PPUSH
3297: LD_EXP 37
3301: PUSH
3302: LD_INT 1
3304: PLUS
3305: PPUSH
3306: CALL_OW 12
3310: PPUSH
3311: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3315: LD_ADDR_OWVAR 26
3319: PUSH
3320: LD_STRING Ahmed Abbasid
3322: ST_TO_ADDR
// Ahmed := CreateHuman ;
3323: LD_ADDR_EXP 27
3327: PUSH
3328: CALL_OW 44
3332: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3333: LD_EXP 27
3337: PPUSH
3338: LD_INT 4
3340: PPUSH
3341: LD_INT 0
3343: PPUSH
3344: CALL_OW 49
// end ; for i = 1 to 4 do
3348: LD_ADDR_VAR 0 2
3352: PUSH
3353: DOUBLE
3354: LD_INT 1
3356: DEC
3357: ST_TO_ADDR
3358: LD_INT 4
3360: PUSH
3361: FOR_TO
3362: IFFALSE 3448
// begin uc_side = 2 ;
3364: LD_ADDR_OWVAR 20
3368: PUSH
3369: LD_INT 2
3371: ST_TO_ADDR
// uc_nation = 2 ;
3372: LD_ADDR_OWVAR 21
3376: PUSH
3377: LD_INT 2
3379: ST_TO_ADDR
// hc_gallery =  ;
3380: LD_ADDR_OWVAR 33
3384: PUSH
3385: LD_STRING 
3387: ST_TO_ADDR
// hc_name =  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3396: LD_INT 0
3398: PPUSH
3399: LD_INT 2
3401: PPUSH
3402: LD_EXP 36
3406: PPUSH
3407: LD_EXP 37
3411: PPUSH
3412: CALL_OW 12
3416: PPUSH
3417: CALL_OW 380
// un = CreateHuman ;
3421: LD_ADDR_VAR 0 3
3425: PUSH
3426: CALL_OW 44
3430: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3431: LD_VAR 0 3
3435: PPUSH
3436: LD_INT 4
3438: PPUSH
3439: LD_INT 0
3441: PPUSH
3442: CALL_OW 49
// end ;
3446: GO 3361
3448: POP
3449: POP
// for i = 1 to 5 do
3450: LD_ADDR_VAR 0 2
3454: PUSH
3455: DOUBLE
3456: LD_INT 1
3458: DEC
3459: ST_TO_ADDR
3460: LD_INT 5
3462: PUSH
3463: FOR_TO
3464: IFFALSE 3550
// begin uc_side = 2 ;
3466: LD_ADDR_OWVAR 20
3470: PUSH
3471: LD_INT 2
3473: ST_TO_ADDR
// uc_nation = 2 ;
3474: LD_ADDR_OWVAR 21
3478: PUSH
3479: LD_INT 2
3481: ST_TO_ADDR
// hc_gallery =  ;
3482: LD_ADDR_OWVAR 33
3486: PUSH
3487: LD_STRING 
3489: ST_TO_ADDR
// hc_name =  ;
3490: LD_ADDR_OWVAR 26
3494: PUSH
3495: LD_STRING 
3497: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3498: LD_INT 0
3500: PPUSH
3501: LD_INT 1
3503: PPUSH
3504: LD_EXP 36
3508: PPUSH
3509: LD_EXP 37
3513: PPUSH
3514: CALL_OW 12
3518: PPUSH
3519: CALL_OW 380
// un = CreateHuman ;
3523: LD_ADDR_VAR 0 3
3527: PUSH
3528: CALL_OW 44
3532: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3533: LD_VAR 0 3
3537: PPUSH
3538: LD_INT 4
3540: PPUSH
3541: LD_INT 0
3543: PPUSH
3544: CALL_OW 49
// end ;
3548: GO 3463
3550: POP
3551: POP
// for i = 1 to 4 do
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: DOUBLE
3558: LD_INT 1
3560: DEC
3561: ST_TO_ADDR
3562: LD_INT 4
3564: PUSH
3565: FOR_TO
3566: IFFALSE 3652
// begin uc_side = 2 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 2
3575: ST_TO_ADDR
// uc_nation = 2 ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 2
3583: ST_TO_ADDR
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_EXP 36
3610: PPUSH
3611: LD_EXP 37
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3635: LD_VAR 0 3
3639: PPUSH
3640: LD_INT 4
3642: PPUSH
3643: LD_INT 0
3645: PPUSH
3646: CALL_OW 49
// end ;
3650: GO 3565
3652: POP
3653: POP
// for i = 1 to 2 do
3654: LD_ADDR_VAR 0 2
3658: PUSH
3659: DOUBLE
3660: LD_INT 1
3662: DEC
3663: ST_TO_ADDR
3664: LD_INT 2
3666: PUSH
3667: FOR_TO
3668: IFFALSE 3798
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3670: LD_ADDR_VAR 0 4
3674: PUSH
3675: LD_INT 22
3677: PUSH
3678: LD_INT 2
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: PUSH
3685: LD_INT 21
3687: PUSH
3688: LD_INT 2
3690: PUSH
3691: EMPTY
3692: LIST
3693: LIST
3694: PUSH
3695: LD_INT 58
3697: PUSH
3698: EMPTY
3699: LIST
3700: PUSH
3701: EMPTY
3702: LIST
3703: LIST
3704: LIST
3705: PPUSH
3706: CALL_OW 69
3710: ST_TO_ADDR
// uc_side = 2 ;
3711: LD_ADDR_OWVAR 20
3715: PUSH
3716: LD_INT 2
3718: ST_TO_ADDR
// uc_nation = 2 ;
3719: LD_ADDR_OWVAR 21
3723: PUSH
3724: LD_INT 2
3726: ST_TO_ADDR
// hc_gallery =  ;
3727: LD_ADDR_OWVAR 33
3731: PUSH
3732: LD_STRING 
3734: ST_TO_ADDR
// hc_name =  ;
3735: LD_ADDR_OWVAR 26
3739: PUSH
3740: LD_STRING 
3742: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3743: LD_INT 0
3745: PPUSH
3746: LD_INT 3
3748: PPUSH
3749: LD_EXP 36
3753: PPUSH
3754: LD_EXP 37
3758: PPUSH
3759: CALL_OW 12
3763: PPUSH
3764: CALL_OW 380
// un = CreateHuman ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: CALL_OW 44
3777: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3778: LD_VAR 0 3
3782: PPUSH
3783: LD_VAR 0 4
3787: PUSH
3788: LD_INT 1
3790: ARRAY
3791: PPUSH
3792: CALL_OW 52
// end ;
3796: GO 3667
3798: POP
3799: POP
// end ;
3800: LD_VAR 0 1
3804: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3805: LD_INT 0
3807: PPUSH
3808: PPUSH
3809: PPUSH
3810: PPUSH
3811: PPUSH
3812: PPUSH
// for i := 1 to 2 do
3813: LD_ADDR_VAR 0 2
3817: PUSH
3818: DOUBLE
3819: LD_INT 1
3821: DEC
3822: ST_TO_ADDR
3823: LD_INT 2
3825: PUSH
3826: FOR_TO
3827: IFFALSE 3953
// begin uc_side = 5 ;
3829: LD_ADDR_OWVAR 20
3833: PUSH
3834: LD_INT 5
3836: ST_TO_ADDR
// uc_nation = 2 ;
3837: LD_ADDR_OWVAR 21
3841: PUSH
3842: LD_INT 2
3844: ST_TO_ADDR
// vc_chassis := 31 ;
3845: LD_ADDR_OWVAR 37
3849: PUSH
3850: LD_INT 31
3852: ST_TO_ADDR
// vc_control := control_rider ;
3853: LD_ADDR_OWVAR 38
3857: PUSH
3858: LD_INT 4
3860: ST_TO_ADDR
// animal := CreateVehicle ;
3861: LD_ADDR_VAR 0 3
3865: PUSH
3866: CALL_OW 45
3870: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3871: LD_VAR 0 3
3875: PPUSH
3876: LD_INT 7
3878: PPUSH
3879: LD_INT 0
3881: PPUSH
3882: CALL_OW 49
// hc_gallery =  ;
3886: LD_ADDR_OWVAR 33
3890: PUSH
3891: LD_STRING 
3893: ST_TO_ADDR
// hc_name =  ;
3894: LD_ADDR_OWVAR 26
3898: PUSH
3899: LD_STRING 
3901: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3902: LD_INT 0
3904: PPUSH
3905: LD_INT 11
3907: PPUSH
3908: LD_EXP 36
3912: PPUSH
3913: LD_EXP 37
3917: PPUSH
3918: CALL_OW 12
3922: PPUSH
3923: CALL_OW 380
// un = CreateHuman ;
3927: LD_ADDR_VAR 0 4
3931: PUSH
3932: CALL_OW 44
3936: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3937: LD_VAR 0 4
3941: PPUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 52
// end ;
3951: GO 3826
3953: POP
3954: POP
// repeat wait ( 0 0$1 ) ;
3955: LD_INT 35
3957: PPUSH
3958: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3962: LD_ADDR_VAR 0 5
3966: PUSH
3967: LD_INT 22
3969: PUSH
3970: LD_INT 1
3972: PUSH
3973: EMPTY
3974: LIST
3975: LIST
3976: PPUSH
3977: CALL_OW 69
3981: PPUSH
3982: LD_VAR 0 2
3986: PPUSH
3987: CALL_OW 74
3991: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3992: LD_ADDR_VAR 0 6
3996: PUSH
3997: LD_INT 22
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: LD_INT 2
4009: PUSH
4010: LD_INT 59
4012: PUSH
4013: EMPTY
4014: LIST
4015: PUSH
4016: LD_INT 21
4018: PUSH
4019: LD_INT 1
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: LD_INT 21
4028: PUSH
4029: LD_INT 2
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: EMPTY
4037: LIST
4038: LIST
4039: LIST
4040: LIST
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: PPUSH
4049: CALL_OW 69
4053: PPUSH
4054: LD_VAR 0 2
4058: PPUSH
4059: CALL_OW 74
4063: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4064: LD_ADDR_VAR 0 2
4068: PUSH
4069: LD_INT 22
4071: PUSH
4072: LD_INT 5
4074: PUSH
4075: EMPTY
4076: LIST
4077: LIST
4078: PUSH
4079: LD_INT 25
4081: PUSH
4082: LD_INT 11
4084: PUSH
4085: EMPTY
4086: LIST
4087: LIST
4088: PUSH
4089: EMPTY
4090: LIST
4091: LIST
4092: PPUSH
4093: CALL_OW 69
4097: PUSH
4098: FOR_IN
4099: IFFALSE 4169
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4101: LD_VAR 0 2
4105: PPUSH
4106: LD_VAR 0 5
4110: PPUSH
4111: CALL_OW 296
4115: PUSH
4116: LD_INT 8
4118: PLUS
4119: PUSH
4120: LD_VAR 0 2
4124: PPUSH
4125: LD_VAR 0 6
4129: PPUSH
4130: CALL_OW 296
4134: LESS
4135: IFFALSE 4153
// ComAttackUnit ( i , target1 ) else
4137: LD_VAR 0 2
4141: PPUSH
4142: LD_VAR 0 5
4146: PPUSH
4147: CALL_OW 115
4151: GO 4167
// ComAttackUnit ( i , target2 ) ;
4153: LD_VAR 0 2
4157: PPUSH
4158: LD_VAR 0 6
4162: PPUSH
4163: CALL_OW 115
// end ;
4167: GO 4098
4169: POP
4170: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 5
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 25
4183: PUSH
4184: LD_INT 11
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PUSH
4200: LD_INT 0
4202: EQUAL
4203: PUSH
4204: LD_INT 22
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PPUSH
4214: CALL_OW 69
4218: PUSH
4219: LD_INT 0
4221: EQUAL
4222: OR
4223: IFFALSE 3955
// end ; end_of_file
4225: LD_VAR 0 1
4229: RET
// every 1 do
4230: GO 4232
4232: DISABLE
// begin InGameOn ;
4233: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 19
4242: PPUSH
4243: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4247: LD_EXP 11
4251: PPUSH
4252: CALL_OW 87
// wait ( 0 0$3 ) ;
4256: LD_INT 105
4258: PPUSH
4259: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4263: LD_EXP 1
4267: PPUSH
4268: CALL_OW 310
4272: PPUSH
4273: CALL_OW 85
// Wait ( 0 0$1 ) ;
4277: LD_INT 35
4279: PPUSH
4280: CALL_OW 67
// if IsOk ( Gary ) then
4284: LD_EXP 10
4288: PPUSH
4289: CALL_OW 302
4293: IFFALSE 4331
// begin Say ( Gary , D2-Gary-1 ) ;
4295: LD_EXP 10
4299: PPUSH
4300: LD_STRING D2-Gary-1
4302: PPUSH
4303: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4307: LD_EXP 1
4311: PPUSH
4312: LD_STRING D2-JMM-1
4314: PPUSH
4315: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4319: LD_EXP 10
4323: PPUSH
4324: LD_STRING D2-Gary-2
4326: PPUSH
4327: CALL_OW 88
// end ; InGameOff ;
4331: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4335: LD_STRING M1
4337: PPUSH
4338: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4342: LD_INT 38
4344: PPUSH
4345: LD_INT 1
4347: PPUSH
4348: LD_INT 100
4350: PPUSH
4351: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4355: LD_INT 47
4357: PPUSH
4358: LD_INT 1
4360: PPUSH
4361: LD_INT 50
4363: PPUSH
4364: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4368: LD_INT 47
4370: PPUSH
4371: LD_INT 3
4373: PPUSH
4374: LD_INT 50
4376: PPUSH
4377: CALL_OW 291
// SaveForQuickRestart ;
4381: CALL_OW 22
// end ;
4385: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4386: LD_EXP 1
4390: PPUSH
4391: LD_EXP 11
4395: PPUSH
4396: CALL_OW 296
4400: PUSH
4401: LD_INT 15
4403: LESS
4404: IFFALSE 4880
4406: GO 4408
4408: DISABLE
// begin InGameOn ;
4409: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4413: LD_EXP 1
4417: PPUSH
4418: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4422: LD_EXP 1
4426: PPUSH
4427: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4431: LD_EXP 1
4435: PPUSH
4436: LD_EXP 11
4440: PPUSH
4441: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4445: LD_INT 35
4447: PPUSH
4448: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4452: LD_EXP 11
4456: PUSH
4457: LD_EXP 13
4461: PUSH
4462: LD_EXP 12
4466: PUSH
4467: LD_EXP 14
4471: PUSH
4472: LD_EXP 8
4476: PUSH
4477: EMPTY
4478: LIST
4479: LIST
4480: LIST
4481: LIST
4482: LIST
4483: PPUSH
4484: LD_EXP 1
4488: PPUSH
4489: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4493: LD_EXP 1
4497: PPUSH
4498: LD_EXP 11
4502: PPUSH
4503: CALL_OW 296
4507: PUSH
4508: LD_INT 5
4510: LESS
4511: IFFALSE 4445
// ComTurnUnit ( JMM , Simms ) ;
4513: LD_EXP 1
4517: PPUSH
4518: LD_EXP 11
4522: PPUSH
4523: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4527: LD_EXP 11
4531: PUSH
4532: LD_EXP 13
4536: PUSH
4537: LD_EXP 12
4541: PUSH
4542: LD_EXP 14
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: PPUSH
4553: LD_EXP 1
4557: PPUSH
4558: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4562: LD_EXP 1
4566: PUSH
4567: LD_EXP 11
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4580: LD_EXP 11
4584: PPUSH
4585: LD_STRING D2a-Sim-1
4587: PPUSH
4588: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4592: LD_EXP 1
4596: PPUSH
4597: LD_STRING D2a-JMM-1
4599: PPUSH
4600: CALL_OW 88
// if IsOk ( Joan ) then
4604: LD_EXP 13
4608: PPUSH
4609: CALL_OW 302
4613: IFFALSE 4665
// begin ComTurnUnit ( JMM , Joan ) ;
4615: LD_EXP 1
4619: PPUSH
4620: LD_EXP 13
4624: PPUSH
4625: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4629: LD_EXP 13
4633: PPUSH
4634: LD_STRING D2b-Joan-1
4636: PPUSH
4637: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4641: LD_EXP 1
4645: PPUSH
4646: LD_STRING D2b-JMM-1
4648: PPUSH
4649: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4653: LD_EXP 13
4657: PPUSH
4658: LD_STRING D2b-Joan-2
4660: PPUSH
4661: CALL_OW 88
// end ; if IsOk ( Denis ) then
4665: LD_EXP 12
4669: PPUSH
4670: CALL_OW 302
4674: IFFALSE 4702
// begin ComTurnUnit ( JMM , Denis ) ;
4676: LD_EXP 1
4680: PPUSH
4681: LD_EXP 12
4685: PPUSH
4686: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4690: LD_EXP 12
4694: PPUSH
4695: LD_STRING D2c-Den-1
4697: PPUSH
4698: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
4702: LD_EXP 8
4706: PPUSH
4707: CALL_OW 302
4711: PUSH
4712: LD_STRING 08_Kikuchi
4714: PPUSH
4715: CALL_OW 28
4719: NOT
4720: AND
4721: IFFALSE 4790
// begin repeat wait ( 0 0$1 ) ;
4723: LD_INT 35
4725: PPUSH
4726: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4730: LD_EXP 8
4734: PPUSH
4735: LD_EXP 1
4739: PPUSH
4740: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4744: LD_EXP 1
4748: PPUSH
4749: LD_EXP 8
4753: PPUSH
4754: CALL_OW 296
4758: PUSH
4759: LD_INT 5
4761: LESS
4762: IFFALSE 4723
// ComTurnUnit ( JMM , Kikuchi ) ;
4764: LD_EXP 1
4768: PPUSH
4769: LD_EXP 8
4773: PPUSH
4774: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4778: LD_EXP 8
4782: PPUSH
4783: LD_STRING D3b-Yam-1
4785: PPUSH
4786: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4790: LD_EXP 14
4794: PPUSH
4795: CALL_OW 302
4799: IFFALSE 4839
// begin ComTurnUnit ( JMM , Khatam ) ;
4801: LD_EXP 1
4805: PPUSH
4806: LD_EXP 14
4810: PPUSH
4811: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4815: LD_EXP 1
4819: PPUSH
4820: LD_STRING D2c-JMM-1
4822: PPUSH
4823: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4827: LD_EXP 14
4831: PPUSH
4832: LD_STRING D2c-Khat-1
4834: PPUSH
4835: CALL_OW 88
// end ; InGameOff ;
4839: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4843: LD_INT 22
4845: PUSH
4846: LD_INT 4
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PPUSH
4853: CALL_OW 69
4857: PPUSH
4858: LD_INT 1
4860: PPUSH
4861: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4865: LD_STRING M1a
4867: PPUSH
4868: CALL_OW 337
// joinEpsilon = 1 ;
4872: LD_ADDR_EXP 29
4876: PUSH
4877: LD_INT 1
4879: ST_TO_ADDR
// end ;
4880: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4881: LD_INT 38
4883: PPUSH
4884: LD_INT 1
4886: PPUSH
4887: CALL_OW 289
4891: PUSH
4892: LD_INT 0
4894: EQUAL
4895: PUSH
4896: LD_INT 47
4898: PPUSH
4899: LD_INT 1
4901: PPUSH
4902: CALL_OW 289
4906: PUSH
4907: LD_INT 0
4909: EQUAL
4910: AND
4911: PUSH
4912: LD_INT 47
4914: PPUSH
4915: LD_INT 2
4917: PPUSH
4918: CALL_OW 289
4922: PUSH
4923: LD_INT 0
4925: EQUAL
4926: AND
4927: IFFALSE 4952
4929: GO 4931
4931: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4932: LD_INT 38
4934: PUSH
4935: LD_INT 47
4937: PUSH
4938: EMPTY
4939: LIST
4940: LIST
4941: PPUSH
4942: LD_INT 62
4944: PPUSH
4945: LD_INT 6
4947: PPUSH
4948: CALL_OW 111
4952: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4953: LD_EXP 61
4957: PUSH
4958: LD_INT 1
4960: EQUAL
4961: IFFALSE 6093
4963: GO 4965
4965: DISABLE
4966: LD_INT 0
4968: PPUSH
4969: PPUSH
4970: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4971: LD_ADDR_VAR 0 1
4975: PUSH
4976: LD_INT 22
4978: PUSH
4979: LD_INT 1
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 25
4988: PUSH
4989: LD_INT 4
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 26
4998: PUSH
4999: LD_INT 1
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PUSH
5006: EMPTY
5007: LIST
5008: LIST
5009: LIST
5010: PPUSH
5011: CALL_OW 69
5015: PUSH
5016: LD_EXP 1
5020: PUSH
5021: LD_EXP 2
5025: PUSH
5026: LD_EXP 3
5030: PUSH
5031: LD_EXP 4
5035: PUSH
5036: LD_EXP 5
5040: PUSH
5041: LD_EXP 6
5045: PUSH
5046: LD_EXP 7
5050: PUSH
5051: LD_EXP 8
5055: PUSH
5056: LD_EXP 9
5060: PUSH
5061: LD_EXP 10
5065: PUSH
5066: LD_EXP 11
5070: PUSH
5071: LD_EXP 12
5075: PUSH
5076: LD_EXP 13
5080: PUSH
5081: LD_EXP 14
5085: PUSH
5086: LD_EXP 15
5090: PUSH
5091: LD_EXP 16
5095: PUSH
5096: LD_EXP 17
5100: PUSH
5101: LD_EXP 18
5105: PUSH
5106: LD_EXP 19
5110: PUSH
5111: LD_EXP 24
5115: PUSH
5116: EMPTY
5117: LIST
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: LIST
5123: LIST
5124: LIST
5125: LIST
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: LIST
5134: LIST
5135: LIST
5136: LIST
5137: DIFF
5138: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_INT 22
5146: PUSH
5147: LD_INT 1
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PUSH
5154: LD_INT 26
5156: PUSH
5157: LD_INT 1
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: PUSH
5164: LD_INT 2
5166: PUSH
5167: LD_INT 25
5169: PUSH
5170: LD_INT 1
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 25
5179: PUSH
5180: LD_INT 2
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 25
5189: PUSH
5190: LD_INT 3
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: LIST
5201: LIST
5202: PUSH
5203: EMPTY
5204: LIST
5205: LIST
5206: LIST
5207: PPUSH
5208: CALL_OW 69
5212: PUSH
5213: LD_EXP 1
5217: PUSH
5218: LD_EXP 2
5222: PUSH
5223: LD_EXP 3
5227: PUSH
5228: LD_EXP 4
5232: PUSH
5233: LD_EXP 5
5237: PUSH
5238: LD_EXP 6
5242: PUSH
5243: LD_EXP 7
5247: PUSH
5248: LD_EXP 8
5252: PUSH
5253: LD_EXP 9
5257: PUSH
5258: LD_EXP 10
5262: PUSH
5263: LD_EXP 11
5267: PUSH
5268: LD_EXP 12
5272: PUSH
5273: LD_EXP 13
5277: PUSH
5278: LD_EXP 14
5282: PUSH
5283: LD_EXP 15
5287: PUSH
5288: LD_EXP 16
5292: PUSH
5293: LD_EXP 17
5297: PUSH
5298: LD_EXP 18
5302: PUSH
5303: LD_EXP 19
5307: PUSH
5308: LD_EXP 24
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: LIST
5318: LIST
5319: LIST
5320: LIST
5321: LIST
5322: LIST
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: LIST
5331: LIST
5332: LIST
5333: LIST
5334: DIFF
5335: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5336: LD_EXP 10
5340: PUSH
5341: LD_VAR 0 2
5345: OR
5346: PUSH
5347: LD_EXP 17
5351: PUSH
5352: LD_VAR 0 1
5356: OR
5357: AND
5358: IFFALSE 5577
// begin DialogueOn ;
5360: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5364: LD_EXP 17
5368: PPUSH
5369: CALL_OW 302
5373: IFFALSE 5389
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5375: LD_EXP 17
5379: PPUSH
5380: LD_STRING D3-Sci1-1
5382: PPUSH
5383: CALL_OW 88
5387: GO 5401
// Say ( tmp1 , D3-Sci1-1 ) ;
5389: LD_VAR 0 1
5393: PPUSH
5394: LD_STRING D3-Sci1-1
5396: PPUSH
5397: CALL_OW 88
// if IsOk ( Gary ) then
5401: LD_EXP 10
5405: PPUSH
5406: CALL_OW 302
5410: IFFALSE 5426
// Say ( Gary , D3-Gary-1 ) else
5412: LD_EXP 10
5416: PPUSH
5417: LD_STRING D3-Gary-1
5419: PPUSH
5420: CALL_OW 88
5424: GO 5438
// Say ( tmp2 , D3-Gary-1 ) ;
5426: LD_VAR 0 2
5430: PPUSH
5431: LD_STRING D3-Gary-1
5433: PPUSH
5434: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5438: LD_EXP 17
5442: PPUSH
5443: CALL_OW 302
5447: IFFALSE 5463
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5449: LD_EXP 17
5453: PPUSH
5454: LD_STRING D3-Sci1-2
5456: PPUSH
5457: CALL_OW 88
5461: GO 5475
// Say ( tmp1 , D3-Sci1-2 ) ;
5463: LD_VAR 0 1
5467: PPUSH
5468: LD_STRING D3-Sci1-2
5470: PPUSH
5471: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_STRING D3-JMM-2
5482: PPUSH
5483: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5487: LD_EXP 17
5491: PPUSH
5492: CALL_OW 302
5496: IFFALSE 5512
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5498: LD_EXP 17
5502: PPUSH
5503: LD_STRING D3-Sci1-3
5505: PPUSH
5506: CALL_OW 88
5510: GO 5524
// Say ( tmp1 , D3-Sci1-3 ) ;
5512: LD_VAR 0 1
5516: PPUSH
5517: LD_STRING D3-Sci1-3
5519: PPUSH
5520: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5524: LD_EXP 1
5528: PPUSH
5529: LD_STRING D3-JMM-3
5531: PPUSH
5532: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5536: LD_EXP 17
5540: PPUSH
5541: CALL_OW 302
5545: IFFALSE 5561
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5547: LD_EXP 17
5551: PPUSH
5552: LD_STRING D3-Sci1-4
5554: PPUSH
5555: CALL_OW 88
5559: GO 5573
// Say ( tmp1 , D3-Sci1-4 ) ;
5561: LD_VAR 0 1
5565: PPUSH
5566: LD_STRING D3-Sci1-4
5568: PPUSH
5569: CALL_OW 88
// DialogueOff ;
5573: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5577: LD_INT 12
5579: PPUSH
5580: LD_INT 1
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5590: LD_INT 32
5592: PPUSH
5593: LD_INT 1
5595: PPUSH
5596: LD_INT 1
5598: PPUSH
5599: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5603: LD_INT 12
5605: PPUSH
5606: LD_INT 1
5608: PPUSH
5609: LD_INT 1
5611: PPUSH
5612: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5616: LD_INT 33
5618: PPUSH
5619: LD_INT 1
5621: PPUSH
5622: LD_INT 1
5624: PPUSH
5625: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5629: LD_STRING M2
5631: PPUSH
5632: CALL_OW 337
// wait ( 3 3$0 ) ;
5636: LD_INT 6300
5638: PPUSH
5639: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5643: LD_INT 35
5645: PPUSH
5646: CALL_OW 67
// until not InBattle ( 1 ) ;
5650: LD_INT 1
5652: PPUSH
5653: CALL_OW 463
5657: NOT
5658: IFFALSE 5643
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5660: LD_EXP 11
5664: PPUSH
5665: CALL_OW 302
5669: PUSH
5670: LD_EXP 17
5674: PPUSH
5675: CALL_OW 302
5679: AND
5680: IFFALSE 5849
// begin DialogueOn ;
5682: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5686: LD_EXP 11
5690: PPUSH
5691: LD_STRING D3a-Sim-1
5693: PPUSH
5694: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5698: LD_EXP 17
5702: PPUSH
5703: LD_STRING D3a-Sci1-1
5705: PPUSH
5706: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5710: LD_EXP 11
5714: PPUSH
5715: LD_STRING D3a-Sim-2
5717: PPUSH
5718: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5722: LD_EXP 17
5726: PPUSH
5727: LD_STRING D3a-Sci1-2
5729: PPUSH
5730: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5734: LD_EXP 11
5738: PPUSH
5739: LD_STRING D3a-Sim-3
5741: PPUSH
5742: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5746: LD_EXP 17
5750: PPUSH
5751: LD_STRING D3a-Sci1-3
5753: PPUSH
5754: CALL_OW 88
// if IsOK ( Joan ) then
5758: LD_EXP 13
5762: PPUSH
5763: CALL_OW 302
5767: IFFALSE 5783
// Say ( Simms , D3a-Sim-4 ) else
5769: LD_EXP 11
5773: PPUSH
5774: LD_STRING D3a-Sim-4
5776: PPUSH
5777: CALL_OW 88
5781: GO 5795
// Say ( Simms , D3a-Sim-4a ) ;
5783: LD_EXP 11
5787: PPUSH
5788: LD_STRING D3a-Sim-4a
5790: PPUSH
5791: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5795: LD_EXP 17
5799: PPUSH
5800: LD_STRING D3a-Sci1-4
5802: PPUSH
5803: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5807: LD_EXP 11
5811: PPUSH
5812: LD_STRING D3a-Sim-5
5814: PPUSH
5815: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5819: LD_EXP 17
5823: PPUSH
5824: LD_STRING D3a-Sci1-5
5826: PPUSH
5827: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5831: LD_EXP 11
5835: PPUSH
5836: LD_STRING D3a-Sim-6
5838: PPUSH
5839: CALL_OW 88
// DialogueOff ;
5843: CALL_OW 7
// end else
5847: GO 6093
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5849: LD_ADDR_VAR 0 3
5853: PUSH
5854: LD_INT 22
5856: PUSH
5857: LD_INT 1
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 25
5866: PUSH
5867: LD_INT 4
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: PUSH
5883: LD_EXP 11
5887: PUSH
5888: LD_EXP 14
5892: PUSH
5893: EMPTY
5894: LIST
5895: LIST
5896: DIFF
5897: ST_TO_ADDR
// if tmp3 > 0 then
5898: LD_VAR 0 3
5902: PUSH
5903: LD_INT 0
5905: GREATER
5906: IFFALSE 6093
// begin DialogueOn ;
5908: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5912: LD_EXP 11
5916: PPUSH
5917: LD_STRING D3a-Sim-1
5919: PPUSH
5920: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5924: LD_VAR 0 3
5928: PUSH
5929: LD_INT 1
5931: ARRAY
5932: PPUSH
5933: LD_STRING D3a-Sci1-1
5935: PPUSH
5936: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5940: LD_EXP 11
5944: PPUSH
5945: LD_STRING D3a-Sim-2
5947: PPUSH
5948: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5952: LD_VAR 0 3
5956: PUSH
5957: LD_INT 1
5959: ARRAY
5960: PPUSH
5961: LD_STRING D3a-Sci1-2
5963: PPUSH
5964: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5968: LD_EXP 11
5972: PPUSH
5973: LD_STRING D3a-Sim-3
5975: PPUSH
5976: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5980: LD_VAR 0 3
5984: PUSH
5985: LD_INT 1
5987: ARRAY
5988: PPUSH
5989: LD_STRING D3a-Sci1-3
5991: PPUSH
5992: CALL_OW 88
// if IsOK ( Joan ) then
5996: LD_EXP 13
6000: PPUSH
6001: CALL_OW 302
6005: IFFALSE 6021
// Say ( Simms , D3a-Sim-4 ) else
6007: LD_EXP 11
6011: PPUSH
6012: LD_STRING D3a-Sim-4
6014: PPUSH
6015: CALL_OW 88
6019: GO 6033
// Say ( Simms , D3a-Sim-4a ) ;
6021: LD_EXP 11
6025: PPUSH
6026: LD_STRING D3a-Sim-4a
6028: PPUSH
6029: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6033: LD_VAR 0 3
6037: PUSH
6038: LD_INT 1
6040: ARRAY
6041: PPUSH
6042: LD_STRING D3a-Sci1-4
6044: PPUSH
6045: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6049: LD_EXP 11
6053: PPUSH
6054: LD_STRING D3a-Sim-5
6056: PPUSH
6057: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6061: LD_VAR 0 3
6065: PUSH
6066: LD_INT 1
6068: ARRAY
6069: PPUSH
6070: LD_STRING D3a-Sci1-5
6072: PPUSH
6073: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6077: LD_EXP 11
6081: PPUSH
6082: LD_STRING D3a-Sim-6
6084: PPUSH
6085: CALL_OW 88
// DialogueOff ;
6089: CALL_OW 7
// end ; end ; end ;
6093: PPOPN 3
6095: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6096: LD_EXP 29
6100: PUSH
6101: LD_INT 1
6103: EQUAL
6104: IFFALSE 6424
6106: GO 6108
6108: DISABLE
6109: LD_INT 0
6111: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6112: LD_EXP 18
6116: PPUSH
6117: LD_STRING D4-FSol1-1
6119: PPUSH
6120: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6124: LD_STRING M3
6126: PPUSH
6127: CALL_OW 337
// PrepareRussians ;
6131: CALL 2736 0 0
// rnd = Rand ( 1 , 100 ) ;
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 1
6142: PPUSH
6143: LD_INT 100
6145: PPUSH
6146: CALL_OW 12
6150: ST_TO_ADDR
// if difficulty = 1 then
6151: LD_OWVAR 67
6155: PUSH
6156: LD_INT 1
6158: EQUAL
6159: IFFALSE 6242
// begin if rnd > 0 and rnd < 51 then
6161: LD_VAR 0 1
6165: PUSH
6166: LD_INT 0
6168: GREATER
6169: PUSH
6170: LD_VAR 0 1
6174: PUSH
6175: LD_INT 51
6177: LESS
6178: AND
6179: IFFALSE 6188
// BuildRussianBase ( 2 ) ;
6181: LD_INT 2
6183: PPUSH
6184: CALL 10316 0 1
// if rnd > 50 and rnd < 81 then
6188: LD_VAR 0 1
6192: PUSH
6193: LD_INT 50
6195: GREATER
6196: PUSH
6197: LD_VAR 0 1
6201: PUSH
6202: LD_INT 81
6204: LESS
6205: AND
6206: IFFALSE 6215
// BuildRussianBase ( 1 ) ;
6208: LD_INT 1
6210: PPUSH
6211: CALL 10316 0 1
// if rnd > 80 and rnd < 101 then
6215: LD_VAR 0 1
6219: PUSH
6220: LD_INT 80
6222: GREATER
6223: PUSH
6224: LD_VAR 0 1
6228: PUSH
6229: LD_INT 101
6231: LESS
6232: AND
6233: IFFALSE 6242
// BuildRussianBase ( 3 ) ;
6235: LD_INT 3
6237: PPUSH
6238: CALL 10316 0 1
// end ; if difficulty = 2 then
6242: LD_OWVAR 67
6246: PUSH
6247: LD_INT 2
6249: EQUAL
6250: IFFALSE 6333
// begin if rnd > 0 and rnd < 61 then
6252: LD_VAR 0 1
6256: PUSH
6257: LD_INT 0
6259: GREATER
6260: PUSH
6261: LD_VAR 0 1
6265: PUSH
6266: LD_INT 61
6268: LESS
6269: AND
6270: IFFALSE 6279
// BuildRussianBase ( 2 ) ;
6272: LD_INT 2
6274: PPUSH
6275: CALL 10316 0 1
// if rnd > 60 and rnd < 81 then
6279: LD_VAR 0 1
6283: PUSH
6284: LD_INT 60
6286: GREATER
6287: PUSH
6288: LD_VAR 0 1
6292: PUSH
6293: LD_INT 81
6295: LESS
6296: AND
6297: IFFALSE 6306
// BuildRussianBase ( 1 ) ;
6299: LD_INT 1
6301: PPUSH
6302: CALL 10316 0 1
// if rnd > 80 and rnd < 101 then
6306: LD_VAR 0 1
6310: PUSH
6311: LD_INT 80
6313: GREATER
6314: PUSH
6315: LD_VAR 0 1
6319: PUSH
6320: LD_INT 101
6322: LESS
6323: AND
6324: IFFALSE 6333
// BuildRussianBase ( 3 ) ;
6326: LD_INT 3
6328: PPUSH
6329: CALL 10316 0 1
// end ; if difficulty = 3 then
6333: LD_OWVAR 67
6337: PUSH
6338: LD_INT 3
6340: EQUAL
6341: IFFALSE 6424
// begin if rnd > 0 and rnd < 71 then
6343: LD_VAR 0 1
6347: PUSH
6348: LD_INT 0
6350: GREATER
6351: PUSH
6352: LD_VAR 0 1
6356: PUSH
6357: LD_INT 71
6359: LESS
6360: AND
6361: IFFALSE 6370
// BuildRussianBase ( 3 ) ;
6363: LD_INT 3
6365: PPUSH
6366: CALL 10316 0 1
// if rnd > 70 and rnd < 81 then
6370: LD_VAR 0 1
6374: PUSH
6375: LD_INT 70
6377: GREATER
6378: PUSH
6379: LD_VAR 0 1
6383: PUSH
6384: LD_INT 81
6386: LESS
6387: AND
6388: IFFALSE 6397
// BuildRussianBase ( 2 ) ;
6390: LD_INT 2
6392: PPUSH
6393: CALL 10316 0 1
// if rnd > 80 and rnd < 101 then
6397: LD_VAR 0 1
6401: PUSH
6402: LD_INT 80
6404: GREATER
6405: PUSH
6406: LD_VAR 0 1
6410: PUSH
6411: LD_INT 101
6413: LESS
6414: AND
6415: IFFALSE 6424
// BuildRussianBase ( 1 ) ;
6417: LD_INT 1
6419: PPUSH
6420: CALL 10316 0 1
// end ; end ;
6424: PPOPN 1
6426: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6427: LD_INT 54
6429: PPUSH
6430: LD_INT 1
6432: PPUSH
6433: CALL_OW 321
6437: PUSH
6438: LD_INT 2
6440: EQUAL
6441: PUSH
6442: LD_INT 21
6444: PPUSH
6445: LD_INT 1
6447: PPUSH
6448: CALL_OW 321
6452: PUSH
6453: LD_INT 2
6455: EQUAL
6456: OR
6457: PUSH
6458: LD_INT 22
6460: PPUSH
6461: LD_INT 1
6463: PPUSH
6464: CALL_OW 321
6468: PUSH
6469: LD_INT 2
6471: EQUAL
6472: OR
6473: IFFALSE 6785
6475: GO 6477
6477: DISABLE
6478: LD_INT 0
6480: PPUSH
6481: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6482: LD_EXP 17
6486: PPUSH
6487: CALL_OW 302
6491: IFFALSE 6505
// tmp := DeltaDoctor else
6493: LD_ADDR_VAR 0 2
6497: PUSH
6498: LD_EXP 17
6502: ST_TO_ADDR
6503: GO 6515
// tmp := Denis ;
6505: LD_ADDR_VAR 0 2
6509: PUSH
6510: LD_EXP 12
6514: ST_TO_ADDR
// if tmp then
6515: LD_VAR 0 2
6519: IFFALSE 6613
// begin DialogueOn ;
6521: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6525: LD_EXP 1
6529: PPUSH
6530: LD_STRING D6-JMM-1
6532: PPUSH
6533: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6537: LD_VAR 0 2
6541: PPUSH
6542: LD_STRING D6-Sci1-1
6544: PPUSH
6545: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6549: LD_EXP 1
6553: PPUSH
6554: LD_STRING D6-JMM-2
6556: PPUSH
6557: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6561: LD_VAR 0 2
6565: PPUSH
6566: LD_STRING D6-Sci1-2
6568: PPUSH
6569: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6573: LD_EXP 1
6577: PPUSH
6578: LD_STRING D6-JMM-3
6580: PPUSH
6581: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6585: LD_VAR 0 2
6589: PPUSH
6590: LD_STRING D6-Sci1-3
6592: PPUSH
6593: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6597: LD_EXP 1
6601: PPUSH
6602: LD_STRING D6-JMM-4
6604: PPUSH
6605: CALL_OW 88
// DialogueOff ;
6609: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6613: LD_INT 1050
6615: PPUSH
6616: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6620: LD_EXP 49
6624: PUSH
6625: LD_INT 0
6627: EQUAL
6628: PUSH
6629: LD_EXP 14
6633: PPUSH
6634: CALL_OW 302
6638: AND
6639: IFFALSE 6697
// begin DialogueOn ;
6641: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6645: LD_EXP 27
6649: PPUSH
6650: LD_STRING D5-Ar1-1
6652: PPUSH
6653: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6657: LD_EXP 26
6661: PPUSH
6662: LD_STRING D5-Diet-1
6664: PPUSH
6665: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6669: LD_EXP 27
6673: PPUSH
6674: LD_STRING D5-Ar1-2
6676: PPUSH
6677: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6681: LD_EXP 26
6685: PPUSH
6686: LD_STRING D5-Diet-2
6688: PPUSH
6689: CALL_OW 88
// DialogueOff ;
6693: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6697: LD_INT 2100
6699: PUSH
6700: LD_INT 3150
6702: PUSH
6703: LD_INT 4200
6705: PUSH
6706: LD_INT 5250
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: PUSH
6715: LD_INT 1
6717: PPUSH
6718: LD_INT 4
6720: PPUSH
6721: CALL_OW 12
6725: ARRAY
6726: PPUSH
6727: CALL_OW 67
// if arabianTrait = 0 then
6731: LD_EXP 49
6735: PUSH
6736: LD_INT 0
6738: EQUAL
6739: IFFALSE 6785
// begin arabianTrait = 1 ;
6741: LD_ADDR_EXP 49
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6749: LD_INT 2
6751: PPUSH
6752: LD_INT 3
6754: PPUSH
6755: LD_INT 1
6757: PPUSH
6758: LD_INT 1
6760: PPUSH
6761: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6765: LD_INT 2
6767: PPUSH
6768: LD_INT 6
6770: PPUSH
6771: LD_INT 1
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 80
// PrepareArabianTrait ;
6781: CALL 6788 0 0
// end ; end ;
6785: PPOPN 2
6787: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6788: LD_INT 0
6790: PPUSH
6791: PPUSH
6792: PPUSH
6793: PPUSH
6794: PPUSH
6795: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6796: LD_INT 22
6798: PUSH
6799: LD_INT 2
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 25
6808: PUSH
6809: LD_INT 4
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PPUSH
6820: CALL_OW 69
6824: PPUSH
6825: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6829: LD_INT 22
6831: PUSH
6832: LD_INT 2
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: LD_INT 25
6841: PUSH
6842: LD_INT 3
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PPUSH
6853: CALL_OW 69
6857: PPUSH
6858: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6862: LD_EXP 26
6866: PPUSH
6867: LD_INT 8
6869: PPUSH
6870: CALL_OW 336
// wait ( 0 0$3 ) ;
6874: LD_INT 105
6876: PPUSH
6877: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6881: LD_INT 76
6883: PPUSH
6884: LD_INT 19
6886: PPUSH
6887: CALL_OW 84
// DialogueOn ;
6891: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6895: LD_INT 22
6897: PUSH
6898: LD_INT 1
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 26
6907: PUSH
6908: LD_INT 1
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 2
6917: PUSH
6918: LD_INT 25
6920: PUSH
6921: LD_INT 1
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PUSH
6928: LD_INT 25
6930: PUSH
6931: LD_INT 2
6933: PUSH
6934: EMPTY
6935: LIST
6936: LIST
6937: PUSH
6938: LD_INT 25
6940: PUSH
6941: LD_INT 3
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PUSH
6948: LD_INT 25
6950: PUSH
6951: LD_INT 4
6953: PUSH
6954: EMPTY
6955: LIST
6956: LIST
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 5
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 69
6985: PPUSH
6986: LD_STRING D8-Sol1-1
6988: PPUSH
6989: LD_STRING D8-Sol1-1
6991: PPUSH
6992: CALL 9658 0 3
// if IsOK ( DeltaDoctor ) then
6996: LD_EXP 17
7000: PPUSH
7001: CALL_OW 302
7005: IFFALSE 7021
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7007: LD_EXP 17
7011: PPUSH
7012: LD_STRING D8-Sci1-1
7014: PPUSH
7015: CALL_OW 88
7019: GO 7122
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7021: LD_INT 22
7023: PUSH
7024: LD_INT 1
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PUSH
7031: LD_INT 26
7033: PUSH
7034: LD_INT 1
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 2
7043: PUSH
7044: LD_INT 25
7046: PUSH
7047: LD_INT 1
7049: PUSH
7050: EMPTY
7051: LIST
7052: LIST
7053: PUSH
7054: LD_INT 25
7056: PUSH
7057: LD_INT 2
7059: PUSH
7060: EMPTY
7061: LIST
7062: LIST
7063: PUSH
7064: LD_INT 25
7066: PUSH
7067: LD_INT 3
7069: PUSH
7070: EMPTY
7071: LIST
7072: LIST
7073: PUSH
7074: LD_INT 25
7076: PUSH
7077: LD_INT 4
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 25
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: PUSH
7102: EMPTY
7103: LIST
7104: LIST
7105: LIST
7106: PPUSH
7107: CALL_OW 69
7111: PPUSH
7112: LD_STRING D8-Sol1-1
7114: PPUSH
7115: LD_STRING D8-Sol1-1
7117: PPUSH
7118: CALL 9658 0 3
// Say ( JMM , D8-JMM-1 ) ;
7122: LD_EXP 1
7126: PPUSH
7127: LD_STRING D8-JMM-1
7129: PPUSH
7130: CALL_OW 88
// DialogueOff ;
7134: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7138: LD_INT 2
7140: PPUSH
7141: LD_INT 2
7143: PPUSH
7144: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7148: LD_INT 1
7150: PPUSH
7151: LD_INT 2
7153: PPUSH
7154: LD_INT 2
7156: PPUSH
7157: LD_INT 1
7159: PPUSH
7160: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7164: LD_INT 3
7166: PPUSH
7167: LD_INT 2
7169: PPUSH
7170: LD_INT 1
7172: PPUSH
7173: LD_INT 1
7175: PPUSH
7176: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7180: LD_EXP 26
7184: PPUSH
7185: LD_INT 1
7187: PPUSH
7188: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7192: LD_STRING M4
7194: PPUSH
7195: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7199: LD_ADDR_VAR 0 5
7203: PUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 2
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 2
7226: PUSH
7227: LD_INT 25
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 25
7239: PUSH
7240: LD_INT 8
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 15
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: LIST
7267: PPUSH
7268: CALL_OW 69
7272: PUSH
7273: LD_EXP 26
7277: PUSH
7278: EMPTY
7279: LIST
7280: DIFF
7281: ST_TO_ADDR
// if IsLive ( Khatam ) then
7282: LD_EXP 14
7286: PPUSH
7287: CALL_OW 300
7291: IFFALSE 7305
// DoNotAttack ( 2 , Khatam ) ;
7293: LD_INT 2
7295: PPUSH
7296: LD_EXP 14
7300: PPUSH
7301: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7305: LD_VAR 0 5
7309: PPUSH
7310: CALL_OW 122
// wait ( 0 0$1 ) ;
7314: LD_INT 35
7316: PPUSH
7317: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
7321: LD_VAR 0 5
7325: PPUSH
7326: LD_INT 84
7328: PPUSH
7329: LD_INT 22
7331: PPUSH
7332: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7336: LD_VAR 0 5
7340: PPUSH
7341: LD_INT 82
7343: PPUSH
7344: LD_INT 5
7346: PPUSH
7347: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7351: LD_VAR 0 5
7355: PPUSH
7356: LD_INT 95
7358: PPUSH
7359: LD_INT 12
7361: PPUSH
7362: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7366: LD_VAR 0 5
7370: PPUSH
7371: LD_INT 102
7373: PPUSH
7374: LD_INT 11
7376: PPUSH
7377: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7381: LD_VAR 0 5
7385: PPUSH
7386: LD_INT 116
7388: PPUSH
7389: LD_INT 15
7391: PPUSH
7392: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7396: LD_VAR 0 5
7400: PPUSH
7401: LD_INT 140
7403: PPUSH
7404: LD_INT 25
7406: PPUSH
7407: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7411: LD_VAR 0 5
7415: PPUSH
7416: LD_INT 160
7418: PPUSH
7419: LD_INT 56
7421: PPUSH
7422: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7426: LD_VAR 0 5
7430: PPUSH
7431: LD_INT 189
7433: PPUSH
7434: LD_INT 79
7436: PPUSH
7437: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
7441: LD_ADDR_VAR 0 6
7445: PUSH
7446: LD_INT 22
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 21
7458: PUSH
7459: LD_INT 1
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PUSH
7466: LD_INT 2
7468: PUSH
7469: LD_INT 25
7471: PUSH
7472: LD_INT 2
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: LD_INT 25
7481: PUSH
7482: LD_INT 3
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 25
7491: PUSH
7492: LD_INT 4
7494: PUSH
7495: EMPTY
7496: LIST
7497: LIST
7498: PUSH
7499: LD_INT 25
7501: PUSH
7502: LD_INT 12
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: PUSH
7509: LD_INT 25
7511: PUSH
7512: LD_INT 16
7514: PUSH
7515: EMPTY
7516: LIST
7517: LIST
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: LIST
7531: PPUSH
7532: CALL_OW 69
7536: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7537: LD_ADDR_VAR 0 6
7541: PUSH
7542: LD_VAR 0 6
7546: PUSH
7547: LD_EXP 26
7551: ADD
7552: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7553: LD_INT 350
7555: PPUSH
7556: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7560: LD_VAR 0 6
7564: PPUSH
7565: CALL_OW 122
// wait ( 0 0$1 ) ;
7569: LD_INT 35
7571: PPUSH
7572: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
7576: LD_VAR 0 6
7580: PPUSH
7581: LD_INT 81
7583: PPUSH
7584: LD_INT 5
7586: PPUSH
7587: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7591: LD_VAR 0 6
7595: PPUSH
7596: LD_INT 82
7598: PPUSH
7599: LD_INT 5
7601: PPUSH
7602: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7606: LD_VAR 0 6
7610: PPUSH
7611: LD_INT 95
7613: PPUSH
7614: LD_INT 12
7616: PPUSH
7617: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7621: LD_VAR 0 6
7625: PPUSH
7626: LD_INT 102
7628: PPUSH
7629: LD_INT 11
7631: PPUSH
7632: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7636: LD_VAR 0 6
7640: PPUSH
7641: LD_INT 116
7643: PPUSH
7644: LD_INT 15
7646: PPUSH
7647: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7651: LD_VAR 0 6
7655: PPUSH
7656: LD_INT 140
7658: PPUSH
7659: LD_INT 25
7661: PPUSH
7662: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7666: LD_VAR 0 6
7670: PPUSH
7671: LD_INT 160
7673: PPUSH
7674: LD_INT 56
7676: PPUSH
7677: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7681: LD_VAR 0 6
7685: PPUSH
7686: LD_INT 189
7688: PPUSH
7689: LD_INT 79
7691: PPUSH
7692: CALL_OW 171
// arabianAttackersAI = 1 ;
7696: LD_ADDR_EXP 46
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7704: LD_INT 350
7706: PPUSH
7707: CALL_OW 67
// if IsOk ( Gary ) then
7711: LD_EXP 10
7715: PPUSH
7716: CALL_OW 302
7720: IFFALSE 7734
// Say ( Gary , D8a-Gary-1 ) ;
7722: LD_EXP 10
7726: PPUSH
7727: LD_STRING D8a-Gary-1
7729: PPUSH
7730: CALL_OW 88
// wait ( 0 0$5 ) ;
7734: LD_INT 175
7736: PPUSH
7737: CALL_OW 67
// if IsOK ( Khatam ) then
7741: LD_EXP 14
7745: PPUSH
7746: CALL_OW 302
7750: IFFALSE 8286
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7752: LD_ADDR_VAR 0 3
7756: PUSH
7757: LD_INT 22
7759: PUSH
7760: LD_INT 1
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 2
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 1
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_INT 25
7782: PUSH
7783: LD_INT 2
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 25
7792: PUSH
7793: LD_INT 3
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 25
7802: PUSH
7803: LD_INT 4
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: PUSH
7810: LD_INT 25
7812: PUSH
7813: LD_INT 5
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: PUSH
7820: LD_INT 25
7822: PUSH
7823: LD_INT 8
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 69
7847: PUSH
7848: LD_EXP 1
7852: PUSH
7853: LD_EXP 2
7857: PUSH
7858: LD_EXP 3
7862: PUSH
7863: LD_EXP 4
7867: PUSH
7868: LD_EXP 5
7872: PUSH
7873: LD_EXP 6
7877: PUSH
7878: LD_EXP 7
7882: PUSH
7883: LD_EXP 8
7887: PUSH
7888: LD_EXP 9
7892: PUSH
7893: LD_EXP 10
7897: PUSH
7898: LD_EXP 11
7902: PUSH
7903: LD_EXP 12
7907: PUSH
7908: LD_EXP 13
7912: PUSH
7913: LD_EXP 14
7917: PUSH
7918: LD_EXP 15
7922: PUSH
7923: LD_EXP 16
7927: PUSH
7928: LD_EXP 17
7932: PUSH
7933: LD_EXP 19
7937: PUSH
7938: LD_EXP 24
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: DIFF
7964: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7965: LD_EXP 14
7969: PPUSH
7970: LD_INT 8
7972: PPUSH
7973: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7977: LD_EXP 14
7981: PPUSH
7982: CALL_OW 122
// wait ( 0 0$1 ) ;
7986: LD_INT 35
7988: PPUSH
7989: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7993: LD_EXP 14
7997: PPUSH
7998: CALL_OW 121
// wait ( 0 0$1 ) ;
8002: LD_INT 35
8004: PPUSH
8005: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8009: LD_EXP 14
8013: PPUSH
8014: LD_INT 7
8016: PPUSH
8017: CALL_OW 113
// if not tmp then
8021: LD_VAR 0 3
8025: NOT
8026: IFFALSE 8030
// exit ;
8028: GO 8286
// DialogueOn ;
8030: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8034: LD_VAR 0 3
8038: PUSH
8039: LD_INT 1
8041: ARRAY
8042: PPUSH
8043: CALL_OW 258
8047: PUSH
8048: LD_INT 1
8050: EQUAL
8051: IFFALSE 8071
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8053: LD_VAR 0 3
8057: PUSH
8058: LD_INT 1
8060: ARRAY
8061: PPUSH
8062: LD_STRING D8b-Sol1-1
8064: PPUSH
8065: CALL_OW 88
8069: GO 8087
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8071: LD_VAR 0 3
8075: PUSH
8076: LD_INT 1
8078: ARRAY
8079: PPUSH
8080: LD_STRING D8b-FSol1-1
8082: PPUSH
8083: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8087: LD_EXP 14
8091: PPUSH
8092: LD_STRING D8b-Khat-1
8094: PPUSH
8095: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8099: LD_VAR 0 3
8103: PUSH
8104: LD_INT 1
8106: ARRAY
8107: PPUSH
8108: CALL_OW 258
8112: PUSH
8113: LD_INT 1
8115: EQUAL
8116: IFFALSE 8136
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8118: LD_VAR 0 3
8122: PUSH
8123: LD_INT 1
8125: ARRAY
8126: PPUSH
8127: LD_STRING D8b-Sol1-2
8129: PPUSH
8130: CALL_OW 88
8134: GO 8152
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8136: LD_VAR 0 3
8140: PUSH
8141: LD_INT 1
8143: ARRAY
8144: PPUSH
8145: LD_STRING D8b-FSol1-2
8147: PPUSH
8148: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8152: LD_EXP 14
8156: PPUSH
8157: LD_STRING D8b-Khat-2
8159: PPUSH
8160: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8164: LD_VAR 0 3
8168: PUSH
8169: LD_INT 1
8171: ARRAY
8172: PPUSH
8173: CALL_OW 258
8177: PUSH
8178: LD_INT 1
8180: EQUAL
8181: IFFALSE 8201
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8183: LD_VAR 0 3
8187: PUSH
8188: LD_INT 1
8190: ARRAY
8191: PPUSH
8192: LD_STRING D8b-Sol1-3
8194: PPUSH
8195: CALL_OW 88
8199: GO 8217
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8201: LD_VAR 0 3
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: PPUSH
8210: LD_STRING D8b-FSol1-3
8212: PPUSH
8213: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8217: LD_EXP 14
8221: PPUSH
8222: LD_STRING D8b-Khat-3
8224: PPUSH
8225: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 1
8236: ARRAY
8237: PPUSH
8238: CALL_OW 258
8242: PUSH
8243: LD_INT 1
8245: EQUAL
8246: IFFALSE 8266
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8248: LD_VAR 0 3
8252: PUSH
8253: LD_INT 1
8255: ARRAY
8256: PPUSH
8257: LD_STRING D8b-Sol1-4
8259: PPUSH
8260: CALL_OW 88
8264: GO 8282
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8266: LD_VAR 0 3
8270: PUSH
8271: LD_INT 1
8273: ARRAY
8274: PPUSH
8275: LD_STRING D8b-FSol1-4
8277: PPUSH
8278: CALL_OW 88
// DialogueOff ;
8282: CALL_OW 7
// end ; end ;
8286: LD_VAR 0 1
8290: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8291: LD_INT 7
8293: PPUSH
8294: LD_INT 22
8296: PUSH
8297: LD_INT 2
8299: PUSH
8300: EMPTY
8301: LIST
8302: LIST
8303: PPUSH
8304: CALL_OW 70
8308: PUSH
8309: LD_INT 0
8311: GREATER
8312: PUSH
8313: LD_EXP 14
8317: PPUSH
8318: LD_INT 7
8320: PPUSH
8321: CALL_OW 308
8325: OR
8326: IFFALSE 8533
8328: GO 8330
8330: DISABLE
8331: LD_INT 0
8333: PPUSH
// begin enable ;
8334: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8335: LD_ADDR_VAR 0 1
8339: PUSH
8340: LD_INT 7
8342: PPUSH
8343: LD_INT 22
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PPUSH
8353: CALL_OW 70
8357: PUSH
8358: FOR_IN
8359: IFFALSE 8500
// begin if GetClass ( i ) = 4 then
8361: LD_VAR 0 1
8365: PPUSH
8366: CALL_OW 257
8370: PUSH
8371: LD_INT 4
8373: EQUAL
8374: IFFALSE 8386
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8376: LD_INT 1
8378: PPUSH
8379: LD_STRING 10_ScientistsEscape_1
8381: PPUSH
8382: CALL_OW 39
// if i = Dietrich then
8386: LD_VAR 0 1
8390: PUSH
8391: LD_EXP 26
8395: EQUAL
8396: IFFALSE 8406
// GensherStatus = 1 ;
8398: LD_ADDR_EXP 51
8402: PUSH
8403: LD_INT 1
8405: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 257
8415: PUSH
8416: LD_INT 1
8418: EQUAL
8419: PUSH
8420: LD_VAR 0 1
8424: PPUSH
8425: CALL_OW 257
8429: PUSH
8430: LD_INT 2
8432: EQUAL
8433: OR
8434: PUSH
8435: LD_VAR 0 1
8439: PPUSH
8440: CALL_OW 257
8444: PUSH
8445: LD_INT 3
8447: EQUAL
8448: OR
8449: PUSH
8450: LD_VAR 0 1
8454: PPUSH
8455: CALL_OW 257
8459: PUSH
8460: LD_INT 4
8462: EQUAL
8463: OR
8464: PUSH
8465: LD_VAR 0 1
8469: PPUSH
8470: CALL_OW 257
8474: PUSH
8475: LD_INT 8
8477: EQUAL
8478: OR
8479: IFFALSE 8489
// arabianEscape = 1 ;
8481: LD_ADDR_EXP 47
8485: PUSH
8486: LD_INT 1
8488: ST_TO_ADDR
// RemoveUnit ( i ) ;
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 64
// end ;
8498: GO 8358
8500: POP
8501: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8502: LD_EXP 14
8506: PPUSH
8507: LD_INT 7
8509: PPUSH
8510: CALL_OW 308
8514: IFFALSE 8533
// begin KhatamStatus = 1 ;
8516: LD_ADDR_EXP 52
8520: PUSH
8521: LD_INT 1
8523: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8524: LD_EXP 14
8528: PPUSH
8529: CALL_OW 64
// end ; end ;
8533: PPOPN 1
8535: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8536: LD_INT 22
8538: PUSH
8539: LD_INT 2
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PUSH
8546: LD_INT 21
8548: PUSH
8549: LD_INT 1
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: PPUSH
8560: CALL_OW 69
8564: PUSH
8565: LD_INT 0
8567: EQUAL
8568: PUSH
8569: LD_INT 22
8571: PUSH
8572: LD_INT 4
8574: PUSH
8575: EMPTY
8576: LIST
8577: LIST
8578: PUSH
8579: LD_INT 21
8581: PUSH
8582: LD_INT 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 69
8597: PUSH
8598: LD_INT 0
8600: EQUAL
8601: AND
8602: IFFALSE 8615
8604: GO 8606
8606: DISABLE
// arabianDefeated = 1 ;
8607: LD_ADDR_EXP 48
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
8615: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8616: LD_INT 54
8618: PPUSH
8619: LD_INT 1
8621: PPUSH
8622: CALL_OW 321
8626: PUSH
8627: LD_INT 2
8629: EQUAL
8630: PUSH
8631: LD_INT 55
8633: PPUSH
8634: LD_INT 1
8636: PPUSH
8637: CALL_OW 321
8641: PUSH
8642: LD_INT 2
8644: EQUAL
8645: AND
8646: PUSH
8647: LD_INT 21
8649: PPUSH
8650: LD_INT 1
8652: PPUSH
8653: CALL_OW 321
8657: PUSH
8658: LD_INT 2
8660: EQUAL
8661: AND
8662: PUSH
8663: LD_INT 22
8665: PPUSH
8666: LD_INT 1
8668: PPUSH
8669: CALL_OW 321
8673: PUSH
8674: LD_INT 2
8676: EQUAL
8677: AND
8678: PUSH
8679: LD_INT 12
8681: PPUSH
8682: LD_INT 1
8684: PPUSH
8685: CALL_OW 321
8689: PUSH
8690: LD_INT 2
8692: EQUAL
8693: AND
8694: PUSH
8695: LD_INT 32
8697: PPUSH
8698: LD_INT 1
8700: PPUSH
8701: CALL_OW 321
8705: PUSH
8706: LD_INT 2
8708: EQUAL
8709: AND
8710: PUSH
8711: LD_EXP 59
8715: PUSH
8716: LD_INT 0
8718: EQUAL
8719: AND
8720: PUSH
8721: LD_EXP 49
8725: PUSH
8726: LD_INT 0
8728: EQUAL
8729: AND
8730: PUSH
8731: LD_OWVAR 1
8735: PUSH
8736: LD_INT 31500
8738: GREATEREQUAL
8739: AND
8740: IFFALSE 8757
8742: GO 8744
8744: DISABLE
// begin arabianTrait = 1 ;
8745: LD_ADDR_EXP 49
8749: PUSH
8750: LD_INT 1
8752: ST_TO_ADDR
// PrepareArabianTrait ;
8753: CALL 6788 0 0
// end ;
8757: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
8758: LD_EXP 29
8762: PUSH
8763: LD_STRING 02_mikhailStatus_1
8765: PPUSH
8766: LD_INT 0
8768: PPUSH
8769: CALL_OW 30
8773: PUSH
8774: LD_INT 1
8776: EQUAL
8777: AND
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 5
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PPUSH
8789: CALL_OW 69
8793: PUSH
8794: LD_INT 0
8796: EQUAL
8797: AND
8798: PUSH
8799: LD_INT 22
8801: PUSH
8802: LD_INT 2
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: PUSH
8809: LD_INT 21
8811: PUSH
8812: LD_INT 1
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 69
8827: PUSH
8828: LD_INT 0
8830: EQUAL
8831: PUSH
8832: LD_EXP 49
8836: PUSH
8837: LD_INT 0
8839: EQUAL
8840: OR
8841: AND
8842: IFFALSE 8851
8844: GO 8846
8846: DISABLE
// PrepareCornell ;
8847: CALL 2569 0 0
8851: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8852: LD_INT 22
8854: PUSH
8855: LD_INT 1
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 69
8866: PPUSH
8867: LD_EXP 19
8871: PPUSH
8872: CALL_OW 74
8876: PPUSH
8877: LD_EXP 19
8881: PPUSH
8882: CALL_OW 296
8886: PUSH
8887: LD_INT 9
8889: LESS
8890: IFFALSE 9111
8892: GO 8894
8894: DISABLE
// begin InGameOn ;
8895: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8899: LD_EXP 19
8903: PPUSH
8904: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8908: LD_EXP 19
8912: PPUSH
8913: LD_STRING D7-Corn-1
8915: PPUSH
8916: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8920: LD_INT 22
8922: PUSH
8923: LD_INT 1
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 2
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 1
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 25
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 25
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 25
8965: PUSH
8966: LD_INT 4
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PUSH
8973: LD_INT 25
8975: PUSH
8976: LD_INT 5
8978: PUSH
8979: EMPTY
8980: LIST
8981: LIST
8982: PUSH
8983: EMPTY
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: PPUSH
8995: CALL_OW 69
8999: PPUSH
9000: LD_STRING D7-Sol1-1
9002: PPUSH
9003: LD_STRING D7-FSol1-1
9005: PPUSH
9006: CALL 9658 0 3
// CenterNowOnUnits ( Cornell ) ;
9010: LD_EXP 19
9014: PPUSH
9015: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9019: LD_EXP 19
9023: PPUSH
9024: LD_STRING D7-Corn-2
9026: PPUSH
9027: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9031: LD_EXP 1
9035: PPUSH
9036: LD_STRING D7-JMM-2
9038: PPUSH
9039: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9043: LD_EXP 19
9047: PPUSH
9048: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9052: LD_EXP 19
9056: PPUSH
9057: LD_STRING D7-Corn-3
9059: PPUSH
9060: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9064: LD_EXP 19
9068: PPUSH
9069: LD_INT 250
9071: PPUSH
9072: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9076: LD_EXP 19
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: CALL_OW 235
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9095: LD_EXP 1
9099: PPUSH
9100: LD_STRING D7-JMM-3
9102: PPUSH
9103: CALL_OW 88
// InGameOff ;
9107: CALL_OW 9
// end ;
9111: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9112: LD_EXP 19
9116: PPUSH
9117: CALL_OW 255
9121: PUSH
9122: LD_INT 1
9124: EQUAL
9125: PUSH
9126: LD_EXP 19
9130: PPUSH
9131: CALL_OW 256
9135: PUSH
9136: LD_INT 350
9138: GREATER
9139: AND
9140: IFFALSE 9333
9142: GO 9144
9144: DISABLE
// begin DialogueOn ;
9145: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9149: LD_EXP 1
9153: PPUSH
9154: LD_STRING D7a-JMM-1
9156: PPUSH
9157: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9161: LD_EXP 19
9165: PPUSH
9166: LD_STRING D7a-Corn-1
9168: PPUSH
9169: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9173: LD_EXP 1
9177: PPUSH
9178: LD_STRING D7a-JMM-2
9180: PPUSH
9181: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9185: LD_EXP 19
9189: PPUSH
9190: LD_STRING D7a-Corn-2
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9197: LD_EXP 1
9201: PPUSH
9202: LD_STRING D7a-JMM-3
9204: PPUSH
9205: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9209: LD_EXP 19
9213: PPUSH
9214: LD_STRING D7a-Corn-3
9216: PPUSH
9217: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9221: LD_EXP 1
9225: PPUSH
9226: LD_STRING D7a-JMM-4
9228: PPUSH
9229: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9233: LD_EXP 19
9237: PPUSH
9238: LD_STRING D7a-Corn-4
9240: PPUSH
9241: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9245: LD_EXP 1
9249: PPUSH
9250: LD_STRING D7a-JMM-5
9252: PPUSH
9253: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9257: LD_EXP 19
9261: PPUSH
9262: LD_STRING D7a-Corn-5
9264: PPUSH
9265: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9269: LD_EXP 1
9273: PPUSH
9274: LD_STRING D7a-JMM-6
9276: PPUSH
9277: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9281: LD_EXP 19
9285: PPUSH
9286: LD_STRING D7a-Corn-6
9288: PPUSH
9289: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9293: LD_EXP 1
9297: PPUSH
9298: LD_STRING D7a-JMM-7
9300: PPUSH
9301: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9305: LD_EXP 19
9309: PPUSH
9310: LD_STRING D7a-Corn-7
9312: PPUSH
9313: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9317: LD_EXP 1
9321: PPUSH
9322: LD_STRING D7a-JMM-8
9324: PPUSH
9325: CALL_OW 88
// DialogueOff ;
9329: CALL_OW 7
// end ;
9333: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9334: LD_EXP 58
9338: PUSH
9339: LD_EXP 1
9343: PPUSH
9344: CALL_OW 302
9348: PUSH
9349: LD_EXP 5
9353: PPUSH
9354: CALL_OW 302
9358: OR
9359: AND
9360: IFFALSE 9450
9362: GO 9364
9364: DISABLE
// begin Wait ( 0 0$2 ) ;
9365: LD_INT 70
9367: PPUSH
9368: CALL_OW 67
// DialogueOn ;
9372: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9376: LD_EXP 58
9380: PUSH
9381: LD_INT 1
9383: ARRAY
9384: PPUSH
9385: LD_EXP 58
9389: PUSH
9390: LD_INT 2
9392: ARRAY
9393: PPUSH
9394: CALL_OW 86
// if IsOk ( Cyrus ) then
9398: LD_EXP 5
9402: PPUSH
9403: CALL_OW 302
9407: IFFALSE 9423
// Say ( Cyrus , D10-Cyrus-1 ) else
9409: LD_EXP 5
9413: PPUSH
9414: LD_STRING D10-Cyrus-1
9416: PPUSH
9417: CALL_OW 88
9421: GO 9446
// if IsOk ( JMM ) then
9423: LD_EXP 1
9427: PPUSH
9428: CALL_OW 302
9432: IFFALSE 9446
// Say ( JMM , D10-JMM-1 ) ;
9434: LD_EXP 1
9438: PPUSH
9439: LD_STRING D10-JMM-1
9441: PPUSH
9442: CALL_OW 88
// DialogueOff ;
9446: CALL_OW 7
// end ;
9450: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9451: LD_INT 12
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: CALL_OW 321
9461: PUSH
9462: LD_INT 2
9464: EQUAL
9465: IFFALSE 9477
9467: GO 9469
9469: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9470: LD_STRING M2b
9472: PPUSH
9473: CALL_OW 337
9477: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9478: LD_INT 32
9480: PPUSH
9481: LD_INT 1
9483: PPUSH
9484: CALL_OW 321
9488: PUSH
9489: LD_INT 2
9491: EQUAL
9492: IFFALSE 9504
9494: GO 9496
9496: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9497: LD_STRING M2c
9499: PPUSH
9500: CALL_OW 337
9504: END
// every 0 0$1 trigger arabianDefeated = 1 do
9505: LD_EXP 48
9509: PUSH
9510: LD_INT 1
9512: EQUAL
9513: IFFALSE 9525
9515: GO 9517
9517: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9518: LD_STRING M4a
9520: PPUSH
9521: CALL_OW 337
9525: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9526: LD_INT 54
9528: PPUSH
9529: LD_INT 1
9531: PPUSH
9532: CALL_OW 321
9536: PUSH
9537: LD_INT 2
9539: EQUAL
9540: PUSH
9541: LD_INT 55
9543: PPUSH
9544: LD_INT 1
9546: PPUSH
9547: CALL_OW 321
9551: PUSH
9552: LD_INT 2
9554: EQUAL
9555: AND
9556: PUSH
9557: LD_INT 21
9559: PPUSH
9560: LD_INT 1
9562: PPUSH
9563: CALL_OW 321
9567: PUSH
9568: LD_INT 2
9570: EQUAL
9571: AND
9572: PUSH
9573: LD_INT 22
9575: PPUSH
9576: LD_INT 1
9578: PPUSH
9579: CALL_OW 321
9583: PUSH
9584: LD_INT 2
9586: EQUAL
9587: AND
9588: IFFALSE 9600
9590: GO 9592
9592: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9593: LD_STRING M2a
9595: PPUSH
9596: CALL_OW 337
9600: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9601: LD_INT 0
9603: PPUSH
9604: PPUSH
// if exist_mode then
9605: LD_VAR 0 2
9609: IFFALSE 9628
// unit := CreateCharacter ( ident ) else
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 34
9625: ST_TO_ADDR
9626: GO 9643
// unit := NewCharacter ( ident ) ;
9628: LD_ADDR_VAR 0 4
9632: PUSH
9633: LD_VAR 0 1
9637: PPUSH
9638: CALL_OW 25
9642: ST_TO_ADDR
// result := unit ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 4
9652: ST_TO_ADDR
// end ;
9653: LD_VAR 0 3
9657: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9658: LD_INT 0
9660: PPUSH
9661: PPUSH
9662: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9663: LD_ADDR_VAR 0 1
9667: PUSH
9668: LD_VAR 0 1
9672: PUSH
9673: LD_EXP 1
9677: PUSH
9678: LD_EXP 2
9682: PUSH
9683: LD_EXP 3
9687: PUSH
9688: LD_EXP 4
9692: PUSH
9693: LD_EXP 5
9697: PUSH
9698: LD_EXP 6
9702: PUSH
9703: LD_EXP 7
9707: PUSH
9708: LD_EXP 8
9712: PUSH
9713: LD_EXP 9
9717: PUSH
9718: LD_EXP 10
9722: PUSH
9723: LD_EXP 11
9727: PUSH
9728: LD_EXP 12
9732: PUSH
9733: LD_EXP 13
9737: PUSH
9738: LD_EXP 14
9742: PUSH
9743: LD_EXP 15
9747: PUSH
9748: LD_EXP 16
9752: PUSH
9753: LD_EXP 17
9757: PUSH
9758: LD_EXP 18
9762: PUSH
9763: LD_EXP 19
9767: PUSH
9768: LD_EXP 24
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: DIFF
9795: ST_TO_ADDR
// if not characters then
9796: LD_VAR 0 1
9800: NOT
9801: IFFALSE 9805
// exit ;
9803: GO 9951
// rnd = rand ( 1 , characters ) ;
9805: LD_ADDR_VAR 0 6
9809: PUSH
9810: LD_INT 1
9812: PPUSH
9813: LD_VAR 0 1
9817: PPUSH
9818: CALL_OW 12
9822: ST_TO_ADDR
// for i = 1 to characters do
9823: LD_ADDR_VAR 0 5
9827: PUSH
9828: DOUBLE
9829: LD_INT 1
9831: DEC
9832: ST_TO_ADDR
9833: LD_VAR 0 1
9837: PUSH
9838: FOR_TO
9839: IFFALSE 9949
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9841: LD_VAR 0 5
9845: PUSH
9846: LD_VAR 0 6
9850: EQUAL
9851: PUSH
9852: LD_VAR 0 1
9856: PUSH
9857: LD_VAR 0 5
9861: ARRAY
9862: PPUSH
9863: CALL_OW 258
9867: PUSH
9868: LD_INT 1
9870: EQUAL
9871: AND
9872: IFFALSE 9894
// Say ( characters [ i ] , dialogMID ) ;
9874: LD_VAR 0 1
9878: PUSH
9879: LD_VAR 0 5
9883: ARRAY
9884: PPUSH
9885: LD_VAR 0 2
9889: PPUSH
9890: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9894: LD_VAR 0 5
9898: PUSH
9899: LD_VAR 0 6
9903: EQUAL
9904: PUSH
9905: LD_VAR 0 1
9909: PUSH
9910: LD_VAR 0 5
9914: ARRAY
9915: PPUSH
9916: CALL_OW 258
9920: PUSH
9921: LD_INT 2
9923: EQUAL
9924: AND
9925: IFFALSE 9947
// Say ( characters [ i ] , dialogFID ) ;
9927: LD_VAR 0 1
9931: PUSH
9932: LD_VAR 0 5
9936: ARRAY
9937: PPUSH
9938: LD_VAR 0 3
9942: PPUSH
9943: CALL_OW 88
// end ;
9947: GO 9838
9949: POP
9950: POP
// end ;
9951: LD_VAR 0 4
9955: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9956: LD_INT 0
9958: PPUSH
9959: PPUSH
// for i in charactersList do
9960: LD_ADDR_VAR 0 4
9964: PUSH
9965: LD_VAR 0 1
9969: PUSH
9970: FOR_IN
9971: IFFALSE 9989
// SaveCharacters ( i , ident ) ;
9973: LD_VAR 0 4
9977: PPUSH
9978: LD_VAR 0 2
9982: PPUSH
9983: CALL_OW 38
9987: GO 9970
9989: POP
9990: POP
// end ;
9991: LD_VAR 0 3
9995: RET
// export function PrepareDifficulty ; begin
9996: LD_INT 0
9998: PPUSH
// if difficulty = 1 then
9999: LD_OWVAR 67
10003: PUSH
10004: LD_INT 1
10006: EQUAL
10007: IFFALSE 10051
// begin RuSolMinLevel = 4 ;
10009: LD_ADDR_EXP 36
10013: PUSH
10014: LD_INT 4
10016: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10017: LD_ADDR_EXP 37
10021: PUSH
10022: LD_INT 7
10024: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10025: LD_INT 51
10027: PPUSH
10028: LD_INT 6
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10038: LD_INT 51
10040: PPUSH
10041: LD_INT 5
10043: PPUSH
10044: LD_INT 2
10046: PPUSH
10047: CALL_OW 322
// end ; if difficulty = 2 then
10051: LD_OWVAR 67
10055: PUSH
10056: LD_INT 2
10058: EQUAL
10059: IFFALSE 10155
// begin RuSolMinLevel = 5 ;
10061: LD_ADDR_EXP 36
10065: PUSH
10066: LD_INT 5
10068: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10069: LD_ADDR_EXP 37
10073: PUSH
10074: LD_INT 7
10076: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10077: LD_INT 51
10079: PPUSH
10080: LD_INT 6
10082: PPUSH
10083: LD_INT 2
10085: PPUSH
10086: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10090: LD_INT 57
10092: PPUSH
10093: LD_INT 6
10095: PPUSH
10096: LD_INT 2
10098: PPUSH
10099: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10103: LD_INT 63
10105: PPUSH
10106: LD_INT 6
10108: PPUSH
10109: LD_INT 2
10111: PPUSH
10112: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10116: LD_INT 51
10118: PPUSH
10119: LD_INT 5
10121: PPUSH
10122: LD_INT 2
10124: PPUSH
10125: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10129: LD_INT 5
10131: PPUSH
10132: LD_INT 2
10134: PPUSH
10135: LD_INT 2
10137: PPUSH
10138: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10142: LD_INT 5
10144: PPUSH
10145: LD_INT 5
10147: PPUSH
10148: LD_INT 2
10150: PPUSH
10151: CALL_OW 322
// end ; if difficulty = 3 then
10155: LD_OWVAR 67
10159: PUSH
10160: LD_INT 3
10162: EQUAL
10163: IFFALSE 10311
// begin RuSolMinLevel = 6 ;
10165: LD_ADDR_EXP 36
10169: PUSH
10170: LD_INT 6
10172: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10173: LD_ADDR_EXP 37
10177: PUSH
10178: LD_INT 8
10180: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10181: LD_INT 51
10183: PPUSH
10184: LD_INT 6
10186: PPUSH
10187: LD_INT 2
10189: PPUSH
10190: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10194: LD_INT 57
10196: PPUSH
10197: LD_INT 6
10199: PPUSH
10200: LD_INT 2
10202: PPUSH
10203: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10207: LD_INT 52
10209: PPUSH
10210: LD_INT 6
10212: PPUSH
10213: LD_INT 2
10215: PPUSH
10216: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10220: LD_INT 58
10222: PPUSH
10223: LD_INT 6
10225: PPUSH
10226: LD_INT 2
10228: PPUSH
10229: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10233: LD_INT 63
10235: PPUSH
10236: LD_INT 6
10238: PPUSH
10239: LD_INT 2
10241: PPUSH
10242: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10246: LD_INT 64
10248: PPUSH
10249: LD_INT 6
10251: PPUSH
10252: LD_INT 2
10254: PPUSH
10255: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10259: LD_INT 51
10261: PPUSH
10262: LD_INT 5
10264: PPUSH
10265: LD_INT 2
10267: PPUSH
10268: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10272: LD_INT 52
10274: PPUSH
10275: LD_INT 5
10277: PPUSH
10278: LD_INT 2
10280: PPUSH
10281: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10285: LD_INT 66
10287: PPUSH
10288: LD_INT 2
10290: PPUSH
10291: LD_INT 2
10293: PPUSH
10294: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10298: LD_INT 66
10300: PPUSH
10301: LD_INT 5
10303: PPUSH
10304: LD_INT 2
10306: PPUSH
10307: CALL_OW 322
// end ; end ;
10311: LD_VAR 0 1
10315: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10316: LD_INT 0
10318: PPUSH
10319: PPUSH
10320: PPUSH
10321: PPUSH
10322: PPUSH
// case position of 1 :
10323: LD_VAR 0 1
10327: PUSH
10328: LD_INT 1
10330: DOUBLE
10331: EQUAL
10332: IFTRUE 10336
10334: GO 10347
10336: POP
// area := westConv ; 2 :
10337: LD_ADDR_VAR 0 6
10341: PUSH
10342: LD_INT 20
10344: ST_TO_ADDR
10345: GO 10386
10347: LD_INT 2
10349: DOUBLE
10350: EQUAL
10351: IFTRUE 10355
10353: GO 10366
10355: POP
// area := midConv ; 3 :
10356: LD_ADDR_VAR 0 6
10360: PUSH
10361: LD_INT 21
10363: ST_TO_ADDR
10364: GO 10386
10366: LD_INT 3
10368: DOUBLE
10369: EQUAL
10370: IFTRUE 10374
10372: GO 10385
10374: POP
// area := eastConv ; end ;
10375: LD_ADDR_VAR 0 6
10379: PUSH
10380: LD_INT 22
10382: ST_TO_ADDR
10383: GO 10386
10385: POP
// area := AreaToList ( area , 0 ) ;
10386: LD_ADDR_VAR 0 6
10390: PUSH
10391: LD_VAR 0 6
10395: PPUSH
10396: LD_INT 0
10398: PPUSH
10399: CALL_OW 517
10403: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10404: LD_ADDR_VAR 0 3
10408: PUSH
10409: DOUBLE
10410: LD_INT 1
10412: DEC
10413: ST_TO_ADDR
10414: LD_VAR 0 6
10418: PUSH
10419: LD_INT 1
10421: ARRAY
10422: PUSH
10423: FOR_TO
10424: IFFALSE 10505
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10426: LD_VAR 0 6
10430: PUSH
10431: LD_INT 1
10433: ARRAY
10434: PUSH
10435: LD_VAR 0 3
10439: ARRAY
10440: PPUSH
10441: LD_VAR 0 6
10445: PUSH
10446: LD_INT 2
10448: ARRAY
10449: PUSH
10450: LD_VAR 0 3
10454: ARRAY
10455: PPUSH
10456: LD_INT 1
10458: PPUSH
10459: LD_INT 1
10461: PPUSH
10462: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10466: LD_VAR 0 6
10470: PUSH
10471: LD_INT 1
10473: ARRAY
10474: PUSH
10475: LD_VAR 0 3
10479: ARRAY
10480: PPUSH
10481: LD_VAR 0 6
10485: PUSH
10486: LD_INT 2
10488: ARRAY
10489: PUSH
10490: LD_VAR 0 3
10494: ARRAY
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 331
// end ;
10503: GO 10423
10505: POP
10506: POP
// ruPossition = position ;
10507: LD_ADDR_EXP 41
10511: PUSH
10512: LD_VAR 0 1
10516: ST_TO_ADDR
// if position = 1 then
10517: LD_VAR 0 1
10521: PUSH
10522: LD_INT 1
10524: EQUAL
10525: IFFALSE 11273
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10527: LD_ADDR_VAR 0 4
10531: PUSH
10532: LD_INT 22
10534: PUSH
10535: LD_INT 3
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 2
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PPUSH
10556: CALL_OW 69
10560: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10561: LD_ADDR_VAR 0 5
10565: PUSH
10566: LD_INT 0
10568: PUSH
10569: LD_INT 49
10571: PUSH
10572: LD_INT 74
10574: PUSH
10575: LD_INT 3
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: PUSH
10584: LD_INT 4
10586: PUSH
10587: LD_INT 73
10589: PUSH
10590: LD_INT 88
10592: PUSH
10593: LD_INT 5
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 4
10604: PUSH
10605: LD_INT 56
10607: PUSH
10608: LD_INT 62
10610: PUSH
10611: LD_INT 3
10613: PUSH
10614: EMPTY
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_INT 29
10622: PUSH
10623: LD_INT 43
10625: PUSH
10626: LD_INT 68
10628: PUSH
10629: LD_INT 2
10631: PUSH
10632: EMPTY
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 30
10640: PUSH
10641: LD_INT 43
10643: PUSH
10644: LD_INT 79
10646: PUSH
10647: LD_INT 5
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 28
10658: PUSH
10659: LD_INT 60
10661: PUSH
10662: LD_INT 75
10664: PUSH
10665: LD_INT 1
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: LD_INT 50
10679: PUSH
10680: LD_INT 87
10682: PUSH
10683: LD_INT 1
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PUSH
10692: LD_INT 28
10694: PUSH
10695: LD_INT 45
10697: PUSH
10698: LD_INT 67
10700: PUSH
10701: LD_INT 2
10703: PUSH
10704: EMPTY
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: LD_INT 17
10712: PUSH
10713: LD_INT 47
10715: PUSH
10716: LD_INT 84
10718: PUSH
10719: LD_INT 2
10721: PUSH
10722: EMPTY
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 18
10730: PUSH
10731: LD_INT 46
10733: PUSH
10734: LD_INT 87
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PUSH
10746: LD_INT 28
10748: PUSH
10749: LD_INT 41
10751: PUSH
10752: LD_INT 64
10754: PUSH
10755: LD_INT 5
10757: PUSH
10758: EMPTY
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: PUSH
10764: LD_INT 32
10766: PUSH
10767: LD_INT 75
10769: PUSH
10770: LD_INT 76
10772: PUSH
10773: LD_INT 5
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 32
10784: PUSH
10785: LD_INT 77
10787: PUSH
10788: LD_INT 75
10790: PUSH
10791: LD_INT 5
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 32
10802: PUSH
10803: LD_INT 69
10805: PUSH
10806: LD_INT 68
10808: PUSH
10809: LD_INT 3
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: PUSH
10818: LD_INT 32
10820: PUSH
10821: LD_INT 59
10823: PUSH
10824: LD_INT 96
10826: PUSH
10827: LD_INT 5
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: PUSH
10836: LD_INT 32
10838: PUSH
10839: LD_INT 56
10841: PUSH
10842: LD_INT 96
10844: PUSH
10845: LD_INT 0
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: PUSH
10854: LD_INT 32
10856: PUSH
10857: LD_INT 51
10859: PUSH
10860: LD_INT 61
10862: PUSH
10863: LD_INT 3
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: LD_INT 32
10874: PUSH
10875: LD_INT 42
10877: PUSH
10878: LD_INT 60
10880: PUSH
10881: LD_INT 3
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 32
10892: PUSH
10893: LD_INT 36
10895: PUSH
10896: LD_INT 58
10898: PUSH
10899: LD_INT 3
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 32
10910: PUSH
10911: LD_INT 39
10913: PUSH
10914: LD_INT 59
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 32
10928: PUSH
10929: LD_INT 61
10931: PUSH
10932: LD_INT 64
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 33
10946: PUSH
10947: LD_INT 63
10949: PUSH
10950: LD_INT 90
10952: PUSH
10953: LD_INT 5
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 33
10964: PUSH
10965: LD_INT 64
10967: PUSH
10968: LD_INT 88
10970: PUSH
10971: LD_INT 5
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 33
10982: PUSH
10983: LD_INT 72
10985: PUSH
10986: LD_INT 82
10988: PUSH
10989: LD_INT 5
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 6
11000: PUSH
11001: LD_INT 42
11003: PUSH
11004: LD_INT 74
11006: PUSH
11007: LD_INT 1
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 6
11018: PUSH
11019: LD_INT 56
11021: PUSH
11022: LD_INT 77
11024: PUSH
11025: LD_INT 2
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 21
11036: PUSH
11037: LD_INT 54
11039: PUSH
11040: LD_INT 91
11042: PUSH
11043: LD_INT 5
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 16
11054: PUSH
11055: LD_INT 50
11057: PUSH
11058: LD_INT 83
11060: PUSH
11061: LD_INT 3
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 24
11072: PUSH
11073: LD_INT 50
11075: PUSH
11076: LD_INT 90
11078: PUSH
11079: LD_INT 0
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11119: LD_ADDR_VAR 0 3
11123: PUSH
11124: LD_INT 22
11126: PUSH
11127: LD_INT 3
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 3
11136: PUSH
11137: LD_INT 25
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: EMPTY
11152: LIST
11153: LIST
11154: PPUSH
11155: CALL_OW 69
11159: PUSH
11160: FOR_IN
11161: IFFALSE 11180
// AddComAgressiveMove ( i , 53 , 82 ) ;
11163: LD_VAR 0 3
11167: PPUSH
11168: LD_INT 53
11170: PPUSH
11171: LD_INT 82
11173: PPUSH
11174: CALL_OW 174
11178: GO 11160
11180: POP
11181: POP
// for i := 1 to buildingsTab do
11182: LD_ADDR_VAR 0 3
11186: PUSH
11187: DOUBLE
11188: LD_INT 1
11190: DEC
11191: ST_TO_ADDR
11192: LD_VAR 0 5
11196: PUSH
11197: FOR_TO
11198: IFFALSE 11271
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11200: LD_VAR 0 4
11204: PPUSH
11205: LD_VAR 0 5
11209: PUSH
11210: LD_VAR 0 3
11214: ARRAY
11215: PUSH
11216: LD_INT 1
11218: ARRAY
11219: PPUSH
11220: LD_VAR 0 5
11224: PUSH
11225: LD_VAR 0 3
11229: ARRAY
11230: PUSH
11231: LD_INT 2
11233: ARRAY
11234: PPUSH
11235: LD_VAR 0 5
11239: PUSH
11240: LD_VAR 0 3
11244: ARRAY
11245: PUSH
11246: LD_INT 3
11248: ARRAY
11249: PPUSH
11250: LD_VAR 0 5
11254: PUSH
11255: LD_VAR 0 3
11259: ARRAY
11260: PUSH
11261: LD_INT 4
11263: ARRAY
11264: PPUSH
11265: CALL_OW 205
11269: GO 11197
11271: POP
11272: POP
// end ; if position = 2 then
11273: LD_VAR 0 1
11277: PUSH
11278: LD_INT 2
11280: EQUAL
11281: IFFALSE 11896
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11283: LD_ADDR_VAR 0 4
11287: PUSH
11288: LD_INT 22
11290: PUSH
11291: LD_INT 3
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 25
11300: PUSH
11301: LD_INT 2
11303: PUSH
11304: EMPTY
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: PPUSH
11312: CALL_OW 69
11316: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11317: LD_ADDR_VAR 0 5
11321: PUSH
11322: LD_INT 0
11324: PUSH
11325: LD_INT 104
11327: PUSH
11328: LD_INT 110
11330: PUSH
11331: LD_INT 5
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: PUSH
11340: LD_INT 4
11342: PUSH
11343: LD_INT 98
11345: PUSH
11346: LD_INT 90
11348: PUSH
11349: LD_INT 3
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 29
11360: PUSH
11361: LD_INT 103
11363: PUSH
11364: LD_INT 114
11366: PUSH
11367: LD_INT 2
11369: PUSH
11370: EMPTY
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 30
11378: PUSH
11379: LD_INT 99
11381: PUSH
11382: LD_INT 114
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 28
11396: PUSH
11397: LD_INT 100
11399: PUSH
11400: LD_INT 112
11402: PUSH
11403: LD_INT 1
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: LD_INT 2
11414: PUSH
11415: LD_INT 92
11417: PUSH
11418: LD_INT 101
11420: PUSH
11421: LD_INT 0
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 28
11432: PUSH
11433: LD_INT 97
11435: PUSH
11436: LD_INT 116
11438: PUSH
11439: LD_INT 5
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 17
11450: PUSH
11451: LD_INT 96
11453: PUSH
11454: LD_INT 101
11456: PUSH
11457: LD_INT 4
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 18
11468: PUSH
11469: LD_INT 88
11471: PUSH
11472: LD_INT 97
11474: PUSH
11475: LD_INT 2
11477: PUSH
11478: EMPTY
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 28
11486: PUSH
11487: LD_INT 106
11489: PUSH
11490: LD_INT 92
11492: PUSH
11493: LD_INT 2
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: LIST
11500: LIST
11501: PUSH
11502: LD_INT 32
11504: PUSH
11505: LD_INT 88
11507: PUSH
11508: LD_INT 89
11510: PUSH
11511: LD_INT 2
11513: PUSH
11514: EMPTY
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: PUSH
11520: LD_INT 32
11522: PUSH
11523: LD_INT 86
11525: PUSH
11526: LD_INT 90
11528: PUSH
11529: LD_INT 2
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: LD_INT 32
11540: PUSH
11541: LD_INT 85
11543: PUSH
11544: LD_INT 99
11546: PUSH
11547: LD_INT 2
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: PUSH
11556: LD_INT 32
11558: PUSH
11559: LD_INT 85
11561: PUSH
11562: LD_INT 107
11564: PUSH
11565: LD_INT 1
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PUSH
11574: LD_INT 33
11576: PUSH
11577: LD_INT 105
11579: PUSH
11580: LD_INT 99
11582: PUSH
11583: LD_INT 1
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: PUSH
11592: LD_INT 33
11594: PUSH
11595: LD_INT 102
11597: PUSH
11598: LD_INT 92
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: PUSH
11610: LD_INT 33
11612: PUSH
11613: LD_INT 105
11615: PUSH
11616: LD_INT 92
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 6
11630: PUSH
11631: LD_INT 92
11633: PUSH
11634: LD_INT 110
11636: PUSH
11637: LD_INT 0
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 6
11648: PUSH
11649: LD_INT 103
11651: PUSH
11652: LD_INT 103
11654: PUSH
11655: LD_INT 5
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 21
11666: PUSH
11667: LD_INT 89
11669: PUSH
11670: LD_INT 101
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: LD_INT 16
11684: PUSH
11685: LD_INT 95
11687: PUSH
11688: LD_INT 104
11690: PUSH
11691: LD_INT 4
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: PUSH
11700: LD_INT 24
11702: PUSH
11703: LD_INT 92
11705: PUSH
11706: LD_INT 105
11708: PUSH
11709: LD_INT 0
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11742: LD_ADDR_VAR 0 3
11746: PUSH
11747: LD_INT 22
11749: PUSH
11750: LD_INT 3
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: LD_INT 3
11759: PUSH
11760: LD_INT 25
11762: PUSH
11763: LD_INT 2
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PPUSH
11778: CALL_OW 69
11782: PUSH
11783: FOR_IN
11784: IFFALSE 11803
// AddComAgressiveMove ( i , 96 , 99 ) ;
11786: LD_VAR 0 3
11790: PPUSH
11791: LD_INT 96
11793: PPUSH
11794: LD_INT 99
11796: PPUSH
11797: CALL_OW 174
11801: GO 11783
11803: POP
11804: POP
// for i := 1 to buildingsTab do
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: DOUBLE
11811: LD_INT 1
11813: DEC
11814: ST_TO_ADDR
11815: LD_VAR 0 5
11819: PUSH
11820: FOR_TO
11821: IFFALSE 11894
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11823: LD_VAR 0 4
11827: PPUSH
11828: LD_VAR 0 5
11832: PUSH
11833: LD_VAR 0 3
11837: ARRAY
11838: PUSH
11839: LD_INT 1
11841: ARRAY
11842: PPUSH
11843: LD_VAR 0 5
11847: PUSH
11848: LD_VAR 0 3
11852: ARRAY
11853: PUSH
11854: LD_INT 2
11856: ARRAY
11857: PPUSH
11858: LD_VAR 0 5
11862: PUSH
11863: LD_VAR 0 3
11867: ARRAY
11868: PUSH
11869: LD_INT 3
11871: ARRAY
11872: PPUSH
11873: LD_VAR 0 5
11877: PUSH
11878: LD_VAR 0 3
11882: ARRAY
11883: PUSH
11884: LD_INT 4
11886: ARRAY
11887: PPUSH
11888: CALL_OW 205
11892: GO 11820
11894: POP
11895: POP
// end ; if position = 3 then
11896: LD_VAR 0 1
11900: PUSH
11901: LD_INT 3
11903: EQUAL
11904: IFFALSE 12690
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11906: LD_ADDR_VAR 0 4
11910: PUSH
11911: LD_INT 22
11913: PUSH
11914: LD_INT 3
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 25
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PPUSH
11935: CALL_OW 69
11939: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11940: LD_ADDR_VAR 0 5
11944: PUSH
11945: LD_INT 0
11947: PUSH
11948: LD_INT 151
11950: PUSH
11951: LD_INT 71
11953: PUSH
11954: LD_INT 4
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: LIST
11961: LIST
11962: PUSH
11963: LD_INT 4
11965: PUSH
11966: LD_INT 145
11968: PUSH
11969: LD_INT 53
11971: PUSH
11972: LD_INT 3
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 4
11983: PUSH
11984: LD_INT 172
11986: PUSH
11987: LD_INT 102
11989: PUSH
11990: LD_INT 5
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 29
12001: PUSH
12002: LD_INT 152
12004: PUSH
12005: LD_INT 85
12007: PUSH
12008: LD_INT 3
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 30
12019: PUSH
12020: LD_INT 156
12022: PUSH
12023: LD_INT 92
12025: PUSH
12026: LD_INT 3
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 28
12037: PUSH
12038: LD_INT 151
12040: PUSH
12041: LD_INT 66
12043: PUSH
12044: LD_INT 4
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 2
12055: PUSH
12056: LD_INT 163
12058: PUSH
12059: LD_INT 95
12061: PUSH
12062: LD_INT 5
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 28
12073: PUSH
12074: LD_INT 149
12076: PUSH
12077: LD_INT 63
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 17
12091: PUSH
12092: LD_INT 167
12094: PUSH
12095: LD_INT 99
12097: PUSH
12098: LD_INT 5
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 18
12109: PUSH
12110: LD_INT 163
12112: PUSH
12113: LD_INT 98
12115: PUSH
12116: LD_INT 0
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 28
12127: PUSH
12128: LD_INT 154
12130: PUSH
12131: LD_INT 70
12133: PUSH
12134: LD_INT 4
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 32
12145: PUSH
12146: LD_INT 155
12148: PUSH
12149: LD_INT 62
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 32
12163: PUSH
12164: LD_INT 161
12166: PUSH
12167: LD_INT 69
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 32
12181: PUSH
12182: LD_INT 168
12184: PUSH
12185: LD_INT 78
12187: PUSH
12188: LD_INT 4
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 32
12199: PUSH
12200: LD_INT 163
12202: PUSH
12203: LD_INT 80
12205: PUSH
12206: LD_INT 5
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 32
12217: PUSH
12218: LD_INT 136
12220: PUSH
12221: LD_INT 73
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 32
12235: PUSH
12236: LD_INT 157
12238: PUSH
12239: LD_INT 98
12241: PUSH
12242: LD_INT 0
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 32
12253: PUSH
12254: LD_INT 150
12256: PUSH
12257: LD_INT 87
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 33
12271: PUSH
12272: LD_INT 171
12274: PUSH
12275: LD_INT 97
12277: PUSH
12278: LD_INT 4
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 33
12289: PUSH
12290: LD_INT 168
12292: PUSH
12293: LD_INT 92
12295: PUSH
12296: LD_INT 4
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 33
12307: PUSH
12308: LD_INT 166
12310: PUSH
12311: LD_INT 80
12313: PUSH
12314: LD_INT 5
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: LD_INT 141
12328: PUSH
12329: LD_INT 54
12331: PUSH
12332: LD_INT 2
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 33
12343: PUSH
12344: LD_INT 133
12346: PUSH
12347: LD_INT 57
12349: PUSH
12350: LD_INT 2
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 33
12361: PUSH
12362: LD_INT 132
12364: PUSH
12365: LD_INT 61
12367: PUSH
12368: LD_INT 2
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 33
12379: PUSH
12380: LD_INT 150
12382: PUSH
12383: LD_INT 82
12385: PUSH
12386: LD_INT 0
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 132
12400: PUSH
12401: LD_INT 72
12403: PUSH
12404: LD_INT 0
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 6
12415: PUSH
12416: LD_INT 146
12418: PUSH
12419: LD_INT 64
12421: PUSH
12422: LD_INT 4
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: PUSH
12431: LD_INT 6
12433: PUSH
12434: LD_INT 159
12436: PUSH
12437: LD_INT 85
12439: PUSH
12440: LD_INT 4
12442: PUSH
12443: EMPTY
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 21
12451: PUSH
12452: LD_INT 163
12454: PUSH
12455: LD_INT 91
12457: PUSH
12458: LD_INT 3
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: PUSH
12467: LD_INT 16
12469: PUSH
12470: LD_INT 166
12472: PUSH
12473: LD_INT 95
12475: PUSH
12476: LD_INT 4
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: LD_INT 24
12487: PUSH
12488: LD_INT 159
12490: PUSH
12491: LD_INT 95
12493: PUSH
12494: LD_INT 1
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: PUSH
12503: EMPTY
12504: LIST
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12536: LD_ADDR_VAR 0 3
12540: PUSH
12541: LD_INT 22
12543: PUSH
12544: LD_INT 3
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: LD_INT 25
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: PPUSH
12572: CALL_OW 69
12576: PUSH
12577: FOR_IN
12578: IFFALSE 12597
// AddComAgressiveMove ( i , 141 , 65 ) ;
12580: LD_VAR 0 3
12584: PPUSH
12585: LD_INT 141
12587: PPUSH
12588: LD_INT 65
12590: PPUSH
12591: CALL_OW 174
12595: GO 12577
12597: POP
12598: POP
// for i := 1 to buildingsTab do
12599: LD_ADDR_VAR 0 3
12603: PUSH
12604: DOUBLE
12605: LD_INT 1
12607: DEC
12608: ST_TO_ADDR
12609: LD_VAR 0 5
12613: PUSH
12614: FOR_TO
12615: IFFALSE 12688
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12617: LD_VAR 0 4
12621: PPUSH
12622: LD_VAR 0 5
12626: PUSH
12627: LD_VAR 0 3
12631: ARRAY
12632: PUSH
12633: LD_INT 1
12635: ARRAY
12636: PPUSH
12637: LD_VAR 0 5
12641: PUSH
12642: LD_VAR 0 3
12646: ARRAY
12647: PUSH
12648: LD_INT 2
12650: ARRAY
12651: PPUSH
12652: LD_VAR 0 5
12656: PUSH
12657: LD_VAR 0 3
12661: ARRAY
12662: PUSH
12663: LD_INT 3
12665: ARRAY
12666: PPUSH
12667: LD_VAR 0 5
12671: PUSH
12672: LD_VAR 0 3
12676: ARRAY
12677: PUSH
12678: LD_INT 4
12680: ARRAY
12681: PPUSH
12682: CALL_OW 205
12686: GO 12614
12688: POP
12689: POP
// end ; end ;
12690: LD_VAR 0 2
12694: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12695: LD_INT 0
12697: PPUSH
12698: PPUSH
12699: PPUSH
12700: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12701: LD_ADDR_VAR 0 3
12705: PUSH
12706: LD_INT 22
12708: PUSH
12709: LD_INT 2
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 25
12718: PUSH
12719: LD_INT 2
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: PPUSH
12730: CALL_OW 69
12734: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12735: LD_VAR 0 3
12739: PPUSH
12740: LD_INT 0
12742: PPUSH
12743: LD_INT 71
12745: PPUSH
12746: LD_INT 15
12748: PPUSH
12749: LD_INT 3
12751: PPUSH
12752: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12756: LD_ADDR_VAR 0 4
12760: PUSH
12761: LD_INT 6
12763: PUSH
12764: LD_INT 77
12766: PUSH
12767: LD_INT 18
12769: PUSH
12770: LD_INT 3
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 4
12781: PUSH
12782: LD_INT 77
12784: PUSH
12785: LD_INT 26
12787: PUSH
12788: LD_INT 0
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 31
12799: PUSH
12800: LD_INT 82
12802: PUSH
12803: LD_INT 28
12805: PUSH
12806: LD_INT 0
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 31
12817: PUSH
12818: LD_INT 84
12820: PUSH
12821: LD_INT 21
12823: PUSH
12824: LD_INT 3
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: PUSH
12833: LD_INT 31
12835: PUSH
12836: LD_INT 66
12838: PUSH
12839: LD_INT 14
12841: PUSH
12842: LD_INT 2
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: LIST
12850: PUSH
12851: LD_INT 27
12853: PUSH
12854: LD_INT 67
12856: PUSH
12857: LD_INT 18
12859: PUSH
12860: LD_INT 5
12862: PUSH
12863: EMPTY
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: PUSH
12869: LD_INT 27
12871: PUSH
12872: LD_INT 69
12874: PUSH
12875: LD_INT 23
12877: PUSH
12878: LD_INT 2
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: ST_TO_ADDR
// for i := 1 to buildingsTab do
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: DOUBLE
12902: LD_INT 1
12904: DEC
12905: ST_TO_ADDR
12906: LD_VAR 0 4
12910: PUSH
12911: FOR_TO
12912: IFFALSE 12985
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12914: LD_VAR 0 3
12918: PPUSH
12919: LD_VAR 0 4
12923: PUSH
12924: LD_VAR 0 2
12928: ARRAY
12929: PUSH
12930: LD_INT 1
12932: ARRAY
12933: PPUSH
12934: LD_VAR 0 4
12938: PUSH
12939: LD_VAR 0 2
12943: ARRAY
12944: PUSH
12945: LD_INT 2
12947: ARRAY
12948: PPUSH
12949: LD_VAR 0 4
12953: PUSH
12954: LD_VAR 0 2
12958: ARRAY
12959: PUSH
12960: LD_INT 3
12962: ARRAY
12963: PPUSH
12964: LD_VAR 0 4
12968: PUSH
12969: LD_VAR 0 2
12973: ARRAY
12974: PUSH
12975: LD_INT 4
12977: ARRAY
12978: PPUSH
12979: CALL_OW 205
12983: GO 12911
12985: POP
12986: POP
// end ;
12987: LD_VAR 0 1
12991: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12992: LD_INT 0
12994: PPUSH
12995: PPUSH
12996: PPUSH
12997: PPUSH
12998: PPUSH
12999: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13000: LD_ADDR_VAR 0 7
13004: PUSH
13005: LD_INT 22
13007: PUSH
13008: LD_VAR 0 1
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: PUSH
13017: LD_INT 25
13019: PUSH
13020: LD_INT 9
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PPUSH
13031: CALL_OW 69
13035: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13036: LD_ADDR_VAR 0 8
13040: PUSH
13041: LD_INT 22
13043: PUSH
13044: LD_VAR 0 2
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: LD_INT 21
13058: PUSH
13059: LD_INT 3
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13079: LD_ADDR_VAR 0 5
13083: PUSH
13084: LD_INT 1
13086: PPUSH
13087: LD_INT 3
13089: PPUSH
13090: CALL_OW 12
13094: ST_TO_ADDR
// for i = 1 to list do
13095: LD_ADDR_VAR 0 6
13099: PUSH
13100: DOUBLE
13101: LD_INT 1
13103: DEC
13104: ST_TO_ADDR
13105: LD_VAR 0 7
13109: PUSH
13110: FOR_TO
13111: IFFALSE 14101
// for ta in filter do
13113: LD_ADDR_VAR 0 4
13117: PUSH
13118: LD_VAR 0 8
13122: PUSH
13123: FOR_IN
13124: IFFALSE 14097
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13126: LD_VAR 0 7
13130: PUSH
13131: LD_VAR 0 6
13135: ARRAY
13136: PPUSH
13137: LD_VAR 0 4
13141: PPUSH
13142: CALL_OW 296
13146: PUSH
13147: LD_INT 15
13149: LESSEQUAL
13150: IFFALSE 14095
// begin case c of 1 :
13152: LD_VAR 0 5
13156: PUSH
13157: LD_INT 1
13159: DOUBLE
13160: EQUAL
13161: IFTRUE 13165
13163: GO 13597
13165: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13166: LD_VAR 0 7
13170: PUSH
13171: LD_VAR 0 6
13175: ARRAY
13176: PPUSH
13177: LD_VAR 0 4
13181: PPUSH
13182: CALL_OW 250
13186: PPUSH
13187: LD_VAR 0 4
13191: PPUSH
13192: CALL_OW 251
13196: PPUSH
13197: CALL_OW 154
// if eventVar2 = 0 then
13201: LD_EXP 62
13205: PUSH
13206: LD_INT 0
13208: EQUAL
13209: IFFALSE 13595
// begin eventVar2 = 1 ;
13211: LD_ADDR_EXP 62
13215: PUSH
13216: LD_INT 1
13218: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13219: LD_INT 245
13221: PPUSH
13222: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13226: LD_VAR 0 4
13230: PPUSH
13231: CALL_OW 250
13235: PPUSH
13236: LD_VAR 0 4
13240: PPUSH
13241: CALL_OW 251
13245: PPUSH
13246: CALL_OW 84
// DialogueOn ;
13250: CALL_OW 6
// if IsOK ( Cyrus ) then
13254: LD_EXP 5
13258: PPUSH
13259: CALL_OW 302
13263: IFFALSE 13279
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13265: LD_EXP 5
13269: PPUSH
13270: LD_STRING D9a-Cyrus-1
13272: PPUSH
13273: CALL_OW 88
// end else
13277: GO 13401
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13279: LD_INT 22
13281: PUSH
13282: LD_INT 1
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 26
13291: PUSH
13292: LD_INT 1
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: LD_INT 2
13301: PUSH
13302: LD_INT 25
13304: PUSH
13305: LD_INT 1
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 25
13314: PUSH
13315: LD_INT 2
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 25
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: PUSH
13332: LD_INT 25
13334: PUSH
13335: LD_INT 4
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 25
13344: PUSH
13345: LD_INT 5
13347: PUSH
13348: EMPTY
13349: LIST
13350: LIST
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: PPUSH
13365: CALL_OW 69
13369: PUSH
13370: LD_EXP 1
13374: PUSH
13375: LD_EXP 14
13379: PUSH
13380: LD_EXP 5
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: LIST
13389: DIFF
13390: PPUSH
13391: LD_STRING D9a-Sol1-1
13393: PPUSH
13394: LD_STRING D9a-Sol1-1
13396: PPUSH
13397: CALL 9658 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13401: LD_INT 22
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 26
13413: PUSH
13414: LD_INT 1
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: LD_INT 25
13426: PUSH
13427: LD_INT 1
13429: PUSH
13430: EMPTY
13431: LIST
13432: LIST
13433: PUSH
13434: LD_INT 25
13436: PUSH
13437: LD_INT 2
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: PUSH
13444: LD_INT 25
13446: PUSH
13447: LD_INT 3
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PUSH
13454: LD_INT 25
13456: PUSH
13457: LD_INT 4
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 25
13466: PUSH
13467: LD_INT 5
13469: PUSH
13470: EMPTY
13471: LIST
13472: LIST
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: LIST
13486: PPUSH
13487: CALL_OW 69
13491: PUSH
13492: LD_EXP 1
13496: PUSH
13497: LD_EXP 14
13501: PUSH
13502: LD_EXP 5
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: DIFF
13512: PPUSH
13513: LD_STRING D9b-Sol1-1
13515: PPUSH
13516: LD_STRING D9b-Sol1-1
13518: PPUSH
13519: CALL 9658 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13523: LD_STRING 09_arInfo
13525: PPUSH
13526: LD_INT 0
13528: PPUSH
13529: CALL_OW 30
13533: PUSH
13534: LD_INT 1
13536: EQUAL
13537: IFFALSE 13551
// Say ( JMM , D9a-JMM-1 ) ;
13539: LD_EXP 1
13543: PPUSH
13544: LD_STRING D9a-JMM-1
13546: PPUSH
13547: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13551: LD_EXP 1
13555: PPUSH
13556: LD_STRING D9c-JMM-1
13558: PPUSH
13559: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13563: LD_INT 12
13565: PPUSH
13566: LD_INT 1
13568: PPUSH
13569: CALL_OW 321
13573: PUSH
13574: LD_INT 2
13576: EQUAL
13577: IFFALSE 13591
// Say ( JMM , D9c-JMM-1a ) ;
13579: LD_EXP 1
13583: PPUSH
13584: LD_STRING D9c-JMM-1a
13586: PPUSH
13587: CALL_OW 88
// DialogueOff ;
13591: CALL_OW 7
// end ; end ; 2 :
13595: GO 14095
13597: LD_INT 2
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 14063
13605: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13606: LD_VAR 0 7
13610: PUSH
13611: LD_VAR 0 6
13615: ARRAY
13616: PPUSH
13617: LD_VAR 0 4
13621: PPUSH
13622: CALL_OW 250
13626: PUSH
13627: LD_INT 1
13629: NEG
13630: PPUSH
13631: LD_INT 1
13633: PPUSH
13634: CALL_OW 12
13638: PLUS
13639: PPUSH
13640: LD_VAR 0 4
13644: PPUSH
13645: CALL_OW 251
13649: PUSH
13650: LD_INT 1
13652: NEG
13653: PPUSH
13654: LD_INT 1
13656: PPUSH
13657: CALL_OW 12
13661: PLUS
13662: PPUSH
13663: CALL_OW 153
// if eventVar2 = 0 then
13667: LD_EXP 62
13671: PUSH
13672: LD_INT 0
13674: EQUAL
13675: IFFALSE 14061
// begin eventVar2 = 1 ;
13677: LD_ADDR_EXP 62
13681: PUSH
13682: LD_INT 1
13684: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13685: LD_INT 245
13687: PPUSH
13688: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13692: LD_VAR 0 4
13696: PPUSH
13697: CALL_OW 250
13701: PPUSH
13702: LD_VAR 0 4
13706: PPUSH
13707: CALL_OW 251
13711: PPUSH
13712: CALL_OW 84
// DialogueOn ;
13716: CALL_OW 6
// if IsOK ( Cyrus ) then
13720: LD_EXP 5
13724: PPUSH
13725: CALL_OW 302
13729: IFFALSE 13745
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13731: LD_EXP 5
13735: PPUSH
13736: LD_STRING D9a-Cyrus-1
13738: PPUSH
13739: CALL_OW 88
// end else
13743: GO 13867
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13745: LD_INT 22
13747: PUSH
13748: LD_INT 1
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: PUSH
13755: LD_INT 26
13757: PUSH
13758: LD_INT 1
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 2
13767: PUSH
13768: LD_INT 25
13770: PUSH
13771: LD_INT 1
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 25
13780: PUSH
13781: LD_INT 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 3
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 25
13800: PUSH
13801: LD_INT 4
13803: PUSH
13804: EMPTY
13805: LIST
13806: LIST
13807: PUSH
13808: LD_INT 25
13810: PUSH
13811: LD_INT 5
13813: PUSH
13814: EMPTY
13815: LIST
13816: LIST
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: PPUSH
13831: CALL_OW 69
13835: PUSH
13836: LD_EXP 1
13840: PUSH
13841: LD_EXP 14
13845: PUSH
13846: LD_EXP 5
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: DIFF
13856: PPUSH
13857: LD_STRING D9a-Sol1-1
13859: PPUSH
13860: LD_STRING D9a-Sol1-1
13862: PPUSH
13863: CALL 9658 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13867: LD_INT 22
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 26
13879: PUSH
13880: LD_INT 1
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 2
13889: PUSH
13890: LD_INT 25
13892: PUSH
13893: LD_INT 1
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 25
13902: PUSH
13903: LD_INT 2
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: LD_INT 25
13912: PUSH
13913: LD_INT 3
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 25
13922: PUSH
13923: LD_INT 4
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: LD_INT 25
13932: PUSH
13933: LD_INT 5
13935: PUSH
13936: EMPTY
13937: LIST
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: LIST
13952: PPUSH
13953: CALL_OW 69
13957: PUSH
13958: LD_EXP 1
13962: PUSH
13963: LD_EXP 14
13967: PUSH
13968: LD_EXP 5
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: DIFF
13978: PPUSH
13979: LD_STRING D9b-Sol1-1
13981: PPUSH
13982: LD_STRING D9b-Sol1-1
13984: PPUSH
13985: CALL 9658 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13989: LD_STRING 09_arInfo
13991: PPUSH
13992: LD_INT 0
13994: PPUSH
13995: CALL_OW 30
13999: PUSH
14000: LD_INT 1
14002: EQUAL
14003: IFFALSE 14017
// Say ( JMM , D9a-JMM-1 ) ;
14005: LD_EXP 1
14009: PPUSH
14010: LD_STRING D9a-JMM-1
14012: PPUSH
14013: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14017: LD_EXP 1
14021: PPUSH
14022: LD_STRING D9c-JMM-1
14024: PPUSH
14025: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14029: LD_INT 12
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: CALL_OW 321
14039: PUSH
14040: LD_INT 2
14042: EQUAL
14043: IFFALSE 14057
// Say ( JMM , D9c-JMM-1a ) ;
14045: LD_EXP 1
14049: PPUSH
14050: LD_STRING D9c-JMM-1a
14052: PPUSH
14053: CALL_OW 88
// DialogueOff ;
14057: CALL_OW 7
// end ; end ; 3 :
14061: GO 14095
14063: LD_INT 3
14065: DOUBLE
14066: EQUAL
14067: IFTRUE 14071
14069: GO 14094
14071: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14072: LD_VAR 0 7
14076: PUSH
14077: LD_VAR 0 6
14081: ARRAY
14082: PPUSH
14083: LD_VAR 0 4
14087: PPUSH
14088: CALL_OW 115
14092: GO 14095
14094: POP
// end ; end ;
14095: GO 13123
14097: POP
14098: POP
14099: GO 13110
14101: POP
14102: POP
// end ;
14103: LD_VAR 0 3
14107: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14108: LD_INT 0
14110: PPUSH
14111: PPUSH
14112: PPUSH
14113: PPUSH
// for i = 1 to 72 do
14114: LD_ADDR_VAR 0 5
14118: PUSH
14119: DOUBLE
14120: LD_INT 1
14122: DEC
14123: ST_TO_ADDR
14124: LD_INT 72
14126: PUSH
14127: FOR_TO
14128: IFFALSE 14186
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14130: LD_VAR 0 5
14134: PPUSH
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 321
14144: PUSH
14145: LD_INT 1
14147: EQUAL
14148: PUSH
14149: LD_VAR 0 5
14153: PPUSH
14154: LD_VAR 0 3
14158: PPUSH
14159: CALL_OW 482
14163: PUSH
14164: LD_INT 1
14166: EQUAL
14167: AND
14168: IFFALSE 14184
// AddComResearch ( lab , i ) ;
14170: LD_VAR 0 2
14174: PPUSH
14175: LD_VAR 0 5
14179: PPUSH
14180: CALL_OW 184
14184: GO 14127
14186: POP
14187: POP
// end ;
14188: LD_VAR 0 4
14192: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14193: LD_INT 0
14195: PPUSH
14196: PPUSH
14197: PPUSH
14198: PPUSH
14199: PPUSH
14200: PPUSH
14201: PPUSH
14202: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14203: LD_ADDR_VAR 0 6
14207: PUSH
14208: LD_INT 22
14210: PUSH
14211: LD_VAR 0 1
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 56
14222: PUSH
14223: EMPTY
14224: LIST
14225: PUSH
14226: LD_INT 24
14228: PUSH
14229: LD_INT 700
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 3
14238: PUSH
14239: LD_INT 60
14241: PUSH
14242: EMPTY
14243: LIST
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 2
14251: PUSH
14252: LD_INT 25
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 25
14264: PUSH
14265: LD_INT 9
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PUSH
14272: EMPTY
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: PPUSH
14284: CALL_OW 69
14288: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14289: LD_ADDR_VAR 0 7
14293: PUSH
14294: LD_INT 22
14296: PUSH
14297: LD_VAR 0 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 30
14308: PUSH
14309: LD_INT 32
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 58
14318: PUSH
14319: EMPTY
14320: LIST
14321: PUSH
14322: LD_INT 24
14324: PUSH
14325: LD_INT 251
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 69
14342: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14343: LD_ADDR_VAR 0 9
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_VAR 0 1
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: LD_INT 30
14365: PUSH
14366: LD_INT 4
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 30
14375: PUSH
14376: LD_INT 5
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: LD_INT 24
14390: PUSH
14391: LD_INT 251
14393: PUSH
14394: EMPTY
14395: LIST
14396: LIST
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: LIST
14402: PPUSH
14403: CALL_OW 69
14407: ST_TO_ADDR
// if barrackList > 0 then
14408: LD_VAR 0 9
14412: PUSH
14413: LD_INT 0
14415: GREATER
14416: IFFALSE 14551
// begin if turretList = 0 then
14418: LD_VAR 0 7
14422: PUSH
14423: LD_INT 0
14425: EQUAL
14426: IFFALSE 14475
// begin for i in soldiers_list do
14428: LD_ADDR_VAR 0 4
14432: PUSH
14433: LD_VAR 0 6
14437: PUSH
14438: FOR_IN
14439: IFFALSE 14471
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14441: LD_VAR 0 4
14445: PPUSH
14446: LD_VAR 0 9
14450: PUSH
14451: LD_INT 1
14453: PPUSH
14454: LD_VAR 0 9
14458: PPUSH
14459: CALL_OW 12
14463: ARRAY
14464: PPUSH
14465: CALL_OW 120
14469: GO 14438
14471: POP
14472: POP
// end else
14473: GO 14551
// begin for i in barrackList do
14475: LD_ADDR_VAR 0 4
14479: PUSH
14480: LD_VAR 0 9
14484: PUSH
14485: FOR_IN
14486: IFFALSE 14549
// begin insideUnits = UnitsInside ( i ) ;
14488: LD_ADDR_VAR 0 10
14492: PUSH
14493: LD_VAR 0 4
14497: PPUSH
14498: CALL_OW 313
14502: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14503: LD_VAR 0 10
14507: PUSH
14508: LD_INT 1
14510: ARRAY
14511: PPUSH
14512: LD_VAR 0 7
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14525: LD_VAR 0 6
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PPUSH
14534: LD_VAR 0 7
14538: PUSH
14539: LD_INT 1
14541: ARRAY
14542: PPUSH
14543: CALL_OW 120
// end ;
14547: GO 14485
14549: POP
14550: POP
// end ; end ; end ;
14551: LD_VAR 0 3
14555: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14556: LD_INT 0
14558: PPUSH
14559: PPUSH
14560: PPUSH
14561: PPUSH
14562: PPUSH
14563: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14564: LD_ADDR_VAR 0 6
14568: PUSH
14569: LD_VAR 0 2
14573: PPUSH
14574: CALL_OW 313
14578: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14579: LD_ADDR_VAR 0 7
14583: PUSH
14584: LD_INT 22
14586: PUSH
14587: LD_VAR 0 1
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: LD_INT 25
14598: PUSH
14599: LD_INT 2
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 24
14608: PUSH
14609: LD_INT 1000
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: LD_INT 54
14621: PUSH
14622: EMPTY
14623: LIST
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14640: LD_ADDR_VAR 0 4
14644: PUSH
14645: LD_INT 22
14647: PUSH
14648: LD_VAR 0 1
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 24
14672: PUSH
14673: LD_INT 1000
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: PPUSH
14692: CALL_OW 69
14696: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14697: LD_VAR 0 4
14701: NOT
14702: PUSH
14703: LD_VAR 0 7
14707: NOT
14708: AND
14709: PUSH
14710: LD_EXP 42
14714: NOT
14715: AND
14716: IFFALSE 14720
// exit ;
14718: GO 14911
// if buildings_list > 0 and engineerOkInside then
14720: LD_VAR 0 4
14724: PUSH
14725: LD_INT 0
14727: GREATER
14728: PUSH
14729: LD_VAR 0 6
14733: AND
14734: IFFALSE 14788
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14736: LD_ADDR_VAR 0 5
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_VAR 0 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 25
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: PUSH
14772: FOR_IN
14773: IFFALSE 14786
// ComExitBuilding ( i ) ;
14775: LD_VAR 0 5
14779: PPUSH
14780: CALL_OW 122
14784: GO 14772
14786: POP
14787: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14788: LD_VAR 0 4
14792: PUSH
14793: LD_INT 0
14795: GREATER
14796: PUSH
14797: LD_VAR 0 7
14801: PUSH
14802: LD_INT 0
14804: GREATER
14805: AND
14806: IFFALSE 14860
// begin for i in engineerOkOutside do
14808: LD_ADDR_VAR 0 5
14812: PUSH
14813: LD_VAR 0 7
14817: PUSH
14818: FOR_IN
14819: IFFALSE 14858
// for j in buildings_list do
14821: LD_ADDR_VAR 0 8
14825: PUSH
14826: LD_VAR 0 4
14830: PUSH
14831: FOR_IN
14832: IFFALSE 14854
// ComRepairBuilding ( i , j [ 1 ] ) ;
14834: LD_VAR 0 5
14838: PPUSH
14839: LD_VAR 0 8
14843: PUSH
14844: LD_INT 1
14846: ARRAY
14847: PPUSH
14848: CALL_OW 130
14852: GO 14831
14854: POP
14855: POP
14856: GO 14818
14858: POP
14859: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14860: LD_VAR 0 4
14864: PUSH
14865: LD_INT 0
14867: EQUAL
14868: PUSH
14869: LD_VAR 0 7
14873: PUSH
14874: LD_INT 0
14876: GREATER
14877: AND
14878: IFFALSE 14911
// for i in engineerOkOutside do
14880: LD_ADDR_VAR 0 5
14884: PUSH
14885: LD_VAR 0 7
14889: PUSH
14890: FOR_IN
14891: IFFALSE 14909
// ComEnterUnit ( i , building ) ;
14893: LD_VAR 0 5
14897: PPUSH
14898: LD_VAR 0 2
14902: PPUSH
14903: CALL_OW 120
14907: GO 14890
14909: POP
14910: POP
// end ;
14911: LD_VAR 0 3
14915: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14916: LD_INT 0
14918: PPUSH
14919: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14920: LD_INT 22
14922: PUSH
14923: LD_VAR 0 1
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 25
14934: PUSH
14935: LD_INT 2
14937: PUSH
14938: EMPTY
14939: LIST
14940: LIST
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 69
14950: PUSH
14951: LD_INT 0
14953: GREATER
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_VAR 0 1
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 21
14969: PUSH
14970: LD_INT 3
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 3
14979: PUSH
14980: LD_INT 24
14982: PUSH
14983: LD_INT 1000
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: LIST
14998: PPUSH
14999: CALL_OW 69
15003: PUSH
15004: LD_INT 0
15006: EQUAL
15007: AND
15008: PUSH
15009: LD_VAR 0 2
15013: PUSH
15014: LD_INT 0
15016: GREATER
15017: AND
15018: IFFALSE 15117
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15020: LD_ADDR_VAR 0 4
15024: PUSH
15025: LD_INT 22
15027: PUSH
15028: LD_VAR 0 1
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 25
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: PUSH
15056: FOR_IN
15057: IFFALSE 15115
// begin AddComExitBuilding ( i ) ;
15059: LD_VAR 0 4
15063: PPUSH
15064: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15068: LD_VAR 0 4
15072: PPUSH
15073: LD_VAR 0 2
15077: PUSH
15078: LD_INT 1
15080: ARRAY
15081: PPUSH
15082: LD_VAR 0 2
15086: PUSH
15087: LD_INT 2
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 2
15095: PUSH
15096: LD_INT 3
15098: ARRAY
15099: PPUSH
15100: LD_VAR 0 2
15104: PUSH
15105: LD_INT 4
15107: ARRAY
15108: PPUSH
15109: CALL_OW 205
// end ;
15113: GO 15056
15115: POP
15116: POP
// end ; end ;
15117: LD_VAR 0 3
15121: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15122: LD_INT 0
15124: PPUSH
15125: PPUSH
15126: PPUSH
15127: PPUSH
15128: PPUSH
15129: PPUSH
15130: PPUSH
15131: PPUSH
15132: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15133: LD_ADDR_VAR 0 6
15137: PUSH
15138: LD_INT 22
15140: PUSH
15141: LD_VAR 0 1
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PUSH
15150: LD_INT 25
15152: PUSH
15153: LD_INT 4
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: PUSH
15160: LD_INT 24
15162: PUSH
15163: LD_INT 251
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: PPUSH
15175: CALL_OW 69
15179: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15180: LD_ADDR_VAR 0 7
15184: PUSH
15185: LD_VAR 0 3
15189: PPUSH
15190: LD_INT 22
15192: PUSH
15193: LD_VAR 0 1
15197: PUSH
15198: EMPTY
15199: LIST
15200: LIST
15201: PUSH
15202: LD_INT 25
15204: PUSH
15205: LD_INT 4
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 50
15214: PUSH
15215: EMPTY
15216: LIST
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: LIST
15222: PPUSH
15223: CALL_OW 70
15227: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15228: LD_ADDR_VAR 0 10
15232: PUSH
15233: LD_VAR 0 3
15237: PPUSH
15238: LD_INT 22
15240: PUSH
15241: LD_VAR 0 1
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 3
15262: PUSH
15263: LD_INT 25
15265: PUSH
15266: LD_INT 3
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: LD_INT 3
15279: PUSH
15280: LD_INT 24
15282: PUSH
15283: LD_INT 750
15285: PUSH
15286: EMPTY
15287: LIST
15288: LIST
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: PPUSH
15300: CALL_OW 70
15304: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15305: LD_ADDR_VAR 0 11
15309: PUSH
15310: LD_VAR 0 2
15314: PPUSH
15315: LD_INT 22
15317: PUSH
15318: LD_VAR 0 1
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: LD_INT 21
15329: PUSH
15330: LD_INT 1
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 3
15339: PUSH
15340: LD_INT 25
15342: PUSH
15343: LD_INT 3
15345: PUSH
15346: EMPTY
15347: LIST
15348: LIST
15349: PUSH
15350: EMPTY
15351: LIST
15352: LIST
15353: PUSH
15354: LD_INT 3
15356: PUSH
15357: LD_INT 24
15359: PUSH
15360: LD_INT 1000
15362: PUSH
15363: EMPTY
15364: LIST
15365: LIST
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: EMPTY
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: PPUSH
15377: CALL_OW 70
15381: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15382: LD_VAR 0 10
15386: NOT
15387: PUSH
15388: LD_VAR 0 7
15392: NOT
15393: AND
15394: PUSH
15395: LD_VAR 0 11
15399: NOT
15400: AND
15401: IFFALSE 15405
// exit ;
15403: GO 15665
// if damageUnits > 0 and sci_list > 0 then
15405: LD_VAR 0 10
15409: PUSH
15410: LD_INT 0
15412: GREATER
15413: PUSH
15414: LD_VAR 0 6
15418: PUSH
15419: LD_INT 0
15421: GREATER
15422: AND
15423: IFFALSE 15456
// for i in damageUnits do
15425: LD_ADDR_VAR 0 8
15429: PUSH
15430: LD_VAR 0 10
15434: PUSH
15435: FOR_IN
15436: IFFALSE 15454
// ComMoveToArea ( i , healArea ) ;
15438: LD_VAR 0 8
15442: PPUSH
15443: LD_VAR 0 2
15447: PPUSH
15448: CALL_OW 113
15452: GO 15435
15454: POP
15455: POP
// if unitsToHeal > 0 and sci_list > 0 then
15456: LD_VAR 0 11
15460: PUSH
15461: LD_INT 0
15463: GREATER
15464: PUSH
15465: LD_VAR 0 6
15469: PUSH
15470: LD_INT 0
15472: GREATER
15473: AND
15474: IFFALSE 15533
// begin for i in sci_list do
15476: LD_ADDR_VAR 0 8
15480: PUSH
15481: LD_VAR 0 6
15485: PUSH
15486: FOR_IN
15487: IFFALSE 15531
// begin ComExitBuilding ( i ) ;
15489: LD_VAR 0 8
15493: PPUSH
15494: CALL_OW 122
// for j in unitsToHeal do
15498: LD_ADDR_VAR 0 9
15502: PUSH
15503: LD_VAR 0 11
15507: PUSH
15508: FOR_IN
15509: IFFALSE 15527
// AddComHeal ( i , j ) ;
15511: LD_VAR 0 8
15515: PPUSH
15516: LD_VAR 0 9
15520: PPUSH
15521: CALL_OW 188
15525: GO 15508
15527: POP
15528: POP
// end ;
15529: GO 15486
15531: POP
15532: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15533: LD_VAR 0 10
15537: PUSH
15538: LD_INT 0
15540: EQUAL
15541: PUSH
15542: LD_VAR 0 11
15546: PUSH
15547: LD_INT 0
15549: EQUAL
15550: AND
15551: PUSH
15552: LD_VAR 0 7
15556: PUSH
15557: LD_INT 0
15559: GREATER
15560: AND
15561: IFFALSE 15665
// for i in sci_listOutside do
15563: LD_ADDR_VAR 0 8
15567: PUSH
15568: LD_VAR 0 7
15572: PUSH
15573: FOR_IN
15574: IFFALSE 15663
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15576: LD_ADDR_VAR 0 12
15580: PUSH
15581: LD_INT 22
15583: PUSH
15584: LD_VAR 0 1
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: PUSH
15593: LD_INT 21
15595: PUSH
15596: LD_INT 3
15598: PUSH
15599: EMPTY
15600: LIST
15601: LIST
15602: PUSH
15603: LD_INT 30
15605: PUSH
15606: LD_INT 8
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: PUSH
15613: EMPTY
15614: LIST
15615: LIST
15616: LIST
15617: PPUSH
15618: CALL_OW 69
15622: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15623: LD_ADDR_VAR 0 13
15627: PUSH
15628: LD_INT 1
15630: PPUSH
15631: LD_VAR 0 12
15635: PPUSH
15636: CALL_OW 12
15640: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15641: LD_VAR 0 8
15645: PPUSH
15646: LD_VAR 0 12
15650: PUSH
15651: LD_VAR 0 13
15655: ARRAY
15656: PPUSH
15657: CALL_OW 120
// end ;
15661: GO 15573
15663: POP
15664: POP
// end ;
15665: LD_VAR 0 5
15669: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15670: LD_INT 0
15672: PPUSH
15673: PPUSH
15674: PPUSH
15675: PPUSH
15676: PPUSH
15677: PPUSH
15678: PPUSH
15679: PPUSH
15680: PPUSH
15681: PPUSH
15682: PPUSH
// amChassisTab = [ ] ;
15683: LD_ADDR_VAR 0 19
15687: PUSH
15688: EMPTY
15689: ST_TO_ADDR
// arChassisTab = [ ] ;
15690: LD_ADDR_VAR 0 18
15694: PUSH
15695: EMPTY
15696: ST_TO_ADDR
// ruChassisTab = [ ] ;
15697: LD_ADDR_VAR 0 17
15701: PUSH
15702: EMPTY
15703: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15704: LD_INT 35
15706: PPUSH
15707: CALL_OW 67
// if nation = 1 then
15711: LD_VAR 0 5
15715: PUSH
15716: LD_INT 1
15718: EQUAL
15719: IFFALSE 16224
// begin uc_side = side ;
15721: LD_ADDR_OWVAR 20
15725: PUSH
15726: LD_VAR 0 2
15730: ST_TO_ADDR
// uc_nation = nation ;
15731: LD_ADDR_OWVAR 21
15735: PUSH
15736: LD_VAR 0 5
15740: ST_TO_ADDR
// vc_engine = vehengine ;
15741: LD_ADDR_OWVAR 39
15745: PUSH
15746: LD_VAR 0 6
15750: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15751: LD_ADDR_OWVAR 38
15755: PUSH
15756: LD_VAR 0 7
15760: PUSH
15761: LD_INT 1
15763: PPUSH
15764: LD_VAR 0 7
15768: PPUSH
15769: CALL_OW 12
15773: ARRAY
15774: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15775: LD_ADDR_OWVAR 40
15779: PUSH
15780: LD_VAR 0 10
15784: PUSH
15785: LD_INT 1
15787: PPUSH
15788: LD_VAR 0 10
15792: PPUSH
15793: CALL_OW 12
15797: ARRAY
15798: ST_TO_ADDR
// for j = 1 to AMWeapon do
15799: LD_ADDR_VAR 0 14
15803: PUSH
15804: DOUBLE
15805: LD_INT 1
15807: DEC
15808: ST_TO_ADDR
15809: LD_VAR 0 10
15813: PUSH
15814: FOR_TO
15815: IFFALSE 16116
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15817: LD_VAR 0 10
15821: PUSH
15822: LD_VAR 0 14
15826: ARRAY
15827: PUSH
15828: LD_INT 2
15830: EQUAL
15831: PUSH
15832: LD_VAR 0 10
15836: PUSH
15837: LD_VAR 0 14
15841: ARRAY
15842: PUSH
15843: LD_INT 3
15845: EQUAL
15846: OR
15847: IFFALSE 15900
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15849: LD_ADDR_VAR 0 19
15853: PUSH
15854: LD_INT 1
15856: PUSH
15857: LD_INT 2
15859: PUSH
15860: LD_INT 3
15862: PUSH
15863: LD_INT 4
15865: PUSH
15866: LD_INT 5
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15876: LD_ADDR_OWVAR 37
15880: PUSH
15881: LD_VAR 0 19
15885: PUSH
15886: LD_INT 1
15888: PPUSH
15889: LD_VAR 0 19
15893: PPUSH
15894: CALL_OW 12
15898: ARRAY
15899: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15900: LD_VAR 0 10
15904: PUSH
15905: LD_VAR 0 14
15909: ARRAY
15910: PUSH
15911: LD_INT 4
15913: EQUAL
15914: PUSH
15915: LD_VAR 0 10
15919: PUSH
15920: LD_VAR 0 14
15924: ARRAY
15925: PUSH
15926: LD_INT 5
15928: EQUAL
15929: OR
15930: PUSH
15931: LD_VAR 0 10
15935: PUSH
15936: LD_VAR 0 14
15940: ARRAY
15941: PUSH
15942: LD_INT 9
15944: EQUAL
15945: OR
15946: PUSH
15947: LD_VAR 0 10
15951: PUSH
15952: LD_VAR 0 14
15956: ARRAY
15957: PUSH
15958: LD_INT 11
15960: EQUAL
15961: OR
15962: PUSH
15963: LD_VAR 0 10
15967: PUSH
15968: LD_VAR 0 14
15972: ARRAY
15973: PUSH
15974: LD_INT 7
15976: EQUAL
15977: OR
15978: IFFALSE 16027
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15980: LD_ADDR_VAR 0 19
15984: PUSH
15985: LD_INT 2
15987: PUSH
15988: LD_INT 3
15990: PUSH
15991: LD_INT 4
15993: PUSH
15994: LD_INT 5
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16003: LD_ADDR_OWVAR 37
16007: PUSH
16008: LD_VAR 0 19
16012: PUSH
16013: LD_INT 1
16015: PPUSH
16016: LD_VAR 0 19
16020: PPUSH
16021: CALL_OW 12
16025: ARRAY
16026: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16027: LD_VAR 0 10
16031: PUSH
16032: LD_VAR 0 14
16036: ARRAY
16037: PUSH
16038: LD_INT 8
16040: EQUAL
16041: PUSH
16042: LD_VAR 0 10
16046: PUSH
16047: LD_VAR 0 14
16051: ARRAY
16052: PUSH
16053: LD_INT 6
16055: EQUAL
16056: OR
16057: PUSH
16058: LD_VAR 0 10
16062: PUSH
16063: LD_VAR 0 14
16067: ARRAY
16068: PUSH
16069: LD_INT 10
16071: EQUAL
16072: OR
16073: IFFALSE 16114
// begin amChassisTab = [ 4 , 5 ] ;
16075: LD_ADDR_VAR 0 19
16079: PUSH
16080: LD_INT 4
16082: PUSH
16083: LD_INT 5
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16090: LD_ADDR_OWVAR 37
16094: PUSH
16095: LD_VAR 0 19
16099: PUSH
16100: LD_INT 1
16102: PPUSH
16103: LD_VAR 0 19
16107: PPUSH
16108: CALL_OW 12
16112: ARRAY
16113: ST_TO_ADDR
// end ; end ;
16114: GO 15814
16116: POP
16117: POP
// veh = CreateVehicle ;
16118: LD_ADDR_VAR 0 16
16122: PUSH
16123: CALL_OW 45
16127: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16128: LD_VAR 0 16
16132: PPUSH
16133: LD_VAR 0 1
16137: PPUSH
16138: LD_INT 0
16140: PPUSH
16141: CALL_OW 49
// if vc_control = 1 then
16145: LD_OWVAR 38
16149: PUSH
16150: LD_INT 1
16152: EQUAL
16153: IFFALSE 16210
// begin hc_gallery =  ;
16155: LD_ADDR_OWVAR 33
16159: PUSH
16160: LD_STRING 
16162: ST_TO_ADDR
// hc_name =  ;
16163: LD_ADDR_OWVAR 26
16167: PUSH
16168: LD_STRING 
16170: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16171: LD_INT 0
16173: PPUSH
16174: LD_INT 3
16176: PPUSH
16177: LD_VAR 0 4
16181: PPUSH
16182: CALL_OW 380
// un = CreateHuman ;
16186: LD_ADDR_VAR 0 15
16190: PUSH
16191: CALL_OW 44
16195: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16196: LD_VAR 0 15
16200: PPUSH
16201: LD_VAR 0 16
16205: PPUSH
16206: CALL_OW 52
// end ; i = i + 1 ;
16210: LD_ADDR_VAR 0 13
16214: PUSH
16215: LD_VAR 0 13
16219: PUSH
16220: LD_INT 1
16222: PLUS
16223: ST_TO_ADDR
// end ; if nation = 2 then
16224: LD_VAR 0 5
16228: PUSH
16229: LD_INT 2
16231: EQUAL
16232: IFFALSE 16654
// begin uc_side = side ;
16234: LD_ADDR_OWVAR 20
16238: PUSH
16239: LD_VAR 0 2
16243: ST_TO_ADDR
// uc_nation = nation ;
16244: LD_ADDR_OWVAR 21
16248: PUSH
16249: LD_VAR 0 5
16253: ST_TO_ADDR
// vc_engine = vehengine ;
16254: LD_ADDR_OWVAR 39
16258: PUSH
16259: LD_VAR 0 6
16263: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16264: LD_ADDR_OWVAR 38
16268: PUSH
16269: LD_VAR 0 7
16273: PUSH
16274: LD_INT 1
16276: PPUSH
16277: LD_VAR 0 7
16281: PPUSH
16282: CALL_OW 12
16286: ARRAY
16287: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16288: LD_ADDR_OWVAR 40
16292: PUSH
16293: LD_VAR 0 9
16297: PUSH
16298: LD_INT 1
16300: PPUSH
16301: LD_VAR 0 9
16305: PPUSH
16306: CALL_OW 12
16310: ARRAY
16311: ST_TO_ADDR
// for j = 1 to ARWeapons do
16312: LD_ADDR_VAR 0 14
16316: PUSH
16317: DOUBLE
16318: LD_INT 1
16320: DEC
16321: ST_TO_ADDR
16322: LD_VAR 0 9
16326: PUSH
16327: FOR_TO
16328: IFFALSE 16546
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16330: LD_VAR 0 9
16334: PUSH
16335: LD_VAR 0 14
16339: ARRAY
16340: PUSH
16341: LD_INT 24
16343: EQUAL
16344: PUSH
16345: LD_VAR 0 9
16349: PUSH
16350: LD_VAR 0 14
16354: ARRAY
16355: PUSH
16356: LD_INT 22
16358: EQUAL
16359: OR
16360: PUSH
16361: LD_VAR 0 9
16365: PUSH
16366: LD_VAR 0 14
16370: ARRAY
16371: PUSH
16372: LD_INT 23
16374: EQUAL
16375: OR
16376: PUSH
16377: LD_VAR 0 9
16381: PUSH
16382: LD_VAR 0 14
16386: ARRAY
16387: PUSH
16388: LD_INT 30
16390: EQUAL
16391: OR
16392: IFFALSE 16429
// begin arChassisTab = [ 14 ] ;
16394: LD_ADDR_VAR 0 18
16398: PUSH
16399: LD_INT 14
16401: PUSH
16402: EMPTY
16403: LIST
16404: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16405: LD_ADDR_OWVAR 37
16409: PUSH
16410: LD_VAR 0 18
16414: PUSH
16415: LD_INT 1
16417: PPUSH
16418: LD_VAR 0 18
16422: PPUSH
16423: CALL_OW 12
16427: ARRAY
16428: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16429: LD_VAR 0 9
16433: PUSH
16434: LD_VAR 0 14
16438: ARRAY
16439: PUSH
16440: LD_INT 29
16442: EQUAL
16443: PUSH
16444: LD_VAR 0 9
16448: PUSH
16449: LD_VAR 0 14
16453: ARRAY
16454: PUSH
16455: LD_INT 28
16457: EQUAL
16458: OR
16459: PUSH
16460: LD_VAR 0 9
16464: PUSH
16465: LD_VAR 0 14
16469: ARRAY
16470: PUSH
16471: LD_INT 27
16473: EQUAL
16474: OR
16475: PUSH
16476: LD_VAR 0 9
16480: PUSH
16481: LD_VAR 0 14
16485: ARRAY
16486: PUSH
16487: LD_INT 26
16489: EQUAL
16490: OR
16491: PUSH
16492: LD_VAR 0 9
16496: PUSH
16497: LD_VAR 0 14
16501: ARRAY
16502: PUSH
16503: LD_INT 25
16505: EQUAL
16506: OR
16507: IFFALSE 16544
// begin arChassisTab = [ 14 ] ;
16509: LD_ADDR_VAR 0 18
16513: PUSH
16514: LD_INT 14
16516: PUSH
16517: EMPTY
16518: LIST
16519: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16520: LD_ADDR_OWVAR 37
16524: PUSH
16525: LD_VAR 0 18
16529: PUSH
16530: LD_INT 1
16532: PPUSH
16533: LD_VAR 0 18
16537: PPUSH
16538: CALL_OW 12
16542: ARRAY
16543: ST_TO_ADDR
// end ; end ;
16544: GO 16327
16546: POP
16547: POP
// veh = CreateVehicle ;
16548: LD_ADDR_VAR 0 16
16552: PUSH
16553: CALL_OW 45
16557: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16558: LD_VAR 0 16
16562: PPUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: LD_INT 0
16570: PPUSH
16571: CALL_OW 49
// if vc_control = 1 then
16575: LD_OWVAR 38
16579: PUSH
16580: LD_INT 1
16582: EQUAL
16583: IFFALSE 16640
// begin hc_gallery =  ;
16585: LD_ADDR_OWVAR 33
16589: PUSH
16590: LD_STRING 
16592: ST_TO_ADDR
// hc_name =  ;
16593: LD_ADDR_OWVAR 26
16597: PUSH
16598: LD_STRING 
16600: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16601: LD_INT 0
16603: PPUSH
16604: LD_INT 3
16606: PPUSH
16607: LD_VAR 0 4
16611: PPUSH
16612: CALL_OW 380
// un = CreateHuman ;
16616: LD_ADDR_VAR 0 15
16620: PUSH
16621: CALL_OW 44
16625: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16626: LD_VAR 0 15
16630: PPUSH
16631: LD_VAR 0 16
16635: PPUSH
16636: CALL_OW 52
// end ; i = i + 1 ;
16640: LD_ADDR_VAR 0 13
16644: PUSH
16645: LD_VAR 0 13
16649: PUSH
16650: LD_INT 1
16652: PLUS
16653: ST_TO_ADDR
// end ; if nation = 3 then
16654: LD_VAR 0 5
16658: PUSH
16659: LD_INT 3
16661: EQUAL
16662: IFFALSE 17068
// begin uc_side = side ;
16664: LD_ADDR_OWVAR 20
16668: PUSH
16669: LD_VAR 0 2
16673: ST_TO_ADDR
// uc_nation = nation ;
16674: LD_ADDR_OWVAR 21
16678: PUSH
16679: LD_VAR 0 5
16683: ST_TO_ADDR
// vc_engine = vehengine ;
16684: LD_ADDR_OWVAR 39
16688: PUSH
16689: LD_VAR 0 6
16693: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16694: LD_ADDR_OWVAR 38
16698: PUSH
16699: LD_VAR 0 7
16703: PUSH
16704: LD_INT 1
16706: PPUSH
16707: LD_VAR 0 7
16711: PPUSH
16712: CALL_OW 12
16716: ARRAY
16717: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16718: LD_ADDR_OWVAR 40
16722: PUSH
16723: LD_VAR 0 8
16727: PUSH
16728: LD_INT 1
16730: PPUSH
16731: LD_VAR 0 8
16735: PPUSH
16736: CALL_OW 12
16740: ARRAY
16741: ST_TO_ADDR
// for j = 1 to RuWeapons do
16742: LD_ADDR_VAR 0 14
16746: PUSH
16747: DOUBLE
16748: LD_INT 1
16750: DEC
16751: ST_TO_ADDR
16752: LD_VAR 0 8
16756: PUSH
16757: FOR_TO
16758: IFFALSE 16960
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16760: LD_VAR 0 8
16764: PUSH
16765: LD_VAR 0 14
16769: ARRAY
16770: PUSH
16771: LD_INT 42
16773: EQUAL
16774: PUSH
16775: LD_VAR 0 8
16779: PUSH
16780: LD_VAR 0 14
16784: ARRAY
16785: PUSH
16786: LD_INT 43
16788: EQUAL
16789: OR
16790: PUSH
16791: LD_VAR 0 8
16795: PUSH
16796: LD_VAR 0 14
16800: ARRAY
16801: PUSH
16802: LD_INT 44
16804: EQUAL
16805: OR
16806: PUSH
16807: LD_VAR 0 8
16811: PUSH
16812: LD_VAR 0 14
16816: ARRAY
16817: PUSH
16818: LD_INT 45
16820: EQUAL
16821: OR
16822: PUSH
16823: LD_VAR 0 8
16827: PUSH
16828: LD_VAR 0 14
16832: ARRAY
16833: PUSH
16834: LD_INT 49
16836: EQUAL
16837: OR
16838: IFFALSE 16887
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16840: LD_ADDR_VAR 0 17
16844: PUSH
16845: LD_INT 21
16847: PUSH
16848: LD_INT 22
16850: PUSH
16851: LD_INT 23
16853: PUSH
16854: LD_INT 24
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16863: LD_ADDR_OWVAR 37
16867: PUSH
16868: LD_VAR 0 17
16872: PUSH
16873: LD_INT 1
16875: PPUSH
16876: LD_VAR 0 17
16880: PPUSH
16881: CALL_OW 12
16885: ARRAY
16886: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16887: LD_VAR 0 8
16891: PUSH
16892: LD_VAR 0 14
16896: ARRAY
16897: PUSH
16898: LD_INT 46
16900: EQUAL
16901: PUSH
16902: LD_VAR 0 8
16906: PUSH
16907: LD_VAR 0 14
16911: ARRAY
16912: PUSH
16913: LD_INT 47
16915: EQUAL
16916: OR
16917: IFFALSE 16958
// begin ruChassisTab = [ 23 , 24 ] ;
16919: LD_ADDR_VAR 0 17
16923: PUSH
16924: LD_INT 23
16926: PUSH
16927: LD_INT 24
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16934: LD_ADDR_OWVAR 37
16938: PUSH
16939: LD_VAR 0 17
16943: PUSH
16944: LD_INT 1
16946: PPUSH
16947: LD_VAR 0 17
16951: PPUSH
16952: CALL_OW 12
16956: ARRAY
16957: ST_TO_ADDR
// end ; end ;
16958: GO 16757
16960: POP
16961: POP
// veh = CreateVehicle ;
16962: LD_ADDR_VAR 0 16
16966: PUSH
16967: CALL_OW 45
16971: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16972: LD_VAR 0 16
16976: PPUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: LD_INT 0
16984: PPUSH
16985: CALL_OW 49
// if vc_control = 1 then
16989: LD_OWVAR 38
16993: PUSH
16994: LD_INT 1
16996: EQUAL
16997: IFFALSE 17054
// begin hc_gallery =  ;
16999: LD_ADDR_OWVAR 33
17003: PUSH
17004: LD_STRING 
17006: ST_TO_ADDR
// hc_name =  ;
17007: LD_ADDR_OWVAR 26
17011: PUSH
17012: LD_STRING 
17014: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17015: LD_INT 0
17017: PPUSH
17018: LD_INT 3
17020: PPUSH
17021: LD_VAR 0 4
17025: PPUSH
17026: CALL_OW 380
// un = CreateHuman ;
17030: LD_ADDR_VAR 0 15
17034: PUSH
17035: CALL_OW 44
17039: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17040: LD_VAR 0 15
17044: PPUSH
17045: LD_VAR 0 16
17049: PPUSH
17050: CALL_OW 52
// end ; i = i + 1 ;
17054: LD_ADDR_VAR 0 13
17058: PUSH
17059: LD_VAR 0 13
17063: PUSH
17064: LD_INT 1
17066: PLUS
17067: ST_TO_ADDR
// end ; until i = vehCount ;
17068: LD_VAR 0 13
17072: PUSH
17073: LD_VAR 0 3
17077: EQUAL
17078: IFFALSE 15704
// repeat wait ( 0 0$1 ) ;
17080: LD_INT 35
17082: PPUSH
17083: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17087: LD_ADDR_VAR 0 20
17091: PUSH
17092: LD_INT 22
17094: PUSH
17095: LD_VAR 0 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: LD_INT 21
17106: PUSH
17107: LD_INT 2
17109: PUSH
17110: EMPTY
17111: LIST
17112: LIST
17113: PUSH
17114: LD_INT 24
17116: PUSH
17117: LD_INT 650
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: PPUSH
17129: CALL_OW 69
17133: ST_TO_ADDR
// if vehicleOK_list > 0 then
17134: LD_VAR 0 20
17138: PUSH
17139: LD_INT 0
17141: GREATER
17142: IFFALSE 17333
// begin for i in vehicleOK_list do
17144: LD_ADDR_VAR 0 13
17148: PUSH
17149: LD_VAR 0 20
17153: PUSH
17154: FOR_IN
17155: IFFALSE 17331
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17157: LD_ADDR_VAR 0 21
17161: PUSH
17162: LD_INT 22
17164: PUSH
17165: LD_VAR 0 11
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PPUSH
17174: CALL_OW 69
17178: PPUSH
17179: LD_VAR 0 13
17183: PPUSH
17184: CALL_OW 74
17188: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17189: LD_ADDR_VAR 0 22
17193: PUSH
17194: LD_INT 22
17196: PUSH
17197: LD_VAR 0 11
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: LD_INT 59
17211: PUSH
17212: EMPTY
17213: LIST
17214: PUSH
17215: LD_INT 21
17217: PUSH
17218: LD_INT 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 21
17227: PUSH
17228: LD_INT 2
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: EMPTY
17246: LIST
17247: PPUSH
17248: CALL_OW 69
17252: PPUSH
17253: LD_VAR 0 13
17257: PPUSH
17258: CALL_OW 74
17262: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17263: LD_VAR 0 13
17267: PPUSH
17268: LD_VAR 0 21
17272: PPUSH
17273: CALL_OW 296
17277: PUSH
17278: LD_INT 8
17280: PLUS
17281: PUSH
17282: LD_VAR 0 13
17286: PPUSH
17287: LD_VAR 0 22
17291: PPUSH
17292: CALL_OW 296
17296: LESS
17297: IFFALSE 17315
// begin ComAttackUnit ( i , target1 ) ;
17299: LD_VAR 0 13
17303: PPUSH
17304: LD_VAR 0 21
17308: PPUSH
17309: CALL_OW 115
// end else
17313: GO 17329
// begin ComAttackUnit ( i , target2 ) ;
17315: LD_VAR 0 13
17319: PPUSH
17320: LD_VAR 0 22
17324: PPUSH
17325: CALL_OW 115
// end ; end ;
17329: GO 17154
17331: POP
17332: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17333: LD_INT 22
17335: PUSH
17336: LD_VAR 0 2
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 21
17347: PUSH
17348: LD_INT 2
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PPUSH
17359: CALL_OW 69
17363: PUSH
17364: LD_INT 0
17366: EQUAL
17367: IFFALSE 17080
// end ;
17369: LD_VAR 0 12
17373: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17374: LD_INT 0
17376: PPUSH
17377: PPUSH
17378: PPUSH
17379: PPUSH
17380: PPUSH
17381: PPUSH
17382: PPUSH
17383: PPUSH
17384: PPUSH
17385: PPUSH
17386: PPUSH
// for i = 1 to soldierCount do
17387: LD_ADDR_VAR 0 13
17391: PUSH
17392: DOUBLE
17393: LD_INT 1
17395: DEC
17396: ST_TO_ADDR
17397: LD_VAR 0 3
17401: PUSH
17402: FOR_TO
17403: IFFALSE 17485
// begin uc_side = side ;
17405: LD_ADDR_OWVAR 20
17409: PUSH
17410: LD_VAR 0 1
17414: ST_TO_ADDR
// uc_nation = nation ;
17415: LD_ADDR_OWVAR 21
17419: PUSH
17420: LD_VAR 0 2
17424: ST_TO_ADDR
// hc_name =  ;
17425: LD_ADDR_OWVAR 26
17429: PUSH
17430: LD_STRING 
17432: ST_TO_ADDR
// hc_gallery =  ;
17433: LD_ADDR_OWVAR 33
17437: PUSH
17438: LD_STRING 
17440: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17441: LD_INT 0
17443: PPUSH
17444: LD_INT 1
17446: PPUSH
17447: LD_VAR 0 8
17451: PPUSH
17452: CALL_OW 380
// un = CreateHuman ;
17456: LD_ADDR_VAR 0 15
17460: PUSH
17461: CALL_OW 44
17465: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17466: LD_VAR 0 15
17470: PPUSH
17471: LD_VAR 0 9
17475: PPUSH
17476: LD_INT 0
17478: PPUSH
17479: CALL_OW 49
// end ;
17483: GO 17402
17485: POP
17486: POP
// for i = 1 to sniperCount do
17487: LD_ADDR_VAR 0 13
17491: PUSH
17492: DOUBLE
17493: LD_INT 1
17495: DEC
17496: ST_TO_ADDR
17497: LD_VAR 0 4
17501: PUSH
17502: FOR_TO
17503: IFFALSE 17585
// begin uc_side = side ;
17505: LD_ADDR_OWVAR 20
17509: PUSH
17510: LD_VAR 0 1
17514: ST_TO_ADDR
// uc_nation = nation ;
17515: LD_ADDR_OWVAR 21
17519: PUSH
17520: LD_VAR 0 2
17524: ST_TO_ADDR
// hc_name =  ;
17525: LD_ADDR_OWVAR 26
17529: PUSH
17530: LD_STRING 
17532: ST_TO_ADDR
// hc_gallery =  ;
17533: LD_ADDR_OWVAR 33
17537: PUSH
17538: LD_STRING 
17540: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17541: LD_INT 0
17543: PPUSH
17544: LD_INT 5
17546: PPUSH
17547: LD_VAR 0 8
17551: PPUSH
17552: CALL_OW 380
// un = CreateHuman ;
17556: LD_ADDR_VAR 0 15
17560: PUSH
17561: CALL_OW 44
17565: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17566: LD_VAR 0 15
17570: PPUSH
17571: LD_VAR 0 9
17575: PPUSH
17576: LD_INT 0
17578: PPUSH
17579: CALL_OW 49
// end ;
17583: GO 17502
17585: POP
17586: POP
// for i = 1 to bazookCount do
17587: LD_ADDR_VAR 0 13
17591: PUSH
17592: DOUBLE
17593: LD_INT 1
17595: DEC
17596: ST_TO_ADDR
17597: LD_VAR 0 5
17601: PUSH
17602: FOR_TO
17603: IFFALSE 17685
// begin uc_side = side ;
17605: LD_ADDR_OWVAR 20
17609: PUSH
17610: LD_VAR 0 1
17614: ST_TO_ADDR
// uc_nation = nation ;
17615: LD_ADDR_OWVAR 21
17619: PUSH
17620: LD_VAR 0 2
17624: ST_TO_ADDR
// hc_name =  ;
17625: LD_ADDR_OWVAR 26
17629: PUSH
17630: LD_STRING 
17632: ST_TO_ADDR
// hc_gallery =  ;
17633: LD_ADDR_OWVAR 33
17637: PUSH
17638: LD_STRING 
17640: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17641: LD_INT 0
17643: PPUSH
17644: LD_INT 9
17646: PPUSH
17647: LD_VAR 0 8
17651: PPUSH
17652: CALL_OW 380
// un = CreateHuman ;
17656: LD_ADDR_VAR 0 15
17660: PUSH
17661: CALL_OW 44
17665: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17666: LD_VAR 0 15
17670: PPUSH
17671: LD_VAR 0 9
17675: PPUSH
17676: LD_INT 0
17678: PPUSH
17679: CALL_OW 49
// end ;
17683: GO 17602
17685: POP
17686: POP
// for i = 1 to mortalCount do
17687: LD_ADDR_VAR 0 13
17691: PUSH
17692: DOUBLE
17693: LD_INT 1
17695: DEC
17696: ST_TO_ADDR
17697: LD_VAR 0 6
17701: PUSH
17702: FOR_TO
17703: IFFALSE 17785
// begin uc_side = side ;
17705: LD_ADDR_OWVAR 20
17709: PUSH
17710: LD_VAR 0 1
17714: ST_TO_ADDR
// uc_nation = nation ;
17715: LD_ADDR_OWVAR 21
17719: PUSH
17720: LD_VAR 0 2
17724: ST_TO_ADDR
// hc_name =  ;
17725: LD_ADDR_OWVAR 26
17729: PUSH
17730: LD_STRING 
17732: ST_TO_ADDR
// hc_gallery =  ;
17733: LD_ADDR_OWVAR 33
17737: PUSH
17738: LD_STRING 
17740: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17741: LD_INT 0
17743: PPUSH
17744: LD_INT 8
17746: PPUSH
17747: LD_VAR 0 8
17751: PPUSH
17752: CALL_OW 380
// un = CreateHuman ;
17756: LD_ADDR_VAR 0 15
17760: PUSH
17761: CALL_OW 44
17765: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17766: LD_VAR 0 15
17770: PPUSH
17771: LD_VAR 0 9
17775: PPUSH
17776: LD_INT 0
17778: PPUSH
17779: CALL_OW 49
// end ;
17783: GO 17702
17785: POP
17786: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17787: LD_ADDR_VAR 0 18
17791: PUSH
17792: LD_INT 22
17794: PUSH
17795: LD_VAR 0 1
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 2
17806: PUSH
17807: LD_INT 25
17809: PUSH
17810: LD_INT 1
17812: PUSH
17813: EMPTY
17814: LIST
17815: LIST
17816: PUSH
17817: LD_INT 25
17819: PUSH
17820: LD_INT 5
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 25
17829: PUSH
17830: LD_INT 8
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 25
17839: PUSH
17840: LD_INT 9
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: PUSH
17854: EMPTY
17855: LIST
17856: LIST
17857: PPUSH
17858: CALL_OW 69
17862: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17863: LD_ADDR_VAR 0 17
17867: PUSH
17868: LD_INT 22
17870: PUSH
17871: LD_VAR 0 1
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 25
17882: PUSH
17883: LD_INT 4
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PPUSH
17894: CALL_OW 69
17898: ST_TO_ADDR
// for i in medic_list do
17899: LD_ADDR_VAR 0 13
17903: PUSH
17904: LD_VAR 0 17
17908: PUSH
17909: FOR_IN
17910: IFFALSE 17928
// ComMoveToArea ( i , healArea ) ;
17912: LD_VAR 0 13
17916: PPUSH
17917: LD_VAR 0 10
17921: PPUSH
17922: CALL_OW 113
17926: GO 17909
17928: POP
17929: POP
// repeat wait ( 0 0$1 ) ;
17930: LD_INT 35
17932: PPUSH
17933: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17937: LD_ADDR_VAR 0 16
17941: PUSH
17942: LD_INT 22
17944: PUSH
17945: LD_VAR 0 1
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: LD_INT 1
17956: PUSH
17957: LD_INT 3
17959: PUSH
17960: LD_INT 24
17962: PUSH
17963: LD_INT 550
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: PUSH
17974: LD_INT 24
17976: PUSH
17977: LD_INT 250
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17998: LD_ADDR_VAR 0 18
18002: PUSH
18003: LD_INT 22
18005: PUSH
18006: LD_VAR 0 1
18010: PUSH
18011: EMPTY
18012: LIST
18013: LIST
18014: PUSH
18015: LD_INT 2
18017: PUSH
18018: LD_INT 25
18020: PUSH
18021: LD_INT 1
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: LD_INT 25
18030: PUSH
18031: LD_INT 5
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: PUSH
18038: LD_INT 25
18040: PUSH
18041: LD_INT 8
18043: PUSH
18044: EMPTY
18045: LIST
18046: LIST
18047: PUSH
18048: LD_INT 25
18050: PUSH
18051: LD_INT 9
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 24
18067: PUSH
18068: LD_INT 1000
18070: PUSH
18071: EMPTY
18072: LIST
18073: LIST
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if medicCount > 0 then
18085: LD_VAR 0 7
18089: PUSH
18090: LD_INT 0
18092: GREATER
18093: IFFALSE 18167
// begin if damageUnit_list > 0 then
18095: LD_VAR 0 16
18099: PUSH
18100: LD_INT 0
18102: GREATER
18103: IFFALSE 18167
// begin for i in damageUnit_list do
18105: LD_ADDR_VAR 0 13
18109: PUSH
18110: LD_VAR 0 16
18114: PUSH
18115: FOR_IN
18116: IFFALSE 18165
// begin ComMoveToArea ( i , healArea ) ;
18118: LD_VAR 0 13
18122: PPUSH
18123: LD_VAR 0 10
18127: PPUSH
18128: CALL_OW 113
// for j in medic_list do
18132: LD_ADDR_VAR 0 14
18136: PUSH
18137: LD_VAR 0 17
18141: PUSH
18142: FOR_IN
18143: IFFALSE 18161
// AddComHeal ( j , i ) ;
18145: LD_VAR 0 14
18149: PPUSH
18150: LD_VAR 0 13
18154: PPUSH
18155: CALL_OW 188
18159: GO 18142
18161: POP
18162: POP
// end ;
18163: GO 18115
18165: POP
18166: POP
// end ; end ; for i in soldiersOK_list do
18167: LD_ADDR_VAR 0 13
18171: PUSH
18172: LD_VAR 0 18
18176: PUSH
18177: FOR_IN
18178: IFFALSE 18354
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18180: LD_ADDR_VAR 0 21
18184: PUSH
18185: LD_INT 22
18187: PUSH
18188: LD_VAR 0 11
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PPUSH
18197: CALL_OW 69
18201: PPUSH
18202: LD_VAR 0 13
18206: PPUSH
18207: CALL_OW 74
18211: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18212: LD_ADDR_VAR 0 22
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_VAR 0 11
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 2
18231: PUSH
18232: LD_INT 59
18234: PUSH
18235: EMPTY
18236: LIST
18237: PUSH
18238: LD_INT 21
18240: PUSH
18241: LD_INT 1
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PUSH
18248: LD_INT 21
18250: PUSH
18251: LD_INT 2
18253: PUSH
18254: EMPTY
18255: LIST
18256: LIST
18257: PUSH
18258: EMPTY
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: PUSH
18264: EMPTY
18265: LIST
18266: LIST
18267: PUSH
18268: EMPTY
18269: LIST
18270: PPUSH
18271: CALL_OW 69
18275: PPUSH
18276: LD_VAR 0 13
18280: PPUSH
18281: CALL_OW 74
18285: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18286: LD_VAR 0 13
18290: PPUSH
18291: LD_VAR 0 21
18295: PPUSH
18296: CALL_OW 296
18300: PUSH
18301: LD_INT 8
18303: PLUS
18304: PUSH
18305: LD_VAR 0 13
18309: PPUSH
18310: LD_VAR 0 22
18314: PPUSH
18315: CALL_OW 296
18319: LESS
18320: IFFALSE 18338
// begin ComAttackUnit ( i , target1 ) ;
18322: LD_VAR 0 13
18326: PPUSH
18327: LD_VAR 0 21
18331: PPUSH
18332: CALL_OW 115
// end else
18336: GO 18352
// begin ComAttackUnit ( i , target2 ) ;
18338: LD_VAR 0 13
18342: PPUSH
18343: LD_VAR 0 22
18347: PPUSH
18348: CALL_OW 115
// end ; end ;
18352: GO 18177
18354: POP
18355: POP
// for i in soldiersOK_list do
18356: LD_ADDR_VAR 0 13
18360: PUSH
18361: LD_VAR 0 18
18365: PUSH
18366: FOR_IN
18367: IFFALSE 18543
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18369: LD_ADDR_VAR 0 21
18373: PUSH
18374: LD_INT 22
18376: PUSH
18377: LD_VAR 0 11
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PPUSH
18386: CALL_OW 69
18390: PPUSH
18391: LD_VAR 0 13
18395: PPUSH
18396: CALL_OW 74
18400: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18401: LD_ADDR_VAR 0 22
18405: PUSH
18406: LD_INT 22
18408: PUSH
18409: LD_VAR 0 11
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 2
18420: PUSH
18421: LD_INT 59
18423: PUSH
18424: EMPTY
18425: LIST
18426: PUSH
18427: LD_INT 21
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 21
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: EMPTY
18448: LIST
18449: LIST
18450: LIST
18451: LIST
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: PPUSH
18460: CALL_OW 69
18464: PPUSH
18465: LD_VAR 0 13
18469: PPUSH
18470: CALL_OW 74
18474: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18475: LD_VAR 0 13
18479: PPUSH
18480: LD_VAR 0 21
18484: PPUSH
18485: CALL_OW 296
18489: PUSH
18490: LD_INT 8
18492: PLUS
18493: PUSH
18494: LD_VAR 0 13
18498: PPUSH
18499: LD_VAR 0 22
18503: PPUSH
18504: CALL_OW 296
18508: LESS
18509: IFFALSE 18527
// begin ComAttackUnit ( i , target1 ) ;
18511: LD_VAR 0 13
18515: PPUSH
18516: LD_VAR 0 21
18520: PPUSH
18521: CALL_OW 115
// end else
18525: GO 18541
// begin ComAttackUnit ( i , target2 ) ;
18527: LD_VAR 0 13
18531: PPUSH
18532: LD_VAR 0 22
18536: PPUSH
18537: CALL_OW 115
// end ; end ;
18541: GO 18366
18543: POP
18544: POP
// until soldiersOK_list = [ ] ;
18545: LD_VAR 0 18
18549: PUSH
18550: EMPTY
18551: EQUAL
18552: IFFALSE 17930
// end ;
18554: LD_VAR 0 12
18558: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
18559: LD_INT 0
18561: PPUSH
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
18566: PPUSH
18567: PPUSH
// repeat wait ( 0 0$1 ) ;
18568: LD_INT 35
18570: PPUSH
18571: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
18575: LD_ADDR_VAR 0 7
18579: PUSH
18580: LD_INT 22
18582: PUSH
18583: LD_INT 2
18585: PUSH
18586: EMPTY
18587: LIST
18588: LIST
18589: PUSH
18590: LD_INT 25
18592: PUSH
18593: LD_INT 4
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 3
18602: PUSH
18603: LD_INT 60
18605: PUSH
18606: EMPTY
18607: LIST
18608: PUSH
18609: EMPTY
18610: LIST
18611: LIST
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL_OW 69
18622: ST_TO_ADDR
// if not tmp then
18623: LD_VAR 0 7
18627: NOT
18628: IFFALSE 18632
// continue ;
18630: GO 18568
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18632: LD_ADDR_VAR 0 3
18636: PUSH
18637: LD_INT 5
18639: PPUSH
18640: LD_INT 22
18642: PUSH
18643: LD_INT 0
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 25
18652: PUSH
18653: LD_INT 12
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PPUSH
18664: CALL_OW 70
18668: PUSH
18669: FOR_IN
18670: IFFALSE 18703
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
18672: LD_VAR 0 7
18676: PPUSH
18677: LD_VAR 0 3
18681: PPUSH
18682: CALL_OW 250
18686: PPUSH
18687: LD_VAR 0 3
18691: PPUSH
18692: CALL_OW 251
18696: PPUSH
18697: CALL_OW 131
18701: GO 18669
18703: POP
18704: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18705: LD_INT 22
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 4
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PPUSH
18729: CALL_OW 69
18733: PUSH
18734: LD_INT 0
18736: EQUAL
18737: PUSH
18738: LD_INT 5
18740: PPUSH
18741: LD_INT 22
18743: PUSH
18744: LD_INT 0
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 25
18753: PUSH
18754: LD_INT 12
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PPUSH
18765: CALL_OW 70
18769: PUSH
18770: LD_INT 0
18772: EQUAL
18773: OR
18774: IFFALSE 18568
// repeat wait ( 0 0$1 ) ;
18776: LD_INT 35
18778: PPUSH
18779: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
18783: LD_ADDR_VAR 0 5
18787: PUSH
18788: LD_INT 22
18790: PUSH
18791: LD_INT 2
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 30
18800: PUSH
18801: LD_INT 5
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: PPUSH
18812: CALL_OW 69
18816: ST_TO_ADDR
// until arm ;
18817: LD_VAR 0 5
18821: IFFALSE 18776
// wait ( 0 0$25 ) ;
18823: LD_INT 875
18825: PPUSH
18826: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18830: LD_ADDR_VAR 0 6
18834: PUSH
18835: LD_INT 22
18837: PUSH
18838: LD_INT 2
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: PUSH
18845: LD_INT 2
18847: PUSH
18848: LD_INT 30
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: PUSH
18858: LD_INT 30
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: EMPTY
18869: LIST
18870: LIST
18871: LIST
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PPUSH
18877: CALL_OW 69
18881: ST_TO_ADDR
// j := 0 ;
18882: LD_ADDR_VAR 0 3
18886: PUSH
18887: LD_INT 0
18889: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18890: LD_ADDR_VAR 0 2
18894: PUSH
18895: LD_INT 22
18897: PUSH
18898: LD_INT 2
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: LD_INT 25
18907: PUSH
18908: LD_INT 12
18910: PUSH
18911: EMPTY
18912: LIST
18913: LIST
18914: PUSH
18915: EMPTY
18916: LIST
18917: LIST
18918: PPUSH
18919: CALL_OW 69
18923: PUSH
18924: FOR_IN
18925: IFFALSE 19012
// begin ComMoveXY ( i , 63 , 16 ) ;
18927: LD_VAR 0 2
18931: PPUSH
18932: LD_INT 63
18934: PPUSH
18935: LD_INT 16
18937: PPUSH
18938: CALL_OW 111
// j := j + 1 ;
18942: LD_ADDR_VAR 0 3
18946: PUSH
18947: LD_VAR 0 3
18951: PUSH
18952: LD_INT 1
18954: PLUS
18955: ST_TO_ADDR
// if j < 5 then
18956: LD_VAR 0 3
18960: PUSH
18961: LD_INT 5
18963: LESS
18964: IFFALSE 18982
// b := arm [ 1 ] else
18966: LD_ADDR_VAR 0 4
18970: PUSH
18971: LD_VAR 0 5
18975: PUSH
18976: LD_INT 1
18978: ARRAY
18979: ST_TO_ADDR
18980: GO 18996
// b := dep [ 1 ] ;
18982: LD_ADDR_VAR 0 4
18986: PUSH
18987: LD_VAR 0 6
18991: PUSH
18992: LD_INT 1
18994: ARRAY
18995: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
18996: LD_VAR 0 2
19000: PPUSH
19001: LD_VAR 0 4
19005: PPUSH
19006: CALL_OW 180
// end ;
19010: GO 18924
19012: POP
19013: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19014: LD_ADDR_VAR 0 2
19018: PUSH
19019: LD_INT 22
19021: PUSH
19022: LD_INT 2
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 25
19031: PUSH
19032: LD_INT 4
19034: PUSH
19035: EMPTY
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: PUSH
19048: FOR_IN
19049: IFFALSE 19095
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19051: LD_VAR 0 2
19055: PPUSH
19056: LD_INT 22
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: PUSH
19066: LD_INT 30
19068: PUSH
19069: LD_INT 8
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PPUSH
19080: CALL_OW 69
19084: PUSH
19085: LD_INT 1
19087: ARRAY
19088: PPUSH
19089: CALL_OW 120
19093: GO 19048
19095: POP
19096: POP
// end ;
19097: LD_VAR 0 1
19101: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19102: LD_INT 0
19104: PPUSH
19105: PPUSH
19106: PPUSH
19107: PPUSH
19108: PPUSH
19109: PPUSH
19110: PPUSH
19111: PPUSH
19112: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19113: LD_INT 22
19115: PUSH
19116: LD_VAR 0 1
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 21
19127: PUSH
19128: LD_INT 2
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PPUSH
19139: CALL_OW 69
19143: PUSH
19144: LD_VAR 0 3
19148: LESSEQUAL
19149: IFFALSE 19293
// for i = 1 to vehCount do
19151: LD_ADDR_VAR 0 10
19155: PUSH
19156: DOUBLE
19157: LD_INT 1
19159: DEC
19160: ST_TO_ADDR
19161: LD_VAR 0 3
19165: PUSH
19166: FOR_TO
19167: IFFALSE 19291
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19169: LD_ADDR_VAR 0 12
19173: PUSH
19174: LD_VAR 0 5
19178: PUSH
19179: LD_INT 1
19181: PPUSH
19182: LD_VAR 0 5
19186: PPUSH
19187: CALL_OW 12
19191: ARRAY
19192: ST_TO_ADDR
// if randWeapon = 46 then
19193: LD_VAR 0 12
19197: PUSH
19198: LD_INT 46
19200: EQUAL
19201: IFFALSE 19246
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19203: LD_VAR 0 2
19207: PPUSH
19208: LD_INT 24
19210: PPUSH
19211: LD_VAR 0 6
19215: PPUSH
19216: LD_VAR 0 7
19220: PUSH
19221: LD_INT 1
19223: PPUSH
19224: LD_VAR 0 7
19228: PPUSH
19229: CALL_OW 12
19233: ARRAY
19234: PPUSH
19235: LD_VAR 0 12
19239: PPUSH
19240: CALL_OW 185
19244: GO 19289
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19246: LD_VAR 0 2
19250: PPUSH
19251: LD_VAR 0 8
19255: PPUSH
19256: LD_VAR 0 6
19260: PPUSH
19261: LD_VAR 0 7
19265: PUSH
19266: LD_INT 1
19268: PPUSH
19269: LD_VAR 0 7
19273: PPUSH
19274: CALL_OW 12
19278: ARRAY
19279: PPUSH
19280: LD_VAR 0 12
19284: PPUSH
19285: CALL_OW 185
// end ;
19289: GO 19166
19291: POP
19292: POP
// repeat wait ( 0 0$1 ) ;
19293: LD_INT 35
19295: PPUSH
19296: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19300: LD_INT 22
19302: PUSH
19303: LD_VAR 0 1
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 21
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: LD_INT 24
19324: PUSH
19325: LD_INT 250
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: LIST
19336: PPUSH
19337: CALL_OW 69
19341: PUSH
19342: LD_VAR 0 3
19346: GREATEREQUAL
19347: IFFALSE 19293
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19349: LD_INT 22
19351: PUSH
19352: LD_VAR 0 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 21
19363: PUSH
19364: LD_INT 2
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 24
19373: PUSH
19374: LD_INT 250
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: PPUSH
19386: CALL_OW 69
19390: PUSH
19391: LD_VAR 0 3
19395: GREATEREQUAL
19396: IFFALSE 19739
// begin repeat begin wait ( 0 0$1 ) ;
19398: LD_INT 35
19400: PPUSH
19401: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19405: LD_INT 22
19407: PUSH
19408: LD_VAR 0 1
19412: PUSH
19413: EMPTY
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 21
19419: PUSH
19420: LD_INT 2
19422: PUSH
19423: EMPTY
19424: LIST
19425: LIST
19426: PUSH
19427: LD_INT 24
19429: PUSH
19430: LD_INT 651
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: PUSH
19447: LD_INT 0
19449: GREATER
19450: IFFALSE 19678
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19452: LD_ADDR_VAR 0 10
19456: PUSH
19457: LD_INT 22
19459: PUSH
19460: LD_VAR 0 1
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PUSH
19469: LD_INT 21
19471: PUSH
19472: LD_INT 2
19474: PUSH
19475: EMPTY
19476: LIST
19477: LIST
19478: PUSH
19479: LD_INT 24
19481: PUSH
19482: LD_INT 651
19484: PUSH
19485: EMPTY
19486: LIST
19487: LIST
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: LIST
19493: PPUSH
19494: CALL_OW 69
19498: PUSH
19499: FOR_IN
19500: IFFALSE 19676
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19502: LD_ADDR_VAR 0 16
19506: PUSH
19507: LD_INT 22
19509: PUSH
19510: LD_VAR 0 4
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PPUSH
19519: CALL_OW 69
19523: PPUSH
19524: LD_VAR 0 10
19528: PPUSH
19529: CALL_OW 74
19533: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19534: LD_ADDR_VAR 0 17
19538: PUSH
19539: LD_INT 22
19541: PUSH
19542: LD_VAR 0 4
19546: PUSH
19547: EMPTY
19548: LIST
19549: LIST
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: LD_INT 59
19556: PUSH
19557: EMPTY
19558: LIST
19559: PUSH
19560: LD_INT 21
19562: PUSH
19563: LD_INT 1
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PUSH
19570: LD_INT 21
19572: PUSH
19573: LD_INT 2
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: PUSH
19590: EMPTY
19591: LIST
19592: PPUSH
19593: CALL_OW 69
19597: PPUSH
19598: LD_VAR 0 10
19602: PPUSH
19603: CALL_OW 74
19607: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19608: LD_VAR 0 10
19612: PPUSH
19613: LD_VAR 0 16
19617: PPUSH
19618: CALL_OW 296
19622: PUSH
19623: LD_INT 8
19625: PLUS
19626: PUSH
19627: LD_VAR 0 10
19631: PPUSH
19632: LD_VAR 0 17
19636: PPUSH
19637: CALL_OW 296
19641: LESS
19642: IFFALSE 19660
// begin ComAttackUnit ( i , target1 ) ;
19644: LD_VAR 0 10
19648: PPUSH
19649: LD_VAR 0 16
19653: PPUSH
19654: CALL_OW 115
// end else
19658: GO 19674
// begin ComAttackUnit ( i , target2 ) ;
19660: LD_VAR 0 10
19664: PPUSH
19665: LD_VAR 0 17
19669: PPUSH
19670: CALL_OW 115
// end ; end ;
19674: GO 19499
19676: POP
19677: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19678: LD_INT 22
19680: PUSH
19681: LD_VAR 0 1
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 21
19692: PUSH
19693: LD_INT 2
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PPUSH
19704: CALL_OW 69
19708: PUSH
19709: LD_INT 0
19711: EQUAL
19712: PUSH
19713: LD_INT 22
19715: PUSH
19716: LD_VAR 0 4
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: EMPTY
19726: LIST
19727: PPUSH
19728: CALL_OW 69
19732: PUSH
19733: LD_INT 0
19735: EQUAL
19736: OR
19737: IFFALSE 19398
// end ; end ;
19739: LD_VAR 0 9
19743: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19744: LD_INT 0
19746: PPUSH
19747: PPUSH
19748: PPUSH
19749: PPUSH
// r := 100 ;
19750: LD_ADDR_VAR 0 5
19754: PUSH
19755: LD_INT 100
19757: ST_TO_ADDR
// x := 0 ;
19758: LD_ADDR_VAR 0 6
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// while ( x < n ) do
19766: LD_VAR 0 6
19770: PUSH
19771: LD_VAR 0 2
19775: LESS
19776: IFFALSE 20063
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19778: LD_ADDR_VAR 0 4
19782: PUSH
19783: DOUBLE
19784: LD_INT 1
19786: DEC
19787: ST_TO_ADDR
19788: LD_VAR 0 1
19792: PPUSH
19793: LD_INT 0
19795: PPUSH
19796: CALL_OW 517
19800: PUSH
19801: LD_INT 1
19803: ARRAY
19804: PUSH
19805: FOR_TO
19806: IFFALSE 20059
// begin if r > 50 then
19808: LD_VAR 0 5
19812: PUSH
19813: LD_INT 50
19815: GREATER
19816: IFFALSE 20035
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19818: LD_VAR 0 1
19822: PPUSH
19823: LD_INT 0
19825: PPUSH
19826: CALL_OW 517
19830: PUSH
19831: LD_INT 1
19833: ARRAY
19834: PUSH
19835: LD_VAR 0 4
19839: ARRAY
19840: PPUSH
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_INT 0
19848: PPUSH
19849: CALL_OW 517
19853: PUSH
19854: LD_INT 2
19856: ARRAY
19857: PUSH
19858: LD_VAR 0 4
19862: ARRAY
19863: PPUSH
19864: CALL_OW 458
19868: NOT
19869: IFFALSE 20019
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19871: LD_VAR 0 1
19875: PPUSH
19876: LD_INT 0
19878: PPUSH
19879: CALL_OW 517
19883: PUSH
19884: LD_INT 1
19886: ARRAY
19887: PUSH
19888: LD_VAR 0 4
19892: ARRAY
19893: PPUSH
19894: LD_VAR 0 1
19898: PPUSH
19899: LD_INT 0
19901: PPUSH
19902: CALL_OW 517
19906: PUSH
19907: LD_INT 2
19909: ARRAY
19910: PUSH
19911: LD_VAR 0 4
19915: ARRAY
19916: PPUSH
19917: LD_INT 5
19919: PPUSH
19920: LD_INT 0
19922: PPUSH
19923: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19927: LD_ADDR_EXP 50
19931: PUSH
19932: LD_EXP 50
19936: PPUSH
19937: LD_INT 1
19939: PPUSH
19940: LD_VAR 0 1
19944: PPUSH
19945: LD_INT 0
19947: PPUSH
19948: CALL_OW 517
19952: PUSH
19953: LD_INT 1
19955: ARRAY
19956: PUSH
19957: LD_VAR 0 4
19961: ARRAY
19962: PUSH
19963: LD_VAR 0 1
19967: PPUSH
19968: LD_INT 0
19970: PPUSH
19971: CALL_OW 517
19975: PUSH
19976: LD_INT 2
19978: ARRAY
19979: PUSH
19980: LD_VAR 0 4
19984: ARRAY
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PPUSH
19990: CALL_OW 2
19994: ST_TO_ADDR
// r := 0 ;
19995: LD_ADDR_VAR 0 5
19999: PUSH
20000: LD_INT 0
20002: ST_TO_ADDR
// x := x + 1 ;
20003: LD_ADDR_VAR 0 6
20007: PUSH
20008: LD_VAR 0 6
20012: PUSH
20013: LD_INT 1
20015: PLUS
20016: ST_TO_ADDR
// end else
20017: GO 20033
// r := r + 35 ;
20019: LD_ADDR_VAR 0 5
20023: PUSH
20024: LD_VAR 0 5
20028: PUSH
20029: LD_INT 35
20031: PLUS
20032: ST_TO_ADDR
// end else
20033: GO 20057
// r := r + rand ( 10 , 25 ) ;
20035: LD_ADDR_VAR 0 5
20039: PUSH
20040: LD_VAR 0 5
20044: PUSH
20045: LD_INT 10
20047: PPUSH
20048: LD_INT 25
20050: PPUSH
20051: CALL_OW 12
20055: PLUS
20056: ST_TO_ADDR
// end ;
20057: GO 19805
20059: POP
20060: POP
20061: GO 19766
// end ; end_of_file
20063: LD_VAR 0 3
20067: RET
// every 0 0$1 trigger russianAI = 1 do
20068: LD_EXP 39
20072: PUSH
20073: LD_INT 1
20075: EQUAL
20076: IFFALSE 20295
20078: GO 20080
20080: DISABLE
// begin enable ;
20081: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20082: LD_INT 3
20084: PPUSH
20085: LD_EXP 30
20089: PPUSH
20090: CALL 14556 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20094: LD_INT 3
20096: PPUSH
20097: LD_EXP 42
20101: PPUSH
20102: CALL 14916 0 2
// if ruPossition = 1 then
20106: LD_EXP 41
20110: PUSH
20111: LD_INT 1
20113: EQUAL
20114: IFFALSE 20169
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20116: LD_INT 3
20118: PPUSH
20119: LD_INT 13
20121: PPUSH
20122: LD_INT 10
20124: PPUSH
20125: LD_INT 22
20127: PUSH
20128: LD_INT 3
20130: PUSH
20131: EMPTY
20132: LIST
20133: LIST
20134: PUSH
20135: LD_INT 21
20137: PUSH
20138: LD_INT 3
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: PUSH
20145: LD_INT 30
20147: PUSH
20148: LD_INT 8
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: LIST
20159: PPUSH
20160: CALL_OW 69
20164: PPUSH
20165: CALL 15122 0 4
// if ruPossition = 2 then
20169: LD_EXP 41
20173: PUSH
20174: LD_INT 2
20176: EQUAL
20177: IFFALSE 20232
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20179: LD_INT 3
20181: PPUSH
20182: LD_INT 14
20184: PPUSH
20185: LD_INT 11
20187: PPUSH
20188: LD_INT 22
20190: PUSH
20191: LD_INT 3
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PUSH
20198: LD_INT 21
20200: PUSH
20201: LD_INT 3
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 30
20210: PUSH
20211: LD_INT 8
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: PPUSH
20223: CALL_OW 69
20227: PPUSH
20228: CALL 15122 0 4
// if ruPossition = 3 then
20232: LD_EXP 41
20236: PUSH
20237: LD_INT 3
20239: EQUAL
20240: IFFALSE 20295
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20242: LD_INT 3
20244: PPUSH
20245: LD_INT 15
20247: PPUSH
20248: LD_INT 12
20250: PPUSH
20251: LD_INT 22
20253: PUSH
20254: LD_INT 3
20256: PUSH
20257: EMPTY
20258: LIST
20259: LIST
20260: PUSH
20261: LD_INT 21
20263: PUSH
20264: LD_INT 3
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 30
20273: PUSH
20274: LD_INT 8
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: LIST
20285: PPUSH
20286: CALL_OW 69
20290: PPUSH
20291: CALL 15122 0 4
// end ;
20295: END
// every 0 0$1 do
20296: GO 20298
20298: DISABLE
// begin enable ;
20299: ENABLE
// if ruPossition = 1 then
20300: LD_EXP 41
20304: PUSH
20305: LD_INT 1
20307: EQUAL
20308: IFFALSE 20320
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20310: LD_INT 3
20312: PPUSH
20313: LD_INT 10
20315: PPUSH
20316: CALL 14193 0 2
// if ruPossition = 2 then
20320: LD_EXP 41
20324: PUSH
20325: LD_INT 2
20327: EQUAL
20328: IFFALSE 20340
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20330: LD_INT 3
20332: PPUSH
20333: LD_INT 11
20335: PPUSH
20336: CALL 14193 0 2
// if ruPossition = 3 then
20340: LD_EXP 41
20344: PUSH
20345: LD_INT 3
20347: EQUAL
20348: IFFALSE 20360
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20350: LD_INT 3
20352: PPUSH
20353: LD_INT 12
20355: PPUSH
20356: CALL 14193 0 2
// IntBazooka ( 3 , 1 ) ;
20360: LD_INT 3
20362: PPUSH
20363: LD_INT 1
20365: PPUSH
20366: CALL 12992 0 2
// IntBazooka ( 6 , 1 ) ;
20370: LD_INT 6
20372: PPUSH
20373: LD_INT 1
20375: PPUSH
20376: CALL 12992 0 2
// end ;
20380: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20381: LD_EXP 39
20385: PUSH
20386: LD_INT 1
20388: EQUAL
20389: PUSH
20390: LD_EXP 35
20394: PPUSH
20395: CALL_OW 302
20399: AND
20400: PUSH
20401: LD_EXP 35
20405: PPUSH
20406: CALL_OW 255
20410: PUSH
20411: LD_INT 3
20413: EQUAL
20414: AND
20415: PUSH
20416: LD_INT 22
20418: PUSH
20419: LD_INT 3
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: LD_INT 21
20428: PUSH
20429: LD_INT 2
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 33
20438: PUSH
20439: LD_INT 3
20441: PUSH
20442: EMPTY
20443: LIST
20444: LIST
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: LIST
20450: PPUSH
20451: CALL_OW 69
20455: PUSH
20456: LD_INT 0
20458: EQUAL
20459: AND
20460: IFFALSE 20668
20462: GO 20464
20464: DISABLE
// begin enable ;
20465: ENABLE
// if Difficulty = 1 then
20466: LD_OWVAR 67
20470: PUSH
20471: LD_INT 1
20473: EQUAL
20474: IFFALSE 20536
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20476: LD_INT 3
20478: PPUSH
20479: LD_EXP 35
20483: PPUSH
20484: LD_INT 5
20486: PPUSH
20487: LD_INT 8
20489: PPUSH
20490: CALL_OW 12
20494: PPUSH
20495: LD_INT 1
20497: PPUSH
20498: LD_INT 43
20500: PUSH
20501: LD_INT 44
20503: PUSH
20504: LD_INT 45
20506: PUSH
20507: LD_INT 46
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: PPUSH
20516: LD_INT 1
20518: PPUSH
20519: LD_INT 3
20521: PUSH
20522: LD_INT 3
20524: PUSH
20525: EMPTY
20526: LIST
20527: LIST
20528: PPUSH
20529: LD_INT 22
20531: PPUSH
20532: CALL 19102 0 8
// if Difficulty = 2 then
20536: LD_OWVAR 67
20540: PUSH
20541: LD_INT 2
20543: EQUAL
20544: IFFALSE 20602
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20546: LD_INT 3
20548: PPUSH
20549: LD_EXP 35
20553: PPUSH
20554: LD_INT 6
20556: PPUSH
20557: LD_INT 8
20559: PPUSH
20560: CALL_OW 12
20564: PPUSH
20565: LD_INT 1
20567: PPUSH
20568: LD_INT 44
20570: PUSH
20571: LD_INT 45
20573: PUSH
20574: LD_INT 46
20576: PUSH
20577: EMPTY
20578: LIST
20579: LIST
20580: LIST
20581: PPUSH
20582: LD_INT 1
20584: PPUSH
20585: LD_INT 3
20587: PUSH
20588: LD_INT 3
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PPUSH
20595: LD_INT 22
20597: PPUSH
20598: CALL 19102 0 8
// if Difficulty = 3 then
20602: LD_OWVAR 67
20606: PUSH
20607: LD_INT 3
20609: EQUAL
20610: IFFALSE 20668
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20612: LD_INT 3
20614: PPUSH
20615: LD_EXP 35
20619: PPUSH
20620: LD_INT 7
20622: PPUSH
20623: LD_INT 8
20625: PPUSH
20626: CALL_OW 12
20630: PPUSH
20631: LD_INT 1
20633: PPUSH
20634: LD_INT 44
20636: PUSH
20637: LD_INT 45
20639: PUSH
20640: LD_INT 46
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: PPUSH
20648: LD_INT 1
20650: PPUSH
20651: LD_INT 3
20653: PUSH
20654: LD_INT 3
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PPUSH
20661: LD_INT 22
20663: PPUSH
20664: CALL 19102 0 8
// end ;
20668: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20669: LD_EXP 50
20673: PUSH
20674: LD_EXP 49
20678: AND
20679: IFFALSE 20800
20681: GO 20683
20683: DISABLE
20684: LD_INT 0
20686: PPUSH
// begin enable ;
20687: ENABLE
// for i in arabianMines do
20688: LD_ADDR_VAR 0 1
20692: PUSH
20693: LD_EXP 50
20697: PUSH
20698: FOR_IN
20699: IFFALSE 20798
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20701: LD_INT 22
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 92
20713: PUSH
20714: LD_VAR 0 1
20718: PUSH
20719: LD_INT 1
20721: ARRAY
20722: PUSH
20723: LD_VAR 0 1
20727: PUSH
20728: LD_INT 2
20730: ARRAY
20731: PUSH
20732: LD_INT 3
20734: PUSH
20735: EMPTY
20736: LIST
20737: LIST
20738: LIST
20739: LIST
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PPUSH
20745: CALL_OW 69
20749: IFFALSE 20796
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20751: LD_VAR 0 1
20755: PUSH
20756: LD_INT 1
20758: ARRAY
20759: PPUSH
20760: LD_VAR 0 1
20764: PUSH
20765: LD_INT 2
20767: ARRAY
20768: PPUSH
20769: LD_INT 5
20771: PPUSH
20772: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20776: LD_ADDR_EXP 50
20780: PUSH
20781: LD_EXP 50
20785: PPUSH
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 3
20795: ST_TO_ADDR
// end ; end ;
20796: GO 20698
20798: POP
20799: POP
// end ; end_of_file
20800: PPOPN 1
20802: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20803: LD_VAR 0 1
20807: PPUSH
20808: CALL_OW 255
20812: PUSH
20813: LD_INT 4
20815: EQUAL
20816: IFFALSE 20830
// SetBName ( building , epsilon ) ;
20818: LD_VAR 0 1
20822: PPUSH
20823: LD_STRING epsilon
20825: PPUSH
20826: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20830: LD_VAR 0 1
20834: PPUSH
20835: CALL_OW 255
20839: PUSH
20840: LD_INT 1
20842: EQUAL
20843: PUSH
20844: LD_VAR 0 1
20848: PPUSH
20849: CALL_OW 266
20853: PUSH
20854: LD_INT 0
20856: EQUAL
20857: AND
20858: IFFALSE 20872
// SetBName ( building , epsilon ) ;
20860: LD_VAR 0 1
20864: PPUSH
20865: LD_STRING epsilon
20867: PPUSH
20868: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20872: LD_VAR 0 1
20876: PPUSH
20877: CALL_OW 255
20881: PUSH
20882: LD_INT 3
20884: EQUAL
20885: PUSH
20886: LD_VAR 0 1
20890: PPUSH
20891: CALL_OW 266
20895: PUSH
20896: LD_INT 0
20898: EQUAL
20899: AND
20900: IFFALSE 20914
// SetBName ( building , chuikov ) ;
20902: LD_VAR 0 1
20906: PPUSH
20907: LD_STRING chuikov
20909: PPUSH
20910: CALL_OW 500
// if GetSide ( building ) = 2 then
20914: LD_VAR 0 1
20918: PPUSH
20919: CALL_OW 255
20923: PUSH
20924: LD_INT 2
20926: EQUAL
20927: IFFALSE 20983
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20929: LD_VAR 0 1
20933: PPUSH
20934: CALL_OW 266
20938: PUSH
20939: LD_INT 6
20941: EQUAL
20942: PUSH
20943: LD_VAR 0 1
20947: PPUSH
20948: CALL_OW 266
20952: PUSH
20953: LD_INT 9
20955: EQUAL
20956: OR
20957: IFFALSE 20983
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20959: LD_VAR 0 1
20963: PPUSH
20964: LD_INT 10
20966: PPUSH
20967: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20971: LD_VAR 0 1
20975: PPUSH
20976: LD_INT 11
20978: PPUSH
20979: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 255
20992: PUSH
20993: LD_INT 3
20995: EQUAL
20996: IFFALSE 21022
// begin if GetBType ( building ) = 2 then
20998: LD_VAR 0 1
21002: PPUSH
21003: CALL_OW 266
21007: PUSH
21008: LD_INT 2
21010: EQUAL
21011: IFFALSE 21022
// AddComUpgrade ( building ) ;
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 206
// end ; end ;
21022: PPOPN 2
21024: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21025: LD_INT 0
21027: PPUSH
21028: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21029: LD_VAR 0 1
21033: PUSH
21034: LD_INT 22
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 23
21046: PUSH
21047: LD_INT 3
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: LD_INT 21
21056: PUSH
21057: LD_INT 2
21059: PUSH
21060: EMPTY
21061: LIST
21062: LIST
21063: PUSH
21064: EMPTY
21065: LIST
21066: LIST
21067: LIST
21068: PPUSH
21069: CALL_OW 69
21073: IN
21074: PUSH
21075: LD_EXP 58
21079: NOT
21080: AND
21081: IFFALSE 21112
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21083: LD_ADDR_EXP 58
21087: PUSH
21088: LD_VAR 0 1
21092: PPUSH
21093: CALL_OW 250
21097: PUSH
21098: LD_VAR 0 1
21102: PPUSH
21103: CALL_OW 251
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: ST_TO_ADDR
// end ;
21112: PPOPN 3
21114: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21115: LD_VAR 0 2
21119: PPUSH
21120: CALL_OW 255
21124: PUSH
21125: LD_INT 3
21127: EQUAL
21128: PUSH
21129: LD_EXP 35
21133: PPUSH
21134: CALL_OW 255
21138: PUSH
21139: LD_INT 3
21141: EQUAL
21142: AND
21143: PUSH
21144: LD_EXP 35
21148: PPUSH
21149: CALL_OW 302
21153: AND
21154: IFFALSE 21170
// ComEnterUnit ( human , ruFab ) ;
21156: LD_VAR 0 2
21160: PPUSH
21161: LD_EXP 35
21165: PPUSH
21166: CALL_OW 120
// end ;
21170: PPOPN 2
21172: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21173: LD_INT 0
21175: PPUSH
21176: PPUSH
21177: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21178: LD_VAR 0 1
21182: PPUSH
21183: CALL_OW 255
21187: PUSH
21188: LD_INT 1
21190: EQUAL
21191: PUSH
21192: LD_EXP 61
21196: PUSH
21197: LD_INT 0
21199: EQUAL
21200: AND
21201: IFFALSE 21403
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21203: LD_VAR 0 1
21207: PPUSH
21208: CALL_OW 266
21212: PUSH
21213: LD_INT 26
21215: EQUAL
21216: PUSH
21217: LD_VAR 0 1
21221: PPUSH
21222: CALL_OW 266
21226: PUSH
21227: LD_INT 27
21229: EQUAL
21230: OR
21231: PUSH
21232: LD_VAR 0 1
21236: PPUSH
21237: CALL_OW 266
21241: PUSH
21242: LD_INT 28
21244: EQUAL
21245: OR
21246: IFFALSE 21403
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21248: LD_INT 22
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 2
21260: PUSH
21261: LD_INT 30
21263: PUSH
21264: LD_INT 7
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: LD_INT 30
21273: PUSH
21274: LD_INT 8
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: LIST
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PPUSH
21290: CALL_OW 69
21294: PUSH
21295: LD_INT 0
21297: GREATER
21298: IFFALSE 21403
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21300: LD_ADDR_VAR 0 2
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_INT 1
21310: PUSH
21311: EMPTY
21312: LIST
21313: LIST
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: LD_INT 30
21320: PUSH
21321: LD_INT 7
21323: PUSH
21324: EMPTY
21325: LIST
21326: LIST
21327: PUSH
21328: LD_INT 30
21330: PUSH
21331: LD_INT 8
21333: PUSH
21334: EMPTY
21335: LIST
21336: LIST
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PPUSH
21347: CALL_OW 69
21351: PUSH
21352: FOR_IN
21353: IFFALSE 21401
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21355: LD_VAR 0 2
21359: PPUSH
21360: LD_INT 1
21362: PPUSH
21363: CALL_OW 268
21367: PUSH
21368: LD_INT 11
21370: EQUAL
21371: PUSH
21372: LD_VAR 0 2
21376: PPUSH
21377: LD_INT 2
21379: PPUSH
21380: CALL_OW 268
21384: PUSH
21385: LD_INT 11
21387: EQUAL
21388: OR
21389: IFFALSE 21399
// eventVar1 = 1 ;
21391: LD_ADDR_EXP 61
21395: PUSH
21396: LD_INT 1
21398: ST_TO_ADDR
21399: GO 21352
21401: POP
21402: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL_OW 255
21412: PUSH
21413: LD_INT 3
21415: EQUAL
21416: IFFALSE 21896
// begin if GetBType ( building ) = b_depot then
21418: LD_VAR 0 1
21422: PPUSH
21423: CALL_OW 266
21427: PUSH
21428: LD_INT 0
21430: EQUAL
21431: IFFALSE 21503
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21433: LD_VAR 0 1
21437: PPUSH
21438: CALL_OW 274
21442: PPUSH
21443: LD_INT 1
21445: PPUSH
21446: LD_INT 5000
21448: PPUSH
21449: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 274
21462: PPUSH
21463: LD_INT 2
21465: PPUSH
21466: LD_INT 5000
21468: PPUSH
21469: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: CALL_OW 274
21482: PPUSH
21483: LD_INT 3
21485: PPUSH
21486: LD_INT 5000
21488: PPUSH
21489: CALL_OW 277
// ruDepot = building ;
21493: LD_ADDR_EXP 30
21497: PUSH
21498: LD_VAR 0 1
21502: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21503: LD_VAR 0 1
21507: PPUSH
21508: CALL_OW 266
21512: PUSH
21513: LD_INT 0
21515: EQUAL
21516: PUSH
21517: LD_VAR 0 1
21521: PPUSH
21522: CALL_OW 266
21526: PUSH
21527: LD_INT 2
21529: EQUAL
21530: OR
21531: PUSH
21532: LD_VAR 0 1
21536: PPUSH
21537: CALL_OW 266
21541: PUSH
21542: LD_INT 4
21544: EQUAL
21545: OR
21546: IFFALSE 21557
// ComUpgrade ( building ) ;
21548: LD_VAR 0 1
21552: PPUSH
21553: CALL_OW 146
// if GetBType ( building ) = b_lab then
21557: LD_VAR 0 1
21561: PPUSH
21562: CALL_OW 266
21566: PUSH
21567: LD_INT 6
21569: EQUAL
21570: IFFALSE 21773
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21572: LD_INT 22
21574: PUSH
21575: LD_INT 3
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: PUSH
21582: LD_INT 30
21584: PUSH
21585: LD_INT 8
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PUSH
21592: EMPTY
21593: LIST
21594: LIST
21595: PPUSH
21596: CALL_OW 69
21600: PUSH
21601: LD_INT 0
21603: EQUAL
21604: IFFALSE 21642
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21606: LD_VAR 0 1
21610: PPUSH
21611: LD_INT 10
21613: PPUSH
21614: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21618: LD_VAR 0 1
21622: PPUSH
21623: LD_INT 12
21625: PPUSH
21626: CALL_OW 207
// ruLab1 = building ;
21630: LD_ADDR_EXP 31
21634: PUSH
21635: LD_VAR 0 1
21639: ST_TO_ADDR
// end else
21640: GO 21676
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21642: LD_VAR 0 1
21646: PPUSH
21647: LD_INT 11
21649: PPUSH
21650: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21654: LD_VAR 0 1
21658: PPUSH
21659: LD_INT 14
21661: PPUSH
21662: CALL_OW 207
// ruLab2 = building ;
21666: LD_ADDR_EXP 32
21670: PUSH
21671: LD_VAR 0 1
21675: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21676: LD_INT 3
21678: PPUSH
21679: LD_VAR 0 1
21683: PPUSH
21684: LD_INT 3
21686: PPUSH
21687: CALL 14108 0 3
// if ruDestroyedBuildings > 0 then
21691: LD_EXP 42
21695: PUSH
21696: LD_INT 0
21698: GREATER
21699: IFFALSE 21773
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21701: LD_ADDR_EXP 42
21705: PUSH
21706: LD_EXP 42
21710: PPUSH
21711: LD_INT 1
21713: PPUSH
21714: CALL_OW 3
21718: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21719: LD_ADDR_EXP 42
21723: PUSH
21724: LD_EXP 42
21728: PPUSH
21729: LD_INT 1
21731: PPUSH
21732: CALL_OW 3
21736: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21737: LD_ADDR_EXP 42
21741: PUSH
21742: LD_EXP 42
21746: PPUSH
21747: LD_INT 1
21749: PPUSH
21750: CALL_OW 3
21754: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21755: LD_ADDR_EXP 42
21759: PUSH
21760: LD_EXP 42
21764: PPUSH
21765: LD_INT 1
21767: PPUSH
21768: CALL_OW 3
21772: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21773: LD_VAR 0 1
21777: PPUSH
21778: CALL_OW 266
21782: PUSH
21783: LD_INT 32
21785: EQUAL
21786: IFFALSE 21823
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_INT 44
21795: PUSH
21796: LD_INT 45
21798: PUSH
21799: LD_INT 46
21801: PUSH
21802: EMPTY
21803: LIST
21804: LIST
21805: LIST
21806: PUSH
21807: LD_INT 1
21809: PPUSH
21810: LD_INT 3
21812: PPUSH
21813: CALL_OW 12
21817: ARRAY
21818: PPUSH
21819: CALL_OW 208
// if GetBType ( building ) = b_turret then
21823: LD_VAR 0 1
21827: PPUSH
21828: CALL_OW 266
21832: PUSH
21833: LD_INT 33
21835: EQUAL
21836: IFFALSE 21873
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21838: LD_VAR 0 1
21842: PPUSH
21843: LD_INT 44
21845: PUSH
21846: LD_INT 45
21848: PUSH
21849: LD_INT 46
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: LD_INT 1
21859: PPUSH
21860: LD_INT 3
21862: PPUSH
21863: CALL_OW 12
21867: ARRAY
21868: PPUSH
21869: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21873: LD_VAR 0 1
21877: PPUSH
21878: CALL_OW 266
21882: PUSH
21883: LD_INT 24
21885: EQUAL
21886: IFFALSE 21896
// russianAI = 1 ;
21888: LD_ADDR_EXP 39
21892: PUSH
21893: LD_INT 1
21895: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21896: LD_VAR 0 1
21900: PPUSH
21901: CALL_OW 255
21905: PUSH
21906: LD_INT 2
21908: EQUAL
21909: IFFALSE 22479
// begin if GetBType ( building ) = b_breastwork then
21911: LD_VAR 0 1
21915: PPUSH
21916: CALL_OW 266
21920: PUSH
21921: LD_INT 31
21923: EQUAL
21924: IFFALSE 22070
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
21926: LD_ADDR_VAR 0 3
21930: PUSH
21931: LD_INT 22
21933: PUSH
21934: LD_INT 2
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: PUSH
21941: LD_INT 2
21943: PUSH
21944: LD_INT 25
21946: PUSH
21947: LD_INT 1
21949: PUSH
21950: EMPTY
21951: LIST
21952: LIST
21953: PUSH
21954: LD_INT 25
21956: PUSH
21957: LD_INT 8
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: PUSH
21964: EMPTY
21965: LIST
21966: LIST
21967: LIST
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PPUSH
21973: CALL_OW 69
21977: PUSH
21978: LD_EXP 26
21982: DIFF
21983: ST_TO_ADDR
// if not sol then
21984: LD_VAR 0 3
21988: NOT
21989: IFFALSE 21993
// exit ;
21991: GO 22479
// for i in sol do
21993: LD_ADDR_VAR 0 2
21997: PUSH
21998: LD_VAR 0 3
22002: PUSH
22003: FOR_IN
22004: IFFALSE 22068
// if not GetTag ( i ) then
22006: LD_VAR 0 2
22010: PPUSH
22011: CALL_OW 110
22015: NOT
22016: IFFALSE 22066
// begin if IsInUnit ( i ) then
22018: LD_VAR 0 2
22022: PPUSH
22023: CALL_OW 310
22027: IFFALSE 22038
// ComExitBuilding ( i ) ;
22029: LD_VAR 0 2
22033: PPUSH
22034: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22038: LD_VAR 0 2
22042: PPUSH
22043: LD_VAR 0 1
22047: PPUSH
22048: CALL_OW 180
// SetTag ( i , 11 ) ;
22052: LD_VAR 0 2
22056: PPUSH
22057: LD_INT 11
22059: PPUSH
22060: CALL_OW 109
// break ;
22064: GO 22068
// end ;
22066: GO 22003
22068: POP
22069: POP
// end ; if GetBType ( building ) = b_depot then
22070: LD_VAR 0 1
22074: PPUSH
22075: CALL_OW 266
22079: PUSH
22080: LD_INT 0
22082: EQUAL
22083: IFFALSE 22169
// begin arDepot = building ;
22085: LD_ADDR_EXP 43
22089: PUSH
22090: LD_VAR 0 1
22094: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22095: LD_INT 38
22097: PUSH
22098: LD_INT 47
22100: PUSH
22101: EMPTY
22102: LIST
22103: LIST
22104: PPUSH
22105: LD_INT 71
22107: PPUSH
22108: LD_INT 19
22110: PPUSH
22111: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22115: LD_VAR 0 1
22119: PPUSH
22120: CALL_OW 274
22124: PPUSH
22125: LD_INT 1
22127: PPUSH
22128: LD_INT 500
22130: PPUSH
22131: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22135: LD_VAR 0 1
22139: PPUSH
22140: CALL_OW 274
22144: PPUSH
22145: LD_INT 3
22147: PPUSH
22148: LD_INT 30
22150: PPUSH
22151: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22155: LD_EXP 26
22159: PPUSH
22160: LD_EXP 43
22164: PPUSH
22165: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22169: LD_VAR 0 1
22173: PPUSH
22174: CALL_OW 266
22178: PUSH
22179: LD_INT 6
22181: EQUAL
22182: PUSH
22183: LD_VAR 0 1
22187: PPUSH
22188: CALL_OW 266
22192: PUSH
22193: LD_INT 9
22195: EQUAL
22196: OR
22197: IFFALSE 22248
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22199: LD_VAR 0 1
22203: PPUSH
22204: LD_INT 10
22206: PPUSH
22207: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22211: LD_VAR 0 1
22215: PPUSH
22216: LD_INT 11
22218: PPUSH
22219: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
22223: LD_INT 2
22225: PPUSH
22226: LD_VAR 0 1
22230: PPUSH
22231: LD_INT 2
22233: PPUSH
22234: CALL 14108 0 3
// arLab = building ;
22238: LD_ADDR_EXP 44
22242: PUSH
22243: LD_VAR 0 1
22247: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22248: LD_VAR 0 1
22252: PPUSH
22253: CALL_OW 266
22257: PUSH
22258: LD_INT 2
22260: EQUAL
22261: PUSH
22262: LD_VAR 0 1
22266: PPUSH
22267: CALL_OW 266
22271: PUSH
22272: LD_INT 4
22274: EQUAL
22275: OR
22276: IFFALSE 22287
// ComUpgrade ( building ) ;
22278: LD_VAR 0 1
22282: PPUSH
22283: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 266
22296: PUSH
22297: LD_INT 27
22299: EQUAL
22300: IFFALSE 22479
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22302: LD_INT 22
22304: PUSH
22305: LD_INT 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 30
22314: PUSH
22315: LD_INT 27
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PPUSH
22326: CALL_OW 69
22330: PUSH
22331: LD_INT 2
22333: EQUAL
22334: IFFALSE 22479
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22336: LD_ADDR_VAR 0 2
22340: PUSH
22341: LD_INT 22
22343: PUSH
22344: LD_INT 2
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 21
22353: PUSH
22354: LD_INT 1
22356: PUSH
22357: EMPTY
22358: LIST
22359: LIST
22360: PUSH
22361: LD_INT 25
22363: PUSH
22364: LD_INT 2
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: PPUSH
22376: CALL_OW 69
22380: PUSH
22381: LD_INT 1
22383: ARRAY
22384: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22385: LD_VAR 0 2
22389: PPUSH
22390: LD_INT 92
22392: PPUSH
22393: LD_INT 34
22395: PPUSH
22396: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22400: LD_VAR 0 2
22404: PPUSH
22405: LD_INT 82
22407: PPUSH
22408: LD_INT 57
22410: PPUSH
22411: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22415: LD_VAR 0 2
22419: PPUSH
22420: LD_INT 36
22422: PPUSH
22423: LD_INT 28
22425: PPUSH
22426: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22430: LD_INT 22
22432: PUSH
22433: LD_INT 2
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: PUSH
22440: LD_INT 21
22442: PUSH
22443: LD_INT 1
22445: PUSH
22446: EMPTY
22447: LIST
22448: LIST
22449: PUSH
22450: LD_INT 25
22452: PUSH
22453: LD_INT 2
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: LIST
22464: PPUSH
22465: CALL_OW 69
22469: PPUSH
22470: LD_EXP 43
22474: PPUSH
22475: CALL_OW 180
// end ; end ; end ;
22479: PPOPN 4
22481: END
// on UpgradeComplete ( building ) do var i ;
22482: LD_INT 0
22484: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 255
22494: PUSH
22495: LD_INT 1
22497: EQUAL
22498: PUSH
22499: LD_EXP 61
22503: PUSH
22504: LD_INT 0
22506: EQUAL
22507: AND
22508: IFFALSE 22706
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22510: LD_VAR 0 1
22514: PPUSH
22515: CALL_OW 266
22519: PUSH
22520: LD_INT 7
22522: EQUAL
22523: PUSH
22524: LD_VAR 0 1
22528: PPUSH
22529: CALL_OW 266
22533: PUSH
22534: LD_INT 8
22536: EQUAL
22537: OR
22538: IFFALSE 22706
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22540: LD_INT 22
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 26
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: LD_INT 30
22565: PUSH
22566: LD_INT 27
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 28
22578: PUSH
22579: EMPTY
22580: LIST
22581: LIST
22582: PUSH
22583: EMPTY
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PPUSH
22593: CALL_OW 69
22597: PUSH
22598: LD_INT 0
22600: GREATER
22601: IFFALSE 22706
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22603: LD_ADDR_VAR 0 2
22607: PUSH
22608: LD_INT 22
22610: PUSH
22611: LD_INT 1
22613: PUSH
22614: EMPTY
22615: LIST
22616: LIST
22617: PUSH
22618: LD_INT 2
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 7
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: LD_INT 30
22633: PUSH
22634: LD_INT 8
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PUSH
22641: EMPTY
22642: LIST
22643: LIST
22644: LIST
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PPUSH
22650: CALL_OW 69
22654: PUSH
22655: FOR_IN
22656: IFFALSE 22704
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22658: LD_VAR 0 2
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 268
22670: PUSH
22671: LD_INT 11
22673: EQUAL
22674: PUSH
22675: LD_VAR 0 2
22679: PPUSH
22680: LD_INT 2
22682: PPUSH
22683: CALL_OW 268
22687: PUSH
22688: LD_INT 11
22690: EQUAL
22691: OR
22692: IFFALSE 22702
// eventVar1 = 1 ;
22694: LD_ADDR_EXP 61
22698: PUSH
22699: LD_INT 1
22701: ST_TO_ADDR
22702: GO 22655
22704: POP
22705: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22706: LD_VAR 0 1
22710: PPUSH
22711: CALL_OW 255
22715: PUSH
22716: LD_INT 2
22718: EQUAL
22719: IFFALSE 22824
// begin if GetBType ( building ) = b_barracks then
22721: LD_VAR 0 1
22725: PPUSH
22726: CALL_OW 266
22730: PUSH
22731: LD_INT 5
22733: EQUAL
22734: IFFALSE 22824
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22736: LD_ADDR_VAR 0 2
22740: PUSH
22741: LD_INT 22
22743: PUSH
22744: LD_INT 2
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 25
22753: PUSH
22754: LD_INT 1
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: PUSH
22761: LD_INT 3
22763: PUSH
22764: LD_INT 54
22766: PUSH
22767: EMPTY
22768: LIST
22769: PUSH
22770: EMPTY
22771: LIST
22772: LIST
22773: PUSH
22774: EMPTY
22775: LIST
22776: LIST
22777: LIST
22778: PPUSH
22779: CALL_OW 69
22783: PUSH
22784: LD_EXP 26
22788: PUSH
22789: EMPTY
22790: LIST
22791: DIFF
22792: PUSH
22793: FOR_IN
22794: IFFALSE 22812
// ComEnterUnit ( i , building ) ;
22796: LD_VAR 0 2
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 120
22810: GO 22793
22812: POP
22813: POP
// arArm = building ;
22814: LD_ADDR_EXP 45
22818: PUSH
22819: LD_VAR 0 1
22823: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22824: LD_VAR 0 1
22828: PPUSH
22829: CALL_OW 255
22833: PUSH
22834: LD_INT 3
22836: EQUAL
22837: IFFALSE 23310
// begin if GetBType ( building ) = b_factory then
22839: LD_VAR 0 1
22843: PPUSH
22844: CALL_OW 266
22848: PUSH
22849: LD_INT 3
22851: EQUAL
22852: IFFALSE 22919
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22854: LD_ADDR_VAR 0 2
22858: PUSH
22859: LD_INT 22
22861: PUSH
22862: LD_INT 3
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 25
22871: PUSH
22872: LD_INT 3
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 69
22887: PUSH
22888: FOR_IN
22889: IFFALSE 22907
// ComEnterUnit ( i , building ) ;
22891: LD_VAR 0 2
22895: PPUSH
22896: LD_VAR 0 1
22900: PPUSH
22901: CALL_OW 120
22905: GO 22888
22907: POP
22908: POP
// ruFab = building ;
22909: LD_ADDR_EXP 35
22913: PUSH
22914: LD_VAR 0 1
22918: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22919: LD_INT 22
22921: PUSH
22922: LD_INT 3
22924: PUSH
22925: EMPTY
22926: LIST
22927: LIST
22928: PUSH
22929: LD_INT 21
22931: PUSH
22932: LD_INT 3
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 30
22941: PUSH
22942: LD_INT 8
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: PUSH
22949: EMPTY
22950: LIST
22951: LIST
22952: LIST
22953: PPUSH
22954: CALL_OW 69
22958: PUSH
22959: LD_INT 2
22961: EQUAL
22962: IFFALSE 23170
// begin for i = 1 to 2 do
22964: LD_ADDR_VAR 0 2
22968: PUSH
22969: DOUBLE
22970: LD_INT 1
22972: DEC
22973: ST_TO_ADDR
22974: LD_INT 2
22976: PUSH
22977: FOR_TO
22978: IFFALSE 23065
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22980: LD_INT 22
22982: PUSH
22983: LD_INT 3
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 25
22992: PUSH
22993: LD_INT 4
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: EMPTY
23001: LIST
23002: LIST
23003: PPUSH
23004: CALL_OW 69
23008: PUSH
23009: LD_VAR 0 2
23013: ARRAY
23014: PPUSH
23015: LD_INT 22
23017: PUSH
23018: LD_INT 3
23020: PUSH
23021: EMPTY
23022: LIST
23023: LIST
23024: PUSH
23025: LD_INT 21
23027: PUSH
23028: LD_INT 3
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 30
23037: PUSH
23038: LD_INT 8
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: PPUSH
23050: CALL_OW 69
23054: PUSH
23055: LD_INT 1
23057: ARRAY
23058: PPUSH
23059: CALL_OW 120
23063: GO 22977
23065: POP
23066: POP
// for i = 3 to 4 do
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: DOUBLE
23073: LD_INT 3
23075: DEC
23076: ST_TO_ADDR
23077: LD_INT 4
23079: PUSH
23080: FOR_TO
23081: IFFALSE 23168
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23083: LD_INT 22
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: LD_INT 25
23095: PUSH
23096: LD_INT 4
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: EMPTY
23104: LIST
23105: LIST
23106: PPUSH
23107: CALL_OW 69
23111: PUSH
23112: LD_VAR 0 2
23116: ARRAY
23117: PPUSH
23118: LD_INT 22
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 21
23130: PUSH
23131: LD_INT 3
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 30
23140: PUSH
23141: LD_INT 8
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: EMPTY
23149: LIST
23150: LIST
23151: LIST
23152: PPUSH
23153: CALL_OW 69
23157: PUSH
23158: LD_INT 2
23160: ARRAY
23161: PPUSH
23162: CALL_OW 120
23166: GO 23080
23168: POP
23169: POP
// end ; if GetBType ( building ) = b_barracks then
23170: LD_VAR 0 1
23174: PPUSH
23175: CALL_OW 266
23179: PUSH
23180: LD_INT 5
23182: EQUAL
23183: IFFALSE 23310
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23185: LD_ADDR_VAR 0 2
23189: PUSH
23190: LD_INT 22
23192: PUSH
23193: LD_INT 3
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 25
23202: PUSH
23203: LD_INT 1
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: LD_INT 3
23212: PUSH
23213: LD_INT 54
23215: PUSH
23216: EMPTY
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: LIST
23227: PPUSH
23228: CALL_OW 69
23232: PUSH
23233: FOR_IN
23234: IFFALSE 23252
// ComEnterUnit ( i , building ) ;
23236: LD_VAR 0 2
23240: PPUSH
23241: LD_VAR 0 1
23245: PPUSH
23246: CALL_OW 120
23250: GO 23233
23252: POP
23253: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23254: LD_INT 22
23256: PUSH
23257: LD_INT 3
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PUSH
23264: LD_INT 30
23266: PUSH
23267: LD_INT 5
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PPUSH
23278: CALL_OW 69
23282: PUSH
23283: LD_INT 0
23285: EQUAL
23286: IFFALSE 23300
// ruArm1 = building else
23288: LD_ADDR_EXP 33
23292: PUSH
23293: LD_VAR 0 1
23297: ST_TO_ADDR
23298: GO 23310
// ruArm2 = building ;
23300: LD_ADDR_EXP 34
23304: PUSH
23305: LD_VAR 0 1
23309: ST_TO_ADDR
// end ; end ; end ;
23310: PPOPN 2
23312: END
// on EnterBuilding ( building , human ) do var rnd ;
23313: LD_INT 0
23315: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23316: LD_VAR 0 2
23320: PPUSH
23321: CALL_OW 255
23325: PUSH
23326: LD_INT 2
23328: EQUAL
23329: PUSH
23330: LD_VAR 0 2
23334: PPUSH
23335: CALL_OW 257
23339: PUSH
23340: LD_INT 1
23342: EQUAL
23343: AND
23344: PUSH
23345: LD_VAR 0 1
23349: PUSH
23350: LD_EXP 45
23354: EQUAL
23355: AND
23356: IFFALSE 23403
// begin wait ( 0 0$1 ) ;
23358: LD_INT 35
23360: PPUSH
23361: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_INT 1
23372: PPUSH
23373: LD_INT 100
23375: PPUSH
23376: CALL_OW 12
23380: ST_TO_ADDR
// if rnd > 50 then
23381: LD_VAR 0 3
23385: PUSH
23386: LD_INT 50
23388: GREATER
23389: IFFALSE 23403
// SetClass ( human , class_mortar ) ;
23391: LD_VAR 0 2
23395: PPUSH
23396: LD_INT 8
23398: PPUSH
23399: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
23403: LD_VAR 0 2
23407: PUSH
23408: LD_INT 22
23410: PUSH
23411: LD_INT 2
23413: PUSH
23414: EMPTY
23415: LIST
23416: LIST
23417: PUSH
23418: LD_INT 25
23420: PUSH
23421: LD_INT 12
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: PPUSH
23432: CALL_OW 69
23436: IN
23437: IFFALSE 23487
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 266
23448: PUSH
23449: LD_INT 0
23451: PUSH
23452: LD_INT 1
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: IN
23459: IFFALSE 23475
// SetClass ( human , class_apeman_engineer ) else
23461: LD_VAR 0 2
23465: PPUSH
23466: LD_INT 16
23468: PPUSH
23469: CALL_OW 336
23473: GO 23487
// SetClass ( human , class_apeman_soldier ) ;
23475: LD_VAR 0 2
23479: PPUSH
23480: LD_INT 15
23482: PPUSH
23483: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23487: LD_VAR 0 2
23491: PPUSH
23492: CALL_OW 255
23496: PUSH
23497: LD_INT 3
23499: EQUAL
23500: PUSH
23501: LD_VAR 0 2
23505: PPUSH
23506: CALL_OW 257
23510: PUSH
23511: LD_INT 1
23513: EQUAL
23514: AND
23515: PUSH
23516: LD_VAR 0 1
23520: PUSH
23521: LD_EXP 33
23525: EQUAL
23526: PUSH
23527: LD_VAR 0 1
23531: PUSH
23532: LD_EXP 34
23536: EQUAL
23537: OR
23538: PUSH
23539: EMPTY
23540: LIST
23541: AND
23542: IFFALSE 23563
// begin wait ( 0 0$1 ) ;
23544: LD_INT 35
23546: PPUSH
23547: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23551: LD_VAR 0 2
23555: PPUSH
23556: LD_INT 9
23558: PPUSH
23559: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23563: LD_VAR 0 2
23567: PPUSH
23568: CALL_OW 255
23572: PUSH
23573: LD_INT 3
23575: EQUAL
23576: PUSH
23577: LD_VAR 0 2
23581: PPUSH
23582: CALL_OW 257
23586: PUSH
23587: LD_INT 9
23589: EQUAL
23590: AND
23591: PUSH
23592: LD_VAR 0 1
23596: PPUSH
23597: CALL_OW 266
23601: PUSH
23602: LD_INT 32
23604: EQUAL
23605: AND
23606: IFFALSE 23627
// begin wait ( 0 0$1 ) ;
23608: LD_INT 35
23610: PPUSH
23611: CALL_OW 67
// SetClass ( human , 1 ) ;
23615: LD_VAR 0 2
23619: PPUSH
23620: LD_INT 1
23622: PPUSH
23623: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23627: LD_VAR 0 2
23631: PPUSH
23632: CALL_OW 255
23636: PUSH
23637: LD_INT 3
23639: EQUAL
23640: PUSH
23641: LD_VAR 0 2
23645: PPUSH
23646: CALL_OW 257
23650: PUSH
23651: LD_INT 3
23653: EQUAL
23654: AND
23655: PUSH
23656: LD_VAR 0 1
23660: PUSH
23661: LD_EXP 35
23665: EQUAL
23666: AND
23667: IFFALSE 23681
// SetLives ( human , 1000 ) ;
23669: LD_VAR 0 2
23673: PPUSH
23674: LD_INT 1000
23676: PPUSH
23677: CALL_OW 234
// end ;
23681: PPOPN 3
23683: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23684: LD_VAR 0 1
23688: PUSH
23689: LD_INT 1
23691: EQUAL
23692: PUSH
23693: LD_VAR 0 2
23697: PUSH
23698: LD_INT 2
23700: EQUAL
23701: AND
23702: PUSH
23703: LD_INT 1
23705: PPUSH
23706: LD_INT 2
23708: PPUSH
23709: CALL_OW 81
23713: PUSH
23714: LD_INT 1
23716: EQUAL
23717: AND
23718: IFFALSE 23739
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23720: LD_EXP 24
23724: PPUSH
23725: LD_STRING D6b-Pow-1
23727: PPUSH
23728: CALL_OW 94
// YouLost ( Powell ) ;
23732: LD_STRING Powell
23734: PPUSH
23735: CALL_OW 104
// end ; end ;
23739: PPOPN 2
23741: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23742: LD_INT 23
23744: PPUSH
23745: LD_INT 22
23747: PUSH
23748: LD_INT 1
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: PUSH
23755: LD_INT 21
23757: PUSH
23758: LD_INT 3
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PPUSH
23769: CALL_OW 70
23773: PUSH
23774: LD_INT 23
23776: PPUSH
23777: LD_INT 22
23779: PUSH
23780: LD_INT 1
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 21
23789: PUSH
23790: LD_INT 2
23792: PUSH
23793: EMPTY
23794: LIST
23795: LIST
23796: PUSH
23797: EMPTY
23798: LIST
23799: LIST
23800: PPUSH
23801: CALL_OW 70
23805: OR
23806: PUSH
23807: LD_INT 1
23809: PPUSH
23810: LD_INT 2
23812: PPUSH
23813: CALL_OW 81
23817: PUSH
23818: LD_INT 1
23820: EQUAL
23821: AND
23822: IFFALSE 23846
23824: GO 23826
23826: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23827: LD_EXP 24
23831: PPUSH
23832: LD_STRING D6b-Pow-1
23834: PPUSH
23835: CALL_OW 94
// YouLost ( Powell ) ;
23839: LD_STRING Powell
23841: PPUSH
23842: CALL_OW 104
// end ;
23846: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23847: LD_VAR 0 1
23851: PUSH
23852: LD_EXP 1
23856: EQUAL
23857: IFFALSE 23866
// YouLost ( JMM ) ;
23859: LD_STRING JMM
23861: PPUSH
23862: CALL_OW 104
// if unit = Khatam then
23866: LD_VAR 0 1
23870: PUSH
23871: LD_EXP 14
23875: EQUAL
23876: IFFALSE 23886
// KhatamStatus = 0 ;
23878: LD_ADDR_EXP 52
23882: PUSH
23883: LD_INT 0
23885: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 255
23895: PUSH
23896: LD_INT 3
23898: EQUAL
23899: PUSH
23900: LD_VAR 0 1
23904: PPUSH
23905: CALL_OW 247
23909: PUSH
23910: LD_INT 3
23912: EQUAL
23913: AND
23914: IFFALSE 24606
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23916: LD_VAR 0 1
23920: PPUSH
23921: CALL_OW 266
23925: PUSH
23926: LD_INT 31
23928: EQUAL
23929: PUSH
23930: LD_VAR 0 1
23934: PPUSH
23935: CALL_OW 266
23939: PUSH
23940: LD_INT 32
23942: EQUAL
23943: OR
23944: PUSH
23945: LD_VAR 0 1
23949: PPUSH
23950: CALL_OW 266
23954: PUSH
23955: LD_INT 36
23957: EQUAL
23958: OR
23959: PUSH
23960: LD_VAR 0 1
23964: PPUSH
23965: CALL_OW 266
23969: PUSH
23970: LD_INT 0
23972: EQUAL
23973: OR
23974: PUSH
23975: LD_VAR 0 1
23979: PPUSH
23980: CALL_OW 266
23984: PUSH
23985: LD_INT 24
23987: EQUAL
23988: OR
23989: PUSH
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL_OW 266
23999: PUSH
24000: LD_INT 17
24002: EQUAL
24003: OR
24004: PUSH
24005: LD_VAR 0 1
24009: PPUSH
24010: CALL_OW 266
24014: PUSH
24015: LD_INT 25
24017: EQUAL
24018: OR
24019: PUSH
24020: LD_VAR 0 1
24024: PPUSH
24025: CALL_OW 266
24029: PUSH
24030: LD_INT 19
24032: EQUAL
24033: OR
24034: PUSH
24035: LD_VAR 0 1
24039: PPUSH
24040: CALL_OW 266
24044: PUSH
24045: LD_INT 20
24047: EQUAL
24048: OR
24049: PUSH
24050: LD_VAR 0 1
24054: PPUSH
24055: CALL_OW 266
24059: PUSH
24060: LD_INT 18
24062: EQUAL
24063: OR
24064: PUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 266
24074: PUSH
24075: LD_INT 21
24077: EQUAL
24078: OR
24079: PUSH
24080: LD_VAR 0 1
24084: PPUSH
24085: CALL_OW 266
24089: PUSH
24090: LD_INT 23
24092: EQUAL
24093: OR
24094: PUSH
24095: LD_VAR 0 1
24099: PPUSH
24100: CALL_OW 266
24104: PUSH
24105: LD_INT 16
24107: EQUAL
24108: OR
24109: PUSH
24110: LD_VAR 0 1
24114: PPUSH
24115: CALL_OW 266
24119: PUSH
24120: LD_INT 6
24122: EQUAL
24123: OR
24124: PUSH
24125: LD_VAR 0 1
24129: PPUSH
24130: CALL_OW 266
24134: PUSH
24135: LD_INT 29
24137: EQUAL
24138: OR
24139: PUSH
24140: LD_VAR 0 1
24144: PPUSH
24145: CALL_OW 266
24149: PUSH
24150: LD_INT 26
24152: EQUAL
24153: OR
24154: PUSH
24155: LD_VAR 0 1
24159: PPUSH
24160: CALL_OW 266
24164: PUSH
24165: LD_INT 30
24167: EQUAL
24168: OR
24169: PUSH
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 266
24179: PUSH
24180: LD_INT 28
24182: EQUAL
24183: OR
24184: PUSH
24185: LD_VAR 0 1
24189: PPUSH
24190: CALL_OW 266
24194: PUSH
24195: LD_INT 27
24197: EQUAL
24198: OR
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 266
24209: PUSH
24210: LD_INT 33
24212: EQUAL
24213: OR
24214: PUSH
24215: LD_VAR 0 1
24219: PPUSH
24220: CALL_OW 266
24224: PUSH
24225: LD_INT 2
24227: EQUAL
24228: OR
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 266
24239: PUSH
24240: LD_INT 4
24242: EQUAL
24243: OR
24244: IFFALSE 24330
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24246: LD_ADDR_EXP 42
24250: PUSH
24251: LD_EXP 42
24255: PUSH
24256: LD_VAR 0 1
24260: PPUSH
24261: CALL_OW 266
24265: ADD
24266: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24267: LD_ADDR_EXP 42
24271: PUSH
24272: LD_EXP 42
24276: PUSH
24277: LD_VAR 0 1
24281: PPUSH
24282: CALL_OW 250
24286: ADD
24287: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24288: LD_ADDR_EXP 42
24292: PUSH
24293: LD_EXP 42
24297: PUSH
24298: LD_VAR 0 1
24302: PPUSH
24303: CALL_OW 251
24307: ADD
24308: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24309: LD_ADDR_EXP 42
24313: PUSH
24314: LD_EXP 42
24318: PUSH
24319: LD_VAR 0 1
24323: PPUSH
24324: CALL_OW 254
24328: ADD
24329: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24330: LD_VAR 0 1
24334: PPUSH
24335: CALL_OW 266
24339: PUSH
24340: LD_INT 1
24342: EQUAL
24343: IFFALSE 24422
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24345: LD_ADDR_EXP 42
24349: PUSH
24350: LD_EXP 42
24354: PUSH
24355: LD_INT 0
24357: ADD
24358: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24359: LD_ADDR_EXP 42
24363: PUSH
24364: LD_EXP 42
24368: PUSH
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 250
24378: ADD
24379: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24380: LD_ADDR_EXP 42
24384: PUSH
24385: LD_EXP 42
24389: PUSH
24390: LD_VAR 0 1
24394: PPUSH
24395: CALL_OW 251
24399: ADD
24400: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24401: LD_ADDR_EXP 42
24405: PUSH
24406: LD_EXP 42
24410: PUSH
24411: LD_VAR 0 1
24415: PPUSH
24416: CALL_OW 254
24420: ADD
24421: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 266
24431: PUSH
24432: LD_INT 3
24434: EQUAL
24435: IFFALSE 24514
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24437: LD_ADDR_EXP 42
24441: PUSH
24442: LD_EXP 42
24446: PUSH
24447: LD_INT 2
24449: ADD
24450: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24451: LD_ADDR_EXP 42
24455: PUSH
24456: LD_EXP 42
24460: PUSH
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL_OW 250
24470: ADD
24471: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24472: LD_ADDR_EXP 42
24476: PUSH
24477: LD_EXP 42
24481: PUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 251
24491: ADD
24492: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24493: LD_ADDR_EXP 42
24497: PUSH
24498: LD_EXP 42
24502: PUSH
24503: LD_VAR 0 1
24507: PPUSH
24508: CALL_OW 254
24512: ADD
24513: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24514: LD_VAR 0 1
24518: PPUSH
24519: CALL_OW 266
24523: PUSH
24524: LD_INT 5
24526: EQUAL
24527: IFFALSE 24606
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24529: LD_ADDR_EXP 42
24533: PUSH
24534: LD_EXP 42
24538: PUSH
24539: LD_INT 4
24541: ADD
24542: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24543: LD_ADDR_EXP 42
24547: PUSH
24548: LD_EXP 42
24552: PUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 250
24562: ADD
24563: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24564: LD_ADDR_EXP 42
24568: PUSH
24569: LD_EXP 42
24573: PUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 251
24583: ADD
24584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24585: LD_ADDR_EXP 42
24589: PUSH
24590: LD_EXP 42
24594: PUSH
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 254
24604: ADD
24605: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24606: LD_VAR 0 1
24610: PPUSH
24611: CALL_OW 257
24615: PUSH
24616: LD_INT 3
24618: EQUAL
24619: PUSH
24620: LD_VAR 0 1
24624: PPUSH
24625: CALL_OW 255
24629: PUSH
24630: LD_INT 3
24632: EQUAL
24633: AND
24634: PUSH
24635: LD_EXP 35
24639: PPUSH
24640: CALL_OW 302
24644: AND
24645: PUSH
24646: LD_EXP 35
24650: PPUSH
24651: CALL_OW 255
24655: PUSH
24656: LD_INT 3
24658: EQUAL
24659: AND
24660: IFFALSE 24730
// begin uc_side = 3 ;
24662: LD_ADDR_OWVAR 20
24666: PUSH
24667: LD_INT 3
24669: ST_TO_ADDR
// uc_nation = 3 ;
24670: LD_ADDR_OWVAR 21
24674: PUSH
24675: LD_INT 3
24677: ST_TO_ADDR
// hc_gallery :=  ;
24678: LD_ADDR_OWVAR 33
24682: PUSH
24683: LD_STRING 
24685: ST_TO_ADDR
// hc_name :=  ;
24686: LD_ADDR_OWVAR 26
24690: PUSH
24691: LD_STRING 
24693: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24694: LD_INT 0
24696: PPUSH
24697: LD_EXP 36
24701: PPUSH
24702: LD_EXP 37
24706: PPUSH
24707: CALL_OW 12
24711: PPUSH
24712: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24716: CALL_OW 44
24720: PPUSH
24721: LD_EXP 35
24725: PPUSH
24726: CALL_OW 52
// end ; end ;
24730: PPOPN 1
24732: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24733: LD_ADDR_OWVAR 57
24737: PUSH
24738: LD_INT 0
24740: ST_TO_ADDR
// fastEnd = 1 ;
24741: LD_ADDR_EXP 59
24745: PUSH
24746: LD_INT 1
24748: ST_TO_ADDR
// FinishMission ;
24749: CALL 25853 0 0
// end ; end_of_file
24753: PPOPN 1
24755: END
// export function PrepareNature ; var i , un ; begin
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24761: LD_ADDR_VAR 0 2
24765: PUSH
24766: DOUBLE
24767: LD_INT 1
24769: DEC
24770: ST_TO_ADDR
24771: LD_OWVAR 67
24775: PUSH
24776: LD_INT 1
24778: PPUSH
24779: LD_INT 5
24781: PPUSH
24782: CALL_OW 12
24786: PLUS
24787: PUSH
24788: FOR_TO
24789: IFFALSE 24934
// begin hc_sex = sex_male ;
24791: LD_ADDR_OWVAR 27
24795: PUSH
24796: LD_INT 1
24798: ST_TO_ADDR
// uc_side = 0 ;
24799: LD_ADDR_OWVAR 20
24803: PUSH
24804: LD_INT 0
24806: ST_TO_ADDR
// uc_nation = nation_nature ;
24807: LD_ADDR_OWVAR 21
24811: PUSH
24812: LD_INT 0
24814: ST_TO_ADDR
// hc_class = class_apeman ;
24815: LD_ADDR_OWVAR 28
24819: PUSH
24820: LD_INT 12
24822: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24823: LD_ADDR_OWVAR 31
24827: PUSH
24828: LD_INT 2
24830: PPUSH
24831: LD_INT 7
24833: PPUSH
24834: CALL_OW 12
24838: PUSH
24839: LD_OWVAR 67
24843: PLUS
24844: PUSH
24845: LD_INT 2
24847: PPUSH
24848: LD_INT 10
24850: PPUSH
24851: CALL_OW 12
24855: PUSH
24856: LD_INT 2
24858: PPUSH
24859: LD_INT 10
24861: PPUSH
24862: CALL_OW 12
24866: PUSH
24867: LD_INT 2
24869: PPUSH
24870: LD_INT 10
24872: PPUSH
24873: CALL_OW 12
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24884: LD_ADDR_OWVAR 35
24888: PUSH
24889: LD_INT 5
24891: NEG
24892: PPUSH
24893: LD_INT 5
24895: PPUSH
24896: CALL_OW 12
24900: PUSH
24901: LD_OWVAR 67
24905: MUL
24906: ST_TO_ADDR
// un = CreateHuman ;
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: CALL_OW 44
24916: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24917: LD_VAR 0 3
24921: PPUSH
24922: LD_INT 5
24924: PPUSH
24925: LD_INT 0
24927: PPUSH
24928: CALL_OW 49
// end ;
24932: GO 24788
24934: POP
24935: POP
// for i = 1 to Difficulty + 2 do
24936: LD_ADDR_VAR 0 2
24940: PUSH
24941: DOUBLE
24942: LD_INT 1
24944: DEC
24945: ST_TO_ADDR
24946: LD_OWVAR 67
24950: PUSH
24951: LD_INT 2
24953: PLUS
24954: PUSH
24955: FOR_TO
24956: IFFALSE 25065
// begin hc_sex = sex_male ;
24958: LD_ADDR_OWVAR 27
24962: PUSH
24963: LD_INT 1
24965: ST_TO_ADDR
// uc_side = 0 ;
24966: LD_ADDR_OWVAR 20
24970: PUSH
24971: LD_INT 0
24973: ST_TO_ADDR
// uc_nation = nation_nature ;
24974: LD_ADDR_OWVAR 21
24978: PUSH
24979: LD_INT 0
24981: ST_TO_ADDR
// hc_class = class_tiger ;
24982: LD_ADDR_OWVAR 28
24986: PUSH
24987: LD_INT 14
24989: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24990: LD_ADDR_OWVAR 31
24994: PUSH
24995: LD_EXP 37
24999: PUSH
25000: LD_INT 0
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 0
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: LIST
25013: LIST
25014: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25015: LD_ADDR_OWVAR 35
25019: PUSH
25020: LD_INT 5
25022: NEG
25023: PPUSH
25024: LD_INT 5
25026: PPUSH
25027: CALL_OW 12
25031: PUSH
25032: LD_OWVAR 67
25036: MUL
25037: ST_TO_ADDR
// un = CreateHuman ;
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: CALL_OW 44
25047: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25048: LD_VAR 0 3
25052: PPUSH
25053: LD_INT 6
25055: PPUSH
25056: LD_INT 0
25058: PPUSH
25059: CALL_OW 49
// end ;
25063: GO 24955
25065: POP
25066: POP
// for i = 1 to rand ( 3 , 4 ) do
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: DOUBLE
25073: LD_INT 1
25075: DEC
25076: ST_TO_ADDR
25077: LD_INT 3
25079: PPUSH
25080: LD_INT 4
25082: PPUSH
25083: CALL_OW 12
25087: PUSH
25088: FOR_TO
25089: IFFALSE 25183
// begin hc_sex = sex_male ;
25091: LD_ADDR_OWVAR 27
25095: PUSH
25096: LD_INT 1
25098: ST_TO_ADDR
// uc_side = 0 ;
25099: LD_ADDR_OWVAR 20
25103: PUSH
25104: LD_INT 0
25106: ST_TO_ADDR
// uc_nation = nation_nature ;
25107: LD_ADDR_OWVAR 21
25111: PUSH
25112: LD_INT 0
25114: ST_TO_ADDR
// hc_class = 18 ;
25115: LD_ADDR_OWVAR 28
25119: PUSH
25120: LD_INT 18
25122: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25123: LD_ADDR_OWVAR 31
25127: PUSH
25128: LD_EXP 37
25132: PUSH
25133: LD_INT 0
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 0
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: ST_TO_ADDR
// hc_agressivity = 0 ;
25148: LD_ADDR_OWVAR 35
25152: PUSH
25153: LD_INT 0
25155: ST_TO_ADDR
// un = CreateHuman ;
25156: LD_ADDR_VAR 0 3
25160: PUSH
25161: CALL_OW 44
25165: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25166: LD_VAR 0 3
25170: PPUSH
25171: LD_INT 6
25173: PPUSH
25174: LD_INT 0
25176: PPUSH
25177: CALL_OW 49
// end ;
25181: GO 25088
25183: POP
25184: POP
// end ; end_of_file
25185: LD_VAR 0 1
25189: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25190: LD_EXP 46
25194: PUSH
25195: LD_INT 1
25197: EQUAL
25198: IFFALSE 25282
25200: GO 25202
25202: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25203: LD_INT 7
25205: PPUSH
25206: LD_INT 5
25208: PPUSH
25209: LD_INT 4
25211: PUSH
25212: LD_INT 5
25214: PUSH
25215: LD_INT 6
25217: PUSH
25218: EMPTY
25219: LIST
25220: LIST
25221: LIST
25222: PUSH
25223: LD_OWVAR 67
25227: ARRAY
25228: PPUSH
25229: LD_EXP 36
25233: PPUSH
25234: LD_EXP 37
25238: PPUSH
25239: CALL_OW 12
25243: PPUSH
25244: LD_INT 2
25246: PPUSH
25247: LD_INT 1
25249: PPUSH
25250: LD_INT 1
25252: PPUSH
25253: EMPTY
25254: PPUSH
25255: LD_INT 25
25257: PUSH
25258: LD_INT 26
25260: PUSH
25261: LD_INT 27
25263: PUSH
25264: LD_INT 28
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: PPUSH
25273: EMPTY
25274: PPUSH
25275: LD_INT 1
25277: PPUSH
25278: CALL 15670 0 11
25282: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25283: LD_EXP 46
25287: PUSH
25288: LD_INT 1
25290: EQUAL
25291: IFFALSE 25379
25293: GO 25295
25295: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25296: LD_INT 5
25298: PPUSH
25299: LD_INT 2
25301: PPUSH
25302: LD_INT 6
25304: PUSH
25305: LD_INT 7
25307: PUSH
25308: LD_INT 8
25310: PUSH
25311: EMPTY
25312: LIST
25313: LIST
25314: LIST
25315: PUSH
25316: LD_OWVAR 67
25320: ARRAY
25321: PPUSH
25322: LD_INT 0
25324: PPUSH
25325: LD_INT 0
25327: PPUSH
25328: LD_INT 2
25330: PUSH
25331: LD_INT 4
25333: PUSH
25334: LD_INT 5
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: LIST
25341: PUSH
25342: LD_OWVAR 67
25346: ARRAY
25347: PPUSH
25348: LD_INT 0
25350: PPUSH
25351: LD_EXP 36
25355: PPUSH
25356: LD_EXP 37
25360: PPUSH
25361: CALL_OW 12
25365: PPUSH
25366: LD_INT 7
25368: PPUSH
25369: LD_INT 9
25371: PPUSH
25372: LD_INT 1
25374: PPUSH
25375: CALL 17374 0 11
25379: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25380: LD_EXP 46
25384: PUSH
25385: LD_INT 1
25387: EQUAL
25388: IFFALSE 25397
25390: GO 25392
25392: DISABLE
// PrepareArabianSheik ;
25393: CALL 3805 0 0
25397: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25398: LD_EXP 29
25402: PUSH
25403: LD_EXP 60
25407: PUSH
25408: LD_INT 1
25410: EQUAL
25411: AND
25412: IFFALSE 25481
25414: GO 25416
25416: DISABLE
// begin enable ;
25417: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25418: LD_INT 6
25420: PPUSH
25421: LD_INT 3
25423: PPUSH
25424: LD_EXP 57
25428: PPUSH
25429: LD_INT 0
25431: PPUSH
25432: LD_OWVAR 67
25436: PPUSH
25437: LD_INT 0
25439: PPUSH
25440: LD_EXP 57
25444: PUSH
25445: LD_INT 3
25447: DIV
25448: PUSH
25449: LD_INT 1
25451: PLUS
25452: PPUSH
25453: LD_EXP 36
25457: PPUSH
25458: LD_EXP 37
25462: PPUSH
25463: CALL_OW 12
25467: PPUSH
25468: LD_INT 17
25470: PPUSH
25471: LD_INT 18
25473: PPUSH
25474: LD_INT 1
25476: PPUSH
25477: CALL 17374 0 11
// end ;
25481: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25482: LD_EXP 29
25486: PUSH
25487: LD_EXP 60
25491: PUSH
25492: LD_INT 1
25494: EQUAL
25495: AND
25496: IFFALSE 25573
25498: GO 25500
25500: DISABLE
// begin enable ;
25501: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25502: LD_INT 17
25504: PPUSH
25505: LD_INT 6
25507: PPUSH
25508: LD_EXP 56
25512: PPUSH
25513: LD_EXP 36
25517: PPUSH
25518: LD_EXP 37
25522: PPUSH
25523: CALL_OW 12
25527: PPUSH
25528: LD_INT 3
25530: PPUSH
25531: LD_INT 1
25533: PPUSH
25534: LD_INT 3
25536: PUSH
25537: LD_INT 3
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: PPUSH
25544: LD_INT 43
25546: PUSH
25547: LD_INT 44
25549: PUSH
25550: LD_INT 45
25552: PUSH
25553: LD_INT 46
25555: PUSH
25556: EMPTY
25557: LIST
25558: LIST
25559: LIST
25560: LIST
25561: PPUSH
25562: EMPTY
25563: PPUSH
25564: EMPTY
25565: PPUSH
25566: LD_INT 1
25568: PPUSH
25569: CALL 15670 0 11
// end ;
25573: END
// every 10 10$00 trigger joinEpsilon do
25574: LD_EXP 29
25578: IFFALSE 25632
25580: GO 25582
25582: DISABLE
// begin enable ;
25583: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25584: LD_ADDR_EXP 56
25588: PUSH
25589: LD_EXP 56
25593: PUSH
25594: LD_INT 1
25596: PPUSH
25597: LD_OWVAR 67
25601: PPUSH
25602: CALL_OW 12
25606: PLUS
25607: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25608: LD_ADDR_EXP 57
25612: PUSH
25613: LD_EXP 57
25617: PUSH
25618: LD_INT 1
25620: PPUSH
25621: LD_OWVAR 67
25625: PPUSH
25626: CALL_OW 12
25630: PLUS
25631: ST_TO_ADDR
// end ;
25632: END
// every 21 21$0 trigger attackAvalaible = 1 do
25633: LD_EXP 60
25637: PUSH
25638: LD_INT 1
25640: EQUAL
25641: IFFALSE 25654
25643: GO 25645
25645: DISABLE
// attackAvalaible = 0 ; end_of_file
25646: LD_ADDR_EXP 60
25650: PUSH
25651: LD_INT 0
25653: ST_TO_ADDR
25654: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25655: LD_INT 54
25657: PPUSH
25658: LD_INT 1
25660: PPUSH
25661: CALL_OW 321
25665: PUSH
25666: LD_INT 2
25668: EQUAL
25669: PUSH
25670: LD_INT 55
25672: PPUSH
25673: LD_INT 1
25675: PPUSH
25676: CALL_OW 321
25680: PUSH
25681: LD_INT 2
25683: EQUAL
25684: AND
25685: PUSH
25686: LD_INT 21
25688: PPUSH
25689: LD_INT 1
25691: PPUSH
25692: CALL_OW 321
25696: PUSH
25697: LD_INT 2
25699: EQUAL
25700: AND
25701: PUSH
25702: LD_INT 22
25704: PPUSH
25705: LD_INT 1
25707: PPUSH
25708: CALL_OW 321
25712: PUSH
25713: LD_INT 2
25715: EQUAL
25716: AND
25717: PUSH
25718: LD_INT 12
25720: PPUSH
25721: LD_INT 1
25723: PPUSH
25724: CALL_OW 321
25728: PUSH
25729: LD_INT 1
25731: EQUAL
25732: PUSH
25733: LD_INT 32
25735: PPUSH
25736: LD_INT 1
25738: PPUSH
25739: CALL_OW 321
25743: PUSH
25744: LD_INT 1
25746: EQUAL
25747: OR
25748: PUSH
25749: EMPTY
25750: LIST
25751: AND
25752: PUSH
25753: LD_EXP 48
25757: PUSH
25758: LD_INT 1
25760: EQUAL
25761: AND
25762: PUSH
25763: LD_INT 22
25765: PUSH
25766: LD_INT 3
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: PUSH
25773: LD_INT 21
25775: PUSH
25776: LD_INT 1
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PPUSH
25787: CALL_OW 69
25791: PUSH
25792: LD_INT 0
25794: EQUAL
25795: AND
25796: IFFALSE 25852
25798: GO 25800
25800: DISABLE
// begin case query ( QEndMission ) of 1 :
25801: LD_STRING QEndMission
25803: PPUSH
25804: CALL_OW 97
25808: PUSH
25809: LD_INT 1
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25828
25817: POP
// begin end_the_mission_allowed = true ;
25818: LD_ADDR_OWVAR 57
25822: PUSH
25823: LD_INT 1
25825: ST_TO_ADDR
// end ; 2 :
25826: GO 25852
25828: LD_INT 2
25830: DOUBLE
25831: EQUAL
25832: IFTRUE 25836
25834: GO 25851
25836: POP
// begin fastEnd = 1 ;
25837: LD_ADDR_EXP 59
25841: PUSH
25842: LD_INT 1
25844: ST_TO_ADDR
// FinishMission ;
25845: CALL 25853 0 0
// end ; end ;
25849: GO 25852
25851: POP
// end ;
25852: END
// export function FinishMission ; begin
25853: LD_INT 0
25855: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25856: LD_EXP 52
25860: PPUSH
25861: LD_STRING 10_KhatamStatus_1
25863: PPUSH
25864: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25868: LD_EXP 51
25872: PPUSH
25873: LD_STRING 10_GensherEscape_1
25875: PPUSH
25876: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25880: LD_INT 12
25882: PPUSH
25883: LD_INT 1
25885: PPUSH
25886: CALL_OW 321
25890: PUSH
25891: LD_INT 2
25893: EQUAL
25894: IFFALSE 25908
// begin AddMedal ( sights , 1 ) ;
25896: LD_STRING sights
25898: PPUSH
25899: LD_INT 1
25901: PPUSH
25902: CALL_OW 101
// end else
25906: GO 25919
// begin AddMedal ( sights , - 1 ) ;
25908: LD_STRING sights
25910: PPUSH
25911: LD_INT 1
25913: NEG
25914: PPUSH
25915: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25919: LD_INT 32
25921: PPUSH
25922: LD_INT 1
25924: PPUSH
25925: CALL_OW 321
25929: PUSH
25930: LD_INT 2
25932: EQUAL
25933: IFFALSE 25947
// begin AddMedal ( computers , 1 ) ;
25935: LD_STRING computers
25937: PPUSH
25938: LD_INT 1
25940: PPUSH
25941: CALL_OW 101
// end else
25945: GO 25958
// begin AddMedal ( computers , - 1 ) ;
25947: LD_STRING computers
25949: PPUSH
25950: LD_INT 1
25952: NEG
25953: PPUSH
25954: CALL_OW 101
// end ; if arabianEscape = 0 then
25958: LD_EXP 47
25962: PUSH
25963: LD_INT 0
25965: EQUAL
25966: IFFALSE 25990
// begin AddMedal ( renegades , 2 ) ;
25968: LD_STRING renegades
25970: PPUSH
25971: LD_INT 2
25973: PPUSH
25974: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
25978: LD_INT 0
25980: PPUSH
25981: LD_STRING 10_ScientistsEscape_1
25983: PPUSH
25984: CALL_OW 39
// end else
25988: GO 26001
// begin AddMedal ( renegades , - 1 ) ;
25990: LD_STRING renegades
25992: PPUSH
25993: LD_INT 1
25995: NEG
25996: PPUSH
25997: CALL_OW 101
// end ; SaveEpsilonBase ;
26001: CALL 26725 0 0
// GiveMedals ( Main ) ;
26005: LD_STRING Main
26007: PPUSH
26008: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26012: LD_INT 22
26014: PUSH
26015: LD_INT 1
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: PUSH
26022: LD_INT 23
26024: PUSH
26025: LD_INT 1
26027: PUSH
26028: EMPTY
26029: LIST
26030: LIST
26031: PUSH
26032: LD_INT 21
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: EMPTY
26039: LIST
26040: LIST
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: LD_INT 25
26047: PUSH
26048: LD_INT 1
26050: PUSH
26051: EMPTY
26052: LIST
26053: LIST
26054: PUSH
26055: LD_INT 25
26057: PUSH
26058: LD_INT 2
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 25
26067: PUSH
26068: LD_INT 3
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 25
26077: PUSH
26078: LD_INT 4
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 25
26087: PUSH
26088: LD_INT 5
26090: PUSH
26091: EMPTY
26092: LIST
26093: LIST
26094: PUSH
26095: LD_INT 25
26097: PUSH
26098: LD_INT 8
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: PPUSH
26120: CALL_OW 69
26124: PPUSH
26125: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26129: LD_EXP 1
26133: PPUSH
26134: LD_EXP 53
26138: PUSH
26139: LD_STRING JMM
26141: STR
26142: PPUSH
26143: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26147: LD_EXP 2
26151: PPUSH
26152: LD_EXP 53
26156: PUSH
26157: LD_STRING Brown
26159: STR
26160: PPUSH
26161: CALL 9956 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26165: LD_EXP 3
26169: PPUSH
26170: LD_EXP 53
26174: PUSH
26175: LD_STRING Donaldson
26177: STR
26178: PPUSH
26179: CALL 9956 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26183: LD_EXP 4
26187: PPUSH
26188: LD_EXP 53
26192: PUSH
26193: LD_STRING Bobby
26195: STR
26196: PPUSH
26197: CALL 9956 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26201: LD_EXP 5
26205: PPUSH
26206: LD_EXP 53
26210: PUSH
26211: LD_STRING Cyrus
26213: STR
26214: PPUSH
26215: CALL 9956 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26219: LD_EXP 6
26223: PPUSH
26224: LD_EXP 53
26228: PUSH
26229: LD_STRING Lisa
26231: STR
26232: PPUSH
26233: CALL 9956 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26237: LD_EXP 7
26241: PPUSH
26242: LD_EXP 53
26246: PUSH
26247: LD_STRING Frank
26249: STR
26250: PPUSH
26251: CALL 9956 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26255: LD_EXP 8
26259: PPUSH
26260: LD_EXP 53
26264: PUSH
26265: LD_STRING Kikuchi
26267: STR
26268: PPUSH
26269: CALL 9956 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26273: LD_EXP 9
26277: PPUSH
26278: LD_EXP 53
26282: PUSH
26283: LD_STRING Houten
26285: STR
26286: PPUSH
26287: CALL 9956 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26291: LD_EXP 10
26295: PPUSH
26296: LD_EXP 53
26300: PUSH
26301: LD_STRING Gary
26303: STR
26304: PPUSH
26305: CALL 9956 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26309: LD_EXP 19
26313: PPUSH
26314: LD_EXP 53
26318: PUSH
26319: LD_STRING Cornell
26321: STR
26322: PPUSH
26323: CALL 9956 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26327: LD_EXP 11
26331: PPUSH
26332: LD_EXP 53
26336: PUSH
26337: LD_STRING Simms
26339: STR
26340: PPUSH
26341: CALL 9956 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26345: LD_EXP 12
26349: PPUSH
26350: LD_EXP 53
26354: PUSH
26355: LD_STRING Denis
26357: STR
26358: PPUSH
26359: CALL 9956 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26363: LD_EXP 13
26367: PPUSH
26368: LD_EXP 53
26372: PUSH
26373: LD_STRING Joan
26375: STR
26376: PPUSH
26377: CALL 9956 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26381: LD_EXP 15
26385: PPUSH
26386: LD_EXP 53
26390: PUSH
26391: LD_STRING Gladstone
26393: STR
26394: PPUSH
26395: CALL 9956 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26399: LD_EXP 17
26403: PPUSH
26404: LD_EXP 53
26408: PUSH
26409: LD_STRING DeltaDoctor
26411: STR
26412: PPUSH
26413: CALL 9956 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26417: LD_EXP 22
26421: PPUSH
26422: LD_STRING 10c_lock
26424: PPUSH
26425: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26429: LD_INT 50
26431: PUSH
26432: EMPTY
26433: LIST
26434: PUSH
26435: LD_INT 22
26437: PUSH
26438: LD_INT 1
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 21
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: PUSH
26458: LD_INT 25
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 25
26470: PUSH
26471: LD_INT 2
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 25
26480: PUSH
26481: LD_INT 3
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PUSH
26488: LD_INT 25
26490: PUSH
26491: LD_INT 4
26493: PUSH
26494: EMPTY
26495: LIST
26496: LIST
26497: PUSH
26498: LD_INT 25
26500: PUSH
26501: LD_INT 5
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 25
26510: PUSH
26511: LD_INT 8
26513: PUSH
26514: EMPTY
26515: LIST
26516: LIST
26517: PUSH
26518: EMPTY
26519: LIST
26520: LIST
26521: LIST
26522: LIST
26523: LIST
26524: LIST
26525: LIST
26526: PUSH
26527: EMPTY
26528: LIST
26529: LIST
26530: LIST
26531: LIST
26532: PPUSH
26533: CALL_OW 69
26537: PUSH
26538: LD_EXP 1
26542: PUSH
26543: LD_EXP 2
26547: PUSH
26548: LD_EXP 3
26552: PUSH
26553: LD_EXP 4
26557: PUSH
26558: LD_EXP 5
26562: PUSH
26563: LD_EXP 6
26567: PUSH
26568: LD_EXP 7
26572: PUSH
26573: LD_EXP 15
26577: PUSH
26578: LD_EXP 8
26582: PUSH
26583: LD_EXP 12
26587: PUSH
26588: LD_EXP 13
26592: PUSH
26593: LD_EXP 9
26597: PUSH
26598: LD_EXP 11
26602: PUSH
26603: LD_EXP 10
26607: PUSH
26608: LD_EXP 17
26612: PUSH
26613: LD_EXP 19
26617: PUSH
26618: EMPTY
26619: LIST
26620: LIST
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: LIST
26635: DIFF
26636: PPUSH
26637: LD_STRING 10_other_survivors
26639: PPUSH
26640: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26644: LD_INT 50
26646: PUSH
26647: EMPTY
26648: LIST
26649: PUSH
26650: LD_INT 22
26652: PUSH
26653: LD_INT 1
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 21
26662: PUSH
26663: LD_INT 1
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: LD_INT 2
26672: PUSH
26673: LD_INT 25
26675: PUSH
26676: LD_INT 16
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: PUSH
26683: LD_INT 25
26685: PUSH
26686: LD_INT 12
26688: PUSH
26689: EMPTY
26690: LIST
26691: LIST
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: LIST
26697: PUSH
26698: EMPTY
26699: LIST
26700: LIST
26701: LIST
26702: LIST
26703: PPUSH
26704: CALL_OW 69
26708: PPUSH
26709: LD_STRING 10_ape
26711: PPUSH
26712: CALL_OW 38
// YouWin ;
26716: CALL_OW 103
// end ;
26720: LD_VAR 0 1
26724: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
26729: PPUSH
26730: PPUSH
// epsilonBase = [ ] ;
26731: LD_ADDR_VAR 0 2
26735: PUSH
26736: EMPTY
26737: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26738: LD_ADDR_VAR 0 3
26742: PUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 23
26755: PUSH
26756: LD_INT 1
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: LD_INT 21
26765: PUSH
26766: LD_INT 3
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 50
26775: PUSH
26776: EMPTY
26777: LIST
26778: PUSH
26779: EMPTY
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: PPUSH
26785: CALL_OW 69
26789: ST_TO_ADDR
// for i in buildings do
26790: LD_ADDR_VAR 0 4
26794: PUSH
26795: LD_VAR 0 3
26799: PUSH
26800: FOR_IN
26801: IFFALSE 27253
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26803: LD_VAR 0 4
26807: PPUSH
26808: CALL_OW 266
26812: PUSH
26813: LD_INT 6
26815: PUSH
26816: LD_INT 7
26818: PUSH
26819: LD_INT 8
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: LIST
26826: IN
26827: IFFALSE 26941
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26829: LD_ADDR_VAR 0 2
26833: PUSH
26834: LD_VAR 0 2
26838: PUSH
26839: LD_VAR 0 4
26843: PPUSH
26844: CALL_OW 266
26848: PUSH
26849: LD_VAR 0 4
26853: PPUSH
26854: CALL_OW 250
26858: PUSH
26859: LD_VAR 0 4
26863: PPUSH
26864: CALL_OW 251
26868: PUSH
26869: LD_VAR 0 4
26873: PPUSH
26874: CALL_OW 254
26878: PUSH
26879: LD_VAR 0 4
26883: PPUSH
26884: CALL_OW 267
26888: PUSH
26889: LD_VAR 0 4
26893: PPUSH
26894: CALL_OW 248
26898: PUSH
26899: LD_VAR 0 4
26903: PPUSH
26904: LD_INT 1
26906: PPUSH
26907: CALL_OW 268
26911: PUSH
26912: LD_VAR 0 4
26916: PPUSH
26917: LD_INT 2
26919: PPUSH
26920: CALL_OW 268
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: PUSH
26935: EMPTY
26936: LIST
26937: ADD
26938: ST_TO_ADDR
26939: GO 27251
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
26941: LD_VAR 0 4
26945: PPUSH
26946: CALL_OW 266
26950: PUSH
26951: LD_INT 32
26953: EQUAL
26954: PUSH
26955: LD_VAR 0 4
26959: PPUSH
26960: CALL_OW 266
26964: PUSH
26965: LD_INT 33
26967: EQUAL
26968: OR
26969: IFFALSE 27066
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26971: LD_ADDR_VAR 0 2
26975: PUSH
26976: LD_VAR 0 2
26980: PUSH
26981: LD_VAR 0 4
26985: PPUSH
26986: CALL_OW 266
26990: PUSH
26991: LD_VAR 0 4
26995: PPUSH
26996: CALL_OW 250
27000: PUSH
27001: LD_VAR 0 4
27005: PPUSH
27006: CALL_OW 251
27010: PUSH
27011: LD_VAR 0 4
27015: PPUSH
27016: CALL_OW 254
27020: PUSH
27021: LD_VAR 0 4
27025: PPUSH
27026: CALL_OW 267
27030: PUSH
27031: LD_VAR 0 4
27035: PPUSH
27036: CALL_OW 248
27040: PUSH
27041: LD_VAR 0 4
27045: PPUSH
27046: CALL_OW 269
27050: PUSH
27051: EMPTY
27052: LIST
27053: LIST
27054: LIST
27055: LIST
27056: LIST
27057: LIST
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: ADD
27063: ST_TO_ADDR
27064: GO 27251
// if GetBType ( i ) = b_factory then
27066: LD_VAR 0 4
27070: PPUSH
27071: CALL_OW 266
27075: PUSH
27076: LD_INT 3
27078: EQUAL
27079: IFFALSE 27169
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27081: LD_ADDR_VAR 0 2
27085: PUSH
27086: LD_VAR 0 2
27090: PPUSH
27091: LD_INT 1
27093: PPUSH
27094: LD_VAR 0 4
27098: PPUSH
27099: CALL_OW 266
27103: PUSH
27104: LD_VAR 0 4
27108: PPUSH
27109: CALL_OW 250
27113: PUSH
27114: LD_VAR 0 4
27118: PPUSH
27119: CALL_OW 251
27123: PUSH
27124: LD_VAR 0 4
27128: PPUSH
27129: CALL_OW 254
27133: PUSH
27134: LD_VAR 0 4
27138: PPUSH
27139: CALL_OW 267
27143: PUSH
27144: LD_VAR 0 4
27148: PPUSH
27149: CALL_OW 248
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: PPUSH
27162: CALL_OW 2
27166: ST_TO_ADDR
27167: GO 27251
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27169: LD_ADDR_VAR 0 2
27173: PUSH
27174: LD_VAR 0 2
27178: PUSH
27179: LD_VAR 0 4
27183: PPUSH
27184: CALL_OW 266
27188: PUSH
27189: LD_VAR 0 4
27193: PPUSH
27194: CALL_OW 250
27198: PUSH
27199: LD_VAR 0 4
27203: PPUSH
27204: CALL_OW 251
27208: PUSH
27209: LD_VAR 0 4
27213: PPUSH
27214: CALL_OW 254
27218: PUSH
27219: LD_VAR 0 4
27223: PPUSH
27224: CALL_OW 267
27228: PUSH
27229: LD_VAR 0 4
27233: PPUSH
27234: CALL_OW 248
27238: PUSH
27239: EMPTY
27240: LIST
27241: LIST
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: PUSH
27247: EMPTY
27248: LIST
27249: ADD
27250: ST_TO_ADDR
// end ;
27251: GO 26800
27253: POP
27254: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27255: LD_VAR 0 2
27259: PPUSH
27260: LD_STRING 10_EpsilonBase
27262: PPUSH
27263: CALL_OW 39
// end ; end_of_file
27267: LD_VAR 0 1
27271: RET
// every 0 0$01 do
27272: GO 27274
27274: DISABLE
// begin repeat wait ( 0 0$30 ) ;
27275: LD_INT 1050
27277: PPUSH
27278: CALL_OW 67
// if cratesSpawned < 6 then
27282: LD_EXP 55
27286: PUSH
27287: LD_INT 6
27289: LESS
27290: IFFALSE 27327
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27292: LD_INT 3
27294: PPUSH
27295: LD_INT 5
27297: PPUSH
27298: CALL_OW 12
27302: PPUSH
27303: LD_INT 16
27305: PPUSH
27306: LD_INT 1
27308: PPUSH
27309: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27313: LD_ADDR_EXP 55
27317: PUSH
27318: LD_EXP 55
27322: PUSH
27323: LD_INT 1
27325: PLUS
27326: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27327: LD_EXP 55
27331: PUSH
27332: LD_INT 6
27334: GREATEREQUAL
27335: PUSH
27336: LD_EXP 55
27340: PUSH
27341: LD_INT 12
27343: LESS
27344: AND
27345: IFFALSE 27389
// begin wait ( 0 0$30 ) ;
27347: LD_INT 1050
27349: PPUSH
27350: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27354: LD_INT 3
27356: PPUSH
27357: LD_INT 5
27359: PPUSH
27360: CALL_OW 12
27364: PPUSH
27365: LD_INT 16
27367: PPUSH
27368: LD_INT 1
27370: PPUSH
27371: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27375: LD_ADDR_EXP 55
27379: PUSH
27380: LD_EXP 55
27384: PUSH
27385: LD_INT 1
27387: PLUS
27388: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27389: LD_EXP 55
27393: PUSH
27394: LD_INT 12
27396: GREATEREQUAL
27397: IFFALSE 27441
// begin wait ( 1 1$30 ) ;
27399: LD_INT 3150
27401: PPUSH
27402: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27406: LD_INT 3
27408: PPUSH
27409: LD_INT 5
27411: PPUSH
27412: CALL_OW 12
27416: PPUSH
27417: LD_INT 16
27419: PPUSH
27420: LD_INT 1
27422: PPUSH
27423: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27427: LD_ADDR_EXP 55
27431: PUSH
27432: LD_EXP 55
27436: PUSH
27437: LD_INT 1
27439: PLUS
27440: ST_TO_ADDR
// end ; until cratesSpawned >= 35 ;
27441: LD_EXP 55
27445: PUSH
27446: LD_INT 35
27448: GREATEREQUAL
27449: IFFALSE 27275
// end ;
27451: END
