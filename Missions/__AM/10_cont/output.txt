// export JMM , Gary , Cyrus , Bobby , Lisa ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export arDepot , arLab , arArm ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 15
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 25
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 26
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 27
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareDifficulty ;
  47: CALL 3950 0 0
// PrepareVehicles ;
  51: CALL 282 0 0
// PrepareJMMTeam ;
  55: CALL 88 0 0
// PrepareCathyTeam ;
  59: CALL 483 0 0
// PrepareArabianCommander ;
  63: CALL 1314 0 0
// PrepareArabian ;
  67: CALL 1366 0 0
// BuildArabianBase ;
  71: CALL 6217 0 0
// PrepareNature ;
  75: CALL 9265 0 0
// TameApemans ;
  79: CALL 8129 0 0
// SaveForQuickRestart ;
  83: CALL_OW 22
// end ; end_of_file
  87: END
// export function PrepareJMMTeam ; begin
  88: LD_INT 0
  90: PPUSH
// uc_side = 1 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 1
  98: ST_TO_ADDR
// uc_nation = 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 107: LD_ADDR_EXP 1
 111: PUSH
 112: LD_STRING JMM
 114: PPUSH
 115: LD_INT 0
 117: PPUSH
 118: CALL 3737 0 2
 122: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 123: LD_ADDR_EXP 2
 127: PUSH
 128: LD_STRING Gary
 130: PPUSH
 131: LD_INT 0
 133: PPUSH
 134: CALL 3737 0 2
 138: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 139: LD_ADDR_EXP 3
 143: PUSH
 144: LD_STRING Cyrus
 146: PPUSH
 147: LD_INT 0
 149: PPUSH
 150: CALL 3737 0 2
 154: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_STRING Bobby
 162: PPUSH
 163: LD_INT 0
 165: PPUSH
 166: CALL 3737 0 2
 170: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 171: LD_ADDR_EXP 5
 175: PUSH
 176: LD_STRING Lisa
 178: PPUSH
 179: LD_INT 0
 181: PPUSH
 182: CALL 3737 0 2
 186: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 187: LD_EXP 1
 191: PPUSH
 192: LD_EXP 15
 196: PUSH
 197: LD_INT 1
 199: ARRAY
 200: PPUSH
 201: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 205: LD_EXP 2
 209: PPUSH
 210: LD_EXP 15
 214: PUSH
 215: LD_INT 2
 217: ARRAY
 218: PPUSH
 219: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 223: LD_EXP 3
 227: PPUSH
 228: LD_EXP 15
 232: PUSH
 233: LD_INT 3
 235: ARRAY
 236: PPUSH
 237: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 241: LD_EXP 4
 245: PPUSH
 246: LD_EXP 15
 250: PUSH
 251: LD_INT 4
 253: ARRAY
 254: PPUSH
 255: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 259: LD_EXP 5
 263: PPUSH
 264: LD_EXP 15
 268: PUSH
 269: LD_INT 5
 271: ARRAY
 272: PPUSH
 273: CALL_OW 52
// end ;
 277: LD_VAR 0 1
 281: RET
// export function PrepareVehicles ; var i , veh , cargoAmount , rnd , rest ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
 286: PPUSH
 287: PPUSH
 288: PPUSH
 289: PPUSH
// uc_side = 1 ;
 290: LD_ADDR_OWVAR 20
 294: PUSH
 295: LD_INT 1
 297: ST_TO_ADDR
// uc_nation = 1 ;
 298: LD_ADDR_OWVAR 21
 302: PUSH
 303: LD_INT 1
 305: ST_TO_ADDR
// for i := 1 to 5 do
 306: LD_ADDR_VAR 0 2
 310: PUSH
 311: DOUBLE
 312: LD_INT 1
 314: DEC
 315: ST_TO_ADDR
 316: LD_INT 5
 318: PUSH
 319: FOR_TO
 320: IFFALSE 476
// begin vc_engine = 1 ;
 322: LD_ADDR_OWVAR 39
 326: PUSH
 327: LD_INT 1
 329: ST_TO_ADDR
// vc_control = 1 ;
 330: LD_ADDR_OWVAR 38
 334: PUSH
 335: LD_INT 1
 337: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
 338: LD_ADDR_OWVAR 40
 342: PUSH
 343: LD_INT 3
 345: PUSH
 346: LD_INT 4
 348: PUSH
 349: LD_INT 5
 351: PUSH
 352: LD_INT 12
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: LIST
 360: PUSH
 361: LD_INT 1
 363: PPUSH
 364: LD_INT 4
 366: PPUSH
 367: CALL_OW 12
 371: ARRAY
 372: ST_TO_ADDR
// vc_chassis = 3 ;
 373: LD_ADDR_OWVAR 37
 377: PUSH
 378: LD_INT 3
 380: ST_TO_ADDR
// veh = CreateVehicle ;
 381: LD_ADDR_VAR 0 3
 385: PUSH
 386: CALL_OW 45
 390: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 391: LD_VAR 0 3
 395: PPUSH
 396: LD_INT 1
 398: PPUSH
 399: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 403: LD_VAR 0 3
 407: PPUSH
 408: LD_INT 2
 410: PPUSH
 411: LD_INT 0
 413: PPUSH
 414: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
 418: LD_ADDR_EXP 15
 422: PUSH
 423: LD_EXP 15
 427: PUSH
 428: LD_VAR 0 3
 432: ADD
 433: ST_TO_ADDR
// if vc_weapon = 12 then
 434: LD_OWVAR 40
 438: PUSH
 439: LD_INT 12
 441: EQUAL
 442: IFFALSE 474
// begin AddCargo ( veh , 1 , 50 ) ;
 444: LD_VAR 0 3
 448: PPUSH
 449: LD_INT 1
 451: PPUSH
 452: LD_INT 50
 454: PPUSH
 455: CALL_OW 291
// AddCargo ( veh , 3 , 50 ) ;
 459: LD_VAR 0 3
 463: PPUSH
 464: LD_INT 3
 466: PPUSH
 467: LD_INT 50
 469: PPUSH
 470: CALL_OW 291
// end ; end ;
 474: GO 319
 476: POP
 477: POP
// end ;
 478: LD_VAR 0 1
 482: RET
// export function PrepareCathyTeam ; begin
 483: LD_INT 0
 485: PPUSH
// uc_side = 4 ;
 486: LD_ADDR_OWVAR 20
 490: PUSH
 491: LD_INT 4
 493: ST_TO_ADDR
// uc_nation = 1 ;
 494: LD_ADDR_OWVAR 21
 498: PUSH
 499: LD_INT 1
 501: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
 502: LD_ADDR_EXP 6
 506: PUSH
 507: LD_STRING Simms
 509: PPUSH
 510: LD_INT 0
 512: PPUSH
 513: CALL 3737 0 2
 517: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 518: LD_ADDR_EXP 7
 522: PUSH
 523: LD_STRING Denis
 525: PPUSH
 526: LD_INT 0
 528: PPUSH
 529: CALL 3737 0 2
 533: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
 534: LD_ADDR_EXP 8
 538: PUSH
 539: LD_STRING Joan
 541: PPUSH
 542: LD_INT 0
 544: PPUSH
 545: CALL 3737 0 2
 549: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , false ) ;
 550: LD_ADDR_EXP 9
 554: PUSH
 555: LD_STRING Khatam
 557: PPUSH
 558: LD_INT 0
 560: PPUSH
 561: CALL 3737 0 2
 565: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 566: LD_ADDR_EXP 10
 570: PUSH
 571: LD_STRING Gladstone
 573: PPUSH
 574: LD_INT 0
 576: PPUSH
 577: CALL 3737 0 2
 581: ST_TO_ADDR
// Gladstone = PrepareUnit ( DeltaDoctor , false ) ;
 582: LD_ADDR_EXP 10
 586: PUSH
 587: LD_STRING DeltaDoctor
 589: PPUSH
 590: LD_INT 0
 592: PPUSH
 593: CALL 3737 0 2
 597: ST_TO_ADDR
// hc_class := 2 ;
 598: LD_ADDR_OWVAR 28
 602: PUSH
 603: LD_INT 2
 605: ST_TO_ADDR
// hc_sex := sex_male ;
 606: LD_ADDR_OWVAR 27
 610: PUSH
 611: LD_INT 1
 613: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 614: LD_ADDR_OWVAR 33
 618: PUSH
 619: LD_STRING SecondCharsGal
 621: ST_TO_ADDR
// hc_face_number := 60 ;
 622: LD_ADDR_OWVAR 34
 626: PUSH
 627: LD_INT 60
 629: ST_TO_ADDR
// hc_name := Steve Holland ;
 630: LD_ADDR_OWVAR 26
 634: PUSH
 635: LD_STRING Steve Holland
 637: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 638: LD_ADDR_OWVAR 31
 642: PUSH
 643: LD_INT 1
 645: PUSH
 646: LD_INT 7
 648: PUSH
 649: LD_INT 1
 651: PUSH
 652: LD_INT 0
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: LIST
 659: LIST
 660: ST_TO_ADDR
// Steve = CreateHuman ;
 661: LD_ADDR_EXP 11
 665: PUSH
 666: CALL_OW 44
 670: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
 671: LD_EXP 6
 675: PPUSH
 676: LD_INT 1
 678: PPUSH
 679: LD_INT 0
 681: PPUSH
 682: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
 686: LD_EXP 7
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
 701: LD_EXP 8
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
 716: LD_EXP 9
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
 731: LD_EXP 10
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: LD_INT 0
 741: PPUSH
 742: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
 746: LD_EXP 12
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
 761: LD_EXP 11
 765: PPUSH
 766: LD_INT 1
 768: PPUSH
 769: LD_INT 0
 771: PPUSH
 772: CALL_OW 49
// SetClass ( [ Khatam , Denis ] , 4 ) ;
 776: LD_EXP 9
 780: PUSH
 781: LD_EXP 7
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: LD_INT 4
 792: PPUSH
 793: CALL_OW 336
// AddComBuild ( Steve , b_depot , 101 , 30 , 2 ) ;
 797: LD_EXP 11
 801: PPUSH
 802: LD_INT 0
 804: PPUSH
 805: LD_INT 101
 807: PPUSH
 808: LD_INT 30
 810: PPUSH
 811: LD_INT 2
 813: PPUSH
 814: CALL_OW 205
// uc_side = 1 ;
 818: LD_ADDR_OWVAR 20
 822: PUSH
 823: LD_INT 1
 825: ST_TO_ADDR
// hc_class := 1 ;
 826: LD_ADDR_OWVAR 28
 830: PUSH
 831: LD_INT 1
 833: ST_TO_ADDR
// hc_sex := sex_female ;
 834: LD_ADDR_OWVAR 27
 838: PUSH
 839: LD_INT 2
 841: ST_TO_ADDR
// hc_gallery :=  ;
 842: LD_ADDR_OWVAR 33
 846: PUSH
 847: LD_STRING 
 849: ST_TO_ADDR
// hc_name :=  ;
 850: LD_ADDR_OWVAR 26
 854: PUSH
 855: LD_STRING 
 857: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 858: LD_ADDR_OWVAR 31
 862: PUSH
 863: LD_INT 1
 865: PUSH
 866: LD_INT 7
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: LD_INT 0
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: LIST
 879: LIST
 880: ST_TO_ADDR
// AmScout = CreateHuman ;
 881: LD_ADDR_EXP 13
 885: PUSH
 886: CALL_OW 44
 890: ST_TO_ADDR
// end ; end_of_file
 891: LD_VAR 0 1
 895: RET
// export function PrepareRussians ; var i , un ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
// for i = 1 to 14 do
 901: LD_ADDR_VAR 0 2
 905: PUSH
 906: DOUBLE
 907: LD_INT 1
 909: DEC
 910: ST_TO_ADDR
 911: LD_INT 14
 913: PUSH
 914: FOR_TO
 915: IFFALSE 1001
// begin uc_side = 3 ;
 917: LD_ADDR_OWVAR 20
 921: PUSH
 922: LD_INT 3
 924: ST_TO_ADDR
// uc_nation = 3 ;
 925: LD_ADDR_OWVAR 21
 929: PUSH
 930: LD_INT 3
 932: ST_TO_ADDR
// hc_gallery =  ;
 933: LD_ADDR_OWVAR 33
 937: PUSH
 938: LD_STRING 
 940: ST_TO_ADDR
// hc_name =  ;
 941: LD_ADDR_OWVAR 26
 945: PUSH
 946: LD_STRING 
 948: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
 949: LD_INT 0
 951: PPUSH
 952: LD_INT 1
 954: PPUSH
 955: LD_EXP 23
 959: PPUSH
 960: LD_EXP 24
 964: PPUSH
 965: CALL_OW 12
 969: PPUSH
 970: CALL_OW 380
// un = CreateHuman ;
 974: LD_ADDR_VAR 0 3
 978: PUSH
 979: CALL_OW 44
 983: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
 984: LD_VAR 0 3
 988: PPUSH
 989: LD_INT 3
 991: PPUSH
 992: LD_INT 0
 994: PPUSH
 995: CALL_OW 49
// end ;
 999: GO 914
1001: POP
1002: POP
// for i = 1 to 6 do
1003: LD_ADDR_VAR 0 2
1007: PUSH
1008: DOUBLE
1009: LD_INT 1
1011: DEC
1012: ST_TO_ADDR
1013: LD_INT 6
1015: PUSH
1016: FOR_TO
1017: IFFALSE 1103
// begin uc_side = 3 ;
1019: LD_ADDR_OWVAR 20
1023: PUSH
1024: LD_INT 3
1026: ST_TO_ADDR
// uc_nation = 3 ;
1027: LD_ADDR_OWVAR 21
1031: PUSH
1032: LD_INT 3
1034: ST_TO_ADDR
// hc_gallery =  ;
1035: LD_ADDR_OWVAR 33
1039: PUSH
1040: LD_STRING 
1042: ST_TO_ADDR
// hc_name =  ;
1043: LD_ADDR_OWVAR 26
1047: PUSH
1048: LD_STRING 
1050: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1051: LD_INT 0
1053: PPUSH
1054: LD_INT 2
1056: PPUSH
1057: LD_EXP 23
1061: PPUSH
1062: LD_EXP 24
1066: PPUSH
1067: CALL_OW 12
1071: PPUSH
1072: CALL_OW 380
// un = CreateHuman ;
1076: LD_ADDR_VAR 0 3
1080: PUSH
1081: CALL_OW 44
1085: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1086: LD_VAR 0 3
1090: PPUSH
1091: LD_INT 3
1093: PPUSH
1094: LD_INT 0
1096: PPUSH
1097: CALL_OW 49
// end ;
1101: GO 1016
1103: POP
1104: POP
// for i = 1 to 6 do
1105: LD_ADDR_VAR 0 2
1109: PUSH
1110: DOUBLE
1111: LD_INT 1
1113: DEC
1114: ST_TO_ADDR
1115: LD_INT 6
1117: PUSH
1118: FOR_TO
1119: IFFALSE 1205
// begin uc_side = 3 ;
1121: LD_ADDR_OWVAR 20
1125: PUSH
1126: LD_INT 3
1128: ST_TO_ADDR
// uc_nation = 3 ;
1129: LD_ADDR_OWVAR 21
1133: PUSH
1134: LD_INT 3
1136: ST_TO_ADDR
// hc_gallery =  ;
1137: LD_ADDR_OWVAR 33
1141: PUSH
1142: LD_STRING 
1144: ST_TO_ADDR
// hc_name =  ;
1145: LD_ADDR_OWVAR 26
1149: PUSH
1150: LD_STRING 
1152: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1153: LD_INT 0
1155: PPUSH
1156: LD_INT 3
1158: PPUSH
1159: LD_EXP 23
1163: PPUSH
1164: LD_EXP 24
1168: PPUSH
1169: CALL_OW 12
1173: PPUSH
1174: CALL_OW 380
// un = CreateHuman ;
1178: LD_ADDR_VAR 0 3
1182: PUSH
1183: CALL_OW 44
1187: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1188: LD_VAR 0 3
1192: PPUSH
1193: LD_INT 3
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 49
// end ;
1203: GO 1118
1205: POP
1206: POP
// for i = 1 to 4 do
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: DOUBLE
1213: LD_INT 1
1215: DEC
1216: ST_TO_ADDR
1217: LD_INT 4
1219: PUSH
1220: FOR_TO
1221: IFFALSE 1307
// begin uc_side = 3 ;
1223: LD_ADDR_OWVAR 20
1227: PUSH
1228: LD_INT 3
1230: ST_TO_ADDR
// uc_nation = 3 ;
1231: LD_ADDR_OWVAR 21
1235: PUSH
1236: LD_INT 3
1238: ST_TO_ADDR
// hc_gallery =  ;
1239: LD_ADDR_OWVAR 33
1243: PUSH
1244: LD_STRING 
1246: ST_TO_ADDR
// hc_name =  ;
1247: LD_ADDR_OWVAR 26
1251: PUSH
1252: LD_STRING 
1254: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1255: LD_INT 0
1257: PPUSH
1258: LD_INT 4
1260: PPUSH
1261: LD_EXP 23
1265: PPUSH
1266: LD_EXP 24
1270: PPUSH
1271: CALL_OW 12
1275: PPUSH
1276: CALL_OW 380
// un = CreateHuman ;
1280: LD_ADDR_VAR 0 3
1284: PUSH
1285: CALL_OW 44
1289: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1290: LD_VAR 0 3
1294: PPUSH
1295: LD_INT 3
1297: PPUSH
1298: LD_INT 0
1300: PPUSH
1301: CALL_OW 49
// end ;
1305: GO 1220
1307: POP
1308: POP
// end ; end_of_file
1309: LD_VAR 0 1
1313: RET
// export function PrepareArabianCommander ; begin
1314: LD_INT 0
1316: PPUSH
// uc_side = 2 ;
1317: LD_ADDR_OWVAR 20
1321: PUSH
1322: LD_INT 2
1324: ST_TO_ADDR
// uc_nation = 2 ;
1325: LD_ADDR_OWVAR 21
1329: PUSH
1330: LD_INT 2
1332: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
1333: LD_ADDR_EXP 14
1337: PUSH
1338: LD_STRING Dietrich
1340: PPUSH
1341: CALL_OW 25
1345: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
1346: LD_EXP 14
1350: PPUSH
1351: LD_INT 4
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: CALL_OW 49
// end ;
1361: LD_VAR 0 1
1365: RET
// export function PrepareArabian ; var i , un , veh ; begin
1366: LD_INT 0
1368: PPUSH
1369: PPUSH
1370: PPUSH
1371: PPUSH
// for i = 1 to 3 do
1372: LD_ADDR_VAR 0 2
1376: PUSH
1377: DOUBLE
1378: LD_INT 1
1380: DEC
1381: ST_TO_ADDR
1382: LD_INT 3
1384: PUSH
1385: FOR_TO
1386: IFFALSE 1472
// begin uc_side = 2 ;
1388: LD_ADDR_OWVAR 20
1392: PUSH
1393: LD_INT 2
1395: ST_TO_ADDR
// uc_nation = 2 ;
1396: LD_ADDR_OWVAR 21
1400: PUSH
1401: LD_INT 2
1403: ST_TO_ADDR
// hc_gallery =  ;
1404: LD_ADDR_OWVAR 33
1408: PUSH
1409: LD_STRING 
1411: ST_TO_ADDR
// hc_name =  ;
1412: LD_ADDR_OWVAR 26
1416: PUSH
1417: LD_STRING 
1419: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1420: LD_INT 0
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: LD_EXP 23
1430: PPUSH
1431: LD_EXP 24
1435: PPUSH
1436: CALL_OW 12
1440: PPUSH
1441: CALL_OW 380
// un = CreateHuman ;
1445: LD_ADDR_VAR 0 3
1449: PUSH
1450: CALL_OW 44
1454: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1455: LD_VAR 0 3
1459: PPUSH
1460: LD_INT 4
1462: PPUSH
1463: LD_INT 0
1465: PPUSH
1466: CALL_OW 49
// end ;
1470: GO 1385
1472: POP
1473: POP
// for i = 1 to 6 do
1474: LD_ADDR_VAR 0 2
1478: PUSH
1479: DOUBLE
1480: LD_INT 1
1482: DEC
1483: ST_TO_ADDR
1484: LD_INT 6
1486: PUSH
1487: FOR_TO
1488: IFFALSE 1574
// begin uc_side = 2 ;
1490: LD_ADDR_OWVAR 20
1494: PUSH
1495: LD_INT 2
1497: ST_TO_ADDR
// uc_nation = 2 ;
1498: LD_ADDR_OWVAR 21
1502: PUSH
1503: LD_INT 2
1505: ST_TO_ADDR
// hc_gallery =  ;
1506: LD_ADDR_OWVAR 33
1510: PUSH
1511: LD_STRING 
1513: ST_TO_ADDR
// hc_name =  ;
1514: LD_ADDR_OWVAR 26
1518: PUSH
1519: LD_STRING 
1521: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1522: LD_INT 0
1524: PPUSH
1525: LD_INT 2
1527: PPUSH
1528: LD_EXP 23
1532: PPUSH
1533: LD_EXP 24
1537: PPUSH
1538: CALL_OW 12
1542: PPUSH
1543: CALL_OW 380
// un = CreateHuman ;
1547: LD_ADDR_VAR 0 3
1551: PUSH
1552: CALL_OW 44
1556: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1557: LD_VAR 0 3
1561: PPUSH
1562: LD_INT 4
1564: PPUSH
1565: LD_INT 0
1567: PPUSH
1568: CALL_OW 49
// end ;
1572: GO 1487
1574: POP
1575: POP
// for i = 1 to 6 do
1576: LD_ADDR_VAR 0 2
1580: PUSH
1581: DOUBLE
1582: LD_INT 1
1584: DEC
1585: ST_TO_ADDR
1586: LD_INT 6
1588: PUSH
1589: FOR_TO
1590: IFFALSE 1676
// begin uc_side = 2 ;
1592: LD_ADDR_OWVAR 20
1596: PUSH
1597: LD_INT 2
1599: ST_TO_ADDR
// uc_nation = 2 ;
1600: LD_ADDR_OWVAR 21
1604: PUSH
1605: LD_INT 2
1607: ST_TO_ADDR
// hc_gallery =  ;
1608: LD_ADDR_OWVAR 33
1612: PUSH
1613: LD_STRING 
1615: ST_TO_ADDR
// hc_name =  ;
1616: LD_ADDR_OWVAR 26
1620: PUSH
1621: LD_STRING 
1623: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1624: LD_INT 0
1626: PPUSH
1627: LD_INT 3
1629: PPUSH
1630: LD_EXP 23
1634: PPUSH
1635: LD_EXP 24
1639: PPUSH
1640: CALL_OW 12
1644: PPUSH
1645: CALL_OW 380
// un = CreateHuman ;
1649: LD_ADDR_VAR 0 3
1653: PUSH
1654: CALL_OW 44
1658: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1659: LD_VAR 0 3
1663: PPUSH
1664: LD_INT 4
1666: PPUSH
1667: LD_INT 0
1669: PPUSH
1670: CALL_OW 49
// end ;
1674: GO 1589
1676: POP
1677: POP
// for i = 1 to 4 do
1678: LD_ADDR_VAR 0 2
1682: PUSH
1683: DOUBLE
1684: LD_INT 1
1686: DEC
1687: ST_TO_ADDR
1688: LD_INT 4
1690: PUSH
1691: FOR_TO
1692: IFFALSE 1778
// begin uc_side = 2 ;
1694: LD_ADDR_OWVAR 20
1698: PUSH
1699: LD_INT 2
1701: ST_TO_ADDR
// uc_nation = 2 ;
1702: LD_ADDR_OWVAR 21
1706: PUSH
1707: LD_INT 2
1709: ST_TO_ADDR
// hc_gallery =  ;
1710: LD_ADDR_OWVAR 33
1714: PUSH
1715: LD_STRING 
1717: ST_TO_ADDR
// hc_name =  ;
1718: LD_ADDR_OWVAR 26
1722: PUSH
1723: LD_STRING 
1725: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1726: LD_INT 0
1728: PPUSH
1729: LD_INT 4
1731: PPUSH
1732: LD_EXP 23
1736: PPUSH
1737: LD_EXP 24
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un = CreateHuman ;
1751: LD_ADDR_VAR 0 3
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1761: LD_VAR 0 3
1765: PPUSH
1766: LD_INT 4
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// end ;
1776: GO 1691
1778: POP
1779: POP
// for i = 1 to 2 do
1780: LD_ADDR_VAR 0 2
1784: PUSH
1785: DOUBLE
1786: LD_INT 1
1788: DEC
1789: ST_TO_ADDR
1790: LD_INT 2
1792: PUSH
1793: FOR_TO
1794: IFFALSE 1924
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1796: LD_ADDR_VAR 0 4
1800: PUSH
1801: LD_INT 22
1803: PUSH
1804: LD_INT 2
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PUSH
1811: LD_INT 21
1813: PUSH
1814: LD_INT 2
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: PUSH
1821: LD_INT 58
1823: PUSH
1824: EMPTY
1825: LIST
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: LIST
1831: PPUSH
1832: CALL_OW 69
1836: ST_TO_ADDR
// uc_side = 2 ;
1837: LD_ADDR_OWVAR 20
1841: PUSH
1842: LD_INT 2
1844: ST_TO_ADDR
// uc_nation = 2 ;
1845: LD_ADDR_OWVAR 21
1849: PUSH
1850: LD_INT 2
1852: ST_TO_ADDR
// hc_gallery =  ;
1853: LD_ADDR_OWVAR 33
1857: PUSH
1858: LD_STRING 
1860: ST_TO_ADDR
// hc_name =  ;
1861: LD_ADDR_OWVAR 26
1865: PUSH
1866: LD_STRING 
1868: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1869: LD_INT 0
1871: PPUSH
1872: LD_INT 3
1874: PPUSH
1875: LD_EXP 23
1879: PPUSH
1880: LD_EXP 24
1884: PPUSH
1885: CALL_OW 12
1889: PPUSH
1890: CALL_OW 380
// un = CreateHuman ;
1894: LD_ADDR_VAR 0 3
1898: PUSH
1899: CALL_OW 44
1903: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
1904: LD_VAR 0 3
1908: PPUSH
1909: LD_VAR 0 4
1913: PUSH
1914: LD_INT 1
1916: ARRAY
1917: PPUSH
1918: CALL_OW 52
// end ;
1922: GO 1793
1924: POP
1925: POP
// end ; end_of_file
1926: LD_VAR 0 1
1930: RET
// every 1 do
1931: GO 1933
1933: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
1934: LD_EXP 1
1938: PPUSH
1939: CALL_OW 87
// DialogueOn ;
1943: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
1947: LD_EXP 2
1951: PPUSH
1952: LD_STRING D2-Gary-1
1954: PPUSH
1955: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1959: LD_EXP 1
1963: PPUSH
1964: LD_STRING D2-JMM-1
1966: PPUSH
1967: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
1971: LD_EXP 2
1975: PPUSH
1976: LD_STRING D2-Gary-2
1978: PPUSH
1979: CALL_OW 88
// DialogueOff ;
1983: CALL_OW 7
// ChangeMissionObjectives ( M1 ) ;
1987: LD_STRING M1
1989: PPUSH
1990: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
1994: LD_INT 38
1996: PPUSH
1997: LD_INT 1
1999: PPUSH
2000: LD_INT 100
2002: PPUSH
2003: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
2007: LD_INT 47
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: LD_INT 50
2015: PPUSH
2016: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
2020: LD_INT 47
2022: PPUSH
2023: LD_INT 3
2025: PPUSH
2026: LD_INT 50
2028: PPUSH
2029: CALL_OW 291
// end ;
2033: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
2034: LD_EXP 1
2038: PPUSH
2039: LD_EXP 6
2043: PPUSH
2044: CALL_OW 296
2048: PUSH
2049: LD_INT 15
2051: LESS
2052: IFFALSE 2394
2054: GO 2056
2056: DISABLE
// begin InGameOn ;
2057: CALL_OW 8
// ComExitVehicle ( JMM ) ;
2061: LD_EXP 1
2065: PPUSH
2066: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
2070: LD_EXP 1
2074: PPUSH
2075: CALL_OW 87
// wait ( 0 0$1 ) ;
2079: LD_INT 35
2081: PPUSH
2082: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2086: LD_INT 35
2088: PPUSH
2089: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2093: LD_EXP 6
2097: PUSH
2098: LD_EXP 8
2102: PUSH
2103: LD_EXP 7
2107: PUSH
2108: LD_EXP 9
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: PPUSH
2119: LD_EXP 1
2123: PPUSH
2124: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
2128: LD_EXP 1
2132: PPUSH
2133: LD_EXP 6
2137: PPUSH
2138: CALL_OW 296
2142: PUSH
2143: LD_INT 5
2145: LESS
2146: IFFALSE 2086
// ComTurnUnit ( JMM , Simms ) ;
2148: LD_EXP 1
2152: PPUSH
2153: LD_EXP 6
2157: PPUSH
2158: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2162: LD_EXP 6
2166: PUSH
2167: LD_EXP 8
2171: PUSH
2172: LD_EXP 7
2176: PUSH
2177: LD_EXP 9
2181: PUSH
2182: EMPTY
2183: LIST
2184: LIST
2185: LIST
2186: LIST
2187: PPUSH
2188: LD_EXP 1
2192: PPUSH
2193: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
2197: LD_EXP 1
2201: PUSH
2202: LD_EXP 6
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PPUSH
2211: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
2215: LD_EXP 6
2219: PPUSH
2220: LD_STRING D2a-Sim-1
2222: PPUSH
2223: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
2227: LD_EXP 1
2231: PPUSH
2232: LD_STRING D2a-JMM-1
2234: PPUSH
2235: CALL_OW 88
// ComTurnUnit ( JMM , Joan ) ;
2239: LD_EXP 1
2243: PPUSH
2244: LD_EXP 8
2248: PPUSH
2249: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
2253: LD_EXP 8
2257: PPUSH
2258: LD_STRING D2b-Joan-1
2260: PPUSH
2261: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
2265: LD_EXP 1
2269: PPUSH
2270: LD_STRING D2b-JMM-1
2272: PPUSH
2273: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
2277: LD_EXP 8
2281: PPUSH
2282: LD_STRING D2b-Joan-2
2284: PPUSH
2285: CALL_OW 88
// ComTurnUnit ( JMM , Denis ) ;
2289: LD_EXP 1
2293: PPUSH
2294: LD_EXP 7
2298: PPUSH
2299: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
2303: LD_EXP 7
2307: PPUSH
2308: LD_STRING D2c-Den-1
2310: PPUSH
2311: CALL_OW 88
// ComTurnUnit ( JMM , Khatam ) ;
2315: LD_EXP 1
2319: PPUSH
2320: LD_EXP 9
2324: PPUSH
2325: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
2329: LD_EXP 1
2333: PPUSH
2334: LD_STRING D2c-JMM-1
2336: PPUSH
2337: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
2341: LD_EXP 9
2345: PPUSH
2346: LD_STRING D2c-Khat-1
2348: PPUSH
2349: CALL_OW 88
// InGameOff ;
2353: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
2357: LD_INT 22
2359: PUSH
2360: LD_INT 4
2362: PUSH
2363: EMPTY
2364: LIST
2365: LIST
2366: PPUSH
2367: CALL_OW 69
2371: PPUSH
2372: LD_INT 1
2374: PPUSH
2375: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
2379: LD_STRING M1a
2381: PPUSH
2382: CALL_OW 337
// joinEpsilon = 1 ;
2386: LD_ADDR_EXP 16
2390: PUSH
2391: LD_INT 1
2393: ST_TO_ADDR
// end ;
2394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 do
2395: LD_INT 22
2397: PUSH
2398: LD_INT 1
2400: PUSH
2401: EMPTY
2402: LIST
2403: LIST
2404: PUSH
2405: LD_INT 2
2407: PUSH
2408: LD_INT 30
2410: PUSH
2411: LD_INT 7
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 30
2420: PUSH
2421: LD_INT 8
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 1
2430: PUSH
2431: LD_INT 30
2433: PUSH
2434: LD_INT 11
2436: PUSH
2437: EMPTY
2438: LIST
2439: LIST
2440: PUSH
2441: LD_INT 1
2443: PUSH
2444: LD_INT 2
2446: PUSH
2447: LD_INT 30
2449: PUSH
2450: LD_INT 26
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: PUSH
2457: LD_INT 30
2459: PUSH
2460: LD_INT 27
2462: PUSH
2463: EMPTY
2464: LIST
2465: LIST
2466: PUSH
2467: LD_INT 30
2469: PUSH
2470: LD_INT 28
2472: PUSH
2473: EMPTY
2474: LIST
2475: LIST
2476: PUSH
2477: EMPTY
2478: LIST
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: EMPTY
2488: LIST
2489: LIST
2490: LIST
2491: PUSH
2492: EMPTY
2493: LIST
2494: LIST
2495: LIST
2496: LIST
2497: PUSH
2498: EMPTY
2499: LIST
2500: LIST
2501: PPUSH
2502: CALL_OW 69
2506: PUSH
2507: LD_INT 0
2509: GREATER
2510: PUSH
2511: LD_INT 22
2513: PUSH
2514: LD_INT 1
2516: PUSH
2517: EMPTY
2518: LIST
2519: LIST
2520: PUSH
2521: LD_INT 2
2523: PUSH
2524: LD_INT 30
2526: PUSH
2527: LD_INT 26
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PUSH
2534: LD_INT 30
2536: PUSH
2537: LD_INT 27
2539: PUSH
2540: EMPTY
2541: LIST
2542: LIST
2543: PUSH
2544: LD_INT 30
2546: PUSH
2547: LD_INT 28
2549: PUSH
2550: EMPTY
2551: LIST
2552: LIST
2553: PUSH
2554: EMPTY
2555: LIST
2556: LIST
2557: LIST
2558: LIST
2559: PUSH
2560: EMPTY
2561: LIST
2562: LIST
2563: PPUSH
2564: CALL_OW 69
2568: PUSH
2569: LD_INT 0
2571: GREATER
2572: AND
2573: IFFALSE 3149
2575: GO 2577
2577: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-1 , D3-Sci1-1 ) ;
2578: LD_INT 22
2580: PUSH
2581: LD_INT 1
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: PUSH
2588: LD_INT 25
2590: PUSH
2591: LD_INT 4
2593: PUSH
2594: EMPTY
2595: LIST
2596: LIST
2597: PUSH
2598: LD_INT 26
2600: PUSH
2601: LD_INT 1
2603: PUSH
2604: EMPTY
2605: LIST
2606: LIST
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: PPUSH
2613: CALL_OW 69
2617: PPUSH
2618: LD_STRING D3-Sci1-1
2620: PPUSH
2621: LD_STRING D3-Sci1-1
2623: PPUSH
2624: CALL 3794 0 3
// Say ( Gary , D3-Gary-1 ) ;
2628: LD_EXP 2
2632: PPUSH
2633: LD_STRING D3-Gary-1
2635: PPUSH
2636: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-2 , D3-Sci1-2 ) ;
2640: LD_INT 22
2642: PUSH
2643: LD_INT 1
2645: PUSH
2646: EMPTY
2647: LIST
2648: LIST
2649: PUSH
2650: LD_INT 25
2652: PUSH
2653: LD_INT 4
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 26
2662: PUSH
2663: LD_INT 1
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: LIST
2674: PPUSH
2675: CALL_OW 69
2679: PPUSH
2680: LD_STRING D3-Sci1-2
2682: PPUSH
2683: LD_STRING D3-Sci1-2
2685: PPUSH
2686: CALL 3794 0 3
// Say ( JMM , D3-JMM-2 ) ;
2690: LD_EXP 1
2694: PPUSH
2695: LD_STRING D3-JMM-2
2697: PPUSH
2698: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-3 , D3-Sci1-3 ) ;
2702: LD_INT 22
2704: PUSH
2705: LD_INT 1
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 25
2714: PUSH
2715: LD_INT 4
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 26
2724: PUSH
2725: LD_INT 1
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: LIST
2736: PPUSH
2737: CALL_OW 69
2741: PPUSH
2742: LD_STRING D3-Sci1-3
2744: PPUSH
2745: LD_STRING D3-Sci1-3
2747: PPUSH
2748: CALL 3794 0 3
// Say ( JMM , D3-JMM-3 ) ;
2752: LD_EXP 1
2756: PPUSH
2757: LD_STRING D3-JMM-3
2759: PPUSH
2760: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-4 , D3-Sci1-4 ) ;
2764: LD_INT 22
2766: PUSH
2767: LD_INT 1
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 25
2776: PUSH
2777: LD_INT 4
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PUSH
2784: LD_INT 26
2786: PUSH
2787: LD_INT 1
2789: PUSH
2790: EMPTY
2791: LIST
2792: LIST
2793: PUSH
2794: EMPTY
2795: LIST
2796: LIST
2797: LIST
2798: PPUSH
2799: CALL_OW 69
2803: PPUSH
2804: LD_STRING D3-Sci1-4
2806: PPUSH
2807: LD_STRING D3-Sci1-4
2809: PPUSH
2810: CALL 3794 0 3
// SetTech ( 12 , 1 , state_enabled ) ;
2814: LD_INT 12
2816: PPUSH
2817: LD_INT 1
2819: PPUSH
2820: LD_INT 1
2822: PPUSH
2823: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
2827: LD_INT 32
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 1
2835: PPUSH
2836: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
2840: LD_INT 12
2842: PPUSH
2843: LD_INT 1
2845: PPUSH
2846: LD_INT 1
2848: PPUSH
2849: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
2853: LD_STRING M2
2855: PPUSH
2856: CALL_OW 337
// wait ( 3 3$0 ) ;
2860: LD_INT 6300
2862: PPUSH
2863: CALL_OW 67
// if IsOK ( Simms ) then
2867: LD_EXP 6
2871: PPUSH
2872: CALL_OW 302
2876: IFFALSE 3018
// begin DialogueOn ;
2878: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
2882: LD_EXP 6
2886: PPUSH
2887: LD_STRING D3a-Sim-1
2889: PPUSH
2890: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
2894: LD_EXP 7
2898: PPUSH
2899: LD_STRING D3a-Sci1-1
2901: PPUSH
2902: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
2906: LD_EXP 6
2910: PPUSH
2911: LD_STRING D3a-Sim-2
2913: PPUSH
2914: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
2918: LD_EXP 7
2922: PPUSH
2923: LD_STRING D3a-Sci1-2
2925: PPUSH
2926: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
2930: LD_EXP 6
2934: PPUSH
2935: LD_STRING D3a-Sim-3
2937: PPUSH
2938: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
2942: LD_EXP 7
2946: PPUSH
2947: LD_STRING D3a-Sci1-3
2949: PPUSH
2950: CALL_OW 88
// Say ( Simms , D3a-Sim-4 ) ;
2954: LD_EXP 6
2958: PPUSH
2959: LD_STRING D3a-Sim-4
2961: PPUSH
2962: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
2966: LD_EXP 7
2970: PPUSH
2971: LD_STRING D3a-Sci1-4
2973: PPUSH
2974: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
2978: LD_EXP 6
2982: PPUSH
2983: LD_STRING D3a-Sim-5
2985: PPUSH
2986: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
2990: LD_EXP 7
2994: PPUSH
2995: LD_STRING D3a-Sci1-5
2997: PPUSH
2998: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
3002: LD_EXP 6
3006: PPUSH
3007: LD_STRING D3a-Sim-6
3009: PPUSH
3010: CALL_OW 88
// DialogueOff ;
3014: CALL_OW 7
// end ; wait ( 2 2$0 ) ;
3018: LD_INT 4200
3020: PPUSH
3021: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
3025: LD_INT 22
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: LD_INT 25
3037: PUSH
3038: LD_INT 4
3040: PUSH
3041: EMPTY
3042: LIST
3043: LIST
3044: PUSH
3045: LD_INT 26
3047: PUSH
3048: LD_INT 1
3050: PUSH
3051: EMPTY
3052: LIST
3053: LIST
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: LIST
3059: PPUSH
3060: CALL_OW 69
3064: PPUSH
3065: LD_STRING D5-Ar1-1
3067: PPUSH
3068: LD_STRING D5-Ar1-1
3070: PPUSH
3071: CALL 3794 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
3075: LD_EXP 14
3079: PPUSH
3080: LD_STRING D5-Diet-1
3082: PPUSH
3083: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
3087: LD_INT 22
3089: PUSH
3090: LD_INT 2
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: LD_INT 25
3099: PUSH
3100: LD_INT 4
3102: PUSH
3103: EMPTY
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 26
3109: PUSH
3110: LD_INT 1
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: PPUSH
3122: CALL_OW 69
3126: PPUSH
3127: LD_STRING D5-Ar1-2
3129: PPUSH
3130: LD_STRING D5-Ar1-2
3132: PPUSH
3133: CALL 3794 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
3137: LD_EXP 14
3141: PPUSH
3142: LD_STRING D5-Diet-2
3144: PPUSH
3145: CALL_OW 88
// end ;
3149: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
3150: LD_EXP 16
3154: PUSH
3155: LD_INT 1
3157: EQUAL
3158: IFFALSE 3478
3160: GO 3162
3162: DISABLE
3163: LD_INT 0
3165: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
3166: LD_EXP 13
3170: PPUSH
3171: LD_STRING D4-FSol1-1
3173: PPUSH
3174: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
3178: LD_STRING M3
3180: PPUSH
3181: CALL_OW 337
// PrepareRussians ;
3185: CALL 896 0 0
// rnd = Rand ( 1 , 100 ) ;
3189: LD_ADDR_VAR 0 1
3193: PUSH
3194: LD_INT 1
3196: PPUSH
3197: LD_INT 100
3199: PPUSH
3200: CALL_OW 12
3204: ST_TO_ADDR
// if difficulty = 1 then
3205: LD_OWVAR 67
3209: PUSH
3210: LD_INT 1
3212: EQUAL
3213: IFFALSE 3296
// begin if rnd > 0 and rnd < 51 then
3215: LD_VAR 0 1
3219: PUSH
3220: LD_INT 0
3222: GREATER
3223: PUSH
3224: LD_VAR 0 1
3228: PUSH
3229: LD_INT 51
3231: LESS
3232: AND
3233: IFFALSE 3242
// BuildRussianBase ( 2 ) ;
3235: LD_INT 2
3237: PPUSH
3238: CALL 4036 0 1
// if rnd > 50 and rnd < 81 then
3242: LD_VAR 0 1
3246: PUSH
3247: LD_INT 50
3249: GREATER
3250: PUSH
3251: LD_VAR 0 1
3255: PUSH
3256: LD_INT 81
3258: LESS
3259: AND
3260: IFFALSE 3269
// BuildRussianBase ( 1 ) ;
3262: LD_INT 1
3264: PPUSH
3265: CALL 4036 0 1
// if rnd > 80 and rnd < 101 then
3269: LD_VAR 0 1
3273: PUSH
3274: LD_INT 80
3276: GREATER
3277: PUSH
3278: LD_VAR 0 1
3282: PUSH
3283: LD_INT 101
3285: LESS
3286: AND
3287: IFFALSE 3296
// BuildRussianBase ( 3 ) ;
3289: LD_INT 3
3291: PPUSH
3292: CALL 4036 0 1
// end ; if difficulty = 2 then
3296: LD_OWVAR 67
3300: PUSH
3301: LD_INT 2
3303: EQUAL
3304: IFFALSE 3387
// begin if rnd > 0 and rnd < 61 then
3306: LD_VAR 0 1
3310: PUSH
3311: LD_INT 0
3313: GREATER
3314: PUSH
3315: LD_VAR 0 1
3319: PUSH
3320: LD_INT 61
3322: LESS
3323: AND
3324: IFFALSE 3333
// BuildRussianBase ( 2 ) ;
3326: LD_INT 2
3328: PPUSH
3329: CALL 4036 0 1
// if rnd > 60 and rnd < 81 then
3333: LD_VAR 0 1
3337: PUSH
3338: LD_INT 60
3340: GREATER
3341: PUSH
3342: LD_VAR 0 1
3346: PUSH
3347: LD_INT 81
3349: LESS
3350: AND
3351: IFFALSE 3360
// BuildRussianBase ( 1 ) ;
3353: LD_INT 1
3355: PPUSH
3356: CALL 4036 0 1
// if rnd > 80 and rnd < 101 then
3360: LD_VAR 0 1
3364: PUSH
3365: LD_INT 80
3367: GREATER
3368: PUSH
3369: LD_VAR 0 1
3373: PUSH
3374: LD_INT 101
3376: LESS
3377: AND
3378: IFFALSE 3387
// BuildRussianBase ( 3 ) ;
3380: LD_INT 3
3382: PPUSH
3383: CALL 4036 0 1
// end ; if difficulty = 3 then
3387: LD_OWVAR 67
3391: PUSH
3392: LD_INT 3
3394: EQUAL
3395: IFFALSE 3478
// begin if rnd > 0 and rnd < 71 then
3397: LD_VAR 0 1
3401: PUSH
3402: LD_INT 0
3404: GREATER
3405: PUSH
3406: LD_VAR 0 1
3410: PUSH
3411: LD_INT 71
3413: LESS
3414: AND
3415: IFFALSE 3424
// BuildRussianBase ( 3 ) ;
3417: LD_INT 3
3419: PPUSH
3420: CALL 4036 0 1
// if rnd > 70 and rnd < 81 then
3424: LD_VAR 0 1
3428: PUSH
3429: LD_INT 70
3431: GREATER
3432: PUSH
3433: LD_VAR 0 1
3437: PUSH
3438: LD_INT 81
3440: LESS
3441: AND
3442: IFFALSE 3451
// BuildRussianBase ( 2 ) ;
3444: LD_INT 2
3446: PPUSH
3447: CALL 4036 0 1
// if rnd > 80 and rnd < 101 then
3451: LD_VAR 0 1
3455: PUSH
3456: LD_INT 80
3458: GREATER
3459: PUSH
3460: LD_VAR 0 1
3464: PUSH
3465: LD_INT 101
3467: LESS
3468: AND
3469: IFFALSE 3478
// BuildRussianBase ( 1 ) ;
3471: LD_INT 1
3473: PPUSH
3474: CALL 4036 0 1
// end ; end ;
3478: PPOPN 1
3480: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched do
3481: LD_INT 54
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: CALL_OW 321
3491: PUSH
3492: LD_INT 2
3494: EQUAL
3495: IFFALSE 3736
3497: GO 3499
3499: DISABLE
// begin DialogueOn ;
3500: CALL_OW 6
// Say ( JMM ,  D6-JMM-1 ) ;
3504: LD_EXP 1
3508: PPUSH
3509: LD_STRING  D6-JMM-1
3511: PPUSH
3512: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
3516: LD_EXP 7
3520: PPUSH
3521: LD_STRING D6-Sci1-1
3523: PPUSH
3524: CALL_OW 88
// Say ( JMM ,  D6-JMM-2 ) ;
3528: LD_EXP 1
3532: PPUSH
3533: LD_STRING  D6-JMM-2
3535: PPUSH
3536: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
3540: LD_EXP 7
3544: PPUSH
3545: LD_STRING D6-Sci1-2
3547: PPUSH
3548: CALL_OW 88
// Say ( JMM ,  D6-JMM-3 ) ;
3552: LD_EXP 1
3556: PPUSH
3557: LD_STRING  D6-JMM-3
3559: PPUSH
3560: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
3564: LD_EXP 7
3568: PPUSH
3569: LD_STRING D6-Sci1-3
3571: PPUSH
3572: CALL_OW 88
// Say ( JMM ,  D6-JMM-4 ) ;
3576: LD_EXP 1
3580: PPUSH
3581: LD_STRING  D6-JMM-4
3583: PPUSH
3584: CALL_OW 88
// DialogueOff ;
3588: CALL_OW 7
// wait ( [ 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 6 ) ] ) ;
3592: LD_INT 4200
3594: PUSH
3595: LD_INT 5250
3597: PUSH
3598: LD_INT 6300
3600: PUSH
3601: LD_INT 7350
3603: PUSH
3604: LD_INT 8400
3606: PUSH
3607: LD_INT 9450
3609: PUSH
3610: EMPTY
3611: LIST
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: PUSH
3618: LD_INT 1
3620: PPUSH
3621: LD_INT 6
3623: PPUSH
3624: CALL_OW 12
3628: ARRAY
3629: PPUSH
3630: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
3634: LD_INT 22
3636: PUSH
3637: LD_INT 1
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: PUSH
3644: LD_INT 25
3646: PUSH
3647: LD_INT 1
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 26
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: LIST
3668: PUSH
3669: LD_EXP 1
3673: PUSH
3674: EMPTY
3675: LIST
3676: DIFF
3677: PPUSH
3678: CALL_OW 69
3682: PPUSH
3683: LD_STRING D8-Sol1-1
3685: PPUSH
3686: LD_STRING D8-Sol1-1
3688: PPUSH
3689: CALL 3794 0 3
// Say ( DeltaDoctor , D8-Sci1-1 ) ;
3693: LD_EXP 12
3697: PPUSH
3698: LD_STRING D8-Sci1-1
3700: PPUSH
3701: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
3705: LD_EXP 1
3709: PPUSH
3710: LD_STRING D8-JMM-1
3712: PPUSH
3713: CALL_OW 88
// wait ( 0 0$30 ) ;
3717: LD_INT 1050
3719: PPUSH
3720: CALL_OW 67
// Say ( Gary , D8a-Gary-1 ) ;
3724: LD_EXP 2
3728: PPUSH
3729: LD_STRING D8a-Gary-1
3731: PPUSH
3732: CALL_OW 88
// end ; end_of_file
3736: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3737: LD_INT 0
3739: PPUSH
3740: PPUSH
// if exist_mode then
3741: LD_VAR 0 2
3745: IFFALSE 3764
// unit := CreateCharacter ( ident ) else
3747: LD_ADDR_VAR 0 4
3751: PUSH
3752: LD_VAR 0 1
3756: PPUSH
3757: CALL_OW 34
3761: ST_TO_ADDR
3762: GO 3779
// unit := NewCharacter ( ident ) ;
3764: LD_ADDR_VAR 0 4
3768: PUSH
3769: LD_VAR 0 1
3773: PPUSH
3774: CALL_OW 25
3778: ST_TO_ADDR
// result := unit ;
3779: LD_ADDR_VAR 0 3
3783: PUSH
3784: LD_VAR 0 4
3788: ST_TO_ADDR
// end ;
3789: LD_VAR 0 3
3793: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3794: LD_INT 0
3796: PPUSH
3797: PPUSH
3798: PPUSH
// rnd = rand ( 1 , characters ) ;
3799: LD_ADDR_VAR 0 6
3803: PUSH
3804: LD_INT 1
3806: PPUSH
3807: LD_VAR 0 1
3811: PPUSH
3812: CALL_OW 12
3816: ST_TO_ADDR
// for i = 1 to characters do
3817: LD_ADDR_VAR 0 5
3821: PUSH
3822: DOUBLE
3823: LD_INT 1
3825: DEC
3826: ST_TO_ADDR
3827: LD_VAR 0 1
3831: PUSH
3832: FOR_TO
3833: IFFALSE 3943
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3835: LD_VAR 0 5
3839: PUSH
3840: LD_VAR 0 6
3844: EQUAL
3845: PUSH
3846: LD_VAR 0 1
3850: PUSH
3851: LD_VAR 0 5
3855: ARRAY
3856: PPUSH
3857: CALL_OW 258
3861: PUSH
3862: LD_INT 1
3864: EQUAL
3865: AND
3866: IFFALSE 3888
// Say ( characters [ i ] , dialogMID ) ;
3868: LD_VAR 0 1
3872: PUSH
3873: LD_VAR 0 5
3877: ARRAY
3878: PPUSH
3879: LD_VAR 0 2
3883: PPUSH
3884: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3888: LD_VAR 0 5
3892: PUSH
3893: LD_VAR 0 6
3897: EQUAL
3898: PUSH
3899: LD_VAR 0 1
3903: PUSH
3904: LD_VAR 0 5
3908: ARRAY
3909: PPUSH
3910: CALL_OW 258
3914: PUSH
3915: LD_INT 2
3917: EQUAL
3918: AND
3919: IFFALSE 3941
// Say ( characters [ i ] , dialogFID ) ;
3921: LD_VAR 0 1
3925: PUSH
3926: LD_VAR 0 5
3930: ARRAY
3931: PPUSH
3932: LD_VAR 0 3
3936: PPUSH
3937: CALL_OW 88
// end ;
3941: GO 3832
3943: POP
3944: POP
// end ;
3945: LD_VAR 0 4
3949: RET
// export function PrepareDifficulty ; begin
3950: LD_INT 0
3952: PPUSH
// if difficulty = 1 then
3953: LD_OWVAR 67
3957: PUSH
3958: LD_INT 1
3960: EQUAL
3961: IFFALSE 3979
// begin RuSolMinLevel = 9 ;
3963: LD_ADDR_EXP 23
3967: PUSH
3968: LD_INT 9
3970: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
3971: LD_ADDR_EXP 24
3975: PUSH
3976: LD_INT 10
3978: ST_TO_ADDR
// end ; if difficulty = 2 then
3979: LD_OWVAR 67
3983: PUSH
3984: LD_INT 2
3986: EQUAL
3987: IFFALSE 4005
// begin RuSolMinLevel = 9 ;
3989: LD_ADDR_EXP 23
3993: PUSH
3994: LD_INT 9
3996: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
3997: LD_ADDR_EXP 24
4001: PUSH
4002: LD_INT 10
4004: ST_TO_ADDR
// end ; if difficulty = 3 then
4005: LD_OWVAR 67
4009: PUSH
4010: LD_INT 3
4012: EQUAL
4013: IFFALSE 4031
// begin RuSolMinLevel = 9 ;
4015: LD_ADDR_EXP 23
4019: PUSH
4020: LD_INT 9
4022: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
4023: LD_ADDR_EXP 24
4027: PUSH
4028: LD_INT 10
4030: ST_TO_ADDR
// end ; end ;
4031: LD_VAR 0 1
4035: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
4036: LD_INT 0
4038: PPUSH
4039: PPUSH
4040: PPUSH
4041: PPUSH
// if position = 1 then
4042: LD_VAR 0 1
4046: PUSH
4047: LD_INT 1
4049: EQUAL
4050: IFFALSE 4797
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
4052: LD_ADDR_VAR 0 4
4056: PUSH
4057: LD_INT 22
4059: PUSH
4060: LD_INT 3
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PUSH
4067: LD_INT 25
4069: PUSH
4070: LD_INT 2
4072: PUSH
4073: EMPTY
4074: LIST
4075: LIST
4076: PUSH
4077: EMPTY
4078: LIST
4079: LIST
4080: PPUSH
4081: CALL_OW 69
4085: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
4086: LD_ADDR_VAR 0 5
4090: PUSH
4091: LD_INT 0
4093: PUSH
4094: LD_INT 49
4096: PUSH
4097: LD_INT 74
4099: PUSH
4100: LD_INT 3
4102: PUSH
4103: EMPTY
4104: LIST
4105: LIST
4106: LIST
4107: LIST
4108: PUSH
4109: LD_INT 4
4111: PUSH
4112: LD_INT 73
4114: PUSH
4115: LD_INT 88
4117: PUSH
4118: LD_INT 5
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: LIST
4125: LIST
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: LD_INT 56
4132: PUSH
4133: LD_INT 62
4135: PUSH
4136: LD_INT 3
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: LIST
4143: LIST
4144: PUSH
4145: LD_INT 29
4147: PUSH
4148: LD_INT 43
4150: PUSH
4151: LD_INT 68
4153: PUSH
4154: LD_INT 2
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: PUSH
4163: LD_INT 30
4165: PUSH
4166: LD_INT 43
4168: PUSH
4169: LD_INT 79
4171: PUSH
4172: LD_INT 5
4174: PUSH
4175: EMPTY
4176: LIST
4177: LIST
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 28
4183: PUSH
4184: LD_INT 60
4186: PUSH
4187: LD_INT 75
4189: PUSH
4190: LD_INT 1
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: LIST
4197: LIST
4198: PUSH
4199: LD_INT 2
4201: PUSH
4202: LD_INT 50
4204: PUSH
4205: LD_INT 87
4207: PUSH
4208: LD_INT 1
4210: PUSH
4211: EMPTY
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 28
4219: PUSH
4220: LD_INT 45
4222: PUSH
4223: LD_INT 67
4225: PUSH
4226: LD_INT 2
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 17
4237: PUSH
4238: LD_INT 47
4240: PUSH
4241: LD_INT 84
4243: PUSH
4244: LD_INT 2
4246: PUSH
4247: EMPTY
4248: LIST
4249: LIST
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 18
4255: PUSH
4256: LD_INT 46
4258: PUSH
4259: LD_INT 87
4261: PUSH
4262: LD_INT 1
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: PUSH
4271: LD_INT 28
4273: PUSH
4274: LD_INT 41
4276: PUSH
4277: LD_INT 64
4279: PUSH
4280: LD_INT 5
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: LIST
4287: LIST
4288: PUSH
4289: LD_INT 32
4291: PUSH
4292: LD_INT 75
4294: PUSH
4295: LD_INT 76
4297: PUSH
4298: LD_INT 5
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: LIST
4305: LIST
4306: PUSH
4307: LD_INT 32
4309: PUSH
4310: LD_INT 77
4312: PUSH
4313: LD_INT 75
4315: PUSH
4316: LD_INT 5
4318: PUSH
4319: EMPTY
4320: LIST
4321: LIST
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 32
4327: PUSH
4328: LD_INT 69
4330: PUSH
4331: LD_INT 68
4333: PUSH
4334: LD_INT 3
4336: PUSH
4337: EMPTY
4338: LIST
4339: LIST
4340: LIST
4341: LIST
4342: PUSH
4343: LD_INT 32
4345: PUSH
4346: LD_INT 59
4348: PUSH
4349: LD_INT 96
4351: PUSH
4352: LD_INT 5
4354: PUSH
4355: EMPTY
4356: LIST
4357: LIST
4358: LIST
4359: LIST
4360: PUSH
4361: LD_INT 32
4363: PUSH
4364: LD_INT 56
4366: PUSH
4367: LD_INT 96
4369: PUSH
4370: LD_INT 0
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_INT 32
4381: PUSH
4382: LD_INT 51
4384: PUSH
4385: LD_INT 61
4387: PUSH
4388: LD_INT 3
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: PUSH
4397: LD_INT 32
4399: PUSH
4400: LD_INT 42
4402: PUSH
4403: LD_INT 60
4405: PUSH
4406: LD_INT 3
4408: PUSH
4409: EMPTY
4410: LIST
4411: LIST
4412: LIST
4413: LIST
4414: PUSH
4415: LD_INT 32
4417: PUSH
4418: LD_INT 36
4420: PUSH
4421: LD_INT 58
4423: PUSH
4424: LD_INT 3
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: LD_INT 32
4435: PUSH
4436: LD_INT 39
4438: PUSH
4439: LD_INT 59
4441: PUSH
4442: LD_INT 3
4444: PUSH
4445: EMPTY
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 32
4453: PUSH
4454: LD_INT 61
4456: PUSH
4457: LD_INT 64
4459: PUSH
4460: LD_INT 3
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: LIST
4467: LIST
4468: PUSH
4469: LD_INT 33
4471: PUSH
4472: LD_INT 63
4474: PUSH
4475: LD_INT 90
4477: PUSH
4478: LD_INT 5
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: PUSH
4487: LD_INT 33
4489: PUSH
4490: LD_INT 64
4492: PUSH
4493: LD_INT 88
4495: PUSH
4496: LD_INT 5
4498: PUSH
4499: EMPTY
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: PUSH
4505: LD_INT 33
4507: PUSH
4508: LD_INT 72
4510: PUSH
4511: LD_INT 82
4513: PUSH
4514: LD_INT 5
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 6
4525: PUSH
4526: LD_INT 42
4528: PUSH
4529: LD_INT 74
4531: PUSH
4532: LD_INT 1
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: LIST
4539: LIST
4540: PUSH
4541: LD_INT 6
4543: PUSH
4544: LD_INT 56
4546: PUSH
4547: LD_INT 77
4549: PUSH
4550: LD_INT 2
4552: PUSH
4553: EMPTY
4554: LIST
4555: LIST
4556: LIST
4557: LIST
4558: PUSH
4559: LD_INT 21
4561: PUSH
4562: LD_INT 54
4564: PUSH
4565: LD_INT 91
4567: PUSH
4568: LD_INT 5
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_INT 16
4579: PUSH
4580: LD_INT 50
4582: PUSH
4583: LD_INT 83
4585: PUSH
4586: LD_INT 3
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: PUSH
4595: LD_INT 24
4597: PUSH
4598: LD_INT 50
4600: PUSH
4601: LD_INT 90
4603: PUSH
4604: LD_INT 0
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: PUSH
4613: EMPTY
4614: LIST
4615: LIST
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: LIST
4621: LIST
4622: LIST
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
4644: LD_ADDR_VAR 0 3
4648: PUSH
4649: LD_INT 22
4651: PUSH
4652: LD_INT 3
4654: PUSH
4655: EMPTY
4656: LIST
4657: LIST
4658: PPUSH
4659: CALL_OW 69
4663: PUSH
4664: FOR_IN
4665: IFFALSE 4704
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] , buildingsTab [ 2 ] [ 3 ] ) ;
4667: LD_VAR 0 3
4671: PPUSH
4672: LD_VAR 0 5
4676: PUSH
4677: LD_INT 2
4679: ARRAY
4680: PUSH
4681: LD_INT 2
4683: ARRAY
4684: PPUSH
4685: LD_VAR 0 5
4689: PUSH
4690: LD_INT 2
4692: ARRAY
4693: PUSH
4694: LD_INT 3
4696: ARRAY
4697: PPUSH
4698: CALL_OW 171
4702: GO 4664
4704: POP
4705: POP
// for i := 1 to buildingsTab do
4706: LD_ADDR_VAR 0 3
4710: PUSH
4711: DOUBLE
4712: LD_INT 1
4714: DEC
4715: ST_TO_ADDR
4716: LD_VAR 0 5
4720: PUSH
4721: FOR_TO
4722: IFFALSE 4795
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
4724: LD_VAR 0 4
4728: PPUSH
4729: LD_VAR 0 5
4733: PUSH
4734: LD_VAR 0 3
4738: ARRAY
4739: PUSH
4740: LD_INT 1
4742: ARRAY
4743: PPUSH
4744: LD_VAR 0 5
4748: PUSH
4749: LD_VAR 0 3
4753: ARRAY
4754: PUSH
4755: LD_INT 2
4757: ARRAY
4758: PPUSH
4759: LD_VAR 0 5
4763: PUSH
4764: LD_VAR 0 3
4768: ARRAY
4769: PUSH
4770: LD_INT 3
4772: ARRAY
4773: PPUSH
4774: LD_VAR 0 5
4778: PUSH
4779: LD_VAR 0 3
4783: ARRAY
4784: PUSH
4785: LD_INT 4
4787: ARRAY
4788: PPUSH
4789: CALL_OW 205
4793: GO 4721
4795: POP
4796: POP
// end ; if position = 2 then
4797: LD_VAR 0 1
4801: PUSH
4802: LD_INT 2
4804: EQUAL
4805: IFFALSE 5419
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
4807: LD_ADDR_VAR 0 4
4811: PUSH
4812: LD_INT 22
4814: PUSH
4815: LD_INT 3
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 25
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
4841: LD_ADDR_VAR 0 5
4845: PUSH
4846: LD_INT 0
4848: PUSH
4849: LD_INT 104
4851: PUSH
4852: LD_INT 110
4854: PUSH
4855: LD_INT 5
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 4
4866: PUSH
4867: LD_INT 98
4869: PUSH
4870: LD_INT 90
4872: PUSH
4873: LD_INT 3
4875: PUSH
4876: EMPTY
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PUSH
4882: LD_INT 29
4884: PUSH
4885: LD_INT 103
4887: PUSH
4888: LD_INT 114
4890: PUSH
4891: LD_INT 2
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: LD_INT 30
4902: PUSH
4903: LD_INT 99
4905: PUSH
4906: LD_INT 114
4908: PUSH
4909: LD_INT 3
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 28
4920: PUSH
4921: LD_INT 100
4923: PUSH
4924: LD_INT 112
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 2
4938: PUSH
4939: LD_INT 92
4941: PUSH
4942: LD_INT 101
4944: PUSH
4945: LD_INT 0
4947: PUSH
4948: EMPTY
4949: LIST
4950: LIST
4951: LIST
4952: LIST
4953: PUSH
4954: LD_INT 28
4956: PUSH
4957: LD_INT 97
4959: PUSH
4960: LD_INT 116
4962: PUSH
4963: LD_INT 5
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 17
4974: PUSH
4975: LD_INT 96
4977: PUSH
4978: LD_INT 101
4980: PUSH
4981: LD_INT 4
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: LIST
4988: LIST
4989: PUSH
4990: LD_INT 18
4992: PUSH
4993: LD_INT 88
4995: PUSH
4996: LD_INT 97
4998: PUSH
4999: LD_INT 2
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 28
5010: PUSH
5011: LD_INT 106
5013: PUSH
5014: LD_INT 92
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 32
5028: PUSH
5029: LD_INT 88
5031: PUSH
5032: LD_INT 89
5034: PUSH
5035: LD_INT 2
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 32
5046: PUSH
5047: LD_INT 86
5049: PUSH
5050: LD_INT 90
5052: PUSH
5053: LD_INT 2
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: LIST
5060: LIST
5061: PUSH
5062: LD_INT 32
5064: PUSH
5065: LD_INT 85
5067: PUSH
5068: LD_INT 99
5070: PUSH
5071: LD_INT 2
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 32
5082: PUSH
5083: LD_INT 85
5085: PUSH
5086: LD_INT 107
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: LIST
5096: LIST
5097: PUSH
5098: LD_INT 33
5100: PUSH
5101: LD_INT 105
5103: PUSH
5104: LD_INT 99
5106: PUSH
5107: LD_INT 1
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: PUSH
5116: LD_INT 33
5118: PUSH
5119: LD_INT 102
5121: PUSH
5122: LD_INT 92
5124: PUSH
5125: LD_INT 3
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: PUSH
5134: LD_INT 33
5136: PUSH
5137: LD_INT 105
5139: PUSH
5140: LD_INT 92
5142: PUSH
5143: LD_INT 2
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: LIST
5150: LIST
5151: PUSH
5152: LD_INT 6
5154: PUSH
5155: LD_INT 92
5157: PUSH
5158: LD_INT 110
5160: PUSH
5161: LD_INT 0
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: LD_INT 103
5175: PUSH
5176: LD_INT 103
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 21
5190: PUSH
5191: LD_INT 89
5193: PUSH
5194: LD_INT 101
5196: PUSH
5197: LD_INT 1
5199: PUSH
5200: EMPTY
5201: LIST
5202: LIST
5203: LIST
5204: LIST
5205: PUSH
5206: LD_INT 16
5208: PUSH
5209: LD_INT 95
5211: PUSH
5212: LD_INT 104
5214: PUSH
5215: LD_INT 4
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: PUSH
5224: LD_INT 24
5226: PUSH
5227: LD_INT 92
5229: PUSH
5230: LD_INT 105
5232: PUSH
5233: LD_INT 0
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: LIST
5240: LIST
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: LIST
5251: LIST
5252: LIST
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
5266: LD_ADDR_VAR 0 3
5270: PUSH
5271: LD_INT 22
5273: PUSH
5274: LD_INT 3
5276: PUSH
5277: EMPTY
5278: LIST
5279: LIST
5280: PPUSH
5281: CALL_OW 69
5285: PUSH
5286: FOR_IN
5287: IFFALSE 5326
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] , buildingsTab [ 2 ] [ 3 ] ) ;
5289: LD_VAR 0 3
5293: PPUSH
5294: LD_VAR 0 5
5298: PUSH
5299: LD_INT 2
5301: ARRAY
5302: PUSH
5303: LD_INT 2
5305: ARRAY
5306: PPUSH
5307: LD_VAR 0 5
5311: PUSH
5312: LD_INT 2
5314: ARRAY
5315: PUSH
5316: LD_INT 3
5318: ARRAY
5319: PPUSH
5320: CALL_OW 171
5324: GO 5286
5326: POP
5327: POP
// for i := 1 to buildingsTab do
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: DOUBLE
5334: LD_INT 1
5336: DEC
5337: ST_TO_ADDR
5338: LD_VAR 0 5
5342: PUSH
5343: FOR_TO
5344: IFFALSE 5417
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_VAR 0 5
5355: PUSH
5356: LD_VAR 0 3
5360: ARRAY
5361: PUSH
5362: LD_INT 1
5364: ARRAY
5365: PPUSH
5366: LD_VAR 0 5
5370: PUSH
5371: LD_VAR 0 3
5375: ARRAY
5376: PUSH
5377: LD_INT 2
5379: ARRAY
5380: PPUSH
5381: LD_VAR 0 5
5385: PUSH
5386: LD_VAR 0 3
5390: ARRAY
5391: PUSH
5392: LD_INT 3
5394: ARRAY
5395: PPUSH
5396: LD_VAR 0 5
5400: PUSH
5401: LD_VAR 0 3
5405: ARRAY
5406: PUSH
5407: LD_INT 4
5409: ARRAY
5410: PPUSH
5411: CALL_OW 205
5415: GO 5343
5417: POP
5418: POP
// end ; if position = 3 then
5419: LD_VAR 0 1
5423: PUSH
5424: LD_INT 3
5426: EQUAL
5427: IFFALSE 6212
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
5429: LD_ADDR_VAR 0 4
5433: PUSH
5434: LD_INT 22
5436: PUSH
5437: LD_INT 3
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 25
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
5463: LD_ADDR_VAR 0 5
5467: PUSH
5468: LD_INT 0
5470: PUSH
5471: LD_INT 151
5473: PUSH
5474: LD_INT 71
5476: PUSH
5477: LD_INT 4
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: LIST
5484: LIST
5485: PUSH
5486: LD_INT 4
5488: PUSH
5489: LD_INT 145
5491: PUSH
5492: LD_INT 53
5494: PUSH
5495: LD_INT 3
5497: PUSH
5498: EMPTY
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PUSH
5504: LD_INT 4
5506: PUSH
5507: LD_INT 172
5509: PUSH
5510: LD_INT 102
5512: PUSH
5513: LD_INT 5
5515: PUSH
5516: EMPTY
5517: LIST
5518: LIST
5519: LIST
5520: LIST
5521: PUSH
5522: LD_INT 29
5524: PUSH
5525: LD_INT 152
5527: PUSH
5528: LD_INT 85
5530: PUSH
5531: LD_INT 3
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: LIST
5538: LIST
5539: PUSH
5540: LD_INT 30
5542: PUSH
5543: LD_INT 156
5545: PUSH
5546: LD_INT 92
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: LIST
5556: LIST
5557: PUSH
5558: LD_INT 28
5560: PUSH
5561: LD_INT 151
5563: PUSH
5564: LD_INT 66
5566: PUSH
5567: LD_INT 4
5569: PUSH
5570: EMPTY
5571: LIST
5572: LIST
5573: LIST
5574: LIST
5575: PUSH
5576: LD_INT 2
5578: PUSH
5579: LD_INT 163
5581: PUSH
5582: LD_INT 95
5584: PUSH
5585: LD_INT 5
5587: PUSH
5588: EMPTY
5589: LIST
5590: LIST
5591: LIST
5592: LIST
5593: PUSH
5594: LD_INT 28
5596: PUSH
5597: LD_INT 149
5599: PUSH
5600: LD_INT 63
5602: PUSH
5603: LD_INT 4
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: LIST
5610: LIST
5611: PUSH
5612: LD_INT 17
5614: PUSH
5615: LD_INT 167
5617: PUSH
5618: LD_INT 99
5620: PUSH
5621: LD_INT 5
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: LIST
5628: LIST
5629: PUSH
5630: LD_INT 18
5632: PUSH
5633: LD_INT 163
5635: PUSH
5636: LD_INT 98
5638: PUSH
5639: LD_INT 0
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: LIST
5646: LIST
5647: PUSH
5648: LD_INT 28
5650: PUSH
5651: LD_INT 154
5653: PUSH
5654: LD_INT 70
5656: PUSH
5657: LD_INT 4
5659: PUSH
5660: EMPTY
5661: LIST
5662: LIST
5663: LIST
5664: LIST
5665: PUSH
5666: LD_INT 32
5668: PUSH
5669: LD_INT 155
5671: PUSH
5672: LD_INT 62
5674: PUSH
5675: LD_INT 4
5677: PUSH
5678: EMPTY
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 32
5686: PUSH
5687: LD_INT 161
5689: PUSH
5690: LD_INT 69
5692: PUSH
5693: LD_INT 4
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 32
5704: PUSH
5705: LD_INT 168
5707: PUSH
5708: LD_INT 78
5710: PUSH
5711: LD_INT 4
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 32
5722: PUSH
5723: LD_INT 163
5725: PUSH
5726: LD_INT 80
5728: PUSH
5729: LD_INT 5
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: LIST
5737: PUSH
5738: LD_INT 32
5740: PUSH
5741: LD_INT 136
5743: PUSH
5744: LD_INT 73
5746: PUSH
5747: LD_INT 0
5749: PUSH
5750: EMPTY
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PUSH
5756: LD_INT 32
5758: PUSH
5759: LD_INT 157
5761: PUSH
5762: LD_INT 98
5764: PUSH
5765: LD_INT 0
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: PUSH
5774: LD_INT 32
5776: PUSH
5777: LD_INT 150
5779: PUSH
5780: LD_INT 87
5782: PUSH
5783: LD_INT 1
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: LIST
5790: LIST
5791: PUSH
5792: LD_INT 33
5794: PUSH
5795: LD_INT 171
5797: PUSH
5798: LD_INT 97
5800: PUSH
5801: LD_INT 4
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: LIST
5808: LIST
5809: PUSH
5810: LD_INT 33
5812: PUSH
5813: LD_INT 168
5815: PUSH
5816: LD_INT 92
5818: PUSH
5819: LD_INT 4
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: LIST
5826: LIST
5827: PUSH
5828: LD_INT 33
5830: PUSH
5831: LD_INT 166
5833: PUSH
5834: LD_INT 80
5836: PUSH
5837: LD_INT 5
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: LD_INT 33
5848: PUSH
5849: LD_INT 141
5851: PUSH
5852: LD_INT 54
5854: PUSH
5855: LD_INT 2
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 33
5866: PUSH
5867: LD_INT 133
5869: PUSH
5870: LD_INT 57
5872: PUSH
5873: LD_INT 2
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 33
5884: PUSH
5885: LD_INT 132
5887: PUSH
5888: LD_INT 61
5890: PUSH
5891: LD_INT 2
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: PUSH
5900: LD_INT 33
5902: PUSH
5903: LD_INT 150
5905: PUSH
5906: LD_INT 82
5908: PUSH
5909: LD_INT 0
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: LD_INT 33
5920: PUSH
5921: LD_INT 132
5923: PUSH
5924: LD_INT 72
5926: PUSH
5927: LD_INT 0
5929: PUSH
5930: EMPTY
5931: LIST
5932: LIST
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 6
5938: PUSH
5939: LD_INT 146
5941: PUSH
5942: LD_INT 64
5944: PUSH
5945: LD_INT 4
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: PUSH
5954: LD_INT 6
5956: PUSH
5957: LD_INT 159
5959: PUSH
5960: LD_INT 85
5962: PUSH
5963: LD_INT 4
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: LIST
5970: LIST
5971: PUSH
5972: LD_INT 21
5974: PUSH
5975: LD_INT 163
5977: PUSH
5978: LD_INT 91
5980: PUSH
5981: LD_INT 3
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 16
5992: PUSH
5993: LD_INT 166
5995: PUSH
5996: LD_INT 95
5998: PUSH
5999: LD_INT 4
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: PUSH
6008: LD_INT 24
6010: PUSH
6011: LD_INT 159
6013: PUSH
6014: LD_INT 95
6016: PUSH
6017: LD_INT 1
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: LIST
6024: LIST
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: LIST
6042: LIST
6043: LIST
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
6059: LD_ADDR_VAR 0 3
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: CALL_OW 69
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6119
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] , buildingsTab [ 2 ] [ 3 ] ) ;
6082: LD_VAR 0 3
6086: PPUSH
6087: LD_VAR 0 5
6091: PUSH
6092: LD_INT 2
6094: ARRAY
6095: PUSH
6096: LD_INT 2
6098: ARRAY
6099: PPUSH
6100: LD_VAR 0 5
6104: PUSH
6105: LD_INT 2
6107: ARRAY
6108: PUSH
6109: LD_INT 3
6111: ARRAY
6112: PPUSH
6113: CALL_OW 171
6117: GO 6079
6119: POP
6120: POP
// for i := 1 to buildingsTab do
6121: LD_ADDR_VAR 0 3
6125: PUSH
6126: DOUBLE
6127: LD_INT 1
6129: DEC
6130: ST_TO_ADDR
6131: LD_VAR 0 5
6135: PUSH
6136: FOR_TO
6137: IFFALSE 6210
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6139: LD_VAR 0 4
6143: PPUSH
6144: LD_VAR 0 5
6148: PUSH
6149: LD_VAR 0 3
6153: ARRAY
6154: PUSH
6155: LD_INT 1
6157: ARRAY
6158: PPUSH
6159: LD_VAR 0 5
6163: PUSH
6164: LD_VAR 0 3
6168: ARRAY
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PPUSH
6174: LD_VAR 0 5
6178: PUSH
6179: LD_VAR 0 3
6183: ARRAY
6184: PUSH
6185: LD_INT 3
6187: ARRAY
6188: PPUSH
6189: LD_VAR 0 5
6193: PUSH
6194: LD_VAR 0 3
6198: ARRAY
6199: PUSH
6200: LD_INT 4
6202: ARRAY
6203: PPUSH
6204: CALL_OW 205
6208: GO 6136
6210: POP
6211: POP
// end ; end ;
6212: LD_VAR 0 2
6216: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
6217: LD_INT 0
6219: PPUSH
6220: PPUSH
6221: PPUSH
6222: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
6223: LD_ADDR_VAR 0 3
6227: PUSH
6228: LD_INT 22
6230: PUSH
6231: LD_INT 2
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 2
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PPUSH
6252: CALL_OW 69
6256: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
6257: LD_VAR 0 3
6261: PPUSH
6262: LD_INT 0
6264: PPUSH
6265: LD_INT 71
6267: PPUSH
6268: LD_INT 15
6270: PPUSH
6271: LD_INT 3
6273: PPUSH
6274: CALL_OW 205
// repeat wait ( 0 0$1 ) ;
6278: LD_INT 35
6280: PPUSH
6281: CALL_OW 67
// until GetResourceType ( GetBase ( arDepot ) , 1 ) > 0 ;
6285: LD_EXP 28
6289: PPUSH
6290: CALL_OW 274
6294: PPUSH
6295: LD_INT 1
6297: PPUSH
6298: CALL_OW 275
6302: PUSH
6303: LD_INT 0
6305: GREATER
6306: IFFALSE 6278
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
6308: LD_ADDR_VAR 0 4
6312: PUSH
6313: LD_INT 6
6315: PUSH
6316: LD_INT 77
6318: PUSH
6319: LD_INT 18
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: PUSH
6331: LD_INT 4
6333: PUSH
6334: LD_INT 77
6336: PUSH
6337: LD_INT 26
6339: PUSH
6340: LD_INT 0
6342: PUSH
6343: EMPTY
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 31
6351: PUSH
6352: LD_INT 82
6354: PUSH
6355: LD_INT 28
6357: PUSH
6358: LD_INT 0
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 31
6369: PUSH
6370: LD_INT 84
6372: PUSH
6373: LD_INT 21
6375: PUSH
6376: LD_INT 3
6378: PUSH
6379: EMPTY
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: LD_INT 31
6387: PUSH
6388: LD_INT 66
6390: PUSH
6391: LD_INT 14
6393: PUSH
6394: LD_INT 2
6396: PUSH
6397: EMPTY
6398: LIST
6399: LIST
6400: LIST
6401: LIST
6402: PUSH
6403: LD_INT 27
6405: PUSH
6406: LD_INT 67
6408: PUSH
6409: LD_INT 18
6411: PUSH
6412: LD_INT 5
6414: PUSH
6415: EMPTY
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 27
6423: PUSH
6424: LD_INT 69
6426: PUSH
6427: LD_INT 23
6429: PUSH
6430: LD_INT 2
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: PUSH
6439: EMPTY
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: ST_TO_ADDR
// for i := 1 to buildingsTab do
6448: LD_ADDR_VAR 0 2
6452: PUSH
6453: DOUBLE
6454: LD_INT 1
6456: DEC
6457: ST_TO_ADDR
6458: LD_VAR 0 4
6462: PUSH
6463: FOR_TO
6464: IFFALSE 6537
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6466: LD_VAR 0 3
6470: PPUSH
6471: LD_VAR 0 4
6475: PUSH
6476: LD_VAR 0 2
6480: ARRAY
6481: PUSH
6482: LD_INT 1
6484: ARRAY
6485: PPUSH
6486: LD_VAR 0 4
6490: PUSH
6491: LD_VAR 0 2
6495: ARRAY
6496: PUSH
6497: LD_INT 2
6499: ARRAY
6500: PPUSH
6501: LD_VAR 0 4
6505: PUSH
6506: LD_VAR 0 2
6510: ARRAY
6511: PUSH
6512: LD_INT 3
6514: ARRAY
6515: PPUSH
6516: LD_VAR 0 4
6520: PUSH
6521: LD_VAR 0 2
6525: ARRAY
6526: PUSH
6527: LD_INT 4
6529: ARRAY
6530: PPUSH
6531: CALL_OW 205
6535: GO 6463
6537: POP
6538: POP
// end ;
6539: LD_VAR 0 1
6543: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6544: LD_INT 0
6546: PPUSH
6547: PPUSH
6548: PPUSH
6549: PPUSH
6550: PPUSH
6551: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6552: LD_ADDR_VAR 0 7
6556: PUSH
6557: LD_INT 22
6559: PUSH
6560: LD_VAR 0 1
6564: PUSH
6565: EMPTY
6566: LIST
6567: LIST
6568: PUSH
6569: LD_INT 25
6571: PUSH
6572: LD_INT 9
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PPUSH
6583: CALL_OW 69
6587: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6588: LD_ADDR_VAR 0 8
6592: PUSH
6593: LD_INT 22
6595: PUSH
6596: LD_VAR 0 2
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: PUSH
6605: LD_INT 3
6607: PUSH
6608: LD_INT 21
6610: PUSH
6611: LD_INT 3
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6631: LD_ADDR_VAR 0 5
6635: PUSH
6636: LD_INT 1
6638: PPUSH
6639: LD_INT 3
6641: PPUSH
6642: CALL_OW 12
6646: ST_TO_ADDR
// for i = 1 to list do
6647: LD_ADDR_VAR 0 6
6651: PUSH
6652: DOUBLE
6653: LD_INT 1
6655: DEC
6656: ST_TO_ADDR
6657: LD_VAR 0 7
6661: PUSH
6662: FOR_TO
6663: IFFALSE 6845
// for ta in filter do
6665: LD_ADDR_VAR 0 4
6669: PUSH
6670: LD_VAR 0 8
6674: PUSH
6675: FOR_IN
6676: IFFALSE 6841
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6678: LD_VAR 0 7
6682: PUSH
6683: LD_VAR 0 6
6687: ARRAY
6688: PPUSH
6689: LD_VAR 0 4
6693: PPUSH
6694: CALL_OW 296
6698: PUSH
6699: LD_INT 13
6701: LESSEQUAL
6702: IFFALSE 6839
// begin case c of 1 :
6704: LD_VAR 0 5
6708: PUSH
6709: LD_INT 1
6711: DOUBLE
6712: EQUAL
6713: IFTRUE 6717
6715: GO 6755
6717: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6718: LD_VAR 0 7
6722: PUSH
6723: LD_VAR 0 6
6727: ARRAY
6728: PPUSH
6729: LD_VAR 0 4
6733: PPUSH
6734: CALL_OW 250
6738: PPUSH
6739: LD_VAR 0 4
6743: PPUSH
6744: CALL_OW 251
6748: PPUSH
6749: CALL_OW 154
6753: GO 6839
6755: LD_INT 2
6757: DOUBLE
6758: EQUAL
6759: IFTRUE 6763
6761: GO 6827
6763: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6764: LD_VAR 0 7
6768: PUSH
6769: LD_VAR 0 6
6773: ARRAY
6774: PPUSH
6775: LD_VAR 0 4
6779: PPUSH
6780: CALL_OW 250
6784: PUSH
6785: LD_INT 1
6787: NEG
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 12
6796: PLUS
6797: PPUSH
6798: LD_VAR 0 4
6802: PPUSH
6803: CALL_OW 251
6807: PUSH
6808: LD_INT 1
6810: NEG
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 12
6819: PLUS
6820: PPUSH
6821: CALL_OW 153
6825: GO 6839
6827: LD_INT 3
6829: DOUBLE
6830: EQUAL
6831: IFTRUE 6835
6833: GO 6838
6835: POP
// ; end ;
6836: GO 6839
6838: POP
// end ; end ;
6839: GO 6675
6841: POP
6842: POP
6843: GO 6662
6845: POP
6846: POP
// end ;
6847: LD_VAR 0 3
6851: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6852: LD_INT 0
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
// for i = 1 to 72 do
6858: LD_ADDR_VAR 0 5
6862: PUSH
6863: DOUBLE
6864: LD_INT 1
6866: DEC
6867: ST_TO_ADDR
6868: LD_INT 72
6870: PUSH
6871: FOR_TO
6872: IFFALSE 6930
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6874: LD_VAR 0 5
6878: PPUSH
6879: LD_VAR 0 1
6883: PPUSH
6884: CALL_OW 321
6888: PUSH
6889: LD_INT 1
6891: EQUAL
6892: PUSH
6893: LD_VAR 0 5
6897: PPUSH
6898: LD_VAR 0 3
6902: PPUSH
6903: CALL_OW 482
6907: PUSH
6908: LD_INT 1
6910: EQUAL
6911: AND
6912: IFFALSE 6928
// AddComResearch ( lab , i ) ;
6914: LD_VAR 0 2
6918: PPUSH
6919: LD_VAR 0 5
6923: PPUSH
6924: CALL_OW 184
6928: GO 6871
6930: POP
6931: POP
// end ;
6932: LD_VAR 0 4
6936: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
6937: LD_INT 0
6939: PPUSH
6940: PPUSH
6941: PPUSH
6942: PPUSH
6943: PPUSH
6944: PPUSH
6945: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
6946: LD_ADDR_VAR 0 6
6950: PUSH
6951: LD_INT 22
6953: PUSH
6954: LD_VAR 0 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 25
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 56
6975: PUSH
6976: EMPTY
6977: LIST
6978: PUSH
6979: LD_INT 24
6981: PUSH
6982: LD_INT 700
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: PPUSH
6995: CALL_OW 69
6999: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
7000: LD_ADDR_VAR 0 7
7004: PUSH
7005: LD_INT 22
7007: PUSH
7008: LD_VAR 0 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 30
7019: PUSH
7020: LD_INT 32
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 58
7029: PUSH
7030: EMPTY
7031: LIST
7032: PUSH
7033: LD_INT 24
7035: PUSH
7036: LD_INT 251
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: LIST
7047: LIST
7048: PPUSH
7049: CALL_OW 69
7053: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
7054: LD_ADDR_VAR 0 9
7058: PUSH
7059: LD_INT 22
7061: PUSH
7062: LD_VAR 0 1
7066: PUSH
7067: EMPTY
7068: LIST
7069: LIST
7070: PUSH
7071: LD_INT 2
7073: PUSH
7074: LD_INT 30
7076: PUSH
7077: LD_INT 4
7079: PUSH
7080: EMPTY
7081: LIST
7082: LIST
7083: PUSH
7084: LD_INT 30
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: PUSH
7094: EMPTY
7095: LIST
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 24
7101: PUSH
7102: LD_INT 251
7104: PUSH
7105: EMPTY
7106: LIST
7107: LIST
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: LIST
7113: PPUSH
7114: CALL_OW 69
7118: ST_TO_ADDR
// if barrackList > 0 then
7119: LD_VAR 0 9
7123: PUSH
7124: LD_INT 0
7126: GREATER
7127: IFFALSE 7216
// begin if turretList = 0 then
7129: LD_VAR 0 7
7133: PUSH
7134: LD_INT 0
7136: EQUAL
7137: IFFALSE 7176
// begin for i in soldiers_list do
7139: LD_ADDR_VAR 0 4
7143: PUSH
7144: LD_VAR 0 6
7148: PUSH
7149: FOR_IN
7150: IFFALSE 7172
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
7152: LD_VAR 0 4
7156: PPUSH
7157: LD_VAR 0 9
7161: PUSH
7162: LD_INT 1
7164: ARRAY
7165: PPUSH
7166: CALL_OW 120
7170: GO 7149
7172: POP
7173: POP
// end else
7174: GO 7216
// begin for i in barrackList do
7176: LD_ADDR_VAR 0 4
7180: PUSH
7181: LD_VAR 0 9
7185: PUSH
7186: FOR_IN
7187: IFFALSE 7214
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
7189: LD_VAR 0 4
7193: PPUSH
7194: CALL_OW 313
7198: PPUSH
7199: LD_VAR 0 7
7203: PUSH
7204: LD_INT 1
7206: ARRAY
7207: PPUSH
7208: CALL_OW 120
// end ;
7212: GO 7186
7214: POP
7215: POP
// end ; end ; end ;
7216: LD_VAR 0 3
7220: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
7221: LD_INT 0
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
7229: LD_ADDR_VAR 0 7
7233: PUSH
7234: LD_VAR 0 2
7238: PPUSH
7239: CALL_OW 313
7243: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
7244: LD_ADDR_VAR 0 8
7248: PUSH
7249: LD_VAR 0 3
7253: PPUSH
7254: LD_INT 22
7256: PUSH
7257: LD_VAR 0 1
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 2
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 24
7278: PUSH
7279: LD_INT 1000
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 70
7295: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7296: LD_ADDR_VAR 0 5
7300: PUSH
7301: LD_VAR 0 3
7305: PPUSH
7306: LD_INT 22
7308: PUSH
7309: LD_VAR 0 1
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 21
7320: PUSH
7321: LD_INT 3
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 3
7330: PUSH
7331: LD_INT 24
7333: PUSH
7334: LD_INT 1000
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: LIST
7349: PUSH
7350: EMPTY
7351: LIST
7352: PPUSH
7353: CALL_OW 70
7357: ST_TO_ADDR
// if buildings_list > 0 and engineerOkInside > 0 then
7358: LD_VAR 0 5
7362: PUSH
7363: LD_INT 0
7365: GREATER
7366: PUSH
7367: LD_VAR 0 7
7371: PUSH
7372: LD_INT 0
7374: GREATER
7375: AND
7376: IFFALSE 7404
// for i in engineerOkInside do
7378: LD_ADDR_VAR 0 6
7382: PUSH
7383: LD_VAR 0 7
7387: PUSH
7388: FOR_IN
7389: IFFALSE 7402
// ComExitBuilding ( i ) ;
7391: LD_VAR 0 6
7395: PPUSH
7396: CALL_OW 122
7400: GO 7388
7402: POP
7403: POP
// if engineerOkOutside > 0 then
7404: LD_VAR 0 8
7408: PUSH
7409: LD_INT 0
7411: GREATER
7412: IFFALSE 7466
// begin for i in engineerOkOutside do
7414: LD_ADDR_VAR 0 6
7418: PUSH
7419: LD_VAR 0 8
7423: PUSH
7424: FOR_IN
7425: IFFALSE 7464
// for j in buildings_list do
7427: LD_ADDR_VAR 0 9
7431: PUSH
7432: LD_VAR 0 5
7436: PUSH
7437: FOR_IN
7438: IFFALSE 7460
// ComRepairBuilding ( i , j [ 1 ] ) ;
7440: LD_VAR 0 6
7444: PPUSH
7445: LD_VAR 0 9
7449: PUSH
7450: LD_INT 1
7452: ARRAY
7453: PPUSH
7454: CALL_OW 130
7458: GO 7437
7460: POP
7461: POP
7462: GO 7424
7464: POP
7465: POP
// end ; if buildings_list = 0 then
7466: LD_VAR 0 5
7470: PUSH
7471: LD_INT 0
7473: EQUAL
7474: IFFALSE 7507
// for i in engineerOkOutside do
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_VAR 0 8
7485: PUSH
7486: FOR_IN
7487: IFFALSE 7505
// ComEnterUnit ( i , building ) ;
7489: LD_VAR 0 6
7493: PPUSH
7494: LD_VAR 0 2
7498: PPUSH
7499: CALL_OW 120
7503: GO 7486
7505: POP
7506: POP
// end ;
7507: LD_VAR 0 4
7511: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7512: LD_INT 0
7514: PPUSH
7515: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7516: LD_INT 22
7518: PUSH
7519: LD_VAR 0 1
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 25
7530: PUSH
7531: LD_INT 2
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PPUSH
7542: CALL_OW 69
7546: PUSH
7547: LD_INT 0
7549: GREATER
7550: PUSH
7551: LD_INT 22
7553: PUSH
7554: LD_VAR 0 1
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 21
7565: PUSH
7566: LD_INT 3
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: LD_INT 24
7578: PUSH
7579: LD_INT 1000
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: PUSH
7590: EMPTY
7591: LIST
7592: LIST
7593: LIST
7594: PPUSH
7595: CALL_OW 69
7599: PUSH
7600: LD_INT 0
7602: EQUAL
7603: AND
7604: PUSH
7605: LD_VAR 0 2
7609: PUSH
7610: LD_INT 0
7612: GREATER
7613: AND
7614: IFFALSE 7713
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7616: LD_ADDR_VAR 0 4
7620: PUSH
7621: LD_INT 22
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 25
7635: PUSH
7636: LD_INT 2
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 69
7651: PUSH
7652: FOR_IN
7653: IFFALSE 7711
// begin AddComExitBuilding ( i ) ;
7655: LD_VAR 0 4
7659: PPUSH
7660: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7664: LD_VAR 0 4
7668: PPUSH
7669: LD_VAR 0 2
7673: PUSH
7674: LD_INT 1
7676: ARRAY
7677: PPUSH
7678: LD_VAR 0 2
7682: PUSH
7683: LD_INT 2
7685: ARRAY
7686: PPUSH
7687: LD_VAR 0 2
7691: PUSH
7692: LD_INT 3
7694: ARRAY
7695: PPUSH
7696: LD_VAR 0 2
7700: PUSH
7701: LD_INT 4
7703: ARRAY
7704: PPUSH
7705: CALL_OW 205
// end ;
7709: GO 7652
7711: POP
7712: POP
// end ; end ;
7713: LD_VAR 0 3
7717: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
7718: LD_INT 0
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7727: LD_ADDR_VAR 0 9
7731: PUSH
7732: LD_INT 22
7734: PUSH
7735: LD_VAR 0 1
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: PUSH
7744: LD_INT 24
7746: PUSH
7747: LD_INT 251
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 30
7759: PUSH
7760: LD_INT 9
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: LD_INT 30
7769: PUSH
7770: LD_INT 7
7772: PUSH
7773: EMPTY
7774: LIST
7775: LIST
7776: PUSH
7777: LD_INT 30
7779: PUSH
7780: LD_INT 8
7782: PUSH
7783: EMPTY
7784: LIST
7785: LIST
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 69
7802: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
7803: LD_ADDR_VAR 0 7
7807: PUSH
7808: LD_VAR 0 3
7812: PPUSH
7813: LD_INT 22
7815: PUSH
7816: LD_VAR 0 1
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: PUSH
7825: LD_INT 25
7827: PUSH
7828: LD_INT 4
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 24
7837: PUSH
7838: LD_INT 251
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: EMPTY
7846: LIST
7847: LIST
7848: LIST
7849: PPUSH
7850: CALL_OW 70
7854: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7855: LD_ADDR_VAR 0 10
7859: PUSH
7860: LD_VAR 0 3
7864: PPUSH
7865: LD_INT 22
7867: PUSH
7868: LD_VAR 0 1
7872: PUSH
7873: EMPTY
7874: LIST
7875: LIST
7876: PUSH
7877: LD_INT 21
7879: PUSH
7880: LD_INT 1
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: PUSH
7887: LD_INT 3
7889: PUSH
7890: LD_INT 24
7892: PUSH
7893: LD_INT 750
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: LIST
7908: PPUSH
7909: CALL_OW 70
7913: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
7914: LD_VAR 0 9
7918: PUSH
7919: LD_INT 0
7921: GREATER
7922: PUSH
7923: LD_VAR 0 10
7927: PUSH
7928: LD_INT 0
7930: GREATER
7931: AND
7932: IFFALSE 7966
// for i in labs do
7934: LD_ADDR_VAR 0 5
7938: PUSH
7939: LD_VAR 0 9
7943: PUSH
7944: FOR_IN
7945: IFFALSE 7964
// scientisticsInside = UnitsInside ( i ) ;
7947: LD_ADDR_VAR 0 8
7951: PUSH
7952: LD_VAR 0 5
7956: PPUSH
7957: CALL_OW 313
7961: ST_TO_ADDR
7962: GO 7944
7964: POP
7965: POP
// if labs > 0 and damageUnits > 0 then
7966: LD_VAR 0 9
7970: PUSH
7971: LD_INT 0
7973: GREATER
7974: PUSH
7975: LD_VAR 0 10
7979: PUSH
7980: LD_INT 0
7982: GREATER
7983: AND
7984: IFFALSE 8012
// for i in scientisticsInside do
7986: LD_ADDR_VAR 0 5
7990: PUSH
7991: LD_VAR 0 8
7995: PUSH
7996: FOR_IN
7997: IFFALSE 8010
// ComExitBuilding ( i ) ;
7999: LD_VAR 0 5
8003: PPUSH
8004: CALL_OW 122
8008: GO 7996
8010: POP
8011: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
8012: LD_VAR 0 10
8016: PUSH
8017: LD_INT 0
8019: GREATER
8020: PUSH
8021: LD_VAR 0 7
8025: PUSH
8026: LD_INT 0
8028: GREATER
8029: AND
8030: IFFALSE 8096
// begin ComMoveToArea ( damageUnits , healArea ) ;
8032: LD_VAR 0 10
8036: PPUSH
8037: LD_VAR 0 2
8041: PPUSH
8042: CALL_OW 113
// for i in scientisticsOutside do
8046: LD_ADDR_VAR 0 5
8050: PUSH
8051: LD_VAR 0 7
8055: PUSH
8056: FOR_IN
8057: IFFALSE 8092
// for j in damageUnits do
8059: LD_ADDR_VAR 0 6
8063: PUSH
8064: LD_VAR 0 10
8068: PUSH
8069: FOR_IN
8070: IFFALSE 8088
// AddComHeal ( i , j ) ;
8072: LD_VAR 0 5
8076: PPUSH
8077: LD_VAR 0 6
8081: PPUSH
8082: CALL_OW 188
8086: GO 8069
8088: POP
8089: POP
8090: GO 8056
8092: POP
8093: POP
// end else
8094: GO 8124
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
8096: LD_VAR 0 7
8100: PPUSH
8101: LD_VAR 0 9
8105: PUSH
8106: LD_INT 1
8108: PPUSH
8109: LD_VAR 0 9
8113: PPUSH
8114: CALL_OW 12
8118: ARRAY
8119: PPUSH
8120: CALL_OW 120
// end ; end ;
8124: LD_VAR 0 4
8128: RET
// export function TameApemans ; var i , j ; begin
8129: LD_INT 0
8131: PPUSH
8132: PPUSH
8133: PPUSH
// repeat wait ( 0 0$1 ) ;
8134: LD_INT 35
8136: PPUSH
8137: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
8141: LD_ADDR_VAR 0 2
8145: PUSH
8146: LD_INT 22
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 25
8158: PUSH
8159: LD_INT 4
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 69
8174: PUSH
8175: FOR_IN
8176: IFFALSE 8253
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
8178: LD_ADDR_VAR 0 3
8182: PUSH
8183: LD_INT 5
8185: PPUSH
8186: LD_INT 22
8188: PUSH
8189: LD_INT 0
8191: PUSH
8192: EMPTY
8193: LIST
8194: LIST
8195: PUSH
8196: LD_INT 25
8198: PUSH
8199: LD_INT 12
8201: PUSH
8202: EMPTY
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PPUSH
8210: CALL_OW 70
8214: PUSH
8215: FOR_IN
8216: IFFALSE 8249
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
8218: LD_VAR 0 2
8222: PPUSH
8223: LD_VAR 0 3
8227: PPUSH
8228: CALL_OW 250
8232: PPUSH
8233: LD_VAR 0 3
8237: PPUSH
8238: CALL_OW 251
8242: PPUSH
8243: CALL_OW 191
// end ;
8247: GO 8215
8249: POP
8250: POP
// end ;
8251: GO 8175
8253: POP
8254: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
8255: LD_INT 22
8257: PUSH
8258: LD_INT 2
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 4
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PPUSH
8279: CALL_OW 69
8283: PUSH
8284: LD_INT 0
8286: EQUAL
8287: PUSH
8288: LD_INT 5
8290: PPUSH
8291: LD_INT 22
8293: PUSH
8294: LD_INT 0
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 25
8303: PUSH
8304: LD_INT 12
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: PPUSH
8315: CALL_OW 70
8319: PUSH
8320: LD_INT 0
8322: EQUAL
8323: OR
8324: IFFALSE 8134
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
8326: LD_ADDR_VAR 0 2
8330: PUSH
8331: LD_INT 22
8333: PUSH
8334: LD_INT 2
8336: PUSH
8337: EMPTY
8338: LIST
8339: LIST
8340: PUSH
8341: LD_INT 25
8343: PUSH
8344: LD_INT 12
8346: PUSH
8347: EMPTY
8348: LIST
8349: LIST
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PPUSH
8355: CALL_OW 69
8359: PUSH
8360: FOR_IN
8361: IFFALSE 8396
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_INT 16
8370: PUSH
8371: LD_INT 15
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 1
8380: PPUSH
8381: LD_INT 2
8383: PPUSH
8384: CALL_OW 12
8388: ARRAY
8389: PPUSH
8390: CALL_OW 336
8394: GO 8360
8396: POP
8397: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
8398: LD_ADDR_VAR 0 2
8402: PUSH
8403: LD_INT 22
8405: PUSH
8406: LD_INT 2
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 25
8415: PUSH
8416: LD_INT 4
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PPUSH
8427: CALL_OW 69
8431: PUSH
8432: FOR_IN
8433: IFFALSE 8451
// ComEnterUnit ( i , arLab ) ;
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_EXP 29
8444: PPUSH
8445: CALL_OW 120
8449: GO 8432
8451: POP
8452: POP
// end ; end_of_file
8453: LD_VAR 0 1
8457: RET
// every 0 0$1 trigger activateRUAI = 1 do
8458: LD_EXP 27
8462: PUSH
8463: LD_INT 1
8465: EQUAL
8466: IFFALSE 8492
8468: GO 8470
8470: DISABLE
// begin enable ;
8471: ENABLE
// IntBazooka ( 3 , 1 ) ;
8472: LD_INT 3
8474: PPUSH
8475: LD_INT 1
8477: PPUSH
8478: CALL 6544 0 2
// IntBazooka ( 6 , 1 ) ;
8482: LD_INT 6
8484: PPUSH
8485: LD_INT 1
8487: PPUSH
8488: CALL 6544 0 2
// end ; end_of_file
8492: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
8493: LD_VAR 0 1
8497: PPUSH
8498: CALL_OW 255
8502: PUSH
8503: LD_INT 4
8505: EQUAL
8506: IFFALSE 8520
// SetBName ( building , epsilon ) ;
8508: LD_VAR 0 1
8512: PPUSH
8513: LD_STRING epsilon
8515: PPUSH
8516: CALL_OW 500
// end ;
8520: PPOPN 2
8522: END
// on BuildingComplete ( building ) do var i ;
8523: LD_INT 0
8525: PPUSH
// begin if GetSide ( building ) = 3 then
8526: LD_VAR 0 1
8530: PPUSH
8531: CALL_OW 255
8535: PUSH
8536: LD_INT 3
8538: EQUAL
8539: IFFALSE 8961
// begin if GetBType ( building ) = b_depot then
8541: LD_VAR 0 1
8545: PPUSH
8546: CALL_OW 266
8550: PUSH
8551: LD_INT 0
8553: EQUAL
8554: IFFALSE 8626
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
8556: LD_VAR 0 1
8560: PPUSH
8561: CALL_OW 274
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: LD_INT 5000
8571: PPUSH
8572: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 274
8585: PPUSH
8586: LD_INT 2
8588: PPUSH
8589: LD_INT 5000
8591: PPUSH
8592: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
8596: LD_VAR 0 1
8600: PPUSH
8601: CALL_OW 274
8605: PPUSH
8606: LD_INT 3
8608: PPUSH
8609: LD_INT 5000
8611: PPUSH
8612: CALL_OW 277
// ruDepot = building ;
8616: LD_ADDR_EXP 17
8620: PUSH
8621: LD_VAR 0 1
8625: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
8626: LD_VAR 0 1
8630: PPUSH
8631: CALL_OW 266
8635: PUSH
8636: LD_INT 0
8638: EQUAL
8639: PUSH
8640: LD_VAR 0 1
8644: PPUSH
8645: CALL_OW 266
8649: PUSH
8650: LD_INT 2
8652: EQUAL
8653: OR
8654: PUSH
8655: LD_VAR 0 1
8659: PPUSH
8660: CALL_OW 266
8664: PUSH
8665: LD_INT 4
8667: EQUAL
8668: OR
8669: IFFALSE 8680
// ComUpgrade ( building ) ;
8671: LD_VAR 0 1
8675: PPUSH
8676: CALL_OW 146
// if GetBType ( building ) = b_lab then
8680: LD_VAR 0 1
8684: PPUSH
8685: CALL_OW 266
8689: PUSH
8690: LD_INT 6
8692: EQUAL
8693: IFFALSE 8814
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
8695: LD_INT 22
8697: PUSH
8698: LD_INT 3
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PUSH
8705: LD_INT 30
8707: PUSH
8708: LD_INT 8
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: PPUSH
8719: CALL_OW 69
8723: PUSH
8724: LD_INT 0
8726: EQUAL
8727: IFFALSE 8765
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
8729: LD_VAR 0 1
8733: PPUSH
8734: LD_INT 10
8736: PPUSH
8737: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
8741: LD_VAR 0 1
8745: PPUSH
8746: LD_INT 12
8748: PPUSH
8749: CALL_OW 207
// ruLab1 = building ;
8753: LD_ADDR_EXP 18
8757: PUSH
8758: LD_VAR 0 1
8762: ST_TO_ADDR
// end else
8763: GO 8799
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
8765: LD_VAR 0 1
8769: PPUSH
8770: LD_INT 11
8772: PPUSH
8773: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
8777: LD_VAR 0 1
8781: PPUSH
8782: LD_INT 14
8784: PPUSH
8785: CALL_OW 207
// ruLab2 = building ;
8789: LD_ADDR_EXP 19
8793: PUSH
8794: LD_VAR 0 1
8798: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
8799: LD_INT 3
8801: PPUSH
8802: LD_VAR 0 1
8806: PPUSH
8807: LD_INT 3
8809: PPUSH
8810: CALL 6852 0 3
// end ; if GetBType ( building ) = b_bunker then
8814: LD_VAR 0 1
8818: PPUSH
8819: CALL_OW 266
8823: PUSH
8824: LD_INT 32
8826: EQUAL
8827: IFFALSE 8876
// AddComPlaceWeapon ( building , [ 43 , 44 , 45 , 45 , 46 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8829: LD_VAR 0 1
8833: PPUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: LD_INT 45
8845: PUSH
8846: LD_INT 46
8848: PUSH
8849: LD_INT 46
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 1
8862: PPUSH
8863: LD_INT 4
8865: PPUSH
8866: CALL_OW 12
8870: ARRAY
8871: PPUSH
8872: CALL_OW 208
// if GetBType ( building ) = b_turret then
8876: LD_VAR 0 1
8880: PPUSH
8881: CALL_OW 266
8885: PUSH
8886: LD_INT 33
8888: EQUAL
8889: IFFALSE 8938
// AddComPlaceWeapon ( building , [ 43 , 44 , 45 , 45 , 46 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8891: LD_VAR 0 1
8895: PPUSH
8896: LD_INT 43
8898: PUSH
8899: LD_INT 44
8901: PUSH
8902: LD_INT 45
8904: PUSH
8905: LD_INT 45
8907: PUSH
8908: LD_INT 46
8910: PUSH
8911: LD_INT 46
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 1
8924: PPUSH
8925: LD_INT 4
8927: PPUSH
8928: CALL_OW 12
8932: ARRAY
8933: PPUSH
8934: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
8938: LD_VAR 0 1
8942: PPUSH
8943: CALL_OW 266
8947: PUSH
8948: LD_INT 24
8950: EQUAL
8951: IFFALSE 8961
// russianAI = 1 ;
8953: LD_ADDR_EXP 26
8957: PUSH
8958: LD_INT 1
8960: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
8961: LD_VAR 0 1
8965: PPUSH
8966: CALL_OW 255
8970: PUSH
8971: LD_INT 2
8973: EQUAL
8974: IFFALSE 9171
// begin if GetBType ( building ) = b_depot then
8976: LD_VAR 0 1
8980: PPUSH
8981: CALL_OW 266
8985: PUSH
8986: LD_INT 0
8988: EQUAL
8989: IFFALSE 9068
// begin arDepot = building ;
8991: LD_ADDR_EXP 28
8995: PUSH
8996: LD_VAR 0 1
9000: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
9001: LD_INT 38
9003: PUSH
9004: LD_INT 47
9006: PUSH
9007: EMPTY
9008: LIST
9009: LIST
9010: PPUSH
9011: LD_INT 71
9013: PPUSH
9014: LD_INT 19
9016: PPUSH
9017: CALL_OW 111
// wait ( 0 0$20 ) ;
9021: LD_INT 700
9023: PPUSH
9024: CALL_OW 67
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
9028: LD_VAR 0 1
9032: PPUSH
9033: CALL_OW 274
9037: PPUSH
9038: LD_INT 1
9040: PPUSH
9041: LD_INT 500
9043: PPUSH
9044: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
9048: LD_VAR 0 1
9052: PPUSH
9053: CALL_OW 274
9057: PPUSH
9058: LD_INT 3
9060: PPUSH
9061: LD_INT 30
9063: PPUSH
9064: CALL_OW 277
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
9068: LD_VAR 0 1
9072: PPUSH
9073: CALL_OW 266
9077: PUSH
9078: LD_INT 2
9080: EQUAL
9081: PUSH
9082: LD_VAR 0 1
9086: PPUSH
9087: CALL_OW 266
9091: PUSH
9092: LD_INT 4
9094: EQUAL
9095: OR
9096: IFFALSE 9107
// ComUpgrade ( building ) ;
9098: LD_VAR 0 1
9102: PPUSH
9103: CALL_OW 146
// if GetBType ( building ) = b_lab then
9107: LD_VAR 0 1
9111: PPUSH
9112: CALL_OW 266
9116: PUSH
9117: LD_INT 6
9119: EQUAL
9120: IFFALSE 9171
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
9122: LD_VAR 0 1
9126: PPUSH
9127: LD_INT 10
9129: PPUSH
9130: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
9134: LD_VAR 0 1
9138: PPUSH
9139: LD_INT 11
9141: PPUSH
9142: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
9146: LD_INT 3
9148: PPUSH
9149: LD_VAR 0 1
9153: PPUSH
9154: LD_INT 3
9156: PPUSH
9157: CALL 6852 0 3
// arLab = building ;
9161: LD_ADDR_EXP 29
9165: PUSH
9166: LD_VAR 0 1
9170: ST_TO_ADDR
// end ; end ; end ;
9171: PPOPN 2
9173: END
// on UpgradeComplete ( building ) do var i ;
9174: LD_INT 0
9176: PPUSH
// begin if GetSide ( building ) = 3 then
9177: LD_VAR 0 1
9181: PPUSH
9182: CALL_OW 255
9186: PUSH
9187: LD_INT 3
9189: EQUAL
9190: IFFALSE 9262
// begin if GetBType ( building ) = b_factory then
9192: LD_VAR 0 1
9196: PPUSH
9197: CALL_OW 266
9201: PUSH
9202: LD_INT 3
9204: EQUAL
9205: IFFALSE 9262
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
9207: LD_ADDR_VAR 0 2
9211: PUSH
9212: LD_INT 22
9214: PUSH
9215: LD_INT 3
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: LD_INT 25
9224: PUSH
9225: LD_INT 3
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: PUSH
9232: EMPTY
9233: LIST
9234: LIST
9235: PPUSH
9236: CALL_OW 69
9240: PUSH
9241: FOR_IN
9242: IFFALSE 9260
// ComEnterUnit ( i , building ) ;
9244: LD_VAR 0 2
9248: PPUSH
9249: LD_VAR 0 1
9253: PPUSH
9254: CALL_OW 120
9258: GO 9241
9260: POP
9261: POP
// end ; end ; end_of_file
9262: PPOPN 2
9264: END
// export function PrepareNature ; var i , un ; begin
9265: LD_INT 0
9267: PPUSH
9268: PPUSH
9269: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
9270: LD_ADDR_VAR 0 2
9274: PUSH
9275: DOUBLE
9276: LD_INT 1
9278: DEC
9279: ST_TO_ADDR
9280: LD_OWVAR 67
9284: PUSH
9285: LD_INT 1
9287: PPUSH
9288: LD_INT 5
9290: PPUSH
9291: CALL_OW 12
9295: PLUS
9296: PUSH
9297: FOR_TO
9298: IFFALSE 9443
// begin hc_sex = sex_male ;
9300: LD_ADDR_OWVAR 27
9304: PUSH
9305: LD_INT 1
9307: ST_TO_ADDR
// uc_side = 0 ;
9308: LD_ADDR_OWVAR 20
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// uc_nation = nation_nature ;
9316: LD_ADDR_OWVAR 21
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// hc_class = class_apeman ;
9324: LD_ADDR_OWVAR 28
9328: PUSH
9329: LD_INT 12
9331: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
9332: LD_ADDR_OWVAR 31
9336: PUSH
9337: LD_INT 2
9339: PPUSH
9340: LD_INT 7
9342: PPUSH
9343: CALL_OW 12
9347: PUSH
9348: LD_OWVAR 67
9352: PLUS
9353: PUSH
9354: LD_INT 2
9356: PPUSH
9357: LD_INT 10
9359: PPUSH
9360: CALL_OW 12
9364: PUSH
9365: LD_INT 2
9367: PPUSH
9368: LD_INT 10
9370: PPUSH
9371: CALL_OW 12
9375: PUSH
9376: LD_INT 2
9378: PPUSH
9379: LD_INT 10
9381: PPUSH
9382: CALL_OW 12
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
9393: LD_ADDR_OWVAR 35
9397: PUSH
9398: LD_INT 5
9400: NEG
9401: PPUSH
9402: LD_INT 5
9404: PPUSH
9405: CALL_OW 12
9409: PUSH
9410: LD_OWVAR 67
9414: MUL
9415: ST_TO_ADDR
// un = CreateHuman ;
9416: LD_ADDR_VAR 0 3
9420: PUSH
9421: CALL_OW 44
9425: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
9426: LD_VAR 0 3
9430: PPUSH
9431: LD_INT 5
9433: PPUSH
9434: LD_INT 0
9436: PPUSH
9437: CALL_OW 49
// end ;
9441: GO 9297
9443: POP
9444: POP
// for i = 1 to Difficulty + 2 do
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: DOUBLE
9451: LD_INT 1
9453: DEC
9454: ST_TO_ADDR
9455: LD_OWVAR 67
9459: PUSH
9460: LD_INT 2
9462: PLUS
9463: PUSH
9464: FOR_TO
9465: IFFALSE 9574
// begin hc_sex = sex_male ;
9467: LD_ADDR_OWVAR 27
9471: PUSH
9472: LD_INT 1
9474: ST_TO_ADDR
// uc_side = 0 ;
9475: LD_ADDR_OWVAR 20
9479: PUSH
9480: LD_INT 0
9482: ST_TO_ADDR
// uc_nation = nation_nature ;
9483: LD_ADDR_OWVAR 21
9487: PUSH
9488: LD_INT 0
9490: ST_TO_ADDR
// hc_class = class_tiger ;
9491: LD_ADDR_OWVAR 28
9495: PUSH
9496: LD_INT 14
9498: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
9499: LD_ADDR_OWVAR 31
9503: PUSH
9504: LD_EXP 24
9508: PUSH
9509: LD_INT 0
9511: PUSH
9512: LD_INT 0
9514: PUSH
9515: LD_INT 0
9517: PUSH
9518: EMPTY
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
9524: LD_ADDR_OWVAR 35
9528: PUSH
9529: LD_INT 5
9531: NEG
9532: PPUSH
9533: LD_INT 5
9535: PPUSH
9536: CALL_OW 12
9540: PUSH
9541: LD_OWVAR 67
9545: MUL
9546: ST_TO_ADDR
// un = CreateHuman ;
9547: LD_ADDR_VAR 0 3
9551: PUSH
9552: CALL_OW 44
9556: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
9557: LD_VAR 0 3
9561: PPUSH
9562: LD_INT 6
9564: PPUSH
9565: LD_INT 0
9567: PPUSH
9568: CALL_OW 49
// end ;
9572: GO 9464
9574: POP
9575: POP
// for i = 1 to rand ( 3 , 4 ) do
9576: LD_ADDR_VAR 0 2
9580: PUSH
9581: DOUBLE
9582: LD_INT 1
9584: DEC
9585: ST_TO_ADDR
9586: LD_INT 3
9588: PPUSH
9589: LD_INT 4
9591: PPUSH
9592: CALL_OW 12
9596: PUSH
9597: FOR_TO
9598: IFFALSE 9692
// begin hc_sex = sex_male ;
9600: LD_ADDR_OWVAR 27
9604: PUSH
9605: LD_INT 1
9607: ST_TO_ADDR
// uc_side = 0 ;
9608: LD_ADDR_OWVAR 20
9612: PUSH
9613: LD_INT 0
9615: ST_TO_ADDR
// uc_nation = nation_nature ;
9616: LD_ADDR_OWVAR 21
9620: PUSH
9621: LD_INT 0
9623: ST_TO_ADDR
// hc_class = 18 ;
9624: LD_ADDR_OWVAR 28
9628: PUSH
9629: LD_INT 18
9631: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
9632: LD_ADDR_OWVAR 31
9636: PUSH
9637: LD_EXP 24
9641: PUSH
9642: LD_INT 0
9644: PUSH
9645: LD_INT 0
9647: PUSH
9648: LD_INT 0
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: LIST
9655: LIST
9656: ST_TO_ADDR
// hc_agressivity = 0 ;
9657: LD_ADDR_OWVAR 35
9661: PUSH
9662: LD_INT 0
9664: ST_TO_ADDR
// un = CreateHuman ;
9665: LD_ADDR_VAR 0 3
9669: PUSH
9670: CALL_OW 44
9674: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
9675: LD_VAR 0 3
9679: PPUSH
9680: LD_INT 6
9682: PPUSH
9683: LD_INT 0
9685: PPUSH
9686: CALL_OW 49
// end ;
9690: GO 9597
9692: POP
9693: POP
// end ;
9694: LD_VAR 0 1
9698: RET
