// export JMM , Gary , Cyrus , Bobby , Lisa ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export arDepot , arLab , arArm ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 15
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 16
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 25
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 26
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 27
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareDifficulty ;
  47: CALL 3919 0 0
// PrepareVehicles ;
  51: CALL 282 0 0
// PrepareJMMTeam ;
  55: CALL 88 0 0
// PrepareCathyTeam ;
  59: CALL 496 0 0
// PrepareArabianCommander ;
  63: CALL 1327 0 0
// PrepareArabian ;
  67: CALL 1379 0 0
// BuildArabianBase ;
  71: CALL 6000 0 0
// PrepareNature ;
  75: CALL 8882 0 0
// TameApemans ;
  79: CALL 7880 0 0
// SaveForQuickRestart ;
  83: CALL_OW 22
// end ; end_of_file
  87: END
// export function PrepareJMMTeam ; begin
  88: LD_INT 0
  90: PPUSH
// uc_side = 1 ;
  91: LD_ADDR_OWVAR 20
  95: PUSH
  96: LD_INT 1
  98: ST_TO_ADDR
// uc_nation = 1 ;
  99: LD_ADDR_OWVAR 21
 103: PUSH
 104: LD_INT 1
 106: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 107: LD_ADDR_EXP 1
 111: PUSH
 112: LD_STRING JMM
 114: PPUSH
 115: LD_INT 0
 117: PPUSH
 118: CALL 3706 0 2
 122: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 123: LD_ADDR_EXP 2
 127: PUSH
 128: LD_STRING Gary
 130: PPUSH
 131: LD_INT 0
 133: PPUSH
 134: CALL 3706 0 2
 138: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 139: LD_ADDR_EXP 3
 143: PUSH
 144: LD_STRING Cyrus
 146: PPUSH
 147: LD_INT 0
 149: PPUSH
 150: CALL 3706 0 2
 154: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 155: LD_ADDR_EXP 4
 159: PUSH
 160: LD_STRING Bobby
 162: PPUSH
 163: LD_INT 0
 165: PPUSH
 166: CALL 3706 0 2
 170: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 171: LD_ADDR_EXP 5
 175: PUSH
 176: LD_STRING Lisa
 178: PPUSH
 179: LD_INT 0
 181: PPUSH
 182: CALL 3706 0 2
 186: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 187: LD_EXP 1
 191: PPUSH
 192: LD_EXP 15
 196: PUSH
 197: LD_INT 1
 199: ARRAY
 200: PPUSH
 201: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 205: LD_EXP 2
 209: PPUSH
 210: LD_EXP 15
 214: PUSH
 215: LD_INT 2
 217: ARRAY
 218: PPUSH
 219: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 223: LD_EXP 3
 227: PPUSH
 228: LD_EXP 15
 232: PUSH
 233: LD_INT 3
 235: ARRAY
 236: PPUSH
 237: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 241: LD_EXP 4
 245: PPUSH
 246: LD_EXP 15
 250: PUSH
 251: LD_INT 4
 253: ARRAY
 254: PPUSH
 255: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 259: LD_EXP 5
 263: PPUSH
 264: LD_EXP 15
 268: PUSH
 269: LD_INT 5
 271: ARRAY
 272: PPUSH
 273: CALL_OW 52
// end ;
 277: LD_VAR 0 1
 281: RET
// export function PrepareVehicles ; var i , veh ; begin
 282: LD_INT 0
 284: PPUSH
 285: PPUSH
 286: PPUSH
// uc_side = 1 ;
 287: LD_ADDR_OWVAR 20
 291: PUSH
 292: LD_INT 1
 294: ST_TO_ADDR
// uc_nation = 1 ;
 295: LD_ADDR_OWVAR 21
 299: PUSH
 300: LD_INT 1
 302: ST_TO_ADDR
// for i := 1 to 5 do
 303: LD_ADDR_VAR 0 2
 307: PUSH
 308: DOUBLE
 309: LD_INT 1
 311: DEC
 312: ST_TO_ADDR
 313: LD_INT 5
 315: PUSH
 316: FOR_TO
 317: IFFALSE 489
// begin vc_engine = 1 ;
 319: LD_ADDR_OWVAR 39
 323: PUSH
 324: LD_INT 1
 326: ST_TO_ADDR
// vc_control = 1 ;
 327: LD_ADDR_OWVAR 38
 331: PUSH
 332: LD_INT 1
 334: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
 335: LD_ADDR_OWVAR 40
 339: PUSH
 340: LD_INT 3
 342: PUSH
 343: LD_INT 4
 345: PUSH
 346: LD_INT 5
 348: PUSH
 349: LD_INT 12
 351: PUSH
 352: EMPTY
 353: LIST
 354: LIST
 355: LIST
 356: LIST
 357: PUSH
 358: LD_INT 1
 360: PPUSH
 361: LD_INT 4
 363: PPUSH
 364: CALL_OW 12
 368: ARRAY
 369: ST_TO_ADDR
// vc_chassis = 3 ;
 370: LD_ADDR_OWVAR 37
 374: PUSH
 375: LD_INT 3
 377: ST_TO_ADDR
// veh = CreateVehicle ;
 378: LD_ADDR_VAR 0 3
 382: PUSH
 383: CALL_OW 45
 387: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 388: LD_VAR 0 3
 392: PPUSH
 393: LD_INT 1
 395: PPUSH
 396: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 400: LD_VAR 0 3
 404: PPUSH
 405: LD_INT 2
 407: PPUSH
 408: LD_INT 0
 410: PPUSH
 411: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
 415: LD_ADDR_EXP 15
 419: PUSH
 420: LD_EXP 15
 424: PUSH
 425: LD_VAR 0 3
 429: ADD
 430: ST_TO_ADDR
// if vc_weapon = 12 then
 431: LD_OWVAR 40
 435: PUSH
 436: LD_INT 12
 438: EQUAL
 439: IFFALSE 487
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , Rand ( 1 , 10 ) * 10 ) ;
 441: LD_VAR 0 3
 445: PPUSH
 446: LD_INT 1
 448: PUSH
 449: LD_INT 3
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: LD_INT 1
 458: PPUSH
 459: LD_INT 2
 461: PPUSH
 462: CALL_OW 12
 466: ARRAY
 467: PPUSH
 468: LD_INT 1
 470: PPUSH
 471: LD_INT 10
 473: PPUSH
 474: CALL_OW 12
 478: PUSH
 479: LD_INT 10
 481: MUL
 482: PPUSH
 483: CALL_OW 291
// end ;
 487: GO 316
 489: POP
 490: POP
// end ;
 491: LD_VAR 0 1
 495: RET
// export function PrepareCathyTeam ; begin
 496: LD_INT 0
 498: PPUSH
// uc_side = 4 ;
 499: LD_ADDR_OWVAR 20
 503: PUSH
 504: LD_INT 4
 506: ST_TO_ADDR
// uc_nation = 1 ;
 507: LD_ADDR_OWVAR 21
 511: PUSH
 512: LD_INT 1
 514: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
 515: LD_ADDR_EXP 6
 519: PUSH
 520: LD_STRING Simms
 522: PPUSH
 523: LD_INT 0
 525: PPUSH
 526: CALL 3706 0 2
 530: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 531: LD_ADDR_EXP 7
 535: PUSH
 536: LD_STRING Denis
 538: PPUSH
 539: LD_INT 0
 541: PPUSH
 542: CALL 3706 0 2
 546: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
 547: LD_ADDR_EXP 8
 551: PUSH
 552: LD_STRING Joan
 554: PPUSH
 555: LD_INT 0
 557: PPUSH
 558: CALL 3706 0 2
 562: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , false ) ;
 563: LD_ADDR_EXP 9
 567: PUSH
 568: LD_STRING Khatam
 570: PPUSH
 571: LD_INT 0
 573: PPUSH
 574: CALL 3706 0 2
 578: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 579: LD_ADDR_EXP 10
 583: PUSH
 584: LD_STRING Gladstone
 586: PPUSH
 587: LD_INT 0
 589: PPUSH
 590: CALL 3706 0 2
 594: ST_TO_ADDR
// Gladstone = PrepareUnit ( DeltaDoctor , false ) ;
 595: LD_ADDR_EXP 10
 599: PUSH
 600: LD_STRING DeltaDoctor
 602: PPUSH
 603: LD_INT 0
 605: PPUSH
 606: CALL 3706 0 2
 610: ST_TO_ADDR
// hc_class := 2 ;
 611: LD_ADDR_OWVAR 28
 615: PUSH
 616: LD_INT 2
 618: ST_TO_ADDR
// hc_sex := sex_male ;
 619: LD_ADDR_OWVAR 27
 623: PUSH
 624: LD_INT 1
 626: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 627: LD_ADDR_OWVAR 33
 631: PUSH
 632: LD_STRING SecondCharsGal
 634: ST_TO_ADDR
// hc_face_number := 60 ;
 635: LD_ADDR_OWVAR 34
 639: PUSH
 640: LD_INT 60
 642: ST_TO_ADDR
// hc_name := Steve Holland ;
 643: LD_ADDR_OWVAR 26
 647: PUSH
 648: LD_STRING Steve Holland
 650: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 651: LD_ADDR_OWVAR 31
 655: PUSH
 656: LD_INT 1
 658: PUSH
 659: LD_INT 7
 661: PUSH
 662: LD_INT 1
 664: PUSH
 665: LD_INT 0
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: LIST
 673: ST_TO_ADDR
// Steve = CreateHuman ;
 674: LD_ADDR_EXP 11
 678: PUSH
 679: CALL_OW 44
 683: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
 684: LD_EXP 6
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 0
 694: PPUSH
 695: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
 699: LD_EXP 7
 703: PPUSH
 704: LD_INT 1
 706: PPUSH
 707: LD_INT 0
 709: PPUSH
 710: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
 714: LD_EXP 8
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
 729: LD_EXP 9
 733: PPUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
 744: LD_EXP 10
 748: PPUSH
 749: LD_INT 1
 751: PPUSH
 752: LD_INT 0
 754: PPUSH
 755: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
 759: LD_EXP 12
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: LD_INT 0
 769: PPUSH
 770: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
 774: LD_EXP 11
 778: PPUSH
 779: LD_INT 1
 781: PPUSH
 782: LD_INT 0
 784: PPUSH
 785: CALL_OW 49
// SetClass ( [ Khatam , Denis ] , 4 ) ;
 789: LD_EXP 9
 793: PUSH
 794: LD_EXP 7
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: LD_INT 4
 805: PPUSH
 806: CALL_OW 336
// AddComBuild ( Steve , b_depot , 101 , 30 , 2 ) ;
 810: LD_EXP 11
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: LD_INT 101
 820: PPUSH
 821: LD_INT 30
 823: PPUSH
 824: LD_INT 2
 826: PPUSH
 827: CALL_OW 205
// uc_side = 1 ;
 831: LD_ADDR_OWVAR 20
 835: PUSH
 836: LD_INT 1
 838: ST_TO_ADDR
// hc_class := 1 ;
 839: LD_ADDR_OWVAR 28
 843: PUSH
 844: LD_INT 1
 846: ST_TO_ADDR
// hc_sex := sex_female ;
 847: LD_ADDR_OWVAR 27
 851: PUSH
 852: LD_INT 2
 854: ST_TO_ADDR
// hc_gallery :=  ;
 855: LD_ADDR_OWVAR 33
 859: PUSH
 860: LD_STRING 
 862: ST_TO_ADDR
// hc_name :=  ;
 863: LD_ADDR_OWVAR 26
 867: PUSH
 868: LD_STRING 
 870: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 871: LD_ADDR_OWVAR 31
 875: PUSH
 876: LD_INT 1
 878: PUSH
 879: LD_INT 7
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: LD_INT 0
 887: PUSH
 888: EMPTY
 889: LIST
 890: LIST
 891: LIST
 892: LIST
 893: ST_TO_ADDR
// AmScout = CreateHuman ;
 894: LD_ADDR_EXP 13
 898: PUSH
 899: CALL_OW 44
 903: ST_TO_ADDR
// end ; end_of_file
 904: LD_VAR 0 1
 908: RET
// export function PrepareRussians ; var i , un ; begin
 909: LD_INT 0
 911: PPUSH
 912: PPUSH
 913: PPUSH
// for i = 1 to 14 do
 914: LD_ADDR_VAR 0 2
 918: PUSH
 919: DOUBLE
 920: LD_INT 1
 922: DEC
 923: ST_TO_ADDR
 924: LD_INT 14
 926: PUSH
 927: FOR_TO
 928: IFFALSE 1014
// begin uc_side = 3 ;
 930: LD_ADDR_OWVAR 20
 934: PUSH
 935: LD_INT 3
 937: ST_TO_ADDR
// uc_nation = 3 ;
 938: LD_ADDR_OWVAR 21
 942: PUSH
 943: LD_INT 3
 945: ST_TO_ADDR
// hc_gallery =  ;
 946: LD_ADDR_OWVAR 33
 950: PUSH
 951: LD_STRING 
 953: ST_TO_ADDR
// hc_name =  ;
 954: LD_ADDR_OWVAR 26
 958: PUSH
 959: LD_STRING 
 961: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
 962: LD_INT 0
 964: PPUSH
 965: LD_INT 1
 967: PPUSH
 968: LD_EXP 23
 972: PPUSH
 973: LD_EXP 24
 977: PPUSH
 978: CALL_OW 12
 982: PPUSH
 983: CALL_OW 380
// un = CreateHuman ;
 987: LD_ADDR_VAR 0 3
 991: PUSH
 992: CALL_OW 44
 996: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
 997: LD_VAR 0 3
1001: PPUSH
1002: LD_INT 3
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// end ;
1012: GO 927
1014: POP
1015: POP
// for i = 1 to 6 do
1016: LD_ADDR_VAR 0 2
1020: PUSH
1021: DOUBLE
1022: LD_INT 1
1024: DEC
1025: ST_TO_ADDR
1026: LD_INT 6
1028: PUSH
1029: FOR_TO
1030: IFFALSE 1116
// begin uc_side = 3 ;
1032: LD_ADDR_OWVAR 20
1036: PUSH
1037: LD_INT 3
1039: ST_TO_ADDR
// uc_nation = 3 ;
1040: LD_ADDR_OWVAR 21
1044: PUSH
1045: LD_INT 3
1047: ST_TO_ADDR
// hc_gallery =  ;
1048: LD_ADDR_OWVAR 33
1052: PUSH
1053: LD_STRING 
1055: ST_TO_ADDR
// hc_name =  ;
1056: LD_ADDR_OWVAR 26
1060: PUSH
1061: LD_STRING 
1063: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 2
1069: PPUSH
1070: LD_EXP 23
1074: PPUSH
1075: LD_EXP 24
1079: PPUSH
1080: CALL_OW 12
1084: PPUSH
1085: CALL_OW 380
// un = CreateHuman ;
1089: LD_ADDR_VAR 0 3
1093: PUSH
1094: CALL_OW 44
1098: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1099: LD_VAR 0 3
1103: PPUSH
1104: LD_INT 3
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end ;
1114: GO 1029
1116: POP
1117: POP
// for i = 1 to 6 do
1118: LD_ADDR_VAR 0 2
1122: PUSH
1123: DOUBLE
1124: LD_INT 1
1126: DEC
1127: ST_TO_ADDR
1128: LD_INT 6
1130: PUSH
1131: FOR_TO
1132: IFFALSE 1218
// begin uc_side = 3 ;
1134: LD_ADDR_OWVAR 20
1138: PUSH
1139: LD_INT 3
1141: ST_TO_ADDR
// uc_nation = 3 ;
1142: LD_ADDR_OWVAR 21
1146: PUSH
1147: LD_INT 3
1149: ST_TO_ADDR
// hc_gallery =  ;
1150: LD_ADDR_OWVAR 33
1154: PUSH
1155: LD_STRING 
1157: ST_TO_ADDR
// hc_name =  ;
1158: LD_ADDR_OWVAR 26
1162: PUSH
1163: LD_STRING 
1165: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1166: LD_INT 0
1168: PPUSH
1169: LD_INT 3
1171: PPUSH
1172: LD_EXP 23
1176: PPUSH
1177: LD_EXP 24
1181: PPUSH
1182: CALL_OW 12
1186: PPUSH
1187: CALL_OW 380
// un = CreateHuman ;
1191: LD_ADDR_VAR 0 3
1195: PUSH
1196: CALL_OW 44
1200: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1201: LD_VAR 0 3
1205: PPUSH
1206: LD_INT 3
1208: PPUSH
1209: LD_INT 0
1211: PPUSH
1212: CALL_OW 49
// end ;
1216: GO 1131
1218: POP
1219: POP
// for i = 1 to 4 do
1220: LD_ADDR_VAR 0 2
1224: PUSH
1225: DOUBLE
1226: LD_INT 1
1228: DEC
1229: ST_TO_ADDR
1230: LD_INT 4
1232: PUSH
1233: FOR_TO
1234: IFFALSE 1320
// begin uc_side = 3 ;
1236: LD_ADDR_OWVAR 20
1240: PUSH
1241: LD_INT 3
1243: ST_TO_ADDR
// uc_nation = 3 ;
1244: LD_ADDR_OWVAR 21
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// hc_gallery =  ;
1252: LD_ADDR_OWVAR 33
1256: PUSH
1257: LD_STRING 
1259: ST_TO_ADDR
// hc_name =  ;
1260: LD_ADDR_OWVAR 26
1264: PUSH
1265: LD_STRING 
1267: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1268: LD_INT 0
1270: PPUSH
1271: LD_INT 4
1273: PPUSH
1274: LD_EXP 23
1278: PPUSH
1279: LD_EXP 24
1283: PPUSH
1284: CALL_OW 12
1288: PPUSH
1289: CALL_OW 380
// un = CreateHuman ;
1293: LD_ADDR_VAR 0 3
1297: PUSH
1298: CALL_OW 44
1302: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1303: LD_VAR 0 3
1307: PPUSH
1308: LD_INT 3
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// end ;
1318: GO 1233
1320: POP
1321: POP
// end ; end_of_file
1322: LD_VAR 0 1
1326: RET
// export function PrepareArabianCommander ; begin
1327: LD_INT 0
1329: PPUSH
// uc_side = 2 ;
1330: LD_ADDR_OWVAR 20
1334: PUSH
1335: LD_INT 2
1337: ST_TO_ADDR
// uc_nation = 2 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 2
1345: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
1346: LD_ADDR_EXP 14
1350: PUSH
1351: LD_STRING Dietrich
1353: PPUSH
1354: CALL_OW 25
1358: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
1359: LD_EXP 14
1363: PPUSH
1364: LD_INT 4
1366: PPUSH
1367: LD_INT 0
1369: PPUSH
1370: CALL_OW 49
// end ;
1374: LD_VAR 0 1
1378: RET
// export function PrepareArabian ; var i , un , veh ; begin
1379: LD_INT 0
1381: PPUSH
1382: PPUSH
1383: PPUSH
1384: PPUSH
// for i = 1 to 3 do
1385: LD_ADDR_VAR 0 2
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_INT 3
1397: PUSH
1398: FOR_TO
1399: IFFALSE 1485
// begin uc_side = 2 ;
1401: LD_ADDR_OWVAR 20
1405: PUSH
1406: LD_INT 2
1408: ST_TO_ADDR
// uc_nation = 2 ;
1409: LD_ADDR_OWVAR 21
1413: PUSH
1414: LD_INT 2
1416: ST_TO_ADDR
// hc_gallery =  ;
1417: LD_ADDR_OWVAR 33
1421: PUSH
1422: LD_STRING 
1424: ST_TO_ADDR
// hc_name =  ;
1425: LD_ADDR_OWVAR 26
1429: PUSH
1430: LD_STRING 
1432: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1433: LD_INT 0
1435: PPUSH
1436: LD_INT 1
1438: PPUSH
1439: LD_EXP 23
1443: PPUSH
1444: LD_EXP 24
1448: PPUSH
1449: CALL_OW 12
1453: PPUSH
1454: CALL_OW 380
// un = CreateHuman ;
1458: LD_ADDR_VAR 0 3
1462: PUSH
1463: CALL_OW 44
1467: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1468: LD_VAR 0 3
1472: PPUSH
1473: LD_INT 4
1475: PPUSH
1476: LD_INT 0
1478: PPUSH
1479: CALL_OW 49
// end ;
1483: GO 1398
1485: POP
1486: POP
// for i = 1 to 6 do
1487: LD_ADDR_VAR 0 2
1491: PUSH
1492: DOUBLE
1493: LD_INT 1
1495: DEC
1496: ST_TO_ADDR
1497: LD_INT 6
1499: PUSH
1500: FOR_TO
1501: IFFALSE 1587
// begin uc_side = 2 ;
1503: LD_ADDR_OWVAR 20
1507: PUSH
1508: LD_INT 2
1510: ST_TO_ADDR
// uc_nation = 2 ;
1511: LD_ADDR_OWVAR 21
1515: PUSH
1516: LD_INT 2
1518: ST_TO_ADDR
// hc_gallery =  ;
1519: LD_ADDR_OWVAR 33
1523: PUSH
1524: LD_STRING 
1526: ST_TO_ADDR
// hc_name =  ;
1527: LD_ADDR_OWVAR 26
1531: PUSH
1532: LD_STRING 
1534: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1535: LD_INT 0
1537: PPUSH
1538: LD_INT 2
1540: PPUSH
1541: LD_EXP 23
1545: PPUSH
1546: LD_EXP 24
1550: PPUSH
1551: CALL_OW 12
1555: PPUSH
1556: CALL_OW 380
// un = CreateHuman ;
1560: LD_ADDR_VAR 0 3
1564: PUSH
1565: CALL_OW 44
1569: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1570: LD_VAR 0 3
1574: PPUSH
1575: LD_INT 4
1577: PPUSH
1578: LD_INT 0
1580: PPUSH
1581: CALL_OW 49
// end ;
1585: GO 1500
1587: POP
1588: POP
// for i = 1 to 6 do
1589: LD_ADDR_VAR 0 2
1593: PUSH
1594: DOUBLE
1595: LD_INT 1
1597: DEC
1598: ST_TO_ADDR
1599: LD_INT 6
1601: PUSH
1602: FOR_TO
1603: IFFALSE 1689
// begin uc_side = 2 ;
1605: LD_ADDR_OWVAR 20
1609: PUSH
1610: LD_INT 2
1612: ST_TO_ADDR
// uc_nation = 2 ;
1613: LD_ADDR_OWVAR 21
1617: PUSH
1618: LD_INT 2
1620: ST_TO_ADDR
// hc_gallery =  ;
1621: LD_ADDR_OWVAR 33
1625: PUSH
1626: LD_STRING 
1628: ST_TO_ADDR
// hc_name =  ;
1629: LD_ADDR_OWVAR 26
1633: PUSH
1634: LD_STRING 
1636: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1637: LD_INT 0
1639: PPUSH
1640: LD_INT 3
1642: PPUSH
1643: LD_EXP 23
1647: PPUSH
1648: LD_EXP 24
1652: PPUSH
1653: CALL_OW 12
1657: PPUSH
1658: CALL_OW 380
// un = CreateHuman ;
1662: LD_ADDR_VAR 0 3
1666: PUSH
1667: CALL_OW 44
1671: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1672: LD_VAR 0 3
1676: PPUSH
1677: LD_INT 4
1679: PPUSH
1680: LD_INT 0
1682: PPUSH
1683: CALL_OW 49
// end ;
1687: GO 1602
1689: POP
1690: POP
// for i = 1 to 4 do
1691: LD_ADDR_VAR 0 2
1695: PUSH
1696: DOUBLE
1697: LD_INT 1
1699: DEC
1700: ST_TO_ADDR
1701: LD_INT 4
1703: PUSH
1704: FOR_TO
1705: IFFALSE 1791
// begin uc_side = 2 ;
1707: LD_ADDR_OWVAR 20
1711: PUSH
1712: LD_INT 2
1714: ST_TO_ADDR
// uc_nation = 2 ;
1715: LD_ADDR_OWVAR 21
1719: PUSH
1720: LD_INT 2
1722: ST_TO_ADDR
// hc_gallery =  ;
1723: LD_ADDR_OWVAR 33
1727: PUSH
1728: LD_STRING 
1730: ST_TO_ADDR
// hc_name =  ;
1731: LD_ADDR_OWVAR 26
1735: PUSH
1736: LD_STRING 
1738: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1739: LD_INT 0
1741: PPUSH
1742: LD_INT 4
1744: PPUSH
1745: LD_EXP 23
1749: PPUSH
1750: LD_EXP 24
1754: PPUSH
1755: CALL_OW 12
1759: PPUSH
1760: CALL_OW 380
// un = CreateHuman ;
1764: LD_ADDR_VAR 0 3
1768: PUSH
1769: CALL_OW 44
1773: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
1774: LD_VAR 0 3
1778: PPUSH
1779: LD_INT 4
1781: PPUSH
1782: LD_INT 0
1784: PPUSH
1785: CALL_OW 49
// end ;
1789: GO 1704
1791: POP
1792: POP
// for i = 1 to 2 do
1793: LD_ADDR_VAR 0 2
1797: PUSH
1798: DOUBLE
1799: LD_INT 1
1801: DEC
1802: ST_TO_ADDR
1803: LD_INT 2
1805: PUSH
1806: FOR_TO
1807: IFFALSE 1937
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
1809: LD_ADDR_VAR 0 4
1813: PUSH
1814: LD_INT 22
1816: PUSH
1817: LD_INT 2
1819: PUSH
1820: EMPTY
1821: LIST
1822: LIST
1823: PUSH
1824: LD_INT 21
1826: PUSH
1827: LD_INT 2
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: PUSH
1834: LD_INT 58
1836: PUSH
1837: EMPTY
1838: LIST
1839: PUSH
1840: EMPTY
1841: LIST
1842: LIST
1843: LIST
1844: PPUSH
1845: CALL_OW 69
1849: ST_TO_ADDR
// uc_side = 2 ;
1850: LD_ADDR_OWVAR 20
1854: PUSH
1855: LD_INT 2
1857: ST_TO_ADDR
// uc_nation = 2 ;
1858: LD_ADDR_OWVAR 21
1862: PUSH
1863: LD_INT 2
1865: ST_TO_ADDR
// hc_gallery =  ;
1866: LD_ADDR_OWVAR 33
1870: PUSH
1871: LD_STRING 
1873: ST_TO_ADDR
// hc_name =  ;
1874: LD_ADDR_OWVAR 26
1878: PUSH
1879: LD_STRING 
1881: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1882: LD_INT 0
1884: PPUSH
1885: LD_INT 3
1887: PPUSH
1888: LD_EXP 23
1892: PPUSH
1893: LD_EXP 24
1897: PPUSH
1898: CALL_OW 12
1902: PPUSH
1903: CALL_OW 380
// un = CreateHuman ;
1907: LD_ADDR_VAR 0 3
1911: PUSH
1912: CALL_OW 44
1916: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
1917: LD_VAR 0 3
1921: PPUSH
1922: LD_VAR 0 4
1926: PUSH
1927: LD_INT 1
1929: ARRAY
1930: PPUSH
1931: CALL_OW 52
// end ;
1935: GO 1806
1937: POP
1938: POP
// end ; end_of_file
1939: LD_VAR 0 1
1943: RET
// every 1 do
1944: GO 1946
1946: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
1947: LD_EXP 1
1951: PPUSH
1952: CALL_OW 87
// DialogueOn ;
1956: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
1960: LD_EXP 2
1964: PPUSH
1965: LD_STRING D2-Gary-1
1967: PPUSH
1968: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1972: LD_EXP 1
1976: PPUSH
1977: LD_STRING D2-JMM-1
1979: PPUSH
1980: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
1984: LD_EXP 2
1988: PPUSH
1989: LD_STRING D2-Gary-2
1991: PPUSH
1992: CALL_OW 88
// DialogueOff ;
1996: CALL_OW 7
// ChangeMissionObjectives ( M1 ) ;
2000: LD_STRING M1
2002: PPUSH
2003: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
2007: LD_INT 38
2009: PPUSH
2010: LD_INT 1
2012: PPUSH
2013: LD_INT 100
2015: PPUSH
2016: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
2020: LD_INT 47
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_INT 50
2028: PPUSH
2029: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
2033: LD_INT 47
2035: PPUSH
2036: LD_INT 3
2038: PPUSH
2039: LD_INT 50
2041: PPUSH
2042: CALL_OW 291
// end ;
2046: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 12 do
2047: LD_EXP 1
2051: PPUSH
2052: LD_EXP 6
2056: PPUSH
2057: CALL_OW 296
2061: PUSH
2062: LD_INT 12
2064: LESS
2065: IFFALSE 2387
2067: GO 2069
2069: DISABLE
// begin InGameOn ;
2070: CALL_OW 8
// ComExitVehicle ( JMM ) ;
2074: LD_EXP 1
2078: PPUSH
2079: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
2083: LD_EXP 1
2087: PPUSH
2088: CALL_OW 87
// wait ( 0 0$1 ) ;
2092: LD_INT 35
2094: PPUSH
2095: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2099: LD_EXP 6
2103: PUSH
2104: LD_EXP 8
2108: PUSH
2109: LD_EXP 7
2113: PUSH
2114: LD_EXP 9
2118: PUSH
2119: EMPTY
2120: LIST
2121: LIST
2122: LIST
2123: LIST
2124: PPUSH
2125: LD_EXP 1
2129: PPUSH
2130: CALL_OW 112
// ComTurnUnit ( JMM , Simms ) ;
2134: LD_EXP 1
2138: PPUSH
2139: LD_EXP 6
2143: PPUSH
2144: CALL_OW 119
// wait ( 0 0$2 ) ;
2148: LD_INT 70
2150: PPUSH
2151: CALL_OW 67
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2155: LD_EXP 6
2159: PUSH
2160: LD_EXP 8
2164: PUSH
2165: LD_EXP 7
2169: PUSH
2170: LD_EXP 9
2174: PUSH
2175: EMPTY
2176: LIST
2177: LIST
2178: LIST
2179: LIST
2180: PPUSH
2181: LD_EXP 1
2185: PPUSH
2186: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
2190: LD_EXP 1
2194: PUSH
2195: LD_EXP 6
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PPUSH
2204: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
2208: LD_EXP 6
2212: PPUSH
2213: LD_STRING D2a-Sim-1
2215: PPUSH
2216: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
2220: LD_EXP 1
2224: PPUSH
2225: LD_STRING D2a-JMM-1
2227: PPUSH
2228: CALL_OW 88
// ComTurnUnit ( JMM , Joan ) ;
2232: LD_EXP 1
2236: PPUSH
2237: LD_EXP 8
2241: PPUSH
2242: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
2246: LD_EXP 8
2250: PPUSH
2251: LD_STRING D2b-Joan-1
2253: PPUSH
2254: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
2258: LD_EXP 1
2262: PPUSH
2263: LD_STRING D2b-JMM-1
2265: PPUSH
2266: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
2270: LD_EXP 8
2274: PPUSH
2275: LD_STRING D2b-Joan-2
2277: PPUSH
2278: CALL_OW 88
// ComTurnUnit ( JMM , Denis ) ;
2282: LD_EXP 1
2286: PPUSH
2287: LD_EXP 7
2291: PPUSH
2292: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
2296: LD_EXP 7
2300: PPUSH
2301: LD_STRING D2c-Den-1
2303: PPUSH
2304: CALL_OW 88
// ComTurnUnit ( JMM , Khatam ) ;
2308: LD_EXP 1
2312: PPUSH
2313: LD_EXP 9
2317: PPUSH
2318: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
2322: LD_EXP 1
2326: PPUSH
2327: LD_STRING D2c-JMM-1
2329: PPUSH
2330: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
2334: LD_EXP 9
2338: PPUSH
2339: LD_STRING D2c-Khat-1
2341: PPUSH
2342: CALL_OW 88
// InGameOff ;
2346: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
2350: LD_INT 22
2352: PUSH
2353: LD_INT 4
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PPUSH
2360: CALL_OW 69
2364: PPUSH
2365: LD_INT 1
2367: PPUSH
2368: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
2372: LD_STRING M1a
2374: PPUSH
2375: CALL_OW 337
// joinEpsilon = 1 ;
2379: LD_ADDR_EXP 16
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// end ;
2387: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 do
2388: LD_INT 22
2390: PUSH
2391: LD_INT 1
2393: PUSH
2394: EMPTY
2395: LIST
2396: LIST
2397: PUSH
2398: LD_INT 2
2400: PUSH
2401: LD_INT 30
2403: PUSH
2404: LD_INT 7
2406: PUSH
2407: EMPTY
2408: LIST
2409: LIST
2410: PUSH
2411: LD_INT 30
2413: PUSH
2414: LD_INT 8
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: PUSH
2421: LD_INT 1
2423: PUSH
2424: LD_INT 30
2426: PUSH
2427: LD_INT 11
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 1
2436: PUSH
2437: LD_INT 2
2439: PUSH
2440: LD_INT 30
2442: PUSH
2443: LD_INT 26
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: PUSH
2450: LD_INT 30
2452: PUSH
2453: LD_INT 27
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: PUSH
2460: LD_INT 30
2462: PUSH
2463: LD_INT 28
2465: PUSH
2466: EMPTY
2467: LIST
2468: LIST
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: PUSH
2476: EMPTY
2477: LIST
2478: LIST
2479: PUSH
2480: EMPTY
2481: LIST
2482: LIST
2483: LIST
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: PPUSH
2495: CALL_OW 69
2499: PUSH
2500: LD_INT 0
2502: GREATER
2503: PUSH
2504: LD_INT 22
2506: PUSH
2507: LD_INT 1
2509: PUSH
2510: EMPTY
2511: LIST
2512: LIST
2513: PUSH
2514: LD_INT 2
2516: PUSH
2517: LD_INT 30
2519: PUSH
2520: LD_INT 26
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: PUSH
2527: LD_INT 30
2529: PUSH
2530: LD_INT 27
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: PUSH
2537: LD_INT 30
2539: PUSH
2540: LD_INT 28
2542: PUSH
2543: EMPTY
2544: LIST
2545: LIST
2546: PUSH
2547: EMPTY
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PPUSH
2557: CALL_OW 69
2561: PUSH
2562: LD_INT 0
2564: GREATER
2565: AND
2566: IFFALSE 3118
2568: GO 2570
2570: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-1 , D3-Sci1-1 ) ;
2571: LD_INT 22
2573: PUSH
2574: LD_INT 1
2576: PUSH
2577: EMPTY
2578: LIST
2579: LIST
2580: PUSH
2581: LD_INT 25
2583: PUSH
2584: LD_INT 4
2586: PUSH
2587: EMPTY
2588: LIST
2589: LIST
2590: PUSH
2591: LD_INT 26
2593: PUSH
2594: LD_INT 1
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: PUSH
2601: EMPTY
2602: LIST
2603: LIST
2604: LIST
2605: PPUSH
2606: CALL_OW 69
2610: PPUSH
2611: LD_STRING D3-Sci1-1
2613: PPUSH
2614: LD_STRING D3-Sci1-1
2616: PPUSH
2617: CALL 3763 0 3
// Say ( Gary , D3-Gary-1 ) ;
2621: LD_EXP 2
2625: PPUSH
2626: LD_STRING D3-Gary-1
2628: PPUSH
2629: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-2 , D3-Sci1-2 ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 1
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 25
2645: PUSH
2646: LD_INT 4
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: LD_INT 26
2655: PUSH
2656: LD_INT 1
2658: PUSH
2659: EMPTY
2660: LIST
2661: LIST
2662: PUSH
2663: EMPTY
2664: LIST
2665: LIST
2666: LIST
2667: PPUSH
2668: CALL_OW 69
2672: PPUSH
2673: LD_STRING D3-Sci1-2
2675: PPUSH
2676: LD_STRING D3-Sci1-2
2678: PPUSH
2679: CALL 3763 0 3
// Say ( JMM , D3-JMM-2 ) ;
2683: LD_EXP 1
2687: PPUSH
2688: LD_STRING D3-JMM-2
2690: PPUSH
2691: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-3 , D3-Sci1-3 ) ;
2695: LD_INT 22
2697: PUSH
2698: LD_INT 1
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: LD_INT 25
2707: PUSH
2708: LD_INT 4
2710: PUSH
2711: EMPTY
2712: LIST
2713: LIST
2714: PUSH
2715: LD_INT 26
2717: PUSH
2718: LD_INT 1
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: PPUSH
2730: CALL_OW 69
2734: PPUSH
2735: LD_STRING D3-Sci1-3
2737: PPUSH
2738: LD_STRING D3-Sci1-3
2740: PPUSH
2741: CALL 3763 0 3
// Say ( JMM , D3-JMM-3 ) ;
2745: LD_EXP 1
2749: PPUSH
2750: LD_STRING D3-JMM-3
2752: PPUSH
2753: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-4 , D3-Sci1-4 ) ;
2757: LD_INT 22
2759: PUSH
2760: LD_INT 1
2762: PUSH
2763: EMPTY
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 25
2769: PUSH
2770: LD_INT 4
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 26
2779: PUSH
2780: LD_INT 1
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: LIST
2791: PPUSH
2792: CALL_OW 69
2796: PPUSH
2797: LD_STRING D3-Sci1-4
2799: PPUSH
2800: LD_STRING D3-Sci1-4
2802: PPUSH
2803: CALL 3763 0 3
// SetTech ( 12 , 1 , state_enabled ) ;
2807: LD_INT 12
2809: PPUSH
2810: LD_INT 1
2812: PPUSH
2813: LD_INT 1
2815: PPUSH
2816: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
2820: LD_INT 32
2822: PPUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_INT 1
2828: PPUSH
2829: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
2833: LD_INT 12
2835: PPUSH
2836: LD_INT 1
2838: PPUSH
2839: LD_INT 1
2841: PPUSH
2842: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
2846: LD_STRING M2
2848: PPUSH
2849: CALL_OW 337
// wait ( 3 3$0 ) ;
2853: LD_INT 6300
2855: PPUSH
2856: CALL_OW 67
// if IsOK ( Simms ) then
2860: LD_EXP 6
2864: PPUSH
2865: CALL_OW 302
2869: IFFALSE 3011
// begin DialogueOn ;
2871: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
2875: LD_EXP 6
2879: PPUSH
2880: LD_STRING D3a-Sim-1
2882: PPUSH
2883: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
2887: LD_EXP 7
2891: PPUSH
2892: LD_STRING D3a-Sci1-1
2894: PPUSH
2895: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
2899: LD_EXP 6
2903: PPUSH
2904: LD_STRING D3a-Sim-2
2906: PPUSH
2907: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
2911: LD_EXP 7
2915: PPUSH
2916: LD_STRING D3a-Sci1-2
2918: PPUSH
2919: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
2923: LD_EXP 6
2927: PPUSH
2928: LD_STRING D3a-Sim-3
2930: PPUSH
2931: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
2935: LD_EXP 7
2939: PPUSH
2940: LD_STRING D3a-Sci1-3
2942: PPUSH
2943: CALL_OW 88
// Say ( Simms , D3a-Sim-4 ) ;
2947: LD_EXP 6
2951: PPUSH
2952: LD_STRING D3a-Sim-4
2954: PPUSH
2955: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
2959: LD_EXP 7
2963: PPUSH
2964: LD_STRING D3a-Sci1-4
2966: PPUSH
2967: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
2971: LD_EXP 6
2975: PPUSH
2976: LD_STRING D3a-Sim-5
2978: PPUSH
2979: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
2983: LD_EXP 7
2987: PPUSH
2988: LD_STRING D3a-Sci1-5
2990: PPUSH
2991: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
2995: LD_EXP 6
2999: PPUSH
3000: LD_STRING D3a-Sim-6
3002: PPUSH
3003: CALL_OW 88
// DialogueOff ;
3007: CALL_OW 7
// end ; wait ( 2 2$0 ) ;
3011: LD_INT 4200
3013: PPUSH
3014: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
3018: LD_INT 22
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: LD_INT 25
3030: PUSH
3031: LD_INT 4
3033: PUSH
3034: EMPTY
3035: LIST
3036: LIST
3037: PUSH
3038: LD_INT 26
3040: PUSH
3041: LD_INT 1
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 69
3057: PPUSH
3058: LD_STRING D5-Ar1-1
3060: PPUSH
3061: LD_STRING D5-Ar1-1
3063: PPUSH
3064: CALL 3763 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
3068: LD_INT 22
3070: PUSH
3071: LD_INT 2
3073: PUSH
3074: EMPTY
3075: LIST
3076: LIST
3077: PUSH
3078: LD_INT 25
3080: PUSH
3081: LD_INT 4
3083: PUSH
3084: EMPTY
3085: LIST
3086: LIST
3087: PUSH
3088: LD_INT 26
3090: PUSH
3091: LD_INT 1
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: PUSH
3098: EMPTY
3099: LIST
3100: LIST
3101: LIST
3102: PPUSH
3103: CALL_OW 69
3107: PPUSH
3108: LD_STRING D5-Ar1-2
3110: PPUSH
3111: LD_STRING D5-Ar1-2
3113: PPUSH
3114: CALL 3763 0 3
// end ;
3118: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
3119: LD_EXP 16
3123: PUSH
3124: LD_INT 1
3126: EQUAL
3127: IFFALSE 3447
3129: GO 3131
3131: DISABLE
3132: LD_INT 0
3134: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
3135: LD_EXP 13
3139: PPUSH
3140: LD_STRING D4-FSol1-1
3142: PPUSH
3143: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
3147: LD_STRING M3
3149: PPUSH
3150: CALL_OW 337
// PrepareRussians ;
3154: CALL 909 0 0
// rnd = Rand ( 1 , 100 ) ;
3158: LD_ADDR_VAR 0 1
3162: PUSH
3163: LD_INT 1
3165: PPUSH
3166: LD_INT 100
3168: PPUSH
3169: CALL_OW 12
3173: ST_TO_ADDR
// if difficulty = 1 then
3174: LD_OWVAR 67
3178: PUSH
3179: LD_INT 1
3181: EQUAL
3182: IFFALSE 3265
// begin if rnd > 0 and rnd < 51 then
3184: LD_VAR 0 1
3188: PUSH
3189: LD_INT 0
3191: GREATER
3192: PUSH
3193: LD_VAR 0 1
3197: PUSH
3198: LD_INT 51
3200: LESS
3201: AND
3202: IFFALSE 3211
// BuildRussianBase ( 2 ) ;
3204: LD_INT 2
3206: PPUSH
3207: CALL 4005 0 1
// if rnd > 50 and rnd < 81 then
3211: LD_VAR 0 1
3215: PUSH
3216: LD_INT 50
3218: GREATER
3219: PUSH
3220: LD_VAR 0 1
3224: PUSH
3225: LD_INT 81
3227: LESS
3228: AND
3229: IFFALSE 3238
// BuildRussianBase ( 1 ) ;
3231: LD_INT 1
3233: PPUSH
3234: CALL 4005 0 1
// if rnd > 80 and rnd < 101 then
3238: LD_VAR 0 1
3242: PUSH
3243: LD_INT 80
3245: GREATER
3246: PUSH
3247: LD_VAR 0 1
3251: PUSH
3252: LD_INT 101
3254: LESS
3255: AND
3256: IFFALSE 3265
// BuildRussianBase ( 3 ) ;
3258: LD_INT 3
3260: PPUSH
3261: CALL 4005 0 1
// end ; if difficulty = 2 then
3265: LD_OWVAR 67
3269: PUSH
3270: LD_INT 2
3272: EQUAL
3273: IFFALSE 3356
// begin if rnd > 0 and rnd < 61 then
3275: LD_VAR 0 1
3279: PUSH
3280: LD_INT 0
3282: GREATER
3283: PUSH
3284: LD_VAR 0 1
3288: PUSH
3289: LD_INT 61
3291: LESS
3292: AND
3293: IFFALSE 3302
// BuildRussianBase ( 2 ) ;
3295: LD_INT 2
3297: PPUSH
3298: CALL 4005 0 1
// if rnd > 60 and rnd < 81 then
3302: LD_VAR 0 1
3306: PUSH
3307: LD_INT 60
3309: GREATER
3310: PUSH
3311: LD_VAR 0 1
3315: PUSH
3316: LD_INT 81
3318: LESS
3319: AND
3320: IFFALSE 3329
// BuildRussianBase ( 1 ) ;
3322: LD_INT 1
3324: PPUSH
3325: CALL 4005 0 1
// if rnd > 80 and rnd < 101 then
3329: LD_VAR 0 1
3333: PUSH
3334: LD_INT 80
3336: GREATER
3337: PUSH
3338: LD_VAR 0 1
3342: PUSH
3343: LD_INT 101
3345: LESS
3346: AND
3347: IFFALSE 3356
// BuildRussianBase ( 3 ) ;
3349: LD_INT 3
3351: PPUSH
3352: CALL 4005 0 1
// end ; if difficulty = 3 then
3356: LD_OWVAR 67
3360: PUSH
3361: LD_INT 3
3363: EQUAL
3364: IFFALSE 3447
// begin if rnd > 0 and rnd < 71 then
3366: LD_VAR 0 1
3370: PUSH
3371: LD_INT 0
3373: GREATER
3374: PUSH
3375: LD_VAR 0 1
3379: PUSH
3380: LD_INT 71
3382: LESS
3383: AND
3384: IFFALSE 3393
// BuildRussianBase ( 3 ) ;
3386: LD_INT 3
3388: PPUSH
3389: CALL 4005 0 1
// if rnd > 70 and rnd < 81 then
3393: LD_VAR 0 1
3397: PUSH
3398: LD_INT 70
3400: GREATER
3401: PUSH
3402: LD_VAR 0 1
3406: PUSH
3407: LD_INT 81
3409: LESS
3410: AND
3411: IFFALSE 3420
// BuildRussianBase ( 2 ) ;
3413: LD_INT 2
3415: PPUSH
3416: CALL 4005 0 1
// if rnd > 80 and rnd < 101 then
3420: LD_VAR 0 1
3424: PUSH
3425: LD_INT 80
3427: GREATER
3428: PUSH
3429: LD_VAR 0 1
3433: PUSH
3434: LD_INT 101
3436: LESS
3437: AND
3438: IFFALSE 3447
// BuildRussianBase ( 1 ) ;
3440: LD_INT 1
3442: PPUSH
3443: CALL 4005 0 1
// end ; end ;
3447: PPOPN 1
3449: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched do
3450: LD_INT 54
3452: PPUSH
3453: LD_INT 1
3455: PPUSH
3456: CALL_OW 321
3460: PUSH
3461: LD_INT 2
3463: EQUAL
3464: IFFALSE 3705
3466: GO 3468
3468: DISABLE
// begin DialogueOn ;
3469: CALL_OW 6
// Say ( JMM ,  D6-JMM-1 ) ;
3473: LD_EXP 1
3477: PPUSH
3478: LD_STRING  D6-JMM-1
3480: PPUSH
3481: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
3485: LD_EXP 7
3489: PPUSH
3490: LD_STRING D6-Sci1-1
3492: PPUSH
3493: CALL_OW 88
// Say ( JMM ,  D6-JMM-2 ) ;
3497: LD_EXP 1
3501: PPUSH
3502: LD_STRING  D6-JMM-2
3504: PPUSH
3505: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
3509: LD_EXP 7
3513: PPUSH
3514: LD_STRING D6-Sci1-2
3516: PPUSH
3517: CALL_OW 88
// Say ( JMM ,  D6-JMM-3 ) ;
3521: LD_EXP 1
3525: PPUSH
3526: LD_STRING  D6-JMM-3
3528: PPUSH
3529: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
3533: LD_EXP 7
3537: PPUSH
3538: LD_STRING D6-Sci1-3
3540: PPUSH
3541: CALL_OW 88
// Say ( JMM ,  D6-JMM-4 ) ;
3545: LD_EXP 1
3549: PPUSH
3550: LD_STRING  D6-JMM-4
3552: PPUSH
3553: CALL_OW 88
// DialogueOff ;
3557: CALL_OW 7
// wait ( [ 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 6 ) ] ) ;
3561: LD_INT 4200
3563: PUSH
3564: LD_INT 5250
3566: PUSH
3567: LD_INT 6300
3569: PUSH
3570: LD_INT 7350
3572: PUSH
3573: LD_INT 8400
3575: PUSH
3576: LD_INT 9450
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: LIST
3583: LIST
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 1
3589: PPUSH
3590: LD_INT 6
3592: PPUSH
3593: CALL_OW 12
3597: ARRAY
3598: PPUSH
3599: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
3603: LD_INT 22
3605: PUSH
3606: LD_INT 1
3608: PUSH
3609: EMPTY
3610: LIST
3611: LIST
3612: PUSH
3613: LD_INT 25
3615: PUSH
3616: LD_INT 1
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: LD_INT 26
3625: PUSH
3626: LD_INT 1
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: LIST
3637: PUSH
3638: LD_EXP 1
3642: PUSH
3643: EMPTY
3644: LIST
3645: DIFF
3646: PPUSH
3647: CALL_OW 69
3651: PPUSH
3652: LD_STRING D8-Sol1-1
3654: PPUSH
3655: LD_STRING D8-Sol1-1
3657: PPUSH
3658: CALL 3763 0 3
// Say ( DeltaDoctor , D8-Sci1-1 ) ;
3662: LD_EXP 12
3666: PPUSH
3667: LD_STRING D8-Sci1-1
3669: PPUSH
3670: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
3674: LD_EXP 1
3678: PPUSH
3679: LD_STRING D8-JMM-1
3681: PPUSH
3682: CALL_OW 88
// wait ( 0 0$30 ) ;
3686: LD_INT 1050
3688: PPUSH
3689: CALL_OW 67
// Say ( Gary , D8a-Gary-1 ) ;
3693: LD_EXP 2
3697: PPUSH
3698: LD_STRING D8a-Gary-1
3700: PPUSH
3701: CALL_OW 88
// end ; end_of_file
3705: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3706: LD_INT 0
3708: PPUSH
3709: PPUSH
// if exist_mode then
3710: LD_VAR 0 2
3714: IFFALSE 3733
// unit := CreateCharacter ( ident ) else
3716: LD_ADDR_VAR 0 4
3720: PUSH
3721: LD_VAR 0 1
3725: PPUSH
3726: CALL_OW 34
3730: ST_TO_ADDR
3731: GO 3748
// unit := NewCharacter ( ident ) ;
3733: LD_ADDR_VAR 0 4
3737: PUSH
3738: LD_VAR 0 1
3742: PPUSH
3743: CALL_OW 25
3747: ST_TO_ADDR
// result := unit ;
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: LD_VAR 0 4
3757: ST_TO_ADDR
// end ;
3758: LD_VAR 0 3
3762: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3763: LD_INT 0
3765: PPUSH
3766: PPUSH
3767: PPUSH
// rnd = rand ( 1 , characters ) ;
3768: LD_ADDR_VAR 0 6
3772: PUSH
3773: LD_INT 1
3775: PPUSH
3776: LD_VAR 0 1
3780: PPUSH
3781: CALL_OW 12
3785: ST_TO_ADDR
// for i = 1 to characters do
3786: LD_ADDR_VAR 0 5
3790: PUSH
3791: DOUBLE
3792: LD_INT 1
3794: DEC
3795: ST_TO_ADDR
3796: LD_VAR 0 1
3800: PUSH
3801: FOR_TO
3802: IFFALSE 3912
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3804: LD_VAR 0 5
3808: PUSH
3809: LD_VAR 0 6
3813: EQUAL
3814: PUSH
3815: LD_VAR 0 1
3819: PUSH
3820: LD_VAR 0 5
3824: ARRAY
3825: PPUSH
3826: CALL_OW 258
3830: PUSH
3831: LD_INT 1
3833: EQUAL
3834: AND
3835: IFFALSE 3857
// Say ( characters [ i ] , dialogMID ) ;
3837: LD_VAR 0 1
3841: PUSH
3842: LD_VAR 0 5
3846: ARRAY
3847: PPUSH
3848: LD_VAR 0 2
3852: PPUSH
3853: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3857: LD_VAR 0 5
3861: PUSH
3862: LD_VAR 0 6
3866: EQUAL
3867: PUSH
3868: LD_VAR 0 1
3872: PUSH
3873: LD_VAR 0 5
3877: ARRAY
3878: PPUSH
3879: CALL_OW 258
3883: PUSH
3884: LD_INT 2
3886: EQUAL
3887: AND
3888: IFFALSE 3910
// Say ( characters [ i ] , dialogFID ) ;
3890: LD_VAR 0 1
3894: PUSH
3895: LD_VAR 0 5
3899: ARRAY
3900: PPUSH
3901: LD_VAR 0 3
3905: PPUSH
3906: CALL_OW 88
// end ;
3910: GO 3801
3912: POP
3913: POP
// end ;
3914: LD_VAR 0 4
3918: RET
// export function PrepareDifficulty ; begin
3919: LD_INT 0
3921: PPUSH
// if difficulty = 1 then
3922: LD_OWVAR 67
3926: PUSH
3927: LD_INT 1
3929: EQUAL
3930: IFFALSE 3948
// begin RuSolMinLevel = 9 ;
3932: LD_ADDR_EXP 23
3936: PUSH
3937: LD_INT 9
3939: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
3940: LD_ADDR_EXP 24
3944: PUSH
3945: LD_INT 10
3947: ST_TO_ADDR
// end ; if difficulty = 2 then
3948: LD_OWVAR 67
3952: PUSH
3953: LD_INT 2
3955: EQUAL
3956: IFFALSE 3974
// begin RuSolMinLevel = 9 ;
3958: LD_ADDR_EXP 23
3962: PUSH
3963: LD_INT 9
3965: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
3966: LD_ADDR_EXP 24
3970: PUSH
3971: LD_INT 10
3973: ST_TO_ADDR
// end ; if difficulty = 3 then
3974: LD_OWVAR 67
3978: PUSH
3979: LD_INT 3
3981: EQUAL
3982: IFFALSE 4000
// begin RuSolMinLevel = 9 ;
3984: LD_ADDR_EXP 23
3988: PUSH
3989: LD_INT 9
3991: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
3992: LD_ADDR_EXP 24
3996: PUSH
3997: LD_INT 10
3999: ST_TO_ADDR
// end ; end ;
4000: LD_VAR 0 1
4004: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
4005: LD_INT 0
4007: PPUSH
4008: PPUSH
4009: PPUSH
4010: PPUSH
// if position = 1 then
4011: LD_VAR 0 1
4015: PUSH
4016: LD_INT 1
4018: EQUAL
4019: IFFALSE 4704
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
4021: LD_ADDR_VAR 0 4
4025: PUSH
4026: LD_INT 22
4028: PUSH
4029: LD_INT 3
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 25
4038: PUSH
4039: LD_INT 2
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PPUSH
4050: CALL_OW 69
4054: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_INT 0
4062: PUSH
4063: LD_INT 49
4065: PUSH
4066: LD_INT 74
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: LD_INT 4
4080: PUSH
4081: LD_INT 73
4083: PUSH
4084: LD_INT 88
4086: PUSH
4087: LD_INT 5
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 4
4098: PUSH
4099: LD_INT 56
4101: PUSH
4102: LD_INT 62
4104: PUSH
4105: LD_INT 3
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: PUSH
4114: LD_INT 29
4116: PUSH
4117: LD_INT 43
4119: PUSH
4120: LD_INT 68
4122: PUSH
4123: LD_INT 2
4125: PUSH
4126: EMPTY
4127: LIST
4128: LIST
4129: LIST
4130: LIST
4131: PUSH
4132: LD_INT 30
4134: PUSH
4135: LD_INT 43
4137: PUSH
4138: LD_INT 79
4140: PUSH
4141: LD_INT 5
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: LIST
4148: LIST
4149: PUSH
4150: LD_INT 28
4152: PUSH
4153: LD_INT 60
4155: PUSH
4156: LD_INT 75
4158: PUSH
4159: LD_INT 1
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 2
4170: PUSH
4171: LD_INT 50
4173: PUSH
4174: LD_INT 87
4176: PUSH
4177: LD_INT 1
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: LIST
4184: LIST
4185: PUSH
4186: LD_INT 28
4188: PUSH
4189: LD_INT 45
4191: PUSH
4192: LD_INT 67
4194: PUSH
4195: LD_INT 2
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 17
4206: PUSH
4207: LD_INT 47
4209: PUSH
4210: LD_INT 84
4212: PUSH
4213: LD_INT 2
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: LIST
4220: LIST
4221: PUSH
4222: LD_INT 18
4224: PUSH
4225: LD_INT 46
4227: PUSH
4228: LD_INT 87
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: LD_INT 28
4242: PUSH
4243: LD_INT 41
4245: PUSH
4246: LD_INT 64
4248: PUSH
4249: LD_INT 5
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: LIST
4256: LIST
4257: PUSH
4258: LD_INT 32
4260: PUSH
4261: LD_INT 75
4263: PUSH
4264: LD_INT 76
4266: PUSH
4267: LD_INT 5
4269: PUSH
4270: EMPTY
4271: LIST
4272: LIST
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 32
4278: PUSH
4279: LD_INT 77
4281: PUSH
4282: LD_INT 75
4284: PUSH
4285: LD_INT 5
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: PUSH
4294: LD_INT 32
4296: PUSH
4297: LD_INT 69
4299: PUSH
4300: LD_INT 68
4302: PUSH
4303: LD_INT 3
4305: PUSH
4306: EMPTY
4307: LIST
4308: LIST
4309: LIST
4310: LIST
4311: PUSH
4312: LD_INT 32
4314: PUSH
4315: LD_INT 59
4317: PUSH
4318: LD_INT 96
4320: PUSH
4321: LD_INT 5
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: LIST
4328: LIST
4329: PUSH
4330: LD_INT 32
4332: PUSH
4333: LD_INT 56
4335: PUSH
4336: LD_INT 96
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: PUSH
4348: LD_INT 32
4350: PUSH
4351: LD_INT 51
4353: PUSH
4354: LD_INT 61
4356: PUSH
4357: LD_INT 3
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: LIST
4364: LIST
4365: PUSH
4366: LD_INT 32
4368: PUSH
4369: LD_INT 42
4371: PUSH
4372: LD_INT 60
4374: PUSH
4375: LD_INT 3
4377: PUSH
4378: EMPTY
4379: LIST
4380: LIST
4381: LIST
4382: LIST
4383: PUSH
4384: LD_INT 32
4386: PUSH
4387: LD_INT 36
4389: PUSH
4390: LD_INT 58
4392: PUSH
4393: LD_INT 3
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 32
4404: PUSH
4405: LD_INT 39
4407: PUSH
4408: LD_INT 59
4410: PUSH
4411: LD_INT 3
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: LIST
4418: LIST
4419: PUSH
4420: LD_INT 32
4422: PUSH
4423: LD_INT 61
4425: PUSH
4426: LD_INT 64
4428: PUSH
4429: LD_INT 3
4431: PUSH
4432: EMPTY
4433: LIST
4434: LIST
4435: LIST
4436: LIST
4437: PUSH
4438: LD_INT 33
4440: PUSH
4441: LD_INT 63
4443: PUSH
4444: LD_INT 90
4446: PUSH
4447: LD_INT 5
4449: PUSH
4450: EMPTY
4451: LIST
4452: LIST
4453: LIST
4454: LIST
4455: PUSH
4456: LD_INT 33
4458: PUSH
4459: LD_INT 64
4461: PUSH
4462: LD_INT 88
4464: PUSH
4465: LD_INT 5
4467: PUSH
4468: EMPTY
4469: LIST
4470: LIST
4471: LIST
4472: LIST
4473: PUSH
4474: LD_INT 33
4476: PUSH
4477: LD_INT 72
4479: PUSH
4480: LD_INT 82
4482: PUSH
4483: LD_INT 5
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 6
4494: PUSH
4495: LD_INT 42
4497: PUSH
4498: LD_INT 74
4500: PUSH
4501: LD_INT 1
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PUSH
4510: LD_INT 6
4512: PUSH
4513: LD_INT 56
4515: PUSH
4516: LD_INT 77
4518: PUSH
4519: LD_INT 2
4521: PUSH
4522: EMPTY
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: PUSH
4528: LD_INT 21
4530: PUSH
4531: LD_INT 54
4533: PUSH
4534: LD_INT 91
4536: PUSH
4537: LD_INT 5
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: PUSH
4546: LD_INT 16
4548: PUSH
4549: LD_INT 50
4551: PUSH
4552: LD_INT 83
4554: PUSH
4555: LD_INT 3
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: LIST
4563: PUSH
4564: LD_INT 24
4566: PUSH
4567: LD_INT 50
4569: PUSH
4570: LD_INT 90
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: LIST
4590: LIST
4591: LIST
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: LIST
4597: LIST
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: LIST
4610: LIST
4611: LIST
4612: ST_TO_ADDR
// for i := 1 to buildingsTab do
4613: LD_ADDR_VAR 0 3
4617: PUSH
4618: DOUBLE
4619: LD_INT 1
4621: DEC
4622: ST_TO_ADDR
4623: LD_VAR 0 5
4627: PUSH
4628: FOR_TO
4629: IFFALSE 4702
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
4631: LD_VAR 0 4
4635: PPUSH
4636: LD_VAR 0 5
4640: PUSH
4641: LD_VAR 0 3
4645: ARRAY
4646: PUSH
4647: LD_INT 1
4649: ARRAY
4650: PPUSH
4651: LD_VAR 0 5
4655: PUSH
4656: LD_VAR 0 3
4660: ARRAY
4661: PUSH
4662: LD_INT 2
4664: ARRAY
4665: PPUSH
4666: LD_VAR 0 5
4670: PUSH
4671: LD_VAR 0 3
4675: ARRAY
4676: PUSH
4677: LD_INT 3
4679: ARRAY
4680: PPUSH
4681: LD_VAR 0 5
4685: PUSH
4686: LD_VAR 0 3
4690: ARRAY
4691: PUSH
4692: LD_INT 4
4694: ARRAY
4695: PPUSH
4696: CALL_OW 205
4700: GO 4628
4702: POP
4703: POP
// end ; if position = 2 then
4704: LD_VAR 0 1
4708: PUSH
4709: LD_INT 2
4711: EQUAL
4712: IFFALSE 5264
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
4714: LD_ADDR_VAR 0 4
4718: PUSH
4719: LD_INT 22
4721: PUSH
4722: LD_INT 3
4724: PUSH
4725: EMPTY
4726: LIST
4727: LIST
4728: PUSH
4729: LD_INT 25
4731: PUSH
4732: LD_INT 2
4734: PUSH
4735: EMPTY
4736: LIST
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: PPUSH
4743: CALL_OW 69
4747: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
4748: LD_ADDR_VAR 0 5
4752: PUSH
4753: LD_INT 0
4755: PUSH
4756: LD_INT 104
4758: PUSH
4759: LD_INT 110
4761: PUSH
4762: LD_INT 5
4764: PUSH
4765: EMPTY
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: PUSH
4771: LD_INT 4
4773: PUSH
4774: LD_INT 98
4776: PUSH
4777: LD_INT 90
4779: PUSH
4780: LD_INT 3
4782: PUSH
4783: EMPTY
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 29
4791: PUSH
4792: LD_INT 103
4794: PUSH
4795: LD_INT 114
4797: PUSH
4798: LD_INT 2
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: LIST
4806: PUSH
4807: LD_INT 30
4809: PUSH
4810: LD_INT 99
4812: PUSH
4813: LD_INT 114
4815: PUSH
4816: LD_INT 3
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: PUSH
4825: LD_INT 28
4827: PUSH
4828: LD_INT 100
4830: PUSH
4831: LD_INT 112
4833: PUSH
4834: LD_INT 1
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 2
4845: PUSH
4846: LD_INT 92
4848: PUSH
4849: LD_INT 101
4851: PUSH
4852: LD_INT 0
4854: PUSH
4855: EMPTY
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 28
4863: PUSH
4864: LD_INT 97
4866: PUSH
4867: LD_INT 116
4869: PUSH
4870: LD_INT 5
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: PUSH
4879: LD_INT 17
4881: PUSH
4882: LD_INT 96
4884: PUSH
4885: LD_INT 101
4887: PUSH
4888: LD_INT 4
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 18
4899: PUSH
4900: LD_INT 88
4902: PUSH
4903: LD_INT 97
4905: PUSH
4906: LD_INT 2
4908: PUSH
4909: EMPTY
4910: LIST
4911: LIST
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 28
4917: PUSH
4918: LD_INT 106
4920: PUSH
4921: LD_INT 92
4923: PUSH
4924: LD_INT 2
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: LIST
4931: LIST
4932: PUSH
4933: LD_INT 32
4935: PUSH
4936: LD_INT 88
4938: PUSH
4939: LD_INT 89
4941: PUSH
4942: LD_INT 2
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: LIST
4949: LIST
4950: PUSH
4951: LD_INT 32
4953: PUSH
4954: LD_INT 86
4956: PUSH
4957: LD_INT 90
4959: PUSH
4960: LD_INT 2
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 32
4971: PUSH
4972: LD_INT 85
4974: PUSH
4975: LD_INT 99
4977: PUSH
4978: LD_INT 2
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 32
4989: PUSH
4990: LD_INT 85
4992: PUSH
4993: LD_INT 107
4995: PUSH
4996: LD_INT 1
4998: PUSH
4999: EMPTY
5000: LIST
5001: LIST
5002: LIST
5003: LIST
5004: PUSH
5005: LD_INT 33
5007: PUSH
5008: LD_INT 105
5010: PUSH
5011: LD_INT 99
5013: PUSH
5014: LD_INT 1
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: LIST
5021: LIST
5022: PUSH
5023: LD_INT 33
5025: PUSH
5026: LD_INT 102
5028: PUSH
5029: LD_INT 92
5031: PUSH
5032: LD_INT 3
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 33
5043: PUSH
5044: LD_INT 105
5046: PUSH
5047: LD_INT 92
5049: PUSH
5050: LD_INT 2
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: LIST
5057: LIST
5058: PUSH
5059: LD_INT 6
5061: PUSH
5062: LD_INT 92
5064: PUSH
5065: LD_INT 110
5067: PUSH
5068: LD_INT 0
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: LD_INT 103
5082: PUSH
5083: LD_INT 103
5085: PUSH
5086: LD_INT 5
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: LD_INT 21
5097: PUSH
5098: LD_INT 89
5100: PUSH
5101: LD_INT 101
5103: PUSH
5104: LD_INT 1
5106: PUSH
5107: EMPTY
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: PUSH
5113: LD_INT 16
5115: PUSH
5116: LD_INT 95
5118: PUSH
5119: LD_INT 104
5121: PUSH
5122: LD_INT 4
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: LIST
5129: LIST
5130: PUSH
5131: LD_INT 24
5133: PUSH
5134: LD_INT 92
5136: PUSH
5137: LD_INT 105
5139: PUSH
5140: LD_INT 0
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: LIST
5147: LIST
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: LIST
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: LIST
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: LIST
5167: LIST
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: ST_TO_ADDR
// for i := 1 to buildingsTab do
5173: LD_ADDR_VAR 0 3
5177: PUSH
5178: DOUBLE
5179: LD_INT 1
5181: DEC
5182: ST_TO_ADDR
5183: LD_VAR 0 5
5187: PUSH
5188: FOR_TO
5189: IFFALSE 5262
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5191: LD_VAR 0 4
5195: PPUSH
5196: LD_VAR 0 5
5200: PUSH
5201: LD_VAR 0 3
5205: ARRAY
5206: PUSH
5207: LD_INT 1
5209: ARRAY
5210: PPUSH
5211: LD_VAR 0 5
5215: PUSH
5216: LD_VAR 0 3
5220: ARRAY
5221: PUSH
5222: LD_INT 2
5224: ARRAY
5225: PPUSH
5226: LD_VAR 0 5
5230: PUSH
5231: LD_VAR 0 3
5235: ARRAY
5236: PUSH
5237: LD_INT 3
5239: ARRAY
5240: PPUSH
5241: LD_VAR 0 5
5245: PUSH
5246: LD_VAR 0 3
5250: ARRAY
5251: PUSH
5252: LD_INT 4
5254: ARRAY
5255: PPUSH
5256: CALL_OW 205
5260: GO 5188
5262: POP
5263: POP
// end ; if position = 3 then
5264: LD_VAR 0 1
5268: PUSH
5269: LD_INT 3
5271: EQUAL
5272: IFFALSE 5995
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
5274: LD_ADDR_VAR 0 4
5278: PUSH
5279: LD_INT 22
5281: PUSH
5282: LD_INT 3
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: PUSH
5289: LD_INT 25
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: PPUSH
5303: CALL_OW 69
5307: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
5308: LD_ADDR_VAR 0 5
5312: PUSH
5313: LD_INT 0
5315: PUSH
5316: LD_INT 151
5318: PUSH
5319: LD_INT 71
5321: PUSH
5322: LD_INT 4
5324: PUSH
5325: EMPTY
5326: LIST
5327: LIST
5328: LIST
5329: LIST
5330: PUSH
5331: LD_INT 4
5333: PUSH
5334: LD_INT 145
5336: PUSH
5337: LD_INT 53
5339: PUSH
5340: LD_INT 3
5342: PUSH
5343: EMPTY
5344: LIST
5345: LIST
5346: LIST
5347: LIST
5348: PUSH
5349: LD_INT 4
5351: PUSH
5352: LD_INT 172
5354: PUSH
5355: LD_INT 102
5357: PUSH
5358: LD_INT 5
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: LIST
5365: LIST
5366: PUSH
5367: LD_INT 29
5369: PUSH
5370: LD_INT 152
5372: PUSH
5373: LD_INT 85
5375: PUSH
5376: LD_INT 3
5378: PUSH
5379: EMPTY
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 30
5387: PUSH
5388: LD_INT 156
5390: PUSH
5391: LD_INT 92
5393: PUSH
5394: LD_INT 3
5396: PUSH
5397: EMPTY
5398: LIST
5399: LIST
5400: LIST
5401: LIST
5402: PUSH
5403: LD_INT 28
5405: PUSH
5406: LD_INT 151
5408: PUSH
5409: LD_INT 66
5411: PUSH
5412: LD_INT 4
5414: PUSH
5415: EMPTY
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: PUSH
5421: LD_INT 2
5423: PUSH
5424: LD_INT 163
5426: PUSH
5427: LD_INT 95
5429: PUSH
5430: LD_INT 5
5432: PUSH
5433: EMPTY
5434: LIST
5435: LIST
5436: LIST
5437: LIST
5438: PUSH
5439: LD_INT 28
5441: PUSH
5442: LD_INT 149
5444: PUSH
5445: LD_INT 63
5447: PUSH
5448: LD_INT 4
5450: PUSH
5451: EMPTY
5452: LIST
5453: LIST
5454: LIST
5455: LIST
5456: PUSH
5457: LD_INT 17
5459: PUSH
5460: LD_INT 167
5462: PUSH
5463: LD_INT 99
5465: PUSH
5466: LD_INT 5
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_INT 18
5477: PUSH
5478: LD_INT 163
5480: PUSH
5481: LD_INT 98
5483: PUSH
5484: LD_INT 0
5486: PUSH
5487: EMPTY
5488: LIST
5489: LIST
5490: LIST
5491: LIST
5492: PUSH
5493: LD_INT 28
5495: PUSH
5496: LD_INT 154
5498: PUSH
5499: LD_INT 70
5501: PUSH
5502: LD_INT 4
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: LIST
5509: LIST
5510: PUSH
5511: LD_INT 32
5513: PUSH
5514: LD_INT 155
5516: PUSH
5517: LD_INT 62
5519: PUSH
5520: LD_INT 4
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: LIST
5527: LIST
5528: PUSH
5529: LD_INT 32
5531: PUSH
5532: LD_INT 161
5534: PUSH
5535: LD_INT 69
5537: PUSH
5538: LD_INT 4
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 32
5549: PUSH
5550: LD_INT 168
5552: PUSH
5553: LD_INT 78
5555: PUSH
5556: LD_INT 4
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 32
5567: PUSH
5568: LD_INT 163
5570: PUSH
5571: LD_INT 80
5573: PUSH
5574: LD_INT 5
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: LIST
5581: LIST
5582: PUSH
5583: LD_INT 32
5585: PUSH
5586: LD_INT 136
5588: PUSH
5589: LD_INT 73
5591: PUSH
5592: LD_INT 0
5594: PUSH
5595: EMPTY
5596: LIST
5597: LIST
5598: LIST
5599: LIST
5600: PUSH
5601: LD_INT 32
5603: PUSH
5604: LD_INT 157
5606: PUSH
5607: LD_INT 98
5609: PUSH
5610: LD_INT 0
5612: PUSH
5613: EMPTY
5614: LIST
5615: LIST
5616: LIST
5617: LIST
5618: PUSH
5619: LD_INT 32
5621: PUSH
5622: LD_INT 150
5624: PUSH
5625: LD_INT 87
5627: PUSH
5628: LD_INT 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: LIST
5636: PUSH
5637: LD_INT 33
5639: PUSH
5640: LD_INT 171
5642: PUSH
5643: LD_INT 97
5645: PUSH
5646: LD_INT 4
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: LIST
5653: LIST
5654: PUSH
5655: LD_INT 33
5657: PUSH
5658: LD_INT 168
5660: PUSH
5661: LD_INT 92
5663: PUSH
5664: LD_INT 4
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: LIST
5671: LIST
5672: PUSH
5673: LD_INT 33
5675: PUSH
5676: LD_INT 166
5678: PUSH
5679: LD_INT 80
5681: PUSH
5682: LD_INT 5
5684: PUSH
5685: EMPTY
5686: LIST
5687: LIST
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 33
5693: PUSH
5694: LD_INT 141
5696: PUSH
5697: LD_INT 54
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 33
5711: PUSH
5712: LD_INT 133
5714: PUSH
5715: LD_INT 57
5717: PUSH
5718: LD_INT 2
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 33
5729: PUSH
5730: LD_INT 132
5732: PUSH
5733: LD_INT 61
5735: PUSH
5736: LD_INT 2
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 33
5747: PUSH
5748: LD_INT 150
5750: PUSH
5751: LD_INT 82
5753: PUSH
5754: LD_INT 0
5756: PUSH
5757: EMPTY
5758: LIST
5759: LIST
5760: LIST
5761: LIST
5762: PUSH
5763: LD_INT 33
5765: PUSH
5766: LD_INT 132
5768: PUSH
5769: LD_INT 72
5771: PUSH
5772: LD_INT 0
5774: PUSH
5775: EMPTY
5776: LIST
5777: LIST
5778: LIST
5779: LIST
5780: PUSH
5781: LD_INT 6
5783: PUSH
5784: LD_INT 146
5786: PUSH
5787: LD_INT 64
5789: PUSH
5790: LD_INT 4
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: PUSH
5799: LD_INT 6
5801: PUSH
5802: LD_INT 159
5804: PUSH
5805: LD_INT 85
5807: PUSH
5808: LD_INT 4
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: LIST
5815: LIST
5816: PUSH
5817: LD_INT 21
5819: PUSH
5820: LD_INT 163
5822: PUSH
5823: LD_INT 91
5825: PUSH
5826: LD_INT 3
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: LIST
5833: LIST
5834: PUSH
5835: LD_INT 16
5837: PUSH
5838: LD_INT 166
5840: PUSH
5841: LD_INT 95
5843: PUSH
5844: LD_INT 4
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: LIST
5851: LIST
5852: PUSH
5853: LD_INT 24
5855: PUSH
5856: LD_INT 159
5858: PUSH
5859: LD_INT 95
5861: PUSH
5862: LD_INT 1
5864: PUSH
5865: EMPTY
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: PUSH
5871: EMPTY
5872: LIST
5873: LIST
5874: LIST
5875: LIST
5876: LIST
5877: LIST
5878: LIST
5879: LIST
5880: LIST
5881: LIST
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: LIST
5890: LIST
5891: LIST
5892: LIST
5893: LIST
5894: LIST
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: ST_TO_ADDR
// for i := 1 to buildingsTab do
5904: LD_ADDR_VAR 0 3
5908: PUSH
5909: DOUBLE
5910: LD_INT 1
5912: DEC
5913: ST_TO_ADDR
5914: LD_VAR 0 5
5918: PUSH
5919: FOR_TO
5920: IFFALSE 5993
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
5922: LD_VAR 0 4
5926: PPUSH
5927: LD_VAR 0 5
5931: PUSH
5932: LD_VAR 0 3
5936: ARRAY
5937: PUSH
5938: LD_INT 1
5940: ARRAY
5941: PPUSH
5942: LD_VAR 0 5
5946: PUSH
5947: LD_VAR 0 3
5951: ARRAY
5952: PUSH
5953: LD_INT 2
5955: ARRAY
5956: PPUSH
5957: LD_VAR 0 5
5961: PUSH
5962: LD_VAR 0 3
5966: ARRAY
5967: PUSH
5968: LD_INT 3
5970: ARRAY
5971: PPUSH
5972: LD_VAR 0 5
5976: PUSH
5977: LD_VAR 0 3
5981: ARRAY
5982: PUSH
5983: LD_INT 4
5985: ARRAY
5986: PPUSH
5987: CALL_OW 205
5991: GO 5919
5993: POP
5994: POP
// end ; end ;
5995: LD_VAR 0 2
5999: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
6000: LD_INT 0
6002: PPUSH
6003: PPUSH
6004: PPUSH
6005: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
6006: LD_ADDR_VAR 0 3
6010: PUSH
6011: LD_INT 22
6013: PUSH
6014: LD_INT 2
6016: PUSH
6017: EMPTY
6018: LIST
6019: LIST
6020: PUSH
6021: LD_INT 25
6023: PUSH
6024: LD_INT 2
6026: PUSH
6027: EMPTY
6028: LIST
6029: LIST
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PPUSH
6035: CALL_OW 69
6039: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
6040: LD_ADDR_VAR 0 4
6044: PUSH
6045: LD_INT 0
6047: PUSH
6048: LD_INT 71
6050: PUSH
6051: LD_INT 15
6053: PUSH
6054: LD_INT 3
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 6
6065: PUSH
6066: LD_INT 77
6068: PUSH
6069: LD_INT 18
6071: PUSH
6072: LD_INT 3
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 4
6083: PUSH
6084: LD_INT 77
6086: PUSH
6087: LD_INT 26
6089: PUSH
6090: LD_INT 0
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: LIST
6097: LIST
6098: PUSH
6099: LD_INT 31
6101: PUSH
6102: LD_INT 82
6104: PUSH
6105: LD_INT 28
6107: PUSH
6108: LD_INT 0
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: LIST
6115: LIST
6116: PUSH
6117: LD_INT 31
6119: PUSH
6120: LD_INT 84
6122: PUSH
6123: LD_INT 21
6125: PUSH
6126: LD_INT 3
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: PUSH
6135: LD_INT 31
6137: PUSH
6138: LD_INT 66
6140: PUSH
6141: LD_INT 14
6143: PUSH
6144: LD_INT 2
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 27
6155: PUSH
6156: LD_INT 67
6158: PUSH
6159: LD_INT 18
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 27
6173: PUSH
6174: LD_INT 69
6176: PUSH
6177: LD_INT 23
6179: PUSH
6180: LD_INT 2
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: PUSH
6189: EMPTY
6190: LIST
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: LIST
6196: LIST
6197: LIST
6198: ST_TO_ADDR
// for i := 1 to buildingsTab do
6199: LD_ADDR_VAR 0 2
6203: PUSH
6204: DOUBLE
6205: LD_INT 1
6207: DEC
6208: ST_TO_ADDR
6209: LD_VAR 0 4
6213: PUSH
6214: FOR_TO
6215: IFFALSE 6288
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6217: LD_VAR 0 3
6221: PPUSH
6222: LD_VAR 0 4
6226: PUSH
6227: LD_VAR 0 2
6231: ARRAY
6232: PUSH
6233: LD_INT 1
6235: ARRAY
6236: PPUSH
6237: LD_VAR 0 4
6241: PUSH
6242: LD_VAR 0 2
6246: ARRAY
6247: PUSH
6248: LD_INT 2
6250: ARRAY
6251: PPUSH
6252: LD_VAR 0 4
6256: PUSH
6257: LD_VAR 0 2
6261: ARRAY
6262: PUSH
6263: LD_INT 3
6265: ARRAY
6266: PPUSH
6267: LD_VAR 0 4
6271: PUSH
6272: LD_VAR 0 2
6276: ARRAY
6277: PUSH
6278: LD_INT 4
6280: ARRAY
6281: PPUSH
6282: CALL_OW 205
6286: GO 6214
6288: POP
6289: POP
// end ;
6290: LD_VAR 0 1
6294: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
6295: LD_INT 0
6297: PPUSH
6298: PPUSH
6299: PPUSH
6300: PPUSH
6301: PPUSH
6302: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
6303: LD_ADDR_VAR 0 7
6307: PUSH
6308: LD_INT 22
6310: PUSH
6311: LD_VAR 0 1
6315: PUSH
6316: EMPTY
6317: LIST
6318: LIST
6319: PUSH
6320: LD_INT 25
6322: PUSH
6323: LD_INT 9
6325: PUSH
6326: EMPTY
6327: LIST
6328: LIST
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: PPUSH
6334: CALL_OW 69
6338: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
6339: LD_ADDR_VAR 0 8
6343: PUSH
6344: LD_INT 22
6346: PUSH
6347: LD_VAR 0 2
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: LD_INT 21
6361: PUSH
6362: LD_INT 3
6364: PUSH
6365: EMPTY
6366: LIST
6367: LIST
6368: PUSH
6369: EMPTY
6370: LIST
6371: LIST
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PPUSH
6377: CALL_OW 69
6381: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
6382: LD_ADDR_VAR 0 5
6386: PUSH
6387: LD_INT 1
6389: PPUSH
6390: LD_INT 3
6392: PPUSH
6393: CALL_OW 12
6397: ST_TO_ADDR
// for i = 1 to list do
6398: LD_ADDR_VAR 0 6
6402: PUSH
6403: DOUBLE
6404: LD_INT 1
6406: DEC
6407: ST_TO_ADDR
6408: LD_VAR 0 7
6412: PUSH
6413: FOR_TO
6414: IFFALSE 6596
// for ta in filter do
6416: LD_ADDR_VAR 0 4
6420: PUSH
6421: LD_VAR 0 8
6425: PUSH
6426: FOR_IN
6427: IFFALSE 6592
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
6429: LD_VAR 0 7
6433: PUSH
6434: LD_VAR 0 6
6438: ARRAY
6439: PPUSH
6440: LD_VAR 0 4
6444: PPUSH
6445: CALL_OW 296
6449: PUSH
6450: LD_INT 13
6452: LESSEQUAL
6453: IFFALSE 6590
// begin case c of 1 :
6455: LD_VAR 0 5
6459: PUSH
6460: LD_INT 1
6462: DOUBLE
6463: EQUAL
6464: IFTRUE 6468
6466: GO 6506
6468: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
6469: LD_VAR 0 7
6473: PUSH
6474: LD_VAR 0 6
6478: ARRAY
6479: PPUSH
6480: LD_VAR 0 4
6484: PPUSH
6485: CALL_OW 250
6489: PPUSH
6490: LD_VAR 0 4
6494: PPUSH
6495: CALL_OW 251
6499: PPUSH
6500: CALL_OW 154
6504: GO 6590
6506: LD_INT 2
6508: DOUBLE
6509: EQUAL
6510: IFTRUE 6514
6512: GO 6578
6514: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
6515: LD_VAR 0 7
6519: PUSH
6520: LD_VAR 0 6
6524: ARRAY
6525: PPUSH
6526: LD_VAR 0 4
6530: PPUSH
6531: CALL_OW 250
6535: PUSH
6536: LD_INT 1
6538: NEG
6539: PPUSH
6540: LD_INT 1
6542: PPUSH
6543: CALL_OW 12
6547: PLUS
6548: PPUSH
6549: LD_VAR 0 4
6553: PPUSH
6554: CALL_OW 251
6558: PUSH
6559: LD_INT 1
6561: NEG
6562: PPUSH
6563: LD_INT 1
6565: PPUSH
6566: CALL_OW 12
6570: PLUS
6571: PPUSH
6572: CALL_OW 153
6576: GO 6590
6578: LD_INT 3
6580: DOUBLE
6581: EQUAL
6582: IFTRUE 6586
6584: GO 6589
6586: POP
// ; end ;
6587: GO 6590
6589: POP
// end ; end ;
6590: GO 6426
6592: POP
6593: POP
6594: GO 6413
6596: POP
6597: POP
// end ;
6598: LD_VAR 0 3
6602: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
6603: LD_INT 0
6605: PPUSH
6606: PPUSH
6607: PPUSH
6608: PPUSH
// for i = 1 to 72 do
6609: LD_ADDR_VAR 0 5
6613: PUSH
6614: DOUBLE
6615: LD_INT 1
6617: DEC
6618: ST_TO_ADDR
6619: LD_INT 72
6621: PUSH
6622: FOR_TO
6623: IFFALSE 6681
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
6625: LD_VAR 0 5
6629: PPUSH
6630: LD_VAR 0 1
6634: PPUSH
6635: CALL_OW 321
6639: PUSH
6640: LD_INT 1
6642: EQUAL
6643: PUSH
6644: LD_VAR 0 5
6648: PPUSH
6649: LD_VAR 0 3
6653: PPUSH
6654: CALL_OW 482
6658: PUSH
6659: LD_INT 1
6661: EQUAL
6662: AND
6663: IFFALSE 6679
// AddComResearch ( lab , i ) ;
6665: LD_VAR 0 2
6669: PPUSH
6670: LD_VAR 0 5
6674: PPUSH
6675: CALL_OW 184
6679: GO 6622
6681: POP
6682: POP
// end ;
6683: LD_VAR 0 4
6687: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
6688: LD_INT 0
6690: PPUSH
6691: PPUSH
6692: PPUSH
6693: PPUSH
6694: PPUSH
6695: PPUSH
6696: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
6697: LD_ADDR_VAR 0 6
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_VAR 0 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 25
6716: PUSH
6717: LD_INT 1
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: LD_INT 56
6726: PUSH
6727: EMPTY
6728: LIST
6729: PUSH
6730: LD_INT 24
6732: PUSH
6733: LD_INT 700
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: PPUSH
6746: CALL_OW 69
6750: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
6751: LD_ADDR_VAR 0 7
6755: PUSH
6756: LD_INT 22
6758: PUSH
6759: LD_VAR 0 1
6763: PUSH
6764: EMPTY
6765: LIST
6766: LIST
6767: PUSH
6768: LD_INT 30
6770: PUSH
6771: LD_INT 32
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 58
6780: PUSH
6781: EMPTY
6782: LIST
6783: PUSH
6784: LD_INT 24
6786: PUSH
6787: LD_INT 251
6789: PUSH
6790: EMPTY
6791: LIST
6792: LIST
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: LIST
6798: LIST
6799: PPUSH
6800: CALL_OW 69
6804: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
6805: LD_ADDR_VAR 0 9
6809: PUSH
6810: LD_INT 22
6812: PUSH
6813: LD_VAR 0 1
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 2
6824: PUSH
6825: LD_INT 30
6827: PUSH
6828: LD_INT 4
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 30
6837: PUSH
6838: LD_INT 5
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: PUSH
6850: LD_INT 24
6852: PUSH
6853: LD_INT 251
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: LIST
6864: PPUSH
6865: CALL_OW 69
6869: ST_TO_ADDR
// if barrackList > 0 then
6870: LD_VAR 0 9
6874: PUSH
6875: LD_INT 0
6877: GREATER
6878: IFFALSE 6967
// begin if turretList = 0 then
6880: LD_VAR 0 7
6884: PUSH
6885: LD_INT 0
6887: EQUAL
6888: IFFALSE 6927
// begin for i in soldiers_list do
6890: LD_ADDR_VAR 0 4
6894: PUSH
6895: LD_VAR 0 6
6899: PUSH
6900: FOR_IN
6901: IFFALSE 6923
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
6903: LD_VAR 0 4
6907: PPUSH
6908: LD_VAR 0 9
6912: PUSH
6913: LD_INT 1
6915: ARRAY
6916: PPUSH
6917: CALL_OW 120
6921: GO 6900
6923: POP
6924: POP
// end else
6925: GO 6967
// begin for i in barrackList do
6927: LD_ADDR_VAR 0 4
6931: PUSH
6932: LD_VAR 0 9
6936: PUSH
6937: FOR_IN
6938: IFFALSE 6965
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
6940: LD_VAR 0 4
6944: PPUSH
6945: CALL_OW 313
6949: PPUSH
6950: LD_VAR 0 7
6954: PUSH
6955: LD_INT 1
6957: ARRAY
6958: PPUSH
6959: CALL_OW 120
// end ;
6963: GO 6937
6965: POP
6966: POP
// end ; end ; end ;
6967: LD_VAR 0 3
6971: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
6972: LD_INT 0
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
6978: PPUSH
6979: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
6980: LD_ADDR_VAR 0 7
6984: PUSH
6985: LD_VAR 0 2
6989: PPUSH
6990: CALL_OW 313
6994: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
6995: LD_ADDR_VAR 0 8
6999: PUSH
7000: LD_VAR 0 3
7004: PPUSH
7005: LD_INT 22
7007: PUSH
7008: LD_VAR 0 1
7012: PUSH
7013: EMPTY
7014: LIST
7015: LIST
7016: PUSH
7017: LD_INT 25
7019: PUSH
7020: LD_INT 2
7022: PUSH
7023: EMPTY
7024: LIST
7025: LIST
7026: PUSH
7027: LD_INT 24
7029: PUSH
7030: LD_INT 1000
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: EMPTY
7038: LIST
7039: LIST
7040: LIST
7041: PPUSH
7042: CALL_OW 70
7046: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
7047: LD_ADDR_VAR 0 5
7051: PUSH
7052: LD_VAR 0 3
7056: PPUSH
7057: LD_INT 22
7059: PUSH
7060: LD_VAR 0 1
7064: PUSH
7065: EMPTY
7066: LIST
7067: LIST
7068: PUSH
7069: LD_INT 21
7071: PUSH
7072: LD_INT 3
7074: PUSH
7075: EMPTY
7076: LIST
7077: LIST
7078: PUSH
7079: LD_INT 3
7081: PUSH
7082: LD_INT 24
7084: PUSH
7085: LD_INT 1000
7087: PUSH
7088: EMPTY
7089: LIST
7090: LIST
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: PPUSH
7104: CALL_OW 70
7108: ST_TO_ADDR
// if buildings_list > 0 and engineerOkInside > 0 then
7109: LD_VAR 0 5
7113: PUSH
7114: LD_INT 0
7116: GREATER
7117: PUSH
7118: LD_VAR 0 7
7122: PUSH
7123: LD_INT 0
7125: GREATER
7126: AND
7127: IFFALSE 7155
// for i in engineerOkInside do
7129: LD_ADDR_VAR 0 6
7133: PUSH
7134: LD_VAR 0 7
7138: PUSH
7139: FOR_IN
7140: IFFALSE 7153
// ComExitBuilding ( i ) ;
7142: LD_VAR 0 6
7146: PPUSH
7147: CALL_OW 122
7151: GO 7139
7153: POP
7154: POP
// if engineerOkOutside > 0 then
7155: LD_VAR 0 8
7159: PUSH
7160: LD_INT 0
7162: GREATER
7163: IFFALSE 7217
// begin for i in engineerOkOutside do
7165: LD_ADDR_VAR 0 6
7169: PUSH
7170: LD_VAR 0 8
7174: PUSH
7175: FOR_IN
7176: IFFALSE 7215
// for j in buildings_list do
7178: LD_ADDR_VAR 0 9
7182: PUSH
7183: LD_VAR 0 5
7187: PUSH
7188: FOR_IN
7189: IFFALSE 7211
// ComRepairBuilding ( i , j [ 1 ] ) ;
7191: LD_VAR 0 6
7195: PPUSH
7196: LD_VAR 0 9
7200: PUSH
7201: LD_INT 1
7203: ARRAY
7204: PPUSH
7205: CALL_OW 130
7209: GO 7188
7211: POP
7212: POP
7213: GO 7175
7215: POP
7216: POP
// end ; if buildings_list = 0 then
7217: LD_VAR 0 5
7221: PUSH
7222: LD_INT 0
7224: EQUAL
7225: IFFALSE 7258
// for i in engineerOkOutside do
7227: LD_ADDR_VAR 0 6
7231: PUSH
7232: LD_VAR 0 8
7236: PUSH
7237: FOR_IN
7238: IFFALSE 7256
// ComEnterUnit ( i , building ) ;
7240: LD_VAR 0 6
7244: PPUSH
7245: LD_VAR 0 2
7249: PPUSH
7250: CALL_OW 120
7254: GO 7237
7256: POP
7257: POP
// end ;
7258: LD_VAR 0 4
7262: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
7263: LD_INT 0
7265: PPUSH
7266: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
7267: LD_INT 22
7269: PUSH
7270: LD_VAR 0 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: LD_INT 25
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: EMPTY
7286: LIST
7287: LIST
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PPUSH
7293: CALL_OW 69
7297: PUSH
7298: LD_INT 0
7300: GREATER
7301: PUSH
7302: LD_INT 22
7304: PUSH
7305: LD_VAR 0 1
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 21
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 3
7326: PUSH
7327: LD_INT 24
7329: PUSH
7330: LD_INT 1000
7332: PUSH
7333: EMPTY
7334: LIST
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: LIST
7345: PPUSH
7346: CALL_OW 69
7350: PUSH
7351: LD_INT 0
7353: EQUAL
7354: AND
7355: PUSH
7356: LD_VAR 0 2
7360: PUSH
7361: LD_INT 0
7363: GREATER
7364: AND
7365: IFFALSE 7464
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
7367: LD_ADDR_VAR 0 4
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_VAR 0 1
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 25
7386: PUSH
7387: LD_INT 2
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 69
7402: PUSH
7403: FOR_IN
7404: IFFALSE 7462
// begin AddComExitBuilding ( i ) ;
7406: LD_VAR 0 4
7410: PPUSH
7411: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
7415: LD_VAR 0 4
7419: PPUSH
7420: LD_VAR 0 2
7424: PUSH
7425: LD_INT 1
7427: ARRAY
7428: PPUSH
7429: LD_VAR 0 2
7433: PUSH
7434: LD_INT 2
7436: ARRAY
7437: PPUSH
7438: LD_VAR 0 2
7442: PUSH
7443: LD_INT 3
7445: ARRAY
7446: PPUSH
7447: LD_VAR 0 2
7451: PUSH
7452: LD_INT 4
7454: ARRAY
7455: PPUSH
7456: CALL_OW 205
// end ;
7460: GO 7403
7462: POP
7463: POP
// end ; end ;
7464: LD_VAR 0 3
7468: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
7473: PPUSH
7474: PPUSH
7475: PPUSH
7476: PPUSH
7477: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
7478: LD_ADDR_VAR 0 9
7482: PUSH
7483: LD_INT 22
7485: PUSH
7486: LD_VAR 0 1
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PUSH
7495: LD_INT 24
7497: PUSH
7498: LD_INT 251
7500: PUSH
7501: EMPTY
7502: LIST
7503: LIST
7504: PUSH
7505: LD_INT 2
7507: PUSH
7508: LD_INT 30
7510: PUSH
7511: LD_INT 9
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PUSH
7518: LD_INT 30
7520: PUSH
7521: LD_INT 7
7523: PUSH
7524: EMPTY
7525: LIST
7526: LIST
7527: PUSH
7528: LD_INT 30
7530: PUSH
7531: LD_INT 8
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: PPUSH
7549: CALL_OW 69
7553: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
7554: LD_ADDR_VAR 0 7
7558: PUSH
7559: LD_VAR 0 3
7563: PPUSH
7564: LD_INT 22
7566: PUSH
7567: LD_VAR 0 1
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PUSH
7576: LD_INT 25
7578: PUSH
7579: LD_INT 4
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: LD_INT 24
7588: PUSH
7589: LD_INT 251
7591: PUSH
7592: EMPTY
7593: LIST
7594: LIST
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 70
7605: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
7606: LD_ADDR_VAR 0 10
7610: PUSH
7611: LD_VAR 0 3
7615: PPUSH
7616: LD_INT 22
7618: PUSH
7619: LD_VAR 0 1
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: PUSH
7628: LD_INT 21
7630: PUSH
7631: LD_INT 1
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 3
7640: PUSH
7641: LD_INT 24
7643: PUSH
7644: LD_INT 750
7646: PUSH
7647: EMPTY
7648: LIST
7649: LIST
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: LIST
7659: PPUSH
7660: CALL_OW 70
7664: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
7665: LD_VAR 0 9
7669: PUSH
7670: LD_INT 0
7672: GREATER
7673: PUSH
7674: LD_VAR 0 10
7678: PUSH
7679: LD_INT 0
7681: GREATER
7682: AND
7683: IFFALSE 7717
// for i in labs do
7685: LD_ADDR_VAR 0 5
7689: PUSH
7690: LD_VAR 0 9
7694: PUSH
7695: FOR_IN
7696: IFFALSE 7715
// scientisticsInside = UnitsInside ( i ) ;
7698: LD_ADDR_VAR 0 8
7702: PUSH
7703: LD_VAR 0 5
7707: PPUSH
7708: CALL_OW 313
7712: ST_TO_ADDR
7713: GO 7695
7715: POP
7716: POP
// if labs > 0 and damageUnits > 0 then
7717: LD_VAR 0 9
7721: PUSH
7722: LD_INT 0
7724: GREATER
7725: PUSH
7726: LD_VAR 0 10
7730: PUSH
7731: LD_INT 0
7733: GREATER
7734: AND
7735: IFFALSE 7763
// for i in scientisticsInside do
7737: LD_ADDR_VAR 0 5
7741: PUSH
7742: LD_VAR 0 8
7746: PUSH
7747: FOR_IN
7748: IFFALSE 7761
// ComExitBuilding ( i ) ;
7750: LD_VAR 0 5
7754: PPUSH
7755: CALL_OW 122
7759: GO 7747
7761: POP
7762: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
7763: LD_VAR 0 10
7767: PUSH
7768: LD_INT 0
7770: GREATER
7771: PUSH
7772: LD_VAR 0 7
7776: PUSH
7777: LD_INT 0
7779: GREATER
7780: AND
7781: IFFALSE 7847
// begin ComMoveToArea ( damageUnits , healArea ) ;
7783: LD_VAR 0 10
7787: PPUSH
7788: LD_VAR 0 2
7792: PPUSH
7793: CALL_OW 113
// for i in scientisticsOutside do
7797: LD_ADDR_VAR 0 5
7801: PUSH
7802: LD_VAR 0 7
7806: PUSH
7807: FOR_IN
7808: IFFALSE 7843
// for j in damageUnits do
7810: LD_ADDR_VAR 0 6
7814: PUSH
7815: LD_VAR 0 10
7819: PUSH
7820: FOR_IN
7821: IFFALSE 7839
// AddComHeal ( i , j ) ;
7823: LD_VAR 0 5
7827: PPUSH
7828: LD_VAR 0 6
7832: PPUSH
7833: CALL_OW 188
7837: GO 7820
7839: POP
7840: POP
7841: GO 7807
7843: POP
7844: POP
// end else
7845: GO 7875
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
7847: LD_VAR 0 7
7851: PPUSH
7852: LD_VAR 0 9
7856: PUSH
7857: LD_INT 1
7859: PPUSH
7860: LD_VAR 0 9
7864: PPUSH
7865: CALL_OW 12
7869: ARRAY
7870: PPUSH
7871: CALL_OW 120
// end ; end ;
7875: LD_VAR 0 4
7879: RET
// export function TameApemans ; var i , j ; begin
7880: LD_INT 0
7882: PPUSH
7883: PPUSH
7884: PPUSH
// repeat wait ( 0 0$1 ) ;
7885: LD_INT 35
7887: PPUSH
7888: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
7892: LD_ADDR_VAR 0 2
7896: PUSH
7897: LD_INT 22
7899: PUSH
7900: LD_INT 2
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 25
7909: PUSH
7910: LD_INT 4
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PPUSH
7921: CALL_OW 69
7925: PUSH
7926: FOR_IN
7927: IFFALSE 8004
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
7929: LD_ADDR_VAR 0 3
7933: PUSH
7934: LD_INT 5
7936: PPUSH
7937: LD_INT 22
7939: PUSH
7940: LD_INT 0
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PUSH
7947: LD_INT 25
7949: PUSH
7950: LD_INT 12
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: EMPTY
7958: LIST
7959: LIST
7960: PPUSH
7961: CALL_OW 70
7965: PUSH
7966: FOR_IN
7967: IFFALSE 8000
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
7969: LD_VAR 0 2
7973: PPUSH
7974: LD_VAR 0 3
7978: PPUSH
7979: CALL_OW 250
7983: PPUSH
7984: LD_VAR 0 3
7988: PPUSH
7989: CALL_OW 251
7993: PPUSH
7994: CALL_OW 191
// end ;
7998: GO 7966
8000: POP
8001: POP
// end ;
8002: GO 7926
8004: POP
8005: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
8006: LD_INT 22
8008: PUSH
8009: LD_INT 2
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 25
8018: PUSH
8019: LD_INT 4
8021: PUSH
8022: EMPTY
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: PPUSH
8030: CALL_OW 69
8034: PUSH
8035: LD_INT 0
8037: EQUAL
8038: PUSH
8039: LD_INT 5
8041: PPUSH
8042: LD_INT 22
8044: PUSH
8045: LD_INT 0
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 12
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: PPUSH
8066: CALL_OW 70
8070: PUSH
8071: LD_INT 0
8073: EQUAL
8074: OR
8075: IFFALSE 7885
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
8077: LD_ADDR_VAR 0 2
8081: PUSH
8082: LD_INT 22
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: LD_INT 25
8094: PUSH
8095: LD_INT 12
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 69
8110: PUSH
8111: FOR_IN
8112: IFFALSE 8147
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
8114: LD_VAR 0 2
8118: PPUSH
8119: LD_INT 16
8121: PUSH
8122: LD_INT 15
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: PUSH
8129: LD_INT 1
8131: PPUSH
8132: LD_INT 2
8134: PPUSH
8135: CALL_OW 12
8139: ARRAY
8140: PPUSH
8141: CALL_OW 336
8145: GO 8111
8147: POP
8148: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: LD_INT 22
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 4
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PPUSH
8178: CALL_OW 69
8182: PUSH
8183: FOR_IN
8184: IFFALSE 8202
// ComEnterUnit ( i , arLab ) ;
8186: LD_VAR 0 2
8190: PPUSH
8191: LD_EXP 29
8195: PPUSH
8196: CALL_OW 120
8200: GO 8183
8202: POP
8203: POP
// end ; end_of_file
8204: LD_VAR 0 1
8208: RET
// every 0 0$1 trigger activateRUAI = 1 do
8209: LD_EXP 27
8213: PUSH
8214: LD_INT 1
8216: EQUAL
8217: IFFALSE 8243
8219: GO 8221
8221: DISABLE
// begin enable ;
8222: ENABLE
// IntBazooka ( 3 , 1 ) ;
8223: LD_INT 3
8225: PPUSH
8226: LD_INT 1
8228: PPUSH
8229: CALL 6295 0 2
// IntBazooka ( 6 , 1 ) ;
8233: LD_INT 6
8235: PPUSH
8236: LD_INT 1
8238: PPUSH
8239: CALL 6295 0 2
// end ; end_of_file
8243: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
8244: LD_VAR 0 1
8248: PPUSH
8249: CALL_OW 255
8253: PUSH
8254: LD_INT 4
8256: EQUAL
8257: IFFALSE 8271
// SetBName ( building , epsilon ) ;
8259: LD_VAR 0 1
8263: PPUSH
8264: LD_STRING epsilon
8266: PPUSH
8267: CALL_OW 500
// end ;
8271: PPOPN 2
8273: END
// on BuildingComplete ( building ) do var i ;
8274: LD_INT 0
8276: PPUSH
// begin if GetSide ( building ) = 3 then
8277: LD_VAR 0 1
8281: PPUSH
8282: CALL_OW 255
8286: PUSH
8287: LD_INT 3
8289: EQUAL
8290: IFFALSE 8696
// begin if GetBType ( building ) = b_depot then
8292: LD_VAR 0 1
8296: PPUSH
8297: CALL_OW 266
8301: PUSH
8302: LD_INT 0
8304: EQUAL
8305: IFFALSE 8377
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
8307: LD_VAR 0 1
8311: PPUSH
8312: CALL_OW 274
8316: PPUSH
8317: LD_INT 1
8319: PPUSH
8320: LD_INT 5000
8322: PPUSH
8323: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
8327: LD_VAR 0 1
8331: PPUSH
8332: CALL_OW 274
8336: PPUSH
8337: LD_INT 2
8339: PPUSH
8340: LD_INT 5000
8342: PPUSH
8343: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: CALL_OW 274
8356: PPUSH
8357: LD_INT 3
8359: PPUSH
8360: LD_INT 5000
8362: PPUSH
8363: CALL_OW 277
// ruDepot = building ;
8367: LD_ADDR_EXP 17
8371: PUSH
8372: LD_VAR 0 1
8376: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
8377: LD_VAR 0 1
8381: PPUSH
8382: CALL_OW 266
8386: PUSH
8387: LD_INT 0
8389: EQUAL
8390: PUSH
8391: LD_VAR 0 1
8395: PPUSH
8396: CALL_OW 266
8400: PUSH
8401: LD_INT 2
8403: EQUAL
8404: OR
8405: PUSH
8406: LD_VAR 0 1
8410: PPUSH
8411: CALL_OW 266
8415: PUSH
8416: LD_INT 4
8418: EQUAL
8419: OR
8420: IFFALSE 8431
// ComUpgrade ( building ) ;
8422: LD_VAR 0 1
8426: PPUSH
8427: CALL_OW 146
// if GetBType ( building ) = b_lab then
8431: LD_VAR 0 1
8435: PPUSH
8436: CALL_OW 266
8440: PUSH
8441: LD_INT 6
8443: EQUAL
8444: IFFALSE 8565
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
8446: LD_INT 22
8448: PUSH
8449: LD_INT 3
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 30
8458: PUSH
8459: LD_INT 8
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PPUSH
8470: CALL_OW 69
8474: PUSH
8475: LD_INT 0
8477: EQUAL
8478: IFFALSE 8516
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
8480: LD_VAR 0 1
8484: PPUSH
8485: LD_INT 10
8487: PPUSH
8488: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
8492: LD_VAR 0 1
8496: PPUSH
8497: LD_INT 12
8499: PPUSH
8500: CALL_OW 207
// ruLab1 = building ;
8504: LD_ADDR_EXP 18
8508: PUSH
8509: LD_VAR 0 1
8513: ST_TO_ADDR
// end else
8514: GO 8550
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
8516: LD_VAR 0 1
8520: PPUSH
8521: LD_INT 11
8523: PPUSH
8524: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_INT 14
8535: PPUSH
8536: CALL_OW 207
// ruLab2 = building ;
8540: LD_ADDR_EXP 19
8544: PUSH
8545: LD_VAR 0 1
8549: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
8550: LD_INT 3
8552: PPUSH
8553: LD_VAR 0 1
8557: PPUSH
8558: LD_INT 3
8560: PPUSH
8561: CALL 6603 0 3
// end ; if GetBType ( building ) = b_bunker then
8565: LD_VAR 0 1
8569: PPUSH
8570: CALL_OW 266
8574: PUSH
8575: LD_INT 32
8577: EQUAL
8578: IFFALSE 8619
// AddComPlaceWeapon ( building , [ 43 , 44 , 45 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8580: LD_VAR 0 1
8584: PPUSH
8585: LD_INT 43
8587: PUSH
8588: LD_INT 44
8590: PUSH
8591: LD_INT 45
8593: PUSH
8594: LD_INT 46
8596: PUSH
8597: EMPTY
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: PUSH
8603: LD_INT 1
8605: PPUSH
8606: LD_INT 4
8608: PPUSH
8609: CALL_OW 12
8613: ARRAY
8614: PPUSH
8615: CALL_OW 208
// if GetBType ( building ) = b_turret then
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 266
8628: PUSH
8629: LD_INT 33
8631: EQUAL
8632: IFFALSE 8673
// AddComPlaceWeapon ( building , [ 43 , 44 , 45 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
8634: LD_VAR 0 1
8638: PPUSH
8639: LD_INT 43
8641: PUSH
8642: LD_INT 44
8644: PUSH
8645: LD_INT 45
8647: PUSH
8648: LD_INT 46
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: PUSH
8657: LD_INT 1
8659: PPUSH
8660: LD_INT 4
8662: PPUSH
8663: CALL_OW 12
8667: ARRAY
8668: PPUSH
8669: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
8673: LD_VAR 0 1
8677: PPUSH
8678: CALL_OW 266
8682: PUSH
8683: LD_INT 24
8685: EQUAL
8686: IFFALSE 8696
// russianAI = 1 ;
8688: LD_ADDR_EXP 26
8692: PUSH
8693: LD_INT 1
8695: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
8696: LD_VAR 0 1
8700: PPUSH
8701: CALL_OW 255
8705: PUSH
8706: LD_INT 2
8708: EQUAL
8709: IFFALSE 8879
// begin if GetBType ( building ) = b_depot then
8711: LD_VAR 0 1
8715: PPUSH
8716: CALL_OW 266
8720: PUSH
8721: LD_INT 0
8723: EQUAL
8724: IFFALSE 8776
// begin SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
8726: LD_VAR 0 1
8730: PPUSH
8731: CALL_OW 274
8735: PPUSH
8736: LD_INT 1
8738: PPUSH
8739: LD_INT 500
8741: PPUSH
8742: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
8746: LD_VAR 0 1
8750: PPUSH
8751: CALL_OW 274
8755: PPUSH
8756: LD_INT 3
8758: PPUSH
8759: LD_INT 30
8761: PPUSH
8762: CALL_OW 277
// arDepot = building ;
8766: LD_ADDR_EXP 28
8770: PUSH
8771: LD_VAR 0 1
8775: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
8776: LD_VAR 0 1
8780: PPUSH
8781: CALL_OW 266
8785: PUSH
8786: LD_INT 2
8788: EQUAL
8789: PUSH
8790: LD_VAR 0 1
8794: PPUSH
8795: CALL_OW 266
8799: PUSH
8800: LD_INT 4
8802: EQUAL
8803: OR
8804: IFFALSE 8815
// ComUpgrade ( building ) ;
8806: LD_VAR 0 1
8810: PPUSH
8811: CALL_OW 146
// if GetBType ( building ) = b_lab then
8815: LD_VAR 0 1
8819: PPUSH
8820: CALL_OW 266
8824: PUSH
8825: LD_INT 6
8827: EQUAL
8828: IFFALSE 8879
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_INT 10
8837: PPUSH
8838: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
8842: LD_VAR 0 1
8846: PPUSH
8847: LD_INT 11
8849: PPUSH
8850: CALL_OW 207
// ResAllTechs ( 3 , building , 3 ) ;
8854: LD_INT 3
8856: PPUSH
8857: LD_VAR 0 1
8861: PPUSH
8862: LD_INT 3
8864: PPUSH
8865: CALL 6603 0 3
// arLab = building ;
8869: LD_ADDR_EXP 29
8873: PUSH
8874: LD_VAR 0 1
8878: ST_TO_ADDR
// end ; end ; end ; end_of_file
8879: PPOPN 2
8881: END
// export function PrepareNature ; var i , un ; begin
8882: LD_INT 0
8884: PPUSH
8885: PPUSH
8886: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
8887: LD_ADDR_VAR 0 2
8891: PUSH
8892: DOUBLE
8893: LD_INT 1
8895: DEC
8896: ST_TO_ADDR
8897: LD_OWVAR 67
8901: PUSH
8902: LD_INT 1
8904: PPUSH
8905: LD_INT 5
8907: PPUSH
8908: CALL_OW 12
8912: PLUS
8913: PUSH
8914: FOR_TO
8915: IFFALSE 9060
// begin hc_sex = sex_male ;
8917: LD_ADDR_OWVAR 27
8921: PUSH
8922: LD_INT 1
8924: ST_TO_ADDR
// uc_side = 0 ;
8925: LD_ADDR_OWVAR 20
8929: PUSH
8930: LD_INT 0
8932: ST_TO_ADDR
// uc_nation = nation_nature ;
8933: LD_ADDR_OWVAR 21
8937: PUSH
8938: LD_INT 0
8940: ST_TO_ADDR
// hc_class = class_apeman ;
8941: LD_ADDR_OWVAR 28
8945: PUSH
8946: LD_INT 12
8948: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
8949: LD_ADDR_OWVAR 31
8953: PUSH
8954: LD_INT 2
8956: PPUSH
8957: LD_INT 7
8959: PPUSH
8960: CALL_OW 12
8964: PUSH
8965: LD_OWVAR 67
8969: PLUS
8970: PUSH
8971: LD_INT 2
8973: PPUSH
8974: LD_INT 10
8976: PPUSH
8977: CALL_OW 12
8981: PUSH
8982: LD_INT 2
8984: PPUSH
8985: LD_INT 10
8987: PPUSH
8988: CALL_OW 12
8992: PUSH
8993: LD_INT 2
8995: PPUSH
8996: LD_INT 10
8998: PPUSH
8999: CALL_OW 12
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
9010: LD_ADDR_OWVAR 35
9014: PUSH
9015: LD_INT 5
9017: NEG
9018: PPUSH
9019: LD_INT 5
9021: PPUSH
9022: CALL_OW 12
9026: PUSH
9027: LD_OWVAR 67
9031: MUL
9032: ST_TO_ADDR
// un = CreateHuman ;
9033: LD_ADDR_VAR 0 3
9037: PUSH
9038: CALL_OW 44
9042: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
9043: LD_VAR 0 3
9047: PPUSH
9048: LD_INT 5
9050: PPUSH
9051: LD_INT 0
9053: PPUSH
9054: CALL_OW 49
// end ;
9058: GO 8914
9060: POP
9061: POP
// for i = 1 to Difficulty + 2 do
9062: LD_ADDR_VAR 0 2
9066: PUSH
9067: DOUBLE
9068: LD_INT 1
9070: DEC
9071: ST_TO_ADDR
9072: LD_OWVAR 67
9076: PUSH
9077: LD_INT 2
9079: PLUS
9080: PUSH
9081: FOR_TO
9082: IFFALSE 9191
// begin hc_sex = sex_male ;
9084: LD_ADDR_OWVAR 27
9088: PUSH
9089: LD_INT 1
9091: ST_TO_ADDR
// uc_side = 0 ;
9092: LD_ADDR_OWVAR 20
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// uc_nation = nation_nature ;
9100: LD_ADDR_OWVAR 21
9104: PUSH
9105: LD_INT 0
9107: ST_TO_ADDR
// hc_class = class_tiger ;
9108: LD_ADDR_OWVAR 28
9112: PUSH
9113: LD_INT 14
9115: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
9116: LD_ADDR_OWVAR 31
9120: PUSH
9121: LD_EXP 24
9125: PUSH
9126: LD_INT 0
9128: PUSH
9129: LD_INT 0
9131: PUSH
9132: LD_INT 0
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: LIST
9139: LIST
9140: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
9141: LD_ADDR_OWVAR 35
9145: PUSH
9146: LD_INT 5
9148: NEG
9149: PPUSH
9150: LD_INT 5
9152: PPUSH
9153: CALL_OW 12
9157: PUSH
9158: LD_OWVAR 67
9162: MUL
9163: ST_TO_ADDR
// un = CreateHuman ;
9164: LD_ADDR_VAR 0 3
9168: PUSH
9169: CALL_OW 44
9173: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
9174: LD_VAR 0 3
9178: PPUSH
9179: LD_INT 6
9181: PPUSH
9182: LD_INT 0
9184: PPUSH
9185: CALL_OW 49
// end ;
9189: GO 9081
9191: POP
9192: POP
// for i = 1 to rand ( 3 , 4 ) do
9193: LD_ADDR_VAR 0 2
9197: PUSH
9198: DOUBLE
9199: LD_INT 1
9201: DEC
9202: ST_TO_ADDR
9203: LD_INT 3
9205: PPUSH
9206: LD_INT 4
9208: PPUSH
9209: CALL_OW 12
9213: PUSH
9214: FOR_TO
9215: IFFALSE 9309
// begin hc_sex = sex_male ;
9217: LD_ADDR_OWVAR 27
9221: PUSH
9222: LD_INT 1
9224: ST_TO_ADDR
// uc_side = 0 ;
9225: LD_ADDR_OWVAR 20
9229: PUSH
9230: LD_INT 0
9232: ST_TO_ADDR
// uc_nation = nation_nature ;
9233: LD_ADDR_OWVAR 21
9237: PUSH
9238: LD_INT 0
9240: ST_TO_ADDR
// hc_class = 18 ;
9241: LD_ADDR_OWVAR 28
9245: PUSH
9246: LD_INT 18
9248: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
9249: LD_ADDR_OWVAR 31
9253: PUSH
9254: LD_EXP 24
9258: PUSH
9259: LD_INT 0
9261: PUSH
9262: LD_INT 0
9264: PUSH
9265: LD_INT 0
9267: PUSH
9268: EMPTY
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: ST_TO_ADDR
// hc_agressivity = 0 ;
9274: LD_ADDR_OWVAR 35
9278: PUSH
9279: LD_INT 0
9281: ST_TO_ADDR
// un = CreateHuman ;
9282: LD_ADDR_VAR 0 3
9286: PUSH
9287: CALL_OW 44
9291: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
9292: LD_VAR 0 3
9296: PPUSH
9297: LD_INT 6
9299: PPUSH
9300: LD_INT 0
9302: PPUSH
9303: CALL_OW 49
// end ;
9307: GO 9214
9309: POP
9310: POP
// end ;
9311: LD_VAR 0 1
9315: RET
