// export JMM , Gary , Cyrus , Bobby , Lisa ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 15
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 24
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 25
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 26
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// PrepareVehicles ;
  47: CALL 254 0 0
// PrepareJMMTeam ;
  51: CALL 60 0 0
// PrepareCathyTeam ;
  55: CALL 468 0 0
// end ; end_of_file
  59: END
// export function PrepareJMMTeam ; begin
  60: LD_INT 0
  62: PPUSH
// uc_side = 1 ;
  63: LD_ADDR_OWVAR 20
  67: PUSH
  68: LD_INT 1
  70: ST_TO_ADDR
// uc_nation = 1 ;
  71: LD_ADDR_OWVAR 21
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
  79: LD_ADDR_EXP 1
  83: PUSH
  84: LD_STRING JMM
  86: PPUSH
  87: LD_INT 0
  89: PPUSH
  90: CALL 2735 0 2
  94: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
  95: LD_ADDR_EXP 2
  99: PUSH
 100: LD_STRING Gary
 102: PPUSH
 103: LD_INT 0
 105: PPUSH
 106: CALL 2735 0 2
 110: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 111: LD_ADDR_EXP 3
 115: PUSH
 116: LD_STRING Cyrus
 118: PPUSH
 119: LD_INT 0
 121: PPUSH
 122: CALL 2735 0 2
 126: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 127: LD_ADDR_EXP 4
 131: PUSH
 132: LD_STRING Bobby
 134: PPUSH
 135: LD_INT 0
 137: PPUSH
 138: CALL 2735 0 2
 142: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 143: LD_ADDR_EXP 5
 147: PUSH
 148: LD_STRING Lisa
 150: PPUSH
 151: LD_INT 0
 153: PPUSH
 154: CALL 2735 0 2
 158: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 159: LD_EXP 1
 163: PPUSH
 164: LD_EXP 14
 168: PUSH
 169: LD_INT 1
 171: ARRAY
 172: PPUSH
 173: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 177: LD_EXP 2
 181: PPUSH
 182: LD_EXP 14
 186: PUSH
 187: LD_INT 2
 189: ARRAY
 190: PPUSH
 191: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 195: LD_EXP 3
 199: PPUSH
 200: LD_EXP 14
 204: PUSH
 205: LD_INT 3
 207: ARRAY
 208: PPUSH
 209: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 213: LD_EXP 4
 217: PPUSH
 218: LD_EXP 14
 222: PUSH
 223: LD_INT 4
 225: ARRAY
 226: PPUSH
 227: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 231: LD_EXP 5
 235: PPUSH
 236: LD_EXP 14
 240: PUSH
 241: LD_INT 5
 243: ARRAY
 244: PPUSH
 245: CALL_OW 52
// end ;
 249: LD_VAR 0 1
 253: RET
// export function PrepareVehicles ; var i , veh ; begin
 254: LD_INT 0
 256: PPUSH
 257: PPUSH
 258: PPUSH
// uc_side = 1 ;
 259: LD_ADDR_OWVAR 20
 263: PUSH
 264: LD_INT 1
 266: ST_TO_ADDR
// uc_nation = 1 ;
 267: LD_ADDR_OWVAR 21
 271: PUSH
 272: LD_INT 1
 274: ST_TO_ADDR
// for i := 1 to 5 do
 275: LD_ADDR_VAR 0 2
 279: PUSH
 280: DOUBLE
 281: LD_INT 1
 283: DEC
 284: ST_TO_ADDR
 285: LD_INT 5
 287: PUSH
 288: FOR_TO
 289: IFFALSE 461
// begin vc_engine = 1 ;
 291: LD_ADDR_OWVAR 39
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// vc_control = 1 ;
 299: LD_ADDR_OWVAR 38
 303: PUSH
 304: LD_INT 1
 306: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
 307: LD_ADDR_OWVAR 40
 311: PUSH
 312: LD_INT 3
 314: PUSH
 315: LD_INT 4
 317: PUSH
 318: LD_INT 5
 320: PUSH
 321: LD_INT 12
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 1
 332: PPUSH
 333: LD_INT 4
 335: PPUSH
 336: CALL_OW 12
 340: ARRAY
 341: ST_TO_ADDR
// vc_chassis = 3 ;
 342: LD_ADDR_OWVAR 37
 346: PUSH
 347: LD_INT 3
 349: ST_TO_ADDR
// veh = CreateVehicle ;
 350: LD_ADDR_VAR 0 3
 354: PUSH
 355: CALL_OW 45
 359: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 360: LD_VAR 0 3
 364: PPUSH
 365: LD_INT 1
 367: PPUSH
 368: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 372: LD_VAR 0 3
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 0
 382: PPUSH
 383: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
 387: LD_ADDR_EXP 14
 391: PUSH
 392: LD_EXP 14
 396: PUSH
 397: LD_VAR 0 3
 401: ADD
 402: ST_TO_ADDR
// if vc_weapon = 12 then
 403: LD_OWVAR 40
 407: PUSH
 408: LD_INT 12
 410: EQUAL
 411: IFFALSE 459
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , Rand ( 1 , 10 ) * 10 ) ;
 413: LD_VAR 0 3
 417: PPUSH
 418: LD_INT 1
 420: PUSH
 421: LD_INT 3
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 1
 430: PPUSH
 431: LD_INT 2
 433: PPUSH
 434: CALL_OW 12
 438: ARRAY
 439: PPUSH
 440: LD_INT 1
 442: PPUSH
 443: LD_INT 10
 445: PPUSH
 446: CALL_OW 12
 450: PUSH
 451: LD_INT 10
 453: MUL
 454: PPUSH
 455: CALL_OW 291
// end ;
 459: GO 288
 461: POP
 462: POP
// end ;
 463: LD_VAR 0 1
 467: RET
// export function PrepareCathyTeam ; begin
 468: LD_INT 0
 470: PPUSH
// uc_side = 4 ;
 471: LD_ADDR_OWVAR 20
 475: PUSH
 476: LD_INT 4
 478: ST_TO_ADDR
// uc_nation = 1 ;
 479: LD_ADDR_OWVAR 21
 483: PUSH
 484: LD_INT 1
 486: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
 487: LD_ADDR_EXP 6
 491: PUSH
 492: LD_STRING Simms
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: CALL 2735 0 2
 502: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 503: LD_ADDR_EXP 7
 507: PUSH
 508: LD_STRING Denis
 510: PPUSH
 511: LD_INT 0
 513: PPUSH
 514: CALL 2735 0 2
 518: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
 519: LD_ADDR_EXP 8
 523: PUSH
 524: LD_STRING Joan
 526: PPUSH
 527: LD_INT 0
 529: PPUSH
 530: CALL 2735 0 2
 534: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , false ) ;
 535: LD_ADDR_EXP 9
 539: PUSH
 540: LD_STRING Khatam
 542: PPUSH
 543: LD_INT 0
 545: PPUSH
 546: CALL 2735 0 2
 550: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 551: LD_ADDR_EXP 10
 555: PUSH
 556: LD_STRING Gladstone
 558: PPUSH
 559: LD_INT 0
 561: PPUSH
 562: CALL 2735 0 2
 566: ST_TO_ADDR
// Gladstone = PrepareUnit ( DeltaDoctor , false ) ;
 567: LD_ADDR_EXP 10
 571: PUSH
 572: LD_STRING DeltaDoctor
 574: PPUSH
 575: LD_INT 0
 577: PPUSH
 578: CALL 2735 0 2
 582: ST_TO_ADDR
// hc_class := 2 ;
 583: LD_ADDR_OWVAR 28
 587: PUSH
 588: LD_INT 2
 590: ST_TO_ADDR
// hc_sex := sex_male ;
 591: LD_ADDR_OWVAR 27
 595: PUSH
 596: LD_INT 1
 598: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 599: LD_ADDR_OWVAR 33
 603: PUSH
 604: LD_STRING SecondCharsGal
 606: ST_TO_ADDR
// hc_face_number := 60 ;
 607: LD_ADDR_OWVAR 34
 611: PUSH
 612: LD_INT 60
 614: ST_TO_ADDR
// hc_name := Steve Holland ;
 615: LD_ADDR_OWVAR 26
 619: PUSH
 620: LD_STRING Steve Holland
 622: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 623: LD_ADDR_OWVAR 31
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: LD_INT 7
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: LD_INT 0
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: LIST
 644: LIST
 645: ST_TO_ADDR
// Steve = CreateHuman ;
 646: LD_ADDR_EXP 11
 650: PUSH
 651: CALL_OW 44
 655: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
 656: LD_EXP 6
 660: PPUSH
 661: LD_INT 1
 663: PPUSH
 664: LD_INT 0
 666: PPUSH
 667: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
 671: LD_EXP 7
 675: PPUSH
 676: LD_INT 1
 678: PPUSH
 679: LD_INT 0
 681: PPUSH
 682: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
 686: LD_EXP 8
 690: PPUSH
 691: LD_INT 1
 693: PPUSH
 694: LD_INT 0
 696: PPUSH
 697: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
 701: LD_EXP 9
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: LD_INT 0
 711: PPUSH
 712: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
 716: LD_EXP 10
 720: PPUSH
 721: LD_INT 1
 723: PPUSH
 724: LD_INT 0
 726: PPUSH
 727: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
 731: LD_EXP 12
 735: PPUSH
 736: LD_INT 1
 738: PPUSH
 739: LD_INT 0
 741: PPUSH
 742: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
 746: LD_EXP 11
 750: PPUSH
 751: LD_INT 1
 753: PPUSH
 754: LD_INT 0
 756: PPUSH
 757: CALL_OW 49
// SetClass ( [ Khatam , Denis ] , 4 ) ;
 761: LD_EXP 9
 765: PUSH
 766: LD_EXP 7
 770: PUSH
 771: EMPTY
 772: LIST
 773: LIST
 774: PPUSH
 775: LD_INT 4
 777: PPUSH
 778: CALL_OW 336
// AddComBuild ( Steve , b_depot , 101 , 30 , 2 ) ;
 782: LD_EXP 11
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: LD_INT 101
 792: PPUSH
 793: LD_INT 30
 795: PPUSH
 796: LD_INT 2
 798: PPUSH
 799: CALL_OW 205
// uc_side = 1 ;
 803: LD_ADDR_OWVAR 20
 807: PUSH
 808: LD_INT 1
 810: ST_TO_ADDR
// hc_class := 1 ;
 811: LD_ADDR_OWVAR 28
 815: PUSH
 816: LD_INT 1
 818: ST_TO_ADDR
// hc_sex := sex_female ;
 819: LD_ADDR_OWVAR 27
 823: PUSH
 824: LD_INT 2
 826: ST_TO_ADDR
// hc_gallery :=  ;
 827: LD_ADDR_OWVAR 33
 831: PUSH
 832: LD_STRING 
 834: ST_TO_ADDR
// hc_name :=  ;
 835: LD_ADDR_OWVAR 26
 839: PUSH
 840: LD_STRING 
 842: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 843: LD_ADDR_OWVAR 31
 847: PUSH
 848: LD_INT 1
 850: PUSH
 851: LD_INT 7
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: LD_INT 0
 859: PUSH
 860: EMPTY
 861: LIST
 862: LIST
 863: LIST
 864: LIST
 865: ST_TO_ADDR
// AmScout = CreateHuman ;
 866: LD_ADDR_EXP 13
 870: PUSH
 871: CALL_OW 44
 875: ST_TO_ADDR
// end ; end_of_file
 876: LD_VAR 0 1
 880: RET
// export function PrepareRussians ; var i , un ; begin
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// for i = 1 to 14 do
 886: LD_ADDR_VAR 0 2
 890: PUSH
 891: DOUBLE
 892: LD_INT 1
 894: DEC
 895: ST_TO_ADDR
 896: LD_INT 14
 898: PUSH
 899: FOR_TO
 900: IFFALSE 986
// begin uc_side = 3 ;
 902: LD_ADDR_OWVAR 20
 906: PUSH
 907: LD_INT 3
 909: ST_TO_ADDR
// uc_nation = 3 ;
 910: LD_ADDR_OWVAR 21
 914: PUSH
 915: LD_INT 3
 917: ST_TO_ADDR
// hc_gallery =  ;
 918: LD_ADDR_OWVAR 33
 922: PUSH
 923: LD_STRING 
 925: ST_TO_ADDR
// hc_name =  ;
 926: LD_ADDR_OWVAR 26
 930: PUSH
 931: LD_STRING 
 933: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
 934: LD_INT 0
 936: PPUSH
 937: LD_INT 1
 939: PPUSH
 940: LD_EXP 22
 944: PPUSH
 945: LD_EXP 23
 949: PPUSH
 950: CALL_OW 12
 954: PPUSH
 955: CALL_OW 380
// un = CreateHuman ;
 959: LD_ADDR_VAR 0 3
 963: PUSH
 964: CALL_OW 44
 968: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
 969: LD_VAR 0 3
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: CALL_OW 49
// end ;
 984: GO 899
 986: POP
 987: POP
// for i = 1 to 6 do
 988: LD_ADDR_VAR 0 2
 992: PUSH
 993: DOUBLE
 994: LD_INT 1
 996: DEC
 997: ST_TO_ADDR
 998: LD_INT 6
1000: PUSH
1001: FOR_TO
1002: IFFALSE 1088
// begin uc_side = 3 ;
1004: LD_ADDR_OWVAR 20
1008: PUSH
1009: LD_INT 3
1011: ST_TO_ADDR
// uc_nation = 3 ;
1012: LD_ADDR_OWVAR 21
1016: PUSH
1017: LD_INT 3
1019: ST_TO_ADDR
// hc_gallery =  ;
1020: LD_ADDR_OWVAR 33
1024: PUSH
1025: LD_STRING 
1027: ST_TO_ADDR
// hc_name =  ;
1028: LD_ADDR_OWVAR 26
1032: PUSH
1033: LD_STRING 
1035: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1036: LD_INT 0
1038: PPUSH
1039: LD_INT 2
1041: PPUSH
1042: LD_EXP 22
1046: PPUSH
1047: LD_EXP 23
1051: PPUSH
1052: CALL_OW 12
1056: PPUSH
1057: CALL_OW 380
// un = CreateHuman ;
1061: LD_ADDR_VAR 0 3
1065: PUSH
1066: CALL_OW 44
1070: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1071: LD_VAR 0 3
1075: PPUSH
1076: LD_INT 3
1078: PPUSH
1079: LD_INT 0
1081: PPUSH
1082: CALL_OW 49
// end ;
1086: GO 1001
1088: POP
1089: POP
// for i = 1 to 6 do
1090: LD_ADDR_VAR 0 2
1094: PUSH
1095: DOUBLE
1096: LD_INT 1
1098: DEC
1099: ST_TO_ADDR
1100: LD_INT 6
1102: PUSH
1103: FOR_TO
1104: IFFALSE 1190
// begin uc_side = 3 ;
1106: LD_ADDR_OWVAR 20
1110: PUSH
1111: LD_INT 3
1113: ST_TO_ADDR
// uc_nation = 3 ;
1114: LD_ADDR_OWVAR 21
1118: PUSH
1119: LD_INT 3
1121: ST_TO_ADDR
// hc_gallery =  ;
1122: LD_ADDR_OWVAR 33
1126: PUSH
1127: LD_STRING 
1129: ST_TO_ADDR
// hc_name =  ;
1130: LD_ADDR_OWVAR 26
1134: PUSH
1135: LD_STRING 
1137: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1138: LD_INT 0
1140: PPUSH
1141: LD_INT 3
1143: PPUSH
1144: LD_EXP 22
1148: PPUSH
1149: LD_EXP 23
1153: PPUSH
1154: CALL_OW 12
1158: PPUSH
1159: CALL_OW 380
// un = CreateHuman ;
1163: LD_ADDR_VAR 0 3
1167: PUSH
1168: CALL_OW 44
1172: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1173: LD_VAR 0 3
1177: PPUSH
1178: LD_INT 3
1180: PPUSH
1181: LD_INT 0
1183: PPUSH
1184: CALL_OW 49
// end ;
1188: GO 1103
1190: POP
1191: POP
// for i = 1 to 4 do
1192: LD_ADDR_VAR 0 2
1196: PUSH
1197: DOUBLE
1198: LD_INT 1
1200: DEC
1201: ST_TO_ADDR
1202: LD_INT 4
1204: PUSH
1205: FOR_TO
1206: IFFALSE 1292
// begin uc_side = 3 ;
1208: LD_ADDR_OWVAR 20
1212: PUSH
1213: LD_INT 3
1215: ST_TO_ADDR
// uc_nation = 3 ;
1216: LD_ADDR_OWVAR 21
1220: PUSH
1221: LD_INT 3
1223: ST_TO_ADDR
// hc_gallery =  ;
1224: LD_ADDR_OWVAR 33
1228: PUSH
1229: LD_STRING 
1231: ST_TO_ADDR
// hc_name =  ;
1232: LD_ADDR_OWVAR 26
1236: PUSH
1237: LD_STRING 
1239: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1240: LD_INT 0
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: LD_EXP 22
1250: PPUSH
1251: LD_EXP 23
1255: PPUSH
1256: CALL_OW 12
1260: PPUSH
1261: CALL_OW 380
// un = CreateHuman ;
1265: LD_ADDR_VAR 0 3
1269: PUSH
1270: CALL_OW 44
1274: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1275: LD_VAR 0 3
1279: PPUSH
1280: LD_INT 3
1282: PPUSH
1283: LD_INT 0
1285: PPUSH
1286: CALL_OW 49
// end ;
1290: GO 1205
1292: POP
1293: POP
// end ; end_of_file end_of_file
1294: LD_VAR 0 1
1298: RET
// every 1 do
1299: GO 1301
1301: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
1302: LD_EXP 1
1306: PPUSH
1307: CALL_OW 87
// DialogueOn ;
1311: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
1315: LD_EXP 2
1319: PPUSH
1320: LD_STRING D2-Gary-1
1322: PPUSH
1323: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
1327: LD_EXP 1
1331: PPUSH
1332: LD_STRING D2-JMM-1
1334: PPUSH
1335: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
1339: LD_EXP 2
1343: PPUSH
1344: LD_STRING D2-Gary-2
1346: PPUSH
1347: CALL_OW 88
// DialogueOff ;
1351: CALL_OW 7
// ChangeMissionObjectives ( M1 ) ;
1355: LD_STRING M1
1357: PPUSH
1358: CALL_OW 337
// end ;
1362: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 12 do
1363: LD_EXP 1
1367: PPUSH
1368: LD_EXP 6
1372: PPUSH
1373: CALL_OW 296
1377: PUSH
1378: LD_INT 12
1380: LESS
1381: IFFALSE 1703
1383: GO 1385
1385: DISABLE
// begin InGameOn ;
1386: CALL_OW 8
// ComExitVehicle ( JMM ) ;
1390: LD_EXP 1
1394: PPUSH
1395: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
1399: LD_EXP 1
1403: PPUSH
1404: CALL_OW 87
// wait ( 0 0$1 ) ;
1408: LD_INT 35
1410: PPUSH
1411: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
1415: LD_EXP 6
1419: PUSH
1420: LD_EXP 8
1424: PUSH
1425: LD_EXP 7
1429: PUSH
1430: LD_EXP 9
1434: PUSH
1435: EMPTY
1436: LIST
1437: LIST
1438: LIST
1439: LIST
1440: PPUSH
1441: LD_EXP 1
1445: PPUSH
1446: CALL_OW 112
// ComTurnUnit ( JMM , Simms ) ;
1450: LD_EXP 1
1454: PPUSH
1455: LD_EXP 6
1459: PPUSH
1460: CALL_OW 119
// wait ( 0 0$2 ) ;
1464: LD_INT 70
1466: PPUSH
1467: CALL_OW 67
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
1471: LD_EXP 6
1475: PUSH
1476: LD_EXP 8
1480: PUSH
1481: LD_EXP 7
1485: PUSH
1486: LD_EXP 9
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: PPUSH
1497: LD_EXP 1
1501: PPUSH
1502: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
1506: LD_EXP 1
1510: PUSH
1511: LD_EXP 6
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
1524: LD_EXP 6
1528: PPUSH
1529: LD_STRING D2a-Sim-1
1531: PPUSH
1532: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1536: LD_EXP 1
1540: PPUSH
1541: LD_STRING D2a-JMM-1
1543: PPUSH
1544: CALL_OW 88
// ComTurnUnit ( JMM , Joan ) ;
1548: LD_EXP 1
1552: PPUSH
1553: LD_EXP 8
1557: PPUSH
1558: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
1562: LD_EXP 8
1566: PPUSH
1567: LD_STRING D2b-Joan-1
1569: PPUSH
1570: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
1574: LD_EXP 1
1578: PPUSH
1579: LD_STRING D2b-JMM-1
1581: PPUSH
1582: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
1586: LD_EXP 8
1590: PPUSH
1591: LD_STRING D2b-Joan-2
1593: PPUSH
1594: CALL_OW 88
// ComTurnUnit ( JMM , Denis ) ;
1598: LD_EXP 1
1602: PPUSH
1603: LD_EXP 7
1607: PPUSH
1608: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
1612: LD_EXP 7
1616: PPUSH
1617: LD_STRING D2c-Den-1
1619: PPUSH
1620: CALL_OW 88
// ComTurnUnit ( JMM , Khatam ) ;
1624: LD_EXP 1
1628: PPUSH
1629: LD_EXP 9
1633: PPUSH
1634: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
1638: LD_EXP 1
1642: PPUSH
1643: LD_STRING D2c-JMM-1
1645: PPUSH
1646: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
1650: LD_EXP 9
1654: PPUSH
1655: LD_STRING D2c-Khat-1
1657: PPUSH
1658: CALL_OW 88
// InGameOff ;
1662: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1666: LD_INT 22
1668: PUSH
1669: LD_INT 4
1671: PUSH
1672: EMPTY
1673: LIST
1674: LIST
1675: PPUSH
1676: CALL_OW 69
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
1688: LD_STRING M1a
1690: PPUSH
1691: CALL_OW 337
// joinEpsilon = 1 ;
1695: LD_ADDR_EXP 15
1699: PUSH
1700: LD_INT 1
1702: ST_TO_ADDR
// end ;
1703: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 do
1704: LD_INT 22
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: EMPTY
1711: LIST
1712: LIST
1713: PUSH
1714: LD_INT 2
1716: PUSH
1717: LD_INT 30
1719: PUSH
1720: LD_INT 7
1722: PUSH
1723: EMPTY
1724: LIST
1725: LIST
1726: PUSH
1727: LD_INT 30
1729: PUSH
1730: LD_INT 8
1732: PUSH
1733: EMPTY
1734: LIST
1735: LIST
1736: PUSH
1737: LD_INT 1
1739: PUSH
1740: LD_INT 30
1742: PUSH
1743: LD_INT 11
1745: PUSH
1746: EMPTY
1747: LIST
1748: LIST
1749: PUSH
1750: LD_INT 1
1752: PUSH
1753: LD_INT 2
1755: PUSH
1756: LD_INT 30
1758: PUSH
1759: LD_INT 26
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 30
1768: PUSH
1769: LD_INT 27
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: LD_INT 30
1778: PUSH
1779: LD_INT 28
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: PUSH
1786: EMPTY
1787: LIST
1788: LIST
1789: LIST
1790: LIST
1791: PUSH
1792: EMPTY
1793: LIST
1794: LIST
1795: PUSH
1796: EMPTY
1797: LIST
1798: LIST
1799: LIST
1800: PUSH
1801: EMPTY
1802: LIST
1803: LIST
1804: LIST
1805: LIST
1806: PUSH
1807: EMPTY
1808: LIST
1809: LIST
1810: PPUSH
1811: CALL_OW 69
1815: PUSH
1816: LD_INT 0
1818: GREATER
1819: PUSH
1820: LD_INT 22
1822: PUSH
1823: LD_INT 1
1825: PUSH
1826: EMPTY
1827: LIST
1828: LIST
1829: PUSH
1830: LD_INT 2
1832: PUSH
1833: LD_INT 30
1835: PUSH
1836: LD_INT 26
1838: PUSH
1839: EMPTY
1840: LIST
1841: LIST
1842: PUSH
1843: LD_INT 30
1845: PUSH
1846: LD_INT 27
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 30
1855: PUSH
1856: LD_INT 28
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PPUSH
1873: CALL_OW 69
1877: PUSH
1878: LD_INT 0
1880: GREATER
1881: AND
1882: IFFALSE 2434
1884: GO 1886
1886: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-1 , D3-Sci1-1 ) ;
1887: LD_INT 22
1889: PUSH
1890: LD_INT 1
1892: PUSH
1893: EMPTY
1894: LIST
1895: LIST
1896: PUSH
1897: LD_INT 25
1899: PUSH
1900: LD_INT 4
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 26
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: PPUSH
1922: CALL_OW 69
1926: PPUSH
1927: LD_STRING D3-Sci1-1
1929: PPUSH
1930: LD_STRING D3-Sci1-1
1932: PPUSH
1933: CALL 2792 0 3
// Say ( Gary , D3-Gary-1 ) ;
1937: LD_EXP 2
1941: PPUSH
1942: LD_STRING D3-Gary-1
1944: PPUSH
1945: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-2 , D3-Sci1-2 ) ;
1949: LD_INT 22
1951: PUSH
1952: LD_INT 1
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 25
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: EMPTY
1966: LIST
1967: LIST
1968: PUSH
1969: LD_INT 26
1971: PUSH
1972: LD_INT 1
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: LIST
1983: PPUSH
1984: CALL_OW 69
1988: PPUSH
1989: LD_STRING D3-Sci1-2
1991: PPUSH
1992: LD_STRING D3-Sci1-2
1994: PPUSH
1995: CALL 2792 0 3
// Say ( JMM , D3-JMM-2 ) ;
1999: LD_EXP 1
2003: PPUSH
2004: LD_STRING D3-JMM-2
2006: PPUSH
2007: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-3 , D3-Sci1-3 ) ;
2011: LD_INT 22
2013: PUSH
2014: LD_INT 1
2016: PUSH
2017: EMPTY
2018: LIST
2019: LIST
2020: PUSH
2021: LD_INT 25
2023: PUSH
2024: LD_INT 4
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: PUSH
2031: LD_INT 26
2033: PUSH
2034: LD_INT 1
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: LIST
2045: PPUSH
2046: CALL_OW 69
2050: PPUSH
2051: LD_STRING D3-Sci1-3
2053: PPUSH
2054: LD_STRING D3-Sci1-3
2056: PPUSH
2057: CALL 2792 0 3
// Say ( JMM , D3-JMM-3 ) ;
2061: LD_EXP 1
2065: PPUSH
2066: LD_STRING D3-JMM-3
2068: PPUSH
2069: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-4 , D3-Sci1-4 ) ;
2073: LD_INT 22
2075: PUSH
2076: LD_INT 1
2078: PUSH
2079: EMPTY
2080: LIST
2081: LIST
2082: PUSH
2083: LD_INT 25
2085: PUSH
2086: LD_INT 4
2088: PUSH
2089: EMPTY
2090: LIST
2091: LIST
2092: PUSH
2093: LD_INT 26
2095: PUSH
2096: LD_INT 1
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: LIST
2107: PPUSH
2108: CALL_OW 69
2112: PPUSH
2113: LD_STRING D3-Sci1-4
2115: PPUSH
2116: LD_STRING D3-Sci1-4
2118: PPUSH
2119: CALL 2792 0 3
// SetTech ( 12 , 1 , state_enabled ) ;
2123: LD_INT 12
2125: PPUSH
2126: LD_INT 1
2128: PPUSH
2129: LD_INT 1
2131: PPUSH
2132: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
2136: LD_INT 32
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
2149: LD_INT 12
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
2162: LD_STRING M2
2164: PPUSH
2165: CALL_OW 337
// wait ( 3 3$0 ) ;
2169: LD_INT 6300
2171: PPUSH
2172: CALL_OW 67
// if IsOK ( Simms ) then
2176: LD_EXP 6
2180: PPUSH
2181: CALL_OW 302
2185: IFFALSE 2327
// begin DialogueOn ;
2187: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
2191: LD_EXP 6
2195: PPUSH
2196: LD_STRING D3a-Sim-1
2198: PPUSH
2199: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
2203: LD_EXP 7
2207: PPUSH
2208: LD_STRING D3a-Sci1-1
2210: PPUSH
2211: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
2215: LD_EXP 6
2219: PPUSH
2220: LD_STRING D3a-Sim-2
2222: PPUSH
2223: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
2227: LD_EXP 7
2231: PPUSH
2232: LD_STRING D3a-Sci1-2
2234: PPUSH
2235: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
2239: LD_EXP 6
2243: PPUSH
2244: LD_STRING D3a-Sim-3
2246: PPUSH
2247: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
2251: LD_EXP 7
2255: PPUSH
2256: LD_STRING D3a-Sci1-3
2258: PPUSH
2259: CALL_OW 88
// Say ( Simms , D3a-Sim-4 ) ;
2263: LD_EXP 6
2267: PPUSH
2268: LD_STRING D3a-Sim-4
2270: PPUSH
2271: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
2275: LD_EXP 7
2279: PPUSH
2280: LD_STRING D3a-Sci1-4
2282: PPUSH
2283: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
2287: LD_EXP 6
2291: PPUSH
2292: LD_STRING D3a-Sim-5
2294: PPUSH
2295: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
2299: LD_EXP 7
2303: PPUSH
2304: LD_STRING D3a-Sci1-5
2306: PPUSH
2307: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
2311: LD_EXP 6
2315: PPUSH
2316: LD_STRING D3a-Sim-6
2318: PPUSH
2319: CALL_OW 88
// DialogueOff ;
2323: CALL_OW 7
// end ; wait ( 2 2$0 ) ;
2327: LD_INT 4200
2329: PPUSH
2330: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
2334: LD_INT 22
2336: PUSH
2337: LD_INT 2
2339: PUSH
2340: EMPTY
2341: LIST
2342: LIST
2343: PUSH
2344: LD_INT 25
2346: PUSH
2347: LD_INT 4
2349: PUSH
2350: EMPTY
2351: LIST
2352: LIST
2353: PUSH
2354: LD_INT 26
2356: PUSH
2357: LD_INT 1
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PUSH
2364: EMPTY
2365: LIST
2366: LIST
2367: LIST
2368: PPUSH
2369: CALL_OW 69
2373: PPUSH
2374: LD_STRING D5-Ar1-1
2376: PPUSH
2377: LD_STRING D5-Ar1-1
2379: PPUSH
2380: CALL 2792 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
2384: LD_INT 22
2386: PUSH
2387: LD_INT 2
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 25
2396: PUSH
2397: LD_INT 4
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 26
2406: PUSH
2407: LD_INT 1
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: LIST
2418: PPUSH
2419: CALL_OW 69
2423: PPUSH
2424: LD_STRING D5-Ar1-2
2426: PPUSH
2427: LD_STRING D5-Ar1-2
2429: PPUSH
2430: CALL 2792 0 3
// end ;
2434: END
// every 2 2$1 trigger joinEpsilon = 1 do
2435: LD_EXP 15
2439: PUSH
2440: LD_INT 1
2442: EQUAL
2443: IFFALSE 2478
2445: GO 2447
2447: DISABLE
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
2448: LD_EXP 13
2452: PPUSH
2453: LD_STRING D4-FSol1-1
2455: PPUSH
2456: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
2460: LD_STRING M3
2462: PPUSH
2463: CALL_OW 337
// PrepareRussians ;
2467: CALL 881 0 0
// BuildRussianBase ( 1 ) ;
2471: LD_INT 1
2473: PPUSH
2474: CALL 3034 0 1
// end ;
2478: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched do
2479: LD_INT 54
2481: PPUSH
2482: LD_INT 1
2484: PPUSH
2485: CALL_OW 321
2489: PUSH
2490: LD_INT 2
2492: EQUAL
2493: IFFALSE 2734
2495: GO 2497
2497: DISABLE
// begin DialogueOn ;
2498: CALL_OW 6
// Say ( JMM ,  D6-JMM-1 ) ;
2502: LD_EXP 1
2506: PPUSH
2507: LD_STRING  D6-JMM-1
2509: PPUSH
2510: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
2514: LD_EXP 7
2518: PPUSH
2519: LD_STRING D6-Sci1-1
2521: PPUSH
2522: CALL_OW 88
// Say ( JMM ,  D6-JMM-2 ) ;
2526: LD_EXP 1
2530: PPUSH
2531: LD_STRING  D6-JMM-2
2533: PPUSH
2534: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
2538: LD_EXP 7
2542: PPUSH
2543: LD_STRING D6-Sci1-2
2545: PPUSH
2546: CALL_OW 88
// Say ( JMM ,  D6-JMM-3 ) ;
2550: LD_EXP 1
2554: PPUSH
2555: LD_STRING  D6-JMM-3
2557: PPUSH
2558: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
2562: LD_EXP 7
2566: PPUSH
2567: LD_STRING D6-Sci1-3
2569: PPUSH
2570: CALL_OW 88
// Say ( JMM ,  D6-JMM-4 ) ;
2574: LD_EXP 1
2578: PPUSH
2579: LD_STRING  D6-JMM-4
2581: PPUSH
2582: CALL_OW 88
// DialogueOff ;
2586: CALL_OW 7
// wait ( [ 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 6 ) ] ) ;
2590: LD_INT 4200
2592: PUSH
2593: LD_INT 5250
2595: PUSH
2596: LD_INT 6300
2598: PUSH
2599: LD_INT 7350
2601: PUSH
2602: LD_INT 8400
2604: PUSH
2605: LD_INT 9450
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: LIST
2612: LIST
2613: LIST
2614: LIST
2615: PUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 6
2621: PPUSH
2622: CALL_OW 12
2626: ARRAY
2627: PPUSH
2628: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
2632: LD_INT 22
2634: PUSH
2635: LD_INT 1
2637: PUSH
2638: EMPTY
2639: LIST
2640: LIST
2641: PUSH
2642: LD_INT 25
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: EMPTY
2649: LIST
2650: LIST
2651: PUSH
2652: LD_INT 26
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: LIST
2666: PUSH
2667: LD_EXP 1
2671: PUSH
2672: EMPTY
2673: LIST
2674: DIFF
2675: PPUSH
2676: CALL_OW 69
2680: PPUSH
2681: LD_STRING D8-Sol1-1
2683: PPUSH
2684: LD_STRING D8-Sol1-1
2686: PPUSH
2687: CALL 2792 0 3
// Say ( DeltaDoctor , D8-Sci1-1 ) ;
2691: LD_EXP 12
2695: PPUSH
2696: LD_STRING D8-Sci1-1
2698: PPUSH
2699: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
2703: LD_EXP 1
2707: PPUSH
2708: LD_STRING D8-JMM-1
2710: PPUSH
2711: CALL_OW 88
// wait ( 0 0$30 ) ;
2715: LD_INT 1050
2717: PPUSH
2718: CALL_OW 67
// Say ( Gary , D8a-Gary-1 ) ;
2722: LD_EXP 2
2726: PPUSH
2727: LD_STRING D8a-Gary-1
2729: PPUSH
2730: CALL_OW 88
// end ; end_of_file
2734: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2735: LD_INT 0
2737: PPUSH
2738: PPUSH
// if exist_mode then
2739: LD_VAR 0 2
2743: IFFALSE 2762
// unit := CreateCharacter ( ident ) else
2745: LD_ADDR_VAR 0 4
2749: PUSH
2750: LD_VAR 0 1
2754: PPUSH
2755: CALL_OW 34
2759: ST_TO_ADDR
2760: GO 2777
// unit := NewCharacter ( ident ) ;
2762: LD_ADDR_VAR 0 4
2766: PUSH
2767: LD_VAR 0 1
2771: PPUSH
2772: CALL_OW 25
2776: ST_TO_ADDR
// result := unit ;
2777: LD_ADDR_VAR 0 3
2781: PUSH
2782: LD_VAR 0 4
2786: ST_TO_ADDR
// end ;
2787: LD_VAR 0 3
2791: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2792: LD_INT 0
2794: PPUSH
2795: PPUSH
2796: PPUSH
// rnd = rand ( 1 , characters ) ;
2797: LD_ADDR_VAR 0 6
2801: PUSH
2802: LD_INT 1
2804: PPUSH
2805: LD_VAR 0 1
2809: PPUSH
2810: CALL_OW 12
2814: ST_TO_ADDR
// for i = 1 to characters do
2815: LD_ADDR_VAR 0 5
2819: PUSH
2820: DOUBLE
2821: LD_INT 1
2823: DEC
2824: ST_TO_ADDR
2825: LD_VAR 0 1
2829: PUSH
2830: FOR_TO
2831: IFFALSE 2941
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2833: LD_VAR 0 5
2837: PUSH
2838: LD_VAR 0 6
2842: EQUAL
2843: PUSH
2844: LD_VAR 0 1
2848: PUSH
2849: LD_VAR 0 5
2853: ARRAY
2854: PPUSH
2855: CALL_OW 258
2859: PUSH
2860: LD_INT 1
2862: EQUAL
2863: AND
2864: IFFALSE 2886
// Say ( characters [ i ] , dialogMID ) ;
2866: LD_VAR 0 1
2870: PUSH
2871: LD_VAR 0 5
2875: ARRAY
2876: PPUSH
2877: LD_VAR 0 2
2881: PPUSH
2882: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2886: LD_VAR 0 5
2890: PUSH
2891: LD_VAR 0 6
2895: EQUAL
2896: PUSH
2897: LD_VAR 0 1
2901: PUSH
2902: LD_VAR 0 5
2906: ARRAY
2907: PPUSH
2908: CALL_OW 258
2912: PUSH
2913: LD_INT 2
2915: EQUAL
2916: AND
2917: IFFALSE 2939
// Say ( characters [ i ] , dialogFID ) ;
2919: LD_VAR 0 1
2923: PUSH
2924: LD_VAR 0 5
2928: ARRAY
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 88
// end ;
2939: GO 2830
2941: POP
2942: POP
// end ;
2943: LD_VAR 0 4
2947: RET
// export function PrepareDifficulty ; begin
2948: LD_INT 0
2950: PPUSH
// if difficulty = 1 then
2951: LD_OWVAR 67
2955: PUSH
2956: LD_INT 1
2958: EQUAL
2959: IFFALSE 2977
// begin RuSolMinLevel = 9 ;
2961: LD_ADDR_EXP 22
2965: PUSH
2966: LD_INT 9
2968: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
2969: LD_ADDR_EXP 23
2973: PUSH
2974: LD_INT 10
2976: ST_TO_ADDR
// end ; if difficulty = 2 then
2977: LD_OWVAR 67
2981: PUSH
2982: LD_INT 2
2984: EQUAL
2985: IFFALSE 3003
// begin RuSolMinLevel = 9 ;
2987: LD_ADDR_EXP 22
2991: PUSH
2992: LD_INT 9
2994: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
2995: LD_ADDR_EXP 23
2999: PUSH
3000: LD_INT 10
3002: ST_TO_ADDR
// end ; if difficulty = 3 then
3003: LD_OWVAR 67
3007: PUSH
3008: LD_INT 3
3010: EQUAL
3011: IFFALSE 3029
// begin RuSolMinLevel = 9 ;
3013: LD_ADDR_EXP 22
3017: PUSH
3018: LD_INT 9
3020: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
3021: LD_ADDR_EXP 23
3025: PUSH
3026: LD_INT 10
3028: ST_TO_ADDR
// end ; end ;
3029: LD_VAR 0 1
3033: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
3034: LD_INT 0
3036: PPUSH
3037: PPUSH
3038: PPUSH
3039: PPUSH
// if position = 1 then
3040: LD_VAR 0 1
3044: PUSH
3045: LD_INT 1
3047: EQUAL
3048: IFFALSE 3733
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
3050: LD_ADDR_VAR 0 4
3054: PUSH
3055: LD_INT 22
3057: PUSH
3058: LD_INT 3
3060: PUSH
3061: EMPTY
3062: LIST
3063: LIST
3064: PUSH
3065: LD_INT 25
3067: PUSH
3068: LD_INT 2
3070: PUSH
3071: EMPTY
3072: LIST
3073: LIST
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: PPUSH
3079: CALL_OW 69
3083: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
3084: LD_ADDR_VAR 0 5
3088: PUSH
3089: LD_INT 0
3091: PUSH
3092: LD_INT 49
3094: PUSH
3095: LD_INT 74
3097: PUSH
3098: LD_INT 3
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: PUSH
3107: LD_INT 4
3109: PUSH
3110: LD_INT 73
3112: PUSH
3113: LD_INT 88
3115: PUSH
3116: LD_INT 5
3118: PUSH
3119: EMPTY
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 4
3127: PUSH
3128: LD_INT 56
3130: PUSH
3131: LD_INT 62
3133: PUSH
3134: LD_INT 3
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: LIST
3141: LIST
3142: PUSH
3143: LD_INT 29
3145: PUSH
3146: LD_INT 43
3148: PUSH
3149: LD_INT 68
3151: PUSH
3152: LD_INT 2
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: LIST
3159: LIST
3160: PUSH
3161: LD_INT 30
3163: PUSH
3164: LD_INT 43
3166: PUSH
3167: LD_INT 79
3169: PUSH
3170: LD_INT 5
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: PUSH
3179: LD_INT 28
3181: PUSH
3182: LD_INT 60
3184: PUSH
3185: LD_INT 75
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 28
3199: PUSH
3200: LD_INT 45
3202: PUSH
3203: LD_INT 67
3205: PUSH
3206: LD_INT 2
3208: PUSH
3209: EMPTY
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: PUSH
3215: LD_INT 28
3217: PUSH
3218: LD_INT 41
3220: PUSH
3221: LD_INT 64
3223: PUSH
3224: LD_INT 5
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: LIST
3231: LIST
3232: PUSH
3233: LD_INT 2
3235: PUSH
3236: LD_INT 50
3238: PUSH
3239: LD_INT 87
3241: PUSH
3242: LD_INT 1
3244: PUSH
3245: EMPTY
3246: LIST
3247: LIST
3248: LIST
3249: LIST
3250: PUSH
3251: LD_INT 17
3253: PUSH
3254: LD_INT 47
3256: PUSH
3257: LD_INT 84
3259: PUSH
3260: LD_INT 2
3262: PUSH
3263: EMPTY
3264: LIST
3265: LIST
3266: LIST
3267: LIST
3268: PUSH
3269: LD_INT 18
3271: PUSH
3272: LD_INT 46
3274: PUSH
3275: LD_INT 87
3277: PUSH
3278: LD_INT 1
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 32
3289: PUSH
3290: LD_INT 75
3292: PUSH
3293: LD_INT 76
3295: PUSH
3296: LD_INT 5
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: PUSH
3305: LD_INT 32
3307: PUSH
3308: LD_INT 77
3310: PUSH
3311: LD_INT 75
3313: PUSH
3314: LD_INT 5
3316: PUSH
3317: EMPTY
3318: LIST
3319: LIST
3320: LIST
3321: LIST
3322: PUSH
3323: LD_INT 32
3325: PUSH
3326: LD_INT 69
3328: PUSH
3329: LD_INT 68
3331: PUSH
3332: LD_INT 3
3334: PUSH
3335: EMPTY
3336: LIST
3337: LIST
3338: LIST
3339: LIST
3340: PUSH
3341: LD_INT 32
3343: PUSH
3344: LD_INT 59
3346: PUSH
3347: LD_INT 96
3349: PUSH
3350: LD_INT 5
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 32
3361: PUSH
3362: LD_INT 56
3364: PUSH
3365: LD_INT 96
3367: PUSH
3368: LD_INT 0
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: LIST
3375: LIST
3376: PUSH
3377: LD_INT 32
3379: PUSH
3380: LD_INT 51
3382: PUSH
3383: LD_INT 61
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: LIST
3393: LIST
3394: PUSH
3395: LD_INT 32
3397: PUSH
3398: LD_INT 42
3400: PUSH
3401: LD_INT 60
3403: PUSH
3404: LD_INT 3
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: PUSH
3413: LD_INT 32
3415: PUSH
3416: LD_INT 36
3418: PUSH
3419: LD_INT 58
3421: PUSH
3422: LD_INT 3
3424: PUSH
3425: EMPTY
3426: LIST
3427: LIST
3428: LIST
3429: LIST
3430: PUSH
3431: LD_INT 32
3433: PUSH
3434: LD_INT 39
3436: PUSH
3437: LD_INT 59
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: LIST
3447: LIST
3448: PUSH
3449: LD_INT 32
3451: PUSH
3452: LD_INT 61
3454: PUSH
3455: LD_INT 64
3457: PUSH
3458: LD_INT 3
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 33
3469: PUSH
3470: LD_INT 63
3472: PUSH
3473: LD_INT 90
3475: PUSH
3476: LD_INT 5
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 33
3487: PUSH
3488: LD_INT 64
3490: PUSH
3491: LD_INT 88
3493: PUSH
3494: LD_INT 5
3496: PUSH
3497: EMPTY
3498: LIST
3499: LIST
3500: LIST
3501: LIST
3502: PUSH
3503: LD_INT 33
3505: PUSH
3506: LD_INT 72
3508: PUSH
3509: LD_INT 82
3511: PUSH
3512: LD_INT 5
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 6
3523: PUSH
3524: LD_INT 42
3526: PUSH
3527: LD_INT 74
3529: PUSH
3530: LD_INT 1
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: PUSH
3539: LD_INT 6
3541: PUSH
3542: LD_INT 56
3544: PUSH
3545: LD_INT 77
3547: PUSH
3548: LD_INT 2
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: LIST
3555: LIST
3556: PUSH
3557: LD_INT 21
3559: PUSH
3560: LD_INT 54
3562: PUSH
3563: LD_INT 91
3565: PUSH
3566: LD_INT 5
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: LIST
3573: LIST
3574: PUSH
3575: LD_INT 16
3577: PUSH
3578: LD_INT 50
3580: PUSH
3581: LD_INT 83
3583: PUSH
3584: LD_INT 3
3586: PUSH
3587: EMPTY
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 24
3595: PUSH
3596: LD_INT 50
3598: PUSH
3599: LD_INT 90
3601: PUSH
3602: LD_INT 0
3604: PUSH
3605: EMPTY
3606: LIST
3607: LIST
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: LIST
3622: LIST
3623: LIST
3624: LIST
3625: LIST
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: LIST
3631: LIST
3632: LIST
3633: LIST
3634: LIST
3635: LIST
3636: LIST
3637: LIST
3638: LIST
3639: LIST
3640: LIST
3641: ST_TO_ADDR
// for i := 1 to buildingsTab do
3642: LD_ADDR_VAR 0 3
3646: PUSH
3647: DOUBLE
3648: LD_INT 1
3650: DEC
3651: ST_TO_ADDR
3652: LD_VAR 0 5
3656: PUSH
3657: FOR_TO
3658: IFFALSE 3731
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
3660: LD_VAR 0 4
3664: PPUSH
3665: LD_VAR 0 5
3669: PUSH
3670: LD_VAR 0 3
3674: ARRAY
3675: PUSH
3676: LD_INT 1
3678: ARRAY
3679: PPUSH
3680: LD_VAR 0 5
3684: PUSH
3685: LD_VAR 0 3
3689: ARRAY
3690: PUSH
3691: LD_INT 2
3693: ARRAY
3694: PPUSH
3695: LD_VAR 0 5
3699: PUSH
3700: LD_VAR 0 3
3704: ARRAY
3705: PUSH
3706: LD_INT 3
3708: ARRAY
3709: PPUSH
3710: LD_VAR 0 5
3714: PUSH
3715: LD_VAR 0 3
3719: ARRAY
3720: PUSH
3721: LD_INT 4
3723: ARRAY
3724: PPUSH
3725: CALL_OW 205
3729: GO 3657
3731: POP
3732: POP
// end ; end ;
3733: LD_VAR 0 2
3737: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
3738: LD_INT 0
3740: PPUSH
3741: PPUSH
3742: PPUSH
3743: PPUSH
3744: PPUSH
3745: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
3746: LD_ADDR_VAR 0 7
3750: PUSH
3751: LD_INT 22
3753: PUSH
3754: LD_VAR 0 1
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 25
3765: PUSH
3766: LD_INT 9
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PPUSH
3777: CALL_OW 69
3781: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3782: LD_ADDR_VAR 0 8
3786: PUSH
3787: LD_INT 22
3789: PUSH
3790: LD_VAR 0 2
3794: PUSH
3795: EMPTY
3796: LIST
3797: LIST
3798: PUSH
3799: LD_INT 3
3801: PUSH
3802: LD_INT 21
3804: PUSH
3805: LD_INT 3
3807: PUSH
3808: EMPTY
3809: LIST
3810: LIST
3811: PUSH
3812: EMPTY
3813: LIST
3814: LIST
3815: PUSH
3816: EMPTY
3817: LIST
3818: LIST
3819: PPUSH
3820: CALL_OW 69
3824: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3825: LD_ADDR_VAR 0 5
3829: PUSH
3830: LD_INT 1
3832: PPUSH
3833: LD_INT 3
3835: PPUSH
3836: CALL_OW 12
3840: ST_TO_ADDR
// for i = 1 to list do
3841: LD_ADDR_VAR 0 6
3845: PUSH
3846: DOUBLE
3847: LD_INT 1
3849: DEC
3850: ST_TO_ADDR
3851: LD_VAR 0 7
3855: PUSH
3856: FOR_TO
3857: IFFALSE 4039
// for ta in filter do
3859: LD_ADDR_VAR 0 4
3863: PUSH
3864: LD_VAR 0 8
3868: PUSH
3869: FOR_IN
3870: IFFALSE 4035
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
3872: LD_VAR 0 7
3876: PUSH
3877: LD_VAR 0 6
3881: ARRAY
3882: PPUSH
3883: LD_VAR 0 4
3887: PPUSH
3888: CALL_OW 296
3892: PUSH
3893: LD_INT 13
3895: LESSEQUAL
3896: IFFALSE 4033
// begin case c of 1 :
3898: LD_VAR 0 5
3902: PUSH
3903: LD_INT 1
3905: DOUBLE
3906: EQUAL
3907: IFTRUE 3911
3909: GO 3949
3911: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3912: LD_VAR 0 7
3916: PUSH
3917: LD_VAR 0 6
3921: ARRAY
3922: PPUSH
3923: LD_VAR 0 4
3927: PPUSH
3928: CALL_OW 250
3932: PPUSH
3933: LD_VAR 0 4
3937: PPUSH
3938: CALL_OW 251
3942: PPUSH
3943: CALL_OW 154
3947: GO 4033
3949: LD_INT 2
3951: DOUBLE
3952: EQUAL
3953: IFTRUE 3957
3955: GO 4021
3957: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3958: LD_VAR 0 7
3962: PUSH
3963: LD_VAR 0 6
3967: ARRAY
3968: PPUSH
3969: LD_VAR 0 4
3973: PPUSH
3974: CALL_OW 250
3978: PUSH
3979: LD_INT 1
3981: NEG
3982: PPUSH
3983: LD_INT 1
3985: PPUSH
3986: CALL_OW 12
3990: PLUS
3991: PPUSH
3992: LD_VAR 0 4
3996: PPUSH
3997: CALL_OW 251
4001: PUSH
4002: LD_INT 1
4004: NEG
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL_OW 12
4013: PLUS
4014: PPUSH
4015: CALL_OW 153
4019: GO 4033
4021: LD_INT 3
4023: DOUBLE
4024: EQUAL
4025: IFTRUE 4029
4027: GO 4032
4029: POP
// ; end ;
4030: GO 4033
4032: POP
// end ; end ;
4033: GO 3869
4035: POP
4036: POP
4037: GO 3856
4039: POP
4040: POP
// end ;
4041: LD_VAR 0 3
4045: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4046: LD_INT 0
4048: PPUSH
4049: PPUSH
4050: PPUSH
4051: PPUSH
// for i = 1 to 72 do
4052: LD_ADDR_VAR 0 5
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 72
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4124
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4068: LD_VAR 0 5
4072: PPUSH
4073: LD_VAR 0 1
4077: PPUSH
4078: CALL_OW 321
4082: PUSH
4083: LD_INT 1
4085: EQUAL
4086: PUSH
4087: LD_VAR 0 5
4091: PPUSH
4092: LD_VAR 0 3
4096: PPUSH
4097: CALL_OW 482
4101: PUSH
4102: LD_INT 1
4104: EQUAL
4105: AND
4106: IFFALSE 4122
// AddComResearch ( lab , i ) ;
4108: LD_VAR 0 2
4112: PPUSH
4113: LD_VAR 0 5
4117: PPUSH
4118: CALL_OW 184
4122: GO 4065
4124: POP
4125: POP
// end ;
4126: LD_VAR 0 4
4130: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
4131: LD_INT 0
4133: PPUSH
4134: PPUSH
4135: PPUSH
4136: PPUSH
4137: PPUSH
4138: PPUSH
4139: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
4140: LD_ADDR_VAR 0 6
4144: PUSH
4145: LD_INT 22
4147: PUSH
4148: LD_VAR 0 1
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: LD_INT 25
4159: PUSH
4160: LD_INT 1
4162: PUSH
4163: EMPTY
4164: LIST
4165: LIST
4166: PUSH
4167: LD_INT 56
4169: PUSH
4170: EMPTY
4171: LIST
4172: PUSH
4173: LD_INT 24
4175: PUSH
4176: LD_INT 700
4178: PUSH
4179: EMPTY
4180: LIST
4181: LIST
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: PPUSH
4189: CALL_OW 69
4193: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
4194: LD_ADDR_VAR 0 7
4198: PUSH
4199: LD_INT 22
4201: PUSH
4202: LD_VAR 0 1
4206: PUSH
4207: EMPTY
4208: LIST
4209: LIST
4210: PUSH
4211: LD_INT 30
4213: PUSH
4214: LD_INT 32
4216: PUSH
4217: EMPTY
4218: LIST
4219: LIST
4220: PUSH
4221: LD_INT 58
4223: PUSH
4224: EMPTY
4225: LIST
4226: PUSH
4227: LD_INT 24
4229: PUSH
4230: LD_INT 251
4232: PUSH
4233: EMPTY
4234: LIST
4235: LIST
4236: PUSH
4237: EMPTY
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
4248: LD_ADDR_VAR 0 9
4252: PUSH
4253: LD_INT 22
4255: PUSH
4256: LD_VAR 0 1
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: PUSH
4265: LD_INT 2
4267: PUSH
4268: LD_INT 30
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: EMPTY
4275: LIST
4276: LIST
4277: PUSH
4278: LD_INT 30
4280: PUSH
4281: LD_INT 5
4283: PUSH
4284: EMPTY
4285: LIST
4286: LIST
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: LIST
4292: PUSH
4293: LD_INT 24
4295: PUSH
4296: LD_INT 251
4298: PUSH
4299: EMPTY
4300: LIST
4301: LIST
4302: PUSH
4303: EMPTY
4304: LIST
4305: LIST
4306: LIST
4307: PPUSH
4308: CALL_OW 69
4312: ST_TO_ADDR
// if barrackList > 0 then
4313: LD_VAR 0 9
4317: PUSH
4318: LD_INT 0
4320: GREATER
4321: IFFALSE 4410
// begin if turretList = 0 then
4323: LD_VAR 0 7
4327: PUSH
4328: LD_INT 0
4330: EQUAL
4331: IFFALSE 4370
// begin for i in soldiers_list do
4333: LD_ADDR_VAR 0 4
4337: PUSH
4338: LD_VAR 0 6
4342: PUSH
4343: FOR_IN
4344: IFFALSE 4366
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
4346: LD_VAR 0 4
4350: PPUSH
4351: LD_VAR 0 9
4355: PUSH
4356: LD_INT 1
4358: ARRAY
4359: PPUSH
4360: CALL_OW 120
4364: GO 4343
4366: POP
4367: POP
// end else
4368: GO 4410
// begin for i in barrackList do
4370: LD_ADDR_VAR 0 4
4374: PUSH
4375: LD_VAR 0 9
4379: PUSH
4380: FOR_IN
4381: IFFALSE 4408
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
4383: LD_VAR 0 4
4387: PPUSH
4388: CALL_OW 313
4392: PPUSH
4393: LD_VAR 0 7
4397: PUSH
4398: LD_INT 1
4400: ARRAY
4401: PPUSH
4402: CALL_OW 120
// end ;
4406: GO 4380
4408: POP
4409: POP
// end ; end ; end ;
4410: LD_VAR 0 3
4414: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
4415: LD_INT 0
4417: PPUSH
4418: PPUSH
4419: PPUSH
4420: PPUSH
4421: PPUSH
4422: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
4423: LD_ADDR_VAR 0 7
4427: PUSH
4428: LD_VAR 0 2
4432: PPUSH
4433: CALL_OW 313
4437: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4438: LD_ADDR_VAR 0 8
4442: PUSH
4443: LD_VAR 0 3
4447: PPUSH
4448: LD_INT 22
4450: PUSH
4451: LD_VAR 0 1
4455: PUSH
4456: EMPTY
4457: LIST
4458: LIST
4459: PUSH
4460: LD_INT 25
4462: PUSH
4463: LD_INT 2
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 24
4472: PUSH
4473: LD_INT 1000
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: PPUSH
4485: CALL_OW 70
4489: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4490: LD_ADDR_VAR 0 5
4494: PUSH
4495: LD_VAR 0 3
4499: PPUSH
4500: LD_INT 22
4502: PUSH
4503: LD_VAR 0 1
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: LD_INT 21
4514: PUSH
4515: LD_INT 3
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 3
4524: PUSH
4525: LD_INT 24
4527: PUSH
4528: LD_INT 1000
4530: PUSH
4531: EMPTY
4532: LIST
4533: LIST
4534: PUSH
4535: EMPTY
4536: LIST
4537: LIST
4538: PUSH
4539: EMPTY
4540: LIST
4541: LIST
4542: LIST
4543: PUSH
4544: EMPTY
4545: LIST
4546: PPUSH
4547: CALL_OW 70
4551: ST_TO_ADDR
// if buildings_list > 0 and engineerOkInside > 0 then
4552: LD_VAR 0 5
4556: PUSH
4557: LD_INT 0
4559: GREATER
4560: PUSH
4561: LD_VAR 0 7
4565: PUSH
4566: LD_INT 0
4568: GREATER
4569: AND
4570: IFFALSE 4598
// for i in engineerOkInside do
4572: LD_ADDR_VAR 0 6
4576: PUSH
4577: LD_VAR 0 7
4581: PUSH
4582: FOR_IN
4583: IFFALSE 4596
// ComExitBuilding ( i ) ;
4585: LD_VAR 0 6
4589: PPUSH
4590: CALL_OW 122
4594: GO 4582
4596: POP
4597: POP
// if engineerOkOutside > 0 then
4598: LD_VAR 0 8
4602: PUSH
4603: LD_INT 0
4605: GREATER
4606: IFFALSE 4660
// begin for i in engineerOkOutside do
4608: LD_ADDR_VAR 0 6
4612: PUSH
4613: LD_VAR 0 8
4617: PUSH
4618: FOR_IN
4619: IFFALSE 4658
// for j in buildings_list do
4621: LD_ADDR_VAR 0 9
4625: PUSH
4626: LD_VAR 0 5
4630: PUSH
4631: FOR_IN
4632: IFFALSE 4654
// ComRepairBuilding ( i , j [ 1 ] ) ;
4634: LD_VAR 0 6
4638: PPUSH
4639: LD_VAR 0 9
4643: PUSH
4644: LD_INT 1
4646: ARRAY
4647: PPUSH
4648: CALL_OW 130
4652: GO 4631
4654: POP
4655: POP
4656: GO 4618
4658: POP
4659: POP
// end ; if buildings_list = 0 then
4660: LD_VAR 0 5
4664: PUSH
4665: LD_INT 0
4667: EQUAL
4668: IFFALSE 4701
// for i in engineerOkOutside do
4670: LD_ADDR_VAR 0 6
4674: PUSH
4675: LD_VAR 0 8
4679: PUSH
4680: FOR_IN
4681: IFFALSE 4699
// ComEnterUnit ( i , building ) ;
4683: LD_VAR 0 6
4687: PPUSH
4688: LD_VAR 0 2
4692: PPUSH
4693: CALL_OW 120
4697: GO 4680
4699: POP
4700: POP
// end ;
4701: LD_VAR 0 4
4705: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
4706: LD_INT 0
4708: PPUSH
4709: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
4710: LD_INT 22
4712: PUSH
4713: LD_VAR 0 1
4717: PUSH
4718: EMPTY
4719: LIST
4720: LIST
4721: PUSH
4722: LD_INT 25
4724: PUSH
4725: LD_INT 2
4727: PUSH
4728: EMPTY
4729: LIST
4730: LIST
4731: PUSH
4732: EMPTY
4733: LIST
4734: LIST
4735: PPUSH
4736: CALL_OW 69
4740: PUSH
4741: LD_INT 0
4743: GREATER
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_VAR 0 1
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: LD_INT 21
4759: PUSH
4760: LD_INT 3
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: LD_INT 3
4769: PUSH
4770: LD_INT 24
4772: PUSH
4773: LD_INT 1000
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PPUSH
4789: CALL_OW 69
4793: PUSH
4794: LD_INT 0
4796: EQUAL
4797: AND
4798: PUSH
4799: LD_VAR 0 2
4803: PUSH
4804: LD_INT 0
4806: GREATER
4807: AND
4808: IFFALSE 4907
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
4810: LD_ADDR_VAR 0 4
4814: PUSH
4815: LD_INT 22
4817: PUSH
4818: LD_VAR 0 1
4822: PUSH
4823: EMPTY
4824: LIST
4825: LIST
4826: PUSH
4827: LD_INT 25
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: EMPTY
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: PUSH
4846: FOR_IN
4847: IFFALSE 4905
// begin AddComExitBuilding ( i ) ;
4849: LD_VAR 0 4
4853: PPUSH
4854: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
4858: LD_VAR 0 4
4862: PPUSH
4863: LD_VAR 0 2
4867: PUSH
4868: LD_INT 1
4870: ARRAY
4871: PPUSH
4872: LD_VAR 0 2
4876: PUSH
4877: LD_INT 2
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 2
4885: PUSH
4886: LD_INT 3
4888: ARRAY
4889: PPUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_INT 4
4897: ARRAY
4898: PPUSH
4899: CALL_OW 205
// end ;
4903: GO 4846
4905: POP
4906: POP
// end ; end ;
4907: LD_VAR 0 3
4911: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
4912: LD_INT 0
4914: PPUSH
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4921: LD_ADDR_VAR 0 9
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_VAR 0 1
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PUSH
4938: LD_INT 24
4940: PUSH
4941: LD_INT 251
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PUSH
4948: LD_INT 2
4950: PUSH
4951: LD_INT 30
4953: PUSH
4954: LD_INT 9
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 30
4963: PUSH
4964: LD_INT 7
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: LD_INT 30
4973: PUSH
4974: LD_INT 8
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PUSH
4981: EMPTY
4982: LIST
4983: LIST
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
4997: LD_ADDR_VAR 0 7
5001: PUSH
5002: LD_VAR 0 3
5006: PPUSH
5007: LD_INT 22
5009: PUSH
5010: LD_VAR 0 1
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 25
5021: PUSH
5022: LD_INT 4
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 24
5031: PUSH
5032: LD_INT 251
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: LIST
5043: PPUSH
5044: CALL_OW 70
5048: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5049: LD_ADDR_VAR 0 10
5053: PUSH
5054: LD_VAR 0 3
5058: PPUSH
5059: LD_INT 22
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: LD_INT 21
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 3
5083: PUSH
5084: LD_INT 24
5086: PUSH
5087: LD_INT 750
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 70
5107: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
5108: LD_VAR 0 9
5112: PUSH
5113: LD_INT 0
5115: GREATER
5116: PUSH
5117: LD_VAR 0 10
5121: PUSH
5122: LD_INT 0
5124: GREATER
5125: AND
5126: IFFALSE 5160
// for i in labs do
5128: LD_ADDR_VAR 0 5
5132: PUSH
5133: LD_VAR 0 9
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5158
// scientisticsInside = UnitsInside ( i ) ;
5141: LD_ADDR_VAR 0 8
5145: PUSH
5146: LD_VAR 0 5
5150: PPUSH
5151: CALL_OW 313
5155: ST_TO_ADDR
5156: GO 5138
5158: POP
5159: POP
// if labs > 0 and damageUnits > 0 then
5160: LD_VAR 0 9
5164: PUSH
5165: LD_INT 0
5167: GREATER
5168: PUSH
5169: LD_VAR 0 10
5173: PUSH
5174: LD_INT 0
5176: GREATER
5177: AND
5178: IFFALSE 5206
// for i in scientisticsInside do
5180: LD_ADDR_VAR 0 5
5184: PUSH
5185: LD_VAR 0 8
5189: PUSH
5190: FOR_IN
5191: IFFALSE 5204
// ComExitBuilding ( i ) ;
5193: LD_VAR 0 5
5197: PPUSH
5198: CALL_OW 122
5202: GO 5190
5204: POP
5205: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
5206: LD_VAR 0 10
5210: PUSH
5211: LD_INT 0
5213: GREATER
5214: PUSH
5215: LD_VAR 0 7
5219: PUSH
5220: LD_INT 0
5222: GREATER
5223: AND
5224: IFFALSE 5290
// begin ComMoveToArea ( damageUnits , healArea ) ;
5226: LD_VAR 0 10
5230: PPUSH
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 113
// for i in scientisticsOutside do
5240: LD_ADDR_VAR 0 5
5244: PUSH
5245: LD_VAR 0 7
5249: PUSH
5250: FOR_IN
5251: IFFALSE 5286
// for j in damageUnits do
5253: LD_ADDR_VAR 0 6
5257: PUSH
5258: LD_VAR 0 10
5262: PUSH
5263: FOR_IN
5264: IFFALSE 5282
// AddComHeal ( i , j ) ;
5266: LD_VAR 0 5
5270: PPUSH
5271: LD_VAR 0 6
5275: PPUSH
5276: CALL_OW 188
5280: GO 5263
5282: POP
5283: POP
5284: GO 5250
5286: POP
5287: POP
// end else
5288: GO 5318
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
5290: LD_VAR 0 7
5294: PPUSH
5295: LD_VAR 0 9
5299: PUSH
5300: LD_INT 1
5302: PPUSH
5303: LD_VAR 0 9
5307: PPUSH
5308: CALL_OW 12
5312: ARRAY
5313: PPUSH
5314: CALL_OW 120
// end ; end ; end_of_file
5318: LD_VAR 0 4
5322: RET
// every 0 0$1 trigger activateRUAI = 1 do
5323: LD_EXP 26
5327: PUSH
5328: LD_INT 1
5330: EQUAL
5331: IFFALSE 5357
5333: GO 5335
5335: DISABLE
// begin enable ;
5336: ENABLE
// IntBazooka ( 3 , 1 ) ;
5337: LD_INT 3
5339: PPUSH
5340: LD_INT 1
5342: PPUSH
5343: CALL 3738 0 2
// IntBazooka ( 6 , 1 ) ;
5347: LD_INT 6
5349: PPUSH
5350: LD_INT 1
5352: PPUSH
5353: CALL 3738 0 2
// end ; end_of_file
5357: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 255
5367: PUSH
5368: LD_INT 4
5370: EQUAL
5371: IFFALSE 5385
// SetBName ( building , epsilon ) ;
5373: LD_VAR 0 1
5377: PPUSH
5378: LD_STRING epsilon
5380: PPUSH
5381: CALL_OW 500
// end ;
5385: PPOPN 2
5387: END
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 then
5388: LD_VAR 0 1
5392: PPUSH
5393: CALL_OW 255
5397: PUSH
5398: LD_INT 3
5400: EQUAL
5401: IFFALSE 5807
// begin if GetBType ( building ) = b_depot then
5403: LD_VAR 0 1
5407: PPUSH
5408: CALL_OW 266
5412: PUSH
5413: LD_INT 0
5415: EQUAL
5416: IFFALSE 5488
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
5418: LD_VAR 0 1
5422: PPUSH
5423: CALL_OW 274
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 5000
5433: PPUSH
5434: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
5438: LD_VAR 0 1
5442: PPUSH
5443: CALL_OW 274
5447: PPUSH
5448: LD_INT 2
5450: PPUSH
5451: LD_INT 5000
5453: PPUSH
5454: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
5458: LD_VAR 0 1
5462: PPUSH
5463: CALL_OW 274
5467: PPUSH
5468: LD_INT 3
5470: PPUSH
5471: LD_INT 5000
5473: PPUSH
5474: CALL_OW 277
// ruDepot = building ;
5478: LD_ADDR_EXP 16
5482: PUSH
5483: LD_VAR 0 1
5487: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
5488: LD_VAR 0 1
5492: PPUSH
5493: CALL_OW 266
5497: PUSH
5498: LD_INT 0
5500: EQUAL
5501: PUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 266
5511: PUSH
5512: LD_INT 2
5514: EQUAL
5515: OR
5516: PUSH
5517: LD_VAR 0 1
5521: PPUSH
5522: CALL_OW 266
5526: PUSH
5527: LD_INT 4
5529: EQUAL
5530: OR
5531: IFFALSE 5542
// ComUpgrade ( building ) ;
5533: LD_VAR 0 1
5537: PPUSH
5538: CALL_OW 146
// if GetBType ( building ) = b_lab then
5542: LD_VAR 0 1
5546: PPUSH
5547: CALL_OW 266
5551: PUSH
5552: LD_INT 6
5554: EQUAL
5555: IFFALSE 5676
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_weapon ] ] ) = 0 then
5557: LD_INT 22
5559: PUSH
5560: LD_INT 3
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: LD_INT 30
5569: PUSH
5570: LD_INT 10
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: EMPTY
5578: LIST
5579: LIST
5580: PPUSH
5581: CALL_OW 69
5585: PUSH
5586: LD_INT 0
5588: EQUAL
5589: IFFALSE 5627
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
5591: LD_VAR 0 1
5595: PPUSH
5596: LD_INT 10
5598: PPUSH
5599: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
5603: LD_VAR 0 1
5607: PPUSH
5608: LD_INT 12
5610: PPUSH
5611: CALL_OW 207
// ruLab1 = building ;
5615: LD_ADDR_EXP 17
5619: PUSH
5620: LD_VAR 0 1
5624: ST_TO_ADDR
// end else
5625: GO 5661
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
5627: LD_VAR 0 1
5631: PPUSH
5632: LD_INT 11
5634: PPUSH
5635: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
5639: LD_VAR 0 1
5643: PPUSH
5644: LD_INT 14
5646: PPUSH
5647: CALL_OW 207
// ruLab2 = building ;
5651: LD_ADDR_EXP 18
5655: PUSH
5656: LD_VAR 0 1
5660: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
5661: LD_INT 3
5663: PPUSH
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_INT 3
5671: PPUSH
5672: CALL 4046 0 3
// end ; if GetBType ( building ) = b_bunker then
5676: LD_VAR 0 1
5680: PPUSH
5681: CALL_OW 266
5685: PUSH
5686: LD_INT 32
5688: EQUAL
5689: IFFALSE 5730
// AddComPlaceWeapon ( building , [ 43 , 44 , 45 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: LD_INT 43
5698: PUSH
5699: LD_INT 44
5701: PUSH
5702: LD_INT 45
5704: PUSH
5705: LD_INT 46
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: PUSH
5714: LD_INT 1
5716: PPUSH
5717: LD_INT 4
5719: PPUSH
5720: CALL_OW 12
5724: ARRAY
5725: PPUSH
5726: CALL_OW 208
// if GetBType ( building ) = b_turret then
5730: LD_VAR 0 1
5734: PPUSH
5735: CALL_OW 266
5739: PUSH
5740: LD_INT 33
5742: EQUAL
5743: IFFALSE 5784
// AddComPlaceWeapon ( building , [ 43 , 44 , 45 , 46 ] [ Rand ( 1 , 4 ) ] ) ;
5745: LD_VAR 0 1
5749: PPUSH
5750: LD_INT 43
5752: PUSH
5753: LD_INT 44
5755: PUSH
5756: LD_INT 45
5758: PUSH
5759: LD_INT 46
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 1
5770: PPUSH
5771: LD_INT 4
5773: PPUSH
5774: CALL_OW 12
5778: ARRAY
5779: PPUSH
5780: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
5784: LD_VAR 0 1
5788: PPUSH
5789: CALL_OW 266
5793: PUSH
5794: LD_INT 24
5796: EQUAL
5797: IFFALSE 5807
// russianAI = 1 ;
5799: LD_ADDR_EXP 25
5803: PUSH
5804: LD_INT 1
5806: ST_TO_ADDR
// end ; end ;
5807: PPOPN 1
5809: END
