// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 28
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 38
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 39
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 40
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 41
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianEscape = 0 ;
  69: LD_ADDR_EXP 46
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  77: LD_ADDR_EXP 45
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// arabianDefeated = 0 ;
  85: LD_ADDR_EXP 47
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// arabianTrait = 0 ;
  93: LD_ADDR_EXP 48
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// eventVar1 = 0 ;
 101: LD_ADDR_EXP 54
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar2 = 0 ;
 109: LD_ADDR_EXP 55
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// fastEnd = 0 ;
 117: LD_ADDR_EXP 53
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// KhatamStatus = 0 ;
 125: LD_ADDR_EXP 49
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cratesSpawned = 0 ;
 133: LD_ADDR_EXP 52
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mission_prefix := 10_ ;
 141: LD_ADDR_EXP 50
 145: PUSH
 146: LD_STRING 10_
 148: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 149: LD_ADDR_EXP 51
 153: PUSH
 154: LD_STRING 09_
 156: ST_TO_ADDR
// debugMode = 0 ;
 157: LD_ADDR_EXP 56
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// PrepareNature ;
 165: CALL 21050 0 0
// PrepareDifficulty ;
 169: CALL 7629 0 0
// PrepareJMMTeam ;
 173: CALL 515 0 0
// PrepareCathyTeam ;
 177: CALL 1590 0 0
// PrepareArabianCommander ;
 181: CALL 2948 0 0
// PrepareArabian ;
 185: CALL 3000 0 0
// BuildArabianBase ;
 189: CALL 10143 0 0
// TameApemans ;
 193: CALL 16020 0 0
// end ;
 197: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 198: LD_EXP 56
 202: PUSH
 203: LD_INT 1
 205: EQUAL
 206: IFFALSE 512
 208: GO 210
 210: DISABLE
 211: LD_INT 0
 213: PPUSH
// begin enable ;
 214: ENABLE
// fogoff ( true ) ;
 215: LD_INT 1
 217: PPUSH
 218: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 222: LD_ADDR_VAR 0 1
 226: PUSH
 227: LD_INT 22
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: PUSH
 237: LD_INT 21
 239: PUSH
 240: LD_INT 1
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PPUSH
 251: CALL_OW 69
 255: PUSH
 256: FOR_IN
 257: IFFALSE 273
// SetLives ( i , 1000 ) ;
 259: LD_VAR 0 1
 263: PPUSH
 264: LD_INT 1000
 266: PPUSH
 267: CALL_OW 234
 271: GO 256
 273: POP
 274: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 2
 292: PUSH
 293: LD_INT 30
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: LD_INT 30
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PPUSH
 322: CALL_OW 69
 326: PUSH
 327: FOR_IN
 328: IFFALSE 352
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 330: LD_VAR 0 1
 334: PPUSH
 335: CALL_OW 274
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 9999
 345: PPUSH
 346: CALL_OW 277
 350: GO 327
 352: POP
 353: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 30
 384: PUSH
 385: LD_INT 1
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PPUSH
 401: CALL_OW 69
 405: PUSH
 406: FOR_IN
 407: IFFALSE 431
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 409: LD_VAR 0 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 9999
 424: PPUSH
 425: CALL_OW 277
 429: GO 406
 431: POP
 432: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 433: LD_ADDR_VAR 0 1
 437: PUSH
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 2
 450: PUSH
 451: LD_INT 30
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PPUSH
 480: CALL_OW 69
 484: PUSH
 485: FOR_IN
 486: IFFALSE 510
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: CALL_OW 274
 497: PPUSH
 498: LD_INT 3
 500: PPUSH
 501: LD_INT 9999
 503: PPUSH
 504: CALL_OW 277
 508: GO 485
 510: POP
 511: POP
// end ; end_of_file
 512: PPOPN 1
 514: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
 522: PPUSH
// uc_side = 1 ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// uc_nation = 1 ;
 531: LD_ADDR_OWVAR 21
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// count = 0 ;
 539: LD_ADDR_VAR 0 6
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 547: LD_ADDR_EXP 1
 551: PUSH
 552: LD_STRING 10_JMM
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL 7365 0 2
 562: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 563: LD_ADDR_EXP 20
 567: PUSH
 568: LD_EXP 20
 572: PUSH
 573: LD_EXP 1
 577: ADD
 578: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 579: LD_ADDR_EXP 10
 583: PUSH
 584: LD_STRING 10_Gary
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 7365 0 2
 594: ST_TO_ADDR
// if Gary then
 595: LD_EXP 10
 599: IFFALSE 617
// JMMSquad = JMMSquad ^ Gary ;
 601: LD_ADDR_EXP 20
 605: PUSH
 606: LD_EXP 20
 610: PUSH
 611: LD_EXP 10
 615: ADD
 616: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 617: LD_ADDR_EXP 5
 621: PUSH
 622: LD_STRING 10_Cyrus
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 7365 0 2
 632: ST_TO_ADDR
// if Cyrus then
 633: LD_EXP 5
 637: IFFALSE 655
// JMMSquad = JMMSquad ^ Cyrus ;
 639: LD_ADDR_EXP 20
 643: PUSH
 644: LD_EXP 20
 648: PUSH
 649: LD_EXP 5
 653: ADD
 654: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 655: LD_ADDR_EXP 4
 659: PUSH
 660: LD_STRING 10_Bobby
 662: PPUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL 7365 0 2
 670: ST_TO_ADDR
// if Bobby then
 671: LD_EXP 4
 675: IFFALSE 693
// JMMSquad = JMMSquad ^ Bobby ;
 677: LD_ADDR_EXP 20
 681: PUSH
 682: LD_EXP 20
 686: PUSH
 687: LD_EXP 4
 691: ADD
 692: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_STRING 10_Lisa
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL 7365 0 2
 708: ST_TO_ADDR
// if Lisa then
 709: LD_EXP 6
 713: IFFALSE 731
// JMMSquad = JMMSquad ^ Lisa ;
 715: LD_ADDR_EXP 20
 719: PUSH
 720: LD_EXP 20
 724: PUSH
 725: LD_EXP 6
 729: ADD
 730: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 731: LD_ADDR_EXP 2
 735: PUSH
 736: LD_STRING 10_Brown
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL 7365 0 2
 746: ST_TO_ADDR
// if Brown then
 747: LD_EXP 2
 751: IFFALSE 769
// JMMSquad = JMMSquad ^ Brown ;
 753: LD_ADDR_EXP 20
 757: PUSH
 758: LD_EXP 20
 762: PUSH
 763: LD_EXP 2
 767: ADD
 768: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 769: LD_ADDR_EXP 3
 773: PUSH
 774: LD_STRING 10_Donaldson
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL 7365 0 2
 784: ST_TO_ADDR
// if Donaldson then
 785: LD_EXP 3
 789: IFFALSE 807
// JMMSquad = JMMSquad ^ Donaldson ;
 791: LD_ADDR_EXP 20
 795: PUSH
 796: LD_EXP 20
 800: PUSH
 801: LD_EXP 3
 805: ADD
 806: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 807: LD_ADDR_EXP 7
 811: PUSH
 812: LD_STRING 10_Frank
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 7365 0 2
 822: ST_TO_ADDR
// if Frank then
 823: LD_EXP 7
 827: IFFALSE 845
// JMMSquad = JMMSquad ^ Frank ;
 829: LD_ADDR_EXP 20
 833: PUSH
 834: LD_EXP 20
 838: PUSH
 839: LD_EXP 7
 843: ADD
 844: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 845: LD_ADDR_EXP 9
 849: PUSH
 850: LD_STRING 10_Houten
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: CALL 7365 0 2
 860: ST_TO_ADDR
// if Houten then
 861: LD_EXP 9
 865: IFFALSE 883
// JMMSquad = JMMSquad ^ Houten ;
 867: LD_ADDR_EXP 20
 871: PUSH
 872: LD_EXP 20
 876: PUSH
 877: LD_EXP 9
 881: ADD
 882: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 883: LD_ADDR_EXP 21
 887: PUSH
 888: LD_STRING OthersIn10
 890: PPUSH
 891: CALL_OW 31
 895: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING Powell
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL 7365 0 2
 911: ST_TO_ADDR
// for i in JMMSquad do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: LD_EXP 20
 921: PUSH
 922: FOR_IN
 923: IFFALSE 1182
// begin if count < 3 then
 925: LD_VAR 0 6
 929: PUSH
 930: LD_INT 3
 932: LESS
 933: IFFALSE 1050
// begin vc_engine = 1 ;
 935: LD_ADDR_OWVAR 39
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
// vc_control = 1 ;
 943: LD_ADDR_OWVAR 38
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
// vc_weapon = 12 ;
 951: LD_ADDR_OWVAR 40
 955: PUSH
 956: LD_INT 12
 958: ST_TO_ADDR
// vc_chassis = 3 ;
 959: LD_ADDR_OWVAR 37
 963: PUSH
 964: LD_INT 3
 966: ST_TO_ADDR
// veh = CreateVehicle ;
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: CALL_OW 45
 976: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 977: LD_VAR 0 4
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 989: LD_VAR 0 4
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// if count mod 2 = 0 then
1004: LD_VAR 0 6
1008: PUSH
1009: LD_INT 2
1011: MOD
1012: PUSH
1013: LD_INT 0
1015: EQUAL
1016: IFFALSE 1035
// AddCargo ( veh , 1 , 100 ) else
1018: LD_VAR 0 4
1022: PPUSH
1023: LD_INT 1
1025: PPUSH
1026: LD_INT 100
1028: PPUSH
1029: CALL_OW 291
1033: GO 1050
// AddCargo ( veh , 3 , 100 ) end ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 3
1042: PPUSH
1043: LD_INT 100
1045: PPUSH
1046: CALL_OW 291
// if count >= 3 then
1050: LD_VAR 0 6
1054: PUSH
1055: LD_INT 3
1057: GREATEREQUAL
1058: IFFALSE 1152
// begin vc_engine = 1 ;
1060: LD_ADDR_OWVAR 39
1064: PUSH
1065: LD_INT 1
1067: ST_TO_ADDR
// vc_control = 1 ;
1068: LD_ADDR_OWVAR 38
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1076: LD_ADDR_OWVAR 40
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: LD_INT 5
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 3
1100: PPUSH
1101: CALL_OW 12
1105: ARRAY
1106: ST_TO_ADDR
// vc_chassis = 3 ;
1107: LD_ADDR_OWVAR 37
1111: PUSH
1112: LD_INT 3
1114: ST_TO_ADDR
// veh = CreateVehicle ;
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: CALL_OW 45
1124: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1125: LD_VAR 0 4
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_INT 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 49
// end ; count = count + 1 ;
1152: LD_ADDR_VAR 0 6
1156: PUSH
1157: LD_VAR 0 6
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1166: LD_VAR 0 2
1170: PPUSH
1171: LD_VAR 0 4
1175: PPUSH
1176: CALL_OW 52
// end ;
1180: GO 922
1182: POP
1183: POP
// for i in others10 do
1184: LD_ADDR_VAR 0 2
1188: PUSH
1189: LD_EXP 21
1193: PUSH
1194: FOR_IN
1195: IFFALSE 1321
// begin vc_engine = 1 ;
1197: LD_ADDR_OWVAR 39
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// vc_control = 1 ;
1205: LD_ADDR_OWVAR 38
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1213: LD_ADDR_OWVAR 40
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: LD_INT 4
1223: PUSH
1224: LD_INT 5
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 1
1234: PPUSH
1235: LD_INT 3
1237: PPUSH
1238: CALL_OW 12
1242: ARRAY
1243: ST_TO_ADDR
// vc_chassis = 3 ;
1244: LD_ADDR_OWVAR 37
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// veh = CreateVehicle ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: CALL_OW 45
1261: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1262: LD_VAR 0 4
1266: PPUSH
1267: LD_INT 1
1269: PPUSH
1270: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1274: LD_VAR 0 4
1278: PPUSH
1279: LD_INT 2
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1289: LD_ADDR_EXP 27
1293: PUSH
1294: LD_EXP 27
1298: PUSH
1299: LD_VAR 0 4
1303: ADD
1304: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1305: LD_VAR 0 2
1309: PPUSH
1310: LD_VAR 0 4
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1194
1321: POP
1322: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1323: LD_INT 22
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PUSH
1333: LD_INT 21
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PPUSH
1347: CALL_OW 69
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL_OW 336
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// for i := 1 to 10 do
1387: LD_ADDR_VAR 0 2
1391: PUSH
1392: DOUBLE
1393: LD_INT 1
1395: DEC
1396: ST_TO_ADDR
1397: LD_INT 10
1399: PUSH
1400: FOR_TO
1401: IFFALSE 1583
// begin vc_engine = 1 ;
1403: LD_ADDR_OWVAR 39
1407: PUSH
1408: LD_INT 1
1410: ST_TO_ADDR
// vc_control = 1 ;
1411: LD_ADDR_OWVAR 38
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1419: LD_ADDR_OWVAR 40
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 4
1429: PUSH
1430: LD_INT 5
1432: PUSH
1433: LD_INT 12
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 4
1447: PPUSH
1448: CALL_OW 12
1452: ARRAY
1453: ST_TO_ADDR
// vc_chassis = 3 ;
1454: LD_ADDR_OWVAR 37
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// veh = CreateVehicle ;
1462: LD_ADDR_VAR 0 3
1466: PUSH
1467: CALL_OW 45
1471: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1472: LD_VAR 0 3
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1484: LD_VAR 0 3
1488: PPUSH
1489: LD_INT 2
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1499: LD_ADDR_EXP 27
1503: PUSH
1504: LD_EXP 27
1508: PUSH
1509: LD_VAR 0 3
1513: ADD
1514: ST_TO_ADDR
// if vc_weapon = 12 then
1515: LD_OWVAR 40
1519: PUSH
1520: LD_INT 12
1522: EQUAL
1523: IFFALSE 1581
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1525: LD_ADDR_VAR 0 4
1529: PUSH
1530: LD_INT 5
1532: PPUSH
1533: LD_INT 10
1535: PPUSH
1536: CALL_OW 12
1540: PUSH
1541: LD_INT 10
1543: MUL
1544: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 3
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 1
1562: PPUSH
1563: LD_INT 2
1565: PPUSH
1566: CALL_OW 12
1570: ARRAY
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL_OW 291
// end ; end ;
1581: GO 1400
1583: POP
1584: POP
// end ;
1585: LD_VAR 0 1
1589: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
1594: PPUSH
// uc_side = 4 ;
1595: LD_ADDR_OWVAR 20
1599: PUSH
1600: LD_INT 4
1602: ST_TO_ADDR
// uc_nation = 1 ;
1603: LD_ADDR_OWVAR 21
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1611: LD_ADDR_EXP 11
1615: PUSH
1616: LD_STRING Simms
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 7365 0 2
1626: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1627: LD_ADDR_EXP 12
1631: PUSH
1632: LD_STRING 08_Denis
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: CALL 7365 0 2
1642: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1643: LD_ADDR_EXP 13
1647: PUSH
1648: LD_STRING 08_Joan
1650: PPUSH
1651: LD_INT 1
1653: PPUSH
1654: CALL 7365 0 2
1658: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1659: LD_ADDR_EXP 14
1663: PUSH
1664: LD_STRING Khatam
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: CALL 7365 0 2
1674: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1675: LD_ADDR_EXP 15
1679: PUSH
1680: LD_STRING Gladstone
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 7365 0 2
1690: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1691: LD_ADDR_EXP 17
1695: PUSH
1696: LD_STRING DeltaDoctor
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: CALL 7365 0 2
1706: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1707: LD_STRING 08_Frank
1709: PPUSH
1710: CALL_OW 28
1714: PUSH
1715: LD_INT 1
1717: EQUAL
1718: IFFALSE 1736
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1720: LD_ADDR_EXP 8
1724: PUSH
1725: LD_STRING Yamoko
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL 7365 0 2
1735: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1736: LD_ADDR_EXP 22
1740: PUSH
1741: LD_STRING 09_others
1743: PPUSH
1744: CALL_OW 31
1748: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1749: LD_ADDR_EXP 23
1753: PUSH
1754: LD_STRING 09_apes
1756: PPUSH
1757: CALL_OW 31
1761: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1762: LD_EXP 11
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1777: LD_EXP 12
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1792: LD_EXP 13
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1807: LD_EXP 14
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1822: LD_EXP 15
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1852: LD_EXP 8
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1867: LD_EXP 11
1871: PUSH
1872: LD_EXP 14
1876: PUSH
1877: LD_EXP 12
1881: PUSH
1882: LD_EXP 15
1886: PUSH
1887: LD_EXP 17
1891: PUSH
1892: LD_EXP 13
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: CALL_OW 336
// if others09 > 2 then
1912: LD_EXP 22
1916: PUSH
1917: LD_INT 2
1919: GREATER
1920: IFFALSE 1965
// begin for i := 1 to 3 do
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: DOUBLE
1928: LD_INT 1
1930: DEC
1931: ST_TO_ADDR
1932: LD_INT 3
1934: PUSH
1935: FOR_TO
1936: IFFALSE 1961
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
1938: LD_EXP 22
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
1959: GO 1935
1961: POP
1962: POP
// end else
1963: GO 1997
// begin for i in others09 do
1965: LD_ADDR_VAR 0 2
1969: PUSH
1970: LD_EXP 22
1974: PUSH
1975: FOR_IN
1976: IFFALSE 1995
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_INT 1
1985: PPUSH
1986: LD_INT 0
1988: PPUSH
1989: CALL_OW 49
1993: GO 1975
1995: POP
1996: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
1997: LD_INT 22
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 21
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 25
2019: PUSH
2020: LD_INT 2
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PPUSH
2032: CALL_OW 69
2036: PUSH
2037: LD_EXP 11
2041: PUSH
2042: LD_EXP 14
2046: PUSH
2047: LD_EXP 12
2051: PUSH
2052: LD_EXP 15
2056: PUSH
2057: LD_EXP 17
2061: PUSH
2062: LD_EXP 13
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 0
2077: EQUAL
2078: DIFF
2079: IFFALSE 2181
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: LD_INT 4
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 21
2098: PUSH
2099: LD_INT 1
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 25
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: LD_EXP 11
2130: PUSH
2131: LD_EXP 14
2135: PUSH
2136: LD_EXP 12
2140: PUSH
2141: LD_EXP 15
2145: PUSH
2146: LD_EXP 17
2150: PUSH
2151: LD_EXP 13
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: DIFF
2164: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2165: LD_VAR 0 3
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 336
// end ; for i in ape09 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_EXP 23
2190: PUSH
2191: FOR_IN
2192: IFFALSE 2211
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 49
2209: GO 2191
2211: POP
2212: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2213: LD_INT 22
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 21
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 25
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PPUSH
2248: CALL_OW 69
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 101
2258: PPUSH
2259: LD_INT 30
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 205
// uc_side = 1 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// hc_class := 1 ;
2277: LD_ADDR_OWVAR 28
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// hc_sex := sex_female ;
2285: LD_ADDR_OWVAR 27
2289: PUSH
2290: LD_INT 2
2292: ST_TO_ADDR
// hc_gallery :=  ;
2293: LD_ADDR_OWVAR 33
2297: PUSH
2298: LD_STRING 
2300: ST_TO_ADDR
// hc_name :=  ;
2301: LD_ADDR_OWVAR 26
2305: PUSH
2306: LD_STRING 
2308: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2309: LD_ADDR_OWVAR 31
2313: PUSH
2314: LD_INT 1
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: LD_INT 0
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: ST_TO_ADDR
// AmScout = CreateHuman ;
2332: LD_ADDR_EXP 18
2336: PUSH
2337: CALL_OW 44
2341: ST_TO_ADDR
// end ;
2342: LD_VAR 0 1
2346: RET
// export function PrepareCornell ; begin
2347: LD_INT 0
2349: PPUSH
// uc_side = 4 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 4
2357: ST_TO_ADDR
// uc_nation = 1 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 1
2365: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2366: LD_ADDR_EXP 19
2370: PUSH
2371: LD_STRING 03_Cornel
2373: PPUSH
2374: LD_INT 1
2376: PPUSH
2377: CALL 7365 0 2
2381: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2382: LD_EXP 19
2386: PPUSH
2387: LD_INT 8
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// if IsInUnit ( JMM ) then
2397: LD_EXP 1
2401: PPUSH
2402: CALL_OW 310
2406: IFFALSE 2449
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2408: LD_EXP 19
2412: PPUSH
2413: LD_EXP 1
2417: PPUSH
2418: CALL_OW 310
2422: PPUSH
2423: CALL_OW 250
2427: PPUSH
2428: LD_EXP 1
2432: PPUSH
2433: CALL_OW 310
2437: PPUSH
2438: CALL_OW 251
2442: PPUSH
2443: CALL_OW 111
2447: GO 2478
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2449: LD_EXP 19
2453: PPUSH
2454: LD_EXP 1
2458: PPUSH
2459: CALL_OW 250
2463: PPUSH
2464: LD_EXP 1
2468: PPUSH
2469: CALL_OW 251
2473: PPUSH
2474: CALL_OW 111
// end ; end_of_file
2478: LD_VAR 0 1
2482: RET
// export function PrepareRussians ; var i , un ; begin
2483: LD_INT 0
2485: PPUSH
2486: PPUSH
2487: PPUSH
// uc_side = 3 ;
2488: LD_ADDR_OWVAR 20
2492: PUSH
2493: LD_INT 3
2495: ST_TO_ADDR
// uc_nation = 3 ;
2496: LD_ADDR_OWVAR 21
2500: PUSH
2501: LD_INT 3
2503: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2504: LD_ADDR_EXP 25
2508: PUSH
2509: LD_STRING Tsaritsyn
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 7365 0 2
2519: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2520: LD_EXP 25
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// for i = 1 to 14 do
2535: LD_ADDR_VAR 0 2
2539: PUSH
2540: DOUBLE
2541: LD_INT 1
2543: DEC
2544: ST_TO_ADDR
2545: LD_INT 14
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2635
// begin uc_side = 3 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 3
2558: ST_TO_ADDR
// uc_nation = 3 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 3
2566: ST_TO_ADDR
// hc_gallery =  ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING 
2574: ST_TO_ADDR
// hc_name =  ;
2575: LD_ADDR_OWVAR 26
2579: PUSH
2580: LD_STRING 
2582: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2583: LD_INT 0
2585: PPUSH
2586: LD_INT 1
2588: PPUSH
2589: LD_EXP 35
2593: PPUSH
2594: LD_EXP 36
2598: PPUSH
2599: CALL_OW 12
2603: PPUSH
2604: CALL_OW 380
// un = CreateHuman ;
2608: LD_ADDR_VAR 0 3
2612: PUSH
2613: CALL_OW 44
2617: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2618: LD_VAR 0 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// end ;
2633: GO 2548
2635: POP
2636: POP
// for i = 1 to 6 do
2637: LD_ADDR_VAR 0 2
2641: PUSH
2642: DOUBLE
2643: LD_INT 1
2645: DEC
2646: ST_TO_ADDR
2647: LD_INT 6
2649: PUSH
2650: FOR_TO
2651: IFFALSE 2737
// begin uc_side = 3 ;
2653: LD_ADDR_OWVAR 20
2657: PUSH
2658: LD_INT 3
2660: ST_TO_ADDR
// uc_nation = 3 ;
2661: LD_ADDR_OWVAR 21
2665: PUSH
2666: LD_INT 3
2668: ST_TO_ADDR
// hc_gallery =  ;
2669: LD_ADDR_OWVAR 33
2673: PUSH
2674: LD_STRING 
2676: ST_TO_ADDR
// hc_name =  ;
2677: LD_ADDR_OWVAR 26
2681: PUSH
2682: LD_STRING 
2684: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: LD_EXP 35
2695: PPUSH
2696: LD_EXP 36
2700: PPUSH
2701: CALL_OW 12
2705: PPUSH
2706: CALL_OW 380
// un = CreateHuman ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: CALL_OW 44
2719: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2720: LD_VAR 0 3
2724: PPUSH
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: CALL_OW 49
// end ;
2735: GO 2650
2737: POP
2738: POP
// for i = 1 to 6 do
2739: LD_ADDR_VAR 0 2
2743: PUSH
2744: DOUBLE
2745: LD_INT 1
2747: DEC
2748: ST_TO_ADDR
2749: LD_INT 6
2751: PUSH
2752: FOR_TO
2753: IFFALSE 2839
// begin uc_side = 3 ;
2755: LD_ADDR_OWVAR 20
2759: PUSH
2760: LD_INT 3
2762: ST_TO_ADDR
// uc_nation = 3 ;
2763: LD_ADDR_OWVAR 21
2767: PUSH
2768: LD_INT 3
2770: ST_TO_ADDR
// hc_gallery =  ;
2771: LD_ADDR_OWVAR 33
2775: PUSH
2776: LD_STRING 
2778: ST_TO_ADDR
// hc_name =  ;
2779: LD_ADDR_OWVAR 26
2783: PUSH
2784: LD_STRING 
2786: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2787: LD_INT 0
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: LD_EXP 35
2797: PPUSH
2798: LD_EXP 36
2802: PPUSH
2803: CALL_OW 12
2807: PPUSH
2808: CALL_OW 380
// un = CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2822: LD_VAR 0 3
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 49
// end ;
2837: GO 2752
2839: POP
2840: POP
// for i = 1 to 4 do
2841: LD_ADDR_VAR 0 2
2845: PUSH
2846: DOUBLE
2847: LD_INT 1
2849: DEC
2850: ST_TO_ADDR
2851: LD_INT 4
2853: PUSH
2854: FOR_TO
2855: IFFALSE 2941
// begin uc_side = 3 ;
2857: LD_ADDR_OWVAR 20
2861: PUSH
2862: LD_INT 3
2864: ST_TO_ADDR
// uc_nation = 3 ;
2865: LD_ADDR_OWVAR 21
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// hc_gallery =  ;
2873: LD_ADDR_OWVAR 33
2877: PUSH
2878: LD_STRING 
2880: ST_TO_ADDR
// hc_name =  ;
2881: LD_ADDR_OWVAR 26
2885: PUSH
2886: LD_STRING 
2888: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2889: LD_INT 0
2891: PPUSH
2892: LD_INT 4
2894: PPUSH
2895: LD_EXP 35
2899: PPUSH
2900: LD_EXP 36
2904: PPUSH
2905: CALL_OW 12
2909: PPUSH
2910: CALL_OW 380
// un = CreateHuman ;
2914: LD_ADDR_VAR 0 3
2918: PUSH
2919: CALL_OW 44
2923: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_INT 3
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 49
// end ;
2939: GO 2854
2941: POP
2942: POP
// end ; end_of_file
2943: LD_VAR 0 1
2947: RET
// export function PrepareArabianCommander ; begin
2948: LD_INT 0
2950: PPUSH
// uc_side = 2 ;
2951: LD_ADDR_OWVAR 20
2955: PUSH
2956: LD_INT 2
2958: ST_TO_ADDR
// uc_nation = 2 ;
2959: LD_ADDR_OWVAR 21
2963: PUSH
2964: LD_INT 2
2966: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
2967: LD_ADDR_EXP 26
2971: PUSH
2972: LD_STRING Dietrich
2974: PPUSH
2975: CALL_OW 25
2979: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
2980: LD_EXP 26
2984: PPUSH
2985: LD_INT 4
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// end ;
2995: LD_VAR 0 1
2999: RET
// export function PrepareArabian ; var i , un , veh ; begin
3000: LD_INT 0
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// for i = 1 to 3 do
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: DOUBLE
3012: LD_INT 1
3014: DEC
3015: ST_TO_ADDR
3016: LD_INT 3
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3106
// begin uc_side = 2 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 2
3029: ST_TO_ADDR
// uc_nation = 2 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 2
3037: ST_TO_ADDR
// hc_gallery =  ;
3038: LD_ADDR_OWVAR 33
3042: PUSH
3043: LD_STRING 
3045: ST_TO_ADDR
// hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 35
3064: PPUSH
3065: LD_EXP 36
3069: PPUSH
3070: CALL_OW 12
3074: PPUSH
3075: CALL_OW 380
// un = CreateHuman ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: CALL_OW 44
3088: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3089: LD_VAR 0 3
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: LD_INT 0
3099: PPUSH
3100: CALL_OW 49
// end ;
3104: GO 3019
3106: POP
3107: POP
// for i = 1 to 6 do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 6
3120: PUSH
3121: FOR_TO
3122: IFFALSE 3208
// begin uc_side = 2 ;
3124: LD_ADDR_OWVAR 20
3128: PUSH
3129: LD_INT 2
3131: ST_TO_ADDR
// uc_nation = 2 ;
3132: LD_ADDR_OWVAR 21
3136: PUSH
3137: LD_INT 2
3139: ST_TO_ADDR
// hc_gallery =  ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING 
3147: ST_TO_ADDR
// hc_name =  ;
3148: LD_ADDR_OWVAR 26
3152: PUSH
3153: LD_STRING 
3155: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3156: LD_INT 0
3158: PPUSH
3159: LD_INT 2
3161: PPUSH
3162: LD_EXP 35
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: CALL_OW 12
3176: PPUSH
3177: CALL_OW 380
// un = CreateHuman ;
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: CALL_OW 44
3190: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3191: LD_VAR 0 3
3195: PPUSH
3196: LD_INT 4
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 49
// end ;
3206: GO 3121
3208: POP
3209: POP
// for i = 1 to 6 do
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: DOUBLE
3216: LD_INT 1
3218: DEC
3219: ST_TO_ADDR
3220: LD_INT 6
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3310
// begin uc_side = 2 ;
3226: LD_ADDR_OWVAR 20
3230: PUSH
3231: LD_INT 2
3233: ST_TO_ADDR
// uc_nation = 2 ;
3234: LD_ADDR_OWVAR 21
3238: PUSH
3239: LD_INT 2
3241: ST_TO_ADDR
// hc_gallery =  ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING 
3249: ST_TO_ADDR
// hc_name =  ;
3250: LD_ADDR_OWVAR 26
3254: PUSH
3255: LD_STRING 
3257: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_EXP 35
3268: PPUSH
3269: LD_EXP 36
3273: PPUSH
3274: CALL_OW 12
3278: PPUSH
3279: CALL_OW 380
// un = CreateHuman ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: CALL_OW 44
3292: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3293: LD_VAR 0 3
3297: PPUSH
3298: LD_INT 4
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL_OW 49
// end ;
3308: GO 3223
3310: POP
3311: POP
// for i = 1 to 4 do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: DOUBLE
3318: LD_INT 1
3320: DEC
3321: ST_TO_ADDR
3322: LD_INT 4
3324: PUSH
3325: FOR_TO
3326: IFFALSE 3412
// begin uc_side = 2 ;
3328: LD_ADDR_OWVAR 20
3332: PUSH
3333: LD_INT 2
3335: ST_TO_ADDR
// uc_nation = 2 ;
3336: LD_ADDR_OWVAR 21
3340: PUSH
3341: LD_INT 2
3343: ST_TO_ADDR
// hc_gallery =  ;
3344: LD_ADDR_OWVAR 33
3348: PUSH
3349: LD_STRING 
3351: ST_TO_ADDR
// hc_name =  ;
3352: LD_ADDR_OWVAR 26
3356: PUSH
3357: LD_STRING 
3359: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_EXP 35
3370: PPUSH
3371: LD_EXP 36
3375: PPUSH
3376: CALL_OW 12
3380: PPUSH
3381: CALL_OW 380
// un = CreateHuman ;
3385: LD_ADDR_VAR 0 3
3389: PUSH
3390: CALL_OW 44
3394: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3395: LD_VAR 0 3
3399: PPUSH
3400: LD_INT 4
3402: PPUSH
3403: LD_INT 0
3405: PPUSH
3406: CALL_OW 49
// end ;
3410: GO 3325
3412: POP
3413: POP
// for i = 1 to 2 do
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_INT 2
3426: PUSH
3427: FOR_TO
3428: IFFALSE 3558
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 22
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 21
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 58
3457: PUSH
3458: EMPTY
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PPUSH
3466: CALL_OW 69
3470: ST_TO_ADDR
// uc_side = 2 ;
3471: LD_ADDR_OWVAR 20
3475: PUSH
3476: LD_INT 2
3478: ST_TO_ADDR
// uc_nation = 2 ;
3479: LD_ADDR_OWVAR 21
3483: PUSH
3484: LD_INT 2
3486: ST_TO_ADDR
// hc_gallery =  ;
3487: LD_ADDR_OWVAR 33
3491: PUSH
3492: LD_STRING 
3494: ST_TO_ADDR
// hc_name =  ;
3495: LD_ADDR_OWVAR 26
3499: PUSH
3500: LD_STRING 
3502: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3503: LD_INT 0
3505: PPUSH
3506: LD_INT 3
3508: PPUSH
3509: LD_EXP 35
3513: PPUSH
3514: LD_EXP 36
3518: PPUSH
3519: CALL_OW 12
3523: PPUSH
3524: CALL_OW 380
// un = CreateHuman ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: CALL_OW 44
3537: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 4
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 52
// end ;
3556: GO 3427
3558: POP
3559: POP
// end ; end_of_file
3560: LD_VAR 0 1
3564: RET
// every 1 do
3565: GO 3567
3567: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
3568: LD_INT 1
3570: PPUSH
3571: LD_INT 19
3573: PPUSH
3574: CALL_OW 332
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
3578: LD_EXP 1
3582: PPUSH
3583: CALL_OW 310
3587: PPUSH
3588: CALL_OW 87
// if IsOk ( Gary ) then
3592: LD_EXP 10
3596: PPUSH
3597: CALL_OW 302
3601: IFFALSE 3647
// begin DialogueOn ;
3603: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3607: LD_EXP 10
3611: PPUSH
3612: LD_STRING D2-Gary-1
3614: PPUSH
3615: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3619: LD_EXP 1
3623: PPUSH
3624: LD_STRING D2-JMM-1
3626: PPUSH
3627: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3631: LD_EXP 10
3635: PPUSH
3636: LD_STRING D2-Gary-2
3638: PPUSH
3639: CALL_OW 88
// DialogueOff ;
3643: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3647: LD_STRING M1
3649: PPUSH
3650: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3654: LD_INT 38
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3667: LD_INT 47
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: LD_INT 50
3675: PPUSH
3676: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3680: LD_INT 47
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: LD_INT 50
3688: PPUSH
3689: CALL_OW 291
// SaveForQuickRestart ;
3693: CALL_OW 22
// end ;
3697: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3698: LD_EXP 1
3702: PPUSH
3703: LD_EXP 11
3707: PPUSH
3708: CALL_OW 296
3712: PUSH
3713: LD_INT 15
3715: LESS
3716: IFFALSE 4161
3718: GO 3720
3720: DISABLE
// begin InGameOn ;
3721: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3725: LD_EXP 1
3729: PPUSH
3730: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3734: LD_EXP 1
3738: PPUSH
3739: CALL_OW 87
// wait ( 0 0$1 ) ;
3743: LD_INT 35
3745: PPUSH
3746: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3750: LD_INT 35
3752: PPUSH
3753: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
3757: LD_EXP 11
3761: PUSH
3762: LD_EXP 13
3766: PUSH
3767: LD_EXP 12
3771: PUSH
3772: LD_EXP 14
3776: PUSH
3777: LD_EXP 8
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PPUSH
3789: LD_EXP 1
3793: PPUSH
3794: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3798: LD_EXP 1
3802: PPUSH
3803: LD_EXP 11
3807: PPUSH
3808: CALL_OW 296
3812: PUSH
3813: LD_INT 5
3815: LESS
3816: IFFALSE 3750
// ComTurnUnit ( JMM , Simms ) ;
3818: LD_EXP 1
3822: PPUSH
3823: LD_EXP 11
3827: PPUSH
3828: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3832: LD_EXP 11
3836: PUSH
3837: LD_EXP 13
3841: PUSH
3842: LD_EXP 12
3846: PUSH
3847: LD_EXP 14
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3867: LD_EXP 1
3871: PUSH
3872: LD_EXP 11
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PPUSH
3881: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3885: LD_EXP 11
3889: PPUSH
3890: LD_STRING D2a-Sim-1
3892: PPUSH
3893: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3897: LD_EXP 1
3901: PPUSH
3902: LD_STRING D2a-JMM-1
3904: PPUSH
3905: CALL_OW 88
// if IsOk ( Joan ) then
3909: LD_EXP 13
3913: PPUSH
3914: CALL_OW 302
3918: IFFALSE 3970
// begin ComTurnUnit ( JMM , Joan ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
3934: LD_EXP 13
3938: PPUSH
3939: LD_STRING D2b-Joan-1
3941: PPUSH
3942: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D2b-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
3958: LD_EXP 13
3962: PPUSH
3963: LD_STRING D2b-Joan-2
3965: PPUSH
3966: CALL_OW 88
// end ; if IsOk ( Denis ) then
3970: LD_EXP 12
3974: PPUSH
3975: CALL_OW 302
3979: IFFALSE 4007
// begin ComTurnUnit ( JMM , Denis ) ;
3981: LD_EXP 1
3985: PPUSH
3986: LD_EXP 12
3990: PPUSH
3991: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
3995: LD_EXP 12
3999: PPUSH
4000: LD_STRING D2c-Den-1
4002: PPUSH
4003: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4007: LD_EXP 14
4011: PPUSH
4012: CALL_OW 302
4016: IFFALSE 4056
// begin ComTurnUnit ( JMM , Khatam ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_EXP 14
4027: PPUSH
4028: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4032: LD_EXP 1
4036: PPUSH
4037: LD_STRING D2c-JMM-1
4039: PPUSH
4040: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4044: LD_EXP 14
4048: PPUSH
4049: LD_STRING D2c-Khat-1
4051: PPUSH
4052: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4056: LD_EXP 8
4060: PPUSH
4061: CALL_OW 302
4065: IFFALSE 4120
// begin repeat wait ( 0 0$1 ) ;
4067: LD_INT 35
4069: PPUSH
4070: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4074: LD_EXP 8
4078: PPUSH
4079: LD_EXP 1
4083: PPUSH
4084: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4088: LD_EXP 1
4092: PPUSH
4093: LD_EXP 8
4097: PPUSH
4098: CALL_OW 296
4102: PUSH
4103: LD_INT 5
4105: LESS
4106: IFFALSE 4067
// Say ( Kikuchi , D3b-Yam-1 ) ;
4108: LD_EXP 8
4112: PPUSH
4113: LD_STRING D3b-Yam-1
4115: PPUSH
4116: CALL_OW 88
// end ; InGameOff ;
4120: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4124: LD_INT 22
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: PPUSH
4139: LD_INT 1
4141: PPUSH
4142: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4146: LD_STRING M1a
4148: PPUSH
4149: CALL_OW 337
// joinEpsilon = 1 ;
4153: LD_ADDR_EXP 28
4157: PUSH
4158: LD_INT 1
4160: ST_TO_ADDR
// end ;
4161: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4162: LD_EXP 54
4166: PUSH
4167: LD_INT 1
4169: EQUAL
4170: IFFALSE 4776
4172: GO 4174
4174: DISABLE
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4179: LD_ADDR_VAR 0 1
4183: PUSH
4184: LD_INT 22
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 4
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 26
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 26
4245: PUSH
4246: LD_INT 1
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 1
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: PPUSH
4297: CALL_OW 69
4301: PUSH
4302: LD_INT 1
4304: ARRAY
4305: ST_TO_ADDR
// DialogueOn ;
4306: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4310: LD_EXP 17
4314: PPUSH
4315: CALL_OW 302
4319: IFFALSE 4335
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4321: LD_EXP 17
4325: PPUSH
4326: LD_STRING D3-Sci1-1
4328: PPUSH
4329: CALL_OW 88
4333: GO 4347
// Say ( tmp1 , D3-Sci1-1 ) ;
4335: LD_VAR 0 1
4339: PPUSH
4340: LD_STRING D3-Sci1-1
4342: PPUSH
4343: CALL_OW 88
// if IsOk ( Gary ) then
4347: LD_EXP 10
4351: PPUSH
4352: CALL_OW 302
4356: IFFALSE 4372
// Say ( Gary , D3-Gary-1 ) else
4358: LD_EXP 10
4362: PPUSH
4363: LD_STRING D3-Gary-1
4365: PPUSH
4366: CALL_OW 88
4370: GO 4384
// Say ( tmp2 , D3-Gary-1 ) ;
4372: LD_VAR 0 2
4376: PPUSH
4377: LD_STRING D3-Gary-1
4379: PPUSH
4380: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4384: LD_EXP 17
4388: PPUSH
4389: CALL_OW 302
4393: IFFALSE 4409
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4395: LD_EXP 17
4399: PPUSH
4400: LD_STRING D3-Sci1-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4421
// Say ( tmp1 , D3-Sci1-2 ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: LD_STRING D3-Sci1-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4421: LD_EXP 1
4425: PPUSH
4426: LD_STRING D3-JMM-2
4428: PPUSH
4429: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4433: LD_EXP 17
4437: PPUSH
4438: CALL_OW 302
4442: IFFALSE 4458
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4444: LD_EXP 17
4448: PPUSH
4449: LD_STRING D3-Sci1-3
4451: PPUSH
4452: CALL_OW 88
4456: GO 4470
// Say ( tmp1 , D3-Sci1-3 ) ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_STRING D3-Sci1-3
4465: PPUSH
4466: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4470: LD_EXP 1
4474: PPUSH
4475: LD_STRING D3-JMM-3
4477: PPUSH
4478: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4482: LD_EXP 17
4486: PPUSH
4487: CALL_OW 302
4491: IFFALSE 4507
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4493: LD_EXP 17
4497: PPUSH
4498: LD_STRING D3-Sci1-4
4500: PPUSH
4501: CALL_OW 88
4505: GO 4519
// Say ( tmp1 , D3-Sci1-4 ) ;
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_STRING D3-Sci1-4
4514: PPUSH
4515: CALL_OW 88
// DialogueOff ;
4519: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4523: LD_INT 12
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4536: LD_INT 32
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4549: LD_INT 12
4551: PPUSH
4552: LD_INT 1
4554: PPUSH
4555: LD_INT 1
4557: PPUSH
4558: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
4562: LD_INT 33
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4575: LD_STRING M2
4577: PPUSH
4578: CALL_OW 337
// wait ( 5 5$0 ) ;
4582: LD_INT 10500
4584: PPUSH
4585: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4589: LD_EXP 11
4593: PPUSH
4594: CALL_OW 302
4598: PUSH
4599: LD_EXP 12
4603: PPUSH
4604: CALL_OW 302
4608: AND
4609: IFFALSE 4776
// begin DialogueOn ;
4611: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4615: LD_EXP 11
4619: PPUSH
4620: LD_STRING D3a-Sim-1
4622: PPUSH
4623: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4627: LD_EXP 12
4631: PPUSH
4632: LD_STRING D3a-Sci1-1
4634: PPUSH
4635: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4639: LD_EXP 11
4643: PPUSH
4644: LD_STRING D3a-Sim-2
4646: PPUSH
4647: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4651: LD_EXP 12
4655: PPUSH
4656: LD_STRING D3a-Sci1-2
4658: PPUSH
4659: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4663: LD_EXP 11
4667: PPUSH
4668: LD_STRING D3a-Sim-3
4670: PPUSH
4671: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4675: LD_EXP 12
4679: PPUSH
4680: LD_STRING D3a-Sci1-3
4682: PPUSH
4683: CALL_OW 88
// if IsOK ( Joan ) then
4687: LD_EXP 13
4691: PPUSH
4692: CALL_OW 302
4696: IFFALSE 4712
// Say ( Simms , D3a-Sim-4 ) else
4698: LD_EXP 11
4702: PPUSH
4703: LD_STRING D3a-Sim-4
4705: PPUSH
4706: CALL_OW 88
4710: GO 4724
// Say ( Simms , D3a-Sim-4a ) ;
4712: LD_EXP 11
4716: PPUSH
4717: LD_STRING D3a-Sim-4a
4719: PPUSH
4720: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4724: LD_EXP 12
4728: PPUSH
4729: LD_STRING D3a-Sci1-4
4731: PPUSH
4732: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4736: LD_EXP 11
4740: PPUSH
4741: LD_STRING D3a-Sim-5
4743: PPUSH
4744: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4748: LD_EXP 12
4752: PPUSH
4753: LD_STRING D3a-Sci1-5
4755: PPUSH
4756: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4760: LD_EXP 11
4764: PPUSH
4765: LD_STRING D3a-Sim-6
4767: PPUSH
4768: CALL_OW 88
// DialogueOff ;
4772: CALL_OW 7
// end ; end ;
4776: PPOPN 2
4778: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4779: LD_EXP 28
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: IFFALSE 5107
4789: GO 4791
4791: DISABLE
4792: LD_INT 0
4794: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4795: LD_EXP 18
4799: PPUSH
4800: LD_STRING D4-FSol1-1
4802: PPUSH
4803: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4807: LD_STRING M3
4809: PPUSH
4810: CALL_OW 337
// PrepareRussians ;
4814: CALL 2483 0 0
// rnd = Rand ( 1 , 100 ) ;
4818: LD_ADDR_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 100
4828: PPUSH
4829: CALL_OW 12
4833: ST_TO_ADDR
// if difficulty = 1 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 1
4841: EQUAL
4842: IFFALSE 4925
// begin if rnd > 0 and rnd < 51 then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_INT 0
4851: GREATER
4852: PUSH
4853: LD_VAR 0 1
4857: PUSH
4858: LD_INT 51
4860: LESS
4861: AND
4862: IFFALSE 4871
// BuildRussianBase ( 2 ) ;
4864: LD_INT 2
4866: PPUSH
4867: CALL 7949 0 1
// if rnd > 50 and rnd < 81 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 50
4878: GREATER
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_INT 81
4887: LESS
4888: AND
4889: IFFALSE 4898
// BuildRussianBase ( 1 ) ;
4891: LD_INT 1
4893: PPUSH
4894: CALL 7949 0 1
// if rnd > 80 and rnd < 101 then
4898: LD_VAR 0 1
4902: PUSH
4903: LD_INT 80
4905: GREATER
4906: PUSH
4907: LD_VAR 0 1
4911: PUSH
4912: LD_INT 101
4914: LESS
4915: AND
4916: IFFALSE 4925
// BuildRussianBase ( 3 ) ;
4918: LD_INT 3
4920: PPUSH
4921: CALL 7949 0 1
// end ; if difficulty = 2 then
4925: LD_OWVAR 67
4929: PUSH
4930: LD_INT 2
4932: EQUAL
4933: IFFALSE 5016
// begin if rnd > 0 and rnd < 61 then
4935: LD_VAR 0 1
4939: PUSH
4940: LD_INT 0
4942: GREATER
4943: PUSH
4944: LD_VAR 0 1
4948: PUSH
4949: LD_INT 61
4951: LESS
4952: AND
4953: IFFALSE 4962
// BuildRussianBase ( 2 ) ;
4955: LD_INT 2
4957: PPUSH
4958: CALL 7949 0 1
// if rnd > 60 and rnd < 81 then
4962: LD_VAR 0 1
4966: PUSH
4967: LD_INT 60
4969: GREATER
4970: PUSH
4971: LD_VAR 0 1
4975: PUSH
4976: LD_INT 81
4978: LESS
4979: AND
4980: IFFALSE 4989
// BuildRussianBase ( 1 ) ;
4982: LD_INT 1
4984: PPUSH
4985: CALL 7949 0 1
// if rnd > 80 and rnd < 101 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 80
4996: GREATER
4997: PUSH
4998: LD_VAR 0 1
5002: PUSH
5003: LD_INT 101
5005: LESS
5006: AND
5007: IFFALSE 5016
// BuildRussianBase ( 3 ) ;
5009: LD_INT 3
5011: PPUSH
5012: CALL 7949 0 1
// end ; if difficulty = 3 then
5016: LD_OWVAR 67
5020: PUSH
5021: LD_INT 3
5023: EQUAL
5024: IFFALSE 5107
// begin if rnd > 0 and rnd < 71 then
5026: LD_VAR 0 1
5030: PUSH
5031: LD_INT 0
5033: GREATER
5034: PUSH
5035: LD_VAR 0 1
5039: PUSH
5040: LD_INT 71
5042: LESS
5043: AND
5044: IFFALSE 5053
// BuildRussianBase ( 3 ) ;
5046: LD_INT 3
5048: PPUSH
5049: CALL 7949 0 1
// if rnd > 70 and rnd < 81 then
5053: LD_VAR 0 1
5057: PUSH
5058: LD_INT 70
5060: GREATER
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: LD_INT 81
5069: LESS
5070: AND
5071: IFFALSE 5080
// BuildRussianBase ( 2 ) ;
5073: LD_INT 2
5075: PPUSH
5076: CALL 7949 0 1
// if rnd > 80 and rnd < 101 then
5080: LD_VAR 0 1
5084: PUSH
5085: LD_INT 80
5087: GREATER
5088: PUSH
5089: LD_VAR 0 1
5093: PUSH
5094: LD_INT 101
5096: LESS
5097: AND
5098: IFFALSE 5107
// BuildRussianBase ( 1 ) ;
5100: LD_INT 1
5102: PPUSH
5103: CALL 7949 0 1
// end ; end ;
5107: PPOPN 1
5109: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5110: LD_INT 54
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 321
5120: PUSH
5121: LD_INT 2
5123: EQUAL
5124: PUSH
5125: LD_INT 21
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 321
5135: PUSH
5136: LD_INT 2
5138: EQUAL
5139: OR
5140: PUSH
5141: LD_INT 22
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 321
5151: PUSH
5152: LD_INT 2
5154: EQUAL
5155: OR
5156: IFFALSE 5473
5158: GO 5160
5160: DISABLE
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
// begin if IsOk ( Denis ) then
5165: LD_EXP 12
5169: PPUSH
5170: CALL_OW 302
5174: IFFALSE 5268
// begin DialogueOn ;
5176: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5180: LD_EXP 1
5184: PPUSH
5185: LD_STRING D6-JMM-1
5187: PPUSH
5188: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5192: LD_EXP 12
5196: PPUSH
5197: LD_STRING D6-Sci1-1
5199: PPUSH
5200: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5204: LD_EXP 1
5208: PPUSH
5209: LD_STRING D6-JMM-2
5211: PPUSH
5212: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5216: LD_EXP 12
5220: PPUSH
5221: LD_STRING D6-Sci1-2
5223: PPUSH
5224: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5228: LD_EXP 1
5232: PPUSH
5233: LD_STRING D6-JMM-3
5235: PPUSH
5236: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5240: LD_EXP 12
5244: PPUSH
5245: LD_STRING D6-Sci1-3
5247: PPUSH
5248: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5252: LD_EXP 1
5256: PPUSH
5257: LD_STRING D6-JMM-4
5259: PPUSH
5260: CALL_OW 88
// DialogueOff ;
5264: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
5268: LD_INT 1050
5270: PPUSH
5271: CALL_OW 67
// if arabianTrait = 0 then
5275: LD_EXP 48
5279: PUSH
5280: LD_INT 0
5282: EQUAL
5283: IFFALSE 5417
// begin DialogueOn ;
5285: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
5289: LD_INT 22
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 25
5301: PUSH
5302: LD_INT 4
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 26
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL_OW 69
5328: PPUSH
5329: LD_STRING D5-Ar1-1
5331: PPUSH
5332: LD_STRING D5-Ar1-1
5334: PPUSH
5335: CALL 7422 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
5339: LD_EXP 26
5343: PPUSH
5344: LD_STRING D5-Diet-1
5346: PPUSH
5347: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
5351: LD_INT 22
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 25
5363: PUSH
5364: LD_INT 4
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 26
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 69
5390: PPUSH
5391: LD_STRING D5-Ar1-2
5393: PPUSH
5394: LD_STRING D5-Ar1-2
5396: PPUSH
5397: CALL 7422 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
5401: LD_EXP 26
5405: PPUSH
5406: LD_STRING D5-Diet-2
5408: PPUSH
5409: CALL_OW 88
// DialogueOff ;
5413: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5417: LD_INT 2100
5419: PUSH
5420: LD_INT 3150
5422: PUSH
5423: LD_INT 4200
5425: PUSH
5426: LD_INT 5250
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 4
5440: PPUSH
5441: CALL_OW 12
5445: ARRAY
5446: PPUSH
5447: CALL_OW 67
// if arabianTrait = 0 then
5451: LD_EXP 48
5455: PUSH
5456: LD_INT 0
5458: EQUAL
5459: IFFALSE 5473
// begin arabianTrait = 1 ;
5461: LD_ADDR_EXP 48
5465: PUSH
5466: LD_INT 1
5468: ST_TO_ADDR
// PrepareArabianTrait ;
5469: CALL 5476 0 0
// end ; end ;
5473: PPOPN 2
5475: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
5476: LD_INT 0
5478: PPUSH
5479: PPUSH
5480: PPUSH
5481: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5482: LD_ADDR_VAR 0 2
5486: PUSH
5487: LD_INT 22
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: EMPTY
5494: LIST
5495: LIST
5496: PUSH
5497: LD_INT 25
5499: PUSH
5500: LD_INT 4
5502: PUSH
5503: EMPTY
5504: LIST
5505: LIST
5506: PUSH
5507: EMPTY
5508: LIST
5509: LIST
5510: PPUSH
5511: CALL_OW 69
5515: PUSH
5516: FOR_IN
5517: IFFALSE 5530
// ComExitBuilding ( i ) ;
5519: LD_VAR 0 2
5523: PPUSH
5524: CALL_OW 122
5528: GO 5516
5530: POP
5531: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 22
5539: PUSH
5540: LD_INT 2
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 25
5549: PUSH
5550: LD_INT 3
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 69
5565: PUSH
5566: FOR_IN
5567: IFFALSE 5580
// ComExitVehicle ( i ) ;
5569: LD_VAR 0 2
5573: PPUSH
5574: CALL_OW 121
5578: GO 5566
5580: POP
5581: POP
// wait ( 0 0$3 ) ;
5582: LD_INT 105
5584: PPUSH
5585: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5589: LD_INT 76
5591: PPUSH
5592: LD_INT 19
5594: PPUSH
5595: CALL_OW 84
// DialogueOn ;
5599: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 26
5615: PUSH
5616: LD_INT 1
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: PPUSH
5627: CALL_OW 69
5631: PUSH
5632: LD_EXP 1
5636: PUSH
5637: LD_EXP 14
5641: PUSH
5642: EMPTY
5643: LIST
5644: LIST
5645: DIFF
5646: PPUSH
5647: LD_STRING D8-Sol1-1
5649: PPUSH
5650: LD_STRING D8-Sol1-1
5652: PPUSH
5653: CALL 7422 0 3
// if IsOK ( DeltaDoctor ) then
5657: LD_EXP 17
5661: PPUSH
5662: CALL_OW 302
5666: IFFALSE 5682
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5668: LD_EXP 17
5672: PPUSH
5673: LD_STRING D8-Sci1-1
5675: PPUSH
5676: CALL_OW 88
5680: GO 5787
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam ] , D8-Sol1-1 , D8-Sol1-1 ) ;
5682: LD_INT 22
5684: PUSH
5685: LD_INT 1
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: PUSH
5692: LD_INT 26
5694: PUSH
5695: LD_INT 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 2
5704: PUSH
5705: LD_INT 25
5707: PUSH
5708: LD_INT 1
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: PUSH
5715: LD_INT 25
5717: PUSH
5718: LD_INT 2
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 25
5727: PUSH
5728: LD_INT 3
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: LD_INT 25
5737: PUSH
5738: LD_INT 4
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: LIST
5750: LIST
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: LIST
5756: PPUSH
5757: CALL_OW 69
5761: PUSH
5762: LD_EXP 1
5766: PUSH
5767: LD_EXP 14
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: DIFF
5776: PPUSH
5777: LD_STRING D8-Sol1-1
5779: PPUSH
5780: LD_STRING D8-Sol1-1
5782: PPUSH
5783: CALL 7422 0 3
// Say ( JMM , D8-JMM-1 ) ;
5787: LD_EXP 1
5791: PPUSH
5792: LD_STRING D8-JMM-1
5794: PPUSH
5795: CALL_OW 88
// DialogueOff ;
5799: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
5803: LD_INT 2
5805: PPUSH
5806: LD_INT 2
5808: PPUSH
5809: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
5813: LD_INT 1
5815: PPUSH
5816: LD_INT 2
5818: PPUSH
5819: LD_INT 2
5821: PPUSH
5822: LD_INT 1
5824: PPUSH
5825: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
5829: LD_INT 3
5831: PPUSH
5832: LD_INT 2
5834: PPUSH
5835: LD_INT 1
5837: PPUSH
5838: LD_INT 1
5840: PPUSH
5841: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
5845: LD_ADDR_VAR 0 2
5849: PUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 2
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 21
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 69
5878: PUSH
5879: FOR_IN
5880: IFFALSE 6020
// begin ComExitBuilding ( i ) ;
5882: LD_VAR 0 2
5886: PPUSH
5887: CALL_OW 122
// wait ( 0 0$1 ) ;
5891: LD_INT 35
5893: PPUSH
5894: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
5898: LD_VAR 0 2
5902: PPUSH
5903: LD_INT 77
5905: PPUSH
5906: LD_INT 10
5908: PPUSH
5909: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
5913: LD_VAR 0 2
5917: PPUSH
5918: LD_INT 82
5920: PPUSH
5921: LD_INT 5
5923: PPUSH
5924: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
5928: LD_VAR 0 2
5932: PPUSH
5933: LD_INT 95
5935: PPUSH
5936: LD_INT 12
5938: PPUSH
5939: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
5943: LD_VAR 0 2
5947: PPUSH
5948: LD_INT 102
5950: PPUSH
5951: LD_INT 11
5953: PPUSH
5954: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
5958: LD_VAR 0 2
5962: PPUSH
5963: LD_INT 116
5965: PPUSH
5966: LD_INT 15
5968: PPUSH
5969: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
5973: LD_VAR 0 2
5977: PPUSH
5978: LD_INT 140
5980: PPUSH
5981: LD_INT 25
5983: PPUSH
5984: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
5988: LD_VAR 0 2
5992: PPUSH
5993: LD_INT 160
5995: PPUSH
5996: LD_INT 56
5998: PPUSH
5999: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6003: LD_VAR 0 2
6007: PPUSH
6008: LD_INT 189
6010: PPUSH
6011: LD_INT 79
6013: PPUSH
6014: CALL_OW 174
// end ;
6018: GO 5879
6020: POP
6021: POP
// arabianAttackersAI = 1 ;
6022: LD_ADDR_EXP 45
6026: PUSH
6027: LD_INT 1
6029: ST_TO_ADDR
// wait ( 0 0$30 ) ;
6030: LD_INT 1050
6032: PPUSH
6033: CALL_OW 67
// if IsOk ( Gary ) then
6037: LD_EXP 10
6041: PPUSH
6042: CALL_OW 302
6046: IFFALSE 6060
// Say ( Gary , D8a-Gary-1 ) ;
6048: LD_EXP 10
6052: PPUSH
6053: LD_STRING D8a-Gary-1
6055: PPUSH
6056: CALL_OW 88
// wait ( 0 0$5 ) ;
6060: LD_INT 175
6062: PPUSH
6063: CALL_OW 67
// if IsOK ( Khatam ) then
6067: LD_EXP 14
6071: PPUSH
6072: CALL_OW 302
6076: IFFALSE 6496
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] ;
6078: LD_ADDR_VAR 0 3
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 2
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 1
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 25
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 25
6138: PUSH
6139: LD_INT 4
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: PUSH
6153: EMPTY
6154: LIST
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: PUSH
6163: LD_EXP 1
6167: PUSH
6168: LD_EXP 14
6172: PUSH
6173: LD_EXP 13
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: LIST
6182: DIFF
6183: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6184: LD_EXP 14
6188: PPUSH
6189: LD_INT 8
6191: PPUSH
6192: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6196: LD_EXP 14
6200: PPUSH
6201: CALL_OW 122
// wait ( 0 0$1 ) ;
6205: LD_INT 35
6207: PPUSH
6208: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6212: LD_EXP 14
6216: PPUSH
6217: CALL_OW 121
// wait ( 0 0$1 ) ;
6221: LD_INT 35
6223: PPUSH
6224: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6228: LD_EXP 14
6232: PPUSH
6233: LD_INT 7
6235: PPUSH
6236: CALL_OW 113
// DialogueOn ;
6240: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
6244: LD_VAR 0 3
6248: PUSH
6249: LD_INT 1
6251: ARRAY
6252: PPUSH
6253: CALL_OW 258
6257: PUSH
6258: LD_INT 1
6260: EQUAL
6261: IFFALSE 6281
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
6263: LD_VAR 0 3
6267: PUSH
6268: LD_INT 1
6270: ARRAY
6271: PPUSH
6272: LD_STRING D8b-Sol1-1
6274: PPUSH
6275: CALL_OW 88
6279: GO 6297
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
6281: LD_VAR 0 3
6285: PUSH
6286: LD_INT 1
6288: ARRAY
6289: PPUSH
6290: LD_STRING D8b-FSol1-1
6292: PPUSH
6293: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
6297: LD_EXP 14
6301: PPUSH
6302: LD_STRING D8b-Khat-1
6304: PPUSH
6305: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6309: LD_VAR 0 3
6313: PUSH
6314: LD_INT 1
6316: ARRAY
6317: PPUSH
6318: CALL_OW 258
6322: PUSH
6323: LD_INT 1
6325: EQUAL
6326: IFFALSE 6346
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
6328: LD_VAR 0 3
6332: PUSH
6333: LD_INT 1
6335: ARRAY
6336: PPUSH
6337: LD_STRING D8b-Sol1-2
6339: PPUSH
6340: CALL_OW 88
6344: GO 6362
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: ARRAY
6354: PPUSH
6355: LD_STRING D8b-FSol1-2
6357: PPUSH
6358: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
6362: LD_EXP 14
6366: PPUSH
6367: LD_STRING D8b-Khat-2
6369: PPUSH
6370: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6374: LD_VAR 0 3
6378: PUSH
6379: LD_INT 1
6381: ARRAY
6382: PPUSH
6383: CALL_OW 258
6387: PUSH
6388: LD_INT 1
6390: EQUAL
6391: IFFALSE 6411
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
6393: LD_VAR 0 3
6397: PUSH
6398: LD_INT 1
6400: ARRAY
6401: PPUSH
6402: LD_STRING D8b-Sol1-3
6404: PPUSH
6405: CALL_OW 88
6409: GO 6427
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
6411: LD_VAR 0 3
6415: PUSH
6416: LD_INT 1
6418: ARRAY
6419: PPUSH
6420: LD_STRING D8b-FSol1-3
6422: PPUSH
6423: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
6427: LD_EXP 14
6431: PPUSH
6432: LD_STRING D8b-Khat-3
6434: PPUSH
6435: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
6439: LD_VAR 0 3
6443: PUSH
6444: LD_INT 1
6446: ARRAY
6447: PPUSH
6448: CALL_OW 258
6452: PUSH
6453: LD_INT 1
6455: EQUAL
6456: IFFALSE 6476
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
6458: LD_VAR 0 3
6462: PUSH
6463: LD_INT 1
6465: ARRAY
6466: PPUSH
6467: LD_STRING D8b-Sol1-4
6469: PPUSH
6470: CALL_OW 88
6474: GO 6492
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
6476: LD_VAR 0 3
6480: PUSH
6481: LD_INT 1
6483: ARRAY
6484: PPUSH
6485: LD_STRING D8b-FSol1-4
6487: PPUSH
6488: CALL_OW 88
// DialogueOff ;
6492: CALL_OW 7
// end ; end ;
6496: LD_VAR 0 1
6500: RET
// every 0 0$1 do var i ;
6501: GO 6503
6503: DISABLE
6504: LD_INT 0
6506: PPUSH
// begin enable ;
6507: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6508: LD_ADDR_VAR 0 1
6512: PUSH
6513: LD_INT 7
6515: PPUSH
6516: LD_INT 22
6518: PUSH
6519: LD_INT 2
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: PPUSH
6526: CALL_OW 70
6530: PUSH
6531: FOR_IN
6532: IFFALSE 6600
// begin if GetClass ( i ) = 4 then
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 257
6543: PUSH
6544: LD_INT 4
6546: EQUAL
6547: IFFALSE 6559
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6549: LD_INT 1
6551: PPUSH
6552: LD_STRING 10_ScientistsEscape_1
6554: PPUSH
6555: CALL_OW 39
// if i = Dietrich then
6559: LD_VAR 0 1
6563: PUSH
6564: LD_EXP 26
6568: EQUAL
6569: IFFALSE 6581
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6571: LD_INT 1
6573: PPUSH
6574: LD_STRING 10_GensherEscape_1
6576: PPUSH
6577: CALL_OW 39
// arabianEscape = 1 ;
6581: LD_ADDR_EXP 46
6585: PUSH
6586: LD_INT 1
6588: ST_TO_ADDR
// RemoveUnit ( i ) ;
6589: LD_VAR 0 1
6593: PPUSH
6594: CALL_OW 64
// end ;
6598: GO 6531
6600: POP
6601: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6602: LD_EXP 14
6606: PPUSH
6607: LD_INT 7
6609: PPUSH
6610: CALL_OW 308
6614: IFFALSE 6633
// begin KhatamStatus = 1 ;
6616: LD_ADDR_EXP 49
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6624: LD_EXP 14
6628: PPUSH
6629: CALL_OW 64
// end ; end ;
6633: PPOPN 1
6635: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6636: LD_EXP 14
6640: PPUSH
6641: CALL_OW 301
6645: IFFALSE 6658
6647: GO 6649
6649: DISABLE
// KhatamStatus = 0 ;
6650: LD_ADDR_EXP 49
6654: PUSH
6655: LD_INT 0
6657: ST_TO_ADDR
6658: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
6659: LD_INT 22
6661: PUSH
6662: LD_INT 2
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 21
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PPUSH
6683: CALL_OW 69
6687: PUSH
6688: LD_INT 0
6690: EQUAL
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_INT 4
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 1
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PPUSH
6716: CALL_OW 69
6720: PUSH
6721: LD_INT 0
6723: EQUAL
6724: AND
6725: IFFALSE 6738
6727: GO 6729
6729: DISABLE
// arabianDefeated = 1 ;
6730: LD_ADDR_EXP 47
6734: PUSH
6735: LD_INT 1
6737: ST_TO_ADDR
6738: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
6739: LD_INT 54
6741: PPUSH
6742: LD_INT 1
6744: PPUSH
6745: CALL_OW 321
6749: PUSH
6750: LD_INT 2
6752: EQUAL
6753: PUSH
6754: LD_INT 55
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 321
6764: PUSH
6765: LD_INT 2
6767: EQUAL
6768: AND
6769: PUSH
6770: LD_INT 21
6772: PPUSH
6773: LD_INT 1
6775: PPUSH
6776: CALL_OW 321
6780: PUSH
6781: LD_INT 2
6783: EQUAL
6784: AND
6785: PUSH
6786: LD_INT 22
6788: PPUSH
6789: LD_INT 1
6791: PPUSH
6792: CALL_OW 321
6796: PUSH
6797: LD_INT 2
6799: EQUAL
6800: AND
6801: PUSH
6802: LD_INT 12
6804: PPUSH
6805: LD_INT 1
6807: PPUSH
6808: CALL_OW 321
6812: PUSH
6813: LD_INT 2
6815: EQUAL
6816: AND
6817: PUSH
6818: LD_INT 32
6820: PPUSH
6821: LD_INT 1
6823: PPUSH
6824: CALL_OW 321
6828: PUSH
6829: LD_INT 2
6831: EQUAL
6832: AND
6833: PUSH
6834: LD_EXP 53
6838: PUSH
6839: LD_INT 0
6841: EQUAL
6842: AND
6843: PUSH
6844: LD_EXP 48
6848: PUSH
6849: LD_INT 0
6851: EQUAL
6852: AND
6853: IFFALSE 6870
6855: GO 6857
6857: DISABLE
// begin arabianTrait = 1 ;
6858: LD_ADDR_EXP 48
6862: PUSH
6863: LD_INT 1
6865: ST_TO_ADDR
// PrepareArabianTrait ;
6866: CALL 5476 0 0
// end ;
6870: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6871: LD_EXP 28
6875: PUSH
6876: LD_INT 1
6878: EQUAL
6879: PUSH
6880: LD_STRING 02_mikhailStatus_1
6882: PPUSH
6883: LD_INT 0
6885: PPUSH
6886: CALL_OW 30
6890: PUSH
6891: LD_INT 1
6893: EQUAL
6894: AND
6895: IFFALSE 6904
6897: GO 6899
6899: DISABLE
// PrepareCornell ;
6900: CALL 2347 0 0
6904: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6905: LD_INT 1
6907: PPUSH
6908: LD_EXP 19
6912: PPUSH
6913: CALL_OW 292
6917: IFFALSE 7142
6919: GO 6921
6921: DISABLE
// begin InGameOn ;
6922: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6926: LD_EXP 19
6930: PPUSH
6931: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6935: LD_EXP 19
6939: PPUSH
6940: LD_STRING D7-Corn-1
6942: PPUSH
6943: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
6947: LD_INT 22
6949: PUSH
6950: LD_INT 1
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 3
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: LD_INT 25
6992: PUSH
6993: LD_INT 4
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PPUSH
7011: CALL_OW 69
7015: PUSH
7016: LD_EXP 1
7020: PUSH
7021: LD_EXP 13
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: DIFF
7030: PPUSH
7031: LD_STRING D7-Sol1-1
7033: PPUSH
7034: LD_STRING D7-FSol1-1
7036: PPUSH
7037: CALL 7422 0 3
// CenterNowOnUnits ( Cornell ) ;
7041: LD_EXP 19
7045: PPUSH
7046: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
7050: LD_EXP 19
7054: PPUSH
7055: LD_STRING D7-Corn-2
7057: PPUSH
7058: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
7062: LD_EXP 1
7066: PPUSH
7067: LD_STRING D7-JMM-2
7069: PPUSH
7070: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
7074: LD_EXP 19
7078: PPUSH
7079: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
7083: LD_EXP 19
7087: PPUSH
7088: LD_STRING D7-Corn-3
7090: PPUSH
7091: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
7095: LD_EXP 19
7099: PPUSH
7100: LD_INT 250
7102: PPUSH
7103: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
7107: LD_EXP 19
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: CALL_OW 235
// wait ( 0 0$1 ) ;
7119: LD_INT 35
7121: PPUSH
7122: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
7126: LD_EXP 1
7130: PPUSH
7131: LD_STRING D7-JMM-3
7133: PPUSH
7134: CALL_OW 88
// InGameOff ;
7138: CALL_OW 9
// end ;
7142: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
7143: LD_EXP 19
7147: PPUSH
7148: CALL_OW 255
7152: PUSH
7153: LD_INT 1
7155: EQUAL
7156: PUSH
7157: LD_EXP 19
7161: PPUSH
7162: CALL_OW 256
7166: PUSH
7167: LD_INT 251
7169: GREATER
7170: AND
7171: IFFALSE 7364
7173: GO 7175
7175: DISABLE
// begin DialogueOn ;
7176: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D7a-JMM-1
7187: PPUSH
7188: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7192: LD_EXP 19
7196: PPUSH
7197: LD_STRING D7a-Corn-1
7199: PPUSH
7200: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7204: LD_EXP 1
7208: PPUSH
7209: LD_STRING D7a-JMM-2
7211: PPUSH
7212: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7216: LD_EXP 19
7220: PPUSH
7221: LD_STRING D7a-Corn-2
7223: PPUSH
7224: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7228: LD_EXP 1
7232: PPUSH
7233: LD_STRING D7a-JMM-3
7235: PPUSH
7236: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7240: LD_EXP 19
7244: PPUSH
7245: LD_STRING D7a-Corn-3
7247: PPUSH
7248: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7252: LD_EXP 1
7256: PPUSH
7257: LD_STRING D7a-JMM-4
7259: PPUSH
7260: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7264: LD_EXP 19
7268: PPUSH
7269: LD_STRING D7a-Corn-4
7271: PPUSH
7272: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7276: LD_EXP 1
7280: PPUSH
7281: LD_STRING D7a-JMM-5
7283: PPUSH
7284: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7288: LD_EXP 19
7292: PPUSH
7293: LD_STRING D7a-Corn-5
7295: PPUSH
7296: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
7300: LD_EXP 1
7304: PPUSH
7305: LD_STRING D7a-JMM-6
7307: PPUSH
7308: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
7312: LD_EXP 19
7316: PPUSH
7317: LD_STRING D7a-Corn-6
7319: PPUSH
7320: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
7324: LD_EXP 1
7328: PPUSH
7329: LD_STRING D7a-JMM-7
7331: PPUSH
7332: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
7336: LD_EXP 19
7340: PPUSH
7341: LD_STRING D7a-Corn-7
7343: PPUSH
7344: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7348: LD_EXP 1
7352: PPUSH
7353: LD_STRING D7a-JMM-8
7355: PPUSH
7356: CALL_OW 88
// DialogueOff ;
7360: CALL_OW 7
// end ; end_of_file
7364: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7365: LD_INT 0
7367: PPUSH
7368: PPUSH
// if exist_mode then
7369: LD_VAR 0 2
7373: IFFALSE 7392
// unit := CreateCharacter ( ident ) else
7375: LD_ADDR_VAR 0 4
7379: PUSH
7380: LD_VAR 0 1
7384: PPUSH
7385: CALL_OW 34
7389: ST_TO_ADDR
7390: GO 7407
// unit := NewCharacter ( ident ) ;
7392: LD_ADDR_VAR 0 4
7396: PUSH
7397: LD_VAR 0 1
7401: PPUSH
7402: CALL_OW 25
7406: ST_TO_ADDR
// result := unit ;
7407: LD_ADDR_VAR 0 3
7411: PUSH
7412: LD_VAR 0 4
7416: ST_TO_ADDR
// end ;
7417: LD_VAR 0 3
7421: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7422: LD_INT 0
7424: PPUSH
7425: PPUSH
7426: PPUSH
// rnd = rand ( 1 , characters ) ;
7427: LD_ADDR_VAR 0 6
7431: PUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_VAR 0 1
7439: PPUSH
7440: CALL_OW 12
7444: ST_TO_ADDR
// for i = 1 to characters do
7445: LD_ADDR_VAR 0 5
7449: PUSH
7450: DOUBLE
7451: LD_INT 1
7453: DEC
7454: ST_TO_ADDR
7455: LD_VAR 0 1
7459: PUSH
7460: FOR_TO
7461: IFFALSE 7571
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7463: LD_VAR 0 5
7467: PUSH
7468: LD_VAR 0 6
7472: EQUAL
7473: PUSH
7474: LD_VAR 0 1
7478: PUSH
7479: LD_VAR 0 5
7483: ARRAY
7484: PPUSH
7485: CALL_OW 258
7489: PUSH
7490: LD_INT 1
7492: EQUAL
7493: AND
7494: IFFALSE 7516
// Say ( characters [ i ] , dialogMID ) ;
7496: LD_VAR 0 1
7500: PUSH
7501: LD_VAR 0 5
7505: ARRAY
7506: PPUSH
7507: LD_VAR 0 2
7511: PPUSH
7512: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7516: LD_VAR 0 5
7520: PUSH
7521: LD_VAR 0 6
7525: EQUAL
7526: PUSH
7527: LD_VAR 0 1
7531: PUSH
7532: LD_VAR 0 5
7536: ARRAY
7537: PPUSH
7538: CALL_OW 258
7542: PUSH
7543: LD_INT 2
7545: EQUAL
7546: AND
7547: IFFALSE 7569
// Say ( characters [ i ] , dialogFID ) ;
7549: LD_VAR 0 1
7553: PUSH
7554: LD_VAR 0 5
7558: ARRAY
7559: PPUSH
7560: LD_VAR 0 3
7564: PPUSH
7565: CALL_OW 88
// end ;
7569: GO 7460
7571: POP
7572: POP
// end ;
7573: LD_VAR 0 4
7577: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7578: LD_INT 0
7580: PPUSH
7581: PPUSH
// for i in charactersList do
7582: LD_ADDR_VAR 0 4
7586: PUSH
7587: LD_VAR 0 1
7591: PUSH
7592: FOR_IN
7593: IFFALSE 7622
// begin if IsOk ( i ) then
7595: LD_VAR 0 4
7599: PPUSH
7600: CALL_OW 302
7604: IFFALSE 7620
// SaveCharacters ( i , ident ) ;
7606: LD_VAR 0 4
7610: PPUSH
7611: LD_VAR 0 2
7615: PPUSH
7616: CALL_OW 38
// end ;
7620: GO 7592
7622: POP
7623: POP
// end ;
7624: LD_VAR 0 3
7628: RET
// export function PrepareDifficulty ; begin
7629: LD_INT 0
7631: PPUSH
// if difficulty = 1 then
7632: LD_OWVAR 67
7636: PUSH
7637: LD_INT 1
7639: EQUAL
7640: IFFALSE 7684
// begin RuSolMinLevel = 4 ;
7642: LD_ADDR_EXP 35
7646: PUSH
7647: LD_INT 4
7649: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7650: LD_ADDR_EXP 36
7654: PUSH
7655: LD_INT 7
7657: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7658: LD_INT 51
7660: PPUSH
7661: LD_INT 6
7663: PPUSH
7664: LD_INT 2
7666: PPUSH
7667: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7671: LD_INT 51
7673: PPUSH
7674: LD_INT 5
7676: PPUSH
7677: LD_INT 2
7679: PPUSH
7680: CALL_OW 322
// end ; if difficulty = 2 then
7684: LD_OWVAR 67
7688: PUSH
7689: LD_INT 2
7691: EQUAL
7692: IFFALSE 7788
// begin RuSolMinLevel = 5 ;
7694: LD_ADDR_EXP 35
7698: PUSH
7699: LD_INT 5
7701: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7702: LD_ADDR_EXP 36
7706: PUSH
7707: LD_INT 7
7709: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7710: LD_INT 51
7712: PPUSH
7713: LD_INT 6
7715: PPUSH
7716: LD_INT 2
7718: PPUSH
7719: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7723: LD_INT 57
7725: PPUSH
7726: LD_INT 6
7728: PPUSH
7729: LD_INT 2
7731: PPUSH
7732: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7736: LD_INT 63
7738: PPUSH
7739: LD_INT 6
7741: PPUSH
7742: LD_INT 2
7744: PPUSH
7745: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7749: LD_INT 51
7751: PPUSH
7752: LD_INT 5
7754: PPUSH
7755: LD_INT 2
7757: PPUSH
7758: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7762: LD_INT 5
7764: PPUSH
7765: LD_INT 2
7767: PPUSH
7768: LD_INT 2
7770: PPUSH
7771: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7775: LD_INT 5
7777: PPUSH
7778: LD_INT 5
7780: PPUSH
7781: LD_INT 2
7783: PPUSH
7784: CALL_OW 322
// end ; if difficulty = 3 then
7788: LD_OWVAR 67
7792: PUSH
7793: LD_INT 3
7795: EQUAL
7796: IFFALSE 7944
// begin RuSolMinLevel = 6 ;
7798: LD_ADDR_EXP 35
7802: PUSH
7803: LD_INT 6
7805: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7806: LD_ADDR_EXP 36
7810: PUSH
7811: LD_INT 8
7813: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7814: LD_INT 51
7816: PPUSH
7817: LD_INT 6
7819: PPUSH
7820: LD_INT 2
7822: PPUSH
7823: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7827: LD_INT 57
7829: PPUSH
7830: LD_INT 6
7832: PPUSH
7833: LD_INT 2
7835: PPUSH
7836: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7840: LD_INT 52
7842: PPUSH
7843: LD_INT 6
7845: PPUSH
7846: LD_INT 2
7848: PPUSH
7849: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7853: LD_INT 58
7855: PPUSH
7856: LD_INT 6
7858: PPUSH
7859: LD_INT 2
7861: PPUSH
7862: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7866: LD_INT 63
7868: PPUSH
7869: LD_INT 6
7871: PPUSH
7872: LD_INT 2
7874: PPUSH
7875: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7879: LD_INT 64
7881: PPUSH
7882: LD_INT 6
7884: PPUSH
7885: LD_INT 2
7887: PPUSH
7888: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7892: LD_INT 51
7894: PPUSH
7895: LD_INT 5
7897: PPUSH
7898: LD_INT 2
7900: PPUSH
7901: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7905: LD_INT 52
7907: PPUSH
7908: LD_INT 5
7910: PPUSH
7911: LD_INT 2
7913: PPUSH
7914: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7918: LD_INT 66
7920: PPUSH
7921: LD_INT 2
7923: PPUSH
7924: LD_INT 2
7926: PPUSH
7927: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7931: LD_INT 66
7933: PPUSH
7934: LD_INT 5
7936: PPUSH
7937: LD_INT 2
7939: PPUSH
7940: CALL_OW 322
// end ; end ;
7944: LD_VAR 0 1
7948: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
7949: LD_INT 0
7951: PPUSH
7952: PPUSH
7953: PPUSH
7954: PPUSH
// ruPossition = position ;
7955: LD_ADDR_EXP 40
7959: PUSH
7960: LD_VAR 0 1
7964: ST_TO_ADDR
// if position = 1 then
7965: LD_VAR 0 1
7969: PUSH
7970: LD_INT 1
7972: EQUAL
7973: IFFALSE 8721
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7975: LD_ADDR_VAR 0 4
7979: PUSH
7980: LD_INT 22
7982: PUSH
7983: LD_INT 3
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_INT 25
7992: PUSH
7993: LD_INT 2
7995: PUSH
7996: EMPTY
7997: LIST
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 69
8008: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
8009: LD_ADDR_VAR 0 5
8013: PUSH
8014: LD_INT 0
8016: PUSH
8017: LD_INT 49
8019: PUSH
8020: LD_INT 74
8022: PUSH
8023: LD_INT 3
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 4
8034: PUSH
8035: LD_INT 73
8037: PUSH
8038: LD_INT 88
8040: PUSH
8041: LD_INT 5
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 4
8052: PUSH
8053: LD_INT 56
8055: PUSH
8056: LD_INT 62
8058: PUSH
8059: LD_INT 3
8061: PUSH
8062: EMPTY
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: PUSH
8068: LD_INT 29
8070: PUSH
8071: LD_INT 43
8073: PUSH
8074: LD_INT 68
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: PUSH
8086: LD_INT 30
8088: PUSH
8089: LD_INT 43
8091: PUSH
8092: LD_INT 79
8094: PUSH
8095: LD_INT 5
8097: PUSH
8098: EMPTY
8099: LIST
8100: LIST
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 28
8106: PUSH
8107: LD_INT 60
8109: PUSH
8110: LD_INT 75
8112: PUSH
8113: LD_INT 1
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: PUSH
8122: LD_INT 2
8124: PUSH
8125: LD_INT 50
8127: PUSH
8128: LD_INT 87
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: PUSH
8140: LD_INT 28
8142: PUSH
8143: LD_INT 45
8145: PUSH
8146: LD_INT 67
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 17
8160: PUSH
8161: LD_INT 47
8163: PUSH
8164: LD_INT 84
8166: PUSH
8167: LD_INT 2
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: LIST
8174: LIST
8175: PUSH
8176: LD_INT 18
8178: PUSH
8179: LD_INT 46
8181: PUSH
8182: LD_INT 87
8184: PUSH
8185: LD_INT 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 28
8196: PUSH
8197: LD_INT 41
8199: PUSH
8200: LD_INT 64
8202: PUSH
8203: LD_INT 5
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: PUSH
8212: LD_INT 32
8214: PUSH
8215: LD_INT 75
8217: PUSH
8218: LD_INT 76
8220: PUSH
8221: LD_INT 5
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 32
8232: PUSH
8233: LD_INT 77
8235: PUSH
8236: LD_INT 75
8238: PUSH
8239: LD_INT 5
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: PUSH
8248: LD_INT 32
8250: PUSH
8251: LD_INT 69
8253: PUSH
8254: LD_INT 68
8256: PUSH
8257: LD_INT 3
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_INT 32
8268: PUSH
8269: LD_INT 59
8271: PUSH
8272: LD_INT 96
8274: PUSH
8275: LD_INT 5
8277: PUSH
8278: EMPTY
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: PUSH
8284: LD_INT 32
8286: PUSH
8287: LD_INT 56
8289: PUSH
8290: LD_INT 96
8292: PUSH
8293: LD_INT 0
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: PUSH
8302: LD_INT 32
8304: PUSH
8305: LD_INT 51
8307: PUSH
8308: LD_INT 61
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 32
8322: PUSH
8323: LD_INT 42
8325: PUSH
8326: LD_INT 60
8328: PUSH
8329: LD_INT 3
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: LIST
8336: LIST
8337: PUSH
8338: LD_INT 32
8340: PUSH
8341: LD_INT 36
8343: PUSH
8344: LD_INT 58
8346: PUSH
8347: LD_INT 3
8349: PUSH
8350: EMPTY
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: PUSH
8356: LD_INT 32
8358: PUSH
8359: LD_INT 39
8361: PUSH
8362: LD_INT 59
8364: PUSH
8365: LD_INT 3
8367: PUSH
8368: EMPTY
8369: LIST
8370: LIST
8371: LIST
8372: LIST
8373: PUSH
8374: LD_INT 32
8376: PUSH
8377: LD_INT 61
8379: PUSH
8380: LD_INT 64
8382: PUSH
8383: LD_INT 3
8385: PUSH
8386: EMPTY
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: PUSH
8392: LD_INT 33
8394: PUSH
8395: LD_INT 63
8397: PUSH
8398: LD_INT 90
8400: PUSH
8401: LD_INT 5
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 33
8412: PUSH
8413: LD_INT 64
8415: PUSH
8416: LD_INT 88
8418: PUSH
8419: LD_INT 5
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 33
8430: PUSH
8431: LD_INT 72
8433: PUSH
8434: LD_INT 82
8436: PUSH
8437: LD_INT 5
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 6
8448: PUSH
8449: LD_INT 42
8451: PUSH
8452: LD_INT 74
8454: PUSH
8455: LD_INT 1
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 6
8466: PUSH
8467: LD_INT 56
8469: PUSH
8470: LD_INT 77
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 21
8484: PUSH
8485: LD_INT 54
8487: PUSH
8488: LD_INT 91
8490: PUSH
8491: LD_INT 5
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 16
8502: PUSH
8503: LD_INT 50
8505: PUSH
8506: LD_INT 83
8508: PUSH
8509: LD_INT 3
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: LD_INT 24
8520: PUSH
8521: LD_INT 50
8523: PUSH
8524: LD_INT 90
8526: PUSH
8527: LD_INT 0
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: LIST
8562: LIST
8563: LIST
8564: LIST
8565: LIST
8566: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8567: LD_ADDR_VAR 0 3
8571: PUSH
8572: LD_INT 22
8574: PUSH
8575: LD_INT 3
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 3
8584: PUSH
8585: LD_INT 25
8587: PUSH
8588: LD_INT 2
8590: PUSH
8591: EMPTY
8592: LIST
8593: LIST
8594: PUSH
8595: EMPTY
8596: LIST
8597: LIST
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: PUSH
8608: FOR_IN
8609: IFFALSE 8628
// AddComMoveXY ( i , 53 , 82 ) ;
8611: LD_VAR 0 3
8615: PPUSH
8616: LD_INT 53
8618: PPUSH
8619: LD_INT 82
8621: PPUSH
8622: CALL_OW 171
8626: GO 8608
8628: POP
8629: POP
// for i := 1 to buildingsTab do
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: DOUBLE
8636: LD_INT 1
8638: DEC
8639: ST_TO_ADDR
8640: LD_VAR 0 5
8644: PUSH
8645: FOR_TO
8646: IFFALSE 8719
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8648: LD_VAR 0 4
8652: PPUSH
8653: LD_VAR 0 5
8657: PUSH
8658: LD_VAR 0 3
8662: ARRAY
8663: PUSH
8664: LD_INT 1
8666: ARRAY
8667: PPUSH
8668: LD_VAR 0 5
8672: PUSH
8673: LD_VAR 0 3
8677: ARRAY
8678: PUSH
8679: LD_INT 2
8681: ARRAY
8682: PPUSH
8683: LD_VAR 0 5
8687: PUSH
8688: LD_VAR 0 3
8692: ARRAY
8693: PUSH
8694: LD_INT 3
8696: ARRAY
8697: PPUSH
8698: LD_VAR 0 5
8702: PUSH
8703: LD_VAR 0 3
8707: ARRAY
8708: PUSH
8709: LD_INT 4
8711: ARRAY
8712: PPUSH
8713: CALL_OW 205
8717: GO 8645
8719: POP
8720: POP
// end ; if position = 2 then
8721: LD_VAR 0 1
8725: PUSH
8726: LD_INT 2
8728: EQUAL
8729: IFFALSE 9344
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8731: LD_ADDR_VAR 0 4
8735: PUSH
8736: LD_INT 22
8738: PUSH
8739: LD_INT 3
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: LD_INT 25
8748: PUSH
8749: LD_INT 2
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: PPUSH
8760: CALL_OW 69
8764: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: LD_INT 0
8772: PUSH
8773: LD_INT 104
8775: PUSH
8776: LD_INT 110
8778: PUSH
8779: LD_INT 5
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 4
8790: PUSH
8791: LD_INT 98
8793: PUSH
8794: LD_INT 90
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 29
8808: PUSH
8809: LD_INT 103
8811: PUSH
8812: LD_INT 114
8814: PUSH
8815: LD_INT 2
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: LD_INT 30
8826: PUSH
8827: LD_INT 99
8829: PUSH
8830: LD_INT 114
8832: PUSH
8833: LD_INT 3
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: PUSH
8842: LD_INT 28
8844: PUSH
8845: LD_INT 100
8847: PUSH
8848: LD_INT 112
8850: PUSH
8851: LD_INT 1
8853: PUSH
8854: EMPTY
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 2
8862: PUSH
8863: LD_INT 92
8865: PUSH
8866: LD_INT 101
8868: PUSH
8869: LD_INT 0
8871: PUSH
8872: EMPTY
8873: LIST
8874: LIST
8875: LIST
8876: LIST
8877: PUSH
8878: LD_INT 28
8880: PUSH
8881: LD_INT 97
8883: PUSH
8884: LD_INT 116
8886: PUSH
8887: LD_INT 5
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: PUSH
8896: LD_INT 17
8898: PUSH
8899: LD_INT 96
8901: PUSH
8902: LD_INT 101
8904: PUSH
8905: LD_INT 4
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: LD_INT 18
8916: PUSH
8917: LD_INT 88
8919: PUSH
8920: LD_INT 97
8922: PUSH
8923: LD_INT 2
8925: PUSH
8926: EMPTY
8927: LIST
8928: LIST
8929: LIST
8930: LIST
8931: PUSH
8932: LD_INT 28
8934: PUSH
8935: LD_INT 106
8937: PUSH
8938: LD_INT 92
8940: PUSH
8941: LD_INT 2
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: PUSH
8950: LD_INT 32
8952: PUSH
8953: LD_INT 88
8955: PUSH
8956: LD_INT 89
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: LD_INT 32
8970: PUSH
8971: LD_INT 86
8973: PUSH
8974: LD_INT 90
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: EMPTY
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 32
8988: PUSH
8989: LD_INT 85
8991: PUSH
8992: LD_INT 99
8994: PUSH
8995: LD_INT 2
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: LIST
9002: LIST
9003: PUSH
9004: LD_INT 32
9006: PUSH
9007: LD_INT 85
9009: PUSH
9010: LD_INT 107
9012: PUSH
9013: LD_INT 1
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: PUSH
9022: LD_INT 33
9024: PUSH
9025: LD_INT 105
9027: PUSH
9028: LD_INT 99
9030: PUSH
9031: LD_INT 1
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: PUSH
9040: LD_INT 33
9042: PUSH
9043: LD_INT 102
9045: PUSH
9046: LD_INT 92
9048: PUSH
9049: LD_INT 3
9051: PUSH
9052: EMPTY
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: LD_INT 33
9060: PUSH
9061: LD_INT 105
9063: PUSH
9064: LD_INT 92
9066: PUSH
9067: LD_INT 2
9069: PUSH
9070: EMPTY
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: LD_INT 6
9078: PUSH
9079: LD_INT 92
9081: PUSH
9082: LD_INT 110
9084: PUSH
9085: LD_INT 0
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 6
9096: PUSH
9097: LD_INT 103
9099: PUSH
9100: LD_INT 103
9102: PUSH
9103: LD_INT 5
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 21
9114: PUSH
9115: LD_INT 89
9117: PUSH
9118: LD_INT 101
9120: PUSH
9121: LD_INT 1
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: PUSH
9130: LD_INT 16
9132: PUSH
9133: LD_INT 95
9135: PUSH
9136: LD_INT 104
9138: PUSH
9139: LD_INT 4
9141: PUSH
9142: EMPTY
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: PUSH
9148: LD_INT 24
9150: PUSH
9151: LD_INT 92
9153: PUSH
9154: LD_INT 105
9156: PUSH
9157: LD_INT 0
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: PUSH
9166: EMPTY
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: LIST
9186: LIST
9187: LIST
9188: LIST
9189: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9190: LD_ADDR_VAR 0 3
9194: PUSH
9195: LD_INT 22
9197: PUSH
9198: LD_INT 3
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PUSH
9205: LD_INT 3
9207: PUSH
9208: LD_INT 25
9210: PUSH
9211: LD_INT 2
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL_OW 69
9230: PUSH
9231: FOR_IN
9232: IFFALSE 9251
// AddComMoveXY ( i , 96 , 99 ) ;
9234: LD_VAR 0 3
9238: PPUSH
9239: LD_INT 96
9241: PPUSH
9242: LD_INT 99
9244: PPUSH
9245: CALL_OW 171
9249: GO 9231
9251: POP
9252: POP
// for i := 1 to buildingsTab do
9253: LD_ADDR_VAR 0 3
9257: PUSH
9258: DOUBLE
9259: LD_INT 1
9261: DEC
9262: ST_TO_ADDR
9263: LD_VAR 0 5
9267: PUSH
9268: FOR_TO
9269: IFFALSE 9342
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9271: LD_VAR 0 4
9275: PPUSH
9276: LD_VAR 0 5
9280: PUSH
9281: LD_VAR 0 3
9285: ARRAY
9286: PUSH
9287: LD_INT 1
9289: ARRAY
9290: PPUSH
9291: LD_VAR 0 5
9295: PUSH
9296: LD_VAR 0 3
9300: ARRAY
9301: PUSH
9302: LD_INT 2
9304: ARRAY
9305: PPUSH
9306: LD_VAR 0 5
9310: PUSH
9311: LD_VAR 0 3
9315: ARRAY
9316: PUSH
9317: LD_INT 3
9319: ARRAY
9320: PPUSH
9321: LD_VAR 0 5
9325: PUSH
9326: LD_VAR 0 3
9330: ARRAY
9331: PUSH
9332: LD_INT 4
9334: ARRAY
9335: PPUSH
9336: CALL_OW 205
9340: GO 9268
9342: POP
9343: POP
// end ; if position = 3 then
9344: LD_VAR 0 1
9348: PUSH
9349: LD_INT 3
9351: EQUAL
9352: IFFALSE 10138
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9354: LD_ADDR_VAR 0 4
9358: PUSH
9359: LD_INT 22
9361: PUSH
9362: LD_INT 3
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PUSH
9369: LD_INT 25
9371: PUSH
9372: LD_INT 2
9374: PUSH
9375: EMPTY
9376: LIST
9377: LIST
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 69
9387: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9388: LD_ADDR_VAR 0 5
9392: PUSH
9393: LD_INT 0
9395: PUSH
9396: LD_INT 151
9398: PUSH
9399: LD_INT 71
9401: PUSH
9402: LD_INT 4
9404: PUSH
9405: EMPTY
9406: LIST
9407: LIST
9408: LIST
9409: LIST
9410: PUSH
9411: LD_INT 4
9413: PUSH
9414: LD_INT 145
9416: PUSH
9417: LD_INT 53
9419: PUSH
9420: LD_INT 3
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: LD_INT 4
9431: PUSH
9432: LD_INT 172
9434: PUSH
9435: LD_INT 102
9437: PUSH
9438: LD_INT 5
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PUSH
9447: LD_INT 29
9449: PUSH
9450: LD_INT 152
9452: PUSH
9453: LD_INT 85
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: PUSH
9465: LD_INT 30
9467: PUSH
9468: LD_INT 156
9470: PUSH
9471: LD_INT 92
9473: PUSH
9474: LD_INT 3
9476: PUSH
9477: EMPTY
9478: LIST
9479: LIST
9480: LIST
9481: LIST
9482: PUSH
9483: LD_INT 28
9485: PUSH
9486: LD_INT 151
9488: PUSH
9489: LD_INT 66
9491: PUSH
9492: LD_INT 4
9494: PUSH
9495: EMPTY
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 2
9503: PUSH
9504: LD_INT 163
9506: PUSH
9507: LD_INT 95
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: PUSH
9519: LD_INT 28
9521: PUSH
9522: LD_INT 149
9524: PUSH
9525: LD_INT 63
9527: PUSH
9528: LD_INT 4
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: LIST
9535: LIST
9536: PUSH
9537: LD_INT 17
9539: PUSH
9540: LD_INT 167
9542: PUSH
9543: LD_INT 99
9545: PUSH
9546: LD_INT 5
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: PUSH
9555: LD_INT 18
9557: PUSH
9558: LD_INT 163
9560: PUSH
9561: LD_INT 98
9563: PUSH
9564: LD_INT 0
9566: PUSH
9567: EMPTY
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: PUSH
9573: LD_INT 28
9575: PUSH
9576: LD_INT 154
9578: PUSH
9579: LD_INT 70
9581: PUSH
9582: LD_INT 4
9584: PUSH
9585: EMPTY
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 32
9593: PUSH
9594: LD_INT 155
9596: PUSH
9597: LD_INT 62
9599: PUSH
9600: LD_INT 4
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 32
9611: PUSH
9612: LD_INT 161
9614: PUSH
9615: LD_INT 69
9617: PUSH
9618: LD_INT 4
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 32
9629: PUSH
9630: LD_INT 168
9632: PUSH
9633: LD_INT 78
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: PUSH
9645: LD_INT 32
9647: PUSH
9648: LD_INT 163
9650: PUSH
9651: LD_INT 80
9653: PUSH
9654: LD_INT 5
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 32
9665: PUSH
9666: LD_INT 136
9668: PUSH
9669: LD_INT 73
9671: PUSH
9672: LD_INT 0
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: PUSH
9681: LD_INT 32
9683: PUSH
9684: LD_INT 157
9686: PUSH
9687: LD_INT 98
9689: PUSH
9690: LD_INT 0
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_INT 32
9701: PUSH
9702: LD_INT 150
9704: PUSH
9705: LD_INT 87
9707: PUSH
9708: LD_INT 1
9710: PUSH
9711: EMPTY
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: PUSH
9717: LD_INT 33
9719: PUSH
9720: LD_INT 171
9722: PUSH
9723: LD_INT 97
9725: PUSH
9726: LD_INT 4
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 33
9737: PUSH
9738: LD_INT 168
9740: PUSH
9741: LD_INT 92
9743: PUSH
9744: LD_INT 4
9746: PUSH
9747: EMPTY
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 33
9755: PUSH
9756: LD_INT 166
9758: PUSH
9759: LD_INT 80
9761: PUSH
9762: LD_INT 5
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: PUSH
9771: LD_INT 33
9773: PUSH
9774: LD_INT 141
9776: PUSH
9777: LD_INT 54
9779: PUSH
9780: LD_INT 2
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 33
9791: PUSH
9792: LD_INT 133
9794: PUSH
9795: LD_INT 57
9797: PUSH
9798: LD_INT 2
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: PUSH
9807: LD_INT 33
9809: PUSH
9810: LD_INT 132
9812: PUSH
9813: LD_INT 61
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: PUSH
9825: LD_INT 33
9827: PUSH
9828: LD_INT 150
9830: PUSH
9831: LD_INT 82
9833: PUSH
9834: LD_INT 0
9836: PUSH
9837: EMPTY
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: PUSH
9843: LD_INT 33
9845: PUSH
9846: LD_INT 132
9848: PUSH
9849: LD_INT 72
9851: PUSH
9852: LD_INT 0
9854: PUSH
9855: EMPTY
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 6
9863: PUSH
9864: LD_INT 146
9866: PUSH
9867: LD_INT 64
9869: PUSH
9870: LD_INT 4
9872: PUSH
9873: EMPTY
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: PUSH
9879: LD_INT 6
9881: PUSH
9882: LD_INT 159
9884: PUSH
9885: LD_INT 85
9887: PUSH
9888: LD_INT 4
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: PUSH
9897: LD_INT 21
9899: PUSH
9900: LD_INT 163
9902: PUSH
9903: LD_INT 91
9905: PUSH
9906: LD_INT 3
9908: PUSH
9909: EMPTY
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: PUSH
9915: LD_INT 16
9917: PUSH
9918: LD_INT 166
9920: PUSH
9921: LD_INT 95
9923: PUSH
9924: LD_INT 4
9926: PUSH
9927: EMPTY
9928: LIST
9929: LIST
9930: LIST
9931: LIST
9932: PUSH
9933: LD_INT 24
9935: PUSH
9936: LD_INT 159
9938: PUSH
9939: LD_INT 95
9941: PUSH
9942: LD_INT 1
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9984: LD_ADDR_VAR 0 3
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PUSH
9999: LD_INT 3
10001: PUSH
10002: LD_INT 25
10004: PUSH
10005: LD_INT 2
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: PPUSH
10020: CALL_OW 69
10024: PUSH
10025: FOR_IN
10026: IFFALSE 10045
// AddComMoveXY ( i , 141 , 65 ) ;
10028: LD_VAR 0 3
10032: PPUSH
10033: LD_INT 141
10035: PPUSH
10036: LD_INT 65
10038: PPUSH
10039: CALL_OW 171
10043: GO 10025
10045: POP
10046: POP
// for i := 1 to buildingsTab do
10047: LD_ADDR_VAR 0 3
10051: PUSH
10052: DOUBLE
10053: LD_INT 1
10055: DEC
10056: ST_TO_ADDR
10057: LD_VAR 0 5
10061: PUSH
10062: FOR_TO
10063: IFFALSE 10136
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10065: LD_VAR 0 4
10069: PPUSH
10070: LD_VAR 0 5
10074: PUSH
10075: LD_VAR 0 3
10079: ARRAY
10080: PUSH
10081: LD_INT 1
10083: ARRAY
10084: PPUSH
10085: LD_VAR 0 5
10089: PUSH
10090: LD_VAR 0 3
10094: ARRAY
10095: PUSH
10096: LD_INT 2
10098: ARRAY
10099: PPUSH
10100: LD_VAR 0 5
10104: PUSH
10105: LD_VAR 0 3
10109: ARRAY
10110: PUSH
10111: LD_INT 3
10113: ARRAY
10114: PPUSH
10115: LD_VAR 0 5
10119: PUSH
10120: LD_VAR 0 3
10124: ARRAY
10125: PUSH
10126: LD_INT 4
10128: ARRAY
10129: PPUSH
10130: CALL_OW 205
10134: GO 10062
10136: POP
10137: POP
// end ; end ;
10138: LD_VAR 0 2
10142: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
10143: LD_INT 0
10145: PPUSH
10146: PPUSH
10147: PPUSH
10148: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
10149: LD_ADDR_VAR 0 3
10153: PUSH
10154: LD_INT 22
10156: PUSH
10157: LD_INT 2
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 25
10166: PUSH
10167: LD_INT 2
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: PPUSH
10178: CALL_OW 69
10182: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
10183: LD_VAR 0 3
10187: PPUSH
10188: LD_INT 0
10190: PPUSH
10191: LD_INT 71
10193: PPUSH
10194: LD_INT 15
10196: PPUSH
10197: LD_INT 3
10199: PPUSH
10200: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
10204: LD_ADDR_VAR 0 4
10208: PUSH
10209: LD_INT 6
10211: PUSH
10212: LD_INT 77
10214: PUSH
10215: LD_INT 18
10217: PUSH
10218: LD_INT 3
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: PUSH
10227: LD_INT 4
10229: PUSH
10230: LD_INT 77
10232: PUSH
10233: LD_INT 26
10235: PUSH
10236: LD_INT 0
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: PUSH
10245: LD_INT 31
10247: PUSH
10248: LD_INT 82
10250: PUSH
10251: LD_INT 28
10253: PUSH
10254: LD_INT 0
10256: PUSH
10257: EMPTY
10258: LIST
10259: LIST
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 31
10265: PUSH
10266: LD_INT 84
10268: PUSH
10269: LD_INT 21
10271: PUSH
10272: LD_INT 3
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 31
10283: PUSH
10284: LD_INT 66
10286: PUSH
10287: LD_INT 14
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 27
10301: PUSH
10302: LD_INT 67
10304: PUSH
10305: LD_INT 18
10307: PUSH
10308: LD_INT 5
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: PUSH
10317: LD_INT 27
10319: PUSH
10320: LD_INT 69
10322: PUSH
10323: LD_INT 23
10325: PUSH
10326: LD_INT 2
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: LIST
10333: LIST
10334: PUSH
10335: EMPTY
10336: LIST
10337: LIST
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: ST_TO_ADDR
// for i := 1 to buildingsTab do
10344: LD_ADDR_VAR 0 2
10348: PUSH
10349: DOUBLE
10350: LD_INT 1
10352: DEC
10353: ST_TO_ADDR
10354: LD_VAR 0 4
10358: PUSH
10359: FOR_TO
10360: IFFALSE 10433
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10362: LD_VAR 0 3
10366: PPUSH
10367: LD_VAR 0 4
10371: PUSH
10372: LD_VAR 0 2
10376: ARRAY
10377: PUSH
10378: LD_INT 1
10380: ARRAY
10381: PPUSH
10382: LD_VAR 0 4
10386: PUSH
10387: LD_VAR 0 2
10391: ARRAY
10392: PUSH
10393: LD_INT 2
10395: ARRAY
10396: PPUSH
10397: LD_VAR 0 4
10401: PUSH
10402: LD_VAR 0 2
10406: ARRAY
10407: PUSH
10408: LD_INT 3
10410: ARRAY
10411: PPUSH
10412: LD_VAR 0 4
10416: PUSH
10417: LD_VAR 0 2
10421: ARRAY
10422: PUSH
10423: LD_INT 4
10425: ARRAY
10426: PPUSH
10427: CALL_OW 205
10431: GO 10359
10433: POP
10434: POP
// end ;
10435: LD_VAR 0 1
10439: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10440: LD_INT 0
10442: PPUSH
10443: PPUSH
10444: PPUSH
10445: PPUSH
10446: PPUSH
10447: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10448: LD_ADDR_VAR 0 7
10452: PUSH
10453: LD_INT 22
10455: PUSH
10456: LD_VAR 0 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: LD_INT 25
10467: PUSH
10468: LD_INT 9
10470: PUSH
10471: EMPTY
10472: LIST
10473: LIST
10474: PUSH
10475: EMPTY
10476: LIST
10477: LIST
10478: PPUSH
10479: CALL_OW 69
10483: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10484: LD_ADDR_VAR 0 8
10488: PUSH
10489: LD_INT 22
10491: PUSH
10492: LD_VAR 0 2
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 3
10503: PUSH
10504: LD_INT 21
10506: PUSH
10507: LD_INT 3
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: PPUSH
10522: CALL_OW 69
10526: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10527: LD_ADDR_VAR 0 5
10531: PUSH
10532: LD_INT 1
10534: PPUSH
10535: LD_INT 3
10537: PPUSH
10538: CALL_OW 12
10542: ST_TO_ADDR
// for i = 1 to list do
10543: LD_ADDR_VAR 0 6
10547: PUSH
10548: DOUBLE
10549: LD_INT 1
10551: DEC
10552: ST_TO_ADDR
10553: LD_VAR 0 7
10557: PUSH
10558: FOR_TO
10559: IFFALSE 11529
// for ta in filter do
10561: LD_ADDR_VAR 0 4
10565: PUSH
10566: LD_VAR 0 8
10570: PUSH
10571: FOR_IN
10572: IFFALSE 11525
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
10574: LD_VAR 0 7
10578: PUSH
10579: LD_VAR 0 6
10583: ARRAY
10584: PPUSH
10585: LD_VAR 0 4
10589: PPUSH
10590: CALL_OW 296
10594: PUSH
10595: LD_INT 12
10597: LESSEQUAL
10598: IFFALSE 11523
// begin case c of 1 :
10600: LD_VAR 0 5
10604: PUSH
10605: LD_INT 1
10607: DOUBLE
10608: EQUAL
10609: IFTRUE 10613
10611: GO 11045
10613: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
10614: LD_VAR 0 7
10618: PUSH
10619: LD_VAR 0 6
10623: ARRAY
10624: PPUSH
10625: LD_VAR 0 4
10629: PPUSH
10630: CALL_OW 250
10634: PPUSH
10635: LD_VAR 0 4
10639: PPUSH
10640: CALL_OW 251
10644: PPUSH
10645: CALL_OW 154
// if eventVar2 = 0 then
10649: LD_EXP 55
10653: PUSH
10654: LD_INT 0
10656: EQUAL
10657: IFFALSE 11043
// begin eventVar2 = 1 ;
10659: LD_ADDR_EXP 55
10663: PUSH
10664: LD_INT 1
10666: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10667: LD_INT 245
10669: PPUSH
10670: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
10674: LD_VAR 0 4
10678: PPUSH
10679: CALL_OW 250
10683: PPUSH
10684: LD_VAR 0 4
10688: PPUSH
10689: CALL_OW 251
10693: PPUSH
10694: CALL_OW 84
// DialogueOn ;
10698: CALL_OW 6
// if IsOK ( Cyrus ) then
10702: LD_EXP 5
10706: PPUSH
10707: CALL_OW 302
10711: IFFALSE 10727
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
10713: LD_EXP 5
10717: PPUSH
10718: LD_STRING D9a-Cyrus-1
10720: PPUSH
10721: CALL_OW 88
// end else
10725: GO 10849
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
10727: LD_INT 22
10729: PUSH
10730: LD_INT 1
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 26
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 2
10749: PUSH
10750: LD_INT 25
10752: PUSH
10753: LD_INT 1
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 3
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 4
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 5
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: LIST
10812: PPUSH
10813: CALL_OW 69
10817: PUSH
10818: LD_EXP 1
10822: PUSH
10823: LD_EXP 14
10827: PUSH
10828: LD_EXP 5
10832: PUSH
10833: EMPTY
10834: LIST
10835: LIST
10836: LIST
10837: DIFF
10838: PPUSH
10839: LD_STRING D9a-Sol1-1
10841: PPUSH
10842: LD_STRING D9a-Sol1-1
10844: PPUSH
10845: CALL 7422 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
10849: LD_INT 22
10851: PUSH
10852: LD_INT 1
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 26
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: LD_INT 2
10871: PUSH
10872: LD_INT 25
10874: PUSH
10875: LD_INT 1
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: PUSH
10882: LD_INT 25
10884: PUSH
10885: LD_INT 2
10887: PUSH
10888: EMPTY
10889: LIST
10890: LIST
10891: PUSH
10892: LD_INT 25
10894: PUSH
10895: LD_INT 3
10897: PUSH
10898: EMPTY
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 25
10904: PUSH
10905: LD_INT 4
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 5
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 69
10939: PUSH
10940: LD_EXP 1
10944: PUSH
10945: LD_EXP 14
10949: PUSH
10950: LD_EXP 5
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: DIFF
10960: PPUSH
10961: LD_STRING D9b-Sol1-1
10963: PPUSH
10964: LD_STRING D9b-Sol1-1
10966: PPUSH
10967: CALL 7422 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
10971: LD_STRING 09_arInfo
10973: PPUSH
10974: LD_INT 0
10976: PPUSH
10977: CALL_OW 30
10981: PUSH
10982: LD_INT 1
10984: EQUAL
10985: IFFALSE 10999
// Say ( JMM , D9a-JMM-1 ) ;
10987: LD_EXP 1
10991: PPUSH
10992: LD_STRING D9a-JMM-1
10994: PPUSH
10995: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
10999: LD_EXP 1
11003: PPUSH
11004: LD_STRING D9c-JMM-1
11006: PPUSH
11007: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11011: LD_INT 12
11013: PPUSH
11014: LD_INT 1
11016: PPUSH
11017: CALL_OW 321
11021: PUSH
11022: LD_INT 2
11024: EQUAL
11025: IFFALSE 11039
// Say ( JMM , D9c-JMM-1a ) ;
11027: LD_EXP 1
11031: PPUSH
11032: LD_STRING D9c-JMM-1a
11034: PPUSH
11035: CALL_OW 88
// DialogueOff ;
11039: CALL_OW 7
// end ; end ; 2 :
11043: GO 11523
11045: LD_INT 2
11047: DOUBLE
11048: EQUAL
11049: IFTRUE 11053
11051: GO 11511
11053: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
11054: LD_VAR 0 7
11058: PUSH
11059: LD_VAR 0 6
11063: ARRAY
11064: PPUSH
11065: LD_VAR 0 4
11069: PPUSH
11070: CALL_OW 250
11074: PUSH
11075: LD_INT 1
11077: NEG
11078: PPUSH
11079: LD_INT 1
11081: PPUSH
11082: CALL_OW 12
11086: PLUS
11087: PPUSH
11088: LD_VAR 0 4
11092: PPUSH
11093: CALL_OW 251
11097: PUSH
11098: LD_INT 1
11100: NEG
11101: PPUSH
11102: LD_INT 1
11104: PPUSH
11105: CALL_OW 12
11109: PLUS
11110: PPUSH
11111: CALL_OW 153
// if eventVar2 = 0 then
11115: LD_EXP 55
11119: PUSH
11120: LD_INT 0
11122: EQUAL
11123: IFFALSE 11509
// begin eventVar2 = 1 ;
11125: LD_ADDR_EXP 55
11129: PUSH
11130: LD_INT 1
11132: ST_TO_ADDR
// wait ( 0 0$7 ) ;
11133: LD_INT 245
11135: PPUSH
11136: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
11140: LD_VAR 0 4
11144: PPUSH
11145: CALL_OW 250
11149: PPUSH
11150: LD_VAR 0 4
11154: PPUSH
11155: CALL_OW 251
11159: PPUSH
11160: CALL_OW 84
// DialogueOn ;
11164: CALL_OW 6
// if IsOK ( Cyrus ) then
11168: LD_EXP 5
11172: PPUSH
11173: CALL_OW 302
11177: IFFALSE 11193
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
11179: LD_EXP 5
11183: PPUSH
11184: LD_STRING D9a-Cyrus-1
11186: PPUSH
11187: CALL_OW 88
// end else
11191: GO 11315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
11193: LD_INT 22
11195: PUSH
11196: LD_INT 1
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 26
11205: PUSH
11206: LD_INT 1
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 2
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 1
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 2
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 3
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 4
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: LD_INT 25
11258: PUSH
11259: LD_INT 5
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: PUSH
11284: LD_EXP 1
11288: PUSH
11289: LD_EXP 14
11293: PUSH
11294: LD_EXP 5
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: DIFF
11304: PPUSH
11305: LD_STRING D9a-Sol1-1
11307: PPUSH
11308: LD_STRING D9a-Sol1-1
11310: PPUSH
11311: CALL 7422 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11315: LD_INT 22
11317: PUSH
11318: LD_INT 1
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PUSH
11325: LD_INT 26
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 2
11337: PUSH
11338: LD_INT 25
11340: PUSH
11341: LD_INT 1
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 25
11350: PUSH
11351: LD_INT 2
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: PUSH
11358: LD_INT 25
11360: PUSH
11361: LD_INT 3
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: PUSH
11368: LD_INT 25
11370: PUSH
11371: LD_INT 4
11373: PUSH
11374: EMPTY
11375: LIST
11376: LIST
11377: PUSH
11378: LD_INT 25
11380: PUSH
11381: LD_INT 5
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: PPUSH
11401: CALL_OW 69
11405: PUSH
11406: LD_EXP 1
11410: PUSH
11411: LD_EXP 14
11415: PUSH
11416: LD_EXP 5
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: LIST
11425: DIFF
11426: PPUSH
11427: LD_STRING D9b-Sol1-1
11429: PPUSH
11430: LD_STRING D9b-Sol1-1
11432: PPUSH
11433: CALL 7422 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11437: LD_STRING 09_arInfo
11439: PPUSH
11440: LD_INT 0
11442: PPUSH
11443: CALL_OW 30
11447: PUSH
11448: LD_INT 1
11450: EQUAL
11451: IFFALSE 11465
// Say ( JMM , D9a-JMM-1 ) ;
11453: LD_EXP 1
11457: PPUSH
11458: LD_STRING D9a-JMM-1
11460: PPUSH
11461: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11465: LD_EXP 1
11469: PPUSH
11470: LD_STRING D9c-JMM-1
11472: PPUSH
11473: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11477: LD_INT 12
11479: PPUSH
11480: LD_INT 1
11482: PPUSH
11483: CALL_OW 321
11487: PUSH
11488: LD_INT 2
11490: EQUAL
11491: IFFALSE 11505
// Say ( JMM , D9c-JMM-1a ) ;
11493: LD_EXP 1
11497: PPUSH
11498: LD_STRING D9c-JMM-1a
11500: PPUSH
11501: CALL_OW 88
// DialogueOff ;
11505: CALL_OW 7
// end ; end ; 3 :
11509: GO 11523
11511: LD_INT 3
11513: DOUBLE
11514: EQUAL
11515: IFTRUE 11519
11517: GO 11522
11519: POP
// ; end ;
11520: GO 11523
11522: POP
// end ; end ;
11523: GO 10571
11525: POP
11526: POP
11527: GO 10558
11529: POP
11530: POP
// end ;
11531: LD_VAR 0 3
11535: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11536: LD_INT 0
11538: PPUSH
11539: PPUSH
11540: PPUSH
11541: PPUSH
// for i = 1 to 72 do
11542: LD_ADDR_VAR 0 5
11546: PUSH
11547: DOUBLE
11548: LD_INT 1
11550: DEC
11551: ST_TO_ADDR
11552: LD_INT 72
11554: PUSH
11555: FOR_TO
11556: IFFALSE 11614
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11558: LD_VAR 0 5
11562: PPUSH
11563: LD_VAR 0 1
11567: PPUSH
11568: CALL_OW 321
11572: PUSH
11573: LD_INT 1
11575: EQUAL
11576: PUSH
11577: LD_VAR 0 5
11581: PPUSH
11582: LD_VAR 0 3
11586: PPUSH
11587: CALL_OW 482
11591: PUSH
11592: LD_INT 1
11594: EQUAL
11595: AND
11596: IFFALSE 11612
// AddComResearch ( lab , i ) ;
11598: LD_VAR 0 2
11602: PPUSH
11603: LD_VAR 0 5
11607: PPUSH
11608: CALL_OW 184
11612: GO 11555
11614: POP
11615: POP
// end ;
11616: LD_VAR 0 4
11620: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
11621: LD_INT 0
11623: PPUSH
11624: PPUSH
11625: PPUSH
11626: PPUSH
11627: PPUSH
11628: PPUSH
11629: PPUSH
11630: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11631: LD_ADDR_VAR 0 6
11635: PUSH
11636: LD_INT 22
11638: PUSH
11639: LD_VAR 0 1
11643: PUSH
11644: EMPTY
11645: LIST
11646: LIST
11647: PUSH
11648: LD_INT 56
11650: PUSH
11651: EMPTY
11652: LIST
11653: PUSH
11654: LD_INT 24
11656: PUSH
11657: LD_INT 700
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 2
11666: PUSH
11667: LD_INT 25
11669: PUSH
11670: LD_INT 1
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 25
11679: PUSH
11680: LD_INT 9
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: LIST
11691: PUSH
11692: EMPTY
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: PPUSH
11698: CALL_OW 69
11702: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11703: LD_ADDR_VAR 0 7
11707: PUSH
11708: LD_INT 22
11710: PUSH
11711: LD_VAR 0 1
11715: PUSH
11716: EMPTY
11717: LIST
11718: LIST
11719: PUSH
11720: LD_INT 30
11722: PUSH
11723: LD_INT 32
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 58
11732: PUSH
11733: EMPTY
11734: LIST
11735: PUSH
11736: LD_INT 24
11738: PUSH
11739: LD_INT 251
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PUSH
11746: EMPTY
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: PPUSH
11752: CALL_OW 69
11756: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11757: LD_ADDR_VAR 0 9
11761: PUSH
11762: LD_INT 22
11764: PUSH
11765: LD_VAR 0 1
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PUSH
11774: LD_INT 2
11776: PUSH
11777: LD_INT 30
11779: PUSH
11780: LD_INT 4
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: PUSH
11787: LD_INT 30
11789: PUSH
11790: LD_INT 5
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 24
11804: PUSH
11805: LD_INT 251
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: EMPTY
11813: LIST
11814: LIST
11815: LIST
11816: PPUSH
11817: CALL_OW 69
11821: ST_TO_ADDR
// if barrackList > 0 then
11822: LD_VAR 0 9
11826: PUSH
11827: LD_INT 0
11829: GREATER
11830: IFFALSE 11965
// begin if turretList = 0 then
11832: LD_VAR 0 7
11836: PUSH
11837: LD_INT 0
11839: EQUAL
11840: IFFALSE 11889
// begin for i in soldiers_list do
11842: LD_ADDR_VAR 0 4
11846: PUSH
11847: LD_VAR 0 6
11851: PUSH
11852: FOR_IN
11853: IFFALSE 11885
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
11855: LD_VAR 0 4
11859: PPUSH
11860: LD_VAR 0 9
11864: PUSH
11865: LD_INT 1
11867: PPUSH
11868: LD_VAR 0 9
11872: PPUSH
11873: CALL_OW 12
11877: ARRAY
11878: PPUSH
11879: CALL_OW 120
11883: GO 11852
11885: POP
11886: POP
// end else
11887: GO 11965
// begin for i in barrackList do
11889: LD_ADDR_VAR 0 4
11893: PUSH
11894: LD_VAR 0 9
11898: PUSH
11899: FOR_IN
11900: IFFALSE 11963
// begin insideUnits = UnitsInside ( i ) ;
11902: LD_ADDR_VAR 0 10
11906: PUSH
11907: LD_VAR 0 4
11911: PPUSH
11912: CALL_OW 313
11916: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
11917: LD_VAR 0 10
11921: PUSH
11922: LD_INT 1
11924: ARRAY
11925: PPUSH
11926: LD_VAR 0 7
11930: PUSH
11931: LD_INT 1
11933: ARRAY
11934: PPUSH
11935: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
11939: LD_VAR 0 6
11943: PUSH
11944: LD_INT 1
11946: ARRAY
11947: PPUSH
11948: LD_VAR 0 7
11952: PUSH
11953: LD_INT 1
11955: ARRAY
11956: PPUSH
11957: CALL_OW 120
// end ;
11961: GO 11899
11963: POP
11964: POP
// end ; end ; end ;
11965: LD_VAR 0 3
11969: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11970: LD_INT 0
11972: PPUSH
11973: PPUSH
11974: PPUSH
11975: PPUSH
11976: PPUSH
11977: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11978: LD_ADDR_VAR 0 6
11982: PUSH
11983: LD_VAR 0 2
11987: PPUSH
11988: CALL_OW 313
11992: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
11993: LD_ADDR_VAR 0 7
11997: PUSH
11998: LD_INT 22
12000: PUSH
12001: LD_VAR 0 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 25
12012: PUSH
12013: LD_INT 2
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 24
12022: PUSH
12023: LD_INT 1000
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: PPUSH
12035: CALL_OW 69
12039: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
12040: LD_ADDR_VAR 0 4
12044: PUSH
12045: LD_INT 22
12047: PUSH
12048: LD_VAR 0 1
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 21
12059: PUSH
12060: LD_INT 3
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 3
12069: PUSH
12070: LD_INT 24
12072: PUSH
12073: LD_INT 1000
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: EMPTY
12090: LIST
12091: PPUSH
12092: CALL_OW 69
12096: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
12097: LD_VAR 0 4
12101: NOT
12102: PUSH
12103: LD_VAR 0 7
12107: NOT
12108: AND
12109: IFFALSE 12113
// exit ;
12111: GO 12272
// if buildings_list > 0 and engineerOkInside > 0 then
12113: LD_VAR 0 4
12117: PUSH
12118: LD_INT 0
12120: GREATER
12121: PUSH
12122: LD_VAR 0 6
12126: PUSH
12127: LD_INT 0
12129: GREATER
12130: AND
12131: IFFALSE 12159
// for i in engineerOkInside do
12133: LD_ADDR_VAR 0 5
12137: PUSH
12138: LD_VAR 0 6
12142: PUSH
12143: FOR_IN
12144: IFFALSE 12157
// ComExitBuilding ( i ) ;
12146: LD_VAR 0 5
12150: PPUSH
12151: CALL_OW 122
12155: GO 12143
12157: POP
12158: POP
// if engineerOkOutside > 0 then
12159: LD_VAR 0 7
12163: PUSH
12164: LD_INT 0
12166: GREATER
12167: IFFALSE 12221
// begin for i in engineerOkOutside do
12169: LD_ADDR_VAR 0 5
12173: PUSH
12174: LD_VAR 0 7
12178: PUSH
12179: FOR_IN
12180: IFFALSE 12219
// for j in buildings_list do
12182: LD_ADDR_VAR 0 8
12186: PUSH
12187: LD_VAR 0 4
12191: PUSH
12192: FOR_IN
12193: IFFALSE 12215
// ComRepairBuilding ( i , j [ 1 ] ) ;
12195: LD_VAR 0 5
12199: PPUSH
12200: LD_VAR 0 8
12204: PUSH
12205: LD_INT 1
12207: ARRAY
12208: PPUSH
12209: CALL_OW 130
12213: GO 12192
12215: POP
12216: POP
12217: GO 12179
12219: POP
12220: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
12221: LD_VAR 0 4
12225: PUSH
12226: LD_INT 0
12228: EQUAL
12229: PUSH
12230: LD_VAR 0 7
12234: PUSH
12235: LD_INT 0
12237: GREATER
12238: AND
12239: IFFALSE 12272
// for i in engineerOkOutside do
12241: LD_ADDR_VAR 0 5
12245: PUSH
12246: LD_VAR 0 7
12250: PUSH
12251: FOR_IN
12252: IFFALSE 12270
// ComEnterUnit ( i , building ) ;
12254: LD_VAR 0 5
12258: PPUSH
12259: LD_VAR 0 2
12263: PPUSH
12264: CALL_OW 120
12268: GO 12251
12270: POP
12271: POP
// end ;
12272: LD_VAR 0 3
12276: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
12277: LD_INT 0
12279: PPUSH
12280: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
12281: LD_INT 22
12283: PUSH
12284: LD_VAR 0 1
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 25
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PPUSH
12307: CALL_OW 69
12311: PUSH
12312: LD_INT 0
12314: GREATER
12315: PUSH
12316: LD_INT 22
12318: PUSH
12319: LD_VAR 0 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: PUSH
12328: LD_INT 21
12330: PUSH
12331: LD_INT 3
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 3
12340: PUSH
12341: LD_INT 24
12343: PUSH
12344: LD_INT 1000
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: PPUSH
12360: CALL_OW 69
12364: PUSH
12365: LD_INT 0
12367: EQUAL
12368: AND
12369: PUSH
12370: LD_VAR 0 2
12374: PUSH
12375: LD_INT 0
12377: GREATER
12378: AND
12379: IFFALSE 12478
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
12381: LD_ADDR_VAR 0 4
12385: PUSH
12386: LD_INT 22
12388: PUSH
12389: LD_VAR 0 1
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PUSH
12398: LD_INT 25
12400: PUSH
12401: LD_INT 2
12403: PUSH
12404: EMPTY
12405: LIST
12406: LIST
12407: PUSH
12408: EMPTY
12409: LIST
12410: LIST
12411: PPUSH
12412: CALL_OW 69
12416: PUSH
12417: FOR_IN
12418: IFFALSE 12476
// begin AddComExitBuilding ( i ) ;
12420: LD_VAR 0 4
12424: PPUSH
12425: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12429: LD_VAR 0 4
12433: PPUSH
12434: LD_VAR 0 2
12438: PUSH
12439: LD_INT 1
12441: ARRAY
12442: PPUSH
12443: LD_VAR 0 2
12447: PUSH
12448: LD_INT 2
12450: ARRAY
12451: PPUSH
12452: LD_VAR 0 2
12456: PUSH
12457: LD_INT 3
12459: ARRAY
12460: PPUSH
12461: LD_VAR 0 2
12465: PUSH
12466: LD_INT 4
12468: ARRAY
12469: PPUSH
12470: CALL_OW 205
// end ;
12474: GO 12417
12476: POP
12477: POP
// end ; end ;
12478: LD_VAR 0 3
12482: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12483: LD_INT 0
12485: PPUSH
12486: PPUSH
12487: PPUSH
12488: PPUSH
12489: PPUSH
12490: PPUSH
12491: PPUSH
12492: PPUSH
12493: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12494: LD_ADDR_VAR 0 6
12498: PUSH
12499: LD_INT 22
12501: PUSH
12502: LD_VAR 0 1
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 25
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: PUSH
12521: LD_INT 24
12523: PUSH
12524: LD_INT 251
12526: PUSH
12527: EMPTY
12528: LIST
12529: LIST
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: PPUSH
12536: CALL_OW 69
12540: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12541: LD_ADDR_VAR 0 7
12545: PUSH
12546: LD_VAR 0 3
12550: PPUSH
12551: LD_INT 22
12553: PUSH
12554: LD_VAR 0 1
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 25
12565: PUSH
12566: LD_INT 4
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 50
12575: PUSH
12576: EMPTY
12577: LIST
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: PPUSH
12584: CALL_OW 70
12588: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12589: LD_ADDR_VAR 0 10
12593: PUSH
12594: LD_VAR 0 3
12598: PPUSH
12599: LD_INT 22
12601: PUSH
12602: LD_VAR 0 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 21
12613: PUSH
12614: LD_INT 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 3
12623: PUSH
12624: LD_INT 25
12626: PUSH
12627: LD_INT 3
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 3
12640: PUSH
12641: LD_INT 24
12643: PUSH
12644: LD_INT 750
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: EMPTY
12652: LIST
12653: LIST
12654: PUSH
12655: EMPTY
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 70
12665: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12666: LD_ADDR_VAR 0 11
12670: PUSH
12671: LD_VAR 0 2
12675: PPUSH
12676: LD_INT 22
12678: PUSH
12679: LD_VAR 0 1
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: PUSH
12688: LD_INT 21
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: EMPTY
12695: LIST
12696: LIST
12697: PUSH
12698: LD_INT 3
12700: PUSH
12701: LD_INT 25
12703: PUSH
12704: LD_INT 3
12706: PUSH
12707: EMPTY
12708: LIST
12709: LIST
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: LD_INT 3
12717: PUSH
12718: LD_INT 24
12720: PUSH
12721: LD_INT 1000
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: PPUSH
12738: CALL_OW 70
12742: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12743: LD_VAR 0 10
12747: NOT
12748: PUSH
12749: LD_VAR 0 7
12753: NOT
12754: AND
12755: PUSH
12756: LD_VAR 0 11
12760: NOT
12761: AND
12762: IFFALSE 12766
// exit ;
12764: GO 13026
// if damageUnits > 0 and sci_list > 0 then
12766: LD_VAR 0 10
12770: PUSH
12771: LD_INT 0
12773: GREATER
12774: PUSH
12775: LD_VAR 0 6
12779: PUSH
12780: LD_INT 0
12782: GREATER
12783: AND
12784: IFFALSE 12817
// for i in damageUnits do
12786: LD_ADDR_VAR 0 8
12790: PUSH
12791: LD_VAR 0 10
12795: PUSH
12796: FOR_IN
12797: IFFALSE 12815
// ComMoveToArea ( i , healArea ) ;
12799: LD_VAR 0 8
12803: PPUSH
12804: LD_VAR 0 2
12808: PPUSH
12809: CALL_OW 113
12813: GO 12796
12815: POP
12816: POP
// if unitsToHeal > 0 and sci_list > 0 then
12817: LD_VAR 0 11
12821: PUSH
12822: LD_INT 0
12824: GREATER
12825: PUSH
12826: LD_VAR 0 6
12830: PUSH
12831: LD_INT 0
12833: GREATER
12834: AND
12835: IFFALSE 12894
// begin for i in sci_list do
12837: LD_ADDR_VAR 0 8
12841: PUSH
12842: LD_VAR 0 6
12846: PUSH
12847: FOR_IN
12848: IFFALSE 12892
// begin ComExitBuilding ( i ) ;
12850: LD_VAR 0 8
12854: PPUSH
12855: CALL_OW 122
// for j in unitsToHeal do
12859: LD_ADDR_VAR 0 9
12863: PUSH
12864: LD_VAR 0 11
12868: PUSH
12869: FOR_IN
12870: IFFALSE 12888
// AddComHeal ( i , j ) ;
12872: LD_VAR 0 8
12876: PPUSH
12877: LD_VAR 0 9
12881: PPUSH
12882: CALL_OW 188
12886: GO 12869
12888: POP
12889: POP
// end ;
12890: GO 12847
12892: POP
12893: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12894: LD_VAR 0 10
12898: PUSH
12899: LD_INT 0
12901: EQUAL
12902: PUSH
12903: LD_VAR 0 11
12907: PUSH
12908: LD_INT 0
12910: EQUAL
12911: AND
12912: PUSH
12913: LD_VAR 0 7
12917: PUSH
12918: LD_INT 0
12920: GREATER
12921: AND
12922: IFFALSE 13026
// for i in sci_listOutside do
12924: LD_ADDR_VAR 0 8
12928: PUSH
12929: LD_VAR 0 7
12933: PUSH
12934: FOR_IN
12935: IFFALSE 13024
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12937: LD_ADDR_VAR 0 12
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_VAR 0 1
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: PUSH
12954: LD_INT 21
12956: PUSH
12957: LD_INT 3
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 30
12966: PUSH
12967: LD_INT 8
12969: PUSH
12970: EMPTY
12971: LIST
12972: LIST
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: PPUSH
12979: CALL_OW 69
12983: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12984: LD_ADDR_VAR 0 13
12988: PUSH
12989: LD_INT 1
12991: PPUSH
12992: LD_VAR 0 12
12996: PPUSH
12997: CALL_OW 12
13001: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
13002: LD_VAR 0 8
13006: PPUSH
13007: LD_VAR 0 12
13011: PUSH
13012: LD_VAR 0 13
13016: ARRAY
13017: PPUSH
13018: CALL_OW 120
// end ;
13022: GO 12934
13024: POP
13025: POP
// end ;
13026: LD_VAR 0 5
13030: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
13031: LD_INT 0
13033: PPUSH
13034: PPUSH
13035: PPUSH
13036: PPUSH
13037: PPUSH
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
// amChassisTab = [ ] ;
13044: LD_ADDR_VAR 0 19
13048: PUSH
13049: EMPTY
13050: ST_TO_ADDR
// arChassisTab = [ ] ;
13051: LD_ADDR_VAR 0 18
13055: PUSH
13056: EMPTY
13057: ST_TO_ADDR
// ruChassisTab = [ ] ;
13058: LD_ADDR_VAR 0 17
13062: PUSH
13063: EMPTY
13064: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
13065: LD_INT 35
13067: PPUSH
13068: CALL_OW 67
// if nation = 1 then
13072: LD_VAR 0 5
13076: PUSH
13077: LD_INT 1
13079: EQUAL
13080: IFFALSE 13585
// begin uc_side = side ;
13082: LD_ADDR_OWVAR 20
13086: PUSH
13087: LD_VAR 0 2
13091: ST_TO_ADDR
// uc_nation = nation ;
13092: LD_ADDR_OWVAR 21
13096: PUSH
13097: LD_VAR 0 5
13101: ST_TO_ADDR
// vc_engine = vehengine ;
13102: LD_ADDR_OWVAR 39
13106: PUSH
13107: LD_VAR 0 6
13111: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13112: LD_ADDR_OWVAR 38
13116: PUSH
13117: LD_VAR 0 7
13121: PUSH
13122: LD_INT 1
13124: PPUSH
13125: LD_VAR 0 7
13129: PPUSH
13130: CALL_OW 12
13134: ARRAY
13135: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
13136: LD_ADDR_OWVAR 40
13140: PUSH
13141: LD_VAR 0 10
13145: PUSH
13146: LD_INT 1
13148: PPUSH
13149: LD_VAR 0 10
13153: PPUSH
13154: CALL_OW 12
13158: ARRAY
13159: ST_TO_ADDR
// for j = 1 to AMWeapon do
13160: LD_ADDR_VAR 0 14
13164: PUSH
13165: DOUBLE
13166: LD_INT 1
13168: DEC
13169: ST_TO_ADDR
13170: LD_VAR 0 10
13174: PUSH
13175: FOR_TO
13176: IFFALSE 13477
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
13178: LD_VAR 0 10
13182: PUSH
13183: LD_VAR 0 14
13187: ARRAY
13188: PUSH
13189: LD_INT 2
13191: EQUAL
13192: PUSH
13193: LD_VAR 0 10
13197: PUSH
13198: LD_VAR 0 14
13202: ARRAY
13203: PUSH
13204: LD_INT 3
13206: EQUAL
13207: OR
13208: IFFALSE 13261
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
13210: LD_ADDR_VAR 0 19
13214: PUSH
13215: LD_INT 1
13217: PUSH
13218: LD_INT 2
13220: PUSH
13221: LD_INT 3
13223: PUSH
13224: LD_INT 4
13226: PUSH
13227: LD_INT 5
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: LIST
13234: LIST
13235: LIST
13236: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13237: LD_ADDR_OWVAR 37
13241: PUSH
13242: LD_VAR 0 19
13246: PUSH
13247: LD_INT 1
13249: PPUSH
13250: LD_VAR 0 19
13254: PPUSH
13255: CALL_OW 12
13259: ARRAY
13260: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
13261: LD_VAR 0 10
13265: PUSH
13266: LD_VAR 0 14
13270: ARRAY
13271: PUSH
13272: LD_INT 4
13274: EQUAL
13275: PUSH
13276: LD_VAR 0 10
13280: PUSH
13281: LD_VAR 0 14
13285: ARRAY
13286: PUSH
13287: LD_INT 5
13289: EQUAL
13290: OR
13291: PUSH
13292: LD_VAR 0 10
13296: PUSH
13297: LD_VAR 0 14
13301: ARRAY
13302: PUSH
13303: LD_INT 9
13305: EQUAL
13306: OR
13307: PUSH
13308: LD_VAR 0 10
13312: PUSH
13313: LD_VAR 0 14
13317: ARRAY
13318: PUSH
13319: LD_INT 11
13321: EQUAL
13322: OR
13323: PUSH
13324: LD_VAR 0 10
13328: PUSH
13329: LD_VAR 0 14
13333: ARRAY
13334: PUSH
13335: LD_INT 7
13337: EQUAL
13338: OR
13339: IFFALSE 13388
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
13341: LD_ADDR_VAR 0 19
13345: PUSH
13346: LD_INT 2
13348: PUSH
13349: LD_INT 3
13351: PUSH
13352: LD_INT 4
13354: PUSH
13355: LD_INT 5
13357: PUSH
13358: EMPTY
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13364: LD_ADDR_OWVAR 37
13368: PUSH
13369: LD_VAR 0 19
13373: PUSH
13374: LD_INT 1
13376: PPUSH
13377: LD_VAR 0 19
13381: PPUSH
13382: CALL_OW 12
13386: ARRAY
13387: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
13388: LD_VAR 0 10
13392: PUSH
13393: LD_VAR 0 14
13397: ARRAY
13398: PUSH
13399: LD_INT 8
13401: EQUAL
13402: PUSH
13403: LD_VAR 0 10
13407: PUSH
13408: LD_VAR 0 14
13412: ARRAY
13413: PUSH
13414: LD_INT 6
13416: EQUAL
13417: OR
13418: PUSH
13419: LD_VAR 0 10
13423: PUSH
13424: LD_VAR 0 14
13428: ARRAY
13429: PUSH
13430: LD_INT 10
13432: EQUAL
13433: OR
13434: IFFALSE 13475
// begin amChassisTab = [ 4 , 5 ] ;
13436: LD_ADDR_VAR 0 19
13440: PUSH
13441: LD_INT 4
13443: PUSH
13444: LD_INT 5
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13451: LD_ADDR_OWVAR 37
13455: PUSH
13456: LD_VAR 0 19
13460: PUSH
13461: LD_INT 1
13463: PPUSH
13464: LD_VAR 0 19
13468: PPUSH
13469: CALL_OW 12
13473: ARRAY
13474: ST_TO_ADDR
// end ; end ;
13475: GO 13175
13477: POP
13478: POP
// veh = CreateVehicle ;
13479: LD_ADDR_VAR 0 16
13483: PUSH
13484: CALL_OW 45
13488: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13489: LD_VAR 0 16
13493: PPUSH
13494: LD_VAR 0 1
13498: PPUSH
13499: LD_INT 0
13501: PPUSH
13502: CALL_OW 49
// if vc_control = 1 then
13506: LD_OWVAR 38
13510: PUSH
13511: LD_INT 1
13513: EQUAL
13514: IFFALSE 13571
// begin hc_gallery =  ;
13516: LD_ADDR_OWVAR 33
13520: PUSH
13521: LD_STRING 
13523: ST_TO_ADDR
// hc_name =  ;
13524: LD_ADDR_OWVAR 26
13528: PUSH
13529: LD_STRING 
13531: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13532: LD_INT 0
13534: PPUSH
13535: LD_INT 3
13537: PPUSH
13538: LD_VAR 0 4
13542: PPUSH
13543: CALL_OW 380
// un = CreateHuman ;
13547: LD_ADDR_VAR 0 15
13551: PUSH
13552: CALL_OW 44
13556: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13557: LD_VAR 0 15
13561: PPUSH
13562: LD_VAR 0 16
13566: PPUSH
13567: CALL_OW 52
// end ; i = i + 1 ;
13571: LD_ADDR_VAR 0 13
13575: PUSH
13576: LD_VAR 0 13
13580: PUSH
13581: LD_INT 1
13583: PLUS
13584: ST_TO_ADDR
// end ; if nation = 2 then
13585: LD_VAR 0 5
13589: PUSH
13590: LD_INT 2
13592: EQUAL
13593: IFFALSE 14015
// begin uc_side = side ;
13595: LD_ADDR_OWVAR 20
13599: PUSH
13600: LD_VAR 0 2
13604: ST_TO_ADDR
// uc_nation = nation ;
13605: LD_ADDR_OWVAR 21
13609: PUSH
13610: LD_VAR 0 5
13614: ST_TO_ADDR
// vc_engine = vehengine ;
13615: LD_ADDR_OWVAR 39
13619: PUSH
13620: LD_VAR 0 6
13624: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13625: LD_ADDR_OWVAR 38
13629: PUSH
13630: LD_VAR 0 7
13634: PUSH
13635: LD_INT 1
13637: PPUSH
13638: LD_VAR 0 7
13642: PPUSH
13643: CALL_OW 12
13647: ARRAY
13648: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13649: LD_ADDR_OWVAR 40
13653: PUSH
13654: LD_VAR 0 9
13658: PUSH
13659: LD_INT 1
13661: PPUSH
13662: LD_VAR 0 9
13666: PPUSH
13667: CALL_OW 12
13671: ARRAY
13672: ST_TO_ADDR
// for j = 1 to ARWeapons do
13673: LD_ADDR_VAR 0 14
13677: PUSH
13678: DOUBLE
13679: LD_INT 1
13681: DEC
13682: ST_TO_ADDR
13683: LD_VAR 0 9
13687: PUSH
13688: FOR_TO
13689: IFFALSE 13907
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13691: LD_VAR 0 9
13695: PUSH
13696: LD_VAR 0 14
13700: ARRAY
13701: PUSH
13702: LD_INT 24
13704: EQUAL
13705: PUSH
13706: LD_VAR 0 9
13710: PUSH
13711: LD_VAR 0 14
13715: ARRAY
13716: PUSH
13717: LD_INT 22
13719: EQUAL
13720: OR
13721: PUSH
13722: LD_VAR 0 9
13726: PUSH
13727: LD_VAR 0 14
13731: ARRAY
13732: PUSH
13733: LD_INT 23
13735: EQUAL
13736: OR
13737: PUSH
13738: LD_VAR 0 9
13742: PUSH
13743: LD_VAR 0 14
13747: ARRAY
13748: PUSH
13749: LD_INT 30
13751: EQUAL
13752: OR
13753: IFFALSE 13790
// begin arChassisTab = [ 14 ] ;
13755: LD_ADDR_VAR 0 18
13759: PUSH
13760: LD_INT 14
13762: PUSH
13763: EMPTY
13764: LIST
13765: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13766: LD_ADDR_OWVAR 37
13770: PUSH
13771: LD_VAR 0 18
13775: PUSH
13776: LD_INT 1
13778: PPUSH
13779: LD_VAR 0 18
13783: PPUSH
13784: CALL_OW 12
13788: ARRAY
13789: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13790: LD_VAR 0 9
13794: PUSH
13795: LD_VAR 0 14
13799: ARRAY
13800: PUSH
13801: LD_INT 29
13803: EQUAL
13804: PUSH
13805: LD_VAR 0 9
13809: PUSH
13810: LD_VAR 0 14
13814: ARRAY
13815: PUSH
13816: LD_INT 28
13818: EQUAL
13819: OR
13820: PUSH
13821: LD_VAR 0 9
13825: PUSH
13826: LD_VAR 0 14
13830: ARRAY
13831: PUSH
13832: LD_INT 27
13834: EQUAL
13835: OR
13836: PUSH
13837: LD_VAR 0 9
13841: PUSH
13842: LD_VAR 0 14
13846: ARRAY
13847: PUSH
13848: LD_INT 26
13850: EQUAL
13851: OR
13852: PUSH
13853: LD_VAR 0 9
13857: PUSH
13858: LD_VAR 0 14
13862: ARRAY
13863: PUSH
13864: LD_INT 25
13866: EQUAL
13867: OR
13868: IFFALSE 13905
// begin arChassisTab = [ 14 ] ;
13870: LD_ADDR_VAR 0 18
13874: PUSH
13875: LD_INT 14
13877: PUSH
13878: EMPTY
13879: LIST
13880: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13881: LD_ADDR_OWVAR 37
13885: PUSH
13886: LD_VAR 0 18
13890: PUSH
13891: LD_INT 1
13893: PPUSH
13894: LD_VAR 0 18
13898: PPUSH
13899: CALL_OW 12
13903: ARRAY
13904: ST_TO_ADDR
// end ; end ;
13905: GO 13688
13907: POP
13908: POP
// veh = CreateVehicle ;
13909: LD_ADDR_VAR 0 16
13913: PUSH
13914: CALL_OW 45
13918: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13919: LD_VAR 0 16
13923: PPUSH
13924: LD_VAR 0 1
13928: PPUSH
13929: LD_INT 0
13931: PPUSH
13932: CALL_OW 49
// if vc_control = 1 then
13936: LD_OWVAR 38
13940: PUSH
13941: LD_INT 1
13943: EQUAL
13944: IFFALSE 14001
// begin hc_gallery =  ;
13946: LD_ADDR_OWVAR 33
13950: PUSH
13951: LD_STRING 
13953: ST_TO_ADDR
// hc_name =  ;
13954: LD_ADDR_OWVAR 26
13958: PUSH
13959: LD_STRING 
13961: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13962: LD_INT 0
13964: PPUSH
13965: LD_INT 3
13967: PPUSH
13968: LD_VAR 0 4
13972: PPUSH
13973: CALL_OW 380
// un = CreateHuman ;
13977: LD_ADDR_VAR 0 15
13981: PUSH
13982: CALL_OW 44
13986: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13987: LD_VAR 0 15
13991: PPUSH
13992: LD_VAR 0 16
13996: PPUSH
13997: CALL_OW 52
// end ; i = i + 1 ;
14001: LD_ADDR_VAR 0 13
14005: PUSH
14006: LD_VAR 0 13
14010: PUSH
14011: LD_INT 1
14013: PLUS
14014: ST_TO_ADDR
// end ; if nation = 3 then
14015: LD_VAR 0 5
14019: PUSH
14020: LD_INT 3
14022: EQUAL
14023: IFFALSE 14429
// begin uc_side = side ;
14025: LD_ADDR_OWVAR 20
14029: PUSH
14030: LD_VAR 0 2
14034: ST_TO_ADDR
// uc_nation = nation ;
14035: LD_ADDR_OWVAR 21
14039: PUSH
14040: LD_VAR 0 5
14044: ST_TO_ADDR
// vc_engine = vehengine ;
14045: LD_ADDR_OWVAR 39
14049: PUSH
14050: LD_VAR 0 6
14054: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14055: LD_ADDR_OWVAR 38
14059: PUSH
14060: LD_VAR 0 7
14064: PUSH
14065: LD_INT 1
14067: PPUSH
14068: LD_VAR 0 7
14072: PPUSH
14073: CALL_OW 12
14077: ARRAY
14078: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
14079: LD_ADDR_OWVAR 40
14083: PUSH
14084: LD_VAR 0 8
14088: PUSH
14089: LD_INT 1
14091: PPUSH
14092: LD_VAR 0 8
14096: PPUSH
14097: CALL_OW 12
14101: ARRAY
14102: ST_TO_ADDR
// for j = 1 to RuWeapons do
14103: LD_ADDR_VAR 0 14
14107: PUSH
14108: DOUBLE
14109: LD_INT 1
14111: DEC
14112: ST_TO_ADDR
14113: LD_VAR 0 8
14117: PUSH
14118: FOR_TO
14119: IFFALSE 14321
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
14121: LD_VAR 0 8
14125: PUSH
14126: LD_VAR 0 14
14130: ARRAY
14131: PUSH
14132: LD_INT 42
14134: EQUAL
14135: PUSH
14136: LD_VAR 0 8
14140: PUSH
14141: LD_VAR 0 14
14145: ARRAY
14146: PUSH
14147: LD_INT 43
14149: EQUAL
14150: OR
14151: PUSH
14152: LD_VAR 0 8
14156: PUSH
14157: LD_VAR 0 14
14161: ARRAY
14162: PUSH
14163: LD_INT 44
14165: EQUAL
14166: OR
14167: PUSH
14168: LD_VAR 0 8
14172: PUSH
14173: LD_VAR 0 14
14177: ARRAY
14178: PUSH
14179: LD_INT 45
14181: EQUAL
14182: OR
14183: PUSH
14184: LD_VAR 0 8
14188: PUSH
14189: LD_VAR 0 14
14193: ARRAY
14194: PUSH
14195: LD_INT 49
14197: EQUAL
14198: OR
14199: IFFALSE 14248
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
14201: LD_ADDR_VAR 0 17
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 23
14214: PUSH
14215: LD_INT 24
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14224: LD_ADDR_OWVAR 37
14228: PUSH
14229: LD_VAR 0 17
14233: PUSH
14234: LD_INT 1
14236: PPUSH
14237: LD_VAR 0 17
14241: PPUSH
14242: CALL_OW 12
14246: ARRAY
14247: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
14248: LD_VAR 0 8
14252: PUSH
14253: LD_VAR 0 14
14257: ARRAY
14258: PUSH
14259: LD_INT 46
14261: EQUAL
14262: PUSH
14263: LD_VAR 0 8
14267: PUSH
14268: LD_VAR 0 14
14272: ARRAY
14273: PUSH
14274: LD_INT 47
14276: EQUAL
14277: OR
14278: IFFALSE 14319
// begin ruChassisTab = [ 23 , 24 ] ;
14280: LD_ADDR_VAR 0 17
14284: PUSH
14285: LD_INT 23
14287: PUSH
14288: LD_INT 24
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
14295: LD_ADDR_OWVAR 37
14299: PUSH
14300: LD_VAR 0 17
14304: PUSH
14305: LD_INT 1
14307: PPUSH
14308: LD_VAR 0 17
14312: PPUSH
14313: CALL_OW 12
14317: ARRAY
14318: ST_TO_ADDR
// end ; end ;
14319: GO 14118
14321: POP
14322: POP
// veh = CreateVehicle ;
14323: LD_ADDR_VAR 0 16
14327: PUSH
14328: CALL_OW 45
14332: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
14333: LD_VAR 0 16
14337: PPUSH
14338: LD_VAR 0 1
14342: PPUSH
14343: LD_INT 0
14345: PPUSH
14346: CALL_OW 49
// if vc_control = 1 then
14350: LD_OWVAR 38
14354: PUSH
14355: LD_INT 1
14357: EQUAL
14358: IFFALSE 14415
// begin hc_gallery =  ;
14360: LD_ADDR_OWVAR 33
14364: PUSH
14365: LD_STRING 
14367: ST_TO_ADDR
// hc_name =  ;
14368: LD_ADDR_OWVAR 26
14372: PUSH
14373: LD_STRING 
14375: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
14376: LD_INT 0
14378: PPUSH
14379: LD_INT 3
14381: PPUSH
14382: LD_VAR 0 4
14386: PPUSH
14387: CALL_OW 380
// un = CreateHuman ;
14391: LD_ADDR_VAR 0 15
14395: PUSH
14396: CALL_OW 44
14400: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14401: LD_VAR 0 15
14405: PPUSH
14406: LD_VAR 0 16
14410: PPUSH
14411: CALL_OW 52
// end ; i = i + 1 ;
14415: LD_ADDR_VAR 0 13
14419: PUSH
14420: LD_VAR 0 13
14424: PUSH
14425: LD_INT 1
14427: PLUS
14428: ST_TO_ADDR
// end ; until i = vehCount ;
14429: LD_VAR 0 13
14433: PUSH
14434: LD_VAR 0 3
14438: EQUAL
14439: IFFALSE 13065
// repeat wait ( 0 0$1 ) ;
14441: LD_INT 35
14443: PPUSH
14444: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14448: LD_ADDR_VAR 0 20
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_VAR 0 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 21
14467: PUSH
14468: LD_INT 2
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: LD_INT 24
14477: PUSH
14478: LD_INT 650
14480: PUSH
14481: EMPTY
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: ST_TO_ADDR
// if vehicleOK_list > 0 then
14495: LD_VAR 0 20
14499: PUSH
14500: LD_INT 0
14502: GREATER
14503: IFFALSE 14694
// begin for i in vehicleOK_list do
14505: LD_ADDR_VAR 0 13
14509: PUSH
14510: LD_VAR 0 20
14514: PUSH
14515: FOR_IN
14516: IFFALSE 14692
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14518: LD_ADDR_VAR 0 21
14522: PUSH
14523: LD_INT 22
14525: PUSH
14526: LD_VAR 0 11
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: PPUSH
14540: LD_VAR 0 13
14544: PPUSH
14545: CALL_OW 74
14549: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14550: LD_ADDR_VAR 0 22
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_VAR 0 11
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 2
14569: PUSH
14570: LD_INT 59
14572: PUSH
14573: EMPTY
14574: LIST
14575: PUSH
14576: LD_INT 21
14578: PUSH
14579: LD_INT 1
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PUSH
14586: LD_INT 21
14588: PUSH
14589: LD_INT 2
14591: PUSH
14592: EMPTY
14593: LIST
14594: LIST
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: PPUSH
14609: CALL_OW 69
14613: PPUSH
14614: LD_VAR 0 13
14618: PPUSH
14619: CALL_OW 74
14623: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14624: LD_VAR 0 13
14628: PPUSH
14629: LD_VAR 0 21
14633: PPUSH
14634: CALL_OW 296
14638: PUSH
14639: LD_INT 8
14641: PLUS
14642: PUSH
14643: LD_VAR 0 13
14647: PPUSH
14648: LD_VAR 0 22
14652: PPUSH
14653: CALL_OW 296
14657: LESS
14658: IFFALSE 14676
// begin ComAttackUnit ( i , target1 ) ;
14660: LD_VAR 0 13
14664: PPUSH
14665: LD_VAR 0 21
14669: PPUSH
14670: CALL_OW 115
// end else
14674: GO 14690
// begin ComAttackUnit ( i , target2 ) ;
14676: LD_VAR 0 13
14680: PPUSH
14681: LD_VAR 0 22
14685: PPUSH
14686: CALL_OW 115
// end ; end ;
14690: GO 14515
14692: POP
14693: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14694: LD_INT 22
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 2
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: PUSH
14725: LD_INT 0
14727: EQUAL
14728: IFFALSE 14441
// end ;
14730: LD_VAR 0 12
14734: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
14735: LD_INT 0
14737: PPUSH
14738: PPUSH
14739: PPUSH
14740: PPUSH
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
14747: PPUSH
// for i = 1 to medicCount do
14748: LD_ADDR_VAR 0 13
14752: PUSH
14753: DOUBLE
14754: LD_INT 1
14756: DEC
14757: ST_TO_ADDR
14758: LD_VAR 0 7
14762: PUSH
14763: FOR_TO
14764: IFFALSE 14846
// begin uc_side = side ;
14766: LD_ADDR_OWVAR 20
14770: PUSH
14771: LD_VAR 0 1
14775: ST_TO_ADDR
// uc_nation = nation ;
14776: LD_ADDR_OWVAR 21
14780: PUSH
14781: LD_VAR 0 2
14785: ST_TO_ADDR
// hc_name =  ;
14786: LD_ADDR_OWVAR 26
14790: PUSH
14791: LD_STRING 
14793: ST_TO_ADDR
// hc_gallery =  ;
14794: LD_ADDR_OWVAR 33
14798: PUSH
14799: LD_STRING 
14801: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
14802: LD_INT 0
14804: PPUSH
14805: LD_INT 4
14807: PPUSH
14808: LD_VAR 0 8
14812: PPUSH
14813: CALL_OW 380
// un = CreateHuman ;
14817: LD_ADDR_VAR 0 15
14821: PUSH
14822: CALL_OW 44
14826: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14827: LD_VAR 0 15
14831: PPUSH
14832: LD_VAR 0 9
14836: PPUSH
14837: LD_INT 0
14839: PPUSH
14840: CALL_OW 49
// end ;
14844: GO 14763
14846: POP
14847: POP
// for i = 1 to soldierCount do
14848: LD_ADDR_VAR 0 13
14852: PUSH
14853: DOUBLE
14854: LD_INT 1
14856: DEC
14857: ST_TO_ADDR
14858: LD_VAR 0 3
14862: PUSH
14863: FOR_TO
14864: IFFALSE 14946
// begin uc_side = side ;
14866: LD_ADDR_OWVAR 20
14870: PUSH
14871: LD_VAR 0 1
14875: ST_TO_ADDR
// uc_nation = nation ;
14876: LD_ADDR_OWVAR 21
14880: PUSH
14881: LD_VAR 0 2
14885: ST_TO_ADDR
// hc_name =  ;
14886: LD_ADDR_OWVAR 26
14890: PUSH
14891: LD_STRING 
14893: ST_TO_ADDR
// hc_gallery =  ;
14894: LD_ADDR_OWVAR 33
14898: PUSH
14899: LD_STRING 
14901: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14902: LD_INT 0
14904: PPUSH
14905: LD_INT 1
14907: PPUSH
14908: LD_VAR 0 8
14912: PPUSH
14913: CALL_OW 380
// un = CreateHuman ;
14917: LD_ADDR_VAR 0 15
14921: PUSH
14922: CALL_OW 44
14926: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14927: LD_VAR 0 15
14931: PPUSH
14932: LD_VAR 0 9
14936: PPUSH
14937: LD_INT 0
14939: PPUSH
14940: CALL_OW 49
// end ;
14944: GO 14863
14946: POP
14947: POP
// for i = 1 to sniperCount do
14948: LD_ADDR_VAR 0 13
14952: PUSH
14953: DOUBLE
14954: LD_INT 1
14956: DEC
14957: ST_TO_ADDR
14958: LD_VAR 0 4
14962: PUSH
14963: FOR_TO
14964: IFFALSE 15046
// begin uc_side = side ;
14966: LD_ADDR_OWVAR 20
14970: PUSH
14971: LD_VAR 0 1
14975: ST_TO_ADDR
// uc_nation = nation ;
14976: LD_ADDR_OWVAR 21
14980: PUSH
14981: LD_VAR 0 2
14985: ST_TO_ADDR
// hc_name =  ;
14986: LD_ADDR_OWVAR 26
14990: PUSH
14991: LD_STRING 
14993: ST_TO_ADDR
// hc_gallery =  ;
14994: LD_ADDR_OWVAR 33
14998: PUSH
14999: LD_STRING 
15001: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
15002: LD_INT 0
15004: PPUSH
15005: LD_INT 5
15007: PPUSH
15008: LD_VAR 0 8
15012: PPUSH
15013: CALL_OW 380
// un = CreateHuman ;
15017: LD_ADDR_VAR 0 15
15021: PUSH
15022: CALL_OW 44
15026: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15027: LD_VAR 0 15
15031: PPUSH
15032: LD_VAR 0 9
15036: PPUSH
15037: LD_INT 0
15039: PPUSH
15040: CALL_OW 49
// end ;
15044: GO 14963
15046: POP
15047: POP
// for i = 1 to bazookCount do
15048: LD_ADDR_VAR 0 13
15052: PUSH
15053: DOUBLE
15054: LD_INT 1
15056: DEC
15057: ST_TO_ADDR
15058: LD_VAR 0 5
15062: PUSH
15063: FOR_TO
15064: IFFALSE 15146
// begin uc_side = side ;
15066: LD_ADDR_OWVAR 20
15070: PUSH
15071: LD_VAR 0 1
15075: ST_TO_ADDR
// uc_nation = nation ;
15076: LD_ADDR_OWVAR 21
15080: PUSH
15081: LD_VAR 0 2
15085: ST_TO_ADDR
// hc_name =  ;
15086: LD_ADDR_OWVAR 26
15090: PUSH
15091: LD_STRING 
15093: ST_TO_ADDR
// hc_gallery =  ;
15094: LD_ADDR_OWVAR 33
15098: PUSH
15099: LD_STRING 
15101: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
15102: LD_INT 0
15104: PPUSH
15105: LD_INT 9
15107: PPUSH
15108: LD_VAR 0 8
15112: PPUSH
15113: CALL_OW 380
// un = CreateHuman ;
15117: LD_ADDR_VAR 0 15
15121: PUSH
15122: CALL_OW 44
15126: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15127: LD_VAR 0 15
15131: PPUSH
15132: LD_VAR 0 9
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL_OW 49
// end ;
15144: GO 15063
15146: POP
15147: POP
// for i = 1 to mortalCount do
15148: LD_ADDR_VAR 0 13
15152: PUSH
15153: DOUBLE
15154: LD_INT 1
15156: DEC
15157: ST_TO_ADDR
15158: LD_VAR 0 6
15162: PUSH
15163: FOR_TO
15164: IFFALSE 15246
// begin uc_side = side ;
15166: LD_ADDR_OWVAR 20
15170: PUSH
15171: LD_VAR 0 1
15175: ST_TO_ADDR
// uc_nation = nation ;
15176: LD_ADDR_OWVAR 21
15180: PUSH
15181: LD_VAR 0 2
15185: ST_TO_ADDR
// hc_name =  ;
15186: LD_ADDR_OWVAR 26
15190: PUSH
15191: LD_STRING 
15193: ST_TO_ADDR
// hc_gallery =  ;
15194: LD_ADDR_OWVAR 33
15198: PUSH
15199: LD_STRING 
15201: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
15202: LD_INT 0
15204: PPUSH
15205: LD_INT 8
15207: PPUSH
15208: LD_VAR 0 8
15212: PPUSH
15213: CALL_OW 380
// un = CreateHuman ;
15217: LD_ADDR_VAR 0 15
15221: PUSH
15222: CALL_OW 44
15226: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
15227: LD_VAR 0 15
15231: PPUSH
15232: LD_VAR 0 9
15236: PPUSH
15237: LD_INT 0
15239: PPUSH
15240: CALL_OW 49
// end ;
15244: GO 15163
15246: POP
15247: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
15248: LD_ADDR_VAR 0 18
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_VAR 0 1
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: LD_INT 25
15270: PUSH
15271: LD_INT 1
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PUSH
15278: LD_INT 25
15280: PUSH
15281: LD_INT 5
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PUSH
15288: LD_INT 25
15290: PUSH
15291: LD_INT 8
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 9
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PPUSH
15319: CALL_OW 69
15323: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
15324: LD_ADDR_VAR 0 17
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_VAR 0 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 25
15343: PUSH
15344: LD_INT 4
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PPUSH
15355: CALL_OW 69
15359: ST_TO_ADDR
// for i in medic_list do
15360: LD_ADDR_VAR 0 13
15364: PUSH
15365: LD_VAR 0 17
15369: PUSH
15370: FOR_IN
15371: IFFALSE 15389
// ComMoveToArea ( i , healArea ) ;
15373: LD_VAR 0 13
15377: PPUSH
15378: LD_VAR 0 10
15382: PPUSH
15383: CALL_OW 113
15387: GO 15370
15389: POP
15390: POP
// repeat wait ( 0 0$1 ) ;
15391: LD_INT 35
15393: PPUSH
15394: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15398: LD_ADDR_VAR 0 16
15402: PUSH
15403: LD_INT 22
15405: PUSH
15406: LD_VAR 0 1
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: LD_INT 1
15417: PUSH
15418: LD_INT 3
15420: PUSH
15421: LD_INT 24
15423: PUSH
15424: LD_INT 550
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: LD_INT 24
15437: PUSH
15438: LD_INT 250
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: LIST
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PPUSH
15454: CALL_OW 69
15458: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15459: LD_ADDR_VAR 0 18
15463: PUSH
15464: LD_INT 22
15466: PUSH
15467: LD_VAR 0 1
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: PUSH
15476: LD_INT 2
15478: PUSH
15479: LD_INT 25
15481: PUSH
15482: LD_INT 1
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: LD_INT 25
15491: PUSH
15492: LD_INT 5
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 25
15501: PUSH
15502: LD_INT 8
15504: PUSH
15505: EMPTY
15506: LIST
15507: LIST
15508: PUSH
15509: LD_INT 25
15511: PUSH
15512: LD_INT 9
15514: PUSH
15515: EMPTY
15516: LIST
15517: LIST
15518: PUSH
15519: EMPTY
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 24
15528: PUSH
15529: LD_INT 1000
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: EMPTY
15537: LIST
15538: LIST
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: ST_TO_ADDR
// if medicCount > 0 then
15546: LD_VAR 0 7
15550: PUSH
15551: LD_INT 0
15553: GREATER
15554: IFFALSE 15628
// begin if damageUnit_list > 0 then
15556: LD_VAR 0 16
15560: PUSH
15561: LD_INT 0
15563: GREATER
15564: IFFALSE 15628
// begin for i in damageUnit_list do
15566: LD_ADDR_VAR 0 13
15570: PUSH
15571: LD_VAR 0 16
15575: PUSH
15576: FOR_IN
15577: IFFALSE 15626
// begin ComMoveToArea ( i , healArea ) ;
15579: LD_VAR 0 13
15583: PPUSH
15584: LD_VAR 0 10
15588: PPUSH
15589: CALL_OW 113
// for j in medic_list do
15593: LD_ADDR_VAR 0 14
15597: PUSH
15598: LD_VAR 0 17
15602: PUSH
15603: FOR_IN
15604: IFFALSE 15622
// AddComHeal ( j , i ) ;
15606: LD_VAR 0 14
15610: PPUSH
15611: LD_VAR 0 13
15615: PPUSH
15616: CALL_OW 188
15620: GO 15603
15622: POP
15623: POP
// end ;
15624: GO 15576
15626: POP
15627: POP
// end ; end ; for i in soldiersOK_list do
15628: LD_ADDR_VAR 0 13
15632: PUSH
15633: LD_VAR 0 18
15637: PUSH
15638: FOR_IN
15639: IFFALSE 15815
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15641: LD_ADDR_VAR 0 21
15645: PUSH
15646: LD_INT 22
15648: PUSH
15649: LD_VAR 0 11
15653: PUSH
15654: EMPTY
15655: LIST
15656: LIST
15657: PPUSH
15658: CALL_OW 69
15662: PPUSH
15663: LD_VAR 0 13
15667: PPUSH
15668: CALL_OW 74
15672: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15673: LD_ADDR_VAR 0 22
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_VAR 0 11
15685: PUSH
15686: EMPTY
15687: LIST
15688: LIST
15689: PUSH
15690: LD_INT 2
15692: PUSH
15693: LD_INT 59
15695: PUSH
15696: EMPTY
15697: LIST
15698: PUSH
15699: LD_INT 21
15701: PUSH
15702: LD_INT 1
15704: PUSH
15705: EMPTY
15706: LIST
15707: LIST
15708: PUSH
15709: LD_INT 21
15711: PUSH
15712: LD_INT 2
15714: PUSH
15715: EMPTY
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: PUSH
15725: EMPTY
15726: LIST
15727: LIST
15728: PUSH
15729: EMPTY
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PPUSH
15737: LD_VAR 0 13
15741: PPUSH
15742: CALL_OW 74
15746: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15747: LD_VAR 0 13
15751: PPUSH
15752: LD_VAR 0 21
15756: PPUSH
15757: CALL_OW 296
15761: PUSH
15762: LD_INT 8
15764: PLUS
15765: PUSH
15766: LD_VAR 0 13
15770: PPUSH
15771: LD_VAR 0 22
15775: PPUSH
15776: CALL_OW 296
15780: LESS
15781: IFFALSE 15799
// begin ComAttackUnit ( i , target1 ) ;
15783: LD_VAR 0 13
15787: PPUSH
15788: LD_VAR 0 21
15792: PPUSH
15793: CALL_OW 115
// end else
15797: GO 15813
// begin ComAttackUnit ( i , target2 ) ;
15799: LD_VAR 0 13
15803: PPUSH
15804: LD_VAR 0 22
15808: PPUSH
15809: CALL_OW 115
// end ; end ;
15813: GO 15638
15815: POP
15816: POP
// for i in soldiersOK_list do
15817: LD_ADDR_VAR 0 13
15821: PUSH
15822: LD_VAR 0 18
15826: PUSH
15827: FOR_IN
15828: IFFALSE 16004
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15830: LD_ADDR_VAR 0 21
15834: PUSH
15835: LD_INT 22
15837: PUSH
15838: LD_VAR 0 11
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PPUSH
15847: CALL_OW 69
15851: PPUSH
15852: LD_VAR 0 13
15856: PPUSH
15857: CALL_OW 74
15861: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15862: LD_ADDR_VAR 0 22
15866: PUSH
15867: LD_INT 22
15869: PUSH
15870: LD_VAR 0 11
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 59
15884: PUSH
15885: EMPTY
15886: LIST
15887: PUSH
15888: LD_INT 21
15890: PUSH
15891: LD_INT 1
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: LD_INT 21
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: EMPTY
15905: LIST
15906: LIST
15907: PUSH
15908: EMPTY
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: PUSH
15914: EMPTY
15915: LIST
15916: LIST
15917: PUSH
15918: EMPTY
15919: LIST
15920: PPUSH
15921: CALL_OW 69
15925: PPUSH
15926: LD_VAR 0 13
15930: PPUSH
15931: CALL_OW 74
15935: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15936: LD_VAR 0 13
15940: PPUSH
15941: LD_VAR 0 21
15945: PPUSH
15946: CALL_OW 296
15950: PUSH
15951: LD_INT 8
15953: PLUS
15954: PUSH
15955: LD_VAR 0 13
15959: PPUSH
15960: LD_VAR 0 22
15964: PPUSH
15965: CALL_OW 296
15969: LESS
15970: IFFALSE 15988
// begin ComAttackUnit ( i , target1 ) ;
15972: LD_VAR 0 13
15976: PPUSH
15977: LD_VAR 0 21
15981: PPUSH
15982: CALL_OW 115
// end else
15986: GO 16002
// begin ComAttackUnit ( i , target2 ) ;
15988: LD_VAR 0 13
15992: PPUSH
15993: LD_VAR 0 22
15997: PPUSH
15998: CALL_OW 115
// end ; end ;
16002: GO 15827
16004: POP
16005: POP
// until soldiersOK_list = [ ] ;
16006: LD_VAR 0 18
16010: PUSH
16011: EMPTY
16012: EQUAL
16013: IFFALSE 15391
// end ;
16015: LD_VAR 0 12
16019: RET
// export function TameApemans ; var i , j ; begin
16020: LD_INT 0
16022: PPUSH
16023: PPUSH
16024: PPUSH
// repeat wait ( 0 0$1 ) ;
16025: LD_INT 35
16027: PPUSH
16028: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16032: LD_ADDR_VAR 0 2
16036: PUSH
16037: LD_INT 22
16039: PUSH
16040: LD_INT 2
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PUSH
16047: LD_INT 25
16049: PUSH
16050: LD_INT 4
16052: PUSH
16053: EMPTY
16054: LIST
16055: LIST
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: PUSH
16066: FOR_IN
16067: IFFALSE 16144
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
16069: LD_ADDR_VAR 0 3
16073: PUSH
16074: LD_INT 5
16076: PPUSH
16077: LD_INT 22
16079: PUSH
16080: LD_INT 0
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: LD_INT 25
16089: PUSH
16090: LD_INT 12
16092: PUSH
16093: EMPTY
16094: LIST
16095: LIST
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PPUSH
16101: CALL_OW 70
16105: PUSH
16106: FOR_IN
16107: IFFALSE 16140
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
16109: LD_VAR 0 2
16113: PPUSH
16114: LD_VAR 0 3
16118: PPUSH
16119: CALL_OW 250
16123: PPUSH
16124: LD_VAR 0 3
16128: PPUSH
16129: CALL_OW 251
16133: PPUSH
16134: CALL_OW 191
// end ;
16138: GO 16106
16140: POP
16141: POP
// end ;
16142: GO 16066
16144: POP
16145: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
16146: LD_INT 22
16148: PUSH
16149: LD_INT 2
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: PUSH
16156: LD_INT 25
16158: PUSH
16159: LD_INT 4
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PPUSH
16170: CALL_OW 69
16174: PUSH
16175: LD_INT 0
16177: EQUAL
16178: PUSH
16179: LD_INT 5
16181: PPUSH
16182: LD_INT 22
16184: PUSH
16185: LD_INT 0
16187: PUSH
16188: EMPTY
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 12
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: PUSH
16202: EMPTY
16203: LIST
16204: LIST
16205: PPUSH
16206: CALL_OW 70
16210: PUSH
16211: LD_INT 0
16213: EQUAL
16214: OR
16215: IFFALSE 16025
// wait ( 0 0$30 ) ;
16217: LD_INT 1050
16219: PPUSH
16220: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
16224: LD_ADDR_VAR 0 2
16228: PUSH
16229: LD_INT 22
16231: PUSH
16232: LD_INT 2
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: LD_INT 25
16241: PUSH
16242: LD_INT 12
16244: PUSH
16245: EMPTY
16246: LIST
16247: LIST
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PPUSH
16253: CALL_OW 69
16257: PUSH
16258: FOR_IN
16259: IFFALSE 16323
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
16261: LD_VAR 0 2
16265: PPUSH
16266: LD_EXP 42
16270: PPUSH
16271: CALL_OW 250
16275: PPUSH
16276: LD_EXP 42
16280: PPUSH
16281: CALL_OW 251
16285: PPUSH
16286: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_INT 16
16297: PUSH
16298: LD_INT 15
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 1
16307: PPUSH
16308: LD_INT 2
16310: PPUSH
16311: CALL_OW 12
16315: ARRAY
16316: PPUSH
16317: CALL_OW 336
// end ;
16321: GO 16258
16323: POP
16324: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
16325: LD_ADDR_VAR 0 2
16329: PUSH
16330: LD_INT 22
16332: PUSH
16333: LD_INT 2
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: PUSH
16340: LD_INT 25
16342: PUSH
16343: LD_INT 4
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: PPUSH
16354: CALL_OW 69
16358: PUSH
16359: FOR_IN
16360: IFFALSE 16406
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
16362: LD_VAR 0 2
16366: PPUSH
16367: LD_INT 22
16369: PUSH
16370: LD_INT 2
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 30
16379: PUSH
16380: LD_INT 8
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: PUSH
16396: LD_INT 1
16398: ARRAY
16399: PPUSH
16400: CALL_OW 120
16404: GO 16359
16406: POP
16407: POP
// end ;
16408: LD_VAR 0 1
16412: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16413: LD_INT 0
16415: PPUSH
16416: PPUSH
16417: PPUSH
16418: PPUSH
16419: PPUSH
16420: PPUSH
16421: PPUSH
16422: PPUSH
16423: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16424: LD_INT 22
16426: PUSH
16427: LD_VAR 0 1
16431: PUSH
16432: EMPTY
16433: LIST
16434: LIST
16435: PUSH
16436: LD_INT 21
16438: PUSH
16439: LD_INT 2
16441: PUSH
16442: EMPTY
16443: LIST
16444: LIST
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: PUSH
16455: LD_VAR 0 3
16459: LESSEQUAL
16460: IFFALSE 16604
// for i = 1 to vehCount do
16462: LD_ADDR_VAR 0 10
16466: PUSH
16467: DOUBLE
16468: LD_INT 1
16470: DEC
16471: ST_TO_ADDR
16472: LD_VAR 0 3
16476: PUSH
16477: FOR_TO
16478: IFFALSE 16602
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16480: LD_ADDR_VAR 0 12
16484: PUSH
16485: LD_VAR 0 5
16489: PUSH
16490: LD_INT 1
16492: PPUSH
16493: LD_VAR 0 5
16497: PPUSH
16498: CALL_OW 12
16502: ARRAY
16503: ST_TO_ADDR
// if randWeapon = 46 then
16504: LD_VAR 0 12
16508: PUSH
16509: LD_INT 46
16511: EQUAL
16512: IFFALSE 16557
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16514: LD_VAR 0 2
16518: PPUSH
16519: LD_INT 24
16521: PPUSH
16522: LD_VAR 0 6
16526: PPUSH
16527: LD_VAR 0 7
16531: PUSH
16532: LD_INT 1
16534: PPUSH
16535: LD_VAR 0 7
16539: PPUSH
16540: CALL_OW 12
16544: ARRAY
16545: PPUSH
16546: LD_VAR 0 12
16550: PPUSH
16551: CALL_OW 185
16555: GO 16600
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16557: LD_VAR 0 2
16561: PPUSH
16562: LD_VAR 0 8
16566: PPUSH
16567: LD_VAR 0 6
16571: PPUSH
16572: LD_VAR 0 7
16576: PUSH
16577: LD_INT 1
16579: PPUSH
16580: LD_VAR 0 7
16584: PPUSH
16585: CALL_OW 12
16589: ARRAY
16590: PPUSH
16591: LD_VAR 0 12
16595: PPUSH
16596: CALL_OW 185
// end ;
16600: GO 16477
16602: POP
16603: POP
// repeat wait ( 0 0$1 ) ;
16604: LD_INT 35
16606: PPUSH
16607: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16611: LD_INT 22
16613: PUSH
16614: LD_VAR 0 1
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PUSH
16623: LD_INT 21
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: EMPTY
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 24
16635: PUSH
16636: LD_INT 250
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: LIST
16647: PPUSH
16648: CALL_OW 69
16652: PUSH
16653: LD_VAR 0 3
16657: GREATEREQUAL
16658: IFFALSE 16604
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16660: LD_INT 22
16662: PUSH
16663: LD_VAR 0 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 21
16674: PUSH
16675: LD_INT 2
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: LD_INT 24
16684: PUSH
16685: LD_INT 250
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PUSH
16692: EMPTY
16693: LIST
16694: LIST
16695: LIST
16696: PPUSH
16697: CALL_OW 69
16701: PUSH
16702: LD_VAR 0 3
16706: GREATEREQUAL
16707: IFFALSE 17050
// begin repeat begin wait ( 0 0$1 ) ;
16709: LD_INT 35
16711: PPUSH
16712: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16716: LD_INT 22
16718: PUSH
16719: LD_VAR 0 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 21
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 24
16740: PUSH
16741: LD_INT 651
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: PPUSH
16753: CALL_OW 69
16757: PUSH
16758: LD_INT 0
16760: GREATER
16761: IFFALSE 16989
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
16763: LD_ADDR_VAR 0 10
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_VAR 0 1
16775: PUSH
16776: EMPTY
16777: LIST
16778: LIST
16779: PUSH
16780: LD_INT 21
16782: PUSH
16783: LD_INT 2
16785: PUSH
16786: EMPTY
16787: LIST
16788: LIST
16789: PUSH
16790: LD_INT 24
16792: PUSH
16793: LD_INT 651
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: LIST
16804: PPUSH
16805: CALL_OW 69
16809: PUSH
16810: FOR_IN
16811: IFFALSE 16987
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16813: LD_ADDR_VAR 0 16
16817: PUSH
16818: LD_INT 22
16820: PUSH
16821: LD_VAR 0 4
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 69
16834: PPUSH
16835: LD_VAR 0 10
16839: PPUSH
16840: CALL_OW 74
16844: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16845: LD_ADDR_VAR 0 17
16849: PUSH
16850: LD_INT 22
16852: PUSH
16853: LD_VAR 0 4
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: PUSH
16862: LD_INT 2
16864: PUSH
16865: LD_INT 59
16867: PUSH
16868: EMPTY
16869: LIST
16870: PUSH
16871: LD_INT 21
16873: PUSH
16874: LD_INT 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 2
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: EMPTY
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: PPUSH
16909: LD_VAR 0 10
16913: PPUSH
16914: CALL_OW 74
16918: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16919: LD_VAR 0 10
16923: PPUSH
16924: LD_VAR 0 16
16928: PPUSH
16929: CALL_OW 296
16933: PUSH
16934: LD_INT 8
16936: PLUS
16937: PUSH
16938: LD_VAR 0 10
16942: PPUSH
16943: LD_VAR 0 17
16947: PPUSH
16948: CALL_OW 296
16952: LESS
16953: IFFALSE 16971
// begin ComAttackUnit ( i , target1 ) ;
16955: LD_VAR 0 10
16959: PPUSH
16960: LD_VAR 0 16
16964: PPUSH
16965: CALL_OW 115
// end else
16969: GO 16985
// begin ComAttackUnit ( i , target2 ) ;
16971: LD_VAR 0 10
16975: PPUSH
16976: LD_VAR 0 17
16980: PPUSH
16981: CALL_OW 115
// end ; end ;
16985: GO 16810
16987: POP
16988: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
16989: LD_INT 22
16991: PUSH
16992: LD_VAR 0 1
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 21
17003: PUSH
17004: LD_INT 2
17006: PUSH
17007: EMPTY
17008: LIST
17009: LIST
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: PPUSH
17015: CALL_OW 69
17019: PUSH
17020: LD_INT 0
17022: EQUAL
17023: PUSH
17024: LD_INT 22
17026: PUSH
17027: LD_VAR 0 4
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: PUSH
17044: LD_INT 0
17046: EQUAL
17047: OR
17048: IFFALSE 16709
// end ; end ; end_of_file
17050: LD_VAR 0 9
17054: RET
// every 0 0$1 trigger russianAI = 1 do
17055: LD_EXP 38
17059: PUSH
17060: LD_INT 1
17062: EQUAL
17063: IFFALSE 17282
17065: GO 17067
17067: DISABLE
// begin enable ;
17068: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
17069: LD_INT 3
17071: PPUSH
17072: LD_EXP 29
17076: PPUSH
17077: CALL 11970 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
17081: LD_INT 3
17083: PPUSH
17084: LD_EXP 41
17088: PPUSH
17089: CALL 12277 0 2
// if ruPossition = 1 then
17093: LD_EXP 40
17097: PUSH
17098: LD_INT 1
17100: EQUAL
17101: IFFALSE 17156
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17103: LD_INT 3
17105: PPUSH
17106: LD_INT 13
17108: PPUSH
17109: LD_INT 10
17111: PPUSH
17112: LD_INT 22
17114: PUSH
17115: LD_INT 3
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 21
17124: PUSH
17125: LD_INT 3
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 8
17137: PUSH
17138: EMPTY
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: PPUSH
17147: CALL_OW 69
17151: PPUSH
17152: CALL 12483 0 4
// if ruPossition = 2 then
17156: LD_EXP 40
17160: PUSH
17161: LD_INT 2
17163: EQUAL
17164: IFFALSE 17219
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17166: LD_INT 3
17168: PPUSH
17169: LD_INT 14
17171: PPUSH
17172: LD_INT 11
17174: PPUSH
17175: LD_INT 22
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: PUSH
17185: LD_INT 21
17187: PUSH
17188: LD_INT 3
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 30
17197: PUSH
17198: LD_INT 8
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: LIST
17209: PPUSH
17210: CALL_OW 69
17214: PPUSH
17215: CALL 12483 0 4
// if ruPossition = 3 then
17219: LD_EXP 40
17223: PUSH
17224: LD_INT 3
17226: EQUAL
17227: IFFALSE 17282
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
17229: LD_INT 3
17231: PPUSH
17232: LD_INT 15
17234: PPUSH
17235: LD_INT 12
17237: PPUSH
17238: LD_INT 22
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: LD_INT 21
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: EMPTY
17255: LIST
17256: LIST
17257: PUSH
17258: LD_INT 30
17260: PUSH
17261: LD_INT 8
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: PPUSH
17278: CALL 12483 0 4
// end ;
17282: END
// every 0 0$1 do
17283: GO 17285
17285: DISABLE
// begin enable ;
17286: ENABLE
// if ruPossition = 1 then
17287: LD_EXP 40
17291: PUSH
17292: LD_INT 1
17294: EQUAL
17295: IFFALSE 17307
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
17297: LD_INT 3
17299: PPUSH
17300: LD_INT 10
17302: PPUSH
17303: CALL 11621 0 2
// if ruPossition = 2 then
17307: LD_EXP 40
17311: PUSH
17312: LD_INT 2
17314: EQUAL
17315: IFFALSE 17327
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
17317: LD_INT 3
17319: PPUSH
17320: LD_INT 11
17322: PPUSH
17323: CALL 11621 0 2
// if ruPossition = 3 then
17327: LD_EXP 40
17331: PUSH
17332: LD_INT 3
17334: EQUAL
17335: IFFALSE 17347
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
17337: LD_INT 3
17339: PPUSH
17340: LD_INT 12
17342: PPUSH
17343: CALL 11621 0 2
// IntBazooka ( 3 , 1 ) ;
17347: LD_INT 3
17349: PPUSH
17350: LD_INT 1
17352: PPUSH
17353: CALL 10440 0 2
// IntBazooka ( 6 , 1 ) ;
17357: LD_INT 6
17359: PPUSH
17360: LD_INT 1
17362: PPUSH
17363: CALL 10440 0 2
// end ;
17367: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
17368: LD_EXP 38
17372: PUSH
17373: LD_INT 1
17375: EQUAL
17376: PUSH
17377: LD_EXP 34
17381: PPUSH
17382: CALL_OW 302
17386: AND
17387: PUSH
17388: LD_EXP 34
17392: PPUSH
17393: CALL_OW 255
17397: PUSH
17398: LD_INT 3
17400: EQUAL
17401: AND
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_INT 3
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 21
17415: PUSH
17416: LD_INT 2
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 33
17425: PUSH
17426: LD_INT 3
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: PPUSH
17438: CALL_OW 69
17442: PUSH
17443: LD_INT 0
17445: EQUAL
17446: AND
17447: IFFALSE 17655
17449: GO 17451
17451: DISABLE
// begin enable ;
17452: ENABLE
// if Difficulty = 1 then
17453: LD_OWVAR 67
17457: PUSH
17458: LD_INT 1
17460: EQUAL
17461: IFFALSE 17523
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17463: LD_INT 3
17465: PPUSH
17466: LD_EXP 34
17470: PPUSH
17471: LD_INT 5
17473: PPUSH
17474: LD_INT 8
17476: PPUSH
17477: CALL_OW 12
17481: PPUSH
17482: LD_INT 1
17484: PPUSH
17485: LD_INT 43
17487: PUSH
17488: LD_INT 44
17490: PUSH
17491: LD_INT 45
17493: PUSH
17494: LD_INT 46
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PPUSH
17503: LD_INT 1
17505: PPUSH
17506: LD_INT 1
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: EMPTY
17513: LIST
17514: LIST
17515: PPUSH
17516: LD_INT 22
17518: PPUSH
17519: CALL 16413 0 8
// if Difficulty = 2 then
17523: LD_OWVAR 67
17527: PUSH
17528: LD_INT 2
17530: EQUAL
17531: IFFALSE 17589
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17533: LD_INT 3
17535: PPUSH
17536: LD_EXP 34
17540: PPUSH
17541: LD_INT 6
17543: PPUSH
17544: LD_INT 8
17546: PPUSH
17547: CALL_OW 12
17551: PPUSH
17552: LD_INT 1
17554: PPUSH
17555: LD_INT 44
17557: PUSH
17558: LD_INT 45
17560: PUSH
17561: LD_INT 46
17563: PUSH
17564: EMPTY
17565: LIST
17566: LIST
17567: LIST
17568: PPUSH
17569: LD_INT 1
17571: PPUSH
17572: LD_INT 1
17574: PUSH
17575: LD_INT 3
17577: PUSH
17578: EMPTY
17579: LIST
17580: LIST
17581: PPUSH
17582: LD_INT 22
17584: PPUSH
17585: CALL 16413 0 8
// if Difficulty = 3 then
17589: LD_OWVAR 67
17593: PUSH
17594: LD_INT 3
17596: EQUAL
17597: IFFALSE 17655
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17599: LD_INT 3
17601: PPUSH
17602: LD_EXP 34
17606: PPUSH
17607: LD_INT 7
17609: PPUSH
17610: LD_INT 8
17612: PPUSH
17613: CALL_OW 12
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_INT 44
17623: PUSH
17624: LD_INT 45
17626: PUSH
17627: LD_INT 46
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: PPUSH
17635: LD_INT 1
17637: PPUSH
17638: LD_INT 1
17640: PUSH
17641: LD_INT 3
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PPUSH
17648: LD_INT 22
17650: PPUSH
17651: CALL 16413 0 8
// end ; end_of_file
17655: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 255
17665: PUSH
17666: LD_INT 4
17668: EQUAL
17669: IFFALSE 17683
// SetBName ( building , epsilon ) ;
17671: LD_VAR 0 1
17675: PPUSH
17676: LD_STRING epsilon
17678: PPUSH
17679: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17683: LD_VAR 0 1
17687: PPUSH
17688: CALL_OW 255
17692: PUSH
17693: LD_INT 1
17695: EQUAL
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 266
17706: PUSH
17707: LD_INT 0
17709: EQUAL
17710: AND
17711: IFFALSE 17725
// SetBName ( building , epsilon ) ;
17713: LD_VAR 0 1
17717: PPUSH
17718: LD_STRING epsilon
17720: PPUSH
17721: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17725: LD_VAR 0 1
17729: PPUSH
17730: CALL_OW 255
17734: PUSH
17735: LD_INT 3
17737: EQUAL
17738: PUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 266
17748: PUSH
17749: LD_INT 0
17751: EQUAL
17752: AND
17753: IFFALSE 17767
// SetBName ( building , chuikov ) ;
17755: LD_VAR 0 1
17759: PPUSH
17760: LD_STRING chuikov
17762: PPUSH
17763: CALL_OW 500
// if GetSide ( building ) = 2 then
17767: LD_VAR 0 1
17771: PPUSH
17772: CALL_OW 255
17776: PUSH
17777: LD_INT 2
17779: EQUAL
17780: IFFALSE 17836
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
17782: LD_VAR 0 1
17786: PPUSH
17787: CALL_OW 266
17791: PUSH
17792: LD_INT 6
17794: EQUAL
17795: PUSH
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 266
17805: PUSH
17806: LD_INT 9
17808: EQUAL
17809: OR
17810: IFFALSE 17836
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17812: LD_VAR 0 1
17816: PPUSH
17817: LD_INT 10
17819: PPUSH
17820: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
17824: LD_VAR 0 1
17828: PPUSH
17829: LD_INT 11
17831: PPUSH
17832: CALL_OW 207
// end ; end ; end ;
17836: PPOPN 2
17838: END
// on BuildingComplete ( building ) do var i ;
17839: LD_INT 0
17841: PPUSH
// begin if GetSide ( building ) = 1 then
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 255
17851: PUSH
17852: LD_INT 1
17854: EQUAL
17855: IFFALSE 18055
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17857: LD_INT 22
17859: PUSH
17860: LD_INT 1
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 2
17869: PUSH
17870: LD_INT 30
17872: PUSH
17873: LD_INT 7
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: LD_INT 30
17882: PUSH
17883: LD_INT 8
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: PUSH
17890: LD_INT 1
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 11
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: LD_INT 2
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 26
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PUSH
17919: LD_INT 30
17921: PUSH
17922: LD_INT 27
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 30
17931: PUSH
17932: LD_INT 28
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: PUSH
17969: LD_INT 0
17971: GREATER
17972: PUSH
17973: LD_INT 22
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 2
17985: PUSH
17986: LD_INT 30
17988: PUSH
17989: LD_INT 26
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: PUSH
17996: LD_INT 30
17998: PUSH
17999: LD_INT 27
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 30
18008: PUSH
18009: LD_INT 28
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: EMPTY
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PPUSH
18026: CALL_OW 69
18030: PUSH
18031: LD_INT 0
18033: GREATER
18034: AND
18035: PUSH
18036: LD_EXP 54
18040: PUSH
18041: LD_INT 0
18043: EQUAL
18044: AND
18045: IFFALSE 18055
// eventVar1 = 1 ;
18047: LD_ADDR_EXP 54
18051: PUSH
18052: LD_INT 1
18054: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
18055: LD_VAR 0 1
18059: PPUSH
18060: CALL_OW 255
18064: PUSH
18065: LD_INT 3
18067: EQUAL
18068: IFFALSE 18548
// begin if GetBType ( building ) = b_depot then
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 266
18079: PUSH
18080: LD_INT 0
18082: EQUAL
18083: IFFALSE 18155
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
18085: LD_VAR 0 1
18089: PPUSH
18090: CALL_OW 274
18094: PPUSH
18095: LD_INT 1
18097: PPUSH
18098: LD_INT 5000
18100: PPUSH
18101: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
18105: LD_VAR 0 1
18109: PPUSH
18110: CALL_OW 274
18114: PPUSH
18115: LD_INT 2
18117: PPUSH
18118: LD_INT 5000
18120: PPUSH
18121: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
18125: LD_VAR 0 1
18129: PPUSH
18130: CALL_OW 274
18134: PPUSH
18135: LD_INT 3
18137: PPUSH
18138: LD_INT 5000
18140: PPUSH
18141: CALL_OW 277
// ruDepot = building ;
18145: LD_ADDR_EXP 29
18149: PUSH
18150: LD_VAR 0 1
18154: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18155: LD_VAR 0 1
18159: PPUSH
18160: CALL_OW 266
18164: PUSH
18165: LD_INT 0
18167: EQUAL
18168: PUSH
18169: LD_VAR 0 1
18173: PPUSH
18174: CALL_OW 266
18178: PUSH
18179: LD_INT 2
18181: EQUAL
18182: OR
18183: PUSH
18184: LD_VAR 0 1
18188: PPUSH
18189: CALL_OW 266
18193: PUSH
18194: LD_INT 4
18196: EQUAL
18197: OR
18198: IFFALSE 18209
// ComUpgrade ( building ) ;
18200: LD_VAR 0 1
18204: PPUSH
18205: CALL_OW 146
// if GetBType ( building ) = b_lab then
18209: LD_VAR 0 1
18213: PPUSH
18214: CALL_OW 266
18218: PUSH
18219: LD_INT 6
18221: EQUAL
18222: IFFALSE 18425
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
18224: LD_INT 22
18226: PUSH
18227: LD_INT 3
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 30
18236: PUSH
18237: LD_INT 8
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: EMPTY
18245: LIST
18246: LIST
18247: PPUSH
18248: CALL_OW 69
18252: PUSH
18253: LD_INT 0
18255: EQUAL
18256: IFFALSE 18294
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18258: LD_VAR 0 1
18262: PPUSH
18263: LD_INT 10
18265: PPUSH
18266: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
18270: LD_VAR 0 1
18274: PPUSH
18275: LD_INT 12
18277: PPUSH
18278: CALL_OW 207
// ruLab1 = building ;
18282: LD_ADDR_EXP 30
18286: PUSH
18287: LD_VAR 0 1
18291: ST_TO_ADDR
// end else
18292: GO 18328
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
18294: LD_VAR 0 1
18298: PPUSH
18299: LD_INT 11
18301: PPUSH
18302: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: LD_INT 14
18313: PPUSH
18314: CALL_OW 207
// ruLab2 = building ;
18318: LD_ADDR_EXP 31
18322: PUSH
18323: LD_VAR 0 1
18327: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
18328: LD_INT 3
18330: PPUSH
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: CALL 11536 0 3
// if ruDestroyedBuildings > 0 then
18343: LD_EXP 41
18347: PUSH
18348: LD_INT 0
18350: GREATER
18351: IFFALSE 18425
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18353: LD_ADDR_EXP 41
18357: PUSH
18358: LD_EXP 41
18362: PPUSH
18363: LD_INT 1
18365: PPUSH
18366: CALL_OW 3
18370: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18371: LD_ADDR_EXP 41
18375: PUSH
18376: LD_EXP 41
18380: PPUSH
18381: LD_INT 1
18383: PPUSH
18384: CALL_OW 3
18388: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18389: LD_ADDR_EXP 41
18393: PUSH
18394: LD_EXP 41
18398: PPUSH
18399: LD_INT 1
18401: PPUSH
18402: CALL_OW 3
18406: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
18407: LD_ADDR_EXP 41
18411: PUSH
18412: LD_EXP 41
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: CALL_OW 3
18424: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
18425: LD_VAR 0 1
18429: PPUSH
18430: CALL_OW 266
18434: PUSH
18435: LD_INT 32
18437: EQUAL
18438: IFFALSE 18475
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18440: LD_VAR 0 1
18444: PPUSH
18445: LD_INT 44
18447: PUSH
18448: LD_INT 45
18450: PUSH
18451: LD_INT 46
18453: PUSH
18454: EMPTY
18455: LIST
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 1
18461: PPUSH
18462: LD_INT 3
18464: PPUSH
18465: CALL_OW 12
18469: ARRAY
18470: PPUSH
18471: CALL_OW 208
// if GetBType ( building ) = b_turret then
18475: LD_VAR 0 1
18479: PPUSH
18480: CALL_OW 266
18484: PUSH
18485: LD_INT 33
18487: EQUAL
18488: IFFALSE 18525
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18490: LD_VAR 0 1
18494: PPUSH
18495: LD_INT 44
18497: PUSH
18498: LD_INT 46
18500: PUSH
18501: LD_INT 46
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: LIST
18508: PUSH
18509: LD_INT 1
18511: PPUSH
18512: LD_INT 3
18514: PPUSH
18515: CALL_OW 12
18519: ARRAY
18520: PPUSH
18521: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18525: LD_VAR 0 1
18529: PPUSH
18530: CALL_OW 266
18534: PUSH
18535: LD_INT 24
18537: EQUAL
18538: IFFALSE 18548
// russianAI = 1 ;
18540: LD_ADDR_EXP 38
18544: PUSH
18545: LD_INT 1
18547: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 255
18557: PUSH
18558: LD_INT 2
18560: EQUAL
18561: IFFALSE 19187
// begin if GetBType ( building ) = b_depot then
18563: LD_VAR 0 1
18567: PPUSH
18568: CALL_OW 266
18572: PUSH
18573: LD_INT 0
18575: EQUAL
18576: IFFALSE 18662
// begin arDepot = building ;
18578: LD_ADDR_EXP 42
18582: PUSH
18583: LD_VAR 0 1
18587: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18588: LD_INT 38
18590: PUSH
18591: LD_INT 47
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PPUSH
18598: LD_INT 71
18600: PPUSH
18601: LD_INT 19
18603: PPUSH
18604: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18608: LD_VAR 0 1
18612: PPUSH
18613: CALL_OW 274
18617: PPUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_INT 500
18623: PPUSH
18624: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18628: LD_VAR 0 1
18632: PPUSH
18633: CALL_OW 274
18637: PPUSH
18638: LD_INT 3
18640: PPUSH
18641: LD_INT 30
18643: PPUSH
18644: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18648: LD_EXP 26
18652: PPUSH
18653: LD_EXP 42
18657: PPUSH
18658: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18662: LD_VAR 0 1
18666: PPUSH
18667: CALL_OW 266
18671: PUSH
18672: LD_INT 6
18674: EQUAL
18675: PUSH
18676: LD_VAR 0 1
18680: PPUSH
18681: CALL_OW 266
18685: PUSH
18686: LD_INT 9
18688: EQUAL
18689: OR
18690: IFFALSE 18741
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_INT 10
18699: PPUSH
18700: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 11
18711: PPUSH
18712: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
18716: LD_INT 2
18718: PPUSH
18719: LD_VAR 0 1
18723: PPUSH
18724: LD_INT 2
18726: PPUSH
18727: CALL 11536 0 3
// arLab = building ;
18731: LD_ADDR_EXP 43
18735: PUSH
18736: LD_VAR 0 1
18740: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18741: LD_VAR 0 1
18745: PPUSH
18746: CALL_OW 266
18750: PUSH
18751: LD_INT 2
18753: EQUAL
18754: PUSH
18755: LD_VAR 0 1
18759: PPUSH
18760: CALL_OW 266
18764: PUSH
18765: LD_INT 4
18767: EQUAL
18768: OR
18769: IFFALSE 18780
// ComUpgrade ( building ) ;
18771: LD_VAR 0 1
18775: PPUSH
18776: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
18780: LD_VAR 0 1
18784: PPUSH
18785: CALL_OW 266
18789: PUSH
18790: LD_INT 31
18792: EQUAL
18793: PUSH
18794: LD_INT 22
18796: PUSH
18797: LD_INT 2
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 25
18806: PUSH
18807: LD_INT 1
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 3
18816: PUSH
18817: LD_INT 54
18819: PUSH
18820: EMPTY
18821: LIST
18822: PUSH
18823: LD_INT 3
18825: PUSH
18826: LD_INT 60
18828: PUSH
18829: EMPTY
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: PUSH
18841: EMPTY
18842: LIST
18843: LIST
18844: LIST
18845: PPUSH
18846: CALL_OW 69
18850: PUSH
18851: LD_INT 0
18853: GREATER
18854: AND
18855: IFFALSE 18927
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
18857: LD_INT 22
18859: PUSH
18860: LD_INT 2
18862: PUSH
18863: EMPTY
18864: LIST
18865: LIST
18866: PUSH
18867: LD_INT 25
18869: PUSH
18870: LD_INT 1
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 3
18879: PUSH
18880: LD_INT 54
18882: PUSH
18883: EMPTY
18884: LIST
18885: PUSH
18886: LD_INT 3
18888: PUSH
18889: LD_INT 60
18891: PUSH
18892: EMPTY
18893: LIST
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: LIST
18903: PUSH
18904: EMPTY
18905: LIST
18906: LIST
18907: LIST
18908: PPUSH
18909: CALL_OW 69
18913: PUSH
18914: LD_INT 1
18916: ARRAY
18917: PPUSH
18918: LD_VAR 0 1
18922: PPUSH
18923: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
18927: LD_VAR 0 1
18931: PPUSH
18932: CALL_OW 266
18936: PUSH
18937: LD_INT 27
18939: EQUAL
18940: IFFALSE 19187
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
18942: LD_INT 22
18944: PUSH
18945: LD_INT 2
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 27
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PPUSH
18966: CALL_OW 69
18970: PUSH
18971: LD_INT 2
18973: EQUAL
18974: IFFALSE 19187
// begin AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 92 , 34 ) ;
18976: LD_INT 22
18978: PUSH
18979: LD_INT 2
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PUSH
18986: LD_INT 21
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: LIST
19010: PPUSH
19011: CALL_OW 69
19015: PUSH
19016: LD_INT 1
19018: ARRAY
19019: PPUSH
19020: LD_INT 92
19022: PPUSH
19023: LD_INT 34
19025: PPUSH
19026: CALL_OW 171
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 82 , 57 ) ;
19030: LD_INT 22
19032: PUSH
19033: LD_INT 2
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: LD_INT 25
19052: PUSH
19053: LD_INT 2
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PUSH
19060: EMPTY
19061: LIST
19062: LIST
19063: LIST
19064: PPUSH
19065: CALL_OW 69
19069: PUSH
19070: LD_INT 1
19072: ARRAY
19073: PPUSH
19074: LD_INT 82
19076: PPUSH
19077: LD_INT 57
19079: PPUSH
19080: CALL_OW 171
// AddComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] , 36 , 28 ) ;
19084: LD_INT 22
19086: PUSH
19087: LD_INT 2
19089: PUSH
19090: EMPTY
19091: LIST
19092: LIST
19093: PUSH
19094: LD_INT 21
19096: PUSH
19097: LD_INT 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 25
19106: PUSH
19107: LD_INT 2
19109: PUSH
19110: EMPTY
19111: LIST
19112: LIST
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: PPUSH
19119: CALL_OW 69
19123: PUSH
19124: LD_INT 1
19126: ARRAY
19127: PPUSH
19128: LD_INT 36
19130: PPUSH
19131: LD_INT 28
19133: PPUSH
19134: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
19138: LD_INT 22
19140: PUSH
19141: LD_INT 2
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: LD_INT 21
19150: PUSH
19151: LD_INT 1
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 25
19160: PUSH
19161: LD_INT 2
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: LIST
19172: PPUSH
19173: CALL_OW 69
19177: PPUSH
19178: LD_EXP 42
19182: PPUSH
19183: CALL_OW 180
// end ; end ; end ;
19187: PPOPN 2
19189: END
// on UpgradeComplete ( building ) do var i ;
19190: LD_INT 0
19192: PPUSH
// begin if GetSide ( building ) = 1 then
19193: LD_VAR 0 1
19197: PPUSH
19198: CALL_OW 255
19202: PUSH
19203: LD_INT 1
19205: EQUAL
19206: IFFALSE 19406
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
19208: LD_INT 22
19210: PUSH
19211: LD_INT 1
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 2
19220: PUSH
19221: LD_INT 30
19223: PUSH
19224: LD_INT 7
19226: PUSH
19227: EMPTY
19228: LIST
19229: LIST
19230: PUSH
19231: LD_INT 30
19233: PUSH
19234: LD_INT 8
19236: PUSH
19237: EMPTY
19238: LIST
19239: LIST
19240: PUSH
19241: LD_INT 1
19243: PUSH
19244: LD_INT 30
19246: PUSH
19247: LD_INT 11
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 2
19259: PUSH
19260: LD_INT 30
19262: PUSH
19263: LD_INT 26
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: LD_INT 30
19272: PUSH
19273: LD_INT 27
19275: PUSH
19276: EMPTY
19277: LIST
19278: LIST
19279: PUSH
19280: LD_INT 30
19282: PUSH
19283: LD_INT 28
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: PUSH
19320: LD_INT 0
19322: GREATER
19323: PUSH
19324: LD_INT 22
19326: PUSH
19327: LD_INT 1
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PUSH
19334: LD_INT 2
19336: PUSH
19337: LD_INT 30
19339: PUSH
19340: LD_INT 26
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 30
19349: PUSH
19350: LD_INT 27
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: LD_INT 28
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: PUSH
19373: EMPTY
19374: LIST
19375: LIST
19376: PPUSH
19377: CALL_OW 69
19381: PUSH
19382: LD_INT 0
19384: GREATER
19385: AND
19386: PUSH
19387: LD_EXP 54
19391: PUSH
19392: LD_INT 0
19394: EQUAL
19395: AND
19396: IFFALSE 19406
// eventVar1 = 1 ;
19398: LD_ADDR_EXP 54
19402: PUSH
19403: LD_INT 1
19405: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 255
19415: PUSH
19416: LD_INT 2
19418: EQUAL
19419: IFFALSE 19524
// begin if GetBType ( building ) = b_barracks then
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 266
19430: PUSH
19431: LD_INT 5
19433: EQUAL
19434: IFFALSE 19524
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
19436: LD_ADDR_VAR 0 2
19440: PUSH
19441: LD_INT 22
19443: PUSH
19444: LD_INT 2
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PUSH
19451: LD_INT 25
19453: PUSH
19454: LD_INT 1
19456: PUSH
19457: EMPTY
19458: LIST
19459: LIST
19460: PUSH
19461: LD_INT 3
19463: PUSH
19464: LD_INT 54
19466: PUSH
19467: EMPTY
19468: LIST
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: PPUSH
19479: CALL_OW 69
19483: PUSH
19484: LD_EXP 26
19488: PUSH
19489: EMPTY
19490: LIST
19491: DIFF
19492: PUSH
19493: FOR_IN
19494: IFFALSE 19512
// ComEnterUnit ( i , building ) ;
19496: LD_VAR 0 2
19500: PPUSH
19501: LD_VAR 0 1
19505: PPUSH
19506: CALL_OW 120
19510: GO 19493
19512: POP
19513: POP
// arArm = building ;
19514: LD_ADDR_EXP 44
19518: PUSH
19519: LD_VAR 0 1
19523: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
19524: LD_VAR 0 1
19528: PPUSH
19529: CALL_OW 255
19533: PUSH
19534: LD_INT 3
19536: EQUAL
19537: IFFALSE 20010
// begin if GetBType ( building ) = b_factory then
19539: LD_VAR 0 1
19543: PPUSH
19544: CALL_OW 266
19548: PUSH
19549: LD_INT 3
19551: EQUAL
19552: IFFALSE 19619
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19554: LD_ADDR_VAR 0 2
19558: PUSH
19559: LD_INT 22
19561: PUSH
19562: LD_INT 3
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 25
19571: PUSH
19572: LD_INT 3
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: EMPTY
19580: LIST
19581: LIST
19582: PPUSH
19583: CALL_OW 69
19587: PUSH
19588: FOR_IN
19589: IFFALSE 19607
// ComEnterUnit ( i , building ) ;
19591: LD_VAR 0 2
19595: PPUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 120
19605: GO 19588
19607: POP
19608: POP
// ruFab = building ;
19609: LD_ADDR_EXP 34
19613: PUSH
19614: LD_VAR 0 1
19618: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19619: LD_INT 22
19621: PUSH
19622: LD_INT 3
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 21
19631: PUSH
19632: LD_INT 3
19634: PUSH
19635: EMPTY
19636: LIST
19637: LIST
19638: PUSH
19639: LD_INT 30
19641: PUSH
19642: LD_INT 8
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: LIST
19653: PPUSH
19654: CALL_OW 69
19658: PUSH
19659: LD_INT 2
19661: EQUAL
19662: IFFALSE 19870
// begin for i = 1 to 2 do
19664: LD_ADDR_VAR 0 2
19668: PUSH
19669: DOUBLE
19670: LD_INT 1
19672: DEC
19673: ST_TO_ADDR
19674: LD_INT 2
19676: PUSH
19677: FOR_TO
19678: IFFALSE 19765
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19680: LD_INT 22
19682: PUSH
19683: LD_INT 3
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 25
19692: PUSH
19693: LD_INT 4
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: PPUSH
19704: CALL_OW 69
19708: PUSH
19709: LD_VAR 0 2
19713: ARRAY
19714: PPUSH
19715: LD_INT 22
19717: PUSH
19718: LD_INT 3
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 21
19727: PUSH
19728: LD_INT 3
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 30
19737: PUSH
19738: LD_INT 8
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: PPUSH
19750: CALL_OW 69
19754: PUSH
19755: LD_INT 1
19757: ARRAY
19758: PPUSH
19759: CALL_OW 120
19763: GO 19677
19765: POP
19766: POP
// for i = 3 to 4 do
19767: LD_ADDR_VAR 0 2
19771: PUSH
19772: DOUBLE
19773: LD_INT 3
19775: DEC
19776: ST_TO_ADDR
19777: LD_INT 4
19779: PUSH
19780: FOR_TO
19781: IFFALSE 19868
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
19783: LD_INT 22
19785: PUSH
19786: LD_INT 3
19788: PUSH
19789: EMPTY
19790: LIST
19791: LIST
19792: PUSH
19793: LD_INT 25
19795: PUSH
19796: LD_INT 4
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PPUSH
19807: CALL_OW 69
19811: PUSH
19812: LD_VAR 0 2
19816: ARRAY
19817: PPUSH
19818: LD_INT 22
19820: PUSH
19821: LD_INT 3
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: PUSH
19828: LD_INT 21
19830: PUSH
19831: LD_INT 3
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 30
19840: PUSH
19841: LD_INT 8
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PPUSH
19853: CALL_OW 69
19857: PUSH
19858: LD_INT 2
19860: ARRAY
19861: PPUSH
19862: CALL_OW 120
19866: GO 19780
19868: POP
19869: POP
// end ; if GetBType ( building ) = b_barracks then
19870: LD_VAR 0 1
19874: PPUSH
19875: CALL_OW 266
19879: PUSH
19880: LD_INT 5
19882: EQUAL
19883: IFFALSE 20010
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
19885: LD_ADDR_VAR 0 2
19889: PUSH
19890: LD_INT 22
19892: PUSH
19893: LD_INT 3
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 25
19902: PUSH
19903: LD_INT 1
19905: PUSH
19906: EMPTY
19907: LIST
19908: LIST
19909: PUSH
19910: LD_INT 3
19912: PUSH
19913: LD_INT 54
19915: PUSH
19916: EMPTY
19917: LIST
19918: PUSH
19919: EMPTY
19920: LIST
19921: LIST
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: LIST
19927: PPUSH
19928: CALL_OW 69
19932: PUSH
19933: FOR_IN
19934: IFFALSE 19952
// ComEnterUnit ( i , building ) ;
19936: LD_VAR 0 2
19940: PPUSH
19941: LD_VAR 0 1
19945: PPUSH
19946: CALL_OW 120
19950: GO 19933
19952: POP
19953: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
19954: LD_INT 22
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 30
19966: PUSH
19967: LD_INT 5
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: EMPTY
19975: LIST
19976: LIST
19977: PPUSH
19978: CALL_OW 69
19982: PUSH
19983: LD_INT 0
19985: EQUAL
19986: IFFALSE 20000
// ruArm1 = building else
19988: LD_ADDR_EXP 32
19992: PUSH
19993: LD_VAR 0 1
19997: ST_TO_ADDR
19998: GO 20010
// ruArm2 = building ;
20000: LD_ADDR_EXP 33
20004: PUSH
20005: LD_VAR 0 1
20009: ST_TO_ADDR
// end ; end ; end ;
20010: PPOPN 2
20012: END
// on EnterBuilding ( building , human ) do var rnd ;
20013: LD_INT 0
20015: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
20016: LD_VAR 0 2
20020: PPUSH
20021: CALL_OW 255
20025: PUSH
20026: LD_INT 2
20028: EQUAL
20029: PUSH
20030: LD_VAR 0 2
20034: PPUSH
20035: CALL_OW 257
20039: PUSH
20040: LD_INT 1
20042: EQUAL
20043: AND
20044: PUSH
20045: LD_VAR 0 1
20049: PUSH
20050: LD_EXP 44
20054: EQUAL
20055: AND
20056: IFFALSE 20103
// begin wait ( 0 0$1 ) ;
20058: LD_INT 35
20060: PPUSH
20061: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
20065: LD_ADDR_VAR 0 3
20069: PUSH
20070: LD_INT 1
20072: PPUSH
20073: LD_INT 100
20075: PPUSH
20076: CALL_OW 12
20080: ST_TO_ADDR
// if rnd > 50 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 50
20088: GREATER
20089: IFFALSE 20103
// SetClass ( human , class_mortar ) ;
20091: LD_VAR 0 2
20095: PPUSH
20096: LD_INT 8
20098: PPUSH
20099: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
20103: LD_VAR 0 2
20107: PPUSH
20108: CALL_OW 255
20112: PUSH
20113: LD_INT 3
20115: EQUAL
20116: PUSH
20117: LD_VAR 0 2
20121: PPUSH
20122: CALL_OW 257
20126: PUSH
20127: LD_INT 1
20129: EQUAL
20130: AND
20131: PUSH
20132: LD_VAR 0 1
20136: PUSH
20137: LD_EXP 32
20141: EQUAL
20142: PUSH
20143: LD_VAR 0 1
20147: PUSH
20148: LD_EXP 33
20152: EQUAL
20153: OR
20154: PUSH
20155: EMPTY
20156: LIST
20157: AND
20158: IFFALSE 20179
// begin wait ( 0 0$1 ) ;
20160: LD_INT 35
20162: PPUSH
20163: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
20167: LD_VAR 0 2
20171: PPUSH
20172: LD_INT 9
20174: PPUSH
20175: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
20179: LD_VAR 0 2
20183: PPUSH
20184: CALL_OW 255
20188: PUSH
20189: LD_INT 3
20191: EQUAL
20192: PUSH
20193: LD_VAR 0 2
20197: PPUSH
20198: CALL_OW 257
20202: PUSH
20203: LD_INT 9
20205: EQUAL
20206: AND
20207: PUSH
20208: LD_VAR 0 1
20212: PPUSH
20213: CALL_OW 266
20217: PUSH
20218: LD_INT 32
20220: EQUAL
20221: AND
20222: IFFALSE 20243
// begin wait ( 0 0$1 ) ;
20224: LD_INT 35
20226: PPUSH
20227: CALL_OW 67
// SetClass ( human , 1 ) ;
20231: LD_VAR 0 2
20235: PPUSH
20236: LD_INT 1
20238: PPUSH
20239: CALL_OW 336
// end ; end ;
20243: PPOPN 3
20245: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
20246: LD_VAR 0 1
20250: PUSH
20251: LD_INT 1
20253: EQUAL
20254: PUSH
20255: LD_VAR 0 2
20259: PUSH
20260: LD_INT 2
20262: EQUAL
20263: AND
20264: PUSH
20265: LD_INT 1
20267: PPUSH
20268: LD_INT 2
20270: PPUSH
20271: CALL_OW 81
20275: PUSH
20276: LD_INT 1
20278: EQUAL
20279: AND
20280: IFFALSE 20301
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
20282: LD_EXP 24
20286: PPUSH
20287: LD_STRING D6b-Pow-1
20289: PPUSH
20290: CALL_OW 94
// YouLost ( Powell ) ;
20294: LD_STRING Powell
20296: PPUSH
20297: CALL_OW 104
// end ; end ;
20301: PPOPN 2
20303: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
20304: LD_VAR 0 1
20308: PPUSH
20309: CALL_OW 255
20313: PUSH
20314: LD_INT 3
20316: EQUAL
20317: PUSH
20318: LD_VAR 0 1
20322: PPUSH
20323: CALL_OW 247
20327: PUSH
20328: LD_INT 3
20330: EQUAL
20331: AND
20332: IFFALSE 21024
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 266
20343: PUSH
20344: LD_INT 31
20346: EQUAL
20347: PUSH
20348: LD_VAR 0 1
20352: PPUSH
20353: CALL_OW 266
20357: PUSH
20358: LD_INT 32
20360: EQUAL
20361: OR
20362: PUSH
20363: LD_VAR 0 1
20367: PPUSH
20368: CALL_OW 266
20372: PUSH
20373: LD_INT 36
20375: EQUAL
20376: OR
20377: PUSH
20378: LD_VAR 0 1
20382: PPUSH
20383: CALL_OW 266
20387: PUSH
20388: LD_INT 0
20390: EQUAL
20391: OR
20392: PUSH
20393: LD_VAR 0 1
20397: PPUSH
20398: CALL_OW 266
20402: PUSH
20403: LD_INT 24
20405: EQUAL
20406: OR
20407: PUSH
20408: LD_VAR 0 1
20412: PPUSH
20413: CALL_OW 266
20417: PUSH
20418: LD_INT 17
20420: EQUAL
20421: OR
20422: PUSH
20423: LD_VAR 0 1
20427: PPUSH
20428: CALL_OW 266
20432: PUSH
20433: LD_INT 25
20435: EQUAL
20436: OR
20437: PUSH
20438: LD_VAR 0 1
20442: PPUSH
20443: CALL_OW 266
20447: PUSH
20448: LD_INT 19
20450: EQUAL
20451: OR
20452: PUSH
20453: LD_VAR 0 1
20457: PPUSH
20458: CALL_OW 266
20462: PUSH
20463: LD_INT 20
20465: EQUAL
20466: OR
20467: PUSH
20468: LD_VAR 0 1
20472: PPUSH
20473: CALL_OW 266
20477: PUSH
20478: LD_INT 18
20480: EQUAL
20481: OR
20482: PUSH
20483: LD_VAR 0 1
20487: PPUSH
20488: CALL_OW 266
20492: PUSH
20493: LD_INT 21
20495: EQUAL
20496: OR
20497: PUSH
20498: LD_VAR 0 1
20502: PPUSH
20503: CALL_OW 266
20507: PUSH
20508: LD_INT 23
20510: EQUAL
20511: OR
20512: PUSH
20513: LD_VAR 0 1
20517: PPUSH
20518: CALL_OW 266
20522: PUSH
20523: LD_INT 16
20525: EQUAL
20526: OR
20527: PUSH
20528: LD_VAR 0 1
20532: PPUSH
20533: CALL_OW 266
20537: PUSH
20538: LD_INT 6
20540: EQUAL
20541: OR
20542: PUSH
20543: LD_VAR 0 1
20547: PPUSH
20548: CALL_OW 266
20552: PUSH
20553: LD_INT 29
20555: EQUAL
20556: OR
20557: PUSH
20558: LD_VAR 0 1
20562: PPUSH
20563: CALL_OW 266
20567: PUSH
20568: LD_INT 26
20570: EQUAL
20571: OR
20572: PUSH
20573: LD_VAR 0 1
20577: PPUSH
20578: CALL_OW 266
20582: PUSH
20583: LD_INT 30
20585: EQUAL
20586: OR
20587: PUSH
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 266
20597: PUSH
20598: LD_INT 28
20600: EQUAL
20601: OR
20602: PUSH
20603: LD_VAR 0 1
20607: PPUSH
20608: CALL_OW 266
20612: PUSH
20613: LD_INT 27
20615: EQUAL
20616: OR
20617: PUSH
20618: LD_VAR 0 1
20622: PPUSH
20623: CALL_OW 266
20627: PUSH
20628: LD_INT 33
20630: EQUAL
20631: OR
20632: PUSH
20633: LD_VAR 0 1
20637: PPUSH
20638: CALL_OW 266
20642: PUSH
20643: LD_INT 2
20645: EQUAL
20646: OR
20647: PUSH
20648: LD_VAR 0 1
20652: PPUSH
20653: CALL_OW 266
20657: PUSH
20658: LD_INT 4
20660: EQUAL
20661: OR
20662: IFFALSE 20748
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20664: LD_ADDR_EXP 41
20668: PUSH
20669: LD_EXP 41
20673: PUSH
20674: LD_VAR 0 1
20678: PPUSH
20679: CALL_OW 266
20683: ADD
20684: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20685: LD_ADDR_EXP 41
20689: PUSH
20690: LD_EXP 41
20694: PUSH
20695: LD_VAR 0 1
20699: PPUSH
20700: CALL_OW 250
20704: ADD
20705: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20706: LD_ADDR_EXP 41
20710: PUSH
20711: LD_EXP 41
20715: PUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 251
20725: ADD
20726: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20727: LD_ADDR_EXP 41
20731: PUSH
20732: LD_EXP 41
20736: PUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 254
20746: ADD
20747: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20748: LD_VAR 0 1
20752: PPUSH
20753: CALL_OW 266
20757: PUSH
20758: LD_INT 1
20760: EQUAL
20761: IFFALSE 20840
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20763: LD_ADDR_EXP 41
20767: PUSH
20768: LD_EXP 41
20772: PUSH
20773: LD_INT 0
20775: ADD
20776: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20777: LD_ADDR_EXP 41
20781: PUSH
20782: LD_EXP 41
20786: PUSH
20787: LD_VAR 0 1
20791: PPUSH
20792: CALL_OW 250
20796: ADD
20797: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20798: LD_ADDR_EXP 41
20802: PUSH
20803: LD_EXP 41
20807: PUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 251
20817: ADD
20818: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20819: LD_ADDR_EXP 41
20823: PUSH
20824: LD_EXP 41
20828: PUSH
20829: LD_VAR 0 1
20833: PPUSH
20834: CALL_OW 254
20838: ADD
20839: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20840: LD_VAR 0 1
20844: PPUSH
20845: CALL_OW 266
20849: PUSH
20850: LD_INT 3
20852: EQUAL
20853: IFFALSE 20932
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20855: LD_ADDR_EXP 41
20859: PUSH
20860: LD_EXP 41
20864: PUSH
20865: LD_INT 2
20867: ADD
20868: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20869: LD_ADDR_EXP 41
20873: PUSH
20874: LD_EXP 41
20878: PUSH
20879: LD_VAR 0 1
20883: PPUSH
20884: CALL_OW 250
20888: ADD
20889: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20890: LD_ADDR_EXP 41
20894: PUSH
20895: LD_EXP 41
20899: PUSH
20900: LD_VAR 0 1
20904: PPUSH
20905: CALL_OW 251
20909: ADD
20910: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20911: LD_ADDR_EXP 41
20915: PUSH
20916: LD_EXP 41
20920: PUSH
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 254
20930: ADD
20931: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20932: LD_VAR 0 1
20936: PPUSH
20937: CALL_OW 266
20941: PUSH
20942: LD_INT 5
20944: EQUAL
20945: IFFALSE 21024
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20947: LD_ADDR_EXP 41
20951: PUSH
20952: LD_EXP 41
20956: PUSH
20957: LD_INT 4
20959: ADD
20960: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20961: LD_ADDR_EXP 41
20965: PUSH
20966: LD_EXP 41
20970: PUSH
20971: LD_VAR 0 1
20975: PPUSH
20976: CALL_OW 250
20980: ADD
20981: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20982: LD_ADDR_EXP 41
20986: PUSH
20987: LD_EXP 41
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 251
21001: ADD
21002: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
21003: LD_ADDR_EXP 41
21007: PUSH
21008: LD_EXP 41
21012: PUSH
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 254
21022: ADD
21023: ST_TO_ADDR
// end ; end ; end ;
21024: PPOPN 1
21026: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
21027: LD_ADDR_OWVAR 57
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// fastEnd = 1 ;
21035: LD_ADDR_EXP 53
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// FinishMission ;
21043: CALL 22774 0 0
// end ; end_of_file
21047: PPOPN 1
21049: END
// export function PrepareNature ; var i , un ; begin
21050: LD_INT 0
21052: PPUSH
21053: PPUSH
21054: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
21055: LD_ADDR_VAR 0 2
21059: PUSH
21060: DOUBLE
21061: LD_INT 1
21063: DEC
21064: ST_TO_ADDR
21065: LD_OWVAR 67
21069: PUSH
21070: LD_INT 1
21072: PPUSH
21073: LD_INT 5
21075: PPUSH
21076: CALL_OW 12
21080: PLUS
21081: PUSH
21082: FOR_TO
21083: IFFALSE 21228
// begin hc_sex = sex_male ;
21085: LD_ADDR_OWVAR 27
21089: PUSH
21090: LD_INT 1
21092: ST_TO_ADDR
// uc_side = 0 ;
21093: LD_ADDR_OWVAR 20
21097: PUSH
21098: LD_INT 0
21100: ST_TO_ADDR
// uc_nation = nation_nature ;
21101: LD_ADDR_OWVAR 21
21105: PUSH
21106: LD_INT 0
21108: ST_TO_ADDR
// hc_class = class_apeman ;
21109: LD_ADDR_OWVAR 28
21113: PUSH
21114: LD_INT 12
21116: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
21117: LD_ADDR_OWVAR 31
21121: PUSH
21122: LD_INT 2
21124: PPUSH
21125: LD_INT 7
21127: PPUSH
21128: CALL_OW 12
21132: PUSH
21133: LD_OWVAR 67
21137: PLUS
21138: PUSH
21139: LD_INT 2
21141: PPUSH
21142: LD_INT 10
21144: PPUSH
21145: CALL_OW 12
21149: PUSH
21150: LD_INT 2
21152: PPUSH
21153: LD_INT 10
21155: PPUSH
21156: CALL_OW 12
21160: PUSH
21161: LD_INT 2
21163: PPUSH
21164: LD_INT 10
21166: PPUSH
21167: CALL_OW 12
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: LIST
21176: LIST
21177: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21178: LD_ADDR_OWVAR 35
21182: PUSH
21183: LD_INT 5
21185: NEG
21186: PPUSH
21187: LD_INT 5
21189: PPUSH
21190: CALL_OW 12
21194: PUSH
21195: LD_OWVAR 67
21199: MUL
21200: ST_TO_ADDR
// un = CreateHuman ;
21201: LD_ADDR_VAR 0 3
21205: PUSH
21206: CALL_OW 44
21210: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
21211: LD_VAR 0 3
21215: PPUSH
21216: LD_INT 5
21218: PPUSH
21219: LD_INT 0
21221: PPUSH
21222: CALL_OW 49
// end ;
21226: GO 21082
21228: POP
21229: POP
// for i = 1 to Difficulty + 2 do
21230: LD_ADDR_VAR 0 2
21234: PUSH
21235: DOUBLE
21236: LD_INT 1
21238: DEC
21239: ST_TO_ADDR
21240: LD_OWVAR 67
21244: PUSH
21245: LD_INT 2
21247: PLUS
21248: PUSH
21249: FOR_TO
21250: IFFALSE 21359
// begin hc_sex = sex_male ;
21252: LD_ADDR_OWVAR 27
21256: PUSH
21257: LD_INT 1
21259: ST_TO_ADDR
// uc_side = 0 ;
21260: LD_ADDR_OWVAR 20
21264: PUSH
21265: LD_INT 0
21267: ST_TO_ADDR
// uc_nation = nation_nature ;
21268: LD_ADDR_OWVAR 21
21272: PUSH
21273: LD_INT 0
21275: ST_TO_ADDR
// hc_class = class_tiger ;
21276: LD_ADDR_OWVAR 28
21280: PUSH
21281: LD_INT 14
21283: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21284: LD_ADDR_OWVAR 31
21288: PUSH
21289: LD_EXP 36
21293: PUSH
21294: LD_INT 0
21296: PUSH
21297: LD_INT 0
21299: PUSH
21300: LD_INT 0
21302: PUSH
21303: EMPTY
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
21309: LD_ADDR_OWVAR 35
21313: PUSH
21314: LD_INT 5
21316: NEG
21317: PPUSH
21318: LD_INT 5
21320: PPUSH
21321: CALL_OW 12
21325: PUSH
21326: LD_OWVAR 67
21330: MUL
21331: ST_TO_ADDR
// un = CreateHuman ;
21332: LD_ADDR_VAR 0 3
21336: PUSH
21337: CALL_OW 44
21341: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21342: LD_VAR 0 3
21346: PPUSH
21347: LD_INT 6
21349: PPUSH
21350: LD_INT 0
21352: PPUSH
21353: CALL_OW 49
// end ;
21357: GO 21249
21359: POP
21360: POP
// for i = 1 to rand ( 3 , 4 ) do
21361: LD_ADDR_VAR 0 2
21365: PUSH
21366: DOUBLE
21367: LD_INT 1
21369: DEC
21370: ST_TO_ADDR
21371: LD_INT 3
21373: PPUSH
21374: LD_INT 4
21376: PPUSH
21377: CALL_OW 12
21381: PUSH
21382: FOR_TO
21383: IFFALSE 21477
// begin hc_sex = sex_male ;
21385: LD_ADDR_OWVAR 27
21389: PUSH
21390: LD_INT 1
21392: ST_TO_ADDR
// uc_side = 0 ;
21393: LD_ADDR_OWVAR 20
21397: PUSH
21398: LD_INT 0
21400: ST_TO_ADDR
// uc_nation = nation_nature ;
21401: LD_ADDR_OWVAR 21
21405: PUSH
21406: LD_INT 0
21408: ST_TO_ADDR
// hc_class = 18 ;
21409: LD_ADDR_OWVAR 28
21413: PUSH
21414: LD_INT 18
21416: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
21417: LD_ADDR_OWVAR 31
21421: PUSH
21422: LD_EXP 36
21426: PUSH
21427: LD_INT 0
21429: PUSH
21430: LD_INT 0
21432: PUSH
21433: LD_INT 0
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: ST_TO_ADDR
// hc_agressivity = 0 ;
21442: LD_ADDR_OWVAR 35
21446: PUSH
21447: LD_INT 0
21449: ST_TO_ADDR
// un = CreateHuman ;
21450: LD_ADDR_VAR 0 3
21454: PUSH
21455: CALL_OW 44
21459: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
21460: LD_VAR 0 3
21464: PPUSH
21465: LD_INT 6
21467: PPUSH
21468: LD_INT 0
21470: PPUSH
21471: CALL_OW 49
// end ;
21475: GO 21382
21477: POP
21478: POP
// end ; end_of_file
21479: LD_VAR 0 1
21483: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
21484: LD_EXP 45
21488: PUSH
21489: LD_INT 1
21491: EQUAL
21492: IFFALSE 21600
21494: GO 21496
21496: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
21497: LD_INT 7
21499: PPUSH
21500: LD_INT 5
21502: PPUSH
21503: LD_INT 4
21505: PPUSH
21506: LD_INT 6
21508: PPUSH
21509: CALL_OW 12
21513: PUSH
21514: LD_INT 6
21516: PPUSH
21517: LD_INT 8
21519: PPUSH
21520: CALL_OW 12
21524: PUSH
21525: LD_INT 7
21527: PPUSH
21528: LD_INT 9
21530: PPUSH
21531: CALL_OW 12
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_OWVAR 67
21545: ARRAY
21546: PPUSH
21547: LD_EXP 35
21551: PPUSH
21552: LD_EXP 36
21556: PPUSH
21557: CALL_OW 12
21561: PPUSH
21562: LD_INT 2
21564: PPUSH
21565: LD_INT 1
21567: PPUSH
21568: LD_INT 1
21570: PPUSH
21571: EMPTY
21572: PPUSH
21573: LD_INT 25
21575: PUSH
21576: LD_INT 26
21578: PUSH
21579: LD_INT 27
21581: PUSH
21582: LD_INT 28
21584: PUSH
21585: EMPTY
21586: LIST
21587: LIST
21588: LIST
21589: LIST
21590: PPUSH
21591: EMPTY
21592: PPUSH
21593: LD_INT 1
21595: PPUSH
21596: CALL 13031 0 11
21600: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
21601: LD_EXP 45
21605: PUSH
21606: LD_INT 1
21608: EQUAL
21609: IFFALSE 21745
21611: GO 21613
21613: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21614: LD_INT 5
21616: PPUSH
21617: LD_INT 2
21619: PPUSH
21620: LD_INT 7
21622: PPUSH
21623: LD_INT 9
21625: PPUSH
21626: CALL_OW 12
21630: PUSH
21631: LD_INT 8
21633: PPUSH
21634: LD_INT 10
21636: PPUSH
21637: CALL_OW 12
21641: PUSH
21642: LD_INT 9
21644: PPUSH
21645: LD_INT 12
21647: PPUSH
21648: CALL_OW 12
21652: PUSH
21653: EMPTY
21654: LIST
21655: LIST
21656: LIST
21657: PUSH
21658: LD_OWVAR 67
21662: ARRAY
21663: PPUSH
21664: LD_INT 0
21666: PPUSH
21667: LD_INT 0
21669: PPUSH
21670: LD_INT 3
21672: PPUSH
21673: LD_INT 4
21675: PPUSH
21676: CALL_OW 12
21680: PUSH
21681: LD_INT 4
21683: PPUSH
21684: LD_INT 5
21686: PPUSH
21687: CALL_OW 12
21691: PUSH
21692: LD_INT 5
21694: PPUSH
21695: LD_INT 6
21697: PPUSH
21698: CALL_OW 12
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: LIST
21707: PUSH
21708: LD_OWVAR 67
21712: ARRAY
21713: PPUSH
21714: LD_INT 0
21716: PPUSH
21717: LD_EXP 35
21721: PPUSH
21722: LD_EXP 36
21726: PPUSH
21727: CALL_OW 12
21731: PPUSH
21732: LD_INT 7
21734: PPUSH
21735: LD_INT 9
21737: PPUSH
21738: LD_INT 1
21740: PPUSH
21741: CALL 14735 0 11
21745: END
// every 4 4$30 trigger joinEpsilon = 1 do
21746: LD_EXP 28
21750: PUSH
21751: LD_INT 1
21753: EQUAL
21754: IFFALSE 21816
21756: GO 21758
21758: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 2 , 4 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21759: LD_INT 6
21761: PPUSH
21762: LD_INT 3
21764: PPUSH
21765: LD_INT 2
21767: PPUSH
21768: LD_INT 4
21770: PPUSH
21771: CALL_OW 12
21775: PPUSH
21776: LD_INT 0
21778: PPUSH
21779: LD_INT 0
21781: PPUSH
21782: LD_INT 0
21784: PPUSH
21785: LD_INT 0
21787: PPUSH
21788: LD_EXP 35
21792: PPUSH
21793: LD_EXP 36
21797: PPUSH
21798: CALL_OW 12
21802: PPUSH
21803: LD_INT 17
21805: PPUSH
21806: LD_INT 18
21808: PPUSH
21809: LD_INT 1
21811: PPUSH
21812: CALL 14735 0 11
21816: END
// every 4 4$30 trigger joinEpsilon = 1 do
21817: LD_EXP 28
21821: PUSH
21822: LD_INT 1
21824: EQUAL
21825: IFFALSE 21907
21827: GO 21829
21829: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21830: LD_INT 17
21832: PPUSH
21833: LD_INT 6
21835: PPUSH
21836: LD_INT 1
21838: PPUSH
21839: LD_INT 3
21841: PPUSH
21842: CALL_OW 12
21846: PPUSH
21847: LD_EXP 35
21851: PPUSH
21852: LD_EXP 36
21856: PPUSH
21857: CALL_OW 12
21861: PPUSH
21862: LD_INT 3
21864: PPUSH
21865: LD_INT 1
21867: PPUSH
21868: LD_INT 1
21870: PUSH
21871: LD_INT 3
21873: PUSH
21874: EMPTY
21875: LIST
21876: LIST
21877: PPUSH
21878: LD_INT 43
21880: PUSH
21881: LD_INT 44
21883: PUSH
21884: LD_INT 45
21886: PUSH
21887: LD_INT 46
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: PPUSH
21896: EMPTY
21897: PPUSH
21898: EMPTY
21899: PPUSH
21900: LD_INT 1
21902: PPUSH
21903: CALL 13031 0 11
21907: END
// every 8 8$30 trigger joinEpsilon = 1 do
21908: LD_EXP 28
21912: PUSH
21913: LD_INT 1
21915: EQUAL
21916: IFFALSE 21986
21918: GO 21920
21920: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 3 , 6 ) , 0 , rand ( 3 , 5 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21921: LD_INT 6
21923: PPUSH
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 3
21929: PPUSH
21930: LD_INT 6
21932: PPUSH
21933: CALL_OW 12
21937: PPUSH
21938: LD_INT 0
21940: PPUSH
21941: LD_INT 3
21943: PPUSH
21944: LD_INT 5
21946: PPUSH
21947: CALL_OW 12
21951: PPUSH
21952: LD_INT 0
21954: PPUSH
21955: LD_INT 0
21957: PPUSH
21958: LD_EXP 35
21962: PPUSH
21963: LD_EXP 36
21967: PPUSH
21968: CALL_OW 12
21972: PPUSH
21973: LD_INT 17
21975: PPUSH
21976: LD_INT 18
21978: PPUSH
21979: LD_INT 1
21981: PPUSH
21982: CALL 14735 0 11
21986: END
// every 8 8$30 trigger joinEpsilon = 1 do
21987: LD_EXP 28
21991: PUSH
21992: LD_INT 1
21994: EQUAL
21995: IFFALSE 22077
21997: GO 21999
21999: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22000: LD_INT 17
22002: PPUSH
22003: LD_INT 6
22005: PPUSH
22006: LD_INT 1
22008: PPUSH
22009: LD_INT 5
22011: PPUSH
22012: CALL_OW 12
22016: PPUSH
22017: LD_EXP 35
22021: PPUSH
22022: LD_EXP 36
22026: PPUSH
22027: CALL_OW 12
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: LD_INT 1
22040: PUSH
22041: LD_INT 3
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PPUSH
22048: LD_INT 43
22050: PUSH
22051: LD_INT 44
22053: PUSH
22054: LD_INT 45
22056: PUSH
22057: LD_INT 46
22059: PUSH
22060: EMPTY
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: PPUSH
22066: EMPTY
22067: PPUSH
22068: EMPTY
22069: PPUSH
22070: LD_INT 1
22072: PPUSH
22073: CALL 13031 0 11
22077: END
// every 15 15$30 trigger joinEpsilon = 1 do
22078: LD_EXP 28
22082: PUSH
22083: LD_INT 1
22085: EQUAL
22086: IFFALSE 22156
22088: GO 22090
22090: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22091: LD_INT 6
22093: PPUSH
22094: LD_INT 3
22096: PPUSH
22097: LD_INT 5
22099: PPUSH
22100: LD_INT 8
22102: PPUSH
22103: CALL_OW 12
22107: PPUSH
22108: LD_INT 0
22110: PPUSH
22111: LD_INT 3
22113: PPUSH
22114: LD_INT 8
22116: PPUSH
22117: CALL_OW 12
22121: PPUSH
22122: LD_INT 0
22124: PPUSH
22125: LD_INT 0
22127: PPUSH
22128: LD_EXP 35
22132: PPUSH
22133: LD_EXP 36
22137: PPUSH
22138: CALL_OW 12
22142: PPUSH
22143: LD_INT 17
22145: PPUSH
22146: LD_INT 18
22148: PPUSH
22149: LD_INT 1
22151: PPUSH
22152: CALL 14735 0 11
22156: END
// every 15 15$30 trigger joinEpsilon = 1 do
22157: LD_EXP 28
22161: PUSH
22162: LD_INT 1
22164: EQUAL
22165: IFFALSE 22247
22167: GO 22169
22169: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
22170: LD_INT 17
22172: PPUSH
22173: LD_INT 6
22175: PPUSH
22176: LD_INT 5
22178: PPUSH
22179: LD_INT 8
22181: PPUSH
22182: CALL_OW 12
22186: PPUSH
22187: LD_EXP 35
22191: PPUSH
22192: LD_EXP 36
22196: PPUSH
22197: CALL_OW 12
22201: PPUSH
22202: LD_INT 3
22204: PPUSH
22205: LD_INT 1
22207: PPUSH
22208: LD_INT 1
22210: PUSH
22211: LD_INT 3
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PPUSH
22218: LD_INT 43
22220: PUSH
22221: LD_INT 44
22223: PUSH
22224: LD_INT 45
22226: PUSH
22227: LD_INT 46
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: PPUSH
22236: EMPTY
22237: PPUSH
22238: EMPTY
22239: PPUSH
22240: LD_INT 1
22242: PPUSH
22243: CALL 13031 0 11
22247: END
// every 27 27$30 trigger joinEpsilon = 1 do
22248: LD_EXP 28
22252: PUSH
22253: LD_INT 1
22255: EQUAL
22256: IFFALSE 22326
22258: GO 22260
22260: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
22261: LD_INT 6
22263: PPUSH
22264: LD_INT 3
22266: PPUSH
22267: LD_INT 7
22269: PPUSH
22270: LD_INT 10
22272: PPUSH
22273: CALL_OW 12
22277: PPUSH
22278: LD_INT 0
22280: PPUSH
22281: LD_INT 3
22283: PPUSH
22284: LD_INT 8
22286: PPUSH
22287: CALL_OW 12
22291: PPUSH
22292: LD_INT 0
22294: PPUSH
22295: LD_INT 0
22297: PPUSH
22298: LD_EXP 35
22302: PPUSH
22303: LD_EXP 36
22307: PPUSH
22308: CALL_OW 12
22312: PPUSH
22313: LD_INT 17
22315: PPUSH
22316: LD_INT 18
22318: PPUSH
22319: LD_INT 1
22321: PPUSH
22322: CALL 14735 0 11
22326: END
// every 27 27$30 trigger joinEpsilon = 1 do
22327: LD_EXP 28
22331: PUSH
22332: LD_INT 1
22334: EQUAL
22335: IFFALSE 22417
22337: GO 22339
22339: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
22340: LD_INT 17
22342: PPUSH
22343: LD_INT 6
22345: PPUSH
22346: LD_INT 5
22348: PPUSH
22349: LD_INT 8
22351: PPUSH
22352: CALL_OW 12
22356: PPUSH
22357: LD_EXP 35
22361: PPUSH
22362: LD_EXP 36
22366: PPUSH
22367: CALL_OW 12
22371: PPUSH
22372: LD_INT 3
22374: PPUSH
22375: LD_INT 1
22377: PPUSH
22378: LD_INT 1
22380: PUSH
22381: LD_INT 3
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PPUSH
22388: LD_INT 43
22390: PUSH
22391: LD_INT 44
22393: PUSH
22394: LD_INT 45
22396: PUSH
22397: LD_INT 46
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: EMPTY
22407: PPUSH
22408: EMPTY
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL 13031 0 11
22417: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22418: LD_INT 54
22420: PPUSH
22421: LD_INT 1
22423: PPUSH
22424: CALL_OW 321
22428: PUSH
22429: LD_INT 2
22431: EQUAL
22432: PUSH
22433: LD_INT 55
22435: PPUSH
22436: LD_INT 1
22438: PPUSH
22439: CALL_OW 321
22443: PUSH
22444: LD_INT 2
22446: EQUAL
22447: AND
22448: PUSH
22449: LD_INT 21
22451: PPUSH
22452: LD_INT 1
22454: PPUSH
22455: CALL_OW 321
22459: PUSH
22460: LD_INT 2
22462: EQUAL
22463: AND
22464: PUSH
22465: LD_INT 22
22467: PPUSH
22468: LD_INT 1
22470: PPUSH
22471: CALL_OW 321
22475: PUSH
22476: LD_INT 2
22478: EQUAL
22479: AND
22480: PUSH
22481: LD_INT 12
22483: PPUSH
22484: LD_INT 1
22486: PPUSH
22487: CALL_OW 321
22491: PUSH
22492: LD_INT 1
22494: EQUAL
22495: PUSH
22496: LD_INT 32
22498: PPUSH
22499: LD_INT 1
22501: PPUSH
22502: CALL_OW 321
22506: PUSH
22507: LD_INT 1
22509: EQUAL
22510: OR
22511: PUSH
22512: EMPTY
22513: LIST
22514: AND
22515: PUSH
22516: LD_EXP 47
22520: PUSH
22521: LD_INT 1
22523: EQUAL
22524: AND
22525: PUSH
22526: LD_INT 22
22528: PUSH
22529: LD_INT 3
22531: PUSH
22532: EMPTY
22533: LIST
22534: LIST
22535: PUSH
22536: LD_INT 21
22538: PUSH
22539: LD_INT 1
22541: PUSH
22542: EMPTY
22543: LIST
22544: LIST
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PPUSH
22550: CALL_OW 69
22554: PUSH
22555: LD_INT 0
22557: EQUAL
22558: AND
22559: IFFALSE 22615
22561: GO 22563
22563: DISABLE
// begin case query ( QEndMission ) of 1 :
22564: LD_STRING QEndMission
22566: PPUSH
22567: CALL_OW 97
22571: PUSH
22572: LD_INT 1
22574: DOUBLE
22575: EQUAL
22576: IFTRUE 22580
22578: GO 22591
22580: POP
// begin end_the_mission_allowed = true ;
22581: LD_ADDR_OWVAR 57
22585: PUSH
22586: LD_INT 1
22588: ST_TO_ADDR
// end ; 2 :
22589: GO 22615
22591: LD_INT 2
22593: DOUBLE
22594: EQUAL
22595: IFTRUE 22599
22597: GO 22614
22599: POP
// begin fastEnd = 1 ;
22600: LD_ADDR_EXP 53
22604: PUSH
22605: LD_INT 1
22607: ST_TO_ADDR
// FinishMission ;
22608: CALL 22774 0 0
// end ; end ;
22612: GO 22615
22614: POP
// end ;
22615: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
22616: LD_INT 54
22618: PPUSH
22619: LD_INT 1
22621: PPUSH
22622: CALL_OW 321
22626: PUSH
22627: LD_INT 2
22629: EQUAL
22630: PUSH
22631: LD_INT 55
22633: PPUSH
22634: LD_INT 1
22636: PPUSH
22637: CALL_OW 321
22641: PUSH
22642: LD_INT 2
22644: EQUAL
22645: AND
22646: PUSH
22647: LD_INT 21
22649: PPUSH
22650: LD_INT 1
22652: PPUSH
22653: CALL_OW 321
22657: PUSH
22658: LD_INT 2
22660: EQUAL
22661: AND
22662: PUSH
22663: LD_INT 22
22665: PPUSH
22666: LD_INT 1
22668: PPUSH
22669: CALL_OW 321
22673: PUSH
22674: LD_INT 2
22676: EQUAL
22677: AND
22678: PUSH
22679: LD_INT 12
22681: PPUSH
22682: LD_INT 1
22684: PPUSH
22685: CALL_OW 321
22689: PUSH
22690: LD_INT 2
22692: EQUAL
22693: AND
22694: PUSH
22695: LD_INT 32
22697: PPUSH
22698: LD_INT 1
22700: PPUSH
22701: CALL_OW 321
22705: PUSH
22706: LD_INT 2
22708: EQUAL
22709: AND
22710: PUSH
22711: LD_EXP 53
22715: PUSH
22716: LD_INT 0
22718: EQUAL
22719: AND
22720: PUSH
22721: LD_EXP 47
22725: PUSH
22726: LD_INT 1
22728: EQUAL
22729: AND
22730: PUSH
22731: LD_INT 22
22733: PUSH
22734: LD_INT 3
22736: PUSH
22737: EMPTY
22738: LIST
22739: LIST
22740: PUSH
22741: LD_INT 21
22743: PUSH
22744: LD_INT 1
22746: PUSH
22747: EMPTY
22748: LIST
22749: LIST
22750: PUSH
22751: EMPTY
22752: LIST
22753: LIST
22754: PPUSH
22755: CALL_OW 69
22759: PUSH
22760: LD_INT 0
22762: EQUAL
22763: AND
22764: IFFALSE 22773
22766: GO 22768
22768: DISABLE
// FinishMission ;
22769: CALL 22774 0 0
22773: END
// export function FinishMission ; begin
22774: LD_INT 0
22776: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22777: LD_EXP 49
22781: PPUSH
22782: LD_STRING 10_KhatamStatus_1
22784: PPUSH
22785: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22789: LD_INT 12
22791: PPUSH
22792: LD_INT 1
22794: PPUSH
22795: CALL_OW 321
22799: PUSH
22800: LD_INT 2
22802: EQUAL
22803: IFFALSE 22817
// begin AddMedal ( sights , 1 ) ;
22805: LD_STRING sights
22807: PPUSH
22808: LD_INT 1
22810: PPUSH
22811: CALL_OW 101
// end else
22815: GO 22828
// begin AddMedal ( sights , - 1 ) ;
22817: LD_STRING sights
22819: PPUSH
22820: LD_INT 1
22822: NEG
22823: PPUSH
22824: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22828: LD_INT 32
22830: PPUSH
22831: LD_INT 1
22833: PPUSH
22834: CALL_OW 321
22838: PUSH
22839: LD_INT 2
22841: EQUAL
22842: IFFALSE 22856
// begin AddMedal ( computers , 1 ) ;
22844: LD_STRING computers
22846: PPUSH
22847: LD_INT 1
22849: PPUSH
22850: CALL_OW 101
// end else
22854: GO 22867
// begin AddMedal ( computers , - 1 ) ;
22856: LD_STRING computers
22858: PPUSH
22859: LD_INT 1
22861: NEG
22862: PPUSH
22863: CALL_OW 101
// end ; if arabianEscape = 0 then
22867: LD_EXP 46
22871: PUSH
22872: LD_INT 0
22874: EQUAL
22875: IFFALSE 22899
// begin AddMedal ( renegades , 2 ) ;
22877: LD_STRING renegades
22879: PPUSH
22880: LD_INT 2
22882: PPUSH
22883: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22887: LD_INT 0
22889: PPUSH
22890: LD_STRING 10_ScientistsEscape_1
22892: PPUSH
22893: CALL_OW 39
// end else
22897: GO 22910
// begin AddMedal ( renegades , - 1 ) ;
22899: LD_STRING renegades
22901: PPUSH
22902: LD_INT 1
22904: NEG
22905: PPUSH
22906: CALL_OW 101
// end ; SaveEpsilonBase ;
22910: CALL 23500 0 0
// Query ( kaj ) ;
22914: LD_STRING kaj
22916: PPUSH
22917: CALL_OW 97
// GiveMedals ( Main ) ;
22921: LD_STRING Main
22923: PPUSH
22924: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22928: LD_INT 22
22930: PUSH
22931: LD_INT 1
22933: PUSH
22934: EMPTY
22935: LIST
22936: LIST
22937: PUSH
22938: LD_INT 23
22940: PUSH
22941: LD_INT 1
22943: PUSH
22944: EMPTY
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 21
22950: PUSH
22951: LD_INT 1
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PUSH
22958: LD_INT 2
22960: PUSH
22961: LD_INT 25
22963: PUSH
22964: LD_INT 1
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 25
22973: PUSH
22974: LD_INT 2
22976: PUSH
22977: EMPTY
22978: LIST
22979: LIST
22980: PUSH
22981: LD_INT 25
22983: PUSH
22984: LD_INT 3
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PUSH
22991: LD_INT 25
22993: PUSH
22994: LD_INT 4
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: PUSH
23001: LD_INT 25
23003: PUSH
23004: LD_INT 5
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: EMPTY
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: PUSH
23019: EMPTY
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: PPUSH
23030: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
23034: LD_EXP 1
23038: PPUSH
23039: LD_EXP 50
23043: PUSH
23044: LD_STRING JMM
23046: STR
23047: PPUSH
23048: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
23052: LD_EXP 2
23056: PPUSH
23057: LD_EXP 50
23061: PUSH
23062: LD_STRING Brown
23064: STR
23065: PPUSH
23066: CALL 7578 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
23070: LD_EXP 3
23074: PPUSH
23075: LD_EXP 50
23079: PUSH
23080: LD_STRING Donaldson
23082: STR
23083: PPUSH
23084: CALL 7578 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
23088: LD_EXP 4
23092: PPUSH
23093: LD_EXP 50
23097: PUSH
23098: LD_STRING Bobby
23100: STR
23101: PPUSH
23102: CALL 7578 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
23106: LD_EXP 5
23110: PPUSH
23111: LD_EXP 50
23115: PUSH
23116: LD_STRING Cyrus
23118: STR
23119: PPUSH
23120: CALL 7578 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
23124: LD_EXP 6
23128: PPUSH
23129: LD_EXP 50
23133: PUSH
23134: LD_STRING Lisa
23136: STR
23137: PPUSH
23138: CALL 7578 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
23142: LD_EXP 7
23146: PPUSH
23147: LD_EXP 50
23151: PUSH
23152: LD_STRING Frank
23154: STR
23155: PPUSH
23156: CALL 7578 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
23160: LD_EXP 8
23164: PPUSH
23165: LD_EXP 50
23169: PUSH
23170: LD_STRING Kikuchi
23172: STR
23173: PPUSH
23174: CALL 7578 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
23178: LD_EXP 9
23182: PPUSH
23183: LD_EXP 50
23187: PUSH
23188: LD_STRING Houten
23190: STR
23191: PPUSH
23192: CALL 7578 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
23196: LD_EXP 10
23200: PPUSH
23201: LD_EXP 50
23205: PUSH
23206: LD_STRING Gary
23208: STR
23209: PPUSH
23210: CALL 7578 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
23214: LD_EXP 11
23218: PPUSH
23219: LD_EXP 50
23223: PUSH
23224: LD_STRING Simms
23226: STR
23227: PPUSH
23228: CALL 7578 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
23232: LD_EXP 12
23236: PPUSH
23237: LD_EXP 50
23241: PUSH
23242: LD_STRING Denis
23244: STR
23245: PPUSH
23246: CALL 7578 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
23250: LD_EXP 13
23254: PPUSH
23255: LD_EXP 50
23259: PUSH
23260: LD_STRING Joan
23262: STR
23263: PPUSH
23264: CALL 7578 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
23268: LD_EXP 15
23272: PPUSH
23273: LD_EXP 50
23277: PUSH
23278: LD_STRING Gladstone
23280: STR
23281: PPUSH
23282: CALL 7578 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
23286: LD_EXP 17
23290: PPUSH
23291: LD_EXP 50
23295: PUSH
23296: LD_STRING DeltaDoctor
23298: STR
23299: PPUSH
23300: CALL 7578 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
23304: LD_INT 50
23306: PUSH
23307: EMPTY
23308: LIST
23309: PUSH
23310: LD_INT 22
23312: PUSH
23313: LD_INT 1
23315: PUSH
23316: EMPTY
23317: LIST
23318: LIST
23319: PUSH
23320: LD_INT 21
23322: PUSH
23323: LD_INT 1
23325: PUSH
23326: EMPTY
23327: LIST
23328: LIST
23329: PUSH
23330: LD_INT 2
23332: PUSH
23333: LD_INT 25
23335: PUSH
23336: LD_INT 1
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 25
23345: PUSH
23346: LD_INT 2
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: LD_INT 25
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 25
23365: PUSH
23366: LD_INT 4
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: EMPTY
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: EMPTY
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: PPUSH
23386: CALL_OW 69
23390: PUSH
23391: LD_EXP 1
23395: PUSH
23396: LD_EXP 2
23400: PUSH
23401: LD_EXP 3
23405: PUSH
23406: LD_EXP 4
23410: PUSH
23411: LD_EXP 5
23415: PUSH
23416: LD_EXP 6
23420: PUSH
23421: LD_EXP 7
23425: PUSH
23426: LD_EXP 15
23430: PUSH
23431: LD_EXP 8
23435: PUSH
23436: LD_EXP 12
23440: PUSH
23441: LD_EXP 13
23445: PUSH
23446: LD_EXP 9
23450: PUSH
23451: LD_EXP 11
23455: PUSH
23456: LD_EXP 10
23460: PUSH
23461: LD_EXP 17
23465: PUSH
23466: EMPTY
23467: LIST
23468: LIST
23469: LIST
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: DIFF
23483: PPUSH
23484: LD_STRING 10_other_survivors
23486: PPUSH
23487: CALL_OW 38
// YouWin ;
23491: CALL_OW 103
// end ;
23495: LD_VAR 0 1
23499: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
23500: LD_INT 0
23502: PPUSH
23503: PPUSH
23504: PPUSH
23505: PPUSH
// epsilonBase = [ ] ;
23506: LD_ADDR_VAR 0 2
23510: PUSH
23511: EMPTY
23512: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
23513: LD_ADDR_VAR 0 3
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 1
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 21
23530: PUSH
23531: LD_INT 3
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: LD_INT 50
23540: PUSH
23541: EMPTY
23542: LIST
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: ST_TO_ADDR
// for i in buildings do
23554: LD_ADDR_VAR 0 4
23558: PUSH
23559: LD_VAR 0 3
23563: PUSH
23564: FOR_IN
23565: IFFALSE 24002
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
23567: LD_VAR 0 4
23571: PPUSH
23572: CALL_OW 266
23576: PUSH
23577: LD_INT 6
23579: PUSH
23580: LD_INT 7
23582: PUSH
23583: LD_INT 8
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: LIST
23590: IN
23591: IFFALSE 23705
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
23593: LD_ADDR_VAR 0 2
23597: PUSH
23598: LD_VAR 0 2
23602: PUSH
23603: LD_VAR 0 4
23607: PPUSH
23608: CALL_OW 266
23612: PUSH
23613: LD_VAR 0 4
23617: PPUSH
23618: CALL_OW 250
23622: PUSH
23623: LD_VAR 0 4
23627: PPUSH
23628: CALL_OW 251
23632: PUSH
23633: LD_VAR 0 4
23637: PPUSH
23638: CALL_OW 254
23642: PUSH
23643: LD_VAR 0 4
23647: PPUSH
23648: CALL_OW 267
23652: PUSH
23653: LD_VAR 0 4
23657: PPUSH
23658: CALL_OW 248
23662: PUSH
23663: LD_VAR 0 4
23667: PPUSH
23668: LD_INT 1
23670: PPUSH
23671: CALL_OW 268
23675: PUSH
23676: LD_VAR 0 4
23680: PPUSH
23681: LD_INT 2
23683: PPUSH
23684: CALL_OW 268
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: LIST
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: PUSH
23699: EMPTY
23700: LIST
23701: ADD
23702: ST_TO_ADDR
23703: GO 24000
// if GetBType ( i ) = b_bunker then
23705: LD_VAR 0 4
23709: PPUSH
23710: CALL_OW 266
23714: PUSH
23715: LD_INT 32
23717: EQUAL
23718: IFFALSE 23815
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
23720: LD_ADDR_VAR 0 2
23724: PUSH
23725: LD_VAR 0 2
23729: PUSH
23730: LD_VAR 0 4
23734: PPUSH
23735: CALL_OW 266
23739: PUSH
23740: LD_VAR 0 4
23744: PPUSH
23745: CALL_OW 250
23749: PUSH
23750: LD_VAR 0 4
23754: PPUSH
23755: CALL_OW 251
23759: PUSH
23760: LD_VAR 0 4
23764: PPUSH
23765: CALL_OW 254
23769: PUSH
23770: LD_VAR 0 4
23774: PPUSH
23775: CALL_OW 267
23779: PUSH
23780: LD_VAR 0 4
23784: PPUSH
23785: CALL_OW 248
23789: PUSH
23790: LD_VAR 0 4
23794: PPUSH
23795: CALL_OW 269
23799: PUSH
23800: EMPTY
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: PUSH
23809: EMPTY
23810: LIST
23811: ADD
23812: ST_TO_ADDR
23813: GO 24000
// if GetBType ( i ) = b_factory then
23815: LD_VAR 0 4
23819: PPUSH
23820: CALL_OW 266
23824: PUSH
23825: LD_INT 3
23827: EQUAL
23828: IFFALSE 23918
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
23830: LD_ADDR_VAR 0 2
23834: PUSH
23835: LD_VAR 0 2
23839: PPUSH
23840: LD_INT 1
23842: PPUSH
23843: LD_VAR 0 4
23847: PPUSH
23848: CALL_OW 266
23852: PUSH
23853: LD_VAR 0 4
23857: PPUSH
23858: CALL_OW 250
23862: PUSH
23863: LD_VAR 0 4
23867: PPUSH
23868: CALL_OW 251
23872: PUSH
23873: LD_VAR 0 4
23877: PPUSH
23878: CALL_OW 254
23882: PUSH
23883: LD_VAR 0 4
23887: PPUSH
23888: CALL_OW 267
23892: PUSH
23893: LD_VAR 0 4
23897: PPUSH
23898: CALL_OW 248
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: PPUSH
23911: CALL_OW 2
23915: ST_TO_ADDR
23916: GO 24000
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23918: LD_ADDR_VAR 0 2
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: LD_VAR 0 4
23932: PPUSH
23933: CALL_OW 266
23937: PUSH
23938: LD_VAR 0 4
23942: PPUSH
23943: CALL_OW 250
23947: PUSH
23948: LD_VAR 0 4
23952: PPUSH
23953: CALL_OW 251
23957: PUSH
23958: LD_VAR 0 4
23962: PPUSH
23963: CALL_OW 254
23967: PUSH
23968: LD_VAR 0 4
23972: PPUSH
23973: CALL_OW 267
23977: PUSH
23978: LD_VAR 0 4
23982: PPUSH
23983: CALL_OW 248
23987: PUSH
23988: EMPTY
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: PUSH
23996: EMPTY
23997: LIST
23998: ADD
23999: ST_TO_ADDR
// end ;
24000: GO 23564
24002: POP
24003: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
24004: LD_VAR 0 2
24008: PPUSH
24009: LD_STRING 10_EpsilonBase
24011: PPUSH
24012: CALL_OW 39
// end ; end_of_file
24016: LD_VAR 0 1
24020: RET
// every 0 0$1 trigger IsDead ( JMM ) do
24021: LD_EXP 1
24025: PPUSH
24026: CALL_OW 301
24030: IFFALSE 24042
24032: GO 24034
24034: DISABLE
// YouLost ( JMM ) ; end_of_file
24035: LD_STRING JMM
24037: PPUSH
24038: CALL_OW 104
24042: END
// every 0 0$30 do
24043: GO 24045
24045: DISABLE
// begin enable ;
24046: ENABLE
// if cratesSpawned < 6 then
24047: LD_EXP 52
24051: PUSH
24052: LD_INT 6
24054: LESS
24055: IFFALSE 24092
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24057: LD_INT 3
24059: PPUSH
24060: LD_INT 5
24062: PPUSH
24063: CALL_OW 12
24067: PPUSH
24068: LD_INT 16
24070: PPUSH
24071: LD_INT 1
24073: PPUSH
24074: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24078: LD_ADDR_EXP 52
24082: PUSH
24083: LD_EXP 52
24087: PUSH
24088: LD_INT 1
24090: PLUS
24091: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
24092: LD_EXP 52
24096: PUSH
24097: LD_INT 6
24099: GREATEREQUAL
24100: PUSH
24101: LD_EXP 52
24105: PUSH
24106: LD_INT 12
24108: LESS
24109: AND
24110: IFFALSE 24154
// begin wait ( 0 0$30 ) ;
24112: LD_INT 1050
24114: PPUSH
24115: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24119: LD_INT 3
24121: PPUSH
24122: LD_INT 5
24124: PPUSH
24125: CALL_OW 12
24129: PPUSH
24130: LD_INT 16
24132: PPUSH
24133: LD_INT 1
24135: PPUSH
24136: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24140: LD_ADDR_EXP 52
24144: PUSH
24145: LD_EXP 52
24149: PUSH
24150: LD_INT 1
24152: PLUS
24153: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
24154: LD_EXP 52
24158: PUSH
24159: LD_INT 12
24161: GREATEREQUAL
24162: IFFALSE 24206
// begin wait ( 1 1$0 ) ;
24164: LD_INT 2100
24166: PPUSH
24167: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
24171: LD_INT 3
24173: PPUSH
24174: LD_INT 5
24176: PPUSH
24177: CALL_OW 12
24181: PPUSH
24182: LD_INT 16
24184: PPUSH
24185: LD_INT 1
24187: PPUSH
24188: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
24192: LD_ADDR_EXP 52
24196: PUSH
24197: LD_EXP 52
24201: PUSH
24202: LD_INT 1
24204: PLUS
24205: ST_TO_ADDR
// end ; end ;
24206: END
