// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export fastEnd ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 27
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 28
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 37
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 38
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 39
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 40
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 41
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianEscape = 0 ;
  69: LD_ADDR_EXP 46
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  77: LD_ADDR_EXP 45
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// arabianDefeated = 0 ;
  85: LD_ADDR_EXP 47
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// arabianTrait = 0 ;
  93: LD_ADDR_EXP 48
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// eventVar1 = 0 ;
 101: LD_ADDR_EXP 54
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// eventVar2 = 0 ;
 109: LD_ADDR_EXP 55
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// fastEnd = 0 ;
 117: LD_ADDR_EXP 53
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// KhatamStatus = 0 ;
 125: LD_ADDR_EXP 49
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// cratesSpawned = 0 ;
 133: LD_ADDR_EXP 52
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// mission_prefix := 10_ ;
 141: LD_ADDR_EXP 50
 145: PUSH
 146: LD_STRING 10_
 148: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 149: LD_ADDR_EXP 51
 153: PUSH
 154: LD_STRING 09_
 156: ST_TO_ADDR
// debugMode = 0 ;
 157: LD_ADDR_EXP 56
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// PrepareDifficulty ;
 165: CALL 7468 0 0
// PrepareJMMTeam ;
 169: CALL 515 0 0
// PrepareCathyTeam ;
 173: CALL 1590 0 0
// PrepareArabianCommander ;
 177: CALL 2948 0 0
// PrepareArabian ;
 181: CALL 3000 0 0
// BuildArabianBase ;
 185: CALL 10066 0 0
// PrepareNature ;
 189: CALL 20437 0 0
// TameApemans ;
 193: CALL 15640 0 0
// end ;
 197: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 198: LD_EXP 56
 202: PUSH
 203: LD_INT 1
 205: EQUAL
 206: IFFALSE 512
 208: GO 210
 210: DISABLE
 211: LD_INT 0
 213: PPUSH
// begin enable ;
 214: ENABLE
// fogoff ( true ) ;
 215: LD_INT 1
 217: PPUSH
 218: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 222: LD_ADDR_VAR 0 1
 226: PUSH
 227: LD_INT 22
 229: PUSH
 230: LD_INT 1
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: PUSH
 237: LD_INT 21
 239: PUSH
 240: LD_INT 1
 242: PUSH
 243: EMPTY
 244: LIST
 245: LIST
 246: PUSH
 247: EMPTY
 248: LIST
 249: LIST
 250: PPUSH
 251: CALL_OW 69
 255: PUSH
 256: FOR_IN
 257: IFFALSE 273
// SetLives ( i , 1000 ) ;
 259: LD_VAR 0 1
 263: PPUSH
 264: LD_INT 1000
 266: PPUSH
 267: CALL_OW 234
 271: GO 256
 273: POP
 274: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 275: LD_ADDR_VAR 0 1
 279: PUSH
 280: LD_INT 22
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: LD_INT 2
 292: PUSH
 293: LD_INT 30
 295: PUSH
 296: LD_INT 0
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PUSH
 303: LD_INT 30
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PPUSH
 322: CALL_OW 69
 326: PUSH
 327: FOR_IN
 328: IFFALSE 352
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 330: LD_VAR 0 1
 334: PPUSH
 335: CALL_OW 274
 339: PPUSH
 340: LD_INT 1
 342: PPUSH
 343: LD_INT 9999
 345: PPUSH
 346: CALL_OW 277
 350: GO 327
 352: POP
 353: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_INT 22
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: LD_INT 2
 371: PUSH
 372: LD_INT 30
 374: PUSH
 375: LD_INT 0
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PUSH
 382: LD_INT 30
 384: PUSH
 385: LD_INT 1
 387: PUSH
 388: EMPTY
 389: LIST
 390: LIST
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: LIST
 396: PUSH
 397: EMPTY
 398: LIST
 399: LIST
 400: PPUSH
 401: CALL_OW 69
 405: PUSH
 406: FOR_IN
 407: IFFALSE 431
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 409: LD_VAR 0 1
 413: PPUSH
 414: CALL_OW 274
 418: PPUSH
 419: LD_INT 2
 421: PPUSH
 422: LD_INT 9999
 424: PPUSH
 425: CALL_OW 277
 429: GO 406
 431: POP
 432: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 433: LD_ADDR_VAR 0 1
 437: PUSH
 438: LD_INT 22
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: LD_INT 2
 450: PUSH
 451: LD_INT 30
 453: PUSH
 454: LD_INT 0
 456: PUSH
 457: EMPTY
 458: LIST
 459: LIST
 460: PUSH
 461: LD_INT 30
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PPUSH
 480: CALL_OW 69
 484: PUSH
 485: FOR_IN
 486: IFFALSE 510
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 488: LD_VAR 0 1
 492: PPUSH
 493: CALL_OW 274
 497: PPUSH
 498: LD_INT 3
 500: PPUSH
 501: LD_INT 9999
 503: PPUSH
 504: CALL_OW 277
 508: GO 485
 510: POP
 511: POP
// end ; end_of_file
 512: PPOPN 1
 514: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 515: LD_INT 0
 517: PPUSH
 518: PPUSH
 519: PPUSH
 520: PPUSH
 521: PPUSH
 522: PPUSH
// uc_side = 1 ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_INT 1
 530: ST_TO_ADDR
// uc_nation = 1 ;
 531: LD_ADDR_OWVAR 21
 535: PUSH
 536: LD_INT 1
 538: ST_TO_ADDR
// count = 0 ;
 539: LD_ADDR_VAR 0 6
 543: PUSH
 544: LD_INT 0
 546: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 547: LD_ADDR_EXP 1
 551: PUSH
 552: LD_STRING 10_JMM
 554: PPUSH
 555: LD_INT 1
 557: PPUSH
 558: CALL 7204 0 2
 562: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 563: LD_ADDR_EXP 20
 567: PUSH
 568: LD_EXP 20
 572: PUSH
 573: LD_EXP 1
 577: ADD
 578: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 579: LD_ADDR_EXP 10
 583: PUSH
 584: LD_STRING 10_Gary
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 7204 0 2
 594: ST_TO_ADDR
// if Gary then
 595: LD_EXP 10
 599: IFFALSE 617
// JMMSquad = JMMSquad ^ Gary ;
 601: LD_ADDR_EXP 20
 605: PUSH
 606: LD_EXP 20
 610: PUSH
 611: LD_EXP 10
 615: ADD
 616: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 617: LD_ADDR_EXP 5
 621: PUSH
 622: LD_STRING 10_Cyrus
 624: PPUSH
 625: LD_INT 1
 627: PPUSH
 628: CALL 7204 0 2
 632: ST_TO_ADDR
// if Cyrus then
 633: LD_EXP 5
 637: IFFALSE 655
// JMMSquad = JMMSquad ^ Cyrus ;
 639: LD_ADDR_EXP 20
 643: PUSH
 644: LD_EXP 20
 648: PUSH
 649: LD_EXP 5
 653: ADD
 654: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 655: LD_ADDR_EXP 4
 659: PUSH
 660: LD_STRING 10_Bobby
 662: PPUSH
 663: LD_INT 1
 665: PPUSH
 666: CALL 7204 0 2
 670: ST_TO_ADDR
// if Bobby then
 671: LD_EXP 4
 675: IFFALSE 693
// JMMSquad = JMMSquad ^ Bobby ;
 677: LD_ADDR_EXP 20
 681: PUSH
 682: LD_EXP 20
 686: PUSH
 687: LD_EXP 4
 691: ADD
 692: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 693: LD_ADDR_EXP 6
 697: PUSH
 698: LD_STRING 10_Lisa
 700: PPUSH
 701: LD_INT 1
 703: PPUSH
 704: CALL 7204 0 2
 708: ST_TO_ADDR
// if Lisa then
 709: LD_EXP 6
 713: IFFALSE 731
// JMMSquad = JMMSquad ^ Lisa ;
 715: LD_ADDR_EXP 20
 719: PUSH
 720: LD_EXP 20
 724: PUSH
 725: LD_EXP 6
 729: ADD
 730: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 731: LD_ADDR_EXP 2
 735: PUSH
 736: LD_STRING 10_Brown
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: CALL 7204 0 2
 746: ST_TO_ADDR
// if Brown then
 747: LD_EXP 2
 751: IFFALSE 769
// JMMSquad = JMMSquad ^ Brown ;
 753: LD_ADDR_EXP 20
 757: PUSH
 758: LD_EXP 20
 762: PUSH
 763: LD_EXP 2
 767: ADD
 768: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 769: LD_ADDR_EXP 3
 773: PUSH
 774: LD_STRING 10_Donaldson
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL 7204 0 2
 784: ST_TO_ADDR
// if Donaldson then
 785: LD_EXP 3
 789: IFFALSE 807
// JMMSquad = JMMSquad ^ Donaldson ;
 791: LD_ADDR_EXP 20
 795: PUSH
 796: LD_EXP 20
 800: PUSH
 801: LD_EXP 3
 805: ADD
 806: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 807: LD_ADDR_EXP 7
 811: PUSH
 812: LD_STRING 10_Frank
 814: PPUSH
 815: LD_INT 1
 817: PPUSH
 818: CALL 7204 0 2
 822: ST_TO_ADDR
// if Frank then
 823: LD_EXP 7
 827: IFFALSE 845
// JMMSquad = JMMSquad ^ Frank ;
 829: LD_ADDR_EXP 20
 833: PUSH
 834: LD_EXP 20
 838: PUSH
 839: LD_EXP 7
 843: ADD
 844: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 845: LD_ADDR_EXP 9
 849: PUSH
 850: LD_STRING 10_Houten
 852: PPUSH
 853: LD_INT 1
 855: PPUSH
 856: CALL 7204 0 2
 860: ST_TO_ADDR
// if Houten then
 861: LD_EXP 9
 865: IFFALSE 883
// JMMSquad = JMMSquad ^ Houten ;
 867: LD_ADDR_EXP 20
 871: PUSH
 872: LD_EXP 20
 876: PUSH
 877: LD_EXP 9
 881: ADD
 882: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 883: LD_ADDR_EXP 21
 887: PUSH
 888: LD_STRING OthersIn10
 890: PPUSH
 891: CALL_OW 31
 895: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 896: LD_ADDR_EXP 24
 900: PUSH
 901: LD_STRING Powell
 903: PPUSH
 904: LD_INT 0
 906: PPUSH
 907: CALL 7204 0 2
 911: ST_TO_ADDR
// for i in JMMSquad do
 912: LD_ADDR_VAR 0 2
 916: PUSH
 917: LD_EXP 20
 921: PUSH
 922: FOR_IN
 923: IFFALSE 1182
// begin if count < 3 then
 925: LD_VAR 0 6
 929: PUSH
 930: LD_INT 3
 932: LESS
 933: IFFALSE 1050
// begin vc_engine = 1 ;
 935: LD_ADDR_OWVAR 39
 939: PUSH
 940: LD_INT 1
 942: ST_TO_ADDR
// vc_control = 1 ;
 943: LD_ADDR_OWVAR 38
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
// vc_weapon = 12 ;
 951: LD_ADDR_OWVAR 40
 955: PUSH
 956: LD_INT 12
 958: ST_TO_ADDR
// vc_chassis = 3 ;
 959: LD_ADDR_OWVAR 37
 963: PUSH
 964: LD_INT 3
 966: ST_TO_ADDR
// veh = CreateVehicle ;
 967: LD_ADDR_VAR 0 4
 971: PUSH
 972: CALL_OW 45
 976: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 977: LD_VAR 0 4
 981: PPUSH
 982: LD_INT 1
 984: PPUSH
 985: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 989: LD_VAR 0 4
 993: PPUSH
 994: LD_INT 2
 996: PPUSH
 997: LD_INT 0
 999: PPUSH
1000: CALL_OW 49
// if count mod 2 = 0 then
1004: LD_VAR 0 6
1008: PUSH
1009: LD_INT 2
1011: MOD
1012: PUSH
1013: LD_INT 0
1015: EQUAL
1016: IFFALSE 1035
// AddCargo ( veh , 1 , 100 ) else
1018: LD_VAR 0 4
1022: PPUSH
1023: LD_INT 1
1025: PPUSH
1026: LD_INT 100
1028: PPUSH
1029: CALL_OW 291
1033: GO 1050
// AddCargo ( veh , 3 , 100 ) end ;
1035: LD_VAR 0 4
1039: PPUSH
1040: LD_INT 3
1042: PPUSH
1043: LD_INT 100
1045: PPUSH
1046: CALL_OW 291
// if count >= 3 then
1050: LD_VAR 0 6
1054: PUSH
1055: LD_INT 3
1057: GREATEREQUAL
1058: IFFALSE 1152
// begin vc_engine = 1 ;
1060: LD_ADDR_OWVAR 39
1064: PUSH
1065: LD_INT 1
1067: ST_TO_ADDR
// vc_control = 1 ;
1068: LD_ADDR_OWVAR 38
1072: PUSH
1073: LD_INT 1
1075: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1076: LD_ADDR_OWVAR 40
1080: PUSH
1081: LD_INT 3
1083: PUSH
1084: LD_INT 4
1086: PUSH
1087: LD_INT 5
1089: PUSH
1090: EMPTY
1091: LIST
1092: LIST
1093: LIST
1094: PUSH
1095: LD_INT 1
1097: PPUSH
1098: LD_INT 3
1100: PPUSH
1101: CALL_OW 12
1105: ARRAY
1106: ST_TO_ADDR
// vc_chassis = 3 ;
1107: LD_ADDR_OWVAR 37
1111: PUSH
1112: LD_INT 3
1114: ST_TO_ADDR
// veh = CreateVehicle ;
1115: LD_ADDR_VAR 0 4
1119: PUSH
1120: CALL_OW 45
1124: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1125: LD_VAR 0 4
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1137: LD_VAR 0 4
1141: PPUSH
1142: LD_INT 2
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 49
// end ; count = count + 1 ;
1152: LD_ADDR_VAR 0 6
1156: PUSH
1157: LD_VAR 0 6
1161: PUSH
1162: LD_INT 1
1164: PLUS
1165: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1166: LD_VAR 0 2
1170: PPUSH
1171: LD_VAR 0 4
1175: PPUSH
1176: CALL_OW 52
// end ;
1180: GO 922
1182: POP
1183: POP
// for i in others10 do
1184: LD_ADDR_VAR 0 2
1188: PUSH
1189: LD_EXP 21
1193: PUSH
1194: FOR_IN
1195: IFFALSE 1321
// begin vc_engine = 1 ;
1197: LD_ADDR_OWVAR 39
1201: PUSH
1202: LD_INT 1
1204: ST_TO_ADDR
// vc_control = 1 ;
1205: LD_ADDR_OWVAR 38
1209: PUSH
1210: LD_INT 1
1212: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1213: LD_ADDR_OWVAR 40
1217: PUSH
1218: LD_INT 3
1220: PUSH
1221: LD_INT 4
1223: PUSH
1224: LD_INT 5
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: LIST
1231: PUSH
1232: LD_INT 1
1234: PPUSH
1235: LD_INT 3
1237: PPUSH
1238: CALL_OW 12
1242: ARRAY
1243: ST_TO_ADDR
// vc_chassis = 3 ;
1244: LD_ADDR_OWVAR 37
1248: PUSH
1249: LD_INT 3
1251: ST_TO_ADDR
// veh = CreateVehicle ;
1252: LD_ADDR_VAR 0 4
1256: PUSH
1257: CALL_OW 45
1261: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1262: LD_VAR 0 4
1266: PPUSH
1267: LD_INT 1
1269: PPUSH
1270: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1274: LD_VAR 0 4
1278: PPUSH
1279: LD_INT 2
1281: PPUSH
1282: LD_INT 0
1284: PPUSH
1285: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1289: LD_ADDR_EXP 27
1293: PUSH
1294: LD_EXP 27
1298: PUSH
1299: LD_VAR 0 4
1303: ADD
1304: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1305: LD_VAR 0 2
1309: PPUSH
1310: LD_VAR 0 4
1314: PPUSH
1315: CALL_OW 52
// end ;
1319: GO 1194
1321: POP
1322: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1323: LD_INT 22
1325: PUSH
1326: LD_INT 1
1328: PUSH
1329: EMPTY
1330: LIST
1331: LIST
1332: PUSH
1333: LD_INT 21
1335: PUSH
1336: LD_INT 1
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PPUSH
1347: CALL_OW 69
1351: PPUSH
1352: LD_INT 1
1354: PPUSH
1355: CALL_OW 336
// end ;
1359: LD_VAR 0 1
1363: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1364: LD_INT 0
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// for i := 1 to 10 do
1387: LD_ADDR_VAR 0 2
1391: PUSH
1392: DOUBLE
1393: LD_INT 1
1395: DEC
1396: ST_TO_ADDR
1397: LD_INT 10
1399: PUSH
1400: FOR_TO
1401: IFFALSE 1583
// begin vc_engine = 1 ;
1403: LD_ADDR_OWVAR 39
1407: PUSH
1408: LD_INT 1
1410: ST_TO_ADDR
// vc_control = 1 ;
1411: LD_ADDR_OWVAR 38
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1419: LD_ADDR_OWVAR 40
1423: PUSH
1424: LD_INT 3
1426: PUSH
1427: LD_INT 4
1429: PUSH
1430: LD_INT 5
1432: PUSH
1433: LD_INT 12
1435: PUSH
1436: EMPTY
1437: LIST
1438: LIST
1439: LIST
1440: LIST
1441: PUSH
1442: LD_INT 1
1444: PPUSH
1445: LD_INT 4
1447: PPUSH
1448: CALL_OW 12
1452: ARRAY
1453: ST_TO_ADDR
// vc_chassis = 3 ;
1454: LD_ADDR_OWVAR 37
1458: PUSH
1459: LD_INT 3
1461: ST_TO_ADDR
// veh = CreateVehicle ;
1462: LD_ADDR_VAR 0 3
1466: PUSH
1467: CALL_OW 45
1471: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1472: LD_VAR 0 3
1476: PPUSH
1477: LD_INT 1
1479: PPUSH
1480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1484: LD_VAR 0 3
1488: PPUSH
1489: LD_INT 2
1491: PPUSH
1492: LD_INT 0
1494: PPUSH
1495: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1499: LD_ADDR_EXP 27
1503: PUSH
1504: LD_EXP 27
1508: PUSH
1509: LD_VAR 0 3
1513: ADD
1514: ST_TO_ADDR
// if vc_weapon = 12 then
1515: LD_OWVAR 40
1519: PUSH
1520: LD_INT 12
1522: EQUAL
1523: IFFALSE 1581
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1525: LD_ADDR_VAR 0 4
1529: PUSH
1530: LD_INT 5
1532: PPUSH
1533: LD_INT 10
1535: PPUSH
1536: CALL_OW 12
1540: PUSH
1541: LD_INT 10
1543: MUL
1544: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1545: LD_VAR 0 3
1549: PPUSH
1550: LD_INT 1
1552: PUSH
1553: LD_INT 3
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: LD_INT 1
1562: PPUSH
1563: LD_INT 2
1565: PPUSH
1566: CALL_OW 12
1570: ARRAY
1571: PPUSH
1572: LD_VAR 0 4
1576: PPUSH
1577: CALL_OW 291
// end ; end ;
1581: GO 1400
1583: POP
1584: POP
// end ;
1585: LD_VAR 0 1
1589: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1590: LD_INT 0
1592: PPUSH
1593: PPUSH
1594: PPUSH
// uc_side = 4 ;
1595: LD_ADDR_OWVAR 20
1599: PUSH
1600: LD_INT 4
1602: ST_TO_ADDR
// uc_nation = 1 ;
1603: LD_ADDR_OWVAR 21
1607: PUSH
1608: LD_INT 1
1610: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1611: LD_ADDR_EXP 11
1615: PUSH
1616: LD_STRING Simms
1618: PPUSH
1619: LD_INT 0
1621: PPUSH
1622: CALL 7204 0 2
1626: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1627: LD_ADDR_EXP 12
1631: PUSH
1632: LD_STRING 08_Denis
1634: PPUSH
1635: LD_INT 1
1637: PPUSH
1638: CALL 7204 0 2
1642: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1643: LD_ADDR_EXP 13
1647: PUSH
1648: LD_STRING 08_Joan
1650: PPUSH
1651: LD_INT 1
1653: PPUSH
1654: CALL 7204 0 2
1658: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1659: LD_ADDR_EXP 14
1663: PUSH
1664: LD_STRING Khatam
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: CALL 7204 0 2
1674: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1675: LD_ADDR_EXP 15
1679: PUSH
1680: LD_STRING Gladstone
1682: PPUSH
1683: LD_INT 1
1685: PPUSH
1686: CALL 7204 0 2
1690: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1691: LD_ADDR_EXP 17
1695: PUSH
1696: LD_STRING DeltaDoctor
1698: PPUSH
1699: LD_INT 1
1701: PPUSH
1702: CALL 7204 0 2
1706: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1707: LD_STRING 08_Frank
1709: PPUSH
1710: CALL_OW 28
1714: PUSH
1715: LD_INT 1
1717: EQUAL
1718: IFFALSE 1736
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1720: LD_ADDR_EXP 8
1724: PUSH
1725: LD_STRING Yamoko
1727: PPUSH
1728: LD_INT 1
1730: PPUSH
1731: CALL 7204 0 2
1735: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1736: LD_ADDR_EXP 22
1740: PUSH
1741: LD_STRING 09_others
1743: PPUSH
1744: CALL_OW 31
1748: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1749: LD_ADDR_EXP 23
1753: PUSH
1754: LD_STRING 09_apes
1756: PPUSH
1757: CALL_OW 31
1761: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1762: LD_EXP 11
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: LD_INT 0
1772: PPUSH
1773: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1777: LD_EXP 12
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: LD_INT 0
1787: PPUSH
1788: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1792: LD_EXP 13
1796: PPUSH
1797: LD_INT 1
1799: PPUSH
1800: LD_INT 0
1802: PPUSH
1803: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1807: LD_EXP 14
1811: PPUSH
1812: LD_INT 1
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1822: LD_EXP 15
1826: PPUSH
1827: LD_INT 1
1829: PPUSH
1830: LD_INT 0
1832: PPUSH
1833: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1837: LD_EXP 17
1841: PPUSH
1842: LD_INT 1
1844: PPUSH
1845: LD_INT 0
1847: PPUSH
1848: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1852: LD_EXP 8
1856: PPUSH
1857: LD_INT 1
1859: PPUSH
1860: LD_INT 0
1862: PPUSH
1863: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1867: LD_EXP 11
1871: PUSH
1872: LD_EXP 14
1876: PUSH
1877: LD_EXP 12
1881: PUSH
1882: LD_EXP 15
1886: PUSH
1887: LD_EXP 17
1891: PUSH
1892: LD_EXP 13
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PPUSH
1905: LD_INT 4
1907: PPUSH
1908: CALL_OW 336
// if others09 > 2 then
1912: LD_EXP 22
1916: PUSH
1917: LD_INT 2
1919: GREATER
1920: IFFALSE 1965
// begin for i := 1 to 3 do
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: DOUBLE
1928: LD_INT 1
1930: DEC
1931: ST_TO_ADDR
1932: LD_INT 3
1934: PUSH
1935: FOR_TO
1936: IFFALSE 1961
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
1938: LD_EXP 22
1942: PUSH
1943: LD_VAR 0 2
1947: ARRAY
1948: PPUSH
1949: LD_INT 1
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: CALL_OW 49
1959: GO 1935
1961: POP
1962: POP
// end else
1963: GO 1997
// begin for i in others09 do
1965: LD_ADDR_VAR 0 2
1969: PUSH
1970: LD_EXP 22
1974: PUSH
1975: FOR_IN
1976: IFFALSE 1995
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
1978: LD_VAR 0 2
1982: PPUSH
1983: LD_INT 1
1985: PPUSH
1986: LD_INT 0
1988: PPUSH
1989: CALL_OW 49
1993: GO 1975
1995: POP
1996: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
1997: LD_INT 22
1999: PUSH
2000: LD_INT 4
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_INT 21
2009: PUSH
2010: LD_INT 1
2012: PUSH
2013: EMPTY
2014: LIST
2015: LIST
2016: PUSH
2017: LD_INT 25
2019: PUSH
2020: LD_INT 2
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: PUSH
2027: EMPTY
2028: LIST
2029: LIST
2030: LIST
2031: PPUSH
2032: CALL_OW 69
2036: PUSH
2037: LD_EXP 11
2041: PUSH
2042: LD_EXP 14
2046: PUSH
2047: LD_EXP 12
2051: PUSH
2052: LD_EXP 15
2056: PUSH
2057: LD_EXP 17
2061: PUSH
2062: LD_EXP 13
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: LIST
2074: PUSH
2075: LD_INT 0
2077: EQUAL
2078: DIFF
2079: IFFALSE 2181
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2081: LD_ADDR_VAR 0 3
2085: PUSH
2086: LD_INT 22
2088: PUSH
2089: LD_INT 4
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: PUSH
2096: LD_INT 21
2098: PUSH
2099: LD_INT 1
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: PUSH
2106: LD_INT 25
2108: PUSH
2109: LD_INT 2
2111: PUSH
2112: EMPTY
2113: LIST
2114: LIST
2115: PUSH
2116: EMPTY
2117: LIST
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: LD_EXP 11
2130: PUSH
2131: LD_EXP 14
2135: PUSH
2136: LD_EXP 12
2140: PUSH
2141: LD_EXP 15
2145: PUSH
2146: LD_EXP 17
2150: PUSH
2151: LD_EXP 13
2155: PUSH
2156: EMPTY
2157: LIST
2158: LIST
2159: LIST
2160: LIST
2161: LIST
2162: LIST
2163: DIFF
2164: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2165: LD_VAR 0 3
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: LD_INT 2
2176: PPUSH
2177: CALL_OW 336
// end ; for i in ape09 do
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: LD_EXP 23
2190: PUSH
2191: FOR_IN
2192: IFFALSE 2211
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 1
2201: PPUSH
2202: LD_INT 0
2204: PPUSH
2205: CALL_OW 49
2209: GO 2191
2211: POP
2212: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2213: LD_INT 22
2215: PUSH
2216: LD_INT 4
2218: PUSH
2219: EMPTY
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 21
2225: PUSH
2226: LD_INT 1
2228: PUSH
2229: EMPTY
2230: LIST
2231: LIST
2232: PUSH
2233: LD_INT 25
2235: PUSH
2236: LD_INT 2
2238: PUSH
2239: EMPTY
2240: LIST
2241: LIST
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: PPUSH
2248: CALL_OW 69
2252: PPUSH
2253: LD_INT 0
2255: PPUSH
2256: LD_INT 101
2258: PPUSH
2259: LD_INT 30
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 205
// uc_side = 1 ;
2269: LD_ADDR_OWVAR 20
2273: PUSH
2274: LD_INT 1
2276: ST_TO_ADDR
// hc_class := 1 ;
2277: LD_ADDR_OWVAR 28
2281: PUSH
2282: LD_INT 1
2284: ST_TO_ADDR
// hc_sex := sex_female ;
2285: LD_ADDR_OWVAR 27
2289: PUSH
2290: LD_INT 2
2292: ST_TO_ADDR
// hc_gallery :=  ;
2293: LD_ADDR_OWVAR 33
2297: PUSH
2298: LD_STRING 
2300: ST_TO_ADDR
// hc_name :=  ;
2301: LD_ADDR_OWVAR 26
2305: PUSH
2306: LD_STRING 
2308: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2309: LD_ADDR_OWVAR 31
2313: PUSH
2314: LD_INT 1
2316: PUSH
2317: LD_INT 7
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: LD_INT 0
2325: PUSH
2326: EMPTY
2327: LIST
2328: LIST
2329: LIST
2330: LIST
2331: ST_TO_ADDR
// AmScout = CreateHuman ;
2332: LD_ADDR_EXP 18
2336: PUSH
2337: CALL_OW 44
2341: ST_TO_ADDR
// end ;
2342: LD_VAR 0 1
2346: RET
// export function PrepareCornell ; begin
2347: LD_INT 0
2349: PPUSH
// uc_side = 4 ;
2350: LD_ADDR_OWVAR 20
2354: PUSH
2355: LD_INT 4
2357: ST_TO_ADDR
// uc_nation = 1 ;
2358: LD_ADDR_OWVAR 21
2362: PUSH
2363: LD_INT 1
2365: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2366: LD_ADDR_EXP 19
2370: PUSH
2371: LD_STRING 03_Cornel
2373: PPUSH
2374: LD_INT 1
2376: PPUSH
2377: CALL 7204 0 2
2381: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2382: LD_EXP 19
2386: PPUSH
2387: LD_INT 8
2389: PPUSH
2390: LD_INT 0
2392: PPUSH
2393: CALL_OW 49
// if IsInUnit ( JMM ) then
2397: LD_EXP 1
2401: PPUSH
2402: CALL_OW 310
2406: IFFALSE 2449
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2408: LD_EXP 19
2412: PPUSH
2413: LD_EXP 1
2417: PPUSH
2418: CALL_OW 310
2422: PPUSH
2423: CALL_OW 250
2427: PPUSH
2428: LD_EXP 1
2432: PPUSH
2433: CALL_OW 310
2437: PPUSH
2438: CALL_OW 251
2442: PPUSH
2443: CALL_OW 111
2447: GO 2478
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2449: LD_EXP 19
2453: PPUSH
2454: LD_EXP 1
2458: PPUSH
2459: CALL_OW 250
2463: PPUSH
2464: LD_EXP 1
2468: PPUSH
2469: CALL_OW 251
2473: PPUSH
2474: CALL_OW 111
// end ; end_of_file
2478: LD_VAR 0 1
2482: RET
// export function PrepareRussians ; var i , un ; begin
2483: LD_INT 0
2485: PPUSH
2486: PPUSH
2487: PPUSH
// uc_side = 3 ;
2488: LD_ADDR_OWVAR 20
2492: PUSH
2493: LD_INT 3
2495: ST_TO_ADDR
// uc_nation = 3 ;
2496: LD_ADDR_OWVAR 21
2500: PUSH
2501: LD_INT 3
2503: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2504: LD_ADDR_EXP 25
2508: PUSH
2509: LD_STRING Tsaritsyn
2511: PPUSH
2512: LD_INT 0
2514: PPUSH
2515: CALL 7204 0 2
2519: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2520: LD_EXP 25
2524: PPUSH
2525: LD_INT 3
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: CALL_OW 49
// for i = 1 to 14 do
2535: LD_ADDR_VAR 0 2
2539: PUSH
2540: DOUBLE
2541: LD_INT 1
2543: DEC
2544: ST_TO_ADDR
2545: LD_INT 14
2547: PUSH
2548: FOR_TO
2549: IFFALSE 2635
// begin uc_side = 3 ;
2551: LD_ADDR_OWVAR 20
2555: PUSH
2556: LD_INT 3
2558: ST_TO_ADDR
// uc_nation = 3 ;
2559: LD_ADDR_OWVAR 21
2563: PUSH
2564: LD_INT 3
2566: ST_TO_ADDR
// hc_gallery =  ;
2567: LD_ADDR_OWVAR 33
2571: PUSH
2572: LD_STRING 
2574: ST_TO_ADDR
// hc_name =  ;
2575: LD_ADDR_OWVAR 26
2579: PUSH
2580: LD_STRING 
2582: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2583: LD_INT 0
2585: PPUSH
2586: LD_INT 1
2588: PPUSH
2589: LD_EXP 35
2593: PPUSH
2594: LD_EXP 36
2598: PPUSH
2599: CALL_OW 12
2603: PPUSH
2604: CALL_OW 380
// un = CreateHuman ;
2608: LD_ADDR_VAR 0 3
2612: PUSH
2613: CALL_OW 44
2617: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2618: LD_VAR 0 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// end ;
2633: GO 2548
2635: POP
2636: POP
// for i = 1 to 6 do
2637: LD_ADDR_VAR 0 2
2641: PUSH
2642: DOUBLE
2643: LD_INT 1
2645: DEC
2646: ST_TO_ADDR
2647: LD_INT 6
2649: PUSH
2650: FOR_TO
2651: IFFALSE 2737
// begin uc_side = 3 ;
2653: LD_ADDR_OWVAR 20
2657: PUSH
2658: LD_INT 3
2660: ST_TO_ADDR
// uc_nation = 3 ;
2661: LD_ADDR_OWVAR 21
2665: PUSH
2666: LD_INT 3
2668: ST_TO_ADDR
// hc_gallery =  ;
2669: LD_ADDR_OWVAR 33
2673: PUSH
2674: LD_STRING 
2676: ST_TO_ADDR
// hc_name =  ;
2677: LD_ADDR_OWVAR 26
2681: PUSH
2682: LD_STRING 
2684: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2685: LD_INT 0
2687: PPUSH
2688: LD_INT 2
2690: PPUSH
2691: LD_EXP 35
2695: PPUSH
2696: LD_EXP 36
2700: PPUSH
2701: CALL_OW 12
2705: PPUSH
2706: CALL_OW 380
// un = CreateHuman ;
2710: LD_ADDR_VAR 0 3
2714: PUSH
2715: CALL_OW 44
2719: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2720: LD_VAR 0 3
2724: PPUSH
2725: LD_INT 3
2727: PPUSH
2728: LD_INT 0
2730: PPUSH
2731: CALL_OW 49
// end ;
2735: GO 2650
2737: POP
2738: POP
// for i = 1 to 6 do
2739: LD_ADDR_VAR 0 2
2743: PUSH
2744: DOUBLE
2745: LD_INT 1
2747: DEC
2748: ST_TO_ADDR
2749: LD_INT 6
2751: PUSH
2752: FOR_TO
2753: IFFALSE 2839
// begin uc_side = 3 ;
2755: LD_ADDR_OWVAR 20
2759: PUSH
2760: LD_INT 3
2762: ST_TO_ADDR
// uc_nation = 3 ;
2763: LD_ADDR_OWVAR 21
2767: PUSH
2768: LD_INT 3
2770: ST_TO_ADDR
// hc_gallery =  ;
2771: LD_ADDR_OWVAR 33
2775: PUSH
2776: LD_STRING 
2778: ST_TO_ADDR
// hc_name =  ;
2779: LD_ADDR_OWVAR 26
2783: PUSH
2784: LD_STRING 
2786: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2787: LD_INT 0
2789: PPUSH
2790: LD_INT 3
2792: PPUSH
2793: LD_EXP 35
2797: PPUSH
2798: LD_EXP 36
2802: PPUSH
2803: CALL_OW 12
2807: PPUSH
2808: CALL_OW 380
// un = CreateHuman ;
2812: LD_ADDR_VAR 0 3
2816: PUSH
2817: CALL_OW 44
2821: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2822: LD_VAR 0 3
2826: PPUSH
2827: LD_INT 3
2829: PPUSH
2830: LD_INT 0
2832: PPUSH
2833: CALL_OW 49
// end ;
2837: GO 2752
2839: POP
2840: POP
// for i = 1 to 4 do
2841: LD_ADDR_VAR 0 2
2845: PUSH
2846: DOUBLE
2847: LD_INT 1
2849: DEC
2850: ST_TO_ADDR
2851: LD_INT 4
2853: PUSH
2854: FOR_TO
2855: IFFALSE 2941
// begin uc_side = 3 ;
2857: LD_ADDR_OWVAR 20
2861: PUSH
2862: LD_INT 3
2864: ST_TO_ADDR
// uc_nation = 3 ;
2865: LD_ADDR_OWVAR 21
2869: PUSH
2870: LD_INT 3
2872: ST_TO_ADDR
// hc_gallery =  ;
2873: LD_ADDR_OWVAR 33
2877: PUSH
2878: LD_STRING 
2880: ST_TO_ADDR
// hc_name =  ;
2881: LD_ADDR_OWVAR 26
2885: PUSH
2886: LD_STRING 
2888: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2889: LD_INT 0
2891: PPUSH
2892: LD_INT 4
2894: PPUSH
2895: LD_EXP 35
2899: PPUSH
2900: LD_EXP 36
2904: PPUSH
2905: CALL_OW 12
2909: PPUSH
2910: CALL_OW 380
// un = CreateHuman ;
2914: LD_ADDR_VAR 0 3
2918: PUSH
2919: CALL_OW 44
2923: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2924: LD_VAR 0 3
2928: PPUSH
2929: LD_INT 3
2931: PPUSH
2932: LD_INT 0
2934: PPUSH
2935: CALL_OW 49
// end ;
2939: GO 2854
2941: POP
2942: POP
// end ; end_of_file
2943: LD_VAR 0 1
2947: RET
// export function PrepareArabianCommander ; begin
2948: LD_INT 0
2950: PPUSH
// uc_side = 2 ;
2951: LD_ADDR_OWVAR 20
2955: PUSH
2956: LD_INT 2
2958: ST_TO_ADDR
// uc_nation = 2 ;
2959: LD_ADDR_OWVAR 21
2963: PUSH
2964: LD_INT 2
2966: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
2967: LD_ADDR_EXP 26
2971: PUSH
2972: LD_STRING Dietrich
2974: PPUSH
2975: CALL_OW 25
2979: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
2980: LD_EXP 26
2984: PPUSH
2985: LD_INT 4
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// end ;
2995: LD_VAR 0 1
2999: RET
// export function PrepareArabian ; var i , un , veh ; begin
3000: LD_INT 0
3002: PPUSH
3003: PPUSH
3004: PPUSH
3005: PPUSH
// for i = 1 to 3 do
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: DOUBLE
3012: LD_INT 1
3014: DEC
3015: ST_TO_ADDR
3016: LD_INT 3
3018: PUSH
3019: FOR_TO
3020: IFFALSE 3106
// begin uc_side = 2 ;
3022: LD_ADDR_OWVAR 20
3026: PUSH
3027: LD_INT 2
3029: ST_TO_ADDR
// uc_nation = 2 ;
3030: LD_ADDR_OWVAR 21
3034: PUSH
3035: LD_INT 2
3037: ST_TO_ADDR
// hc_gallery =  ;
3038: LD_ADDR_OWVAR 33
3042: PUSH
3043: LD_STRING 
3045: ST_TO_ADDR
// hc_name =  ;
3046: LD_ADDR_OWVAR 26
3050: PUSH
3051: LD_STRING 
3053: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3054: LD_INT 0
3056: PPUSH
3057: LD_INT 1
3059: PPUSH
3060: LD_EXP 35
3064: PPUSH
3065: LD_EXP 36
3069: PPUSH
3070: CALL_OW 12
3074: PPUSH
3075: CALL_OW 380
// un = CreateHuman ;
3079: LD_ADDR_VAR 0 3
3083: PUSH
3084: CALL_OW 44
3088: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3089: LD_VAR 0 3
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: LD_INT 0
3099: PPUSH
3100: CALL_OW 49
// end ;
3104: GO 3019
3106: POP
3107: POP
// for i = 1 to 6 do
3108: LD_ADDR_VAR 0 2
3112: PUSH
3113: DOUBLE
3114: LD_INT 1
3116: DEC
3117: ST_TO_ADDR
3118: LD_INT 6
3120: PUSH
3121: FOR_TO
3122: IFFALSE 3208
// begin uc_side = 2 ;
3124: LD_ADDR_OWVAR 20
3128: PUSH
3129: LD_INT 2
3131: ST_TO_ADDR
// uc_nation = 2 ;
3132: LD_ADDR_OWVAR 21
3136: PUSH
3137: LD_INT 2
3139: ST_TO_ADDR
// hc_gallery =  ;
3140: LD_ADDR_OWVAR 33
3144: PUSH
3145: LD_STRING 
3147: ST_TO_ADDR
// hc_name =  ;
3148: LD_ADDR_OWVAR 26
3152: PUSH
3153: LD_STRING 
3155: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3156: LD_INT 0
3158: PPUSH
3159: LD_INT 2
3161: PPUSH
3162: LD_EXP 35
3166: PPUSH
3167: LD_EXP 36
3171: PPUSH
3172: CALL_OW 12
3176: PPUSH
3177: CALL_OW 380
// un = CreateHuman ;
3181: LD_ADDR_VAR 0 3
3185: PUSH
3186: CALL_OW 44
3190: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3191: LD_VAR 0 3
3195: PPUSH
3196: LD_INT 4
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 49
// end ;
3206: GO 3121
3208: POP
3209: POP
// for i = 1 to 6 do
3210: LD_ADDR_VAR 0 2
3214: PUSH
3215: DOUBLE
3216: LD_INT 1
3218: DEC
3219: ST_TO_ADDR
3220: LD_INT 6
3222: PUSH
3223: FOR_TO
3224: IFFALSE 3310
// begin uc_side = 2 ;
3226: LD_ADDR_OWVAR 20
3230: PUSH
3231: LD_INT 2
3233: ST_TO_ADDR
// uc_nation = 2 ;
3234: LD_ADDR_OWVAR 21
3238: PUSH
3239: LD_INT 2
3241: ST_TO_ADDR
// hc_gallery =  ;
3242: LD_ADDR_OWVAR 33
3246: PUSH
3247: LD_STRING 
3249: ST_TO_ADDR
// hc_name =  ;
3250: LD_ADDR_OWVAR 26
3254: PUSH
3255: LD_STRING 
3257: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_EXP 35
3268: PPUSH
3269: LD_EXP 36
3273: PPUSH
3274: CALL_OW 12
3278: PPUSH
3279: CALL_OW 380
// un = CreateHuman ;
3283: LD_ADDR_VAR 0 3
3287: PUSH
3288: CALL_OW 44
3292: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3293: LD_VAR 0 3
3297: PPUSH
3298: LD_INT 4
3300: PPUSH
3301: LD_INT 0
3303: PPUSH
3304: CALL_OW 49
// end ;
3308: GO 3223
3310: POP
3311: POP
// for i = 1 to 4 do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: DOUBLE
3318: LD_INT 1
3320: DEC
3321: ST_TO_ADDR
3322: LD_INT 4
3324: PUSH
3325: FOR_TO
3326: IFFALSE 3412
// begin uc_side = 2 ;
3328: LD_ADDR_OWVAR 20
3332: PUSH
3333: LD_INT 2
3335: ST_TO_ADDR
// uc_nation = 2 ;
3336: LD_ADDR_OWVAR 21
3340: PUSH
3341: LD_INT 2
3343: ST_TO_ADDR
// hc_gallery =  ;
3344: LD_ADDR_OWVAR 33
3348: PUSH
3349: LD_STRING 
3351: ST_TO_ADDR
// hc_name =  ;
3352: LD_ADDR_OWVAR 26
3356: PUSH
3357: LD_STRING 
3359: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3360: LD_INT 0
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_EXP 35
3370: PPUSH
3371: LD_EXP 36
3375: PPUSH
3376: CALL_OW 12
3380: PPUSH
3381: CALL_OW 380
// un = CreateHuman ;
3385: LD_ADDR_VAR 0 3
3389: PUSH
3390: CALL_OW 44
3394: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3395: LD_VAR 0 3
3399: PPUSH
3400: LD_INT 4
3402: PPUSH
3403: LD_INT 0
3405: PPUSH
3406: CALL_OW 49
// end ;
3410: GO 3325
3412: POP
3413: POP
// for i = 1 to 2 do
3414: LD_ADDR_VAR 0 2
3418: PUSH
3419: DOUBLE
3420: LD_INT 1
3422: DEC
3423: ST_TO_ADDR
3424: LD_INT 2
3426: PUSH
3427: FOR_TO
3428: IFFALSE 3558
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 22
3437: PUSH
3438: LD_INT 2
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: PUSH
3445: LD_INT 21
3447: PUSH
3448: LD_INT 2
3450: PUSH
3451: EMPTY
3452: LIST
3453: LIST
3454: PUSH
3455: LD_INT 58
3457: PUSH
3458: EMPTY
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: LIST
3465: PPUSH
3466: CALL_OW 69
3470: ST_TO_ADDR
// uc_side = 2 ;
3471: LD_ADDR_OWVAR 20
3475: PUSH
3476: LD_INT 2
3478: ST_TO_ADDR
// uc_nation = 2 ;
3479: LD_ADDR_OWVAR 21
3483: PUSH
3484: LD_INT 2
3486: ST_TO_ADDR
// hc_gallery =  ;
3487: LD_ADDR_OWVAR 33
3491: PUSH
3492: LD_STRING 
3494: ST_TO_ADDR
// hc_name =  ;
3495: LD_ADDR_OWVAR 26
3499: PUSH
3500: LD_STRING 
3502: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3503: LD_INT 0
3505: PPUSH
3506: LD_INT 3
3508: PPUSH
3509: LD_EXP 35
3513: PPUSH
3514: LD_EXP 36
3518: PPUSH
3519: CALL_OW 12
3523: PPUSH
3524: CALL_OW 380
// un = CreateHuman ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: CALL_OW 44
3537: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3538: LD_VAR 0 3
3542: PPUSH
3543: LD_VAR 0 4
3547: PUSH
3548: LD_INT 1
3550: ARRAY
3551: PPUSH
3552: CALL_OW 52
// end ;
3556: GO 3427
3558: POP
3559: POP
// end ; end_of_file
3560: LD_VAR 0 1
3564: RET
// every 1 do
3565: GO 3567
3567: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
3568: LD_INT 1
3570: PPUSH
3571: LD_INT 19
3573: PPUSH
3574: CALL_OW 332
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
3578: LD_EXP 1
3582: PPUSH
3583: CALL_OW 310
3587: PPUSH
3588: CALL_OW 87
// if IsOk ( Gary ) then
3592: LD_EXP 10
3596: PPUSH
3597: CALL_OW 302
3601: IFFALSE 3647
// begin DialogueOn ;
3603: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3607: LD_EXP 10
3611: PPUSH
3612: LD_STRING D2-Gary-1
3614: PPUSH
3615: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3619: LD_EXP 1
3623: PPUSH
3624: LD_STRING D2-JMM-1
3626: PPUSH
3627: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3631: LD_EXP 10
3635: PPUSH
3636: LD_STRING D2-Gary-2
3638: PPUSH
3639: CALL_OW 88
// DialogueOff ;
3643: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3647: LD_STRING M1
3649: PPUSH
3650: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3654: LD_INT 38
3656: PPUSH
3657: LD_INT 1
3659: PPUSH
3660: LD_INT 100
3662: PPUSH
3663: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3667: LD_INT 47
3669: PPUSH
3670: LD_INT 1
3672: PPUSH
3673: LD_INT 50
3675: PPUSH
3676: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3680: LD_INT 47
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: LD_INT 50
3688: PPUSH
3689: CALL_OW 291
// SaveForQuickRestart ;
3693: CALL_OW 22
// end ;
3697: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3698: LD_EXP 1
3702: PPUSH
3703: LD_EXP 11
3707: PPUSH
3708: CALL_OW 296
3712: PUSH
3713: LD_INT 15
3715: LESS
3716: IFFALSE 4161
3718: GO 3720
3720: DISABLE
// begin InGameOn ;
3721: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3725: LD_EXP 1
3729: PPUSH
3730: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3734: LD_EXP 1
3738: PPUSH
3739: CALL_OW 87
// wait ( 0 0$1 ) ;
3743: LD_INT 35
3745: PPUSH
3746: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3750: LD_INT 35
3752: PPUSH
3753: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
3757: LD_EXP 11
3761: PUSH
3762: LD_EXP 13
3766: PUSH
3767: LD_EXP 12
3771: PUSH
3772: LD_EXP 14
3776: PUSH
3777: LD_EXP 8
3781: PUSH
3782: EMPTY
3783: LIST
3784: LIST
3785: LIST
3786: LIST
3787: LIST
3788: PPUSH
3789: LD_EXP 1
3793: PPUSH
3794: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3798: LD_EXP 1
3802: PPUSH
3803: LD_EXP 11
3807: PPUSH
3808: CALL_OW 296
3812: PUSH
3813: LD_INT 5
3815: LESS
3816: IFFALSE 3750
// ComTurnUnit ( JMM , Simms ) ;
3818: LD_EXP 1
3822: PPUSH
3823: LD_EXP 11
3827: PPUSH
3828: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3832: LD_EXP 11
3836: PUSH
3837: LD_EXP 13
3841: PUSH
3842: LD_EXP 12
3846: PUSH
3847: LD_EXP 14
3851: PUSH
3852: EMPTY
3853: LIST
3854: LIST
3855: LIST
3856: LIST
3857: PPUSH
3858: LD_EXP 1
3862: PPUSH
3863: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3867: LD_EXP 1
3871: PUSH
3872: LD_EXP 11
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: PPUSH
3881: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3885: LD_EXP 11
3889: PPUSH
3890: LD_STRING D2a-Sim-1
3892: PPUSH
3893: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3897: LD_EXP 1
3901: PPUSH
3902: LD_STRING D2a-JMM-1
3904: PPUSH
3905: CALL_OW 88
// if IsOk ( Joan ) then
3909: LD_EXP 13
3913: PPUSH
3914: CALL_OW 302
3918: IFFALSE 3970
// begin ComTurnUnit ( JMM , Joan ) ;
3920: LD_EXP 1
3924: PPUSH
3925: LD_EXP 13
3929: PPUSH
3930: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
3934: LD_EXP 13
3938: PPUSH
3939: LD_STRING D2b-Joan-1
3941: PPUSH
3942: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
3946: LD_EXP 1
3950: PPUSH
3951: LD_STRING D2b-JMM-1
3953: PPUSH
3954: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
3958: LD_EXP 13
3962: PPUSH
3963: LD_STRING D2b-Joan-2
3965: PPUSH
3966: CALL_OW 88
// end ; if IsOk ( Denis ) then
3970: LD_EXP 12
3974: PPUSH
3975: CALL_OW 302
3979: IFFALSE 4007
// begin ComTurnUnit ( JMM , Denis ) ;
3981: LD_EXP 1
3985: PPUSH
3986: LD_EXP 12
3990: PPUSH
3991: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
3995: LD_EXP 12
3999: PPUSH
4000: LD_STRING D2c-Den-1
4002: PPUSH
4003: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4007: LD_EXP 14
4011: PPUSH
4012: CALL_OW 302
4016: IFFALSE 4056
// begin ComTurnUnit ( JMM , Khatam ) ;
4018: LD_EXP 1
4022: PPUSH
4023: LD_EXP 14
4027: PPUSH
4028: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4032: LD_EXP 1
4036: PPUSH
4037: LD_STRING D2c-JMM-1
4039: PPUSH
4040: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4044: LD_EXP 14
4048: PPUSH
4049: LD_STRING D2c-Khat-1
4051: PPUSH
4052: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4056: LD_EXP 8
4060: PPUSH
4061: CALL_OW 302
4065: IFFALSE 4120
// begin repeat wait ( 0 0$1 ) ;
4067: LD_INT 35
4069: PPUSH
4070: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4074: LD_EXP 8
4078: PPUSH
4079: LD_EXP 1
4083: PPUSH
4084: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4088: LD_EXP 1
4092: PPUSH
4093: LD_EXP 8
4097: PPUSH
4098: CALL_OW 296
4102: PUSH
4103: LD_INT 5
4105: LESS
4106: IFFALSE 4067
// Say ( Kikuchi , D3b-Yam-1 ) ;
4108: LD_EXP 8
4112: PPUSH
4113: LD_STRING D3b-Yam-1
4115: PPUSH
4116: CALL_OW 88
// end ; InGameOff ;
4120: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4124: LD_INT 22
4126: PUSH
4127: LD_INT 4
4129: PUSH
4130: EMPTY
4131: LIST
4132: LIST
4133: PPUSH
4134: CALL_OW 69
4138: PPUSH
4139: LD_INT 1
4141: PPUSH
4142: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4146: LD_STRING M1a
4148: PPUSH
4149: CALL_OW 337
// joinEpsilon = 1 ;
4153: LD_ADDR_EXP 28
4157: PUSH
4158: LD_INT 1
4160: ST_TO_ADDR
// end ;
4161: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4162: LD_EXP 54
4166: PUSH
4167: LD_INT 1
4169: EQUAL
4170: IFFALSE 4776
4172: GO 4174
4174: DISABLE
4175: LD_INT 0
4177: PPUSH
4178: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4179: LD_ADDR_VAR 0 1
4183: PUSH
4184: LD_INT 22
4186: PUSH
4187: LD_INT 1
4189: PUSH
4190: EMPTY
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 25
4196: PUSH
4197: LD_INT 4
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: PUSH
4204: LD_INT 26
4206: PUSH
4207: LD_INT 1
4209: PUSH
4210: EMPTY
4211: LIST
4212: LIST
4213: PUSH
4214: EMPTY
4215: LIST
4216: LIST
4217: LIST
4218: PPUSH
4219: CALL_OW 69
4223: PUSH
4224: LD_INT 1
4226: ARRAY
4227: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4228: LD_ADDR_VAR 0 2
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 26
4245: PUSH
4246: LD_INT 1
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 2
4255: PUSH
4256: LD_INT 25
4258: PUSH
4259: LD_INT 1
4261: PUSH
4262: EMPTY
4263: LIST
4264: LIST
4265: PUSH
4266: LD_INT 25
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: PUSH
4276: LD_INT 25
4278: PUSH
4279: LD_INT 3
4281: PUSH
4282: EMPTY
4283: LIST
4284: LIST
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: LIST
4290: LIST
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: PPUSH
4297: CALL_OW 69
4301: PUSH
4302: LD_INT 1
4304: ARRAY
4305: ST_TO_ADDR
// DialogueOn ;
4306: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4310: LD_EXP 17
4314: PPUSH
4315: CALL_OW 302
4319: IFFALSE 4335
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4321: LD_EXP 17
4325: PPUSH
4326: LD_STRING D3-Sci1-1
4328: PPUSH
4329: CALL_OW 88
4333: GO 4347
// Say ( tmp1 , D3-Sci1-1 ) ;
4335: LD_VAR 0 1
4339: PPUSH
4340: LD_STRING D3-Sci1-1
4342: PPUSH
4343: CALL_OW 88
// if IsOk ( Gary ) then
4347: LD_EXP 10
4351: PPUSH
4352: CALL_OW 302
4356: IFFALSE 4372
// Say ( Gary , D3-Gary-1 ) else
4358: LD_EXP 10
4362: PPUSH
4363: LD_STRING D3-Gary-1
4365: PPUSH
4366: CALL_OW 88
4370: GO 4384
// Say ( tmp2 , D3-Gary-1 ) ;
4372: LD_VAR 0 2
4376: PPUSH
4377: LD_STRING D3-Gary-1
4379: PPUSH
4380: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4384: LD_EXP 17
4388: PPUSH
4389: CALL_OW 302
4393: IFFALSE 4409
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4395: LD_EXP 17
4399: PPUSH
4400: LD_STRING D3-Sci1-2
4402: PPUSH
4403: CALL_OW 88
4407: GO 4421
// Say ( tmp1 , D3-Sci1-2 ) ;
4409: LD_VAR 0 1
4413: PPUSH
4414: LD_STRING D3-Sci1-2
4416: PPUSH
4417: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4421: LD_EXP 1
4425: PPUSH
4426: LD_STRING D3-JMM-2
4428: PPUSH
4429: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4433: LD_EXP 17
4437: PPUSH
4438: CALL_OW 302
4442: IFFALSE 4458
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4444: LD_EXP 17
4448: PPUSH
4449: LD_STRING D3-Sci1-3
4451: PPUSH
4452: CALL_OW 88
4456: GO 4470
// Say ( tmp1 , D3-Sci1-3 ) ;
4458: LD_VAR 0 1
4462: PPUSH
4463: LD_STRING D3-Sci1-3
4465: PPUSH
4466: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4470: LD_EXP 1
4474: PPUSH
4475: LD_STRING D3-JMM-3
4477: PPUSH
4478: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4482: LD_EXP 17
4486: PPUSH
4487: CALL_OW 302
4491: IFFALSE 4507
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4493: LD_EXP 17
4497: PPUSH
4498: LD_STRING D3-Sci1-4
4500: PPUSH
4501: CALL_OW 88
4505: GO 4519
// Say ( tmp1 , D3-Sci1-4 ) ;
4507: LD_VAR 0 1
4511: PPUSH
4512: LD_STRING D3-Sci1-4
4514: PPUSH
4515: CALL_OW 88
// DialogueOff ;
4519: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4523: LD_INT 12
4525: PPUSH
4526: LD_INT 1
4528: PPUSH
4529: LD_INT 1
4531: PPUSH
4532: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4536: LD_INT 32
4538: PPUSH
4539: LD_INT 1
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4549: LD_INT 12
4551: PPUSH
4552: LD_INT 1
4554: PPUSH
4555: LD_INT 1
4557: PPUSH
4558: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
4562: LD_INT 33
4564: PPUSH
4565: LD_INT 1
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4575: LD_STRING M2
4577: PPUSH
4578: CALL_OW 337
// wait ( 5 5$0 ) ;
4582: LD_INT 10500
4584: PPUSH
4585: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4589: LD_EXP 11
4593: PPUSH
4594: CALL_OW 302
4598: PUSH
4599: LD_EXP 12
4603: PPUSH
4604: CALL_OW 302
4608: AND
4609: IFFALSE 4776
// begin DialogueOn ;
4611: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4615: LD_EXP 11
4619: PPUSH
4620: LD_STRING D3a-Sim-1
4622: PPUSH
4623: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4627: LD_EXP 12
4631: PPUSH
4632: LD_STRING D3a-Sci1-1
4634: PPUSH
4635: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4639: LD_EXP 11
4643: PPUSH
4644: LD_STRING D3a-Sim-2
4646: PPUSH
4647: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4651: LD_EXP 12
4655: PPUSH
4656: LD_STRING D3a-Sci1-2
4658: PPUSH
4659: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4663: LD_EXP 11
4667: PPUSH
4668: LD_STRING D3a-Sim-3
4670: PPUSH
4671: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4675: LD_EXP 12
4679: PPUSH
4680: LD_STRING D3a-Sci1-3
4682: PPUSH
4683: CALL_OW 88
// if IsOK ( Joan ) then
4687: LD_EXP 13
4691: PPUSH
4692: CALL_OW 302
4696: IFFALSE 4712
// Say ( Simms , D3a-Sim-4 ) else
4698: LD_EXP 11
4702: PPUSH
4703: LD_STRING D3a-Sim-4
4705: PPUSH
4706: CALL_OW 88
4710: GO 4724
// Say ( Simms , D3a-Sim-4a ) ;
4712: LD_EXP 11
4716: PPUSH
4717: LD_STRING D3a-Sim-4a
4719: PPUSH
4720: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4724: LD_EXP 12
4728: PPUSH
4729: LD_STRING D3a-Sci1-4
4731: PPUSH
4732: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4736: LD_EXP 11
4740: PPUSH
4741: LD_STRING D3a-Sim-5
4743: PPUSH
4744: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4748: LD_EXP 12
4752: PPUSH
4753: LD_STRING D3a-Sci1-5
4755: PPUSH
4756: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4760: LD_EXP 11
4764: PPUSH
4765: LD_STRING D3a-Sim-6
4767: PPUSH
4768: CALL_OW 88
// DialogueOff ;
4772: CALL_OW 7
// end ; end ;
4776: PPOPN 2
4778: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4779: LD_EXP 28
4783: PUSH
4784: LD_INT 1
4786: EQUAL
4787: IFFALSE 5107
4789: GO 4791
4791: DISABLE
4792: LD_INT 0
4794: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4795: LD_EXP 18
4799: PPUSH
4800: LD_STRING D4-FSol1-1
4802: PPUSH
4803: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4807: LD_STRING M3
4809: PPUSH
4810: CALL_OW 337
// PrepareRussians ;
4814: CALL 2483 0 0
// rnd = Rand ( 1 , 100 ) ;
4818: LD_ADDR_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: PPUSH
4826: LD_INT 100
4828: PPUSH
4829: CALL_OW 12
4833: ST_TO_ADDR
// if difficulty = 1 then
4834: LD_OWVAR 67
4838: PUSH
4839: LD_INT 1
4841: EQUAL
4842: IFFALSE 4925
// begin if rnd > 0 and rnd < 51 then
4844: LD_VAR 0 1
4848: PUSH
4849: LD_INT 0
4851: GREATER
4852: PUSH
4853: LD_VAR 0 1
4857: PUSH
4858: LD_INT 51
4860: LESS
4861: AND
4862: IFFALSE 4871
// BuildRussianBase ( 2 ) ;
4864: LD_INT 2
4866: PPUSH
4867: CALL 7788 0 1
// if rnd > 50 and rnd < 81 then
4871: LD_VAR 0 1
4875: PUSH
4876: LD_INT 50
4878: GREATER
4879: PUSH
4880: LD_VAR 0 1
4884: PUSH
4885: LD_INT 81
4887: LESS
4888: AND
4889: IFFALSE 4898
// BuildRussianBase ( 1 ) ;
4891: LD_INT 1
4893: PPUSH
4894: CALL 7788 0 1
// if rnd > 80 and rnd < 101 then
4898: LD_VAR 0 1
4902: PUSH
4903: LD_INT 80
4905: GREATER
4906: PUSH
4907: LD_VAR 0 1
4911: PUSH
4912: LD_INT 101
4914: LESS
4915: AND
4916: IFFALSE 4925
// BuildRussianBase ( 3 ) ;
4918: LD_INT 3
4920: PPUSH
4921: CALL 7788 0 1
// end ; if difficulty = 2 then
4925: LD_OWVAR 67
4929: PUSH
4930: LD_INT 2
4932: EQUAL
4933: IFFALSE 5016
// begin if rnd > 0 and rnd < 61 then
4935: LD_VAR 0 1
4939: PUSH
4940: LD_INT 0
4942: GREATER
4943: PUSH
4944: LD_VAR 0 1
4948: PUSH
4949: LD_INT 61
4951: LESS
4952: AND
4953: IFFALSE 4962
// BuildRussianBase ( 2 ) ;
4955: LD_INT 2
4957: PPUSH
4958: CALL 7788 0 1
// if rnd > 60 and rnd < 81 then
4962: LD_VAR 0 1
4966: PUSH
4967: LD_INT 60
4969: GREATER
4970: PUSH
4971: LD_VAR 0 1
4975: PUSH
4976: LD_INT 81
4978: LESS
4979: AND
4980: IFFALSE 4989
// BuildRussianBase ( 1 ) ;
4982: LD_INT 1
4984: PPUSH
4985: CALL 7788 0 1
// if rnd > 80 and rnd < 101 then
4989: LD_VAR 0 1
4993: PUSH
4994: LD_INT 80
4996: GREATER
4997: PUSH
4998: LD_VAR 0 1
5002: PUSH
5003: LD_INT 101
5005: LESS
5006: AND
5007: IFFALSE 5016
// BuildRussianBase ( 3 ) ;
5009: LD_INT 3
5011: PPUSH
5012: CALL 7788 0 1
// end ; if difficulty = 3 then
5016: LD_OWVAR 67
5020: PUSH
5021: LD_INT 3
5023: EQUAL
5024: IFFALSE 5107
// begin if rnd > 0 and rnd < 71 then
5026: LD_VAR 0 1
5030: PUSH
5031: LD_INT 0
5033: GREATER
5034: PUSH
5035: LD_VAR 0 1
5039: PUSH
5040: LD_INT 71
5042: LESS
5043: AND
5044: IFFALSE 5053
// BuildRussianBase ( 3 ) ;
5046: LD_INT 3
5048: PPUSH
5049: CALL 7788 0 1
// if rnd > 70 and rnd < 81 then
5053: LD_VAR 0 1
5057: PUSH
5058: LD_INT 70
5060: GREATER
5061: PUSH
5062: LD_VAR 0 1
5066: PUSH
5067: LD_INT 81
5069: LESS
5070: AND
5071: IFFALSE 5080
// BuildRussianBase ( 2 ) ;
5073: LD_INT 2
5075: PPUSH
5076: CALL 7788 0 1
// if rnd > 80 and rnd < 101 then
5080: LD_VAR 0 1
5084: PUSH
5085: LD_INT 80
5087: GREATER
5088: PUSH
5089: LD_VAR 0 1
5093: PUSH
5094: LD_INT 101
5096: LESS
5097: AND
5098: IFFALSE 5107
// BuildRussianBase ( 1 ) ;
5100: LD_INT 1
5102: PPUSH
5103: CALL 7788 0 1
// end ; end ;
5107: PPOPN 1
5109: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5110: LD_INT 54
5112: PPUSH
5113: LD_INT 1
5115: PPUSH
5116: CALL_OW 321
5120: PUSH
5121: LD_INT 2
5123: EQUAL
5124: PUSH
5125: LD_INT 21
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 321
5135: PUSH
5136: LD_INT 2
5138: EQUAL
5139: OR
5140: PUSH
5141: LD_INT 22
5143: PPUSH
5144: LD_INT 1
5146: PPUSH
5147: CALL_OW 321
5151: PUSH
5152: LD_INT 2
5154: EQUAL
5155: OR
5156: IFFALSE 5473
5158: GO 5160
5160: DISABLE
5161: LD_INT 0
5163: PPUSH
5164: PPUSH
// begin if IsOk ( Denis ) then
5165: LD_EXP 12
5169: PPUSH
5170: CALL_OW 302
5174: IFFALSE 5268
// begin DialogueOn ;
5176: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5180: LD_EXP 1
5184: PPUSH
5185: LD_STRING D6-JMM-1
5187: PPUSH
5188: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5192: LD_EXP 12
5196: PPUSH
5197: LD_STRING D6-Sci1-1
5199: PPUSH
5200: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5204: LD_EXP 1
5208: PPUSH
5209: LD_STRING D6-JMM-2
5211: PPUSH
5212: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5216: LD_EXP 12
5220: PPUSH
5221: LD_STRING D6-Sci1-2
5223: PPUSH
5224: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5228: LD_EXP 1
5232: PPUSH
5233: LD_STRING D6-JMM-3
5235: PPUSH
5236: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5240: LD_EXP 12
5244: PPUSH
5245: LD_STRING D6-Sci1-3
5247: PPUSH
5248: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5252: LD_EXP 1
5256: PPUSH
5257: LD_STRING D6-JMM-4
5259: PPUSH
5260: CALL_OW 88
// DialogueOff ;
5264: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
5268: LD_INT 1050
5270: PPUSH
5271: CALL_OW 67
// if arabianTrait = 0 then
5275: LD_EXP 48
5279: PUSH
5280: LD_INT 0
5282: EQUAL
5283: IFFALSE 5417
// begin DialogueOn ;
5285: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
5289: LD_INT 22
5291: PUSH
5292: LD_INT 2
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 25
5301: PUSH
5302: LD_INT 4
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: LD_INT 26
5311: PUSH
5312: LD_INT 1
5314: PUSH
5315: EMPTY
5316: LIST
5317: LIST
5318: PUSH
5319: EMPTY
5320: LIST
5321: LIST
5322: LIST
5323: PPUSH
5324: CALL_OW 69
5328: PPUSH
5329: LD_STRING D5-Ar1-1
5331: PPUSH
5332: LD_STRING D5-Ar1-1
5334: PPUSH
5335: CALL 7261 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
5339: LD_EXP 26
5343: PPUSH
5344: LD_STRING D5-Diet-1
5346: PPUSH
5347: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
5351: LD_INT 22
5353: PUSH
5354: LD_INT 2
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: PUSH
5361: LD_INT 25
5363: PUSH
5364: LD_INT 4
5366: PUSH
5367: EMPTY
5368: LIST
5369: LIST
5370: PUSH
5371: LD_INT 26
5373: PUSH
5374: LD_INT 1
5376: PUSH
5377: EMPTY
5378: LIST
5379: LIST
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: LIST
5385: PPUSH
5386: CALL_OW 69
5390: PPUSH
5391: LD_STRING D5-Ar1-2
5393: PPUSH
5394: LD_STRING D5-Ar1-2
5396: PPUSH
5397: CALL 7261 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
5401: LD_EXP 26
5405: PPUSH
5406: LD_STRING D5-Diet-2
5408: PPUSH
5409: CALL_OW 88
// DialogueOff ;
5413: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5417: LD_INT 2100
5419: PUSH
5420: LD_INT 3150
5422: PUSH
5423: LD_INT 4200
5425: PUSH
5426: LD_INT 5250
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: LIST
5433: LIST
5434: PUSH
5435: LD_INT 1
5437: PPUSH
5438: LD_INT 4
5440: PPUSH
5441: CALL_OW 12
5445: ARRAY
5446: PPUSH
5447: CALL_OW 67
// if arabianTrait = 0 then
5451: LD_EXP 48
5455: PUSH
5456: LD_INT 0
5458: EQUAL
5459: IFFALSE 5465
// PrepareArabianTrait ;
5461: CALL 5476 0 0
// arabianTrait = 1 ;
5465: LD_ADDR_EXP 48
5469: PUSH
5470: LD_INT 1
5472: ST_TO_ADDR
// end ;
5473: PPOPN 2
5475: END
// export function PrepareArabianTrait ; var i , tmp ; begin
5476: LD_INT 0
5478: PPUSH
5479: PPUSH
5480: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5481: LD_ADDR_VAR 0 2
5485: PUSH
5486: LD_INT 22
5488: PUSH
5489: LD_INT 2
5491: PUSH
5492: EMPTY
5493: LIST
5494: LIST
5495: PUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 4
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PUSH
5506: EMPTY
5507: LIST
5508: LIST
5509: PPUSH
5510: CALL_OW 69
5514: PUSH
5515: FOR_IN
5516: IFFALSE 5529
// ComExitBuilding ( i ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: CALL_OW 122
5527: GO 5515
5529: POP
5530: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
5531: LD_ADDR_VAR 0 2
5535: PUSH
5536: LD_INT 22
5538: PUSH
5539: LD_INT 2
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: PUSH
5546: LD_INT 25
5548: PUSH
5549: LD_INT 3
5551: PUSH
5552: EMPTY
5553: LIST
5554: LIST
5555: PUSH
5556: EMPTY
5557: LIST
5558: LIST
5559: PPUSH
5560: CALL_OW 69
5564: PUSH
5565: FOR_IN
5566: IFFALSE 5579
// ComExitVehicle ( i ) ;
5568: LD_VAR 0 2
5572: PPUSH
5573: CALL_OW 121
5577: GO 5565
5579: POP
5580: POP
// wait ( 0 0$3 ) ;
5581: LD_INT 105
5583: PPUSH
5584: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5588: LD_INT 76
5590: PPUSH
5591: LD_INT 19
5593: PPUSH
5594: CALL_OW 84
// DialogueOn ;
5598: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5602: LD_INT 22
5604: PUSH
5605: LD_INT 1
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PUSH
5612: LD_INT 26
5614: PUSH
5615: LD_INT 1
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: LD_EXP 1
5630: PUSH
5631: EMPTY
5632: LIST
5633: DIFF
5634: PPUSH
5635: CALL_OW 69
5639: PPUSH
5640: LD_STRING D8-Sol1-1
5642: PPUSH
5643: LD_STRING D8-Sol1-1
5645: PPUSH
5646: CALL 7261 0 3
// if IsOK ( DeltaDoctor ) then
5650: LD_EXP 17
5654: PPUSH
5655: CALL_OW 302
5659: IFFALSE 5675
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5661: LD_EXP 17
5665: PPUSH
5666: LD_STRING D8-Sci1-1
5668: PPUSH
5669: CALL_OW 88
5673: GO 5774
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5675: LD_INT 22
5677: PUSH
5678: LD_INT 1
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 26
5687: PUSH
5688: LD_INT 1
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 2
5697: PUSH
5698: LD_INT 25
5700: PUSH
5701: LD_INT 1
5703: PUSH
5704: EMPTY
5705: LIST
5706: LIST
5707: PUSH
5708: LD_INT 25
5710: PUSH
5711: LD_INT 2
5713: PUSH
5714: EMPTY
5715: LIST
5716: LIST
5717: PUSH
5718: LD_INT 25
5720: PUSH
5721: LD_INT 3
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 25
5730: PUSH
5731: LD_INT 4
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: LIST
5742: LIST
5743: LIST
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: LIST
5749: PUSH
5750: LD_EXP 1
5754: PUSH
5755: EMPTY
5756: LIST
5757: DIFF
5758: PPUSH
5759: CALL_OW 69
5763: PPUSH
5764: LD_STRING D8-Sol1-1
5766: PPUSH
5767: LD_STRING D8-Sol1-1
5769: PPUSH
5770: CALL 7261 0 3
// Say ( JMM , D8-JMM-1 ) ;
5774: LD_EXP 1
5778: PPUSH
5779: LD_STRING D8-JMM-1
5781: PPUSH
5782: CALL_OW 88
// DialogueOff ;
5786: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
5790: LD_INT 2
5792: PPUSH
5793: LD_INT 2
5795: PPUSH
5796: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
5800: LD_INT 1
5802: PPUSH
5803: LD_INT 2
5805: PPUSH
5806: LD_INT 2
5808: PPUSH
5809: LD_INT 1
5811: PPUSH
5812: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
5816: LD_INT 3
5818: PPUSH
5819: LD_INT 2
5821: PPUSH
5822: LD_INT 1
5824: PPUSH
5825: LD_INT 1
5827: PPUSH
5828: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
5832: LD_ADDR_VAR 0 2
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 2
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 21
5849: PUSH
5850: LD_INT 1
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PPUSH
5861: CALL_OW 69
5865: PUSH
5866: FOR_IN
5867: IFFALSE 6007
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 2
5873: PPUSH
5874: CALL_OW 122
// wait ( 0 0$1 ) ;
5878: LD_INT 35
5880: PPUSH
5881: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_INT 77
5892: PPUSH
5893: LD_INT 10
5895: PPUSH
5896: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
5900: LD_VAR 0 2
5904: PPUSH
5905: LD_INT 82
5907: PPUSH
5908: LD_INT 5
5910: PPUSH
5911: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
5915: LD_VAR 0 2
5919: PPUSH
5920: LD_INT 95
5922: PPUSH
5923: LD_INT 12
5925: PPUSH
5926: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
5930: LD_VAR 0 2
5934: PPUSH
5935: LD_INT 102
5937: PPUSH
5938: LD_INT 11
5940: PPUSH
5941: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
5945: LD_VAR 0 2
5949: PPUSH
5950: LD_INT 116
5952: PPUSH
5953: LD_INT 15
5955: PPUSH
5956: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
5960: LD_VAR 0 2
5964: PPUSH
5965: LD_INT 140
5967: PPUSH
5968: LD_INT 25
5970: PPUSH
5971: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: LD_INT 160
5982: PPUSH
5983: LD_INT 56
5985: PPUSH
5986: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
5990: LD_VAR 0 2
5994: PPUSH
5995: LD_INT 189
5997: PPUSH
5998: LD_INT 79
6000: PPUSH
6001: CALL_OW 174
// end ;
6005: GO 5866
6007: POP
6008: POP
// arabianAttackersAI = 1 ;
6009: LD_ADDR_EXP 45
6013: PUSH
6014: LD_INT 1
6016: ST_TO_ADDR
// wait ( 0 0$30 ) ;
6017: LD_INT 1050
6019: PPUSH
6020: CALL_OW 67
// if IsOk ( Gary ) then
6024: LD_EXP 10
6028: PPUSH
6029: CALL_OW 302
6033: IFFALSE 6047
// Say ( Gary , D8a-Gary-1 ) ;
6035: LD_EXP 10
6039: PPUSH
6040: LD_STRING D8a-Gary-1
6042: PPUSH
6043: CALL_OW 88
// wait ( 0 0$5 ) ;
6047: LD_INT 175
6049: PPUSH
6050: CALL_OW 67
// if IsOK ( Khatam ) then
6054: LD_EXP 14
6058: PPUSH
6059: CALL_OW 302
6063: IFFALSE 6335
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Khatam , Joan ] [ 1 ] ;
6065: LD_ADDR_VAR 0 3
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 1
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 26
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: LD_INT 2
6092: PUSH
6093: LD_INT 25
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 25
6105: PUSH
6106: LD_INT 2
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: LD_INT 25
6115: PUSH
6116: LD_INT 3
6118: PUSH
6119: EMPTY
6120: LIST
6121: LIST
6122: PUSH
6123: LD_INT 25
6125: PUSH
6126: LD_INT 4
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: PUSH
6150: LD_EXP 1
6154: PUSH
6155: LD_EXP 14
6159: PUSH
6160: LD_EXP 13
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: LIST
6169: PUSH
6170: LD_INT 1
6172: ARRAY
6173: DIFF
6174: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
6175: LD_EXP 14
6179: PPUSH
6180: LD_INT 8
6182: PPUSH
6183: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
6187: LD_EXP 14
6191: PPUSH
6192: CALL_OW 122
// wait ( 0 0$1 ) ;
6196: LD_INT 35
6198: PPUSH
6199: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
6203: LD_EXP 14
6207: PPUSH
6208: CALL_OW 121
// wait ( 0 0$1 ) ;
6212: LD_INT 35
6214: PPUSH
6215: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
6219: LD_EXP 14
6223: PPUSH
6224: LD_INT 7
6226: PPUSH
6227: CALL_OW 113
// DialogueOn ;
6231: CALL_OW 6
// DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
6235: LD_VAR 0 3
6239: PPUSH
6240: LD_STRING D8b-Sol1-1
6242: PPUSH
6243: LD_STRING D8b-FSol1-1
6245: PPUSH
6246: CALL 7261 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
6250: LD_EXP 14
6254: PPUSH
6255: LD_STRING D8b-Khat-1
6257: PPUSH
6258: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-2 , D8b-FSol1-2 ) ;
6262: LD_VAR 0 3
6266: PPUSH
6267: LD_STRING D8b-Sol1-2
6269: PPUSH
6270: LD_STRING D8b-FSol1-2
6272: PPUSH
6273: CALL 7261 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
6277: LD_EXP 14
6281: PPUSH
6282: LD_STRING D8b-Khat-2
6284: PPUSH
6285: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-3 , D8b-FSol1-3 ) ;
6289: LD_VAR 0 3
6293: PPUSH
6294: LD_STRING D8b-Sol1-3
6296: PPUSH
6297: LD_STRING D8b-FSol1-3
6299: PPUSH
6300: CALL 7261 0 3
// Say ( Khatam , D8b-Khat-3 ) ;
6304: LD_EXP 14
6308: PPUSH
6309: LD_STRING D8b-Khat-3
6311: PPUSH
6312: CALL_OW 88
// DialogRandom ( tmp , D8b-Sol1-4 , D8b-FSol1-4 ) ;
6316: LD_VAR 0 3
6320: PPUSH
6321: LD_STRING D8b-Sol1-4
6323: PPUSH
6324: LD_STRING D8b-FSol1-4
6326: PPUSH
6327: CALL 7261 0 3
// DialogueOff ;
6331: CALL_OW 7
// end ; end ;
6335: LD_VAR 0 1
6339: RET
// every 0 0$1 do var i ;
6340: GO 6342
6342: DISABLE
6343: LD_INT 0
6345: PPUSH
// begin enable ;
6346: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6347: LD_ADDR_VAR 0 1
6351: PUSH
6352: LD_INT 7
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 2
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 70
6369: PUSH
6370: FOR_IN
6371: IFFALSE 6439
// begin if GetClass ( i ) = 4 then
6373: LD_VAR 0 1
6377: PPUSH
6378: CALL_OW 257
6382: PUSH
6383: LD_INT 4
6385: EQUAL
6386: IFFALSE 6398
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6388: LD_INT 1
6390: PPUSH
6391: LD_STRING 10_ScientistsEscape_1
6393: PPUSH
6394: CALL_OW 39
// if i = Dietrich then
6398: LD_VAR 0 1
6402: PUSH
6403: LD_EXP 26
6407: EQUAL
6408: IFFALSE 6420
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6410: LD_INT 1
6412: PPUSH
6413: LD_STRING 10_GensherEscape_1
6415: PPUSH
6416: CALL_OW 39
// arabianEscape = 1 ;
6420: LD_ADDR_EXP 46
6424: PUSH
6425: LD_INT 1
6427: ST_TO_ADDR
// RemoveUnit ( i ) ;
6428: LD_VAR 0 1
6432: PPUSH
6433: CALL_OW 64
// end ;
6437: GO 6370
6439: POP
6440: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6441: LD_EXP 14
6445: PPUSH
6446: LD_INT 7
6448: PPUSH
6449: CALL_OW 308
6453: IFFALSE 6472
// begin KhatamStatus = 1 ;
6455: LD_ADDR_EXP 49
6459: PUSH
6460: LD_INT 1
6462: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6463: LD_EXP 14
6467: PPUSH
6468: CALL_OW 64
// end ; end ;
6472: PPOPN 1
6474: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6475: LD_EXP 14
6479: PPUSH
6480: CALL_OW 301
6484: IFFALSE 6497
6486: GO 6488
6488: DISABLE
// KhatamStatus = 0 ;
6489: LD_ADDR_EXP 49
6493: PUSH
6494: LD_INT 0
6496: ST_TO_ADDR
6497: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
6498: LD_INT 22
6500: PUSH
6501: LD_INT 2
6503: PUSH
6504: EMPTY
6505: LIST
6506: LIST
6507: PUSH
6508: LD_INT 21
6510: PUSH
6511: LD_INT 1
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PPUSH
6522: CALL_OW 69
6526: PUSH
6527: LD_INT 0
6529: EQUAL
6530: PUSH
6531: LD_INT 22
6533: PUSH
6534: LD_INT 4
6536: PUSH
6537: EMPTY
6538: LIST
6539: LIST
6540: PUSH
6541: LD_INT 21
6543: PUSH
6544: LD_INT 1
6546: PUSH
6547: EMPTY
6548: LIST
6549: LIST
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 69
6559: PUSH
6560: LD_INT 0
6562: EQUAL
6563: AND
6564: IFFALSE 6577
6566: GO 6568
6568: DISABLE
// arabianDefeated = 1 ;
6569: LD_ADDR_EXP 47
6573: PUSH
6574: LD_INT 1
6576: ST_TO_ADDR
6577: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 do
6578: LD_INT 54
6580: PPUSH
6581: LD_INT 1
6583: PPUSH
6584: CALL_OW 321
6588: PUSH
6589: LD_INT 2
6591: EQUAL
6592: PUSH
6593: LD_INT 55
6595: PPUSH
6596: LD_INT 1
6598: PPUSH
6599: CALL_OW 321
6603: PUSH
6604: LD_INT 2
6606: EQUAL
6607: AND
6608: PUSH
6609: LD_INT 21
6611: PPUSH
6612: LD_INT 1
6614: PPUSH
6615: CALL_OW 321
6619: PUSH
6620: LD_INT 2
6622: EQUAL
6623: AND
6624: PUSH
6625: LD_INT 22
6627: PPUSH
6628: LD_INT 1
6630: PPUSH
6631: CALL_OW 321
6635: PUSH
6636: LD_INT 2
6638: EQUAL
6639: AND
6640: PUSH
6641: LD_INT 12
6643: PPUSH
6644: LD_INT 1
6646: PPUSH
6647: CALL_OW 321
6651: PUSH
6652: LD_INT 2
6654: EQUAL
6655: AND
6656: PUSH
6657: LD_INT 32
6659: PPUSH
6660: LD_INT 1
6662: PPUSH
6663: CALL_OW 321
6667: PUSH
6668: LD_INT 2
6670: EQUAL
6671: AND
6672: PUSH
6673: LD_EXP 53
6677: PUSH
6678: LD_INT 0
6680: EQUAL
6681: AND
6682: PUSH
6683: LD_EXP 48
6687: PUSH
6688: LD_INT 0
6690: EQUAL
6691: AND
6692: IFFALSE 6709
6694: GO 6696
6696: DISABLE
// begin PrepareArabianTrait ;
6697: CALL 5476 0 0
// arabianTrait = 1 ;
6701: LD_ADDR_EXP 48
6705: PUSH
6706: LD_INT 1
6708: ST_TO_ADDR
// end ;
6709: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6710: LD_EXP 28
6714: PUSH
6715: LD_INT 1
6717: EQUAL
6718: PUSH
6719: LD_STRING 02_mikhailStatus_1
6721: PPUSH
6722: LD_INT 0
6724: PPUSH
6725: CALL_OW 30
6729: PUSH
6730: LD_INT 1
6732: EQUAL
6733: AND
6734: IFFALSE 6743
6736: GO 6738
6738: DISABLE
// PrepareCornell ;
6739: CALL 2347 0 0
6743: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6744: LD_INT 1
6746: PPUSH
6747: LD_EXP 19
6751: PPUSH
6752: CALL_OW 292
6756: IFFALSE 6981
6758: GO 6760
6760: DISABLE
// begin InGameOn ;
6761: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6765: LD_EXP 19
6769: PPUSH
6770: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6774: LD_EXP 19
6778: PPUSH
6779: LD_STRING D7-Corn-1
6781: PPUSH
6782: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Joan ] , D7-Sol1-1 , D7-FSol1-1 ) ;
6786: LD_INT 22
6788: PUSH
6789: LD_INT 1
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: PUSH
6796: LD_INT 2
6798: PUSH
6799: LD_INT 25
6801: PUSH
6802: LD_INT 1
6804: PUSH
6805: EMPTY
6806: LIST
6807: LIST
6808: PUSH
6809: LD_INT 25
6811: PUSH
6812: LD_INT 2
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_INT 25
6821: PUSH
6822: LD_INT 3
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 4
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: PUSH
6846: EMPTY
6847: LIST
6848: LIST
6849: PPUSH
6850: CALL_OW 69
6854: PUSH
6855: LD_EXP 1
6859: PUSH
6860: LD_EXP 13
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: DIFF
6869: PPUSH
6870: LD_STRING D7-Sol1-1
6872: PPUSH
6873: LD_STRING D7-FSol1-1
6875: PPUSH
6876: CALL 7261 0 3
// CenterNowOnUnits ( Cornell ) ;
6880: LD_EXP 19
6884: PPUSH
6885: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
6889: LD_EXP 19
6893: PPUSH
6894: LD_STRING D7-Corn-2
6896: PPUSH
6897: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6901: LD_EXP 1
6905: PPUSH
6906: LD_STRING D7-JMM-2
6908: PPUSH
6909: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
6913: LD_EXP 19
6917: PPUSH
6918: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
6922: LD_EXP 19
6926: PPUSH
6927: LD_STRING D7-Corn-3
6929: PPUSH
6930: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
6934: LD_EXP 19
6938: PPUSH
6939: LD_INT 250
6941: PPUSH
6942: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
6946: LD_EXP 19
6950: PPUSH
6951: LD_INT 1
6953: PPUSH
6954: CALL_OW 235
// wait ( 0 0$1 ) ;
6958: LD_INT 35
6960: PPUSH
6961: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
6965: LD_EXP 1
6969: PPUSH
6970: LD_STRING D7-JMM-3
6972: PPUSH
6973: CALL_OW 88
// InGameOff ;
6977: CALL_OW 9
// end ;
6981: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
6982: LD_EXP 19
6986: PPUSH
6987: CALL_OW 255
6991: PUSH
6992: LD_INT 1
6994: EQUAL
6995: PUSH
6996: LD_EXP 19
7000: PPUSH
7001: CALL_OW 256
7005: PUSH
7006: LD_INT 251
7008: GREATER
7009: AND
7010: IFFALSE 7203
7012: GO 7014
7014: DISABLE
// begin DialogueOn ;
7015: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
7019: LD_EXP 1
7023: PPUSH
7024: LD_STRING D7a-JMM-1
7026: PPUSH
7027: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
7031: LD_EXP 19
7035: PPUSH
7036: LD_STRING D7a-Corn-1
7038: PPUSH
7039: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
7043: LD_EXP 1
7047: PPUSH
7048: LD_STRING D7a-JMM-2
7050: PPUSH
7051: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
7055: LD_EXP 19
7059: PPUSH
7060: LD_STRING D7a-Corn-2
7062: PPUSH
7063: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
7067: LD_EXP 1
7071: PPUSH
7072: LD_STRING D7a-JMM-3
7074: PPUSH
7075: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
7079: LD_EXP 19
7083: PPUSH
7084: LD_STRING D7a-Corn-3
7086: PPUSH
7087: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
7091: LD_EXP 1
7095: PPUSH
7096: LD_STRING D7a-JMM-4
7098: PPUSH
7099: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
7103: LD_EXP 19
7107: PPUSH
7108: LD_STRING D7a-Corn-4
7110: PPUSH
7111: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
7115: LD_EXP 1
7119: PPUSH
7120: LD_STRING D7a-JMM-5
7122: PPUSH
7123: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
7127: LD_EXP 19
7131: PPUSH
7132: LD_STRING D7a-Corn-5
7134: PPUSH
7135: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
7139: LD_EXP 1
7143: PPUSH
7144: LD_STRING D7a-JMM-6
7146: PPUSH
7147: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
7151: LD_EXP 19
7155: PPUSH
7156: LD_STRING D7a-Corn-6
7158: PPUSH
7159: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
7163: LD_EXP 1
7167: PPUSH
7168: LD_STRING D7a-JMM-7
7170: PPUSH
7171: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
7175: LD_EXP 19
7179: PPUSH
7180: LD_STRING D7a-Corn-7
7182: PPUSH
7183: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7187: LD_EXP 1
7191: PPUSH
7192: LD_STRING D7a-JMM-8
7194: PPUSH
7195: CALL_OW 88
// DialogueOff ;
7199: CALL_OW 7
// end ; end_of_file
7203: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7204: LD_INT 0
7206: PPUSH
7207: PPUSH
// if exist_mode then
7208: LD_VAR 0 2
7212: IFFALSE 7231
// unit := CreateCharacter ( ident ) else
7214: LD_ADDR_VAR 0 4
7218: PUSH
7219: LD_VAR 0 1
7223: PPUSH
7224: CALL_OW 34
7228: ST_TO_ADDR
7229: GO 7246
// unit := NewCharacter ( ident ) ;
7231: LD_ADDR_VAR 0 4
7235: PUSH
7236: LD_VAR 0 1
7240: PPUSH
7241: CALL_OW 25
7245: ST_TO_ADDR
// result := unit ;
7246: LD_ADDR_VAR 0 3
7250: PUSH
7251: LD_VAR 0 4
7255: ST_TO_ADDR
// end ;
7256: LD_VAR 0 3
7260: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7261: LD_INT 0
7263: PPUSH
7264: PPUSH
7265: PPUSH
// rnd = rand ( 1 , characters ) ;
7266: LD_ADDR_VAR 0 6
7270: PUSH
7271: LD_INT 1
7273: PPUSH
7274: LD_VAR 0 1
7278: PPUSH
7279: CALL_OW 12
7283: ST_TO_ADDR
// for i = 1 to characters do
7284: LD_ADDR_VAR 0 5
7288: PUSH
7289: DOUBLE
7290: LD_INT 1
7292: DEC
7293: ST_TO_ADDR
7294: LD_VAR 0 1
7298: PUSH
7299: FOR_TO
7300: IFFALSE 7410
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7302: LD_VAR 0 5
7306: PUSH
7307: LD_VAR 0 6
7311: EQUAL
7312: PUSH
7313: LD_VAR 0 1
7317: PUSH
7318: LD_VAR 0 5
7322: ARRAY
7323: PPUSH
7324: CALL_OW 258
7328: PUSH
7329: LD_INT 1
7331: EQUAL
7332: AND
7333: IFFALSE 7355
// Say ( characters [ i ] , dialogMID ) ;
7335: LD_VAR 0 1
7339: PUSH
7340: LD_VAR 0 5
7344: ARRAY
7345: PPUSH
7346: LD_VAR 0 2
7350: PPUSH
7351: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7355: LD_VAR 0 5
7359: PUSH
7360: LD_VAR 0 6
7364: EQUAL
7365: PUSH
7366: LD_VAR 0 1
7370: PUSH
7371: LD_VAR 0 5
7375: ARRAY
7376: PPUSH
7377: CALL_OW 258
7381: PUSH
7382: LD_INT 2
7384: EQUAL
7385: AND
7386: IFFALSE 7408
// Say ( characters [ i ] , dialogFID ) ;
7388: LD_VAR 0 1
7392: PUSH
7393: LD_VAR 0 5
7397: ARRAY
7398: PPUSH
7399: LD_VAR 0 3
7403: PPUSH
7404: CALL_OW 88
// end ;
7408: GO 7299
7410: POP
7411: POP
// end ;
7412: LD_VAR 0 4
7416: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
// for i in charactersList do
7421: LD_ADDR_VAR 0 4
7425: PUSH
7426: LD_VAR 0 1
7430: PUSH
7431: FOR_IN
7432: IFFALSE 7461
// begin if IsOk ( i ) then
7434: LD_VAR 0 4
7438: PPUSH
7439: CALL_OW 302
7443: IFFALSE 7459
// SaveCharacters ( i , ident ) ;
7445: LD_VAR 0 4
7449: PPUSH
7450: LD_VAR 0 2
7454: PPUSH
7455: CALL_OW 38
// end ;
7459: GO 7431
7461: POP
7462: POP
// end ;
7463: LD_VAR 0 3
7467: RET
// export function PrepareDifficulty ; begin
7468: LD_INT 0
7470: PPUSH
// if difficulty = 1 then
7471: LD_OWVAR 67
7475: PUSH
7476: LD_INT 1
7478: EQUAL
7479: IFFALSE 7523
// begin RuSolMinLevel = 4 ;
7481: LD_ADDR_EXP 35
7485: PUSH
7486: LD_INT 4
7488: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7489: LD_ADDR_EXP 36
7493: PUSH
7494: LD_INT 7
7496: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7497: LD_INT 51
7499: PPUSH
7500: LD_INT 6
7502: PPUSH
7503: LD_INT 2
7505: PPUSH
7506: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7510: LD_INT 51
7512: PPUSH
7513: LD_INT 5
7515: PPUSH
7516: LD_INT 2
7518: PPUSH
7519: CALL_OW 322
// end ; if difficulty = 2 then
7523: LD_OWVAR 67
7527: PUSH
7528: LD_INT 2
7530: EQUAL
7531: IFFALSE 7627
// begin RuSolMinLevel = 5 ;
7533: LD_ADDR_EXP 35
7537: PUSH
7538: LD_INT 5
7540: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7541: LD_ADDR_EXP 36
7545: PUSH
7546: LD_INT 7
7548: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7549: LD_INT 51
7551: PPUSH
7552: LD_INT 6
7554: PPUSH
7555: LD_INT 2
7557: PPUSH
7558: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7562: LD_INT 57
7564: PPUSH
7565: LD_INT 6
7567: PPUSH
7568: LD_INT 2
7570: PPUSH
7571: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7575: LD_INT 63
7577: PPUSH
7578: LD_INT 6
7580: PPUSH
7581: LD_INT 2
7583: PPUSH
7584: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7588: LD_INT 51
7590: PPUSH
7591: LD_INT 5
7593: PPUSH
7594: LD_INT 2
7596: PPUSH
7597: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7601: LD_INT 5
7603: PPUSH
7604: LD_INT 2
7606: PPUSH
7607: LD_INT 2
7609: PPUSH
7610: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7614: LD_INT 5
7616: PPUSH
7617: LD_INT 5
7619: PPUSH
7620: LD_INT 2
7622: PPUSH
7623: CALL_OW 322
// end ; if difficulty = 3 then
7627: LD_OWVAR 67
7631: PUSH
7632: LD_INT 3
7634: EQUAL
7635: IFFALSE 7783
// begin RuSolMinLevel = 6 ;
7637: LD_ADDR_EXP 35
7641: PUSH
7642: LD_INT 6
7644: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7645: LD_ADDR_EXP 36
7649: PUSH
7650: LD_INT 8
7652: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7653: LD_INT 51
7655: PPUSH
7656: LD_INT 6
7658: PPUSH
7659: LD_INT 2
7661: PPUSH
7662: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7666: LD_INT 57
7668: PPUSH
7669: LD_INT 6
7671: PPUSH
7672: LD_INT 2
7674: PPUSH
7675: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7679: LD_INT 52
7681: PPUSH
7682: LD_INT 6
7684: PPUSH
7685: LD_INT 2
7687: PPUSH
7688: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7692: LD_INT 58
7694: PPUSH
7695: LD_INT 6
7697: PPUSH
7698: LD_INT 2
7700: PPUSH
7701: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7705: LD_INT 63
7707: PPUSH
7708: LD_INT 6
7710: PPUSH
7711: LD_INT 2
7713: PPUSH
7714: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7718: LD_INT 64
7720: PPUSH
7721: LD_INT 6
7723: PPUSH
7724: LD_INT 2
7726: PPUSH
7727: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7731: LD_INT 51
7733: PPUSH
7734: LD_INT 5
7736: PPUSH
7737: LD_INT 2
7739: PPUSH
7740: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7744: LD_INT 52
7746: PPUSH
7747: LD_INT 5
7749: PPUSH
7750: LD_INT 2
7752: PPUSH
7753: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7757: LD_INT 66
7759: PPUSH
7760: LD_INT 2
7762: PPUSH
7763: LD_INT 2
7765: PPUSH
7766: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7770: LD_INT 66
7772: PPUSH
7773: LD_INT 5
7775: PPUSH
7776: LD_INT 2
7778: PPUSH
7779: CALL_OW 322
// end ; end ;
7783: LD_VAR 0 1
7787: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
7788: LD_INT 0
7790: PPUSH
7791: PPUSH
7792: PPUSH
7793: PPUSH
// ruPossition = position ;
7794: LD_ADDR_EXP 40
7798: PUSH
7799: LD_VAR 0 1
7803: ST_TO_ADDR
// if position = 1 then
7804: LD_VAR 0 1
7808: PUSH
7809: LD_INT 1
7811: EQUAL
7812: IFFALSE 8588
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7814: LD_ADDR_VAR 0 4
7818: PUSH
7819: LD_INT 22
7821: PUSH
7822: LD_INT 3
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 25
7831: PUSH
7832: LD_INT 2
7834: PUSH
7835: EMPTY
7836: LIST
7837: LIST
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PPUSH
7843: CALL_OW 69
7847: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
7848: LD_ADDR_VAR 0 5
7852: PUSH
7853: LD_INT 0
7855: PUSH
7856: LD_INT 49
7858: PUSH
7859: LD_INT 74
7861: PUSH
7862: LD_INT 3
7864: PUSH
7865: EMPTY
7866: LIST
7867: LIST
7868: LIST
7869: LIST
7870: PUSH
7871: LD_INT 4
7873: PUSH
7874: LD_INT 73
7876: PUSH
7877: LD_INT 88
7879: PUSH
7880: LD_INT 5
7882: PUSH
7883: EMPTY
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: PUSH
7889: LD_INT 4
7891: PUSH
7892: LD_INT 56
7894: PUSH
7895: LD_INT 62
7897: PUSH
7898: LD_INT 3
7900: PUSH
7901: EMPTY
7902: LIST
7903: LIST
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 29
7909: PUSH
7910: LD_INT 43
7912: PUSH
7913: LD_INT 68
7915: PUSH
7916: LD_INT 2
7918: PUSH
7919: EMPTY
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: PUSH
7925: LD_INT 30
7927: PUSH
7928: LD_INT 43
7930: PUSH
7931: LD_INT 79
7933: PUSH
7934: LD_INT 5
7936: PUSH
7937: EMPTY
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: PUSH
7943: LD_INT 28
7945: PUSH
7946: LD_INT 60
7948: PUSH
7949: LD_INT 75
7951: PUSH
7952: LD_INT 1
7954: PUSH
7955: EMPTY
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: PUSH
7961: LD_INT 2
7963: PUSH
7964: LD_INT 50
7966: PUSH
7967: LD_INT 87
7969: PUSH
7970: LD_INT 1
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: PUSH
7979: LD_INT 28
7981: PUSH
7982: LD_INT 45
7984: PUSH
7985: LD_INT 67
7987: PUSH
7988: LD_INT 2
7990: PUSH
7991: EMPTY
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: PUSH
7997: LD_INT 17
7999: PUSH
8000: LD_INT 47
8002: PUSH
8003: LD_INT 84
8005: PUSH
8006: LD_INT 2
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 18
8017: PUSH
8018: LD_INT 46
8020: PUSH
8021: LD_INT 87
8023: PUSH
8024: LD_INT 1
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: LIST
8031: LIST
8032: PUSH
8033: LD_INT 28
8035: PUSH
8036: LD_INT 41
8038: PUSH
8039: LD_INT 64
8041: PUSH
8042: LD_INT 5
8044: PUSH
8045: EMPTY
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: PUSH
8051: LD_INT 32
8053: PUSH
8054: LD_INT 75
8056: PUSH
8057: LD_INT 76
8059: PUSH
8060: LD_INT 5
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: PUSH
8069: LD_INT 32
8071: PUSH
8072: LD_INT 77
8074: PUSH
8075: LD_INT 75
8077: PUSH
8078: LD_INT 5
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 32
8089: PUSH
8090: LD_INT 69
8092: PUSH
8093: LD_INT 68
8095: PUSH
8096: LD_INT 3
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: LIST
8103: LIST
8104: PUSH
8105: LD_INT 32
8107: PUSH
8108: LD_INT 59
8110: PUSH
8111: LD_INT 96
8113: PUSH
8114: LD_INT 5
8116: PUSH
8117: EMPTY
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: PUSH
8123: LD_INT 32
8125: PUSH
8126: LD_INT 56
8128: PUSH
8129: LD_INT 96
8131: PUSH
8132: LD_INT 0
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 32
8143: PUSH
8144: LD_INT 51
8146: PUSH
8147: LD_INT 61
8149: PUSH
8150: LD_INT 3
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PUSH
8159: LD_INT 32
8161: PUSH
8162: LD_INT 42
8164: PUSH
8165: LD_INT 60
8167: PUSH
8168: LD_INT 3
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: LIST
8175: LIST
8176: PUSH
8177: LD_INT 32
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: LD_INT 58
8185: PUSH
8186: LD_INT 3
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: PUSH
8195: LD_INT 32
8197: PUSH
8198: LD_INT 39
8200: PUSH
8201: LD_INT 59
8203: PUSH
8204: LD_INT 3
8206: PUSH
8207: EMPTY
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: PUSH
8213: LD_INT 32
8215: PUSH
8216: LD_INT 61
8218: PUSH
8219: LD_INT 64
8221: PUSH
8222: LD_INT 3
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: PUSH
8231: LD_INT 33
8233: PUSH
8234: LD_INT 63
8236: PUSH
8237: LD_INT 90
8239: PUSH
8240: LD_INT 5
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: LIST
8247: LIST
8248: PUSH
8249: LD_INT 33
8251: PUSH
8252: LD_INT 64
8254: PUSH
8255: LD_INT 88
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: PUSH
8267: LD_INT 33
8269: PUSH
8270: LD_INT 72
8272: PUSH
8273: LD_INT 82
8275: PUSH
8276: LD_INT 5
8278: PUSH
8279: EMPTY
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 6
8287: PUSH
8288: LD_INT 42
8290: PUSH
8291: LD_INT 74
8293: PUSH
8294: LD_INT 1
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_INT 6
8305: PUSH
8306: LD_INT 56
8308: PUSH
8309: LD_INT 77
8311: PUSH
8312: LD_INT 2
8314: PUSH
8315: EMPTY
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: PUSH
8321: LD_INT 21
8323: PUSH
8324: LD_INT 54
8326: PUSH
8327: LD_INT 91
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: EMPTY
8334: LIST
8335: LIST
8336: LIST
8337: LIST
8338: PUSH
8339: LD_INT 16
8341: PUSH
8342: LD_INT 50
8344: PUSH
8345: LD_INT 83
8347: PUSH
8348: LD_INT 3
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: PUSH
8357: LD_INT 24
8359: PUSH
8360: LD_INT 50
8362: PUSH
8363: LD_INT 90
8365: PUSH
8366: LD_INT 0
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: LIST
8404: LIST
8405: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8406: LD_ADDR_VAR 0 3
8410: PUSH
8411: LD_INT 22
8413: PUSH
8414: LD_INT 3
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 3
8423: PUSH
8424: LD_INT 25
8426: PUSH
8427: LD_INT 2
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PPUSH
8442: CALL_OW 69
8446: PUSH
8447: FOR_IN
8448: IFFALSE 8495
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
8450: LD_VAR 0 3
8454: PPUSH
8455: LD_VAR 0 5
8459: PUSH
8460: LD_INT 2
8462: ARRAY
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PUSH
8468: LD_INT 3
8470: PLUS
8471: PPUSH
8472: LD_VAR 0 5
8476: PUSH
8477: LD_INT 2
8479: ARRAY
8480: PUSH
8481: LD_INT 3
8483: ARRAY
8484: PUSH
8485: LD_INT 2
8487: PLUS
8488: PPUSH
8489: CALL_OW 171
8493: GO 8447
8495: POP
8496: POP
// for i := 1 to buildingsTab do
8497: LD_ADDR_VAR 0 3
8501: PUSH
8502: DOUBLE
8503: LD_INT 1
8505: DEC
8506: ST_TO_ADDR
8507: LD_VAR 0 5
8511: PUSH
8512: FOR_TO
8513: IFFALSE 8586
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8515: LD_VAR 0 4
8519: PPUSH
8520: LD_VAR 0 5
8524: PUSH
8525: LD_VAR 0 3
8529: ARRAY
8530: PUSH
8531: LD_INT 1
8533: ARRAY
8534: PPUSH
8535: LD_VAR 0 5
8539: PUSH
8540: LD_VAR 0 3
8544: ARRAY
8545: PUSH
8546: LD_INT 2
8548: ARRAY
8549: PPUSH
8550: LD_VAR 0 5
8554: PUSH
8555: LD_VAR 0 3
8559: ARRAY
8560: PUSH
8561: LD_INT 3
8563: ARRAY
8564: PPUSH
8565: LD_VAR 0 5
8569: PUSH
8570: LD_VAR 0 3
8574: ARRAY
8575: PUSH
8576: LD_INT 4
8578: ARRAY
8579: PPUSH
8580: CALL_OW 205
8584: GO 8512
8586: POP
8587: POP
// end ; if position = 2 then
8588: LD_VAR 0 1
8592: PUSH
8593: LD_INT 2
8595: EQUAL
8596: IFFALSE 9239
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8598: LD_ADDR_VAR 0 4
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 25
8615: PUSH
8616: LD_INT 2
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PPUSH
8627: CALL_OW 69
8631: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8632: LD_ADDR_VAR 0 5
8636: PUSH
8637: LD_INT 0
8639: PUSH
8640: LD_INT 104
8642: PUSH
8643: LD_INT 110
8645: PUSH
8646: LD_INT 5
8648: PUSH
8649: EMPTY
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 4
8657: PUSH
8658: LD_INT 98
8660: PUSH
8661: LD_INT 90
8663: PUSH
8664: LD_INT 3
8666: PUSH
8667: EMPTY
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 29
8675: PUSH
8676: LD_INT 103
8678: PUSH
8679: LD_INT 114
8681: PUSH
8682: LD_INT 2
8684: PUSH
8685: EMPTY
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: PUSH
8691: LD_INT 30
8693: PUSH
8694: LD_INT 99
8696: PUSH
8697: LD_INT 114
8699: PUSH
8700: LD_INT 3
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: LIST
8708: PUSH
8709: LD_INT 28
8711: PUSH
8712: LD_INT 100
8714: PUSH
8715: LD_INT 112
8717: PUSH
8718: LD_INT 1
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: LIST
8725: LIST
8726: PUSH
8727: LD_INT 2
8729: PUSH
8730: LD_INT 92
8732: PUSH
8733: LD_INT 101
8735: PUSH
8736: LD_INT 0
8738: PUSH
8739: EMPTY
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 28
8747: PUSH
8748: LD_INT 97
8750: PUSH
8751: LD_INT 116
8753: PUSH
8754: LD_INT 5
8756: PUSH
8757: EMPTY
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: PUSH
8763: LD_INT 17
8765: PUSH
8766: LD_INT 96
8768: PUSH
8769: LD_INT 101
8771: PUSH
8772: LD_INT 4
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 18
8783: PUSH
8784: LD_INT 88
8786: PUSH
8787: LD_INT 97
8789: PUSH
8790: LD_INT 2
8792: PUSH
8793: EMPTY
8794: LIST
8795: LIST
8796: LIST
8797: LIST
8798: PUSH
8799: LD_INT 28
8801: PUSH
8802: LD_INT 106
8804: PUSH
8805: LD_INT 92
8807: PUSH
8808: LD_INT 2
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: PUSH
8817: LD_INT 32
8819: PUSH
8820: LD_INT 88
8822: PUSH
8823: LD_INT 89
8825: PUSH
8826: LD_INT 2
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: PUSH
8835: LD_INT 32
8837: PUSH
8838: LD_INT 86
8840: PUSH
8841: LD_INT 90
8843: PUSH
8844: LD_INT 2
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 32
8855: PUSH
8856: LD_INT 85
8858: PUSH
8859: LD_INT 99
8861: PUSH
8862: LD_INT 2
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: PUSH
8871: LD_INT 32
8873: PUSH
8874: LD_INT 85
8876: PUSH
8877: LD_INT 107
8879: PUSH
8880: LD_INT 1
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 33
8891: PUSH
8892: LD_INT 105
8894: PUSH
8895: LD_INT 99
8897: PUSH
8898: LD_INT 1
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 33
8909: PUSH
8910: LD_INT 102
8912: PUSH
8913: LD_INT 92
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: PUSH
8925: LD_INT 33
8927: PUSH
8928: LD_INT 105
8930: PUSH
8931: LD_INT 92
8933: PUSH
8934: LD_INT 2
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 6
8945: PUSH
8946: LD_INT 92
8948: PUSH
8949: LD_INT 110
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 6
8963: PUSH
8964: LD_INT 103
8966: PUSH
8967: LD_INT 103
8969: PUSH
8970: LD_INT 5
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: PUSH
8979: LD_INT 21
8981: PUSH
8982: LD_INT 89
8984: PUSH
8985: LD_INT 101
8987: PUSH
8988: LD_INT 1
8990: PUSH
8991: EMPTY
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: PUSH
8997: LD_INT 16
8999: PUSH
9000: LD_INT 95
9002: PUSH
9003: LD_INT 104
9005: PUSH
9006: LD_INT 4
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 24
9017: PUSH
9018: LD_INT 92
9020: PUSH
9021: LD_INT 105
9023: PUSH
9024: LD_INT 0
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: PUSH
9033: EMPTY
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9057: LD_ADDR_VAR 0 3
9061: PUSH
9062: LD_INT 22
9064: PUSH
9065: LD_INT 3
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 3
9074: PUSH
9075: LD_INT 25
9077: PUSH
9078: LD_INT 2
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: PUSH
9085: EMPTY
9086: LIST
9087: LIST
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 69
9097: PUSH
9098: FOR_IN
9099: IFFALSE 9146
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
9101: LD_VAR 0 3
9105: PPUSH
9106: LD_VAR 0 5
9110: PUSH
9111: LD_INT 2
9113: ARRAY
9114: PUSH
9115: LD_INT 2
9117: ARRAY
9118: PUSH
9119: LD_INT 2
9121: PLUS
9122: PPUSH
9123: LD_VAR 0 5
9127: PUSH
9128: LD_INT 2
9130: ARRAY
9131: PUSH
9132: LD_INT 3
9134: ARRAY
9135: PUSH
9136: LD_INT 1
9138: PLUS
9139: PPUSH
9140: CALL_OW 171
9144: GO 9098
9146: POP
9147: POP
// for i := 1 to buildingsTab do
9148: LD_ADDR_VAR 0 3
9152: PUSH
9153: DOUBLE
9154: LD_INT 1
9156: DEC
9157: ST_TO_ADDR
9158: LD_VAR 0 5
9162: PUSH
9163: FOR_TO
9164: IFFALSE 9237
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9166: LD_VAR 0 4
9170: PPUSH
9171: LD_VAR 0 5
9175: PUSH
9176: LD_VAR 0 3
9180: ARRAY
9181: PUSH
9182: LD_INT 1
9184: ARRAY
9185: PPUSH
9186: LD_VAR 0 5
9190: PUSH
9191: LD_VAR 0 3
9195: ARRAY
9196: PUSH
9197: LD_INT 2
9199: ARRAY
9200: PPUSH
9201: LD_VAR 0 5
9205: PUSH
9206: LD_VAR 0 3
9210: ARRAY
9211: PUSH
9212: LD_INT 3
9214: ARRAY
9215: PPUSH
9216: LD_VAR 0 5
9220: PUSH
9221: LD_VAR 0 3
9225: ARRAY
9226: PUSH
9227: LD_INT 4
9229: ARRAY
9230: PPUSH
9231: CALL_OW 205
9235: GO 9163
9237: POP
9238: POP
// end ; if position = 3 then
9239: LD_VAR 0 1
9243: PUSH
9244: LD_INT 3
9246: EQUAL
9247: IFFALSE 10061
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9249: LD_ADDR_VAR 0 4
9253: PUSH
9254: LD_INT 22
9256: PUSH
9257: LD_INT 3
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 25
9266: PUSH
9267: LD_INT 2
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: PPUSH
9278: CALL_OW 69
9282: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9283: LD_ADDR_VAR 0 5
9287: PUSH
9288: LD_INT 0
9290: PUSH
9291: LD_INT 151
9293: PUSH
9294: LD_INT 71
9296: PUSH
9297: LD_INT 4
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: PUSH
9306: LD_INT 4
9308: PUSH
9309: LD_INT 145
9311: PUSH
9312: LD_INT 53
9314: PUSH
9315: LD_INT 3
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_INT 4
9326: PUSH
9327: LD_INT 172
9329: PUSH
9330: LD_INT 102
9332: PUSH
9333: LD_INT 5
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: LIST
9340: LIST
9341: PUSH
9342: LD_INT 29
9344: PUSH
9345: LD_INT 152
9347: PUSH
9348: LD_INT 85
9350: PUSH
9351: LD_INT 3
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: LD_INT 30
9362: PUSH
9363: LD_INT 156
9365: PUSH
9366: LD_INT 92
9368: PUSH
9369: LD_INT 3
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 28
9380: PUSH
9381: LD_INT 151
9383: PUSH
9384: LD_INT 66
9386: PUSH
9387: LD_INT 4
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: PUSH
9396: LD_INT 2
9398: PUSH
9399: LD_INT 163
9401: PUSH
9402: LD_INT 95
9404: PUSH
9405: LD_INT 5
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_INT 28
9416: PUSH
9417: LD_INT 149
9419: PUSH
9420: LD_INT 63
9422: PUSH
9423: LD_INT 4
9425: PUSH
9426: EMPTY
9427: LIST
9428: LIST
9429: LIST
9430: LIST
9431: PUSH
9432: LD_INT 17
9434: PUSH
9435: LD_INT 167
9437: PUSH
9438: LD_INT 99
9440: PUSH
9441: LD_INT 5
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: PUSH
9450: LD_INT 18
9452: PUSH
9453: LD_INT 163
9455: PUSH
9456: LD_INT 98
9458: PUSH
9459: LD_INT 0
9461: PUSH
9462: EMPTY
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: PUSH
9468: LD_INT 28
9470: PUSH
9471: LD_INT 154
9473: PUSH
9474: LD_INT 70
9476: PUSH
9477: LD_INT 4
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: PUSH
9486: LD_INT 32
9488: PUSH
9489: LD_INT 155
9491: PUSH
9492: LD_INT 62
9494: PUSH
9495: LD_INT 4
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: PUSH
9504: LD_INT 32
9506: PUSH
9507: LD_INT 161
9509: PUSH
9510: LD_INT 69
9512: PUSH
9513: LD_INT 4
9515: PUSH
9516: EMPTY
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 32
9524: PUSH
9525: LD_INT 168
9527: PUSH
9528: LD_INT 78
9530: PUSH
9531: LD_INT 4
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PUSH
9540: LD_INT 32
9542: PUSH
9543: LD_INT 163
9545: PUSH
9546: LD_INT 80
9548: PUSH
9549: LD_INT 5
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: LD_INT 32
9560: PUSH
9561: LD_INT 136
9563: PUSH
9564: LD_INT 73
9566: PUSH
9567: LD_INT 0
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 32
9578: PUSH
9579: LD_INT 157
9581: PUSH
9582: LD_INT 98
9584: PUSH
9585: LD_INT 0
9587: PUSH
9588: EMPTY
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: PUSH
9594: LD_INT 32
9596: PUSH
9597: LD_INT 150
9599: PUSH
9600: LD_INT 87
9602: PUSH
9603: LD_INT 1
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: LD_INT 33
9614: PUSH
9615: LD_INT 171
9617: PUSH
9618: LD_INT 97
9620: PUSH
9621: LD_INT 4
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_INT 33
9632: PUSH
9633: LD_INT 168
9635: PUSH
9636: LD_INT 92
9638: PUSH
9639: LD_INT 4
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 33
9650: PUSH
9651: LD_INT 166
9653: PUSH
9654: LD_INT 80
9656: PUSH
9657: LD_INT 5
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: PUSH
9666: LD_INT 33
9668: PUSH
9669: LD_INT 141
9671: PUSH
9672: LD_INT 54
9674: PUSH
9675: LD_INT 2
9677: PUSH
9678: EMPTY
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: PUSH
9684: LD_INT 33
9686: PUSH
9687: LD_INT 133
9689: PUSH
9690: LD_INT 57
9692: PUSH
9693: LD_INT 2
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: PUSH
9702: LD_INT 33
9704: PUSH
9705: LD_INT 132
9707: PUSH
9708: LD_INT 61
9710: PUSH
9711: LD_INT 2
9713: PUSH
9714: EMPTY
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: PUSH
9720: LD_INT 33
9722: PUSH
9723: LD_INT 150
9725: PUSH
9726: LD_INT 82
9728: PUSH
9729: LD_INT 0
9731: PUSH
9732: EMPTY
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: PUSH
9738: LD_INT 33
9740: PUSH
9741: LD_INT 132
9743: PUSH
9744: LD_INT 72
9746: PUSH
9747: LD_INT 0
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 6
9758: PUSH
9759: LD_INT 146
9761: PUSH
9762: LD_INT 64
9764: PUSH
9765: LD_INT 4
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 6
9776: PUSH
9777: LD_INT 159
9779: PUSH
9780: LD_INT 85
9782: PUSH
9783: LD_INT 4
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: PUSH
9792: LD_INT 21
9794: PUSH
9795: LD_INT 163
9797: PUSH
9798: LD_INT 91
9800: PUSH
9801: LD_INT 3
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: PUSH
9810: LD_INT 16
9812: PUSH
9813: LD_INT 166
9815: PUSH
9816: LD_INT 95
9818: PUSH
9819: LD_INT 4
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: LD_INT 159
9833: PUSH
9834: LD_INT 95
9836: PUSH
9837: LD_INT 1
9839: PUSH
9840: EMPTY
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: PUSH
9846: EMPTY
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: LIST
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9879: LD_ADDR_VAR 0 3
9883: PUSH
9884: LD_INT 22
9886: PUSH
9887: LD_INT 3
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PUSH
9894: LD_INT 3
9896: PUSH
9897: LD_INT 25
9899: PUSH
9900: LD_INT 2
9902: PUSH
9903: EMPTY
9904: LIST
9905: LIST
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 69
9919: PUSH
9920: FOR_IN
9921: IFFALSE 9968
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
9923: LD_VAR 0 3
9927: PPUSH
9928: LD_VAR 0 5
9932: PUSH
9933: LD_INT 2
9935: ARRAY
9936: PUSH
9937: LD_INT 2
9939: ARRAY
9940: PUSH
9941: LD_INT 2
9943: PLUS
9944: PPUSH
9945: LD_VAR 0 5
9949: PUSH
9950: LD_INT 2
9952: ARRAY
9953: PUSH
9954: LD_INT 3
9956: ARRAY
9957: PUSH
9958: LD_INT 3
9960: PLUS
9961: PPUSH
9962: CALL_OW 171
9966: GO 9920
9968: POP
9969: POP
// for i := 1 to buildingsTab do
9970: LD_ADDR_VAR 0 3
9974: PUSH
9975: DOUBLE
9976: LD_INT 1
9978: DEC
9979: ST_TO_ADDR
9980: LD_VAR 0 5
9984: PUSH
9985: FOR_TO
9986: IFFALSE 10059
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9988: LD_VAR 0 4
9992: PPUSH
9993: LD_VAR 0 5
9997: PUSH
9998: LD_VAR 0 3
10002: ARRAY
10003: PUSH
10004: LD_INT 1
10006: ARRAY
10007: PPUSH
10008: LD_VAR 0 5
10012: PUSH
10013: LD_VAR 0 3
10017: ARRAY
10018: PUSH
10019: LD_INT 2
10021: ARRAY
10022: PPUSH
10023: LD_VAR 0 5
10027: PUSH
10028: LD_VAR 0 3
10032: ARRAY
10033: PUSH
10034: LD_INT 3
10036: ARRAY
10037: PPUSH
10038: LD_VAR 0 5
10042: PUSH
10043: LD_VAR 0 3
10047: ARRAY
10048: PUSH
10049: LD_INT 4
10051: ARRAY
10052: PPUSH
10053: CALL_OW 205
10057: GO 9985
10059: POP
10060: POP
// end ; end ;
10061: LD_VAR 0 2
10065: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
10066: LD_INT 0
10068: PPUSH
10069: PPUSH
10070: PPUSH
10071: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
10072: LD_ADDR_VAR 0 3
10076: PUSH
10077: LD_INT 22
10079: PUSH
10080: LD_INT 2
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 25
10089: PUSH
10090: LD_INT 2
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: EMPTY
10098: LIST
10099: LIST
10100: PPUSH
10101: CALL_OW 69
10105: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
10106: LD_VAR 0 3
10110: PPUSH
10111: LD_INT 0
10113: PPUSH
10114: LD_INT 71
10116: PPUSH
10117: LD_INT 15
10119: PPUSH
10120: LD_INT 3
10122: PPUSH
10123: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
10127: LD_ADDR_VAR 0 4
10131: PUSH
10132: LD_INT 6
10134: PUSH
10135: LD_INT 77
10137: PUSH
10138: LD_INT 18
10140: PUSH
10141: LD_INT 3
10143: PUSH
10144: EMPTY
10145: LIST
10146: LIST
10147: LIST
10148: LIST
10149: PUSH
10150: LD_INT 4
10152: PUSH
10153: LD_INT 77
10155: PUSH
10156: LD_INT 26
10158: PUSH
10159: LD_INT 0
10161: PUSH
10162: EMPTY
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: PUSH
10168: LD_INT 31
10170: PUSH
10171: LD_INT 82
10173: PUSH
10174: LD_INT 28
10176: PUSH
10177: LD_INT 0
10179: PUSH
10180: EMPTY
10181: LIST
10182: LIST
10183: LIST
10184: LIST
10185: PUSH
10186: LD_INT 31
10188: PUSH
10189: LD_INT 84
10191: PUSH
10192: LD_INT 21
10194: PUSH
10195: LD_INT 3
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: LIST
10203: PUSH
10204: LD_INT 31
10206: PUSH
10207: LD_INT 66
10209: PUSH
10210: LD_INT 14
10212: PUSH
10213: LD_INT 2
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: PUSH
10222: LD_INT 27
10224: PUSH
10225: LD_INT 67
10227: PUSH
10228: LD_INT 18
10230: PUSH
10231: LD_INT 5
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: PUSH
10240: LD_INT 27
10242: PUSH
10243: LD_INT 69
10245: PUSH
10246: LD_INT 23
10248: PUSH
10249: LD_INT 2
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: EMPTY
10259: LIST
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: LIST
10266: ST_TO_ADDR
// for i := 1 to buildingsTab do
10267: LD_ADDR_VAR 0 2
10271: PUSH
10272: DOUBLE
10273: LD_INT 1
10275: DEC
10276: ST_TO_ADDR
10277: LD_VAR 0 4
10281: PUSH
10282: FOR_TO
10283: IFFALSE 10356
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10285: LD_VAR 0 3
10289: PPUSH
10290: LD_VAR 0 4
10294: PUSH
10295: LD_VAR 0 2
10299: ARRAY
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PPUSH
10305: LD_VAR 0 4
10309: PUSH
10310: LD_VAR 0 2
10314: ARRAY
10315: PUSH
10316: LD_INT 2
10318: ARRAY
10319: PPUSH
10320: LD_VAR 0 4
10324: PUSH
10325: LD_VAR 0 2
10329: ARRAY
10330: PUSH
10331: LD_INT 3
10333: ARRAY
10334: PPUSH
10335: LD_VAR 0 4
10339: PUSH
10340: LD_VAR 0 2
10344: ARRAY
10345: PUSH
10346: LD_INT 4
10348: ARRAY
10349: PPUSH
10350: CALL_OW 205
10354: GO 10282
10356: POP
10357: POP
// end ;
10358: LD_VAR 0 1
10362: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10363: LD_INT 0
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
10370: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10371: LD_ADDR_VAR 0 7
10375: PUSH
10376: LD_INT 22
10378: PUSH
10379: LD_VAR 0 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 25
10390: PUSH
10391: LD_INT 9
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: EMPTY
10399: LIST
10400: LIST
10401: PPUSH
10402: CALL_OW 69
10406: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10407: LD_ADDR_VAR 0 8
10411: PUSH
10412: LD_INT 22
10414: PUSH
10415: LD_VAR 0 2
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: LD_INT 21
10429: PUSH
10430: LD_INT 3
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: EMPTY
10442: LIST
10443: LIST
10444: PPUSH
10445: CALL_OW 69
10449: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10450: LD_ADDR_VAR 0 5
10454: PUSH
10455: LD_INT 1
10457: PPUSH
10458: LD_INT 3
10460: PPUSH
10461: CALL_OW 12
10465: ST_TO_ADDR
// for i = 1 to list do
10466: LD_ADDR_VAR 0 6
10470: PUSH
10471: DOUBLE
10472: LD_INT 1
10474: DEC
10475: ST_TO_ADDR
10476: LD_VAR 0 7
10480: PUSH
10481: FOR_TO
10482: IFFALSE 11180
// for ta in filter do
10484: LD_ADDR_VAR 0 4
10488: PUSH
10489: LD_VAR 0 8
10493: PUSH
10494: FOR_IN
10495: IFFALSE 11176
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
10497: LD_VAR 0 7
10501: PUSH
10502: LD_VAR 0 6
10506: ARRAY
10507: PPUSH
10508: LD_VAR 0 4
10512: PPUSH
10513: CALL_OW 296
10517: PUSH
10518: LD_INT 12
10520: LESSEQUAL
10521: IFFALSE 11174
// begin case c of 1 :
10523: LD_VAR 0 5
10527: PUSH
10528: LD_INT 1
10530: DOUBLE
10531: EQUAL
10532: IFTRUE 10536
10534: GO 10832
10536: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
10537: LD_VAR 0 7
10541: PUSH
10542: LD_VAR 0 6
10546: ARRAY
10547: PPUSH
10548: LD_VAR 0 4
10552: PPUSH
10553: CALL_OW 250
10557: PPUSH
10558: LD_VAR 0 4
10562: PPUSH
10563: CALL_OW 251
10567: PPUSH
10568: CALL_OW 154
// if eventVar2 = 0 then
10572: LD_EXP 55
10576: PUSH
10577: LD_INT 0
10579: EQUAL
10580: IFFALSE 10830
// begin eventVar2 = 1 ;
10582: LD_ADDR_EXP 55
10586: PUSH
10587: LD_INT 1
10589: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10590: LD_INT 245
10592: PPUSH
10593: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
10597: LD_VAR 0 4
10601: PPUSH
10602: CALL_OW 250
10606: PPUSH
10607: LD_VAR 0 4
10611: PPUSH
10612: CALL_OW 251
10616: PPUSH
10617: CALL_OW 84
// DialogueOn ;
10621: CALL_OW 6
// if IsOK ( Cyrus ) then
10625: LD_EXP 5
10629: PPUSH
10630: CALL_OW 302
10634: IFFALSE 10650
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
10636: LD_EXP 5
10640: PPUSH
10641: LD_STRING D9a-Cyrus-1
10643: PPUSH
10644: CALL_OW 88
// end else
10648: GO 10704
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
10650: LD_INT 22
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 26
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: LD_EXP 1
10678: PUSH
10679: LD_EXP 14
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: DIFF
10688: PPUSH
10689: CALL_OW 69
10693: PPUSH
10694: LD_STRING D9a-Sol1-1
10696: PPUSH
10697: LD_STRING D9a-Sol1-1
10699: PPUSH
10700: CALL 7261 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
10704: LD_INT 22
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 26
10716: PUSH
10717: LD_INT 1
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_EXP 1
10732: PUSH
10733: LD_EXP 14
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: DIFF
10742: PPUSH
10743: CALL_OW 69
10747: PPUSH
10748: LD_STRING D9b-Sol1-1
10750: PPUSH
10751: LD_STRING D9b-Sol1-1
10753: PPUSH
10754: CALL 7261 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
10758: LD_STRING 09_arInfo
10760: PPUSH
10761: LD_INT 0
10763: PPUSH
10764: CALL_OW 30
10768: PUSH
10769: LD_INT 1
10771: EQUAL
10772: IFFALSE 10786
// Say ( JMM , D9a-JMM-1 ) ;
10774: LD_EXP 1
10778: PPUSH
10779: LD_STRING D9a-JMM-1
10781: PPUSH
10782: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
10786: LD_EXP 1
10790: PPUSH
10791: LD_STRING D9c-JMM-1
10793: PPUSH
10794: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
10798: LD_INT 12
10800: PPUSH
10801: LD_INT 1
10803: PPUSH
10804: CALL_OW 321
10808: PUSH
10809: LD_INT 2
10811: EQUAL
10812: IFFALSE 10826
// Say ( JMM , D9c-JMM-1a ) ;
10814: LD_EXP 1
10818: PPUSH
10819: LD_STRING D9c-JMM-1a
10821: PPUSH
10822: CALL_OW 88
// DialogueOff ;
10826: CALL_OW 7
// end ; end ; 2 :
10830: GO 11174
10832: LD_INT 2
10834: DOUBLE
10835: EQUAL
10836: IFTRUE 10840
10838: GO 11162
10840: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
10841: LD_VAR 0 7
10845: PUSH
10846: LD_VAR 0 6
10850: ARRAY
10851: PPUSH
10852: LD_VAR 0 4
10856: PPUSH
10857: CALL_OW 250
10861: PUSH
10862: LD_INT 1
10864: NEG
10865: PPUSH
10866: LD_INT 1
10868: PPUSH
10869: CALL_OW 12
10873: PLUS
10874: PPUSH
10875: LD_VAR 0 4
10879: PPUSH
10880: CALL_OW 251
10884: PUSH
10885: LD_INT 1
10887: NEG
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 12
10896: PLUS
10897: PPUSH
10898: CALL_OW 153
// if eventVar2 = 0 then
10902: LD_EXP 55
10906: PUSH
10907: LD_INT 0
10909: EQUAL
10910: IFFALSE 11160
// begin eventVar2 = 1 ;
10912: LD_ADDR_EXP 55
10916: PUSH
10917: LD_INT 1
10919: ST_TO_ADDR
// wait ( 0 0$7 ) ;
10920: LD_INT 245
10922: PPUSH
10923: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
10927: LD_VAR 0 4
10931: PPUSH
10932: CALL_OW 250
10936: PPUSH
10937: LD_VAR 0 4
10941: PPUSH
10942: CALL_OW 251
10946: PPUSH
10947: CALL_OW 84
// DialogueOn ;
10951: CALL_OW 6
// if IsOK ( Cyrus ) then
10955: LD_EXP 5
10959: PPUSH
10960: CALL_OW 302
10964: IFFALSE 10980
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
10966: LD_EXP 5
10970: PPUSH
10971: LD_STRING D9a-Cyrus-1
10973: PPUSH
10974: CALL_OW 88
// end else
10978: GO 11034
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
10980: LD_INT 22
10982: PUSH
10983: LD_INT 1
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: PUSH
10990: LD_INT 26
10992: PUSH
10993: LD_INT 1
10995: PUSH
10996: EMPTY
10997: LIST
10998: LIST
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: PUSH
11004: LD_EXP 1
11008: PUSH
11009: LD_EXP 14
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: DIFF
11018: PPUSH
11019: CALL_OW 69
11023: PPUSH
11024: LD_STRING D9a-Sol1-1
11026: PPUSH
11027: LD_STRING D9a-Sol1-1
11029: PPUSH
11030: CALL 7261 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
11034: LD_INT 22
11036: PUSH
11037: LD_INT 1
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: PUSH
11044: LD_INT 26
11046: PUSH
11047: LD_INT 1
11049: PUSH
11050: EMPTY
11051: LIST
11052: LIST
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_EXP 1
11062: PUSH
11063: LD_EXP 14
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: DIFF
11072: PPUSH
11073: CALL_OW 69
11077: PPUSH
11078: LD_STRING D9b-Sol1-1
11080: PPUSH
11081: LD_STRING D9b-Sol1-1
11083: PPUSH
11084: CALL 7261 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
11088: LD_STRING 09_arInfo
11090: PPUSH
11091: LD_INT 0
11093: PPUSH
11094: CALL_OW 30
11098: PUSH
11099: LD_INT 1
11101: EQUAL
11102: IFFALSE 11116
// Say ( JMM , D9a-JMM-1 ) ;
11104: LD_EXP 1
11108: PPUSH
11109: LD_STRING D9a-JMM-1
11111: PPUSH
11112: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
11116: LD_EXP 1
11120: PPUSH
11121: LD_STRING D9c-JMM-1
11123: PPUSH
11124: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
11128: LD_INT 12
11130: PPUSH
11131: LD_INT 1
11133: PPUSH
11134: CALL_OW 321
11138: PUSH
11139: LD_INT 2
11141: EQUAL
11142: IFFALSE 11156
// Say ( JMM , D9c-JMM-1a ) ;
11144: LD_EXP 1
11148: PPUSH
11149: LD_STRING D9c-JMM-1a
11151: PPUSH
11152: CALL_OW 88
// DialogueOff ;
11156: CALL_OW 7
// end ; end ; 3 :
11160: GO 11174
11162: LD_INT 3
11164: DOUBLE
11165: EQUAL
11166: IFTRUE 11170
11168: GO 11173
11170: POP
// ; end ;
11171: GO 11174
11173: POP
// end ; end ;
11174: GO 10494
11176: POP
11177: POP
11178: GO 10481
11180: POP
11181: POP
// end ;
11182: LD_VAR 0 3
11186: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
11187: LD_INT 0
11189: PPUSH
11190: PPUSH
11191: PPUSH
11192: PPUSH
// for i = 1 to 72 do
11193: LD_ADDR_VAR 0 5
11197: PUSH
11198: DOUBLE
11199: LD_INT 1
11201: DEC
11202: ST_TO_ADDR
11203: LD_INT 72
11205: PUSH
11206: FOR_TO
11207: IFFALSE 11265
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
11209: LD_VAR 0 5
11213: PPUSH
11214: LD_VAR 0 1
11218: PPUSH
11219: CALL_OW 321
11223: PUSH
11224: LD_INT 1
11226: EQUAL
11227: PUSH
11228: LD_VAR 0 5
11232: PPUSH
11233: LD_VAR 0 3
11237: PPUSH
11238: CALL_OW 482
11242: PUSH
11243: LD_INT 1
11245: EQUAL
11246: AND
11247: IFFALSE 11263
// AddComResearch ( lab , i ) ;
11249: LD_VAR 0 2
11253: PPUSH
11254: LD_VAR 0 5
11258: PPUSH
11259: CALL_OW 184
11263: GO 11206
11265: POP
11266: POP
// end ;
11267: LD_VAR 0 4
11271: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
11272: LD_INT 0
11274: PPUSH
11275: PPUSH
11276: PPUSH
11277: PPUSH
11278: PPUSH
11279: PPUSH
11280: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
11281: LD_ADDR_VAR 0 6
11285: PUSH
11286: LD_INT 22
11288: PUSH
11289: LD_VAR 0 1
11293: PUSH
11294: EMPTY
11295: LIST
11296: LIST
11297: PUSH
11298: LD_INT 56
11300: PUSH
11301: EMPTY
11302: LIST
11303: PUSH
11304: LD_INT 24
11306: PUSH
11307: LD_INT 700
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: PUSH
11314: LD_INT 2
11316: PUSH
11317: LD_INT 25
11319: PUSH
11320: LD_INT 1
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PUSH
11327: LD_INT 25
11329: PUSH
11330: LD_INT 9
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: LIST
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PPUSH
11348: CALL_OW 69
11352: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
11353: LD_ADDR_VAR 0 7
11357: PUSH
11358: LD_INT 22
11360: PUSH
11361: LD_VAR 0 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 30
11372: PUSH
11373: LD_INT 32
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 58
11382: PUSH
11383: EMPTY
11384: LIST
11385: PUSH
11386: LD_INT 24
11388: PUSH
11389: LD_INT 251
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: PPUSH
11402: CALL_OW 69
11406: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
11407: LD_ADDR_VAR 0 9
11411: PUSH
11412: LD_INT 22
11414: PUSH
11415: LD_VAR 0 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PUSH
11424: LD_INT 2
11426: PUSH
11427: LD_INT 30
11429: PUSH
11430: LD_INT 4
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 30
11439: PUSH
11440: LD_INT 5
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: PUSH
11452: LD_INT 24
11454: PUSH
11455: LD_INT 251
11457: PUSH
11458: EMPTY
11459: LIST
11460: LIST
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: LIST
11466: PPUSH
11467: CALL_OW 69
11471: ST_TO_ADDR
// if barrackList > 0 then
11472: LD_VAR 0 9
11476: PUSH
11477: LD_INT 0
11479: GREATER
11480: IFFALSE 11569
// begin if turretList = 0 then
11482: LD_VAR 0 7
11486: PUSH
11487: LD_INT 0
11489: EQUAL
11490: IFFALSE 11529
// begin for i in soldiers_list do
11492: LD_ADDR_VAR 0 4
11496: PUSH
11497: LD_VAR 0 6
11501: PUSH
11502: FOR_IN
11503: IFFALSE 11525
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
11505: LD_VAR 0 4
11509: PPUSH
11510: LD_VAR 0 9
11514: PUSH
11515: LD_INT 1
11517: ARRAY
11518: PPUSH
11519: CALL_OW 120
11523: GO 11502
11525: POP
11526: POP
// end else
11527: GO 11569
// begin for i in barrackList do
11529: LD_ADDR_VAR 0 4
11533: PUSH
11534: LD_VAR 0 9
11538: PUSH
11539: FOR_IN
11540: IFFALSE 11567
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
11542: LD_VAR 0 4
11546: PPUSH
11547: CALL_OW 313
11551: PPUSH
11552: LD_VAR 0 7
11556: PUSH
11557: LD_INT 1
11559: ARRAY
11560: PPUSH
11561: CALL_OW 120
// end ;
11565: GO 11539
11567: POP
11568: POP
// end ; end ; end ;
11569: LD_VAR 0 3
11573: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
11574: LD_INT 0
11576: PPUSH
11577: PPUSH
11578: PPUSH
11579: PPUSH
11580: PPUSH
11581: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
11582: LD_ADDR_VAR 0 6
11586: PUSH
11587: LD_VAR 0 2
11591: PPUSH
11592: CALL_OW 313
11596: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
11597: LD_ADDR_VAR 0 7
11601: PUSH
11602: LD_INT 22
11604: PUSH
11605: LD_VAR 0 1
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 2
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 24
11626: PUSH
11627: LD_INT 1000
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: PPUSH
11639: CALL_OW 69
11643: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
11644: LD_ADDR_VAR 0 4
11648: PUSH
11649: LD_INT 22
11651: PUSH
11652: LD_VAR 0 1
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PUSH
11661: LD_INT 21
11663: PUSH
11664: LD_INT 3
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 3
11673: PUSH
11674: LD_INT 24
11676: PUSH
11677: LD_INT 1000
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: PUSH
11688: EMPTY
11689: LIST
11690: LIST
11691: LIST
11692: PUSH
11693: EMPTY
11694: LIST
11695: PPUSH
11696: CALL_OW 69
11700: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
11701: LD_VAR 0 4
11705: NOT
11706: PUSH
11707: LD_VAR 0 7
11711: NOT
11712: AND
11713: IFFALSE 11717
// exit ;
11715: GO 11876
// if buildings_list > 0 and engineerOkInside > 0 then
11717: LD_VAR 0 4
11721: PUSH
11722: LD_INT 0
11724: GREATER
11725: PUSH
11726: LD_VAR 0 6
11730: PUSH
11731: LD_INT 0
11733: GREATER
11734: AND
11735: IFFALSE 11763
// for i in engineerOkInside do
11737: LD_ADDR_VAR 0 5
11741: PUSH
11742: LD_VAR 0 6
11746: PUSH
11747: FOR_IN
11748: IFFALSE 11761
// ComExitBuilding ( i ) ;
11750: LD_VAR 0 5
11754: PPUSH
11755: CALL_OW 122
11759: GO 11747
11761: POP
11762: POP
// if engineerOkOutside > 0 then
11763: LD_VAR 0 7
11767: PUSH
11768: LD_INT 0
11770: GREATER
11771: IFFALSE 11825
// begin for i in engineerOkOutside do
11773: LD_ADDR_VAR 0 5
11777: PUSH
11778: LD_VAR 0 7
11782: PUSH
11783: FOR_IN
11784: IFFALSE 11823
// for j in buildings_list do
11786: LD_ADDR_VAR 0 8
11790: PUSH
11791: LD_VAR 0 4
11795: PUSH
11796: FOR_IN
11797: IFFALSE 11819
// ComRepairBuilding ( i , j [ 1 ] ) ;
11799: LD_VAR 0 5
11803: PPUSH
11804: LD_VAR 0 8
11808: PUSH
11809: LD_INT 1
11811: ARRAY
11812: PPUSH
11813: CALL_OW 130
11817: GO 11796
11819: POP
11820: POP
11821: GO 11783
11823: POP
11824: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
11825: LD_VAR 0 4
11829: PUSH
11830: LD_INT 0
11832: EQUAL
11833: PUSH
11834: LD_VAR 0 7
11838: PUSH
11839: LD_INT 0
11841: GREATER
11842: AND
11843: IFFALSE 11876
// for i in engineerOkOutside do
11845: LD_ADDR_VAR 0 5
11849: PUSH
11850: LD_VAR 0 7
11854: PUSH
11855: FOR_IN
11856: IFFALSE 11874
// ComEnterUnit ( i , building ) ;
11858: LD_VAR 0 5
11862: PPUSH
11863: LD_VAR 0 2
11867: PPUSH
11868: CALL_OW 120
11872: GO 11855
11874: POP
11875: POP
// end ;
11876: LD_VAR 0 3
11880: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
11881: LD_INT 0
11883: PPUSH
11884: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
11885: LD_INT 22
11887: PUSH
11888: LD_VAR 0 1
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 25
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PPUSH
11911: CALL_OW 69
11915: PUSH
11916: LD_INT 0
11918: GREATER
11919: PUSH
11920: LD_INT 22
11922: PUSH
11923: LD_VAR 0 1
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: PUSH
11932: LD_INT 21
11934: PUSH
11935: LD_INT 3
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 3
11944: PUSH
11945: LD_INT 24
11947: PUSH
11948: LD_INT 1000
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: EMPTY
11960: LIST
11961: LIST
11962: LIST
11963: PPUSH
11964: CALL_OW 69
11968: PUSH
11969: LD_INT 0
11971: EQUAL
11972: AND
11973: PUSH
11974: LD_VAR 0 2
11978: PUSH
11979: LD_INT 0
11981: GREATER
11982: AND
11983: IFFALSE 12082
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
11985: LD_ADDR_VAR 0 4
11989: PUSH
11990: LD_INT 22
11992: PUSH
11993: LD_VAR 0 1
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: LD_INT 25
12004: PUSH
12005: LD_INT 2
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PPUSH
12016: CALL_OW 69
12020: PUSH
12021: FOR_IN
12022: IFFALSE 12080
// begin AddComExitBuilding ( i ) ;
12024: LD_VAR 0 4
12028: PPUSH
12029: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
12033: LD_VAR 0 4
12037: PPUSH
12038: LD_VAR 0 2
12042: PUSH
12043: LD_INT 1
12045: ARRAY
12046: PPUSH
12047: LD_VAR 0 2
12051: PUSH
12052: LD_INT 2
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 2
12060: PUSH
12061: LD_INT 3
12063: ARRAY
12064: PPUSH
12065: LD_VAR 0 2
12069: PUSH
12070: LD_INT 4
12072: ARRAY
12073: PPUSH
12074: CALL_OW 205
// end ;
12078: GO 12021
12080: POP
12081: POP
// end ; end ;
12082: LD_VAR 0 3
12086: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
12087: LD_INT 0
12089: PPUSH
12090: PPUSH
12091: PPUSH
12092: PPUSH
12093: PPUSH
12094: PPUSH
12095: PPUSH
12096: PPUSH
12097: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
12098: LD_ADDR_VAR 0 6
12102: PUSH
12103: LD_INT 22
12105: PUSH
12106: LD_VAR 0 1
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 25
12117: PUSH
12118: LD_INT 4
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 24
12127: PUSH
12128: LD_INT 251
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: EMPTY
12136: LIST
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 69
12144: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
12145: LD_ADDR_VAR 0 7
12149: PUSH
12150: LD_VAR 0 3
12154: PPUSH
12155: LD_INT 22
12157: PUSH
12158: LD_VAR 0 1
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: PUSH
12167: LD_INT 25
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: PUSH
12177: LD_INT 50
12179: PUSH
12180: EMPTY
12181: LIST
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL_OW 70
12192: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
12193: LD_ADDR_VAR 0 10
12197: PUSH
12198: LD_VAR 0 3
12202: PPUSH
12203: LD_INT 22
12205: PUSH
12206: LD_VAR 0 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 21
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 3
12227: PUSH
12228: LD_INT 25
12230: PUSH
12231: LD_INT 3
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: LD_INT 24
12247: PUSH
12248: LD_INT 750
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: PPUSH
12265: CALL_OW 70
12269: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12270: LD_ADDR_VAR 0 11
12274: PUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: LD_INT 22
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 1
12297: PUSH
12298: EMPTY
12299: LIST
12300: LIST
12301: PUSH
12302: LD_INT 3
12304: PUSH
12305: LD_INT 25
12307: PUSH
12308: LD_INT 3
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: EMPTY
12316: LIST
12317: LIST
12318: PUSH
12319: LD_INT 3
12321: PUSH
12322: LD_INT 24
12324: PUSH
12325: LD_INT 1000
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: EMPTY
12333: LIST
12334: LIST
12335: PUSH
12336: EMPTY
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 70
12346: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
12347: LD_VAR 0 10
12351: NOT
12352: PUSH
12353: LD_VAR 0 7
12357: NOT
12358: AND
12359: PUSH
12360: LD_VAR 0 11
12364: NOT
12365: AND
12366: IFFALSE 12370
// exit ;
12368: GO 12630
// if damageUnits > 0 and sci_list > 0 then
12370: LD_VAR 0 10
12374: PUSH
12375: LD_INT 0
12377: GREATER
12378: PUSH
12379: LD_VAR 0 6
12383: PUSH
12384: LD_INT 0
12386: GREATER
12387: AND
12388: IFFALSE 12421
// for i in damageUnits do
12390: LD_ADDR_VAR 0 8
12394: PUSH
12395: LD_VAR 0 10
12399: PUSH
12400: FOR_IN
12401: IFFALSE 12419
// ComMoveToArea ( i , healArea ) ;
12403: LD_VAR 0 8
12407: PPUSH
12408: LD_VAR 0 2
12412: PPUSH
12413: CALL_OW 113
12417: GO 12400
12419: POP
12420: POP
// if unitsToHeal > 0 and sci_list > 0 then
12421: LD_VAR 0 11
12425: PUSH
12426: LD_INT 0
12428: GREATER
12429: PUSH
12430: LD_VAR 0 6
12434: PUSH
12435: LD_INT 0
12437: GREATER
12438: AND
12439: IFFALSE 12498
// begin for i in sci_list do
12441: LD_ADDR_VAR 0 8
12445: PUSH
12446: LD_VAR 0 6
12450: PUSH
12451: FOR_IN
12452: IFFALSE 12496
// begin ComExitBuilding ( i ) ;
12454: LD_VAR 0 8
12458: PPUSH
12459: CALL_OW 122
// for j in unitsToHeal do
12463: LD_ADDR_VAR 0 9
12467: PUSH
12468: LD_VAR 0 11
12472: PUSH
12473: FOR_IN
12474: IFFALSE 12492
// AddComHeal ( i , j ) ;
12476: LD_VAR 0 8
12480: PPUSH
12481: LD_VAR 0 9
12485: PPUSH
12486: CALL_OW 188
12490: GO 12473
12492: POP
12493: POP
// end ;
12494: GO 12451
12496: POP
12497: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
12498: LD_VAR 0 10
12502: PUSH
12503: LD_INT 0
12505: EQUAL
12506: PUSH
12507: LD_VAR 0 11
12511: PUSH
12512: LD_INT 0
12514: EQUAL
12515: AND
12516: PUSH
12517: LD_VAR 0 7
12521: PUSH
12522: LD_INT 0
12524: GREATER
12525: AND
12526: IFFALSE 12630
// for i in sci_listOutside do
12528: LD_ADDR_VAR 0 8
12532: PUSH
12533: LD_VAR 0 7
12537: PUSH
12538: FOR_IN
12539: IFFALSE 12628
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
12541: LD_ADDR_VAR 0 12
12545: PUSH
12546: LD_INT 22
12548: PUSH
12549: LD_VAR 0 1
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 21
12560: PUSH
12561: LD_INT 3
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 30
12570: PUSH
12571: LD_INT 8
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: PPUSH
12583: CALL_OW 69
12587: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
12588: LD_ADDR_VAR 0 13
12592: PUSH
12593: LD_INT 1
12595: PPUSH
12596: LD_VAR 0 12
12600: PPUSH
12601: CALL_OW 12
12605: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
12606: LD_VAR 0 8
12610: PPUSH
12611: LD_VAR 0 12
12615: PUSH
12616: LD_VAR 0 13
12620: ARRAY
12621: PPUSH
12622: CALL_OW 120
// end ;
12626: GO 12538
12628: POP
12629: POP
// end ;
12630: LD_VAR 0 5
12634: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
12635: LD_INT 0
12637: PPUSH
12638: PPUSH
12639: PPUSH
12640: PPUSH
12641: PPUSH
12642: PPUSH
12643: PPUSH
12644: PPUSH
12645: PPUSH
12646: PPUSH
12647: PPUSH
// amChassisTab = [ ] ;
12648: LD_ADDR_VAR 0 19
12652: PUSH
12653: EMPTY
12654: ST_TO_ADDR
// arChassisTab = [ ] ;
12655: LD_ADDR_VAR 0 18
12659: PUSH
12660: EMPTY
12661: ST_TO_ADDR
// ruChassisTab = [ ] ;
12662: LD_ADDR_VAR 0 17
12666: PUSH
12667: EMPTY
12668: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
12669: LD_INT 35
12671: PPUSH
12672: CALL_OW 67
// if nation = 1 then
12676: LD_VAR 0 5
12680: PUSH
12681: LD_INT 1
12683: EQUAL
12684: IFFALSE 13189
// begin uc_side = side ;
12686: LD_ADDR_OWVAR 20
12690: PUSH
12691: LD_VAR 0 2
12695: ST_TO_ADDR
// uc_nation = nation ;
12696: LD_ADDR_OWVAR 21
12700: PUSH
12701: LD_VAR 0 5
12705: ST_TO_ADDR
// vc_engine = vehengine ;
12706: LD_ADDR_OWVAR 39
12710: PUSH
12711: LD_VAR 0 6
12715: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12716: LD_ADDR_OWVAR 38
12720: PUSH
12721: LD_VAR 0 7
12725: PUSH
12726: LD_INT 1
12728: PPUSH
12729: LD_VAR 0 7
12733: PPUSH
12734: CALL_OW 12
12738: ARRAY
12739: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
12740: LD_ADDR_OWVAR 40
12744: PUSH
12745: LD_VAR 0 10
12749: PUSH
12750: LD_INT 1
12752: PPUSH
12753: LD_VAR 0 10
12757: PPUSH
12758: CALL_OW 12
12762: ARRAY
12763: ST_TO_ADDR
// for j = 1 to AMWeapon do
12764: LD_ADDR_VAR 0 14
12768: PUSH
12769: DOUBLE
12770: LD_INT 1
12772: DEC
12773: ST_TO_ADDR
12774: LD_VAR 0 10
12778: PUSH
12779: FOR_TO
12780: IFFALSE 13081
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
12782: LD_VAR 0 10
12786: PUSH
12787: LD_VAR 0 14
12791: ARRAY
12792: PUSH
12793: LD_INT 2
12795: EQUAL
12796: PUSH
12797: LD_VAR 0 10
12801: PUSH
12802: LD_VAR 0 14
12806: ARRAY
12807: PUSH
12808: LD_INT 3
12810: EQUAL
12811: OR
12812: IFFALSE 12865
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
12814: LD_ADDR_VAR 0 19
12818: PUSH
12819: LD_INT 1
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 4
12830: PUSH
12831: LD_INT 5
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12841: LD_ADDR_OWVAR 37
12845: PUSH
12846: LD_VAR 0 19
12850: PUSH
12851: LD_INT 1
12853: PPUSH
12854: LD_VAR 0 19
12858: PPUSH
12859: CALL_OW 12
12863: ARRAY
12864: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
12865: LD_VAR 0 10
12869: PUSH
12870: LD_VAR 0 14
12874: ARRAY
12875: PUSH
12876: LD_INT 4
12878: EQUAL
12879: PUSH
12880: LD_VAR 0 10
12884: PUSH
12885: LD_VAR 0 14
12889: ARRAY
12890: PUSH
12891: LD_INT 5
12893: EQUAL
12894: OR
12895: PUSH
12896: LD_VAR 0 10
12900: PUSH
12901: LD_VAR 0 14
12905: ARRAY
12906: PUSH
12907: LD_INT 9
12909: EQUAL
12910: OR
12911: PUSH
12912: LD_VAR 0 10
12916: PUSH
12917: LD_VAR 0 14
12921: ARRAY
12922: PUSH
12923: LD_INT 11
12925: EQUAL
12926: OR
12927: PUSH
12928: LD_VAR 0 10
12932: PUSH
12933: LD_VAR 0 14
12937: ARRAY
12938: PUSH
12939: LD_INT 7
12941: EQUAL
12942: OR
12943: IFFALSE 12992
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12945: LD_ADDR_VAR 0 19
12949: PUSH
12950: LD_INT 2
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: LD_INT 4
12958: PUSH
12959: LD_INT 5
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12968: LD_ADDR_OWVAR 37
12972: PUSH
12973: LD_VAR 0 19
12977: PUSH
12978: LD_INT 1
12980: PPUSH
12981: LD_VAR 0 19
12985: PPUSH
12986: CALL_OW 12
12990: ARRAY
12991: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12992: LD_VAR 0 10
12996: PUSH
12997: LD_VAR 0 14
13001: ARRAY
13002: PUSH
13003: LD_INT 8
13005: EQUAL
13006: PUSH
13007: LD_VAR 0 10
13011: PUSH
13012: LD_VAR 0 14
13016: ARRAY
13017: PUSH
13018: LD_INT 6
13020: EQUAL
13021: OR
13022: PUSH
13023: LD_VAR 0 10
13027: PUSH
13028: LD_VAR 0 14
13032: ARRAY
13033: PUSH
13034: LD_INT 10
13036: EQUAL
13037: OR
13038: IFFALSE 13079
// begin amChassisTab = [ 4 , 5 ] ;
13040: LD_ADDR_VAR 0 19
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: LD_INT 5
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
13055: LD_ADDR_OWVAR 37
13059: PUSH
13060: LD_VAR 0 19
13064: PUSH
13065: LD_INT 1
13067: PPUSH
13068: LD_VAR 0 19
13072: PPUSH
13073: CALL_OW 12
13077: ARRAY
13078: ST_TO_ADDR
// end ; end ;
13079: GO 12779
13081: POP
13082: POP
// veh = CreateVehicle ;
13083: LD_ADDR_VAR 0 16
13087: PUSH
13088: CALL_OW 45
13092: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13093: LD_VAR 0 16
13097: PPUSH
13098: LD_VAR 0 1
13102: PPUSH
13103: LD_INT 0
13105: PPUSH
13106: CALL_OW 49
// if vc_control = 1 then
13110: LD_OWVAR 38
13114: PUSH
13115: LD_INT 1
13117: EQUAL
13118: IFFALSE 13175
// begin hc_gallery =  ;
13120: LD_ADDR_OWVAR 33
13124: PUSH
13125: LD_STRING 
13127: ST_TO_ADDR
// hc_name =  ;
13128: LD_ADDR_OWVAR 26
13132: PUSH
13133: LD_STRING 
13135: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13136: LD_INT 0
13138: PPUSH
13139: LD_INT 3
13141: PPUSH
13142: LD_VAR 0 4
13146: PPUSH
13147: CALL_OW 380
// un = CreateHuman ;
13151: LD_ADDR_VAR 0 15
13155: PUSH
13156: CALL_OW 44
13160: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13161: LD_VAR 0 15
13165: PPUSH
13166: LD_VAR 0 16
13170: PPUSH
13171: CALL_OW 52
// end ; i = i + 1 ;
13175: LD_ADDR_VAR 0 13
13179: PUSH
13180: LD_VAR 0 13
13184: PUSH
13185: LD_INT 1
13187: PLUS
13188: ST_TO_ADDR
// end ; if nation = 2 then
13189: LD_VAR 0 5
13193: PUSH
13194: LD_INT 2
13196: EQUAL
13197: IFFALSE 13635
// begin uc_side = side ;
13199: LD_ADDR_OWVAR 20
13203: PUSH
13204: LD_VAR 0 2
13208: ST_TO_ADDR
// uc_nation = nation ;
13209: LD_ADDR_OWVAR 21
13213: PUSH
13214: LD_VAR 0 5
13218: ST_TO_ADDR
// vc_engine = vehengine ;
13219: LD_ADDR_OWVAR 39
13223: PUSH
13224: LD_VAR 0 6
13228: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13229: LD_ADDR_OWVAR 38
13233: PUSH
13234: LD_VAR 0 7
13238: PUSH
13239: LD_INT 1
13241: PPUSH
13242: LD_VAR 0 7
13246: PPUSH
13247: CALL_OW 12
13251: ARRAY
13252: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
13253: LD_ADDR_OWVAR 40
13257: PUSH
13258: LD_VAR 0 9
13262: PUSH
13263: LD_INT 1
13265: PPUSH
13266: LD_VAR 0 9
13270: PPUSH
13271: CALL_OW 12
13275: ARRAY
13276: ST_TO_ADDR
// for j = 1 to ARWeapons do
13277: LD_ADDR_VAR 0 14
13281: PUSH
13282: DOUBLE
13283: LD_INT 1
13285: DEC
13286: ST_TO_ADDR
13287: LD_VAR 0 9
13291: PUSH
13292: FOR_TO
13293: IFFALSE 13527
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
13295: LD_VAR 0 9
13299: PUSH
13300: LD_VAR 0 14
13304: ARRAY
13305: PUSH
13306: LD_INT 24
13308: EQUAL
13309: PUSH
13310: LD_VAR 0 9
13314: PUSH
13315: LD_VAR 0 14
13319: ARRAY
13320: PUSH
13321: LD_INT 22
13323: EQUAL
13324: OR
13325: PUSH
13326: LD_VAR 0 9
13330: PUSH
13331: LD_VAR 0 14
13335: ARRAY
13336: PUSH
13337: LD_INT 23
13339: EQUAL
13340: OR
13341: PUSH
13342: LD_VAR 0 9
13346: PUSH
13347: LD_VAR 0 14
13351: ARRAY
13352: PUSH
13353: LD_INT 30
13355: EQUAL
13356: OR
13357: IFFALSE 13406
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
13359: LD_ADDR_VAR 0 18
13363: PUSH
13364: LD_INT 11
13366: PUSH
13367: LD_INT 12
13369: PUSH
13370: LD_INT 13
13372: PUSH
13373: LD_INT 14
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13382: LD_ADDR_OWVAR 37
13386: PUSH
13387: LD_VAR 0 18
13391: PUSH
13392: LD_INT 1
13394: PPUSH
13395: LD_VAR 0 18
13399: PPUSH
13400: CALL_OW 12
13404: ARRAY
13405: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
13406: LD_VAR 0 9
13410: PUSH
13411: LD_VAR 0 14
13415: ARRAY
13416: PUSH
13417: LD_INT 29
13419: EQUAL
13420: PUSH
13421: LD_VAR 0 9
13425: PUSH
13426: LD_VAR 0 14
13430: ARRAY
13431: PUSH
13432: LD_INT 28
13434: EQUAL
13435: OR
13436: PUSH
13437: LD_VAR 0 9
13441: PUSH
13442: LD_VAR 0 14
13446: ARRAY
13447: PUSH
13448: LD_INT 27
13450: EQUAL
13451: OR
13452: PUSH
13453: LD_VAR 0 9
13457: PUSH
13458: LD_VAR 0 14
13462: ARRAY
13463: PUSH
13464: LD_INT 26
13466: EQUAL
13467: OR
13468: PUSH
13469: LD_VAR 0 9
13473: PUSH
13474: LD_VAR 0 14
13478: ARRAY
13479: PUSH
13480: LD_INT 25
13482: EQUAL
13483: OR
13484: IFFALSE 13525
// begin arChassisTab = [ 13 , 14 ] ;
13486: LD_ADDR_VAR 0 18
13490: PUSH
13491: LD_INT 13
13493: PUSH
13494: LD_INT 14
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
13501: LD_ADDR_OWVAR 37
13505: PUSH
13506: LD_VAR 0 18
13510: PUSH
13511: LD_INT 1
13513: PPUSH
13514: LD_VAR 0 18
13518: PPUSH
13519: CALL_OW 12
13523: ARRAY
13524: ST_TO_ADDR
// end ; end ;
13525: GO 13292
13527: POP
13528: POP
// veh = CreateVehicle ;
13529: LD_ADDR_VAR 0 16
13533: PUSH
13534: CALL_OW 45
13538: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13539: LD_VAR 0 16
13543: PPUSH
13544: LD_VAR 0 1
13548: PPUSH
13549: LD_INT 0
13551: PPUSH
13552: CALL_OW 49
// if vc_control = 1 then
13556: LD_OWVAR 38
13560: PUSH
13561: LD_INT 1
13563: EQUAL
13564: IFFALSE 13621
// begin hc_gallery =  ;
13566: LD_ADDR_OWVAR 33
13570: PUSH
13571: LD_STRING 
13573: ST_TO_ADDR
// hc_name =  ;
13574: LD_ADDR_OWVAR 26
13578: PUSH
13579: LD_STRING 
13581: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13582: LD_INT 0
13584: PPUSH
13585: LD_INT 3
13587: PPUSH
13588: LD_VAR 0 4
13592: PPUSH
13593: CALL_OW 380
// un = CreateHuman ;
13597: LD_ADDR_VAR 0 15
13601: PUSH
13602: CALL_OW 44
13606: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13607: LD_VAR 0 15
13611: PPUSH
13612: LD_VAR 0 16
13616: PPUSH
13617: CALL_OW 52
// end ; i = i + 1 ;
13621: LD_ADDR_VAR 0 13
13625: PUSH
13626: LD_VAR 0 13
13630: PUSH
13631: LD_INT 1
13633: PLUS
13634: ST_TO_ADDR
// end ; if nation = 3 then
13635: LD_VAR 0 5
13639: PUSH
13640: LD_INT 3
13642: EQUAL
13643: IFFALSE 14049
// begin uc_side = side ;
13645: LD_ADDR_OWVAR 20
13649: PUSH
13650: LD_VAR 0 2
13654: ST_TO_ADDR
// uc_nation = nation ;
13655: LD_ADDR_OWVAR 21
13659: PUSH
13660: LD_VAR 0 5
13664: ST_TO_ADDR
// vc_engine = vehengine ;
13665: LD_ADDR_OWVAR 39
13669: PUSH
13670: LD_VAR 0 6
13674: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
13675: LD_ADDR_OWVAR 38
13679: PUSH
13680: LD_VAR 0 7
13684: PUSH
13685: LD_INT 1
13687: PPUSH
13688: LD_VAR 0 7
13692: PPUSH
13693: CALL_OW 12
13697: ARRAY
13698: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
13699: LD_ADDR_OWVAR 40
13703: PUSH
13704: LD_VAR 0 8
13708: PUSH
13709: LD_INT 1
13711: PPUSH
13712: LD_VAR 0 8
13716: PPUSH
13717: CALL_OW 12
13721: ARRAY
13722: ST_TO_ADDR
// for j = 1 to RuWeapons do
13723: LD_ADDR_VAR 0 14
13727: PUSH
13728: DOUBLE
13729: LD_INT 1
13731: DEC
13732: ST_TO_ADDR
13733: LD_VAR 0 8
13737: PUSH
13738: FOR_TO
13739: IFFALSE 13941
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
13741: LD_VAR 0 8
13745: PUSH
13746: LD_VAR 0 14
13750: ARRAY
13751: PUSH
13752: LD_INT 42
13754: EQUAL
13755: PUSH
13756: LD_VAR 0 8
13760: PUSH
13761: LD_VAR 0 14
13765: ARRAY
13766: PUSH
13767: LD_INT 43
13769: EQUAL
13770: OR
13771: PUSH
13772: LD_VAR 0 8
13776: PUSH
13777: LD_VAR 0 14
13781: ARRAY
13782: PUSH
13783: LD_INT 44
13785: EQUAL
13786: OR
13787: PUSH
13788: LD_VAR 0 8
13792: PUSH
13793: LD_VAR 0 14
13797: ARRAY
13798: PUSH
13799: LD_INT 45
13801: EQUAL
13802: OR
13803: PUSH
13804: LD_VAR 0 8
13808: PUSH
13809: LD_VAR 0 14
13813: ARRAY
13814: PUSH
13815: LD_INT 49
13817: EQUAL
13818: OR
13819: IFFALSE 13868
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
13821: LD_ADDR_VAR 0 17
13825: PUSH
13826: LD_INT 21
13828: PUSH
13829: LD_INT 22
13831: PUSH
13832: LD_INT 23
13834: PUSH
13835: LD_INT 24
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13844: LD_ADDR_OWVAR 37
13848: PUSH
13849: LD_VAR 0 17
13853: PUSH
13854: LD_INT 1
13856: PPUSH
13857: LD_VAR 0 17
13861: PPUSH
13862: CALL_OW 12
13866: ARRAY
13867: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
13868: LD_VAR 0 8
13872: PUSH
13873: LD_VAR 0 14
13877: ARRAY
13878: PUSH
13879: LD_INT 46
13881: EQUAL
13882: PUSH
13883: LD_VAR 0 8
13887: PUSH
13888: LD_VAR 0 14
13892: ARRAY
13893: PUSH
13894: LD_INT 47
13896: EQUAL
13897: OR
13898: IFFALSE 13939
// begin ruChassisTab = [ 23 , 24 ] ;
13900: LD_ADDR_VAR 0 17
13904: PUSH
13905: LD_INT 23
13907: PUSH
13908: LD_INT 24
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13915: LD_ADDR_OWVAR 37
13919: PUSH
13920: LD_VAR 0 17
13924: PUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_VAR 0 17
13932: PPUSH
13933: CALL_OW 12
13937: ARRAY
13938: ST_TO_ADDR
// end ; end ;
13939: GO 13738
13941: POP
13942: POP
// veh = CreateVehicle ;
13943: LD_ADDR_VAR 0 16
13947: PUSH
13948: CALL_OW 45
13952: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13953: LD_VAR 0 16
13957: PPUSH
13958: LD_VAR 0 1
13962: PPUSH
13963: LD_INT 0
13965: PPUSH
13966: CALL_OW 49
// if vc_control = 1 then
13970: LD_OWVAR 38
13974: PUSH
13975: LD_INT 1
13977: EQUAL
13978: IFFALSE 14035
// begin hc_gallery =  ;
13980: LD_ADDR_OWVAR 33
13984: PUSH
13985: LD_STRING 
13987: ST_TO_ADDR
// hc_name =  ;
13988: LD_ADDR_OWVAR 26
13992: PUSH
13993: LD_STRING 
13995: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13996: LD_INT 0
13998: PPUSH
13999: LD_INT 3
14001: PPUSH
14002: LD_VAR 0 4
14006: PPUSH
14007: CALL_OW 380
// un = CreateHuman ;
14011: LD_ADDR_VAR 0 15
14015: PUSH
14016: CALL_OW 44
14020: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
14021: LD_VAR 0 15
14025: PPUSH
14026: LD_VAR 0 16
14030: PPUSH
14031: CALL_OW 52
// end ; i = i + 1 ;
14035: LD_ADDR_VAR 0 13
14039: PUSH
14040: LD_VAR 0 13
14044: PUSH
14045: LD_INT 1
14047: PLUS
14048: ST_TO_ADDR
// end ; until i = vehCount ;
14049: LD_VAR 0 13
14053: PUSH
14054: LD_VAR 0 3
14058: EQUAL
14059: IFFALSE 12669
// repeat wait ( 0 0$1 ) ;
14061: LD_INT 35
14063: PPUSH
14064: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
14068: LD_ADDR_VAR 0 20
14072: PUSH
14073: LD_INT 22
14075: PUSH
14076: LD_VAR 0 2
14080: PUSH
14081: EMPTY
14082: LIST
14083: LIST
14084: PUSH
14085: LD_INT 21
14087: PUSH
14088: LD_INT 2
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: PUSH
14095: LD_INT 24
14097: PUSH
14098: LD_INT 650
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 69
14114: ST_TO_ADDR
// if vehicleOK_list > 0 then
14115: LD_VAR 0 20
14119: PUSH
14120: LD_INT 0
14122: GREATER
14123: IFFALSE 14314
// begin for i in vehicleOK_list do
14125: LD_ADDR_VAR 0 13
14129: PUSH
14130: LD_VAR 0 20
14134: PUSH
14135: FOR_IN
14136: IFFALSE 14312
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14138: LD_ADDR_VAR 0 21
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_VAR 0 11
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: PPUSH
14160: LD_VAR 0 13
14164: PPUSH
14165: CALL_OW 74
14169: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14170: LD_ADDR_VAR 0 22
14174: PUSH
14175: LD_INT 22
14177: PUSH
14178: LD_VAR 0 11
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 2
14189: PUSH
14190: LD_INT 59
14192: PUSH
14193: EMPTY
14194: LIST
14195: PUSH
14196: LD_INT 21
14198: PUSH
14199: LD_INT 1
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: EMPTY
14227: LIST
14228: PPUSH
14229: CALL_OW 69
14233: PPUSH
14234: LD_VAR 0 13
14238: PPUSH
14239: CALL_OW 74
14243: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14244: LD_VAR 0 13
14248: PPUSH
14249: LD_VAR 0 21
14253: PPUSH
14254: CALL_OW 296
14258: PUSH
14259: LD_INT 8
14261: PLUS
14262: PUSH
14263: LD_VAR 0 13
14267: PPUSH
14268: LD_VAR 0 22
14272: PPUSH
14273: CALL_OW 296
14277: LESS
14278: IFFALSE 14296
// begin ComAttackUnit ( i , target1 ) ;
14280: LD_VAR 0 13
14284: PPUSH
14285: LD_VAR 0 21
14289: PPUSH
14290: CALL_OW 115
// end else
14294: GO 14310
// begin ComAttackUnit ( i , target2 ) ;
14296: LD_VAR 0 13
14300: PPUSH
14301: LD_VAR 0 22
14305: PPUSH
14306: CALL_OW 115
// end ; end ;
14310: GO 14135
14312: POP
14313: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
14314: LD_INT 22
14316: PUSH
14317: LD_VAR 0 2
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PUSH
14326: LD_INT 21
14328: PUSH
14329: LD_INT 2
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PPUSH
14340: CALL_OW 69
14344: PUSH
14345: LD_INT 0
14347: EQUAL
14348: IFFALSE 14061
// end ;
14350: LD_VAR 0 12
14354: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
14355: LD_INT 0
14357: PPUSH
14358: PPUSH
14359: PPUSH
14360: PPUSH
14361: PPUSH
14362: PPUSH
14363: PPUSH
14364: PPUSH
14365: PPUSH
14366: PPUSH
14367: PPUSH
// for i = 1 to medicCount do
14368: LD_ADDR_VAR 0 13
14372: PUSH
14373: DOUBLE
14374: LD_INT 1
14376: DEC
14377: ST_TO_ADDR
14378: LD_VAR 0 7
14382: PUSH
14383: FOR_TO
14384: IFFALSE 14466
// begin uc_side = side ;
14386: LD_ADDR_OWVAR 20
14390: PUSH
14391: LD_VAR 0 1
14395: ST_TO_ADDR
// uc_nation = nation ;
14396: LD_ADDR_OWVAR 21
14400: PUSH
14401: LD_VAR 0 2
14405: ST_TO_ADDR
// hc_name =  ;
14406: LD_ADDR_OWVAR 26
14410: PUSH
14411: LD_STRING 
14413: ST_TO_ADDR
// hc_gallery =  ;
14414: LD_ADDR_OWVAR 33
14418: PUSH
14419: LD_STRING 
14421: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
14422: LD_INT 0
14424: PPUSH
14425: LD_INT 4
14427: PPUSH
14428: LD_VAR 0 8
14432: PPUSH
14433: CALL_OW 380
// un = CreateHuman ;
14437: LD_ADDR_VAR 0 15
14441: PUSH
14442: CALL_OW 44
14446: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14447: LD_VAR 0 15
14451: PPUSH
14452: LD_VAR 0 9
14456: PPUSH
14457: LD_INT 0
14459: PPUSH
14460: CALL_OW 49
// end ;
14464: GO 14383
14466: POP
14467: POP
// for i = 1 to soldierCount do
14468: LD_ADDR_VAR 0 13
14472: PUSH
14473: DOUBLE
14474: LD_INT 1
14476: DEC
14477: ST_TO_ADDR
14478: LD_VAR 0 3
14482: PUSH
14483: FOR_TO
14484: IFFALSE 14566
// begin uc_side = side ;
14486: LD_ADDR_OWVAR 20
14490: PUSH
14491: LD_VAR 0 1
14495: ST_TO_ADDR
// uc_nation = nation ;
14496: LD_ADDR_OWVAR 21
14500: PUSH
14501: LD_VAR 0 2
14505: ST_TO_ADDR
// hc_name =  ;
14506: LD_ADDR_OWVAR 26
14510: PUSH
14511: LD_STRING 
14513: ST_TO_ADDR
// hc_gallery =  ;
14514: LD_ADDR_OWVAR 33
14518: PUSH
14519: LD_STRING 
14521: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
14522: LD_INT 0
14524: PPUSH
14525: LD_INT 1
14527: PPUSH
14528: LD_VAR 0 8
14532: PPUSH
14533: CALL_OW 380
// un = CreateHuman ;
14537: LD_ADDR_VAR 0 15
14541: PUSH
14542: CALL_OW 44
14546: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14547: LD_VAR 0 15
14551: PPUSH
14552: LD_VAR 0 9
14556: PPUSH
14557: LD_INT 0
14559: PPUSH
14560: CALL_OW 49
// end ;
14564: GO 14483
14566: POP
14567: POP
// for i = 1 to sniperCount do
14568: LD_ADDR_VAR 0 13
14572: PUSH
14573: DOUBLE
14574: LD_INT 1
14576: DEC
14577: ST_TO_ADDR
14578: LD_VAR 0 4
14582: PUSH
14583: FOR_TO
14584: IFFALSE 14666
// begin uc_side = side ;
14586: LD_ADDR_OWVAR 20
14590: PUSH
14591: LD_VAR 0 1
14595: ST_TO_ADDR
// uc_nation = nation ;
14596: LD_ADDR_OWVAR 21
14600: PUSH
14601: LD_VAR 0 2
14605: ST_TO_ADDR
// hc_name =  ;
14606: LD_ADDR_OWVAR 26
14610: PUSH
14611: LD_STRING 
14613: ST_TO_ADDR
// hc_gallery =  ;
14614: LD_ADDR_OWVAR 33
14618: PUSH
14619: LD_STRING 
14621: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
14622: LD_INT 0
14624: PPUSH
14625: LD_INT 5
14627: PPUSH
14628: LD_VAR 0 8
14632: PPUSH
14633: CALL_OW 380
// un = CreateHuman ;
14637: LD_ADDR_VAR 0 15
14641: PUSH
14642: CALL_OW 44
14646: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14647: LD_VAR 0 15
14651: PPUSH
14652: LD_VAR 0 9
14656: PPUSH
14657: LD_INT 0
14659: PPUSH
14660: CALL_OW 49
// end ;
14664: GO 14583
14666: POP
14667: POP
// for i = 1 to bazookCount do
14668: LD_ADDR_VAR 0 13
14672: PUSH
14673: DOUBLE
14674: LD_INT 1
14676: DEC
14677: ST_TO_ADDR
14678: LD_VAR 0 5
14682: PUSH
14683: FOR_TO
14684: IFFALSE 14766
// begin uc_side = side ;
14686: LD_ADDR_OWVAR 20
14690: PUSH
14691: LD_VAR 0 1
14695: ST_TO_ADDR
// uc_nation = nation ;
14696: LD_ADDR_OWVAR 21
14700: PUSH
14701: LD_VAR 0 2
14705: ST_TO_ADDR
// hc_name =  ;
14706: LD_ADDR_OWVAR 26
14710: PUSH
14711: LD_STRING 
14713: ST_TO_ADDR
// hc_gallery =  ;
14714: LD_ADDR_OWVAR 33
14718: PUSH
14719: LD_STRING 
14721: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
14722: LD_INT 0
14724: PPUSH
14725: LD_INT 9
14727: PPUSH
14728: LD_VAR 0 8
14732: PPUSH
14733: CALL_OW 380
// un = CreateHuman ;
14737: LD_ADDR_VAR 0 15
14741: PUSH
14742: CALL_OW 44
14746: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14747: LD_VAR 0 15
14751: PPUSH
14752: LD_VAR 0 9
14756: PPUSH
14757: LD_INT 0
14759: PPUSH
14760: CALL_OW 49
// end ;
14764: GO 14683
14766: POP
14767: POP
// for i = 1 to mortalCount do
14768: LD_ADDR_VAR 0 13
14772: PUSH
14773: DOUBLE
14774: LD_INT 1
14776: DEC
14777: ST_TO_ADDR
14778: LD_VAR 0 6
14782: PUSH
14783: FOR_TO
14784: IFFALSE 14866
// begin uc_side = side ;
14786: LD_ADDR_OWVAR 20
14790: PUSH
14791: LD_VAR 0 1
14795: ST_TO_ADDR
// uc_nation = nation ;
14796: LD_ADDR_OWVAR 21
14800: PUSH
14801: LD_VAR 0 2
14805: ST_TO_ADDR
// hc_name =  ;
14806: LD_ADDR_OWVAR 26
14810: PUSH
14811: LD_STRING 
14813: ST_TO_ADDR
// hc_gallery =  ;
14814: LD_ADDR_OWVAR 33
14818: PUSH
14819: LD_STRING 
14821: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
14822: LD_INT 0
14824: PPUSH
14825: LD_INT 8
14827: PPUSH
14828: LD_VAR 0 8
14832: PPUSH
14833: CALL_OW 380
// un = CreateHuman ;
14837: LD_ADDR_VAR 0 15
14841: PUSH
14842: CALL_OW 44
14846: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
14847: LD_VAR 0 15
14851: PPUSH
14852: LD_VAR 0 9
14856: PPUSH
14857: LD_INT 0
14859: PPUSH
14860: CALL_OW 49
// end ;
14864: GO 14783
14866: POP
14867: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
14868: LD_ADDR_VAR 0 18
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_VAR 0 1
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: LD_INT 25
14890: PUSH
14891: LD_INT 1
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: PUSH
14898: LD_INT 25
14900: PUSH
14901: LD_INT 5
14903: PUSH
14904: EMPTY
14905: LIST
14906: LIST
14907: PUSH
14908: LD_INT 25
14910: PUSH
14911: LD_INT 8
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: PUSH
14918: LD_INT 25
14920: PUSH
14921: LD_INT 9
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: PUSH
14928: EMPTY
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 69
14943: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14944: LD_ADDR_VAR 0 17
14948: PUSH
14949: LD_INT 22
14951: PUSH
14952: LD_VAR 0 1
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: LD_INT 25
14963: PUSH
14964: LD_INT 4
14966: PUSH
14967: EMPTY
14968: LIST
14969: LIST
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PPUSH
14975: CALL_OW 69
14979: ST_TO_ADDR
// for i in medic_list do
14980: LD_ADDR_VAR 0 13
14984: PUSH
14985: LD_VAR 0 17
14989: PUSH
14990: FOR_IN
14991: IFFALSE 15009
// ComMoveToArea ( i , healArea ) ;
14993: LD_VAR 0 13
14997: PPUSH
14998: LD_VAR 0 10
15002: PPUSH
15003: CALL_OW 113
15007: GO 14990
15009: POP
15010: POP
// repeat wait ( 0 0$1 ) ;
15011: LD_INT 35
15013: PPUSH
15014: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
15018: LD_ADDR_VAR 0 16
15022: PUSH
15023: LD_INT 22
15025: PUSH
15026: LD_VAR 0 1
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PUSH
15035: LD_INT 1
15037: PUSH
15038: LD_INT 3
15040: PUSH
15041: LD_INT 24
15043: PUSH
15044: LD_INT 550
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 24
15057: PUSH
15058: LD_INT 250
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: EMPTY
15066: LIST
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: PPUSH
15074: CALL_OW 69
15078: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
15079: LD_ADDR_VAR 0 18
15083: PUSH
15084: LD_INT 22
15086: PUSH
15087: LD_VAR 0 1
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: PUSH
15096: LD_INT 2
15098: PUSH
15099: LD_INT 25
15101: PUSH
15102: LD_INT 1
15104: PUSH
15105: EMPTY
15106: LIST
15107: LIST
15108: PUSH
15109: LD_INT 25
15111: PUSH
15112: LD_INT 5
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 25
15121: PUSH
15122: LD_INT 8
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 25
15131: PUSH
15132: LD_INT 9
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: PUSH
15146: LD_INT 24
15148: PUSH
15149: LD_INT 1000
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: EMPTY
15157: LIST
15158: LIST
15159: LIST
15160: PPUSH
15161: CALL_OW 69
15165: ST_TO_ADDR
// if medicCount > 0 then
15166: LD_VAR 0 7
15170: PUSH
15171: LD_INT 0
15173: GREATER
15174: IFFALSE 15248
// begin if damageUnit_list > 0 then
15176: LD_VAR 0 16
15180: PUSH
15181: LD_INT 0
15183: GREATER
15184: IFFALSE 15248
// begin for i in damageUnit_list do
15186: LD_ADDR_VAR 0 13
15190: PUSH
15191: LD_VAR 0 16
15195: PUSH
15196: FOR_IN
15197: IFFALSE 15246
// begin ComMoveToArea ( i , healArea ) ;
15199: LD_VAR 0 13
15203: PPUSH
15204: LD_VAR 0 10
15208: PPUSH
15209: CALL_OW 113
// for j in medic_list do
15213: LD_ADDR_VAR 0 14
15217: PUSH
15218: LD_VAR 0 17
15222: PUSH
15223: FOR_IN
15224: IFFALSE 15242
// AddComHeal ( j , i ) ;
15226: LD_VAR 0 14
15230: PPUSH
15231: LD_VAR 0 13
15235: PPUSH
15236: CALL_OW 188
15240: GO 15223
15242: POP
15243: POP
// end ;
15244: GO 15196
15246: POP
15247: POP
// end ; end ; for i in soldiersOK_list do
15248: LD_ADDR_VAR 0 13
15252: PUSH
15253: LD_VAR 0 18
15257: PUSH
15258: FOR_IN
15259: IFFALSE 15435
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15261: LD_ADDR_VAR 0 21
15265: PUSH
15266: LD_INT 22
15268: PUSH
15269: LD_VAR 0 11
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: PPUSH
15278: CALL_OW 69
15282: PPUSH
15283: LD_VAR 0 13
15287: PPUSH
15288: CALL_OW 74
15292: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15293: LD_ADDR_VAR 0 22
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_VAR 0 11
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: LD_INT 59
15315: PUSH
15316: EMPTY
15317: LIST
15318: PUSH
15319: LD_INT 21
15321: PUSH
15322: LD_INT 1
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 21
15331: PUSH
15332: LD_INT 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: PPUSH
15352: CALL_OW 69
15356: PPUSH
15357: LD_VAR 0 13
15361: PPUSH
15362: CALL_OW 74
15366: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15367: LD_VAR 0 13
15371: PPUSH
15372: LD_VAR 0 21
15376: PPUSH
15377: CALL_OW 296
15381: PUSH
15382: LD_INT 8
15384: PLUS
15385: PUSH
15386: LD_VAR 0 13
15390: PPUSH
15391: LD_VAR 0 22
15395: PPUSH
15396: CALL_OW 296
15400: LESS
15401: IFFALSE 15419
// begin ComAttackUnit ( i , target1 ) ;
15403: LD_VAR 0 13
15407: PPUSH
15408: LD_VAR 0 21
15412: PPUSH
15413: CALL_OW 115
// end else
15417: GO 15433
// begin ComAttackUnit ( i , target2 ) ;
15419: LD_VAR 0 13
15423: PPUSH
15424: LD_VAR 0 22
15428: PPUSH
15429: CALL_OW 115
// end ; end ;
15433: GO 15258
15435: POP
15436: POP
// for i in soldiersOK_list do
15437: LD_ADDR_VAR 0 13
15441: PUSH
15442: LD_VAR 0 18
15446: PUSH
15447: FOR_IN
15448: IFFALSE 15624
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15450: LD_ADDR_VAR 0 21
15454: PUSH
15455: LD_INT 22
15457: PUSH
15458: LD_VAR 0 11
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PPUSH
15467: CALL_OW 69
15471: PPUSH
15472: LD_VAR 0 13
15476: PPUSH
15477: CALL_OW 74
15481: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15482: LD_ADDR_VAR 0 22
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: LD_VAR 0 11
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: LD_INT 59
15504: PUSH
15505: EMPTY
15506: LIST
15507: PUSH
15508: LD_INT 21
15510: PUSH
15511: LD_INT 1
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: LD_INT 21
15520: PUSH
15521: LD_INT 2
15523: PUSH
15524: EMPTY
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: PUSH
15538: EMPTY
15539: LIST
15540: PPUSH
15541: CALL_OW 69
15545: PPUSH
15546: LD_VAR 0 13
15550: PPUSH
15551: CALL_OW 74
15555: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15556: LD_VAR 0 13
15560: PPUSH
15561: LD_VAR 0 21
15565: PPUSH
15566: CALL_OW 296
15570: PUSH
15571: LD_INT 8
15573: PLUS
15574: PUSH
15575: LD_VAR 0 13
15579: PPUSH
15580: LD_VAR 0 22
15584: PPUSH
15585: CALL_OW 296
15589: LESS
15590: IFFALSE 15608
// begin ComAttackUnit ( i , target1 ) ;
15592: LD_VAR 0 13
15596: PPUSH
15597: LD_VAR 0 21
15601: PPUSH
15602: CALL_OW 115
// end else
15606: GO 15622
// begin ComAttackUnit ( i , target2 ) ;
15608: LD_VAR 0 13
15612: PPUSH
15613: LD_VAR 0 22
15617: PPUSH
15618: CALL_OW 115
// end ; end ;
15622: GO 15447
15624: POP
15625: POP
// until soldiersOK_list = [ ] ;
15626: LD_VAR 0 18
15630: PUSH
15631: EMPTY
15632: EQUAL
15633: IFFALSE 15011
// end ;
15635: LD_VAR 0 12
15639: RET
// export function TameApemans ; var i , j ; begin
15640: LD_INT 0
15642: PPUSH
15643: PPUSH
15644: PPUSH
// repeat wait ( 0 0$1 ) ;
15645: LD_INT 35
15647: PPUSH
15648: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
15652: LD_ADDR_VAR 0 2
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: PUSH
15667: LD_INT 25
15669: PUSH
15670: LD_INT 4
15672: PUSH
15673: EMPTY
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: PUSH
15686: FOR_IN
15687: IFFALSE 15764
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
15689: LD_ADDR_VAR 0 3
15693: PUSH
15694: LD_INT 5
15696: PPUSH
15697: LD_INT 22
15699: PUSH
15700: LD_INT 0
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: LD_INT 25
15709: PUSH
15710: LD_INT 12
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: PPUSH
15721: CALL_OW 70
15725: PUSH
15726: FOR_IN
15727: IFFALSE 15760
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
15729: LD_VAR 0 2
15733: PPUSH
15734: LD_VAR 0 3
15738: PPUSH
15739: CALL_OW 250
15743: PPUSH
15744: LD_VAR 0 3
15748: PPUSH
15749: CALL_OW 251
15753: PPUSH
15754: CALL_OW 191
// end ;
15758: GO 15726
15760: POP
15761: POP
// end ;
15762: GO 15686
15764: POP
15765: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
15766: LD_INT 22
15768: PUSH
15769: LD_INT 2
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: PUSH
15776: LD_INT 25
15778: PUSH
15779: LD_INT 4
15781: PUSH
15782: EMPTY
15783: LIST
15784: LIST
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PPUSH
15790: CALL_OW 69
15794: PUSH
15795: LD_INT 0
15797: EQUAL
15798: PUSH
15799: LD_INT 5
15801: PPUSH
15802: LD_INT 22
15804: PUSH
15805: LD_INT 0
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: PUSH
15812: LD_INT 25
15814: PUSH
15815: LD_INT 12
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PPUSH
15826: CALL_OW 70
15830: PUSH
15831: LD_INT 0
15833: EQUAL
15834: OR
15835: IFFALSE 15645
// wait ( 0 0$30 ) ;
15837: LD_INT 1050
15839: PPUSH
15840: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
15844: LD_ADDR_VAR 0 2
15848: PUSH
15849: LD_INT 22
15851: PUSH
15852: LD_INT 2
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: LD_INT 25
15861: PUSH
15862: LD_INT 12
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: PUSH
15869: EMPTY
15870: LIST
15871: LIST
15872: PPUSH
15873: CALL_OW 69
15877: PUSH
15878: FOR_IN
15879: IFFALSE 15943
// begin SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
15881: LD_VAR 0 2
15885: PPUSH
15886: LD_INT 16
15888: PUSH
15889: LD_INT 15
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 1
15898: PPUSH
15899: LD_INT 2
15901: PPUSH
15902: CALL_OW 12
15906: ARRAY
15907: PPUSH
15908: CALL_OW 336
// ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
15912: LD_VAR 0 2
15916: PPUSH
15917: LD_EXP 42
15921: PPUSH
15922: CALL_OW 250
15926: PPUSH
15927: LD_EXP 42
15931: PPUSH
15932: CALL_OW 251
15936: PPUSH
15937: CALL_OW 111
// end ;
15941: GO 15878
15943: POP
15944: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
15945: LD_ADDR_VAR 0 2
15949: PUSH
15950: LD_INT 22
15952: PUSH
15953: LD_INT 2
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 25
15962: PUSH
15963: LD_INT 4
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: PUSH
15979: FOR_IN
15980: IFFALSE 16026
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
15982: LD_VAR 0 2
15986: PPUSH
15987: LD_INT 22
15989: PUSH
15990: LD_INT 2
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 30
15999: PUSH
16000: LD_INT 8
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: PPUSH
16011: CALL_OW 69
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PPUSH
16020: CALL_OW 120
16024: GO 15979
16026: POP
16027: POP
// end ;
16028: LD_VAR 0 1
16032: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
16033: LD_INT 0
16035: PPUSH
16036: PPUSH
16037: PPUSH
16038: PPUSH
16039: PPUSH
16040: PPUSH
16041: PPUSH
16042: PPUSH
16043: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
16044: LD_INT 22
16046: PUSH
16047: LD_VAR 0 1
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 21
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: EMPTY
16063: LIST
16064: LIST
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PPUSH
16070: CALL_OW 69
16074: PUSH
16075: LD_VAR 0 3
16079: LESSEQUAL
16080: IFFALSE 16224
// for i = 1 to vehCount do
16082: LD_ADDR_VAR 0 10
16086: PUSH
16087: DOUBLE
16088: LD_INT 1
16090: DEC
16091: ST_TO_ADDR
16092: LD_VAR 0 3
16096: PUSH
16097: FOR_TO
16098: IFFALSE 16222
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
16100: LD_ADDR_VAR 0 12
16104: PUSH
16105: LD_VAR 0 5
16109: PUSH
16110: LD_INT 1
16112: PPUSH
16113: LD_VAR 0 5
16117: PPUSH
16118: CALL_OW 12
16122: ARRAY
16123: ST_TO_ADDR
// if randWeapon = 46 then
16124: LD_VAR 0 12
16128: PUSH
16129: LD_INT 46
16131: EQUAL
16132: IFFALSE 16177
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
16134: LD_VAR 0 2
16138: PPUSH
16139: LD_INT 24
16141: PPUSH
16142: LD_VAR 0 6
16146: PPUSH
16147: LD_VAR 0 7
16151: PUSH
16152: LD_INT 1
16154: PPUSH
16155: LD_VAR 0 7
16159: PPUSH
16160: CALL_OW 12
16164: ARRAY
16165: PPUSH
16166: LD_VAR 0 12
16170: PPUSH
16171: CALL_OW 185
16175: GO 16220
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
16177: LD_VAR 0 2
16181: PPUSH
16182: LD_VAR 0 8
16186: PPUSH
16187: LD_VAR 0 6
16191: PPUSH
16192: LD_VAR 0 7
16196: PUSH
16197: LD_INT 1
16199: PPUSH
16200: LD_VAR 0 7
16204: PPUSH
16205: CALL_OW 12
16209: ARRAY
16210: PPUSH
16211: LD_VAR 0 12
16215: PPUSH
16216: CALL_OW 185
// end ;
16220: GO 16097
16222: POP
16223: POP
// repeat wait ( 0 0$1 ) ;
16224: LD_INT 35
16226: PPUSH
16227: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
16231: LD_INT 22
16233: PUSH
16234: LD_VAR 0 1
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: LD_INT 21
16245: PUSH
16246: LD_INT 2
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: PUSH
16253: LD_INT 24
16255: PUSH
16256: LD_INT 250
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: LIST
16267: PPUSH
16268: CALL_OW 69
16272: PUSH
16273: LD_VAR 0 3
16277: GREATEREQUAL
16278: IFFALSE 16224
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
16280: LD_INT 22
16282: PUSH
16283: LD_VAR 0 1
16287: PUSH
16288: EMPTY
16289: LIST
16290: LIST
16291: PUSH
16292: LD_INT 21
16294: PUSH
16295: LD_INT 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 24
16304: PUSH
16305: LD_INT 250
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: PUSH
16322: LD_VAR 0 3
16326: GREATEREQUAL
16327: IFFALSE 16670
// begin repeat begin wait ( 0 0$1 ) ;
16329: LD_INT 35
16331: PPUSH
16332: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
16336: LD_INT 22
16338: PUSH
16339: LD_VAR 0 1
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 2
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: PUSH
16358: LD_INT 24
16360: PUSH
16361: LD_INT 651
16363: PUSH
16364: EMPTY
16365: LIST
16366: LIST
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: PPUSH
16373: CALL_OW 69
16377: PUSH
16378: LD_INT 0
16380: GREATER
16381: IFFALSE 16609
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
16383: LD_ADDR_VAR 0 10
16387: PUSH
16388: LD_INT 22
16390: PUSH
16391: LD_VAR 0 1
16395: PUSH
16396: EMPTY
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 21
16402: PUSH
16403: LD_INT 2
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: PUSH
16410: LD_INT 24
16412: PUSH
16413: LD_INT 651
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: PUSH
16430: FOR_IN
16431: IFFALSE 16607
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16433: LD_ADDR_VAR 0 16
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_VAR 0 4
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PPUSH
16450: CALL_OW 69
16454: PPUSH
16455: LD_VAR 0 10
16459: PPUSH
16460: CALL_OW 74
16464: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16465: LD_ADDR_VAR 0 17
16469: PUSH
16470: LD_INT 22
16472: PUSH
16473: LD_VAR 0 4
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 2
16484: PUSH
16485: LD_INT 59
16487: PUSH
16488: EMPTY
16489: LIST
16490: PUSH
16491: LD_INT 21
16493: PUSH
16494: LD_INT 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 21
16503: PUSH
16504: LD_INT 2
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: PPUSH
16524: CALL_OW 69
16528: PPUSH
16529: LD_VAR 0 10
16533: PPUSH
16534: CALL_OW 74
16538: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16539: LD_VAR 0 10
16543: PPUSH
16544: LD_VAR 0 16
16548: PPUSH
16549: CALL_OW 296
16553: PUSH
16554: LD_INT 8
16556: PLUS
16557: PUSH
16558: LD_VAR 0 10
16562: PPUSH
16563: LD_VAR 0 17
16567: PPUSH
16568: CALL_OW 296
16572: LESS
16573: IFFALSE 16591
// begin ComAttackUnit ( i , target1 ) ;
16575: LD_VAR 0 10
16579: PPUSH
16580: LD_VAR 0 16
16584: PPUSH
16585: CALL_OW 115
// end else
16589: GO 16605
// begin ComAttackUnit ( i , target2 ) ;
16591: LD_VAR 0 10
16595: PPUSH
16596: LD_VAR 0 17
16600: PPUSH
16601: CALL_OW 115
// end ; end ;
16605: GO 16430
16607: POP
16608: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
16609: LD_INT 22
16611: PUSH
16612: LD_VAR 0 1
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PUSH
16621: LD_INT 21
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: EMPTY
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: PPUSH
16635: CALL_OW 69
16639: PUSH
16640: LD_INT 0
16642: EQUAL
16643: PUSH
16644: LD_INT 22
16646: PUSH
16647: LD_VAR 0 4
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: EMPTY
16657: LIST
16658: PPUSH
16659: CALL_OW 69
16663: PUSH
16664: LD_INT 0
16666: EQUAL
16667: OR
16668: IFFALSE 16329
// end ; end ; end_of_file
16670: LD_VAR 0 9
16674: RET
// every 0 0$1 trigger russianAI = 1 do
16675: LD_EXP 38
16679: PUSH
16680: LD_INT 1
16682: EQUAL
16683: IFFALSE 16902
16685: GO 16687
16687: DISABLE
// begin enable ;
16688: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
16689: LD_INT 3
16691: PPUSH
16692: LD_EXP 29
16696: PPUSH
16697: CALL 11574 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
16701: LD_INT 3
16703: PPUSH
16704: LD_EXP 41
16708: PPUSH
16709: CALL 11881 0 2
// if ruPossition = 1 then
16713: LD_EXP 40
16717: PUSH
16718: LD_INT 1
16720: EQUAL
16721: IFFALSE 16776
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
16723: LD_INT 3
16725: PPUSH
16726: LD_INT 13
16728: PPUSH
16729: LD_INT 10
16731: PPUSH
16732: LD_INT 22
16734: PUSH
16735: LD_INT 3
16737: PUSH
16738: EMPTY
16739: LIST
16740: LIST
16741: PUSH
16742: LD_INT 21
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: LD_INT 30
16754: PUSH
16755: LD_INT 8
16757: PUSH
16758: EMPTY
16759: LIST
16760: LIST
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: PPUSH
16767: CALL_OW 69
16771: PPUSH
16772: CALL 12087 0 4
// if ruPossition = 2 then
16776: LD_EXP 40
16780: PUSH
16781: LD_INT 2
16783: EQUAL
16784: IFFALSE 16839
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
16786: LD_INT 3
16788: PPUSH
16789: LD_INT 14
16791: PPUSH
16792: LD_INT 11
16794: PPUSH
16795: LD_INT 22
16797: PUSH
16798: LD_INT 3
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: PUSH
16805: LD_INT 21
16807: PUSH
16808: LD_INT 3
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: PUSH
16815: LD_INT 30
16817: PUSH
16818: LD_INT 8
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: LIST
16829: PPUSH
16830: CALL_OW 69
16834: PPUSH
16835: CALL 12087 0 4
// if ruPossition = 3 then
16839: LD_EXP 40
16843: PUSH
16844: LD_INT 3
16846: EQUAL
16847: IFFALSE 16902
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
16849: LD_INT 3
16851: PPUSH
16852: LD_INT 15
16854: PPUSH
16855: LD_INT 12
16857: PPUSH
16858: LD_INT 22
16860: PUSH
16861: LD_INT 3
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: PUSH
16868: LD_INT 21
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: PUSH
16878: LD_INT 30
16880: PUSH
16881: LD_INT 8
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: PPUSH
16893: CALL_OW 69
16897: PPUSH
16898: CALL 12087 0 4
// end ;
16902: END
// every 0 0$1 do
16903: GO 16905
16905: DISABLE
// begin enable ;
16906: ENABLE
// if ruPossition = 1 then
16907: LD_EXP 40
16911: PUSH
16912: LD_INT 1
16914: EQUAL
16915: IFFALSE 16927
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
16917: LD_INT 3
16919: PPUSH
16920: LD_INT 10
16922: PPUSH
16923: CALL 11272 0 2
// if ruPossition = 2 then
16927: LD_EXP 40
16931: PUSH
16932: LD_INT 2
16934: EQUAL
16935: IFFALSE 16947
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
16937: LD_INT 3
16939: PPUSH
16940: LD_INT 11
16942: PPUSH
16943: CALL 11272 0 2
// if ruPossition = 3 then
16947: LD_EXP 40
16951: PUSH
16952: LD_INT 3
16954: EQUAL
16955: IFFALSE 16967
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
16957: LD_INT 3
16959: PPUSH
16960: LD_INT 12
16962: PPUSH
16963: CALL 11272 0 2
// IntBazooka ( 3 , 1 ) ;
16967: LD_INT 3
16969: PPUSH
16970: LD_INT 1
16972: PPUSH
16973: CALL 10363 0 2
// IntBazooka ( 6 , 1 ) ;
16977: LD_INT 6
16979: PPUSH
16980: LD_INT 1
16982: PPUSH
16983: CALL 10363 0 2
// end ;
16987: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
16988: LD_EXP 38
16992: PUSH
16993: LD_INT 1
16995: EQUAL
16996: PUSH
16997: LD_EXP 34
17001: PPUSH
17002: CALL_OW 302
17006: AND
17007: PUSH
17008: LD_EXP 34
17012: PPUSH
17013: CALL_OW 255
17017: PUSH
17018: LD_INT 3
17020: EQUAL
17021: AND
17022: PUSH
17023: LD_INT 22
17025: PUSH
17026: LD_INT 3
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: LD_INT 21
17035: PUSH
17036: LD_INT 2
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PUSH
17043: LD_INT 33
17045: PUSH
17046: LD_INT 3
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: PPUSH
17058: CALL_OW 69
17062: PUSH
17063: LD_INT 0
17065: EQUAL
17066: AND
17067: IFFALSE 17275
17069: GO 17071
17071: DISABLE
// begin enable ;
17072: ENABLE
// if Difficulty = 1 then
17073: LD_OWVAR 67
17077: PUSH
17078: LD_INT 1
17080: EQUAL
17081: IFFALSE 17143
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17083: LD_INT 3
17085: PPUSH
17086: LD_EXP 34
17090: PPUSH
17091: LD_INT 5
17093: PPUSH
17094: LD_INT 8
17096: PPUSH
17097: CALL_OW 12
17101: PPUSH
17102: LD_INT 1
17104: PPUSH
17105: LD_INT 43
17107: PUSH
17108: LD_INT 44
17110: PUSH
17111: LD_INT 45
17113: PUSH
17114: LD_INT 46
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: PPUSH
17123: LD_INT 1
17125: PPUSH
17126: LD_INT 1
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: PPUSH
17136: LD_INT 22
17138: PPUSH
17139: CALL 16033 0 8
// if Difficulty = 2 then
17143: LD_OWVAR 67
17147: PUSH
17148: LD_INT 2
17150: EQUAL
17151: IFFALSE 17209
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17153: LD_INT 3
17155: PPUSH
17156: LD_EXP 34
17160: PPUSH
17161: LD_INT 6
17163: PPUSH
17164: LD_INT 8
17166: PPUSH
17167: CALL_OW 12
17171: PPUSH
17172: LD_INT 1
17174: PPUSH
17175: LD_INT 44
17177: PUSH
17178: LD_INT 45
17180: PUSH
17181: LD_INT 46
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: LD_INT 1
17194: PUSH
17195: LD_INT 3
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PPUSH
17202: LD_INT 22
17204: PPUSH
17205: CALL 16033 0 8
// if Difficulty = 3 then
17209: LD_OWVAR 67
17213: PUSH
17214: LD_INT 3
17216: EQUAL
17217: IFFALSE 17275
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
17219: LD_INT 3
17221: PPUSH
17222: LD_EXP 34
17226: PPUSH
17227: LD_INT 7
17229: PPUSH
17230: LD_INT 8
17232: PPUSH
17233: CALL_OW 12
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: LD_INT 44
17243: PUSH
17244: LD_INT 45
17246: PUSH
17247: LD_INT 46
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: LIST
17254: PPUSH
17255: LD_INT 1
17257: PPUSH
17258: LD_INT 1
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: LD_INT 22
17270: PPUSH
17271: CALL 16033 0 8
// end ; end_of_file
17275: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
17276: LD_VAR 0 1
17280: PPUSH
17281: CALL_OW 255
17285: PUSH
17286: LD_INT 4
17288: EQUAL
17289: IFFALSE 17303
// SetBName ( building , epsilon ) ;
17291: LD_VAR 0 1
17295: PPUSH
17296: LD_STRING epsilon
17298: PPUSH
17299: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
17303: LD_VAR 0 1
17307: PPUSH
17308: CALL_OW 255
17312: PUSH
17313: LD_INT 1
17315: EQUAL
17316: PUSH
17317: LD_VAR 0 1
17321: PPUSH
17322: CALL_OW 266
17326: PUSH
17327: LD_INT 0
17329: EQUAL
17330: AND
17331: IFFALSE 17345
// SetBName ( building , epsilon ) ;
17333: LD_VAR 0 1
17337: PPUSH
17338: LD_STRING epsilon
17340: PPUSH
17341: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
17345: LD_VAR 0 1
17349: PPUSH
17350: CALL_OW 255
17354: PUSH
17355: LD_INT 3
17357: EQUAL
17358: PUSH
17359: LD_VAR 0 1
17363: PPUSH
17364: CALL_OW 266
17368: PUSH
17369: LD_INT 0
17371: EQUAL
17372: AND
17373: IFFALSE 17387
// SetBName ( building , chuikov ) ;
17375: LD_VAR 0 1
17379: PPUSH
17380: LD_STRING chuikov
17382: PPUSH
17383: CALL_OW 500
// end ;
17387: PPOPN 2
17389: END
// on BuildingComplete ( building ) do var i ;
17390: LD_INT 0
17392: PPUSH
// begin if GetSide ( building ) = 1 then
17393: LD_VAR 0 1
17397: PPUSH
17398: CALL_OW 255
17402: PUSH
17403: LD_INT 1
17405: EQUAL
17406: IFFALSE 17606
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17408: LD_INT 22
17410: PUSH
17411: LD_INT 1
17413: PUSH
17414: EMPTY
17415: LIST
17416: LIST
17417: PUSH
17418: LD_INT 2
17420: PUSH
17421: LD_INT 30
17423: PUSH
17424: LD_INT 7
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: PUSH
17431: LD_INT 30
17433: PUSH
17434: LD_INT 8
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 1
17443: PUSH
17444: LD_INT 30
17446: PUSH
17447: LD_INT 11
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 1
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: LD_INT 30
17462: PUSH
17463: LD_INT 26
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PUSH
17470: LD_INT 30
17472: PUSH
17473: LD_INT 27
17475: PUSH
17476: EMPTY
17477: LIST
17478: LIST
17479: PUSH
17480: LD_INT 30
17482: PUSH
17483: LD_INT 28
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: PUSH
17505: EMPTY
17506: LIST
17507: LIST
17508: LIST
17509: LIST
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: PPUSH
17515: CALL_OW 69
17519: PUSH
17520: LD_INT 0
17522: GREATER
17523: PUSH
17524: LD_INT 22
17526: PUSH
17527: LD_INT 1
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: LD_INT 30
17539: PUSH
17540: LD_INT 26
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: LD_INT 27
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 30
17559: PUSH
17560: LD_INT 28
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: PUSH
17567: EMPTY
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: PUSH
17573: EMPTY
17574: LIST
17575: LIST
17576: PPUSH
17577: CALL_OW 69
17581: PUSH
17582: LD_INT 0
17584: GREATER
17585: AND
17586: PUSH
17587: LD_EXP 54
17591: PUSH
17592: LD_INT 0
17594: EQUAL
17595: AND
17596: IFFALSE 17606
// eventVar1 = 1 ;
17598: LD_ADDR_EXP 54
17602: PUSH
17603: LD_INT 1
17605: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 255
17615: PUSH
17616: LD_INT 3
17618: EQUAL
17619: IFFALSE 18099
// begin if GetBType ( building ) = b_depot then
17621: LD_VAR 0 1
17625: PPUSH
17626: CALL_OW 266
17630: PUSH
17631: LD_INT 0
17633: EQUAL
17634: IFFALSE 17706
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
17636: LD_VAR 0 1
17640: PPUSH
17641: CALL_OW 274
17645: PPUSH
17646: LD_INT 1
17648: PPUSH
17649: LD_INT 5000
17651: PPUSH
17652: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 274
17665: PPUSH
17666: LD_INT 2
17668: PPUSH
17669: LD_INT 5000
17671: PPUSH
17672: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
17676: LD_VAR 0 1
17680: PPUSH
17681: CALL_OW 274
17685: PPUSH
17686: LD_INT 3
17688: PPUSH
17689: LD_INT 5000
17691: PPUSH
17692: CALL_OW 277
// ruDepot = building ;
17696: LD_ADDR_EXP 29
17700: PUSH
17701: LD_VAR 0 1
17705: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17706: LD_VAR 0 1
17710: PPUSH
17711: CALL_OW 266
17715: PUSH
17716: LD_INT 0
17718: EQUAL
17719: PUSH
17720: LD_VAR 0 1
17724: PPUSH
17725: CALL_OW 266
17729: PUSH
17730: LD_INT 2
17732: EQUAL
17733: OR
17734: PUSH
17735: LD_VAR 0 1
17739: PPUSH
17740: CALL_OW 266
17744: PUSH
17745: LD_INT 4
17747: EQUAL
17748: OR
17749: IFFALSE 17760
// ComUpgrade ( building ) ;
17751: LD_VAR 0 1
17755: PPUSH
17756: CALL_OW 146
// if GetBType ( building ) = b_lab then
17760: LD_VAR 0 1
17764: PPUSH
17765: CALL_OW 266
17769: PUSH
17770: LD_INT 6
17772: EQUAL
17773: IFFALSE 17976
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
17775: LD_INT 22
17777: PUSH
17778: LD_INT 3
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: PUSH
17785: LD_INT 30
17787: PUSH
17788: LD_INT 8
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PPUSH
17799: CALL_OW 69
17803: PUSH
17804: LD_INT 0
17806: EQUAL
17807: IFFALSE 17845
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17809: LD_VAR 0 1
17813: PPUSH
17814: LD_INT 10
17816: PPUSH
17817: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
17821: LD_VAR 0 1
17825: PPUSH
17826: LD_INT 12
17828: PPUSH
17829: CALL_OW 207
// ruLab1 = building ;
17833: LD_ADDR_EXP 30
17837: PUSH
17838: LD_VAR 0 1
17842: ST_TO_ADDR
// end else
17843: GO 17879
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
17845: LD_VAR 0 1
17849: PPUSH
17850: LD_INT 11
17852: PPUSH
17853: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
17857: LD_VAR 0 1
17861: PPUSH
17862: LD_INT 14
17864: PPUSH
17865: CALL_OW 207
// ruLab2 = building ;
17869: LD_ADDR_EXP 31
17873: PUSH
17874: LD_VAR 0 1
17878: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
17879: LD_INT 3
17881: PPUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: LD_INT 3
17889: PPUSH
17890: CALL 11187 0 3
// if ruDestroyedBuildings > 0 then
17894: LD_EXP 41
17898: PUSH
17899: LD_INT 0
17901: GREATER
17902: IFFALSE 17976
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17904: LD_ADDR_EXP 41
17908: PUSH
17909: LD_EXP 41
17913: PPUSH
17914: LD_INT 1
17916: PPUSH
17917: CALL_OW 3
17921: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17922: LD_ADDR_EXP 41
17926: PUSH
17927: LD_EXP 41
17931: PPUSH
17932: LD_INT 1
17934: PPUSH
17935: CALL_OW 3
17939: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17940: LD_ADDR_EXP 41
17944: PUSH
17945: LD_EXP 41
17949: PPUSH
17950: LD_INT 1
17952: PPUSH
17953: CALL_OW 3
17957: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
17958: LD_ADDR_EXP 41
17962: PUSH
17963: LD_EXP 41
17967: PPUSH
17968: LD_INT 1
17970: PPUSH
17971: CALL_OW 3
17975: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
17976: LD_VAR 0 1
17980: PPUSH
17981: CALL_OW 266
17985: PUSH
17986: LD_INT 32
17988: EQUAL
17989: IFFALSE 18026
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
17991: LD_VAR 0 1
17995: PPUSH
17996: LD_INT 44
17998: PUSH
17999: LD_INT 45
18001: PUSH
18002: LD_INT 46
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: PUSH
18010: LD_INT 1
18012: PPUSH
18013: LD_INT 3
18015: PPUSH
18016: CALL_OW 12
18020: ARRAY
18021: PPUSH
18022: CALL_OW 208
// if GetBType ( building ) = b_turret then
18026: LD_VAR 0 1
18030: PPUSH
18031: CALL_OW 266
18035: PUSH
18036: LD_INT 33
18038: EQUAL
18039: IFFALSE 18076
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
18041: LD_VAR 0 1
18045: PPUSH
18046: LD_INT 44
18048: PUSH
18049: LD_INT 46
18051: PUSH
18052: LD_INT 46
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 1
18062: PPUSH
18063: LD_INT 3
18065: PPUSH
18066: CALL_OW 12
18070: ARRAY
18071: PPUSH
18072: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 266
18085: PUSH
18086: LD_INT 24
18088: EQUAL
18089: IFFALSE 18099
// russianAI = 1 ;
18091: LD_ADDR_EXP 38
18095: PUSH
18096: LD_INT 1
18098: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 255
18108: PUSH
18109: LD_INT 2
18111: EQUAL
18112: IFFALSE 18638
// begin if GetBType ( building ) = b_depot then
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 266
18123: PUSH
18124: LD_INT 0
18126: EQUAL
18127: IFFALSE 18213
// begin arDepot = building ;
18129: LD_ADDR_EXP 42
18133: PUSH
18134: LD_VAR 0 1
18138: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
18139: LD_INT 38
18141: PUSH
18142: LD_INT 47
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: LD_INT 71
18151: PPUSH
18152: LD_INT 19
18154: PPUSH
18155: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 274
18168: PPUSH
18169: LD_INT 1
18171: PPUSH
18172: LD_INT 500
18174: PPUSH
18175: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: CALL_OW 274
18188: PPUSH
18189: LD_INT 3
18191: PPUSH
18192: LD_INT 30
18194: PPUSH
18195: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
18199: LD_EXP 26
18203: PPUSH
18204: LD_EXP 42
18208: PPUSH
18209: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
18213: LD_VAR 0 1
18217: PPUSH
18218: CALL_OW 266
18222: PUSH
18223: LD_INT 6
18225: EQUAL
18226: PUSH
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL_OW 266
18236: PUSH
18237: LD_INT 9
18239: EQUAL
18240: OR
18241: IFFALSE 18292
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
18243: LD_VAR 0 1
18247: PPUSH
18248: LD_INT 10
18250: PPUSH
18251: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
18255: LD_VAR 0 1
18259: PPUSH
18260: LD_INT 11
18262: PPUSH
18263: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
18267: LD_INT 2
18269: PPUSH
18270: LD_VAR 0 1
18274: PPUSH
18275: LD_INT 2
18277: PPUSH
18278: CALL 11187 0 3
// arLab = building ;
18282: LD_ADDR_EXP 43
18286: PUSH
18287: LD_VAR 0 1
18291: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
18292: LD_VAR 0 1
18296: PPUSH
18297: CALL_OW 266
18301: PUSH
18302: LD_INT 2
18304: EQUAL
18305: PUSH
18306: LD_VAR 0 1
18310: PPUSH
18311: CALL_OW 266
18315: PUSH
18316: LD_INT 4
18318: EQUAL
18319: OR
18320: IFFALSE 18331
// ComUpgrade ( building ) ;
18322: LD_VAR 0 1
18326: PPUSH
18327: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
18331: LD_VAR 0 1
18335: PPUSH
18336: CALL_OW 266
18340: PUSH
18341: LD_INT 31
18343: EQUAL
18344: PUSH
18345: LD_INT 22
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 25
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 3
18367: PUSH
18368: LD_INT 54
18370: PUSH
18371: EMPTY
18372: LIST
18373: PUSH
18374: LD_INT 3
18376: PUSH
18377: LD_INT 60
18379: PUSH
18380: EMPTY
18381: LIST
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: PPUSH
18397: CALL_OW 69
18401: PUSH
18402: LD_INT 0
18404: GREATER
18405: AND
18406: IFFALSE 18478
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
18408: LD_INT 22
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 25
18420: PUSH
18421: LD_INT 1
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 3
18430: PUSH
18431: LD_INT 54
18433: PUSH
18434: EMPTY
18435: LIST
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: LD_INT 60
18442: PUSH
18443: EMPTY
18444: LIST
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: LIST
18459: PPUSH
18460: CALL_OW 69
18464: PUSH
18465: LD_INT 1
18467: ARRAY
18468: PPUSH
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
18478: LD_VAR 0 1
18482: PPUSH
18483: CALL_OW 266
18487: PUSH
18488: LD_INT 27
18490: EQUAL
18491: IFFALSE 18638
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
18493: LD_INT 22
18495: PUSH
18496: LD_INT 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 30
18505: PUSH
18506: LD_INT 27
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PPUSH
18517: CALL_OW 69
18521: PUSH
18522: LD_INT 2
18524: EQUAL
18525: IFFALSE 18638
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) do
18527: LD_ADDR_VAR 0 2
18531: PUSH
18532: LD_INT 22
18534: PUSH
18535: LD_INT 2
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 21
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 25
18554: PUSH
18555: LD_INT 2
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 69
18571: PUSH
18572: FOR_IN
18573: IFFALSE 18636
// begin AddComMoveXY ( i , 92 , 34 ) ;
18575: LD_VAR 0 2
18579: PPUSH
18580: LD_INT 92
18582: PPUSH
18583: LD_INT 34
18585: PPUSH
18586: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
18590: LD_VAR 0 2
18594: PPUSH
18595: LD_INT 82
18597: PPUSH
18598: LD_INT 57
18600: PPUSH
18601: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
18605: LD_VAR 0 2
18609: PPUSH
18610: LD_INT 36
18612: PPUSH
18613: LD_INT 28
18615: PPUSH
18616: CALL_OW 171
// AddComEnterUnit ( i , arDepot ) ;
18620: LD_VAR 0 2
18624: PPUSH
18625: LD_EXP 42
18629: PPUSH
18630: CALL_OW 180
// end ;
18634: GO 18572
18636: POP
18637: POP
// end ; end ; end ;
18638: PPOPN 2
18640: END
// on UpgradeComplete ( building ) do var i ;
18641: LD_INT 0
18643: PPUSH
// begin if GetSide ( building ) = 1 then
18644: LD_VAR 0 1
18648: PPUSH
18649: CALL_OW 255
18653: PUSH
18654: LD_INT 1
18656: EQUAL
18657: IFFALSE 18857
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
18659: LD_INT 22
18661: PUSH
18662: LD_INT 1
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 2
18671: PUSH
18672: LD_INT 30
18674: PUSH
18675: LD_INT 7
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 30
18684: PUSH
18685: LD_INT 8
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 1
18694: PUSH
18695: LD_INT 30
18697: PUSH
18698: LD_INT 11
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 1
18707: PUSH
18708: LD_INT 2
18710: PUSH
18711: LD_INT 30
18713: PUSH
18714: LD_INT 26
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PUSH
18721: LD_INT 30
18723: PUSH
18724: LD_INT 27
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PUSH
18731: LD_INT 30
18733: PUSH
18734: LD_INT 28
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: LIST
18745: LIST
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PPUSH
18766: CALL_OW 69
18770: PUSH
18771: LD_INT 0
18773: GREATER
18774: PUSH
18775: LD_INT 22
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 30
18790: PUSH
18791: LD_INT 26
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 30
18800: PUSH
18801: LD_INT 27
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: LD_INT 30
18810: PUSH
18811: LD_INT 28
18813: PUSH
18814: EMPTY
18815: LIST
18816: LIST
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PPUSH
18828: CALL_OW 69
18832: PUSH
18833: LD_INT 0
18835: GREATER
18836: AND
18837: PUSH
18838: LD_EXP 54
18842: PUSH
18843: LD_INT 0
18845: EQUAL
18846: AND
18847: IFFALSE 18857
// eventVar1 = 1 ;
18849: LD_ADDR_EXP 54
18853: PUSH
18854: LD_INT 1
18856: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
18857: LD_VAR 0 1
18861: PPUSH
18862: CALL_OW 255
18866: PUSH
18867: LD_INT 2
18869: EQUAL
18870: IFFALSE 18975
// begin if GetBType ( building ) = b_barracks then
18872: LD_VAR 0 1
18876: PPUSH
18877: CALL_OW 266
18881: PUSH
18882: LD_INT 5
18884: EQUAL
18885: IFFALSE 18975
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
18887: LD_ADDR_VAR 0 2
18891: PUSH
18892: LD_INT 22
18894: PUSH
18895: LD_INT 2
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: PUSH
18902: LD_INT 25
18904: PUSH
18905: LD_INT 1
18907: PUSH
18908: EMPTY
18909: LIST
18910: LIST
18911: PUSH
18912: LD_INT 3
18914: PUSH
18915: LD_INT 54
18917: PUSH
18918: EMPTY
18919: LIST
18920: PUSH
18921: EMPTY
18922: LIST
18923: LIST
18924: PUSH
18925: EMPTY
18926: LIST
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PUSH
18935: LD_EXP 26
18939: PUSH
18940: EMPTY
18941: LIST
18942: DIFF
18943: PUSH
18944: FOR_IN
18945: IFFALSE 18963
// ComEnterUnit ( i , building ) ;
18947: LD_VAR 0 2
18951: PPUSH
18952: LD_VAR 0 1
18956: PPUSH
18957: CALL_OW 120
18961: GO 18944
18963: POP
18964: POP
// arArm = building ;
18965: LD_ADDR_EXP 44
18969: PUSH
18970: LD_VAR 0 1
18974: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
18975: LD_VAR 0 1
18979: PPUSH
18980: CALL_OW 255
18984: PUSH
18985: LD_INT 3
18987: EQUAL
18988: IFFALSE 19461
// begin if GetBType ( building ) = b_factory then
18990: LD_VAR 0 1
18994: PPUSH
18995: CALL_OW 266
18999: PUSH
19000: LD_INT 3
19002: EQUAL
19003: IFFALSE 19070
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
19005: LD_ADDR_VAR 0 2
19009: PUSH
19010: LD_INT 22
19012: PUSH
19013: LD_INT 3
19015: PUSH
19016: EMPTY
19017: LIST
19018: LIST
19019: PUSH
19020: LD_INT 25
19022: PUSH
19023: LD_INT 3
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: PUSH
19030: EMPTY
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL_OW 69
19038: PUSH
19039: FOR_IN
19040: IFFALSE 19058
// ComEnterUnit ( i , building ) ;
19042: LD_VAR 0 2
19046: PPUSH
19047: LD_VAR 0 1
19051: PPUSH
19052: CALL_OW 120
19056: GO 19039
19058: POP
19059: POP
// ruFab = building ;
19060: LD_ADDR_EXP 34
19064: PUSH
19065: LD_VAR 0 1
19069: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
19070: LD_INT 22
19072: PUSH
19073: LD_INT 3
19075: PUSH
19076: EMPTY
19077: LIST
19078: LIST
19079: PUSH
19080: LD_INT 21
19082: PUSH
19083: LD_INT 3
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 30
19092: PUSH
19093: LD_INT 8
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: LIST
19104: PPUSH
19105: CALL_OW 69
19109: PUSH
19110: LD_INT 2
19112: EQUAL
19113: IFFALSE 19321
// begin for i = 1 to 2 do
19115: LD_ADDR_VAR 0 2
19119: PUSH
19120: DOUBLE
19121: LD_INT 1
19123: DEC
19124: ST_TO_ADDR
19125: LD_INT 2
19127: PUSH
19128: FOR_TO
19129: IFFALSE 19216
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19131: LD_INT 22
19133: PUSH
19134: LD_INT 3
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: LD_INT 25
19143: PUSH
19144: LD_INT 4
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: PUSH
19160: LD_VAR 0 2
19164: ARRAY
19165: PPUSH
19166: LD_INT 22
19168: PUSH
19169: LD_INT 3
19171: PUSH
19172: EMPTY
19173: LIST
19174: LIST
19175: PUSH
19176: LD_INT 21
19178: PUSH
19179: LD_INT 3
19181: PUSH
19182: EMPTY
19183: LIST
19184: LIST
19185: PUSH
19186: LD_INT 30
19188: PUSH
19189: LD_INT 8
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 69
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: PPUSH
19210: CALL_OW 120
19214: GO 19128
19216: POP
19217: POP
// for i = 3 to 4 do
19218: LD_ADDR_VAR 0 2
19222: PUSH
19223: DOUBLE
19224: LD_INT 3
19226: DEC
19227: ST_TO_ADDR
19228: LD_INT 4
19230: PUSH
19231: FOR_TO
19232: IFFALSE 19319
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
19234: LD_INT 22
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: LD_INT 25
19246: PUSH
19247: LD_INT 4
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PPUSH
19258: CALL_OW 69
19262: PUSH
19263: LD_VAR 0 2
19267: ARRAY
19268: PPUSH
19269: LD_INT 22
19271: PUSH
19272: LD_INT 3
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: PUSH
19279: LD_INT 21
19281: PUSH
19282: LD_INT 3
19284: PUSH
19285: EMPTY
19286: LIST
19287: LIST
19288: PUSH
19289: LD_INT 30
19291: PUSH
19292: LD_INT 8
19294: PUSH
19295: EMPTY
19296: LIST
19297: LIST
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: LIST
19303: PPUSH
19304: CALL_OW 69
19308: PUSH
19309: LD_INT 2
19311: ARRAY
19312: PPUSH
19313: CALL_OW 120
19317: GO 19231
19319: POP
19320: POP
// end ; if GetBType ( building ) = b_barracks then
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 266
19330: PUSH
19331: LD_INT 5
19333: EQUAL
19334: IFFALSE 19461
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
19336: LD_ADDR_VAR 0 2
19340: PUSH
19341: LD_INT 22
19343: PUSH
19344: LD_INT 3
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 25
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 3
19363: PUSH
19364: LD_INT 54
19366: PUSH
19367: EMPTY
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 69
19383: PUSH
19384: FOR_IN
19385: IFFALSE 19403
// ComEnterUnit ( i , building ) ;
19387: LD_VAR 0 2
19391: PPUSH
19392: LD_VAR 0 1
19396: PPUSH
19397: CALL_OW 120
19401: GO 19384
19403: POP
19404: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
19405: LD_INT 22
19407: PUSH
19408: LD_INT 3
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 30
19417: PUSH
19418: LD_INT 5
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PPUSH
19429: CALL_OW 69
19433: PUSH
19434: LD_INT 0
19436: EQUAL
19437: IFFALSE 19451
// ruArm1 = building else
19439: LD_ADDR_EXP 32
19443: PUSH
19444: LD_VAR 0 1
19448: ST_TO_ADDR
19449: GO 19461
// ruArm2 = building ;
19451: LD_ADDR_EXP 33
19455: PUSH
19456: LD_VAR 0 1
19460: ST_TO_ADDR
// end ; end ; end ;
19461: PPOPN 2
19463: END
// on EnterBuilding ( building , human ) do var rnd ;
19464: LD_INT 0
19466: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
19467: LD_VAR 0 2
19471: PPUSH
19472: CALL_OW 255
19476: PUSH
19477: LD_INT 2
19479: EQUAL
19480: PUSH
19481: LD_VAR 0 2
19485: PPUSH
19486: CALL_OW 257
19490: PUSH
19491: LD_INT 1
19493: EQUAL
19494: AND
19495: PUSH
19496: LD_VAR 0 1
19500: PUSH
19501: LD_EXP 44
19505: EQUAL
19506: AND
19507: IFFALSE 19554
// begin wait ( 0 0$1 ) ;
19509: LD_INT 35
19511: PPUSH
19512: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
19516: LD_ADDR_VAR 0 3
19520: PUSH
19521: LD_INT 1
19523: PPUSH
19524: LD_INT 100
19526: PPUSH
19527: CALL_OW 12
19531: ST_TO_ADDR
// if rnd > 50 then
19532: LD_VAR 0 3
19536: PUSH
19537: LD_INT 50
19539: GREATER
19540: IFFALSE 19554
// SetClass ( human , class_mortar ) ;
19542: LD_VAR 0 2
19546: PPUSH
19547: LD_INT 8
19549: PPUSH
19550: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
19554: LD_VAR 0 2
19558: PPUSH
19559: CALL_OW 255
19563: PUSH
19564: LD_INT 3
19566: EQUAL
19567: PUSH
19568: LD_VAR 0 2
19572: PPUSH
19573: CALL_OW 257
19577: PUSH
19578: LD_INT 1
19580: EQUAL
19581: AND
19582: PUSH
19583: LD_VAR 0 1
19587: PUSH
19588: LD_EXP 32
19592: EQUAL
19593: PUSH
19594: LD_VAR 0 1
19598: PUSH
19599: LD_EXP 33
19603: EQUAL
19604: OR
19605: PUSH
19606: EMPTY
19607: LIST
19608: AND
19609: IFFALSE 19630
// begin wait ( 0 0$1 ) ;
19611: LD_INT 35
19613: PPUSH
19614: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
19618: LD_VAR 0 2
19622: PPUSH
19623: LD_INT 9
19625: PPUSH
19626: CALL_OW 336
// end ; end ;
19630: PPOPN 3
19632: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
19633: LD_VAR 0 1
19637: PUSH
19638: LD_INT 1
19640: EQUAL
19641: PUSH
19642: LD_VAR 0 2
19646: PUSH
19647: LD_INT 2
19649: EQUAL
19650: AND
19651: PUSH
19652: LD_INT 1
19654: PPUSH
19655: LD_INT 2
19657: PPUSH
19658: CALL_OW 81
19662: PUSH
19663: LD_INT 1
19665: EQUAL
19666: AND
19667: IFFALSE 19688
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
19669: LD_EXP 24
19673: PPUSH
19674: LD_STRING D6b-Pow-1
19676: PPUSH
19677: CALL_OW 94
// YouLost ( Powell ) ;
19681: LD_STRING Powell
19683: PPUSH
19684: CALL_OW 104
// end ; end ;
19688: PPOPN 2
19690: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
19691: LD_VAR 0 1
19695: PPUSH
19696: CALL_OW 255
19700: PUSH
19701: LD_INT 3
19703: EQUAL
19704: PUSH
19705: LD_VAR 0 1
19709: PPUSH
19710: CALL_OW 247
19714: PUSH
19715: LD_INT 3
19717: EQUAL
19718: AND
19719: IFFALSE 20411
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
19721: LD_VAR 0 1
19725: PPUSH
19726: CALL_OW 266
19730: PUSH
19731: LD_INT 31
19733: EQUAL
19734: PUSH
19735: LD_VAR 0 1
19739: PPUSH
19740: CALL_OW 266
19744: PUSH
19745: LD_INT 32
19747: EQUAL
19748: OR
19749: PUSH
19750: LD_VAR 0 1
19754: PPUSH
19755: CALL_OW 266
19759: PUSH
19760: LD_INT 36
19762: EQUAL
19763: OR
19764: PUSH
19765: LD_VAR 0 1
19769: PPUSH
19770: CALL_OW 266
19774: PUSH
19775: LD_INT 0
19777: EQUAL
19778: OR
19779: PUSH
19780: LD_VAR 0 1
19784: PPUSH
19785: CALL_OW 266
19789: PUSH
19790: LD_INT 24
19792: EQUAL
19793: OR
19794: PUSH
19795: LD_VAR 0 1
19799: PPUSH
19800: CALL_OW 266
19804: PUSH
19805: LD_INT 17
19807: EQUAL
19808: OR
19809: PUSH
19810: LD_VAR 0 1
19814: PPUSH
19815: CALL_OW 266
19819: PUSH
19820: LD_INT 25
19822: EQUAL
19823: OR
19824: PUSH
19825: LD_VAR 0 1
19829: PPUSH
19830: CALL_OW 266
19834: PUSH
19835: LD_INT 19
19837: EQUAL
19838: OR
19839: PUSH
19840: LD_VAR 0 1
19844: PPUSH
19845: CALL_OW 266
19849: PUSH
19850: LD_INT 20
19852: EQUAL
19853: OR
19854: PUSH
19855: LD_VAR 0 1
19859: PPUSH
19860: CALL_OW 266
19864: PUSH
19865: LD_INT 18
19867: EQUAL
19868: OR
19869: PUSH
19870: LD_VAR 0 1
19874: PPUSH
19875: CALL_OW 266
19879: PUSH
19880: LD_INT 21
19882: EQUAL
19883: OR
19884: PUSH
19885: LD_VAR 0 1
19889: PPUSH
19890: CALL_OW 266
19894: PUSH
19895: LD_INT 23
19897: EQUAL
19898: OR
19899: PUSH
19900: LD_VAR 0 1
19904: PPUSH
19905: CALL_OW 266
19909: PUSH
19910: LD_INT 16
19912: EQUAL
19913: OR
19914: PUSH
19915: LD_VAR 0 1
19919: PPUSH
19920: CALL_OW 266
19924: PUSH
19925: LD_INT 6
19927: EQUAL
19928: OR
19929: PUSH
19930: LD_VAR 0 1
19934: PPUSH
19935: CALL_OW 266
19939: PUSH
19940: LD_INT 29
19942: EQUAL
19943: OR
19944: PUSH
19945: LD_VAR 0 1
19949: PPUSH
19950: CALL_OW 266
19954: PUSH
19955: LD_INT 26
19957: EQUAL
19958: OR
19959: PUSH
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL_OW 266
19969: PUSH
19970: LD_INT 30
19972: EQUAL
19973: OR
19974: PUSH
19975: LD_VAR 0 1
19979: PPUSH
19980: CALL_OW 266
19984: PUSH
19985: LD_INT 28
19987: EQUAL
19988: OR
19989: PUSH
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 266
19999: PUSH
20000: LD_INT 27
20002: EQUAL
20003: OR
20004: PUSH
20005: LD_VAR 0 1
20009: PPUSH
20010: CALL_OW 266
20014: PUSH
20015: LD_INT 33
20017: EQUAL
20018: OR
20019: PUSH
20020: LD_VAR 0 1
20024: PPUSH
20025: CALL_OW 266
20029: PUSH
20030: LD_INT 2
20032: EQUAL
20033: OR
20034: PUSH
20035: LD_VAR 0 1
20039: PPUSH
20040: CALL_OW 266
20044: PUSH
20045: LD_INT 4
20047: EQUAL
20048: OR
20049: IFFALSE 20135
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
20051: LD_ADDR_EXP 41
20055: PUSH
20056: LD_EXP 41
20060: PUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 266
20070: ADD
20071: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20072: LD_ADDR_EXP 41
20076: PUSH
20077: LD_EXP 41
20081: PUSH
20082: LD_VAR 0 1
20086: PPUSH
20087: CALL_OW 250
20091: ADD
20092: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20093: LD_ADDR_EXP 41
20097: PUSH
20098: LD_EXP 41
20102: PUSH
20103: LD_VAR 0 1
20107: PPUSH
20108: CALL_OW 251
20112: ADD
20113: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20114: LD_ADDR_EXP 41
20118: PUSH
20119: LD_EXP 41
20123: PUSH
20124: LD_VAR 0 1
20128: PPUSH
20129: CALL_OW 254
20133: ADD
20134: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
20135: LD_VAR 0 1
20139: PPUSH
20140: CALL_OW 266
20144: PUSH
20145: LD_INT 1
20147: EQUAL
20148: IFFALSE 20227
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
20150: LD_ADDR_EXP 41
20154: PUSH
20155: LD_EXP 41
20159: PUSH
20160: LD_INT 0
20162: ADD
20163: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20164: LD_ADDR_EXP 41
20168: PUSH
20169: LD_EXP 41
20173: PUSH
20174: LD_VAR 0 1
20178: PPUSH
20179: CALL_OW 250
20183: ADD
20184: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20185: LD_ADDR_EXP 41
20189: PUSH
20190: LD_EXP 41
20194: PUSH
20195: LD_VAR 0 1
20199: PPUSH
20200: CALL_OW 251
20204: ADD
20205: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20206: LD_ADDR_EXP 41
20210: PUSH
20211: LD_EXP 41
20215: PUSH
20216: LD_VAR 0 1
20220: PPUSH
20221: CALL_OW 254
20225: ADD
20226: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
20227: LD_VAR 0 1
20231: PPUSH
20232: CALL_OW 266
20236: PUSH
20237: LD_INT 3
20239: EQUAL
20240: IFFALSE 20319
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
20242: LD_ADDR_EXP 41
20246: PUSH
20247: LD_EXP 41
20251: PUSH
20252: LD_INT 2
20254: ADD
20255: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20256: LD_ADDR_EXP 41
20260: PUSH
20261: LD_EXP 41
20265: PUSH
20266: LD_VAR 0 1
20270: PPUSH
20271: CALL_OW 250
20275: ADD
20276: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20277: LD_ADDR_EXP 41
20281: PUSH
20282: LD_EXP 41
20286: PUSH
20287: LD_VAR 0 1
20291: PPUSH
20292: CALL_OW 251
20296: ADD
20297: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20298: LD_ADDR_EXP 41
20302: PUSH
20303: LD_EXP 41
20307: PUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: CALL_OW 254
20317: ADD
20318: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
20319: LD_VAR 0 1
20323: PPUSH
20324: CALL_OW 266
20328: PUSH
20329: LD_INT 5
20331: EQUAL
20332: IFFALSE 20411
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
20334: LD_ADDR_EXP 41
20338: PUSH
20339: LD_EXP 41
20343: PUSH
20344: LD_INT 4
20346: ADD
20347: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
20348: LD_ADDR_EXP 41
20352: PUSH
20353: LD_EXP 41
20357: PUSH
20358: LD_VAR 0 1
20362: PPUSH
20363: CALL_OW 250
20367: ADD
20368: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
20369: LD_ADDR_EXP 41
20373: PUSH
20374: LD_EXP 41
20378: PUSH
20379: LD_VAR 0 1
20383: PPUSH
20384: CALL_OW 251
20388: ADD
20389: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
20390: LD_ADDR_EXP 41
20394: PUSH
20395: LD_EXP 41
20399: PUSH
20400: LD_VAR 0 1
20404: PPUSH
20405: CALL_OW 254
20409: ADD
20410: ST_TO_ADDR
// end ; end ; end ;
20411: PPOPN 1
20413: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
20414: LD_ADDR_OWVAR 57
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// fastEnd = 1 ;
20422: LD_ADDR_EXP 53
20426: PUSH
20427: LD_INT 1
20429: ST_TO_ADDR
// FinishMission ;
20430: CALL 22093 0 0
// end ; end_of_file
20434: PPOPN 1
20436: END
// export function PrepareNature ; var i , un ; begin
20437: LD_INT 0
20439: PPUSH
20440: PPUSH
20441: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
20442: LD_ADDR_VAR 0 2
20446: PUSH
20447: DOUBLE
20448: LD_INT 1
20450: DEC
20451: ST_TO_ADDR
20452: LD_OWVAR 67
20456: PUSH
20457: LD_INT 1
20459: PPUSH
20460: LD_INT 5
20462: PPUSH
20463: CALL_OW 12
20467: PLUS
20468: PUSH
20469: FOR_TO
20470: IFFALSE 20615
// begin hc_sex = sex_male ;
20472: LD_ADDR_OWVAR 27
20476: PUSH
20477: LD_INT 1
20479: ST_TO_ADDR
// uc_side = 0 ;
20480: LD_ADDR_OWVAR 20
20484: PUSH
20485: LD_INT 0
20487: ST_TO_ADDR
// uc_nation = nation_nature ;
20488: LD_ADDR_OWVAR 21
20492: PUSH
20493: LD_INT 0
20495: ST_TO_ADDR
// hc_class = class_apeman ;
20496: LD_ADDR_OWVAR 28
20500: PUSH
20501: LD_INT 12
20503: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
20504: LD_ADDR_OWVAR 31
20508: PUSH
20509: LD_INT 2
20511: PPUSH
20512: LD_INT 7
20514: PPUSH
20515: CALL_OW 12
20519: PUSH
20520: LD_OWVAR 67
20524: PLUS
20525: PUSH
20526: LD_INT 2
20528: PPUSH
20529: LD_INT 10
20531: PPUSH
20532: CALL_OW 12
20536: PUSH
20537: LD_INT 2
20539: PPUSH
20540: LD_INT 10
20542: PPUSH
20543: CALL_OW 12
20547: PUSH
20548: LD_INT 2
20550: PPUSH
20551: LD_INT 10
20553: PPUSH
20554: CALL_OW 12
20558: PUSH
20559: EMPTY
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20565: LD_ADDR_OWVAR 35
20569: PUSH
20570: LD_INT 5
20572: NEG
20573: PPUSH
20574: LD_INT 5
20576: PPUSH
20577: CALL_OW 12
20581: PUSH
20582: LD_OWVAR 67
20586: MUL
20587: ST_TO_ADDR
// un = CreateHuman ;
20588: LD_ADDR_VAR 0 3
20592: PUSH
20593: CALL_OW 44
20597: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
20598: LD_VAR 0 3
20602: PPUSH
20603: LD_INT 5
20605: PPUSH
20606: LD_INT 0
20608: PPUSH
20609: CALL_OW 49
// end ;
20613: GO 20469
20615: POP
20616: POP
// for i = 1 to Difficulty + 2 do
20617: LD_ADDR_VAR 0 2
20621: PUSH
20622: DOUBLE
20623: LD_INT 1
20625: DEC
20626: ST_TO_ADDR
20627: LD_OWVAR 67
20631: PUSH
20632: LD_INT 2
20634: PLUS
20635: PUSH
20636: FOR_TO
20637: IFFALSE 20746
// begin hc_sex = sex_male ;
20639: LD_ADDR_OWVAR 27
20643: PUSH
20644: LD_INT 1
20646: ST_TO_ADDR
// uc_side = 0 ;
20647: LD_ADDR_OWVAR 20
20651: PUSH
20652: LD_INT 0
20654: ST_TO_ADDR
// uc_nation = nation_nature ;
20655: LD_ADDR_OWVAR 21
20659: PUSH
20660: LD_INT 0
20662: ST_TO_ADDR
// hc_class = class_tiger ;
20663: LD_ADDR_OWVAR 28
20667: PUSH
20668: LD_INT 14
20670: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20671: LD_ADDR_OWVAR 31
20675: PUSH
20676: LD_EXP 36
20680: PUSH
20681: LD_INT 0
20683: PUSH
20684: LD_INT 0
20686: PUSH
20687: LD_INT 0
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
20696: LD_ADDR_OWVAR 35
20700: PUSH
20701: LD_INT 5
20703: NEG
20704: PPUSH
20705: LD_INT 5
20707: PPUSH
20708: CALL_OW 12
20712: PUSH
20713: LD_OWVAR 67
20717: MUL
20718: ST_TO_ADDR
// un = CreateHuman ;
20719: LD_ADDR_VAR 0 3
20723: PUSH
20724: CALL_OW 44
20728: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
20729: LD_VAR 0 3
20733: PPUSH
20734: LD_INT 6
20736: PPUSH
20737: LD_INT 0
20739: PPUSH
20740: CALL_OW 49
// end ;
20744: GO 20636
20746: POP
20747: POP
// for i = 1 to rand ( 3 , 4 ) do
20748: LD_ADDR_VAR 0 2
20752: PUSH
20753: DOUBLE
20754: LD_INT 1
20756: DEC
20757: ST_TO_ADDR
20758: LD_INT 3
20760: PPUSH
20761: LD_INT 4
20763: PPUSH
20764: CALL_OW 12
20768: PUSH
20769: FOR_TO
20770: IFFALSE 20864
// begin hc_sex = sex_male ;
20772: LD_ADDR_OWVAR 27
20776: PUSH
20777: LD_INT 1
20779: ST_TO_ADDR
// uc_side = 0 ;
20780: LD_ADDR_OWVAR 20
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// uc_nation = nation_nature ;
20788: LD_ADDR_OWVAR 21
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// hc_class = 18 ;
20796: LD_ADDR_OWVAR 28
20800: PUSH
20801: LD_INT 18
20803: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
20804: LD_ADDR_OWVAR 31
20808: PUSH
20809: LD_EXP 36
20813: PUSH
20814: LD_INT 0
20816: PUSH
20817: LD_INT 0
20819: PUSH
20820: LD_INT 0
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: ST_TO_ADDR
// hc_agressivity = 0 ;
20829: LD_ADDR_OWVAR 35
20833: PUSH
20834: LD_INT 0
20836: ST_TO_ADDR
// un = CreateHuman ;
20837: LD_ADDR_VAR 0 3
20841: PUSH
20842: CALL_OW 44
20846: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
20847: LD_VAR 0 3
20851: PPUSH
20852: LD_INT 6
20854: PPUSH
20855: LD_INT 0
20857: PPUSH
20858: CALL_OW 49
// end ;
20862: GO 20769
20864: POP
20865: POP
// end ; end_of_file
20866: LD_VAR 0 1
20870: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
20871: LD_EXP 45
20875: PUSH
20876: LD_INT 1
20878: EQUAL
20879: IFFALSE 20987
20881: GO 20883
20883: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
20884: LD_INT 7
20886: PPUSH
20887: LD_INT 5
20889: PPUSH
20890: LD_INT 4
20892: PPUSH
20893: LD_INT 6
20895: PPUSH
20896: CALL_OW 12
20900: PUSH
20901: LD_INT 6
20903: PPUSH
20904: LD_INT 8
20906: PPUSH
20907: CALL_OW 12
20911: PUSH
20912: LD_INT 7
20914: PPUSH
20915: LD_INT 9
20917: PPUSH
20918: CALL_OW 12
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: LIST
20927: PUSH
20928: LD_OWVAR 67
20932: ARRAY
20933: PPUSH
20934: LD_EXP 35
20938: PPUSH
20939: LD_EXP 36
20943: PPUSH
20944: CALL_OW 12
20948: PPUSH
20949: LD_INT 2
20951: PPUSH
20952: LD_INT 1
20954: PPUSH
20955: LD_INT 1
20957: PPUSH
20958: EMPTY
20959: PPUSH
20960: LD_INT 25
20962: PUSH
20963: LD_INT 26
20965: PUSH
20966: LD_INT 27
20968: PUSH
20969: LD_INT 28
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: PPUSH
20978: EMPTY
20979: PPUSH
20980: LD_INT 1
20982: PPUSH
20983: CALL 12635 0 11
20987: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
20988: LD_EXP 45
20992: PUSH
20993: LD_INT 1
20995: EQUAL
20996: IFFALSE 21132
20998: GO 21000
21000: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
21001: LD_INT 5
21003: PPUSH
21004: LD_INT 2
21006: PPUSH
21007: LD_INT 7
21009: PPUSH
21010: LD_INT 9
21012: PPUSH
21013: CALL_OW 12
21017: PUSH
21018: LD_INT 8
21020: PPUSH
21021: LD_INT 10
21023: PPUSH
21024: CALL_OW 12
21028: PUSH
21029: LD_INT 9
21031: PPUSH
21032: LD_INT 12
21034: PPUSH
21035: CALL_OW 12
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: LIST
21044: PUSH
21045: LD_OWVAR 67
21049: ARRAY
21050: PPUSH
21051: LD_INT 0
21053: PPUSH
21054: LD_INT 0
21056: PPUSH
21057: LD_INT 3
21059: PPUSH
21060: LD_INT 4
21062: PPUSH
21063: CALL_OW 12
21067: PUSH
21068: LD_INT 4
21070: PPUSH
21071: LD_INT 5
21073: PPUSH
21074: CALL_OW 12
21078: PUSH
21079: LD_INT 5
21081: PPUSH
21082: LD_INT 6
21084: PPUSH
21085: CALL_OW 12
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: LIST
21094: PUSH
21095: LD_OWVAR 67
21099: ARRAY
21100: PPUSH
21101: LD_INT 5
21103: PPUSH
21104: LD_EXP 35
21108: PPUSH
21109: LD_EXP 36
21113: PPUSH
21114: CALL_OW 12
21118: PPUSH
21119: LD_INT 7
21121: PPUSH
21122: LD_INT 9
21124: PPUSH
21125: LD_INT 1
21127: PPUSH
21128: CALL 14355 0 11
21132: END
// every 4 4$30 trigger joinEpsilon = 1 do
21133: LD_EXP 28
21137: PUSH
21138: LD_INT 1
21140: EQUAL
21141: IFFALSE 21203
21143: GO 21145
21145: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 2 , 4 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21146: LD_INT 6
21148: PPUSH
21149: LD_INT 3
21151: PPUSH
21152: LD_INT 2
21154: PPUSH
21155: LD_INT 4
21157: PPUSH
21158: CALL_OW 12
21162: PPUSH
21163: LD_INT 0
21165: PPUSH
21166: LD_INT 0
21168: PPUSH
21169: LD_INT 0
21171: PPUSH
21172: LD_INT 0
21174: PPUSH
21175: LD_EXP 35
21179: PPUSH
21180: LD_EXP 36
21184: PPUSH
21185: CALL_OW 12
21189: PPUSH
21190: LD_INT 17
21192: PPUSH
21193: LD_INT 18
21195: PPUSH
21196: LD_INT 1
21198: PPUSH
21199: CALL 14355 0 11
21203: END
// every 4 4$30 trigger joinEpsilon = 1 do
21204: LD_EXP 28
21208: PUSH
21209: LD_INT 1
21211: EQUAL
21212: IFFALSE 21294
21214: GO 21216
21216: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21217: LD_INT 17
21219: PPUSH
21220: LD_INT 6
21222: PPUSH
21223: LD_INT 1
21225: PPUSH
21226: LD_INT 3
21228: PPUSH
21229: CALL_OW 12
21233: PPUSH
21234: LD_EXP 35
21238: PPUSH
21239: LD_EXP 36
21243: PPUSH
21244: CALL_OW 12
21248: PPUSH
21249: LD_INT 3
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_INT 1
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PPUSH
21265: LD_INT 43
21267: PUSH
21268: LD_INT 44
21270: PUSH
21271: LD_INT 45
21273: PUSH
21274: LD_INT 46
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: LIST
21282: PPUSH
21283: EMPTY
21284: PPUSH
21285: EMPTY
21286: PPUSH
21287: LD_INT 1
21289: PPUSH
21290: CALL 12635 0 11
21294: END
// every 8 8$30 trigger joinEpsilon = 1 do
21295: LD_EXP 28
21299: PUSH
21300: LD_INT 1
21302: EQUAL
21303: IFFALSE 21373
21305: GO 21307
21307: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 3 , 6 ) , 0 , rand ( 3 , 5 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21308: LD_INT 6
21310: PPUSH
21311: LD_INT 3
21313: PPUSH
21314: LD_INT 3
21316: PPUSH
21317: LD_INT 6
21319: PPUSH
21320: CALL_OW 12
21324: PPUSH
21325: LD_INT 0
21327: PPUSH
21328: LD_INT 3
21330: PPUSH
21331: LD_INT 5
21333: PPUSH
21334: CALL_OW 12
21338: PPUSH
21339: LD_INT 0
21341: PPUSH
21342: LD_INT 0
21344: PPUSH
21345: LD_EXP 35
21349: PPUSH
21350: LD_EXP 36
21354: PPUSH
21355: CALL_OW 12
21359: PPUSH
21360: LD_INT 17
21362: PPUSH
21363: LD_INT 18
21365: PPUSH
21366: LD_INT 1
21368: PPUSH
21369: CALL 14355 0 11
21373: END
// every 8 8$30 trigger joinEpsilon = 1 do
21374: LD_EXP 28
21378: PUSH
21379: LD_INT 1
21381: EQUAL
21382: IFFALSE 21464
21384: GO 21386
21386: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21387: LD_INT 17
21389: PPUSH
21390: LD_INT 6
21392: PPUSH
21393: LD_INT 1
21395: PPUSH
21396: LD_INT 5
21398: PPUSH
21399: CALL_OW 12
21403: PPUSH
21404: LD_EXP 35
21408: PPUSH
21409: LD_EXP 36
21413: PPUSH
21414: CALL_OW 12
21418: PPUSH
21419: LD_INT 3
21421: PPUSH
21422: LD_INT 1
21424: PPUSH
21425: LD_INT 1
21427: PUSH
21428: LD_INT 3
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: PPUSH
21435: LD_INT 43
21437: PUSH
21438: LD_INT 44
21440: PUSH
21441: LD_INT 45
21443: PUSH
21444: LD_INT 46
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: PPUSH
21453: EMPTY
21454: PPUSH
21455: EMPTY
21456: PPUSH
21457: LD_INT 1
21459: PPUSH
21460: CALL 12635 0 11
21464: END
// every 15 15$30 trigger joinEpsilon = 1 do
21465: LD_EXP 28
21469: PUSH
21470: LD_INT 1
21472: EQUAL
21473: IFFALSE 21543
21475: GO 21477
21477: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21478: LD_INT 6
21480: PPUSH
21481: LD_INT 3
21483: PPUSH
21484: LD_INT 5
21486: PPUSH
21487: LD_INT 8
21489: PPUSH
21490: CALL_OW 12
21494: PPUSH
21495: LD_INT 0
21497: PPUSH
21498: LD_INT 3
21500: PPUSH
21501: LD_INT 8
21503: PPUSH
21504: CALL_OW 12
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: LD_INT 0
21514: PPUSH
21515: LD_EXP 35
21519: PPUSH
21520: LD_EXP 36
21524: PPUSH
21525: CALL_OW 12
21529: PPUSH
21530: LD_INT 17
21532: PPUSH
21533: LD_INT 18
21535: PPUSH
21536: LD_INT 1
21538: PPUSH
21539: CALL 14355 0 11
21543: END
// every 15 15$30 trigger joinEpsilon = 1 do
21544: LD_EXP 28
21548: PUSH
21549: LD_INT 1
21551: EQUAL
21552: IFFALSE 21634
21554: GO 21556
21556: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
21557: LD_INT 17
21559: PPUSH
21560: LD_INT 6
21562: PPUSH
21563: LD_INT 5
21565: PPUSH
21566: LD_INT 8
21568: PPUSH
21569: CALL_OW 12
21573: PPUSH
21574: LD_EXP 35
21578: PPUSH
21579: LD_EXP 36
21583: PPUSH
21584: CALL_OW 12
21588: PPUSH
21589: LD_INT 3
21591: PPUSH
21592: LD_INT 1
21594: PPUSH
21595: LD_INT 1
21597: PUSH
21598: LD_INT 3
21600: PUSH
21601: EMPTY
21602: LIST
21603: LIST
21604: PPUSH
21605: LD_INT 43
21607: PUSH
21608: LD_INT 44
21610: PUSH
21611: LD_INT 45
21613: PUSH
21614: LD_INT 46
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: PPUSH
21623: EMPTY
21624: PPUSH
21625: EMPTY
21626: PPUSH
21627: LD_INT 1
21629: PPUSH
21630: CALL 12635 0 11
21634: END
// every 27 27$30 trigger joinEpsilon = 1 do
21635: LD_EXP 28
21639: PUSH
21640: LD_INT 1
21642: EQUAL
21643: IFFALSE 21713
21645: GO 21647
21647: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
21648: LD_INT 6
21650: PPUSH
21651: LD_INT 3
21653: PPUSH
21654: LD_INT 7
21656: PPUSH
21657: LD_INT 10
21659: PPUSH
21660: CALL_OW 12
21664: PPUSH
21665: LD_INT 0
21667: PPUSH
21668: LD_INT 3
21670: PPUSH
21671: LD_INT 8
21673: PPUSH
21674: CALL_OW 12
21678: PPUSH
21679: LD_INT 0
21681: PPUSH
21682: LD_INT 0
21684: PPUSH
21685: LD_EXP 35
21689: PPUSH
21690: LD_EXP 36
21694: PPUSH
21695: CALL_OW 12
21699: PPUSH
21700: LD_INT 17
21702: PPUSH
21703: LD_INT 18
21705: PPUSH
21706: LD_INT 1
21708: PPUSH
21709: CALL 14355 0 11
21713: END
// every 27 27$30 trigger joinEpsilon = 1 do
21714: LD_EXP 28
21718: PUSH
21719: LD_INT 1
21721: EQUAL
21722: IFFALSE 21804
21724: GO 21726
21726: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
21727: LD_INT 17
21729: PPUSH
21730: LD_INT 6
21732: PPUSH
21733: LD_INT 5
21735: PPUSH
21736: LD_INT 8
21738: PPUSH
21739: CALL_OW 12
21743: PPUSH
21744: LD_EXP 35
21748: PPUSH
21749: LD_EXP 36
21753: PPUSH
21754: CALL_OW 12
21758: PPUSH
21759: LD_INT 3
21761: PPUSH
21762: LD_INT 1
21764: PPUSH
21765: LD_INT 1
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: LD_INT 43
21777: PUSH
21778: LD_INT 44
21780: PUSH
21781: LD_INT 45
21783: PUSH
21784: LD_INT 46
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: PPUSH
21793: EMPTY
21794: PPUSH
21795: EMPTY
21796: PPUSH
21797: LD_INT 1
21799: PPUSH
21800: CALL 12635 0 11
21804: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 do
21805: LD_INT 54
21807: PPUSH
21808: LD_INT 1
21810: PPUSH
21811: CALL_OW 321
21815: PUSH
21816: LD_INT 2
21818: EQUAL
21819: PUSH
21820: LD_INT 55
21822: PPUSH
21823: LD_INT 1
21825: PPUSH
21826: CALL_OW 321
21830: PUSH
21831: LD_INT 2
21833: EQUAL
21834: AND
21835: PUSH
21836: LD_INT 21
21838: PPUSH
21839: LD_INT 1
21841: PPUSH
21842: CALL_OW 321
21846: PUSH
21847: LD_INT 2
21849: EQUAL
21850: AND
21851: PUSH
21852: LD_INT 22
21854: PPUSH
21855: LD_INT 1
21857: PPUSH
21858: CALL_OW 321
21862: PUSH
21863: LD_INT 2
21865: EQUAL
21866: AND
21867: PUSH
21868: LD_INT 12
21870: PPUSH
21871: LD_INT 1
21873: PPUSH
21874: CALL_OW 321
21878: PUSH
21879: LD_INT 1
21881: EQUAL
21882: PUSH
21883: LD_INT 32
21885: PPUSH
21886: LD_INT 1
21888: PPUSH
21889: CALL_OW 321
21893: PUSH
21894: LD_INT 1
21896: EQUAL
21897: OR
21898: PUSH
21899: EMPTY
21900: LIST
21901: AND
21902: PUSH
21903: LD_EXP 47
21907: PUSH
21908: LD_INT 1
21910: EQUAL
21911: AND
21912: IFFALSE 21968
21914: GO 21916
21916: DISABLE
// begin case query ( QEndMission ) of 1 :
21917: LD_STRING QEndMission
21919: PPUSH
21920: CALL_OW 97
21924: PUSH
21925: LD_INT 1
21927: DOUBLE
21928: EQUAL
21929: IFTRUE 21933
21931: GO 21944
21933: POP
// begin end_the_mission_allowed = true ;
21934: LD_ADDR_OWVAR 57
21938: PUSH
21939: LD_INT 1
21941: ST_TO_ADDR
// end ; 2 :
21942: GO 21968
21944: LD_INT 2
21946: DOUBLE
21947: EQUAL
21948: IFTRUE 21952
21950: GO 21967
21952: POP
// begin fastEnd = 1 ;
21953: LD_ADDR_EXP 53
21957: PUSH
21958: LD_INT 1
21960: ST_TO_ADDR
// FinishMission ;
21961: CALL 22093 0 0
// end ; end ;
21965: GO 21968
21967: POP
// end ;
21968: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 do
21969: LD_INT 54
21971: PPUSH
21972: LD_INT 1
21974: PPUSH
21975: CALL_OW 321
21979: PUSH
21980: LD_INT 2
21982: EQUAL
21983: PUSH
21984: LD_INT 55
21986: PPUSH
21987: LD_INT 1
21989: PPUSH
21990: CALL_OW 321
21994: PUSH
21995: LD_INT 2
21997: EQUAL
21998: AND
21999: PUSH
22000: LD_INT 21
22002: PPUSH
22003: LD_INT 1
22005: PPUSH
22006: CALL_OW 321
22010: PUSH
22011: LD_INT 2
22013: EQUAL
22014: AND
22015: PUSH
22016: LD_INT 22
22018: PPUSH
22019: LD_INT 1
22021: PPUSH
22022: CALL_OW 321
22026: PUSH
22027: LD_INT 2
22029: EQUAL
22030: AND
22031: PUSH
22032: LD_INT 12
22034: PPUSH
22035: LD_INT 1
22037: PPUSH
22038: CALL_OW 321
22042: PUSH
22043: LD_INT 2
22045: EQUAL
22046: AND
22047: PUSH
22048: LD_INT 32
22050: PPUSH
22051: LD_INT 1
22053: PPUSH
22054: CALL_OW 321
22058: PUSH
22059: LD_INT 2
22061: EQUAL
22062: AND
22063: PUSH
22064: LD_EXP 53
22068: PUSH
22069: LD_INT 0
22071: EQUAL
22072: AND
22073: PUSH
22074: LD_EXP 47
22078: PUSH
22079: LD_INT 1
22081: EQUAL
22082: AND
22083: IFFALSE 22092
22085: GO 22087
22087: DISABLE
// FinishMission ;
22088: CALL 22093 0 0
22092: END
// export function FinishMission ; begin
22093: LD_INT 0
22095: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
22096: LD_EXP 49
22100: PPUSH
22101: LD_STRING 10_KhatamStatus_1
22103: PPUSH
22104: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
22108: LD_INT 12
22110: PPUSH
22111: LD_INT 1
22113: PPUSH
22114: CALL_OW 321
22118: PUSH
22119: LD_INT 2
22121: EQUAL
22122: IFFALSE 22136
// begin AddMedal ( sights , 1 ) ;
22124: LD_STRING sights
22126: PPUSH
22127: LD_INT 1
22129: PPUSH
22130: CALL_OW 101
// end else
22134: GO 22147
// begin AddMedal ( sights , - 1 ) ;
22136: LD_STRING sights
22138: PPUSH
22139: LD_INT 1
22141: NEG
22142: PPUSH
22143: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
22147: LD_INT 32
22149: PPUSH
22150: LD_INT 1
22152: PPUSH
22153: CALL_OW 321
22157: PUSH
22158: LD_INT 2
22160: EQUAL
22161: IFFALSE 22175
// begin AddMedal ( computers , 1 ) ;
22163: LD_STRING computers
22165: PPUSH
22166: LD_INT 1
22168: PPUSH
22169: CALL_OW 101
// end else
22173: GO 22186
// begin AddMedal ( computers , - 1 ) ;
22175: LD_STRING computers
22177: PPUSH
22178: LD_INT 1
22180: NEG
22181: PPUSH
22182: CALL_OW 101
// end ; if arabianEscape = 0 then
22186: LD_EXP 46
22190: PUSH
22191: LD_INT 0
22193: EQUAL
22194: IFFALSE 22218
// begin AddMedal ( renegades , 2 ) ;
22196: LD_STRING renegades
22198: PPUSH
22199: LD_INT 2
22201: PPUSH
22202: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
22206: LD_INT 0
22208: PPUSH
22209: LD_STRING 10_ScientistsEscape_1
22211: PPUSH
22212: CALL_OW 39
// end else
22216: GO 22229
// begin AddMedal ( renegades , - 1 ) ;
22218: LD_STRING renegades
22220: PPUSH
22221: LD_INT 1
22223: NEG
22224: PPUSH
22225: CALL_OW 101
// end ; SaveEpsilonBase ;
22229: CALL 22819 0 0
// Query ( kaj ) ;
22233: LD_STRING kaj
22235: PPUSH
22236: CALL_OW 97
// GiveMedals ( Main ) ;
22240: LD_STRING Main
22242: PPUSH
22243: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
22247: LD_INT 22
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 23
22259: PUSH
22260: LD_INT 1
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: LD_INT 21
22269: PUSH
22270: LD_INT 1
22272: PUSH
22273: EMPTY
22274: LIST
22275: LIST
22276: PUSH
22277: LD_INT 2
22279: PUSH
22280: LD_INT 25
22282: PUSH
22283: LD_INT 1
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: PUSH
22290: LD_INT 25
22292: PUSH
22293: LD_INT 2
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PUSH
22300: LD_INT 25
22302: PUSH
22303: LD_INT 3
22305: PUSH
22306: EMPTY
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 25
22312: PUSH
22313: LD_INT 4
22315: PUSH
22316: EMPTY
22317: LIST
22318: LIST
22319: PUSH
22320: LD_INT 25
22322: PUSH
22323: LD_INT 5
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: PPUSH
22344: CALL_OW 69
22348: PPUSH
22349: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
22353: LD_EXP 1
22357: PPUSH
22358: LD_EXP 50
22362: PUSH
22363: LD_STRING JMM
22365: STR
22366: PPUSH
22367: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
22371: LD_EXP 2
22375: PPUSH
22376: LD_EXP 50
22380: PUSH
22381: LD_STRING Brown
22383: STR
22384: PPUSH
22385: CALL 7417 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
22389: LD_EXP 3
22393: PPUSH
22394: LD_EXP 50
22398: PUSH
22399: LD_STRING Donaldson
22401: STR
22402: PPUSH
22403: CALL 7417 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
22407: LD_EXP 4
22411: PPUSH
22412: LD_EXP 50
22416: PUSH
22417: LD_STRING Bobby
22419: STR
22420: PPUSH
22421: CALL 7417 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
22425: LD_EXP 5
22429: PPUSH
22430: LD_EXP 50
22434: PUSH
22435: LD_STRING Cyrus
22437: STR
22438: PPUSH
22439: CALL 7417 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
22443: LD_EXP 6
22447: PPUSH
22448: LD_EXP 50
22452: PUSH
22453: LD_STRING Lisa
22455: STR
22456: PPUSH
22457: CALL 7417 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
22461: LD_EXP 7
22465: PPUSH
22466: LD_EXP 50
22470: PUSH
22471: LD_STRING Frank
22473: STR
22474: PPUSH
22475: CALL 7417 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
22479: LD_EXP 8
22483: PPUSH
22484: LD_EXP 50
22488: PUSH
22489: LD_STRING Kikuchi
22491: STR
22492: PPUSH
22493: CALL 7417 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
22497: LD_EXP 9
22501: PPUSH
22502: LD_EXP 50
22506: PUSH
22507: LD_STRING Houten
22509: STR
22510: PPUSH
22511: CALL 7417 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
22515: LD_EXP 10
22519: PPUSH
22520: LD_EXP 50
22524: PUSH
22525: LD_STRING Gary
22527: STR
22528: PPUSH
22529: CALL 7417 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
22533: LD_EXP 11
22537: PPUSH
22538: LD_EXP 50
22542: PUSH
22543: LD_STRING Simms
22545: STR
22546: PPUSH
22547: CALL 7417 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
22551: LD_EXP 12
22555: PPUSH
22556: LD_EXP 50
22560: PUSH
22561: LD_STRING Denis
22563: STR
22564: PPUSH
22565: CALL 7417 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
22569: LD_EXP 13
22573: PPUSH
22574: LD_EXP 50
22578: PUSH
22579: LD_STRING Joan
22581: STR
22582: PPUSH
22583: CALL 7417 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
22587: LD_EXP 15
22591: PPUSH
22592: LD_EXP 50
22596: PUSH
22597: LD_STRING Gladstone
22599: STR
22600: PPUSH
22601: CALL 7417 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
22605: LD_EXP 17
22609: PPUSH
22610: LD_EXP 50
22614: PUSH
22615: LD_STRING DeltaDoctor
22617: STR
22618: PPUSH
22619: CALL 7417 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
22623: LD_INT 50
22625: PUSH
22626: EMPTY
22627: LIST
22628: PUSH
22629: LD_INT 22
22631: PUSH
22632: LD_INT 1
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 21
22641: PUSH
22642: LD_INT 1
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 2
22651: PUSH
22652: LD_INT 25
22654: PUSH
22655: LD_INT 1
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: PUSH
22662: LD_INT 25
22664: PUSH
22665: LD_INT 2
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: PUSH
22672: LD_INT 25
22674: PUSH
22675: LD_INT 3
22677: PUSH
22678: EMPTY
22679: LIST
22680: LIST
22681: PUSH
22682: LD_INT 25
22684: PUSH
22685: LD_INT 4
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PUSH
22692: EMPTY
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: PUSH
22699: EMPTY
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: PPUSH
22705: CALL_OW 69
22709: PUSH
22710: LD_EXP 1
22714: PUSH
22715: LD_EXP 2
22719: PUSH
22720: LD_EXP 3
22724: PUSH
22725: LD_EXP 4
22729: PUSH
22730: LD_EXP 5
22734: PUSH
22735: LD_EXP 6
22739: PUSH
22740: LD_EXP 7
22744: PUSH
22745: LD_EXP 15
22749: PUSH
22750: LD_EXP 8
22754: PUSH
22755: LD_EXP 12
22759: PUSH
22760: LD_EXP 13
22764: PUSH
22765: LD_EXP 9
22769: PUSH
22770: LD_EXP 11
22774: PUSH
22775: LD_EXP 10
22779: PUSH
22780: LD_EXP 17
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: DIFF
22802: PPUSH
22803: LD_STRING 10_other_survivors
22805: PPUSH
22806: CALL_OW 38
// YouWin ;
22810: CALL_OW 103
// end ;
22814: LD_VAR 0 1
22818: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
22819: LD_INT 0
22821: PPUSH
22822: PPUSH
22823: PPUSH
22824: PPUSH
// epsilonBase = [ ] ;
22825: LD_ADDR_VAR 0 2
22829: PUSH
22830: EMPTY
22831: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
22832: LD_ADDR_VAR 0 3
22836: PUSH
22837: LD_INT 22
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: LD_INT 21
22849: PUSH
22850: LD_INT 3
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 50
22859: PUSH
22860: EMPTY
22861: LIST
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: LIST
22867: PPUSH
22868: CALL_OW 69
22872: ST_TO_ADDR
// for i in buildings do
22873: LD_ADDR_VAR 0 4
22877: PUSH
22878: LD_VAR 0 3
22882: PUSH
22883: FOR_IN
22884: IFFALSE 23321
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
22886: LD_VAR 0 4
22890: PPUSH
22891: CALL_OW 266
22895: PUSH
22896: LD_INT 6
22898: PUSH
22899: LD_INT 7
22901: PUSH
22902: LD_INT 8
22904: PUSH
22905: EMPTY
22906: LIST
22907: LIST
22908: LIST
22909: IN
22910: IFFALSE 23024
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
22912: LD_ADDR_VAR 0 2
22916: PUSH
22917: LD_VAR 0 2
22921: PUSH
22922: LD_VAR 0 4
22926: PPUSH
22927: CALL_OW 266
22931: PUSH
22932: LD_VAR 0 4
22936: PPUSH
22937: CALL_OW 250
22941: PUSH
22942: LD_VAR 0 4
22946: PPUSH
22947: CALL_OW 251
22951: PUSH
22952: LD_VAR 0 4
22956: PPUSH
22957: CALL_OW 254
22961: PUSH
22962: LD_VAR 0 4
22966: PPUSH
22967: CALL_OW 267
22971: PUSH
22972: LD_VAR 0 4
22976: PPUSH
22977: CALL_OW 248
22981: PUSH
22982: LD_VAR 0 4
22986: PPUSH
22987: LD_INT 1
22989: PPUSH
22990: CALL_OW 268
22994: PUSH
22995: LD_VAR 0 4
22999: PPUSH
23000: LD_INT 2
23002: PPUSH
23003: CALL_OW 268
23007: PUSH
23008: EMPTY
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: ADD
23021: ST_TO_ADDR
23022: GO 23319
// if GetBType ( i ) = b_bunker then
23024: LD_VAR 0 4
23028: PPUSH
23029: CALL_OW 266
23033: PUSH
23034: LD_INT 32
23036: EQUAL
23037: IFFALSE 23134
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
23039: LD_ADDR_VAR 0 2
23043: PUSH
23044: LD_VAR 0 2
23048: PUSH
23049: LD_VAR 0 4
23053: PPUSH
23054: CALL_OW 266
23058: PUSH
23059: LD_VAR 0 4
23063: PPUSH
23064: CALL_OW 250
23068: PUSH
23069: LD_VAR 0 4
23073: PPUSH
23074: CALL_OW 251
23078: PUSH
23079: LD_VAR 0 4
23083: PPUSH
23084: CALL_OW 254
23088: PUSH
23089: LD_VAR 0 4
23093: PPUSH
23094: CALL_OW 267
23098: PUSH
23099: LD_VAR 0 4
23103: PPUSH
23104: CALL_OW 248
23108: PUSH
23109: LD_VAR 0 4
23113: PPUSH
23114: CALL_OW 269
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: LIST
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: ADD
23131: ST_TO_ADDR
23132: GO 23319
// if GetBType ( i ) = b_factory then
23134: LD_VAR 0 4
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 3
23146: EQUAL
23147: IFFALSE 23237
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
23149: LD_ADDR_VAR 0 2
23153: PUSH
23154: LD_VAR 0 2
23158: PPUSH
23159: LD_INT 1
23161: PPUSH
23162: LD_VAR 0 4
23166: PPUSH
23167: CALL_OW 266
23171: PUSH
23172: LD_VAR 0 4
23176: PPUSH
23177: CALL_OW 250
23181: PUSH
23182: LD_VAR 0 4
23186: PPUSH
23187: CALL_OW 251
23191: PUSH
23192: LD_VAR 0 4
23196: PPUSH
23197: CALL_OW 254
23201: PUSH
23202: LD_VAR 0 4
23206: PPUSH
23207: CALL_OW 267
23211: PUSH
23212: LD_VAR 0 4
23216: PPUSH
23217: CALL_OW 248
23221: PUSH
23222: EMPTY
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: PPUSH
23230: CALL_OW 2
23234: ST_TO_ADDR
23235: GO 23319
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_VAR 0 2
23246: PUSH
23247: LD_VAR 0 4
23251: PPUSH
23252: CALL_OW 266
23256: PUSH
23257: LD_VAR 0 4
23261: PPUSH
23262: CALL_OW 250
23266: PUSH
23267: LD_VAR 0 4
23271: PPUSH
23272: CALL_OW 251
23276: PUSH
23277: LD_VAR 0 4
23281: PPUSH
23282: CALL_OW 254
23286: PUSH
23287: LD_VAR 0 4
23291: PPUSH
23292: CALL_OW 267
23296: PUSH
23297: LD_VAR 0 4
23301: PPUSH
23302: CALL_OW 248
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: ADD
23318: ST_TO_ADDR
// end ;
23319: GO 22883
23321: POP
23322: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
23323: LD_VAR 0 2
23327: PPUSH
23328: LD_STRING 10_EpsilonBase
23330: PPUSH
23331: CALL_OW 39
// end ; end_of_file
23335: LD_VAR 0 1
23339: RET
// every 0 0$1 trigger IsDead ( JMM ) do
23340: LD_EXP 1
23344: PPUSH
23345: CALL_OW 301
23349: IFFALSE 23361
23351: GO 23353
23353: DISABLE
// YouLost ( JMM ) ; end_of_file
23354: LD_STRING JMM
23356: PPUSH
23357: CALL_OW 104
23361: END
// every 0 0$30 do
23362: GO 23364
23364: DISABLE
// begin enable ;
23365: ENABLE
// if cratesSpawned < 6 then
23366: LD_EXP 52
23370: PUSH
23371: LD_INT 6
23373: LESS
23374: IFFALSE 23411
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23376: LD_INT 3
23378: PPUSH
23379: LD_INT 5
23381: PPUSH
23382: CALL_OW 12
23386: PPUSH
23387: LD_INT 16
23389: PPUSH
23390: LD_INT 1
23392: PPUSH
23393: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23397: LD_ADDR_EXP 52
23401: PUSH
23402: LD_EXP 52
23406: PUSH
23407: LD_INT 1
23409: PLUS
23410: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
23411: LD_EXP 52
23415: PUSH
23416: LD_INT 6
23418: GREATEREQUAL
23419: PUSH
23420: LD_EXP 52
23424: PUSH
23425: LD_INT 12
23427: LESS
23428: AND
23429: IFFALSE 23473
// begin wait ( 0 0$30 ) ;
23431: LD_INT 1050
23433: PPUSH
23434: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23438: LD_INT 3
23440: PPUSH
23441: LD_INT 5
23443: PPUSH
23444: CALL_OW 12
23448: PPUSH
23449: LD_INT 16
23451: PPUSH
23452: LD_INT 1
23454: PPUSH
23455: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23459: LD_ADDR_EXP 52
23463: PUSH
23464: LD_EXP 52
23468: PUSH
23469: LD_INT 1
23471: PLUS
23472: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
23473: LD_EXP 52
23477: PUSH
23478: LD_INT 12
23480: GREATEREQUAL
23481: IFFALSE 23525
// begin wait ( 1 1$0 ) ;
23483: LD_INT 2100
23485: PPUSH
23486: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
23490: LD_INT 3
23492: PPUSH
23493: LD_INT 5
23495: PPUSH
23496: CALL_OW 12
23500: PPUSH
23501: LD_INT 16
23503: PPUSH
23504: LD_INT 1
23506: PPUSH
23507: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
23511: LD_ADDR_EXP 52
23515: PUSH
23516: LD_EXP 52
23520: PUSH
23521: LD_INT 1
23523: PLUS
23524: ST_TO_ADDR
// end ; end ;
23525: END
