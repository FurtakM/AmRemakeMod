// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 4 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 4
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10c_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10c_
 229: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 10_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24700 0 0
// PrepareDifficulty ;
 250: CALL 10040 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19638 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19638 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19638 0 2
// PrepareArabianCommander ;
 354: CALL 3167 0 0
// PrepareArabian ;
 358: CALL 3219 0 0
// BuildArabianBase ;
 362: CALL 12739 0 0
// TameApemans ;
 366: CALL 18603 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9634 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9634 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9634 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9634 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9634 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9634 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9634 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9634 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9634 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9634 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9634 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9634 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9634 0 2
1831: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1832: LD_STRING 08_Khatam
1834: PPUSH
1835: CALL_OW 28
1839: IFFALSE 1859
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1841: LD_ADDR_EXP 14
1845: PUSH
1846: LD_STRING 08_Khatam
1848: PPUSH
1849: LD_INT 1
1851: PPUSH
1852: CALL 9634 0 2
1856: ST_TO_ADDR
1857: GO 1884
// if TestCharacters ( 03_Khatam ) then
1859: LD_STRING 03_Khatam
1861: PPUSH
1862: CALL_OW 28
1866: IFFALSE 1884
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1868: LD_ADDR_EXP 14
1872: PUSH
1873: LD_STRING 03_Khatam
1875: PPUSH
1876: LD_INT 1
1878: PPUSH
1879: CALL 9634 0 2
1883: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1884: LD_ADDR_EXP 15
1888: PUSH
1889: LD_STRING 08_Gladstone
1891: PPUSH
1892: LD_INT 1
1894: PPUSH
1895: CALL 9634 0 2
1899: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1900: LD_ADDR_EXP 17
1904: PUSH
1905: LD_STRING DeltaDoctor
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: CALL 9634 0 2
1915: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1916: LD_STRING 08_Frank
1918: PPUSH
1919: CALL_OW 28
1923: PUSH
1924: LD_INT 1
1926: EQUAL
1927: IFFALSE 1945
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1929: LD_ADDR_EXP 8
1933: PUSH
1934: LD_STRING Yamoko
1936: PPUSH
1937: LD_INT 1
1939: PPUSH
1940: CALL 9634 0 2
1944: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1945: LD_ADDR_EXP 22
1949: PUSH
1950: LD_STRING 09_others
1952: PPUSH
1953: CALL_OW 31
1957: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1958: LD_ADDR_EXP 23
1962: PUSH
1963: LD_STRING 09_apes
1965: PPUSH
1966: CALL_OW 31
1970: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1971: LD_EXP 11
1975: PPUSH
1976: LD_INT 1
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1986: LD_EXP 12
1990: PPUSH
1991: LD_INT 1
1993: PPUSH
1994: LD_INT 0
1996: PPUSH
1997: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2001: LD_EXP 13
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 0
2011: PPUSH
2012: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2016: LD_EXP 14
2020: PPUSH
2021: LD_INT 1
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2031: LD_EXP 15
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2046: LD_EXP 17
2050: PPUSH
2051: LD_INT 1
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2061: LD_EXP 8
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 0
2071: PPUSH
2072: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2076: LD_EXP 11
2080: PUSH
2081: LD_EXP 14
2085: PUSH
2086: LD_EXP 12
2090: PUSH
2091: LD_EXP 15
2095: PUSH
2096: LD_EXP 17
2100: PUSH
2101: LD_EXP 13
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: LIST
2113: PPUSH
2114: LD_INT 4
2116: PPUSH
2117: CALL_OW 336
// if others09 > 2 then
2121: LD_EXP 22
2125: PUSH
2126: LD_INT 2
2128: GREATER
2129: IFFALSE 2210
// begin for i := 1 to 3 do
2131: LD_ADDR_VAR 0 2
2135: PUSH
2136: DOUBLE
2137: LD_INT 1
2139: DEC
2140: ST_TO_ADDR
2141: LD_INT 3
2143: PUSH
2144: FOR_TO
2145: IFFALSE 2206
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2147: LD_EXP 22
2151: PUSH
2152: LD_VAR 0 2
2156: ARRAY
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 0
2163: PPUSH
2164: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2168: LD_ADDR_EXP 22
2172: PUSH
2173: LD_EXP 22
2177: PPUSH
2178: LD_INT 1
2180: PPUSH
2181: CALL_OW 3
2185: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2186: LD_EXP 22
2190: PUSH
2191: LD_VAR 0 2
2195: ARRAY
2196: PPUSH
2197: LD_INT 2
2199: PPUSH
2200: CALL_OW 336
// end ;
2204: GO 2144
2206: POP
2207: POP
// end else
2208: GO 2270
// begin for i in others09 do
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: LD_EXP 22
2219: PUSH
2220: FOR_IN
2221: IFFALSE 2268
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2223: LD_VAR 0 2
2227: PPUSH
2228: LD_INT 1
2230: PPUSH
2231: LD_INT 0
2233: PPUSH
2234: CALL_OW 49
// others09 = others09 diff i ;
2238: LD_ADDR_EXP 22
2242: PUSH
2243: LD_EXP 22
2247: PUSH
2248: LD_VAR 0 2
2252: DIFF
2253: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_INT 2
2261: PPUSH
2262: CALL_OW 336
// end ;
2266: GO 2220
2268: POP
2269: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2270: LD_INT 22
2272: PUSH
2273: LD_INT 4
2275: PUSH
2276: EMPTY
2277: LIST
2278: LIST
2279: PUSH
2280: LD_INT 25
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: EMPTY
2287: LIST
2288: LIST
2289: PUSH
2290: EMPTY
2291: LIST
2292: LIST
2293: PPUSH
2294: CALL_OW 69
2298: PUSH
2299: LD_INT 0
2301: EQUAL
2302: IFFALSE 2434
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2304: LD_ADDR_VAR 0 3
2308: PUSH
2309: LD_INT 22
2311: PUSH
2312: LD_INT 4
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: LD_INT 25
2321: PUSH
2322: LD_INT 2
2324: PUSH
2325: EMPTY
2326: LIST
2327: LIST
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PPUSH
2333: CALL_OW 69
2337: PUSH
2338: LD_EXP 11
2342: PUSH
2343: LD_EXP 14
2347: PUSH
2348: LD_EXP 12
2352: PUSH
2353: LD_EXP 15
2357: PUSH
2358: LD_EXP 17
2362: PUSH
2363: LD_EXP 13
2367: PUSH
2368: EMPTY
2369: LIST
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: LIST
2375: DIFF
2376: ST_TO_ADDR
// if not tmp then
2377: LD_VAR 0 3
2381: NOT
2382: IFFALSE 2418
// begin if Denis then
2384: LD_EXP 12
2388: IFFALSE 2404
// SetClass ( Denis , 2 ) else
2390: LD_EXP 12
2394: PPUSH
2395: LD_INT 2
2397: PPUSH
2398: CALL_OW 336
2402: GO 2416
// SetClass ( DeltaDoctor , 2 ) ;
2404: LD_EXP 17
2408: PPUSH
2409: LD_INT 2
2411: PPUSH
2412: CALL_OW 336
// end else
2416: GO 2434
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2418: LD_VAR 0 3
2422: PUSH
2423: LD_INT 1
2425: ARRAY
2426: PPUSH
2427: LD_INT 2
2429: PPUSH
2430: CALL_OW 336
// end ; end ; for i in ape09 do
2434: LD_ADDR_VAR 0 2
2438: PUSH
2439: LD_EXP 23
2443: PUSH
2444: FOR_IN
2445: IFFALSE 2464
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2447: LD_VAR 0 2
2451: PPUSH
2452: LD_INT 1
2454: PPUSH
2455: LD_INT 0
2457: PPUSH
2458: CALL_OW 49
2462: GO 2444
2464: POP
2465: POP
// uc_side = 1 ;
2466: LD_ADDR_OWVAR 20
2470: PUSH
2471: LD_INT 1
2473: ST_TO_ADDR
// hc_class := 1 ;
2474: LD_ADDR_OWVAR 28
2478: PUSH
2479: LD_INT 1
2481: ST_TO_ADDR
// hc_sex := sex_female ;
2482: LD_ADDR_OWVAR 27
2486: PUSH
2487: LD_INT 2
2489: ST_TO_ADDR
// hc_gallery :=  ;
2490: LD_ADDR_OWVAR 33
2494: PUSH
2495: LD_STRING 
2497: ST_TO_ADDR
// hc_name :=  ;
2498: LD_ADDR_OWVAR 26
2502: PUSH
2503: LD_STRING 
2505: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2506: LD_ADDR_OWVAR 31
2510: PUSH
2511: LD_INT 1
2513: PUSH
2514: LD_INT 7
2516: PUSH
2517: LD_INT 1
2519: PUSH
2520: LD_INT 0
2522: PUSH
2523: EMPTY
2524: LIST
2525: LIST
2526: LIST
2527: LIST
2528: ST_TO_ADDR
// AmScout = CreateHuman ;
2529: LD_ADDR_EXP 18
2533: PUSH
2534: CALL_OW 44
2538: ST_TO_ADDR
// end ;
2539: LD_VAR 0 1
2543: RET
// export function PrepareCornell ; begin
2544: LD_INT 0
2546: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2547: LD_INT 4
2549: PPUSH
2550: LD_INT 4
2552: PPUSH
2553: CALL_OW 343
// uc_side = 4 ;
2557: LD_ADDR_OWVAR 20
2561: PUSH
2562: LD_INT 4
2564: ST_TO_ADDR
// uc_nation = 1 ;
2565: LD_ADDR_OWVAR 21
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2573: LD_ADDR_EXP 19
2577: PUSH
2578: LD_STRING 03_Cornel
2580: PPUSH
2581: LD_INT 1
2583: PPUSH
2584: CALL 9634 0 2
2588: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2589: LD_EXP 19
2593: PPUSH
2594: LD_INT 8
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2604: LD_EXP 19
2608: PPUSH
2609: LD_INT 350
2611: PPUSH
2612: CALL_OW 234
// if IsInUnit ( JMM ) then
2616: LD_EXP 1
2620: PPUSH
2621: CALL_OW 310
2625: IFFALSE 2668
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2627: LD_EXP 19
2631: PPUSH
2632: LD_EXP 1
2636: PPUSH
2637: CALL_OW 310
2641: PPUSH
2642: CALL_OW 250
2646: PPUSH
2647: LD_EXP 1
2651: PPUSH
2652: CALL_OW 310
2656: PPUSH
2657: CALL_OW 251
2661: PPUSH
2662: CALL_OW 111
2666: GO 2697
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2668: LD_EXP 19
2672: PPUSH
2673: LD_EXP 1
2677: PPUSH
2678: CALL_OW 250
2682: PPUSH
2683: LD_EXP 1
2687: PPUSH
2688: CALL_OW 251
2692: PPUSH
2693: CALL_OW 111
// end ; end_of_file
2697: LD_VAR 0 1
2701: RET
// export function PrepareRussians ; var i , un ; begin
2702: LD_INT 0
2704: PPUSH
2705: PPUSH
2706: PPUSH
// uc_side = 3 ;
2707: LD_ADDR_OWVAR 20
2711: PUSH
2712: LD_INT 3
2714: ST_TO_ADDR
// uc_nation = 3 ;
2715: LD_ADDR_OWVAR 21
2719: PUSH
2720: LD_INT 3
2722: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2723: LD_ADDR_EXP 25
2727: PUSH
2728: LD_STRING Tsaritsyn
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: CALL 9634 0 2
2738: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2739: LD_EXP 25
2743: PPUSH
2744: LD_INT 3
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// for i = 1 to 14 do
2754: LD_ADDR_VAR 0 2
2758: PUSH
2759: DOUBLE
2760: LD_INT 1
2762: DEC
2763: ST_TO_ADDR
2764: LD_INT 14
2766: PUSH
2767: FOR_TO
2768: IFFALSE 2854
// begin uc_side = 3 ;
2770: LD_ADDR_OWVAR 20
2774: PUSH
2775: LD_INT 3
2777: ST_TO_ADDR
// uc_nation = 3 ;
2778: LD_ADDR_OWVAR 21
2782: PUSH
2783: LD_INT 3
2785: ST_TO_ADDR
// hc_gallery =  ;
2786: LD_ADDR_OWVAR 33
2790: PUSH
2791: LD_STRING 
2793: ST_TO_ADDR
// hc_name =  ;
2794: LD_ADDR_OWVAR 26
2798: PUSH
2799: LD_STRING 
2801: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2802: LD_INT 0
2804: PPUSH
2805: LD_INT 1
2807: PPUSH
2808: LD_EXP 36
2812: PPUSH
2813: LD_EXP 37
2817: PPUSH
2818: CALL_OW 12
2822: PPUSH
2823: CALL_OW 380
// un = CreateHuman ;
2827: LD_ADDR_VAR 0 3
2831: PUSH
2832: CALL_OW 44
2836: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2837: LD_VAR 0 3
2841: PPUSH
2842: LD_INT 3
2844: PPUSH
2845: LD_INT 0
2847: PPUSH
2848: CALL_OW 49
// end ;
2852: GO 2767
2854: POP
2855: POP
// for i = 1 to 6 do
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: DOUBLE
2862: LD_INT 1
2864: DEC
2865: ST_TO_ADDR
2866: LD_INT 6
2868: PUSH
2869: FOR_TO
2870: IFFALSE 2956
// begin uc_side = 3 ;
2872: LD_ADDR_OWVAR 20
2876: PUSH
2877: LD_INT 3
2879: ST_TO_ADDR
// uc_nation = 3 ;
2880: LD_ADDR_OWVAR 21
2884: PUSH
2885: LD_INT 3
2887: ST_TO_ADDR
// hc_gallery =  ;
2888: LD_ADDR_OWVAR 33
2892: PUSH
2893: LD_STRING 
2895: ST_TO_ADDR
// hc_name =  ;
2896: LD_ADDR_OWVAR 26
2900: PUSH
2901: LD_STRING 
2903: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2904: LD_INT 0
2906: PPUSH
2907: LD_INT 2
2909: PPUSH
2910: LD_EXP 36
2914: PPUSH
2915: LD_EXP 37
2919: PPUSH
2920: CALL_OW 12
2924: PPUSH
2925: CALL_OW 380
// un = CreateHuman ;
2929: LD_ADDR_VAR 0 3
2933: PUSH
2934: CALL_OW 44
2938: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2939: LD_VAR 0 3
2943: PPUSH
2944: LD_INT 3
2946: PPUSH
2947: LD_INT 0
2949: PPUSH
2950: CALL_OW 49
// end ;
2954: GO 2869
2956: POP
2957: POP
// for i = 1 to 6 do
2958: LD_ADDR_VAR 0 2
2962: PUSH
2963: DOUBLE
2964: LD_INT 1
2966: DEC
2967: ST_TO_ADDR
2968: LD_INT 6
2970: PUSH
2971: FOR_TO
2972: IFFALSE 3058
// begin uc_side = 3 ;
2974: LD_ADDR_OWVAR 20
2978: PUSH
2979: LD_INT 3
2981: ST_TO_ADDR
// uc_nation = 3 ;
2982: LD_ADDR_OWVAR 21
2986: PUSH
2987: LD_INT 3
2989: ST_TO_ADDR
// hc_gallery =  ;
2990: LD_ADDR_OWVAR 33
2994: PUSH
2995: LD_STRING 
2997: ST_TO_ADDR
// hc_name =  ;
2998: LD_ADDR_OWVAR 26
3002: PUSH
3003: LD_STRING 
3005: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3006: LD_INT 0
3008: PPUSH
3009: LD_INT 3
3011: PPUSH
3012: LD_EXP 36
3016: PPUSH
3017: LD_EXP 37
3021: PPUSH
3022: CALL_OW 12
3026: PPUSH
3027: CALL_OW 380
// un = CreateHuman ;
3031: LD_ADDR_VAR 0 3
3035: PUSH
3036: CALL_OW 44
3040: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3041: LD_VAR 0 3
3045: PPUSH
3046: LD_INT 3
3048: PPUSH
3049: LD_INT 0
3051: PPUSH
3052: CALL_OW 49
// end ;
3056: GO 2971
3058: POP
3059: POP
// for i = 1 to 4 do
3060: LD_ADDR_VAR 0 2
3064: PUSH
3065: DOUBLE
3066: LD_INT 1
3068: DEC
3069: ST_TO_ADDR
3070: LD_INT 4
3072: PUSH
3073: FOR_TO
3074: IFFALSE 3160
// begin uc_side = 3 ;
3076: LD_ADDR_OWVAR 20
3080: PUSH
3081: LD_INT 3
3083: ST_TO_ADDR
// uc_nation = 3 ;
3084: LD_ADDR_OWVAR 21
3088: PUSH
3089: LD_INT 3
3091: ST_TO_ADDR
// hc_gallery =  ;
3092: LD_ADDR_OWVAR 33
3096: PUSH
3097: LD_STRING 
3099: ST_TO_ADDR
// hc_name =  ;
3100: LD_ADDR_OWVAR 26
3104: PUSH
3105: LD_STRING 
3107: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3108: LD_INT 0
3110: PPUSH
3111: LD_INT 4
3113: PPUSH
3114: LD_EXP 36
3118: PPUSH
3119: LD_EXP 37
3123: PPUSH
3124: CALL_OW 12
3128: PPUSH
3129: CALL_OW 380
// un = CreateHuman ;
3133: LD_ADDR_VAR 0 3
3137: PUSH
3138: CALL_OW 44
3142: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3143: LD_VAR 0 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 0
3153: PPUSH
3154: CALL_OW 49
// end ;
3158: GO 3073
3160: POP
3161: POP
// end ; end_of_file
3162: LD_VAR 0 1
3166: RET
// export function PrepareArabianCommander ; begin
3167: LD_INT 0
3169: PPUSH
// uc_side = 2 ;
3170: LD_ADDR_OWVAR 20
3174: PUSH
3175: LD_INT 2
3177: ST_TO_ADDR
// uc_nation = 2 ;
3178: LD_ADDR_OWVAR 21
3182: PUSH
3183: LD_INT 2
3185: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3186: LD_ADDR_EXP 26
3190: PUSH
3191: LD_STRING Dietrich
3193: PPUSH
3194: CALL_OW 25
3198: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3199: LD_EXP 26
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: LD_INT 0
3209: PPUSH
3210: CALL_OW 49
// end ;
3214: LD_VAR 0 1
3218: RET
// export function PrepareArabian ; var i , un , veh ; begin
3219: LD_INT 0
3221: PPUSH
3222: PPUSH
3223: PPUSH
3224: PPUSH
// uc_side := 2 ;
3225: LD_ADDR_OWVAR 20
3229: PUSH
3230: LD_INT 2
3232: ST_TO_ADDR
// uc_nation := 2 ;
3233: LD_ADDR_OWVAR 21
3237: PUSH
3238: LD_INT 2
3240: ST_TO_ADDR
// if not Ahmed then
3241: LD_EXP 27
3245: NOT
3246: IFFALSE 3314
// begin InitHc ;
3248: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3252: LD_INT 1
3254: PPUSH
3255: LD_INT 1
3257: PPUSH
3258: LD_EXP 36
3262: PPUSH
3263: LD_EXP 37
3267: PUSH
3268: LD_INT 1
3270: PLUS
3271: PPUSH
3272: CALL_OW 12
3276: PPUSH
3277: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3281: LD_ADDR_OWVAR 26
3285: PUSH
3286: LD_STRING Ahmed Abbasid
3288: ST_TO_ADDR
// Ahmed := CreateHuman ;
3289: LD_ADDR_EXP 27
3293: PUSH
3294: CALL_OW 44
3298: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3299: LD_EXP 27
3303: PPUSH
3304: LD_INT 4
3306: PPUSH
3307: LD_INT 0
3309: PPUSH
3310: CALL_OW 49
// end ; for i = 1 to 3 do
3314: LD_ADDR_VAR 0 2
3318: PUSH
3319: DOUBLE
3320: LD_INT 1
3322: DEC
3323: ST_TO_ADDR
3324: LD_INT 3
3326: PUSH
3327: FOR_TO
3328: IFFALSE 3414
// begin uc_side = 2 ;
3330: LD_ADDR_OWVAR 20
3334: PUSH
3335: LD_INT 2
3337: ST_TO_ADDR
// uc_nation = 2 ;
3338: LD_ADDR_OWVAR 21
3342: PUSH
3343: LD_INT 2
3345: ST_TO_ADDR
// hc_gallery =  ;
3346: LD_ADDR_OWVAR 33
3350: PUSH
3351: LD_STRING 
3353: ST_TO_ADDR
// hc_name =  ;
3354: LD_ADDR_OWVAR 26
3358: PUSH
3359: LD_STRING 
3361: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3362: LD_INT 0
3364: PPUSH
3365: LD_INT 1
3367: PPUSH
3368: LD_EXP 36
3372: PPUSH
3373: LD_EXP 37
3377: PPUSH
3378: CALL_OW 12
3382: PPUSH
3383: CALL_OW 380
// un = CreateHuman ;
3387: LD_ADDR_VAR 0 3
3391: PUSH
3392: CALL_OW 44
3396: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3397: LD_VAR 0 3
3401: PPUSH
3402: LD_INT 4
3404: PPUSH
3405: LD_INT 0
3407: PPUSH
3408: CALL_OW 49
// end ;
3412: GO 3327
3414: POP
3415: POP
// for i = 1 to 6 do
3416: LD_ADDR_VAR 0 2
3420: PUSH
3421: DOUBLE
3422: LD_INT 1
3424: DEC
3425: ST_TO_ADDR
3426: LD_INT 6
3428: PUSH
3429: FOR_TO
3430: IFFALSE 3516
// begin uc_side = 2 ;
3432: LD_ADDR_OWVAR 20
3436: PUSH
3437: LD_INT 2
3439: ST_TO_ADDR
// uc_nation = 2 ;
3440: LD_ADDR_OWVAR 21
3444: PUSH
3445: LD_INT 2
3447: ST_TO_ADDR
// hc_gallery =  ;
3448: LD_ADDR_OWVAR 33
3452: PUSH
3453: LD_STRING 
3455: ST_TO_ADDR
// hc_name =  ;
3456: LD_ADDR_OWVAR 26
3460: PUSH
3461: LD_STRING 
3463: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3464: LD_INT 0
3466: PPUSH
3467: LD_INT 2
3469: PPUSH
3470: LD_EXP 36
3474: PPUSH
3475: LD_EXP 37
3479: PPUSH
3480: CALL_OW 12
3484: PPUSH
3485: CALL_OW 380
// un = CreateHuman ;
3489: LD_ADDR_VAR 0 3
3493: PUSH
3494: CALL_OW 44
3498: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3499: LD_VAR 0 3
3503: PPUSH
3504: LD_INT 4
3506: PPUSH
3507: LD_INT 0
3509: PPUSH
3510: CALL_OW 49
// end ;
3514: GO 3429
3516: POP
3517: POP
// for i = 1 to 6 do
3518: LD_ADDR_VAR 0 2
3522: PUSH
3523: DOUBLE
3524: LD_INT 1
3526: DEC
3527: ST_TO_ADDR
3528: LD_INT 6
3530: PUSH
3531: FOR_TO
3532: IFFALSE 3618
// begin uc_side = 2 ;
3534: LD_ADDR_OWVAR 20
3538: PUSH
3539: LD_INT 2
3541: ST_TO_ADDR
// uc_nation = 2 ;
3542: LD_ADDR_OWVAR 21
3546: PUSH
3547: LD_INT 2
3549: ST_TO_ADDR
// hc_gallery =  ;
3550: LD_ADDR_OWVAR 33
3554: PUSH
3555: LD_STRING 
3557: ST_TO_ADDR
// hc_name =  ;
3558: LD_ADDR_OWVAR 26
3562: PUSH
3563: LD_STRING 
3565: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3566: LD_INT 0
3568: PPUSH
3569: LD_INT 1
3571: PPUSH
3572: LD_EXP 36
3576: PPUSH
3577: LD_EXP 37
3581: PPUSH
3582: CALL_OW 12
3586: PPUSH
3587: CALL_OW 380
// un = CreateHuman ;
3591: LD_ADDR_VAR 0 3
3595: PUSH
3596: CALL_OW 44
3600: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3601: LD_VAR 0 3
3605: PPUSH
3606: LD_INT 4
3608: PPUSH
3609: LD_INT 0
3611: PPUSH
3612: CALL_OW 49
// end ;
3616: GO 3531
3618: POP
3619: POP
// for i = 1 to 4 do
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: DOUBLE
3626: LD_INT 1
3628: DEC
3629: ST_TO_ADDR
3630: LD_INT 4
3632: PUSH
3633: FOR_TO
3634: IFFALSE 3720
// begin uc_side = 2 ;
3636: LD_ADDR_OWVAR 20
3640: PUSH
3641: LD_INT 2
3643: ST_TO_ADDR
// uc_nation = 2 ;
3644: LD_ADDR_OWVAR 21
3648: PUSH
3649: LD_INT 2
3651: ST_TO_ADDR
// hc_gallery =  ;
3652: LD_ADDR_OWVAR 33
3656: PUSH
3657: LD_STRING 
3659: ST_TO_ADDR
// hc_name =  ;
3660: LD_ADDR_OWVAR 26
3664: PUSH
3665: LD_STRING 
3667: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3668: LD_INT 0
3670: PPUSH
3671: LD_INT 4
3673: PPUSH
3674: LD_EXP 36
3678: PPUSH
3679: LD_EXP 37
3683: PPUSH
3684: CALL_OW 12
3688: PPUSH
3689: CALL_OW 380
// un = CreateHuman ;
3693: LD_ADDR_VAR 0 3
3697: PUSH
3698: CALL_OW 44
3702: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3703: LD_VAR 0 3
3707: PPUSH
3708: LD_INT 4
3710: PPUSH
3711: LD_INT 0
3713: PPUSH
3714: CALL_OW 49
// end ;
3718: GO 3633
3720: POP
3721: POP
// for i = 1 to 2 do
3722: LD_ADDR_VAR 0 2
3726: PUSH
3727: DOUBLE
3728: LD_INT 1
3730: DEC
3731: ST_TO_ADDR
3732: LD_INT 2
3734: PUSH
3735: FOR_TO
3736: IFFALSE 3866
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3738: LD_ADDR_VAR 0 4
3742: PUSH
3743: LD_INT 22
3745: PUSH
3746: LD_INT 2
3748: PUSH
3749: EMPTY
3750: LIST
3751: LIST
3752: PUSH
3753: LD_INT 21
3755: PUSH
3756: LD_INT 2
3758: PUSH
3759: EMPTY
3760: LIST
3761: LIST
3762: PUSH
3763: LD_INT 58
3765: PUSH
3766: EMPTY
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 69
3778: ST_TO_ADDR
// uc_side = 2 ;
3779: LD_ADDR_OWVAR 20
3783: PUSH
3784: LD_INT 2
3786: ST_TO_ADDR
// uc_nation = 2 ;
3787: LD_ADDR_OWVAR 21
3791: PUSH
3792: LD_INT 2
3794: ST_TO_ADDR
// hc_gallery =  ;
3795: LD_ADDR_OWVAR 33
3799: PUSH
3800: LD_STRING 
3802: ST_TO_ADDR
// hc_name =  ;
3803: LD_ADDR_OWVAR 26
3807: PUSH
3808: LD_STRING 
3810: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3811: LD_INT 0
3813: PPUSH
3814: LD_INT 3
3816: PPUSH
3817: LD_EXP 36
3821: PPUSH
3822: LD_EXP 37
3826: PPUSH
3827: CALL_OW 12
3831: PPUSH
3832: CALL_OW 380
// un = CreateHuman ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: CALL_OW 44
3845: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3846: LD_VAR 0 3
3850: PPUSH
3851: LD_VAR 0 4
3855: PUSH
3856: LD_INT 1
3858: ARRAY
3859: PPUSH
3860: CALL_OW 52
// end ;
3864: GO 3735
3866: POP
3867: POP
// end ;
3868: LD_VAR 0 1
3872: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3873: LD_INT 0
3875: PPUSH
3876: PPUSH
3877: PPUSH
3878: PPUSH
3879: PPUSH
3880: PPUSH
// for i := 1 to 2 do
3881: LD_ADDR_VAR 0 2
3885: PUSH
3886: DOUBLE
3887: LD_INT 1
3889: DEC
3890: ST_TO_ADDR
3891: LD_INT 2
3893: PUSH
3894: FOR_TO
3895: IFFALSE 4021
// begin uc_side = 5 ;
3897: LD_ADDR_OWVAR 20
3901: PUSH
3902: LD_INT 5
3904: ST_TO_ADDR
// uc_nation = 2 ;
3905: LD_ADDR_OWVAR 21
3909: PUSH
3910: LD_INT 2
3912: ST_TO_ADDR
// vc_chassis := 31 ;
3913: LD_ADDR_OWVAR 37
3917: PUSH
3918: LD_INT 31
3920: ST_TO_ADDR
// vc_control := control_rider ;
3921: LD_ADDR_OWVAR 38
3925: PUSH
3926: LD_INT 4
3928: ST_TO_ADDR
// animal := CreateVehicle ;
3929: LD_ADDR_VAR 0 3
3933: PUSH
3934: CALL_OW 45
3938: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3939: LD_VAR 0 3
3943: PPUSH
3944: LD_INT 7
3946: PPUSH
3947: LD_INT 0
3949: PPUSH
3950: CALL_OW 49
// hc_gallery =  ;
3954: LD_ADDR_OWVAR 33
3958: PUSH
3959: LD_STRING 
3961: ST_TO_ADDR
// hc_name =  ;
3962: LD_ADDR_OWVAR 26
3966: PUSH
3967: LD_STRING 
3969: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3970: LD_INT 0
3972: PPUSH
3973: LD_INT 11
3975: PPUSH
3976: LD_EXP 36
3980: PPUSH
3981: LD_EXP 37
3985: PPUSH
3986: CALL_OW 12
3990: PPUSH
3991: CALL_OW 380
// un = CreateHuman ;
3995: LD_ADDR_VAR 0 4
3999: PUSH
4000: CALL_OW 44
4004: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4005: LD_VAR 0 4
4009: PPUSH
4010: LD_VAR 0 3
4014: PPUSH
4015: CALL_OW 52
// end ;
4019: GO 3894
4021: POP
4022: POP
// repeat wait ( 0 0$1 ) ;
4023: LD_INT 35
4025: PPUSH
4026: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4030: LD_ADDR_VAR 0 5
4034: PUSH
4035: LD_INT 22
4037: PUSH
4038: LD_INT 1
4040: PUSH
4041: EMPTY
4042: LIST
4043: LIST
4044: PPUSH
4045: CALL_OW 69
4049: PPUSH
4050: LD_VAR 0 2
4054: PPUSH
4055: CALL_OW 74
4059: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4060: LD_ADDR_VAR 0 6
4064: PUSH
4065: LD_INT 22
4067: PUSH
4068: LD_INT 1
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 2
4077: PUSH
4078: LD_INT 59
4080: PUSH
4081: EMPTY
4082: LIST
4083: PUSH
4084: LD_INT 21
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: PUSH
4094: LD_INT 21
4096: PUSH
4097: LD_INT 2
4099: PUSH
4100: EMPTY
4101: LIST
4102: LIST
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: LIST
4108: LIST
4109: PUSH
4110: EMPTY
4111: LIST
4112: LIST
4113: PUSH
4114: EMPTY
4115: LIST
4116: PPUSH
4117: CALL_OW 69
4121: PPUSH
4122: LD_VAR 0 2
4126: PPUSH
4127: CALL_OW 74
4131: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4132: LD_ADDR_VAR 0 2
4136: PUSH
4137: LD_INT 22
4139: PUSH
4140: LD_INT 5
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: PUSH
4147: LD_INT 25
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: PPUSH
4161: CALL_OW 69
4165: PUSH
4166: FOR_IN
4167: IFFALSE 4237
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4169: LD_VAR 0 2
4173: PPUSH
4174: LD_VAR 0 5
4178: PPUSH
4179: CALL_OW 296
4183: PUSH
4184: LD_INT 8
4186: PLUS
4187: PUSH
4188: LD_VAR 0 2
4192: PPUSH
4193: LD_VAR 0 6
4197: PPUSH
4198: CALL_OW 296
4202: LESS
4203: IFFALSE 4221
// ComAttackUnit ( i , target1 ) else
4205: LD_VAR 0 2
4209: PPUSH
4210: LD_VAR 0 5
4214: PPUSH
4215: CALL_OW 115
4219: GO 4235
// ComAttackUnit ( i , target2 ) ;
4221: LD_VAR 0 2
4225: PPUSH
4226: LD_VAR 0 6
4230: PPUSH
4231: CALL_OW 115
// end ;
4235: GO 4166
4237: POP
4238: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4239: LD_INT 22
4241: PUSH
4242: LD_INT 5
4244: PUSH
4245: EMPTY
4246: LIST
4247: LIST
4248: PUSH
4249: LD_INT 25
4251: PUSH
4252: LD_INT 11
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PPUSH
4263: CALL_OW 69
4267: PUSH
4268: LD_INT 0
4270: EQUAL
4271: PUSH
4272: LD_INT 22
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: PUSH
4287: LD_INT 0
4289: EQUAL
4290: OR
4291: IFFALSE 4023
// end ; end_of_file
4293: LD_VAR 0 1
4297: RET
// every 1 do
4298: GO 4300
4300: DISABLE
// begin InGameOn ;
4301: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_INT 19
4310: PPUSH
4311: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4315: LD_EXP 11
4319: PPUSH
4320: CALL_OW 87
// wait ( 0 0$3 ) ;
4324: LD_INT 105
4326: PPUSH
4327: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4331: LD_EXP 1
4335: PPUSH
4336: CALL_OW 310
4340: PPUSH
4341: CALL_OW 85
// Wait ( 0 0$1 ) ;
4345: LD_INT 35
4347: PPUSH
4348: CALL_OW 67
// if IsOk ( Gary ) then
4352: LD_EXP 10
4356: PPUSH
4357: CALL_OW 302
4361: IFFALSE 4399
// begin Say ( Gary , D2-Gary-1 ) ;
4363: LD_EXP 10
4367: PPUSH
4368: LD_STRING D2-Gary-1
4370: PPUSH
4371: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4375: LD_EXP 1
4379: PPUSH
4380: LD_STRING D2-JMM-1
4382: PPUSH
4383: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4387: LD_EXP 10
4391: PPUSH
4392: LD_STRING D2-Gary-2
4394: PPUSH
4395: CALL_OW 88
// end ; InGameOff ;
4399: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4403: LD_STRING M1
4405: PPUSH
4406: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4410: LD_INT 38
4412: PPUSH
4413: LD_INT 1
4415: PPUSH
4416: LD_INT 100
4418: PPUSH
4419: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4423: LD_INT 47
4425: PPUSH
4426: LD_INT 1
4428: PPUSH
4429: LD_INT 50
4431: PPUSH
4432: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4436: LD_INT 47
4438: PPUSH
4439: LD_INT 3
4441: PPUSH
4442: LD_INT 50
4444: PPUSH
4445: CALL_OW 291
// SaveForQuickRestart ;
4449: CALL_OW 22
// end ;
4453: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4454: LD_EXP 1
4458: PPUSH
4459: LD_EXP 11
4463: PPUSH
4464: CALL_OW 296
4468: PUSH
4469: LD_INT 15
4471: LESS
4472: IFFALSE 4938
4474: GO 4476
4476: DISABLE
// begin InGameOn ;
4477: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4481: LD_EXP 1
4485: PPUSH
4486: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4490: LD_EXP 1
4494: PPUSH
4495: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4499: LD_EXP 1
4503: PPUSH
4504: LD_EXP 11
4508: PPUSH
4509: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4513: LD_INT 35
4515: PPUSH
4516: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4520: LD_EXP 11
4524: PUSH
4525: LD_EXP 13
4529: PUSH
4530: LD_EXP 12
4534: PUSH
4535: LD_EXP 14
4539: PUSH
4540: LD_EXP 8
4544: PUSH
4545: EMPTY
4546: LIST
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: PPUSH
4552: LD_EXP 1
4556: PPUSH
4557: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4561: LD_EXP 1
4565: PPUSH
4566: LD_EXP 11
4570: PPUSH
4571: CALL_OW 296
4575: PUSH
4576: LD_INT 5
4578: LESS
4579: IFFALSE 4513
// ComTurnUnit ( JMM , Simms ) ;
4581: LD_EXP 1
4585: PPUSH
4586: LD_EXP 11
4590: PPUSH
4591: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4595: LD_EXP 11
4599: PUSH
4600: LD_EXP 13
4604: PUSH
4605: LD_EXP 12
4609: PUSH
4610: LD_EXP 14
4614: PUSH
4615: EMPTY
4616: LIST
4617: LIST
4618: LIST
4619: LIST
4620: PPUSH
4621: LD_EXP 1
4625: PPUSH
4626: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4630: LD_EXP 1
4634: PUSH
4635: LD_EXP 11
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4648: LD_EXP 11
4652: PPUSH
4653: LD_STRING D2a-Sim-1
4655: PPUSH
4656: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4660: LD_EXP 1
4664: PPUSH
4665: LD_STRING D2a-JMM-1
4667: PPUSH
4668: CALL_OW 88
// if IsOk ( Joan ) then
4672: LD_EXP 13
4676: PPUSH
4677: CALL_OW 302
4681: IFFALSE 4733
// begin ComTurnUnit ( JMM , Joan ) ;
4683: LD_EXP 1
4687: PPUSH
4688: LD_EXP 13
4692: PPUSH
4693: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4697: LD_EXP 13
4701: PPUSH
4702: LD_STRING D2b-Joan-1
4704: PPUSH
4705: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4709: LD_EXP 1
4713: PPUSH
4714: LD_STRING D2b-JMM-1
4716: PPUSH
4717: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4721: LD_EXP 13
4725: PPUSH
4726: LD_STRING D2b-Joan-2
4728: PPUSH
4729: CALL_OW 88
// end ; if IsOk ( Denis ) then
4733: LD_EXP 12
4737: PPUSH
4738: CALL_OW 302
4742: IFFALSE 4770
// begin ComTurnUnit ( JMM , Denis ) ;
4744: LD_EXP 1
4748: PPUSH
4749: LD_EXP 12
4753: PPUSH
4754: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4758: LD_EXP 12
4762: PPUSH
4763: LD_STRING D2c-Den-1
4765: PPUSH
4766: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4770: LD_EXP 8
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4848
// begin repeat wait ( 0 0$1 ) ;
4781: LD_INT 35
4783: PPUSH
4784: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4788: LD_EXP 8
4792: PPUSH
4793: LD_EXP 1
4797: PPUSH
4798: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4802: LD_EXP 1
4806: PPUSH
4807: LD_EXP 8
4811: PPUSH
4812: CALL_OW 296
4816: PUSH
4817: LD_INT 5
4819: LESS
4820: IFFALSE 4781
// ComTurnUnit ( JMM , Kikuchi ) ;
4822: LD_EXP 1
4826: PPUSH
4827: LD_EXP 8
4831: PPUSH
4832: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4836: LD_EXP 8
4840: PPUSH
4841: LD_STRING D3b-Yam-1
4843: PPUSH
4844: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4848: LD_EXP 14
4852: PPUSH
4853: CALL_OW 302
4857: IFFALSE 4897
// begin ComTurnUnit ( JMM , Khatam ) ;
4859: LD_EXP 1
4863: PPUSH
4864: LD_EXP 14
4868: PPUSH
4869: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4873: LD_EXP 1
4877: PPUSH
4878: LD_STRING D2c-JMM-1
4880: PPUSH
4881: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4885: LD_EXP 14
4889: PPUSH
4890: LD_STRING D2c-Khat-1
4892: PPUSH
4893: CALL_OW 88
// end ; InGameOff ;
4897: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4901: LD_INT 22
4903: PUSH
4904: LD_INT 4
4906: PUSH
4907: EMPTY
4908: LIST
4909: LIST
4910: PPUSH
4911: CALL_OW 69
4915: PPUSH
4916: LD_INT 1
4918: PPUSH
4919: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4923: LD_STRING M1a
4925: PPUSH
4926: CALL_OW 337
// joinEpsilon = 1 ;
4930: LD_ADDR_EXP 29
4934: PUSH
4935: LD_INT 1
4937: ST_TO_ADDR
// end ;
4938: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4939: LD_INT 38
4941: PPUSH
4942: LD_INT 1
4944: PPUSH
4945: CALL_OW 289
4949: PUSH
4950: LD_INT 0
4952: EQUAL
4953: PUSH
4954: LD_INT 47
4956: PPUSH
4957: LD_INT 1
4959: PPUSH
4960: CALL_OW 289
4964: PUSH
4965: LD_INT 0
4967: EQUAL
4968: AND
4969: PUSH
4970: LD_INT 47
4972: PPUSH
4973: LD_INT 2
4975: PPUSH
4976: CALL_OW 289
4980: PUSH
4981: LD_INT 0
4983: EQUAL
4984: AND
4985: IFFALSE 5010
4987: GO 4989
4989: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4990: LD_INT 38
4992: PUSH
4993: LD_INT 47
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: PPUSH
5000: LD_INT 62
5002: PPUSH
5003: LD_INT 6
5005: PPUSH
5006: CALL_OW 111
5010: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5011: LD_EXP 61
5015: PUSH
5016: LD_INT 1
5018: EQUAL
5019: IFFALSE 6151
5021: GO 5023
5023: DISABLE
5024: LD_INT 0
5026: PPUSH
5027: PPUSH
5028: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5029: LD_ADDR_VAR 0 1
5033: PUSH
5034: LD_INT 22
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 25
5046: PUSH
5047: LD_INT 4
5049: PUSH
5050: EMPTY
5051: LIST
5052: LIST
5053: PUSH
5054: LD_INT 26
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: EMPTY
5065: LIST
5066: LIST
5067: LIST
5068: PPUSH
5069: CALL_OW 69
5073: PUSH
5074: LD_EXP 1
5078: PUSH
5079: LD_EXP 2
5083: PUSH
5084: LD_EXP 3
5088: PUSH
5089: LD_EXP 4
5093: PUSH
5094: LD_EXP 5
5098: PUSH
5099: LD_EXP 6
5103: PUSH
5104: LD_EXP 7
5108: PUSH
5109: LD_EXP 8
5113: PUSH
5114: LD_EXP 9
5118: PUSH
5119: LD_EXP 10
5123: PUSH
5124: LD_EXP 11
5128: PUSH
5129: LD_EXP 12
5133: PUSH
5134: LD_EXP 13
5138: PUSH
5139: LD_EXP 14
5143: PUSH
5144: LD_EXP 15
5148: PUSH
5149: LD_EXP 16
5153: PUSH
5154: LD_EXP 17
5158: PUSH
5159: LD_EXP 18
5163: PUSH
5164: LD_EXP 19
5168: PUSH
5169: LD_EXP 24
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: LIST
5178: LIST
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: LIST
5186: LIST
5187: LIST
5188: LIST
5189: LIST
5190: LIST
5191: LIST
5192: LIST
5193: LIST
5194: LIST
5195: DIFF
5196: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5197: LD_ADDR_VAR 0 2
5201: PUSH
5202: LD_INT 22
5204: PUSH
5205: LD_INT 1
5207: PUSH
5208: EMPTY
5209: LIST
5210: LIST
5211: PUSH
5212: LD_INT 26
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 2
5224: PUSH
5225: LD_INT 25
5227: PUSH
5228: LD_INT 1
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PUSH
5235: LD_INT 25
5237: PUSH
5238: LD_INT 2
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: PUSH
5245: LD_INT 25
5247: PUSH
5248: LD_INT 3
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PUSH
5271: LD_EXP 1
5275: PUSH
5276: LD_EXP 2
5280: PUSH
5281: LD_EXP 3
5285: PUSH
5286: LD_EXP 4
5290: PUSH
5291: LD_EXP 5
5295: PUSH
5296: LD_EXP 6
5300: PUSH
5301: LD_EXP 7
5305: PUSH
5306: LD_EXP 8
5310: PUSH
5311: LD_EXP 9
5315: PUSH
5316: LD_EXP 10
5320: PUSH
5321: LD_EXP 11
5325: PUSH
5326: LD_EXP 12
5330: PUSH
5331: LD_EXP 13
5335: PUSH
5336: LD_EXP 14
5340: PUSH
5341: LD_EXP 15
5345: PUSH
5346: LD_EXP 16
5350: PUSH
5351: LD_EXP 17
5355: PUSH
5356: LD_EXP 18
5360: PUSH
5361: LD_EXP 19
5365: PUSH
5366: LD_EXP 24
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: LIST
5378: LIST
5379: LIST
5380: LIST
5381: LIST
5382: LIST
5383: LIST
5384: LIST
5385: LIST
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: LIST
5391: LIST
5392: DIFF
5393: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5394: LD_EXP 10
5398: PUSH
5399: LD_VAR 0 2
5403: OR
5404: PUSH
5405: LD_EXP 17
5409: PUSH
5410: LD_VAR 0 1
5414: OR
5415: AND
5416: IFFALSE 5635
// begin DialogueOn ;
5418: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5422: LD_EXP 17
5426: PPUSH
5427: CALL_OW 302
5431: IFFALSE 5447
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5433: LD_EXP 17
5437: PPUSH
5438: LD_STRING D3-Sci1-1
5440: PPUSH
5441: CALL_OW 88
5445: GO 5459
// Say ( tmp1 , D3-Sci1-1 ) ;
5447: LD_VAR 0 1
5451: PPUSH
5452: LD_STRING D3-Sci1-1
5454: PPUSH
5455: CALL_OW 88
// if IsOk ( Gary ) then
5459: LD_EXP 10
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5484
// Say ( Gary , D3-Gary-1 ) else
5470: LD_EXP 10
5474: PPUSH
5475: LD_STRING D3-Gary-1
5477: PPUSH
5478: CALL_OW 88
5482: GO 5496
// Say ( tmp2 , D3-Gary-1 ) ;
5484: LD_VAR 0 2
5488: PPUSH
5489: LD_STRING D3-Gary-1
5491: PPUSH
5492: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5496: LD_EXP 17
5500: PPUSH
5501: CALL_OW 302
5505: IFFALSE 5521
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5507: LD_EXP 17
5511: PPUSH
5512: LD_STRING D3-Sci1-2
5514: PPUSH
5515: CALL_OW 88
5519: GO 5533
// Say ( tmp1 , D3-Sci1-2 ) ;
5521: LD_VAR 0 1
5525: PPUSH
5526: LD_STRING D3-Sci1-2
5528: PPUSH
5529: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5533: LD_EXP 1
5537: PPUSH
5538: LD_STRING D3-JMM-2
5540: PPUSH
5541: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5545: LD_EXP 17
5549: PPUSH
5550: CALL_OW 302
5554: IFFALSE 5570
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5556: LD_EXP 17
5560: PPUSH
5561: LD_STRING D3-Sci1-3
5563: PPUSH
5564: CALL_OW 88
5568: GO 5582
// Say ( tmp1 , D3-Sci1-3 ) ;
5570: LD_VAR 0 1
5574: PPUSH
5575: LD_STRING D3-Sci1-3
5577: PPUSH
5578: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5582: LD_EXP 1
5586: PPUSH
5587: LD_STRING D3-JMM-3
5589: PPUSH
5590: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5594: LD_EXP 17
5598: PPUSH
5599: CALL_OW 302
5603: IFFALSE 5619
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5605: LD_EXP 17
5609: PPUSH
5610: LD_STRING D3-Sci1-4
5612: PPUSH
5613: CALL_OW 88
5617: GO 5631
// Say ( tmp1 , D3-Sci1-4 ) ;
5619: LD_VAR 0 1
5623: PPUSH
5624: LD_STRING D3-Sci1-4
5626: PPUSH
5627: CALL_OW 88
// DialogueOff ;
5631: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5635: LD_INT 12
5637: PPUSH
5638: LD_INT 1
5640: PPUSH
5641: LD_INT 1
5643: PPUSH
5644: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5648: LD_INT 32
5650: PPUSH
5651: LD_INT 1
5653: PPUSH
5654: LD_INT 1
5656: PPUSH
5657: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5661: LD_INT 12
5663: PPUSH
5664: LD_INT 1
5666: PPUSH
5667: LD_INT 1
5669: PPUSH
5670: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5674: LD_INT 33
5676: PPUSH
5677: LD_INT 1
5679: PPUSH
5680: LD_INT 1
5682: PPUSH
5683: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5687: LD_STRING M2
5689: PPUSH
5690: CALL_OW 337
// wait ( 3 3$0 ) ;
5694: LD_INT 6300
5696: PPUSH
5697: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5701: LD_INT 35
5703: PPUSH
5704: CALL_OW 67
// until not InBattle ( 1 ) ;
5708: LD_INT 1
5710: PPUSH
5711: CALL_OW 463
5715: NOT
5716: IFFALSE 5701
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5718: LD_EXP 11
5722: PPUSH
5723: CALL_OW 302
5727: PUSH
5728: LD_EXP 17
5732: PPUSH
5733: CALL_OW 302
5737: AND
5738: IFFALSE 5907
// begin DialogueOn ;
5740: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5744: LD_EXP 11
5748: PPUSH
5749: LD_STRING D3a-Sim-1
5751: PPUSH
5752: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5756: LD_EXP 17
5760: PPUSH
5761: LD_STRING D3a-Sci1-1
5763: PPUSH
5764: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5768: LD_EXP 11
5772: PPUSH
5773: LD_STRING D3a-Sim-2
5775: PPUSH
5776: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5780: LD_EXP 17
5784: PPUSH
5785: LD_STRING D3a-Sci1-2
5787: PPUSH
5788: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5792: LD_EXP 11
5796: PPUSH
5797: LD_STRING D3a-Sim-3
5799: PPUSH
5800: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5804: LD_EXP 17
5808: PPUSH
5809: LD_STRING D3a-Sci1-3
5811: PPUSH
5812: CALL_OW 88
// if IsOK ( Joan ) then
5816: LD_EXP 13
5820: PPUSH
5821: CALL_OW 302
5825: IFFALSE 5841
// Say ( Simms , D3a-Sim-4 ) else
5827: LD_EXP 11
5831: PPUSH
5832: LD_STRING D3a-Sim-4
5834: PPUSH
5835: CALL_OW 88
5839: GO 5853
// Say ( Simms , D3a-Sim-4a ) ;
5841: LD_EXP 11
5845: PPUSH
5846: LD_STRING D3a-Sim-4a
5848: PPUSH
5849: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5853: LD_EXP 17
5857: PPUSH
5858: LD_STRING D3a-Sci1-4
5860: PPUSH
5861: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5865: LD_EXP 11
5869: PPUSH
5870: LD_STRING D3a-Sim-5
5872: PPUSH
5873: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5877: LD_EXP 17
5881: PPUSH
5882: LD_STRING D3a-Sci1-5
5884: PPUSH
5885: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5889: LD_EXP 11
5893: PPUSH
5894: LD_STRING D3a-Sim-6
5896: PPUSH
5897: CALL_OW 88
// DialogueOff ;
5901: CALL_OW 7
// end else
5905: GO 6151
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5907: LD_ADDR_VAR 0 3
5911: PUSH
5912: LD_INT 22
5914: PUSH
5915: LD_INT 1
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: PUSH
5922: LD_INT 25
5924: PUSH
5925: LD_INT 4
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PPUSH
5936: CALL_OW 69
5940: PUSH
5941: LD_EXP 11
5945: PUSH
5946: LD_EXP 14
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: DIFF
5955: ST_TO_ADDR
// if tmp3 > 0 then
5956: LD_VAR 0 3
5960: PUSH
5961: LD_INT 0
5963: GREATER
5964: IFFALSE 6151
// begin DialogueOn ;
5966: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5970: LD_EXP 11
5974: PPUSH
5975: LD_STRING D3a-Sim-1
5977: PPUSH
5978: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5982: LD_VAR 0 3
5986: PUSH
5987: LD_INT 1
5989: ARRAY
5990: PPUSH
5991: LD_STRING D3a-Sci1-1
5993: PPUSH
5994: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5998: LD_EXP 11
6002: PPUSH
6003: LD_STRING D3a-Sim-2
6005: PPUSH
6006: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6010: LD_VAR 0 3
6014: PUSH
6015: LD_INT 1
6017: ARRAY
6018: PPUSH
6019: LD_STRING D3a-Sci1-2
6021: PPUSH
6022: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6026: LD_EXP 11
6030: PPUSH
6031: LD_STRING D3a-Sim-3
6033: PPUSH
6034: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6038: LD_VAR 0 3
6042: PUSH
6043: LD_INT 1
6045: ARRAY
6046: PPUSH
6047: LD_STRING D3a-Sci1-3
6049: PPUSH
6050: CALL_OW 88
// if IsOK ( Joan ) then
6054: LD_EXP 13
6058: PPUSH
6059: CALL_OW 302
6063: IFFALSE 6079
// Say ( Simms , D3a-Sim-4 ) else
6065: LD_EXP 11
6069: PPUSH
6070: LD_STRING D3a-Sim-4
6072: PPUSH
6073: CALL_OW 88
6077: GO 6091
// Say ( Simms , D3a-Sim-4a ) ;
6079: LD_EXP 11
6083: PPUSH
6084: LD_STRING D3a-Sim-4a
6086: PPUSH
6087: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6091: LD_VAR 0 3
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_STRING D3a-Sci1-4
6102: PPUSH
6103: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6107: LD_EXP 11
6111: PPUSH
6112: LD_STRING D3a-Sim-5
6114: PPUSH
6115: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6119: LD_VAR 0 3
6123: PUSH
6124: LD_INT 1
6126: ARRAY
6127: PPUSH
6128: LD_STRING D3a-Sci1-5
6130: PPUSH
6131: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6135: LD_EXP 11
6139: PPUSH
6140: LD_STRING D3a-Sim-6
6142: PPUSH
6143: CALL_OW 88
// DialogueOff ;
6147: CALL_OW 7
// end ; end ; end ;
6151: PPOPN 3
6153: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6154: LD_EXP 29
6158: PUSH
6159: LD_INT 1
6161: EQUAL
6162: IFFALSE 6482
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6170: LD_EXP 18
6174: PPUSH
6175: LD_STRING D4-FSol1-1
6177: PPUSH
6178: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6182: LD_STRING M3
6184: PPUSH
6185: CALL_OW 337
// PrepareRussians ;
6189: CALL 2702 0 0
// rnd = Rand ( 1 , 100 ) ;
6193: LD_ADDR_VAR 0 1
6197: PUSH
6198: LD_INT 1
6200: PPUSH
6201: LD_INT 100
6203: PPUSH
6204: CALL_OW 12
6208: ST_TO_ADDR
// if difficulty = 1 then
6209: LD_OWVAR 67
6213: PUSH
6214: LD_INT 1
6216: EQUAL
6217: IFFALSE 6300
// begin if rnd > 0 and rnd < 51 then
6219: LD_VAR 0 1
6223: PUSH
6224: LD_INT 0
6226: GREATER
6227: PUSH
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 51
6235: LESS
6236: AND
6237: IFFALSE 6246
// BuildRussianBase ( 2 ) ;
6239: LD_INT 2
6241: PPUSH
6242: CALL 10360 0 1
// if rnd > 50 and rnd < 81 then
6246: LD_VAR 0 1
6250: PUSH
6251: LD_INT 50
6253: GREATER
6254: PUSH
6255: LD_VAR 0 1
6259: PUSH
6260: LD_INT 81
6262: LESS
6263: AND
6264: IFFALSE 6273
// BuildRussianBase ( 1 ) ;
6266: LD_INT 1
6268: PPUSH
6269: CALL 10360 0 1
// if rnd > 80 and rnd < 101 then
6273: LD_VAR 0 1
6277: PUSH
6278: LD_INT 80
6280: GREATER
6281: PUSH
6282: LD_VAR 0 1
6286: PUSH
6287: LD_INT 101
6289: LESS
6290: AND
6291: IFFALSE 6300
// BuildRussianBase ( 3 ) ;
6293: LD_INT 3
6295: PPUSH
6296: CALL 10360 0 1
// end ; if difficulty = 2 then
6300: LD_OWVAR 67
6304: PUSH
6305: LD_INT 2
6307: EQUAL
6308: IFFALSE 6391
// begin if rnd > 0 and rnd < 61 then
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 0
6317: GREATER
6318: PUSH
6319: LD_VAR 0 1
6323: PUSH
6324: LD_INT 61
6326: LESS
6327: AND
6328: IFFALSE 6337
// BuildRussianBase ( 2 ) ;
6330: LD_INT 2
6332: PPUSH
6333: CALL 10360 0 1
// if rnd > 60 and rnd < 81 then
6337: LD_VAR 0 1
6341: PUSH
6342: LD_INT 60
6344: GREATER
6345: PUSH
6346: LD_VAR 0 1
6350: PUSH
6351: LD_INT 81
6353: LESS
6354: AND
6355: IFFALSE 6364
// BuildRussianBase ( 1 ) ;
6357: LD_INT 1
6359: PPUSH
6360: CALL 10360 0 1
// if rnd > 80 and rnd < 101 then
6364: LD_VAR 0 1
6368: PUSH
6369: LD_INT 80
6371: GREATER
6372: PUSH
6373: LD_VAR 0 1
6377: PUSH
6378: LD_INT 101
6380: LESS
6381: AND
6382: IFFALSE 6391
// BuildRussianBase ( 3 ) ;
6384: LD_INT 3
6386: PPUSH
6387: CALL 10360 0 1
// end ; if difficulty = 3 then
6391: LD_OWVAR 67
6395: PUSH
6396: LD_INT 3
6398: EQUAL
6399: IFFALSE 6482
// begin if rnd > 0 and rnd < 71 then
6401: LD_VAR 0 1
6405: PUSH
6406: LD_INT 0
6408: GREATER
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 71
6417: LESS
6418: AND
6419: IFFALSE 6428
// BuildRussianBase ( 3 ) ;
6421: LD_INT 3
6423: PPUSH
6424: CALL 10360 0 1
// if rnd > 70 and rnd < 81 then
6428: LD_VAR 0 1
6432: PUSH
6433: LD_INT 70
6435: GREATER
6436: PUSH
6437: LD_VAR 0 1
6441: PUSH
6442: LD_INT 81
6444: LESS
6445: AND
6446: IFFALSE 6455
// BuildRussianBase ( 2 ) ;
6448: LD_INT 2
6450: PPUSH
6451: CALL 10360 0 1
// if rnd > 80 and rnd < 101 then
6455: LD_VAR 0 1
6459: PUSH
6460: LD_INT 80
6462: GREATER
6463: PUSH
6464: LD_VAR 0 1
6468: PUSH
6469: LD_INT 101
6471: LESS
6472: AND
6473: IFFALSE 6482
// BuildRussianBase ( 1 ) ;
6475: LD_INT 1
6477: PPUSH
6478: CALL 10360 0 1
// end ; end ;
6482: PPOPN 1
6484: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6485: LD_INT 54
6487: PPUSH
6488: LD_INT 1
6490: PPUSH
6491: CALL_OW 321
6495: PUSH
6496: LD_INT 2
6498: EQUAL
6499: PUSH
6500: LD_INT 21
6502: PPUSH
6503: LD_INT 1
6505: PPUSH
6506: CALL_OW 321
6510: PUSH
6511: LD_INT 2
6513: EQUAL
6514: OR
6515: PUSH
6516: LD_INT 22
6518: PPUSH
6519: LD_INT 1
6521: PPUSH
6522: CALL_OW 321
6526: PUSH
6527: LD_INT 2
6529: EQUAL
6530: OR
6531: IFFALSE 6843
6533: GO 6535
6535: DISABLE
6536: LD_INT 0
6538: PPUSH
6539: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6540: LD_EXP 17
6544: PPUSH
6545: CALL_OW 302
6549: IFFALSE 6563
// tmp := DeltaDoctor else
6551: LD_ADDR_VAR 0 2
6555: PUSH
6556: LD_EXP 17
6560: ST_TO_ADDR
6561: GO 6573
// tmp := Denis ;
6563: LD_ADDR_VAR 0 2
6567: PUSH
6568: LD_EXP 12
6572: ST_TO_ADDR
// if tmp then
6573: LD_VAR 0 2
6577: IFFALSE 6671
// begin DialogueOn ;
6579: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6583: LD_EXP 1
6587: PPUSH
6588: LD_STRING D6-JMM-1
6590: PPUSH
6591: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6595: LD_VAR 0 2
6599: PPUSH
6600: LD_STRING D6-Sci1-1
6602: PPUSH
6603: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6607: LD_EXP 1
6611: PPUSH
6612: LD_STRING D6-JMM-2
6614: PPUSH
6615: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6619: LD_VAR 0 2
6623: PPUSH
6624: LD_STRING D6-Sci1-2
6626: PPUSH
6627: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6631: LD_EXP 1
6635: PPUSH
6636: LD_STRING D6-JMM-3
6638: PPUSH
6639: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6643: LD_VAR 0 2
6647: PPUSH
6648: LD_STRING D6-Sci1-3
6650: PPUSH
6651: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6655: LD_EXP 1
6659: PPUSH
6660: LD_STRING D6-JMM-4
6662: PPUSH
6663: CALL_OW 88
// DialogueOff ;
6667: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6671: LD_INT 1050
6673: PPUSH
6674: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6678: LD_EXP 49
6682: PUSH
6683: LD_INT 0
6685: EQUAL
6686: PUSH
6687: LD_EXP 14
6691: PPUSH
6692: CALL_OW 302
6696: AND
6697: IFFALSE 6755
// begin DialogueOn ;
6699: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6703: LD_EXP 27
6707: PPUSH
6708: LD_STRING D5-Ar1-1
6710: PPUSH
6711: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6715: LD_EXP 26
6719: PPUSH
6720: LD_STRING D5-Diet-1
6722: PPUSH
6723: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6727: LD_EXP 27
6731: PPUSH
6732: LD_STRING D5-Ar1-2
6734: PPUSH
6735: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6739: LD_EXP 26
6743: PPUSH
6744: LD_STRING D5-Diet-2
6746: PPUSH
6747: CALL_OW 88
// DialogueOff ;
6751: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6755: LD_INT 2100
6757: PUSH
6758: LD_INT 3150
6760: PUSH
6761: LD_INT 4200
6763: PUSH
6764: LD_INT 5250
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PUSH
6773: LD_INT 1
6775: PPUSH
6776: LD_INT 4
6778: PPUSH
6779: CALL_OW 12
6783: ARRAY
6784: PPUSH
6785: CALL_OW 67
// if arabianTrait = 0 then
6789: LD_EXP 49
6793: PUSH
6794: LD_INT 0
6796: EQUAL
6797: IFFALSE 6843
// begin arabianTrait = 1 ;
6799: LD_ADDR_EXP 49
6803: PUSH
6804: LD_INT 1
6806: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6807: LD_INT 2
6809: PPUSH
6810: LD_INT 3
6812: PPUSH
6813: LD_INT 1
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6823: LD_INT 2
6825: PPUSH
6826: LD_INT 6
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 80
// PrepareArabianTrait ;
6839: CALL 6846 0 0
// end ; end ;
6843: PPOPN 2
6845: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6846: LD_INT 0
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6854: LD_INT 22
6856: PUSH
6857: LD_INT 2
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 25
6866: PUSH
6867: LD_INT 4
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 69
6882: PPUSH
6883: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6887: LD_INT 22
6889: PUSH
6890: LD_INT 2
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: LD_INT 25
6899: PUSH
6900: LD_INT 3
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PPUSH
6911: CALL_OW 69
6915: PPUSH
6916: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6920: LD_EXP 26
6924: PPUSH
6925: LD_INT 8
6927: PPUSH
6928: CALL_OW 336
// wait ( 0 0$3 ) ;
6932: LD_INT 105
6934: PPUSH
6935: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6939: LD_INT 76
6941: PPUSH
6942: LD_INT 19
6944: PPUSH
6945: CALL_OW 84
// DialogueOn ;
6949: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6953: LD_INT 22
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 26
6965: PUSH
6966: LD_INT 1
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: LD_INT 2
6975: PUSH
6976: LD_INT 25
6978: PUSH
6979: LD_INT 1
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PUSH
6986: LD_INT 25
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 25
6998: PUSH
6999: LD_INT 3
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: LD_INT 25
7008: PUSH
7009: LD_INT 4
7011: PUSH
7012: EMPTY
7013: LIST
7014: LIST
7015: PUSH
7016: LD_INT 25
7018: PUSH
7019: LD_INT 5
7021: PUSH
7022: EMPTY
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: LIST
7031: LIST
7032: LIST
7033: PUSH
7034: EMPTY
7035: LIST
7036: LIST
7037: LIST
7038: PPUSH
7039: CALL_OW 69
7043: PPUSH
7044: LD_STRING D8-Sol1-1
7046: PPUSH
7047: LD_STRING D8-Sol1-1
7049: PPUSH
7050: CALL 9691 0 3
// if IsOK ( DeltaDoctor ) then
7054: LD_EXP 17
7058: PPUSH
7059: CALL_OW 302
7063: IFFALSE 7079
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7065: LD_EXP 17
7069: PPUSH
7070: LD_STRING D8-Sci1-1
7072: PPUSH
7073: CALL_OW 88
7077: GO 7180
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7079: LD_INT 22
7081: PUSH
7082: LD_INT 1
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PUSH
7089: LD_INT 26
7091: PUSH
7092: LD_INT 1
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 2
7101: PUSH
7102: LD_INT 25
7104: PUSH
7105: LD_INT 1
7107: PUSH
7108: EMPTY
7109: LIST
7110: LIST
7111: PUSH
7112: LD_INT 25
7114: PUSH
7115: LD_INT 2
7117: PUSH
7118: EMPTY
7119: LIST
7120: LIST
7121: PUSH
7122: LD_INT 25
7124: PUSH
7125: LD_INT 3
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PUSH
7132: LD_INT 25
7134: PUSH
7135: LD_INT 4
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 25
7144: PUSH
7145: LD_INT 5
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: PPUSH
7165: CALL_OW 69
7169: PPUSH
7170: LD_STRING D8-Sol1-1
7172: PPUSH
7173: LD_STRING D8-Sol1-1
7175: PPUSH
7176: CALL 9691 0 3
// Say ( JMM , D8-JMM-1 ) ;
7180: LD_EXP 1
7184: PPUSH
7185: LD_STRING D8-JMM-1
7187: PPUSH
7188: CALL_OW 88
// DialogueOff ;
7192: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7196: LD_INT 2
7198: PPUSH
7199: LD_INT 2
7201: PPUSH
7202: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7206: LD_INT 1
7208: PPUSH
7209: LD_INT 2
7211: PPUSH
7212: LD_INT 2
7214: PPUSH
7215: LD_INT 1
7217: PPUSH
7218: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7222: LD_INT 3
7224: PPUSH
7225: LD_INT 2
7227: PPUSH
7228: LD_INT 1
7230: PPUSH
7231: LD_INT 1
7233: PPUSH
7234: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7238: LD_EXP 26
7242: PPUSH
7243: LD_INT 1
7245: PPUSH
7246: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7250: LD_STRING M4
7252: PPUSH
7253: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7257: LD_ADDR_VAR 0 5
7261: PUSH
7262: LD_INT 22
7264: PUSH
7265: LD_INT 2
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: LD_INT 21
7274: PUSH
7275: LD_INT 1
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: LD_INT 2
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 1
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 25
7297: PUSH
7298: LD_INT 8
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 25
7307: PUSH
7308: LD_INT 15
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: PUSH
7321: EMPTY
7322: LIST
7323: LIST
7324: LIST
7325: PPUSH
7326: CALL_OW 69
7330: PUSH
7331: LD_EXP 26
7335: PUSH
7336: EMPTY
7337: LIST
7338: DIFF
7339: ST_TO_ADDR
// ComExitBuilding ( arSoldiers ) ;
7340: LD_VAR 0 5
7344: PPUSH
7345: CALL_OW 122
// wait ( 0 0$1 ) ;
7349: LD_INT 35
7351: PPUSH
7352: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 77 , 10 ) ;
7356: LD_VAR 0 5
7360: PPUSH
7361: LD_INT 77
7363: PPUSH
7364: LD_INT 10
7366: PPUSH
7367: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7371: LD_VAR 0 5
7375: PPUSH
7376: LD_INT 82
7378: PPUSH
7379: LD_INT 5
7381: PPUSH
7382: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7386: LD_VAR 0 5
7390: PPUSH
7391: LD_INT 95
7393: PPUSH
7394: LD_INT 12
7396: PPUSH
7397: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7401: LD_VAR 0 5
7405: PPUSH
7406: LD_INT 102
7408: PPUSH
7409: LD_INT 11
7411: PPUSH
7412: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7416: LD_VAR 0 5
7420: PPUSH
7421: LD_INT 116
7423: PPUSH
7424: LD_INT 15
7426: PPUSH
7427: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7431: LD_VAR 0 5
7435: PPUSH
7436: LD_INT 140
7438: PPUSH
7439: LD_INT 25
7441: PPUSH
7442: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7446: LD_VAR 0 5
7450: PPUSH
7451: LD_INT 160
7453: PPUSH
7454: LD_INT 56
7456: PPUSH
7457: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7461: LD_VAR 0 5
7465: PPUSH
7466: LD_INT 189
7468: PPUSH
7469: LD_INT 79
7471: PPUSH
7472: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) ;
7476: LD_ADDR_VAR 0 6
7480: PUSH
7481: LD_INT 22
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: LD_INT 21
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 2
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: LD_INT 25
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 4
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 16
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: LIST
7555: PPUSH
7556: CALL_OW 69
7560: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7561: LD_ADDR_VAR 0 6
7565: PUSH
7566: LD_VAR 0 6
7570: PUSH
7571: LD_EXP 26
7575: ADD
7576: ST_TO_ADDR
// wait ( 0 0$20 ) ;
7577: LD_INT 700
7579: PPUSH
7580: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7584: LD_VAR 0 6
7588: PPUSH
7589: CALL_OW 122
// wait ( 0 0$1 ) ;
7593: LD_INT 35
7595: PPUSH
7596: CALL_OW 67
// AddComMoveXY ( arCivilian , 77 , 10 ) ;
7600: LD_VAR 0 6
7604: PPUSH
7605: LD_INT 77
7607: PPUSH
7608: LD_INT 10
7610: PPUSH
7611: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7615: LD_VAR 0 6
7619: PPUSH
7620: LD_INT 82
7622: PPUSH
7623: LD_INT 5
7625: PPUSH
7626: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7630: LD_VAR 0 6
7634: PPUSH
7635: LD_INT 95
7637: PPUSH
7638: LD_INT 12
7640: PPUSH
7641: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7645: LD_VAR 0 6
7649: PPUSH
7650: LD_INT 102
7652: PPUSH
7653: LD_INT 11
7655: PPUSH
7656: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7660: LD_VAR 0 6
7664: PPUSH
7665: LD_INT 116
7667: PPUSH
7668: LD_INT 15
7670: PPUSH
7671: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7675: LD_VAR 0 6
7679: PPUSH
7680: LD_INT 140
7682: PPUSH
7683: LD_INT 25
7685: PPUSH
7686: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7690: LD_VAR 0 6
7694: PPUSH
7695: LD_INT 160
7697: PPUSH
7698: LD_INT 56
7700: PPUSH
7701: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7705: LD_VAR 0 6
7709: PPUSH
7710: LD_INT 189
7712: PPUSH
7713: LD_INT 79
7715: PPUSH
7716: CALL_OW 171
// arabianAttackersAI = 1 ;
7720: LD_ADDR_EXP 46
7724: PUSH
7725: LD_INT 1
7727: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7728: LD_INT 350
7730: PPUSH
7731: CALL_OW 67
// if IsOk ( Gary ) then
7735: LD_EXP 10
7739: PPUSH
7740: CALL_OW 302
7744: IFFALSE 7758
// Say ( Gary , D8a-Gary-1 ) ;
7746: LD_EXP 10
7750: PPUSH
7751: LD_STRING D8a-Gary-1
7753: PPUSH
7754: CALL_OW 88
// wait ( 0 0$5 ) ;
7758: LD_INT 175
7760: PPUSH
7761: CALL_OW 67
// if IsOK ( Khatam ) then
7765: LD_EXP 14
7769: PPUSH
7770: CALL_OW 302
7774: IFFALSE 8310
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7776: LD_ADDR_VAR 0 3
7780: PUSH
7781: LD_INT 22
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 2
7793: PUSH
7794: LD_INT 25
7796: PUSH
7797: LD_INT 1
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: PUSH
7804: LD_INT 25
7806: PUSH
7807: LD_INT 2
7809: PUSH
7810: EMPTY
7811: LIST
7812: LIST
7813: PUSH
7814: LD_INT 25
7816: PUSH
7817: LD_INT 3
7819: PUSH
7820: EMPTY
7821: LIST
7822: LIST
7823: PUSH
7824: LD_INT 25
7826: PUSH
7827: LD_INT 4
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: PUSH
7834: LD_INT 25
7836: PUSH
7837: LD_INT 5
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: PUSH
7844: LD_INT 25
7846: PUSH
7847: LD_INT 8
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: LIST
7859: LIST
7860: LIST
7861: LIST
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: PPUSH
7867: CALL_OW 69
7871: PUSH
7872: LD_EXP 1
7876: PUSH
7877: LD_EXP 2
7881: PUSH
7882: LD_EXP 3
7886: PUSH
7887: LD_EXP 4
7891: PUSH
7892: LD_EXP 5
7896: PUSH
7897: LD_EXP 6
7901: PUSH
7902: LD_EXP 7
7906: PUSH
7907: LD_EXP 8
7911: PUSH
7912: LD_EXP 9
7916: PUSH
7917: LD_EXP 10
7921: PUSH
7922: LD_EXP 11
7926: PUSH
7927: LD_EXP 12
7931: PUSH
7932: LD_EXP 13
7936: PUSH
7937: LD_EXP 14
7941: PUSH
7942: LD_EXP 15
7946: PUSH
7947: LD_EXP 16
7951: PUSH
7952: LD_EXP 17
7956: PUSH
7957: LD_EXP 19
7961: PUSH
7962: LD_EXP 24
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: DIFF
7988: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7989: LD_EXP 14
7993: PPUSH
7994: LD_INT 8
7996: PPUSH
7997: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8001: LD_EXP 14
8005: PPUSH
8006: CALL_OW 122
// wait ( 0 0$1 ) ;
8010: LD_INT 35
8012: PPUSH
8013: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8017: LD_EXP 14
8021: PPUSH
8022: CALL_OW 121
// wait ( 0 0$1 ) ;
8026: LD_INT 35
8028: PPUSH
8029: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8033: LD_EXP 14
8037: PPUSH
8038: LD_INT 7
8040: PPUSH
8041: CALL_OW 113
// if not tmp then
8045: LD_VAR 0 3
8049: NOT
8050: IFFALSE 8054
// exit ;
8052: GO 8310
// DialogueOn ;
8054: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8058: LD_VAR 0 3
8062: PUSH
8063: LD_INT 1
8065: ARRAY
8066: PPUSH
8067: CALL_OW 258
8071: PUSH
8072: LD_INT 1
8074: EQUAL
8075: IFFALSE 8095
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8077: LD_VAR 0 3
8081: PUSH
8082: LD_INT 1
8084: ARRAY
8085: PPUSH
8086: LD_STRING D8b-Sol1-1
8088: PPUSH
8089: CALL_OW 88
8093: GO 8111
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: LD_STRING D8b-FSol1-1
8106: PPUSH
8107: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8111: LD_EXP 14
8115: PPUSH
8116: LD_STRING D8b-Khat-1
8118: PPUSH
8119: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 1
8130: ARRAY
8131: PPUSH
8132: CALL_OW 258
8136: PUSH
8137: LD_INT 1
8139: EQUAL
8140: IFFALSE 8160
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8142: LD_VAR 0 3
8146: PUSH
8147: LD_INT 1
8149: ARRAY
8150: PPUSH
8151: LD_STRING D8b-Sol1-2
8153: PPUSH
8154: CALL_OW 88
8158: GO 8176
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8160: LD_VAR 0 3
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: LD_STRING D8b-FSol1-2
8171: PPUSH
8172: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8176: LD_EXP 14
8180: PPUSH
8181: LD_STRING D8b-Khat-2
8183: PPUSH
8184: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 1
8195: ARRAY
8196: PPUSH
8197: CALL_OW 258
8201: PUSH
8202: LD_INT 1
8204: EQUAL
8205: IFFALSE 8225
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8207: LD_VAR 0 3
8211: PUSH
8212: LD_INT 1
8214: ARRAY
8215: PPUSH
8216: LD_STRING D8b-Sol1-3
8218: PPUSH
8219: CALL_OW 88
8223: GO 8241
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8225: LD_VAR 0 3
8229: PUSH
8230: LD_INT 1
8232: ARRAY
8233: PPUSH
8234: LD_STRING D8b-FSol1-3
8236: PPUSH
8237: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8241: LD_EXP 14
8245: PPUSH
8246: LD_STRING D8b-Khat-3
8248: PPUSH
8249: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 1
8260: ARRAY
8261: PPUSH
8262: CALL_OW 258
8266: PUSH
8267: LD_INT 1
8269: EQUAL
8270: IFFALSE 8290
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8272: LD_VAR 0 3
8276: PUSH
8277: LD_INT 1
8279: ARRAY
8280: PPUSH
8281: LD_STRING D8b-Sol1-4
8283: PPUSH
8284: CALL_OW 88
8288: GO 8306
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8290: LD_VAR 0 3
8294: PUSH
8295: LD_INT 1
8297: ARRAY
8298: PPUSH
8299: LD_STRING D8b-FSol1-4
8301: PPUSH
8302: CALL_OW 88
// DialogueOff ;
8306: CALL_OW 7
// end ; end ;
8310: LD_VAR 0 1
8314: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8315: LD_INT 7
8317: PPUSH
8318: LD_INT 22
8320: PUSH
8321: LD_INT 2
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PPUSH
8328: CALL_OW 70
8332: PUSH
8333: LD_INT 0
8335: GREATER
8336: PUSH
8337: LD_EXP 14
8341: PPUSH
8342: LD_INT 7
8344: PPUSH
8345: CALL_OW 308
8349: OR
8350: IFFALSE 8557
8352: GO 8354
8354: DISABLE
8355: LD_INT 0
8357: PPUSH
// begin enable ;
8358: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8359: LD_ADDR_VAR 0 1
8363: PUSH
8364: LD_INT 7
8366: PPUSH
8367: LD_INT 22
8369: PUSH
8370: LD_INT 2
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: PPUSH
8377: CALL_OW 70
8381: PUSH
8382: FOR_IN
8383: IFFALSE 8524
// begin if GetClass ( i ) = 4 then
8385: LD_VAR 0 1
8389: PPUSH
8390: CALL_OW 257
8394: PUSH
8395: LD_INT 4
8397: EQUAL
8398: IFFALSE 8410
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8400: LD_INT 1
8402: PPUSH
8403: LD_STRING 10_ScientistsEscape_1
8405: PPUSH
8406: CALL_OW 39
// if i = Dietrich then
8410: LD_VAR 0 1
8414: PUSH
8415: LD_EXP 26
8419: EQUAL
8420: IFFALSE 8430
// GensherStatus = 1 ;
8422: LD_ADDR_EXP 51
8426: PUSH
8427: LD_INT 1
8429: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8430: LD_VAR 0 1
8434: PPUSH
8435: CALL_OW 257
8439: PUSH
8440: LD_INT 1
8442: EQUAL
8443: PUSH
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 257
8453: PUSH
8454: LD_INT 2
8456: EQUAL
8457: OR
8458: PUSH
8459: LD_VAR 0 1
8463: PPUSH
8464: CALL_OW 257
8468: PUSH
8469: LD_INT 3
8471: EQUAL
8472: OR
8473: PUSH
8474: LD_VAR 0 1
8478: PPUSH
8479: CALL_OW 257
8483: PUSH
8484: LD_INT 4
8486: EQUAL
8487: OR
8488: PUSH
8489: LD_VAR 0 1
8493: PPUSH
8494: CALL_OW 257
8498: PUSH
8499: LD_INT 8
8501: EQUAL
8502: OR
8503: IFFALSE 8513
// arabianEscape = 1 ;
8505: LD_ADDR_EXP 47
8509: PUSH
8510: LD_INT 1
8512: ST_TO_ADDR
// RemoveUnit ( i ) ;
8513: LD_VAR 0 1
8517: PPUSH
8518: CALL_OW 64
// end ;
8522: GO 8382
8524: POP
8525: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8526: LD_EXP 14
8530: PPUSH
8531: LD_INT 7
8533: PPUSH
8534: CALL_OW 308
8538: IFFALSE 8557
// begin KhatamStatus = 1 ;
8540: LD_ADDR_EXP 52
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8548: LD_EXP 14
8552: PPUSH
8553: CALL_OW 64
// end ; end ;
8557: PPOPN 1
8559: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8560: LD_EXP 14
8564: PPUSH
8565: CALL_OW 301
8569: IFFALSE 8582
8571: GO 8573
8573: DISABLE
// KhatamStatus = 0 ;
8574: LD_ADDR_EXP 52
8578: PUSH
8579: LD_INT 0
8581: ST_TO_ADDR
8582: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8583: LD_INT 22
8585: PUSH
8586: LD_INT 2
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PUSH
8593: LD_INT 21
8595: PUSH
8596: LD_INT 1
8598: PUSH
8599: EMPTY
8600: LIST
8601: LIST
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: PPUSH
8607: CALL_OW 69
8611: PUSH
8612: LD_INT 0
8614: EQUAL
8615: PUSH
8616: LD_INT 22
8618: PUSH
8619: LD_INT 4
8621: PUSH
8622: EMPTY
8623: LIST
8624: LIST
8625: PUSH
8626: LD_INT 21
8628: PUSH
8629: LD_INT 1
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: PPUSH
8640: CALL_OW 69
8644: PUSH
8645: LD_INT 0
8647: EQUAL
8648: AND
8649: IFFALSE 8662
8651: GO 8653
8653: DISABLE
// arabianDefeated = 1 ;
8654: LD_ADDR_EXP 48
8658: PUSH
8659: LD_INT 1
8661: ST_TO_ADDR
8662: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8663: LD_INT 54
8665: PPUSH
8666: LD_INT 1
8668: PPUSH
8669: CALL_OW 321
8673: PUSH
8674: LD_INT 2
8676: EQUAL
8677: PUSH
8678: LD_INT 55
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 321
8688: PUSH
8689: LD_INT 2
8691: EQUAL
8692: AND
8693: PUSH
8694: LD_INT 21
8696: PPUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 321
8704: PUSH
8705: LD_INT 2
8707: EQUAL
8708: AND
8709: PUSH
8710: LD_INT 22
8712: PPUSH
8713: LD_INT 1
8715: PPUSH
8716: CALL_OW 321
8720: PUSH
8721: LD_INT 2
8723: EQUAL
8724: AND
8725: PUSH
8726: LD_INT 12
8728: PPUSH
8729: LD_INT 1
8731: PPUSH
8732: CALL_OW 321
8736: PUSH
8737: LD_INT 2
8739: EQUAL
8740: AND
8741: PUSH
8742: LD_INT 32
8744: PPUSH
8745: LD_INT 1
8747: PPUSH
8748: CALL_OW 321
8752: PUSH
8753: LD_INT 2
8755: EQUAL
8756: AND
8757: PUSH
8758: LD_EXP 59
8762: PUSH
8763: LD_INT 0
8765: EQUAL
8766: AND
8767: PUSH
8768: LD_EXP 49
8772: PUSH
8773: LD_INT 0
8775: EQUAL
8776: AND
8777: PUSH
8778: LD_OWVAR 1
8782: PUSH
8783: LD_INT 31500
8785: GREATEREQUAL
8786: AND
8787: IFFALSE 8804
8789: GO 8791
8791: DISABLE
// begin arabianTrait = 1 ;
8792: LD_ADDR_EXP 49
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// PrepareArabianTrait ;
8800: CALL 6846 0 0
// end ;
8804: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8805: LD_EXP 29
8809: PUSH
8810: LD_STRING 02_mikhailStatus_1
8812: PPUSH
8813: LD_INT 0
8815: PPUSH
8816: CALL_OW 30
8820: PUSH
8821: LD_INT 1
8823: EQUAL
8824: AND
8825: PUSH
8826: LD_INT 22
8828: PUSH
8829: LD_INT 5
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 69
8840: PUSH
8841: LD_INT 0
8843: EQUAL
8844: AND
8845: PUSH
8846: LD_INT 22
8848: PUSH
8849: LD_INT 2
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: PPUSH
8856: CALL_OW 69
8860: PUSH
8861: LD_INT 0
8863: EQUAL
8864: PUSH
8865: LD_EXP 49
8869: PUSH
8870: LD_INT 0
8872: EQUAL
8873: OR
8874: AND
8875: IFFALSE 8884
8877: GO 8879
8879: DISABLE
// PrepareCornell ;
8880: CALL 2544 0 0
8884: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8885: LD_INT 22
8887: PUSH
8888: LD_INT 1
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: PPUSH
8900: LD_EXP 19
8904: PPUSH
8905: CALL_OW 74
8909: PPUSH
8910: LD_EXP 19
8914: PPUSH
8915: CALL_OW 296
8919: PUSH
8920: LD_INT 9
8922: LESS
8923: IFFALSE 9144
8925: GO 8927
8927: DISABLE
// begin InGameOn ;
8928: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8932: LD_EXP 19
8936: PPUSH
8937: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8941: LD_EXP 19
8945: PPUSH
8946: LD_STRING D7-Corn-1
8948: PPUSH
8949: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8953: LD_INT 22
8955: PUSH
8956: LD_INT 1
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: LD_INT 2
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 1
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 2
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 3
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 4
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: LD_INT 25
9008: PUSH
9009: LD_INT 5
9011: PUSH
9012: EMPTY
9013: LIST
9014: LIST
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL_OW 69
9032: PPUSH
9033: LD_STRING D7-Sol1-1
9035: PPUSH
9036: LD_STRING D7-FSol1-1
9038: PPUSH
9039: CALL 9691 0 3
// CenterNowOnUnits ( Cornell ) ;
9043: LD_EXP 19
9047: PPUSH
9048: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9052: LD_EXP 19
9056: PPUSH
9057: LD_STRING D7-Corn-2
9059: PPUSH
9060: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9064: LD_EXP 1
9068: PPUSH
9069: LD_STRING D7-JMM-2
9071: PPUSH
9072: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9076: LD_EXP 19
9080: PPUSH
9081: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9085: LD_EXP 19
9089: PPUSH
9090: LD_STRING D7-Corn-3
9092: PPUSH
9093: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9097: LD_EXP 19
9101: PPUSH
9102: LD_INT 250
9104: PPUSH
9105: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9109: LD_EXP 19
9113: PPUSH
9114: LD_INT 1
9116: PPUSH
9117: CALL_OW 235
// wait ( 0 0$1 ) ;
9121: LD_INT 35
9123: PPUSH
9124: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9128: LD_EXP 1
9132: PPUSH
9133: LD_STRING D7-JMM-3
9135: PPUSH
9136: CALL_OW 88
// InGameOff ;
9140: CALL_OW 9
// end ;
9144: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9145: LD_EXP 19
9149: PPUSH
9150: CALL_OW 255
9154: PUSH
9155: LD_INT 1
9157: EQUAL
9158: PUSH
9159: LD_EXP 19
9163: PPUSH
9164: CALL_OW 256
9168: PUSH
9169: LD_INT 251
9171: GREATER
9172: AND
9173: IFFALSE 9366
9175: GO 9177
9177: DISABLE
// begin DialogueOn ;
9178: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9182: LD_EXP 1
9186: PPUSH
9187: LD_STRING D7a-JMM-1
9189: PPUSH
9190: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9194: LD_EXP 19
9198: PPUSH
9199: LD_STRING D7a-Corn-1
9201: PPUSH
9202: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9206: LD_EXP 1
9210: PPUSH
9211: LD_STRING D7a-JMM-2
9213: PPUSH
9214: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9218: LD_EXP 19
9222: PPUSH
9223: LD_STRING D7a-Corn-2
9225: PPUSH
9226: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9230: LD_EXP 1
9234: PPUSH
9235: LD_STRING D7a-JMM-3
9237: PPUSH
9238: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9242: LD_EXP 19
9246: PPUSH
9247: LD_STRING D7a-Corn-3
9249: PPUSH
9250: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9254: LD_EXP 1
9258: PPUSH
9259: LD_STRING D7a-JMM-4
9261: PPUSH
9262: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9266: LD_EXP 19
9270: PPUSH
9271: LD_STRING D7a-Corn-4
9273: PPUSH
9274: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9278: LD_EXP 1
9282: PPUSH
9283: LD_STRING D7a-JMM-5
9285: PPUSH
9286: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9290: LD_EXP 19
9294: PPUSH
9295: LD_STRING D7a-Corn-5
9297: PPUSH
9298: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9302: LD_EXP 1
9306: PPUSH
9307: LD_STRING D7a-JMM-6
9309: PPUSH
9310: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9314: LD_EXP 19
9318: PPUSH
9319: LD_STRING D7a-Corn-6
9321: PPUSH
9322: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9326: LD_EXP 1
9330: PPUSH
9331: LD_STRING D7a-JMM-7
9333: PPUSH
9334: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9338: LD_EXP 19
9342: PPUSH
9343: LD_STRING D7a-Corn-7
9345: PPUSH
9346: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9350: LD_EXP 1
9354: PPUSH
9355: LD_STRING D7a-JMM-8
9357: PPUSH
9358: CALL_OW 88
// DialogueOff ;
9362: CALL_OW 7
// end ;
9366: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9367: LD_EXP 58
9371: PUSH
9372: LD_EXP 1
9376: PPUSH
9377: CALL_OW 302
9381: PUSH
9382: LD_EXP 5
9386: PPUSH
9387: CALL_OW 302
9391: OR
9392: AND
9393: IFFALSE 9483
9395: GO 9397
9397: DISABLE
// begin Wait ( 0 0$2 ) ;
9398: LD_INT 70
9400: PPUSH
9401: CALL_OW 67
// DialogueOn ;
9405: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9409: LD_EXP 58
9413: PUSH
9414: LD_INT 1
9416: ARRAY
9417: PPUSH
9418: LD_EXP 58
9422: PUSH
9423: LD_INT 2
9425: ARRAY
9426: PPUSH
9427: CALL_OW 86
// if IsOk ( Cyrus ) then
9431: LD_EXP 5
9435: PPUSH
9436: CALL_OW 302
9440: IFFALSE 9456
// Say ( Cyrus , D10-Cyrus-1 ) else
9442: LD_EXP 5
9446: PPUSH
9447: LD_STRING D10-Cyrus-1
9449: PPUSH
9450: CALL_OW 88
9454: GO 9479
// if IsOk ( JMM ) then
9456: LD_EXP 1
9460: PPUSH
9461: CALL_OW 302
9465: IFFALSE 9479
// Say ( JMM , D10-JMM-1 ) ;
9467: LD_EXP 1
9471: PPUSH
9472: LD_STRING D10-JMM-1
9474: PPUSH
9475: CALL_OW 88
// DialogueOff ;
9479: CALL_OW 7
// end ;
9483: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9484: LD_INT 12
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: CALL_OW 321
9494: PUSH
9495: LD_INT 2
9497: EQUAL
9498: IFFALSE 9510
9500: GO 9502
9502: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9503: LD_STRING M2b
9505: PPUSH
9506: CALL_OW 337
9510: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9511: LD_INT 32
9513: PPUSH
9514: LD_INT 1
9516: PPUSH
9517: CALL_OW 321
9521: PUSH
9522: LD_INT 2
9524: EQUAL
9525: IFFALSE 9537
9527: GO 9529
9529: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9530: LD_STRING M2c
9532: PPUSH
9533: CALL_OW 337
9537: END
// every 0 0$1 trigger arabianDefeated = 1 do
9538: LD_EXP 48
9542: PUSH
9543: LD_INT 1
9545: EQUAL
9546: IFFALSE 9558
9548: GO 9550
9550: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9551: LD_STRING M4a
9553: PPUSH
9554: CALL_OW 337
9558: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9559: LD_INT 54
9561: PPUSH
9562: LD_INT 1
9564: PPUSH
9565: CALL_OW 321
9569: PUSH
9570: LD_INT 2
9572: EQUAL
9573: PUSH
9574: LD_INT 55
9576: PPUSH
9577: LD_INT 1
9579: PPUSH
9580: CALL_OW 321
9584: PUSH
9585: LD_INT 2
9587: EQUAL
9588: AND
9589: PUSH
9590: LD_INT 21
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: CALL_OW 321
9600: PUSH
9601: LD_INT 2
9603: EQUAL
9604: AND
9605: PUSH
9606: LD_INT 22
9608: PPUSH
9609: LD_INT 1
9611: PPUSH
9612: CALL_OW 321
9616: PUSH
9617: LD_INT 2
9619: EQUAL
9620: AND
9621: IFFALSE 9633
9623: GO 9625
9625: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9626: LD_STRING M2a
9628: PPUSH
9629: CALL_OW 337
9633: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9634: LD_INT 0
9636: PPUSH
9637: PPUSH
// if exist_mode then
9638: LD_VAR 0 2
9642: IFFALSE 9661
// unit := CreateCharacter ( ident ) else
9644: LD_ADDR_VAR 0 4
9648: PUSH
9649: LD_VAR 0 1
9653: PPUSH
9654: CALL_OW 34
9658: ST_TO_ADDR
9659: GO 9676
// unit := NewCharacter ( ident ) ;
9661: LD_ADDR_VAR 0 4
9665: PUSH
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL_OW 25
9675: ST_TO_ADDR
// result := unit ;
9676: LD_ADDR_VAR 0 3
9680: PUSH
9681: LD_VAR 0 4
9685: ST_TO_ADDR
// end ;
9686: LD_VAR 0 3
9690: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9691: LD_INT 0
9693: PPUSH
9694: PPUSH
9695: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9696: LD_ADDR_VAR 0 1
9700: PUSH
9701: LD_VAR 0 1
9705: PUSH
9706: LD_EXP 1
9710: PUSH
9711: LD_EXP 2
9715: PUSH
9716: LD_EXP 3
9720: PUSH
9721: LD_EXP 4
9725: PUSH
9726: LD_EXP 5
9730: PUSH
9731: LD_EXP 6
9735: PUSH
9736: LD_EXP 7
9740: PUSH
9741: LD_EXP 8
9745: PUSH
9746: LD_EXP 9
9750: PUSH
9751: LD_EXP 10
9755: PUSH
9756: LD_EXP 11
9760: PUSH
9761: LD_EXP 12
9765: PUSH
9766: LD_EXP 13
9770: PUSH
9771: LD_EXP 14
9775: PUSH
9776: LD_EXP 15
9780: PUSH
9781: LD_EXP 16
9785: PUSH
9786: LD_EXP 17
9790: PUSH
9791: LD_EXP 18
9795: PUSH
9796: LD_EXP 19
9800: PUSH
9801: LD_EXP 24
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: DIFF
9828: ST_TO_ADDR
// if not characters then
9829: LD_VAR 0 1
9833: NOT
9834: IFFALSE 9838
// exit ;
9836: GO 9984
// rnd = rand ( 1 , characters ) ;
9838: LD_ADDR_VAR 0 6
9842: PUSH
9843: LD_INT 1
9845: PPUSH
9846: LD_VAR 0 1
9850: PPUSH
9851: CALL_OW 12
9855: ST_TO_ADDR
// for i = 1 to characters do
9856: LD_ADDR_VAR 0 5
9860: PUSH
9861: DOUBLE
9862: LD_INT 1
9864: DEC
9865: ST_TO_ADDR
9866: LD_VAR 0 1
9870: PUSH
9871: FOR_TO
9872: IFFALSE 9982
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9874: LD_VAR 0 5
9878: PUSH
9879: LD_VAR 0 6
9883: EQUAL
9884: PUSH
9885: LD_VAR 0 1
9889: PUSH
9890: LD_VAR 0 5
9894: ARRAY
9895: PPUSH
9896: CALL_OW 258
9900: PUSH
9901: LD_INT 1
9903: EQUAL
9904: AND
9905: IFFALSE 9927
// Say ( characters [ i ] , dialogMID ) ;
9907: LD_VAR 0 1
9911: PUSH
9912: LD_VAR 0 5
9916: ARRAY
9917: PPUSH
9918: LD_VAR 0 2
9922: PPUSH
9923: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9927: LD_VAR 0 5
9931: PUSH
9932: LD_VAR 0 6
9936: EQUAL
9937: PUSH
9938: LD_VAR 0 1
9942: PUSH
9943: LD_VAR 0 5
9947: ARRAY
9948: PPUSH
9949: CALL_OW 258
9953: PUSH
9954: LD_INT 2
9956: EQUAL
9957: AND
9958: IFFALSE 9980
// Say ( characters [ i ] , dialogFID ) ;
9960: LD_VAR 0 1
9964: PUSH
9965: LD_VAR 0 5
9969: ARRAY
9970: PPUSH
9971: LD_VAR 0 3
9975: PPUSH
9976: CALL_OW 88
// end ;
9980: GO 9871
9982: POP
9983: POP
// end ;
9984: LD_VAR 0 4
9988: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9989: LD_INT 0
9991: PPUSH
9992: PPUSH
// for i in charactersList do
9993: LD_ADDR_VAR 0 4
9997: PUSH
9998: LD_VAR 0 1
10002: PUSH
10003: FOR_IN
10004: IFFALSE 10033
// begin if IsOk ( i ) then
10006: LD_VAR 0 4
10010: PPUSH
10011: CALL_OW 302
10015: IFFALSE 10031
// SaveCharacters ( i , ident ) ;
10017: LD_VAR 0 4
10021: PPUSH
10022: LD_VAR 0 2
10026: PPUSH
10027: CALL_OW 38
// end ;
10031: GO 10003
10033: POP
10034: POP
// end ;
10035: LD_VAR 0 3
10039: RET
// export function PrepareDifficulty ; begin
10040: LD_INT 0
10042: PPUSH
// if difficulty = 1 then
10043: LD_OWVAR 67
10047: PUSH
10048: LD_INT 1
10050: EQUAL
10051: IFFALSE 10095
// begin RuSolMinLevel = 4 ;
10053: LD_ADDR_EXP 36
10057: PUSH
10058: LD_INT 4
10060: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10061: LD_ADDR_EXP 37
10065: PUSH
10066: LD_INT 7
10068: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10069: LD_INT 51
10071: PPUSH
10072: LD_INT 6
10074: PPUSH
10075: LD_INT 2
10077: PPUSH
10078: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10082: LD_INT 51
10084: PPUSH
10085: LD_INT 5
10087: PPUSH
10088: LD_INT 2
10090: PPUSH
10091: CALL_OW 322
// end ; if difficulty = 2 then
10095: LD_OWVAR 67
10099: PUSH
10100: LD_INT 2
10102: EQUAL
10103: IFFALSE 10199
// begin RuSolMinLevel = 5 ;
10105: LD_ADDR_EXP 36
10109: PUSH
10110: LD_INT 5
10112: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10113: LD_ADDR_EXP 37
10117: PUSH
10118: LD_INT 7
10120: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10121: LD_INT 51
10123: PPUSH
10124: LD_INT 6
10126: PPUSH
10127: LD_INT 2
10129: PPUSH
10130: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10134: LD_INT 57
10136: PPUSH
10137: LD_INT 6
10139: PPUSH
10140: LD_INT 2
10142: PPUSH
10143: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10147: LD_INT 63
10149: PPUSH
10150: LD_INT 6
10152: PPUSH
10153: LD_INT 2
10155: PPUSH
10156: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10160: LD_INT 51
10162: PPUSH
10163: LD_INT 5
10165: PPUSH
10166: LD_INT 2
10168: PPUSH
10169: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10173: LD_INT 5
10175: PPUSH
10176: LD_INT 2
10178: PPUSH
10179: LD_INT 2
10181: PPUSH
10182: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10186: LD_INT 5
10188: PPUSH
10189: LD_INT 5
10191: PPUSH
10192: LD_INT 2
10194: PPUSH
10195: CALL_OW 322
// end ; if difficulty = 3 then
10199: LD_OWVAR 67
10203: PUSH
10204: LD_INT 3
10206: EQUAL
10207: IFFALSE 10355
// begin RuSolMinLevel = 6 ;
10209: LD_ADDR_EXP 36
10213: PUSH
10214: LD_INT 6
10216: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10217: LD_ADDR_EXP 37
10221: PUSH
10222: LD_INT 8
10224: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10225: LD_INT 51
10227: PPUSH
10228: LD_INT 6
10230: PPUSH
10231: LD_INT 2
10233: PPUSH
10234: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10238: LD_INT 57
10240: PPUSH
10241: LD_INT 6
10243: PPUSH
10244: LD_INT 2
10246: PPUSH
10247: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10251: LD_INT 52
10253: PPUSH
10254: LD_INT 6
10256: PPUSH
10257: LD_INT 2
10259: PPUSH
10260: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10264: LD_INT 58
10266: PPUSH
10267: LD_INT 6
10269: PPUSH
10270: LD_INT 2
10272: PPUSH
10273: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10277: LD_INT 63
10279: PPUSH
10280: LD_INT 6
10282: PPUSH
10283: LD_INT 2
10285: PPUSH
10286: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10290: LD_INT 64
10292: PPUSH
10293: LD_INT 6
10295: PPUSH
10296: LD_INT 2
10298: PPUSH
10299: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10303: LD_INT 51
10305: PPUSH
10306: LD_INT 5
10308: PPUSH
10309: LD_INT 2
10311: PPUSH
10312: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10316: LD_INT 52
10318: PPUSH
10319: LD_INT 5
10321: PPUSH
10322: LD_INT 2
10324: PPUSH
10325: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10329: LD_INT 66
10331: PPUSH
10332: LD_INT 2
10334: PPUSH
10335: LD_INT 2
10337: PPUSH
10338: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10342: LD_INT 66
10344: PPUSH
10345: LD_INT 5
10347: PPUSH
10348: LD_INT 2
10350: PPUSH
10351: CALL_OW 322
// end ; end ;
10355: LD_VAR 0 1
10359: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10360: LD_INT 0
10362: PPUSH
10363: PPUSH
10364: PPUSH
10365: PPUSH
10366: PPUSH
// case position of 1 :
10367: LD_VAR 0 1
10371: PUSH
10372: LD_INT 1
10374: DOUBLE
10375: EQUAL
10376: IFTRUE 10380
10378: GO 10391
10380: POP
// area := westConv ; 2 :
10381: LD_ADDR_VAR 0 6
10385: PUSH
10386: LD_INT 20
10388: ST_TO_ADDR
10389: GO 10430
10391: LD_INT 2
10393: DOUBLE
10394: EQUAL
10395: IFTRUE 10399
10397: GO 10410
10399: POP
// area := midConv ; 3 :
10400: LD_ADDR_VAR 0 6
10404: PUSH
10405: LD_INT 21
10407: ST_TO_ADDR
10408: GO 10430
10410: LD_INT 3
10412: DOUBLE
10413: EQUAL
10414: IFTRUE 10418
10416: GO 10429
10418: POP
// area := eastConv ; end ;
10419: LD_ADDR_VAR 0 6
10423: PUSH
10424: LD_INT 22
10426: ST_TO_ADDR
10427: GO 10430
10429: POP
// area := AreaToList ( area , 0 ) ;
10430: LD_ADDR_VAR 0 6
10434: PUSH
10435: LD_VAR 0 6
10439: PPUSH
10440: LD_INT 0
10442: PPUSH
10443: CALL_OW 517
10447: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10448: LD_ADDR_VAR 0 3
10452: PUSH
10453: DOUBLE
10454: LD_INT 1
10456: DEC
10457: ST_TO_ADDR
10458: LD_VAR 0 6
10462: PUSH
10463: LD_INT 1
10465: ARRAY
10466: PUSH
10467: FOR_TO
10468: IFFALSE 10549
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10470: LD_VAR 0 6
10474: PUSH
10475: LD_INT 1
10477: ARRAY
10478: PUSH
10479: LD_VAR 0 3
10483: ARRAY
10484: PPUSH
10485: LD_VAR 0 6
10489: PUSH
10490: LD_INT 2
10492: ARRAY
10493: PUSH
10494: LD_VAR 0 3
10498: ARRAY
10499: PPUSH
10500: LD_INT 1
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10510: LD_VAR 0 6
10514: PUSH
10515: LD_INT 1
10517: ARRAY
10518: PUSH
10519: LD_VAR 0 3
10523: ARRAY
10524: PPUSH
10525: LD_VAR 0 6
10529: PUSH
10530: LD_INT 2
10532: ARRAY
10533: PUSH
10534: LD_VAR 0 3
10538: ARRAY
10539: PPUSH
10540: LD_INT 1
10542: PPUSH
10543: CALL_OW 331
// end ;
10547: GO 10467
10549: POP
10550: POP
// ruPossition = position ;
10551: LD_ADDR_EXP 41
10555: PUSH
10556: LD_VAR 0 1
10560: ST_TO_ADDR
// if position = 1 then
10561: LD_VAR 0 1
10565: PUSH
10566: LD_INT 1
10568: EQUAL
10569: IFFALSE 11317
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10571: LD_ADDR_VAR 0 4
10575: PUSH
10576: LD_INT 22
10578: PUSH
10579: LD_INT 3
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 25
10588: PUSH
10589: LD_INT 2
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: PPUSH
10600: CALL_OW 69
10604: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10605: LD_ADDR_VAR 0 5
10609: PUSH
10610: LD_INT 0
10612: PUSH
10613: LD_INT 49
10615: PUSH
10616: LD_INT 74
10618: PUSH
10619: LD_INT 3
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 4
10630: PUSH
10631: LD_INT 73
10633: PUSH
10634: LD_INT 88
10636: PUSH
10637: LD_INT 5
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 4
10648: PUSH
10649: LD_INT 56
10651: PUSH
10652: LD_INT 62
10654: PUSH
10655: LD_INT 3
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 29
10666: PUSH
10667: LD_INT 43
10669: PUSH
10670: LD_INT 68
10672: PUSH
10673: LD_INT 2
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 30
10684: PUSH
10685: LD_INT 43
10687: PUSH
10688: LD_INT 79
10690: PUSH
10691: LD_INT 5
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 28
10702: PUSH
10703: LD_INT 60
10705: PUSH
10706: LD_INT 75
10708: PUSH
10709: LD_INT 1
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 2
10720: PUSH
10721: LD_INT 50
10723: PUSH
10724: LD_INT 87
10726: PUSH
10727: LD_INT 1
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: LD_INT 28
10738: PUSH
10739: LD_INT 45
10741: PUSH
10742: LD_INT 67
10744: PUSH
10745: LD_INT 2
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: PUSH
10754: LD_INT 17
10756: PUSH
10757: LD_INT 47
10759: PUSH
10760: LD_INT 84
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: PUSH
10772: LD_INT 18
10774: PUSH
10775: LD_INT 46
10777: PUSH
10778: LD_INT 87
10780: PUSH
10781: LD_INT 1
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 28
10792: PUSH
10793: LD_INT 41
10795: PUSH
10796: LD_INT 64
10798: PUSH
10799: LD_INT 5
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: PUSH
10808: LD_INT 32
10810: PUSH
10811: LD_INT 75
10813: PUSH
10814: LD_INT 76
10816: PUSH
10817: LD_INT 5
10819: PUSH
10820: EMPTY
10821: LIST
10822: LIST
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 32
10828: PUSH
10829: LD_INT 77
10831: PUSH
10832: LD_INT 75
10834: PUSH
10835: LD_INT 5
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: LD_INT 32
10846: PUSH
10847: LD_INT 69
10849: PUSH
10850: LD_INT 68
10852: PUSH
10853: LD_INT 3
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: PUSH
10862: LD_INT 32
10864: PUSH
10865: LD_INT 59
10867: PUSH
10868: LD_INT 96
10870: PUSH
10871: LD_INT 5
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: PUSH
10880: LD_INT 32
10882: PUSH
10883: LD_INT 56
10885: PUSH
10886: LD_INT 96
10888: PUSH
10889: LD_INT 0
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 32
10900: PUSH
10901: LD_INT 51
10903: PUSH
10904: LD_INT 61
10906: PUSH
10907: LD_INT 3
10909: PUSH
10910: EMPTY
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 32
10918: PUSH
10919: LD_INT 42
10921: PUSH
10922: LD_INT 60
10924: PUSH
10925: LD_INT 3
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: PUSH
10934: LD_INT 32
10936: PUSH
10937: LD_INT 36
10939: PUSH
10940: LD_INT 58
10942: PUSH
10943: LD_INT 3
10945: PUSH
10946: EMPTY
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 32
10954: PUSH
10955: LD_INT 39
10957: PUSH
10958: LD_INT 59
10960: PUSH
10961: LD_INT 3
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: PUSH
10970: LD_INT 32
10972: PUSH
10973: LD_INT 61
10975: PUSH
10976: LD_INT 64
10978: PUSH
10979: LD_INT 3
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 33
10990: PUSH
10991: LD_INT 63
10993: PUSH
10994: LD_INT 90
10996: PUSH
10997: LD_INT 5
10999: PUSH
11000: EMPTY
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PUSH
11006: LD_INT 33
11008: PUSH
11009: LD_INT 64
11011: PUSH
11012: LD_INT 88
11014: PUSH
11015: LD_INT 5
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: LD_INT 33
11026: PUSH
11027: LD_INT 72
11029: PUSH
11030: LD_INT 82
11032: PUSH
11033: LD_INT 5
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: PUSH
11042: LD_INT 6
11044: PUSH
11045: LD_INT 42
11047: PUSH
11048: LD_INT 74
11050: PUSH
11051: LD_INT 1
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 6
11062: PUSH
11063: LD_INT 56
11065: PUSH
11066: LD_INT 77
11068: PUSH
11069: LD_INT 2
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 21
11080: PUSH
11081: LD_INT 54
11083: PUSH
11084: LD_INT 91
11086: PUSH
11087: LD_INT 5
11089: PUSH
11090: EMPTY
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 16
11098: PUSH
11099: LD_INT 50
11101: PUSH
11102: LD_INT 83
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: PUSH
11114: LD_INT 24
11116: PUSH
11117: LD_INT 50
11119: PUSH
11120: LD_INT 90
11122: PUSH
11123: LD_INT 0
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11163: LD_ADDR_VAR 0 3
11167: PUSH
11168: LD_INT 22
11170: PUSH
11171: LD_INT 3
11173: PUSH
11174: EMPTY
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 3
11180: PUSH
11181: LD_INT 25
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: PPUSH
11199: CALL_OW 69
11203: PUSH
11204: FOR_IN
11205: IFFALSE 11224
// AddComAgressiveMove ( i , 53 , 82 ) ;
11207: LD_VAR 0 3
11211: PPUSH
11212: LD_INT 53
11214: PPUSH
11215: LD_INT 82
11217: PPUSH
11218: CALL_OW 174
11222: GO 11204
11224: POP
11225: POP
// for i := 1 to buildingsTab do
11226: LD_ADDR_VAR 0 3
11230: PUSH
11231: DOUBLE
11232: LD_INT 1
11234: DEC
11235: ST_TO_ADDR
11236: LD_VAR 0 5
11240: PUSH
11241: FOR_TO
11242: IFFALSE 11315
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11244: LD_VAR 0 4
11248: PPUSH
11249: LD_VAR 0 5
11253: PUSH
11254: LD_VAR 0 3
11258: ARRAY
11259: PUSH
11260: LD_INT 1
11262: ARRAY
11263: PPUSH
11264: LD_VAR 0 5
11268: PUSH
11269: LD_VAR 0 3
11273: ARRAY
11274: PUSH
11275: LD_INT 2
11277: ARRAY
11278: PPUSH
11279: LD_VAR 0 5
11283: PUSH
11284: LD_VAR 0 3
11288: ARRAY
11289: PUSH
11290: LD_INT 3
11292: ARRAY
11293: PPUSH
11294: LD_VAR 0 5
11298: PUSH
11299: LD_VAR 0 3
11303: ARRAY
11304: PUSH
11305: LD_INT 4
11307: ARRAY
11308: PPUSH
11309: CALL_OW 205
11313: GO 11241
11315: POP
11316: POP
// end ; if position = 2 then
11317: LD_VAR 0 1
11321: PUSH
11322: LD_INT 2
11324: EQUAL
11325: IFFALSE 11940
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11327: LD_ADDR_VAR 0 4
11331: PUSH
11332: LD_INT 22
11334: PUSH
11335: LD_INT 3
11337: PUSH
11338: EMPTY
11339: LIST
11340: LIST
11341: PUSH
11342: LD_INT 25
11344: PUSH
11345: LD_INT 2
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PUSH
11352: EMPTY
11353: LIST
11354: LIST
11355: PPUSH
11356: CALL_OW 69
11360: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11361: LD_ADDR_VAR 0 5
11365: PUSH
11366: LD_INT 0
11368: PUSH
11369: LD_INT 104
11371: PUSH
11372: LD_INT 110
11374: PUSH
11375: LD_INT 5
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 4
11386: PUSH
11387: LD_INT 98
11389: PUSH
11390: LD_INT 90
11392: PUSH
11393: LD_INT 3
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 29
11404: PUSH
11405: LD_INT 103
11407: PUSH
11408: LD_INT 114
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 30
11422: PUSH
11423: LD_INT 99
11425: PUSH
11426: LD_INT 114
11428: PUSH
11429: LD_INT 3
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 28
11440: PUSH
11441: LD_INT 100
11443: PUSH
11444: LD_INT 112
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 2
11458: PUSH
11459: LD_INT 92
11461: PUSH
11462: LD_INT 101
11464: PUSH
11465: LD_INT 0
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 28
11476: PUSH
11477: LD_INT 97
11479: PUSH
11480: LD_INT 116
11482: PUSH
11483: LD_INT 5
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 17
11494: PUSH
11495: LD_INT 96
11497: PUSH
11498: LD_INT 101
11500: PUSH
11501: LD_INT 4
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 18
11512: PUSH
11513: LD_INT 88
11515: PUSH
11516: LD_INT 97
11518: PUSH
11519: LD_INT 2
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 28
11530: PUSH
11531: LD_INT 106
11533: PUSH
11534: LD_INT 92
11536: PUSH
11537: LD_INT 2
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 32
11548: PUSH
11549: LD_INT 88
11551: PUSH
11552: LD_INT 89
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 32
11566: PUSH
11567: LD_INT 86
11569: PUSH
11570: LD_INT 90
11572: PUSH
11573: LD_INT 2
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 32
11584: PUSH
11585: LD_INT 85
11587: PUSH
11588: LD_INT 99
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 32
11602: PUSH
11603: LD_INT 85
11605: PUSH
11606: LD_INT 107
11608: PUSH
11609: LD_INT 1
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 33
11620: PUSH
11621: LD_INT 105
11623: PUSH
11624: LD_INT 99
11626: PUSH
11627: LD_INT 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 33
11638: PUSH
11639: LD_INT 102
11641: PUSH
11642: LD_INT 92
11644: PUSH
11645: LD_INT 3
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 33
11656: PUSH
11657: LD_INT 105
11659: PUSH
11660: LD_INT 92
11662: PUSH
11663: LD_INT 2
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 6
11674: PUSH
11675: LD_INT 92
11677: PUSH
11678: LD_INT 110
11680: PUSH
11681: LD_INT 0
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: LD_INT 6
11692: PUSH
11693: LD_INT 103
11695: PUSH
11696: LD_INT 103
11698: PUSH
11699: LD_INT 5
11701: PUSH
11702: EMPTY
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 21
11710: PUSH
11711: LD_INT 89
11713: PUSH
11714: LD_INT 101
11716: PUSH
11717: LD_INT 1
11719: PUSH
11720: EMPTY
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: PUSH
11726: LD_INT 16
11728: PUSH
11729: LD_INT 95
11731: PUSH
11732: LD_INT 104
11734: PUSH
11735: LD_INT 4
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: PUSH
11744: LD_INT 24
11746: PUSH
11747: LD_INT 92
11749: PUSH
11750: LD_INT 105
11752: PUSH
11753: LD_INT 0
11755: PUSH
11756: EMPTY
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: PUSH
11762: EMPTY
11763: LIST
11764: LIST
11765: LIST
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11786: LD_ADDR_VAR 0 3
11790: PUSH
11791: LD_INT 22
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 3
11803: PUSH
11804: LD_INT 25
11806: PUSH
11807: LD_INT 2
11809: PUSH
11810: EMPTY
11811: LIST
11812: LIST
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PPUSH
11822: CALL_OW 69
11826: PUSH
11827: FOR_IN
11828: IFFALSE 11847
// AddComAgressiveMove ( i , 96 , 99 ) ;
11830: LD_VAR 0 3
11834: PPUSH
11835: LD_INT 96
11837: PPUSH
11838: LD_INT 99
11840: PPUSH
11841: CALL_OW 174
11845: GO 11827
11847: POP
11848: POP
// for i := 1 to buildingsTab do
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: DOUBLE
11855: LD_INT 1
11857: DEC
11858: ST_TO_ADDR
11859: LD_VAR 0 5
11863: PUSH
11864: FOR_TO
11865: IFFALSE 11938
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11867: LD_VAR 0 4
11871: PPUSH
11872: LD_VAR 0 5
11876: PUSH
11877: LD_VAR 0 3
11881: ARRAY
11882: PUSH
11883: LD_INT 1
11885: ARRAY
11886: PPUSH
11887: LD_VAR 0 5
11891: PUSH
11892: LD_VAR 0 3
11896: ARRAY
11897: PUSH
11898: LD_INT 2
11900: ARRAY
11901: PPUSH
11902: LD_VAR 0 5
11906: PUSH
11907: LD_VAR 0 3
11911: ARRAY
11912: PUSH
11913: LD_INT 3
11915: ARRAY
11916: PPUSH
11917: LD_VAR 0 5
11921: PUSH
11922: LD_VAR 0 3
11926: ARRAY
11927: PUSH
11928: LD_INT 4
11930: ARRAY
11931: PPUSH
11932: CALL_OW 205
11936: GO 11864
11938: POP
11939: POP
// end ; if position = 3 then
11940: LD_VAR 0 1
11944: PUSH
11945: LD_INT 3
11947: EQUAL
11948: IFFALSE 12734
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11950: LD_ADDR_VAR 0 4
11954: PUSH
11955: LD_INT 22
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 25
11967: PUSH
11968: LD_INT 2
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 69
11983: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11984: LD_ADDR_VAR 0 5
11988: PUSH
11989: LD_INT 0
11991: PUSH
11992: LD_INT 151
11994: PUSH
11995: LD_INT 71
11997: PUSH
11998: LD_INT 4
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 4
12009: PUSH
12010: LD_INT 145
12012: PUSH
12013: LD_INT 53
12015: PUSH
12016: LD_INT 3
12018: PUSH
12019: EMPTY
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: PUSH
12025: LD_INT 4
12027: PUSH
12028: LD_INT 172
12030: PUSH
12031: LD_INT 102
12033: PUSH
12034: LD_INT 5
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 29
12045: PUSH
12046: LD_INT 152
12048: PUSH
12049: LD_INT 85
12051: PUSH
12052: LD_INT 3
12054: PUSH
12055: EMPTY
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: PUSH
12061: LD_INT 30
12063: PUSH
12064: LD_INT 156
12066: PUSH
12067: LD_INT 92
12069: PUSH
12070: LD_INT 3
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: LIST
12077: LIST
12078: PUSH
12079: LD_INT 28
12081: PUSH
12082: LD_INT 151
12084: PUSH
12085: LD_INT 66
12087: PUSH
12088: LD_INT 4
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 2
12099: PUSH
12100: LD_INT 163
12102: PUSH
12103: LD_INT 95
12105: PUSH
12106: LD_INT 5
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: PUSH
12115: LD_INT 28
12117: PUSH
12118: LD_INT 149
12120: PUSH
12121: LD_INT 63
12123: PUSH
12124: LD_INT 4
12126: PUSH
12127: EMPTY
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: PUSH
12133: LD_INT 17
12135: PUSH
12136: LD_INT 167
12138: PUSH
12139: LD_INT 99
12141: PUSH
12142: LD_INT 5
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 18
12153: PUSH
12154: LD_INT 163
12156: PUSH
12157: LD_INT 98
12159: PUSH
12160: LD_INT 0
12162: PUSH
12163: EMPTY
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 28
12171: PUSH
12172: LD_INT 154
12174: PUSH
12175: LD_INT 70
12177: PUSH
12178: LD_INT 4
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 32
12189: PUSH
12190: LD_INT 155
12192: PUSH
12193: LD_INT 62
12195: PUSH
12196: LD_INT 4
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 32
12207: PUSH
12208: LD_INT 161
12210: PUSH
12211: LD_INT 69
12213: PUSH
12214: LD_INT 4
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: LD_INT 32
12225: PUSH
12226: LD_INT 168
12228: PUSH
12229: LD_INT 78
12231: PUSH
12232: LD_INT 4
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 32
12243: PUSH
12244: LD_INT 163
12246: PUSH
12247: LD_INT 80
12249: PUSH
12250: LD_INT 5
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: PUSH
12259: LD_INT 32
12261: PUSH
12262: LD_INT 136
12264: PUSH
12265: LD_INT 73
12267: PUSH
12268: LD_INT 0
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: PUSH
12277: LD_INT 32
12279: PUSH
12280: LD_INT 157
12282: PUSH
12283: LD_INT 98
12285: PUSH
12286: LD_INT 0
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: PUSH
12295: LD_INT 32
12297: PUSH
12298: LD_INT 150
12300: PUSH
12301: LD_INT 87
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: PUSH
12313: LD_INT 33
12315: PUSH
12316: LD_INT 171
12318: PUSH
12319: LD_INT 97
12321: PUSH
12322: LD_INT 4
12324: PUSH
12325: EMPTY
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: PUSH
12331: LD_INT 33
12333: PUSH
12334: LD_INT 168
12336: PUSH
12337: LD_INT 92
12339: PUSH
12340: LD_INT 4
12342: PUSH
12343: EMPTY
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: PUSH
12349: LD_INT 33
12351: PUSH
12352: LD_INT 166
12354: PUSH
12355: LD_INT 80
12357: PUSH
12358: LD_INT 5
12360: PUSH
12361: EMPTY
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: PUSH
12367: LD_INT 33
12369: PUSH
12370: LD_INT 141
12372: PUSH
12373: LD_INT 54
12375: PUSH
12376: LD_INT 2
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: PUSH
12385: LD_INT 33
12387: PUSH
12388: LD_INT 133
12390: PUSH
12391: LD_INT 57
12393: PUSH
12394: LD_INT 2
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: PUSH
12403: LD_INT 33
12405: PUSH
12406: LD_INT 132
12408: PUSH
12409: LD_INT 61
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 33
12423: PUSH
12424: LD_INT 150
12426: PUSH
12427: LD_INT 82
12429: PUSH
12430: LD_INT 0
12432: PUSH
12433: EMPTY
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 33
12441: PUSH
12442: LD_INT 132
12444: PUSH
12445: LD_INT 72
12447: PUSH
12448: LD_INT 0
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 6
12459: PUSH
12460: LD_INT 146
12462: PUSH
12463: LD_INT 64
12465: PUSH
12466: LD_INT 4
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: PUSH
12475: LD_INT 6
12477: PUSH
12478: LD_INT 159
12480: PUSH
12481: LD_INT 85
12483: PUSH
12484: LD_INT 4
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: PUSH
12493: LD_INT 21
12495: PUSH
12496: LD_INT 163
12498: PUSH
12499: LD_INT 91
12501: PUSH
12502: LD_INT 3
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: LIST
12509: LIST
12510: PUSH
12511: LD_INT 16
12513: PUSH
12514: LD_INT 166
12516: PUSH
12517: LD_INT 95
12519: PUSH
12520: LD_INT 4
12522: PUSH
12523: EMPTY
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: PUSH
12529: LD_INT 24
12531: PUSH
12532: LD_INT 159
12534: PUSH
12535: LD_INT 95
12537: PUSH
12538: LD_INT 1
12540: PUSH
12541: EMPTY
12542: LIST
12543: LIST
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: LIST
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12580: LD_ADDR_VAR 0 3
12584: PUSH
12585: LD_INT 22
12587: PUSH
12588: LD_INT 3
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 3
12597: PUSH
12598: LD_INT 25
12600: PUSH
12601: LD_INT 2
12603: PUSH
12604: EMPTY
12605: LIST
12606: LIST
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: PPUSH
12616: CALL_OW 69
12620: PUSH
12621: FOR_IN
12622: IFFALSE 12641
// AddComAgressiveMove ( i , 141 , 65 ) ;
12624: LD_VAR 0 3
12628: PPUSH
12629: LD_INT 141
12631: PPUSH
12632: LD_INT 65
12634: PPUSH
12635: CALL_OW 174
12639: GO 12621
12641: POP
12642: POP
// for i := 1 to buildingsTab do
12643: LD_ADDR_VAR 0 3
12647: PUSH
12648: DOUBLE
12649: LD_INT 1
12651: DEC
12652: ST_TO_ADDR
12653: LD_VAR 0 5
12657: PUSH
12658: FOR_TO
12659: IFFALSE 12732
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12661: LD_VAR 0 4
12665: PPUSH
12666: LD_VAR 0 5
12670: PUSH
12671: LD_VAR 0 3
12675: ARRAY
12676: PUSH
12677: LD_INT 1
12679: ARRAY
12680: PPUSH
12681: LD_VAR 0 5
12685: PUSH
12686: LD_VAR 0 3
12690: ARRAY
12691: PUSH
12692: LD_INT 2
12694: ARRAY
12695: PPUSH
12696: LD_VAR 0 5
12700: PUSH
12701: LD_VAR 0 3
12705: ARRAY
12706: PUSH
12707: LD_INT 3
12709: ARRAY
12710: PPUSH
12711: LD_VAR 0 5
12715: PUSH
12716: LD_VAR 0 3
12720: ARRAY
12721: PUSH
12722: LD_INT 4
12724: ARRAY
12725: PPUSH
12726: CALL_OW 205
12730: GO 12658
12732: POP
12733: POP
// end ; end ;
12734: LD_VAR 0 2
12738: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12739: LD_INT 0
12741: PPUSH
12742: PPUSH
12743: PPUSH
12744: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12745: LD_ADDR_VAR 0 3
12749: PUSH
12750: LD_INT 22
12752: PUSH
12753: LD_INT 2
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 25
12762: PUSH
12763: LD_INT 2
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12779: LD_VAR 0 3
12783: PPUSH
12784: LD_INT 0
12786: PPUSH
12787: LD_INT 71
12789: PPUSH
12790: LD_INT 15
12792: PPUSH
12793: LD_INT 3
12795: PPUSH
12796: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12800: LD_ADDR_VAR 0 4
12804: PUSH
12805: LD_INT 6
12807: PUSH
12808: LD_INT 77
12810: PUSH
12811: LD_INT 18
12813: PUSH
12814: LD_INT 3
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: PUSH
12823: LD_INT 4
12825: PUSH
12826: LD_INT 77
12828: PUSH
12829: LD_INT 26
12831: PUSH
12832: LD_INT 0
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 31
12843: PUSH
12844: LD_INT 82
12846: PUSH
12847: LD_INT 28
12849: PUSH
12850: LD_INT 0
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: PUSH
12859: LD_INT 31
12861: PUSH
12862: LD_INT 84
12864: PUSH
12865: LD_INT 21
12867: PUSH
12868: LD_INT 3
12870: PUSH
12871: EMPTY
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 31
12879: PUSH
12880: LD_INT 66
12882: PUSH
12883: LD_INT 14
12885: PUSH
12886: LD_INT 2
12888: PUSH
12889: EMPTY
12890: LIST
12891: LIST
12892: LIST
12893: LIST
12894: PUSH
12895: LD_INT 27
12897: PUSH
12898: LD_INT 67
12900: PUSH
12901: LD_INT 18
12903: PUSH
12904: LD_INT 5
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 27
12915: PUSH
12916: LD_INT 69
12918: PUSH
12919: LD_INT 23
12921: PUSH
12922: LD_INT 2
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: LIST
12929: LIST
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: LIST
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// for i := 1 to buildingsTab do
12940: LD_ADDR_VAR 0 2
12944: PUSH
12945: DOUBLE
12946: LD_INT 1
12948: DEC
12949: ST_TO_ADDR
12950: LD_VAR 0 4
12954: PUSH
12955: FOR_TO
12956: IFFALSE 13029
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12958: LD_VAR 0 3
12962: PPUSH
12963: LD_VAR 0 4
12967: PUSH
12968: LD_VAR 0 2
12972: ARRAY
12973: PUSH
12974: LD_INT 1
12976: ARRAY
12977: PPUSH
12978: LD_VAR 0 4
12982: PUSH
12983: LD_VAR 0 2
12987: ARRAY
12988: PUSH
12989: LD_INT 2
12991: ARRAY
12992: PPUSH
12993: LD_VAR 0 4
12997: PUSH
12998: LD_VAR 0 2
13002: ARRAY
13003: PUSH
13004: LD_INT 3
13006: ARRAY
13007: PPUSH
13008: LD_VAR 0 4
13012: PUSH
13013: LD_VAR 0 2
13017: ARRAY
13018: PUSH
13019: LD_INT 4
13021: ARRAY
13022: PPUSH
13023: CALL_OW 205
13027: GO 12955
13029: POP
13030: POP
// end ;
13031: LD_VAR 0 1
13035: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13036: LD_INT 0
13038: PPUSH
13039: PPUSH
13040: PPUSH
13041: PPUSH
13042: PPUSH
13043: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13044: LD_ADDR_VAR 0 7
13048: PUSH
13049: LD_INT 22
13051: PUSH
13052: LD_VAR 0 1
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 25
13063: PUSH
13064: LD_INT 9
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PPUSH
13075: CALL_OW 69
13079: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13080: LD_ADDR_VAR 0 8
13084: PUSH
13085: LD_INT 22
13087: PUSH
13088: LD_VAR 0 2
13092: PUSH
13093: EMPTY
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 3
13099: PUSH
13100: LD_INT 21
13102: PUSH
13103: LD_INT 3
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 69
13122: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13123: LD_ADDR_VAR 0 5
13127: PUSH
13128: LD_INT 1
13130: PPUSH
13131: LD_INT 3
13133: PPUSH
13134: CALL_OW 12
13138: ST_TO_ADDR
// for i = 1 to list do
13139: LD_ADDR_VAR 0 6
13143: PUSH
13144: DOUBLE
13145: LD_INT 1
13147: DEC
13148: ST_TO_ADDR
13149: LD_VAR 0 7
13153: PUSH
13154: FOR_TO
13155: IFFALSE 14145
// for ta in filter do
13157: LD_ADDR_VAR 0 4
13161: PUSH
13162: LD_VAR 0 8
13166: PUSH
13167: FOR_IN
13168: IFFALSE 14141
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13170: LD_VAR 0 7
13174: PUSH
13175: LD_VAR 0 6
13179: ARRAY
13180: PPUSH
13181: LD_VAR 0 4
13185: PPUSH
13186: CALL_OW 296
13190: PUSH
13191: LD_INT 15
13193: LESSEQUAL
13194: IFFALSE 14139
// begin case c of 1 :
13196: LD_VAR 0 5
13200: PUSH
13201: LD_INT 1
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13641
13209: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13210: LD_VAR 0 7
13214: PUSH
13215: LD_VAR 0 6
13219: ARRAY
13220: PPUSH
13221: LD_VAR 0 4
13225: PPUSH
13226: CALL_OW 250
13230: PPUSH
13231: LD_VAR 0 4
13235: PPUSH
13236: CALL_OW 251
13240: PPUSH
13241: CALL_OW 154
// if eventVar2 = 0 then
13245: LD_EXP 62
13249: PUSH
13250: LD_INT 0
13252: EQUAL
13253: IFFALSE 13639
// begin eventVar2 = 1 ;
13255: LD_ADDR_EXP 62
13259: PUSH
13260: LD_INT 1
13262: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13263: LD_INT 245
13265: PPUSH
13266: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13270: LD_VAR 0 4
13274: PPUSH
13275: CALL_OW 250
13279: PPUSH
13280: LD_VAR 0 4
13284: PPUSH
13285: CALL_OW 251
13289: PPUSH
13290: CALL_OW 84
// DialogueOn ;
13294: CALL_OW 6
// if IsOK ( Cyrus ) then
13298: LD_EXP 5
13302: PPUSH
13303: CALL_OW 302
13307: IFFALSE 13323
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13309: LD_EXP 5
13313: PPUSH
13314: LD_STRING D9a-Cyrus-1
13316: PPUSH
13317: CALL_OW 88
// end else
13321: GO 13445
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13323: LD_INT 22
13325: PUSH
13326: LD_INT 1
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 26
13335: PUSH
13336: LD_INT 1
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 2
13345: PUSH
13346: LD_INT 25
13348: PUSH
13349: LD_INT 1
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: PUSH
13356: LD_INT 25
13358: PUSH
13359: LD_INT 2
13361: PUSH
13362: EMPTY
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 25
13368: PUSH
13369: LD_INT 3
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 25
13378: PUSH
13379: LD_INT 4
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 25
13388: PUSH
13389: LD_INT 5
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: LIST
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: PPUSH
13409: CALL_OW 69
13413: PUSH
13414: LD_EXP 1
13418: PUSH
13419: LD_EXP 14
13423: PUSH
13424: LD_EXP 5
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: LIST
13433: DIFF
13434: PPUSH
13435: LD_STRING D9a-Sol1-1
13437: PPUSH
13438: LD_STRING D9a-Sol1-1
13440: PPUSH
13441: CALL 9691 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13445: LD_INT 22
13447: PUSH
13448: LD_INT 1
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 26
13457: PUSH
13458: LD_INT 1
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: LD_INT 2
13467: PUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 1
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 25
13480: PUSH
13481: LD_INT 2
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 3
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 25
13500: PUSH
13501: LD_INT 4
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 5
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 69
13535: PUSH
13536: LD_EXP 1
13540: PUSH
13541: LD_EXP 14
13545: PUSH
13546: LD_EXP 5
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: DIFF
13556: PPUSH
13557: LD_STRING D9b-Sol1-1
13559: PPUSH
13560: LD_STRING D9b-Sol1-1
13562: PPUSH
13563: CALL 9691 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13567: LD_STRING 09_arInfo
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL_OW 30
13577: PUSH
13578: LD_INT 1
13580: EQUAL
13581: IFFALSE 13595
// Say ( JMM , D9a-JMM-1 ) ;
13583: LD_EXP 1
13587: PPUSH
13588: LD_STRING D9a-JMM-1
13590: PPUSH
13591: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13595: LD_EXP 1
13599: PPUSH
13600: LD_STRING D9c-JMM-1
13602: PPUSH
13603: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13607: LD_INT 12
13609: PPUSH
13610: LD_INT 1
13612: PPUSH
13613: CALL_OW 321
13617: PUSH
13618: LD_INT 2
13620: EQUAL
13621: IFFALSE 13635
// Say ( JMM , D9c-JMM-1a ) ;
13623: LD_EXP 1
13627: PPUSH
13628: LD_STRING D9c-JMM-1a
13630: PPUSH
13631: CALL_OW 88
// DialogueOff ;
13635: CALL_OW 7
// end ; end ; 2 :
13639: GO 14139
13641: LD_INT 2
13643: DOUBLE
13644: EQUAL
13645: IFTRUE 13649
13647: GO 14107
13649: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13650: LD_VAR 0 7
13654: PUSH
13655: LD_VAR 0 6
13659: ARRAY
13660: PPUSH
13661: LD_VAR 0 4
13665: PPUSH
13666: CALL_OW 250
13670: PUSH
13671: LD_INT 1
13673: NEG
13674: PPUSH
13675: LD_INT 1
13677: PPUSH
13678: CALL_OW 12
13682: PLUS
13683: PPUSH
13684: LD_VAR 0 4
13688: PPUSH
13689: CALL_OW 251
13693: PUSH
13694: LD_INT 1
13696: NEG
13697: PPUSH
13698: LD_INT 1
13700: PPUSH
13701: CALL_OW 12
13705: PLUS
13706: PPUSH
13707: CALL_OW 153
// if eventVar2 = 0 then
13711: LD_EXP 62
13715: PUSH
13716: LD_INT 0
13718: EQUAL
13719: IFFALSE 14105
// begin eventVar2 = 1 ;
13721: LD_ADDR_EXP 62
13725: PUSH
13726: LD_INT 1
13728: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13729: LD_INT 245
13731: PPUSH
13732: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13736: LD_VAR 0 4
13740: PPUSH
13741: CALL_OW 250
13745: PPUSH
13746: LD_VAR 0 4
13750: PPUSH
13751: CALL_OW 251
13755: PPUSH
13756: CALL_OW 84
// DialogueOn ;
13760: CALL_OW 6
// if IsOK ( Cyrus ) then
13764: LD_EXP 5
13768: PPUSH
13769: CALL_OW 302
13773: IFFALSE 13789
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13775: LD_EXP 5
13779: PPUSH
13780: LD_STRING D9a-Cyrus-1
13782: PPUSH
13783: CALL_OW 88
// end else
13787: GO 13911
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13789: LD_INT 22
13791: PUSH
13792: LD_INT 1
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 26
13801: PUSH
13802: LD_INT 1
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 2
13811: PUSH
13812: LD_INT 25
13814: PUSH
13815: LD_INT 1
13817: PUSH
13818: EMPTY
13819: LIST
13820: LIST
13821: PUSH
13822: LD_INT 25
13824: PUSH
13825: LD_INT 2
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 25
13834: PUSH
13835: LD_INT 3
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PUSH
13842: LD_INT 25
13844: PUSH
13845: LD_INT 4
13847: PUSH
13848: EMPTY
13849: LIST
13850: LIST
13851: PUSH
13852: LD_INT 25
13854: PUSH
13855: LD_INT 5
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: PUSH
13880: LD_EXP 1
13884: PUSH
13885: LD_EXP 14
13889: PUSH
13890: LD_EXP 5
13894: PUSH
13895: EMPTY
13896: LIST
13897: LIST
13898: LIST
13899: DIFF
13900: PPUSH
13901: LD_STRING D9a-Sol1-1
13903: PPUSH
13904: LD_STRING D9a-Sol1-1
13906: PPUSH
13907: CALL 9691 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13911: LD_INT 22
13913: PUSH
13914: LD_INT 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 26
13923: PUSH
13924: LD_INT 1
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 2
13933: PUSH
13934: LD_INT 25
13936: PUSH
13937: LD_INT 1
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PUSH
13944: LD_INT 25
13946: PUSH
13947: LD_INT 2
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 25
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 25
13966: PUSH
13967: LD_INT 4
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 25
13976: PUSH
13977: LD_INT 5
13979: PUSH
13980: EMPTY
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: LIST
13996: PPUSH
13997: CALL_OW 69
14001: PUSH
14002: LD_EXP 1
14006: PUSH
14007: LD_EXP 14
14011: PUSH
14012: LD_EXP 5
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: LIST
14021: DIFF
14022: PPUSH
14023: LD_STRING D9b-Sol1-1
14025: PPUSH
14026: LD_STRING D9b-Sol1-1
14028: PPUSH
14029: CALL 9691 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14033: LD_STRING 09_arInfo
14035: PPUSH
14036: LD_INT 0
14038: PPUSH
14039: CALL_OW 30
14043: PUSH
14044: LD_INT 1
14046: EQUAL
14047: IFFALSE 14061
// Say ( JMM , D9a-JMM-1 ) ;
14049: LD_EXP 1
14053: PPUSH
14054: LD_STRING D9a-JMM-1
14056: PPUSH
14057: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14061: LD_EXP 1
14065: PPUSH
14066: LD_STRING D9c-JMM-1
14068: PPUSH
14069: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14073: LD_INT 12
14075: PPUSH
14076: LD_INT 1
14078: PPUSH
14079: CALL_OW 321
14083: PUSH
14084: LD_INT 2
14086: EQUAL
14087: IFFALSE 14101
// Say ( JMM , D9c-JMM-1a ) ;
14089: LD_EXP 1
14093: PPUSH
14094: LD_STRING D9c-JMM-1a
14096: PPUSH
14097: CALL_OW 88
// DialogueOff ;
14101: CALL_OW 7
// end ; end ; 3 :
14105: GO 14139
14107: LD_INT 3
14109: DOUBLE
14110: EQUAL
14111: IFTRUE 14115
14113: GO 14138
14115: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14116: LD_VAR 0 7
14120: PUSH
14121: LD_VAR 0 6
14125: ARRAY
14126: PPUSH
14127: LD_VAR 0 4
14131: PPUSH
14132: CALL_OW 115
14136: GO 14139
14138: POP
// end ; end ;
14139: GO 13167
14141: POP
14142: POP
14143: GO 13154
14145: POP
14146: POP
// end ;
14147: LD_VAR 0 3
14151: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14152: LD_INT 0
14154: PPUSH
14155: PPUSH
14156: PPUSH
14157: PPUSH
// for i = 1 to 72 do
14158: LD_ADDR_VAR 0 5
14162: PUSH
14163: DOUBLE
14164: LD_INT 1
14166: DEC
14167: ST_TO_ADDR
14168: LD_INT 72
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14230
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14174: LD_VAR 0 5
14178: PPUSH
14179: LD_VAR 0 1
14183: PPUSH
14184: CALL_OW 321
14188: PUSH
14189: LD_INT 1
14191: EQUAL
14192: PUSH
14193: LD_VAR 0 5
14197: PPUSH
14198: LD_VAR 0 3
14202: PPUSH
14203: CALL_OW 482
14207: PUSH
14208: LD_INT 1
14210: EQUAL
14211: AND
14212: IFFALSE 14228
// AddComResearch ( lab , i ) ;
14214: LD_VAR 0 2
14218: PPUSH
14219: LD_VAR 0 5
14223: PPUSH
14224: CALL_OW 184
14228: GO 14171
14230: POP
14231: POP
// end ;
14232: LD_VAR 0 4
14236: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14237: LD_INT 0
14239: PPUSH
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
14246: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14247: LD_ADDR_VAR 0 6
14251: PUSH
14252: LD_INT 22
14254: PUSH
14255: LD_VAR 0 1
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: PUSH
14264: LD_INT 56
14266: PUSH
14267: EMPTY
14268: LIST
14269: PUSH
14270: LD_INT 24
14272: PUSH
14273: LD_INT 700
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: LD_INT 60
14285: PUSH
14286: EMPTY
14287: LIST
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 2
14295: PUSH
14296: LD_INT 25
14298: PUSH
14299: LD_INT 1
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 25
14308: PUSH
14309: LD_INT 9
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: PPUSH
14328: CALL_OW 69
14332: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14333: LD_ADDR_VAR 0 7
14337: PUSH
14338: LD_INT 22
14340: PUSH
14341: LD_VAR 0 1
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 30
14352: PUSH
14353: LD_INT 32
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: LD_INT 58
14362: PUSH
14363: EMPTY
14364: LIST
14365: PUSH
14366: LD_INT 24
14368: PUSH
14369: LD_INT 251
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 69
14386: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14387: LD_ADDR_VAR 0 9
14391: PUSH
14392: LD_INT 22
14394: PUSH
14395: LD_VAR 0 1
14399: PUSH
14400: EMPTY
14401: LIST
14402: LIST
14403: PUSH
14404: LD_INT 2
14406: PUSH
14407: LD_INT 30
14409: PUSH
14410: LD_INT 4
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 30
14419: PUSH
14420: LD_INT 5
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: PUSH
14432: LD_INT 24
14434: PUSH
14435: LD_INT 251
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: ST_TO_ADDR
// if barrackList > 0 then
14452: LD_VAR 0 9
14456: PUSH
14457: LD_INT 0
14459: GREATER
14460: IFFALSE 14595
// begin if turretList = 0 then
14462: LD_VAR 0 7
14466: PUSH
14467: LD_INT 0
14469: EQUAL
14470: IFFALSE 14519
// begin for i in soldiers_list do
14472: LD_ADDR_VAR 0 4
14476: PUSH
14477: LD_VAR 0 6
14481: PUSH
14482: FOR_IN
14483: IFFALSE 14515
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14485: LD_VAR 0 4
14489: PPUSH
14490: LD_VAR 0 9
14494: PUSH
14495: LD_INT 1
14497: PPUSH
14498: LD_VAR 0 9
14502: PPUSH
14503: CALL_OW 12
14507: ARRAY
14508: PPUSH
14509: CALL_OW 120
14513: GO 14482
14515: POP
14516: POP
// end else
14517: GO 14595
// begin for i in barrackList do
14519: LD_ADDR_VAR 0 4
14523: PUSH
14524: LD_VAR 0 9
14528: PUSH
14529: FOR_IN
14530: IFFALSE 14593
// begin insideUnits = UnitsInside ( i ) ;
14532: LD_ADDR_VAR 0 10
14536: PUSH
14537: LD_VAR 0 4
14541: PPUSH
14542: CALL_OW 313
14546: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14547: LD_VAR 0 10
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: PPUSH
14556: LD_VAR 0 7
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14569: LD_VAR 0 6
14573: PUSH
14574: LD_INT 1
14576: ARRAY
14577: PPUSH
14578: LD_VAR 0 7
14582: PUSH
14583: LD_INT 1
14585: ARRAY
14586: PPUSH
14587: CALL_OW 120
// end ;
14591: GO 14529
14593: POP
14594: POP
// end ; end ; end ;
14595: LD_VAR 0 3
14599: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14600: LD_INT 0
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
14606: PPUSH
14607: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14608: LD_ADDR_VAR 0 6
14612: PUSH
14613: LD_VAR 0 2
14617: PPUSH
14618: CALL_OW 313
14622: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14623: LD_ADDR_VAR 0 7
14627: PUSH
14628: LD_INT 22
14630: PUSH
14631: LD_VAR 0 1
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 25
14642: PUSH
14643: LD_INT 2
14645: PUSH
14646: EMPTY
14647: LIST
14648: LIST
14649: PUSH
14650: LD_INT 24
14652: PUSH
14653: LD_INT 1000
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: LD_INT 54
14665: PUSH
14666: EMPTY
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: PPUSH
14679: CALL_OW 69
14683: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14684: LD_ADDR_VAR 0 4
14688: PUSH
14689: LD_INT 22
14691: PUSH
14692: LD_VAR 0 1
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: PUSH
14701: LD_INT 21
14703: PUSH
14704: LD_INT 3
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 3
14713: PUSH
14714: LD_INT 24
14716: PUSH
14717: LD_INT 1000
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: PUSH
14733: EMPTY
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14741: LD_VAR 0 4
14745: NOT
14746: PUSH
14747: LD_VAR 0 7
14751: NOT
14752: AND
14753: PUSH
14754: LD_EXP 42
14758: NOT
14759: AND
14760: IFFALSE 14764
// exit ;
14762: GO 14955
// if buildings_list > 0 and engineerOkInside then
14764: LD_VAR 0 4
14768: PUSH
14769: LD_INT 0
14771: GREATER
14772: PUSH
14773: LD_VAR 0 6
14777: AND
14778: IFFALSE 14832
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14780: LD_ADDR_VAR 0 5
14784: PUSH
14785: LD_INT 22
14787: PUSH
14788: LD_VAR 0 1
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 25
14799: PUSH
14800: LD_INT 2
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PPUSH
14811: CALL_OW 69
14815: PUSH
14816: FOR_IN
14817: IFFALSE 14830
// ComExitBuilding ( i ) ;
14819: LD_VAR 0 5
14823: PPUSH
14824: CALL_OW 122
14828: GO 14816
14830: POP
14831: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14832: LD_VAR 0 4
14836: PUSH
14837: LD_INT 0
14839: GREATER
14840: PUSH
14841: LD_VAR 0 7
14845: PUSH
14846: LD_INT 0
14848: GREATER
14849: AND
14850: IFFALSE 14904
// begin for i in engineerOkOutside do
14852: LD_ADDR_VAR 0 5
14856: PUSH
14857: LD_VAR 0 7
14861: PUSH
14862: FOR_IN
14863: IFFALSE 14902
// for j in buildings_list do
14865: LD_ADDR_VAR 0 8
14869: PUSH
14870: LD_VAR 0 4
14874: PUSH
14875: FOR_IN
14876: IFFALSE 14898
// ComRepairBuilding ( i , j [ 1 ] ) ;
14878: LD_VAR 0 5
14882: PPUSH
14883: LD_VAR 0 8
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: CALL_OW 130
14896: GO 14875
14898: POP
14899: POP
14900: GO 14862
14902: POP
14903: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14904: LD_VAR 0 4
14908: PUSH
14909: LD_INT 0
14911: EQUAL
14912: PUSH
14913: LD_VAR 0 7
14917: PUSH
14918: LD_INT 0
14920: GREATER
14921: AND
14922: IFFALSE 14955
// for i in engineerOkOutside do
14924: LD_ADDR_VAR 0 5
14928: PUSH
14929: LD_VAR 0 7
14933: PUSH
14934: FOR_IN
14935: IFFALSE 14953
// ComEnterUnit ( i , building ) ;
14937: LD_VAR 0 5
14941: PPUSH
14942: LD_VAR 0 2
14946: PPUSH
14947: CALL_OW 120
14951: GO 14934
14953: POP
14954: POP
// end ;
14955: LD_VAR 0 3
14959: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14960: LD_INT 0
14962: PPUSH
14963: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14964: LD_INT 22
14966: PUSH
14967: LD_VAR 0 1
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 25
14978: PUSH
14979: LD_INT 2
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 69
14994: PUSH
14995: LD_INT 0
14997: GREATER
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_VAR 0 1
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: PUSH
15011: LD_INT 21
15013: PUSH
15014: LD_INT 3
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 3
15023: PUSH
15024: LD_INT 24
15026: PUSH
15027: LD_INT 1000
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PUSH
15034: EMPTY
15035: LIST
15036: LIST
15037: PUSH
15038: EMPTY
15039: LIST
15040: LIST
15041: LIST
15042: PPUSH
15043: CALL_OW 69
15047: PUSH
15048: LD_INT 0
15050: EQUAL
15051: AND
15052: PUSH
15053: LD_VAR 0 2
15057: PUSH
15058: LD_INT 0
15060: GREATER
15061: AND
15062: IFFALSE 15161
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15064: LD_ADDR_VAR 0 4
15068: PUSH
15069: LD_INT 22
15071: PUSH
15072: LD_VAR 0 1
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: LD_INT 25
15083: PUSH
15084: LD_INT 2
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PPUSH
15095: CALL_OW 69
15099: PUSH
15100: FOR_IN
15101: IFFALSE 15159
// begin AddComExitBuilding ( i ) ;
15103: LD_VAR 0 4
15107: PPUSH
15108: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15112: LD_VAR 0 4
15116: PPUSH
15117: LD_VAR 0 2
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PPUSH
15126: LD_VAR 0 2
15130: PUSH
15131: LD_INT 2
15133: ARRAY
15134: PPUSH
15135: LD_VAR 0 2
15139: PUSH
15140: LD_INT 3
15142: ARRAY
15143: PPUSH
15144: LD_VAR 0 2
15148: PUSH
15149: LD_INT 4
15151: ARRAY
15152: PPUSH
15153: CALL_OW 205
// end ;
15157: GO 15100
15159: POP
15160: POP
// end ; end ;
15161: LD_VAR 0 3
15165: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15166: LD_INT 0
15168: PPUSH
15169: PPUSH
15170: PPUSH
15171: PPUSH
15172: PPUSH
15173: PPUSH
15174: PPUSH
15175: PPUSH
15176: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15177: LD_ADDR_VAR 0 6
15181: PUSH
15182: LD_INT 22
15184: PUSH
15185: LD_VAR 0 1
15189: PUSH
15190: EMPTY
15191: LIST
15192: LIST
15193: PUSH
15194: LD_INT 25
15196: PUSH
15197: LD_INT 4
15199: PUSH
15200: EMPTY
15201: LIST
15202: LIST
15203: PUSH
15204: LD_INT 24
15206: PUSH
15207: LD_INT 251
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15224: LD_ADDR_VAR 0 7
15228: PUSH
15229: LD_VAR 0 3
15233: PPUSH
15234: LD_INT 22
15236: PUSH
15237: LD_VAR 0 1
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 50
15258: PUSH
15259: EMPTY
15260: LIST
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: LIST
15266: PPUSH
15267: CALL_OW 70
15271: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15272: LD_ADDR_VAR 0 10
15276: PUSH
15277: LD_VAR 0 3
15281: PPUSH
15282: LD_INT 22
15284: PUSH
15285: LD_VAR 0 1
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: LD_INT 21
15296: PUSH
15297: LD_INT 1
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 3
15306: PUSH
15307: LD_INT 25
15309: PUSH
15310: LD_INT 3
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: LD_INT 3
15323: PUSH
15324: LD_INT 24
15326: PUSH
15327: LD_INT 750
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: PPUSH
15344: CALL_OW 70
15348: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15349: LD_ADDR_VAR 0 11
15353: PUSH
15354: LD_VAR 0 2
15358: PPUSH
15359: LD_INT 22
15361: PUSH
15362: LD_VAR 0 1
15366: PUSH
15367: EMPTY
15368: LIST
15369: LIST
15370: PUSH
15371: LD_INT 21
15373: PUSH
15374: LD_INT 1
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: PUSH
15381: LD_INT 3
15383: PUSH
15384: LD_INT 25
15386: PUSH
15387: LD_INT 3
15389: PUSH
15390: EMPTY
15391: LIST
15392: LIST
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 3
15400: PUSH
15401: LD_INT 24
15403: PUSH
15404: LD_INT 1000
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: EMPTY
15412: LIST
15413: LIST
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: PPUSH
15421: CALL_OW 70
15425: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15426: LD_VAR 0 10
15430: NOT
15431: PUSH
15432: LD_VAR 0 7
15436: NOT
15437: AND
15438: PUSH
15439: LD_VAR 0 11
15443: NOT
15444: AND
15445: IFFALSE 15449
// exit ;
15447: GO 15709
// if damageUnits > 0 and sci_list > 0 then
15449: LD_VAR 0 10
15453: PUSH
15454: LD_INT 0
15456: GREATER
15457: PUSH
15458: LD_VAR 0 6
15462: PUSH
15463: LD_INT 0
15465: GREATER
15466: AND
15467: IFFALSE 15500
// for i in damageUnits do
15469: LD_ADDR_VAR 0 8
15473: PUSH
15474: LD_VAR 0 10
15478: PUSH
15479: FOR_IN
15480: IFFALSE 15498
// ComMoveToArea ( i , healArea ) ;
15482: LD_VAR 0 8
15486: PPUSH
15487: LD_VAR 0 2
15491: PPUSH
15492: CALL_OW 113
15496: GO 15479
15498: POP
15499: POP
// if unitsToHeal > 0 and sci_list > 0 then
15500: LD_VAR 0 11
15504: PUSH
15505: LD_INT 0
15507: GREATER
15508: PUSH
15509: LD_VAR 0 6
15513: PUSH
15514: LD_INT 0
15516: GREATER
15517: AND
15518: IFFALSE 15577
// begin for i in sci_list do
15520: LD_ADDR_VAR 0 8
15524: PUSH
15525: LD_VAR 0 6
15529: PUSH
15530: FOR_IN
15531: IFFALSE 15575
// begin ComExitBuilding ( i ) ;
15533: LD_VAR 0 8
15537: PPUSH
15538: CALL_OW 122
// for j in unitsToHeal do
15542: LD_ADDR_VAR 0 9
15546: PUSH
15547: LD_VAR 0 11
15551: PUSH
15552: FOR_IN
15553: IFFALSE 15571
// AddComHeal ( i , j ) ;
15555: LD_VAR 0 8
15559: PPUSH
15560: LD_VAR 0 9
15564: PPUSH
15565: CALL_OW 188
15569: GO 15552
15571: POP
15572: POP
// end ;
15573: GO 15530
15575: POP
15576: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15577: LD_VAR 0 10
15581: PUSH
15582: LD_INT 0
15584: EQUAL
15585: PUSH
15586: LD_VAR 0 11
15590: PUSH
15591: LD_INT 0
15593: EQUAL
15594: AND
15595: PUSH
15596: LD_VAR 0 7
15600: PUSH
15601: LD_INT 0
15603: GREATER
15604: AND
15605: IFFALSE 15709
// for i in sci_listOutside do
15607: LD_ADDR_VAR 0 8
15611: PUSH
15612: LD_VAR 0 7
15616: PUSH
15617: FOR_IN
15618: IFFALSE 15707
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15620: LD_ADDR_VAR 0 12
15624: PUSH
15625: LD_INT 22
15627: PUSH
15628: LD_VAR 0 1
15632: PUSH
15633: EMPTY
15634: LIST
15635: LIST
15636: PUSH
15637: LD_INT 21
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 30
15649: PUSH
15650: LD_INT 8
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: LIST
15661: PPUSH
15662: CALL_OW 69
15666: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15667: LD_ADDR_VAR 0 13
15671: PUSH
15672: LD_INT 1
15674: PPUSH
15675: LD_VAR 0 12
15679: PPUSH
15680: CALL_OW 12
15684: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15685: LD_VAR 0 8
15689: PPUSH
15690: LD_VAR 0 12
15694: PUSH
15695: LD_VAR 0 13
15699: ARRAY
15700: PPUSH
15701: CALL_OW 120
// end ;
15705: GO 15617
15707: POP
15708: POP
// end ;
15709: LD_VAR 0 5
15713: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
15719: PPUSH
15720: PPUSH
15721: PPUSH
15722: PPUSH
15723: PPUSH
15724: PPUSH
15725: PPUSH
15726: PPUSH
// amChassisTab = [ ] ;
15727: LD_ADDR_VAR 0 19
15731: PUSH
15732: EMPTY
15733: ST_TO_ADDR
// arChassisTab = [ ] ;
15734: LD_ADDR_VAR 0 18
15738: PUSH
15739: EMPTY
15740: ST_TO_ADDR
// ruChassisTab = [ ] ;
15741: LD_ADDR_VAR 0 17
15745: PUSH
15746: EMPTY
15747: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15748: LD_INT 35
15750: PPUSH
15751: CALL_OW 67
// if nation = 1 then
15755: LD_VAR 0 5
15759: PUSH
15760: LD_INT 1
15762: EQUAL
15763: IFFALSE 16268
// begin uc_side = side ;
15765: LD_ADDR_OWVAR 20
15769: PUSH
15770: LD_VAR 0 2
15774: ST_TO_ADDR
// uc_nation = nation ;
15775: LD_ADDR_OWVAR 21
15779: PUSH
15780: LD_VAR 0 5
15784: ST_TO_ADDR
// vc_engine = vehengine ;
15785: LD_ADDR_OWVAR 39
15789: PUSH
15790: LD_VAR 0 6
15794: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15795: LD_ADDR_OWVAR 38
15799: PUSH
15800: LD_VAR 0 7
15804: PUSH
15805: LD_INT 1
15807: PPUSH
15808: LD_VAR 0 7
15812: PPUSH
15813: CALL_OW 12
15817: ARRAY
15818: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15819: LD_ADDR_OWVAR 40
15823: PUSH
15824: LD_VAR 0 10
15828: PUSH
15829: LD_INT 1
15831: PPUSH
15832: LD_VAR 0 10
15836: PPUSH
15837: CALL_OW 12
15841: ARRAY
15842: ST_TO_ADDR
// for j = 1 to AMWeapon do
15843: LD_ADDR_VAR 0 14
15847: PUSH
15848: DOUBLE
15849: LD_INT 1
15851: DEC
15852: ST_TO_ADDR
15853: LD_VAR 0 10
15857: PUSH
15858: FOR_TO
15859: IFFALSE 16160
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15861: LD_VAR 0 10
15865: PUSH
15866: LD_VAR 0 14
15870: ARRAY
15871: PUSH
15872: LD_INT 2
15874: EQUAL
15875: PUSH
15876: LD_VAR 0 10
15880: PUSH
15881: LD_VAR 0 14
15885: ARRAY
15886: PUSH
15887: LD_INT 3
15889: EQUAL
15890: OR
15891: IFFALSE 15944
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15893: LD_ADDR_VAR 0 19
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: LD_INT 3
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15920: LD_ADDR_OWVAR 37
15924: PUSH
15925: LD_VAR 0 19
15929: PUSH
15930: LD_INT 1
15932: PPUSH
15933: LD_VAR 0 19
15937: PPUSH
15938: CALL_OW 12
15942: ARRAY
15943: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15944: LD_VAR 0 10
15948: PUSH
15949: LD_VAR 0 14
15953: ARRAY
15954: PUSH
15955: LD_INT 4
15957: EQUAL
15958: PUSH
15959: LD_VAR 0 10
15963: PUSH
15964: LD_VAR 0 14
15968: ARRAY
15969: PUSH
15970: LD_INT 5
15972: EQUAL
15973: OR
15974: PUSH
15975: LD_VAR 0 10
15979: PUSH
15980: LD_VAR 0 14
15984: ARRAY
15985: PUSH
15986: LD_INT 9
15988: EQUAL
15989: OR
15990: PUSH
15991: LD_VAR 0 10
15995: PUSH
15996: LD_VAR 0 14
16000: ARRAY
16001: PUSH
16002: LD_INT 11
16004: EQUAL
16005: OR
16006: PUSH
16007: LD_VAR 0 10
16011: PUSH
16012: LD_VAR 0 14
16016: ARRAY
16017: PUSH
16018: LD_INT 7
16020: EQUAL
16021: OR
16022: IFFALSE 16071
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16024: LD_ADDR_VAR 0 19
16028: PUSH
16029: LD_INT 2
16031: PUSH
16032: LD_INT 3
16034: PUSH
16035: LD_INT 4
16037: PUSH
16038: LD_INT 5
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16047: LD_ADDR_OWVAR 37
16051: PUSH
16052: LD_VAR 0 19
16056: PUSH
16057: LD_INT 1
16059: PPUSH
16060: LD_VAR 0 19
16064: PPUSH
16065: CALL_OW 12
16069: ARRAY
16070: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16071: LD_VAR 0 10
16075: PUSH
16076: LD_VAR 0 14
16080: ARRAY
16081: PUSH
16082: LD_INT 8
16084: EQUAL
16085: PUSH
16086: LD_VAR 0 10
16090: PUSH
16091: LD_VAR 0 14
16095: ARRAY
16096: PUSH
16097: LD_INT 6
16099: EQUAL
16100: OR
16101: PUSH
16102: LD_VAR 0 10
16106: PUSH
16107: LD_VAR 0 14
16111: ARRAY
16112: PUSH
16113: LD_INT 10
16115: EQUAL
16116: OR
16117: IFFALSE 16158
// begin amChassisTab = [ 4 , 5 ] ;
16119: LD_ADDR_VAR 0 19
16123: PUSH
16124: LD_INT 4
16126: PUSH
16127: LD_INT 5
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16134: LD_ADDR_OWVAR 37
16138: PUSH
16139: LD_VAR 0 19
16143: PUSH
16144: LD_INT 1
16146: PPUSH
16147: LD_VAR 0 19
16151: PPUSH
16152: CALL_OW 12
16156: ARRAY
16157: ST_TO_ADDR
// end ; end ;
16158: GO 15858
16160: POP
16161: POP
// veh = CreateVehicle ;
16162: LD_ADDR_VAR 0 16
16166: PUSH
16167: CALL_OW 45
16171: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16172: LD_VAR 0 16
16176: PPUSH
16177: LD_VAR 0 1
16181: PPUSH
16182: LD_INT 0
16184: PPUSH
16185: CALL_OW 49
// if vc_control = 1 then
16189: LD_OWVAR 38
16193: PUSH
16194: LD_INT 1
16196: EQUAL
16197: IFFALSE 16254
// begin hc_gallery =  ;
16199: LD_ADDR_OWVAR 33
16203: PUSH
16204: LD_STRING 
16206: ST_TO_ADDR
// hc_name =  ;
16207: LD_ADDR_OWVAR 26
16211: PUSH
16212: LD_STRING 
16214: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16215: LD_INT 0
16217: PPUSH
16218: LD_INT 3
16220: PPUSH
16221: LD_VAR 0 4
16225: PPUSH
16226: CALL_OW 380
// un = CreateHuman ;
16230: LD_ADDR_VAR 0 15
16234: PUSH
16235: CALL_OW 44
16239: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16240: LD_VAR 0 15
16244: PPUSH
16245: LD_VAR 0 16
16249: PPUSH
16250: CALL_OW 52
// end ; i = i + 1 ;
16254: LD_ADDR_VAR 0 13
16258: PUSH
16259: LD_VAR 0 13
16263: PUSH
16264: LD_INT 1
16266: PLUS
16267: ST_TO_ADDR
// end ; if nation = 2 then
16268: LD_VAR 0 5
16272: PUSH
16273: LD_INT 2
16275: EQUAL
16276: IFFALSE 16698
// begin uc_side = side ;
16278: LD_ADDR_OWVAR 20
16282: PUSH
16283: LD_VAR 0 2
16287: ST_TO_ADDR
// uc_nation = nation ;
16288: LD_ADDR_OWVAR 21
16292: PUSH
16293: LD_VAR 0 5
16297: ST_TO_ADDR
// vc_engine = vehengine ;
16298: LD_ADDR_OWVAR 39
16302: PUSH
16303: LD_VAR 0 6
16307: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16308: LD_ADDR_OWVAR 38
16312: PUSH
16313: LD_VAR 0 7
16317: PUSH
16318: LD_INT 1
16320: PPUSH
16321: LD_VAR 0 7
16325: PPUSH
16326: CALL_OW 12
16330: ARRAY
16331: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16332: LD_ADDR_OWVAR 40
16336: PUSH
16337: LD_VAR 0 9
16341: PUSH
16342: LD_INT 1
16344: PPUSH
16345: LD_VAR 0 9
16349: PPUSH
16350: CALL_OW 12
16354: ARRAY
16355: ST_TO_ADDR
// for j = 1 to ARWeapons do
16356: LD_ADDR_VAR 0 14
16360: PUSH
16361: DOUBLE
16362: LD_INT 1
16364: DEC
16365: ST_TO_ADDR
16366: LD_VAR 0 9
16370: PUSH
16371: FOR_TO
16372: IFFALSE 16590
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16374: LD_VAR 0 9
16378: PUSH
16379: LD_VAR 0 14
16383: ARRAY
16384: PUSH
16385: LD_INT 24
16387: EQUAL
16388: PUSH
16389: LD_VAR 0 9
16393: PUSH
16394: LD_VAR 0 14
16398: ARRAY
16399: PUSH
16400: LD_INT 22
16402: EQUAL
16403: OR
16404: PUSH
16405: LD_VAR 0 9
16409: PUSH
16410: LD_VAR 0 14
16414: ARRAY
16415: PUSH
16416: LD_INT 23
16418: EQUAL
16419: OR
16420: PUSH
16421: LD_VAR 0 9
16425: PUSH
16426: LD_VAR 0 14
16430: ARRAY
16431: PUSH
16432: LD_INT 30
16434: EQUAL
16435: OR
16436: IFFALSE 16473
// begin arChassisTab = [ 14 ] ;
16438: LD_ADDR_VAR 0 18
16442: PUSH
16443: LD_INT 14
16445: PUSH
16446: EMPTY
16447: LIST
16448: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16449: LD_ADDR_OWVAR 37
16453: PUSH
16454: LD_VAR 0 18
16458: PUSH
16459: LD_INT 1
16461: PPUSH
16462: LD_VAR 0 18
16466: PPUSH
16467: CALL_OW 12
16471: ARRAY
16472: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16473: LD_VAR 0 9
16477: PUSH
16478: LD_VAR 0 14
16482: ARRAY
16483: PUSH
16484: LD_INT 29
16486: EQUAL
16487: PUSH
16488: LD_VAR 0 9
16492: PUSH
16493: LD_VAR 0 14
16497: ARRAY
16498: PUSH
16499: LD_INT 28
16501: EQUAL
16502: OR
16503: PUSH
16504: LD_VAR 0 9
16508: PUSH
16509: LD_VAR 0 14
16513: ARRAY
16514: PUSH
16515: LD_INT 27
16517: EQUAL
16518: OR
16519: PUSH
16520: LD_VAR 0 9
16524: PUSH
16525: LD_VAR 0 14
16529: ARRAY
16530: PUSH
16531: LD_INT 26
16533: EQUAL
16534: OR
16535: PUSH
16536: LD_VAR 0 9
16540: PUSH
16541: LD_VAR 0 14
16545: ARRAY
16546: PUSH
16547: LD_INT 25
16549: EQUAL
16550: OR
16551: IFFALSE 16588
// begin arChassisTab = [ 14 ] ;
16553: LD_ADDR_VAR 0 18
16557: PUSH
16558: LD_INT 14
16560: PUSH
16561: EMPTY
16562: LIST
16563: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16564: LD_ADDR_OWVAR 37
16568: PUSH
16569: LD_VAR 0 18
16573: PUSH
16574: LD_INT 1
16576: PPUSH
16577: LD_VAR 0 18
16581: PPUSH
16582: CALL_OW 12
16586: ARRAY
16587: ST_TO_ADDR
// end ; end ;
16588: GO 16371
16590: POP
16591: POP
// veh = CreateVehicle ;
16592: LD_ADDR_VAR 0 16
16596: PUSH
16597: CALL_OW 45
16601: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16602: LD_VAR 0 16
16606: PPUSH
16607: LD_VAR 0 1
16611: PPUSH
16612: LD_INT 0
16614: PPUSH
16615: CALL_OW 49
// if vc_control = 1 then
16619: LD_OWVAR 38
16623: PUSH
16624: LD_INT 1
16626: EQUAL
16627: IFFALSE 16684
// begin hc_gallery =  ;
16629: LD_ADDR_OWVAR 33
16633: PUSH
16634: LD_STRING 
16636: ST_TO_ADDR
// hc_name =  ;
16637: LD_ADDR_OWVAR 26
16641: PUSH
16642: LD_STRING 
16644: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16645: LD_INT 0
16647: PPUSH
16648: LD_INT 3
16650: PPUSH
16651: LD_VAR 0 4
16655: PPUSH
16656: CALL_OW 380
// un = CreateHuman ;
16660: LD_ADDR_VAR 0 15
16664: PUSH
16665: CALL_OW 44
16669: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16670: LD_VAR 0 15
16674: PPUSH
16675: LD_VAR 0 16
16679: PPUSH
16680: CALL_OW 52
// end ; i = i + 1 ;
16684: LD_ADDR_VAR 0 13
16688: PUSH
16689: LD_VAR 0 13
16693: PUSH
16694: LD_INT 1
16696: PLUS
16697: ST_TO_ADDR
// end ; if nation = 3 then
16698: LD_VAR 0 5
16702: PUSH
16703: LD_INT 3
16705: EQUAL
16706: IFFALSE 17112
// begin uc_side = side ;
16708: LD_ADDR_OWVAR 20
16712: PUSH
16713: LD_VAR 0 2
16717: ST_TO_ADDR
// uc_nation = nation ;
16718: LD_ADDR_OWVAR 21
16722: PUSH
16723: LD_VAR 0 5
16727: ST_TO_ADDR
// vc_engine = vehengine ;
16728: LD_ADDR_OWVAR 39
16732: PUSH
16733: LD_VAR 0 6
16737: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16738: LD_ADDR_OWVAR 38
16742: PUSH
16743: LD_VAR 0 7
16747: PUSH
16748: LD_INT 1
16750: PPUSH
16751: LD_VAR 0 7
16755: PPUSH
16756: CALL_OW 12
16760: ARRAY
16761: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16762: LD_ADDR_OWVAR 40
16766: PUSH
16767: LD_VAR 0 8
16771: PUSH
16772: LD_INT 1
16774: PPUSH
16775: LD_VAR 0 8
16779: PPUSH
16780: CALL_OW 12
16784: ARRAY
16785: ST_TO_ADDR
// for j = 1 to RuWeapons do
16786: LD_ADDR_VAR 0 14
16790: PUSH
16791: DOUBLE
16792: LD_INT 1
16794: DEC
16795: ST_TO_ADDR
16796: LD_VAR 0 8
16800: PUSH
16801: FOR_TO
16802: IFFALSE 17004
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16804: LD_VAR 0 8
16808: PUSH
16809: LD_VAR 0 14
16813: ARRAY
16814: PUSH
16815: LD_INT 42
16817: EQUAL
16818: PUSH
16819: LD_VAR 0 8
16823: PUSH
16824: LD_VAR 0 14
16828: ARRAY
16829: PUSH
16830: LD_INT 43
16832: EQUAL
16833: OR
16834: PUSH
16835: LD_VAR 0 8
16839: PUSH
16840: LD_VAR 0 14
16844: ARRAY
16845: PUSH
16846: LD_INT 44
16848: EQUAL
16849: OR
16850: PUSH
16851: LD_VAR 0 8
16855: PUSH
16856: LD_VAR 0 14
16860: ARRAY
16861: PUSH
16862: LD_INT 45
16864: EQUAL
16865: OR
16866: PUSH
16867: LD_VAR 0 8
16871: PUSH
16872: LD_VAR 0 14
16876: ARRAY
16877: PUSH
16878: LD_INT 49
16880: EQUAL
16881: OR
16882: IFFALSE 16931
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16884: LD_ADDR_VAR 0 17
16888: PUSH
16889: LD_INT 21
16891: PUSH
16892: LD_INT 22
16894: PUSH
16895: LD_INT 23
16897: PUSH
16898: LD_INT 24
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16907: LD_ADDR_OWVAR 37
16911: PUSH
16912: LD_VAR 0 17
16916: PUSH
16917: LD_INT 1
16919: PPUSH
16920: LD_VAR 0 17
16924: PPUSH
16925: CALL_OW 12
16929: ARRAY
16930: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16931: LD_VAR 0 8
16935: PUSH
16936: LD_VAR 0 14
16940: ARRAY
16941: PUSH
16942: LD_INT 46
16944: EQUAL
16945: PUSH
16946: LD_VAR 0 8
16950: PUSH
16951: LD_VAR 0 14
16955: ARRAY
16956: PUSH
16957: LD_INT 47
16959: EQUAL
16960: OR
16961: IFFALSE 17002
// begin ruChassisTab = [ 23 , 24 ] ;
16963: LD_ADDR_VAR 0 17
16967: PUSH
16968: LD_INT 23
16970: PUSH
16971: LD_INT 24
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16978: LD_ADDR_OWVAR 37
16982: PUSH
16983: LD_VAR 0 17
16987: PUSH
16988: LD_INT 1
16990: PPUSH
16991: LD_VAR 0 17
16995: PPUSH
16996: CALL_OW 12
17000: ARRAY
17001: ST_TO_ADDR
// end ; end ;
17002: GO 16801
17004: POP
17005: POP
// veh = CreateVehicle ;
17006: LD_ADDR_VAR 0 16
17010: PUSH
17011: CALL_OW 45
17015: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17016: LD_VAR 0 16
17020: PPUSH
17021: LD_VAR 0 1
17025: PPUSH
17026: LD_INT 0
17028: PPUSH
17029: CALL_OW 49
// if vc_control = 1 then
17033: LD_OWVAR 38
17037: PUSH
17038: LD_INT 1
17040: EQUAL
17041: IFFALSE 17098
// begin hc_gallery =  ;
17043: LD_ADDR_OWVAR 33
17047: PUSH
17048: LD_STRING 
17050: ST_TO_ADDR
// hc_name =  ;
17051: LD_ADDR_OWVAR 26
17055: PUSH
17056: LD_STRING 
17058: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17059: LD_INT 0
17061: PPUSH
17062: LD_INT 3
17064: PPUSH
17065: LD_VAR 0 4
17069: PPUSH
17070: CALL_OW 380
// un = CreateHuman ;
17074: LD_ADDR_VAR 0 15
17078: PUSH
17079: CALL_OW 44
17083: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17084: LD_VAR 0 15
17088: PPUSH
17089: LD_VAR 0 16
17093: PPUSH
17094: CALL_OW 52
// end ; i = i + 1 ;
17098: LD_ADDR_VAR 0 13
17102: PUSH
17103: LD_VAR 0 13
17107: PUSH
17108: LD_INT 1
17110: PLUS
17111: ST_TO_ADDR
// end ; until i = vehCount ;
17112: LD_VAR 0 13
17116: PUSH
17117: LD_VAR 0 3
17121: EQUAL
17122: IFFALSE 15748
// repeat wait ( 0 0$1 ) ;
17124: LD_INT 35
17126: PPUSH
17127: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17131: LD_ADDR_VAR 0 20
17135: PUSH
17136: LD_INT 22
17138: PUSH
17139: LD_VAR 0 2
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 24
17160: PUSH
17161: LD_INT 650
17163: PUSH
17164: EMPTY
17165: LIST
17166: LIST
17167: PUSH
17168: EMPTY
17169: LIST
17170: LIST
17171: LIST
17172: PPUSH
17173: CALL_OW 69
17177: ST_TO_ADDR
// if vehicleOK_list > 0 then
17178: LD_VAR 0 20
17182: PUSH
17183: LD_INT 0
17185: GREATER
17186: IFFALSE 17377
// begin for i in vehicleOK_list do
17188: LD_ADDR_VAR 0 13
17192: PUSH
17193: LD_VAR 0 20
17197: PUSH
17198: FOR_IN
17199: IFFALSE 17375
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17201: LD_ADDR_VAR 0 21
17205: PUSH
17206: LD_INT 22
17208: PUSH
17209: LD_VAR 0 11
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PPUSH
17218: CALL_OW 69
17222: PPUSH
17223: LD_VAR 0 13
17227: PPUSH
17228: CALL_OW 74
17232: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17233: LD_ADDR_VAR 0 22
17237: PUSH
17238: LD_INT 22
17240: PUSH
17241: LD_VAR 0 11
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: LD_INT 59
17255: PUSH
17256: EMPTY
17257: LIST
17258: PUSH
17259: LD_INT 21
17261: PUSH
17262: LD_INT 1
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 21
17271: PUSH
17272: LD_INT 2
17274: PUSH
17275: EMPTY
17276: LIST
17277: LIST
17278: PUSH
17279: EMPTY
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: EMPTY
17290: LIST
17291: PPUSH
17292: CALL_OW 69
17296: PPUSH
17297: LD_VAR 0 13
17301: PPUSH
17302: CALL_OW 74
17306: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17307: LD_VAR 0 13
17311: PPUSH
17312: LD_VAR 0 21
17316: PPUSH
17317: CALL_OW 296
17321: PUSH
17322: LD_INT 8
17324: PLUS
17325: PUSH
17326: LD_VAR 0 13
17330: PPUSH
17331: LD_VAR 0 22
17335: PPUSH
17336: CALL_OW 296
17340: LESS
17341: IFFALSE 17359
// begin ComAttackUnit ( i , target1 ) ;
17343: LD_VAR 0 13
17347: PPUSH
17348: LD_VAR 0 21
17352: PPUSH
17353: CALL_OW 115
// end else
17357: GO 17373
// begin ComAttackUnit ( i , target2 ) ;
17359: LD_VAR 0 13
17363: PPUSH
17364: LD_VAR 0 22
17368: PPUSH
17369: CALL_OW 115
// end ; end ;
17373: GO 17198
17375: POP
17376: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17377: LD_INT 22
17379: PUSH
17380: LD_VAR 0 2
17384: PUSH
17385: EMPTY
17386: LIST
17387: LIST
17388: PUSH
17389: LD_INT 21
17391: PUSH
17392: LD_INT 2
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PPUSH
17403: CALL_OW 69
17407: PUSH
17408: LD_INT 0
17410: EQUAL
17411: IFFALSE 17124
// end ;
17413: LD_VAR 0 12
17417: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17418: LD_INT 0
17420: PPUSH
17421: PPUSH
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
17428: PPUSH
17429: PPUSH
17430: PPUSH
// for i = 1 to soldierCount do
17431: LD_ADDR_VAR 0 13
17435: PUSH
17436: DOUBLE
17437: LD_INT 1
17439: DEC
17440: ST_TO_ADDR
17441: LD_VAR 0 3
17445: PUSH
17446: FOR_TO
17447: IFFALSE 17529
// begin uc_side = side ;
17449: LD_ADDR_OWVAR 20
17453: PUSH
17454: LD_VAR 0 1
17458: ST_TO_ADDR
// uc_nation = nation ;
17459: LD_ADDR_OWVAR 21
17463: PUSH
17464: LD_VAR 0 2
17468: ST_TO_ADDR
// hc_name =  ;
17469: LD_ADDR_OWVAR 26
17473: PUSH
17474: LD_STRING 
17476: ST_TO_ADDR
// hc_gallery =  ;
17477: LD_ADDR_OWVAR 33
17481: PUSH
17482: LD_STRING 
17484: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17485: LD_INT 0
17487: PPUSH
17488: LD_INT 1
17490: PPUSH
17491: LD_VAR 0 8
17495: PPUSH
17496: CALL_OW 380
// un = CreateHuman ;
17500: LD_ADDR_VAR 0 15
17504: PUSH
17505: CALL_OW 44
17509: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17510: LD_VAR 0 15
17514: PPUSH
17515: LD_VAR 0 9
17519: PPUSH
17520: LD_INT 0
17522: PPUSH
17523: CALL_OW 49
// end ;
17527: GO 17446
17529: POP
17530: POP
// for i = 1 to sniperCount do
17531: LD_ADDR_VAR 0 13
17535: PUSH
17536: DOUBLE
17537: LD_INT 1
17539: DEC
17540: ST_TO_ADDR
17541: LD_VAR 0 4
17545: PUSH
17546: FOR_TO
17547: IFFALSE 17629
// begin uc_side = side ;
17549: LD_ADDR_OWVAR 20
17553: PUSH
17554: LD_VAR 0 1
17558: ST_TO_ADDR
// uc_nation = nation ;
17559: LD_ADDR_OWVAR 21
17563: PUSH
17564: LD_VAR 0 2
17568: ST_TO_ADDR
// hc_name =  ;
17569: LD_ADDR_OWVAR 26
17573: PUSH
17574: LD_STRING 
17576: ST_TO_ADDR
// hc_gallery =  ;
17577: LD_ADDR_OWVAR 33
17581: PUSH
17582: LD_STRING 
17584: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17585: LD_INT 0
17587: PPUSH
17588: LD_INT 5
17590: PPUSH
17591: LD_VAR 0 8
17595: PPUSH
17596: CALL_OW 380
// un = CreateHuman ;
17600: LD_ADDR_VAR 0 15
17604: PUSH
17605: CALL_OW 44
17609: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17610: LD_VAR 0 15
17614: PPUSH
17615: LD_VAR 0 9
17619: PPUSH
17620: LD_INT 0
17622: PPUSH
17623: CALL_OW 49
// end ;
17627: GO 17546
17629: POP
17630: POP
// for i = 1 to bazookCount do
17631: LD_ADDR_VAR 0 13
17635: PUSH
17636: DOUBLE
17637: LD_INT 1
17639: DEC
17640: ST_TO_ADDR
17641: LD_VAR 0 5
17645: PUSH
17646: FOR_TO
17647: IFFALSE 17729
// begin uc_side = side ;
17649: LD_ADDR_OWVAR 20
17653: PUSH
17654: LD_VAR 0 1
17658: ST_TO_ADDR
// uc_nation = nation ;
17659: LD_ADDR_OWVAR 21
17663: PUSH
17664: LD_VAR 0 2
17668: ST_TO_ADDR
// hc_name =  ;
17669: LD_ADDR_OWVAR 26
17673: PUSH
17674: LD_STRING 
17676: ST_TO_ADDR
// hc_gallery =  ;
17677: LD_ADDR_OWVAR 33
17681: PUSH
17682: LD_STRING 
17684: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17685: LD_INT 0
17687: PPUSH
17688: LD_INT 9
17690: PPUSH
17691: LD_VAR 0 8
17695: PPUSH
17696: CALL_OW 380
// un = CreateHuman ;
17700: LD_ADDR_VAR 0 15
17704: PUSH
17705: CALL_OW 44
17709: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17710: LD_VAR 0 15
17714: PPUSH
17715: LD_VAR 0 9
17719: PPUSH
17720: LD_INT 0
17722: PPUSH
17723: CALL_OW 49
// end ;
17727: GO 17646
17729: POP
17730: POP
// for i = 1 to mortalCount do
17731: LD_ADDR_VAR 0 13
17735: PUSH
17736: DOUBLE
17737: LD_INT 1
17739: DEC
17740: ST_TO_ADDR
17741: LD_VAR 0 6
17745: PUSH
17746: FOR_TO
17747: IFFALSE 17829
// begin uc_side = side ;
17749: LD_ADDR_OWVAR 20
17753: PUSH
17754: LD_VAR 0 1
17758: ST_TO_ADDR
// uc_nation = nation ;
17759: LD_ADDR_OWVAR 21
17763: PUSH
17764: LD_VAR 0 2
17768: ST_TO_ADDR
// hc_name =  ;
17769: LD_ADDR_OWVAR 26
17773: PUSH
17774: LD_STRING 
17776: ST_TO_ADDR
// hc_gallery =  ;
17777: LD_ADDR_OWVAR 33
17781: PUSH
17782: LD_STRING 
17784: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17785: LD_INT 0
17787: PPUSH
17788: LD_INT 8
17790: PPUSH
17791: LD_VAR 0 8
17795: PPUSH
17796: CALL_OW 380
// un = CreateHuman ;
17800: LD_ADDR_VAR 0 15
17804: PUSH
17805: CALL_OW 44
17809: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17810: LD_VAR 0 15
17814: PPUSH
17815: LD_VAR 0 9
17819: PPUSH
17820: LD_INT 0
17822: PPUSH
17823: CALL_OW 49
// end ;
17827: GO 17746
17829: POP
17830: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17831: LD_ADDR_VAR 0 18
17835: PUSH
17836: LD_INT 22
17838: PUSH
17839: LD_VAR 0 1
17843: PUSH
17844: EMPTY
17845: LIST
17846: LIST
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 1
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: LD_INT 25
17863: PUSH
17864: LD_INT 5
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 25
17873: PUSH
17874: LD_INT 8
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 25
17883: PUSH
17884: LD_INT 9
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: PPUSH
17902: CALL_OW 69
17906: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17907: LD_ADDR_VAR 0 17
17911: PUSH
17912: LD_INT 22
17914: PUSH
17915: LD_VAR 0 1
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 25
17926: PUSH
17927: LD_INT 4
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 69
17942: ST_TO_ADDR
// for i in medic_list do
17943: LD_ADDR_VAR 0 13
17947: PUSH
17948: LD_VAR 0 17
17952: PUSH
17953: FOR_IN
17954: IFFALSE 17972
// ComMoveToArea ( i , healArea ) ;
17956: LD_VAR 0 13
17960: PPUSH
17961: LD_VAR 0 10
17965: PPUSH
17966: CALL_OW 113
17970: GO 17953
17972: POP
17973: POP
// repeat wait ( 0 0$1 ) ;
17974: LD_INT 35
17976: PPUSH
17977: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17981: LD_ADDR_VAR 0 16
17985: PUSH
17986: LD_INT 22
17988: PUSH
17989: LD_VAR 0 1
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: LD_INT 1
18000: PUSH
18001: LD_INT 3
18003: PUSH
18004: LD_INT 24
18006: PUSH
18007: LD_INT 550
18009: PUSH
18010: EMPTY
18011: LIST
18012: LIST
18013: PUSH
18014: EMPTY
18015: LIST
18016: LIST
18017: PUSH
18018: LD_INT 24
18020: PUSH
18021: LD_INT 250
18023: PUSH
18024: EMPTY
18025: LIST
18026: LIST
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PPUSH
18037: CALL_OW 69
18041: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18042: LD_ADDR_VAR 0 18
18046: PUSH
18047: LD_INT 22
18049: PUSH
18050: LD_VAR 0 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 2
18061: PUSH
18062: LD_INT 25
18064: PUSH
18065: LD_INT 1
18067: PUSH
18068: EMPTY
18069: LIST
18070: LIST
18071: PUSH
18072: LD_INT 25
18074: PUSH
18075: LD_INT 5
18077: PUSH
18078: EMPTY
18079: LIST
18080: LIST
18081: PUSH
18082: LD_INT 25
18084: PUSH
18085: LD_INT 8
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 25
18094: PUSH
18095: LD_INT 9
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 24
18111: PUSH
18112: LD_INT 1000
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: ST_TO_ADDR
// if medicCount > 0 then
18129: LD_VAR 0 7
18133: PUSH
18134: LD_INT 0
18136: GREATER
18137: IFFALSE 18211
// begin if damageUnit_list > 0 then
18139: LD_VAR 0 16
18143: PUSH
18144: LD_INT 0
18146: GREATER
18147: IFFALSE 18211
// begin for i in damageUnit_list do
18149: LD_ADDR_VAR 0 13
18153: PUSH
18154: LD_VAR 0 16
18158: PUSH
18159: FOR_IN
18160: IFFALSE 18209
// begin ComMoveToArea ( i , healArea ) ;
18162: LD_VAR 0 13
18166: PPUSH
18167: LD_VAR 0 10
18171: PPUSH
18172: CALL_OW 113
// for j in medic_list do
18176: LD_ADDR_VAR 0 14
18180: PUSH
18181: LD_VAR 0 17
18185: PUSH
18186: FOR_IN
18187: IFFALSE 18205
// AddComHeal ( j , i ) ;
18189: LD_VAR 0 14
18193: PPUSH
18194: LD_VAR 0 13
18198: PPUSH
18199: CALL_OW 188
18203: GO 18186
18205: POP
18206: POP
// end ;
18207: GO 18159
18209: POP
18210: POP
// end ; end ; for i in soldiersOK_list do
18211: LD_ADDR_VAR 0 13
18215: PUSH
18216: LD_VAR 0 18
18220: PUSH
18221: FOR_IN
18222: IFFALSE 18398
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18224: LD_ADDR_VAR 0 21
18228: PUSH
18229: LD_INT 22
18231: PUSH
18232: LD_VAR 0 11
18236: PUSH
18237: EMPTY
18238: LIST
18239: LIST
18240: PPUSH
18241: CALL_OW 69
18245: PPUSH
18246: LD_VAR 0 13
18250: PPUSH
18251: CALL_OW 74
18255: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18256: LD_ADDR_VAR 0 22
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_VAR 0 11
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 59
18278: PUSH
18279: EMPTY
18280: LIST
18281: PUSH
18282: LD_INT 21
18284: PUSH
18285: LD_INT 1
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: PUSH
18292: LD_INT 21
18294: PUSH
18295: LD_INT 2
18297: PUSH
18298: EMPTY
18299: LIST
18300: LIST
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: LIST
18306: LIST
18307: PUSH
18308: EMPTY
18309: LIST
18310: LIST
18311: PUSH
18312: EMPTY
18313: LIST
18314: PPUSH
18315: CALL_OW 69
18319: PPUSH
18320: LD_VAR 0 13
18324: PPUSH
18325: CALL_OW 74
18329: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18330: LD_VAR 0 13
18334: PPUSH
18335: LD_VAR 0 21
18339: PPUSH
18340: CALL_OW 296
18344: PUSH
18345: LD_INT 8
18347: PLUS
18348: PUSH
18349: LD_VAR 0 13
18353: PPUSH
18354: LD_VAR 0 22
18358: PPUSH
18359: CALL_OW 296
18363: LESS
18364: IFFALSE 18382
// begin ComAttackUnit ( i , target1 ) ;
18366: LD_VAR 0 13
18370: PPUSH
18371: LD_VAR 0 21
18375: PPUSH
18376: CALL_OW 115
// end else
18380: GO 18396
// begin ComAttackUnit ( i , target2 ) ;
18382: LD_VAR 0 13
18386: PPUSH
18387: LD_VAR 0 22
18391: PPUSH
18392: CALL_OW 115
// end ; end ;
18396: GO 18221
18398: POP
18399: POP
// for i in soldiersOK_list do
18400: LD_ADDR_VAR 0 13
18404: PUSH
18405: LD_VAR 0 18
18409: PUSH
18410: FOR_IN
18411: IFFALSE 18587
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18413: LD_ADDR_VAR 0 21
18417: PUSH
18418: LD_INT 22
18420: PUSH
18421: LD_VAR 0 11
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PPUSH
18430: CALL_OW 69
18434: PPUSH
18435: LD_VAR 0 13
18439: PPUSH
18440: CALL_OW 74
18444: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18445: LD_ADDR_VAR 0 22
18449: PUSH
18450: LD_INT 22
18452: PUSH
18453: LD_VAR 0 11
18457: PUSH
18458: EMPTY
18459: LIST
18460: LIST
18461: PUSH
18462: LD_INT 2
18464: PUSH
18465: LD_INT 59
18467: PUSH
18468: EMPTY
18469: LIST
18470: PUSH
18471: LD_INT 21
18473: PUSH
18474: LD_INT 1
18476: PUSH
18477: EMPTY
18478: LIST
18479: LIST
18480: PUSH
18481: LD_INT 21
18483: PUSH
18484: LD_INT 2
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: LIST
18495: LIST
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: EMPTY
18502: LIST
18503: PPUSH
18504: CALL_OW 69
18508: PPUSH
18509: LD_VAR 0 13
18513: PPUSH
18514: CALL_OW 74
18518: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18519: LD_VAR 0 13
18523: PPUSH
18524: LD_VAR 0 21
18528: PPUSH
18529: CALL_OW 296
18533: PUSH
18534: LD_INT 8
18536: PLUS
18537: PUSH
18538: LD_VAR 0 13
18542: PPUSH
18543: LD_VAR 0 22
18547: PPUSH
18548: CALL_OW 296
18552: LESS
18553: IFFALSE 18571
// begin ComAttackUnit ( i , target1 ) ;
18555: LD_VAR 0 13
18559: PPUSH
18560: LD_VAR 0 21
18564: PPUSH
18565: CALL_OW 115
// end else
18569: GO 18585
// begin ComAttackUnit ( i , target2 ) ;
18571: LD_VAR 0 13
18575: PPUSH
18576: LD_VAR 0 22
18580: PPUSH
18581: CALL_OW 115
// end ; end ;
18585: GO 18410
18587: POP
18588: POP
// until soldiersOK_list = [ ] ;
18589: LD_VAR 0 18
18593: PUSH
18594: EMPTY
18595: EQUAL
18596: IFFALSE 17974
// end ;
18598: LD_VAR 0 12
18602: RET
// export function TameApemans ; var i , j ; begin
18603: LD_INT 0
18605: PPUSH
18606: PPUSH
18607: PPUSH
// repeat wait ( 0 0$1 ) ;
18608: LD_INT 35
18610: PPUSH
18611: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18615: LD_ADDR_VAR 0 2
18619: PUSH
18620: LD_INT 22
18622: PUSH
18623: LD_INT 2
18625: PUSH
18626: EMPTY
18627: LIST
18628: LIST
18629: PUSH
18630: LD_INT 25
18632: PUSH
18633: LD_INT 4
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PPUSH
18644: CALL_OW 69
18648: PUSH
18649: FOR_IN
18650: IFFALSE 18727
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18652: LD_ADDR_VAR 0 3
18656: PUSH
18657: LD_INT 5
18659: PPUSH
18660: LD_INT 22
18662: PUSH
18663: LD_INT 0
18665: PUSH
18666: EMPTY
18667: LIST
18668: LIST
18669: PUSH
18670: LD_INT 25
18672: PUSH
18673: LD_INT 12
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: PPUSH
18684: CALL_OW 70
18688: PUSH
18689: FOR_IN
18690: IFFALSE 18723
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18692: LD_VAR 0 2
18696: PPUSH
18697: LD_VAR 0 3
18701: PPUSH
18702: CALL_OW 250
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: CALL_OW 251
18716: PPUSH
18717: CALL_OW 191
// end ;
18721: GO 18689
18723: POP
18724: POP
// end ;
18725: GO 18649
18727: POP
18728: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18729: LD_INT 22
18731: PUSH
18732: LD_INT 2
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: LD_INT 25
18741: PUSH
18742: LD_INT 4
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PPUSH
18753: CALL_OW 69
18757: PUSH
18758: LD_INT 0
18760: EQUAL
18761: PUSH
18762: LD_INT 5
18764: PPUSH
18765: LD_INT 22
18767: PUSH
18768: LD_INT 0
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 12
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PPUSH
18789: CALL_OW 70
18793: PUSH
18794: LD_INT 0
18796: EQUAL
18797: OR
18798: IFFALSE 18608
// wait ( 0 0$30 ) ;
18800: LD_INT 1050
18802: PPUSH
18803: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18807: LD_ADDR_VAR 0 2
18811: PUSH
18812: LD_INT 22
18814: PUSH
18815: LD_INT 2
18817: PUSH
18818: EMPTY
18819: LIST
18820: LIST
18821: PUSH
18822: LD_INT 25
18824: PUSH
18825: LD_INT 12
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PPUSH
18836: CALL_OW 69
18840: PUSH
18841: FOR_IN
18842: IFFALSE 18906
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18844: LD_VAR 0 2
18848: PPUSH
18849: LD_EXP 43
18853: PPUSH
18854: CALL_OW 250
18858: PPUSH
18859: LD_EXP 43
18863: PPUSH
18864: CALL_OW 251
18868: PPUSH
18869: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18873: LD_VAR 0 2
18877: PPUSH
18878: LD_INT 16
18880: PUSH
18881: LD_INT 15
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: PUSH
18888: LD_INT 1
18890: PPUSH
18891: LD_INT 2
18893: PPUSH
18894: CALL_OW 12
18898: ARRAY
18899: PPUSH
18900: CALL_OW 336
// end ;
18904: GO 18841
18906: POP
18907: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: LD_INT 22
18915: PUSH
18916: LD_INT 2
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: PUSH
18923: LD_INT 25
18925: PUSH
18926: LD_INT 4
18928: PUSH
18929: EMPTY
18930: LIST
18931: LIST
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: PPUSH
18937: CALL_OW 69
18941: PUSH
18942: FOR_IN
18943: IFFALSE 18989
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18945: LD_VAR 0 2
18949: PPUSH
18950: LD_INT 22
18952: PUSH
18953: LD_INT 2
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 30
18962: PUSH
18963: LD_INT 8
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PPUSH
18974: CALL_OW 69
18978: PUSH
18979: LD_INT 1
18981: ARRAY
18982: PPUSH
18983: CALL_OW 120
18987: GO 18942
18989: POP
18990: POP
// end ;
18991: LD_VAR 0 1
18995: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18996: LD_INT 0
18998: PPUSH
18999: PPUSH
19000: PPUSH
19001: PPUSH
19002: PPUSH
19003: PPUSH
19004: PPUSH
19005: PPUSH
19006: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19007: LD_INT 22
19009: PUSH
19010: LD_VAR 0 1
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 21
19021: PUSH
19022: LD_INT 2
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: PUSH
19038: LD_VAR 0 3
19042: LESSEQUAL
19043: IFFALSE 19187
// for i = 1 to vehCount do
19045: LD_ADDR_VAR 0 10
19049: PUSH
19050: DOUBLE
19051: LD_INT 1
19053: DEC
19054: ST_TO_ADDR
19055: LD_VAR 0 3
19059: PUSH
19060: FOR_TO
19061: IFFALSE 19185
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19063: LD_ADDR_VAR 0 12
19067: PUSH
19068: LD_VAR 0 5
19072: PUSH
19073: LD_INT 1
19075: PPUSH
19076: LD_VAR 0 5
19080: PPUSH
19081: CALL_OW 12
19085: ARRAY
19086: ST_TO_ADDR
// if randWeapon = 46 then
19087: LD_VAR 0 12
19091: PUSH
19092: LD_INT 46
19094: EQUAL
19095: IFFALSE 19140
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19097: LD_VAR 0 2
19101: PPUSH
19102: LD_INT 24
19104: PPUSH
19105: LD_VAR 0 6
19109: PPUSH
19110: LD_VAR 0 7
19114: PUSH
19115: LD_INT 1
19117: PPUSH
19118: LD_VAR 0 7
19122: PPUSH
19123: CALL_OW 12
19127: ARRAY
19128: PPUSH
19129: LD_VAR 0 12
19133: PPUSH
19134: CALL_OW 185
19138: GO 19183
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19140: LD_VAR 0 2
19144: PPUSH
19145: LD_VAR 0 8
19149: PPUSH
19150: LD_VAR 0 6
19154: PPUSH
19155: LD_VAR 0 7
19159: PUSH
19160: LD_INT 1
19162: PPUSH
19163: LD_VAR 0 7
19167: PPUSH
19168: CALL_OW 12
19172: ARRAY
19173: PPUSH
19174: LD_VAR 0 12
19178: PPUSH
19179: CALL_OW 185
// end ;
19183: GO 19060
19185: POP
19186: POP
// repeat wait ( 0 0$1 ) ;
19187: LD_INT 35
19189: PPUSH
19190: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19194: LD_INT 22
19196: PUSH
19197: LD_VAR 0 1
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PUSH
19206: LD_INT 21
19208: PUSH
19209: LD_INT 2
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: PUSH
19216: LD_INT 24
19218: PUSH
19219: LD_INT 250
19221: PUSH
19222: EMPTY
19223: LIST
19224: LIST
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: LIST
19230: PPUSH
19231: CALL_OW 69
19235: PUSH
19236: LD_VAR 0 3
19240: GREATEREQUAL
19241: IFFALSE 19187
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19243: LD_INT 22
19245: PUSH
19246: LD_VAR 0 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 2
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: LD_INT 24
19267: PUSH
19268: LD_INT 250
19270: PUSH
19271: EMPTY
19272: LIST
19273: LIST
19274: PUSH
19275: EMPTY
19276: LIST
19277: LIST
19278: LIST
19279: PPUSH
19280: CALL_OW 69
19284: PUSH
19285: LD_VAR 0 3
19289: GREATEREQUAL
19290: IFFALSE 19633
// begin repeat begin wait ( 0 0$1 ) ;
19292: LD_INT 35
19294: PPUSH
19295: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19299: LD_INT 22
19301: PUSH
19302: LD_VAR 0 1
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PUSH
19311: LD_INT 21
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: EMPTY
19318: LIST
19319: LIST
19320: PUSH
19321: LD_INT 24
19323: PUSH
19324: LD_INT 651
19326: PUSH
19327: EMPTY
19328: LIST
19329: LIST
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: LIST
19335: PPUSH
19336: CALL_OW 69
19340: PUSH
19341: LD_INT 0
19343: GREATER
19344: IFFALSE 19572
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19346: LD_ADDR_VAR 0 10
19350: PUSH
19351: LD_INT 22
19353: PUSH
19354: LD_VAR 0 1
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: LD_INT 21
19365: PUSH
19366: LD_INT 2
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: PUSH
19373: LD_INT 24
19375: PUSH
19376: LD_INT 651
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PUSH
19383: EMPTY
19384: LIST
19385: LIST
19386: LIST
19387: PPUSH
19388: CALL_OW 69
19392: PUSH
19393: FOR_IN
19394: IFFALSE 19570
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19396: LD_ADDR_VAR 0 16
19400: PUSH
19401: LD_INT 22
19403: PUSH
19404: LD_VAR 0 4
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PPUSH
19413: CALL_OW 69
19417: PPUSH
19418: LD_VAR 0 10
19422: PPUSH
19423: CALL_OW 74
19427: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19428: LD_ADDR_VAR 0 17
19432: PUSH
19433: LD_INT 22
19435: PUSH
19436: LD_VAR 0 4
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: PUSH
19445: LD_INT 2
19447: PUSH
19448: LD_INT 59
19450: PUSH
19451: EMPTY
19452: LIST
19453: PUSH
19454: LD_INT 21
19456: PUSH
19457: LD_INT 1
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 2
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: PUSH
19480: EMPTY
19481: LIST
19482: LIST
19483: PUSH
19484: EMPTY
19485: LIST
19486: PPUSH
19487: CALL_OW 69
19491: PPUSH
19492: LD_VAR 0 10
19496: PPUSH
19497: CALL_OW 74
19501: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19502: LD_VAR 0 10
19506: PPUSH
19507: LD_VAR 0 16
19511: PPUSH
19512: CALL_OW 296
19516: PUSH
19517: LD_INT 8
19519: PLUS
19520: PUSH
19521: LD_VAR 0 10
19525: PPUSH
19526: LD_VAR 0 17
19530: PPUSH
19531: CALL_OW 296
19535: LESS
19536: IFFALSE 19554
// begin ComAttackUnit ( i , target1 ) ;
19538: LD_VAR 0 10
19542: PPUSH
19543: LD_VAR 0 16
19547: PPUSH
19548: CALL_OW 115
// end else
19552: GO 19568
// begin ComAttackUnit ( i , target2 ) ;
19554: LD_VAR 0 10
19558: PPUSH
19559: LD_VAR 0 17
19563: PPUSH
19564: CALL_OW 115
// end ; end ;
19568: GO 19393
19570: POP
19571: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19572: LD_INT 22
19574: PUSH
19575: LD_VAR 0 1
19579: PUSH
19580: EMPTY
19581: LIST
19582: LIST
19583: PUSH
19584: LD_INT 21
19586: PUSH
19587: LD_INT 2
19589: PUSH
19590: EMPTY
19591: LIST
19592: LIST
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PPUSH
19598: CALL_OW 69
19602: PUSH
19603: LD_INT 0
19605: EQUAL
19606: PUSH
19607: LD_INT 22
19609: PUSH
19610: LD_VAR 0 4
19614: PUSH
19615: EMPTY
19616: LIST
19617: LIST
19618: PUSH
19619: EMPTY
19620: LIST
19621: PPUSH
19622: CALL_OW 69
19626: PUSH
19627: LD_INT 0
19629: EQUAL
19630: OR
19631: IFFALSE 19292
// end ; end ;
19633: LD_VAR 0 9
19637: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19638: LD_INT 0
19640: PPUSH
19641: PPUSH
19642: PPUSH
19643: PPUSH
// r := 100 ;
19644: LD_ADDR_VAR 0 5
19648: PUSH
19649: LD_INT 100
19651: ST_TO_ADDR
// x := 0 ;
19652: LD_ADDR_VAR 0 6
19656: PUSH
19657: LD_INT 0
19659: ST_TO_ADDR
// while ( x < n ) do
19660: LD_VAR 0 6
19664: PUSH
19665: LD_VAR 0 2
19669: LESS
19670: IFFALSE 19957
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19672: LD_ADDR_VAR 0 4
19676: PUSH
19677: DOUBLE
19678: LD_INT 1
19680: DEC
19681: ST_TO_ADDR
19682: LD_VAR 0 1
19686: PPUSH
19687: LD_INT 0
19689: PPUSH
19690: CALL_OW 517
19694: PUSH
19695: LD_INT 1
19697: ARRAY
19698: PUSH
19699: FOR_TO
19700: IFFALSE 19953
// begin if r > 50 then
19702: LD_VAR 0 5
19706: PUSH
19707: LD_INT 50
19709: GREATER
19710: IFFALSE 19929
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19712: LD_VAR 0 1
19716: PPUSH
19717: LD_INT 0
19719: PPUSH
19720: CALL_OW 517
19724: PUSH
19725: LD_INT 1
19727: ARRAY
19728: PUSH
19729: LD_VAR 0 4
19733: ARRAY
19734: PPUSH
19735: LD_VAR 0 1
19739: PPUSH
19740: LD_INT 0
19742: PPUSH
19743: CALL_OW 517
19747: PUSH
19748: LD_INT 2
19750: ARRAY
19751: PUSH
19752: LD_VAR 0 4
19756: ARRAY
19757: PPUSH
19758: CALL_OW 458
19762: NOT
19763: IFFALSE 19913
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19765: LD_VAR 0 1
19769: PPUSH
19770: LD_INT 0
19772: PPUSH
19773: CALL_OW 517
19777: PUSH
19778: LD_INT 1
19780: ARRAY
19781: PUSH
19782: LD_VAR 0 4
19786: ARRAY
19787: PPUSH
19788: LD_VAR 0 1
19792: PPUSH
19793: LD_INT 0
19795: PPUSH
19796: CALL_OW 517
19800: PUSH
19801: LD_INT 2
19803: ARRAY
19804: PUSH
19805: LD_VAR 0 4
19809: ARRAY
19810: PPUSH
19811: LD_INT 5
19813: PPUSH
19814: LD_INT 0
19816: PPUSH
19817: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19821: LD_ADDR_EXP 50
19825: PUSH
19826: LD_EXP 50
19830: PPUSH
19831: LD_INT 1
19833: PPUSH
19834: LD_VAR 0 1
19838: PPUSH
19839: LD_INT 0
19841: PPUSH
19842: CALL_OW 517
19846: PUSH
19847: LD_INT 1
19849: ARRAY
19850: PUSH
19851: LD_VAR 0 4
19855: ARRAY
19856: PUSH
19857: LD_VAR 0 1
19861: PPUSH
19862: LD_INT 0
19864: PPUSH
19865: CALL_OW 517
19869: PUSH
19870: LD_INT 2
19872: ARRAY
19873: PUSH
19874: LD_VAR 0 4
19878: ARRAY
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PPUSH
19884: CALL_OW 2
19888: ST_TO_ADDR
// r := 0 ;
19889: LD_ADDR_VAR 0 5
19893: PUSH
19894: LD_INT 0
19896: ST_TO_ADDR
// x := x + 1 ;
19897: LD_ADDR_VAR 0 6
19901: PUSH
19902: LD_VAR 0 6
19906: PUSH
19907: LD_INT 1
19909: PLUS
19910: ST_TO_ADDR
// end else
19911: GO 19927
// r := r + 35 ;
19913: LD_ADDR_VAR 0 5
19917: PUSH
19918: LD_VAR 0 5
19922: PUSH
19923: LD_INT 35
19925: PLUS
19926: ST_TO_ADDR
// end else
19927: GO 19951
// r := r + rand ( 10 , 25 ) ;
19929: LD_ADDR_VAR 0 5
19933: PUSH
19934: LD_VAR 0 5
19938: PUSH
19939: LD_INT 10
19941: PPUSH
19942: LD_INT 25
19944: PPUSH
19945: CALL_OW 12
19949: PLUS
19950: ST_TO_ADDR
// end ;
19951: GO 19699
19953: POP
19954: POP
19955: GO 19660
// end ; end_of_file
19957: LD_VAR 0 3
19961: RET
// every 0 0$1 trigger russianAI = 1 do
19962: LD_EXP 39
19966: PUSH
19967: LD_INT 1
19969: EQUAL
19970: IFFALSE 20189
19972: GO 19974
19974: DISABLE
// begin enable ;
19975: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19976: LD_INT 3
19978: PPUSH
19979: LD_EXP 30
19983: PPUSH
19984: CALL 14600 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19988: LD_INT 3
19990: PPUSH
19991: LD_EXP 42
19995: PPUSH
19996: CALL 14960 0 2
// if ruPossition = 1 then
20000: LD_EXP 41
20004: PUSH
20005: LD_INT 1
20007: EQUAL
20008: IFFALSE 20063
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20010: LD_INT 3
20012: PPUSH
20013: LD_INT 13
20015: PPUSH
20016: LD_INT 10
20018: PPUSH
20019: LD_INT 22
20021: PUSH
20022: LD_INT 3
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 21
20031: PUSH
20032: LD_INT 3
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: LD_INT 30
20041: PUSH
20042: LD_INT 8
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: LIST
20053: PPUSH
20054: CALL_OW 69
20058: PPUSH
20059: CALL 15166 0 4
// if ruPossition = 2 then
20063: LD_EXP 41
20067: PUSH
20068: LD_INT 2
20070: EQUAL
20071: IFFALSE 20126
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20073: LD_INT 3
20075: PPUSH
20076: LD_INT 14
20078: PPUSH
20079: LD_INT 11
20081: PPUSH
20082: LD_INT 22
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 21
20094: PUSH
20095: LD_INT 3
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: LD_INT 30
20104: PUSH
20105: LD_INT 8
20107: PUSH
20108: EMPTY
20109: LIST
20110: LIST
20111: PUSH
20112: EMPTY
20113: LIST
20114: LIST
20115: LIST
20116: PPUSH
20117: CALL_OW 69
20121: PPUSH
20122: CALL 15166 0 4
// if ruPossition = 3 then
20126: LD_EXP 41
20130: PUSH
20131: LD_INT 3
20133: EQUAL
20134: IFFALSE 20189
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20136: LD_INT 3
20138: PPUSH
20139: LD_INT 15
20141: PPUSH
20142: LD_INT 12
20144: PPUSH
20145: LD_INT 22
20147: PUSH
20148: LD_INT 3
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 21
20157: PUSH
20158: LD_INT 3
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: PUSH
20165: LD_INT 30
20167: PUSH
20168: LD_INT 8
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: PPUSH
20185: CALL 15166 0 4
// end ;
20189: END
// every 0 0$1 do
20190: GO 20192
20192: DISABLE
// begin enable ;
20193: ENABLE
// if ruPossition = 1 then
20194: LD_EXP 41
20198: PUSH
20199: LD_INT 1
20201: EQUAL
20202: IFFALSE 20214
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20204: LD_INT 3
20206: PPUSH
20207: LD_INT 10
20209: PPUSH
20210: CALL 14237 0 2
// if ruPossition = 2 then
20214: LD_EXP 41
20218: PUSH
20219: LD_INT 2
20221: EQUAL
20222: IFFALSE 20234
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20224: LD_INT 3
20226: PPUSH
20227: LD_INT 11
20229: PPUSH
20230: CALL 14237 0 2
// if ruPossition = 3 then
20234: LD_EXP 41
20238: PUSH
20239: LD_INT 3
20241: EQUAL
20242: IFFALSE 20254
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20244: LD_INT 3
20246: PPUSH
20247: LD_INT 12
20249: PPUSH
20250: CALL 14237 0 2
// IntBazooka ( 3 , 1 ) ;
20254: LD_INT 3
20256: PPUSH
20257: LD_INT 1
20259: PPUSH
20260: CALL 13036 0 2
// IntBazooka ( 6 , 1 ) ;
20264: LD_INT 6
20266: PPUSH
20267: LD_INT 1
20269: PPUSH
20270: CALL 13036 0 2
// end ;
20274: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20275: LD_EXP 39
20279: PUSH
20280: LD_INT 1
20282: EQUAL
20283: PUSH
20284: LD_EXP 35
20288: PPUSH
20289: CALL_OW 302
20293: AND
20294: PUSH
20295: LD_EXP 35
20299: PPUSH
20300: CALL_OW 255
20304: PUSH
20305: LD_INT 3
20307: EQUAL
20308: AND
20309: PUSH
20310: LD_INT 22
20312: PUSH
20313: LD_INT 3
20315: PUSH
20316: EMPTY
20317: LIST
20318: LIST
20319: PUSH
20320: LD_INT 21
20322: PUSH
20323: LD_INT 2
20325: PUSH
20326: EMPTY
20327: LIST
20328: LIST
20329: PUSH
20330: LD_INT 33
20332: PUSH
20333: LD_INT 3
20335: PUSH
20336: EMPTY
20337: LIST
20338: LIST
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: LIST
20344: PPUSH
20345: CALL_OW 69
20349: PUSH
20350: LD_INT 0
20352: EQUAL
20353: AND
20354: IFFALSE 20562
20356: GO 20358
20358: DISABLE
// begin enable ;
20359: ENABLE
// if Difficulty = 1 then
20360: LD_OWVAR 67
20364: PUSH
20365: LD_INT 1
20367: EQUAL
20368: IFFALSE 20430
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20370: LD_INT 3
20372: PPUSH
20373: LD_EXP 35
20377: PPUSH
20378: LD_INT 5
20380: PPUSH
20381: LD_INT 8
20383: PPUSH
20384: CALL_OW 12
20388: PPUSH
20389: LD_INT 1
20391: PPUSH
20392: LD_INT 43
20394: PUSH
20395: LD_INT 44
20397: PUSH
20398: LD_INT 45
20400: PUSH
20401: LD_INT 46
20403: PUSH
20404: EMPTY
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: PPUSH
20410: LD_INT 1
20412: PPUSH
20413: LD_INT 3
20415: PUSH
20416: LD_INT 3
20418: PUSH
20419: EMPTY
20420: LIST
20421: LIST
20422: PPUSH
20423: LD_INT 22
20425: PPUSH
20426: CALL 18996 0 8
// if Difficulty = 2 then
20430: LD_OWVAR 67
20434: PUSH
20435: LD_INT 2
20437: EQUAL
20438: IFFALSE 20496
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20440: LD_INT 3
20442: PPUSH
20443: LD_EXP 35
20447: PPUSH
20448: LD_INT 6
20450: PPUSH
20451: LD_INT 8
20453: PPUSH
20454: CALL_OW 12
20458: PPUSH
20459: LD_INT 1
20461: PPUSH
20462: LD_INT 44
20464: PUSH
20465: LD_INT 45
20467: PUSH
20468: LD_INT 46
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: PPUSH
20476: LD_INT 1
20478: PPUSH
20479: LD_INT 3
20481: PUSH
20482: LD_INT 3
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PPUSH
20489: LD_INT 22
20491: PPUSH
20492: CALL 18996 0 8
// if Difficulty = 3 then
20496: LD_OWVAR 67
20500: PUSH
20501: LD_INT 3
20503: EQUAL
20504: IFFALSE 20562
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20506: LD_INT 3
20508: PPUSH
20509: LD_EXP 35
20513: PPUSH
20514: LD_INT 7
20516: PPUSH
20517: LD_INT 8
20519: PPUSH
20520: CALL_OW 12
20524: PPUSH
20525: LD_INT 1
20527: PPUSH
20528: LD_INT 44
20530: PUSH
20531: LD_INT 45
20533: PUSH
20534: LD_INT 46
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: LIST
20541: PPUSH
20542: LD_INT 1
20544: PPUSH
20545: LD_INT 3
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: LD_INT 22
20557: PPUSH
20558: CALL 18996 0 8
// end ;
20562: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20563: LD_EXP 50
20567: PUSH
20568: LD_EXP 49
20572: AND
20573: IFFALSE 20694
20575: GO 20577
20577: DISABLE
20578: LD_INT 0
20580: PPUSH
// begin enable ;
20581: ENABLE
// for i in arabianMines do
20582: LD_ADDR_VAR 0 1
20586: PUSH
20587: LD_EXP 50
20591: PUSH
20592: FOR_IN
20593: IFFALSE 20692
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20595: LD_INT 22
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: LD_INT 92
20607: PUSH
20608: LD_VAR 0 1
20612: PUSH
20613: LD_INT 1
20615: ARRAY
20616: PUSH
20617: LD_VAR 0 1
20621: PUSH
20622: LD_INT 2
20624: ARRAY
20625: PUSH
20626: LD_INT 3
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PPUSH
20639: CALL_OW 69
20643: IFFALSE 20690
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20645: LD_VAR 0 1
20649: PUSH
20650: LD_INT 1
20652: ARRAY
20653: PPUSH
20654: LD_VAR 0 1
20658: PUSH
20659: LD_INT 2
20661: ARRAY
20662: PPUSH
20663: LD_INT 5
20665: PPUSH
20666: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20670: LD_ADDR_EXP 50
20674: PUSH
20675: LD_EXP 50
20679: PPUSH
20680: LD_VAR 0 1
20684: PPUSH
20685: CALL_OW 3
20689: ST_TO_ADDR
// end ; end ;
20690: GO 20592
20692: POP
20693: POP
// end ; end_of_file
20694: PPOPN 1
20696: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20697: LD_VAR 0 1
20701: PPUSH
20702: CALL_OW 255
20706: PUSH
20707: LD_INT 4
20709: EQUAL
20710: IFFALSE 20724
// SetBName ( building , epsilon ) ;
20712: LD_VAR 0 1
20716: PPUSH
20717: LD_STRING epsilon
20719: PPUSH
20720: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20724: LD_VAR 0 1
20728: PPUSH
20729: CALL_OW 255
20733: PUSH
20734: LD_INT 1
20736: EQUAL
20737: PUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: CALL_OW 266
20747: PUSH
20748: LD_INT 0
20750: EQUAL
20751: AND
20752: IFFALSE 20766
// SetBName ( building , epsilon ) ;
20754: LD_VAR 0 1
20758: PPUSH
20759: LD_STRING epsilon
20761: PPUSH
20762: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20766: LD_VAR 0 1
20770: PPUSH
20771: CALL_OW 255
20775: PUSH
20776: LD_INT 3
20778: EQUAL
20779: PUSH
20780: LD_VAR 0 1
20784: PPUSH
20785: CALL_OW 266
20789: PUSH
20790: LD_INT 0
20792: EQUAL
20793: AND
20794: IFFALSE 20808
// SetBName ( building , chuikov ) ;
20796: LD_VAR 0 1
20800: PPUSH
20801: LD_STRING chuikov
20803: PPUSH
20804: CALL_OW 500
// if GetSide ( building ) = 2 then
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 255
20817: PUSH
20818: LD_INT 2
20820: EQUAL
20821: IFFALSE 20877
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20823: LD_VAR 0 1
20827: PPUSH
20828: CALL_OW 266
20832: PUSH
20833: LD_INT 6
20835: EQUAL
20836: PUSH
20837: LD_VAR 0 1
20841: PPUSH
20842: CALL_OW 266
20846: PUSH
20847: LD_INT 9
20849: EQUAL
20850: OR
20851: IFFALSE 20877
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20853: LD_VAR 0 1
20857: PPUSH
20858: LD_INT 10
20860: PPUSH
20861: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20865: LD_VAR 0 1
20869: PPUSH
20870: LD_INT 11
20872: PPUSH
20873: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 255
20886: PUSH
20887: LD_INT 3
20889: EQUAL
20890: IFFALSE 20916
// begin if GetBType ( building ) = 2 then
20892: LD_VAR 0 1
20896: PPUSH
20897: CALL_OW 266
20901: PUSH
20902: LD_INT 2
20904: EQUAL
20905: IFFALSE 20916
// AddComUpgrade ( building ) ;
20907: LD_VAR 0 1
20911: PPUSH
20912: CALL_OW 206
// end ; end ;
20916: PPOPN 2
20918: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20919: LD_INT 0
20921: PPUSH
20922: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20923: LD_VAR 0 1
20927: PUSH
20928: LD_INT 22
20930: PUSH
20931: LD_INT 3
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 23
20940: PUSH
20941: LD_INT 3
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 21
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: LIST
20962: PPUSH
20963: CALL_OW 69
20967: IN
20968: PUSH
20969: LD_EXP 58
20973: NOT
20974: AND
20975: IFFALSE 21006
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20977: LD_ADDR_EXP 58
20981: PUSH
20982: LD_VAR 0 1
20986: PPUSH
20987: CALL_OW 250
20991: PUSH
20992: LD_VAR 0 1
20996: PPUSH
20997: CALL_OW 251
21001: PUSH
21002: EMPTY
21003: LIST
21004: LIST
21005: ST_TO_ADDR
// end ;
21006: PPOPN 3
21008: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21009: LD_VAR 0 2
21013: PPUSH
21014: CALL_OW 255
21018: PUSH
21019: LD_INT 3
21021: EQUAL
21022: PUSH
21023: LD_EXP 35
21027: PPUSH
21028: CALL_OW 255
21032: PUSH
21033: LD_INT 3
21035: EQUAL
21036: AND
21037: PUSH
21038: LD_EXP 35
21042: PPUSH
21043: CALL_OW 302
21047: AND
21048: IFFALSE 21064
// ComEnterUnit ( human , ruFab ) ;
21050: LD_VAR 0 2
21054: PPUSH
21055: LD_EXP 35
21059: PPUSH
21060: CALL_OW 120
// end ;
21064: PPOPN 2
21066: END
// on BuildingComplete ( building ) do var i ;
21067: LD_INT 0
21069: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21070: LD_VAR 0 1
21074: PPUSH
21075: CALL_OW 255
21079: PUSH
21080: LD_INT 1
21082: EQUAL
21083: PUSH
21084: LD_EXP 61
21088: PUSH
21089: LD_INT 0
21091: EQUAL
21092: AND
21093: IFFALSE 21295
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21095: LD_VAR 0 1
21099: PPUSH
21100: CALL_OW 266
21104: PUSH
21105: LD_INT 26
21107: EQUAL
21108: PUSH
21109: LD_VAR 0 1
21113: PPUSH
21114: CALL_OW 266
21118: PUSH
21119: LD_INT 27
21121: EQUAL
21122: OR
21123: PUSH
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 266
21133: PUSH
21134: LD_INT 28
21136: EQUAL
21137: OR
21138: IFFALSE 21295
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21140: LD_INT 22
21142: PUSH
21143: LD_INT 1
21145: PUSH
21146: EMPTY
21147: LIST
21148: LIST
21149: PUSH
21150: LD_INT 2
21152: PUSH
21153: LD_INT 30
21155: PUSH
21156: LD_INT 7
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 30
21165: PUSH
21166: LD_INT 8
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PUSH
21178: EMPTY
21179: LIST
21180: LIST
21181: PPUSH
21182: CALL_OW 69
21186: PUSH
21187: LD_INT 0
21189: GREATER
21190: IFFALSE 21295
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21192: LD_ADDR_VAR 0 2
21196: PUSH
21197: LD_INT 22
21199: PUSH
21200: LD_INT 1
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: PUSH
21207: LD_INT 2
21209: PUSH
21210: LD_INT 30
21212: PUSH
21213: LD_INT 7
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 30
21222: PUSH
21223: LD_INT 8
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: LIST
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: PPUSH
21239: CALL_OW 69
21243: PUSH
21244: FOR_IN
21245: IFFALSE 21293
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21247: LD_VAR 0 2
21251: PPUSH
21252: LD_INT 1
21254: PPUSH
21255: CALL_OW 268
21259: PUSH
21260: LD_INT 11
21262: EQUAL
21263: PUSH
21264: LD_VAR 0 2
21268: PPUSH
21269: LD_INT 2
21271: PPUSH
21272: CALL_OW 268
21276: PUSH
21277: LD_INT 11
21279: EQUAL
21280: OR
21281: IFFALSE 21291
// eventVar1 = 1 ;
21283: LD_ADDR_EXP 61
21287: PUSH
21288: LD_INT 1
21290: ST_TO_ADDR
21291: GO 21244
21293: POP
21294: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21295: LD_VAR 0 1
21299: PPUSH
21300: CALL_OW 255
21304: PUSH
21305: LD_INT 3
21307: EQUAL
21308: IFFALSE 21788
// begin if GetBType ( building ) = b_depot then
21310: LD_VAR 0 1
21314: PPUSH
21315: CALL_OW 266
21319: PUSH
21320: LD_INT 0
21322: EQUAL
21323: IFFALSE 21395
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21325: LD_VAR 0 1
21329: PPUSH
21330: CALL_OW 274
21334: PPUSH
21335: LD_INT 1
21337: PPUSH
21338: LD_INT 5000
21340: PPUSH
21341: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21345: LD_VAR 0 1
21349: PPUSH
21350: CALL_OW 274
21354: PPUSH
21355: LD_INT 2
21357: PPUSH
21358: LD_INT 5000
21360: PPUSH
21361: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21365: LD_VAR 0 1
21369: PPUSH
21370: CALL_OW 274
21374: PPUSH
21375: LD_INT 3
21377: PPUSH
21378: LD_INT 5000
21380: PPUSH
21381: CALL_OW 277
// ruDepot = building ;
21385: LD_ADDR_EXP 30
21389: PUSH
21390: LD_VAR 0 1
21394: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21395: LD_VAR 0 1
21399: PPUSH
21400: CALL_OW 266
21404: PUSH
21405: LD_INT 0
21407: EQUAL
21408: PUSH
21409: LD_VAR 0 1
21413: PPUSH
21414: CALL_OW 266
21418: PUSH
21419: LD_INT 2
21421: EQUAL
21422: OR
21423: PUSH
21424: LD_VAR 0 1
21428: PPUSH
21429: CALL_OW 266
21433: PUSH
21434: LD_INT 4
21436: EQUAL
21437: OR
21438: IFFALSE 21449
// ComUpgrade ( building ) ;
21440: LD_VAR 0 1
21444: PPUSH
21445: CALL_OW 146
// if GetBType ( building ) = b_lab then
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 266
21458: PUSH
21459: LD_INT 6
21461: EQUAL
21462: IFFALSE 21665
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21464: LD_INT 22
21466: PUSH
21467: LD_INT 3
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 8
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PPUSH
21488: CALL_OW 69
21492: PUSH
21493: LD_INT 0
21495: EQUAL
21496: IFFALSE 21534
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21498: LD_VAR 0 1
21502: PPUSH
21503: LD_INT 10
21505: PPUSH
21506: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21510: LD_VAR 0 1
21514: PPUSH
21515: LD_INT 12
21517: PPUSH
21518: CALL_OW 207
// ruLab1 = building ;
21522: LD_ADDR_EXP 31
21526: PUSH
21527: LD_VAR 0 1
21531: ST_TO_ADDR
// end else
21532: GO 21568
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21534: LD_VAR 0 1
21538: PPUSH
21539: LD_INT 11
21541: PPUSH
21542: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21546: LD_VAR 0 1
21550: PPUSH
21551: LD_INT 14
21553: PPUSH
21554: CALL_OW 207
// ruLab2 = building ;
21558: LD_ADDR_EXP 32
21562: PUSH
21563: LD_VAR 0 1
21567: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21568: LD_INT 3
21570: PPUSH
21571: LD_VAR 0 1
21575: PPUSH
21576: LD_INT 3
21578: PPUSH
21579: CALL 14152 0 3
// if ruDestroyedBuildings > 0 then
21583: LD_EXP 42
21587: PUSH
21588: LD_INT 0
21590: GREATER
21591: IFFALSE 21665
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21593: LD_ADDR_EXP 42
21597: PUSH
21598: LD_EXP 42
21602: PPUSH
21603: LD_INT 1
21605: PPUSH
21606: CALL_OW 3
21610: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21611: LD_ADDR_EXP 42
21615: PUSH
21616: LD_EXP 42
21620: PPUSH
21621: LD_INT 1
21623: PPUSH
21624: CALL_OW 3
21628: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21629: LD_ADDR_EXP 42
21633: PUSH
21634: LD_EXP 42
21638: PPUSH
21639: LD_INT 1
21641: PPUSH
21642: CALL_OW 3
21646: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21647: LD_ADDR_EXP 42
21651: PUSH
21652: LD_EXP 42
21656: PPUSH
21657: LD_INT 1
21659: PPUSH
21660: CALL_OW 3
21664: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21665: LD_VAR 0 1
21669: PPUSH
21670: CALL_OW 266
21674: PUSH
21675: LD_INT 32
21677: EQUAL
21678: IFFALSE 21715
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21680: LD_VAR 0 1
21684: PPUSH
21685: LD_INT 44
21687: PUSH
21688: LD_INT 45
21690: PUSH
21691: LD_INT 46
21693: PUSH
21694: EMPTY
21695: LIST
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 1
21701: PPUSH
21702: LD_INT 3
21704: PPUSH
21705: CALL_OW 12
21709: ARRAY
21710: PPUSH
21711: CALL_OW 208
// if GetBType ( building ) = b_turret then
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 266
21724: PUSH
21725: LD_INT 33
21727: EQUAL
21728: IFFALSE 21765
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21730: LD_VAR 0 1
21734: PPUSH
21735: LD_INT 44
21737: PUSH
21738: LD_INT 45
21740: PUSH
21741: LD_INT 46
21743: PUSH
21744: EMPTY
21745: LIST
21746: LIST
21747: LIST
21748: PUSH
21749: LD_INT 1
21751: PPUSH
21752: LD_INT 3
21754: PPUSH
21755: CALL_OW 12
21759: ARRAY
21760: PPUSH
21761: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21765: LD_VAR 0 1
21769: PPUSH
21770: CALL_OW 266
21774: PUSH
21775: LD_INT 24
21777: EQUAL
21778: IFFALSE 21788
// russianAI = 1 ;
21780: LD_ADDR_EXP 39
21784: PUSH
21785: LD_INT 1
21787: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21788: LD_VAR 0 1
21792: PPUSH
21793: CALL_OW 255
21797: PUSH
21798: LD_INT 2
21800: EQUAL
21801: IFFALSE 22527
// begin if GetBType ( building ) = b_depot then
21803: LD_VAR 0 1
21807: PPUSH
21808: CALL_OW 266
21812: PUSH
21813: LD_INT 0
21815: EQUAL
21816: IFFALSE 21902
// begin arDepot = building ;
21818: LD_ADDR_EXP 43
21822: PUSH
21823: LD_VAR 0 1
21827: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21828: LD_INT 38
21830: PUSH
21831: LD_INT 47
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: PPUSH
21838: LD_INT 71
21840: PPUSH
21841: LD_INT 19
21843: PPUSH
21844: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21848: LD_VAR 0 1
21852: PPUSH
21853: CALL_OW 274
21857: PPUSH
21858: LD_INT 1
21860: PPUSH
21861: LD_INT 500
21863: PPUSH
21864: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 274
21877: PPUSH
21878: LD_INT 3
21880: PPUSH
21881: LD_INT 30
21883: PPUSH
21884: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21888: LD_EXP 26
21892: PPUSH
21893: LD_EXP 43
21897: PPUSH
21898: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21902: LD_VAR 0 1
21906: PPUSH
21907: CALL_OW 266
21911: PUSH
21912: LD_INT 6
21914: EQUAL
21915: PUSH
21916: LD_VAR 0 1
21920: PPUSH
21921: CALL_OW 266
21925: PUSH
21926: LD_INT 9
21928: EQUAL
21929: OR
21930: IFFALSE 21981
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21932: LD_VAR 0 1
21936: PPUSH
21937: LD_INT 10
21939: PPUSH
21940: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21944: LD_VAR 0 1
21948: PPUSH
21949: LD_INT 11
21951: PPUSH
21952: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21956: LD_INT 2
21958: PPUSH
21959: LD_VAR 0 1
21963: PPUSH
21964: LD_INT 2
21966: PPUSH
21967: CALL 14152 0 3
// arLab = building ;
21971: LD_ADDR_EXP 44
21975: PUSH
21976: LD_VAR 0 1
21980: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21981: LD_VAR 0 1
21985: PPUSH
21986: CALL_OW 266
21990: PUSH
21991: LD_INT 2
21993: EQUAL
21994: PUSH
21995: LD_VAR 0 1
21999: PPUSH
22000: CALL_OW 266
22004: PUSH
22005: LD_INT 4
22007: EQUAL
22008: OR
22009: IFFALSE 22020
// ComUpgrade ( building ) ;
22011: LD_VAR 0 1
22015: PPUSH
22016: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
22020: LD_VAR 0 1
22024: PPUSH
22025: CALL_OW 266
22029: PUSH
22030: LD_INT 27
22032: EQUAL
22033: IFFALSE 22527
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22035: LD_INT 22
22037: PUSH
22038: LD_INT 2
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: PUSH
22045: LD_INT 30
22047: PUSH
22048: LD_INT 27
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PPUSH
22059: CALL_OW 69
22063: PUSH
22064: LD_INT 2
22066: EQUAL
22067: IFFALSE 22527
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22069: LD_ADDR_VAR 0 2
22073: PUSH
22074: LD_INT 22
22076: PUSH
22077: LD_INT 2
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: PUSH
22084: LD_INT 21
22086: PUSH
22087: LD_INT 1
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 25
22096: PUSH
22097: LD_INT 2
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: LIST
22108: PPUSH
22109: CALL_OW 69
22113: PUSH
22114: LD_INT 1
22116: ARRAY
22117: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22118: LD_VAR 0 2
22122: PPUSH
22123: LD_INT 92
22125: PPUSH
22126: LD_INT 34
22128: PPUSH
22129: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22133: LD_VAR 0 2
22137: PPUSH
22138: LD_INT 82
22140: PPUSH
22141: LD_INT 57
22143: PPUSH
22144: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22148: LD_VAR 0 2
22152: PPUSH
22153: LD_INT 36
22155: PPUSH
22156: LD_INT 28
22158: PPUSH
22159: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22163: LD_INT 22
22165: PUSH
22166: LD_INT 2
22168: PUSH
22169: EMPTY
22170: LIST
22171: LIST
22172: PUSH
22173: LD_INT 21
22175: PUSH
22176: LD_INT 1
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 25
22185: PUSH
22186: LD_INT 2
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: EMPTY
22194: LIST
22195: LIST
22196: LIST
22197: PPUSH
22198: CALL_OW 69
22202: PPUSH
22203: LD_EXP 43
22207: PPUSH
22208: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22212: LD_INT 22
22214: PUSH
22215: LD_INT 2
22217: PUSH
22218: EMPTY
22219: LIST
22220: LIST
22221: PUSH
22222: LD_INT 25
22224: PUSH
22225: LD_INT 1
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: LD_INT 54
22237: PUSH
22238: EMPTY
22239: LIST
22240: PUSH
22241: LD_INT 3
22243: PUSH
22244: LD_INT 60
22246: PUSH
22247: EMPTY
22248: LIST
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: PPUSH
22264: CALL_OW 69
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: PPUSH
22273: LD_INT 22
22275: PUSH
22276: LD_INT 2
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: PUSH
22283: LD_INT 30
22285: PUSH
22286: LD_INT 31
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 58
22295: PUSH
22296: EMPTY
22297: LIST
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: PPUSH
22304: CALL_OW 69
22308: PUSH
22309: LD_INT 1
22311: ARRAY
22312: PPUSH
22313: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22317: LD_INT 22
22319: PUSH
22320: LD_INT 2
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: LD_INT 25
22329: PUSH
22330: LD_INT 1
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: PUSH
22337: LD_INT 3
22339: PUSH
22340: LD_INT 54
22342: PUSH
22343: EMPTY
22344: LIST
22345: PUSH
22346: LD_INT 3
22348: PUSH
22349: LD_INT 60
22351: PUSH
22352: EMPTY
22353: LIST
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: EMPTY
22360: LIST
22361: LIST
22362: LIST
22363: PUSH
22364: EMPTY
22365: LIST
22366: LIST
22367: LIST
22368: PPUSH
22369: CALL_OW 69
22373: PUSH
22374: LD_INT 2
22376: ARRAY
22377: PPUSH
22378: LD_INT 22
22380: PUSH
22381: LD_INT 2
22383: PUSH
22384: EMPTY
22385: LIST
22386: LIST
22387: PUSH
22388: LD_INT 30
22390: PUSH
22391: LD_INT 31
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 58
22400: PUSH
22401: EMPTY
22402: LIST
22403: PUSH
22404: EMPTY
22405: LIST
22406: LIST
22407: LIST
22408: PPUSH
22409: CALL_OW 69
22413: PUSH
22414: LD_INT 2
22416: ARRAY
22417: PPUSH
22418: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22422: LD_INT 22
22424: PUSH
22425: LD_INT 2
22427: PUSH
22428: EMPTY
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 25
22434: PUSH
22435: LD_INT 1
22437: PUSH
22438: EMPTY
22439: LIST
22440: LIST
22441: PUSH
22442: LD_INT 3
22444: PUSH
22445: LD_INT 54
22447: PUSH
22448: EMPTY
22449: LIST
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: LD_INT 60
22456: PUSH
22457: EMPTY
22458: LIST
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: PUSH
22469: EMPTY
22470: LIST
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 69
22478: PUSH
22479: LD_INT 3
22481: ARRAY
22482: PPUSH
22483: LD_INT 22
22485: PUSH
22486: LD_INT 2
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PUSH
22493: LD_INT 30
22495: PUSH
22496: LD_INT 31
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 58
22505: PUSH
22506: EMPTY
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: PPUSH
22514: CALL_OW 69
22518: PUSH
22519: LD_INT 3
22521: ARRAY
22522: PPUSH
22523: CALL_OW 120
// end ; end ; end ;
22527: PPOPN 2
22529: END
// on UpgradeComplete ( building ) do var i ;
22530: LD_INT 0
22532: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22533: LD_VAR 0 1
22537: PPUSH
22538: CALL_OW 255
22542: PUSH
22543: LD_INT 1
22545: EQUAL
22546: PUSH
22547: LD_EXP 61
22551: PUSH
22552: LD_INT 0
22554: EQUAL
22555: AND
22556: IFFALSE 22754
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22558: LD_VAR 0 1
22562: PPUSH
22563: CALL_OW 266
22567: PUSH
22568: LD_INT 7
22570: EQUAL
22571: PUSH
22572: LD_VAR 0 1
22576: PPUSH
22577: CALL_OW 266
22581: PUSH
22582: LD_INT 8
22584: EQUAL
22585: OR
22586: IFFALSE 22754
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22588: LD_INT 22
22590: PUSH
22591: LD_INT 1
22593: PUSH
22594: EMPTY
22595: LIST
22596: LIST
22597: PUSH
22598: LD_INT 2
22600: PUSH
22601: LD_INT 30
22603: PUSH
22604: LD_INT 26
22606: PUSH
22607: EMPTY
22608: LIST
22609: LIST
22610: PUSH
22611: LD_INT 30
22613: PUSH
22614: LD_INT 27
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: PUSH
22621: LD_INT 30
22623: PUSH
22624: LD_INT 28
22626: PUSH
22627: EMPTY
22628: LIST
22629: LIST
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: PUSH
22646: LD_INT 0
22648: GREATER
22649: IFFALSE 22754
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22651: LD_ADDR_VAR 0 2
22655: PUSH
22656: LD_INT 22
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 7
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 30
22681: PUSH
22682: LD_INT 8
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PPUSH
22698: CALL_OW 69
22702: PUSH
22703: FOR_IN
22704: IFFALSE 22752
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22706: LD_VAR 0 2
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 268
22718: PUSH
22719: LD_INT 11
22721: EQUAL
22722: PUSH
22723: LD_VAR 0 2
22727: PPUSH
22728: LD_INT 2
22730: PPUSH
22731: CALL_OW 268
22735: PUSH
22736: LD_INT 11
22738: EQUAL
22739: OR
22740: IFFALSE 22750
// eventVar1 = 1 ;
22742: LD_ADDR_EXP 61
22746: PUSH
22747: LD_INT 1
22749: ST_TO_ADDR
22750: GO 22703
22752: POP
22753: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PUSH
22764: LD_INT 2
22766: EQUAL
22767: IFFALSE 22872
// begin if GetBType ( building ) = b_barracks then
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 266
22778: PUSH
22779: LD_INT 5
22781: EQUAL
22782: IFFALSE 22872
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22784: LD_ADDR_VAR 0 2
22788: PUSH
22789: LD_INT 22
22791: PUSH
22792: LD_INT 2
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: LD_INT 25
22801: PUSH
22802: LD_INT 1
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: PUSH
22809: LD_INT 3
22811: PUSH
22812: LD_INT 54
22814: PUSH
22815: EMPTY
22816: LIST
22817: PUSH
22818: EMPTY
22819: LIST
22820: LIST
22821: PUSH
22822: EMPTY
22823: LIST
22824: LIST
22825: LIST
22826: PPUSH
22827: CALL_OW 69
22831: PUSH
22832: LD_EXP 26
22836: PUSH
22837: EMPTY
22838: LIST
22839: DIFF
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22860
// ComEnterUnit ( i , building ) ;
22844: LD_VAR 0 2
22848: PPUSH
22849: LD_VAR 0 1
22853: PPUSH
22854: CALL_OW 120
22858: GO 22841
22860: POP
22861: POP
// arArm = building ;
22862: LD_ADDR_EXP 45
22866: PUSH
22867: LD_VAR 0 1
22871: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22872: LD_VAR 0 1
22876: PPUSH
22877: CALL_OW 255
22881: PUSH
22882: LD_INT 3
22884: EQUAL
22885: IFFALSE 23358
// begin if GetBType ( building ) = b_factory then
22887: LD_VAR 0 1
22891: PPUSH
22892: CALL_OW 266
22896: PUSH
22897: LD_INT 3
22899: EQUAL
22900: IFFALSE 22967
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22902: LD_ADDR_VAR 0 2
22906: PUSH
22907: LD_INT 22
22909: PUSH
22910: LD_INT 3
22912: PUSH
22913: EMPTY
22914: LIST
22915: LIST
22916: PUSH
22917: LD_INT 25
22919: PUSH
22920: LD_INT 3
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PPUSH
22931: CALL_OW 69
22935: PUSH
22936: FOR_IN
22937: IFFALSE 22955
// ComEnterUnit ( i , building ) ;
22939: LD_VAR 0 2
22943: PPUSH
22944: LD_VAR 0 1
22948: PPUSH
22949: CALL_OW 120
22953: GO 22936
22955: POP
22956: POP
// ruFab = building ;
22957: LD_ADDR_EXP 35
22961: PUSH
22962: LD_VAR 0 1
22966: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22967: LD_INT 22
22969: PUSH
22970: LD_INT 3
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: PUSH
22977: LD_INT 21
22979: PUSH
22980: LD_INT 3
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: PUSH
22987: LD_INT 30
22989: PUSH
22990: LD_INT 8
22992: PUSH
22993: EMPTY
22994: LIST
22995: LIST
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: PPUSH
23002: CALL_OW 69
23006: PUSH
23007: LD_INT 2
23009: EQUAL
23010: IFFALSE 23218
// begin for i = 1 to 2 do
23012: LD_ADDR_VAR 0 2
23016: PUSH
23017: DOUBLE
23018: LD_INT 1
23020: DEC
23021: ST_TO_ADDR
23022: LD_INT 2
23024: PUSH
23025: FOR_TO
23026: IFFALSE 23113
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 4
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: PUSH
23057: LD_VAR 0 2
23061: ARRAY
23062: PPUSH
23063: LD_INT 22
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: LD_INT 21
23075: PUSH
23076: LD_INT 3
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: PUSH
23083: LD_INT 30
23085: PUSH
23086: LD_INT 8
23088: PUSH
23089: EMPTY
23090: LIST
23091: LIST
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: LIST
23097: PPUSH
23098: CALL_OW 69
23102: PUSH
23103: LD_INT 1
23105: ARRAY
23106: PPUSH
23107: CALL_OW 120
23111: GO 23025
23113: POP
23114: POP
// for i = 3 to 4 do
23115: LD_ADDR_VAR 0 2
23119: PUSH
23120: DOUBLE
23121: LD_INT 3
23123: DEC
23124: ST_TO_ADDR
23125: LD_INT 4
23127: PUSH
23128: FOR_TO
23129: IFFALSE 23216
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23131: LD_INT 22
23133: PUSH
23134: LD_INT 3
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: PUSH
23141: LD_INT 25
23143: PUSH
23144: LD_INT 4
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PPUSH
23155: CALL_OW 69
23159: PUSH
23160: LD_VAR 0 2
23164: ARRAY
23165: PPUSH
23166: LD_INT 22
23168: PUSH
23169: LD_INT 3
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 21
23178: PUSH
23179: LD_INT 3
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 30
23188: PUSH
23189: LD_INT 8
23191: PUSH
23192: EMPTY
23193: LIST
23194: LIST
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: LIST
23200: PPUSH
23201: CALL_OW 69
23205: PUSH
23206: LD_INT 2
23208: ARRAY
23209: PPUSH
23210: CALL_OW 120
23214: GO 23128
23216: POP
23217: POP
// end ; if GetBType ( building ) = b_barracks then
23218: LD_VAR 0 1
23222: PPUSH
23223: CALL_OW 266
23227: PUSH
23228: LD_INT 5
23230: EQUAL
23231: IFFALSE 23358
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23233: LD_ADDR_VAR 0 2
23237: PUSH
23238: LD_INT 22
23240: PUSH
23241: LD_INT 3
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 25
23250: PUSH
23251: LD_INT 1
23253: PUSH
23254: EMPTY
23255: LIST
23256: LIST
23257: PUSH
23258: LD_INT 3
23260: PUSH
23261: LD_INT 54
23263: PUSH
23264: EMPTY
23265: LIST
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PPUSH
23276: CALL_OW 69
23280: PUSH
23281: FOR_IN
23282: IFFALSE 23300
// ComEnterUnit ( i , building ) ;
23284: LD_VAR 0 2
23288: PPUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: CALL_OW 120
23298: GO 23281
23300: POP
23301: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23302: LD_INT 22
23304: PUSH
23305: LD_INT 3
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: PUSH
23312: LD_INT 30
23314: PUSH
23315: LD_INT 5
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PPUSH
23326: CALL_OW 69
23330: PUSH
23331: LD_INT 0
23333: EQUAL
23334: IFFALSE 23348
// ruArm1 = building else
23336: LD_ADDR_EXP 33
23340: PUSH
23341: LD_VAR 0 1
23345: ST_TO_ADDR
23346: GO 23358
// ruArm2 = building ;
23348: LD_ADDR_EXP 34
23352: PUSH
23353: LD_VAR 0 1
23357: ST_TO_ADDR
// end ; end ; end ;
23358: PPOPN 2
23360: END
// on EnterBuilding ( building , human ) do var rnd ;
23361: LD_INT 0
23363: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23364: LD_VAR 0 2
23368: PPUSH
23369: CALL_OW 255
23373: PUSH
23374: LD_INT 2
23376: EQUAL
23377: PUSH
23378: LD_VAR 0 2
23382: PPUSH
23383: CALL_OW 257
23387: PUSH
23388: LD_INT 1
23390: EQUAL
23391: AND
23392: PUSH
23393: LD_VAR 0 1
23397: PUSH
23398: LD_EXP 45
23402: EQUAL
23403: AND
23404: IFFALSE 23451
// begin wait ( 0 0$1 ) ;
23406: LD_INT 35
23408: PPUSH
23409: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23413: LD_ADDR_VAR 0 3
23417: PUSH
23418: LD_INT 1
23420: PPUSH
23421: LD_INT 100
23423: PPUSH
23424: CALL_OW 12
23428: ST_TO_ADDR
// if rnd > 50 then
23429: LD_VAR 0 3
23433: PUSH
23434: LD_INT 50
23436: GREATER
23437: IFFALSE 23451
// SetClass ( human , class_mortar ) ;
23439: LD_VAR 0 2
23443: PPUSH
23444: LD_INT 8
23446: PPUSH
23447: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23451: LD_VAR 0 2
23455: PPUSH
23456: CALL_OW 255
23460: PUSH
23461: LD_INT 3
23463: EQUAL
23464: PUSH
23465: LD_VAR 0 2
23469: PPUSH
23470: CALL_OW 257
23474: PUSH
23475: LD_INT 1
23477: EQUAL
23478: AND
23479: PUSH
23480: LD_VAR 0 1
23484: PUSH
23485: LD_EXP 33
23489: EQUAL
23490: PUSH
23491: LD_VAR 0 1
23495: PUSH
23496: LD_EXP 34
23500: EQUAL
23501: OR
23502: PUSH
23503: EMPTY
23504: LIST
23505: AND
23506: IFFALSE 23527
// begin wait ( 0 0$1 ) ;
23508: LD_INT 35
23510: PPUSH
23511: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23515: LD_VAR 0 2
23519: PPUSH
23520: LD_INT 9
23522: PPUSH
23523: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23527: LD_VAR 0 2
23531: PPUSH
23532: CALL_OW 255
23536: PUSH
23537: LD_INT 3
23539: EQUAL
23540: PUSH
23541: LD_VAR 0 2
23545: PPUSH
23546: CALL_OW 257
23550: PUSH
23551: LD_INT 9
23553: EQUAL
23554: AND
23555: PUSH
23556: LD_VAR 0 1
23560: PPUSH
23561: CALL_OW 266
23565: PUSH
23566: LD_INT 32
23568: EQUAL
23569: AND
23570: IFFALSE 23591
// begin wait ( 0 0$1 ) ;
23572: LD_INT 35
23574: PPUSH
23575: CALL_OW 67
// SetClass ( human , 1 ) ;
23579: LD_VAR 0 2
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23591: LD_VAR 0 2
23595: PPUSH
23596: CALL_OW 255
23600: PUSH
23601: LD_INT 3
23603: EQUAL
23604: PUSH
23605: LD_VAR 0 2
23609: PPUSH
23610: CALL_OW 257
23614: PUSH
23615: LD_INT 3
23617: EQUAL
23618: AND
23619: PUSH
23620: LD_VAR 0 1
23624: PUSH
23625: LD_EXP 35
23629: EQUAL
23630: AND
23631: IFFALSE 23645
// SetLives ( human , 1000 ) ;
23633: LD_VAR 0 2
23637: PPUSH
23638: LD_INT 1000
23640: PPUSH
23641: CALL_OW 234
// end ;
23645: PPOPN 3
23647: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23648: LD_VAR 0 1
23652: PUSH
23653: LD_INT 1
23655: EQUAL
23656: PUSH
23657: LD_VAR 0 2
23661: PUSH
23662: LD_INT 2
23664: EQUAL
23665: AND
23666: PUSH
23667: LD_INT 1
23669: PPUSH
23670: LD_INT 2
23672: PPUSH
23673: CALL_OW 81
23677: PUSH
23678: LD_INT 1
23680: EQUAL
23681: AND
23682: IFFALSE 23703
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23684: LD_EXP 24
23688: PPUSH
23689: LD_STRING D6b-Pow-1
23691: PPUSH
23692: CALL_OW 94
// YouLost ( Powell ) ;
23696: LD_STRING Powell
23698: PPUSH
23699: CALL_OW 104
// end ; end ;
23703: PPOPN 2
23705: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23706: LD_INT 23
23708: PPUSH
23709: LD_INT 22
23711: PUSH
23712: LD_INT 1
23714: PUSH
23715: EMPTY
23716: LIST
23717: LIST
23718: PUSH
23719: LD_INT 21
23721: PUSH
23722: LD_INT 3
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: PUSH
23729: EMPTY
23730: LIST
23731: LIST
23732: PPUSH
23733: CALL_OW 70
23737: PUSH
23738: LD_INT 23
23740: PPUSH
23741: LD_INT 22
23743: PUSH
23744: LD_INT 1
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 21
23753: PUSH
23754: LD_INT 2
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PPUSH
23765: CALL_OW 70
23769: OR
23770: PUSH
23771: LD_INT 1
23773: PPUSH
23774: LD_INT 2
23776: PPUSH
23777: CALL_OW 81
23781: PUSH
23782: LD_INT 1
23784: EQUAL
23785: AND
23786: IFFALSE 23810
23788: GO 23790
23790: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23791: LD_EXP 24
23795: PPUSH
23796: LD_STRING D6b-Pow-1
23798: PPUSH
23799: CALL_OW 94
// YouLost ( Powell ) ;
23803: LD_STRING Powell
23805: PPUSH
23806: CALL_OW 104
// end ;
23810: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23811: LD_VAR 0 1
23815: PUSH
23816: LD_EXP 1
23820: EQUAL
23821: IFFALSE 23830
// YouLost ( JMM ) ;
23823: LD_STRING JMM
23825: PPUSH
23826: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 255
23839: PUSH
23840: LD_INT 3
23842: EQUAL
23843: PUSH
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 247
23853: PUSH
23854: LD_INT 3
23856: EQUAL
23857: AND
23858: IFFALSE 24550
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23860: LD_VAR 0 1
23864: PPUSH
23865: CALL_OW 266
23869: PUSH
23870: LD_INT 31
23872: EQUAL
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 266
23883: PUSH
23884: LD_INT 32
23886: EQUAL
23887: OR
23888: PUSH
23889: LD_VAR 0 1
23893: PPUSH
23894: CALL_OW 266
23898: PUSH
23899: LD_INT 36
23901: EQUAL
23902: OR
23903: PUSH
23904: LD_VAR 0 1
23908: PPUSH
23909: CALL_OW 266
23913: PUSH
23914: LD_INT 0
23916: EQUAL
23917: OR
23918: PUSH
23919: LD_VAR 0 1
23923: PPUSH
23924: CALL_OW 266
23928: PUSH
23929: LD_INT 24
23931: EQUAL
23932: OR
23933: PUSH
23934: LD_VAR 0 1
23938: PPUSH
23939: CALL_OW 266
23943: PUSH
23944: LD_INT 17
23946: EQUAL
23947: OR
23948: PUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: CALL_OW 266
23958: PUSH
23959: LD_INT 25
23961: EQUAL
23962: OR
23963: PUSH
23964: LD_VAR 0 1
23968: PPUSH
23969: CALL_OW 266
23973: PUSH
23974: LD_INT 19
23976: EQUAL
23977: OR
23978: PUSH
23979: LD_VAR 0 1
23983: PPUSH
23984: CALL_OW 266
23988: PUSH
23989: LD_INT 20
23991: EQUAL
23992: OR
23993: PUSH
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 266
24003: PUSH
24004: LD_INT 18
24006: EQUAL
24007: OR
24008: PUSH
24009: LD_VAR 0 1
24013: PPUSH
24014: CALL_OW 266
24018: PUSH
24019: LD_INT 21
24021: EQUAL
24022: OR
24023: PUSH
24024: LD_VAR 0 1
24028: PPUSH
24029: CALL_OW 266
24033: PUSH
24034: LD_INT 23
24036: EQUAL
24037: OR
24038: PUSH
24039: LD_VAR 0 1
24043: PPUSH
24044: CALL_OW 266
24048: PUSH
24049: LD_INT 16
24051: EQUAL
24052: OR
24053: PUSH
24054: LD_VAR 0 1
24058: PPUSH
24059: CALL_OW 266
24063: PUSH
24064: LD_INT 6
24066: EQUAL
24067: OR
24068: PUSH
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL_OW 266
24078: PUSH
24079: LD_INT 29
24081: EQUAL
24082: OR
24083: PUSH
24084: LD_VAR 0 1
24088: PPUSH
24089: CALL_OW 266
24093: PUSH
24094: LD_INT 26
24096: EQUAL
24097: OR
24098: PUSH
24099: LD_VAR 0 1
24103: PPUSH
24104: CALL_OW 266
24108: PUSH
24109: LD_INT 30
24111: EQUAL
24112: OR
24113: PUSH
24114: LD_VAR 0 1
24118: PPUSH
24119: CALL_OW 266
24123: PUSH
24124: LD_INT 28
24126: EQUAL
24127: OR
24128: PUSH
24129: LD_VAR 0 1
24133: PPUSH
24134: CALL_OW 266
24138: PUSH
24139: LD_INT 27
24141: EQUAL
24142: OR
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 266
24153: PUSH
24154: LD_INT 33
24156: EQUAL
24157: OR
24158: PUSH
24159: LD_VAR 0 1
24163: PPUSH
24164: CALL_OW 266
24168: PUSH
24169: LD_INT 2
24171: EQUAL
24172: OR
24173: PUSH
24174: LD_VAR 0 1
24178: PPUSH
24179: CALL_OW 266
24183: PUSH
24184: LD_INT 4
24186: EQUAL
24187: OR
24188: IFFALSE 24274
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24190: LD_ADDR_EXP 42
24194: PUSH
24195: LD_EXP 42
24199: PUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 266
24209: ADD
24210: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24211: LD_ADDR_EXP 42
24215: PUSH
24216: LD_EXP 42
24220: PUSH
24221: LD_VAR 0 1
24225: PPUSH
24226: CALL_OW 250
24230: ADD
24231: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24232: LD_ADDR_EXP 42
24236: PUSH
24237: LD_EXP 42
24241: PUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 251
24251: ADD
24252: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24253: LD_ADDR_EXP 42
24257: PUSH
24258: LD_EXP 42
24262: PUSH
24263: LD_VAR 0 1
24267: PPUSH
24268: CALL_OW 254
24272: ADD
24273: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24274: LD_VAR 0 1
24278: PPUSH
24279: CALL_OW 266
24283: PUSH
24284: LD_INT 1
24286: EQUAL
24287: IFFALSE 24366
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24289: LD_ADDR_EXP 42
24293: PUSH
24294: LD_EXP 42
24298: PUSH
24299: LD_INT 0
24301: ADD
24302: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24303: LD_ADDR_EXP 42
24307: PUSH
24308: LD_EXP 42
24312: PUSH
24313: LD_VAR 0 1
24317: PPUSH
24318: CALL_OW 250
24322: ADD
24323: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24324: LD_ADDR_EXP 42
24328: PUSH
24329: LD_EXP 42
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 251
24343: ADD
24344: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24345: LD_ADDR_EXP 42
24349: PUSH
24350: LD_EXP 42
24354: PUSH
24355: LD_VAR 0 1
24359: PPUSH
24360: CALL_OW 254
24364: ADD
24365: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 266
24375: PUSH
24376: LD_INT 3
24378: EQUAL
24379: IFFALSE 24458
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24381: LD_ADDR_EXP 42
24385: PUSH
24386: LD_EXP 42
24390: PUSH
24391: LD_INT 2
24393: ADD
24394: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24395: LD_ADDR_EXP 42
24399: PUSH
24400: LD_EXP 42
24404: PUSH
24405: LD_VAR 0 1
24409: PPUSH
24410: CALL_OW 250
24414: ADD
24415: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24416: LD_ADDR_EXP 42
24420: PUSH
24421: LD_EXP 42
24425: PUSH
24426: LD_VAR 0 1
24430: PPUSH
24431: CALL_OW 251
24435: ADD
24436: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24437: LD_ADDR_EXP 42
24441: PUSH
24442: LD_EXP 42
24446: PUSH
24447: LD_VAR 0 1
24451: PPUSH
24452: CALL_OW 254
24456: ADD
24457: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24458: LD_VAR 0 1
24462: PPUSH
24463: CALL_OW 266
24467: PUSH
24468: LD_INT 5
24470: EQUAL
24471: IFFALSE 24550
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24473: LD_ADDR_EXP 42
24477: PUSH
24478: LD_EXP 42
24482: PUSH
24483: LD_INT 4
24485: ADD
24486: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24487: LD_ADDR_EXP 42
24491: PUSH
24492: LD_EXP 42
24496: PUSH
24497: LD_VAR 0 1
24501: PPUSH
24502: CALL_OW 250
24506: ADD
24507: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24508: LD_ADDR_EXP 42
24512: PUSH
24513: LD_EXP 42
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 251
24527: ADD
24528: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24529: LD_ADDR_EXP 42
24533: PUSH
24534: LD_EXP 42
24538: PUSH
24539: LD_VAR 0 1
24543: PPUSH
24544: CALL_OW 254
24548: ADD
24549: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 257
24559: PUSH
24560: LD_INT 3
24562: EQUAL
24563: PUSH
24564: LD_VAR 0 1
24568: PPUSH
24569: CALL_OW 255
24573: PUSH
24574: LD_INT 3
24576: EQUAL
24577: AND
24578: PUSH
24579: LD_EXP 35
24583: PPUSH
24584: CALL_OW 302
24588: AND
24589: PUSH
24590: LD_EXP 35
24594: PPUSH
24595: CALL_OW 255
24599: PUSH
24600: LD_INT 3
24602: EQUAL
24603: AND
24604: IFFALSE 24674
// begin uc_side = 3 ;
24606: LD_ADDR_OWVAR 20
24610: PUSH
24611: LD_INT 3
24613: ST_TO_ADDR
// uc_nation = 3 ;
24614: LD_ADDR_OWVAR 21
24618: PUSH
24619: LD_INT 3
24621: ST_TO_ADDR
// hc_gallery :=  ;
24622: LD_ADDR_OWVAR 33
24626: PUSH
24627: LD_STRING 
24629: ST_TO_ADDR
// hc_name :=  ;
24630: LD_ADDR_OWVAR 26
24634: PUSH
24635: LD_STRING 
24637: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24638: LD_INT 0
24640: PPUSH
24641: LD_EXP 36
24645: PPUSH
24646: LD_EXP 37
24650: PPUSH
24651: CALL_OW 12
24655: PPUSH
24656: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24660: CALL_OW 44
24664: PPUSH
24665: LD_EXP 35
24669: PPUSH
24670: CALL_OW 52
// end ; end ;
24674: PPOPN 1
24676: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24677: LD_ADDR_OWVAR 57
24681: PUSH
24682: LD_INT 0
24684: ST_TO_ADDR
// fastEnd = 1 ;
24685: LD_ADDR_EXP 59
24689: PUSH
24690: LD_INT 1
24692: ST_TO_ADDR
// FinishMission ;
24693: CALL 25955 0 0
// end ; end_of_file
24697: PPOPN 1
24699: END
// export function PrepareNature ; var i , un ; begin
24700: LD_INT 0
24702: PPUSH
24703: PPUSH
24704: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24705: LD_ADDR_VAR 0 2
24709: PUSH
24710: DOUBLE
24711: LD_INT 1
24713: DEC
24714: ST_TO_ADDR
24715: LD_OWVAR 67
24719: PUSH
24720: LD_INT 1
24722: PPUSH
24723: LD_INT 5
24725: PPUSH
24726: CALL_OW 12
24730: PLUS
24731: PUSH
24732: FOR_TO
24733: IFFALSE 24878
// begin hc_sex = sex_male ;
24735: LD_ADDR_OWVAR 27
24739: PUSH
24740: LD_INT 1
24742: ST_TO_ADDR
// uc_side = 0 ;
24743: LD_ADDR_OWVAR 20
24747: PUSH
24748: LD_INT 0
24750: ST_TO_ADDR
// uc_nation = nation_nature ;
24751: LD_ADDR_OWVAR 21
24755: PUSH
24756: LD_INT 0
24758: ST_TO_ADDR
// hc_class = class_apeman ;
24759: LD_ADDR_OWVAR 28
24763: PUSH
24764: LD_INT 12
24766: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24767: LD_ADDR_OWVAR 31
24771: PUSH
24772: LD_INT 2
24774: PPUSH
24775: LD_INT 7
24777: PPUSH
24778: CALL_OW 12
24782: PUSH
24783: LD_OWVAR 67
24787: PLUS
24788: PUSH
24789: LD_INT 2
24791: PPUSH
24792: LD_INT 10
24794: PPUSH
24795: CALL_OW 12
24799: PUSH
24800: LD_INT 2
24802: PPUSH
24803: LD_INT 10
24805: PPUSH
24806: CALL_OW 12
24810: PUSH
24811: LD_INT 2
24813: PPUSH
24814: LD_INT 10
24816: PPUSH
24817: CALL_OW 12
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24828: LD_ADDR_OWVAR 35
24832: PUSH
24833: LD_INT 5
24835: NEG
24836: PPUSH
24837: LD_INT 5
24839: PPUSH
24840: CALL_OW 12
24844: PUSH
24845: LD_OWVAR 67
24849: MUL
24850: ST_TO_ADDR
// un = CreateHuman ;
24851: LD_ADDR_VAR 0 3
24855: PUSH
24856: CALL_OW 44
24860: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24861: LD_VAR 0 3
24865: PPUSH
24866: LD_INT 5
24868: PPUSH
24869: LD_INT 0
24871: PPUSH
24872: CALL_OW 49
// end ;
24876: GO 24732
24878: POP
24879: POP
// for i = 1 to Difficulty + 2 do
24880: LD_ADDR_VAR 0 2
24884: PUSH
24885: DOUBLE
24886: LD_INT 1
24888: DEC
24889: ST_TO_ADDR
24890: LD_OWVAR 67
24894: PUSH
24895: LD_INT 2
24897: PLUS
24898: PUSH
24899: FOR_TO
24900: IFFALSE 25009
// begin hc_sex = sex_male ;
24902: LD_ADDR_OWVAR 27
24906: PUSH
24907: LD_INT 1
24909: ST_TO_ADDR
// uc_side = 0 ;
24910: LD_ADDR_OWVAR 20
24914: PUSH
24915: LD_INT 0
24917: ST_TO_ADDR
// uc_nation = nation_nature ;
24918: LD_ADDR_OWVAR 21
24922: PUSH
24923: LD_INT 0
24925: ST_TO_ADDR
// hc_class = class_tiger ;
24926: LD_ADDR_OWVAR 28
24930: PUSH
24931: LD_INT 14
24933: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24934: LD_ADDR_OWVAR 31
24938: PUSH
24939: LD_EXP 37
24943: PUSH
24944: LD_INT 0
24946: PUSH
24947: LD_INT 0
24949: PUSH
24950: LD_INT 0
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24959: LD_ADDR_OWVAR 35
24963: PUSH
24964: LD_INT 5
24966: NEG
24967: PPUSH
24968: LD_INT 5
24970: PPUSH
24971: CALL_OW 12
24975: PUSH
24976: LD_OWVAR 67
24980: MUL
24981: ST_TO_ADDR
// un = CreateHuman ;
24982: LD_ADDR_VAR 0 3
24986: PUSH
24987: CALL_OW 44
24991: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24992: LD_VAR 0 3
24996: PPUSH
24997: LD_INT 6
24999: PPUSH
25000: LD_INT 0
25002: PPUSH
25003: CALL_OW 49
// end ;
25007: GO 24899
25009: POP
25010: POP
// for i = 1 to rand ( 3 , 4 ) do
25011: LD_ADDR_VAR 0 2
25015: PUSH
25016: DOUBLE
25017: LD_INT 1
25019: DEC
25020: ST_TO_ADDR
25021: LD_INT 3
25023: PPUSH
25024: LD_INT 4
25026: PPUSH
25027: CALL_OW 12
25031: PUSH
25032: FOR_TO
25033: IFFALSE 25127
// begin hc_sex = sex_male ;
25035: LD_ADDR_OWVAR 27
25039: PUSH
25040: LD_INT 1
25042: ST_TO_ADDR
// uc_side = 0 ;
25043: LD_ADDR_OWVAR 20
25047: PUSH
25048: LD_INT 0
25050: ST_TO_ADDR
// uc_nation = nation_nature ;
25051: LD_ADDR_OWVAR 21
25055: PUSH
25056: LD_INT 0
25058: ST_TO_ADDR
// hc_class = 18 ;
25059: LD_ADDR_OWVAR 28
25063: PUSH
25064: LD_INT 18
25066: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25067: LD_ADDR_OWVAR 31
25071: PUSH
25072: LD_EXP 37
25076: PUSH
25077: LD_INT 0
25079: PUSH
25080: LD_INT 0
25082: PUSH
25083: LD_INT 0
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: ST_TO_ADDR
// hc_agressivity = 0 ;
25092: LD_ADDR_OWVAR 35
25096: PUSH
25097: LD_INT 0
25099: ST_TO_ADDR
// un = CreateHuman ;
25100: LD_ADDR_VAR 0 3
25104: PUSH
25105: CALL_OW 44
25109: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25110: LD_VAR 0 3
25114: PPUSH
25115: LD_INT 6
25117: PPUSH
25118: LD_INT 0
25120: PPUSH
25121: CALL_OW 49
// end ;
25125: GO 25032
25127: POP
25128: POP
// end ; end_of_file
25129: LD_VAR 0 1
25133: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25134: LD_EXP 46
25138: PUSH
25139: LD_INT 1
25141: EQUAL
25142: IFFALSE 25226
25144: GO 25146
25146: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25147: LD_INT 7
25149: PPUSH
25150: LD_INT 5
25152: PPUSH
25153: LD_INT 4
25155: PUSH
25156: LD_INT 5
25158: PUSH
25159: LD_INT 6
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: PUSH
25167: LD_OWVAR 67
25171: ARRAY
25172: PPUSH
25173: LD_EXP 36
25177: PPUSH
25178: LD_EXP 37
25182: PPUSH
25183: CALL_OW 12
25187: PPUSH
25188: LD_INT 2
25190: PPUSH
25191: LD_INT 1
25193: PPUSH
25194: LD_INT 1
25196: PPUSH
25197: EMPTY
25198: PPUSH
25199: LD_INT 25
25201: PUSH
25202: LD_INT 26
25204: PUSH
25205: LD_INT 27
25207: PUSH
25208: LD_INT 28
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: PPUSH
25217: EMPTY
25218: PPUSH
25219: LD_INT 1
25221: PPUSH
25222: CALL 15714 0 11
25226: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25227: LD_EXP 46
25231: PUSH
25232: LD_INT 1
25234: EQUAL
25235: IFFALSE 25323
25237: GO 25239
25239: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 6 , 7 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25240: LD_INT 5
25242: PPUSH
25243: LD_INT 2
25245: PPUSH
25246: LD_INT 6
25248: PUSH
25249: LD_INT 7
25251: PUSH
25252: LD_INT 8
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: LIST
25259: PUSH
25260: LD_OWVAR 67
25264: ARRAY
25265: PPUSH
25266: LD_INT 0
25268: PPUSH
25269: LD_INT 0
25271: PPUSH
25272: LD_INT 2
25274: PUSH
25275: LD_INT 4
25277: PUSH
25278: LD_INT 5
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: PUSH
25286: LD_OWVAR 67
25290: ARRAY
25291: PPUSH
25292: LD_INT 0
25294: PPUSH
25295: LD_EXP 36
25299: PPUSH
25300: LD_EXP 37
25304: PPUSH
25305: CALL_OW 12
25309: PPUSH
25310: LD_INT 7
25312: PPUSH
25313: LD_INT 9
25315: PPUSH
25316: LD_INT 1
25318: PPUSH
25319: CALL 17418 0 11
25323: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25324: LD_EXP 46
25328: PUSH
25329: LD_INT 1
25331: EQUAL
25332: IFFALSE 25341
25334: GO 25336
25336: DISABLE
// PrepareArabianSheik ;
25337: CALL 3873 0 0
25341: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25342: LD_EXP 29
25346: PUSH
25347: LD_EXP 60
25351: PUSH
25352: LD_INT 1
25354: EQUAL
25355: AND
25356: IFFALSE 25425
25358: GO 25360
25360: DISABLE
// begin enable ;
25361: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25362: LD_INT 6
25364: PPUSH
25365: LD_INT 3
25367: PPUSH
25368: LD_EXP 57
25372: PPUSH
25373: LD_INT 0
25375: PPUSH
25376: LD_OWVAR 67
25380: PPUSH
25381: LD_INT 0
25383: PPUSH
25384: LD_EXP 57
25388: PUSH
25389: LD_INT 3
25391: DIV
25392: PUSH
25393: LD_INT 1
25395: PLUS
25396: PPUSH
25397: LD_EXP 36
25401: PPUSH
25402: LD_EXP 37
25406: PPUSH
25407: CALL_OW 12
25411: PPUSH
25412: LD_INT 17
25414: PPUSH
25415: LD_INT 18
25417: PPUSH
25418: LD_INT 1
25420: PPUSH
25421: CALL 17418 0 11
// end ;
25425: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25426: LD_EXP 29
25430: PUSH
25431: LD_EXP 60
25435: PUSH
25436: LD_INT 1
25438: EQUAL
25439: AND
25440: IFFALSE 25517
25442: GO 25444
25444: DISABLE
// begin enable ;
25445: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25446: LD_INT 17
25448: PPUSH
25449: LD_INT 6
25451: PPUSH
25452: LD_EXP 56
25456: PPUSH
25457: LD_EXP 36
25461: PPUSH
25462: LD_EXP 37
25466: PPUSH
25467: CALL_OW 12
25471: PPUSH
25472: LD_INT 3
25474: PPUSH
25475: LD_INT 1
25477: PPUSH
25478: LD_INT 3
25480: PUSH
25481: LD_INT 3
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PPUSH
25488: LD_INT 43
25490: PUSH
25491: LD_INT 44
25493: PUSH
25494: LD_INT 45
25496: PUSH
25497: LD_INT 46
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: LIST
25504: LIST
25505: PPUSH
25506: EMPTY
25507: PPUSH
25508: EMPTY
25509: PPUSH
25510: LD_INT 1
25512: PPUSH
25513: CALL 15714 0 11
// end ;
25517: END
// every 10 10$00 trigger joinEpsilon do
25518: LD_EXP 29
25522: IFFALSE 25576
25524: GO 25526
25526: DISABLE
// begin enable ;
25527: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25528: LD_ADDR_EXP 56
25532: PUSH
25533: LD_EXP 56
25537: PUSH
25538: LD_INT 1
25540: PPUSH
25541: LD_OWVAR 67
25545: PPUSH
25546: CALL_OW 12
25550: PLUS
25551: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25552: LD_ADDR_EXP 57
25556: PUSH
25557: LD_EXP 57
25561: PUSH
25562: LD_INT 1
25564: PPUSH
25565: LD_OWVAR 67
25569: PPUSH
25570: CALL_OW 12
25574: PLUS
25575: ST_TO_ADDR
// end ;
25576: END
// every 21 21$0 trigger attackAvalaible = 1 do
25577: LD_EXP 60
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: IFFALSE 25598
25587: GO 25589
25589: DISABLE
// attackAvalaible = 0 ; end_of_file
25590: LD_ADDR_EXP 60
25594: PUSH
25595: LD_INT 0
25597: ST_TO_ADDR
25598: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25599: LD_INT 54
25601: PPUSH
25602: LD_INT 1
25604: PPUSH
25605: CALL_OW 321
25609: PUSH
25610: LD_INT 2
25612: EQUAL
25613: PUSH
25614: LD_INT 55
25616: PPUSH
25617: LD_INT 1
25619: PPUSH
25620: CALL_OW 321
25624: PUSH
25625: LD_INT 2
25627: EQUAL
25628: AND
25629: PUSH
25630: LD_INT 21
25632: PPUSH
25633: LD_INT 1
25635: PPUSH
25636: CALL_OW 321
25640: PUSH
25641: LD_INT 2
25643: EQUAL
25644: AND
25645: PUSH
25646: LD_INT 22
25648: PPUSH
25649: LD_INT 1
25651: PPUSH
25652: CALL_OW 321
25656: PUSH
25657: LD_INT 2
25659: EQUAL
25660: AND
25661: PUSH
25662: LD_INT 12
25664: PPUSH
25665: LD_INT 1
25667: PPUSH
25668: CALL_OW 321
25672: PUSH
25673: LD_INT 1
25675: EQUAL
25676: PUSH
25677: LD_INT 32
25679: PPUSH
25680: LD_INT 1
25682: PPUSH
25683: CALL_OW 321
25687: PUSH
25688: LD_INT 1
25690: EQUAL
25691: OR
25692: PUSH
25693: EMPTY
25694: LIST
25695: AND
25696: PUSH
25697: LD_EXP 48
25701: PUSH
25702: LD_INT 1
25704: EQUAL
25705: AND
25706: PUSH
25707: LD_INT 22
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: LD_INT 21
25719: PUSH
25720: LD_INT 1
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PPUSH
25731: CALL_OW 69
25735: PUSH
25736: LD_INT 0
25738: EQUAL
25739: AND
25740: IFFALSE 25796
25742: GO 25744
25744: DISABLE
// begin case query ( QEndMission ) of 1 :
25745: LD_STRING QEndMission
25747: PPUSH
25748: CALL_OW 97
25752: PUSH
25753: LD_INT 1
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25761
25759: GO 25772
25761: POP
// begin end_the_mission_allowed = true ;
25762: LD_ADDR_OWVAR 57
25766: PUSH
25767: LD_INT 1
25769: ST_TO_ADDR
// end ; 2 :
25770: GO 25796
25772: LD_INT 2
25774: DOUBLE
25775: EQUAL
25776: IFTRUE 25780
25778: GO 25795
25780: POP
// begin fastEnd = 1 ;
25781: LD_ADDR_EXP 59
25785: PUSH
25786: LD_INT 1
25788: ST_TO_ADDR
// FinishMission ;
25789: CALL 25955 0 0
// end ; end ;
25793: GO 25796
25795: POP
// end ;
25796: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25797: LD_INT 54
25799: PPUSH
25800: LD_INT 1
25802: PPUSH
25803: CALL_OW 321
25807: PUSH
25808: LD_INT 2
25810: EQUAL
25811: PUSH
25812: LD_INT 55
25814: PPUSH
25815: LD_INT 1
25817: PPUSH
25818: CALL_OW 321
25822: PUSH
25823: LD_INT 2
25825: EQUAL
25826: AND
25827: PUSH
25828: LD_INT 21
25830: PPUSH
25831: LD_INT 1
25833: PPUSH
25834: CALL_OW 321
25838: PUSH
25839: LD_INT 2
25841: EQUAL
25842: AND
25843: PUSH
25844: LD_INT 22
25846: PPUSH
25847: LD_INT 1
25849: PPUSH
25850: CALL_OW 321
25854: PUSH
25855: LD_INT 2
25857: EQUAL
25858: AND
25859: PUSH
25860: LD_INT 12
25862: PPUSH
25863: LD_INT 1
25865: PPUSH
25866: CALL_OW 321
25870: PUSH
25871: LD_INT 2
25873: EQUAL
25874: AND
25875: PUSH
25876: LD_INT 32
25878: PPUSH
25879: LD_INT 1
25881: PPUSH
25882: CALL_OW 321
25886: PUSH
25887: LD_INT 2
25889: EQUAL
25890: AND
25891: PUSH
25892: LD_EXP 59
25896: PUSH
25897: LD_INT 0
25899: EQUAL
25900: AND
25901: PUSH
25902: LD_EXP 48
25906: PUSH
25907: LD_INT 1
25909: EQUAL
25910: AND
25911: PUSH
25912: LD_INT 22
25914: PUSH
25915: LD_INT 3
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 21
25924: PUSH
25925: LD_INT 1
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PPUSH
25936: CALL_OW 69
25940: PUSH
25941: LD_INT 0
25943: EQUAL
25944: AND
25945: IFFALSE 25954
25947: GO 25949
25949: DISABLE
// FinishMission ;
25950: CALL 25955 0 0
25954: END
// export function FinishMission ; begin
25955: LD_INT 0
25957: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25958: LD_EXP 52
25962: PPUSH
25963: LD_STRING 10_KhatamStatus_1
25965: PPUSH
25966: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25970: LD_EXP 51
25974: PPUSH
25975: LD_STRING 10_GensherEscape_1
25977: PPUSH
25978: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25982: LD_INT 12
25984: PPUSH
25985: LD_INT 1
25987: PPUSH
25988: CALL_OW 321
25992: PUSH
25993: LD_INT 2
25995: EQUAL
25996: IFFALSE 26010
// begin AddMedal ( sights , 1 ) ;
25998: LD_STRING sights
26000: PPUSH
26001: LD_INT 1
26003: PPUSH
26004: CALL_OW 101
// end else
26008: GO 26021
// begin AddMedal ( sights , - 1 ) ;
26010: LD_STRING sights
26012: PPUSH
26013: LD_INT 1
26015: NEG
26016: PPUSH
26017: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26021: LD_INT 32
26023: PPUSH
26024: LD_INT 1
26026: PPUSH
26027: CALL_OW 321
26031: PUSH
26032: LD_INT 2
26034: EQUAL
26035: IFFALSE 26049
// begin AddMedal ( computers , 1 ) ;
26037: LD_STRING computers
26039: PPUSH
26040: LD_INT 1
26042: PPUSH
26043: CALL_OW 101
// end else
26047: GO 26060
// begin AddMedal ( computers , - 1 ) ;
26049: LD_STRING computers
26051: PPUSH
26052: LD_INT 1
26054: NEG
26055: PPUSH
26056: CALL_OW 101
// end ; if arabianEscape = 0 then
26060: LD_EXP 47
26064: PUSH
26065: LD_INT 0
26067: EQUAL
26068: IFFALSE 26092
// begin AddMedal ( renegades , 2 ) ;
26070: LD_STRING renegades
26072: PPUSH
26073: LD_INT 2
26075: PPUSH
26076: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26080: LD_INT 0
26082: PPUSH
26083: LD_STRING 10_ScientistsEscape_1
26085: PPUSH
26086: CALL_OW 39
// end else
26090: GO 26103
// begin AddMedal ( renegades , - 1 ) ;
26092: LD_STRING renegades
26094: PPUSH
26095: LD_INT 1
26097: NEG
26098: PPUSH
26099: CALL_OW 101
// end ; SaveEpsilonBase ;
26103: CALL 26827 0 0
// GiveMedals ( Main ) ;
26107: LD_STRING Main
26109: PPUSH
26110: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26114: LD_INT 22
26116: PUSH
26117: LD_INT 1
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 23
26126: PUSH
26127: LD_INT 1
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: LD_INT 21
26136: PUSH
26137: LD_INT 1
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 2
26146: PUSH
26147: LD_INT 25
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 25
26159: PUSH
26160: LD_INT 2
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: PUSH
26167: LD_INT 25
26169: PUSH
26170: LD_INT 3
26172: PUSH
26173: EMPTY
26174: LIST
26175: LIST
26176: PUSH
26177: LD_INT 25
26179: PUSH
26180: LD_INT 4
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: LD_INT 25
26189: PUSH
26190: LD_INT 5
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 25
26199: PUSH
26200: LD_INT 8
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: PPUSH
26227: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26231: LD_EXP 1
26235: PPUSH
26236: LD_EXP 53
26240: PUSH
26241: LD_STRING JMM
26243: STR
26244: PPUSH
26245: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26249: LD_EXP 2
26253: PPUSH
26254: LD_EXP 53
26258: PUSH
26259: LD_STRING Brown
26261: STR
26262: PPUSH
26263: CALL 9989 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26267: LD_EXP 3
26271: PPUSH
26272: LD_EXP 53
26276: PUSH
26277: LD_STRING Donaldson
26279: STR
26280: PPUSH
26281: CALL 9989 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26285: LD_EXP 4
26289: PPUSH
26290: LD_EXP 53
26294: PUSH
26295: LD_STRING Bobby
26297: STR
26298: PPUSH
26299: CALL 9989 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26303: LD_EXP 5
26307: PPUSH
26308: LD_EXP 53
26312: PUSH
26313: LD_STRING Cyrus
26315: STR
26316: PPUSH
26317: CALL 9989 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26321: LD_EXP 6
26325: PPUSH
26326: LD_EXP 53
26330: PUSH
26331: LD_STRING Lisa
26333: STR
26334: PPUSH
26335: CALL 9989 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26339: LD_EXP 7
26343: PPUSH
26344: LD_EXP 53
26348: PUSH
26349: LD_STRING Frank
26351: STR
26352: PPUSH
26353: CALL 9989 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26357: LD_EXP 8
26361: PPUSH
26362: LD_EXP 53
26366: PUSH
26367: LD_STRING Kikuchi
26369: STR
26370: PPUSH
26371: CALL 9989 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26375: LD_EXP 9
26379: PPUSH
26380: LD_EXP 53
26384: PUSH
26385: LD_STRING Houten
26387: STR
26388: PPUSH
26389: CALL 9989 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26393: LD_EXP 10
26397: PPUSH
26398: LD_EXP 53
26402: PUSH
26403: LD_STRING Gary
26405: STR
26406: PPUSH
26407: CALL 9989 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26411: LD_EXP 19
26415: PPUSH
26416: LD_EXP 53
26420: PUSH
26421: LD_STRING Cornell
26423: STR
26424: PPUSH
26425: CALL 9989 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26429: LD_EXP 11
26433: PPUSH
26434: LD_EXP 53
26438: PUSH
26439: LD_STRING Simms
26441: STR
26442: PPUSH
26443: CALL 9989 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26447: LD_EXP 12
26451: PPUSH
26452: LD_EXP 53
26456: PUSH
26457: LD_STRING Denis
26459: STR
26460: PPUSH
26461: CALL 9989 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26465: LD_EXP 13
26469: PPUSH
26470: LD_EXP 53
26474: PUSH
26475: LD_STRING Joan
26477: STR
26478: PPUSH
26479: CALL 9989 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26483: LD_EXP 15
26487: PPUSH
26488: LD_EXP 53
26492: PUSH
26493: LD_STRING Gladstone
26495: STR
26496: PPUSH
26497: CALL 9989 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26501: LD_EXP 17
26505: PPUSH
26506: LD_EXP 53
26510: PUSH
26511: LD_STRING DeltaDoctor
26513: STR
26514: PPUSH
26515: CALL 9989 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26519: LD_EXP 22
26523: PPUSH
26524: LD_STRING 10c_lock
26526: PPUSH
26527: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26531: LD_INT 50
26533: PUSH
26534: EMPTY
26535: LIST
26536: PUSH
26537: LD_INT 22
26539: PUSH
26540: LD_INT 1
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: LD_INT 21
26549: PUSH
26550: LD_INT 1
26552: PUSH
26553: EMPTY
26554: LIST
26555: LIST
26556: PUSH
26557: LD_INT 2
26559: PUSH
26560: LD_INT 25
26562: PUSH
26563: LD_INT 1
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: PUSH
26570: LD_INT 25
26572: PUSH
26573: LD_INT 2
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 25
26582: PUSH
26583: LD_INT 3
26585: PUSH
26586: EMPTY
26587: LIST
26588: LIST
26589: PUSH
26590: LD_INT 25
26592: PUSH
26593: LD_INT 4
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 25
26602: PUSH
26603: LD_INT 5
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: LD_INT 25
26612: PUSH
26613: LD_INT 8
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: EMPTY
26621: LIST
26622: LIST
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: PUSH
26629: EMPTY
26630: LIST
26631: LIST
26632: LIST
26633: LIST
26634: PPUSH
26635: CALL_OW 69
26639: PUSH
26640: LD_EXP 1
26644: PUSH
26645: LD_EXP 2
26649: PUSH
26650: LD_EXP 3
26654: PUSH
26655: LD_EXP 4
26659: PUSH
26660: LD_EXP 5
26664: PUSH
26665: LD_EXP 6
26669: PUSH
26670: LD_EXP 7
26674: PUSH
26675: LD_EXP 15
26679: PUSH
26680: LD_EXP 8
26684: PUSH
26685: LD_EXP 12
26689: PUSH
26690: LD_EXP 13
26694: PUSH
26695: LD_EXP 9
26699: PUSH
26700: LD_EXP 11
26704: PUSH
26705: LD_EXP 10
26709: PUSH
26710: LD_EXP 17
26714: PUSH
26715: LD_EXP 19
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: LIST
26724: LIST
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: DIFF
26738: PPUSH
26739: LD_STRING 10_other_survivors
26741: PPUSH
26742: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26746: LD_INT 50
26748: PUSH
26749: EMPTY
26750: LIST
26751: PUSH
26752: LD_INT 22
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 21
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 2
26774: PUSH
26775: LD_INT 25
26777: PUSH
26778: LD_INT 16
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 25
26787: PUSH
26788: LD_INT 12
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: PPUSH
26806: CALL_OW 69
26810: PPUSH
26811: LD_STRING 10_ape
26813: PPUSH
26814: CALL_OW 38
// YouWin ;
26818: CALL_OW 103
// end ;
26822: LD_VAR 0 1
26826: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26827: LD_INT 0
26829: PPUSH
26830: PPUSH
26831: PPUSH
26832: PPUSH
// epsilonBase = [ ] ;
26833: LD_ADDR_VAR 0 2
26837: PUSH
26838: EMPTY
26839: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26840: LD_ADDR_VAR 0 3
26844: PUSH
26845: LD_INT 22
26847: PUSH
26848: LD_INT 1
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PUSH
26855: LD_INT 23
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 21
26867: PUSH
26868: LD_INT 3
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: LD_INT 50
26877: PUSH
26878: EMPTY
26879: LIST
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: PPUSH
26887: CALL_OW 69
26891: ST_TO_ADDR
// for i in buildings do
26892: LD_ADDR_VAR 0 4
26896: PUSH
26897: LD_VAR 0 3
26901: PUSH
26902: FOR_IN
26903: IFFALSE 27355
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26905: LD_VAR 0 4
26909: PPUSH
26910: CALL_OW 266
26914: PUSH
26915: LD_INT 6
26917: PUSH
26918: LD_INT 7
26920: PUSH
26921: LD_INT 8
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: LIST
26928: IN
26929: IFFALSE 27043
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26931: LD_ADDR_VAR 0 2
26935: PUSH
26936: LD_VAR 0 2
26940: PUSH
26941: LD_VAR 0 4
26945: PPUSH
26946: CALL_OW 266
26950: PUSH
26951: LD_VAR 0 4
26955: PPUSH
26956: CALL_OW 250
26960: PUSH
26961: LD_VAR 0 4
26965: PPUSH
26966: CALL_OW 251
26970: PUSH
26971: LD_VAR 0 4
26975: PPUSH
26976: CALL_OW 254
26980: PUSH
26981: LD_VAR 0 4
26985: PPUSH
26986: CALL_OW 267
26990: PUSH
26991: LD_VAR 0 4
26995: PPUSH
26996: CALL_OW 248
27000: PUSH
27001: LD_VAR 0 4
27005: PPUSH
27006: LD_INT 1
27008: PPUSH
27009: CALL_OW 268
27013: PUSH
27014: LD_VAR 0 4
27018: PPUSH
27019: LD_INT 2
27021: PPUSH
27022: CALL_OW 268
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: PUSH
27037: EMPTY
27038: LIST
27039: ADD
27040: ST_TO_ADDR
27041: GO 27353
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
27043: LD_VAR 0 4
27047: PPUSH
27048: CALL_OW 266
27052: PUSH
27053: LD_INT 32
27055: EQUAL
27056: PUSH
27057: LD_VAR 0 4
27061: PPUSH
27062: CALL_OW 266
27066: PUSH
27067: LD_INT 33
27069: EQUAL
27070: OR
27071: IFFALSE 27168
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27073: LD_ADDR_VAR 0 2
27077: PUSH
27078: LD_VAR 0 2
27082: PUSH
27083: LD_VAR 0 4
27087: PPUSH
27088: CALL_OW 266
27092: PUSH
27093: LD_VAR 0 4
27097: PPUSH
27098: CALL_OW 250
27102: PUSH
27103: LD_VAR 0 4
27107: PPUSH
27108: CALL_OW 251
27112: PUSH
27113: LD_VAR 0 4
27117: PPUSH
27118: CALL_OW 254
27122: PUSH
27123: LD_VAR 0 4
27127: PPUSH
27128: CALL_OW 267
27132: PUSH
27133: LD_VAR 0 4
27137: PPUSH
27138: CALL_OW 248
27142: PUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: CALL_OW 269
27152: PUSH
27153: EMPTY
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: PUSH
27162: EMPTY
27163: LIST
27164: ADD
27165: ST_TO_ADDR
27166: GO 27353
// if GetBType ( i ) = b_factory then
27168: LD_VAR 0 4
27172: PPUSH
27173: CALL_OW 266
27177: PUSH
27178: LD_INT 3
27180: EQUAL
27181: IFFALSE 27271
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27183: LD_ADDR_VAR 0 2
27187: PUSH
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_INT 1
27195: PPUSH
27196: LD_VAR 0 4
27200: PPUSH
27201: CALL_OW 266
27205: PUSH
27206: LD_VAR 0 4
27210: PPUSH
27211: CALL_OW 250
27215: PUSH
27216: LD_VAR 0 4
27220: PPUSH
27221: CALL_OW 251
27225: PUSH
27226: LD_VAR 0 4
27230: PPUSH
27231: CALL_OW 254
27235: PUSH
27236: LD_VAR 0 4
27240: PPUSH
27241: CALL_OW 267
27245: PUSH
27246: LD_VAR 0 4
27250: PPUSH
27251: CALL_OW 248
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: LIST
27260: LIST
27261: LIST
27262: LIST
27263: PPUSH
27264: CALL_OW 2
27268: ST_TO_ADDR
27269: GO 27353
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27271: LD_ADDR_VAR 0 2
27275: PUSH
27276: LD_VAR 0 2
27280: PUSH
27281: LD_VAR 0 4
27285: PPUSH
27286: CALL_OW 266
27290: PUSH
27291: LD_VAR 0 4
27295: PPUSH
27296: CALL_OW 250
27300: PUSH
27301: LD_VAR 0 4
27305: PPUSH
27306: CALL_OW 251
27310: PUSH
27311: LD_VAR 0 4
27315: PPUSH
27316: CALL_OW 254
27320: PUSH
27321: LD_VAR 0 4
27325: PPUSH
27326: CALL_OW 267
27330: PUSH
27331: LD_VAR 0 4
27335: PPUSH
27336: CALL_OW 248
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: ADD
27352: ST_TO_ADDR
// end ;
27353: GO 26902
27355: POP
27356: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27357: LD_VAR 0 2
27361: PPUSH
27362: LD_STRING 10_EpsilonBase
27364: PPUSH
27365: CALL_OW 39
// end ; end_of_file
27369: LD_VAR 0 1
27373: RET
// every 0 0$01 do
27374: GO 27376
27376: DISABLE
// begin repeat wait ( 0 0$30 ) ;
27377: LD_INT 1050
27379: PPUSH
27380: CALL_OW 67
// if cratesSpawned < 6 then
27384: LD_EXP 55
27388: PUSH
27389: LD_INT 6
27391: LESS
27392: IFFALSE 27429
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27394: LD_INT 3
27396: PPUSH
27397: LD_INT 5
27399: PPUSH
27400: CALL_OW 12
27404: PPUSH
27405: LD_INT 16
27407: PPUSH
27408: LD_INT 1
27410: PPUSH
27411: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27415: LD_ADDR_EXP 55
27419: PUSH
27420: LD_EXP 55
27424: PUSH
27425: LD_INT 1
27427: PLUS
27428: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27429: LD_EXP 55
27433: PUSH
27434: LD_INT 6
27436: GREATEREQUAL
27437: PUSH
27438: LD_EXP 55
27442: PUSH
27443: LD_INT 12
27445: LESS
27446: AND
27447: IFFALSE 27491
// begin wait ( 0 0$30 ) ;
27449: LD_INT 1050
27451: PPUSH
27452: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27456: LD_INT 3
27458: PPUSH
27459: LD_INT 5
27461: PPUSH
27462: CALL_OW 12
27466: PPUSH
27467: LD_INT 16
27469: PPUSH
27470: LD_INT 1
27472: PPUSH
27473: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27477: LD_ADDR_EXP 55
27481: PUSH
27482: LD_EXP 55
27486: PUSH
27487: LD_INT 1
27489: PLUS
27490: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27491: LD_EXP 55
27495: PUSH
27496: LD_INT 12
27498: GREATEREQUAL
27499: IFFALSE 27543
// begin wait ( 1 1$30 ) ;
27501: LD_INT 3150
27503: PPUSH
27504: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27508: LD_INT 3
27510: PPUSH
27511: LD_INT 5
27513: PPUSH
27514: CALL_OW 12
27518: PPUSH
27519: LD_INT 16
27521: PPUSH
27522: LD_INT 1
27524: PPUSH
27525: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27529: LD_ADDR_EXP 55
27533: PUSH
27534: LD_EXP 55
27538: PUSH
27539: LD_INT 1
27541: PLUS
27542: ST_TO_ADDR
// end ; until cratesSpawned >= 35 ;
27543: LD_EXP 55
27547: PUSH
27548: LD_INT 35
27550: GREATEREQUAL
27551: IFFALSE 27377
// end ;
27553: END
