// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 23598 0 0
// PrepareDifficulty ;
 250: CALL 8996 0 0
// PrepareJMMTeam ;
 254: CALL 596 0 0
// PrepareCathyTeam ;
 258: CALL 1671 0 0
// PrepareArabianCommander ;
 262: CALL 3036 0 0
// PrepareArabian ;
 266: CALL 3088 0 0
// BuildArabianBase ;
 270: CALL 11695 0 0
// TameApemans ;
 274: CALL 17525 0 0
// end ;
 278: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 279: LD_EXP 63
 283: PUSH
 284: LD_INT 1
 286: EQUAL
 287: IFFALSE 593
 289: GO 291
 291: DISABLE
 292: LD_INT 0
 294: PPUSH
// begin enable ;
 295: ENABLE
// fogoff ( true ) ;
 296: LD_INT 1
 298: PPUSH
 299: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 303: LD_ADDR_VAR 0 1
 307: PUSH
 308: LD_INT 22
 310: PUSH
 311: LD_INT 1
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: PUSH
 318: LD_INT 21
 320: PUSH
 321: LD_INT 1
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PPUSH
 332: CALL_OW 69
 336: PUSH
 337: FOR_IN
 338: IFFALSE 354
// SetLives ( i , 1000 ) ;
 340: LD_VAR 0 1
 344: PPUSH
 345: LD_INT 1000
 347: PPUSH
 348: CALL_OW 234
 352: GO 337
 354: POP
 355: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 356: LD_ADDR_VAR 0 1
 360: PUSH
 361: LD_INT 22
 363: PUSH
 364: LD_INT 1
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PUSH
 371: LD_INT 2
 373: PUSH
 374: LD_INT 30
 376: PUSH
 377: LD_INT 0
 379: PUSH
 380: EMPTY
 381: LIST
 382: LIST
 383: PUSH
 384: LD_INT 30
 386: PUSH
 387: LD_INT 1
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: LIST
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PPUSH
 403: CALL_OW 69
 407: PUSH
 408: FOR_IN
 409: IFFALSE 433
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 411: LD_VAR 0 1
 415: PPUSH
 416: CALL_OW 274
 420: PPUSH
 421: LD_INT 1
 423: PPUSH
 424: LD_INT 9999
 426: PPUSH
 427: CALL_OW 277
 431: GO 408
 433: POP
 434: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 435: LD_ADDR_VAR 0 1
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 1
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PUSH
 450: LD_INT 2
 452: PUSH
 453: LD_INT 30
 455: PUSH
 456: LD_INT 0
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 30
 465: PUSH
 466: LD_INT 1
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PPUSH
 482: CALL_OW 69
 486: PUSH
 487: FOR_IN
 488: IFFALSE 512
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 490: LD_VAR 0 1
 494: PPUSH
 495: CALL_OW 274
 499: PPUSH
 500: LD_INT 2
 502: PPUSH
 503: LD_INT 9999
 505: PPUSH
 506: CALL_OW 277
 510: GO 487
 512: POP
 513: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 514: LD_ADDR_VAR 0 1
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 2
 531: PUSH
 532: LD_INT 30
 534: PUSH
 535: LD_INT 0
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 30
 544: PUSH
 545: LD_INT 1
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PPUSH
 561: CALL_OW 69
 565: PUSH
 566: FOR_IN
 567: IFFALSE 591
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 569: LD_VAR 0 1
 573: PPUSH
 574: CALL_OW 274
 578: PPUSH
 579: LD_INT 3
 581: PPUSH
 582: LD_INT 9999
 584: PPUSH
 585: CALL_OW 277
 589: GO 566
 591: POP
 592: POP
// end ; end_of_file
 593: PPOPN 1
 595: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 596: LD_INT 0
 598: PPUSH
 599: PPUSH
 600: PPUSH
 601: PPUSH
 602: PPUSH
 603: PPUSH
// uc_side = 1 ;
 604: LD_ADDR_OWVAR 20
 608: PUSH
 609: LD_INT 1
 611: ST_TO_ADDR
// uc_nation = 1 ;
 612: LD_ADDR_OWVAR 21
 616: PUSH
 617: LD_INT 1
 619: ST_TO_ADDR
// count = 0 ;
 620: LD_ADDR_VAR 0 6
 624: PUSH
 625: LD_INT 0
 627: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 628: LD_ADDR_EXP 1
 632: PUSH
 633: LD_STRING 10_JMM
 635: PPUSH
 636: LD_INT 1
 638: PPUSH
 639: CALL 8590 0 2
 643: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 644: LD_ADDR_EXP 20
 648: PUSH
 649: LD_EXP 20
 653: PUSH
 654: LD_EXP 1
 658: ADD
 659: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 660: LD_ADDR_EXP 10
 664: PUSH
 665: LD_STRING 10_Gary
 667: PPUSH
 668: LD_INT 1
 670: PPUSH
 671: CALL 8590 0 2
 675: ST_TO_ADDR
// if Gary then
 676: LD_EXP 10
 680: IFFALSE 698
// JMMSquad = JMMSquad ^ Gary ;
 682: LD_ADDR_EXP 20
 686: PUSH
 687: LD_EXP 20
 691: PUSH
 692: LD_EXP 10
 696: ADD
 697: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 698: LD_ADDR_EXP 5
 702: PUSH
 703: LD_STRING 10_Cyrus
 705: PPUSH
 706: LD_INT 1
 708: PPUSH
 709: CALL 8590 0 2
 713: ST_TO_ADDR
// if Cyrus then
 714: LD_EXP 5
 718: IFFALSE 736
// JMMSquad = JMMSquad ^ Cyrus ;
 720: LD_ADDR_EXP 20
 724: PUSH
 725: LD_EXP 20
 729: PUSH
 730: LD_EXP 5
 734: ADD
 735: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 736: LD_ADDR_EXP 4
 740: PUSH
 741: LD_STRING 10_Bobby
 743: PPUSH
 744: LD_INT 1
 746: PPUSH
 747: CALL 8590 0 2
 751: ST_TO_ADDR
// if Bobby then
 752: LD_EXP 4
 756: IFFALSE 774
// JMMSquad = JMMSquad ^ Bobby ;
 758: LD_ADDR_EXP 20
 762: PUSH
 763: LD_EXP 20
 767: PUSH
 768: LD_EXP 4
 772: ADD
 773: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 774: LD_ADDR_EXP 6
 778: PUSH
 779: LD_STRING 10_Lisa
 781: PPUSH
 782: LD_INT 1
 784: PPUSH
 785: CALL 8590 0 2
 789: ST_TO_ADDR
// if Lisa then
 790: LD_EXP 6
 794: IFFALSE 812
// JMMSquad = JMMSquad ^ Lisa ;
 796: LD_ADDR_EXP 20
 800: PUSH
 801: LD_EXP 20
 805: PUSH
 806: LD_EXP 6
 810: ADD
 811: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 812: LD_ADDR_EXP 2
 816: PUSH
 817: LD_STRING 10_Brown
 819: PPUSH
 820: LD_INT 1
 822: PPUSH
 823: CALL 8590 0 2
 827: ST_TO_ADDR
// if Brown then
 828: LD_EXP 2
 832: IFFALSE 850
// JMMSquad = JMMSquad ^ Brown ;
 834: LD_ADDR_EXP 20
 838: PUSH
 839: LD_EXP 20
 843: PUSH
 844: LD_EXP 2
 848: ADD
 849: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 850: LD_ADDR_EXP 3
 854: PUSH
 855: LD_STRING 10_Donaldson
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: CALL 8590 0 2
 865: ST_TO_ADDR
// if Donaldson then
 866: LD_EXP 3
 870: IFFALSE 888
// JMMSquad = JMMSquad ^ Donaldson ;
 872: LD_ADDR_EXP 20
 876: PUSH
 877: LD_EXP 20
 881: PUSH
 882: LD_EXP 3
 886: ADD
 887: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 888: LD_ADDR_EXP 7
 892: PUSH
 893: LD_STRING 10_Frank
 895: PPUSH
 896: LD_INT 1
 898: PPUSH
 899: CALL 8590 0 2
 903: ST_TO_ADDR
// if Frank then
 904: LD_EXP 7
 908: IFFALSE 926
// JMMSquad = JMMSquad ^ Frank ;
 910: LD_ADDR_EXP 20
 914: PUSH
 915: LD_EXP 20
 919: PUSH
 920: LD_EXP 7
 924: ADD
 925: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 926: LD_ADDR_EXP 9
 930: PUSH
 931: LD_STRING 10_Houten
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL 8590 0 2
 941: ST_TO_ADDR
// if Houten then
 942: LD_EXP 9
 946: IFFALSE 964
// JMMSquad = JMMSquad ^ Houten ;
 948: LD_ADDR_EXP 20
 952: PUSH
 953: LD_EXP 20
 957: PUSH
 958: LD_EXP 9
 962: ADD
 963: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
 964: LD_ADDR_EXP 21
 968: PUSH
 969: LD_STRING OthersIn10
 971: PPUSH
 972: CALL_OW 31
 976: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 977: LD_ADDR_EXP 24
 981: PUSH
 982: LD_STRING Powell
 984: PPUSH
 985: LD_INT 0
 987: PPUSH
 988: CALL 8590 0 2
 992: ST_TO_ADDR
// for i in JMMSquad do
 993: LD_ADDR_VAR 0 2
 997: PUSH
 998: LD_EXP 20
1002: PUSH
1003: FOR_IN
1004: IFFALSE 1263
// begin if count < 3 then
1006: LD_VAR 0 6
1010: PUSH
1011: LD_INT 3
1013: LESS
1014: IFFALSE 1131
// begin vc_engine = 1 ;
1016: LD_ADDR_OWVAR 39
1020: PUSH
1021: LD_INT 1
1023: ST_TO_ADDR
// vc_control = 1 ;
1024: LD_ADDR_OWVAR 38
1028: PUSH
1029: LD_INT 1
1031: ST_TO_ADDR
// vc_weapon = 12 ;
1032: LD_ADDR_OWVAR 40
1036: PUSH
1037: LD_INT 12
1039: ST_TO_ADDR
// vc_chassis = 3 ;
1040: LD_ADDR_OWVAR 37
1044: PUSH
1045: LD_INT 3
1047: ST_TO_ADDR
// veh = CreateVehicle ;
1048: LD_ADDR_VAR 0 4
1052: PUSH
1053: CALL_OW 45
1057: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1058: LD_VAR 0 4
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1070: LD_VAR 0 4
1074: PPUSH
1075: LD_INT 2
1077: PPUSH
1078: LD_INT 0
1080: PPUSH
1081: CALL_OW 49
// if count mod 2 = 0 then
1085: LD_VAR 0 6
1089: PUSH
1090: LD_INT 2
1092: MOD
1093: PUSH
1094: LD_INT 0
1096: EQUAL
1097: IFFALSE 1116
// AddCargo ( veh , 1 , 100 ) else
1099: LD_VAR 0 4
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: LD_INT 100
1109: PPUSH
1110: CALL_OW 291
1114: GO 1131
// AddCargo ( veh , 3 , 100 ) end ;
1116: LD_VAR 0 4
1120: PPUSH
1121: LD_INT 3
1123: PPUSH
1124: LD_INT 100
1126: PPUSH
1127: CALL_OW 291
// if count >= 3 then
1131: LD_VAR 0 6
1135: PUSH
1136: LD_INT 3
1138: GREATEREQUAL
1139: IFFALSE 1233
// begin vc_engine = 1 ;
1141: LD_ADDR_OWVAR 39
1145: PUSH
1146: LD_INT 1
1148: ST_TO_ADDR
// vc_control = 1 ;
1149: LD_ADDR_OWVAR 38
1153: PUSH
1154: LD_INT 1
1156: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1157: LD_ADDR_OWVAR 40
1161: PUSH
1162: LD_INT 3
1164: PUSH
1165: LD_INT 4
1167: PUSH
1168: LD_INT 5
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 1
1178: PPUSH
1179: LD_INT 3
1181: PPUSH
1182: CALL_OW 12
1186: ARRAY
1187: ST_TO_ADDR
// vc_chassis = 3 ;
1188: LD_ADDR_OWVAR 37
1192: PUSH
1193: LD_INT 3
1195: ST_TO_ADDR
// veh = CreateVehicle ;
1196: LD_ADDR_VAR 0 4
1200: PUSH
1201: CALL_OW 45
1205: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1206: LD_VAR 0 4
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1218: LD_VAR 0 4
1222: PPUSH
1223: LD_INT 2
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL_OW 49
// end ; count = count + 1 ;
1233: LD_ADDR_VAR 0 6
1237: PUSH
1238: LD_VAR 0 6
1242: PUSH
1243: LD_INT 1
1245: PLUS
1246: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1247: LD_VAR 0 2
1251: PPUSH
1252: LD_VAR 0 4
1256: PPUSH
1257: CALL_OW 52
// end ;
1261: GO 1003
1263: POP
1264: POP
// for i in others10 do
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_EXP 21
1274: PUSH
1275: FOR_IN
1276: IFFALSE 1402
// begin vc_engine = 1 ;
1278: LD_ADDR_OWVAR 39
1282: PUSH
1283: LD_INT 1
1285: ST_TO_ADDR
// vc_control = 1 ;
1286: LD_ADDR_OWVAR 38
1290: PUSH
1291: LD_INT 1
1293: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1294: LD_ADDR_OWVAR 40
1298: PUSH
1299: LD_INT 3
1301: PUSH
1302: LD_INT 4
1304: PUSH
1305: LD_INT 5
1307: PUSH
1308: EMPTY
1309: LIST
1310: LIST
1311: LIST
1312: PUSH
1313: LD_INT 1
1315: PPUSH
1316: LD_INT 3
1318: PPUSH
1319: CALL_OW 12
1323: ARRAY
1324: ST_TO_ADDR
// vc_chassis = 3 ;
1325: LD_ADDR_OWVAR 37
1329: PUSH
1330: LD_INT 3
1332: ST_TO_ADDR
// veh = CreateVehicle ;
1333: LD_ADDR_VAR 0 4
1337: PUSH
1338: CALL_OW 45
1342: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1343: LD_VAR 0 4
1347: PPUSH
1348: LD_INT 1
1350: PPUSH
1351: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1355: LD_VAR 0 4
1359: PPUSH
1360: LD_INT 2
1362: PPUSH
1363: LD_INT 0
1365: PPUSH
1366: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1370: LD_ADDR_EXP 28
1374: PUSH
1375: LD_EXP 28
1379: PUSH
1380: LD_VAR 0 4
1384: ADD
1385: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1386: LD_VAR 0 2
1390: PPUSH
1391: LD_VAR 0 4
1395: PPUSH
1396: CALL_OW 52
// end ;
1400: GO 1275
1402: POP
1403: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1404: LD_INT 22
1406: PUSH
1407: LD_INT 1
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 21
1416: PUSH
1417: LD_INT 1
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PPUSH
1428: CALL_OW 69
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: CALL_OW 336
// end ;
1440: LD_VAR 0 1
1444: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1445: LD_INT 0
1447: PPUSH
1448: PPUSH
1449: PPUSH
1450: PPUSH
1451: PPUSH
// uc_side = 1 ;
1452: LD_ADDR_OWVAR 20
1456: PUSH
1457: LD_INT 1
1459: ST_TO_ADDR
// uc_nation = 1 ;
1460: LD_ADDR_OWVAR 21
1464: PUSH
1465: LD_INT 1
1467: ST_TO_ADDR
// for i := 1 to 10 do
1468: LD_ADDR_VAR 0 2
1472: PUSH
1473: DOUBLE
1474: LD_INT 1
1476: DEC
1477: ST_TO_ADDR
1478: LD_INT 10
1480: PUSH
1481: FOR_TO
1482: IFFALSE 1664
// begin vc_engine = 1 ;
1484: LD_ADDR_OWVAR 39
1488: PUSH
1489: LD_INT 1
1491: ST_TO_ADDR
// vc_control = 1 ;
1492: LD_ADDR_OWVAR 38
1496: PUSH
1497: LD_INT 1
1499: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1500: LD_ADDR_OWVAR 40
1504: PUSH
1505: LD_INT 3
1507: PUSH
1508: LD_INT 4
1510: PUSH
1511: LD_INT 5
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: LIST
1521: LIST
1522: PUSH
1523: LD_INT 1
1525: PPUSH
1526: LD_INT 4
1528: PPUSH
1529: CALL_OW 12
1533: ARRAY
1534: ST_TO_ADDR
// vc_chassis = 3 ;
1535: LD_ADDR_OWVAR 37
1539: PUSH
1540: LD_INT 3
1542: ST_TO_ADDR
// veh = CreateVehicle ;
1543: LD_ADDR_VAR 0 3
1547: PUSH
1548: CALL_OW 45
1552: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1553: LD_VAR 0 3
1557: PPUSH
1558: LD_INT 1
1560: PPUSH
1561: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1565: LD_VAR 0 3
1569: PPUSH
1570: LD_INT 2
1572: PPUSH
1573: LD_INT 0
1575: PPUSH
1576: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1580: LD_ADDR_EXP 28
1584: PUSH
1585: LD_EXP 28
1589: PUSH
1590: LD_VAR 0 3
1594: ADD
1595: ST_TO_ADDR
// if vc_weapon = 12 then
1596: LD_OWVAR 40
1600: PUSH
1601: LD_INT 12
1603: EQUAL
1604: IFFALSE 1662
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1606: LD_ADDR_VAR 0 4
1610: PUSH
1611: LD_INT 5
1613: PPUSH
1614: LD_INT 10
1616: PPUSH
1617: CALL_OW 12
1621: PUSH
1622: LD_INT 10
1624: MUL
1625: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1626: LD_VAR 0 3
1630: PPUSH
1631: LD_INT 1
1633: PUSH
1634: LD_INT 3
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: PUSH
1641: LD_INT 1
1643: PPUSH
1644: LD_INT 2
1646: PPUSH
1647: CALL_OW 12
1651: ARRAY
1652: PPUSH
1653: LD_VAR 0 4
1657: PPUSH
1658: CALL_OW 291
// end ; end ;
1662: GO 1481
1664: POP
1665: POP
// end ;
1666: LD_VAR 0 1
1670: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1671: LD_INT 0
1673: PPUSH
1674: PPUSH
1675: PPUSH
// uc_side = 4 ;
1676: LD_ADDR_OWVAR 20
1680: PUSH
1681: LD_INT 4
1683: ST_TO_ADDR
// uc_nation = 1 ;
1684: LD_ADDR_OWVAR 21
1688: PUSH
1689: LD_INT 1
1691: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1692: LD_ADDR_EXP 11
1696: PUSH
1697: LD_STRING Simms
1699: PPUSH
1700: LD_INT 0
1702: PPUSH
1703: CALL 8590 0 2
1707: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1708: LD_ADDR_EXP 12
1712: PUSH
1713: LD_STRING 08_Denis
1715: PPUSH
1716: LD_INT 1
1718: PPUSH
1719: CALL 8590 0 2
1723: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1724: LD_ADDR_EXP 13
1728: PUSH
1729: LD_STRING 08_Joan
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: CALL 8590 0 2
1739: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1740: LD_ADDR_EXP 14
1744: PUSH
1745: LD_STRING Khatam
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: CALL 8590 0 2
1755: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1756: LD_ADDR_EXP 15
1760: PUSH
1761: LD_STRING Gladstone
1763: PPUSH
1764: LD_INT 1
1766: PPUSH
1767: CALL 8590 0 2
1771: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1772: LD_ADDR_EXP 17
1776: PUSH
1777: LD_STRING DeltaDoctor
1779: PPUSH
1780: LD_INT 1
1782: PPUSH
1783: CALL 8590 0 2
1787: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1788: LD_STRING 08_Frank
1790: PPUSH
1791: CALL_OW 28
1795: PUSH
1796: LD_INT 1
1798: EQUAL
1799: IFFALSE 1817
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1801: LD_ADDR_EXP 8
1805: PUSH
1806: LD_STRING Yamoko
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL 8590 0 2
1816: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1817: LD_ADDR_EXP 22
1821: PUSH
1822: LD_STRING 09_others
1824: PPUSH
1825: CALL_OW 31
1829: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1830: LD_ADDR_EXP 23
1834: PUSH
1835: LD_STRING 09_apes
1837: PPUSH
1838: CALL_OW 31
1842: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1843: LD_EXP 11
1847: PPUSH
1848: LD_INT 1
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1858: LD_EXP 12
1862: PPUSH
1863: LD_INT 1
1865: PPUSH
1866: LD_INT 0
1868: PPUSH
1869: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1873: LD_EXP 13
1877: PPUSH
1878: LD_INT 1
1880: PPUSH
1881: LD_INT 0
1883: PPUSH
1884: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1888: LD_EXP 14
1892: PPUSH
1893: LD_INT 1
1895: PPUSH
1896: LD_INT 0
1898: PPUSH
1899: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1903: LD_EXP 15
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1918: LD_EXP 17
1922: PPUSH
1923: LD_INT 1
1925: PPUSH
1926: LD_INT 0
1928: PPUSH
1929: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1933: LD_EXP 8
1937: PPUSH
1938: LD_INT 1
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1948: LD_EXP 11
1952: PUSH
1953: LD_EXP 14
1957: PUSH
1958: LD_EXP 12
1962: PUSH
1963: LD_EXP 15
1967: PUSH
1968: LD_EXP 17
1972: PUSH
1973: LD_EXP 13
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: PPUSH
1986: LD_INT 4
1988: PPUSH
1989: CALL_OW 336
// if others09 > 2 then
1993: LD_EXP 22
1997: PUSH
1998: LD_INT 2
2000: GREATER
2001: IFFALSE 2064
// begin for i := 1 to 3 do
2003: LD_ADDR_VAR 0 2
2007: PUSH
2008: DOUBLE
2009: LD_INT 1
2011: DEC
2012: ST_TO_ADDR
2013: LD_INT 3
2015: PUSH
2016: FOR_TO
2017: IFFALSE 2060
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2019: LD_EXP 22
2023: PUSH
2024: LD_VAR 0 2
2028: ARRAY
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2040: LD_EXP 22
2044: PUSH
2045: LD_VAR 0 2
2049: ARRAY
2050: PPUSH
2051: LD_INT 2
2053: PPUSH
2054: CALL_OW 336
// end ;
2058: GO 2016
2060: POP
2061: POP
// end else
2062: GO 2108
// begin for i in others09 do
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: LD_EXP 22
2073: PUSH
2074: FOR_IN
2075: IFFALSE 2106
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2077: LD_VAR 0 2
2081: PPUSH
2082: LD_INT 1
2084: PPUSH
2085: LD_INT 0
2087: PPUSH
2088: CALL_OW 49
// SetClass ( i , 2 ) ;
2092: LD_VAR 0 2
2096: PPUSH
2097: LD_INT 2
2099: PPUSH
2100: CALL_OW 336
// end ;
2104: GO 2074
2106: POP
2107: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2108: LD_INT 22
2110: PUSH
2111: LD_INT 4
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 25
2120: PUSH
2121: LD_INT 2
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PPUSH
2132: CALL_OW 69
2136: PUSH
2137: LD_INT 0
2139: EQUAL
2140: IFFALSE 2258
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2142: LD_ADDR_VAR 0 3
2146: PUSH
2147: LD_INT 22
2149: PUSH
2150: LD_INT 4
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: PUSH
2157: LD_INT 25
2159: PUSH
2160: LD_INT 2
2162: PUSH
2163: EMPTY
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PPUSH
2171: CALL_OW 69
2175: PUSH
2176: LD_EXP 11
2180: PUSH
2181: LD_EXP 14
2185: PUSH
2186: LD_EXP 12
2190: PUSH
2191: LD_EXP 15
2195: PUSH
2196: LD_EXP 17
2200: PUSH
2201: LD_EXP 13
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: LIST
2210: LIST
2211: LIST
2212: LIST
2213: DIFF
2214: ST_TO_ADDR
// if not tmp then
2215: LD_VAR 0 3
2219: NOT
2220: IFFALSE 2242
// begin if Denis then
2222: LD_EXP 12
2226: IFFALSE 2240
// SetClass ( Denis , 2 ) ;
2228: LD_EXP 12
2232: PPUSH
2233: LD_INT 2
2235: PPUSH
2236: CALL_OW 336
// exit ;
2240: GO 2408
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2242: LD_VAR 0 3
2246: PUSH
2247: LD_INT 1
2249: ARRAY
2250: PPUSH
2251: LD_INT 2
2253: PPUSH
2254: CALL_OW 336
// end ; for i in ape09 do
2258: LD_ADDR_VAR 0 2
2262: PUSH
2263: LD_EXP 23
2267: PUSH
2268: FOR_IN
2269: IFFALSE 2288
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2271: LD_VAR 0 2
2275: PPUSH
2276: LD_INT 1
2278: PPUSH
2279: LD_INT 0
2281: PPUSH
2282: CALL_OW 49
2286: GO 2268
2288: POP
2289: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2290: LD_INT 22
2292: PUSH
2293: LD_INT 4
2295: PUSH
2296: EMPTY
2297: LIST
2298: LIST
2299: PUSH
2300: LD_INT 25
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: PUSH
2310: EMPTY
2311: LIST
2312: LIST
2313: PPUSH
2314: CALL_OW 69
2318: PPUSH
2319: LD_INT 0
2321: PPUSH
2322: LD_INT 101
2324: PPUSH
2325: LD_INT 30
2327: PPUSH
2328: LD_INT 2
2330: PPUSH
2331: CALL_OW 205
// uc_side = 1 ;
2335: LD_ADDR_OWVAR 20
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// hc_class := 1 ;
2343: LD_ADDR_OWVAR 28
2347: PUSH
2348: LD_INT 1
2350: ST_TO_ADDR
// hc_sex := sex_female ;
2351: LD_ADDR_OWVAR 27
2355: PUSH
2356: LD_INT 2
2358: ST_TO_ADDR
// hc_gallery :=  ;
2359: LD_ADDR_OWVAR 33
2363: PUSH
2364: LD_STRING 
2366: ST_TO_ADDR
// hc_name :=  ;
2367: LD_ADDR_OWVAR 26
2371: PUSH
2372: LD_STRING 
2374: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2375: LD_ADDR_OWVAR 31
2379: PUSH
2380: LD_INT 1
2382: PUSH
2383: LD_INT 7
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// AmScout = CreateHuman ;
2398: LD_ADDR_EXP 18
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// end ;
2408: LD_VAR 0 1
2412: RET
// export function PrepareCornell ; begin
2413: LD_INT 0
2415: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2416: LD_INT 4
2418: PPUSH
2419: LD_INT 4
2421: PPUSH
2422: CALL_OW 343
// uc_side = 4 ;
2426: LD_ADDR_OWVAR 20
2430: PUSH
2431: LD_INT 4
2433: ST_TO_ADDR
// uc_nation = 1 ;
2434: LD_ADDR_OWVAR 21
2438: PUSH
2439: LD_INT 1
2441: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2442: LD_ADDR_EXP 19
2446: PUSH
2447: LD_STRING 03_Cornel
2449: PPUSH
2450: LD_INT 1
2452: PPUSH
2453: CALL 8590 0 2
2457: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2458: LD_EXP 19
2462: PPUSH
2463: LD_INT 8
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2473: LD_EXP 19
2477: PPUSH
2478: LD_INT 350
2480: PPUSH
2481: CALL_OW 234
// if IsInUnit ( JMM ) then
2485: LD_EXP 1
2489: PPUSH
2490: CALL_OW 310
2494: IFFALSE 2537
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2496: LD_EXP 19
2500: PPUSH
2501: LD_EXP 1
2505: PPUSH
2506: CALL_OW 310
2510: PPUSH
2511: CALL_OW 250
2515: PPUSH
2516: LD_EXP 1
2520: PPUSH
2521: CALL_OW 310
2525: PPUSH
2526: CALL_OW 251
2530: PPUSH
2531: CALL_OW 111
2535: GO 2566
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2537: LD_EXP 19
2541: PPUSH
2542: LD_EXP 1
2546: PPUSH
2547: CALL_OW 250
2551: PPUSH
2552: LD_EXP 1
2556: PPUSH
2557: CALL_OW 251
2561: PPUSH
2562: CALL_OW 111
// end ; end_of_file
2566: LD_VAR 0 1
2570: RET
// export function PrepareRussians ; var i , un ; begin
2571: LD_INT 0
2573: PPUSH
2574: PPUSH
2575: PPUSH
// uc_side = 3 ;
2576: LD_ADDR_OWVAR 20
2580: PUSH
2581: LD_INT 3
2583: ST_TO_ADDR
// uc_nation = 3 ;
2584: LD_ADDR_OWVAR 21
2588: PUSH
2589: LD_INT 3
2591: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2592: LD_ADDR_EXP 25
2596: PUSH
2597: LD_STRING Tsaritsyn
2599: PPUSH
2600: LD_INT 0
2602: PPUSH
2603: CALL 8590 0 2
2607: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2608: LD_EXP 25
2612: PPUSH
2613: LD_INT 3
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: CALL_OW 49
// for i = 1 to 14 do
2623: LD_ADDR_VAR 0 2
2627: PUSH
2628: DOUBLE
2629: LD_INT 1
2631: DEC
2632: ST_TO_ADDR
2633: LD_INT 14
2635: PUSH
2636: FOR_TO
2637: IFFALSE 2723
// begin uc_side = 3 ;
2639: LD_ADDR_OWVAR 20
2643: PUSH
2644: LD_INT 3
2646: ST_TO_ADDR
// uc_nation = 3 ;
2647: LD_ADDR_OWVAR 21
2651: PUSH
2652: LD_INT 3
2654: ST_TO_ADDR
// hc_gallery =  ;
2655: LD_ADDR_OWVAR 33
2659: PUSH
2660: LD_STRING 
2662: ST_TO_ADDR
// hc_name =  ;
2663: LD_ADDR_OWVAR 26
2667: PUSH
2668: LD_STRING 
2670: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2671: LD_INT 0
2673: PPUSH
2674: LD_INT 1
2676: PPUSH
2677: LD_EXP 36
2681: PPUSH
2682: LD_EXP 37
2686: PPUSH
2687: CALL_OW 12
2691: PPUSH
2692: CALL_OW 380
// un = CreateHuman ;
2696: LD_ADDR_VAR 0 3
2700: PUSH
2701: CALL_OW 44
2705: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2706: LD_VAR 0 3
2710: PPUSH
2711: LD_INT 3
2713: PPUSH
2714: LD_INT 0
2716: PPUSH
2717: CALL_OW 49
// end ;
2721: GO 2636
2723: POP
2724: POP
// for i = 1 to 6 do
2725: LD_ADDR_VAR 0 2
2729: PUSH
2730: DOUBLE
2731: LD_INT 1
2733: DEC
2734: ST_TO_ADDR
2735: LD_INT 6
2737: PUSH
2738: FOR_TO
2739: IFFALSE 2825
// begin uc_side = 3 ;
2741: LD_ADDR_OWVAR 20
2745: PUSH
2746: LD_INT 3
2748: ST_TO_ADDR
// uc_nation = 3 ;
2749: LD_ADDR_OWVAR 21
2753: PUSH
2754: LD_INT 3
2756: ST_TO_ADDR
// hc_gallery =  ;
2757: LD_ADDR_OWVAR 33
2761: PUSH
2762: LD_STRING 
2764: ST_TO_ADDR
// hc_name =  ;
2765: LD_ADDR_OWVAR 26
2769: PUSH
2770: LD_STRING 
2772: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2773: LD_INT 0
2775: PPUSH
2776: LD_INT 2
2778: PPUSH
2779: LD_EXP 36
2783: PPUSH
2784: LD_EXP 37
2788: PPUSH
2789: CALL_OW 12
2793: PPUSH
2794: CALL_OW 380
// un = CreateHuman ;
2798: LD_ADDR_VAR 0 3
2802: PUSH
2803: CALL_OW 44
2807: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2808: LD_VAR 0 3
2812: PPUSH
2813: LD_INT 3
2815: PPUSH
2816: LD_INT 0
2818: PPUSH
2819: CALL_OW 49
// end ;
2823: GO 2738
2825: POP
2826: POP
// for i = 1 to 6 do
2827: LD_ADDR_VAR 0 2
2831: PUSH
2832: DOUBLE
2833: LD_INT 1
2835: DEC
2836: ST_TO_ADDR
2837: LD_INT 6
2839: PUSH
2840: FOR_TO
2841: IFFALSE 2927
// begin uc_side = 3 ;
2843: LD_ADDR_OWVAR 20
2847: PUSH
2848: LD_INT 3
2850: ST_TO_ADDR
// uc_nation = 3 ;
2851: LD_ADDR_OWVAR 21
2855: PUSH
2856: LD_INT 3
2858: ST_TO_ADDR
// hc_gallery =  ;
2859: LD_ADDR_OWVAR 33
2863: PUSH
2864: LD_STRING 
2866: ST_TO_ADDR
// hc_name =  ;
2867: LD_ADDR_OWVAR 26
2871: PUSH
2872: LD_STRING 
2874: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2875: LD_INT 0
2877: PPUSH
2878: LD_INT 3
2880: PPUSH
2881: LD_EXP 36
2885: PPUSH
2886: LD_EXP 37
2890: PPUSH
2891: CALL_OW 12
2895: PPUSH
2896: CALL_OW 380
// un = CreateHuman ;
2900: LD_ADDR_VAR 0 3
2904: PUSH
2905: CALL_OW 44
2909: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2910: LD_VAR 0 3
2914: PPUSH
2915: LD_INT 3
2917: PPUSH
2918: LD_INT 0
2920: PPUSH
2921: CALL_OW 49
// end ;
2925: GO 2840
2927: POP
2928: POP
// for i = 1 to 4 do
2929: LD_ADDR_VAR 0 2
2933: PUSH
2934: DOUBLE
2935: LD_INT 1
2937: DEC
2938: ST_TO_ADDR
2939: LD_INT 4
2941: PUSH
2942: FOR_TO
2943: IFFALSE 3029
// begin uc_side = 3 ;
2945: LD_ADDR_OWVAR 20
2949: PUSH
2950: LD_INT 3
2952: ST_TO_ADDR
// uc_nation = 3 ;
2953: LD_ADDR_OWVAR 21
2957: PUSH
2958: LD_INT 3
2960: ST_TO_ADDR
// hc_gallery =  ;
2961: LD_ADDR_OWVAR 33
2965: PUSH
2966: LD_STRING 
2968: ST_TO_ADDR
// hc_name =  ;
2969: LD_ADDR_OWVAR 26
2973: PUSH
2974: LD_STRING 
2976: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2977: LD_INT 0
2979: PPUSH
2980: LD_INT 4
2982: PPUSH
2983: LD_EXP 36
2987: PPUSH
2988: LD_EXP 37
2992: PPUSH
2993: CALL_OW 12
2997: PPUSH
2998: CALL_OW 380
// un = CreateHuman ;
3002: LD_ADDR_VAR 0 3
3006: PUSH
3007: CALL_OW 44
3011: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3012: LD_VAR 0 3
3016: PPUSH
3017: LD_INT 3
3019: PPUSH
3020: LD_INT 0
3022: PPUSH
3023: CALL_OW 49
// end ;
3027: GO 2942
3029: POP
3030: POP
// end ; end_of_file
3031: LD_VAR 0 1
3035: RET
// export function PrepareArabianCommander ; begin
3036: LD_INT 0
3038: PPUSH
// uc_side = 2 ;
3039: LD_ADDR_OWVAR 20
3043: PUSH
3044: LD_INT 2
3046: ST_TO_ADDR
// uc_nation = 2 ;
3047: LD_ADDR_OWVAR 21
3051: PUSH
3052: LD_INT 2
3054: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3055: LD_ADDR_EXP 26
3059: PUSH
3060: LD_STRING Dietrich
3062: PPUSH
3063: CALL_OW 25
3067: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3068: LD_EXP 26
3072: PPUSH
3073: LD_INT 4
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// end ;
3083: LD_VAR 0 1
3087: RET
// export function PrepareArabian ; var i , un , veh ; begin
3088: LD_INT 0
3090: PPUSH
3091: PPUSH
3092: PPUSH
3093: PPUSH
// uc_side := 2 ;
3094: LD_ADDR_OWVAR 20
3098: PUSH
3099: LD_INT 2
3101: ST_TO_ADDR
// uc_nation := 2 ;
3102: LD_ADDR_OWVAR 21
3106: PUSH
3107: LD_INT 2
3109: ST_TO_ADDR
// if not Ahmed then
3110: LD_EXP 27
3114: NOT
3115: IFFALSE 3183
// begin InitHc ;
3117: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3121: LD_INT 1
3123: PPUSH
3124: LD_INT 1
3126: PPUSH
3127: LD_EXP 36
3131: PPUSH
3132: LD_EXP 37
3136: PUSH
3137: LD_INT 1
3139: PLUS
3140: PPUSH
3141: CALL_OW 12
3145: PPUSH
3146: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3150: LD_ADDR_OWVAR 26
3154: PUSH
3155: LD_STRING Ahmed Abbasid
3157: ST_TO_ADDR
// Ahmed := CreateHuman ;
3158: LD_ADDR_EXP 27
3162: PUSH
3163: CALL_OW 44
3167: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3168: LD_EXP 27
3172: PPUSH
3173: LD_INT 4
3175: PPUSH
3176: LD_INT 0
3178: PPUSH
3179: CALL_OW 49
// end ; for i = 1 to 3 do
3183: LD_ADDR_VAR 0 2
3187: PUSH
3188: DOUBLE
3189: LD_INT 1
3191: DEC
3192: ST_TO_ADDR
3193: LD_INT 3
3195: PUSH
3196: FOR_TO
3197: IFFALSE 3283
// begin uc_side = 2 ;
3199: LD_ADDR_OWVAR 20
3203: PUSH
3204: LD_INT 2
3206: ST_TO_ADDR
// uc_nation = 2 ;
3207: LD_ADDR_OWVAR 21
3211: PUSH
3212: LD_INT 2
3214: ST_TO_ADDR
// hc_gallery =  ;
3215: LD_ADDR_OWVAR 33
3219: PUSH
3220: LD_STRING 
3222: ST_TO_ADDR
// hc_name =  ;
3223: LD_ADDR_OWVAR 26
3227: PUSH
3228: LD_STRING 
3230: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3231: LD_INT 0
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_EXP 36
3241: PPUSH
3242: LD_EXP 37
3246: PPUSH
3247: CALL_OW 12
3251: PPUSH
3252: CALL_OW 380
// un = CreateHuman ;
3256: LD_ADDR_VAR 0 3
3260: PUSH
3261: CALL_OW 44
3265: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3266: LD_VAR 0 3
3270: PPUSH
3271: LD_INT 4
3273: PPUSH
3274: LD_INT 0
3276: PPUSH
3277: CALL_OW 49
// end ;
3281: GO 3196
3283: POP
3284: POP
// for i = 1 to 6 do
3285: LD_ADDR_VAR 0 2
3289: PUSH
3290: DOUBLE
3291: LD_INT 1
3293: DEC
3294: ST_TO_ADDR
3295: LD_INT 6
3297: PUSH
3298: FOR_TO
3299: IFFALSE 3385
// begin uc_side = 2 ;
3301: LD_ADDR_OWVAR 20
3305: PUSH
3306: LD_INT 2
3308: ST_TO_ADDR
// uc_nation = 2 ;
3309: LD_ADDR_OWVAR 21
3313: PUSH
3314: LD_INT 2
3316: ST_TO_ADDR
// hc_gallery =  ;
3317: LD_ADDR_OWVAR 33
3321: PUSH
3322: LD_STRING 
3324: ST_TO_ADDR
// hc_name =  ;
3325: LD_ADDR_OWVAR 26
3329: PUSH
3330: LD_STRING 
3332: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3333: LD_INT 0
3335: PPUSH
3336: LD_INT 2
3338: PPUSH
3339: LD_EXP 36
3343: PPUSH
3344: LD_EXP 37
3348: PPUSH
3349: CALL_OW 12
3353: PPUSH
3354: CALL_OW 380
// un = CreateHuman ;
3358: LD_ADDR_VAR 0 3
3362: PUSH
3363: CALL_OW 44
3367: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3368: LD_VAR 0 3
3372: PPUSH
3373: LD_INT 4
3375: PPUSH
3376: LD_INT 0
3378: PPUSH
3379: CALL_OW 49
// end ;
3383: GO 3298
3385: POP
3386: POP
// for i = 1 to 6 do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: DOUBLE
3393: LD_INT 1
3395: DEC
3396: ST_TO_ADDR
3397: LD_INT 6
3399: PUSH
3400: FOR_TO
3401: IFFALSE 3487
// begin uc_side = 2 ;
3403: LD_ADDR_OWVAR 20
3407: PUSH
3408: LD_INT 2
3410: ST_TO_ADDR
// uc_nation = 2 ;
3411: LD_ADDR_OWVAR 21
3415: PUSH
3416: LD_INT 2
3418: ST_TO_ADDR
// hc_gallery =  ;
3419: LD_ADDR_OWVAR 33
3423: PUSH
3424: LD_STRING 
3426: ST_TO_ADDR
// hc_name =  ;
3427: LD_ADDR_OWVAR 26
3431: PUSH
3432: LD_STRING 
3434: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3435: LD_INT 0
3437: PPUSH
3438: LD_INT 1
3440: PPUSH
3441: LD_EXP 36
3445: PPUSH
3446: LD_EXP 37
3450: PPUSH
3451: CALL_OW 12
3455: PPUSH
3456: CALL_OW 380
// un = CreateHuman ;
3460: LD_ADDR_VAR 0 3
3464: PUSH
3465: CALL_OW 44
3469: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3470: LD_VAR 0 3
3474: PPUSH
3475: LD_INT 4
3477: PPUSH
3478: LD_INT 0
3480: PPUSH
3481: CALL_OW 49
// end ;
3485: GO 3400
3487: POP
3488: POP
// for i = 1 to 4 do
3489: LD_ADDR_VAR 0 2
3493: PUSH
3494: DOUBLE
3495: LD_INT 1
3497: DEC
3498: ST_TO_ADDR
3499: LD_INT 4
3501: PUSH
3502: FOR_TO
3503: IFFALSE 3589
// begin uc_side = 2 ;
3505: LD_ADDR_OWVAR 20
3509: PUSH
3510: LD_INT 2
3512: ST_TO_ADDR
// uc_nation = 2 ;
3513: LD_ADDR_OWVAR 21
3517: PUSH
3518: LD_INT 2
3520: ST_TO_ADDR
// hc_gallery =  ;
3521: LD_ADDR_OWVAR 33
3525: PUSH
3526: LD_STRING 
3528: ST_TO_ADDR
// hc_name =  ;
3529: LD_ADDR_OWVAR 26
3533: PUSH
3534: LD_STRING 
3536: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3537: LD_INT 0
3539: PPUSH
3540: LD_INT 4
3542: PPUSH
3543: LD_EXP 36
3547: PPUSH
3548: LD_EXP 37
3552: PPUSH
3553: CALL_OW 12
3557: PPUSH
3558: CALL_OW 380
// un = CreateHuman ;
3562: LD_ADDR_VAR 0 3
3566: PUSH
3567: CALL_OW 44
3571: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3572: LD_VAR 0 3
3576: PPUSH
3577: LD_INT 4
3579: PPUSH
3580: LD_INT 0
3582: PPUSH
3583: CALL_OW 49
// end ;
3587: GO 3502
3589: POP
3590: POP
// for i = 1 to 2 do
3591: LD_ADDR_VAR 0 2
3595: PUSH
3596: DOUBLE
3597: LD_INT 1
3599: DEC
3600: ST_TO_ADDR
3601: LD_INT 2
3603: PUSH
3604: FOR_TO
3605: IFFALSE 3735
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3607: LD_ADDR_VAR 0 4
3611: PUSH
3612: LD_INT 22
3614: PUSH
3615: LD_INT 2
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 21
3624: PUSH
3625: LD_INT 2
3627: PUSH
3628: EMPTY
3629: LIST
3630: LIST
3631: PUSH
3632: LD_INT 58
3634: PUSH
3635: EMPTY
3636: LIST
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: ST_TO_ADDR
// uc_side = 2 ;
3648: LD_ADDR_OWVAR 20
3652: PUSH
3653: LD_INT 2
3655: ST_TO_ADDR
// uc_nation = 2 ;
3656: LD_ADDR_OWVAR 21
3660: PUSH
3661: LD_INT 2
3663: ST_TO_ADDR
// hc_gallery =  ;
3664: LD_ADDR_OWVAR 33
3668: PUSH
3669: LD_STRING 
3671: ST_TO_ADDR
// hc_name =  ;
3672: LD_ADDR_OWVAR 26
3676: PUSH
3677: LD_STRING 
3679: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3680: LD_INT 0
3682: PPUSH
3683: LD_INT 3
3685: PPUSH
3686: LD_EXP 36
3690: PPUSH
3691: LD_EXP 37
3695: PPUSH
3696: CALL_OW 12
3700: PPUSH
3701: CALL_OW 380
// un = CreateHuman ;
3705: LD_ADDR_VAR 0 3
3709: PUSH
3710: CALL_OW 44
3714: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3715: LD_VAR 0 3
3719: PPUSH
3720: LD_VAR 0 4
3724: PUSH
3725: LD_INT 1
3727: ARRAY
3728: PPUSH
3729: CALL_OW 52
// end ;
3733: GO 3604
3735: POP
3736: POP
// end ; end_of_file
3737: LD_VAR 0 1
3741: RET
// every 1 do
3742: GO 3744
3744: DISABLE
// begin InGameOn ;
3745: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
3749: LD_INT 1
3751: PPUSH
3752: LD_INT 19
3754: PPUSH
3755: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
3759: LD_EXP 11
3763: PPUSH
3764: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
3768: LD_INT 22
3770: PUSH
3771: LD_INT 4
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 25
3780: PUSH
3781: LD_INT 2
3783: PUSH
3784: EMPTY
3785: LIST
3786: LIST
3787: PUSH
3788: EMPTY
3789: LIST
3790: LIST
3791: PPUSH
3792: CALL_OW 69
3796: IFFALSE 3844
// begin repeat wait ( 0 0$1 ) ;
3798: LD_INT 35
3800: PPUSH
3801: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
3805: LD_INT 22
3807: PUSH
3808: LD_INT 4
3810: PUSH
3811: EMPTY
3812: LIST
3813: LIST
3814: PUSH
3815: LD_INT 30
3817: PUSH
3818: LD_INT 0
3820: PUSH
3821: EMPTY
3822: LIST
3823: LIST
3824: PUSH
3825: EMPTY
3826: LIST
3827: LIST
3828: PPUSH
3829: CALL_OW 69
3833: IFFALSE 3798
// Wait ( 0 0$1 ) ;
3835: LD_INT 35
3837: PPUSH
3838: CALL_OW 67
// end else
3842: GO 3851
// Wait ( 0 0$3 ) ;
3844: LD_INT 105
3846: PPUSH
3847: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
3851: LD_EXP 1
3855: PPUSH
3856: CALL_OW 310
3860: PPUSH
3861: CALL_OW 85
// Wait ( 0 0$1 ) ;
3865: LD_INT 35
3867: PPUSH
3868: CALL_OW 67
// if IsOk ( Gary ) then
3872: LD_EXP 10
3876: PPUSH
3877: CALL_OW 302
3881: IFFALSE 3919
// begin Say ( Gary , D2-Gary-1 ) ;
3883: LD_EXP 10
3887: PPUSH
3888: LD_STRING D2-Gary-1
3890: PPUSH
3891: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3895: LD_EXP 1
3899: PPUSH
3900: LD_STRING D2-JMM-1
3902: PPUSH
3903: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3907: LD_EXP 10
3911: PPUSH
3912: LD_STRING D2-Gary-2
3914: PPUSH
3915: CALL_OW 88
// end ; InGameOff ;
3919: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
3923: LD_STRING M1
3925: PPUSH
3926: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3930: LD_INT 38
3932: PPUSH
3933: LD_INT 1
3935: PPUSH
3936: LD_INT 100
3938: PPUSH
3939: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3943: LD_INT 47
3945: PPUSH
3946: LD_INT 1
3948: PPUSH
3949: LD_INT 50
3951: PPUSH
3952: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3956: LD_INT 47
3958: PPUSH
3959: LD_INT 3
3961: PPUSH
3962: LD_INT 50
3964: PPUSH
3965: CALL_OW 291
// SaveForQuickRestart ;
3969: CALL_OW 22
// end ;
3973: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3974: LD_EXP 1
3978: PPUSH
3979: LD_EXP 11
3983: PPUSH
3984: CALL_OW 296
3988: PUSH
3989: LD_INT 15
3991: LESS
3992: IFFALSE 4458
3994: GO 3996
3996: DISABLE
// begin InGameOn ;
3997: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4001: LD_EXP 1
4005: PPUSH
4006: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4010: LD_EXP 1
4014: PPUSH
4015: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4019: LD_EXP 1
4023: PPUSH
4024: LD_EXP 11
4028: PPUSH
4029: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4033: LD_INT 35
4035: PPUSH
4036: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4040: LD_EXP 11
4044: PUSH
4045: LD_EXP 13
4049: PUSH
4050: LD_EXP 12
4054: PUSH
4055: LD_EXP 14
4059: PUSH
4060: LD_EXP 8
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: LIST
4071: PPUSH
4072: LD_EXP 1
4076: PPUSH
4077: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_EXP 11
4090: PPUSH
4091: CALL_OW 296
4095: PUSH
4096: LD_INT 5
4098: LESS
4099: IFFALSE 4033
// ComTurnUnit ( JMM , Simms ) ;
4101: LD_EXP 1
4105: PPUSH
4106: LD_EXP 11
4110: PPUSH
4111: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4115: LD_EXP 11
4119: PUSH
4120: LD_EXP 13
4124: PUSH
4125: LD_EXP 12
4129: PUSH
4130: LD_EXP 14
4134: PUSH
4135: EMPTY
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: PPUSH
4141: LD_EXP 1
4145: PPUSH
4146: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4150: LD_EXP 1
4154: PUSH
4155: LD_EXP 11
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PPUSH
4164: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4168: LD_EXP 11
4172: PPUSH
4173: LD_STRING D2a-Sim-1
4175: PPUSH
4176: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4180: LD_EXP 1
4184: PPUSH
4185: LD_STRING D2a-JMM-1
4187: PPUSH
4188: CALL_OW 88
// if IsOk ( Joan ) then
4192: LD_EXP 13
4196: PPUSH
4197: CALL_OW 302
4201: IFFALSE 4253
// begin ComTurnUnit ( JMM , Joan ) ;
4203: LD_EXP 1
4207: PPUSH
4208: LD_EXP 13
4212: PPUSH
4213: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4217: LD_EXP 13
4221: PPUSH
4222: LD_STRING D2b-Joan-1
4224: PPUSH
4225: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4229: LD_EXP 1
4233: PPUSH
4234: LD_STRING D2b-JMM-1
4236: PPUSH
4237: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4241: LD_EXP 13
4245: PPUSH
4246: LD_STRING D2b-Joan-2
4248: PPUSH
4249: CALL_OW 88
// end ; if IsOk ( Denis ) then
4253: LD_EXP 12
4257: PPUSH
4258: CALL_OW 302
4262: IFFALSE 4290
// begin ComTurnUnit ( JMM , Denis ) ;
4264: LD_EXP 1
4268: PPUSH
4269: LD_EXP 12
4273: PPUSH
4274: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4278: LD_EXP 12
4282: PPUSH
4283: LD_STRING D2c-Den-1
4285: PPUSH
4286: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4290: LD_EXP 8
4294: PPUSH
4295: CALL_OW 302
4299: IFFALSE 4368
// begin repeat wait ( 0 0$1 ) ;
4301: LD_INT 35
4303: PPUSH
4304: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4308: LD_EXP 8
4312: PPUSH
4313: LD_EXP 1
4317: PPUSH
4318: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4322: LD_EXP 1
4326: PPUSH
4327: LD_EXP 8
4331: PPUSH
4332: CALL_OW 296
4336: PUSH
4337: LD_INT 5
4339: LESS
4340: IFFALSE 4301
// ComTurnUnit ( JMM , Kikuchi ) ;
4342: LD_EXP 1
4346: PPUSH
4347: LD_EXP 8
4351: PPUSH
4352: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4356: LD_EXP 8
4360: PPUSH
4361: LD_STRING D3b-Yam-1
4363: PPUSH
4364: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4368: LD_EXP 14
4372: PPUSH
4373: CALL_OW 302
4377: IFFALSE 4417
// begin ComTurnUnit ( JMM , Khatam ) ;
4379: LD_EXP 1
4383: PPUSH
4384: LD_EXP 14
4388: PPUSH
4389: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4393: LD_EXP 1
4397: PPUSH
4398: LD_STRING D2c-JMM-1
4400: PPUSH
4401: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4405: LD_EXP 14
4409: PPUSH
4410: LD_STRING D2c-Khat-1
4412: PPUSH
4413: CALL_OW 88
// end ; InGameOff ;
4417: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4421: LD_INT 22
4423: PUSH
4424: LD_INT 4
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: LD_INT 1
4438: PPUSH
4439: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4443: LD_STRING M1a
4445: PPUSH
4446: CALL_OW 337
// joinEpsilon = 1 ;
4450: LD_ADDR_EXP 29
4454: PUSH
4455: LD_INT 1
4457: ST_TO_ADDR
// end ;
4458: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4459: LD_EXP 61
4463: PUSH
4464: LD_INT 1
4466: EQUAL
4467: IFFALSE 5599
4469: GO 4471
4471: DISABLE
4472: LD_INT 0
4474: PPUSH
4475: PPUSH
4476: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4477: LD_ADDR_VAR 0 1
4481: PUSH
4482: LD_INT 22
4484: PUSH
4485: LD_INT 1
4487: PUSH
4488: EMPTY
4489: LIST
4490: LIST
4491: PUSH
4492: LD_INT 25
4494: PUSH
4495: LD_INT 4
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: LD_INT 26
4504: PUSH
4505: LD_INT 1
4507: PUSH
4508: EMPTY
4509: LIST
4510: LIST
4511: PUSH
4512: EMPTY
4513: LIST
4514: LIST
4515: LIST
4516: PPUSH
4517: CALL_OW 69
4521: PUSH
4522: LD_EXP 1
4526: PUSH
4527: LD_EXP 2
4531: PUSH
4532: LD_EXP 3
4536: PUSH
4537: LD_EXP 4
4541: PUSH
4542: LD_EXP 5
4546: PUSH
4547: LD_EXP 6
4551: PUSH
4552: LD_EXP 7
4556: PUSH
4557: LD_EXP 8
4561: PUSH
4562: LD_EXP 9
4566: PUSH
4567: LD_EXP 10
4571: PUSH
4572: LD_EXP 11
4576: PUSH
4577: LD_EXP 12
4581: PUSH
4582: LD_EXP 13
4586: PUSH
4587: LD_EXP 14
4591: PUSH
4592: LD_EXP 15
4596: PUSH
4597: LD_EXP 16
4601: PUSH
4602: LD_EXP 17
4606: PUSH
4607: LD_EXP 18
4611: PUSH
4612: LD_EXP 19
4616: PUSH
4617: LD_EXP 24
4621: PUSH
4622: EMPTY
4623: LIST
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: LIST
4636: LIST
4637: LIST
4638: LIST
4639: LIST
4640: LIST
4641: LIST
4642: LIST
4643: DIFF
4644: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4645: LD_ADDR_VAR 0 2
4649: PUSH
4650: LD_INT 22
4652: PUSH
4653: LD_INT 1
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: LD_INT 26
4662: PUSH
4663: LD_INT 1
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 2
4672: PUSH
4673: LD_INT 25
4675: PUSH
4676: LD_INT 1
4678: PUSH
4679: EMPTY
4680: LIST
4681: LIST
4682: PUSH
4683: LD_INT 25
4685: PUSH
4686: LD_INT 2
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: PUSH
4693: LD_INT 25
4695: PUSH
4696: LD_INT 3
4698: PUSH
4699: EMPTY
4700: LIST
4701: LIST
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: PUSH
4709: EMPTY
4710: LIST
4711: LIST
4712: LIST
4713: PPUSH
4714: CALL_OW 69
4718: PUSH
4719: LD_EXP 1
4723: PUSH
4724: LD_EXP 2
4728: PUSH
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 4
4738: PUSH
4739: LD_EXP 5
4743: PUSH
4744: LD_EXP 6
4748: PUSH
4749: LD_EXP 7
4753: PUSH
4754: LD_EXP 8
4758: PUSH
4759: LD_EXP 9
4763: PUSH
4764: LD_EXP 10
4768: PUSH
4769: LD_EXP 11
4773: PUSH
4774: LD_EXP 12
4778: PUSH
4779: LD_EXP 13
4783: PUSH
4784: LD_EXP 14
4788: PUSH
4789: LD_EXP 15
4793: PUSH
4794: LD_EXP 16
4798: PUSH
4799: LD_EXP 17
4803: PUSH
4804: LD_EXP 18
4808: PUSH
4809: LD_EXP 19
4813: PUSH
4814: LD_EXP 24
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: DIFF
4841: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
4842: LD_EXP 10
4846: PUSH
4847: LD_VAR 0 2
4851: OR
4852: PUSH
4853: LD_EXP 17
4857: PUSH
4858: LD_VAR 0 1
4862: OR
4863: AND
4864: IFFALSE 5083
// begin DialogueOn ;
4866: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4870: LD_EXP 17
4874: PPUSH
4875: CALL_OW 302
4879: IFFALSE 4895
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4881: LD_EXP 17
4885: PPUSH
4886: LD_STRING D3-Sci1-1
4888: PPUSH
4889: CALL_OW 88
4893: GO 4907
// Say ( tmp1 , D3-Sci1-1 ) ;
4895: LD_VAR 0 1
4899: PPUSH
4900: LD_STRING D3-Sci1-1
4902: PPUSH
4903: CALL_OW 88
// if IsOk ( Gary ) then
4907: LD_EXP 10
4911: PPUSH
4912: CALL_OW 302
4916: IFFALSE 4932
// Say ( Gary , D3-Gary-1 ) else
4918: LD_EXP 10
4922: PPUSH
4923: LD_STRING D3-Gary-1
4925: PPUSH
4926: CALL_OW 88
4930: GO 4944
// Say ( tmp2 , D3-Gary-1 ) ;
4932: LD_VAR 0 2
4936: PPUSH
4937: LD_STRING D3-Gary-1
4939: PPUSH
4940: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4944: LD_EXP 17
4948: PPUSH
4949: CALL_OW 302
4953: IFFALSE 4969
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4955: LD_EXP 17
4959: PPUSH
4960: LD_STRING D3-Sci1-2
4962: PPUSH
4963: CALL_OW 88
4967: GO 4981
// Say ( tmp1 , D3-Sci1-2 ) ;
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_STRING D3-Sci1-2
4976: PPUSH
4977: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4981: LD_EXP 1
4985: PPUSH
4986: LD_STRING D3-JMM-2
4988: PPUSH
4989: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4993: LD_EXP 17
4997: PPUSH
4998: CALL_OW 302
5002: IFFALSE 5018
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5004: LD_EXP 17
5008: PPUSH
5009: LD_STRING D3-Sci1-3
5011: PPUSH
5012: CALL_OW 88
5016: GO 5030
// Say ( tmp1 , D3-Sci1-3 ) ;
5018: LD_VAR 0 1
5022: PPUSH
5023: LD_STRING D3-Sci1-3
5025: PPUSH
5026: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5030: LD_EXP 1
5034: PPUSH
5035: LD_STRING D3-JMM-3
5037: PPUSH
5038: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5042: LD_EXP 17
5046: PPUSH
5047: CALL_OW 302
5051: IFFALSE 5067
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5053: LD_EXP 17
5057: PPUSH
5058: LD_STRING D3-Sci1-4
5060: PPUSH
5061: CALL_OW 88
5065: GO 5079
// Say ( tmp1 , D3-Sci1-4 ) ;
5067: LD_VAR 0 1
5071: PPUSH
5072: LD_STRING D3-Sci1-4
5074: PPUSH
5075: CALL_OW 88
// DialogueOff ;
5079: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5083: LD_INT 12
5085: PPUSH
5086: LD_INT 1
5088: PPUSH
5089: LD_INT 1
5091: PPUSH
5092: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5096: LD_INT 32
5098: PPUSH
5099: LD_INT 1
5101: PPUSH
5102: LD_INT 1
5104: PPUSH
5105: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5109: LD_INT 12
5111: PPUSH
5112: LD_INT 1
5114: PPUSH
5115: LD_INT 1
5117: PPUSH
5118: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5122: LD_INT 33
5124: PPUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 1
5130: PPUSH
5131: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5135: LD_STRING M2
5137: PPUSH
5138: CALL_OW 337
// wait ( 3 3$0 ) ;
5142: LD_INT 6300
5144: PPUSH
5145: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5149: LD_INT 35
5151: PPUSH
5152: CALL_OW 67
// until not InBattle ( 1 ) ;
5156: LD_INT 1
5158: PPUSH
5159: CALL_OW 463
5163: NOT
5164: IFFALSE 5149
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5166: LD_EXP 11
5170: PPUSH
5171: CALL_OW 302
5175: PUSH
5176: LD_EXP 17
5180: PPUSH
5181: CALL_OW 302
5185: AND
5186: IFFALSE 5355
// begin DialogueOn ;
5188: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5192: LD_EXP 11
5196: PPUSH
5197: LD_STRING D3a-Sim-1
5199: PPUSH
5200: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5204: LD_EXP 17
5208: PPUSH
5209: LD_STRING D3a-Sci1-1
5211: PPUSH
5212: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5216: LD_EXP 11
5220: PPUSH
5221: LD_STRING D3a-Sim-2
5223: PPUSH
5224: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5228: LD_EXP 17
5232: PPUSH
5233: LD_STRING D3a-Sci1-2
5235: PPUSH
5236: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5240: LD_EXP 11
5244: PPUSH
5245: LD_STRING D3a-Sim-3
5247: PPUSH
5248: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5252: LD_EXP 17
5256: PPUSH
5257: LD_STRING D3a-Sci1-3
5259: PPUSH
5260: CALL_OW 88
// if IsOK ( Joan ) then
5264: LD_EXP 13
5268: PPUSH
5269: CALL_OW 302
5273: IFFALSE 5289
// Say ( Simms , D3a-Sim-4 ) else
5275: LD_EXP 11
5279: PPUSH
5280: LD_STRING D3a-Sim-4
5282: PPUSH
5283: CALL_OW 88
5287: GO 5301
// Say ( Simms , D3a-Sim-4a ) ;
5289: LD_EXP 11
5293: PPUSH
5294: LD_STRING D3a-Sim-4a
5296: PPUSH
5297: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5301: LD_EXP 17
5305: PPUSH
5306: LD_STRING D3a-Sci1-4
5308: PPUSH
5309: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5313: LD_EXP 11
5317: PPUSH
5318: LD_STRING D3a-Sim-5
5320: PPUSH
5321: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5325: LD_EXP 17
5329: PPUSH
5330: LD_STRING D3a-Sci1-5
5332: PPUSH
5333: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5337: LD_EXP 11
5341: PPUSH
5342: LD_STRING D3a-Sim-6
5344: PPUSH
5345: CALL_OW 88
// DialogueOff ;
5349: CALL_OW 7
// end else
5353: GO 5599
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5355: LD_ADDR_VAR 0 3
5359: PUSH
5360: LD_INT 22
5362: PUSH
5363: LD_INT 1
5365: PUSH
5366: EMPTY
5367: LIST
5368: LIST
5369: PUSH
5370: LD_INT 25
5372: PUSH
5373: LD_INT 4
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: EMPTY
5381: LIST
5382: LIST
5383: PPUSH
5384: CALL_OW 69
5388: PUSH
5389: LD_EXP 11
5393: PUSH
5394: LD_EXP 14
5398: PUSH
5399: EMPTY
5400: LIST
5401: LIST
5402: DIFF
5403: ST_TO_ADDR
// if tmp3 > 0 then
5404: LD_VAR 0 3
5408: PUSH
5409: LD_INT 0
5411: GREATER
5412: IFFALSE 5599
// begin DialogueOn ;
5414: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5418: LD_EXP 11
5422: PPUSH
5423: LD_STRING D3a-Sim-1
5425: PPUSH
5426: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5430: LD_VAR 0 3
5434: PUSH
5435: LD_INT 1
5437: ARRAY
5438: PPUSH
5439: LD_STRING D3a-Sci1-1
5441: PPUSH
5442: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5446: LD_EXP 11
5450: PPUSH
5451: LD_STRING D3a-Sim-2
5453: PPUSH
5454: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5458: LD_VAR 0 3
5462: PUSH
5463: LD_INT 1
5465: ARRAY
5466: PPUSH
5467: LD_STRING D3a-Sci1-2
5469: PPUSH
5470: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5474: LD_EXP 11
5478: PPUSH
5479: LD_STRING D3a-Sim-3
5481: PPUSH
5482: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5486: LD_VAR 0 3
5490: PUSH
5491: LD_INT 1
5493: ARRAY
5494: PPUSH
5495: LD_STRING D3a-Sci1-3
5497: PPUSH
5498: CALL_OW 88
// if IsOK ( Joan ) then
5502: LD_EXP 13
5506: PPUSH
5507: CALL_OW 302
5511: IFFALSE 5527
// Say ( Simms , D3a-Sim-4 ) else
5513: LD_EXP 11
5517: PPUSH
5518: LD_STRING D3a-Sim-4
5520: PPUSH
5521: CALL_OW 88
5525: GO 5539
// Say ( Simms , D3a-Sim-4a ) ;
5527: LD_EXP 11
5531: PPUSH
5532: LD_STRING D3a-Sim-4a
5534: PPUSH
5535: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
5539: LD_VAR 0 3
5543: PUSH
5544: LD_INT 1
5546: ARRAY
5547: PPUSH
5548: LD_STRING D3a-Sci1-4
5550: PPUSH
5551: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5555: LD_EXP 11
5559: PPUSH
5560: LD_STRING D3a-Sim-5
5562: PPUSH
5563: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
5567: LD_VAR 0 3
5571: PUSH
5572: LD_INT 1
5574: ARRAY
5575: PPUSH
5576: LD_STRING D3a-Sci1-5
5578: PPUSH
5579: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5583: LD_EXP 11
5587: PPUSH
5588: LD_STRING D3a-Sim-6
5590: PPUSH
5591: CALL_OW 88
// DialogueOff ;
5595: CALL_OW 7
// end ; end ; end ;
5599: PPOPN 3
5601: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
5602: LD_EXP 29
5606: PUSH
5607: LD_INT 1
5609: EQUAL
5610: IFFALSE 5930
5612: GO 5614
5614: DISABLE
5615: LD_INT 0
5617: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
5618: LD_EXP 18
5622: PPUSH
5623: LD_STRING D4-FSol1-1
5625: PPUSH
5626: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
5630: LD_STRING M3
5632: PPUSH
5633: CALL_OW 337
// PrepareRussians ;
5637: CALL 2571 0 0
// rnd = Rand ( 1 , 100 ) ;
5641: LD_ADDR_VAR 0 1
5645: PUSH
5646: LD_INT 1
5648: PPUSH
5649: LD_INT 100
5651: PPUSH
5652: CALL_OW 12
5656: ST_TO_ADDR
// if difficulty = 1 then
5657: LD_OWVAR 67
5661: PUSH
5662: LD_INT 1
5664: EQUAL
5665: IFFALSE 5748
// begin if rnd > 0 and rnd < 51 then
5667: LD_VAR 0 1
5671: PUSH
5672: LD_INT 0
5674: GREATER
5675: PUSH
5676: LD_VAR 0 1
5680: PUSH
5681: LD_INT 51
5683: LESS
5684: AND
5685: IFFALSE 5694
// BuildRussianBase ( 2 ) ;
5687: LD_INT 2
5689: PPUSH
5690: CALL 9316 0 1
// if rnd > 50 and rnd < 81 then
5694: LD_VAR 0 1
5698: PUSH
5699: LD_INT 50
5701: GREATER
5702: PUSH
5703: LD_VAR 0 1
5707: PUSH
5708: LD_INT 81
5710: LESS
5711: AND
5712: IFFALSE 5721
// BuildRussianBase ( 1 ) ;
5714: LD_INT 1
5716: PPUSH
5717: CALL 9316 0 1
// if rnd > 80 and rnd < 101 then
5721: LD_VAR 0 1
5725: PUSH
5726: LD_INT 80
5728: GREATER
5729: PUSH
5730: LD_VAR 0 1
5734: PUSH
5735: LD_INT 101
5737: LESS
5738: AND
5739: IFFALSE 5748
// BuildRussianBase ( 3 ) ;
5741: LD_INT 3
5743: PPUSH
5744: CALL 9316 0 1
// end ; if difficulty = 2 then
5748: LD_OWVAR 67
5752: PUSH
5753: LD_INT 2
5755: EQUAL
5756: IFFALSE 5839
// begin if rnd > 0 and rnd < 61 then
5758: LD_VAR 0 1
5762: PUSH
5763: LD_INT 0
5765: GREATER
5766: PUSH
5767: LD_VAR 0 1
5771: PUSH
5772: LD_INT 61
5774: LESS
5775: AND
5776: IFFALSE 5785
// BuildRussianBase ( 2 ) ;
5778: LD_INT 2
5780: PPUSH
5781: CALL 9316 0 1
// if rnd > 60 and rnd < 81 then
5785: LD_VAR 0 1
5789: PUSH
5790: LD_INT 60
5792: GREATER
5793: PUSH
5794: LD_VAR 0 1
5798: PUSH
5799: LD_INT 81
5801: LESS
5802: AND
5803: IFFALSE 5812
// BuildRussianBase ( 1 ) ;
5805: LD_INT 1
5807: PPUSH
5808: CALL 9316 0 1
// if rnd > 80 and rnd < 101 then
5812: LD_VAR 0 1
5816: PUSH
5817: LD_INT 80
5819: GREATER
5820: PUSH
5821: LD_VAR 0 1
5825: PUSH
5826: LD_INT 101
5828: LESS
5829: AND
5830: IFFALSE 5839
// BuildRussianBase ( 3 ) ;
5832: LD_INT 3
5834: PPUSH
5835: CALL 9316 0 1
// end ; if difficulty = 3 then
5839: LD_OWVAR 67
5843: PUSH
5844: LD_INT 3
5846: EQUAL
5847: IFFALSE 5930
// begin if rnd > 0 and rnd < 71 then
5849: LD_VAR 0 1
5853: PUSH
5854: LD_INT 0
5856: GREATER
5857: PUSH
5858: LD_VAR 0 1
5862: PUSH
5863: LD_INT 71
5865: LESS
5866: AND
5867: IFFALSE 5876
// BuildRussianBase ( 3 ) ;
5869: LD_INT 3
5871: PPUSH
5872: CALL 9316 0 1
// if rnd > 70 and rnd < 81 then
5876: LD_VAR 0 1
5880: PUSH
5881: LD_INT 70
5883: GREATER
5884: PUSH
5885: LD_VAR 0 1
5889: PUSH
5890: LD_INT 81
5892: LESS
5893: AND
5894: IFFALSE 5903
// BuildRussianBase ( 2 ) ;
5896: LD_INT 2
5898: PPUSH
5899: CALL 9316 0 1
// if rnd > 80 and rnd < 101 then
5903: LD_VAR 0 1
5907: PUSH
5908: LD_INT 80
5910: GREATER
5911: PUSH
5912: LD_VAR 0 1
5916: PUSH
5917: LD_INT 101
5919: LESS
5920: AND
5921: IFFALSE 5930
// BuildRussianBase ( 1 ) ;
5923: LD_INT 1
5925: PPUSH
5926: CALL 9316 0 1
// end ; end ;
5930: PPOPN 1
5932: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5933: LD_INT 54
5935: PPUSH
5936: LD_INT 1
5938: PPUSH
5939: CALL_OW 321
5943: PUSH
5944: LD_INT 2
5946: EQUAL
5947: PUSH
5948: LD_INT 21
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: CALL_OW 321
5958: PUSH
5959: LD_INT 2
5961: EQUAL
5962: OR
5963: PUSH
5964: LD_INT 22
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: CALL_OW 321
5974: PUSH
5975: LD_INT 2
5977: EQUAL
5978: OR
5979: IFFALSE 6280
5981: GO 5983
5983: DISABLE
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
// begin if IsOk ( DeltaDoctor ) then
5988: LD_EXP 17
5992: PPUSH
5993: CALL_OW 302
5997: IFFALSE 6011
// tmp := DeltaDoctor else
5999: LD_ADDR_VAR 0 2
6003: PUSH
6004: LD_EXP 17
6008: ST_TO_ADDR
6009: GO 6021
// tmp := Denis ;
6011: LD_ADDR_VAR 0 2
6015: PUSH
6016: LD_EXP 12
6020: ST_TO_ADDR
// if tmp then
6021: LD_VAR 0 2
6025: IFFALSE 6119
// begin DialogueOn ;
6027: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6031: LD_EXP 1
6035: PPUSH
6036: LD_STRING D6-JMM-1
6038: PPUSH
6039: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
6043: LD_EXP 12
6047: PPUSH
6048: LD_STRING D6-Sci1-1
6050: PPUSH
6051: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6055: LD_EXP 1
6059: PPUSH
6060: LD_STRING D6-JMM-2
6062: PPUSH
6063: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
6067: LD_EXP 12
6071: PPUSH
6072: LD_STRING D6-Sci1-2
6074: PPUSH
6075: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6079: LD_EXP 1
6083: PPUSH
6084: LD_STRING D6-JMM-3
6086: PPUSH
6087: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
6091: LD_EXP 12
6095: PPUSH
6096: LD_STRING D6-Sci1-3
6098: PPUSH
6099: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6103: LD_EXP 1
6107: PPUSH
6108: LD_STRING D6-JMM-4
6110: PPUSH
6111: CALL_OW 88
// DialogueOff ;
6115: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6119: LD_INT 1050
6121: PPUSH
6122: CALL_OW 67
// if arabianTrait = 0 then
6126: LD_EXP 49
6130: PUSH
6131: LD_INT 0
6133: EQUAL
6134: IFFALSE 6192
// begin DialogueOn ;
6136: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6140: LD_EXP 27
6144: PPUSH
6145: LD_STRING D5-Ar1-1
6147: PPUSH
6148: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6152: LD_EXP 26
6156: PPUSH
6157: LD_STRING D5-Diet-1
6159: PPUSH
6160: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6164: LD_EXP 27
6168: PPUSH
6169: LD_STRING D5-Ar1-2
6171: PPUSH
6172: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6176: LD_EXP 26
6180: PPUSH
6181: LD_STRING D5-Diet-2
6183: PPUSH
6184: CALL_OW 88
// DialogueOff ;
6188: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6192: LD_INT 2100
6194: PUSH
6195: LD_INT 3150
6197: PUSH
6198: LD_INT 4200
6200: PUSH
6201: LD_INT 5250
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 1
6212: PPUSH
6213: LD_INT 4
6215: PPUSH
6216: CALL_OW 12
6220: ARRAY
6221: PPUSH
6222: CALL_OW 67
// if arabianTrait = 0 then
6226: LD_EXP 49
6230: PUSH
6231: LD_INT 0
6233: EQUAL
6234: IFFALSE 6280
// begin arabianTrait = 1 ;
6236: LD_ADDR_EXP 49
6240: PUSH
6241: LD_INT 1
6243: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6244: LD_INT 2
6246: PPUSH
6247: LD_INT 3
6249: PPUSH
6250: LD_INT 1
6252: PPUSH
6253: LD_INT 1
6255: PPUSH
6256: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6260: LD_INT 2
6262: PPUSH
6263: LD_INT 6
6265: PPUSH
6266: LD_INT 1
6268: PPUSH
6269: LD_INT 1
6271: PPUSH
6272: CALL_OW 80
// PrepareArabianTrait ;
6276: CALL 6283 0 0
// end ; end ;
6280: PPOPN 2
6282: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6283: LD_INT 0
6285: PPUSH
6286: PPUSH
6287: PPUSH
6288: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6289: LD_ADDR_VAR 0 2
6293: PUSH
6294: LD_INT 22
6296: PUSH
6297: LD_INT 2
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PUSH
6304: LD_INT 25
6306: PUSH
6307: LD_INT 4
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PPUSH
6318: CALL_OW 69
6322: PUSH
6323: FOR_IN
6324: IFFALSE 6337
// ComExitBuilding ( i ) ;
6326: LD_VAR 0 2
6330: PPUSH
6331: CALL_OW 122
6335: GO 6323
6337: POP
6338: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6339: LD_ADDR_VAR 0 2
6343: PUSH
6344: LD_INT 22
6346: PUSH
6347: LD_INT 2
6349: PUSH
6350: EMPTY
6351: LIST
6352: LIST
6353: PUSH
6354: LD_INT 25
6356: PUSH
6357: LD_INT 3
6359: PUSH
6360: EMPTY
6361: LIST
6362: LIST
6363: PUSH
6364: EMPTY
6365: LIST
6366: LIST
6367: PPUSH
6368: CALL_OW 69
6372: PUSH
6373: FOR_IN
6374: IFFALSE 6387
// ComExitVehicle ( i ) ;
6376: LD_VAR 0 2
6380: PPUSH
6381: CALL_OW 121
6385: GO 6373
6387: POP
6388: POP
// SetClass ( Dietrich , 8 ) ;
6389: LD_EXP 26
6393: PPUSH
6394: LD_INT 8
6396: PPUSH
6397: CALL_OW 336
// wait ( 0 0$3 ) ;
6401: LD_INT 105
6403: PPUSH
6404: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6408: LD_INT 76
6410: PPUSH
6411: LD_INT 19
6413: PPUSH
6414: CALL_OW 84
// DialogueOn ;
6418: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6422: LD_INT 22
6424: PUSH
6425: LD_INT 1
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: PUSH
6432: LD_INT 26
6434: PUSH
6435: LD_INT 1
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 25
6447: PUSH
6448: LD_INT 1
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 25
6457: PUSH
6458: LD_INT 2
6460: PUSH
6461: EMPTY
6462: LIST
6463: LIST
6464: PUSH
6465: LD_INT 25
6467: PUSH
6468: LD_INT 3
6470: PUSH
6471: EMPTY
6472: LIST
6473: LIST
6474: PUSH
6475: LD_INT 25
6477: PUSH
6478: LD_INT 4
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 25
6487: PUSH
6488: LD_INT 5
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: PPUSH
6508: CALL_OW 69
6512: PPUSH
6513: LD_STRING D8-Sol1-1
6515: PPUSH
6516: LD_STRING D8-Sol1-1
6518: PPUSH
6519: CALL 8647 0 3
// if IsOK ( DeltaDoctor ) then
6523: LD_EXP 17
6527: PPUSH
6528: CALL_OW 302
6532: IFFALSE 6548
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6534: LD_EXP 17
6538: PPUSH
6539: LD_STRING D8-Sci1-1
6541: PPUSH
6542: CALL_OW 88
6546: GO 6649
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6548: LD_INT 22
6550: PUSH
6551: LD_INT 1
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 26
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 2
6570: PUSH
6571: LD_INT 25
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 25
6583: PUSH
6584: LD_INT 2
6586: PUSH
6587: EMPTY
6588: LIST
6589: LIST
6590: PUSH
6591: LD_INT 25
6593: PUSH
6594: LD_INT 3
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 25
6603: PUSH
6604: LD_INT 4
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 25
6613: PUSH
6614: LD_INT 5
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: PPUSH
6634: CALL_OW 69
6638: PPUSH
6639: LD_STRING D8-Sol1-1
6641: PPUSH
6642: LD_STRING D8-Sol1-1
6644: PPUSH
6645: CALL 8647 0 3
// Say ( JMM , D8-JMM-1 ) ;
6649: LD_EXP 1
6653: PPUSH
6654: LD_STRING D8-JMM-1
6656: PPUSH
6657: CALL_OW 88
// DialogueOff ;
6661: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
6665: LD_INT 2
6667: PPUSH
6668: LD_INT 2
6670: PPUSH
6671: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
6675: LD_INT 1
6677: PPUSH
6678: LD_INT 2
6680: PPUSH
6681: LD_INT 2
6683: PPUSH
6684: LD_INT 1
6686: PPUSH
6687: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6691: LD_INT 3
6693: PPUSH
6694: LD_INT 2
6696: PPUSH
6697: LD_INT 1
6699: PPUSH
6700: LD_INT 1
6702: PPUSH
6703: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
6707: LD_ADDR_VAR 0 2
6711: PUSH
6712: LD_INT 22
6714: PUSH
6715: LD_INT 2
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 21
6724: PUSH
6725: LD_INT 1
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PPUSH
6736: CALL_OW 69
6740: PUSH
6741: FOR_IN
6742: IFFALSE 6882
// begin ComExitBuilding ( i ) ;
6744: LD_VAR 0 2
6748: PPUSH
6749: CALL_OW 122
// wait ( 0 0$1 ) ;
6753: LD_INT 35
6755: PPUSH
6756: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
6760: LD_VAR 0 2
6764: PPUSH
6765: LD_INT 77
6767: PPUSH
6768: LD_INT 10
6770: PPUSH
6771: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
6775: LD_VAR 0 2
6779: PPUSH
6780: LD_INT 82
6782: PPUSH
6783: LD_INT 5
6785: PPUSH
6786: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
6790: LD_VAR 0 2
6794: PPUSH
6795: LD_INT 95
6797: PPUSH
6798: LD_INT 12
6800: PPUSH
6801: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
6805: LD_VAR 0 2
6809: PPUSH
6810: LD_INT 102
6812: PPUSH
6813: LD_INT 11
6815: PPUSH
6816: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
6820: LD_VAR 0 2
6824: PPUSH
6825: LD_INT 116
6827: PPUSH
6828: LD_INT 15
6830: PPUSH
6831: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
6835: LD_VAR 0 2
6839: PPUSH
6840: LD_INT 140
6842: PPUSH
6843: LD_INT 25
6845: PPUSH
6846: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
6850: LD_VAR 0 2
6854: PPUSH
6855: LD_INT 160
6857: PPUSH
6858: LD_INT 56
6860: PPUSH
6861: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6865: LD_VAR 0 2
6869: PPUSH
6870: LD_INT 189
6872: PPUSH
6873: LD_INT 79
6875: PPUSH
6876: CALL_OW 174
// end ;
6880: GO 6741
6882: POP
6883: POP
// arabianAttackersAI = 1 ;
6884: LD_ADDR_EXP 46
6888: PUSH
6889: LD_INT 1
6891: ST_TO_ADDR
// wait ( 0 0$10 ) ;
6892: LD_INT 350
6894: PPUSH
6895: CALL_OW 67
// if IsOk ( Gary ) then
6899: LD_EXP 10
6903: PPUSH
6904: CALL_OW 302
6908: IFFALSE 6922
// Say ( Gary , D8a-Gary-1 ) ;
6910: LD_EXP 10
6914: PPUSH
6915: LD_STRING D8a-Gary-1
6917: PPUSH
6918: CALL_OW 88
// wait ( 0 0$5 ) ;
6922: LD_INT 175
6924: PPUSH
6925: CALL_OW 67
// if IsOK ( Khatam ) then
6929: LD_EXP 14
6933: PPUSH
6934: CALL_OW 302
6938: IFFALSE 7474
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
6940: LD_ADDR_VAR 0 3
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_INT 1
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 2
6957: PUSH
6958: LD_INT 25
6960: PUSH
6961: LD_INT 1
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PUSH
6968: LD_INT 25
6970: PUSH
6971: LD_INT 2
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 25
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 25
6990: PUSH
6991: LD_INT 4
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 25
7000: PUSH
7001: LD_INT 5
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 25
7010: PUSH
7011: LD_INT 8
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: PUSH
7036: LD_EXP 1
7040: PUSH
7041: LD_EXP 2
7045: PUSH
7046: LD_EXP 3
7050: PUSH
7051: LD_EXP 4
7055: PUSH
7056: LD_EXP 5
7060: PUSH
7061: LD_EXP 6
7065: PUSH
7066: LD_EXP 7
7070: PUSH
7071: LD_EXP 8
7075: PUSH
7076: LD_EXP 9
7080: PUSH
7081: LD_EXP 10
7085: PUSH
7086: LD_EXP 11
7090: PUSH
7091: LD_EXP 12
7095: PUSH
7096: LD_EXP 13
7100: PUSH
7101: LD_EXP 14
7105: PUSH
7106: LD_EXP 15
7110: PUSH
7111: LD_EXP 16
7115: PUSH
7116: LD_EXP 17
7120: PUSH
7121: LD_EXP 19
7125: PUSH
7126: LD_EXP 24
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: LIST
7135: LIST
7136: LIST
7137: LIST
7138: LIST
7139: LIST
7140: LIST
7141: LIST
7142: LIST
7143: LIST
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: DIFF
7152: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7153: LD_EXP 14
7157: PPUSH
7158: LD_INT 8
7160: PPUSH
7161: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7165: LD_EXP 14
7169: PPUSH
7170: CALL_OW 122
// wait ( 0 0$1 ) ;
7174: LD_INT 35
7176: PPUSH
7177: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7181: LD_EXP 14
7185: PPUSH
7186: CALL_OW 121
// wait ( 0 0$1 ) ;
7190: LD_INT 35
7192: PPUSH
7193: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7197: LD_EXP 14
7201: PPUSH
7202: LD_INT 7
7204: PPUSH
7205: CALL_OW 113
// if not tmp then
7209: LD_VAR 0 3
7213: NOT
7214: IFFALSE 7218
// exit ;
7216: GO 7474
// DialogueOn ;
7218: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
7222: LD_VAR 0 3
7226: PUSH
7227: LD_INT 1
7229: ARRAY
7230: PPUSH
7231: CALL_OW 258
7235: PUSH
7236: LD_INT 1
7238: EQUAL
7239: IFFALSE 7259
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
7241: LD_VAR 0 3
7245: PUSH
7246: LD_INT 1
7248: ARRAY
7249: PPUSH
7250: LD_STRING D8b-Sol1-1
7252: PPUSH
7253: CALL_OW 88
7257: GO 7275
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
7259: LD_VAR 0 3
7263: PUSH
7264: LD_INT 1
7266: ARRAY
7267: PPUSH
7268: LD_STRING D8b-FSol1-1
7270: PPUSH
7271: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
7275: LD_EXP 14
7279: PPUSH
7280: LD_STRING D8b-Khat-1
7282: PPUSH
7283: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
7287: LD_VAR 0 3
7291: PUSH
7292: LD_INT 1
7294: ARRAY
7295: PPUSH
7296: CALL_OW 258
7300: PUSH
7301: LD_INT 1
7303: EQUAL
7304: IFFALSE 7324
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
7306: LD_VAR 0 3
7310: PUSH
7311: LD_INT 1
7313: ARRAY
7314: PPUSH
7315: LD_STRING D8b-Sol1-2
7317: PPUSH
7318: CALL_OW 88
7322: GO 7340
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
7324: LD_VAR 0 3
7328: PUSH
7329: LD_INT 1
7331: ARRAY
7332: PPUSH
7333: LD_STRING D8b-FSol1-2
7335: PPUSH
7336: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
7340: LD_EXP 14
7344: PPUSH
7345: LD_STRING D8b-Khat-2
7347: PPUSH
7348: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
7352: LD_VAR 0 3
7356: PUSH
7357: LD_INT 1
7359: ARRAY
7360: PPUSH
7361: CALL_OW 258
7365: PUSH
7366: LD_INT 1
7368: EQUAL
7369: IFFALSE 7389
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: LD_STRING D8b-Sol1-3
7382: PPUSH
7383: CALL_OW 88
7387: GO 7405
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
7389: LD_VAR 0 3
7393: PUSH
7394: LD_INT 1
7396: ARRAY
7397: PPUSH
7398: LD_STRING D8b-FSol1-3
7400: PPUSH
7401: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
7405: LD_EXP 14
7409: PPUSH
7410: LD_STRING D8b-Khat-3
7412: PPUSH
7413: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 1
7424: ARRAY
7425: PPUSH
7426: CALL_OW 258
7430: PUSH
7431: LD_INT 1
7433: EQUAL
7434: IFFALSE 7454
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
7436: LD_VAR 0 3
7440: PUSH
7441: LD_INT 1
7443: ARRAY
7444: PPUSH
7445: LD_STRING D8b-Sol1-4
7447: PPUSH
7448: CALL_OW 88
7452: GO 7470
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
7454: LD_VAR 0 3
7458: PUSH
7459: LD_INT 1
7461: ARRAY
7462: PPUSH
7463: LD_STRING D8b-FSol1-4
7465: PPUSH
7466: CALL_OW 88
// DialogueOff ;
7470: CALL_OW 7
// end ; end ;
7474: LD_VAR 0 1
7478: RET
// every 0 0$1 do var i ;
7479: GO 7481
7481: DISABLE
7482: LD_INT 0
7484: PPUSH
// begin enable ;
7485: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
7486: LD_ADDR_VAR 0 1
7490: PUSH
7491: LD_INT 7
7493: PPUSH
7494: LD_INT 22
7496: PUSH
7497: LD_INT 2
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PPUSH
7504: CALL_OW 70
7508: PUSH
7509: FOR_IN
7510: IFFALSE 7576
// begin if GetClass ( i ) = 4 then
7512: LD_VAR 0 1
7516: PPUSH
7517: CALL_OW 257
7521: PUSH
7522: LD_INT 4
7524: EQUAL
7525: IFFALSE 7537
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
7527: LD_INT 1
7529: PPUSH
7530: LD_STRING 10_ScientistsEscape_1
7532: PPUSH
7533: CALL_OW 39
// if i = Dietrich then
7537: LD_VAR 0 1
7541: PUSH
7542: LD_EXP 26
7546: EQUAL
7547: IFFALSE 7557
// GensherStatus = 1 ;
7549: LD_ADDR_EXP 51
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// arabianEscape = 1 ;
7557: LD_ADDR_EXP 47
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// RemoveUnit ( i ) ;
7565: LD_VAR 0 1
7569: PPUSH
7570: CALL_OW 64
// end ;
7574: GO 7509
7576: POP
7577: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
7578: LD_EXP 14
7582: PPUSH
7583: LD_INT 7
7585: PPUSH
7586: CALL_OW 308
7590: IFFALSE 7609
// begin KhatamStatus = 1 ;
7592: LD_ADDR_EXP 52
7596: PUSH
7597: LD_INT 1
7599: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
7600: LD_EXP 14
7604: PPUSH
7605: CALL_OW 64
// end ; end ;
7609: PPOPN 1
7611: END
// every 0 0$1 trigger IsDead ( Khatam ) do
7612: LD_EXP 14
7616: PPUSH
7617: CALL_OW 301
7621: IFFALSE 7634
7623: GO 7625
7625: DISABLE
// KhatamStatus = 0 ;
7626: LD_ADDR_EXP 52
7630: PUSH
7631: LD_INT 0
7633: ST_TO_ADDR
7634: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
7635: LD_INT 22
7637: PUSH
7638: LD_INT 2
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 21
7647: PUSH
7648: LD_INT 1
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: EMPTY
7656: LIST
7657: LIST
7658: PPUSH
7659: CALL_OW 69
7663: PUSH
7664: LD_INT 0
7666: EQUAL
7667: PUSH
7668: LD_INT 22
7670: PUSH
7671: LD_INT 4
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_INT 21
7680: PUSH
7681: LD_INT 1
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PUSH
7697: LD_INT 0
7699: EQUAL
7700: AND
7701: IFFALSE 7714
7703: GO 7705
7705: DISABLE
// arabianDefeated = 1 ;
7706: LD_ADDR_EXP 48
7710: PUSH
7711: LD_INT 1
7713: ST_TO_ADDR
7714: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
7715: LD_INT 54
7717: PPUSH
7718: LD_INT 1
7720: PPUSH
7721: CALL_OW 321
7725: PUSH
7726: LD_INT 2
7728: EQUAL
7729: PUSH
7730: LD_INT 55
7732: PPUSH
7733: LD_INT 1
7735: PPUSH
7736: CALL_OW 321
7740: PUSH
7741: LD_INT 2
7743: EQUAL
7744: AND
7745: PUSH
7746: LD_INT 21
7748: PPUSH
7749: LD_INT 1
7751: PPUSH
7752: CALL_OW 321
7756: PUSH
7757: LD_INT 2
7759: EQUAL
7760: AND
7761: PUSH
7762: LD_INT 22
7764: PPUSH
7765: LD_INT 1
7767: PPUSH
7768: CALL_OW 321
7772: PUSH
7773: LD_INT 2
7775: EQUAL
7776: AND
7777: PUSH
7778: LD_INT 12
7780: PPUSH
7781: LD_INT 1
7783: PPUSH
7784: CALL_OW 321
7788: PUSH
7789: LD_INT 2
7791: EQUAL
7792: AND
7793: PUSH
7794: LD_INT 32
7796: PPUSH
7797: LD_INT 1
7799: PPUSH
7800: CALL_OW 321
7804: PUSH
7805: LD_INT 2
7807: EQUAL
7808: AND
7809: PUSH
7810: LD_EXP 59
7814: PUSH
7815: LD_INT 0
7817: EQUAL
7818: AND
7819: PUSH
7820: LD_EXP 49
7824: PUSH
7825: LD_INT 0
7827: EQUAL
7828: AND
7829: PUSH
7830: LD_OWVAR 1
7834: PUSH
7835: LD_INT 31500
7837: GREATEREQUAL
7838: AND
7839: IFFALSE 7856
7841: GO 7843
7843: DISABLE
// begin arabianTrait = 1 ;
7844: LD_ADDR_EXP 49
7848: PUSH
7849: LD_INT 1
7851: ST_TO_ADDR
// PrepareArabianTrait ;
7852: CALL 6283 0 0
// end ;
7856: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
7857: LD_EXP 29
7861: PUSH
7862: LD_STRING 02_mikhailStatus_1
7864: PPUSH
7865: LD_INT 0
7867: PPUSH
7868: CALL_OW 30
7872: PUSH
7873: LD_INT 1
7875: EQUAL
7876: AND
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 5
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PPUSH
7888: CALL_OW 69
7892: PUSH
7893: LD_INT 0
7895: EQUAL
7896: AND
7897: PUSH
7898: LD_INT 22
7900: PUSH
7901: LD_INT 2
7903: PUSH
7904: EMPTY
7905: LIST
7906: LIST
7907: PPUSH
7908: CALL_OW 69
7912: PUSH
7913: LD_INT 0
7915: EQUAL
7916: PUSH
7917: LD_EXP 49
7921: PUSH
7922: LD_INT 0
7924: EQUAL
7925: OR
7926: AND
7927: IFFALSE 7936
7929: GO 7931
7931: DISABLE
// PrepareCornell ;
7932: CALL 2413 0 0
7936: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
7937: LD_INT 22
7939: PUSH
7940: LD_INT 1
7942: PUSH
7943: EMPTY
7944: LIST
7945: LIST
7946: PPUSH
7947: CALL_OW 69
7951: PPUSH
7952: LD_EXP 19
7956: PPUSH
7957: CALL_OW 74
7961: PPUSH
7962: LD_EXP 19
7966: PPUSH
7967: CALL_OW 296
7971: PUSH
7972: LD_INT 9
7974: LESS
7975: IFFALSE 8196
7977: GO 7979
7979: DISABLE
// begin InGameOn ;
7980: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
7984: LD_EXP 19
7988: PPUSH
7989: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
7993: LD_EXP 19
7997: PPUSH
7998: LD_STRING D7-Corn-1
8000: PPUSH
8001: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8005: LD_INT 22
8007: PUSH
8008: LD_INT 1
8010: PUSH
8011: EMPTY
8012: LIST
8013: LIST
8014: PUSH
8015: LD_INT 2
8017: PUSH
8018: LD_INT 25
8020: PUSH
8021: LD_INT 1
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PUSH
8028: LD_INT 25
8030: PUSH
8031: LD_INT 2
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: PUSH
8038: LD_INT 25
8040: PUSH
8041: LD_INT 3
8043: PUSH
8044: EMPTY
8045: LIST
8046: LIST
8047: PUSH
8048: LD_INT 25
8050: PUSH
8051: LD_INT 4
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: PUSH
8058: LD_INT 25
8060: PUSH
8061: LD_INT 5
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 69
8084: PPUSH
8085: LD_STRING D7-Sol1-1
8087: PPUSH
8088: LD_STRING D7-FSol1-1
8090: PPUSH
8091: CALL 8647 0 3
// CenterNowOnUnits ( Cornell ) ;
8095: LD_EXP 19
8099: PPUSH
8100: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8104: LD_EXP 19
8108: PPUSH
8109: LD_STRING D7-Corn-2
8111: PPUSH
8112: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8116: LD_EXP 1
8120: PPUSH
8121: LD_STRING D7-JMM-2
8123: PPUSH
8124: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8128: LD_EXP 19
8132: PPUSH
8133: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8137: LD_EXP 19
8141: PPUSH
8142: LD_STRING D7-Corn-3
8144: PPUSH
8145: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8149: LD_EXP 19
8153: PPUSH
8154: LD_INT 250
8156: PPUSH
8157: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
8161: LD_EXP 19
8165: PPUSH
8166: LD_INT 1
8168: PPUSH
8169: CALL_OW 235
// wait ( 0 0$1 ) ;
8173: LD_INT 35
8175: PPUSH
8176: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
8180: LD_EXP 1
8184: PPUSH
8185: LD_STRING D7-JMM-3
8187: PPUSH
8188: CALL_OW 88
// InGameOff ;
8192: CALL_OW 9
// end ;
8196: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
8197: LD_EXP 19
8201: PPUSH
8202: CALL_OW 255
8206: PUSH
8207: LD_INT 1
8209: EQUAL
8210: PUSH
8211: LD_EXP 19
8215: PPUSH
8216: CALL_OW 256
8220: PUSH
8221: LD_INT 251
8223: GREATER
8224: AND
8225: IFFALSE 8418
8227: GO 8229
8229: DISABLE
// begin DialogueOn ;
8230: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
8234: LD_EXP 1
8238: PPUSH
8239: LD_STRING D7a-JMM-1
8241: PPUSH
8242: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
8246: LD_EXP 19
8250: PPUSH
8251: LD_STRING D7a-Corn-1
8253: PPUSH
8254: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
8258: LD_EXP 1
8262: PPUSH
8263: LD_STRING D7a-JMM-2
8265: PPUSH
8266: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
8270: LD_EXP 19
8274: PPUSH
8275: LD_STRING D7a-Corn-2
8277: PPUSH
8278: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
8282: LD_EXP 1
8286: PPUSH
8287: LD_STRING D7a-JMM-3
8289: PPUSH
8290: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
8294: LD_EXP 19
8298: PPUSH
8299: LD_STRING D7a-Corn-3
8301: PPUSH
8302: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
8306: LD_EXP 1
8310: PPUSH
8311: LD_STRING D7a-JMM-4
8313: PPUSH
8314: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
8318: LD_EXP 19
8322: PPUSH
8323: LD_STRING D7a-Corn-4
8325: PPUSH
8326: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
8330: LD_EXP 1
8334: PPUSH
8335: LD_STRING D7a-JMM-5
8337: PPUSH
8338: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
8342: LD_EXP 19
8346: PPUSH
8347: LD_STRING D7a-Corn-5
8349: PPUSH
8350: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
8354: LD_EXP 1
8358: PPUSH
8359: LD_STRING D7a-JMM-6
8361: PPUSH
8362: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
8366: LD_EXP 19
8370: PPUSH
8371: LD_STRING D7a-Corn-6
8373: PPUSH
8374: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
8378: LD_EXP 1
8382: PPUSH
8383: LD_STRING D7a-JMM-7
8385: PPUSH
8386: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
8390: LD_EXP 19
8394: PPUSH
8395: LD_STRING D7a-Corn-7
8397: PPUSH
8398: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
8402: LD_EXP 1
8406: PPUSH
8407: LD_STRING D7a-JMM-8
8409: PPUSH
8410: CALL_OW 88
// DialogueOff ;
8414: CALL_OW 7
// end ;
8418: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
8419: LD_EXP 58
8423: PUSH
8424: LD_EXP 1
8428: PPUSH
8429: CALL_OW 302
8433: PUSH
8434: LD_EXP 5
8438: PPUSH
8439: CALL_OW 302
8443: OR
8444: AND
8445: IFFALSE 8535
8447: GO 8449
8449: DISABLE
// begin Wait ( 0 0$2 ) ;
8450: LD_INT 70
8452: PPUSH
8453: CALL_OW 67
// DialogueOn ;
8457: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
8461: LD_EXP 58
8465: PUSH
8466: LD_INT 1
8468: ARRAY
8469: PPUSH
8470: LD_EXP 58
8474: PUSH
8475: LD_INT 2
8477: ARRAY
8478: PPUSH
8479: CALL_OW 86
// if IsOk ( Cyrus ) then
8483: LD_EXP 5
8487: PPUSH
8488: CALL_OW 302
8492: IFFALSE 8508
// Say ( Cyrus , D10-Cyrus-1 ) else
8494: LD_EXP 5
8498: PPUSH
8499: LD_STRING D10-Cyrus-1
8501: PPUSH
8502: CALL_OW 88
8506: GO 8531
// if IsOk ( JMM ) then
8508: LD_EXP 1
8512: PPUSH
8513: CALL_OW 302
8517: IFFALSE 8531
// Say ( JMM , D10-JMM-1 ) ;
8519: LD_EXP 1
8523: PPUSH
8524: LD_STRING D10-JMM-1
8526: PPUSH
8527: CALL_OW 88
// DialogueOff ;
8531: CALL_OW 7
// end ;
8535: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
8536: LD_INT 12
8538: PPUSH
8539: LD_INT 1
8541: PPUSH
8542: CALL_OW 321
8546: PUSH
8547: LD_INT 2
8549: EQUAL
8550: IFFALSE 8562
8552: GO 8554
8554: DISABLE
// ChangeMissionObjectives ( M2b ) ;
8555: LD_STRING M2b
8557: PPUSH
8558: CALL_OW 337
8562: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
8563: LD_INT 32
8565: PPUSH
8566: LD_INT 1
8568: PPUSH
8569: CALL_OW 321
8573: PUSH
8574: LD_INT 2
8576: EQUAL
8577: IFFALSE 8589
8579: GO 8581
8581: DISABLE
// ChangeMissionObjectives ( M2c ) ; end_of_file
8582: LD_STRING M2c
8584: PPUSH
8585: CALL_OW 337
8589: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8590: LD_INT 0
8592: PPUSH
8593: PPUSH
// if exist_mode then
8594: LD_VAR 0 2
8598: IFFALSE 8617
// unit := CreateCharacter ( ident ) else
8600: LD_ADDR_VAR 0 4
8604: PUSH
8605: LD_VAR 0 1
8609: PPUSH
8610: CALL_OW 34
8614: ST_TO_ADDR
8615: GO 8632
// unit := NewCharacter ( ident ) ;
8617: LD_ADDR_VAR 0 4
8621: PUSH
8622: LD_VAR 0 1
8626: PPUSH
8627: CALL_OW 25
8631: ST_TO_ADDR
// result := unit ;
8632: LD_ADDR_VAR 0 3
8636: PUSH
8637: LD_VAR 0 4
8641: ST_TO_ADDR
// end ;
8642: LD_VAR 0 3
8646: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
8647: LD_INT 0
8649: PPUSH
8650: PPUSH
8651: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
8652: LD_ADDR_VAR 0 1
8656: PUSH
8657: LD_VAR 0 1
8661: PUSH
8662: LD_EXP 1
8666: PUSH
8667: LD_EXP 2
8671: PUSH
8672: LD_EXP 3
8676: PUSH
8677: LD_EXP 4
8681: PUSH
8682: LD_EXP 5
8686: PUSH
8687: LD_EXP 6
8691: PUSH
8692: LD_EXP 7
8696: PUSH
8697: LD_EXP 8
8701: PUSH
8702: LD_EXP 9
8706: PUSH
8707: LD_EXP 10
8711: PUSH
8712: LD_EXP 11
8716: PUSH
8717: LD_EXP 12
8721: PUSH
8722: LD_EXP 13
8726: PUSH
8727: LD_EXP 14
8731: PUSH
8732: LD_EXP 15
8736: PUSH
8737: LD_EXP 16
8741: PUSH
8742: LD_EXP 17
8746: PUSH
8747: LD_EXP 18
8751: PUSH
8752: LD_EXP 19
8756: PUSH
8757: LD_EXP 24
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: DIFF
8784: ST_TO_ADDR
// if not characters then
8785: LD_VAR 0 1
8789: NOT
8790: IFFALSE 8794
// exit ;
8792: GO 8940
// rnd = rand ( 1 , characters ) ;
8794: LD_ADDR_VAR 0 6
8798: PUSH
8799: LD_INT 1
8801: PPUSH
8802: LD_VAR 0 1
8806: PPUSH
8807: CALL_OW 12
8811: ST_TO_ADDR
// for i = 1 to characters do
8812: LD_ADDR_VAR 0 5
8816: PUSH
8817: DOUBLE
8818: LD_INT 1
8820: DEC
8821: ST_TO_ADDR
8822: LD_VAR 0 1
8826: PUSH
8827: FOR_TO
8828: IFFALSE 8938
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
8830: LD_VAR 0 5
8834: PUSH
8835: LD_VAR 0 6
8839: EQUAL
8840: PUSH
8841: LD_VAR 0 1
8845: PUSH
8846: LD_VAR 0 5
8850: ARRAY
8851: PPUSH
8852: CALL_OW 258
8856: PUSH
8857: LD_INT 1
8859: EQUAL
8860: AND
8861: IFFALSE 8883
// Say ( characters [ i ] , dialogMID ) ;
8863: LD_VAR 0 1
8867: PUSH
8868: LD_VAR 0 5
8872: ARRAY
8873: PPUSH
8874: LD_VAR 0 2
8878: PPUSH
8879: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
8883: LD_VAR 0 5
8887: PUSH
8888: LD_VAR 0 6
8892: EQUAL
8893: PUSH
8894: LD_VAR 0 1
8898: PUSH
8899: LD_VAR 0 5
8903: ARRAY
8904: PPUSH
8905: CALL_OW 258
8909: PUSH
8910: LD_INT 2
8912: EQUAL
8913: AND
8914: IFFALSE 8936
// Say ( characters [ i ] , dialogFID ) ;
8916: LD_VAR 0 1
8920: PUSH
8921: LD_VAR 0 5
8925: ARRAY
8926: PPUSH
8927: LD_VAR 0 3
8931: PPUSH
8932: CALL_OW 88
// end ;
8936: GO 8827
8938: POP
8939: POP
// end ;
8940: LD_VAR 0 4
8944: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
8945: LD_INT 0
8947: PPUSH
8948: PPUSH
// for i in charactersList do
8949: LD_ADDR_VAR 0 4
8953: PUSH
8954: LD_VAR 0 1
8958: PUSH
8959: FOR_IN
8960: IFFALSE 8989
// begin if IsOk ( i ) then
8962: LD_VAR 0 4
8966: PPUSH
8967: CALL_OW 302
8971: IFFALSE 8987
// SaveCharacters ( i , ident ) ;
8973: LD_VAR 0 4
8977: PPUSH
8978: LD_VAR 0 2
8982: PPUSH
8983: CALL_OW 38
// end ;
8987: GO 8959
8989: POP
8990: POP
// end ;
8991: LD_VAR 0 3
8995: RET
// export function PrepareDifficulty ; begin
8996: LD_INT 0
8998: PPUSH
// if difficulty = 1 then
8999: LD_OWVAR 67
9003: PUSH
9004: LD_INT 1
9006: EQUAL
9007: IFFALSE 9051
// begin RuSolMinLevel = 4 ;
9009: LD_ADDR_EXP 36
9013: PUSH
9014: LD_INT 4
9016: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9017: LD_ADDR_EXP 37
9021: PUSH
9022: LD_INT 7
9024: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9025: LD_INT 51
9027: PPUSH
9028: LD_INT 6
9030: PPUSH
9031: LD_INT 2
9033: PPUSH
9034: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9038: LD_INT 51
9040: PPUSH
9041: LD_INT 5
9043: PPUSH
9044: LD_INT 2
9046: PPUSH
9047: CALL_OW 322
// end ; if difficulty = 2 then
9051: LD_OWVAR 67
9055: PUSH
9056: LD_INT 2
9058: EQUAL
9059: IFFALSE 9155
// begin RuSolMinLevel = 5 ;
9061: LD_ADDR_EXP 36
9065: PUSH
9066: LD_INT 5
9068: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9069: LD_ADDR_EXP 37
9073: PUSH
9074: LD_INT 7
9076: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9077: LD_INT 51
9079: PPUSH
9080: LD_INT 6
9082: PPUSH
9083: LD_INT 2
9085: PPUSH
9086: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
9090: LD_INT 57
9092: PPUSH
9093: LD_INT 6
9095: PPUSH
9096: LD_INT 2
9098: PPUSH
9099: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
9103: LD_INT 63
9105: PPUSH
9106: LD_INT 6
9108: PPUSH
9109: LD_INT 2
9111: PPUSH
9112: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9116: LD_INT 51
9118: PPUSH
9119: LD_INT 5
9121: PPUSH
9122: LD_INT 2
9124: PPUSH
9125: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
9129: LD_INT 5
9131: PPUSH
9132: LD_INT 2
9134: PPUSH
9135: LD_INT 2
9137: PPUSH
9138: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
9142: LD_INT 5
9144: PPUSH
9145: LD_INT 5
9147: PPUSH
9148: LD_INT 2
9150: PPUSH
9151: CALL_OW 322
// end ; if difficulty = 3 then
9155: LD_OWVAR 67
9159: PUSH
9160: LD_INT 3
9162: EQUAL
9163: IFFALSE 9311
// begin RuSolMinLevel = 6 ;
9165: LD_ADDR_EXP 36
9169: PUSH
9170: LD_INT 6
9172: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
9173: LD_ADDR_EXP 37
9177: PUSH
9178: LD_INT 8
9180: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9181: LD_INT 51
9183: PPUSH
9184: LD_INT 6
9186: PPUSH
9187: LD_INT 2
9189: PPUSH
9190: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
9194: LD_INT 57
9196: PPUSH
9197: LD_INT 6
9199: PPUSH
9200: LD_INT 2
9202: PPUSH
9203: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
9207: LD_INT 52
9209: PPUSH
9210: LD_INT 6
9212: PPUSH
9213: LD_INT 2
9215: PPUSH
9216: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
9220: LD_INT 58
9222: PPUSH
9223: LD_INT 6
9225: PPUSH
9226: LD_INT 2
9228: PPUSH
9229: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
9233: LD_INT 63
9235: PPUSH
9236: LD_INT 6
9238: PPUSH
9239: LD_INT 2
9241: PPUSH
9242: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
9246: LD_INT 64
9248: PPUSH
9249: LD_INT 6
9251: PPUSH
9252: LD_INT 2
9254: PPUSH
9255: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9259: LD_INT 51
9261: PPUSH
9262: LD_INT 5
9264: PPUSH
9265: LD_INT 2
9267: PPUSH
9268: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
9272: LD_INT 52
9274: PPUSH
9275: LD_INT 5
9277: PPUSH
9278: LD_INT 2
9280: PPUSH
9281: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
9285: LD_INT 66
9287: PPUSH
9288: LD_INT 2
9290: PPUSH
9291: LD_INT 2
9293: PPUSH
9294: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
9298: LD_INT 66
9300: PPUSH
9301: LD_INT 5
9303: PPUSH
9304: LD_INT 2
9306: PPUSH
9307: CALL_OW 322
// end ; end ;
9311: LD_VAR 0 1
9315: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
9316: LD_INT 0
9318: PPUSH
9319: PPUSH
9320: PPUSH
9321: PPUSH
9322: PPUSH
// case position of 1 :
9323: LD_VAR 0 1
9327: PUSH
9328: LD_INT 1
9330: DOUBLE
9331: EQUAL
9332: IFTRUE 9336
9334: GO 9347
9336: POP
// area := westConv ; 2 :
9337: LD_ADDR_VAR 0 6
9341: PUSH
9342: LD_INT 20
9344: ST_TO_ADDR
9345: GO 9386
9347: LD_INT 2
9349: DOUBLE
9350: EQUAL
9351: IFTRUE 9355
9353: GO 9366
9355: POP
// area := midConv ; 3 :
9356: LD_ADDR_VAR 0 6
9360: PUSH
9361: LD_INT 21
9363: ST_TO_ADDR
9364: GO 9386
9366: LD_INT 3
9368: DOUBLE
9369: EQUAL
9370: IFTRUE 9374
9372: GO 9385
9374: POP
// area := eastConv ; end ;
9375: LD_ADDR_VAR 0 6
9379: PUSH
9380: LD_INT 22
9382: ST_TO_ADDR
9383: GO 9386
9385: POP
// area := AreaToList ( area , 0 ) ;
9386: LD_ADDR_VAR 0 6
9390: PUSH
9391: LD_VAR 0 6
9395: PPUSH
9396: LD_INT 0
9398: PPUSH
9399: CALL_OW 517
9403: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
9404: LD_ADDR_VAR 0 3
9408: PUSH
9409: DOUBLE
9410: LD_INT 1
9412: DEC
9413: ST_TO_ADDR
9414: LD_VAR 0 6
9418: PUSH
9419: LD_INT 1
9421: ARRAY
9422: PUSH
9423: FOR_TO
9424: IFFALSE 9505
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
9426: LD_VAR 0 6
9430: PUSH
9431: LD_INT 1
9433: ARRAY
9434: PUSH
9435: LD_VAR 0 3
9439: ARRAY
9440: PPUSH
9441: LD_VAR 0 6
9445: PUSH
9446: LD_INT 2
9448: ARRAY
9449: PUSH
9450: LD_VAR 0 3
9454: ARRAY
9455: PPUSH
9456: LD_INT 1
9458: PPUSH
9459: LD_INT 1
9461: PPUSH
9462: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
9466: LD_VAR 0 6
9470: PUSH
9471: LD_INT 1
9473: ARRAY
9474: PUSH
9475: LD_VAR 0 3
9479: ARRAY
9480: PPUSH
9481: LD_VAR 0 6
9485: PUSH
9486: LD_INT 2
9488: ARRAY
9489: PUSH
9490: LD_VAR 0 3
9494: ARRAY
9495: PPUSH
9496: LD_INT 1
9498: PPUSH
9499: CALL_OW 331
// end ;
9503: GO 9423
9505: POP
9506: POP
// ruPossition = position ;
9507: LD_ADDR_EXP 41
9511: PUSH
9512: LD_VAR 0 1
9516: ST_TO_ADDR
// if position = 1 then
9517: LD_VAR 0 1
9521: PUSH
9522: LD_INT 1
9524: EQUAL
9525: IFFALSE 10273
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9527: LD_ADDR_VAR 0 4
9531: PUSH
9532: LD_INT 22
9534: PUSH
9535: LD_INT 3
9537: PUSH
9538: EMPTY
9539: LIST
9540: LIST
9541: PUSH
9542: LD_INT 25
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: EMPTY
9549: LIST
9550: LIST
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PPUSH
9556: CALL_OW 69
9560: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
9561: LD_ADDR_VAR 0 5
9565: PUSH
9566: LD_INT 0
9568: PUSH
9569: LD_INT 49
9571: PUSH
9572: LD_INT 74
9574: PUSH
9575: LD_INT 3
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: PUSH
9584: LD_INT 4
9586: PUSH
9587: LD_INT 73
9589: PUSH
9590: LD_INT 88
9592: PUSH
9593: LD_INT 5
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: PUSH
9602: LD_INT 4
9604: PUSH
9605: LD_INT 56
9607: PUSH
9608: LD_INT 62
9610: PUSH
9611: LD_INT 3
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 29
9622: PUSH
9623: LD_INT 43
9625: PUSH
9626: LD_INT 68
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: EMPTY
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: PUSH
9638: LD_INT 30
9640: PUSH
9641: LD_INT 43
9643: PUSH
9644: LD_INT 79
9646: PUSH
9647: LD_INT 5
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 28
9658: PUSH
9659: LD_INT 60
9661: PUSH
9662: LD_INT 75
9664: PUSH
9665: LD_INT 1
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: PUSH
9674: LD_INT 2
9676: PUSH
9677: LD_INT 50
9679: PUSH
9680: LD_INT 87
9682: PUSH
9683: LD_INT 1
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: LD_INT 28
9694: PUSH
9695: LD_INT 45
9697: PUSH
9698: LD_INT 67
9700: PUSH
9701: LD_INT 2
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: LIST
9708: LIST
9709: PUSH
9710: LD_INT 17
9712: PUSH
9713: LD_INT 47
9715: PUSH
9716: LD_INT 84
9718: PUSH
9719: LD_INT 2
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_INT 18
9730: PUSH
9731: LD_INT 46
9733: PUSH
9734: LD_INT 87
9736: PUSH
9737: LD_INT 1
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 28
9748: PUSH
9749: LD_INT 41
9751: PUSH
9752: LD_INT 64
9754: PUSH
9755: LD_INT 5
9757: PUSH
9758: EMPTY
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 32
9766: PUSH
9767: LD_INT 75
9769: PUSH
9770: LD_INT 76
9772: PUSH
9773: LD_INT 5
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: PUSH
9782: LD_INT 32
9784: PUSH
9785: LD_INT 77
9787: PUSH
9788: LD_INT 75
9790: PUSH
9791: LD_INT 5
9793: PUSH
9794: EMPTY
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: LD_INT 32
9802: PUSH
9803: LD_INT 69
9805: PUSH
9806: LD_INT 68
9808: PUSH
9809: LD_INT 3
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: LD_INT 32
9820: PUSH
9821: LD_INT 59
9823: PUSH
9824: LD_INT 96
9826: PUSH
9827: LD_INT 5
9829: PUSH
9830: EMPTY
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_INT 32
9838: PUSH
9839: LD_INT 56
9841: PUSH
9842: LD_INT 96
9844: PUSH
9845: LD_INT 0
9847: PUSH
9848: EMPTY
9849: LIST
9850: LIST
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 32
9856: PUSH
9857: LD_INT 51
9859: PUSH
9860: LD_INT 61
9862: PUSH
9863: LD_INT 3
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 32
9874: PUSH
9875: LD_INT 42
9877: PUSH
9878: LD_INT 60
9880: PUSH
9881: LD_INT 3
9883: PUSH
9884: EMPTY
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 32
9892: PUSH
9893: LD_INT 36
9895: PUSH
9896: LD_INT 58
9898: PUSH
9899: LD_INT 3
9901: PUSH
9902: EMPTY
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: PUSH
9908: LD_INT 32
9910: PUSH
9911: LD_INT 39
9913: PUSH
9914: LD_INT 59
9916: PUSH
9917: LD_INT 3
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 32
9928: PUSH
9929: LD_INT 61
9931: PUSH
9932: LD_INT 64
9934: PUSH
9935: LD_INT 3
9937: PUSH
9938: EMPTY
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: PUSH
9944: LD_INT 33
9946: PUSH
9947: LD_INT 63
9949: PUSH
9950: LD_INT 90
9952: PUSH
9953: LD_INT 5
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: PUSH
9962: LD_INT 33
9964: PUSH
9965: LD_INT 64
9967: PUSH
9968: LD_INT 88
9970: PUSH
9971: LD_INT 5
9973: PUSH
9974: EMPTY
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: PUSH
9980: LD_INT 33
9982: PUSH
9983: LD_INT 72
9985: PUSH
9986: LD_INT 82
9988: PUSH
9989: LD_INT 5
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 6
10000: PUSH
10001: LD_INT 42
10003: PUSH
10004: LD_INT 74
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: LD_INT 6
10018: PUSH
10019: LD_INT 56
10021: PUSH
10022: LD_INT 77
10024: PUSH
10025: LD_INT 2
10027: PUSH
10028: EMPTY
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: PUSH
10034: LD_INT 21
10036: PUSH
10037: LD_INT 54
10039: PUSH
10040: LD_INT 91
10042: PUSH
10043: LD_INT 5
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: PUSH
10052: LD_INT 16
10054: PUSH
10055: LD_INT 50
10057: PUSH
10058: LD_INT 83
10060: PUSH
10061: LD_INT 3
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: LD_INT 24
10072: PUSH
10073: LD_INT 50
10075: PUSH
10076: LD_INT 90
10078: PUSH
10079: LD_INT 0
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10119: LD_ADDR_VAR 0 3
10123: PUSH
10124: LD_INT 22
10126: PUSH
10127: LD_INT 3
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 25
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: EMPTY
10144: LIST
10145: LIST
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: EMPTY
10152: LIST
10153: LIST
10154: PPUSH
10155: CALL_OW 69
10159: PUSH
10160: FOR_IN
10161: IFFALSE 10180
// AddComAgressiveMove ( i , 53 , 82 ) ;
10163: LD_VAR 0 3
10167: PPUSH
10168: LD_INT 53
10170: PPUSH
10171: LD_INT 82
10173: PPUSH
10174: CALL_OW 174
10178: GO 10160
10180: POP
10181: POP
// for i := 1 to buildingsTab do
10182: LD_ADDR_VAR 0 3
10186: PUSH
10187: DOUBLE
10188: LD_INT 1
10190: DEC
10191: ST_TO_ADDR
10192: LD_VAR 0 5
10196: PUSH
10197: FOR_TO
10198: IFFALSE 10271
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10200: LD_VAR 0 4
10204: PPUSH
10205: LD_VAR 0 5
10209: PUSH
10210: LD_VAR 0 3
10214: ARRAY
10215: PUSH
10216: LD_INT 1
10218: ARRAY
10219: PPUSH
10220: LD_VAR 0 5
10224: PUSH
10225: LD_VAR 0 3
10229: ARRAY
10230: PUSH
10231: LD_INT 2
10233: ARRAY
10234: PPUSH
10235: LD_VAR 0 5
10239: PUSH
10240: LD_VAR 0 3
10244: ARRAY
10245: PUSH
10246: LD_INT 3
10248: ARRAY
10249: PPUSH
10250: LD_VAR 0 5
10254: PUSH
10255: LD_VAR 0 3
10259: ARRAY
10260: PUSH
10261: LD_INT 4
10263: ARRAY
10264: PPUSH
10265: CALL_OW 205
10269: GO 10197
10271: POP
10272: POP
// end ; if position = 2 then
10273: LD_VAR 0 1
10277: PUSH
10278: LD_INT 2
10280: EQUAL
10281: IFFALSE 10896
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10283: LD_ADDR_VAR 0 4
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 3
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 25
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
10317: LD_ADDR_VAR 0 5
10321: PUSH
10322: LD_INT 0
10324: PUSH
10325: LD_INT 104
10327: PUSH
10328: LD_INT 110
10330: PUSH
10331: LD_INT 5
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: PUSH
10340: LD_INT 4
10342: PUSH
10343: LD_INT 98
10345: PUSH
10346: LD_INT 90
10348: PUSH
10349: LD_INT 3
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: PUSH
10358: LD_INT 29
10360: PUSH
10361: LD_INT 103
10363: PUSH
10364: LD_INT 114
10366: PUSH
10367: LD_INT 2
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 30
10378: PUSH
10379: LD_INT 99
10381: PUSH
10382: LD_INT 114
10384: PUSH
10385: LD_INT 3
10387: PUSH
10388: EMPTY
10389: LIST
10390: LIST
10391: LIST
10392: LIST
10393: PUSH
10394: LD_INT 28
10396: PUSH
10397: LD_INT 100
10399: PUSH
10400: LD_INT 112
10402: PUSH
10403: LD_INT 1
10405: PUSH
10406: EMPTY
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 2
10414: PUSH
10415: LD_INT 92
10417: PUSH
10418: LD_INT 101
10420: PUSH
10421: LD_INT 0
10423: PUSH
10424: EMPTY
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: PUSH
10430: LD_INT 28
10432: PUSH
10433: LD_INT 97
10435: PUSH
10436: LD_INT 116
10438: PUSH
10439: LD_INT 5
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: PUSH
10448: LD_INT 17
10450: PUSH
10451: LD_INT 96
10453: PUSH
10454: LD_INT 101
10456: PUSH
10457: LD_INT 4
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: PUSH
10466: LD_INT 18
10468: PUSH
10469: LD_INT 88
10471: PUSH
10472: LD_INT 97
10474: PUSH
10475: LD_INT 2
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 28
10486: PUSH
10487: LD_INT 106
10489: PUSH
10490: LD_INT 92
10492: PUSH
10493: LD_INT 2
10495: PUSH
10496: EMPTY
10497: LIST
10498: LIST
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 32
10504: PUSH
10505: LD_INT 88
10507: PUSH
10508: LD_INT 89
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: LD_INT 32
10522: PUSH
10523: LD_INT 86
10525: PUSH
10526: LD_INT 90
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: LD_INT 32
10540: PUSH
10541: LD_INT 85
10543: PUSH
10544: LD_INT 99
10546: PUSH
10547: LD_INT 2
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 32
10558: PUSH
10559: LD_INT 85
10561: PUSH
10562: LD_INT 107
10564: PUSH
10565: LD_INT 1
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 33
10576: PUSH
10577: LD_INT 105
10579: PUSH
10580: LD_INT 99
10582: PUSH
10583: LD_INT 1
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 33
10594: PUSH
10595: LD_INT 102
10597: PUSH
10598: LD_INT 92
10600: PUSH
10601: LD_INT 3
10603: PUSH
10604: EMPTY
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: PUSH
10610: LD_INT 33
10612: PUSH
10613: LD_INT 105
10615: PUSH
10616: LD_INT 92
10618: PUSH
10619: LD_INT 2
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 6
10630: PUSH
10631: LD_INT 92
10633: PUSH
10634: LD_INT 110
10636: PUSH
10637: LD_INT 0
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 6
10648: PUSH
10649: LD_INT 103
10651: PUSH
10652: LD_INT 103
10654: PUSH
10655: LD_INT 5
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 89
10669: PUSH
10670: LD_INT 101
10672: PUSH
10673: LD_INT 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: PUSH
10682: LD_INT 16
10684: PUSH
10685: LD_INT 95
10687: PUSH
10688: LD_INT 104
10690: PUSH
10691: LD_INT 4
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PUSH
10700: LD_INT 24
10702: PUSH
10703: LD_INT 92
10705: PUSH
10706: LD_INT 105
10708: PUSH
10709: LD_INT 0
10711: PUSH
10712: EMPTY
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10742: LD_ADDR_VAR 0 3
10746: PUSH
10747: LD_INT 22
10749: PUSH
10750: LD_INT 3
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 3
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 2
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: EMPTY
10771: LIST
10772: LIST
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PPUSH
10778: CALL_OW 69
10782: PUSH
10783: FOR_IN
10784: IFFALSE 10803
// AddComAgressiveMove ( i , 96 , 99 ) ;
10786: LD_VAR 0 3
10790: PPUSH
10791: LD_INT 96
10793: PPUSH
10794: LD_INT 99
10796: PPUSH
10797: CALL_OW 174
10801: GO 10783
10803: POP
10804: POP
// for i := 1 to buildingsTab do
10805: LD_ADDR_VAR 0 3
10809: PUSH
10810: DOUBLE
10811: LD_INT 1
10813: DEC
10814: ST_TO_ADDR
10815: LD_VAR 0 5
10819: PUSH
10820: FOR_TO
10821: IFFALSE 10894
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10823: LD_VAR 0 4
10827: PPUSH
10828: LD_VAR 0 5
10832: PUSH
10833: LD_VAR 0 3
10837: ARRAY
10838: PUSH
10839: LD_INT 1
10841: ARRAY
10842: PPUSH
10843: LD_VAR 0 5
10847: PUSH
10848: LD_VAR 0 3
10852: ARRAY
10853: PUSH
10854: LD_INT 2
10856: ARRAY
10857: PPUSH
10858: LD_VAR 0 5
10862: PUSH
10863: LD_VAR 0 3
10867: ARRAY
10868: PUSH
10869: LD_INT 3
10871: ARRAY
10872: PPUSH
10873: LD_VAR 0 5
10877: PUSH
10878: LD_VAR 0 3
10882: ARRAY
10883: PUSH
10884: LD_INT 4
10886: ARRAY
10887: PPUSH
10888: CALL_OW 205
10892: GO 10820
10894: POP
10895: POP
// end ; if position = 3 then
10896: LD_VAR 0 1
10900: PUSH
10901: LD_INT 3
10903: EQUAL
10904: IFFALSE 11690
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10906: LD_ADDR_VAR 0 4
10910: PUSH
10911: LD_INT 22
10913: PUSH
10914: LD_INT 3
10916: PUSH
10917: EMPTY
10918: LIST
10919: LIST
10920: PUSH
10921: LD_INT 25
10923: PUSH
10924: LD_INT 2
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PPUSH
10935: CALL_OW 69
10939: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
10940: LD_ADDR_VAR 0 5
10944: PUSH
10945: LD_INT 0
10947: PUSH
10948: LD_INT 151
10950: PUSH
10951: LD_INT 71
10953: PUSH
10954: LD_INT 4
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 4
10965: PUSH
10966: LD_INT 145
10968: PUSH
10969: LD_INT 53
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: LD_INT 4
10983: PUSH
10984: LD_INT 172
10986: PUSH
10987: LD_INT 102
10989: PUSH
10990: LD_INT 5
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 29
11001: PUSH
11002: LD_INT 152
11004: PUSH
11005: LD_INT 85
11007: PUSH
11008: LD_INT 3
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 30
11019: PUSH
11020: LD_INT 156
11022: PUSH
11023: LD_INT 92
11025: PUSH
11026: LD_INT 3
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: PUSH
11035: LD_INT 28
11037: PUSH
11038: LD_INT 151
11040: PUSH
11041: LD_INT 66
11043: PUSH
11044: LD_INT 4
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 2
11055: PUSH
11056: LD_INT 163
11058: PUSH
11059: LD_INT 95
11061: PUSH
11062: LD_INT 5
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 28
11073: PUSH
11074: LD_INT 149
11076: PUSH
11077: LD_INT 63
11079: PUSH
11080: LD_INT 4
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: LD_INT 17
11091: PUSH
11092: LD_INT 167
11094: PUSH
11095: LD_INT 99
11097: PUSH
11098: LD_INT 5
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: PUSH
11107: LD_INT 18
11109: PUSH
11110: LD_INT 163
11112: PUSH
11113: LD_INT 98
11115: PUSH
11116: LD_INT 0
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: PUSH
11125: LD_INT 28
11127: PUSH
11128: LD_INT 154
11130: PUSH
11131: LD_INT 70
11133: PUSH
11134: LD_INT 4
11136: PUSH
11137: EMPTY
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: PUSH
11143: LD_INT 32
11145: PUSH
11146: LD_INT 155
11148: PUSH
11149: LD_INT 62
11151: PUSH
11152: LD_INT 4
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 32
11163: PUSH
11164: LD_INT 161
11166: PUSH
11167: LD_INT 69
11169: PUSH
11170: LD_INT 4
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: PUSH
11179: LD_INT 32
11181: PUSH
11182: LD_INT 168
11184: PUSH
11185: LD_INT 78
11187: PUSH
11188: LD_INT 4
11190: PUSH
11191: EMPTY
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 32
11199: PUSH
11200: LD_INT 163
11202: PUSH
11203: LD_INT 80
11205: PUSH
11206: LD_INT 5
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 32
11217: PUSH
11218: LD_INT 136
11220: PUSH
11221: LD_INT 73
11223: PUSH
11224: LD_INT 0
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 32
11235: PUSH
11236: LD_INT 157
11238: PUSH
11239: LD_INT 98
11241: PUSH
11242: LD_INT 0
11244: PUSH
11245: EMPTY
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: PUSH
11251: LD_INT 32
11253: PUSH
11254: LD_INT 150
11256: PUSH
11257: LD_INT 87
11259: PUSH
11260: LD_INT 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 33
11271: PUSH
11272: LD_INT 171
11274: PUSH
11275: LD_INT 97
11277: PUSH
11278: LD_INT 4
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: PUSH
11287: LD_INT 33
11289: PUSH
11290: LD_INT 168
11292: PUSH
11293: LD_INT 92
11295: PUSH
11296: LD_INT 4
11298: PUSH
11299: EMPTY
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: PUSH
11305: LD_INT 33
11307: PUSH
11308: LD_INT 166
11310: PUSH
11311: LD_INT 80
11313: PUSH
11314: LD_INT 5
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: PUSH
11323: LD_INT 33
11325: PUSH
11326: LD_INT 141
11328: PUSH
11329: LD_INT 54
11331: PUSH
11332: LD_INT 2
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: PUSH
11341: LD_INT 33
11343: PUSH
11344: LD_INT 133
11346: PUSH
11347: LD_INT 57
11349: PUSH
11350: LD_INT 2
11352: PUSH
11353: EMPTY
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: PUSH
11359: LD_INT 33
11361: PUSH
11362: LD_INT 132
11364: PUSH
11365: LD_INT 61
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: PUSH
11377: LD_INT 33
11379: PUSH
11380: LD_INT 150
11382: PUSH
11383: LD_INT 82
11385: PUSH
11386: LD_INT 0
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: LIST
11393: LIST
11394: PUSH
11395: LD_INT 33
11397: PUSH
11398: LD_INT 132
11400: PUSH
11401: LD_INT 72
11403: PUSH
11404: LD_INT 0
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 6
11415: PUSH
11416: LD_INT 146
11418: PUSH
11419: LD_INT 64
11421: PUSH
11422: LD_INT 4
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: LD_INT 6
11433: PUSH
11434: LD_INT 159
11436: PUSH
11437: LD_INT 85
11439: PUSH
11440: LD_INT 4
11442: PUSH
11443: EMPTY
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: PUSH
11449: LD_INT 21
11451: PUSH
11452: LD_INT 163
11454: PUSH
11455: LD_INT 91
11457: PUSH
11458: LD_INT 3
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: PUSH
11467: LD_INT 16
11469: PUSH
11470: LD_INT 166
11472: PUSH
11473: LD_INT 95
11475: PUSH
11476: LD_INT 4
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: PUSH
11485: LD_INT 24
11487: PUSH
11488: LD_INT 159
11490: PUSH
11491: LD_INT 95
11493: PUSH
11494: LD_INT 1
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: LIST
11501: LIST
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11536: LD_ADDR_VAR 0 3
11540: PUSH
11541: LD_INT 22
11543: PUSH
11544: LD_INT 3
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 3
11553: PUSH
11554: LD_INT 25
11556: PUSH
11557: LD_INT 2
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: PPUSH
11572: CALL_OW 69
11576: PUSH
11577: FOR_IN
11578: IFFALSE 11597
// AddComAgressiveMove ( i , 141 , 65 ) ;
11580: LD_VAR 0 3
11584: PPUSH
11585: LD_INT 141
11587: PPUSH
11588: LD_INT 65
11590: PPUSH
11591: CALL_OW 174
11595: GO 11577
11597: POP
11598: POP
// for i := 1 to buildingsTab do
11599: LD_ADDR_VAR 0 3
11603: PUSH
11604: DOUBLE
11605: LD_INT 1
11607: DEC
11608: ST_TO_ADDR
11609: LD_VAR 0 5
11613: PUSH
11614: FOR_TO
11615: IFFALSE 11688
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11617: LD_VAR 0 4
11621: PPUSH
11622: LD_VAR 0 5
11626: PUSH
11627: LD_VAR 0 3
11631: ARRAY
11632: PUSH
11633: LD_INT 1
11635: ARRAY
11636: PPUSH
11637: LD_VAR 0 5
11641: PUSH
11642: LD_VAR 0 3
11646: ARRAY
11647: PUSH
11648: LD_INT 2
11650: ARRAY
11651: PPUSH
11652: LD_VAR 0 5
11656: PUSH
11657: LD_VAR 0 3
11661: ARRAY
11662: PUSH
11663: LD_INT 3
11665: ARRAY
11666: PPUSH
11667: LD_VAR 0 5
11671: PUSH
11672: LD_VAR 0 3
11676: ARRAY
11677: PUSH
11678: LD_INT 4
11680: ARRAY
11681: PPUSH
11682: CALL_OW 205
11686: GO 11614
11688: POP
11689: POP
// end ; end ;
11690: LD_VAR 0 2
11694: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
11695: LD_INT 0
11697: PPUSH
11698: PPUSH
11699: PPUSH
11700: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
11701: LD_ADDR_VAR 0 3
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_INT 2
11711: PUSH
11712: EMPTY
11713: LIST
11714: LIST
11715: PUSH
11716: LD_INT 25
11718: PUSH
11719: LD_INT 2
11721: PUSH
11722: EMPTY
11723: LIST
11724: LIST
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 69
11734: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
11735: LD_VAR 0 3
11739: PPUSH
11740: LD_INT 0
11742: PPUSH
11743: LD_INT 71
11745: PPUSH
11746: LD_INT 15
11748: PPUSH
11749: LD_INT 3
11751: PPUSH
11752: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
11756: LD_ADDR_VAR 0 4
11760: PUSH
11761: LD_INT 6
11763: PUSH
11764: LD_INT 77
11766: PUSH
11767: LD_INT 18
11769: PUSH
11770: LD_INT 3
11772: PUSH
11773: EMPTY
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: PUSH
11779: LD_INT 4
11781: PUSH
11782: LD_INT 77
11784: PUSH
11785: LD_INT 26
11787: PUSH
11788: LD_INT 0
11790: PUSH
11791: EMPTY
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: PUSH
11797: LD_INT 31
11799: PUSH
11800: LD_INT 82
11802: PUSH
11803: LD_INT 28
11805: PUSH
11806: LD_INT 0
11808: PUSH
11809: EMPTY
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: PUSH
11815: LD_INT 31
11817: PUSH
11818: LD_INT 84
11820: PUSH
11821: LD_INT 21
11823: PUSH
11824: LD_INT 3
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 31
11835: PUSH
11836: LD_INT 66
11838: PUSH
11839: LD_INT 14
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: EMPTY
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: PUSH
11851: LD_INT 27
11853: PUSH
11854: LD_INT 67
11856: PUSH
11857: LD_INT 18
11859: PUSH
11860: LD_INT 5
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: PUSH
11869: LD_INT 27
11871: PUSH
11872: LD_INT 69
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 2
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: ST_TO_ADDR
// for i := 1 to buildingsTab do
11896: LD_ADDR_VAR 0 2
11900: PUSH
11901: DOUBLE
11902: LD_INT 1
11904: DEC
11905: ST_TO_ADDR
11906: LD_VAR 0 4
11910: PUSH
11911: FOR_TO
11912: IFFALSE 11985
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11914: LD_VAR 0 3
11918: PPUSH
11919: LD_VAR 0 4
11923: PUSH
11924: LD_VAR 0 2
11928: ARRAY
11929: PUSH
11930: LD_INT 1
11932: ARRAY
11933: PPUSH
11934: LD_VAR 0 4
11938: PUSH
11939: LD_VAR 0 2
11943: ARRAY
11944: PUSH
11945: LD_INT 2
11947: ARRAY
11948: PPUSH
11949: LD_VAR 0 4
11953: PUSH
11954: LD_VAR 0 2
11958: ARRAY
11959: PUSH
11960: LD_INT 3
11962: ARRAY
11963: PPUSH
11964: LD_VAR 0 4
11968: PUSH
11969: LD_VAR 0 2
11973: ARRAY
11974: PUSH
11975: LD_INT 4
11977: ARRAY
11978: PPUSH
11979: CALL_OW 205
11983: GO 11911
11985: POP
11986: POP
// end ;
11987: LD_VAR 0 1
11991: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
11992: LD_INT 0
11994: PPUSH
11995: PPUSH
11996: PPUSH
11997: PPUSH
11998: PPUSH
11999: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12000: LD_ADDR_VAR 0 7
12004: PUSH
12005: LD_INT 22
12007: PUSH
12008: LD_VAR 0 1
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 25
12019: PUSH
12020: LD_INT 9
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PPUSH
12031: CALL_OW 69
12035: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12036: LD_ADDR_VAR 0 8
12040: PUSH
12041: LD_INT 22
12043: PUSH
12044: LD_VAR 0 2
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: LD_INT 21
12058: PUSH
12059: LD_INT 3
12061: PUSH
12062: EMPTY
12063: LIST
12064: LIST
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12079: LD_ADDR_VAR 0 5
12083: PUSH
12084: LD_INT 1
12086: PPUSH
12087: LD_INT 3
12089: PPUSH
12090: CALL_OW 12
12094: ST_TO_ADDR
// for i = 1 to list do
12095: LD_ADDR_VAR 0 6
12099: PUSH
12100: DOUBLE
12101: LD_INT 1
12103: DEC
12104: ST_TO_ADDR
12105: LD_VAR 0 7
12109: PUSH
12110: FOR_TO
12111: IFFALSE 13081
// for ta in filter do
12113: LD_ADDR_VAR 0 4
12117: PUSH
12118: LD_VAR 0 8
12122: PUSH
12123: FOR_IN
12124: IFFALSE 13077
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
12126: LD_VAR 0 7
12130: PUSH
12131: LD_VAR 0 6
12135: ARRAY
12136: PPUSH
12137: LD_VAR 0 4
12141: PPUSH
12142: CALL_OW 296
12146: PUSH
12147: LD_INT 12
12149: LESSEQUAL
12150: IFFALSE 13075
// begin case c of 1 :
12152: LD_VAR 0 5
12156: PUSH
12157: LD_INT 1
12159: DOUBLE
12160: EQUAL
12161: IFTRUE 12165
12163: GO 12597
12165: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
12166: LD_VAR 0 7
12170: PUSH
12171: LD_VAR 0 6
12175: ARRAY
12176: PPUSH
12177: LD_VAR 0 4
12181: PPUSH
12182: CALL_OW 250
12186: PPUSH
12187: LD_VAR 0 4
12191: PPUSH
12192: CALL_OW 251
12196: PPUSH
12197: CALL_OW 154
// if eventVar2 = 0 then
12201: LD_EXP 62
12205: PUSH
12206: LD_INT 0
12208: EQUAL
12209: IFFALSE 12595
// begin eventVar2 = 1 ;
12211: LD_ADDR_EXP 62
12215: PUSH
12216: LD_INT 1
12218: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12219: LD_INT 245
12221: PPUSH
12222: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
12226: LD_VAR 0 4
12230: PPUSH
12231: CALL_OW 250
12235: PPUSH
12236: LD_VAR 0 4
12240: PPUSH
12241: CALL_OW 251
12245: PPUSH
12246: CALL_OW 84
// DialogueOn ;
12250: CALL_OW 6
// if IsOK ( Cyrus ) then
12254: LD_EXP 5
12258: PPUSH
12259: CALL_OW 302
12263: IFFALSE 12279
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
12265: LD_EXP 5
12269: PPUSH
12270: LD_STRING D9a-Cyrus-1
12272: PPUSH
12273: CALL_OW 88
// end else
12277: GO 12401
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
12279: LD_INT 22
12281: PUSH
12282: LD_INT 1
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: PUSH
12289: LD_INT 26
12291: PUSH
12292: LD_INT 1
12294: PUSH
12295: EMPTY
12296: LIST
12297: LIST
12298: PUSH
12299: LD_INT 2
12301: PUSH
12302: LD_INT 25
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 25
12314: PUSH
12315: LD_INT 2
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: PUSH
12322: LD_INT 25
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 25
12334: PUSH
12335: LD_INT 4
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 25
12344: PUSH
12345: LD_INT 5
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: PPUSH
12365: CALL_OW 69
12369: PUSH
12370: LD_EXP 1
12374: PUSH
12375: LD_EXP 14
12379: PUSH
12380: LD_EXP 5
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: LIST
12389: DIFF
12390: PPUSH
12391: LD_STRING D9a-Sol1-1
12393: PPUSH
12394: LD_STRING D9a-Sol1-1
12396: PPUSH
12397: CALL 8647 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
12401: LD_INT 22
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 26
12413: PUSH
12414: LD_INT 1
12416: PUSH
12417: EMPTY
12418: LIST
12419: LIST
12420: PUSH
12421: LD_INT 2
12423: PUSH
12424: LD_INT 25
12426: PUSH
12427: LD_INT 1
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: PUSH
12434: LD_INT 25
12436: PUSH
12437: LD_INT 2
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 25
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 4
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 25
12466: PUSH
12467: LD_INT 5
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: LIST
12486: PPUSH
12487: CALL_OW 69
12491: PUSH
12492: LD_EXP 1
12496: PUSH
12497: LD_EXP 14
12501: PUSH
12502: LD_EXP 5
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: LIST
12511: DIFF
12512: PPUSH
12513: LD_STRING D9b-Sol1-1
12515: PPUSH
12516: LD_STRING D9b-Sol1-1
12518: PPUSH
12519: CALL 8647 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
12523: LD_STRING 09_arInfo
12525: PPUSH
12526: LD_INT 0
12528: PPUSH
12529: CALL_OW 30
12533: PUSH
12534: LD_INT 1
12536: EQUAL
12537: IFFALSE 12551
// Say ( JMM , D9a-JMM-1 ) ;
12539: LD_EXP 1
12543: PPUSH
12544: LD_STRING D9a-JMM-1
12546: PPUSH
12547: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
12551: LD_EXP 1
12555: PPUSH
12556: LD_STRING D9c-JMM-1
12558: PPUSH
12559: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
12563: LD_INT 12
12565: PPUSH
12566: LD_INT 1
12568: PPUSH
12569: CALL_OW 321
12573: PUSH
12574: LD_INT 2
12576: EQUAL
12577: IFFALSE 12591
// Say ( JMM , D9c-JMM-1a ) ;
12579: LD_EXP 1
12583: PPUSH
12584: LD_STRING D9c-JMM-1a
12586: PPUSH
12587: CALL_OW 88
// DialogueOff ;
12591: CALL_OW 7
// end ; end ; 2 :
12595: GO 13075
12597: LD_INT 2
12599: DOUBLE
12600: EQUAL
12601: IFTRUE 12605
12603: GO 13063
12605: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
12606: LD_VAR 0 7
12610: PUSH
12611: LD_VAR 0 6
12615: ARRAY
12616: PPUSH
12617: LD_VAR 0 4
12621: PPUSH
12622: CALL_OW 250
12626: PUSH
12627: LD_INT 1
12629: NEG
12630: PPUSH
12631: LD_INT 1
12633: PPUSH
12634: CALL_OW 12
12638: PLUS
12639: PPUSH
12640: LD_VAR 0 4
12644: PPUSH
12645: CALL_OW 251
12649: PUSH
12650: LD_INT 1
12652: NEG
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 12
12661: PLUS
12662: PPUSH
12663: CALL_OW 153
// if eventVar2 = 0 then
12667: LD_EXP 62
12671: PUSH
12672: LD_INT 0
12674: EQUAL
12675: IFFALSE 13061
// begin eventVar2 = 1 ;
12677: LD_ADDR_EXP 62
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12685: LD_INT 245
12687: PPUSH
12688: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
12692: LD_VAR 0 4
12696: PPUSH
12697: CALL_OW 250
12701: PPUSH
12702: LD_VAR 0 4
12706: PPUSH
12707: CALL_OW 251
12711: PPUSH
12712: CALL_OW 84
// DialogueOn ;
12716: CALL_OW 6
// if IsOK ( Cyrus ) then
12720: LD_EXP 5
12724: PPUSH
12725: CALL_OW 302
12729: IFFALSE 12745
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
12731: LD_EXP 5
12735: PPUSH
12736: LD_STRING D9a-Cyrus-1
12738: PPUSH
12739: CALL_OW 88
// end else
12743: GO 12867
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
12745: LD_INT 22
12747: PUSH
12748: LD_INT 1
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: PUSH
12755: LD_INT 26
12757: PUSH
12758: LD_INT 1
12760: PUSH
12761: EMPTY
12762: LIST
12763: LIST
12764: PUSH
12765: LD_INT 2
12767: PUSH
12768: LD_INT 25
12770: PUSH
12771: LD_INT 1
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: PUSH
12778: LD_INT 25
12780: PUSH
12781: LD_INT 2
12783: PUSH
12784: EMPTY
12785: LIST
12786: LIST
12787: PUSH
12788: LD_INT 25
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 25
12800: PUSH
12801: LD_INT 4
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 25
12810: PUSH
12811: LD_INT 5
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: LIST
12830: PPUSH
12831: CALL_OW 69
12835: PUSH
12836: LD_EXP 1
12840: PUSH
12841: LD_EXP 14
12845: PUSH
12846: LD_EXP 5
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: DIFF
12856: PPUSH
12857: LD_STRING D9a-Sol1-1
12859: PPUSH
12860: LD_STRING D9a-Sol1-1
12862: PPUSH
12863: CALL 8647 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
12867: LD_INT 22
12869: PUSH
12870: LD_INT 1
12872: PUSH
12873: EMPTY
12874: LIST
12875: LIST
12876: PUSH
12877: LD_INT 26
12879: PUSH
12880: LD_INT 1
12882: PUSH
12883: EMPTY
12884: LIST
12885: LIST
12886: PUSH
12887: LD_INT 2
12889: PUSH
12890: LD_INT 25
12892: PUSH
12893: LD_INT 1
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: PUSH
12900: LD_INT 25
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: EMPTY
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 25
12912: PUSH
12913: LD_INT 3
12915: PUSH
12916: EMPTY
12917: LIST
12918: LIST
12919: PUSH
12920: LD_INT 25
12922: PUSH
12923: LD_INT 4
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: PUSH
12930: LD_INT 25
12932: PUSH
12933: LD_INT 5
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: LIST
12947: PUSH
12948: EMPTY
12949: LIST
12950: LIST
12951: LIST
12952: PPUSH
12953: CALL_OW 69
12957: PUSH
12958: LD_EXP 1
12962: PUSH
12963: LD_EXP 14
12967: PUSH
12968: LD_EXP 5
12972: PUSH
12973: EMPTY
12974: LIST
12975: LIST
12976: LIST
12977: DIFF
12978: PPUSH
12979: LD_STRING D9b-Sol1-1
12981: PPUSH
12982: LD_STRING D9b-Sol1-1
12984: PPUSH
12985: CALL 8647 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
12989: LD_STRING 09_arInfo
12991: PPUSH
12992: LD_INT 0
12994: PPUSH
12995: CALL_OW 30
12999: PUSH
13000: LD_INT 1
13002: EQUAL
13003: IFFALSE 13017
// Say ( JMM , D9a-JMM-1 ) ;
13005: LD_EXP 1
13009: PPUSH
13010: LD_STRING D9a-JMM-1
13012: PPUSH
13013: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13017: LD_EXP 1
13021: PPUSH
13022: LD_STRING D9c-JMM-1
13024: PPUSH
13025: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13029: LD_INT 12
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: CALL_OW 321
13039: PUSH
13040: LD_INT 2
13042: EQUAL
13043: IFFALSE 13057
// Say ( JMM , D9c-JMM-1a ) ;
13045: LD_EXP 1
13049: PPUSH
13050: LD_STRING D9c-JMM-1a
13052: PPUSH
13053: CALL_OW 88
// DialogueOff ;
13057: CALL_OW 7
// end ; end ; 3 :
13061: GO 13075
13063: LD_INT 3
13065: DOUBLE
13066: EQUAL
13067: IFTRUE 13071
13069: GO 13074
13071: POP
// ; end ;
13072: GO 13075
13074: POP
// end ; end ;
13075: GO 12123
13077: POP
13078: POP
13079: GO 12110
13081: POP
13082: POP
// end ;
13083: LD_VAR 0 3
13087: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13088: LD_INT 0
13090: PPUSH
13091: PPUSH
13092: PPUSH
13093: PPUSH
// for i = 1 to 72 do
13094: LD_ADDR_VAR 0 5
13098: PUSH
13099: DOUBLE
13100: LD_INT 1
13102: DEC
13103: ST_TO_ADDR
13104: LD_INT 72
13106: PUSH
13107: FOR_TO
13108: IFFALSE 13166
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13110: LD_VAR 0 5
13114: PPUSH
13115: LD_VAR 0 1
13119: PPUSH
13120: CALL_OW 321
13124: PUSH
13125: LD_INT 1
13127: EQUAL
13128: PUSH
13129: LD_VAR 0 5
13133: PPUSH
13134: LD_VAR 0 3
13138: PPUSH
13139: CALL_OW 482
13143: PUSH
13144: LD_INT 1
13146: EQUAL
13147: AND
13148: IFFALSE 13164
// AddComResearch ( lab , i ) ;
13150: LD_VAR 0 2
13154: PPUSH
13155: LD_VAR 0 5
13159: PPUSH
13160: CALL_OW 184
13164: GO 13107
13166: POP
13167: POP
// end ;
13168: LD_VAR 0 4
13172: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
13173: LD_INT 0
13175: PPUSH
13176: PPUSH
13177: PPUSH
13178: PPUSH
13179: PPUSH
13180: PPUSH
13181: PPUSH
13182: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
13183: LD_ADDR_VAR 0 6
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_VAR 0 1
13195: PUSH
13196: EMPTY
13197: LIST
13198: LIST
13199: PUSH
13200: LD_INT 56
13202: PUSH
13203: EMPTY
13204: LIST
13205: PUSH
13206: LD_INT 24
13208: PUSH
13209: LD_INT 700
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: LD_INT 60
13221: PUSH
13222: EMPTY
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: LD_INT 25
13234: PUSH
13235: LD_INT 1
13237: PUSH
13238: EMPTY
13239: LIST
13240: LIST
13241: PUSH
13242: LD_INT 25
13244: PUSH
13245: LD_INT 9
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: PPUSH
13264: CALL_OW 69
13268: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
13269: LD_ADDR_VAR 0 7
13273: PUSH
13274: LD_INT 22
13276: PUSH
13277: LD_VAR 0 1
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 30
13288: PUSH
13289: LD_INT 32
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: PUSH
13296: LD_INT 58
13298: PUSH
13299: EMPTY
13300: LIST
13301: PUSH
13302: LD_INT 24
13304: PUSH
13305: LD_INT 251
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: PPUSH
13318: CALL_OW 69
13322: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
13323: LD_ADDR_VAR 0 9
13327: PUSH
13328: LD_INT 22
13330: PUSH
13331: LD_VAR 0 1
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 30
13345: PUSH
13346: LD_INT 4
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 30
13355: PUSH
13356: LD_INT 5
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: PUSH
13368: LD_INT 24
13370: PUSH
13371: LD_INT 251
13373: PUSH
13374: EMPTY
13375: LIST
13376: LIST
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: PPUSH
13383: CALL_OW 69
13387: ST_TO_ADDR
// if barrackList > 0 then
13388: LD_VAR 0 9
13392: PUSH
13393: LD_INT 0
13395: GREATER
13396: IFFALSE 13531
// begin if turretList = 0 then
13398: LD_VAR 0 7
13402: PUSH
13403: LD_INT 0
13405: EQUAL
13406: IFFALSE 13455
// begin for i in soldiers_list do
13408: LD_ADDR_VAR 0 4
13412: PUSH
13413: LD_VAR 0 6
13417: PUSH
13418: FOR_IN
13419: IFFALSE 13451
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
13421: LD_VAR 0 4
13425: PPUSH
13426: LD_VAR 0 9
13430: PUSH
13431: LD_INT 1
13433: PPUSH
13434: LD_VAR 0 9
13438: PPUSH
13439: CALL_OW 12
13443: ARRAY
13444: PPUSH
13445: CALL_OW 120
13449: GO 13418
13451: POP
13452: POP
// end else
13453: GO 13531
// begin for i in barrackList do
13455: LD_ADDR_VAR 0 4
13459: PUSH
13460: LD_VAR 0 9
13464: PUSH
13465: FOR_IN
13466: IFFALSE 13529
// begin insideUnits = UnitsInside ( i ) ;
13468: LD_ADDR_VAR 0 10
13472: PUSH
13473: LD_VAR 0 4
13477: PPUSH
13478: CALL_OW 313
13482: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
13483: LD_VAR 0 10
13487: PUSH
13488: LD_INT 1
13490: ARRAY
13491: PPUSH
13492: LD_VAR 0 7
13496: PUSH
13497: LD_INT 1
13499: ARRAY
13500: PPUSH
13501: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
13505: LD_VAR 0 6
13509: PUSH
13510: LD_INT 1
13512: ARRAY
13513: PPUSH
13514: LD_VAR 0 7
13518: PUSH
13519: LD_INT 1
13521: ARRAY
13522: PPUSH
13523: CALL_OW 120
// end ;
13527: GO 13465
13529: POP
13530: POP
// end ; end ; end ;
13531: LD_VAR 0 3
13535: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13536: LD_INT 0
13538: PPUSH
13539: PPUSH
13540: PPUSH
13541: PPUSH
13542: PPUSH
13543: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13544: LD_ADDR_VAR 0 6
13548: PUSH
13549: LD_VAR 0 2
13553: PPUSH
13554: CALL_OW 313
13558: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
13559: LD_ADDR_VAR 0 7
13563: PUSH
13564: LD_INT 22
13566: PUSH
13567: LD_VAR 0 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 25
13578: PUSH
13579: LD_INT 2
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: LD_INT 24
13588: PUSH
13589: LD_INT 1000
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: LIST
13600: PPUSH
13601: CALL_OW 69
13605: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13606: LD_ADDR_VAR 0 4
13610: PUSH
13611: LD_INT 22
13613: PUSH
13614: LD_VAR 0 1
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 21
13625: PUSH
13626: LD_INT 3
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: PUSH
13633: LD_INT 3
13635: PUSH
13636: LD_INT 24
13638: PUSH
13639: LD_INT 1000
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PUSH
13650: EMPTY
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: EMPTY
13656: LIST
13657: PPUSH
13658: CALL_OW 69
13662: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
13663: LD_VAR 0 4
13667: NOT
13668: PUSH
13669: LD_VAR 0 7
13673: NOT
13674: AND
13675: PUSH
13676: LD_EXP 42
13680: NOT
13681: AND
13682: IFFALSE 13686
// exit ;
13684: GO 13877
// if buildings_list > 0 and engineerOkInside then
13686: LD_VAR 0 4
13690: PUSH
13691: LD_INT 0
13693: GREATER
13694: PUSH
13695: LD_VAR 0 6
13699: AND
13700: IFFALSE 13754
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
13702: LD_ADDR_VAR 0 5
13706: PUSH
13707: LD_INT 22
13709: PUSH
13710: LD_VAR 0 1
13714: PUSH
13715: EMPTY
13716: LIST
13717: LIST
13718: PUSH
13719: LD_INT 25
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: PPUSH
13733: CALL_OW 69
13737: PUSH
13738: FOR_IN
13739: IFFALSE 13752
// ComExitBuilding ( i ) ;
13741: LD_VAR 0 5
13745: PPUSH
13746: CALL_OW 122
13750: GO 13738
13752: POP
13753: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
13754: LD_VAR 0 4
13758: PUSH
13759: LD_INT 0
13761: GREATER
13762: PUSH
13763: LD_VAR 0 7
13767: PUSH
13768: LD_INT 0
13770: GREATER
13771: AND
13772: IFFALSE 13826
// begin for i in engineerOkOutside do
13774: LD_ADDR_VAR 0 5
13778: PUSH
13779: LD_VAR 0 7
13783: PUSH
13784: FOR_IN
13785: IFFALSE 13824
// for j in buildings_list do
13787: LD_ADDR_VAR 0 8
13791: PUSH
13792: LD_VAR 0 4
13796: PUSH
13797: FOR_IN
13798: IFFALSE 13820
// ComRepairBuilding ( i , j [ 1 ] ) ;
13800: LD_VAR 0 5
13804: PPUSH
13805: LD_VAR 0 8
13809: PUSH
13810: LD_INT 1
13812: ARRAY
13813: PPUSH
13814: CALL_OW 130
13818: GO 13797
13820: POP
13821: POP
13822: GO 13784
13824: POP
13825: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
13826: LD_VAR 0 4
13830: PUSH
13831: LD_INT 0
13833: EQUAL
13834: PUSH
13835: LD_VAR 0 7
13839: PUSH
13840: LD_INT 0
13842: GREATER
13843: AND
13844: IFFALSE 13877
// for i in engineerOkOutside do
13846: LD_ADDR_VAR 0 5
13850: PUSH
13851: LD_VAR 0 7
13855: PUSH
13856: FOR_IN
13857: IFFALSE 13875
// ComEnterUnit ( i , building ) ;
13859: LD_VAR 0 5
13863: PPUSH
13864: LD_VAR 0 2
13868: PPUSH
13869: CALL_OW 120
13873: GO 13856
13875: POP
13876: POP
// end ;
13877: LD_VAR 0 3
13881: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
13882: LD_INT 0
13884: PPUSH
13885: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
13886: LD_INT 22
13888: PUSH
13889: LD_VAR 0 1
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: LD_INT 2
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: PUSH
13917: LD_INT 0
13919: GREATER
13920: PUSH
13921: LD_INT 22
13923: PUSH
13924: LD_VAR 0 1
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PUSH
13933: LD_INT 21
13935: PUSH
13936: LD_INT 3
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 3
13945: PUSH
13946: LD_INT 24
13948: PUSH
13949: LD_INT 1000
13951: PUSH
13952: EMPTY
13953: LIST
13954: LIST
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: PPUSH
13965: CALL_OW 69
13969: PUSH
13970: LD_INT 0
13972: EQUAL
13973: AND
13974: PUSH
13975: LD_VAR 0 2
13979: PUSH
13980: LD_INT 0
13982: GREATER
13983: AND
13984: IFFALSE 14083
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
13986: LD_ADDR_VAR 0 4
13990: PUSH
13991: LD_INT 22
13993: PUSH
13994: LD_VAR 0 1
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 25
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 69
14021: PUSH
14022: FOR_IN
14023: IFFALSE 14081
// begin AddComExitBuilding ( i ) ;
14025: LD_VAR 0 4
14029: PPUSH
14030: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14034: LD_VAR 0 4
14038: PPUSH
14039: LD_VAR 0 2
14043: PUSH
14044: LD_INT 1
14046: ARRAY
14047: PPUSH
14048: LD_VAR 0 2
14052: PUSH
14053: LD_INT 2
14055: ARRAY
14056: PPUSH
14057: LD_VAR 0 2
14061: PUSH
14062: LD_INT 3
14064: ARRAY
14065: PPUSH
14066: LD_VAR 0 2
14070: PUSH
14071: LD_INT 4
14073: ARRAY
14074: PPUSH
14075: CALL_OW 205
// end ;
14079: GO 14022
14081: POP
14082: POP
// end ; end ;
14083: LD_VAR 0 3
14087: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14088: LD_INT 0
14090: PPUSH
14091: PPUSH
14092: PPUSH
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
14099: LD_ADDR_VAR 0 6
14103: PUSH
14104: LD_INT 22
14106: PUSH
14107: LD_VAR 0 1
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: LD_INT 25
14118: PUSH
14119: LD_INT 4
14121: PUSH
14122: EMPTY
14123: LIST
14124: LIST
14125: PUSH
14126: LD_INT 24
14128: PUSH
14129: LD_INT 251
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: LIST
14140: PPUSH
14141: CALL_OW 69
14145: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
14146: LD_ADDR_VAR 0 7
14150: PUSH
14151: LD_VAR 0 3
14155: PPUSH
14156: LD_INT 22
14158: PUSH
14159: LD_VAR 0 1
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 25
14170: PUSH
14171: LD_INT 4
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: LD_INT 50
14180: PUSH
14181: EMPTY
14182: LIST
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 70
14193: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14194: LD_ADDR_VAR 0 10
14198: PUSH
14199: LD_VAR 0 3
14203: PPUSH
14204: LD_INT 22
14206: PUSH
14207: LD_VAR 0 1
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: PUSH
14216: LD_INT 21
14218: PUSH
14219: LD_INT 1
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 3
14228: PUSH
14229: LD_INT 25
14231: PUSH
14232: LD_INT 3
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: LD_INT 3
14245: PUSH
14246: LD_INT 24
14248: PUSH
14249: LD_INT 750
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 70
14270: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14271: LD_ADDR_VAR 0 11
14275: PUSH
14276: LD_VAR 0 2
14280: PPUSH
14281: LD_INT 22
14283: PUSH
14284: LD_VAR 0 1
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 21
14295: PUSH
14296: LD_INT 1
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: LD_INT 3
14305: PUSH
14306: LD_INT 25
14308: PUSH
14309: LD_INT 3
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: LD_INT 3
14322: PUSH
14323: LD_INT 24
14325: PUSH
14326: LD_INT 1000
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PPUSH
14343: CALL_OW 70
14347: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
14348: LD_VAR 0 10
14352: NOT
14353: PUSH
14354: LD_VAR 0 7
14358: NOT
14359: AND
14360: PUSH
14361: LD_VAR 0 11
14365: NOT
14366: AND
14367: IFFALSE 14371
// exit ;
14369: GO 14631
// if damageUnits > 0 and sci_list > 0 then
14371: LD_VAR 0 10
14375: PUSH
14376: LD_INT 0
14378: GREATER
14379: PUSH
14380: LD_VAR 0 6
14384: PUSH
14385: LD_INT 0
14387: GREATER
14388: AND
14389: IFFALSE 14422
// for i in damageUnits do
14391: LD_ADDR_VAR 0 8
14395: PUSH
14396: LD_VAR 0 10
14400: PUSH
14401: FOR_IN
14402: IFFALSE 14420
// ComMoveToArea ( i , healArea ) ;
14404: LD_VAR 0 8
14408: PPUSH
14409: LD_VAR 0 2
14413: PPUSH
14414: CALL_OW 113
14418: GO 14401
14420: POP
14421: POP
// if unitsToHeal > 0 and sci_list > 0 then
14422: LD_VAR 0 11
14426: PUSH
14427: LD_INT 0
14429: GREATER
14430: PUSH
14431: LD_VAR 0 6
14435: PUSH
14436: LD_INT 0
14438: GREATER
14439: AND
14440: IFFALSE 14499
// begin for i in sci_list do
14442: LD_ADDR_VAR 0 8
14446: PUSH
14447: LD_VAR 0 6
14451: PUSH
14452: FOR_IN
14453: IFFALSE 14497
// begin ComExitBuilding ( i ) ;
14455: LD_VAR 0 8
14459: PPUSH
14460: CALL_OW 122
// for j in unitsToHeal do
14464: LD_ADDR_VAR 0 9
14468: PUSH
14469: LD_VAR 0 11
14473: PUSH
14474: FOR_IN
14475: IFFALSE 14493
// AddComHeal ( i , j ) ;
14477: LD_VAR 0 8
14481: PPUSH
14482: LD_VAR 0 9
14486: PPUSH
14487: CALL_OW 188
14491: GO 14474
14493: POP
14494: POP
// end ;
14495: GO 14452
14497: POP
14498: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14499: LD_VAR 0 10
14503: PUSH
14504: LD_INT 0
14506: EQUAL
14507: PUSH
14508: LD_VAR 0 11
14512: PUSH
14513: LD_INT 0
14515: EQUAL
14516: AND
14517: PUSH
14518: LD_VAR 0 7
14522: PUSH
14523: LD_INT 0
14525: GREATER
14526: AND
14527: IFFALSE 14631
// for i in sci_listOutside do
14529: LD_ADDR_VAR 0 8
14533: PUSH
14534: LD_VAR 0 7
14538: PUSH
14539: FOR_IN
14540: IFFALSE 14629
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14542: LD_ADDR_VAR 0 12
14546: PUSH
14547: LD_INT 22
14549: PUSH
14550: LD_VAR 0 1
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: LD_INT 21
14561: PUSH
14562: LD_INT 3
14564: PUSH
14565: EMPTY
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 30
14571: PUSH
14572: LD_INT 8
14574: PUSH
14575: EMPTY
14576: LIST
14577: LIST
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: LIST
14583: PPUSH
14584: CALL_OW 69
14588: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14589: LD_ADDR_VAR 0 13
14593: PUSH
14594: LD_INT 1
14596: PPUSH
14597: LD_VAR 0 12
14601: PPUSH
14602: CALL_OW 12
14606: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
14607: LD_VAR 0 8
14611: PPUSH
14612: LD_VAR 0 12
14616: PUSH
14617: LD_VAR 0 13
14621: ARRAY
14622: PPUSH
14623: CALL_OW 120
// end ;
14627: GO 14539
14629: POP
14630: POP
// end ;
14631: LD_VAR 0 5
14635: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
14636: LD_INT 0
14638: PPUSH
14639: PPUSH
14640: PPUSH
14641: PPUSH
14642: PPUSH
14643: PPUSH
14644: PPUSH
14645: PPUSH
14646: PPUSH
14647: PPUSH
14648: PPUSH
// amChassisTab = [ ] ;
14649: LD_ADDR_VAR 0 19
14653: PUSH
14654: EMPTY
14655: ST_TO_ADDR
// arChassisTab = [ ] ;
14656: LD_ADDR_VAR 0 18
14660: PUSH
14661: EMPTY
14662: ST_TO_ADDR
// ruChassisTab = [ ] ;
14663: LD_ADDR_VAR 0 17
14667: PUSH
14668: EMPTY
14669: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
14670: LD_INT 35
14672: PPUSH
14673: CALL_OW 67
// if nation = 1 then
14677: LD_VAR 0 5
14681: PUSH
14682: LD_INT 1
14684: EQUAL
14685: IFFALSE 15190
// begin uc_side = side ;
14687: LD_ADDR_OWVAR 20
14691: PUSH
14692: LD_VAR 0 2
14696: ST_TO_ADDR
// uc_nation = nation ;
14697: LD_ADDR_OWVAR 21
14701: PUSH
14702: LD_VAR 0 5
14706: ST_TO_ADDR
// vc_engine = vehengine ;
14707: LD_ADDR_OWVAR 39
14711: PUSH
14712: LD_VAR 0 6
14716: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
14717: LD_ADDR_OWVAR 38
14721: PUSH
14722: LD_VAR 0 7
14726: PUSH
14727: LD_INT 1
14729: PPUSH
14730: LD_VAR 0 7
14734: PPUSH
14735: CALL_OW 12
14739: ARRAY
14740: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
14741: LD_ADDR_OWVAR 40
14745: PUSH
14746: LD_VAR 0 10
14750: PUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_VAR 0 10
14758: PPUSH
14759: CALL_OW 12
14763: ARRAY
14764: ST_TO_ADDR
// for j = 1 to AMWeapon do
14765: LD_ADDR_VAR 0 14
14769: PUSH
14770: DOUBLE
14771: LD_INT 1
14773: DEC
14774: ST_TO_ADDR
14775: LD_VAR 0 10
14779: PUSH
14780: FOR_TO
14781: IFFALSE 15082
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
14783: LD_VAR 0 10
14787: PUSH
14788: LD_VAR 0 14
14792: ARRAY
14793: PUSH
14794: LD_INT 2
14796: EQUAL
14797: PUSH
14798: LD_VAR 0 10
14802: PUSH
14803: LD_VAR 0 14
14807: ARRAY
14808: PUSH
14809: LD_INT 3
14811: EQUAL
14812: OR
14813: IFFALSE 14866
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
14815: LD_ADDR_VAR 0 19
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: LD_INT 2
14825: PUSH
14826: LD_INT 3
14828: PUSH
14829: LD_INT 4
14831: PUSH
14832: LD_INT 5
14834: PUSH
14835: EMPTY
14836: LIST
14837: LIST
14838: LIST
14839: LIST
14840: LIST
14841: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14842: LD_ADDR_OWVAR 37
14846: PUSH
14847: LD_VAR 0 19
14851: PUSH
14852: LD_INT 1
14854: PPUSH
14855: LD_VAR 0 19
14859: PPUSH
14860: CALL_OW 12
14864: ARRAY
14865: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
14866: LD_VAR 0 10
14870: PUSH
14871: LD_VAR 0 14
14875: ARRAY
14876: PUSH
14877: LD_INT 4
14879: EQUAL
14880: PUSH
14881: LD_VAR 0 10
14885: PUSH
14886: LD_VAR 0 14
14890: ARRAY
14891: PUSH
14892: LD_INT 5
14894: EQUAL
14895: OR
14896: PUSH
14897: LD_VAR 0 10
14901: PUSH
14902: LD_VAR 0 14
14906: ARRAY
14907: PUSH
14908: LD_INT 9
14910: EQUAL
14911: OR
14912: PUSH
14913: LD_VAR 0 10
14917: PUSH
14918: LD_VAR 0 14
14922: ARRAY
14923: PUSH
14924: LD_INT 11
14926: EQUAL
14927: OR
14928: PUSH
14929: LD_VAR 0 10
14933: PUSH
14934: LD_VAR 0 14
14938: ARRAY
14939: PUSH
14940: LD_INT 7
14942: EQUAL
14943: OR
14944: IFFALSE 14993
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
14946: LD_ADDR_VAR 0 19
14950: PUSH
14951: LD_INT 2
14953: PUSH
14954: LD_INT 3
14956: PUSH
14957: LD_INT 4
14959: PUSH
14960: LD_INT 5
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
14969: LD_ADDR_OWVAR 37
14973: PUSH
14974: LD_VAR 0 19
14978: PUSH
14979: LD_INT 1
14981: PPUSH
14982: LD_VAR 0 19
14986: PPUSH
14987: CALL_OW 12
14991: ARRAY
14992: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
14993: LD_VAR 0 10
14997: PUSH
14998: LD_VAR 0 14
15002: ARRAY
15003: PUSH
15004: LD_INT 8
15006: EQUAL
15007: PUSH
15008: LD_VAR 0 10
15012: PUSH
15013: LD_VAR 0 14
15017: ARRAY
15018: PUSH
15019: LD_INT 6
15021: EQUAL
15022: OR
15023: PUSH
15024: LD_VAR 0 10
15028: PUSH
15029: LD_VAR 0 14
15033: ARRAY
15034: PUSH
15035: LD_INT 10
15037: EQUAL
15038: OR
15039: IFFALSE 15080
// begin amChassisTab = [ 4 , 5 ] ;
15041: LD_ADDR_VAR 0 19
15045: PUSH
15046: LD_INT 4
15048: PUSH
15049: LD_INT 5
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15056: LD_ADDR_OWVAR 37
15060: PUSH
15061: LD_VAR 0 19
15065: PUSH
15066: LD_INT 1
15068: PPUSH
15069: LD_VAR 0 19
15073: PPUSH
15074: CALL_OW 12
15078: ARRAY
15079: ST_TO_ADDR
// end ; end ;
15080: GO 14780
15082: POP
15083: POP
// veh = CreateVehicle ;
15084: LD_ADDR_VAR 0 16
15088: PUSH
15089: CALL_OW 45
15093: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15094: LD_VAR 0 16
15098: PPUSH
15099: LD_VAR 0 1
15103: PPUSH
15104: LD_INT 0
15106: PPUSH
15107: CALL_OW 49
// if vc_control = 1 then
15111: LD_OWVAR 38
15115: PUSH
15116: LD_INT 1
15118: EQUAL
15119: IFFALSE 15176
// begin hc_gallery =  ;
15121: LD_ADDR_OWVAR 33
15125: PUSH
15126: LD_STRING 
15128: ST_TO_ADDR
// hc_name =  ;
15129: LD_ADDR_OWVAR 26
15133: PUSH
15134: LD_STRING 
15136: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15137: LD_INT 0
15139: PPUSH
15140: LD_INT 3
15142: PPUSH
15143: LD_VAR 0 4
15147: PPUSH
15148: CALL_OW 380
// un = CreateHuman ;
15152: LD_ADDR_VAR 0 15
15156: PUSH
15157: CALL_OW 44
15161: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15162: LD_VAR 0 15
15166: PPUSH
15167: LD_VAR 0 16
15171: PPUSH
15172: CALL_OW 52
// end ; i = i + 1 ;
15176: LD_ADDR_VAR 0 13
15180: PUSH
15181: LD_VAR 0 13
15185: PUSH
15186: LD_INT 1
15188: PLUS
15189: ST_TO_ADDR
// end ; if nation = 2 then
15190: LD_VAR 0 5
15194: PUSH
15195: LD_INT 2
15197: EQUAL
15198: IFFALSE 15620
// begin uc_side = side ;
15200: LD_ADDR_OWVAR 20
15204: PUSH
15205: LD_VAR 0 2
15209: ST_TO_ADDR
// uc_nation = nation ;
15210: LD_ADDR_OWVAR 21
15214: PUSH
15215: LD_VAR 0 5
15219: ST_TO_ADDR
// vc_engine = vehengine ;
15220: LD_ADDR_OWVAR 39
15224: PUSH
15225: LD_VAR 0 6
15229: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15230: LD_ADDR_OWVAR 38
15234: PUSH
15235: LD_VAR 0 7
15239: PUSH
15240: LD_INT 1
15242: PPUSH
15243: LD_VAR 0 7
15247: PPUSH
15248: CALL_OW 12
15252: ARRAY
15253: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
15254: LD_ADDR_OWVAR 40
15258: PUSH
15259: LD_VAR 0 9
15263: PUSH
15264: LD_INT 1
15266: PPUSH
15267: LD_VAR 0 9
15271: PPUSH
15272: CALL_OW 12
15276: ARRAY
15277: ST_TO_ADDR
// for j = 1 to ARWeapons do
15278: LD_ADDR_VAR 0 14
15282: PUSH
15283: DOUBLE
15284: LD_INT 1
15286: DEC
15287: ST_TO_ADDR
15288: LD_VAR 0 9
15292: PUSH
15293: FOR_TO
15294: IFFALSE 15512
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
15296: LD_VAR 0 9
15300: PUSH
15301: LD_VAR 0 14
15305: ARRAY
15306: PUSH
15307: LD_INT 24
15309: EQUAL
15310: PUSH
15311: LD_VAR 0 9
15315: PUSH
15316: LD_VAR 0 14
15320: ARRAY
15321: PUSH
15322: LD_INT 22
15324: EQUAL
15325: OR
15326: PUSH
15327: LD_VAR 0 9
15331: PUSH
15332: LD_VAR 0 14
15336: ARRAY
15337: PUSH
15338: LD_INT 23
15340: EQUAL
15341: OR
15342: PUSH
15343: LD_VAR 0 9
15347: PUSH
15348: LD_VAR 0 14
15352: ARRAY
15353: PUSH
15354: LD_INT 30
15356: EQUAL
15357: OR
15358: IFFALSE 15395
// begin arChassisTab = [ 14 ] ;
15360: LD_ADDR_VAR 0 18
15364: PUSH
15365: LD_INT 14
15367: PUSH
15368: EMPTY
15369: LIST
15370: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15371: LD_ADDR_OWVAR 37
15375: PUSH
15376: LD_VAR 0 18
15380: PUSH
15381: LD_INT 1
15383: PPUSH
15384: LD_VAR 0 18
15388: PPUSH
15389: CALL_OW 12
15393: ARRAY
15394: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
15395: LD_VAR 0 9
15399: PUSH
15400: LD_VAR 0 14
15404: ARRAY
15405: PUSH
15406: LD_INT 29
15408: EQUAL
15409: PUSH
15410: LD_VAR 0 9
15414: PUSH
15415: LD_VAR 0 14
15419: ARRAY
15420: PUSH
15421: LD_INT 28
15423: EQUAL
15424: OR
15425: PUSH
15426: LD_VAR 0 9
15430: PUSH
15431: LD_VAR 0 14
15435: ARRAY
15436: PUSH
15437: LD_INT 27
15439: EQUAL
15440: OR
15441: PUSH
15442: LD_VAR 0 9
15446: PUSH
15447: LD_VAR 0 14
15451: ARRAY
15452: PUSH
15453: LD_INT 26
15455: EQUAL
15456: OR
15457: PUSH
15458: LD_VAR 0 9
15462: PUSH
15463: LD_VAR 0 14
15467: ARRAY
15468: PUSH
15469: LD_INT 25
15471: EQUAL
15472: OR
15473: IFFALSE 15510
// begin arChassisTab = [ 14 ] ;
15475: LD_ADDR_VAR 0 18
15479: PUSH
15480: LD_INT 14
15482: PUSH
15483: EMPTY
15484: LIST
15485: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
15486: LD_ADDR_OWVAR 37
15490: PUSH
15491: LD_VAR 0 18
15495: PUSH
15496: LD_INT 1
15498: PPUSH
15499: LD_VAR 0 18
15503: PPUSH
15504: CALL_OW 12
15508: ARRAY
15509: ST_TO_ADDR
// end ; end ;
15510: GO 15293
15512: POP
15513: POP
// veh = CreateVehicle ;
15514: LD_ADDR_VAR 0 16
15518: PUSH
15519: CALL_OW 45
15523: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15524: LD_VAR 0 16
15528: PPUSH
15529: LD_VAR 0 1
15533: PPUSH
15534: LD_INT 0
15536: PPUSH
15537: CALL_OW 49
// if vc_control = 1 then
15541: LD_OWVAR 38
15545: PUSH
15546: LD_INT 1
15548: EQUAL
15549: IFFALSE 15606
// begin hc_gallery =  ;
15551: LD_ADDR_OWVAR 33
15555: PUSH
15556: LD_STRING 
15558: ST_TO_ADDR
// hc_name =  ;
15559: LD_ADDR_OWVAR 26
15563: PUSH
15564: LD_STRING 
15566: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15567: LD_INT 0
15569: PPUSH
15570: LD_INT 3
15572: PPUSH
15573: LD_VAR 0 4
15577: PPUSH
15578: CALL_OW 380
// un = CreateHuman ;
15582: LD_ADDR_VAR 0 15
15586: PUSH
15587: CALL_OW 44
15591: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15592: LD_VAR 0 15
15596: PPUSH
15597: LD_VAR 0 16
15601: PPUSH
15602: CALL_OW 52
// end ; i = i + 1 ;
15606: LD_ADDR_VAR 0 13
15610: PUSH
15611: LD_VAR 0 13
15615: PUSH
15616: LD_INT 1
15618: PLUS
15619: ST_TO_ADDR
// end ; if nation = 3 then
15620: LD_VAR 0 5
15624: PUSH
15625: LD_INT 3
15627: EQUAL
15628: IFFALSE 16034
// begin uc_side = side ;
15630: LD_ADDR_OWVAR 20
15634: PUSH
15635: LD_VAR 0 2
15639: ST_TO_ADDR
// uc_nation = nation ;
15640: LD_ADDR_OWVAR 21
15644: PUSH
15645: LD_VAR 0 5
15649: ST_TO_ADDR
// vc_engine = vehengine ;
15650: LD_ADDR_OWVAR 39
15654: PUSH
15655: LD_VAR 0 6
15659: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15660: LD_ADDR_OWVAR 38
15664: PUSH
15665: LD_VAR 0 7
15669: PUSH
15670: LD_INT 1
15672: PPUSH
15673: LD_VAR 0 7
15677: PPUSH
15678: CALL_OW 12
15682: ARRAY
15683: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
15684: LD_ADDR_OWVAR 40
15688: PUSH
15689: LD_VAR 0 8
15693: PUSH
15694: LD_INT 1
15696: PPUSH
15697: LD_VAR 0 8
15701: PPUSH
15702: CALL_OW 12
15706: ARRAY
15707: ST_TO_ADDR
// for j = 1 to RuWeapons do
15708: LD_ADDR_VAR 0 14
15712: PUSH
15713: DOUBLE
15714: LD_INT 1
15716: DEC
15717: ST_TO_ADDR
15718: LD_VAR 0 8
15722: PUSH
15723: FOR_TO
15724: IFFALSE 15926
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
15726: LD_VAR 0 8
15730: PUSH
15731: LD_VAR 0 14
15735: ARRAY
15736: PUSH
15737: LD_INT 42
15739: EQUAL
15740: PUSH
15741: LD_VAR 0 8
15745: PUSH
15746: LD_VAR 0 14
15750: ARRAY
15751: PUSH
15752: LD_INT 43
15754: EQUAL
15755: OR
15756: PUSH
15757: LD_VAR 0 8
15761: PUSH
15762: LD_VAR 0 14
15766: ARRAY
15767: PUSH
15768: LD_INT 44
15770: EQUAL
15771: OR
15772: PUSH
15773: LD_VAR 0 8
15777: PUSH
15778: LD_VAR 0 14
15782: ARRAY
15783: PUSH
15784: LD_INT 45
15786: EQUAL
15787: OR
15788: PUSH
15789: LD_VAR 0 8
15793: PUSH
15794: LD_VAR 0 14
15798: ARRAY
15799: PUSH
15800: LD_INT 49
15802: EQUAL
15803: OR
15804: IFFALSE 15853
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
15806: LD_ADDR_VAR 0 17
15810: PUSH
15811: LD_INT 21
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 23
15819: PUSH
15820: LD_INT 24
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: LIST
15828: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15829: LD_ADDR_OWVAR 37
15833: PUSH
15834: LD_VAR 0 17
15838: PUSH
15839: LD_INT 1
15841: PPUSH
15842: LD_VAR 0 17
15846: PPUSH
15847: CALL_OW 12
15851: ARRAY
15852: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
15853: LD_VAR 0 8
15857: PUSH
15858: LD_VAR 0 14
15862: ARRAY
15863: PUSH
15864: LD_INT 46
15866: EQUAL
15867: PUSH
15868: LD_VAR 0 8
15872: PUSH
15873: LD_VAR 0 14
15877: ARRAY
15878: PUSH
15879: LD_INT 47
15881: EQUAL
15882: OR
15883: IFFALSE 15924
// begin ruChassisTab = [ 23 , 24 ] ;
15885: LD_ADDR_VAR 0 17
15889: PUSH
15890: LD_INT 23
15892: PUSH
15893: LD_INT 24
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
15900: LD_ADDR_OWVAR 37
15904: PUSH
15905: LD_VAR 0 17
15909: PUSH
15910: LD_INT 1
15912: PPUSH
15913: LD_VAR 0 17
15917: PPUSH
15918: CALL_OW 12
15922: ARRAY
15923: ST_TO_ADDR
// end ; end ;
15924: GO 15723
15926: POP
15927: POP
// veh = CreateVehicle ;
15928: LD_ADDR_VAR 0 16
15932: PUSH
15933: CALL_OW 45
15937: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15938: LD_VAR 0 16
15942: PPUSH
15943: LD_VAR 0 1
15947: PPUSH
15948: LD_INT 0
15950: PPUSH
15951: CALL_OW 49
// if vc_control = 1 then
15955: LD_OWVAR 38
15959: PUSH
15960: LD_INT 1
15962: EQUAL
15963: IFFALSE 16020
// begin hc_gallery =  ;
15965: LD_ADDR_OWVAR 33
15969: PUSH
15970: LD_STRING 
15972: ST_TO_ADDR
// hc_name =  ;
15973: LD_ADDR_OWVAR 26
15977: PUSH
15978: LD_STRING 
15980: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15981: LD_INT 0
15983: PPUSH
15984: LD_INT 3
15986: PPUSH
15987: LD_VAR 0 4
15991: PPUSH
15992: CALL_OW 380
// un = CreateHuman ;
15996: LD_ADDR_VAR 0 15
16000: PUSH
16001: CALL_OW 44
16005: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16006: LD_VAR 0 15
16010: PPUSH
16011: LD_VAR 0 16
16015: PPUSH
16016: CALL_OW 52
// end ; i = i + 1 ;
16020: LD_ADDR_VAR 0 13
16024: PUSH
16025: LD_VAR 0 13
16029: PUSH
16030: LD_INT 1
16032: PLUS
16033: ST_TO_ADDR
// end ; until i = vehCount ;
16034: LD_VAR 0 13
16038: PUSH
16039: LD_VAR 0 3
16043: EQUAL
16044: IFFALSE 14670
// repeat wait ( 0 0$1 ) ;
16046: LD_INT 35
16048: PPUSH
16049: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
16053: LD_ADDR_VAR 0 20
16057: PUSH
16058: LD_INT 22
16060: PUSH
16061: LD_VAR 0 2
16065: PUSH
16066: EMPTY
16067: LIST
16068: LIST
16069: PUSH
16070: LD_INT 21
16072: PUSH
16073: LD_INT 2
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 24
16082: PUSH
16083: LD_INT 650
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: EMPTY
16091: LIST
16092: LIST
16093: LIST
16094: PPUSH
16095: CALL_OW 69
16099: ST_TO_ADDR
// if vehicleOK_list > 0 then
16100: LD_VAR 0 20
16104: PUSH
16105: LD_INT 0
16107: GREATER
16108: IFFALSE 16299
// begin for i in vehicleOK_list do
16110: LD_ADDR_VAR 0 13
16114: PUSH
16115: LD_VAR 0 20
16119: PUSH
16120: FOR_IN
16121: IFFALSE 16297
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16123: LD_ADDR_VAR 0 21
16127: PUSH
16128: LD_INT 22
16130: PUSH
16131: LD_VAR 0 11
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL_OW 69
16144: PPUSH
16145: LD_VAR 0 13
16149: PPUSH
16150: CALL_OW 74
16154: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16155: LD_ADDR_VAR 0 22
16159: PUSH
16160: LD_INT 22
16162: PUSH
16163: LD_VAR 0 11
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PUSH
16172: LD_INT 2
16174: PUSH
16175: LD_INT 59
16177: PUSH
16178: EMPTY
16179: LIST
16180: PUSH
16181: LD_INT 21
16183: PUSH
16184: LD_INT 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 2
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: PPUSH
16214: CALL_OW 69
16218: PPUSH
16219: LD_VAR 0 13
16223: PPUSH
16224: CALL_OW 74
16228: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16229: LD_VAR 0 13
16233: PPUSH
16234: LD_VAR 0 21
16238: PPUSH
16239: CALL_OW 296
16243: PUSH
16244: LD_INT 8
16246: PLUS
16247: PUSH
16248: LD_VAR 0 13
16252: PPUSH
16253: LD_VAR 0 22
16257: PPUSH
16258: CALL_OW 296
16262: LESS
16263: IFFALSE 16281
// begin ComAttackUnit ( i , target1 ) ;
16265: LD_VAR 0 13
16269: PPUSH
16270: LD_VAR 0 21
16274: PPUSH
16275: CALL_OW 115
// end else
16279: GO 16295
// begin ComAttackUnit ( i , target2 ) ;
16281: LD_VAR 0 13
16285: PPUSH
16286: LD_VAR 0 22
16290: PPUSH
16291: CALL_OW 115
// end ; end ;
16295: GO 16120
16297: POP
16298: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
16299: LD_INT 22
16301: PUSH
16302: LD_VAR 0 2
16306: PUSH
16307: EMPTY
16308: LIST
16309: LIST
16310: PUSH
16311: LD_INT 21
16313: PUSH
16314: LD_INT 2
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PPUSH
16325: CALL_OW 69
16329: PUSH
16330: LD_INT 0
16332: EQUAL
16333: IFFALSE 16046
// end ;
16335: LD_VAR 0 12
16339: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
16340: LD_INT 0
16342: PPUSH
16343: PPUSH
16344: PPUSH
16345: PPUSH
16346: PPUSH
16347: PPUSH
16348: PPUSH
16349: PPUSH
16350: PPUSH
16351: PPUSH
16352: PPUSH
// for i = 1 to soldierCount do
16353: LD_ADDR_VAR 0 13
16357: PUSH
16358: DOUBLE
16359: LD_INT 1
16361: DEC
16362: ST_TO_ADDR
16363: LD_VAR 0 3
16367: PUSH
16368: FOR_TO
16369: IFFALSE 16451
// begin uc_side = side ;
16371: LD_ADDR_OWVAR 20
16375: PUSH
16376: LD_VAR 0 1
16380: ST_TO_ADDR
// uc_nation = nation ;
16381: LD_ADDR_OWVAR 21
16385: PUSH
16386: LD_VAR 0 2
16390: ST_TO_ADDR
// hc_name =  ;
16391: LD_ADDR_OWVAR 26
16395: PUSH
16396: LD_STRING 
16398: ST_TO_ADDR
// hc_gallery =  ;
16399: LD_ADDR_OWVAR 33
16403: PUSH
16404: LD_STRING 
16406: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
16407: LD_INT 0
16409: PPUSH
16410: LD_INT 1
16412: PPUSH
16413: LD_VAR 0 8
16417: PPUSH
16418: CALL_OW 380
// un = CreateHuman ;
16422: LD_ADDR_VAR 0 15
16426: PUSH
16427: CALL_OW 44
16431: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16432: LD_VAR 0 15
16436: PPUSH
16437: LD_VAR 0 9
16441: PPUSH
16442: LD_INT 0
16444: PPUSH
16445: CALL_OW 49
// end ;
16449: GO 16368
16451: POP
16452: POP
// for i = 1 to sniperCount do
16453: LD_ADDR_VAR 0 13
16457: PUSH
16458: DOUBLE
16459: LD_INT 1
16461: DEC
16462: ST_TO_ADDR
16463: LD_VAR 0 4
16467: PUSH
16468: FOR_TO
16469: IFFALSE 16551
// begin uc_side = side ;
16471: LD_ADDR_OWVAR 20
16475: PUSH
16476: LD_VAR 0 1
16480: ST_TO_ADDR
// uc_nation = nation ;
16481: LD_ADDR_OWVAR 21
16485: PUSH
16486: LD_VAR 0 2
16490: ST_TO_ADDR
// hc_name =  ;
16491: LD_ADDR_OWVAR 26
16495: PUSH
16496: LD_STRING 
16498: ST_TO_ADDR
// hc_gallery =  ;
16499: LD_ADDR_OWVAR 33
16503: PUSH
16504: LD_STRING 
16506: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
16507: LD_INT 0
16509: PPUSH
16510: LD_INT 5
16512: PPUSH
16513: LD_VAR 0 8
16517: PPUSH
16518: CALL_OW 380
// un = CreateHuman ;
16522: LD_ADDR_VAR 0 15
16526: PUSH
16527: CALL_OW 44
16531: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16532: LD_VAR 0 15
16536: PPUSH
16537: LD_VAR 0 9
16541: PPUSH
16542: LD_INT 0
16544: PPUSH
16545: CALL_OW 49
// end ;
16549: GO 16468
16551: POP
16552: POP
// for i = 1 to bazookCount do
16553: LD_ADDR_VAR 0 13
16557: PUSH
16558: DOUBLE
16559: LD_INT 1
16561: DEC
16562: ST_TO_ADDR
16563: LD_VAR 0 5
16567: PUSH
16568: FOR_TO
16569: IFFALSE 16651
// begin uc_side = side ;
16571: LD_ADDR_OWVAR 20
16575: PUSH
16576: LD_VAR 0 1
16580: ST_TO_ADDR
// uc_nation = nation ;
16581: LD_ADDR_OWVAR 21
16585: PUSH
16586: LD_VAR 0 2
16590: ST_TO_ADDR
// hc_name =  ;
16591: LD_ADDR_OWVAR 26
16595: PUSH
16596: LD_STRING 
16598: ST_TO_ADDR
// hc_gallery =  ;
16599: LD_ADDR_OWVAR 33
16603: PUSH
16604: LD_STRING 
16606: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
16607: LD_INT 0
16609: PPUSH
16610: LD_INT 9
16612: PPUSH
16613: LD_VAR 0 8
16617: PPUSH
16618: CALL_OW 380
// un = CreateHuman ;
16622: LD_ADDR_VAR 0 15
16626: PUSH
16627: CALL_OW 44
16631: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16632: LD_VAR 0 15
16636: PPUSH
16637: LD_VAR 0 9
16641: PPUSH
16642: LD_INT 0
16644: PPUSH
16645: CALL_OW 49
// end ;
16649: GO 16568
16651: POP
16652: POP
// for i = 1 to mortalCount do
16653: LD_ADDR_VAR 0 13
16657: PUSH
16658: DOUBLE
16659: LD_INT 1
16661: DEC
16662: ST_TO_ADDR
16663: LD_VAR 0 6
16667: PUSH
16668: FOR_TO
16669: IFFALSE 16751
// begin uc_side = side ;
16671: LD_ADDR_OWVAR 20
16675: PUSH
16676: LD_VAR 0 1
16680: ST_TO_ADDR
// uc_nation = nation ;
16681: LD_ADDR_OWVAR 21
16685: PUSH
16686: LD_VAR 0 2
16690: ST_TO_ADDR
// hc_name =  ;
16691: LD_ADDR_OWVAR 26
16695: PUSH
16696: LD_STRING 
16698: ST_TO_ADDR
// hc_gallery =  ;
16699: LD_ADDR_OWVAR 33
16703: PUSH
16704: LD_STRING 
16706: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
16707: LD_INT 0
16709: PPUSH
16710: LD_INT 8
16712: PPUSH
16713: LD_VAR 0 8
16717: PPUSH
16718: CALL_OW 380
// un = CreateHuman ;
16722: LD_ADDR_VAR 0 15
16726: PUSH
16727: CALL_OW 44
16731: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
16732: LD_VAR 0 15
16736: PPUSH
16737: LD_VAR 0 9
16741: PPUSH
16742: LD_INT 0
16744: PPUSH
16745: CALL_OW 49
// end ;
16749: GO 16668
16751: POP
16752: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
16753: LD_ADDR_VAR 0 18
16757: PUSH
16758: LD_INT 22
16760: PUSH
16761: LD_VAR 0 1
16765: PUSH
16766: EMPTY
16767: LIST
16768: LIST
16769: PUSH
16770: LD_INT 2
16772: PUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 25
16785: PUSH
16786: LD_INT 5
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 8
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 25
16805: PUSH
16806: LD_INT 9
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PPUSH
16824: CALL_OW 69
16828: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
16829: LD_ADDR_VAR 0 17
16833: PUSH
16834: LD_INT 22
16836: PUSH
16837: LD_VAR 0 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 4
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: ST_TO_ADDR
// for i in medic_list do
16865: LD_ADDR_VAR 0 13
16869: PUSH
16870: LD_VAR 0 17
16874: PUSH
16875: FOR_IN
16876: IFFALSE 16894
// ComMoveToArea ( i , healArea ) ;
16878: LD_VAR 0 13
16882: PPUSH
16883: LD_VAR 0 10
16887: PPUSH
16888: CALL_OW 113
16892: GO 16875
16894: POP
16895: POP
// repeat wait ( 0 0$1 ) ;
16896: LD_INT 35
16898: PPUSH
16899: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
16903: LD_ADDR_VAR 0 16
16907: PUSH
16908: LD_INT 22
16910: PUSH
16911: LD_VAR 0 1
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: LD_INT 1
16922: PUSH
16923: LD_INT 3
16925: PUSH
16926: LD_INT 24
16928: PUSH
16929: LD_INT 550
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: PUSH
16936: EMPTY
16937: LIST
16938: LIST
16939: PUSH
16940: LD_INT 24
16942: PUSH
16943: LD_INT 250
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: LIST
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PPUSH
16959: CALL_OW 69
16963: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
16964: LD_ADDR_VAR 0 18
16968: PUSH
16969: LD_INT 22
16971: PUSH
16972: LD_VAR 0 1
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PUSH
16981: LD_INT 2
16983: PUSH
16984: LD_INT 25
16986: PUSH
16987: LD_INT 1
16989: PUSH
16990: EMPTY
16991: LIST
16992: LIST
16993: PUSH
16994: LD_INT 25
16996: PUSH
16997: LD_INT 5
16999: PUSH
17000: EMPTY
17001: LIST
17002: LIST
17003: PUSH
17004: LD_INT 25
17006: PUSH
17007: LD_INT 8
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 25
17016: PUSH
17017: LD_INT 9
17019: PUSH
17020: EMPTY
17021: LIST
17022: LIST
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: PUSH
17031: LD_INT 24
17033: PUSH
17034: LD_INT 1000
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: EMPTY
17042: LIST
17043: LIST
17044: LIST
17045: PPUSH
17046: CALL_OW 69
17050: ST_TO_ADDR
// if medicCount > 0 then
17051: LD_VAR 0 7
17055: PUSH
17056: LD_INT 0
17058: GREATER
17059: IFFALSE 17133
// begin if damageUnit_list > 0 then
17061: LD_VAR 0 16
17065: PUSH
17066: LD_INT 0
17068: GREATER
17069: IFFALSE 17133
// begin for i in damageUnit_list do
17071: LD_ADDR_VAR 0 13
17075: PUSH
17076: LD_VAR 0 16
17080: PUSH
17081: FOR_IN
17082: IFFALSE 17131
// begin ComMoveToArea ( i , healArea ) ;
17084: LD_VAR 0 13
17088: PPUSH
17089: LD_VAR 0 10
17093: PPUSH
17094: CALL_OW 113
// for j in medic_list do
17098: LD_ADDR_VAR 0 14
17102: PUSH
17103: LD_VAR 0 17
17107: PUSH
17108: FOR_IN
17109: IFFALSE 17127
// AddComHeal ( j , i ) ;
17111: LD_VAR 0 14
17115: PPUSH
17116: LD_VAR 0 13
17120: PPUSH
17121: CALL_OW 188
17125: GO 17108
17127: POP
17128: POP
// end ;
17129: GO 17081
17131: POP
17132: POP
// end ; end ; for i in soldiersOK_list do
17133: LD_ADDR_VAR 0 13
17137: PUSH
17138: LD_VAR 0 18
17142: PUSH
17143: FOR_IN
17144: IFFALSE 17320
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17146: LD_ADDR_VAR 0 21
17150: PUSH
17151: LD_INT 22
17153: PUSH
17154: LD_VAR 0 11
17158: PUSH
17159: EMPTY
17160: LIST
17161: LIST
17162: PPUSH
17163: CALL_OW 69
17167: PPUSH
17168: LD_VAR 0 13
17172: PPUSH
17173: CALL_OW 74
17177: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17178: LD_ADDR_VAR 0 22
17182: PUSH
17183: LD_INT 22
17185: PUSH
17186: LD_VAR 0 11
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: PUSH
17195: LD_INT 2
17197: PUSH
17198: LD_INT 59
17200: PUSH
17201: EMPTY
17202: LIST
17203: PUSH
17204: LD_INT 21
17206: PUSH
17207: LD_INT 1
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 21
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: EMPTY
17235: LIST
17236: PPUSH
17237: CALL_OW 69
17241: PPUSH
17242: LD_VAR 0 13
17246: PPUSH
17247: CALL_OW 74
17251: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17252: LD_VAR 0 13
17256: PPUSH
17257: LD_VAR 0 21
17261: PPUSH
17262: CALL_OW 296
17266: PUSH
17267: LD_INT 8
17269: PLUS
17270: PUSH
17271: LD_VAR 0 13
17275: PPUSH
17276: LD_VAR 0 22
17280: PPUSH
17281: CALL_OW 296
17285: LESS
17286: IFFALSE 17304
// begin ComAttackUnit ( i , target1 ) ;
17288: LD_VAR 0 13
17292: PPUSH
17293: LD_VAR 0 21
17297: PPUSH
17298: CALL_OW 115
// end else
17302: GO 17318
// begin ComAttackUnit ( i , target2 ) ;
17304: LD_VAR 0 13
17308: PPUSH
17309: LD_VAR 0 22
17313: PPUSH
17314: CALL_OW 115
// end ; end ;
17318: GO 17143
17320: POP
17321: POP
// for i in soldiersOK_list do
17322: LD_ADDR_VAR 0 13
17326: PUSH
17327: LD_VAR 0 18
17331: PUSH
17332: FOR_IN
17333: IFFALSE 17509
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17335: LD_ADDR_VAR 0 21
17339: PUSH
17340: LD_INT 22
17342: PUSH
17343: LD_VAR 0 11
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PPUSH
17352: CALL_OW 69
17356: PPUSH
17357: LD_VAR 0 13
17361: PPUSH
17362: CALL_OW 74
17366: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17367: LD_ADDR_VAR 0 22
17371: PUSH
17372: LD_INT 22
17374: PUSH
17375: LD_VAR 0 11
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 59
17389: PUSH
17390: EMPTY
17391: LIST
17392: PUSH
17393: LD_INT 21
17395: PUSH
17396: LD_INT 1
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 21
17405: PUSH
17406: LD_INT 2
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: PPUSH
17426: CALL_OW 69
17430: PPUSH
17431: LD_VAR 0 13
17435: PPUSH
17436: CALL_OW 74
17440: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17441: LD_VAR 0 13
17445: PPUSH
17446: LD_VAR 0 21
17450: PPUSH
17451: CALL_OW 296
17455: PUSH
17456: LD_INT 8
17458: PLUS
17459: PUSH
17460: LD_VAR 0 13
17464: PPUSH
17465: LD_VAR 0 22
17469: PPUSH
17470: CALL_OW 296
17474: LESS
17475: IFFALSE 17493
// begin ComAttackUnit ( i , target1 ) ;
17477: LD_VAR 0 13
17481: PPUSH
17482: LD_VAR 0 21
17486: PPUSH
17487: CALL_OW 115
// end else
17491: GO 17507
// begin ComAttackUnit ( i , target2 ) ;
17493: LD_VAR 0 13
17497: PPUSH
17498: LD_VAR 0 22
17502: PPUSH
17503: CALL_OW 115
// end ; end ;
17507: GO 17332
17509: POP
17510: POP
// until soldiersOK_list = [ ] ;
17511: LD_VAR 0 18
17515: PUSH
17516: EMPTY
17517: EQUAL
17518: IFFALSE 16896
// end ;
17520: LD_VAR 0 12
17524: RET
// export function TameApemans ; var i , j ; begin
17525: LD_INT 0
17527: PPUSH
17528: PPUSH
17529: PPUSH
// repeat wait ( 0 0$1 ) ;
17530: LD_INT 35
17532: PPUSH
17533: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
17537: LD_ADDR_VAR 0 2
17541: PUSH
17542: LD_INT 22
17544: PUSH
17545: LD_INT 2
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PUSH
17552: LD_INT 25
17554: PUSH
17555: LD_INT 4
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17649
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
17574: LD_ADDR_VAR 0 3
17578: PUSH
17579: LD_INT 5
17581: PPUSH
17582: LD_INT 22
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: LD_INT 25
17594: PUSH
17595: LD_INT 12
17597: PUSH
17598: EMPTY
17599: LIST
17600: LIST
17601: PUSH
17602: EMPTY
17603: LIST
17604: LIST
17605: PPUSH
17606: CALL_OW 70
17610: PUSH
17611: FOR_IN
17612: IFFALSE 17645
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
17614: LD_VAR 0 2
17618: PPUSH
17619: LD_VAR 0 3
17623: PPUSH
17624: CALL_OW 250
17628: PPUSH
17629: LD_VAR 0 3
17633: PPUSH
17634: CALL_OW 251
17638: PPUSH
17639: CALL_OW 191
// end ;
17643: GO 17611
17645: POP
17646: POP
// end ;
17647: GO 17571
17649: POP
17650: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
17651: LD_INT 22
17653: PUSH
17654: LD_INT 2
17656: PUSH
17657: EMPTY
17658: LIST
17659: LIST
17660: PUSH
17661: LD_INT 25
17663: PUSH
17664: LD_INT 4
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: PPUSH
17675: CALL_OW 69
17679: PUSH
17680: LD_INT 0
17682: EQUAL
17683: PUSH
17684: LD_INT 5
17686: PPUSH
17687: LD_INT 22
17689: PUSH
17690: LD_INT 0
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 25
17699: PUSH
17700: LD_INT 12
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: PPUSH
17711: CALL_OW 70
17715: PUSH
17716: LD_INT 0
17718: EQUAL
17719: OR
17720: IFFALSE 17530
// wait ( 0 0$30 ) ;
17722: LD_INT 1050
17724: PPUSH
17725: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
17729: LD_ADDR_VAR 0 2
17733: PUSH
17734: LD_INT 22
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: EMPTY
17741: LIST
17742: LIST
17743: PUSH
17744: LD_INT 25
17746: PUSH
17747: LD_INT 12
17749: PUSH
17750: EMPTY
17751: LIST
17752: LIST
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PPUSH
17758: CALL_OW 69
17762: PUSH
17763: FOR_IN
17764: IFFALSE 17828
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
17766: LD_VAR 0 2
17770: PPUSH
17771: LD_EXP 43
17775: PPUSH
17776: CALL_OW 250
17780: PPUSH
17781: LD_EXP 43
17785: PPUSH
17786: CALL_OW 251
17790: PPUSH
17791: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_INT 16
17802: PUSH
17803: LD_INT 15
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: LD_INT 1
17812: PPUSH
17813: LD_INT 2
17815: PPUSH
17816: CALL_OW 12
17820: ARRAY
17821: PPUSH
17822: CALL_OW 336
// end ;
17826: GO 17763
17828: POP
17829: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
17830: LD_ADDR_VAR 0 2
17834: PUSH
17835: LD_INT 22
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: EMPTY
17842: LIST
17843: LIST
17844: PUSH
17845: LD_INT 25
17847: PUSH
17848: LD_INT 4
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: EMPTY
17856: LIST
17857: LIST
17858: PPUSH
17859: CALL_OW 69
17863: PUSH
17864: FOR_IN
17865: IFFALSE 17911
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
17867: LD_VAR 0 2
17871: PPUSH
17872: LD_INT 22
17874: PUSH
17875: LD_INT 2
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: PUSH
17882: LD_INT 30
17884: PUSH
17885: LD_INT 8
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: EMPTY
17893: LIST
17894: LIST
17895: PPUSH
17896: CALL_OW 69
17900: PUSH
17901: LD_INT 1
17903: ARRAY
17904: PPUSH
17905: CALL_OW 120
17909: GO 17864
17911: POP
17912: POP
// end ;
17913: LD_VAR 0 1
17917: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
17918: LD_INT 0
17920: PPUSH
17921: PPUSH
17922: PPUSH
17923: PPUSH
17924: PPUSH
17925: PPUSH
17926: PPUSH
17927: PPUSH
17928: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
17929: LD_INT 22
17931: PUSH
17932: LD_VAR 0 1
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: LD_INT 21
17943: PUSH
17944: LD_INT 2
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PPUSH
17955: CALL_OW 69
17959: PUSH
17960: LD_VAR 0 3
17964: LESSEQUAL
17965: IFFALSE 18109
// for i = 1 to vehCount do
17967: LD_ADDR_VAR 0 10
17971: PUSH
17972: DOUBLE
17973: LD_INT 1
17975: DEC
17976: ST_TO_ADDR
17977: LD_VAR 0 3
17981: PUSH
17982: FOR_TO
17983: IFFALSE 18107
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
17985: LD_ADDR_VAR 0 12
17989: PUSH
17990: LD_VAR 0 5
17994: PUSH
17995: LD_INT 1
17997: PPUSH
17998: LD_VAR 0 5
18002: PPUSH
18003: CALL_OW 12
18007: ARRAY
18008: ST_TO_ADDR
// if randWeapon = 46 then
18009: LD_VAR 0 12
18013: PUSH
18014: LD_INT 46
18016: EQUAL
18017: IFFALSE 18062
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
18019: LD_VAR 0 2
18023: PPUSH
18024: LD_INT 24
18026: PPUSH
18027: LD_VAR 0 6
18031: PPUSH
18032: LD_VAR 0 7
18036: PUSH
18037: LD_INT 1
18039: PPUSH
18040: LD_VAR 0 7
18044: PPUSH
18045: CALL_OW 12
18049: ARRAY
18050: PPUSH
18051: LD_VAR 0 12
18055: PPUSH
18056: CALL_OW 185
18060: GO 18105
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
18062: LD_VAR 0 2
18066: PPUSH
18067: LD_VAR 0 8
18071: PPUSH
18072: LD_VAR 0 6
18076: PPUSH
18077: LD_VAR 0 7
18081: PUSH
18082: LD_INT 1
18084: PPUSH
18085: LD_VAR 0 7
18089: PPUSH
18090: CALL_OW 12
18094: ARRAY
18095: PPUSH
18096: LD_VAR 0 12
18100: PPUSH
18101: CALL_OW 185
// end ;
18105: GO 17982
18107: POP
18108: POP
// repeat wait ( 0 0$1 ) ;
18109: LD_INT 35
18111: PPUSH
18112: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
18116: LD_INT 22
18118: PUSH
18119: LD_VAR 0 1
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: PUSH
18128: LD_INT 21
18130: PUSH
18131: LD_INT 2
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: PUSH
18138: LD_INT 24
18140: PUSH
18141: LD_INT 250
18143: PUSH
18144: EMPTY
18145: LIST
18146: LIST
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: LIST
18152: PPUSH
18153: CALL_OW 69
18157: PUSH
18158: LD_VAR 0 3
18162: GREATEREQUAL
18163: IFFALSE 18109
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
18165: LD_INT 22
18167: PUSH
18168: LD_VAR 0 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 21
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 24
18189: PUSH
18190: LD_INT 250
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: PPUSH
18202: CALL_OW 69
18206: PUSH
18207: LD_VAR 0 3
18211: GREATEREQUAL
18212: IFFALSE 18555
// begin repeat begin wait ( 0 0$1 ) ;
18214: LD_INT 35
18216: PPUSH
18217: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
18221: LD_INT 22
18223: PUSH
18224: LD_VAR 0 1
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: LD_INT 21
18235: PUSH
18236: LD_INT 2
18238: PUSH
18239: EMPTY
18240: LIST
18241: LIST
18242: PUSH
18243: LD_INT 24
18245: PUSH
18246: LD_INT 651
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: EMPTY
18254: LIST
18255: LIST
18256: LIST
18257: PPUSH
18258: CALL_OW 69
18262: PUSH
18263: LD_INT 0
18265: GREATER
18266: IFFALSE 18494
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
18268: LD_ADDR_VAR 0 10
18272: PUSH
18273: LD_INT 22
18275: PUSH
18276: LD_VAR 0 1
18280: PUSH
18281: EMPTY
18282: LIST
18283: LIST
18284: PUSH
18285: LD_INT 21
18287: PUSH
18288: LD_INT 2
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PUSH
18295: LD_INT 24
18297: PUSH
18298: LD_INT 651
18300: PUSH
18301: EMPTY
18302: LIST
18303: LIST
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: LIST
18309: PPUSH
18310: CALL_OW 69
18314: PUSH
18315: FOR_IN
18316: IFFALSE 18492
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18318: LD_ADDR_VAR 0 16
18322: PUSH
18323: LD_INT 22
18325: PUSH
18326: LD_VAR 0 4
18330: PUSH
18331: EMPTY
18332: LIST
18333: LIST
18334: PPUSH
18335: CALL_OW 69
18339: PPUSH
18340: LD_VAR 0 10
18344: PPUSH
18345: CALL_OW 74
18349: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18350: LD_ADDR_VAR 0 17
18354: PUSH
18355: LD_INT 22
18357: PUSH
18358: LD_VAR 0 4
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: LD_INT 59
18372: PUSH
18373: EMPTY
18374: LIST
18375: PUSH
18376: LD_INT 21
18378: PUSH
18379: LD_INT 1
18381: PUSH
18382: EMPTY
18383: LIST
18384: LIST
18385: PUSH
18386: LD_INT 21
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: PUSH
18402: EMPTY
18403: LIST
18404: LIST
18405: PUSH
18406: EMPTY
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: PPUSH
18414: LD_VAR 0 10
18418: PPUSH
18419: CALL_OW 74
18423: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18424: LD_VAR 0 10
18428: PPUSH
18429: LD_VAR 0 16
18433: PPUSH
18434: CALL_OW 296
18438: PUSH
18439: LD_INT 8
18441: PLUS
18442: PUSH
18443: LD_VAR 0 10
18447: PPUSH
18448: LD_VAR 0 17
18452: PPUSH
18453: CALL_OW 296
18457: LESS
18458: IFFALSE 18476
// begin ComAttackUnit ( i , target1 ) ;
18460: LD_VAR 0 10
18464: PPUSH
18465: LD_VAR 0 16
18469: PPUSH
18470: CALL_OW 115
// end else
18474: GO 18490
// begin ComAttackUnit ( i , target2 ) ;
18476: LD_VAR 0 10
18480: PPUSH
18481: LD_VAR 0 17
18485: PPUSH
18486: CALL_OW 115
// end ; end ;
18490: GO 18315
18492: POP
18493: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
18494: LD_INT 22
18496: PUSH
18497: LD_VAR 0 1
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 21
18508: PUSH
18509: LD_INT 2
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PUSH
18525: LD_INT 0
18527: EQUAL
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_VAR 0 4
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: PPUSH
18544: CALL_OW 69
18548: PUSH
18549: LD_INT 0
18551: EQUAL
18552: OR
18553: IFFALSE 18214
// end ; end ;
18555: LD_VAR 0 9
18559: RET
// export function CreateMineField ( area ) ; var i , xx , enemy ; begin
18560: LD_INT 0
18562: PPUSH
18563: PPUSH
18564: PPUSH
18565: PPUSH
// enemy = 2 ;
18566: LD_ADDR_VAR 0 5
18570: PUSH
18571: LD_INT 2
18573: ST_TO_ADDR
// arabianMines := [ ] ;
18574: LD_ADDR_EXP 50
18578: PUSH
18579: EMPTY
18580: ST_TO_ADDR
// for i = 1 to 10 do
18581: LD_ADDR_VAR 0 3
18585: PUSH
18586: DOUBLE
18587: LD_INT 1
18589: DEC
18590: ST_TO_ADDR
18591: LD_INT 10
18593: PUSH
18594: FOR_TO
18595: IFFALSE 18670
// begin xx := RandHexArea ( area , false ) ;
18597: LD_ADDR_VAR 0 4
18601: PUSH
18602: LD_VAR 0 1
18606: PPUSH
18607: LD_INT 0
18609: PPUSH
18610: CALL_OW 16
18614: ST_TO_ADDR
// PlaceMine ( xx [ 1 ] , xx [ 2 ] , enemy , 0 ) ;
18615: LD_VAR 0 4
18619: PUSH
18620: LD_INT 1
18622: ARRAY
18623: PPUSH
18624: LD_VAR 0 4
18628: PUSH
18629: LD_INT 2
18631: ARRAY
18632: PPUSH
18633: LD_VAR 0 5
18637: PPUSH
18638: LD_INT 0
18640: PPUSH
18641: CALL_OW 454
// arabianMines := arabianMines ^ xx ;
18645: LD_ADDR_EXP 50
18649: PUSH
18650: LD_EXP 50
18654: PUSH
18655: LD_VAR 0 4
18659: ADD
18660: ST_TO_ADDR
// wait ( 0 0$1 ) ;
18661: LD_INT 35
18663: PPUSH
18664: CALL_OW 67
// end ;
18668: GO 18594
18670: POP
18671: POP
// end ;
18672: LD_VAR 0 2
18676: RET
// export function ExplodeMineField ( area ) ; var un , list , mine , dist , pom_list , mine_xy , first_mine_exploded ; begin
18677: LD_INT 0
18679: PPUSH
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
// if FilterUnitsInArea ( area , [ f_side , 1 ] ) > 0 and arabianMines > 0 then
18687: LD_VAR 0 1
18691: PPUSH
18692: LD_INT 22
18694: PUSH
18695: LD_INT 1
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PPUSH
18702: CALL_OW 70
18706: PUSH
18707: LD_INT 0
18709: GREATER
18710: PUSH
18711: LD_EXP 50
18715: PUSH
18716: LD_INT 0
18718: GREATER
18719: AND
18720: IFFALSE 19060
// begin list := FilterUnitsInArea ( area , [ f_side , 1 ] ) ;
18722: LD_ADDR_VAR 0 4
18726: PUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: LD_INT 22
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 70
18746: ST_TO_ADDR
// pom_list := [ ] ;
18747: LD_ADDR_VAR 0 7
18751: PUSH
18752: EMPTY
18753: ST_TO_ADDR
// for un in list do
18754: LD_ADDR_VAR 0 3
18758: PUSH
18759: LD_VAR 0 4
18763: PUSH
18764: FOR_IN
18765: IFFALSE 19058
// begin if GetType ( un ) = unit_human then
18767: LD_VAR 0 3
18771: PPUSH
18772: CALL_OW 247
18776: PUSH
18777: LD_INT 1
18779: EQUAL
18780: IFFALSE 18792
// dist := 3 else
18782: LD_ADDR_VAR 0 6
18786: PUSH
18787: LD_INT 3
18789: ST_TO_ADDR
18790: GO 18800
// dist := 4 ;
18792: LD_ADDR_VAR 0 6
18796: PUSH
18797: LD_INT 4
18799: ST_TO_ADDR
// for mine = 1 to ( arabianMines div 2 ) do
18800: LD_ADDR_VAR 0 5
18804: PUSH
18805: DOUBLE
18806: LD_INT 1
18808: DEC
18809: ST_TO_ADDR
18810: LD_EXP 50
18814: PUSH
18815: LD_INT 2
18817: DIV
18818: PUSH
18819: FOR_TO
18820: IFFALSE 19037
// if GetDistXY ( arabianMines [ ( mine * 2 ) - 1 ] , arabianMines [ ( mine * 2 ) ] , GetX ( un ) , GetY ( un ) ) < dist then
18822: LD_EXP 50
18826: PUSH
18827: LD_VAR 0 5
18831: PUSH
18832: LD_INT 2
18834: MUL
18835: PUSH
18836: LD_INT 1
18838: MINUS
18839: ARRAY
18840: PPUSH
18841: LD_EXP 50
18845: PUSH
18846: LD_VAR 0 5
18850: PUSH
18851: LD_INT 2
18853: MUL
18854: ARRAY
18855: PPUSH
18856: LD_VAR 0 3
18860: PPUSH
18861: CALL_OW 250
18865: PPUSH
18866: LD_VAR 0 3
18870: PPUSH
18871: CALL_OW 251
18875: PPUSH
18876: CALL_OW 298
18880: PUSH
18881: LD_VAR 0 6
18885: LESS
18886: IFFALSE 18989
// begin LaunchMineAtPos ( arabianMines [ ( mine * 2 ) - 1 ] , arabianMines [ ( mine * 2 ) ] , 1 ) ;
18888: LD_EXP 50
18892: PUSH
18893: LD_VAR 0 5
18897: PUSH
18898: LD_INT 2
18900: MUL
18901: PUSH
18902: LD_INT 1
18904: MINUS
18905: ARRAY
18906: PPUSH
18907: LD_EXP 50
18911: PUSH
18912: LD_VAR 0 5
18916: PUSH
18917: LD_INT 2
18919: MUL
18920: ARRAY
18921: PPUSH
18922: LD_INT 1
18924: PPUSH
18925: CALL_OW 456
// if not first_mine_exploded then
18929: LD_VAR 0 9
18933: NOT
18934: IFFALSE 18987
// begin first_mine_exploded := true ;
18936: LD_ADDR_VAR 0 9
18940: PUSH
18941: LD_INT 1
18943: ST_TO_ADDR
// mine_xy := [ arabianMines [ ( mine * 2 ) - 1 ] , arabianMines [ ( mine * 2 ) ] ] ;
18944: LD_ADDR_VAR 0 8
18948: PUSH
18949: LD_EXP 50
18953: PUSH
18954: LD_VAR 0 5
18958: PUSH
18959: LD_INT 2
18961: MUL
18962: PUSH
18963: LD_INT 1
18965: MINUS
18966: ARRAY
18967: PUSH
18968: LD_EXP 50
18972: PUSH
18973: LD_VAR 0 5
18977: PUSH
18978: LD_INT 2
18980: MUL
18981: ARRAY
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: ST_TO_ADDR
// end ; end else
18987: GO 19035
// pom_list := pom_list ^ arabianMines [ ( mine * 2 ) - 1 ] ^ arabianMines [ ( mine * 2 ) ] ;
18989: LD_ADDR_VAR 0 7
18993: PUSH
18994: LD_VAR 0 7
18998: PUSH
18999: LD_EXP 50
19003: PUSH
19004: LD_VAR 0 5
19008: PUSH
19009: LD_INT 2
19011: MUL
19012: PUSH
19013: LD_INT 1
19015: MINUS
19016: ARRAY
19017: ADD
19018: PUSH
19019: LD_EXP 50
19023: PUSH
19024: LD_VAR 0 5
19028: PUSH
19029: LD_INT 2
19031: MUL
19032: ARRAY
19033: ADD
19034: ST_TO_ADDR
19035: GO 18819
19037: POP
19038: POP
// arabianMines := pom_list ;
19039: LD_ADDR_EXP 50
19043: PUSH
19044: LD_VAR 0 7
19048: ST_TO_ADDR
// pom_list := [ ] ;
19049: LD_ADDR_VAR 0 7
19053: PUSH
19054: EMPTY
19055: ST_TO_ADDR
// end ;
19056: GO 18764
19058: POP
19059: POP
// end ; end ; end_of_file
19060: LD_VAR 0 2
19064: RET
// every 0 0$1 trigger russianAI = 1 do
19065: LD_EXP 39
19069: PUSH
19070: LD_INT 1
19072: EQUAL
19073: IFFALSE 19292
19075: GO 19077
19077: DISABLE
// begin enable ;
19078: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19079: LD_INT 3
19081: PPUSH
19082: LD_EXP 30
19086: PPUSH
19087: CALL 13536 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19091: LD_INT 3
19093: PPUSH
19094: LD_EXP 42
19098: PPUSH
19099: CALL 13882 0 2
// if ruPossition = 1 then
19103: LD_EXP 41
19107: PUSH
19108: LD_INT 1
19110: EQUAL
19111: IFFALSE 19166
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19113: LD_INT 3
19115: PPUSH
19116: LD_INT 13
19118: PPUSH
19119: LD_INT 10
19121: PPUSH
19122: LD_INT 22
19124: PUSH
19125: LD_INT 3
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 21
19134: PUSH
19135: LD_INT 3
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: LD_INT 30
19144: PUSH
19145: LD_INT 8
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: LIST
19156: PPUSH
19157: CALL_OW 69
19161: PPUSH
19162: CALL 14088 0 4
// if ruPossition = 2 then
19166: LD_EXP 41
19170: PUSH
19171: LD_INT 2
19173: EQUAL
19174: IFFALSE 19229
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19176: LD_INT 3
19178: PPUSH
19179: LD_INT 14
19181: PPUSH
19182: LD_INT 11
19184: PPUSH
19185: LD_INT 22
19187: PUSH
19188: LD_INT 3
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 21
19197: PUSH
19198: LD_INT 3
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: LD_INT 30
19207: PUSH
19208: LD_INT 8
19210: PUSH
19211: EMPTY
19212: LIST
19213: LIST
19214: PUSH
19215: EMPTY
19216: LIST
19217: LIST
19218: LIST
19219: PPUSH
19220: CALL_OW 69
19224: PPUSH
19225: CALL 14088 0 4
// if ruPossition = 3 then
19229: LD_EXP 41
19233: PUSH
19234: LD_INT 3
19236: EQUAL
19237: IFFALSE 19292
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19239: LD_INT 3
19241: PPUSH
19242: LD_INT 15
19244: PPUSH
19245: LD_INT 12
19247: PPUSH
19248: LD_INT 22
19250: PUSH
19251: LD_INT 3
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: LD_INT 21
19260: PUSH
19261: LD_INT 3
19263: PUSH
19264: EMPTY
19265: LIST
19266: LIST
19267: PUSH
19268: LD_INT 30
19270: PUSH
19271: LD_INT 8
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: LIST
19282: PPUSH
19283: CALL_OW 69
19287: PPUSH
19288: CALL 14088 0 4
// end ;
19292: END
// every 0 0$1 do
19293: GO 19295
19295: DISABLE
// begin enable ;
19296: ENABLE
// if ruPossition = 1 then
19297: LD_EXP 41
19301: PUSH
19302: LD_INT 1
19304: EQUAL
19305: IFFALSE 19317
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
19307: LD_INT 3
19309: PPUSH
19310: LD_INT 10
19312: PPUSH
19313: CALL 13173 0 2
// if ruPossition = 2 then
19317: LD_EXP 41
19321: PUSH
19322: LD_INT 2
19324: EQUAL
19325: IFFALSE 19337
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
19327: LD_INT 3
19329: PPUSH
19330: LD_INT 11
19332: PPUSH
19333: CALL 13173 0 2
// if ruPossition = 3 then
19337: LD_EXP 41
19341: PUSH
19342: LD_INT 3
19344: EQUAL
19345: IFFALSE 19357
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
19347: LD_INT 3
19349: PPUSH
19350: LD_INT 12
19352: PPUSH
19353: CALL 13173 0 2
// IntBazooka ( 3 , 1 ) ;
19357: LD_INT 3
19359: PPUSH
19360: LD_INT 1
19362: PPUSH
19363: CALL 11992 0 2
// IntBazooka ( 6 , 1 ) ;
19367: LD_INT 6
19369: PPUSH
19370: LD_INT 1
19372: PPUSH
19373: CALL 11992 0 2
// end ;
19377: END
// every 0 0$1 trigger ArabianTrait = 1 do
19378: LD_EXP 49
19382: PUSH
19383: LD_INT 1
19385: EQUAL
19386: IFFALSE 19432
19388: GO 19390
19390: DISABLE
// begin CreateMineField ( MineField1 ) ;
19391: LD_INT 24
19393: PPUSH
19394: CALL 18560 0 1
// if Difficulty > 1 then
19398: LD_OWVAR 67
19402: PUSH
19403: LD_INT 1
19405: GREATER
19406: IFFALSE 19415
// CreateMineField ( MineField2 ) ;
19408: LD_INT 25
19410: PPUSH
19411: CALL 18560 0 1
// if Difficulty > 2 then
19415: LD_OWVAR 67
19419: PUSH
19420: LD_INT 2
19422: GREATER
19423: IFFALSE 19432
// CreateMineField ( MineField3 ) ;
19425: LD_INT 26
19427: PPUSH
19428: CALL 18560 0 1
// end ;
19432: END
// every 0 0$1 trigger ArabianTrait = 1 do
19433: LD_EXP 49
19437: PUSH
19438: LD_INT 1
19440: EQUAL
19441: IFFALSE 19488
19443: GO 19445
19445: DISABLE
// begin enable ;
19446: ENABLE
// ExplodeMineField ( MineField1 ) ;
19447: LD_INT 24
19449: PPUSH
19450: CALL 18677 0 1
// if Difficulty > 1 then
19454: LD_OWVAR 67
19458: PUSH
19459: LD_INT 1
19461: GREATER
19462: IFFALSE 19471
// ExplodeMineField ( MineField2 ) ;
19464: LD_INT 25
19466: PPUSH
19467: CALL 18677 0 1
// if Difficulty > 2 then
19471: LD_OWVAR 67
19475: PUSH
19476: LD_INT 2
19478: GREATER
19479: IFFALSE 19488
// ExplodeMineField ( MineField3 ) ;
19481: LD_INT 26
19483: PPUSH
19484: CALL 18677 0 1
// end ;
19488: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19489: LD_EXP 39
19493: PUSH
19494: LD_INT 1
19496: EQUAL
19497: PUSH
19498: LD_EXP 35
19502: PPUSH
19503: CALL_OW 302
19507: AND
19508: PUSH
19509: LD_EXP 35
19513: PPUSH
19514: CALL_OW 255
19518: PUSH
19519: LD_INT 3
19521: EQUAL
19522: AND
19523: PUSH
19524: LD_INT 22
19526: PUSH
19527: LD_INT 3
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: PUSH
19534: LD_INT 21
19536: PUSH
19537: LD_INT 2
19539: PUSH
19540: EMPTY
19541: LIST
19542: LIST
19543: PUSH
19544: LD_INT 33
19546: PUSH
19547: LD_INT 3
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: LIST
19558: PPUSH
19559: CALL_OW 69
19563: PUSH
19564: LD_INT 0
19566: EQUAL
19567: AND
19568: IFFALSE 19776
19570: GO 19572
19572: DISABLE
// begin enable ;
19573: ENABLE
// if Difficulty = 1 then
19574: LD_OWVAR 67
19578: PUSH
19579: LD_INT 1
19581: EQUAL
19582: IFFALSE 19644
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
19584: LD_INT 3
19586: PPUSH
19587: LD_EXP 35
19591: PPUSH
19592: LD_INT 5
19594: PPUSH
19595: LD_INT 8
19597: PPUSH
19598: CALL_OW 12
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: LD_INT 43
19608: PUSH
19609: LD_INT 44
19611: PUSH
19612: LD_INT 45
19614: PUSH
19615: LD_INT 46
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: PPUSH
19624: LD_INT 1
19626: PPUSH
19627: LD_INT 1
19629: PUSH
19630: LD_INT 3
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PPUSH
19637: LD_INT 22
19639: PPUSH
19640: CALL 17918 0 8
// if Difficulty = 2 then
19644: LD_OWVAR 67
19648: PUSH
19649: LD_INT 2
19651: EQUAL
19652: IFFALSE 19710
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
19654: LD_INT 3
19656: PPUSH
19657: LD_EXP 35
19661: PPUSH
19662: LD_INT 6
19664: PPUSH
19665: LD_INT 8
19667: PPUSH
19668: CALL_OW 12
19672: PPUSH
19673: LD_INT 1
19675: PPUSH
19676: LD_INT 44
19678: PUSH
19679: LD_INT 45
19681: PUSH
19682: LD_INT 46
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: PPUSH
19690: LD_INT 1
19692: PPUSH
19693: LD_INT 1
19695: PUSH
19696: LD_INT 3
19698: PUSH
19699: EMPTY
19700: LIST
19701: LIST
19702: PPUSH
19703: LD_INT 22
19705: PPUSH
19706: CALL 17918 0 8
// if Difficulty = 3 then
19710: LD_OWVAR 67
19714: PUSH
19715: LD_INT 3
19717: EQUAL
19718: IFFALSE 19776
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
19720: LD_INT 3
19722: PPUSH
19723: LD_EXP 35
19727: PPUSH
19728: LD_INT 7
19730: PPUSH
19731: LD_INT 8
19733: PPUSH
19734: CALL_OW 12
19738: PPUSH
19739: LD_INT 1
19741: PPUSH
19742: LD_INT 44
19744: PUSH
19745: LD_INT 45
19747: PUSH
19748: LD_INT 46
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: LIST
19755: PPUSH
19756: LD_INT 1
19758: PPUSH
19759: LD_INT 1
19761: PUSH
19762: LD_INT 3
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PPUSH
19769: LD_INT 22
19771: PPUSH
19772: CALL 17918 0 8
// end ; end_of_file
19776: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
19777: LD_VAR 0 1
19781: PPUSH
19782: CALL_OW 255
19786: PUSH
19787: LD_INT 4
19789: EQUAL
19790: IFFALSE 19804
// SetBName ( building , epsilon ) ;
19792: LD_VAR 0 1
19796: PPUSH
19797: LD_STRING epsilon
19799: PPUSH
19800: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
19804: LD_VAR 0 1
19808: PPUSH
19809: CALL_OW 255
19813: PUSH
19814: LD_INT 1
19816: EQUAL
19817: PUSH
19818: LD_VAR 0 1
19822: PPUSH
19823: CALL_OW 266
19827: PUSH
19828: LD_INT 0
19830: EQUAL
19831: AND
19832: IFFALSE 19846
// SetBName ( building , epsilon ) ;
19834: LD_VAR 0 1
19838: PPUSH
19839: LD_STRING epsilon
19841: PPUSH
19842: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
19846: LD_VAR 0 1
19850: PPUSH
19851: CALL_OW 255
19855: PUSH
19856: LD_INT 3
19858: EQUAL
19859: PUSH
19860: LD_VAR 0 1
19864: PPUSH
19865: CALL_OW 266
19869: PUSH
19870: LD_INT 0
19872: EQUAL
19873: AND
19874: IFFALSE 19888
// SetBName ( building , chuikov ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_STRING chuikov
19883: PPUSH
19884: CALL_OW 500
// if GetSide ( building ) = 2 then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 255
19897: PUSH
19898: LD_INT 2
19900: EQUAL
19901: IFFALSE 19957
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 266
19912: PUSH
19913: LD_INT 6
19915: EQUAL
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: CALL_OW 266
19926: PUSH
19927: LD_INT 9
19929: EQUAL
19930: OR
19931: IFFALSE 19957
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
19933: LD_VAR 0 1
19937: PPUSH
19938: LD_INT 10
19940: PPUSH
19941: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
19945: LD_VAR 0 1
19949: PPUSH
19950: LD_INT 11
19952: PPUSH
19953: CALL_OW 207
// end ; end ; end ;
19957: PPOPN 2
19959: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
19960: LD_INT 0
19962: PPUSH
19963: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
19964: LD_VAR 0 1
19968: PUSH
19969: LD_INT 22
19971: PUSH
19972: LD_INT 3
19974: PUSH
19975: EMPTY
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 23
19981: PUSH
19982: LD_INT 3
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: LD_INT 21
19991: PUSH
19992: LD_INT 2
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: EMPTY
20000: LIST
20001: LIST
20002: LIST
20003: PPUSH
20004: CALL_OW 69
20008: IN
20009: PUSH
20010: LD_EXP 58
20014: NOT
20015: AND
20016: IFFALSE 20047
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20018: LD_ADDR_EXP 58
20022: PUSH
20023: LD_VAR 0 1
20027: PPUSH
20028: CALL_OW 250
20032: PUSH
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 251
20042: PUSH
20043: EMPTY
20044: LIST
20045: LIST
20046: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetType ( un ) = unit_vehicle and GetControl ( un ) = control_manual then
20047: LD_VAR 0 1
20051: PPUSH
20052: CALL_OW 255
20056: PUSH
20057: LD_INT 3
20059: EQUAL
20060: PUSH
20061: LD_VAR 0 1
20065: PPUSH
20066: CALL_OW 247
20070: PUSH
20071: LD_INT 2
20073: EQUAL
20074: AND
20075: PUSH
20076: LD_VAR 0 1
20080: PPUSH
20081: CALL_OW 263
20085: PUSH
20086: LD_INT 1
20088: EQUAL
20089: AND
20090: IFFALSE 20137
// begin tmpMeh = UnitsInside ( un ) ;
20092: LD_ADDR_VAR 0 3
20096: PUSH
20097: LD_VAR 0 1
20101: PPUSH
20102: CALL_OW 313
20106: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
20107: LD_VAR 0 3
20111: PPUSH
20112: CALL_OW 121
// wait ( 0 0$01 ) ;
20116: LD_INT 35
20118: PPUSH
20119: CALL_OW 67
// ComEnterUnit ( tmpMeh , ruFab ) ;
20123: LD_VAR 0 3
20127: PPUSH
20128: LD_EXP 35
20132: PPUSH
20133: CALL_OW 120
// end ; end ;
20137: PPOPN 3
20139: END
// on BuildingComplete ( building ) do var i ;
20140: LD_INT 0
20142: PPUSH
// begin if GetSide ( building ) = 1 then
20143: LD_VAR 0 1
20147: PPUSH
20148: CALL_OW 255
20152: PUSH
20153: LD_INT 1
20155: EQUAL
20156: IFFALSE 20416
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 or GetBType ( building ) = 11 then
20158: LD_VAR 0 1
20162: PPUSH
20163: CALL_OW 266
20167: PUSH
20168: LD_INT 26
20170: EQUAL
20171: PUSH
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 266
20181: PUSH
20182: LD_INT 27
20184: EQUAL
20185: OR
20186: PUSH
20187: LD_VAR 0 1
20191: PPUSH
20192: CALL_OW 266
20196: PUSH
20197: LD_INT 28
20199: EQUAL
20200: OR
20201: PUSH
20202: LD_VAR 0 1
20206: PPUSH
20207: CALL_OW 266
20211: PUSH
20212: LD_INT 11
20214: EQUAL
20215: OR
20216: IFFALSE 20416
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_and , [ f_btype , b_lab_siberium ] ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
20218: LD_INT 22
20220: PUSH
20221: LD_INT 1
20223: PUSH
20224: EMPTY
20225: LIST
20226: LIST
20227: PUSH
20228: LD_INT 2
20230: PUSH
20231: LD_INT 30
20233: PUSH
20234: LD_INT 7
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 30
20243: PUSH
20244: LD_INT 8
20246: PUSH
20247: EMPTY
20248: LIST
20249: LIST
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: LIST
20255: PUSH
20256: LD_INT 1
20258: PUSH
20259: LD_INT 30
20261: PUSH
20262: LD_INT 11
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: EMPTY
20270: LIST
20271: LIST
20272: PUSH
20273: LD_INT 1
20275: PUSH
20276: LD_INT 2
20278: PUSH
20279: LD_INT 30
20281: PUSH
20282: LD_INT 26
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: PUSH
20289: LD_INT 30
20291: PUSH
20292: LD_INT 27
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PUSH
20299: LD_INT 30
20301: PUSH
20302: LD_INT 28
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: PUSH
20309: EMPTY
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: PPUSH
20325: CALL_OW 69
20329: PUSH
20330: LD_INT 0
20332: GREATER
20333: PUSH
20334: LD_INT 22
20336: PUSH
20337: LD_INT 1
20339: PUSH
20340: EMPTY
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: LD_INT 30
20349: PUSH
20350: LD_INT 26
20352: PUSH
20353: EMPTY
20354: LIST
20355: LIST
20356: PUSH
20357: LD_INT 30
20359: PUSH
20360: LD_INT 27
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: PUSH
20367: LD_INT 30
20369: PUSH
20370: LD_INT 28
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: PUSH
20377: EMPTY
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PPUSH
20387: CALL_OW 69
20391: PUSH
20392: LD_INT 0
20394: GREATER
20395: AND
20396: PUSH
20397: LD_EXP 61
20401: PUSH
20402: LD_INT 0
20404: EQUAL
20405: AND
20406: IFFALSE 20416
// eventVar1 = 1 ;
20408: LD_ADDR_EXP 61
20412: PUSH
20413: LD_INT 1
20415: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
20416: LD_VAR 0 1
20420: PPUSH
20421: CALL_OW 255
20425: PUSH
20426: LD_INT 3
20428: EQUAL
20429: IFFALSE 20909
// begin if GetBType ( building ) = b_depot then
20431: LD_VAR 0 1
20435: PPUSH
20436: CALL_OW 266
20440: PUSH
20441: LD_INT 0
20443: EQUAL
20444: IFFALSE 20516
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
20446: LD_VAR 0 1
20450: PPUSH
20451: CALL_OW 274
20455: PPUSH
20456: LD_INT 1
20458: PPUSH
20459: LD_INT 5000
20461: PPUSH
20462: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
20466: LD_VAR 0 1
20470: PPUSH
20471: CALL_OW 274
20475: PPUSH
20476: LD_INT 2
20478: PPUSH
20479: LD_INT 5000
20481: PPUSH
20482: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
20486: LD_VAR 0 1
20490: PPUSH
20491: CALL_OW 274
20495: PPUSH
20496: LD_INT 3
20498: PPUSH
20499: LD_INT 5000
20501: PPUSH
20502: CALL_OW 277
// ruDepot = building ;
20506: LD_ADDR_EXP 30
20510: PUSH
20511: LD_VAR 0 1
20515: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 266
20525: PUSH
20526: LD_INT 0
20528: EQUAL
20529: PUSH
20530: LD_VAR 0 1
20534: PPUSH
20535: CALL_OW 266
20539: PUSH
20540: LD_INT 2
20542: EQUAL
20543: OR
20544: PUSH
20545: LD_VAR 0 1
20549: PPUSH
20550: CALL_OW 266
20554: PUSH
20555: LD_INT 4
20557: EQUAL
20558: OR
20559: IFFALSE 20570
// ComUpgrade ( building ) ;
20561: LD_VAR 0 1
20565: PPUSH
20566: CALL_OW 146
// if GetBType ( building ) = b_lab then
20570: LD_VAR 0 1
20574: PPUSH
20575: CALL_OW 266
20579: PUSH
20580: LD_INT 6
20582: EQUAL
20583: IFFALSE 20786
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
20585: LD_INT 22
20587: PUSH
20588: LD_INT 3
20590: PUSH
20591: EMPTY
20592: LIST
20593: LIST
20594: PUSH
20595: LD_INT 30
20597: PUSH
20598: LD_INT 8
20600: PUSH
20601: EMPTY
20602: LIST
20603: LIST
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PPUSH
20609: CALL_OW 69
20613: PUSH
20614: LD_INT 0
20616: EQUAL
20617: IFFALSE 20655
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20619: LD_VAR 0 1
20623: PPUSH
20624: LD_INT 10
20626: PPUSH
20627: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
20631: LD_VAR 0 1
20635: PPUSH
20636: LD_INT 12
20638: PPUSH
20639: CALL_OW 207
// ruLab1 = building ;
20643: LD_ADDR_EXP 31
20647: PUSH
20648: LD_VAR 0 1
20652: ST_TO_ADDR
// end else
20653: GO 20689
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
20655: LD_VAR 0 1
20659: PPUSH
20660: LD_INT 11
20662: PPUSH
20663: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
20667: LD_VAR 0 1
20671: PPUSH
20672: LD_INT 14
20674: PPUSH
20675: CALL_OW 207
// ruLab2 = building ;
20679: LD_ADDR_EXP 32
20683: PUSH
20684: LD_VAR 0 1
20688: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
20689: LD_INT 3
20691: PPUSH
20692: LD_VAR 0 1
20696: PPUSH
20697: LD_INT 3
20699: PPUSH
20700: CALL 13088 0 3
// if ruDestroyedBuildings > 0 then
20704: LD_EXP 42
20708: PUSH
20709: LD_INT 0
20711: GREATER
20712: IFFALSE 20786
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20714: LD_ADDR_EXP 42
20718: PUSH
20719: LD_EXP 42
20723: PPUSH
20724: LD_INT 1
20726: PPUSH
20727: CALL_OW 3
20731: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20732: LD_ADDR_EXP 42
20736: PUSH
20737: LD_EXP 42
20741: PPUSH
20742: LD_INT 1
20744: PPUSH
20745: CALL_OW 3
20749: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20750: LD_ADDR_EXP 42
20754: PUSH
20755: LD_EXP 42
20759: PPUSH
20760: LD_INT 1
20762: PPUSH
20763: CALL_OW 3
20767: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
20768: LD_ADDR_EXP 42
20772: PUSH
20773: LD_EXP 42
20777: PPUSH
20778: LD_INT 1
20780: PPUSH
20781: CALL_OW 3
20785: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
20786: LD_VAR 0 1
20790: PPUSH
20791: CALL_OW 266
20795: PUSH
20796: LD_INT 32
20798: EQUAL
20799: IFFALSE 20836
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20801: LD_VAR 0 1
20805: PPUSH
20806: LD_INT 44
20808: PUSH
20809: LD_INT 45
20811: PUSH
20812: LD_INT 46
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 1
20822: PPUSH
20823: LD_INT 3
20825: PPUSH
20826: CALL_OW 12
20830: ARRAY
20831: PPUSH
20832: CALL_OW 208
// if GetBType ( building ) = b_turret then
20836: LD_VAR 0 1
20840: PPUSH
20841: CALL_OW 266
20845: PUSH
20846: LD_INT 33
20848: EQUAL
20849: IFFALSE 20886
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
20851: LD_VAR 0 1
20855: PPUSH
20856: LD_INT 44
20858: PUSH
20859: LD_INT 46
20861: PUSH
20862: LD_INT 46
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: LIST
20869: PUSH
20870: LD_INT 1
20872: PPUSH
20873: LD_INT 3
20875: PPUSH
20876: CALL_OW 12
20880: ARRAY
20881: PPUSH
20882: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
20886: LD_VAR 0 1
20890: PPUSH
20891: CALL_OW 266
20895: PUSH
20896: LD_INT 24
20898: EQUAL
20899: IFFALSE 20909
// russianAI = 1 ;
20901: LD_ADDR_EXP 39
20905: PUSH
20906: LD_INT 1
20908: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 255
20918: PUSH
20919: LD_INT 2
20921: EQUAL
20922: IFFALSE 21480
// begin if GetBType ( building ) = b_depot then
20924: LD_VAR 0 1
20928: PPUSH
20929: CALL_OW 266
20933: PUSH
20934: LD_INT 0
20936: EQUAL
20937: IFFALSE 21023
// begin arDepot = building ;
20939: LD_ADDR_EXP 43
20943: PUSH
20944: LD_VAR 0 1
20948: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
20949: LD_INT 38
20951: PUSH
20952: LD_INT 47
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: PPUSH
20959: LD_INT 71
20961: PPUSH
20962: LD_INT 19
20964: PPUSH
20965: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
20969: LD_VAR 0 1
20973: PPUSH
20974: CALL_OW 274
20978: PPUSH
20979: LD_INT 1
20981: PPUSH
20982: LD_INT 500
20984: PPUSH
20985: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
20989: LD_VAR 0 1
20993: PPUSH
20994: CALL_OW 274
20998: PPUSH
20999: LD_INT 3
21001: PPUSH
21002: LD_INT 30
21004: PPUSH
21005: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21009: LD_EXP 26
21013: PPUSH
21014: LD_EXP 43
21018: PPUSH
21019: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 266
21032: PUSH
21033: LD_INT 6
21035: EQUAL
21036: PUSH
21037: LD_VAR 0 1
21041: PPUSH
21042: CALL_OW 266
21046: PUSH
21047: LD_INT 9
21049: EQUAL
21050: OR
21051: IFFALSE 21102
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21053: LD_VAR 0 1
21057: PPUSH
21058: LD_INT 10
21060: PPUSH
21061: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21065: LD_VAR 0 1
21069: PPUSH
21070: LD_INT 11
21072: PPUSH
21073: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21077: LD_INT 2
21079: PPUSH
21080: LD_VAR 0 1
21084: PPUSH
21085: LD_INT 2
21087: PPUSH
21088: CALL 13088 0 3
// arLab = building ;
21092: LD_ADDR_EXP 44
21096: PUSH
21097: LD_VAR 0 1
21101: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21102: LD_VAR 0 1
21106: PPUSH
21107: CALL_OW 266
21111: PUSH
21112: LD_INT 2
21114: EQUAL
21115: PUSH
21116: LD_VAR 0 1
21120: PPUSH
21121: CALL_OW 266
21125: PUSH
21126: LD_INT 4
21128: EQUAL
21129: OR
21130: IFFALSE 21141
// ComUpgrade ( building ) ;
21132: LD_VAR 0 1
21136: PPUSH
21137: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
21141: LD_VAR 0 1
21145: PPUSH
21146: CALL_OW 266
21150: PUSH
21151: LD_INT 31
21153: EQUAL
21154: PUSH
21155: LD_INT 22
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 25
21167: PUSH
21168: LD_INT 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 3
21177: PUSH
21178: LD_INT 54
21180: PUSH
21181: EMPTY
21182: LIST
21183: PUSH
21184: LD_INT 3
21186: PUSH
21187: LD_INT 60
21189: PUSH
21190: EMPTY
21191: LIST
21192: PUSH
21193: EMPTY
21194: LIST
21195: LIST
21196: PUSH
21197: EMPTY
21198: LIST
21199: LIST
21200: LIST
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: LIST
21206: PPUSH
21207: CALL_OW 69
21211: PUSH
21212: LD_INT 0
21214: GREATER
21215: AND
21216: IFFALSE 21288
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
21218: LD_INT 22
21220: PUSH
21221: LD_INT 2
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: PUSH
21228: LD_INT 25
21230: PUSH
21231: LD_INT 1
21233: PUSH
21234: EMPTY
21235: LIST
21236: LIST
21237: PUSH
21238: LD_INT 3
21240: PUSH
21241: LD_INT 54
21243: PUSH
21244: EMPTY
21245: LIST
21246: PUSH
21247: LD_INT 3
21249: PUSH
21250: LD_INT 60
21252: PUSH
21253: EMPTY
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: LIST
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: LIST
21269: PPUSH
21270: CALL_OW 69
21274: PUSH
21275: LD_INT 1
21277: ARRAY
21278: PPUSH
21279: LD_VAR 0 1
21283: PPUSH
21284: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
21288: LD_VAR 0 1
21292: PPUSH
21293: CALL_OW 266
21297: PUSH
21298: LD_INT 27
21300: EQUAL
21301: IFFALSE 21480
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21303: LD_INT 22
21305: PUSH
21306: LD_INT 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 30
21315: PUSH
21316: LD_INT 27
21318: PUSH
21319: EMPTY
21320: LIST
21321: LIST
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: PUSH
21332: LD_INT 2
21334: EQUAL
21335: IFFALSE 21480
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
21337: LD_ADDR_VAR 0 2
21341: PUSH
21342: LD_INT 22
21344: PUSH
21345: LD_INT 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 21
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 25
21364: PUSH
21365: LD_INT 2
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: PPUSH
21377: CALL_OW 69
21381: PUSH
21382: LD_INT 1
21384: ARRAY
21385: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
21386: LD_VAR 0 2
21390: PPUSH
21391: LD_INT 92
21393: PPUSH
21394: LD_INT 34
21396: PPUSH
21397: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 82
21408: PPUSH
21409: LD_INT 57
21411: PPUSH
21412: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
21416: LD_VAR 0 2
21420: PPUSH
21421: LD_INT 36
21423: PPUSH
21424: LD_INT 28
21426: PPUSH
21427: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
21431: LD_INT 22
21433: PUSH
21434: LD_INT 2
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: PUSH
21441: LD_INT 21
21443: PUSH
21444: LD_INT 1
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 25
21453: PUSH
21454: LD_INT 2
21456: PUSH
21457: EMPTY
21458: LIST
21459: LIST
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: LIST
21465: PPUSH
21466: CALL_OW 69
21470: PPUSH
21471: LD_EXP 43
21475: PPUSH
21476: CALL_OW 180
// end ; end ; end ;
21480: PPOPN 2
21482: END
// on UpgradeComplete ( building ) do var i ;
21483: LD_INT 0
21485: PPUSH
// begin if GetSide ( building ) = 1 then
21486: LD_VAR 0 1
21490: PPUSH
21491: CALL_OW 255
21495: PUSH
21496: LD_INT 1
21498: EQUAL
21499: IFFALSE 21699
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
21501: LD_INT 22
21503: PUSH
21504: LD_INT 1
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: PUSH
21511: LD_INT 2
21513: PUSH
21514: LD_INT 30
21516: PUSH
21517: LD_INT 7
21519: PUSH
21520: EMPTY
21521: LIST
21522: LIST
21523: PUSH
21524: LD_INT 30
21526: PUSH
21527: LD_INT 8
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 1
21536: PUSH
21537: LD_INT 30
21539: PUSH
21540: LD_INT 11
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: LD_INT 2
21552: PUSH
21553: LD_INT 30
21555: PUSH
21556: LD_INT 26
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: LD_INT 30
21565: PUSH
21566: LD_INT 27
21568: PUSH
21569: EMPTY
21570: LIST
21571: LIST
21572: PUSH
21573: LD_INT 30
21575: PUSH
21576: LD_INT 28
21578: PUSH
21579: EMPTY
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: LIST
21587: LIST
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: LIST
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PPUSH
21608: CALL_OW 69
21612: PUSH
21613: LD_INT 0
21615: GREATER
21616: PUSH
21617: LD_INT 22
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 2
21629: PUSH
21630: LD_INT 30
21632: PUSH
21633: LD_INT 26
21635: PUSH
21636: EMPTY
21637: LIST
21638: LIST
21639: PUSH
21640: LD_INT 30
21642: PUSH
21643: LD_INT 27
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 30
21652: PUSH
21653: LD_INT 28
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PPUSH
21670: CALL_OW 69
21674: PUSH
21675: LD_INT 0
21677: GREATER
21678: AND
21679: PUSH
21680: LD_EXP 61
21684: PUSH
21685: LD_INT 0
21687: EQUAL
21688: AND
21689: IFFALSE 21699
// eventVar1 = 1 ;
21691: LD_ADDR_EXP 61
21695: PUSH
21696: LD_INT 1
21698: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 255
21708: PUSH
21709: LD_INT 2
21711: EQUAL
21712: IFFALSE 21817
// begin if GetBType ( building ) = b_barracks then
21714: LD_VAR 0 1
21718: PPUSH
21719: CALL_OW 266
21723: PUSH
21724: LD_INT 5
21726: EQUAL
21727: IFFALSE 21817
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
21729: LD_ADDR_VAR 0 2
21733: PUSH
21734: LD_INT 22
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: EMPTY
21741: LIST
21742: LIST
21743: PUSH
21744: LD_INT 25
21746: PUSH
21747: LD_INT 1
21749: PUSH
21750: EMPTY
21751: LIST
21752: LIST
21753: PUSH
21754: LD_INT 3
21756: PUSH
21757: LD_INT 54
21759: PUSH
21760: EMPTY
21761: LIST
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: EMPTY
21768: LIST
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: PUSH
21777: LD_EXP 26
21781: PUSH
21782: EMPTY
21783: LIST
21784: DIFF
21785: PUSH
21786: FOR_IN
21787: IFFALSE 21805
// ComEnterUnit ( i , building ) ;
21789: LD_VAR 0 2
21793: PPUSH
21794: LD_VAR 0 1
21798: PPUSH
21799: CALL_OW 120
21803: GO 21786
21805: POP
21806: POP
// arArm = building ;
21807: LD_ADDR_EXP 45
21811: PUSH
21812: LD_VAR 0 1
21816: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
21817: LD_VAR 0 1
21821: PPUSH
21822: CALL_OW 255
21826: PUSH
21827: LD_INT 3
21829: EQUAL
21830: IFFALSE 22303
// begin if GetBType ( building ) = b_factory then
21832: LD_VAR 0 1
21836: PPUSH
21837: CALL_OW 266
21841: PUSH
21842: LD_INT 3
21844: EQUAL
21845: IFFALSE 21912
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
21847: LD_ADDR_VAR 0 2
21851: PUSH
21852: LD_INT 22
21854: PUSH
21855: LD_INT 3
21857: PUSH
21858: EMPTY
21859: LIST
21860: LIST
21861: PUSH
21862: LD_INT 25
21864: PUSH
21865: LD_INT 3
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: EMPTY
21873: LIST
21874: LIST
21875: PPUSH
21876: CALL_OW 69
21880: PUSH
21881: FOR_IN
21882: IFFALSE 21900
// ComEnterUnit ( i , building ) ;
21884: LD_VAR 0 2
21888: PPUSH
21889: LD_VAR 0 1
21893: PPUSH
21894: CALL_OW 120
21898: GO 21881
21900: POP
21901: POP
// ruFab = building ;
21902: LD_ADDR_EXP 35
21906: PUSH
21907: LD_VAR 0 1
21911: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
21912: LD_INT 22
21914: PUSH
21915: LD_INT 3
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 21
21924: PUSH
21925: LD_INT 3
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 30
21934: PUSH
21935: LD_INT 8
21937: PUSH
21938: EMPTY
21939: LIST
21940: LIST
21941: PUSH
21942: EMPTY
21943: LIST
21944: LIST
21945: LIST
21946: PPUSH
21947: CALL_OW 69
21951: PUSH
21952: LD_INT 2
21954: EQUAL
21955: IFFALSE 22163
// begin for i = 1 to 2 do
21957: LD_ADDR_VAR 0 2
21961: PUSH
21962: DOUBLE
21963: LD_INT 1
21965: DEC
21966: ST_TO_ADDR
21967: LD_INT 2
21969: PUSH
21970: FOR_TO
21971: IFFALSE 22058
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
21973: LD_INT 22
21975: PUSH
21976: LD_INT 3
21978: PUSH
21979: EMPTY
21980: LIST
21981: LIST
21982: PUSH
21983: LD_INT 25
21985: PUSH
21986: LD_INT 4
21988: PUSH
21989: EMPTY
21990: LIST
21991: LIST
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: PPUSH
21997: CALL_OW 69
22001: PUSH
22002: LD_VAR 0 2
22006: ARRAY
22007: PPUSH
22008: LD_INT 22
22010: PUSH
22011: LD_INT 3
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 21
22020: PUSH
22021: LD_INT 3
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: LD_INT 30
22030: PUSH
22031: LD_INT 8
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: EMPTY
22039: LIST
22040: LIST
22041: LIST
22042: PPUSH
22043: CALL_OW 69
22047: PUSH
22048: LD_INT 1
22050: ARRAY
22051: PPUSH
22052: CALL_OW 120
22056: GO 21970
22058: POP
22059: POP
// for i = 3 to 4 do
22060: LD_ADDR_VAR 0 2
22064: PUSH
22065: DOUBLE
22066: LD_INT 3
22068: DEC
22069: ST_TO_ADDR
22070: LD_INT 4
22072: PUSH
22073: FOR_TO
22074: IFFALSE 22161
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
22076: LD_INT 22
22078: PUSH
22079: LD_INT 3
22081: PUSH
22082: EMPTY
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 25
22088: PUSH
22089: LD_INT 4
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PPUSH
22100: CALL_OW 69
22104: PUSH
22105: LD_VAR 0 2
22109: ARRAY
22110: PPUSH
22111: LD_INT 22
22113: PUSH
22114: LD_INT 3
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: LD_INT 21
22123: PUSH
22124: LD_INT 3
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: LD_INT 30
22133: PUSH
22134: LD_INT 8
22136: PUSH
22137: EMPTY
22138: LIST
22139: LIST
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: CALL_OW 69
22150: PUSH
22151: LD_INT 2
22153: ARRAY
22154: PPUSH
22155: CALL_OW 120
22159: GO 22073
22161: POP
22162: POP
// end ; if GetBType ( building ) = b_barracks then
22163: LD_VAR 0 1
22167: PPUSH
22168: CALL_OW 266
22172: PUSH
22173: LD_INT 5
22175: EQUAL
22176: IFFALSE 22303
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
22178: LD_ADDR_VAR 0 2
22182: PUSH
22183: LD_INT 22
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 25
22195: PUSH
22196: LD_INT 1
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: LD_INT 3
22205: PUSH
22206: LD_INT 54
22208: PUSH
22209: EMPTY
22210: LIST
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: PUSH
22226: FOR_IN
22227: IFFALSE 22245
// ComEnterUnit ( i , building ) ;
22229: LD_VAR 0 2
22233: PPUSH
22234: LD_VAR 0 1
22238: PPUSH
22239: CALL_OW 120
22243: GO 22226
22245: POP
22246: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
22247: LD_INT 22
22249: PUSH
22250: LD_INT 3
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 30
22259: PUSH
22260: LD_INT 5
22262: PUSH
22263: EMPTY
22264: LIST
22265: LIST
22266: PUSH
22267: EMPTY
22268: LIST
22269: LIST
22270: PPUSH
22271: CALL_OW 69
22275: PUSH
22276: LD_INT 0
22278: EQUAL
22279: IFFALSE 22293
// ruArm1 = building else
22281: LD_ADDR_EXP 33
22285: PUSH
22286: LD_VAR 0 1
22290: ST_TO_ADDR
22291: GO 22303
// ruArm2 = building ;
22293: LD_ADDR_EXP 34
22297: PUSH
22298: LD_VAR 0 1
22302: ST_TO_ADDR
// end ; end ; end ;
22303: PPOPN 2
22305: END
// on EnterBuilding ( building , human ) do var rnd ;
22306: LD_INT 0
22308: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
22309: LD_VAR 0 2
22313: PPUSH
22314: CALL_OW 255
22318: PUSH
22319: LD_INT 2
22321: EQUAL
22322: PUSH
22323: LD_VAR 0 2
22327: PPUSH
22328: CALL_OW 257
22332: PUSH
22333: LD_INT 1
22335: EQUAL
22336: AND
22337: PUSH
22338: LD_VAR 0 1
22342: PUSH
22343: LD_EXP 45
22347: EQUAL
22348: AND
22349: IFFALSE 22396
// begin wait ( 0 0$1 ) ;
22351: LD_INT 35
22353: PPUSH
22354: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
22358: LD_ADDR_VAR 0 3
22362: PUSH
22363: LD_INT 1
22365: PPUSH
22366: LD_INT 100
22368: PPUSH
22369: CALL_OW 12
22373: ST_TO_ADDR
// if rnd > 50 then
22374: LD_VAR 0 3
22378: PUSH
22379: LD_INT 50
22381: GREATER
22382: IFFALSE 22396
// SetClass ( human , class_mortar ) ;
22384: LD_VAR 0 2
22388: PPUSH
22389: LD_INT 8
22391: PPUSH
22392: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
22396: LD_VAR 0 2
22400: PPUSH
22401: CALL_OW 255
22405: PUSH
22406: LD_INT 3
22408: EQUAL
22409: PUSH
22410: LD_VAR 0 2
22414: PPUSH
22415: CALL_OW 257
22419: PUSH
22420: LD_INT 1
22422: EQUAL
22423: AND
22424: PUSH
22425: LD_VAR 0 1
22429: PUSH
22430: LD_EXP 33
22434: EQUAL
22435: PUSH
22436: LD_VAR 0 1
22440: PUSH
22441: LD_EXP 34
22445: EQUAL
22446: OR
22447: PUSH
22448: EMPTY
22449: LIST
22450: AND
22451: IFFALSE 22472
// begin wait ( 0 0$1 ) ;
22453: LD_INT 35
22455: PPUSH
22456: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
22460: LD_VAR 0 2
22464: PPUSH
22465: LD_INT 9
22467: PPUSH
22468: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
22472: LD_VAR 0 2
22476: PPUSH
22477: CALL_OW 255
22481: PUSH
22482: LD_INT 3
22484: EQUAL
22485: PUSH
22486: LD_VAR 0 2
22490: PPUSH
22491: CALL_OW 257
22495: PUSH
22496: LD_INT 9
22498: EQUAL
22499: AND
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL_OW 266
22510: PUSH
22511: LD_INT 32
22513: EQUAL
22514: AND
22515: IFFALSE 22536
// begin wait ( 0 0$1 ) ;
22517: LD_INT 35
22519: PPUSH
22520: CALL_OW 67
// SetClass ( human , 1 ) ;
22524: LD_VAR 0 2
22528: PPUSH
22529: LD_INT 1
22531: PPUSH
22532: CALL_OW 336
// end ; end ;
22536: PPOPN 3
22538: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
22539: LD_VAR 0 1
22543: PUSH
22544: LD_INT 1
22546: EQUAL
22547: PUSH
22548: LD_VAR 0 2
22552: PUSH
22553: LD_INT 2
22555: EQUAL
22556: AND
22557: PUSH
22558: LD_INT 1
22560: PPUSH
22561: LD_INT 2
22563: PPUSH
22564: CALL_OW 81
22568: PUSH
22569: LD_INT 1
22571: EQUAL
22572: AND
22573: IFFALSE 22594
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
22575: LD_EXP 24
22579: PPUSH
22580: LD_STRING D6b-Pow-1
22582: PPUSH
22583: CALL_OW 94
// YouLost ( Powell ) ;
22587: LD_STRING Powell
22589: PPUSH
22590: CALL_OW 104
// end ; end ;
22594: PPOPN 2
22596: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
22597: LD_INT 23
22599: PPUSH
22600: LD_INT 22
22602: PUSH
22603: LD_INT 1
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: PUSH
22610: LD_INT 21
22612: PUSH
22613: LD_INT 3
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: PUSH
22620: EMPTY
22621: LIST
22622: LIST
22623: PPUSH
22624: CALL_OW 70
22628: PUSH
22629: LD_INT 23
22631: PPUSH
22632: LD_INT 22
22634: PUSH
22635: LD_INT 1
22637: PUSH
22638: EMPTY
22639: LIST
22640: LIST
22641: PUSH
22642: LD_INT 21
22644: PUSH
22645: LD_INT 2
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: PUSH
22652: LD_INT 58
22654: PUSH
22655: EMPTY
22656: LIST
22657: PUSH
22658: EMPTY
22659: LIST
22660: LIST
22661: LIST
22662: PPUSH
22663: CALL_OW 70
22667: OR
22668: PUSH
22669: LD_INT 1
22671: PPUSH
22672: LD_INT 2
22674: PPUSH
22675: CALL_OW 81
22679: PUSH
22680: LD_INT 1
22682: EQUAL
22683: AND
22684: IFFALSE 22708
22686: GO 22688
22688: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
22689: LD_EXP 24
22693: PPUSH
22694: LD_STRING D6b-Pow-1
22696: PPUSH
22697: CALL_OW 94
// YouLost ( Powell ) ;
22701: LD_STRING Powell
22703: PPUSH
22704: CALL_OW 104
// end ;
22708: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
22709: LD_VAR 0 1
22713: PUSH
22714: LD_EXP 1
22718: EQUAL
22719: IFFALSE 22728
// YouLost ( JMM ) ;
22721: LD_STRING JMM
22723: PPUSH
22724: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
22728: LD_VAR 0 1
22732: PPUSH
22733: CALL_OW 255
22737: PUSH
22738: LD_INT 3
22740: EQUAL
22741: PUSH
22742: LD_VAR 0 1
22746: PPUSH
22747: CALL_OW 247
22751: PUSH
22752: LD_INT 3
22754: EQUAL
22755: AND
22756: IFFALSE 23572
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL_OW 266
22767: PUSH
22768: LD_INT 31
22770: EQUAL
22771: PUSH
22772: LD_VAR 0 1
22776: PPUSH
22777: CALL_OW 266
22781: PUSH
22782: LD_INT 32
22784: EQUAL
22785: OR
22786: PUSH
22787: LD_VAR 0 1
22791: PPUSH
22792: CALL_OW 266
22796: PUSH
22797: LD_INT 36
22799: EQUAL
22800: OR
22801: PUSH
22802: LD_VAR 0 1
22806: PPUSH
22807: CALL_OW 266
22811: PUSH
22812: LD_INT 0
22814: EQUAL
22815: OR
22816: PUSH
22817: LD_VAR 0 1
22821: PPUSH
22822: CALL_OW 266
22826: PUSH
22827: LD_INT 24
22829: EQUAL
22830: OR
22831: PUSH
22832: LD_VAR 0 1
22836: PPUSH
22837: CALL_OW 266
22841: PUSH
22842: LD_INT 17
22844: EQUAL
22845: OR
22846: PUSH
22847: LD_VAR 0 1
22851: PPUSH
22852: CALL_OW 266
22856: PUSH
22857: LD_INT 25
22859: EQUAL
22860: OR
22861: PUSH
22862: LD_VAR 0 1
22866: PPUSH
22867: CALL_OW 266
22871: PUSH
22872: LD_INT 19
22874: EQUAL
22875: OR
22876: PUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: CALL_OW 266
22886: PUSH
22887: LD_INT 20
22889: EQUAL
22890: OR
22891: PUSH
22892: LD_VAR 0 1
22896: PPUSH
22897: CALL_OW 266
22901: PUSH
22902: LD_INT 18
22904: EQUAL
22905: OR
22906: PUSH
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 266
22916: PUSH
22917: LD_INT 21
22919: EQUAL
22920: OR
22921: PUSH
22922: LD_VAR 0 1
22926: PPUSH
22927: CALL_OW 266
22931: PUSH
22932: LD_INT 23
22934: EQUAL
22935: OR
22936: PUSH
22937: LD_VAR 0 1
22941: PPUSH
22942: CALL_OW 266
22946: PUSH
22947: LD_INT 16
22949: EQUAL
22950: OR
22951: PUSH
22952: LD_VAR 0 1
22956: PPUSH
22957: CALL_OW 266
22961: PUSH
22962: LD_INT 6
22964: EQUAL
22965: OR
22966: PUSH
22967: LD_VAR 0 1
22971: PPUSH
22972: CALL_OW 266
22976: PUSH
22977: LD_INT 29
22979: EQUAL
22980: OR
22981: PUSH
22982: LD_VAR 0 1
22986: PPUSH
22987: CALL_OW 266
22991: PUSH
22992: LD_INT 26
22994: EQUAL
22995: OR
22996: PUSH
22997: LD_VAR 0 1
23001: PPUSH
23002: CALL_OW 266
23006: PUSH
23007: LD_INT 30
23009: EQUAL
23010: OR
23011: PUSH
23012: LD_VAR 0 1
23016: PPUSH
23017: CALL_OW 266
23021: PUSH
23022: LD_INT 28
23024: EQUAL
23025: OR
23026: PUSH
23027: LD_VAR 0 1
23031: PPUSH
23032: CALL_OW 266
23036: PUSH
23037: LD_INT 27
23039: EQUAL
23040: OR
23041: PUSH
23042: LD_VAR 0 1
23046: PPUSH
23047: CALL_OW 266
23051: PUSH
23052: LD_INT 33
23054: EQUAL
23055: OR
23056: PUSH
23057: LD_VAR 0 1
23061: PPUSH
23062: CALL_OW 266
23066: PUSH
23067: LD_INT 2
23069: EQUAL
23070: OR
23071: PUSH
23072: LD_VAR 0 1
23076: PPUSH
23077: CALL_OW 266
23081: PUSH
23082: LD_INT 4
23084: EQUAL
23085: OR
23086: IFFALSE 23172
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
23088: LD_ADDR_EXP 42
23092: PUSH
23093: LD_EXP 42
23097: PUSH
23098: LD_VAR 0 1
23102: PPUSH
23103: CALL_OW 266
23107: ADD
23108: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23109: LD_ADDR_EXP 42
23113: PUSH
23114: LD_EXP 42
23118: PUSH
23119: LD_VAR 0 1
23123: PPUSH
23124: CALL_OW 250
23128: ADD
23129: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23130: LD_ADDR_EXP 42
23134: PUSH
23135: LD_EXP 42
23139: PUSH
23140: LD_VAR 0 1
23144: PPUSH
23145: CALL_OW 251
23149: ADD
23150: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23151: LD_ADDR_EXP 42
23155: PUSH
23156: LD_EXP 42
23160: PUSH
23161: LD_VAR 0 1
23165: PPUSH
23166: CALL_OW 254
23170: ADD
23171: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
23172: LD_VAR 0 1
23176: PPUSH
23177: CALL_OW 266
23181: PUSH
23182: LD_INT 1
23184: EQUAL
23185: IFFALSE 23264
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
23187: LD_ADDR_EXP 42
23191: PUSH
23192: LD_EXP 42
23196: PUSH
23197: LD_INT 0
23199: ADD
23200: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23201: LD_ADDR_EXP 42
23205: PUSH
23206: LD_EXP 42
23210: PUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 250
23220: ADD
23221: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23222: LD_ADDR_EXP 42
23226: PUSH
23227: LD_EXP 42
23231: PUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: CALL_OW 251
23241: ADD
23242: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23243: LD_ADDR_EXP 42
23247: PUSH
23248: LD_EXP 42
23252: PUSH
23253: LD_VAR 0 1
23257: PPUSH
23258: CALL_OW 254
23262: ADD
23263: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
23264: LD_VAR 0 1
23268: PPUSH
23269: CALL_OW 266
23273: PUSH
23274: LD_INT 3
23276: EQUAL
23277: IFFALSE 23356
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
23279: LD_ADDR_EXP 42
23283: PUSH
23284: LD_EXP 42
23288: PUSH
23289: LD_INT 2
23291: ADD
23292: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23293: LD_ADDR_EXP 42
23297: PUSH
23298: LD_EXP 42
23302: PUSH
23303: LD_VAR 0 1
23307: PPUSH
23308: CALL_OW 250
23312: ADD
23313: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23314: LD_ADDR_EXP 42
23318: PUSH
23319: LD_EXP 42
23323: PUSH
23324: LD_VAR 0 1
23328: PPUSH
23329: CALL_OW 251
23333: ADD
23334: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23335: LD_ADDR_EXP 42
23339: PUSH
23340: LD_EXP 42
23344: PUSH
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 254
23354: ADD
23355: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
23356: LD_VAR 0 1
23360: PPUSH
23361: CALL_OW 266
23365: PUSH
23366: LD_INT 5
23368: EQUAL
23369: IFFALSE 23448
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
23371: LD_ADDR_EXP 42
23375: PUSH
23376: LD_EXP 42
23380: PUSH
23381: LD_INT 4
23383: ADD
23384: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23385: LD_ADDR_EXP 42
23389: PUSH
23390: LD_EXP 42
23394: PUSH
23395: LD_VAR 0 1
23399: PPUSH
23400: CALL_OW 250
23404: ADD
23405: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23406: LD_ADDR_EXP 42
23410: PUSH
23411: LD_EXP 42
23415: PUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 251
23425: ADD
23426: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23427: LD_ADDR_EXP 42
23431: PUSH
23432: LD_EXP 42
23436: PUSH
23437: LD_VAR 0 1
23441: PPUSH
23442: CALL_OW 254
23446: ADD
23447: ST_TO_ADDR
// end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
23448: LD_VAR 0 1
23452: PPUSH
23453: CALL_OW 257
23457: PUSH
23458: LD_INT 3
23460: EQUAL
23461: PUSH
23462: LD_VAR 0 1
23466: PPUSH
23467: CALL_OW 255
23471: PUSH
23472: LD_INT 3
23474: EQUAL
23475: AND
23476: PUSH
23477: LD_EXP 35
23481: PPUSH
23482: CALL_OW 302
23486: AND
23487: PUSH
23488: LD_EXP 35
23492: PPUSH
23493: CALL_OW 255
23497: PUSH
23498: LD_INT 3
23500: EQUAL
23501: AND
23502: IFFALSE 23572
// begin uc_side = 3 ;
23504: LD_ADDR_OWVAR 20
23508: PUSH
23509: LD_INT 3
23511: ST_TO_ADDR
// uc_nation = 3 ;
23512: LD_ADDR_OWVAR 21
23516: PUSH
23517: LD_INT 3
23519: ST_TO_ADDR
// hc_gallery :=  ;
23520: LD_ADDR_OWVAR 33
23524: PUSH
23525: LD_STRING 
23527: ST_TO_ADDR
// hc_name :=  ;
23528: LD_ADDR_OWVAR 26
23532: PUSH
23533: LD_STRING 
23535: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
23536: LD_INT 0
23538: PPUSH
23539: LD_EXP 36
23543: PPUSH
23544: LD_EXP 37
23548: PPUSH
23549: CALL_OW 12
23553: PPUSH
23554: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
23558: CALL_OW 44
23562: PPUSH
23563: LD_EXP 35
23567: PPUSH
23568: CALL_OW 52
// end ; end ; end ;
23572: PPOPN 1
23574: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
23575: LD_ADDR_OWVAR 57
23579: PUSH
23580: LD_INT 0
23582: ST_TO_ADDR
// fastEnd = 1 ;
23583: LD_ADDR_EXP 59
23587: PUSH
23588: LD_INT 1
23590: ST_TO_ADDR
// FinishMission ;
23591: CALL 24835 0 0
// end ; end_of_file
23595: PPOPN 1
23597: END
// export function PrepareNature ; var i , un ; begin
23598: LD_INT 0
23600: PPUSH
23601: PPUSH
23602: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
23603: LD_ADDR_VAR 0 2
23607: PUSH
23608: DOUBLE
23609: LD_INT 1
23611: DEC
23612: ST_TO_ADDR
23613: LD_OWVAR 67
23617: PUSH
23618: LD_INT 1
23620: PPUSH
23621: LD_INT 5
23623: PPUSH
23624: CALL_OW 12
23628: PLUS
23629: PUSH
23630: FOR_TO
23631: IFFALSE 23776
// begin hc_sex = sex_male ;
23633: LD_ADDR_OWVAR 27
23637: PUSH
23638: LD_INT 1
23640: ST_TO_ADDR
// uc_side = 0 ;
23641: LD_ADDR_OWVAR 20
23645: PUSH
23646: LD_INT 0
23648: ST_TO_ADDR
// uc_nation = nation_nature ;
23649: LD_ADDR_OWVAR 21
23653: PUSH
23654: LD_INT 0
23656: ST_TO_ADDR
// hc_class = class_apeman ;
23657: LD_ADDR_OWVAR 28
23661: PUSH
23662: LD_INT 12
23664: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
23665: LD_ADDR_OWVAR 31
23669: PUSH
23670: LD_INT 2
23672: PPUSH
23673: LD_INT 7
23675: PPUSH
23676: CALL_OW 12
23680: PUSH
23681: LD_OWVAR 67
23685: PLUS
23686: PUSH
23687: LD_INT 2
23689: PPUSH
23690: LD_INT 10
23692: PPUSH
23693: CALL_OW 12
23697: PUSH
23698: LD_INT 2
23700: PPUSH
23701: LD_INT 10
23703: PPUSH
23704: CALL_OW 12
23708: PUSH
23709: LD_INT 2
23711: PPUSH
23712: LD_INT 10
23714: PPUSH
23715: CALL_OW 12
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23726: LD_ADDR_OWVAR 35
23730: PUSH
23731: LD_INT 5
23733: NEG
23734: PPUSH
23735: LD_INT 5
23737: PPUSH
23738: CALL_OW 12
23742: PUSH
23743: LD_OWVAR 67
23747: MUL
23748: ST_TO_ADDR
// un = CreateHuman ;
23749: LD_ADDR_VAR 0 3
23753: PUSH
23754: CALL_OW 44
23758: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
23759: LD_VAR 0 3
23763: PPUSH
23764: LD_INT 5
23766: PPUSH
23767: LD_INT 0
23769: PPUSH
23770: CALL_OW 49
// end ;
23774: GO 23630
23776: POP
23777: POP
// for i = 1 to Difficulty + 2 do
23778: LD_ADDR_VAR 0 2
23782: PUSH
23783: DOUBLE
23784: LD_INT 1
23786: DEC
23787: ST_TO_ADDR
23788: LD_OWVAR 67
23792: PUSH
23793: LD_INT 2
23795: PLUS
23796: PUSH
23797: FOR_TO
23798: IFFALSE 23907
// begin hc_sex = sex_male ;
23800: LD_ADDR_OWVAR 27
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
// uc_side = 0 ;
23808: LD_ADDR_OWVAR 20
23812: PUSH
23813: LD_INT 0
23815: ST_TO_ADDR
// uc_nation = nation_nature ;
23816: LD_ADDR_OWVAR 21
23820: PUSH
23821: LD_INT 0
23823: ST_TO_ADDR
// hc_class = class_tiger ;
23824: LD_ADDR_OWVAR 28
23828: PUSH
23829: LD_INT 14
23831: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23832: LD_ADDR_OWVAR 31
23836: PUSH
23837: LD_EXP 37
23841: PUSH
23842: LD_INT 0
23844: PUSH
23845: LD_INT 0
23847: PUSH
23848: LD_INT 0
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: LIST
23855: LIST
23856: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
23857: LD_ADDR_OWVAR 35
23861: PUSH
23862: LD_INT 5
23864: NEG
23865: PPUSH
23866: LD_INT 5
23868: PPUSH
23869: CALL_OW 12
23873: PUSH
23874: LD_OWVAR 67
23878: MUL
23879: ST_TO_ADDR
// un = CreateHuman ;
23880: LD_ADDR_VAR 0 3
23884: PUSH
23885: CALL_OW 44
23889: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
23890: LD_VAR 0 3
23894: PPUSH
23895: LD_INT 6
23897: PPUSH
23898: LD_INT 0
23900: PPUSH
23901: CALL_OW 49
// end ;
23905: GO 23797
23907: POP
23908: POP
// for i = 1 to rand ( 3 , 4 ) do
23909: LD_ADDR_VAR 0 2
23913: PUSH
23914: DOUBLE
23915: LD_INT 1
23917: DEC
23918: ST_TO_ADDR
23919: LD_INT 3
23921: PPUSH
23922: LD_INT 4
23924: PPUSH
23925: CALL_OW 12
23929: PUSH
23930: FOR_TO
23931: IFFALSE 24025
// begin hc_sex = sex_male ;
23933: LD_ADDR_OWVAR 27
23937: PUSH
23938: LD_INT 1
23940: ST_TO_ADDR
// uc_side = 0 ;
23941: LD_ADDR_OWVAR 20
23945: PUSH
23946: LD_INT 0
23948: ST_TO_ADDR
// uc_nation = nation_nature ;
23949: LD_ADDR_OWVAR 21
23953: PUSH
23954: LD_INT 0
23956: ST_TO_ADDR
// hc_class = 18 ;
23957: LD_ADDR_OWVAR 28
23961: PUSH
23962: LD_INT 18
23964: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
23965: LD_ADDR_OWVAR 31
23969: PUSH
23970: LD_EXP 37
23974: PUSH
23975: LD_INT 0
23977: PUSH
23978: LD_INT 0
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
// hc_agressivity = 0 ;
23990: LD_ADDR_OWVAR 35
23994: PUSH
23995: LD_INT 0
23997: ST_TO_ADDR
// un = CreateHuman ;
23998: LD_ADDR_VAR 0 3
24002: PUSH
24003: CALL_OW 44
24007: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24008: LD_VAR 0 3
24012: PPUSH
24013: LD_INT 6
24015: PPUSH
24016: LD_INT 0
24018: PPUSH
24019: CALL_OW 49
// end ;
24023: GO 23930
24025: POP
24026: POP
// end ; end_of_file
24027: LD_VAR 0 1
24031: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
24032: LD_EXP 46
24036: PUSH
24037: LD_INT 1
24039: EQUAL
24040: IFFALSE 24124
24042: GO 24044
24044: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 6 , 8 , 9 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
24045: LD_INT 7
24047: PPUSH
24048: LD_INT 5
24050: PPUSH
24051: LD_INT 6
24053: PUSH
24054: LD_INT 8
24056: PUSH
24057: LD_INT 9
24059: PUSH
24060: EMPTY
24061: LIST
24062: LIST
24063: LIST
24064: PUSH
24065: LD_OWVAR 67
24069: ARRAY
24070: PPUSH
24071: LD_EXP 36
24075: PPUSH
24076: LD_EXP 37
24080: PPUSH
24081: CALL_OW 12
24085: PPUSH
24086: LD_INT 2
24088: PPUSH
24089: LD_INT 1
24091: PPUSH
24092: LD_INT 1
24094: PPUSH
24095: EMPTY
24096: PPUSH
24097: LD_INT 25
24099: PUSH
24100: LD_INT 26
24102: PUSH
24103: LD_INT 27
24105: PUSH
24106: LD_INT 28
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: PPUSH
24115: EMPTY
24116: PPUSH
24117: LD_INT 1
24119: PPUSH
24120: CALL 14636 0 11
24124: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
24125: LD_EXP 46
24129: PUSH
24130: LD_INT 1
24132: EQUAL
24133: IFFALSE 24221
24135: GO 24137
24137: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 9 , 10 , 12 ] [ Difficulty ] , 0 , 0 , [ 3 , 5 , 6 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
24138: LD_INT 5
24140: PPUSH
24141: LD_INT 2
24143: PPUSH
24144: LD_INT 9
24146: PUSH
24147: LD_INT 10
24149: PUSH
24150: LD_INT 12
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_OWVAR 67
24162: ARRAY
24163: PPUSH
24164: LD_INT 0
24166: PPUSH
24167: LD_INT 0
24169: PPUSH
24170: LD_INT 3
24172: PUSH
24173: LD_INT 5
24175: PUSH
24176: LD_INT 6
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: PUSH
24184: LD_OWVAR 67
24188: ARRAY
24189: PPUSH
24190: LD_INT 0
24192: PPUSH
24193: LD_EXP 36
24197: PPUSH
24198: LD_EXP 37
24202: PPUSH
24203: CALL_OW 12
24207: PPUSH
24208: LD_INT 7
24210: PPUSH
24211: LD_INT 9
24213: PPUSH
24214: LD_INT 1
24216: PPUSH
24217: CALL 16340 0 11
24221: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
24222: LD_EXP 29
24226: PUSH
24227: LD_EXP 60
24231: PUSH
24232: LD_INT 1
24234: EQUAL
24235: AND
24236: IFFALSE 24305
24238: GO 24240
24240: DISABLE
// begin enable ;
24241: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
24242: LD_INT 6
24244: PPUSH
24245: LD_INT 3
24247: PPUSH
24248: LD_EXP 57
24252: PPUSH
24253: LD_INT 0
24255: PPUSH
24256: LD_OWVAR 67
24260: PPUSH
24261: LD_INT 0
24263: PPUSH
24264: LD_EXP 57
24268: PUSH
24269: LD_INT 3
24271: DIV
24272: PUSH
24273: LD_INT 1
24275: PLUS
24276: PPUSH
24277: LD_EXP 36
24281: PPUSH
24282: LD_EXP 37
24286: PPUSH
24287: CALL_OW 12
24291: PPUSH
24292: LD_INT 17
24294: PPUSH
24295: LD_INT 18
24297: PPUSH
24298: LD_INT 1
24300: PPUSH
24301: CALL 16340 0 11
// end ;
24305: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
24306: LD_EXP 29
24310: PUSH
24311: LD_EXP 60
24315: PUSH
24316: LD_INT 1
24318: EQUAL
24319: AND
24320: IFFALSE 24397
24322: GO 24324
24324: DISABLE
// begin enable ;
24325: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
24326: LD_INT 17
24328: PPUSH
24329: LD_INT 6
24331: PPUSH
24332: LD_EXP 56
24336: PPUSH
24337: LD_EXP 36
24341: PPUSH
24342: LD_EXP 37
24346: PPUSH
24347: CALL_OW 12
24351: PPUSH
24352: LD_INT 3
24354: PPUSH
24355: LD_INT 1
24357: PPUSH
24358: LD_INT 1
24360: PUSH
24361: LD_INT 3
24363: PUSH
24364: EMPTY
24365: LIST
24366: LIST
24367: PPUSH
24368: LD_INT 43
24370: PUSH
24371: LD_INT 44
24373: PUSH
24374: LD_INT 45
24376: PUSH
24377: LD_INT 46
24379: PUSH
24380: EMPTY
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: PPUSH
24386: EMPTY
24387: PPUSH
24388: EMPTY
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: CALL 14636 0 11
// end ;
24397: END
// every 10 10$00 trigger joinEpsilon do
24398: LD_EXP 29
24402: IFFALSE 24456
24404: GO 24406
24406: DISABLE
// begin enable ;
24407: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
24408: LD_ADDR_EXP 56
24412: PUSH
24413: LD_EXP 56
24417: PUSH
24418: LD_INT 1
24420: PPUSH
24421: LD_OWVAR 67
24425: PPUSH
24426: CALL_OW 12
24430: PLUS
24431: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
24432: LD_ADDR_EXP 57
24436: PUSH
24437: LD_EXP 57
24441: PUSH
24442: LD_INT 1
24444: PPUSH
24445: LD_OWVAR 67
24449: PPUSH
24450: CALL_OW 12
24454: PLUS
24455: ST_TO_ADDR
// end ;
24456: END
// every 21 21$0 trigger attackAvalaible = 1 do
24457: LD_EXP 60
24461: PUSH
24462: LD_INT 1
24464: EQUAL
24465: IFFALSE 24478
24467: GO 24469
24469: DISABLE
// attackAvalaible = 0 ; end_of_file
24470: LD_ADDR_EXP 60
24474: PUSH
24475: LD_INT 0
24477: ST_TO_ADDR
24478: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
24479: LD_INT 54
24481: PPUSH
24482: LD_INT 1
24484: PPUSH
24485: CALL_OW 321
24489: PUSH
24490: LD_INT 2
24492: EQUAL
24493: PUSH
24494: LD_INT 55
24496: PPUSH
24497: LD_INT 1
24499: PPUSH
24500: CALL_OW 321
24504: PUSH
24505: LD_INT 2
24507: EQUAL
24508: AND
24509: PUSH
24510: LD_INT 21
24512: PPUSH
24513: LD_INT 1
24515: PPUSH
24516: CALL_OW 321
24520: PUSH
24521: LD_INT 2
24523: EQUAL
24524: AND
24525: PUSH
24526: LD_INT 22
24528: PPUSH
24529: LD_INT 1
24531: PPUSH
24532: CALL_OW 321
24536: PUSH
24537: LD_INT 2
24539: EQUAL
24540: AND
24541: PUSH
24542: LD_INT 12
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 321
24552: PUSH
24553: LD_INT 1
24555: EQUAL
24556: PUSH
24557: LD_INT 32
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: CALL_OW 321
24567: PUSH
24568: LD_INT 1
24570: EQUAL
24571: OR
24572: PUSH
24573: EMPTY
24574: LIST
24575: AND
24576: PUSH
24577: LD_EXP 48
24581: PUSH
24582: LD_INT 1
24584: EQUAL
24585: AND
24586: PUSH
24587: LD_INT 22
24589: PUSH
24590: LD_INT 3
24592: PUSH
24593: EMPTY
24594: LIST
24595: LIST
24596: PUSH
24597: LD_INT 21
24599: PUSH
24600: LD_INT 1
24602: PUSH
24603: EMPTY
24604: LIST
24605: LIST
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PPUSH
24611: CALL_OW 69
24615: PUSH
24616: LD_INT 0
24618: EQUAL
24619: AND
24620: IFFALSE 24676
24622: GO 24624
24624: DISABLE
// begin case query ( QEndMission ) of 1 :
24625: LD_STRING QEndMission
24627: PPUSH
24628: CALL_OW 97
24632: PUSH
24633: LD_INT 1
24635: DOUBLE
24636: EQUAL
24637: IFTRUE 24641
24639: GO 24652
24641: POP
// begin end_the_mission_allowed = true ;
24642: LD_ADDR_OWVAR 57
24646: PUSH
24647: LD_INT 1
24649: ST_TO_ADDR
// end ; 2 :
24650: GO 24676
24652: LD_INT 2
24654: DOUBLE
24655: EQUAL
24656: IFTRUE 24660
24658: GO 24675
24660: POP
// begin fastEnd = 1 ;
24661: LD_ADDR_EXP 59
24665: PUSH
24666: LD_INT 1
24668: ST_TO_ADDR
// FinishMission ;
24669: CALL 24835 0 0
// end ; end ;
24673: GO 24676
24675: POP
// end ;
24676: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
24677: LD_INT 54
24679: PPUSH
24680: LD_INT 1
24682: PPUSH
24683: CALL_OW 321
24687: PUSH
24688: LD_INT 2
24690: EQUAL
24691: PUSH
24692: LD_INT 55
24694: PPUSH
24695: LD_INT 1
24697: PPUSH
24698: CALL_OW 321
24702: PUSH
24703: LD_INT 2
24705: EQUAL
24706: AND
24707: PUSH
24708: LD_INT 21
24710: PPUSH
24711: LD_INT 1
24713: PPUSH
24714: CALL_OW 321
24718: PUSH
24719: LD_INT 2
24721: EQUAL
24722: AND
24723: PUSH
24724: LD_INT 22
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 321
24734: PUSH
24735: LD_INT 2
24737: EQUAL
24738: AND
24739: PUSH
24740: LD_INT 12
24742: PPUSH
24743: LD_INT 1
24745: PPUSH
24746: CALL_OW 321
24750: PUSH
24751: LD_INT 2
24753: EQUAL
24754: AND
24755: PUSH
24756: LD_INT 32
24758: PPUSH
24759: LD_INT 1
24761: PPUSH
24762: CALL_OW 321
24766: PUSH
24767: LD_INT 2
24769: EQUAL
24770: AND
24771: PUSH
24772: LD_EXP 59
24776: PUSH
24777: LD_INT 0
24779: EQUAL
24780: AND
24781: PUSH
24782: LD_EXP 48
24786: PUSH
24787: LD_INT 1
24789: EQUAL
24790: AND
24791: PUSH
24792: LD_INT 22
24794: PUSH
24795: LD_INT 3
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 21
24804: PUSH
24805: LD_INT 1
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: EMPTY
24813: LIST
24814: LIST
24815: PPUSH
24816: CALL_OW 69
24820: PUSH
24821: LD_INT 0
24823: EQUAL
24824: AND
24825: IFFALSE 24834
24827: GO 24829
24829: DISABLE
// FinishMission ;
24830: CALL 24835 0 0
24834: END
// export function FinishMission ; begin
24835: LD_INT 0
24837: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
24838: LD_EXP 52
24842: PPUSH
24843: LD_STRING 10_KhatamStatus_1
24845: PPUSH
24846: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
24850: LD_EXP 51
24854: PPUSH
24855: LD_STRING 10_GensherEscape_1
24857: PPUSH
24858: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
24862: LD_INT 12
24864: PPUSH
24865: LD_INT 1
24867: PPUSH
24868: CALL_OW 321
24872: PUSH
24873: LD_INT 2
24875: EQUAL
24876: IFFALSE 24890
// begin AddMedal ( sights , 1 ) ;
24878: LD_STRING sights
24880: PPUSH
24881: LD_INT 1
24883: PPUSH
24884: CALL_OW 101
// end else
24888: GO 24901
// begin AddMedal ( sights , - 1 ) ;
24890: LD_STRING sights
24892: PPUSH
24893: LD_INT 1
24895: NEG
24896: PPUSH
24897: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
24901: LD_INT 32
24903: PPUSH
24904: LD_INT 1
24906: PPUSH
24907: CALL_OW 321
24911: PUSH
24912: LD_INT 2
24914: EQUAL
24915: IFFALSE 24929
// begin AddMedal ( computers , 1 ) ;
24917: LD_STRING computers
24919: PPUSH
24920: LD_INT 1
24922: PPUSH
24923: CALL_OW 101
// end else
24927: GO 24940
// begin AddMedal ( computers , - 1 ) ;
24929: LD_STRING computers
24931: PPUSH
24932: LD_INT 1
24934: NEG
24935: PPUSH
24936: CALL_OW 101
// end ; if arabianEscape = 0 then
24940: LD_EXP 47
24944: PUSH
24945: LD_INT 0
24947: EQUAL
24948: IFFALSE 24972
// begin AddMedal ( renegades , 2 ) ;
24950: LD_STRING renegades
24952: PPUSH
24953: LD_INT 2
24955: PPUSH
24956: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
24960: LD_INT 0
24962: PPUSH
24963: LD_STRING 10_ScientistsEscape_1
24965: PPUSH
24966: CALL_OW 39
// end else
24970: GO 24983
// begin AddMedal ( renegades , - 1 ) ;
24972: LD_STRING renegades
24974: PPUSH
24975: LD_INT 1
24977: NEG
24978: PPUSH
24979: CALL_OW 101
// end ; SaveEpsilonBase ;
24983: CALL 25702 0 0
// Query ( kaj ) ;
24987: LD_STRING kaj
24989: PPUSH
24990: CALL_OW 97
// GiveMedals ( Main ) ;
24994: LD_STRING Main
24996: PPUSH
24997: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
25001: LD_INT 22
25003: PUSH
25004: LD_INT 1
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 23
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: PUSH
25021: LD_INT 21
25023: PUSH
25024: LD_INT 1
25026: PUSH
25027: EMPTY
25028: LIST
25029: LIST
25030: PUSH
25031: LD_INT 2
25033: PUSH
25034: LD_INT 25
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PUSH
25044: LD_INT 25
25046: PUSH
25047: LD_INT 2
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PUSH
25054: LD_INT 25
25056: PUSH
25057: LD_INT 3
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PUSH
25064: LD_INT 25
25066: PUSH
25067: LD_INT 4
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 25
25076: PUSH
25077: LD_INT 5
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: LD_INT 25
25086: PUSH
25087: LD_INT 8
25089: PUSH
25090: EMPTY
25091: LIST
25092: LIST
25093: PUSH
25094: EMPTY
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 69
25113: PPUSH
25114: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25118: LD_EXP 1
25122: PPUSH
25123: LD_EXP 53
25127: PUSH
25128: LD_STRING JMM
25130: STR
25131: PPUSH
25132: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25136: LD_EXP 2
25140: PPUSH
25141: LD_EXP 53
25145: PUSH
25146: LD_STRING Brown
25148: STR
25149: PPUSH
25150: CALL 8945 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25154: LD_EXP 3
25158: PPUSH
25159: LD_EXP 53
25163: PUSH
25164: LD_STRING Donaldson
25166: STR
25167: PPUSH
25168: CALL 8945 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
25172: LD_EXP 4
25176: PPUSH
25177: LD_EXP 53
25181: PUSH
25182: LD_STRING Bobby
25184: STR
25185: PPUSH
25186: CALL 8945 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
25190: LD_EXP 5
25194: PPUSH
25195: LD_EXP 53
25199: PUSH
25200: LD_STRING Cyrus
25202: STR
25203: PPUSH
25204: CALL 8945 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
25208: LD_EXP 6
25212: PPUSH
25213: LD_EXP 53
25217: PUSH
25218: LD_STRING Lisa
25220: STR
25221: PPUSH
25222: CALL 8945 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
25226: LD_EXP 7
25230: PPUSH
25231: LD_EXP 53
25235: PUSH
25236: LD_STRING Frank
25238: STR
25239: PPUSH
25240: CALL 8945 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
25244: LD_EXP 8
25248: PPUSH
25249: LD_EXP 53
25253: PUSH
25254: LD_STRING Kikuchi
25256: STR
25257: PPUSH
25258: CALL 8945 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
25262: LD_EXP 9
25266: PPUSH
25267: LD_EXP 53
25271: PUSH
25272: LD_STRING Houten
25274: STR
25275: PPUSH
25276: CALL 8945 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
25280: LD_EXP 10
25284: PPUSH
25285: LD_EXP 53
25289: PUSH
25290: LD_STRING Gary
25292: STR
25293: PPUSH
25294: CALL 8945 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
25298: LD_EXP 19
25302: PPUSH
25303: LD_EXP 53
25307: PUSH
25308: LD_STRING Cornell
25310: STR
25311: PPUSH
25312: CALL 8945 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
25316: LD_EXP 11
25320: PPUSH
25321: LD_EXP 53
25325: PUSH
25326: LD_STRING Simms
25328: STR
25329: PPUSH
25330: CALL 8945 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
25334: LD_EXP 12
25338: PPUSH
25339: LD_EXP 53
25343: PUSH
25344: LD_STRING Denis
25346: STR
25347: PPUSH
25348: CALL 8945 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
25352: LD_EXP 13
25356: PPUSH
25357: LD_EXP 53
25361: PUSH
25362: LD_STRING Joan
25364: STR
25365: PPUSH
25366: CALL 8945 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
25370: LD_EXP 15
25374: PPUSH
25375: LD_EXP 53
25379: PUSH
25380: LD_STRING Gladstone
25382: STR
25383: PPUSH
25384: CALL 8945 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
25388: LD_EXP 17
25392: PPUSH
25393: LD_EXP 53
25397: PUSH
25398: LD_STRING DeltaDoctor
25400: STR
25401: PPUSH
25402: CALL 8945 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
25406: LD_INT 50
25408: PUSH
25409: EMPTY
25410: LIST
25411: PUSH
25412: LD_INT 22
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PUSH
25422: LD_INT 21
25424: PUSH
25425: LD_INT 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 2
25434: PUSH
25435: LD_INT 25
25437: PUSH
25438: LD_INT 1
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 25
25447: PUSH
25448: LD_INT 2
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: LD_INT 25
25457: PUSH
25458: LD_INT 3
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: LD_INT 25
25467: PUSH
25468: LD_INT 4
25470: PUSH
25471: EMPTY
25472: LIST
25473: LIST
25474: PUSH
25475: LD_INT 25
25477: PUSH
25478: LD_INT 5
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 25
25487: PUSH
25488: LD_INT 8
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: LIST
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: LIST
25508: LIST
25509: PPUSH
25510: CALL_OW 69
25514: PUSH
25515: LD_EXP 1
25519: PUSH
25520: LD_EXP 2
25524: PUSH
25525: LD_EXP 3
25529: PUSH
25530: LD_EXP 4
25534: PUSH
25535: LD_EXP 5
25539: PUSH
25540: LD_EXP 6
25544: PUSH
25545: LD_EXP 7
25549: PUSH
25550: LD_EXP 15
25554: PUSH
25555: LD_EXP 8
25559: PUSH
25560: LD_EXP 12
25564: PUSH
25565: LD_EXP 13
25569: PUSH
25570: LD_EXP 9
25574: PUSH
25575: LD_EXP 11
25579: PUSH
25580: LD_EXP 10
25584: PUSH
25585: LD_EXP 17
25589: PUSH
25590: LD_EXP 19
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: LIST
25605: LIST
25606: LIST
25607: LIST
25608: LIST
25609: LIST
25610: LIST
25611: LIST
25612: DIFF
25613: PPUSH
25614: LD_STRING 10_other_survivors
25616: PPUSH
25617: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
25621: LD_INT 50
25623: PUSH
25624: EMPTY
25625: LIST
25626: PUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 1
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: LD_INT 2
25649: PUSH
25650: LD_INT 25
25652: PUSH
25653: LD_INT 16
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 25
25662: PUSH
25663: LD_INT 12
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: LIST
25680: PPUSH
25681: CALL_OW 69
25685: PPUSH
25686: LD_STRING 10_ape
25688: PPUSH
25689: CALL_OW 38
// YouWin ;
25693: CALL_OW 103
// end ;
25697: LD_VAR 0 1
25701: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
25706: PPUSH
25707: PPUSH
// epsilonBase = [ ] ;
25708: LD_ADDR_VAR 0 2
25712: PUSH
25713: EMPTY
25714: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
25715: LD_ADDR_VAR 0 3
25719: PUSH
25720: LD_INT 22
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 3
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: LD_INT 50
25742: PUSH
25743: EMPTY
25744: LIST
25745: PUSH
25746: EMPTY
25747: LIST
25748: LIST
25749: LIST
25750: PPUSH
25751: CALL_OW 69
25755: ST_TO_ADDR
// for i in buildings do
25756: LD_ADDR_VAR 0 4
25760: PUSH
25761: LD_VAR 0 3
25765: PUSH
25766: FOR_IN
25767: IFFALSE 26204
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
25769: LD_VAR 0 4
25773: PPUSH
25774: CALL_OW 266
25778: PUSH
25779: LD_INT 6
25781: PUSH
25782: LD_INT 7
25784: PUSH
25785: LD_INT 8
25787: PUSH
25788: EMPTY
25789: LIST
25790: LIST
25791: LIST
25792: IN
25793: IFFALSE 25907
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
25795: LD_ADDR_VAR 0 2
25799: PUSH
25800: LD_VAR 0 2
25804: PUSH
25805: LD_VAR 0 4
25809: PPUSH
25810: CALL_OW 266
25814: PUSH
25815: LD_VAR 0 4
25819: PPUSH
25820: CALL_OW 250
25824: PUSH
25825: LD_VAR 0 4
25829: PPUSH
25830: CALL_OW 251
25834: PUSH
25835: LD_VAR 0 4
25839: PPUSH
25840: CALL_OW 254
25844: PUSH
25845: LD_VAR 0 4
25849: PPUSH
25850: CALL_OW 267
25854: PUSH
25855: LD_VAR 0 4
25859: PPUSH
25860: CALL_OW 248
25864: PUSH
25865: LD_VAR 0 4
25869: PPUSH
25870: LD_INT 1
25872: PPUSH
25873: CALL_OW 268
25877: PUSH
25878: LD_VAR 0 4
25882: PPUSH
25883: LD_INT 2
25885: PPUSH
25886: CALL_OW 268
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: LIST
25895: LIST
25896: LIST
25897: LIST
25898: LIST
25899: LIST
25900: PUSH
25901: EMPTY
25902: LIST
25903: ADD
25904: ST_TO_ADDR
25905: GO 26202
// if GetBType ( i ) = b_bunker then
25907: LD_VAR 0 4
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 32
25919: EQUAL
25920: IFFALSE 26017
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
25922: LD_ADDR_VAR 0 2
25926: PUSH
25927: LD_VAR 0 2
25931: PUSH
25932: LD_VAR 0 4
25936: PPUSH
25937: CALL_OW 266
25941: PUSH
25942: LD_VAR 0 4
25946: PPUSH
25947: CALL_OW 250
25951: PUSH
25952: LD_VAR 0 4
25956: PPUSH
25957: CALL_OW 251
25961: PUSH
25962: LD_VAR 0 4
25966: PPUSH
25967: CALL_OW 254
25971: PUSH
25972: LD_VAR 0 4
25976: PPUSH
25977: CALL_OW 267
25981: PUSH
25982: LD_VAR 0 4
25986: PPUSH
25987: CALL_OW 248
25991: PUSH
25992: LD_VAR 0 4
25996: PPUSH
25997: CALL_OW 269
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: PUSH
26011: EMPTY
26012: LIST
26013: ADD
26014: ST_TO_ADDR
26015: GO 26202
// if GetBType ( i ) = b_factory then
26017: LD_VAR 0 4
26021: PPUSH
26022: CALL_OW 266
26026: PUSH
26027: LD_INT 3
26029: EQUAL
26030: IFFALSE 26120
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26032: LD_ADDR_VAR 0 2
26036: PUSH
26037: LD_VAR 0 2
26041: PPUSH
26042: LD_INT 1
26044: PPUSH
26045: LD_VAR 0 4
26049: PPUSH
26050: CALL_OW 266
26054: PUSH
26055: LD_VAR 0 4
26059: PPUSH
26060: CALL_OW 250
26064: PUSH
26065: LD_VAR 0 4
26069: PPUSH
26070: CALL_OW 251
26074: PUSH
26075: LD_VAR 0 4
26079: PPUSH
26080: CALL_OW 254
26084: PUSH
26085: LD_VAR 0 4
26089: PPUSH
26090: CALL_OW 267
26094: PUSH
26095: LD_VAR 0 4
26099: PPUSH
26100: CALL_OW 248
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: PPUSH
26113: CALL_OW 2
26117: ST_TO_ADDR
26118: GO 26202
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26120: LD_ADDR_VAR 0 2
26124: PUSH
26125: LD_VAR 0 2
26129: PUSH
26130: LD_VAR 0 4
26134: PPUSH
26135: CALL_OW 266
26139: PUSH
26140: LD_VAR 0 4
26144: PPUSH
26145: CALL_OW 250
26149: PUSH
26150: LD_VAR 0 4
26154: PPUSH
26155: CALL_OW 251
26159: PUSH
26160: LD_VAR 0 4
26164: PPUSH
26165: CALL_OW 254
26169: PUSH
26170: LD_VAR 0 4
26174: PPUSH
26175: CALL_OW 267
26179: PUSH
26180: LD_VAR 0 4
26184: PPUSH
26185: CALL_OW 248
26189: PUSH
26190: EMPTY
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: PUSH
26198: EMPTY
26199: LIST
26200: ADD
26201: ST_TO_ADDR
// end ;
26202: GO 25766
26204: POP
26205: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
26206: LD_VAR 0 2
26210: PPUSH
26211: LD_STRING 10_EpsilonBase
26213: PPUSH
26214: CALL_OW 39
// end ; end_of_file
26218: LD_VAR 0 1
26222: RET
// every 0 0$30 do
26223: GO 26225
26225: DISABLE
// begin enable ;
26226: ENABLE
// if cratesSpawned < 6 then
26227: LD_EXP 55
26231: PUSH
26232: LD_INT 6
26234: LESS
26235: IFFALSE 26272
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26237: LD_INT 3
26239: PPUSH
26240: LD_INT 5
26242: PPUSH
26243: CALL_OW 12
26247: PPUSH
26248: LD_INT 16
26250: PPUSH
26251: LD_INT 1
26253: PPUSH
26254: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26258: LD_ADDR_EXP 55
26262: PUSH
26263: LD_EXP 55
26267: PUSH
26268: LD_INT 1
26270: PLUS
26271: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
26272: LD_EXP 55
26276: PUSH
26277: LD_INT 6
26279: GREATEREQUAL
26280: PUSH
26281: LD_EXP 55
26285: PUSH
26286: LD_INT 12
26288: LESS
26289: AND
26290: IFFALSE 26334
// begin wait ( 0 0$30 ) ;
26292: LD_INT 1050
26294: PPUSH
26295: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26299: LD_INT 3
26301: PPUSH
26302: LD_INT 5
26304: PPUSH
26305: CALL_OW 12
26309: PPUSH
26310: LD_INT 16
26312: PPUSH
26313: LD_INT 1
26315: PPUSH
26316: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26320: LD_ADDR_EXP 55
26324: PUSH
26325: LD_EXP 55
26329: PUSH
26330: LD_INT 1
26332: PLUS
26333: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
26334: LD_EXP 55
26338: PUSH
26339: LD_INT 12
26341: GREATEREQUAL
26342: IFFALSE 26386
// begin wait ( 1 1$30 ) ;
26344: LD_INT 3150
26346: PPUSH
26347: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26351: LD_INT 3
26353: PPUSH
26354: LD_INT 5
26356: PPUSH
26357: CALL_OW 12
26361: PPUSH
26362: LD_INT 16
26364: PPUSH
26365: LD_INT 1
26367: PPUSH
26368: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26372: LD_ADDR_EXP 55
26376: PUSH
26377: LD_EXP 55
26381: PUSH
26382: LD_INT 1
26384: PLUS
26385: ST_TO_ADDR
// end ; end ;
26386: END
