// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24219 0 0
// PrepareDifficulty ;
 250: CALL 9739 0 0
// PrepareJMMTeam ;
 254: CALL 646 0 0
// PrepareCathyTeam ;
 258: CALL 1721 0 0
// PlaceMines ( MineField1 , 10 ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 10
 267: PPUSH
 268: CALL 19317 0 2
// if Difficulty > 1 then
 272: LD_OWVAR 67
 276: PUSH
 277: LD_INT 1
 279: GREATER
 280: IFFALSE 292
// PlaceMines ( MineField2 , 10 ) ;
 282: LD_INT 25
 284: PPUSH
 285: LD_INT 10
 287: PPUSH
 288: CALL 19317 0 2
// if Difficulty > 2 then
 292: LD_OWVAR 67
 296: PUSH
 297: LD_INT 2
 299: GREATER
 300: IFFALSE 312
// PlaceMines ( MineField3 , 10 ) ;
 302: LD_INT 26
 304: PPUSH
 305: LD_INT 10
 307: PPUSH
 308: CALL 19317 0 2
// PrepareArabianCommander ;
 312: CALL 3086 0 0
// PrepareArabian ;
 316: CALL 3138 0 0
// BuildArabianBase ;
 320: CALL 12438 0 0
// TameApemans ;
 324: CALL 18282 0 0
// end ;
 328: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 329: LD_EXP 63
 333: PUSH
 334: LD_INT 1
 336: EQUAL
 337: IFFALSE 643
 339: GO 341
 341: DISABLE
 342: LD_INT 0
 344: PPUSH
// begin enable ;
 345: ENABLE
// fogoff ( true ) ;
 346: LD_INT 1
 348: PPUSH
 349: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 353: LD_ADDR_VAR 0 1
 357: PUSH
 358: LD_INT 22
 360: PUSH
 361: LD_INT 1
 363: PUSH
 364: EMPTY
 365: LIST
 366: LIST
 367: PUSH
 368: LD_INT 21
 370: PUSH
 371: LD_INT 1
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PUSH
 378: EMPTY
 379: LIST
 380: LIST
 381: PPUSH
 382: CALL_OW 69
 386: PUSH
 387: FOR_IN
 388: IFFALSE 404
// SetLives ( i , 1000 ) ;
 390: LD_VAR 0 1
 394: PPUSH
 395: LD_INT 1000
 397: PPUSH
 398: CALL_OW 234
 402: GO 387
 404: POP
 405: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 406: LD_ADDR_VAR 0 1
 410: PUSH
 411: LD_INT 22
 413: PUSH
 414: LD_INT 1
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: PUSH
 421: LD_INT 2
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 0
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 30
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: LIST
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PPUSH
 453: CALL_OW 69
 457: PUSH
 458: FOR_IN
 459: IFFALSE 483
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 461: LD_VAR 0 1
 465: PPUSH
 466: CALL_OW 274
 470: PPUSH
 471: LD_INT 1
 473: PPUSH
 474: LD_INT 9999
 476: PPUSH
 477: CALL_OW 277
 481: GO 458
 483: POP
 484: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 485: LD_ADDR_VAR 0 1
 489: PUSH
 490: LD_INT 22
 492: PUSH
 493: LD_INT 1
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 0
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 30
 515: PUSH
 516: LD_INT 1
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: PUSH
 537: FOR_IN
 538: IFFALSE 562
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 540: LD_VAR 0 1
 544: PPUSH
 545: CALL_OW 274
 549: PPUSH
 550: LD_INT 2
 552: PPUSH
 553: LD_INT 9999
 555: PPUSH
 556: CALL_OW 277
 560: GO 537
 562: POP
 563: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 564: LD_ADDR_VAR 0 1
 568: PUSH
 569: LD_INT 22
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 2
 581: PUSH
 582: LD_INT 30
 584: PUSH
 585: LD_INT 0
 587: PUSH
 588: EMPTY
 589: LIST
 590: LIST
 591: PUSH
 592: LD_INT 30
 594: PUSH
 595: LD_INT 1
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: PUSH
 602: EMPTY
 603: LIST
 604: LIST
 605: LIST
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 69
 615: PUSH
 616: FOR_IN
 617: IFFALSE 641
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 619: LD_VAR 0 1
 623: PPUSH
 624: CALL_OW 274
 628: PPUSH
 629: LD_INT 3
 631: PPUSH
 632: LD_INT 9999
 634: PPUSH
 635: CALL_OW 277
 639: GO 616
 641: POP
 642: POP
// end ; end_of_file
 643: PPOPN 1
 645: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 646: LD_INT 0
 648: PPUSH
 649: PPUSH
 650: PPUSH
 651: PPUSH
 652: PPUSH
 653: PPUSH
// uc_side = 1 ;
 654: LD_ADDR_OWVAR 20
 658: PUSH
 659: LD_INT 1
 661: ST_TO_ADDR
// uc_nation = 1 ;
 662: LD_ADDR_OWVAR 21
 666: PUSH
 667: LD_INT 1
 669: ST_TO_ADDR
// count = 0 ;
 670: LD_ADDR_VAR 0 6
 674: PUSH
 675: LD_INT 0
 677: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 678: LD_ADDR_EXP 1
 682: PUSH
 683: LD_STRING 10_JMM
 685: PPUSH
 686: LD_INT 1
 688: PPUSH
 689: CALL 9333 0 2
 693: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 694: LD_ADDR_EXP 20
 698: PUSH
 699: LD_EXP 20
 703: PUSH
 704: LD_EXP 1
 708: ADD
 709: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 710: LD_ADDR_EXP 10
 714: PUSH
 715: LD_STRING 10_Gary
 717: PPUSH
 718: LD_INT 1
 720: PPUSH
 721: CALL 9333 0 2
 725: ST_TO_ADDR
// if Gary then
 726: LD_EXP 10
 730: IFFALSE 748
// JMMSquad = JMMSquad ^ Gary ;
 732: LD_ADDR_EXP 20
 736: PUSH
 737: LD_EXP 20
 741: PUSH
 742: LD_EXP 10
 746: ADD
 747: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 748: LD_ADDR_EXP 5
 752: PUSH
 753: LD_STRING 10_Cyrus
 755: PPUSH
 756: LD_INT 1
 758: PPUSH
 759: CALL 9333 0 2
 763: ST_TO_ADDR
// if Cyrus then
 764: LD_EXP 5
 768: IFFALSE 786
// JMMSquad = JMMSquad ^ Cyrus ;
 770: LD_ADDR_EXP 20
 774: PUSH
 775: LD_EXP 20
 779: PUSH
 780: LD_EXP 5
 784: ADD
 785: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 786: LD_ADDR_EXP 4
 790: PUSH
 791: LD_STRING 10_Bobby
 793: PPUSH
 794: LD_INT 1
 796: PPUSH
 797: CALL 9333 0 2
 801: ST_TO_ADDR
// if Bobby then
 802: LD_EXP 4
 806: IFFALSE 824
// JMMSquad = JMMSquad ^ Bobby ;
 808: LD_ADDR_EXP 20
 812: PUSH
 813: LD_EXP 20
 817: PUSH
 818: LD_EXP 4
 822: ADD
 823: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 824: LD_ADDR_EXP 6
 828: PUSH
 829: LD_STRING 10_Lisa
 831: PPUSH
 832: LD_INT 1
 834: PPUSH
 835: CALL 9333 0 2
 839: ST_TO_ADDR
// if Lisa then
 840: LD_EXP 6
 844: IFFALSE 862
// JMMSquad = JMMSquad ^ Lisa ;
 846: LD_ADDR_EXP 20
 850: PUSH
 851: LD_EXP 20
 855: PUSH
 856: LD_EXP 6
 860: ADD
 861: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 862: LD_ADDR_EXP 2
 866: PUSH
 867: LD_STRING 10_Brown
 869: PPUSH
 870: LD_INT 1
 872: PPUSH
 873: CALL 9333 0 2
 877: ST_TO_ADDR
// if Brown then
 878: LD_EXP 2
 882: IFFALSE 900
// JMMSquad = JMMSquad ^ Brown ;
 884: LD_ADDR_EXP 20
 888: PUSH
 889: LD_EXP 20
 893: PUSH
 894: LD_EXP 2
 898: ADD
 899: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 900: LD_ADDR_EXP 3
 904: PUSH
 905: LD_STRING 10_Donaldson
 907: PPUSH
 908: LD_INT 1
 910: PPUSH
 911: CALL 9333 0 2
 915: ST_TO_ADDR
// if Donaldson then
 916: LD_EXP 3
 920: IFFALSE 938
// JMMSquad = JMMSquad ^ Donaldson ;
 922: LD_ADDR_EXP 20
 926: PUSH
 927: LD_EXP 20
 931: PUSH
 932: LD_EXP 3
 936: ADD
 937: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 938: LD_ADDR_EXP 7
 942: PUSH
 943: LD_STRING 10_Frank
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL 9333 0 2
 953: ST_TO_ADDR
// if Frank then
 954: LD_EXP 7
 958: IFFALSE 976
// JMMSquad = JMMSquad ^ Frank ;
 960: LD_ADDR_EXP 20
 964: PUSH
 965: LD_EXP 20
 969: PUSH
 970: LD_EXP 7
 974: ADD
 975: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
 976: LD_ADDR_EXP 9
 980: PUSH
 981: LD_STRING 10_Houten
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: CALL 9333 0 2
 991: ST_TO_ADDR
// if Houten then
 992: LD_EXP 9
 996: IFFALSE 1014
// JMMSquad = JMMSquad ^ Houten ;
 998: LD_ADDR_EXP 20
1002: PUSH
1003: LD_EXP 20
1007: PUSH
1008: LD_EXP 9
1012: ADD
1013: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1014: LD_ADDR_EXP 21
1018: PUSH
1019: LD_STRING OthersIn10
1021: PPUSH
1022: CALL_OW 31
1026: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1027: LD_ADDR_EXP 24
1031: PUSH
1032: LD_STRING Powell
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: CALL 9333 0 2
1042: ST_TO_ADDR
// for i in JMMSquad do
1043: LD_ADDR_VAR 0 2
1047: PUSH
1048: LD_EXP 20
1052: PUSH
1053: FOR_IN
1054: IFFALSE 1313
// begin if count < 3 then
1056: LD_VAR 0 6
1060: PUSH
1061: LD_INT 3
1063: LESS
1064: IFFALSE 1181
// begin vc_engine = 1 ;
1066: LD_ADDR_OWVAR 39
1070: PUSH
1071: LD_INT 1
1073: ST_TO_ADDR
// vc_control = 1 ;
1074: LD_ADDR_OWVAR 38
1078: PUSH
1079: LD_INT 1
1081: ST_TO_ADDR
// vc_weapon = 12 ;
1082: LD_ADDR_OWVAR 40
1086: PUSH
1087: LD_INT 12
1089: ST_TO_ADDR
// vc_chassis = 3 ;
1090: LD_ADDR_OWVAR 37
1094: PUSH
1095: LD_INT 3
1097: ST_TO_ADDR
// veh = CreateVehicle ;
1098: LD_ADDR_VAR 0 4
1102: PUSH
1103: CALL_OW 45
1107: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1108: LD_VAR 0 4
1112: PPUSH
1113: LD_INT 1
1115: PPUSH
1116: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1120: LD_VAR 0 4
1124: PPUSH
1125: LD_INT 2
1127: PPUSH
1128: LD_INT 0
1130: PPUSH
1131: CALL_OW 49
// if count mod 2 = 0 then
1135: LD_VAR 0 6
1139: PUSH
1140: LD_INT 2
1142: MOD
1143: PUSH
1144: LD_INT 0
1146: EQUAL
1147: IFFALSE 1166
// AddCargo ( veh , 1 , 100 ) else
1149: LD_VAR 0 4
1153: PPUSH
1154: LD_INT 1
1156: PPUSH
1157: LD_INT 100
1159: PPUSH
1160: CALL_OW 291
1164: GO 1181
// AddCargo ( veh , 3 , 100 ) end ;
1166: LD_VAR 0 4
1170: PPUSH
1171: LD_INT 3
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL_OW 291
// if count >= 3 then
1181: LD_VAR 0 6
1185: PUSH
1186: LD_INT 3
1188: GREATEREQUAL
1189: IFFALSE 1283
// begin vc_engine = 1 ;
1191: LD_ADDR_OWVAR 39
1195: PUSH
1196: LD_INT 1
1198: ST_TO_ADDR
// vc_control = 1 ;
1199: LD_ADDR_OWVAR 38
1203: PUSH
1204: LD_INT 1
1206: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1207: LD_ADDR_OWVAR 40
1211: PUSH
1212: LD_INT 3
1214: PUSH
1215: LD_INT 4
1217: PUSH
1218: LD_INT 5
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: LIST
1225: PUSH
1226: LD_INT 1
1228: PPUSH
1229: LD_INT 3
1231: PPUSH
1232: CALL_OW 12
1236: ARRAY
1237: ST_TO_ADDR
// vc_chassis = 3 ;
1238: LD_ADDR_OWVAR 37
1242: PUSH
1243: LD_INT 3
1245: ST_TO_ADDR
// veh = CreateVehicle ;
1246: LD_ADDR_VAR 0 4
1250: PUSH
1251: CALL_OW 45
1255: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1256: LD_VAR 0 4
1260: PPUSH
1261: LD_INT 1
1263: PPUSH
1264: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1268: LD_VAR 0 4
1272: PPUSH
1273: LD_INT 2
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 49
// end ; count = count + 1 ;
1283: LD_ADDR_VAR 0 6
1287: PUSH
1288: LD_VAR 0 6
1292: PUSH
1293: LD_INT 1
1295: PLUS
1296: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1297: LD_VAR 0 2
1301: PPUSH
1302: LD_VAR 0 4
1306: PPUSH
1307: CALL_OW 52
// end ;
1311: GO 1053
1313: POP
1314: POP
// for i in others10 do
1315: LD_ADDR_VAR 0 2
1319: PUSH
1320: LD_EXP 21
1324: PUSH
1325: FOR_IN
1326: IFFALSE 1452
// begin vc_engine = 1 ;
1328: LD_ADDR_OWVAR 39
1332: PUSH
1333: LD_INT 1
1335: ST_TO_ADDR
// vc_control = 1 ;
1336: LD_ADDR_OWVAR 38
1340: PUSH
1341: LD_INT 1
1343: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1344: LD_ADDR_OWVAR 40
1348: PUSH
1349: LD_INT 3
1351: PUSH
1352: LD_INT 4
1354: PUSH
1355: LD_INT 5
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: LIST
1362: PUSH
1363: LD_INT 1
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: CALL_OW 12
1373: ARRAY
1374: ST_TO_ADDR
// vc_chassis = 3 ;
1375: LD_ADDR_OWVAR 37
1379: PUSH
1380: LD_INT 3
1382: ST_TO_ADDR
// veh = CreateVehicle ;
1383: LD_ADDR_VAR 0 4
1387: PUSH
1388: CALL_OW 45
1392: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1393: LD_VAR 0 4
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1405: LD_VAR 0 4
1409: PPUSH
1410: LD_INT 2
1412: PPUSH
1413: LD_INT 0
1415: PPUSH
1416: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1420: LD_ADDR_EXP 28
1424: PUSH
1425: LD_EXP 28
1429: PUSH
1430: LD_VAR 0 4
1434: ADD
1435: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1436: LD_VAR 0 2
1440: PPUSH
1441: LD_VAR 0 4
1445: PPUSH
1446: CALL_OW 52
// end ;
1450: GO 1325
1452: POP
1453: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1454: LD_INT 22
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PUSH
1464: LD_INT 21
1466: PUSH
1467: LD_INT 1
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: PUSH
1474: EMPTY
1475: LIST
1476: LIST
1477: PPUSH
1478: CALL_OW 69
1482: PPUSH
1483: LD_INT 1
1485: PPUSH
1486: CALL_OW 336
// end ;
1490: LD_VAR 0 1
1494: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1495: LD_INT 0
1497: PPUSH
1498: PPUSH
1499: PPUSH
1500: PPUSH
1501: PPUSH
// uc_side = 1 ;
1502: LD_ADDR_OWVAR 20
1506: PUSH
1507: LD_INT 1
1509: ST_TO_ADDR
// uc_nation = 1 ;
1510: LD_ADDR_OWVAR 21
1514: PUSH
1515: LD_INT 1
1517: ST_TO_ADDR
// for i := 1 to 10 do
1518: LD_ADDR_VAR 0 2
1522: PUSH
1523: DOUBLE
1524: LD_INT 1
1526: DEC
1527: ST_TO_ADDR
1528: LD_INT 10
1530: PUSH
1531: FOR_TO
1532: IFFALSE 1714
// begin vc_engine = 1 ;
1534: LD_ADDR_OWVAR 39
1538: PUSH
1539: LD_INT 1
1541: ST_TO_ADDR
// vc_control = 1 ;
1542: LD_ADDR_OWVAR 38
1546: PUSH
1547: LD_INT 1
1549: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1550: LD_ADDR_OWVAR 40
1554: PUSH
1555: LD_INT 3
1557: PUSH
1558: LD_INT 4
1560: PUSH
1561: LD_INT 5
1563: PUSH
1564: LD_INT 12
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 1
1575: PPUSH
1576: LD_INT 4
1578: PPUSH
1579: CALL_OW 12
1583: ARRAY
1584: ST_TO_ADDR
// vc_chassis = 3 ;
1585: LD_ADDR_OWVAR 37
1589: PUSH
1590: LD_INT 3
1592: ST_TO_ADDR
// veh = CreateVehicle ;
1593: LD_ADDR_VAR 0 3
1597: PUSH
1598: CALL_OW 45
1602: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1603: LD_VAR 0 3
1607: PPUSH
1608: LD_INT 1
1610: PPUSH
1611: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_INT 2
1622: PPUSH
1623: LD_INT 0
1625: PPUSH
1626: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1630: LD_ADDR_EXP 28
1634: PUSH
1635: LD_EXP 28
1639: PUSH
1640: LD_VAR 0 3
1644: ADD
1645: ST_TO_ADDR
// if vc_weapon = 12 then
1646: LD_OWVAR 40
1650: PUSH
1651: LD_INT 12
1653: EQUAL
1654: IFFALSE 1712
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1656: LD_ADDR_VAR 0 4
1660: PUSH
1661: LD_INT 5
1663: PPUSH
1664: LD_INT 10
1666: PPUSH
1667: CALL_OW 12
1671: PUSH
1672: LD_INT 10
1674: MUL
1675: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1676: LD_VAR 0 3
1680: PPUSH
1681: LD_INT 1
1683: PUSH
1684: LD_INT 3
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_INT 2
1696: PPUSH
1697: CALL_OW 12
1701: ARRAY
1702: PPUSH
1703: LD_VAR 0 4
1707: PPUSH
1708: CALL_OW 291
// end ; end ;
1712: GO 1531
1714: POP
1715: POP
// end ;
1716: LD_VAR 0 1
1720: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1721: LD_INT 0
1723: PPUSH
1724: PPUSH
1725: PPUSH
// uc_side = 4 ;
1726: LD_ADDR_OWVAR 20
1730: PUSH
1731: LD_INT 4
1733: ST_TO_ADDR
// uc_nation = 1 ;
1734: LD_ADDR_OWVAR 21
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1742: LD_ADDR_EXP 11
1746: PUSH
1747: LD_STRING Simms
1749: PPUSH
1750: LD_INT 0
1752: PPUSH
1753: CALL 9333 0 2
1757: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1758: LD_ADDR_EXP 12
1762: PUSH
1763: LD_STRING 08_Denis
1765: PPUSH
1766: LD_INT 1
1768: PPUSH
1769: CALL 9333 0 2
1773: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1774: LD_ADDR_EXP 13
1778: PUSH
1779: LD_STRING 08_Joan
1781: PPUSH
1782: LD_INT 1
1784: PPUSH
1785: CALL 9333 0 2
1789: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1790: LD_ADDR_EXP 14
1794: PUSH
1795: LD_STRING Khatam
1797: PPUSH
1798: LD_INT 1
1800: PPUSH
1801: CALL 9333 0 2
1805: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1806: LD_ADDR_EXP 15
1810: PUSH
1811: LD_STRING Gladstone
1813: PPUSH
1814: LD_INT 1
1816: PPUSH
1817: CALL 9333 0 2
1821: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1822: LD_ADDR_EXP 17
1826: PUSH
1827: LD_STRING DeltaDoctor
1829: PPUSH
1830: LD_INT 1
1832: PPUSH
1833: CALL 9333 0 2
1837: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1838: LD_STRING 08_Frank
1840: PPUSH
1841: CALL_OW 28
1845: PUSH
1846: LD_INT 1
1848: EQUAL
1849: IFFALSE 1867
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1851: LD_ADDR_EXP 8
1855: PUSH
1856: LD_STRING Yamoko
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: CALL 9333 0 2
1866: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1867: LD_ADDR_EXP 22
1871: PUSH
1872: LD_STRING 09_others
1874: PPUSH
1875: CALL_OW 31
1879: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1880: LD_ADDR_EXP 23
1884: PUSH
1885: LD_STRING 09_apes
1887: PPUSH
1888: CALL_OW 31
1892: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1893: LD_EXP 11
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1908: LD_EXP 12
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1923: LD_EXP 13
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1938: LD_EXP 14
1942: PPUSH
1943: LD_INT 1
1945: PPUSH
1946: LD_INT 0
1948: PPUSH
1949: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1953: LD_EXP 15
1957: PPUSH
1958: LD_INT 1
1960: PPUSH
1961: LD_INT 0
1963: PPUSH
1964: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1968: LD_EXP 17
1972: PPUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 0
1978: PPUSH
1979: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
1983: LD_EXP 8
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: LD_INT 0
1993: PPUSH
1994: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1998: LD_EXP 11
2002: PUSH
2003: LD_EXP 14
2007: PUSH
2008: LD_EXP 12
2012: PUSH
2013: LD_EXP 15
2017: PUSH
2018: LD_EXP 17
2022: PUSH
2023: LD_EXP 13
2027: PUSH
2028: EMPTY
2029: LIST
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: PPUSH
2036: LD_INT 4
2038: PPUSH
2039: CALL_OW 336
// if others09 > 2 then
2043: LD_EXP 22
2047: PUSH
2048: LD_INT 2
2050: GREATER
2051: IFFALSE 2114
// begin for i := 1 to 3 do
2053: LD_ADDR_VAR 0 2
2057: PUSH
2058: DOUBLE
2059: LD_INT 1
2061: DEC
2062: ST_TO_ADDR
2063: LD_INT 3
2065: PUSH
2066: FOR_TO
2067: IFFALSE 2110
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2069: LD_EXP 22
2073: PUSH
2074: LD_VAR 0 2
2078: ARRAY
2079: PPUSH
2080: LD_INT 1
2082: PPUSH
2083: LD_INT 0
2085: PPUSH
2086: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2090: LD_EXP 22
2094: PUSH
2095: LD_VAR 0 2
2099: ARRAY
2100: PPUSH
2101: LD_INT 2
2103: PPUSH
2104: CALL_OW 336
// end ;
2108: GO 2066
2110: POP
2111: POP
// end else
2112: GO 2158
// begin for i in others09 do
2114: LD_ADDR_VAR 0 2
2118: PUSH
2119: LD_EXP 22
2123: PUSH
2124: FOR_IN
2125: IFFALSE 2156
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2127: LD_VAR 0 2
2131: PPUSH
2132: LD_INT 1
2134: PPUSH
2135: LD_INT 0
2137: PPUSH
2138: CALL_OW 49
// SetClass ( i , 2 ) ;
2142: LD_VAR 0 2
2146: PPUSH
2147: LD_INT 2
2149: PPUSH
2150: CALL_OW 336
// end ;
2154: GO 2124
2156: POP
2157: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2158: LD_INT 22
2160: PUSH
2161: LD_INT 4
2163: PUSH
2164: EMPTY
2165: LIST
2166: LIST
2167: PUSH
2168: LD_INT 25
2170: PUSH
2171: LD_INT 2
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PPUSH
2182: CALL_OW 69
2186: PUSH
2187: LD_INT 0
2189: EQUAL
2190: IFFALSE 2308
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2192: LD_ADDR_VAR 0 3
2196: PUSH
2197: LD_INT 22
2199: PUSH
2200: LD_INT 4
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 25
2209: PUSH
2210: LD_INT 2
2212: PUSH
2213: EMPTY
2214: LIST
2215: LIST
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PPUSH
2221: CALL_OW 69
2225: PUSH
2226: LD_EXP 11
2230: PUSH
2231: LD_EXP 14
2235: PUSH
2236: LD_EXP 12
2240: PUSH
2241: LD_EXP 15
2245: PUSH
2246: LD_EXP 17
2250: PUSH
2251: LD_EXP 13
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: LIST
2260: LIST
2261: LIST
2262: LIST
2263: DIFF
2264: ST_TO_ADDR
// if not tmp then
2265: LD_VAR 0 3
2269: NOT
2270: IFFALSE 2292
// begin if Denis then
2272: LD_EXP 12
2276: IFFALSE 2290
// SetClass ( Denis , 2 ) ;
2278: LD_EXP 12
2282: PPUSH
2283: LD_INT 2
2285: PPUSH
2286: CALL_OW 336
// exit ;
2290: GO 2458
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2292: LD_VAR 0 3
2296: PUSH
2297: LD_INT 1
2299: ARRAY
2300: PPUSH
2301: LD_INT 2
2303: PPUSH
2304: CALL_OW 336
// end ; for i in ape09 do
2308: LD_ADDR_VAR 0 2
2312: PUSH
2313: LD_EXP 23
2317: PUSH
2318: FOR_IN
2319: IFFALSE 2338
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2321: LD_VAR 0 2
2325: PPUSH
2326: LD_INT 1
2328: PPUSH
2329: LD_INT 0
2331: PPUSH
2332: CALL_OW 49
2336: GO 2318
2338: POP
2339: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2340: LD_INT 22
2342: PUSH
2343: LD_INT 4
2345: PUSH
2346: EMPTY
2347: LIST
2348: LIST
2349: PUSH
2350: LD_INT 25
2352: PUSH
2353: LD_INT 2
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: LIST
2363: PPUSH
2364: CALL_OW 69
2368: PPUSH
2369: LD_INT 0
2371: PPUSH
2372: LD_INT 101
2374: PPUSH
2375: LD_INT 30
2377: PPUSH
2378: LD_INT 2
2380: PPUSH
2381: CALL_OW 205
// uc_side = 1 ;
2385: LD_ADDR_OWVAR 20
2389: PUSH
2390: LD_INT 1
2392: ST_TO_ADDR
// hc_class := 1 ;
2393: LD_ADDR_OWVAR 28
2397: PUSH
2398: LD_INT 1
2400: ST_TO_ADDR
// hc_sex := sex_female ;
2401: LD_ADDR_OWVAR 27
2405: PUSH
2406: LD_INT 2
2408: ST_TO_ADDR
// hc_gallery :=  ;
2409: LD_ADDR_OWVAR 33
2413: PUSH
2414: LD_STRING 
2416: ST_TO_ADDR
// hc_name :=  ;
2417: LD_ADDR_OWVAR 26
2421: PUSH
2422: LD_STRING 
2424: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2425: LD_ADDR_OWVAR 31
2429: PUSH
2430: LD_INT 1
2432: PUSH
2433: LD_INT 7
2435: PUSH
2436: LD_INT 1
2438: PUSH
2439: LD_INT 0
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: LIST
2446: LIST
2447: ST_TO_ADDR
// AmScout = CreateHuman ;
2448: LD_ADDR_EXP 18
2452: PUSH
2453: CALL_OW 44
2457: ST_TO_ADDR
// end ;
2458: LD_VAR 0 1
2462: RET
// export function PrepareCornell ; begin
2463: LD_INT 0
2465: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2466: LD_INT 4
2468: PPUSH
2469: LD_INT 4
2471: PPUSH
2472: CALL_OW 343
// uc_side = 4 ;
2476: LD_ADDR_OWVAR 20
2480: PUSH
2481: LD_INT 4
2483: ST_TO_ADDR
// uc_nation = 1 ;
2484: LD_ADDR_OWVAR 21
2488: PUSH
2489: LD_INT 1
2491: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2492: LD_ADDR_EXP 19
2496: PUSH
2497: LD_STRING 03_Cornel
2499: PPUSH
2500: LD_INT 1
2502: PPUSH
2503: CALL 9333 0 2
2507: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2508: LD_EXP 19
2512: PPUSH
2513: LD_INT 8
2515: PPUSH
2516: LD_INT 0
2518: PPUSH
2519: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2523: LD_EXP 19
2527: PPUSH
2528: LD_INT 350
2530: PPUSH
2531: CALL_OW 234
// if IsInUnit ( JMM ) then
2535: LD_EXP 1
2539: PPUSH
2540: CALL_OW 310
2544: IFFALSE 2587
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2546: LD_EXP 19
2550: PPUSH
2551: LD_EXP 1
2555: PPUSH
2556: CALL_OW 310
2560: PPUSH
2561: CALL_OW 250
2565: PPUSH
2566: LD_EXP 1
2570: PPUSH
2571: CALL_OW 310
2575: PPUSH
2576: CALL_OW 251
2580: PPUSH
2581: CALL_OW 111
2585: GO 2616
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2587: LD_EXP 19
2591: PPUSH
2592: LD_EXP 1
2596: PPUSH
2597: CALL_OW 250
2601: PPUSH
2602: LD_EXP 1
2606: PPUSH
2607: CALL_OW 251
2611: PPUSH
2612: CALL_OW 111
// end ; end_of_file
2616: LD_VAR 0 1
2620: RET
// export function PrepareRussians ; var i , un ; begin
2621: LD_INT 0
2623: PPUSH
2624: PPUSH
2625: PPUSH
// uc_side = 3 ;
2626: LD_ADDR_OWVAR 20
2630: PUSH
2631: LD_INT 3
2633: ST_TO_ADDR
// uc_nation = 3 ;
2634: LD_ADDR_OWVAR 21
2638: PUSH
2639: LD_INT 3
2641: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2642: LD_ADDR_EXP 25
2646: PUSH
2647: LD_STRING Tsaritsyn
2649: PPUSH
2650: LD_INT 0
2652: PPUSH
2653: CALL 9333 0 2
2657: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2658: LD_EXP 25
2662: PPUSH
2663: LD_INT 3
2665: PPUSH
2666: LD_INT 0
2668: PPUSH
2669: CALL_OW 49
// for i = 1 to 14 do
2673: LD_ADDR_VAR 0 2
2677: PUSH
2678: DOUBLE
2679: LD_INT 1
2681: DEC
2682: ST_TO_ADDR
2683: LD_INT 14
2685: PUSH
2686: FOR_TO
2687: IFFALSE 2773
// begin uc_side = 3 ;
2689: LD_ADDR_OWVAR 20
2693: PUSH
2694: LD_INT 3
2696: ST_TO_ADDR
// uc_nation = 3 ;
2697: LD_ADDR_OWVAR 21
2701: PUSH
2702: LD_INT 3
2704: ST_TO_ADDR
// hc_gallery =  ;
2705: LD_ADDR_OWVAR 33
2709: PUSH
2710: LD_STRING 
2712: ST_TO_ADDR
// hc_name =  ;
2713: LD_ADDR_OWVAR 26
2717: PUSH
2718: LD_STRING 
2720: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2721: LD_INT 0
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: LD_EXP 36
2731: PPUSH
2732: LD_EXP 37
2736: PPUSH
2737: CALL_OW 12
2741: PPUSH
2742: CALL_OW 380
// un = CreateHuman ;
2746: LD_ADDR_VAR 0 3
2750: PUSH
2751: CALL_OW 44
2755: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2756: LD_VAR 0 3
2760: PPUSH
2761: LD_INT 3
2763: PPUSH
2764: LD_INT 0
2766: PPUSH
2767: CALL_OW 49
// end ;
2771: GO 2686
2773: POP
2774: POP
// for i = 1 to 6 do
2775: LD_ADDR_VAR 0 2
2779: PUSH
2780: DOUBLE
2781: LD_INT 1
2783: DEC
2784: ST_TO_ADDR
2785: LD_INT 6
2787: PUSH
2788: FOR_TO
2789: IFFALSE 2875
// begin uc_side = 3 ;
2791: LD_ADDR_OWVAR 20
2795: PUSH
2796: LD_INT 3
2798: ST_TO_ADDR
// uc_nation = 3 ;
2799: LD_ADDR_OWVAR 21
2803: PUSH
2804: LD_INT 3
2806: ST_TO_ADDR
// hc_gallery =  ;
2807: LD_ADDR_OWVAR 33
2811: PUSH
2812: LD_STRING 
2814: ST_TO_ADDR
// hc_name =  ;
2815: LD_ADDR_OWVAR 26
2819: PUSH
2820: LD_STRING 
2822: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2823: LD_INT 0
2825: PPUSH
2826: LD_INT 2
2828: PPUSH
2829: LD_EXP 36
2833: PPUSH
2834: LD_EXP 37
2838: PPUSH
2839: CALL_OW 12
2843: PPUSH
2844: CALL_OW 380
// un = CreateHuman ;
2848: LD_ADDR_VAR 0 3
2852: PUSH
2853: CALL_OW 44
2857: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2858: LD_VAR 0 3
2862: PPUSH
2863: LD_INT 3
2865: PPUSH
2866: LD_INT 0
2868: PPUSH
2869: CALL_OW 49
// end ;
2873: GO 2788
2875: POP
2876: POP
// for i = 1 to 6 do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_INT 6
2889: PUSH
2890: FOR_TO
2891: IFFALSE 2977
// begin uc_side = 3 ;
2893: LD_ADDR_OWVAR 20
2897: PUSH
2898: LD_INT 3
2900: ST_TO_ADDR
// uc_nation = 3 ;
2901: LD_ADDR_OWVAR 21
2905: PUSH
2906: LD_INT 3
2908: ST_TO_ADDR
// hc_gallery =  ;
2909: LD_ADDR_OWVAR 33
2913: PUSH
2914: LD_STRING 
2916: ST_TO_ADDR
// hc_name =  ;
2917: LD_ADDR_OWVAR 26
2921: PUSH
2922: LD_STRING 
2924: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2925: LD_INT 0
2927: PPUSH
2928: LD_INT 3
2930: PPUSH
2931: LD_EXP 36
2935: PPUSH
2936: LD_EXP 37
2940: PPUSH
2941: CALL_OW 12
2945: PPUSH
2946: CALL_OW 380
// un = CreateHuman ;
2950: LD_ADDR_VAR 0 3
2954: PUSH
2955: CALL_OW 44
2959: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2960: LD_VAR 0 3
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_INT 0
2970: PPUSH
2971: CALL_OW 49
// end ;
2975: GO 2890
2977: POP
2978: POP
// for i = 1 to 4 do
2979: LD_ADDR_VAR 0 2
2983: PUSH
2984: DOUBLE
2985: LD_INT 1
2987: DEC
2988: ST_TO_ADDR
2989: LD_INT 4
2991: PUSH
2992: FOR_TO
2993: IFFALSE 3079
// begin uc_side = 3 ;
2995: LD_ADDR_OWVAR 20
2999: PUSH
3000: LD_INT 3
3002: ST_TO_ADDR
// uc_nation = 3 ;
3003: LD_ADDR_OWVAR 21
3007: PUSH
3008: LD_INT 3
3010: ST_TO_ADDR
// hc_gallery =  ;
3011: LD_ADDR_OWVAR 33
3015: PUSH
3016: LD_STRING 
3018: ST_TO_ADDR
// hc_name =  ;
3019: LD_ADDR_OWVAR 26
3023: PUSH
3024: LD_STRING 
3026: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3027: LD_INT 0
3029: PPUSH
3030: LD_INT 4
3032: PPUSH
3033: LD_EXP 36
3037: PPUSH
3038: LD_EXP 37
3042: PPUSH
3043: CALL_OW 12
3047: PPUSH
3048: CALL_OW 380
// un = CreateHuman ;
3052: LD_ADDR_VAR 0 3
3056: PUSH
3057: CALL_OW 44
3061: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3062: LD_VAR 0 3
3066: PPUSH
3067: LD_INT 3
3069: PPUSH
3070: LD_INT 0
3072: PPUSH
3073: CALL_OW 49
// end ;
3077: GO 2992
3079: POP
3080: POP
// end ; end_of_file
3081: LD_VAR 0 1
3085: RET
// export function PrepareArabianCommander ; begin
3086: LD_INT 0
3088: PPUSH
// uc_side = 2 ;
3089: LD_ADDR_OWVAR 20
3093: PUSH
3094: LD_INT 2
3096: ST_TO_ADDR
// uc_nation = 2 ;
3097: LD_ADDR_OWVAR 21
3101: PUSH
3102: LD_INT 2
3104: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3105: LD_ADDR_EXP 26
3109: PUSH
3110: LD_STRING Dietrich
3112: PPUSH
3113: CALL_OW 25
3117: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3118: LD_EXP 26
3122: PPUSH
3123: LD_INT 4
3125: PPUSH
3126: LD_INT 0
3128: PPUSH
3129: CALL_OW 49
// end ;
3133: LD_VAR 0 1
3137: RET
// export function PrepareArabian ; var i , un , veh ; begin
3138: LD_INT 0
3140: PPUSH
3141: PPUSH
3142: PPUSH
3143: PPUSH
// uc_side := 2 ;
3144: LD_ADDR_OWVAR 20
3148: PUSH
3149: LD_INT 2
3151: ST_TO_ADDR
// uc_nation := 2 ;
3152: LD_ADDR_OWVAR 21
3156: PUSH
3157: LD_INT 2
3159: ST_TO_ADDR
// if not Ahmed then
3160: LD_EXP 27
3164: NOT
3165: IFFALSE 3233
// begin InitHc ;
3167: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3171: LD_INT 1
3173: PPUSH
3174: LD_INT 1
3176: PPUSH
3177: LD_EXP 36
3181: PPUSH
3182: LD_EXP 37
3186: PUSH
3187: LD_INT 1
3189: PLUS
3190: PPUSH
3191: CALL_OW 12
3195: PPUSH
3196: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3200: LD_ADDR_OWVAR 26
3204: PUSH
3205: LD_STRING Ahmed Abbasid
3207: ST_TO_ADDR
// Ahmed := CreateHuman ;
3208: LD_ADDR_EXP 27
3212: PUSH
3213: CALL_OW 44
3217: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3218: LD_EXP 27
3222: PPUSH
3223: LD_INT 4
3225: PPUSH
3226: LD_INT 0
3228: PPUSH
3229: CALL_OW 49
// end ; for i = 1 to 3 do
3233: LD_ADDR_VAR 0 2
3237: PUSH
3238: DOUBLE
3239: LD_INT 1
3241: DEC
3242: ST_TO_ADDR
3243: LD_INT 3
3245: PUSH
3246: FOR_TO
3247: IFFALSE 3333
// begin uc_side = 2 ;
3249: LD_ADDR_OWVAR 20
3253: PUSH
3254: LD_INT 2
3256: ST_TO_ADDR
// uc_nation = 2 ;
3257: LD_ADDR_OWVAR 21
3261: PUSH
3262: LD_INT 2
3264: ST_TO_ADDR
// hc_gallery =  ;
3265: LD_ADDR_OWVAR 33
3269: PUSH
3270: LD_STRING 
3272: ST_TO_ADDR
// hc_name =  ;
3273: LD_ADDR_OWVAR 26
3277: PUSH
3278: LD_STRING 
3280: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3281: LD_INT 0
3283: PPUSH
3284: LD_INT 1
3286: PPUSH
3287: LD_EXP 36
3291: PPUSH
3292: LD_EXP 37
3296: PPUSH
3297: CALL_OW 12
3301: PPUSH
3302: CALL_OW 380
// un = CreateHuman ;
3306: LD_ADDR_VAR 0 3
3310: PUSH
3311: CALL_OW 44
3315: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3316: LD_VAR 0 3
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_INT 0
3326: PPUSH
3327: CALL_OW 49
// end ;
3331: GO 3246
3333: POP
3334: POP
// for i = 1 to 6 do
3335: LD_ADDR_VAR 0 2
3339: PUSH
3340: DOUBLE
3341: LD_INT 1
3343: DEC
3344: ST_TO_ADDR
3345: LD_INT 6
3347: PUSH
3348: FOR_TO
3349: IFFALSE 3435
// begin uc_side = 2 ;
3351: LD_ADDR_OWVAR 20
3355: PUSH
3356: LD_INT 2
3358: ST_TO_ADDR
// uc_nation = 2 ;
3359: LD_ADDR_OWVAR 21
3363: PUSH
3364: LD_INT 2
3366: ST_TO_ADDR
// hc_gallery =  ;
3367: LD_ADDR_OWVAR 33
3371: PUSH
3372: LD_STRING 
3374: ST_TO_ADDR
// hc_name =  ;
3375: LD_ADDR_OWVAR 26
3379: PUSH
3380: LD_STRING 
3382: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3383: LD_INT 0
3385: PPUSH
3386: LD_INT 2
3388: PPUSH
3389: LD_EXP 36
3393: PPUSH
3394: LD_EXP 37
3398: PPUSH
3399: CALL_OW 12
3403: PPUSH
3404: CALL_OW 380
// un = CreateHuman ;
3408: LD_ADDR_VAR 0 3
3412: PUSH
3413: CALL_OW 44
3417: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3418: LD_VAR 0 3
3422: PPUSH
3423: LD_INT 4
3425: PPUSH
3426: LD_INT 0
3428: PPUSH
3429: CALL_OW 49
// end ;
3433: GO 3348
3435: POP
3436: POP
// for i = 1 to 6 do
3437: LD_ADDR_VAR 0 2
3441: PUSH
3442: DOUBLE
3443: LD_INT 1
3445: DEC
3446: ST_TO_ADDR
3447: LD_INT 6
3449: PUSH
3450: FOR_TO
3451: IFFALSE 3537
// begin uc_side = 2 ;
3453: LD_ADDR_OWVAR 20
3457: PUSH
3458: LD_INT 2
3460: ST_TO_ADDR
// uc_nation = 2 ;
3461: LD_ADDR_OWVAR 21
3465: PUSH
3466: LD_INT 2
3468: ST_TO_ADDR
// hc_gallery =  ;
3469: LD_ADDR_OWVAR 33
3473: PUSH
3474: LD_STRING 
3476: ST_TO_ADDR
// hc_name =  ;
3477: LD_ADDR_OWVAR 26
3481: PUSH
3482: LD_STRING 
3484: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3485: LD_INT 0
3487: PPUSH
3488: LD_INT 1
3490: PPUSH
3491: LD_EXP 36
3495: PPUSH
3496: LD_EXP 37
3500: PPUSH
3501: CALL_OW 12
3505: PPUSH
3506: CALL_OW 380
// un = CreateHuman ;
3510: LD_ADDR_VAR 0 3
3514: PUSH
3515: CALL_OW 44
3519: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3520: LD_VAR 0 3
3524: PPUSH
3525: LD_INT 4
3527: PPUSH
3528: LD_INT 0
3530: PPUSH
3531: CALL_OW 49
// end ;
3535: GO 3450
3537: POP
3538: POP
// for i = 1 to 4 do
3539: LD_ADDR_VAR 0 2
3543: PUSH
3544: DOUBLE
3545: LD_INT 1
3547: DEC
3548: ST_TO_ADDR
3549: LD_INT 4
3551: PUSH
3552: FOR_TO
3553: IFFALSE 3639
// begin uc_side = 2 ;
3555: LD_ADDR_OWVAR 20
3559: PUSH
3560: LD_INT 2
3562: ST_TO_ADDR
// uc_nation = 2 ;
3563: LD_ADDR_OWVAR 21
3567: PUSH
3568: LD_INT 2
3570: ST_TO_ADDR
// hc_gallery =  ;
3571: LD_ADDR_OWVAR 33
3575: PUSH
3576: LD_STRING 
3578: ST_TO_ADDR
// hc_name =  ;
3579: LD_ADDR_OWVAR 26
3583: PUSH
3584: LD_STRING 
3586: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3587: LD_INT 0
3589: PPUSH
3590: LD_INT 4
3592: PPUSH
3593: LD_EXP 36
3597: PPUSH
3598: LD_EXP 37
3602: PPUSH
3603: CALL_OW 12
3607: PPUSH
3608: CALL_OW 380
// un = CreateHuman ;
3612: LD_ADDR_VAR 0 3
3616: PUSH
3617: CALL_OW 44
3621: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3622: LD_VAR 0 3
3626: PPUSH
3627: LD_INT 4
3629: PPUSH
3630: LD_INT 0
3632: PPUSH
3633: CALL_OW 49
// end ;
3637: GO 3552
3639: POP
3640: POP
// for i = 1 to 2 do
3641: LD_ADDR_VAR 0 2
3645: PUSH
3646: DOUBLE
3647: LD_INT 1
3649: DEC
3650: ST_TO_ADDR
3651: LD_INT 2
3653: PUSH
3654: FOR_TO
3655: IFFALSE 3785
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3657: LD_ADDR_VAR 0 4
3661: PUSH
3662: LD_INT 22
3664: PUSH
3665: LD_INT 2
3667: PUSH
3668: EMPTY
3669: LIST
3670: LIST
3671: PUSH
3672: LD_INT 21
3674: PUSH
3675: LD_INT 2
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: PUSH
3682: LD_INT 58
3684: PUSH
3685: EMPTY
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 69
3697: ST_TO_ADDR
// uc_side = 2 ;
3698: LD_ADDR_OWVAR 20
3702: PUSH
3703: LD_INT 2
3705: ST_TO_ADDR
// uc_nation = 2 ;
3706: LD_ADDR_OWVAR 21
3710: PUSH
3711: LD_INT 2
3713: ST_TO_ADDR
// hc_gallery =  ;
3714: LD_ADDR_OWVAR 33
3718: PUSH
3719: LD_STRING 
3721: ST_TO_ADDR
// hc_name =  ;
3722: LD_ADDR_OWVAR 26
3726: PUSH
3727: LD_STRING 
3729: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3730: LD_INT 0
3732: PPUSH
3733: LD_INT 3
3735: PPUSH
3736: LD_EXP 36
3740: PPUSH
3741: LD_EXP 37
3745: PPUSH
3746: CALL_OW 12
3750: PPUSH
3751: CALL_OW 380
// un = CreateHuman ;
3755: LD_ADDR_VAR 0 3
3759: PUSH
3760: CALL_OW 44
3764: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3765: LD_VAR 0 3
3769: PPUSH
3770: LD_VAR 0 4
3774: PUSH
3775: LD_INT 1
3777: ARRAY
3778: PPUSH
3779: CALL_OW 52
// end ;
3783: GO 3654
3785: POP
3786: POP
// end ;
3787: LD_VAR 0 1
3791: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3792: LD_INT 0
3794: PPUSH
3795: PPUSH
3796: PPUSH
3797: PPUSH
3798: PPUSH
3799: PPUSH
// for i := 1 to 2 do
3800: LD_ADDR_VAR 0 2
3804: PUSH
3805: DOUBLE
3806: LD_INT 1
3808: DEC
3809: ST_TO_ADDR
3810: LD_INT 2
3812: PUSH
3813: FOR_TO
3814: IFFALSE 3940
// begin uc_side = 5 ;
3816: LD_ADDR_OWVAR 20
3820: PUSH
3821: LD_INT 5
3823: ST_TO_ADDR
// uc_nation = 2 ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_INT 2
3831: ST_TO_ADDR
// vc_chassis := 31 ;
3832: LD_ADDR_OWVAR 37
3836: PUSH
3837: LD_INT 31
3839: ST_TO_ADDR
// vc_control := control_rider ;
3840: LD_ADDR_OWVAR 38
3844: PUSH
3845: LD_INT 4
3847: ST_TO_ADDR
// animal := CreateVehicle ;
3848: LD_ADDR_VAR 0 3
3852: PUSH
3853: CALL_OW 45
3857: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3858: LD_VAR 0 3
3862: PPUSH
3863: LD_INT 7
3865: PPUSH
3866: LD_INT 0
3868: PPUSH
3869: CALL_OW 49
// hc_gallery =  ;
3873: LD_ADDR_OWVAR 33
3877: PUSH
3878: LD_STRING 
3880: ST_TO_ADDR
// hc_name =  ;
3881: LD_ADDR_OWVAR 26
3885: PUSH
3886: LD_STRING 
3888: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3889: LD_INT 0
3891: PPUSH
3892: LD_INT 11
3894: PPUSH
3895: LD_EXP 36
3899: PPUSH
3900: LD_EXP 37
3904: PPUSH
3905: CALL_OW 12
3909: PPUSH
3910: CALL_OW 380
// un = CreateHuman ;
3914: LD_ADDR_VAR 0 4
3918: PUSH
3919: CALL_OW 44
3923: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3924: LD_VAR 0 4
3928: PPUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 52
// end ;
3938: GO 3813
3940: POP
3941: POP
// repeat wait ( 0 0$1 ) ;
3942: LD_INT 35
3944: PPUSH
3945: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3949: LD_ADDR_VAR 0 5
3953: PUSH
3954: LD_INT 22
3956: PUSH
3957: LD_INT 1
3959: PUSH
3960: EMPTY
3961: LIST
3962: LIST
3963: PPUSH
3964: CALL_OW 69
3968: PPUSH
3969: LD_VAR 0 2
3973: PPUSH
3974: CALL_OW 74
3978: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3979: LD_ADDR_VAR 0 6
3983: PUSH
3984: LD_INT 22
3986: PUSH
3987: LD_INT 1
3989: PUSH
3990: EMPTY
3991: LIST
3992: LIST
3993: PUSH
3994: LD_INT 2
3996: PUSH
3997: LD_INT 59
3999: PUSH
4000: EMPTY
4001: LIST
4002: PUSH
4003: LD_INT 21
4005: PUSH
4006: LD_INT 1
4008: PUSH
4009: EMPTY
4010: LIST
4011: LIST
4012: PUSH
4013: LD_INT 21
4015: PUSH
4016: LD_INT 2
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: EMPTY
4024: LIST
4025: LIST
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: PPUSH
4036: CALL_OW 69
4040: PPUSH
4041: LD_VAR 0 2
4045: PPUSH
4046: CALL_OW 74
4050: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4051: LD_ADDR_VAR 0 2
4055: PUSH
4056: LD_INT 22
4058: PUSH
4059: LD_INT 5
4061: PUSH
4062: EMPTY
4063: LIST
4064: LIST
4065: PUSH
4066: LD_INT 25
4068: PUSH
4069: LD_INT 11
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PUSH
4076: EMPTY
4077: LIST
4078: LIST
4079: PPUSH
4080: CALL_OW 69
4084: PUSH
4085: FOR_IN
4086: IFFALSE 4156
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4088: LD_VAR 0 2
4092: PPUSH
4093: LD_VAR 0 5
4097: PPUSH
4098: CALL_OW 296
4102: PUSH
4103: LD_INT 8
4105: PLUS
4106: PUSH
4107: LD_VAR 0 2
4111: PPUSH
4112: LD_VAR 0 6
4116: PPUSH
4117: CALL_OW 296
4121: LESS
4122: IFFALSE 4140
// ComAttackUnit ( i , target1 ) else
4124: LD_VAR 0 2
4128: PPUSH
4129: LD_VAR 0 5
4133: PPUSH
4134: CALL_OW 115
4138: GO 4154
// ComAttackUnit ( i , target2 ) ;
4140: LD_VAR 0 2
4144: PPUSH
4145: LD_VAR 0 6
4149: PPUSH
4150: CALL_OW 115
// end ;
4154: GO 4085
4156: POP
4157: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4158: LD_INT 22
4160: PUSH
4161: LD_INT 5
4163: PUSH
4164: EMPTY
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 25
4170: PUSH
4171: LD_INT 11
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PPUSH
4182: CALL_OW 69
4186: PUSH
4187: LD_INT 0
4189: EQUAL
4190: PUSH
4191: LD_INT 22
4193: PUSH
4194: LD_INT 1
4196: PUSH
4197: EMPTY
4198: LIST
4199: LIST
4200: PPUSH
4201: CALL_OW 69
4205: PUSH
4206: LD_INT 0
4208: EQUAL
4209: OR
4210: IFFALSE 3942
// end ; end_of_file
4212: LD_VAR 0 1
4216: RET
// every 1 do
4217: GO 4219
4219: DISABLE
// begin InGameOn ;
4220: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4224: LD_INT 1
4226: PPUSH
4227: LD_INT 19
4229: PPUSH
4230: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4234: LD_EXP 11
4238: PPUSH
4239: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4243: LD_INT 22
4245: PUSH
4246: LD_INT 4
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: PUSH
4253: LD_INT 25
4255: PUSH
4256: LD_INT 2
4258: PUSH
4259: EMPTY
4260: LIST
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 69
4271: IFFALSE 4319
// begin repeat wait ( 0 0$1 ) ;
4273: LD_INT 35
4275: PPUSH
4276: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4280: LD_INT 22
4282: PUSH
4283: LD_INT 4
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 30
4292: PUSH
4293: LD_INT 0
4295: PUSH
4296: EMPTY
4297: LIST
4298: LIST
4299: PUSH
4300: EMPTY
4301: LIST
4302: LIST
4303: PPUSH
4304: CALL_OW 69
4308: IFFALSE 4273
// Wait ( 0 0$1 ) ;
4310: LD_INT 35
4312: PPUSH
4313: CALL_OW 67
// end else
4317: GO 4326
// Wait ( 0 0$3 ) ;
4319: LD_INT 105
4321: PPUSH
4322: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4326: LD_EXP 1
4330: PPUSH
4331: CALL_OW 310
4335: PPUSH
4336: CALL_OW 85
// Wait ( 0 0$1 ) ;
4340: LD_INT 35
4342: PPUSH
4343: CALL_OW 67
// if IsOk ( Gary ) then
4347: LD_EXP 10
4351: PPUSH
4352: CALL_OW 302
4356: IFFALSE 4394
// begin Say ( Gary , D2-Gary-1 ) ;
4358: LD_EXP 10
4362: PPUSH
4363: LD_STRING D2-Gary-1
4365: PPUSH
4366: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4370: LD_EXP 1
4374: PPUSH
4375: LD_STRING D2-JMM-1
4377: PPUSH
4378: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4382: LD_EXP 10
4386: PPUSH
4387: LD_STRING D2-Gary-2
4389: PPUSH
4390: CALL_OW 88
// end ; InGameOff ;
4394: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4398: LD_STRING M1
4400: PPUSH
4401: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4405: LD_INT 38
4407: PPUSH
4408: LD_INT 1
4410: PPUSH
4411: LD_INT 100
4413: PPUSH
4414: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4418: LD_INT 47
4420: PPUSH
4421: LD_INT 1
4423: PPUSH
4424: LD_INT 50
4426: PPUSH
4427: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4431: LD_INT 47
4433: PPUSH
4434: LD_INT 3
4436: PPUSH
4437: LD_INT 50
4439: PPUSH
4440: CALL_OW 291
// SaveForQuickRestart ;
4444: CALL_OW 22
// end ;
4448: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4449: LD_EXP 1
4453: PPUSH
4454: LD_EXP 11
4458: PPUSH
4459: CALL_OW 296
4463: PUSH
4464: LD_INT 15
4466: LESS
4467: IFFALSE 4933
4469: GO 4471
4471: DISABLE
// begin InGameOn ;
4472: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4476: LD_EXP 1
4480: PPUSH
4481: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4485: LD_EXP 1
4489: PPUSH
4490: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4494: LD_EXP 1
4498: PPUSH
4499: LD_EXP 11
4503: PPUSH
4504: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4508: LD_INT 35
4510: PPUSH
4511: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4515: LD_EXP 11
4519: PUSH
4520: LD_EXP 13
4524: PUSH
4525: LD_EXP 12
4529: PUSH
4530: LD_EXP 14
4534: PUSH
4535: LD_EXP 8
4539: PUSH
4540: EMPTY
4541: LIST
4542: LIST
4543: LIST
4544: LIST
4545: LIST
4546: PPUSH
4547: LD_EXP 1
4551: PPUSH
4552: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4556: LD_EXP 1
4560: PPUSH
4561: LD_EXP 11
4565: PPUSH
4566: CALL_OW 296
4570: PUSH
4571: LD_INT 5
4573: LESS
4574: IFFALSE 4508
// ComTurnUnit ( JMM , Simms ) ;
4576: LD_EXP 1
4580: PPUSH
4581: LD_EXP 11
4585: PPUSH
4586: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4590: LD_EXP 11
4594: PUSH
4595: LD_EXP 13
4599: PUSH
4600: LD_EXP 12
4604: PUSH
4605: LD_EXP 14
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: LIST
4615: PPUSH
4616: LD_EXP 1
4620: PPUSH
4621: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4625: LD_EXP 1
4629: PUSH
4630: LD_EXP 11
4634: PUSH
4635: EMPTY
4636: LIST
4637: LIST
4638: PPUSH
4639: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4643: LD_EXP 11
4647: PPUSH
4648: LD_STRING D2a-Sim-1
4650: PPUSH
4651: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4655: LD_EXP 1
4659: PPUSH
4660: LD_STRING D2a-JMM-1
4662: PPUSH
4663: CALL_OW 88
// if IsOk ( Joan ) then
4667: LD_EXP 13
4671: PPUSH
4672: CALL_OW 302
4676: IFFALSE 4728
// begin ComTurnUnit ( JMM , Joan ) ;
4678: LD_EXP 1
4682: PPUSH
4683: LD_EXP 13
4687: PPUSH
4688: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4692: LD_EXP 13
4696: PPUSH
4697: LD_STRING D2b-Joan-1
4699: PPUSH
4700: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4704: LD_EXP 1
4708: PPUSH
4709: LD_STRING D2b-JMM-1
4711: PPUSH
4712: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4716: LD_EXP 13
4720: PPUSH
4721: LD_STRING D2b-Joan-2
4723: PPUSH
4724: CALL_OW 88
// end ; if IsOk ( Denis ) then
4728: LD_EXP 12
4732: PPUSH
4733: CALL_OW 302
4737: IFFALSE 4765
// begin ComTurnUnit ( JMM , Denis ) ;
4739: LD_EXP 1
4743: PPUSH
4744: LD_EXP 12
4748: PPUSH
4749: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4753: LD_EXP 12
4757: PPUSH
4758: LD_STRING D2c-Den-1
4760: PPUSH
4761: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4765: LD_EXP 8
4769: PPUSH
4770: CALL_OW 302
4774: IFFALSE 4843
// begin repeat wait ( 0 0$1 ) ;
4776: LD_INT 35
4778: PPUSH
4779: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4783: LD_EXP 8
4787: PPUSH
4788: LD_EXP 1
4792: PPUSH
4793: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4797: LD_EXP 1
4801: PPUSH
4802: LD_EXP 8
4806: PPUSH
4807: CALL_OW 296
4811: PUSH
4812: LD_INT 5
4814: LESS
4815: IFFALSE 4776
// ComTurnUnit ( JMM , Kikuchi ) ;
4817: LD_EXP 1
4821: PPUSH
4822: LD_EXP 8
4826: PPUSH
4827: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4831: LD_EXP 8
4835: PPUSH
4836: LD_STRING D3b-Yam-1
4838: PPUSH
4839: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4843: LD_EXP 14
4847: PPUSH
4848: CALL_OW 302
4852: IFFALSE 4892
// begin ComTurnUnit ( JMM , Khatam ) ;
4854: LD_EXP 1
4858: PPUSH
4859: LD_EXP 14
4863: PPUSH
4864: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4868: LD_EXP 1
4872: PPUSH
4873: LD_STRING D2c-JMM-1
4875: PPUSH
4876: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4880: LD_EXP 14
4884: PPUSH
4885: LD_STRING D2c-Khat-1
4887: PPUSH
4888: CALL_OW 88
// end ; InGameOff ;
4892: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4896: LD_INT 22
4898: PUSH
4899: LD_INT 4
4901: PUSH
4902: EMPTY
4903: LIST
4904: LIST
4905: PPUSH
4906: CALL_OW 69
4910: PPUSH
4911: LD_INT 1
4913: PPUSH
4914: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4918: LD_STRING M1a
4920: PPUSH
4921: CALL_OW 337
// joinEpsilon = 1 ;
4925: LD_ADDR_EXP 29
4929: PUSH
4930: LD_INT 1
4932: ST_TO_ADDR
// end ;
4933: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4934: LD_EXP 61
4938: PUSH
4939: LD_INT 1
4941: EQUAL
4942: IFFALSE 6074
4944: GO 4946
4946: DISABLE
4947: LD_INT 0
4949: PPUSH
4950: PPUSH
4951: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4952: LD_ADDR_VAR 0 1
4956: PUSH
4957: LD_INT 22
4959: PUSH
4960: LD_INT 1
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 25
4969: PUSH
4970: LD_INT 4
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: LD_INT 26
4979: PUSH
4980: LD_INT 1
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: PUSH
4997: LD_EXP 1
5001: PUSH
5002: LD_EXP 2
5006: PUSH
5007: LD_EXP 3
5011: PUSH
5012: LD_EXP 4
5016: PUSH
5017: LD_EXP 5
5021: PUSH
5022: LD_EXP 6
5026: PUSH
5027: LD_EXP 7
5031: PUSH
5032: LD_EXP 8
5036: PUSH
5037: LD_EXP 9
5041: PUSH
5042: LD_EXP 10
5046: PUSH
5047: LD_EXP 11
5051: PUSH
5052: LD_EXP 12
5056: PUSH
5057: LD_EXP 13
5061: PUSH
5062: LD_EXP 14
5066: PUSH
5067: LD_EXP 15
5071: PUSH
5072: LD_EXP 16
5076: PUSH
5077: LD_EXP 17
5081: PUSH
5082: LD_EXP 18
5086: PUSH
5087: LD_EXP 19
5091: PUSH
5092: LD_EXP 24
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: DIFF
5119: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5120: LD_ADDR_VAR 0 2
5124: PUSH
5125: LD_INT 22
5127: PUSH
5128: LD_INT 1
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: LD_INT 26
5137: PUSH
5138: LD_INT 1
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 2
5147: PUSH
5148: LD_INT 25
5150: PUSH
5151: LD_INT 1
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 25
5160: PUSH
5161: LD_INT 2
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 25
5170: PUSH
5171: LD_INT 3
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: LIST
5188: PPUSH
5189: CALL_OW 69
5193: PUSH
5194: LD_EXP 1
5198: PUSH
5199: LD_EXP 2
5203: PUSH
5204: LD_EXP 3
5208: PUSH
5209: LD_EXP 4
5213: PUSH
5214: LD_EXP 5
5218: PUSH
5219: LD_EXP 6
5223: PUSH
5224: LD_EXP 7
5228: PUSH
5229: LD_EXP 8
5233: PUSH
5234: LD_EXP 9
5238: PUSH
5239: LD_EXP 10
5243: PUSH
5244: LD_EXP 11
5248: PUSH
5249: LD_EXP 12
5253: PUSH
5254: LD_EXP 13
5258: PUSH
5259: LD_EXP 14
5263: PUSH
5264: LD_EXP 15
5268: PUSH
5269: LD_EXP 16
5273: PUSH
5274: LD_EXP 17
5278: PUSH
5279: LD_EXP 18
5283: PUSH
5284: LD_EXP 19
5288: PUSH
5289: LD_EXP 24
5293: PUSH
5294: EMPTY
5295: LIST
5296: LIST
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: DIFF
5316: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5317: LD_EXP 10
5321: PUSH
5322: LD_VAR 0 2
5326: OR
5327: PUSH
5328: LD_EXP 17
5332: PUSH
5333: LD_VAR 0 1
5337: OR
5338: AND
5339: IFFALSE 5558
// begin DialogueOn ;
5341: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5345: LD_EXP 17
5349: PPUSH
5350: CALL_OW 302
5354: IFFALSE 5370
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5356: LD_EXP 17
5360: PPUSH
5361: LD_STRING D3-Sci1-1
5363: PPUSH
5364: CALL_OW 88
5368: GO 5382
// Say ( tmp1 , D3-Sci1-1 ) ;
5370: LD_VAR 0 1
5374: PPUSH
5375: LD_STRING D3-Sci1-1
5377: PPUSH
5378: CALL_OW 88
// if IsOk ( Gary ) then
5382: LD_EXP 10
5386: PPUSH
5387: CALL_OW 302
5391: IFFALSE 5407
// Say ( Gary , D3-Gary-1 ) else
5393: LD_EXP 10
5397: PPUSH
5398: LD_STRING D3-Gary-1
5400: PPUSH
5401: CALL_OW 88
5405: GO 5419
// Say ( tmp2 , D3-Gary-1 ) ;
5407: LD_VAR 0 2
5411: PPUSH
5412: LD_STRING D3-Gary-1
5414: PPUSH
5415: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5419: LD_EXP 17
5423: PPUSH
5424: CALL_OW 302
5428: IFFALSE 5444
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5430: LD_EXP 17
5434: PPUSH
5435: LD_STRING D3-Sci1-2
5437: PPUSH
5438: CALL_OW 88
5442: GO 5456
// Say ( tmp1 , D3-Sci1-2 ) ;
5444: LD_VAR 0 1
5448: PPUSH
5449: LD_STRING D3-Sci1-2
5451: PPUSH
5452: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5456: LD_EXP 1
5460: PPUSH
5461: LD_STRING D3-JMM-2
5463: PPUSH
5464: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5468: LD_EXP 17
5472: PPUSH
5473: CALL_OW 302
5477: IFFALSE 5493
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5479: LD_EXP 17
5483: PPUSH
5484: LD_STRING D3-Sci1-3
5486: PPUSH
5487: CALL_OW 88
5491: GO 5505
// Say ( tmp1 , D3-Sci1-3 ) ;
5493: LD_VAR 0 1
5497: PPUSH
5498: LD_STRING D3-Sci1-3
5500: PPUSH
5501: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_STRING D3-JMM-3
5512: PPUSH
5513: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5517: LD_EXP 17
5521: PPUSH
5522: CALL_OW 302
5526: IFFALSE 5542
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5528: LD_EXP 17
5532: PPUSH
5533: LD_STRING D3-Sci1-4
5535: PPUSH
5536: CALL_OW 88
5540: GO 5554
// Say ( tmp1 , D3-Sci1-4 ) ;
5542: LD_VAR 0 1
5546: PPUSH
5547: LD_STRING D3-Sci1-4
5549: PPUSH
5550: CALL_OW 88
// DialogueOff ;
5554: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5558: LD_INT 12
5560: PPUSH
5561: LD_INT 1
5563: PPUSH
5564: LD_INT 1
5566: PPUSH
5567: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5571: LD_INT 32
5573: PPUSH
5574: LD_INT 1
5576: PPUSH
5577: LD_INT 1
5579: PPUSH
5580: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5584: LD_INT 12
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5597: LD_INT 33
5599: PPUSH
5600: LD_INT 1
5602: PPUSH
5603: LD_INT 1
5605: PPUSH
5606: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5610: LD_STRING M2
5612: PPUSH
5613: CALL_OW 337
// wait ( 3 3$0 ) ;
5617: LD_INT 6300
5619: PPUSH
5620: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5624: LD_INT 35
5626: PPUSH
5627: CALL_OW 67
// until not InBattle ( 1 ) ;
5631: LD_INT 1
5633: PPUSH
5634: CALL_OW 463
5638: NOT
5639: IFFALSE 5624
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5641: LD_EXP 11
5645: PPUSH
5646: CALL_OW 302
5650: PUSH
5651: LD_EXP 17
5655: PPUSH
5656: CALL_OW 302
5660: AND
5661: IFFALSE 5830
// begin DialogueOn ;
5663: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5667: LD_EXP 11
5671: PPUSH
5672: LD_STRING D3a-Sim-1
5674: PPUSH
5675: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5679: LD_EXP 17
5683: PPUSH
5684: LD_STRING D3a-Sci1-1
5686: PPUSH
5687: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5691: LD_EXP 11
5695: PPUSH
5696: LD_STRING D3a-Sim-2
5698: PPUSH
5699: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5703: LD_EXP 17
5707: PPUSH
5708: LD_STRING D3a-Sci1-2
5710: PPUSH
5711: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5715: LD_EXP 11
5719: PPUSH
5720: LD_STRING D3a-Sim-3
5722: PPUSH
5723: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5727: LD_EXP 17
5731: PPUSH
5732: LD_STRING D3a-Sci1-3
5734: PPUSH
5735: CALL_OW 88
// if IsOK ( Joan ) then
5739: LD_EXP 13
5743: PPUSH
5744: CALL_OW 302
5748: IFFALSE 5764
// Say ( Simms , D3a-Sim-4 ) else
5750: LD_EXP 11
5754: PPUSH
5755: LD_STRING D3a-Sim-4
5757: PPUSH
5758: CALL_OW 88
5762: GO 5776
// Say ( Simms , D3a-Sim-4a ) ;
5764: LD_EXP 11
5768: PPUSH
5769: LD_STRING D3a-Sim-4a
5771: PPUSH
5772: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5776: LD_EXP 17
5780: PPUSH
5781: LD_STRING D3a-Sci1-4
5783: PPUSH
5784: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5788: LD_EXP 11
5792: PPUSH
5793: LD_STRING D3a-Sim-5
5795: PPUSH
5796: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5800: LD_EXP 17
5804: PPUSH
5805: LD_STRING D3a-Sci1-5
5807: PPUSH
5808: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5812: LD_EXP 11
5816: PPUSH
5817: LD_STRING D3a-Sim-6
5819: PPUSH
5820: CALL_OW 88
// DialogueOff ;
5824: CALL_OW 7
// end else
5828: GO 6074
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5830: LD_ADDR_VAR 0 3
5834: PUSH
5835: LD_INT 22
5837: PUSH
5838: LD_INT 1
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: PUSH
5845: LD_INT 25
5847: PUSH
5848: LD_INT 4
5850: PUSH
5851: EMPTY
5852: LIST
5853: LIST
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: PPUSH
5859: CALL_OW 69
5863: PUSH
5864: LD_EXP 11
5868: PUSH
5869: LD_EXP 14
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: DIFF
5878: ST_TO_ADDR
// if tmp3 > 0 then
5879: LD_VAR 0 3
5883: PUSH
5884: LD_INT 0
5886: GREATER
5887: IFFALSE 6074
// begin DialogueOn ;
5889: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5893: LD_EXP 11
5897: PPUSH
5898: LD_STRING D3a-Sim-1
5900: PPUSH
5901: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5905: LD_VAR 0 3
5909: PUSH
5910: LD_INT 1
5912: ARRAY
5913: PPUSH
5914: LD_STRING D3a-Sci1-1
5916: PPUSH
5917: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5921: LD_EXP 11
5925: PPUSH
5926: LD_STRING D3a-Sim-2
5928: PPUSH
5929: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5933: LD_VAR 0 3
5937: PUSH
5938: LD_INT 1
5940: ARRAY
5941: PPUSH
5942: LD_STRING D3a-Sci1-2
5944: PPUSH
5945: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5949: LD_EXP 11
5953: PPUSH
5954: LD_STRING D3a-Sim-3
5956: PPUSH
5957: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5961: LD_VAR 0 3
5965: PUSH
5966: LD_INT 1
5968: ARRAY
5969: PPUSH
5970: LD_STRING D3a-Sci1-3
5972: PPUSH
5973: CALL_OW 88
// if IsOK ( Joan ) then
5977: LD_EXP 13
5981: PPUSH
5982: CALL_OW 302
5986: IFFALSE 6002
// Say ( Simms , D3a-Sim-4 ) else
5988: LD_EXP 11
5992: PPUSH
5993: LD_STRING D3a-Sim-4
5995: PPUSH
5996: CALL_OW 88
6000: GO 6014
// Say ( Simms , D3a-Sim-4a ) ;
6002: LD_EXP 11
6006: PPUSH
6007: LD_STRING D3a-Sim-4a
6009: PPUSH
6010: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6014: LD_VAR 0 3
6018: PUSH
6019: LD_INT 1
6021: ARRAY
6022: PPUSH
6023: LD_STRING D3a-Sci1-4
6025: PPUSH
6026: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6030: LD_EXP 11
6034: PPUSH
6035: LD_STRING D3a-Sim-5
6037: PPUSH
6038: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6042: LD_VAR 0 3
6046: PUSH
6047: LD_INT 1
6049: ARRAY
6050: PPUSH
6051: LD_STRING D3a-Sci1-5
6053: PPUSH
6054: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6058: LD_EXP 11
6062: PPUSH
6063: LD_STRING D3a-Sim-6
6065: PPUSH
6066: CALL_OW 88
// DialogueOff ;
6070: CALL_OW 7
// end ; end ; end ;
6074: PPOPN 3
6076: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6077: LD_EXP 29
6081: PUSH
6082: LD_INT 1
6084: EQUAL
6085: IFFALSE 6405
6087: GO 6089
6089: DISABLE
6090: LD_INT 0
6092: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6093: LD_EXP 18
6097: PPUSH
6098: LD_STRING D4-FSol1-1
6100: PPUSH
6101: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6105: LD_STRING M3
6107: PPUSH
6108: CALL_OW 337
// PrepareRussians ;
6112: CALL 2621 0 0
// rnd = Rand ( 1 , 100 ) ;
6116: LD_ADDR_VAR 0 1
6120: PUSH
6121: LD_INT 1
6123: PPUSH
6124: LD_INT 100
6126: PPUSH
6127: CALL_OW 12
6131: ST_TO_ADDR
// if difficulty = 1 then
6132: LD_OWVAR 67
6136: PUSH
6137: LD_INT 1
6139: EQUAL
6140: IFFALSE 6223
// begin if rnd > 0 and rnd < 51 then
6142: LD_VAR 0 1
6146: PUSH
6147: LD_INT 0
6149: GREATER
6150: PUSH
6151: LD_VAR 0 1
6155: PUSH
6156: LD_INT 51
6158: LESS
6159: AND
6160: IFFALSE 6169
// BuildRussianBase ( 2 ) ;
6162: LD_INT 2
6164: PPUSH
6165: CALL 10059 0 1
// if rnd > 50 and rnd < 81 then
6169: LD_VAR 0 1
6173: PUSH
6174: LD_INT 50
6176: GREATER
6177: PUSH
6178: LD_VAR 0 1
6182: PUSH
6183: LD_INT 81
6185: LESS
6186: AND
6187: IFFALSE 6196
// BuildRussianBase ( 1 ) ;
6189: LD_INT 1
6191: PPUSH
6192: CALL 10059 0 1
// if rnd > 80 and rnd < 101 then
6196: LD_VAR 0 1
6200: PUSH
6201: LD_INT 80
6203: GREATER
6204: PUSH
6205: LD_VAR 0 1
6209: PUSH
6210: LD_INT 101
6212: LESS
6213: AND
6214: IFFALSE 6223
// BuildRussianBase ( 3 ) ;
6216: LD_INT 3
6218: PPUSH
6219: CALL 10059 0 1
// end ; if difficulty = 2 then
6223: LD_OWVAR 67
6227: PUSH
6228: LD_INT 2
6230: EQUAL
6231: IFFALSE 6314
// begin if rnd > 0 and rnd < 61 then
6233: LD_VAR 0 1
6237: PUSH
6238: LD_INT 0
6240: GREATER
6241: PUSH
6242: LD_VAR 0 1
6246: PUSH
6247: LD_INT 61
6249: LESS
6250: AND
6251: IFFALSE 6260
// BuildRussianBase ( 2 ) ;
6253: LD_INT 2
6255: PPUSH
6256: CALL 10059 0 1
// if rnd > 60 and rnd < 81 then
6260: LD_VAR 0 1
6264: PUSH
6265: LD_INT 60
6267: GREATER
6268: PUSH
6269: LD_VAR 0 1
6273: PUSH
6274: LD_INT 81
6276: LESS
6277: AND
6278: IFFALSE 6287
// BuildRussianBase ( 1 ) ;
6280: LD_INT 1
6282: PPUSH
6283: CALL 10059 0 1
// if rnd > 80 and rnd < 101 then
6287: LD_VAR 0 1
6291: PUSH
6292: LD_INT 80
6294: GREATER
6295: PUSH
6296: LD_VAR 0 1
6300: PUSH
6301: LD_INT 101
6303: LESS
6304: AND
6305: IFFALSE 6314
// BuildRussianBase ( 3 ) ;
6307: LD_INT 3
6309: PPUSH
6310: CALL 10059 0 1
// end ; if difficulty = 3 then
6314: LD_OWVAR 67
6318: PUSH
6319: LD_INT 3
6321: EQUAL
6322: IFFALSE 6405
// begin if rnd > 0 and rnd < 71 then
6324: LD_VAR 0 1
6328: PUSH
6329: LD_INT 0
6331: GREATER
6332: PUSH
6333: LD_VAR 0 1
6337: PUSH
6338: LD_INT 71
6340: LESS
6341: AND
6342: IFFALSE 6351
// BuildRussianBase ( 3 ) ;
6344: LD_INT 3
6346: PPUSH
6347: CALL 10059 0 1
// if rnd > 70 and rnd < 81 then
6351: LD_VAR 0 1
6355: PUSH
6356: LD_INT 70
6358: GREATER
6359: PUSH
6360: LD_VAR 0 1
6364: PUSH
6365: LD_INT 81
6367: LESS
6368: AND
6369: IFFALSE 6378
// BuildRussianBase ( 2 ) ;
6371: LD_INT 2
6373: PPUSH
6374: CALL 10059 0 1
// if rnd > 80 and rnd < 101 then
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 80
6385: GREATER
6386: PUSH
6387: LD_VAR 0 1
6391: PUSH
6392: LD_INT 101
6394: LESS
6395: AND
6396: IFFALSE 6405
// BuildRussianBase ( 1 ) ;
6398: LD_INT 1
6400: PPUSH
6401: CALL 10059 0 1
// end ; end ;
6405: PPOPN 1
6407: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6408: LD_INT 54
6410: PPUSH
6411: LD_INT 1
6413: PPUSH
6414: CALL_OW 321
6418: PUSH
6419: LD_INT 2
6421: EQUAL
6422: PUSH
6423: LD_INT 21
6425: PPUSH
6426: LD_INT 1
6428: PPUSH
6429: CALL_OW 321
6433: PUSH
6434: LD_INT 2
6436: EQUAL
6437: OR
6438: PUSH
6439: LD_INT 22
6441: PPUSH
6442: LD_INT 1
6444: PPUSH
6445: CALL_OW 321
6449: PUSH
6450: LD_INT 2
6452: EQUAL
6453: OR
6454: IFFALSE 6755
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
6462: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6463: LD_EXP 17
6467: PPUSH
6468: CALL_OW 302
6472: IFFALSE 6486
// tmp := DeltaDoctor else
6474: LD_ADDR_VAR 0 2
6478: PUSH
6479: LD_EXP 17
6483: ST_TO_ADDR
6484: GO 6496
// tmp := Denis ;
6486: LD_ADDR_VAR 0 2
6490: PUSH
6491: LD_EXP 12
6495: ST_TO_ADDR
// if tmp then
6496: LD_VAR 0 2
6500: IFFALSE 6594
// begin DialogueOn ;
6502: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6506: LD_EXP 1
6510: PPUSH
6511: LD_STRING D6-JMM-1
6513: PPUSH
6514: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6518: LD_VAR 0 2
6522: PPUSH
6523: LD_STRING D6-Sci1-1
6525: PPUSH
6526: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6530: LD_EXP 1
6534: PPUSH
6535: LD_STRING D6-JMM-2
6537: PPUSH
6538: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6542: LD_VAR 0 2
6546: PPUSH
6547: LD_STRING D6-Sci1-2
6549: PPUSH
6550: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6554: LD_EXP 1
6558: PPUSH
6559: LD_STRING D6-JMM-3
6561: PPUSH
6562: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6566: LD_VAR 0 2
6570: PPUSH
6571: LD_STRING D6-Sci1-3
6573: PPUSH
6574: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6578: LD_EXP 1
6582: PPUSH
6583: LD_STRING D6-JMM-4
6585: PPUSH
6586: CALL_OW 88
// DialogueOff ;
6590: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6594: LD_INT 1050
6596: PPUSH
6597: CALL_OW 67
// if arabianTrait = 0 then
6601: LD_EXP 49
6605: PUSH
6606: LD_INT 0
6608: EQUAL
6609: IFFALSE 6667
// begin DialogueOn ;
6611: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6615: LD_EXP 27
6619: PPUSH
6620: LD_STRING D5-Ar1-1
6622: PPUSH
6623: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6627: LD_EXP 26
6631: PPUSH
6632: LD_STRING D5-Diet-1
6634: PPUSH
6635: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6639: LD_EXP 27
6643: PPUSH
6644: LD_STRING D5-Ar1-2
6646: PPUSH
6647: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6651: LD_EXP 26
6655: PPUSH
6656: LD_STRING D5-Diet-2
6658: PPUSH
6659: CALL_OW 88
// DialogueOff ;
6663: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6667: LD_INT 2100
6669: PUSH
6670: LD_INT 3150
6672: PUSH
6673: LD_INT 4200
6675: PUSH
6676: LD_INT 5250
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: LIST
6684: PUSH
6685: LD_INT 1
6687: PPUSH
6688: LD_INT 4
6690: PPUSH
6691: CALL_OW 12
6695: ARRAY
6696: PPUSH
6697: CALL_OW 67
// if arabianTrait = 0 then
6701: LD_EXP 49
6705: PUSH
6706: LD_INT 0
6708: EQUAL
6709: IFFALSE 6755
// begin arabianTrait = 1 ;
6711: LD_ADDR_EXP 49
6715: PUSH
6716: LD_INT 1
6718: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6719: LD_INT 2
6721: PPUSH
6722: LD_INT 3
6724: PPUSH
6725: LD_INT 1
6727: PPUSH
6728: LD_INT 1
6730: PPUSH
6731: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6735: LD_INT 2
6737: PPUSH
6738: LD_INT 6
6740: PPUSH
6741: LD_INT 1
6743: PPUSH
6744: LD_INT 1
6746: PPUSH
6747: CALL_OW 80
// PrepareArabianTrait ;
6751: CALL 6758 0 0
// end ; end ;
6755: PPOPN 2
6757: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6758: LD_INT 0
6760: PPUSH
6761: PPUSH
6762: PPUSH
6763: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6764: LD_ADDR_VAR 0 2
6768: PUSH
6769: LD_INT 22
6771: PUSH
6772: LD_INT 2
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PUSH
6779: LD_INT 25
6781: PUSH
6782: LD_INT 4
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: EMPTY
6790: LIST
6791: LIST
6792: PPUSH
6793: CALL_OW 69
6797: PUSH
6798: FOR_IN
6799: IFFALSE 6812
// ComExitBuilding ( i ) ;
6801: LD_VAR 0 2
6805: PPUSH
6806: CALL_OW 122
6810: GO 6798
6812: POP
6813: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6814: LD_ADDR_VAR 0 2
6818: PUSH
6819: LD_INT 22
6821: PUSH
6822: LD_INT 2
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_INT 25
6831: PUSH
6832: LD_INT 3
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PPUSH
6843: CALL_OW 69
6847: PUSH
6848: FOR_IN
6849: IFFALSE 6862
// ComExitVehicle ( i ) ;
6851: LD_VAR 0 2
6855: PPUSH
6856: CALL_OW 121
6860: GO 6848
6862: POP
6863: POP
// SetClass ( Dietrich , 8 ) ;
6864: LD_EXP 26
6868: PPUSH
6869: LD_INT 8
6871: PPUSH
6872: CALL_OW 336
// wait ( 0 0$3 ) ;
6876: LD_INT 105
6878: PPUSH
6879: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6883: LD_INT 76
6885: PPUSH
6886: LD_INT 19
6888: PPUSH
6889: CALL_OW 84
// DialogueOn ;
6893: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6897: LD_INT 22
6899: PUSH
6900: LD_INT 1
6902: PUSH
6903: EMPTY
6904: LIST
6905: LIST
6906: PUSH
6907: LD_INT 26
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 2
6919: PUSH
6920: LD_INT 25
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 25
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 25
6942: PUSH
6943: LD_INT 3
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 25
6952: PUSH
6953: LD_INT 4
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 5
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: PPUSH
6988: LD_STRING D8-Sol1-1
6990: PPUSH
6991: LD_STRING D8-Sol1-1
6993: PPUSH
6994: CALL 9390 0 3
// if IsOK ( DeltaDoctor ) then
6998: LD_EXP 17
7002: PPUSH
7003: CALL_OW 302
7007: IFFALSE 7023
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7009: LD_EXP 17
7013: PPUSH
7014: LD_STRING D8-Sci1-1
7016: PPUSH
7017: CALL_OW 88
7021: GO 7124
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7023: LD_INT 22
7025: PUSH
7026: LD_INT 1
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: PUSH
7033: LD_INT 26
7035: PUSH
7036: LD_INT 1
7038: PUSH
7039: EMPTY
7040: LIST
7041: LIST
7042: PUSH
7043: LD_INT 2
7045: PUSH
7046: LD_INT 25
7048: PUSH
7049: LD_INT 1
7051: PUSH
7052: EMPTY
7053: LIST
7054: LIST
7055: PUSH
7056: LD_INT 25
7058: PUSH
7059: LD_INT 2
7061: PUSH
7062: EMPTY
7063: LIST
7064: LIST
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 3
7071: PUSH
7072: EMPTY
7073: LIST
7074: LIST
7075: PUSH
7076: LD_INT 25
7078: PUSH
7079: LD_INT 4
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: PUSH
7086: LD_INT 25
7088: PUSH
7089: LD_INT 5
7091: PUSH
7092: EMPTY
7093: LIST
7094: LIST
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: PUSH
7104: EMPTY
7105: LIST
7106: LIST
7107: LIST
7108: PPUSH
7109: CALL_OW 69
7113: PPUSH
7114: LD_STRING D8-Sol1-1
7116: PPUSH
7117: LD_STRING D8-Sol1-1
7119: PPUSH
7120: CALL 9390 0 3
// Say ( JMM , D8-JMM-1 ) ;
7124: LD_EXP 1
7128: PPUSH
7129: LD_STRING D8-JMM-1
7131: PPUSH
7132: CALL_OW 88
// DialogueOff ;
7136: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7140: LD_INT 2
7142: PPUSH
7143: LD_INT 2
7145: PPUSH
7146: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7150: LD_INT 1
7152: PPUSH
7153: LD_INT 2
7155: PPUSH
7156: LD_INT 2
7158: PPUSH
7159: LD_INT 1
7161: PPUSH
7162: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7166: LD_INT 3
7168: PPUSH
7169: LD_INT 2
7171: PPUSH
7172: LD_INT 1
7174: PPUSH
7175: LD_INT 1
7177: PPUSH
7178: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 2
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 1
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 2
7209: PUSH
7210: LD_INT 25
7212: PUSH
7213: LD_INT 1
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 25
7222: PUSH
7223: LD_INT 8
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 25
7232: PUSH
7233: LD_INT 15
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 69
7255: PUSH
7256: FOR_IN
7257: IFFALSE 7397
// begin ComExitBuilding ( i ) ;
7259: LD_VAR 0 2
7263: PPUSH
7264: CALL_OW 122
// wait ( 0 0$1 ) ;
7268: LD_INT 35
7270: PPUSH
7271: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7275: LD_VAR 0 2
7279: PPUSH
7280: LD_INT 77
7282: PPUSH
7283: LD_INT 10
7285: PPUSH
7286: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7290: LD_VAR 0 2
7294: PPUSH
7295: LD_INT 82
7297: PPUSH
7298: LD_INT 5
7300: PPUSH
7301: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7305: LD_VAR 0 2
7309: PPUSH
7310: LD_INT 95
7312: PPUSH
7313: LD_INT 12
7315: PPUSH
7316: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7320: LD_VAR 0 2
7324: PPUSH
7325: LD_INT 102
7327: PPUSH
7328: LD_INT 11
7330: PPUSH
7331: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7335: LD_VAR 0 2
7339: PPUSH
7340: LD_INT 116
7342: PPUSH
7343: LD_INT 15
7345: PPUSH
7346: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7350: LD_VAR 0 2
7354: PPUSH
7355: LD_INT 140
7357: PPUSH
7358: LD_INT 25
7360: PPUSH
7361: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7365: LD_VAR 0 2
7369: PPUSH
7370: LD_INT 160
7372: PPUSH
7373: LD_INT 56
7375: PPUSH
7376: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7380: LD_VAR 0 2
7384: PPUSH
7385: LD_INT 189
7387: PPUSH
7388: LD_INT 79
7390: PPUSH
7391: CALL_OW 174
// end ;
7395: GO 7256
7397: POP
7398: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7399: LD_ADDR_VAR 0 2
7403: PUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 2
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 21
7416: PUSH
7417: LD_INT 1
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 2
7426: PUSH
7427: LD_INT 25
7429: PUSH
7430: LD_INT 2
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 25
7439: PUSH
7440: LD_INT 3
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: LD_INT 25
7449: PUSH
7450: LD_INT 4
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: LD_INT 25
7459: PUSH
7460: LD_INT 16
7462: PUSH
7463: EMPTY
7464: LIST
7465: LIST
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: PUSH
7474: EMPTY
7475: LIST
7476: LIST
7477: LIST
7478: PPUSH
7479: CALL_OW 69
7483: PUSH
7484: FOR_IN
7485: IFFALSE 7625
// begin ComExitBuilding ( i ) ;
7487: LD_VAR 0 2
7491: PPUSH
7492: CALL_OW 122
// wait ( 0 0$1 ) ;
7496: LD_INT 35
7498: PPUSH
7499: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7503: LD_VAR 0 2
7507: PPUSH
7508: LD_INT 77
7510: PPUSH
7511: LD_INT 10
7513: PPUSH
7514: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7518: LD_VAR 0 2
7522: PPUSH
7523: LD_INT 82
7525: PPUSH
7526: LD_INT 5
7528: PPUSH
7529: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7533: LD_VAR 0 2
7537: PPUSH
7538: LD_INT 95
7540: PPUSH
7541: LD_INT 12
7543: PPUSH
7544: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7548: LD_VAR 0 2
7552: PPUSH
7553: LD_INT 102
7555: PPUSH
7556: LD_INT 11
7558: PPUSH
7559: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7563: LD_VAR 0 2
7567: PPUSH
7568: LD_INT 116
7570: PPUSH
7571: LD_INT 15
7573: PPUSH
7574: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7578: LD_VAR 0 2
7582: PPUSH
7583: LD_INT 140
7585: PPUSH
7586: LD_INT 25
7588: PPUSH
7589: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7593: LD_VAR 0 2
7597: PPUSH
7598: LD_INT 160
7600: PPUSH
7601: LD_INT 56
7603: PPUSH
7604: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7608: LD_VAR 0 2
7612: PPUSH
7613: LD_INT 189
7615: PPUSH
7616: LD_INT 79
7618: PPUSH
7619: CALL_OW 171
// end ;
7623: GO 7484
7625: POP
7626: POP
// arabianAttackersAI = 1 ;
7627: LD_ADDR_EXP 46
7631: PUSH
7632: LD_INT 1
7634: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7635: LD_INT 350
7637: PPUSH
7638: CALL_OW 67
// if IsOk ( Gary ) then
7642: LD_EXP 10
7646: PPUSH
7647: CALL_OW 302
7651: IFFALSE 7665
// Say ( Gary , D8a-Gary-1 ) ;
7653: LD_EXP 10
7657: PPUSH
7658: LD_STRING D8a-Gary-1
7660: PPUSH
7661: CALL_OW 88
// wait ( 0 0$5 ) ;
7665: LD_INT 175
7667: PPUSH
7668: CALL_OW 67
// if IsOK ( Khatam ) then
7672: LD_EXP 14
7676: PPUSH
7677: CALL_OW 302
7681: IFFALSE 8217
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7683: LD_ADDR_VAR 0 3
7687: PUSH
7688: LD_INT 22
7690: PUSH
7691: LD_INT 1
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: LD_INT 2
7700: PUSH
7701: LD_INT 25
7703: PUSH
7704: LD_INT 1
7706: PUSH
7707: EMPTY
7708: LIST
7709: LIST
7710: PUSH
7711: LD_INT 25
7713: PUSH
7714: LD_INT 2
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 25
7723: PUSH
7724: LD_INT 3
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: LD_INT 25
7733: PUSH
7734: LD_INT 4
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: LD_INT 25
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: EMPTY
7748: LIST
7749: LIST
7750: PUSH
7751: LD_INT 25
7753: PUSH
7754: LD_INT 8
7756: PUSH
7757: EMPTY
7758: LIST
7759: LIST
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: EMPTY
7771: LIST
7772: LIST
7773: PPUSH
7774: CALL_OW 69
7778: PUSH
7779: LD_EXP 1
7783: PUSH
7784: LD_EXP 2
7788: PUSH
7789: LD_EXP 3
7793: PUSH
7794: LD_EXP 4
7798: PUSH
7799: LD_EXP 5
7803: PUSH
7804: LD_EXP 6
7808: PUSH
7809: LD_EXP 7
7813: PUSH
7814: LD_EXP 8
7818: PUSH
7819: LD_EXP 9
7823: PUSH
7824: LD_EXP 10
7828: PUSH
7829: LD_EXP 11
7833: PUSH
7834: LD_EXP 12
7838: PUSH
7839: LD_EXP 13
7843: PUSH
7844: LD_EXP 14
7848: PUSH
7849: LD_EXP 15
7853: PUSH
7854: LD_EXP 16
7858: PUSH
7859: LD_EXP 17
7863: PUSH
7864: LD_EXP 19
7868: PUSH
7869: LD_EXP 24
7873: PUSH
7874: EMPTY
7875: LIST
7876: LIST
7877: LIST
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: LIST
7883: LIST
7884: LIST
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: DIFF
7895: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7896: LD_EXP 14
7900: PPUSH
7901: LD_INT 8
7903: PPUSH
7904: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7908: LD_EXP 14
7912: PPUSH
7913: CALL_OW 122
// wait ( 0 0$1 ) ;
7917: LD_INT 35
7919: PPUSH
7920: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7924: LD_EXP 14
7928: PPUSH
7929: CALL_OW 121
// wait ( 0 0$1 ) ;
7933: LD_INT 35
7935: PPUSH
7936: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7940: LD_EXP 14
7944: PPUSH
7945: LD_INT 7
7947: PPUSH
7948: CALL_OW 113
// if not tmp then
7952: LD_VAR 0 3
7956: NOT
7957: IFFALSE 7961
// exit ;
7959: GO 8217
// DialogueOn ;
7961: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
7965: LD_VAR 0 3
7969: PUSH
7970: LD_INT 1
7972: ARRAY
7973: PPUSH
7974: CALL_OW 258
7978: PUSH
7979: LD_INT 1
7981: EQUAL
7982: IFFALSE 8002
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
7984: LD_VAR 0 3
7988: PUSH
7989: LD_INT 1
7991: ARRAY
7992: PPUSH
7993: LD_STRING D8b-Sol1-1
7995: PPUSH
7996: CALL_OW 88
8000: GO 8018
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8002: LD_VAR 0 3
8006: PUSH
8007: LD_INT 1
8009: ARRAY
8010: PPUSH
8011: LD_STRING D8b-FSol1-1
8013: PPUSH
8014: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8018: LD_EXP 14
8022: PPUSH
8023: LD_STRING D8b-Khat-1
8025: PPUSH
8026: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8030: LD_VAR 0 3
8034: PUSH
8035: LD_INT 1
8037: ARRAY
8038: PPUSH
8039: CALL_OW 258
8043: PUSH
8044: LD_INT 1
8046: EQUAL
8047: IFFALSE 8067
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 1
8056: ARRAY
8057: PPUSH
8058: LD_STRING D8b-Sol1-2
8060: PPUSH
8061: CALL_OW 88
8065: GO 8083
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 1
8074: ARRAY
8075: PPUSH
8076: LD_STRING D8b-FSol1-2
8078: PPUSH
8079: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8083: LD_EXP 14
8087: PPUSH
8088: LD_STRING D8b-Khat-2
8090: PPUSH
8091: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8095: LD_VAR 0 3
8099: PUSH
8100: LD_INT 1
8102: ARRAY
8103: PPUSH
8104: CALL_OW 258
8108: PUSH
8109: LD_INT 1
8111: EQUAL
8112: IFFALSE 8132
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8114: LD_VAR 0 3
8118: PUSH
8119: LD_INT 1
8121: ARRAY
8122: PPUSH
8123: LD_STRING D8b-Sol1-3
8125: PPUSH
8126: CALL_OW 88
8130: GO 8148
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8132: LD_VAR 0 3
8136: PUSH
8137: LD_INT 1
8139: ARRAY
8140: PPUSH
8141: LD_STRING D8b-FSol1-3
8143: PPUSH
8144: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8148: LD_EXP 14
8152: PPUSH
8153: LD_STRING D8b-Khat-3
8155: PPUSH
8156: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8160: LD_VAR 0 3
8164: PUSH
8165: LD_INT 1
8167: ARRAY
8168: PPUSH
8169: CALL_OW 258
8173: PUSH
8174: LD_INT 1
8176: EQUAL
8177: IFFALSE 8197
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8179: LD_VAR 0 3
8183: PUSH
8184: LD_INT 1
8186: ARRAY
8187: PPUSH
8188: LD_STRING D8b-Sol1-4
8190: PPUSH
8191: CALL_OW 88
8195: GO 8213
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8197: LD_VAR 0 3
8201: PUSH
8202: LD_INT 1
8204: ARRAY
8205: PPUSH
8206: LD_STRING D8b-FSol1-4
8208: PPUSH
8209: CALL_OW 88
// DialogueOff ;
8213: CALL_OW 7
// end ; end ;
8217: LD_VAR 0 1
8221: RET
// every 0 0$1 do var i ;
8222: GO 8224
8224: DISABLE
8225: LD_INT 0
8227: PPUSH
// begin enable ;
8228: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8229: LD_ADDR_VAR 0 1
8233: PUSH
8234: LD_INT 7
8236: PPUSH
8237: LD_INT 22
8239: PUSH
8240: LD_INT 2
8242: PUSH
8243: EMPTY
8244: LIST
8245: LIST
8246: PPUSH
8247: CALL_OW 70
8251: PUSH
8252: FOR_IN
8253: IFFALSE 8319
// begin if GetClass ( i ) = 4 then
8255: LD_VAR 0 1
8259: PPUSH
8260: CALL_OW 257
8264: PUSH
8265: LD_INT 4
8267: EQUAL
8268: IFFALSE 8280
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8270: LD_INT 1
8272: PPUSH
8273: LD_STRING 10_ScientistsEscape_1
8275: PPUSH
8276: CALL_OW 39
// if i = Dietrich then
8280: LD_VAR 0 1
8284: PUSH
8285: LD_EXP 26
8289: EQUAL
8290: IFFALSE 8300
// GensherStatus = 1 ;
8292: LD_ADDR_EXP 51
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// arabianEscape = 1 ;
8300: LD_ADDR_EXP 47
8304: PUSH
8305: LD_INT 1
8307: ST_TO_ADDR
// RemoveUnit ( i ) ;
8308: LD_VAR 0 1
8312: PPUSH
8313: CALL_OW 64
// end ;
8317: GO 8252
8319: POP
8320: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8321: LD_EXP 14
8325: PPUSH
8326: LD_INT 7
8328: PPUSH
8329: CALL_OW 308
8333: IFFALSE 8352
// begin KhatamStatus = 1 ;
8335: LD_ADDR_EXP 52
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8343: LD_EXP 14
8347: PPUSH
8348: CALL_OW 64
// end ; end ;
8352: PPOPN 1
8354: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8355: LD_EXP 14
8359: PPUSH
8360: CALL_OW 301
8364: IFFALSE 8377
8366: GO 8368
8368: DISABLE
// KhatamStatus = 0 ;
8369: LD_ADDR_EXP 52
8373: PUSH
8374: LD_INT 0
8376: ST_TO_ADDR
8377: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8378: LD_INT 22
8380: PUSH
8381: LD_INT 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 21
8390: PUSH
8391: LD_INT 1
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: PPUSH
8402: CALL_OW 69
8406: PUSH
8407: LD_INT 0
8409: EQUAL
8410: PUSH
8411: LD_INT 22
8413: PUSH
8414: LD_INT 4
8416: PUSH
8417: EMPTY
8418: LIST
8419: LIST
8420: PUSH
8421: LD_INT 21
8423: PUSH
8424: LD_INT 1
8426: PUSH
8427: EMPTY
8428: LIST
8429: LIST
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: PPUSH
8435: CALL_OW 69
8439: PUSH
8440: LD_INT 0
8442: EQUAL
8443: AND
8444: IFFALSE 8457
8446: GO 8448
8448: DISABLE
// arabianDefeated = 1 ;
8449: LD_ADDR_EXP 48
8453: PUSH
8454: LD_INT 1
8456: ST_TO_ADDR
8457: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8458: LD_INT 54
8460: PPUSH
8461: LD_INT 1
8463: PPUSH
8464: CALL_OW 321
8468: PUSH
8469: LD_INT 2
8471: EQUAL
8472: PUSH
8473: LD_INT 55
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: CALL_OW 321
8483: PUSH
8484: LD_INT 2
8486: EQUAL
8487: AND
8488: PUSH
8489: LD_INT 21
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 321
8499: PUSH
8500: LD_INT 2
8502: EQUAL
8503: AND
8504: PUSH
8505: LD_INT 22
8507: PPUSH
8508: LD_INT 1
8510: PPUSH
8511: CALL_OW 321
8515: PUSH
8516: LD_INT 2
8518: EQUAL
8519: AND
8520: PUSH
8521: LD_INT 12
8523: PPUSH
8524: LD_INT 1
8526: PPUSH
8527: CALL_OW 321
8531: PUSH
8532: LD_INT 2
8534: EQUAL
8535: AND
8536: PUSH
8537: LD_INT 32
8539: PPUSH
8540: LD_INT 1
8542: PPUSH
8543: CALL_OW 321
8547: PUSH
8548: LD_INT 2
8550: EQUAL
8551: AND
8552: PUSH
8553: LD_EXP 59
8557: PUSH
8558: LD_INT 0
8560: EQUAL
8561: AND
8562: PUSH
8563: LD_EXP 49
8567: PUSH
8568: LD_INT 0
8570: EQUAL
8571: AND
8572: PUSH
8573: LD_OWVAR 1
8577: PUSH
8578: LD_INT 31500
8580: GREATEREQUAL
8581: AND
8582: IFFALSE 8599
8584: GO 8586
8586: DISABLE
// begin arabianTrait = 1 ;
8587: LD_ADDR_EXP 49
8591: PUSH
8592: LD_INT 1
8594: ST_TO_ADDR
// PrepareArabianTrait ;
8595: CALL 6758 0 0
// end ;
8599: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8600: LD_EXP 29
8604: PUSH
8605: LD_STRING 02_mikhailStatus_1
8607: PPUSH
8608: LD_INT 0
8610: PPUSH
8611: CALL_OW 30
8615: PUSH
8616: LD_INT 1
8618: EQUAL
8619: AND
8620: PUSH
8621: LD_INT 22
8623: PUSH
8624: LD_INT 5
8626: PUSH
8627: EMPTY
8628: LIST
8629: LIST
8630: PPUSH
8631: CALL_OW 69
8635: PUSH
8636: LD_INT 0
8638: EQUAL
8639: AND
8640: PUSH
8641: LD_INT 22
8643: PUSH
8644: LD_INT 2
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PPUSH
8651: CALL_OW 69
8655: PUSH
8656: LD_INT 0
8658: EQUAL
8659: PUSH
8660: LD_EXP 49
8664: PUSH
8665: LD_INT 0
8667: EQUAL
8668: OR
8669: AND
8670: IFFALSE 8679
8672: GO 8674
8674: DISABLE
// PrepareCornell ;
8675: CALL 2463 0 0
8679: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8680: LD_INT 22
8682: PUSH
8683: LD_INT 1
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PPUSH
8690: CALL_OW 69
8694: PPUSH
8695: LD_EXP 19
8699: PPUSH
8700: CALL_OW 74
8704: PPUSH
8705: LD_EXP 19
8709: PPUSH
8710: CALL_OW 296
8714: PUSH
8715: LD_INT 9
8717: LESS
8718: IFFALSE 8939
8720: GO 8722
8722: DISABLE
// begin InGameOn ;
8723: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8727: LD_EXP 19
8731: PPUSH
8732: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8736: LD_EXP 19
8740: PPUSH
8741: LD_STRING D7-Corn-1
8743: PPUSH
8744: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8748: LD_INT 22
8750: PUSH
8751: LD_INT 1
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PUSH
8758: LD_INT 2
8760: PUSH
8761: LD_INT 25
8763: PUSH
8764: LD_INT 1
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PUSH
8771: LD_INT 25
8773: PUSH
8774: LD_INT 2
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 25
8783: PUSH
8784: LD_INT 3
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 25
8793: PUSH
8794: LD_INT 4
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: PUSH
8801: LD_INT 25
8803: PUSH
8804: LD_INT 5
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: LIST
8815: LIST
8816: LIST
8817: LIST
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PPUSH
8823: CALL_OW 69
8827: PPUSH
8828: LD_STRING D7-Sol1-1
8830: PPUSH
8831: LD_STRING D7-FSol1-1
8833: PPUSH
8834: CALL 9390 0 3
// CenterNowOnUnits ( Cornell ) ;
8838: LD_EXP 19
8842: PPUSH
8843: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8847: LD_EXP 19
8851: PPUSH
8852: LD_STRING D7-Corn-2
8854: PPUSH
8855: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8859: LD_EXP 1
8863: PPUSH
8864: LD_STRING D7-JMM-2
8866: PPUSH
8867: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
8871: LD_EXP 19
8875: PPUSH
8876: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
8880: LD_EXP 19
8884: PPUSH
8885: LD_STRING D7-Corn-3
8887: PPUSH
8888: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
8892: LD_EXP 19
8896: PPUSH
8897: LD_INT 250
8899: PPUSH
8900: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
8904: LD_EXP 19
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: CALL_OW 235
// wait ( 0 0$1 ) ;
8916: LD_INT 35
8918: PPUSH
8919: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
8923: LD_EXP 1
8927: PPUSH
8928: LD_STRING D7-JMM-3
8930: PPUSH
8931: CALL_OW 88
// InGameOff ;
8935: CALL_OW 9
// end ;
8939: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
8940: LD_EXP 19
8944: PPUSH
8945: CALL_OW 255
8949: PUSH
8950: LD_INT 1
8952: EQUAL
8953: PUSH
8954: LD_EXP 19
8958: PPUSH
8959: CALL_OW 256
8963: PUSH
8964: LD_INT 251
8966: GREATER
8967: AND
8968: IFFALSE 9161
8970: GO 8972
8972: DISABLE
// begin DialogueOn ;
8973: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
8977: LD_EXP 1
8981: PPUSH
8982: LD_STRING D7a-JMM-1
8984: PPUSH
8985: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
8989: LD_EXP 19
8993: PPUSH
8994: LD_STRING D7a-Corn-1
8996: PPUSH
8997: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9001: LD_EXP 1
9005: PPUSH
9006: LD_STRING D7a-JMM-2
9008: PPUSH
9009: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9013: LD_EXP 19
9017: PPUSH
9018: LD_STRING D7a-Corn-2
9020: PPUSH
9021: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9025: LD_EXP 1
9029: PPUSH
9030: LD_STRING D7a-JMM-3
9032: PPUSH
9033: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9037: LD_EXP 19
9041: PPUSH
9042: LD_STRING D7a-Corn-3
9044: PPUSH
9045: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9049: LD_EXP 1
9053: PPUSH
9054: LD_STRING D7a-JMM-4
9056: PPUSH
9057: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9061: LD_EXP 19
9065: PPUSH
9066: LD_STRING D7a-Corn-4
9068: PPUSH
9069: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9073: LD_EXP 1
9077: PPUSH
9078: LD_STRING D7a-JMM-5
9080: PPUSH
9081: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9085: LD_EXP 19
9089: PPUSH
9090: LD_STRING D7a-Corn-5
9092: PPUSH
9093: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9097: LD_EXP 1
9101: PPUSH
9102: LD_STRING D7a-JMM-6
9104: PPUSH
9105: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9109: LD_EXP 19
9113: PPUSH
9114: LD_STRING D7a-Corn-6
9116: PPUSH
9117: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9121: LD_EXP 1
9125: PPUSH
9126: LD_STRING D7a-JMM-7
9128: PPUSH
9129: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9133: LD_EXP 19
9137: PPUSH
9138: LD_STRING D7a-Corn-7
9140: PPUSH
9141: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9145: LD_EXP 1
9149: PPUSH
9150: LD_STRING D7a-JMM-8
9152: PPUSH
9153: CALL_OW 88
// DialogueOff ;
9157: CALL_OW 7
// end ;
9161: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9162: LD_EXP 58
9166: PUSH
9167: LD_EXP 1
9171: PPUSH
9172: CALL_OW 302
9176: PUSH
9177: LD_EXP 5
9181: PPUSH
9182: CALL_OW 302
9186: OR
9187: AND
9188: IFFALSE 9278
9190: GO 9192
9192: DISABLE
// begin Wait ( 0 0$2 ) ;
9193: LD_INT 70
9195: PPUSH
9196: CALL_OW 67
// DialogueOn ;
9200: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9204: LD_EXP 58
9208: PUSH
9209: LD_INT 1
9211: ARRAY
9212: PPUSH
9213: LD_EXP 58
9217: PUSH
9218: LD_INT 2
9220: ARRAY
9221: PPUSH
9222: CALL_OW 86
// if IsOk ( Cyrus ) then
9226: LD_EXP 5
9230: PPUSH
9231: CALL_OW 302
9235: IFFALSE 9251
// Say ( Cyrus , D10-Cyrus-1 ) else
9237: LD_EXP 5
9241: PPUSH
9242: LD_STRING D10-Cyrus-1
9244: PPUSH
9245: CALL_OW 88
9249: GO 9274
// if IsOk ( JMM ) then
9251: LD_EXP 1
9255: PPUSH
9256: CALL_OW 302
9260: IFFALSE 9274
// Say ( JMM , D10-JMM-1 ) ;
9262: LD_EXP 1
9266: PPUSH
9267: LD_STRING D10-JMM-1
9269: PPUSH
9270: CALL_OW 88
// DialogueOff ;
9274: CALL_OW 7
// end ;
9278: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9279: LD_INT 12
9281: PPUSH
9282: LD_INT 1
9284: PPUSH
9285: CALL_OW 321
9289: PUSH
9290: LD_INT 2
9292: EQUAL
9293: IFFALSE 9305
9295: GO 9297
9297: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9298: LD_STRING M2b
9300: PPUSH
9301: CALL_OW 337
9305: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9306: LD_INT 32
9308: PPUSH
9309: LD_INT 1
9311: PPUSH
9312: CALL_OW 321
9316: PUSH
9317: LD_INT 2
9319: EQUAL
9320: IFFALSE 9332
9322: GO 9324
9324: DISABLE
// ChangeMissionObjectives ( M2c ) ; end_of_file
9325: LD_STRING M2c
9327: PPUSH
9328: CALL_OW 337
9332: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9333: LD_INT 0
9335: PPUSH
9336: PPUSH
// if exist_mode then
9337: LD_VAR 0 2
9341: IFFALSE 9360
// unit := CreateCharacter ( ident ) else
9343: LD_ADDR_VAR 0 4
9347: PUSH
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 34
9357: ST_TO_ADDR
9358: GO 9375
// unit := NewCharacter ( ident ) ;
9360: LD_ADDR_VAR 0 4
9364: PUSH
9365: LD_VAR 0 1
9369: PPUSH
9370: CALL_OW 25
9374: ST_TO_ADDR
// result := unit ;
9375: LD_ADDR_VAR 0 3
9379: PUSH
9380: LD_VAR 0 4
9384: ST_TO_ADDR
// end ;
9385: LD_VAR 0 3
9389: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9390: LD_INT 0
9392: PPUSH
9393: PPUSH
9394: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9395: LD_ADDR_VAR 0 1
9399: PUSH
9400: LD_VAR 0 1
9404: PUSH
9405: LD_EXP 1
9409: PUSH
9410: LD_EXP 2
9414: PUSH
9415: LD_EXP 3
9419: PUSH
9420: LD_EXP 4
9424: PUSH
9425: LD_EXP 5
9429: PUSH
9430: LD_EXP 6
9434: PUSH
9435: LD_EXP 7
9439: PUSH
9440: LD_EXP 8
9444: PUSH
9445: LD_EXP 9
9449: PUSH
9450: LD_EXP 10
9454: PUSH
9455: LD_EXP 11
9459: PUSH
9460: LD_EXP 12
9464: PUSH
9465: LD_EXP 13
9469: PUSH
9470: LD_EXP 14
9474: PUSH
9475: LD_EXP 15
9479: PUSH
9480: LD_EXP 16
9484: PUSH
9485: LD_EXP 17
9489: PUSH
9490: LD_EXP 18
9494: PUSH
9495: LD_EXP 19
9499: PUSH
9500: LD_EXP 24
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: LIST
9522: LIST
9523: LIST
9524: LIST
9525: LIST
9526: DIFF
9527: ST_TO_ADDR
// if not characters then
9528: LD_VAR 0 1
9532: NOT
9533: IFFALSE 9537
// exit ;
9535: GO 9683
// rnd = rand ( 1 , characters ) ;
9537: LD_ADDR_VAR 0 6
9541: PUSH
9542: LD_INT 1
9544: PPUSH
9545: LD_VAR 0 1
9549: PPUSH
9550: CALL_OW 12
9554: ST_TO_ADDR
// for i = 1 to characters do
9555: LD_ADDR_VAR 0 5
9559: PUSH
9560: DOUBLE
9561: LD_INT 1
9563: DEC
9564: ST_TO_ADDR
9565: LD_VAR 0 1
9569: PUSH
9570: FOR_TO
9571: IFFALSE 9681
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9573: LD_VAR 0 5
9577: PUSH
9578: LD_VAR 0 6
9582: EQUAL
9583: PUSH
9584: LD_VAR 0 1
9588: PUSH
9589: LD_VAR 0 5
9593: ARRAY
9594: PPUSH
9595: CALL_OW 258
9599: PUSH
9600: LD_INT 1
9602: EQUAL
9603: AND
9604: IFFALSE 9626
// Say ( characters [ i ] , dialogMID ) ;
9606: LD_VAR 0 1
9610: PUSH
9611: LD_VAR 0 5
9615: ARRAY
9616: PPUSH
9617: LD_VAR 0 2
9621: PPUSH
9622: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9626: LD_VAR 0 5
9630: PUSH
9631: LD_VAR 0 6
9635: EQUAL
9636: PUSH
9637: LD_VAR 0 1
9641: PUSH
9642: LD_VAR 0 5
9646: ARRAY
9647: PPUSH
9648: CALL_OW 258
9652: PUSH
9653: LD_INT 2
9655: EQUAL
9656: AND
9657: IFFALSE 9679
// Say ( characters [ i ] , dialogFID ) ;
9659: LD_VAR 0 1
9663: PUSH
9664: LD_VAR 0 5
9668: ARRAY
9669: PPUSH
9670: LD_VAR 0 3
9674: PPUSH
9675: CALL_OW 88
// end ;
9679: GO 9570
9681: POP
9682: POP
// end ;
9683: LD_VAR 0 4
9687: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9688: LD_INT 0
9690: PPUSH
9691: PPUSH
// for i in charactersList do
9692: LD_ADDR_VAR 0 4
9696: PUSH
9697: LD_VAR 0 1
9701: PUSH
9702: FOR_IN
9703: IFFALSE 9732
// begin if IsOk ( i ) then
9705: LD_VAR 0 4
9709: PPUSH
9710: CALL_OW 302
9714: IFFALSE 9730
// SaveCharacters ( i , ident ) ;
9716: LD_VAR 0 4
9720: PPUSH
9721: LD_VAR 0 2
9725: PPUSH
9726: CALL_OW 38
// end ;
9730: GO 9702
9732: POP
9733: POP
// end ;
9734: LD_VAR 0 3
9738: RET
// export function PrepareDifficulty ; begin
9739: LD_INT 0
9741: PPUSH
// if difficulty = 1 then
9742: LD_OWVAR 67
9746: PUSH
9747: LD_INT 1
9749: EQUAL
9750: IFFALSE 9794
// begin RuSolMinLevel = 4 ;
9752: LD_ADDR_EXP 36
9756: PUSH
9757: LD_INT 4
9759: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9760: LD_ADDR_EXP 37
9764: PUSH
9765: LD_INT 7
9767: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9768: LD_INT 51
9770: PPUSH
9771: LD_INT 6
9773: PPUSH
9774: LD_INT 2
9776: PPUSH
9777: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9781: LD_INT 51
9783: PPUSH
9784: LD_INT 5
9786: PPUSH
9787: LD_INT 2
9789: PPUSH
9790: CALL_OW 322
// end ; if difficulty = 2 then
9794: LD_OWVAR 67
9798: PUSH
9799: LD_INT 2
9801: EQUAL
9802: IFFALSE 9898
// begin RuSolMinLevel = 5 ;
9804: LD_ADDR_EXP 36
9808: PUSH
9809: LD_INT 5
9811: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9812: LD_ADDR_EXP 37
9816: PUSH
9817: LD_INT 7
9819: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9820: LD_INT 51
9822: PPUSH
9823: LD_INT 6
9825: PPUSH
9826: LD_INT 2
9828: PPUSH
9829: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
9833: LD_INT 57
9835: PPUSH
9836: LD_INT 6
9838: PPUSH
9839: LD_INT 2
9841: PPUSH
9842: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
9846: LD_INT 63
9848: PPUSH
9849: LD_INT 6
9851: PPUSH
9852: LD_INT 2
9854: PPUSH
9855: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
9859: LD_INT 51
9861: PPUSH
9862: LD_INT 5
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
9872: LD_INT 5
9874: PPUSH
9875: LD_INT 2
9877: PPUSH
9878: LD_INT 2
9880: PPUSH
9881: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
9885: LD_INT 5
9887: PPUSH
9888: LD_INT 5
9890: PPUSH
9891: LD_INT 2
9893: PPUSH
9894: CALL_OW 322
// end ; if difficulty = 3 then
9898: LD_OWVAR 67
9902: PUSH
9903: LD_INT 3
9905: EQUAL
9906: IFFALSE 10054
// begin RuSolMinLevel = 6 ;
9908: LD_ADDR_EXP 36
9912: PUSH
9913: LD_INT 6
9915: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
9916: LD_ADDR_EXP 37
9920: PUSH
9921: LD_INT 8
9923: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9924: LD_INT 51
9926: PPUSH
9927: LD_INT 6
9929: PPUSH
9930: LD_INT 2
9932: PPUSH
9933: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
9937: LD_INT 57
9939: PPUSH
9940: LD_INT 6
9942: PPUSH
9943: LD_INT 2
9945: PPUSH
9946: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
9950: LD_INT 52
9952: PPUSH
9953: LD_INT 6
9955: PPUSH
9956: LD_INT 2
9958: PPUSH
9959: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
9963: LD_INT 58
9965: PPUSH
9966: LD_INT 6
9968: PPUSH
9969: LD_INT 2
9971: PPUSH
9972: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
9976: LD_INT 63
9978: PPUSH
9979: LD_INT 6
9981: PPUSH
9982: LD_INT 2
9984: PPUSH
9985: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
9989: LD_INT 64
9991: PPUSH
9992: LD_INT 6
9994: PPUSH
9995: LD_INT 2
9997: PPUSH
9998: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10002: LD_INT 51
10004: PPUSH
10005: LD_INT 5
10007: PPUSH
10008: LD_INT 2
10010: PPUSH
10011: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10015: LD_INT 52
10017: PPUSH
10018: LD_INT 5
10020: PPUSH
10021: LD_INT 2
10023: PPUSH
10024: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10028: LD_INT 66
10030: PPUSH
10031: LD_INT 2
10033: PPUSH
10034: LD_INT 2
10036: PPUSH
10037: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10041: LD_INT 66
10043: PPUSH
10044: LD_INT 5
10046: PPUSH
10047: LD_INT 2
10049: PPUSH
10050: CALL_OW 322
// end ; end ;
10054: LD_VAR 0 1
10058: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10059: LD_INT 0
10061: PPUSH
10062: PPUSH
10063: PPUSH
10064: PPUSH
10065: PPUSH
// case position of 1 :
10066: LD_VAR 0 1
10070: PUSH
10071: LD_INT 1
10073: DOUBLE
10074: EQUAL
10075: IFTRUE 10079
10077: GO 10090
10079: POP
// area := westConv ; 2 :
10080: LD_ADDR_VAR 0 6
10084: PUSH
10085: LD_INT 20
10087: ST_TO_ADDR
10088: GO 10129
10090: LD_INT 2
10092: DOUBLE
10093: EQUAL
10094: IFTRUE 10098
10096: GO 10109
10098: POP
// area := midConv ; 3 :
10099: LD_ADDR_VAR 0 6
10103: PUSH
10104: LD_INT 21
10106: ST_TO_ADDR
10107: GO 10129
10109: LD_INT 3
10111: DOUBLE
10112: EQUAL
10113: IFTRUE 10117
10115: GO 10128
10117: POP
// area := eastConv ; end ;
10118: LD_ADDR_VAR 0 6
10122: PUSH
10123: LD_INT 22
10125: ST_TO_ADDR
10126: GO 10129
10128: POP
// area := AreaToList ( area , 0 ) ;
10129: LD_ADDR_VAR 0 6
10133: PUSH
10134: LD_VAR 0 6
10138: PPUSH
10139: LD_INT 0
10141: PPUSH
10142: CALL_OW 517
10146: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10147: LD_ADDR_VAR 0 3
10151: PUSH
10152: DOUBLE
10153: LD_INT 1
10155: DEC
10156: ST_TO_ADDR
10157: LD_VAR 0 6
10161: PUSH
10162: LD_INT 1
10164: ARRAY
10165: PUSH
10166: FOR_TO
10167: IFFALSE 10248
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10169: LD_VAR 0 6
10173: PUSH
10174: LD_INT 1
10176: ARRAY
10177: PUSH
10178: LD_VAR 0 3
10182: ARRAY
10183: PPUSH
10184: LD_VAR 0 6
10188: PUSH
10189: LD_INT 2
10191: ARRAY
10192: PUSH
10193: LD_VAR 0 3
10197: ARRAY
10198: PPUSH
10199: LD_INT 1
10201: PPUSH
10202: LD_INT 1
10204: PPUSH
10205: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10209: LD_VAR 0 6
10213: PUSH
10214: LD_INT 1
10216: ARRAY
10217: PUSH
10218: LD_VAR 0 3
10222: ARRAY
10223: PPUSH
10224: LD_VAR 0 6
10228: PUSH
10229: LD_INT 2
10231: ARRAY
10232: PUSH
10233: LD_VAR 0 3
10237: ARRAY
10238: PPUSH
10239: LD_INT 1
10241: PPUSH
10242: CALL_OW 331
// end ;
10246: GO 10166
10248: POP
10249: POP
// ruPossition = position ;
10250: LD_ADDR_EXP 41
10254: PUSH
10255: LD_VAR 0 1
10259: ST_TO_ADDR
// if position = 1 then
10260: LD_VAR 0 1
10264: PUSH
10265: LD_INT 1
10267: EQUAL
10268: IFFALSE 11016
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10270: LD_ADDR_VAR 0 4
10274: PUSH
10275: LD_INT 22
10277: PUSH
10278: LD_INT 3
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: PUSH
10285: LD_INT 25
10287: PUSH
10288: LD_INT 2
10290: PUSH
10291: EMPTY
10292: LIST
10293: LIST
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: PPUSH
10299: CALL_OW 69
10303: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10304: LD_ADDR_VAR 0 5
10308: PUSH
10309: LD_INT 0
10311: PUSH
10312: LD_INT 49
10314: PUSH
10315: LD_INT 74
10317: PUSH
10318: LD_INT 3
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: LD_INT 4
10329: PUSH
10330: LD_INT 73
10332: PUSH
10333: LD_INT 88
10335: PUSH
10336: LD_INT 5
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: PUSH
10345: LD_INT 4
10347: PUSH
10348: LD_INT 56
10350: PUSH
10351: LD_INT 62
10353: PUSH
10354: LD_INT 3
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 29
10365: PUSH
10366: LD_INT 43
10368: PUSH
10369: LD_INT 68
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: PUSH
10381: LD_INT 30
10383: PUSH
10384: LD_INT 43
10386: PUSH
10387: LD_INT 79
10389: PUSH
10390: LD_INT 5
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 28
10401: PUSH
10402: LD_INT 60
10404: PUSH
10405: LD_INT 75
10407: PUSH
10408: LD_INT 1
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 2
10419: PUSH
10420: LD_INT 50
10422: PUSH
10423: LD_INT 87
10425: PUSH
10426: LD_INT 1
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: PUSH
10435: LD_INT 28
10437: PUSH
10438: LD_INT 45
10440: PUSH
10441: LD_INT 67
10443: PUSH
10444: LD_INT 2
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: PUSH
10453: LD_INT 17
10455: PUSH
10456: LD_INT 47
10458: PUSH
10459: LD_INT 84
10461: PUSH
10462: LD_INT 2
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: PUSH
10471: LD_INT 18
10473: PUSH
10474: LD_INT 46
10476: PUSH
10477: LD_INT 87
10479: PUSH
10480: LD_INT 1
10482: PUSH
10483: EMPTY
10484: LIST
10485: LIST
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 28
10491: PUSH
10492: LD_INT 41
10494: PUSH
10495: LD_INT 64
10497: PUSH
10498: LD_INT 5
10500: PUSH
10501: EMPTY
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 32
10509: PUSH
10510: LD_INT 75
10512: PUSH
10513: LD_INT 76
10515: PUSH
10516: LD_INT 5
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: PUSH
10525: LD_INT 32
10527: PUSH
10528: LD_INT 77
10530: PUSH
10531: LD_INT 75
10533: PUSH
10534: LD_INT 5
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 32
10545: PUSH
10546: LD_INT 69
10548: PUSH
10549: LD_INT 68
10551: PUSH
10552: LD_INT 3
10554: PUSH
10555: EMPTY
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 32
10563: PUSH
10564: LD_INT 59
10566: PUSH
10567: LD_INT 96
10569: PUSH
10570: LD_INT 5
10572: PUSH
10573: EMPTY
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: PUSH
10579: LD_INT 32
10581: PUSH
10582: LD_INT 56
10584: PUSH
10585: LD_INT 96
10587: PUSH
10588: LD_INT 0
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 32
10599: PUSH
10600: LD_INT 51
10602: PUSH
10603: LD_INT 61
10605: PUSH
10606: LD_INT 3
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 32
10617: PUSH
10618: LD_INT 42
10620: PUSH
10621: LD_INT 60
10623: PUSH
10624: LD_INT 3
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: PUSH
10633: LD_INT 32
10635: PUSH
10636: LD_INT 36
10638: PUSH
10639: LD_INT 58
10641: PUSH
10642: LD_INT 3
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 32
10653: PUSH
10654: LD_INT 39
10656: PUSH
10657: LD_INT 59
10659: PUSH
10660: LD_INT 3
10662: PUSH
10663: EMPTY
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: PUSH
10669: LD_INT 32
10671: PUSH
10672: LD_INT 61
10674: PUSH
10675: LD_INT 64
10677: PUSH
10678: LD_INT 3
10680: PUSH
10681: EMPTY
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: LD_INT 33
10689: PUSH
10690: LD_INT 63
10692: PUSH
10693: LD_INT 90
10695: PUSH
10696: LD_INT 5
10698: PUSH
10699: EMPTY
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: PUSH
10705: LD_INT 33
10707: PUSH
10708: LD_INT 64
10710: PUSH
10711: LD_INT 88
10713: PUSH
10714: LD_INT 5
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 33
10725: PUSH
10726: LD_INT 72
10728: PUSH
10729: LD_INT 82
10731: PUSH
10732: LD_INT 5
10734: PUSH
10735: EMPTY
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: PUSH
10741: LD_INT 6
10743: PUSH
10744: LD_INT 42
10746: PUSH
10747: LD_INT 74
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 6
10761: PUSH
10762: LD_INT 56
10764: PUSH
10765: LD_INT 77
10767: PUSH
10768: LD_INT 2
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: PUSH
10777: LD_INT 21
10779: PUSH
10780: LD_INT 54
10782: PUSH
10783: LD_INT 91
10785: PUSH
10786: LD_INT 5
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: PUSH
10795: LD_INT 16
10797: PUSH
10798: LD_INT 50
10800: PUSH
10801: LD_INT 83
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: PUSH
10813: LD_INT 24
10815: PUSH
10816: LD_INT 50
10818: PUSH
10819: LD_INT 90
10821: PUSH
10822: LD_INT 0
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: PUSH
10831: EMPTY
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
10862: LD_ADDR_VAR 0 3
10866: PUSH
10867: LD_INT 22
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: PUSH
10877: LD_INT 3
10879: PUSH
10880: LD_INT 25
10882: PUSH
10883: LD_INT 2
10885: PUSH
10886: EMPTY
10887: LIST
10888: LIST
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PPUSH
10898: CALL_OW 69
10902: PUSH
10903: FOR_IN
10904: IFFALSE 10923
// AddComAgressiveMove ( i , 53 , 82 ) ;
10906: LD_VAR 0 3
10910: PPUSH
10911: LD_INT 53
10913: PPUSH
10914: LD_INT 82
10916: PPUSH
10917: CALL_OW 174
10921: GO 10903
10923: POP
10924: POP
// for i := 1 to buildingsTab do
10925: LD_ADDR_VAR 0 3
10929: PUSH
10930: DOUBLE
10931: LD_INT 1
10933: DEC
10934: ST_TO_ADDR
10935: LD_VAR 0 5
10939: PUSH
10940: FOR_TO
10941: IFFALSE 11014
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10943: LD_VAR 0 4
10947: PPUSH
10948: LD_VAR 0 5
10952: PUSH
10953: LD_VAR 0 3
10957: ARRAY
10958: PUSH
10959: LD_INT 1
10961: ARRAY
10962: PPUSH
10963: LD_VAR 0 5
10967: PUSH
10968: LD_VAR 0 3
10972: ARRAY
10973: PUSH
10974: LD_INT 2
10976: ARRAY
10977: PPUSH
10978: LD_VAR 0 5
10982: PUSH
10983: LD_VAR 0 3
10987: ARRAY
10988: PUSH
10989: LD_INT 3
10991: ARRAY
10992: PPUSH
10993: LD_VAR 0 5
10997: PUSH
10998: LD_VAR 0 3
11002: ARRAY
11003: PUSH
11004: LD_INT 4
11006: ARRAY
11007: PPUSH
11008: CALL_OW 205
11012: GO 10940
11014: POP
11015: POP
// end ; if position = 2 then
11016: LD_VAR 0 1
11020: PUSH
11021: LD_INT 2
11023: EQUAL
11024: IFFALSE 11639
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11026: LD_ADDR_VAR 0 4
11030: PUSH
11031: LD_INT 22
11033: PUSH
11034: LD_INT 3
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 25
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: PUSH
11051: EMPTY
11052: LIST
11053: LIST
11054: PPUSH
11055: CALL_OW 69
11059: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_INT 0
11067: PUSH
11068: LD_INT 104
11070: PUSH
11071: LD_INT 110
11073: PUSH
11074: LD_INT 5
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: PUSH
11083: LD_INT 4
11085: PUSH
11086: LD_INT 98
11088: PUSH
11089: LD_INT 90
11091: PUSH
11092: LD_INT 3
11094: PUSH
11095: EMPTY
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 29
11103: PUSH
11104: LD_INT 103
11106: PUSH
11107: LD_INT 114
11109: PUSH
11110: LD_INT 2
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 30
11121: PUSH
11122: LD_INT 99
11124: PUSH
11125: LD_INT 114
11127: PUSH
11128: LD_INT 3
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 28
11139: PUSH
11140: LD_INT 100
11142: PUSH
11143: LD_INT 112
11145: PUSH
11146: LD_INT 1
11148: PUSH
11149: EMPTY
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: PUSH
11155: LD_INT 2
11157: PUSH
11158: LD_INT 92
11160: PUSH
11161: LD_INT 101
11163: PUSH
11164: LD_INT 0
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: PUSH
11173: LD_INT 28
11175: PUSH
11176: LD_INT 97
11178: PUSH
11179: LD_INT 116
11181: PUSH
11182: LD_INT 5
11184: PUSH
11185: EMPTY
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: PUSH
11191: LD_INT 17
11193: PUSH
11194: LD_INT 96
11196: PUSH
11197: LD_INT 101
11199: PUSH
11200: LD_INT 4
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: PUSH
11209: LD_INT 18
11211: PUSH
11212: LD_INT 88
11214: PUSH
11215: LD_INT 97
11217: PUSH
11218: LD_INT 2
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 28
11229: PUSH
11230: LD_INT 106
11232: PUSH
11233: LD_INT 92
11235: PUSH
11236: LD_INT 2
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 32
11247: PUSH
11248: LD_INT 88
11250: PUSH
11251: LD_INT 89
11253: PUSH
11254: LD_INT 2
11256: PUSH
11257: EMPTY
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: PUSH
11263: LD_INT 32
11265: PUSH
11266: LD_INT 86
11268: PUSH
11269: LD_INT 90
11271: PUSH
11272: LD_INT 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 32
11283: PUSH
11284: LD_INT 85
11286: PUSH
11287: LD_INT 99
11289: PUSH
11290: LD_INT 2
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: PUSH
11299: LD_INT 32
11301: PUSH
11302: LD_INT 85
11304: PUSH
11305: LD_INT 107
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: LIST
11315: LIST
11316: PUSH
11317: LD_INT 33
11319: PUSH
11320: LD_INT 105
11322: PUSH
11323: LD_INT 99
11325: PUSH
11326: LD_INT 1
11328: PUSH
11329: EMPTY
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 33
11337: PUSH
11338: LD_INT 102
11340: PUSH
11341: LD_INT 92
11343: PUSH
11344: LD_INT 3
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 33
11355: PUSH
11356: LD_INT 105
11358: PUSH
11359: LD_INT 92
11361: PUSH
11362: LD_INT 2
11364: PUSH
11365: EMPTY
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: PUSH
11371: LD_INT 6
11373: PUSH
11374: LD_INT 92
11376: PUSH
11377: LD_INT 110
11379: PUSH
11380: LD_INT 0
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: LIST
11387: LIST
11388: PUSH
11389: LD_INT 6
11391: PUSH
11392: LD_INT 103
11394: PUSH
11395: LD_INT 103
11397: PUSH
11398: LD_INT 5
11400: PUSH
11401: EMPTY
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: PUSH
11407: LD_INT 21
11409: PUSH
11410: LD_INT 89
11412: PUSH
11413: LD_INT 101
11415: PUSH
11416: LD_INT 1
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 16
11427: PUSH
11428: LD_INT 95
11430: PUSH
11431: LD_INT 104
11433: PUSH
11434: LD_INT 4
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: PUSH
11443: LD_INT 24
11445: PUSH
11446: LD_INT 92
11448: PUSH
11449: LD_INT 105
11451: PUSH
11452: LD_INT 0
11454: PUSH
11455: EMPTY
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: PUSH
11461: EMPTY
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: LIST
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: LIST
11483: LIST
11484: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11485: LD_ADDR_VAR 0 3
11489: PUSH
11490: LD_INT 22
11492: PUSH
11493: LD_INT 3
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 3
11502: PUSH
11503: LD_INT 25
11505: PUSH
11506: LD_INT 2
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PPUSH
11521: CALL_OW 69
11525: PUSH
11526: FOR_IN
11527: IFFALSE 11546
// AddComAgressiveMove ( i , 96 , 99 ) ;
11529: LD_VAR 0 3
11533: PPUSH
11534: LD_INT 96
11536: PPUSH
11537: LD_INT 99
11539: PPUSH
11540: CALL_OW 174
11544: GO 11526
11546: POP
11547: POP
// for i := 1 to buildingsTab do
11548: LD_ADDR_VAR 0 3
11552: PUSH
11553: DOUBLE
11554: LD_INT 1
11556: DEC
11557: ST_TO_ADDR
11558: LD_VAR 0 5
11562: PUSH
11563: FOR_TO
11564: IFFALSE 11637
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11566: LD_VAR 0 4
11570: PPUSH
11571: LD_VAR 0 5
11575: PUSH
11576: LD_VAR 0 3
11580: ARRAY
11581: PUSH
11582: LD_INT 1
11584: ARRAY
11585: PPUSH
11586: LD_VAR 0 5
11590: PUSH
11591: LD_VAR 0 3
11595: ARRAY
11596: PUSH
11597: LD_INT 2
11599: ARRAY
11600: PPUSH
11601: LD_VAR 0 5
11605: PUSH
11606: LD_VAR 0 3
11610: ARRAY
11611: PUSH
11612: LD_INT 3
11614: ARRAY
11615: PPUSH
11616: LD_VAR 0 5
11620: PUSH
11621: LD_VAR 0 3
11625: ARRAY
11626: PUSH
11627: LD_INT 4
11629: ARRAY
11630: PPUSH
11631: CALL_OW 205
11635: GO 11563
11637: POP
11638: POP
// end ; if position = 3 then
11639: LD_VAR 0 1
11643: PUSH
11644: LD_INT 3
11646: EQUAL
11647: IFFALSE 12433
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11649: LD_ADDR_VAR 0 4
11653: PUSH
11654: LD_INT 22
11656: PUSH
11657: LD_INT 3
11659: PUSH
11660: EMPTY
11661: LIST
11662: LIST
11663: PUSH
11664: LD_INT 25
11666: PUSH
11667: LD_INT 2
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: PPUSH
11678: CALL_OW 69
11682: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11683: LD_ADDR_VAR 0 5
11687: PUSH
11688: LD_INT 0
11690: PUSH
11691: LD_INT 151
11693: PUSH
11694: LD_INT 71
11696: PUSH
11697: LD_INT 4
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: LD_INT 4
11708: PUSH
11709: LD_INT 145
11711: PUSH
11712: LD_INT 53
11714: PUSH
11715: LD_INT 3
11717: PUSH
11718: EMPTY
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: PUSH
11724: LD_INT 4
11726: PUSH
11727: LD_INT 172
11729: PUSH
11730: LD_INT 102
11732: PUSH
11733: LD_INT 5
11735: PUSH
11736: EMPTY
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: PUSH
11742: LD_INT 29
11744: PUSH
11745: LD_INT 152
11747: PUSH
11748: LD_INT 85
11750: PUSH
11751: LD_INT 3
11753: PUSH
11754: EMPTY
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: PUSH
11760: LD_INT 30
11762: PUSH
11763: LD_INT 156
11765: PUSH
11766: LD_INT 92
11768: PUSH
11769: LD_INT 3
11771: PUSH
11772: EMPTY
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 28
11780: PUSH
11781: LD_INT 151
11783: PUSH
11784: LD_INT 66
11786: PUSH
11787: LD_INT 4
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 2
11798: PUSH
11799: LD_INT 163
11801: PUSH
11802: LD_INT 95
11804: PUSH
11805: LD_INT 5
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 28
11816: PUSH
11817: LD_INT 149
11819: PUSH
11820: LD_INT 63
11822: PUSH
11823: LD_INT 4
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 17
11834: PUSH
11835: LD_INT 167
11837: PUSH
11838: LD_INT 99
11840: PUSH
11841: LD_INT 5
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 18
11852: PUSH
11853: LD_INT 163
11855: PUSH
11856: LD_INT 98
11858: PUSH
11859: LD_INT 0
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 28
11870: PUSH
11871: LD_INT 154
11873: PUSH
11874: LD_INT 70
11876: PUSH
11877: LD_INT 4
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 32
11888: PUSH
11889: LD_INT 155
11891: PUSH
11892: LD_INT 62
11894: PUSH
11895: LD_INT 4
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 32
11906: PUSH
11907: LD_INT 161
11909: PUSH
11910: LD_INT 69
11912: PUSH
11913: LD_INT 4
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 32
11924: PUSH
11925: LD_INT 168
11927: PUSH
11928: LD_INT 78
11930: PUSH
11931: LD_INT 4
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 32
11942: PUSH
11943: LD_INT 163
11945: PUSH
11946: LD_INT 80
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 32
11960: PUSH
11961: LD_INT 136
11963: PUSH
11964: LD_INT 73
11966: PUSH
11967: LD_INT 0
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 32
11978: PUSH
11979: LD_INT 157
11981: PUSH
11982: LD_INT 98
11984: PUSH
11985: LD_INT 0
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 32
11996: PUSH
11997: LD_INT 150
11999: PUSH
12000: LD_INT 87
12002: PUSH
12003: LD_INT 1
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 33
12014: PUSH
12015: LD_INT 171
12017: PUSH
12018: LD_INT 97
12020: PUSH
12021: LD_INT 4
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 33
12032: PUSH
12033: LD_INT 168
12035: PUSH
12036: LD_INT 92
12038: PUSH
12039: LD_INT 4
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 33
12050: PUSH
12051: LD_INT 166
12053: PUSH
12054: LD_INT 80
12056: PUSH
12057: LD_INT 5
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: LD_INT 141
12071: PUSH
12072: LD_INT 54
12074: PUSH
12075: LD_INT 2
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: LD_INT 133
12089: PUSH
12090: LD_INT 57
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 132
12107: PUSH
12108: LD_INT 61
12110: PUSH
12111: LD_INT 2
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 33
12122: PUSH
12123: LD_INT 150
12125: PUSH
12126: LD_INT 82
12128: PUSH
12129: LD_INT 0
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 33
12140: PUSH
12141: LD_INT 132
12143: PUSH
12144: LD_INT 72
12146: PUSH
12147: LD_INT 0
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 6
12158: PUSH
12159: LD_INT 146
12161: PUSH
12162: LD_INT 64
12164: PUSH
12165: LD_INT 4
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 6
12176: PUSH
12177: LD_INT 159
12179: PUSH
12180: LD_INT 85
12182: PUSH
12183: LD_INT 4
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 21
12194: PUSH
12195: LD_INT 163
12197: PUSH
12198: LD_INT 91
12200: PUSH
12201: LD_INT 3
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 16
12212: PUSH
12213: LD_INT 166
12215: PUSH
12216: LD_INT 95
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: PUSH
12228: LD_INT 24
12230: PUSH
12231: LD_INT 159
12233: PUSH
12234: LD_INT 95
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12279: LD_ADDR_VAR 0 3
12283: PUSH
12284: LD_INT 22
12286: PUSH
12287: LD_INT 3
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 3
12296: PUSH
12297: LD_INT 25
12299: PUSH
12300: LD_INT 2
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: PUSH
12320: FOR_IN
12321: IFFALSE 12340
// AddComAgressiveMove ( i , 141 , 65 ) ;
12323: LD_VAR 0 3
12327: PPUSH
12328: LD_INT 141
12330: PPUSH
12331: LD_INT 65
12333: PPUSH
12334: CALL_OW 174
12338: GO 12320
12340: POP
12341: POP
// for i := 1 to buildingsTab do
12342: LD_ADDR_VAR 0 3
12346: PUSH
12347: DOUBLE
12348: LD_INT 1
12350: DEC
12351: ST_TO_ADDR
12352: LD_VAR 0 5
12356: PUSH
12357: FOR_TO
12358: IFFALSE 12431
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12360: LD_VAR 0 4
12364: PPUSH
12365: LD_VAR 0 5
12369: PUSH
12370: LD_VAR 0 3
12374: ARRAY
12375: PUSH
12376: LD_INT 1
12378: ARRAY
12379: PPUSH
12380: LD_VAR 0 5
12384: PUSH
12385: LD_VAR 0 3
12389: ARRAY
12390: PUSH
12391: LD_INT 2
12393: ARRAY
12394: PPUSH
12395: LD_VAR 0 5
12399: PUSH
12400: LD_VAR 0 3
12404: ARRAY
12405: PUSH
12406: LD_INT 3
12408: ARRAY
12409: PPUSH
12410: LD_VAR 0 5
12414: PUSH
12415: LD_VAR 0 3
12419: ARRAY
12420: PUSH
12421: LD_INT 4
12423: ARRAY
12424: PPUSH
12425: CALL_OW 205
12429: GO 12357
12431: POP
12432: POP
// end ; end ;
12433: LD_VAR 0 2
12437: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12438: LD_INT 0
12440: PPUSH
12441: PPUSH
12442: PPUSH
12443: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12444: LD_ADDR_VAR 0 3
12448: PUSH
12449: LD_INT 22
12451: PUSH
12452: LD_INT 2
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: LD_INT 25
12461: PUSH
12462: LD_INT 2
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PUSH
12469: EMPTY
12470: LIST
12471: LIST
12472: PPUSH
12473: CALL_OW 69
12477: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12478: LD_VAR 0 3
12482: PPUSH
12483: LD_INT 0
12485: PPUSH
12486: LD_INT 71
12488: PPUSH
12489: LD_INT 15
12491: PPUSH
12492: LD_INT 3
12494: PPUSH
12495: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12499: LD_ADDR_VAR 0 4
12503: PUSH
12504: LD_INT 6
12506: PUSH
12507: LD_INT 77
12509: PUSH
12510: LD_INT 18
12512: PUSH
12513: LD_INT 3
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 4
12524: PUSH
12525: LD_INT 77
12527: PUSH
12528: LD_INT 26
12530: PUSH
12531: LD_INT 0
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PUSH
12540: LD_INT 31
12542: PUSH
12543: LD_INT 82
12545: PUSH
12546: LD_INT 28
12548: PUSH
12549: LD_INT 0
12551: PUSH
12552: EMPTY
12553: LIST
12554: LIST
12555: LIST
12556: LIST
12557: PUSH
12558: LD_INT 31
12560: PUSH
12561: LD_INT 84
12563: PUSH
12564: LD_INT 21
12566: PUSH
12567: LD_INT 3
12569: PUSH
12570: EMPTY
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: PUSH
12576: LD_INT 31
12578: PUSH
12579: LD_INT 66
12581: PUSH
12582: LD_INT 14
12584: PUSH
12585: LD_INT 2
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: PUSH
12594: LD_INT 27
12596: PUSH
12597: LD_INT 67
12599: PUSH
12600: LD_INT 18
12602: PUSH
12603: LD_INT 5
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 27
12614: PUSH
12615: LD_INT 69
12617: PUSH
12618: LD_INT 23
12620: PUSH
12621: LD_INT 2
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: ST_TO_ADDR
// for i := 1 to buildingsTab do
12639: LD_ADDR_VAR 0 2
12643: PUSH
12644: DOUBLE
12645: LD_INT 1
12647: DEC
12648: ST_TO_ADDR
12649: LD_VAR 0 4
12653: PUSH
12654: FOR_TO
12655: IFFALSE 12728
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12657: LD_VAR 0 3
12661: PPUSH
12662: LD_VAR 0 4
12666: PUSH
12667: LD_VAR 0 2
12671: ARRAY
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_VAR 0 4
12681: PUSH
12682: LD_VAR 0 2
12686: ARRAY
12687: PUSH
12688: LD_INT 2
12690: ARRAY
12691: PPUSH
12692: LD_VAR 0 4
12696: PUSH
12697: LD_VAR 0 2
12701: ARRAY
12702: PUSH
12703: LD_INT 3
12705: ARRAY
12706: PPUSH
12707: LD_VAR 0 4
12711: PUSH
12712: LD_VAR 0 2
12716: ARRAY
12717: PUSH
12718: LD_INT 4
12720: ARRAY
12721: PPUSH
12722: CALL_OW 205
12726: GO 12654
12728: POP
12729: POP
// end ;
12730: LD_VAR 0 1
12734: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12735: LD_INT 0
12737: PPUSH
12738: PPUSH
12739: PPUSH
12740: PPUSH
12741: PPUSH
12742: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12743: LD_ADDR_VAR 0 7
12747: PUSH
12748: LD_INT 22
12750: PUSH
12751: LD_VAR 0 1
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 25
12762: PUSH
12763: LD_INT 9
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: PPUSH
12774: CALL_OW 69
12778: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12779: LD_ADDR_VAR 0 8
12783: PUSH
12784: LD_INT 22
12786: PUSH
12787: LD_VAR 0 2
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: PUSH
12796: LD_INT 3
12798: PUSH
12799: LD_INT 21
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: EMPTY
12810: LIST
12811: LIST
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PPUSH
12817: CALL_OW 69
12821: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
12822: LD_ADDR_VAR 0 5
12826: PUSH
12827: LD_INT 1
12829: PPUSH
12830: LD_INT 3
12832: PPUSH
12833: CALL_OW 12
12837: ST_TO_ADDR
// for i = 1 to list do
12838: LD_ADDR_VAR 0 6
12842: PUSH
12843: DOUBLE
12844: LD_INT 1
12846: DEC
12847: ST_TO_ADDR
12848: LD_VAR 0 7
12852: PUSH
12853: FOR_TO
12854: IFFALSE 13824
// for ta in filter do
12856: LD_ADDR_VAR 0 4
12860: PUSH
12861: LD_VAR 0 8
12865: PUSH
12866: FOR_IN
12867: IFFALSE 13820
// begin if GetDistUnits ( list [ i ] , ta ) <= 12 then
12869: LD_VAR 0 7
12873: PUSH
12874: LD_VAR 0 6
12878: ARRAY
12879: PPUSH
12880: LD_VAR 0 4
12884: PPUSH
12885: CALL_OW 296
12889: PUSH
12890: LD_INT 12
12892: LESSEQUAL
12893: IFFALSE 13818
// begin case c of 1 :
12895: LD_VAR 0 5
12899: PUSH
12900: LD_INT 1
12902: DOUBLE
12903: EQUAL
12904: IFTRUE 12908
12906: GO 13340
12908: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
12909: LD_VAR 0 7
12913: PUSH
12914: LD_VAR 0 6
12918: ARRAY
12919: PPUSH
12920: LD_VAR 0 4
12924: PPUSH
12925: CALL_OW 250
12929: PPUSH
12930: LD_VAR 0 4
12934: PPUSH
12935: CALL_OW 251
12939: PPUSH
12940: CALL_OW 154
// if eventVar2 = 0 then
12944: LD_EXP 62
12948: PUSH
12949: LD_INT 0
12951: EQUAL
12952: IFFALSE 13338
// begin eventVar2 = 1 ;
12954: LD_ADDR_EXP 62
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// wait ( 0 0$7 ) ;
12962: LD_INT 245
12964: PPUSH
12965: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
12969: LD_VAR 0 4
12973: PPUSH
12974: CALL_OW 250
12978: PPUSH
12979: LD_VAR 0 4
12983: PPUSH
12984: CALL_OW 251
12988: PPUSH
12989: CALL_OW 84
// DialogueOn ;
12993: CALL_OW 6
// if IsOK ( Cyrus ) then
12997: LD_EXP 5
13001: PPUSH
13002: CALL_OW 302
13006: IFFALSE 13022
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13008: LD_EXP 5
13012: PPUSH
13013: LD_STRING D9a-Cyrus-1
13015: PPUSH
13016: CALL_OW 88
// end else
13020: GO 13144
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13022: LD_INT 22
13024: PUSH
13025: LD_INT 1
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 26
13034: PUSH
13035: LD_INT 1
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 2
13044: PUSH
13045: LD_INT 25
13047: PUSH
13048: LD_INT 1
13050: PUSH
13051: EMPTY
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 25
13057: PUSH
13058: LD_INT 2
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 3
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: LD_INT 25
13077: PUSH
13078: LD_INT 4
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: PUSH
13085: LD_INT 25
13087: PUSH
13088: LD_INT 5
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: PPUSH
13108: CALL_OW 69
13112: PUSH
13113: LD_EXP 1
13117: PUSH
13118: LD_EXP 14
13122: PUSH
13123: LD_EXP 5
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: LIST
13132: DIFF
13133: PPUSH
13134: LD_STRING D9a-Sol1-1
13136: PPUSH
13137: LD_STRING D9a-Sol1-1
13139: PPUSH
13140: CALL 9390 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13144: LD_INT 22
13146: PUSH
13147: LD_INT 1
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: LD_INT 26
13156: PUSH
13157: LD_INT 1
13159: PUSH
13160: EMPTY
13161: LIST
13162: LIST
13163: PUSH
13164: LD_INT 2
13166: PUSH
13167: LD_INT 25
13169: PUSH
13170: LD_INT 1
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: LD_INT 25
13179: PUSH
13180: LD_INT 2
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 25
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 25
13199: PUSH
13200: LD_INT 4
13202: PUSH
13203: EMPTY
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 25
13209: PUSH
13210: LD_INT 5
13212: PUSH
13213: EMPTY
13214: LIST
13215: LIST
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: LIST
13229: PPUSH
13230: CALL_OW 69
13234: PUSH
13235: LD_EXP 1
13239: PUSH
13240: LD_EXP 14
13244: PUSH
13245: LD_EXP 5
13249: PUSH
13250: EMPTY
13251: LIST
13252: LIST
13253: LIST
13254: DIFF
13255: PPUSH
13256: LD_STRING D9b-Sol1-1
13258: PPUSH
13259: LD_STRING D9b-Sol1-1
13261: PPUSH
13262: CALL 9390 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13266: LD_STRING 09_arInfo
13268: PPUSH
13269: LD_INT 0
13271: PPUSH
13272: CALL_OW 30
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: IFFALSE 13294
// Say ( JMM , D9a-JMM-1 ) ;
13282: LD_EXP 1
13286: PPUSH
13287: LD_STRING D9a-JMM-1
13289: PPUSH
13290: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13294: LD_EXP 1
13298: PPUSH
13299: LD_STRING D9c-JMM-1
13301: PPUSH
13302: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13306: LD_INT 12
13308: PPUSH
13309: LD_INT 1
13311: PPUSH
13312: CALL_OW 321
13316: PUSH
13317: LD_INT 2
13319: EQUAL
13320: IFFALSE 13334
// Say ( JMM , D9c-JMM-1a ) ;
13322: LD_EXP 1
13326: PPUSH
13327: LD_STRING D9c-JMM-1a
13329: PPUSH
13330: CALL_OW 88
// DialogueOff ;
13334: CALL_OW 7
// end ; end ; 2 :
13338: GO 13818
13340: LD_INT 2
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13806
13348: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13349: LD_VAR 0 7
13353: PUSH
13354: LD_VAR 0 6
13358: ARRAY
13359: PPUSH
13360: LD_VAR 0 4
13364: PPUSH
13365: CALL_OW 250
13369: PUSH
13370: LD_INT 1
13372: NEG
13373: PPUSH
13374: LD_INT 1
13376: PPUSH
13377: CALL_OW 12
13381: PLUS
13382: PPUSH
13383: LD_VAR 0 4
13387: PPUSH
13388: CALL_OW 251
13392: PUSH
13393: LD_INT 1
13395: NEG
13396: PPUSH
13397: LD_INT 1
13399: PPUSH
13400: CALL_OW 12
13404: PLUS
13405: PPUSH
13406: CALL_OW 153
// if eventVar2 = 0 then
13410: LD_EXP 62
13414: PUSH
13415: LD_INT 0
13417: EQUAL
13418: IFFALSE 13804
// begin eventVar2 = 1 ;
13420: LD_ADDR_EXP 62
13424: PUSH
13425: LD_INT 1
13427: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13428: LD_INT 245
13430: PPUSH
13431: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13435: LD_VAR 0 4
13439: PPUSH
13440: CALL_OW 250
13444: PPUSH
13445: LD_VAR 0 4
13449: PPUSH
13450: CALL_OW 251
13454: PPUSH
13455: CALL_OW 84
// DialogueOn ;
13459: CALL_OW 6
// if IsOK ( Cyrus ) then
13463: LD_EXP 5
13467: PPUSH
13468: CALL_OW 302
13472: IFFALSE 13488
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13474: LD_EXP 5
13478: PPUSH
13479: LD_STRING D9a-Cyrus-1
13481: PPUSH
13482: CALL_OW 88
// end else
13486: GO 13610
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13488: LD_INT 22
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 26
13500: PUSH
13501: LD_INT 1
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 2
13510: PUSH
13511: LD_INT 25
13513: PUSH
13514: LD_INT 1
13516: PUSH
13517: EMPTY
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 25
13523: PUSH
13524: LD_INT 2
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 25
13533: PUSH
13534: LD_INT 3
13536: PUSH
13537: EMPTY
13538: LIST
13539: LIST
13540: PUSH
13541: LD_INT 25
13543: PUSH
13544: LD_INT 4
13546: PUSH
13547: EMPTY
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 25
13553: PUSH
13554: LD_INT 5
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: PPUSH
13574: CALL_OW 69
13578: PUSH
13579: LD_EXP 1
13583: PUSH
13584: LD_EXP 14
13588: PUSH
13589: LD_EXP 5
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: DIFF
13599: PPUSH
13600: LD_STRING D9a-Sol1-1
13602: PPUSH
13603: LD_STRING D9a-Sol1-1
13605: PPUSH
13606: CALL 9390 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13610: LD_INT 22
13612: PUSH
13613: LD_INT 1
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 26
13622: PUSH
13623: LD_INT 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: LD_INT 25
13635: PUSH
13636: LD_INT 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 25
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 25
13655: PUSH
13656: LD_INT 3
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 25
13665: PUSH
13666: LD_INT 4
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 25
13675: PUSH
13676: LD_INT 5
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 69
13700: PUSH
13701: LD_EXP 1
13705: PUSH
13706: LD_EXP 14
13710: PUSH
13711: LD_EXP 5
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: DIFF
13721: PPUSH
13722: LD_STRING D9b-Sol1-1
13724: PPUSH
13725: LD_STRING D9b-Sol1-1
13727: PPUSH
13728: CALL 9390 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13732: LD_STRING 09_arInfo
13734: PPUSH
13735: LD_INT 0
13737: PPUSH
13738: CALL_OW 30
13742: PUSH
13743: LD_INT 1
13745: EQUAL
13746: IFFALSE 13760
// Say ( JMM , D9a-JMM-1 ) ;
13748: LD_EXP 1
13752: PPUSH
13753: LD_STRING D9a-JMM-1
13755: PPUSH
13756: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13760: LD_EXP 1
13764: PPUSH
13765: LD_STRING D9c-JMM-1
13767: PPUSH
13768: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13772: LD_INT 12
13774: PPUSH
13775: LD_INT 1
13777: PPUSH
13778: CALL_OW 321
13782: PUSH
13783: LD_INT 2
13785: EQUAL
13786: IFFALSE 13800
// Say ( JMM , D9c-JMM-1a ) ;
13788: LD_EXP 1
13792: PPUSH
13793: LD_STRING D9c-JMM-1a
13795: PPUSH
13796: CALL_OW 88
// DialogueOff ;
13800: CALL_OW 7
// end ; end ; 3 :
13804: GO 13818
13806: LD_INT 3
13808: DOUBLE
13809: EQUAL
13810: IFTRUE 13814
13812: GO 13817
13814: POP
// ; end ;
13815: GO 13818
13817: POP
// end ; end ;
13818: GO 12866
13820: POP
13821: POP
13822: GO 12853
13824: POP
13825: POP
// end ;
13826: LD_VAR 0 3
13830: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
13831: LD_INT 0
13833: PPUSH
13834: PPUSH
13835: PPUSH
13836: PPUSH
// for i = 1 to 72 do
13837: LD_ADDR_VAR 0 5
13841: PUSH
13842: DOUBLE
13843: LD_INT 1
13845: DEC
13846: ST_TO_ADDR
13847: LD_INT 72
13849: PUSH
13850: FOR_TO
13851: IFFALSE 13909
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
13853: LD_VAR 0 5
13857: PPUSH
13858: LD_VAR 0 1
13862: PPUSH
13863: CALL_OW 321
13867: PUSH
13868: LD_INT 1
13870: EQUAL
13871: PUSH
13872: LD_VAR 0 5
13876: PPUSH
13877: LD_VAR 0 3
13881: PPUSH
13882: CALL_OW 482
13886: PUSH
13887: LD_INT 1
13889: EQUAL
13890: AND
13891: IFFALSE 13907
// AddComResearch ( lab , i ) ;
13893: LD_VAR 0 2
13897: PPUSH
13898: LD_VAR 0 5
13902: PPUSH
13903: CALL_OW 184
13907: GO 13850
13909: POP
13910: POP
// end ;
13911: LD_VAR 0 4
13915: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
13916: LD_INT 0
13918: PPUSH
13919: PPUSH
13920: PPUSH
13921: PPUSH
13922: PPUSH
13923: PPUSH
13924: PPUSH
13925: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
13926: LD_ADDR_VAR 0 6
13930: PUSH
13931: LD_INT 22
13933: PUSH
13934: LD_VAR 0 1
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 56
13945: PUSH
13946: EMPTY
13947: LIST
13948: PUSH
13949: LD_INT 24
13951: PUSH
13952: LD_INT 700
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: PUSH
13959: LD_INT 3
13961: PUSH
13962: LD_INT 60
13964: PUSH
13965: EMPTY
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: PUSH
13972: LD_INT 2
13974: PUSH
13975: LD_INT 25
13977: PUSH
13978: LD_INT 1
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 25
13987: PUSH
13988: LD_INT 9
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: PPUSH
14007: CALL_OW 69
14011: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14012: LD_ADDR_VAR 0 7
14016: PUSH
14017: LD_INT 22
14019: PUSH
14020: LD_VAR 0 1
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 32
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 58
14041: PUSH
14042: EMPTY
14043: LIST
14044: PUSH
14045: LD_INT 24
14047: PUSH
14048: LD_INT 251
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 69
14065: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14066: LD_ADDR_VAR 0 9
14070: PUSH
14071: LD_INT 22
14073: PUSH
14074: LD_VAR 0 1
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 30
14088: PUSH
14089: LD_INT 4
14091: PUSH
14092: EMPTY
14093: LIST
14094: LIST
14095: PUSH
14096: LD_INT 30
14098: PUSH
14099: LD_INT 5
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: LIST
14110: PUSH
14111: LD_INT 24
14113: PUSH
14114: LD_INT 251
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: PPUSH
14126: CALL_OW 69
14130: ST_TO_ADDR
// if barrackList > 0 then
14131: LD_VAR 0 9
14135: PUSH
14136: LD_INT 0
14138: GREATER
14139: IFFALSE 14274
// begin if turretList = 0 then
14141: LD_VAR 0 7
14145: PUSH
14146: LD_INT 0
14148: EQUAL
14149: IFFALSE 14198
// begin for i in soldiers_list do
14151: LD_ADDR_VAR 0 4
14155: PUSH
14156: LD_VAR 0 6
14160: PUSH
14161: FOR_IN
14162: IFFALSE 14194
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14164: LD_VAR 0 4
14168: PPUSH
14169: LD_VAR 0 9
14173: PUSH
14174: LD_INT 1
14176: PPUSH
14177: LD_VAR 0 9
14181: PPUSH
14182: CALL_OW 12
14186: ARRAY
14187: PPUSH
14188: CALL_OW 120
14192: GO 14161
14194: POP
14195: POP
// end else
14196: GO 14274
// begin for i in barrackList do
14198: LD_ADDR_VAR 0 4
14202: PUSH
14203: LD_VAR 0 9
14207: PUSH
14208: FOR_IN
14209: IFFALSE 14272
// begin insideUnits = UnitsInside ( i ) ;
14211: LD_ADDR_VAR 0 10
14215: PUSH
14216: LD_VAR 0 4
14220: PPUSH
14221: CALL_OW 313
14225: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14226: LD_VAR 0 10
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 7
14239: PUSH
14240: LD_INT 1
14242: ARRAY
14243: PPUSH
14244: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14248: LD_VAR 0 6
14252: PUSH
14253: LD_INT 1
14255: ARRAY
14256: PPUSH
14257: LD_VAR 0 7
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PPUSH
14266: CALL_OW 120
// end ;
14270: GO 14208
14272: POP
14273: POP
// end ; end ; end ;
14274: LD_VAR 0 3
14278: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14279: LD_INT 0
14281: PPUSH
14282: PPUSH
14283: PPUSH
14284: PPUSH
14285: PPUSH
14286: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14287: LD_ADDR_VAR 0 6
14291: PUSH
14292: LD_VAR 0 2
14296: PPUSH
14297: CALL_OW 313
14301: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14302: LD_ADDR_VAR 0 7
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_VAR 0 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 25
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 24
14331: PUSH
14332: LD_INT 1000
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: LD_INT 54
14344: PUSH
14345: EMPTY
14346: LIST
14347: PUSH
14348: EMPTY
14349: LIST
14350: LIST
14351: PUSH
14352: EMPTY
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14363: LD_ADDR_VAR 0 4
14367: PUSH
14368: LD_INT 22
14370: PUSH
14371: LD_VAR 0 1
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 21
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 3
14392: PUSH
14393: LD_INT 24
14395: PUSH
14396: LD_INT 1000
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: EMPTY
14413: LIST
14414: PPUSH
14415: CALL_OW 69
14419: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14420: LD_VAR 0 4
14424: NOT
14425: PUSH
14426: LD_VAR 0 7
14430: NOT
14431: AND
14432: PUSH
14433: LD_EXP 42
14437: NOT
14438: AND
14439: IFFALSE 14443
// exit ;
14441: GO 14634
// if buildings_list > 0 and engineerOkInside then
14443: LD_VAR 0 4
14447: PUSH
14448: LD_INT 0
14450: GREATER
14451: PUSH
14452: LD_VAR 0 6
14456: AND
14457: IFFALSE 14511
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14459: LD_ADDR_VAR 0 5
14463: PUSH
14464: LD_INT 22
14466: PUSH
14467: LD_VAR 0 1
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: LD_INT 25
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: PUSH
14486: EMPTY
14487: LIST
14488: LIST
14489: PPUSH
14490: CALL_OW 69
14494: PUSH
14495: FOR_IN
14496: IFFALSE 14509
// ComExitBuilding ( i ) ;
14498: LD_VAR 0 5
14502: PPUSH
14503: CALL_OW 122
14507: GO 14495
14509: POP
14510: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14511: LD_VAR 0 4
14515: PUSH
14516: LD_INT 0
14518: GREATER
14519: PUSH
14520: LD_VAR 0 7
14524: PUSH
14525: LD_INT 0
14527: GREATER
14528: AND
14529: IFFALSE 14583
// begin for i in engineerOkOutside do
14531: LD_ADDR_VAR 0 5
14535: PUSH
14536: LD_VAR 0 7
14540: PUSH
14541: FOR_IN
14542: IFFALSE 14581
// for j in buildings_list do
14544: LD_ADDR_VAR 0 8
14548: PUSH
14549: LD_VAR 0 4
14553: PUSH
14554: FOR_IN
14555: IFFALSE 14577
// ComRepairBuilding ( i , j [ 1 ] ) ;
14557: LD_VAR 0 5
14561: PPUSH
14562: LD_VAR 0 8
14566: PUSH
14567: LD_INT 1
14569: ARRAY
14570: PPUSH
14571: CALL_OW 130
14575: GO 14554
14577: POP
14578: POP
14579: GO 14541
14581: POP
14582: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14583: LD_VAR 0 4
14587: PUSH
14588: LD_INT 0
14590: EQUAL
14591: PUSH
14592: LD_VAR 0 7
14596: PUSH
14597: LD_INT 0
14599: GREATER
14600: AND
14601: IFFALSE 14634
// for i in engineerOkOutside do
14603: LD_ADDR_VAR 0 5
14607: PUSH
14608: LD_VAR 0 7
14612: PUSH
14613: FOR_IN
14614: IFFALSE 14632
// ComEnterUnit ( i , building ) ;
14616: LD_VAR 0 5
14620: PPUSH
14621: LD_VAR 0 2
14625: PPUSH
14626: CALL_OW 120
14630: GO 14613
14632: POP
14633: POP
// end ;
14634: LD_VAR 0 3
14638: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14639: LD_INT 0
14641: PPUSH
14642: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14643: LD_INT 22
14645: PUSH
14646: LD_VAR 0 1
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: LD_INT 25
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PPUSH
14669: CALL_OW 69
14673: PUSH
14674: LD_INT 0
14676: GREATER
14677: PUSH
14678: LD_INT 22
14680: PUSH
14681: LD_VAR 0 1
14685: PUSH
14686: EMPTY
14687: LIST
14688: LIST
14689: PUSH
14690: LD_INT 21
14692: PUSH
14693: LD_INT 3
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: PUSH
14700: LD_INT 3
14702: PUSH
14703: LD_INT 24
14705: PUSH
14706: LD_INT 1000
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: PPUSH
14722: CALL_OW 69
14726: PUSH
14727: LD_INT 0
14729: EQUAL
14730: AND
14731: PUSH
14732: LD_VAR 0 2
14736: PUSH
14737: LD_INT 0
14739: GREATER
14740: AND
14741: IFFALSE 14840
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14743: LD_ADDR_VAR 0 4
14747: PUSH
14748: LD_INT 22
14750: PUSH
14751: LD_VAR 0 1
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: PUSH
14779: FOR_IN
14780: IFFALSE 14838
// begin AddComExitBuilding ( i ) ;
14782: LD_VAR 0 4
14786: PPUSH
14787: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
14791: LD_VAR 0 4
14795: PPUSH
14796: LD_VAR 0 2
14800: PUSH
14801: LD_INT 1
14803: ARRAY
14804: PPUSH
14805: LD_VAR 0 2
14809: PUSH
14810: LD_INT 2
14812: ARRAY
14813: PPUSH
14814: LD_VAR 0 2
14818: PUSH
14819: LD_INT 3
14821: ARRAY
14822: PPUSH
14823: LD_VAR 0 2
14827: PUSH
14828: LD_INT 4
14830: ARRAY
14831: PPUSH
14832: CALL_OW 205
// end ;
14836: GO 14779
14838: POP
14839: POP
// end ; end ;
14840: LD_VAR 0 3
14844: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
14853: PPUSH
14854: PPUSH
14855: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
14856: LD_ADDR_VAR 0 6
14860: PUSH
14861: LD_INT 22
14863: PUSH
14864: LD_VAR 0 1
14868: PUSH
14869: EMPTY
14870: LIST
14871: LIST
14872: PUSH
14873: LD_INT 25
14875: PUSH
14876: LD_INT 4
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 24
14885: PUSH
14886: LD_INT 251
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: LIST
14897: PPUSH
14898: CALL_OW 69
14902: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
14903: LD_ADDR_VAR 0 7
14907: PUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: LD_INT 22
14915: PUSH
14916: LD_VAR 0 1
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 4
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: LD_INT 50
14937: PUSH
14938: EMPTY
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: LIST
14945: PPUSH
14946: CALL_OW 70
14950: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
14951: LD_ADDR_VAR 0 10
14955: PUSH
14956: LD_VAR 0 3
14960: PPUSH
14961: LD_INT 22
14963: PUSH
14964: LD_VAR 0 1
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: LD_INT 21
14975: PUSH
14976: LD_INT 1
14978: PUSH
14979: EMPTY
14980: LIST
14981: LIST
14982: PUSH
14983: LD_INT 3
14985: PUSH
14986: LD_INT 25
14988: PUSH
14989: LD_INT 3
14991: PUSH
14992: EMPTY
14993: LIST
14994: LIST
14995: PUSH
14996: EMPTY
14997: LIST
14998: LIST
14999: PUSH
15000: LD_INT 3
15002: PUSH
15003: LD_INT 24
15005: PUSH
15006: LD_INT 750
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: PPUSH
15023: CALL_OW 70
15027: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15028: LD_ADDR_VAR 0 11
15032: PUSH
15033: LD_VAR 0 2
15037: PPUSH
15038: LD_INT 22
15040: PUSH
15041: LD_VAR 0 1
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PUSH
15050: LD_INT 21
15052: PUSH
15053: LD_INT 1
15055: PUSH
15056: EMPTY
15057: LIST
15058: LIST
15059: PUSH
15060: LD_INT 3
15062: PUSH
15063: LD_INT 25
15065: PUSH
15066: LD_INT 3
15068: PUSH
15069: EMPTY
15070: LIST
15071: LIST
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 3
15079: PUSH
15080: LD_INT 24
15082: PUSH
15083: LD_INT 1000
15085: PUSH
15086: EMPTY
15087: LIST
15088: LIST
15089: PUSH
15090: EMPTY
15091: LIST
15092: LIST
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: LIST
15098: LIST
15099: PPUSH
15100: CALL_OW 70
15104: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15105: LD_VAR 0 10
15109: NOT
15110: PUSH
15111: LD_VAR 0 7
15115: NOT
15116: AND
15117: PUSH
15118: LD_VAR 0 11
15122: NOT
15123: AND
15124: IFFALSE 15128
// exit ;
15126: GO 15388
// if damageUnits > 0 and sci_list > 0 then
15128: LD_VAR 0 10
15132: PUSH
15133: LD_INT 0
15135: GREATER
15136: PUSH
15137: LD_VAR 0 6
15141: PUSH
15142: LD_INT 0
15144: GREATER
15145: AND
15146: IFFALSE 15179
// for i in damageUnits do
15148: LD_ADDR_VAR 0 8
15152: PUSH
15153: LD_VAR 0 10
15157: PUSH
15158: FOR_IN
15159: IFFALSE 15177
// ComMoveToArea ( i , healArea ) ;
15161: LD_VAR 0 8
15165: PPUSH
15166: LD_VAR 0 2
15170: PPUSH
15171: CALL_OW 113
15175: GO 15158
15177: POP
15178: POP
// if unitsToHeal > 0 and sci_list > 0 then
15179: LD_VAR 0 11
15183: PUSH
15184: LD_INT 0
15186: GREATER
15187: PUSH
15188: LD_VAR 0 6
15192: PUSH
15193: LD_INT 0
15195: GREATER
15196: AND
15197: IFFALSE 15256
// begin for i in sci_list do
15199: LD_ADDR_VAR 0 8
15203: PUSH
15204: LD_VAR 0 6
15208: PUSH
15209: FOR_IN
15210: IFFALSE 15254
// begin ComExitBuilding ( i ) ;
15212: LD_VAR 0 8
15216: PPUSH
15217: CALL_OW 122
// for j in unitsToHeal do
15221: LD_ADDR_VAR 0 9
15225: PUSH
15226: LD_VAR 0 11
15230: PUSH
15231: FOR_IN
15232: IFFALSE 15250
// AddComHeal ( i , j ) ;
15234: LD_VAR 0 8
15238: PPUSH
15239: LD_VAR 0 9
15243: PPUSH
15244: CALL_OW 188
15248: GO 15231
15250: POP
15251: POP
// end ;
15252: GO 15209
15254: POP
15255: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15256: LD_VAR 0 10
15260: PUSH
15261: LD_INT 0
15263: EQUAL
15264: PUSH
15265: LD_VAR 0 11
15269: PUSH
15270: LD_INT 0
15272: EQUAL
15273: AND
15274: PUSH
15275: LD_VAR 0 7
15279: PUSH
15280: LD_INT 0
15282: GREATER
15283: AND
15284: IFFALSE 15388
// for i in sci_listOutside do
15286: LD_ADDR_VAR 0 8
15290: PUSH
15291: LD_VAR 0 7
15295: PUSH
15296: FOR_IN
15297: IFFALSE 15386
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15299: LD_ADDR_VAR 0 12
15303: PUSH
15304: LD_INT 22
15306: PUSH
15307: LD_VAR 0 1
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: PUSH
15316: LD_INT 21
15318: PUSH
15319: LD_INT 3
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PUSH
15326: LD_INT 30
15328: PUSH
15329: LD_INT 8
15331: PUSH
15332: EMPTY
15333: LIST
15334: LIST
15335: PUSH
15336: EMPTY
15337: LIST
15338: LIST
15339: LIST
15340: PPUSH
15341: CALL_OW 69
15345: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15346: LD_ADDR_VAR 0 13
15350: PUSH
15351: LD_INT 1
15353: PPUSH
15354: LD_VAR 0 12
15358: PPUSH
15359: CALL_OW 12
15363: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15364: LD_VAR 0 8
15368: PPUSH
15369: LD_VAR 0 12
15373: PUSH
15374: LD_VAR 0 13
15378: ARRAY
15379: PPUSH
15380: CALL_OW 120
// end ;
15384: GO 15296
15386: POP
15387: POP
// end ;
15388: LD_VAR 0 5
15392: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15393: LD_INT 0
15395: PPUSH
15396: PPUSH
15397: PPUSH
15398: PPUSH
15399: PPUSH
15400: PPUSH
15401: PPUSH
15402: PPUSH
15403: PPUSH
15404: PPUSH
15405: PPUSH
// amChassisTab = [ ] ;
15406: LD_ADDR_VAR 0 19
15410: PUSH
15411: EMPTY
15412: ST_TO_ADDR
// arChassisTab = [ ] ;
15413: LD_ADDR_VAR 0 18
15417: PUSH
15418: EMPTY
15419: ST_TO_ADDR
// ruChassisTab = [ ] ;
15420: LD_ADDR_VAR 0 17
15424: PUSH
15425: EMPTY
15426: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15427: LD_INT 35
15429: PPUSH
15430: CALL_OW 67
// if nation = 1 then
15434: LD_VAR 0 5
15438: PUSH
15439: LD_INT 1
15441: EQUAL
15442: IFFALSE 15947
// begin uc_side = side ;
15444: LD_ADDR_OWVAR 20
15448: PUSH
15449: LD_VAR 0 2
15453: ST_TO_ADDR
// uc_nation = nation ;
15454: LD_ADDR_OWVAR 21
15458: PUSH
15459: LD_VAR 0 5
15463: ST_TO_ADDR
// vc_engine = vehengine ;
15464: LD_ADDR_OWVAR 39
15468: PUSH
15469: LD_VAR 0 6
15473: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15474: LD_ADDR_OWVAR 38
15478: PUSH
15479: LD_VAR 0 7
15483: PUSH
15484: LD_INT 1
15486: PPUSH
15487: LD_VAR 0 7
15491: PPUSH
15492: CALL_OW 12
15496: ARRAY
15497: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15498: LD_ADDR_OWVAR 40
15502: PUSH
15503: LD_VAR 0 10
15507: PUSH
15508: LD_INT 1
15510: PPUSH
15511: LD_VAR 0 10
15515: PPUSH
15516: CALL_OW 12
15520: ARRAY
15521: ST_TO_ADDR
// for j = 1 to AMWeapon do
15522: LD_ADDR_VAR 0 14
15526: PUSH
15527: DOUBLE
15528: LD_INT 1
15530: DEC
15531: ST_TO_ADDR
15532: LD_VAR 0 10
15536: PUSH
15537: FOR_TO
15538: IFFALSE 15839
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15540: LD_VAR 0 10
15544: PUSH
15545: LD_VAR 0 14
15549: ARRAY
15550: PUSH
15551: LD_INT 2
15553: EQUAL
15554: PUSH
15555: LD_VAR 0 10
15559: PUSH
15560: LD_VAR 0 14
15564: ARRAY
15565: PUSH
15566: LD_INT 3
15568: EQUAL
15569: OR
15570: IFFALSE 15623
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15572: LD_ADDR_VAR 0 19
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: LD_INT 2
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 4
15588: PUSH
15589: LD_INT 5
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15599: LD_ADDR_OWVAR 37
15603: PUSH
15604: LD_VAR 0 19
15608: PUSH
15609: LD_INT 1
15611: PPUSH
15612: LD_VAR 0 19
15616: PPUSH
15617: CALL_OW 12
15621: ARRAY
15622: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15623: LD_VAR 0 10
15627: PUSH
15628: LD_VAR 0 14
15632: ARRAY
15633: PUSH
15634: LD_INT 4
15636: EQUAL
15637: PUSH
15638: LD_VAR 0 10
15642: PUSH
15643: LD_VAR 0 14
15647: ARRAY
15648: PUSH
15649: LD_INT 5
15651: EQUAL
15652: OR
15653: PUSH
15654: LD_VAR 0 10
15658: PUSH
15659: LD_VAR 0 14
15663: ARRAY
15664: PUSH
15665: LD_INT 9
15667: EQUAL
15668: OR
15669: PUSH
15670: LD_VAR 0 10
15674: PUSH
15675: LD_VAR 0 14
15679: ARRAY
15680: PUSH
15681: LD_INT 11
15683: EQUAL
15684: OR
15685: PUSH
15686: LD_VAR 0 10
15690: PUSH
15691: LD_VAR 0 14
15695: ARRAY
15696: PUSH
15697: LD_INT 7
15699: EQUAL
15700: OR
15701: IFFALSE 15750
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15703: LD_ADDR_VAR 0 19
15707: PUSH
15708: LD_INT 2
15710: PUSH
15711: LD_INT 3
15713: PUSH
15714: LD_INT 4
15716: PUSH
15717: LD_INT 5
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15726: LD_ADDR_OWVAR 37
15730: PUSH
15731: LD_VAR 0 19
15735: PUSH
15736: LD_INT 1
15738: PPUSH
15739: LD_VAR 0 19
15743: PPUSH
15744: CALL_OW 12
15748: ARRAY
15749: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15750: LD_VAR 0 10
15754: PUSH
15755: LD_VAR 0 14
15759: ARRAY
15760: PUSH
15761: LD_INT 8
15763: EQUAL
15764: PUSH
15765: LD_VAR 0 10
15769: PUSH
15770: LD_VAR 0 14
15774: ARRAY
15775: PUSH
15776: LD_INT 6
15778: EQUAL
15779: OR
15780: PUSH
15781: LD_VAR 0 10
15785: PUSH
15786: LD_VAR 0 14
15790: ARRAY
15791: PUSH
15792: LD_INT 10
15794: EQUAL
15795: OR
15796: IFFALSE 15837
// begin amChassisTab = [ 4 , 5 ] ;
15798: LD_ADDR_VAR 0 19
15802: PUSH
15803: LD_INT 4
15805: PUSH
15806: LD_INT 5
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15813: LD_ADDR_OWVAR 37
15817: PUSH
15818: LD_VAR 0 19
15822: PUSH
15823: LD_INT 1
15825: PPUSH
15826: LD_VAR 0 19
15830: PPUSH
15831: CALL_OW 12
15835: ARRAY
15836: ST_TO_ADDR
// end ; end ;
15837: GO 15537
15839: POP
15840: POP
// veh = CreateVehicle ;
15841: LD_ADDR_VAR 0 16
15845: PUSH
15846: CALL_OW 45
15850: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
15851: LD_VAR 0 16
15855: PPUSH
15856: LD_VAR 0 1
15860: PPUSH
15861: LD_INT 0
15863: PPUSH
15864: CALL_OW 49
// if vc_control = 1 then
15868: LD_OWVAR 38
15872: PUSH
15873: LD_INT 1
15875: EQUAL
15876: IFFALSE 15933
// begin hc_gallery =  ;
15878: LD_ADDR_OWVAR 33
15882: PUSH
15883: LD_STRING 
15885: ST_TO_ADDR
// hc_name =  ;
15886: LD_ADDR_OWVAR 26
15890: PUSH
15891: LD_STRING 
15893: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
15894: LD_INT 0
15896: PPUSH
15897: LD_INT 3
15899: PPUSH
15900: LD_VAR 0 4
15904: PPUSH
15905: CALL_OW 380
// un = CreateHuman ;
15909: LD_ADDR_VAR 0 15
15913: PUSH
15914: CALL_OW 44
15918: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
15919: LD_VAR 0 15
15923: PPUSH
15924: LD_VAR 0 16
15928: PPUSH
15929: CALL_OW 52
// end ; i = i + 1 ;
15933: LD_ADDR_VAR 0 13
15937: PUSH
15938: LD_VAR 0 13
15942: PUSH
15943: LD_INT 1
15945: PLUS
15946: ST_TO_ADDR
// end ; if nation = 2 then
15947: LD_VAR 0 5
15951: PUSH
15952: LD_INT 2
15954: EQUAL
15955: IFFALSE 16377
// begin uc_side = side ;
15957: LD_ADDR_OWVAR 20
15961: PUSH
15962: LD_VAR 0 2
15966: ST_TO_ADDR
// uc_nation = nation ;
15967: LD_ADDR_OWVAR 21
15971: PUSH
15972: LD_VAR 0 5
15976: ST_TO_ADDR
// vc_engine = vehengine ;
15977: LD_ADDR_OWVAR 39
15981: PUSH
15982: LD_VAR 0 6
15986: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15987: LD_ADDR_OWVAR 38
15991: PUSH
15992: LD_VAR 0 7
15996: PUSH
15997: LD_INT 1
15999: PPUSH
16000: LD_VAR 0 7
16004: PPUSH
16005: CALL_OW 12
16009: ARRAY
16010: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16011: LD_ADDR_OWVAR 40
16015: PUSH
16016: LD_VAR 0 9
16020: PUSH
16021: LD_INT 1
16023: PPUSH
16024: LD_VAR 0 9
16028: PPUSH
16029: CALL_OW 12
16033: ARRAY
16034: ST_TO_ADDR
// for j = 1 to ARWeapons do
16035: LD_ADDR_VAR 0 14
16039: PUSH
16040: DOUBLE
16041: LD_INT 1
16043: DEC
16044: ST_TO_ADDR
16045: LD_VAR 0 9
16049: PUSH
16050: FOR_TO
16051: IFFALSE 16269
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16053: LD_VAR 0 9
16057: PUSH
16058: LD_VAR 0 14
16062: ARRAY
16063: PUSH
16064: LD_INT 24
16066: EQUAL
16067: PUSH
16068: LD_VAR 0 9
16072: PUSH
16073: LD_VAR 0 14
16077: ARRAY
16078: PUSH
16079: LD_INT 22
16081: EQUAL
16082: OR
16083: PUSH
16084: LD_VAR 0 9
16088: PUSH
16089: LD_VAR 0 14
16093: ARRAY
16094: PUSH
16095: LD_INT 23
16097: EQUAL
16098: OR
16099: PUSH
16100: LD_VAR 0 9
16104: PUSH
16105: LD_VAR 0 14
16109: ARRAY
16110: PUSH
16111: LD_INT 30
16113: EQUAL
16114: OR
16115: IFFALSE 16152
// begin arChassisTab = [ 14 ] ;
16117: LD_ADDR_VAR 0 18
16121: PUSH
16122: LD_INT 14
16124: PUSH
16125: EMPTY
16126: LIST
16127: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16128: LD_ADDR_OWVAR 37
16132: PUSH
16133: LD_VAR 0 18
16137: PUSH
16138: LD_INT 1
16140: PPUSH
16141: LD_VAR 0 18
16145: PPUSH
16146: CALL_OW 12
16150: ARRAY
16151: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16152: LD_VAR 0 9
16156: PUSH
16157: LD_VAR 0 14
16161: ARRAY
16162: PUSH
16163: LD_INT 29
16165: EQUAL
16166: PUSH
16167: LD_VAR 0 9
16171: PUSH
16172: LD_VAR 0 14
16176: ARRAY
16177: PUSH
16178: LD_INT 28
16180: EQUAL
16181: OR
16182: PUSH
16183: LD_VAR 0 9
16187: PUSH
16188: LD_VAR 0 14
16192: ARRAY
16193: PUSH
16194: LD_INT 27
16196: EQUAL
16197: OR
16198: PUSH
16199: LD_VAR 0 9
16203: PUSH
16204: LD_VAR 0 14
16208: ARRAY
16209: PUSH
16210: LD_INT 26
16212: EQUAL
16213: OR
16214: PUSH
16215: LD_VAR 0 9
16219: PUSH
16220: LD_VAR 0 14
16224: ARRAY
16225: PUSH
16226: LD_INT 25
16228: EQUAL
16229: OR
16230: IFFALSE 16267
// begin arChassisTab = [ 14 ] ;
16232: LD_ADDR_VAR 0 18
16236: PUSH
16237: LD_INT 14
16239: PUSH
16240: EMPTY
16241: LIST
16242: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16243: LD_ADDR_OWVAR 37
16247: PUSH
16248: LD_VAR 0 18
16252: PUSH
16253: LD_INT 1
16255: PPUSH
16256: LD_VAR 0 18
16260: PPUSH
16261: CALL_OW 12
16265: ARRAY
16266: ST_TO_ADDR
// end ; end ;
16267: GO 16050
16269: POP
16270: POP
// veh = CreateVehicle ;
16271: LD_ADDR_VAR 0 16
16275: PUSH
16276: CALL_OW 45
16280: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16281: LD_VAR 0 16
16285: PPUSH
16286: LD_VAR 0 1
16290: PPUSH
16291: LD_INT 0
16293: PPUSH
16294: CALL_OW 49
// if vc_control = 1 then
16298: LD_OWVAR 38
16302: PUSH
16303: LD_INT 1
16305: EQUAL
16306: IFFALSE 16363
// begin hc_gallery =  ;
16308: LD_ADDR_OWVAR 33
16312: PUSH
16313: LD_STRING 
16315: ST_TO_ADDR
// hc_name =  ;
16316: LD_ADDR_OWVAR 26
16320: PUSH
16321: LD_STRING 
16323: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16324: LD_INT 0
16326: PPUSH
16327: LD_INT 3
16329: PPUSH
16330: LD_VAR 0 4
16334: PPUSH
16335: CALL_OW 380
// un = CreateHuman ;
16339: LD_ADDR_VAR 0 15
16343: PUSH
16344: CALL_OW 44
16348: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16349: LD_VAR 0 15
16353: PPUSH
16354: LD_VAR 0 16
16358: PPUSH
16359: CALL_OW 52
// end ; i = i + 1 ;
16363: LD_ADDR_VAR 0 13
16367: PUSH
16368: LD_VAR 0 13
16372: PUSH
16373: LD_INT 1
16375: PLUS
16376: ST_TO_ADDR
// end ; if nation = 3 then
16377: LD_VAR 0 5
16381: PUSH
16382: LD_INT 3
16384: EQUAL
16385: IFFALSE 16791
// begin uc_side = side ;
16387: LD_ADDR_OWVAR 20
16391: PUSH
16392: LD_VAR 0 2
16396: ST_TO_ADDR
// uc_nation = nation ;
16397: LD_ADDR_OWVAR 21
16401: PUSH
16402: LD_VAR 0 5
16406: ST_TO_ADDR
// vc_engine = vehengine ;
16407: LD_ADDR_OWVAR 39
16411: PUSH
16412: LD_VAR 0 6
16416: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16417: LD_ADDR_OWVAR 38
16421: PUSH
16422: LD_VAR 0 7
16426: PUSH
16427: LD_INT 1
16429: PPUSH
16430: LD_VAR 0 7
16434: PPUSH
16435: CALL_OW 12
16439: ARRAY
16440: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16441: LD_ADDR_OWVAR 40
16445: PUSH
16446: LD_VAR 0 8
16450: PUSH
16451: LD_INT 1
16453: PPUSH
16454: LD_VAR 0 8
16458: PPUSH
16459: CALL_OW 12
16463: ARRAY
16464: ST_TO_ADDR
// for j = 1 to RuWeapons do
16465: LD_ADDR_VAR 0 14
16469: PUSH
16470: DOUBLE
16471: LD_INT 1
16473: DEC
16474: ST_TO_ADDR
16475: LD_VAR 0 8
16479: PUSH
16480: FOR_TO
16481: IFFALSE 16683
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16483: LD_VAR 0 8
16487: PUSH
16488: LD_VAR 0 14
16492: ARRAY
16493: PUSH
16494: LD_INT 42
16496: EQUAL
16497: PUSH
16498: LD_VAR 0 8
16502: PUSH
16503: LD_VAR 0 14
16507: ARRAY
16508: PUSH
16509: LD_INT 43
16511: EQUAL
16512: OR
16513: PUSH
16514: LD_VAR 0 8
16518: PUSH
16519: LD_VAR 0 14
16523: ARRAY
16524: PUSH
16525: LD_INT 44
16527: EQUAL
16528: OR
16529: PUSH
16530: LD_VAR 0 8
16534: PUSH
16535: LD_VAR 0 14
16539: ARRAY
16540: PUSH
16541: LD_INT 45
16543: EQUAL
16544: OR
16545: PUSH
16546: LD_VAR 0 8
16550: PUSH
16551: LD_VAR 0 14
16555: ARRAY
16556: PUSH
16557: LD_INT 49
16559: EQUAL
16560: OR
16561: IFFALSE 16610
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16563: LD_ADDR_VAR 0 17
16567: PUSH
16568: LD_INT 21
16570: PUSH
16571: LD_INT 22
16573: PUSH
16574: LD_INT 23
16576: PUSH
16577: LD_INT 24
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16586: LD_ADDR_OWVAR 37
16590: PUSH
16591: LD_VAR 0 17
16595: PUSH
16596: LD_INT 1
16598: PPUSH
16599: LD_VAR 0 17
16603: PPUSH
16604: CALL_OW 12
16608: ARRAY
16609: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16610: LD_VAR 0 8
16614: PUSH
16615: LD_VAR 0 14
16619: ARRAY
16620: PUSH
16621: LD_INT 46
16623: EQUAL
16624: PUSH
16625: LD_VAR 0 8
16629: PUSH
16630: LD_VAR 0 14
16634: ARRAY
16635: PUSH
16636: LD_INT 47
16638: EQUAL
16639: OR
16640: IFFALSE 16681
// begin ruChassisTab = [ 23 , 24 ] ;
16642: LD_ADDR_VAR 0 17
16646: PUSH
16647: LD_INT 23
16649: PUSH
16650: LD_INT 24
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16657: LD_ADDR_OWVAR 37
16661: PUSH
16662: LD_VAR 0 17
16666: PUSH
16667: LD_INT 1
16669: PPUSH
16670: LD_VAR 0 17
16674: PPUSH
16675: CALL_OW 12
16679: ARRAY
16680: ST_TO_ADDR
// end ; end ;
16681: GO 16480
16683: POP
16684: POP
// veh = CreateVehicle ;
16685: LD_ADDR_VAR 0 16
16689: PUSH
16690: CALL_OW 45
16694: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16695: LD_VAR 0 16
16699: PPUSH
16700: LD_VAR 0 1
16704: PPUSH
16705: LD_INT 0
16707: PPUSH
16708: CALL_OW 49
// if vc_control = 1 then
16712: LD_OWVAR 38
16716: PUSH
16717: LD_INT 1
16719: EQUAL
16720: IFFALSE 16777
// begin hc_gallery =  ;
16722: LD_ADDR_OWVAR 33
16726: PUSH
16727: LD_STRING 
16729: ST_TO_ADDR
// hc_name =  ;
16730: LD_ADDR_OWVAR 26
16734: PUSH
16735: LD_STRING 
16737: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16738: LD_INT 0
16740: PPUSH
16741: LD_INT 3
16743: PPUSH
16744: LD_VAR 0 4
16748: PPUSH
16749: CALL_OW 380
// un = CreateHuman ;
16753: LD_ADDR_VAR 0 15
16757: PUSH
16758: CALL_OW 44
16762: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16763: LD_VAR 0 15
16767: PPUSH
16768: LD_VAR 0 16
16772: PPUSH
16773: CALL_OW 52
// end ; i = i + 1 ;
16777: LD_ADDR_VAR 0 13
16781: PUSH
16782: LD_VAR 0 13
16786: PUSH
16787: LD_INT 1
16789: PLUS
16790: ST_TO_ADDR
// end ; until i = vehCount ;
16791: LD_VAR 0 13
16795: PUSH
16796: LD_VAR 0 3
16800: EQUAL
16801: IFFALSE 15427
// repeat wait ( 0 0$1 ) ;
16803: LD_INT 35
16805: PPUSH
16806: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
16810: LD_ADDR_VAR 0 20
16814: PUSH
16815: LD_INT 22
16817: PUSH
16818: LD_VAR 0 2
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: LD_INT 21
16829: PUSH
16830: LD_INT 2
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 24
16839: PUSH
16840: LD_INT 650
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: ST_TO_ADDR
// if vehicleOK_list > 0 then
16857: LD_VAR 0 20
16861: PUSH
16862: LD_INT 0
16864: GREATER
16865: IFFALSE 17056
// begin for i in vehicleOK_list do
16867: LD_ADDR_VAR 0 13
16871: PUSH
16872: LD_VAR 0 20
16876: PUSH
16877: FOR_IN
16878: IFFALSE 17054
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
16880: LD_ADDR_VAR 0 21
16884: PUSH
16885: LD_INT 22
16887: PUSH
16888: LD_VAR 0 11
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: PPUSH
16902: LD_VAR 0 13
16906: PPUSH
16907: CALL_OW 74
16911: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
16912: LD_ADDR_VAR 0 22
16916: PUSH
16917: LD_INT 22
16919: PUSH
16920: LD_VAR 0 11
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: LD_INT 59
16934: PUSH
16935: EMPTY
16936: LIST
16937: PUSH
16938: LD_INT 21
16940: PUSH
16941: LD_INT 1
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: PUSH
16948: LD_INT 21
16950: PUSH
16951: LD_INT 2
16953: PUSH
16954: EMPTY
16955: LIST
16956: LIST
16957: PUSH
16958: EMPTY
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: PUSH
16964: EMPTY
16965: LIST
16966: LIST
16967: PUSH
16968: EMPTY
16969: LIST
16970: PPUSH
16971: CALL_OW 69
16975: PPUSH
16976: LD_VAR 0 13
16980: PPUSH
16981: CALL_OW 74
16985: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
16986: LD_VAR 0 13
16990: PPUSH
16991: LD_VAR 0 21
16995: PPUSH
16996: CALL_OW 296
17000: PUSH
17001: LD_INT 8
17003: PLUS
17004: PUSH
17005: LD_VAR 0 13
17009: PPUSH
17010: LD_VAR 0 22
17014: PPUSH
17015: CALL_OW 296
17019: LESS
17020: IFFALSE 17038
// begin ComAttackUnit ( i , target1 ) ;
17022: LD_VAR 0 13
17026: PPUSH
17027: LD_VAR 0 21
17031: PPUSH
17032: CALL_OW 115
// end else
17036: GO 17052
// begin ComAttackUnit ( i , target2 ) ;
17038: LD_VAR 0 13
17042: PPUSH
17043: LD_VAR 0 22
17047: PPUSH
17048: CALL_OW 115
// end ; end ;
17052: GO 16877
17054: POP
17055: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17056: LD_INT 22
17058: PUSH
17059: LD_VAR 0 2
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 2
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: EMPTY
17079: LIST
17080: LIST
17081: PPUSH
17082: CALL_OW 69
17086: PUSH
17087: LD_INT 0
17089: EQUAL
17090: IFFALSE 16803
// end ;
17092: LD_VAR 0 12
17096: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17097: LD_INT 0
17099: PPUSH
17100: PPUSH
17101: PPUSH
17102: PPUSH
17103: PPUSH
17104: PPUSH
17105: PPUSH
17106: PPUSH
17107: PPUSH
17108: PPUSH
17109: PPUSH
// for i = 1 to soldierCount do
17110: LD_ADDR_VAR 0 13
17114: PUSH
17115: DOUBLE
17116: LD_INT 1
17118: DEC
17119: ST_TO_ADDR
17120: LD_VAR 0 3
17124: PUSH
17125: FOR_TO
17126: IFFALSE 17208
// begin uc_side = side ;
17128: LD_ADDR_OWVAR 20
17132: PUSH
17133: LD_VAR 0 1
17137: ST_TO_ADDR
// uc_nation = nation ;
17138: LD_ADDR_OWVAR 21
17142: PUSH
17143: LD_VAR 0 2
17147: ST_TO_ADDR
// hc_name =  ;
17148: LD_ADDR_OWVAR 26
17152: PUSH
17153: LD_STRING 
17155: ST_TO_ADDR
// hc_gallery =  ;
17156: LD_ADDR_OWVAR 33
17160: PUSH
17161: LD_STRING 
17163: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17164: LD_INT 0
17166: PPUSH
17167: LD_INT 1
17169: PPUSH
17170: LD_VAR 0 8
17174: PPUSH
17175: CALL_OW 380
// un = CreateHuman ;
17179: LD_ADDR_VAR 0 15
17183: PUSH
17184: CALL_OW 44
17188: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17189: LD_VAR 0 15
17193: PPUSH
17194: LD_VAR 0 9
17198: PPUSH
17199: LD_INT 0
17201: PPUSH
17202: CALL_OW 49
// end ;
17206: GO 17125
17208: POP
17209: POP
// for i = 1 to sniperCount do
17210: LD_ADDR_VAR 0 13
17214: PUSH
17215: DOUBLE
17216: LD_INT 1
17218: DEC
17219: ST_TO_ADDR
17220: LD_VAR 0 4
17224: PUSH
17225: FOR_TO
17226: IFFALSE 17308
// begin uc_side = side ;
17228: LD_ADDR_OWVAR 20
17232: PUSH
17233: LD_VAR 0 1
17237: ST_TO_ADDR
// uc_nation = nation ;
17238: LD_ADDR_OWVAR 21
17242: PUSH
17243: LD_VAR 0 2
17247: ST_TO_ADDR
// hc_name =  ;
17248: LD_ADDR_OWVAR 26
17252: PUSH
17253: LD_STRING 
17255: ST_TO_ADDR
// hc_gallery =  ;
17256: LD_ADDR_OWVAR 33
17260: PUSH
17261: LD_STRING 
17263: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17264: LD_INT 0
17266: PPUSH
17267: LD_INT 5
17269: PPUSH
17270: LD_VAR 0 8
17274: PPUSH
17275: CALL_OW 380
// un = CreateHuman ;
17279: LD_ADDR_VAR 0 15
17283: PUSH
17284: CALL_OW 44
17288: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17289: LD_VAR 0 15
17293: PPUSH
17294: LD_VAR 0 9
17298: PPUSH
17299: LD_INT 0
17301: PPUSH
17302: CALL_OW 49
// end ;
17306: GO 17225
17308: POP
17309: POP
// for i = 1 to bazookCount do
17310: LD_ADDR_VAR 0 13
17314: PUSH
17315: DOUBLE
17316: LD_INT 1
17318: DEC
17319: ST_TO_ADDR
17320: LD_VAR 0 5
17324: PUSH
17325: FOR_TO
17326: IFFALSE 17408
// begin uc_side = side ;
17328: LD_ADDR_OWVAR 20
17332: PUSH
17333: LD_VAR 0 1
17337: ST_TO_ADDR
// uc_nation = nation ;
17338: LD_ADDR_OWVAR 21
17342: PUSH
17343: LD_VAR 0 2
17347: ST_TO_ADDR
// hc_name =  ;
17348: LD_ADDR_OWVAR 26
17352: PUSH
17353: LD_STRING 
17355: ST_TO_ADDR
// hc_gallery =  ;
17356: LD_ADDR_OWVAR 33
17360: PUSH
17361: LD_STRING 
17363: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17364: LD_INT 0
17366: PPUSH
17367: LD_INT 9
17369: PPUSH
17370: LD_VAR 0 8
17374: PPUSH
17375: CALL_OW 380
// un = CreateHuman ;
17379: LD_ADDR_VAR 0 15
17383: PUSH
17384: CALL_OW 44
17388: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17389: LD_VAR 0 15
17393: PPUSH
17394: LD_VAR 0 9
17398: PPUSH
17399: LD_INT 0
17401: PPUSH
17402: CALL_OW 49
// end ;
17406: GO 17325
17408: POP
17409: POP
// for i = 1 to mortalCount do
17410: LD_ADDR_VAR 0 13
17414: PUSH
17415: DOUBLE
17416: LD_INT 1
17418: DEC
17419: ST_TO_ADDR
17420: LD_VAR 0 6
17424: PUSH
17425: FOR_TO
17426: IFFALSE 17508
// begin uc_side = side ;
17428: LD_ADDR_OWVAR 20
17432: PUSH
17433: LD_VAR 0 1
17437: ST_TO_ADDR
// uc_nation = nation ;
17438: LD_ADDR_OWVAR 21
17442: PUSH
17443: LD_VAR 0 2
17447: ST_TO_ADDR
// hc_name =  ;
17448: LD_ADDR_OWVAR 26
17452: PUSH
17453: LD_STRING 
17455: ST_TO_ADDR
// hc_gallery =  ;
17456: LD_ADDR_OWVAR 33
17460: PUSH
17461: LD_STRING 
17463: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17464: LD_INT 0
17466: PPUSH
17467: LD_INT 8
17469: PPUSH
17470: LD_VAR 0 8
17474: PPUSH
17475: CALL_OW 380
// un = CreateHuman ;
17479: LD_ADDR_VAR 0 15
17483: PUSH
17484: CALL_OW 44
17488: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17489: LD_VAR 0 15
17493: PPUSH
17494: LD_VAR 0 9
17498: PPUSH
17499: LD_INT 0
17501: PPUSH
17502: CALL_OW 49
// end ;
17506: GO 17425
17508: POP
17509: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17510: LD_ADDR_VAR 0 18
17514: PUSH
17515: LD_INT 22
17517: PUSH
17518: LD_VAR 0 1
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: LD_INT 2
17529: PUSH
17530: LD_INT 25
17532: PUSH
17533: LD_INT 1
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 25
17542: PUSH
17543: LD_INT 5
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 25
17552: PUSH
17553: LD_INT 8
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 25
17562: PUSH
17563: LD_INT 9
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: PPUSH
17581: CALL_OW 69
17585: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17586: LD_ADDR_VAR 0 17
17590: PUSH
17591: LD_INT 22
17593: PUSH
17594: LD_VAR 0 1
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 4
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PPUSH
17617: CALL_OW 69
17621: ST_TO_ADDR
// for i in medic_list do
17622: LD_ADDR_VAR 0 13
17626: PUSH
17627: LD_VAR 0 17
17631: PUSH
17632: FOR_IN
17633: IFFALSE 17651
// ComMoveToArea ( i , healArea ) ;
17635: LD_VAR 0 13
17639: PPUSH
17640: LD_VAR 0 10
17644: PPUSH
17645: CALL_OW 113
17649: GO 17632
17651: POP
17652: POP
// repeat wait ( 0 0$1 ) ;
17653: LD_INT 35
17655: PPUSH
17656: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17660: LD_ADDR_VAR 0 16
17664: PUSH
17665: LD_INT 22
17667: PUSH
17668: LD_VAR 0 1
17672: PUSH
17673: EMPTY
17674: LIST
17675: LIST
17676: PUSH
17677: LD_INT 1
17679: PUSH
17680: LD_INT 3
17682: PUSH
17683: LD_INT 24
17685: PUSH
17686: LD_INT 550
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 24
17699: PUSH
17700: LD_INT 250
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: EMPTY
17708: LIST
17709: LIST
17710: LIST
17711: PUSH
17712: EMPTY
17713: LIST
17714: LIST
17715: PPUSH
17716: CALL_OW 69
17720: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17721: LD_ADDR_VAR 0 18
17725: PUSH
17726: LD_INT 22
17728: PUSH
17729: LD_VAR 0 1
17733: PUSH
17734: EMPTY
17735: LIST
17736: LIST
17737: PUSH
17738: LD_INT 2
17740: PUSH
17741: LD_INT 25
17743: PUSH
17744: LD_INT 1
17746: PUSH
17747: EMPTY
17748: LIST
17749: LIST
17750: PUSH
17751: LD_INT 25
17753: PUSH
17754: LD_INT 5
17756: PUSH
17757: EMPTY
17758: LIST
17759: LIST
17760: PUSH
17761: LD_INT 25
17763: PUSH
17764: LD_INT 8
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PUSH
17771: LD_INT 25
17773: PUSH
17774: LD_INT 9
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PUSH
17781: EMPTY
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 24
17790: PUSH
17791: LD_INT 1000
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: LIST
17802: PPUSH
17803: CALL_OW 69
17807: ST_TO_ADDR
// if medicCount > 0 then
17808: LD_VAR 0 7
17812: PUSH
17813: LD_INT 0
17815: GREATER
17816: IFFALSE 17890
// begin if damageUnit_list > 0 then
17818: LD_VAR 0 16
17822: PUSH
17823: LD_INT 0
17825: GREATER
17826: IFFALSE 17890
// begin for i in damageUnit_list do
17828: LD_ADDR_VAR 0 13
17832: PUSH
17833: LD_VAR 0 16
17837: PUSH
17838: FOR_IN
17839: IFFALSE 17888
// begin ComMoveToArea ( i , healArea ) ;
17841: LD_VAR 0 13
17845: PPUSH
17846: LD_VAR 0 10
17850: PPUSH
17851: CALL_OW 113
// for j in medic_list do
17855: LD_ADDR_VAR 0 14
17859: PUSH
17860: LD_VAR 0 17
17864: PUSH
17865: FOR_IN
17866: IFFALSE 17884
// AddComHeal ( j , i ) ;
17868: LD_VAR 0 14
17872: PPUSH
17873: LD_VAR 0 13
17877: PPUSH
17878: CALL_OW 188
17882: GO 17865
17884: POP
17885: POP
// end ;
17886: GO 17838
17888: POP
17889: POP
// end ; end ; for i in soldiersOK_list do
17890: LD_ADDR_VAR 0 13
17894: PUSH
17895: LD_VAR 0 18
17899: PUSH
17900: FOR_IN
17901: IFFALSE 18077
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17903: LD_ADDR_VAR 0 21
17907: PUSH
17908: LD_INT 22
17910: PUSH
17911: LD_VAR 0 11
17915: PUSH
17916: EMPTY
17917: LIST
17918: LIST
17919: PPUSH
17920: CALL_OW 69
17924: PPUSH
17925: LD_VAR 0 13
17929: PPUSH
17930: CALL_OW 74
17934: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17935: LD_ADDR_VAR 0 22
17939: PUSH
17940: LD_INT 22
17942: PUSH
17943: LD_VAR 0 11
17947: PUSH
17948: EMPTY
17949: LIST
17950: LIST
17951: PUSH
17952: LD_INT 2
17954: PUSH
17955: LD_INT 59
17957: PUSH
17958: EMPTY
17959: LIST
17960: PUSH
17961: LD_INT 21
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 21
17973: PUSH
17974: LD_INT 2
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: EMPTY
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: PPUSH
17994: CALL_OW 69
17998: PPUSH
17999: LD_VAR 0 13
18003: PPUSH
18004: CALL_OW 74
18008: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18009: LD_VAR 0 13
18013: PPUSH
18014: LD_VAR 0 21
18018: PPUSH
18019: CALL_OW 296
18023: PUSH
18024: LD_INT 8
18026: PLUS
18027: PUSH
18028: LD_VAR 0 13
18032: PPUSH
18033: LD_VAR 0 22
18037: PPUSH
18038: CALL_OW 296
18042: LESS
18043: IFFALSE 18061
// begin ComAttackUnit ( i , target1 ) ;
18045: LD_VAR 0 13
18049: PPUSH
18050: LD_VAR 0 21
18054: PPUSH
18055: CALL_OW 115
// end else
18059: GO 18075
// begin ComAttackUnit ( i , target2 ) ;
18061: LD_VAR 0 13
18065: PPUSH
18066: LD_VAR 0 22
18070: PPUSH
18071: CALL_OW 115
// end ; end ;
18075: GO 17900
18077: POP
18078: POP
// for i in soldiersOK_list do
18079: LD_ADDR_VAR 0 13
18083: PUSH
18084: LD_VAR 0 18
18088: PUSH
18089: FOR_IN
18090: IFFALSE 18266
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18092: LD_ADDR_VAR 0 21
18096: PUSH
18097: LD_INT 22
18099: PUSH
18100: LD_VAR 0 11
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PPUSH
18109: CALL_OW 69
18113: PPUSH
18114: LD_VAR 0 13
18118: PPUSH
18119: CALL_OW 74
18123: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18124: LD_ADDR_VAR 0 22
18128: PUSH
18129: LD_INT 22
18131: PUSH
18132: LD_VAR 0 11
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 2
18143: PUSH
18144: LD_INT 59
18146: PUSH
18147: EMPTY
18148: LIST
18149: PUSH
18150: LD_INT 21
18152: PUSH
18153: LD_INT 1
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: LD_INT 21
18162: PUSH
18163: LD_INT 2
18165: PUSH
18166: EMPTY
18167: LIST
18168: LIST
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: PUSH
18180: EMPTY
18181: LIST
18182: PPUSH
18183: CALL_OW 69
18187: PPUSH
18188: LD_VAR 0 13
18192: PPUSH
18193: CALL_OW 74
18197: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18198: LD_VAR 0 13
18202: PPUSH
18203: LD_VAR 0 21
18207: PPUSH
18208: CALL_OW 296
18212: PUSH
18213: LD_INT 8
18215: PLUS
18216: PUSH
18217: LD_VAR 0 13
18221: PPUSH
18222: LD_VAR 0 22
18226: PPUSH
18227: CALL_OW 296
18231: LESS
18232: IFFALSE 18250
// begin ComAttackUnit ( i , target1 ) ;
18234: LD_VAR 0 13
18238: PPUSH
18239: LD_VAR 0 21
18243: PPUSH
18244: CALL_OW 115
// end else
18248: GO 18264
// begin ComAttackUnit ( i , target2 ) ;
18250: LD_VAR 0 13
18254: PPUSH
18255: LD_VAR 0 22
18259: PPUSH
18260: CALL_OW 115
// end ; end ;
18264: GO 18089
18266: POP
18267: POP
// until soldiersOK_list = [ ] ;
18268: LD_VAR 0 18
18272: PUSH
18273: EMPTY
18274: EQUAL
18275: IFFALSE 17653
// end ;
18277: LD_VAR 0 12
18281: RET
// export function TameApemans ; var i , j ; begin
18282: LD_INT 0
18284: PPUSH
18285: PPUSH
18286: PPUSH
// repeat wait ( 0 0$1 ) ;
18287: LD_INT 35
18289: PPUSH
18290: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18294: LD_ADDR_VAR 0 2
18298: PUSH
18299: LD_INT 22
18301: PUSH
18302: LD_INT 2
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 25
18311: PUSH
18312: LD_INT 4
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: PPUSH
18323: CALL_OW 69
18327: PUSH
18328: FOR_IN
18329: IFFALSE 18406
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18331: LD_ADDR_VAR 0 3
18335: PUSH
18336: LD_INT 5
18338: PPUSH
18339: LD_INT 22
18341: PUSH
18342: LD_INT 0
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 25
18351: PUSH
18352: LD_INT 12
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: PPUSH
18363: CALL_OW 70
18367: PUSH
18368: FOR_IN
18369: IFFALSE 18402
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18371: LD_VAR 0 2
18375: PPUSH
18376: LD_VAR 0 3
18380: PPUSH
18381: CALL_OW 250
18385: PPUSH
18386: LD_VAR 0 3
18390: PPUSH
18391: CALL_OW 251
18395: PPUSH
18396: CALL_OW 191
// end ;
18400: GO 18368
18402: POP
18403: POP
// end ;
18404: GO 18328
18406: POP
18407: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18408: LD_INT 22
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 25
18420: PUSH
18421: LD_INT 4
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PPUSH
18432: CALL_OW 69
18436: PUSH
18437: LD_INT 0
18439: EQUAL
18440: PUSH
18441: LD_INT 5
18443: PPUSH
18444: LD_INT 22
18446: PUSH
18447: LD_INT 0
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 25
18456: PUSH
18457: LD_INT 12
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: PPUSH
18468: CALL_OW 70
18472: PUSH
18473: LD_INT 0
18475: EQUAL
18476: OR
18477: IFFALSE 18287
// wait ( 0 0$30 ) ;
18479: LD_INT 1050
18481: PPUSH
18482: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18486: LD_ADDR_VAR 0 2
18490: PUSH
18491: LD_INT 22
18493: PUSH
18494: LD_INT 2
18496: PUSH
18497: EMPTY
18498: LIST
18499: LIST
18500: PUSH
18501: LD_INT 25
18503: PUSH
18504: LD_INT 12
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: LIST
18514: PPUSH
18515: CALL_OW 69
18519: PUSH
18520: FOR_IN
18521: IFFALSE 18585
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18523: LD_VAR 0 2
18527: PPUSH
18528: LD_EXP 43
18532: PPUSH
18533: CALL_OW 250
18537: PPUSH
18538: LD_EXP 43
18542: PPUSH
18543: CALL_OW 251
18547: PPUSH
18548: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18552: LD_VAR 0 2
18556: PPUSH
18557: LD_INT 16
18559: PUSH
18560: LD_INT 15
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: LD_INT 1
18569: PPUSH
18570: LD_INT 2
18572: PPUSH
18573: CALL_OW 12
18577: ARRAY
18578: PPUSH
18579: CALL_OW 336
// end ;
18583: GO 18520
18585: POP
18586: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18587: LD_ADDR_VAR 0 2
18591: PUSH
18592: LD_INT 22
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 25
18604: PUSH
18605: LD_INT 4
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PPUSH
18616: CALL_OW 69
18620: PUSH
18621: FOR_IN
18622: IFFALSE 18668
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18624: LD_VAR 0 2
18628: PPUSH
18629: LD_INT 22
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 30
18641: PUSH
18642: LD_INT 8
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PPUSH
18653: CALL_OW 69
18657: PUSH
18658: LD_INT 1
18660: ARRAY
18661: PPUSH
18662: CALL_OW 120
18666: GO 18621
18668: POP
18669: POP
// end ;
18670: LD_VAR 0 1
18674: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18675: LD_INT 0
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18686: LD_INT 22
18688: PUSH
18689: LD_VAR 0 1
18693: PUSH
18694: EMPTY
18695: LIST
18696: LIST
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 2
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PPUSH
18712: CALL_OW 69
18716: PUSH
18717: LD_VAR 0 3
18721: LESSEQUAL
18722: IFFALSE 18866
// for i = 1 to vehCount do
18724: LD_ADDR_VAR 0 10
18728: PUSH
18729: DOUBLE
18730: LD_INT 1
18732: DEC
18733: ST_TO_ADDR
18734: LD_VAR 0 3
18738: PUSH
18739: FOR_TO
18740: IFFALSE 18864
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18742: LD_ADDR_VAR 0 12
18746: PUSH
18747: LD_VAR 0 5
18751: PUSH
18752: LD_INT 1
18754: PPUSH
18755: LD_VAR 0 5
18759: PPUSH
18760: CALL_OW 12
18764: ARRAY
18765: ST_TO_ADDR
// if randWeapon = 46 then
18766: LD_VAR 0 12
18770: PUSH
18771: LD_INT 46
18773: EQUAL
18774: IFFALSE 18819
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
18776: LD_VAR 0 2
18780: PPUSH
18781: LD_INT 24
18783: PPUSH
18784: LD_VAR 0 6
18788: PPUSH
18789: LD_VAR 0 7
18793: PUSH
18794: LD_INT 1
18796: PPUSH
18797: LD_VAR 0 7
18801: PPUSH
18802: CALL_OW 12
18806: ARRAY
18807: PPUSH
18808: LD_VAR 0 12
18812: PPUSH
18813: CALL_OW 185
18817: GO 18862
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
18819: LD_VAR 0 2
18823: PPUSH
18824: LD_VAR 0 8
18828: PPUSH
18829: LD_VAR 0 6
18833: PPUSH
18834: LD_VAR 0 7
18838: PUSH
18839: LD_INT 1
18841: PPUSH
18842: LD_VAR 0 7
18846: PPUSH
18847: CALL_OW 12
18851: ARRAY
18852: PPUSH
18853: LD_VAR 0 12
18857: PPUSH
18858: CALL_OW 185
// end ;
18862: GO 18739
18864: POP
18865: POP
// repeat wait ( 0 0$1 ) ;
18866: LD_INT 35
18868: PPUSH
18869: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
18873: LD_INT 22
18875: PUSH
18876: LD_VAR 0 1
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: LD_INT 21
18887: PUSH
18888: LD_INT 2
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PUSH
18895: LD_INT 24
18897: PUSH
18898: LD_INT 250
18900: PUSH
18901: EMPTY
18902: LIST
18903: LIST
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: LIST
18909: PPUSH
18910: CALL_OW 69
18914: PUSH
18915: LD_VAR 0 3
18919: GREATEREQUAL
18920: IFFALSE 18866
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
18922: LD_INT 22
18924: PUSH
18925: LD_VAR 0 1
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 21
18936: PUSH
18937: LD_INT 2
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: LD_INT 24
18946: PUSH
18947: LD_INT 250
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: EMPTY
18955: LIST
18956: LIST
18957: LIST
18958: PPUSH
18959: CALL_OW 69
18963: PUSH
18964: LD_VAR 0 3
18968: GREATEREQUAL
18969: IFFALSE 19312
// begin repeat begin wait ( 0 0$1 ) ;
18971: LD_INT 35
18973: PPUSH
18974: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
18978: LD_INT 22
18980: PUSH
18981: LD_VAR 0 1
18985: PUSH
18986: EMPTY
18987: LIST
18988: LIST
18989: PUSH
18990: LD_INT 21
18992: PUSH
18993: LD_INT 2
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 24
19002: PUSH
19003: LD_INT 651
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: LIST
19014: PPUSH
19015: CALL_OW 69
19019: PUSH
19020: LD_INT 0
19022: GREATER
19023: IFFALSE 19251
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19025: LD_ADDR_VAR 0 10
19029: PUSH
19030: LD_INT 22
19032: PUSH
19033: LD_VAR 0 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 21
19044: PUSH
19045: LD_INT 2
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 24
19054: PUSH
19055: LD_INT 651
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: PPUSH
19067: CALL_OW 69
19071: PUSH
19072: FOR_IN
19073: IFFALSE 19249
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19075: LD_ADDR_VAR 0 16
19079: PUSH
19080: LD_INT 22
19082: PUSH
19083: LD_VAR 0 4
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL_OW 69
19096: PPUSH
19097: LD_VAR 0 10
19101: PPUSH
19102: CALL_OW 74
19106: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19107: LD_ADDR_VAR 0 17
19111: PUSH
19112: LD_INT 22
19114: PUSH
19115: LD_VAR 0 4
19119: PUSH
19120: EMPTY
19121: LIST
19122: LIST
19123: PUSH
19124: LD_INT 2
19126: PUSH
19127: LD_INT 59
19129: PUSH
19130: EMPTY
19131: LIST
19132: PUSH
19133: LD_INT 21
19135: PUSH
19136: LD_INT 1
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 21
19145: PUSH
19146: LD_INT 2
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: LIST
19162: PUSH
19163: EMPTY
19164: LIST
19165: PPUSH
19166: CALL_OW 69
19170: PPUSH
19171: LD_VAR 0 10
19175: PPUSH
19176: CALL_OW 74
19180: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19181: LD_VAR 0 10
19185: PPUSH
19186: LD_VAR 0 16
19190: PPUSH
19191: CALL_OW 296
19195: PUSH
19196: LD_INT 8
19198: PLUS
19199: PUSH
19200: LD_VAR 0 10
19204: PPUSH
19205: LD_VAR 0 17
19209: PPUSH
19210: CALL_OW 296
19214: LESS
19215: IFFALSE 19233
// begin ComAttackUnit ( i , target1 ) ;
19217: LD_VAR 0 10
19221: PPUSH
19222: LD_VAR 0 16
19226: PPUSH
19227: CALL_OW 115
// end else
19231: GO 19247
// begin ComAttackUnit ( i , target2 ) ;
19233: LD_VAR 0 10
19237: PPUSH
19238: LD_VAR 0 17
19242: PPUSH
19243: CALL_OW 115
// end ; end ;
19247: GO 19072
19249: POP
19250: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19251: LD_INT 22
19253: PUSH
19254: LD_VAR 0 1
19258: PUSH
19259: EMPTY
19260: LIST
19261: LIST
19262: PUSH
19263: LD_INT 21
19265: PUSH
19266: LD_INT 2
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PPUSH
19277: CALL_OW 69
19281: PUSH
19282: LD_INT 0
19284: EQUAL
19285: PUSH
19286: LD_INT 22
19288: PUSH
19289: LD_VAR 0 4
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: EMPTY
19299: LIST
19300: PPUSH
19301: CALL_OW 69
19305: PUSH
19306: LD_INT 0
19308: EQUAL
19309: OR
19310: IFFALSE 18971
// end ; end ;
19312: LD_VAR 0 9
19316: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19317: LD_INT 0
19319: PPUSH
19320: PPUSH
19321: PPUSH
19322: PPUSH
// r := 100 ;
19323: LD_ADDR_VAR 0 5
19327: PUSH
19328: LD_INT 100
19330: ST_TO_ADDR
// x := 0 ;
19331: LD_ADDR_VAR 0 6
19335: PUSH
19336: LD_INT 0
19338: ST_TO_ADDR
// while ( x < n ) do
19339: LD_VAR 0 6
19343: PUSH
19344: LD_VAR 0 2
19348: LESS
19349: IFFALSE 19636
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19351: LD_ADDR_VAR 0 4
19355: PUSH
19356: DOUBLE
19357: LD_INT 1
19359: DEC
19360: ST_TO_ADDR
19361: LD_VAR 0 1
19365: PPUSH
19366: LD_INT 0
19368: PPUSH
19369: CALL_OW 517
19373: PUSH
19374: LD_INT 1
19376: ARRAY
19377: PUSH
19378: FOR_TO
19379: IFFALSE 19632
// begin if r > 50 then
19381: LD_VAR 0 5
19385: PUSH
19386: LD_INT 50
19388: GREATER
19389: IFFALSE 19608
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19391: LD_VAR 0 1
19395: PPUSH
19396: LD_INT 0
19398: PPUSH
19399: CALL_OW 517
19403: PUSH
19404: LD_INT 1
19406: ARRAY
19407: PUSH
19408: LD_VAR 0 4
19412: ARRAY
19413: PPUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: LD_INT 0
19421: PPUSH
19422: CALL_OW 517
19426: PUSH
19427: LD_INT 2
19429: ARRAY
19430: PUSH
19431: LD_VAR 0 4
19435: ARRAY
19436: PPUSH
19437: CALL_OW 458
19441: NOT
19442: IFFALSE 19592
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19444: LD_VAR 0 1
19448: PPUSH
19449: LD_INT 0
19451: PPUSH
19452: CALL_OW 517
19456: PUSH
19457: LD_INT 1
19459: ARRAY
19460: PUSH
19461: LD_VAR 0 4
19465: ARRAY
19466: PPUSH
19467: LD_VAR 0 1
19471: PPUSH
19472: LD_INT 0
19474: PPUSH
19475: CALL_OW 517
19479: PUSH
19480: LD_INT 2
19482: ARRAY
19483: PUSH
19484: LD_VAR 0 4
19488: ARRAY
19489: PPUSH
19490: LD_INT 5
19492: PPUSH
19493: LD_INT 0
19495: PPUSH
19496: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19500: LD_ADDR_EXP 50
19504: PUSH
19505: LD_EXP 50
19509: PPUSH
19510: LD_INT 1
19512: PPUSH
19513: LD_VAR 0 1
19517: PPUSH
19518: LD_INT 0
19520: PPUSH
19521: CALL_OW 517
19525: PUSH
19526: LD_INT 1
19528: ARRAY
19529: PUSH
19530: LD_VAR 0 4
19534: ARRAY
19535: PUSH
19536: LD_VAR 0 1
19540: PPUSH
19541: LD_INT 0
19543: PPUSH
19544: CALL_OW 517
19548: PUSH
19549: LD_INT 2
19551: ARRAY
19552: PUSH
19553: LD_VAR 0 4
19557: ARRAY
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PPUSH
19563: CALL_OW 2
19567: ST_TO_ADDR
// r := 0 ;
19568: LD_ADDR_VAR 0 5
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
// x := x + 1 ;
19576: LD_ADDR_VAR 0 6
19580: PUSH
19581: LD_VAR 0 6
19585: PUSH
19586: LD_INT 1
19588: PLUS
19589: ST_TO_ADDR
// end else
19590: GO 19606
// r := r + 35 ;
19592: LD_ADDR_VAR 0 5
19596: PUSH
19597: LD_VAR 0 5
19601: PUSH
19602: LD_INT 35
19604: PLUS
19605: ST_TO_ADDR
// end else
19606: GO 19630
// r := r + rand ( 10 , 25 ) ;
19608: LD_ADDR_VAR 0 5
19612: PUSH
19613: LD_VAR 0 5
19617: PUSH
19618: LD_INT 10
19620: PPUSH
19621: LD_INT 25
19623: PPUSH
19624: CALL_OW 12
19628: PLUS
19629: ST_TO_ADDR
// end ;
19630: GO 19378
19632: POP
19633: POP
19634: GO 19339
// end ; end_of_file
19636: LD_VAR 0 3
19640: RET
// every 0 0$1 trigger russianAI = 1 do
19641: LD_EXP 39
19645: PUSH
19646: LD_INT 1
19648: EQUAL
19649: IFFALSE 19868
19651: GO 19653
19653: DISABLE
// begin enable ;
19654: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19655: LD_INT 3
19657: PPUSH
19658: LD_EXP 30
19662: PPUSH
19663: CALL 14279 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19667: LD_INT 3
19669: PPUSH
19670: LD_EXP 42
19674: PPUSH
19675: CALL 14639 0 2
// if ruPossition = 1 then
19679: LD_EXP 41
19683: PUSH
19684: LD_INT 1
19686: EQUAL
19687: IFFALSE 19742
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19689: LD_INT 3
19691: PPUSH
19692: LD_INT 13
19694: PPUSH
19695: LD_INT 10
19697: PPUSH
19698: LD_INT 22
19700: PUSH
19701: LD_INT 3
19703: PUSH
19704: EMPTY
19705: LIST
19706: LIST
19707: PUSH
19708: LD_INT 21
19710: PUSH
19711: LD_INT 3
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 30
19720: PUSH
19721: LD_INT 8
19723: PUSH
19724: EMPTY
19725: LIST
19726: LIST
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: PPUSH
19733: CALL_OW 69
19737: PPUSH
19738: CALL 14845 0 4
// if ruPossition = 2 then
19742: LD_EXP 41
19746: PUSH
19747: LD_INT 2
19749: EQUAL
19750: IFFALSE 19805
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19752: LD_INT 3
19754: PPUSH
19755: LD_INT 14
19757: PPUSH
19758: LD_INT 11
19760: PPUSH
19761: LD_INT 22
19763: PUSH
19764: LD_INT 3
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PUSH
19771: LD_INT 21
19773: PUSH
19774: LD_INT 3
19776: PUSH
19777: EMPTY
19778: LIST
19779: LIST
19780: PUSH
19781: LD_INT 30
19783: PUSH
19784: LD_INT 8
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: EMPTY
19792: LIST
19793: LIST
19794: LIST
19795: PPUSH
19796: CALL_OW 69
19800: PPUSH
19801: CALL 14845 0 4
// if ruPossition = 3 then
19805: LD_EXP 41
19809: PUSH
19810: LD_INT 3
19812: EQUAL
19813: IFFALSE 19868
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19815: LD_INT 3
19817: PPUSH
19818: LD_INT 15
19820: PPUSH
19821: LD_INT 12
19823: PPUSH
19824: LD_INT 22
19826: PUSH
19827: LD_INT 3
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: LD_INT 21
19836: PUSH
19837: LD_INT 3
19839: PUSH
19840: EMPTY
19841: LIST
19842: LIST
19843: PUSH
19844: LD_INT 30
19846: PUSH
19847: LD_INT 8
19849: PUSH
19850: EMPTY
19851: LIST
19852: LIST
19853: PUSH
19854: EMPTY
19855: LIST
19856: LIST
19857: LIST
19858: PPUSH
19859: CALL_OW 69
19863: PPUSH
19864: CALL 14845 0 4
// end ;
19868: END
// every 0 0$1 do
19869: GO 19871
19871: DISABLE
// begin enable ;
19872: ENABLE
// if ruPossition = 1 then
19873: LD_EXP 41
19877: PUSH
19878: LD_INT 1
19880: EQUAL
19881: IFFALSE 19893
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
19883: LD_INT 3
19885: PPUSH
19886: LD_INT 10
19888: PPUSH
19889: CALL 13916 0 2
// if ruPossition = 2 then
19893: LD_EXP 41
19897: PUSH
19898: LD_INT 2
19900: EQUAL
19901: IFFALSE 19913
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
19903: LD_INT 3
19905: PPUSH
19906: LD_INT 11
19908: PPUSH
19909: CALL 13916 0 2
// if ruPossition = 3 then
19913: LD_EXP 41
19917: PUSH
19918: LD_INT 3
19920: EQUAL
19921: IFFALSE 19933
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
19923: LD_INT 3
19925: PPUSH
19926: LD_INT 12
19928: PPUSH
19929: CALL 13916 0 2
// IntBazooka ( 3 , 1 ) ;
19933: LD_INT 3
19935: PPUSH
19936: LD_INT 1
19938: PPUSH
19939: CALL 12735 0 2
// IntBazooka ( 6 , 1 ) ;
19943: LD_INT 6
19945: PPUSH
19946: LD_INT 1
19948: PPUSH
19949: CALL 12735 0 2
// end ;
19953: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
19954: LD_EXP 39
19958: PUSH
19959: LD_INT 1
19961: EQUAL
19962: PUSH
19963: LD_EXP 35
19967: PPUSH
19968: CALL_OW 302
19972: AND
19973: PUSH
19974: LD_EXP 35
19978: PPUSH
19979: CALL_OW 255
19983: PUSH
19984: LD_INT 3
19986: EQUAL
19987: AND
19988: PUSH
19989: LD_INT 22
19991: PUSH
19992: LD_INT 3
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: PUSH
19999: LD_INT 21
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 33
20011: PUSH
20012: LD_INT 3
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: PPUSH
20024: CALL_OW 69
20028: PUSH
20029: LD_INT 0
20031: EQUAL
20032: AND
20033: IFFALSE 20241
20035: GO 20037
20037: DISABLE
// begin enable ;
20038: ENABLE
// if Difficulty = 1 then
20039: LD_OWVAR 67
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: IFFALSE 20109
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20049: LD_INT 3
20051: PPUSH
20052: LD_EXP 35
20056: PPUSH
20057: LD_INT 5
20059: PPUSH
20060: LD_INT 8
20062: PPUSH
20063: CALL_OW 12
20067: PPUSH
20068: LD_INT 1
20070: PPUSH
20071: LD_INT 43
20073: PUSH
20074: LD_INT 44
20076: PUSH
20077: LD_INT 45
20079: PUSH
20080: LD_INT 46
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: LIST
20087: LIST
20088: PPUSH
20089: LD_INT 1
20091: PPUSH
20092: LD_INT 1
20094: PUSH
20095: LD_INT 3
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PPUSH
20102: LD_INT 22
20104: PPUSH
20105: CALL 18675 0 8
// if Difficulty = 2 then
20109: LD_OWVAR 67
20113: PUSH
20114: LD_INT 2
20116: EQUAL
20117: IFFALSE 20175
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20119: LD_INT 3
20121: PPUSH
20122: LD_EXP 35
20126: PPUSH
20127: LD_INT 6
20129: PPUSH
20130: LD_INT 8
20132: PPUSH
20133: CALL_OW 12
20137: PPUSH
20138: LD_INT 1
20140: PPUSH
20141: LD_INT 44
20143: PUSH
20144: LD_INT 45
20146: PUSH
20147: LD_INT 46
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: LIST
20154: PPUSH
20155: LD_INT 1
20157: PPUSH
20158: LD_INT 1
20160: PUSH
20161: LD_INT 3
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PPUSH
20168: LD_INT 22
20170: PPUSH
20171: CALL 18675 0 8
// if Difficulty = 3 then
20175: LD_OWVAR 67
20179: PUSH
20180: LD_INT 3
20182: EQUAL
20183: IFFALSE 20241
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20185: LD_INT 3
20187: PPUSH
20188: LD_EXP 35
20192: PPUSH
20193: LD_INT 7
20195: PPUSH
20196: LD_INT 8
20198: PPUSH
20199: CALL_OW 12
20203: PPUSH
20204: LD_INT 1
20206: PPUSH
20207: LD_INT 44
20209: PUSH
20210: LD_INT 45
20212: PUSH
20213: LD_INT 46
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: LIST
20220: PPUSH
20221: LD_INT 1
20223: PPUSH
20224: LD_INT 1
20226: PUSH
20227: LD_INT 3
20229: PUSH
20230: EMPTY
20231: LIST
20232: LIST
20233: PPUSH
20234: LD_INT 22
20236: PPUSH
20237: CALL 18675 0 8
// end ;
20241: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20242: LD_EXP 50
20246: PUSH
20247: LD_EXP 49
20251: AND
20252: IFFALSE 20373
20254: GO 20256
20256: DISABLE
20257: LD_INT 0
20259: PPUSH
// begin enable ;
20260: ENABLE
// for i in arabianMines do
20261: LD_ADDR_VAR 0 1
20265: PUSH
20266: LD_EXP 50
20270: PUSH
20271: FOR_IN
20272: IFFALSE 20371
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20274: LD_INT 22
20276: PUSH
20277: LD_INT 1
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PUSH
20284: LD_INT 92
20286: PUSH
20287: LD_VAR 0 1
20291: PUSH
20292: LD_INT 1
20294: ARRAY
20295: PUSH
20296: LD_VAR 0 1
20300: PUSH
20301: LD_INT 2
20303: ARRAY
20304: PUSH
20305: LD_INT 3
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PPUSH
20318: CALL_OW 69
20322: IFFALSE 20369
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20324: LD_VAR 0 1
20328: PUSH
20329: LD_INT 1
20331: ARRAY
20332: PPUSH
20333: LD_VAR 0 1
20337: PUSH
20338: LD_INT 2
20340: ARRAY
20341: PPUSH
20342: LD_INT 5
20344: PPUSH
20345: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20349: LD_ADDR_EXP 50
20353: PUSH
20354: LD_EXP 50
20358: PPUSH
20359: LD_VAR 0 1
20363: PPUSH
20364: CALL_OW 3
20368: ST_TO_ADDR
// end ; end ;
20369: GO 20271
20371: POP
20372: POP
// end ; end_of_file
20373: PPOPN 1
20375: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20376: LD_VAR 0 1
20380: PPUSH
20381: CALL_OW 255
20385: PUSH
20386: LD_INT 4
20388: EQUAL
20389: IFFALSE 20403
// SetBName ( building , epsilon ) ;
20391: LD_VAR 0 1
20395: PPUSH
20396: LD_STRING epsilon
20398: PPUSH
20399: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20403: LD_VAR 0 1
20407: PPUSH
20408: CALL_OW 255
20412: PUSH
20413: LD_INT 1
20415: EQUAL
20416: PUSH
20417: LD_VAR 0 1
20421: PPUSH
20422: CALL_OW 266
20426: PUSH
20427: LD_INT 0
20429: EQUAL
20430: AND
20431: IFFALSE 20445
// SetBName ( building , epsilon ) ;
20433: LD_VAR 0 1
20437: PPUSH
20438: LD_STRING epsilon
20440: PPUSH
20441: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20445: LD_VAR 0 1
20449: PPUSH
20450: CALL_OW 255
20454: PUSH
20455: LD_INT 3
20457: EQUAL
20458: PUSH
20459: LD_VAR 0 1
20463: PPUSH
20464: CALL_OW 266
20468: PUSH
20469: LD_INT 0
20471: EQUAL
20472: AND
20473: IFFALSE 20487
// SetBName ( building , chuikov ) ;
20475: LD_VAR 0 1
20479: PPUSH
20480: LD_STRING chuikov
20482: PPUSH
20483: CALL_OW 500
// if GetSide ( building ) = 2 then
20487: LD_VAR 0 1
20491: PPUSH
20492: CALL_OW 255
20496: PUSH
20497: LD_INT 2
20499: EQUAL
20500: IFFALSE 20556
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20502: LD_VAR 0 1
20506: PPUSH
20507: CALL_OW 266
20511: PUSH
20512: LD_INT 6
20514: EQUAL
20515: PUSH
20516: LD_VAR 0 1
20520: PPUSH
20521: CALL_OW 266
20525: PUSH
20526: LD_INT 9
20528: EQUAL
20529: OR
20530: IFFALSE 20556
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20532: LD_VAR 0 1
20536: PPUSH
20537: LD_INT 10
20539: PPUSH
20540: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20544: LD_VAR 0 1
20548: PPUSH
20549: LD_INT 11
20551: PPUSH
20552: CALL_OW 207
// end ; end ; end ;
20556: PPOPN 2
20558: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20559: LD_INT 0
20561: PPUSH
20562: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20563: LD_VAR 0 1
20567: PUSH
20568: LD_INT 22
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: LD_INT 23
20580: PUSH
20581: LD_INT 3
20583: PUSH
20584: EMPTY
20585: LIST
20586: LIST
20587: PUSH
20588: LD_INT 21
20590: PUSH
20591: LD_INT 2
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: LIST
20602: PPUSH
20603: CALL_OW 69
20607: IN
20608: PUSH
20609: LD_EXP 58
20613: NOT
20614: AND
20615: IFFALSE 20646
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20617: LD_ADDR_EXP 58
20621: PUSH
20622: LD_VAR 0 1
20626: PPUSH
20627: CALL_OW 250
20631: PUSH
20632: LD_VAR 0 1
20636: PPUSH
20637: CALL_OW 251
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: ST_TO_ADDR
// end ;
20646: PPOPN 3
20648: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20649: LD_VAR 0 2
20653: PPUSH
20654: CALL_OW 255
20658: PUSH
20659: LD_INT 3
20661: EQUAL
20662: PUSH
20663: LD_EXP 35
20667: PPUSH
20668: CALL_OW 255
20672: PUSH
20673: LD_INT 3
20675: EQUAL
20676: AND
20677: PUSH
20678: LD_EXP 35
20682: PPUSH
20683: CALL_OW 302
20687: AND
20688: IFFALSE 20704
// ComEnterUnit ( human , ruFab ) ;
20690: LD_VAR 0 2
20694: PPUSH
20695: LD_EXP 35
20699: PPUSH
20700: CALL_OW 120
// end ;
20704: PPOPN 2
20706: END
// on BuildingComplete ( building ) do var i ;
20707: LD_INT 0
20709: PPUSH
// begin if GetSide ( building ) = 1 then
20710: LD_VAR 0 1
20714: PPUSH
20715: CALL_OW 255
20719: PUSH
20720: LD_INT 1
20722: EQUAL
20723: IFFALSE 20983
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 or GetBType ( building ) = 11 then
20725: LD_VAR 0 1
20729: PPUSH
20730: CALL_OW 266
20734: PUSH
20735: LD_INT 26
20737: EQUAL
20738: PUSH
20739: LD_VAR 0 1
20743: PPUSH
20744: CALL_OW 266
20748: PUSH
20749: LD_INT 27
20751: EQUAL
20752: OR
20753: PUSH
20754: LD_VAR 0 1
20758: PPUSH
20759: CALL_OW 266
20763: PUSH
20764: LD_INT 28
20766: EQUAL
20767: OR
20768: PUSH
20769: LD_VAR 0 1
20773: PPUSH
20774: CALL_OW 266
20778: PUSH
20779: LD_INT 11
20781: EQUAL
20782: OR
20783: IFFALSE 20983
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] , [ f_and , [ f_btype , b_lab_siberium ] ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
20785: LD_INT 22
20787: PUSH
20788: LD_INT 1
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PUSH
20795: LD_INT 2
20797: PUSH
20798: LD_INT 30
20800: PUSH
20801: LD_INT 7
20803: PUSH
20804: EMPTY
20805: LIST
20806: LIST
20807: PUSH
20808: LD_INT 30
20810: PUSH
20811: LD_INT 8
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: LIST
20822: PUSH
20823: LD_INT 1
20825: PUSH
20826: LD_INT 30
20828: PUSH
20829: LD_INT 11
20831: PUSH
20832: EMPTY
20833: LIST
20834: LIST
20835: PUSH
20836: EMPTY
20837: LIST
20838: LIST
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 2
20845: PUSH
20846: LD_INT 30
20848: PUSH
20849: LD_INT 26
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 30
20858: PUSH
20859: LD_INT 27
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 30
20868: PUSH
20869: LD_INT 28
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: LIST
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: PPUSH
20892: CALL_OW 69
20896: PUSH
20897: LD_INT 0
20899: GREATER
20900: PUSH
20901: LD_INT 22
20903: PUSH
20904: LD_INT 1
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PUSH
20911: LD_INT 2
20913: PUSH
20914: LD_INT 30
20916: PUSH
20917: LD_INT 26
20919: PUSH
20920: EMPTY
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 30
20926: PUSH
20927: LD_INT 27
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: PUSH
20934: LD_INT 30
20936: PUSH
20937: LD_INT 28
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: PPUSH
20954: CALL_OW 69
20958: PUSH
20959: LD_INT 0
20961: GREATER
20962: AND
20963: PUSH
20964: LD_EXP 61
20968: PUSH
20969: LD_INT 0
20971: EQUAL
20972: AND
20973: IFFALSE 20983
// eventVar1 = 1 ;
20975: LD_ADDR_EXP 61
20979: PUSH
20980: LD_INT 1
20982: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
20983: LD_VAR 0 1
20987: PPUSH
20988: CALL_OW 255
20992: PUSH
20993: LD_INT 3
20995: EQUAL
20996: IFFALSE 21476
// begin if GetBType ( building ) = b_depot then
20998: LD_VAR 0 1
21002: PPUSH
21003: CALL_OW 266
21007: PUSH
21008: LD_INT 0
21010: EQUAL
21011: IFFALSE 21083
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21013: LD_VAR 0 1
21017: PPUSH
21018: CALL_OW 274
21022: PPUSH
21023: LD_INT 1
21025: PPUSH
21026: LD_INT 5000
21028: PPUSH
21029: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21033: LD_VAR 0 1
21037: PPUSH
21038: CALL_OW 274
21042: PPUSH
21043: LD_INT 2
21045: PPUSH
21046: LD_INT 5000
21048: PPUSH
21049: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21053: LD_VAR 0 1
21057: PPUSH
21058: CALL_OW 274
21062: PPUSH
21063: LD_INT 3
21065: PPUSH
21066: LD_INT 5000
21068: PPUSH
21069: CALL_OW 277
// ruDepot = building ;
21073: LD_ADDR_EXP 30
21077: PUSH
21078: LD_VAR 0 1
21082: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21083: LD_VAR 0 1
21087: PPUSH
21088: CALL_OW 266
21092: PUSH
21093: LD_INT 0
21095: EQUAL
21096: PUSH
21097: LD_VAR 0 1
21101: PPUSH
21102: CALL_OW 266
21106: PUSH
21107: LD_INT 2
21109: EQUAL
21110: OR
21111: PUSH
21112: LD_VAR 0 1
21116: PPUSH
21117: CALL_OW 266
21121: PUSH
21122: LD_INT 4
21124: EQUAL
21125: OR
21126: IFFALSE 21137
// ComUpgrade ( building ) ;
21128: LD_VAR 0 1
21132: PPUSH
21133: CALL_OW 146
// if GetBType ( building ) = b_lab then
21137: LD_VAR 0 1
21141: PPUSH
21142: CALL_OW 266
21146: PUSH
21147: LD_INT 6
21149: EQUAL
21150: IFFALSE 21353
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21152: LD_INT 22
21154: PUSH
21155: LD_INT 3
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PUSH
21162: LD_INT 30
21164: PUSH
21165: LD_INT 8
21167: PUSH
21168: EMPTY
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: PPUSH
21176: CALL_OW 69
21180: PUSH
21181: LD_INT 0
21183: EQUAL
21184: IFFALSE 21222
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21186: LD_VAR 0 1
21190: PPUSH
21191: LD_INT 10
21193: PPUSH
21194: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21198: LD_VAR 0 1
21202: PPUSH
21203: LD_INT 12
21205: PPUSH
21206: CALL_OW 207
// ruLab1 = building ;
21210: LD_ADDR_EXP 31
21214: PUSH
21215: LD_VAR 0 1
21219: ST_TO_ADDR
// end else
21220: GO 21256
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21222: LD_VAR 0 1
21226: PPUSH
21227: LD_INT 11
21229: PPUSH
21230: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21234: LD_VAR 0 1
21238: PPUSH
21239: LD_INT 14
21241: PPUSH
21242: CALL_OW 207
// ruLab2 = building ;
21246: LD_ADDR_EXP 32
21250: PUSH
21251: LD_VAR 0 1
21255: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21256: LD_INT 3
21258: PPUSH
21259: LD_VAR 0 1
21263: PPUSH
21264: LD_INT 3
21266: PPUSH
21267: CALL 13831 0 3
// if ruDestroyedBuildings > 0 then
21271: LD_EXP 42
21275: PUSH
21276: LD_INT 0
21278: GREATER
21279: IFFALSE 21353
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21281: LD_ADDR_EXP 42
21285: PUSH
21286: LD_EXP 42
21290: PPUSH
21291: LD_INT 1
21293: PPUSH
21294: CALL_OW 3
21298: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21299: LD_ADDR_EXP 42
21303: PUSH
21304: LD_EXP 42
21308: PPUSH
21309: LD_INT 1
21311: PPUSH
21312: CALL_OW 3
21316: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21317: LD_ADDR_EXP 42
21321: PUSH
21322: LD_EXP 42
21326: PPUSH
21327: LD_INT 1
21329: PPUSH
21330: CALL_OW 3
21334: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21335: LD_ADDR_EXP 42
21339: PUSH
21340: LD_EXP 42
21344: PPUSH
21345: LD_INT 1
21347: PPUSH
21348: CALL_OW 3
21352: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21353: LD_VAR 0 1
21357: PPUSH
21358: CALL_OW 266
21362: PUSH
21363: LD_INT 32
21365: EQUAL
21366: IFFALSE 21403
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: LD_INT 44
21375: PUSH
21376: LD_INT 45
21378: PUSH
21379: LD_INT 46
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PPUSH
21390: LD_INT 3
21392: PPUSH
21393: CALL_OW 12
21397: ARRAY
21398: PPUSH
21399: CALL_OW 208
// if GetBType ( building ) = b_turret then
21403: LD_VAR 0 1
21407: PPUSH
21408: CALL_OW 266
21412: PUSH
21413: LD_INT 33
21415: EQUAL
21416: IFFALSE 21453
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: LD_INT 44
21425: PUSH
21426: LD_INT 46
21428: PUSH
21429: LD_INT 46
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 1
21439: PPUSH
21440: LD_INT 3
21442: PPUSH
21443: CALL_OW 12
21447: ARRAY
21448: PPUSH
21449: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21453: LD_VAR 0 1
21457: PPUSH
21458: CALL_OW 266
21462: PUSH
21463: LD_INT 24
21465: EQUAL
21466: IFFALSE 21476
// russianAI = 1 ;
21468: LD_ADDR_EXP 39
21472: PUSH
21473: LD_INT 1
21475: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21476: LD_VAR 0 1
21480: PPUSH
21481: CALL_OW 255
21485: PUSH
21486: LD_INT 2
21488: EQUAL
21489: IFFALSE 22047
// begin if GetBType ( building ) = b_depot then
21491: LD_VAR 0 1
21495: PPUSH
21496: CALL_OW 266
21500: PUSH
21501: LD_INT 0
21503: EQUAL
21504: IFFALSE 21590
// begin arDepot = building ;
21506: LD_ADDR_EXP 43
21510: PUSH
21511: LD_VAR 0 1
21515: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21516: LD_INT 38
21518: PUSH
21519: LD_INT 47
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: LD_INT 71
21528: PPUSH
21529: LD_INT 19
21531: PPUSH
21532: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21536: LD_VAR 0 1
21540: PPUSH
21541: CALL_OW 274
21545: PPUSH
21546: LD_INT 1
21548: PPUSH
21549: LD_INT 500
21551: PPUSH
21552: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 274
21565: PPUSH
21566: LD_INT 3
21568: PPUSH
21569: LD_INT 30
21571: PPUSH
21572: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21576: LD_EXP 26
21580: PPUSH
21581: LD_EXP 43
21585: PPUSH
21586: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21590: LD_VAR 0 1
21594: PPUSH
21595: CALL_OW 266
21599: PUSH
21600: LD_INT 6
21602: EQUAL
21603: PUSH
21604: LD_VAR 0 1
21608: PPUSH
21609: CALL_OW 266
21613: PUSH
21614: LD_INT 9
21616: EQUAL
21617: OR
21618: IFFALSE 21669
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21620: LD_VAR 0 1
21624: PPUSH
21625: LD_INT 10
21627: PPUSH
21628: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21632: LD_VAR 0 1
21636: PPUSH
21637: LD_INT 11
21639: PPUSH
21640: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21644: LD_INT 2
21646: PPUSH
21647: LD_VAR 0 1
21651: PPUSH
21652: LD_INT 2
21654: PPUSH
21655: CALL 13831 0 3
// arLab = building ;
21659: LD_ADDR_EXP 44
21663: PUSH
21664: LD_VAR 0 1
21668: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21669: LD_VAR 0 1
21673: PPUSH
21674: CALL_OW 266
21678: PUSH
21679: LD_INT 2
21681: EQUAL
21682: PUSH
21683: LD_VAR 0 1
21687: PPUSH
21688: CALL_OW 266
21692: PUSH
21693: LD_INT 4
21695: EQUAL
21696: OR
21697: IFFALSE 21708
// ComUpgrade ( building ) ;
21699: LD_VAR 0 1
21703: PPUSH
21704: CALL_OW 146
// if GetBType ( building ) = b_breastwork and FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) > 0 then
21708: LD_VAR 0 1
21712: PPUSH
21713: CALL_OW 266
21717: PUSH
21718: LD_INT 31
21720: EQUAL
21721: PUSH
21722: LD_INT 22
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: EMPTY
21729: LIST
21730: LIST
21731: PUSH
21732: LD_INT 25
21734: PUSH
21735: LD_INT 1
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 3
21744: PUSH
21745: LD_INT 54
21747: PUSH
21748: EMPTY
21749: LIST
21750: PUSH
21751: LD_INT 3
21753: PUSH
21754: LD_INT 60
21756: PUSH
21757: EMPTY
21758: LIST
21759: PUSH
21760: EMPTY
21761: LIST
21762: LIST
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: LIST
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: LIST
21773: PPUSH
21774: CALL_OW 69
21778: PUSH
21779: LD_INT 0
21781: GREATER
21782: AND
21783: IFFALSE 21855
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
21785: LD_INT 22
21787: PUSH
21788: LD_INT 2
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 25
21797: PUSH
21798: LD_INT 1
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 3
21807: PUSH
21808: LD_INT 54
21810: PUSH
21811: EMPTY
21812: LIST
21813: PUSH
21814: LD_INT 3
21816: PUSH
21817: LD_INT 60
21819: PUSH
21820: EMPTY
21821: LIST
21822: PUSH
21823: EMPTY
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: LIST
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: PPUSH
21837: CALL_OW 69
21841: PUSH
21842: LD_INT 1
21844: ARRAY
21845: PPUSH
21846: LD_VAR 0 1
21850: PPUSH
21851: CALL_OW 120
// if GetBType ( building ) = b_solar_power then
21855: LD_VAR 0 1
21859: PPUSH
21860: CALL_OW 266
21864: PUSH
21865: LD_INT 27
21867: EQUAL
21868: IFFALSE 22047
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21870: LD_INT 22
21872: PUSH
21873: LD_INT 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 30
21882: PUSH
21883: LD_INT 27
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: PUSH
21899: LD_INT 2
21901: EQUAL
21902: IFFALSE 22047
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
21904: LD_ADDR_VAR 0 2
21908: PUSH
21909: LD_INT 22
21911: PUSH
21912: LD_INT 2
21914: PUSH
21915: EMPTY
21916: LIST
21917: LIST
21918: PUSH
21919: LD_INT 21
21921: PUSH
21922: LD_INT 1
21924: PUSH
21925: EMPTY
21926: LIST
21927: LIST
21928: PUSH
21929: LD_INT 25
21931: PUSH
21932: LD_INT 2
21934: PUSH
21935: EMPTY
21936: LIST
21937: LIST
21938: PUSH
21939: EMPTY
21940: LIST
21941: LIST
21942: LIST
21943: PPUSH
21944: CALL_OW 69
21948: PUSH
21949: LD_INT 1
21951: ARRAY
21952: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
21953: LD_VAR 0 2
21957: PPUSH
21958: LD_INT 92
21960: PPUSH
21961: LD_INT 34
21963: PPUSH
21964: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
21968: LD_VAR 0 2
21972: PPUSH
21973: LD_INT 82
21975: PPUSH
21976: LD_INT 57
21978: PPUSH
21979: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
21983: LD_VAR 0 2
21987: PPUSH
21988: LD_INT 36
21990: PPUSH
21991: LD_INT 28
21993: PPUSH
21994: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
21998: LD_INT 22
22000: PUSH
22001: LD_INT 2
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 21
22010: PUSH
22011: LD_INT 1
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 25
22020: PUSH
22021: LD_INT 2
22023: PUSH
22024: EMPTY
22025: LIST
22026: LIST
22027: PUSH
22028: EMPTY
22029: LIST
22030: LIST
22031: LIST
22032: PPUSH
22033: CALL_OW 69
22037: PPUSH
22038: LD_EXP 43
22042: PPUSH
22043: CALL_OW 180
// end ; end ; end ;
22047: PPOPN 2
22049: END
// on UpgradeComplete ( building ) do var i ;
22050: LD_INT 0
22052: PPUSH
// begin if GetSide ( building ) = 1 then
22053: LD_VAR 0 1
22057: PPUSH
22058: CALL_OW 255
22062: PUSH
22063: LD_INT 1
22065: EQUAL
22066: IFFALSE 22266
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
22068: LD_INT 22
22070: PUSH
22071: LD_INT 1
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PUSH
22078: LD_INT 2
22080: PUSH
22081: LD_INT 30
22083: PUSH
22084: LD_INT 7
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PUSH
22091: LD_INT 30
22093: PUSH
22094: LD_INT 8
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 1
22103: PUSH
22104: LD_INT 30
22106: PUSH
22107: LD_INT 11
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: LD_INT 1
22116: PUSH
22117: LD_INT 2
22119: PUSH
22120: LD_INT 30
22122: PUSH
22123: LD_INT 26
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: PUSH
22130: LD_INT 30
22132: PUSH
22133: LD_INT 27
22135: PUSH
22136: EMPTY
22137: LIST
22138: LIST
22139: PUSH
22140: LD_INT 30
22142: PUSH
22143: LD_INT 28
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PUSH
22150: EMPTY
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: PUSH
22156: EMPTY
22157: LIST
22158: LIST
22159: PUSH
22160: EMPTY
22161: LIST
22162: LIST
22163: LIST
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PPUSH
22175: CALL_OW 69
22179: PUSH
22180: LD_INT 0
22182: GREATER
22183: PUSH
22184: LD_INT 22
22186: PUSH
22187: LD_INT 1
22189: PUSH
22190: EMPTY
22191: LIST
22192: LIST
22193: PUSH
22194: LD_INT 2
22196: PUSH
22197: LD_INT 30
22199: PUSH
22200: LD_INT 26
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 30
22209: PUSH
22210: LD_INT 27
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 30
22219: PUSH
22220: LD_INT 28
22222: PUSH
22223: EMPTY
22224: LIST
22225: LIST
22226: PUSH
22227: EMPTY
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: PUSH
22242: LD_INT 0
22244: GREATER
22245: AND
22246: PUSH
22247: LD_EXP 61
22251: PUSH
22252: LD_INT 0
22254: EQUAL
22255: AND
22256: IFFALSE 22266
// eventVar1 = 1 ;
22258: LD_ADDR_EXP 61
22262: PUSH
22263: LD_INT 1
22265: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22266: LD_VAR 0 1
22270: PPUSH
22271: CALL_OW 255
22275: PUSH
22276: LD_INT 2
22278: EQUAL
22279: IFFALSE 22384
// begin if GetBType ( building ) = b_barracks then
22281: LD_VAR 0 1
22285: PPUSH
22286: CALL_OW 266
22290: PUSH
22291: LD_INT 5
22293: EQUAL
22294: IFFALSE 22384
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22296: LD_ADDR_VAR 0 2
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_INT 2
22306: PUSH
22307: EMPTY
22308: LIST
22309: LIST
22310: PUSH
22311: LD_INT 25
22313: PUSH
22314: LD_INT 1
22316: PUSH
22317: EMPTY
22318: LIST
22319: LIST
22320: PUSH
22321: LD_INT 3
22323: PUSH
22324: LD_INT 54
22326: PUSH
22327: EMPTY
22328: LIST
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: LIST
22338: PPUSH
22339: CALL_OW 69
22343: PUSH
22344: LD_EXP 26
22348: PUSH
22349: EMPTY
22350: LIST
22351: DIFF
22352: PUSH
22353: FOR_IN
22354: IFFALSE 22372
// ComEnterUnit ( i , building ) ;
22356: LD_VAR 0 2
22360: PPUSH
22361: LD_VAR 0 1
22365: PPUSH
22366: CALL_OW 120
22370: GO 22353
22372: POP
22373: POP
// arArm = building ;
22374: LD_ADDR_EXP 45
22378: PUSH
22379: LD_VAR 0 1
22383: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22384: LD_VAR 0 1
22388: PPUSH
22389: CALL_OW 255
22393: PUSH
22394: LD_INT 3
22396: EQUAL
22397: IFFALSE 22870
// begin if GetBType ( building ) = b_factory then
22399: LD_VAR 0 1
22403: PPUSH
22404: CALL_OW 266
22408: PUSH
22409: LD_INT 3
22411: EQUAL
22412: IFFALSE 22479
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22414: LD_ADDR_VAR 0 2
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_INT 3
22424: PUSH
22425: EMPTY
22426: LIST
22427: LIST
22428: PUSH
22429: LD_INT 25
22431: PUSH
22432: LD_INT 3
22434: PUSH
22435: EMPTY
22436: LIST
22437: LIST
22438: PUSH
22439: EMPTY
22440: LIST
22441: LIST
22442: PPUSH
22443: CALL_OW 69
22447: PUSH
22448: FOR_IN
22449: IFFALSE 22467
// ComEnterUnit ( i , building ) ;
22451: LD_VAR 0 2
22455: PPUSH
22456: LD_VAR 0 1
22460: PPUSH
22461: CALL_OW 120
22465: GO 22448
22467: POP
22468: POP
// ruFab = building ;
22469: LD_ADDR_EXP 35
22473: PUSH
22474: LD_VAR 0 1
22478: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22479: LD_INT 22
22481: PUSH
22482: LD_INT 3
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: LD_INT 21
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PUSH
22499: LD_INT 30
22501: PUSH
22502: LD_INT 8
22504: PUSH
22505: EMPTY
22506: LIST
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: LIST
22513: PPUSH
22514: CALL_OW 69
22518: PUSH
22519: LD_INT 2
22521: EQUAL
22522: IFFALSE 22730
// begin for i = 1 to 2 do
22524: LD_ADDR_VAR 0 2
22528: PUSH
22529: DOUBLE
22530: LD_INT 1
22532: DEC
22533: ST_TO_ADDR
22534: LD_INT 2
22536: PUSH
22537: FOR_TO
22538: IFFALSE 22625
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22540: LD_INT 22
22542: PUSH
22543: LD_INT 3
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 25
22552: PUSH
22553: LD_INT 4
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 69
22568: PUSH
22569: LD_VAR 0 2
22573: ARRAY
22574: PPUSH
22575: LD_INT 22
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PUSH
22585: LD_INT 21
22587: PUSH
22588: LD_INT 3
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: PUSH
22595: LD_INT 30
22597: PUSH
22598: LD_INT 8
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: LIST
22609: PPUSH
22610: CALL_OW 69
22614: PUSH
22615: LD_INT 1
22617: ARRAY
22618: PPUSH
22619: CALL_OW 120
22623: GO 22537
22625: POP
22626: POP
// for i = 3 to 4 do
22627: LD_ADDR_VAR 0 2
22631: PUSH
22632: DOUBLE
22633: LD_INT 3
22635: DEC
22636: ST_TO_ADDR
22637: LD_INT 4
22639: PUSH
22640: FOR_TO
22641: IFFALSE 22728
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
22643: LD_INT 22
22645: PUSH
22646: LD_INT 3
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PUSH
22653: LD_INT 25
22655: PUSH
22656: LD_INT 4
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: PUSH
22663: EMPTY
22664: LIST
22665: LIST
22666: PPUSH
22667: CALL_OW 69
22671: PUSH
22672: LD_VAR 0 2
22676: ARRAY
22677: PPUSH
22678: LD_INT 22
22680: PUSH
22681: LD_INT 3
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: LD_INT 21
22690: PUSH
22691: LD_INT 3
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PUSH
22698: LD_INT 30
22700: PUSH
22701: LD_INT 8
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: LIST
22712: PPUSH
22713: CALL_OW 69
22717: PUSH
22718: LD_INT 2
22720: ARRAY
22721: PPUSH
22722: CALL_OW 120
22726: GO 22640
22728: POP
22729: POP
// end ; if GetBType ( building ) = b_barracks then
22730: LD_VAR 0 1
22734: PPUSH
22735: CALL_OW 266
22739: PUSH
22740: LD_INT 5
22742: EQUAL
22743: IFFALSE 22870
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_INT 22
22752: PUSH
22753: LD_INT 3
22755: PUSH
22756: EMPTY
22757: LIST
22758: LIST
22759: PUSH
22760: LD_INT 25
22762: PUSH
22763: LD_INT 1
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: PUSH
22770: LD_INT 3
22772: PUSH
22773: LD_INT 54
22775: PUSH
22776: EMPTY
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: PUSH
22783: EMPTY
22784: LIST
22785: LIST
22786: LIST
22787: PPUSH
22788: CALL_OW 69
22792: PUSH
22793: FOR_IN
22794: IFFALSE 22812
// ComEnterUnit ( i , building ) ;
22796: LD_VAR 0 2
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 120
22810: GO 22793
22812: POP
22813: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
22814: LD_INT 22
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 5
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: PPUSH
22838: CALL_OW 69
22842: PUSH
22843: LD_INT 0
22845: EQUAL
22846: IFFALSE 22860
// ruArm1 = building else
22848: LD_ADDR_EXP 33
22852: PUSH
22853: LD_VAR 0 1
22857: ST_TO_ADDR
22858: GO 22870
// ruArm2 = building ;
22860: LD_ADDR_EXP 34
22864: PUSH
22865: LD_VAR 0 1
22869: ST_TO_ADDR
// end ; end ; end ;
22870: PPOPN 2
22872: END
// on EnterBuilding ( building , human ) do var rnd ;
22873: LD_INT 0
22875: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
22876: LD_VAR 0 2
22880: PPUSH
22881: CALL_OW 255
22885: PUSH
22886: LD_INT 2
22888: EQUAL
22889: PUSH
22890: LD_VAR 0 2
22894: PPUSH
22895: CALL_OW 257
22899: PUSH
22900: LD_INT 1
22902: EQUAL
22903: AND
22904: PUSH
22905: LD_VAR 0 1
22909: PUSH
22910: LD_EXP 45
22914: EQUAL
22915: AND
22916: IFFALSE 22963
// begin wait ( 0 0$1 ) ;
22918: LD_INT 35
22920: PPUSH
22921: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
22925: LD_ADDR_VAR 0 3
22929: PUSH
22930: LD_INT 1
22932: PPUSH
22933: LD_INT 100
22935: PPUSH
22936: CALL_OW 12
22940: ST_TO_ADDR
// if rnd > 50 then
22941: LD_VAR 0 3
22945: PUSH
22946: LD_INT 50
22948: GREATER
22949: IFFALSE 22963
// SetClass ( human , class_mortar ) ;
22951: LD_VAR 0 2
22955: PPUSH
22956: LD_INT 8
22958: PPUSH
22959: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
22963: LD_VAR 0 2
22967: PPUSH
22968: CALL_OW 255
22972: PUSH
22973: LD_INT 3
22975: EQUAL
22976: PUSH
22977: LD_VAR 0 2
22981: PPUSH
22982: CALL_OW 257
22986: PUSH
22987: LD_INT 1
22989: EQUAL
22990: AND
22991: PUSH
22992: LD_VAR 0 1
22996: PUSH
22997: LD_EXP 33
23001: EQUAL
23002: PUSH
23003: LD_VAR 0 1
23007: PUSH
23008: LD_EXP 34
23012: EQUAL
23013: OR
23014: PUSH
23015: EMPTY
23016: LIST
23017: AND
23018: IFFALSE 23039
// begin wait ( 0 0$1 ) ;
23020: LD_INT 35
23022: PPUSH
23023: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23027: LD_VAR 0 2
23031: PPUSH
23032: LD_INT 9
23034: PPUSH
23035: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23039: LD_VAR 0 2
23043: PPUSH
23044: CALL_OW 255
23048: PUSH
23049: LD_INT 3
23051: EQUAL
23052: PUSH
23053: LD_VAR 0 2
23057: PPUSH
23058: CALL_OW 257
23062: PUSH
23063: LD_INT 9
23065: EQUAL
23066: AND
23067: PUSH
23068: LD_VAR 0 1
23072: PPUSH
23073: CALL_OW 266
23077: PUSH
23078: LD_INT 32
23080: EQUAL
23081: AND
23082: IFFALSE 23103
// begin wait ( 0 0$1 ) ;
23084: LD_INT 35
23086: PPUSH
23087: CALL_OW 67
// SetClass ( human , 1 ) ;
23091: LD_VAR 0 2
23095: PPUSH
23096: LD_INT 1
23098: PPUSH
23099: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23103: LD_VAR 0 2
23107: PPUSH
23108: CALL_OW 255
23112: PUSH
23113: LD_INT 3
23115: EQUAL
23116: PUSH
23117: LD_VAR 0 2
23121: PPUSH
23122: CALL_OW 257
23126: PUSH
23127: LD_INT 3
23129: EQUAL
23130: AND
23131: PUSH
23132: LD_VAR 0 1
23136: PUSH
23137: LD_EXP 35
23141: EQUAL
23142: AND
23143: IFFALSE 23157
// SetLives ( human , 1000 ) ;
23145: LD_VAR 0 2
23149: PPUSH
23150: LD_INT 1000
23152: PPUSH
23153: CALL_OW 234
// end ;
23157: PPOPN 3
23159: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23160: LD_VAR 0 1
23164: PUSH
23165: LD_INT 1
23167: EQUAL
23168: PUSH
23169: LD_VAR 0 2
23173: PUSH
23174: LD_INT 2
23176: EQUAL
23177: AND
23178: PUSH
23179: LD_INT 1
23181: PPUSH
23182: LD_INT 2
23184: PPUSH
23185: CALL_OW 81
23189: PUSH
23190: LD_INT 1
23192: EQUAL
23193: AND
23194: IFFALSE 23215
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23196: LD_EXP 24
23200: PPUSH
23201: LD_STRING D6b-Pow-1
23203: PPUSH
23204: CALL_OW 94
// YouLost ( Powell ) ;
23208: LD_STRING Powell
23210: PPUSH
23211: CALL_OW 104
// end ; end ;
23215: PPOPN 2
23217: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23218: LD_INT 23
23220: PPUSH
23221: LD_INT 22
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: LD_INT 21
23233: PUSH
23234: LD_INT 3
23236: PUSH
23237: EMPTY
23238: LIST
23239: LIST
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PPUSH
23245: CALL_OW 70
23249: PUSH
23250: LD_INT 23
23252: PPUSH
23253: LD_INT 22
23255: PUSH
23256: LD_INT 1
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: LD_INT 21
23265: PUSH
23266: LD_INT 2
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 58
23275: PUSH
23276: EMPTY
23277: LIST
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: LIST
23283: PPUSH
23284: CALL_OW 70
23288: OR
23289: PUSH
23290: LD_INT 1
23292: PPUSH
23293: LD_INT 2
23295: PPUSH
23296: CALL_OW 81
23300: PUSH
23301: LD_INT 1
23303: EQUAL
23304: AND
23305: IFFALSE 23329
23307: GO 23309
23309: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23310: LD_EXP 24
23314: PPUSH
23315: LD_STRING D6b-Pow-1
23317: PPUSH
23318: CALL_OW 94
// YouLost ( Powell ) ;
23322: LD_STRING Powell
23324: PPUSH
23325: CALL_OW 104
// end ;
23329: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23330: LD_VAR 0 1
23334: PUSH
23335: LD_EXP 1
23339: EQUAL
23340: IFFALSE 23349
// YouLost ( JMM ) ;
23342: LD_STRING JMM
23344: PPUSH
23345: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23349: LD_VAR 0 1
23353: PPUSH
23354: CALL_OW 255
23358: PUSH
23359: LD_INT 3
23361: EQUAL
23362: PUSH
23363: LD_VAR 0 1
23367: PPUSH
23368: CALL_OW 247
23372: PUSH
23373: LD_INT 3
23375: EQUAL
23376: AND
23377: IFFALSE 24069
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 266
23388: PUSH
23389: LD_INT 31
23391: EQUAL
23392: PUSH
23393: LD_VAR 0 1
23397: PPUSH
23398: CALL_OW 266
23402: PUSH
23403: LD_INT 32
23405: EQUAL
23406: OR
23407: PUSH
23408: LD_VAR 0 1
23412: PPUSH
23413: CALL_OW 266
23417: PUSH
23418: LD_INT 36
23420: EQUAL
23421: OR
23422: PUSH
23423: LD_VAR 0 1
23427: PPUSH
23428: CALL_OW 266
23432: PUSH
23433: LD_INT 0
23435: EQUAL
23436: OR
23437: PUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 266
23447: PUSH
23448: LD_INT 24
23450: EQUAL
23451: OR
23452: PUSH
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 266
23462: PUSH
23463: LD_INT 17
23465: EQUAL
23466: OR
23467: PUSH
23468: LD_VAR 0 1
23472: PPUSH
23473: CALL_OW 266
23477: PUSH
23478: LD_INT 25
23480: EQUAL
23481: OR
23482: PUSH
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 266
23492: PUSH
23493: LD_INT 19
23495: EQUAL
23496: OR
23497: PUSH
23498: LD_VAR 0 1
23502: PPUSH
23503: CALL_OW 266
23507: PUSH
23508: LD_INT 20
23510: EQUAL
23511: OR
23512: PUSH
23513: LD_VAR 0 1
23517: PPUSH
23518: CALL_OW 266
23522: PUSH
23523: LD_INT 18
23525: EQUAL
23526: OR
23527: PUSH
23528: LD_VAR 0 1
23532: PPUSH
23533: CALL_OW 266
23537: PUSH
23538: LD_INT 21
23540: EQUAL
23541: OR
23542: PUSH
23543: LD_VAR 0 1
23547: PPUSH
23548: CALL_OW 266
23552: PUSH
23553: LD_INT 23
23555: EQUAL
23556: OR
23557: PUSH
23558: LD_VAR 0 1
23562: PPUSH
23563: CALL_OW 266
23567: PUSH
23568: LD_INT 16
23570: EQUAL
23571: OR
23572: PUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 266
23582: PUSH
23583: LD_INT 6
23585: EQUAL
23586: OR
23587: PUSH
23588: LD_VAR 0 1
23592: PPUSH
23593: CALL_OW 266
23597: PUSH
23598: LD_INT 29
23600: EQUAL
23601: OR
23602: PUSH
23603: LD_VAR 0 1
23607: PPUSH
23608: CALL_OW 266
23612: PUSH
23613: LD_INT 26
23615: EQUAL
23616: OR
23617: PUSH
23618: LD_VAR 0 1
23622: PPUSH
23623: CALL_OW 266
23627: PUSH
23628: LD_INT 30
23630: EQUAL
23631: OR
23632: PUSH
23633: LD_VAR 0 1
23637: PPUSH
23638: CALL_OW 266
23642: PUSH
23643: LD_INT 28
23645: EQUAL
23646: OR
23647: PUSH
23648: LD_VAR 0 1
23652: PPUSH
23653: CALL_OW 266
23657: PUSH
23658: LD_INT 27
23660: EQUAL
23661: OR
23662: PUSH
23663: LD_VAR 0 1
23667: PPUSH
23668: CALL_OW 266
23672: PUSH
23673: LD_INT 33
23675: EQUAL
23676: OR
23677: PUSH
23678: LD_VAR 0 1
23682: PPUSH
23683: CALL_OW 266
23687: PUSH
23688: LD_INT 2
23690: EQUAL
23691: OR
23692: PUSH
23693: LD_VAR 0 1
23697: PPUSH
23698: CALL_OW 266
23702: PUSH
23703: LD_INT 4
23705: EQUAL
23706: OR
23707: IFFALSE 23793
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
23709: LD_ADDR_EXP 42
23713: PUSH
23714: LD_EXP 42
23718: PUSH
23719: LD_VAR 0 1
23723: PPUSH
23724: CALL_OW 266
23728: ADD
23729: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23730: LD_ADDR_EXP 42
23734: PUSH
23735: LD_EXP 42
23739: PUSH
23740: LD_VAR 0 1
23744: PPUSH
23745: CALL_OW 250
23749: ADD
23750: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23751: LD_ADDR_EXP 42
23755: PUSH
23756: LD_EXP 42
23760: PUSH
23761: LD_VAR 0 1
23765: PPUSH
23766: CALL_OW 251
23770: ADD
23771: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23772: LD_ADDR_EXP 42
23776: PUSH
23777: LD_EXP 42
23781: PUSH
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 254
23791: ADD
23792: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 266
23802: PUSH
23803: LD_INT 1
23805: EQUAL
23806: IFFALSE 23885
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
23808: LD_ADDR_EXP 42
23812: PUSH
23813: LD_EXP 42
23817: PUSH
23818: LD_INT 0
23820: ADD
23821: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23822: LD_ADDR_EXP 42
23826: PUSH
23827: LD_EXP 42
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 250
23841: ADD
23842: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23843: LD_ADDR_EXP 42
23847: PUSH
23848: LD_EXP 42
23852: PUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 251
23862: ADD
23863: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23864: LD_ADDR_EXP 42
23868: PUSH
23869: LD_EXP 42
23873: PUSH
23874: LD_VAR 0 1
23878: PPUSH
23879: CALL_OW 254
23883: ADD
23884: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
23885: LD_VAR 0 1
23889: PPUSH
23890: CALL_OW 266
23894: PUSH
23895: LD_INT 3
23897: EQUAL
23898: IFFALSE 23977
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
23900: LD_ADDR_EXP 42
23904: PUSH
23905: LD_EXP 42
23909: PUSH
23910: LD_INT 2
23912: ADD
23913: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
23914: LD_ADDR_EXP 42
23918: PUSH
23919: LD_EXP 42
23923: PUSH
23924: LD_VAR 0 1
23928: PPUSH
23929: CALL_OW 250
23933: ADD
23934: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
23935: LD_ADDR_EXP 42
23939: PUSH
23940: LD_EXP 42
23944: PUSH
23945: LD_VAR 0 1
23949: PPUSH
23950: CALL_OW 251
23954: ADD
23955: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
23956: LD_ADDR_EXP 42
23960: PUSH
23961: LD_EXP 42
23965: PUSH
23966: LD_VAR 0 1
23970: PPUSH
23971: CALL_OW 254
23975: ADD
23976: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
23977: LD_VAR 0 1
23981: PPUSH
23982: CALL_OW 266
23986: PUSH
23987: LD_INT 5
23989: EQUAL
23990: IFFALSE 24069
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
23992: LD_ADDR_EXP 42
23996: PUSH
23997: LD_EXP 42
24001: PUSH
24002: LD_INT 4
24004: ADD
24005: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24006: LD_ADDR_EXP 42
24010: PUSH
24011: LD_EXP 42
24015: PUSH
24016: LD_VAR 0 1
24020: PPUSH
24021: CALL_OW 250
24025: ADD
24026: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24027: LD_ADDR_EXP 42
24031: PUSH
24032: LD_EXP 42
24036: PUSH
24037: LD_VAR 0 1
24041: PPUSH
24042: CALL_OW 251
24046: ADD
24047: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24048: LD_ADDR_EXP 42
24052: PUSH
24053: LD_EXP 42
24057: PUSH
24058: LD_VAR 0 1
24062: PPUSH
24063: CALL_OW 254
24067: ADD
24068: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24069: LD_VAR 0 1
24073: PPUSH
24074: CALL_OW 257
24078: PUSH
24079: LD_INT 3
24081: EQUAL
24082: PUSH
24083: LD_VAR 0 1
24087: PPUSH
24088: CALL_OW 255
24092: PUSH
24093: LD_INT 3
24095: EQUAL
24096: AND
24097: PUSH
24098: LD_EXP 35
24102: PPUSH
24103: CALL_OW 302
24107: AND
24108: PUSH
24109: LD_EXP 35
24113: PPUSH
24114: CALL_OW 255
24118: PUSH
24119: LD_INT 3
24121: EQUAL
24122: AND
24123: IFFALSE 24193
// begin uc_side = 3 ;
24125: LD_ADDR_OWVAR 20
24129: PUSH
24130: LD_INT 3
24132: ST_TO_ADDR
// uc_nation = 3 ;
24133: LD_ADDR_OWVAR 21
24137: PUSH
24138: LD_INT 3
24140: ST_TO_ADDR
// hc_gallery :=  ;
24141: LD_ADDR_OWVAR 33
24145: PUSH
24146: LD_STRING 
24148: ST_TO_ADDR
// hc_name :=  ;
24149: LD_ADDR_OWVAR 26
24153: PUSH
24154: LD_STRING 
24156: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24157: LD_INT 0
24159: PPUSH
24160: LD_EXP 36
24164: PPUSH
24165: LD_EXP 37
24169: PPUSH
24170: CALL_OW 12
24174: PPUSH
24175: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24179: CALL_OW 44
24183: PPUSH
24184: LD_EXP 35
24188: PPUSH
24189: CALL_OW 52
// end ; end ;
24193: PPOPN 1
24195: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24196: LD_ADDR_OWVAR 57
24200: PUSH
24201: LD_INT 0
24203: ST_TO_ADDR
// fastEnd = 1 ;
24204: LD_ADDR_EXP 59
24208: PUSH
24209: LD_INT 1
24211: ST_TO_ADDR
// FinishMission ;
24212: CALL 25474 0 0
// end ; end_of_file
24216: PPOPN 1
24218: END
// export function PrepareNature ; var i , un ; begin
24219: LD_INT 0
24221: PPUSH
24222: PPUSH
24223: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24224: LD_ADDR_VAR 0 2
24228: PUSH
24229: DOUBLE
24230: LD_INT 1
24232: DEC
24233: ST_TO_ADDR
24234: LD_OWVAR 67
24238: PUSH
24239: LD_INT 1
24241: PPUSH
24242: LD_INT 5
24244: PPUSH
24245: CALL_OW 12
24249: PLUS
24250: PUSH
24251: FOR_TO
24252: IFFALSE 24397
// begin hc_sex = sex_male ;
24254: LD_ADDR_OWVAR 27
24258: PUSH
24259: LD_INT 1
24261: ST_TO_ADDR
// uc_side = 0 ;
24262: LD_ADDR_OWVAR 20
24266: PUSH
24267: LD_INT 0
24269: ST_TO_ADDR
// uc_nation = nation_nature ;
24270: LD_ADDR_OWVAR 21
24274: PUSH
24275: LD_INT 0
24277: ST_TO_ADDR
// hc_class = class_apeman ;
24278: LD_ADDR_OWVAR 28
24282: PUSH
24283: LD_INT 12
24285: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24286: LD_ADDR_OWVAR 31
24290: PUSH
24291: LD_INT 2
24293: PPUSH
24294: LD_INT 7
24296: PPUSH
24297: CALL_OW 12
24301: PUSH
24302: LD_OWVAR 67
24306: PLUS
24307: PUSH
24308: LD_INT 2
24310: PPUSH
24311: LD_INT 10
24313: PPUSH
24314: CALL_OW 12
24318: PUSH
24319: LD_INT 2
24321: PPUSH
24322: LD_INT 10
24324: PPUSH
24325: CALL_OW 12
24329: PUSH
24330: LD_INT 2
24332: PPUSH
24333: LD_INT 10
24335: PPUSH
24336: CALL_OW 12
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: LIST
24345: LIST
24346: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24347: LD_ADDR_OWVAR 35
24351: PUSH
24352: LD_INT 5
24354: NEG
24355: PPUSH
24356: LD_INT 5
24358: PPUSH
24359: CALL_OW 12
24363: PUSH
24364: LD_OWVAR 67
24368: MUL
24369: ST_TO_ADDR
// un = CreateHuman ;
24370: LD_ADDR_VAR 0 3
24374: PUSH
24375: CALL_OW 44
24379: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24380: LD_VAR 0 3
24384: PPUSH
24385: LD_INT 5
24387: PPUSH
24388: LD_INT 0
24390: PPUSH
24391: CALL_OW 49
// end ;
24395: GO 24251
24397: POP
24398: POP
// for i = 1 to Difficulty + 2 do
24399: LD_ADDR_VAR 0 2
24403: PUSH
24404: DOUBLE
24405: LD_INT 1
24407: DEC
24408: ST_TO_ADDR
24409: LD_OWVAR 67
24413: PUSH
24414: LD_INT 2
24416: PLUS
24417: PUSH
24418: FOR_TO
24419: IFFALSE 24528
// begin hc_sex = sex_male ;
24421: LD_ADDR_OWVAR 27
24425: PUSH
24426: LD_INT 1
24428: ST_TO_ADDR
// uc_side = 0 ;
24429: LD_ADDR_OWVAR 20
24433: PUSH
24434: LD_INT 0
24436: ST_TO_ADDR
// uc_nation = nation_nature ;
24437: LD_ADDR_OWVAR 21
24441: PUSH
24442: LD_INT 0
24444: ST_TO_ADDR
// hc_class = class_tiger ;
24445: LD_ADDR_OWVAR 28
24449: PUSH
24450: LD_INT 14
24452: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24453: LD_ADDR_OWVAR 31
24457: PUSH
24458: LD_EXP 37
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 0
24468: PUSH
24469: LD_INT 0
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24478: LD_ADDR_OWVAR 35
24482: PUSH
24483: LD_INT 5
24485: NEG
24486: PPUSH
24487: LD_INT 5
24489: PPUSH
24490: CALL_OW 12
24494: PUSH
24495: LD_OWVAR 67
24499: MUL
24500: ST_TO_ADDR
// un = CreateHuman ;
24501: LD_ADDR_VAR 0 3
24505: PUSH
24506: CALL_OW 44
24510: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24511: LD_VAR 0 3
24515: PPUSH
24516: LD_INT 6
24518: PPUSH
24519: LD_INT 0
24521: PPUSH
24522: CALL_OW 49
// end ;
24526: GO 24418
24528: POP
24529: POP
// for i = 1 to rand ( 3 , 4 ) do
24530: LD_ADDR_VAR 0 2
24534: PUSH
24535: DOUBLE
24536: LD_INT 1
24538: DEC
24539: ST_TO_ADDR
24540: LD_INT 3
24542: PPUSH
24543: LD_INT 4
24545: PPUSH
24546: CALL_OW 12
24550: PUSH
24551: FOR_TO
24552: IFFALSE 24646
// begin hc_sex = sex_male ;
24554: LD_ADDR_OWVAR 27
24558: PUSH
24559: LD_INT 1
24561: ST_TO_ADDR
// uc_side = 0 ;
24562: LD_ADDR_OWVAR 20
24566: PUSH
24567: LD_INT 0
24569: ST_TO_ADDR
// uc_nation = nation_nature ;
24570: LD_ADDR_OWVAR 21
24574: PUSH
24575: LD_INT 0
24577: ST_TO_ADDR
// hc_class = 18 ;
24578: LD_ADDR_OWVAR 28
24582: PUSH
24583: LD_INT 18
24585: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24586: LD_ADDR_OWVAR 31
24590: PUSH
24591: LD_EXP 37
24595: PUSH
24596: LD_INT 0
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 0
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: ST_TO_ADDR
// hc_agressivity = 0 ;
24611: LD_ADDR_OWVAR 35
24615: PUSH
24616: LD_INT 0
24618: ST_TO_ADDR
// un = CreateHuman ;
24619: LD_ADDR_VAR 0 3
24623: PUSH
24624: CALL_OW 44
24628: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24629: LD_VAR 0 3
24633: PPUSH
24634: LD_INT 6
24636: PPUSH
24637: LD_INT 0
24639: PPUSH
24640: CALL_OW 49
// end ;
24644: GO 24551
24646: POP
24647: POP
// end ; end_of_file
24648: LD_VAR 0 1
24652: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
24653: LD_EXP 46
24657: PUSH
24658: LD_INT 1
24660: EQUAL
24661: IFFALSE 24745
24663: GO 24665
24665: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
24666: LD_INT 7
24668: PPUSH
24669: LD_INT 5
24671: PPUSH
24672: LD_INT 4
24674: PUSH
24675: LD_INT 5
24677: PUSH
24678: LD_INT 6
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: PUSH
24686: LD_OWVAR 67
24690: ARRAY
24691: PPUSH
24692: LD_EXP 36
24696: PPUSH
24697: LD_EXP 37
24701: PPUSH
24702: CALL_OW 12
24706: PPUSH
24707: LD_INT 2
24709: PPUSH
24710: LD_INT 1
24712: PPUSH
24713: LD_INT 1
24715: PPUSH
24716: EMPTY
24717: PPUSH
24718: LD_INT 25
24720: PUSH
24721: LD_INT 26
24723: PUSH
24724: LD_INT 27
24726: PUSH
24727: LD_INT 28
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: PPUSH
24736: EMPTY
24737: PPUSH
24738: LD_INT 1
24740: PPUSH
24741: CALL 15393 0 11
24745: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
24746: LD_EXP 46
24750: PUSH
24751: LD_INT 1
24753: EQUAL
24754: IFFALSE 24842
24756: GO 24758
24758: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
24759: LD_INT 5
24761: PPUSH
24762: LD_INT 2
24764: PPUSH
24765: LD_INT 7
24767: PUSH
24768: LD_INT 8
24770: PUSH
24771: LD_INT 10
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: PUSH
24779: LD_OWVAR 67
24783: ARRAY
24784: PPUSH
24785: LD_INT 0
24787: PPUSH
24788: LD_INT 0
24790: PPUSH
24791: LD_INT 2
24793: PUSH
24794: LD_INT 4
24796: PUSH
24797: LD_INT 5
24799: PUSH
24800: EMPTY
24801: LIST
24802: LIST
24803: LIST
24804: PUSH
24805: LD_OWVAR 67
24809: ARRAY
24810: PPUSH
24811: LD_INT 0
24813: PPUSH
24814: LD_EXP 36
24818: PPUSH
24819: LD_EXP 37
24823: PPUSH
24824: CALL_OW 12
24828: PPUSH
24829: LD_INT 7
24831: PPUSH
24832: LD_INT 9
24834: PPUSH
24835: LD_INT 1
24837: PPUSH
24838: CALL 17097 0 11
24842: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
24843: LD_EXP 46
24847: PUSH
24848: LD_INT 1
24850: EQUAL
24851: IFFALSE 24860
24853: GO 24855
24855: DISABLE
// PrepareArabianSheik ;
24856: CALL 3792 0 0
24860: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
24861: LD_EXP 29
24865: PUSH
24866: LD_EXP 60
24870: PUSH
24871: LD_INT 1
24873: EQUAL
24874: AND
24875: IFFALSE 24944
24877: GO 24879
24879: DISABLE
// begin enable ;
24880: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
24881: LD_INT 6
24883: PPUSH
24884: LD_INT 3
24886: PPUSH
24887: LD_EXP 57
24891: PPUSH
24892: LD_INT 0
24894: PPUSH
24895: LD_OWVAR 67
24899: PPUSH
24900: LD_INT 0
24902: PPUSH
24903: LD_EXP 57
24907: PUSH
24908: LD_INT 3
24910: DIV
24911: PUSH
24912: LD_INT 1
24914: PLUS
24915: PPUSH
24916: LD_EXP 36
24920: PPUSH
24921: LD_EXP 37
24925: PPUSH
24926: CALL_OW 12
24930: PPUSH
24931: LD_INT 17
24933: PPUSH
24934: LD_INT 18
24936: PPUSH
24937: LD_INT 1
24939: PPUSH
24940: CALL 17097 0 11
// end ;
24944: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
24945: LD_EXP 29
24949: PUSH
24950: LD_EXP 60
24954: PUSH
24955: LD_INT 1
24957: EQUAL
24958: AND
24959: IFFALSE 25036
24961: GO 24963
24963: DISABLE
// begin enable ;
24964: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
24965: LD_INT 17
24967: PPUSH
24968: LD_INT 6
24970: PPUSH
24971: LD_EXP 56
24975: PPUSH
24976: LD_EXP 36
24980: PPUSH
24981: LD_EXP 37
24985: PPUSH
24986: CALL_OW 12
24990: PPUSH
24991: LD_INT 3
24993: PPUSH
24994: LD_INT 1
24996: PPUSH
24997: LD_INT 1
24999: PUSH
25000: LD_INT 3
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PPUSH
25007: LD_INT 43
25009: PUSH
25010: LD_INT 44
25012: PUSH
25013: LD_INT 45
25015: PUSH
25016: LD_INT 46
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: LIST
25023: LIST
25024: PPUSH
25025: EMPTY
25026: PPUSH
25027: EMPTY
25028: PPUSH
25029: LD_INT 1
25031: PPUSH
25032: CALL 15393 0 11
// end ;
25036: END
// every 10 10$00 trigger joinEpsilon do
25037: LD_EXP 29
25041: IFFALSE 25095
25043: GO 25045
25045: DISABLE
// begin enable ;
25046: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25047: LD_ADDR_EXP 56
25051: PUSH
25052: LD_EXP 56
25056: PUSH
25057: LD_INT 1
25059: PPUSH
25060: LD_OWVAR 67
25064: PPUSH
25065: CALL_OW 12
25069: PLUS
25070: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25071: LD_ADDR_EXP 57
25075: PUSH
25076: LD_EXP 57
25080: PUSH
25081: LD_INT 1
25083: PPUSH
25084: LD_OWVAR 67
25088: PPUSH
25089: CALL_OW 12
25093: PLUS
25094: ST_TO_ADDR
// end ;
25095: END
// every 21 21$0 trigger attackAvalaible = 1 do
25096: LD_EXP 60
25100: PUSH
25101: LD_INT 1
25103: EQUAL
25104: IFFALSE 25117
25106: GO 25108
25108: DISABLE
// attackAvalaible = 0 ; end_of_file
25109: LD_ADDR_EXP 60
25113: PUSH
25114: LD_INT 0
25116: ST_TO_ADDR
25117: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25118: LD_INT 54
25120: PPUSH
25121: LD_INT 1
25123: PPUSH
25124: CALL_OW 321
25128: PUSH
25129: LD_INT 2
25131: EQUAL
25132: PUSH
25133: LD_INT 55
25135: PPUSH
25136: LD_INT 1
25138: PPUSH
25139: CALL_OW 321
25143: PUSH
25144: LD_INT 2
25146: EQUAL
25147: AND
25148: PUSH
25149: LD_INT 21
25151: PPUSH
25152: LD_INT 1
25154: PPUSH
25155: CALL_OW 321
25159: PUSH
25160: LD_INT 2
25162: EQUAL
25163: AND
25164: PUSH
25165: LD_INT 22
25167: PPUSH
25168: LD_INT 1
25170: PPUSH
25171: CALL_OW 321
25175: PUSH
25176: LD_INT 2
25178: EQUAL
25179: AND
25180: PUSH
25181: LD_INT 12
25183: PPUSH
25184: LD_INT 1
25186: PPUSH
25187: CALL_OW 321
25191: PUSH
25192: LD_INT 1
25194: EQUAL
25195: PUSH
25196: LD_INT 32
25198: PPUSH
25199: LD_INT 1
25201: PPUSH
25202: CALL_OW 321
25206: PUSH
25207: LD_INT 1
25209: EQUAL
25210: OR
25211: PUSH
25212: EMPTY
25213: LIST
25214: AND
25215: PUSH
25216: LD_EXP 48
25220: PUSH
25221: LD_INT 1
25223: EQUAL
25224: AND
25225: PUSH
25226: LD_INT 22
25228: PUSH
25229: LD_INT 3
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 21
25238: PUSH
25239: LD_INT 1
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: CALL_OW 69
25254: PUSH
25255: LD_INT 0
25257: EQUAL
25258: AND
25259: IFFALSE 25315
25261: GO 25263
25263: DISABLE
// begin case query ( QEndMission ) of 1 :
25264: LD_STRING QEndMission
25266: PPUSH
25267: CALL_OW 97
25271: PUSH
25272: LD_INT 1
25274: DOUBLE
25275: EQUAL
25276: IFTRUE 25280
25278: GO 25291
25280: POP
// begin end_the_mission_allowed = true ;
25281: LD_ADDR_OWVAR 57
25285: PUSH
25286: LD_INT 1
25288: ST_TO_ADDR
// end ; 2 :
25289: GO 25315
25291: LD_INT 2
25293: DOUBLE
25294: EQUAL
25295: IFTRUE 25299
25297: GO 25314
25299: POP
// begin fastEnd = 1 ;
25300: LD_ADDR_EXP 59
25304: PUSH
25305: LD_INT 1
25307: ST_TO_ADDR
// FinishMission ;
25308: CALL 25474 0 0
// end ; end ;
25312: GO 25315
25314: POP
// end ;
25315: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25316: LD_INT 54
25318: PPUSH
25319: LD_INT 1
25321: PPUSH
25322: CALL_OW 321
25326: PUSH
25327: LD_INT 2
25329: EQUAL
25330: PUSH
25331: LD_INT 55
25333: PPUSH
25334: LD_INT 1
25336: PPUSH
25337: CALL_OW 321
25341: PUSH
25342: LD_INT 2
25344: EQUAL
25345: AND
25346: PUSH
25347: LD_INT 21
25349: PPUSH
25350: LD_INT 1
25352: PPUSH
25353: CALL_OW 321
25357: PUSH
25358: LD_INT 2
25360: EQUAL
25361: AND
25362: PUSH
25363: LD_INT 22
25365: PPUSH
25366: LD_INT 1
25368: PPUSH
25369: CALL_OW 321
25373: PUSH
25374: LD_INT 2
25376: EQUAL
25377: AND
25378: PUSH
25379: LD_INT 12
25381: PPUSH
25382: LD_INT 1
25384: PPUSH
25385: CALL_OW 321
25389: PUSH
25390: LD_INT 2
25392: EQUAL
25393: AND
25394: PUSH
25395: LD_INT 32
25397: PPUSH
25398: LD_INT 1
25400: PPUSH
25401: CALL_OW 321
25405: PUSH
25406: LD_INT 2
25408: EQUAL
25409: AND
25410: PUSH
25411: LD_EXP 59
25415: PUSH
25416: LD_INT 0
25418: EQUAL
25419: AND
25420: PUSH
25421: LD_EXP 48
25425: PUSH
25426: LD_INT 1
25428: EQUAL
25429: AND
25430: PUSH
25431: LD_INT 22
25433: PUSH
25434: LD_INT 3
25436: PUSH
25437: EMPTY
25438: LIST
25439: LIST
25440: PUSH
25441: LD_INT 21
25443: PUSH
25444: LD_INT 1
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PPUSH
25455: CALL_OW 69
25459: PUSH
25460: LD_INT 0
25462: EQUAL
25463: AND
25464: IFFALSE 25473
25466: GO 25468
25468: DISABLE
// FinishMission ;
25469: CALL 25474 0 0
25473: END
// export function FinishMission ; begin
25474: LD_INT 0
25476: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25477: LD_EXP 52
25481: PPUSH
25482: LD_STRING 10_KhatamStatus_1
25484: PPUSH
25485: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25489: LD_EXP 51
25493: PPUSH
25494: LD_STRING 10_GensherEscape_1
25496: PPUSH
25497: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25501: LD_INT 12
25503: PPUSH
25504: LD_INT 1
25506: PPUSH
25507: CALL_OW 321
25511: PUSH
25512: LD_INT 2
25514: EQUAL
25515: IFFALSE 25529
// begin AddMedal ( sights , 1 ) ;
25517: LD_STRING sights
25519: PPUSH
25520: LD_INT 1
25522: PPUSH
25523: CALL_OW 101
// end else
25527: GO 25540
// begin AddMedal ( sights , - 1 ) ;
25529: LD_STRING sights
25531: PPUSH
25532: LD_INT 1
25534: NEG
25535: PPUSH
25536: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25540: LD_INT 32
25542: PPUSH
25543: LD_INT 1
25545: PPUSH
25546: CALL_OW 321
25550: PUSH
25551: LD_INT 2
25553: EQUAL
25554: IFFALSE 25568
// begin AddMedal ( computers , 1 ) ;
25556: LD_STRING computers
25558: PPUSH
25559: LD_INT 1
25561: PPUSH
25562: CALL_OW 101
// end else
25566: GO 25579
// begin AddMedal ( computers , - 1 ) ;
25568: LD_STRING computers
25570: PPUSH
25571: LD_INT 1
25573: NEG
25574: PPUSH
25575: CALL_OW 101
// end ; if arabianEscape = 0 then
25579: LD_EXP 47
25583: PUSH
25584: LD_INT 0
25586: EQUAL
25587: IFFALSE 25611
// begin AddMedal ( renegades , 2 ) ;
25589: LD_STRING renegades
25591: PPUSH
25592: LD_INT 2
25594: PPUSH
25595: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
25599: LD_INT 0
25601: PPUSH
25602: LD_STRING 10_ScientistsEscape_1
25604: PPUSH
25605: CALL_OW 39
// end else
25609: GO 25622
// begin AddMedal ( renegades , - 1 ) ;
25611: LD_STRING renegades
25613: PPUSH
25614: LD_INT 1
25616: NEG
25617: PPUSH
25618: CALL_OW 101
// end ; SaveEpsilonBase ;
25622: CALL 26341 0 0
// Query ( kaj ) ;
25626: LD_STRING kaj
25628: PPUSH
25629: CALL_OW 97
// GiveMedals ( Main ) ;
25633: LD_STRING Main
25635: PPUSH
25636: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
25640: LD_INT 22
25642: PUSH
25643: LD_INT 1
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: PUSH
25650: LD_INT 23
25652: PUSH
25653: LD_INT 1
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 21
25662: PUSH
25663: LD_INT 1
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: PUSH
25673: LD_INT 25
25675: PUSH
25676: LD_INT 1
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PUSH
25683: LD_INT 25
25685: PUSH
25686: LD_INT 2
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 25
25695: PUSH
25696: LD_INT 3
25698: PUSH
25699: EMPTY
25700: LIST
25701: LIST
25702: PUSH
25703: LD_INT 25
25705: PUSH
25706: LD_INT 4
25708: PUSH
25709: EMPTY
25710: LIST
25711: LIST
25712: PUSH
25713: LD_INT 25
25715: PUSH
25716: LD_INT 5
25718: PUSH
25719: EMPTY
25720: LIST
25721: LIST
25722: PUSH
25723: LD_INT 25
25725: PUSH
25726: LD_INT 8
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: LIST
25746: LIST
25747: PPUSH
25748: CALL_OW 69
25752: PPUSH
25753: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
25757: LD_EXP 1
25761: PPUSH
25762: LD_EXP 53
25766: PUSH
25767: LD_STRING JMM
25769: STR
25770: PPUSH
25771: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
25775: LD_EXP 2
25779: PPUSH
25780: LD_EXP 53
25784: PUSH
25785: LD_STRING Brown
25787: STR
25788: PPUSH
25789: CALL 9688 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
25793: LD_EXP 3
25797: PPUSH
25798: LD_EXP 53
25802: PUSH
25803: LD_STRING Donaldson
25805: STR
25806: PPUSH
25807: CALL 9688 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
25811: LD_EXP 4
25815: PPUSH
25816: LD_EXP 53
25820: PUSH
25821: LD_STRING Bobby
25823: STR
25824: PPUSH
25825: CALL 9688 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
25829: LD_EXP 5
25833: PPUSH
25834: LD_EXP 53
25838: PUSH
25839: LD_STRING Cyrus
25841: STR
25842: PPUSH
25843: CALL 9688 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
25847: LD_EXP 6
25851: PPUSH
25852: LD_EXP 53
25856: PUSH
25857: LD_STRING Lisa
25859: STR
25860: PPUSH
25861: CALL 9688 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
25865: LD_EXP 7
25869: PPUSH
25870: LD_EXP 53
25874: PUSH
25875: LD_STRING Frank
25877: STR
25878: PPUSH
25879: CALL 9688 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
25883: LD_EXP 8
25887: PPUSH
25888: LD_EXP 53
25892: PUSH
25893: LD_STRING Kikuchi
25895: STR
25896: PPUSH
25897: CALL 9688 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
25901: LD_EXP 9
25905: PPUSH
25906: LD_EXP 53
25910: PUSH
25911: LD_STRING Houten
25913: STR
25914: PPUSH
25915: CALL 9688 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
25919: LD_EXP 10
25923: PPUSH
25924: LD_EXP 53
25928: PUSH
25929: LD_STRING Gary
25931: STR
25932: PPUSH
25933: CALL 9688 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
25937: LD_EXP 19
25941: PPUSH
25942: LD_EXP 53
25946: PUSH
25947: LD_STRING Cornell
25949: STR
25950: PPUSH
25951: CALL 9688 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
25955: LD_EXP 11
25959: PPUSH
25960: LD_EXP 53
25964: PUSH
25965: LD_STRING Simms
25967: STR
25968: PPUSH
25969: CALL 9688 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
25973: LD_EXP 12
25977: PPUSH
25978: LD_EXP 53
25982: PUSH
25983: LD_STRING Denis
25985: STR
25986: PPUSH
25987: CALL 9688 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
25991: LD_EXP 13
25995: PPUSH
25996: LD_EXP 53
26000: PUSH
26001: LD_STRING Joan
26003: STR
26004: PPUSH
26005: CALL 9688 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26009: LD_EXP 15
26013: PPUSH
26014: LD_EXP 53
26018: PUSH
26019: LD_STRING Gladstone
26021: STR
26022: PPUSH
26023: CALL 9688 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26027: LD_EXP 17
26031: PPUSH
26032: LD_EXP 53
26036: PUSH
26037: LD_STRING DeltaDoctor
26039: STR
26040: PPUSH
26041: CALL 9688 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26045: LD_INT 50
26047: PUSH
26048: EMPTY
26049: LIST
26050: PUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 21
26063: PUSH
26064: LD_INT 1
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: LD_INT 2
26073: PUSH
26074: LD_INT 25
26076: PUSH
26077: LD_INT 1
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PUSH
26084: LD_INT 25
26086: PUSH
26087: LD_INT 2
26089: PUSH
26090: EMPTY
26091: LIST
26092: LIST
26093: PUSH
26094: LD_INT 25
26096: PUSH
26097: LD_INT 3
26099: PUSH
26100: EMPTY
26101: LIST
26102: LIST
26103: PUSH
26104: LD_INT 25
26106: PUSH
26107: LD_INT 4
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 25
26116: PUSH
26117: LD_INT 5
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: LD_INT 25
26126: PUSH
26127: LD_INT 8
26129: PUSH
26130: EMPTY
26131: LIST
26132: LIST
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: PPUSH
26149: CALL_OW 69
26153: PUSH
26154: LD_EXP 1
26158: PUSH
26159: LD_EXP 2
26163: PUSH
26164: LD_EXP 3
26168: PUSH
26169: LD_EXP 4
26173: PUSH
26174: LD_EXP 5
26178: PUSH
26179: LD_EXP 6
26183: PUSH
26184: LD_EXP 7
26188: PUSH
26189: LD_EXP 15
26193: PUSH
26194: LD_EXP 8
26198: PUSH
26199: LD_EXP 12
26203: PUSH
26204: LD_EXP 13
26208: PUSH
26209: LD_EXP 9
26213: PUSH
26214: LD_EXP 11
26218: PUSH
26219: LD_EXP 10
26223: PUSH
26224: LD_EXP 17
26228: PUSH
26229: LD_EXP 19
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: LIST
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: DIFF
26252: PPUSH
26253: LD_STRING 10_other_survivors
26255: PPUSH
26256: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26260: LD_INT 50
26262: PUSH
26263: EMPTY
26264: LIST
26265: PUSH
26266: LD_INT 22
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: LD_INT 21
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 2
26288: PUSH
26289: LD_INT 25
26291: PUSH
26292: LD_INT 16
26294: PUSH
26295: EMPTY
26296: LIST
26297: LIST
26298: PUSH
26299: LD_INT 25
26301: PUSH
26302: LD_INT 12
26304: PUSH
26305: EMPTY
26306: LIST
26307: LIST
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: LIST
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: PPUSH
26320: CALL_OW 69
26324: PPUSH
26325: LD_STRING 10_ape
26327: PPUSH
26328: CALL_OW 38
// YouWin ;
26332: CALL_OW 103
// end ;
26336: LD_VAR 0 1
26340: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
26345: PPUSH
26346: PPUSH
// epsilonBase = [ ] ;
26347: LD_ADDR_VAR 0 2
26351: PUSH
26352: EMPTY
26353: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26354: LD_ADDR_VAR 0 3
26358: PUSH
26359: LD_INT 22
26361: PUSH
26362: LD_INT 1
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 50
26381: PUSH
26382: EMPTY
26383: LIST
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: LIST
26389: PPUSH
26390: CALL_OW 69
26394: ST_TO_ADDR
// for i in buildings do
26395: LD_ADDR_VAR 0 4
26399: PUSH
26400: LD_VAR 0 3
26404: PUSH
26405: FOR_IN
26406: IFFALSE 26843
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26408: LD_VAR 0 4
26412: PPUSH
26413: CALL_OW 266
26417: PUSH
26418: LD_INT 6
26420: PUSH
26421: LD_INT 7
26423: PUSH
26424: LD_INT 8
26426: PUSH
26427: EMPTY
26428: LIST
26429: LIST
26430: LIST
26431: IN
26432: IFFALSE 26546
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26434: LD_ADDR_VAR 0 2
26438: PUSH
26439: LD_VAR 0 2
26443: PUSH
26444: LD_VAR 0 4
26448: PPUSH
26449: CALL_OW 266
26453: PUSH
26454: LD_VAR 0 4
26458: PPUSH
26459: CALL_OW 250
26463: PUSH
26464: LD_VAR 0 4
26468: PPUSH
26469: CALL_OW 251
26473: PUSH
26474: LD_VAR 0 4
26478: PPUSH
26479: CALL_OW 254
26483: PUSH
26484: LD_VAR 0 4
26488: PPUSH
26489: CALL_OW 267
26493: PUSH
26494: LD_VAR 0 4
26498: PPUSH
26499: CALL_OW 248
26503: PUSH
26504: LD_VAR 0 4
26508: PPUSH
26509: LD_INT 1
26511: PPUSH
26512: CALL_OW 268
26516: PUSH
26517: LD_VAR 0 4
26521: PPUSH
26522: LD_INT 2
26524: PPUSH
26525: CALL_OW 268
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: LIST
26536: LIST
26537: LIST
26538: LIST
26539: PUSH
26540: EMPTY
26541: LIST
26542: ADD
26543: ST_TO_ADDR
26544: GO 26841
// if GetBType ( i ) = b_bunker then
26546: LD_VAR 0 4
26550: PPUSH
26551: CALL_OW 266
26555: PUSH
26556: LD_INT 32
26558: EQUAL
26559: IFFALSE 26656
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26561: LD_ADDR_VAR 0 2
26565: PUSH
26566: LD_VAR 0 2
26570: PUSH
26571: LD_VAR 0 4
26575: PPUSH
26576: CALL_OW 266
26580: PUSH
26581: LD_VAR 0 4
26585: PPUSH
26586: CALL_OW 250
26590: PUSH
26591: LD_VAR 0 4
26595: PPUSH
26596: CALL_OW 251
26600: PUSH
26601: LD_VAR 0 4
26605: PPUSH
26606: CALL_OW 254
26610: PUSH
26611: LD_VAR 0 4
26615: PPUSH
26616: CALL_OW 267
26620: PUSH
26621: LD_VAR 0 4
26625: PPUSH
26626: CALL_OW 248
26630: PUSH
26631: LD_VAR 0 4
26635: PPUSH
26636: CALL_OW 269
26640: PUSH
26641: EMPTY
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: PUSH
26650: EMPTY
26651: LIST
26652: ADD
26653: ST_TO_ADDR
26654: GO 26841
// if GetBType ( i ) = b_factory then
26656: LD_VAR 0 4
26660: PPUSH
26661: CALL_OW 266
26665: PUSH
26666: LD_INT 3
26668: EQUAL
26669: IFFALSE 26759
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
26671: LD_ADDR_VAR 0 2
26675: PUSH
26676: LD_VAR 0 2
26680: PPUSH
26681: LD_INT 1
26683: PPUSH
26684: LD_VAR 0 4
26688: PPUSH
26689: CALL_OW 266
26693: PUSH
26694: LD_VAR 0 4
26698: PPUSH
26699: CALL_OW 250
26703: PUSH
26704: LD_VAR 0 4
26708: PPUSH
26709: CALL_OW 251
26713: PUSH
26714: LD_VAR 0 4
26718: PPUSH
26719: CALL_OW 254
26723: PUSH
26724: LD_VAR 0 4
26728: PPUSH
26729: CALL_OW 267
26733: PUSH
26734: LD_VAR 0 4
26738: PPUSH
26739: CALL_OW 248
26743: PUSH
26744: EMPTY
26745: LIST
26746: LIST
26747: LIST
26748: LIST
26749: LIST
26750: LIST
26751: PPUSH
26752: CALL_OW 2
26756: ST_TO_ADDR
26757: GO 26841
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
26759: LD_ADDR_VAR 0 2
26763: PUSH
26764: LD_VAR 0 2
26768: PUSH
26769: LD_VAR 0 4
26773: PPUSH
26774: CALL_OW 266
26778: PUSH
26779: LD_VAR 0 4
26783: PPUSH
26784: CALL_OW 250
26788: PUSH
26789: LD_VAR 0 4
26793: PPUSH
26794: CALL_OW 251
26798: PUSH
26799: LD_VAR 0 4
26803: PPUSH
26804: CALL_OW 254
26808: PUSH
26809: LD_VAR 0 4
26813: PPUSH
26814: CALL_OW 267
26818: PUSH
26819: LD_VAR 0 4
26823: PPUSH
26824: CALL_OW 248
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: PUSH
26837: EMPTY
26838: LIST
26839: ADD
26840: ST_TO_ADDR
// end ;
26841: GO 26405
26843: POP
26844: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
26845: LD_VAR 0 2
26849: PPUSH
26850: LD_STRING 10_EpsilonBase
26852: PPUSH
26853: CALL_OW 39
// end ; end_of_file
26857: LD_VAR 0 1
26861: RET
// every 0 0$30 do
26862: GO 26864
26864: DISABLE
// begin enable ;
26865: ENABLE
// if cratesSpawned < 6 then
26866: LD_EXP 55
26870: PUSH
26871: LD_INT 6
26873: LESS
26874: IFFALSE 26911
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26876: LD_INT 3
26878: PPUSH
26879: LD_INT 5
26881: PPUSH
26882: CALL_OW 12
26886: PPUSH
26887: LD_INT 16
26889: PPUSH
26890: LD_INT 1
26892: PPUSH
26893: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26897: LD_ADDR_EXP 55
26901: PUSH
26902: LD_EXP 55
26906: PUSH
26907: LD_INT 1
26909: PLUS
26910: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
26911: LD_EXP 55
26915: PUSH
26916: LD_INT 6
26918: GREATEREQUAL
26919: PUSH
26920: LD_EXP 55
26924: PUSH
26925: LD_INT 12
26927: LESS
26928: AND
26929: IFFALSE 26973
// begin wait ( 0 0$30 ) ;
26931: LD_INT 1050
26933: PPUSH
26934: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26938: LD_INT 3
26940: PPUSH
26941: LD_INT 5
26943: PPUSH
26944: CALL_OW 12
26948: PPUSH
26949: LD_INT 16
26951: PPUSH
26952: LD_INT 1
26954: PPUSH
26955: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
26959: LD_ADDR_EXP 55
26963: PUSH
26964: LD_EXP 55
26968: PUSH
26969: LD_INT 1
26971: PLUS
26972: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
26973: LD_EXP 55
26977: PUSH
26978: LD_INT 12
26980: GREATEREQUAL
26981: IFFALSE 27025
// begin wait ( 1 1$30 ) ;
26983: LD_INT 3150
26985: PPUSH
26986: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
26990: LD_INT 3
26992: PPUSH
26993: LD_INT 5
26995: PPUSH
26996: CALL_OW 12
27000: PPUSH
27001: LD_INT 16
27003: PPUSH
27004: LD_INT 1
27006: PPUSH
27007: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27011: LD_ADDR_EXP 55
27015: PUSH
27016: LD_EXP 55
27020: PUSH
27021: LD_INT 1
27023: PLUS
27024: ST_TO_ADDR
// end ; end ;
27025: END
