// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export others08 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 26
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 27
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 36
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 37
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 38
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// ruPossition = 0 ;
  47: LD_ADDR_EXP 39
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  55: LD_ADDR_EXP 40
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// arabianEscape = 0 ;
  62: LD_ADDR_EXP 45
  66: PUSH
  67: LD_INT 0
  69: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  70: LD_ADDR_EXP 44
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// eventVar1 = 0 ;
  78: LD_ADDR_EXP 50
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// eventVar2 = 0 ;
  86: LD_ADDR_EXP 51
  90: PUSH
  91: LD_INT 0
  93: ST_TO_ADDR
// KhatamStatus = 0 ;
  94: LD_ADDR_EXP 46
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// cratesSpawned = 0 ;
 102: LD_ADDR_EXP 49
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// mission_prefix := 10_ ;
 110: LD_ADDR_EXP 47
 114: PUSH
 115: LD_STRING 10_
 117: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 118: LD_ADDR_EXP 48
 122: PUSH
 123: LD_STRING 09_
 125: ST_TO_ADDR
// debugMode = 1 ;
 126: LD_ADDR_EXP 52
 130: PUSH
 131: LD_INT 1
 133: ST_TO_ADDR
// PrepareDifficulty ;
 134: CALL 7282 0 0
// PrepareVehicles ;
 138: CALL 1267 0 0
// PrepareJMMTeam ;
 142: CALL 492 0 0
// PrepareCathyTeam ;
 146: CALL 1690 0 0
// PrepareArabianCommander ;
 150: CALL 3053 0 0
// PrepareArabian ;
 154: CALL 3105 0 0
// BuildArabianBase ;
 158: CALL 9880 0 0
// PrepareNature ;
 162: CALL 19463 0 0
// TameApemans ;
 166: CALL 14753 0 0
// SaveForQuickRestart ;
 170: CALL_OW 22
// end ;
 174: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 175: LD_EXP 52
 179: PUSH
 180: LD_INT 1
 182: EQUAL
 183: IFFALSE 489
 185: GO 187
 187: DISABLE
 188: LD_INT 0
 190: PPUSH
// begin enable ;
 191: ENABLE
// fogoff ( true ) ;
 192: LD_INT 1
 194: PPUSH
 195: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 199: LD_ADDR_VAR 0 1
 203: PUSH
 204: LD_INT 22
 206: PUSH
 207: LD_INT 1
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: PUSH
 214: LD_INT 21
 216: PUSH
 217: LD_INT 1
 219: PUSH
 220: EMPTY
 221: LIST
 222: LIST
 223: PUSH
 224: EMPTY
 225: LIST
 226: LIST
 227: PPUSH
 228: CALL_OW 69
 232: PUSH
 233: FOR_IN
 234: IFFALSE 250
// SetLives ( i , 1000 ) ;
 236: LD_VAR 0 1
 240: PPUSH
 241: LD_INT 1000
 243: PPUSH
 244: CALL_OW 234
 248: GO 233
 250: POP
 251: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 252: LD_ADDR_VAR 0 1
 256: PUSH
 257: LD_INT 22
 259: PUSH
 260: LD_INT 1
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: PUSH
 267: LD_INT 2
 269: PUSH
 270: LD_INT 30
 272: PUSH
 273: LD_INT 0
 275: PUSH
 276: EMPTY
 277: LIST
 278: LIST
 279: PUSH
 280: LD_INT 30
 282: PUSH
 283: LD_INT 1
 285: PUSH
 286: EMPTY
 287: LIST
 288: LIST
 289: PUSH
 290: EMPTY
 291: LIST
 292: LIST
 293: LIST
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PPUSH
 299: CALL_OW 69
 303: PUSH
 304: FOR_IN
 305: IFFALSE 329
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 307: LD_VAR 0 1
 311: PPUSH
 312: CALL_OW 274
 316: PPUSH
 317: LD_INT 1
 319: PPUSH
 320: LD_INT 9999
 322: PPUSH
 323: CALL_OW 277
 327: GO 304
 329: POP
 330: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 331: LD_ADDR_VAR 0 1
 335: PUSH
 336: LD_INT 22
 338: PUSH
 339: LD_INT 1
 341: PUSH
 342: EMPTY
 343: LIST
 344: LIST
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: LD_INT 30
 351: PUSH
 352: LD_INT 0
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: PUSH
 359: LD_INT 30
 361: PUSH
 362: LD_INT 1
 364: PUSH
 365: EMPTY
 366: LIST
 367: LIST
 368: PUSH
 369: EMPTY
 370: LIST
 371: LIST
 372: LIST
 373: PUSH
 374: EMPTY
 375: LIST
 376: LIST
 377: PPUSH
 378: CALL_OW 69
 382: PUSH
 383: FOR_IN
 384: IFFALSE 408
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 386: LD_VAR 0 1
 390: PPUSH
 391: CALL_OW 274
 395: PPUSH
 396: LD_INT 2
 398: PPUSH
 399: LD_INT 9999
 401: PPUSH
 402: CALL_OW 277
 406: GO 383
 408: POP
 409: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 410: LD_ADDR_VAR 0 1
 414: PUSH
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 2
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 0
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: LD_INT 30
 440: PUSH
 441: LD_INT 1
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PPUSH
 457: CALL_OW 69
 461: PUSH
 462: FOR_IN
 463: IFFALSE 487
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 465: LD_VAR 0 1
 469: PPUSH
 470: CALL_OW 274
 474: PPUSH
 475: LD_INT 3
 477: PPUSH
 478: LD_INT 9999
 480: PPUSH
 481: CALL_OW 277
 485: GO 462
 487: POP
 488: POP
// end ; end_of_file
 489: PPOPN 1
 491: END
// export function PrepareJMMTeam ; var i , j ; begin
 492: LD_INT 0
 494: PPUSH
 495: PPUSH
 496: PPUSH
// uc_side = 1 ;
 497: LD_ADDR_OWVAR 20
 501: PUSH
 502: LD_INT 1
 504: ST_TO_ADDR
// uc_nation = 1 ;
 505: LD_ADDR_OWVAR 21
 509: PUSH
 510: LD_INT 1
 512: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 513: LD_ADDR_EXP 1
 517: PUSH
 518: LD_STRING 10_JMM
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: CALL 7018 0 2
 528: ST_TO_ADDR
// Gary = PrepareUnit ( mission_prefix_prev & Gary , true ) ;
 529: LD_ADDR_EXP 10
 533: PUSH
 534: LD_EXP 48
 538: PUSH
 539: LD_STRING Gary
 541: STR
 542: PPUSH
 543: LD_INT 1
 545: PPUSH
 546: CALL 7018 0 2
 550: ST_TO_ADDR
// Cyrus = PrepareUnit ( mission_prefix_prev & Cyrus , true ) ;
 551: LD_ADDR_EXP 5
 555: PUSH
 556: LD_EXP 48
 560: PUSH
 561: LD_STRING Cyrus
 563: STR
 564: PPUSH
 565: LD_INT 1
 567: PPUSH
 568: CALL 7018 0 2
 572: ST_TO_ADDR
// Bobby = PrepareUnit ( mission_prefix_prev & Bobby , true ) ;
 573: LD_ADDR_EXP 4
 577: PUSH
 578: LD_EXP 48
 582: PUSH
 583: LD_STRING Bobby
 585: STR
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 7018 0 2
 594: ST_TO_ADDR
// Lisa = PrepareUnit ( 08_Lisa , true ) ;
 595: LD_ADDR_EXP 6
 599: PUSH
 600: LD_STRING 08_Lisa
 602: PPUSH
 603: LD_INT 1
 605: PPUSH
 606: CALL 7018 0 2
 610: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) then
 611: LD_STRING 08_Frank
 613: PPUSH
 614: CALL_OW 28
 618: IFFALSE 636
// Kikuchi = PrepareUnit ( 10_Kikuchi , true ) ;
 620: LD_ADDR_EXP 8
 624: PUSH
 625: LD_STRING 10_Kikuchi
 627: PPUSH
 628: LD_INT 1
 630: PPUSH
 631: CALL 7018 0 2
 635: ST_TO_ADDR
// others08 = CreateCharacterSet ( 08_other_survivors ) ;
 636: LD_ADDR_EXP 20
 640: PUSH
 641: LD_STRING 08_other_survivors
 643: PPUSH
 644: CALL_OW 31
 648: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 649: LD_ADDR_EXP 23
 653: PUSH
 654: LD_STRING Powell
 656: PPUSH
 657: LD_INT 0
 659: PPUSH
 660: CALL 7018 0 2
 664: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 665: LD_EXP 1
 669: PPUSH
 670: LD_EXP 26
 674: PUSH
 675: LD_INT 1
 677: ARRAY
 678: PPUSH
 679: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 683: LD_EXP 10
 687: PPUSH
 688: LD_EXP 26
 692: PUSH
 693: LD_INT 2
 695: ARRAY
 696: PPUSH
 697: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 701: LD_EXP 5
 705: PPUSH
 706: LD_EXP 26
 710: PUSH
 711: LD_INT 3
 713: ARRAY
 714: PPUSH
 715: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 719: LD_EXP 4
 723: PPUSH
 724: LD_EXP 26
 728: PUSH
 729: LD_INT 4
 731: ARRAY
 732: PPUSH
 733: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 737: LD_EXP 6
 741: PPUSH
 742: LD_EXP 26
 746: PUSH
 747: LD_INT 5
 749: ARRAY
 750: PPUSH
 751: CALL_OW 52
// if TestCharacters ( 08_Frank ) then
 755: LD_STRING 08_Frank
 757: PPUSH
 758: CALL_OW 28
 762: IFFALSE 782
// PlaceHumanInUnit ( Kikuchi , playerVehs [ 6 ] ) ;
 764: LD_EXP 8
 768: PPUSH
 769: LD_EXP 26
 773: PUSH
 774: LD_INT 6
 776: ARRAY
 777: PPUSH
 778: CALL_OW 52
// SetClass ( [ Gary , Cyrus , Bobby , Lisa ] , 1 ) ;
 782: LD_EXP 10
 786: PUSH
 787: LD_EXP 5
 791: PUSH
 792: LD_EXP 4
 796: PUSH
 797: LD_EXP 6
 801: PUSH
 802: EMPTY
 803: LIST
 804: LIST
 805: LIST
 806: LIST
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL_OW 336
// BonusVehicles ;
 815: CALL 956 0 0
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) > 0 then
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 21
 831: PUSH
 832: LD_INT 2
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: LD_INT 58
 841: PUSH
 842: EMPTY
 843: LIST
 844: PUSH
 845: EMPTY
 846: LIST
 847: LIST
 848: LIST
 849: PPUSH
 850: CALL_OW 69
 854: PUSH
 855: LD_INT 0
 857: GREATER
 858: IFFALSE 951
// begin for i in others08 do
 860: LD_ADDR_VAR 0 2
 864: PUSH
 865: LD_EXP 20
 869: PUSH
 870: FOR_IN
 871: IFFALSE 949
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
 873: LD_ADDR_VAR 0 3
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 21
 890: PUSH
 891: LD_INT 2
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 58
 900: PUSH
 901: EMPTY
 902: LIST
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: LIST
 908: PPUSH
 909: CALL_OW 69
 913: PUSH
 914: FOR_IN
 915: IFFALSE 945
// begin PlaceHumanInUnit ( i , j ) ;
 917: LD_VAR 0 2
 921: PPUSH
 922: LD_VAR 0 3
 926: PPUSH
 927: CALL_OW 52
// SetClass ( i , 1 ) ;
 931: LD_VAR 0 2
 935: PPUSH
 936: LD_INT 1
 938: PPUSH
 939: CALL_OW 336
// end ;
 943: GO 914
 945: POP
 946: POP
// end ;
 947: GO 870
 949: POP
 950: POP
// end ; end ;
 951: LD_VAR 0 1
 955: RET
// export function BonusVehicles ; var i , siberite , rnd , veh ; begin
 956: LD_INT 0
 958: PPUSH
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
// siberite = LoadVariable ( 09_SibRes , 0 ) ;
 963: LD_ADDR_VAR 0 3
 967: PUSH
 968: LD_STRING 09_SibRes
 970: PPUSH
 971: LD_INT 0
 973: PPUSH
 974: CALL_OW 30
 978: ST_TO_ADDR
// if siberite >= 200 then
 979: LD_VAR 0 3
 983: PUSH
 984: LD_INT 200
 986: GREATEREQUAL
 987: IFFALSE 1134
// begin for i := 1 to 2 do
 989: LD_ADDR_VAR 0 2
 993: PUSH
 994: DOUBLE
 995: LD_INT 1
 997: DEC
 998: ST_TO_ADDR
 999: LD_INT 2
1001: PUSH
1002: FOR_TO
1003: IFFALSE 1132
// begin rnd = Rand ( 1 , 10 ) * 10 ;
1005: LD_ADDR_VAR 0 4
1009: PUSH
1010: LD_INT 1
1012: PPUSH
1013: LD_INT 10
1015: PPUSH
1016: CALL_OW 12
1020: PUSH
1021: LD_INT 10
1023: MUL
1024: ST_TO_ADDR
// vc_engine = 1 ;
1025: LD_ADDR_OWVAR 39
1029: PUSH
1030: LD_INT 1
1032: ST_TO_ADDR
// vc_control = 1 ;
1033: LD_ADDR_OWVAR 38
1037: PUSH
1038: LD_INT 1
1040: ST_TO_ADDR
// vc_weapon = 12 ;
1041: LD_ADDR_OWVAR 40
1045: PUSH
1046: LD_INT 12
1048: ST_TO_ADDR
// vc_chassis = 3 ;
1049: LD_ADDR_OWVAR 37
1053: PUSH
1054: LD_INT 3
1056: ST_TO_ADDR
// veh = CreateVehicle ;
1057: LD_ADDR_VAR 0 5
1061: PUSH
1062: CALL_OW 45
1066: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1067: LD_VAR 0 5
1071: PPUSH
1072: LD_INT 1
1074: PPUSH
1075: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1079: LD_VAR 0 5
1083: PPUSH
1084: LD_INT 2
1086: PPUSH
1087: LD_INT 0
1089: PPUSH
1090: CALL_OW 49
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1094: LD_VAR 0 5
1098: PPUSH
1099: LD_INT 1
1101: PUSH
1102: LD_INT 3
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: PUSH
1109: LD_INT 1
1111: PPUSH
1112: LD_INT 2
1114: PPUSH
1115: CALL_OW 12
1119: ARRAY
1120: PPUSH
1121: LD_VAR 0 4
1125: PPUSH
1126: CALL_OW 291
// end ;
1130: GO 1002
1132: POP
1133: POP
// end ; if siberite > 200 then
1134: LD_VAR 0 3
1138: PUSH
1139: LD_INT 200
1141: GREATER
1142: IFFALSE 1262
// begin for i := 1 to siberite / 100 do
1144: LD_ADDR_VAR 0 2
1148: PUSH
1149: DOUBLE
1150: LD_INT 1
1152: DEC
1153: ST_TO_ADDR
1154: LD_VAR 0 3
1158: PUSH
1159: LD_INT 100
1161: DIVREAL
1162: PUSH
1163: FOR_TO
1164: IFFALSE 1260
// begin vc_engine = 1 ;
1166: LD_ADDR_OWVAR 39
1170: PUSH
1171: LD_INT 1
1173: ST_TO_ADDR
// vc_control = 1 ;
1174: LD_ADDR_OWVAR 38
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1182: LD_ADDR_OWVAR 40
1186: PUSH
1187: LD_INT 3
1189: PUSH
1190: LD_INT 4
1192: PUSH
1193: LD_INT 5
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: LIST
1200: PUSH
1201: LD_INT 1
1203: PPUSH
1204: LD_INT 3
1206: PPUSH
1207: CALL_OW 12
1211: ARRAY
1212: ST_TO_ADDR
// vc_chassis = 3 ;
1213: LD_ADDR_OWVAR 37
1217: PUSH
1218: LD_INT 3
1220: ST_TO_ADDR
// veh = CreateVehicle ;
1221: LD_ADDR_VAR 0 5
1225: PUSH
1226: CALL_OW 45
1230: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1231: LD_VAR 0 5
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1243: LD_VAR 0 5
1247: PPUSH
1248: LD_INT 2
1250: PPUSH
1251: LD_INT 0
1253: PPUSH
1254: CALL_OW 49
// end ;
1258: GO 1163
1260: POP
1261: POP
// end ; end ;
1262: LD_VAR 0 1
1266: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount , rest , count ; begin
1267: LD_INT 0
1269: PPUSH
1270: PPUSH
1271: PPUSH
1272: PPUSH
1273: PPUSH
1274: PPUSH
1275: PPUSH
// uc_side = 1 ;
1276: LD_ADDR_OWVAR 20
1280: PUSH
1281: LD_INT 1
1283: ST_TO_ADDR
// uc_nation = 1 ;
1284: LD_ADDR_OWVAR 21
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// rest = 0 ;
1292: LD_ADDR_VAR 0 6
1296: PUSH
1297: LD_INT 0
1299: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) then
1300: LD_STRING 08_Frank
1302: PPUSH
1303: CALL_OW 28
1307: IFFALSE 1319
// count = 6 else
1309: LD_ADDR_VAR 0 7
1313: PUSH
1314: LD_INT 6
1316: ST_TO_ADDR
1317: GO 1327
// count = 5 ;
1319: LD_ADDR_VAR 0 7
1323: PUSH
1324: LD_INT 5
1326: ST_TO_ADDR
// for i := 1 to count do
1327: LD_ADDR_VAR 0 2
1331: PUSH
1332: DOUBLE
1333: LD_INT 1
1335: DEC
1336: ST_TO_ADDR
1337: LD_VAR 0 7
1341: PUSH
1342: FOR_TO
1343: IFFALSE 1683
// begin vc_engine = 1 ;
1345: LD_ADDR_OWVAR 39
1349: PUSH
1350: LD_INT 1
1352: ST_TO_ADDR
// vc_control = 1 ;
1353: LD_ADDR_OWVAR 38
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1361: LD_ADDR_OWVAR 40
1365: PUSH
1366: LD_INT 3
1368: PUSH
1369: LD_INT 4
1371: PUSH
1372: LD_INT 5
1374: PUSH
1375: LD_INT 12
1377: PUSH
1378: EMPTY
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: PUSH
1384: LD_INT 1
1386: PPUSH
1387: LD_INT 4
1389: PPUSH
1390: CALL_OW 12
1394: ARRAY
1395: ST_TO_ADDR
// vc_chassis = 3 ;
1396: LD_ADDR_OWVAR 37
1400: PUSH
1401: LD_INT 3
1403: ST_TO_ADDR
// veh = CreateVehicle ;
1404: LD_ADDR_VAR 0 3
1408: PUSH
1409: CALL_OW 45
1413: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1414: LD_VAR 0 3
1418: PPUSH
1419: LD_INT 1
1421: PPUSH
1422: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1426: LD_VAR 0 3
1430: PPUSH
1431: LD_INT 2
1433: PPUSH
1434: LD_INT 0
1436: PPUSH
1437: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1441: LD_ADDR_EXP 26
1445: PUSH
1446: LD_EXP 26
1450: PUSH
1451: LD_VAR 0 3
1455: ADD
1456: ST_TO_ADDR
// if vc_weapon = 12 then
1457: LD_OWVAR 40
1461: PUSH
1462: LD_INT 12
1464: EQUAL
1465: IFFALSE 1681
// begin rnd = Rand ( 1 , 10 ) * 10 ;
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_INT 1
1474: PPUSH
1475: LD_INT 10
1477: PPUSH
1478: CALL_OW 12
1482: PUSH
1483: LD_INT 10
1485: MUL
1486: ST_TO_ADDR
// rest = 100 - rest - rnd ;
1487: LD_ADDR_VAR 0 6
1491: PUSH
1492: LD_INT 100
1494: PUSH
1495: LD_VAR 0 6
1499: MINUS
1500: PUSH
1501: LD_VAR 0 4
1505: MINUS
1506: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1507: LD_VAR 0 3
1511: PPUSH
1512: LD_INT 1
1514: PUSH
1515: LD_INT 3
1517: PUSH
1518: EMPTY
1519: LIST
1520: LIST
1521: PUSH
1522: LD_INT 1
1524: PPUSH
1525: LD_INT 2
1527: PPUSH
1528: CALL_OW 12
1532: ARRAY
1533: PPUSH
1534: LD_VAR 0 4
1538: PPUSH
1539: CALL_OW 291
// cargoAmmount = rnd ;
1543: LD_ADDR_VAR 0 5
1547: PUSH
1548: LD_VAR 0 4
1552: ST_TO_ADDR
// repeat rest = 100 - rest - rnd ;
1553: LD_ADDR_VAR 0 6
1557: PUSH
1558: LD_INT 100
1560: PUSH
1561: LD_VAR 0 6
1565: MINUS
1566: PUSH
1567: LD_VAR 0 4
1571: MINUS
1572: ST_TO_ADDR
// rnd = Rand ( 1 , rest / 10 ) * 10 ;
1573: LD_ADDR_VAR 0 4
1577: PUSH
1578: LD_INT 1
1580: PPUSH
1581: LD_VAR 0 6
1585: PUSH
1586: LD_INT 10
1588: DIVREAL
1589: PPUSH
1590: CALL_OW 12
1594: PUSH
1595: LD_INT 10
1597: MUL
1598: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1599: LD_VAR 0 3
1603: PPUSH
1604: LD_INT 1
1606: PUSH
1607: LD_INT 3
1609: PUSH
1610: EMPTY
1611: LIST
1612: LIST
1613: PUSH
1614: LD_INT 1
1616: PPUSH
1617: LD_INT 2
1619: PPUSH
1620: CALL_OW 12
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 4
1630: PPUSH
1631: CALL_OW 291
// until rest = 0 ;
1635: LD_VAR 0 6
1639: PUSH
1640: LD_INT 0
1642: EQUAL
1643: IFFALSE 1553
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PUSH
1653: LD_INT 3
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: PUSH
1660: LD_INT 1
1662: PPUSH
1663: LD_INT 2
1665: PPUSH
1666: CALL_OW 12
1670: ARRAY
1671: PPUSH
1672: LD_VAR 0 4
1676: PPUSH
1677: CALL_OW 291
// end ; end ;
1681: GO 1342
1683: POP
1684: POP
// end ;
1685: LD_VAR 0 1
1689: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1690: LD_INT 0
1692: PPUSH
1693: PPUSH
1694: PPUSH
// uc_side = 4 ;
1695: LD_ADDR_OWVAR 20
1699: PUSH
1700: LD_INT 4
1702: ST_TO_ADDR
// uc_nation = 1 ;
1703: LD_ADDR_OWVAR 21
1707: PUSH
1708: LD_INT 1
1710: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1711: LD_ADDR_EXP 11
1715: PUSH
1716: LD_STRING Simms
1718: PPUSH
1719: LD_INT 0
1721: PPUSH
1722: CALL 7018 0 2
1726: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1727: LD_ADDR_EXP 12
1731: PUSH
1732: LD_STRING 08_Denis
1734: PPUSH
1735: LD_INT 1
1737: PPUSH
1738: CALL 7018 0 2
1742: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1743: LD_ADDR_EXP 13
1747: PUSH
1748: LD_STRING 08_Joan
1750: PPUSH
1751: LD_INT 1
1753: PPUSH
1754: CALL 7018 0 2
1758: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1759: LD_ADDR_EXP 14
1763: PUSH
1764: LD_STRING Khatam
1766: PPUSH
1767: LD_INT 1
1769: PPUSH
1770: CALL 7018 0 2
1774: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1775: LD_ADDR_EXP 15
1779: PUSH
1780: LD_STRING Gladstone
1782: PPUSH
1783: LD_INT 1
1785: PPUSH
1786: CALL 7018 0 2
1790: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1791: LD_ADDR_EXP 17
1795: PUSH
1796: LD_STRING DeltaDoctor
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: CALL 7018 0 2
1806: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1807: LD_ADDR_EXP 21
1811: PUSH
1812: LD_STRING 09_others
1814: PPUSH
1815: CALL_OW 31
1819: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1820: LD_ADDR_EXP 22
1824: PUSH
1825: LD_STRING 09_apes
1827: PPUSH
1828: CALL_OW 31
1832: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1833: LD_EXP 11
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 0
1843: PPUSH
1844: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1848: LD_EXP 12
1852: PPUSH
1853: LD_INT 1
1855: PPUSH
1856: LD_INT 0
1858: PPUSH
1859: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1863: LD_EXP 13
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1878: LD_EXP 14
1882: PPUSH
1883: LD_INT 1
1885: PPUSH
1886: LD_INT 0
1888: PPUSH
1889: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1893: LD_EXP 15
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1908: LD_EXP 17
1912: PPUSH
1913: LD_INT 1
1915: PPUSH
1916: LD_INT 0
1918: PPUSH
1919: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
1923: LD_EXP 16
1927: PPUSH
1928: LD_INT 1
1930: PPUSH
1931: LD_INT 0
1933: PPUSH
1934: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
1938: LD_EXP 11
1942: PUSH
1943: LD_EXP 14
1947: PUSH
1948: LD_EXP 12
1952: PUSH
1953: LD_EXP 15
1957: PUSH
1958: LD_EXP 17
1962: PUSH
1963: LD_EXP 13
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: LIST
1973: LIST
1974: LIST
1975: PPUSH
1976: LD_INT 4
1978: PPUSH
1979: CALL_OW 336
// if others09 > [ 6 , 5 , 4 ] [ Difficulty ] then
1983: LD_EXP 21
1987: PUSH
1988: LD_INT 6
1990: PUSH
1991: LD_INT 5
1993: PUSH
1994: LD_INT 4
1996: PUSH
1997: EMPTY
1998: LIST
1999: LIST
2000: LIST
2001: PUSH
2002: LD_OWVAR 67
2006: ARRAY
2007: GREATER
2008: IFFALSE 2070
// begin for i := 1 to [ 7 , 6 , 5 ] [ Difficulty ] do
2010: LD_ADDR_VAR 0 2
2014: PUSH
2015: DOUBLE
2016: LD_INT 1
2018: DEC
2019: ST_TO_ADDR
2020: LD_INT 7
2022: PUSH
2023: LD_INT 6
2025: PUSH
2026: LD_INT 5
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: PUSH
2034: LD_OWVAR 67
2038: ARRAY
2039: PUSH
2040: FOR_TO
2041: IFFALSE 2066
// PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2043: LD_EXP 21
2047: PUSH
2048: LD_VAR 0 2
2052: ARRAY
2053: PPUSH
2054: LD_INT 1
2056: PPUSH
2057: LD_INT 0
2059: PPUSH
2060: CALL_OW 49
2064: GO 2040
2066: POP
2067: POP
// end else
2068: GO 2102
// begin for i in others09 do
2070: LD_ADDR_VAR 0 2
2074: PUSH
2075: LD_EXP 21
2079: PUSH
2080: FOR_IN
2081: IFFALSE 2100
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2083: LD_VAR 0 2
2087: PPUSH
2088: LD_INT 1
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
2098: GO 2080
2100: POP
2101: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] = 0 then
2102: LD_INT 22
2104: PUSH
2105: LD_INT 4
2107: PUSH
2108: EMPTY
2109: LIST
2110: LIST
2111: PUSH
2112: LD_INT 21
2114: PUSH
2115: LD_INT 1
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: PUSH
2122: LD_INT 25
2124: PUSH
2125: LD_INT 2
2127: PUSH
2128: EMPTY
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: PUSH
2142: LD_EXP 11
2146: PUSH
2147: LD_EXP 14
2151: PUSH
2152: LD_EXP 12
2156: PUSH
2157: LD_EXP 15
2161: PUSH
2162: LD_EXP 17
2166: PUSH
2167: LD_EXP 13
2171: PUSH
2172: EMPTY
2173: LIST
2174: LIST
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 0
2182: EQUAL
2183: DIFF
2184: IFFALSE 2286
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2186: LD_ADDR_VAR 0 3
2190: PUSH
2191: LD_INT 22
2193: PUSH
2194: LD_INT 4
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_INT 21
2203: PUSH
2204: LD_INT 1
2206: PUSH
2207: EMPTY
2208: LIST
2209: LIST
2210: PUSH
2211: LD_INT 25
2213: PUSH
2214: LD_INT 2
2216: PUSH
2217: EMPTY
2218: LIST
2219: LIST
2220: PUSH
2221: EMPTY
2222: LIST
2223: LIST
2224: LIST
2225: PPUSH
2226: CALL_OW 69
2230: PUSH
2231: LD_EXP 11
2235: PUSH
2236: LD_EXP 14
2240: PUSH
2241: LD_EXP 12
2245: PUSH
2246: LD_EXP 15
2250: PUSH
2251: LD_EXP 17
2255: PUSH
2256: LD_EXP 13
2260: PUSH
2261: EMPTY
2262: LIST
2263: LIST
2264: LIST
2265: LIST
2266: LIST
2267: LIST
2268: DIFF
2269: ST_TO_ADDR
// SetClass ( tmp [ 1 ] , 2 ) ;
2270: LD_VAR 0 3
2274: PUSH
2275: LD_INT 1
2277: ARRAY
2278: PPUSH
2279: LD_INT 2
2281: PPUSH
2282: CALL_OW 336
// end ; for i in ape09 do
2286: LD_ADDR_VAR 0 2
2290: PUSH
2291: LD_EXP 22
2295: PUSH
2296: FOR_IN
2297: IFFALSE 2316
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2299: LD_VAR 0 2
2303: PPUSH
2304: LD_INT 1
2306: PPUSH
2307: LD_INT 0
2309: PPUSH
2310: CALL_OW 49
2314: GO 2296
2316: POP
2317: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2318: LD_INT 22
2320: PUSH
2321: LD_INT 4
2323: PUSH
2324: EMPTY
2325: LIST
2326: LIST
2327: PUSH
2328: LD_INT 21
2330: PUSH
2331: LD_INT 1
2333: PUSH
2334: EMPTY
2335: LIST
2336: LIST
2337: PUSH
2338: LD_INT 25
2340: PUSH
2341: LD_INT 2
2343: PUSH
2344: EMPTY
2345: LIST
2346: LIST
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: LIST
2352: PPUSH
2353: CALL_OW 69
2357: PPUSH
2358: LD_INT 0
2360: PPUSH
2361: LD_INT 101
2363: PPUSH
2364: LD_INT 30
2366: PPUSH
2367: LD_INT 2
2369: PPUSH
2370: CALL_OW 205
// uc_side = 1 ;
2374: LD_ADDR_OWVAR 20
2378: PUSH
2379: LD_INT 1
2381: ST_TO_ADDR
// hc_class := 1 ;
2382: LD_ADDR_OWVAR 28
2386: PUSH
2387: LD_INT 1
2389: ST_TO_ADDR
// hc_sex := sex_female ;
2390: LD_ADDR_OWVAR 27
2394: PUSH
2395: LD_INT 2
2397: ST_TO_ADDR
// hc_gallery :=  ;
2398: LD_ADDR_OWVAR 33
2402: PUSH
2403: LD_STRING 
2405: ST_TO_ADDR
// hc_name :=  ;
2406: LD_ADDR_OWVAR 26
2410: PUSH
2411: LD_STRING 
2413: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2414: LD_ADDR_OWVAR 31
2418: PUSH
2419: LD_INT 1
2421: PUSH
2422: LD_INT 7
2424: PUSH
2425: LD_INT 1
2427: PUSH
2428: LD_INT 0
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: ST_TO_ADDR
// AmScout = CreateHuman ;
2437: LD_ADDR_EXP 18
2441: PUSH
2442: CALL_OW 44
2446: ST_TO_ADDR
// end ;
2447: LD_VAR 0 1
2451: RET
// export function PrepareCornell ; begin
2452: LD_INT 0
2454: PPUSH
// uc_side = 4 ;
2455: LD_ADDR_OWVAR 20
2459: PUSH
2460: LD_INT 4
2462: ST_TO_ADDR
// uc_nation = 1 ;
2463: LD_ADDR_OWVAR 21
2467: PUSH
2468: LD_INT 1
2470: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2471: LD_ADDR_EXP 19
2475: PUSH
2476: LD_STRING 03_Cornel
2478: PPUSH
2479: LD_INT 1
2481: PPUSH
2482: CALL 7018 0 2
2486: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2487: LD_EXP 19
2491: PPUSH
2492: LD_INT 8
2494: PPUSH
2495: LD_INT 0
2497: PPUSH
2498: CALL_OW 49
// if IsInUnit ( JMM ) then
2502: LD_EXP 1
2506: PPUSH
2507: CALL_OW 310
2511: IFFALSE 2554
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2513: LD_EXP 19
2517: PPUSH
2518: LD_EXP 1
2522: PPUSH
2523: CALL_OW 310
2527: PPUSH
2528: CALL_OW 250
2532: PPUSH
2533: LD_EXP 1
2537: PPUSH
2538: CALL_OW 310
2542: PPUSH
2543: CALL_OW 251
2547: PPUSH
2548: CALL_OW 111
2552: GO 2583
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2554: LD_EXP 19
2558: PPUSH
2559: LD_EXP 1
2563: PPUSH
2564: CALL_OW 250
2568: PPUSH
2569: LD_EXP 1
2573: PPUSH
2574: CALL_OW 251
2578: PPUSH
2579: CALL_OW 111
// end ; end_of_file
2583: LD_VAR 0 1
2587: RET
// export function PrepareRussians ; var i , un ; begin
2588: LD_INT 0
2590: PPUSH
2591: PPUSH
2592: PPUSH
// uc_side = 3 ;
2593: LD_ADDR_OWVAR 20
2597: PUSH
2598: LD_INT 3
2600: ST_TO_ADDR
// uc_nation = 3 ;
2601: LD_ADDR_OWVAR 21
2605: PUSH
2606: LD_INT 3
2608: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2609: LD_ADDR_EXP 24
2613: PUSH
2614: LD_STRING Tsaritsyn
2616: PPUSH
2617: LD_INT 0
2619: PPUSH
2620: CALL 7018 0 2
2624: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2625: LD_EXP 24
2629: PPUSH
2630: LD_INT 3
2632: PPUSH
2633: LD_INT 0
2635: PPUSH
2636: CALL_OW 49
// for i = 1 to 14 do
2640: LD_ADDR_VAR 0 2
2644: PUSH
2645: DOUBLE
2646: LD_INT 1
2648: DEC
2649: ST_TO_ADDR
2650: LD_INT 14
2652: PUSH
2653: FOR_TO
2654: IFFALSE 2740
// begin uc_side = 3 ;
2656: LD_ADDR_OWVAR 20
2660: PUSH
2661: LD_INT 3
2663: ST_TO_ADDR
// uc_nation = 3 ;
2664: LD_ADDR_OWVAR 21
2668: PUSH
2669: LD_INT 3
2671: ST_TO_ADDR
// hc_gallery =  ;
2672: LD_ADDR_OWVAR 33
2676: PUSH
2677: LD_STRING 
2679: ST_TO_ADDR
// hc_name =  ;
2680: LD_ADDR_OWVAR 26
2684: PUSH
2685: LD_STRING 
2687: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2688: LD_INT 0
2690: PPUSH
2691: LD_INT 1
2693: PPUSH
2694: LD_EXP 34
2698: PPUSH
2699: LD_EXP 35
2703: PPUSH
2704: CALL_OW 12
2708: PPUSH
2709: CALL_OW 380
// un = CreateHuman ;
2713: LD_ADDR_VAR 0 3
2717: PUSH
2718: CALL_OW 44
2722: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2723: LD_VAR 0 3
2727: PPUSH
2728: LD_INT 3
2730: PPUSH
2731: LD_INT 0
2733: PPUSH
2734: CALL_OW 49
// end ;
2738: GO 2653
2740: POP
2741: POP
// for i = 1 to 6 do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: DOUBLE
2748: LD_INT 1
2750: DEC
2751: ST_TO_ADDR
2752: LD_INT 6
2754: PUSH
2755: FOR_TO
2756: IFFALSE 2842
// begin uc_side = 3 ;
2758: LD_ADDR_OWVAR 20
2762: PUSH
2763: LD_INT 3
2765: ST_TO_ADDR
// uc_nation = 3 ;
2766: LD_ADDR_OWVAR 21
2770: PUSH
2771: LD_INT 3
2773: ST_TO_ADDR
// hc_gallery =  ;
2774: LD_ADDR_OWVAR 33
2778: PUSH
2779: LD_STRING 
2781: ST_TO_ADDR
// hc_name =  ;
2782: LD_ADDR_OWVAR 26
2786: PUSH
2787: LD_STRING 
2789: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2790: LD_INT 0
2792: PPUSH
2793: LD_INT 2
2795: PPUSH
2796: LD_EXP 34
2800: PPUSH
2801: LD_EXP 35
2805: PPUSH
2806: CALL_OW 12
2810: PPUSH
2811: CALL_OW 380
// un = CreateHuman ;
2815: LD_ADDR_VAR 0 3
2819: PUSH
2820: CALL_OW 44
2824: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2825: LD_VAR 0 3
2829: PPUSH
2830: LD_INT 3
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL_OW 49
// end ;
2840: GO 2755
2842: POP
2843: POP
// for i = 1 to 6 do
2844: LD_ADDR_VAR 0 2
2848: PUSH
2849: DOUBLE
2850: LD_INT 1
2852: DEC
2853: ST_TO_ADDR
2854: LD_INT 6
2856: PUSH
2857: FOR_TO
2858: IFFALSE 2944
// begin uc_side = 3 ;
2860: LD_ADDR_OWVAR 20
2864: PUSH
2865: LD_INT 3
2867: ST_TO_ADDR
// uc_nation = 3 ;
2868: LD_ADDR_OWVAR 21
2872: PUSH
2873: LD_INT 3
2875: ST_TO_ADDR
// hc_gallery =  ;
2876: LD_ADDR_OWVAR 33
2880: PUSH
2881: LD_STRING 
2883: ST_TO_ADDR
// hc_name =  ;
2884: LD_ADDR_OWVAR 26
2888: PUSH
2889: LD_STRING 
2891: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2892: LD_INT 0
2894: PPUSH
2895: LD_INT 3
2897: PPUSH
2898: LD_EXP 34
2902: PPUSH
2903: LD_EXP 35
2907: PPUSH
2908: CALL_OW 12
2912: PPUSH
2913: CALL_OW 380
// un = CreateHuman ;
2917: LD_ADDR_VAR 0 3
2921: PUSH
2922: CALL_OW 44
2926: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2927: LD_VAR 0 3
2931: PPUSH
2932: LD_INT 3
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// end ;
2942: GO 2857
2944: POP
2945: POP
// for i = 1 to 4 do
2946: LD_ADDR_VAR 0 2
2950: PUSH
2951: DOUBLE
2952: LD_INT 1
2954: DEC
2955: ST_TO_ADDR
2956: LD_INT 4
2958: PUSH
2959: FOR_TO
2960: IFFALSE 3046
// begin uc_side = 3 ;
2962: LD_ADDR_OWVAR 20
2966: PUSH
2967: LD_INT 3
2969: ST_TO_ADDR
// uc_nation = 3 ;
2970: LD_ADDR_OWVAR 21
2974: PUSH
2975: LD_INT 3
2977: ST_TO_ADDR
// hc_gallery =  ;
2978: LD_ADDR_OWVAR 33
2982: PUSH
2983: LD_STRING 
2985: ST_TO_ADDR
// hc_name =  ;
2986: LD_ADDR_OWVAR 26
2990: PUSH
2991: LD_STRING 
2993: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2994: LD_INT 0
2996: PPUSH
2997: LD_INT 4
2999: PPUSH
3000: LD_EXP 34
3004: PPUSH
3005: LD_EXP 35
3009: PPUSH
3010: CALL_OW 12
3014: PPUSH
3015: CALL_OW 380
// un = CreateHuman ;
3019: LD_ADDR_VAR 0 3
3023: PUSH
3024: CALL_OW 44
3028: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3029: LD_VAR 0 3
3033: PPUSH
3034: LD_INT 3
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// end ;
3044: GO 2959
3046: POP
3047: POP
// end ; end_of_file
3048: LD_VAR 0 1
3052: RET
// export function PrepareArabianCommander ; begin
3053: LD_INT 0
3055: PPUSH
// uc_side = 2 ;
3056: LD_ADDR_OWVAR 20
3060: PUSH
3061: LD_INT 2
3063: ST_TO_ADDR
// uc_nation = 2 ;
3064: LD_ADDR_OWVAR 21
3068: PUSH
3069: LD_INT 2
3071: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3072: LD_ADDR_EXP 25
3076: PUSH
3077: LD_STRING Dietrich
3079: PPUSH
3080: CALL_OW 25
3084: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3085: LD_EXP 25
3089: PPUSH
3090: LD_INT 4
3092: PPUSH
3093: LD_INT 0
3095: PPUSH
3096: CALL_OW 49
// end ;
3100: LD_VAR 0 1
3104: RET
// export function PrepareArabian ; var i , un , veh ; begin
3105: LD_INT 0
3107: PPUSH
3108: PPUSH
3109: PPUSH
3110: PPUSH
// for i = 1 to 3 do
3111: LD_ADDR_VAR 0 2
3115: PUSH
3116: DOUBLE
3117: LD_INT 1
3119: DEC
3120: ST_TO_ADDR
3121: LD_INT 3
3123: PUSH
3124: FOR_TO
3125: IFFALSE 3211
// begin uc_side = 2 ;
3127: LD_ADDR_OWVAR 20
3131: PUSH
3132: LD_INT 2
3134: ST_TO_ADDR
// uc_nation = 2 ;
3135: LD_ADDR_OWVAR 21
3139: PUSH
3140: LD_INT 2
3142: ST_TO_ADDR
// hc_gallery =  ;
3143: LD_ADDR_OWVAR 33
3147: PUSH
3148: LD_STRING 
3150: ST_TO_ADDR
// hc_name =  ;
3151: LD_ADDR_OWVAR 26
3155: PUSH
3156: LD_STRING 
3158: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3159: LD_INT 0
3161: PPUSH
3162: LD_INT 1
3164: PPUSH
3165: LD_EXP 34
3169: PPUSH
3170: LD_EXP 35
3174: PPUSH
3175: CALL_OW 12
3179: PPUSH
3180: CALL_OW 380
// un = CreateHuman ;
3184: LD_ADDR_VAR 0 3
3188: PUSH
3189: CALL_OW 44
3193: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3194: LD_VAR 0 3
3198: PPUSH
3199: LD_INT 4
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 49
// end ;
3209: GO 3124
3211: POP
3212: POP
// for i = 1 to 6 do
3213: LD_ADDR_VAR 0 2
3217: PUSH
3218: DOUBLE
3219: LD_INT 1
3221: DEC
3222: ST_TO_ADDR
3223: LD_INT 6
3225: PUSH
3226: FOR_TO
3227: IFFALSE 3313
// begin uc_side = 2 ;
3229: LD_ADDR_OWVAR 20
3233: PUSH
3234: LD_INT 2
3236: ST_TO_ADDR
// uc_nation = 2 ;
3237: LD_ADDR_OWVAR 21
3241: PUSH
3242: LD_INT 2
3244: ST_TO_ADDR
// hc_gallery =  ;
3245: LD_ADDR_OWVAR 33
3249: PUSH
3250: LD_STRING 
3252: ST_TO_ADDR
// hc_name =  ;
3253: LD_ADDR_OWVAR 26
3257: PUSH
3258: LD_STRING 
3260: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3261: LD_INT 0
3263: PPUSH
3264: LD_INT 2
3266: PPUSH
3267: LD_EXP 34
3271: PPUSH
3272: LD_EXP 35
3276: PPUSH
3277: CALL_OW 12
3281: PPUSH
3282: CALL_OW 380
// un = CreateHuman ;
3286: LD_ADDR_VAR 0 3
3290: PUSH
3291: CALL_OW 44
3295: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3296: LD_VAR 0 3
3300: PPUSH
3301: LD_INT 4
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// end ;
3311: GO 3226
3313: POP
3314: POP
// for i = 1 to 6 do
3315: LD_ADDR_VAR 0 2
3319: PUSH
3320: DOUBLE
3321: LD_INT 1
3323: DEC
3324: ST_TO_ADDR
3325: LD_INT 6
3327: PUSH
3328: FOR_TO
3329: IFFALSE 3415
// begin uc_side = 2 ;
3331: LD_ADDR_OWVAR 20
3335: PUSH
3336: LD_INT 2
3338: ST_TO_ADDR
// uc_nation = 2 ;
3339: LD_ADDR_OWVAR 21
3343: PUSH
3344: LD_INT 2
3346: ST_TO_ADDR
// hc_gallery =  ;
3347: LD_ADDR_OWVAR 33
3351: PUSH
3352: LD_STRING 
3354: ST_TO_ADDR
// hc_name =  ;
3355: LD_ADDR_OWVAR 26
3359: PUSH
3360: LD_STRING 
3362: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3363: LD_INT 0
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: LD_EXP 34
3373: PPUSH
3374: LD_EXP 35
3378: PPUSH
3379: CALL_OW 12
3383: PPUSH
3384: CALL_OW 380
// un = CreateHuman ;
3388: LD_ADDR_VAR 0 3
3392: PUSH
3393: CALL_OW 44
3397: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3398: LD_VAR 0 3
3402: PPUSH
3403: LD_INT 4
3405: PPUSH
3406: LD_INT 0
3408: PPUSH
3409: CALL_OW 49
// end ;
3413: GO 3328
3415: POP
3416: POP
// for i = 1 to 4 do
3417: LD_ADDR_VAR 0 2
3421: PUSH
3422: DOUBLE
3423: LD_INT 1
3425: DEC
3426: ST_TO_ADDR
3427: LD_INT 4
3429: PUSH
3430: FOR_TO
3431: IFFALSE 3517
// begin uc_side = 2 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// uc_nation = 2 ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 2
3448: ST_TO_ADDR
// hc_gallery =  ;
3449: LD_ADDR_OWVAR 33
3453: PUSH
3454: LD_STRING 
3456: ST_TO_ADDR
// hc_name =  ;
3457: LD_ADDR_OWVAR 26
3461: PUSH
3462: LD_STRING 
3464: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3465: LD_INT 0
3467: PPUSH
3468: LD_INT 4
3470: PPUSH
3471: LD_EXP 34
3475: PPUSH
3476: LD_EXP 35
3480: PPUSH
3481: CALL_OW 12
3485: PPUSH
3486: CALL_OW 380
// un = CreateHuman ;
3490: LD_ADDR_VAR 0 3
3494: PUSH
3495: CALL_OW 44
3499: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3500: LD_VAR 0 3
3504: PPUSH
3505: LD_INT 4
3507: PPUSH
3508: LD_INT 0
3510: PPUSH
3511: CALL_OW 49
// end ;
3515: GO 3430
3517: POP
3518: POP
// for i = 1 to 2 do
3519: LD_ADDR_VAR 0 2
3523: PUSH
3524: DOUBLE
3525: LD_INT 1
3527: DEC
3528: ST_TO_ADDR
3529: LD_INT 2
3531: PUSH
3532: FOR_TO
3533: IFFALSE 3663
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3535: LD_ADDR_VAR 0 4
3539: PUSH
3540: LD_INT 22
3542: PUSH
3543: LD_INT 2
3545: PUSH
3546: EMPTY
3547: LIST
3548: LIST
3549: PUSH
3550: LD_INT 21
3552: PUSH
3553: LD_INT 2
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 58
3562: PUSH
3563: EMPTY
3564: LIST
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: LIST
3570: PPUSH
3571: CALL_OW 69
3575: ST_TO_ADDR
// uc_side = 2 ;
3576: LD_ADDR_OWVAR 20
3580: PUSH
3581: LD_INT 2
3583: ST_TO_ADDR
// uc_nation = 2 ;
3584: LD_ADDR_OWVAR 21
3588: PUSH
3589: LD_INT 2
3591: ST_TO_ADDR
// hc_gallery =  ;
3592: LD_ADDR_OWVAR 33
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// hc_name =  ;
3600: LD_ADDR_OWVAR 26
3604: PUSH
3605: LD_STRING 
3607: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3608: LD_INT 0
3610: PPUSH
3611: LD_INT 3
3613: PPUSH
3614: LD_EXP 34
3618: PPUSH
3619: LD_EXP 35
3623: PPUSH
3624: CALL_OW 12
3628: PPUSH
3629: CALL_OW 380
// un = CreateHuman ;
3633: LD_ADDR_VAR 0 3
3637: PUSH
3638: CALL_OW 44
3642: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3643: LD_VAR 0 3
3647: PPUSH
3648: LD_VAR 0 4
3652: PUSH
3653: LD_INT 1
3655: ARRAY
3656: PPUSH
3657: CALL_OW 52
// end ;
3661: GO 3532
3663: POP
3664: POP
// end ; end_of_file
3665: LD_VAR 0 1
3669: RET
// every 1 do
3670: GO 3672
3672: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
3673: LD_EXP 1
3677: PPUSH
3678: CALL_OW 87
// if IsOk ( Gary ) then
3682: LD_EXP 10
3686: PPUSH
3687: CALL_OW 302
3691: IFFALSE 3737
// begin DialogueOn ;
3693: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
3697: LD_EXP 10
3701: PPUSH
3702: LD_STRING D2-Gary-1
3704: PPUSH
3705: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
3709: LD_EXP 1
3713: PPUSH
3714: LD_STRING D2-JMM-1
3716: PPUSH
3717: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
3721: LD_EXP 10
3725: PPUSH
3726: LD_STRING D2-Gary-2
3728: PPUSH
3729: CALL_OW 88
// DialogueOff ;
3733: CALL_OW 7
// end ; ChangeMissionObjectives ( M1 ) ;
3737: LD_STRING M1
3739: PPUSH
3740: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
3744: LD_INT 38
3746: PPUSH
3747: LD_INT 1
3749: PPUSH
3750: LD_INT 100
3752: PPUSH
3753: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
3757: LD_INT 47
3759: PPUSH
3760: LD_INT 1
3762: PPUSH
3763: LD_INT 50
3765: PPUSH
3766: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
3770: LD_INT 47
3772: PPUSH
3773: LD_INT 3
3775: PPUSH
3776: LD_INT 50
3778: PPUSH
3779: CALL_OW 291
// end ;
3783: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
3784: LD_EXP 1
3788: PPUSH
3789: LD_EXP 11
3793: PPUSH
3794: CALL_OW 296
3798: PUSH
3799: LD_INT 15
3801: LESS
3802: IFFALSE 4177
3804: GO 3806
3806: DISABLE
// begin InGameOn ;
3807: CALL_OW 8
// ComExitVehicle ( JMM ) ;
3811: LD_EXP 1
3815: PPUSH
3816: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
3820: LD_EXP 1
3824: PPUSH
3825: CALL_OW 87
// wait ( 0 0$1 ) ;
3829: LD_INT 35
3831: PPUSH
3832: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
3836: LD_INT 35
3838: PPUSH
3839: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3843: LD_EXP 11
3847: PUSH
3848: LD_EXP 13
3852: PUSH
3853: LD_EXP 12
3857: PUSH
3858: LD_EXP 14
3862: PUSH
3863: EMPTY
3864: LIST
3865: LIST
3866: LIST
3867: LIST
3868: PPUSH
3869: LD_EXP 1
3873: PPUSH
3874: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
3878: LD_EXP 1
3882: PPUSH
3883: LD_EXP 11
3887: PPUSH
3888: CALL_OW 296
3892: PUSH
3893: LD_INT 5
3895: LESS
3896: IFFALSE 3836
// ComTurnUnit ( JMM , Simms ) ;
3898: LD_EXP 1
3902: PPUSH
3903: LD_EXP 11
3907: PPUSH
3908: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
3912: LD_EXP 11
3916: PUSH
3917: LD_EXP 13
3921: PUSH
3922: LD_EXP 12
3926: PUSH
3927: LD_EXP 14
3931: PUSH
3932: EMPTY
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: PPUSH
3938: LD_EXP 1
3942: PPUSH
3943: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
3947: LD_EXP 1
3951: PUSH
3952: LD_EXP 11
3956: PUSH
3957: EMPTY
3958: LIST
3959: LIST
3960: PPUSH
3961: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
3965: LD_EXP 11
3969: PPUSH
3970: LD_STRING D2a-Sim-1
3972: PPUSH
3973: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
3977: LD_EXP 1
3981: PPUSH
3982: LD_STRING D2a-JMM-1
3984: PPUSH
3985: CALL_OW 88
// if IsOk ( Joan ) then
3989: LD_EXP 13
3993: PPUSH
3994: CALL_OW 302
3998: IFFALSE 4050
// begin ComTurnUnit ( JMM , Joan ) ;
4000: LD_EXP 1
4004: PPUSH
4005: LD_EXP 13
4009: PPUSH
4010: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4014: LD_EXP 13
4018: PPUSH
4019: LD_STRING D2b-Joan-1
4021: PPUSH
4022: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4026: LD_EXP 1
4030: PPUSH
4031: LD_STRING D2b-JMM-1
4033: PPUSH
4034: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4038: LD_EXP 13
4042: PPUSH
4043: LD_STRING D2b-Joan-2
4045: PPUSH
4046: CALL_OW 88
// end ; if IsOk ( Denis ) then
4050: LD_EXP 12
4054: PPUSH
4055: CALL_OW 302
4059: IFFALSE 4087
// begin ComTurnUnit ( JMM , Denis ) ;
4061: LD_EXP 1
4065: PPUSH
4066: LD_EXP 12
4070: PPUSH
4071: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4075: LD_EXP 12
4079: PPUSH
4080: LD_STRING D2c-Den-1
4082: PPUSH
4083: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4087: LD_EXP 14
4091: PPUSH
4092: CALL_OW 302
4096: IFFALSE 4136
// begin ComTurnUnit ( JMM , Khatam ) ;
4098: LD_EXP 1
4102: PPUSH
4103: LD_EXP 14
4107: PPUSH
4108: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4112: LD_EXP 1
4116: PPUSH
4117: LD_STRING D2c-JMM-1
4119: PPUSH
4120: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4124: LD_EXP 14
4128: PPUSH
4129: LD_STRING D2c-Khat-1
4131: PPUSH
4132: CALL_OW 88
// end ; InGameOff ;
4136: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4140: LD_INT 22
4142: PUSH
4143: LD_INT 4
4145: PUSH
4146: EMPTY
4147: LIST
4148: LIST
4149: PPUSH
4150: CALL_OW 69
4154: PPUSH
4155: LD_INT 1
4157: PPUSH
4158: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4162: LD_STRING M1a
4164: PPUSH
4165: CALL_OW 337
// joinEpsilon = 1 ;
4169: LD_ADDR_EXP 27
4173: PUSH
4174: LD_INT 1
4176: ST_TO_ADDR
// end ;
4177: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 ;
4178: LD_EXP 50
4182: PUSH
4183: LD_INT 1
4185: EQUAL
4186: IFFALSE 4918
4188: GO 4190
4190: DISABLE
4191: LD_INT 0
4193: PPUSH
4194: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) [ 1 ] ;
4195: LD_ADDR_VAR 0 1
4199: PUSH
4200: LD_INT 22
4202: PUSH
4203: LD_INT 1
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 25
4212: PUSH
4213: LD_INT 4
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 26
4222: PUSH
4223: LD_INT 1
4225: PUSH
4226: EMPTY
4227: LIST
4228: LIST
4229: PUSH
4230: EMPTY
4231: LIST
4232: LIST
4233: LIST
4234: PPUSH
4235: CALL_OW 69
4239: PUSH
4240: LD_INT 1
4242: ARRAY
4243: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) [ 1 ] ;
4244: LD_ADDR_VAR 0 2
4248: PUSH
4249: LD_INT 22
4251: PUSH
4252: LD_INT 1
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 26
4261: PUSH
4262: LD_INT 1
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 2
4271: PUSH
4272: LD_INT 25
4274: PUSH
4275: LD_INT 1
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PUSH
4282: LD_INT 25
4284: PUSH
4285: LD_INT 2
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PUSH
4292: LD_INT 25
4294: PUSH
4295: LD_INT 3
4297: PUSH
4298: EMPTY
4299: LIST
4300: LIST
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: LIST
4306: LIST
4307: PUSH
4308: EMPTY
4309: LIST
4310: LIST
4311: LIST
4312: PPUSH
4313: CALL_OW 69
4317: PUSH
4318: LD_INT 1
4320: ARRAY
4321: ST_TO_ADDR
// DialogueOn ;
4322: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
4326: LD_EXP 17
4330: PPUSH
4331: CALL_OW 302
4335: IFFALSE 4351
// Say ( DeltaDoctor , D3-Sci1-1 ) else
4337: LD_EXP 17
4341: PPUSH
4342: LD_STRING D3-Sci1-1
4344: PPUSH
4345: CALL_OW 88
4349: GO 4363
// Say ( tmp1 , D3-Sci1-1 ) ;
4351: LD_VAR 0 1
4355: PPUSH
4356: LD_STRING D3-Sci1-1
4358: PPUSH
4359: CALL_OW 88
// if IsOk ( Gary ) then
4363: LD_EXP 10
4367: PPUSH
4368: CALL_OW 302
4372: IFFALSE 4388
// Say ( Gary , D3-Gary-1 ) else
4374: LD_EXP 10
4378: PPUSH
4379: LD_STRING D3-Gary-1
4381: PPUSH
4382: CALL_OW 88
4386: GO 4400
// Say ( tmp2 , D3-Gary-1 ) ;
4388: LD_VAR 0 2
4392: PPUSH
4393: LD_STRING D3-Gary-1
4395: PPUSH
4396: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4400: LD_EXP 17
4404: PPUSH
4405: CALL_OW 302
4409: IFFALSE 4425
// Say ( DeltaDoctor , D3-Sci1-2 ) else
4411: LD_EXP 17
4415: PPUSH
4416: LD_STRING D3-Sci1-2
4418: PPUSH
4419: CALL_OW 88
4423: GO 4437
// Say ( tmp1 , D3-Sci1-2 ) ;
4425: LD_VAR 0 1
4429: PPUSH
4430: LD_STRING D3-Sci1-2
4432: PPUSH
4433: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
4437: LD_EXP 1
4441: PPUSH
4442: LD_STRING D3-JMM-2
4444: PPUSH
4445: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4449: LD_EXP 17
4453: PPUSH
4454: CALL_OW 302
4458: IFFALSE 4474
// Say ( DeltaDoctor , D3-Sci1-3 ) else
4460: LD_EXP 17
4464: PPUSH
4465: LD_STRING D3-Sci1-3
4467: PPUSH
4468: CALL_OW 88
4472: GO 4486
// Say ( tmp1 , D3-Sci1-3 ) ;
4474: LD_VAR 0 1
4478: PPUSH
4479: LD_STRING D3-Sci1-3
4481: PPUSH
4482: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
4486: LD_EXP 1
4490: PPUSH
4491: LD_STRING D3-JMM-3
4493: PPUSH
4494: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
4498: LD_EXP 17
4502: PPUSH
4503: CALL_OW 302
4507: IFFALSE 4523
// Say ( DeltaDoctor , D3-Sci1-4 ) else
4509: LD_EXP 17
4513: PPUSH
4514: LD_STRING D3-Sci1-4
4516: PPUSH
4517: CALL_OW 88
4521: GO 4535
// Say ( tmp1 , D3-Sci1-4 ) ;
4523: LD_VAR 0 1
4527: PPUSH
4528: LD_STRING D3-Sci1-4
4530: PPUSH
4531: CALL_OW 88
// DialogueOff ;
4535: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
4539: LD_INT 12
4541: PPUSH
4542: LD_INT 1
4544: PPUSH
4545: LD_INT 1
4547: PPUSH
4548: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
4552: LD_INT 32
4554: PPUSH
4555: LD_INT 1
4557: PPUSH
4558: LD_INT 1
4560: PPUSH
4561: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
4565: LD_INT 12
4567: PPUSH
4568: LD_INT 1
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
4578: LD_STRING M2
4580: PPUSH
4581: CALL_OW 337
// wait ( 5 5$0 ) ;
4585: LD_INT 10500
4587: PPUSH
4588: CALL_OW 67
// if IsOK ( Simms ) and IsOk ( Denis ) then
4592: LD_EXP 11
4596: PPUSH
4597: CALL_OW 302
4601: PUSH
4602: LD_EXP 12
4606: PPUSH
4607: CALL_OW 302
4611: AND
4612: IFFALSE 4779
// begin DialogueOn ;
4614: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
4618: LD_EXP 11
4622: PPUSH
4623: LD_STRING D3a-Sim-1
4625: PPUSH
4626: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
4630: LD_EXP 12
4634: PPUSH
4635: LD_STRING D3a-Sci1-1
4637: PPUSH
4638: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
4642: LD_EXP 11
4646: PPUSH
4647: LD_STRING D3a-Sim-2
4649: PPUSH
4650: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
4654: LD_EXP 12
4658: PPUSH
4659: LD_STRING D3a-Sci1-2
4661: PPUSH
4662: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
4666: LD_EXP 11
4670: PPUSH
4671: LD_STRING D3a-Sim-3
4673: PPUSH
4674: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
4678: LD_EXP 12
4682: PPUSH
4683: LD_STRING D3a-Sci1-3
4685: PPUSH
4686: CALL_OW 88
// if IsOK ( Joan ) then
4690: LD_EXP 13
4694: PPUSH
4695: CALL_OW 302
4699: IFFALSE 4715
// Say ( Simms , D3a-Sim-4 ) else
4701: LD_EXP 11
4705: PPUSH
4706: LD_STRING D3a-Sim-4
4708: PPUSH
4709: CALL_OW 88
4713: GO 4727
// Say ( Simms , D3a-Sim-4a ) ;
4715: LD_EXP 11
4719: PPUSH
4720: LD_STRING D3a-Sim-4a
4722: PPUSH
4723: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
4727: LD_EXP 12
4731: PPUSH
4732: LD_STRING D3a-Sci1-4
4734: PPUSH
4735: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
4739: LD_EXP 11
4743: PPUSH
4744: LD_STRING D3a-Sim-5
4746: PPUSH
4747: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
4751: LD_EXP 12
4755: PPUSH
4756: LD_STRING D3a-Sci1-5
4758: PPUSH
4759: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
4763: LD_EXP 11
4767: PPUSH
4768: LD_STRING D3a-Sim-6
4770: PPUSH
4771: CALL_OW 88
// DialogueOff ;
4775: CALL_OW 7
// end ; wait ( 3 3$0 ) ;
4779: LD_INT 6300
4781: PPUSH
4782: CALL_OW 67
// DialogueOn ;
4786: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
4790: LD_INT 22
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 25
4802: PUSH
4803: LD_INT 4
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: LD_INT 26
4812: PUSH
4813: LD_INT 1
4815: PUSH
4816: EMPTY
4817: LIST
4818: LIST
4819: PUSH
4820: EMPTY
4821: LIST
4822: LIST
4823: LIST
4824: PPUSH
4825: CALL_OW 69
4829: PPUSH
4830: LD_STRING D5-Ar1-1
4832: PPUSH
4833: LD_STRING D5-Ar1-1
4835: PPUSH
4836: CALL 7075 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
4840: LD_EXP 25
4844: PPUSH
4845: LD_STRING D5-Diet-1
4847: PPUSH
4848: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
4852: LD_INT 22
4854: PUSH
4855: LD_INT 2
4857: PUSH
4858: EMPTY
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 25
4864: PUSH
4865: LD_INT 4
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: PUSH
4872: LD_INT 26
4874: PUSH
4875: LD_INT 1
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: LIST
4886: PPUSH
4887: CALL_OW 69
4891: PPUSH
4892: LD_STRING D5-Ar1-2
4894: PPUSH
4895: LD_STRING D5-Ar1-2
4897: PPUSH
4898: CALL 7075 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
4902: LD_EXP 25
4906: PPUSH
4907: LD_STRING D5-Diet-2
4909: PPUSH
4910: CALL_OW 88
// DialogueOff ;
4914: CALL_OW 7
// end ;
4918: PPOPN 2
4920: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
4921: LD_EXP 27
4925: PUSH
4926: LD_INT 1
4928: EQUAL
4929: IFFALSE 5249
4931: GO 4933
4933: DISABLE
4934: LD_INT 0
4936: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
4937: LD_EXP 18
4941: PPUSH
4942: LD_STRING D4-FSol1-1
4944: PPUSH
4945: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
4949: LD_STRING M3
4951: PPUSH
4952: CALL_OW 337
// PrepareRussians ;
4956: CALL 2588 0 0
// rnd = Rand ( 1 , 100 ) ;
4960: LD_ADDR_VAR 0 1
4964: PUSH
4965: LD_INT 1
4967: PPUSH
4968: LD_INT 100
4970: PPUSH
4971: CALL_OW 12
4975: ST_TO_ADDR
// if difficulty = 1 then
4976: LD_OWVAR 67
4980: PUSH
4981: LD_INT 1
4983: EQUAL
4984: IFFALSE 5067
// begin if rnd > 0 and rnd < 51 then
4986: LD_VAR 0 1
4990: PUSH
4991: LD_INT 0
4993: GREATER
4994: PUSH
4995: LD_VAR 0 1
4999: PUSH
5000: LD_INT 51
5002: LESS
5003: AND
5004: IFFALSE 5013
// BuildRussianBase ( 2 ) ;
5006: LD_INT 2
5008: PPUSH
5009: CALL 7602 0 1
// if rnd > 50 and rnd < 81 then
5013: LD_VAR 0 1
5017: PUSH
5018: LD_INT 50
5020: GREATER
5021: PUSH
5022: LD_VAR 0 1
5026: PUSH
5027: LD_INT 81
5029: LESS
5030: AND
5031: IFFALSE 5040
// BuildRussianBase ( 1 ) ;
5033: LD_INT 1
5035: PPUSH
5036: CALL 7602 0 1
// if rnd > 80 and rnd < 101 then
5040: LD_VAR 0 1
5044: PUSH
5045: LD_INT 80
5047: GREATER
5048: PUSH
5049: LD_VAR 0 1
5053: PUSH
5054: LD_INT 101
5056: LESS
5057: AND
5058: IFFALSE 5067
// BuildRussianBase ( 3 ) ;
5060: LD_INT 3
5062: PPUSH
5063: CALL 7602 0 1
// end ; if difficulty = 2 then
5067: LD_OWVAR 67
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: IFFALSE 5158
// begin if rnd > 0 and rnd < 61 then
5077: LD_VAR 0 1
5081: PUSH
5082: LD_INT 0
5084: GREATER
5085: PUSH
5086: LD_VAR 0 1
5090: PUSH
5091: LD_INT 61
5093: LESS
5094: AND
5095: IFFALSE 5104
// BuildRussianBase ( 2 ) ;
5097: LD_INT 2
5099: PPUSH
5100: CALL 7602 0 1
// if rnd > 60 and rnd < 81 then
5104: LD_VAR 0 1
5108: PUSH
5109: LD_INT 60
5111: GREATER
5112: PUSH
5113: LD_VAR 0 1
5117: PUSH
5118: LD_INT 81
5120: LESS
5121: AND
5122: IFFALSE 5131
// BuildRussianBase ( 1 ) ;
5124: LD_INT 1
5126: PPUSH
5127: CALL 7602 0 1
// if rnd > 80 and rnd < 101 then
5131: LD_VAR 0 1
5135: PUSH
5136: LD_INT 80
5138: GREATER
5139: PUSH
5140: LD_VAR 0 1
5144: PUSH
5145: LD_INT 101
5147: LESS
5148: AND
5149: IFFALSE 5158
// BuildRussianBase ( 3 ) ;
5151: LD_INT 3
5153: PPUSH
5154: CALL 7602 0 1
// end ; if difficulty = 3 then
5158: LD_OWVAR 67
5162: PUSH
5163: LD_INT 3
5165: EQUAL
5166: IFFALSE 5249
// begin if rnd > 0 and rnd < 71 then
5168: LD_VAR 0 1
5172: PUSH
5173: LD_INT 0
5175: GREATER
5176: PUSH
5177: LD_VAR 0 1
5181: PUSH
5182: LD_INT 71
5184: LESS
5185: AND
5186: IFFALSE 5195
// BuildRussianBase ( 3 ) ;
5188: LD_INT 3
5190: PPUSH
5191: CALL 7602 0 1
// if rnd > 70 and rnd < 81 then
5195: LD_VAR 0 1
5199: PUSH
5200: LD_INT 70
5202: GREATER
5203: PUSH
5204: LD_VAR 0 1
5208: PUSH
5209: LD_INT 81
5211: LESS
5212: AND
5213: IFFALSE 5222
// BuildRussianBase ( 2 ) ;
5215: LD_INT 2
5217: PPUSH
5218: CALL 7602 0 1
// if rnd > 80 and rnd < 101 then
5222: LD_VAR 0 1
5226: PUSH
5227: LD_INT 80
5229: GREATER
5230: PUSH
5231: LD_VAR 0 1
5235: PUSH
5236: LD_INT 101
5238: LESS
5239: AND
5240: IFFALSE 5249
// BuildRussianBase ( 1 ) ;
5242: LD_INT 1
5244: PPUSH
5245: CALL 7602 0 1
// end ; end ;
5249: PPOPN 1
5251: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
5252: LD_INT 54
5254: PPUSH
5255: LD_INT 1
5257: PPUSH
5258: CALL_OW 321
5262: PUSH
5263: LD_INT 2
5265: EQUAL
5266: PUSH
5267: LD_INT 21
5269: PPUSH
5270: LD_INT 1
5272: PPUSH
5273: CALL_OW 321
5277: PUSH
5278: LD_INT 2
5280: EQUAL
5281: OR
5282: PUSH
5283: LD_INT 22
5285: PPUSH
5286: LD_INT 1
5288: PPUSH
5289: CALL_OW 321
5293: PUSH
5294: LD_INT 2
5296: EQUAL
5297: OR
5298: IFFALSE 6140
5300: GO 5302
5302: DISABLE
5303: LD_INT 0
5305: PPUSH
5306: PPUSH
// begin if IsOk ( Denis ) then
5307: LD_EXP 12
5311: PPUSH
5312: CALL_OW 302
5316: IFFALSE 5410
// begin DialogueOn ;
5318: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
5322: LD_EXP 1
5326: PPUSH
5327: LD_STRING D6-JMM-1
5329: PPUSH
5330: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
5334: LD_EXP 12
5338: PPUSH
5339: LD_STRING D6-Sci1-1
5341: PPUSH
5342: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
5346: LD_EXP 1
5350: PPUSH
5351: LD_STRING D6-JMM-2
5353: PPUSH
5354: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
5358: LD_EXP 12
5362: PPUSH
5363: LD_STRING D6-Sci1-2
5365: PPUSH
5366: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
5370: LD_EXP 1
5374: PPUSH
5375: LD_STRING D6-JMM-3
5377: PPUSH
5378: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
5382: LD_EXP 12
5386: PPUSH
5387: LD_STRING D6-Sci1-3
5389: PPUSH
5390: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
5394: LD_EXP 1
5398: PPUSH
5399: LD_STRING D6-JMM-4
5401: PPUSH
5402: CALL_OW 88
// DialogueOff ;
5406: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
5410: LD_INT 2100
5412: PUSH
5413: LD_INT 3150
5415: PUSH
5416: LD_INT 4200
5418: PUSH
5419: LD_INT 5250
5421: PUSH
5422: EMPTY
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: PUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 4
5433: PPUSH
5434: CALL_OW 12
5438: ARRAY
5439: PPUSH
5440: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
5444: LD_ADDR_VAR 0 1
5448: PUSH
5449: LD_INT 22
5451: PUSH
5452: LD_INT 2
5454: PUSH
5455: EMPTY
5456: LIST
5457: LIST
5458: PUSH
5459: LD_INT 25
5461: PUSH
5462: LD_INT 4
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: PUSH
5469: EMPTY
5470: LIST
5471: LIST
5472: PPUSH
5473: CALL_OW 69
5477: PUSH
5478: FOR_IN
5479: IFFALSE 5492
// ComExitBuilding ( i ) ;
5481: LD_VAR 0 1
5485: PPUSH
5486: CALL_OW 122
5490: GO 5478
5492: POP
5493: POP
// wait ( 0 0$1 ) ;
5494: LD_INT 35
5496: PPUSH
5497: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
5501: LD_INT 76
5503: PPUSH
5504: LD_INT 19
5506: PPUSH
5507: CALL_OW 84
// DialogueOn ;
5511: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5515: LD_INT 22
5517: PUSH
5518: LD_INT 1
5520: PUSH
5521: EMPTY
5522: LIST
5523: LIST
5524: PUSH
5525: LD_INT 26
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: EMPTY
5536: LIST
5537: LIST
5538: PUSH
5539: LD_EXP 1
5543: PUSH
5544: EMPTY
5545: LIST
5546: DIFF
5547: PPUSH
5548: CALL_OW 69
5552: PPUSH
5553: LD_STRING D8-Sol1-1
5555: PPUSH
5556: LD_STRING D8-Sol1-1
5558: PPUSH
5559: CALL 7075 0 3
// if IsOK ( DeltaDoctor ) then
5563: LD_EXP 17
5567: PPUSH
5568: CALL_OW 302
5572: IFFALSE 5588
// Say ( DeltaDoctor , D8-Sci1-1 ) else
5574: LD_EXP 17
5578: PPUSH
5579: LD_STRING D8-Sci1-1
5581: PPUSH
5582: CALL_OW 88
5586: GO 5687
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
5588: LD_INT 22
5590: PUSH
5591: LD_INT 1
5593: PUSH
5594: EMPTY
5595: LIST
5596: LIST
5597: PUSH
5598: LD_INT 26
5600: PUSH
5601: LD_INT 1
5603: PUSH
5604: EMPTY
5605: LIST
5606: LIST
5607: PUSH
5608: LD_INT 2
5610: PUSH
5611: LD_INT 25
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 25
5623: PUSH
5624: LD_INT 2
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 25
5633: PUSH
5634: LD_INT 3
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 25
5643: PUSH
5644: LD_INT 4
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: LIST
5655: LIST
5656: LIST
5657: PUSH
5658: EMPTY
5659: LIST
5660: LIST
5661: LIST
5662: PUSH
5663: LD_EXP 1
5667: PUSH
5668: EMPTY
5669: LIST
5670: DIFF
5671: PPUSH
5672: CALL_OW 69
5676: PPUSH
5677: LD_STRING D8-Sol1-1
5679: PPUSH
5680: LD_STRING D8-Sol1-1
5682: PPUSH
5683: CALL 7075 0 3
// Say ( JMM , D8-JMM-1 ) ;
5687: LD_EXP 1
5691: PPUSH
5692: LD_STRING D8-JMM-1
5694: PPUSH
5695: CALL_OW 88
// DialogueOff ;
5699: CALL_OW 7
// ArabianTrait ;
5703: CALL 6143 0 0
// wait ( 0 0$30 ) ;
5707: LD_INT 1050
5709: PPUSH
5710: CALL_OW 67
// if IsOk ( Gary ) then
5714: LD_EXP 10
5718: PPUSH
5719: CALL_OW 302
5723: IFFALSE 5737
// Say ( Gary , D8a-Gary-1 ) ;
5725: LD_EXP 10
5729: PPUSH
5730: LD_STRING D8a-Gary-1
5732: PPUSH
5733: CALL_OW 88
// wait ( 0 0$5 ) ;
5737: LD_INT 175
5739: PPUSH
5740: CALL_OW 67
// if IsOK ( Khatam ) then
5744: LD_EXP 14
5748: PPUSH
5749: CALL_OW 302
5753: IFFALSE 6140
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) [ 1 ] ;
5755: LD_ADDR_VAR 0 2
5759: PUSH
5760: LD_INT 22
5762: PUSH
5763: LD_INT 1
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: PUSH
5770: LD_INT 26
5772: PUSH
5773: LD_INT 1
5775: PUSH
5776: EMPTY
5777: LIST
5778: LIST
5779: PUSH
5780: LD_INT 2
5782: PUSH
5783: LD_INT 25
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 2
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 3
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 25
5815: PUSH
5816: LD_INT 4
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: PUSH
5830: EMPTY
5831: LIST
5832: LIST
5833: LIST
5834: PPUSH
5835: CALL_OW 69
5839: PUSH
5840: LD_INT 1
5842: ARRAY
5843: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
5844: LD_EXP 14
5848: PPUSH
5849: LD_INT 8
5851: PPUSH
5852: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
5856: LD_EXP 14
5860: PPUSH
5861: CALL_OW 122
// wait ( 0 0$1 ) ;
5865: LD_INT 35
5867: PPUSH
5868: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
5872: LD_EXP 14
5876: PPUSH
5877: CALL_OW 121
// wait ( 0 0$1 ) ;
5881: LD_INT 35
5883: PPUSH
5884: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
5888: LD_EXP 14
5892: PPUSH
5893: LD_INT 7
5895: PPUSH
5896: CALL_OW 113
// DialogueOn ;
5900: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-1 , D8b-FSol1-1 ) ;
5904: LD_INT 22
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: EMPTY
5915: LIST
5916: PUSH
5917: LD_EXP 1
5921: PUSH
5922: LD_EXP 14
5926: PUSH
5927: LD_EXP 13
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: DIFF
5937: PPUSH
5938: CALL_OW 69
5942: PPUSH
5943: LD_STRING D8b-Sol1-1
5945: PPUSH
5946: LD_STRING D8b-FSol1-1
5948: PPUSH
5949: CALL 7075 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
5953: LD_EXP 14
5957: PPUSH
5958: LD_STRING D8b-Khat-1
5960: PPUSH
5961: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-2 , D8b-FSol1-2 ) ;
5965: LD_INT 22
5967: PUSH
5968: LD_INT 1
5970: PUSH
5971: EMPTY
5972: LIST
5973: LIST
5974: PUSH
5975: EMPTY
5976: LIST
5977: PUSH
5978: LD_EXP 1
5982: PUSH
5983: LD_EXP 14
5987: PUSH
5988: LD_EXP 13
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: LIST
5997: DIFF
5998: PPUSH
5999: CALL_OW 69
6003: PPUSH
6004: LD_STRING D8b-Sol1-2
6006: PPUSH
6007: LD_STRING D8b-FSol1-2
6009: PPUSH
6010: CALL 7075 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
6014: LD_EXP 14
6018: PPUSH
6019: LD_STRING D8b-Khat-2
6021: PPUSH
6022: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-3 , D8b-FSol1-3 ) ;
6026: LD_INT 22
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: PUSH
6039: LD_EXP 1
6043: PUSH
6044: LD_EXP 14
6048: PUSH
6049: LD_EXP 13
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: LIST
6058: DIFF
6059: PPUSH
6060: CALL_OW 69
6064: PPUSH
6065: LD_STRING D8b-Sol1-3
6067: PPUSH
6068: LD_STRING D8b-FSol1-3
6070: PPUSH
6071: CALL 7075 0 3
// Say ( Khatam , D8b-Khat-3 ) ;
6075: LD_EXP 14
6079: PPUSH
6080: LD_STRING D8b-Khat-3
6082: PPUSH
6083: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-4 , D8b-FSol1-4 ) ;
6087: LD_INT 22
6089: PUSH
6090: LD_INT 1
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: PUSH
6097: EMPTY
6098: LIST
6099: PUSH
6100: LD_EXP 1
6104: PUSH
6105: LD_EXP 14
6109: PUSH
6110: LD_EXP 13
6114: PUSH
6115: EMPTY
6116: LIST
6117: LIST
6118: LIST
6119: DIFF
6120: PPUSH
6121: CALL_OW 69
6125: PPUSH
6126: LD_STRING D8b-Sol1-4
6128: PPUSH
6129: LD_STRING D8b-FSol1-4
6131: PPUSH
6132: CALL 7075 0 3
// DialogueOff ;
6136: CALL_OW 7
// end ; end ;
6140: PPOPN 2
6142: END
// export function ArabianTrait ; var i ; begin
6143: LD_INT 0
6145: PPUSH
6146: PPUSH
// ChangeSideFog ( 2 , 2 ) ;
6147: LD_INT 2
6149: PPUSH
6150: LD_INT 2
6152: PPUSH
6153: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
6157: LD_INT 1
6159: PPUSH
6160: LD_INT 2
6162: PPUSH
6163: LD_INT 2
6165: PPUSH
6166: LD_INT 1
6168: PPUSH
6169: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
6173: LD_INT 3
6175: PPUSH
6176: LD_INT 2
6178: PPUSH
6179: LD_INT 1
6181: PPUSH
6182: LD_INT 1
6184: PPUSH
6185: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
6189: LD_ADDR_VAR 0 2
6193: PUSH
6194: LD_INT 22
6196: PUSH
6197: LD_INT 2
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 21
6206: PUSH
6207: LD_INT 1
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PPUSH
6218: CALL_OW 69
6222: PUSH
6223: FOR_IN
6224: IFFALSE 6364
// begin ComExitBuilding ( i ) ;
6226: LD_VAR 0 2
6230: PPUSH
6231: CALL_OW 122
// wait ( 0 0$1 ) ;
6235: LD_INT 35
6237: PPUSH
6238: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
6242: LD_VAR 0 2
6246: PPUSH
6247: LD_INT 77
6249: PPUSH
6250: LD_INT 10
6252: PPUSH
6253: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_INT 82
6264: PPUSH
6265: LD_INT 5
6267: PPUSH
6268: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
6272: LD_VAR 0 2
6276: PPUSH
6277: LD_INT 95
6279: PPUSH
6280: LD_INT 12
6282: PPUSH
6283: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
6287: LD_VAR 0 2
6291: PPUSH
6292: LD_INT 102
6294: PPUSH
6295: LD_INT 11
6297: PPUSH
6298: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
6302: LD_VAR 0 2
6306: PPUSH
6307: LD_INT 116
6309: PPUSH
6310: LD_INT 15
6312: PPUSH
6313: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
6317: LD_VAR 0 2
6321: PPUSH
6322: LD_INT 140
6324: PPUSH
6325: LD_INT 25
6327: PPUSH
6328: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
6332: LD_VAR 0 2
6336: PPUSH
6337: LD_INT 160
6339: PPUSH
6340: LD_INT 56
6342: PPUSH
6343: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_INT 189
6354: PPUSH
6355: LD_INT 79
6357: PPUSH
6358: CALL_OW 174
// end ;
6362: GO 6223
6364: POP
6365: POP
// arabianAttackersAI = 1 ;
6366: LD_ADDR_EXP 44
6370: PUSH
6371: LD_INT 1
6373: ST_TO_ADDR
// end ;
6374: LD_VAR 0 1
6378: RET
// every 0 0$1 do var i ;
6379: GO 6381
6381: DISABLE
6382: LD_INT 0
6384: PPUSH
// begin enable ;
6385: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
6386: LD_ADDR_VAR 0 1
6390: PUSH
6391: LD_INT 7
6393: PPUSH
6394: LD_INT 22
6396: PUSH
6397: LD_INT 2
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: CALL_OW 70
6408: PUSH
6409: FOR_IN
6410: IFFALSE 6441
// begin RemoveUnit ( i ) ;
6412: LD_VAR 0 1
6416: PPUSH
6417: CALL_OW 64
// arabianEscape = 1 ;
6421: LD_ADDR_EXP 45
6425: PUSH
6426: LD_INT 1
6428: ST_TO_ADDR
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
6429: LD_INT 1
6431: PPUSH
6432: LD_STRING 10_ScientistsEscape_1
6434: PPUSH
6435: CALL_OW 39
// end ;
6439: GO 6409
6441: POP
6442: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
6443: LD_EXP 14
6447: PPUSH
6448: LD_INT 7
6450: PPUSH
6451: CALL_OW 308
6455: IFFALSE 6474
// begin KhatamStatus = 1 ;
6457: LD_ADDR_EXP 46
6461: PUSH
6462: LD_INT 1
6464: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
6465: LD_EXP 14
6469: PPUSH
6470: CALL_OW 64
// end ; if IsInArea ( Dietrich , ArabianSpawn2 ) then
6474: LD_EXP 25
6478: PPUSH
6479: LD_INT 7
6481: PPUSH
6482: CALL_OW 308
6486: IFFALSE 6498
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6488: LD_INT 1
6490: PPUSH
6491: LD_STRING 10_GensherEscape_1
6493: PPUSH
6494: CALL_OW 39
// end ;
6498: PPOPN 1
6500: END
// every 0 0$1 trigger IsDead ( Khatam ) do
6501: LD_EXP 14
6505: PPUSH
6506: CALL_OW 301
6510: IFFALSE 6523
6512: GO 6514
6514: DISABLE
// KhatamStatus = 0 ;
6515: LD_ADDR_EXP 46
6519: PUSH
6520: LD_INT 0
6522: ST_TO_ADDR
6523: END
// every 6 6$30 trigger joinEpsilon = 1 and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 do
6524: LD_EXP 27
6528: PUSH
6529: LD_INT 1
6531: EQUAL
6532: PUSH
6533: LD_STRING 02_mikhailStatus_1
6535: PPUSH
6536: LD_INT 0
6538: PPUSH
6539: CALL_OW 30
6543: PUSH
6544: LD_INT 1
6546: EQUAL
6547: AND
6548: IFFALSE 6557
6550: GO 6552
6552: DISABLE
// PrepareCornell ;
6553: CALL 2452 0 0
6557: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
6558: LD_INT 1
6560: PPUSH
6561: LD_EXP 19
6565: PPUSH
6566: CALL_OW 292
6570: IFFALSE 6795
6572: GO 6574
6574: DISABLE
// begin InGameOn ;
6575: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
6579: LD_EXP 19
6583: PPUSH
6584: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
6588: LD_EXP 19
6592: PPUSH
6593: LD_STRING D7-Corn-1
6595: PPUSH
6596: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM , Joan ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
6600: LD_INT 22
6602: PUSH
6603: LD_INT 1
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: LD_INT 2
6612: PUSH
6613: LD_INT 25
6615: PUSH
6616: LD_INT 1
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: PUSH
6623: LD_INT 25
6625: PUSH
6626: LD_INT 2
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: PUSH
6633: LD_INT 25
6635: PUSH
6636: LD_INT 3
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 25
6645: PUSH
6646: LD_INT 4
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_EXP 1
6668: PUSH
6669: LD_EXP 13
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: DIFF
6678: PPUSH
6679: CALL_OW 69
6683: PPUSH
6684: LD_STRING D7-Sol1-1
6686: PPUSH
6687: LD_STRING D7-FSol1-1
6689: PPUSH
6690: CALL 7075 0 3
// CenterNowOnUnits ( Cornell ) ;
6694: LD_EXP 19
6698: PPUSH
6699: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
6703: LD_EXP 19
6707: PPUSH
6708: LD_STRING D7-Corn-2
6710: PPUSH
6711: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
6715: LD_EXP 1
6719: PPUSH
6720: LD_STRING D7-JMM-2
6722: PPUSH
6723: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
6727: LD_EXP 19
6731: PPUSH
6732: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
6736: LD_EXP 19
6740: PPUSH
6741: LD_STRING D7-Corn-3
6743: PPUSH
6744: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
6748: LD_EXP 19
6752: PPUSH
6753: LD_INT 250
6755: PPUSH
6756: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
6760: LD_EXP 19
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 235
// wait ( 0 0$1 ) ;
6772: LD_INT 35
6774: PPUSH
6775: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
6779: LD_EXP 1
6783: PPUSH
6784: LD_STRING D7-JMM-3
6786: PPUSH
6787: CALL_OW 88
// InGameOff ;
6791: CALL_OW 9
// end ;
6795: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
6796: LD_EXP 19
6800: PPUSH
6801: CALL_OW 255
6805: PUSH
6806: LD_INT 1
6808: EQUAL
6809: PUSH
6810: LD_EXP 19
6814: PPUSH
6815: CALL_OW 256
6819: PUSH
6820: LD_INT 251
6822: GREATER
6823: AND
6824: IFFALSE 7017
6826: GO 6828
6828: DISABLE
// begin DialogueOn ;
6829: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
6833: LD_EXP 1
6837: PPUSH
6838: LD_STRING D7a-JMM-1
6840: PPUSH
6841: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
6845: LD_EXP 19
6849: PPUSH
6850: LD_STRING D7a-Corn-1
6852: PPUSH
6853: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
6857: LD_EXP 1
6861: PPUSH
6862: LD_STRING D7a-JMM-2
6864: PPUSH
6865: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
6869: LD_EXP 19
6873: PPUSH
6874: LD_STRING D7a-Corn-2
6876: PPUSH
6877: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
6881: LD_EXP 1
6885: PPUSH
6886: LD_STRING D7a-JMM-3
6888: PPUSH
6889: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
6893: LD_EXP 19
6897: PPUSH
6898: LD_STRING D7a-Corn-3
6900: PPUSH
6901: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
6905: LD_EXP 1
6909: PPUSH
6910: LD_STRING D7a-JMM-4
6912: PPUSH
6913: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
6917: LD_EXP 19
6921: PPUSH
6922: LD_STRING D7a-Corn-4
6924: PPUSH
6925: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
6929: LD_EXP 1
6933: PPUSH
6934: LD_STRING D7a-JMM-5
6936: PPUSH
6937: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
6941: LD_EXP 19
6945: PPUSH
6946: LD_STRING D7a-Corn-5
6948: PPUSH
6949: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
6953: LD_EXP 1
6957: PPUSH
6958: LD_STRING D7a-JMM-6
6960: PPUSH
6961: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
6965: LD_EXP 19
6969: PPUSH
6970: LD_STRING D7a-Corn-6
6972: PPUSH
6973: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
6977: LD_EXP 1
6981: PPUSH
6982: LD_STRING D7a-JMM-7
6984: PPUSH
6985: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
6989: LD_EXP 19
6993: PPUSH
6994: LD_STRING D7a-Corn-7
6996: PPUSH
6997: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
7001: LD_EXP 1
7005: PPUSH
7006: LD_STRING D7a-JMM-8
7008: PPUSH
7009: CALL_OW 88
// DialogueOff ;
7013: CALL_OW 7
// end ; end_of_file
7017: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7018: LD_INT 0
7020: PPUSH
7021: PPUSH
// if exist_mode then
7022: LD_VAR 0 2
7026: IFFALSE 7045
// unit := CreateCharacter ( ident ) else
7028: LD_ADDR_VAR 0 4
7032: PUSH
7033: LD_VAR 0 1
7037: PPUSH
7038: CALL_OW 34
7042: ST_TO_ADDR
7043: GO 7060
// unit := NewCharacter ( ident ) ;
7045: LD_ADDR_VAR 0 4
7049: PUSH
7050: LD_VAR 0 1
7054: PPUSH
7055: CALL_OW 25
7059: ST_TO_ADDR
// result := unit ;
7060: LD_ADDR_VAR 0 3
7064: PUSH
7065: LD_VAR 0 4
7069: ST_TO_ADDR
// end ;
7070: LD_VAR 0 3
7074: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
7075: LD_INT 0
7077: PPUSH
7078: PPUSH
7079: PPUSH
// rnd = rand ( 1 , characters ) ;
7080: LD_ADDR_VAR 0 6
7084: PUSH
7085: LD_INT 1
7087: PPUSH
7088: LD_VAR 0 1
7092: PPUSH
7093: CALL_OW 12
7097: ST_TO_ADDR
// for i = 1 to characters do
7098: LD_ADDR_VAR 0 5
7102: PUSH
7103: DOUBLE
7104: LD_INT 1
7106: DEC
7107: ST_TO_ADDR
7108: LD_VAR 0 1
7112: PUSH
7113: FOR_TO
7114: IFFALSE 7224
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
7116: LD_VAR 0 5
7120: PUSH
7121: LD_VAR 0 6
7125: EQUAL
7126: PUSH
7127: LD_VAR 0 1
7131: PUSH
7132: LD_VAR 0 5
7136: ARRAY
7137: PPUSH
7138: CALL_OW 258
7142: PUSH
7143: LD_INT 1
7145: EQUAL
7146: AND
7147: IFFALSE 7169
// Say ( characters [ i ] , dialogMID ) ;
7149: LD_VAR 0 1
7153: PUSH
7154: LD_VAR 0 5
7158: ARRAY
7159: PPUSH
7160: LD_VAR 0 2
7164: PPUSH
7165: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
7169: LD_VAR 0 5
7173: PUSH
7174: LD_VAR 0 6
7178: EQUAL
7179: PUSH
7180: LD_VAR 0 1
7184: PUSH
7185: LD_VAR 0 5
7189: ARRAY
7190: PPUSH
7191: CALL_OW 258
7195: PUSH
7196: LD_INT 2
7198: EQUAL
7199: AND
7200: IFFALSE 7222
// Say ( characters [ i ] , dialogFID ) ;
7202: LD_VAR 0 1
7206: PUSH
7207: LD_VAR 0 5
7211: ARRAY
7212: PPUSH
7213: LD_VAR 0 3
7217: PPUSH
7218: CALL_OW 88
// end ;
7222: GO 7113
7224: POP
7225: POP
// end ;
7226: LD_VAR 0 4
7230: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
7231: LD_INT 0
7233: PPUSH
7234: PPUSH
// for i in charactersList do
7235: LD_ADDR_VAR 0 4
7239: PUSH
7240: LD_VAR 0 1
7244: PUSH
7245: FOR_IN
7246: IFFALSE 7275
// begin if IsOk ( i ) then
7248: LD_VAR 0 4
7252: PPUSH
7253: CALL_OW 302
7257: IFFALSE 7273
// SaveCharacters ( i , ident ) ;
7259: LD_VAR 0 4
7263: PPUSH
7264: LD_VAR 0 2
7268: PPUSH
7269: CALL_OW 38
// end ;
7273: GO 7245
7275: POP
7276: POP
// end ;
7277: LD_VAR 0 3
7281: RET
// export function PrepareDifficulty ; begin
7282: LD_INT 0
7284: PPUSH
// if difficulty = 1 then
7285: LD_OWVAR 67
7289: PUSH
7290: LD_INT 1
7292: EQUAL
7293: IFFALSE 7337
// begin RuSolMinLevel = 4 ;
7295: LD_ADDR_EXP 34
7299: PUSH
7300: LD_INT 4
7302: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7303: LD_ADDR_EXP 35
7307: PUSH
7308: LD_INT 7
7310: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7311: LD_INT 51
7313: PPUSH
7314: LD_INT 6
7316: PPUSH
7317: LD_INT 2
7319: PPUSH
7320: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7324: LD_INT 51
7326: PPUSH
7327: LD_INT 5
7329: PPUSH
7330: LD_INT 2
7332: PPUSH
7333: CALL_OW 322
// end ; if difficulty = 2 then
7337: LD_OWVAR 67
7341: PUSH
7342: LD_INT 2
7344: EQUAL
7345: IFFALSE 7441
// begin RuSolMinLevel = 5 ;
7347: LD_ADDR_EXP 34
7351: PUSH
7352: LD_INT 5
7354: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
7355: LD_ADDR_EXP 35
7359: PUSH
7360: LD_INT 7
7362: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7363: LD_INT 51
7365: PPUSH
7366: LD_INT 6
7368: PPUSH
7369: LD_INT 2
7371: PPUSH
7372: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7376: LD_INT 57
7378: PPUSH
7379: LD_INT 6
7381: PPUSH
7382: LD_INT 2
7384: PPUSH
7385: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7389: LD_INT 63
7391: PPUSH
7392: LD_INT 6
7394: PPUSH
7395: LD_INT 2
7397: PPUSH
7398: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7402: LD_INT 51
7404: PPUSH
7405: LD_INT 5
7407: PPUSH
7408: LD_INT 2
7410: PPUSH
7411: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
7415: LD_INT 5
7417: PPUSH
7418: LD_INT 2
7420: PPUSH
7421: LD_INT 2
7423: PPUSH
7424: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
7428: LD_INT 5
7430: PPUSH
7431: LD_INT 5
7433: PPUSH
7434: LD_INT 2
7436: PPUSH
7437: CALL_OW 322
// end ; if difficulty = 3 then
7441: LD_OWVAR 67
7445: PUSH
7446: LD_INT 3
7448: EQUAL
7449: IFFALSE 7597
// begin RuSolMinLevel = 6 ;
7451: LD_ADDR_EXP 34
7455: PUSH
7456: LD_INT 6
7458: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
7459: LD_ADDR_EXP 35
7463: PUSH
7464: LD_INT 8
7466: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
7467: LD_INT 51
7469: PPUSH
7470: LD_INT 6
7472: PPUSH
7473: LD_INT 2
7475: PPUSH
7476: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
7480: LD_INT 57
7482: PPUSH
7483: LD_INT 6
7485: PPUSH
7486: LD_INT 2
7488: PPUSH
7489: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
7493: LD_INT 52
7495: PPUSH
7496: LD_INT 6
7498: PPUSH
7499: LD_INT 2
7501: PPUSH
7502: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
7506: LD_INT 58
7508: PPUSH
7509: LD_INT 6
7511: PPUSH
7512: LD_INT 2
7514: PPUSH
7515: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
7519: LD_INT 63
7521: PPUSH
7522: LD_INT 6
7524: PPUSH
7525: LD_INT 2
7527: PPUSH
7528: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
7532: LD_INT 64
7534: PPUSH
7535: LD_INT 6
7537: PPUSH
7538: LD_INT 2
7540: PPUSH
7541: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
7545: LD_INT 51
7547: PPUSH
7548: LD_INT 5
7550: PPUSH
7551: LD_INT 2
7553: PPUSH
7554: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
7558: LD_INT 52
7560: PPUSH
7561: LD_INT 5
7563: PPUSH
7564: LD_INT 2
7566: PPUSH
7567: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
7571: LD_INT 66
7573: PPUSH
7574: LD_INT 2
7576: PPUSH
7577: LD_INT 2
7579: PPUSH
7580: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
7584: LD_INT 66
7586: PPUSH
7587: LD_INT 5
7589: PPUSH
7590: LD_INT 2
7592: PPUSH
7593: CALL_OW 322
// end ; end ;
7597: LD_VAR 0 1
7601: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
7602: LD_INT 0
7604: PPUSH
7605: PPUSH
7606: PPUSH
7607: PPUSH
// ruPossition = position ;
7608: LD_ADDR_EXP 39
7612: PUSH
7613: LD_VAR 0 1
7617: ST_TO_ADDR
// if position = 1 then
7618: LD_VAR 0 1
7622: PUSH
7623: LD_INT 1
7625: EQUAL
7626: IFFALSE 8402
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7628: LD_ADDR_VAR 0 4
7632: PUSH
7633: LD_INT 22
7635: PUSH
7636: LD_INT 3
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 25
7645: PUSH
7646: LD_INT 2
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: PPUSH
7657: CALL_OW 69
7661: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
7662: LD_ADDR_VAR 0 5
7666: PUSH
7667: LD_INT 0
7669: PUSH
7670: LD_INT 49
7672: PUSH
7673: LD_INT 74
7675: PUSH
7676: LD_INT 3
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: PUSH
7685: LD_INT 4
7687: PUSH
7688: LD_INT 73
7690: PUSH
7691: LD_INT 88
7693: PUSH
7694: LD_INT 5
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: PUSH
7703: LD_INT 4
7705: PUSH
7706: LD_INT 56
7708: PUSH
7709: LD_INT 62
7711: PUSH
7712: LD_INT 3
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 29
7723: PUSH
7724: LD_INT 43
7726: PUSH
7727: LD_INT 68
7729: PUSH
7730: LD_INT 2
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: LIST
7737: LIST
7738: PUSH
7739: LD_INT 30
7741: PUSH
7742: LD_INT 43
7744: PUSH
7745: LD_INT 79
7747: PUSH
7748: LD_INT 5
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 28
7759: PUSH
7760: LD_INT 60
7762: PUSH
7763: LD_INT 75
7765: PUSH
7766: LD_INT 1
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: LIST
7773: LIST
7774: PUSH
7775: LD_INT 2
7777: PUSH
7778: LD_INT 50
7780: PUSH
7781: LD_INT 87
7783: PUSH
7784: LD_INT 1
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 28
7795: PUSH
7796: LD_INT 45
7798: PUSH
7799: LD_INT 67
7801: PUSH
7802: LD_INT 2
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 17
7813: PUSH
7814: LD_INT 47
7816: PUSH
7817: LD_INT 84
7819: PUSH
7820: LD_INT 2
7822: PUSH
7823: EMPTY
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: PUSH
7829: LD_INT 18
7831: PUSH
7832: LD_INT 46
7834: PUSH
7835: LD_INT 87
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: PUSH
7847: LD_INT 28
7849: PUSH
7850: LD_INT 41
7852: PUSH
7853: LD_INT 64
7855: PUSH
7856: LD_INT 5
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: LIST
7863: LIST
7864: PUSH
7865: LD_INT 32
7867: PUSH
7868: LD_INT 75
7870: PUSH
7871: LD_INT 76
7873: PUSH
7874: LD_INT 5
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 32
7885: PUSH
7886: LD_INT 77
7888: PUSH
7889: LD_INT 75
7891: PUSH
7892: LD_INT 5
7894: PUSH
7895: EMPTY
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: PUSH
7901: LD_INT 32
7903: PUSH
7904: LD_INT 69
7906: PUSH
7907: LD_INT 68
7909: PUSH
7910: LD_INT 3
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 32
7921: PUSH
7922: LD_INT 59
7924: PUSH
7925: LD_INT 96
7927: PUSH
7928: LD_INT 5
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: PUSH
7937: LD_INT 32
7939: PUSH
7940: LD_INT 56
7942: PUSH
7943: LD_INT 96
7945: PUSH
7946: LD_INT 0
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 32
7957: PUSH
7958: LD_INT 51
7960: PUSH
7961: LD_INT 61
7963: PUSH
7964: LD_INT 3
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: LD_INT 32
7975: PUSH
7976: LD_INT 42
7978: PUSH
7979: LD_INT 60
7981: PUSH
7982: LD_INT 3
7984: PUSH
7985: EMPTY
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: PUSH
7991: LD_INT 32
7993: PUSH
7994: LD_INT 36
7996: PUSH
7997: LD_INT 58
7999: PUSH
8000: LD_INT 3
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 32
8011: PUSH
8012: LD_INT 39
8014: PUSH
8015: LD_INT 59
8017: PUSH
8018: LD_INT 3
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: PUSH
8027: LD_INT 32
8029: PUSH
8030: LD_INT 61
8032: PUSH
8033: LD_INT 64
8035: PUSH
8036: LD_INT 3
8038: PUSH
8039: EMPTY
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: PUSH
8045: LD_INT 33
8047: PUSH
8048: LD_INT 63
8050: PUSH
8051: LD_INT 90
8053: PUSH
8054: LD_INT 5
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: PUSH
8063: LD_INT 33
8065: PUSH
8066: LD_INT 64
8068: PUSH
8069: LD_INT 88
8071: PUSH
8072: LD_INT 5
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: PUSH
8081: LD_INT 33
8083: PUSH
8084: LD_INT 72
8086: PUSH
8087: LD_INT 82
8089: PUSH
8090: LD_INT 5
8092: PUSH
8093: EMPTY
8094: LIST
8095: LIST
8096: LIST
8097: LIST
8098: PUSH
8099: LD_INT 6
8101: PUSH
8102: LD_INT 42
8104: PUSH
8105: LD_INT 74
8107: PUSH
8108: LD_INT 1
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 6
8119: PUSH
8120: LD_INT 56
8122: PUSH
8123: LD_INT 77
8125: PUSH
8126: LD_INT 2
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 21
8137: PUSH
8138: LD_INT 54
8140: PUSH
8141: LD_INT 91
8143: PUSH
8144: LD_INT 5
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 16
8155: PUSH
8156: LD_INT 50
8158: PUSH
8159: LD_INT 83
8161: PUSH
8162: LD_INT 3
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 24
8173: PUSH
8174: LD_INT 50
8176: PUSH
8177: LD_INT 90
8179: PUSH
8180: LD_INT 0
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: LIST
8187: LIST
8188: PUSH
8189: EMPTY
8190: LIST
8191: LIST
8192: LIST
8193: LIST
8194: LIST
8195: LIST
8196: LIST
8197: LIST
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8220: LD_ADDR_VAR 0 3
8224: PUSH
8225: LD_INT 22
8227: PUSH
8228: LD_INT 3
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_INT 3
8237: PUSH
8238: LD_INT 25
8240: PUSH
8241: LD_INT 2
8243: PUSH
8244: EMPTY
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: PPUSH
8256: CALL_OW 69
8260: PUSH
8261: FOR_IN
8262: IFFALSE 8309
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
8264: LD_VAR 0 3
8268: PPUSH
8269: LD_VAR 0 5
8273: PUSH
8274: LD_INT 2
8276: ARRAY
8277: PUSH
8278: LD_INT 2
8280: ARRAY
8281: PUSH
8282: LD_INT 3
8284: PLUS
8285: PPUSH
8286: LD_VAR 0 5
8290: PUSH
8291: LD_INT 2
8293: ARRAY
8294: PUSH
8295: LD_INT 3
8297: ARRAY
8298: PUSH
8299: LD_INT 2
8301: PLUS
8302: PPUSH
8303: CALL_OW 171
8307: GO 8261
8309: POP
8310: POP
// for i := 1 to buildingsTab do
8311: LD_ADDR_VAR 0 3
8315: PUSH
8316: DOUBLE
8317: LD_INT 1
8319: DEC
8320: ST_TO_ADDR
8321: LD_VAR 0 5
8325: PUSH
8326: FOR_TO
8327: IFFALSE 8400
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8329: LD_VAR 0 4
8333: PPUSH
8334: LD_VAR 0 5
8338: PUSH
8339: LD_VAR 0 3
8343: ARRAY
8344: PUSH
8345: LD_INT 1
8347: ARRAY
8348: PPUSH
8349: LD_VAR 0 5
8353: PUSH
8354: LD_VAR 0 3
8358: ARRAY
8359: PUSH
8360: LD_INT 2
8362: ARRAY
8363: PPUSH
8364: LD_VAR 0 5
8368: PUSH
8369: LD_VAR 0 3
8373: ARRAY
8374: PUSH
8375: LD_INT 3
8377: ARRAY
8378: PPUSH
8379: LD_VAR 0 5
8383: PUSH
8384: LD_VAR 0 3
8388: ARRAY
8389: PUSH
8390: LD_INT 4
8392: ARRAY
8393: PPUSH
8394: CALL_OW 205
8398: GO 8326
8400: POP
8401: POP
// end ; if position = 2 then
8402: LD_VAR 0 1
8406: PUSH
8407: LD_INT 2
8409: EQUAL
8410: IFFALSE 9053
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
8412: LD_ADDR_VAR 0 4
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 3
8422: PUSH
8423: EMPTY
8424: LIST
8425: LIST
8426: PUSH
8427: LD_INT 25
8429: PUSH
8430: LD_INT 2
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: EMPTY
8438: LIST
8439: LIST
8440: PPUSH
8441: CALL_OW 69
8445: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
8446: LD_ADDR_VAR 0 5
8450: PUSH
8451: LD_INT 0
8453: PUSH
8454: LD_INT 104
8456: PUSH
8457: LD_INT 110
8459: PUSH
8460: LD_INT 5
8462: PUSH
8463: EMPTY
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 4
8471: PUSH
8472: LD_INT 98
8474: PUSH
8475: LD_INT 90
8477: PUSH
8478: LD_INT 3
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 29
8489: PUSH
8490: LD_INT 103
8492: PUSH
8493: LD_INT 114
8495: PUSH
8496: LD_INT 2
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_INT 30
8507: PUSH
8508: LD_INT 99
8510: PUSH
8511: LD_INT 114
8513: PUSH
8514: LD_INT 3
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: LIST
8522: PUSH
8523: LD_INT 28
8525: PUSH
8526: LD_INT 100
8528: PUSH
8529: LD_INT 112
8531: PUSH
8532: LD_INT 1
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: PUSH
8541: LD_INT 2
8543: PUSH
8544: LD_INT 92
8546: PUSH
8547: LD_INT 101
8549: PUSH
8550: LD_INT 0
8552: PUSH
8553: EMPTY
8554: LIST
8555: LIST
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 28
8561: PUSH
8562: LD_INT 97
8564: PUSH
8565: LD_INT 116
8567: PUSH
8568: LD_INT 5
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: PUSH
8577: LD_INT 17
8579: PUSH
8580: LD_INT 96
8582: PUSH
8583: LD_INT 101
8585: PUSH
8586: LD_INT 4
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: PUSH
8595: LD_INT 18
8597: PUSH
8598: LD_INT 88
8600: PUSH
8601: LD_INT 97
8603: PUSH
8604: LD_INT 2
8606: PUSH
8607: EMPTY
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: PUSH
8613: LD_INT 28
8615: PUSH
8616: LD_INT 106
8618: PUSH
8619: LD_INT 92
8621: PUSH
8622: LD_INT 2
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: LIST
8629: LIST
8630: PUSH
8631: LD_INT 32
8633: PUSH
8634: LD_INT 88
8636: PUSH
8637: LD_INT 89
8639: PUSH
8640: LD_INT 2
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: PUSH
8649: LD_INT 32
8651: PUSH
8652: LD_INT 86
8654: PUSH
8655: LD_INT 90
8657: PUSH
8658: LD_INT 2
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 32
8669: PUSH
8670: LD_INT 85
8672: PUSH
8673: LD_INT 99
8675: PUSH
8676: LD_INT 2
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 32
8687: PUSH
8688: LD_INT 85
8690: PUSH
8691: LD_INT 107
8693: PUSH
8694: LD_INT 1
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 33
8705: PUSH
8706: LD_INT 105
8708: PUSH
8709: LD_INT 99
8711: PUSH
8712: LD_INT 1
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 33
8723: PUSH
8724: LD_INT 102
8726: PUSH
8727: LD_INT 92
8729: PUSH
8730: LD_INT 3
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: PUSH
8739: LD_INT 33
8741: PUSH
8742: LD_INT 105
8744: PUSH
8745: LD_INT 92
8747: PUSH
8748: LD_INT 2
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: PUSH
8757: LD_INT 6
8759: PUSH
8760: LD_INT 92
8762: PUSH
8763: LD_INT 110
8765: PUSH
8766: LD_INT 0
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 6
8777: PUSH
8778: LD_INT 103
8780: PUSH
8781: LD_INT 103
8783: PUSH
8784: LD_INT 5
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 21
8795: PUSH
8796: LD_INT 89
8798: PUSH
8799: LD_INT 101
8801: PUSH
8802: LD_INT 1
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: PUSH
8811: LD_INT 16
8813: PUSH
8814: LD_INT 95
8816: PUSH
8817: LD_INT 104
8819: PUSH
8820: LD_INT 4
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: PUSH
8829: LD_INT 24
8831: PUSH
8832: LD_INT 92
8834: PUSH
8835: LD_INT 105
8837: PUSH
8838: LD_INT 0
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: PUSH
8847: EMPTY
8848: LIST
8849: LIST
8850: LIST
8851: LIST
8852: LIST
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8871: LD_ADDR_VAR 0 3
8875: PUSH
8876: LD_INT 22
8878: PUSH
8879: LD_INT 3
8881: PUSH
8882: EMPTY
8883: LIST
8884: LIST
8885: PUSH
8886: LD_INT 3
8888: PUSH
8889: LD_INT 25
8891: PUSH
8892: LD_INT 2
8894: PUSH
8895: EMPTY
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PPUSH
8907: CALL_OW 69
8911: PUSH
8912: FOR_IN
8913: IFFALSE 8960
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
8915: LD_VAR 0 3
8919: PPUSH
8920: LD_VAR 0 5
8924: PUSH
8925: LD_INT 2
8927: ARRAY
8928: PUSH
8929: LD_INT 2
8931: ARRAY
8932: PUSH
8933: LD_INT 2
8935: PLUS
8936: PPUSH
8937: LD_VAR 0 5
8941: PUSH
8942: LD_INT 2
8944: ARRAY
8945: PUSH
8946: LD_INT 3
8948: ARRAY
8949: PUSH
8950: LD_INT 1
8952: PLUS
8953: PPUSH
8954: CALL_OW 171
8958: GO 8912
8960: POP
8961: POP
// for i := 1 to buildingsTab do
8962: LD_ADDR_VAR 0 3
8966: PUSH
8967: DOUBLE
8968: LD_INT 1
8970: DEC
8971: ST_TO_ADDR
8972: LD_VAR 0 5
8976: PUSH
8977: FOR_TO
8978: IFFALSE 9051
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8980: LD_VAR 0 4
8984: PPUSH
8985: LD_VAR 0 5
8989: PUSH
8990: LD_VAR 0 3
8994: ARRAY
8995: PUSH
8996: LD_INT 1
8998: ARRAY
8999: PPUSH
9000: LD_VAR 0 5
9004: PUSH
9005: LD_VAR 0 3
9009: ARRAY
9010: PUSH
9011: LD_INT 2
9013: ARRAY
9014: PPUSH
9015: LD_VAR 0 5
9019: PUSH
9020: LD_VAR 0 3
9024: ARRAY
9025: PUSH
9026: LD_INT 3
9028: ARRAY
9029: PPUSH
9030: LD_VAR 0 5
9034: PUSH
9035: LD_VAR 0 3
9039: ARRAY
9040: PUSH
9041: LD_INT 4
9043: ARRAY
9044: PPUSH
9045: CALL_OW 205
9049: GO 8977
9051: POP
9052: POP
// end ; if position = 3 then
9053: LD_VAR 0 1
9057: PUSH
9058: LD_INT 3
9060: EQUAL
9061: IFFALSE 9875
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
9063: LD_ADDR_VAR 0 4
9067: PUSH
9068: LD_INT 22
9070: PUSH
9071: LD_INT 3
9073: PUSH
9074: EMPTY
9075: LIST
9076: LIST
9077: PUSH
9078: LD_INT 25
9080: PUSH
9081: LD_INT 2
9083: PUSH
9084: EMPTY
9085: LIST
9086: LIST
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PPUSH
9092: CALL_OW 69
9096: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
9097: LD_ADDR_VAR 0 5
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: LD_INT 151
9107: PUSH
9108: LD_INT 71
9110: PUSH
9111: LD_INT 4
9113: PUSH
9114: EMPTY
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 4
9122: PUSH
9123: LD_INT 145
9125: PUSH
9126: LD_INT 53
9128: PUSH
9129: LD_INT 3
9131: PUSH
9132: EMPTY
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: PUSH
9138: LD_INT 4
9140: PUSH
9141: LD_INT 172
9143: PUSH
9144: LD_INT 102
9146: PUSH
9147: LD_INT 5
9149: PUSH
9150: EMPTY
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: PUSH
9156: LD_INT 29
9158: PUSH
9159: LD_INT 152
9161: PUSH
9162: LD_INT 85
9164: PUSH
9165: LD_INT 3
9167: PUSH
9168: EMPTY
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: PUSH
9174: LD_INT 30
9176: PUSH
9177: LD_INT 156
9179: PUSH
9180: LD_INT 92
9182: PUSH
9183: LD_INT 3
9185: PUSH
9186: EMPTY
9187: LIST
9188: LIST
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 28
9194: PUSH
9195: LD_INT 151
9197: PUSH
9198: LD_INT 66
9200: PUSH
9201: LD_INT 4
9203: PUSH
9204: EMPTY
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 2
9212: PUSH
9213: LD_INT 163
9215: PUSH
9216: LD_INT 95
9218: PUSH
9219: LD_INT 5
9221: PUSH
9222: EMPTY
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 28
9230: PUSH
9231: LD_INT 149
9233: PUSH
9234: LD_INT 63
9236: PUSH
9237: LD_INT 4
9239: PUSH
9240: EMPTY
9241: LIST
9242: LIST
9243: LIST
9244: LIST
9245: PUSH
9246: LD_INT 17
9248: PUSH
9249: LD_INT 167
9251: PUSH
9252: LD_INT 99
9254: PUSH
9255: LD_INT 5
9257: PUSH
9258: EMPTY
9259: LIST
9260: LIST
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 18
9266: PUSH
9267: LD_INT 163
9269: PUSH
9270: LD_INT 98
9272: PUSH
9273: LD_INT 0
9275: PUSH
9276: EMPTY
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: PUSH
9282: LD_INT 28
9284: PUSH
9285: LD_INT 154
9287: PUSH
9288: LD_INT 70
9290: PUSH
9291: LD_INT 4
9293: PUSH
9294: EMPTY
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 32
9302: PUSH
9303: LD_INT 155
9305: PUSH
9306: LD_INT 62
9308: PUSH
9309: LD_INT 4
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: PUSH
9318: LD_INT 32
9320: PUSH
9321: LD_INT 161
9323: PUSH
9324: LD_INT 69
9326: PUSH
9327: LD_INT 4
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 32
9338: PUSH
9339: LD_INT 168
9341: PUSH
9342: LD_INT 78
9344: PUSH
9345: LD_INT 4
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: LIST
9352: LIST
9353: PUSH
9354: LD_INT 32
9356: PUSH
9357: LD_INT 163
9359: PUSH
9360: LD_INT 80
9362: PUSH
9363: LD_INT 5
9365: PUSH
9366: EMPTY
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: PUSH
9372: LD_INT 32
9374: PUSH
9375: LD_INT 136
9377: PUSH
9378: LD_INT 73
9380: PUSH
9381: LD_INT 0
9383: PUSH
9384: EMPTY
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: PUSH
9390: LD_INT 32
9392: PUSH
9393: LD_INT 157
9395: PUSH
9396: LD_INT 98
9398: PUSH
9399: LD_INT 0
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: LD_INT 32
9410: PUSH
9411: LD_INT 150
9413: PUSH
9414: LD_INT 87
9416: PUSH
9417: LD_INT 1
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: LIST
9424: LIST
9425: PUSH
9426: LD_INT 33
9428: PUSH
9429: LD_INT 171
9431: PUSH
9432: LD_INT 97
9434: PUSH
9435: LD_INT 4
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: PUSH
9444: LD_INT 33
9446: PUSH
9447: LD_INT 168
9449: PUSH
9450: LD_INT 92
9452: PUSH
9453: LD_INT 4
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: PUSH
9462: LD_INT 33
9464: PUSH
9465: LD_INT 166
9467: PUSH
9468: LD_INT 80
9470: PUSH
9471: LD_INT 5
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: LD_INT 33
9482: PUSH
9483: LD_INT 141
9485: PUSH
9486: LD_INT 54
9488: PUSH
9489: LD_INT 2
9491: PUSH
9492: EMPTY
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 33
9500: PUSH
9501: LD_INT 133
9503: PUSH
9504: LD_INT 57
9506: PUSH
9507: LD_INT 2
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 33
9518: PUSH
9519: LD_INT 132
9521: PUSH
9522: LD_INT 61
9524: PUSH
9525: LD_INT 2
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: PUSH
9534: LD_INT 33
9536: PUSH
9537: LD_INT 150
9539: PUSH
9540: LD_INT 82
9542: PUSH
9543: LD_INT 0
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: PUSH
9552: LD_INT 33
9554: PUSH
9555: LD_INT 132
9557: PUSH
9558: LD_INT 72
9560: PUSH
9561: LD_INT 0
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: LD_INT 6
9572: PUSH
9573: LD_INT 146
9575: PUSH
9576: LD_INT 64
9578: PUSH
9579: LD_INT 4
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 6
9590: PUSH
9591: LD_INT 159
9593: PUSH
9594: LD_INT 85
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: PUSH
9606: LD_INT 21
9608: PUSH
9609: LD_INT 163
9611: PUSH
9612: LD_INT 91
9614: PUSH
9615: LD_INT 3
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: PUSH
9624: LD_INT 16
9626: PUSH
9627: LD_INT 166
9629: PUSH
9630: LD_INT 95
9632: PUSH
9633: LD_INT 4
9635: PUSH
9636: EMPTY
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 24
9644: PUSH
9645: LD_INT 159
9647: PUSH
9648: LD_INT 95
9650: PUSH
9651: LD_INT 1
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: LIST
9658: LIST
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: LIST
9682: LIST
9683: LIST
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
9693: LD_ADDR_VAR 0 3
9697: PUSH
9698: LD_INT 22
9700: PUSH
9701: LD_INT 3
9703: PUSH
9704: EMPTY
9705: LIST
9706: LIST
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 25
9713: PUSH
9714: LD_INT 2
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: PUSH
9721: EMPTY
9722: LIST
9723: LIST
9724: PUSH
9725: EMPTY
9726: LIST
9727: LIST
9728: PPUSH
9729: CALL_OW 69
9733: PUSH
9734: FOR_IN
9735: IFFALSE 9782
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
9737: LD_VAR 0 3
9741: PPUSH
9742: LD_VAR 0 5
9746: PUSH
9747: LD_INT 2
9749: ARRAY
9750: PUSH
9751: LD_INT 2
9753: ARRAY
9754: PUSH
9755: LD_INT 2
9757: PLUS
9758: PPUSH
9759: LD_VAR 0 5
9763: PUSH
9764: LD_INT 2
9766: ARRAY
9767: PUSH
9768: LD_INT 3
9770: ARRAY
9771: PUSH
9772: LD_INT 3
9774: PLUS
9775: PPUSH
9776: CALL_OW 171
9780: GO 9734
9782: POP
9783: POP
// for i := 1 to buildingsTab do
9784: LD_ADDR_VAR 0 3
9788: PUSH
9789: DOUBLE
9790: LD_INT 1
9792: DEC
9793: ST_TO_ADDR
9794: LD_VAR 0 5
9798: PUSH
9799: FOR_TO
9800: IFFALSE 9873
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
9802: LD_VAR 0 4
9806: PPUSH
9807: LD_VAR 0 5
9811: PUSH
9812: LD_VAR 0 3
9816: ARRAY
9817: PUSH
9818: LD_INT 1
9820: ARRAY
9821: PPUSH
9822: LD_VAR 0 5
9826: PUSH
9827: LD_VAR 0 3
9831: ARRAY
9832: PUSH
9833: LD_INT 2
9835: ARRAY
9836: PPUSH
9837: LD_VAR 0 5
9841: PUSH
9842: LD_VAR 0 3
9846: ARRAY
9847: PUSH
9848: LD_INT 3
9850: ARRAY
9851: PPUSH
9852: LD_VAR 0 5
9856: PUSH
9857: LD_VAR 0 3
9861: ARRAY
9862: PUSH
9863: LD_INT 4
9865: ARRAY
9866: PPUSH
9867: CALL_OW 205
9871: GO 9799
9873: POP
9874: POP
// end ; end ;
9875: LD_VAR 0 2
9879: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
9880: LD_INT 0
9882: PPUSH
9883: PPUSH
9884: PPUSH
9885: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
9886: LD_ADDR_VAR 0 3
9890: PUSH
9891: LD_INT 22
9893: PUSH
9894: LD_INT 2
9896: PUSH
9897: EMPTY
9898: LIST
9899: LIST
9900: PUSH
9901: LD_INT 25
9903: PUSH
9904: LD_INT 2
9906: PUSH
9907: EMPTY
9908: LIST
9909: LIST
9910: PUSH
9911: EMPTY
9912: LIST
9913: LIST
9914: PPUSH
9915: CALL_OW 69
9919: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
9920: LD_VAR 0 3
9924: PPUSH
9925: LD_INT 0
9927: PPUSH
9928: LD_INT 71
9930: PPUSH
9931: LD_INT 15
9933: PPUSH
9934: LD_INT 3
9936: PPUSH
9937: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
9941: LD_ADDR_VAR 0 4
9945: PUSH
9946: LD_INT 6
9948: PUSH
9949: LD_INT 77
9951: PUSH
9952: LD_INT 18
9954: PUSH
9955: LD_INT 3
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: PUSH
9964: LD_INT 4
9966: PUSH
9967: LD_INT 77
9969: PUSH
9970: LD_INT 26
9972: PUSH
9973: LD_INT 0
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: PUSH
9982: LD_INT 31
9984: PUSH
9985: LD_INT 82
9987: PUSH
9988: LD_INT 28
9990: PUSH
9991: LD_INT 0
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 31
10002: PUSH
10003: LD_INT 84
10005: PUSH
10006: LD_INT 21
10008: PUSH
10009: LD_INT 3
10011: PUSH
10012: EMPTY
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: PUSH
10018: LD_INT 31
10020: PUSH
10021: LD_INT 66
10023: PUSH
10024: LD_INT 14
10026: PUSH
10027: LD_INT 2
10029: PUSH
10030: EMPTY
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: PUSH
10036: LD_INT 27
10038: PUSH
10039: LD_INT 67
10041: PUSH
10042: LD_INT 18
10044: PUSH
10045: LD_INT 5
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 27
10056: PUSH
10057: LD_INT 69
10059: PUSH
10060: LD_INT 23
10062: PUSH
10063: LD_INT 2
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: ST_TO_ADDR
// for i := 1 to buildingsTab do
10081: LD_ADDR_VAR 0 2
10085: PUSH
10086: DOUBLE
10087: LD_INT 1
10089: DEC
10090: ST_TO_ADDR
10091: LD_VAR 0 4
10095: PUSH
10096: FOR_TO
10097: IFFALSE 10170
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
10099: LD_VAR 0 3
10103: PPUSH
10104: LD_VAR 0 4
10108: PUSH
10109: LD_VAR 0 2
10113: ARRAY
10114: PUSH
10115: LD_INT 1
10117: ARRAY
10118: PPUSH
10119: LD_VAR 0 4
10123: PUSH
10124: LD_VAR 0 2
10128: ARRAY
10129: PUSH
10130: LD_INT 2
10132: ARRAY
10133: PPUSH
10134: LD_VAR 0 4
10138: PUSH
10139: LD_VAR 0 2
10143: ARRAY
10144: PUSH
10145: LD_INT 3
10147: ARRAY
10148: PPUSH
10149: LD_VAR 0 4
10153: PUSH
10154: LD_VAR 0 2
10158: ARRAY
10159: PUSH
10160: LD_INT 4
10162: ARRAY
10163: PPUSH
10164: CALL_OW 205
10168: GO 10096
10170: POP
10171: POP
// end ;
10172: LD_VAR 0 1
10176: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
10177: LD_INT 0
10179: PPUSH
10180: PPUSH
10181: PPUSH
10182: PPUSH
10183: PPUSH
10184: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
10185: LD_ADDR_VAR 0 7
10189: PUSH
10190: LD_INT 22
10192: PUSH
10193: LD_VAR 0 1
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 25
10204: PUSH
10205: LD_INT 9
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PPUSH
10216: CALL_OW 69
10220: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10221: LD_ADDR_VAR 0 8
10225: PUSH
10226: LD_INT 22
10228: PUSH
10229: LD_VAR 0 2
10233: PUSH
10234: EMPTY
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 3
10240: PUSH
10241: LD_INT 21
10243: PUSH
10244: LD_INT 3
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PPUSH
10259: CALL_OW 69
10263: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
10264: LD_ADDR_VAR 0 5
10268: PUSH
10269: LD_INT 1
10271: PPUSH
10272: LD_INT 3
10274: PPUSH
10275: CALL_OW 12
10279: ST_TO_ADDR
// for i = 1 to list do
10280: LD_ADDR_VAR 0 6
10284: PUSH
10285: DOUBLE
10286: LD_INT 1
10288: DEC
10289: ST_TO_ADDR
10290: LD_VAR 0 7
10294: PUSH
10295: FOR_TO
10296: IFFALSE 10478
// for ta in filter do
10298: LD_ADDR_VAR 0 4
10302: PUSH
10303: LD_VAR 0 8
10307: PUSH
10308: FOR_IN
10309: IFFALSE 10474
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
10311: LD_VAR 0 7
10315: PUSH
10316: LD_VAR 0 6
10320: ARRAY
10321: PPUSH
10322: LD_VAR 0 4
10326: PPUSH
10327: CALL_OW 296
10331: PUSH
10332: LD_INT 13
10334: LESSEQUAL
10335: IFFALSE 10472
// begin case c of 1 :
10337: LD_VAR 0 5
10341: PUSH
10342: LD_INT 1
10344: DOUBLE
10345: EQUAL
10346: IFTRUE 10350
10348: GO 10388
10350: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
10351: LD_VAR 0 7
10355: PUSH
10356: LD_VAR 0 6
10360: ARRAY
10361: PPUSH
10362: LD_VAR 0 4
10366: PPUSH
10367: CALL_OW 250
10371: PPUSH
10372: LD_VAR 0 4
10376: PPUSH
10377: CALL_OW 251
10381: PPUSH
10382: CALL_OW 154
10386: GO 10472
10388: LD_INT 2
10390: DOUBLE
10391: EQUAL
10392: IFTRUE 10396
10394: GO 10460
10396: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
10397: LD_VAR 0 7
10401: PUSH
10402: LD_VAR 0 6
10406: ARRAY
10407: PPUSH
10408: LD_VAR 0 4
10412: PPUSH
10413: CALL_OW 250
10417: PUSH
10418: LD_INT 1
10420: NEG
10421: PPUSH
10422: LD_INT 1
10424: PPUSH
10425: CALL_OW 12
10429: PLUS
10430: PPUSH
10431: LD_VAR 0 4
10435: PPUSH
10436: CALL_OW 251
10440: PUSH
10441: LD_INT 1
10443: NEG
10444: PPUSH
10445: LD_INT 1
10447: PPUSH
10448: CALL_OW 12
10452: PLUS
10453: PPUSH
10454: CALL_OW 153
10458: GO 10472
10460: LD_INT 3
10462: DOUBLE
10463: EQUAL
10464: IFTRUE 10468
10466: GO 10471
10468: POP
// ; end ;
10469: GO 10472
10471: POP
// end ; end ;
10472: GO 10308
10474: POP
10475: POP
10476: GO 10295
10478: POP
10479: POP
// end ;
10480: LD_VAR 0 3
10484: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
10485: LD_INT 0
10487: PPUSH
10488: PPUSH
10489: PPUSH
10490: PPUSH
// for i = 1 to 72 do
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: DOUBLE
10497: LD_INT 1
10499: DEC
10500: ST_TO_ADDR
10501: LD_INT 72
10503: PUSH
10504: FOR_TO
10505: IFFALSE 10563
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
10507: LD_VAR 0 5
10511: PPUSH
10512: LD_VAR 0 1
10516: PPUSH
10517: CALL_OW 321
10521: PUSH
10522: LD_INT 1
10524: EQUAL
10525: PUSH
10526: LD_VAR 0 5
10530: PPUSH
10531: LD_VAR 0 3
10535: PPUSH
10536: CALL_OW 482
10540: PUSH
10541: LD_INT 1
10543: EQUAL
10544: AND
10545: IFFALSE 10561
// AddComResearch ( lab , i ) ;
10547: LD_VAR 0 2
10551: PPUSH
10552: LD_VAR 0 5
10556: PPUSH
10557: CALL_OW 184
10561: GO 10504
10563: POP
10564: POP
// end ;
10565: LD_VAR 0 4
10569: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
10570: LD_INT 0
10572: PPUSH
10573: PPUSH
10574: PPUSH
10575: PPUSH
10576: PPUSH
10577: PPUSH
10578: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
10579: LD_ADDR_VAR 0 6
10583: PUSH
10584: LD_INT 22
10586: PUSH
10587: LD_VAR 0 1
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 56
10598: PUSH
10599: EMPTY
10600: LIST
10601: PUSH
10602: LD_INT 24
10604: PUSH
10605: LD_INT 700
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 2
10614: PUSH
10615: LD_INT 25
10617: PUSH
10618: LD_INT 1
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: PUSH
10625: LD_INT 25
10627: PUSH
10628: LD_INT 9
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: LIST
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: PPUSH
10646: CALL_OW 69
10650: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
10651: LD_ADDR_VAR 0 7
10655: PUSH
10656: LD_INT 22
10658: PUSH
10659: LD_VAR 0 1
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 30
10670: PUSH
10671: LD_INT 32
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 58
10680: PUSH
10681: EMPTY
10682: LIST
10683: PUSH
10684: LD_INT 24
10686: PUSH
10687: LD_INT 251
10689: PUSH
10690: EMPTY
10691: LIST
10692: LIST
10693: PUSH
10694: EMPTY
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: PPUSH
10700: CALL_OW 69
10704: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
10705: LD_ADDR_VAR 0 9
10709: PUSH
10710: LD_INT 22
10712: PUSH
10713: LD_VAR 0 1
10717: PUSH
10718: EMPTY
10719: LIST
10720: LIST
10721: PUSH
10722: LD_INT 2
10724: PUSH
10725: LD_INT 30
10727: PUSH
10728: LD_INT 4
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 30
10737: PUSH
10738: LD_INT 5
10740: PUSH
10741: EMPTY
10742: LIST
10743: LIST
10744: PUSH
10745: EMPTY
10746: LIST
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 24
10752: PUSH
10753: LD_INT 251
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: EMPTY
10761: LIST
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 69
10769: ST_TO_ADDR
// if barrackList > 0 then
10770: LD_VAR 0 9
10774: PUSH
10775: LD_INT 0
10777: GREATER
10778: IFFALSE 10867
// begin if turretList = 0 then
10780: LD_VAR 0 7
10784: PUSH
10785: LD_INT 0
10787: EQUAL
10788: IFFALSE 10827
// begin for i in soldiers_list do
10790: LD_ADDR_VAR 0 4
10794: PUSH
10795: LD_VAR 0 6
10799: PUSH
10800: FOR_IN
10801: IFFALSE 10823
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
10803: LD_VAR 0 4
10807: PPUSH
10808: LD_VAR 0 9
10812: PUSH
10813: LD_INT 1
10815: ARRAY
10816: PPUSH
10817: CALL_OW 120
10821: GO 10800
10823: POP
10824: POP
// end else
10825: GO 10867
// begin for i in barrackList do
10827: LD_ADDR_VAR 0 4
10831: PUSH
10832: LD_VAR 0 9
10836: PUSH
10837: FOR_IN
10838: IFFALSE 10865
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
10840: LD_VAR 0 4
10844: PPUSH
10845: CALL_OW 313
10849: PPUSH
10850: LD_VAR 0 7
10854: PUSH
10855: LD_INT 1
10857: ARRAY
10858: PPUSH
10859: CALL_OW 120
// end ;
10863: GO 10837
10865: POP
10866: POP
// end ; end ; end ;
10867: LD_VAR 0 3
10871: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
10872: LD_INT 0
10874: PPUSH
10875: PPUSH
10876: PPUSH
10877: PPUSH
10878: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
10879: LD_ADDR_VAR 0 6
10883: PUSH
10884: LD_INT 22
10886: PUSH
10887: LD_VAR 0 1
10891: PUSH
10892: EMPTY
10893: LIST
10894: LIST
10895: PUSH
10896: LD_INT 2
10898: PUSH
10899: LD_INT 25
10901: PUSH
10902: LD_INT 2
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 25
10911: PUSH
10912: LD_INT 16
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: LIST
10923: PUSH
10924: LD_INT 24
10926: PUSH
10927: LD_INT 1000
10929: PUSH
10930: EMPTY
10931: LIST
10932: LIST
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: LIST
10938: PPUSH
10939: CALL_OW 69
10943: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
10944: LD_ADDR_VAR 0 4
10948: PUSH
10949: LD_INT 22
10951: PUSH
10952: LD_VAR 0 1
10956: PUSH
10957: EMPTY
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 21
10963: PUSH
10964: LD_INT 3
10966: PUSH
10967: EMPTY
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 3
10973: PUSH
10974: LD_INT 24
10976: PUSH
10977: LD_INT 1000
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: PUSH
10993: EMPTY
10994: LIST
10995: PPUSH
10996: CALL_OW 69
11000: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
11001: LD_VAR 0 4
11005: PUSH
11006: LD_INT 0
11008: GREATER
11009: PUSH
11010: LD_VAR 0 6
11014: PUSH
11015: LD_INT 0
11017: GREATER
11018: AND
11019: IFFALSE 11085
// begin for i in engineerOk_list do
11021: LD_ADDR_VAR 0 5
11025: PUSH
11026: LD_VAR 0 6
11030: PUSH
11031: FOR_IN
11032: IFFALSE 11083
// begin for j in buildings_list do
11034: LD_ADDR_VAR 0 7
11038: PUSH
11039: LD_VAR 0 4
11043: PUSH
11044: FOR_IN
11045: IFFALSE 11079
// begin AddComExitBuilding ( i ) ;
11047: LD_VAR 0 5
11051: PPUSH
11052: CALL_OW 182
// wait ( 0 0$1 ) ;
11056: LD_INT 35
11058: PPUSH
11059: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
11063: LD_VAR 0 5
11067: PPUSH
11068: LD_VAR 0 7
11072: PPUSH
11073: CALL_OW 190
// end ;
11077: GO 11044
11079: POP
11080: POP
// end ;
11081: GO 11031
11083: POP
11084: POP
// end ; if buildings_list = 0 then
11085: LD_VAR 0 4
11089: PUSH
11090: LD_INT 0
11092: EQUAL
11093: IFFALSE 11126
// begin for i in engineerOK_list do
11095: LD_ADDR_VAR 0 5
11099: PUSH
11100: LD_VAR 0 6
11104: PUSH
11105: FOR_IN
11106: IFFALSE 11124
// ComEnterUnit ( i , building ) ;
11108: LD_VAR 0 5
11112: PPUSH
11113: LD_VAR 0 2
11117: PPUSH
11118: CALL_OW 120
11122: GO 11105
11124: POP
11125: POP
// end ; end ;
11126: LD_VAR 0 3
11130: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
11131: LD_INT 0
11133: PPUSH
11134: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
11135: LD_INT 22
11137: PUSH
11138: LD_VAR 0 1
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 25
11149: PUSH
11150: LD_INT 2
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PPUSH
11161: CALL_OW 69
11165: PUSH
11166: LD_INT 0
11168: GREATER
11169: PUSH
11170: LD_INT 22
11172: PUSH
11173: LD_VAR 0 1
11177: PUSH
11178: EMPTY
11179: LIST
11180: LIST
11181: PUSH
11182: LD_INT 21
11184: PUSH
11185: LD_INT 3
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 3
11194: PUSH
11195: LD_INT 24
11197: PUSH
11198: LD_INT 1000
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: PUSH
11209: EMPTY
11210: LIST
11211: LIST
11212: LIST
11213: PPUSH
11214: CALL_OW 69
11218: PUSH
11219: LD_INT 0
11221: EQUAL
11222: AND
11223: PUSH
11224: LD_VAR 0 2
11228: PUSH
11229: LD_INT 0
11231: GREATER
11232: AND
11233: IFFALSE 11332
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
11235: LD_ADDR_VAR 0 4
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_VAR 0 1
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: PUSH
11252: LD_INT 25
11254: PUSH
11255: LD_INT 2
11257: PUSH
11258: EMPTY
11259: LIST
11260: LIST
11261: PUSH
11262: EMPTY
11263: LIST
11264: LIST
11265: PPUSH
11266: CALL_OW 69
11270: PUSH
11271: FOR_IN
11272: IFFALSE 11330
// begin AddComExitBuilding ( i ) ;
11274: LD_VAR 0 4
11278: PPUSH
11279: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
11283: LD_VAR 0 4
11287: PPUSH
11288: LD_VAR 0 2
11292: PUSH
11293: LD_INT 1
11295: ARRAY
11296: PPUSH
11297: LD_VAR 0 2
11301: PUSH
11302: LD_INT 2
11304: ARRAY
11305: PPUSH
11306: LD_VAR 0 2
11310: PUSH
11311: LD_INT 3
11313: ARRAY
11314: PPUSH
11315: LD_VAR 0 2
11319: PUSH
11320: LD_INT 4
11322: ARRAY
11323: PPUSH
11324: CALL_OW 205
// end ;
11328: GO 11271
11330: POP
11331: POP
// end ; end ;
11332: LD_VAR 0 3
11336: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
11337: LD_INT 0
11339: PPUSH
11340: PPUSH
11341: PPUSH
11342: PPUSH
11343: PPUSH
11344: PPUSH
11345: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11346: LD_ADDR_VAR 0 9
11350: PUSH
11351: LD_INT 22
11353: PUSH
11354: LD_VAR 0 1
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 24
11365: PUSH
11366: LD_INT 251
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: PUSH
11373: LD_INT 2
11375: PUSH
11376: LD_INT 30
11378: PUSH
11379: LD_INT 9
11381: PUSH
11382: EMPTY
11383: LIST
11384: LIST
11385: PUSH
11386: LD_INT 30
11388: PUSH
11389: LD_INT 7
11391: PUSH
11392: EMPTY
11393: LIST
11394: LIST
11395: PUSH
11396: LD_INT 30
11398: PUSH
11399: LD_INT 8
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PUSH
11406: EMPTY
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: LIST
11416: PPUSH
11417: CALL_OW 69
11421: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
11422: LD_ADDR_VAR 0 7
11426: PUSH
11427: LD_VAR 0 3
11431: PPUSH
11432: LD_INT 22
11434: PUSH
11435: LD_VAR 0 1
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 25
11446: PUSH
11447: LD_INT 4
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: PUSH
11454: LD_INT 24
11456: PUSH
11457: LD_INT 251
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: LIST
11468: PPUSH
11469: CALL_OW 70
11473: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
11474: LD_ADDR_VAR 0 10
11478: PUSH
11479: LD_VAR 0 3
11483: PPUSH
11484: LD_INT 22
11486: PUSH
11487: LD_VAR 0 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: LD_INT 21
11498: PUSH
11499: LD_INT 1
11501: PUSH
11502: EMPTY
11503: LIST
11504: LIST
11505: PUSH
11506: LD_INT 3
11508: PUSH
11509: LD_INT 24
11511: PUSH
11512: LD_INT 750
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: PPUSH
11528: CALL_OW 70
11532: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
11533: LD_VAR 0 9
11537: PUSH
11538: LD_INT 0
11540: GREATER
11541: PUSH
11542: LD_VAR 0 10
11546: PUSH
11547: LD_INT 0
11549: GREATER
11550: AND
11551: IFFALSE 11585
// for i in labs do
11553: LD_ADDR_VAR 0 5
11557: PUSH
11558: LD_VAR 0 9
11562: PUSH
11563: FOR_IN
11564: IFFALSE 11583
// scientisticsInside = UnitsInside ( i ) ;
11566: LD_ADDR_VAR 0 8
11570: PUSH
11571: LD_VAR 0 5
11575: PPUSH
11576: CALL_OW 313
11580: ST_TO_ADDR
11581: GO 11563
11583: POP
11584: POP
// if labs > 0 and damageUnits > 0 then
11585: LD_VAR 0 9
11589: PUSH
11590: LD_INT 0
11592: GREATER
11593: PUSH
11594: LD_VAR 0 10
11598: PUSH
11599: LD_INT 0
11601: GREATER
11602: AND
11603: IFFALSE 11631
// for i in scientisticsInside do
11605: LD_ADDR_VAR 0 5
11609: PUSH
11610: LD_VAR 0 8
11614: PUSH
11615: FOR_IN
11616: IFFALSE 11629
// ComExitBuilding ( i ) ;
11618: LD_VAR 0 5
11622: PPUSH
11623: CALL_OW 122
11627: GO 11615
11629: POP
11630: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
11631: LD_VAR 0 10
11635: PUSH
11636: LD_INT 0
11638: GREATER
11639: PUSH
11640: LD_VAR 0 7
11644: PUSH
11645: LD_INT 0
11647: GREATER
11648: AND
11649: IFFALSE 11715
// begin ComMoveToArea ( damageUnits , healArea ) ;
11651: LD_VAR 0 10
11655: PPUSH
11656: LD_VAR 0 2
11660: PPUSH
11661: CALL_OW 113
// for i in scientisticsOutside do
11665: LD_ADDR_VAR 0 5
11669: PUSH
11670: LD_VAR 0 7
11674: PUSH
11675: FOR_IN
11676: IFFALSE 11711
// for j in damageUnits do
11678: LD_ADDR_VAR 0 6
11682: PUSH
11683: LD_VAR 0 10
11687: PUSH
11688: FOR_IN
11689: IFFALSE 11707
// AddComHeal ( i , j ) ;
11691: LD_VAR 0 5
11695: PPUSH
11696: LD_VAR 0 6
11700: PPUSH
11701: CALL_OW 188
11705: GO 11688
11707: POP
11708: POP
11709: GO 11675
11711: POP
11712: POP
// end else
11713: GO 11743
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
11715: LD_VAR 0 7
11719: PPUSH
11720: LD_VAR 0 9
11724: PUSH
11725: LD_INT 1
11727: PPUSH
11728: LD_VAR 0 9
11732: PPUSH
11733: CALL_OW 12
11737: ARRAY
11738: PPUSH
11739: CALL_OW 120
// end ; end ;
11743: LD_VAR 0 4
11747: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
11756: PPUSH
11757: PPUSH
11758: PPUSH
11759: PPUSH
11760: PPUSH
// amChassisTab = [ ] ;
11761: LD_ADDR_VAR 0 19
11765: PUSH
11766: EMPTY
11767: ST_TO_ADDR
// arChassisTab = [ ] ;
11768: LD_ADDR_VAR 0 18
11772: PUSH
11773: EMPTY
11774: ST_TO_ADDR
// ruChassisTab = [ ] ;
11775: LD_ADDR_VAR 0 17
11779: PUSH
11780: EMPTY
11781: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
11782: LD_INT 35
11784: PPUSH
11785: CALL_OW 67
// if nation = 1 then
11789: LD_VAR 0 5
11793: PUSH
11794: LD_INT 1
11796: EQUAL
11797: IFFALSE 12302
// begin uc_side = side ;
11799: LD_ADDR_OWVAR 20
11803: PUSH
11804: LD_VAR 0 2
11808: ST_TO_ADDR
// uc_nation = nation ;
11809: LD_ADDR_OWVAR 21
11813: PUSH
11814: LD_VAR 0 5
11818: ST_TO_ADDR
// vc_engine = vehengine ;
11819: LD_ADDR_OWVAR 39
11823: PUSH
11824: LD_VAR 0 6
11828: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
11829: LD_ADDR_OWVAR 38
11833: PUSH
11834: LD_VAR 0 7
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_VAR 0 7
11846: PPUSH
11847: CALL_OW 12
11851: ARRAY
11852: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
11853: LD_ADDR_OWVAR 40
11857: PUSH
11858: LD_VAR 0 10
11862: PUSH
11863: LD_INT 1
11865: PPUSH
11866: LD_VAR 0 10
11870: PPUSH
11871: CALL_OW 12
11875: ARRAY
11876: ST_TO_ADDR
// for j = 1 to AMWeapon do
11877: LD_ADDR_VAR 0 14
11881: PUSH
11882: DOUBLE
11883: LD_INT 1
11885: DEC
11886: ST_TO_ADDR
11887: LD_VAR 0 10
11891: PUSH
11892: FOR_TO
11893: IFFALSE 12194
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
11895: LD_VAR 0 10
11899: PUSH
11900: LD_VAR 0 14
11904: ARRAY
11905: PUSH
11906: LD_INT 2
11908: EQUAL
11909: PUSH
11910: LD_VAR 0 10
11914: PUSH
11915: LD_VAR 0 14
11919: ARRAY
11920: PUSH
11921: LD_INT 3
11923: EQUAL
11924: OR
11925: IFFALSE 11978
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
11927: LD_ADDR_VAR 0 19
11931: PUSH
11932: LD_INT 1
11934: PUSH
11935: LD_INT 2
11937: PUSH
11938: LD_INT 3
11940: PUSH
11941: LD_INT 4
11943: PUSH
11944: LD_INT 5
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
11954: LD_ADDR_OWVAR 37
11958: PUSH
11959: LD_VAR 0 19
11963: PUSH
11964: LD_INT 1
11966: PPUSH
11967: LD_VAR 0 19
11971: PPUSH
11972: CALL_OW 12
11976: ARRAY
11977: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
11978: LD_VAR 0 10
11982: PUSH
11983: LD_VAR 0 14
11987: ARRAY
11988: PUSH
11989: LD_INT 4
11991: EQUAL
11992: PUSH
11993: LD_VAR 0 10
11997: PUSH
11998: LD_VAR 0 14
12002: ARRAY
12003: PUSH
12004: LD_INT 5
12006: EQUAL
12007: OR
12008: PUSH
12009: LD_VAR 0 10
12013: PUSH
12014: LD_VAR 0 14
12018: ARRAY
12019: PUSH
12020: LD_INT 9
12022: EQUAL
12023: OR
12024: PUSH
12025: LD_VAR 0 10
12029: PUSH
12030: LD_VAR 0 14
12034: ARRAY
12035: PUSH
12036: LD_INT 11
12038: EQUAL
12039: OR
12040: PUSH
12041: LD_VAR 0 10
12045: PUSH
12046: LD_VAR 0 14
12050: ARRAY
12051: PUSH
12052: LD_INT 7
12054: EQUAL
12055: OR
12056: IFFALSE 12105
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
12058: LD_ADDR_VAR 0 19
12062: PUSH
12063: LD_INT 2
12065: PUSH
12066: LD_INT 3
12068: PUSH
12069: LD_INT 4
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12081: LD_ADDR_OWVAR 37
12085: PUSH
12086: LD_VAR 0 19
12090: PUSH
12091: LD_INT 1
12093: PPUSH
12094: LD_VAR 0 19
12098: PPUSH
12099: CALL_OW 12
12103: ARRAY
12104: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
12105: LD_VAR 0 10
12109: PUSH
12110: LD_VAR 0 14
12114: ARRAY
12115: PUSH
12116: LD_INT 8
12118: EQUAL
12119: PUSH
12120: LD_VAR 0 10
12124: PUSH
12125: LD_VAR 0 14
12129: ARRAY
12130: PUSH
12131: LD_INT 6
12133: EQUAL
12134: OR
12135: PUSH
12136: LD_VAR 0 10
12140: PUSH
12141: LD_VAR 0 14
12145: ARRAY
12146: PUSH
12147: LD_INT 10
12149: EQUAL
12150: OR
12151: IFFALSE 12192
// begin amChassisTab = [ 4 , 5 ] ;
12153: LD_ADDR_VAR 0 19
12157: PUSH
12158: LD_INT 4
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
12168: LD_ADDR_OWVAR 37
12172: PUSH
12173: LD_VAR 0 19
12177: PUSH
12178: LD_INT 1
12180: PPUSH
12181: LD_VAR 0 19
12185: PPUSH
12186: CALL_OW 12
12190: ARRAY
12191: ST_TO_ADDR
// end ; end ;
12192: GO 11892
12194: POP
12195: POP
// veh = CreateVehicle ;
12196: LD_ADDR_VAR 0 16
12200: PUSH
12201: CALL_OW 45
12205: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12206: LD_VAR 0 16
12210: PPUSH
12211: LD_VAR 0 1
12215: PPUSH
12216: LD_INT 0
12218: PPUSH
12219: CALL_OW 49
// if vc_control = 1 then
12223: LD_OWVAR 38
12227: PUSH
12228: LD_INT 1
12230: EQUAL
12231: IFFALSE 12288
// begin hc_gallery =  ;
12233: LD_ADDR_OWVAR 33
12237: PUSH
12238: LD_STRING 
12240: ST_TO_ADDR
// hc_name =  ;
12241: LD_ADDR_OWVAR 26
12245: PUSH
12246: LD_STRING 
12248: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12249: LD_INT 0
12251: PPUSH
12252: LD_INT 3
12254: PPUSH
12255: LD_VAR 0 4
12259: PPUSH
12260: CALL_OW 380
// un = CreateHuman ;
12264: LD_ADDR_VAR 0 15
12268: PUSH
12269: CALL_OW 44
12273: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12274: LD_VAR 0 15
12278: PPUSH
12279: LD_VAR 0 16
12283: PPUSH
12284: CALL_OW 52
// end ; i = i + 1 ;
12288: LD_ADDR_VAR 0 13
12292: PUSH
12293: LD_VAR 0 13
12297: PUSH
12298: LD_INT 1
12300: PLUS
12301: ST_TO_ADDR
// end ; if nation = 2 then
12302: LD_VAR 0 5
12306: PUSH
12307: LD_INT 2
12309: EQUAL
12310: IFFALSE 12748
// begin uc_side = side ;
12312: LD_ADDR_OWVAR 20
12316: PUSH
12317: LD_VAR 0 2
12321: ST_TO_ADDR
// uc_nation = nation ;
12322: LD_ADDR_OWVAR 21
12326: PUSH
12327: LD_VAR 0 5
12331: ST_TO_ADDR
// vc_engine = vehengine ;
12332: LD_ADDR_OWVAR 39
12336: PUSH
12337: LD_VAR 0 6
12341: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12342: LD_ADDR_OWVAR 38
12346: PUSH
12347: LD_VAR 0 7
12351: PUSH
12352: LD_INT 1
12354: PPUSH
12355: LD_VAR 0 7
12359: PPUSH
12360: CALL_OW 12
12364: ARRAY
12365: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
12366: LD_ADDR_OWVAR 40
12370: PUSH
12371: LD_VAR 0 9
12375: PUSH
12376: LD_INT 1
12378: PPUSH
12379: LD_VAR 0 9
12383: PPUSH
12384: CALL_OW 12
12388: ARRAY
12389: ST_TO_ADDR
// for j = 1 to ARWeapons do
12390: LD_ADDR_VAR 0 14
12394: PUSH
12395: DOUBLE
12396: LD_INT 1
12398: DEC
12399: ST_TO_ADDR
12400: LD_VAR 0 9
12404: PUSH
12405: FOR_TO
12406: IFFALSE 12640
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
12408: LD_VAR 0 9
12412: PUSH
12413: LD_VAR 0 14
12417: ARRAY
12418: PUSH
12419: LD_INT 24
12421: EQUAL
12422: PUSH
12423: LD_VAR 0 9
12427: PUSH
12428: LD_VAR 0 14
12432: ARRAY
12433: PUSH
12434: LD_INT 22
12436: EQUAL
12437: OR
12438: PUSH
12439: LD_VAR 0 9
12443: PUSH
12444: LD_VAR 0 14
12448: ARRAY
12449: PUSH
12450: LD_INT 23
12452: EQUAL
12453: OR
12454: PUSH
12455: LD_VAR 0 9
12459: PUSH
12460: LD_VAR 0 14
12464: ARRAY
12465: PUSH
12466: LD_INT 30
12468: EQUAL
12469: OR
12470: IFFALSE 12519
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
12472: LD_ADDR_VAR 0 18
12476: PUSH
12477: LD_INT 11
12479: PUSH
12480: LD_INT 12
12482: PUSH
12483: LD_INT 13
12485: PUSH
12486: LD_INT 14
12488: PUSH
12489: EMPTY
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12495: LD_ADDR_OWVAR 37
12499: PUSH
12500: LD_VAR 0 18
12504: PUSH
12505: LD_INT 1
12507: PPUSH
12508: LD_VAR 0 18
12512: PPUSH
12513: CALL_OW 12
12517: ARRAY
12518: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
12519: LD_VAR 0 9
12523: PUSH
12524: LD_VAR 0 14
12528: ARRAY
12529: PUSH
12530: LD_INT 29
12532: EQUAL
12533: PUSH
12534: LD_VAR 0 9
12538: PUSH
12539: LD_VAR 0 14
12543: ARRAY
12544: PUSH
12545: LD_INT 28
12547: EQUAL
12548: OR
12549: PUSH
12550: LD_VAR 0 9
12554: PUSH
12555: LD_VAR 0 14
12559: ARRAY
12560: PUSH
12561: LD_INT 27
12563: EQUAL
12564: OR
12565: PUSH
12566: LD_VAR 0 9
12570: PUSH
12571: LD_VAR 0 14
12575: ARRAY
12576: PUSH
12577: LD_INT 26
12579: EQUAL
12580: OR
12581: PUSH
12582: LD_VAR 0 9
12586: PUSH
12587: LD_VAR 0 14
12591: ARRAY
12592: PUSH
12593: LD_INT 25
12595: EQUAL
12596: OR
12597: IFFALSE 12638
// begin arChassisTab = [ 13 , 14 ] ;
12599: LD_ADDR_VAR 0 18
12603: PUSH
12604: LD_INT 13
12606: PUSH
12607: LD_INT 14
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
12614: LD_ADDR_OWVAR 37
12618: PUSH
12619: LD_VAR 0 18
12623: PUSH
12624: LD_INT 1
12626: PPUSH
12627: LD_VAR 0 18
12631: PPUSH
12632: CALL_OW 12
12636: ARRAY
12637: ST_TO_ADDR
// end ; end ;
12638: GO 12405
12640: POP
12641: POP
// veh = CreateVehicle ;
12642: LD_ADDR_VAR 0 16
12646: PUSH
12647: CALL_OW 45
12651: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
12652: LD_VAR 0 16
12656: PPUSH
12657: LD_VAR 0 1
12661: PPUSH
12662: LD_INT 0
12664: PPUSH
12665: CALL_OW 49
// if vc_control = 1 then
12669: LD_OWVAR 38
12673: PUSH
12674: LD_INT 1
12676: EQUAL
12677: IFFALSE 12734
// begin hc_gallery =  ;
12679: LD_ADDR_OWVAR 33
12683: PUSH
12684: LD_STRING 
12686: ST_TO_ADDR
// hc_name =  ;
12687: LD_ADDR_OWVAR 26
12691: PUSH
12692: LD_STRING 
12694: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
12695: LD_INT 0
12697: PPUSH
12698: LD_INT 3
12700: PPUSH
12701: LD_VAR 0 4
12705: PPUSH
12706: CALL_OW 380
// un = CreateHuman ;
12710: LD_ADDR_VAR 0 15
12714: PUSH
12715: CALL_OW 44
12719: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
12720: LD_VAR 0 15
12724: PPUSH
12725: LD_VAR 0 16
12729: PPUSH
12730: CALL_OW 52
// end ; i = i + 1 ;
12734: LD_ADDR_VAR 0 13
12738: PUSH
12739: LD_VAR 0 13
12743: PUSH
12744: LD_INT 1
12746: PLUS
12747: ST_TO_ADDR
// end ; if nation = 3 then
12748: LD_VAR 0 5
12752: PUSH
12753: LD_INT 3
12755: EQUAL
12756: IFFALSE 13162
// begin uc_side = side ;
12758: LD_ADDR_OWVAR 20
12762: PUSH
12763: LD_VAR 0 2
12767: ST_TO_ADDR
// uc_nation = nation ;
12768: LD_ADDR_OWVAR 21
12772: PUSH
12773: LD_VAR 0 5
12777: ST_TO_ADDR
// vc_engine = vehengine ;
12778: LD_ADDR_OWVAR 39
12782: PUSH
12783: LD_VAR 0 6
12787: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
12788: LD_ADDR_OWVAR 38
12792: PUSH
12793: LD_VAR 0 7
12797: PUSH
12798: LD_INT 1
12800: PPUSH
12801: LD_VAR 0 7
12805: PPUSH
12806: CALL_OW 12
12810: ARRAY
12811: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
12812: LD_ADDR_OWVAR 40
12816: PUSH
12817: LD_VAR 0 8
12821: PUSH
12822: LD_INT 1
12824: PPUSH
12825: LD_VAR 0 8
12829: PPUSH
12830: CALL_OW 12
12834: ARRAY
12835: ST_TO_ADDR
// for j = 1 to RuWeapons do
12836: LD_ADDR_VAR 0 14
12840: PUSH
12841: DOUBLE
12842: LD_INT 1
12844: DEC
12845: ST_TO_ADDR
12846: LD_VAR 0 8
12850: PUSH
12851: FOR_TO
12852: IFFALSE 13054
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
12854: LD_VAR 0 8
12858: PUSH
12859: LD_VAR 0 14
12863: ARRAY
12864: PUSH
12865: LD_INT 42
12867: EQUAL
12868: PUSH
12869: LD_VAR 0 8
12873: PUSH
12874: LD_VAR 0 14
12878: ARRAY
12879: PUSH
12880: LD_INT 43
12882: EQUAL
12883: OR
12884: PUSH
12885: LD_VAR 0 8
12889: PUSH
12890: LD_VAR 0 14
12894: ARRAY
12895: PUSH
12896: LD_INT 44
12898: EQUAL
12899: OR
12900: PUSH
12901: LD_VAR 0 8
12905: PUSH
12906: LD_VAR 0 14
12910: ARRAY
12911: PUSH
12912: LD_INT 45
12914: EQUAL
12915: OR
12916: PUSH
12917: LD_VAR 0 8
12921: PUSH
12922: LD_VAR 0 14
12926: ARRAY
12927: PUSH
12928: LD_INT 49
12930: EQUAL
12931: OR
12932: IFFALSE 12981
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
12934: LD_ADDR_VAR 0 17
12938: PUSH
12939: LD_INT 21
12941: PUSH
12942: LD_INT 22
12944: PUSH
12945: LD_INT 23
12947: PUSH
12948: LD_INT 24
12950: PUSH
12951: EMPTY
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
12957: LD_ADDR_OWVAR 37
12961: PUSH
12962: LD_VAR 0 17
12966: PUSH
12967: LD_INT 1
12969: PPUSH
12970: LD_VAR 0 17
12974: PPUSH
12975: CALL_OW 12
12979: ARRAY
12980: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
12981: LD_VAR 0 8
12985: PUSH
12986: LD_VAR 0 14
12990: ARRAY
12991: PUSH
12992: LD_INT 46
12994: EQUAL
12995: PUSH
12996: LD_VAR 0 8
13000: PUSH
13001: LD_VAR 0 14
13005: ARRAY
13006: PUSH
13007: LD_INT 47
13009: EQUAL
13010: OR
13011: IFFALSE 13052
// begin ruChassisTab = [ 23 , 24 ] ;
13013: LD_ADDR_VAR 0 17
13017: PUSH
13018: LD_INT 23
13020: PUSH
13021: LD_INT 24
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
13028: LD_ADDR_OWVAR 37
13032: PUSH
13033: LD_VAR 0 17
13037: PUSH
13038: LD_INT 1
13040: PPUSH
13041: LD_VAR 0 17
13045: PPUSH
13046: CALL_OW 12
13050: ARRAY
13051: ST_TO_ADDR
// end ; end ;
13052: GO 12851
13054: POP
13055: POP
// veh = CreateVehicle ;
13056: LD_ADDR_VAR 0 16
13060: PUSH
13061: CALL_OW 45
13065: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
13066: LD_VAR 0 16
13070: PPUSH
13071: LD_VAR 0 1
13075: PPUSH
13076: LD_INT 0
13078: PPUSH
13079: CALL_OW 49
// if vc_control = 1 then
13083: LD_OWVAR 38
13087: PUSH
13088: LD_INT 1
13090: EQUAL
13091: IFFALSE 13148
// begin hc_gallery =  ;
13093: LD_ADDR_OWVAR 33
13097: PUSH
13098: LD_STRING 
13100: ST_TO_ADDR
// hc_name =  ;
13101: LD_ADDR_OWVAR 26
13105: PUSH
13106: LD_STRING 
13108: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
13109: LD_INT 0
13111: PPUSH
13112: LD_INT 3
13114: PPUSH
13115: LD_VAR 0 4
13119: PPUSH
13120: CALL_OW 380
// un = CreateHuman ;
13124: LD_ADDR_VAR 0 15
13128: PUSH
13129: CALL_OW 44
13133: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
13134: LD_VAR 0 15
13138: PPUSH
13139: LD_VAR 0 16
13143: PPUSH
13144: CALL_OW 52
// end ; i = i + 1 ;
13148: LD_ADDR_VAR 0 13
13152: PUSH
13153: LD_VAR 0 13
13157: PUSH
13158: LD_INT 1
13160: PLUS
13161: ST_TO_ADDR
// end ; until i = vehCount ;
13162: LD_VAR 0 13
13166: PUSH
13167: LD_VAR 0 3
13171: EQUAL
13172: IFFALSE 11782
// repeat wait ( 0 0$1 ) ;
13174: LD_INT 35
13176: PPUSH
13177: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
13181: LD_ADDR_VAR 0 20
13185: PUSH
13186: LD_INT 22
13188: PUSH
13189: LD_VAR 0 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 21
13200: PUSH
13201: LD_INT 2
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: LD_INT 24
13210: PUSH
13211: LD_INT 650
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: LIST
13222: PPUSH
13223: CALL_OW 69
13227: ST_TO_ADDR
// if vehicleOK_list > 0 then
13228: LD_VAR 0 20
13232: PUSH
13233: LD_INT 0
13235: GREATER
13236: IFFALSE 13427
// begin for i in vehicleOK_list do
13238: LD_ADDR_VAR 0 13
13242: PUSH
13243: LD_VAR 0 20
13247: PUSH
13248: FOR_IN
13249: IFFALSE 13425
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
13251: LD_ADDR_VAR 0 21
13255: PUSH
13256: LD_INT 22
13258: PUSH
13259: LD_VAR 0 11
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PPUSH
13268: CALL_OW 69
13272: PPUSH
13273: LD_VAR 0 13
13277: PPUSH
13278: CALL_OW 74
13282: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13283: LD_ADDR_VAR 0 22
13287: PUSH
13288: LD_INT 22
13290: PUSH
13291: LD_VAR 0 11
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: LD_INT 59
13305: PUSH
13306: EMPTY
13307: LIST
13308: PUSH
13309: LD_INT 21
13311: PUSH
13312: LD_INT 1
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: PUSH
13319: LD_INT 21
13321: PUSH
13322: LD_INT 2
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: PPUSH
13342: CALL_OW 69
13346: PPUSH
13347: LD_VAR 0 13
13351: PPUSH
13352: CALL_OW 74
13356: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13357: LD_VAR 0 13
13361: PPUSH
13362: LD_VAR 0 21
13366: PPUSH
13367: CALL_OW 296
13371: PUSH
13372: LD_INT 8
13374: PLUS
13375: PUSH
13376: LD_VAR 0 13
13380: PPUSH
13381: LD_VAR 0 22
13385: PPUSH
13386: CALL_OW 296
13390: LESS
13391: IFFALSE 13409
// begin ComAttackUnit ( i , target1 ) ;
13393: LD_VAR 0 13
13397: PPUSH
13398: LD_VAR 0 21
13402: PPUSH
13403: CALL_OW 115
// end else
13407: GO 13423
// begin ComAttackUnit ( i , target2 ) ;
13409: LD_VAR 0 13
13413: PPUSH
13414: LD_VAR 0 22
13418: PPUSH
13419: CALL_OW 115
// end ; end ;
13423: GO 13248
13425: POP
13426: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
13427: LD_INT 22
13429: PUSH
13430: LD_VAR 0 2
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 21
13441: PUSH
13442: LD_INT 2
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PPUSH
13453: CALL_OW 69
13457: PUSH
13458: LD_INT 0
13460: EQUAL
13461: IFFALSE 13174
// end ;
13463: LD_VAR 0 12
13467: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
13468: LD_INT 0
13470: PPUSH
13471: PPUSH
13472: PPUSH
13473: PPUSH
13474: PPUSH
13475: PPUSH
13476: PPUSH
13477: PPUSH
13478: PPUSH
13479: PPUSH
13480: PPUSH
// for i = 1 to medicCount do
13481: LD_ADDR_VAR 0 13
13485: PUSH
13486: DOUBLE
13487: LD_INT 1
13489: DEC
13490: ST_TO_ADDR
13491: LD_VAR 0 7
13495: PUSH
13496: FOR_TO
13497: IFFALSE 13579
// begin uc_side = side ;
13499: LD_ADDR_OWVAR 20
13503: PUSH
13504: LD_VAR 0 1
13508: ST_TO_ADDR
// uc_nation = nation ;
13509: LD_ADDR_OWVAR 21
13513: PUSH
13514: LD_VAR 0 2
13518: ST_TO_ADDR
// hc_name =  ;
13519: LD_ADDR_OWVAR 26
13523: PUSH
13524: LD_STRING 
13526: ST_TO_ADDR
// hc_gallery =  ;
13527: LD_ADDR_OWVAR 33
13531: PUSH
13532: LD_STRING 
13534: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
13535: LD_INT 0
13537: PPUSH
13538: LD_INT 4
13540: PPUSH
13541: LD_VAR 0 8
13545: PPUSH
13546: CALL_OW 380
// un = CreateHuman ;
13550: LD_ADDR_VAR 0 15
13554: PUSH
13555: CALL_OW 44
13559: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13560: LD_VAR 0 15
13564: PPUSH
13565: LD_VAR 0 9
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL_OW 49
// end ;
13577: GO 13496
13579: POP
13580: POP
// for i = 1 to soldierCount do
13581: LD_ADDR_VAR 0 13
13585: PUSH
13586: DOUBLE
13587: LD_INT 1
13589: DEC
13590: ST_TO_ADDR
13591: LD_VAR 0 3
13595: PUSH
13596: FOR_TO
13597: IFFALSE 13679
// begin uc_side = side ;
13599: LD_ADDR_OWVAR 20
13603: PUSH
13604: LD_VAR 0 1
13608: ST_TO_ADDR
// uc_nation = nation ;
13609: LD_ADDR_OWVAR 21
13613: PUSH
13614: LD_VAR 0 2
13618: ST_TO_ADDR
// hc_name =  ;
13619: LD_ADDR_OWVAR 26
13623: PUSH
13624: LD_STRING 
13626: ST_TO_ADDR
// hc_gallery =  ;
13627: LD_ADDR_OWVAR 33
13631: PUSH
13632: LD_STRING 
13634: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
13635: LD_INT 0
13637: PPUSH
13638: LD_INT 1
13640: PPUSH
13641: LD_VAR 0 8
13645: PPUSH
13646: CALL_OW 380
// un = CreateHuman ;
13650: LD_ADDR_VAR 0 15
13654: PUSH
13655: CALL_OW 44
13659: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13660: LD_VAR 0 15
13664: PPUSH
13665: LD_VAR 0 9
13669: PPUSH
13670: LD_INT 0
13672: PPUSH
13673: CALL_OW 49
// end ;
13677: GO 13596
13679: POP
13680: POP
// for i = 1 to sniperCount do
13681: LD_ADDR_VAR 0 13
13685: PUSH
13686: DOUBLE
13687: LD_INT 1
13689: DEC
13690: ST_TO_ADDR
13691: LD_VAR 0 4
13695: PUSH
13696: FOR_TO
13697: IFFALSE 13779
// begin uc_side = side ;
13699: LD_ADDR_OWVAR 20
13703: PUSH
13704: LD_VAR 0 1
13708: ST_TO_ADDR
// uc_nation = nation ;
13709: LD_ADDR_OWVAR 21
13713: PUSH
13714: LD_VAR 0 2
13718: ST_TO_ADDR
// hc_name =  ;
13719: LD_ADDR_OWVAR 26
13723: PUSH
13724: LD_STRING 
13726: ST_TO_ADDR
// hc_gallery =  ;
13727: LD_ADDR_OWVAR 33
13731: PUSH
13732: LD_STRING 
13734: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
13735: LD_INT 0
13737: PPUSH
13738: LD_INT 5
13740: PPUSH
13741: LD_VAR 0 8
13745: PPUSH
13746: CALL_OW 380
// un = CreateHuman ;
13750: LD_ADDR_VAR 0 15
13754: PUSH
13755: CALL_OW 44
13759: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13760: LD_VAR 0 15
13764: PPUSH
13765: LD_VAR 0 9
13769: PPUSH
13770: LD_INT 0
13772: PPUSH
13773: CALL_OW 49
// end ;
13777: GO 13696
13779: POP
13780: POP
// for i = 1 to bazookCount do
13781: LD_ADDR_VAR 0 13
13785: PUSH
13786: DOUBLE
13787: LD_INT 1
13789: DEC
13790: ST_TO_ADDR
13791: LD_VAR 0 5
13795: PUSH
13796: FOR_TO
13797: IFFALSE 13879
// begin uc_side = side ;
13799: LD_ADDR_OWVAR 20
13803: PUSH
13804: LD_VAR 0 1
13808: ST_TO_ADDR
// uc_nation = nation ;
13809: LD_ADDR_OWVAR 21
13813: PUSH
13814: LD_VAR 0 2
13818: ST_TO_ADDR
// hc_name =  ;
13819: LD_ADDR_OWVAR 26
13823: PUSH
13824: LD_STRING 
13826: ST_TO_ADDR
// hc_gallery =  ;
13827: LD_ADDR_OWVAR 33
13831: PUSH
13832: LD_STRING 
13834: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
13835: LD_INT 0
13837: PPUSH
13838: LD_INT 9
13840: PPUSH
13841: LD_VAR 0 8
13845: PPUSH
13846: CALL_OW 380
// un = CreateHuman ;
13850: LD_ADDR_VAR 0 15
13854: PUSH
13855: CALL_OW 44
13859: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13860: LD_VAR 0 15
13864: PPUSH
13865: LD_VAR 0 9
13869: PPUSH
13870: LD_INT 0
13872: PPUSH
13873: CALL_OW 49
// end ;
13877: GO 13796
13879: POP
13880: POP
// for i = 1 to mortalCount do
13881: LD_ADDR_VAR 0 13
13885: PUSH
13886: DOUBLE
13887: LD_INT 1
13889: DEC
13890: ST_TO_ADDR
13891: LD_VAR 0 6
13895: PUSH
13896: FOR_TO
13897: IFFALSE 13979
// begin uc_side = side ;
13899: LD_ADDR_OWVAR 20
13903: PUSH
13904: LD_VAR 0 1
13908: ST_TO_ADDR
// uc_nation = nation ;
13909: LD_ADDR_OWVAR 21
13913: PUSH
13914: LD_VAR 0 2
13918: ST_TO_ADDR
// hc_name =  ;
13919: LD_ADDR_OWVAR 26
13923: PUSH
13924: LD_STRING 
13926: ST_TO_ADDR
// hc_gallery =  ;
13927: LD_ADDR_OWVAR 33
13931: PUSH
13932: LD_STRING 
13934: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
13935: LD_INT 0
13937: PPUSH
13938: LD_INT 8
13940: PPUSH
13941: LD_VAR 0 8
13945: PPUSH
13946: CALL_OW 380
// un = CreateHuman ;
13950: LD_ADDR_VAR 0 15
13954: PUSH
13955: CALL_OW 44
13959: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
13960: LD_VAR 0 15
13964: PPUSH
13965: LD_VAR 0 9
13969: PPUSH
13970: LD_INT 0
13972: PPUSH
13973: CALL_OW 49
// end ;
13977: GO 13896
13979: POP
13980: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
13981: LD_ADDR_VAR 0 18
13985: PUSH
13986: LD_INT 22
13988: PUSH
13989: LD_VAR 0 1
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 2
14000: PUSH
14001: LD_INT 25
14003: PUSH
14004: LD_INT 1
14006: PUSH
14007: EMPTY
14008: LIST
14009: LIST
14010: PUSH
14011: LD_INT 25
14013: PUSH
14014: LD_INT 5
14016: PUSH
14017: EMPTY
14018: LIST
14019: LIST
14020: PUSH
14021: LD_INT 25
14023: PUSH
14024: LD_INT 8
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: PUSH
14031: LD_INT 25
14033: PUSH
14034: LD_INT 9
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: EMPTY
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 69
14056: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
14057: LD_ADDR_VAR 0 17
14061: PUSH
14062: LD_INT 22
14064: PUSH
14065: LD_VAR 0 1
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 25
14076: PUSH
14077: LD_INT 4
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: PPUSH
14088: CALL_OW 69
14092: ST_TO_ADDR
// for i in medic_list do
14093: LD_ADDR_VAR 0 13
14097: PUSH
14098: LD_VAR 0 17
14102: PUSH
14103: FOR_IN
14104: IFFALSE 14122
// ComMoveToArea ( i , healArea ) ;
14106: LD_VAR 0 13
14110: PPUSH
14111: LD_VAR 0 10
14115: PPUSH
14116: CALL_OW 113
14120: GO 14103
14122: POP
14123: POP
// repeat wait ( 0 0$1 ) ;
14124: LD_INT 35
14126: PPUSH
14127: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
14131: LD_ADDR_VAR 0 16
14135: PUSH
14136: LD_INT 22
14138: PUSH
14139: LD_VAR 0 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 1
14150: PUSH
14151: LD_INT 3
14153: PUSH
14154: LD_INT 24
14156: PUSH
14157: LD_INT 550
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PUSH
14168: LD_INT 24
14170: PUSH
14171: LD_INT 250
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PPUSH
14187: CALL_OW 69
14191: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
14192: LD_ADDR_VAR 0 18
14196: PUSH
14197: LD_INT 22
14199: PUSH
14200: LD_VAR 0 1
14204: PUSH
14205: EMPTY
14206: LIST
14207: LIST
14208: PUSH
14209: LD_INT 2
14211: PUSH
14212: LD_INT 25
14214: PUSH
14215: LD_INT 1
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: PUSH
14222: LD_INT 25
14224: PUSH
14225: LD_INT 5
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: PUSH
14232: LD_INT 25
14234: PUSH
14235: LD_INT 8
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 25
14244: PUSH
14245: LD_INT 9
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: EMPTY
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: PUSH
14259: LD_INT 24
14261: PUSH
14262: LD_INT 1000
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: LIST
14273: PPUSH
14274: CALL_OW 69
14278: ST_TO_ADDR
// if medicCount > 0 then
14279: LD_VAR 0 7
14283: PUSH
14284: LD_INT 0
14286: GREATER
14287: IFFALSE 14361
// begin if damageUnit_list > 0 then
14289: LD_VAR 0 16
14293: PUSH
14294: LD_INT 0
14296: GREATER
14297: IFFALSE 14361
// begin for i in damageUnit_list do
14299: LD_ADDR_VAR 0 13
14303: PUSH
14304: LD_VAR 0 16
14308: PUSH
14309: FOR_IN
14310: IFFALSE 14359
// begin ComMoveToArea ( i , healArea ) ;
14312: LD_VAR 0 13
14316: PPUSH
14317: LD_VAR 0 10
14321: PPUSH
14322: CALL_OW 113
// for j in medic_list do
14326: LD_ADDR_VAR 0 14
14330: PUSH
14331: LD_VAR 0 17
14335: PUSH
14336: FOR_IN
14337: IFFALSE 14355
// AddComHeal ( j , i ) ;
14339: LD_VAR 0 14
14343: PPUSH
14344: LD_VAR 0 13
14348: PPUSH
14349: CALL_OW 188
14353: GO 14336
14355: POP
14356: POP
// end ;
14357: GO 14309
14359: POP
14360: POP
// end ; end ; for i in soldiersOK_list do
14361: LD_ADDR_VAR 0 13
14365: PUSH
14366: LD_VAR 0 18
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14548
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14374: LD_ADDR_VAR 0 21
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_VAR 0 11
14386: PUSH
14387: EMPTY
14388: LIST
14389: LIST
14390: PPUSH
14391: CALL_OW 69
14395: PPUSH
14396: LD_VAR 0 13
14400: PPUSH
14401: CALL_OW 74
14405: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14406: LD_ADDR_VAR 0 22
14410: PUSH
14411: LD_INT 22
14413: PUSH
14414: LD_VAR 0 11
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 2
14425: PUSH
14426: LD_INT 59
14428: PUSH
14429: EMPTY
14430: LIST
14431: PUSH
14432: LD_INT 21
14434: PUSH
14435: LD_INT 1
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: PPUSH
14465: CALL_OW 69
14469: PPUSH
14470: LD_VAR 0 13
14474: PPUSH
14475: CALL_OW 74
14479: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14480: LD_VAR 0 13
14484: PPUSH
14485: LD_VAR 0 21
14489: PPUSH
14490: CALL_OW 296
14494: PUSH
14495: LD_INT 8
14497: PLUS
14498: PUSH
14499: LD_VAR 0 13
14503: PPUSH
14504: LD_VAR 0 22
14508: PPUSH
14509: CALL_OW 296
14513: LESS
14514: IFFALSE 14532
// begin ComAttackUnit ( i , target1 ) ;
14516: LD_VAR 0 13
14520: PPUSH
14521: LD_VAR 0 21
14525: PPUSH
14526: CALL_OW 115
// end else
14530: GO 14546
// begin ComAttackUnit ( i , target2 ) ;
14532: LD_VAR 0 13
14536: PPUSH
14537: LD_VAR 0 22
14541: PPUSH
14542: CALL_OW 115
// end ; end ;
14546: GO 14371
14548: POP
14549: POP
// for i in soldiersOK_list do
14550: LD_ADDR_VAR 0 13
14554: PUSH
14555: LD_VAR 0 18
14559: PUSH
14560: FOR_IN
14561: IFFALSE 14737
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
14563: LD_ADDR_VAR 0 21
14567: PUSH
14568: LD_INT 22
14570: PUSH
14571: LD_VAR 0 11
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: PPUSH
14580: CALL_OW 69
14584: PPUSH
14585: LD_VAR 0 13
14589: PPUSH
14590: CALL_OW 74
14594: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
14595: LD_ADDR_VAR 0 22
14599: PUSH
14600: LD_INT 22
14602: PUSH
14603: LD_VAR 0 11
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 2
14614: PUSH
14615: LD_INT 59
14617: PUSH
14618: EMPTY
14619: LIST
14620: PUSH
14621: LD_INT 21
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: LD_INT 21
14633: PUSH
14634: LD_INT 2
14636: PUSH
14637: EMPTY
14638: LIST
14639: LIST
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: PPUSH
14654: CALL_OW 69
14658: PPUSH
14659: LD_VAR 0 13
14663: PPUSH
14664: CALL_OW 74
14668: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
14669: LD_VAR 0 13
14673: PPUSH
14674: LD_VAR 0 21
14678: PPUSH
14679: CALL_OW 296
14683: PUSH
14684: LD_INT 8
14686: PLUS
14687: PUSH
14688: LD_VAR 0 13
14692: PPUSH
14693: LD_VAR 0 22
14697: PPUSH
14698: CALL_OW 296
14702: LESS
14703: IFFALSE 14721
// begin ComAttackUnit ( i , target1 ) ;
14705: LD_VAR 0 13
14709: PPUSH
14710: LD_VAR 0 21
14714: PPUSH
14715: CALL_OW 115
// end else
14719: GO 14735
// begin ComAttackUnit ( i , target2 ) ;
14721: LD_VAR 0 13
14725: PPUSH
14726: LD_VAR 0 22
14730: PPUSH
14731: CALL_OW 115
// end ; end ;
14735: GO 14560
14737: POP
14738: POP
// until soldiersOK_list = [ ] ;
14739: LD_VAR 0 18
14743: PUSH
14744: EMPTY
14745: EQUAL
14746: IFFALSE 14124
// end ;
14748: LD_VAR 0 12
14752: RET
// export function TameApemans ; var i , j ; begin
14753: LD_INT 0
14755: PPUSH
14756: PPUSH
14757: PPUSH
// repeat wait ( 0 0$1 ) ;
14758: LD_INT 35
14760: PPUSH
14761: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
14765: LD_ADDR_VAR 0 2
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_INT 2
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: LD_INT 25
14782: PUSH
14783: LD_INT 4
14785: PUSH
14786: EMPTY
14787: LIST
14788: LIST
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PPUSH
14794: CALL_OW 69
14798: PUSH
14799: FOR_IN
14800: IFFALSE 14877
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
14802: LD_ADDR_VAR 0 3
14806: PUSH
14807: LD_INT 5
14809: PPUSH
14810: LD_INT 22
14812: PUSH
14813: LD_INT 0
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: PUSH
14820: LD_INT 25
14822: PUSH
14823: LD_INT 12
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PPUSH
14834: CALL_OW 70
14838: PUSH
14839: FOR_IN
14840: IFFALSE 14873
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
14842: LD_VAR 0 2
14846: PPUSH
14847: LD_VAR 0 3
14851: PPUSH
14852: CALL_OW 250
14856: PPUSH
14857: LD_VAR 0 3
14861: PPUSH
14862: CALL_OW 251
14866: PPUSH
14867: CALL_OW 191
// end ;
14871: GO 14839
14873: POP
14874: POP
// end ;
14875: GO 14799
14877: POP
14878: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
14879: LD_INT 22
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PUSH
14889: LD_INT 25
14891: PUSH
14892: LD_INT 4
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PPUSH
14903: CALL_OW 69
14907: PUSH
14908: LD_INT 0
14910: EQUAL
14911: PUSH
14912: LD_INT 5
14914: PPUSH
14915: LD_INT 22
14917: PUSH
14918: LD_INT 0
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: LD_INT 25
14927: PUSH
14928: LD_INT 12
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: PUSH
14935: EMPTY
14936: LIST
14937: LIST
14938: PPUSH
14939: CALL_OW 70
14943: PUSH
14944: LD_INT 0
14946: EQUAL
14947: OR
14948: IFFALSE 14758
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
14950: LD_ADDR_VAR 0 2
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_INT 2
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 25
14967: PUSH
14968: LD_INT 12
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: EMPTY
14976: LIST
14977: LIST
14978: PPUSH
14979: CALL_OW 69
14983: PUSH
14984: FOR_IN
14985: IFFALSE 15020
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
14987: LD_VAR 0 2
14991: PPUSH
14992: LD_INT 16
14994: PUSH
14995: LD_INT 15
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: PUSH
15002: LD_INT 1
15004: PPUSH
15005: LD_INT 2
15007: PPUSH
15008: CALL_OW 12
15012: ARRAY
15013: PPUSH
15014: CALL_OW 336
15018: GO 14984
15020: POP
15021: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
15022: LD_ADDR_VAR 0 2
15026: PUSH
15027: LD_INT 22
15029: PUSH
15030: LD_INT 2
15032: PUSH
15033: EMPTY
15034: LIST
15035: LIST
15036: PUSH
15037: LD_INT 25
15039: PUSH
15040: LD_INT 4
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: PUSH
15047: EMPTY
15048: LIST
15049: LIST
15050: PPUSH
15051: CALL_OW 69
15055: PUSH
15056: FOR_IN
15057: IFFALSE 15075
// ComEnterUnit ( i , arLab ) ;
15059: LD_VAR 0 2
15063: PPUSH
15064: LD_EXP 42
15068: PPUSH
15069: CALL_OW 120
15073: GO 15056
15075: POP
15076: POP
// end ;
15077: LD_VAR 0 1
15081: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
15090: PPUSH
15091: PPUSH
15092: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
15093: LD_INT 22
15095: PUSH
15096: LD_VAR 0 1
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 21
15107: PUSH
15108: LD_INT 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: PUSH
15124: LD_VAR 0 3
15128: LESSEQUAL
15129: IFFALSE 15273
// for i = 1 to vehCount do
15131: LD_ADDR_VAR 0 10
15135: PUSH
15136: DOUBLE
15137: LD_INT 1
15139: DEC
15140: ST_TO_ADDR
15141: LD_VAR 0 3
15145: PUSH
15146: FOR_TO
15147: IFFALSE 15271
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
15149: LD_ADDR_VAR 0 12
15153: PUSH
15154: LD_VAR 0 5
15158: PUSH
15159: LD_INT 1
15161: PPUSH
15162: LD_VAR 0 5
15166: PPUSH
15167: CALL_OW 12
15171: ARRAY
15172: ST_TO_ADDR
// if randWeapon = 46 then
15173: LD_VAR 0 12
15177: PUSH
15178: LD_INT 46
15180: EQUAL
15181: IFFALSE 15226
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
15183: LD_VAR 0 2
15187: PPUSH
15188: LD_INT 24
15190: PPUSH
15191: LD_VAR 0 6
15195: PPUSH
15196: LD_VAR 0 7
15200: PUSH
15201: LD_INT 1
15203: PPUSH
15204: LD_VAR 0 7
15208: PPUSH
15209: CALL_OW 12
15213: ARRAY
15214: PPUSH
15215: LD_VAR 0 12
15219: PPUSH
15220: CALL_OW 185
15224: GO 15269
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
15226: LD_VAR 0 2
15230: PPUSH
15231: LD_VAR 0 8
15235: PPUSH
15236: LD_VAR 0 6
15240: PPUSH
15241: LD_VAR 0 7
15245: PUSH
15246: LD_INT 1
15248: PPUSH
15249: LD_VAR 0 7
15253: PPUSH
15254: CALL_OW 12
15258: ARRAY
15259: PPUSH
15260: LD_VAR 0 12
15264: PPUSH
15265: CALL_OW 185
// end ;
15269: GO 15146
15271: POP
15272: POP
// repeat wait ( 0 0$1 ) ;
15273: LD_INT 35
15275: PPUSH
15276: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
15280: LD_INT 22
15282: PUSH
15283: LD_VAR 0 1
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 24
15304: PUSH
15305: LD_INT 250
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: PUSH
15322: LD_VAR 0 3
15326: GREATEREQUAL
15327: IFFALSE 15273
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
15329: LD_INT 22
15331: PUSH
15332: LD_VAR 0 1
15336: PUSH
15337: EMPTY
15338: LIST
15339: LIST
15340: PUSH
15341: LD_INT 21
15343: PUSH
15344: LD_INT 2
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: PUSH
15351: LD_INT 24
15353: PUSH
15354: LD_INT 250
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: PPUSH
15366: CALL_OW 69
15370: PUSH
15371: LD_VAR 0 3
15375: GREATEREQUAL
15376: IFFALSE 15719
// begin repeat begin wait ( 0 0$1 ) ;
15378: LD_INT 35
15380: PPUSH
15381: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
15385: LD_INT 22
15387: PUSH
15388: LD_VAR 0 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 21
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 24
15409: PUSH
15410: LD_INT 651
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: PUSH
15427: LD_INT 0
15429: GREATER
15430: IFFALSE 15658
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
15432: LD_ADDR_VAR 0 10
15436: PUSH
15437: LD_INT 22
15439: PUSH
15440: LD_VAR 0 1
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: LD_INT 21
15451: PUSH
15452: LD_INT 2
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 24
15461: PUSH
15462: LD_INT 651
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: EMPTY
15470: LIST
15471: LIST
15472: LIST
15473: PPUSH
15474: CALL_OW 69
15478: PUSH
15479: FOR_IN
15480: IFFALSE 15656
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
15482: LD_ADDR_VAR 0 16
15486: PUSH
15487: LD_INT 22
15489: PUSH
15490: LD_VAR 0 4
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: PPUSH
15499: CALL_OW 69
15503: PPUSH
15504: LD_VAR 0 10
15508: PPUSH
15509: CALL_OW 74
15513: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
15514: LD_ADDR_VAR 0 17
15518: PUSH
15519: LD_INT 22
15521: PUSH
15522: LD_VAR 0 4
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: PUSH
15531: LD_INT 2
15533: PUSH
15534: LD_INT 59
15536: PUSH
15537: EMPTY
15538: LIST
15539: PUSH
15540: LD_INT 21
15542: PUSH
15543: LD_INT 1
15545: PUSH
15546: EMPTY
15547: LIST
15548: LIST
15549: PUSH
15550: LD_INT 21
15552: PUSH
15553: LD_INT 2
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: PUSH
15566: EMPTY
15567: LIST
15568: LIST
15569: PUSH
15570: EMPTY
15571: LIST
15572: PPUSH
15573: CALL_OW 69
15577: PPUSH
15578: LD_VAR 0 10
15582: PPUSH
15583: CALL_OW 74
15587: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
15588: LD_VAR 0 10
15592: PPUSH
15593: LD_VAR 0 16
15597: PPUSH
15598: CALL_OW 296
15602: PUSH
15603: LD_INT 8
15605: PLUS
15606: PUSH
15607: LD_VAR 0 10
15611: PPUSH
15612: LD_VAR 0 17
15616: PPUSH
15617: CALL_OW 296
15621: LESS
15622: IFFALSE 15640
// begin ComAttackUnit ( i , target1 ) ;
15624: LD_VAR 0 10
15628: PPUSH
15629: LD_VAR 0 16
15633: PPUSH
15634: CALL_OW 115
// end else
15638: GO 15654
// begin ComAttackUnit ( i , target2 ) ;
15640: LD_VAR 0 10
15644: PPUSH
15645: LD_VAR 0 17
15649: PPUSH
15650: CALL_OW 115
// end ; end ;
15654: GO 15479
15656: POP
15657: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
15658: LD_INT 22
15660: PUSH
15661: LD_VAR 0 1
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: LD_INT 21
15672: PUSH
15673: LD_INT 2
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PUSH
15689: LD_INT 0
15691: EQUAL
15692: PUSH
15693: LD_INT 22
15695: PUSH
15696: LD_VAR 0 4
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PUSH
15705: EMPTY
15706: LIST
15707: PPUSH
15708: CALL_OW 69
15712: PUSH
15713: LD_INT 0
15715: EQUAL
15716: OR
15717: IFFALSE 15378
// end ; end ; end_of_file
15719: LD_VAR 0 9
15723: RET
// every 0 0$1 trigger russianAI = 1 do
15724: LD_EXP 37
15728: PUSH
15729: LD_INT 1
15731: EQUAL
15732: IFFALSE 15831
15734: GO 15736
15736: DISABLE
// begin enable ;
15737: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
15738: LD_INT 3
15740: PPUSH
15741: LD_EXP 28
15745: PPUSH
15746: CALL 10872 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
15750: LD_INT 3
15752: PPUSH
15753: LD_EXP 40
15757: PPUSH
15758: CALL 11131 0 2
// if ruPossition = 1 then
15762: LD_EXP 39
15766: PUSH
15767: LD_INT 1
15769: EQUAL
15770: IFFALSE 15785
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase ) ;
15772: LD_INT 3
15774: PPUSH
15775: LD_INT 13
15777: PPUSH
15778: LD_INT 10
15780: PPUSH
15781: CALL 11337 0 3
// if ruPossition = 2 then
15785: LD_EXP 39
15789: PUSH
15790: LD_INT 2
15792: EQUAL
15793: IFFALSE 15808
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase ) ;
15795: LD_INT 3
15797: PPUSH
15798: LD_INT 14
15800: PPUSH
15801: LD_INT 11
15803: PPUSH
15804: CALL 11337 0 3
// if ruPossition = 3 then
15808: LD_EXP 39
15812: PUSH
15813: LD_INT 3
15815: EQUAL
15816: IFFALSE 15831
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase ) ;
15818: LD_INT 3
15820: PPUSH
15821: LD_INT 15
15823: PPUSH
15824: LD_INT 12
15826: PPUSH
15827: CALL 11337 0 3
// end ;
15831: END
// every 0 0$1 do
15832: GO 15834
15834: DISABLE
// begin enable ;
15835: ENABLE
// if ruPossition = 1 then
15836: LD_EXP 39
15840: PUSH
15841: LD_INT 1
15843: EQUAL
15844: IFFALSE 15856
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
15846: LD_INT 3
15848: PPUSH
15849: LD_INT 10
15851: PPUSH
15852: CALL 10570 0 2
// if ruPossition = 2 then
15856: LD_EXP 39
15860: PUSH
15861: LD_INT 2
15863: EQUAL
15864: IFFALSE 15876
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
15866: LD_INT 3
15868: PPUSH
15869: LD_INT 11
15871: PPUSH
15872: CALL 10570 0 2
// if ruPossition = 3 then
15876: LD_EXP 39
15880: PUSH
15881: LD_INT 3
15883: EQUAL
15884: IFFALSE 15896
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
15886: LD_INT 3
15888: PPUSH
15889: LD_INT 12
15891: PPUSH
15892: CALL 10570 0 2
// IntBazooka ( 3 , 1 ) ;
15896: LD_INT 3
15898: PPUSH
15899: LD_INT 1
15901: PPUSH
15902: CALL 10177 0 2
// IntBazooka ( 6 , 1 ) ;
15906: LD_INT 6
15908: PPUSH
15909: LD_INT 1
15911: PPUSH
15912: CALL 10177 0 2
// end ;
15916: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
15917: LD_EXP 37
15921: PUSH
15922: LD_INT 1
15924: EQUAL
15925: PUSH
15926: LD_EXP 33
15930: PPUSH
15931: CALL_OW 302
15935: AND
15936: PUSH
15937: LD_EXP 33
15941: PPUSH
15942: CALL_OW 255
15946: PUSH
15947: LD_INT 3
15949: EQUAL
15950: AND
15951: PUSH
15952: LD_INT 22
15954: PUSH
15955: LD_INT 3
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 2
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 33
15974: PUSH
15975: LD_INT 3
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: EMPTY
15983: LIST
15984: LIST
15985: LIST
15986: PPUSH
15987: CALL_OW 69
15991: PUSH
15992: LD_INT 0
15994: EQUAL
15995: AND
15996: IFFALSE 16204
15998: GO 16000
16000: DISABLE
// begin enable ;
16001: ENABLE
// if Difficulty = 1 then
16002: LD_OWVAR 67
16006: PUSH
16007: LD_INT 1
16009: EQUAL
16010: IFFALSE 16072
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
16012: LD_INT 3
16014: PPUSH
16015: LD_EXP 33
16019: PPUSH
16020: LD_INT 5
16022: PPUSH
16023: LD_INT 8
16025: PPUSH
16026: CALL_OW 12
16030: PPUSH
16031: LD_INT 1
16033: PPUSH
16034: LD_INT 43
16036: PUSH
16037: LD_INT 44
16039: PUSH
16040: LD_INT 45
16042: PUSH
16043: LD_INT 46
16045: PUSH
16046: EMPTY
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: PPUSH
16052: LD_INT 1
16054: PPUSH
16055: LD_INT 1
16057: PUSH
16058: LD_INT 3
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PPUSH
16065: LD_INT 22
16067: PPUSH
16068: CALL 15082 0 8
// if Difficulty = 2 then
16072: LD_OWVAR 67
16076: PUSH
16077: LD_INT 2
16079: EQUAL
16080: IFFALSE 16138
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
16082: LD_INT 3
16084: PPUSH
16085: LD_EXP 33
16089: PPUSH
16090: LD_INT 6
16092: PPUSH
16093: LD_INT 8
16095: PPUSH
16096: CALL_OW 12
16100: PPUSH
16101: LD_INT 1
16103: PPUSH
16104: LD_INT 44
16106: PUSH
16107: LD_INT 45
16109: PUSH
16110: LD_INT 46
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: LIST
16117: PPUSH
16118: LD_INT 1
16120: PPUSH
16121: LD_INT 1
16123: PUSH
16124: LD_INT 3
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: PPUSH
16131: LD_INT 22
16133: PPUSH
16134: CALL 15082 0 8
// if Difficulty = 3 then
16138: LD_OWVAR 67
16142: PUSH
16143: LD_INT 3
16145: EQUAL
16146: IFFALSE 16204
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
16148: LD_INT 3
16150: PPUSH
16151: LD_EXP 33
16155: PPUSH
16156: LD_INT 7
16158: PPUSH
16159: LD_INT 8
16161: PPUSH
16162: CALL_OW 12
16166: PPUSH
16167: LD_INT 1
16169: PPUSH
16170: LD_INT 44
16172: PUSH
16173: LD_INT 45
16175: PUSH
16176: LD_INT 46
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: LD_INT 1
16189: PUSH
16190: LD_INT 3
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: LD_INT 22
16199: PPUSH
16200: CALL 15082 0 8
// end ; end_of_file
16204: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 255
16214: PUSH
16215: LD_INT 4
16217: EQUAL
16218: IFFALSE 16232
// SetBName ( building , epsilon ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: LD_STRING epsilon
16227: PPUSH
16228: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
16232: LD_VAR 0 1
16236: PPUSH
16237: CALL_OW 255
16241: PUSH
16242: LD_INT 1
16244: EQUAL
16245: PUSH
16246: LD_VAR 0 1
16250: PPUSH
16251: CALL_OW 266
16255: PUSH
16256: LD_INT 0
16258: EQUAL
16259: AND
16260: IFFALSE 16274
// SetBName ( building , epsilon ) ;
16262: LD_VAR 0 1
16266: PPUSH
16267: LD_STRING epsilon
16269: PPUSH
16270: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
16274: LD_VAR 0 1
16278: PPUSH
16279: CALL_OW 255
16283: PUSH
16284: LD_INT 3
16286: EQUAL
16287: PUSH
16288: LD_VAR 0 1
16292: PPUSH
16293: CALL_OW 266
16297: PUSH
16298: LD_INT 0
16300: EQUAL
16301: AND
16302: IFFALSE 16316
// SetBName ( building , chuikov ) ;
16304: LD_VAR 0 1
16308: PPUSH
16309: LD_STRING chuikov
16311: PPUSH
16312: CALL_OW 500
// end ;
16316: PPOPN 2
16318: END
// on BuildingComplete ( building ) do var i ;
16319: LD_INT 0
16321: PPUSH
// begin if GetSide ( building ) = 1 then
16322: LD_VAR 0 1
16326: PPUSH
16327: CALL_OW 255
16331: PUSH
16332: LD_INT 1
16334: EQUAL
16335: IFFALSE 16535
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
16337: LD_INT 22
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 2
16349: PUSH
16350: LD_INT 30
16352: PUSH
16353: LD_INT 7
16355: PUSH
16356: EMPTY
16357: LIST
16358: LIST
16359: PUSH
16360: LD_INT 30
16362: PUSH
16363: LD_INT 8
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: PUSH
16370: LD_INT 1
16372: PUSH
16373: LD_INT 30
16375: PUSH
16376: LD_INT 11
16378: PUSH
16379: EMPTY
16380: LIST
16381: LIST
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: LD_INT 2
16388: PUSH
16389: LD_INT 30
16391: PUSH
16392: LD_INT 26
16394: PUSH
16395: EMPTY
16396: LIST
16397: LIST
16398: PUSH
16399: LD_INT 30
16401: PUSH
16402: LD_INT 27
16404: PUSH
16405: EMPTY
16406: LIST
16407: LIST
16408: PUSH
16409: LD_INT 30
16411: PUSH
16412: LD_INT 28
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: PUSH
16429: EMPTY
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PPUSH
16444: CALL_OW 69
16448: PUSH
16449: LD_INT 0
16451: GREATER
16452: PUSH
16453: LD_INT 22
16455: PUSH
16456: LD_INT 1
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: PUSH
16463: LD_INT 2
16465: PUSH
16466: LD_INT 30
16468: PUSH
16469: LD_INT 26
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: LD_INT 30
16478: PUSH
16479: LD_INT 27
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 30
16488: PUSH
16489: LD_INT 28
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PPUSH
16506: CALL_OW 69
16510: PUSH
16511: LD_INT 0
16513: GREATER
16514: AND
16515: PUSH
16516: LD_EXP 50
16520: PUSH
16521: LD_INT 0
16523: EQUAL
16524: AND
16525: IFFALSE 16535
// eventVar1 = 1 ;
16527: LD_ADDR_EXP 50
16531: PUSH
16532: LD_INT 1
16534: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
16535: LD_VAR 0 1
16539: PPUSH
16540: CALL_OW 255
16544: PUSH
16545: LD_INT 3
16547: EQUAL
16548: IFFALSE 17028
// begin if GetBType ( building ) = b_depot then
16550: LD_VAR 0 1
16554: PPUSH
16555: CALL_OW 266
16559: PUSH
16560: LD_INT 0
16562: EQUAL
16563: IFFALSE 16635
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
16565: LD_VAR 0 1
16569: PPUSH
16570: CALL_OW 274
16574: PPUSH
16575: LD_INT 1
16577: PPUSH
16578: LD_INT 5000
16580: PPUSH
16581: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
16585: LD_VAR 0 1
16589: PPUSH
16590: CALL_OW 274
16594: PPUSH
16595: LD_INT 2
16597: PPUSH
16598: LD_INT 5000
16600: PPUSH
16601: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
16605: LD_VAR 0 1
16609: PPUSH
16610: CALL_OW 274
16614: PPUSH
16615: LD_INT 3
16617: PPUSH
16618: LD_INT 5000
16620: PPUSH
16621: CALL_OW 277
// ruDepot = building ;
16625: LD_ADDR_EXP 28
16629: PUSH
16630: LD_VAR 0 1
16634: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 266
16644: PUSH
16645: LD_INT 0
16647: EQUAL
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 266
16658: PUSH
16659: LD_INT 2
16661: EQUAL
16662: OR
16663: PUSH
16664: LD_VAR 0 1
16668: PPUSH
16669: CALL_OW 266
16673: PUSH
16674: LD_INT 4
16676: EQUAL
16677: OR
16678: IFFALSE 16689
// ComUpgrade ( building ) ;
16680: LD_VAR 0 1
16684: PPUSH
16685: CALL_OW 146
// if GetBType ( building ) = b_lab then
16689: LD_VAR 0 1
16693: PPUSH
16694: CALL_OW 266
16698: PUSH
16699: LD_INT 6
16701: EQUAL
16702: IFFALSE 16905
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
16704: LD_INT 22
16706: PUSH
16707: LD_INT 3
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 30
16716: PUSH
16717: LD_INT 8
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PPUSH
16728: CALL_OW 69
16732: PUSH
16733: LD_INT 0
16735: EQUAL
16736: IFFALSE 16774
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
16738: LD_VAR 0 1
16742: PPUSH
16743: LD_INT 10
16745: PPUSH
16746: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
16750: LD_VAR 0 1
16754: PPUSH
16755: LD_INT 12
16757: PPUSH
16758: CALL_OW 207
// ruLab1 = building ;
16762: LD_ADDR_EXP 29
16766: PUSH
16767: LD_VAR 0 1
16771: ST_TO_ADDR
// end else
16772: GO 16808
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
16774: LD_VAR 0 1
16778: PPUSH
16779: LD_INT 11
16781: PPUSH
16782: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: LD_INT 14
16793: PPUSH
16794: CALL_OW 207
// ruLab2 = building ;
16798: LD_ADDR_EXP 30
16802: PUSH
16803: LD_VAR 0 1
16807: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
16808: LD_INT 3
16810: PPUSH
16811: LD_VAR 0 1
16815: PPUSH
16816: LD_INT 3
16818: PPUSH
16819: CALL 10485 0 3
// if ruDestroyedBuildings > 0 then
16823: LD_EXP 40
16827: PUSH
16828: LD_INT 0
16830: GREATER
16831: IFFALSE 16905
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16833: LD_ADDR_EXP 40
16837: PUSH
16838: LD_EXP 40
16842: PPUSH
16843: LD_INT 1
16845: PPUSH
16846: CALL_OW 3
16850: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16851: LD_ADDR_EXP 40
16855: PUSH
16856: LD_EXP 40
16860: PPUSH
16861: LD_INT 1
16863: PPUSH
16864: CALL_OW 3
16868: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16869: LD_ADDR_EXP 40
16873: PUSH
16874: LD_EXP 40
16878: PPUSH
16879: LD_INT 1
16881: PPUSH
16882: CALL_OW 3
16886: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
16887: LD_ADDR_EXP 40
16891: PUSH
16892: LD_EXP 40
16896: PPUSH
16897: LD_INT 1
16899: PPUSH
16900: CALL_OW 3
16904: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 266
16914: PUSH
16915: LD_INT 32
16917: EQUAL
16918: IFFALSE 16955
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16920: LD_VAR 0 1
16924: PPUSH
16925: LD_INT 44
16927: PUSH
16928: LD_INT 45
16930: PUSH
16931: LD_INT 46
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: PUSH
16939: LD_INT 1
16941: PPUSH
16942: LD_INT 3
16944: PPUSH
16945: CALL_OW 12
16949: ARRAY
16950: PPUSH
16951: CALL_OW 208
// if GetBType ( building ) = b_turret then
16955: LD_VAR 0 1
16959: PPUSH
16960: CALL_OW 266
16964: PUSH
16965: LD_INT 33
16967: EQUAL
16968: IFFALSE 17005
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
16970: LD_VAR 0 1
16974: PPUSH
16975: LD_INT 44
16977: PUSH
16978: LD_INT 46
16980: PUSH
16981: LD_INT 46
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: LIST
16988: PUSH
16989: LD_INT 1
16991: PPUSH
16992: LD_INT 3
16994: PPUSH
16995: CALL_OW 12
16999: ARRAY
17000: PPUSH
17001: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 266
17014: PUSH
17015: LD_INT 24
17017: EQUAL
17018: IFFALSE 17028
// russianAI = 1 ;
17020: LD_ADDR_EXP 37
17024: PUSH
17025: LD_INT 1
17027: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
17028: LD_VAR 0 1
17032: PPUSH
17033: CALL_OW 255
17037: PUSH
17038: LD_INT 2
17040: EQUAL
17041: IFFALSE 17330
// begin if GetBType ( building ) = b_depot then
17043: LD_VAR 0 1
17047: PPUSH
17048: CALL_OW 266
17052: PUSH
17053: LD_INT 0
17055: EQUAL
17056: IFFALSE 17142
// begin arDepot = building ;
17058: LD_ADDR_EXP 41
17062: PUSH
17063: LD_VAR 0 1
17067: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
17068: LD_INT 38
17070: PUSH
17071: LD_INT 47
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PPUSH
17078: LD_INT 71
17080: PPUSH
17081: LD_INT 19
17083: PPUSH
17084: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
17088: LD_VAR 0 1
17092: PPUSH
17093: CALL_OW 274
17097: PPUSH
17098: LD_INT 1
17100: PPUSH
17101: LD_INT 500
17103: PPUSH
17104: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
17108: LD_VAR 0 1
17112: PPUSH
17113: CALL_OW 274
17117: PPUSH
17118: LD_INT 3
17120: PPUSH
17121: LD_INT 30
17123: PPUSH
17124: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
17128: LD_EXP 25
17132: PPUSH
17133: LD_EXP 41
17137: PPUSH
17138: CALL_OW 120
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
17142: LD_VAR 0 1
17146: PPUSH
17147: CALL_OW 266
17151: PUSH
17152: LD_INT 2
17154: EQUAL
17155: PUSH
17156: LD_VAR 0 1
17160: PPUSH
17161: CALL_OW 266
17165: PUSH
17166: LD_INT 4
17168: EQUAL
17169: OR
17170: IFFALSE 17181
// ComUpgrade ( building ) ;
17172: LD_VAR 0 1
17176: PPUSH
17177: CALL_OW 146
// if GetBType ( building ) = b_lab then
17181: LD_VAR 0 1
17185: PPUSH
17186: CALL_OW 266
17190: PUSH
17191: LD_INT 6
17193: EQUAL
17194: IFFALSE 17245
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
17196: LD_VAR 0 1
17200: PPUSH
17201: LD_INT 10
17203: PPUSH
17204: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
17208: LD_VAR 0 1
17212: PPUSH
17213: LD_INT 11
17215: PPUSH
17216: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
17220: LD_INT 2
17222: PPUSH
17223: LD_VAR 0 1
17227: PPUSH
17228: LD_INT 2
17230: PPUSH
17231: CALL 10485 0 3
// arLab = building ;
17235: LD_ADDR_EXP 42
17239: PUSH
17240: LD_VAR 0 1
17244: ST_TO_ADDR
// end ; if GetBType ( building ) = b_breastwork then
17245: LD_VAR 0 1
17249: PPUSH
17250: CALL_OW 266
17254: PUSH
17255: LD_INT 31
17257: EQUAL
17258: IFFALSE 17330
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
17260: LD_INT 22
17262: PUSH
17263: LD_INT 2
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: PUSH
17270: LD_INT 25
17272: PUSH
17273: LD_INT 1
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: PUSH
17280: LD_INT 3
17282: PUSH
17283: LD_INT 54
17285: PUSH
17286: EMPTY
17287: LIST
17288: PUSH
17289: LD_INT 3
17291: PUSH
17292: LD_INT 60
17294: PUSH
17295: EMPTY
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: EMPTY
17303: LIST
17304: LIST
17305: LIST
17306: PUSH
17307: EMPTY
17308: LIST
17309: LIST
17310: LIST
17311: PPUSH
17312: CALL_OW 69
17316: PUSH
17317: LD_INT 1
17319: ARRAY
17320: PPUSH
17321: LD_VAR 0 1
17325: PPUSH
17326: CALL_OW 120
// end ; end ;
17330: PPOPN 2
17332: END
// on UpgradeComplete ( building ) do var i ;
17333: LD_INT 0
17335: PPUSH
// begin if GetSide ( building ) = 1 then
17336: LD_VAR 0 1
17340: PPUSH
17341: CALL_OW 255
17345: PUSH
17346: LD_INT 1
17348: EQUAL
17349: IFFALSE 17549
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
17351: LD_INT 22
17353: PUSH
17354: LD_INT 1
17356: PUSH
17357: EMPTY
17358: LIST
17359: LIST
17360: PUSH
17361: LD_INT 2
17363: PUSH
17364: LD_INT 30
17366: PUSH
17367: LD_INT 7
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: LD_INT 30
17376: PUSH
17377: LD_INT 8
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 11
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 1
17399: PUSH
17400: LD_INT 2
17402: PUSH
17403: LD_INT 30
17405: PUSH
17406: LD_INT 26
17408: PUSH
17409: EMPTY
17410: LIST
17411: LIST
17412: PUSH
17413: LD_INT 30
17415: PUSH
17416: LD_INT 27
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 30
17425: PUSH
17426: LD_INT 28
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: EMPTY
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: EMPTY
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PUSH
17463: LD_INT 0
17465: GREATER
17466: PUSH
17467: LD_INT 22
17469: PUSH
17470: LD_INT 1
17472: PUSH
17473: EMPTY
17474: LIST
17475: LIST
17476: PUSH
17477: LD_INT 2
17479: PUSH
17480: LD_INT 30
17482: PUSH
17483: LD_INT 26
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PUSH
17490: LD_INT 30
17492: PUSH
17493: LD_INT 27
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 30
17502: PUSH
17503: LD_INT 28
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PUSH
17510: EMPTY
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: PPUSH
17520: CALL_OW 69
17524: PUSH
17525: LD_INT 0
17527: GREATER
17528: AND
17529: PUSH
17530: LD_EXP 50
17534: PUSH
17535: LD_INT 0
17537: EQUAL
17538: AND
17539: IFFALSE 17549
// eventVar1 = 1 ;
17541: LD_ADDR_EXP 50
17545: PUSH
17546: LD_INT 1
17548: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
17549: LD_VAR 0 1
17553: PPUSH
17554: CALL_OW 255
17558: PUSH
17559: LD_INT 2
17561: EQUAL
17562: IFFALSE 17667
// begin if GetBType ( building ) = b_barracks then
17564: LD_VAR 0 1
17568: PPUSH
17569: CALL_OW 266
17573: PUSH
17574: LD_INT 5
17576: EQUAL
17577: IFFALSE 17667
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
17579: LD_ADDR_VAR 0 2
17583: PUSH
17584: LD_INT 22
17586: PUSH
17587: LD_INT 2
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: PUSH
17594: LD_INT 25
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PUSH
17604: LD_INT 3
17606: PUSH
17607: LD_INT 54
17609: PUSH
17610: EMPTY
17611: LIST
17612: PUSH
17613: EMPTY
17614: LIST
17615: LIST
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: PPUSH
17622: CALL_OW 69
17626: PUSH
17627: LD_EXP 25
17631: PUSH
17632: EMPTY
17633: LIST
17634: DIFF
17635: PUSH
17636: FOR_IN
17637: IFFALSE 17655
// ComEnterUnit ( i , building ) ;
17639: LD_VAR 0 2
17643: PPUSH
17644: LD_VAR 0 1
17648: PPUSH
17649: CALL_OW 120
17653: GO 17636
17655: POP
17656: POP
// arArm = building ;
17657: LD_ADDR_EXP 43
17661: PUSH
17662: LD_VAR 0 1
17666: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
17667: LD_VAR 0 1
17671: PPUSH
17672: CALL_OW 255
17676: PUSH
17677: LD_INT 3
17679: EQUAL
17680: IFFALSE 18153
// begin if GetBType ( building ) = b_factory then
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 266
17691: PUSH
17692: LD_INT 3
17694: EQUAL
17695: IFFALSE 17762
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
17697: LD_ADDR_VAR 0 2
17701: PUSH
17702: LD_INT 22
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 25
17714: PUSH
17715: LD_INT 3
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: PUSH
17731: FOR_IN
17732: IFFALSE 17750
// ComEnterUnit ( i , building ) ;
17734: LD_VAR 0 2
17738: PPUSH
17739: LD_VAR 0 1
17743: PPUSH
17744: CALL_OW 120
17748: GO 17731
17750: POP
17751: POP
// ruFab = building ;
17752: LD_ADDR_EXP 33
17756: PUSH
17757: LD_VAR 0 1
17761: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
17762: LD_INT 22
17764: PUSH
17765: LD_INT 3
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PUSH
17772: LD_INT 21
17774: PUSH
17775: LD_INT 3
17777: PUSH
17778: EMPTY
17779: LIST
17780: LIST
17781: PUSH
17782: LD_INT 30
17784: PUSH
17785: LD_INT 8
17787: PUSH
17788: EMPTY
17789: LIST
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: LIST
17796: PPUSH
17797: CALL_OW 69
17801: PUSH
17802: LD_INT 2
17804: EQUAL
17805: IFFALSE 18013
// begin for i = 1 to 2 do
17807: LD_ADDR_VAR 0 2
17811: PUSH
17812: DOUBLE
17813: LD_INT 1
17815: DEC
17816: ST_TO_ADDR
17817: LD_INT 2
17819: PUSH
17820: FOR_TO
17821: IFFALSE 17908
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
17823: LD_INT 22
17825: PUSH
17826: LD_INT 3
17828: PUSH
17829: EMPTY
17830: LIST
17831: LIST
17832: PUSH
17833: LD_INT 25
17835: PUSH
17836: LD_INT 4
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PPUSH
17847: CALL_OW 69
17851: PUSH
17852: LD_VAR 0 2
17856: ARRAY
17857: PPUSH
17858: LD_INT 22
17860: PUSH
17861: LD_INT 3
17863: PUSH
17864: EMPTY
17865: LIST
17866: LIST
17867: PUSH
17868: LD_INT 21
17870: PUSH
17871: LD_INT 3
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 30
17880: PUSH
17881: LD_INT 8
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: LIST
17892: PPUSH
17893: CALL_OW 69
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: PPUSH
17902: CALL_OW 120
17906: GO 17820
17908: POP
17909: POP
// for i = 3 to 4 do
17910: LD_ADDR_VAR 0 2
17914: PUSH
17915: DOUBLE
17916: LD_INT 3
17918: DEC
17919: ST_TO_ADDR
17920: LD_INT 4
17922: PUSH
17923: FOR_TO
17924: IFFALSE 18011
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
17926: LD_INT 22
17928: PUSH
17929: LD_INT 3
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 4
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PPUSH
17950: CALL_OW 69
17954: PUSH
17955: LD_VAR 0 2
17959: ARRAY
17960: PPUSH
17961: LD_INT 22
17963: PUSH
17964: LD_INT 3
17966: PUSH
17967: EMPTY
17968: LIST
17969: LIST
17970: PUSH
17971: LD_INT 21
17973: PUSH
17974: LD_INT 3
17976: PUSH
17977: EMPTY
17978: LIST
17979: LIST
17980: PUSH
17981: LD_INT 30
17983: PUSH
17984: LD_INT 8
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: LIST
17995: PPUSH
17996: CALL_OW 69
18000: PUSH
18001: LD_INT 2
18003: ARRAY
18004: PPUSH
18005: CALL_OW 120
18009: GO 17923
18011: POP
18012: POP
// end ; if GetBType ( building ) = b_barracks then
18013: LD_VAR 0 1
18017: PPUSH
18018: CALL_OW 266
18022: PUSH
18023: LD_INT 5
18025: EQUAL
18026: IFFALSE 18153
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
18028: LD_ADDR_VAR 0 2
18032: PUSH
18033: LD_INT 22
18035: PUSH
18036: LD_INT 3
18038: PUSH
18039: EMPTY
18040: LIST
18041: LIST
18042: PUSH
18043: LD_INT 25
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 54
18058: PUSH
18059: EMPTY
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: PPUSH
18071: CALL_OW 69
18075: PUSH
18076: FOR_IN
18077: IFFALSE 18095
// ComEnterUnit ( i , building ) ;
18079: LD_VAR 0 2
18083: PPUSH
18084: LD_VAR 0 1
18088: PPUSH
18089: CALL_OW 120
18093: GO 18076
18095: POP
18096: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
18097: LD_INT 22
18099: PUSH
18100: LD_INT 3
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PUSH
18107: LD_INT 30
18109: PUSH
18110: LD_INT 5
18112: PUSH
18113: EMPTY
18114: LIST
18115: LIST
18116: PUSH
18117: EMPTY
18118: LIST
18119: LIST
18120: PPUSH
18121: CALL_OW 69
18125: PUSH
18126: LD_INT 0
18128: EQUAL
18129: IFFALSE 18143
// ruArm1 = building else
18131: LD_ADDR_EXP 31
18135: PUSH
18136: LD_VAR 0 1
18140: ST_TO_ADDR
18141: GO 18153
// ruArm2 = building ;
18143: LD_ADDR_EXP 32
18147: PUSH
18148: LD_VAR 0 1
18152: ST_TO_ADDR
// end ; end ; end ;
18153: PPOPN 2
18155: END
// on EnterBuilding ( building , human ) do var rnd ;
18156: LD_INT 0
18158: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
18159: LD_VAR 0 2
18163: PPUSH
18164: CALL_OW 255
18168: PUSH
18169: LD_INT 2
18171: EQUAL
18172: PUSH
18173: LD_VAR 0 2
18177: PPUSH
18178: CALL_OW 257
18182: PUSH
18183: LD_INT 1
18185: EQUAL
18186: AND
18187: PUSH
18188: LD_VAR 0 1
18192: PUSH
18193: LD_EXP 43
18197: EQUAL
18198: AND
18199: IFFALSE 18246
// begin wait ( 0 0$1 ) ;
18201: LD_INT 35
18203: PPUSH
18204: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
18208: LD_ADDR_VAR 0 3
18212: PUSH
18213: LD_INT 1
18215: PPUSH
18216: LD_INT 100
18218: PPUSH
18219: CALL_OW 12
18223: ST_TO_ADDR
// if rnd > 50 then
18224: LD_VAR 0 3
18228: PUSH
18229: LD_INT 50
18231: GREATER
18232: IFFALSE 18246
// SetClass ( human , class_mortar ) ;
18234: LD_VAR 0 2
18238: PPUSH
18239: LD_INT 8
18241: PPUSH
18242: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
18246: LD_VAR 0 2
18250: PPUSH
18251: CALL_OW 255
18255: PUSH
18256: LD_INT 3
18258: EQUAL
18259: PUSH
18260: LD_VAR 0 2
18264: PPUSH
18265: CALL_OW 257
18269: PUSH
18270: LD_INT 1
18272: EQUAL
18273: AND
18274: PUSH
18275: LD_VAR 0 1
18279: PUSH
18280: LD_EXP 31
18284: EQUAL
18285: PUSH
18286: LD_VAR 0 1
18290: PUSH
18291: LD_EXP 32
18295: EQUAL
18296: OR
18297: PUSH
18298: EMPTY
18299: LIST
18300: AND
18301: IFFALSE 18322
// begin wait ( 0 0$1 ) ;
18303: LD_INT 35
18305: PPUSH
18306: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
18310: LD_VAR 0 2
18314: PPUSH
18315: LD_INT 9
18317: PPUSH
18318: CALL_OW 336
// end ; end ;
18322: PPOPN 3
18324: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
18325: LD_VAR 0 1
18329: PUSH
18330: LD_INT 1
18332: EQUAL
18333: PUSH
18334: LD_VAR 0 2
18338: PUSH
18339: LD_INT 2
18341: EQUAL
18342: AND
18343: PUSH
18344: LD_INT 1
18346: PPUSH
18347: LD_INT 2
18349: PPUSH
18350: CALL_OW 81
18354: PUSH
18355: LD_INT 1
18357: EQUAL
18358: AND
18359: IFFALSE 18380
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
18361: LD_EXP 23
18365: PPUSH
18366: LD_STRING D6b-Pow-1
18368: PPUSH
18369: CALL_OW 94
// YouLost ( Powell ) ;
18373: LD_STRING Powell
18375: PPUSH
18376: CALL_OW 104
// end ; end ;
18380: PPOPN 2
18382: END
// on UnitDestroyed ( unit ) do begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
18383: LD_VAR 0 1
18387: PPUSH
18388: CALL_OW 255
18392: PUSH
18393: LD_INT 3
18395: EQUAL
18396: PUSH
18397: LD_VAR 0 1
18401: PPUSH
18402: CALL_OW 247
18406: PUSH
18407: LD_INT 3
18409: EQUAL
18410: AND
18411: IFFALSE 19103
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
18413: LD_VAR 0 1
18417: PPUSH
18418: CALL_OW 266
18422: PUSH
18423: LD_INT 31
18425: EQUAL
18426: PUSH
18427: LD_VAR 0 1
18431: PPUSH
18432: CALL_OW 266
18436: PUSH
18437: LD_INT 32
18439: EQUAL
18440: OR
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 266
18451: PUSH
18452: LD_INT 36
18454: EQUAL
18455: OR
18456: PUSH
18457: LD_VAR 0 1
18461: PPUSH
18462: CALL_OW 266
18466: PUSH
18467: LD_INT 0
18469: EQUAL
18470: OR
18471: PUSH
18472: LD_VAR 0 1
18476: PPUSH
18477: CALL_OW 266
18481: PUSH
18482: LD_INT 24
18484: EQUAL
18485: OR
18486: PUSH
18487: LD_VAR 0 1
18491: PPUSH
18492: CALL_OW 266
18496: PUSH
18497: LD_INT 17
18499: EQUAL
18500: OR
18501: PUSH
18502: LD_VAR 0 1
18506: PPUSH
18507: CALL_OW 266
18511: PUSH
18512: LD_INT 25
18514: EQUAL
18515: OR
18516: PUSH
18517: LD_VAR 0 1
18521: PPUSH
18522: CALL_OW 266
18526: PUSH
18527: LD_INT 19
18529: EQUAL
18530: OR
18531: PUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 266
18541: PUSH
18542: LD_INT 20
18544: EQUAL
18545: OR
18546: PUSH
18547: LD_VAR 0 1
18551: PPUSH
18552: CALL_OW 266
18556: PUSH
18557: LD_INT 18
18559: EQUAL
18560: OR
18561: PUSH
18562: LD_VAR 0 1
18566: PPUSH
18567: CALL_OW 266
18571: PUSH
18572: LD_INT 21
18574: EQUAL
18575: OR
18576: PUSH
18577: LD_VAR 0 1
18581: PPUSH
18582: CALL_OW 266
18586: PUSH
18587: LD_INT 23
18589: EQUAL
18590: OR
18591: PUSH
18592: LD_VAR 0 1
18596: PPUSH
18597: CALL_OW 266
18601: PUSH
18602: LD_INT 16
18604: EQUAL
18605: OR
18606: PUSH
18607: LD_VAR 0 1
18611: PPUSH
18612: CALL_OW 266
18616: PUSH
18617: LD_INT 6
18619: EQUAL
18620: OR
18621: PUSH
18622: LD_VAR 0 1
18626: PPUSH
18627: CALL_OW 266
18631: PUSH
18632: LD_INT 29
18634: EQUAL
18635: OR
18636: PUSH
18637: LD_VAR 0 1
18641: PPUSH
18642: CALL_OW 266
18646: PUSH
18647: LD_INT 26
18649: EQUAL
18650: OR
18651: PUSH
18652: LD_VAR 0 1
18656: PPUSH
18657: CALL_OW 266
18661: PUSH
18662: LD_INT 30
18664: EQUAL
18665: OR
18666: PUSH
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL_OW 266
18676: PUSH
18677: LD_INT 28
18679: EQUAL
18680: OR
18681: PUSH
18682: LD_VAR 0 1
18686: PPUSH
18687: CALL_OW 266
18691: PUSH
18692: LD_INT 27
18694: EQUAL
18695: OR
18696: PUSH
18697: LD_VAR 0 1
18701: PPUSH
18702: CALL_OW 266
18706: PUSH
18707: LD_INT 33
18709: EQUAL
18710: OR
18711: PUSH
18712: LD_VAR 0 1
18716: PPUSH
18717: CALL_OW 266
18721: PUSH
18722: LD_INT 2
18724: EQUAL
18725: OR
18726: PUSH
18727: LD_VAR 0 1
18731: PPUSH
18732: CALL_OW 266
18736: PUSH
18737: LD_INT 4
18739: EQUAL
18740: OR
18741: IFFALSE 18827
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
18743: LD_ADDR_EXP 40
18747: PUSH
18748: LD_EXP 40
18752: PUSH
18753: LD_VAR 0 1
18757: PPUSH
18758: CALL_OW 266
18762: ADD
18763: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18764: LD_ADDR_EXP 40
18768: PUSH
18769: LD_EXP 40
18773: PUSH
18774: LD_VAR 0 1
18778: PPUSH
18779: CALL_OW 250
18783: ADD
18784: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18785: LD_ADDR_EXP 40
18789: PUSH
18790: LD_EXP 40
18794: PUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 251
18804: ADD
18805: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18806: LD_ADDR_EXP 40
18810: PUSH
18811: LD_EXP 40
18815: PUSH
18816: LD_VAR 0 1
18820: PPUSH
18821: CALL_OW 254
18825: ADD
18826: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
18827: LD_VAR 0 1
18831: PPUSH
18832: CALL_OW 266
18836: PUSH
18837: LD_INT 1
18839: EQUAL
18840: IFFALSE 18919
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
18842: LD_ADDR_EXP 40
18846: PUSH
18847: LD_EXP 40
18851: PUSH
18852: LD_INT 0
18854: ADD
18855: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18856: LD_ADDR_EXP 40
18860: PUSH
18861: LD_EXP 40
18865: PUSH
18866: LD_VAR 0 1
18870: PPUSH
18871: CALL_OW 250
18875: ADD
18876: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18877: LD_ADDR_EXP 40
18881: PUSH
18882: LD_EXP 40
18886: PUSH
18887: LD_VAR 0 1
18891: PPUSH
18892: CALL_OW 251
18896: ADD
18897: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18898: LD_ADDR_EXP 40
18902: PUSH
18903: LD_EXP 40
18907: PUSH
18908: LD_VAR 0 1
18912: PPUSH
18913: CALL_OW 254
18917: ADD
18918: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 266
18928: PUSH
18929: LD_INT 3
18931: EQUAL
18932: IFFALSE 19011
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
18934: LD_ADDR_EXP 40
18938: PUSH
18939: LD_EXP 40
18943: PUSH
18944: LD_INT 2
18946: ADD
18947: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
18948: LD_ADDR_EXP 40
18952: PUSH
18953: LD_EXP 40
18957: PUSH
18958: LD_VAR 0 1
18962: PPUSH
18963: CALL_OW 250
18967: ADD
18968: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
18969: LD_ADDR_EXP 40
18973: PUSH
18974: LD_EXP 40
18978: PUSH
18979: LD_VAR 0 1
18983: PPUSH
18984: CALL_OW 251
18988: ADD
18989: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
18990: LD_ADDR_EXP 40
18994: PUSH
18995: LD_EXP 40
18999: PUSH
19000: LD_VAR 0 1
19004: PPUSH
19005: CALL_OW 254
19009: ADD
19010: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
19011: LD_VAR 0 1
19015: PPUSH
19016: CALL_OW 266
19020: PUSH
19021: LD_INT 5
19023: EQUAL
19024: IFFALSE 19103
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
19026: LD_ADDR_EXP 40
19030: PUSH
19031: LD_EXP 40
19035: PUSH
19036: LD_INT 4
19038: ADD
19039: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
19040: LD_ADDR_EXP 40
19044: PUSH
19045: LD_EXP 40
19049: PUSH
19050: LD_VAR 0 1
19054: PPUSH
19055: CALL_OW 250
19059: ADD
19060: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
19061: LD_ADDR_EXP 40
19065: PUSH
19066: LD_EXP 40
19070: PUSH
19071: LD_VAR 0 1
19075: PPUSH
19076: CALL_OW 251
19080: ADD
19081: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
19082: LD_ADDR_EXP 40
19086: PUSH
19087: LD_EXP 40
19091: PUSH
19092: LD_VAR 0 1
19096: PPUSH
19097: CALL_OW 254
19101: ADD
19102: ST_TO_ADDR
// end ; end ; end ;
19103: PPOPN 1
19105: END
// on Command ( comandid ) do var i , j , tmp ;
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 9 ] ] ) do
19111: LD_ADDR_VAR 0 2
19115: PUSH
19116: LD_INT 22
19118: PUSH
19119: LD_INT 6
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 25
19128: PUSH
19129: LD_INT 9
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PPUSH
19140: CALL_OW 69
19144: PUSH
19145: FOR_IN
19146: IFFALSE 19458
// begin if GetTaskList ( i ) > 0 and eventVar2 = 0 and [ comandid = 37 or comandid = 38 ] then
19148: LD_VAR 0 2
19152: PPUSH
19153: CALL_OW 437
19157: PUSH
19158: LD_INT 0
19160: GREATER
19161: PUSH
19162: LD_EXP 51
19166: PUSH
19167: LD_INT 0
19169: EQUAL
19170: AND
19171: PUSH
19172: LD_VAR 0 1
19176: PUSH
19177: LD_INT 37
19179: EQUAL
19180: PUSH
19181: LD_VAR 0 1
19185: PUSH
19186: LD_INT 38
19188: EQUAL
19189: OR
19190: PUSH
19191: EMPTY
19192: LIST
19193: AND
19194: IFFALSE 19456
// begin for j = 1 to GetTaskList ( i ) do
19196: LD_ADDR_VAR 0 3
19200: PUSH
19201: DOUBLE
19202: LD_INT 1
19204: DEC
19205: ST_TO_ADDR
19206: LD_VAR 0 2
19210: PPUSH
19211: CALL_OW 437
19215: PUSH
19216: FOR_TO
19217: IFFALSE 19454
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
19219: LD_ADDR_VAR 0 4
19223: PUSH
19224: LD_VAR 0 2
19228: PPUSH
19229: CALL_OW 437
19233: PUSH
19234: LD_VAR 0 3
19238: ARRAY
19239: PUSH
19240: LD_INT 4
19242: ARRAY
19243: ST_TO_ADDR
// eventVar2 = 1 ;
19244: LD_ADDR_EXP 51
19248: PUSH
19249: LD_INT 1
19251: ST_TO_ADDR
// wait ( 0 0$5 ) ;
19252: LD_INT 175
19254: PPUSH
19255: CALL_OW 67
// DialogueOn ;
19259: CALL_OW 6
// if IsOK ( Cyrus ) then
19263: LD_EXP 5
19267: PPUSH
19268: CALL_OW 302
19272: IFFALSE 19288
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
19274: LD_EXP 5
19278: PPUSH
19279: LD_STRING D9a-Cyrus-1
19281: PPUSH
19282: CALL_OW 88
// end else
19286: GO 19342
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9a-Sol1-1 , D9a-Sol1-1 ) ;
19288: LD_INT 22
19290: PUSH
19291: LD_INT 1
19293: PUSH
19294: EMPTY
19295: LIST
19296: LIST
19297: PUSH
19298: LD_INT 26
19300: PUSH
19301: LD_INT 1
19303: PUSH
19304: EMPTY
19305: LIST
19306: LIST
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_EXP 1
19316: PUSH
19317: LD_EXP 14
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: DIFF
19326: PPUSH
19327: CALL_OW 69
19331: PPUSH
19332: LD_STRING D9a-Sol1-1
19334: PPUSH
19335: LD_STRING D9a-Sol1-1
19337: PPUSH
19338: CALL 7075 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM , Khatam ] ) , D9b-Sol1-1 , D9b-Sol1-1 ) ;
19342: LD_INT 22
19344: PUSH
19345: LD_INT 1
19347: PUSH
19348: EMPTY
19349: LIST
19350: LIST
19351: PUSH
19352: LD_INT 26
19354: PUSH
19355: LD_INT 1
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: LD_EXP 1
19370: PUSH
19371: LD_EXP 14
19375: PUSH
19376: EMPTY
19377: LIST
19378: LIST
19379: DIFF
19380: PPUSH
19381: CALL_OW 69
19385: PPUSH
19386: LD_STRING D9b-Sol1-1
19388: PPUSH
19389: LD_STRING D9b-Sol1-1
19391: PPUSH
19392: CALL 7075 0 3
// Say ( JMM , D9a-JMM-1 ) ;
19396: LD_EXP 1
19400: PPUSH
19401: LD_STRING D9a-JMM-1
19403: PPUSH
19404: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
19408: LD_EXP 1
19412: PPUSH
19413: LD_STRING D9c-JMM-1
19415: PPUSH
19416: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
19420: LD_INT 12
19422: PPUSH
19423: LD_INT 1
19425: PPUSH
19426: CALL_OW 321
19430: PUSH
19431: LD_INT 2
19433: EQUAL
19434: IFFALSE 19448
// Say ( JMM , D9c-JMM-1a ) ;
19436: LD_EXP 1
19440: PPUSH
19441: LD_STRING D9c-JMM-1a
19443: PPUSH
19444: CALL_OW 88
// DialogueOff ;
19448: CALL_OW 7
// end ;
19452: GO 19216
19454: POP
19455: POP
// end ; end ;
19456: GO 19145
19458: POP
19459: POP
// end ; end_of_file
19460: PPOPN 4
19462: END
// export function PrepareNature ; var i , un ; begin
19463: LD_INT 0
19465: PPUSH
19466: PPUSH
19467: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
19468: LD_ADDR_VAR 0 2
19472: PUSH
19473: DOUBLE
19474: LD_INT 1
19476: DEC
19477: ST_TO_ADDR
19478: LD_OWVAR 67
19482: PUSH
19483: LD_INT 1
19485: PPUSH
19486: LD_INT 5
19488: PPUSH
19489: CALL_OW 12
19493: PLUS
19494: PUSH
19495: FOR_TO
19496: IFFALSE 19641
// begin hc_sex = sex_male ;
19498: LD_ADDR_OWVAR 27
19502: PUSH
19503: LD_INT 1
19505: ST_TO_ADDR
// uc_side = 0 ;
19506: LD_ADDR_OWVAR 20
19510: PUSH
19511: LD_INT 0
19513: ST_TO_ADDR
// uc_nation = nation_nature ;
19514: LD_ADDR_OWVAR 21
19518: PUSH
19519: LD_INT 0
19521: ST_TO_ADDR
// hc_class = class_apeman ;
19522: LD_ADDR_OWVAR 28
19526: PUSH
19527: LD_INT 12
19529: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
19530: LD_ADDR_OWVAR 31
19534: PUSH
19535: LD_INT 2
19537: PPUSH
19538: LD_INT 7
19540: PPUSH
19541: CALL_OW 12
19545: PUSH
19546: LD_OWVAR 67
19550: PLUS
19551: PUSH
19552: LD_INT 2
19554: PPUSH
19555: LD_INT 10
19557: PPUSH
19558: CALL_OW 12
19562: PUSH
19563: LD_INT 2
19565: PPUSH
19566: LD_INT 10
19568: PPUSH
19569: CALL_OW 12
19573: PUSH
19574: LD_INT 2
19576: PPUSH
19577: LD_INT 10
19579: PPUSH
19580: CALL_OW 12
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19591: LD_ADDR_OWVAR 35
19595: PUSH
19596: LD_INT 5
19598: NEG
19599: PPUSH
19600: LD_INT 5
19602: PPUSH
19603: CALL_OW 12
19607: PUSH
19608: LD_OWVAR 67
19612: MUL
19613: ST_TO_ADDR
// un = CreateHuman ;
19614: LD_ADDR_VAR 0 3
19618: PUSH
19619: CALL_OW 44
19623: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
19624: LD_VAR 0 3
19628: PPUSH
19629: LD_INT 5
19631: PPUSH
19632: LD_INT 0
19634: PPUSH
19635: CALL_OW 49
// end ;
19639: GO 19495
19641: POP
19642: POP
// for i = 1 to Difficulty + 2 do
19643: LD_ADDR_VAR 0 2
19647: PUSH
19648: DOUBLE
19649: LD_INT 1
19651: DEC
19652: ST_TO_ADDR
19653: LD_OWVAR 67
19657: PUSH
19658: LD_INT 2
19660: PLUS
19661: PUSH
19662: FOR_TO
19663: IFFALSE 19772
// begin hc_sex = sex_male ;
19665: LD_ADDR_OWVAR 27
19669: PUSH
19670: LD_INT 1
19672: ST_TO_ADDR
// uc_side = 0 ;
19673: LD_ADDR_OWVAR 20
19677: PUSH
19678: LD_INT 0
19680: ST_TO_ADDR
// uc_nation = nation_nature ;
19681: LD_ADDR_OWVAR 21
19685: PUSH
19686: LD_INT 0
19688: ST_TO_ADDR
// hc_class = class_tiger ;
19689: LD_ADDR_OWVAR 28
19693: PUSH
19694: LD_INT 14
19696: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19697: LD_ADDR_OWVAR 31
19701: PUSH
19702: LD_EXP 35
19706: PUSH
19707: LD_INT 0
19709: PUSH
19710: LD_INT 0
19712: PUSH
19713: LD_INT 0
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: LIST
19721: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
19722: LD_ADDR_OWVAR 35
19726: PUSH
19727: LD_INT 5
19729: NEG
19730: PPUSH
19731: LD_INT 5
19733: PPUSH
19734: CALL_OW 12
19738: PUSH
19739: LD_OWVAR 67
19743: MUL
19744: ST_TO_ADDR
// un = CreateHuman ;
19745: LD_ADDR_VAR 0 3
19749: PUSH
19750: CALL_OW 44
19754: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
19755: LD_VAR 0 3
19759: PPUSH
19760: LD_INT 6
19762: PPUSH
19763: LD_INT 0
19765: PPUSH
19766: CALL_OW 49
// end ;
19770: GO 19662
19772: POP
19773: POP
// for i = 1 to rand ( 3 , 4 ) do
19774: LD_ADDR_VAR 0 2
19778: PUSH
19779: DOUBLE
19780: LD_INT 1
19782: DEC
19783: ST_TO_ADDR
19784: LD_INT 3
19786: PPUSH
19787: LD_INT 4
19789: PPUSH
19790: CALL_OW 12
19794: PUSH
19795: FOR_TO
19796: IFFALSE 19890
// begin hc_sex = sex_male ;
19798: LD_ADDR_OWVAR 27
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// uc_side = 0 ;
19806: LD_ADDR_OWVAR 20
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// uc_nation = nation_nature ;
19814: LD_ADDR_OWVAR 21
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// hc_class = 18 ;
19822: LD_ADDR_OWVAR 28
19826: PUSH
19827: LD_INT 18
19829: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
19830: LD_ADDR_OWVAR 31
19834: PUSH
19835: LD_EXP 35
19839: PUSH
19840: LD_INT 0
19842: PUSH
19843: LD_INT 0
19845: PUSH
19846: LD_INT 0
19848: PUSH
19849: EMPTY
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: ST_TO_ADDR
// hc_agressivity = 0 ;
19855: LD_ADDR_OWVAR 35
19859: PUSH
19860: LD_INT 0
19862: ST_TO_ADDR
// un = CreateHuman ;
19863: LD_ADDR_VAR 0 3
19867: PUSH
19868: CALL_OW 44
19872: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
19873: LD_VAR 0 3
19877: PPUSH
19878: LD_INT 6
19880: PPUSH
19881: LD_INT 0
19883: PPUSH
19884: CALL_OW 49
// end ;
19888: GO 19795
19890: POP
19891: POP
// end ; end_of_file
19892: LD_VAR 0 1
19896: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
19897: LD_EXP 44
19901: PUSH
19902: LD_INT 1
19904: EQUAL
19905: IFFALSE 20007
19907: GO 19909
19909: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
19910: LD_INT 7
19912: PPUSH
19913: LD_INT 5
19915: PPUSH
19916: LD_INT 4
19918: PPUSH
19919: LD_INT 6
19921: PPUSH
19922: CALL_OW 12
19926: PUSH
19927: LD_INT 6
19929: PPUSH
19930: LD_INT 8
19932: PPUSH
19933: CALL_OW 12
19937: PUSH
19938: LD_INT 7
19940: PPUSH
19941: LD_INT 9
19943: PPUSH
19944: CALL_OW 12
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: LIST
19953: PPUSH
19954: LD_EXP 34
19958: PPUSH
19959: LD_EXP 35
19963: PPUSH
19964: CALL_OW 12
19968: PPUSH
19969: LD_INT 2
19971: PPUSH
19972: LD_INT 1
19974: PPUSH
19975: LD_INT 1
19977: PPUSH
19978: EMPTY
19979: PPUSH
19980: LD_INT 25
19982: PUSH
19983: LD_INT 26
19985: PUSH
19986: LD_INT 27
19988: PUSH
19989: LD_INT 28
19991: PUSH
19992: EMPTY
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: PPUSH
19998: EMPTY
19999: PPUSH
20000: LD_INT 1
20002: PPUSH
20003: CALL 11748 0 11
20007: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
20008: LD_EXP 44
20012: PUSH
20013: LD_INT 1
20015: EQUAL
20016: IFFALSE 20152
20018: GO 20020
20020: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
20021: LD_INT 5
20023: PPUSH
20024: LD_INT 2
20026: PPUSH
20027: LD_INT 7
20029: PPUSH
20030: LD_INT 9
20032: PPUSH
20033: CALL_OW 12
20037: PUSH
20038: LD_INT 8
20040: PPUSH
20041: LD_INT 10
20043: PPUSH
20044: CALL_OW 12
20048: PUSH
20049: LD_INT 9
20051: PPUSH
20052: LD_INT 12
20054: PPUSH
20055: CALL_OW 12
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PUSH
20065: LD_OWVAR 67
20069: ARRAY
20070: PPUSH
20071: LD_INT 0
20073: PPUSH
20074: LD_INT 0
20076: PPUSH
20077: LD_INT 3
20079: PPUSH
20080: LD_INT 4
20082: PPUSH
20083: CALL_OW 12
20087: PUSH
20088: LD_INT 4
20090: PPUSH
20091: LD_INT 5
20093: PPUSH
20094: CALL_OW 12
20098: PUSH
20099: LD_INT 5
20101: PPUSH
20102: LD_INT 6
20104: PPUSH
20105: CALL_OW 12
20109: PUSH
20110: EMPTY
20111: LIST
20112: LIST
20113: LIST
20114: PUSH
20115: LD_OWVAR 67
20119: ARRAY
20120: PPUSH
20121: LD_INT 5
20123: PPUSH
20124: LD_EXP 34
20128: PPUSH
20129: LD_EXP 35
20133: PPUSH
20134: CALL_OW 12
20138: PPUSH
20139: LD_INT 7
20141: PPUSH
20142: LD_INT 9
20144: PPUSH
20145: LD_INT 1
20147: PPUSH
20148: CALL 13468 0 11
20152: END
// every 4 4$30 trigger joinEpsilon = 1 do
20153: LD_EXP 27
20157: PUSH
20158: LD_INT 1
20160: EQUAL
20161: IFFALSE 20223
20163: GO 20165
20165: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , 0 , 0 , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20166: LD_INT 6
20168: PPUSH
20169: LD_INT 3
20171: PPUSH
20172: LD_INT 5
20174: PPUSH
20175: LD_INT 8
20177: PPUSH
20178: CALL_OW 12
20182: PPUSH
20183: LD_INT 0
20185: PPUSH
20186: LD_INT 0
20188: PPUSH
20189: LD_INT 0
20191: PPUSH
20192: LD_INT 0
20194: PPUSH
20195: LD_EXP 34
20199: PPUSH
20200: LD_EXP 35
20204: PPUSH
20205: CALL_OW 12
20209: PPUSH
20210: LD_INT 17
20212: PPUSH
20213: LD_INT 18
20215: PPUSH
20216: LD_INT 1
20218: PPUSH
20219: CALL 13468 0 11
20223: END
// every 4 4$30 trigger joinEpsilon = 1 do
20224: LD_EXP 27
20228: PUSH
20229: LD_INT 1
20231: EQUAL
20232: IFFALSE 20314
20234: GO 20236
20236: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 1 , 3 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20237: LD_INT 17
20239: PPUSH
20240: LD_INT 6
20242: PPUSH
20243: LD_INT 1
20245: PPUSH
20246: LD_INT 3
20248: PPUSH
20249: CALL_OW 12
20253: PPUSH
20254: LD_EXP 34
20258: PPUSH
20259: LD_EXP 35
20263: PPUSH
20264: CALL_OW 12
20268: PPUSH
20269: LD_INT 3
20271: PPUSH
20272: LD_INT 1
20274: PPUSH
20275: LD_INT 1
20277: PUSH
20278: LD_INT 3
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PPUSH
20285: LD_INT 43
20287: PUSH
20288: LD_INT 44
20290: PUSH
20291: LD_INT 45
20293: PUSH
20294: LD_INT 46
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: PPUSH
20303: EMPTY
20304: PPUSH
20305: EMPTY
20306: PPUSH
20307: LD_INT 1
20309: PPUSH
20310: CALL 11748 0 11
20314: END
// every 8 8$30 trigger joinEpsilon = 1 do
20315: LD_EXP 27
20319: PUSH
20320: LD_INT 1
20322: EQUAL
20323: IFFALSE 20393
20325: GO 20327
20327: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 5 , 8 ) , 0 , rand ( 3 , 5 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20328: LD_INT 6
20330: PPUSH
20331: LD_INT 3
20333: PPUSH
20334: LD_INT 5
20336: PPUSH
20337: LD_INT 8
20339: PPUSH
20340: CALL_OW 12
20344: PPUSH
20345: LD_INT 0
20347: PPUSH
20348: LD_INT 3
20350: PPUSH
20351: LD_INT 5
20353: PPUSH
20354: CALL_OW 12
20358: PPUSH
20359: LD_INT 0
20361: PPUSH
20362: LD_INT 6
20364: PPUSH
20365: LD_EXP 34
20369: PPUSH
20370: LD_EXP 35
20374: PPUSH
20375: CALL_OW 12
20379: PPUSH
20380: LD_INT 17
20382: PPUSH
20383: LD_INT 18
20385: PPUSH
20386: LD_INT 1
20388: PPUSH
20389: CALL 13468 0 11
20393: END
// every 8 8$30 trigger joinEpsilon = 1 do
20394: LD_EXP 27
20398: PUSH
20399: LD_INT 1
20401: EQUAL
20402: IFFALSE 20484
20404: GO 20406
20406: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 3 , 5 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20407: LD_INT 17
20409: PPUSH
20410: LD_INT 6
20412: PPUSH
20413: LD_INT 3
20415: PPUSH
20416: LD_INT 5
20418: PPUSH
20419: CALL_OW 12
20423: PPUSH
20424: LD_EXP 34
20428: PPUSH
20429: LD_EXP 35
20433: PPUSH
20434: CALL_OW 12
20438: PPUSH
20439: LD_INT 3
20441: PPUSH
20442: LD_INT 1
20444: PPUSH
20445: LD_INT 1
20447: PUSH
20448: LD_INT 3
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: PPUSH
20455: LD_INT 43
20457: PUSH
20458: LD_INT 44
20460: PUSH
20461: LD_INT 45
20463: PUSH
20464: LD_INT 46
20466: PUSH
20467: EMPTY
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: PPUSH
20473: EMPTY
20474: PPUSH
20475: EMPTY
20476: PPUSH
20477: LD_INT 1
20479: PPUSH
20480: CALL 11748 0 11
20484: END
// every 15 15$30 trigger joinEpsilon = 1 do
20485: LD_EXP 27
20489: PUSH
20490: LD_INT 1
20492: EQUAL
20493: IFFALSE 20563
20495: GO 20497
20497: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20498: LD_INT 6
20500: PPUSH
20501: LD_INT 3
20503: PPUSH
20504: LD_INT 7
20506: PPUSH
20507: LD_INT 10
20509: PPUSH
20510: CALL_OW 12
20514: PPUSH
20515: LD_INT 0
20517: PPUSH
20518: LD_INT 3
20520: PPUSH
20521: LD_INT 8
20523: PPUSH
20524: CALL_OW 12
20528: PPUSH
20529: LD_INT 0
20531: PPUSH
20532: LD_INT 6
20534: PPUSH
20535: LD_EXP 34
20539: PPUSH
20540: LD_EXP 35
20544: PPUSH
20545: CALL_OW 12
20549: PPUSH
20550: LD_INT 17
20552: PPUSH
20553: LD_INT 18
20555: PPUSH
20556: LD_INT 1
20558: PPUSH
20559: CALL 13468 0 11
20563: END
// every 15 15$30 trigger joinEpsilon = 1 do
20564: LD_EXP 27
20568: PUSH
20569: LD_INT 1
20571: EQUAL
20572: IFFALSE 20654
20574: GO 20576
20576: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
20577: LD_INT 17
20579: PPUSH
20580: LD_INT 6
20582: PPUSH
20583: LD_INT 5
20585: PPUSH
20586: LD_INT 8
20588: PPUSH
20589: CALL_OW 12
20593: PPUSH
20594: LD_EXP 34
20598: PPUSH
20599: LD_EXP 35
20603: PPUSH
20604: CALL_OW 12
20608: PPUSH
20609: LD_INT 3
20611: PPUSH
20612: LD_INT 1
20614: PPUSH
20615: LD_INT 1
20617: PUSH
20618: LD_INT 3
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PPUSH
20625: LD_INT 43
20627: PUSH
20628: LD_INT 44
20630: PUSH
20631: LD_INT 45
20633: PUSH
20634: LD_INT 46
20636: PUSH
20637: EMPTY
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: PPUSH
20643: EMPTY
20644: PPUSH
20645: EMPTY
20646: PPUSH
20647: LD_INT 1
20649: PPUSH
20650: CALL 11748 0 11
20654: END
// every 27 27$30 trigger joinEpsilon = 1 do
20655: LD_EXP 27
20659: PUSH
20660: LD_INT 1
20662: EQUAL
20663: IFFALSE 20733
20665: GO 20667
20667: DISABLE
// RespawnAttackInfantry ( 6 , 3 , rand ( 7 , 10 ) , 0 , rand ( 3 , 8 ) , 0 , 6 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
20668: LD_INT 6
20670: PPUSH
20671: LD_INT 3
20673: PPUSH
20674: LD_INT 7
20676: PPUSH
20677: LD_INT 10
20679: PPUSH
20680: CALL_OW 12
20684: PPUSH
20685: LD_INT 0
20687: PPUSH
20688: LD_INT 3
20690: PPUSH
20691: LD_INT 8
20693: PPUSH
20694: CALL_OW 12
20698: PPUSH
20699: LD_INT 0
20701: PPUSH
20702: LD_INT 6
20704: PPUSH
20705: LD_EXP 34
20709: PPUSH
20710: LD_EXP 35
20714: PPUSH
20715: CALL_OW 12
20719: PPUSH
20720: LD_INT 17
20722: PPUSH
20723: LD_INT 18
20725: PPUSH
20726: LD_INT 1
20728: PPUSH
20729: CALL 13468 0 11
20733: END
// every 27 27$30 trigger joinEpsilon = 1 do
20734: LD_EXP 27
20738: PUSH
20739: LD_INT 1
20741: EQUAL
20742: IFFALSE 20824
20744: GO 20746
20746: DISABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , rand ( 5 , 8 ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , 1 , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ; end_of_file
20747: LD_INT 17
20749: PPUSH
20750: LD_INT 6
20752: PPUSH
20753: LD_INT 5
20755: PPUSH
20756: LD_INT 8
20758: PPUSH
20759: CALL_OW 12
20763: PPUSH
20764: LD_EXP 34
20768: PPUSH
20769: LD_EXP 35
20773: PPUSH
20774: CALL_OW 12
20778: PPUSH
20779: LD_INT 3
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: LD_INT 1
20787: PUSH
20788: LD_INT 3
20790: PUSH
20791: EMPTY
20792: LIST
20793: LIST
20794: PPUSH
20795: LD_INT 43
20797: PUSH
20798: LD_INT 44
20800: PUSH
20801: LD_INT 45
20803: PUSH
20804: LD_INT 46
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: PPUSH
20813: EMPTY
20814: PPUSH
20815: EMPTY
20816: PPUSH
20817: LD_INT 1
20819: PPUSH
20820: CALL 11748 0 11
20824: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] do
20825: LD_INT 54
20827: PPUSH
20828: LD_INT 1
20830: PPUSH
20831: CALL_OW 321
20835: PUSH
20836: LD_INT 2
20838: EQUAL
20839: PUSH
20840: LD_INT 55
20842: PPUSH
20843: LD_INT 1
20845: PPUSH
20846: CALL_OW 321
20850: PUSH
20851: LD_INT 2
20853: EQUAL
20854: AND
20855: PUSH
20856: LD_INT 21
20858: PPUSH
20859: LD_INT 1
20861: PPUSH
20862: CALL_OW 321
20866: PUSH
20867: LD_INT 2
20869: EQUAL
20870: AND
20871: PUSH
20872: LD_INT 22
20874: PPUSH
20875: LD_INT 1
20877: PPUSH
20878: CALL_OW 321
20882: PUSH
20883: LD_INT 2
20885: EQUAL
20886: AND
20887: PUSH
20888: LD_INT 12
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 321
20898: PUSH
20899: LD_INT 1
20901: EQUAL
20902: PUSH
20903: LD_INT 32
20905: PPUSH
20906: LD_INT 1
20908: PPUSH
20909: CALL_OW 321
20913: PUSH
20914: LD_INT 1
20916: EQUAL
20917: OR
20918: PUSH
20919: EMPTY
20920: LIST
20921: AND
20922: IFFALSE 20970
20924: GO 20926
20926: DISABLE
// begin case query ( QEndMission ) of 1 :
20927: LD_STRING QEndMission
20929: PPUSH
20930: CALL_OW 97
20934: PUSH
20935: LD_INT 1
20937: DOUBLE
20938: EQUAL
20939: IFTRUE 20943
20941: GO 20954
20943: POP
// begin end_the_mission_allowed = true ;
20944: LD_ADDR_OWVAR 57
20948: PUSH
20949: LD_INT 1
20951: ST_TO_ADDR
// end ; 2 :
20952: GO 20970
20954: LD_INT 2
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 20969
20962: POP
// begin FinishMission ;
20963: CALL 21075 0 0
// end ; end ;
20967: GO 20970
20969: POP
// end ;
20970: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched do
20971: LD_INT 54
20973: PPUSH
20974: LD_INT 1
20976: PPUSH
20977: CALL_OW 321
20981: PUSH
20982: LD_INT 2
20984: EQUAL
20985: PUSH
20986: LD_INT 55
20988: PPUSH
20989: LD_INT 1
20991: PPUSH
20992: CALL_OW 321
20996: PUSH
20997: LD_INT 2
20999: EQUAL
21000: AND
21001: PUSH
21002: LD_INT 21
21004: PPUSH
21005: LD_INT 1
21007: PPUSH
21008: CALL_OW 321
21012: PUSH
21013: LD_INT 2
21015: EQUAL
21016: AND
21017: PUSH
21018: LD_INT 22
21020: PPUSH
21021: LD_INT 1
21023: PPUSH
21024: CALL_OW 321
21028: PUSH
21029: LD_INT 2
21031: EQUAL
21032: AND
21033: PUSH
21034: LD_INT 12
21036: PPUSH
21037: LD_INT 1
21039: PPUSH
21040: CALL_OW 321
21044: PUSH
21045: LD_INT 2
21047: EQUAL
21048: AND
21049: PUSH
21050: LD_INT 32
21052: PPUSH
21053: LD_INT 1
21055: PPUSH
21056: CALL_OW 321
21060: PUSH
21061: LD_INT 2
21063: EQUAL
21064: AND
21065: IFFALSE 21074
21067: GO 21069
21069: DISABLE
// FinishMission ;
21070: CALL 21075 0 0
21074: END
// export function FinishMission ; begin
21075: LD_INT 0
21077: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
21078: LD_EXP 46
21082: PPUSH
21083: LD_STRING 10_KhatamStatus_1
21085: PPUSH
21086: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
21090: LD_INT 12
21092: PPUSH
21093: LD_INT 1
21095: PPUSH
21096: CALL_OW 321
21100: PUSH
21101: LD_INT 2
21103: EQUAL
21104: IFFALSE 21118
// begin AddMedal ( sights , 1 ) ;
21106: LD_STRING sights
21108: PPUSH
21109: LD_INT 1
21111: PPUSH
21112: CALL_OW 101
// end else
21116: GO 21129
// begin AddMedal ( sights , - 1 ) ;
21118: LD_STRING sights
21120: PPUSH
21121: LD_INT 1
21123: NEG
21124: PPUSH
21125: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
21129: LD_INT 32
21131: PPUSH
21132: LD_INT 1
21134: PPUSH
21135: CALL_OW 321
21139: PUSH
21140: LD_INT 2
21142: EQUAL
21143: IFFALSE 21157
// begin AddMedal ( computers , 1 ) ;
21145: LD_STRING computers
21147: PPUSH
21148: LD_INT 1
21150: PPUSH
21151: CALL_OW 101
// end else
21155: GO 21168
// begin AddMedal ( computers , - 1 ) ;
21157: LD_STRING computers
21159: PPUSH
21160: LD_INT 1
21162: NEG
21163: PPUSH
21164: CALL_OW 101
// end ; if arabianEscape = 0 then
21168: LD_EXP 45
21172: PUSH
21173: LD_INT 0
21175: EQUAL
21176: IFFALSE 21210
// begin AddMedal ( renegades , 2 ) ;
21178: LD_STRING renegades
21180: PPUSH
21181: LD_INT 2
21183: PPUSH
21184: CALL_OW 101
// SaveVariable ( 0 , 10_GensherEscape_1 ) ;
21188: LD_INT 0
21190: PPUSH
21191: LD_STRING 10_GensherEscape_1
21193: PPUSH
21194: CALL_OW 39
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
21198: LD_INT 0
21200: PPUSH
21201: LD_STRING 10_ScientistsEscape_1
21203: PPUSH
21204: CALL_OW 39
// end else
21208: GO 21221
// begin AddMedal ( renegades , - 1 ) ;
21210: LD_STRING renegades
21212: PPUSH
21213: LD_INT 1
21215: NEG
21216: PPUSH
21217: CALL_OW 101
// end ; Query ( kaj ) ;
21221: LD_STRING kaj
21223: PPUSH
21224: CALL_OW 97
// GiveMedals ( Main ) ;
21228: LD_STRING Main
21230: PPUSH
21231: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
21235: LD_INT 22
21237: PUSH
21238: LD_INT 1
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: PUSH
21245: LD_INT 23
21247: PUSH
21248: LD_INT 1
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PUSH
21265: LD_INT 2
21267: PUSH
21268: LD_INT 25
21270: PUSH
21271: LD_INT 1
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: PUSH
21278: LD_INT 25
21280: PUSH
21281: LD_INT 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 25
21290: PUSH
21291: LD_INT 3
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: LD_INT 25
21300: PUSH
21301: LD_INT 4
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 25
21310: PUSH
21311: LD_INT 5
21313: PUSH
21314: EMPTY
21315: LIST
21316: LIST
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: LIST
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: LIST
21331: PPUSH
21332: CALL_OW 69
21336: PPUSH
21337: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
21341: LD_EXP 1
21345: PPUSH
21346: LD_EXP 47
21350: PUSH
21351: LD_STRING JMM
21353: STR
21354: PPUSH
21355: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
21359: LD_EXP 2
21363: PPUSH
21364: LD_EXP 47
21368: PUSH
21369: LD_STRING Brown
21371: STR
21372: PPUSH
21373: CALL 7231 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
21377: LD_EXP 3
21381: PPUSH
21382: LD_EXP 47
21386: PUSH
21387: LD_STRING Donaldson
21389: STR
21390: PPUSH
21391: CALL 7231 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
21395: LD_EXP 4
21399: PPUSH
21400: LD_EXP 47
21404: PUSH
21405: LD_STRING Bobby
21407: STR
21408: PPUSH
21409: CALL 7231 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
21413: LD_EXP 5
21417: PPUSH
21418: LD_EXP 47
21422: PUSH
21423: LD_STRING Cyrus
21425: STR
21426: PPUSH
21427: CALL 7231 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
21431: LD_EXP 6
21435: PPUSH
21436: LD_EXP 47
21440: PUSH
21441: LD_STRING Lisa
21443: STR
21444: PPUSH
21445: CALL 7231 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
21449: LD_EXP 7
21453: PPUSH
21454: LD_EXP 47
21458: PUSH
21459: LD_STRING Frank
21461: STR
21462: PPUSH
21463: CALL 7231 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
21467: LD_EXP 15
21471: PPUSH
21472: LD_EXP 47
21476: PUSH
21477: LD_STRING Gladstone
21479: STR
21480: PPUSH
21481: CALL 7231 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
21485: LD_EXP 8
21489: PPUSH
21490: LD_EXP 47
21494: PUSH
21495: LD_STRING Kikuchi
21497: STR
21498: PPUSH
21499: CALL 7231 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
21503: LD_EXP 12
21507: PPUSH
21508: LD_EXP 47
21512: PUSH
21513: LD_STRING Denis
21515: STR
21516: PPUSH
21517: CALL 7231 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
21521: LD_EXP 13
21525: PPUSH
21526: LD_EXP 47
21530: PUSH
21531: LD_STRING Joan
21533: STR
21534: PPUSH
21535: CALL 7231 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
21539: LD_EXP 9
21543: PPUSH
21544: LD_EXP 47
21548: PUSH
21549: LD_STRING Houten
21551: STR
21552: PPUSH
21553: CALL 7231 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
21557: LD_EXP 11
21561: PPUSH
21562: LD_EXP 47
21566: PUSH
21567: LD_STRING Simms
21569: STR
21570: PPUSH
21571: CALL 7231 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
21575: LD_EXP 10
21579: PPUSH
21580: LD_EXP 47
21584: PUSH
21585: LD_STRING Gary
21587: STR
21588: PPUSH
21589: CALL 7231 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
21593: LD_EXP 17
21597: PPUSH
21598: LD_EXP 47
21602: PUSH
21603: LD_STRING DeltaDoctor
21605: STR
21606: PPUSH
21607: CALL 7231 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor ] , 10_other_survivors ) ;
21611: LD_INT 50
21613: PUSH
21614: EMPTY
21615: LIST
21616: PUSH
21617: LD_INT 22
21619: PUSH
21620: LD_INT 1
21622: PUSH
21623: EMPTY
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 21
21629: PUSH
21630: LD_INT 1
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: LD_INT 25
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 25
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: LD_INT 25
21662: PUSH
21663: LD_INT 3
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: PUSH
21670: LD_INT 25
21672: PUSH
21673: LD_INT 4
21675: PUSH
21676: EMPTY
21677: LIST
21678: LIST
21679: PUSH
21680: EMPTY
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: PUSH
21698: LD_EXP 1
21702: PUSH
21703: LD_EXP 2
21707: PUSH
21708: LD_EXP 3
21712: PUSH
21713: LD_EXP 4
21717: PUSH
21718: LD_EXP 5
21722: PUSH
21723: LD_EXP 6
21727: PUSH
21728: LD_EXP 7
21732: PUSH
21733: LD_EXP 15
21737: PUSH
21738: LD_EXP 8
21742: PUSH
21743: LD_EXP 12
21747: PUSH
21748: LD_EXP 13
21752: PUSH
21753: LD_EXP 9
21757: PUSH
21758: LD_EXP 11
21762: PUSH
21763: LD_EXP 10
21767: PUSH
21768: LD_EXP 17
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: DIFF
21790: PPUSH
21791: LD_STRING 10_other_survivors
21793: PPUSH
21794: CALL_OW 38
// YouWin ;
21798: CALL_OW 103
// end ; end_of_file
21802: LD_VAR 0 1
21806: RET
// every 0 0$1 trigger IsDead ( JMM ) do
21807: LD_EXP 1
21811: PPUSH
21812: CALL_OW 301
21816: IFFALSE 21828
21818: GO 21820
21820: DISABLE
// YouLost ( JMM ) ; end_of_file
21821: LD_STRING JMM
21823: PPUSH
21824: CALL_OW 104
21828: END
// every 0 0$30 do
21829: GO 21831
21831: DISABLE
// begin enable ;
21832: ENABLE
// if cratesSpawned < 6 then
21833: LD_EXP 49
21837: PUSH
21838: LD_INT 6
21840: LESS
21841: IFFALSE 21878
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
21843: LD_INT 3
21845: PPUSH
21846: LD_INT 5
21848: PPUSH
21849: CALL_OW 12
21853: PPUSH
21854: LD_INT 16
21856: PPUSH
21857: LD_INT 1
21859: PPUSH
21860: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
21864: LD_ADDR_EXP 49
21868: PUSH
21869: LD_EXP 49
21873: PUSH
21874: LD_INT 1
21876: PLUS
21877: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
21878: LD_EXP 49
21882: PUSH
21883: LD_INT 6
21885: GREATEREQUAL
21886: PUSH
21887: LD_EXP 49
21891: PUSH
21892: LD_INT 12
21894: LESS
21895: AND
21896: IFFALSE 21940
// begin wait ( 0 0$30 ) ;
21898: LD_INT 1050
21900: PPUSH
21901: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
21905: LD_INT 3
21907: PPUSH
21908: LD_INT 5
21910: PPUSH
21911: CALL_OW 12
21915: PPUSH
21916: LD_INT 16
21918: PPUSH
21919: LD_INT 1
21921: PPUSH
21922: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
21926: LD_ADDR_EXP 49
21930: PUSH
21931: LD_EXP 49
21935: PUSH
21936: LD_INT 1
21938: PLUS
21939: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
21940: LD_EXP 49
21944: PUSH
21945: LD_INT 12
21947: GREATEREQUAL
21948: IFFALSE 21992
// begin wait ( 1 1$0 ) ;
21950: LD_INT 2100
21952: PPUSH
21953: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
21957: LD_INT 3
21959: PPUSH
21960: LD_INT 5
21962: PPUSH
21963: CALL_OW 12
21967: PPUSH
21968: LD_INT 16
21970: PPUSH
21971: LD_INT 1
21973: PPUSH
21974: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
21978: LD_ADDR_EXP 49
21982: PUSH
21983: LD_EXP 49
21987: PUSH
21988: LD_INT 1
21990: PLUS
21991: ST_TO_ADDR
// end ; end ;
21992: END
