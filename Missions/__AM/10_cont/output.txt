// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 28
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// JMMSquad = [ ] ;
  15: LD_ADDR_EXP 20
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// joinEpsilon = 0 ;
  22: LD_ADDR_EXP 29
  26: PUSH
  27: LD_INT 0
  29: ST_TO_ADDR
// ruBaseReady = 0 ;
  30: LD_ADDR_EXP 38
  34: PUSH
  35: LD_INT 0
  37: ST_TO_ADDR
// russianAI = 0 ;
  38: LD_ADDR_EXP 39
  42: PUSH
  43: LD_INT 0
  45: ST_TO_ADDR
// activateRUAI = 0 ;
  46: LD_ADDR_EXP 40
  50: PUSH
  51: LD_INT 0
  53: ST_TO_ADDR
// ruPossition = 0 ;
  54: LD_ADDR_EXP 41
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  62: LD_ADDR_EXP 42
  66: PUSH
  67: EMPTY
  68: ST_TO_ADDR
// arabianMines = [ ] ;
  69: LD_ADDR_EXP 50
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianEscape = 0 ;
  76: LD_ADDR_EXP 47
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  84: LD_ADDR_EXP 46
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// arabianDefeated = 0 ;
  92: LD_ADDR_EXP 48
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// arabianTrait = 0 ;
 100: LD_ADDR_EXP 49
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// telep_ru_dialog := false ;
 108: LD_ADDR_EXP 58
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// eventVar1 = 0 ;
 116: LD_ADDR_EXP 61
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// eventVar2 = 0 ;
 124: LD_ADDR_EXP 62
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// fastEnd = 0 ;
 132: LD_ADDR_EXP 59
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// KhatamStatus = 0 ;
 140: LD_ADDR_EXP 52
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// GensherStatus = 0 ;
 148: LD_ADDR_EXP 51
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// cratesSpawned = 0 ;
 156: LD_ADDR_EXP 55
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 164: LD_ADDR_EXP 56
 168: PUSH
 169: LD_INT 1
 171: PUSH
 172: LD_INT 2
 174: PUSH
 175: LD_INT 2
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: LIST
 182: PUSH
 183: LD_OWVAR 67
 187: ARRAY
 188: ST_TO_ADDR
// ru_sold_counter := [ 3 , 4 , 5 ] [ Difficulty ] ;
 189: LD_ADDR_EXP 57
 193: PUSH
 194: LD_INT 3
 196: PUSH
 197: LD_INT 4
 199: PUSH
 200: LD_INT 5
 202: PUSH
 203: EMPTY
 204: LIST
 205: LIST
 206: LIST
 207: PUSH
 208: LD_OWVAR 67
 212: ARRAY
 213: ST_TO_ADDR
// attackAvalaible = 1 ;
 214: LD_ADDR_EXP 60
 218: PUSH
 219: LD_INT 1
 221: ST_TO_ADDR
// mission_prefix := 10_ ;
 222: LD_ADDR_EXP 53
 226: PUSH
 227: LD_STRING 10_
 229: ST_TO_ADDR
// mission_prefix_prev := 09_ ;
 230: LD_ADDR_EXP 54
 234: PUSH
 235: LD_STRING 09_
 237: ST_TO_ADDR
// debugMode = 0 ;
 238: LD_ADDR_EXP 63
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// PrepareNature ;
 246: CALL 24634 0 0
// PrepareDifficulty ;
 250: CALL 9967 0 0
// PrepareJMMTeam ;
 254: CALL 688 0 0
// PrepareCathyTeam ;
 258: CALL 1763 0 0
// PlaceMines ( MineField1 , rand ( 2 , 4 ) + Difficulty ) ;
 262: LD_INT 24
 264: PPUSH
 265: LD_INT 2
 267: PPUSH
 268: LD_INT 4
 270: PPUSH
 271: CALL_OW 12
 275: PUSH
 276: LD_OWVAR 67
 280: PLUS
 281: PPUSH
 282: CALL 19565 0 2
// if Difficulty > 1 then
 286: LD_OWVAR 67
 290: PUSH
 291: LD_INT 1
 293: GREATER
 294: IFFALSE 320
// PlaceMines ( MineField2 , rand ( 2 , 4 ) + Difficulty ) ;
 296: LD_INT 25
 298: PPUSH
 299: LD_INT 2
 301: PPUSH
 302: LD_INT 4
 304: PPUSH
 305: CALL_OW 12
 309: PUSH
 310: LD_OWVAR 67
 314: PLUS
 315: PPUSH
 316: CALL 19565 0 2
// if Difficulty > 2 then
 320: LD_OWVAR 67
 324: PUSH
 325: LD_INT 2
 327: GREATER
 328: IFFALSE 354
// PlaceMines ( MineField3 , rand ( 2 , 4 ) + Difficulty ) ;
 330: LD_INT 26
 332: PPUSH
 333: LD_INT 2
 335: PPUSH
 336: LD_INT 4
 338: PPUSH
 339: CALL_OW 12
 343: PUSH
 344: LD_OWVAR 67
 348: PLUS
 349: PPUSH
 350: CALL 19565 0 2
// PrepareArabianCommander ;
 354: CALL 3128 0 0
// PrepareArabian ;
 358: CALL 3180 0 0
// BuildArabianBase ;
 362: CALL 12666 0 0
// TameApemans ;
 366: CALL 18530 0 0
// end ;
 370: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 371: LD_EXP 63
 375: PUSH
 376: LD_INT 1
 378: EQUAL
 379: IFFALSE 685
 381: GO 383
 383: DISABLE
 384: LD_INT 0
 386: PPUSH
// begin enable ;
 387: ENABLE
// fogoff ( true ) ;
 388: LD_INT 1
 390: PPUSH
 391: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 395: LD_ADDR_VAR 0 1
 399: PUSH
 400: LD_INT 22
 402: PUSH
 403: LD_INT 1
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: PUSH
 410: LD_INT 21
 412: PUSH
 413: LD_INT 1
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PPUSH
 424: CALL_OW 69
 428: PUSH
 429: FOR_IN
 430: IFFALSE 446
// SetLives ( i , 1000 ) ;
 432: LD_VAR 0 1
 436: PPUSH
 437: LD_INT 1000
 439: PPUSH
 440: CALL_OW 234
 444: GO 429
 446: POP
 447: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 448: LD_ADDR_VAR 0 1
 452: PUSH
 453: LD_INT 22
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PUSH
 491: EMPTY
 492: LIST
 493: LIST
 494: PPUSH
 495: CALL_OW 69
 499: PUSH
 500: FOR_IN
 501: IFFALSE 525
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 503: LD_VAR 0 1
 507: PPUSH
 508: CALL_OW 274
 512: PPUSH
 513: LD_INT 1
 515: PPUSH
 516: LD_INT 9999
 518: PPUSH
 519: CALL_OW 277
 523: GO 500
 525: POP
 526: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 527: LD_ADDR_VAR 0 1
 531: PUSH
 532: LD_INT 22
 534: PUSH
 535: LD_INT 1
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 2
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 0
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: LD_INT 30
 557: PUSH
 558: LD_INT 1
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: LIST
 569: PUSH
 570: EMPTY
 571: LIST
 572: LIST
 573: PPUSH
 574: CALL_OW 69
 578: PUSH
 579: FOR_IN
 580: IFFALSE 604
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 582: LD_VAR 0 1
 586: PPUSH
 587: CALL_OW 274
 591: PPUSH
 592: LD_INT 2
 594: PPUSH
 595: LD_INT 9999
 597: PPUSH
 598: CALL_OW 277
 602: GO 579
 604: POP
 605: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 606: LD_ADDR_VAR 0 1
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 2
 623: PUSH
 624: LD_INT 30
 626: PUSH
 627: LD_INT 0
 629: PUSH
 630: EMPTY
 631: LIST
 632: LIST
 633: PUSH
 634: LD_INT 30
 636: PUSH
 637: LD_INT 1
 639: PUSH
 640: EMPTY
 641: LIST
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PUSH
 649: EMPTY
 650: LIST
 651: LIST
 652: PPUSH
 653: CALL_OW 69
 657: PUSH
 658: FOR_IN
 659: IFFALSE 683
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 661: LD_VAR 0 1
 665: PPUSH
 666: CALL_OW 274
 670: PPUSH
 671: LD_INT 3
 673: PPUSH
 674: LD_INT 9999
 676: PPUSH
 677: CALL_OW 277
 681: GO 658
 683: POP
 684: POP
// end ; end_of_file
 685: PPOPN 1
 687: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 688: LD_INT 0
 690: PPUSH
 691: PPUSH
 692: PPUSH
 693: PPUSH
 694: PPUSH
 695: PPUSH
// uc_side = 1 ;
 696: LD_ADDR_OWVAR 20
 700: PUSH
 701: LD_INT 1
 703: ST_TO_ADDR
// uc_nation = 1 ;
 704: LD_ADDR_OWVAR 21
 708: PUSH
 709: LD_INT 1
 711: ST_TO_ADDR
// count = 0 ;
 712: LD_ADDR_VAR 0 6
 716: PUSH
 717: LD_INT 0
 719: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 720: LD_ADDR_EXP 1
 724: PUSH
 725: LD_STRING 10_JMM
 727: PPUSH
 728: LD_INT 1
 730: PPUSH
 731: CALL 9561 0 2
 735: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 736: LD_ADDR_EXP 20
 740: PUSH
 741: LD_EXP 20
 745: PUSH
 746: LD_EXP 1
 750: ADD
 751: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 752: LD_ADDR_EXP 10
 756: PUSH
 757: LD_STRING 10_Gary
 759: PPUSH
 760: LD_INT 1
 762: PPUSH
 763: CALL 9561 0 2
 767: ST_TO_ADDR
// if Gary then
 768: LD_EXP 10
 772: IFFALSE 790
// JMMSquad = JMMSquad ^ Gary ;
 774: LD_ADDR_EXP 20
 778: PUSH
 779: LD_EXP 20
 783: PUSH
 784: LD_EXP 10
 788: ADD
 789: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 790: LD_ADDR_EXP 5
 794: PUSH
 795: LD_STRING 10_Cyrus
 797: PPUSH
 798: LD_INT 1
 800: PPUSH
 801: CALL 9561 0 2
 805: ST_TO_ADDR
// if Cyrus then
 806: LD_EXP 5
 810: IFFALSE 828
// JMMSquad = JMMSquad ^ Cyrus ;
 812: LD_ADDR_EXP 20
 816: PUSH
 817: LD_EXP 20
 821: PUSH
 822: LD_EXP 5
 826: ADD
 827: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 828: LD_ADDR_EXP 4
 832: PUSH
 833: LD_STRING 10_Bobby
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL 9561 0 2
 843: ST_TO_ADDR
// if Bobby then
 844: LD_EXP 4
 848: IFFALSE 866
// JMMSquad = JMMSquad ^ Bobby ;
 850: LD_ADDR_EXP 20
 854: PUSH
 855: LD_EXP 20
 859: PUSH
 860: LD_EXP 4
 864: ADD
 865: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 866: LD_ADDR_EXP 6
 870: PUSH
 871: LD_STRING 10_Lisa
 873: PPUSH
 874: LD_INT 1
 876: PPUSH
 877: CALL 9561 0 2
 881: ST_TO_ADDR
// if Lisa then
 882: LD_EXP 6
 886: IFFALSE 904
// JMMSquad = JMMSquad ^ Lisa ;
 888: LD_ADDR_EXP 20
 892: PUSH
 893: LD_EXP 20
 897: PUSH
 898: LD_EXP 6
 902: ADD
 903: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 904: LD_ADDR_EXP 2
 908: PUSH
 909: LD_STRING 10_Brown
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 9561 0 2
 919: ST_TO_ADDR
// if Brown then
 920: LD_EXP 2
 924: IFFALSE 942
// JMMSquad = JMMSquad ^ Brown ;
 926: LD_ADDR_EXP 20
 930: PUSH
 931: LD_EXP 20
 935: PUSH
 936: LD_EXP 2
 940: ADD
 941: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 942: LD_ADDR_EXP 3
 946: PUSH
 947: LD_STRING 10_Donaldson
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL 9561 0 2
 957: ST_TO_ADDR
// if Donaldson then
 958: LD_EXP 3
 962: IFFALSE 980
// JMMSquad = JMMSquad ^ Donaldson ;
 964: LD_ADDR_EXP 20
 968: PUSH
 969: LD_EXP 20
 973: PUSH
 974: LD_EXP 3
 978: ADD
 979: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 980: LD_ADDR_EXP 7
 984: PUSH
 985: LD_STRING 10_Frank
 987: PPUSH
 988: LD_INT 1
 990: PPUSH
 991: CALL 9561 0 2
 995: ST_TO_ADDR
// if Frank then
 996: LD_EXP 7
1000: IFFALSE 1018
// JMMSquad = JMMSquad ^ Frank ;
1002: LD_ADDR_EXP 20
1006: PUSH
1007: LD_EXP 20
1011: PUSH
1012: LD_EXP 7
1016: ADD
1017: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1018: LD_ADDR_EXP 9
1022: PUSH
1023: LD_STRING 10_Houten
1025: PPUSH
1026: LD_INT 1
1028: PPUSH
1029: CALL 9561 0 2
1033: ST_TO_ADDR
// if Houten then
1034: LD_EXP 9
1038: IFFALSE 1056
// JMMSquad = JMMSquad ^ Houten ;
1040: LD_ADDR_EXP 20
1044: PUSH
1045: LD_EXP 20
1049: PUSH
1050: LD_EXP 9
1054: ADD
1055: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1056: LD_ADDR_EXP 21
1060: PUSH
1061: LD_STRING OthersIn10
1063: PPUSH
1064: CALL_OW 31
1068: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1069: LD_ADDR_EXP 24
1073: PUSH
1074: LD_STRING Powell
1076: PPUSH
1077: LD_INT 0
1079: PPUSH
1080: CALL 9561 0 2
1084: ST_TO_ADDR
// for i in JMMSquad do
1085: LD_ADDR_VAR 0 2
1089: PUSH
1090: LD_EXP 20
1094: PUSH
1095: FOR_IN
1096: IFFALSE 1355
// begin if count < 3 then
1098: LD_VAR 0 6
1102: PUSH
1103: LD_INT 3
1105: LESS
1106: IFFALSE 1223
// begin vc_engine = 1 ;
1108: LD_ADDR_OWVAR 39
1112: PUSH
1113: LD_INT 1
1115: ST_TO_ADDR
// vc_control = 1 ;
1116: LD_ADDR_OWVAR 38
1120: PUSH
1121: LD_INT 1
1123: ST_TO_ADDR
// vc_weapon = 12 ;
1124: LD_ADDR_OWVAR 40
1128: PUSH
1129: LD_INT 12
1131: ST_TO_ADDR
// vc_chassis = 3 ;
1132: LD_ADDR_OWVAR 37
1136: PUSH
1137: LD_INT 3
1139: ST_TO_ADDR
// veh = CreateVehicle ;
1140: LD_ADDR_VAR 0 4
1144: PUSH
1145: CALL_OW 45
1149: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1150: LD_VAR 0 4
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1162: LD_VAR 0 4
1166: PPUSH
1167: LD_INT 2
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// if count mod 2 = 0 then
1177: LD_VAR 0 6
1181: PUSH
1182: LD_INT 2
1184: MOD
1185: PUSH
1186: LD_INT 0
1188: EQUAL
1189: IFFALSE 1208
// AddCargo ( veh , 1 , 100 ) else
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 1
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
1206: GO 1223
// AddCargo ( veh , 3 , 100 ) end ;
1208: LD_VAR 0 4
1212: PPUSH
1213: LD_INT 3
1215: PPUSH
1216: LD_INT 100
1218: PPUSH
1219: CALL_OW 291
// if count >= 3 then
1223: LD_VAR 0 6
1227: PUSH
1228: LD_INT 3
1230: GREATEREQUAL
1231: IFFALSE 1325
// begin vc_engine = 1 ;
1233: LD_ADDR_OWVAR 39
1237: PUSH
1238: LD_INT 1
1240: ST_TO_ADDR
// vc_control = 1 ;
1241: LD_ADDR_OWVAR 38
1245: PUSH
1246: LD_INT 1
1248: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1249: LD_ADDR_OWVAR 40
1253: PUSH
1254: LD_INT 3
1256: PUSH
1257: LD_INT 4
1259: PUSH
1260: LD_INT 5
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: LIST
1267: PUSH
1268: LD_INT 1
1270: PPUSH
1271: LD_INT 3
1273: PPUSH
1274: CALL_OW 12
1278: ARRAY
1279: ST_TO_ADDR
// vc_chassis = 3 ;
1280: LD_ADDR_OWVAR 37
1284: PUSH
1285: LD_INT 3
1287: ST_TO_ADDR
// veh = CreateVehicle ;
1288: LD_ADDR_VAR 0 4
1292: PUSH
1293: CALL_OW 45
1297: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1298: LD_VAR 0 4
1302: PPUSH
1303: LD_INT 1
1305: PPUSH
1306: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1310: LD_VAR 0 4
1314: PPUSH
1315: LD_INT 2
1317: PPUSH
1318: LD_INT 0
1320: PPUSH
1321: CALL_OW 49
// end ; count = count + 1 ;
1325: LD_ADDR_VAR 0 6
1329: PUSH
1330: LD_VAR 0 6
1334: PUSH
1335: LD_INT 1
1337: PLUS
1338: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1339: LD_VAR 0 2
1343: PPUSH
1344: LD_VAR 0 4
1348: PPUSH
1349: CALL_OW 52
// end ;
1353: GO 1095
1355: POP
1356: POP
// for i in others10 do
1357: LD_ADDR_VAR 0 2
1361: PUSH
1362: LD_EXP 21
1366: PUSH
1367: FOR_IN
1368: IFFALSE 1494
// begin vc_engine = 1 ;
1370: LD_ADDR_OWVAR 39
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// vc_control = 1 ;
1378: LD_ADDR_OWVAR 38
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1386: LD_ADDR_OWVAR 40
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 4
1396: PUSH
1397: LD_INT 5
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: LIST
1404: PUSH
1405: LD_INT 1
1407: PPUSH
1408: LD_INT 3
1410: PPUSH
1411: CALL_OW 12
1415: ARRAY
1416: ST_TO_ADDR
// vc_chassis = 3 ;
1417: LD_ADDR_OWVAR 37
1421: PUSH
1422: LD_INT 3
1424: ST_TO_ADDR
// veh = CreateVehicle ;
1425: LD_ADDR_VAR 0 4
1429: PUSH
1430: CALL_OW 45
1434: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1435: LD_VAR 0 4
1439: PPUSH
1440: LD_INT 1
1442: PPUSH
1443: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1447: LD_VAR 0 4
1451: PPUSH
1452: LD_INT 2
1454: PPUSH
1455: LD_INT 0
1457: PPUSH
1458: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1462: LD_ADDR_EXP 28
1466: PUSH
1467: LD_EXP 28
1471: PUSH
1472: LD_VAR 0 4
1476: ADD
1477: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1478: LD_VAR 0 2
1482: PPUSH
1483: LD_VAR 0 4
1487: PPUSH
1488: CALL_OW 52
// end ;
1492: GO 1367
1494: POP
1495: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1496: LD_INT 22
1498: PUSH
1499: LD_INT 1
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: PUSH
1506: LD_INT 21
1508: PUSH
1509: LD_INT 1
1511: PUSH
1512: EMPTY
1513: LIST
1514: LIST
1515: PUSH
1516: EMPTY
1517: LIST
1518: LIST
1519: PPUSH
1520: CALL_OW 69
1524: PPUSH
1525: LD_INT 1
1527: PPUSH
1528: CALL_OW 336
// end ;
1532: LD_VAR 0 1
1536: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1537: LD_INT 0
1539: PPUSH
1540: PPUSH
1541: PPUSH
1542: PPUSH
1543: PPUSH
// uc_side = 1 ;
1544: LD_ADDR_OWVAR 20
1548: PUSH
1549: LD_INT 1
1551: ST_TO_ADDR
// uc_nation = 1 ;
1552: LD_ADDR_OWVAR 21
1556: PUSH
1557: LD_INT 1
1559: ST_TO_ADDR
// for i := 1 to 10 do
1560: LD_ADDR_VAR 0 2
1564: PUSH
1565: DOUBLE
1566: LD_INT 1
1568: DEC
1569: ST_TO_ADDR
1570: LD_INT 10
1572: PUSH
1573: FOR_TO
1574: IFFALSE 1756
// begin vc_engine = 1 ;
1576: LD_ADDR_OWVAR 39
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// vc_control = 1 ;
1584: LD_ADDR_OWVAR 38
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1592: LD_ADDR_OWVAR 40
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 12
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: PUSH
1615: LD_INT 1
1617: PPUSH
1618: LD_INT 4
1620: PPUSH
1621: CALL_OW 12
1625: ARRAY
1626: ST_TO_ADDR
// vc_chassis = 3 ;
1627: LD_ADDR_OWVAR 37
1631: PUSH
1632: LD_INT 3
1634: ST_TO_ADDR
// veh = CreateVehicle ;
1635: LD_ADDR_VAR 0 3
1639: PUSH
1640: CALL_OW 45
1644: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1645: LD_VAR 0 3
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1657: LD_VAR 0 3
1661: PPUSH
1662: LD_INT 2
1664: PPUSH
1665: LD_INT 0
1667: PPUSH
1668: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1672: LD_ADDR_EXP 28
1676: PUSH
1677: LD_EXP 28
1681: PUSH
1682: LD_VAR 0 3
1686: ADD
1687: ST_TO_ADDR
// if vc_weapon = 12 then
1688: LD_OWVAR 40
1692: PUSH
1693: LD_INT 12
1695: EQUAL
1696: IFFALSE 1754
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1698: LD_ADDR_VAR 0 4
1702: PUSH
1703: LD_INT 5
1705: PPUSH
1706: LD_INT 10
1708: PPUSH
1709: CALL_OW 12
1713: PUSH
1714: LD_INT 10
1716: MUL
1717: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1718: LD_VAR 0 3
1722: PPUSH
1723: LD_INT 1
1725: PUSH
1726: LD_INT 3
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: PUSH
1733: LD_INT 1
1735: PPUSH
1736: LD_INT 2
1738: PPUSH
1739: CALL_OW 12
1743: ARRAY
1744: PPUSH
1745: LD_VAR 0 4
1749: PPUSH
1750: CALL_OW 291
// end ; end ;
1754: GO 1573
1756: POP
1757: POP
// end ;
1758: LD_VAR 0 1
1762: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1763: LD_INT 0
1765: PPUSH
1766: PPUSH
1767: PPUSH
// uc_side = 4 ;
1768: LD_ADDR_OWVAR 20
1772: PUSH
1773: LD_INT 4
1775: ST_TO_ADDR
// uc_nation = 1 ;
1776: LD_ADDR_OWVAR 21
1780: PUSH
1781: LD_INT 1
1783: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1784: LD_ADDR_EXP 11
1788: PUSH
1789: LD_STRING Simms
1791: PPUSH
1792: LD_INT 0
1794: PPUSH
1795: CALL 9561 0 2
1799: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1800: LD_ADDR_EXP 12
1804: PUSH
1805: LD_STRING 08_Denis
1807: PPUSH
1808: LD_INT 1
1810: PPUSH
1811: CALL 9561 0 2
1815: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1816: LD_ADDR_EXP 13
1820: PUSH
1821: LD_STRING 08_Joan
1823: PPUSH
1824: LD_INT 1
1826: PPUSH
1827: CALL 9561 0 2
1831: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , true ) ;
1832: LD_ADDR_EXP 14
1836: PUSH
1837: LD_STRING Khatam
1839: PPUSH
1840: LD_INT 1
1842: PPUSH
1843: CALL 9561 0 2
1847: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true ) ;
1848: LD_ADDR_EXP 15
1852: PUSH
1853: LD_STRING Gladstone
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL 9561 0 2
1863: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1864: LD_ADDR_EXP 17
1868: PUSH
1869: LD_STRING DeltaDoctor
1871: PPUSH
1872: LD_INT 1
1874: PPUSH
1875: CALL 9561 0 2
1879: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1880: LD_STRING 08_Frank
1882: PPUSH
1883: CALL_OW 28
1887: PUSH
1888: LD_INT 1
1890: EQUAL
1891: IFFALSE 1909
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1893: LD_ADDR_EXP 8
1897: PUSH
1898: LD_STRING Yamoko
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: CALL 9561 0 2
1908: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1909: LD_ADDR_EXP 22
1913: PUSH
1914: LD_STRING 09_others
1916: PPUSH
1917: CALL_OW 31
1921: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1922: LD_ADDR_EXP 23
1926: PUSH
1927: LD_STRING 09_apes
1929: PPUSH
1930: CALL_OW 31
1934: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1935: LD_EXP 11
1939: PPUSH
1940: LD_INT 1
1942: PPUSH
1943: LD_INT 0
1945: PPUSH
1946: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1950: LD_EXP 12
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1965: LD_EXP 13
1969: PPUSH
1970: LD_INT 1
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1980: LD_EXP 14
1984: PPUSH
1985: LD_INT 1
1987: PPUSH
1988: LD_INT 0
1990: PPUSH
1991: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1995: LD_EXP 15
1999: PPUSH
2000: LD_INT 1
2002: PPUSH
2003: LD_INT 0
2005: PPUSH
2006: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2010: LD_EXP 17
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2025: LD_EXP 8
2029: PPUSH
2030: LD_INT 1
2032: PPUSH
2033: LD_INT 0
2035: PPUSH
2036: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2040: LD_EXP 11
2044: PUSH
2045: LD_EXP 14
2049: PUSH
2050: LD_EXP 12
2054: PUSH
2055: LD_EXP 15
2059: PUSH
2060: LD_EXP 17
2064: PUSH
2065: LD_EXP 13
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: LIST
2074: LIST
2075: LIST
2076: LIST
2077: PPUSH
2078: LD_INT 4
2080: PPUSH
2081: CALL_OW 336
// if others09 > 2 then
2085: LD_EXP 22
2089: PUSH
2090: LD_INT 2
2092: GREATER
2093: IFFALSE 2156
// begin for i := 1 to 3 do
2095: LD_ADDR_VAR 0 2
2099: PUSH
2100: DOUBLE
2101: LD_INT 1
2103: DEC
2104: ST_TO_ADDR
2105: LD_INT 3
2107: PUSH
2108: FOR_TO
2109: IFFALSE 2152
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2111: LD_EXP 22
2115: PUSH
2116: LD_VAR 0 2
2120: ARRAY
2121: PPUSH
2122: LD_INT 1
2124: PPUSH
2125: LD_INT 0
2127: PPUSH
2128: CALL_OW 49
// SetClass ( others09 [ i ] , 2 ) ;
2132: LD_EXP 22
2136: PUSH
2137: LD_VAR 0 2
2141: ARRAY
2142: PPUSH
2143: LD_INT 2
2145: PPUSH
2146: CALL_OW 336
// end ;
2150: GO 2108
2152: POP
2153: POP
// end else
2154: GO 2200
// begin for i in others09 do
2156: LD_ADDR_VAR 0 2
2160: PUSH
2161: LD_EXP 22
2165: PUSH
2166: FOR_IN
2167: IFFALSE 2198
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// SetClass ( i , 2 ) ;
2184: LD_VAR 0 2
2188: PPUSH
2189: LD_INT 2
2191: PPUSH
2192: CALL_OW 336
// end ;
2196: GO 2166
2198: POP
2199: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2200: LD_INT 22
2202: PUSH
2203: LD_INT 4
2205: PUSH
2206: EMPTY
2207: LIST
2208: LIST
2209: PUSH
2210: LD_INT 25
2212: PUSH
2213: LD_INT 2
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: EMPTY
2221: LIST
2222: LIST
2223: PPUSH
2224: CALL_OW 69
2228: PUSH
2229: LD_INT 0
2231: EQUAL
2232: IFFALSE 2350
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2234: LD_ADDR_VAR 0 3
2238: PUSH
2239: LD_INT 22
2241: PUSH
2242: LD_INT 4
2244: PUSH
2245: EMPTY
2246: LIST
2247: LIST
2248: PUSH
2249: LD_INT 25
2251: PUSH
2252: LD_INT 2
2254: PUSH
2255: EMPTY
2256: LIST
2257: LIST
2258: PUSH
2259: EMPTY
2260: LIST
2261: LIST
2262: PPUSH
2263: CALL_OW 69
2267: PUSH
2268: LD_EXP 11
2272: PUSH
2273: LD_EXP 14
2277: PUSH
2278: LD_EXP 12
2282: PUSH
2283: LD_EXP 15
2287: PUSH
2288: LD_EXP 17
2292: PUSH
2293: LD_EXP 13
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: LIST
2302: LIST
2303: LIST
2304: LIST
2305: DIFF
2306: ST_TO_ADDR
// if not tmp then
2307: LD_VAR 0 3
2311: NOT
2312: IFFALSE 2334
// begin if Denis then
2314: LD_EXP 12
2318: IFFALSE 2332
// SetClass ( Denis , 2 ) ;
2320: LD_EXP 12
2324: PPUSH
2325: LD_INT 2
2327: PPUSH
2328: CALL_OW 336
// exit ;
2332: GO 2500
// end ; SetClass ( tmp [ 1 ] , 2 ) ;
2334: LD_VAR 0 3
2338: PUSH
2339: LD_INT 1
2341: ARRAY
2342: PPUSH
2343: LD_INT 2
2345: PPUSH
2346: CALL_OW 336
// end ; for i in ape09 do
2350: LD_ADDR_VAR 0 2
2354: PUSH
2355: LD_EXP 23
2359: PUSH
2360: FOR_IN
2361: IFFALSE 2380
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2363: LD_VAR 0 2
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
2378: GO 2360
2380: POP
2381: POP
// AddComBuild ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) , b_depot , 101 , 30 , 2 ) ;
2382: LD_INT 22
2384: PUSH
2385: LD_INT 4
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: PUSH
2392: LD_INT 25
2394: PUSH
2395: LD_INT 2
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: PUSH
2402: EMPTY
2403: LIST
2404: LIST
2405: PPUSH
2406: CALL_OW 69
2410: PPUSH
2411: LD_INT 0
2413: PPUSH
2414: LD_INT 101
2416: PPUSH
2417: LD_INT 30
2419: PPUSH
2420: LD_INT 2
2422: PPUSH
2423: CALL_OW 205
// uc_side = 1 ;
2427: LD_ADDR_OWVAR 20
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// hc_class := 1 ;
2435: LD_ADDR_OWVAR 28
2439: PUSH
2440: LD_INT 1
2442: ST_TO_ADDR
// hc_sex := sex_female ;
2443: LD_ADDR_OWVAR 27
2447: PUSH
2448: LD_INT 2
2450: ST_TO_ADDR
// hc_gallery :=  ;
2451: LD_ADDR_OWVAR 33
2455: PUSH
2456: LD_STRING 
2458: ST_TO_ADDR
// hc_name :=  ;
2459: LD_ADDR_OWVAR 26
2463: PUSH
2464: LD_STRING 
2466: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2467: LD_ADDR_OWVAR 31
2471: PUSH
2472: LD_INT 1
2474: PUSH
2475: LD_INT 7
2477: PUSH
2478: LD_INT 1
2480: PUSH
2481: LD_INT 0
2483: PUSH
2484: EMPTY
2485: LIST
2486: LIST
2487: LIST
2488: LIST
2489: ST_TO_ADDR
// AmScout = CreateHuman ;
2490: LD_ADDR_EXP 18
2494: PUSH
2495: CALL_OW 44
2499: ST_TO_ADDR
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareCornell ; begin
2505: LD_INT 0
2507: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2508: LD_INT 4
2510: PPUSH
2511: LD_INT 4
2513: PPUSH
2514: CALL_OW 343
// uc_side = 4 ;
2518: LD_ADDR_OWVAR 20
2522: PUSH
2523: LD_INT 4
2525: ST_TO_ADDR
// uc_nation = 1 ;
2526: LD_ADDR_OWVAR 21
2530: PUSH
2531: LD_INT 1
2533: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2534: LD_ADDR_EXP 19
2538: PUSH
2539: LD_STRING 03_Cornel
2541: PPUSH
2542: LD_INT 1
2544: PPUSH
2545: CALL 9561 0 2
2549: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2550: LD_EXP 19
2554: PPUSH
2555: LD_INT 8
2557: PPUSH
2558: LD_INT 0
2560: PPUSH
2561: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2565: LD_EXP 19
2569: PPUSH
2570: LD_INT 350
2572: PPUSH
2573: CALL_OW 234
// if IsInUnit ( JMM ) then
2577: LD_EXP 1
2581: PPUSH
2582: CALL_OW 310
2586: IFFALSE 2629
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2588: LD_EXP 19
2592: PPUSH
2593: LD_EXP 1
2597: PPUSH
2598: CALL_OW 310
2602: PPUSH
2603: CALL_OW 250
2607: PPUSH
2608: LD_EXP 1
2612: PPUSH
2613: CALL_OW 310
2617: PPUSH
2618: CALL_OW 251
2622: PPUSH
2623: CALL_OW 111
2627: GO 2658
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2629: LD_EXP 19
2633: PPUSH
2634: LD_EXP 1
2638: PPUSH
2639: CALL_OW 250
2643: PPUSH
2644: LD_EXP 1
2648: PPUSH
2649: CALL_OW 251
2653: PPUSH
2654: CALL_OW 111
// end ; end_of_file
2658: LD_VAR 0 1
2662: RET
// export function PrepareRussians ; var i , un ; begin
2663: LD_INT 0
2665: PPUSH
2666: PPUSH
2667: PPUSH
// uc_side = 3 ;
2668: LD_ADDR_OWVAR 20
2672: PUSH
2673: LD_INT 3
2675: ST_TO_ADDR
// uc_nation = 3 ;
2676: LD_ADDR_OWVAR 21
2680: PUSH
2681: LD_INT 3
2683: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2684: LD_ADDR_EXP 25
2688: PUSH
2689: LD_STRING Tsaritsyn
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: CALL 9561 0 2
2699: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2700: LD_EXP 25
2704: PPUSH
2705: LD_INT 3
2707: PPUSH
2708: LD_INT 0
2710: PPUSH
2711: CALL_OW 49
// for i = 1 to 14 do
2715: LD_ADDR_VAR 0 2
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_INT 14
2727: PUSH
2728: FOR_TO
2729: IFFALSE 2815
// begin uc_side = 3 ;
2731: LD_ADDR_OWVAR 20
2735: PUSH
2736: LD_INT 3
2738: ST_TO_ADDR
// uc_nation = 3 ;
2739: LD_ADDR_OWVAR 21
2743: PUSH
2744: LD_INT 3
2746: ST_TO_ADDR
// hc_gallery =  ;
2747: LD_ADDR_OWVAR 33
2751: PUSH
2752: LD_STRING 
2754: ST_TO_ADDR
// hc_name =  ;
2755: LD_ADDR_OWVAR 26
2759: PUSH
2760: LD_STRING 
2762: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2763: LD_INT 0
2765: PPUSH
2766: LD_INT 1
2768: PPUSH
2769: LD_EXP 36
2773: PPUSH
2774: LD_EXP 37
2778: PPUSH
2779: CALL_OW 12
2783: PPUSH
2784: CALL_OW 380
// un = CreateHuman ;
2788: LD_ADDR_VAR 0 3
2792: PUSH
2793: CALL_OW 44
2797: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2798: LD_VAR 0 3
2802: PPUSH
2803: LD_INT 3
2805: PPUSH
2806: LD_INT 0
2808: PPUSH
2809: CALL_OW 49
// end ;
2813: GO 2728
2815: POP
2816: POP
// for i = 1 to 6 do
2817: LD_ADDR_VAR 0 2
2821: PUSH
2822: DOUBLE
2823: LD_INT 1
2825: DEC
2826: ST_TO_ADDR
2827: LD_INT 6
2829: PUSH
2830: FOR_TO
2831: IFFALSE 2917
// begin uc_side = 3 ;
2833: LD_ADDR_OWVAR 20
2837: PUSH
2838: LD_INT 3
2840: ST_TO_ADDR
// uc_nation = 3 ;
2841: LD_ADDR_OWVAR 21
2845: PUSH
2846: LD_INT 3
2848: ST_TO_ADDR
// hc_gallery =  ;
2849: LD_ADDR_OWVAR 33
2853: PUSH
2854: LD_STRING 
2856: ST_TO_ADDR
// hc_name =  ;
2857: LD_ADDR_OWVAR 26
2861: PUSH
2862: LD_STRING 
2864: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2865: LD_INT 0
2867: PPUSH
2868: LD_INT 2
2870: PPUSH
2871: LD_EXP 36
2875: PPUSH
2876: LD_EXP 37
2880: PPUSH
2881: CALL_OW 12
2885: PPUSH
2886: CALL_OW 380
// un = CreateHuman ;
2890: LD_ADDR_VAR 0 3
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2900: LD_VAR 0 3
2904: PPUSH
2905: LD_INT 3
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 49
// end ;
2915: GO 2830
2917: POP
2918: POP
// for i = 1 to 6 do
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: DOUBLE
2925: LD_INT 1
2927: DEC
2928: ST_TO_ADDR
2929: LD_INT 6
2931: PUSH
2932: FOR_TO
2933: IFFALSE 3019
// begin uc_side = 3 ;
2935: LD_ADDR_OWVAR 20
2939: PUSH
2940: LD_INT 3
2942: ST_TO_ADDR
// uc_nation = 3 ;
2943: LD_ADDR_OWVAR 21
2947: PUSH
2948: LD_INT 3
2950: ST_TO_ADDR
// hc_gallery =  ;
2951: LD_ADDR_OWVAR 33
2955: PUSH
2956: LD_STRING 
2958: ST_TO_ADDR
// hc_name =  ;
2959: LD_ADDR_OWVAR 26
2963: PUSH
2964: LD_STRING 
2966: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2967: LD_INT 0
2969: PPUSH
2970: LD_INT 3
2972: PPUSH
2973: LD_EXP 36
2977: PPUSH
2978: LD_EXP 37
2982: PPUSH
2983: CALL_OW 12
2987: PPUSH
2988: CALL_OW 380
// un = CreateHuman ;
2992: LD_ADDR_VAR 0 3
2996: PUSH
2997: CALL_OW 44
3001: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3002: LD_VAR 0 3
3006: PPUSH
3007: LD_INT 3
3009: PPUSH
3010: LD_INT 0
3012: PPUSH
3013: CALL_OW 49
// end ;
3017: GO 2932
3019: POP
3020: POP
// for i = 1 to 4 do
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: DOUBLE
3027: LD_INT 1
3029: DEC
3030: ST_TO_ADDR
3031: LD_INT 4
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3121
// begin uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// uc_nation = 3 ;
3045: LD_ADDR_OWVAR 21
3049: PUSH
3050: LD_INT 3
3052: ST_TO_ADDR
// hc_gallery =  ;
3053: LD_ADDR_OWVAR 33
3057: PUSH
3058: LD_STRING 
3060: ST_TO_ADDR
// hc_name =  ;
3061: LD_ADDR_OWVAR 26
3065: PUSH
3066: LD_STRING 
3068: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3069: LD_INT 0
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_EXP 36
3079: PPUSH
3080: LD_EXP 37
3084: PPUSH
3085: CALL_OW 12
3089: PPUSH
3090: CALL_OW 380
// un = CreateHuman ;
3094: LD_ADDR_VAR 0 3
3098: PUSH
3099: CALL_OW 44
3103: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3104: LD_VAR 0 3
3108: PPUSH
3109: LD_INT 3
3111: PPUSH
3112: LD_INT 0
3114: PPUSH
3115: CALL_OW 49
// end ;
3119: GO 3034
3121: POP
3122: POP
// end ; end_of_file
3123: LD_VAR 0 1
3127: RET
// export function PrepareArabianCommander ; begin
3128: LD_INT 0
3130: PPUSH
// uc_side = 2 ;
3131: LD_ADDR_OWVAR 20
3135: PUSH
3136: LD_INT 2
3138: ST_TO_ADDR
// uc_nation = 2 ;
3139: LD_ADDR_OWVAR 21
3143: PUSH
3144: LD_INT 2
3146: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3147: LD_ADDR_EXP 26
3151: PUSH
3152: LD_STRING Dietrich
3154: PPUSH
3155: CALL_OW 25
3159: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3160: LD_EXP 26
3164: PPUSH
3165: LD_INT 4
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 49
// end ;
3175: LD_VAR 0 1
3179: RET
// export function PrepareArabian ; var i , un , veh ; begin
3180: LD_INT 0
3182: PPUSH
3183: PPUSH
3184: PPUSH
3185: PPUSH
// uc_side := 2 ;
3186: LD_ADDR_OWVAR 20
3190: PUSH
3191: LD_INT 2
3193: ST_TO_ADDR
// uc_nation := 2 ;
3194: LD_ADDR_OWVAR 21
3198: PUSH
3199: LD_INT 2
3201: ST_TO_ADDR
// if not Ahmed then
3202: LD_EXP 27
3206: NOT
3207: IFFALSE 3275
// begin InitHc ;
3209: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 1
3218: PPUSH
3219: LD_EXP 36
3223: PPUSH
3224: LD_EXP 37
3228: PUSH
3229: LD_INT 1
3231: PLUS
3232: PPUSH
3233: CALL_OW 12
3237: PPUSH
3238: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3242: LD_ADDR_OWVAR 26
3246: PUSH
3247: LD_STRING Ahmed Abbasid
3249: ST_TO_ADDR
// Ahmed := CreateHuman ;
3250: LD_ADDR_EXP 27
3254: PUSH
3255: CALL_OW 44
3259: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3260: LD_EXP 27
3264: PPUSH
3265: LD_INT 4
3267: PPUSH
3268: LD_INT 0
3270: PPUSH
3271: CALL_OW 49
// end ; for i = 1 to 3 do
3275: LD_ADDR_VAR 0 2
3279: PUSH
3280: DOUBLE
3281: LD_INT 1
3283: DEC
3284: ST_TO_ADDR
3285: LD_INT 3
3287: PUSH
3288: FOR_TO
3289: IFFALSE 3375
// begin uc_side = 2 ;
3291: LD_ADDR_OWVAR 20
3295: PUSH
3296: LD_INT 2
3298: ST_TO_ADDR
// uc_nation = 2 ;
3299: LD_ADDR_OWVAR 21
3303: PUSH
3304: LD_INT 2
3306: ST_TO_ADDR
// hc_gallery =  ;
3307: LD_ADDR_OWVAR 33
3311: PUSH
3312: LD_STRING 
3314: ST_TO_ADDR
// hc_name =  ;
3315: LD_ADDR_OWVAR 26
3319: PUSH
3320: LD_STRING 
3322: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3323: LD_INT 0
3325: PPUSH
3326: LD_INT 1
3328: PPUSH
3329: LD_EXP 36
3333: PPUSH
3334: LD_EXP 37
3338: PPUSH
3339: CALL_OW 12
3343: PPUSH
3344: CALL_OW 380
// un = CreateHuman ;
3348: LD_ADDR_VAR 0 3
3352: PUSH
3353: CALL_OW 44
3357: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3358: LD_VAR 0 3
3362: PPUSH
3363: LD_INT 4
3365: PPUSH
3366: LD_INT 0
3368: PPUSH
3369: CALL_OW 49
// end ;
3373: GO 3288
3375: POP
3376: POP
// for i = 1 to 6 do
3377: LD_ADDR_VAR 0 2
3381: PUSH
3382: DOUBLE
3383: LD_INT 1
3385: DEC
3386: ST_TO_ADDR
3387: LD_INT 6
3389: PUSH
3390: FOR_TO
3391: IFFALSE 3477
// begin uc_side = 2 ;
3393: LD_ADDR_OWVAR 20
3397: PUSH
3398: LD_INT 2
3400: ST_TO_ADDR
// uc_nation = 2 ;
3401: LD_ADDR_OWVAR 21
3405: PUSH
3406: LD_INT 2
3408: ST_TO_ADDR
// hc_gallery =  ;
3409: LD_ADDR_OWVAR 33
3413: PUSH
3414: LD_STRING 
3416: ST_TO_ADDR
// hc_name =  ;
3417: LD_ADDR_OWVAR 26
3421: PUSH
3422: LD_STRING 
3424: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3425: LD_INT 0
3427: PPUSH
3428: LD_INT 2
3430: PPUSH
3431: LD_EXP 36
3435: PPUSH
3436: LD_EXP 37
3440: PPUSH
3441: CALL_OW 12
3445: PPUSH
3446: CALL_OW 380
// un = CreateHuman ;
3450: LD_ADDR_VAR 0 3
3454: PUSH
3455: CALL_OW 44
3459: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3460: LD_VAR 0 3
3464: PPUSH
3465: LD_INT 4
3467: PPUSH
3468: LD_INT 0
3470: PPUSH
3471: CALL_OW 49
// end ;
3475: GO 3390
3477: POP
3478: POP
// for i = 1 to 6 do
3479: LD_ADDR_VAR 0 2
3483: PUSH
3484: DOUBLE
3485: LD_INT 1
3487: DEC
3488: ST_TO_ADDR
3489: LD_INT 6
3491: PUSH
3492: FOR_TO
3493: IFFALSE 3579
// begin uc_side = 2 ;
3495: LD_ADDR_OWVAR 20
3499: PUSH
3500: LD_INT 2
3502: ST_TO_ADDR
// uc_nation = 2 ;
3503: LD_ADDR_OWVAR 21
3507: PUSH
3508: LD_INT 2
3510: ST_TO_ADDR
// hc_gallery =  ;
3511: LD_ADDR_OWVAR 33
3515: PUSH
3516: LD_STRING 
3518: ST_TO_ADDR
// hc_name =  ;
3519: LD_ADDR_OWVAR 26
3523: PUSH
3524: LD_STRING 
3526: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3527: LD_INT 0
3529: PPUSH
3530: LD_INT 1
3532: PPUSH
3533: LD_EXP 36
3537: PPUSH
3538: LD_EXP 37
3542: PPUSH
3543: CALL_OW 12
3547: PPUSH
3548: CALL_OW 380
// un = CreateHuman ;
3552: LD_ADDR_VAR 0 3
3556: PUSH
3557: CALL_OW 44
3561: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3562: LD_VAR 0 3
3566: PPUSH
3567: LD_INT 4
3569: PPUSH
3570: LD_INT 0
3572: PPUSH
3573: CALL_OW 49
// end ;
3577: GO 3492
3579: POP
3580: POP
// for i = 1 to 4 do
3581: LD_ADDR_VAR 0 2
3585: PUSH
3586: DOUBLE
3587: LD_INT 1
3589: DEC
3590: ST_TO_ADDR
3591: LD_INT 4
3593: PUSH
3594: FOR_TO
3595: IFFALSE 3681
// begin uc_side = 2 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 2
3604: ST_TO_ADDR
// uc_nation = 2 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 2
3612: ST_TO_ADDR
// hc_gallery =  ;
3613: LD_ADDR_OWVAR 33
3617: PUSH
3618: LD_STRING 
3620: ST_TO_ADDR
// hc_name =  ;
3621: LD_ADDR_OWVAR 26
3625: PUSH
3626: LD_STRING 
3628: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3629: LD_INT 0
3631: PPUSH
3632: LD_INT 4
3634: PPUSH
3635: LD_EXP 36
3639: PPUSH
3640: LD_EXP 37
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: CALL_OW 380
// un = CreateHuman ;
3654: LD_ADDR_VAR 0 3
3658: PUSH
3659: CALL_OW 44
3663: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3664: LD_VAR 0 3
3668: PPUSH
3669: LD_INT 4
3671: PPUSH
3672: LD_INT 0
3674: PPUSH
3675: CALL_OW 49
// end ;
3679: GO 3594
3681: POP
3682: POP
// for i = 1 to 2 do
3683: LD_ADDR_VAR 0 2
3687: PUSH
3688: DOUBLE
3689: LD_INT 1
3691: DEC
3692: ST_TO_ADDR
3693: LD_INT 2
3695: PUSH
3696: FOR_TO
3697: IFFALSE 3827
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3699: LD_ADDR_VAR 0 4
3703: PUSH
3704: LD_INT 22
3706: PUSH
3707: LD_INT 2
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: PUSH
3714: LD_INT 21
3716: PUSH
3717: LD_INT 2
3719: PUSH
3720: EMPTY
3721: LIST
3722: LIST
3723: PUSH
3724: LD_INT 58
3726: PUSH
3727: EMPTY
3728: LIST
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: LIST
3734: PPUSH
3735: CALL_OW 69
3739: ST_TO_ADDR
// uc_side = 2 ;
3740: LD_ADDR_OWVAR 20
3744: PUSH
3745: LD_INT 2
3747: ST_TO_ADDR
// uc_nation = 2 ;
3748: LD_ADDR_OWVAR 21
3752: PUSH
3753: LD_INT 2
3755: ST_TO_ADDR
// hc_gallery =  ;
3756: LD_ADDR_OWVAR 33
3760: PUSH
3761: LD_STRING 
3763: ST_TO_ADDR
// hc_name =  ;
3764: LD_ADDR_OWVAR 26
3768: PUSH
3769: LD_STRING 
3771: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3772: LD_INT 0
3774: PPUSH
3775: LD_INT 3
3777: PPUSH
3778: LD_EXP 36
3782: PPUSH
3783: LD_EXP 37
3787: PPUSH
3788: CALL_OW 12
3792: PPUSH
3793: CALL_OW 380
// un = CreateHuman ;
3797: LD_ADDR_VAR 0 3
3801: PUSH
3802: CALL_OW 44
3806: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3807: LD_VAR 0 3
3811: PPUSH
3812: LD_VAR 0 4
3816: PUSH
3817: LD_INT 1
3819: ARRAY
3820: PPUSH
3821: CALL_OW 52
// end ;
3825: GO 3696
3827: POP
3828: POP
// end ;
3829: LD_VAR 0 1
3833: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3834: LD_INT 0
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
3841: PPUSH
// for i := 1 to 2 do
3842: LD_ADDR_VAR 0 2
3846: PUSH
3847: DOUBLE
3848: LD_INT 1
3850: DEC
3851: ST_TO_ADDR
3852: LD_INT 2
3854: PUSH
3855: FOR_TO
3856: IFFALSE 3982
// begin uc_side = 5 ;
3858: LD_ADDR_OWVAR 20
3862: PUSH
3863: LD_INT 5
3865: ST_TO_ADDR
// uc_nation = 2 ;
3866: LD_ADDR_OWVAR 21
3870: PUSH
3871: LD_INT 2
3873: ST_TO_ADDR
// vc_chassis := 31 ;
3874: LD_ADDR_OWVAR 37
3878: PUSH
3879: LD_INT 31
3881: ST_TO_ADDR
// vc_control := control_rider ;
3882: LD_ADDR_OWVAR 38
3886: PUSH
3887: LD_INT 4
3889: ST_TO_ADDR
// animal := CreateVehicle ;
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: CALL_OW 45
3899: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3900: LD_VAR 0 3
3904: PPUSH
3905: LD_INT 7
3907: PPUSH
3908: LD_INT 0
3910: PPUSH
3911: CALL_OW 49
// hc_gallery =  ;
3915: LD_ADDR_OWVAR 33
3919: PUSH
3920: LD_STRING 
3922: ST_TO_ADDR
// hc_name =  ;
3923: LD_ADDR_OWVAR 26
3927: PUSH
3928: LD_STRING 
3930: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3931: LD_INT 0
3933: PPUSH
3934: LD_INT 11
3936: PPUSH
3937: LD_EXP 36
3941: PPUSH
3942: LD_EXP 37
3946: PPUSH
3947: CALL_OW 12
3951: PPUSH
3952: CALL_OW 380
// un = CreateHuman ;
3956: LD_ADDR_VAR 0 4
3960: PUSH
3961: CALL_OW 44
3965: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3966: LD_VAR 0 4
3970: PPUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: CALL_OW 52
// end ;
3980: GO 3855
3982: POP
3983: POP
// repeat wait ( 0 0$1 ) ;
3984: LD_INT 35
3986: PPUSH
3987: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3991: LD_ADDR_VAR 0 5
3995: PUSH
3996: LD_INT 22
3998: PUSH
3999: LD_INT 1
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: PPUSH
4006: CALL_OW 69
4010: PPUSH
4011: LD_VAR 0 2
4015: PPUSH
4016: CALL_OW 74
4020: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4021: LD_ADDR_VAR 0 6
4025: PUSH
4026: LD_INT 22
4028: PUSH
4029: LD_INT 1
4031: PUSH
4032: EMPTY
4033: LIST
4034: LIST
4035: PUSH
4036: LD_INT 2
4038: PUSH
4039: LD_INT 59
4041: PUSH
4042: EMPTY
4043: LIST
4044: PUSH
4045: LD_INT 21
4047: PUSH
4048: LD_INT 1
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PUSH
4055: LD_INT 21
4057: PUSH
4058: LD_INT 2
4060: PUSH
4061: EMPTY
4062: LIST
4063: LIST
4064: PUSH
4065: EMPTY
4066: LIST
4067: LIST
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: EMPTY
4076: LIST
4077: PPUSH
4078: CALL_OW 69
4082: PPUSH
4083: LD_VAR 0 2
4087: PPUSH
4088: CALL_OW 74
4092: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: LD_INT 22
4100: PUSH
4101: LD_INT 5
4103: PUSH
4104: EMPTY
4105: LIST
4106: LIST
4107: PUSH
4108: LD_INT 25
4110: PUSH
4111: LD_INT 11
4113: PUSH
4114: EMPTY
4115: LIST
4116: LIST
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PPUSH
4122: CALL_OW 69
4126: PUSH
4127: FOR_IN
4128: IFFALSE 4198
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4130: LD_VAR 0 2
4134: PPUSH
4135: LD_VAR 0 5
4139: PPUSH
4140: CALL_OW 296
4144: PUSH
4145: LD_INT 8
4147: PLUS
4148: PUSH
4149: LD_VAR 0 2
4153: PPUSH
4154: LD_VAR 0 6
4158: PPUSH
4159: CALL_OW 296
4163: LESS
4164: IFFALSE 4182
// ComAttackUnit ( i , target1 ) else
4166: LD_VAR 0 2
4170: PPUSH
4171: LD_VAR 0 5
4175: PPUSH
4176: CALL_OW 115
4180: GO 4196
// ComAttackUnit ( i , target2 ) ;
4182: LD_VAR 0 2
4186: PPUSH
4187: LD_VAR 0 6
4191: PPUSH
4192: CALL_OW 115
// end ;
4196: GO 4127
4198: POP
4199: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4200: LD_INT 22
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: EMPTY
4207: LIST
4208: LIST
4209: PUSH
4210: LD_INT 25
4212: PUSH
4213: LD_INT 11
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PPUSH
4224: CALL_OW 69
4228: PUSH
4229: LD_INT 0
4231: EQUAL
4232: PUSH
4233: LD_INT 22
4235: PUSH
4236: LD_INT 1
4238: PUSH
4239: EMPTY
4240: LIST
4241: LIST
4242: PPUSH
4243: CALL_OW 69
4247: PUSH
4248: LD_INT 0
4250: EQUAL
4251: OR
4252: IFFALSE 3984
// end ; end_of_file
4254: LD_VAR 0 1
4258: RET
// every 1 do
4259: GO 4261
4261: DISABLE
// begin InGameOn ;
4262: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4266: LD_INT 1
4268: PPUSH
4269: LD_INT 19
4271: PPUSH
4272: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4276: LD_EXP 11
4280: PPUSH
4281: CALL_OW 87
// if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) then
4285: LD_INT 22
4287: PUSH
4288: LD_INT 4
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 25
4297: PUSH
4298: LD_INT 2
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: IFFALSE 4361
// begin repeat wait ( 0 0$1 ) ;
4315: LD_INT 35
4317: PPUSH
4318: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 4 ] , [ f_btype , b_depot ] ] ) ;
4322: LD_INT 22
4324: PUSH
4325: LD_INT 4
4327: PUSH
4328: EMPTY
4329: LIST
4330: LIST
4331: PUSH
4332: LD_INT 30
4334: PUSH
4335: LD_INT 0
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: PPUSH
4346: CALL_OW 69
4350: IFFALSE 4315
// Wait ( 0 0$1 ) ;
4352: LD_INT 35
4354: PPUSH
4355: CALL_OW 67
// end else
4359: GO 4368
// Wait ( 0 0$3 ) ;
4361: LD_INT 105
4363: PPUSH
4364: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4368: LD_EXP 1
4372: PPUSH
4373: CALL_OW 310
4377: PPUSH
4378: CALL_OW 85
// Wait ( 0 0$1 ) ;
4382: LD_INT 35
4384: PPUSH
4385: CALL_OW 67
// if IsOk ( Gary ) then
4389: LD_EXP 10
4393: PPUSH
4394: CALL_OW 302
4398: IFFALSE 4436
// begin Say ( Gary , D2-Gary-1 ) ;
4400: LD_EXP 10
4404: PPUSH
4405: LD_STRING D2-Gary-1
4407: PPUSH
4408: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4412: LD_EXP 1
4416: PPUSH
4417: LD_STRING D2-JMM-1
4419: PPUSH
4420: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4424: LD_EXP 10
4428: PPUSH
4429: LD_STRING D2-Gary-2
4431: PPUSH
4432: CALL_OW 88
// end ; InGameOff ;
4436: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4440: LD_STRING M1
4442: PPUSH
4443: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4447: LD_INT 38
4449: PPUSH
4450: LD_INT 1
4452: PPUSH
4453: LD_INT 100
4455: PPUSH
4456: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4460: LD_INT 47
4462: PPUSH
4463: LD_INT 1
4465: PPUSH
4466: LD_INT 50
4468: PPUSH
4469: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4473: LD_INT 47
4475: PPUSH
4476: LD_INT 3
4478: PPUSH
4479: LD_INT 50
4481: PPUSH
4482: CALL_OW 291
// SaveForQuickRestart ;
4486: CALL_OW 22
// end ;
4490: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4491: LD_EXP 1
4495: PPUSH
4496: LD_EXP 11
4500: PPUSH
4501: CALL_OW 296
4505: PUSH
4506: LD_INT 15
4508: LESS
4509: IFFALSE 4975
4511: GO 4513
4513: DISABLE
// begin InGameOn ;
4514: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4518: LD_EXP 1
4522: PPUSH
4523: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4527: LD_EXP 1
4531: PPUSH
4532: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4536: LD_EXP 1
4540: PPUSH
4541: LD_EXP 11
4545: PPUSH
4546: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4550: LD_INT 35
4552: PPUSH
4553: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4557: LD_EXP 11
4561: PUSH
4562: LD_EXP 13
4566: PUSH
4567: LD_EXP 12
4571: PUSH
4572: LD_EXP 14
4576: PUSH
4577: LD_EXP 8
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: PPUSH
4589: LD_EXP 1
4593: PPUSH
4594: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4598: LD_EXP 1
4602: PPUSH
4603: LD_EXP 11
4607: PPUSH
4608: CALL_OW 296
4612: PUSH
4613: LD_INT 5
4615: LESS
4616: IFFALSE 4550
// ComTurnUnit ( JMM , Simms ) ;
4618: LD_EXP 1
4622: PPUSH
4623: LD_EXP 11
4627: PPUSH
4628: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4632: LD_EXP 11
4636: PUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_EXP 12
4646: PUSH
4647: LD_EXP 14
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: LD_EXP 1
4662: PPUSH
4663: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4667: LD_EXP 1
4671: PUSH
4672: LD_EXP 11
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: PPUSH
4681: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4685: LD_EXP 11
4689: PPUSH
4690: LD_STRING D2a-Sim-1
4692: PPUSH
4693: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4697: LD_EXP 1
4701: PPUSH
4702: LD_STRING D2a-JMM-1
4704: PPUSH
4705: CALL_OW 88
// if IsOk ( Joan ) then
4709: LD_EXP 13
4713: PPUSH
4714: CALL_OW 302
4718: IFFALSE 4770
// begin ComTurnUnit ( JMM , Joan ) ;
4720: LD_EXP 1
4724: PPUSH
4725: LD_EXP 13
4729: PPUSH
4730: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4734: LD_EXP 13
4738: PPUSH
4739: LD_STRING D2b-Joan-1
4741: PPUSH
4742: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4746: LD_EXP 1
4750: PPUSH
4751: LD_STRING D2b-JMM-1
4753: PPUSH
4754: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4758: LD_EXP 13
4762: PPUSH
4763: LD_STRING D2b-Joan-2
4765: PPUSH
4766: CALL_OW 88
// end ; if IsOk ( Denis ) then
4770: LD_EXP 12
4774: PPUSH
4775: CALL_OW 302
4779: IFFALSE 4807
// begin ComTurnUnit ( JMM , Denis ) ;
4781: LD_EXP 1
4785: PPUSH
4786: LD_EXP 12
4790: PPUSH
4791: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4795: LD_EXP 12
4799: PPUSH
4800: LD_STRING D2c-Den-1
4802: PPUSH
4803: CALL_OW 88
// end ; if IsOK ( Kikuchi ) then
4807: LD_EXP 8
4811: PPUSH
4812: CALL_OW 302
4816: IFFALSE 4885
// begin repeat wait ( 0 0$1 ) ;
4818: LD_INT 35
4820: PPUSH
4821: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4825: LD_EXP 8
4829: PPUSH
4830: LD_EXP 1
4834: PPUSH
4835: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4839: LD_EXP 1
4843: PPUSH
4844: LD_EXP 8
4848: PPUSH
4849: CALL_OW 296
4853: PUSH
4854: LD_INT 5
4856: LESS
4857: IFFALSE 4818
// ComTurnUnit ( JMM , Kikuchi ) ;
4859: LD_EXP 1
4863: PPUSH
4864: LD_EXP 8
4868: PPUSH
4869: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4873: LD_EXP 8
4877: PPUSH
4878: LD_STRING D3b-Yam-1
4880: PPUSH
4881: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4885: LD_EXP 14
4889: PPUSH
4890: CALL_OW 302
4894: IFFALSE 4934
// begin ComTurnUnit ( JMM , Khatam ) ;
4896: LD_EXP 1
4900: PPUSH
4901: LD_EXP 14
4905: PPUSH
4906: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4910: LD_EXP 1
4914: PPUSH
4915: LD_STRING D2c-JMM-1
4917: PPUSH
4918: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4922: LD_EXP 14
4926: PPUSH
4927: LD_STRING D2c-Khat-1
4929: PPUSH
4930: CALL_OW 88
// end ; InGameOff ;
4934: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4938: LD_INT 22
4940: PUSH
4941: LD_INT 4
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: PPUSH
4948: CALL_OW 69
4952: PPUSH
4953: LD_INT 1
4955: PPUSH
4956: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4960: LD_STRING M1a
4962: PPUSH
4963: CALL_OW 337
// joinEpsilon = 1 ;
4967: LD_ADDR_EXP 29
4971: PUSH
4972: LD_INT 1
4974: ST_TO_ADDR
// end ;
4975: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4976: LD_INT 38
4978: PPUSH
4979: LD_INT 1
4981: PPUSH
4982: CALL_OW 289
4986: PUSH
4987: LD_INT 0
4989: EQUAL
4990: PUSH
4991: LD_INT 47
4993: PPUSH
4994: LD_INT 1
4996: PPUSH
4997: CALL_OW 289
5001: PUSH
5002: LD_INT 0
5004: EQUAL
5005: AND
5006: PUSH
5007: LD_INT 47
5009: PPUSH
5010: LD_INT 2
5012: PPUSH
5013: CALL_OW 289
5017: PUSH
5018: LD_INT 0
5020: EQUAL
5021: AND
5022: IFFALSE 5047
5024: GO 5026
5026: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
5027: LD_INT 38
5029: PUSH
5030: LD_INT 47
5032: PUSH
5033: EMPTY
5034: LIST
5035: LIST
5036: PPUSH
5037: LD_INT 62
5039: PPUSH
5040: LD_INT 6
5042: PPUSH
5043: CALL_OW 111
5047: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5048: LD_EXP 61
5052: PUSH
5053: LD_INT 1
5055: EQUAL
5056: IFFALSE 6188
5058: GO 5060
5060: DISABLE
5061: LD_INT 0
5063: PPUSH
5064: PPUSH
5065: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5066: LD_ADDR_VAR 0 1
5070: PUSH
5071: LD_INT 22
5073: PUSH
5074: LD_INT 1
5076: PUSH
5077: EMPTY
5078: LIST
5079: LIST
5080: PUSH
5081: LD_INT 25
5083: PUSH
5084: LD_INT 4
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: PUSH
5091: LD_INT 26
5093: PUSH
5094: LD_INT 1
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: LIST
5105: PPUSH
5106: CALL_OW 69
5110: PUSH
5111: LD_EXP 1
5115: PUSH
5116: LD_EXP 2
5120: PUSH
5121: LD_EXP 3
5125: PUSH
5126: LD_EXP 4
5130: PUSH
5131: LD_EXP 5
5135: PUSH
5136: LD_EXP 6
5140: PUSH
5141: LD_EXP 7
5145: PUSH
5146: LD_EXP 8
5150: PUSH
5151: LD_EXP 9
5155: PUSH
5156: LD_EXP 10
5160: PUSH
5161: LD_EXP 11
5165: PUSH
5166: LD_EXP 12
5170: PUSH
5171: LD_EXP 13
5175: PUSH
5176: LD_EXP 14
5180: PUSH
5181: LD_EXP 15
5185: PUSH
5186: LD_EXP 16
5190: PUSH
5191: LD_EXP 17
5195: PUSH
5196: LD_EXP 18
5200: PUSH
5201: LD_EXP 19
5205: PUSH
5206: LD_EXP 24
5210: PUSH
5211: EMPTY
5212: LIST
5213: LIST
5214: LIST
5215: LIST
5216: LIST
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: LIST
5223: LIST
5224: LIST
5225: LIST
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: LIST
5232: DIFF
5233: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5234: LD_ADDR_VAR 0 2
5238: PUSH
5239: LD_INT 22
5241: PUSH
5242: LD_INT 1
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: PUSH
5249: LD_INT 26
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 2
5261: PUSH
5262: LD_INT 25
5264: PUSH
5265: LD_INT 1
5267: PUSH
5268: EMPTY
5269: LIST
5270: LIST
5271: PUSH
5272: LD_INT 25
5274: PUSH
5275: LD_INT 2
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: PUSH
5282: LD_INT 25
5284: PUSH
5285: LD_INT 3
5287: PUSH
5288: EMPTY
5289: LIST
5290: LIST
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: LIST
5296: LIST
5297: PUSH
5298: EMPTY
5299: LIST
5300: LIST
5301: LIST
5302: PPUSH
5303: CALL_OW 69
5307: PUSH
5308: LD_EXP 1
5312: PUSH
5313: LD_EXP 2
5317: PUSH
5318: LD_EXP 3
5322: PUSH
5323: LD_EXP 4
5327: PUSH
5328: LD_EXP 5
5332: PUSH
5333: LD_EXP 6
5337: PUSH
5338: LD_EXP 7
5342: PUSH
5343: LD_EXP 8
5347: PUSH
5348: LD_EXP 9
5352: PUSH
5353: LD_EXP 10
5357: PUSH
5358: LD_EXP 11
5362: PUSH
5363: LD_EXP 12
5367: PUSH
5368: LD_EXP 13
5372: PUSH
5373: LD_EXP 14
5377: PUSH
5378: LD_EXP 15
5382: PUSH
5383: LD_EXP 16
5387: PUSH
5388: LD_EXP 17
5392: PUSH
5393: LD_EXP 18
5397: PUSH
5398: LD_EXP 19
5402: PUSH
5403: LD_EXP 24
5407: PUSH
5408: EMPTY
5409: LIST
5410: LIST
5411: LIST
5412: LIST
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: LIST
5419: LIST
5420: LIST
5421: LIST
5422: LIST
5423: LIST
5424: LIST
5425: LIST
5426: LIST
5427: LIST
5428: LIST
5429: DIFF
5430: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5431: LD_EXP 10
5435: PUSH
5436: LD_VAR 0 2
5440: OR
5441: PUSH
5442: LD_EXP 17
5446: PUSH
5447: LD_VAR 0 1
5451: OR
5452: AND
5453: IFFALSE 5672
// begin DialogueOn ;
5455: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5459: LD_EXP 17
5463: PPUSH
5464: CALL_OW 302
5468: IFFALSE 5484
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5470: LD_EXP 17
5474: PPUSH
5475: LD_STRING D3-Sci1-1
5477: PPUSH
5478: CALL_OW 88
5482: GO 5496
// Say ( tmp1 , D3-Sci1-1 ) ;
5484: LD_VAR 0 1
5488: PPUSH
5489: LD_STRING D3-Sci1-1
5491: PPUSH
5492: CALL_OW 88
// if IsOk ( Gary ) then
5496: LD_EXP 10
5500: PPUSH
5501: CALL_OW 302
5505: IFFALSE 5521
// Say ( Gary , D3-Gary-1 ) else
5507: LD_EXP 10
5511: PPUSH
5512: LD_STRING D3-Gary-1
5514: PPUSH
5515: CALL_OW 88
5519: GO 5533
// Say ( tmp2 , D3-Gary-1 ) ;
5521: LD_VAR 0 2
5525: PPUSH
5526: LD_STRING D3-Gary-1
5528: PPUSH
5529: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5533: LD_EXP 17
5537: PPUSH
5538: CALL_OW 302
5542: IFFALSE 5558
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5544: LD_EXP 17
5548: PPUSH
5549: LD_STRING D3-Sci1-2
5551: PPUSH
5552: CALL_OW 88
5556: GO 5570
// Say ( tmp1 , D3-Sci1-2 ) ;
5558: LD_VAR 0 1
5562: PPUSH
5563: LD_STRING D3-Sci1-2
5565: PPUSH
5566: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5570: LD_EXP 1
5574: PPUSH
5575: LD_STRING D3-JMM-2
5577: PPUSH
5578: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5582: LD_EXP 17
5586: PPUSH
5587: CALL_OW 302
5591: IFFALSE 5607
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5593: LD_EXP 17
5597: PPUSH
5598: LD_STRING D3-Sci1-3
5600: PPUSH
5601: CALL_OW 88
5605: GO 5619
// Say ( tmp1 , D3-Sci1-3 ) ;
5607: LD_VAR 0 1
5611: PPUSH
5612: LD_STRING D3-Sci1-3
5614: PPUSH
5615: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_STRING D3-JMM-3
5626: PPUSH
5627: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5631: LD_EXP 17
5635: PPUSH
5636: CALL_OW 302
5640: IFFALSE 5656
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5642: LD_EXP 17
5646: PPUSH
5647: LD_STRING D3-Sci1-4
5649: PPUSH
5650: CALL_OW 88
5654: GO 5668
// Say ( tmp1 , D3-Sci1-4 ) ;
5656: LD_VAR 0 1
5660: PPUSH
5661: LD_STRING D3-Sci1-4
5663: PPUSH
5664: CALL_OW 88
// DialogueOff ;
5668: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5672: LD_INT 12
5674: PPUSH
5675: LD_INT 1
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5685: LD_INT 32
5687: PPUSH
5688: LD_INT 1
5690: PPUSH
5691: LD_INT 1
5693: PPUSH
5694: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5698: LD_INT 12
5700: PPUSH
5701: LD_INT 1
5703: PPUSH
5704: LD_INT 1
5706: PPUSH
5707: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5711: LD_INT 33
5713: PPUSH
5714: LD_INT 1
5716: PPUSH
5717: LD_INT 1
5719: PPUSH
5720: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5724: LD_STRING M2
5726: PPUSH
5727: CALL_OW 337
// wait ( 3 3$0 ) ;
5731: LD_INT 6300
5733: PPUSH
5734: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5738: LD_INT 35
5740: PPUSH
5741: CALL_OW 67
// until not InBattle ( 1 ) ;
5745: LD_INT 1
5747: PPUSH
5748: CALL_OW 463
5752: NOT
5753: IFFALSE 5738
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5755: LD_EXP 11
5759: PPUSH
5760: CALL_OW 302
5764: PUSH
5765: LD_EXP 17
5769: PPUSH
5770: CALL_OW 302
5774: AND
5775: IFFALSE 5944
// begin DialogueOn ;
5777: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5781: LD_EXP 11
5785: PPUSH
5786: LD_STRING D3a-Sim-1
5788: PPUSH
5789: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5793: LD_EXP 17
5797: PPUSH
5798: LD_STRING D3a-Sci1-1
5800: PPUSH
5801: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5805: LD_EXP 11
5809: PPUSH
5810: LD_STRING D3a-Sim-2
5812: PPUSH
5813: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5817: LD_EXP 17
5821: PPUSH
5822: LD_STRING D3a-Sci1-2
5824: PPUSH
5825: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5829: LD_EXP 11
5833: PPUSH
5834: LD_STRING D3a-Sim-3
5836: PPUSH
5837: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5841: LD_EXP 17
5845: PPUSH
5846: LD_STRING D3a-Sci1-3
5848: PPUSH
5849: CALL_OW 88
// if IsOK ( Joan ) then
5853: LD_EXP 13
5857: PPUSH
5858: CALL_OW 302
5862: IFFALSE 5878
// Say ( Simms , D3a-Sim-4 ) else
5864: LD_EXP 11
5868: PPUSH
5869: LD_STRING D3a-Sim-4
5871: PPUSH
5872: CALL_OW 88
5876: GO 5890
// Say ( Simms , D3a-Sim-4a ) ;
5878: LD_EXP 11
5882: PPUSH
5883: LD_STRING D3a-Sim-4a
5885: PPUSH
5886: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5890: LD_EXP 17
5894: PPUSH
5895: LD_STRING D3a-Sci1-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5902: LD_EXP 11
5906: PPUSH
5907: LD_STRING D3a-Sim-5
5909: PPUSH
5910: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5914: LD_EXP 17
5918: PPUSH
5919: LD_STRING D3a-Sci1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5926: LD_EXP 11
5930: PPUSH
5931: LD_STRING D3a-Sim-6
5933: PPUSH
5934: CALL_OW 88
// DialogueOff ;
5938: CALL_OW 7
// end else
5942: GO 6188
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5944: LD_ADDR_VAR 0 3
5948: PUSH
5949: LD_INT 22
5951: PUSH
5952: LD_INT 1
5954: PUSH
5955: EMPTY
5956: LIST
5957: LIST
5958: PUSH
5959: LD_INT 25
5961: PUSH
5962: LD_INT 4
5964: PUSH
5965: EMPTY
5966: LIST
5967: LIST
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: PPUSH
5973: CALL_OW 69
5977: PUSH
5978: LD_EXP 11
5982: PUSH
5983: LD_EXP 14
5987: PUSH
5988: EMPTY
5989: LIST
5990: LIST
5991: DIFF
5992: ST_TO_ADDR
// if tmp3 > 0 then
5993: LD_VAR 0 3
5997: PUSH
5998: LD_INT 0
6000: GREATER
6001: IFFALSE 6188
// begin DialogueOn ;
6003: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6007: LD_EXP 11
6011: PPUSH
6012: LD_STRING D3a-Sim-1
6014: PPUSH
6015: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6019: LD_VAR 0 3
6023: PUSH
6024: LD_INT 1
6026: ARRAY
6027: PPUSH
6028: LD_STRING D3a-Sci1-1
6030: PPUSH
6031: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6035: LD_EXP 11
6039: PPUSH
6040: LD_STRING D3a-Sim-2
6042: PPUSH
6043: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6047: LD_VAR 0 3
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PPUSH
6056: LD_STRING D3a-Sci1-2
6058: PPUSH
6059: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6063: LD_EXP 11
6067: PPUSH
6068: LD_STRING D3a-Sim-3
6070: PPUSH
6071: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6075: LD_VAR 0 3
6079: PUSH
6080: LD_INT 1
6082: ARRAY
6083: PPUSH
6084: LD_STRING D3a-Sci1-3
6086: PPUSH
6087: CALL_OW 88
// if IsOK ( Joan ) then
6091: LD_EXP 13
6095: PPUSH
6096: CALL_OW 302
6100: IFFALSE 6116
// Say ( Simms , D3a-Sim-4 ) else
6102: LD_EXP 11
6106: PPUSH
6107: LD_STRING D3a-Sim-4
6109: PPUSH
6110: CALL_OW 88
6114: GO 6128
// Say ( Simms , D3a-Sim-4a ) ;
6116: LD_EXP 11
6120: PPUSH
6121: LD_STRING D3a-Sim-4a
6123: PPUSH
6124: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6128: LD_VAR 0 3
6132: PUSH
6133: LD_INT 1
6135: ARRAY
6136: PPUSH
6137: LD_STRING D3a-Sci1-4
6139: PPUSH
6140: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6144: LD_EXP 11
6148: PPUSH
6149: LD_STRING D3a-Sim-5
6151: PPUSH
6152: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6156: LD_VAR 0 3
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PPUSH
6165: LD_STRING D3a-Sci1-5
6167: PPUSH
6168: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6172: LD_EXP 11
6176: PPUSH
6177: LD_STRING D3a-Sim-6
6179: PPUSH
6180: CALL_OW 88
// DialogueOff ;
6184: CALL_OW 7
// end ; end ; end ;
6188: PPOPN 3
6190: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6191: LD_EXP 29
6195: PUSH
6196: LD_INT 1
6198: EQUAL
6199: IFFALSE 6519
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6207: LD_EXP 18
6211: PPUSH
6212: LD_STRING D4-FSol1-1
6214: PPUSH
6215: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6219: LD_STRING M3
6221: PPUSH
6222: CALL_OW 337
// PrepareRussians ;
6226: CALL 2663 0 0
// rnd = Rand ( 1 , 100 ) ;
6230: LD_ADDR_VAR 0 1
6234: PUSH
6235: LD_INT 1
6237: PPUSH
6238: LD_INT 100
6240: PPUSH
6241: CALL_OW 12
6245: ST_TO_ADDR
// if difficulty = 1 then
6246: LD_OWVAR 67
6250: PUSH
6251: LD_INT 1
6253: EQUAL
6254: IFFALSE 6337
// begin if rnd > 0 and rnd < 51 then
6256: LD_VAR 0 1
6260: PUSH
6261: LD_INT 0
6263: GREATER
6264: PUSH
6265: LD_VAR 0 1
6269: PUSH
6270: LD_INT 51
6272: LESS
6273: AND
6274: IFFALSE 6283
// BuildRussianBase ( 2 ) ;
6276: LD_INT 2
6278: PPUSH
6279: CALL 10287 0 1
// if rnd > 50 and rnd < 81 then
6283: LD_VAR 0 1
6287: PUSH
6288: LD_INT 50
6290: GREATER
6291: PUSH
6292: LD_VAR 0 1
6296: PUSH
6297: LD_INT 81
6299: LESS
6300: AND
6301: IFFALSE 6310
// BuildRussianBase ( 1 ) ;
6303: LD_INT 1
6305: PPUSH
6306: CALL 10287 0 1
// if rnd > 80 and rnd < 101 then
6310: LD_VAR 0 1
6314: PUSH
6315: LD_INT 80
6317: GREATER
6318: PUSH
6319: LD_VAR 0 1
6323: PUSH
6324: LD_INT 101
6326: LESS
6327: AND
6328: IFFALSE 6337
// BuildRussianBase ( 3 ) ;
6330: LD_INT 3
6332: PPUSH
6333: CALL 10287 0 1
// end ; if difficulty = 2 then
6337: LD_OWVAR 67
6341: PUSH
6342: LD_INT 2
6344: EQUAL
6345: IFFALSE 6428
// begin if rnd > 0 and rnd < 61 then
6347: LD_VAR 0 1
6351: PUSH
6352: LD_INT 0
6354: GREATER
6355: PUSH
6356: LD_VAR 0 1
6360: PUSH
6361: LD_INT 61
6363: LESS
6364: AND
6365: IFFALSE 6374
// BuildRussianBase ( 2 ) ;
6367: LD_INT 2
6369: PPUSH
6370: CALL 10287 0 1
// if rnd > 60 and rnd < 81 then
6374: LD_VAR 0 1
6378: PUSH
6379: LD_INT 60
6381: GREATER
6382: PUSH
6383: LD_VAR 0 1
6387: PUSH
6388: LD_INT 81
6390: LESS
6391: AND
6392: IFFALSE 6401
// BuildRussianBase ( 1 ) ;
6394: LD_INT 1
6396: PPUSH
6397: CALL 10287 0 1
// if rnd > 80 and rnd < 101 then
6401: LD_VAR 0 1
6405: PUSH
6406: LD_INT 80
6408: GREATER
6409: PUSH
6410: LD_VAR 0 1
6414: PUSH
6415: LD_INT 101
6417: LESS
6418: AND
6419: IFFALSE 6428
// BuildRussianBase ( 3 ) ;
6421: LD_INT 3
6423: PPUSH
6424: CALL 10287 0 1
// end ; if difficulty = 3 then
6428: LD_OWVAR 67
6432: PUSH
6433: LD_INT 3
6435: EQUAL
6436: IFFALSE 6519
// begin if rnd > 0 and rnd < 71 then
6438: LD_VAR 0 1
6442: PUSH
6443: LD_INT 0
6445: GREATER
6446: PUSH
6447: LD_VAR 0 1
6451: PUSH
6452: LD_INT 71
6454: LESS
6455: AND
6456: IFFALSE 6465
// BuildRussianBase ( 3 ) ;
6458: LD_INT 3
6460: PPUSH
6461: CALL 10287 0 1
// if rnd > 70 and rnd < 81 then
6465: LD_VAR 0 1
6469: PUSH
6470: LD_INT 70
6472: GREATER
6473: PUSH
6474: LD_VAR 0 1
6478: PUSH
6479: LD_INT 81
6481: LESS
6482: AND
6483: IFFALSE 6492
// BuildRussianBase ( 2 ) ;
6485: LD_INT 2
6487: PPUSH
6488: CALL 10287 0 1
// if rnd > 80 and rnd < 101 then
6492: LD_VAR 0 1
6496: PUSH
6497: LD_INT 80
6499: GREATER
6500: PUSH
6501: LD_VAR 0 1
6505: PUSH
6506: LD_INT 101
6508: LESS
6509: AND
6510: IFFALSE 6519
// BuildRussianBase ( 1 ) ;
6512: LD_INT 1
6514: PPUSH
6515: CALL 10287 0 1
// end ; end ;
6519: PPOPN 1
6521: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6522: LD_INT 54
6524: PPUSH
6525: LD_INT 1
6527: PPUSH
6528: CALL_OW 321
6532: PUSH
6533: LD_INT 2
6535: EQUAL
6536: PUSH
6537: LD_INT 21
6539: PPUSH
6540: LD_INT 1
6542: PPUSH
6543: CALL_OW 321
6547: PUSH
6548: LD_INT 2
6550: EQUAL
6551: OR
6552: PUSH
6553: LD_INT 22
6555: PPUSH
6556: LD_INT 1
6558: PPUSH
6559: CALL_OW 321
6563: PUSH
6564: LD_INT 2
6566: EQUAL
6567: OR
6568: IFFALSE 6880
6570: GO 6572
6572: DISABLE
6573: LD_INT 0
6575: PPUSH
6576: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6577: LD_EXP 17
6581: PPUSH
6582: CALL_OW 302
6586: IFFALSE 6600
// tmp := DeltaDoctor else
6588: LD_ADDR_VAR 0 2
6592: PUSH
6593: LD_EXP 17
6597: ST_TO_ADDR
6598: GO 6610
// tmp := Denis ;
6600: LD_ADDR_VAR 0 2
6604: PUSH
6605: LD_EXP 12
6609: ST_TO_ADDR
// if tmp then
6610: LD_VAR 0 2
6614: IFFALSE 6708
// begin DialogueOn ;
6616: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6620: LD_EXP 1
6624: PPUSH
6625: LD_STRING D6-JMM-1
6627: PPUSH
6628: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_STRING D6-Sci1-1
6639: PPUSH
6640: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6644: LD_EXP 1
6648: PPUSH
6649: LD_STRING D6-JMM-2
6651: PPUSH
6652: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6656: LD_VAR 0 2
6660: PPUSH
6661: LD_STRING D6-Sci1-2
6663: PPUSH
6664: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6668: LD_EXP 1
6672: PPUSH
6673: LD_STRING D6-JMM-3
6675: PPUSH
6676: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6680: LD_VAR 0 2
6684: PPUSH
6685: LD_STRING D6-Sci1-3
6687: PPUSH
6688: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6692: LD_EXP 1
6696: PPUSH
6697: LD_STRING D6-JMM-4
6699: PPUSH
6700: CALL_OW 88
// DialogueOff ;
6704: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6708: LD_INT 1050
6710: PPUSH
6711: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6715: LD_EXP 49
6719: PUSH
6720: LD_INT 0
6722: EQUAL
6723: PUSH
6724: LD_EXP 14
6728: PPUSH
6729: CALL_OW 302
6733: AND
6734: IFFALSE 6792
// begin DialogueOn ;
6736: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6740: LD_EXP 27
6744: PPUSH
6745: LD_STRING D5-Ar1-1
6747: PPUSH
6748: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6752: LD_EXP 26
6756: PPUSH
6757: LD_STRING D5-Diet-1
6759: PPUSH
6760: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6764: LD_EXP 27
6768: PPUSH
6769: LD_STRING D5-Ar1-2
6771: PPUSH
6772: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6776: LD_EXP 26
6780: PPUSH
6781: LD_STRING D5-Diet-2
6783: PPUSH
6784: CALL_OW 88
// DialogueOff ;
6788: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6792: LD_INT 2100
6794: PUSH
6795: LD_INT 3150
6797: PUSH
6798: LD_INT 4200
6800: PUSH
6801: LD_INT 5250
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 1
6812: PPUSH
6813: LD_INT 4
6815: PPUSH
6816: CALL_OW 12
6820: ARRAY
6821: PPUSH
6822: CALL_OW 67
// if arabianTrait = 0 then
6826: LD_EXP 49
6830: PUSH
6831: LD_INT 0
6833: EQUAL
6834: IFFALSE 6880
// begin arabianTrait = 1 ;
6836: LD_ADDR_EXP 49
6840: PUSH
6841: LD_INT 1
6843: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6844: LD_INT 2
6846: PPUSH
6847: LD_INT 3
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: LD_INT 1
6855: PPUSH
6856: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6860: LD_INT 2
6862: PPUSH
6863: LD_INT 6
6865: PPUSH
6866: LD_INT 1
6868: PPUSH
6869: LD_INT 1
6871: PPUSH
6872: CALL_OW 80
// PrepareArabianTrait ;
6876: CALL 6883 0 0
// end ; end ;
6880: PPOPN 2
6882: END
// export function PrepareArabianTrait ; var i , tmp , un ; begin
6883: LD_INT 0
6885: PPUSH
6886: PPUSH
6887: PPUSH
6888: PPUSH
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 2
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 25
6906: PUSH
6907: LD_INT 4
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 69
6922: PUSH
6923: FOR_IN
6924: IFFALSE 6937
// ComExitBuilding ( i ) ;
6926: LD_VAR 0 2
6930: PPUSH
6931: CALL_OW 122
6935: GO 6923
6937: POP
6938: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) do
6939: LD_ADDR_VAR 0 2
6943: PUSH
6944: LD_INT 22
6946: PUSH
6947: LD_INT 2
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 25
6956: PUSH
6957: LD_INT 3
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: PPUSH
6968: CALL_OW 69
6972: PUSH
6973: FOR_IN
6974: IFFALSE 6987
// ComExitVehicle ( i ) ;
6976: LD_VAR 0 2
6980: PPUSH
6981: CALL_OW 121
6985: GO 6973
6987: POP
6988: POP
// SetClass ( Dietrich , 8 ) ;
6989: LD_EXP 26
6993: PPUSH
6994: LD_INT 8
6996: PPUSH
6997: CALL_OW 336
// wait ( 0 0$3 ) ;
7001: LD_INT 105
7003: PPUSH
7004: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7008: LD_INT 76
7010: PPUSH
7011: LD_INT 19
7013: PPUSH
7014: CALL_OW 84
// DialogueOn ;
7018: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7022: LD_INT 22
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 26
7034: PUSH
7035: LD_INT 1
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: PUSH
7042: LD_INT 2
7044: PUSH
7045: LD_INT 25
7047: PUSH
7048: LD_INT 1
7050: PUSH
7051: EMPTY
7052: LIST
7053: LIST
7054: PUSH
7055: LD_INT 25
7057: PUSH
7058: LD_INT 2
7060: PUSH
7061: EMPTY
7062: LIST
7063: LIST
7064: PUSH
7065: LD_INT 25
7067: PUSH
7068: LD_INT 3
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 25
7077: PUSH
7078: LD_INT 4
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: LD_INT 25
7087: PUSH
7088: LD_INT 5
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: EMPTY
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: LIST
7107: PPUSH
7108: CALL_OW 69
7112: PPUSH
7113: LD_STRING D8-Sol1-1
7115: PPUSH
7116: LD_STRING D8-Sol1-1
7118: PPUSH
7119: CALL 9618 0 3
// if IsOK ( DeltaDoctor ) then
7123: LD_EXP 17
7127: PPUSH
7128: CALL_OW 302
7132: IFFALSE 7148
// Say ( DeltaDoctor , D8-Sci1-1 ) else
7134: LD_EXP 17
7138: PPUSH
7139: LD_STRING D8-Sci1-1
7141: PPUSH
7142: CALL_OW 88
7146: GO 7249
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7148: LD_INT 22
7150: PUSH
7151: LD_INT 1
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: LD_INT 26
7160: PUSH
7161: LD_INT 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 2
7170: PUSH
7171: LD_INT 25
7173: PUSH
7174: LD_INT 1
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 25
7183: PUSH
7184: LD_INT 2
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: PUSH
7191: LD_INT 25
7193: PUSH
7194: LD_INT 3
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: PUSH
7201: LD_INT 25
7203: PUSH
7204: LD_INT 4
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: PUSH
7211: LD_INT 25
7213: PUSH
7214: LD_INT 5
7216: PUSH
7217: EMPTY
7218: LIST
7219: LIST
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: PPUSH
7234: CALL_OW 69
7238: PPUSH
7239: LD_STRING D8-Sol1-1
7241: PPUSH
7242: LD_STRING D8-Sol1-1
7244: PPUSH
7245: CALL 9618 0 3
// Say ( JMM , D8-JMM-1 ) ;
7249: LD_EXP 1
7253: PPUSH
7254: LD_STRING D8-JMM-1
7256: PPUSH
7257: CALL_OW 88
// DialogueOff ;
7261: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7265: LD_INT 2
7267: PPUSH
7268: LD_INT 2
7270: PPUSH
7271: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7275: LD_INT 1
7277: PPUSH
7278: LD_INT 2
7280: PPUSH
7281: LD_INT 2
7283: PPUSH
7284: LD_INT 1
7286: PPUSH
7287: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7291: LD_INT 3
7293: PPUSH
7294: LD_INT 2
7296: PPUSH
7297: LD_INT 1
7299: PPUSH
7300: LD_INT 1
7302: PPUSH
7303: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
7307: LD_STRING M4
7309: PPUSH
7310: CALL_OW 337
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) do
7314: LD_ADDR_VAR 0 2
7318: PUSH
7319: LD_INT 22
7321: PUSH
7322: LD_INT 2
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: PUSH
7329: LD_INT 21
7331: PUSH
7332: LD_INT 1
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PUSH
7339: LD_INT 2
7341: PUSH
7342: LD_INT 25
7344: PUSH
7345: LD_INT 1
7347: PUSH
7348: EMPTY
7349: LIST
7350: LIST
7351: PUSH
7352: LD_INT 25
7354: PUSH
7355: LD_INT 8
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PUSH
7362: LD_INT 25
7364: PUSH
7365: LD_INT 15
7367: PUSH
7368: EMPTY
7369: LIST
7370: LIST
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: PPUSH
7383: CALL_OW 69
7387: PUSH
7388: FOR_IN
7389: IFFALSE 7529
// begin ComExitBuilding ( i ) ;
7391: LD_VAR 0 2
7395: PPUSH
7396: CALL_OW 122
// wait ( 0 0$1 ) ;
7400: LD_INT 35
7402: PPUSH
7403: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
7407: LD_VAR 0 2
7411: PPUSH
7412: LD_INT 77
7414: PPUSH
7415: LD_INT 10
7417: PPUSH
7418: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
7422: LD_VAR 0 2
7426: PPUSH
7427: LD_INT 82
7429: PPUSH
7430: LD_INT 5
7432: PPUSH
7433: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
7437: LD_VAR 0 2
7441: PPUSH
7442: LD_INT 95
7444: PPUSH
7445: LD_INT 12
7447: PPUSH
7448: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
7452: LD_VAR 0 2
7456: PPUSH
7457: LD_INT 102
7459: PPUSH
7460: LD_INT 11
7462: PPUSH
7463: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
7467: LD_VAR 0 2
7471: PPUSH
7472: LD_INT 116
7474: PPUSH
7475: LD_INT 15
7477: PPUSH
7478: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
7482: LD_VAR 0 2
7486: PPUSH
7487: LD_INT 140
7489: PPUSH
7490: LD_INT 25
7492: PPUSH
7493: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
7497: LD_VAR 0 2
7501: PPUSH
7502: LD_INT 160
7504: PPUSH
7505: LD_INT 56
7507: PPUSH
7508: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_INT 189
7519: PPUSH
7520: LD_INT 79
7522: PPUSH
7523: CALL_OW 174
// end ;
7527: GO 7388
7529: POP
7530: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 16 ] ] ] ) do
7531: LD_ADDR_VAR 0 2
7535: PUSH
7536: LD_INT 22
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: EMPTY
7543: LIST
7544: LIST
7545: PUSH
7546: LD_INT 21
7548: PUSH
7549: LD_INT 1
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_INT 2
7558: PUSH
7559: LD_INT 25
7561: PUSH
7562: LD_INT 2
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 25
7571: PUSH
7572: LD_INT 3
7574: PUSH
7575: EMPTY
7576: LIST
7577: LIST
7578: PUSH
7579: LD_INT 25
7581: PUSH
7582: LD_INT 4
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: PUSH
7589: LD_INT 25
7591: PUSH
7592: LD_INT 16
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: PPUSH
7611: CALL_OW 69
7615: PUSH
7616: FOR_IN
7617: IFFALSE 7757
// begin ComExitBuilding ( i ) ;
7619: LD_VAR 0 2
7623: PPUSH
7624: CALL_OW 122
// wait ( 0 0$1 ) ;
7628: LD_INT 35
7630: PPUSH
7631: CALL_OW 67
// AddComMoveXY ( i , 77 , 10 ) ;
7635: LD_VAR 0 2
7639: PPUSH
7640: LD_INT 77
7642: PPUSH
7643: LD_INT 10
7645: PPUSH
7646: CALL_OW 171
// AddComMoveXY ( i , 82 , 5 ) ;
7650: LD_VAR 0 2
7654: PPUSH
7655: LD_INT 82
7657: PPUSH
7658: LD_INT 5
7660: PPUSH
7661: CALL_OW 171
// AddComMoveXY ( i , 95 , 12 ) ;
7665: LD_VAR 0 2
7669: PPUSH
7670: LD_INT 95
7672: PPUSH
7673: LD_INT 12
7675: PPUSH
7676: CALL_OW 171
// AddComMoveXY ( i , 102 , 11 ) ;
7680: LD_VAR 0 2
7684: PPUSH
7685: LD_INT 102
7687: PPUSH
7688: LD_INT 11
7690: PPUSH
7691: CALL_OW 171
// AddComMoveXY ( i , 116 , 15 ) ;
7695: LD_VAR 0 2
7699: PPUSH
7700: LD_INT 116
7702: PPUSH
7703: LD_INT 15
7705: PPUSH
7706: CALL_OW 171
// AddComMoveXY ( i , 140 , 25 ) ;
7710: LD_VAR 0 2
7714: PPUSH
7715: LD_INT 140
7717: PPUSH
7718: LD_INT 25
7720: PPUSH
7721: CALL_OW 171
// AddComMoveXY ( i , 160 , 56 ) ;
7725: LD_VAR 0 2
7729: PPUSH
7730: LD_INT 160
7732: PPUSH
7733: LD_INT 56
7735: PPUSH
7736: CALL_OW 171
// AddComMoveXY ( i , 189 , 79 ) ;
7740: LD_VAR 0 2
7744: PPUSH
7745: LD_INT 189
7747: PPUSH
7748: LD_INT 79
7750: PPUSH
7751: CALL_OW 171
// end ;
7755: GO 7616
7757: POP
7758: POP
// arabianAttackersAI = 1 ;
7759: LD_ADDR_EXP 46
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7767: LD_INT 350
7769: PPUSH
7770: CALL_OW 67
// if IsOk ( Gary ) then
7774: LD_EXP 10
7778: PPUSH
7779: CALL_OW 302
7783: IFFALSE 7797
// Say ( Gary , D8a-Gary-1 ) ;
7785: LD_EXP 10
7789: PPUSH
7790: LD_STRING D8a-Gary-1
7792: PPUSH
7793: CALL_OW 88
// wait ( 0 0$5 ) ;
7797: LD_INT 175
7799: PPUSH
7800: CALL_OW 67
// if IsOK ( Khatam ) then
7804: LD_EXP 14
7808: PPUSH
7809: CALL_OW 302
7813: IFFALSE 8349
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7815: LD_ADDR_VAR 0 3
7819: PUSH
7820: LD_INT 22
7822: PUSH
7823: LD_INT 1
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: PUSH
7830: LD_INT 2
7832: PUSH
7833: LD_INT 25
7835: PUSH
7836: LD_INT 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 25
7845: PUSH
7846: LD_INT 2
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PUSH
7853: LD_INT 25
7855: PUSH
7856: LD_INT 3
7858: PUSH
7859: EMPTY
7860: LIST
7861: LIST
7862: PUSH
7863: LD_INT 25
7865: PUSH
7866: LD_INT 4
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: LD_INT 25
7875: PUSH
7876: LD_INT 5
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 25
7885: PUSH
7886: LD_INT 8
7888: PUSH
7889: EMPTY
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: PUSH
7911: LD_EXP 1
7915: PUSH
7916: LD_EXP 2
7920: PUSH
7921: LD_EXP 3
7925: PUSH
7926: LD_EXP 4
7930: PUSH
7931: LD_EXP 5
7935: PUSH
7936: LD_EXP 6
7940: PUSH
7941: LD_EXP 7
7945: PUSH
7946: LD_EXP 8
7950: PUSH
7951: LD_EXP 9
7955: PUSH
7956: LD_EXP 10
7960: PUSH
7961: LD_EXP 11
7965: PUSH
7966: LD_EXP 12
7970: PUSH
7971: LD_EXP 13
7975: PUSH
7976: LD_EXP 14
7980: PUSH
7981: LD_EXP 15
7985: PUSH
7986: LD_EXP 16
7990: PUSH
7991: LD_EXP 17
7995: PUSH
7996: LD_EXP 19
8000: PUSH
8001: LD_EXP 24
8005: PUSH
8006: EMPTY
8007: LIST
8008: LIST
8009: LIST
8010: LIST
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: LIST
8026: DIFF
8027: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
8028: LD_EXP 14
8032: PPUSH
8033: LD_INT 8
8035: PPUSH
8036: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
8040: LD_EXP 14
8044: PPUSH
8045: CALL_OW 122
// wait ( 0 0$1 ) ;
8049: LD_INT 35
8051: PPUSH
8052: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
8056: LD_EXP 14
8060: PPUSH
8061: CALL_OW 121
// wait ( 0 0$1 ) ;
8065: LD_INT 35
8067: PPUSH
8068: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
8072: LD_EXP 14
8076: PPUSH
8077: LD_INT 7
8079: PPUSH
8080: CALL_OW 113
// if not tmp then
8084: LD_VAR 0 3
8088: NOT
8089: IFFALSE 8093
// exit ;
8091: GO 8349
// DialogueOn ;
8093: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 1
8104: ARRAY
8105: PPUSH
8106: CALL_OW 258
8110: PUSH
8111: LD_INT 1
8113: EQUAL
8114: IFFALSE 8134
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 1
8123: ARRAY
8124: PPUSH
8125: LD_STRING D8b-Sol1-1
8127: PPUSH
8128: CALL_OW 88
8132: GO 8150
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 1
8141: ARRAY
8142: PPUSH
8143: LD_STRING D8b-FSol1-1
8145: PPUSH
8146: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8150: LD_EXP 14
8154: PPUSH
8155: LD_STRING D8b-Khat-1
8157: PPUSH
8158: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8162: LD_VAR 0 3
8166: PUSH
8167: LD_INT 1
8169: ARRAY
8170: PPUSH
8171: CALL_OW 258
8175: PUSH
8176: LD_INT 1
8178: EQUAL
8179: IFFALSE 8199
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: PPUSH
8190: LD_STRING D8b-Sol1-2
8192: PPUSH
8193: CALL_OW 88
8197: GO 8215
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8199: LD_VAR 0 3
8203: PUSH
8204: LD_INT 1
8206: ARRAY
8207: PPUSH
8208: LD_STRING D8b-FSol1-2
8210: PPUSH
8211: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8215: LD_EXP 14
8219: PPUSH
8220: LD_STRING D8b-Khat-2
8222: PPUSH
8223: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8227: LD_VAR 0 3
8231: PUSH
8232: LD_INT 1
8234: ARRAY
8235: PPUSH
8236: CALL_OW 258
8240: PUSH
8241: LD_INT 1
8243: EQUAL
8244: IFFALSE 8264
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8246: LD_VAR 0 3
8250: PUSH
8251: LD_INT 1
8253: ARRAY
8254: PPUSH
8255: LD_STRING D8b-Sol1-3
8257: PPUSH
8258: CALL_OW 88
8262: GO 8280
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8264: LD_VAR 0 3
8268: PUSH
8269: LD_INT 1
8271: ARRAY
8272: PPUSH
8273: LD_STRING D8b-FSol1-3
8275: PPUSH
8276: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8280: LD_EXP 14
8284: PPUSH
8285: LD_STRING D8b-Khat-3
8287: PPUSH
8288: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8292: LD_VAR 0 3
8296: PUSH
8297: LD_INT 1
8299: ARRAY
8300: PPUSH
8301: CALL_OW 258
8305: PUSH
8306: LD_INT 1
8308: EQUAL
8309: IFFALSE 8329
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8311: LD_VAR 0 3
8315: PUSH
8316: LD_INT 1
8318: ARRAY
8319: PPUSH
8320: LD_STRING D8b-Sol1-4
8322: PPUSH
8323: CALL_OW 88
8327: GO 8345
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8329: LD_VAR 0 3
8333: PUSH
8334: LD_INT 1
8336: ARRAY
8337: PPUSH
8338: LD_STRING D8b-FSol1-4
8340: PPUSH
8341: CALL_OW 88
// DialogueOff ;
8345: CALL_OW 7
// end ; end ;
8349: LD_VAR 0 1
8353: RET
// every 0 0$1 do var i ;
8354: GO 8356
8356: DISABLE
8357: LD_INT 0
8359: PPUSH
// begin enable ;
8360: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8361: LD_ADDR_VAR 0 1
8365: PUSH
8366: LD_INT 7
8368: PPUSH
8369: LD_INT 22
8371: PUSH
8372: LD_INT 2
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 70
8383: PUSH
8384: FOR_IN
8385: IFFALSE 8451
// begin if GetClass ( i ) = 4 then
8387: LD_VAR 0 1
8391: PPUSH
8392: CALL_OW 257
8396: PUSH
8397: LD_INT 4
8399: EQUAL
8400: IFFALSE 8412
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8402: LD_INT 1
8404: PPUSH
8405: LD_STRING 10_ScientistsEscape_1
8407: PPUSH
8408: CALL_OW 39
// if i = Dietrich then
8412: LD_VAR 0 1
8416: PUSH
8417: LD_EXP 26
8421: EQUAL
8422: IFFALSE 8432
// GensherStatus = 1 ;
8424: LD_ADDR_EXP 51
8428: PUSH
8429: LD_INT 1
8431: ST_TO_ADDR
// arabianEscape = 1 ;
8432: LD_ADDR_EXP 47
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// RemoveUnit ( i ) ;
8440: LD_VAR 0 1
8444: PPUSH
8445: CALL_OW 64
// end ;
8449: GO 8384
8451: POP
8452: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8453: LD_EXP 14
8457: PPUSH
8458: LD_INT 7
8460: PPUSH
8461: CALL_OW 308
8465: IFFALSE 8484
// begin KhatamStatus = 1 ;
8467: LD_ADDR_EXP 52
8471: PUSH
8472: LD_INT 1
8474: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8475: LD_EXP 14
8479: PPUSH
8480: CALL_OW 64
// end ; end ;
8484: PPOPN 1
8486: END
// every 0 0$1 trigger IsDead ( Khatam ) do
8487: LD_EXP 14
8491: PPUSH
8492: CALL_OW 301
8496: IFFALSE 8509
8498: GO 8500
8500: DISABLE
// KhatamStatus = 0 ;
8501: LD_ADDR_EXP 52
8505: PUSH
8506: LD_INT 0
8508: ST_TO_ADDR
8509: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8510: LD_INT 22
8512: PUSH
8513: LD_INT 2
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: LD_INT 21
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: EMPTY
8527: LIST
8528: LIST
8529: PUSH
8530: EMPTY
8531: LIST
8532: LIST
8533: PPUSH
8534: CALL_OW 69
8538: PUSH
8539: LD_INT 0
8541: EQUAL
8542: PUSH
8543: LD_INT 22
8545: PUSH
8546: LD_INT 4
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: PUSH
8553: LD_INT 21
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: EMPTY
8564: LIST
8565: LIST
8566: PPUSH
8567: CALL_OW 69
8571: PUSH
8572: LD_INT 0
8574: EQUAL
8575: AND
8576: IFFALSE 8589
8578: GO 8580
8580: DISABLE
// arabianDefeated = 1 ;
8581: LD_ADDR_EXP 48
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
8589: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8590: LD_INT 54
8592: PPUSH
8593: LD_INT 1
8595: PPUSH
8596: CALL_OW 321
8600: PUSH
8601: LD_INT 2
8603: EQUAL
8604: PUSH
8605: LD_INT 55
8607: PPUSH
8608: LD_INT 1
8610: PPUSH
8611: CALL_OW 321
8615: PUSH
8616: LD_INT 2
8618: EQUAL
8619: AND
8620: PUSH
8621: LD_INT 21
8623: PPUSH
8624: LD_INT 1
8626: PPUSH
8627: CALL_OW 321
8631: PUSH
8632: LD_INT 2
8634: EQUAL
8635: AND
8636: PUSH
8637: LD_INT 22
8639: PPUSH
8640: LD_INT 1
8642: PPUSH
8643: CALL_OW 321
8647: PUSH
8648: LD_INT 2
8650: EQUAL
8651: AND
8652: PUSH
8653: LD_INT 12
8655: PPUSH
8656: LD_INT 1
8658: PPUSH
8659: CALL_OW 321
8663: PUSH
8664: LD_INT 2
8666: EQUAL
8667: AND
8668: PUSH
8669: LD_INT 32
8671: PPUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL_OW 321
8679: PUSH
8680: LD_INT 2
8682: EQUAL
8683: AND
8684: PUSH
8685: LD_EXP 59
8689: PUSH
8690: LD_INT 0
8692: EQUAL
8693: AND
8694: PUSH
8695: LD_EXP 49
8699: PUSH
8700: LD_INT 0
8702: EQUAL
8703: AND
8704: PUSH
8705: LD_OWVAR 1
8709: PUSH
8710: LD_INT 31500
8712: GREATEREQUAL
8713: AND
8714: IFFALSE 8731
8716: GO 8718
8718: DISABLE
// begin arabianTrait = 1 ;
8719: LD_ADDR_EXP 49
8723: PUSH
8724: LD_INT 1
8726: ST_TO_ADDR
// PrepareArabianTrait ;
8727: CALL 6883 0 0
// end ;
8731: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ f_side , 2 ] ) = 0 or arabianTrait = 0 ) do
8732: LD_EXP 29
8736: PUSH
8737: LD_STRING 02_mikhailStatus_1
8739: PPUSH
8740: LD_INT 0
8742: PPUSH
8743: CALL_OW 30
8747: PUSH
8748: LD_INT 1
8750: EQUAL
8751: AND
8752: PUSH
8753: LD_INT 22
8755: PUSH
8756: LD_INT 5
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PPUSH
8763: CALL_OW 69
8767: PUSH
8768: LD_INT 0
8770: EQUAL
8771: AND
8772: PUSH
8773: LD_INT 22
8775: PUSH
8776: LD_INT 2
8778: PUSH
8779: EMPTY
8780: LIST
8781: LIST
8782: PPUSH
8783: CALL_OW 69
8787: PUSH
8788: LD_INT 0
8790: EQUAL
8791: PUSH
8792: LD_EXP 49
8796: PUSH
8797: LD_INT 0
8799: EQUAL
8800: OR
8801: AND
8802: IFFALSE 8811
8804: GO 8806
8806: DISABLE
// PrepareCornell ;
8807: CALL 2505 0 0
8811: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8812: LD_INT 22
8814: PUSH
8815: LD_INT 1
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PPUSH
8822: CALL_OW 69
8826: PPUSH
8827: LD_EXP 19
8831: PPUSH
8832: CALL_OW 74
8836: PPUSH
8837: LD_EXP 19
8841: PPUSH
8842: CALL_OW 296
8846: PUSH
8847: LD_INT 9
8849: LESS
8850: IFFALSE 9071
8852: GO 8854
8854: DISABLE
// begin InGameOn ;
8855: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8859: LD_EXP 19
8863: PPUSH
8864: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8868: LD_EXP 19
8872: PPUSH
8873: LD_STRING D7-Corn-1
8875: PPUSH
8876: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8880: LD_INT 22
8882: PUSH
8883: LD_INT 1
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: PUSH
8890: LD_INT 2
8892: PUSH
8893: LD_INT 25
8895: PUSH
8896: LD_INT 1
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: LD_INT 25
8905: PUSH
8906: LD_INT 2
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 25
8915: PUSH
8916: LD_INT 3
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 25
8925: PUSH
8926: LD_INT 4
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 25
8935: PUSH
8936: LD_INT 5
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: EMPTY
8944: LIST
8945: LIST
8946: LIST
8947: LIST
8948: LIST
8949: LIST
8950: PUSH
8951: EMPTY
8952: LIST
8953: LIST
8954: PPUSH
8955: CALL_OW 69
8959: PPUSH
8960: LD_STRING D7-Sol1-1
8962: PPUSH
8963: LD_STRING D7-FSol1-1
8965: PPUSH
8966: CALL 9618 0 3
// CenterNowOnUnits ( Cornell ) ;
8970: LD_EXP 19
8974: PPUSH
8975: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
8979: LD_EXP 19
8983: PPUSH
8984: LD_STRING D7-Corn-2
8986: PPUSH
8987: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
8991: LD_EXP 1
8995: PPUSH
8996: LD_STRING D7-JMM-2
8998: PPUSH
8999: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9003: LD_EXP 19
9007: PPUSH
9008: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9012: LD_EXP 19
9016: PPUSH
9017: LD_STRING D7-Corn-3
9019: PPUSH
9020: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9024: LD_EXP 19
9028: PPUSH
9029: LD_INT 250
9031: PPUSH
9032: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9036: LD_EXP 19
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: CALL_OW 235
// wait ( 0 0$1 ) ;
9048: LD_INT 35
9050: PPUSH
9051: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9055: LD_EXP 1
9059: PPUSH
9060: LD_STRING D7-JMM-3
9062: PPUSH
9063: CALL_OW 88
// InGameOff ;
9067: CALL_OW 9
// end ;
9071: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
9072: LD_EXP 19
9076: PPUSH
9077: CALL_OW 255
9081: PUSH
9082: LD_INT 1
9084: EQUAL
9085: PUSH
9086: LD_EXP 19
9090: PPUSH
9091: CALL_OW 256
9095: PUSH
9096: LD_INT 251
9098: GREATER
9099: AND
9100: IFFALSE 9293
9102: GO 9104
9104: DISABLE
// begin DialogueOn ;
9105: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9109: LD_EXP 1
9113: PPUSH
9114: LD_STRING D7a-JMM-1
9116: PPUSH
9117: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9121: LD_EXP 19
9125: PPUSH
9126: LD_STRING D7a-Corn-1
9128: PPUSH
9129: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9133: LD_EXP 1
9137: PPUSH
9138: LD_STRING D7a-JMM-2
9140: PPUSH
9141: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9145: LD_EXP 19
9149: PPUSH
9150: LD_STRING D7a-Corn-2
9152: PPUSH
9153: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9157: LD_EXP 1
9161: PPUSH
9162: LD_STRING D7a-JMM-3
9164: PPUSH
9165: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9169: LD_EXP 19
9173: PPUSH
9174: LD_STRING D7a-Corn-3
9176: PPUSH
9177: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9181: LD_EXP 1
9185: PPUSH
9186: LD_STRING D7a-JMM-4
9188: PPUSH
9189: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9193: LD_EXP 19
9197: PPUSH
9198: LD_STRING D7a-Corn-4
9200: PPUSH
9201: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9205: LD_EXP 1
9209: PPUSH
9210: LD_STRING D7a-JMM-5
9212: PPUSH
9213: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9217: LD_EXP 19
9221: PPUSH
9222: LD_STRING D7a-Corn-5
9224: PPUSH
9225: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9229: LD_EXP 1
9233: PPUSH
9234: LD_STRING D7a-JMM-6
9236: PPUSH
9237: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9241: LD_EXP 19
9245: PPUSH
9246: LD_STRING D7a-Corn-6
9248: PPUSH
9249: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9253: LD_EXP 1
9257: PPUSH
9258: LD_STRING D7a-JMM-7
9260: PPUSH
9261: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9265: LD_EXP 19
9269: PPUSH
9270: LD_STRING D7a-Corn-7
9272: PPUSH
9273: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9277: LD_EXP 1
9281: PPUSH
9282: LD_STRING D7a-JMM-8
9284: PPUSH
9285: CALL_OW 88
// DialogueOff ;
9289: CALL_OW 7
// end ;
9293: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9294: LD_EXP 58
9298: PUSH
9299: LD_EXP 1
9303: PPUSH
9304: CALL_OW 302
9308: PUSH
9309: LD_EXP 5
9313: PPUSH
9314: CALL_OW 302
9318: OR
9319: AND
9320: IFFALSE 9410
9322: GO 9324
9324: DISABLE
// begin Wait ( 0 0$2 ) ;
9325: LD_INT 70
9327: PPUSH
9328: CALL_OW 67
// DialogueOn ;
9332: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9336: LD_EXP 58
9340: PUSH
9341: LD_INT 1
9343: ARRAY
9344: PPUSH
9345: LD_EXP 58
9349: PUSH
9350: LD_INT 2
9352: ARRAY
9353: PPUSH
9354: CALL_OW 86
// if IsOk ( Cyrus ) then
9358: LD_EXP 5
9362: PPUSH
9363: CALL_OW 302
9367: IFFALSE 9383
// Say ( Cyrus , D10-Cyrus-1 ) else
9369: LD_EXP 5
9373: PPUSH
9374: LD_STRING D10-Cyrus-1
9376: PPUSH
9377: CALL_OW 88
9381: GO 9406
// if IsOk ( JMM ) then
9383: LD_EXP 1
9387: PPUSH
9388: CALL_OW 302
9392: IFFALSE 9406
// Say ( JMM , D10-JMM-1 ) ;
9394: LD_EXP 1
9398: PPUSH
9399: LD_STRING D10-JMM-1
9401: PPUSH
9402: CALL_OW 88
// DialogueOff ;
9406: CALL_OW 7
// end ;
9410: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9411: LD_INT 12
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: CALL_OW 321
9421: PUSH
9422: LD_INT 2
9424: EQUAL
9425: IFFALSE 9437
9427: GO 9429
9429: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9430: LD_STRING M2b
9432: PPUSH
9433: CALL_OW 337
9437: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9438: LD_INT 32
9440: PPUSH
9441: LD_INT 1
9443: PPUSH
9444: CALL_OW 321
9448: PUSH
9449: LD_INT 2
9451: EQUAL
9452: IFFALSE 9464
9454: GO 9456
9456: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9457: LD_STRING M2c
9459: PPUSH
9460: CALL_OW 337
9464: END
// every 0 0$1 trigger arabianDefeated = 1 do
9465: LD_EXP 48
9469: PUSH
9470: LD_INT 1
9472: EQUAL
9473: IFFALSE 9485
9475: GO 9477
9477: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9478: LD_STRING M4a
9480: PPUSH
9481: CALL_OW 337
9485: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9486: LD_INT 54
9488: PPUSH
9489: LD_INT 1
9491: PPUSH
9492: CALL_OW 321
9496: PUSH
9497: LD_INT 2
9499: EQUAL
9500: PUSH
9501: LD_INT 55
9503: PPUSH
9504: LD_INT 1
9506: PPUSH
9507: CALL_OW 321
9511: PUSH
9512: LD_INT 2
9514: EQUAL
9515: AND
9516: PUSH
9517: LD_INT 21
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 321
9527: PUSH
9528: LD_INT 2
9530: EQUAL
9531: AND
9532: PUSH
9533: LD_INT 22
9535: PPUSH
9536: LD_INT 1
9538: PPUSH
9539: CALL_OW 321
9543: PUSH
9544: LD_INT 2
9546: EQUAL
9547: AND
9548: IFFALSE 9560
9550: GO 9552
9552: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9553: LD_STRING M2a
9555: PPUSH
9556: CALL_OW 337
9560: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9561: LD_INT 0
9563: PPUSH
9564: PPUSH
// if exist_mode then
9565: LD_VAR 0 2
9569: IFFALSE 9588
// unit := CreateCharacter ( ident ) else
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: LD_VAR 0 1
9580: PPUSH
9581: CALL_OW 34
9585: ST_TO_ADDR
9586: GO 9603
// unit := NewCharacter ( ident ) ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_VAR 0 1
9597: PPUSH
9598: CALL_OW 25
9602: ST_TO_ADDR
// result := unit ;
9603: LD_ADDR_VAR 0 3
9607: PUSH
9608: LD_VAR 0 4
9612: ST_TO_ADDR
// end ;
9613: LD_VAR 0 3
9617: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9618: LD_INT 0
9620: PPUSH
9621: PPUSH
9622: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9623: LD_ADDR_VAR 0 1
9627: PUSH
9628: LD_VAR 0 1
9632: PUSH
9633: LD_EXP 1
9637: PUSH
9638: LD_EXP 2
9642: PUSH
9643: LD_EXP 3
9647: PUSH
9648: LD_EXP 4
9652: PUSH
9653: LD_EXP 5
9657: PUSH
9658: LD_EXP 6
9662: PUSH
9663: LD_EXP 7
9667: PUSH
9668: LD_EXP 8
9672: PUSH
9673: LD_EXP 9
9677: PUSH
9678: LD_EXP 10
9682: PUSH
9683: LD_EXP 11
9687: PUSH
9688: LD_EXP 12
9692: PUSH
9693: LD_EXP 13
9697: PUSH
9698: LD_EXP 14
9702: PUSH
9703: LD_EXP 15
9707: PUSH
9708: LD_EXP 16
9712: PUSH
9713: LD_EXP 17
9717: PUSH
9718: LD_EXP 18
9722: PUSH
9723: LD_EXP 19
9727: PUSH
9728: LD_EXP 24
9732: PUSH
9733: EMPTY
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: DIFF
9755: ST_TO_ADDR
// if not characters then
9756: LD_VAR 0 1
9760: NOT
9761: IFFALSE 9765
// exit ;
9763: GO 9911
// rnd = rand ( 1 , characters ) ;
9765: LD_ADDR_VAR 0 6
9769: PUSH
9770: LD_INT 1
9772: PPUSH
9773: LD_VAR 0 1
9777: PPUSH
9778: CALL_OW 12
9782: ST_TO_ADDR
// for i = 1 to characters do
9783: LD_ADDR_VAR 0 5
9787: PUSH
9788: DOUBLE
9789: LD_INT 1
9791: DEC
9792: ST_TO_ADDR
9793: LD_VAR 0 1
9797: PUSH
9798: FOR_TO
9799: IFFALSE 9909
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9801: LD_VAR 0 5
9805: PUSH
9806: LD_VAR 0 6
9810: EQUAL
9811: PUSH
9812: LD_VAR 0 1
9816: PUSH
9817: LD_VAR 0 5
9821: ARRAY
9822: PPUSH
9823: CALL_OW 258
9827: PUSH
9828: LD_INT 1
9830: EQUAL
9831: AND
9832: IFFALSE 9854
// Say ( characters [ i ] , dialogMID ) ;
9834: LD_VAR 0 1
9838: PUSH
9839: LD_VAR 0 5
9843: ARRAY
9844: PPUSH
9845: LD_VAR 0 2
9849: PPUSH
9850: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9854: LD_VAR 0 5
9858: PUSH
9859: LD_VAR 0 6
9863: EQUAL
9864: PUSH
9865: LD_VAR 0 1
9869: PUSH
9870: LD_VAR 0 5
9874: ARRAY
9875: PPUSH
9876: CALL_OW 258
9880: PUSH
9881: LD_INT 2
9883: EQUAL
9884: AND
9885: IFFALSE 9907
// Say ( characters [ i ] , dialogFID ) ;
9887: LD_VAR 0 1
9891: PUSH
9892: LD_VAR 0 5
9896: ARRAY
9897: PPUSH
9898: LD_VAR 0 3
9902: PPUSH
9903: CALL_OW 88
// end ;
9907: GO 9798
9909: POP
9910: POP
// end ;
9911: LD_VAR 0 4
9915: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9916: LD_INT 0
9918: PPUSH
9919: PPUSH
// for i in charactersList do
9920: LD_ADDR_VAR 0 4
9924: PUSH
9925: LD_VAR 0 1
9929: PUSH
9930: FOR_IN
9931: IFFALSE 9960
// begin if IsOk ( i ) then
9933: LD_VAR 0 4
9937: PPUSH
9938: CALL_OW 302
9942: IFFALSE 9958
// SaveCharacters ( i , ident ) ;
9944: LD_VAR 0 4
9948: PPUSH
9949: LD_VAR 0 2
9953: PPUSH
9954: CALL_OW 38
// end ;
9958: GO 9930
9960: POP
9961: POP
// end ;
9962: LD_VAR 0 3
9966: RET
// export function PrepareDifficulty ; begin
9967: LD_INT 0
9969: PPUSH
// if difficulty = 1 then
9970: LD_OWVAR 67
9974: PUSH
9975: LD_INT 1
9977: EQUAL
9978: IFFALSE 10022
// begin RuSolMinLevel = 4 ;
9980: LD_ADDR_EXP 36
9984: PUSH
9985: LD_INT 4
9987: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
9988: LD_ADDR_EXP 37
9992: PUSH
9993: LD_INT 7
9995: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
9996: LD_INT 51
9998: PPUSH
9999: LD_INT 6
10001: PPUSH
10002: LD_INT 2
10004: PPUSH
10005: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10009: LD_INT 51
10011: PPUSH
10012: LD_INT 5
10014: PPUSH
10015: LD_INT 2
10017: PPUSH
10018: CALL_OW 322
// end ; if difficulty = 2 then
10022: LD_OWVAR 67
10026: PUSH
10027: LD_INT 2
10029: EQUAL
10030: IFFALSE 10126
// begin RuSolMinLevel = 5 ;
10032: LD_ADDR_EXP 36
10036: PUSH
10037: LD_INT 5
10039: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10040: LD_ADDR_EXP 37
10044: PUSH
10045: LD_INT 7
10047: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10048: LD_INT 51
10050: PPUSH
10051: LD_INT 6
10053: PPUSH
10054: LD_INT 2
10056: PPUSH
10057: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10061: LD_INT 57
10063: PPUSH
10064: LD_INT 6
10066: PPUSH
10067: LD_INT 2
10069: PPUSH
10070: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10074: LD_INT 63
10076: PPUSH
10077: LD_INT 6
10079: PPUSH
10080: LD_INT 2
10082: PPUSH
10083: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10087: LD_INT 51
10089: PPUSH
10090: LD_INT 5
10092: PPUSH
10093: LD_INT 2
10095: PPUSH
10096: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10100: LD_INT 5
10102: PPUSH
10103: LD_INT 2
10105: PPUSH
10106: LD_INT 2
10108: PPUSH
10109: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10113: LD_INT 5
10115: PPUSH
10116: LD_INT 5
10118: PPUSH
10119: LD_INT 2
10121: PPUSH
10122: CALL_OW 322
// end ; if difficulty = 3 then
10126: LD_OWVAR 67
10130: PUSH
10131: LD_INT 3
10133: EQUAL
10134: IFFALSE 10282
// begin RuSolMinLevel = 6 ;
10136: LD_ADDR_EXP 36
10140: PUSH
10141: LD_INT 6
10143: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10144: LD_ADDR_EXP 37
10148: PUSH
10149: LD_INT 8
10151: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10152: LD_INT 51
10154: PPUSH
10155: LD_INT 6
10157: PPUSH
10158: LD_INT 2
10160: PPUSH
10161: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10165: LD_INT 57
10167: PPUSH
10168: LD_INT 6
10170: PPUSH
10171: LD_INT 2
10173: PPUSH
10174: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10178: LD_INT 52
10180: PPUSH
10181: LD_INT 6
10183: PPUSH
10184: LD_INT 2
10186: PPUSH
10187: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10191: LD_INT 58
10193: PPUSH
10194: LD_INT 6
10196: PPUSH
10197: LD_INT 2
10199: PPUSH
10200: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10204: LD_INT 63
10206: PPUSH
10207: LD_INT 6
10209: PPUSH
10210: LD_INT 2
10212: PPUSH
10213: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10217: LD_INT 64
10219: PPUSH
10220: LD_INT 6
10222: PPUSH
10223: LD_INT 2
10225: PPUSH
10226: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10230: LD_INT 51
10232: PPUSH
10233: LD_INT 5
10235: PPUSH
10236: LD_INT 2
10238: PPUSH
10239: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10243: LD_INT 52
10245: PPUSH
10246: LD_INT 5
10248: PPUSH
10249: LD_INT 2
10251: PPUSH
10252: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10256: LD_INT 66
10258: PPUSH
10259: LD_INT 2
10261: PPUSH
10262: LD_INT 2
10264: PPUSH
10265: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10269: LD_INT 66
10271: PPUSH
10272: LD_INT 5
10274: PPUSH
10275: LD_INT 2
10277: PPUSH
10278: CALL_OW 322
// end ; end ;
10282: LD_VAR 0 1
10286: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area ; begin
10287: LD_INT 0
10289: PPUSH
10290: PPUSH
10291: PPUSH
10292: PPUSH
10293: PPUSH
// case position of 1 :
10294: LD_VAR 0 1
10298: PUSH
10299: LD_INT 1
10301: DOUBLE
10302: EQUAL
10303: IFTRUE 10307
10305: GO 10318
10307: POP
// area := westConv ; 2 :
10308: LD_ADDR_VAR 0 6
10312: PUSH
10313: LD_INT 20
10315: ST_TO_ADDR
10316: GO 10357
10318: LD_INT 2
10320: DOUBLE
10321: EQUAL
10322: IFTRUE 10326
10324: GO 10337
10326: POP
// area := midConv ; 3 :
10327: LD_ADDR_VAR 0 6
10331: PUSH
10332: LD_INT 21
10334: ST_TO_ADDR
10335: GO 10357
10337: LD_INT 3
10339: DOUBLE
10340: EQUAL
10341: IFTRUE 10345
10343: GO 10356
10345: POP
// area := eastConv ; end ;
10346: LD_ADDR_VAR 0 6
10350: PUSH
10351: LD_INT 22
10353: ST_TO_ADDR
10354: GO 10357
10356: POP
// area := AreaToList ( area , 0 ) ;
10357: LD_ADDR_VAR 0 6
10361: PUSH
10362: LD_VAR 0 6
10366: PPUSH
10367: LD_INT 0
10369: PPUSH
10370: CALL_OW 517
10374: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10375: LD_ADDR_VAR 0 3
10379: PUSH
10380: DOUBLE
10381: LD_INT 1
10383: DEC
10384: ST_TO_ADDR
10385: LD_VAR 0 6
10389: PUSH
10390: LD_INT 1
10392: ARRAY
10393: PUSH
10394: FOR_TO
10395: IFFALSE 10476
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10397: LD_VAR 0 6
10401: PUSH
10402: LD_INT 1
10404: ARRAY
10405: PUSH
10406: LD_VAR 0 3
10410: ARRAY
10411: PPUSH
10412: LD_VAR 0 6
10416: PUSH
10417: LD_INT 2
10419: ARRAY
10420: PUSH
10421: LD_VAR 0 3
10425: ARRAY
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: LD_INT 1
10432: PPUSH
10433: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10437: LD_VAR 0 6
10441: PUSH
10442: LD_INT 1
10444: ARRAY
10445: PUSH
10446: LD_VAR 0 3
10450: ARRAY
10451: PPUSH
10452: LD_VAR 0 6
10456: PUSH
10457: LD_INT 2
10459: ARRAY
10460: PUSH
10461: LD_VAR 0 3
10465: ARRAY
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 331
// end ;
10474: GO 10394
10476: POP
10477: POP
// ruPossition = position ;
10478: LD_ADDR_EXP 41
10482: PUSH
10483: LD_VAR 0 1
10487: ST_TO_ADDR
// if position = 1 then
10488: LD_VAR 0 1
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: IFFALSE 11244
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10498: LD_ADDR_VAR 0 4
10502: PUSH
10503: LD_INT 22
10505: PUSH
10506: LD_INT 3
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 25
10515: PUSH
10516: LD_INT 2
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PPUSH
10527: CALL_OW 69
10531: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10532: LD_ADDR_VAR 0 5
10536: PUSH
10537: LD_INT 0
10539: PUSH
10540: LD_INT 49
10542: PUSH
10543: LD_INT 74
10545: PUSH
10546: LD_INT 3
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: PUSH
10555: LD_INT 4
10557: PUSH
10558: LD_INT 73
10560: PUSH
10561: LD_INT 88
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: PUSH
10573: LD_INT 4
10575: PUSH
10576: LD_INT 56
10578: PUSH
10579: LD_INT 62
10581: PUSH
10582: LD_INT 3
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 29
10593: PUSH
10594: LD_INT 43
10596: PUSH
10597: LD_INT 68
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: PUSH
10609: LD_INT 30
10611: PUSH
10612: LD_INT 43
10614: PUSH
10615: LD_INT 79
10617: PUSH
10618: LD_INT 5
10620: PUSH
10621: EMPTY
10622: LIST
10623: LIST
10624: LIST
10625: LIST
10626: PUSH
10627: LD_INT 28
10629: PUSH
10630: LD_INT 60
10632: PUSH
10633: LD_INT 75
10635: PUSH
10636: LD_INT 1
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 2
10647: PUSH
10648: LD_INT 50
10650: PUSH
10651: LD_INT 87
10653: PUSH
10654: LD_INT 1
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: PUSH
10663: LD_INT 28
10665: PUSH
10666: LD_INT 45
10668: PUSH
10669: LD_INT 67
10671: PUSH
10672: LD_INT 2
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 17
10683: PUSH
10684: LD_INT 47
10686: PUSH
10687: LD_INT 84
10689: PUSH
10690: LD_INT 2
10692: PUSH
10693: EMPTY
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 18
10701: PUSH
10702: LD_INT 46
10704: PUSH
10705: LD_INT 87
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 28
10719: PUSH
10720: LD_INT 41
10722: PUSH
10723: LD_INT 64
10725: PUSH
10726: LD_INT 5
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 32
10737: PUSH
10738: LD_INT 75
10740: PUSH
10741: LD_INT 76
10743: PUSH
10744: LD_INT 5
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: PUSH
10753: LD_INT 32
10755: PUSH
10756: LD_INT 77
10758: PUSH
10759: LD_INT 75
10761: PUSH
10762: LD_INT 5
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 32
10773: PUSH
10774: LD_INT 69
10776: PUSH
10777: LD_INT 68
10779: PUSH
10780: LD_INT 3
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: PUSH
10789: LD_INT 32
10791: PUSH
10792: LD_INT 59
10794: PUSH
10795: LD_INT 96
10797: PUSH
10798: LD_INT 5
10800: PUSH
10801: EMPTY
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: LD_INT 32
10809: PUSH
10810: LD_INT 56
10812: PUSH
10813: LD_INT 96
10815: PUSH
10816: LD_INT 0
10818: PUSH
10819: EMPTY
10820: LIST
10821: LIST
10822: LIST
10823: LIST
10824: PUSH
10825: LD_INT 32
10827: PUSH
10828: LD_INT 51
10830: PUSH
10831: LD_INT 61
10833: PUSH
10834: LD_INT 3
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: PUSH
10843: LD_INT 32
10845: PUSH
10846: LD_INT 42
10848: PUSH
10849: LD_INT 60
10851: PUSH
10852: LD_INT 3
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: PUSH
10861: LD_INT 32
10863: PUSH
10864: LD_INT 36
10866: PUSH
10867: LD_INT 58
10869: PUSH
10870: LD_INT 3
10872: PUSH
10873: EMPTY
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: PUSH
10879: LD_INT 32
10881: PUSH
10882: LD_INT 39
10884: PUSH
10885: LD_INT 59
10887: PUSH
10888: LD_INT 3
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: PUSH
10897: LD_INT 32
10899: PUSH
10900: LD_INT 61
10902: PUSH
10903: LD_INT 64
10905: PUSH
10906: LD_INT 3
10908: PUSH
10909: EMPTY
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: PUSH
10915: LD_INT 33
10917: PUSH
10918: LD_INT 63
10920: PUSH
10921: LD_INT 90
10923: PUSH
10924: LD_INT 5
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 33
10935: PUSH
10936: LD_INT 64
10938: PUSH
10939: LD_INT 88
10941: PUSH
10942: LD_INT 5
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 33
10953: PUSH
10954: LD_INT 72
10956: PUSH
10957: LD_INT 82
10959: PUSH
10960: LD_INT 5
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 6
10971: PUSH
10972: LD_INT 42
10974: PUSH
10975: LD_INT 74
10977: PUSH
10978: LD_INT 1
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 6
10989: PUSH
10990: LD_INT 56
10992: PUSH
10993: LD_INT 77
10995: PUSH
10996: LD_INT 2
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 21
11007: PUSH
11008: LD_INT 54
11010: PUSH
11011: LD_INT 91
11013: PUSH
11014: LD_INT 5
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 16
11025: PUSH
11026: LD_INT 50
11028: PUSH
11029: LD_INT 83
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 24
11043: PUSH
11044: LD_INT 50
11046: PUSH
11047: LD_INT 90
11049: PUSH
11050: LD_INT 0
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: LIST
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: LD_INT 22
11097: PUSH
11098: LD_INT 3
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 3
11107: PUSH
11108: LD_INT 25
11110: PUSH
11111: LD_INT 2
11113: PUSH
11114: EMPTY
11115: LIST
11116: LIST
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PPUSH
11126: CALL_OW 69
11130: PUSH
11131: FOR_IN
11132: IFFALSE 11151
// AddComAgressiveMove ( i , 53 , 82 ) ;
11134: LD_VAR 0 3
11138: PPUSH
11139: LD_INT 53
11141: PPUSH
11142: LD_INT 82
11144: PPUSH
11145: CALL_OW 174
11149: GO 11131
11151: POP
11152: POP
// for i := 1 to buildingsTab do
11153: LD_ADDR_VAR 0 3
11157: PUSH
11158: DOUBLE
11159: LD_INT 1
11161: DEC
11162: ST_TO_ADDR
11163: LD_VAR 0 5
11167: PUSH
11168: FOR_TO
11169: IFFALSE 11242
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11171: LD_VAR 0 4
11175: PPUSH
11176: LD_VAR 0 5
11180: PUSH
11181: LD_VAR 0 3
11185: ARRAY
11186: PUSH
11187: LD_INT 1
11189: ARRAY
11190: PPUSH
11191: LD_VAR 0 5
11195: PUSH
11196: LD_VAR 0 3
11200: ARRAY
11201: PUSH
11202: LD_INT 2
11204: ARRAY
11205: PPUSH
11206: LD_VAR 0 5
11210: PUSH
11211: LD_VAR 0 3
11215: ARRAY
11216: PUSH
11217: LD_INT 3
11219: ARRAY
11220: PPUSH
11221: LD_VAR 0 5
11225: PUSH
11226: LD_VAR 0 3
11230: ARRAY
11231: PUSH
11232: LD_INT 4
11234: ARRAY
11235: PPUSH
11236: CALL_OW 205
11240: GO 11168
11242: POP
11243: POP
// end ; if position = 2 then
11244: LD_VAR 0 1
11248: PUSH
11249: LD_INT 2
11251: EQUAL
11252: IFFALSE 11867
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11254: LD_ADDR_VAR 0 4
11258: PUSH
11259: LD_INT 22
11261: PUSH
11262: LD_INT 3
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 25
11271: PUSH
11272: LD_INT 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PPUSH
11283: CALL_OW 69
11287: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11288: LD_ADDR_VAR 0 5
11292: PUSH
11293: LD_INT 0
11295: PUSH
11296: LD_INT 104
11298: PUSH
11299: LD_INT 110
11301: PUSH
11302: LD_INT 5
11304: PUSH
11305: EMPTY
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 4
11313: PUSH
11314: LD_INT 98
11316: PUSH
11317: LD_INT 90
11319: PUSH
11320: LD_INT 3
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: PUSH
11329: LD_INT 29
11331: PUSH
11332: LD_INT 103
11334: PUSH
11335: LD_INT 114
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: PUSH
11347: LD_INT 30
11349: PUSH
11350: LD_INT 99
11352: PUSH
11353: LD_INT 114
11355: PUSH
11356: LD_INT 3
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 28
11367: PUSH
11368: LD_INT 100
11370: PUSH
11371: LD_INT 112
11373: PUSH
11374: LD_INT 1
11376: PUSH
11377: EMPTY
11378: LIST
11379: LIST
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 2
11385: PUSH
11386: LD_INT 92
11388: PUSH
11389: LD_INT 101
11391: PUSH
11392: LD_INT 0
11394: PUSH
11395: EMPTY
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: PUSH
11401: LD_INT 28
11403: PUSH
11404: LD_INT 97
11406: PUSH
11407: LD_INT 116
11409: PUSH
11410: LD_INT 5
11412: PUSH
11413: EMPTY
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: PUSH
11419: LD_INT 17
11421: PUSH
11422: LD_INT 96
11424: PUSH
11425: LD_INT 101
11427: PUSH
11428: LD_INT 4
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PUSH
11437: LD_INT 18
11439: PUSH
11440: LD_INT 88
11442: PUSH
11443: LD_INT 97
11445: PUSH
11446: LD_INT 2
11448: PUSH
11449: EMPTY
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: PUSH
11455: LD_INT 28
11457: PUSH
11458: LD_INT 106
11460: PUSH
11461: LD_INT 92
11463: PUSH
11464: LD_INT 2
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PUSH
11473: LD_INT 32
11475: PUSH
11476: LD_INT 88
11478: PUSH
11479: LD_INT 89
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: LIST
11489: LIST
11490: PUSH
11491: LD_INT 32
11493: PUSH
11494: LD_INT 86
11496: PUSH
11497: LD_INT 90
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 32
11511: PUSH
11512: LD_INT 85
11514: PUSH
11515: LD_INT 99
11517: PUSH
11518: LD_INT 2
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PUSH
11527: LD_INT 32
11529: PUSH
11530: LD_INT 85
11532: PUSH
11533: LD_INT 107
11535: PUSH
11536: LD_INT 1
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: PUSH
11545: LD_INT 33
11547: PUSH
11548: LD_INT 105
11550: PUSH
11551: LD_INT 99
11553: PUSH
11554: LD_INT 1
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: PUSH
11563: LD_INT 33
11565: PUSH
11566: LD_INT 102
11568: PUSH
11569: LD_INT 92
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 33
11583: PUSH
11584: LD_INT 105
11586: PUSH
11587: LD_INT 92
11589: PUSH
11590: LD_INT 2
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: PUSH
11599: LD_INT 6
11601: PUSH
11602: LD_INT 92
11604: PUSH
11605: LD_INT 110
11607: PUSH
11608: LD_INT 0
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 6
11619: PUSH
11620: LD_INT 103
11622: PUSH
11623: LD_INT 103
11625: PUSH
11626: LD_INT 5
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: PUSH
11635: LD_INT 21
11637: PUSH
11638: LD_INT 89
11640: PUSH
11641: LD_INT 101
11643: PUSH
11644: LD_INT 1
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 16
11655: PUSH
11656: LD_INT 95
11658: PUSH
11659: LD_INT 104
11661: PUSH
11662: LD_INT 4
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: PUSH
11671: LD_INT 24
11673: PUSH
11674: LD_INT 92
11676: PUSH
11677: LD_INT 105
11679: PUSH
11680: LD_INT 0
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11713: LD_ADDR_VAR 0 3
11717: PUSH
11718: LD_INT 22
11720: PUSH
11721: LD_INT 3
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 3
11730: PUSH
11731: LD_INT 25
11733: PUSH
11734: LD_INT 2
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: PPUSH
11749: CALL_OW 69
11753: PUSH
11754: FOR_IN
11755: IFFALSE 11774
// AddComAgressiveMove ( i , 96 , 99 ) ;
11757: LD_VAR 0 3
11761: PPUSH
11762: LD_INT 96
11764: PPUSH
11765: LD_INT 99
11767: PPUSH
11768: CALL_OW 174
11772: GO 11754
11774: POP
11775: POP
// for i := 1 to buildingsTab do
11776: LD_ADDR_VAR 0 3
11780: PUSH
11781: DOUBLE
11782: LD_INT 1
11784: DEC
11785: ST_TO_ADDR
11786: LD_VAR 0 5
11790: PUSH
11791: FOR_TO
11792: IFFALSE 11865
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11794: LD_VAR 0 4
11798: PPUSH
11799: LD_VAR 0 5
11803: PUSH
11804: LD_VAR 0 3
11808: ARRAY
11809: PUSH
11810: LD_INT 1
11812: ARRAY
11813: PPUSH
11814: LD_VAR 0 5
11818: PUSH
11819: LD_VAR 0 3
11823: ARRAY
11824: PUSH
11825: LD_INT 2
11827: ARRAY
11828: PPUSH
11829: LD_VAR 0 5
11833: PUSH
11834: LD_VAR 0 3
11838: ARRAY
11839: PUSH
11840: LD_INT 3
11842: ARRAY
11843: PPUSH
11844: LD_VAR 0 5
11848: PUSH
11849: LD_VAR 0 3
11853: ARRAY
11854: PUSH
11855: LD_INT 4
11857: ARRAY
11858: PPUSH
11859: CALL_OW 205
11863: GO 11791
11865: POP
11866: POP
// end ; if position = 3 then
11867: LD_VAR 0 1
11871: PUSH
11872: LD_INT 3
11874: EQUAL
11875: IFFALSE 12661
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11877: LD_ADDR_VAR 0 4
11881: PUSH
11882: LD_INT 22
11884: PUSH
11885: LD_INT 3
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 25
11894: PUSH
11895: LD_INT 2
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PPUSH
11906: CALL_OW 69
11910: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
11911: LD_ADDR_VAR 0 5
11915: PUSH
11916: LD_INT 0
11918: PUSH
11919: LD_INT 151
11921: PUSH
11922: LD_INT 71
11924: PUSH
11925: LD_INT 4
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 4
11936: PUSH
11937: LD_INT 145
11939: PUSH
11940: LD_INT 53
11942: PUSH
11943: LD_INT 3
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 4
11954: PUSH
11955: LD_INT 172
11957: PUSH
11958: LD_INT 102
11960: PUSH
11961: LD_INT 5
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 29
11972: PUSH
11973: LD_INT 152
11975: PUSH
11976: LD_INT 85
11978: PUSH
11979: LD_INT 3
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 30
11990: PUSH
11991: LD_INT 156
11993: PUSH
11994: LD_INT 92
11996: PUSH
11997: LD_INT 3
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 28
12008: PUSH
12009: LD_INT 151
12011: PUSH
12012: LD_INT 66
12014: PUSH
12015: LD_INT 4
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 2
12026: PUSH
12027: LD_INT 163
12029: PUSH
12030: LD_INT 95
12032: PUSH
12033: LD_INT 5
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 28
12044: PUSH
12045: LD_INT 149
12047: PUSH
12048: LD_INT 63
12050: PUSH
12051: LD_INT 4
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 17
12062: PUSH
12063: LD_INT 167
12065: PUSH
12066: LD_INT 99
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 18
12080: PUSH
12081: LD_INT 163
12083: PUSH
12084: LD_INT 98
12086: PUSH
12087: LD_INT 0
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 28
12098: PUSH
12099: LD_INT 154
12101: PUSH
12102: LD_INT 70
12104: PUSH
12105: LD_INT 4
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 32
12116: PUSH
12117: LD_INT 155
12119: PUSH
12120: LD_INT 62
12122: PUSH
12123: LD_INT 4
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 32
12134: PUSH
12135: LD_INT 161
12137: PUSH
12138: LD_INT 69
12140: PUSH
12141: LD_INT 4
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 32
12152: PUSH
12153: LD_INT 168
12155: PUSH
12156: LD_INT 78
12158: PUSH
12159: LD_INT 4
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 32
12170: PUSH
12171: LD_INT 163
12173: PUSH
12174: LD_INT 80
12176: PUSH
12177: LD_INT 5
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 32
12188: PUSH
12189: LD_INT 136
12191: PUSH
12192: LD_INT 73
12194: PUSH
12195: LD_INT 0
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 32
12206: PUSH
12207: LD_INT 157
12209: PUSH
12210: LD_INT 98
12212: PUSH
12213: LD_INT 0
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 32
12224: PUSH
12225: LD_INT 150
12227: PUSH
12228: LD_INT 87
12230: PUSH
12231: LD_INT 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 33
12242: PUSH
12243: LD_INT 171
12245: PUSH
12246: LD_INT 97
12248: PUSH
12249: LD_INT 4
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 33
12260: PUSH
12261: LD_INT 168
12263: PUSH
12264: LD_INT 92
12266: PUSH
12267: LD_INT 4
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 33
12278: PUSH
12279: LD_INT 166
12281: PUSH
12282: LD_INT 80
12284: PUSH
12285: LD_INT 5
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 33
12296: PUSH
12297: LD_INT 141
12299: PUSH
12300: LD_INT 54
12302: PUSH
12303: LD_INT 2
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 33
12314: PUSH
12315: LD_INT 133
12317: PUSH
12318: LD_INT 57
12320: PUSH
12321: LD_INT 2
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 33
12332: PUSH
12333: LD_INT 132
12335: PUSH
12336: LD_INT 61
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 33
12350: PUSH
12351: LD_INT 150
12353: PUSH
12354: LD_INT 82
12356: PUSH
12357: LD_INT 0
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 33
12368: PUSH
12369: LD_INT 132
12371: PUSH
12372: LD_INT 72
12374: PUSH
12375: LD_INT 0
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 6
12386: PUSH
12387: LD_INT 146
12389: PUSH
12390: LD_INT 64
12392: PUSH
12393: LD_INT 4
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 6
12404: PUSH
12405: LD_INT 159
12407: PUSH
12408: LD_INT 85
12410: PUSH
12411: LD_INT 4
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 21
12422: PUSH
12423: LD_INT 163
12425: PUSH
12426: LD_INT 91
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 16
12440: PUSH
12441: LD_INT 166
12443: PUSH
12444: LD_INT 95
12446: PUSH
12447: LD_INT 4
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 24
12458: PUSH
12459: LD_INT 159
12461: PUSH
12462: LD_INT 95
12464: PUSH
12465: LD_INT 1
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12507: LD_ADDR_VAR 0 3
12511: PUSH
12512: LD_INT 22
12514: PUSH
12515: LD_INT 3
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 3
12524: PUSH
12525: LD_INT 25
12527: PUSH
12528: LD_INT 2
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: PUSH
12539: EMPTY
12540: LIST
12541: LIST
12542: PPUSH
12543: CALL_OW 69
12547: PUSH
12548: FOR_IN
12549: IFFALSE 12568
// AddComAgressiveMove ( i , 141 , 65 ) ;
12551: LD_VAR 0 3
12555: PPUSH
12556: LD_INT 141
12558: PPUSH
12559: LD_INT 65
12561: PPUSH
12562: CALL_OW 174
12566: GO 12548
12568: POP
12569: POP
// for i := 1 to buildingsTab do
12570: LD_ADDR_VAR 0 3
12574: PUSH
12575: DOUBLE
12576: LD_INT 1
12578: DEC
12579: ST_TO_ADDR
12580: LD_VAR 0 5
12584: PUSH
12585: FOR_TO
12586: IFFALSE 12659
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12588: LD_VAR 0 4
12592: PPUSH
12593: LD_VAR 0 5
12597: PUSH
12598: LD_VAR 0 3
12602: ARRAY
12603: PUSH
12604: LD_INT 1
12606: ARRAY
12607: PPUSH
12608: LD_VAR 0 5
12612: PUSH
12613: LD_VAR 0 3
12617: ARRAY
12618: PUSH
12619: LD_INT 2
12621: ARRAY
12622: PPUSH
12623: LD_VAR 0 5
12627: PUSH
12628: LD_VAR 0 3
12632: ARRAY
12633: PUSH
12634: LD_INT 3
12636: ARRAY
12637: PPUSH
12638: LD_VAR 0 5
12642: PUSH
12643: LD_VAR 0 3
12647: ARRAY
12648: PUSH
12649: LD_INT 4
12651: ARRAY
12652: PPUSH
12653: CALL_OW 205
12657: GO 12585
12659: POP
12660: POP
// end ; end ;
12661: LD_VAR 0 2
12665: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12666: LD_INT 0
12668: PPUSH
12669: PPUSH
12670: PPUSH
12671: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12672: LD_ADDR_VAR 0 3
12676: PUSH
12677: LD_INT 22
12679: PUSH
12680: LD_INT 2
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 25
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PPUSH
12701: CALL_OW 69
12705: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12706: LD_VAR 0 3
12710: PPUSH
12711: LD_INT 0
12713: PPUSH
12714: LD_INT 71
12716: PPUSH
12717: LD_INT 15
12719: PPUSH
12720: LD_INT 3
12722: PPUSH
12723: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12727: LD_ADDR_VAR 0 4
12731: PUSH
12732: LD_INT 6
12734: PUSH
12735: LD_INT 77
12737: PUSH
12738: LD_INT 18
12740: PUSH
12741: LD_INT 3
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 4
12752: PUSH
12753: LD_INT 77
12755: PUSH
12756: LD_INT 26
12758: PUSH
12759: LD_INT 0
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 31
12770: PUSH
12771: LD_INT 82
12773: PUSH
12774: LD_INT 28
12776: PUSH
12777: LD_INT 0
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: LD_INT 31
12788: PUSH
12789: LD_INT 84
12791: PUSH
12792: LD_INT 21
12794: PUSH
12795: LD_INT 3
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 31
12806: PUSH
12807: LD_INT 66
12809: PUSH
12810: LD_INT 14
12812: PUSH
12813: LD_INT 2
12815: PUSH
12816: EMPTY
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: PUSH
12822: LD_INT 27
12824: PUSH
12825: LD_INT 67
12827: PUSH
12828: LD_INT 18
12830: PUSH
12831: LD_INT 5
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 27
12842: PUSH
12843: LD_INT 69
12845: PUSH
12846: LD_INT 23
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: ST_TO_ADDR
// for i := 1 to buildingsTab do
12867: LD_ADDR_VAR 0 2
12871: PUSH
12872: DOUBLE
12873: LD_INT 1
12875: DEC
12876: ST_TO_ADDR
12877: LD_VAR 0 4
12881: PUSH
12882: FOR_TO
12883: IFFALSE 12956
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12885: LD_VAR 0 3
12889: PPUSH
12890: LD_VAR 0 4
12894: PUSH
12895: LD_VAR 0 2
12899: ARRAY
12900: PUSH
12901: LD_INT 1
12903: ARRAY
12904: PPUSH
12905: LD_VAR 0 4
12909: PUSH
12910: LD_VAR 0 2
12914: ARRAY
12915: PUSH
12916: LD_INT 2
12918: ARRAY
12919: PPUSH
12920: LD_VAR 0 4
12924: PUSH
12925: LD_VAR 0 2
12929: ARRAY
12930: PUSH
12931: LD_INT 3
12933: ARRAY
12934: PPUSH
12935: LD_VAR 0 4
12939: PUSH
12940: LD_VAR 0 2
12944: ARRAY
12945: PUSH
12946: LD_INT 4
12948: ARRAY
12949: PPUSH
12950: CALL_OW 205
12954: GO 12882
12956: POP
12957: POP
// end ;
12958: LD_VAR 0 1
12962: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
12963: LD_INT 0
12965: PPUSH
12966: PPUSH
12967: PPUSH
12968: PPUSH
12969: PPUSH
12970: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
12971: LD_ADDR_VAR 0 7
12975: PUSH
12976: LD_INT 22
12978: PUSH
12979: LD_VAR 0 1
12983: PUSH
12984: EMPTY
12985: LIST
12986: LIST
12987: PUSH
12988: LD_INT 25
12990: PUSH
12991: LD_INT 9
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PUSH
12998: EMPTY
12999: LIST
13000: LIST
13001: PPUSH
13002: CALL_OW 69
13006: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13007: LD_ADDR_VAR 0 8
13011: PUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 2
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 3
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 3
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PPUSH
13045: CALL_OW 69
13049: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13050: LD_ADDR_VAR 0 5
13054: PUSH
13055: LD_INT 1
13057: PPUSH
13058: LD_INT 3
13060: PPUSH
13061: CALL_OW 12
13065: ST_TO_ADDR
// for i = 1 to list do
13066: LD_ADDR_VAR 0 6
13070: PUSH
13071: DOUBLE
13072: LD_INT 1
13074: DEC
13075: ST_TO_ADDR
13076: LD_VAR 0 7
13080: PUSH
13081: FOR_TO
13082: IFFALSE 14072
// for ta in filter do
13084: LD_ADDR_VAR 0 4
13088: PUSH
13089: LD_VAR 0 8
13093: PUSH
13094: FOR_IN
13095: IFFALSE 14068
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13097: LD_VAR 0 7
13101: PUSH
13102: LD_VAR 0 6
13106: ARRAY
13107: PPUSH
13108: LD_VAR 0 4
13112: PPUSH
13113: CALL_OW 296
13117: PUSH
13118: LD_INT 15
13120: LESSEQUAL
13121: IFFALSE 14066
// begin case c of 1 :
13123: LD_VAR 0 5
13127: PUSH
13128: LD_INT 1
13130: DOUBLE
13131: EQUAL
13132: IFTRUE 13136
13134: GO 13568
13136: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13137: LD_VAR 0 7
13141: PUSH
13142: LD_VAR 0 6
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 4
13152: PPUSH
13153: CALL_OW 250
13157: PPUSH
13158: LD_VAR 0 4
13162: PPUSH
13163: CALL_OW 251
13167: PPUSH
13168: CALL_OW 154
// if eventVar2 = 0 then
13172: LD_EXP 62
13176: PUSH
13177: LD_INT 0
13179: EQUAL
13180: IFFALSE 13566
// begin eventVar2 = 1 ;
13182: LD_ADDR_EXP 62
13186: PUSH
13187: LD_INT 1
13189: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13190: LD_INT 245
13192: PPUSH
13193: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13197: LD_VAR 0 4
13201: PPUSH
13202: CALL_OW 250
13206: PPUSH
13207: LD_VAR 0 4
13211: PPUSH
13212: CALL_OW 251
13216: PPUSH
13217: CALL_OW 84
// DialogueOn ;
13221: CALL_OW 6
// if IsOK ( Cyrus ) then
13225: LD_EXP 5
13229: PPUSH
13230: CALL_OW 302
13234: IFFALSE 13250
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13236: LD_EXP 5
13240: PPUSH
13241: LD_STRING D9a-Cyrus-1
13243: PPUSH
13244: CALL_OW 88
// end else
13248: GO 13372
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13250: LD_INT 22
13252: PUSH
13253: LD_INT 1
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: LD_INT 26
13262: PUSH
13263: LD_INT 1
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 2
13272: PUSH
13273: LD_INT 25
13275: PUSH
13276: LD_INT 1
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: LD_INT 25
13285: PUSH
13286: LD_INT 2
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: PUSH
13293: LD_INT 25
13295: PUSH
13296: LD_INT 3
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: PUSH
13303: LD_INT 25
13305: PUSH
13306: LD_INT 4
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 25
13315: PUSH
13316: LD_INT 5
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: EMPTY
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: LIST
13335: PPUSH
13336: CALL_OW 69
13340: PUSH
13341: LD_EXP 1
13345: PUSH
13346: LD_EXP 14
13350: PUSH
13351: LD_EXP 5
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: DIFF
13361: PPUSH
13362: LD_STRING D9a-Sol1-1
13364: PPUSH
13365: LD_STRING D9a-Sol1-1
13367: PPUSH
13368: CALL 9618 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13372: LD_INT 22
13374: PUSH
13375: LD_INT 1
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: PUSH
13382: LD_INT 26
13384: PUSH
13385: LD_INT 1
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 2
13394: PUSH
13395: LD_INT 25
13397: PUSH
13398: LD_INT 1
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 25
13407: PUSH
13408: LD_INT 2
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 25
13417: PUSH
13418: LD_INT 3
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 25
13427: PUSH
13428: LD_INT 4
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 25
13437: PUSH
13438: LD_INT 5
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: LIST
13449: LIST
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: PPUSH
13458: CALL_OW 69
13462: PUSH
13463: LD_EXP 1
13467: PUSH
13468: LD_EXP 14
13472: PUSH
13473: LD_EXP 5
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: DIFF
13483: PPUSH
13484: LD_STRING D9b-Sol1-1
13486: PPUSH
13487: LD_STRING D9b-Sol1-1
13489: PPUSH
13490: CALL 9618 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13494: LD_STRING 09_arInfo
13496: PPUSH
13497: LD_INT 0
13499: PPUSH
13500: CALL_OW 30
13504: PUSH
13505: LD_INT 1
13507: EQUAL
13508: IFFALSE 13522
// Say ( JMM , D9a-JMM-1 ) ;
13510: LD_EXP 1
13514: PPUSH
13515: LD_STRING D9a-JMM-1
13517: PPUSH
13518: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13522: LD_EXP 1
13526: PPUSH
13527: LD_STRING D9c-JMM-1
13529: PPUSH
13530: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13534: LD_INT 12
13536: PPUSH
13537: LD_INT 1
13539: PPUSH
13540: CALL_OW 321
13544: PUSH
13545: LD_INT 2
13547: EQUAL
13548: IFFALSE 13562
// Say ( JMM , D9c-JMM-1a ) ;
13550: LD_EXP 1
13554: PPUSH
13555: LD_STRING D9c-JMM-1a
13557: PPUSH
13558: CALL_OW 88
// DialogueOff ;
13562: CALL_OW 7
// end ; end ; 2 :
13566: GO 14066
13568: LD_INT 2
13570: DOUBLE
13571: EQUAL
13572: IFTRUE 13576
13574: GO 14034
13576: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13577: LD_VAR 0 7
13581: PUSH
13582: LD_VAR 0 6
13586: ARRAY
13587: PPUSH
13588: LD_VAR 0 4
13592: PPUSH
13593: CALL_OW 250
13597: PUSH
13598: LD_INT 1
13600: NEG
13601: PPUSH
13602: LD_INT 1
13604: PPUSH
13605: CALL_OW 12
13609: PLUS
13610: PPUSH
13611: LD_VAR 0 4
13615: PPUSH
13616: CALL_OW 251
13620: PUSH
13621: LD_INT 1
13623: NEG
13624: PPUSH
13625: LD_INT 1
13627: PPUSH
13628: CALL_OW 12
13632: PLUS
13633: PPUSH
13634: CALL_OW 153
// if eventVar2 = 0 then
13638: LD_EXP 62
13642: PUSH
13643: LD_INT 0
13645: EQUAL
13646: IFFALSE 14032
// begin eventVar2 = 1 ;
13648: LD_ADDR_EXP 62
13652: PUSH
13653: LD_INT 1
13655: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13656: LD_INT 245
13658: PPUSH
13659: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13663: LD_VAR 0 4
13667: PPUSH
13668: CALL_OW 250
13672: PPUSH
13673: LD_VAR 0 4
13677: PPUSH
13678: CALL_OW 251
13682: PPUSH
13683: CALL_OW 84
// DialogueOn ;
13687: CALL_OW 6
// if IsOK ( Cyrus ) then
13691: LD_EXP 5
13695: PPUSH
13696: CALL_OW 302
13700: IFFALSE 13716
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13702: LD_EXP 5
13706: PPUSH
13707: LD_STRING D9a-Cyrus-1
13709: PPUSH
13710: CALL_OW 88
// end else
13714: GO 13838
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13716: LD_INT 22
13718: PUSH
13719: LD_INT 1
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: PUSH
13726: LD_INT 26
13728: PUSH
13729: LD_INT 1
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PUSH
13736: LD_INT 2
13738: PUSH
13739: LD_INT 25
13741: PUSH
13742: LD_INT 1
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 25
13751: PUSH
13752: LD_INT 2
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: LD_INT 25
13761: PUSH
13762: LD_INT 3
13764: PUSH
13765: EMPTY
13766: LIST
13767: LIST
13768: PUSH
13769: LD_INT 25
13771: PUSH
13772: LD_INT 4
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: PUSH
13779: LD_INT 25
13781: PUSH
13782: LD_INT 5
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: PUSH
13807: LD_EXP 1
13811: PUSH
13812: LD_EXP 14
13816: PUSH
13817: LD_EXP 5
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: LIST
13826: DIFF
13827: PPUSH
13828: LD_STRING D9a-Sol1-1
13830: PPUSH
13831: LD_STRING D9a-Sol1-1
13833: PPUSH
13834: CALL 9618 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13838: LD_INT 22
13840: PUSH
13841: LD_INT 1
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 26
13850: PUSH
13851: LD_INT 1
13853: PUSH
13854: EMPTY
13855: LIST
13856: LIST
13857: PUSH
13858: LD_INT 2
13860: PUSH
13861: LD_INT 25
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 25
13873: PUSH
13874: LD_INT 2
13876: PUSH
13877: EMPTY
13878: LIST
13879: LIST
13880: PUSH
13881: LD_INT 25
13883: PUSH
13884: LD_INT 3
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 25
13893: PUSH
13894: LD_INT 4
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 25
13903: PUSH
13904: LD_INT 5
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: LIST
13923: PPUSH
13924: CALL_OW 69
13928: PUSH
13929: LD_EXP 1
13933: PUSH
13934: LD_EXP 14
13938: PUSH
13939: LD_EXP 5
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: LIST
13948: DIFF
13949: PPUSH
13950: LD_STRING D9b-Sol1-1
13952: PPUSH
13953: LD_STRING D9b-Sol1-1
13955: PPUSH
13956: CALL 9618 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13960: LD_STRING 09_arInfo
13962: PPUSH
13963: LD_INT 0
13965: PPUSH
13966: CALL_OW 30
13970: PUSH
13971: LD_INT 1
13973: EQUAL
13974: IFFALSE 13988
// Say ( JMM , D9a-JMM-1 ) ;
13976: LD_EXP 1
13980: PPUSH
13981: LD_STRING D9a-JMM-1
13983: PPUSH
13984: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13988: LD_EXP 1
13992: PPUSH
13993: LD_STRING D9c-JMM-1
13995: PPUSH
13996: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14000: LD_INT 12
14002: PPUSH
14003: LD_INT 1
14005: PPUSH
14006: CALL_OW 321
14010: PUSH
14011: LD_INT 2
14013: EQUAL
14014: IFFALSE 14028
// Say ( JMM , D9c-JMM-1a ) ;
14016: LD_EXP 1
14020: PPUSH
14021: LD_STRING D9c-JMM-1a
14023: PPUSH
14024: CALL_OW 88
// DialogueOff ;
14028: CALL_OW 7
// end ; end ; 3 :
14032: GO 14066
14034: LD_INT 3
14036: DOUBLE
14037: EQUAL
14038: IFTRUE 14042
14040: GO 14065
14042: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14043: LD_VAR 0 7
14047: PUSH
14048: LD_VAR 0 6
14052: ARRAY
14053: PPUSH
14054: LD_VAR 0 4
14058: PPUSH
14059: CALL_OW 115
14063: GO 14066
14065: POP
// end ; end ;
14066: GO 13094
14068: POP
14069: POP
14070: GO 13081
14072: POP
14073: POP
// end ;
14074: LD_VAR 0 3
14078: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14079: LD_INT 0
14081: PPUSH
14082: PPUSH
14083: PPUSH
14084: PPUSH
// for i = 1 to 72 do
14085: LD_ADDR_VAR 0 5
14089: PUSH
14090: DOUBLE
14091: LD_INT 1
14093: DEC
14094: ST_TO_ADDR
14095: LD_INT 72
14097: PUSH
14098: FOR_TO
14099: IFFALSE 14157
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14101: LD_VAR 0 5
14105: PPUSH
14106: LD_VAR 0 1
14110: PPUSH
14111: CALL_OW 321
14115: PUSH
14116: LD_INT 1
14118: EQUAL
14119: PUSH
14120: LD_VAR 0 5
14124: PPUSH
14125: LD_VAR 0 3
14129: PPUSH
14130: CALL_OW 482
14134: PUSH
14135: LD_INT 1
14137: EQUAL
14138: AND
14139: IFFALSE 14155
// AddComResearch ( lab , i ) ;
14141: LD_VAR 0 2
14145: PPUSH
14146: LD_VAR 0 5
14150: PPUSH
14151: CALL_OW 184
14155: GO 14098
14157: POP
14158: POP
// end ;
14159: LD_VAR 0 4
14163: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14164: LD_INT 0
14166: PPUSH
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
14171: PPUSH
14172: PPUSH
14173: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14174: LD_ADDR_VAR 0 6
14178: PUSH
14179: LD_INT 22
14181: PUSH
14182: LD_VAR 0 1
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: PUSH
14191: LD_INT 56
14193: PUSH
14194: EMPTY
14195: LIST
14196: PUSH
14197: LD_INT 24
14199: PUSH
14200: LD_INT 700
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: LD_INT 60
14212: PUSH
14213: EMPTY
14214: LIST
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 25
14225: PUSH
14226: LD_INT 1
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 25
14235: PUSH
14236: LD_INT 9
14238: PUSH
14239: EMPTY
14240: LIST
14241: LIST
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: LIST
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: PPUSH
14255: CALL_OW 69
14259: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14260: LD_ADDR_VAR 0 7
14264: PUSH
14265: LD_INT 22
14267: PUSH
14268: LD_VAR 0 1
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 30
14279: PUSH
14280: LD_INT 32
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 58
14289: PUSH
14290: EMPTY
14291: LIST
14292: PUSH
14293: LD_INT 24
14295: PUSH
14296: LD_INT 251
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PPUSH
14309: CALL_OW 69
14313: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14314: LD_ADDR_VAR 0 9
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_VAR 0 1
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 2
14333: PUSH
14334: LD_INT 30
14336: PUSH
14337: LD_INT 4
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 30
14346: PUSH
14347: LD_INT 5
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 24
14361: PUSH
14362: LD_INT 251
14364: PUSH
14365: EMPTY
14366: LIST
14367: LIST
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: PPUSH
14374: CALL_OW 69
14378: ST_TO_ADDR
// if barrackList > 0 then
14379: LD_VAR 0 9
14383: PUSH
14384: LD_INT 0
14386: GREATER
14387: IFFALSE 14522
// begin if turretList = 0 then
14389: LD_VAR 0 7
14393: PUSH
14394: LD_INT 0
14396: EQUAL
14397: IFFALSE 14446
// begin for i in soldiers_list do
14399: LD_ADDR_VAR 0 4
14403: PUSH
14404: LD_VAR 0 6
14408: PUSH
14409: FOR_IN
14410: IFFALSE 14442
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14412: LD_VAR 0 4
14416: PPUSH
14417: LD_VAR 0 9
14421: PUSH
14422: LD_INT 1
14424: PPUSH
14425: LD_VAR 0 9
14429: PPUSH
14430: CALL_OW 12
14434: ARRAY
14435: PPUSH
14436: CALL_OW 120
14440: GO 14409
14442: POP
14443: POP
// end else
14444: GO 14522
// begin for i in barrackList do
14446: LD_ADDR_VAR 0 4
14450: PUSH
14451: LD_VAR 0 9
14455: PUSH
14456: FOR_IN
14457: IFFALSE 14520
// begin insideUnits = UnitsInside ( i ) ;
14459: LD_ADDR_VAR 0 10
14463: PUSH
14464: LD_VAR 0 4
14468: PPUSH
14469: CALL_OW 313
14473: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14474: LD_VAR 0 10
14478: PUSH
14479: LD_INT 1
14481: ARRAY
14482: PPUSH
14483: LD_VAR 0 7
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14496: LD_VAR 0 6
14500: PUSH
14501: LD_INT 1
14503: ARRAY
14504: PPUSH
14505: LD_VAR 0 7
14509: PUSH
14510: LD_INT 1
14512: ARRAY
14513: PPUSH
14514: CALL_OW 120
// end ;
14518: GO 14456
14520: POP
14521: POP
// end ; end ; end ;
14522: LD_VAR 0 3
14526: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14527: LD_INT 0
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
14534: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14535: LD_ADDR_VAR 0 6
14539: PUSH
14540: LD_VAR 0 2
14544: PPUSH
14545: CALL_OW 313
14549: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14550: LD_ADDR_VAR 0 7
14554: PUSH
14555: LD_INT 22
14557: PUSH
14558: LD_VAR 0 1
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 25
14569: PUSH
14570: LD_INT 2
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PUSH
14577: LD_INT 24
14579: PUSH
14580: LD_INT 1000
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 3
14589: PUSH
14590: LD_INT 54
14592: PUSH
14593: EMPTY
14594: LIST
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: PPUSH
14606: CALL_OW 69
14610: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14611: LD_ADDR_VAR 0 4
14615: PUSH
14616: LD_INT 22
14618: PUSH
14619: LD_VAR 0 1
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PUSH
14628: LD_INT 21
14630: PUSH
14631: LD_INT 3
14633: PUSH
14634: EMPTY
14635: LIST
14636: LIST
14637: PUSH
14638: LD_INT 3
14640: PUSH
14641: LD_INT 24
14643: PUSH
14644: LD_INT 1000
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: PUSH
14651: EMPTY
14652: LIST
14653: LIST
14654: PUSH
14655: EMPTY
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: PPUSH
14663: CALL_OW 69
14667: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14668: LD_VAR 0 4
14672: NOT
14673: PUSH
14674: LD_VAR 0 7
14678: NOT
14679: AND
14680: PUSH
14681: LD_EXP 42
14685: NOT
14686: AND
14687: IFFALSE 14691
// exit ;
14689: GO 14882
// if buildings_list > 0 and engineerOkInside then
14691: LD_VAR 0 4
14695: PUSH
14696: LD_INT 0
14698: GREATER
14699: PUSH
14700: LD_VAR 0 6
14704: AND
14705: IFFALSE 14759
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14707: LD_ADDR_VAR 0 5
14711: PUSH
14712: LD_INT 22
14714: PUSH
14715: LD_VAR 0 1
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: LD_INT 25
14726: PUSH
14727: LD_INT 2
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PPUSH
14738: CALL_OW 69
14742: PUSH
14743: FOR_IN
14744: IFFALSE 14757
// ComExitBuilding ( i ) ;
14746: LD_VAR 0 5
14750: PPUSH
14751: CALL_OW 122
14755: GO 14743
14757: POP
14758: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14759: LD_VAR 0 4
14763: PUSH
14764: LD_INT 0
14766: GREATER
14767: PUSH
14768: LD_VAR 0 7
14772: PUSH
14773: LD_INT 0
14775: GREATER
14776: AND
14777: IFFALSE 14831
// begin for i in engineerOkOutside do
14779: LD_ADDR_VAR 0 5
14783: PUSH
14784: LD_VAR 0 7
14788: PUSH
14789: FOR_IN
14790: IFFALSE 14829
// for j in buildings_list do
14792: LD_ADDR_VAR 0 8
14796: PUSH
14797: LD_VAR 0 4
14801: PUSH
14802: FOR_IN
14803: IFFALSE 14825
// ComRepairBuilding ( i , j [ 1 ] ) ;
14805: LD_VAR 0 5
14809: PPUSH
14810: LD_VAR 0 8
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PPUSH
14819: CALL_OW 130
14823: GO 14802
14825: POP
14826: POP
14827: GO 14789
14829: POP
14830: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14831: LD_VAR 0 4
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: PUSH
14840: LD_VAR 0 7
14844: PUSH
14845: LD_INT 0
14847: GREATER
14848: AND
14849: IFFALSE 14882
// for i in engineerOkOutside do
14851: LD_ADDR_VAR 0 5
14855: PUSH
14856: LD_VAR 0 7
14860: PUSH
14861: FOR_IN
14862: IFFALSE 14880
// ComEnterUnit ( i , building ) ;
14864: LD_VAR 0 5
14868: PPUSH
14869: LD_VAR 0 2
14873: PPUSH
14874: CALL_OW 120
14878: GO 14861
14880: POP
14881: POP
// end ;
14882: LD_VAR 0 3
14886: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
14887: LD_INT 0
14889: PPUSH
14890: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
14891: LD_INT 22
14893: PUSH
14894: LD_VAR 0 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: LD_INT 25
14905: PUSH
14906: LD_INT 2
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PPUSH
14917: CALL_OW 69
14921: PUSH
14922: LD_INT 0
14924: GREATER
14925: PUSH
14926: LD_INT 22
14928: PUSH
14929: LD_VAR 0 1
14933: PUSH
14934: EMPTY
14935: LIST
14936: LIST
14937: PUSH
14938: LD_INT 21
14940: PUSH
14941: LD_INT 3
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: PUSH
14948: LD_INT 3
14950: PUSH
14951: LD_INT 24
14953: PUSH
14954: LD_INT 1000
14956: PUSH
14957: EMPTY
14958: LIST
14959: LIST
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: LIST
14969: PPUSH
14970: CALL_OW 69
14974: PUSH
14975: LD_INT 0
14977: EQUAL
14978: AND
14979: PUSH
14980: LD_VAR 0 2
14984: PUSH
14985: LD_INT 0
14987: GREATER
14988: AND
14989: IFFALSE 15088
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14991: LD_ADDR_VAR 0 4
14995: PUSH
14996: LD_INT 22
14998: PUSH
14999: LD_VAR 0 1
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 25
15010: PUSH
15011: LD_INT 2
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PPUSH
15022: CALL_OW 69
15026: PUSH
15027: FOR_IN
15028: IFFALSE 15086
// begin AddComExitBuilding ( i ) ;
15030: LD_VAR 0 4
15034: PPUSH
15035: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15039: LD_VAR 0 4
15043: PPUSH
15044: LD_VAR 0 2
15048: PUSH
15049: LD_INT 1
15051: ARRAY
15052: PPUSH
15053: LD_VAR 0 2
15057: PUSH
15058: LD_INT 2
15060: ARRAY
15061: PPUSH
15062: LD_VAR 0 2
15066: PUSH
15067: LD_INT 3
15069: ARRAY
15070: PPUSH
15071: LD_VAR 0 2
15075: PUSH
15076: LD_INT 4
15078: ARRAY
15079: PPUSH
15080: CALL_OW 205
// end ;
15084: GO 15027
15086: POP
15087: POP
// end ; end ;
15088: LD_VAR 0 3
15092: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15093: LD_INT 0
15095: PPUSH
15096: PPUSH
15097: PPUSH
15098: PPUSH
15099: PPUSH
15100: PPUSH
15101: PPUSH
15102: PPUSH
15103: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15104: LD_ADDR_VAR 0 6
15108: PUSH
15109: LD_INT 22
15111: PUSH
15112: LD_VAR 0 1
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: PUSH
15121: LD_INT 25
15123: PUSH
15124: LD_INT 4
15126: PUSH
15127: EMPTY
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 24
15133: PUSH
15134: LD_INT 251
15136: PUSH
15137: EMPTY
15138: LIST
15139: LIST
15140: PUSH
15141: EMPTY
15142: LIST
15143: LIST
15144: LIST
15145: PPUSH
15146: CALL_OW 69
15150: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15151: LD_ADDR_VAR 0 7
15155: PUSH
15156: LD_VAR 0 3
15160: PPUSH
15161: LD_INT 22
15163: PUSH
15164: LD_VAR 0 1
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: PUSH
15173: LD_INT 25
15175: PUSH
15176: LD_INT 4
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PUSH
15183: LD_INT 50
15185: PUSH
15186: EMPTY
15187: LIST
15188: PUSH
15189: EMPTY
15190: LIST
15191: LIST
15192: LIST
15193: PPUSH
15194: CALL_OW 70
15198: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15199: LD_ADDR_VAR 0 10
15203: PUSH
15204: LD_VAR 0 3
15208: PPUSH
15209: LD_INT 22
15211: PUSH
15212: LD_VAR 0 1
15216: PUSH
15217: EMPTY
15218: LIST
15219: LIST
15220: PUSH
15221: LD_INT 21
15223: PUSH
15224: LD_INT 1
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PUSH
15231: LD_INT 3
15233: PUSH
15234: LD_INT 25
15236: PUSH
15237: LD_INT 3
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: PUSH
15244: EMPTY
15245: LIST
15246: LIST
15247: PUSH
15248: LD_INT 3
15250: PUSH
15251: LD_INT 24
15253: PUSH
15254: LD_INT 750
15256: PUSH
15257: EMPTY
15258: LIST
15259: LIST
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: PPUSH
15271: CALL_OW 70
15275: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15276: LD_ADDR_VAR 0 11
15280: PUSH
15281: LD_VAR 0 2
15285: PPUSH
15286: LD_INT 22
15288: PUSH
15289: LD_VAR 0 1
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: LD_INT 21
15300: PUSH
15301: LD_INT 1
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 3
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: LD_INT 24
15330: PUSH
15331: LD_INT 1000
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: EMPTY
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: PPUSH
15348: CALL_OW 70
15352: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15353: LD_VAR 0 10
15357: NOT
15358: PUSH
15359: LD_VAR 0 7
15363: NOT
15364: AND
15365: PUSH
15366: LD_VAR 0 11
15370: NOT
15371: AND
15372: IFFALSE 15376
// exit ;
15374: GO 15636
// if damageUnits > 0 and sci_list > 0 then
15376: LD_VAR 0 10
15380: PUSH
15381: LD_INT 0
15383: GREATER
15384: PUSH
15385: LD_VAR 0 6
15389: PUSH
15390: LD_INT 0
15392: GREATER
15393: AND
15394: IFFALSE 15427
// for i in damageUnits do
15396: LD_ADDR_VAR 0 8
15400: PUSH
15401: LD_VAR 0 10
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15425
// ComMoveToArea ( i , healArea ) ;
15409: LD_VAR 0 8
15413: PPUSH
15414: LD_VAR 0 2
15418: PPUSH
15419: CALL_OW 113
15423: GO 15406
15425: POP
15426: POP
// if unitsToHeal > 0 and sci_list > 0 then
15427: LD_VAR 0 11
15431: PUSH
15432: LD_INT 0
15434: GREATER
15435: PUSH
15436: LD_VAR 0 6
15440: PUSH
15441: LD_INT 0
15443: GREATER
15444: AND
15445: IFFALSE 15504
// begin for i in sci_list do
15447: LD_ADDR_VAR 0 8
15451: PUSH
15452: LD_VAR 0 6
15456: PUSH
15457: FOR_IN
15458: IFFALSE 15502
// begin ComExitBuilding ( i ) ;
15460: LD_VAR 0 8
15464: PPUSH
15465: CALL_OW 122
// for j in unitsToHeal do
15469: LD_ADDR_VAR 0 9
15473: PUSH
15474: LD_VAR 0 11
15478: PUSH
15479: FOR_IN
15480: IFFALSE 15498
// AddComHeal ( i , j ) ;
15482: LD_VAR 0 8
15486: PPUSH
15487: LD_VAR 0 9
15491: PPUSH
15492: CALL_OW 188
15496: GO 15479
15498: POP
15499: POP
// end ;
15500: GO 15457
15502: POP
15503: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15504: LD_VAR 0 10
15508: PUSH
15509: LD_INT 0
15511: EQUAL
15512: PUSH
15513: LD_VAR 0 11
15517: PUSH
15518: LD_INT 0
15520: EQUAL
15521: AND
15522: PUSH
15523: LD_VAR 0 7
15527: PUSH
15528: LD_INT 0
15530: GREATER
15531: AND
15532: IFFALSE 15636
// for i in sci_listOutside do
15534: LD_ADDR_VAR 0 8
15538: PUSH
15539: LD_VAR 0 7
15543: PUSH
15544: FOR_IN
15545: IFFALSE 15634
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15547: LD_ADDR_VAR 0 12
15551: PUSH
15552: LD_INT 22
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 21
15566: PUSH
15567: LD_INT 3
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: LD_INT 30
15576: PUSH
15577: LD_INT 8
15579: PUSH
15580: EMPTY
15581: LIST
15582: LIST
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15594: LD_ADDR_VAR 0 13
15598: PUSH
15599: LD_INT 1
15601: PPUSH
15602: LD_VAR 0 12
15606: PPUSH
15607: CALL_OW 12
15611: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15612: LD_VAR 0 8
15616: PPUSH
15617: LD_VAR 0 12
15621: PUSH
15622: LD_VAR 0 13
15626: ARRAY
15627: PPUSH
15628: CALL_OW 120
// end ;
15632: GO 15544
15634: POP
15635: POP
// end ;
15636: LD_VAR 0 5
15640: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15641: LD_INT 0
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
15648: PPUSH
15649: PPUSH
15650: PPUSH
15651: PPUSH
15652: PPUSH
15653: PPUSH
// amChassisTab = [ ] ;
15654: LD_ADDR_VAR 0 19
15658: PUSH
15659: EMPTY
15660: ST_TO_ADDR
// arChassisTab = [ ] ;
15661: LD_ADDR_VAR 0 18
15665: PUSH
15666: EMPTY
15667: ST_TO_ADDR
// ruChassisTab = [ ] ;
15668: LD_ADDR_VAR 0 17
15672: PUSH
15673: EMPTY
15674: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15675: LD_INT 35
15677: PPUSH
15678: CALL_OW 67
// if nation = 1 then
15682: LD_VAR 0 5
15686: PUSH
15687: LD_INT 1
15689: EQUAL
15690: IFFALSE 16195
// begin uc_side = side ;
15692: LD_ADDR_OWVAR 20
15696: PUSH
15697: LD_VAR 0 2
15701: ST_TO_ADDR
// uc_nation = nation ;
15702: LD_ADDR_OWVAR 21
15706: PUSH
15707: LD_VAR 0 5
15711: ST_TO_ADDR
// vc_engine = vehengine ;
15712: LD_ADDR_OWVAR 39
15716: PUSH
15717: LD_VAR 0 6
15721: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15722: LD_ADDR_OWVAR 38
15726: PUSH
15727: LD_VAR 0 7
15731: PUSH
15732: LD_INT 1
15734: PPUSH
15735: LD_VAR 0 7
15739: PPUSH
15740: CALL_OW 12
15744: ARRAY
15745: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15746: LD_ADDR_OWVAR 40
15750: PUSH
15751: LD_VAR 0 10
15755: PUSH
15756: LD_INT 1
15758: PPUSH
15759: LD_VAR 0 10
15763: PPUSH
15764: CALL_OW 12
15768: ARRAY
15769: ST_TO_ADDR
// for j = 1 to AMWeapon do
15770: LD_ADDR_VAR 0 14
15774: PUSH
15775: DOUBLE
15776: LD_INT 1
15778: DEC
15779: ST_TO_ADDR
15780: LD_VAR 0 10
15784: PUSH
15785: FOR_TO
15786: IFFALSE 16087
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15788: LD_VAR 0 10
15792: PUSH
15793: LD_VAR 0 14
15797: ARRAY
15798: PUSH
15799: LD_INT 2
15801: EQUAL
15802: PUSH
15803: LD_VAR 0 10
15807: PUSH
15808: LD_VAR 0 14
15812: ARRAY
15813: PUSH
15814: LD_INT 3
15816: EQUAL
15817: OR
15818: IFFALSE 15871
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15820: LD_ADDR_VAR 0 19
15824: PUSH
15825: LD_INT 1
15827: PUSH
15828: LD_INT 2
15830: PUSH
15831: LD_INT 3
15833: PUSH
15834: LD_INT 4
15836: PUSH
15837: LD_INT 5
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15847: LD_ADDR_OWVAR 37
15851: PUSH
15852: LD_VAR 0 19
15856: PUSH
15857: LD_INT 1
15859: PPUSH
15860: LD_VAR 0 19
15864: PPUSH
15865: CALL_OW 12
15869: ARRAY
15870: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15871: LD_VAR 0 10
15875: PUSH
15876: LD_VAR 0 14
15880: ARRAY
15881: PUSH
15882: LD_INT 4
15884: EQUAL
15885: PUSH
15886: LD_VAR 0 10
15890: PUSH
15891: LD_VAR 0 14
15895: ARRAY
15896: PUSH
15897: LD_INT 5
15899: EQUAL
15900: OR
15901: PUSH
15902: LD_VAR 0 10
15906: PUSH
15907: LD_VAR 0 14
15911: ARRAY
15912: PUSH
15913: LD_INT 9
15915: EQUAL
15916: OR
15917: PUSH
15918: LD_VAR 0 10
15922: PUSH
15923: LD_VAR 0 14
15927: ARRAY
15928: PUSH
15929: LD_INT 11
15931: EQUAL
15932: OR
15933: PUSH
15934: LD_VAR 0 10
15938: PUSH
15939: LD_VAR 0 14
15943: ARRAY
15944: PUSH
15945: LD_INT 7
15947: EQUAL
15948: OR
15949: IFFALSE 15998
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
15951: LD_ADDR_VAR 0 19
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 4
15964: PUSH
15965: LD_INT 5
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15974: LD_ADDR_OWVAR 37
15978: PUSH
15979: LD_VAR 0 19
15983: PUSH
15984: LD_INT 1
15986: PPUSH
15987: LD_VAR 0 19
15991: PPUSH
15992: CALL_OW 12
15996: ARRAY
15997: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
15998: LD_VAR 0 10
16002: PUSH
16003: LD_VAR 0 14
16007: ARRAY
16008: PUSH
16009: LD_INT 8
16011: EQUAL
16012: PUSH
16013: LD_VAR 0 10
16017: PUSH
16018: LD_VAR 0 14
16022: ARRAY
16023: PUSH
16024: LD_INT 6
16026: EQUAL
16027: OR
16028: PUSH
16029: LD_VAR 0 10
16033: PUSH
16034: LD_VAR 0 14
16038: ARRAY
16039: PUSH
16040: LD_INT 10
16042: EQUAL
16043: OR
16044: IFFALSE 16085
// begin amChassisTab = [ 4 , 5 ] ;
16046: LD_ADDR_VAR 0 19
16050: PUSH
16051: LD_INT 4
16053: PUSH
16054: LD_INT 5
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16061: LD_ADDR_OWVAR 37
16065: PUSH
16066: LD_VAR 0 19
16070: PUSH
16071: LD_INT 1
16073: PPUSH
16074: LD_VAR 0 19
16078: PPUSH
16079: CALL_OW 12
16083: ARRAY
16084: ST_TO_ADDR
// end ; end ;
16085: GO 15785
16087: POP
16088: POP
// veh = CreateVehicle ;
16089: LD_ADDR_VAR 0 16
16093: PUSH
16094: CALL_OW 45
16098: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16099: LD_VAR 0 16
16103: PPUSH
16104: LD_VAR 0 1
16108: PPUSH
16109: LD_INT 0
16111: PPUSH
16112: CALL_OW 49
// if vc_control = 1 then
16116: LD_OWVAR 38
16120: PUSH
16121: LD_INT 1
16123: EQUAL
16124: IFFALSE 16181
// begin hc_gallery =  ;
16126: LD_ADDR_OWVAR 33
16130: PUSH
16131: LD_STRING 
16133: ST_TO_ADDR
// hc_name =  ;
16134: LD_ADDR_OWVAR 26
16138: PUSH
16139: LD_STRING 
16141: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16142: LD_INT 0
16144: PPUSH
16145: LD_INT 3
16147: PPUSH
16148: LD_VAR 0 4
16152: PPUSH
16153: CALL_OW 380
// un = CreateHuman ;
16157: LD_ADDR_VAR 0 15
16161: PUSH
16162: CALL_OW 44
16166: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16167: LD_VAR 0 15
16171: PPUSH
16172: LD_VAR 0 16
16176: PPUSH
16177: CALL_OW 52
// end ; i = i + 1 ;
16181: LD_ADDR_VAR 0 13
16185: PUSH
16186: LD_VAR 0 13
16190: PUSH
16191: LD_INT 1
16193: PLUS
16194: ST_TO_ADDR
// end ; if nation = 2 then
16195: LD_VAR 0 5
16199: PUSH
16200: LD_INT 2
16202: EQUAL
16203: IFFALSE 16625
// begin uc_side = side ;
16205: LD_ADDR_OWVAR 20
16209: PUSH
16210: LD_VAR 0 2
16214: ST_TO_ADDR
// uc_nation = nation ;
16215: LD_ADDR_OWVAR 21
16219: PUSH
16220: LD_VAR 0 5
16224: ST_TO_ADDR
// vc_engine = vehengine ;
16225: LD_ADDR_OWVAR 39
16229: PUSH
16230: LD_VAR 0 6
16234: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16235: LD_ADDR_OWVAR 38
16239: PUSH
16240: LD_VAR 0 7
16244: PUSH
16245: LD_INT 1
16247: PPUSH
16248: LD_VAR 0 7
16252: PPUSH
16253: CALL_OW 12
16257: ARRAY
16258: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16259: LD_ADDR_OWVAR 40
16263: PUSH
16264: LD_VAR 0 9
16268: PUSH
16269: LD_INT 1
16271: PPUSH
16272: LD_VAR 0 9
16276: PPUSH
16277: CALL_OW 12
16281: ARRAY
16282: ST_TO_ADDR
// for j = 1 to ARWeapons do
16283: LD_ADDR_VAR 0 14
16287: PUSH
16288: DOUBLE
16289: LD_INT 1
16291: DEC
16292: ST_TO_ADDR
16293: LD_VAR 0 9
16297: PUSH
16298: FOR_TO
16299: IFFALSE 16517
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16301: LD_VAR 0 9
16305: PUSH
16306: LD_VAR 0 14
16310: ARRAY
16311: PUSH
16312: LD_INT 24
16314: EQUAL
16315: PUSH
16316: LD_VAR 0 9
16320: PUSH
16321: LD_VAR 0 14
16325: ARRAY
16326: PUSH
16327: LD_INT 22
16329: EQUAL
16330: OR
16331: PUSH
16332: LD_VAR 0 9
16336: PUSH
16337: LD_VAR 0 14
16341: ARRAY
16342: PUSH
16343: LD_INT 23
16345: EQUAL
16346: OR
16347: PUSH
16348: LD_VAR 0 9
16352: PUSH
16353: LD_VAR 0 14
16357: ARRAY
16358: PUSH
16359: LD_INT 30
16361: EQUAL
16362: OR
16363: IFFALSE 16400
// begin arChassisTab = [ 14 ] ;
16365: LD_ADDR_VAR 0 18
16369: PUSH
16370: LD_INT 14
16372: PUSH
16373: EMPTY
16374: LIST
16375: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16376: LD_ADDR_OWVAR 37
16380: PUSH
16381: LD_VAR 0 18
16385: PUSH
16386: LD_INT 1
16388: PPUSH
16389: LD_VAR 0 18
16393: PPUSH
16394: CALL_OW 12
16398: ARRAY
16399: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16400: LD_VAR 0 9
16404: PUSH
16405: LD_VAR 0 14
16409: ARRAY
16410: PUSH
16411: LD_INT 29
16413: EQUAL
16414: PUSH
16415: LD_VAR 0 9
16419: PUSH
16420: LD_VAR 0 14
16424: ARRAY
16425: PUSH
16426: LD_INT 28
16428: EQUAL
16429: OR
16430: PUSH
16431: LD_VAR 0 9
16435: PUSH
16436: LD_VAR 0 14
16440: ARRAY
16441: PUSH
16442: LD_INT 27
16444: EQUAL
16445: OR
16446: PUSH
16447: LD_VAR 0 9
16451: PUSH
16452: LD_VAR 0 14
16456: ARRAY
16457: PUSH
16458: LD_INT 26
16460: EQUAL
16461: OR
16462: PUSH
16463: LD_VAR 0 9
16467: PUSH
16468: LD_VAR 0 14
16472: ARRAY
16473: PUSH
16474: LD_INT 25
16476: EQUAL
16477: OR
16478: IFFALSE 16515
// begin arChassisTab = [ 14 ] ;
16480: LD_ADDR_VAR 0 18
16484: PUSH
16485: LD_INT 14
16487: PUSH
16488: EMPTY
16489: LIST
16490: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16491: LD_ADDR_OWVAR 37
16495: PUSH
16496: LD_VAR 0 18
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_VAR 0 18
16508: PPUSH
16509: CALL_OW 12
16513: ARRAY
16514: ST_TO_ADDR
// end ; end ;
16515: GO 16298
16517: POP
16518: POP
// veh = CreateVehicle ;
16519: LD_ADDR_VAR 0 16
16523: PUSH
16524: CALL_OW 45
16528: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16529: LD_VAR 0 16
16533: PPUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: LD_INT 0
16541: PPUSH
16542: CALL_OW 49
// if vc_control = 1 then
16546: LD_OWVAR 38
16550: PUSH
16551: LD_INT 1
16553: EQUAL
16554: IFFALSE 16611
// begin hc_gallery =  ;
16556: LD_ADDR_OWVAR 33
16560: PUSH
16561: LD_STRING 
16563: ST_TO_ADDR
// hc_name =  ;
16564: LD_ADDR_OWVAR 26
16568: PUSH
16569: LD_STRING 
16571: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16572: LD_INT 0
16574: PPUSH
16575: LD_INT 3
16577: PPUSH
16578: LD_VAR 0 4
16582: PPUSH
16583: CALL_OW 380
// un = CreateHuman ;
16587: LD_ADDR_VAR 0 15
16591: PUSH
16592: CALL_OW 44
16596: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16597: LD_VAR 0 15
16601: PPUSH
16602: LD_VAR 0 16
16606: PPUSH
16607: CALL_OW 52
// end ; i = i + 1 ;
16611: LD_ADDR_VAR 0 13
16615: PUSH
16616: LD_VAR 0 13
16620: PUSH
16621: LD_INT 1
16623: PLUS
16624: ST_TO_ADDR
// end ; if nation = 3 then
16625: LD_VAR 0 5
16629: PUSH
16630: LD_INT 3
16632: EQUAL
16633: IFFALSE 17039
// begin uc_side = side ;
16635: LD_ADDR_OWVAR 20
16639: PUSH
16640: LD_VAR 0 2
16644: ST_TO_ADDR
// uc_nation = nation ;
16645: LD_ADDR_OWVAR 21
16649: PUSH
16650: LD_VAR 0 5
16654: ST_TO_ADDR
// vc_engine = vehengine ;
16655: LD_ADDR_OWVAR 39
16659: PUSH
16660: LD_VAR 0 6
16664: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16665: LD_ADDR_OWVAR 38
16669: PUSH
16670: LD_VAR 0 7
16674: PUSH
16675: LD_INT 1
16677: PPUSH
16678: LD_VAR 0 7
16682: PPUSH
16683: CALL_OW 12
16687: ARRAY
16688: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16689: LD_ADDR_OWVAR 40
16693: PUSH
16694: LD_VAR 0 8
16698: PUSH
16699: LD_INT 1
16701: PPUSH
16702: LD_VAR 0 8
16706: PPUSH
16707: CALL_OW 12
16711: ARRAY
16712: ST_TO_ADDR
// for j = 1 to RuWeapons do
16713: LD_ADDR_VAR 0 14
16717: PUSH
16718: DOUBLE
16719: LD_INT 1
16721: DEC
16722: ST_TO_ADDR
16723: LD_VAR 0 8
16727: PUSH
16728: FOR_TO
16729: IFFALSE 16931
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16731: LD_VAR 0 8
16735: PUSH
16736: LD_VAR 0 14
16740: ARRAY
16741: PUSH
16742: LD_INT 42
16744: EQUAL
16745: PUSH
16746: LD_VAR 0 8
16750: PUSH
16751: LD_VAR 0 14
16755: ARRAY
16756: PUSH
16757: LD_INT 43
16759: EQUAL
16760: OR
16761: PUSH
16762: LD_VAR 0 8
16766: PUSH
16767: LD_VAR 0 14
16771: ARRAY
16772: PUSH
16773: LD_INT 44
16775: EQUAL
16776: OR
16777: PUSH
16778: LD_VAR 0 8
16782: PUSH
16783: LD_VAR 0 14
16787: ARRAY
16788: PUSH
16789: LD_INT 45
16791: EQUAL
16792: OR
16793: PUSH
16794: LD_VAR 0 8
16798: PUSH
16799: LD_VAR 0 14
16803: ARRAY
16804: PUSH
16805: LD_INT 49
16807: EQUAL
16808: OR
16809: IFFALSE 16858
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16811: LD_ADDR_VAR 0 17
16815: PUSH
16816: LD_INT 21
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_INT 23
16824: PUSH
16825: LD_INT 24
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16834: LD_ADDR_OWVAR 37
16838: PUSH
16839: LD_VAR 0 17
16843: PUSH
16844: LD_INT 1
16846: PPUSH
16847: LD_VAR 0 17
16851: PPUSH
16852: CALL_OW 12
16856: ARRAY
16857: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16858: LD_VAR 0 8
16862: PUSH
16863: LD_VAR 0 14
16867: ARRAY
16868: PUSH
16869: LD_INT 46
16871: EQUAL
16872: PUSH
16873: LD_VAR 0 8
16877: PUSH
16878: LD_VAR 0 14
16882: ARRAY
16883: PUSH
16884: LD_INT 47
16886: EQUAL
16887: OR
16888: IFFALSE 16929
// begin ruChassisTab = [ 23 , 24 ] ;
16890: LD_ADDR_VAR 0 17
16894: PUSH
16895: LD_INT 23
16897: PUSH
16898: LD_INT 24
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16905: LD_ADDR_OWVAR 37
16909: PUSH
16910: LD_VAR 0 17
16914: PUSH
16915: LD_INT 1
16917: PPUSH
16918: LD_VAR 0 17
16922: PPUSH
16923: CALL_OW 12
16927: ARRAY
16928: ST_TO_ADDR
// end ; end ;
16929: GO 16728
16931: POP
16932: POP
// veh = CreateVehicle ;
16933: LD_ADDR_VAR 0 16
16937: PUSH
16938: CALL_OW 45
16942: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16943: LD_VAR 0 16
16947: PPUSH
16948: LD_VAR 0 1
16952: PPUSH
16953: LD_INT 0
16955: PPUSH
16956: CALL_OW 49
// if vc_control = 1 then
16960: LD_OWVAR 38
16964: PUSH
16965: LD_INT 1
16967: EQUAL
16968: IFFALSE 17025
// begin hc_gallery =  ;
16970: LD_ADDR_OWVAR 33
16974: PUSH
16975: LD_STRING 
16977: ST_TO_ADDR
// hc_name =  ;
16978: LD_ADDR_OWVAR 26
16982: PUSH
16983: LD_STRING 
16985: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16986: LD_INT 0
16988: PPUSH
16989: LD_INT 3
16991: PPUSH
16992: LD_VAR 0 4
16996: PPUSH
16997: CALL_OW 380
// un = CreateHuman ;
17001: LD_ADDR_VAR 0 15
17005: PUSH
17006: CALL_OW 44
17010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17011: LD_VAR 0 15
17015: PPUSH
17016: LD_VAR 0 16
17020: PPUSH
17021: CALL_OW 52
// end ; i = i + 1 ;
17025: LD_ADDR_VAR 0 13
17029: PUSH
17030: LD_VAR 0 13
17034: PUSH
17035: LD_INT 1
17037: PLUS
17038: ST_TO_ADDR
// end ; until i = vehCount ;
17039: LD_VAR 0 13
17043: PUSH
17044: LD_VAR 0 3
17048: EQUAL
17049: IFFALSE 15675
// repeat wait ( 0 0$1 ) ;
17051: LD_INT 35
17053: PPUSH
17054: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17058: LD_ADDR_VAR 0 20
17062: PUSH
17063: LD_INT 22
17065: PUSH
17066: LD_VAR 0 2
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 21
17077: PUSH
17078: LD_INT 2
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 24
17087: PUSH
17088: LD_INT 650
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: PPUSH
17100: CALL_OW 69
17104: ST_TO_ADDR
// if vehicleOK_list > 0 then
17105: LD_VAR 0 20
17109: PUSH
17110: LD_INT 0
17112: GREATER
17113: IFFALSE 17304
// begin for i in vehicleOK_list do
17115: LD_ADDR_VAR 0 13
17119: PUSH
17120: LD_VAR 0 20
17124: PUSH
17125: FOR_IN
17126: IFFALSE 17302
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17128: LD_ADDR_VAR 0 21
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_VAR 0 11
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PPUSH
17145: CALL_OW 69
17149: PPUSH
17150: LD_VAR 0 13
17154: PPUSH
17155: CALL_OW 74
17159: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17160: LD_ADDR_VAR 0 22
17164: PUSH
17165: LD_INT 22
17167: PUSH
17168: LD_VAR 0 11
17172: PUSH
17173: EMPTY
17174: LIST
17175: LIST
17176: PUSH
17177: LD_INT 2
17179: PUSH
17180: LD_INT 59
17182: PUSH
17183: EMPTY
17184: LIST
17185: PUSH
17186: LD_INT 21
17188: PUSH
17189: LD_INT 1
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 21
17198: PUSH
17199: LD_INT 2
17201: PUSH
17202: EMPTY
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: EMPTY
17217: LIST
17218: PPUSH
17219: CALL_OW 69
17223: PPUSH
17224: LD_VAR 0 13
17228: PPUSH
17229: CALL_OW 74
17233: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17234: LD_VAR 0 13
17238: PPUSH
17239: LD_VAR 0 21
17243: PPUSH
17244: CALL_OW 296
17248: PUSH
17249: LD_INT 8
17251: PLUS
17252: PUSH
17253: LD_VAR 0 13
17257: PPUSH
17258: LD_VAR 0 22
17262: PPUSH
17263: CALL_OW 296
17267: LESS
17268: IFFALSE 17286
// begin ComAttackUnit ( i , target1 ) ;
17270: LD_VAR 0 13
17274: PPUSH
17275: LD_VAR 0 21
17279: PPUSH
17280: CALL_OW 115
// end else
17284: GO 17300
// begin ComAttackUnit ( i , target2 ) ;
17286: LD_VAR 0 13
17290: PPUSH
17291: LD_VAR 0 22
17295: PPUSH
17296: CALL_OW 115
// end ; end ;
17300: GO 17125
17302: POP
17303: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17304: LD_INT 22
17306: PUSH
17307: LD_VAR 0 2
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: PUSH
17316: LD_INT 21
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PPUSH
17330: CALL_OW 69
17334: PUSH
17335: LD_INT 0
17337: EQUAL
17338: IFFALSE 17051
// end ;
17340: LD_VAR 0 12
17344: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17345: LD_INT 0
17347: PPUSH
17348: PPUSH
17349: PPUSH
17350: PPUSH
17351: PPUSH
17352: PPUSH
17353: PPUSH
17354: PPUSH
17355: PPUSH
17356: PPUSH
17357: PPUSH
// for i = 1 to soldierCount do
17358: LD_ADDR_VAR 0 13
17362: PUSH
17363: DOUBLE
17364: LD_INT 1
17366: DEC
17367: ST_TO_ADDR
17368: LD_VAR 0 3
17372: PUSH
17373: FOR_TO
17374: IFFALSE 17456
// begin uc_side = side ;
17376: LD_ADDR_OWVAR 20
17380: PUSH
17381: LD_VAR 0 1
17385: ST_TO_ADDR
// uc_nation = nation ;
17386: LD_ADDR_OWVAR 21
17390: PUSH
17391: LD_VAR 0 2
17395: ST_TO_ADDR
// hc_name =  ;
17396: LD_ADDR_OWVAR 26
17400: PUSH
17401: LD_STRING 
17403: ST_TO_ADDR
// hc_gallery =  ;
17404: LD_ADDR_OWVAR 33
17408: PUSH
17409: LD_STRING 
17411: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17412: LD_INT 0
17414: PPUSH
17415: LD_INT 1
17417: PPUSH
17418: LD_VAR 0 8
17422: PPUSH
17423: CALL_OW 380
// un = CreateHuman ;
17427: LD_ADDR_VAR 0 15
17431: PUSH
17432: CALL_OW 44
17436: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17437: LD_VAR 0 15
17441: PPUSH
17442: LD_VAR 0 9
17446: PPUSH
17447: LD_INT 0
17449: PPUSH
17450: CALL_OW 49
// end ;
17454: GO 17373
17456: POP
17457: POP
// for i = 1 to sniperCount do
17458: LD_ADDR_VAR 0 13
17462: PUSH
17463: DOUBLE
17464: LD_INT 1
17466: DEC
17467: ST_TO_ADDR
17468: LD_VAR 0 4
17472: PUSH
17473: FOR_TO
17474: IFFALSE 17556
// begin uc_side = side ;
17476: LD_ADDR_OWVAR 20
17480: PUSH
17481: LD_VAR 0 1
17485: ST_TO_ADDR
// uc_nation = nation ;
17486: LD_ADDR_OWVAR 21
17490: PUSH
17491: LD_VAR 0 2
17495: ST_TO_ADDR
// hc_name =  ;
17496: LD_ADDR_OWVAR 26
17500: PUSH
17501: LD_STRING 
17503: ST_TO_ADDR
// hc_gallery =  ;
17504: LD_ADDR_OWVAR 33
17508: PUSH
17509: LD_STRING 
17511: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17512: LD_INT 0
17514: PPUSH
17515: LD_INT 5
17517: PPUSH
17518: LD_VAR 0 8
17522: PPUSH
17523: CALL_OW 380
// un = CreateHuman ;
17527: LD_ADDR_VAR 0 15
17531: PUSH
17532: CALL_OW 44
17536: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17537: LD_VAR 0 15
17541: PPUSH
17542: LD_VAR 0 9
17546: PPUSH
17547: LD_INT 0
17549: PPUSH
17550: CALL_OW 49
// end ;
17554: GO 17473
17556: POP
17557: POP
// for i = 1 to bazookCount do
17558: LD_ADDR_VAR 0 13
17562: PUSH
17563: DOUBLE
17564: LD_INT 1
17566: DEC
17567: ST_TO_ADDR
17568: LD_VAR 0 5
17572: PUSH
17573: FOR_TO
17574: IFFALSE 17656
// begin uc_side = side ;
17576: LD_ADDR_OWVAR 20
17580: PUSH
17581: LD_VAR 0 1
17585: ST_TO_ADDR
// uc_nation = nation ;
17586: LD_ADDR_OWVAR 21
17590: PUSH
17591: LD_VAR 0 2
17595: ST_TO_ADDR
// hc_name =  ;
17596: LD_ADDR_OWVAR 26
17600: PUSH
17601: LD_STRING 
17603: ST_TO_ADDR
// hc_gallery =  ;
17604: LD_ADDR_OWVAR 33
17608: PUSH
17609: LD_STRING 
17611: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17612: LD_INT 0
17614: PPUSH
17615: LD_INT 9
17617: PPUSH
17618: LD_VAR 0 8
17622: PPUSH
17623: CALL_OW 380
// un = CreateHuman ;
17627: LD_ADDR_VAR 0 15
17631: PUSH
17632: CALL_OW 44
17636: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17637: LD_VAR 0 15
17641: PPUSH
17642: LD_VAR 0 9
17646: PPUSH
17647: LD_INT 0
17649: PPUSH
17650: CALL_OW 49
// end ;
17654: GO 17573
17656: POP
17657: POP
// for i = 1 to mortalCount do
17658: LD_ADDR_VAR 0 13
17662: PUSH
17663: DOUBLE
17664: LD_INT 1
17666: DEC
17667: ST_TO_ADDR
17668: LD_VAR 0 6
17672: PUSH
17673: FOR_TO
17674: IFFALSE 17756
// begin uc_side = side ;
17676: LD_ADDR_OWVAR 20
17680: PUSH
17681: LD_VAR 0 1
17685: ST_TO_ADDR
// uc_nation = nation ;
17686: LD_ADDR_OWVAR 21
17690: PUSH
17691: LD_VAR 0 2
17695: ST_TO_ADDR
// hc_name =  ;
17696: LD_ADDR_OWVAR 26
17700: PUSH
17701: LD_STRING 
17703: ST_TO_ADDR
// hc_gallery =  ;
17704: LD_ADDR_OWVAR 33
17708: PUSH
17709: LD_STRING 
17711: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17712: LD_INT 0
17714: PPUSH
17715: LD_INT 8
17717: PPUSH
17718: LD_VAR 0 8
17722: PPUSH
17723: CALL_OW 380
// un = CreateHuman ;
17727: LD_ADDR_VAR 0 15
17731: PUSH
17732: CALL_OW 44
17736: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17737: LD_VAR 0 15
17741: PPUSH
17742: LD_VAR 0 9
17746: PPUSH
17747: LD_INT 0
17749: PPUSH
17750: CALL_OW 49
// end ;
17754: GO 17673
17756: POP
17757: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17758: LD_ADDR_VAR 0 18
17762: PUSH
17763: LD_INT 22
17765: PUSH
17766: LD_VAR 0 1
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 1
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 5
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 8
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: LD_INT 25
17810: PUSH
17811: LD_INT 9
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17834: LD_ADDR_VAR 0 17
17838: PUSH
17839: LD_INT 22
17841: PUSH
17842: LD_VAR 0 1
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 25
17853: PUSH
17854: LD_INT 4
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 69
17869: ST_TO_ADDR
// for i in medic_list do
17870: LD_ADDR_VAR 0 13
17874: PUSH
17875: LD_VAR 0 17
17879: PUSH
17880: FOR_IN
17881: IFFALSE 17899
// ComMoveToArea ( i , healArea ) ;
17883: LD_VAR 0 13
17887: PPUSH
17888: LD_VAR 0 10
17892: PPUSH
17893: CALL_OW 113
17897: GO 17880
17899: POP
17900: POP
// repeat wait ( 0 0$1 ) ;
17901: LD_INT 35
17903: PPUSH
17904: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
17908: LD_ADDR_VAR 0 16
17912: PUSH
17913: LD_INT 22
17915: PUSH
17916: LD_VAR 0 1
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 1
17927: PUSH
17928: LD_INT 3
17930: PUSH
17931: LD_INT 24
17933: PUSH
17934: LD_INT 550
17936: PUSH
17937: EMPTY
17938: LIST
17939: LIST
17940: PUSH
17941: EMPTY
17942: LIST
17943: LIST
17944: PUSH
17945: LD_INT 24
17947: PUSH
17948: LD_INT 250
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: PUSH
17960: EMPTY
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL_OW 69
17968: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
17969: LD_ADDR_VAR 0 18
17973: PUSH
17974: LD_INT 22
17976: PUSH
17977: LD_VAR 0 1
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 25
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 25
18001: PUSH
18002: LD_INT 5
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PUSH
18009: LD_INT 25
18011: PUSH
18012: LD_INT 8
18014: PUSH
18015: EMPTY
18016: LIST
18017: LIST
18018: PUSH
18019: LD_INT 25
18021: PUSH
18022: LD_INT 9
18024: PUSH
18025: EMPTY
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: PUSH
18036: LD_INT 24
18038: PUSH
18039: LD_INT 1000
18041: PUSH
18042: EMPTY
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: LIST
18050: PPUSH
18051: CALL_OW 69
18055: ST_TO_ADDR
// if medicCount > 0 then
18056: LD_VAR 0 7
18060: PUSH
18061: LD_INT 0
18063: GREATER
18064: IFFALSE 18138
// begin if damageUnit_list > 0 then
18066: LD_VAR 0 16
18070: PUSH
18071: LD_INT 0
18073: GREATER
18074: IFFALSE 18138
// begin for i in damageUnit_list do
18076: LD_ADDR_VAR 0 13
18080: PUSH
18081: LD_VAR 0 16
18085: PUSH
18086: FOR_IN
18087: IFFALSE 18136
// begin ComMoveToArea ( i , healArea ) ;
18089: LD_VAR 0 13
18093: PPUSH
18094: LD_VAR 0 10
18098: PPUSH
18099: CALL_OW 113
// for j in medic_list do
18103: LD_ADDR_VAR 0 14
18107: PUSH
18108: LD_VAR 0 17
18112: PUSH
18113: FOR_IN
18114: IFFALSE 18132
// AddComHeal ( j , i ) ;
18116: LD_VAR 0 14
18120: PPUSH
18121: LD_VAR 0 13
18125: PPUSH
18126: CALL_OW 188
18130: GO 18113
18132: POP
18133: POP
// end ;
18134: GO 18086
18136: POP
18137: POP
// end ; end ; for i in soldiersOK_list do
18138: LD_ADDR_VAR 0 13
18142: PUSH
18143: LD_VAR 0 18
18147: PUSH
18148: FOR_IN
18149: IFFALSE 18325
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18151: LD_ADDR_VAR 0 21
18155: PUSH
18156: LD_INT 22
18158: PUSH
18159: LD_VAR 0 11
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PPUSH
18168: CALL_OW 69
18172: PPUSH
18173: LD_VAR 0 13
18177: PPUSH
18178: CALL_OW 74
18182: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18183: LD_ADDR_VAR 0 22
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_VAR 0 11
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 2
18202: PUSH
18203: LD_INT 59
18205: PUSH
18206: EMPTY
18207: LIST
18208: PUSH
18209: LD_INT 21
18211: PUSH
18212: LD_INT 1
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: PUSH
18219: LD_INT 21
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: EMPTY
18240: LIST
18241: PPUSH
18242: CALL_OW 69
18246: PPUSH
18247: LD_VAR 0 13
18251: PPUSH
18252: CALL_OW 74
18256: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18257: LD_VAR 0 13
18261: PPUSH
18262: LD_VAR 0 21
18266: PPUSH
18267: CALL_OW 296
18271: PUSH
18272: LD_INT 8
18274: PLUS
18275: PUSH
18276: LD_VAR 0 13
18280: PPUSH
18281: LD_VAR 0 22
18285: PPUSH
18286: CALL_OW 296
18290: LESS
18291: IFFALSE 18309
// begin ComAttackUnit ( i , target1 ) ;
18293: LD_VAR 0 13
18297: PPUSH
18298: LD_VAR 0 21
18302: PPUSH
18303: CALL_OW 115
// end else
18307: GO 18323
// begin ComAttackUnit ( i , target2 ) ;
18309: LD_VAR 0 13
18313: PPUSH
18314: LD_VAR 0 22
18318: PPUSH
18319: CALL_OW 115
// end ; end ;
18323: GO 18148
18325: POP
18326: POP
// for i in soldiersOK_list do
18327: LD_ADDR_VAR 0 13
18331: PUSH
18332: LD_VAR 0 18
18336: PUSH
18337: FOR_IN
18338: IFFALSE 18514
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18340: LD_ADDR_VAR 0 21
18344: PUSH
18345: LD_INT 22
18347: PUSH
18348: LD_VAR 0 11
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PPUSH
18357: CALL_OW 69
18361: PPUSH
18362: LD_VAR 0 13
18366: PPUSH
18367: CALL_OW 74
18371: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18372: LD_ADDR_VAR 0 22
18376: PUSH
18377: LD_INT 22
18379: PUSH
18380: LD_VAR 0 11
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 2
18391: PUSH
18392: LD_INT 59
18394: PUSH
18395: EMPTY
18396: LIST
18397: PUSH
18398: LD_INT 21
18400: PUSH
18401: LD_INT 1
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 21
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: PPUSH
18431: CALL_OW 69
18435: PPUSH
18436: LD_VAR 0 13
18440: PPUSH
18441: CALL_OW 74
18445: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18446: LD_VAR 0 13
18450: PPUSH
18451: LD_VAR 0 21
18455: PPUSH
18456: CALL_OW 296
18460: PUSH
18461: LD_INT 8
18463: PLUS
18464: PUSH
18465: LD_VAR 0 13
18469: PPUSH
18470: LD_VAR 0 22
18474: PPUSH
18475: CALL_OW 296
18479: LESS
18480: IFFALSE 18498
// begin ComAttackUnit ( i , target1 ) ;
18482: LD_VAR 0 13
18486: PPUSH
18487: LD_VAR 0 21
18491: PPUSH
18492: CALL_OW 115
// end else
18496: GO 18512
// begin ComAttackUnit ( i , target2 ) ;
18498: LD_VAR 0 13
18502: PPUSH
18503: LD_VAR 0 22
18507: PPUSH
18508: CALL_OW 115
// end ; end ;
18512: GO 18337
18514: POP
18515: POP
// until soldiersOK_list = [ ] ;
18516: LD_VAR 0 18
18520: PUSH
18521: EMPTY
18522: EQUAL
18523: IFFALSE 17901
// end ;
18525: LD_VAR 0 12
18529: RET
// export function TameApemans ; var i , j ; begin
18530: LD_INT 0
18532: PPUSH
18533: PPUSH
18534: PPUSH
// repeat wait ( 0 0$1 ) ;
18535: LD_INT 35
18537: PPUSH
18538: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18542: LD_ADDR_VAR 0 2
18546: PUSH
18547: LD_INT 22
18549: PUSH
18550: LD_INT 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 25
18559: PUSH
18560: LD_INT 4
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: PUSH
18576: FOR_IN
18577: IFFALSE 18654
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18579: LD_ADDR_VAR 0 3
18583: PUSH
18584: LD_INT 5
18586: PPUSH
18587: LD_INT 22
18589: PUSH
18590: LD_INT 0
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 25
18599: PUSH
18600: LD_INT 12
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PPUSH
18611: CALL_OW 70
18615: PUSH
18616: FOR_IN
18617: IFFALSE 18650
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
18619: LD_VAR 0 2
18623: PPUSH
18624: LD_VAR 0 3
18628: PPUSH
18629: CALL_OW 250
18633: PPUSH
18634: LD_VAR 0 3
18638: PPUSH
18639: CALL_OW 251
18643: PPUSH
18644: CALL_OW 191
// end ;
18648: GO 18616
18650: POP
18651: POP
// end ;
18652: GO 18576
18654: POP
18655: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
18656: LD_INT 22
18658: PUSH
18659: LD_INT 2
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 4
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PPUSH
18680: CALL_OW 69
18684: PUSH
18685: LD_INT 0
18687: EQUAL
18688: PUSH
18689: LD_INT 5
18691: PPUSH
18692: LD_INT 22
18694: PUSH
18695: LD_INT 0
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: PUSH
18702: LD_INT 25
18704: PUSH
18705: LD_INT 12
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PPUSH
18716: CALL_OW 70
18720: PUSH
18721: LD_INT 0
18723: EQUAL
18724: OR
18725: IFFALSE 18535
// wait ( 0 0$30 ) ;
18727: LD_INT 1050
18729: PPUSH
18730: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18734: LD_ADDR_VAR 0 2
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 2
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 12
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 69
18767: PUSH
18768: FOR_IN
18769: IFFALSE 18833
// begin ComMoveXY ( i , GetX ( arDepot ) , GetY ( arDepot ) ) ;
18771: LD_VAR 0 2
18775: PPUSH
18776: LD_EXP 43
18780: PPUSH
18781: CALL_OW 250
18785: PPUSH
18786: LD_EXP 43
18790: PPUSH
18791: CALL_OW 251
18795: PPUSH
18796: CALL_OW 111
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
18800: LD_VAR 0 2
18804: PPUSH
18805: LD_INT 16
18807: PUSH
18808: LD_INT 15
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 1
18817: PPUSH
18818: LD_INT 2
18820: PPUSH
18821: CALL_OW 12
18825: ARRAY
18826: PPUSH
18827: CALL_OW 336
// end ;
18831: GO 18768
18833: POP
18834: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
18835: LD_ADDR_VAR 0 2
18839: PUSH
18840: LD_INT 22
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 25
18852: PUSH
18853: LD_INT 4
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PPUSH
18864: CALL_OW 69
18868: PUSH
18869: FOR_IN
18870: IFFALSE 18916
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
18872: LD_VAR 0 2
18876: PPUSH
18877: LD_INT 22
18879: PUSH
18880: LD_INT 2
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: LD_INT 30
18889: PUSH
18890: LD_INT 8
18892: PUSH
18893: EMPTY
18894: LIST
18895: LIST
18896: PUSH
18897: EMPTY
18898: LIST
18899: LIST
18900: PPUSH
18901: CALL_OW 69
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PPUSH
18910: CALL_OW 120
18914: GO 18869
18916: POP
18917: POP
// end ;
18918: LD_VAR 0 1
18922: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
18923: LD_INT 0
18925: PPUSH
18926: PPUSH
18927: PPUSH
18928: PPUSH
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
18934: LD_INT 22
18936: PUSH
18937: LD_VAR 0 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 21
18948: PUSH
18949: LD_INT 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PPUSH
18960: CALL_OW 69
18964: PUSH
18965: LD_VAR 0 3
18969: LESSEQUAL
18970: IFFALSE 19114
// for i = 1 to vehCount do
18972: LD_ADDR_VAR 0 10
18976: PUSH
18977: DOUBLE
18978: LD_INT 1
18980: DEC
18981: ST_TO_ADDR
18982: LD_VAR 0 3
18986: PUSH
18987: FOR_TO
18988: IFFALSE 19112
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
18990: LD_ADDR_VAR 0 12
18994: PUSH
18995: LD_VAR 0 5
18999: PUSH
19000: LD_INT 1
19002: PPUSH
19003: LD_VAR 0 5
19007: PPUSH
19008: CALL_OW 12
19012: ARRAY
19013: ST_TO_ADDR
// if randWeapon = 46 then
19014: LD_VAR 0 12
19018: PUSH
19019: LD_INT 46
19021: EQUAL
19022: IFFALSE 19067
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19024: LD_VAR 0 2
19028: PPUSH
19029: LD_INT 24
19031: PPUSH
19032: LD_VAR 0 6
19036: PPUSH
19037: LD_VAR 0 7
19041: PUSH
19042: LD_INT 1
19044: PPUSH
19045: LD_VAR 0 7
19049: PPUSH
19050: CALL_OW 12
19054: ARRAY
19055: PPUSH
19056: LD_VAR 0 12
19060: PPUSH
19061: CALL_OW 185
19065: GO 19110
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19067: LD_VAR 0 2
19071: PPUSH
19072: LD_VAR 0 8
19076: PPUSH
19077: LD_VAR 0 6
19081: PPUSH
19082: LD_VAR 0 7
19086: PUSH
19087: LD_INT 1
19089: PPUSH
19090: LD_VAR 0 7
19094: PPUSH
19095: CALL_OW 12
19099: ARRAY
19100: PPUSH
19101: LD_VAR 0 12
19105: PPUSH
19106: CALL_OW 185
// end ;
19110: GO 18987
19112: POP
19113: POP
// repeat wait ( 0 0$1 ) ;
19114: LD_INT 35
19116: PPUSH
19117: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19121: LD_INT 22
19123: PUSH
19124: LD_VAR 0 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 21
19135: PUSH
19136: LD_INT 2
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: LD_INT 24
19145: PUSH
19146: LD_INT 250
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: PUSH
19163: LD_VAR 0 3
19167: GREATEREQUAL
19168: IFFALSE 19114
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19170: LD_INT 22
19172: PUSH
19173: LD_VAR 0 1
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: PUSH
19182: LD_INT 21
19184: PUSH
19185: LD_INT 2
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 24
19194: PUSH
19195: LD_INT 250
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: PUSH
19212: LD_VAR 0 3
19216: GREATEREQUAL
19217: IFFALSE 19560
// begin repeat begin wait ( 0 0$1 ) ;
19219: LD_INT 35
19221: PPUSH
19222: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19226: LD_INT 22
19228: PUSH
19229: LD_VAR 0 1
19233: PUSH
19234: EMPTY
19235: LIST
19236: LIST
19237: PUSH
19238: LD_INT 21
19240: PUSH
19241: LD_INT 2
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PUSH
19248: LD_INT 24
19250: PUSH
19251: LD_INT 651
19253: PUSH
19254: EMPTY
19255: LIST
19256: LIST
19257: PUSH
19258: EMPTY
19259: LIST
19260: LIST
19261: LIST
19262: PPUSH
19263: CALL_OW 69
19267: PUSH
19268: LD_INT 0
19270: GREATER
19271: IFFALSE 19499
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19273: LD_ADDR_VAR 0 10
19277: PUSH
19278: LD_INT 22
19280: PUSH
19281: LD_VAR 0 1
19285: PUSH
19286: EMPTY
19287: LIST
19288: LIST
19289: PUSH
19290: LD_INT 21
19292: PUSH
19293: LD_INT 2
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 24
19302: PUSH
19303: LD_INT 651
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: PUSH
19320: FOR_IN
19321: IFFALSE 19497
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19323: LD_ADDR_VAR 0 16
19327: PUSH
19328: LD_INT 22
19330: PUSH
19331: LD_VAR 0 4
19335: PUSH
19336: EMPTY
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 69
19344: PPUSH
19345: LD_VAR 0 10
19349: PPUSH
19350: CALL_OW 74
19354: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19355: LD_ADDR_VAR 0 17
19359: PUSH
19360: LD_INT 22
19362: PUSH
19363: LD_VAR 0 4
19367: PUSH
19368: EMPTY
19369: LIST
19370: LIST
19371: PUSH
19372: LD_INT 2
19374: PUSH
19375: LD_INT 59
19377: PUSH
19378: EMPTY
19379: LIST
19380: PUSH
19381: LD_INT 21
19383: PUSH
19384: LD_INT 1
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 2
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: PUSH
19407: EMPTY
19408: LIST
19409: LIST
19410: PUSH
19411: EMPTY
19412: LIST
19413: PPUSH
19414: CALL_OW 69
19418: PPUSH
19419: LD_VAR 0 10
19423: PPUSH
19424: CALL_OW 74
19428: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19429: LD_VAR 0 10
19433: PPUSH
19434: LD_VAR 0 16
19438: PPUSH
19439: CALL_OW 296
19443: PUSH
19444: LD_INT 8
19446: PLUS
19447: PUSH
19448: LD_VAR 0 10
19452: PPUSH
19453: LD_VAR 0 17
19457: PPUSH
19458: CALL_OW 296
19462: LESS
19463: IFFALSE 19481
// begin ComAttackUnit ( i , target1 ) ;
19465: LD_VAR 0 10
19469: PPUSH
19470: LD_VAR 0 16
19474: PPUSH
19475: CALL_OW 115
// end else
19479: GO 19495
// begin ComAttackUnit ( i , target2 ) ;
19481: LD_VAR 0 10
19485: PPUSH
19486: LD_VAR 0 17
19490: PPUSH
19491: CALL_OW 115
// end ; end ;
19495: GO 19320
19497: POP
19498: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19499: LD_INT 22
19501: PUSH
19502: LD_VAR 0 1
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PUSH
19511: LD_INT 21
19513: PUSH
19514: LD_INT 2
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: PUSH
19521: EMPTY
19522: LIST
19523: LIST
19524: PPUSH
19525: CALL_OW 69
19529: PUSH
19530: LD_INT 0
19532: EQUAL
19533: PUSH
19534: LD_INT 22
19536: PUSH
19537: LD_VAR 0 4
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: PPUSH
19549: CALL_OW 69
19553: PUSH
19554: LD_INT 0
19556: EQUAL
19557: OR
19558: IFFALSE 19219
// end ; end ;
19560: LD_VAR 0 9
19564: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19565: LD_INT 0
19567: PPUSH
19568: PPUSH
19569: PPUSH
19570: PPUSH
// r := 100 ;
19571: LD_ADDR_VAR 0 5
19575: PUSH
19576: LD_INT 100
19578: ST_TO_ADDR
// x := 0 ;
19579: LD_ADDR_VAR 0 6
19583: PUSH
19584: LD_INT 0
19586: ST_TO_ADDR
// while ( x < n ) do
19587: LD_VAR 0 6
19591: PUSH
19592: LD_VAR 0 2
19596: LESS
19597: IFFALSE 19884
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19599: LD_ADDR_VAR 0 4
19603: PUSH
19604: DOUBLE
19605: LD_INT 1
19607: DEC
19608: ST_TO_ADDR
19609: LD_VAR 0 1
19613: PPUSH
19614: LD_INT 0
19616: PPUSH
19617: CALL_OW 517
19621: PUSH
19622: LD_INT 1
19624: ARRAY
19625: PUSH
19626: FOR_TO
19627: IFFALSE 19880
// begin if r > 50 then
19629: LD_VAR 0 5
19633: PUSH
19634: LD_INT 50
19636: GREATER
19637: IFFALSE 19856
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_INT 0
19646: PPUSH
19647: CALL_OW 517
19651: PUSH
19652: LD_INT 1
19654: ARRAY
19655: PUSH
19656: LD_VAR 0 4
19660: ARRAY
19661: PPUSH
19662: LD_VAR 0 1
19666: PPUSH
19667: LD_INT 0
19669: PPUSH
19670: CALL_OW 517
19674: PUSH
19675: LD_INT 2
19677: ARRAY
19678: PUSH
19679: LD_VAR 0 4
19683: ARRAY
19684: PPUSH
19685: CALL_OW 458
19689: NOT
19690: IFFALSE 19840
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19692: LD_VAR 0 1
19696: PPUSH
19697: LD_INT 0
19699: PPUSH
19700: CALL_OW 517
19704: PUSH
19705: LD_INT 1
19707: ARRAY
19708: PUSH
19709: LD_VAR 0 4
19713: ARRAY
19714: PPUSH
19715: LD_VAR 0 1
19719: PPUSH
19720: LD_INT 0
19722: PPUSH
19723: CALL_OW 517
19727: PUSH
19728: LD_INT 2
19730: ARRAY
19731: PUSH
19732: LD_VAR 0 4
19736: ARRAY
19737: PPUSH
19738: LD_INT 5
19740: PPUSH
19741: LD_INT 0
19743: PPUSH
19744: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
19748: LD_ADDR_EXP 50
19752: PUSH
19753: LD_EXP 50
19757: PPUSH
19758: LD_INT 1
19760: PPUSH
19761: LD_VAR 0 1
19765: PPUSH
19766: LD_INT 0
19768: PPUSH
19769: CALL_OW 517
19773: PUSH
19774: LD_INT 1
19776: ARRAY
19777: PUSH
19778: LD_VAR 0 4
19782: ARRAY
19783: PUSH
19784: LD_VAR 0 1
19788: PPUSH
19789: LD_INT 0
19791: PPUSH
19792: CALL_OW 517
19796: PUSH
19797: LD_INT 2
19799: ARRAY
19800: PUSH
19801: LD_VAR 0 4
19805: ARRAY
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PPUSH
19811: CALL_OW 2
19815: ST_TO_ADDR
// r := 0 ;
19816: LD_ADDR_VAR 0 5
19820: PUSH
19821: LD_INT 0
19823: ST_TO_ADDR
// x := x + 1 ;
19824: LD_ADDR_VAR 0 6
19828: PUSH
19829: LD_VAR 0 6
19833: PUSH
19834: LD_INT 1
19836: PLUS
19837: ST_TO_ADDR
// end else
19838: GO 19854
// r := r + 35 ;
19840: LD_ADDR_VAR 0 5
19844: PUSH
19845: LD_VAR 0 5
19849: PUSH
19850: LD_INT 35
19852: PLUS
19853: ST_TO_ADDR
// end else
19854: GO 19878
// r := r + rand ( 10 , 25 ) ;
19856: LD_ADDR_VAR 0 5
19860: PUSH
19861: LD_VAR 0 5
19865: PUSH
19866: LD_INT 10
19868: PPUSH
19869: LD_INT 25
19871: PPUSH
19872: CALL_OW 12
19876: PLUS
19877: ST_TO_ADDR
// end ;
19878: GO 19626
19880: POP
19881: POP
19882: GO 19587
// end ; end_of_file
19884: LD_VAR 0 3
19888: RET
// every 0 0$1 trigger russianAI = 1 do
19889: LD_EXP 39
19893: PUSH
19894: LD_INT 1
19896: EQUAL
19897: IFFALSE 20116
19899: GO 19901
19901: DISABLE
// begin enable ;
19902: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
19903: LD_INT 3
19905: PPUSH
19906: LD_EXP 30
19910: PPUSH
19911: CALL 14527 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
19915: LD_INT 3
19917: PPUSH
19918: LD_EXP 42
19922: PPUSH
19923: CALL 14887 0 2
// if ruPossition = 1 then
19927: LD_EXP 41
19931: PUSH
19932: LD_INT 1
19934: EQUAL
19935: IFFALSE 19990
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
19937: LD_INT 3
19939: PPUSH
19940: LD_INT 13
19942: PPUSH
19943: LD_INT 10
19945: PPUSH
19946: LD_INT 22
19948: PUSH
19949: LD_INT 3
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: LD_INT 21
19958: PUSH
19959: LD_INT 3
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: PUSH
19966: LD_INT 30
19968: PUSH
19969: LD_INT 8
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: PUSH
19976: EMPTY
19977: LIST
19978: LIST
19979: LIST
19980: PPUSH
19981: CALL_OW 69
19985: PPUSH
19986: CALL 15093 0 4
// if ruPossition = 2 then
19990: LD_EXP 41
19994: PUSH
19995: LD_INT 2
19997: EQUAL
19998: IFFALSE 20053
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20000: LD_INT 3
20002: PPUSH
20003: LD_INT 14
20005: PPUSH
20006: LD_INT 11
20008: PPUSH
20009: LD_INT 22
20011: PUSH
20012: LD_INT 3
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: LD_INT 21
20021: PUSH
20022: LD_INT 3
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PUSH
20029: LD_INT 30
20031: PUSH
20032: LD_INT 8
20034: PUSH
20035: EMPTY
20036: LIST
20037: LIST
20038: PUSH
20039: EMPTY
20040: LIST
20041: LIST
20042: LIST
20043: PPUSH
20044: CALL_OW 69
20048: PPUSH
20049: CALL 15093 0 4
// if ruPossition = 3 then
20053: LD_EXP 41
20057: PUSH
20058: LD_INT 3
20060: EQUAL
20061: IFFALSE 20116
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20063: LD_INT 3
20065: PPUSH
20066: LD_INT 15
20068: PPUSH
20069: LD_INT 12
20071: PPUSH
20072: LD_INT 22
20074: PUSH
20075: LD_INT 3
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 21
20084: PUSH
20085: LD_INT 3
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: PUSH
20092: LD_INT 30
20094: PUSH
20095: LD_INT 8
20097: PUSH
20098: EMPTY
20099: LIST
20100: LIST
20101: PUSH
20102: EMPTY
20103: LIST
20104: LIST
20105: LIST
20106: PPUSH
20107: CALL_OW 69
20111: PPUSH
20112: CALL 15093 0 4
// end ;
20116: END
// every 0 0$1 do
20117: GO 20119
20119: DISABLE
// begin enable ;
20120: ENABLE
// if ruPossition = 1 then
20121: LD_EXP 41
20125: PUSH
20126: LD_INT 1
20128: EQUAL
20129: IFFALSE 20141
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20131: LD_INT 3
20133: PPUSH
20134: LD_INT 10
20136: PPUSH
20137: CALL 14164 0 2
// if ruPossition = 2 then
20141: LD_EXP 41
20145: PUSH
20146: LD_INT 2
20148: EQUAL
20149: IFFALSE 20161
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20151: LD_INT 3
20153: PPUSH
20154: LD_INT 11
20156: PPUSH
20157: CALL 14164 0 2
// if ruPossition = 3 then
20161: LD_EXP 41
20165: PUSH
20166: LD_INT 3
20168: EQUAL
20169: IFFALSE 20181
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20171: LD_INT 3
20173: PPUSH
20174: LD_INT 12
20176: PPUSH
20177: CALL 14164 0 2
// IntBazooka ( 3 , 1 ) ;
20181: LD_INT 3
20183: PPUSH
20184: LD_INT 1
20186: PPUSH
20187: CALL 12963 0 2
// IntBazooka ( 6 , 1 ) ;
20191: LD_INT 6
20193: PPUSH
20194: LD_INT 1
20196: PPUSH
20197: CALL 12963 0 2
// end ;
20201: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20202: LD_EXP 39
20206: PUSH
20207: LD_INT 1
20209: EQUAL
20210: PUSH
20211: LD_EXP 35
20215: PPUSH
20216: CALL_OW 302
20220: AND
20221: PUSH
20222: LD_EXP 35
20226: PPUSH
20227: CALL_OW 255
20231: PUSH
20232: LD_INT 3
20234: EQUAL
20235: AND
20236: PUSH
20237: LD_INT 22
20239: PUSH
20240: LD_INT 3
20242: PUSH
20243: EMPTY
20244: LIST
20245: LIST
20246: PUSH
20247: LD_INT 21
20249: PUSH
20250: LD_INT 2
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: PUSH
20257: LD_INT 33
20259: PUSH
20260: LD_INT 3
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: PUSH
20277: LD_INT 0
20279: EQUAL
20280: AND
20281: IFFALSE 20489
20283: GO 20285
20285: DISABLE
// begin enable ;
20286: ENABLE
// if Difficulty = 1 then
20287: LD_OWVAR 67
20291: PUSH
20292: LD_INT 1
20294: EQUAL
20295: IFFALSE 20357
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20297: LD_INT 3
20299: PPUSH
20300: LD_EXP 35
20304: PPUSH
20305: LD_INT 5
20307: PPUSH
20308: LD_INT 8
20310: PPUSH
20311: CALL_OW 12
20315: PPUSH
20316: LD_INT 1
20318: PPUSH
20319: LD_INT 43
20321: PUSH
20322: LD_INT 44
20324: PUSH
20325: LD_INT 45
20327: PUSH
20328: LD_INT 46
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: LIST
20335: LIST
20336: PPUSH
20337: LD_INT 1
20339: PPUSH
20340: LD_INT 1
20342: PUSH
20343: LD_INT 3
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PPUSH
20350: LD_INT 22
20352: PPUSH
20353: CALL 18923 0 8
// if Difficulty = 2 then
20357: LD_OWVAR 67
20361: PUSH
20362: LD_INT 2
20364: EQUAL
20365: IFFALSE 20423
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20367: LD_INT 3
20369: PPUSH
20370: LD_EXP 35
20374: PPUSH
20375: LD_INT 6
20377: PPUSH
20378: LD_INT 8
20380: PPUSH
20381: CALL_OW 12
20385: PPUSH
20386: LD_INT 1
20388: PPUSH
20389: LD_INT 44
20391: PUSH
20392: LD_INT 45
20394: PUSH
20395: LD_INT 46
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: LIST
20402: PPUSH
20403: LD_INT 1
20405: PPUSH
20406: LD_INT 1
20408: PUSH
20409: LD_INT 3
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PPUSH
20416: LD_INT 22
20418: PPUSH
20419: CALL 18923 0 8
// if Difficulty = 3 then
20423: LD_OWVAR 67
20427: PUSH
20428: LD_INT 3
20430: EQUAL
20431: IFFALSE 20489
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 1 , 3 ] , 22 ) ;
20433: LD_INT 3
20435: PPUSH
20436: LD_EXP 35
20440: PPUSH
20441: LD_INT 7
20443: PPUSH
20444: LD_INT 8
20446: PPUSH
20447: CALL_OW 12
20451: PPUSH
20452: LD_INT 1
20454: PPUSH
20455: LD_INT 44
20457: PUSH
20458: LD_INT 45
20460: PUSH
20461: LD_INT 46
20463: PUSH
20464: EMPTY
20465: LIST
20466: LIST
20467: LIST
20468: PPUSH
20469: LD_INT 1
20471: PPUSH
20472: LD_INT 1
20474: PUSH
20475: LD_INT 3
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PPUSH
20482: LD_INT 22
20484: PPUSH
20485: CALL 18923 0 8
// end ;
20489: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20490: LD_EXP 50
20494: PUSH
20495: LD_EXP 49
20499: AND
20500: IFFALSE 20621
20502: GO 20504
20504: DISABLE
20505: LD_INT 0
20507: PPUSH
// begin enable ;
20508: ENABLE
// for i in arabianMines do
20509: LD_ADDR_VAR 0 1
20513: PUSH
20514: LD_EXP 50
20518: PUSH
20519: FOR_IN
20520: IFFALSE 20619
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20522: LD_INT 22
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 92
20534: PUSH
20535: LD_VAR 0 1
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: PUSH
20544: LD_VAR 0 1
20548: PUSH
20549: LD_INT 2
20551: ARRAY
20552: PUSH
20553: LD_INT 3
20555: PUSH
20556: EMPTY
20557: LIST
20558: LIST
20559: LIST
20560: LIST
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PPUSH
20566: CALL_OW 69
20570: IFFALSE 20617
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20572: LD_VAR 0 1
20576: PUSH
20577: LD_INT 1
20579: ARRAY
20580: PPUSH
20581: LD_VAR 0 1
20585: PUSH
20586: LD_INT 2
20588: ARRAY
20589: PPUSH
20590: LD_INT 5
20592: PPUSH
20593: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20597: LD_ADDR_EXP 50
20601: PUSH
20602: LD_EXP 50
20606: PPUSH
20607: LD_VAR 0 1
20611: PPUSH
20612: CALL_OW 3
20616: ST_TO_ADDR
// end ; end ;
20617: GO 20519
20619: POP
20620: POP
// end ; end_of_file
20621: PPOPN 1
20623: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20624: LD_VAR 0 1
20628: PPUSH
20629: CALL_OW 255
20633: PUSH
20634: LD_INT 4
20636: EQUAL
20637: IFFALSE 20651
// SetBName ( building , epsilon ) ;
20639: LD_VAR 0 1
20643: PPUSH
20644: LD_STRING epsilon
20646: PPUSH
20647: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20651: LD_VAR 0 1
20655: PPUSH
20656: CALL_OW 255
20660: PUSH
20661: LD_INT 1
20663: EQUAL
20664: PUSH
20665: LD_VAR 0 1
20669: PPUSH
20670: CALL_OW 266
20674: PUSH
20675: LD_INT 0
20677: EQUAL
20678: AND
20679: IFFALSE 20693
// SetBName ( building , epsilon ) ;
20681: LD_VAR 0 1
20685: PPUSH
20686: LD_STRING epsilon
20688: PPUSH
20689: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20693: LD_VAR 0 1
20697: PPUSH
20698: CALL_OW 255
20702: PUSH
20703: LD_INT 3
20705: EQUAL
20706: PUSH
20707: LD_VAR 0 1
20711: PPUSH
20712: CALL_OW 266
20716: PUSH
20717: LD_INT 0
20719: EQUAL
20720: AND
20721: IFFALSE 20735
// SetBName ( building , chuikov ) ;
20723: LD_VAR 0 1
20727: PPUSH
20728: LD_STRING chuikov
20730: PPUSH
20731: CALL_OW 500
// if GetSide ( building ) = 2 then
20735: LD_VAR 0 1
20739: PPUSH
20740: CALL_OW 255
20744: PUSH
20745: LD_INT 2
20747: EQUAL
20748: IFFALSE 20804
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
20750: LD_VAR 0 1
20754: PPUSH
20755: CALL_OW 266
20759: PUSH
20760: LD_INT 6
20762: EQUAL
20763: PUSH
20764: LD_VAR 0 1
20768: PPUSH
20769: CALL_OW 266
20773: PUSH
20774: LD_INT 9
20776: EQUAL
20777: OR
20778: IFFALSE 20804
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
20780: LD_VAR 0 1
20784: PPUSH
20785: LD_INT 10
20787: PPUSH
20788: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
20792: LD_VAR 0 1
20796: PPUSH
20797: LD_INT 11
20799: PPUSH
20800: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
20804: LD_VAR 0 1
20808: PPUSH
20809: CALL_OW 255
20813: PUSH
20814: LD_INT 3
20816: EQUAL
20817: IFFALSE 20843
// begin if GetBType ( building ) = 2 then
20819: LD_VAR 0 1
20823: PPUSH
20824: CALL_OW 266
20828: PUSH
20829: LD_INT 2
20831: EQUAL
20832: IFFALSE 20843
// AddComUpgrade ( building ) ;
20834: LD_VAR 0 1
20838: PPUSH
20839: CALL_OW 206
// end ; end ;
20843: PPOPN 2
20845: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
20846: LD_INT 0
20848: PPUSH
20849: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
20850: LD_VAR 0 1
20854: PUSH
20855: LD_INT 22
20857: PUSH
20858: LD_INT 3
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PUSH
20865: LD_INT 23
20867: PUSH
20868: LD_INT 3
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PUSH
20875: LD_INT 21
20877: PUSH
20878: LD_INT 2
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: EMPTY
20886: LIST
20887: LIST
20888: LIST
20889: PPUSH
20890: CALL_OW 69
20894: IN
20895: PUSH
20896: LD_EXP 58
20900: NOT
20901: AND
20902: IFFALSE 20933
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
20904: LD_ADDR_EXP 58
20908: PUSH
20909: LD_VAR 0 1
20913: PPUSH
20914: CALL_OW 250
20918: PUSH
20919: LD_VAR 0 1
20923: PPUSH
20924: CALL_OW 251
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: ST_TO_ADDR
// end ;
20933: PPOPN 3
20935: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
20936: LD_VAR 0 2
20940: PPUSH
20941: CALL_OW 255
20945: PUSH
20946: LD_INT 3
20948: EQUAL
20949: PUSH
20950: LD_EXP 35
20954: PPUSH
20955: CALL_OW 255
20959: PUSH
20960: LD_INT 3
20962: EQUAL
20963: AND
20964: PUSH
20965: LD_EXP 35
20969: PPUSH
20970: CALL_OW 302
20974: AND
20975: IFFALSE 20991
// ComEnterUnit ( human , ruFab ) ;
20977: LD_VAR 0 2
20981: PPUSH
20982: LD_EXP 35
20986: PPUSH
20987: CALL_OW 120
// end ;
20991: PPOPN 2
20993: END
// on BuildingComplete ( building ) do var i ;
20994: LD_INT 0
20996: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
20997: LD_VAR 0 1
21001: PPUSH
21002: CALL_OW 255
21006: PUSH
21007: LD_INT 1
21009: EQUAL
21010: PUSH
21011: LD_EXP 61
21015: PUSH
21016: LD_INT 0
21018: EQUAL
21019: AND
21020: IFFALSE 21222
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21022: LD_VAR 0 1
21026: PPUSH
21027: CALL_OW 266
21031: PUSH
21032: LD_INT 26
21034: EQUAL
21035: PUSH
21036: LD_VAR 0 1
21040: PPUSH
21041: CALL_OW 266
21045: PUSH
21046: LD_INT 27
21048: EQUAL
21049: OR
21050: PUSH
21051: LD_VAR 0 1
21055: PPUSH
21056: CALL_OW 266
21060: PUSH
21061: LD_INT 28
21063: EQUAL
21064: OR
21065: IFFALSE 21222
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21067: LD_INT 22
21069: PUSH
21070: LD_INT 1
21072: PUSH
21073: EMPTY
21074: LIST
21075: LIST
21076: PUSH
21077: LD_INT 2
21079: PUSH
21080: LD_INT 30
21082: PUSH
21083: LD_INT 7
21085: PUSH
21086: EMPTY
21087: LIST
21088: LIST
21089: PUSH
21090: LD_INT 30
21092: PUSH
21093: LD_INT 8
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PPUSH
21109: CALL_OW 69
21113: PUSH
21114: LD_INT 0
21116: GREATER
21117: IFFALSE 21222
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21119: LD_ADDR_VAR 0 2
21123: PUSH
21124: LD_INT 22
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 2
21136: PUSH
21137: LD_INT 30
21139: PUSH
21140: LD_INT 7
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PUSH
21147: LD_INT 30
21149: PUSH
21150: LD_INT 8
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: LIST
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: PPUSH
21166: CALL_OW 69
21170: PUSH
21171: FOR_IN
21172: IFFALSE 21220
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21174: LD_VAR 0 2
21178: PPUSH
21179: LD_INT 1
21181: PPUSH
21182: CALL_OW 268
21186: PUSH
21187: LD_INT 11
21189: EQUAL
21190: PUSH
21191: LD_VAR 0 2
21195: PPUSH
21196: LD_INT 2
21198: PPUSH
21199: CALL_OW 268
21203: PUSH
21204: LD_INT 11
21206: EQUAL
21207: OR
21208: IFFALSE 21218
// eventVar1 = 1 ;
21210: LD_ADDR_EXP 61
21214: PUSH
21215: LD_INT 1
21217: ST_TO_ADDR
21218: GO 21171
21220: POP
21221: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21222: LD_VAR 0 1
21226: PPUSH
21227: CALL_OW 255
21231: PUSH
21232: LD_INT 3
21234: EQUAL
21235: IFFALSE 21715
// begin if GetBType ( building ) = b_depot then
21237: LD_VAR 0 1
21241: PPUSH
21242: CALL_OW 266
21246: PUSH
21247: LD_INT 0
21249: EQUAL
21250: IFFALSE 21322
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21252: LD_VAR 0 1
21256: PPUSH
21257: CALL_OW 274
21261: PPUSH
21262: LD_INT 1
21264: PPUSH
21265: LD_INT 5000
21267: PPUSH
21268: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
21272: LD_VAR 0 1
21276: PPUSH
21277: CALL_OW 274
21281: PPUSH
21282: LD_INT 2
21284: PPUSH
21285: LD_INT 5000
21287: PPUSH
21288: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
21292: LD_VAR 0 1
21296: PPUSH
21297: CALL_OW 274
21301: PPUSH
21302: LD_INT 3
21304: PPUSH
21305: LD_INT 5000
21307: PPUSH
21308: CALL_OW 277
// ruDepot = building ;
21312: LD_ADDR_EXP 30
21316: PUSH
21317: LD_VAR 0 1
21321: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21322: LD_VAR 0 1
21326: PPUSH
21327: CALL_OW 266
21331: PUSH
21332: LD_INT 0
21334: EQUAL
21335: PUSH
21336: LD_VAR 0 1
21340: PPUSH
21341: CALL_OW 266
21345: PUSH
21346: LD_INT 2
21348: EQUAL
21349: OR
21350: PUSH
21351: LD_VAR 0 1
21355: PPUSH
21356: CALL_OW 266
21360: PUSH
21361: LD_INT 4
21363: EQUAL
21364: OR
21365: IFFALSE 21376
// ComUpgrade ( building ) ;
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL_OW 146
// if GetBType ( building ) = b_lab then
21376: LD_VAR 0 1
21380: PPUSH
21381: CALL_OW 266
21385: PUSH
21386: LD_INT 6
21388: EQUAL
21389: IFFALSE 21592
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21391: LD_INT 22
21393: PUSH
21394: LD_INT 3
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: PUSH
21401: LD_INT 30
21403: PUSH
21404: LD_INT 8
21406: PUSH
21407: EMPTY
21408: LIST
21409: LIST
21410: PUSH
21411: EMPTY
21412: LIST
21413: LIST
21414: PPUSH
21415: CALL_OW 69
21419: PUSH
21420: LD_INT 0
21422: EQUAL
21423: IFFALSE 21461
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21425: LD_VAR 0 1
21429: PPUSH
21430: LD_INT 10
21432: PPUSH
21433: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_INT 12
21444: PPUSH
21445: CALL_OW 207
// ruLab1 = building ;
21449: LD_ADDR_EXP 31
21453: PUSH
21454: LD_VAR 0 1
21458: ST_TO_ADDR
// end else
21459: GO 21495
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21461: LD_VAR 0 1
21465: PPUSH
21466: LD_INT 11
21468: PPUSH
21469: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21473: LD_VAR 0 1
21477: PPUSH
21478: LD_INT 14
21480: PPUSH
21481: CALL_OW 207
// ruLab2 = building ;
21485: LD_ADDR_EXP 32
21489: PUSH
21490: LD_VAR 0 1
21494: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21495: LD_INT 3
21497: PPUSH
21498: LD_VAR 0 1
21502: PPUSH
21503: LD_INT 3
21505: PPUSH
21506: CALL 14079 0 3
// if ruDestroyedBuildings > 0 then
21510: LD_EXP 42
21514: PUSH
21515: LD_INT 0
21517: GREATER
21518: IFFALSE 21592
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21520: LD_ADDR_EXP 42
21524: PUSH
21525: LD_EXP 42
21529: PPUSH
21530: LD_INT 1
21532: PPUSH
21533: CALL_OW 3
21537: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21538: LD_ADDR_EXP 42
21542: PUSH
21543: LD_EXP 42
21547: PPUSH
21548: LD_INT 1
21550: PPUSH
21551: CALL_OW 3
21555: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21556: LD_ADDR_EXP 42
21560: PUSH
21561: LD_EXP 42
21565: PPUSH
21566: LD_INT 1
21568: PPUSH
21569: CALL_OW 3
21573: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21574: LD_ADDR_EXP 42
21578: PUSH
21579: LD_EXP 42
21583: PPUSH
21584: LD_INT 1
21586: PPUSH
21587: CALL_OW 3
21591: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21592: LD_VAR 0 1
21596: PPUSH
21597: CALL_OW 266
21601: PUSH
21602: LD_INT 32
21604: EQUAL
21605: IFFALSE 21642
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21607: LD_VAR 0 1
21611: PPUSH
21612: LD_INT 44
21614: PUSH
21615: LD_INT 45
21617: PUSH
21618: LD_INT 46
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: LIST
21625: PUSH
21626: LD_INT 1
21628: PPUSH
21629: LD_INT 3
21631: PPUSH
21632: CALL_OW 12
21636: ARRAY
21637: PPUSH
21638: CALL_OW 208
// if GetBType ( building ) = b_turret then
21642: LD_VAR 0 1
21646: PPUSH
21647: CALL_OW 266
21651: PUSH
21652: LD_INT 33
21654: EQUAL
21655: IFFALSE 21692
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21657: LD_VAR 0 1
21661: PPUSH
21662: LD_INT 44
21664: PUSH
21665: LD_INT 45
21667: PUSH
21668: LD_INT 46
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: PUSH
21676: LD_INT 1
21678: PPUSH
21679: LD_INT 3
21681: PPUSH
21682: CALL_OW 12
21686: ARRAY
21687: PPUSH
21688: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21692: LD_VAR 0 1
21696: PPUSH
21697: CALL_OW 266
21701: PUSH
21702: LD_INT 24
21704: EQUAL
21705: IFFALSE 21715
// russianAI = 1 ;
21707: LD_ADDR_EXP 39
21711: PUSH
21712: LD_INT 1
21714: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
21715: LD_VAR 0 1
21719: PPUSH
21720: CALL_OW 255
21724: PUSH
21725: LD_INT 2
21727: EQUAL
21728: IFFALSE 22454
// begin if GetBType ( building ) = b_depot then
21730: LD_VAR 0 1
21734: PPUSH
21735: CALL_OW 266
21739: PUSH
21740: LD_INT 0
21742: EQUAL
21743: IFFALSE 21829
// begin arDepot = building ;
21745: LD_ADDR_EXP 43
21749: PUSH
21750: LD_VAR 0 1
21754: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
21755: LD_INT 38
21757: PUSH
21758: LD_INT 47
21760: PUSH
21761: EMPTY
21762: LIST
21763: LIST
21764: PPUSH
21765: LD_INT 71
21767: PPUSH
21768: LD_INT 19
21770: PPUSH
21771: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
21775: LD_VAR 0 1
21779: PPUSH
21780: CALL_OW 274
21784: PPUSH
21785: LD_INT 1
21787: PPUSH
21788: LD_INT 500
21790: PPUSH
21791: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: CALL_OW 274
21804: PPUSH
21805: LD_INT 3
21807: PPUSH
21808: LD_INT 30
21810: PPUSH
21811: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
21815: LD_EXP 26
21819: PPUSH
21820: LD_EXP 43
21824: PPUSH
21825: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21829: LD_VAR 0 1
21833: PPUSH
21834: CALL_OW 266
21838: PUSH
21839: LD_INT 6
21841: EQUAL
21842: PUSH
21843: LD_VAR 0 1
21847: PPUSH
21848: CALL_OW 266
21852: PUSH
21853: LD_INT 9
21855: EQUAL
21856: OR
21857: IFFALSE 21908
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21859: LD_VAR 0 1
21863: PPUSH
21864: LD_INT 10
21866: PPUSH
21867: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21871: LD_VAR 0 1
21875: PPUSH
21876: LD_INT 11
21878: PPUSH
21879: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
21883: LD_INT 2
21885: PPUSH
21886: LD_VAR 0 1
21890: PPUSH
21891: LD_INT 2
21893: PPUSH
21894: CALL 14079 0 3
// arLab = building ;
21898: LD_ADDR_EXP 44
21902: PUSH
21903: LD_VAR 0 1
21907: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21908: LD_VAR 0 1
21912: PPUSH
21913: CALL_OW 266
21917: PUSH
21918: LD_INT 2
21920: EQUAL
21921: PUSH
21922: LD_VAR 0 1
21926: PPUSH
21927: CALL_OW 266
21931: PUSH
21932: LD_INT 4
21934: EQUAL
21935: OR
21936: IFFALSE 21947
// ComUpgrade ( building ) ;
21938: LD_VAR 0 1
21942: PPUSH
21943: CALL_OW 146
// if GetBType ( building ) = b_solar_power then
21947: LD_VAR 0 1
21951: PPUSH
21952: CALL_OW 266
21956: PUSH
21957: LD_INT 27
21959: EQUAL
21960: IFFALSE 22454
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
21962: LD_INT 22
21964: PUSH
21965: LD_INT 2
21967: PUSH
21968: EMPTY
21969: LIST
21970: LIST
21971: PUSH
21972: LD_INT 30
21974: PUSH
21975: LD_INT 27
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PUSH
21982: EMPTY
21983: LIST
21984: LIST
21985: PPUSH
21986: CALL_OW 69
21990: PUSH
21991: LD_INT 2
21993: EQUAL
21994: IFFALSE 22454
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
21996: LD_ADDR_VAR 0 2
22000: PUSH
22001: LD_INT 22
22003: PUSH
22004: LD_INT 2
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PUSH
22011: LD_INT 21
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 25
22023: PUSH
22024: LD_INT 2
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: LIST
22035: PPUSH
22036: CALL_OW 69
22040: PUSH
22041: LD_INT 1
22043: ARRAY
22044: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22045: LD_VAR 0 2
22049: PPUSH
22050: LD_INT 92
22052: PPUSH
22053: LD_INT 34
22055: PPUSH
22056: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22060: LD_VAR 0 2
22064: PPUSH
22065: LD_INT 82
22067: PPUSH
22068: LD_INT 57
22070: PPUSH
22071: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22075: LD_VAR 0 2
22079: PPUSH
22080: LD_INT 36
22082: PPUSH
22083: LD_INT 28
22085: PPUSH
22086: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22090: LD_INT 22
22092: PUSH
22093: LD_INT 2
22095: PUSH
22096: EMPTY
22097: LIST
22098: LIST
22099: PUSH
22100: LD_INT 21
22102: PUSH
22103: LD_INT 1
22105: PUSH
22106: EMPTY
22107: LIST
22108: LIST
22109: PUSH
22110: LD_INT 25
22112: PUSH
22113: LD_INT 2
22115: PUSH
22116: EMPTY
22117: LIST
22118: LIST
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: LIST
22124: PPUSH
22125: CALL_OW 69
22129: PPUSH
22130: LD_EXP 43
22134: PPUSH
22135: CALL_OW 180
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 1 ] ) ;
22139: LD_INT 22
22141: PUSH
22142: LD_INT 2
22144: PUSH
22145: EMPTY
22146: LIST
22147: LIST
22148: PUSH
22149: LD_INT 25
22151: PUSH
22152: LD_INT 1
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PUSH
22159: LD_INT 3
22161: PUSH
22162: LD_INT 54
22164: PUSH
22165: EMPTY
22166: LIST
22167: PUSH
22168: LD_INT 3
22170: PUSH
22171: LD_INT 60
22173: PUSH
22174: EMPTY
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: LIST
22185: PUSH
22186: EMPTY
22187: LIST
22188: LIST
22189: LIST
22190: PPUSH
22191: CALL_OW 69
22195: PUSH
22196: LD_INT 1
22198: ARRAY
22199: PPUSH
22200: LD_INT 22
22202: PUSH
22203: LD_INT 2
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: LD_INT 30
22212: PUSH
22213: LD_INT 31
22215: PUSH
22216: EMPTY
22217: LIST
22218: LIST
22219: PUSH
22220: LD_INT 58
22222: PUSH
22223: EMPTY
22224: LIST
22225: PUSH
22226: EMPTY
22227: LIST
22228: LIST
22229: LIST
22230: PPUSH
22231: CALL_OW 69
22235: PUSH
22236: LD_INT 1
22238: ARRAY
22239: PPUSH
22240: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 2 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 2 ] ) ;
22244: LD_INT 22
22246: PUSH
22247: LD_INT 2
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PUSH
22254: LD_INT 25
22256: PUSH
22257: LD_INT 1
22259: PUSH
22260: EMPTY
22261: LIST
22262: LIST
22263: PUSH
22264: LD_INT 3
22266: PUSH
22267: LD_INT 54
22269: PUSH
22270: EMPTY
22271: LIST
22272: PUSH
22273: LD_INT 3
22275: PUSH
22276: LD_INT 60
22278: PUSH
22279: EMPTY
22280: LIST
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: EMPTY
22287: LIST
22288: LIST
22289: LIST
22290: PUSH
22291: EMPTY
22292: LIST
22293: LIST
22294: LIST
22295: PPUSH
22296: CALL_OW 69
22300: PUSH
22301: LD_INT 2
22303: ARRAY
22304: PPUSH
22305: LD_INT 22
22307: PUSH
22308: LD_INT 2
22310: PUSH
22311: EMPTY
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 30
22317: PUSH
22318: LD_INT 31
22320: PUSH
22321: EMPTY
22322: LIST
22323: LIST
22324: PUSH
22325: LD_INT 58
22327: PUSH
22328: EMPTY
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: LIST
22335: PPUSH
22336: CALL_OW 69
22340: PUSH
22341: LD_INT 2
22343: ARRAY
22344: PPUSH
22345: CALL_OW 120
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 3 ] , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , 31 ] , [ f_empty ] ] ) [ 3 ] ) ;
22349: LD_INT 22
22351: PUSH
22352: LD_INT 2
22354: PUSH
22355: EMPTY
22356: LIST
22357: LIST
22358: PUSH
22359: LD_INT 25
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: PUSH
22369: LD_INT 3
22371: PUSH
22372: LD_INT 54
22374: PUSH
22375: EMPTY
22376: LIST
22377: PUSH
22378: LD_INT 3
22380: PUSH
22381: LD_INT 60
22383: PUSH
22384: EMPTY
22385: LIST
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: EMPTY
22392: LIST
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: PPUSH
22401: CALL_OW 69
22405: PUSH
22406: LD_INT 3
22408: ARRAY
22409: PPUSH
22410: LD_INT 22
22412: PUSH
22413: LD_INT 2
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 30
22422: PUSH
22423: LD_INT 31
22425: PUSH
22426: EMPTY
22427: LIST
22428: LIST
22429: PUSH
22430: LD_INT 58
22432: PUSH
22433: EMPTY
22434: LIST
22435: PUSH
22436: EMPTY
22437: LIST
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 69
22445: PUSH
22446: LD_INT 3
22448: ARRAY
22449: PPUSH
22450: CALL_OW 120
// end ; end ; end ;
22454: PPOPN 2
22456: END
// on UpgradeComplete ( building ) do var i ;
22457: LD_INT 0
22459: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22460: LD_VAR 0 1
22464: PPUSH
22465: CALL_OW 255
22469: PUSH
22470: LD_INT 1
22472: EQUAL
22473: PUSH
22474: LD_EXP 61
22478: PUSH
22479: LD_INT 0
22481: EQUAL
22482: AND
22483: IFFALSE 22681
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22485: LD_VAR 0 1
22489: PPUSH
22490: CALL_OW 266
22494: PUSH
22495: LD_INT 7
22497: EQUAL
22498: PUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 266
22508: PUSH
22509: LD_INT 8
22511: EQUAL
22512: OR
22513: IFFALSE 22681
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22515: LD_INT 22
22517: PUSH
22518: LD_INT 1
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: PUSH
22525: LD_INT 2
22527: PUSH
22528: LD_INT 30
22530: PUSH
22531: LD_INT 26
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 27
22543: PUSH
22544: EMPTY
22545: LIST
22546: LIST
22547: PUSH
22548: LD_INT 30
22550: PUSH
22551: LD_INT 28
22553: PUSH
22554: EMPTY
22555: LIST
22556: LIST
22557: PUSH
22558: EMPTY
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: PUSH
22564: EMPTY
22565: LIST
22566: LIST
22567: PPUSH
22568: CALL_OW 69
22572: PUSH
22573: LD_INT 0
22575: GREATER
22576: IFFALSE 22681
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22578: LD_ADDR_VAR 0 2
22582: PUSH
22583: LD_INT 22
22585: PUSH
22586: LD_INT 1
22588: PUSH
22589: EMPTY
22590: LIST
22591: LIST
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 30
22598: PUSH
22599: LD_INT 7
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 30
22608: PUSH
22609: LD_INT 8
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: PUSH
22621: EMPTY
22622: LIST
22623: LIST
22624: PPUSH
22625: CALL_OW 69
22629: PUSH
22630: FOR_IN
22631: IFFALSE 22679
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22633: LD_VAR 0 2
22637: PPUSH
22638: LD_INT 1
22640: PPUSH
22641: CALL_OW 268
22645: PUSH
22646: LD_INT 11
22648: EQUAL
22649: PUSH
22650: LD_VAR 0 2
22654: PPUSH
22655: LD_INT 2
22657: PPUSH
22658: CALL_OW 268
22662: PUSH
22663: LD_INT 11
22665: EQUAL
22666: OR
22667: IFFALSE 22677
// eventVar1 = 1 ;
22669: LD_ADDR_EXP 61
22673: PUSH
22674: LD_INT 1
22676: ST_TO_ADDR
22677: GO 22630
22679: POP
22680: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22681: LD_VAR 0 1
22685: PPUSH
22686: CALL_OW 255
22690: PUSH
22691: LD_INT 2
22693: EQUAL
22694: IFFALSE 22799
// begin if GetBType ( building ) = b_barracks then
22696: LD_VAR 0 1
22700: PPUSH
22701: CALL_OW 266
22705: PUSH
22706: LD_INT 5
22708: EQUAL
22709: IFFALSE 22799
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22711: LD_ADDR_VAR 0 2
22715: PUSH
22716: LD_INT 22
22718: PUSH
22719: LD_INT 2
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 25
22728: PUSH
22729: LD_INT 1
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 3
22738: PUSH
22739: LD_INT 54
22741: PUSH
22742: EMPTY
22743: LIST
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: LIST
22753: PPUSH
22754: CALL_OW 69
22758: PUSH
22759: LD_EXP 26
22763: PUSH
22764: EMPTY
22765: LIST
22766: DIFF
22767: PUSH
22768: FOR_IN
22769: IFFALSE 22787
// ComEnterUnit ( i , building ) ;
22771: LD_VAR 0 2
22775: PPUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 120
22785: GO 22768
22787: POP
22788: POP
// arArm = building ;
22789: LD_ADDR_EXP 45
22793: PUSH
22794: LD_VAR 0 1
22798: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22799: LD_VAR 0 1
22803: PPUSH
22804: CALL_OW 255
22808: PUSH
22809: LD_INT 3
22811: EQUAL
22812: IFFALSE 23285
// begin if GetBType ( building ) = b_factory then
22814: LD_VAR 0 1
22818: PPUSH
22819: CALL_OW 266
22823: PUSH
22824: LD_INT 3
22826: EQUAL
22827: IFFALSE 22894
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
22829: LD_ADDR_VAR 0 2
22833: PUSH
22834: LD_INT 22
22836: PUSH
22837: LD_INT 3
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 25
22846: PUSH
22847: LD_INT 3
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: PPUSH
22858: CALL_OW 69
22862: PUSH
22863: FOR_IN
22864: IFFALSE 22882
// ComEnterUnit ( i , building ) ;
22866: LD_VAR 0 2
22870: PPUSH
22871: LD_VAR 0 1
22875: PPUSH
22876: CALL_OW 120
22880: GO 22863
22882: POP
22883: POP
// ruFab = building ;
22884: LD_ADDR_EXP 35
22888: PUSH
22889: LD_VAR 0 1
22893: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
22894: LD_INT 22
22896: PUSH
22897: LD_INT 3
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 3
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 30
22916: PUSH
22917: LD_INT 8
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: EMPTY
22925: LIST
22926: LIST
22927: LIST
22928: PPUSH
22929: CALL_OW 69
22933: PUSH
22934: LD_INT 2
22936: EQUAL
22937: IFFALSE 23145
// begin for i = 1 to 2 do
22939: LD_ADDR_VAR 0 2
22943: PUSH
22944: DOUBLE
22945: LD_INT 1
22947: DEC
22948: ST_TO_ADDR
22949: LD_INT 2
22951: PUSH
22952: FOR_TO
22953: IFFALSE 23040
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
22955: LD_INT 22
22957: PUSH
22958: LD_INT 3
22960: PUSH
22961: EMPTY
22962: LIST
22963: LIST
22964: PUSH
22965: LD_INT 25
22967: PUSH
22968: LD_INT 4
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PUSH
22975: EMPTY
22976: LIST
22977: LIST
22978: PPUSH
22979: CALL_OW 69
22983: PUSH
22984: LD_VAR 0 2
22988: ARRAY
22989: PPUSH
22990: LD_INT 22
22992: PUSH
22993: LD_INT 3
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PUSH
23000: LD_INT 21
23002: PUSH
23003: LD_INT 3
23005: PUSH
23006: EMPTY
23007: LIST
23008: LIST
23009: PUSH
23010: LD_INT 30
23012: PUSH
23013: LD_INT 8
23015: PUSH
23016: EMPTY
23017: LIST
23018: LIST
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: LIST
23024: PPUSH
23025: CALL_OW 69
23029: PUSH
23030: LD_INT 1
23032: ARRAY
23033: PPUSH
23034: CALL_OW 120
23038: GO 22952
23040: POP
23041: POP
// for i = 3 to 4 do
23042: LD_ADDR_VAR 0 2
23046: PUSH
23047: DOUBLE
23048: LD_INT 3
23050: DEC
23051: ST_TO_ADDR
23052: LD_INT 4
23054: PUSH
23055: FOR_TO
23056: IFFALSE 23143
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23058: LD_INT 22
23060: PUSH
23061: LD_INT 3
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 25
23070: PUSH
23071: LD_INT 4
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: PPUSH
23082: CALL_OW 69
23086: PUSH
23087: LD_VAR 0 2
23091: ARRAY
23092: PPUSH
23093: LD_INT 22
23095: PUSH
23096: LD_INT 3
23098: PUSH
23099: EMPTY
23100: LIST
23101: LIST
23102: PUSH
23103: LD_INT 21
23105: PUSH
23106: LD_INT 3
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 30
23115: PUSH
23116: LD_INT 8
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: PPUSH
23128: CALL_OW 69
23132: PUSH
23133: LD_INT 2
23135: ARRAY
23136: PPUSH
23137: CALL_OW 120
23141: GO 23055
23143: POP
23144: POP
// end ; if GetBType ( building ) = b_barracks then
23145: LD_VAR 0 1
23149: PPUSH
23150: CALL_OW 266
23154: PUSH
23155: LD_INT 5
23157: EQUAL
23158: IFFALSE 23285
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23160: LD_ADDR_VAR 0 2
23164: PUSH
23165: LD_INT 22
23167: PUSH
23168: LD_INT 3
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 25
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 3
23187: PUSH
23188: LD_INT 54
23190: PUSH
23191: EMPTY
23192: LIST
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: PPUSH
23203: CALL_OW 69
23207: PUSH
23208: FOR_IN
23209: IFFALSE 23227
// ComEnterUnit ( i , building ) ;
23211: LD_VAR 0 2
23215: PPUSH
23216: LD_VAR 0 1
23220: PPUSH
23221: CALL_OW 120
23225: GO 23208
23227: POP
23228: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23229: LD_INT 22
23231: PUSH
23232: LD_INT 3
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 30
23241: PUSH
23242: LD_INT 5
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: EMPTY
23250: LIST
23251: LIST
23252: PPUSH
23253: CALL_OW 69
23257: PUSH
23258: LD_INT 0
23260: EQUAL
23261: IFFALSE 23275
// ruArm1 = building else
23263: LD_ADDR_EXP 33
23267: PUSH
23268: LD_VAR 0 1
23272: ST_TO_ADDR
23273: GO 23285
// ruArm2 = building ;
23275: LD_ADDR_EXP 34
23279: PUSH
23280: LD_VAR 0 1
23284: ST_TO_ADDR
// end ; end ; end ;
23285: PPOPN 2
23287: END
// on EnterBuilding ( building , human ) do var rnd ;
23288: LD_INT 0
23290: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23291: LD_VAR 0 2
23295: PPUSH
23296: CALL_OW 255
23300: PUSH
23301: LD_INT 2
23303: EQUAL
23304: PUSH
23305: LD_VAR 0 2
23309: PPUSH
23310: CALL_OW 257
23314: PUSH
23315: LD_INT 1
23317: EQUAL
23318: AND
23319: PUSH
23320: LD_VAR 0 1
23324: PUSH
23325: LD_EXP 45
23329: EQUAL
23330: AND
23331: IFFALSE 23378
// begin wait ( 0 0$1 ) ;
23333: LD_INT 35
23335: PPUSH
23336: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23340: LD_ADDR_VAR 0 3
23344: PUSH
23345: LD_INT 1
23347: PPUSH
23348: LD_INT 100
23350: PPUSH
23351: CALL_OW 12
23355: ST_TO_ADDR
// if rnd > 50 then
23356: LD_VAR 0 3
23360: PUSH
23361: LD_INT 50
23363: GREATER
23364: IFFALSE 23378
// SetClass ( human , class_mortar ) ;
23366: LD_VAR 0 2
23370: PPUSH
23371: LD_INT 8
23373: PPUSH
23374: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23378: LD_VAR 0 2
23382: PPUSH
23383: CALL_OW 255
23387: PUSH
23388: LD_INT 3
23390: EQUAL
23391: PUSH
23392: LD_VAR 0 2
23396: PPUSH
23397: CALL_OW 257
23401: PUSH
23402: LD_INT 1
23404: EQUAL
23405: AND
23406: PUSH
23407: LD_VAR 0 1
23411: PUSH
23412: LD_EXP 33
23416: EQUAL
23417: PUSH
23418: LD_VAR 0 1
23422: PUSH
23423: LD_EXP 34
23427: EQUAL
23428: OR
23429: PUSH
23430: EMPTY
23431: LIST
23432: AND
23433: IFFALSE 23454
// begin wait ( 0 0$1 ) ;
23435: LD_INT 35
23437: PPUSH
23438: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23442: LD_VAR 0 2
23446: PPUSH
23447: LD_INT 9
23449: PPUSH
23450: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23454: LD_VAR 0 2
23458: PPUSH
23459: CALL_OW 255
23463: PUSH
23464: LD_INT 3
23466: EQUAL
23467: PUSH
23468: LD_VAR 0 2
23472: PPUSH
23473: CALL_OW 257
23477: PUSH
23478: LD_INT 9
23480: EQUAL
23481: AND
23482: PUSH
23483: LD_VAR 0 1
23487: PPUSH
23488: CALL_OW 266
23492: PUSH
23493: LD_INT 32
23495: EQUAL
23496: AND
23497: IFFALSE 23518
// begin wait ( 0 0$1 ) ;
23499: LD_INT 35
23501: PPUSH
23502: CALL_OW 67
// SetClass ( human , 1 ) ;
23506: LD_VAR 0 2
23510: PPUSH
23511: LD_INT 1
23513: PPUSH
23514: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23518: LD_VAR 0 2
23522: PPUSH
23523: CALL_OW 255
23527: PUSH
23528: LD_INT 3
23530: EQUAL
23531: PUSH
23532: LD_VAR 0 2
23536: PPUSH
23537: CALL_OW 257
23541: PUSH
23542: LD_INT 3
23544: EQUAL
23545: AND
23546: PUSH
23547: LD_VAR 0 1
23551: PUSH
23552: LD_EXP 35
23556: EQUAL
23557: AND
23558: IFFALSE 23572
// SetLives ( human , 1000 ) ;
23560: LD_VAR 0 2
23564: PPUSH
23565: LD_INT 1000
23567: PPUSH
23568: CALL_OW 234
// end ;
23572: PPOPN 3
23574: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23575: LD_VAR 0 1
23579: PUSH
23580: LD_INT 1
23582: EQUAL
23583: PUSH
23584: LD_VAR 0 2
23588: PUSH
23589: LD_INT 2
23591: EQUAL
23592: AND
23593: PUSH
23594: LD_INT 1
23596: PPUSH
23597: LD_INT 2
23599: PPUSH
23600: CALL_OW 81
23604: PUSH
23605: LD_INT 1
23607: EQUAL
23608: AND
23609: IFFALSE 23630
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23611: LD_EXP 24
23615: PPUSH
23616: LD_STRING D6b-Pow-1
23618: PPUSH
23619: CALL_OW 94
// YouLost ( Powell ) ;
23623: LD_STRING Powell
23625: PPUSH
23626: CALL_OW 104
// end ; end ;
23630: PPOPN 2
23632: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23633: LD_INT 23
23635: PPUSH
23636: LD_INT 22
23638: PUSH
23639: LD_INT 1
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PUSH
23646: LD_INT 21
23648: PUSH
23649: LD_INT 3
23651: PUSH
23652: EMPTY
23653: LIST
23654: LIST
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: PPUSH
23660: CALL_OW 70
23664: PUSH
23665: LD_INT 23
23667: PPUSH
23668: LD_INT 22
23670: PUSH
23671: LD_INT 1
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 21
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: PUSH
23688: LD_INT 58
23690: PUSH
23691: EMPTY
23692: LIST
23693: PUSH
23694: EMPTY
23695: LIST
23696: LIST
23697: LIST
23698: PPUSH
23699: CALL_OW 70
23703: OR
23704: PUSH
23705: LD_INT 1
23707: PPUSH
23708: LD_INT 2
23710: PPUSH
23711: CALL_OW 81
23715: PUSH
23716: LD_INT 1
23718: EQUAL
23719: AND
23720: IFFALSE 23744
23722: GO 23724
23724: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23725: LD_EXP 24
23729: PPUSH
23730: LD_STRING D6b-Pow-1
23732: PPUSH
23733: CALL_OW 94
// YouLost ( Powell ) ;
23737: LD_STRING Powell
23739: PPUSH
23740: CALL_OW 104
// end ;
23744: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
23745: LD_VAR 0 1
23749: PUSH
23750: LD_EXP 1
23754: EQUAL
23755: IFFALSE 23764
// YouLost ( JMM ) ;
23757: LD_STRING JMM
23759: PPUSH
23760: CALL_OW 104
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
23764: LD_VAR 0 1
23768: PPUSH
23769: CALL_OW 255
23773: PUSH
23774: LD_INT 3
23776: EQUAL
23777: PUSH
23778: LD_VAR 0 1
23782: PPUSH
23783: CALL_OW 247
23787: PUSH
23788: LD_INT 3
23790: EQUAL
23791: AND
23792: IFFALSE 24484
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
23794: LD_VAR 0 1
23798: PPUSH
23799: CALL_OW 266
23803: PUSH
23804: LD_INT 31
23806: EQUAL
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 266
23817: PUSH
23818: LD_INT 32
23820: EQUAL
23821: OR
23822: PUSH
23823: LD_VAR 0 1
23827: PPUSH
23828: CALL_OW 266
23832: PUSH
23833: LD_INT 36
23835: EQUAL
23836: OR
23837: PUSH
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 266
23847: PUSH
23848: LD_INT 0
23850: EQUAL
23851: OR
23852: PUSH
23853: LD_VAR 0 1
23857: PPUSH
23858: CALL_OW 266
23862: PUSH
23863: LD_INT 24
23865: EQUAL
23866: OR
23867: PUSH
23868: LD_VAR 0 1
23872: PPUSH
23873: CALL_OW 266
23877: PUSH
23878: LD_INT 17
23880: EQUAL
23881: OR
23882: PUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 266
23892: PUSH
23893: LD_INT 25
23895: EQUAL
23896: OR
23897: PUSH
23898: LD_VAR 0 1
23902: PPUSH
23903: CALL_OW 266
23907: PUSH
23908: LD_INT 19
23910: EQUAL
23911: OR
23912: PUSH
23913: LD_VAR 0 1
23917: PPUSH
23918: CALL_OW 266
23922: PUSH
23923: LD_INT 20
23925: EQUAL
23926: OR
23927: PUSH
23928: LD_VAR 0 1
23932: PPUSH
23933: CALL_OW 266
23937: PUSH
23938: LD_INT 18
23940: EQUAL
23941: OR
23942: PUSH
23943: LD_VAR 0 1
23947: PPUSH
23948: CALL_OW 266
23952: PUSH
23953: LD_INT 21
23955: EQUAL
23956: OR
23957: PUSH
23958: LD_VAR 0 1
23962: PPUSH
23963: CALL_OW 266
23967: PUSH
23968: LD_INT 23
23970: EQUAL
23971: OR
23972: PUSH
23973: LD_VAR 0 1
23977: PPUSH
23978: CALL_OW 266
23982: PUSH
23983: LD_INT 16
23985: EQUAL
23986: OR
23987: PUSH
23988: LD_VAR 0 1
23992: PPUSH
23993: CALL_OW 266
23997: PUSH
23998: LD_INT 6
24000: EQUAL
24001: OR
24002: PUSH
24003: LD_VAR 0 1
24007: PPUSH
24008: CALL_OW 266
24012: PUSH
24013: LD_INT 29
24015: EQUAL
24016: OR
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 266
24027: PUSH
24028: LD_INT 26
24030: EQUAL
24031: OR
24032: PUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 266
24042: PUSH
24043: LD_INT 30
24045: EQUAL
24046: OR
24047: PUSH
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 266
24057: PUSH
24058: LD_INT 28
24060: EQUAL
24061: OR
24062: PUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 266
24072: PUSH
24073: LD_INT 27
24075: EQUAL
24076: OR
24077: PUSH
24078: LD_VAR 0 1
24082: PPUSH
24083: CALL_OW 266
24087: PUSH
24088: LD_INT 33
24090: EQUAL
24091: OR
24092: PUSH
24093: LD_VAR 0 1
24097: PPUSH
24098: CALL_OW 266
24102: PUSH
24103: LD_INT 2
24105: EQUAL
24106: OR
24107: PUSH
24108: LD_VAR 0 1
24112: PPUSH
24113: CALL_OW 266
24117: PUSH
24118: LD_INT 4
24120: EQUAL
24121: OR
24122: IFFALSE 24208
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24124: LD_ADDR_EXP 42
24128: PUSH
24129: LD_EXP 42
24133: PUSH
24134: LD_VAR 0 1
24138: PPUSH
24139: CALL_OW 266
24143: ADD
24144: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24145: LD_ADDR_EXP 42
24149: PUSH
24150: LD_EXP 42
24154: PUSH
24155: LD_VAR 0 1
24159: PPUSH
24160: CALL_OW 250
24164: ADD
24165: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24166: LD_ADDR_EXP 42
24170: PUSH
24171: LD_EXP 42
24175: PUSH
24176: LD_VAR 0 1
24180: PPUSH
24181: CALL_OW 251
24185: ADD
24186: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24187: LD_ADDR_EXP 42
24191: PUSH
24192: LD_EXP 42
24196: PUSH
24197: LD_VAR 0 1
24201: PPUSH
24202: CALL_OW 254
24206: ADD
24207: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24208: LD_VAR 0 1
24212: PPUSH
24213: CALL_OW 266
24217: PUSH
24218: LD_INT 1
24220: EQUAL
24221: IFFALSE 24300
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24223: LD_ADDR_EXP 42
24227: PUSH
24228: LD_EXP 42
24232: PUSH
24233: LD_INT 0
24235: ADD
24236: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24237: LD_ADDR_EXP 42
24241: PUSH
24242: LD_EXP 42
24246: PUSH
24247: LD_VAR 0 1
24251: PPUSH
24252: CALL_OW 250
24256: ADD
24257: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24258: LD_ADDR_EXP 42
24262: PUSH
24263: LD_EXP 42
24267: PUSH
24268: LD_VAR 0 1
24272: PPUSH
24273: CALL_OW 251
24277: ADD
24278: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24279: LD_ADDR_EXP 42
24283: PUSH
24284: LD_EXP 42
24288: PUSH
24289: LD_VAR 0 1
24293: PPUSH
24294: CALL_OW 254
24298: ADD
24299: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24300: LD_VAR 0 1
24304: PPUSH
24305: CALL_OW 266
24309: PUSH
24310: LD_INT 3
24312: EQUAL
24313: IFFALSE 24392
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24315: LD_ADDR_EXP 42
24319: PUSH
24320: LD_EXP 42
24324: PUSH
24325: LD_INT 2
24327: ADD
24328: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24329: LD_ADDR_EXP 42
24333: PUSH
24334: LD_EXP 42
24338: PUSH
24339: LD_VAR 0 1
24343: PPUSH
24344: CALL_OW 250
24348: ADD
24349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24350: LD_ADDR_EXP 42
24354: PUSH
24355: LD_EXP 42
24359: PUSH
24360: LD_VAR 0 1
24364: PPUSH
24365: CALL_OW 251
24369: ADD
24370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24371: LD_ADDR_EXP 42
24375: PUSH
24376: LD_EXP 42
24380: PUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 254
24390: ADD
24391: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 266
24401: PUSH
24402: LD_INT 5
24404: EQUAL
24405: IFFALSE 24484
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24407: LD_ADDR_EXP 42
24411: PUSH
24412: LD_EXP 42
24416: PUSH
24417: LD_INT 4
24419: ADD
24420: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24421: LD_ADDR_EXP 42
24425: PUSH
24426: LD_EXP 42
24430: PUSH
24431: LD_VAR 0 1
24435: PPUSH
24436: CALL_OW 250
24440: ADD
24441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24442: LD_ADDR_EXP 42
24446: PUSH
24447: LD_EXP 42
24451: PUSH
24452: LD_VAR 0 1
24456: PPUSH
24457: CALL_OW 251
24461: ADD
24462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24463: LD_ADDR_EXP 42
24467: PUSH
24468: LD_EXP 42
24472: PUSH
24473: LD_VAR 0 1
24477: PPUSH
24478: CALL_OW 254
24482: ADD
24483: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 257
24493: PUSH
24494: LD_INT 3
24496: EQUAL
24497: PUSH
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL_OW 255
24507: PUSH
24508: LD_INT 3
24510: EQUAL
24511: AND
24512: PUSH
24513: LD_EXP 35
24517: PPUSH
24518: CALL_OW 302
24522: AND
24523: PUSH
24524: LD_EXP 35
24528: PPUSH
24529: CALL_OW 255
24533: PUSH
24534: LD_INT 3
24536: EQUAL
24537: AND
24538: IFFALSE 24608
// begin uc_side = 3 ;
24540: LD_ADDR_OWVAR 20
24544: PUSH
24545: LD_INT 3
24547: ST_TO_ADDR
// uc_nation = 3 ;
24548: LD_ADDR_OWVAR 21
24552: PUSH
24553: LD_INT 3
24555: ST_TO_ADDR
// hc_gallery :=  ;
24556: LD_ADDR_OWVAR 33
24560: PUSH
24561: LD_STRING 
24563: ST_TO_ADDR
// hc_name :=  ;
24564: LD_ADDR_OWVAR 26
24568: PUSH
24569: LD_STRING 
24571: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24572: LD_INT 0
24574: PPUSH
24575: LD_EXP 36
24579: PPUSH
24580: LD_EXP 37
24584: PPUSH
24585: CALL_OW 12
24589: PPUSH
24590: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24594: CALL_OW 44
24598: PPUSH
24599: LD_EXP 35
24603: PPUSH
24604: CALL_OW 52
// end ; end ;
24608: PPOPN 1
24610: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24611: LD_ADDR_OWVAR 57
24615: PUSH
24616: LD_INT 0
24618: ST_TO_ADDR
// fastEnd = 1 ;
24619: LD_ADDR_EXP 59
24623: PUSH
24624: LD_INT 1
24626: ST_TO_ADDR
// FinishMission ;
24627: CALL 25889 0 0
// end ; end_of_file
24631: PPOPN 1
24633: END
// export function PrepareNature ; var i , un ; begin
24634: LD_INT 0
24636: PPUSH
24637: PPUSH
24638: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24639: LD_ADDR_VAR 0 2
24643: PUSH
24644: DOUBLE
24645: LD_INT 1
24647: DEC
24648: ST_TO_ADDR
24649: LD_OWVAR 67
24653: PUSH
24654: LD_INT 1
24656: PPUSH
24657: LD_INT 5
24659: PPUSH
24660: CALL_OW 12
24664: PLUS
24665: PUSH
24666: FOR_TO
24667: IFFALSE 24812
// begin hc_sex = sex_male ;
24669: LD_ADDR_OWVAR 27
24673: PUSH
24674: LD_INT 1
24676: ST_TO_ADDR
// uc_side = 0 ;
24677: LD_ADDR_OWVAR 20
24681: PUSH
24682: LD_INT 0
24684: ST_TO_ADDR
// uc_nation = nation_nature ;
24685: LD_ADDR_OWVAR 21
24689: PUSH
24690: LD_INT 0
24692: ST_TO_ADDR
// hc_class = class_apeman ;
24693: LD_ADDR_OWVAR 28
24697: PUSH
24698: LD_INT 12
24700: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24701: LD_ADDR_OWVAR 31
24705: PUSH
24706: LD_INT 2
24708: PPUSH
24709: LD_INT 7
24711: PPUSH
24712: CALL_OW 12
24716: PUSH
24717: LD_OWVAR 67
24721: PLUS
24722: PUSH
24723: LD_INT 2
24725: PPUSH
24726: LD_INT 10
24728: PPUSH
24729: CALL_OW 12
24733: PUSH
24734: LD_INT 2
24736: PPUSH
24737: LD_INT 10
24739: PPUSH
24740: CALL_OW 12
24744: PUSH
24745: LD_INT 2
24747: PPUSH
24748: LD_INT 10
24750: PPUSH
24751: CALL_OW 12
24755: PUSH
24756: EMPTY
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24762: LD_ADDR_OWVAR 35
24766: PUSH
24767: LD_INT 5
24769: NEG
24770: PPUSH
24771: LD_INT 5
24773: PPUSH
24774: CALL_OW 12
24778: PUSH
24779: LD_OWVAR 67
24783: MUL
24784: ST_TO_ADDR
// un = CreateHuman ;
24785: LD_ADDR_VAR 0 3
24789: PUSH
24790: CALL_OW 44
24794: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
24795: LD_VAR 0 3
24799: PPUSH
24800: LD_INT 5
24802: PPUSH
24803: LD_INT 0
24805: PPUSH
24806: CALL_OW 49
// end ;
24810: GO 24666
24812: POP
24813: POP
// for i = 1 to Difficulty + 2 do
24814: LD_ADDR_VAR 0 2
24818: PUSH
24819: DOUBLE
24820: LD_INT 1
24822: DEC
24823: ST_TO_ADDR
24824: LD_OWVAR 67
24828: PUSH
24829: LD_INT 2
24831: PLUS
24832: PUSH
24833: FOR_TO
24834: IFFALSE 24943
// begin hc_sex = sex_male ;
24836: LD_ADDR_OWVAR 27
24840: PUSH
24841: LD_INT 1
24843: ST_TO_ADDR
// uc_side = 0 ;
24844: LD_ADDR_OWVAR 20
24848: PUSH
24849: LD_INT 0
24851: ST_TO_ADDR
// uc_nation = nation_nature ;
24852: LD_ADDR_OWVAR 21
24856: PUSH
24857: LD_INT 0
24859: ST_TO_ADDR
// hc_class = class_tiger ;
24860: LD_ADDR_OWVAR 28
24864: PUSH
24865: LD_INT 14
24867: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
24868: LD_ADDR_OWVAR 31
24872: PUSH
24873: LD_EXP 37
24877: PUSH
24878: LD_INT 0
24880: PUSH
24881: LD_INT 0
24883: PUSH
24884: LD_INT 0
24886: PUSH
24887: EMPTY
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
24893: LD_ADDR_OWVAR 35
24897: PUSH
24898: LD_INT 5
24900: NEG
24901: PPUSH
24902: LD_INT 5
24904: PPUSH
24905: CALL_OW 12
24909: PUSH
24910: LD_OWVAR 67
24914: MUL
24915: ST_TO_ADDR
// un = CreateHuman ;
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: CALL_OW 44
24925: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
24926: LD_VAR 0 3
24930: PPUSH
24931: LD_INT 6
24933: PPUSH
24934: LD_INT 0
24936: PPUSH
24937: CALL_OW 49
// end ;
24941: GO 24833
24943: POP
24944: POP
// for i = 1 to rand ( 3 , 4 ) do
24945: LD_ADDR_VAR 0 2
24949: PUSH
24950: DOUBLE
24951: LD_INT 1
24953: DEC
24954: ST_TO_ADDR
24955: LD_INT 3
24957: PPUSH
24958: LD_INT 4
24960: PPUSH
24961: CALL_OW 12
24965: PUSH
24966: FOR_TO
24967: IFFALSE 25061
// begin hc_sex = sex_male ;
24969: LD_ADDR_OWVAR 27
24973: PUSH
24974: LD_INT 1
24976: ST_TO_ADDR
// uc_side = 0 ;
24977: LD_ADDR_OWVAR 20
24981: PUSH
24982: LD_INT 0
24984: ST_TO_ADDR
// uc_nation = nation_nature ;
24985: LD_ADDR_OWVAR 21
24989: PUSH
24990: LD_INT 0
24992: ST_TO_ADDR
// hc_class = 18 ;
24993: LD_ADDR_OWVAR 28
24997: PUSH
24998: LD_INT 18
25000: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25001: LD_ADDR_OWVAR 31
25005: PUSH
25006: LD_EXP 37
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 0
25016: PUSH
25017: LD_INT 0
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: LIST
25024: LIST
25025: ST_TO_ADDR
// hc_agressivity = 0 ;
25026: LD_ADDR_OWVAR 35
25030: PUSH
25031: LD_INT 0
25033: ST_TO_ADDR
// un = CreateHuman ;
25034: LD_ADDR_VAR 0 3
25038: PUSH
25039: CALL_OW 44
25043: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25044: LD_VAR 0 3
25048: PPUSH
25049: LD_INT 6
25051: PPUSH
25052: LD_INT 0
25054: PPUSH
25055: CALL_OW 49
// end ;
25059: GO 24966
25061: POP
25062: POP
// end ; end_of_file
25063: LD_VAR 0 1
25067: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25068: LD_EXP 46
25072: PUSH
25073: LD_INT 1
25075: EQUAL
25076: IFFALSE 25160
25078: GO 25080
25080: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25081: LD_INT 7
25083: PPUSH
25084: LD_INT 5
25086: PPUSH
25087: LD_INT 4
25089: PUSH
25090: LD_INT 5
25092: PUSH
25093: LD_INT 6
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: PUSH
25101: LD_OWVAR 67
25105: ARRAY
25106: PPUSH
25107: LD_EXP 36
25111: PPUSH
25112: LD_EXP 37
25116: PPUSH
25117: CALL_OW 12
25121: PPUSH
25122: LD_INT 2
25124: PPUSH
25125: LD_INT 1
25127: PPUSH
25128: LD_INT 1
25130: PPUSH
25131: EMPTY
25132: PPUSH
25133: LD_INT 25
25135: PUSH
25136: LD_INT 26
25138: PUSH
25139: LD_INT 27
25141: PUSH
25142: LD_INT 28
25144: PUSH
25145: EMPTY
25146: LIST
25147: LIST
25148: LIST
25149: LIST
25150: PPUSH
25151: EMPTY
25152: PPUSH
25153: LD_INT 1
25155: PPUSH
25156: CALL 15641 0 11
25160: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25161: LD_EXP 46
25165: PUSH
25166: LD_INT 1
25168: EQUAL
25169: IFFALSE 25257
25171: GO 25173
25173: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 7 , 8 , 10 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25174: LD_INT 5
25176: PPUSH
25177: LD_INT 2
25179: PPUSH
25180: LD_INT 7
25182: PUSH
25183: LD_INT 8
25185: PUSH
25186: LD_INT 10
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: PUSH
25194: LD_OWVAR 67
25198: ARRAY
25199: PPUSH
25200: LD_INT 0
25202: PPUSH
25203: LD_INT 0
25205: PPUSH
25206: LD_INT 2
25208: PUSH
25209: LD_INT 4
25211: PUSH
25212: LD_INT 5
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: PUSH
25220: LD_OWVAR 67
25224: ARRAY
25225: PPUSH
25226: LD_INT 0
25228: PPUSH
25229: LD_EXP 36
25233: PPUSH
25234: LD_EXP 37
25238: PPUSH
25239: CALL_OW 12
25243: PPUSH
25244: LD_INT 7
25246: PPUSH
25247: LD_INT 9
25249: PPUSH
25250: LD_INT 1
25252: PPUSH
25253: CALL 17345 0 11
25257: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25258: LD_EXP 46
25262: PUSH
25263: LD_INT 1
25265: EQUAL
25266: IFFALSE 25275
25268: GO 25270
25270: DISABLE
// PrepareArabianSheik ;
25271: CALL 3834 0 0
25275: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25276: LD_EXP 29
25280: PUSH
25281: LD_EXP 60
25285: PUSH
25286: LD_INT 1
25288: EQUAL
25289: AND
25290: IFFALSE 25359
25292: GO 25294
25294: DISABLE
// begin enable ;
25295: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25296: LD_INT 6
25298: PPUSH
25299: LD_INT 3
25301: PPUSH
25302: LD_EXP 57
25306: PPUSH
25307: LD_INT 0
25309: PPUSH
25310: LD_OWVAR 67
25314: PPUSH
25315: LD_INT 0
25317: PPUSH
25318: LD_EXP 57
25322: PUSH
25323: LD_INT 3
25325: DIV
25326: PUSH
25327: LD_INT 1
25329: PLUS
25330: PPUSH
25331: LD_EXP 36
25335: PPUSH
25336: LD_EXP 37
25340: PPUSH
25341: CALL_OW 12
25345: PPUSH
25346: LD_INT 17
25348: PPUSH
25349: LD_INT 18
25351: PPUSH
25352: LD_INT 1
25354: PPUSH
25355: CALL 17345 0 11
// end ;
25359: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25360: LD_EXP 29
25364: PUSH
25365: LD_EXP 60
25369: PUSH
25370: LD_INT 1
25372: EQUAL
25373: AND
25374: IFFALSE 25451
25376: GO 25378
25378: DISABLE
// begin enable ;
25379: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 1 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25380: LD_INT 17
25382: PPUSH
25383: LD_INT 6
25385: PPUSH
25386: LD_EXP 56
25390: PPUSH
25391: LD_EXP 36
25395: PPUSH
25396: LD_EXP 37
25400: PPUSH
25401: CALL_OW 12
25405: PPUSH
25406: LD_INT 3
25408: PPUSH
25409: LD_INT 1
25411: PPUSH
25412: LD_INT 1
25414: PUSH
25415: LD_INT 3
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PPUSH
25422: LD_INT 43
25424: PUSH
25425: LD_INT 44
25427: PUSH
25428: LD_INT 45
25430: PUSH
25431: LD_INT 46
25433: PUSH
25434: EMPTY
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: PPUSH
25440: EMPTY
25441: PPUSH
25442: EMPTY
25443: PPUSH
25444: LD_INT 1
25446: PPUSH
25447: CALL 15641 0 11
// end ;
25451: END
// every 10 10$00 trigger joinEpsilon do
25452: LD_EXP 29
25456: IFFALSE 25510
25458: GO 25460
25460: DISABLE
// begin enable ;
25461: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25462: LD_ADDR_EXP 56
25466: PUSH
25467: LD_EXP 56
25471: PUSH
25472: LD_INT 1
25474: PPUSH
25475: LD_OWVAR 67
25479: PPUSH
25480: CALL_OW 12
25484: PLUS
25485: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25486: LD_ADDR_EXP 57
25490: PUSH
25491: LD_EXP 57
25495: PUSH
25496: LD_INT 1
25498: PPUSH
25499: LD_OWVAR 67
25503: PPUSH
25504: CALL_OW 12
25508: PLUS
25509: ST_TO_ADDR
// end ;
25510: END
// every 21 21$0 trigger attackAvalaible = 1 do
25511: LD_EXP 60
25515: PUSH
25516: LD_INT 1
25518: EQUAL
25519: IFFALSE 25532
25521: GO 25523
25523: DISABLE
// attackAvalaible = 0 ; end_of_file
25524: LD_ADDR_EXP 60
25528: PUSH
25529: LD_INT 0
25531: ST_TO_ADDR
25532: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25533: LD_INT 54
25535: PPUSH
25536: LD_INT 1
25538: PPUSH
25539: CALL_OW 321
25543: PUSH
25544: LD_INT 2
25546: EQUAL
25547: PUSH
25548: LD_INT 55
25550: PPUSH
25551: LD_INT 1
25553: PPUSH
25554: CALL_OW 321
25558: PUSH
25559: LD_INT 2
25561: EQUAL
25562: AND
25563: PUSH
25564: LD_INT 21
25566: PPUSH
25567: LD_INT 1
25569: PPUSH
25570: CALL_OW 321
25574: PUSH
25575: LD_INT 2
25577: EQUAL
25578: AND
25579: PUSH
25580: LD_INT 22
25582: PPUSH
25583: LD_INT 1
25585: PPUSH
25586: CALL_OW 321
25590: PUSH
25591: LD_INT 2
25593: EQUAL
25594: AND
25595: PUSH
25596: LD_INT 12
25598: PPUSH
25599: LD_INT 1
25601: PPUSH
25602: CALL_OW 321
25606: PUSH
25607: LD_INT 1
25609: EQUAL
25610: PUSH
25611: LD_INT 32
25613: PPUSH
25614: LD_INT 1
25616: PPUSH
25617: CALL_OW 321
25621: PUSH
25622: LD_INT 1
25624: EQUAL
25625: OR
25626: PUSH
25627: EMPTY
25628: LIST
25629: AND
25630: PUSH
25631: LD_EXP 48
25635: PUSH
25636: LD_INT 1
25638: EQUAL
25639: AND
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_INT 3
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PUSH
25651: LD_INT 21
25653: PUSH
25654: LD_INT 1
25656: PUSH
25657: EMPTY
25658: LIST
25659: LIST
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PPUSH
25665: CALL_OW 69
25669: PUSH
25670: LD_INT 0
25672: EQUAL
25673: AND
25674: IFFALSE 25730
25676: GO 25678
25678: DISABLE
// begin case query ( QEndMission ) of 1 :
25679: LD_STRING QEndMission
25681: PPUSH
25682: CALL_OW 97
25686: PUSH
25687: LD_INT 1
25689: DOUBLE
25690: EQUAL
25691: IFTRUE 25695
25693: GO 25706
25695: POP
// begin end_the_mission_allowed = true ;
25696: LD_ADDR_OWVAR 57
25700: PUSH
25701: LD_INT 1
25703: ST_TO_ADDR
// end ; 2 :
25704: GO 25730
25706: LD_INT 2
25708: DOUBLE
25709: EQUAL
25710: IFTRUE 25714
25712: GO 25729
25714: POP
// begin fastEnd = 1 ;
25715: LD_ADDR_EXP 59
25719: PUSH
25720: LD_INT 1
25722: ST_TO_ADDR
// FinishMission ;
25723: CALL 25889 0 0
// end ; end ;
25727: GO 25730
25729: POP
// end ;
25730: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25731: LD_INT 54
25733: PPUSH
25734: LD_INT 1
25736: PPUSH
25737: CALL_OW 321
25741: PUSH
25742: LD_INT 2
25744: EQUAL
25745: PUSH
25746: LD_INT 55
25748: PPUSH
25749: LD_INT 1
25751: PPUSH
25752: CALL_OW 321
25756: PUSH
25757: LD_INT 2
25759: EQUAL
25760: AND
25761: PUSH
25762: LD_INT 21
25764: PPUSH
25765: LD_INT 1
25767: PPUSH
25768: CALL_OW 321
25772: PUSH
25773: LD_INT 2
25775: EQUAL
25776: AND
25777: PUSH
25778: LD_INT 22
25780: PPUSH
25781: LD_INT 1
25783: PPUSH
25784: CALL_OW 321
25788: PUSH
25789: LD_INT 2
25791: EQUAL
25792: AND
25793: PUSH
25794: LD_INT 12
25796: PPUSH
25797: LD_INT 1
25799: PPUSH
25800: CALL_OW 321
25804: PUSH
25805: LD_INT 2
25807: EQUAL
25808: AND
25809: PUSH
25810: LD_INT 32
25812: PPUSH
25813: LD_INT 1
25815: PPUSH
25816: CALL_OW 321
25820: PUSH
25821: LD_INT 2
25823: EQUAL
25824: AND
25825: PUSH
25826: LD_EXP 59
25830: PUSH
25831: LD_INT 0
25833: EQUAL
25834: AND
25835: PUSH
25836: LD_EXP 48
25840: PUSH
25841: LD_INT 1
25843: EQUAL
25844: AND
25845: PUSH
25846: LD_INT 22
25848: PUSH
25849: LD_INT 3
25851: PUSH
25852: EMPTY
25853: LIST
25854: LIST
25855: PUSH
25856: LD_INT 21
25858: PUSH
25859: LD_INT 1
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: EMPTY
25867: LIST
25868: LIST
25869: PPUSH
25870: CALL_OW 69
25874: PUSH
25875: LD_INT 0
25877: EQUAL
25878: AND
25879: IFFALSE 25888
25881: GO 25883
25883: DISABLE
// FinishMission ;
25884: CALL 25889 0 0
25888: END
// export function FinishMission ; begin
25889: LD_INT 0
25891: PPUSH
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
25892: LD_EXP 52
25896: PPUSH
25897: LD_STRING 10_KhatamStatus_1
25899: PPUSH
25900: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
25904: LD_EXP 51
25908: PPUSH
25909: LD_STRING 10_GensherEscape_1
25911: PPUSH
25912: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
25916: LD_INT 12
25918: PPUSH
25919: LD_INT 1
25921: PPUSH
25922: CALL_OW 321
25926: PUSH
25927: LD_INT 2
25929: EQUAL
25930: IFFALSE 25944
// begin AddMedal ( sights , 1 ) ;
25932: LD_STRING sights
25934: PPUSH
25935: LD_INT 1
25937: PPUSH
25938: CALL_OW 101
// end else
25942: GO 25955
// begin AddMedal ( sights , - 1 ) ;
25944: LD_STRING sights
25946: PPUSH
25947: LD_INT 1
25949: NEG
25950: PPUSH
25951: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
25955: LD_INT 32
25957: PPUSH
25958: LD_INT 1
25960: PPUSH
25961: CALL_OW 321
25965: PUSH
25966: LD_INT 2
25968: EQUAL
25969: IFFALSE 25983
// begin AddMedal ( computers , 1 ) ;
25971: LD_STRING computers
25973: PPUSH
25974: LD_INT 1
25976: PPUSH
25977: CALL_OW 101
// end else
25981: GO 25994
// begin AddMedal ( computers , - 1 ) ;
25983: LD_STRING computers
25985: PPUSH
25986: LD_INT 1
25988: NEG
25989: PPUSH
25990: CALL_OW 101
// end ; if arabianEscape = 0 then
25994: LD_EXP 47
25998: PUSH
25999: LD_INT 0
26001: EQUAL
26002: IFFALSE 26026
// begin AddMedal ( renegades , 2 ) ;
26004: LD_STRING renegades
26006: PPUSH
26007: LD_INT 2
26009: PPUSH
26010: CALL_OW 101
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26014: LD_INT 0
26016: PPUSH
26017: LD_STRING 10_ScientistsEscape_1
26019: PPUSH
26020: CALL_OW 39
// end else
26024: GO 26037
// begin AddMedal ( renegades , - 1 ) ;
26026: LD_STRING renegades
26028: PPUSH
26029: LD_INT 1
26031: NEG
26032: PPUSH
26033: CALL_OW 101
// end ; SaveEpsilonBase ;
26037: CALL 26756 0 0
// Query ( kaj ) ;
26041: LD_STRING kaj
26043: PPUSH
26044: CALL_OW 97
// GiveMedals ( Main ) ;
26048: LD_STRING Main
26050: PPUSH
26051: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26055: LD_INT 22
26057: PUSH
26058: LD_INT 1
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: PUSH
26065: LD_INT 23
26067: PUSH
26068: LD_INT 1
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 21
26077: PUSH
26078: LD_INT 1
26080: PUSH
26081: EMPTY
26082: LIST
26083: LIST
26084: PUSH
26085: LD_INT 2
26087: PUSH
26088: LD_INT 25
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 25
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 25
26110: PUSH
26111: LD_INT 3
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 25
26120: PUSH
26121: LD_INT 4
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: LD_INT 25
26130: PUSH
26131: LD_INT 5
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: PUSH
26138: LD_INT 25
26140: PUSH
26141: LD_INT 8
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: LIST
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: PUSH
26157: EMPTY
26158: LIST
26159: LIST
26160: LIST
26161: LIST
26162: PPUSH
26163: CALL_OW 69
26167: PPUSH
26168: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26172: LD_EXP 1
26176: PPUSH
26177: LD_EXP 53
26181: PUSH
26182: LD_STRING JMM
26184: STR
26185: PPUSH
26186: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26190: LD_EXP 2
26194: PPUSH
26195: LD_EXP 53
26199: PUSH
26200: LD_STRING Brown
26202: STR
26203: PPUSH
26204: CALL 9916 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26208: LD_EXP 3
26212: PPUSH
26213: LD_EXP 53
26217: PUSH
26218: LD_STRING Donaldson
26220: STR
26221: PPUSH
26222: CALL 9916 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26226: LD_EXP 4
26230: PPUSH
26231: LD_EXP 53
26235: PUSH
26236: LD_STRING Bobby
26238: STR
26239: PPUSH
26240: CALL 9916 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26244: LD_EXP 5
26248: PPUSH
26249: LD_EXP 53
26253: PUSH
26254: LD_STRING Cyrus
26256: STR
26257: PPUSH
26258: CALL 9916 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26262: LD_EXP 6
26266: PPUSH
26267: LD_EXP 53
26271: PUSH
26272: LD_STRING Lisa
26274: STR
26275: PPUSH
26276: CALL 9916 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26280: LD_EXP 7
26284: PPUSH
26285: LD_EXP 53
26289: PUSH
26290: LD_STRING Frank
26292: STR
26293: PPUSH
26294: CALL 9916 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26298: LD_EXP 8
26302: PPUSH
26303: LD_EXP 53
26307: PUSH
26308: LD_STRING Kikuchi
26310: STR
26311: PPUSH
26312: CALL 9916 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26316: LD_EXP 9
26320: PPUSH
26321: LD_EXP 53
26325: PUSH
26326: LD_STRING Houten
26328: STR
26329: PPUSH
26330: CALL 9916 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26334: LD_EXP 10
26338: PPUSH
26339: LD_EXP 53
26343: PUSH
26344: LD_STRING Gary
26346: STR
26347: PPUSH
26348: CALL 9916 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26352: LD_EXP 19
26356: PPUSH
26357: LD_EXP 53
26361: PUSH
26362: LD_STRING Cornell
26364: STR
26365: PPUSH
26366: CALL 9916 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26370: LD_EXP 11
26374: PPUSH
26375: LD_EXP 53
26379: PUSH
26380: LD_STRING Simms
26382: STR
26383: PPUSH
26384: CALL 9916 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26388: LD_EXP 12
26392: PPUSH
26393: LD_EXP 53
26397: PUSH
26398: LD_STRING Denis
26400: STR
26401: PPUSH
26402: CALL 9916 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26406: LD_EXP 13
26410: PPUSH
26411: LD_EXP 53
26415: PUSH
26416: LD_STRING Joan
26418: STR
26419: PPUSH
26420: CALL 9916 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26424: LD_EXP 15
26428: PPUSH
26429: LD_EXP 53
26433: PUSH
26434: LD_STRING Gladstone
26436: STR
26437: PPUSH
26438: CALL 9916 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26442: LD_EXP 17
26446: PPUSH
26447: LD_EXP 53
26451: PUSH
26452: LD_STRING DeltaDoctor
26454: STR
26455: PPUSH
26456: CALL 9916 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26460: LD_INT 50
26462: PUSH
26463: EMPTY
26464: LIST
26465: PUSH
26466: LD_INT 22
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: EMPTY
26473: LIST
26474: LIST
26475: PUSH
26476: LD_INT 21
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 2
26488: PUSH
26489: LD_INT 25
26491: PUSH
26492: LD_INT 1
26494: PUSH
26495: EMPTY
26496: LIST
26497: LIST
26498: PUSH
26499: LD_INT 25
26501: PUSH
26502: LD_INT 2
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 25
26511: PUSH
26512: LD_INT 3
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 25
26521: PUSH
26522: LD_INT 4
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 25
26531: PUSH
26532: LD_INT 5
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 25
26541: PUSH
26542: LD_INT 8
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: PUSH
26558: EMPTY
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: PPUSH
26564: CALL_OW 69
26568: PUSH
26569: LD_EXP 1
26573: PUSH
26574: LD_EXP 2
26578: PUSH
26579: LD_EXP 3
26583: PUSH
26584: LD_EXP 4
26588: PUSH
26589: LD_EXP 5
26593: PUSH
26594: LD_EXP 6
26598: PUSH
26599: LD_EXP 7
26603: PUSH
26604: LD_EXP 15
26608: PUSH
26609: LD_EXP 8
26613: PUSH
26614: LD_EXP 12
26618: PUSH
26619: LD_EXP 13
26623: PUSH
26624: LD_EXP 9
26628: PUSH
26629: LD_EXP 11
26633: PUSH
26634: LD_EXP 10
26638: PUSH
26639: LD_EXP 17
26643: PUSH
26644: LD_EXP 19
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: DIFF
26667: PPUSH
26668: LD_STRING 10_other_survivors
26670: PPUSH
26671: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26675: LD_INT 50
26677: PUSH
26678: EMPTY
26679: LIST
26680: PUSH
26681: LD_INT 22
26683: PUSH
26684: LD_INT 1
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PUSH
26691: LD_INT 21
26693: PUSH
26694: LD_INT 1
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 25
26706: PUSH
26707: LD_INT 16
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PUSH
26714: LD_INT 25
26716: PUSH
26717: LD_INT 12
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: PUSH
26729: EMPTY
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: PPUSH
26735: CALL_OW 69
26739: PPUSH
26740: LD_STRING 10_ape
26742: PPUSH
26743: CALL_OW 38
// YouWin ;
26747: CALL_OW 103
// end ;
26751: LD_VAR 0 1
26755: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26756: LD_INT 0
26758: PPUSH
26759: PPUSH
26760: PPUSH
26761: PPUSH
// epsilonBase = [ ] ;
26762: LD_ADDR_VAR 0 2
26766: PUSH
26767: EMPTY
26768: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
26769: LD_ADDR_VAR 0 3
26773: PUSH
26774: LD_INT 22
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 21
26786: PUSH
26787: LD_INT 3
26789: PUSH
26790: EMPTY
26791: LIST
26792: LIST
26793: PUSH
26794: LD_INT 50
26796: PUSH
26797: EMPTY
26798: LIST
26799: PUSH
26800: EMPTY
26801: LIST
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 69
26809: ST_TO_ADDR
// for i in buildings do
26810: LD_ADDR_VAR 0 4
26814: PUSH
26815: LD_VAR 0 3
26819: PUSH
26820: FOR_IN
26821: IFFALSE 27258
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
26823: LD_VAR 0 4
26827: PPUSH
26828: CALL_OW 266
26832: PUSH
26833: LD_INT 6
26835: PUSH
26836: LD_INT 7
26838: PUSH
26839: LD_INT 8
26841: PUSH
26842: EMPTY
26843: LIST
26844: LIST
26845: LIST
26846: IN
26847: IFFALSE 26961
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
26849: LD_ADDR_VAR 0 2
26853: PUSH
26854: LD_VAR 0 2
26858: PUSH
26859: LD_VAR 0 4
26863: PPUSH
26864: CALL_OW 266
26868: PUSH
26869: LD_VAR 0 4
26873: PPUSH
26874: CALL_OW 250
26878: PUSH
26879: LD_VAR 0 4
26883: PPUSH
26884: CALL_OW 251
26888: PUSH
26889: LD_VAR 0 4
26893: PPUSH
26894: CALL_OW 254
26898: PUSH
26899: LD_VAR 0 4
26903: PPUSH
26904: CALL_OW 267
26908: PUSH
26909: LD_VAR 0 4
26913: PPUSH
26914: CALL_OW 248
26918: PUSH
26919: LD_VAR 0 4
26923: PPUSH
26924: LD_INT 1
26926: PPUSH
26927: CALL_OW 268
26931: PUSH
26932: LD_VAR 0 4
26936: PPUSH
26937: LD_INT 2
26939: PPUSH
26940: CALL_OW 268
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: PUSH
26955: EMPTY
26956: LIST
26957: ADD
26958: ST_TO_ADDR
26959: GO 27256
// if GetBType ( i ) = b_bunker then
26961: LD_VAR 0 4
26965: PPUSH
26966: CALL_OW 266
26970: PUSH
26971: LD_INT 32
26973: EQUAL
26974: IFFALSE 27071
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
26976: LD_ADDR_VAR 0 2
26980: PUSH
26981: LD_VAR 0 2
26985: PUSH
26986: LD_VAR 0 4
26990: PPUSH
26991: CALL_OW 266
26995: PUSH
26996: LD_VAR 0 4
27000: PPUSH
27001: CALL_OW 250
27005: PUSH
27006: LD_VAR 0 4
27010: PPUSH
27011: CALL_OW 251
27015: PUSH
27016: LD_VAR 0 4
27020: PPUSH
27021: CALL_OW 254
27025: PUSH
27026: LD_VAR 0 4
27030: PPUSH
27031: CALL_OW 267
27035: PUSH
27036: LD_VAR 0 4
27040: PPUSH
27041: CALL_OW 248
27045: PUSH
27046: LD_VAR 0 4
27050: PPUSH
27051: CALL_OW 269
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: LIST
27064: PUSH
27065: EMPTY
27066: LIST
27067: ADD
27068: ST_TO_ADDR
27069: GO 27256
// if GetBType ( i ) = b_factory then
27071: LD_VAR 0 4
27075: PPUSH
27076: CALL_OW 266
27080: PUSH
27081: LD_INT 3
27083: EQUAL
27084: IFFALSE 27174
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27086: LD_ADDR_VAR 0 2
27090: PUSH
27091: LD_VAR 0 2
27095: PPUSH
27096: LD_INT 1
27098: PPUSH
27099: LD_VAR 0 4
27103: PPUSH
27104: CALL_OW 266
27108: PUSH
27109: LD_VAR 0 4
27113: PPUSH
27114: CALL_OW 250
27118: PUSH
27119: LD_VAR 0 4
27123: PPUSH
27124: CALL_OW 251
27128: PUSH
27129: LD_VAR 0 4
27133: PPUSH
27134: CALL_OW 254
27138: PUSH
27139: LD_VAR 0 4
27143: PPUSH
27144: CALL_OW 267
27148: PUSH
27149: LD_VAR 0 4
27153: PPUSH
27154: CALL_OW 248
27158: PUSH
27159: EMPTY
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: PPUSH
27167: CALL_OW 2
27171: ST_TO_ADDR
27172: GO 27256
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27174: LD_ADDR_VAR 0 2
27178: PUSH
27179: LD_VAR 0 2
27183: PUSH
27184: LD_VAR 0 4
27188: PPUSH
27189: CALL_OW 266
27193: PUSH
27194: LD_VAR 0 4
27198: PPUSH
27199: CALL_OW 250
27203: PUSH
27204: LD_VAR 0 4
27208: PPUSH
27209: CALL_OW 251
27213: PUSH
27214: LD_VAR 0 4
27218: PPUSH
27219: CALL_OW 254
27223: PUSH
27224: LD_VAR 0 4
27228: PPUSH
27229: CALL_OW 267
27233: PUSH
27234: LD_VAR 0 4
27238: PPUSH
27239: CALL_OW 248
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: LIST
27251: PUSH
27252: EMPTY
27253: LIST
27254: ADD
27255: ST_TO_ADDR
// end ;
27256: GO 26820
27258: POP
27259: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27260: LD_VAR 0 2
27264: PPUSH
27265: LD_STRING 10_EpsilonBase
27267: PPUSH
27268: CALL_OW 39
// end ; end_of_file
27272: LD_VAR 0 1
27276: RET
// every 0 0$30 do
27277: GO 27279
27279: DISABLE
// begin enable ;
27280: ENABLE
// if cratesSpawned < 6 then
27281: LD_EXP 55
27285: PUSH
27286: LD_INT 6
27288: LESS
27289: IFFALSE 27326
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27291: LD_INT 3
27293: PPUSH
27294: LD_INT 5
27296: PPUSH
27297: CALL_OW 12
27301: PPUSH
27302: LD_INT 16
27304: PPUSH
27305: LD_INT 1
27307: PPUSH
27308: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27312: LD_ADDR_EXP 55
27316: PUSH
27317: LD_EXP 55
27321: PUSH
27322: LD_INT 1
27324: PLUS
27325: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
27326: LD_EXP 55
27330: PUSH
27331: LD_INT 6
27333: GREATEREQUAL
27334: PUSH
27335: LD_EXP 55
27339: PUSH
27340: LD_INT 12
27342: LESS
27343: AND
27344: IFFALSE 27388
// begin wait ( 0 0$30 ) ;
27346: LD_INT 1050
27348: PPUSH
27349: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27353: LD_INT 3
27355: PPUSH
27356: LD_INT 5
27358: PPUSH
27359: CALL_OW 12
27363: PPUSH
27364: LD_INT 16
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27374: LD_ADDR_EXP 55
27378: PUSH
27379: LD_EXP 55
27383: PUSH
27384: LD_INT 1
27386: PLUS
27387: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
27388: LD_EXP 55
27392: PUSH
27393: LD_INT 12
27395: GREATEREQUAL
27396: IFFALSE 27440
// begin wait ( 1 1$30 ) ;
27398: LD_INT 3150
27400: PPUSH
27401: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
27405: LD_INT 3
27407: PPUSH
27408: LD_INT 5
27410: PPUSH
27411: CALL_OW 12
27415: PPUSH
27416: LD_INT 16
27418: PPUSH
27419: LD_INT 1
27421: PPUSH
27422: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27426: LD_ADDR_EXP 55
27430: PUSH
27431: LD_EXP 55
27435: PUSH
27436: LD_INT 1
27438: PLUS
27439: ST_TO_ADDR
// end ; end ;
27440: END
