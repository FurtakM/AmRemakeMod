// export JMM , Gary , Cyrus , Bobby , Lisa ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export playerVehs ; export joinEpsilon ; export ruBaseReady ; export activateRUAI ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 14
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 15
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 16
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// activateRUAI = 0 ;
  31: LD_ADDR_EXP 17
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// PrepareVehicles ;
  39: CALL 246 0 0
// PrepareJMMTeam ;
  43: CALL 52 0 0
// PrepareCathyTeam ;
  47: CALL 456 0 0
// end ; end_of_file
  51: END
// export function PrepareJMMTeam ; begin
  52: LD_INT 0
  54: PPUSH
// uc_side = 1 ;
  55: LD_ADDR_OWVAR 20
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// uc_nation = 1 ;
  63: LD_ADDR_OWVAR 21
  67: PUSH
  68: LD_INT 1
  70: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
  71: LD_ADDR_EXP 1
  75: PUSH
  76: LD_STRING JMM
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL 2211 0 2
  86: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
  87: LD_ADDR_EXP 2
  91: PUSH
  92: LD_STRING Gary
  94: PPUSH
  95: LD_INT 0
  97: PPUSH
  98: CALL 2211 0 2
 102: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 103: LD_ADDR_EXP 3
 107: PUSH
 108: LD_STRING Cyrus
 110: PPUSH
 111: LD_INT 0
 113: PPUSH
 114: CALL 2211 0 2
 118: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 119: LD_ADDR_EXP 4
 123: PUSH
 124: LD_STRING Bobby
 126: PPUSH
 127: LD_INT 0
 129: PPUSH
 130: CALL 2211 0 2
 134: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 135: LD_ADDR_EXP 5
 139: PUSH
 140: LD_STRING Lisa
 142: PPUSH
 143: LD_INT 0
 145: PPUSH
 146: CALL 2211 0 2
 150: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 151: LD_EXP 1
 155: PPUSH
 156: LD_EXP 14
 160: PUSH
 161: LD_INT 1
 163: ARRAY
 164: PPUSH
 165: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 169: LD_EXP 2
 173: PPUSH
 174: LD_EXP 14
 178: PUSH
 179: LD_INT 2
 181: ARRAY
 182: PPUSH
 183: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 187: LD_EXP 3
 191: PPUSH
 192: LD_EXP 14
 196: PUSH
 197: LD_INT 3
 199: ARRAY
 200: PPUSH
 201: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 205: LD_EXP 4
 209: PPUSH
 210: LD_EXP 14
 214: PUSH
 215: LD_INT 4
 217: ARRAY
 218: PPUSH
 219: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 223: LD_EXP 5
 227: PPUSH
 228: LD_EXP 14
 232: PUSH
 233: LD_INT 5
 235: ARRAY
 236: PPUSH
 237: CALL_OW 52
// end ;
 241: LD_VAR 0 1
 245: RET
// export function PrepareVehicles ; var i , veh ; begin
 246: LD_INT 0
 248: PPUSH
 249: PPUSH
 250: PPUSH
// uc_side = 1 ;
 251: LD_ADDR_OWVAR 20
 255: PUSH
 256: LD_INT 1
 258: ST_TO_ADDR
// uc_nation = 1 ;
 259: LD_ADDR_OWVAR 21
 263: PUSH
 264: LD_INT 1
 266: ST_TO_ADDR
// for i := 1 to 5 do
 267: LD_ADDR_VAR 0 2
 271: PUSH
 272: DOUBLE
 273: LD_INT 1
 275: DEC
 276: ST_TO_ADDR
 277: LD_INT 5
 279: PUSH
 280: FOR_TO
 281: IFFALSE 449
// begin vc_engine = 1 ;
 283: LD_ADDR_OWVAR 39
 287: PUSH
 288: LD_INT 1
 290: ST_TO_ADDR
// vc_control = 1 ;
 291: LD_ADDR_OWVAR 38
 295: PUSH
 296: LD_INT 1
 298: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
 299: LD_ADDR_OWVAR 40
 303: PUSH
 304: LD_INT 3
 306: PUSH
 307: LD_INT 4
 309: PUSH
 310: LD_INT 5
 312: PUSH
 313: LD_INT 12
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 1
 324: PPUSH
 325: LD_INT 4
 327: PPUSH
 328: CALL_OW 12
 332: ARRAY
 333: ST_TO_ADDR
// vc_chassis = 3 ;
 334: LD_ADDR_OWVAR 37
 338: PUSH
 339: LD_INT 3
 341: ST_TO_ADDR
// veh = CreateVehicle ;
 342: LD_ADDR_VAR 0 3
 346: PUSH
 347: CALL_OW 45
 351: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 352: LD_VAR 0 3
 356: PPUSH
 357: LD_INT 1
 359: PPUSH
 360: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 364: LD_VAR 0 3
 368: PPUSH
 369: LD_INT 2
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
 379: LD_ADDR_EXP 14
 383: PUSH
 384: LD_EXP 14
 388: PUSH
 389: LD_VAR 0 3
 393: ADD
 394: ST_TO_ADDR
// if vc_weapon = 12 then
 395: LD_OWVAR 40
 399: PUSH
 400: LD_INT 12
 402: EQUAL
 403: IFFALSE 447
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rand ( 50 , 100 ) ) ;
 405: LD_VAR 0 3
 409: PPUSH
 410: LD_INT 1
 412: PUSH
 413: LD_INT 3
 415: PUSH
 416: EMPTY
 417: LIST
 418: LIST
 419: PUSH
 420: LD_INT 1
 422: PPUSH
 423: LD_INT 2
 425: PPUSH
 426: CALL_OW 12
 430: ARRAY
 431: PPUSH
 432: LD_INT 50
 434: PPUSH
 435: LD_INT 100
 437: PPUSH
 438: CALL_OW 12
 442: PPUSH
 443: CALL_OW 291
// end ;
 447: GO 280
 449: POP
 450: POP
// end ;
 451: LD_VAR 0 1
 455: RET
// export function PrepareCathyTeam ; begin
 456: LD_INT 0
 458: PPUSH
// uc_side = 4 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 4
 466: ST_TO_ADDR
// uc_nation = 1 ;
 467: LD_ADDR_OWVAR 21
 471: PUSH
 472: LD_INT 1
 474: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
 475: LD_ADDR_EXP 6
 479: PUSH
 480: LD_STRING Simms
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 2211 0 2
 490: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
 491: LD_ADDR_EXP 7
 495: PUSH
 496: LD_STRING Denis
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 2211 0 2
 506: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
 507: LD_ADDR_EXP 8
 511: PUSH
 512: LD_STRING Joan
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 2211 0 2
 522: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , false ) ;
 523: LD_ADDR_EXP 9
 527: PUSH
 528: LD_STRING Khatam
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 2211 0 2
 538: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
 539: LD_ADDR_EXP 10
 543: PUSH
 544: LD_STRING Gladstone
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 2211 0 2
 554: ST_TO_ADDR
// Gladstone = PrepareUnit ( DeltaDoctor , false ) ;
 555: LD_ADDR_EXP 10
 559: PUSH
 560: LD_STRING DeltaDoctor
 562: PPUSH
 563: LD_INT 0
 565: PPUSH
 566: CALL 2211 0 2
 570: ST_TO_ADDR
// hc_class := 2 ;
 571: LD_ADDR_OWVAR 28
 575: PUSH
 576: LD_INT 2
 578: ST_TO_ADDR
// hc_sex := sex_male ;
 579: LD_ADDR_OWVAR 27
 583: PUSH
 584: LD_INT 1
 586: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 587: LD_ADDR_OWVAR 33
 591: PUSH
 592: LD_STRING SecondCharsGal
 594: ST_TO_ADDR
// hc_face_number := 60 ;
 595: LD_ADDR_OWVAR 34
 599: PUSH
 600: LD_INT 60
 602: ST_TO_ADDR
// hc_name := Steve Holland ;
 603: LD_ADDR_OWVAR 26
 607: PUSH
 608: LD_STRING Steve Holland
 610: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 611: LD_ADDR_OWVAR 31
 615: PUSH
 616: LD_INT 1
 618: PUSH
 619: LD_INT 7
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: LD_INT 0
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: LIST
 633: ST_TO_ADDR
// Steve = CreateHuman ;
 634: LD_ADDR_EXP 11
 638: PUSH
 639: CALL_OW 44
 643: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
 644: LD_EXP 6
 648: PPUSH
 649: LD_INT 1
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
 659: LD_EXP 7
 663: PPUSH
 664: LD_INT 1
 666: PPUSH
 667: LD_INT 0
 669: PPUSH
 670: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
 674: LD_EXP 8
 678: PPUSH
 679: LD_INT 1
 681: PPUSH
 682: LD_INT 0
 684: PPUSH
 685: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
 689: LD_EXP 9
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
 704: LD_EXP 10
 708: PPUSH
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 0
 714: PPUSH
 715: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
 719: LD_EXP 12
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 0
 729: PPUSH
 730: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
 734: LD_EXP 11
 738: PPUSH
 739: LD_INT 1
 741: PPUSH
 742: LD_INT 0
 744: PPUSH
 745: CALL_OW 49
// SetClass ( [ Khatam , Denis ] , 4 ) ;
 749: LD_EXP 9
 753: PUSH
 754: LD_EXP 7
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: LD_INT 4
 765: PPUSH
 766: CALL_OW 336
// AddComBuild ( Steve , b_depot , 101 , 30 , 2 ) ;
 770: LD_EXP 11
 774: PPUSH
 775: LD_INT 0
 777: PPUSH
 778: LD_INT 101
 780: PPUSH
 781: LD_INT 30
 783: PPUSH
 784: LD_INT 2
 786: PPUSH
 787: CALL_OW 205
// uc_side = 1 ;
 791: LD_ADDR_OWVAR 20
 795: PUSH
 796: LD_INT 1
 798: ST_TO_ADDR
// hc_class := 1 ;
 799: LD_ADDR_OWVAR 28
 803: PUSH
 804: LD_INT 1
 806: ST_TO_ADDR
// hc_sex := sex_female ;
 807: LD_ADDR_OWVAR 27
 811: PUSH
 812: LD_INT 2
 814: ST_TO_ADDR
// hc_gallery :=  ;
 815: LD_ADDR_OWVAR 33
 819: PUSH
 820: LD_STRING 
 822: ST_TO_ADDR
// hc_name :=  ;
 823: LD_ADDR_OWVAR 26
 827: PUSH
 828: LD_STRING 
 830: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
 831: LD_ADDR_OWVAR 31
 835: PUSH
 836: LD_INT 1
 838: PUSH
 839: LD_INT 7
 841: PUSH
 842: LD_INT 1
 844: PUSH
 845: LD_INT 0
 847: PUSH
 848: EMPTY
 849: LIST
 850: LIST
 851: LIST
 852: LIST
 853: ST_TO_ADDR
// AmScout = CreateHuman ;
 854: LD_ADDR_EXP 13
 858: PUSH
 859: CALL_OW 44
 863: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
 864: LD_VAR 0 1
 868: RET
// every 1 do
 869: GO 871
 871: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
 872: LD_EXP 1
 876: PPUSH
 877: CALL_OW 87
// DialogueOn ;
 881: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_STRING D2-Gary-1
 892: PPUSH
 893: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
 897: LD_EXP 1
 901: PPUSH
 902: LD_STRING D2-JMM-1
 904: PPUSH
 905: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
 909: LD_EXP 2
 913: PPUSH
 914: LD_STRING D2-Gary-2
 916: PPUSH
 917: CALL_OW 88
// DialogueOff ;
 921: CALL_OW 7
// ChangeMissionObjectives ( M1 ) ;
 925: LD_STRING M1
 927: PPUSH
 928: CALL_OW 337
// end ;
 932: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 9 do
 933: LD_EXP 1
 937: PPUSH
 938: LD_EXP 6
 942: PPUSH
 943: CALL_OW 296
 947: PUSH
 948: LD_INT 9
 950: LESS
 951: IFFALSE 1255
 953: GO 955
 955: DISABLE
// begin InGameOn ;
 956: CALL_OW 8
// ComExitVehicle ( JMM ) ;
 960: LD_EXP 1
 964: PPUSH
 965: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
 969: LD_EXP 1
 973: PPUSH
 974: CALL_OW 87
// wait ( 0 0$1 ) ;
 978: LD_INT 35
 980: PPUSH
 981: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
 985: LD_EXP 6
 989: PUSH
 990: LD_EXP 8
 994: PUSH
 995: LD_EXP 7
 999: PUSH
1000: LD_EXP 9
1004: PUSH
1005: EMPTY
1006: LIST
1007: LIST
1008: LIST
1009: LIST
1010: PPUSH
1011: LD_EXP 1
1015: PPUSH
1016: CALL_OW 112
// ComTurnUnit ( JMM , Simms ) ;
1020: LD_EXP 1
1024: PPUSH
1025: LD_EXP 6
1029: PPUSH
1030: CALL_OW 119
// wait ( 0 0$2 ) ;
1034: LD_INT 70
1036: PPUSH
1037: CALL_OW 67
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
1041: LD_EXP 6
1045: PUSH
1046: LD_EXP 8
1050: PUSH
1051: LD_EXP 7
1055: PUSH
1056: LD_EXP 9
1060: PUSH
1061: EMPTY
1062: LIST
1063: LIST
1064: LIST
1065: LIST
1066: PPUSH
1067: LD_EXP 1
1071: PPUSH
1072: CALL_OW 119
// Say ( Simms , D2a-Sim-1 ) ;
1076: LD_EXP 6
1080: PPUSH
1081: LD_STRING D2a-Sim-1
1083: PPUSH
1084: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
1088: LD_EXP 1
1092: PPUSH
1093: LD_STRING D2a-JMM-1
1095: PPUSH
1096: CALL_OW 88
// ComTurnUnit ( JMM , Joan ) ;
1100: LD_EXP 1
1104: PPUSH
1105: LD_EXP 8
1109: PPUSH
1110: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
1114: LD_EXP 8
1118: PPUSH
1119: LD_STRING D2b-Joan-1
1121: PPUSH
1122: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
1126: LD_EXP 1
1130: PPUSH
1131: LD_STRING D2b-JMM-1
1133: PPUSH
1134: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
1138: LD_EXP 8
1142: PPUSH
1143: LD_STRING D2b-Joan-2
1145: PPUSH
1146: CALL_OW 88
// ComTurnUnit ( JMM , Denis ) ;
1150: LD_EXP 1
1154: PPUSH
1155: LD_EXP 7
1159: PPUSH
1160: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
1164: LD_EXP 7
1168: PPUSH
1169: LD_STRING D2c-Den-1
1171: PPUSH
1172: CALL_OW 88
// ComTurnUnit ( JMM , Khatam ) ;
1176: LD_EXP 1
1180: PPUSH
1181: LD_EXP 9
1185: PPUSH
1186: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
1190: LD_EXP 1
1194: PPUSH
1195: LD_STRING D2c-JMM-1
1197: PPUSH
1198: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
1202: LD_EXP 9
1206: PPUSH
1207: LD_STRING D2c-Khat-1
1209: PPUSH
1210: CALL_OW 88
// InGameOff ;
1214: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
1218: LD_INT 22
1220: PUSH
1221: LD_INT 4
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PPUSH
1228: CALL_OW 69
1232: PPUSH
1233: LD_INT 1
1235: PPUSH
1236: CALL_OW 235
// ChangeMissionObjectives ( M1 ) ;
1240: LD_STRING M1
1242: PPUSH
1243: CALL_OW 337
// joinEpsilon = 1 ;
1247: LD_ADDR_EXP 15
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// end ;
1255: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 do
1256: LD_INT 22
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 2
1268: PUSH
1269: LD_INT 30
1271: PUSH
1272: LD_INT 7
1274: PUSH
1275: EMPTY
1276: LIST
1277: LIST
1278: PUSH
1279: LD_INT 30
1281: PUSH
1282: LD_INT 8
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PPUSH
1298: CALL_OW 69
1302: PUSH
1303: LD_INT 0
1305: GREATER
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_INT 1
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: PUSH
1317: LD_INT 2
1319: PUSH
1320: LD_INT 30
1322: PUSH
1323: LD_INT 26
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PUSH
1330: LD_INT 30
1332: PUSH
1333: LD_INT 27
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PUSH
1340: LD_INT 30
1342: PUSH
1343: LD_INT 28
1345: PUSH
1346: EMPTY
1347: LIST
1348: LIST
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: LIST
1354: LIST
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: PPUSH
1360: CALL_OW 69
1364: PUSH
1365: LD_INT 0
1367: GREATER
1368: AND
1369: IFFALSE 1921
1371: GO 1373
1373: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-1 , D3-Sci1-1 ) ;
1374: LD_INT 22
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: LD_INT 25
1386: PUSH
1387: LD_INT 4
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PUSH
1394: LD_INT 26
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: PPUSH
1409: CALL_OW 69
1413: PPUSH
1414: LD_STRING D3-Sci1-1
1416: PPUSH
1417: LD_STRING D3-Sci1-1
1419: PPUSH
1420: CALL 2268 0 3
// Say ( Gary , D3-Gary-1 ) ;
1424: LD_EXP 2
1428: PPUSH
1429: LD_STRING D3-Gary-1
1431: PPUSH
1432: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-2 , D3-Sci1-2 ) ;
1436: LD_INT 22
1438: PUSH
1439: LD_INT 1
1441: PUSH
1442: EMPTY
1443: LIST
1444: LIST
1445: PUSH
1446: LD_INT 25
1448: PUSH
1449: LD_INT 4
1451: PUSH
1452: EMPTY
1453: LIST
1454: LIST
1455: PUSH
1456: LD_INT 26
1458: PUSH
1459: LD_INT 1
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: PPUSH
1471: CALL_OW 69
1475: PPUSH
1476: LD_STRING D3-Sci1-2
1478: PPUSH
1479: LD_STRING D3-Sci1-2
1481: PPUSH
1482: CALL 2268 0 3
// Say ( JMM , D3-JMM-2 ) ;
1486: LD_EXP 1
1490: PPUSH
1491: LD_STRING D3-JMM-2
1493: PPUSH
1494: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-3 , D3-Sci1-3 ) ;
1498: LD_INT 22
1500: PUSH
1501: LD_INT 1
1503: PUSH
1504: EMPTY
1505: LIST
1506: LIST
1507: PUSH
1508: LD_INT 25
1510: PUSH
1511: LD_INT 4
1513: PUSH
1514: EMPTY
1515: LIST
1516: LIST
1517: PUSH
1518: LD_INT 26
1520: PUSH
1521: LD_INT 1
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: PUSH
1528: EMPTY
1529: LIST
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: PPUSH
1538: LD_STRING D3-Sci1-3
1540: PPUSH
1541: LD_STRING D3-Sci1-3
1543: PPUSH
1544: CALL 2268 0 3
// Say ( JMM , D3-JMM-3 ) ;
1548: LD_EXP 1
1552: PPUSH
1553: LD_STRING D3-JMM-3
1555: PPUSH
1556: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-4 , D3-Sci1-4 ) ;
1560: LD_INT 22
1562: PUSH
1563: LD_INT 1
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PUSH
1570: LD_INT 25
1572: PUSH
1573: LD_INT 4
1575: PUSH
1576: EMPTY
1577: LIST
1578: LIST
1579: PUSH
1580: LD_INT 26
1582: PUSH
1583: LD_INT 1
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: PUSH
1590: EMPTY
1591: LIST
1592: LIST
1593: LIST
1594: PPUSH
1595: CALL_OW 69
1599: PPUSH
1600: LD_STRING D3-Sci1-4
1602: PPUSH
1603: LD_STRING D3-Sci1-4
1605: PPUSH
1606: CALL 2268 0 3
// SetTech ( 12 , 1 , state_enabled ) ;
1610: LD_INT 12
1612: PPUSH
1613: LD_INT 1
1615: PPUSH
1616: LD_INT 1
1618: PPUSH
1619: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
1623: LD_INT 32
1625: PPUSH
1626: LD_INT 1
1628: PPUSH
1629: LD_INT 1
1631: PPUSH
1632: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
1636: LD_INT 12
1638: PPUSH
1639: LD_INT 1
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
1649: LD_STRING M2
1651: PPUSH
1652: CALL_OW 337
// wait ( 3 3$0 ) ;
1656: LD_INT 6300
1658: PPUSH
1659: CALL_OW 67
// if IsOK ( Simms ) then
1663: LD_EXP 6
1667: PPUSH
1668: CALL_OW 302
1672: IFFALSE 1814
// begin DialogueOn ;
1674: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
1678: LD_EXP 6
1682: PPUSH
1683: LD_STRING D3a-Sim-1
1685: PPUSH
1686: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
1690: LD_EXP 7
1694: PPUSH
1695: LD_STRING D3a-Sci1-1
1697: PPUSH
1698: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
1702: LD_EXP 6
1706: PPUSH
1707: LD_STRING D3a-Sim-2
1709: PPUSH
1710: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
1714: LD_EXP 7
1718: PPUSH
1719: LD_STRING D3a-Sci1-2
1721: PPUSH
1722: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
1726: LD_EXP 6
1730: PPUSH
1731: LD_STRING D3a-Sim-3
1733: PPUSH
1734: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
1738: LD_EXP 7
1742: PPUSH
1743: LD_STRING D3a-Sci1-3
1745: PPUSH
1746: CALL_OW 88
// Say ( Simms , D3a-Sim-4 ) ;
1750: LD_EXP 6
1754: PPUSH
1755: LD_STRING D3a-Sim-4
1757: PPUSH
1758: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
1762: LD_EXP 7
1766: PPUSH
1767: LD_STRING D3a-Sci1-4
1769: PPUSH
1770: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
1774: LD_EXP 6
1778: PPUSH
1779: LD_STRING D3a-Sim-5
1781: PPUSH
1782: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
1786: LD_EXP 7
1790: PPUSH
1791: LD_STRING D3a-Sci1-5
1793: PPUSH
1794: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
1798: LD_EXP 6
1802: PPUSH
1803: LD_STRING D3a-Sim-6
1805: PPUSH
1806: CALL_OW 88
// DialogueOff ;
1810: CALL_OW 7
// end ; wait ( 2 2$0 ) ;
1814: LD_INT 4200
1816: PPUSH
1817: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
1821: LD_INT 22
1823: PUSH
1824: LD_INT 2
1826: PUSH
1827: EMPTY
1828: LIST
1829: LIST
1830: PUSH
1831: LD_INT 25
1833: PUSH
1834: LD_INT 4
1836: PUSH
1837: EMPTY
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 26
1843: PUSH
1844: LD_INT 1
1846: PUSH
1847: EMPTY
1848: LIST
1849: LIST
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: PPUSH
1856: CALL_OW 69
1860: PPUSH
1861: LD_STRING D5-Ar1-1
1863: PPUSH
1864: LD_STRING D5-Ar1-1
1866: PPUSH
1867: CALL 2268 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
1871: LD_INT 22
1873: PUSH
1874: LD_INT 2
1876: PUSH
1877: EMPTY
1878: LIST
1879: LIST
1880: PUSH
1881: LD_INT 25
1883: PUSH
1884: LD_INT 4
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: PUSH
1891: LD_INT 26
1893: PUSH
1894: LD_INT 1
1896: PUSH
1897: EMPTY
1898: LIST
1899: LIST
1900: PUSH
1901: EMPTY
1902: LIST
1903: LIST
1904: LIST
1905: PPUSH
1906: CALL_OW 69
1910: PPUSH
1911: LD_STRING D5-Ar1-2
1913: PPUSH
1914: LD_STRING D5-Ar1-2
1916: PPUSH
1917: CALL 2268 0 3
// end ;
1921: END
// every 2 2$1 trigger joinEpsilon = 1 do
1922: LD_EXP 15
1926: PUSH
1927: LD_INT 1
1929: EQUAL
1930: IFFALSE 1954
1932: GO 1934
1934: DISABLE
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
1935: LD_EXP 13
1939: PPUSH
1940: LD_STRING D4-FSol1-1
1942: PPUSH
1943: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
1947: LD_STRING M3
1949: PPUSH
1950: CALL_OW 337
// end ;
1954: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched do
1955: LD_INT 54
1957: PPUSH
1958: LD_INT 1
1960: PPUSH
1961: CALL_OW 321
1965: PUSH
1966: LD_INT 2
1968: EQUAL
1969: IFFALSE 2210
1971: GO 1973
1973: DISABLE
// begin DialogueOn ;
1974: CALL_OW 6
// Say ( JMM ,  D6-JMM-1 ) ;
1978: LD_EXP 1
1982: PPUSH
1983: LD_STRING  D6-JMM-1
1985: PPUSH
1986: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
1990: LD_EXP 7
1994: PPUSH
1995: LD_STRING D6-Sci1-1
1997: PPUSH
1998: CALL_OW 88
// Say ( JMM ,  D6-JMM-2 ) ;
2002: LD_EXP 1
2006: PPUSH
2007: LD_STRING  D6-JMM-2
2009: PPUSH
2010: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
2014: LD_EXP 7
2018: PPUSH
2019: LD_STRING D6-Sci1-2
2021: PPUSH
2022: CALL_OW 88
// Say ( JMM ,  D6-JMM-3 ) ;
2026: LD_EXP 1
2030: PPUSH
2031: LD_STRING  D6-JMM-3
2033: PPUSH
2034: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
2038: LD_EXP 7
2042: PPUSH
2043: LD_STRING D6-Sci1-3
2045: PPUSH
2046: CALL_OW 88
// Say ( JMM ,  D6-JMM-4 ) ;
2050: LD_EXP 1
2054: PPUSH
2055: LD_STRING  D6-JMM-4
2057: PPUSH
2058: CALL_OW 88
// DialogueOff ;
2062: CALL_OW 7
// wait ( [ 2 2$0 , 2 2$30 , 3 3$0 , 3 3$30 , 4 4$0 , 4 4$30 ] [ Rand ( 1 , 6 ) ] ) ;
2066: LD_INT 4200
2068: PUSH
2069: LD_INT 5250
2071: PUSH
2072: LD_INT 6300
2074: PUSH
2075: LD_INT 7350
2077: PUSH
2078: LD_INT 8400
2080: PUSH
2081: LD_INT 9450
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: LIST
2088: LIST
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 1
2094: PPUSH
2095: LD_INT 6
2097: PPUSH
2098: CALL_OW 12
2102: ARRAY
2103: PPUSH
2104: CALL_OW 67
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
2108: LD_INT 22
2110: PUSH
2111: LD_INT 1
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: PUSH
2118: LD_INT 25
2120: PUSH
2121: LD_INT 1
2123: PUSH
2124: EMPTY
2125: LIST
2126: LIST
2127: PUSH
2128: LD_INT 26
2130: PUSH
2131: LD_INT 1
2133: PUSH
2134: EMPTY
2135: LIST
2136: LIST
2137: PUSH
2138: EMPTY
2139: LIST
2140: LIST
2141: LIST
2142: PUSH
2143: LD_EXP 1
2147: PUSH
2148: EMPTY
2149: LIST
2150: DIFF
2151: PPUSH
2152: CALL_OW 69
2156: PPUSH
2157: LD_STRING D8-Sol1-1
2159: PPUSH
2160: LD_STRING D8-Sol1-1
2162: PPUSH
2163: CALL 2268 0 3
// Say ( DeltaDoctor , D8-Sci1-1 ) ;
2167: LD_EXP 12
2171: PPUSH
2172: LD_STRING D8-Sci1-1
2174: PPUSH
2175: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
2179: LD_EXP 1
2183: PPUSH
2184: LD_STRING D8-JMM-1
2186: PPUSH
2187: CALL_OW 88
// wait ( 0 0$30 ) ;
2191: LD_INT 1050
2193: PPUSH
2194: CALL_OW 67
// Say ( Gary , D8a-Gary-1 ) ;
2198: LD_EXP 2
2202: PPUSH
2203: LD_STRING D8a-Gary-1
2205: PPUSH
2206: CALL_OW 88
// end ; end_of_file
2210: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
2211: LD_INT 0
2213: PPUSH
2214: PPUSH
// if exist_mode then
2215: LD_VAR 0 2
2219: IFFALSE 2238
// unit := CreateCharacter ( ident ) else
2221: LD_ADDR_VAR 0 4
2225: PUSH
2226: LD_VAR 0 1
2230: PPUSH
2231: CALL_OW 34
2235: ST_TO_ADDR
2236: GO 2253
// unit := NewCharacter ( ident ) ;
2238: LD_ADDR_VAR 0 4
2242: PUSH
2243: LD_VAR 0 1
2247: PPUSH
2248: CALL_OW 25
2252: ST_TO_ADDR
// result := unit ;
2253: LD_ADDR_VAR 0 3
2257: PUSH
2258: LD_VAR 0 4
2262: ST_TO_ADDR
// end ;
2263: LD_VAR 0 3
2267: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
2268: LD_INT 0
2270: PPUSH
2271: PPUSH
2272: PPUSH
// rnd = rand ( 1 , characters ) ;
2273: LD_ADDR_VAR 0 6
2277: PUSH
2278: LD_INT 1
2280: PPUSH
2281: LD_VAR 0 1
2285: PPUSH
2286: CALL_OW 12
2290: ST_TO_ADDR
// for i = 1 to characters do
2291: LD_ADDR_VAR 0 5
2295: PUSH
2296: DOUBLE
2297: LD_INT 1
2299: DEC
2300: ST_TO_ADDR
2301: LD_VAR 0 1
2305: PUSH
2306: FOR_TO
2307: IFFALSE 2417
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
2309: LD_VAR 0 5
2313: PUSH
2314: LD_VAR 0 6
2318: EQUAL
2319: PUSH
2320: LD_VAR 0 1
2324: PUSH
2325: LD_VAR 0 5
2329: ARRAY
2330: PPUSH
2331: CALL_OW 258
2335: PUSH
2336: LD_INT 1
2338: EQUAL
2339: AND
2340: IFFALSE 2362
// Say ( characters [ i ] , dialogMID ) ;
2342: LD_VAR 0 1
2346: PUSH
2347: LD_VAR 0 5
2351: ARRAY
2352: PPUSH
2353: LD_VAR 0 2
2357: PPUSH
2358: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
2362: LD_VAR 0 5
2366: PUSH
2367: LD_VAR 0 6
2371: EQUAL
2372: PUSH
2373: LD_VAR 0 1
2377: PUSH
2378: LD_VAR 0 5
2382: ARRAY
2383: PPUSH
2384: CALL_OW 258
2388: PUSH
2389: LD_INT 2
2391: EQUAL
2392: AND
2393: IFFALSE 2415
// Say ( characters [ i ] , dialogFID ) ;
2395: LD_VAR 0 1
2399: PUSH
2400: LD_VAR 0 5
2404: ARRAY
2405: PPUSH
2406: LD_VAR 0 3
2410: PPUSH
2411: CALL_OW 88
// end ;
2415: GO 2306
2417: POP
2418: POP
// end ;
2419: LD_VAR 0 4
2423: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
2424: LD_INT 0
2426: PPUSH
2427: PPUSH
2428: PPUSH
2429: PPUSH
// if position = 1 then
2430: LD_VAR 0 1
2434: PUSH
2435: LD_INT 1
2437: EQUAL
2438: IFFALSE 2952
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
2440: LD_ADDR_VAR 0 4
2444: PUSH
2445: LD_INT 22
2447: PUSH
2448: LD_INT 3
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 25
2457: PUSH
2458: LD_INT 2
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PPUSH
2469: CALL_OW 69
2473: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 90 , 86 , 3 ] , [ b_armoury , 75 , 79 , 2 ] , [ b_armoury , 113 , 94 , 4 ] , [ b_oil_mine , 106 , 97 , 3 ] , [ b_oil_power , 93 , 97 , 5 ] , [ b_workshop , 100 , 89 , 3 ] , [ b_ext_gun , 96 , 89 , 1 ] , [ b_bunker , 78 , 94 , 1 ] , [ b_bunker , 95 , 82 , 3 ] , [ b_bunker , 104 , 85 , 2 ] , [ b_bunker , 81 , 78 , 2 ] , [ b_turret , 109 , 90 , 3 ] , [ b_turret , 88 , 79 , 3 ] , [ b_turret , 76 , 87 , 1 ] , [ b_oil_power , 96 , 97 , 5 ] , [ b_oil_power , 85 , 84 , 2 ] , [ b_lab , 88 , 95 , 0 ] , [ b_ext_noncombat , 103 , 89 , 4 ] , [ b_ext_track , 97 , 86 , 2 ] , [ b_ext_computer , 100 , 85 , 3 ] ] ;
2474: LD_ADDR_VAR 0 5
2478: PUSH
2479: LD_INT 0
2481: PUSH
2482: LD_INT 90
2484: PUSH
2485: LD_INT 86
2487: PUSH
2488: LD_INT 3
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 4
2499: PUSH
2500: LD_INT 75
2502: PUSH
2503: LD_INT 79
2505: PUSH
2506: LD_INT 2
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 4
2517: PUSH
2518: LD_INT 113
2520: PUSH
2521: LD_INT 94
2523: PUSH
2524: LD_INT 4
2526: PUSH
2527: EMPTY
2528: LIST
2529: LIST
2530: LIST
2531: LIST
2532: PUSH
2533: LD_INT 29
2535: PUSH
2536: LD_INT 106
2538: PUSH
2539: LD_INT 97
2541: PUSH
2542: LD_INT 3
2544: PUSH
2545: EMPTY
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: PUSH
2551: LD_INT 26
2553: PUSH
2554: LD_INT 93
2556: PUSH
2557: LD_INT 97
2559: PUSH
2560: LD_INT 5
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 2
2571: PUSH
2572: LD_INT 100
2574: PUSH
2575: LD_INT 89
2577: PUSH
2578: LD_INT 3
2580: PUSH
2581: EMPTY
2582: LIST
2583: LIST
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 17
2589: PUSH
2590: LD_INT 96
2592: PUSH
2593: LD_INT 89
2595: PUSH
2596: LD_INT 1
2598: PUSH
2599: EMPTY
2600: LIST
2601: LIST
2602: LIST
2603: LIST
2604: PUSH
2605: LD_INT 32
2607: PUSH
2608: LD_INT 78
2610: PUSH
2611: LD_INT 94
2613: PUSH
2614: LD_INT 1
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: LIST
2621: LIST
2622: PUSH
2623: LD_INT 32
2625: PUSH
2626: LD_INT 95
2628: PUSH
2629: LD_INT 82
2631: PUSH
2632: LD_INT 3
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: LIST
2639: LIST
2640: PUSH
2641: LD_INT 32
2643: PUSH
2644: LD_INT 104
2646: PUSH
2647: LD_INT 85
2649: PUSH
2650: LD_INT 2
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: PUSH
2659: LD_INT 32
2661: PUSH
2662: LD_INT 81
2664: PUSH
2665: LD_INT 78
2667: PUSH
2668: LD_INT 2
2670: PUSH
2671: EMPTY
2672: LIST
2673: LIST
2674: LIST
2675: LIST
2676: PUSH
2677: LD_INT 33
2679: PUSH
2680: LD_INT 109
2682: PUSH
2683: LD_INT 90
2685: PUSH
2686: LD_INT 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 33
2697: PUSH
2698: LD_INT 88
2700: PUSH
2701: LD_INT 79
2703: PUSH
2704: LD_INT 3
2706: PUSH
2707: EMPTY
2708: LIST
2709: LIST
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 33
2715: PUSH
2716: LD_INT 76
2718: PUSH
2719: LD_INT 87
2721: PUSH
2722: LD_INT 1
2724: PUSH
2725: EMPTY
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PUSH
2731: LD_INT 26
2733: PUSH
2734: LD_INT 96
2736: PUSH
2737: LD_INT 97
2739: PUSH
2740: LD_INT 5
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 26
2751: PUSH
2752: LD_INT 85
2754: PUSH
2755: LD_INT 84
2757: PUSH
2758: LD_INT 2
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: LIST
2765: LIST
2766: PUSH
2767: LD_INT 6
2769: PUSH
2770: LD_INT 88
2772: PUSH
2773: LD_INT 95
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: LD_INT 19
2787: PUSH
2788: LD_INT 103
2790: PUSH
2791: LD_INT 89
2793: PUSH
2794: LD_INT 4
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: LIST
2802: PUSH
2803: LD_INT 16
2805: PUSH
2806: LD_INT 97
2808: PUSH
2809: LD_INT 86
2811: PUSH
2812: LD_INT 2
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: LIST
2819: LIST
2820: PUSH
2821: LD_INT 24
2823: PUSH
2824: LD_INT 100
2826: PUSH
2827: LD_INT 85
2829: PUSH
2830: LD_INT 3
2832: PUSH
2833: EMPTY
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: PUSH
2839: EMPTY
2840: LIST
2841: LIST
2842: LIST
2843: LIST
2844: LIST
2845: LIST
2846: LIST
2847: LIST
2848: LIST
2849: LIST
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: LIST
2855: LIST
2856: LIST
2857: LIST
2858: LIST
2859: LIST
2860: ST_TO_ADDR
// for i := 1 to buildingsTab do
2861: LD_ADDR_VAR 0 3
2865: PUSH
2866: DOUBLE
2867: LD_INT 1
2869: DEC
2870: ST_TO_ADDR
2871: LD_VAR 0 5
2875: PUSH
2876: FOR_TO
2877: IFFALSE 2950
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
2879: LD_VAR 0 4
2883: PPUSH
2884: LD_VAR 0 5
2888: PUSH
2889: LD_VAR 0 3
2893: ARRAY
2894: PUSH
2895: LD_INT 1
2897: ARRAY
2898: PPUSH
2899: LD_VAR 0 5
2903: PUSH
2904: LD_VAR 0 3
2908: ARRAY
2909: PUSH
2910: LD_INT 2
2912: ARRAY
2913: PPUSH
2914: LD_VAR 0 5
2918: PUSH
2919: LD_VAR 0 3
2923: ARRAY
2924: PUSH
2925: LD_INT 3
2927: ARRAY
2928: PPUSH
2929: LD_VAR 0 5
2933: PUSH
2934: LD_VAR 0 3
2938: ARRAY
2939: PUSH
2940: LD_INT 4
2942: ARRAY
2943: PPUSH
2944: CALL_OW 205
2948: GO 2876
2950: POP
2951: POP
// end ; end ;
2952: LD_VAR 0 2
2956: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
2957: LD_INT 0
2959: PPUSH
2960: PPUSH
2961: PPUSH
2962: PPUSH
2963: PPUSH
2964: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
2965: LD_ADDR_VAR 0 7
2969: PUSH
2970: LD_INT 22
2972: PUSH
2973: LD_VAR 0 1
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 25
2984: PUSH
2985: LD_INT 9
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 69
3000: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
3001: LD_ADDR_VAR 0 8
3005: PUSH
3006: LD_INT 22
3008: PUSH
3009: LD_VAR 0 2
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 3
3020: PUSH
3021: LD_INT 21
3023: PUSH
3024: LD_INT 3
3026: PUSH
3027: EMPTY
3028: LIST
3029: LIST
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PPUSH
3039: CALL_OW 69
3043: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
3044: LD_ADDR_VAR 0 5
3048: PUSH
3049: LD_INT 1
3051: PPUSH
3052: LD_INT 3
3054: PPUSH
3055: CALL_OW 12
3059: ST_TO_ADDR
// for i = 1 to list do
3060: LD_ADDR_VAR 0 6
3064: PUSH
3065: DOUBLE
3066: LD_INT 1
3068: DEC
3069: ST_TO_ADDR
3070: LD_VAR 0 7
3074: PUSH
3075: FOR_TO
3076: IFFALSE 3258
// for ta in filter do
3078: LD_ADDR_VAR 0 4
3082: PUSH
3083: LD_VAR 0 8
3087: PUSH
3088: FOR_IN
3089: IFFALSE 3254
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
3091: LD_VAR 0 7
3095: PUSH
3096: LD_VAR 0 6
3100: ARRAY
3101: PPUSH
3102: LD_VAR 0 4
3106: PPUSH
3107: CALL_OW 296
3111: PUSH
3112: LD_INT 13
3114: LESSEQUAL
3115: IFFALSE 3252
// begin case c of 1 :
3117: LD_VAR 0 5
3121: PUSH
3122: LD_INT 1
3124: DOUBLE
3125: EQUAL
3126: IFTRUE 3130
3128: GO 3168
3130: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
3131: LD_VAR 0 7
3135: PUSH
3136: LD_VAR 0 6
3140: ARRAY
3141: PPUSH
3142: LD_VAR 0 4
3146: PPUSH
3147: CALL_OW 250
3151: PPUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: CALL_OW 251
3161: PPUSH
3162: CALL_OW 154
3166: GO 3252
3168: LD_INT 2
3170: DOUBLE
3171: EQUAL
3172: IFTRUE 3176
3174: GO 3240
3176: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
3177: LD_VAR 0 7
3181: PUSH
3182: LD_VAR 0 6
3186: ARRAY
3187: PPUSH
3188: LD_VAR 0 4
3192: PPUSH
3193: CALL_OW 250
3197: PUSH
3198: LD_INT 1
3200: NEG
3201: PPUSH
3202: LD_INT 1
3204: PPUSH
3205: CALL_OW 12
3209: PLUS
3210: PPUSH
3211: LD_VAR 0 4
3215: PPUSH
3216: CALL_OW 251
3220: PUSH
3221: LD_INT 1
3223: NEG
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: CALL_OW 12
3232: PLUS
3233: PPUSH
3234: CALL_OW 153
3238: GO 3252
3240: LD_INT 3
3242: DOUBLE
3243: EQUAL
3244: IFTRUE 3248
3246: GO 3251
3248: POP
// ; end ;
3249: GO 3252
3251: POP
// end ; end ;
3252: GO 3088
3254: POP
3255: POP
3256: GO 3075
3258: POP
3259: POP
// end ;
3260: LD_VAR 0 3
3264: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
3265: LD_INT 0
3267: PPUSH
3268: PPUSH
3269: PPUSH
3270: PPUSH
// for i = 1 to 72 do
3271: LD_ADDR_VAR 0 5
3275: PUSH
3276: DOUBLE
3277: LD_INT 1
3279: DEC
3280: ST_TO_ADDR
3281: LD_INT 72
3283: PUSH
3284: FOR_TO
3285: IFFALSE 3343
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
3287: LD_VAR 0 5
3291: PPUSH
3292: LD_VAR 0 1
3296: PPUSH
3297: CALL_OW 321
3301: PUSH
3302: LD_INT 1
3304: EQUAL
3305: PUSH
3306: LD_VAR 0 5
3310: PPUSH
3311: LD_VAR 0 3
3315: PPUSH
3316: CALL_OW 482
3320: PUSH
3321: LD_INT 1
3323: EQUAL
3324: AND
3325: IFFALSE 3341
// AddComResearch ( lab , i ) ;
3327: LD_VAR 0 2
3331: PPUSH
3332: LD_VAR 0 5
3336: PPUSH
3337: CALL_OW 184
3341: GO 3284
3343: POP
3344: POP
// end ;
3345: LD_VAR 0 4
3349: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
3350: LD_INT 0
3352: PPUSH
3353: PPUSH
3354: PPUSH
3355: PPUSH
3356: PPUSH
3357: PPUSH
3358: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
3359: LD_ADDR_VAR 0 6
3363: PUSH
3364: LD_INT 22
3366: PUSH
3367: LD_VAR 0 1
3371: PUSH
3372: EMPTY
3373: LIST
3374: LIST
3375: PUSH
3376: LD_INT 25
3378: PUSH
3379: LD_INT 1
3381: PUSH
3382: EMPTY
3383: LIST
3384: LIST
3385: PUSH
3386: LD_INT 56
3388: PUSH
3389: EMPTY
3390: LIST
3391: PUSH
3392: LD_INT 24
3394: PUSH
3395: LD_INT 700
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: LIST
3406: LIST
3407: PPUSH
3408: CALL_OW 69
3412: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
3413: LD_ADDR_VAR 0 7
3417: PUSH
3418: LD_INT 22
3420: PUSH
3421: LD_VAR 0 1
3425: PUSH
3426: EMPTY
3427: LIST
3428: LIST
3429: PUSH
3430: LD_INT 30
3432: PUSH
3433: LD_INT 32
3435: PUSH
3436: EMPTY
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 58
3442: PUSH
3443: EMPTY
3444: LIST
3445: PUSH
3446: LD_INT 24
3448: PUSH
3449: LD_INT 251
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: PUSH
3456: EMPTY
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: PPUSH
3462: CALL_OW 69
3466: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
3467: LD_ADDR_VAR 0 9
3471: PUSH
3472: LD_INT 22
3474: PUSH
3475: LD_VAR 0 1
3479: PUSH
3480: EMPTY
3481: LIST
3482: LIST
3483: PUSH
3484: LD_INT 2
3486: PUSH
3487: LD_INT 30
3489: PUSH
3490: LD_INT 4
3492: PUSH
3493: EMPTY
3494: LIST
3495: LIST
3496: PUSH
3497: LD_INT 30
3499: PUSH
3500: LD_INT 5
3502: PUSH
3503: EMPTY
3504: LIST
3505: LIST
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: PUSH
3512: LD_INT 24
3514: PUSH
3515: LD_INT 251
3517: PUSH
3518: EMPTY
3519: LIST
3520: LIST
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: LIST
3526: PPUSH
3527: CALL_OW 69
3531: ST_TO_ADDR
// if barrackList > 0 then
3532: LD_VAR 0 9
3536: PUSH
3537: LD_INT 0
3539: GREATER
3540: IFFALSE 3629
// begin if turretList = 0 then
3542: LD_VAR 0 7
3546: PUSH
3547: LD_INT 0
3549: EQUAL
3550: IFFALSE 3589
// begin for i in soldiers_list do
3552: LD_ADDR_VAR 0 4
3556: PUSH
3557: LD_VAR 0 6
3561: PUSH
3562: FOR_IN
3563: IFFALSE 3585
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
3565: LD_VAR 0 4
3569: PPUSH
3570: LD_VAR 0 9
3574: PUSH
3575: LD_INT 1
3577: ARRAY
3578: PPUSH
3579: CALL_OW 120
3583: GO 3562
3585: POP
3586: POP
// end else
3587: GO 3629
// begin for i in barrackList do
3589: LD_ADDR_VAR 0 4
3593: PUSH
3594: LD_VAR 0 9
3598: PUSH
3599: FOR_IN
3600: IFFALSE 3627
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
3602: LD_VAR 0 4
3606: PPUSH
3607: CALL_OW 313
3611: PPUSH
3612: LD_VAR 0 7
3616: PUSH
3617: LD_INT 1
3619: ARRAY
3620: PPUSH
3621: CALL_OW 120
// end ;
3625: GO 3599
3627: POP
3628: POP
// end ; end ; end ;
3629: LD_VAR 0 3
3633: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
3634: LD_INT 0
3636: PPUSH
3637: PPUSH
3638: PPUSH
3639: PPUSH
3640: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] , [ f_lives , 1000 ] ] ) ;
3641: LD_ADDR_VAR 0 6
3645: PUSH
3646: LD_INT 22
3648: PUSH
3649: LD_VAR 0 1
3653: PUSH
3654: EMPTY
3655: LIST
3656: LIST
3657: PUSH
3658: LD_INT 2
3660: PUSH
3661: LD_INT 25
3663: PUSH
3664: LD_INT 2
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 25
3673: PUSH
3674: LD_INT 16
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: PUSH
3681: EMPTY
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_INT 24
3688: PUSH
3689: LD_INT 1000
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: PPUSH
3701: CALL_OW 69
3705: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
3706: LD_ADDR_VAR 0 4
3710: PUSH
3711: LD_INT 22
3713: PUSH
3714: LD_VAR 0 1
3718: PUSH
3719: EMPTY
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 21
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: EMPTY
3730: LIST
3731: LIST
3732: PUSH
3733: LD_INT 3
3735: PUSH
3736: LD_INT 24
3738: PUSH
3739: LD_INT 1000
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: PUSH
3746: EMPTY
3747: LIST
3748: LIST
3749: PUSH
3750: EMPTY
3751: LIST
3752: LIST
3753: LIST
3754: PUSH
3755: EMPTY
3756: LIST
3757: PPUSH
3758: CALL_OW 69
3762: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
3763: LD_VAR 0 4
3767: PUSH
3768: LD_INT 0
3770: GREATER
3771: PUSH
3772: LD_VAR 0 6
3776: PUSH
3777: LD_INT 0
3779: GREATER
3780: AND
3781: IFFALSE 3847
// begin for i in engineerOk_list do
3783: LD_ADDR_VAR 0 5
3787: PUSH
3788: LD_VAR 0 6
3792: PUSH
3793: FOR_IN
3794: IFFALSE 3845
// begin for j in buildings_list do
3796: LD_ADDR_VAR 0 7
3800: PUSH
3801: LD_VAR 0 4
3805: PUSH
3806: FOR_IN
3807: IFFALSE 3841
// begin AddComExitBuilding ( i ) ;
3809: LD_VAR 0 5
3813: PPUSH
3814: CALL_OW 182
// wait ( 0 0$1 ) ;
3818: LD_INT 35
3820: PPUSH
3821: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
3825: LD_VAR 0 5
3829: PPUSH
3830: LD_VAR 0 7
3834: PPUSH
3835: CALL_OW 190
// end ;
3839: GO 3806
3841: POP
3842: POP
// end ;
3843: GO 3793
3845: POP
3846: POP
// end ; if buildings_list = 0 then
3847: LD_VAR 0 4
3851: PUSH
3852: LD_INT 0
3854: EQUAL
3855: IFFALSE 3888
// begin for i in engineerOK_list do
3857: LD_ADDR_VAR 0 5
3861: PUSH
3862: LD_VAR 0 6
3866: PUSH
3867: FOR_IN
3868: IFFALSE 3886
// begin ComEnterUnit ( i , building ) ;
3870: LD_VAR 0 5
3874: PPUSH
3875: LD_VAR 0 2
3879: PPUSH
3880: CALL_OW 120
// end ;
3884: GO 3867
3886: POP
3887: POP
// end ; end ;
3888: LD_VAR 0 3
3892: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
3893: LD_INT 0
3895: PPUSH
3896: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
3897: LD_INT 22
3899: PUSH
3900: LD_VAR 0 1
3904: PUSH
3905: EMPTY
3906: LIST
3907: LIST
3908: PUSH
3909: LD_INT 25
3911: PUSH
3912: LD_INT 2
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: EMPTY
3920: LIST
3921: LIST
3922: PPUSH
3923: CALL_OW 69
3927: PUSH
3928: LD_INT 0
3930: GREATER
3931: PUSH
3932: LD_INT 22
3934: PUSH
3935: LD_VAR 0 1
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: PUSH
3944: LD_INT 21
3946: PUSH
3947: LD_INT 3
3949: PUSH
3950: EMPTY
3951: LIST
3952: LIST
3953: PUSH
3954: LD_INT 3
3956: PUSH
3957: LD_INT 24
3959: PUSH
3960: LD_INT 1000
3962: PUSH
3963: EMPTY
3964: LIST
3965: LIST
3966: PUSH
3967: EMPTY
3968: LIST
3969: LIST
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: PPUSH
3976: CALL_OW 69
3980: PUSH
3981: LD_INT 0
3983: EQUAL
3984: AND
3985: PUSH
3986: LD_VAR 0 2
3990: PUSH
3991: LD_INT 0
3993: GREATER
3994: AND
3995: IFFALSE 4094
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
3997: LD_ADDR_VAR 0 4
4001: PUSH
4002: LD_INT 22
4004: PUSH
4005: LD_VAR 0 1
4009: PUSH
4010: EMPTY
4011: LIST
4012: LIST
4013: PUSH
4014: LD_INT 25
4016: PUSH
4017: LD_INT 2
4019: PUSH
4020: EMPTY
4021: LIST
4022: LIST
4023: PUSH
4024: EMPTY
4025: LIST
4026: LIST
4027: PPUSH
4028: CALL_OW 69
4032: PUSH
4033: FOR_IN
4034: IFFALSE 4092
// begin AddComExitBuilding ( i ) ;
4036: LD_VAR 0 4
4040: PPUSH
4041: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
4045: LD_VAR 0 4
4049: PPUSH
4050: LD_VAR 0 2
4054: PUSH
4055: LD_INT 1
4057: ARRAY
4058: PPUSH
4059: LD_VAR 0 2
4063: PUSH
4064: LD_INT 2
4066: ARRAY
4067: PPUSH
4068: LD_VAR 0 2
4072: PUSH
4073: LD_INT 3
4075: ARRAY
4076: PPUSH
4077: LD_VAR 0 2
4081: PUSH
4082: LD_INT 4
4084: ARRAY
4085: PPUSH
4086: CALL_OW 205
// end ;
4090: GO 4033
4092: POP
4093: POP
// end ; end ;
4094: LD_VAR 0 3
4098: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
4099: LD_INT 0
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
4105: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 250 ] ] ) ;
4106: LD_ADDR_VAR 0 6
4110: PUSH
4111: LD_INT 22
4113: PUSH
4114: LD_VAR 0 1
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: PUSH
4123: LD_INT 25
4125: PUSH
4126: LD_INT 4
4128: PUSH
4129: EMPTY
4130: LIST
4131: LIST
4132: PUSH
4133: LD_INT 24
4135: PUSH
4136: LD_INT 250
4138: PUSH
4139: EMPTY
4140: LIST
4141: LIST
4142: PUSH
4143: EMPTY
4144: LIST
4145: LIST
4146: LIST
4147: PPUSH
4148: CALL_OW 69
4152: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
4153: LD_ADDR_VAR 0 9
4157: PUSH
4158: LD_VAR 0 3
4162: PPUSH
4163: LD_INT 22
4165: PUSH
4166: LD_VAR 0 1
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PUSH
4175: LD_INT 21
4177: PUSH
4178: LD_INT 1
4180: PUSH
4181: EMPTY
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 3
4187: PUSH
4188: LD_INT 24
4190: PUSH
4191: LD_INT 750
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: PUSH
4198: EMPTY
4199: LIST
4200: LIST
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: PPUSH
4207: CALL_OW 70
4211: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
4212: LD_VAR 0 9
4216: PUSH
4217: LD_INT 0
4219: GREATER
4220: PUSH
4221: LD_VAR 0 6
4225: PUSH
4226: LD_INT 0
4228: GREATER
4229: AND
4230: IFFALSE 4357
// begin for i = 1 to damageUnits do
4232: LD_ADDR_VAR 0 7
4236: PUSH
4237: DOUBLE
4238: LD_INT 1
4240: DEC
4241: ST_TO_ADDR
4242: LD_VAR 0 9
4246: PUSH
4247: FOR_TO
4248: IFFALSE 4272
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
4250: LD_VAR 0 9
4254: PUSH
4255: LD_VAR 0 7
4259: ARRAY
4260: PPUSH
4261: LD_VAR 0 2
4265: PPUSH
4266: CALL_OW 113
4270: GO 4247
4272: POP
4273: POP
// for i in sci_list do
4274: LD_ADDR_VAR 0 7
4278: PUSH
4279: LD_VAR 0 6
4283: PUSH
4284: FOR_IN
4285: IFFALSE 4353
// begin ComExitBuilding ( i ) ;
4287: LD_VAR 0 7
4291: PPUSH
4292: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
4296: LD_ADDR_VAR 0 8
4300: PUSH
4301: LD_VAR 0 2
4305: PPUSH
4306: LD_INT 22
4308: PUSH
4309: LD_VAR 0 1
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: PPUSH
4318: CALL_OW 70
4322: PUSH
4323: FOR_IN
4324: IFFALSE 4349
// begin AddComHeal ( i , j ) ;
4326: LD_VAR 0 7
4330: PPUSH
4331: LD_VAR 0 8
4335: PPUSH
4336: CALL_OW 188
// wait ( 1 1$0 ) ;
4340: LD_INT 2100
4342: PPUSH
4343: CALL_OW 67
// end ;
4347: GO 4323
4349: POP
4350: POP
// end ;
4351: GO 4284
4353: POP
4354: POP
// end else
4355: GO 4371
// begin AddComEnterUnit ( sci_list , build ) ;
4357: LD_VAR 0 6
4361: PPUSH
4362: LD_VAR 0 4
4366: PPUSH
4367: CALL_OW 180
// end ; end ; end_of_file
4371: LD_VAR 0 5
4375: RET
// every 0 0$1 trigger activateRUAI = 1 do
4376: LD_EXP 17
4380: PUSH
4381: LD_INT 1
4383: EQUAL
4384: IFFALSE 4410
4386: GO 4388
4388: DISABLE
// begin enable ;
4389: ENABLE
// IntBazooka ( 3 , 1 ) ;
4390: LD_INT 3
4392: PPUSH
4393: LD_INT 1
4395: PPUSH
4396: CALL 2957 0 2
// IntBazooka ( 6 , 1 ) ;
4400: LD_INT 6
4402: PPUSH
4403: LD_INT 1
4405: PPUSH
4406: CALL 2957 0 2
// end ; end_of_file
4410: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
4411: LD_VAR 0 1
4415: PPUSH
4416: CALL_OW 255
4420: PUSH
4421: LD_INT 4
4423: EQUAL
4424: IFFALSE 4438
// SetBName ( building , epsilon ) ;
4426: LD_VAR 0 1
4430: PPUSH
4431: LD_STRING epsilon
4433: PPUSH
4434: CALL_OW 500
// end ;
4438: PPOPN 2
4440: END
