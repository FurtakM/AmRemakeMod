// export JMM , Gary , Cyrus , Bobby , Lisa ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Powell ; export Tsaritsyn ; export Dietrich ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// playerVehs = [ ] ;
   8: LD_ADDR_EXP 18
  12: PUSH
  13: EMPTY
  14: ST_TO_ADDR
// joinEpsilon = 0 ;
  15: LD_ADDR_EXP 19
  19: PUSH
  20: LD_INT 0
  22: ST_TO_ADDR
// ruBaseReady = 0 ;
  23: LD_ADDR_EXP 28
  27: PUSH
  28: LD_INT 0
  30: ST_TO_ADDR
// russianAI = 0 ;
  31: LD_ADDR_EXP 29
  35: PUSH
  36: LD_INT 0
  38: ST_TO_ADDR
// activateRUAI = 0 ;
  39: LD_ADDR_EXP 30
  43: PUSH
  44: LD_INT 0
  46: ST_TO_ADDR
// arabianEscape = 0 ;
  47: LD_ADDR_EXP 35
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  55: LD_ADDR_EXP 34
  59: PUSH
  60: LD_INT 0
  62: ST_TO_ADDR
// eventVar1 = 0 ;
  63: LD_ADDR_EXP 36
  67: PUSH
  68: LD_INT 0
  70: ST_TO_ADDR
// debugMode = 1 ;
  71: LD_ADDR_EXP 37
  75: PUSH
  76: LD_INT 1
  78: ST_TO_ADDR
// PrepareDifficulty ;
  79: CALL 5738 0 0
// PrepareVehicles ;
  83: CALL 647 0 0
// PrepareJMMTeam ;
  87: CALL 437 0 0
// PrepareCathyTeam ;
  91: CALL 1054 0 0
// PrepareArabianCommander ;
  95: CALL 2018 0 0
// PrepareArabian ;
  99: CALL 2070 0 0
// BuildArabianBase ;
 103: CALL 8326 0 0
// PrepareNature ;
 107: CALL 15621 0 0
// TameApemans ;
 111: CALL 13171 0 0
// SaveForQuickRestart ;
 115: CALL_OW 22
// end ;
 119: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 120: LD_EXP 37
 124: PUSH
 125: LD_INT 1
 127: EQUAL
 128: IFFALSE 434
 130: GO 132
 132: DISABLE
 133: LD_INT 0
 135: PPUSH
// begin enable ;
 136: ENABLE
// fogoff ( true ) ;
 137: LD_INT 1
 139: PPUSH
 140: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 144: LD_ADDR_VAR 0 1
 148: PUSH
 149: LD_INT 22
 151: PUSH
 152: LD_INT 1
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: PUSH
 159: LD_INT 21
 161: PUSH
 162: LD_INT 1
 164: PUSH
 165: EMPTY
 166: LIST
 167: LIST
 168: PUSH
 169: EMPTY
 170: LIST
 171: LIST
 172: PPUSH
 173: CALL_OW 69
 177: PUSH
 178: FOR_IN
 179: IFFALSE 195
// SetLives ( i , 1000 ) ;
 181: LD_VAR 0 1
 185: PPUSH
 186: LD_INT 1000
 188: PPUSH
 189: CALL_OW 234
 193: GO 178
 195: POP
 196: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 197: LD_ADDR_VAR 0 1
 201: PUSH
 202: LD_INT 22
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: PUSH
 212: LD_INT 2
 214: PUSH
 215: LD_INT 30
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 30
 227: PUSH
 228: LD_INT 1
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: PPUSH
 244: CALL_OW 69
 248: PUSH
 249: FOR_IN
 250: IFFALSE 274
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 252: LD_VAR 0 1
 256: PPUSH
 257: CALL_OW 274
 261: PPUSH
 262: LD_INT 1
 264: PPUSH
 265: LD_INT 9999
 267: PPUSH
 268: CALL_OW 277
 272: GO 249
 274: POP
 275: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 276: LD_ADDR_VAR 0 1
 280: PUSH
 281: LD_INT 22
 283: PUSH
 284: LD_INT 1
 286: PUSH
 287: EMPTY
 288: LIST
 289: LIST
 290: PUSH
 291: LD_INT 2
 293: PUSH
 294: LD_INT 30
 296: PUSH
 297: LD_INT 0
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: PUSH
 304: LD_INT 30
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: EMPTY
 315: LIST
 316: LIST
 317: LIST
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PPUSH
 323: CALL_OW 69
 327: PUSH
 328: FOR_IN
 329: IFFALSE 353
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 331: LD_VAR 0 1
 335: PPUSH
 336: CALL_OW 274
 340: PPUSH
 341: LD_INT 2
 343: PPUSH
 344: LD_INT 9999
 346: PPUSH
 347: CALL_OW 277
 351: GO 328
 353: POP
 354: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 355: LD_ADDR_VAR 0 1
 359: PUSH
 360: LD_INT 22
 362: PUSH
 363: LD_INT 1
 365: PUSH
 366: EMPTY
 367: LIST
 368: LIST
 369: PUSH
 370: LD_INT 2
 372: PUSH
 373: LD_INT 30
 375: PUSH
 376: LD_INT 0
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 30
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: EMPTY
 394: LIST
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: PPUSH
 402: CALL_OW 69
 406: PUSH
 407: FOR_IN
 408: IFFALSE 432
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 410: LD_VAR 0 1
 414: PPUSH
 415: CALL_OW 274
 419: PPUSH
 420: LD_INT 3
 422: PPUSH
 423: LD_INT 9999
 425: PPUSH
 426: CALL_OW 277
 430: GO 407
 432: POP
 433: POP
// end ; end_of_file
 434: PPOPN 1
 436: END
// export function PrepareJMMTeam ; begin
 437: LD_INT 0
 439: PPUSH
// uc_side = 1 ;
 440: LD_ADDR_OWVAR 20
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// uc_nation = 1 ;
 448: LD_ADDR_OWVAR 21
 452: PUSH
 453: LD_INT 1
 455: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , false ) ;
 456: LD_ADDR_EXP 1
 460: PUSH
 461: LD_STRING JMM
 463: PPUSH
 464: LD_INT 0
 466: PPUSH
 467: CALL 5525 0 2
 471: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , false ) ;
 472: LD_ADDR_EXP 2
 476: PUSH
 477: LD_STRING Gary
 479: PPUSH
 480: LD_INT 0
 482: PPUSH
 483: CALL 5525 0 2
 487: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , false ) ;
 488: LD_ADDR_EXP 3
 492: PUSH
 493: LD_STRING Cyrus
 495: PPUSH
 496: LD_INT 0
 498: PPUSH
 499: CALL 5525 0 2
 503: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , false ) ;
 504: LD_ADDR_EXP 4
 508: PUSH
 509: LD_STRING Bobby
 511: PPUSH
 512: LD_INT 0
 514: PPUSH
 515: CALL 5525 0 2
 519: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , false ) ;
 520: LD_ADDR_EXP 5
 524: PUSH
 525: LD_STRING Lisa
 527: PPUSH
 528: LD_INT 0
 530: PPUSH
 531: CALL 5525 0 2
 535: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
 536: LD_ADDR_EXP 15
 540: PUSH
 541: LD_STRING Powell
 543: PPUSH
 544: LD_INT 0
 546: PPUSH
 547: CALL 5525 0 2
 551: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , playerVehs [ 1 ] ) ;
 552: LD_EXP 1
 556: PPUSH
 557: LD_EXP 18
 561: PUSH
 562: LD_INT 1
 564: ARRAY
 565: PPUSH
 566: CALL_OW 52
// PlaceHumanInUnit ( Gary , playerVehs [ 2 ] ) ;
 570: LD_EXP 2
 574: PPUSH
 575: LD_EXP 18
 579: PUSH
 580: LD_INT 2
 582: ARRAY
 583: PPUSH
 584: CALL_OW 52
// PlaceHumanInUnit ( Cyrus , playerVehs [ 3 ] ) ;
 588: LD_EXP 3
 592: PPUSH
 593: LD_EXP 18
 597: PUSH
 598: LD_INT 3
 600: ARRAY
 601: PPUSH
 602: CALL_OW 52
// PlaceHumanInUnit ( Bobby , playerVehs [ 4 ] ) ;
 606: LD_EXP 4
 610: PPUSH
 611: LD_EXP 18
 615: PUSH
 616: LD_INT 4
 618: ARRAY
 619: PPUSH
 620: CALL_OW 52
// PlaceHumanInUnit ( Lisa , playerVehs [ 5 ] ) ;
 624: LD_EXP 5
 628: PPUSH
 629: LD_EXP 18
 633: PUSH
 634: LD_INT 5
 636: ARRAY
 637: PPUSH
 638: CALL_OW 52
// end ;
 642: LD_VAR 0 1
 646: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount , rest ; begin
 647: LD_INT 0
 649: PPUSH
 650: PPUSH
 651: PPUSH
 652: PPUSH
 653: PPUSH
 654: PPUSH
// uc_side = 1 ;
 655: LD_ADDR_OWVAR 20
 659: PUSH
 660: LD_INT 1
 662: ST_TO_ADDR
// uc_nation = 1 ;
 663: LD_ADDR_OWVAR 21
 667: PUSH
 668: LD_INT 1
 670: ST_TO_ADDR
// rest = 0 ;
 671: LD_ADDR_VAR 0 6
 675: PUSH
 676: LD_INT 0
 678: ST_TO_ADDR
// for i := 1 to 5 do
 679: LD_ADDR_VAR 0 2
 683: PUSH
 684: DOUBLE
 685: LD_INT 1
 687: DEC
 688: ST_TO_ADDR
 689: LD_INT 5
 691: PUSH
 692: FOR_TO
 693: IFFALSE 1047
// begin vc_engine = 1 ;
 695: LD_ADDR_OWVAR 39
 699: PUSH
 700: LD_INT 1
 702: ST_TO_ADDR
// vc_control = 1 ;
 703: LD_ADDR_OWVAR 38
 707: PUSH
 708: LD_INT 1
 710: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
 711: LD_ADDR_OWVAR 40
 715: PUSH
 716: LD_INT 3
 718: PUSH
 719: LD_INT 4
 721: PUSH
 722: LD_INT 5
 724: PUSH
 725: LD_INT 12
 727: PUSH
 728: EMPTY
 729: LIST
 730: LIST
 731: LIST
 732: LIST
 733: PUSH
 734: LD_INT 1
 736: PPUSH
 737: LD_INT 4
 739: PPUSH
 740: CALL_OW 12
 744: ARRAY
 745: ST_TO_ADDR
// vc_chassis = 3 ;
 746: LD_ADDR_OWVAR 37
 750: PUSH
 751: LD_INT 3
 753: ST_TO_ADDR
// veh = CreateVehicle ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: CALL_OW 45
 763: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
 764: LD_VAR 0 3
 768: PPUSH
 769: LD_INT 1
 771: PPUSH
 772: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
 776: LD_VAR 0 3
 780: PPUSH
 781: LD_INT 2
 783: PPUSH
 784: LD_INT 0
 786: PPUSH
 787: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
 791: LD_ADDR_EXP 18
 795: PUSH
 796: LD_EXP 18
 800: PUSH
 801: LD_VAR 0 3
 805: ADD
 806: ST_TO_ADDR
// if vc_weapon = 12 then
 807: LD_OWVAR 40
 811: PUSH
 812: LD_INT 12
 814: EQUAL
 815: IFFALSE 1045
// begin rnd = Rand ( 1 , 10 ) * 10 ;
 817: LD_ADDR_VAR 0 4
 821: PUSH
 822: LD_INT 1
 824: PPUSH
 825: LD_INT 10
 827: PPUSH
 828: CALL_OW 12
 832: PUSH
 833: LD_INT 10
 835: MUL
 836: ST_TO_ADDR
// rest = 100 - rest - rnd ;
 837: LD_ADDR_VAR 0 6
 841: PUSH
 842: LD_INT 100
 844: PUSH
 845: LD_VAR 0 6
 849: MINUS
 850: PUSH
 851: LD_VAR 0 4
 855: MINUS
 856: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
 857: LD_VAR 0 3
 861: PPUSH
 862: LD_INT 1
 864: PUSH
 865: LD_INT 3
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PUSH
 872: LD_INT 1
 874: PPUSH
 875: LD_INT 2
 877: PPUSH
 878: CALL_OW 12
 882: ARRAY
 883: PPUSH
 884: LD_VAR 0 4
 888: PPUSH
 889: CALL_OW 291
// cargoAmmount = rnd ;
 893: LD_ADDR_VAR 0 5
 897: PUSH
 898: LD_VAR 0 4
 902: ST_TO_ADDR
// if rnd = 100 then
 903: LD_VAR 0 4
 907: PUSH
 908: LD_INT 100
 910: EQUAL
 911: IFFALSE 917
// exit ;
 913: POP
 914: POP
 915: GO 1049
// repeat rest = 100 - rest - rnd ;
 917: LD_ADDR_VAR 0 6
 921: PUSH
 922: LD_INT 100
 924: PUSH
 925: LD_VAR 0 6
 929: MINUS
 930: PUSH
 931: LD_VAR 0 4
 935: MINUS
 936: ST_TO_ADDR
// rnd = Rand ( 1 , rest / 10 ) * 10 ;
 937: LD_ADDR_VAR 0 4
 941: PUSH
 942: LD_INT 1
 944: PPUSH
 945: LD_VAR 0 6
 949: PUSH
 950: LD_INT 10
 952: DIVREAL
 953: PPUSH
 954: CALL_OW 12
 958: PUSH
 959: LD_INT 10
 961: MUL
 962: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
 963: LD_VAR 0 3
 967: PPUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 3
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 1
 980: PPUSH
 981: LD_INT 2
 983: PPUSH
 984: CALL_OW 12
 988: ARRAY
 989: PPUSH
 990: LD_VAR 0 4
 994: PPUSH
 995: CALL_OW 291
// until rest = 0 ;
 999: LD_VAR 0 6
1003: PUSH
1004: LD_INT 0
1006: EQUAL
1007: IFFALSE 917
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1009: LD_VAR 0 3
1013: PPUSH
1014: LD_INT 1
1016: PUSH
1017: LD_INT 3
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PUSH
1024: LD_INT 1
1026: PPUSH
1027: LD_INT 2
1029: PPUSH
1030: CALL_OW 12
1034: ARRAY
1035: PPUSH
1036: LD_VAR 0 4
1040: PPUSH
1041: CALL_OW 291
// end ; end ;
1045: GO 692
1047: POP
1048: POP
// end ;
1049: LD_VAR 0 1
1053: RET
// export function PrepareCathyTeam ; begin
1054: LD_INT 0
1056: PPUSH
// uc_side = 4 ;
1057: LD_ADDR_OWVAR 20
1061: PUSH
1062: LD_INT 4
1064: ST_TO_ADDR
// uc_nation = 1 ;
1065: LD_ADDR_OWVAR 21
1069: PUSH
1070: LD_INT 1
1072: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1073: LD_ADDR_EXP 6
1077: PUSH
1078: LD_STRING Simms
1080: PPUSH
1081: LD_INT 0
1083: PPUSH
1084: CALL 5525 0 2
1088: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , false ) ;
1089: LD_ADDR_EXP 7
1093: PUSH
1094: LD_STRING Denis
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL 5525 0 2
1104: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , false ) ;
1105: LD_ADDR_EXP 8
1109: PUSH
1110: LD_STRING Joan
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL 5525 0 2
1120: ST_TO_ADDR
// Khatam = PrepareUnit ( Khatam , false ) ;
1121: LD_ADDR_EXP 9
1125: PUSH
1126: LD_STRING Khatam
1128: PPUSH
1129: LD_INT 0
1131: PPUSH
1132: CALL 5525 0 2
1136: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , false ) ;
1137: LD_ADDR_EXP 10
1141: PUSH
1142: LD_STRING Gladstone
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL 5525 0 2
1152: ST_TO_ADDR
// Gladstone = PrepareUnit ( DeltaDoctor , false ) ;
1153: LD_ADDR_EXP 10
1157: PUSH
1158: LD_STRING DeltaDoctor
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL 5525 0 2
1168: ST_TO_ADDR
// hc_class := 2 ;
1169: LD_ADDR_OWVAR 28
1173: PUSH
1174: LD_INT 2
1176: ST_TO_ADDR
// hc_sex := sex_male ;
1177: LD_ADDR_OWVAR 27
1181: PUSH
1182: LD_INT 1
1184: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1185: LD_ADDR_OWVAR 33
1189: PUSH
1190: LD_STRING SecondCharsGal
1192: ST_TO_ADDR
// hc_face_number := 60 ;
1193: LD_ADDR_OWVAR 34
1197: PUSH
1198: LD_INT 60
1200: ST_TO_ADDR
// hc_name := Steve Holland ;
1201: LD_ADDR_OWVAR 26
1205: PUSH
1206: LD_STRING Steve Holland
1208: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
1209: LD_ADDR_OWVAR 31
1213: PUSH
1214: LD_INT 1
1216: PUSH
1217: LD_INT 7
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 0
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: LIST
1230: LIST
1231: ST_TO_ADDR
// Steve = CreateHuman ;
1232: LD_ADDR_EXP 11
1236: PUSH
1237: CALL_OW 44
1241: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1242: LD_EXP 6
1246: PPUSH
1247: LD_INT 1
1249: PPUSH
1250: LD_INT 0
1252: PPUSH
1253: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1257: LD_EXP 7
1261: PPUSH
1262: LD_INT 1
1264: PPUSH
1265: LD_INT 0
1267: PPUSH
1268: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
1272: LD_EXP 8
1276: PPUSH
1277: LD_INT 1
1279: PPUSH
1280: LD_INT 0
1282: PPUSH
1283: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
1287: LD_EXP 9
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
1302: LD_EXP 10
1306: PPUSH
1307: LD_INT 1
1309: PPUSH
1310: LD_INT 0
1312: PPUSH
1313: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
1317: LD_EXP 12
1321: PPUSH
1322: LD_INT 1
1324: PPUSH
1325: LD_INT 0
1327: PPUSH
1328: CALL_OW 49
// PlaceUnitArea ( Steve , CathyTeamSpawn , false ) ;
1332: LD_EXP 11
1336: PPUSH
1337: LD_INT 1
1339: PPUSH
1340: LD_INT 0
1342: PPUSH
1343: CALL_OW 49
// SetClass ( [ Khatam , Denis ] , 4 ) ;
1347: LD_EXP 9
1351: PUSH
1352: LD_EXP 7
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PPUSH
1361: LD_INT 4
1363: PPUSH
1364: CALL_OW 336
// AddComBuild ( Steve , b_depot , 101 , 30 , 2 ) ;
1368: LD_EXP 11
1372: PPUSH
1373: LD_INT 0
1375: PPUSH
1376: LD_INT 101
1378: PPUSH
1379: LD_INT 30
1381: PPUSH
1382: LD_INT 2
1384: PPUSH
1385: CALL_OW 205
// uc_side = 1 ;
1389: LD_ADDR_OWVAR 20
1393: PUSH
1394: LD_INT 1
1396: ST_TO_ADDR
// hc_class := 1 ;
1397: LD_ADDR_OWVAR 28
1401: PUSH
1402: LD_INT 1
1404: ST_TO_ADDR
// hc_sex := sex_female ;
1405: LD_ADDR_OWVAR 27
1409: PUSH
1410: LD_INT 2
1412: ST_TO_ADDR
// hc_gallery :=  ;
1413: LD_ADDR_OWVAR 33
1417: PUSH
1418: LD_STRING 
1420: ST_TO_ADDR
// hc_name :=  ;
1421: LD_ADDR_OWVAR 26
1425: PUSH
1426: LD_STRING 
1428: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
1429: LD_ADDR_OWVAR 31
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 7
1439: PUSH
1440: LD_INT 1
1442: PUSH
1443: LD_INT 0
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: LIST
1450: LIST
1451: ST_TO_ADDR
// AmScout = CreateHuman ;
1452: LD_ADDR_EXP 13
1456: PUSH
1457: CALL_OW 44
1461: ST_TO_ADDR
// end ;
1462: LD_VAR 0 1
1466: RET
// export function PrepareCornell ; begin
1467: LD_INT 0
1469: PPUSH
// uc_side = 4 ;
1470: LD_ADDR_OWVAR 20
1474: PUSH
1475: LD_INT 4
1477: ST_TO_ADDR
// uc_nation = 1 ;
1478: LD_ADDR_OWVAR 21
1482: PUSH
1483: LD_INT 1
1485: ST_TO_ADDR
// Cornell = CreateCharacter ( 03_Cornel ) ;
1486: LD_ADDR_EXP 14
1490: PUSH
1491: LD_STRING 03_Cornel
1493: PPUSH
1494: CALL_OW 34
1498: ST_TO_ADDR
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
1499: LD_EXP 14
1503: PPUSH
1504: LD_INT 8
1506: PPUSH
1507: LD_INT 0
1509: PPUSH
1510: CALL_OW 49
// if IsInUnit ( JMM ) then
1514: LD_EXP 1
1518: PPUSH
1519: CALL_OW 310
1523: IFFALSE 1566
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
1525: LD_EXP 14
1529: PPUSH
1530: LD_EXP 1
1534: PPUSH
1535: CALL_OW 310
1539: PPUSH
1540: CALL_OW 250
1544: PPUSH
1545: LD_EXP 1
1549: PPUSH
1550: CALL_OW 310
1554: PPUSH
1555: CALL_OW 251
1559: PPUSH
1560: CALL_OW 111
1564: GO 1595
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
1566: LD_EXP 14
1570: PPUSH
1571: LD_EXP 1
1575: PPUSH
1576: CALL_OW 250
1580: PPUSH
1581: LD_EXP 1
1585: PPUSH
1586: CALL_OW 251
1590: PPUSH
1591: CALL_OW 111
// end ; end_of_file
1595: LD_VAR 0 1
1599: RET
// export function PrepareRussians ; var i , un ; begin
1600: LD_INT 0
1602: PPUSH
1603: PPUSH
1604: PPUSH
// for i = 1 to 14 do
1605: LD_ADDR_VAR 0 2
1609: PUSH
1610: DOUBLE
1611: LD_INT 1
1613: DEC
1614: ST_TO_ADDR
1615: LD_INT 14
1617: PUSH
1618: FOR_TO
1619: IFFALSE 1705
// begin uc_side = 3 ;
1621: LD_ADDR_OWVAR 20
1625: PUSH
1626: LD_INT 3
1628: ST_TO_ADDR
// uc_nation = 3 ;
1629: LD_ADDR_OWVAR 21
1633: PUSH
1634: LD_INT 3
1636: ST_TO_ADDR
// hc_gallery =  ;
1637: LD_ADDR_OWVAR 33
1641: PUSH
1642: LD_STRING 
1644: ST_TO_ADDR
// hc_name =  ;
1645: LD_ADDR_OWVAR 26
1649: PUSH
1650: LD_STRING 
1652: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1653: LD_INT 0
1655: PPUSH
1656: LD_INT 1
1658: PPUSH
1659: LD_EXP 26
1663: PPUSH
1664: LD_EXP 27
1668: PPUSH
1669: CALL_OW 12
1673: PPUSH
1674: CALL_OW 380
// un = CreateHuman ;
1678: LD_ADDR_VAR 0 3
1682: PUSH
1683: CALL_OW 44
1687: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1688: LD_VAR 0 3
1692: PPUSH
1693: LD_INT 3
1695: PPUSH
1696: LD_INT 0
1698: PPUSH
1699: CALL_OW 49
// end ;
1703: GO 1618
1705: POP
1706: POP
// for i = 1 to 6 do
1707: LD_ADDR_VAR 0 2
1711: PUSH
1712: DOUBLE
1713: LD_INT 1
1715: DEC
1716: ST_TO_ADDR
1717: LD_INT 6
1719: PUSH
1720: FOR_TO
1721: IFFALSE 1807
// begin uc_side = 3 ;
1723: LD_ADDR_OWVAR 20
1727: PUSH
1728: LD_INT 3
1730: ST_TO_ADDR
// uc_nation = 3 ;
1731: LD_ADDR_OWVAR 21
1735: PUSH
1736: LD_INT 3
1738: ST_TO_ADDR
// hc_gallery =  ;
1739: LD_ADDR_OWVAR 33
1743: PUSH
1744: LD_STRING 
1746: ST_TO_ADDR
// hc_name =  ;
1747: LD_ADDR_OWVAR 26
1751: PUSH
1752: LD_STRING 
1754: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1755: LD_INT 0
1757: PPUSH
1758: LD_INT 2
1760: PPUSH
1761: LD_EXP 26
1765: PPUSH
1766: LD_EXP 27
1770: PPUSH
1771: CALL_OW 12
1775: PPUSH
1776: CALL_OW 380
// un = CreateHuman ;
1780: LD_ADDR_VAR 0 3
1784: PUSH
1785: CALL_OW 44
1789: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1790: LD_VAR 0 3
1794: PPUSH
1795: LD_INT 3
1797: PPUSH
1798: LD_INT 0
1800: PPUSH
1801: CALL_OW 49
// end ;
1805: GO 1720
1807: POP
1808: POP
// for i = 1 to 6 do
1809: LD_ADDR_VAR 0 2
1813: PUSH
1814: DOUBLE
1815: LD_INT 1
1817: DEC
1818: ST_TO_ADDR
1819: LD_INT 6
1821: PUSH
1822: FOR_TO
1823: IFFALSE 1909
// begin uc_side = 3 ;
1825: LD_ADDR_OWVAR 20
1829: PUSH
1830: LD_INT 3
1832: ST_TO_ADDR
// uc_nation = 3 ;
1833: LD_ADDR_OWVAR 21
1837: PUSH
1838: LD_INT 3
1840: ST_TO_ADDR
// hc_gallery =  ;
1841: LD_ADDR_OWVAR 33
1845: PUSH
1846: LD_STRING 
1848: ST_TO_ADDR
// hc_name =  ;
1849: LD_ADDR_OWVAR 26
1853: PUSH
1854: LD_STRING 
1856: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1857: LD_INT 0
1859: PPUSH
1860: LD_INT 3
1862: PPUSH
1863: LD_EXP 26
1867: PPUSH
1868: LD_EXP 27
1872: PPUSH
1873: CALL_OW 12
1877: PPUSH
1878: CALL_OW 380
// un = CreateHuman ;
1882: LD_ADDR_VAR 0 3
1886: PUSH
1887: CALL_OW 44
1891: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1892: LD_VAR 0 3
1896: PPUSH
1897: LD_INT 3
1899: PPUSH
1900: LD_INT 0
1902: PPUSH
1903: CALL_OW 49
// end ;
1907: GO 1822
1909: POP
1910: POP
// for i = 1 to 4 do
1911: LD_ADDR_VAR 0 2
1915: PUSH
1916: DOUBLE
1917: LD_INT 1
1919: DEC
1920: ST_TO_ADDR
1921: LD_INT 4
1923: PUSH
1924: FOR_TO
1925: IFFALSE 2011
// begin uc_side = 3 ;
1927: LD_ADDR_OWVAR 20
1931: PUSH
1932: LD_INT 3
1934: ST_TO_ADDR
// uc_nation = 3 ;
1935: LD_ADDR_OWVAR 21
1939: PUSH
1940: LD_INT 3
1942: ST_TO_ADDR
// hc_gallery =  ;
1943: LD_ADDR_OWVAR 33
1947: PUSH
1948: LD_STRING 
1950: ST_TO_ADDR
// hc_name =  ;
1951: LD_ADDR_OWVAR 26
1955: PUSH
1956: LD_STRING 
1958: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
1959: LD_INT 0
1961: PPUSH
1962: LD_INT 4
1964: PPUSH
1965: LD_EXP 26
1969: PPUSH
1970: LD_EXP 27
1974: PPUSH
1975: CALL_OW 12
1979: PPUSH
1980: CALL_OW 380
// un = CreateHuman ;
1984: LD_ADDR_VAR 0 3
1988: PUSH
1989: CALL_OW 44
1993: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
1994: LD_VAR 0 3
1998: PPUSH
1999: LD_INT 3
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 49
// end ;
2009: GO 1924
2011: POP
2012: POP
// end ; end_of_file
2013: LD_VAR 0 1
2017: RET
// export function PrepareArabianCommander ; begin
2018: LD_INT 0
2020: PPUSH
// uc_side = 2 ;
2021: LD_ADDR_OWVAR 20
2025: PUSH
2026: LD_INT 2
2028: ST_TO_ADDR
// uc_nation = 2 ;
2029: LD_ADDR_OWVAR 21
2033: PUSH
2034: LD_INT 2
2036: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
2037: LD_ADDR_EXP 17
2041: PUSH
2042: LD_STRING Dietrich
2044: PPUSH
2045: CALL_OW 25
2049: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
2050: LD_EXP 17
2054: PPUSH
2055: LD_INT 4
2057: PPUSH
2058: LD_INT 0
2060: PPUSH
2061: CALL_OW 49
// end ;
2065: LD_VAR 0 1
2069: RET
// export function PrepareArabian ; var i , un , veh ; begin
2070: LD_INT 0
2072: PPUSH
2073: PPUSH
2074: PPUSH
2075: PPUSH
// for i = 1 to 3 do
2076: LD_ADDR_VAR 0 2
2080: PUSH
2081: DOUBLE
2082: LD_INT 1
2084: DEC
2085: ST_TO_ADDR
2086: LD_INT 3
2088: PUSH
2089: FOR_TO
2090: IFFALSE 2176
// begin uc_side = 2 ;
2092: LD_ADDR_OWVAR 20
2096: PUSH
2097: LD_INT 2
2099: ST_TO_ADDR
// uc_nation = 2 ;
2100: LD_ADDR_OWVAR 21
2104: PUSH
2105: LD_INT 2
2107: ST_TO_ADDR
// hc_gallery =  ;
2108: LD_ADDR_OWVAR 33
2112: PUSH
2113: LD_STRING 
2115: ST_TO_ADDR
// hc_name =  ;
2116: LD_ADDR_OWVAR 26
2120: PUSH
2121: LD_STRING 
2123: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2124: LD_INT 0
2126: PPUSH
2127: LD_INT 1
2129: PPUSH
2130: LD_EXP 26
2134: PPUSH
2135: LD_EXP 27
2139: PPUSH
2140: CALL_OW 12
2144: PPUSH
2145: CALL_OW 380
// un = CreateHuman ;
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: CALL_OW 44
2158: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2159: LD_VAR 0 3
2163: PPUSH
2164: LD_INT 4
2166: PPUSH
2167: LD_INT 0
2169: PPUSH
2170: CALL_OW 49
// end ;
2174: GO 2089
2176: POP
2177: POP
// for i = 1 to 6 do
2178: LD_ADDR_VAR 0 2
2182: PUSH
2183: DOUBLE
2184: LD_INT 1
2186: DEC
2187: ST_TO_ADDR
2188: LD_INT 6
2190: PUSH
2191: FOR_TO
2192: IFFALSE 2278
// begin uc_side = 2 ;
2194: LD_ADDR_OWVAR 20
2198: PUSH
2199: LD_INT 2
2201: ST_TO_ADDR
// uc_nation = 2 ;
2202: LD_ADDR_OWVAR 21
2206: PUSH
2207: LD_INT 2
2209: ST_TO_ADDR
// hc_gallery =  ;
2210: LD_ADDR_OWVAR 33
2214: PUSH
2215: LD_STRING 
2217: ST_TO_ADDR
// hc_name =  ;
2218: LD_ADDR_OWVAR 26
2222: PUSH
2223: LD_STRING 
2225: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2226: LD_INT 0
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_EXP 26
2236: PPUSH
2237: LD_EXP 27
2241: PPUSH
2242: CALL_OW 12
2246: PPUSH
2247: CALL_OW 380
// un = CreateHuman ;
2251: LD_ADDR_VAR 0 3
2255: PUSH
2256: CALL_OW 44
2260: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2261: LD_VAR 0 3
2265: PPUSH
2266: LD_INT 4
2268: PPUSH
2269: LD_INT 0
2271: PPUSH
2272: CALL_OW 49
// end ;
2276: GO 2191
2278: POP
2279: POP
// for i = 1 to 6 do
2280: LD_ADDR_VAR 0 2
2284: PUSH
2285: DOUBLE
2286: LD_INT 1
2288: DEC
2289: ST_TO_ADDR
2290: LD_INT 6
2292: PUSH
2293: FOR_TO
2294: IFFALSE 2380
// begin uc_side = 2 ;
2296: LD_ADDR_OWVAR 20
2300: PUSH
2301: LD_INT 2
2303: ST_TO_ADDR
// uc_nation = 2 ;
2304: LD_ADDR_OWVAR 21
2308: PUSH
2309: LD_INT 2
2311: ST_TO_ADDR
// hc_gallery =  ;
2312: LD_ADDR_OWVAR 33
2316: PUSH
2317: LD_STRING 
2319: ST_TO_ADDR
// hc_name =  ;
2320: LD_ADDR_OWVAR 26
2324: PUSH
2325: LD_STRING 
2327: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2328: LD_INT 0
2330: PPUSH
2331: LD_INT 1
2333: PPUSH
2334: LD_EXP 26
2338: PPUSH
2339: LD_EXP 27
2343: PPUSH
2344: CALL_OW 12
2348: PPUSH
2349: CALL_OW 380
// un = CreateHuman ;
2353: LD_ADDR_VAR 0 3
2357: PUSH
2358: CALL_OW 44
2362: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2363: LD_VAR 0 3
2367: PPUSH
2368: LD_INT 4
2370: PPUSH
2371: LD_INT 0
2373: PPUSH
2374: CALL_OW 49
// end ;
2378: GO 2293
2380: POP
2381: POP
// for i = 1 to 4 do
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: DOUBLE
2388: LD_INT 1
2390: DEC
2391: ST_TO_ADDR
2392: LD_INT 4
2394: PUSH
2395: FOR_TO
2396: IFFALSE 2482
// begin uc_side = 2 ;
2398: LD_ADDR_OWVAR 20
2402: PUSH
2403: LD_INT 2
2405: ST_TO_ADDR
// uc_nation = 2 ;
2406: LD_ADDR_OWVAR 21
2410: PUSH
2411: LD_INT 2
2413: ST_TO_ADDR
// hc_gallery =  ;
2414: LD_ADDR_OWVAR 33
2418: PUSH
2419: LD_STRING 
2421: ST_TO_ADDR
// hc_name =  ;
2422: LD_ADDR_OWVAR 26
2426: PUSH
2427: LD_STRING 
2429: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2430: LD_INT 0
2432: PPUSH
2433: LD_INT 4
2435: PPUSH
2436: LD_EXP 26
2440: PPUSH
2441: LD_EXP 27
2445: PPUSH
2446: CALL_OW 12
2450: PPUSH
2451: CALL_OW 380
// un = CreateHuman ;
2455: LD_ADDR_VAR 0 3
2459: PUSH
2460: CALL_OW 44
2464: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
2465: LD_VAR 0 3
2469: PPUSH
2470: LD_INT 4
2472: PPUSH
2473: LD_INT 0
2475: PPUSH
2476: CALL_OW 49
// end ;
2480: GO 2395
2482: POP
2483: POP
// for i = 1 to 2 do
2484: LD_ADDR_VAR 0 2
2488: PUSH
2489: DOUBLE
2490: LD_INT 1
2492: DEC
2493: ST_TO_ADDR
2494: LD_INT 2
2496: PUSH
2497: FOR_TO
2498: IFFALSE 2628
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
2500: LD_ADDR_VAR 0 4
2504: PUSH
2505: LD_INT 22
2507: PUSH
2508: LD_INT 2
2510: PUSH
2511: EMPTY
2512: LIST
2513: LIST
2514: PUSH
2515: LD_INT 21
2517: PUSH
2518: LD_INT 2
2520: PUSH
2521: EMPTY
2522: LIST
2523: LIST
2524: PUSH
2525: LD_INT 58
2527: PUSH
2528: EMPTY
2529: LIST
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: PPUSH
2536: CALL_OW 69
2540: ST_TO_ADDR
// uc_side = 2 ;
2541: LD_ADDR_OWVAR 20
2545: PUSH
2546: LD_INT 2
2548: ST_TO_ADDR
// uc_nation = 2 ;
2549: LD_ADDR_OWVAR 21
2553: PUSH
2554: LD_INT 2
2556: ST_TO_ADDR
// hc_gallery =  ;
2557: LD_ADDR_OWVAR 33
2561: PUSH
2562: LD_STRING 
2564: ST_TO_ADDR
// hc_name =  ;
2565: LD_ADDR_OWVAR 26
2569: PUSH
2570: LD_STRING 
2572: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2573: LD_INT 0
2575: PPUSH
2576: LD_INT 3
2578: PPUSH
2579: LD_EXP 26
2583: PPUSH
2584: LD_EXP 27
2588: PPUSH
2589: CALL_OW 12
2593: PPUSH
2594: CALL_OW 380
// un = CreateHuman ;
2598: LD_ADDR_VAR 0 3
2602: PUSH
2603: CALL_OW 44
2607: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
2608: LD_VAR 0 3
2612: PPUSH
2613: LD_VAR 0 4
2617: PUSH
2618: LD_INT 1
2620: ARRAY
2621: PPUSH
2622: CALL_OW 52
// end ;
2626: GO 2497
2628: POP
2629: POP
// end ; end_of_file
2630: LD_VAR 0 1
2634: RET
// every 1 do
2635: GO 2637
2637: DISABLE
// begin CenterNowOnUnits ( JMM ) ;
2638: LD_EXP 1
2642: PPUSH
2643: CALL_OW 87
// DialogueOn ;
2647: CALL_OW 6
// Say ( Gary , D2-Gary-1 ) ;
2651: LD_EXP 2
2655: PPUSH
2656: LD_STRING D2-Gary-1
2658: PPUSH
2659: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
2663: LD_EXP 1
2667: PPUSH
2668: LD_STRING D2-JMM-1
2670: PPUSH
2671: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
2675: LD_EXP 2
2679: PPUSH
2680: LD_STRING D2-Gary-2
2682: PPUSH
2683: CALL_OW 88
// DialogueOff ;
2687: CALL_OW 7
// ChangeMissionObjectives ( M1 ) ;
2691: LD_STRING M1
2693: PPUSH
2694: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
2698: LD_INT 38
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 100
2706: PPUSH
2707: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
2711: LD_INT 47
2713: PPUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_INT 50
2719: PPUSH
2720: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
2724: LD_INT 47
2726: PPUSH
2727: LD_INT 3
2729: PPUSH
2730: LD_INT 50
2732: PPUSH
2733: CALL_OW 291
// end ;
2737: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
2738: LD_EXP 1
2742: PPUSH
2743: LD_EXP 6
2747: PPUSH
2748: CALL_OW 296
2752: PUSH
2753: LD_INT 15
2755: LESS
2756: IFFALSE 3098
2758: GO 2760
2760: DISABLE
// begin InGameOn ;
2761: CALL_OW 8
// ComExitVehicle ( JMM ) ;
2765: LD_EXP 1
2769: PPUSH
2770: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
2774: LD_EXP 1
2778: PPUSH
2779: CALL_OW 87
// wait ( 0 0$1 ) ;
2783: LD_INT 35
2785: PPUSH
2786: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
2790: LD_INT 35
2792: PPUSH
2793: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2797: LD_EXP 6
2801: PUSH
2802: LD_EXP 8
2806: PUSH
2807: LD_EXP 7
2811: PUSH
2812: LD_EXP 9
2816: PUSH
2817: EMPTY
2818: LIST
2819: LIST
2820: LIST
2821: LIST
2822: PPUSH
2823: LD_EXP 1
2827: PPUSH
2828: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
2832: LD_EXP 1
2836: PPUSH
2837: LD_EXP 6
2841: PPUSH
2842: CALL_OW 296
2846: PUSH
2847: LD_INT 5
2849: LESS
2850: IFFALSE 2790
// ComTurnUnit ( JMM , Simms ) ;
2852: LD_EXP 1
2856: PPUSH
2857: LD_EXP 6
2861: PPUSH
2862: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
2866: LD_EXP 6
2870: PUSH
2871: LD_EXP 8
2875: PUSH
2876: LD_EXP 7
2880: PUSH
2881: LD_EXP 9
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: PPUSH
2892: LD_EXP 1
2896: PPUSH
2897: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
2901: LD_EXP 1
2905: PUSH
2906: LD_EXP 6
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
2919: LD_EXP 6
2923: PPUSH
2924: LD_STRING D2a-Sim-1
2926: PPUSH
2927: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
2931: LD_EXP 1
2935: PPUSH
2936: LD_STRING D2a-JMM-1
2938: PPUSH
2939: CALL_OW 88
// ComTurnUnit ( JMM , Joan ) ;
2943: LD_EXP 1
2947: PPUSH
2948: LD_EXP 8
2952: PPUSH
2953: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
2957: LD_EXP 8
2961: PPUSH
2962: LD_STRING D2b-Joan-1
2964: PPUSH
2965: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
2969: LD_EXP 1
2973: PPUSH
2974: LD_STRING D2b-JMM-1
2976: PPUSH
2977: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
2981: LD_EXP 8
2985: PPUSH
2986: LD_STRING D2b-Joan-2
2988: PPUSH
2989: CALL_OW 88
// ComTurnUnit ( JMM , Denis ) ;
2993: LD_EXP 1
2997: PPUSH
2998: LD_EXP 7
3002: PPUSH
3003: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
3007: LD_EXP 7
3011: PPUSH
3012: LD_STRING D2c-Den-1
3014: PPUSH
3015: CALL_OW 88
// ComTurnUnit ( JMM , Khatam ) ;
3019: LD_EXP 1
3023: PPUSH
3024: LD_EXP 9
3028: PPUSH
3029: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
3033: LD_EXP 1
3037: PPUSH
3038: LD_STRING D2c-JMM-1
3040: PPUSH
3041: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
3045: LD_EXP 9
3049: PPUSH
3050: LD_STRING D2c-Khat-1
3052: PPUSH
3053: CALL_OW 88
// InGameOff ;
3057: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
3061: LD_INT 22
3063: PUSH
3064: LD_INT 4
3066: PUSH
3067: EMPTY
3068: LIST
3069: LIST
3070: PPUSH
3071: CALL_OW 69
3075: PPUSH
3076: LD_INT 1
3078: PPUSH
3079: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
3083: LD_STRING M1a
3085: PPUSH
3086: CALL_OW 337
// joinEpsilon = 1 ;
3090: LD_ADDR_EXP 19
3094: PUSH
3095: LD_INT 1
3097: ST_TO_ADDR
// end ;
3098: END
// every 0 0$1 trigger eventVar1 = 1 do
3099: LD_EXP 36
3103: PUSH
3104: LD_INT 1
3106: EQUAL
3107: IFFALSE 3724
3109: GO 3111
3111: DISABLE
// begin DialogueOn ;
3112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-1 , D3-Sci1-1 ) ;
3116: LD_INT 22
3118: PUSH
3119: LD_INT 1
3121: PUSH
3122: EMPTY
3123: LIST
3124: LIST
3125: PUSH
3126: LD_INT 25
3128: PUSH
3129: LD_INT 4
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PUSH
3136: LD_INT 26
3138: PUSH
3139: LD_INT 1
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: PPUSH
3151: CALL_OW 69
3155: PPUSH
3156: LD_STRING D3-Sci1-1
3158: PPUSH
3159: LD_STRING D3-Sci1-1
3161: PPUSH
3162: CALL 5582 0 3
// Say ( Gary , D3-Gary-1 ) ;
3166: LD_EXP 2
3170: PPUSH
3171: LD_STRING D3-Gary-1
3173: PPUSH
3174: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-2 , D3-Sci1-2 ) ;
3178: LD_INT 22
3180: PUSH
3181: LD_INT 1
3183: PUSH
3184: EMPTY
3185: LIST
3186: LIST
3187: PUSH
3188: LD_INT 25
3190: PUSH
3191: LD_INT 4
3193: PUSH
3194: EMPTY
3195: LIST
3196: LIST
3197: PUSH
3198: LD_INT 26
3200: PUSH
3201: LD_INT 1
3203: PUSH
3204: EMPTY
3205: LIST
3206: LIST
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: PPUSH
3213: CALL_OW 69
3217: PPUSH
3218: LD_STRING D3-Sci1-2
3220: PPUSH
3221: LD_STRING D3-Sci1-2
3223: PPUSH
3224: CALL 5582 0 3
// Say ( JMM , D3-JMM-2 ) ;
3228: LD_EXP 1
3232: PPUSH
3233: LD_STRING D3-JMM-2
3235: PPUSH
3236: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-3 , D3-Sci1-3 ) ;
3240: LD_INT 22
3242: PUSH
3243: LD_INT 1
3245: PUSH
3246: EMPTY
3247: LIST
3248: LIST
3249: PUSH
3250: LD_INT 25
3252: PUSH
3253: LD_INT 4
3255: PUSH
3256: EMPTY
3257: LIST
3258: LIST
3259: PUSH
3260: LD_INT 26
3262: PUSH
3263: LD_INT 1
3265: PUSH
3266: EMPTY
3267: LIST
3268: LIST
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: PPUSH
3275: CALL_OW 69
3279: PPUSH
3280: LD_STRING D3-Sci1-3
3282: PPUSH
3283: LD_STRING D3-Sci1-3
3285: PPUSH
3286: CALL 5582 0 3
// Say ( JMM , D3-JMM-3 ) ;
3290: LD_EXP 1
3294: PPUSH
3295: LD_STRING D3-JMM-3
3297: PPUSH
3298: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D3-Sci1-4 , D3-Sci1-4 ) ;
3302: LD_INT 22
3304: PUSH
3305: LD_INT 1
3307: PUSH
3308: EMPTY
3309: LIST
3310: LIST
3311: PUSH
3312: LD_INT 25
3314: PUSH
3315: LD_INT 4
3317: PUSH
3318: EMPTY
3319: LIST
3320: LIST
3321: PUSH
3322: LD_INT 26
3324: PUSH
3325: LD_INT 1
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: PUSH
3332: EMPTY
3333: LIST
3334: LIST
3335: LIST
3336: PPUSH
3337: CALL_OW 69
3341: PPUSH
3342: LD_STRING D3-Sci1-4
3344: PPUSH
3345: LD_STRING D3-Sci1-4
3347: PPUSH
3348: CALL 5582 0 3
// DialogueOff ;
3352: CALL_OW 7
// SetTech ( 12 , 1 , state_enabled ) ;
3356: LD_INT 12
3358: PPUSH
3359: LD_INT 1
3361: PPUSH
3362: LD_INT 1
3364: PPUSH
3365: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
3369: LD_INT 32
3371: PPUSH
3372: LD_INT 1
3374: PPUSH
3375: LD_INT 1
3377: PPUSH
3378: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
3382: LD_INT 12
3384: PPUSH
3385: LD_INT 1
3387: PPUSH
3388: LD_INT 1
3390: PPUSH
3391: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
3395: LD_STRING M2
3397: PPUSH
3398: CALL_OW 337
// wait ( 5 5$0 ) ;
3402: LD_INT 10500
3404: PPUSH
3405: CALL_OW 67
// if IsOK ( Simms ) then
3409: LD_EXP 6
3413: PPUSH
3414: CALL_OW 302
3418: IFFALSE 3585
// begin DialogueOn ;
3420: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
3424: LD_EXP 6
3428: PPUSH
3429: LD_STRING D3a-Sim-1
3431: PPUSH
3432: CALL_OW 88
// Say ( Denis , D3a-Sci1-1 ) ;
3436: LD_EXP 7
3440: PPUSH
3441: LD_STRING D3a-Sci1-1
3443: PPUSH
3444: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
3448: LD_EXP 6
3452: PPUSH
3453: LD_STRING D3a-Sim-2
3455: PPUSH
3456: CALL_OW 88
// Say ( Denis , D3a-Sci1-2 ) ;
3460: LD_EXP 7
3464: PPUSH
3465: LD_STRING D3a-Sci1-2
3467: PPUSH
3468: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
3472: LD_EXP 6
3476: PPUSH
3477: LD_STRING D3a-Sim-3
3479: PPUSH
3480: CALL_OW 88
// Say ( Denis , D3a-Sci1-3 ) ;
3484: LD_EXP 7
3488: PPUSH
3489: LD_STRING D3a-Sci1-3
3491: PPUSH
3492: CALL_OW 88
// if IsOK ( Joan ) then
3496: LD_EXP 8
3500: PPUSH
3501: CALL_OW 302
3505: IFFALSE 3521
// Say ( Simms , D3a-Sim-4 ) else
3507: LD_EXP 6
3511: PPUSH
3512: LD_STRING D3a-Sim-4
3514: PPUSH
3515: CALL_OW 88
3519: GO 3533
// Say ( Simms , D3a-Sim-4a ) ;
3521: LD_EXP 6
3525: PPUSH
3526: LD_STRING D3a-Sim-4a
3528: PPUSH
3529: CALL_OW 88
// Say ( Denis , D3a-Sci1-4 ) ;
3533: LD_EXP 7
3537: PPUSH
3538: LD_STRING D3a-Sci1-4
3540: PPUSH
3541: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
3545: LD_EXP 6
3549: PPUSH
3550: LD_STRING D3a-Sim-5
3552: PPUSH
3553: CALL_OW 88
// Say ( Denis , D3a-Sci1-5 ) ;
3557: LD_EXP 7
3561: PPUSH
3562: LD_STRING D3a-Sci1-5
3564: PPUSH
3565: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
3569: LD_EXP 6
3573: PPUSH
3574: LD_STRING D3a-Sim-6
3576: PPUSH
3577: CALL_OW 88
// DialogueOff ;
3581: CALL_OW 7
// end ; wait ( 3 3$0 ) ;
3585: LD_INT 6300
3587: PPUSH
3588: CALL_OW 67
// DialogueOn ;
3592: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-1 , D5-Ar1-1 ) ;
3596: LD_INT 22
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: EMPTY
3603: LIST
3604: LIST
3605: PUSH
3606: LD_INT 25
3608: PUSH
3609: LD_INT 4
3611: PUSH
3612: EMPTY
3613: LIST
3614: LIST
3615: PUSH
3616: LD_INT 26
3618: PUSH
3619: LD_INT 1
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: PUSH
3626: EMPTY
3627: LIST
3628: LIST
3629: LIST
3630: PPUSH
3631: CALL_OW 69
3635: PPUSH
3636: LD_STRING D5-Ar1-1
3638: PPUSH
3639: LD_STRING D5-Ar1-1
3641: PPUSH
3642: CALL 5582 0 3
// Say ( Dietrich , D5-Diet-1 ) ;
3646: LD_EXP 17
3650: PPUSH
3651: LD_STRING D5-Diet-1
3653: PPUSH
3654: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) , D5-Ar1-2 , D5-Ar1-2 ) ;
3658: LD_INT 22
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 25
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 26
3680: PUSH
3681: LD_INT 1
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: PUSH
3688: EMPTY
3689: LIST
3690: LIST
3691: LIST
3692: PPUSH
3693: CALL_OW 69
3697: PPUSH
3698: LD_STRING D5-Ar1-2
3700: PPUSH
3701: LD_STRING D5-Ar1-2
3703: PPUSH
3704: CALL 5582 0 3
// Say ( Dietrich , D5-Diet-2 ) ;
3708: LD_EXP 17
3712: PPUSH
3713: LD_STRING D5-Diet-2
3715: PPUSH
3716: CALL_OW 88
// DialogueOff ;
3720: CALL_OW 7
// end ;
3724: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
3725: LD_EXP 19
3729: PUSH
3730: LD_INT 1
3732: EQUAL
3733: IFFALSE 4053
3735: GO 3737
3737: DISABLE
3738: LD_INT 0
3740: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
3741: LD_EXP 13
3745: PPUSH
3746: LD_STRING D4-FSol1-1
3748: PPUSH
3749: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
3753: LD_STRING M3
3755: PPUSH
3756: CALL_OW 337
// PrepareRussians ;
3760: CALL 1600 0 0
// rnd = Rand ( 1 , 100 ) ;
3764: LD_ADDR_VAR 0 1
3768: PUSH
3769: LD_INT 1
3771: PPUSH
3772: LD_INT 100
3774: PPUSH
3775: CALL_OW 12
3779: ST_TO_ADDR
// if difficulty = 1 then
3780: LD_OWVAR 67
3784: PUSH
3785: LD_INT 1
3787: EQUAL
3788: IFFALSE 3871
// begin if rnd > 0 and rnd < 51 then
3790: LD_VAR 0 1
3794: PUSH
3795: LD_INT 0
3797: GREATER
3798: PUSH
3799: LD_VAR 0 1
3803: PUSH
3804: LD_INT 51
3806: LESS
3807: AND
3808: IFFALSE 3817
// BuildRussianBase ( 2 ) ;
3810: LD_INT 2
3812: PPUSH
3813: CALL 6058 0 1
// if rnd > 50 and rnd < 81 then
3817: LD_VAR 0 1
3821: PUSH
3822: LD_INT 50
3824: GREATER
3825: PUSH
3826: LD_VAR 0 1
3830: PUSH
3831: LD_INT 81
3833: LESS
3834: AND
3835: IFFALSE 3844
// BuildRussianBase ( 1 ) ;
3837: LD_INT 1
3839: PPUSH
3840: CALL 6058 0 1
// if rnd > 80 and rnd < 101 then
3844: LD_VAR 0 1
3848: PUSH
3849: LD_INT 80
3851: GREATER
3852: PUSH
3853: LD_VAR 0 1
3857: PUSH
3858: LD_INT 101
3860: LESS
3861: AND
3862: IFFALSE 3871
// BuildRussianBase ( 3 ) ;
3864: LD_INT 3
3866: PPUSH
3867: CALL 6058 0 1
// end ; if difficulty = 2 then
3871: LD_OWVAR 67
3875: PUSH
3876: LD_INT 2
3878: EQUAL
3879: IFFALSE 3962
// begin if rnd > 0 and rnd < 61 then
3881: LD_VAR 0 1
3885: PUSH
3886: LD_INT 0
3888: GREATER
3889: PUSH
3890: LD_VAR 0 1
3894: PUSH
3895: LD_INT 61
3897: LESS
3898: AND
3899: IFFALSE 3908
// BuildRussianBase ( 2 ) ;
3901: LD_INT 2
3903: PPUSH
3904: CALL 6058 0 1
// if rnd > 60 and rnd < 81 then
3908: LD_VAR 0 1
3912: PUSH
3913: LD_INT 60
3915: GREATER
3916: PUSH
3917: LD_VAR 0 1
3921: PUSH
3922: LD_INT 81
3924: LESS
3925: AND
3926: IFFALSE 3935
// BuildRussianBase ( 1 ) ;
3928: LD_INT 1
3930: PPUSH
3931: CALL 6058 0 1
// if rnd > 80 and rnd < 101 then
3935: LD_VAR 0 1
3939: PUSH
3940: LD_INT 80
3942: GREATER
3943: PUSH
3944: LD_VAR 0 1
3948: PUSH
3949: LD_INT 101
3951: LESS
3952: AND
3953: IFFALSE 3962
// BuildRussianBase ( 3 ) ;
3955: LD_INT 3
3957: PPUSH
3958: CALL 6058 0 1
// end ; if difficulty = 3 then
3962: LD_OWVAR 67
3966: PUSH
3967: LD_INT 3
3969: EQUAL
3970: IFFALSE 4053
// begin if rnd > 0 and rnd < 71 then
3972: LD_VAR 0 1
3976: PUSH
3977: LD_INT 0
3979: GREATER
3980: PUSH
3981: LD_VAR 0 1
3985: PUSH
3986: LD_INT 71
3988: LESS
3989: AND
3990: IFFALSE 3999
// BuildRussianBase ( 3 ) ;
3992: LD_INT 3
3994: PPUSH
3995: CALL 6058 0 1
// if rnd > 70 and rnd < 81 then
3999: LD_VAR 0 1
4003: PUSH
4004: LD_INT 70
4006: GREATER
4007: PUSH
4008: LD_VAR 0 1
4012: PUSH
4013: LD_INT 81
4015: LESS
4016: AND
4017: IFFALSE 4026
// BuildRussianBase ( 2 ) ;
4019: LD_INT 2
4021: PPUSH
4022: CALL 6058 0 1
// if rnd > 80 and rnd < 101 then
4026: LD_VAR 0 1
4030: PUSH
4031: LD_INT 80
4033: GREATER
4034: PUSH
4035: LD_VAR 0 1
4039: PUSH
4040: LD_INT 101
4042: LESS
4043: AND
4044: IFFALSE 4053
// BuildRussianBase ( 1 ) ;
4046: LD_INT 1
4048: PPUSH
4049: CALL 6058 0 1
// end ; end ;
4053: PPOPN 1
4055: END
// every 0 0$30 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i ;
4056: LD_INT 54
4058: PPUSH
4059: LD_INT 1
4061: PPUSH
4062: CALL_OW 321
4066: PUSH
4067: LD_INT 2
4069: EQUAL
4070: PUSH
4071: LD_INT 21
4073: PPUSH
4074: LD_INT 1
4076: PPUSH
4077: CALL_OW 321
4081: PUSH
4082: LD_INT 2
4084: EQUAL
4085: OR
4086: PUSH
4087: LD_INT 22
4089: PPUSH
4090: LD_INT 1
4092: PPUSH
4093: CALL_OW 321
4097: PUSH
4098: LD_INT 2
4100: EQUAL
4101: OR
4102: IFFALSE 4728
4104: GO 4106
4106: DISABLE
4107: LD_INT 0
4109: PPUSH
// begin DialogueOn ;
4110: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
4114: LD_EXP 1
4118: PPUSH
4119: LD_STRING D6-JMM-1
4121: PPUSH
4122: CALL_OW 88
// Say ( Denis , D6-Sci1-1 ) ;
4126: LD_EXP 7
4130: PPUSH
4131: LD_STRING D6-Sci1-1
4133: PPUSH
4134: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
4138: LD_EXP 1
4142: PPUSH
4143: LD_STRING D6-JMM-2
4145: PPUSH
4146: CALL_OW 88
// Say ( Denis , D6-Sci1-2 ) ;
4150: LD_EXP 7
4154: PPUSH
4155: LD_STRING D6-Sci1-2
4157: PPUSH
4158: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
4162: LD_EXP 1
4166: PPUSH
4167: LD_STRING D6-JMM-3
4169: PPUSH
4170: CALL_OW 88
// Say ( Denis , D6-Sci1-3 ) ;
4174: LD_EXP 7
4178: PPUSH
4179: LD_STRING D6-Sci1-3
4181: PPUSH
4182: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
4186: LD_EXP 1
4190: PPUSH
4191: LD_STRING D6-JMM-4
4193: PPUSH
4194: CALL_OW 88
// DialogueOff ;
4198: CALL_OW 7
// wait ( [ 8 8$0 , 8 8$30 , 9 9$0 , 9 9$30 , 10 10$0 , 10 10$30 ] [ Rand ( 1 , 6 ) ] ) ;
4202: LD_INT 16800
4204: PUSH
4205: LD_INT 17850
4207: PUSH
4208: LD_INT 18900
4210: PUSH
4211: LD_INT 19950
4213: PUSH
4214: LD_INT 21000
4216: PUSH
4217: LD_INT 22050
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: LIST
4224: LIST
4225: LIST
4226: LIST
4227: PUSH
4228: LD_INT 1
4230: PPUSH
4231: LD_INT 6
4233: PPUSH
4234: CALL_OW 12
4238: ARRAY
4239: PPUSH
4240: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
4244: LD_ADDR_VAR 0 1
4248: PUSH
4249: LD_INT 22
4251: PUSH
4252: LD_INT 2
4254: PUSH
4255: EMPTY
4256: LIST
4257: LIST
4258: PUSH
4259: LD_INT 25
4261: PUSH
4262: LD_INT 4
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: PUSH
4269: EMPTY
4270: LIST
4271: LIST
4272: PPUSH
4273: CALL_OW 69
4277: PUSH
4278: FOR_IN
4279: IFFALSE 4292
// ComExitBuilding ( i ) ;
4281: LD_VAR 0 1
4285: PPUSH
4286: CALL_OW 122
4290: GO 4278
4292: POP
4293: POP
// wait ( 0 0$1 ) ;
4294: LD_INT 35
4296: PPUSH
4297: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
4301: LD_INT 76
4303: PPUSH
4304: LD_INT 19
4306: PPUSH
4307: CALL_OW 84
// DialogueOn ;
4311: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] diff [ JMM ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
4315: LD_INT 22
4317: PUSH
4318: LD_INT 1
4320: PUSH
4321: EMPTY
4322: LIST
4323: LIST
4324: PUSH
4325: LD_INT 26
4327: PUSH
4328: LD_INT 1
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: LD_EXP 1
4343: PUSH
4344: EMPTY
4345: LIST
4346: DIFF
4347: PPUSH
4348: CALL_OW 69
4352: PPUSH
4353: LD_STRING D8-Sol1-1
4355: PPUSH
4356: LD_STRING D8-Sol1-1
4358: PPUSH
4359: CALL 5582 0 3
// Say ( DeltaDoctor , D8-Sci1-1 ) ;
4363: LD_EXP 12
4367: PPUSH
4368: LD_STRING D8-Sci1-1
4370: PPUSH
4371: CALL_OW 88
// Say ( JMM , D8-JMM-1 ) ;
4375: LD_EXP 1
4379: PPUSH
4380: LD_STRING D8-JMM-1
4382: PPUSH
4383: CALL_OW 88
// DialogueOff ;
4387: CALL_OW 7
// ArabianTrait ;
4391: CALL 4731 0 0
// wait ( 0 0$30 ) ;
4395: LD_INT 1050
4397: PPUSH
4398: CALL_OW 67
// Say ( Gary , D8a-Gary-1 ) ;
4402: LD_EXP 2
4406: PPUSH
4407: LD_STRING D8a-Gary-1
4409: PPUSH
4410: CALL_OW 88
// wait ( 0 0$5 ) ;
4414: LD_INT 175
4416: PPUSH
4417: CALL_OW 67
// if IsOK ( Khatam ) then
4421: LD_EXP 9
4425: PPUSH
4426: CALL_OW 302
4430: IFFALSE 4728
// begin SetSide ( Khatam , 8 ) ;
4432: LD_EXP 9
4436: PPUSH
4437: LD_INT 8
4439: PPUSH
4440: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
4444: LD_EXP 9
4448: PPUSH
4449: CALL_OW 122
// wait ( 0 0$1 ) ;
4453: LD_INT 35
4455: PPUSH
4456: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
4460: LD_EXP 9
4464: PPUSH
4465: CALL_OW 121
// wait ( 0 0$1 ) ;
4469: LD_INT 35
4471: PPUSH
4472: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
4476: LD_EXP 9
4480: PPUSH
4481: LD_INT 7
4483: PPUSH
4484: CALL_OW 113
// DialogueOn ;
4488: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-1 , D8b-FSol1-1 ) ;
4492: LD_INT 22
4494: PUSH
4495: LD_INT 1
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PUSH
4502: EMPTY
4503: LIST
4504: PUSH
4505: LD_EXP 1
4509: PUSH
4510: LD_EXP 9
4514: PUSH
4515: LD_EXP 8
4519: PUSH
4520: EMPTY
4521: LIST
4522: LIST
4523: LIST
4524: DIFF
4525: PPUSH
4526: CALL_OW 69
4530: PPUSH
4531: LD_STRING D8b-Sol1-1
4533: PPUSH
4534: LD_STRING D8b-FSol1-1
4536: PPUSH
4537: CALL 5582 0 3
// Say ( Khatam , D8b-Khat-1 ) ;
4541: LD_EXP 9
4545: PPUSH
4546: LD_STRING D8b-Khat-1
4548: PPUSH
4549: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-2 , D8b-FSol1-2 ) ;
4553: LD_INT 22
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: PUSH
4566: LD_EXP 1
4570: PUSH
4571: LD_EXP 9
4575: PUSH
4576: LD_EXP 8
4580: PUSH
4581: EMPTY
4582: LIST
4583: LIST
4584: LIST
4585: DIFF
4586: PPUSH
4587: CALL_OW 69
4591: PPUSH
4592: LD_STRING D8b-Sol1-2
4594: PPUSH
4595: LD_STRING D8b-FSol1-2
4597: PPUSH
4598: CALL 5582 0 3
// Say ( Khatam , D8b-Khat-2 ) ;
4602: LD_EXP 9
4606: PPUSH
4607: LD_STRING D8b-Khat-2
4609: PPUSH
4610: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-3 , D8b-FSol1-3 ) ;
4614: LD_INT 22
4616: PUSH
4617: LD_INT 1
4619: PUSH
4620: EMPTY
4621: LIST
4622: LIST
4623: PUSH
4624: EMPTY
4625: LIST
4626: PUSH
4627: LD_EXP 1
4631: PUSH
4632: LD_EXP 9
4636: PUSH
4637: LD_EXP 8
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: DIFF
4647: PPUSH
4648: CALL_OW 69
4652: PPUSH
4653: LD_STRING D8b-Sol1-3
4655: PPUSH
4656: LD_STRING D8b-FSol1-3
4658: PPUSH
4659: CALL 5582 0 3
// Say ( Khatam , D8b-Khat-4 ) ;
4663: LD_EXP 9
4667: PPUSH
4668: LD_STRING D8b-Khat-4
4670: PPUSH
4671: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] ] diff [ JMM , Khatam , Joan ] ) , D8b-Sol1-4 , D8b-FSol1-4 ) ;
4675: LD_INT 22
4677: PUSH
4678: LD_INT 1
4680: PUSH
4681: EMPTY
4682: LIST
4683: LIST
4684: PUSH
4685: EMPTY
4686: LIST
4687: PUSH
4688: LD_EXP 1
4692: PUSH
4693: LD_EXP 9
4697: PUSH
4698: LD_EXP 8
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: DIFF
4708: PPUSH
4709: CALL_OW 69
4713: PPUSH
4714: LD_STRING D8b-Sol1-4
4716: PPUSH
4717: LD_STRING D8b-FSol1-4
4719: PPUSH
4720: CALL 5582 0 3
// DialogueOff ;
4724: CALL_OW 7
// end ; end ;
4728: PPOPN 1
4730: END
// export function ArabianTrait ; var i ; begin
4731: LD_INT 0
4733: PPUSH
4734: PPUSH
// ChangeSideFog ( 2 , 2 ) ;
4735: LD_INT 2
4737: PPUSH
4738: LD_INT 2
4740: PPUSH
4741: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
4745: LD_INT 1
4747: PPUSH
4748: LD_INT 2
4750: PPUSH
4751: LD_INT 2
4753: PPUSH
4754: LD_INT 1
4756: PPUSH
4757: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
4761: LD_INT 3
4763: PPUSH
4764: LD_INT 2
4766: PPUSH
4767: LD_INT 1
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 80
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) do
4777: LD_ADDR_VAR 0 2
4781: PUSH
4782: LD_INT 22
4784: PUSH
4785: LD_INT 2
4787: PUSH
4788: EMPTY
4789: LIST
4790: LIST
4791: PUSH
4792: LD_INT 21
4794: PUSH
4795: LD_INT 1
4797: PUSH
4798: EMPTY
4799: LIST
4800: LIST
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PPUSH
4806: CALL_OW 69
4810: PUSH
4811: FOR_IN
4812: IFFALSE 4952
// begin ComExitBuilding ( i ) ;
4814: LD_VAR 0 2
4818: PPUSH
4819: CALL_OW 122
// wait ( 0 0$1 ) ;
4823: LD_INT 35
4825: PPUSH
4826: CALL_OW 67
// AddComAgressiveMove ( i , 77 , 10 ) ;
4830: LD_VAR 0 2
4834: PPUSH
4835: LD_INT 77
4837: PPUSH
4838: LD_INT 10
4840: PPUSH
4841: CALL_OW 174
// AddComAgressiveMove ( i , 82 , 5 ) ;
4845: LD_VAR 0 2
4849: PPUSH
4850: LD_INT 82
4852: PPUSH
4853: LD_INT 5
4855: PPUSH
4856: CALL_OW 174
// AddComAgressiveMove ( i , 95 , 12 ) ;
4860: LD_VAR 0 2
4864: PPUSH
4865: LD_INT 95
4867: PPUSH
4868: LD_INT 12
4870: PPUSH
4871: CALL_OW 174
// AddComAgressiveMove ( i , 102 , 11 ) ;
4875: LD_VAR 0 2
4879: PPUSH
4880: LD_INT 102
4882: PPUSH
4883: LD_INT 11
4885: PPUSH
4886: CALL_OW 174
// AddComAgressiveMove ( i , 116 , 15 ) ;
4890: LD_VAR 0 2
4894: PPUSH
4895: LD_INT 116
4897: PPUSH
4898: LD_INT 15
4900: PPUSH
4901: CALL_OW 174
// AddComAgressiveMove ( i , 140 , 25 ) ;
4905: LD_VAR 0 2
4909: PPUSH
4910: LD_INT 140
4912: PPUSH
4913: LD_INT 25
4915: PPUSH
4916: CALL_OW 174
// AddComAgressiveMove ( i , 160 , 56 ) ;
4920: LD_VAR 0 2
4924: PPUSH
4925: LD_INT 160
4927: PPUSH
4928: LD_INT 56
4930: PPUSH
4931: CALL_OW 174
// AddComAgressiveMove ( i , 189 , 79 ) ;
4935: LD_VAR 0 2
4939: PPUSH
4940: LD_INT 189
4942: PPUSH
4943: LD_INT 79
4945: PPUSH
4946: CALL_OW 174
// end ;
4950: GO 4811
4952: POP
4953: POP
// arabianAttackersAI = 1 ;
4954: LD_ADDR_EXP 34
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// end ;
4962: LD_VAR 0 1
4966: RET
// every 0 0$1 do var i ;
4967: GO 4969
4969: DISABLE
4970: LD_INT 0
4972: PPUSH
// begin enable ;
4973: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
4974: LD_ADDR_VAR 0 1
4978: PUSH
4979: LD_INT 7
4981: PPUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 2
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 70
4996: PUSH
4997: FOR_IN
4998: IFFALSE 5019
// begin RemoveUnit ( i ) ;
5000: LD_VAR 0 1
5004: PPUSH
5005: CALL_OW 64
// arabianEscape = 1 ;
5009: LD_ADDR_EXP 35
5013: PUSH
5014: LD_INT 1
5016: ST_TO_ADDR
// end ;
5017: GO 4997
5019: POP
5020: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
5021: LD_EXP 9
5025: PPUSH
5026: LD_INT 7
5028: PPUSH
5029: CALL_OW 308
5033: IFFALSE 5044
// RemoveUnit ( Khatam ) ;
5035: LD_EXP 9
5039: PPUSH
5040: CALL_OW 64
// end ;
5044: PPOPN 1
5046: END
// every 6 6$30 trigger joinEpsilon = 1 do
5047: LD_EXP 19
5051: PUSH
5052: LD_INT 1
5054: EQUAL
5055: IFFALSE 5064
5057: GO 5059
5059: DISABLE
// PrepareCornell ;
5060: CALL 1467 0 0
5064: END
// every 0 0$1 trigger See ( 1 , Cornell ) do
5065: LD_INT 1
5067: PPUSH
5068: LD_EXP 14
5072: PPUSH
5073: CALL_OW 292
5077: IFFALSE 5302
5079: GO 5081
5081: DISABLE
// begin InGameOn ;
5082: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
5086: LD_EXP 14
5090: PPUSH
5091: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
5095: LD_EXP 14
5099: PPUSH
5100: LD_STRING D7-Corn-1
5102: PPUSH
5103: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] diff [ JMM , Joan ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
5107: LD_INT 22
5109: PUSH
5110: LD_INT 1
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 2
5119: PUSH
5120: LD_INT 25
5122: PUSH
5123: LD_INT 1
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: PUSH
5130: LD_INT 25
5132: PUSH
5133: LD_INT 2
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: PUSH
5140: LD_INT 25
5142: PUSH
5143: LD_INT 3
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: PUSH
5150: LD_INT 25
5152: PUSH
5153: LD_INT 4
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PUSH
5171: LD_EXP 1
5175: PUSH
5176: LD_EXP 8
5180: PUSH
5181: EMPTY
5182: LIST
5183: LIST
5184: DIFF
5185: PPUSH
5186: CALL_OW 69
5190: PPUSH
5191: LD_STRING D7-Sol1-1
5193: PPUSH
5194: LD_STRING D7-FSol1-1
5196: PPUSH
5197: CALL 5582 0 3
// CenterNowOnUnits ( Cornell ) ;
5201: LD_EXP 14
5205: PPUSH
5206: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
5210: LD_EXP 14
5214: PPUSH
5215: LD_STRING D7-Corn-2
5217: PPUSH
5218: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
5222: LD_EXP 1
5226: PPUSH
5227: LD_STRING D7-JMM-2
5229: PPUSH
5230: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
5234: LD_EXP 14
5238: PPUSH
5239: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
5243: LD_EXP 14
5247: PPUSH
5248: LD_STRING D7-Corn-3
5250: PPUSH
5251: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
5255: LD_EXP 14
5259: PPUSH
5260: LD_INT 250
5262: PPUSH
5263: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
5267: LD_EXP 14
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: CALL_OW 235
// wait ( 0 0$1 ) ;
5279: LD_INT 35
5281: PPUSH
5282: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
5286: LD_EXP 1
5290: PPUSH
5291: LD_STRING D7-JMM-3
5293: PPUSH
5294: CALL_OW 88
// InGameOff ;
5298: CALL_OW 9
// end ;
5302: END
// every 0 0$15 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 251 do
5303: LD_EXP 14
5307: PPUSH
5308: CALL_OW 255
5312: PUSH
5313: LD_INT 1
5315: EQUAL
5316: PUSH
5317: LD_EXP 14
5321: PPUSH
5322: CALL_OW 256
5326: PUSH
5327: LD_INT 251
5329: GREATER
5330: AND
5331: IFFALSE 5524
5333: GO 5335
5335: DISABLE
// begin DialogueOn ;
5336: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
5340: LD_EXP 1
5344: PPUSH
5345: LD_STRING D7a-JMM-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
5352: LD_EXP 14
5356: PPUSH
5357: LD_STRING D7a-Corn-1
5359: PPUSH
5360: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
5364: LD_EXP 1
5368: PPUSH
5369: LD_STRING D7a-JMM-2
5371: PPUSH
5372: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
5376: LD_EXP 14
5380: PPUSH
5381: LD_STRING D7a-Corn-2
5383: PPUSH
5384: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
5388: LD_EXP 1
5392: PPUSH
5393: LD_STRING D7a-JMM-3
5395: PPUSH
5396: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
5400: LD_EXP 14
5404: PPUSH
5405: LD_STRING D7a-Corn-3
5407: PPUSH
5408: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
5412: LD_EXP 1
5416: PPUSH
5417: LD_STRING D7a-JMM-4
5419: PPUSH
5420: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
5424: LD_EXP 14
5428: PPUSH
5429: LD_STRING D7a-Corn-4
5431: PPUSH
5432: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
5436: LD_EXP 1
5440: PPUSH
5441: LD_STRING D7a-JMM-5
5443: PPUSH
5444: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
5448: LD_EXP 14
5452: PPUSH
5453: LD_STRING D7a-Corn-5
5455: PPUSH
5456: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
5460: LD_EXP 1
5464: PPUSH
5465: LD_STRING D7a-JMM-6
5467: PPUSH
5468: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
5472: LD_EXP 14
5476: PPUSH
5477: LD_STRING D7a-Corn-6
5479: PPUSH
5480: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_STRING D7a-JMM-7
5491: PPUSH
5492: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
5496: LD_EXP 14
5500: PPUSH
5501: LD_STRING D7a-Corn-7
5503: PPUSH
5504: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
5508: LD_EXP 1
5512: PPUSH
5513: LD_STRING D7a-JMM-8
5515: PPUSH
5516: CALL_OW 88
// DialogueOff ;
5520: CALL_OW 7
// end ; end_of_file
5524: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
5525: LD_INT 0
5527: PPUSH
5528: PPUSH
// if exist_mode then
5529: LD_VAR 0 2
5533: IFFALSE 5552
// unit := CreateCharacter ( ident ) else
5535: LD_ADDR_VAR 0 4
5539: PUSH
5540: LD_VAR 0 1
5544: PPUSH
5545: CALL_OW 34
5549: ST_TO_ADDR
5550: GO 5567
// unit := NewCharacter ( ident ) ;
5552: LD_ADDR_VAR 0 4
5556: PUSH
5557: LD_VAR 0 1
5561: PPUSH
5562: CALL_OW 25
5566: ST_TO_ADDR
// result := unit ;
5567: LD_ADDR_VAR 0 3
5571: PUSH
5572: LD_VAR 0 4
5576: ST_TO_ADDR
// end ;
5577: LD_VAR 0 3
5581: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
5582: LD_INT 0
5584: PPUSH
5585: PPUSH
5586: PPUSH
// rnd = rand ( 1 , characters ) ;
5587: LD_ADDR_VAR 0 6
5591: PUSH
5592: LD_INT 1
5594: PPUSH
5595: LD_VAR 0 1
5599: PPUSH
5600: CALL_OW 12
5604: ST_TO_ADDR
// for i = 1 to characters do
5605: LD_ADDR_VAR 0 5
5609: PUSH
5610: DOUBLE
5611: LD_INT 1
5613: DEC
5614: ST_TO_ADDR
5615: LD_VAR 0 1
5619: PUSH
5620: FOR_TO
5621: IFFALSE 5731
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
5623: LD_VAR 0 5
5627: PUSH
5628: LD_VAR 0 6
5632: EQUAL
5633: PUSH
5634: LD_VAR 0 1
5638: PUSH
5639: LD_VAR 0 5
5643: ARRAY
5644: PPUSH
5645: CALL_OW 258
5649: PUSH
5650: LD_INT 1
5652: EQUAL
5653: AND
5654: IFFALSE 5676
// Say ( characters [ i ] , dialogMID ) ;
5656: LD_VAR 0 1
5660: PUSH
5661: LD_VAR 0 5
5665: ARRAY
5666: PPUSH
5667: LD_VAR 0 2
5671: PPUSH
5672: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
5676: LD_VAR 0 5
5680: PUSH
5681: LD_VAR 0 6
5685: EQUAL
5686: PUSH
5687: LD_VAR 0 1
5691: PUSH
5692: LD_VAR 0 5
5696: ARRAY
5697: PPUSH
5698: CALL_OW 258
5702: PUSH
5703: LD_INT 2
5705: EQUAL
5706: AND
5707: IFFALSE 5729
// Say ( characters [ i ] , dialogFID ) ;
5709: LD_VAR 0 1
5713: PUSH
5714: LD_VAR 0 5
5718: ARRAY
5719: PPUSH
5720: LD_VAR 0 3
5724: PPUSH
5725: CALL_OW 88
// end ;
5729: GO 5620
5731: POP
5732: POP
// end ;
5733: LD_VAR 0 4
5737: RET
// export function PrepareDifficulty ; begin
5738: LD_INT 0
5740: PPUSH
// if difficulty = 1 then
5741: LD_OWVAR 67
5745: PUSH
5746: LD_INT 1
5748: EQUAL
5749: IFFALSE 5793
// begin RuSolMinLevel = 9 ;
5751: LD_ADDR_EXP 26
5755: PUSH
5756: LD_INT 9
5758: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
5759: LD_ADDR_EXP 27
5763: PUSH
5764: LD_INT 10
5766: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
5767: LD_INT 51
5769: PPUSH
5770: LD_INT 6
5772: PPUSH
5773: LD_INT 2
5775: PPUSH
5776: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
5780: LD_INT 51
5782: PPUSH
5783: LD_INT 5
5785: PPUSH
5786: LD_INT 2
5788: PPUSH
5789: CALL_OW 322
// end ; if difficulty = 2 then
5793: LD_OWVAR 67
5797: PUSH
5798: LD_INT 2
5800: EQUAL
5801: IFFALSE 5897
// begin RuSolMinLevel = 9 ;
5803: LD_ADDR_EXP 26
5807: PUSH
5808: LD_INT 9
5810: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
5811: LD_ADDR_EXP 27
5815: PUSH
5816: LD_INT 10
5818: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
5819: LD_INT 51
5821: PPUSH
5822: LD_INT 6
5824: PPUSH
5825: LD_INT 2
5827: PPUSH
5828: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
5832: LD_INT 57
5834: PPUSH
5835: LD_INT 6
5837: PPUSH
5838: LD_INT 2
5840: PPUSH
5841: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
5845: LD_INT 63
5847: PPUSH
5848: LD_INT 6
5850: PPUSH
5851: LD_INT 2
5853: PPUSH
5854: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
5858: LD_INT 51
5860: PPUSH
5861: LD_INT 5
5863: PPUSH
5864: LD_INT 2
5866: PPUSH
5867: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
5871: LD_INT 5
5873: PPUSH
5874: LD_INT 2
5876: PPUSH
5877: LD_INT 2
5879: PPUSH
5880: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
5884: LD_INT 5
5886: PPUSH
5887: LD_INT 5
5889: PPUSH
5890: LD_INT 2
5892: PPUSH
5893: CALL_OW 322
// end ; if difficulty = 3 then
5897: LD_OWVAR 67
5901: PUSH
5902: LD_INT 3
5904: EQUAL
5905: IFFALSE 6053
// begin RuSolMinLevel = 9 ;
5907: LD_ADDR_EXP 26
5911: PUSH
5912: LD_INT 9
5914: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
5915: LD_ADDR_EXP 27
5919: PUSH
5920: LD_INT 10
5922: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
5923: LD_INT 51
5925: PPUSH
5926: LD_INT 6
5928: PPUSH
5929: LD_INT 2
5931: PPUSH
5932: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
5936: LD_INT 57
5938: PPUSH
5939: LD_INT 6
5941: PPUSH
5942: LD_INT 2
5944: PPUSH
5945: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
5949: LD_INT 52
5951: PPUSH
5952: LD_INT 6
5954: PPUSH
5955: LD_INT 2
5957: PPUSH
5958: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
5962: LD_INT 58
5964: PPUSH
5965: LD_INT 6
5967: PPUSH
5968: LD_INT 2
5970: PPUSH
5971: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
5975: LD_INT 63
5977: PPUSH
5978: LD_INT 6
5980: PPUSH
5981: LD_INT 2
5983: PPUSH
5984: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
5988: LD_INT 64
5990: PPUSH
5991: LD_INT 6
5993: PPUSH
5994: LD_INT 2
5996: PPUSH
5997: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
6001: LD_INT 51
6003: PPUSH
6004: LD_INT 5
6006: PPUSH
6007: LD_INT 2
6009: PPUSH
6010: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
6014: LD_INT 52
6016: PPUSH
6017: LD_INT 5
6019: PPUSH
6020: LD_INT 2
6022: PPUSH
6023: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
6027: LD_INT 66
6029: PPUSH
6030: LD_INT 2
6032: PPUSH
6033: LD_INT 2
6035: PPUSH
6036: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
6040: LD_INT 66
6042: PPUSH
6043: LD_INT 5
6045: PPUSH
6046: LD_INT 2
6048: PPUSH
6049: CALL_OW 322
// end ; end ;
6053: LD_VAR 0 1
6057: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab ; begin
6058: LD_INT 0
6060: PPUSH
6061: PPUSH
6062: PPUSH
6063: PPUSH
// if position = 1 then
6064: LD_VAR 0 1
6068: PUSH
6069: LD_INT 1
6071: EQUAL
6072: IFFALSE 6848
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6074: LD_ADDR_VAR 0 4
6078: PUSH
6079: LD_INT 22
6081: PUSH
6082: LD_INT 3
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 25
6091: PUSH
6092: LD_INT 2
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PPUSH
6103: CALL_OW 69
6107: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
6108: LD_ADDR_VAR 0 5
6112: PUSH
6113: LD_INT 0
6115: PUSH
6116: LD_INT 49
6118: PUSH
6119: LD_INT 74
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 4
6133: PUSH
6134: LD_INT 73
6136: PUSH
6137: LD_INT 88
6139: PUSH
6140: LD_INT 5
6142: PUSH
6143: EMPTY
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 4
6151: PUSH
6152: LD_INT 56
6154: PUSH
6155: LD_INT 62
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: EMPTY
6162: LIST
6163: LIST
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 29
6169: PUSH
6170: LD_INT 43
6172: PUSH
6173: LD_INT 68
6175: PUSH
6176: LD_INT 2
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: PUSH
6185: LD_INT 30
6187: PUSH
6188: LD_INT 43
6190: PUSH
6191: LD_INT 79
6193: PUSH
6194: LD_INT 5
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 28
6205: PUSH
6206: LD_INT 60
6208: PUSH
6209: LD_INT 75
6211: PUSH
6212: LD_INT 1
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 2
6223: PUSH
6224: LD_INT 50
6226: PUSH
6227: LD_INT 87
6229: PUSH
6230: LD_INT 1
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 28
6241: PUSH
6242: LD_INT 45
6244: PUSH
6245: LD_INT 67
6247: PUSH
6248: LD_INT 2
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: PUSH
6257: LD_INT 17
6259: PUSH
6260: LD_INT 47
6262: PUSH
6263: LD_INT 84
6265: PUSH
6266: LD_INT 2
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: PUSH
6275: LD_INT 18
6277: PUSH
6278: LD_INT 46
6280: PUSH
6281: LD_INT 87
6283: PUSH
6284: LD_INT 1
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: PUSH
6293: LD_INT 28
6295: PUSH
6296: LD_INT 41
6298: PUSH
6299: LD_INT 64
6301: PUSH
6302: LD_INT 5
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 32
6313: PUSH
6314: LD_INT 75
6316: PUSH
6317: LD_INT 76
6319: PUSH
6320: LD_INT 5
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 32
6331: PUSH
6332: LD_INT 77
6334: PUSH
6335: LD_INT 75
6337: PUSH
6338: LD_INT 5
6340: PUSH
6341: EMPTY
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: PUSH
6347: LD_INT 32
6349: PUSH
6350: LD_INT 69
6352: PUSH
6353: LD_INT 68
6355: PUSH
6356: LD_INT 3
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 32
6367: PUSH
6368: LD_INT 59
6370: PUSH
6371: LD_INT 96
6373: PUSH
6374: LD_INT 5
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: PUSH
6383: LD_INT 32
6385: PUSH
6386: LD_INT 56
6388: PUSH
6389: LD_INT 96
6391: PUSH
6392: LD_INT 0
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: LIST
6400: PUSH
6401: LD_INT 32
6403: PUSH
6404: LD_INT 51
6406: PUSH
6407: LD_INT 61
6409: PUSH
6410: LD_INT 3
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: PUSH
6419: LD_INT 32
6421: PUSH
6422: LD_INT 42
6424: PUSH
6425: LD_INT 60
6427: PUSH
6428: LD_INT 3
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 32
6439: PUSH
6440: LD_INT 36
6442: PUSH
6443: LD_INT 58
6445: PUSH
6446: LD_INT 3
6448: PUSH
6449: EMPTY
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: PUSH
6455: LD_INT 32
6457: PUSH
6458: LD_INT 39
6460: PUSH
6461: LD_INT 59
6463: PUSH
6464: LD_INT 3
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 32
6475: PUSH
6476: LD_INT 61
6478: PUSH
6479: LD_INT 64
6481: PUSH
6482: LD_INT 3
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 33
6493: PUSH
6494: LD_INT 63
6496: PUSH
6497: LD_INT 90
6499: PUSH
6500: LD_INT 5
6502: PUSH
6503: EMPTY
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: PUSH
6509: LD_INT 33
6511: PUSH
6512: LD_INT 64
6514: PUSH
6515: LD_INT 88
6517: PUSH
6518: LD_INT 5
6520: PUSH
6521: EMPTY
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_INT 33
6529: PUSH
6530: LD_INT 72
6532: PUSH
6533: LD_INT 82
6535: PUSH
6536: LD_INT 5
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 6
6547: PUSH
6548: LD_INT 42
6550: PUSH
6551: LD_INT 74
6553: PUSH
6554: LD_INT 1
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: PUSH
6563: LD_INT 6
6565: PUSH
6566: LD_INT 56
6568: PUSH
6569: LD_INT 77
6571: PUSH
6572: LD_INT 2
6574: PUSH
6575: EMPTY
6576: LIST
6577: LIST
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 21
6583: PUSH
6584: LD_INT 54
6586: PUSH
6587: LD_INT 91
6589: PUSH
6590: LD_INT 5
6592: PUSH
6593: EMPTY
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 16
6601: PUSH
6602: LD_INT 50
6604: PUSH
6605: LD_INT 83
6607: PUSH
6608: LD_INT 3
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 24
6619: PUSH
6620: LD_INT 50
6622: PUSH
6623: LD_INT 90
6625: PUSH
6626: LD_INT 0
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: PUSH
6635: EMPTY
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: LIST
6663: LIST
6664: LIST
6665: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
6666: LD_ADDR_VAR 0 3
6670: PUSH
6671: LD_INT 22
6673: PUSH
6674: LD_INT 3
6676: PUSH
6677: EMPTY
6678: LIST
6679: LIST
6680: PUSH
6681: LD_INT 3
6683: PUSH
6684: LD_INT 25
6686: PUSH
6687: LD_INT 2
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 69
6706: PUSH
6707: FOR_IN
6708: IFFALSE 6755
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 3 , buildingsTab [ 2 ] [ 3 ] + 2 ) ;
6710: LD_VAR 0 3
6714: PPUSH
6715: LD_VAR 0 5
6719: PUSH
6720: LD_INT 2
6722: ARRAY
6723: PUSH
6724: LD_INT 2
6726: ARRAY
6727: PUSH
6728: LD_INT 3
6730: PLUS
6731: PPUSH
6732: LD_VAR 0 5
6736: PUSH
6737: LD_INT 2
6739: ARRAY
6740: PUSH
6741: LD_INT 3
6743: ARRAY
6744: PUSH
6745: LD_INT 2
6747: PLUS
6748: PPUSH
6749: CALL_OW 171
6753: GO 6707
6755: POP
6756: POP
// for i := 1 to buildingsTab do
6757: LD_ADDR_VAR 0 3
6761: PUSH
6762: DOUBLE
6763: LD_INT 1
6765: DEC
6766: ST_TO_ADDR
6767: LD_VAR 0 5
6771: PUSH
6772: FOR_TO
6773: IFFALSE 6846
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
6775: LD_VAR 0 4
6779: PPUSH
6780: LD_VAR 0 5
6784: PUSH
6785: LD_VAR 0 3
6789: ARRAY
6790: PUSH
6791: LD_INT 1
6793: ARRAY
6794: PPUSH
6795: LD_VAR 0 5
6799: PUSH
6800: LD_VAR 0 3
6804: ARRAY
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: PPUSH
6810: LD_VAR 0 5
6814: PUSH
6815: LD_VAR 0 3
6819: ARRAY
6820: PUSH
6821: LD_INT 3
6823: ARRAY
6824: PPUSH
6825: LD_VAR 0 5
6829: PUSH
6830: LD_VAR 0 3
6834: ARRAY
6835: PUSH
6836: LD_INT 4
6838: ARRAY
6839: PPUSH
6840: CALL_OW 205
6844: GO 6772
6846: POP
6847: POP
// end ; if position = 2 then
6848: LD_VAR 0 1
6852: PUSH
6853: LD_INT 2
6855: EQUAL
6856: IFFALSE 7499
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6858: LD_ADDR_VAR 0 4
6862: PUSH
6863: LD_INT 22
6865: PUSH
6866: LD_INT 3
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: PUSH
6873: LD_INT 25
6875: PUSH
6876: LD_INT 2
6878: PUSH
6879: EMPTY
6880: LIST
6881: LIST
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PPUSH
6887: CALL_OW 69
6891: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
6892: LD_ADDR_VAR 0 5
6896: PUSH
6897: LD_INT 0
6899: PUSH
6900: LD_INT 104
6902: PUSH
6903: LD_INT 110
6905: PUSH
6906: LD_INT 5
6908: PUSH
6909: EMPTY
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: LD_INT 4
6917: PUSH
6918: LD_INT 98
6920: PUSH
6921: LD_INT 90
6923: PUSH
6924: LD_INT 3
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: LIST
6931: LIST
6932: PUSH
6933: LD_INT 29
6935: PUSH
6936: LD_INT 103
6938: PUSH
6939: LD_INT 114
6941: PUSH
6942: LD_INT 2
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: PUSH
6951: LD_INT 30
6953: PUSH
6954: LD_INT 99
6956: PUSH
6957: LD_INT 114
6959: PUSH
6960: LD_INT 3
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 28
6971: PUSH
6972: LD_INT 100
6974: PUSH
6975: LD_INT 112
6977: PUSH
6978: LD_INT 1
6980: PUSH
6981: EMPTY
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: PUSH
6987: LD_INT 2
6989: PUSH
6990: LD_INT 92
6992: PUSH
6993: LD_INT 101
6995: PUSH
6996: LD_INT 0
6998: PUSH
6999: EMPTY
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: PUSH
7005: LD_INT 28
7007: PUSH
7008: LD_INT 97
7010: PUSH
7011: LD_INT 116
7013: PUSH
7014: LD_INT 5
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: PUSH
7023: LD_INT 17
7025: PUSH
7026: LD_INT 96
7028: PUSH
7029: LD_INT 101
7031: PUSH
7032: LD_INT 4
7034: PUSH
7035: EMPTY
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: PUSH
7041: LD_INT 18
7043: PUSH
7044: LD_INT 88
7046: PUSH
7047: LD_INT 97
7049: PUSH
7050: LD_INT 2
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: LIST
7058: PUSH
7059: LD_INT 28
7061: PUSH
7062: LD_INT 106
7064: PUSH
7065: LD_INT 92
7067: PUSH
7068: LD_INT 2
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 32
7079: PUSH
7080: LD_INT 88
7082: PUSH
7083: LD_INT 89
7085: PUSH
7086: LD_INT 2
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 32
7097: PUSH
7098: LD_INT 86
7100: PUSH
7101: LD_INT 90
7103: PUSH
7104: LD_INT 2
7106: PUSH
7107: EMPTY
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 32
7115: PUSH
7116: LD_INT 85
7118: PUSH
7119: LD_INT 99
7121: PUSH
7122: LD_INT 2
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 32
7133: PUSH
7134: LD_INT 85
7136: PUSH
7137: LD_INT 107
7139: PUSH
7140: LD_INT 1
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 33
7151: PUSH
7152: LD_INT 105
7154: PUSH
7155: LD_INT 99
7157: PUSH
7158: LD_INT 1
7160: PUSH
7161: EMPTY
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 33
7169: PUSH
7170: LD_INT 102
7172: PUSH
7173: LD_INT 92
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 33
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 92
7193: PUSH
7194: LD_INT 2
7196: PUSH
7197: EMPTY
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 6
7205: PUSH
7206: LD_INT 92
7208: PUSH
7209: LD_INT 110
7211: PUSH
7212: LD_INT 0
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: LIST
7219: LIST
7220: PUSH
7221: LD_INT 6
7223: PUSH
7224: LD_INT 103
7226: PUSH
7227: LD_INT 103
7229: PUSH
7230: LD_INT 5
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 89
7244: PUSH
7245: LD_INT 101
7247: PUSH
7248: LD_INT 1
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 16
7259: PUSH
7260: LD_INT 95
7262: PUSH
7263: LD_INT 104
7265: PUSH
7266: LD_INT 4
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: LIST
7273: LIST
7274: PUSH
7275: LD_INT 24
7277: PUSH
7278: LD_INT 92
7280: PUSH
7281: LD_INT 105
7283: PUSH
7284: LD_INT 0
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: LIST
7297: LIST
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
7317: LD_ADDR_VAR 0 3
7321: PUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 3
7334: PUSH
7335: LD_INT 25
7337: PUSH
7338: LD_INT 2
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: EMPTY
7346: LIST
7347: LIST
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PPUSH
7353: CALL_OW 69
7357: PUSH
7358: FOR_IN
7359: IFFALSE 7406
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 1 ) ;
7361: LD_VAR 0 3
7365: PPUSH
7366: LD_VAR 0 5
7370: PUSH
7371: LD_INT 2
7373: ARRAY
7374: PUSH
7375: LD_INT 2
7377: ARRAY
7378: PUSH
7379: LD_INT 2
7381: PLUS
7382: PPUSH
7383: LD_VAR 0 5
7387: PUSH
7388: LD_INT 2
7390: ARRAY
7391: PUSH
7392: LD_INT 3
7394: ARRAY
7395: PUSH
7396: LD_INT 1
7398: PLUS
7399: PPUSH
7400: CALL_OW 171
7404: GO 7358
7406: POP
7407: POP
// for i := 1 to buildingsTab do
7408: LD_ADDR_VAR 0 3
7412: PUSH
7413: DOUBLE
7414: LD_INT 1
7416: DEC
7417: ST_TO_ADDR
7418: LD_VAR 0 5
7422: PUSH
7423: FOR_TO
7424: IFFALSE 7497
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
7426: LD_VAR 0 4
7430: PPUSH
7431: LD_VAR 0 5
7435: PUSH
7436: LD_VAR 0 3
7440: ARRAY
7441: PUSH
7442: LD_INT 1
7444: ARRAY
7445: PPUSH
7446: LD_VAR 0 5
7450: PUSH
7451: LD_VAR 0 3
7455: ARRAY
7456: PUSH
7457: LD_INT 2
7459: ARRAY
7460: PPUSH
7461: LD_VAR 0 5
7465: PUSH
7466: LD_VAR 0 3
7470: ARRAY
7471: PUSH
7472: LD_INT 3
7474: ARRAY
7475: PPUSH
7476: LD_VAR 0 5
7480: PUSH
7481: LD_VAR 0 3
7485: ARRAY
7486: PUSH
7487: LD_INT 4
7489: ARRAY
7490: PPUSH
7491: CALL_OW 205
7495: GO 7423
7497: POP
7498: POP
// end ; if position = 3 then
7499: LD_VAR 0 1
7503: PUSH
7504: LD_INT 3
7506: EQUAL
7507: IFFALSE 8321
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
7509: LD_ADDR_VAR 0 4
7513: PUSH
7514: LD_INT 22
7516: PUSH
7517: LD_INT 3
7519: PUSH
7520: EMPTY
7521: LIST
7522: LIST
7523: PUSH
7524: LD_INT 25
7526: PUSH
7527: LD_INT 2
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: EMPTY
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
7543: LD_ADDR_VAR 0 5
7547: PUSH
7548: LD_INT 0
7550: PUSH
7551: LD_INT 151
7553: PUSH
7554: LD_INT 71
7556: PUSH
7557: LD_INT 4
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: PUSH
7566: LD_INT 4
7568: PUSH
7569: LD_INT 145
7571: PUSH
7572: LD_INT 53
7574: PUSH
7575: LD_INT 3
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: LIST
7582: LIST
7583: PUSH
7584: LD_INT 4
7586: PUSH
7587: LD_INT 172
7589: PUSH
7590: LD_INT 102
7592: PUSH
7593: LD_INT 5
7595: PUSH
7596: EMPTY
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: PUSH
7602: LD_INT 29
7604: PUSH
7605: LD_INT 152
7607: PUSH
7608: LD_INT 85
7610: PUSH
7611: LD_INT 3
7613: PUSH
7614: EMPTY
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 30
7622: PUSH
7623: LD_INT 156
7625: PUSH
7626: LD_INT 92
7628: PUSH
7629: LD_INT 3
7631: PUSH
7632: EMPTY
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 28
7640: PUSH
7641: LD_INT 151
7643: PUSH
7644: LD_INT 66
7646: PUSH
7647: LD_INT 4
7649: PUSH
7650: EMPTY
7651: LIST
7652: LIST
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 2
7658: PUSH
7659: LD_INT 163
7661: PUSH
7662: LD_INT 95
7664: PUSH
7665: LD_INT 5
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: PUSH
7674: LD_INT 28
7676: PUSH
7677: LD_INT 149
7679: PUSH
7680: LD_INT 63
7682: PUSH
7683: LD_INT 4
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: PUSH
7692: LD_INT 17
7694: PUSH
7695: LD_INT 167
7697: PUSH
7698: LD_INT 99
7700: PUSH
7701: LD_INT 5
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: PUSH
7710: LD_INT 18
7712: PUSH
7713: LD_INT 163
7715: PUSH
7716: LD_INT 98
7718: PUSH
7719: LD_INT 0
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: LIST
7726: LIST
7727: PUSH
7728: LD_INT 28
7730: PUSH
7731: LD_INT 154
7733: PUSH
7734: LD_INT 70
7736: PUSH
7737: LD_INT 4
7739: PUSH
7740: EMPTY
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: PUSH
7746: LD_INT 32
7748: PUSH
7749: LD_INT 155
7751: PUSH
7752: LD_INT 62
7754: PUSH
7755: LD_INT 4
7757: PUSH
7758: EMPTY
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 32
7766: PUSH
7767: LD_INT 161
7769: PUSH
7770: LD_INT 69
7772: PUSH
7773: LD_INT 4
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: LIST
7780: LIST
7781: PUSH
7782: LD_INT 32
7784: PUSH
7785: LD_INT 168
7787: PUSH
7788: LD_INT 78
7790: PUSH
7791: LD_INT 4
7793: PUSH
7794: EMPTY
7795: LIST
7796: LIST
7797: LIST
7798: LIST
7799: PUSH
7800: LD_INT 32
7802: PUSH
7803: LD_INT 163
7805: PUSH
7806: LD_INT 80
7808: PUSH
7809: LD_INT 5
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: PUSH
7818: LD_INT 32
7820: PUSH
7821: LD_INT 136
7823: PUSH
7824: LD_INT 73
7826: PUSH
7827: LD_INT 0
7829: PUSH
7830: EMPTY
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: PUSH
7836: LD_INT 32
7838: PUSH
7839: LD_INT 157
7841: PUSH
7842: LD_INT 98
7844: PUSH
7845: LD_INT 0
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: LD_INT 32
7856: PUSH
7857: LD_INT 150
7859: PUSH
7860: LD_INT 87
7862: PUSH
7863: LD_INT 1
7865: PUSH
7866: EMPTY
7867: LIST
7868: LIST
7869: LIST
7870: LIST
7871: PUSH
7872: LD_INT 33
7874: PUSH
7875: LD_INT 171
7877: PUSH
7878: LD_INT 97
7880: PUSH
7881: LD_INT 4
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: PUSH
7890: LD_INT 33
7892: PUSH
7893: LD_INT 168
7895: PUSH
7896: LD_INT 92
7898: PUSH
7899: LD_INT 4
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: LIST
7906: LIST
7907: PUSH
7908: LD_INT 33
7910: PUSH
7911: LD_INT 166
7913: PUSH
7914: LD_INT 80
7916: PUSH
7917: LD_INT 5
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: PUSH
7926: LD_INT 33
7928: PUSH
7929: LD_INT 141
7931: PUSH
7932: LD_INT 54
7934: PUSH
7935: LD_INT 2
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: PUSH
7944: LD_INT 33
7946: PUSH
7947: LD_INT 133
7949: PUSH
7950: LD_INT 57
7952: PUSH
7953: LD_INT 2
7955: PUSH
7956: EMPTY
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 33
7964: PUSH
7965: LD_INT 132
7967: PUSH
7968: LD_INT 61
7970: PUSH
7971: LD_INT 2
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: PUSH
7980: LD_INT 33
7982: PUSH
7983: LD_INT 150
7985: PUSH
7986: LD_INT 82
7988: PUSH
7989: LD_INT 0
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 33
8000: PUSH
8001: LD_INT 132
8003: PUSH
8004: LD_INT 72
8006: PUSH
8007: LD_INT 0
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: PUSH
8016: LD_INT 6
8018: PUSH
8019: LD_INT 146
8021: PUSH
8022: LD_INT 64
8024: PUSH
8025: LD_INT 4
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 6
8036: PUSH
8037: LD_INT 159
8039: PUSH
8040: LD_INT 85
8042: PUSH
8043: LD_INT 4
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 21
8054: PUSH
8055: LD_INT 163
8057: PUSH
8058: LD_INT 91
8060: PUSH
8061: LD_INT 3
8063: PUSH
8064: EMPTY
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: PUSH
8070: LD_INT 16
8072: PUSH
8073: LD_INT 166
8075: PUSH
8076: LD_INT 95
8078: PUSH
8079: LD_INT 4
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: PUSH
8088: LD_INT 24
8090: PUSH
8091: LD_INT 159
8093: PUSH
8094: LD_INT 95
8096: PUSH
8097: LD_INT 1
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PUSH
8106: EMPTY
8107: LIST
8108: LIST
8109: LIST
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: LIST
8135: LIST
8136: LIST
8137: LIST
8138: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
8139: LD_ADDR_VAR 0 3
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 3
8156: PUSH
8157: LD_INT 25
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: EMPTY
8172: LIST
8173: LIST
8174: PPUSH
8175: CALL_OW 69
8179: PUSH
8180: FOR_IN
8181: IFFALSE 8228
// AddComMoveXY ( i , buildingsTab [ 2 ] [ 2 ] + 2 , buildingsTab [ 2 ] [ 3 ] + 3 ) ;
8183: LD_VAR 0 3
8187: PPUSH
8188: LD_VAR 0 5
8192: PUSH
8193: LD_INT 2
8195: ARRAY
8196: PUSH
8197: LD_INT 2
8199: ARRAY
8200: PUSH
8201: LD_INT 2
8203: PLUS
8204: PPUSH
8205: LD_VAR 0 5
8209: PUSH
8210: LD_INT 2
8212: ARRAY
8213: PUSH
8214: LD_INT 3
8216: ARRAY
8217: PUSH
8218: LD_INT 3
8220: PLUS
8221: PPUSH
8222: CALL_OW 171
8226: GO 8180
8228: POP
8229: POP
// for i := 1 to buildingsTab do
8230: LD_ADDR_VAR 0 3
8234: PUSH
8235: DOUBLE
8236: LD_INT 1
8238: DEC
8239: ST_TO_ADDR
8240: LD_VAR 0 5
8244: PUSH
8245: FOR_TO
8246: IFFALSE 8319
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8248: LD_VAR 0 4
8252: PPUSH
8253: LD_VAR 0 5
8257: PUSH
8258: LD_VAR 0 3
8262: ARRAY
8263: PUSH
8264: LD_INT 1
8266: ARRAY
8267: PPUSH
8268: LD_VAR 0 5
8272: PUSH
8273: LD_VAR 0 3
8277: ARRAY
8278: PUSH
8279: LD_INT 2
8281: ARRAY
8282: PPUSH
8283: LD_VAR 0 5
8287: PUSH
8288: LD_VAR 0 3
8292: ARRAY
8293: PUSH
8294: LD_INT 3
8296: ARRAY
8297: PPUSH
8298: LD_VAR 0 5
8302: PUSH
8303: LD_VAR 0 3
8307: ARRAY
8308: PUSH
8309: LD_INT 4
8311: ARRAY
8312: PPUSH
8313: CALL_OW 205
8317: GO 8245
8319: POP
8320: POP
// end ; end ;
8321: LD_VAR 0 2
8325: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
8331: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
8332: LD_ADDR_VAR 0 3
8336: PUSH
8337: LD_INT 22
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: EMPTY
8344: LIST
8345: LIST
8346: PUSH
8347: LD_INT 25
8349: PUSH
8350: LD_INT 2
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 69
8365: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
8366: LD_VAR 0 3
8370: PPUSH
8371: LD_INT 0
8373: PPUSH
8374: LD_INT 71
8376: PPUSH
8377: LD_INT 15
8379: PPUSH
8380: LD_INT 3
8382: PPUSH
8383: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
8387: LD_ADDR_VAR 0 4
8391: PUSH
8392: LD_INT 6
8394: PUSH
8395: LD_INT 77
8397: PUSH
8398: LD_INT 18
8400: PUSH
8401: LD_INT 3
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: LIST
8408: LIST
8409: PUSH
8410: LD_INT 4
8412: PUSH
8413: LD_INT 77
8415: PUSH
8416: LD_INT 26
8418: PUSH
8419: LD_INT 0
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 31
8430: PUSH
8431: LD_INT 82
8433: PUSH
8434: LD_INT 28
8436: PUSH
8437: LD_INT 0
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 31
8448: PUSH
8449: LD_INT 84
8451: PUSH
8452: LD_INT 21
8454: PUSH
8455: LD_INT 3
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 31
8466: PUSH
8467: LD_INT 66
8469: PUSH
8470: LD_INT 14
8472: PUSH
8473: LD_INT 2
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: PUSH
8482: LD_INT 27
8484: PUSH
8485: LD_INT 67
8487: PUSH
8488: LD_INT 18
8490: PUSH
8491: LD_INT 5
8493: PUSH
8494: EMPTY
8495: LIST
8496: LIST
8497: LIST
8498: LIST
8499: PUSH
8500: LD_INT 27
8502: PUSH
8503: LD_INT 69
8505: PUSH
8506: LD_INT 23
8508: PUSH
8509: LD_INT 2
8511: PUSH
8512: EMPTY
8513: LIST
8514: LIST
8515: LIST
8516: LIST
8517: PUSH
8518: EMPTY
8519: LIST
8520: LIST
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: ST_TO_ADDR
// for i := 1 to buildingsTab do
8527: LD_ADDR_VAR 0 2
8531: PUSH
8532: DOUBLE
8533: LD_INT 1
8535: DEC
8536: ST_TO_ADDR
8537: LD_VAR 0 4
8541: PUSH
8542: FOR_TO
8543: IFFALSE 8616
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
8545: LD_VAR 0 3
8549: PPUSH
8550: LD_VAR 0 4
8554: PUSH
8555: LD_VAR 0 2
8559: ARRAY
8560: PUSH
8561: LD_INT 1
8563: ARRAY
8564: PPUSH
8565: LD_VAR 0 4
8569: PUSH
8570: LD_VAR 0 2
8574: ARRAY
8575: PUSH
8576: LD_INT 2
8578: ARRAY
8579: PPUSH
8580: LD_VAR 0 4
8584: PUSH
8585: LD_VAR 0 2
8589: ARRAY
8590: PUSH
8591: LD_INT 3
8593: ARRAY
8594: PPUSH
8595: LD_VAR 0 4
8599: PUSH
8600: LD_VAR 0 2
8604: ARRAY
8605: PUSH
8606: LD_INT 4
8608: ARRAY
8609: PPUSH
8610: CALL_OW 205
8614: GO 8542
8616: POP
8617: POP
// end ;
8618: LD_VAR 0 1
8622: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
8623: LD_INT 0
8625: PPUSH
8626: PPUSH
8627: PPUSH
8628: PPUSH
8629: PPUSH
8630: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
8631: LD_ADDR_VAR 0 7
8635: PUSH
8636: LD_INT 22
8638: PUSH
8639: LD_VAR 0 1
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PUSH
8648: LD_INT 25
8650: PUSH
8651: LD_INT 9
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PPUSH
8662: CALL_OW 69
8666: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
8667: LD_ADDR_VAR 0 8
8671: PUSH
8672: LD_INT 22
8674: PUSH
8675: LD_VAR 0 2
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: LD_INT 3
8686: PUSH
8687: LD_INT 21
8689: PUSH
8690: LD_INT 3
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: EMPTY
8702: LIST
8703: LIST
8704: PPUSH
8705: CALL_OW 69
8709: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
8710: LD_ADDR_VAR 0 5
8714: PUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 3
8720: PPUSH
8721: CALL_OW 12
8725: ST_TO_ADDR
// for i = 1 to list do
8726: LD_ADDR_VAR 0 6
8730: PUSH
8731: DOUBLE
8732: LD_INT 1
8734: DEC
8735: ST_TO_ADDR
8736: LD_VAR 0 7
8740: PUSH
8741: FOR_TO
8742: IFFALSE 8924
// for ta in filter do
8744: LD_ADDR_VAR 0 4
8748: PUSH
8749: LD_VAR 0 8
8753: PUSH
8754: FOR_IN
8755: IFFALSE 8920
// begin if GetDistUnits ( list [ i ] , ta ) <= 13 then
8757: LD_VAR 0 7
8761: PUSH
8762: LD_VAR 0 6
8766: ARRAY
8767: PPUSH
8768: LD_VAR 0 4
8772: PPUSH
8773: CALL_OW 296
8777: PUSH
8778: LD_INT 13
8780: LESSEQUAL
8781: IFFALSE 8918
// begin case c of 1 :
8783: LD_VAR 0 5
8787: PUSH
8788: LD_INT 1
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8834
8796: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
8797: LD_VAR 0 7
8801: PUSH
8802: LD_VAR 0 6
8806: ARRAY
8807: PPUSH
8808: LD_VAR 0 4
8812: PPUSH
8813: CALL_OW 250
8817: PPUSH
8818: LD_VAR 0 4
8822: PPUSH
8823: CALL_OW 251
8827: PPUSH
8828: CALL_OW 154
8832: GO 8918
8834: LD_INT 2
8836: DOUBLE
8837: EQUAL
8838: IFTRUE 8842
8840: GO 8906
8842: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
8843: LD_VAR 0 7
8847: PUSH
8848: LD_VAR 0 6
8852: ARRAY
8853: PPUSH
8854: LD_VAR 0 4
8858: PPUSH
8859: CALL_OW 250
8863: PUSH
8864: LD_INT 1
8866: NEG
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: CALL_OW 12
8875: PLUS
8876: PPUSH
8877: LD_VAR 0 4
8881: PPUSH
8882: CALL_OW 251
8886: PUSH
8887: LD_INT 1
8889: NEG
8890: PPUSH
8891: LD_INT 1
8893: PPUSH
8894: CALL_OW 12
8898: PLUS
8899: PPUSH
8900: CALL_OW 153
8904: GO 8918
8906: LD_INT 3
8908: DOUBLE
8909: EQUAL
8910: IFTRUE 8914
8912: GO 8917
8914: POP
// ; end ;
8915: GO 8918
8917: POP
// end ; end ;
8918: GO 8754
8920: POP
8921: POP
8922: GO 8741
8924: POP
8925: POP
// end ;
8926: LD_VAR 0 3
8930: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
8931: LD_INT 0
8933: PPUSH
8934: PPUSH
8935: PPUSH
8936: PPUSH
// for i = 1 to 72 do
8937: LD_ADDR_VAR 0 5
8941: PUSH
8942: DOUBLE
8943: LD_INT 1
8945: DEC
8946: ST_TO_ADDR
8947: LD_INT 72
8949: PUSH
8950: FOR_TO
8951: IFFALSE 9009
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
8953: LD_VAR 0 5
8957: PPUSH
8958: LD_VAR 0 1
8962: PPUSH
8963: CALL_OW 321
8967: PUSH
8968: LD_INT 1
8970: EQUAL
8971: PUSH
8972: LD_VAR 0 5
8976: PPUSH
8977: LD_VAR 0 3
8981: PPUSH
8982: CALL_OW 482
8986: PUSH
8987: LD_INT 1
8989: EQUAL
8990: AND
8991: IFFALSE 9007
// AddComResearch ( lab , i ) ;
8993: LD_VAR 0 2
8997: PPUSH
8998: LD_VAR 0 5
9002: PPUSH
9003: CALL_OW 184
9007: GO 8950
9009: POP
9010: POP
// end ;
9011: LD_VAR 0 4
9015: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList ; begin
9016: LD_INT 0
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 1 ] , [ f_outside ] , [ f_lives , 700 ] ] ) ;
9025: LD_ADDR_VAR 0 6
9029: PUSH
9030: LD_INT 22
9032: PUSH
9033: LD_VAR 0 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 25
9044: PUSH
9045: LD_INT 1
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 56
9054: PUSH
9055: EMPTY
9056: LIST
9057: PUSH
9058: LD_INT 24
9060: PUSH
9061: LD_INT 700
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: PPUSH
9074: CALL_OW 69
9078: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
9079: LD_ADDR_VAR 0 7
9083: PUSH
9084: LD_INT 22
9086: PUSH
9087: LD_VAR 0 1
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: PUSH
9096: LD_INT 30
9098: PUSH
9099: LD_INT 32
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 58
9108: PUSH
9109: EMPTY
9110: LIST
9111: PUSH
9112: LD_INT 24
9114: PUSH
9115: LD_INT 251
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: PPUSH
9128: CALL_OW 69
9132: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
9133: LD_ADDR_VAR 0 9
9137: PUSH
9138: LD_INT 22
9140: PUSH
9141: LD_VAR 0 1
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: PUSH
9150: LD_INT 2
9152: PUSH
9153: LD_INT 30
9155: PUSH
9156: LD_INT 4
9158: PUSH
9159: EMPTY
9160: LIST
9161: LIST
9162: PUSH
9163: LD_INT 30
9165: PUSH
9166: LD_INT 5
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: PUSH
9173: EMPTY
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: LD_INT 24
9180: PUSH
9181: LD_INT 251
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: LIST
9192: PPUSH
9193: CALL_OW 69
9197: ST_TO_ADDR
// if barrackList > 0 then
9198: LD_VAR 0 9
9202: PUSH
9203: LD_INT 0
9205: GREATER
9206: IFFALSE 9295
// begin if turretList = 0 then
9208: LD_VAR 0 7
9212: PUSH
9213: LD_INT 0
9215: EQUAL
9216: IFFALSE 9255
// begin for i in soldiers_list do
9218: LD_ADDR_VAR 0 4
9222: PUSH
9223: LD_VAR 0 6
9227: PUSH
9228: FOR_IN
9229: IFFALSE 9251
// ComEnterUnit ( i , barrackList [ 1 ] ) ;
9231: LD_VAR 0 4
9235: PPUSH
9236: LD_VAR 0 9
9240: PUSH
9241: LD_INT 1
9243: ARRAY
9244: PPUSH
9245: CALL_OW 120
9249: GO 9228
9251: POP
9252: POP
// end else
9253: GO 9295
// begin for i in barrackList do
9255: LD_ADDR_VAR 0 4
9259: PUSH
9260: LD_VAR 0 9
9264: PUSH
9265: FOR_IN
9266: IFFALSE 9293
// begin ComEnterUnit ( UnitsInside ( i ) , turretList [ 1 ] ) ;
9268: LD_VAR 0 4
9272: PPUSH
9273: CALL_OW 313
9277: PPUSH
9278: LD_VAR 0 7
9282: PUSH
9283: LD_INT 1
9285: ARRAY
9286: PPUSH
9287: CALL_OW 120
// end ;
9291: GO 9265
9293: POP
9294: POP
// end ; end ; end ;
9295: LD_VAR 0 3
9299: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
9300: LD_INT 0
9302: PPUSH
9303: PPUSH
9304: PPUSH
9305: PPUSH
9306: PPUSH
9307: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
9308: LD_ADDR_VAR 0 7
9312: PUSH
9313: LD_VAR 0 2
9317: PPUSH
9318: CALL_OW 313
9322: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
9323: LD_ADDR_VAR 0 8
9327: PUSH
9328: LD_VAR 0 3
9332: PPUSH
9333: LD_INT 22
9335: PUSH
9336: LD_VAR 0 1
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: PUSH
9345: LD_INT 25
9347: PUSH
9348: LD_INT 2
9350: PUSH
9351: EMPTY
9352: LIST
9353: LIST
9354: PUSH
9355: LD_INT 24
9357: PUSH
9358: LD_INT 1000
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: PPUSH
9370: CALL_OW 70
9374: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
9375: LD_ADDR_VAR 0 5
9379: PUSH
9380: LD_VAR 0 3
9384: PPUSH
9385: LD_INT 22
9387: PUSH
9388: LD_VAR 0 1
9392: PUSH
9393: EMPTY
9394: LIST
9395: LIST
9396: PUSH
9397: LD_INT 21
9399: PUSH
9400: LD_INT 3
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: PUSH
9407: LD_INT 3
9409: PUSH
9410: LD_INT 24
9412: PUSH
9413: LD_INT 1000
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: PUSH
9420: EMPTY
9421: LIST
9422: LIST
9423: PUSH
9424: EMPTY
9425: LIST
9426: LIST
9427: LIST
9428: PUSH
9429: EMPTY
9430: LIST
9431: PPUSH
9432: CALL_OW 70
9436: ST_TO_ADDR
// if buildings_list > 0 and engineerOkInside > 0 then
9437: LD_VAR 0 5
9441: PUSH
9442: LD_INT 0
9444: GREATER
9445: PUSH
9446: LD_VAR 0 7
9450: PUSH
9451: LD_INT 0
9453: GREATER
9454: AND
9455: IFFALSE 9483
// for i in engineerOkInside do
9457: LD_ADDR_VAR 0 6
9461: PUSH
9462: LD_VAR 0 7
9466: PUSH
9467: FOR_IN
9468: IFFALSE 9481
// ComExitBuilding ( i ) ;
9470: LD_VAR 0 6
9474: PPUSH
9475: CALL_OW 122
9479: GO 9467
9481: POP
9482: POP
// if engineerOkOutside > 0 then
9483: LD_VAR 0 8
9487: PUSH
9488: LD_INT 0
9490: GREATER
9491: IFFALSE 9545
// begin for i in engineerOkOutside do
9493: LD_ADDR_VAR 0 6
9497: PUSH
9498: LD_VAR 0 8
9502: PUSH
9503: FOR_IN
9504: IFFALSE 9543
// for j in buildings_list do
9506: LD_ADDR_VAR 0 9
9510: PUSH
9511: LD_VAR 0 5
9515: PUSH
9516: FOR_IN
9517: IFFALSE 9539
// ComRepairBuilding ( i , j [ 1 ] ) ;
9519: LD_VAR 0 6
9523: PPUSH
9524: LD_VAR 0 9
9528: PUSH
9529: LD_INT 1
9531: ARRAY
9532: PPUSH
9533: CALL_OW 130
9537: GO 9516
9539: POP
9540: POP
9541: GO 9503
9543: POP
9544: POP
// end ; if buildings_list = 0 then
9545: LD_VAR 0 5
9549: PUSH
9550: LD_INT 0
9552: EQUAL
9553: IFFALSE 9586
// for i in engineerOkOutside do
9555: LD_ADDR_VAR 0 6
9559: PUSH
9560: LD_VAR 0 8
9564: PUSH
9565: FOR_IN
9566: IFFALSE 9584
// ComEnterUnit ( i , building ) ;
9568: LD_VAR 0 6
9572: PPUSH
9573: LD_VAR 0 2
9577: PPUSH
9578: CALL_OW 120
9582: GO 9565
9584: POP
9585: POP
// end ;
9586: LD_VAR 0 4
9590: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
9591: LD_INT 0
9593: PPUSH
9594: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
9595: LD_INT 22
9597: PUSH
9598: LD_VAR 0 1
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: LD_INT 2
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PPUSH
9621: CALL_OW 69
9625: PUSH
9626: LD_INT 0
9628: GREATER
9629: PUSH
9630: LD_INT 22
9632: PUSH
9633: LD_VAR 0 1
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: PUSH
9642: LD_INT 21
9644: PUSH
9645: LD_INT 3
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 3
9654: PUSH
9655: LD_INT 24
9657: PUSH
9658: LD_INT 1000
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: PPUSH
9674: CALL_OW 69
9678: PUSH
9679: LD_INT 0
9681: EQUAL
9682: AND
9683: PUSH
9684: LD_VAR 0 2
9688: PUSH
9689: LD_INT 0
9691: GREATER
9692: AND
9693: IFFALSE 9792
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
9695: LD_ADDR_VAR 0 4
9699: PUSH
9700: LD_INT 22
9702: PUSH
9703: LD_VAR 0 1
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: PUSH
9712: LD_INT 25
9714: PUSH
9715: LD_INT 2
9717: PUSH
9718: EMPTY
9719: LIST
9720: LIST
9721: PUSH
9722: EMPTY
9723: LIST
9724: LIST
9725: PPUSH
9726: CALL_OW 69
9730: PUSH
9731: FOR_IN
9732: IFFALSE 9790
// begin AddComExitBuilding ( i ) ;
9734: LD_VAR 0 4
9738: PPUSH
9739: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
9743: LD_VAR 0 4
9747: PPUSH
9748: LD_VAR 0 2
9752: PUSH
9753: LD_INT 1
9755: ARRAY
9756: PPUSH
9757: LD_VAR 0 2
9761: PUSH
9762: LD_INT 2
9764: ARRAY
9765: PPUSH
9766: LD_VAR 0 2
9770: PUSH
9771: LD_INT 3
9773: ARRAY
9774: PPUSH
9775: LD_VAR 0 2
9779: PUSH
9780: LD_INT 4
9782: ARRAY
9783: PPUSH
9784: CALL_OW 205
// end ;
9788: GO 9731
9790: POP
9791: POP
// end ; end ;
9792: LD_VAR 0 3
9796: RET
// export function HealUnitInBase ( side , healArea , baseArea ) ; var i , j , scientisticsOutside , scientisticsInside , labs , damageUnits ; begin
9797: LD_INT 0
9799: PPUSH
9800: PPUSH
9801: PPUSH
9802: PPUSH
9803: PPUSH
9804: PPUSH
9805: PPUSH
// labs = FilterAllUnits ( [ [ f_side , side ] , [ f_lives , 251 ] , [ f_or , [ f_btype , b_lab_basic ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
9806: LD_ADDR_VAR 0 9
9810: PUSH
9811: LD_INT 22
9813: PUSH
9814: LD_VAR 0 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 24
9825: PUSH
9826: LD_INT 251
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 30
9838: PUSH
9839: LD_INT 9
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 30
9848: PUSH
9849: LD_INT 7
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 30
9858: PUSH
9859: LD_INT 8
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: EMPTY
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: LIST
9876: PPUSH
9877: CALL_OW 69
9881: ST_TO_ADDR
// scientisticsOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
9882: LD_ADDR_VAR 0 7
9886: PUSH
9887: LD_VAR 0 3
9891: PPUSH
9892: LD_INT 22
9894: PUSH
9895: LD_VAR 0 1
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 25
9906: PUSH
9907: LD_INT 4
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 24
9916: PUSH
9917: LD_INT 251
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 70
9933: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
9934: LD_ADDR_VAR 0 10
9938: PUSH
9939: LD_VAR 0 3
9943: PPUSH
9944: LD_INT 22
9946: PUSH
9947: LD_VAR 0 1
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 21
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: LD_INT 3
9968: PUSH
9969: LD_INT 24
9971: PUSH
9972: LD_INT 750
9974: PUSH
9975: EMPTY
9976: LIST
9977: LIST
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: LIST
9987: PPUSH
9988: CALL_OW 70
9992: ST_TO_ADDR
// if labs > 0 and damageUnits > 0 then
9993: LD_VAR 0 9
9997: PUSH
9998: LD_INT 0
10000: GREATER
10001: PUSH
10002: LD_VAR 0 10
10006: PUSH
10007: LD_INT 0
10009: GREATER
10010: AND
10011: IFFALSE 10045
// for i in labs do
10013: LD_ADDR_VAR 0 5
10017: PUSH
10018: LD_VAR 0 9
10022: PUSH
10023: FOR_IN
10024: IFFALSE 10043
// scientisticsInside = UnitsInside ( i ) ;
10026: LD_ADDR_VAR 0 8
10030: PUSH
10031: LD_VAR 0 5
10035: PPUSH
10036: CALL_OW 313
10040: ST_TO_ADDR
10041: GO 10023
10043: POP
10044: POP
// if labs > 0 and damageUnits > 0 then
10045: LD_VAR 0 9
10049: PUSH
10050: LD_INT 0
10052: GREATER
10053: PUSH
10054: LD_VAR 0 10
10058: PUSH
10059: LD_INT 0
10061: GREATER
10062: AND
10063: IFFALSE 10091
// for i in scientisticsInside do
10065: LD_ADDR_VAR 0 5
10069: PUSH
10070: LD_VAR 0 8
10074: PUSH
10075: FOR_IN
10076: IFFALSE 10089
// ComExitBuilding ( i ) ;
10078: LD_VAR 0 5
10082: PPUSH
10083: CALL_OW 122
10087: GO 10075
10089: POP
10090: POP
// if damageUnits > 0 and scientisticsOutside > 0 then
10091: LD_VAR 0 10
10095: PUSH
10096: LD_INT 0
10098: GREATER
10099: PUSH
10100: LD_VAR 0 7
10104: PUSH
10105: LD_INT 0
10107: GREATER
10108: AND
10109: IFFALSE 10175
// begin ComMoveToArea ( damageUnits , healArea ) ;
10111: LD_VAR 0 10
10115: PPUSH
10116: LD_VAR 0 2
10120: PPUSH
10121: CALL_OW 113
// for i in scientisticsOutside do
10125: LD_ADDR_VAR 0 5
10129: PUSH
10130: LD_VAR 0 7
10134: PUSH
10135: FOR_IN
10136: IFFALSE 10171
// for j in damageUnits do
10138: LD_ADDR_VAR 0 6
10142: PUSH
10143: LD_VAR 0 10
10147: PUSH
10148: FOR_IN
10149: IFFALSE 10167
// AddComHeal ( i , j ) ;
10151: LD_VAR 0 5
10155: PPUSH
10156: LD_VAR 0 6
10160: PPUSH
10161: CALL_OW 188
10165: GO 10148
10167: POP
10168: POP
10169: GO 10135
10171: POP
10172: POP
// end else
10173: GO 10203
// begin ComEnterUnit ( scientisticsOutside , labs [ Rand ( 1 , labs ) ] ) ;
10175: LD_VAR 0 7
10179: PPUSH
10180: LD_VAR 0 9
10184: PUSH
10185: LD_INT 1
10187: PPUSH
10188: LD_VAR 0 9
10192: PPUSH
10193: CALL_OW 12
10197: ARRAY
10198: PPUSH
10199: CALL_OW 120
// end ; end ;
10203: LD_VAR 0 4
10207: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
10208: LD_INT 0
10210: PPUSH
10211: PPUSH
10212: PPUSH
10213: PPUSH
10214: PPUSH
10215: PPUSH
10216: PPUSH
10217: PPUSH
10218: PPUSH
10219: PPUSH
10220: PPUSH
// amChassisTab = [ ] ;
10221: LD_ADDR_VAR 0 19
10225: PUSH
10226: EMPTY
10227: ST_TO_ADDR
// arChassisTab = [ ] ;
10228: LD_ADDR_VAR 0 18
10232: PUSH
10233: EMPTY
10234: ST_TO_ADDR
// ruChassisTab = [ ] ;
10235: LD_ADDR_VAR 0 17
10239: PUSH
10240: EMPTY
10241: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10242: LD_INT 35
10244: PPUSH
10245: CALL_OW 67
// if nation = 1 then
10249: LD_VAR 0 5
10253: PUSH
10254: LD_INT 1
10256: EQUAL
10257: IFFALSE 10748
// begin uc_side = side ;
10259: LD_ADDR_OWVAR 20
10263: PUSH
10264: LD_VAR 0 2
10268: ST_TO_ADDR
// uc_nation = nation ;
10269: LD_ADDR_OWVAR 21
10273: PUSH
10274: LD_VAR 0 5
10278: ST_TO_ADDR
// vc_engine = vehengine ;
10279: LD_ADDR_OWVAR 39
10283: PUSH
10284: LD_VAR 0 6
10288: ST_TO_ADDR
// vc_control = vehcontrol ;
10289: LD_ADDR_OWVAR 38
10293: PUSH
10294: LD_VAR 0 7
10298: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
10299: LD_ADDR_OWVAR 40
10303: PUSH
10304: LD_VAR 0 10
10308: PUSH
10309: LD_INT 1
10311: PPUSH
10312: LD_VAR 0 10
10316: PPUSH
10317: CALL_OW 12
10321: ARRAY
10322: ST_TO_ADDR
// for j = 1 to AMWeapon do
10323: LD_ADDR_VAR 0 14
10327: PUSH
10328: DOUBLE
10329: LD_INT 1
10331: DEC
10332: ST_TO_ADDR
10333: LD_VAR 0 10
10337: PUSH
10338: FOR_TO
10339: IFFALSE 10640
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
10341: LD_VAR 0 10
10345: PUSH
10346: LD_VAR 0 14
10350: ARRAY
10351: PUSH
10352: LD_INT 2
10354: EQUAL
10355: PUSH
10356: LD_VAR 0 10
10360: PUSH
10361: LD_VAR 0 14
10365: ARRAY
10366: PUSH
10367: LD_INT 3
10369: EQUAL
10370: OR
10371: IFFALSE 10424
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
10373: LD_ADDR_VAR 0 19
10377: PUSH
10378: LD_INT 1
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: LD_INT 3
10386: PUSH
10387: LD_INT 4
10389: PUSH
10390: LD_INT 5
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: LIST
10399: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10400: LD_ADDR_OWVAR 37
10404: PUSH
10405: LD_VAR 0 19
10409: PUSH
10410: LD_INT 1
10412: PPUSH
10413: LD_VAR 0 19
10417: PPUSH
10418: CALL_OW 12
10422: ARRAY
10423: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
10424: LD_VAR 0 10
10428: PUSH
10429: LD_VAR 0 14
10433: ARRAY
10434: PUSH
10435: LD_INT 4
10437: EQUAL
10438: PUSH
10439: LD_VAR 0 10
10443: PUSH
10444: LD_VAR 0 14
10448: ARRAY
10449: PUSH
10450: LD_INT 5
10452: EQUAL
10453: OR
10454: PUSH
10455: LD_VAR 0 10
10459: PUSH
10460: LD_VAR 0 14
10464: ARRAY
10465: PUSH
10466: LD_INT 9
10468: EQUAL
10469: OR
10470: PUSH
10471: LD_VAR 0 10
10475: PUSH
10476: LD_VAR 0 14
10480: ARRAY
10481: PUSH
10482: LD_INT 11
10484: EQUAL
10485: OR
10486: PUSH
10487: LD_VAR 0 10
10491: PUSH
10492: LD_VAR 0 14
10496: ARRAY
10497: PUSH
10498: LD_INT 7
10500: EQUAL
10501: OR
10502: IFFALSE 10551
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10504: LD_ADDR_VAR 0 19
10508: PUSH
10509: LD_INT 2
10511: PUSH
10512: LD_INT 3
10514: PUSH
10515: LD_INT 4
10517: PUSH
10518: LD_INT 5
10520: PUSH
10521: EMPTY
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10527: LD_ADDR_OWVAR 37
10531: PUSH
10532: LD_VAR 0 19
10536: PUSH
10537: LD_INT 1
10539: PPUSH
10540: LD_VAR 0 19
10544: PPUSH
10545: CALL_OW 12
10549: ARRAY
10550: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10551: LD_VAR 0 10
10555: PUSH
10556: LD_VAR 0 14
10560: ARRAY
10561: PUSH
10562: LD_INT 8
10564: EQUAL
10565: PUSH
10566: LD_VAR 0 10
10570: PUSH
10571: LD_VAR 0 14
10575: ARRAY
10576: PUSH
10577: LD_INT 6
10579: EQUAL
10580: OR
10581: PUSH
10582: LD_VAR 0 10
10586: PUSH
10587: LD_VAR 0 14
10591: ARRAY
10592: PUSH
10593: LD_INT 10
10595: EQUAL
10596: OR
10597: IFFALSE 10638
// begin amChassisTab = [ 4 , 5 ] ;
10599: LD_ADDR_VAR 0 19
10603: PUSH
10604: LD_INT 4
10606: PUSH
10607: LD_INT 5
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10614: LD_ADDR_OWVAR 37
10618: PUSH
10619: LD_VAR 0 19
10623: PUSH
10624: LD_INT 1
10626: PPUSH
10627: LD_VAR 0 19
10631: PPUSH
10632: CALL_OW 12
10636: ARRAY
10637: ST_TO_ADDR
// end ; end ;
10638: GO 10338
10640: POP
10641: POP
// veh = CreateVehicle ;
10642: LD_ADDR_VAR 0 16
10646: PUSH
10647: CALL_OW 45
10651: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10652: LD_VAR 0 16
10656: PPUSH
10657: LD_VAR 0 1
10661: PPUSH
10662: LD_INT 0
10664: PPUSH
10665: CALL_OW 49
// if vehControl = 1 then
10669: LD_VAR 0 7
10673: PUSH
10674: LD_INT 1
10676: EQUAL
10677: IFFALSE 10734
// begin hc_gallery =  ;
10679: LD_ADDR_OWVAR 33
10683: PUSH
10684: LD_STRING 
10686: ST_TO_ADDR
// hc_name =  ;
10687: LD_ADDR_OWVAR 26
10691: PUSH
10692: LD_STRING 
10694: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10695: LD_INT 0
10697: PPUSH
10698: LD_INT 3
10700: PPUSH
10701: LD_VAR 0 4
10705: PPUSH
10706: CALL_OW 380
// un = CreateHuman ;
10710: LD_ADDR_VAR 0 15
10714: PUSH
10715: CALL_OW 44
10719: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10720: LD_VAR 0 15
10724: PPUSH
10725: LD_VAR 0 16
10729: PPUSH
10730: CALL_OW 52
// end ; i = i + 1 ;
10734: LD_ADDR_VAR 0 13
10738: PUSH
10739: LD_VAR 0 13
10743: PUSH
10744: LD_INT 1
10746: PLUS
10747: ST_TO_ADDR
// end ; if nation = 2 then
10748: LD_VAR 0 5
10752: PUSH
10753: LD_INT 2
10755: EQUAL
10756: IFFALSE 11180
// begin uc_side = side ;
10758: LD_ADDR_OWVAR 20
10762: PUSH
10763: LD_VAR 0 2
10767: ST_TO_ADDR
// uc_nation = nation ;
10768: LD_ADDR_OWVAR 21
10772: PUSH
10773: LD_VAR 0 5
10777: ST_TO_ADDR
// vc_engine = vehengine ;
10778: LD_ADDR_OWVAR 39
10782: PUSH
10783: LD_VAR 0 6
10787: ST_TO_ADDR
// vc_control = vehcontrol ;
10788: LD_ADDR_OWVAR 38
10792: PUSH
10793: LD_VAR 0 7
10797: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10798: LD_ADDR_OWVAR 40
10802: PUSH
10803: LD_VAR 0 9
10807: PUSH
10808: LD_INT 1
10810: PPUSH
10811: LD_VAR 0 9
10815: PPUSH
10816: CALL_OW 12
10820: ARRAY
10821: ST_TO_ADDR
// for j = 1 to ARWeapons do
10822: LD_ADDR_VAR 0 14
10826: PUSH
10827: DOUBLE
10828: LD_INT 1
10830: DEC
10831: ST_TO_ADDR
10832: LD_VAR 0 9
10836: PUSH
10837: FOR_TO
10838: IFFALSE 11072
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10840: LD_VAR 0 9
10844: PUSH
10845: LD_VAR 0 14
10849: ARRAY
10850: PUSH
10851: LD_INT 24
10853: EQUAL
10854: PUSH
10855: LD_VAR 0 9
10859: PUSH
10860: LD_VAR 0 14
10864: ARRAY
10865: PUSH
10866: LD_INT 22
10868: EQUAL
10869: OR
10870: PUSH
10871: LD_VAR 0 9
10875: PUSH
10876: LD_VAR 0 14
10880: ARRAY
10881: PUSH
10882: LD_INT 23
10884: EQUAL
10885: OR
10886: PUSH
10887: LD_VAR 0 9
10891: PUSH
10892: LD_VAR 0 14
10896: ARRAY
10897: PUSH
10898: LD_INT 30
10900: EQUAL
10901: OR
10902: IFFALSE 10951
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10904: LD_ADDR_VAR 0 18
10908: PUSH
10909: LD_INT 11
10911: PUSH
10912: LD_INT 12
10914: PUSH
10915: LD_INT 13
10917: PUSH
10918: LD_INT 14
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10927: LD_ADDR_OWVAR 37
10931: PUSH
10932: LD_VAR 0 18
10936: PUSH
10937: LD_INT 1
10939: PPUSH
10940: LD_VAR 0 18
10944: PPUSH
10945: CALL_OW 12
10949: ARRAY
10950: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10951: LD_VAR 0 9
10955: PUSH
10956: LD_VAR 0 14
10960: ARRAY
10961: PUSH
10962: LD_INT 29
10964: EQUAL
10965: PUSH
10966: LD_VAR 0 9
10970: PUSH
10971: LD_VAR 0 14
10975: ARRAY
10976: PUSH
10977: LD_INT 28
10979: EQUAL
10980: OR
10981: PUSH
10982: LD_VAR 0 9
10986: PUSH
10987: LD_VAR 0 14
10991: ARRAY
10992: PUSH
10993: LD_INT 27
10995: EQUAL
10996: OR
10997: PUSH
10998: LD_VAR 0 9
11002: PUSH
11003: LD_VAR 0 14
11007: ARRAY
11008: PUSH
11009: LD_INT 26
11011: EQUAL
11012: OR
11013: PUSH
11014: LD_VAR 0 9
11018: PUSH
11019: LD_VAR 0 14
11023: ARRAY
11024: PUSH
11025: LD_INT 25
11027: EQUAL
11028: OR
11029: IFFALSE 11070
// begin arChassisTab = [ 13 , 14 ] ;
11031: LD_ADDR_VAR 0 18
11035: PUSH
11036: LD_INT 13
11038: PUSH
11039: LD_INT 14
11041: PUSH
11042: EMPTY
11043: LIST
11044: LIST
11045: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
11046: LD_ADDR_OWVAR 37
11050: PUSH
11051: LD_VAR 0 18
11055: PUSH
11056: LD_INT 1
11058: PPUSH
11059: LD_VAR 0 18
11063: PPUSH
11064: CALL_OW 12
11068: ARRAY
11069: ST_TO_ADDR
// end ; end ;
11070: GO 10837
11072: POP
11073: POP
// veh = CreateVehicle ;
11074: LD_ADDR_VAR 0 16
11078: PUSH
11079: CALL_OW 45
11083: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11084: LD_VAR 0 16
11088: PPUSH
11089: LD_VAR 0 1
11093: PPUSH
11094: LD_INT 0
11096: PPUSH
11097: CALL_OW 49
// if vehcontrol = 1 then
11101: LD_VAR 0 7
11105: PUSH
11106: LD_INT 1
11108: EQUAL
11109: IFFALSE 11166
// begin hc_gallery =  ;
11111: LD_ADDR_OWVAR 33
11115: PUSH
11116: LD_STRING 
11118: ST_TO_ADDR
// hc_name =  ;
11119: LD_ADDR_OWVAR 26
11123: PUSH
11124: LD_STRING 
11126: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11127: LD_INT 0
11129: PPUSH
11130: LD_INT 3
11132: PPUSH
11133: LD_VAR 0 4
11137: PPUSH
11138: CALL_OW 380
// un = CreateHuman ;
11142: LD_ADDR_VAR 0 15
11146: PUSH
11147: CALL_OW 44
11151: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11152: LD_VAR 0 15
11156: PPUSH
11157: LD_VAR 0 16
11161: PPUSH
11162: CALL_OW 52
// end ; i = i + 1 ;
11166: LD_ADDR_VAR 0 13
11170: PUSH
11171: LD_VAR 0 13
11175: PUSH
11176: LD_INT 1
11178: PLUS
11179: ST_TO_ADDR
// end ; if nation = 3 then
11180: LD_VAR 0 5
11184: PUSH
11185: LD_INT 3
11187: EQUAL
11188: IFFALSE 11580
// begin uc_side = side ;
11190: LD_ADDR_OWVAR 20
11194: PUSH
11195: LD_VAR 0 2
11199: ST_TO_ADDR
// uc_nation = nation ;
11200: LD_ADDR_OWVAR 21
11204: PUSH
11205: LD_VAR 0 5
11209: ST_TO_ADDR
// vc_engine = vehengine ;
11210: LD_ADDR_OWVAR 39
11214: PUSH
11215: LD_VAR 0 6
11219: ST_TO_ADDR
// vc_control = vehcontrol ;
11220: LD_ADDR_OWVAR 38
11224: PUSH
11225: LD_VAR 0 7
11229: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
11230: LD_ADDR_OWVAR 40
11234: PUSH
11235: LD_VAR 0 8
11239: PUSH
11240: LD_INT 1
11242: PPUSH
11243: LD_VAR 0 8
11247: PPUSH
11248: CALL_OW 12
11252: ARRAY
11253: ST_TO_ADDR
// for j = 1 to RuWeapons do
11254: LD_ADDR_VAR 0 14
11258: PUSH
11259: DOUBLE
11260: LD_INT 1
11262: DEC
11263: ST_TO_ADDR
11264: LD_VAR 0 8
11268: PUSH
11269: FOR_TO
11270: IFFALSE 11472
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
11272: LD_VAR 0 8
11276: PUSH
11277: LD_VAR 0 14
11281: ARRAY
11282: PUSH
11283: LD_INT 42
11285: EQUAL
11286: PUSH
11287: LD_VAR 0 8
11291: PUSH
11292: LD_VAR 0 14
11296: ARRAY
11297: PUSH
11298: LD_INT 43
11300: EQUAL
11301: OR
11302: PUSH
11303: LD_VAR 0 8
11307: PUSH
11308: LD_VAR 0 14
11312: ARRAY
11313: PUSH
11314: LD_INT 44
11316: EQUAL
11317: OR
11318: PUSH
11319: LD_VAR 0 8
11323: PUSH
11324: LD_VAR 0 14
11328: ARRAY
11329: PUSH
11330: LD_INT 45
11332: EQUAL
11333: OR
11334: PUSH
11335: LD_VAR 0 8
11339: PUSH
11340: LD_VAR 0 14
11344: ARRAY
11345: PUSH
11346: LD_INT 49
11348: EQUAL
11349: OR
11350: IFFALSE 11399
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
11352: LD_ADDR_VAR 0 17
11356: PUSH
11357: LD_INT 21
11359: PUSH
11360: LD_INT 22
11362: PUSH
11363: LD_INT 23
11365: PUSH
11366: LD_INT 24
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
11375: LD_ADDR_OWVAR 37
11379: PUSH
11380: LD_VAR 0 17
11384: PUSH
11385: LD_INT 1
11387: PPUSH
11388: LD_VAR 0 17
11392: PPUSH
11393: CALL_OW 12
11397: ARRAY
11398: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
11399: LD_VAR 0 8
11403: PUSH
11404: LD_VAR 0 14
11408: ARRAY
11409: PUSH
11410: LD_INT 46
11412: EQUAL
11413: PUSH
11414: LD_VAR 0 8
11418: PUSH
11419: LD_VAR 0 14
11423: ARRAY
11424: PUSH
11425: LD_INT 47
11427: EQUAL
11428: OR
11429: IFFALSE 11470
// begin ruChassisTab = [ 23 , 24 ] ;
11431: LD_ADDR_VAR 0 17
11435: PUSH
11436: LD_INT 23
11438: PUSH
11439: LD_INT 24
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
11446: LD_ADDR_OWVAR 37
11450: PUSH
11451: LD_VAR 0 17
11455: PUSH
11456: LD_INT 1
11458: PPUSH
11459: LD_VAR 0 17
11463: PPUSH
11464: CALL_OW 12
11468: ARRAY
11469: ST_TO_ADDR
// end ; end ;
11470: GO 11269
11472: POP
11473: POP
// veh = CreateVehicle ;
11474: LD_ADDR_VAR 0 16
11478: PUSH
11479: CALL_OW 45
11483: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
11484: LD_VAR 0 16
11488: PPUSH
11489: LD_VAR 0 1
11493: PPUSH
11494: LD_INT 0
11496: PPUSH
11497: CALL_OW 49
// if vehcontrol = 1 then
11501: LD_VAR 0 7
11505: PUSH
11506: LD_INT 1
11508: EQUAL
11509: IFFALSE 11566
// begin hc_gallery =  ;
11511: LD_ADDR_OWVAR 33
11515: PUSH
11516: LD_STRING 
11518: ST_TO_ADDR
// hc_name =  ;
11519: LD_ADDR_OWVAR 26
11523: PUSH
11524: LD_STRING 
11526: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11527: LD_INT 0
11529: PPUSH
11530: LD_INT 3
11532: PPUSH
11533: LD_VAR 0 4
11537: PPUSH
11538: CALL_OW 380
// un = CreateHuman ;
11542: LD_ADDR_VAR 0 15
11546: PUSH
11547: CALL_OW 44
11551: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11552: LD_VAR 0 15
11556: PPUSH
11557: LD_VAR 0 16
11561: PPUSH
11562: CALL_OW 52
// end ; i = i + 1 ;
11566: LD_ADDR_VAR 0 13
11570: PUSH
11571: LD_VAR 0 13
11575: PUSH
11576: LD_INT 1
11578: PLUS
11579: ST_TO_ADDR
// end ; until i = vehCount ;
11580: LD_VAR 0 13
11584: PUSH
11585: LD_VAR 0 3
11589: EQUAL
11590: IFFALSE 10242
// repeat wait ( 0 0$1 ) ;
11592: LD_INT 35
11594: PPUSH
11595: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
11599: LD_ADDR_VAR 0 20
11603: PUSH
11604: LD_INT 22
11606: PUSH
11607: LD_VAR 0 2
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: PUSH
11616: LD_INT 21
11618: PUSH
11619: LD_INT 2
11621: PUSH
11622: EMPTY
11623: LIST
11624: LIST
11625: PUSH
11626: LD_INT 24
11628: PUSH
11629: LD_INT 650
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: PPUSH
11641: CALL_OW 69
11645: ST_TO_ADDR
// if vehicleOK_list > 0 then
11646: LD_VAR 0 20
11650: PUSH
11651: LD_INT 0
11653: GREATER
11654: IFFALSE 11845
// begin for i in vehicleOK_list do
11656: LD_ADDR_VAR 0 13
11660: PUSH
11661: LD_VAR 0 20
11665: PUSH
11666: FOR_IN
11667: IFFALSE 11843
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11669: LD_ADDR_VAR 0 21
11673: PUSH
11674: LD_INT 22
11676: PUSH
11677: LD_VAR 0 11
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 69
11690: PPUSH
11691: LD_VAR 0 13
11695: PPUSH
11696: CALL_OW 74
11700: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11701: LD_ADDR_VAR 0 22
11705: PUSH
11706: LD_INT 22
11708: PUSH
11709: LD_VAR 0 11
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 2
11720: PUSH
11721: LD_INT 59
11723: PUSH
11724: EMPTY
11725: LIST
11726: PUSH
11727: LD_INT 21
11729: PUSH
11730: LD_INT 1
11732: PUSH
11733: EMPTY
11734: LIST
11735: LIST
11736: PUSH
11737: LD_INT 21
11739: PUSH
11740: LD_INT 2
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PUSH
11757: EMPTY
11758: LIST
11759: PPUSH
11760: CALL_OW 69
11764: PPUSH
11765: LD_VAR 0 13
11769: PPUSH
11770: CALL_OW 74
11774: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11775: LD_VAR 0 13
11779: PPUSH
11780: LD_VAR 0 21
11784: PPUSH
11785: CALL_OW 296
11789: PUSH
11790: LD_INT 8
11792: PLUS
11793: PUSH
11794: LD_VAR 0 13
11798: PPUSH
11799: LD_VAR 0 22
11803: PPUSH
11804: CALL_OW 296
11808: LESS
11809: IFFALSE 11827
// begin ComAttackUnit ( i , target1 ) ;
11811: LD_VAR 0 13
11815: PPUSH
11816: LD_VAR 0 21
11820: PPUSH
11821: CALL_OW 115
// end else
11825: GO 11841
// begin ComAttackUnit ( i , target2 ) ;
11827: LD_VAR 0 13
11831: PPUSH
11832: LD_VAR 0 22
11836: PPUSH
11837: CALL_OW 115
// end ; end ;
11841: GO 11666
11843: POP
11844: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
11845: LD_INT 22
11847: PUSH
11848: LD_VAR 0 2
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 21
11859: PUSH
11860: LD_INT 2
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PPUSH
11871: CALL_OW 69
11875: PUSH
11876: LD_INT 0
11878: EQUAL
11879: IFFALSE 11592
// end ;
11881: LD_VAR 0 12
11885: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
11886: LD_INT 0
11888: PPUSH
11889: PPUSH
11890: PPUSH
11891: PPUSH
11892: PPUSH
11893: PPUSH
11894: PPUSH
11895: PPUSH
11896: PPUSH
11897: PPUSH
11898: PPUSH
// for i = 1 to medicCount do
11899: LD_ADDR_VAR 0 13
11903: PUSH
11904: DOUBLE
11905: LD_INT 1
11907: DEC
11908: ST_TO_ADDR
11909: LD_VAR 0 7
11913: PUSH
11914: FOR_TO
11915: IFFALSE 11997
// begin uc_side = side ;
11917: LD_ADDR_OWVAR 20
11921: PUSH
11922: LD_VAR 0 1
11926: ST_TO_ADDR
// uc_nation = nation ;
11927: LD_ADDR_OWVAR 21
11931: PUSH
11932: LD_VAR 0 2
11936: ST_TO_ADDR
// hc_name =  ;
11937: LD_ADDR_OWVAR 26
11941: PUSH
11942: LD_STRING 
11944: ST_TO_ADDR
// hc_gallery =  ;
11945: LD_ADDR_OWVAR 33
11949: PUSH
11950: LD_STRING 
11952: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
11953: LD_INT 0
11955: PPUSH
11956: LD_INT 4
11958: PPUSH
11959: LD_VAR 0 8
11963: PPUSH
11964: CALL_OW 380
// un = CreateHuman ;
11968: LD_ADDR_VAR 0 15
11972: PUSH
11973: CALL_OW 44
11977: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
11978: LD_VAR 0 15
11982: PPUSH
11983: LD_VAR 0 9
11987: PPUSH
11988: LD_INT 0
11990: PPUSH
11991: CALL_OW 49
// end ;
11995: GO 11914
11997: POP
11998: POP
// for i = 1 to soldierCount do
11999: LD_ADDR_VAR 0 13
12003: PUSH
12004: DOUBLE
12005: LD_INT 1
12007: DEC
12008: ST_TO_ADDR
12009: LD_VAR 0 3
12013: PUSH
12014: FOR_TO
12015: IFFALSE 12097
// begin uc_side = side ;
12017: LD_ADDR_OWVAR 20
12021: PUSH
12022: LD_VAR 0 1
12026: ST_TO_ADDR
// uc_nation = nation ;
12027: LD_ADDR_OWVAR 21
12031: PUSH
12032: LD_VAR 0 2
12036: ST_TO_ADDR
// hc_name =  ;
12037: LD_ADDR_OWVAR 26
12041: PUSH
12042: LD_STRING 
12044: ST_TO_ADDR
// hc_gallery =  ;
12045: LD_ADDR_OWVAR 33
12049: PUSH
12050: LD_STRING 
12052: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
12053: LD_INT 0
12055: PPUSH
12056: LD_INT 1
12058: PPUSH
12059: LD_VAR 0 8
12063: PPUSH
12064: CALL_OW 380
// un = CreateHuman ;
12068: LD_ADDR_VAR 0 15
12072: PUSH
12073: CALL_OW 44
12077: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12078: LD_VAR 0 15
12082: PPUSH
12083: LD_VAR 0 9
12087: PPUSH
12088: LD_INT 0
12090: PPUSH
12091: CALL_OW 49
// end ;
12095: GO 12014
12097: POP
12098: POP
// for i = 1 to sniperCount do
12099: LD_ADDR_VAR 0 13
12103: PUSH
12104: DOUBLE
12105: LD_INT 1
12107: DEC
12108: ST_TO_ADDR
12109: LD_VAR 0 4
12113: PUSH
12114: FOR_TO
12115: IFFALSE 12197
// begin uc_side = side ;
12117: LD_ADDR_OWVAR 20
12121: PUSH
12122: LD_VAR 0 1
12126: ST_TO_ADDR
// uc_nation = nation ;
12127: LD_ADDR_OWVAR 21
12131: PUSH
12132: LD_VAR 0 2
12136: ST_TO_ADDR
// hc_name =  ;
12137: LD_ADDR_OWVAR 26
12141: PUSH
12142: LD_STRING 
12144: ST_TO_ADDR
// hc_gallery =  ;
12145: LD_ADDR_OWVAR 33
12149: PUSH
12150: LD_STRING 
12152: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
12153: LD_INT 0
12155: PPUSH
12156: LD_INT 5
12158: PPUSH
12159: LD_VAR 0 8
12163: PPUSH
12164: CALL_OW 380
// un = CreateHuman ;
12168: LD_ADDR_VAR 0 15
12172: PUSH
12173: CALL_OW 44
12177: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12178: LD_VAR 0 15
12182: PPUSH
12183: LD_VAR 0 9
12187: PPUSH
12188: LD_INT 0
12190: PPUSH
12191: CALL_OW 49
// end ;
12195: GO 12114
12197: POP
12198: POP
// for i = 1 to bazookCount do
12199: LD_ADDR_VAR 0 13
12203: PUSH
12204: DOUBLE
12205: LD_INT 1
12207: DEC
12208: ST_TO_ADDR
12209: LD_VAR 0 5
12213: PUSH
12214: FOR_TO
12215: IFFALSE 12297
// begin uc_side = side ;
12217: LD_ADDR_OWVAR 20
12221: PUSH
12222: LD_VAR 0 1
12226: ST_TO_ADDR
// uc_nation = nation ;
12227: LD_ADDR_OWVAR 21
12231: PUSH
12232: LD_VAR 0 2
12236: ST_TO_ADDR
// hc_name =  ;
12237: LD_ADDR_OWVAR 26
12241: PUSH
12242: LD_STRING 
12244: ST_TO_ADDR
// hc_gallery =  ;
12245: LD_ADDR_OWVAR 33
12249: PUSH
12250: LD_STRING 
12252: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
12253: LD_INT 0
12255: PPUSH
12256: LD_INT 9
12258: PPUSH
12259: LD_VAR 0 8
12263: PPUSH
12264: CALL_OW 380
// un = CreateHuman ;
12268: LD_ADDR_VAR 0 15
12272: PUSH
12273: CALL_OW 44
12277: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12278: LD_VAR 0 15
12282: PPUSH
12283: LD_VAR 0 9
12287: PPUSH
12288: LD_INT 0
12290: PPUSH
12291: CALL_OW 49
// end ;
12295: GO 12214
12297: POP
12298: POP
// for i = 1 to mortalCount do
12299: LD_ADDR_VAR 0 13
12303: PUSH
12304: DOUBLE
12305: LD_INT 1
12307: DEC
12308: ST_TO_ADDR
12309: LD_VAR 0 6
12313: PUSH
12314: FOR_TO
12315: IFFALSE 12397
// begin uc_side = side ;
12317: LD_ADDR_OWVAR 20
12321: PUSH
12322: LD_VAR 0 1
12326: ST_TO_ADDR
// uc_nation = nation ;
12327: LD_ADDR_OWVAR 21
12331: PUSH
12332: LD_VAR 0 2
12336: ST_TO_ADDR
// hc_name =  ;
12337: LD_ADDR_OWVAR 26
12341: PUSH
12342: LD_STRING 
12344: ST_TO_ADDR
// hc_gallery =  ;
12345: LD_ADDR_OWVAR 33
12349: PUSH
12350: LD_STRING 
12352: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
12353: LD_INT 0
12355: PPUSH
12356: LD_INT 8
12358: PPUSH
12359: LD_VAR 0 8
12363: PPUSH
12364: CALL_OW 380
// un = CreateHuman ;
12368: LD_ADDR_VAR 0 15
12372: PUSH
12373: CALL_OW 44
12377: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
12378: LD_VAR 0 15
12382: PPUSH
12383: LD_VAR 0 9
12387: PPUSH
12388: LD_INT 0
12390: PPUSH
12391: CALL_OW 49
// end ;
12395: GO 12314
12397: POP
12398: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
12399: LD_ADDR_VAR 0 18
12403: PUSH
12404: LD_INT 22
12406: PUSH
12407: LD_VAR 0 1
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 2
12418: PUSH
12419: LD_INT 25
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 25
12431: PUSH
12432: LD_INT 5
12434: PUSH
12435: EMPTY
12436: LIST
12437: LIST
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: LD_INT 8
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: PUSH
12449: LD_INT 25
12451: PUSH
12452: LD_INT 9
12454: PUSH
12455: EMPTY
12456: LIST
12457: LIST
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
12475: LD_ADDR_VAR 0 17
12479: PUSH
12480: LD_INT 22
12482: PUSH
12483: LD_VAR 0 1
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 25
12494: PUSH
12495: LD_INT 4
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PPUSH
12506: CALL_OW 69
12510: ST_TO_ADDR
// for i in medic_list do
12511: LD_ADDR_VAR 0 13
12515: PUSH
12516: LD_VAR 0 17
12520: PUSH
12521: FOR_IN
12522: IFFALSE 12540
// ComMoveToArea ( i , healArea ) ;
12524: LD_VAR 0 13
12528: PPUSH
12529: LD_VAR 0 10
12533: PPUSH
12534: CALL_OW 113
12538: GO 12521
12540: POP
12541: POP
// repeat wait ( 0 0$1 ) ;
12542: LD_INT 35
12544: PPUSH
12545: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
12549: LD_ADDR_VAR 0 16
12553: PUSH
12554: LD_INT 22
12556: PUSH
12557: LD_VAR 0 1
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 1
12568: PUSH
12569: LD_INT 3
12571: PUSH
12572: LD_INT 24
12574: PUSH
12575: LD_INT 550
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 24
12588: PUSH
12589: LD_INT 250
12591: PUSH
12592: EMPTY
12593: LIST
12594: LIST
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
12610: LD_ADDR_VAR 0 18
12614: PUSH
12615: LD_INT 22
12617: PUSH
12618: LD_VAR 0 1
12622: PUSH
12623: EMPTY
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 2
12629: PUSH
12630: LD_INT 25
12632: PUSH
12633: LD_INT 1
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 25
12642: PUSH
12643: LD_INT 5
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 25
12652: PUSH
12653: LD_INT 8
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 25
12662: PUSH
12663: LD_INT 9
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: PUSH
12677: LD_INT 24
12679: PUSH
12680: LD_INT 1000
12682: PUSH
12683: EMPTY
12684: LIST
12685: LIST
12686: PUSH
12687: EMPTY
12688: LIST
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 69
12696: ST_TO_ADDR
// if medicCount > 0 then
12697: LD_VAR 0 7
12701: PUSH
12702: LD_INT 0
12704: GREATER
12705: IFFALSE 12779
// begin if damageUnit_list > 0 then
12707: LD_VAR 0 16
12711: PUSH
12712: LD_INT 0
12714: GREATER
12715: IFFALSE 12779
// begin for i in damageUnit_list do
12717: LD_ADDR_VAR 0 13
12721: PUSH
12722: LD_VAR 0 16
12726: PUSH
12727: FOR_IN
12728: IFFALSE 12777
// begin ComMoveToArea ( i , healArea ) ;
12730: LD_VAR 0 13
12734: PPUSH
12735: LD_VAR 0 10
12739: PPUSH
12740: CALL_OW 113
// for j in medic_list do
12744: LD_ADDR_VAR 0 14
12748: PUSH
12749: LD_VAR 0 17
12753: PUSH
12754: FOR_IN
12755: IFFALSE 12773
// AddComHeal ( j , i ) ;
12757: LD_VAR 0 14
12761: PPUSH
12762: LD_VAR 0 13
12766: PPUSH
12767: CALL_OW 188
12771: GO 12754
12773: POP
12774: POP
// end ;
12775: GO 12727
12777: POP
12778: POP
// end ; end ; for i in soldiersOK_list do
12779: LD_ADDR_VAR 0 13
12783: PUSH
12784: LD_VAR 0 18
12788: PUSH
12789: FOR_IN
12790: IFFALSE 12966
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12792: LD_ADDR_VAR 0 21
12796: PUSH
12797: LD_INT 22
12799: PUSH
12800: LD_VAR 0 11
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PPUSH
12809: CALL_OW 69
12813: PPUSH
12814: LD_VAR 0 13
12818: PPUSH
12819: CALL_OW 74
12823: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
12824: LD_ADDR_VAR 0 22
12828: PUSH
12829: LD_INT 22
12831: PUSH
12832: LD_VAR 0 11
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 2
12843: PUSH
12844: LD_INT 59
12846: PUSH
12847: EMPTY
12848: LIST
12849: PUSH
12850: LD_INT 21
12852: PUSH
12853: LD_INT 1
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: LD_INT 21
12862: PUSH
12863: LD_INT 2
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: PUSH
12870: EMPTY
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: PPUSH
12883: CALL_OW 69
12887: PPUSH
12888: LD_VAR 0 13
12892: PPUSH
12893: CALL_OW 74
12897: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
12898: LD_VAR 0 13
12902: PPUSH
12903: LD_VAR 0 21
12907: PPUSH
12908: CALL_OW 296
12912: PUSH
12913: LD_INT 8
12915: PLUS
12916: PUSH
12917: LD_VAR 0 13
12921: PPUSH
12922: LD_VAR 0 22
12926: PPUSH
12927: CALL_OW 296
12931: LESS
12932: IFFALSE 12950
// begin ComAttackUnit ( i , target1 ) ;
12934: LD_VAR 0 13
12938: PPUSH
12939: LD_VAR 0 21
12943: PPUSH
12944: CALL_OW 115
// end else
12948: GO 12964
// begin ComAttackUnit ( i , target2 ) ;
12950: LD_VAR 0 13
12954: PPUSH
12955: LD_VAR 0 22
12959: PPUSH
12960: CALL_OW 115
// end ; end ;
12964: GO 12789
12966: POP
12967: POP
// for i in soldiersOK_list do
12968: LD_ADDR_VAR 0 13
12972: PUSH
12973: LD_VAR 0 18
12977: PUSH
12978: FOR_IN
12979: IFFALSE 13155
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
12981: LD_ADDR_VAR 0 21
12985: PUSH
12986: LD_INT 22
12988: PUSH
12989: LD_VAR 0 11
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: PPUSH
12998: CALL_OW 69
13002: PPUSH
13003: LD_VAR 0 13
13007: PPUSH
13008: CALL_OW 74
13012: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
13013: LD_ADDR_VAR 0 22
13017: PUSH
13018: LD_INT 22
13020: PUSH
13021: LD_VAR 0 11
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: LD_INT 2
13032: PUSH
13033: LD_INT 59
13035: PUSH
13036: EMPTY
13037: LIST
13038: PUSH
13039: LD_INT 21
13041: PUSH
13042: LD_INT 1
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: PUSH
13049: LD_INT 21
13051: PUSH
13052: LD_INT 2
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: LIST
13063: LIST
13064: PUSH
13065: EMPTY
13066: LIST
13067: LIST
13068: PUSH
13069: EMPTY
13070: LIST
13071: PPUSH
13072: CALL_OW 69
13076: PPUSH
13077: LD_VAR 0 13
13081: PPUSH
13082: CALL_OW 74
13086: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
13087: LD_VAR 0 13
13091: PPUSH
13092: LD_VAR 0 21
13096: PPUSH
13097: CALL_OW 296
13101: PUSH
13102: LD_INT 8
13104: PLUS
13105: PUSH
13106: LD_VAR 0 13
13110: PPUSH
13111: LD_VAR 0 22
13115: PPUSH
13116: CALL_OW 296
13120: LESS
13121: IFFALSE 13139
// begin ComAttackUnit ( i , target1 ) ;
13123: LD_VAR 0 13
13127: PPUSH
13128: LD_VAR 0 21
13132: PPUSH
13133: CALL_OW 115
// end else
13137: GO 13153
// begin ComAttackUnit ( i , target2 ) ;
13139: LD_VAR 0 13
13143: PPUSH
13144: LD_VAR 0 22
13148: PPUSH
13149: CALL_OW 115
// end ; end ;
13153: GO 12978
13155: POP
13156: POP
// until soldiersOK_list = [ ] ;
13157: LD_VAR 0 18
13161: PUSH
13162: EMPTY
13163: EQUAL
13164: IFFALSE 12542
// end ;
13166: LD_VAR 0 12
13170: RET
// export function TameApemans ; var i , j ; begin
13171: LD_INT 0
13173: PPUSH
13174: PPUSH
13175: PPUSH
// repeat wait ( 0 0$1 ) ;
13176: LD_INT 35
13178: PPUSH
13179: CALL_OW 67
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
13183: LD_ADDR_VAR 0 2
13187: PUSH
13188: LD_INT 22
13190: PUSH
13191: LD_INT 2
13193: PUSH
13194: EMPTY
13195: LIST
13196: LIST
13197: PUSH
13198: LD_INT 25
13200: PUSH
13201: LD_INT 4
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: PPUSH
13212: CALL_OW 69
13216: PUSH
13217: FOR_IN
13218: IFFALSE 13295
// begin for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
13220: LD_ADDR_VAR 0 3
13224: PUSH
13225: LD_INT 5
13227: PPUSH
13228: LD_INT 22
13230: PUSH
13231: LD_INT 0
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: PUSH
13238: LD_INT 25
13240: PUSH
13241: LD_INT 12
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: PPUSH
13252: CALL_OW 70
13256: PUSH
13257: FOR_IN
13258: IFFALSE 13291
// begin AddComTameXY ( i , GetX ( j ) , GetY ( j ) ) ;
13260: LD_VAR 0 2
13264: PPUSH
13265: LD_VAR 0 3
13269: PPUSH
13270: CALL_OW 250
13274: PPUSH
13275: LD_VAR 0 3
13279: PPUSH
13280: CALL_OW 251
13284: PPUSH
13285: CALL_OW 191
// end ;
13289: GO 13257
13291: POP
13292: POP
// end ;
13293: GO 13217
13295: POP
13296: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) = 0 ;
13297: LD_INT 22
13299: PUSH
13300: LD_INT 2
13302: PUSH
13303: EMPTY
13304: LIST
13305: LIST
13306: PUSH
13307: LD_INT 25
13309: PUSH
13310: LD_INT 4
13312: PUSH
13313: EMPTY
13314: LIST
13315: LIST
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: PPUSH
13321: CALL_OW 69
13325: PUSH
13326: LD_INT 0
13328: EQUAL
13329: PUSH
13330: LD_INT 5
13332: PPUSH
13333: LD_INT 22
13335: PUSH
13336: LD_INT 0
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PUSH
13343: LD_INT 25
13345: PUSH
13346: LD_INT 12
13348: PUSH
13349: EMPTY
13350: LIST
13351: LIST
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PPUSH
13357: CALL_OW 70
13361: PUSH
13362: LD_INT 0
13364: EQUAL
13365: OR
13366: IFFALSE 13176
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
13368: LD_ADDR_VAR 0 2
13372: PUSH
13373: LD_INT 22
13375: PUSH
13376: LD_INT 2
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 25
13385: PUSH
13386: LD_INT 12
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: PUSH
13393: EMPTY
13394: LIST
13395: LIST
13396: PPUSH
13397: CALL_OW 69
13401: PUSH
13402: FOR_IN
13403: IFFALSE 13438
// SetClass ( i , [ 16 , 15 ] [ Rand ( 1 , 2 ) ] ) ;
13405: LD_VAR 0 2
13409: PPUSH
13410: LD_INT 16
13412: PUSH
13413: LD_INT 15
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PUSH
13420: LD_INT 1
13422: PPUSH
13423: LD_INT 2
13425: PPUSH
13426: CALL_OW 12
13430: ARRAY
13431: PPUSH
13432: CALL_OW 336
13436: GO 13402
13438: POP
13439: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
13440: LD_ADDR_VAR 0 2
13444: PUSH
13445: LD_INT 22
13447: PUSH
13448: LD_INT 2
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 25
13457: PUSH
13458: LD_INT 4
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PPUSH
13469: CALL_OW 69
13473: PUSH
13474: FOR_IN
13475: IFFALSE 13493
// ComEnterUnit ( i , arLab ) ;
13477: LD_VAR 0 2
13481: PPUSH
13482: LD_EXP 32
13486: PPUSH
13487: CALL_OW 120
13491: GO 13474
13493: POP
13494: POP
// end ; end_of_file
13495: LD_VAR 0 1
13499: RET
// every 0 0$1 trigger activateRUAI = 1 do
13500: LD_EXP 30
13504: PUSH
13505: LD_INT 1
13507: EQUAL
13508: IFFALSE 13534
13510: GO 13512
13512: DISABLE
// begin enable ;
13513: ENABLE
// IntBazooka ( 3 , 1 ) ;
13514: LD_INT 3
13516: PPUSH
13517: LD_INT 1
13519: PPUSH
13520: CALL 8623 0 2
// IntBazooka ( 6 , 1 ) ;
13524: LD_INT 6
13526: PPUSH
13527: LD_INT 1
13529: PPUSH
13530: CALL 8623 0 2
// end ; end_of_file
13534: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
13535: LD_VAR 0 1
13539: PPUSH
13540: CALL_OW 255
13544: PUSH
13545: LD_INT 4
13547: EQUAL
13548: IFFALSE 13562
// SetBName ( building , epsilon ) ;
13550: LD_VAR 0 1
13554: PPUSH
13555: LD_STRING epsilon
13557: PPUSH
13558: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
13562: LD_VAR 0 1
13566: PPUSH
13567: CALL_OW 255
13571: PUSH
13572: LD_INT 1
13574: EQUAL
13575: PUSH
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 266
13585: PUSH
13586: LD_INT 0
13588: EQUAL
13589: AND
13590: IFFALSE 13604
// SetBName ( building , epsilon ) ;
13592: LD_VAR 0 1
13596: PPUSH
13597: LD_STRING epsilon
13599: PPUSH
13600: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
13604: LD_VAR 0 1
13608: PPUSH
13609: CALL_OW 255
13613: PUSH
13614: LD_INT 3
13616: EQUAL
13617: PUSH
13618: LD_VAR 0 1
13622: PPUSH
13623: CALL_OW 266
13627: PUSH
13628: LD_INT 0
13630: EQUAL
13631: AND
13632: IFFALSE 13646
// SetBName ( building , chuikov ) ;
13634: LD_VAR 0 1
13638: PPUSH
13639: LD_STRING chuikov
13641: PPUSH
13642: CALL_OW 500
// end ;
13646: PPOPN 2
13648: END
// on BuildingComplete ( building ) do var i ;
13649: LD_INT 0
13651: PPUSH
// begin if GetSide ( building ) = 1 then
13652: LD_VAR 0 1
13656: PPUSH
13657: CALL_OW 255
13661: PUSH
13662: LD_INT 1
13664: EQUAL
13665: IFFALSE 13865
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
13667: LD_INT 22
13669: PUSH
13670: LD_INT 1
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 2
13679: PUSH
13680: LD_INT 30
13682: PUSH
13683: LD_INT 7
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: LD_INT 30
13692: PUSH
13693: LD_INT 8
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 1
13702: PUSH
13703: LD_INT 30
13705: PUSH
13706: LD_INT 11
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 1
13715: PUSH
13716: LD_INT 2
13718: PUSH
13719: LD_INT 30
13721: PUSH
13722: LD_INT 26
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 30
13731: PUSH
13732: LD_INT 27
13734: PUSH
13735: EMPTY
13736: LIST
13737: LIST
13738: PUSH
13739: LD_INT 30
13741: PUSH
13742: LD_INT 28
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: LIST
13754: PUSH
13755: EMPTY
13756: LIST
13757: LIST
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PPUSH
13774: CALL_OW 69
13778: PUSH
13779: LD_INT 0
13781: GREATER
13782: PUSH
13783: LD_INT 22
13785: PUSH
13786: LD_INT 1
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 2
13795: PUSH
13796: LD_INT 30
13798: PUSH
13799: LD_INT 26
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: LD_INT 30
13808: PUSH
13809: LD_INT 27
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PUSH
13816: LD_INT 30
13818: PUSH
13819: LD_INT 28
13821: PUSH
13822: EMPTY
13823: LIST
13824: LIST
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: EMPTY
13833: LIST
13834: LIST
13835: PPUSH
13836: CALL_OW 69
13840: PUSH
13841: LD_INT 0
13843: GREATER
13844: AND
13845: PUSH
13846: LD_EXP 36
13850: PUSH
13851: LD_INT 0
13853: EQUAL
13854: AND
13855: IFFALSE 13865
// eventVar1 = 1 ;
13857: LD_ADDR_EXP 36
13861: PUSH
13862: LD_INT 1
13864: ST_TO_ADDR
// end ; if GetSide ( building ) = 3 then
13865: LD_VAR 0 1
13869: PPUSH
13870: CALL_OW 255
13874: PUSH
13875: LD_INT 3
13877: EQUAL
13878: IFFALSE 14276
// begin if GetBType ( building ) = b_depot then
13880: LD_VAR 0 1
13884: PPUSH
13885: CALL_OW 266
13889: PUSH
13890: LD_INT 0
13892: EQUAL
13893: IFFALSE 13965
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
13895: LD_VAR 0 1
13899: PPUSH
13900: CALL_OW 274
13904: PPUSH
13905: LD_INT 1
13907: PPUSH
13908: LD_INT 5000
13910: PPUSH
13911: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 5000 ) ;
13915: LD_VAR 0 1
13919: PPUSH
13920: CALL_OW 274
13924: PPUSH
13925: LD_INT 2
13927: PPUSH
13928: LD_INT 5000
13930: PPUSH
13931: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 5000 ) ;
13935: LD_VAR 0 1
13939: PPUSH
13940: CALL_OW 274
13944: PPUSH
13945: LD_INT 3
13947: PPUSH
13948: LD_INT 5000
13950: PPUSH
13951: CALL_OW 277
// ruDepot = building ;
13955: LD_ADDR_EXP 20
13959: PUSH
13960: LD_VAR 0 1
13964: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
13965: LD_VAR 0 1
13969: PPUSH
13970: CALL_OW 266
13974: PUSH
13975: LD_INT 0
13977: EQUAL
13978: PUSH
13979: LD_VAR 0 1
13983: PPUSH
13984: CALL_OW 266
13988: PUSH
13989: LD_INT 2
13991: EQUAL
13992: OR
13993: PUSH
13994: LD_VAR 0 1
13998: PPUSH
13999: CALL_OW 266
14003: PUSH
14004: LD_INT 4
14006: EQUAL
14007: OR
14008: IFFALSE 14019
// ComUpgrade ( building ) ;
14010: LD_VAR 0 1
14014: PPUSH
14015: CALL_OW 146
// if GetBType ( building ) = b_lab then
14019: LD_VAR 0 1
14023: PPUSH
14024: CALL_OW 266
14028: PUSH
14029: LD_INT 6
14031: EQUAL
14032: IFFALSE 14153
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
14034: LD_INT 22
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 30
14046: PUSH
14047: LD_INT 8
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PPUSH
14058: CALL_OW 69
14062: PUSH
14063: LD_INT 0
14065: EQUAL
14066: IFFALSE 14104
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
14068: LD_VAR 0 1
14072: PPUSH
14073: LD_INT 10
14075: PPUSH
14076: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
14080: LD_VAR 0 1
14084: PPUSH
14085: LD_INT 12
14087: PPUSH
14088: CALL_OW 207
// ruLab1 = building ;
14092: LD_ADDR_EXP 21
14096: PUSH
14097: LD_VAR 0 1
14101: ST_TO_ADDR
// end else
14102: GO 14138
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
14104: LD_VAR 0 1
14108: PPUSH
14109: LD_INT 11
14111: PPUSH
14112: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
14116: LD_VAR 0 1
14120: PPUSH
14121: LD_INT 14
14123: PPUSH
14124: CALL_OW 207
// ruLab2 = building ;
14128: LD_ADDR_EXP 22
14132: PUSH
14133: LD_VAR 0 1
14137: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
14138: LD_INT 3
14140: PPUSH
14141: LD_VAR 0 1
14145: PPUSH
14146: LD_INT 3
14148: PPUSH
14149: CALL 8931 0 3
// end ; if GetBType ( building ) = b_bunker then
14153: LD_VAR 0 1
14157: PPUSH
14158: CALL_OW 266
14162: PUSH
14163: LD_INT 32
14165: EQUAL
14166: IFFALSE 14203
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 44
14175: PUSH
14176: LD_INT 45
14178: PUSH
14179: LD_INT 46
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: PUSH
14187: LD_INT 1
14189: PPUSH
14190: LD_INT 3
14192: PPUSH
14193: CALL_OW 12
14197: ARRAY
14198: PPUSH
14199: CALL_OW 208
// if GetBType ( building ) = b_turret then
14203: LD_VAR 0 1
14207: PPUSH
14208: CALL_OW 266
14212: PUSH
14213: LD_INT 33
14215: EQUAL
14216: IFFALSE 14253
// AddComPlaceWeapon ( building , [ 44 , 46 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
14218: LD_VAR 0 1
14222: PPUSH
14223: LD_INT 44
14225: PUSH
14226: LD_INT 46
14228: PUSH
14229: LD_INT 46
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: LIST
14236: PUSH
14237: LD_INT 1
14239: PPUSH
14240: LD_INT 3
14242: PPUSH
14243: CALL_OW 12
14247: ARRAY
14248: PPUSH
14249: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
14253: LD_VAR 0 1
14257: PPUSH
14258: CALL_OW 266
14262: PUSH
14263: LD_INT 24
14265: EQUAL
14266: IFFALSE 14276
// russianAI = 1 ;
14268: LD_ADDR_EXP 29
14272: PUSH
14273: LD_INT 1
14275: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
14276: LD_VAR 0 1
14280: PPUSH
14281: CALL_OW 255
14285: PUSH
14286: LD_INT 2
14288: EQUAL
14289: IFFALSE 14578
// begin if GetBType ( building ) = b_depot then
14291: LD_VAR 0 1
14295: PPUSH
14296: CALL_OW 266
14300: PUSH
14301: LD_INT 0
14303: EQUAL
14304: IFFALSE 14390
// begin arDepot = building ;
14306: LD_ADDR_EXP 31
14310: PUSH
14311: LD_VAR 0 1
14315: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
14316: LD_INT 38
14318: PUSH
14319: LD_INT 47
14321: PUSH
14322: EMPTY
14323: LIST
14324: LIST
14325: PPUSH
14326: LD_INT 71
14328: PPUSH
14329: LD_INT 19
14331: PPUSH
14332: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
14336: LD_VAR 0 1
14340: PPUSH
14341: CALL_OW 274
14345: PPUSH
14346: LD_INT 1
14348: PPUSH
14349: LD_INT 500
14351: PPUSH
14352: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
14356: LD_VAR 0 1
14360: PPUSH
14361: CALL_OW 274
14365: PPUSH
14366: LD_INT 3
14368: PPUSH
14369: LD_INT 30
14371: PPUSH
14372: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
14376: LD_EXP 17
14380: PPUSH
14381: LD_EXP 31
14385: PPUSH
14386: CALL_OW 120
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
14390: LD_VAR 0 1
14394: PPUSH
14395: CALL_OW 266
14399: PUSH
14400: LD_INT 2
14402: EQUAL
14403: PUSH
14404: LD_VAR 0 1
14408: PPUSH
14409: CALL_OW 266
14413: PUSH
14414: LD_INT 4
14416: EQUAL
14417: OR
14418: IFFALSE 14429
// ComUpgrade ( building ) ;
14420: LD_VAR 0 1
14424: PPUSH
14425: CALL_OW 146
// if GetBType ( building ) = b_lab then
14429: LD_VAR 0 1
14433: PPUSH
14434: CALL_OW 266
14438: PUSH
14439: LD_INT 6
14441: EQUAL
14442: IFFALSE 14493
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
14444: LD_VAR 0 1
14448: PPUSH
14449: LD_INT 10
14451: PPUSH
14452: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
14456: LD_VAR 0 1
14460: PPUSH
14461: LD_INT 11
14463: PPUSH
14464: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
14468: LD_INT 2
14470: PPUSH
14471: LD_VAR 0 1
14475: PPUSH
14476: LD_INT 2
14478: PPUSH
14479: CALL 8931 0 3
// arLab = building ;
14483: LD_ADDR_EXP 32
14487: PUSH
14488: LD_VAR 0 1
14492: ST_TO_ADDR
// end ; if GetBType ( building ) = b_breastwork then
14493: LD_VAR 0 1
14497: PPUSH
14498: CALL_OW 266
14502: PUSH
14503: LD_INT 31
14505: EQUAL
14506: IFFALSE 14578
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] , [ f_not , [ f_hastask ] ] ] ] ) [ 1 ] , building ) ;
14508: LD_INT 22
14510: PUSH
14511: LD_INT 2
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: PUSH
14518: LD_INT 25
14520: PUSH
14521: LD_INT 1
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: PUSH
14528: LD_INT 3
14530: PUSH
14531: LD_INT 54
14533: PUSH
14534: EMPTY
14535: LIST
14536: PUSH
14537: LD_INT 3
14539: PUSH
14540: LD_INT 60
14542: PUSH
14543: EMPTY
14544: LIST
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: LIST
14559: PPUSH
14560: CALL_OW 69
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PPUSH
14569: LD_VAR 0 1
14573: PPUSH
14574: CALL_OW 120
// end ; end ;
14578: PPOPN 2
14580: END
// on UpgradeComplete ( building ) do var i ;
14581: LD_INT 0
14583: PPUSH
// begin if GetSide ( building ) = 1 then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 1
14596: EQUAL
14597: IFFALSE 14797
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_and , [ f_btype , b_lab_siberium ] , [ f_and , [ f_or , [ f_btype , b_oil_power ] , [ f_btype , b_solar_power ] , [ f_btype , b_siberite_power ] ] ] ] ] ] ) > 0 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 and eventVar1 = 0 then
14599: LD_INT 22
14601: PUSH
14602: LD_INT 1
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PUSH
14609: LD_INT 2
14611: PUSH
14612: LD_INT 30
14614: PUSH
14615: LD_INT 7
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 30
14624: PUSH
14625: LD_INT 8
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 1
14634: PUSH
14635: LD_INT 30
14637: PUSH
14638: LD_INT 11
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: LD_INT 2
14650: PUSH
14651: LD_INT 30
14653: PUSH
14654: LD_INT 26
14656: PUSH
14657: EMPTY
14658: LIST
14659: LIST
14660: PUSH
14661: LD_INT 30
14663: PUSH
14664: LD_INT 27
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 30
14673: PUSH
14674: LD_INT 28
14676: PUSH
14677: EMPTY
14678: LIST
14679: LIST
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: EMPTY
14688: LIST
14689: LIST
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: EMPTY
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PPUSH
14706: CALL_OW 69
14710: PUSH
14711: LD_INT 0
14713: GREATER
14714: PUSH
14715: LD_INT 22
14717: PUSH
14718: LD_INT 1
14720: PUSH
14721: EMPTY
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: LD_INT 30
14730: PUSH
14731: LD_INT 26
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: PUSH
14738: LD_INT 30
14740: PUSH
14741: LD_INT 27
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 30
14750: PUSH
14751: LD_INT 28
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: PPUSH
14768: CALL_OW 69
14772: PUSH
14773: LD_INT 0
14775: GREATER
14776: AND
14777: PUSH
14778: LD_EXP 36
14782: PUSH
14783: LD_INT 0
14785: EQUAL
14786: AND
14787: IFFALSE 14797
// eventVar1 = 1 ;
14789: LD_ADDR_EXP 36
14793: PUSH
14794: LD_INT 1
14796: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
14797: LD_VAR 0 1
14801: PPUSH
14802: CALL_OW 255
14806: PUSH
14807: LD_INT 2
14809: EQUAL
14810: IFFALSE 14915
// begin if GetBType ( building ) = b_barracks then
14812: LD_VAR 0 1
14816: PPUSH
14817: CALL_OW 266
14821: PUSH
14822: LD_INT 5
14824: EQUAL
14825: IFFALSE 14915
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
14827: LD_ADDR_VAR 0 2
14831: PUSH
14832: LD_INT 22
14834: PUSH
14835: LD_INT 2
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: PUSH
14842: LD_INT 25
14844: PUSH
14845: LD_INT 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 3
14854: PUSH
14855: LD_INT 54
14857: PUSH
14858: EMPTY
14859: LIST
14860: PUSH
14861: EMPTY
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: PUSH
14875: LD_EXP 17
14879: PUSH
14880: EMPTY
14881: LIST
14882: DIFF
14883: PUSH
14884: FOR_IN
14885: IFFALSE 14903
// ComEnterUnit ( i , building ) ;
14887: LD_VAR 0 2
14891: PPUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 120
14901: GO 14884
14903: POP
14904: POP
// arArm = building ;
14905: LD_ADDR_EXP 33
14909: PUSH
14910: LD_VAR 0 1
14914: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
14915: LD_VAR 0 1
14919: PPUSH
14920: CALL_OW 255
14924: PUSH
14925: LD_INT 3
14927: EQUAL
14928: IFFALSE 15391
// begin if GetBType ( building ) = b_factory then
14930: LD_VAR 0 1
14934: PPUSH
14935: CALL_OW 266
14939: PUSH
14940: LD_INT 3
14942: EQUAL
14943: IFFALSE 15000
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
14945: LD_ADDR_VAR 0 2
14949: PUSH
14950: LD_INT 22
14952: PUSH
14953: LD_INT 3
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PUSH
14960: LD_INT 25
14962: PUSH
14963: LD_INT 3
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 69
14978: PUSH
14979: FOR_IN
14980: IFFALSE 14998
// ComEnterUnit ( i , building ) ;
14982: LD_VAR 0 2
14986: PPUSH
14987: LD_VAR 0 1
14991: PPUSH
14992: CALL_OW 120
14996: GO 14979
14998: POP
14999: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
15000: LD_INT 22
15002: PUSH
15003: LD_INT 3
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: LD_INT 21
15012: PUSH
15013: LD_INT 3
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 30
15022: PUSH
15023: LD_INT 8
15025: PUSH
15026: EMPTY
15027: LIST
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: PUSH
15040: LD_INT 2
15042: EQUAL
15043: IFFALSE 15251
// begin for i = 1 to 2 do
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: DOUBLE
15051: LD_INT 1
15053: DEC
15054: ST_TO_ADDR
15055: LD_INT 2
15057: PUSH
15058: FOR_TO
15059: IFFALSE 15146
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
15061: LD_INT 22
15063: PUSH
15064: LD_INT 3
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: PUSH
15071: LD_INT 25
15073: PUSH
15074: LD_INT 4
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PUSH
15081: EMPTY
15082: LIST
15083: LIST
15084: PPUSH
15085: CALL_OW 69
15089: PUSH
15090: LD_VAR 0 2
15094: ARRAY
15095: PPUSH
15096: LD_INT 22
15098: PUSH
15099: LD_INT 3
15101: PUSH
15102: EMPTY
15103: LIST
15104: LIST
15105: PUSH
15106: LD_INT 21
15108: PUSH
15109: LD_INT 3
15111: PUSH
15112: EMPTY
15113: LIST
15114: LIST
15115: PUSH
15116: LD_INT 30
15118: PUSH
15119: LD_INT 8
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 69
15135: PUSH
15136: LD_INT 1
15138: ARRAY
15139: PPUSH
15140: CALL_OW 120
15144: GO 15058
15146: POP
15147: POP
// for i = 3 to 4 do
15148: LD_ADDR_VAR 0 2
15152: PUSH
15153: DOUBLE
15154: LD_INT 3
15156: DEC
15157: ST_TO_ADDR
15158: LD_INT 4
15160: PUSH
15161: FOR_TO
15162: IFFALSE 15249
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
15164: LD_INT 22
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 25
15176: PUSH
15177: LD_INT 4
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: PPUSH
15188: CALL_OW 69
15192: PUSH
15193: LD_VAR 0 2
15197: ARRAY
15198: PPUSH
15199: LD_INT 22
15201: PUSH
15202: LD_INT 3
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: LD_INT 21
15211: PUSH
15212: LD_INT 3
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: PUSH
15219: LD_INT 30
15221: PUSH
15222: LD_INT 8
15224: PUSH
15225: EMPTY
15226: LIST
15227: LIST
15228: PUSH
15229: EMPTY
15230: LIST
15231: LIST
15232: LIST
15233: PPUSH
15234: CALL_OW 69
15238: PUSH
15239: LD_INT 2
15241: ARRAY
15242: PPUSH
15243: CALL_OW 120
15247: GO 15161
15249: POP
15250: POP
// end ; if GetBType ( building ) = b_barracks then
15251: LD_VAR 0 1
15255: PPUSH
15256: CALL_OW 266
15260: PUSH
15261: LD_INT 5
15263: EQUAL
15264: IFFALSE 15391
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
15266: LD_ADDR_VAR 0 2
15270: PUSH
15271: LD_INT 22
15273: PUSH
15274: LD_INT 3
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 25
15283: PUSH
15284: LD_INT 1
15286: PUSH
15287: EMPTY
15288: LIST
15289: LIST
15290: PUSH
15291: LD_INT 3
15293: PUSH
15294: LD_INT 54
15296: PUSH
15297: EMPTY
15298: LIST
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: EMPTY
15305: LIST
15306: LIST
15307: LIST
15308: PPUSH
15309: CALL_OW 69
15313: PUSH
15314: FOR_IN
15315: IFFALSE 15333
// ComEnterUnit ( i , building ) ;
15317: LD_VAR 0 2
15321: PPUSH
15322: LD_VAR 0 1
15326: PPUSH
15327: CALL_OW 120
15331: GO 15314
15333: POP
15334: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
15335: LD_INT 22
15337: PUSH
15338: LD_INT 3
15340: PUSH
15341: EMPTY
15342: LIST
15343: LIST
15344: PUSH
15345: LD_INT 30
15347: PUSH
15348: LD_INT 5
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PPUSH
15359: CALL_OW 69
15363: PUSH
15364: LD_INT 0
15366: EQUAL
15367: IFFALSE 15381
// ruArm1 = building else
15369: LD_ADDR_EXP 23
15373: PUSH
15374: LD_VAR 0 1
15378: ST_TO_ADDR
15379: GO 15391
// ruArm2 = building ;
15381: LD_ADDR_EXP 24
15385: PUSH
15386: LD_VAR 0 1
15390: ST_TO_ADDR
// end ; end ; end ;
15391: PPOPN 2
15393: END
// on EnterBuilding ( building , human ) do var rnd ;
15394: LD_INT 0
15396: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
15397: LD_VAR 0 2
15401: PPUSH
15402: CALL_OW 255
15406: PUSH
15407: LD_INT 2
15409: EQUAL
15410: PUSH
15411: LD_VAR 0 2
15415: PPUSH
15416: CALL_OW 257
15420: PUSH
15421: LD_INT 1
15423: EQUAL
15424: AND
15425: PUSH
15426: LD_VAR 0 1
15430: PUSH
15431: LD_EXP 33
15435: EQUAL
15436: AND
15437: IFFALSE 15484
// begin wait ( 0 0$1 ) ;
15439: LD_INT 35
15441: PPUSH
15442: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
15446: LD_ADDR_VAR 0 3
15450: PUSH
15451: LD_INT 1
15453: PPUSH
15454: LD_INT 100
15456: PPUSH
15457: CALL_OW 12
15461: ST_TO_ADDR
// if rnd > 50 then
15462: LD_VAR 0 3
15466: PUSH
15467: LD_INT 50
15469: GREATER
15470: IFFALSE 15484
// SetClass ( human , class_mortar ) ;
15472: LD_VAR 0 2
15476: PPUSH
15477: LD_INT 8
15479: PPUSH
15480: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
15484: LD_VAR 0 2
15488: PPUSH
15489: CALL_OW 255
15493: PUSH
15494: LD_INT 3
15496: EQUAL
15497: PUSH
15498: LD_VAR 0 2
15502: PPUSH
15503: CALL_OW 257
15507: PUSH
15508: LD_INT 1
15510: EQUAL
15511: AND
15512: PUSH
15513: LD_VAR 0 1
15517: PUSH
15518: LD_EXP 23
15522: EQUAL
15523: PUSH
15524: LD_VAR 0 1
15528: PUSH
15529: LD_EXP 24
15533: EQUAL
15534: OR
15535: PUSH
15536: EMPTY
15537: LIST
15538: AND
15539: IFFALSE 15560
// begin wait ( 0 0$1 ) ;
15541: LD_INT 35
15543: PPUSH
15544: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
15548: LD_VAR 0 2
15552: PPUSH
15553: LD_INT 9
15555: PPUSH
15556: CALL_OW 336
// end ; end ;
15560: PPOPN 3
15562: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
15563: LD_VAR 0 1
15567: PUSH
15568: LD_INT 1
15570: EQUAL
15571: PUSH
15572: LD_VAR 0 2
15576: PUSH
15577: LD_INT 2
15579: EQUAL
15580: AND
15581: PUSH
15582: LD_INT 1
15584: PPUSH
15585: LD_INT 2
15587: PPUSH
15588: CALL_OW 81
15592: PUSH
15593: LD_INT 1
15595: EQUAL
15596: AND
15597: IFFALSE 15618
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
15599: LD_EXP 15
15603: PPUSH
15604: LD_STRING D6b-Pow-1
15606: PPUSH
15607: CALL_OW 94
// YouLost ( Powell ) ;
15611: LD_STRING Powell
15613: PPUSH
15614: CALL_OW 104
// end ; end ; end_of_file
15618: PPOPN 2
15620: END
// export function PrepareNature ; var i , un ; begin
15621: LD_INT 0
15623: PPUSH
15624: PPUSH
15625: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
15626: LD_ADDR_VAR 0 2
15630: PUSH
15631: DOUBLE
15632: LD_INT 1
15634: DEC
15635: ST_TO_ADDR
15636: LD_OWVAR 67
15640: PUSH
15641: LD_INT 1
15643: PPUSH
15644: LD_INT 5
15646: PPUSH
15647: CALL_OW 12
15651: PLUS
15652: PUSH
15653: FOR_TO
15654: IFFALSE 15799
// begin hc_sex = sex_male ;
15656: LD_ADDR_OWVAR 27
15660: PUSH
15661: LD_INT 1
15663: ST_TO_ADDR
// uc_side = 0 ;
15664: LD_ADDR_OWVAR 20
15668: PUSH
15669: LD_INT 0
15671: ST_TO_ADDR
// uc_nation = nation_nature ;
15672: LD_ADDR_OWVAR 21
15676: PUSH
15677: LD_INT 0
15679: ST_TO_ADDR
// hc_class = class_apeman ;
15680: LD_ADDR_OWVAR 28
15684: PUSH
15685: LD_INT 12
15687: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
15688: LD_ADDR_OWVAR 31
15692: PUSH
15693: LD_INT 2
15695: PPUSH
15696: LD_INT 7
15698: PPUSH
15699: CALL_OW 12
15703: PUSH
15704: LD_OWVAR 67
15708: PLUS
15709: PUSH
15710: LD_INT 2
15712: PPUSH
15713: LD_INT 10
15715: PPUSH
15716: CALL_OW 12
15720: PUSH
15721: LD_INT 2
15723: PPUSH
15724: LD_INT 10
15726: PPUSH
15727: CALL_OW 12
15731: PUSH
15732: LD_INT 2
15734: PPUSH
15735: LD_INT 10
15737: PPUSH
15738: CALL_OW 12
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15749: LD_ADDR_OWVAR 35
15753: PUSH
15754: LD_INT 5
15756: NEG
15757: PPUSH
15758: LD_INT 5
15760: PPUSH
15761: CALL_OW 12
15765: PUSH
15766: LD_OWVAR 67
15770: MUL
15771: ST_TO_ADDR
// un = CreateHuman ;
15772: LD_ADDR_VAR 0 3
15776: PUSH
15777: CALL_OW 44
15781: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
15782: LD_VAR 0 3
15786: PPUSH
15787: LD_INT 5
15789: PPUSH
15790: LD_INT 0
15792: PPUSH
15793: CALL_OW 49
// end ;
15797: GO 15653
15799: POP
15800: POP
// for i = 1 to Difficulty + 2 do
15801: LD_ADDR_VAR 0 2
15805: PUSH
15806: DOUBLE
15807: LD_INT 1
15809: DEC
15810: ST_TO_ADDR
15811: LD_OWVAR 67
15815: PUSH
15816: LD_INT 2
15818: PLUS
15819: PUSH
15820: FOR_TO
15821: IFFALSE 15930
// begin hc_sex = sex_male ;
15823: LD_ADDR_OWVAR 27
15827: PUSH
15828: LD_INT 1
15830: ST_TO_ADDR
// uc_side = 0 ;
15831: LD_ADDR_OWVAR 20
15835: PUSH
15836: LD_INT 0
15838: ST_TO_ADDR
// uc_nation = nation_nature ;
15839: LD_ADDR_OWVAR 21
15843: PUSH
15844: LD_INT 0
15846: ST_TO_ADDR
// hc_class = class_tiger ;
15847: LD_ADDR_OWVAR 28
15851: PUSH
15852: LD_INT 14
15854: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15855: LD_ADDR_OWVAR 31
15859: PUSH
15860: LD_EXP 27
15864: PUSH
15865: LD_INT 0
15867: PUSH
15868: LD_INT 0
15870: PUSH
15871: LD_INT 0
15873: PUSH
15874: EMPTY
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15880: LD_ADDR_OWVAR 35
15884: PUSH
15885: LD_INT 5
15887: NEG
15888: PPUSH
15889: LD_INT 5
15891: PPUSH
15892: CALL_OW 12
15896: PUSH
15897: LD_OWVAR 67
15901: MUL
15902: ST_TO_ADDR
// un = CreateHuman ;
15903: LD_ADDR_VAR 0 3
15907: PUSH
15908: CALL_OW 44
15912: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
15913: LD_VAR 0 3
15917: PPUSH
15918: LD_INT 6
15920: PPUSH
15921: LD_INT 0
15923: PPUSH
15924: CALL_OW 49
// end ;
15928: GO 15820
15930: POP
15931: POP
// for i = 1 to rand ( 3 , 4 ) do
15932: LD_ADDR_VAR 0 2
15936: PUSH
15937: DOUBLE
15938: LD_INT 1
15940: DEC
15941: ST_TO_ADDR
15942: LD_INT 3
15944: PPUSH
15945: LD_INT 4
15947: PPUSH
15948: CALL_OW 12
15952: PUSH
15953: FOR_TO
15954: IFFALSE 16048
// begin hc_sex = sex_male ;
15956: LD_ADDR_OWVAR 27
15960: PUSH
15961: LD_INT 1
15963: ST_TO_ADDR
// uc_side = 0 ;
15964: LD_ADDR_OWVAR 20
15968: PUSH
15969: LD_INT 0
15971: ST_TO_ADDR
// uc_nation = nation_nature ;
15972: LD_ADDR_OWVAR 21
15976: PUSH
15977: LD_INT 0
15979: ST_TO_ADDR
// hc_class = 18 ;
15980: LD_ADDR_OWVAR 28
15984: PUSH
15985: LD_INT 18
15987: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15988: LD_ADDR_OWVAR 31
15992: PUSH
15993: LD_EXP 27
15997: PUSH
15998: LD_INT 0
16000: PUSH
16001: LD_INT 0
16003: PUSH
16004: LD_INT 0
16006: PUSH
16007: EMPTY
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: ST_TO_ADDR
// hc_agressivity = 0 ;
16013: LD_ADDR_OWVAR 35
16017: PUSH
16018: LD_INT 0
16020: ST_TO_ADDR
// un = CreateHuman ;
16021: LD_ADDR_VAR 0 3
16025: PUSH
16026: CALL_OW 44
16030: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
16031: LD_VAR 0 3
16035: PPUSH
16036: LD_INT 6
16038: PPUSH
16039: LD_INT 0
16041: PPUSH
16042: CALL_OW 49
// end ;
16046: GO 15953
16048: POP
16049: POP
// end ; end_of_file
16050: LD_VAR 0 1
16054: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
16055: LD_EXP 34
16059: PUSH
16060: LD_INT 1
16062: EQUAL
16063: IFFALSE 16165
16065: GO 16067
16067: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ Rand ( 4 , 6 ) , Rand ( 6 , 8 ) , Rand ( 7 , 9 ) ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
16068: LD_INT 7
16070: PPUSH
16071: LD_INT 5
16073: PPUSH
16074: LD_INT 4
16076: PPUSH
16077: LD_INT 6
16079: PPUSH
16080: CALL_OW 12
16084: PUSH
16085: LD_INT 6
16087: PPUSH
16088: LD_INT 8
16090: PPUSH
16091: CALL_OW 12
16095: PUSH
16096: LD_INT 7
16098: PPUSH
16099: LD_INT 9
16101: PPUSH
16102: CALL_OW 12
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: PPUSH
16112: LD_EXP 26
16116: PPUSH
16117: LD_EXP 27
16121: PPUSH
16122: CALL_OW 12
16126: PPUSH
16127: LD_INT 2
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: LD_INT 1
16135: PPUSH
16136: EMPTY
16137: PPUSH
16138: LD_INT 25
16140: PUSH
16141: LD_INT 26
16143: PUSH
16144: LD_INT 27
16146: PUSH
16147: LD_INT 28
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: PPUSH
16156: EMPTY
16157: PPUSH
16158: LD_INT 1
16160: PPUSH
16161: CALL 10208 0 11
16165: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
16166: LD_EXP 34
16170: PUSH
16171: LD_INT 1
16173: EQUAL
16174: IFFALSE 16310
16176: GO 16178
16178: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ Rand ( 7 , 9 ) , Rand ( 8 , 10 ) , Rand ( 9 , 12 ) ] [ Difficulty ] , 0 , 0 , [ Rand ( 3 , 4 ) , Rand ( 4 , 5 ) , Rand ( 5 , 6 ) ] [ Difficulty ] , 5 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ; end_of_file
16179: LD_INT 5
16181: PPUSH
16182: LD_INT 2
16184: PPUSH
16185: LD_INT 7
16187: PPUSH
16188: LD_INT 9
16190: PPUSH
16191: CALL_OW 12
16195: PUSH
16196: LD_INT 8
16198: PPUSH
16199: LD_INT 10
16201: PPUSH
16202: CALL_OW 12
16206: PUSH
16207: LD_INT 9
16209: PPUSH
16210: LD_INT 12
16212: PPUSH
16213: CALL_OW 12
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: LD_OWVAR 67
16227: ARRAY
16228: PPUSH
16229: LD_INT 0
16231: PPUSH
16232: LD_INT 0
16234: PPUSH
16235: LD_INT 3
16237: PPUSH
16238: LD_INT 4
16240: PPUSH
16241: CALL_OW 12
16245: PUSH
16246: LD_INT 4
16248: PPUSH
16249: LD_INT 5
16251: PPUSH
16252: CALL_OW 12
16256: PUSH
16257: LD_INT 5
16259: PPUSH
16260: LD_INT 6
16262: PPUSH
16263: CALL_OW 12
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: LIST
16272: PUSH
16273: LD_OWVAR 67
16277: ARRAY
16278: PPUSH
16279: LD_INT 5
16281: PPUSH
16282: LD_EXP 26
16286: PPUSH
16287: LD_EXP 27
16291: PPUSH
16292: CALL_OW 12
16296: PPUSH
16297: LD_INT 7
16299: PPUSH
16300: LD_INT 9
16302: PPUSH
16303: LD_INT 1
16305: PPUSH
16306: CALL 11886 0 11
16310: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] do
16311: LD_INT 54
16313: PPUSH
16314: LD_INT 1
16316: PPUSH
16317: CALL_OW 321
16321: PUSH
16322: LD_INT 2
16324: EQUAL
16325: PUSH
16326: LD_INT 55
16328: PPUSH
16329: LD_INT 1
16331: PPUSH
16332: CALL_OW 321
16336: PUSH
16337: LD_INT 2
16339: EQUAL
16340: AND
16341: PUSH
16342: LD_INT 21
16344: PPUSH
16345: LD_INT 1
16347: PPUSH
16348: CALL_OW 321
16352: PUSH
16353: LD_INT 2
16355: EQUAL
16356: AND
16357: PUSH
16358: LD_INT 22
16360: PPUSH
16361: LD_INT 1
16363: PPUSH
16364: CALL_OW 321
16368: PUSH
16369: LD_INT 2
16371: EQUAL
16372: AND
16373: PUSH
16374: LD_INT 12
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 321
16384: PUSH
16385: LD_INT 1
16387: EQUAL
16388: PUSH
16389: LD_INT 32
16391: PPUSH
16392: LD_INT 1
16394: PPUSH
16395: CALL_OW 321
16399: PUSH
16400: LD_INT 1
16402: EQUAL
16403: OR
16404: PUSH
16405: EMPTY
16406: LIST
16407: AND
16408: IFFALSE 16448
16410: GO 16412
16412: DISABLE
// begin case query ( QEndMission ) of 1 :
16413: LD_STRING QEndMission
16415: PPUSH
16416: CALL_OW 97
16420: PUSH
16421: LD_INT 1
16423: DOUBLE
16424: EQUAL
16425: IFTRUE 16429
16427: GO 16432
16429: POP
// begin end ; 2 :
16430: GO 16448
16432: LD_INT 2
16434: DOUBLE
16435: EQUAL
16436: IFTRUE 16440
16438: GO 16447
16440: POP
// begin FinishMission ;
16441: CALL 16553 0 0
// end ; end ;
16445: GO 16448
16447: POP
// end ;
16448: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched do
16449: LD_INT 54
16451: PPUSH
16452: LD_INT 1
16454: PPUSH
16455: CALL_OW 321
16459: PUSH
16460: LD_INT 2
16462: EQUAL
16463: PUSH
16464: LD_INT 55
16466: PPUSH
16467: LD_INT 1
16469: PPUSH
16470: CALL_OW 321
16474: PUSH
16475: LD_INT 2
16477: EQUAL
16478: AND
16479: PUSH
16480: LD_INT 21
16482: PPUSH
16483: LD_INT 1
16485: PPUSH
16486: CALL_OW 321
16490: PUSH
16491: LD_INT 2
16493: EQUAL
16494: AND
16495: PUSH
16496: LD_INT 22
16498: PPUSH
16499: LD_INT 1
16501: PPUSH
16502: CALL_OW 321
16506: PUSH
16507: LD_INT 2
16509: EQUAL
16510: AND
16511: PUSH
16512: LD_INT 12
16514: PPUSH
16515: LD_INT 1
16517: PPUSH
16518: CALL_OW 321
16522: PUSH
16523: LD_INT 2
16525: EQUAL
16526: AND
16527: PUSH
16528: LD_INT 32
16530: PPUSH
16531: LD_INT 1
16533: PPUSH
16534: CALL_OW 321
16538: PUSH
16539: LD_INT 2
16541: EQUAL
16542: AND
16543: IFFALSE 16552
16545: GO 16547
16547: DISABLE
// FinishMission ;
16548: CALL 16553 0 0
16552: END
// export function FinishMission ; begin
16553: LD_INT 0
16555: PPUSH
// if GetTech ( tech_LasSight , 1 ) = state_researched then
16556: LD_INT 12
16558: PPUSH
16559: LD_INT 1
16561: PPUSH
16562: CALL_OW 321
16566: PUSH
16567: LD_INT 2
16569: EQUAL
16570: IFFALSE 16584
// begin AddMedal ( sights , 1 ) ;
16572: LD_STRING sights
16574: PPUSH
16575: LD_INT 1
16577: PPUSH
16578: CALL_OW 101
// end else
16582: GO 16595
// begin AddMedal ( sights , - 1 ) ;
16584: LD_STRING sights
16586: PPUSH
16587: LD_INT 1
16589: NEG
16590: PPUSH
16591: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
16595: LD_INT 32
16597: PPUSH
16598: LD_INT 1
16600: PPUSH
16601: CALL_OW 321
16605: PUSH
16606: LD_INT 2
16608: EQUAL
16609: IFFALSE 16623
// begin AddMedal ( computers , 1 ) ;
16611: LD_STRING computers
16613: PPUSH
16614: LD_INT 1
16616: PPUSH
16617: CALL_OW 101
// end else
16621: GO 16634
// begin AddMedal ( computers , - 1 ) ;
16623: LD_STRING computers
16625: PPUSH
16626: LD_INT 1
16628: NEG
16629: PPUSH
16630: CALL_OW 101
// end ; if arabianEscape = 0 then
16634: LD_EXP 35
16638: PUSH
16639: LD_INT 0
16641: EQUAL
16642: IFFALSE 16656
// begin AddMedal ( renegades , 2 ) ;
16644: LD_STRING renegades
16646: PPUSH
16647: LD_INT 2
16649: PPUSH
16650: CALL_OW 101
// end else
16654: GO 16667
// begin AddMedal ( renegades , - 1 ) ;
16656: LD_STRING renegades
16658: PPUSH
16659: LD_INT 1
16661: NEG
16662: PPUSH
16663: CALL_OW 101
// end ; GiveMedals ( Main ) ;
16667: LD_STRING Main
16669: PPUSH
16670: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) ) ;
16674: LD_INT 22
16676: PUSH
16677: LD_INT 1
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 23
16686: PUSH
16687: LD_INT 1
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 21
16696: PUSH
16697: LD_INT 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 2
16706: PUSH
16707: LD_INT 25
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: LD_INT 25
16719: PUSH
16720: LD_INT 2
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: PUSH
16727: LD_INT 25
16729: PUSH
16730: LD_INT 3
16732: PUSH
16733: EMPTY
16734: LIST
16735: LIST
16736: PUSH
16737: LD_INT 25
16739: PUSH
16740: LD_INT 4
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: PUSH
16747: LD_INT 25
16749: PUSH
16750: LD_INT 5
16752: PUSH
16753: EMPTY
16754: LIST
16755: LIST
16756: PUSH
16757: EMPTY
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: PPUSH
16771: CALL_OW 69
16775: PPUSH
16776: CALL_OW 43
// YouWin ;
16780: CALL_OW 103
// end ; end_of_file
16784: LD_VAR 0 1
16788: RET
// every 0 0$1 trigger IsDead ( JMM ) do
16789: LD_EXP 1
16793: PPUSH
16794: CALL_OW 301
16798: IFFALSE 16810
16800: GO 16802
16802: DISABLE
// YouLost ( JMM ) ;
16803: LD_STRING JMM
16805: PPUSH
16806: CALL_OW 104
16810: END
