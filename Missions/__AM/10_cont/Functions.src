Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
   unit := CreateCharacter(ident)
  else
   unit := NewCharacter(ident);

result := unit;
End;

Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin 

    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

       if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
       if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);
    
    end;
  
end;

Export function PrepareDifficulty;
begin
    if difficulty = 1 then
    begin
        RuSolMinLevel = 9;
        RuSolMaxLevel = 10;
    end;

    if difficulty = 2 then
    begin
        RuSolMinLevel = 9;
        RuSolMaxLevel = 10;
    end;

    if difficulty = 3 then
    begin
        RuSolMinLevel = 9;
        RuSolMaxLevel = 10;
    end;
end;

// AI functions

Export function BuildRussianBase(position);
var i, engineers, buildingsTab;
begin

    // 1 - west , 2 - middle, 3 - east 


// 42, 74, 1 { 97: placed red-ru1 Ru. upgraded bridge full, rulab1 }
// 56, 77, 2 { 98: placed red-ru1 Ru. upgraded bridge full, rulab2 }


    if position = 1 then
    begin
        engineers = FilterAllUnits([[f_side, 3], [f_class, 2]]);
        //type, x, y, dir
        buildingsTab = [
            [b_depot, 49, 74, 3],
            [b_armoury, 73, 88, 5],
            [b_armoury, 56, 62, 3],
            [b_oil_mine, 43, 68, 2],
            [b_siberite_mine, 43, 79, 5],
            [b_siberite_power, 60, 75, 1],
            [b_siberite_power, 45, 67, 2],
            [b_siberite_power, 41, 64, 5],
            [b_workshop, 50, 87, 1],
            [b_ext_gun, 47, 84, 2],
            [b_ext_rocket, 46, 87, 1],
            [b_bunker, 75, 76, 5],
            [b_bunker, 77, 75, 5],
            [b_bunker, 69, 68, 3],
            [b_bunker, 59, 96, 5],
            [b_bunker, 56, 96, 0],
            [b_bunker, 51, 61, 3],
            [b_bunker, 42, 60, 3],
            [b_bunker, 36, 58, 3],
            [b_bunker, 39, 59, 3],
            [b_bunker, 61, 64, 3],
            [b_turret, 63, 90, 5],
            [b_turret, 64, 88, 5],
            [b_turret, 72, 82, 5],
            [b_lab, 42, 74, 1],
            [b_lab, 56, 77, 2],
            [b_ext_siberium, 54, 91, 5],
            [b_ext_track, 50, 83, 3],
            [b_ext_computer, 50, 90, 0]
        ];

        for i := 1 to buildingsTab do
            AddComBuild(engineers, buildingsTab[i][1], buildingsTab[i][2], buildingsTab[i][3], buildingsTab[i][4]);

    end;

end;

Export Function IntBazooka(side, targetSide);
var ta, c, i, list, filter;
begin

      list   := FilterAllUnits([[f_side, side], [f_class, class_bazooker]]);
      filter := FilterAllUnits([[f_side, targetSide], [f_not, [f_type, unit_building]]]);

      c := Rand(1, 3);

         for i = 1 to list do
         for ta in filter do
             begin

              if GetDistUnits(list[i], ta) <= 13 then
                 begin

                      Case c of
                      1: ComTimeShift(list[i], GetX(ta), GetY(ta));
                      2: ComSpaceShift(list[i], GetX(ta) + Rand(-1,1), GetY(ta) + Rand(-1,1));
                      3: ;
                      end;

                 end;
             end;

End;

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

  For i = 1 to 72 do
    If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end;

Export function EnterBunkerOrBarrack(side, area);
var i,j, soldiers_list, turretList, temp, barrackList;
begin


    soldiers_list = FilterAllUnits([[f_side, side], [f_class, 1], [f_outside], [f_lives, 700]]);
    turretList = FilterAllUnits([[f_side, side], [f_btype, b_bunker], [f_empty], [f_lives, 251]]);
    barrackList = FilterAllUnits([[f_side, side], [f_or, [f_btype, 4], [f_btype, 5]], [f_lives, 251]]);

    if barrackList > 0 then
    begin

        if turretList = 0 then
        begin
            for i in soldiers_list do ComEnterUnit(i, barrackList[1]);
        end else
        begin
            for i in barrackList do 
            begin
                ComEnterUnit(UnitsInside(i), turretList[1]);
            end;
        end;

    end;

end;

Export function RepairBuilding(side, building, area);
var buildings_list, i,engineerOkInside, engineerOkOutside, j;
begin

        engineerOkInside = UnitsInside(building);
        engineerOkOutside = FilterUnitsInArea(area, [[f_side, side], [f_class, 2], [f_lives, 1000]]);
        buildings_list = FilterUnitsInArea(area, [[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

        if buildings_list > 0 and engineerOkInside > 0 then
            for i in engineerOkInside do ComExitBuilding(i);

        if engineerOkOutside > 0 then
        begin

            for i in engineerOkOutside do
                for j in buildings_list do
                    ComRepairBuilding(i, j[1]);

        end;

        if buildings_list = 0 then
            for i in engineerOkOutside do ComEnterUnit(i, building);
END;

Export function RebuildBuildings(side, destroyedBuildings);
var i;
begin
    if FilterAllUnits([[f_side, side], [f_class, 2]]) > 0 and FilterAllUnits([[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]) = 0 and destroyedBuildings > 0  then
    begin
        for i in FilterAllUnits([[f_side, side], [f_class, 2]]) do 
        begin
            AddComExitBuilding(i);
            AddComBuild(i, destroyedBuildings[1], destroyedBuildings[2], destroyedBuildings[3], destroyedBuildings[4]);
        end;
    end;
end;

Export function HealUnitInBase(side, healArea, baseArea);
var i, j, scientisticsOutside, scientisticsInside, labs, damageUnits;
begin

    labs = FilterAllUnits([[f_side, side], [f_lives, 251], [f_or, [f_btype, b_lab_basic], [f_btype, b_lab_half], [f_btype, b_lab_full]]]);
    scientisticsOutside = FilterUnitsInArea(baseArea, [[f_side, side], [f_class, 4], [f_lives, 251]]);
    damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);

    if labs > 0 and damageUnits > 0 then 
        for i in labs do scientisticsInside = UnitsInside(i);
    
    if labs > 0 and damageUnits > 0 then
        for i in scientisticsInside do ComExitBuilding(i);

    if damageUnits > 0 and scientisticsOutside > 0 then
    begin

        ComMoveToArea(damageUnits, healArea);

        for i in scientisticsOutside do
            for j in damageUnits do
                AddComHeal(i, j);

    end else
    begin

        ComEnterUnit(scientisticsOutside, labs[Rand(1, labs)]);

  end;

END;
