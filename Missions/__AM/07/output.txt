// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2371 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2092 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 3666 0 3
 179: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_STRING GammaCommander
 187: PPUSH
 188: LD_INT 3
 190: PPUSH
 191: CALL_OW 30
 195: ST_TO_ADDR
// if gamma_commander = 1 then
 196: LD_EXP 18
 200: PUSH
 201: LD_INT 1
 203: EQUAL
 204: IFFALSE 230
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 206: LD_ADDR_EXP 13
 210: PUSH
 211: LD_STRING Donaldson
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_STRING 04_
 222: PPUSH
 223: CALL 3666 0 3
 227: ST_TO_ADDR
// end else
 228: GO 288
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 230: LD_STRING DonaldsonIn06
 232: PPUSH
 233: LD_INT 0
 235: PPUSH
 236: CALL_OW 30
 240: IFFALSE 266
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 242: LD_ADDR_EXP 13
 246: PUSH
 247: LD_STRING Donaldson
 249: PPUSH
 250: LD_EXP 1
 254: NOT
 255: PPUSH
 256: LD_STRING 06c_
 258: PPUSH
 259: CALL 3666 0 3
 263: ST_TO_ADDR
 264: GO 288
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 266: LD_ADDR_EXP 13
 270: PUSH
 271: LD_STRING Donaldson
 273: PPUSH
 274: LD_EXP 1
 278: NOT
 279: PPUSH
 280: LD_STRING 04_
 282: PPUSH
 283: CALL 3666 0 3
 287: ST_TO_ADDR
// end ; if Donaldson then
 288: LD_EXP 13
 292: IFFALSE 310
// team := team ^ Donaldson ;
 294: LD_ADDR_VAR 0 6
 298: PUSH
 299: LD_VAR 0 6
 303: PUSH
 304: LD_EXP 13
 308: ADD
 309: ST_TO_ADDR
// if gamma_commander = 2 then
 310: LD_EXP 18
 314: PUSH
 315: LD_INT 2
 317: EQUAL
 318: IFFALSE 344
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 320: LD_ADDR_EXP 14
 324: PUSH
 325: LD_STRING Brown
 327: PPUSH
 328: LD_EXP 1
 332: NOT
 333: PPUSH
 334: LD_STRING 04_
 336: PPUSH
 337: CALL 3666 0 3
 341: ST_TO_ADDR
// end else
 342: GO 402
// begin if LoadVariable ( BrownIn06 , 0 ) then
 344: LD_STRING BrownIn06
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 30
 354: IFFALSE 380
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 356: LD_ADDR_EXP 14
 360: PUSH
 361: LD_STRING Brown
 363: PPUSH
 364: LD_EXP 1
 368: NOT
 369: PPUSH
 370: LD_STRING 06c_
 372: PPUSH
 373: CALL 3666 0 3
 377: ST_TO_ADDR
 378: GO 402
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 380: LD_ADDR_EXP 14
 384: PUSH
 385: LD_STRING Brown
 387: PPUSH
 388: LD_EXP 1
 392: NOT
 393: PPUSH
 394: LD_STRING 04_
 396: PPUSH
 397: CALL 3666 0 3
 401: ST_TO_ADDR
// end ; if Brown then
 402: LD_EXP 14
 406: IFFALSE 424
// team := team ^ Brown ;
 408: LD_ADDR_VAR 0 6
 412: PUSH
 413: LD_VAR 0 6
 417: PUSH
 418: LD_EXP 14
 422: ADD
 423: ST_TO_ADDR
// if gamma_commander = 3 then
 424: LD_EXP 18
 428: PUSH
 429: LD_INT 3
 431: EQUAL
 432: IFFALSE 469
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 434: LD_ADDR_EXP 15
 438: PUSH
 439: LD_STRING VanHouten
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: LD_STRING 
 447: PPUSH
 448: CALL 3666 0 3
 452: ST_TO_ADDR
// team := team ^ Houten ;
 453: LD_ADDR_VAR 0 6
 457: PUSH
 458: LD_VAR 0 6
 462: PUSH
 463: LD_EXP 15
 467: ADD
 468: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 469: LD_STRING GladstoneIn06
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 30
 479: IFFALSE 503
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
 481: LD_ADDR_EXP 8
 485: PUSH
 486: LD_STRING Gladstone
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_STRING 06c_
 497: PPUSH
 498: CALL 3666 0 3
 502: ST_TO_ADDR
// if Gladstone then
 503: LD_EXP 8
 507: IFFALSE 525
// team := team ^ Gladstone ;
 509: LD_ADDR_VAR 0 6
 513: PUSH
 514: LD_VAR 0 6
 518: PUSH
 519: LD_EXP 8
 523: ADD
 524: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 525: LD_ADDR_EXP 16
 529: PUSH
 530: LD_STRING Khatam
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: LD_STRING 03_
 541: PPUSH
 542: CALL 3666 0 3
 546: ST_TO_ADDR
// if Khatam then
 547: LD_EXP 16
 551: IFFALSE 569
// team := team ^ Khatam ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_VAR 0 6
 562: PUSH
 563: LD_EXP 16
 567: ADD
 568: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 569: LD_STRING LisaIn06
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 30
 579: IFFALSE 605
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 581: LD_ADDR_EXP 10
 585: PUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_STRING 06c_
 597: PPUSH
 598: CALL 3666 0 3
 602: ST_TO_ADDR
 603: GO 627
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 605: LD_ADDR_EXP 10
 609: PUSH
 610: LD_STRING Lisa
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_STRING 04_
 621: PPUSH
 622: CALL 3666 0 3
 626: ST_TO_ADDR
// if Lisa then
 627: LD_EXP 10
 631: IFFALSE 649
// team := team ^ Lisa ;
 633: LD_ADDR_VAR 0 6
 637: PUSH
 638: LD_VAR 0 6
 642: PUSH
 643: LD_EXP 10
 647: ADD
 648: ST_TO_ADDR
// if not Lisa then
 649: LD_EXP 10
 653: NOT
 654: IFFALSE 823
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 656: LD_STRING CyrusIn06
 658: PPUSH
 659: LD_INT 0
 661: PPUSH
 662: CALL_OW 30
 666: IFFALSE 692
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 668: LD_ADDR_EXP 11
 672: PUSH
 673: LD_STRING Cyrus
 675: PPUSH
 676: LD_EXP 1
 680: NOT
 681: PPUSH
 682: LD_STRING 06c_
 684: PPUSH
 685: CALL 3666 0 3
 689: ST_TO_ADDR
 690: GO 714
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 692: LD_ADDR_EXP 11
 696: PUSH
 697: LD_STRING Cyrus
 699: PPUSH
 700: LD_EXP 1
 704: NOT
 705: PPUSH
 706: LD_STRING 04_
 708: PPUSH
 709: CALL 3666 0 3
 713: ST_TO_ADDR
// if Cyrus then
 714: LD_EXP 11
 718: IFFALSE 736
// team := team ^ Cyrus ;
 720: LD_ADDR_VAR 0 6
 724: PUSH
 725: LD_VAR 0 6
 729: PUSH
 730: LD_EXP 11
 734: ADD
 735: ST_TO_ADDR
// if not Cyrus then
 736: LD_EXP 11
 740: NOT
 741: IFFALSE 823
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 743: LD_STRING BobbyIn06
 745: PPUSH
 746: LD_INT 0
 748: PPUSH
 749: CALL_OW 30
 753: IFFALSE 779
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 755: LD_ADDR_EXP 12
 759: PUSH
 760: LD_STRING Bobby
 762: PPUSH
 763: LD_EXP 1
 767: NOT
 768: PPUSH
 769: LD_STRING 06c_
 771: PPUSH
 772: CALL 3666 0 3
 776: ST_TO_ADDR
 777: GO 801
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 779: LD_ADDR_EXP 12
 783: PUSH
 784: LD_STRING Bobby
 786: PPUSH
 787: LD_EXP 1
 791: NOT
 792: PPUSH
 793: LD_STRING 04_
 795: PPUSH
 796: CALL 3666 0 3
 800: ST_TO_ADDR
// if Bobby then
 801: LD_EXP 12
 805: IFFALSE 823
// team := team ^ Bobby ;
 807: LD_ADDR_VAR 0 6
 811: PUSH
 812: LD_VAR 0 6
 816: PUSH
 817: LD_EXP 12
 821: ADD
 822: ST_TO_ADDR
// end ; end ; others_delta := CreateCharacterSet ( 05_other_survivors ) ;
 823: LD_ADDR_VAR 0 3
 827: PUSH
 828: LD_STRING 05_other_survivors
 830: PPUSH
 831: CALL_OW 31
 835: ST_TO_ADDR
// others4 := CreateCharacterSet ( othersGamma ) ;
 836: LD_ADDR_VAR 0 4
 840: PUSH
 841: LD_STRING othersGamma
 843: PPUSH
 844: CALL_OW 31
 848: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
 849: LD_ADDR_VAR 0 2
 853: PUSH
 854: LD_STRING 06_other_survivors
 856: PPUSH
 857: CALL_OW 31
 861: ST_TO_ADDR
// others := others union others4 ;
 862: LD_ADDR_VAR 0 2
 866: PUSH
 867: LD_VAR 0 2
 871: PUSH
 872: LD_VAR 0 4
 876: UNION
 877: ST_TO_ADDR
// others := others diff others_delta ;
 878: LD_ADDR_VAR 0 2
 882: PUSH
 883: LD_VAR 0 2
 887: PUSH
 888: LD_VAR 0 3
 892: DIFF
 893: ST_TO_ADDR
// team := team ^ others ;
 894: LD_ADDR_VAR 0 6
 898: PUSH
 899: LD_VAR 0 6
 903: PUSH
 904: LD_VAR 0 2
 908: ADD
 909: ST_TO_ADDR
// for i in others do
 910: LD_ADDR_VAR 0 13
 914: PUSH
 915: LD_VAR 0 2
 919: PUSH
 920: FOR_IN
 921: IFFALSE 989
// begin if GetClass ( i ) = 2 then
 923: LD_VAR 0 13
 927: PPUSH
 928: CALL_OW 257
 932: PUSH
 933: LD_INT 2
 935: EQUAL
 936: IFFALSE 950
// SetClass ( i , 1 ) ;
 938: LD_VAR 0 13
 942: PPUSH
 943: LD_INT 1
 945: PPUSH
 946: CALL_OW 336
// for j = 1 to 4 do
 950: LD_ADDR_VAR 0 14
 954: PUSH
 955: DOUBLE
 956: LD_INT 1
 958: DEC
 959: ST_TO_ADDR
 960: LD_INT 4
 962: PUSH
 963: FOR_TO
 964: IFFALSE 985
// AddExperience ( i , j , 3000 ) ;
 966: LD_VAR 0 13
 970: PPUSH
 971: LD_VAR 0 14
 975: PPUSH
 976: LD_INT 3000
 978: PPUSH
 979: CALL_OW 492
 983: GO 963
 985: POP
 986: POP
// end ;
 987: GO 920
 989: POP
 990: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
 991: LD_ADDR_VAR 0 7
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 0
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PPUSH
1006: CALL_OW 69
1010: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1011: LD_ADDR_VAR 0 8
1015: PUSH
1016: LD_INT 30
1018: PUSH
1019: LD_INT 4
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PPUSH
1026: CALL_OW 69
1030: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 2
1038: PUSH
1039: LD_INT 30
1041: PUSH
1042: LD_INT 7
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: PUSH
1049: LD_INT 30
1051: PUSH
1052: LD_INT 6
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: PUSH
1059: EMPTY
1060: LIST
1061: LIST
1062: LIST
1063: PPUSH
1064: CALL_OW 69
1068: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1069: LD_ADDR_VAR 0 10
1073: PUSH
1074: LD_INT 30
1076: PUSH
1077: LD_INT 3
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PPUSH
1084: CALL_OW 69
1088: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1089: LD_ADDR_VAR 0 11
1093: PUSH
1094: LD_INT 2
1096: PUSH
1097: LD_INT 30
1099: PUSH
1100: LD_INT 32
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: PUSH
1107: LD_INT 30
1109: PUSH
1110: LD_INT 31
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: LIST
1121: PPUSH
1122: CALL_OW 69
1126: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1127: LD_VAR 0 7
1131: PPUSH
1132: LD_STRING Gamma
1134: PPUSH
1135: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1139: LD_VAR 0 7
1143: PPUSH
1144: CALL_OW 274
1148: PPUSH
1149: LD_INT 2
1151: PPUSH
1152: LD_INT 10000
1154: PPUSH
1155: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1159: LD_VAR 0 7
1163: PPUSH
1164: CALL_OW 274
1168: PPUSH
1169: LD_INT 1
1171: PPUSH
1172: LD_INT 10000
1174: PPUSH
1175: CALL_OW 277
// if dep then
1179: LD_VAR 0 7
1183: IFFALSE 1283
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1185: LD_EXP 7
1189: PPUSH
1190: LD_VAR 0 7
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: CALL_OW 52
// if Brown then
1203: LD_EXP 14
1207: IFFALSE 1243
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1209: LD_EXP 14
1213: PPUSH
1214: LD_VAR 0 7
1218: PUSH
1219: LD_INT 1
1221: ARRAY
1222: PPUSH
1223: CALL_OW 52
// team := team diff Brown ;
1227: LD_ADDR_VAR 0 6
1231: PUSH
1232: LD_VAR 0 6
1236: PUSH
1237: LD_EXP 14
1241: DIFF
1242: ST_TO_ADDR
// end ; if Donaldson then
1243: LD_EXP 13
1247: IFFALSE 1283
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1249: LD_EXP 13
1253: PPUSH
1254: LD_VAR 0 7
1258: PUSH
1259: LD_INT 1
1261: ARRAY
1262: PPUSH
1263: CALL_OW 52
// team := team diff Donaldson ;
1267: LD_ADDR_VAR 0 6
1271: PUSH
1272: LD_VAR 0 6
1276: PUSH
1277: LD_EXP 13
1281: DIFF
1282: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1283: LD_VAR 0 11
1287: PUSH
1288: LD_VAR 0 6
1292: PPUSH
1293: LD_INT 25
1295: PUSH
1296: LD_INT 1
1298: PUSH
1299: EMPTY
1300: LIST
1301: LIST
1302: PPUSH
1303: CALL_OW 72
1307: AND
1308: IFFALSE 1417
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1310: LD_ADDR_VAR 0 12
1314: PUSH
1315: LD_VAR 0 6
1319: PPUSH
1320: LD_INT 25
1322: PUSH
1323: LD_INT 1
1325: PUSH
1326: EMPTY
1327: LIST
1328: LIST
1329: PPUSH
1330: CALL_OW 72
1334: ST_TO_ADDR
// for i in bun do
1335: LD_ADDR_VAR 0 13
1339: PUSH
1340: LD_VAR 0 11
1344: PUSH
1345: FOR_IN
1346: IFFALSE 1415
// begin if not filter then
1348: LD_VAR 0 12
1352: NOT
1353: IFFALSE 1357
// break ;
1355: GO 1415
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1357: LD_VAR 0 12
1361: PUSH
1362: LD_INT 1
1364: ARRAY
1365: PPUSH
1366: LD_VAR 0 13
1370: PPUSH
1371: CALL_OW 52
// team := team diff filter [ 1 ] ;
1375: LD_ADDR_VAR 0 6
1379: PUSH
1380: LD_VAR 0 6
1384: PUSH
1385: LD_VAR 0 12
1389: PUSH
1390: LD_INT 1
1392: ARRAY
1393: DIFF
1394: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1395: LD_ADDR_VAR 0 12
1399: PUSH
1400: LD_VAR 0 12
1404: PPUSH
1405: LD_INT 1
1407: PPUSH
1408: CALL_OW 3
1412: ST_TO_ADDR
// end ;
1413: GO 1345
1415: POP
1416: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1417: LD_VAR 0 8
1421: PUSH
1422: LD_VAR 0 6
1426: PPUSH
1427: LD_INT 25
1429: PUSH
1430: LD_INT 1
1432: PUSH
1433: EMPTY
1434: LIST
1435: LIST
1436: PPUSH
1437: CALL_OW 72
1441: AND
1442: IFFALSE 1564
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1444: LD_ADDR_VAR 0 12
1448: PUSH
1449: LD_VAR 0 6
1453: PPUSH
1454: LD_INT 25
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 72
1468: ST_TO_ADDR
// for i = 1 to filter do
1469: LD_ADDR_VAR 0 13
1473: PUSH
1474: DOUBLE
1475: LD_INT 1
1477: DEC
1478: ST_TO_ADDR
1479: LD_VAR 0 12
1483: PUSH
1484: FOR_TO
1485: IFFALSE 1546
// begin if ( i <= 6 ) then
1487: LD_VAR 0 13
1491: PUSH
1492: LD_INT 6
1494: LESSEQUAL
1495: IFFALSE 1523
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1497: LD_VAR 0 12
1501: PUSH
1502: LD_VAR 0 13
1506: ARRAY
1507: PPUSH
1508: LD_VAR 0 8
1512: PUSH
1513: LD_INT 1
1515: ARRAY
1516: PPUSH
1517: CALL_OW 52
1521: GO 1544
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1523: LD_VAR 0 12
1527: PUSH
1528: LD_VAR 0 13
1532: ARRAY
1533: PPUSH
1534: LD_INT 1
1536: PPUSH
1537: LD_INT 0
1539: PPUSH
1540: CALL_OW 49
// end ;
1544: GO 1484
1546: POP
1547: POP
// team := team diff filter ;
1548: LD_ADDR_VAR 0 6
1552: PUSH
1553: LD_VAR 0 6
1557: PUSH
1558: LD_VAR 0 12
1562: DIFF
1563: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1564: LD_VAR 0 9
1568: PUSH
1569: LD_VAR 0 6
1573: PPUSH
1574: LD_INT 25
1576: PUSH
1577: LD_INT 4
1579: PUSH
1580: EMPTY
1581: LIST
1582: LIST
1583: PPUSH
1584: CALL_OW 72
1588: AND
1589: IFFALSE 1711
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1591: LD_ADDR_VAR 0 12
1595: PUSH
1596: LD_VAR 0 6
1600: PPUSH
1601: LD_INT 25
1603: PUSH
1604: LD_INT 4
1606: PUSH
1607: EMPTY
1608: LIST
1609: LIST
1610: PPUSH
1611: CALL_OW 72
1615: ST_TO_ADDR
// for i = 1 to filter do
1616: LD_ADDR_VAR 0 13
1620: PUSH
1621: DOUBLE
1622: LD_INT 1
1624: DEC
1625: ST_TO_ADDR
1626: LD_VAR 0 12
1630: PUSH
1631: FOR_TO
1632: IFFALSE 1693
// begin if ( i <= 6 ) then
1634: LD_VAR 0 13
1638: PUSH
1639: LD_INT 6
1641: LESSEQUAL
1642: IFFALSE 1670
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1644: LD_VAR 0 12
1648: PUSH
1649: LD_VAR 0 13
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 9
1659: PUSH
1660: LD_INT 1
1662: ARRAY
1663: PPUSH
1664: CALL_OW 52
1668: GO 1691
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1670: LD_VAR 0 12
1674: PUSH
1675: LD_VAR 0 13
1679: ARRAY
1680: PPUSH
1681: LD_INT 1
1683: PPUSH
1684: LD_INT 0
1686: PPUSH
1687: CALL_OW 49
// end ;
1691: GO 1631
1693: POP
1694: POP
// team := team diff filter ;
1695: LD_ADDR_VAR 0 6
1699: PUSH
1700: LD_VAR 0 6
1704: PUSH
1705: LD_VAR 0 12
1709: DIFF
1710: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1711: LD_VAR 0 10
1715: PUSH
1716: LD_VAR 0 6
1720: PPUSH
1721: LD_INT 25
1723: PUSH
1724: LD_INT 3
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PPUSH
1731: CALL_OW 72
1735: AND
1736: IFFALSE 1858
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1738: LD_ADDR_VAR 0 12
1742: PUSH
1743: LD_VAR 0 6
1747: PPUSH
1748: LD_INT 25
1750: PUSH
1751: LD_INT 3
1753: PUSH
1754: EMPTY
1755: LIST
1756: LIST
1757: PPUSH
1758: CALL_OW 72
1762: ST_TO_ADDR
// for i = 1 to filter do
1763: LD_ADDR_VAR 0 13
1767: PUSH
1768: DOUBLE
1769: LD_INT 1
1771: DEC
1772: ST_TO_ADDR
1773: LD_VAR 0 12
1777: PUSH
1778: FOR_TO
1779: IFFALSE 1840
// begin if ( i <= 6 ) then
1781: LD_VAR 0 13
1785: PUSH
1786: LD_INT 6
1788: LESSEQUAL
1789: IFFALSE 1817
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
1791: LD_VAR 0 12
1795: PUSH
1796: LD_VAR 0 13
1800: ARRAY
1801: PPUSH
1802: LD_VAR 0 10
1806: PUSH
1807: LD_INT 1
1809: ARRAY
1810: PPUSH
1811: CALL_OW 52
1815: GO 1838
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1817: LD_VAR 0 12
1821: PUSH
1822: LD_VAR 0 13
1826: ARRAY
1827: PPUSH
1828: LD_INT 1
1830: PPUSH
1831: LD_INT 0
1833: PPUSH
1834: CALL_OW 49
// end ;
1838: GO 1778
1840: POP
1841: POP
// team := team diff filter ;
1842: LD_ADDR_VAR 0 6
1846: PUSH
1847: LD_VAR 0 6
1851: PUSH
1852: LD_VAR 0 12
1856: DIFF
1857: ST_TO_ADDR
// end ; if team then
1858: LD_VAR 0 6
1862: IFFALSE 1905
// for i in team do
1864: LD_ADDR_VAR 0 13
1868: PUSH
1869: LD_VAR 0 6
1873: PUSH
1874: FOR_IN
1875: IFFALSE 1903
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
1877: LD_VAR 0 13
1881: PPUSH
1882: LD_INT 1
1884: PPUSH
1885: LD_INT 0
1887: PPUSH
1888: CALL_OW 49
// ComHold ( i ) ;
1892: LD_VAR 0 13
1896: PPUSH
1897: CALL_OW 140
// end ;
1901: GO 1874
1903: POP
1904: POP
// if fac then
1905: LD_VAR 0 10
1909: IFFALSE 1945
// if UnitsInside ( fac [ 1 ] ) then
1911: LD_VAR 0 10
1915: PUSH
1916: LD_INT 1
1918: ARRAY
1919: PPUSH
1920: CALL_OW 313
1924: IFFALSE 1945
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
1926: LD_VAR 0 10
1930: PUSH
1931: LD_INT 1
1933: ARRAY
1934: PPUSH
1935: LD_INT 10
1937: PPUSH
1938: LD_INT 0
1940: PPUSH
1941: CALL_OW 486
// if lab then
1945: LD_VAR 0 9
1949: IFFALSE 1985
// if UnitsInside ( lab [ 1 ] ) then
1951: LD_VAR 0 9
1955: PUSH
1956: LD_INT 1
1958: ARRAY
1959: PPUSH
1960: CALL_OW 313
1964: IFFALSE 1985
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
1966: LD_VAR 0 9
1970: PUSH
1971: LD_INT 1
1973: ARRAY
1974: PPUSH
1975: LD_INT 10
1977: PPUSH
1978: LD_INT 0
1980: PPUSH
1981: CALL_OW 486
// uc_side := 4 ;
1985: LD_ADDR_OWVAR 20
1989: PUSH
1990: LD_INT 4
1992: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
1993: LD_ADDR_EXP 17
1997: PUSH
1998: LD_STRING Harisson
2000: PPUSH
2001: LD_INT 0
2003: PPUSH
2004: LD_STRING 
2006: PPUSH
2007: CALL 3666 0 3
2011: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_light_wheeled , engine_combustion , control_manual , us_machine_gun , 100 ) ;
2012: LD_ADDR_VAR 0 5
2016: PUSH
2017: LD_INT 4
2019: PPUSH
2020: LD_INT 1
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 2
2034: PPUSH
2035: LD_INT 100
2037: PPUSH
2038: CALL 3729 0 7
2042: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2043: LD_VAR 0 5
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
2055: LD_VAR 0 5
2059: PPUSH
2060: LD_INT 21
2062: PPUSH
2063: LD_INT 8
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2073: LD_EXP 17
2077: PPUSH
2078: LD_VAR 0 5
2082: PPUSH
2083: CALL_OW 52
// end ;
2087: LD_VAR 0 1
2091: RET
// function PrepareBase ; var blist , i , b ; begin
2092: LD_INT 0
2094: PPUSH
2095: PPUSH
2096: PPUSH
2097: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2098: LD_INT 71
2100: PPUSH
2101: LD_INT 5
2103: PPUSH
2104: LD_INT 1
2106: PPUSH
2107: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2111: LD_ADDR_VAR 0 2
2115: PUSH
2116: LD_STRING GammaBase
2118: PPUSH
2119: EMPTY
2120: PPUSH
2121: CALL_OW 30
2125: ST_TO_ADDR
// if not blist and debug then
2126: LD_VAR 0 2
2130: NOT
2131: PUSH
2132: LD_EXP 1
2136: AND
2137: IFFALSE 2177
// blist := [ [ b_depot , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2139: LD_ADDR_VAR 0 2
2143: PUSH
2144: LD_INT 0
2146: PUSH
2147: LD_INT 51
2149: PUSH
2150: LD_INT 10
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 3
2158: PUSH
2159: LD_INT 0
2161: PUSH
2162: LD_INT 0
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: EMPTY
2175: LIST
2176: ST_TO_ADDR
// if not blist then
2177: LD_VAR 0 2
2181: NOT
2182: IFFALSE 2186
// exit ;
2184: GO 2366
// uc_side := 1 ;
2186: LD_ADDR_OWVAR 20
2190: PUSH
2191: LD_INT 1
2193: ST_TO_ADDR
// uc_nation := 1 ;
2194: LD_ADDR_OWVAR 21
2198: PUSH
2199: LD_INT 1
2201: ST_TO_ADDR
// for i in blist do
2202: LD_ADDR_VAR 0 3
2206: PUSH
2207: LD_VAR 0 2
2211: PUSH
2212: FOR_IN
2213: IFFALSE 2364
// begin bc_type := i [ 1 ] ;
2215: LD_ADDR_OWVAR 42
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 1
2227: ARRAY
2228: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2229: LD_ADDR_OWVAR 43
2233: PUSH
2234: LD_VAR 0 3
2238: PUSH
2239: LD_INT 5
2241: ARRAY
2242: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2243: LD_VAR 0 3
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PUSH
2252: LD_INT 7
2254: PUSH
2255: LD_INT 8
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: IN
2262: IFFALSE 2292
// begin bc_kind1 := i [ 7 ] ;
2264: LD_ADDR_OWVAR 44
2268: PUSH
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 7
2276: ARRAY
2277: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2278: LD_ADDR_OWVAR 45
2282: PUSH
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 8
2290: ARRAY
2291: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2292: LD_ADDR_VAR 0 4
2296: PUSH
2297: LD_VAR 0 3
2301: PUSH
2302: LD_INT 2
2304: ARRAY
2305: PPUSH
2306: LD_VAR 0 3
2310: PUSH
2311: LD_INT 3
2313: ARRAY
2314: PPUSH
2315: LD_VAR 0 3
2319: PUSH
2320: LD_INT 4
2322: ARRAY
2323: PPUSH
2324: CALL_OW 47
2328: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2329: LD_VAR 0 4
2333: PPUSH
2334: CALL_OW 266
2338: PUSH
2339: LD_INT 32
2341: EQUAL
2342: IFFALSE 2362
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2344: LD_VAR 0 4
2348: PPUSH
2349: LD_VAR 0 3
2353: PUSH
2354: LD_INT 7
2356: ARRAY
2357: PPUSH
2358: CALL_OW 431
// end ; end ;
2362: GO 2212
2364: POP
2365: POP
// end ; end_of_file
2366: LD_VAR 0 1
2370: RET
// export function Action ; var points , i , sol , team , filter ; begin
2371: LD_INT 0
2373: PPUSH
2374: PPUSH
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
// InGameOn ;
2379: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2383: LD_INT 33
2385: PPUSH
2386: LD_INT 11
2388: PPUSH
2389: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_INT 29
2400: PUSH
2401: LD_INT 21
2403: PUSH
2404: EMPTY
2405: LIST
2406: LIST
2407: PUSH
2408: LD_INT 41
2410: PUSH
2411: LD_INT 28
2413: PUSH
2414: EMPTY
2415: LIST
2416: LIST
2417: PUSH
2418: LD_INT 52
2420: PUSH
2421: LD_INT 26
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: PUSH
2428: LD_INT 49
2430: PUSH
2431: LD_INT 16
2433: PUSH
2434: EMPTY
2435: LIST
2436: LIST
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: LIST
2442: LIST
2443: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2444: LD_ADDR_VAR 0 4
2448: PUSH
2449: LD_INT 22
2451: PUSH
2452: LD_INT 1
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PUSH
2459: LD_INT 26
2461: PUSH
2462: LD_INT 1
2464: PUSH
2465: EMPTY
2466: LIST
2467: LIST
2468: PUSH
2469: EMPTY
2470: LIST
2471: LIST
2472: PPUSH
2473: CALL_OW 69
2477: PUSH
2478: LD_EXP 7
2482: PUSH
2483: LD_EXP 14
2487: PUSH
2488: LD_EXP 11
2492: PUSH
2493: LD_EXP 12
2497: PUSH
2498: LD_EXP 8
2502: PUSH
2503: LD_EXP 15
2507: PUSH
2508: LD_EXP 16
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: LIST
2518: LIST
2519: LIST
2520: LIST
2521: DIFF
2522: PUSH
2523: LD_INT 1
2525: ARRAY
2526: ST_TO_ADDR
// if sol then
2527: LD_VAR 0 4
2531: IFFALSE 2562
// begin ComMoveXY ( sol , 50 , 18 ) ;
2533: LD_VAR 0 4
2537: PPUSH
2538: LD_INT 50
2540: PPUSH
2541: LD_INT 18
2543: PPUSH
2544: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
2548: LD_VAR 0 4
2552: PPUSH
2553: LD_EXP 17
2557: PPUSH
2558: CALL_OW 179
// end ; for i in points do
2562: LD_ADDR_VAR 0 3
2566: PUSH
2567: LD_VAR 0 2
2571: PUSH
2572: FOR_IN
2573: IFFALSE 2604
// AddComMoveXY ( Harisson , i [ 1 ] , i [ 2 ] ) ;
2575: LD_EXP 17
2579: PPUSH
2580: LD_VAR 0 3
2584: PUSH
2585: LD_INT 1
2587: ARRAY
2588: PPUSH
2589: LD_VAR 0 3
2593: PUSH
2594: LD_INT 2
2596: ARRAY
2597: PPUSH
2598: CALL_OW 171
2602: GO 2572
2604: POP
2605: POP
// AddComExitVehicle ( Harisson ) ;
2606: LD_EXP 17
2610: PPUSH
2611: CALL_OW 181
// repeat wait ( 3 ) ;
2615: LD_INT 3
2617: PPUSH
2618: CALL_OW 67
// until not IsInUnit ( Harisson ) ;
2622: LD_EXP 17
2626: PPUSH
2627: CALL_OW 310
2631: NOT
2632: IFFALSE 2615
// Say ( sol , D1-Sol1-1 ) ;
2634: LD_VAR 0 4
2638: PPUSH
2639: LD_STRING D1-Sol1-1
2641: PPUSH
2642: CALL_OW 88
// ComTurnUnit ( Harisson , sol ) ;
2646: LD_EXP 17
2650: PPUSH
2651: LD_VAR 0 4
2655: PPUSH
2656: CALL_OW 119
// Say ( Harisson , D1-Har-1 ) ;
2660: LD_EXP 17
2664: PPUSH
2665: LD_STRING D1-Har-1
2667: PPUSH
2668: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2672: LD_INT 10
2674: PPUSH
2675: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
2679: LD_VAR 0 4
2683: PPUSH
2684: LD_INT 35
2686: PPUSH
2687: LD_INT 21
2689: PPUSH
2690: CALL_OW 111
// ComExitBuilding ( JMM ) ;
2694: LD_EXP 7
2698: PPUSH
2699: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
2703: LD_EXP 7
2707: PPUSH
2708: LD_EXP 17
2712: PPUSH
2713: CALL_OW 172
// ComTurnUnit ( Harisson , JMM ) ;
2717: LD_EXP 17
2721: PPUSH
2722: LD_EXP 7
2726: PPUSH
2727: CALL_OW 119
// repeat wait ( 3 ) ;
2731: LD_INT 3
2733: PPUSH
2734: CALL_OW 67
// until GetDistUnits ( JMM , Harisson ) < 4 ;
2738: LD_EXP 7
2742: PPUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 296
2752: PUSH
2753: LD_INT 4
2755: LESS
2756: IFFALSE 2731
// ComTurnUnit ( JMM , Harisson ) ;
2758: LD_EXP 7
2762: PPUSH
2763: LD_EXP 17
2767: PPUSH
2768: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
2772: LD_EXP 7
2776: PPUSH
2777: LD_STRING D1-JMM-1
2779: PPUSH
2780: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
2784: LD_EXP 17
2788: PPUSH
2789: LD_STRING D1-Har-2
2791: PPUSH
2792: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2796: LD_EXP 7
2800: PPUSH
2801: LD_STRING D1-JMM-2
2803: PPUSH
2804: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
2808: LD_EXP 17
2812: PPUSH
2813: LD_STRING D1-Har-3
2815: PPUSH
2816: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2820: LD_EXP 7
2824: PPUSH
2825: LD_STRING D1-JMM-3
2827: PPUSH
2828: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
2832: LD_EXP 17
2836: PPUSH
2837: LD_STRING D1-Har-4
2839: PPUSH
2840: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2844: LD_EXP 7
2848: PPUSH
2849: LD_STRING D1-JMM-4
2851: PPUSH
2852: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
2856: LD_EXP 17
2860: PPUSH
2861: LD_STRING D1-Har-5
2863: PPUSH
2864: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
2868: LD_EXP 7
2872: PPUSH
2873: LD_STRING D1-JMM-5
2875: PPUSH
2876: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
2880: LD_EXP 17
2884: PPUSH
2885: LD_STRING D1-Har-6
2887: PPUSH
2888: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
2892: LD_EXP 7
2896: PPUSH
2897: LD_STRING D1-JMM-6
2899: PPUSH
2900: CALL_OW 88
// EndMission ;
2904: CALL 2913 0 0
// end ;
2908: LD_VAR 0 1
2912: RET
// export function EndMission ; var commander , i , all ; begin
2913: LD_INT 0
2915: PPUSH
2916: PPUSH
2917: PPUSH
2918: PPUSH
// case gamma_commander of 1 :
2919: LD_EXP 18
2923: PUSH
2924: LD_INT 1
2926: DOUBLE
2927: EQUAL
2928: IFTRUE 2932
2930: GO 2945
2932: POP
// commander := Donaldson ; 2 :
2933: LD_ADDR_VAR 0 2
2937: PUSH
2938: LD_EXP 13
2942: ST_TO_ADDR
2943: GO 2988
2945: LD_INT 2
2947: DOUBLE
2948: EQUAL
2949: IFTRUE 2953
2951: GO 2966
2953: POP
// commander := Brown ; 3 :
2954: LD_ADDR_VAR 0 2
2958: PUSH
2959: LD_EXP 14
2963: ST_TO_ADDR
2964: GO 2988
2966: LD_INT 3
2968: DOUBLE
2969: EQUAL
2970: IFTRUE 2974
2972: GO 2987
2974: POP
// commander := Houten ; end ;
2975: LD_ADDR_VAR 0 2
2979: PUSH
2980: LD_EXP 15
2984: ST_TO_ADDR
2985: GO 2988
2987: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
2988: LD_ADDR_VAR 0 4
2992: PUSH
2993: LD_INT 22
2995: PUSH
2996: LD_INT 1
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PUSH
3003: LD_INT 21
3005: PUSH
3006: LD_INT 1
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: PPUSH
3017: CALL_OW 69
3021: PUSH
3022: LD_EXP 7
3026: PUSH
3027: LD_VAR 0 2
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: DIFF
3036: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , [ commander , Harisson ] ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3037: LD_ADDR_EXP 4
3041: PUSH
3042: LD_STRING 1
3044: PPUSH
3045: LD_INT 10
3047: PPUSH
3048: LD_INT 10
3050: PPUSH
3051: LD_INT -5
3053: PUSH
3054: LD_EXP 7
3058: PUSH
3059: LD_INT -2
3061: PUSH
3062: LD_INT -3
3064: PUSH
3065: LD_INT -5
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: PUSH
3075: LD_VAR 0 4
3079: ADD
3080: PUSH
3081: LD_INT -6
3083: PUSH
3084: LD_INT -4
3086: PUSH
3087: LD_VAR 0 2
3091: PUSH
3092: LD_EXP 17
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: PUSH
3101: EMPTY
3102: LIST
3103: LIST
3104: LIST
3105: ADD
3106: PPUSH
3107: LD_INT 1
3109: PUSH
3110: LD_INT 3
3112: PUSH
3113: EMPTY
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 3
3119: PUSH
3120: LD_INT 3
3122: PUSH
3123: LD_INT 6
3125: PUSH
3126: EMPTY
3127: LIST
3128: LIST
3129: LIST
3130: PUSH
3131: LD_INT 4
3133: PUSH
3134: LD_INT 1
3136: PUSH
3137: EMPTY
3138: LIST
3139: LIST
3140: PUSH
3141: EMPTY
3142: LIST
3143: LIST
3144: LIST
3145: PPUSH
3146: CALL_OW 42
3150: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson ] ^ save_group , 07_othersGamma ) ;
3151: LD_VAR 0 4
3155: PUSH
3156: LD_EXP 7
3160: PUSH
3161: LD_EXP 8
3165: PUSH
3166: LD_EXP 10
3170: PUSH
3171: LD_EXP 11
3175: PUSH
3176: LD_EXP 12
3180: PUSH
3181: LD_EXP 9
3185: PUSH
3186: LD_EXP 13
3190: PUSH
3191: LD_EXP 14
3195: PUSH
3196: LD_EXP 15
3200: PUSH
3201: LD_EXP 17
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: LIST
3214: LIST
3215: LIST
3216: LIST
3217: PUSH
3218: LD_EXP 4
3222: ADD
3223: DIFF
3224: PPUSH
3225: LD_STRING 07_othersGamma
3227: PPUSH
3228: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , 0 ] , 07_others ) ;
3232: LD_EXP 4
3236: PUSH
3237: LD_EXP 7
3241: PUSH
3242: LD_EXP 8
3246: PUSH
3247: LD_EXP 10
3251: PUSH
3252: LD_EXP 11
3256: PUSH
3257: LD_EXP 12
3261: PUSH
3262: LD_EXP 9
3266: PUSH
3267: LD_EXP 13
3271: PUSH
3272: LD_EXP 14
3276: PUSH
3277: LD_EXP 15
3281: PUSH
3282: LD_EXP 17
3286: PUSH
3287: LD_INT 0
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: LIST
3294: LIST
3295: LIST
3296: LIST
3297: LIST
3298: LIST
3299: LIST
3300: LIST
3301: LIST
3302: DIFF
3303: PPUSH
3304: LD_STRING 07_others
3306: PPUSH
3307: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3311: LD_EXP 7
3315: PPUSH
3316: LD_EXP 5
3320: PUSH
3321: LD_STRING JMM
3323: STR
3324: PPUSH
3325: CALL_OW 38
// if Lisa then
3329: LD_EXP 10
3333: IFFALSE 3375
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3335: LD_EXP 10
3339: PPUSH
3340: LD_EXP 5
3344: PUSH
3345: LD_STRING Lisa
3347: STR
3348: PPUSH
3349: CALL_OW 38
// if Lisa in save_group then
3353: LD_EXP 10
3357: PUSH
3358: LD_EXP 4
3362: IN
3363: IFFALSE 3375
// SaveVariable ( true , LisaIn07 ) ;
3365: LD_INT 1
3367: PPUSH
3368: LD_STRING LisaIn07
3370: PPUSH
3371: CALL_OW 39
// end ; if Bobby then
3375: LD_EXP 12
3379: IFFALSE 3421
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3381: LD_EXP 12
3385: PPUSH
3386: LD_EXP 5
3390: PUSH
3391: LD_STRING Bobby
3393: STR
3394: PPUSH
3395: CALL_OW 38
// if Bobby in save_group then
3399: LD_EXP 12
3403: PUSH
3404: LD_EXP 4
3408: IN
3409: IFFALSE 3421
// SaveVariable ( true , BobbyIn07 ) ;
3411: LD_INT 1
3413: PPUSH
3414: LD_STRING BobbyIn07
3416: PPUSH
3417: CALL_OW 39
// end ; if Cyrus then
3421: LD_EXP 11
3425: IFFALSE 3467
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
3427: LD_EXP 11
3431: PPUSH
3432: LD_EXP 5
3436: PUSH
3437: LD_STRING Cyrus
3439: STR
3440: PPUSH
3441: CALL_OW 38
// if Cyrus in save_group then
3445: LD_EXP 11
3449: PUSH
3450: LD_EXP 4
3454: IN
3455: IFFALSE 3467
// SaveVariable ( true , CyrusIn07 ) ;
3457: LD_INT 1
3459: PPUSH
3460: LD_STRING CyrusIn07
3462: PPUSH
3463: CALL_OW 39
// end ; if Brown then
3467: LD_EXP 14
3471: IFFALSE 3513
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
3473: LD_EXP 14
3477: PPUSH
3478: LD_EXP 5
3482: PUSH
3483: LD_STRING Brown
3485: STR
3486: PPUSH
3487: CALL_OW 38
// if Brown in save_group then
3491: LD_EXP 14
3495: PUSH
3496: LD_EXP 4
3500: IN
3501: IFFALSE 3513
// SaveVariable ( true , BrownIn07 ) ;
3503: LD_INT 1
3505: PPUSH
3506: LD_STRING BrownIn07
3508: PPUSH
3509: CALL_OW 39
// end ; if Donaldson then
3513: LD_EXP 13
3517: IFFALSE 3559
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
3519: LD_EXP 13
3523: PPUSH
3524: LD_EXP 5
3528: PUSH
3529: LD_STRING Donaldson
3531: STR
3532: PPUSH
3533: CALL_OW 38
// if Donaldson in save_group then
3537: LD_EXP 13
3541: PUSH
3542: LD_EXP 4
3546: IN
3547: IFFALSE 3559
// SaveVariable ( true , DonaldsonIn07 ) ;
3549: LD_INT 1
3551: PPUSH
3552: LD_STRING DonaldsonIn07
3554: PPUSH
3555: CALL_OW 39
// end ; if Gladstone then
3559: LD_EXP 8
3563: IFFALSE 3605
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
3565: LD_EXP 8
3569: PPUSH
3570: LD_EXP 5
3574: PUSH
3575: LD_STRING Gladstone
3577: STR
3578: PPUSH
3579: CALL_OW 38
// if Gladstone in save_group then
3583: LD_EXP 8
3587: PUSH
3588: LD_EXP 4
3592: IN
3593: IFFALSE 3605
// SaveVariable ( true , GladstoneIn07 ) ;
3595: LD_INT 1
3597: PPUSH
3598: LD_STRING GladstoneIn07
3600: PPUSH
3601: CALL_OW 39
// end ; if Khatam then
3605: LD_EXP 16
3609: IFFALSE 3651
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
3611: LD_EXP 16
3615: PPUSH
3616: LD_EXP 5
3620: PUSH
3621: LD_STRING Khatam
3623: STR
3624: PPUSH
3625: CALL_OW 38
// if Khatam in save_group then
3629: LD_EXP 16
3633: PUSH
3634: LD_EXP 4
3638: IN
3639: IFFALSE 3651
// SaveVariable ( true , KhatamIn07 ) ;
3641: LD_INT 1
3643: PPUSH
3644: LD_STRING KhatamIn07
3646: PPUSH
3647: CALL_OW 39
// end ; ChangeMap ( 1 , %_cont ) ;
3651: LD_INT 1
3653: PPUSH
3654: LD_STRING %_cont
3656: PPUSH
3657: CALL_OW 340
// end ; end_of_file
3661: LD_VAR 0 1
3665: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3666: LD_INT 0
3668: PPUSH
3669: PPUSH
// if exist_mode then
3670: LD_VAR 0 2
3674: IFFALSE 3699
// unit := CreateCharacter ( prefix & ident ) else
3676: LD_ADDR_VAR 0 5
3680: PUSH
3681: LD_VAR 0 3
3685: PUSH
3686: LD_VAR 0 1
3690: STR
3691: PPUSH
3692: CALL_OW 34
3696: ST_TO_ADDR
3697: GO 3714
// unit := NewCharacter ( ident ) ;
3699: LD_ADDR_VAR 0 5
3703: PUSH
3704: LD_VAR 0 1
3708: PPUSH
3709: CALL_OW 25
3713: ST_TO_ADDR
// result := unit ;
3714: LD_ADDR_VAR 0 4
3718: PUSH
3719: LD_VAR 0 5
3723: ST_TO_ADDR
// end ;
3724: LD_VAR 0 4
3728: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
3729: LD_INT 0
3731: PPUSH
// uc_side := side ;
3732: LD_ADDR_OWVAR 20
3736: PUSH
3737: LD_VAR 0 1
3741: ST_TO_ADDR
// uc_nation := nation ;
3742: LD_ADDR_OWVAR 21
3746: PUSH
3747: LD_VAR 0 2
3751: ST_TO_ADDR
// vc_chassis := chassis ;
3752: LD_ADDR_OWVAR 37
3756: PUSH
3757: LD_VAR 0 3
3761: ST_TO_ADDR
// vc_engine := engine ;
3762: LD_ADDR_OWVAR 39
3766: PUSH
3767: LD_VAR 0 4
3771: ST_TO_ADDR
// vc_control := control ;
3772: LD_ADDR_OWVAR 38
3776: PUSH
3777: LD_VAR 0 5
3781: ST_TO_ADDR
// vc_weapon := weapon ;
3782: LD_ADDR_OWVAR 40
3786: PUSH
3787: LD_VAR 0 6
3791: ST_TO_ADDR
// vc_fuel_battery := fuel ;
3792: LD_ADDR_OWVAR 41
3796: PUSH
3797: LD_VAR 0 7
3801: ST_TO_ADDR
// result := CreateVehicle ;
3802: LD_ADDR_VAR 0 8
3806: PUSH
3807: CALL_OW 45
3811: ST_TO_ADDR
// end ;
3812: LD_VAR 0 8
3816: RET
// export function SayX ( units , ident ) ; var i ; begin
3817: LD_INT 0
3819: PPUSH
3820: PPUSH
// result := false ;
3821: LD_ADDR_VAR 0 3
3825: PUSH
3826: LD_INT 0
3828: ST_TO_ADDR
// if not units then
3829: LD_VAR 0 1
3833: NOT
3834: IFFALSE 3838
// exit ;
3836: GO 3892
// for i in units do
3838: LD_ADDR_VAR 0 4
3842: PUSH
3843: LD_VAR 0 1
3847: PUSH
3848: FOR_IN
3849: IFFALSE 3890
// if IsOk ( i ) then
3851: LD_VAR 0 4
3855: PPUSH
3856: CALL_OW 302
3860: IFFALSE 3888
// begin Say ( i , ident ) ;
3862: LD_VAR 0 4
3866: PPUSH
3867: LD_VAR 0 2
3871: PPUSH
3872: CALL_OW 88
// result := i ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: LD_VAR 0 4
3885: ST_TO_ADDR
// break ;
3886: GO 3890
// end ;
3888: GO 3848
3890: POP
3891: POP
// end ;
3892: LD_VAR 0 3
3896: RET
