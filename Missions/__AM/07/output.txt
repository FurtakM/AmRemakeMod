// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2574 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2310 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 3881 0 3
 179: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 180: LD_EXP 7
 184: PPUSH
 185: CALL_OW 257
 189: PUSH
 190: LD_INT 2
 192: EQUAL
 193: IFFALSE 207
// SetClass ( JMM , 1 ) ;
 195: LD_EXP 7
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_STRING GammaCommander
 214: PPUSH
 215: LD_INT 3
 217: PPUSH
 218: CALL_OW 30
 222: ST_TO_ADDR
// if gamma_commander = 1 then
 223: LD_EXP 18
 227: PUSH
 228: LD_INT 1
 230: EQUAL
 231: IFFALSE 257
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 233: LD_ADDR_EXP 13
 237: PUSH
 238: LD_STRING Donaldson
 240: PPUSH
 241: LD_EXP 1
 245: NOT
 246: PPUSH
 247: LD_STRING 04_
 249: PPUSH
 250: CALL 3881 0 3
 254: ST_TO_ADDR
// end else
 255: GO 328
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 257: LD_STRING DonaldsonIn06
 259: PPUSH
 260: LD_INT 0
 262: PPUSH
 263: CALL_OW 30
 267: IFFALSE 293
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 269: LD_ADDR_EXP 13
 273: PUSH
 274: LD_STRING Donaldson
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 06c_
 285: PPUSH
 286: CALL 3881 0 3
 290: ST_TO_ADDR
 291: GO 328
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 293: LD_STRING DonaldsonStayInDelta
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 30
 303: NOT
 304: IFFALSE 328
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 306: LD_ADDR_EXP 13
 310: PUSH
 311: LD_STRING Donaldson
 313: PPUSH
 314: LD_EXP 1
 318: NOT
 319: PPUSH
 320: LD_STRING 04_
 322: PPUSH
 323: CALL 3881 0 3
 327: ST_TO_ADDR
// end ; if Donaldson then
 328: LD_EXP 13
 332: IFFALSE 350
// team := team ^ Donaldson ;
 334: LD_ADDR_VAR 0 6
 338: PUSH
 339: LD_VAR 0 6
 343: PUSH
 344: LD_EXP 13
 348: ADD
 349: ST_TO_ADDR
// if gamma_commander = 2 then
 350: LD_EXP 18
 354: PUSH
 355: LD_INT 2
 357: EQUAL
 358: IFFALSE 384
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 360: LD_ADDR_EXP 14
 364: PUSH
 365: LD_STRING Brown
 367: PPUSH
 368: LD_EXP 1
 372: NOT
 373: PPUSH
 374: LD_STRING 04_
 376: PPUSH
 377: CALL 3881 0 3
 381: ST_TO_ADDR
// end else
 382: GO 455
// begin if LoadVariable ( BrownIn06 , 0 ) then
 384: LD_STRING BrownIn06
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 30
 394: IFFALSE 420
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 396: LD_ADDR_EXP 14
 400: PUSH
 401: LD_STRING Brown
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: LD_STRING 06c_
 412: PPUSH
 413: CALL 3881 0 3
 417: ST_TO_ADDR
 418: GO 455
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 420: LD_STRING BrownStayInDelta
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 30
 430: NOT
 431: IFFALSE 455
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 433: LD_ADDR_EXP 14
 437: PUSH
 438: LD_STRING Brown
 440: PPUSH
 441: LD_EXP 1
 445: NOT
 446: PPUSH
 447: LD_STRING 04_
 449: PPUSH
 450: CALL 3881 0 3
 454: ST_TO_ADDR
// end ; if Brown then
 455: LD_EXP 14
 459: IFFALSE 477
// team := team ^ Brown ;
 461: LD_ADDR_VAR 0 6
 465: PUSH
 466: LD_VAR 0 6
 470: PUSH
 471: LD_EXP 14
 475: ADD
 476: ST_TO_ADDR
// if gamma_commander = 3 then
 477: LD_EXP 18
 481: PUSH
 482: LD_INT 3
 484: EQUAL
 485: IFFALSE 522
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_STRING VanHouten
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: LD_STRING 
 500: PPUSH
 501: CALL 3881 0 3
 505: ST_TO_ADDR
// team := team ^ Houten ;
 506: LD_ADDR_VAR 0 6
 510: PUSH
 511: LD_VAR 0 6
 515: PUSH
 516: LD_EXP 15
 520: ADD
 521: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 522: LD_STRING GladstoneIn06
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 30
 532: IFFALSE 558
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 534: LD_ADDR_EXP 8
 538: PUSH
 539: LD_STRING Gladstone
 541: PPUSH
 542: LD_EXP 1
 546: NOT
 547: PPUSH
 548: LD_STRING 06c_
 550: PPUSH
 551: CALL 3881 0 3
 555: ST_TO_ADDR
 556: GO 592
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 558: LD_STRING GladstoneStayInDelta
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 30
 568: IFFALSE 592
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 570: LD_ADDR_EXP 8
 574: PUSH
 575: LD_STRING Gladstone
 577: PPUSH
 578: LD_EXP 1
 582: NOT
 583: PPUSH
 584: LD_STRING 06_
 586: PPUSH
 587: CALL 3881 0 3
 591: ST_TO_ADDR
// if Gladstone then
 592: LD_EXP 8
 596: IFFALSE 614
// team := team ^ Gladstone ;
 598: LD_ADDR_VAR 0 6
 602: PUSH
 603: LD_VAR 0 6
 607: PUSH
 608: LD_EXP 8
 612: ADD
 613: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 614: LD_ADDR_EXP 16
 618: PUSH
 619: LD_STRING Khatam
 621: PPUSH
 622: LD_EXP 1
 626: NOT
 627: PPUSH
 628: LD_STRING 03_
 630: PPUSH
 631: CALL 3881 0 3
 635: ST_TO_ADDR
// if Khatam then
 636: LD_EXP 16
 640: IFFALSE 658
// team := team ^ Khatam ;
 642: LD_ADDR_VAR 0 6
 646: PUSH
 647: LD_VAR 0 6
 651: PUSH
 652: LD_EXP 16
 656: ADD
 657: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 658: LD_STRING LisaIn06
 660: PPUSH
 661: LD_INT 0
 663: PPUSH
 664: CALL_OW 30
 668: IFFALSE 694
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 670: LD_ADDR_EXP 10
 674: PUSH
 675: LD_STRING Lisa
 677: PPUSH
 678: LD_EXP 1
 682: NOT
 683: PPUSH
 684: LD_STRING 06c_
 686: PPUSH
 687: CALL 3881 0 3
 691: ST_TO_ADDR
 692: GO 729
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 694: LD_STRING LisaStayInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: IFFALSE 729
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 707: LD_ADDR_EXP 10
 711: PUSH
 712: LD_STRING Lisa
 714: PPUSH
 715: LD_EXP 1
 719: NOT
 720: PPUSH
 721: LD_STRING 04_
 723: PPUSH
 724: CALL 3881 0 3
 728: ST_TO_ADDR
// if Lisa then
 729: LD_EXP 10
 733: IFFALSE 751
// team := team ^ Lisa ;
 735: LD_ADDR_VAR 0 6
 739: PUSH
 740: LD_VAR 0 6
 744: PUSH
 745: LD_EXP 10
 749: ADD
 750: ST_TO_ADDR
// if not Lisa then
 751: LD_EXP 10
 755: NOT
 756: IFFALSE 1009
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 758: LD_STRING CyrusIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: IFFALSE 794
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 770: LD_ADDR_EXP 11
 774: PUSH
 775: LD_STRING Cyrus
 777: PPUSH
 778: LD_EXP 1
 782: NOT
 783: PPUSH
 784: LD_STRING 06c_
 786: PPUSH
 787: CALL 3881 0 3
 791: ST_TO_ADDR
 792: GO 858
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 794: LD_STRING CyrusStayInDelta
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 30
 804: NOT
 805: IFFALSE 858
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 807: LD_ADDR_EXP 11
 811: PUSH
 812: LD_STRING Cyrus
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_STRING 04_
 823: PPUSH
 824: CALL 3881 0 3
 828: ST_TO_ADDR
// if not Cyrus then
 829: LD_EXP 11
 833: NOT
 834: IFFALSE 858
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 836: LD_ADDR_EXP 11
 840: PUSH
 841: LD_STRING Cyrus
 843: PPUSH
 844: LD_EXP 1
 848: NOT
 849: PPUSH
 850: LD_STRING 03_
 852: PPUSH
 853: CALL 3881 0 3
 857: ST_TO_ADDR
// end ; if Cyrus then
 858: LD_EXP 11
 862: IFFALSE 880
// team := team ^ Cyrus ;
 864: LD_ADDR_VAR 0 6
 868: PUSH
 869: LD_VAR 0 6
 873: PUSH
 874: LD_EXP 11
 878: ADD
 879: ST_TO_ADDR
// if not Cyrus then
 880: LD_EXP 11
 884: NOT
 885: IFFALSE 1009
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 887: LD_STRING BobbyIn06
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: IFFALSE 923
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 899: LD_ADDR_EXP 12
 903: PUSH
 904: LD_STRING Bobby
 906: PPUSH
 907: LD_EXP 1
 911: NOT
 912: PPUSH
 913: LD_STRING 06c_
 915: PPUSH
 916: CALL 3881 0 3
 920: ST_TO_ADDR
 921: GO 987
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 923: LD_STRING BobbyStayInDelta
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 30
 933: NOT
 934: IFFALSE 987
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 936: LD_ADDR_EXP 12
 940: PUSH
 941: LD_STRING Bobby
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_STRING 04_
 952: PPUSH
 953: CALL 3881 0 3
 957: ST_TO_ADDR
// if not Bobby then
 958: LD_EXP 12
 962: NOT
 963: IFFALSE 987
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 965: LD_ADDR_EXP 12
 969: PUSH
 970: LD_STRING Bobby
 972: PPUSH
 973: LD_EXP 1
 977: NOT
 978: PPUSH
 979: LD_STRING 03_
 981: PPUSH
 982: CALL 3881 0 3
 986: ST_TO_ADDR
// end ; if Bobby then
 987: LD_EXP 12
 991: IFFALSE 1009
// team := team ^ Bobby ;
 993: LD_ADDR_VAR 0 6
 997: PUSH
 998: LD_VAR 0 6
1002: PUSH
1003: LD_EXP 12
1007: ADD
1008: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_STRING othersGamma
1016: PPUSH
1017: CALL_OW 31
1021: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1022: LD_ADDR_VAR 0 2
1026: PUSH
1027: LD_STRING 06_other_survivors
1029: PPUSH
1030: CALL_OW 31
1034: ST_TO_ADDR
// others := others union others4 ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_VAR 0 2
1044: PUSH
1045: LD_VAR 0 4
1049: UNION
1050: ST_TO_ADDR
// team := team ^ others ;
1051: LD_ADDR_VAR 0 6
1055: PUSH
1056: LD_VAR 0 6
1060: PUSH
1061: LD_VAR 0 2
1065: ADD
1066: ST_TO_ADDR
// InitHc ;
1067: CALL_OW 19
// if team <= 12 then
1071: LD_VAR 0 6
1075: PUSH
1076: LD_INT 12
1078: LESSEQUAL
1079: IFFALSE 1128
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1081: LD_INT 0
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: CALL_OW 12
1094: PPUSH
1095: LD_INT 5
1097: PPUSH
1098: CALL_OW 380
// team := team ^ CreateHuman ;
1102: LD_ADDR_VAR 0 6
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: CALL_OW 44
1116: ADD
1117: ST_TO_ADDR
// until team > 12 ;
1118: LD_VAR 0 6
1122: PUSH
1123: LD_INT 12
1125: GREATER
1126: IFFALSE 1081
// for i in others do
1128: LD_ADDR_VAR 0 13
1132: PUSH
1133: LD_VAR 0 2
1137: PUSH
1138: FOR_IN
1139: IFFALSE 1207
// begin if GetClass ( i ) = 2 then
1141: LD_VAR 0 13
1145: PPUSH
1146: CALL_OW 257
1150: PUSH
1151: LD_INT 2
1153: EQUAL
1154: IFFALSE 1168
// SetClass ( i , 1 ) ;
1156: LD_VAR 0 13
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: CALL_OW 336
// for j = 1 to 4 do
1168: LD_ADDR_VAR 0 14
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_INT 4
1180: PUSH
1181: FOR_TO
1182: IFFALSE 1203
// AddExperience ( i , j , 3000 ) ;
1184: LD_VAR 0 13
1188: PPUSH
1189: LD_VAR 0 14
1193: PPUSH
1194: LD_INT 3000
1196: PPUSH
1197: CALL_OW 492
1201: GO 1181
1203: POP
1204: POP
// end ;
1205: GO 1138
1207: POP
1208: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1209: LD_ADDR_VAR 0 7
1213: PUSH
1214: LD_INT 30
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PPUSH
1224: CALL_OW 69
1228: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1229: LD_ADDR_VAR 0 8
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 4
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1249: LD_ADDR_VAR 0 9
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 30
1259: PUSH
1260: LD_INT 7
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 6
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1287: LD_ADDR_VAR 0 10
1291: PUSH
1292: LD_INT 30
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL_OW 69
1306: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1307: LD_ADDR_VAR 0 11
1311: PUSH
1312: LD_INT 2
1314: PUSH
1315: LD_INT 30
1317: PUSH
1318: LD_INT 32
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PUSH
1325: LD_INT 30
1327: PUSH
1328: LD_INT 31
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1345: LD_VAR 0 7
1349: PPUSH
1350: LD_STRING Gamma
1352: PPUSH
1353: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1357: LD_VAR 0 7
1361: PPUSH
1362: CALL_OW 274
1366: PPUSH
1367: LD_INT 2
1369: PPUSH
1370: LD_INT 10000
1372: PPUSH
1373: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1377: LD_VAR 0 7
1381: PPUSH
1382: CALL_OW 274
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: LD_INT 10000
1392: PPUSH
1393: CALL_OW 277
// if dep then
1397: LD_VAR 0 7
1401: IFFALSE 1501
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1403: LD_EXP 7
1407: PPUSH
1408: LD_VAR 0 7
1412: PUSH
1413: LD_INT 1
1415: ARRAY
1416: PPUSH
1417: CALL_OW 52
// if Brown then
1421: LD_EXP 14
1425: IFFALSE 1461
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1427: LD_EXP 14
1431: PPUSH
1432: LD_VAR 0 7
1436: PUSH
1437: LD_INT 1
1439: ARRAY
1440: PPUSH
1441: CALL_OW 52
// team := team diff Brown ;
1445: LD_ADDR_VAR 0 6
1449: PUSH
1450: LD_VAR 0 6
1454: PUSH
1455: LD_EXP 14
1459: DIFF
1460: ST_TO_ADDR
// end ; if Donaldson then
1461: LD_EXP 13
1465: IFFALSE 1501
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1467: LD_EXP 13
1471: PPUSH
1472: LD_VAR 0 7
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: CALL_OW 52
// team := team diff Donaldson ;
1485: LD_ADDR_VAR 0 6
1489: PUSH
1490: LD_VAR 0 6
1494: PUSH
1495: LD_EXP 13
1499: DIFF
1500: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1501: LD_VAR 0 11
1505: PUSH
1506: LD_VAR 0 6
1510: PPUSH
1511: LD_INT 25
1513: PUSH
1514: LD_INT 1
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PPUSH
1521: CALL_OW 72
1525: AND
1526: IFFALSE 1635
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1528: LD_ADDR_VAR 0 12
1532: PUSH
1533: LD_VAR 0 6
1537: PPUSH
1538: LD_INT 25
1540: PUSH
1541: LD_INT 1
1543: PUSH
1544: EMPTY
1545: LIST
1546: LIST
1547: PPUSH
1548: CALL_OW 72
1552: ST_TO_ADDR
// for i in bun do
1553: LD_ADDR_VAR 0 13
1557: PUSH
1558: LD_VAR 0 11
1562: PUSH
1563: FOR_IN
1564: IFFALSE 1633
// begin if not filter then
1566: LD_VAR 0 12
1570: NOT
1571: IFFALSE 1575
// break ;
1573: GO 1633
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1575: LD_VAR 0 12
1579: PUSH
1580: LD_INT 1
1582: ARRAY
1583: PPUSH
1584: LD_VAR 0 13
1588: PPUSH
1589: CALL_OW 52
// team := team diff filter [ 1 ] ;
1593: LD_ADDR_VAR 0 6
1597: PUSH
1598: LD_VAR 0 6
1602: PUSH
1603: LD_VAR 0 12
1607: PUSH
1608: LD_INT 1
1610: ARRAY
1611: DIFF
1612: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1613: LD_ADDR_VAR 0 12
1617: PUSH
1618: LD_VAR 0 12
1622: PPUSH
1623: LD_INT 1
1625: PPUSH
1626: CALL_OW 3
1630: ST_TO_ADDR
// end ;
1631: GO 1563
1633: POP
1634: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1635: LD_VAR 0 8
1639: PUSH
1640: LD_VAR 0 6
1644: PPUSH
1645: LD_INT 25
1647: PUSH
1648: LD_INT 1
1650: PUSH
1651: EMPTY
1652: LIST
1653: LIST
1654: PPUSH
1655: CALL_OW 72
1659: AND
1660: IFFALSE 1782
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1662: LD_ADDR_VAR 0 12
1666: PUSH
1667: LD_VAR 0 6
1671: PPUSH
1672: LD_INT 25
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PPUSH
1682: CALL_OW 72
1686: ST_TO_ADDR
// for i = 1 to filter do
1687: LD_ADDR_VAR 0 13
1691: PUSH
1692: DOUBLE
1693: LD_INT 1
1695: DEC
1696: ST_TO_ADDR
1697: LD_VAR 0 12
1701: PUSH
1702: FOR_TO
1703: IFFALSE 1764
// begin if ( i <= 6 ) then
1705: LD_VAR 0 13
1709: PUSH
1710: LD_INT 6
1712: LESSEQUAL
1713: IFFALSE 1741
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1715: LD_VAR 0 12
1719: PUSH
1720: LD_VAR 0 13
1724: ARRAY
1725: PPUSH
1726: LD_VAR 0 8
1730: PUSH
1731: LD_INT 1
1733: ARRAY
1734: PPUSH
1735: CALL_OW 52
1739: GO 1762
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1741: LD_VAR 0 12
1745: PUSH
1746: LD_VAR 0 13
1750: ARRAY
1751: PPUSH
1752: LD_INT 1
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: CALL_OW 49
// end ;
1762: GO 1702
1764: POP
1765: POP
// team := team diff filter ;
1766: LD_ADDR_VAR 0 6
1770: PUSH
1771: LD_VAR 0 6
1775: PUSH
1776: LD_VAR 0 12
1780: DIFF
1781: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1782: LD_VAR 0 9
1786: PUSH
1787: LD_VAR 0 6
1791: PPUSH
1792: LD_INT 25
1794: PUSH
1795: LD_INT 4
1797: PUSH
1798: EMPTY
1799: LIST
1800: LIST
1801: PPUSH
1802: CALL_OW 72
1806: AND
1807: IFFALSE 1929
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1809: LD_ADDR_VAR 0 12
1813: PUSH
1814: LD_VAR 0 6
1818: PPUSH
1819: LD_INT 25
1821: PUSH
1822: LD_INT 4
1824: PUSH
1825: EMPTY
1826: LIST
1827: LIST
1828: PPUSH
1829: CALL_OW 72
1833: ST_TO_ADDR
// for i = 1 to filter do
1834: LD_ADDR_VAR 0 13
1838: PUSH
1839: DOUBLE
1840: LD_INT 1
1842: DEC
1843: ST_TO_ADDR
1844: LD_VAR 0 12
1848: PUSH
1849: FOR_TO
1850: IFFALSE 1911
// begin if ( i <= 6 ) then
1852: LD_VAR 0 13
1856: PUSH
1857: LD_INT 6
1859: LESSEQUAL
1860: IFFALSE 1888
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1862: LD_VAR 0 12
1866: PUSH
1867: LD_VAR 0 13
1871: ARRAY
1872: PPUSH
1873: LD_VAR 0 9
1877: PUSH
1878: LD_INT 1
1880: ARRAY
1881: PPUSH
1882: CALL_OW 52
1886: GO 1909
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1888: LD_VAR 0 12
1892: PUSH
1893: LD_VAR 0 13
1897: ARRAY
1898: PPUSH
1899: LD_INT 1
1901: PPUSH
1902: LD_INT 0
1904: PPUSH
1905: CALL_OW 49
// end ;
1909: GO 1849
1911: POP
1912: POP
// team := team diff filter ;
1913: LD_ADDR_VAR 0 6
1917: PUSH
1918: LD_VAR 0 6
1922: PUSH
1923: LD_VAR 0 12
1927: DIFF
1928: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1929: LD_VAR 0 10
1933: PUSH
1934: LD_VAR 0 6
1938: PPUSH
1939: LD_INT 25
1941: PUSH
1942: LD_INT 3
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PPUSH
1949: CALL_OW 72
1953: AND
1954: IFFALSE 2076
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1956: LD_ADDR_VAR 0 12
1960: PUSH
1961: LD_VAR 0 6
1965: PPUSH
1966: LD_INT 25
1968: PUSH
1969: LD_INT 3
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PPUSH
1976: CALL_OW 72
1980: ST_TO_ADDR
// for i = 1 to filter do
1981: LD_ADDR_VAR 0 13
1985: PUSH
1986: DOUBLE
1987: LD_INT 1
1989: DEC
1990: ST_TO_ADDR
1991: LD_VAR 0 12
1995: PUSH
1996: FOR_TO
1997: IFFALSE 2058
// begin if ( i <= 6 ) then
1999: LD_VAR 0 13
2003: PUSH
2004: LD_INT 6
2006: LESSEQUAL
2007: IFFALSE 2035
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2009: LD_VAR 0 12
2013: PUSH
2014: LD_VAR 0 13
2018: ARRAY
2019: PPUSH
2020: LD_VAR 0 10
2024: PUSH
2025: LD_INT 1
2027: ARRAY
2028: PPUSH
2029: CALL_OW 52
2033: GO 2056
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2035: LD_VAR 0 12
2039: PUSH
2040: LD_VAR 0 13
2044: ARRAY
2045: PPUSH
2046: LD_INT 1
2048: PPUSH
2049: LD_INT 0
2051: PPUSH
2052: CALL_OW 49
// end ;
2056: GO 1996
2058: POP
2059: POP
// team := team diff filter ;
2060: LD_ADDR_VAR 0 6
2064: PUSH
2065: LD_VAR 0 6
2069: PUSH
2070: LD_VAR 0 12
2074: DIFF
2075: ST_TO_ADDR
// end ; if team then
2076: LD_VAR 0 6
2080: IFFALSE 2123
// for i in team do
2082: LD_ADDR_VAR 0 13
2086: PUSH
2087: LD_VAR 0 6
2091: PUSH
2092: FOR_IN
2093: IFFALSE 2121
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2095: LD_VAR 0 13
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: LD_INT 0
2105: PPUSH
2106: CALL_OW 49
// ComHold ( i ) ;
2110: LD_VAR 0 13
2114: PPUSH
2115: CALL_OW 140
// end ;
2119: GO 2092
2121: POP
2122: POP
// if fac then
2123: LD_VAR 0 10
2127: IFFALSE 2163
// if UnitsInside ( fac [ 1 ] ) then
2129: LD_VAR 0 10
2133: PUSH
2134: LD_INT 1
2136: ARRAY
2137: PPUSH
2138: CALL_OW 313
2142: IFFALSE 2163
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2144: LD_VAR 0 10
2148: PUSH
2149: LD_INT 1
2151: ARRAY
2152: PPUSH
2153: LD_INT 10
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 486
// if lab then
2163: LD_VAR 0 9
2167: IFFALSE 2203
// if UnitsInside ( lab [ 1 ] ) then
2169: LD_VAR 0 9
2173: PUSH
2174: LD_INT 1
2176: ARRAY
2177: PPUSH
2178: CALL_OW 313
2182: IFFALSE 2203
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2184: LD_VAR 0 9
2188: PUSH
2189: LD_INT 1
2191: ARRAY
2192: PPUSH
2193: LD_INT 10
2195: PPUSH
2196: LD_INT 0
2198: PPUSH
2199: CALL_OW 486
// uc_side := 4 ;
2203: LD_ADDR_OWVAR 20
2207: PUSH
2208: LD_INT 4
2210: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2211: LD_ADDR_EXP 17
2215: PUSH
2216: LD_STRING Harisson
2218: PPUSH
2219: LD_INT 0
2221: PPUSH
2222: LD_STRING 
2224: PPUSH
2225: CALL 3881 0 3
2229: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_light_wheeled , engine_combustion , control_manual , us_machine_gun , 100 ) ;
2230: LD_ADDR_VAR 0 5
2234: PUSH
2235: LD_INT 4
2237: PPUSH
2238: LD_INT 1
2240: PPUSH
2241: LD_INT 1
2243: PPUSH
2244: LD_INT 1
2246: PPUSH
2247: LD_INT 1
2249: PPUSH
2250: LD_INT 2
2252: PPUSH
2253: LD_INT 100
2255: PPUSH
2256: CALL 3944 0 7
2260: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2261: LD_VAR 0 5
2265: PPUSH
2266: LD_INT 2
2268: PPUSH
2269: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
2273: LD_VAR 0 5
2277: PPUSH
2278: LD_INT 21
2280: PPUSH
2281: LD_INT 8
2283: PPUSH
2284: LD_INT 0
2286: PPUSH
2287: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2291: LD_EXP 17
2295: PPUSH
2296: LD_VAR 0 5
2300: PPUSH
2301: CALL_OW 52
// end ;
2305: LD_VAR 0 1
2309: RET
// function PrepareBase ; var blist , i , b ; begin
2310: LD_INT 0
2312: PPUSH
2313: PPUSH
2314: PPUSH
2315: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2316: LD_INT 71
2318: PPUSH
2319: LD_INT 5
2321: PPUSH
2322: LD_INT 1
2324: PPUSH
2325: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2329: LD_ADDR_VAR 0 2
2333: PUSH
2334: LD_STRING GammaBase
2336: PPUSH
2337: EMPTY
2338: PPUSH
2339: CALL_OW 30
2343: ST_TO_ADDR
// if not blist then
2344: LD_VAR 0 2
2348: NOT
2349: IFFALSE 2389
// blist := [ [ b_depot , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2351: LD_ADDR_VAR 0 2
2355: PUSH
2356: LD_INT 0
2358: PUSH
2359: LD_INT 51
2361: PUSH
2362: LD_INT 10
2364: PUSH
2365: LD_INT 3
2367: PUSH
2368: LD_INT 3
2370: PUSH
2371: LD_INT 0
2373: PUSH
2374: LD_INT 0
2376: PUSH
2377: EMPTY
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: LIST
2384: LIST
2385: PUSH
2386: EMPTY
2387: LIST
2388: ST_TO_ADDR
// uc_side := 1 ;
2389: LD_ADDR_OWVAR 20
2393: PUSH
2394: LD_INT 1
2396: ST_TO_ADDR
// uc_nation := 1 ;
2397: LD_ADDR_OWVAR 21
2401: PUSH
2402: LD_INT 1
2404: ST_TO_ADDR
// for i in blist do
2405: LD_ADDR_VAR 0 3
2409: PUSH
2410: LD_VAR 0 2
2414: PUSH
2415: FOR_IN
2416: IFFALSE 2567
// begin bc_type := i [ 1 ] ;
2418: LD_ADDR_OWVAR 42
2422: PUSH
2423: LD_VAR 0 3
2427: PUSH
2428: LD_INT 1
2430: ARRAY
2431: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2432: LD_ADDR_OWVAR 43
2436: PUSH
2437: LD_VAR 0 3
2441: PUSH
2442: LD_INT 5
2444: ARRAY
2445: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2446: LD_VAR 0 3
2450: PUSH
2451: LD_INT 1
2453: ARRAY
2454: PUSH
2455: LD_INT 7
2457: PUSH
2458: LD_INT 8
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: IN
2465: IFFALSE 2495
// begin bc_kind1 := i [ 7 ] ;
2467: LD_ADDR_OWVAR 44
2471: PUSH
2472: LD_VAR 0 3
2476: PUSH
2477: LD_INT 7
2479: ARRAY
2480: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2481: LD_ADDR_OWVAR 45
2485: PUSH
2486: LD_VAR 0 3
2490: PUSH
2491: LD_INT 8
2493: ARRAY
2494: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2495: LD_ADDR_VAR 0 4
2499: PUSH
2500: LD_VAR 0 3
2504: PUSH
2505: LD_INT 2
2507: ARRAY
2508: PPUSH
2509: LD_VAR 0 3
2513: PUSH
2514: LD_INT 3
2516: ARRAY
2517: PPUSH
2518: LD_VAR 0 3
2522: PUSH
2523: LD_INT 4
2525: ARRAY
2526: PPUSH
2527: CALL_OW 47
2531: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2532: LD_VAR 0 4
2536: PPUSH
2537: CALL_OW 266
2541: PUSH
2542: LD_INT 32
2544: EQUAL
2545: IFFALSE 2565
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2547: LD_VAR 0 4
2551: PPUSH
2552: LD_VAR 0 3
2556: PUSH
2557: LD_INT 7
2559: ARRAY
2560: PPUSH
2561: CALL_OW 431
// end ; end ;
2565: GO 2415
2567: POP
2568: POP
// end ; end_of_file
2569: LD_VAR 0 1
2573: RET
// export function Action ; var points , i , sol , team , filter ; begin
2574: LD_INT 0
2576: PPUSH
2577: PPUSH
2578: PPUSH
2579: PPUSH
2580: PPUSH
2581: PPUSH
// InGameOn ;
2582: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2586: LD_INT 33
2588: PPUSH
2589: LD_INT 11
2591: PPUSH
2592: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2596: LD_ADDR_VAR 0 2
2600: PUSH
2601: LD_INT 29
2603: PUSH
2604: LD_INT 21
2606: PUSH
2607: EMPTY
2608: LIST
2609: LIST
2610: PUSH
2611: LD_INT 41
2613: PUSH
2614: LD_INT 28
2616: PUSH
2617: EMPTY
2618: LIST
2619: LIST
2620: PUSH
2621: LD_INT 52
2623: PUSH
2624: LD_INT 26
2626: PUSH
2627: EMPTY
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 49
2633: PUSH
2634: LD_INT 16
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: PUSH
2641: EMPTY
2642: LIST
2643: LIST
2644: LIST
2645: LIST
2646: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2647: LD_ADDR_VAR 0 4
2651: PUSH
2652: LD_INT 22
2654: PUSH
2655: LD_INT 1
2657: PUSH
2658: EMPTY
2659: LIST
2660: LIST
2661: PUSH
2662: LD_INT 26
2664: PUSH
2665: LD_INT 1
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PUSH
2672: EMPTY
2673: LIST
2674: LIST
2675: PPUSH
2676: CALL_OW 69
2680: PUSH
2681: LD_EXP 7
2685: PUSH
2686: LD_EXP 14
2690: PUSH
2691: LD_EXP 11
2695: PUSH
2696: LD_EXP 12
2700: PUSH
2701: LD_EXP 8
2705: PUSH
2706: LD_EXP 15
2710: PUSH
2711: LD_EXP 16
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: LIST
2720: LIST
2721: LIST
2722: LIST
2723: LIST
2724: DIFF
2725: PUSH
2726: LD_INT 1
2728: ARRAY
2729: ST_TO_ADDR
// if sol then
2730: LD_VAR 0 4
2734: IFFALSE 2765
// begin ComMoveXY ( sol , 50 , 18 ) ;
2736: LD_VAR 0 4
2740: PPUSH
2741: LD_INT 50
2743: PPUSH
2744: LD_INT 18
2746: PPUSH
2747: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
2751: LD_VAR 0 4
2755: PPUSH
2756: LD_EXP 17
2760: PPUSH
2761: CALL_OW 179
// end ; for i in points do
2765: LD_ADDR_VAR 0 3
2769: PUSH
2770: LD_VAR 0 2
2774: PUSH
2775: FOR_IN
2776: IFFALSE 2807
// AddComMoveXY ( Harisson , i [ 1 ] , i [ 2 ] ) ;
2778: LD_EXP 17
2782: PPUSH
2783: LD_VAR 0 3
2787: PUSH
2788: LD_INT 1
2790: ARRAY
2791: PPUSH
2792: LD_VAR 0 3
2796: PUSH
2797: LD_INT 2
2799: ARRAY
2800: PPUSH
2801: CALL_OW 171
2805: GO 2775
2807: POP
2808: POP
// AddComExitVehicle ( Harisson ) ;
2809: LD_EXP 17
2813: PPUSH
2814: CALL_OW 181
// repeat wait ( 3 ) ;
2818: LD_INT 3
2820: PPUSH
2821: CALL_OW 67
// until not IsInUnit ( Harisson ) ;
2825: LD_EXP 17
2829: PPUSH
2830: CALL_OW 310
2834: NOT
2835: IFFALSE 2818
// Say ( sol , D1-Sol1-1 ) ;
2837: LD_VAR 0 4
2841: PPUSH
2842: LD_STRING D1-Sol1-1
2844: PPUSH
2845: CALL_OW 88
// ComTurnUnit ( Harisson , sol ) ;
2849: LD_EXP 17
2853: PPUSH
2854: LD_VAR 0 4
2858: PPUSH
2859: CALL_OW 119
// Say ( Harisson , D1-Har-1 ) ;
2863: LD_EXP 17
2867: PPUSH
2868: LD_STRING D1-Har-1
2870: PPUSH
2871: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2875: LD_INT 10
2877: PPUSH
2878: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
2882: LD_VAR 0 4
2886: PPUSH
2887: LD_INT 35
2889: PPUSH
2890: LD_INT 21
2892: PPUSH
2893: CALL_OW 111
// ComExitBuilding ( JMM ) ;
2897: LD_EXP 7
2901: PPUSH
2902: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
2906: LD_EXP 7
2910: PPUSH
2911: LD_EXP 17
2915: PPUSH
2916: CALL_OW 172
// ComTurnUnit ( Harisson , JMM ) ;
2920: LD_EXP 17
2924: PPUSH
2925: LD_EXP 7
2929: PPUSH
2930: CALL_OW 119
// repeat wait ( 3 ) ;
2934: LD_INT 3
2936: PPUSH
2937: CALL_OW 67
// until GetDistUnits ( JMM , Harisson ) < 4 ;
2941: LD_EXP 7
2945: PPUSH
2946: LD_EXP 17
2950: PPUSH
2951: CALL_OW 296
2955: PUSH
2956: LD_INT 4
2958: LESS
2959: IFFALSE 2934
// ComTurnUnit ( JMM , Harisson ) ;
2961: LD_EXP 7
2965: PPUSH
2966: LD_EXP 17
2970: PPUSH
2971: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
2975: LD_EXP 7
2979: PPUSH
2980: LD_STRING D1-JMM-1
2982: PPUSH
2983: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
2987: LD_EXP 17
2991: PPUSH
2992: LD_STRING D1-Har-2
2994: PPUSH
2995: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2999: LD_EXP 7
3003: PPUSH
3004: LD_STRING D1-JMM-2
3006: PPUSH
3007: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3011: LD_EXP 17
3015: PPUSH
3016: LD_STRING D1-Har-3
3018: PPUSH
3019: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3023: LD_EXP 7
3027: PPUSH
3028: LD_STRING D1-JMM-3
3030: PPUSH
3031: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3035: LD_EXP 17
3039: PPUSH
3040: LD_STRING D1-Har-4
3042: PPUSH
3043: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3047: LD_EXP 7
3051: PPUSH
3052: LD_STRING D1-JMM-4
3054: PPUSH
3055: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3059: LD_EXP 17
3063: PPUSH
3064: LD_STRING D1-Har-5
3066: PPUSH
3067: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3071: LD_EXP 7
3075: PPUSH
3076: LD_STRING D1-JMM-5
3078: PPUSH
3079: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3083: LD_EXP 17
3087: PPUSH
3088: LD_STRING D1-Har-6
3090: PPUSH
3091: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3095: LD_EXP 7
3099: PPUSH
3100: LD_STRING D1-JMM-6
3102: PPUSH
3103: CALL_OW 88
// EndMission ;
3107: CALL 3116 0 0
// end ;
3111: LD_VAR 0 1
3115: RET
// export function EndMission ; var commander , i , all ; begin
3116: LD_INT 0
3118: PPUSH
3119: PPUSH
3120: PPUSH
3121: PPUSH
// case gamma_commander of 1 :
3122: LD_EXP 18
3126: PUSH
3127: LD_INT 1
3129: DOUBLE
3130: EQUAL
3131: IFTRUE 3135
3133: GO 3148
3135: POP
// commander := Donaldson ; 2 :
3136: LD_ADDR_VAR 0 2
3140: PUSH
3141: LD_EXP 13
3145: ST_TO_ADDR
3146: GO 3191
3148: LD_INT 2
3150: DOUBLE
3151: EQUAL
3152: IFTRUE 3156
3154: GO 3169
3156: POP
// commander := Brown ; 3 :
3157: LD_ADDR_VAR 0 2
3161: PUSH
3162: LD_EXP 14
3166: ST_TO_ADDR
3167: GO 3191
3169: LD_INT 3
3171: DOUBLE
3172: EQUAL
3173: IFTRUE 3177
3175: GO 3190
3177: POP
// commander := Houten ; end ;
3178: LD_ADDR_VAR 0 2
3182: PUSH
3183: LD_EXP 15
3187: ST_TO_ADDR
3188: GO 3191
3190: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3191: LD_ADDR_VAR 0 4
3195: PUSH
3196: LD_INT 22
3198: PUSH
3199: LD_INT 1
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 21
3208: PUSH
3209: LD_INT 1
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PUSH
3216: EMPTY
3217: LIST
3218: LIST
3219: PPUSH
3220: CALL_OW 69
3224: PUSH
3225: LD_EXP 7
3229: PUSH
3230: LD_VAR 0 2
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: DIFF
3239: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , [ commander , Harisson ] ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3240: LD_ADDR_EXP 4
3244: PUSH
3245: LD_STRING 1
3247: PPUSH
3248: LD_INT 10
3250: PPUSH
3251: LD_INT 10
3253: PPUSH
3254: LD_INT -5
3256: PUSH
3257: LD_EXP 7
3261: PUSH
3262: LD_INT -2
3264: PUSH
3265: LD_INT -3
3267: PUSH
3268: LD_INT -5
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: LIST
3277: PUSH
3278: LD_VAR 0 4
3282: ADD
3283: PUSH
3284: LD_INT -6
3286: PUSH
3287: LD_INT -4
3289: PUSH
3290: LD_VAR 0 2
3294: PUSH
3295: LD_EXP 17
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: EMPTY
3305: LIST
3306: LIST
3307: LIST
3308: ADD
3309: PPUSH
3310: LD_INT 1
3312: PUSH
3313: LD_INT 3
3315: PUSH
3316: EMPTY
3317: LIST
3318: LIST
3319: PUSH
3320: LD_INT 3
3322: PUSH
3323: LD_INT 3
3325: PUSH
3326: LD_INT 6
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: LIST
3333: PUSH
3334: LD_INT 4
3336: PUSH
3337: LD_INT 1
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: LIST
3348: PPUSH
3349: CALL_OW 42
3353: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3354: LD_VAR 0 4
3358: PUSH
3359: LD_EXP 7
3363: PUSH
3364: LD_EXP 8
3368: PUSH
3369: LD_EXP 10
3373: PUSH
3374: LD_EXP 11
3378: PUSH
3379: LD_EXP 12
3383: PUSH
3384: LD_EXP 9
3388: PUSH
3389: LD_EXP 13
3393: PUSH
3394: LD_EXP 14
3398: PUSH
3399: LD_EXP 15
3403: PUSH
3404: LD_EXP 17
3408: PUSH
3409: LD_EXP 16
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: LIST
3423: LIST
3424: LIST
3425: LIST
3426: PUSH
3427: LD_EXP 4
3431: ADD
3432: DIFF
3433: PPUSH
3434: LD_STRING 07_othersGamma
3436: PPUSH
3437: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
3441: LD_EXP 4
3445: PUSH
3446: LD_EXP 7
3450: PUSH
3451: LD_EXP 8
3455: PUSH
3456: LD_EXP 10
3460: PUSH
3461: LD_EXP 11
3465: PUSH
3466: LD_EXP 12
3470: PUSH
3471: LD_EXP 9
3475: PUSH
3476: LD_EXP 13
3480: PUSH
3481: LD_EXP 14
3485: PUSH
3486: LD_EXP 15
3490: PUSH
3491: LD_EXP 17
3495: PUSH
3496: LD_EXP 16
3500: PUSH
3501: LD_INT 0
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: DIFF
3518: PPUSH
3519: LD_STRING 07_others
3521: PPUSH
3522: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3526: LD_EXP 7
3530: PPUSH
3531: LD_EXP 5
3535: PUSH
3536: LD_STRING JMM
3538: STR
3539: PPUSH
3540: CALL_OW 38
// if Lisa then
3544: LD_EXP 10
3548: IFFALSE 3590
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3550: LD_EXP 10
3554: PPUSH
3555: LD_EXP 5
3559: PUSH
3560: LD_STRING Lisa
3562: STR
3563: PPUSH
3564: CALL_OW 38
// if Lisa in save_group then
3568: LD_EXP 10
3572: PUSH
3573: LD_EXP 4
3577: IN
3578: IFFALSE 3590
// SaveVariable ( true , LisaIn07 ) ;
3580: LD_INT 1
3582: PPUSH
3583: LD_STRING LisaIn07
3585: PPUSH
3586: CALL_OW 39
// end ; if Bobby then
3590: LD_EXP 12
3594: IFFALSE 3636
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3596: LD_EXP 12
3600: PPUSH
3601: LD_EXP 5
3605: PUSH
3606: LD_STRING Bobby
3608: STR
3609: PPUSH
3610: CALL_OW 38
// if Bobby in save_group then
3614: LD_EXP 12
3618: PUSH
3619: LD_EXP 4
3623: IN
3624: IFFALSE 3636
// SaveVariable ( true , BobbyIn07 ) ;
3626: LD_INT 1
3628: PPUSH
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: CALL_OW 39
// end ; if Cyrus then
3636: LD_EXP 11
3640: IFFALSE 3682
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
3642: LD_EXP 11
3646: PPUSH
3647: LD_EXP 5
3651: PUSH
3652: LD_STRING Cyrus
3654: STR
3655: PPUSH
3656: CALL_OW 38
// if Cyrus in save_group then
3660: LD_EXP 11
3664: PUSH
3665: LD_EXP 4
3669: IN
3670: IFFALSE 3682
// SaveVariable ( true , CyrusIn07 ) ;
3672: LD_INT 1
3674: PPUSH
3675: LD_STRING CyrusIn07
3677: PPUSH
3678: CALL_OW 39
// end ; if Brown then
3682: LD_EXP 14
3686: IFFALSE 3728
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
3688: LD_EXP 14
3692: PPUSH
3693: LD_EXP 5
3697: PUSH
3698: LD_STRING Brown
3700: STR
3701: PPUSH
3702: CALL_OW 38
// if Brown in save_group then
3706: LD_EXP 14
3710: PUSH
3711: LD_EXP 4
3715: IN
3716: IFFALSE 3728
// SaveVariable ( true , BrownIn07 ) ;
3718: LD_INT 1
3720: PPUSH
3721: LD_STRING BrownIn07
3723: PPUSH
3724: CALL_OW 39
// end ; if Donaldson then
3728: LD_EXP 13
3732: IFFALSE 3774
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
3734: LD_EXP 13
3738: PPUSH
3739: LD_EXP 5
3743: PUSH
3744: LD_STRING Donaldson
3746: STR
3747: PPUSH
3748: CALL_OW 38
// if Donaldson in save_group then
3752: LD_EXP 13
3756: PUSH
3757: LD_EXP 4
3761: IN
3762: IFFALSE 3774
// SaveVariable ( true , DonaldsonIn07 ) ;
3764: LD_INT 1
3766: PPUSH
3767: LD_STRING DonaldsonIn07
3769: PPUSH
3770: CALL_OW 39
// end ; if Gladstone then
3774: LD_EXP 8
3778: IFFALSE 3820
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
3780: LD_EXP 8
3784: PPUSH
3785: LD_EXP 5
3789: PUSH
3790: LD_STRING Gladstone
3792: STR
3793: PPUSH
3794: CALL_OW 38
// if Gladstone in save_group then
3798: LD_EXP 8
3802: PUSH
3803: LD_EXP 4
3807: IN
3808: IFFALSE 3820
// SaveVariable ( true , GladstoneIn07 ) ;
3810: LD_INT 1
3812: PPUSH
3813: LD_STRING GladstoneIn07
3815: PPUSH
3816: CALL_OW 39
// end ; if Khatam then
3820: LD_EXP 16
3824: IFFALSE 3866
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
3826: LD_EXP 16
3830: PPUSH
3831: LD_EXP 5
3835: PUSH
3836: LD_STRING Khatam
3838: STR
3839: PPUSH
3840: CALL_OW 38
// if Khatam in save_group then
3844: LD_EXP 16
3848: PUSH
3849: LD_EXP 4
3853: IN
3854: IFFALSE 3866
// SaveVariable ( true , KhatamIn07 ) ;
3856: LD_INT 1
3858: PPUSH
3859: LD_STRING KhatamIn07
3861: PPUSH
3862: CALL_OW 39
// end ; ChangeMap ( 1 , %_cont ) ;
3866: LD_INT 1
3868: PPUSH
3869: LD_STRING %_cont
3871: PPUSH
3872: CALL_OW 340
// end ; end_of_file
3876: LD_VAR 0 1
3880: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3881: LD_INT 0
3883: PPUSH
3884: PPUSH
// if exist_mode then
3885: LD_VAR 0 2
3889: IFFALSE 3914
// unit := CreateCharacter ( prefix & ident ) else
3891: LD_ADDR_VAR 0 5
3895: PUSH
3896: LD_VAR 0 3
3900: PUSH
3901: LD_VAR 0 1
3905: STR
3906: PPUSH
3907: CALL_OW 34
3911: ST_TO_ADDR
3912: GO 3929
// unit := NewCharacter ( ident ) ;
3914: LD_ADDR_VAR 0 5
3918: PUSH
3919: LD_VAR 0 1
3923: PPUSH
3924: CALL_OW 25
3928: ST_TO_ADDR
// result := unit ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_VAR 0 5
3938: ST_TO_ADDR
// end ;
3939: LD_VAR 0 4
3943: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
3944: LD_INT 0
3946: PPUSH
// uc_side := side ;
3947: LD_ADDR_OWVAR 20
3951: PUSH
3952: LD_VAR 0 1
3956: ST_TO_ADDR
// uc_nation := nation ;
3957: LD_ADDR_OWVAR 21
3961: PUSH
3962: LD_VAR 0 2
3966: ST_TO_ADDR
// vc_chassis := chassis ;
3967: LD_ADDR_OWVAR 37
3971: PUSH
3972: LD_VAR 0 3
3976: ST_TO_ADDR
// vc_engine := engine ;
3977: LD_ADDR_OWVAR 39
3981: PUSH
3982: LD_VAR 0 4
3986: ST_TO_ADDR
// vc_control := control ;
3987: LD_ADDR_OWVAR 38
3991: PUSH
3992: LD_VAR 0 5
3996: ST_TO_ADDR
// vc_weapon := weapon ;
3997: LD_ADDR_OWVAR 40
4001: PUSH
4002: LD_VAR 0 6
4006: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4007: LD_ADDR_OWVAR 41
4011: PUSH
4012: LD_VAR 0 7
4016: ST_TO_ADDR
// result := CreateVehicle ;
4017: LD_ADDR_VAR 0 8
4021: PUSH
4022: CALL_OW 45
4026: ST_TO_ADDR
// end ;
4027: LD_VAR 0 8
4031: RET
// export function SayX ( units , ident ) ; var i ; begin
4032: LD_INT 0
4034: PPUSH
4035: PPUSH
// result := false ;
4036: LD_ADDR_VAR 0 3
4040: PUSH
4041: LD_INT 0
4043: ST_TO_ADDR
// if not units then
4044: LD_VAR 0 1
4048: NOT
4049: IFFALSE 4053
// exit ;
4051: GO 4107
// for i in units do
4053: LD_ADDR_VAR 0 4
4057: PUSH
4058: LD_VAR 0 1
4062: PUSH
4063: FOR_IN
4064: IFFALSE 4105
// if IsOk ( i ) then
4066: LD_VAR 0 4
4070: PPUSH
4071: CALL_OW 302
4075: IFFALSE 4103
// begin Say ( i , ident ) ;
4077: LD_VAR 0 4
4081: PPUSH
4082: LD_VAR 0 2
4086: PPUSH
4087: CALL_OW 88
// result := i ;
4091: LD_ADDR_VAR 0 3
4095: PUSH
4096: LD_VAR 0 4
4100: ST_TO_ADDR
// break ;
4101: GO 4105
// end ;
4103: GO 4063
4105: POP
4106: POP
// end ;
4107: LD_VAR 0 3
4111: RET
