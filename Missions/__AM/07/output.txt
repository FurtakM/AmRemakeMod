// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2570 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2306 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 3877 0 3
 179: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 180: LD_EXP 7
 184: PPUSH
 185: CALL_OW 257
 189: PUSH
 190: LD_INT 2
 192: EQUAL
 193: IFFALSE 207
// SetClass ( JMM , 1 ) ;
 195: LD_EXP 7
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_STRING GammaCommander
 214: PPUSH
 215: LD_INT 3
 217: PPUSH
 218: CALL_OW 30
 222: ST_TO_ADDR
// if gamma_commander = 1 then
 223: LD_EXP 18
 227: PUSH
 228: LD_INT 1
 230: EQUAL
 231: IFFALSE 257
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 233: LD_ADDR_EXP 13
 237: PUSH
 238: LD_STRING Donaldson
 240: PPUSH
 241: LD_EXP 1
 245: NOT
 246: PPUSH
 247: LD_STRING 04_
 249: PPUSH
 250: CALL 3877 0 3
 254: ST_TO_ADDR
// end else
 255: GO 328
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 257: LD_STRING DonaldsonIn06
 259: PPUSH
 260: LD_INT 0
 262: PPUSH
 263: CALL_OW 30
 267: IFFALSE 293
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 269: LD_ADDR_EXP 13
 273: PUSH
 274: LD_STRING Donaldson
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 06c_
 285: PPUSH
 286: CALL 3877 0 3
 290: ST_TO_ADDR
 291: GO 328
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 293: LD_STRING DonaldsonStayInDelta
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 30
 303: NOT
 304: IFFALSE 328
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 306: LD_ADDR_EXP 13
 310: PUSH
 311: LD_STRING Donaldson
 313: PPUSH
 314: LD_EXP 1
 318: NOT
 319: PPUSH
 320: LD_STRING 04_
 322: PPUSH
 323: CALL 3877 0 3
 327: ST_TO_ADDR
// end ; if Donaldson then
 328: LD_EXP 13
 332: IFFALSE 350
// team := team ^ Donaldson ;
 334: LD_ADDR_VAR 0 6
 338: PUSH
 339: LD_VAR 0 6
 343: PUSH
 344: LD_EXP 13
 348: ADD
 349: ST_TO_ADDR
// if gamma_commander = 2 then
 350: LD_EXP 18
 354: PUSH
 355: LD_INT 2
 357: EQUAL
 358: IFFALSE 384
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 360: LD_ADDR_EXP 14
 364: PUSH
 365: LD_STRING Brown
 367: PPUSH
 368: LD_EXP 1
 372: NOT
 373: PPUSH
 374: LD_STRING 04_
 376: PPUSH
 377: CALL 3877 0 3
 381: ST_TO_ADDR
// end else
 382: GO 455
// begin if LoadVariable ( BrownIn06 , 0 ) then
 384: LD_STRING BrownIn06
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 30
 394: IFFALSE 420
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 396: LD_ADDR_EXP 14
 400: PUSH
 401: LD_STRING Brown
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: LD_STRING 06c_
 412: PPUSH
 413: CALL 3877 0 3
 417: ST_TO_ADDR
 418: GO 455
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 420: LD_STRING BrownStayInDelta
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 30
 430: NOT
 431: IFFALSE 455
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 433: LD_ADDR_EXP 14
 437: PUSH
 438: LD_STRING Brown
 440: PPUSH
 441: LD_EXP 1
 445: NOT
 446: PPUSH
 447: LD_STRING 04_
 449: PPUSH
 450: CALL 3877 0 3
 454: ST_TO_ADDR
// end ; if Brown then
 455: LD_EXP 14
 459: IFFALSE 477
// team := team ^ Brown ;
 461: LD_ADDR_VAR 0 6
 465: PUSH
 466: LD_VAR 0 6
 470: PUSH
 471: LD_EXP 14
 475: ADD
 476: ST_TO_ADDR
// if gamma_commander = 3 then
 477: LD_EXP 18
 481: PUSH
 482: LD_INT 3
 484: EQUAL
 485: IFFALSE 522
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_STRING VanHouten
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: LD_STRING 
 500: PPUSH
 501: CALL 3877 0 3
 505: ST_TO_ADDR
// team := team ^ Houten ;
 506: LD_ADDR_VAR 0 6
 510: PUSH
 511: LD_VAR 0 6
 515: PUSH
 516: LD_EXP 15
 520: ADD
 521: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 522: LD_STRING GladstoneIn06
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 30
 532: IFFALSE 558
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 534: LD_ADDR_EXP 8
 538: PUSH
 539: LD_STRING Gladstone
 541: PPUSH
 542: LD_EXP 1
 546: NOT
 547: PPUSH
 548: LD_STRING 06c_
 550: PPUSH
 551: CALL 3877 0 3
 555: ST_TO_ADDR
 556: GO 592
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 558: LD_STRING GladstoneStayInDelta
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 30
 568: IFFALSE 592
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 570: LD_ADDR_EXP 8
 574: PUSH
 575: LD_STRING Gladstone
 577: PPUSH
 578: LD_EXP 1
 582: NOT
 583: PPUSH
 584: LD_STRING 06_
 586: PPUSH
 587: CALL 3877 0 3
 591: ST_TO_ADDR
// if Gladstone then
 592: LD_EXP 8
 596: IFFALSE 614
// team := team ^ Gladstone ;
 598: LD_ADDR_VAR 0 6
 602: PUSH
 603: LD_VAR 0 6
 607: PUSH
 608: LD_EXP 8
 612: ADD
 613: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 614: LD_ADDR_EXP 16
 618: PUSH
 619: LD_STRING Khatam
 621: PPUSH
 622: LD_EXP 1
 626: NOT
 627: PPUSH
 628: LD_STRING 03_
 630: PPUSH
 631: CALL 3877 0 3
 635: ST_TO_ADDR
// if Khatam then
 636: LD_EXP 16
 640: IFFALSE 658
// team := team ^ Khatam ;
 642: LD_ADDR_VAR 0 6
 646: PUSH
 647: LD_VAR 0 6
 651: PUSH
 652: LD_EXP 16
 656: ADD
 657: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 658: LD_STRING LisaIn06
 660: PPUSH
 661: LD_INT 0
 663: PPUSH
 664: CALL_OW 30
 668: IFFALSE 694
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 670: LD_ADDR_EXP 10
 674: PUSH
 675: LD_STRING Lisa
 677: PPUSH
 678: LD_EXP 1
 682: NOT
 683: PPUSH
 684: LD_STRING 06c_
 686: PPUSH
 687: CALL 3877 0 3
 691: ST_TO_ADDR
 692: GO 729
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 694: LD_STRING LisaStayInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: IFFALSE 729
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 707: LD_ADDR_EXP 10
 711: PUSH
 712: LD_STRING Lisa
 714: PPUSH
 715: LD_EXP 1
 719: NOT
 720: PPUSH
 721: LD_STRING 04_
 723: PPUSH
 724: CALL 3877 0 3
 728: ST_TO_ADDR
// if Lisa then
 729: LD_EXP 10
 733: IFFALSE 751
// team := team ^ Lisa ;
 735: LD_ADDR_VAR 0 6
 739: PUSH
 740: LD_VAR 0 6
 744: PUSH
 745: LD_EXP 10
 749: ADD
 750: ST_TO_ADDR
// if not Lisa then
 751: LD_EXP 10
 755: NOT
 756: IFFALSE 1009
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 758: LD_STRING CyrusIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: IFFALSE 794
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 770: LD_ADDR_EXP 11
 774: PUSH
 775: LD_STRING Cyrus
 777: PPUSH
 778: LD_EXP 1
 782: NOT
 783: PPUSH
 784: LD_STRING 06c_
 786: PPUSH
 787: CALL 3877 0 3
 791: ST_TO_ADDR
 792: GO 858
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 794: LD_STRING CyrusStayInDelta
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 30
 804: NOT
 805: IFFALSE 858
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 807: LD_ADDR_EXP 11
 811: PUSH
 812: LD_STRING Cyrus
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_STRING 04_
 823: PPUSH
 824: CALL 3877 0 3
 828: ST_TO_ADDR
// if not Cyrus then
 829: LD_EXP 11
 833: NOT
 834: IFFALSE 858
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 836: LD_ADDR_EXP 11
 840: PUSH
 841: LD_STRING Cyrus
 843: PPUSH
 844: LD_EXP 1
 848: NOT
 849: PPUSH
 850: LD_STRING 03_
 852: PPUSH
 853: CALL 3877 0 3
 857: ST_TO_ADDR
// end ; if Cyrus then
 858: LD_EXP 11
 862: IFFALSE 880
// team := team ^ Cyrus ;
 864: LD_ADDR_VAR 0 6
 868: PUSH
 869: LD_VAR 0 6
 873: PUSH
 874: LD_EXP 11
 878: ADD
 879: ST_TO_ADDR
// if not Cyrus then
 880: LD_EXP 11
 884: NOT
 885: IFFALSE 1009
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 887: LD_STRING BobbyIn06
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: IFFALSE 923
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 899: LD_ADDR_EXP 12
 903: PUSH
 904: LD_STRING Bobby
 906: PPUSH
 907: LD_EXP 1
 911: NOT
 912: PPUSH
 913: LD_STRING 06c_
 915: PPUSH
 916: CALL 3877 0 3
 920: ST_TO_ADDR
 921: GO 987
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 923: LD_STRING BobbyStayInDelta
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 30
 933: NOT
 934: IFFALSE 987
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 936: LD_ADDR_EXP 12
 940: PUSH
 941: LD_STRING Bobby
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_STRING 04_
 952: PPUSH
 953: CALL 3877 0 3
 957: ST_TO_ADDR
// if not Bobby then
 958: LD_EXP 12
 962: NOT
 963: IFFALSE 987
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 965: LD_ADDR_EXP 12
 969: PUSH
 970: LD_STRING Bobby
 972: PPUSH
 973: LD_EXP 1
 977: NOT
 978: PPUSH
 979: LD_STRING 03_
 981: PPUSH
 982: CALL 3877 0 3
 986: ST_TO_ADDR
// end ; if Bobby then
 987: LD_EXP 12
 991: IFFALSE 1009
// team := team ^ Bobby ;
 993: LD_ADDR_VAR 0 6
 997: PUSH
 998: LD_VAR 0 6
1002: PUSH
1003: LD_EXP 12
1007: ADD
1008: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_STRING othersGamma
1016: PPUSH
1017: CALL_OW 31
1021: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1022: LD_ADDR_VAR 0 2
1026: PUSH
1027: LD_STRING 06_other_survivors
1029: PPUSH
1030: CALL_OW 31
1034: ST_TO_ADDR
// others := others union others4 ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_VAR 0 2
1044: PUSH
1045: LD_VAR 0 4
1049: UNION
1050: ST_TO_ADDR
// team := team ^ others ;
1051: LD_ADDR_VAR 0 6
1055: PUSH
1056: LD_VAR 0 6
1060: PUSH
1061: LD_VAR 0 2
1065: ADD
1066: ST_TO_ADDR
// if team <= 12 then
1067: LD_VAR 0 6
1071: PUSH
1072: LD_INT 12
1074: LESSEQUAL
1075: IFFALSE 1124
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1077: LD_INT 0
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: LD_INT 4
1085: PPUSH
1086: CALL_OW 12
1090: PPUSH
1091: LD_INT 5
1093: PPUSH
1094: CALL_OW 380
// team := team ^ CreateHuman ;
1098: LD_ADDR_VAR 0 6
1102: PUSH
1103: LD_VAR 0 6
1107: PUSH
1108: CALL_OW 44
1112: ADD
1113: ST_TO_ADDR
// until team > 12 ;
1114: LD_VAR 0 6
1118: PUSH
1119: LD_INT 12
1121: GREATER
1122: IFFALSE 1077
// for i in others do
1124: LD_ADDR_VAR 0 13
1128: PUSH
1129: LD_VAR 0 2
1133: PUSH
1134: FOR_IN
1135: IFFALSE 1203
// begin if GetClass ( i ) = 2 then
1137: LD_VAR 0 13
1141: PPUSH
1142: CALL_OW 257
1146: PUSH
1147: LD_INT 2
1149: EQUAL
1150: IFFALSE 1164
// SetClass ( i , 1 ) ;
1152: LD_VAR 0 13
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: CALL_OW 336
// for j = 1 to 4 do
1164: LD_ADDR_VAR 0 14
1168: PUSH
1169: DOUBLE
1170: LD_INT 1
1172: DEC
1173: ST_TO_ADDR
1174: LD_INT 4
1176: PUSH
1177: FOR_TO
1178: IFFALSE 1199
// AddExperience ( i , j , 3000 ) ;
1180: LD_VAR 0 13
1184: PPUSH
1185: LD_VAR 0 14
1189: PPUSH
1190: LD_INT 3000
1192: PPUSH
1193: CALL_OW 492
1197: GO 1177
1199: POP
1200: POP
// end ;
1201: GO 1134
1203: POP
1204: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1205: LD_ADDR_VAR 0 7
1209: PUSH
1210: LD_INT 30
1212: PUSH
1213: LD_INT 0
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1225: LD_ADDR_VAR 0 8
1229: PUSH
1230: LD_INT 30
1232: PUSH
1233: LD_INT 4
1235: PUSH
1236: EMPTY
1237: LIST
1238: LIST
1239: PPUSH
1240: CALL_OW 69
1244: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1245: LD_ADDR_VAR 0 9
1249: PUSH
1250: LD_INT 2
1252: PUSH
1253: LD_INT 30
1255: PUSH
1256: LD_INT 7
1258: PUSH
1259: EMPTY
1260: LIST
1261: LIST
1262: PUSH
1263: LD_INT 30
1265: PUSH
1266: LD_INT 6
1268: PUSH
1269: EMPTY
1270: LIST
1271: LIST
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: LIST
1277: PPUSH
1278: CALL_OW 69
1282: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1283: LD_ADDR_VAR 0 10
1287: PUSH
1288: LD_INT 30
1290: PUSH
1291: LD_INT 3
1293: PUSH
1294: EMPTY
1295: LIST
1296: LIST
1297: PPUSH
1298: CALL_OW 69
1302: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1303: LD_ADDR_VAR 0 11
1307: PUSH
1308: LD_INT 2
1310: PUSH
1311: LD_INT 30
1313: PUSH
1314: LD_INT 32
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: PUSH
1321: LD_INT 30
1323: PUSH
1324: LD_INT 31
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1341: LD_VAR 0 7
1345: PPUSH
1346: LD_STRING Gamma
1348: PPUSH
1349: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1353: LD_VAR 0 7
1357: PPUSH
1358: CALL_OW 274
1362: PPUSH
1363: LD_INT 2
1365: PPUSH
1366: LD_INT 10000
1368: PPUSH
1369: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1373: LD_VAR 0 7
1377: PPUSH
1378: CALL_OW 274
1382: PPUSH
1383: LD_INT 1
1385: PPUSH
1386: LD_INT 10000
1388: PPUSH
1389: CALL_OW 277
// if dep then
1393: LD_VAR 0 7
1397: IFFALSE 1497
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1399: LD_EXP 7
1403: PPUSH
1404: LD_VAR 0 7
1408: PUSH
1409: LD_INT 1
1411: ARRAY
1412: PPUSH
1413: CALL_OW 52
// if Brown then
1417: LD_EXP 14
1421: IFFALSE 1457
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1423: LD_EXP 14
1427: PPUSH
1428: LD_VAR 0 7
1432: PUSH
1433: LD_INT 1
1435: ARRAY
1436: PPUSH
1437: CALL_OW 52
// team := team diff Brown ;
1441: LD_ADDR_VAR 0 6
1445: PUSH
1446: LD_VAR 0 6
1450: PUSH
1451: LD_EXP 14
1455: DIFF
1456: ST_TO_ADDR
// end ; if Donaldson then
1457: LD_EXP 13
1461: IFFALSE 1497
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1463: LD_EXP 13
1467: PPUSH
1468: LD_VAR 0 7
1472: PUSH
1473: LD_INT 1
1475: ARRAY
1476: PPUSH
1477: CALL_OW 52
// team := team diff Donaldson ;
1481: LD_ADDR_VAR 0 6
1485: PUSH
1486: LD_VAR 0 6
1490: PUSH
1491: LD_EXP 13
1495: DIFF
1496: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1497: LD_VAR 0 11
1501: PUSH
1502: LD_VAR 0 6
1506: PPUSH
1507: LD_INT 25
1509: PUSH
1510: LD_INT 1
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PPUSH
1517: CALL_OW 72
1521: AND
1522: IFFALSE 1631
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1524: LD_ADDR_VAR 0 12
1528: PUSH
1529: LD_VAR 0 6
1533: PPUSH
1534: LD_INT 25
1536: PUSH
1537: LD_INT 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PPUSH
1544: CALL_OW 72
1548: ST_TO_ADDR
// for i in bun do
1549: LD_ADDR_VAR 0 13
1553: PUSH
1554: LD_VAR 0 11
1558: PUSH
1559: FOR_IN
1560: IFFALSE 1629
// begin if not filter then
1562: LD_VAR 0 12
1566: NOT
1567: IFFALSE 1571
// break ;
1569: GO 1629
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1571: LD_VAR 0 12
1575: PUSH
1576: LD_INT 1
1578: ARRAY
1579: PPUSH
1580: LD_VAR 0 13
1584: PPUSH
1585: CALL_OW 52
// team := team diff filter [ 1 ] ;
1589: LD_ADDR_VAR 0 6
1593: PUSH
1594: LD_VAR 0 6
1598: PUSH
1599: LD_VAR 0 12
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: DIFF
1608: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1609: LD_ADDR_VAR 0 12
1613: PUSH
1614: LD_VAR 0 12
1618: PPUSH
1619: LD_INT 1
1621: PPUSH
1622: CALL_OW 3
1626: ST_TO_ADDR
// end ;
1627: GO 1559
1629: POP
1630: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1631: LD_VAR 0 8
1635: PUSH
1636: LD_VAR 0 6
1640: PPUSH
1641: LD_INT 25
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: EMPTY
1648: LIST
1649: LIST
1650: PPUSH
1651: CALL_OW 72
1655: AND
1656: IFFALSE 1778
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1658: LD_ADDR_VAR 0 12
1662: PUSH
1663: LD_VAR 0 6
1667: PPUSH
1668: LD_INT 25
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: EMPTY
1675: LIST
1676: LIST
1677: PPUSH
1678: CALL_OW 72
1682: ST_TO_ADDR
// for i = 1 to filter do
1683: LD_ADDR_VAR 0 13
1687: PUSH
1688: DOUBLE
1689: LD_INT 1
1691: DEC
1692: ST_TO_ADDR
1693: LD_VAR 0 12
1697: PUSH
1698: FOR_TO
1699: IFFALSE 1760
// begin if ( i <= 6 ) then
1701: LD_VAR 0 13
1705: PUSH
1706: LD_INT 6
1708: LESSEQUAL
1709: IFFALSE 1737
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1711: LD_VAR 0 12
1715: PUSH
1716: LD_VAR 0 13
1720: ARRAY
1721: PPUSH
1722: LD_VAR 0 8
1726: PUSH
1727: LD_INT 1
1729: ARRAY
1730: PPUSH
1731: CALL_OW 52
1735: GO 1758
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1737: LD_VAR 0 12
1741: PUSH
1742: LD_VAR 0 13
1746: ARRAY
1747: PPUSH
1748: LD_INT 1
1750: PPUSH
1751: LD_INT 0
1753: PPUSH
1754: CALL_OW 49
// end ;
1758: GO 1698
1760: POP
1761: POP
// team := team diff filter ;
1762: LD_ADDR_VAR 0 6
1766: PUSH
1767: LD_VAR 0 6
1771: PUSH
1772: LD_VAR 0 12
1776: DIFF
1777: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1778: LD_VAR 0 9
1782: PUSH
1783: LD_VAR 0 6
1787: PPUSH
1788: LD_INT 25
1790: PUSH
1791: LD_INT 4
1793: PUSH
1794: EMPTY
1795: LIST
1796: LIST
1797: PPUSH
1798: CALL_OW 72
1802: AND
1803: IFFALSE 1925
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1805: LD_ADDR_VAR 0 12
1809: PUSH
1810: LD_VAR 0 6
1814: PPUSH
1815: LD_INT 25
1817: PUSH
1818: LD_INT 4
1820: PUSH
1821: EMPTY
1822: LIST
1823: LIST
1824: PPUSH
1825: CALL_OW 72
1829: ST_TO_ADDR
// for i = 1 to filter do
1830: LD_ADDR_VAR 0 13
1834: PUSH
1835: DOUBLE
1836: LD_INT 1
1838: DEC
1839: ST_TO_ADDR
1840: LD_VAR 0 12
1844: PUSH
1845: FOR_TO
1846: IFFALSE 1907
// begin if ( i <= 6 ) then
1848: LD_VAR 0 13
1852: PUSH
1853: LD_INT 6
1855: LESSEQUAL
1856: IFFALSE 1884
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1858: LD_VAR 0 12
1862: PUSH
1863: LD_VAR 0 13
1867: ARRAY
1868: PPUSH
1869: LD_VAR 0 9
1873: PUSH
1874: LD_INT 1
1876: ARRAY
1877: PPUSH
1878: CALL_OW 52
1882: GO 1905
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1884: LD_VAR 0 12
1888: PUSH
1889: LD_VAR 0 13
1893: ARRAY
1894: PPUSH
1895: LD_INT 1
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// end ;
1905: GO 1845
1907: POP
1908: POP
// team := team diff filter ;
1909: LD_ADDR_VAR 0 6
1913: PUSH
1914: LD_VAR 0 6
1918: PUSH
1919: LD_VAR 0 12
1923: DIFF
1924: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1925: LD_VAR 0 10
1929: PUSH
1930: LD_VAR 0 6
1934: PPUSH
1935: LD_INT 25
1937: PUSH
1938: LD_INT 3
1940: PUSH
1941: EMPTY
1942: LIST
1943: LIST
1944: PPUSH
1945: CALL_OW 72
1949: AND
1950: IFFALSE 2072
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1952: LD_ADDR_VAR 0 12
1956: PUSH
1957: LD_VAR 0 6
1961: PPUSH
1962: LD_INT 25
1964: PUSH
1965: LD_INT 3
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: PPUSH
1972: CALL_OW 72
1976: ST_TO_ADDR
// for i = 1 to filter do
1977: LD_ADDR_VAR 0 13
1981: PUSH
1982: DOUBLE
1983: LD_INT 1
1985: DEC
1986: ST_TO_ADDR
1987: LD_VAR 0 12
1991: PUSH
1992: FOR_TO
1993: IFFALSE 2054
// begin if ( i <= 6 ) then
1995: LD_VAR 0 13
1999: PUSH
2000: LD_INT 6
2002: LESSEQUAL
2003: IFFALSE 2031
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2005: LD_VAR 0 12
2009: PUSH
2010: LD_VAR 0 13
2014: ARRAY
2015: PPUSH
2016: LD_VAR 0 10
2020: PUSH
2021: LD_INT 1
2023: ARRAY
2024: PPUSH
2025: CALL_OW 52
2029: GO 2052
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2031: LD_VAR 0 12
2035: PUSH
2036: LD_VAR 0 13
2040: ARRAY
2041: PPUSH
2042: LD_INT 1
2044: PPUSH
2045: LD_INT 0
2047: PPUSH
2048: CALL_OW 49
// end ;
2052: GO 1992
2054: POP
2055: POP
// team := team diff filter ;
2056: LD_ADDR_VAR 0 6
2060: PUSH
2061: LD_VAR 0 6
2065: PUSH
2066: LD_VAR 0 12
2070: DIFF
2071: ST_TO_ADDR
// end ; if team then
2072: LD_VAR 0 6
2076: IFFALSE 2119
// for i in team do
2078: LD_ADDR_VAR 0 13
2082: PUSH
2083: LD_VAR 0 6
2087: PUSH
2088: FOR_IN
2089: IFFALSE 2117
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2091: LD_VAR 0 13
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_INT 0
2101: PPUSH
2102: CALL_OW 49
// ComHold ( i ) ;
2106: LD_VAR 0 13
2110: PPUSH
2111: CALL_OW 140
// end ;
2115: GO 2088
2117: POP
2118: POP
// if fac then
2119: LD_VAR 0 10
2123: IFFALSE 2159
// if UnitsInside ( fac [ 1 ] ) then
2125: LD_VAR 0 10
2129: PUSH
2130: LD_INT 1
2132: ARRAY
2133: PPUSH
2134: CALL_OW 313
2138: IFFALSE 2159
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2140: LD_VAR 0 10
2144: PUSH
2145: LD_INT 1
2147: ARRAY
2148: PPUSH
2149: LD_INT 10
2151: PPUSH
2152: LD_INT 0
2154: PPUSH
2155: CALL_OW 486
// if lab then
2159: LD_VAR 0 9
2163: IFFALSE 2199
// if UnitsInside ( lab [ 1 ] ) then
2165: LD_VAR 0 9
2169: PUSH
2170: LD_INT 1
2172: ARRAY
2173: PPUSH
2174: CALL_OW 313
2178: IFFALSE 2199
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2180: LD_VAR 0 9
2184: PUSH
2185: LD_INT 1
2187: ARRAY
2188: PPUSH
2189: LD_INT 10
2191: PPUSH
2192: LD_INT 0
2194: PPUSH
2195: CALL_OW 486
// uc_side := 4 ;
2199: LD_ADDR_OWVAR 20
2203: PUSH
2204: LD_INT 4
2206: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2207: LD_ADDR_EXP 17
2211: PUSH
2212: LD_STRING Harisson
2214: PPUSH
2215: LD_INT 0
2217: PPUSH
2218: LD_STRING 
2220: PPUSH
2221: CALL 3877 0 3
2225: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_light_wheeled , engine_combustion , control_manual , us_machine_gun , 100 ) ;
2226: LD_ADDR_VAR 0 5
2230: PUSH
2231: LD_INT 4
2233: PPUSH
2234: LD_INT 1
2236: PPUSH
2237: LD_INT 1
2239: PPUSH
2240: LD_INT 1
2242: PPUSH
2243: LD_INT 1
2245: PPUSH
2246: LD_INT 2
2248: PPUSH
2249: LD_INT 100
2251: PPUSH
2252: CALL 3940 0 7
2256: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2257: LD_VAR 0 5
2261: PPUSH
2262: LD_INT 2
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
2269: LD_VAR 0 5
2273: PPUSH
2274: LD_INT 21
2276: PPUSH
2277: LD_INT 8
2279: PPUSH
2280: LD_INT 0
2282: PPUSH
2283: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2287: LD_EXP 17
2291: PPUSH
2292: LD_VAR 0 5
2296: PPUSH
2297: CALL_OW 52
// end ;
2301: LD_VAR 0 1
2305: RET
// function PrepareBase ; var blist , i , b ; begin
2306: LD_INT 0
2308: PPUSH
2309: PPUSH
2310: PPUSH
2311: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2312: LD_INT 71
2314: PPUSH
2315: LD_INT 5
2317: PPUSH
2318: LD_INT 1
2320: PPUSH
2321: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2325: LD_ADDR_VAR 0 2
2329: PUSH
2330: LD_STRING GammaBase
2332: PPUSH
2333: EMPTY
2334: PPUSH
2335: CALL_OW 30
2339: ST_TO_ADDR
// if not blist then
2340: LD_VAR 0 2
2344: NOT
2345: IFFALSE 2385
// blist := [ [ b_depot , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2347: LD_ADDR_VAR 0 2
2351: PUSH
2352: LD_INT 0
2354: PUSH
2355: LD_INT 51
2357: PUSH
2358: LD_INT 10
2360: PUSH
2361: LD_INT 3
2363: PUSH
2364: LD_INT 3
2366: PUSH
2367: LD_INT 0
2369: PUSH
2370: LD_INT 0
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: ST_TO_ADDR
// uc_side := 1 ;
2385: LD_ADDR_OWVAR 20
2389: PUSH
2390: LD_INT 1
2392: ST_TO_ADDR
// uc_nation := 1 ;
2393: LD_ADDR_OWVAR 21
2397: PUSH
2398: LD_INT 1
2400: ST_TO_ADDR
// for i in blist do
2401: LD_ADDR_VAR 0 3
2405: PUSH
2406: LD_VAR 0 2
2410: PUSH
2411: FOR_IN
2412: IFFALSE 2563
// begin bc_type := i [ 1 ] ;
2414: LD_ADDR_OWVAR 42
2418: PUSH
2419: LD_VAR 0 3
2423: PUSH
2424: LD_INT 1
2426: ARRAY
2427: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2428: LD_ADDR_OWVAR 43
2432: PUSH
2433: LD_VAR 0 3
2437: PUSH
2438: LD_INT 5
2440: ARRAY
2441: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2442: LD_VAR 0 3
2446: PUSH
2447: LD_INT 1
2449: ARRAY
2450: PUSH
2451: LD_INT 7
2453: PUSH
2454: LD_INT 8
2456: PUSH
2457: EMPTY
2458: LIST
2459: LIST
2460: IN
2461: IFFALSE 2491
// begin bc_kind1 := i [ 7 ] ;
2463: LD_ADDR_OWVAR 44
2467: PUSH
2468: LD_VAR 0 3
2472: PUSH
2473: LD_INT 7
2475: ARRAY
2476: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2477: LD_ADDR_OWVAR 45
2481: PUSH
2482: LD_VAR 0 3
2486: PUSH
2487: LD_INT 8
2489: ARRAY
2490: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2491: LD_ADDR_VAR 0 4
2495: PUSH
2496: LD_VAR 0 3
2500: PUSH
2501: LD_INT 2
2503: ARRAY
2504: PPUSH
2505: LD_VAR 0 3
2509: PUSH
2510: LD_INT 3
2512: ARRAY
2513: PPUSH
2514: LD_VAR 0 3
2518: PUSH
2519: LD_INT 4
2521: ARRAY
2522: PPUSH
2523: CALL_OW 47
2527: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2528: LD_VAR 0 4
2532: PPUSH
2533: CALL_OW 266
2537: PUSH
2538: LD_INT 32
2540: EQUAL
2541: IFFALSE 2561
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2543: LD_VAR 0 4
2547: PPUSH
2548: LD_VAR 0 3
2552: PUSH
2553: LD_INT 7
2555: ARRAY
2556: PPUSH
2557: CALL_OW 431
// end ; end ;
2561: GO 2411
2563: POP
2564: POP
// end ; end_of_file
2565: LD_VAR 0 1
2569: RET
// export function Action ; var points , i , sol , team , filter ; begin
2570: LD_INT 0
2572: PPUSH
2573: PPUSH
2574: PPUSH
2575: PPUSH
2576: PPUSH
2577: PPUSH
// InGameOn ;
2578: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2582: LD_INT 33
2584: PPUSH
2585: LD_INT 11
2587: PPUSH
2588: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2592: LD_ADDR_VAR 0 2
2596: PUSH
2597: LD_INT 29
2599: PUSH
2600: LD_INT 21
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: PUSH
2607: LD_INT 41
2609: PUSH
2610: LD_INT 28
2612: PUSH
2613: EMPTY
2614: LIST
2615: LIST
2616: PUSH
2617: LD_INT 52
2619: PUSH
2620: LD_INT 26
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PUSH
2627: LD_INT 49
2629: PUSH
2630: LD_INT 16
2632: PUSH
2633: EMPTY
2634: LIST
2635: LIST
2636: PUSH
2637: EMPTY
2638: LIST
2639: LIST
2640: LIST
2641: LIST
2642: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2643: LD_ADDR_VAR 0 4
2647: PUSH
2648: LD_INT 22
2650: PUSH
2651: LD_INT 1
2653: PUSH
2654: EMPTY
2655: LIST
2656: LIST
2657: PUSH
2658: LD_INT 26
2660: PUSH
2661: LD_INT 1
2663: PUSH
2664: EMPTY
2665: LIST
2666: LIST
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: PPUSH
2672: CALL_OW 69
2676: PUSH
2677: LD_EXP 7
2681: PUSH
2682: LD_EXP 14
2686: PUSH
2687: LD_EXP 11
2691: PUSH
2692: LD_EXP 12
2696: PUSH
2697: LD_EXP 8
2701: PUSH
2702: LD_EXP 15
2706: PUSH
2707: LD_EXP 16
2711: PUSH
2712: EMPTY
2713: LIST
2714: LIST
2715: LIST
2716: LIST
2717: LIST
2718: LIST
2719: LIST
2720: DIFF
2721: PUSH
2722: LD_INT 1
2724: ARRAY
2725: ST_TO_ADDR
// if sol then
2726: LD_VAR 0 4
2730: IFFALSE 2761
// begin ComMoveXY ( sol , 50 , 18 ) ;
2732: LD_VAR 0 4
2736: PPUSH
2737: LD_INT 50
2739: PPUSH
2740: LD_INT 18
2742: PPUSH
2743: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
2747: LD_VAR 0 4
2751: PPUSH
2752: LD_EXP 17
2756: PPUSH
2757: CALL_OW 179
// end ; for i in points do
2761: LD_ADDR_VAR 0 3
2765: PUSH
2766: LD_VAR 0 2
2770: PUSH
2771: FOR_IN
2772: IFFALSE 2803
// AddComMoveXY ( Harisson , i [ 1 ] , i [ 2 ] ) ;
2774: LD_EXP 17
2778: PPUSH
2779: LD_VAR 0 3
2783: PUSH
2784: LD_INT 1
2786: ARRAY
2787: PPUSH
2788: LD_VAR 0 3
2792: PUSH
2793: LD_INT 2
2795: ARRAY
2796: PPUSH
2797: CALL_OW 171
2801: GO 2771
2803: POP
2804: POP
// AddComExitVehicle ( Harisson ) ;
2805: LD_EXP 17
2809: PPUSH
2810: CALL_OW 181
// repeat wait ( 3 ) ;
2814: LD_INT 3
2816: PPUSH
2817: CALL_OW 67
// until not IsInUnit ( Harisson ) ;
2821: LD_EXP 17
2825: PPUSH
2826: CALL_OW 310
2830: NOT
2831: IFFALSE 2814
// Say ( sol , D1-Sol1-1 ) ;
2833: LD_VAR 0 4
2837: PPUSH
2838: LD_STRING D1-Sol1-1
2840: PPUSH
2841: CALL_OW 88
// ComTurnUnit ( Harisson , sol ) ;
2845: LD_EXP 17
2849: PPUSH
2850: LD_VAR 0 4
2854: PPUSH
2855: CALL_OW 119
// Say ( Harisson , D1-Har-1 ) ;
2859: LD_EXP 17
2863: PPUSH
2864: LD_STRING D1-Har-1
2866: PPUSH
2867: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2871: LD_INT 10
2873: PPUSH
2874: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
2878: LD_VAR 0 4
2882: PPUSH
2883: LD_INT 35
2885: PPUSH
2886: LD_INT 21
2888: PPUSH
2889: CALL_OW 111
// ComExitBuilding ( JMM ) ;
2893: LD_EXP 7
2897: PPUSH
2898: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
2902: LD_EXP 7
2906: PPUSH
2907: LD_EXP 17
2911: PPUSH
2912: CALL_OW 172
// ComTurnUnit ( Harisson , JMM ) ;
2916: LD_EXP 17
2920: PPUSH
2921: LD_EXP 7
2925: PPUSH
2926: CALL_OW 119
// repeat wait ( 3 ) ;
2930: LD_INT 3
2932: PPUSH
2933: CALL_OW 67
// until GetDistUnits ( JMM , Harisson ) < 4 ;
2937: LD_EXP 7
2941: PPUSH
2942: LD_EXP 17
2946: PPUSH
2947: CALL_OW 296
2951: PUSH
2952: LD_INT 4
2954: LESS
2955: IFFALSE 2930
// ComTurnUnit ( JMM , Harisson ) ;
2957: LD_EXP 7
2961: PPUSH
2962: LD_EXP 17
2966: PPUSH
2967: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
2971: LD_EXP 7
2975: PPUSH
2976: LD_STRING D1-JMM-1
2978: PPUSH
2979: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
2983: LD_EXP 17
2987: PPUSH
2988: LD_STRING D1-Har-2
2990: PPUSH
2991: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2995: LD_EXP 7
2999: PPUSH
3000: LD_STRING D1-JMM-2
3002: PPUSH
3003: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3007: LD_EXP 17
3011: PPUSH
3012: LD_STRING D1-Har-3
3014: PPUSH
3015: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3019: LD_EXP 7
3023: PPUSH
3024: LD_STRING D1-JMM-3
3026: PPUSH
3027: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3031: LD_EXP 17
3035: PPUSH
3036: LD_STRING D1-Har-4
3038: PPUSH
3039: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3043: LD_EXP 7
3047: PPUSH
3048: LD_STRING D1-JMM-4
3050: PPUSH
3051: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3055: LD_EXP 17
3059: PPUSH
3060: LD_STRING D1-Har-5
3062: PPUSH
3063: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3067: LD_EXP 7
3071: PPUSH
3072: LD_STRING D1-JMM-5
3074: PPUSH
3075: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3079: LD_EXP 17
3083: PPUSH
3084: LD_STRING D1-Har-6
3086: PPUSH
3087: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3091: LD_EXP 7
3095: PPUSH
3096: LD_STRING D1-JMM-6
3098: PPUSH
3099: CALL_OW 88
// EndMission ;
3103: CALL 3112 0 0
// end ;
3107: LD_VAR 0 1
3111: RET
// export function EndMission ; var commander , i , all ; begin
3112: LD_INT 0
3114: PPUSH
3115: PPUSH
3116: PPUSH
3117: PPUSH
// case gamma_commander of 1 :
3118: LD_EXP 18
3122: PUSH
3123: LD_INT 1
3125: DOUBLE
3126: EQUAL
3127: IFTRUE 3131
3129: GO 3144
3131: POP
// commander := Donaldson ; 2 :
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: LD_EXP 13
3141: ST_TO_ADDR
3142: GO 3187
3144: LD_INT 2
3146: DOUBLE
3147: EQUAL
3148: IFTRUE 3152
3150: GO 3165
3152: POP
// commander := Brown ; 3 :
3153: LD_ADDR_VAR 0 2
3157: PUSH
3158: LD_EXP 14
3162: ST_TO_ADDR
3163: GO 3187
3165: LD_INT 3
3167: DOUBLE
3168: EQUAL
3169: IFTRUE 3173
3171: GO 3186
3173: POP
// commander := Houten ; end ;
3174: LD_ADDR_VAR 0 2
3178: PUSH
3179: LD_EXP 15
3183: ST_TO_ADDR
3184: GO 3187
3186: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3187: LD_ADDR_VAR 0 4
3191: PUSH
3192: LD_INT 22
3194: PUSH
3195: LD_INT 1
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: PUSH
3202: LD_INT 21
3204: PUSH
3205: LD_INT 1
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: PUSH
3212: EMPTY
3213: LIST
3214: LIST
3215: PPUSH
3216: CALL_OW 69
3220: PUSH
3221: LD_EXP 7
3225: PUSH
3226: LD_VAR 0 2
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: DIFF
3235: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , [ commander , Harisson ] ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3236: LD_ADDR_EXP 4
3240: PUSH
3241: LD_STRING 1
3243: PPUSH
3244: LD_INT 10
3246: PPUSH
3247: LD_INT 10
3249: PPUSH
3250: LD_INT -5
3252: PUSH
3253: LD_EXP 7
3257: PUSH
3258: LD_INT -2
3260: PUSH
3261: LD_INT -3
3263: PUSH
3264: LD_INT -5
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: LIST
3272: LIST
3273: PUSH
3274: LD_VAR 0 4
3278: ADD
3279: PUSH
3280: LD_INT -6
3282: PUSH
3283: LD_INT -4
3285: PUSH
3286: LD_VAR 0 2
3290: PUSH
3291: LD_EXP 17
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: LIST
3304: ADD
3305: PPUSH
3306: LD_INT 1
3308: PUSH
3309: LD_INT 3
3311: PUSH
3312: EMPTY
3313: LIST
3314: LIST
3315: PUSH
3316: LD_INT 3
3318: PUSH
3319: LD_INT 3
3321: PUSH
3322: LD_INT 6
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: PUSH
3330: LD_INT 4
3332: PUSH
3333: LD_INT 1
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: PUSH
3340: EMPTY
3341: LIST
3342: LIST
3343: LIST
3344: PPUSH
3345: CALL_OW 42
3349: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3350: LD_VAR 0 4
3354: PUSH
3355: LD_EXP 7
3359: PUSH
3360: LD_EXP 8
3364: PUSH
3365: LD_EXP 10
3369: PUSH
3370: LD_EXP 11
3374: PUSH
3375: LD_EXP 12
3379: PUSH
3380: LD_EXP 9
3384: PUSH
3385: LD_EXP 13
3389: PUSH
3390: LD_EXP 14
3394: PUSH
3395: LD_EXP 15
3399: PUSH
3400: LD_EXP 17
3404: PUSH
3405: LD_EXP 16
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: LIST
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: LIST
3419: LIST
3420: LIST
3421: LIST
3422: PUSH
3423: LD_EXP 4
3427: ADD
3428: DIFF
3429: PPUSH
3430: LD_STRING 07_othersGamma
3432: PPUSH
3433: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
3437: LD_EXP 4
3441: PUSH
3442: LD_EXP 7
3446: PUSH
3447: LD_EXP 8
3451: PUSH
3452: LD_EXP 10
3456: PUSH
3457: LD_EXP 11
3461: PUSH
3462: LD_EXP 12
3466: PUSH
3467: LD_EXP 9
3471: PUSH
3472: LD_EXP 13
3476: PUSH
3477: LD_EXP 14
3481: PUSH
3482: LD_EXP 15
3486: PUSH
3487: LD_EXP 17
3491: PUSH
3492: LD_EXP 16
3496: PUSH
3497: LD_INT 0
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: LIST
3506: LIST
3507: LIST
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: DIFF
3514: PPUSH
3515: LD_STRING 07_others
3517: PPUSH
3518: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3522: LD_EXP 7
3526: PPUSH
3527: LD_EXP 5
3531: PUSH
3532: LD_STRING JMM
3534: STR
3535: PPUSH
3536: CALL_OW 38
// if Lisa then
3540: LD_EXP 10
3544: IFFALSE 3586
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3546: LD_EXP 10
3550: PPUSH
3551: LD_EXP 5
3555: PUSH
3556: LD_STRING Lisa
3558: STR
3559: PPUSH
3560: CALL_OW 38
// if Lisa in save_group then
3564: LD_EXP 10
3568: PUSH
3569: LD_EXP 4
3573: IN
3574: IFFALSE 3586
// SaveVariable ( true , LisaIn07 ) ;
3576: LD_INT 1
3578: PPUSH
3579: LD_STRING LisaIn07
3581: PPUSH
3582: CALL_OW 39
// end ; if Bobby then
3586: LD_EXP 12
3590: IFFALSE 3632
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3592: LD_EXP 12
3596: PPUSH
3597: LD_EXP 5
3601: PUSH
3602: LD_STRING Bobby
3604: STR
3605: PPUSH
3606: CALL_OW 38
// if Bobby in save_group then
3610: LD_EXP 12
3614: PUSH
3615: LD_EXP 4
3619: IN
3620: IFFALSE 3632
// SaveVariable ( true , BobbyIn07 ) ;
3622: LD_INT 1
3624: PPUSH
3625: LD_STRING BobbyIn07
3627: PPUSH
3628: CALL_OW 39
// end ; if Cyrus then
3632: LD_EXP 11
3636: IFFALSE 3678
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
3638: LD_EXP 11
3642: PPUSH
3643: LD_EXP 5
3647: PUSH
3648: LD_STRING Cyrus
3650: STR
3651: PPUSH
3652: CALL_OW 38
// if Cyrus in save_group then
3656: LD_EXP 11
3660: PUSH
3661: LD_EXP 4
3665: IN
3666: IFFALSE 3678
// SaveVariable ( true , CyrusIn07 ) ;
3668: LD_INT 1
3670: PPUSH
3671: LD_STRING CyrusIn07
3673: PPUSH
3674: CALL_OW 39
// end ; if Brown then
3678: LD_EXP 14
3682: IFFALSE 3724
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
3684: LD_EXP 14
3688: PPUSH
3689: LD_EXP 5
3693: PUSH
3694: LD_STRING Brown
3696: STR
3697: PPUSH
3698: CALL_OW 38
// if Brown in save_group then
3702: LD_EXP 14
3706: PUSH
3707: LD_EXP 4
3711: IN
3712: IFFALSE 3724
// SaveVariable ( true , BrownIn07 ) ;
3714: LD_INT 1
3716: PPUSH
3717: LD_STRING BrownIn07
3719: PPUSH
3720: CALL_OW 39
// end ; if Donaldson then
3724: LD_EXP 13
3728: IFFALSE 3770
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
3730: LD_EXP 13
3734: PPUSH
3735: LD_EXP 5
3739: PUSH
3740: LD_STRING Donaldson
3742: STR
3743: PPUSH
3744: CALL_OW 38
// if Donaldson in save_group then
3748: LD_EXP 13
3752: PUSH
3753: LD_EXP 4
3757: IN
3758: IFFALSE 3770
// SaveVariable ( true , DonaldsonIn07 ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_STRING DonaldsonIn07
3765: PPUSH
3766: CALL_OW 39
// end ; if Gladstone then
3770: LD_EXP 8
3774: IFFALSE 3816
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
3776: LD_EXP 8
3780: PPUSH
3781: LD_EXP 5
3785: PUSH
3786: LD_STRING Gladstone
3788: STR
3789: PPUSH
3790: CALL_OW 38
// if Gladstone in save_group then
3794: LD_EXP 8
3798: PUSH
3799: LD_EXP 4
3803: IN
3804: IFFALSE 3816
// SaveVariable ( true , GladstoneIn07 ) ;
3806: LD_INT 1
3808: PPUSH
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: CALL_OW 39
// end ; if Khatam then
3816: LD_EXP 16
3820: IFFALSE 3862
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
3822: LD_EXP 16
3826: PPUSH
3827: LD_EXP 5
3831: PUSH
3832: LD_STRING Khatam
3834: STR
3835: PPUSH
3836: CALL_OW 38
// if Khatam in save_group then
3840: LD_EXP 16
3844: PUSH
3845: LD_EXP 4
3849: IN
3850: IFFALSE 3862
// SaveVariable ( true , KhatamIn07 ) ;
3852: LD_INT 1
3854: PPUSH
3855: LD_STRING KhatamIn07
3857: PPUSH
3858: CALL_OW 39
// end ; ChangeMap ( 1 , %_cont ) ;
3862: LD_INT 1
3864: PPUSH
3865: LD_STRING %_cont
3867: PPUSH
3868: CALL_OW 340
// end ; end_of_file
3872: LD_VAR 0 1
3876: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3877: LD_INT 0
3879: PPUSH
3880: PPUSH
// if exist_mode then
3881: LD_VAR 0 2
3885: IFFALSE 3910
// unit := CreateCharacter ( prefix & ident ) else
3887: LD_ADDR_VAR 0 5
3891: PUSH
3892: LD_VAR 0 3
3896: PUSH
3897: LD_VAR 0 1
3901: STR
3902: PPUSH
3903: CALL_OW 34
3907: ST_TO_ADDR
3908: GO 3925
// unit := NewCharacter ( ident ) ;
3910: LD_ADDR_VAR 0 5
3914: PUSH
3915: LD_VAR 0 1
3919: PPUSH
3920: CALL_OW 25
3924: ST_TO_ADDR
// result := unit ;
3925: LD_ADDR_VAR 0 4
3929: PUSH
3930: LD_VAR 0 5
3934: ST_TO_ADDR
// end ;
3935: LD_VAR 0 4
3939: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
3940: LD_INT 0
3942: PPUSH
// uc_side := side ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_VAR 0 1
3952: ST_TO_ADDR
// uc_nation := nation ;
3953: LD_ADDR_OWVAR 21
3957: PUSH
3958: LD_VAR 0 2
3962: ST_TO_ADDR
// vc_chassis := chassis ;
3963: LD_ADDR_OWVAR 37
3967: PUSH
3968: LD_VAR 0 3
3972: ST_TO_ADDR
// vc_engine := engine ;
3973: LD_ADDR_OWVAR 39
3977: PUSH
3978: LD_VAR 0 4
3982: ST_TO_ADDR
// vc_control := control ;
3983: LD_ADDR_OWVAR 38
3987: PUSH
3988: LD_VAR 0 5
3992: ST_TO_ADDR
// vc_weapon := weapon ;
3993: LD_ADDR_OWVAR 40
3997: PUSH
3998: LD_VAR 0 6
4002: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4003: LD_ADDR_OWVAR 41
4007: PUSH
4008: LD_VAR 0 7
4012: ST_TO_ADDR
// result := CreateVehicle ;
4013: LD_ADDR_VAR 0 8
4017: PUSH
4018: CALL_OW 45
4022: ST_TO_ADDR
// end ;
4023: LD_VAR 0 8
4027: RET
// export function SayX ( units , ident ) ; var i ; begin
4028: LD_INT 0
4030: PPUSH
4031: PPUSH
// result := false ;
4032: LD_ADDR_VAR 0 3
4036: PUSH
4037: LD_INT 0
4039: ST_TO_ADDR
// if not units then
4040: LD_VAR 0 1
4044: NOT
4045: IFFALSE 4049
// exit ;
4047: GO 4103
// for i in units do
4049: LD_ADDR_VAR 0 4
4053: PUSH
4054: LD_VAR 0 1
4058: PUSH
4059: FOR_IN
4060: IFFALSE 4101
// if IsOk ( i ) then
4062: LD_VAR 0 4
4066: PPUSH
4067: CALL_OW 302
4071: IFFALSE 4099
// begin Say ( i , ident ) ;
4073: LD_VAR 0 4
4077: PPUSH
4078: LD_VAR 0 2
4082: PPUSH
4083: CALL_OW 88
// result := i ;
4087: LD_ADDR_VAR 0 3
4091: PUSH
4092: LD_VAR 0 4
4096: ST_TO_ADDR
// break ;
4097: GO 4101
// end ;
4099: GO 4059
4101: POP
4102: POP
// end ;
4103: LD_VAR 0 3
4107: RET
