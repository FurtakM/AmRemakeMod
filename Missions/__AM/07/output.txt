// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2781 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export RandGuy ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2517 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 4264 0 3
 179: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 180: LD_EXP 7
 184: PPUSH
 185: CALL_OW 257
 189: PUSH
 190: LD_INT 2
 192: EQUAL
 193: IFFALSE 207
// SetClass ( JMM , 1 ) ;
 195: LD_EXP 7
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_STRING GammaCommander
 214: PPUSH
 215: LD_INT 3
 217: PPUSH
 218: CALL_OW 30
 222: ST_TO_ADDR
// if gamma_commander = 1 then
 223: LD_EXP 18
 227: PUSH
 228: LD_INT 1
 230: EQUAL
 231: IFFALSE 257
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 233: LD_ADDR_EXP 13
 237: PUSH
 238: LD_STRING Donaldson
 240: PPUSH
 241: LD_EXP 1
 245: NOT
 246: PPUSH
 247: LD_STRING 04_
 249: PPUSH
 250: CALL 4264 0 3
 254: ST_TO_ADDR
// end else
 255: GO 328
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 257: LD_STRING DonaldsonIn06
 259: PPUSH
 260: LD_INT 0
 262: PPUSH
 263: CALL_OW 30
 267: IFFALSE 293
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 269: LD_ADDR_EXP 13
 273: PUSH
 274: LD_STRING Donaldson
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 06c_
 285: PPUSH
 286: CALL 4264 0 3
 290: ST_TO_ADDR
 291: GO 328
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 293: LD_STRING DonaldsonStayInDelta
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 30
 303: NOT
 304: IFFALSE 328
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 306: LD_ADDR_EXP 13
 310: PUSH
 311: LD_STRING Donaldson
 313: PPUSH
 314: LD_EXP 1
 318: NOT
 319: PPUSH
 320: LD_STRING 04_
 322: PPUSH
 323: CALL 4264 0 3
 327: ST_TO_ADDR
// end ; if Donaldson then
 328: LD_EXP 13
 332: IFFALSE 350
// team := team ^ Donaldson ;
 334: LD_ADDR_VAR 0 6
 338: PUSH
 339: LD_VAR 0 6
 343: PUSH
 344: LD_EXP 13
 348: ADD
 349: ST_TO_ADDR
// if gamma_commander = 2 then
 350: LD_EXP 18
 354: PUSH
 355: LD_INT 2
 357: EQUAL
 358: IFFALSE 384
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 360: LD_ADDR_EXP 14
 364: PUSH
 365: LD_STRING Brown
 367: PPUSH
 368: LD_EXP 1
 372: NOT
 373: PPUSH
 374: LD_STRING 04_
 376: PPUSH
 377: CALL 4264 0 3
 381: ST_TO_ADDR
// end else
 382: GO 455
// begin if LoadVariable ( BrownIn06 , 0 ) then
 384: LD_STRING BrownIn06
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 30
 394: IFFALSE 420
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 396: LD_ADDR_EXP 14
 400: PUSH
 401: LD_STRING Brown
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: LD_STRING 06c_
 412: PPUSH
 413: CALL 4264 0 3
 417: ST_TO_ADDR
 418: GO 455
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 420: LD_STRING BrownStayInDelta
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 30
 430: NOT
 431: IFFALSE 455
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 433: LD_ADDR_EXP 14
 437: PUSH
 438: LD_STRING Brown
 440: PPUSH
 441: LD_EXP 1
 445: NOT
 446: PPUSH
 447: LD_STRING 04_
 449: PPUSH
 450: CALL 4264 0 3
 454: ST_TO_ADDR
// end ; if Brown then
 455: LD_EXP 14
 459: IFFALSE 477
// team := team ^ Brown ;
 461: LD_ADDR_VAR 0 6
 465: PUSH
 466: LD_VAR 0 6
 470: PUSH
 471: LD_EXP 14
 475: ADD
 476: ST_TO_ADDR
// if gamma_commander = 3 then
 477: LD_EXP 18
 481: PUSH
 482: LD_INT 3
 484: EQUAL
 485: IFFALSE 522
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_STRING VanHouten
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: LD_STRING 
 500: PPUSH
 501: CALL 4264 0 3
 505: ST_TO_ADDR
// team := team ^ Houten ;
 506: LD_ADDR_VAR 0 6
 510: PUSH
 511: LD_VAR 0 6
 515: PUSH
 516: LD_EXP 15
 520: ADD
 521: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 522: LD_STRING GladstoneIn06
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 30
 532: IFFALSE 558
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 534: LD_ADDR_EXP 8
 538: PUSH
 539: LD_STRING Gladstone
 541: PPUSH
 542: LD_EXP 1
 546: NOT
 547: PPUSH
 548: LD_STRING 06c_
 550: PPUSH
 551: CALL 4264 0 3
 555: ST_TO_ADDR
 556: GO 592
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 558: LD_STRING GladstoneStayInDelta
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 30
 568: IFFALSE 592
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 570: LD_ADDR_EXP 8
 574: PUSH
 575: LD_STRING Gladstone
 577: PPUSH
 578: LD_EXP 1
 582: NOT
 583: PPUSH
 584: LD_STRING 06_
 586: PPUSH
 587: CALL 4264 0 3
 591: ST_TO_ADDR
// if Gladstone then
 592: LD_EXP 8
 596: IFFALSE 614
// team := team ^ Gladstone ;
 598: LD_ADDR_VAR 0 6
 602: PUSH
 603: LD_VAR 0 6
 607: PUSH
 608: LD_EXP 8
 612: ADD
 613: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 614: LD_ADDR_EXP 16
 618: PUSH
 619: LD_STRING Khatam
 621: PPUSH
 622: LD_EXP 1
 626: NOT
 627: PPUSH
 628: LD_STRING 03_
 630: PPUSH
 631: CALL 4264 0 3
 635: ST_TO_ADDR
// if Khatam then
 636: LD_EXP 16
 640: IFFALSE 658
// team := team ^ Khatam ;
 642: LD_ADDR_VAR 0 6
 646: PUSH
 647: LD_VAR 0 6
 651: PUSH
 652: LD_EXP 16
 656: ADD
 657: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 658: LD_STRING LisaIn06
 660: PPUSH
 661: LD_INT 0
 663: PPUSH
 664: CALL_OW 30
 668: IFFALSE 694
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 670: LD_ADDR_EXP 10
 674: PUSH
 675: LD_STRING Lisa
 677: PPUSH
 678: LD_EXP 1
 682: NOT
 683: PPUSH
 684: LD_STRING 06c_
 686: PPUSH
 687: CALL 4264 0 3
 691: ST_TO_ADDR
 692: GO 729
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 694: LD_STRING LisaStayInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: IFFALSE 729
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 707: LD_ADDR_EXP 10
 711: PUSH
 712: LD_STRING Lisa
 714: PPUSH
 715: LD_EXP 1
 719: NOT
 720: PPUSH
 721: LD_STRING 04_
 723: PPUSH
 724: CALL 4264 0 3
 728: ST_TO_ADDR
// if Lisa then
 729: LD_EXP 10
 733: IFFALSE 751
// team := team ^ Lisa ;
 735: LD_ADDR_VAR 0 6
 739: PUSH
 740: LD_VAR 0 6
 744: PUSH
 745: LD_EXP 10
 749: ADD
 750: ST_TO_ADDR
// if not Lisa then
 751: LD_EXP 10
 755: NOT
 756: IFFALSE 1009
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 758: LD_STRING CyrusIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: IFFALSE 794
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 770: LD_ADDR_EXP 11
 774: PUSH
 775: LD_STRING Cyrus
 777: PPUSH
 778: LD_EXP 1
 782: NOT
 783: PPUSH
 784: LD_STRING 06c_
 786: PPUSH
 787: CALL 4264 0 3
 791: ST_TO_ADDR
 792: GO 858
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 794: LD_STRING CyrusStayInDelta
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 30
 804: NOT
 805: IFFALSE 858
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 807: LD_ADDR_EXP 11
 811: PUSH
 812: LD_STRING Cyrus
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_STRING 04_
 823: PPUSH
 824: CALL 4264 0 3
 828: ST_TO_ADDR
// if not Cyrus then
 829: LD_EXP 11
 833: NOT
 834: IFFALSE 858
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 836: LD_ADDR_EXP 11
 840: PUSH
 841: LD_STRING Cyrus
 843: PPUSH
 844: LD_EXP 1
 848: NOT
 849: PPUSH
 850: LD_STRING 03_
 852: PPUSH
 853: CALL 4264 0 3
 857: ST_TO_ADDR
// end ; if Cyrus then
 858: LD_EXP 11
 862: IFFALSE 880
// team := team ^ Cyrus ;
 864: LD_ADDR_VAR 0 6
 868: PUSH
 869: LD_VAR 0 6
 873: PUSH
 874: LD_EXP 11
 878: ADD
 879: ST_TO_ADDR
// if not Cyrus then
 880: LD_EXP 11
 884: NOT
 885: IFFALSE 1009
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 887: LD_STRING BobbyIn06
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: IFFALSE 923
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 899: LD_ADDR_EXP 12
 903: PUSH
 904: LD_STRING Bobby
 906: PPUSH
 907: LD_EXP 1
 911: NOT
 912: PPUSH
 913: LD_STRING 06c_
 915: PPUSH
 916: CALL 4264 0 3
 920: ST_TO_ADDR
 921: GO 987
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 923: LD_STRING BobbyStayInDelta
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 30
 933: NOT
 934: IFFALSE 987
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 936: LD_ADDR_EXP 12
 940: PUSH
 941: LD_STRING Bobby
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_STRING 04_
 952: PPUSH
 953: CALL 4264 0 3
 957: ST_TO_ADDR
// if not Bobby then
 958: LD_EXP 12
 962: NOT
 963: IFFALSE 987
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 965: LD_ADDR_EXP 12
 969: PUSH
 970: LD_STRING Bobby
 972: PPUSH
 973: LD_EXP 1
 977: NOT
 978: PPUSH
 979: LD_STRING 03_
 981: PPUSH
 982: CALL 4264 0 3
 986: ST_TO_ADDR
// end ; if Bobby then
 987: LD_EXP 12
 991: IFFALSE 1009
// team := team ^ Bobby ;
 993: LD_ADDR_VAR 0 6
 997: PUSH
 998: LD_VAR 0 6
1002: PUSH
1003: LD_EXP 12
1007: ADD
1008: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_STRING othersGamma
1016: PPUSH
1017: CALL_OW 31
1021: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1022: LD_ADDR_VAR 0 2
1026: PUSH
1027: LD_STRING 06_other_survivors
1029: PPUSH
1030: CALL_OW 31
1034: ST_TO_ADDR
// others := others union others4 ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_VAR 0 2
1044: PUSH
1045: LD_VAR 0 4
1049: UNION
1050: ST_TO_ADDR
// team := team ^ others ;
1051: LD_ADDR_VAR 0 6
1055: PUSH
1056: LD_VAR 0 6
1060: PUSH
1061: LD_VAR 0 2
1065: ADD
1066: ST_TO_ADDR
// InitHc ;
1067: CALL_OW 19
// if team <= 12 then
1071: LD_VAR 0 6
1075: PUSH
1076: LD_INT 12
1078: LESSEQUAL
1079: IFFALSE 1128
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1081: LD_INT 0
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: CALL_OW 12
1094: PPUSH
1095: LD_INT 5
1097: PPUSH
1098: CALL_OW 380
// team := team ^ CreateHuman ;
1102: LD_ADDR_VAR 0 6
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: CALL_OW 44
1116: ADD
1117: ST_TO_ADDR
// until team > 12 ;
1118: LD_VAR 0 6
1122: PUSH
1123: LD_INT 12
1125: GREATER
1126: IFFALSE 1081
// for i in others do
1128: LD_ADDR_VAR 0 13
1132: PUSH
1133: LD_VAR 0 2
1137: PUSH
1138: FOR_IN
1139: IFFALSE 1207
// begin if GetClass ( i ) = 2 then
1141: LD_VAR 0 13
1145: PPUSH
1146: CALL_OW 257
1150: PUSH
1151: LD_INT 2
1153: EQUAL
1154: IFFALSE 1168
// SetClass ( i , 1 ) ;
1156: LD_VAR 0 13
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: CALL_OW 336
// for j = 1 to 4 do
1168: LD_ADDR_VAR 0 14
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_INT 4
1180: PUSH
1181: FOR_TO
1182: IFFALSE 1203
// AddExperience ( i , j , 3000 ) ;
1184: LD_VAR 0 13
1188: PPUSH
1189: LD_VAR 0 14
1193: PPUSH
1194: LD_INT 3000
1196: PPUSH
1197: CALL_OW 492
1201: GO 1181
1203: POP
1204: POP
// end ;
1205: GO 1138
1207: POP
1208: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1209: LD_ADDR_VAR 0 7
1213: PUSH
1214: LD_INT 30
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PPUSH
1224: CALL_OW 69
1228: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1229: LD_ADDR_VAR 0 8
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 4
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1249: LD_ADDR_VAR 0 9
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 30
1259: PUSH
1260: LD_INT 7
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 6
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1287: LD_ADDR_VAR 0 10
1291: PUSH
1292: LD_INT 30
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL_OW 69
1306: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1307: LD_ADDR_VAR 0 11
1311: PUSH
1312: LD_INT 2
1314: PUSH
1315: LD_INT 30
1317: PUSH
1318: LD_INT 32
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PUSH
1325: LD_INT 30
1327: PUSH
1328: LD_INT 31
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1345: LD_VAR 0 7
1349: PPUSH
1350: LD_STRING Gamma
1352: PPUSH
1353: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1357: LD_VAR 0 7
1361: PPUSH
1362: CALL_OW 274
1366: PPUSH
1367: LD_INT 2
1369: PPUSH
1370: LD_INT 10000
1372: PPUSH
1373: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1377: LD_VAR 0 7
1381: PPUSH
1382: CALL_OW 274
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: LD_INT 10000
1392: PPUSH
1393: CALL_OW 277
// if dep then
1397: LD_VAR 0 7
1401: IFFALSE 1503
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1403: LD_EXP 7
1407: PPUSH
1408: LD_VAR 0 7
1412: PUSH
1413: LD_INT 1
1415: ARRAY
1416: PPUSH
1417: CALL_OW 52
// if Brown then
1421: LD_EXP 14
1425: IFFALSE 1461
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1427: LD_EXP 14
1431: PPUSH
1432: LD_VAR 0 7
1436: PUSH
1437: LD_INT 1
1439: ARRAY
1440: PPUSH
1441: CALL_OW 52
// team := team diff Brown ;
1445: LD_ADDR_VAR 0 6
1449: PUSH
1450: LD_VAR 0 6
1454: PUSH
1455: LD_EXP 14
1459: DIFF
1460: ST_TO_ADDR
// end ; if Donaldson then
1461: LD_EXP 13
1465: IFFALSE 1501
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1467: LD_EXP 13
1471: PPUSH
1472: LD_VAR 0 7
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: CALL_OW 52
// team := team diff Donaldson ;
1485: LD_ADDR_VAR 0 6
1489: PUSH
1490: LD_VAR 0 6
1494: PUSH
1495: LD_EXP 13
1499: DIFF
1500: ST_TO_ADDR
// end ; end else
1501: GO 1610
// begin PlaceUnitXYR ( JMM , 52 , 16 , 10 , false ) ;
1503: LD_EXP 7
1507: PPUSH
1508: LD_INT 52
1510: PPUSH
1511: LD_INT 16
1513: PPUSH
1514: LD_INT 10
1516: PPUSH
1517: LD_INT 0
1519: PPUSH
1520: CALL_OW 50
// if Brown then
1524: LD_EXP 14
1528: IFFALSE 1567
// begin PlaceUnitXYR ( Brown , 52 , 16 , 10 , false ) ;
1530: LD_EXP 14
1534: PPUSH
1535: LD_INT 52
1537: PPUSH
1538: LD_INT 16
1540: PPUSH
1541: LD_INT 10
1543: PPUSH
1544: LD_INT 0
1546: PPUSH
1547: CALL_OW 50
// team := team diff Brown ;
1551: LD_ADDR_VAR 0 6
1555: PUSH
1556: LD_VAR 0 6
1560: PUSH
1561: LD_EXP 14
1565: DIFF
1566: ST_TO_ADDR
// end ; if Donaldson then
1567: LD_EXP 13
1571: IFFALSE 1610
// begin PlaceUnitXYR ( Donaldson , 52 , 16 , 10 , false ) ;
1573: LD_EXP 13
1577: PPUSH
1578: LD_INT 52
1580: PPUSH
1581: LD_INT 16
1583: PPUSH
1584: LD_INT 10
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 50
// team := team diff Donaldson ;
1594: LD_ADDR_VAR 0 6
1598: PUSH
1599: LD_VAR 0 6
1603: PUSH
1604: LD_EXP 13
1608: DIFF
1609: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1610: LD_VAR 0 11
1614: PUSH
1615: LD_VAR 0 6
1619: PPUSH
1620: LD_INT 25
1622: PUSH
1623: LD_INT 1
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: AND
1635: IFFALSE 1744
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1637: LD_ADDR_VAR 0 12
1641: PUSH
1642: LD_VAR 0 6
1646: PPUSH
1647: LD_INT 25
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 72
1661: ST_TO_ADDR
// for i in bun do
1662: LD_ADDR_VAR 0 13
1666: PUSH
1667: LD_VAR 0 11
1671: PUSH
1672: FOR_IN
1673: IFFALSE 1742
// begin if not filter then
1675: LD_VAR 0 12
1679: NOT
1680: IFFALSE 1684
// break ;
1682: GO 1742
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1684: LD_VAR 0 12
1688: PUSH
1689: LD_INT 1
1691: ARRAY
1692: PPUSH
1693: LD_VAR 0 13
1697: PPUSH
1698: CALL_OW 52
// team := team diff filter [ 1 ] ;
1702: LD_ADDR_VAR 0 6
1706: PUSH
1707: LD_VAR 0 6
1711: PUSH
1712: LD_VAR 0 12
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: DIFF
1721: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1722: LD_ADDR_VAR 0 12
1726: PUSH
1727: LD_VAR 0 12
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: CALL_OW 3
1739: ST_TO_ADDR
// end ;
1740: GO 1672
1742: POP
1743: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1744: LD_VAR 0 8
1748: PUSH
1749: LD_VAR 0 6
1753: PPUSH
1754: LD_INT 25
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 72
1768: AND
1769: IFFALSE 1891
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1771: LD_ADDR_VAR 0 12
1775: PUSH
1776: LD_VAR 0 6
1780: PPUSH
1781: LD_INT 25
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PPUSH
1791: CALL_OW 72
1795: ST_TO_ADDR
// for i = 1 to filter do
1796: LD_ADDR_VAR 0 13
1800: PUSH
1801: DOUBLE
1802: LD_INT 1
1804: DEC
1805: ST_TO_ADDR
1806: LD_VAR 0 12
1810: PUSH
1811: FOR_TO
1812: IFFALSE 1873
// begin if ( i <= 6 ) then
1814: LD_VAR 0 13
1818: PUSH
1819: LD_INT 6
1821: LESSEQUAL
1822: IFFALSE 1850
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1824: LD_VAR 0 12
1828: PUSH
1829: LD_VAR 0 13
1833: ARRAY
1834: PPUSH
1835: LD_VAR 0 8
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: CALL_OW 52
1848: GO 1871
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1850: LD_VAR 0 12
1854: PUSH
1855: LD_VAR 0 13
1859: ARRAY
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// end ;
1871: GO 1811
1873: POP
1874: POP
// team := team diff filter ;
1875: LD_ADDR_VAR 0 6
1879: PUSH
1880: LD_VAR 0 6
1884: PUSH
1885: LD_VAR 0 12
1889: DIFF
1890: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1891: LD_VAR 0 9
1895: PUSH
1896: LD_VAR 0 6
1900: PPUSH
1901: LD_INT 25
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PPUSH
1911: CALL_OW 72
1915: AND
1916: IFFALSE 2038
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1918: LD_ADDR_VAR 0 12
1922: PUSH
1923: LD_VAR 0 6
1927: PPUSH
1928: LD_INT 25
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PPUSH
1938: CALL_OW 72
1942: ST_TO_ADDR
// for i = 1 to filter do
1943: LD_ADDR_VAR 0 13
1947: PUSH
1948: DOUBLE
1949: LD_INT 1
1951: DEC
1952: ST_TO_ADDR
1953: LD_VAR 0 12
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2020
// begin if ( i <= 6 ) then
1961: LD_VAR 0 13
1965: PUSH
1966: LD_INT 6
1968: LESSEQUAL
1969: IFFALSE 1997
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1971: LD_VAR 0 12
1975: PUSH
1976: LD_VAR 0 13
1980: ARRAY
1981: PPUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_INT 1
1989: ARRAY
1990: PPUSH
1991: CALL_OW 52
1995: GO 2018
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1997: LD_VAR 0 12
2001: PUSH
2002: LD_VAR 0 13
2006: ARRAY
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// end ;
2018: GO 1958
2020: POP
2021: POP
// team := team diff filter ;
2022: LD_ADDR_VAR 0 6
2026: PUSH
2027: LD_VAR 0 6
2031: PUSH
2032: LD_VAR 0 12
2036: DIFF
2037: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
2038: LD_VAR 0 10
2042: PUSH
2043: LD_VAR 0 6
2047: PPUSH
2048: LD_INT 25
2050: PUSH
2051: LD_INT 3
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PPUSH
2058: CALL_OW 72
2062: AND
2063: IFFALSE 2185
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
2065: LD_ADDR_VAR 0 12
2069: PUSH
2070: LD_VAR 0 6
2074: PPUSH
2075: LD_INT 25
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 72
2089: ST_TO_ADDR
// for i = 1 to filter do
2090: LD_ADDR_VAR 0 13
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_VAR 0 12
2104: PUSH
2105: FOR_TO
2106: IFFALSE 2167
// begin if ( i <= 6 ) then
2108: LD_VAR 0 13
2112: PUSH
2113: LD_INT 6
2115: LESSEQUAL
2116: IFFALSE 2144
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2118: LD_VAR 0 12
2122: PUSH
2123: LD_VAR 0 13
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 10
2133: PUSH
2134: LD_INT 1
2136: ARRAY
2137: PPUSH
2138: CALL_OW 52
2142: GO 2165
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2144: LD_VAR 0 12
2148: PUSH
2149: LD_VAR 0 13
2153: ARRAY
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// end ;
2165: GO 2105
2167: POP
2168: POP
// team := team diff filter ;
2169: LD_ADDR_VAR 0 6
2173: PUSH
2174: LD_VAR 0 6
2178: PUSH
2179: LD_VAR 0 12
2183: DIFF
2184: ST_TO_ADDR
// end ; if team then
2185: LD_VAR 0 6
2189: IFFALSE 2232
// for i in team do
2191: LD_ADDR_VAR 0 13
2195: PUSH
2196: LD_VAR 0 6
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2230
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2204: LD_VAR 0 13
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL_OW 49
// ComHold ( i ) ;
2219: LD_VAR 0 13
2223: PPUSH
2224: CALL_OW 140
// end ;
2228: GO 2201
2230: POP
2231: POP
// if fac then
2232: LD_VAR 0 10
2236: IFFALSE 2272
// if UnitsInside ( fac [ 1 ] ) then
2238: LD_VAR 0 10
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PPUSH
2247: CALL_OW 313
2251: IFFALSE 2272
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2253: LD_VAR 0 10
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: LD_INT 10
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 486
// if lab then
2272: LD_VAR 0 9
2276: IFFALSE 2312
// if UnitsInside ( lab [ 1 ] ) then
2278: LD_VAR 0 9
2282: PUSH
2283: LD_INT 1
2285: ARRAY
2286: PPUSH
2287: CALL_OW 313
2291: IFFALSE 2312
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2293: LD_VAR 0 9
2297: PUSH
2298: LD_INT 1
2300: ARRAY
2301: PPUSH
2302: LD_INT 10
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 486
// uc_side := 4 ;
2312: LD_ADDR_OWVAR 20
2316: PUSH
2317: LD_INT 4
2319: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2320: LD_ADDR_EXP 17
2324: PUSH
2325: LD_STRING Harisson
2327: PPUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_STRING 
2333: PPUSH
2334: CALL 4264 0 3
2338: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_double_gun , 100 ) ;
2339: LD_ADDR_VAR 0 5
2343: PUSH
2344: LD_INT 4
2346: PPUSH
2347: LD_INT 1
2349: PPUSH
2350: LD_INT 2
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 5
2361: PPUSH
2362: LD_INT 100
2364: PPUSH
2365: CALL 4327 0 7
2369: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2370: LD_VAR 0 5
2374: PPUSH
2375: LD_INT 2
2377: PPUSH
2378: CALL_OW 233
// PlaceUnitXY ( veh , 22 , 9 , false ) ;
2382: LD_VAR 0 5
2386: PPUSH
2387: LD_INT 22
2389: PPUSH
2390: LD_INT 9
2392: PPUSH
2393: LD_INT 0
2395: PPUSH
2396: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2400: LD_EXP 17
2404: PPUSH
2405: LD_VAR 0 5
2409: PPUSH
2410: CALL_OW 52
// PrepareHuman ( false , 1 , 0 ) ;
2414: LD_INT 0
2416: PPUSH
2417: LD_INT 1
2419: PPUSH
2420: LD_INT 0
2422: PPUSH
2423: CALL_OW 380
// RandGuy := CreateHuman ;
2427: LD_ADDR_EXP 19
2431: PUSH
2432: CALL_OW 44
2436: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 100 ) ;
2437: LD_ADDR_VAR 0 5
2441: PUSH
2442: LD_INT 4
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: LD_INT 4
2459: PPUSH
2460: LD_INT 100
2462: PPUSH
2463: CALL 4327 0 7
2467: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 233
// PlaceUnitXY ( veh , 17 , 4 , false ) ;
2480: LD_VAR 0 5
2484: PPUSH
2485: LD_INT 17
2487: PPUSH
2488: LD_INT 4
2490: PPUSH
2491: LD_INT 0
2493: PPUSH
2494: CALL_OW 48
// PlaceHumanInUnit ( RandGuy , veh ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_VAR 0 5
2507: PPUSH
2508: CALL_OW 52
// end ;
2512: LD_VAR 0 1
2516: RET
// function PrepareBase ; var blist , i , b ; begin
2517: LD_INT 0
2519: PPUSH
2520: PPUSH
2521: PPUSH
2522: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2523: LD_INT 71
2525: PPUSH
2526: LD_INT 5
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2536: LD_ADDR_VAR 0 2
2540: PUSH
2541: LD_STRING GammaBase
2543: PPUSH
2544: EMPTY
2545: PPUSH
2546: CALL_OW 30
2550: ST_TO_ADDR
// if not blist then
2551: LD_VAR 0 2
2555: NOT
2556: IFFALSE 2596
// blist := [ [ b_depot , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2558: LD_ADDR_VAR 0 2
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: LD_INT 51
2568: PUSH
2569: LD_INT 10
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: LD_INT 3
2577: PUSH
2578: LD_INT 0
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: ST_TO_ADDR
// uc_side := 1 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 1
2603: ST_TO_ADDR
// uc_nation := 1 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// for i in blist do
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: LD_VAR 0 2
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2774
// begin bc_type := i [ 1 ] ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_VAR 0 3
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2639: LD_ADDR_OWVAR 43
2643: PUSH
2644: LD_VAR 0 3
2648: PUSH
2649: LD_INT 5
2651: ARRAY
2652: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2653: LD_VAR 0 3
2657: PUSH
2658: LD_INT 1
2660: ARRAY
2661: PUSH
2662: LD_INT 7
2664: PUSH
2665: LD_INT 8
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: IN
2672: IFFALSE 2702
// begin bc_kind1 := i [ 7 ] ;
2674: LD_ADDR_OWVAR 44
2678: PUSH
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 7
2686: ARRAY
2687: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2688: LD_ADDR_OWVAR 45
2692: PUSH
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 8
2700: ARRAY
2701: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2702: LD_ADDR_VAR 0 4
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 2
2714: ARRAY
2715: PPUSH
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 3
2723: ARRAY
2724: PPUSH
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 4
2732: ARRAY
2733: PPUSH
2734: CALL_OW 47
2738: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2739: LD_VAR 0 4
2743: PPUSH
2744: CALL_OW 266
2748: PUSH
2749: LD_INT 32
2751: EQUAL
2752: IFFALSE 2772
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2754: LD_VAR 0 4
2758: PPUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 7
2766: ARRAY
2767: PPUSH
2768: CALL_OW 431
// end ; end ;
2772: GO 2622
2774: POP
2775: POP
// end ; end_of_file
2776: LD_VAR 0 1
2780: RET
// export function Action ; var points , i , sol , time , team , filter ; begin
2781: LD_INT 0
2783: PPUSH
2784: PPUSH
2785: PPUSH
2786: PPUSH
2787: PPUSH
2788: PPUSH
2789: PPUSH
// InGameOn ;
2790: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2794: LD_INT 33
2796: PPUSH
2797: LD_INT 11
2799: PPUSH
2800: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2804: LD_ADDR_VAR 0 2
2808: PUSH
2809: LD_INT 29
2811: PUSH
2812: LD_INT 21
2814: PUSH
2815: EMPTY
2816: LIST
2817: LIST
2818: PUSH
2819: LD_INT 41
2821: PUSH
2822: LD_INT 28
2824: PUSH
2825: EMPTY
2826: LIST
2827: LIST
2828: PUSH
2829: LD_INT 52
2831: PUSH
2832: LD_INT 26
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 49
2841: PUSH
2842: LD_INT 16
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: LIST
2854: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2855: LD_ADDR_VAR 0 4
2859: PUSH
2860: LD_INT 22
2862: PUSH
2863: LD_INT 1
2865: PUSH
2866: EMPTY
2867: LIST
2868: LIST
2869: PUSH
2870: LD_INT 26
2872: PUSH
2873: LD_INT 1
2875: PUSH
2876: EMPTY
2877: LIST
2878: LIST
2879: PUSH
2880: EMPTY
2881: LIST
2882: LIST
2883: PPUSH
2884: CALL_OW 69
2888: PUSH
2889: LD_EXP 7
2893: PUSH
2894: LD_EXP 14
2898: PUSH
2899: LD_EXP 11
2903: PUSH
2904: LD_EXP 12
2908: PUSH
2909: LD_EXP 8
2913: PUSH
2914: LD_EXP 15
2918: PUSH
2919: LD_EXP 16
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: LIST
2929: LIST
2930: LIST
2931: LIST
2932: DIFF
2933: PUSH
2934: LD_INT 1
2936: ARRAY
2937: ST_TO_ADDR
// if sol then
2938: LD_VAR 0 4
2942: IFFALSE 2973
// begin ComMoveXY ( sol , 50 , 18 ) ;
2944: LD_VAR 0 4
2948: PPUSH
2949: LD_INT 50
2951: PPUSH
2952: LD_INT 18
2954: PPUSH
2955: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
2959: LD_VAR 0 4
2963: PPUSH
2964: LD_EXP 17
2968: PPUSH
2969: CALL_OW 179
// end ; for i in points do
2973: LD_ADDR_VAR 0 3
2977: PUSH
2978: LD_VAR 0 2
2982: PUSH
2983: FOR_IN
2984: IFFALSE 3024
// AddComMoveXY ( [ Harisson , RandGuy ] , i [ 1 ] , i [ 2 ] ) ;
2986: LD_EXP 17
2990: PUSH
2991: LD_EXP 19
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: LD_VAR 0 3
3004: PUSH
3005: LD_INT 1
3007: ARRAY
3008: PPUSH
3009: LD_VAR 0 3
3013: PUSH
3014: LD_INT 2
3016: ARRAY
3017: PPUSH
3018: CALL_OW 171
3022: GO 2983
3024: POP
3025: POP
// AddComExitVehicle ( [ Harisson , RandGuy ] ) ;
3026: LD_EXP 17
3030: PUSH
3031: LD_EXP 19
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 181
// AddComTurnUnit ( [ Harisson , RandGuy ] , sol ) ;
3044: LD_EXP 17
3048: PUSH
3049: LD_EXP 19
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PPUSH
3058: LD_VAR 0 4
3062: PPUSH
3063: CALL_OW 179
// time := 0 0$20 ;
3067: LD_ADDR_VAR 0 5
3071: PUSH
3072: LD_INT 700
3074: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
3075: LD_INT 10
3077: PPUSH
3078: CALL_OW 67
// time := time - 0 0$0.3 ;
3082: LD_ADDR_VAR 0 5
3086: PUSH
3087: LD_VAR 0 5
3091: PUSH
3092: LD_INT 10
3094: MINUS
3095: ST_TO_ADDR
// until not IsInUnit ( Harisson ) or time <= 0 0$00 ;
3096: LD_EXP 17
3100: PPUSH
3101: CALL_OW 310
3105: NOT
3106: PUSH
3107: LD_VAR 0 5
3111: PUSH
3112: LD_INT 0
3114: LESSEQUAL
3115: OR
3116: IFFALSE 3075
// Say ( sol , D1-Sol1-1 ) ;
3118: LD_VAR 0 4
3122: PPUSH
3123: LD_STRING D1-Sol1-1
3125: PPUSH
3126: CALL_OW 88
// Say ( Harisson , D1-Har-1 ) ;
3130: LD_EXP 17
3134: PPUSH
3135: LD_STRING D1-Har-1
3137: PPUSH
3138: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3142: LD_INT 10
3144: PPUSH
3145: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
3149: LD_VAR 0 4
3153: PPUSH
3154: LD_INT 35
3156: PPUSH
3157: LD_INT 21
3159: PPUSH
3160: CALL_OW 111
// ComExitBuilding ( JMM ) ;
3164: LD_EXP 7
3168: PPUSH
3169: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
3173: LD_EXP 7
3177: PPUSH
3178: LD_EXP 17
3182: PPUSH
3183: CALL_OW 172
// ComTurnUnit ( [ Harisson , RandGuy ] , JMM ) ;
3187: LD_EXP 17
3191: PUSH
3192: LD_EXP 19
3196: PUSH
3197: EMPTY
3198: LIST
3199: LIST
3200: PPUSH
3201: LD_EXP 7
3205: PPUSH
3206: CALL_OW 119
// time := 0 0$3 ;
3210: LD_ADDR_VAR 0 5
3214: PUSH
3215: LD_INT 105
3217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3218: LD_INT 35
3220: PPUSH
3221: CALL_OW 67
// time := time - 0 0$1 ;
3225: LD_ADDR_VAR 0 5
3229: PUSH
3230: LD_VAR 0 5
3234: PUSH
3235: LD_INT 35
3237: MINUS
3238: ST_TO_ADDR
// until GetDistUnits ( JMM , Harisson ) < 4 or time = 0 0$00 ;
3239: LD_EXP 7
3243: PPUSH
3244: LD_EXP 17
3248: PPUSH
3249: CALL_OW 296
3253: PUSH
3254: LD_INT 4
3256: LESS
3257: PUSH
3258: LD_VAR 0 5
3262: PUSH
3263: LD_INT 0
3265: EQUAL
3266: OR
3267: IFFALSE 3218
// ComTurnUnit ( JMM , Harisson ) ;
3269: LD_EXP 7
3273: PPUSH
3274: LD_EXP 17
3278: PPUSH
3279: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3283: LD_EXP 7
3287: PPUSH
3288: LD_STRING D1-JMM-1
3290: PPUSH
3291: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
3295: LD_EXP 17
3299: PPUSH
3300: LD_STRING D1-Har-2
3302: PPUSH
3303: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3307: LD_EXP 7
3311: PPUSH
3312: LD_STRING D1-JMM-2
3314: PPUSH
3315: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3319: LD_EXP 17
3323: PPUSH
3324: LD_STRING D1-Har-3
3326: PPUSH
3327: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3331: LD_EXP 7
3335: PPUSH
3336: LD_STRING D1-JMM-3
3338: PPUSH
3339: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3343: LD_EXP 17
3347: PPUSH
3348: LD_STRING D1-Har-4
3350: PPUSH
3351: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3355: LD_EXP 7
3359: PPUSH
3360: LD_STRING D1-JMM-4
3362: PPUSH
3363: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3367: LD_EXP 17
3371: PPUSH
3372: LD_STRING D1-Har-5
3374: PPUSH
3375: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3379: LD_EXP 7
3383: PPUSH
3384: LD_STRING D1-JMM-5
3386: PPUSH
3387: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3391: LD_EXP 17
3395: PPUSH
3396: LD_STRING D1-Har-6
3398: PPUSH
3399: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3403: LD_EXP 7
3407: PPUSH
3408: LD_STRING D1-JMM-6
3410: PPUSH
3411: CALL_OW 88
// EndMission ;
3415: CALL 3424 0 0
// end ;
3419: LD_VAR 0 1
3423: RET
// export function EndMission ; var commander , i , all ; begin
3424: LD_INT 0
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
// case gamma_commander of 1 :
3430: LD_EXP 18
3434: PUSH
3435: LD_INT 1
3437: DOUBLE
3438: EQUAL
3439: IFTRUE 3443
3441: GO 3456
3443: POP
// commander := Donaldson ; 2 :
3444: LD_ADDR_VAR 0 2
3448: PUSH
3449: LD_EXP 13
3453: ST_TO_ADDR
3454: GO 3499
3456: LD_INT 2
3458: DOUBLE
3459: EQUAL
3460: IFTRUE 3464
3462: GO 3477
3464: POP
// commander := Brown ; 3 :
3465: LD_ADDR_VAR 0 2
3469: PUSH
3470: LD_EXP 14
3474: ST_TO_ADDR
3475: GO 3499
3477: LD_INT 3
3479: DOUBLE
3480: EQUAL
3481: IFTRUE 3485
3483: GO 3498
3485: POP
// commander := Houten ; end ;
3486: LD_ADDR_VAR 0 2
3490: PUSH
3491: LD_EXP 15
3495: ST_TO_ADDR
3496: GO 3499
3498: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3499: LD_ADDR_VAR 0 4
3503: PUSH
3504: LD_INT 22
3506: PUSH
3507: LD_INT 1
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 21
3516: PUSH
3517: LD_INT 1
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: EMPTY
3525: LIST
3526: LIST
3527: PPUSH
3528: CALL_OW 69
3532: PUSH
3533: LD_EXP 7
3537: PUSH
3538: LD_VAR 0 2
3542: PUSH
3543: EMPTY
3544: LIST
3545: LIST
3546: DIFF
3547: ST_TO_ADDR
// if UnitFilter ( all , [ f_class , 2 ] ) then
3548: LD_VAR 0 4
3552: PPUSH
3553: LD_INT 25
3555: PUSH
3556: LD_INT 2
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PPUSH
3563: CALL_OW 72
3567: IFFALSE 3613
// for i in UnitFilter ( all , [ f_class , 2 ] ) do
3569: LD_ADDR_VAR 0 3
3573: PUSH
3574: LD_VAR 0 4
3578: PPUSH
3579: LD_INT 25
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PPUSH
3589: CALL_OW 72
3593: PUSH
3594: FOR_IN
3595: IFFALSE 3611
// SetClass ( i , 2 ) ;
3597: LD_VAR 0 3
3601: PPUSH
3602: LD_INT 2
3604: PPUSH
3605: CALL_OW 336
3609: GO 3594
3611: POP
3612: POP
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable ] ^ [ commander , Harisson ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3613: LD_ADDR_EXP 4
3617: PUSH
3618: LD_STRING 1
3620: PPUSH
3621: LD_INT 10
3623: PPUSH
3624: LD_INT 10
3626: PPUSH
3627: LD_INT -5
3629: PUSH
3630: LD_EXP 7
3634: PUSH
3635: LD_INT -2
3637: PUSH
3638: LD_INT -3
3640: PUSH
3641: LD_INT -5
3643: PUSH
3644: EMPTY
3645: LIST
3646: LIST
3647: LIST
3648: LIST
3649: LIST
3650: PUSH
3651: LD_VAR 0 4
3655: ADD
3656: PUSH
3657: LD_INT -6
3659: PUSH
3660: LD_INT -4
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: ADD
3667: PUSH
3668: LD_VAR 0 2
3672: PUSH
3673: LD_EXP 17
3677: PUSH
3678: EMPTY
3679: LIST
3680: LIST
3681: ADD
3682: PPUSH
3683: LD_INT 1
3685: PUSH
3686: LD_INT 3
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 3
3698: PUSH
3699: LD_INT 6
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: LIST
3706: PUSH
3707: LD_INT 4
3709: PUSH
3710: LD_INT 1
3712: PUSH
3713: EMPTY
3714: LIST
3715: LIST
3716: PUSH
3717: EMPTY
3718: LIST
3719: LIST
3720: LIST
3721: PPUSH
3722: CALL_OW 42
3726: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3727: LD_VAR 0 4
3731: PUSH
3732: LD_EXP 7
3736: PUSH
3737: LD_EXP 8
3741: PUSH
3742: LD_EXP 10
3746: PUSH
3747: LD_EXP 11
3751: PUSH
3752: LD_EXP 12
3756: PUSH
3757: LD_EXP 9
3761: PUSH
3762: LD_EXP 13
3766: PUSH
3767: LD_EXP 14
3771: PUSH
3772: LD_EXP 15
3776: PUSH
3777: LD_EXP 17
3781: PUSH
3782: LD_EXP 16
3786: PUSH
3787: EMPTY
3788: LIST
3789: LIST
3790: LIST
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: PUSH
3800: LD_EXP 4
3804: ADD
3805: DIFF
3806: PPUSH
3807: LD_STRING 07_othersGamma
3809: PPUSH
3810: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
3814: LD_EXP 4
3818: PUSH
3819: LD_EXP 7
3823: PUSH
3824: LD_EXP 8
3828: PUSH
3829: LD_EXP 10
3833: PUSH
3834: LD_EXP 11
3838: PUSH
3839: LD_EXP 12
3843: PUSH
3844: LD_EXP 9
3848: PUSH
3849: LD_EXP 13
3853: PUSH
3854: LD_EXP 14
3858: PUSH
3859: LD_EXP 15
3863: PUSH
3864: LD_EXP 17
3868: PUSH
3869: LD_EXP 16
3873: PUSH
3874: LD_INT 0
3876: PUSH
3877: EMPTY
3878: LIST
3879: LIST
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: LIST
3887: LIST
3888: LIST
3889: LIST
3890: DIFF
3891: PPUSH
3892: LD_STRING 07_others
3894: PPUSH
3895: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3899: LD_EXP 7
3903: PPUSH
3904: LD_EXP 5
3908: PUSH
3909: LD_STRING JMM
3911: STR
3912: PPUSH
3913: CALL_OW 38
// if Lisa then
3917: LD_EXP 10
3921: IFFALSE 3963
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3923: LD_EXP 10
3927: PPUSH
3928: LD_EXP 5
3932: PUSH
3933: LD_STRING Lisa
3935: STR
3936: PPUSH
3937: CALL_OW 38
// if Lisa in save_group then
3941: LD_EXP 10
3945: PUSH
3946: LD_EXP 4
3950: IN
3951: IFFALSE 3963
// SaveVariable ( true , LisaIn07 ) ;
3953: LD_INT 1
3955: PPUSH
3956: LD_STRING LisaIn07
3958: PPUSH
3959: CALL_OW 39
// end ; if Bobby then
3963: LD_EXP 12
3967: IFFALSE 4009
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3969: LD_EXP 12
3973: PPUSH
3974: LD_EXP 5
3978: PUSH
3979: LD_STRING Bobby
3981: STR
3982: PPUSH
3983: CALL_OW 38
// if Bobby in save_group then
3987: LD_EXP 12
3991: PUSH
3992: LD_EXP 4
3996: IN
3997: IFFALSE 4009
// SaveVariable ( true , BobbyIn07 ) ;
3999: LD_INT 1
4001: PPUSH
4002: LD_STRING BobbyIn07
4004: PPUSH
4005: CALL_OW 39
// end ; if Cyrus then
4009: LD_EXP 11
4013: IFFALSE 4055
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4015: LD_EXP 11
4019: PPUSH
4020: LD_EXP 5
4024: PUSH
4025: LD_STRING Cyrus
4027: STR
4028: PPUSH
4029: CALL_OW 38
// if Cyrus in save_group then
4033: LD_EXP 11
4037: PUSH
4038: LD_EXP 4
4042: IN
4043: IFFALSE 4055
// SaveVariable ( true , CyrusIn07 ) ;
4045: LD_INT 1
4047: PPUSH
4048: LD_STRING CyrusIn07
4050: PPUSH
4051: CALL_OW 39
// end ; if Brown then
4055: LD_EXP 14
4059: IFFALSE 4101
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4061: LD_EXP 14
4065: PPUSH
4066: LD_EXP 5
4070: PUSH
4071: LD_STRING Brown
4073: STR
4074: PPUSH
4075: CALL_OW 38
// if Brown in save_group then
4079: LD_EXP 14
4083: PUSH
4084: LD_EXP 4
4088: IN
4089: IFFALSE 4101
// SaveVariable ( true , BrownIn07 ) ;
4091: LD_INT 1
4093: PPUSH
4094: LD_STRING BrownIn07
4096: PPUSH
4097: CALL_OW 39
// end ; if Donaldson then
4101: LD_EXP 13
4105: IFFALSE 4147
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4107: LD_EXP 13
4111: PPUSH
4112: LD_EXP 5
4116: PUSH
4117: LD_STRING Donaldson
4119: STR
4120: PPUSH
4121: CALL_OW 38
// if Donaldson in save_group then
4125: LD_EXP 13
4129: PUSH
4130: LD_EXP 4
4134: IN
4135: IFFALSE 4147
// SaveVariable ( true , DonaldsonIn07 ) ;
4137: LD_INT 1
4139: PPUSH
4140: LD_STRING DonaldsonIn07
4142: PPUSH
4143: CALL_OW 39
// end ; if Gladstone then
4147: LD_EXP 8
4151: IFFALSE 4193
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4153: LD_EXP 8
4157: PPUSH
4158: LD_EXP 5
4162: PUSH
4163: LD_STRING Gladstone
4165: STR
4166: PPUSH
4167: CALL_OW 38
// if Gladstone in save_group then
4171: LD_EXP 8
4175: PUSH
4176: LD_EXP 4
4180: IN
4181: IFFALSE 4193
// SaveVariable ( true , GladstoneIn07 ) ;
4183: LD_INT 1
4185: PPUSH
4186: LD_STRING GladstoneIn07
4188: PPUSH
4189: CALL_OW 39
// end ; if Khatam then
4193: LD_EXP 16
4197: IFFALSE 4239
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
4199: LD_EXP 16
4203: PPUSH
4204: LD_EXP 5
4208: PUSH
4209: LD_STRING Khatam
4211: STR
4212: PPUSH
4213: CALL_OW 38
// if Khatam in save_group then
4217: LD_EXP 16
4221: PUSH
4222: LD_EXP 4
4226: IN
4227: IFFALSE 4239
// SaveVariable ( true , KhatamIn07 ) ;
4229: LD_INT 1
4231: PPUSH
4232: LD_STRING KhatamIn07
4234: PPUSH
4235: CALL_OW 39
// end ; if debug then
4239: LD_EXP 1
4243: IFFALSE 4249
// InGameOff ;
4245: CALL_OW 9
// ChangeMap ( 1 , %_cont ) ;
4249: LD_INT 1
4251: PPUSH
4252: LD_STRING %_cont
4254: PPUSH
4255: CALL_OW 340
// end ; end_of_file
4259: LD_VAR 0 1
4263: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4264: LD_INT 0
4266: PPUSH
4267: PPUSH
// if exist_mode then
4268: LD_VAR 0 2
4272: IFFALSE 4297
// unit := CreateCharacter ( prefix & ident ) else
4274: LD_ADDR_VAR 0 5
4278: PUSH
4279: LD_VAR 0 3
4283: PUSH
4284: LD_VAR 0 1
4288: STR
4289: PPUSH
4290: CALL_OW 34
4294: ST_TO_ADDR
4295: GO 4312
// unit := NewCharacter ( ident ) ;
4297: LD_ADDR_VAR 0 5
4301: PUSH
4302: LD_VAR 0 1
4306: PPUSH
4307: CALL_OW 25
4311: ST_TO_ADDR
// result := unit ;
4312: LD_ADDR_VAR 0 4
4316: PUSH
4317: LD_VAR 0 5
4321: ST_TO_ADDR
// end ;
4322: LD_VAR 0 4
4326: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4327: LD_INT 0
4329: PPUSH
// uc_side := side ;
4330: LD_ADDR_OWVAR 20
4334: PUSH
4335: LD_VAR 0 1
4339: ST_TO_ADDR
// uc_nation := nation ;
4340: LD_ADDR_OWVAR 21
4344: PUSH
4345: LD_VAR 0 2
4349: ST_TO_ADDR
// vc_chassis := chassis ;
4350: LD_ADDR_OWVAR 37
4354: PUSH
4355: LD_VAR 0 3
4359: ST_TO_ADDR
// vc_engine := engine ;
4360: LD_ADDR_OWVAR 39
4364: PUSH
4365: LD_VAR 0 4
4369: ST_TO_ADDR
// vc_control := control ;
4370: LD_ADDR_OWVAR 38
4374: PUSH
4375: LD_VAR 0 5
4379: ST_TO_ADDR
// vc_weapon := weapon ;
4380: LD_ADDR_OWVAR 40
4384: PUSH
4385: LD_VAR 0 6
4389: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4390: LD_ADDR_OWVAR 41
4394: PUSH
4395: LD_VAR 0 7
4399: ST_TO_ADDR
// result := CreateVehicle ;
4400: LD_ADDR_VAR 0 8
4404: PUSH
4405: CALL_OW 45
4409: ST_TO_ADDR
// end ;
4410: LD_VAR 0 8
4414: RET
// export function SayX ( units , ident ) ; var i ; begin
4415: LD_INT 0
4417: PPUSH
4418: PPUSH
// result := false ;
4419: LD_ADDR_VAR 0 3
4423: PUSH
4424: LD_INT 0
4426: ST_TO_ADDR
// if not units then
4427: LD_VAR 0 1
4431: NOT
4432: IFFALSE 4436
// exit ;
4434: GO 4490
// for i in units do
4436: LD_ADDR_VAR 0 4
4440: PUSH
4441: LD_VAR 0 1
4445: PUSH
4446: FOR_IN
4447: IFFALSE 4488
// if IsOk ( i ) then
4449: LD_VAR 0 4
4453: PPUSH
4454: CALL_OW 302
4458: IFFALSE 4486
// begin Say ( i , ident ) ;
4460: LD_VAR 0 4
4464: PPUSH
4465: LD_VAR 0 2
4469: PPUSH
4470: CALL_OW 88
// result := i ;
4474: LD_ADDR_VAR 0 3
4478: PUSH
4479: LD_VAR 0 4
4483: ST_TO_ADDR
// break ;
4484: GO 4488
// end ;
4486: GO 4446
4488: POP
4489: POP
// end ;
4490: LD_VAR 0 3
4494: RET
