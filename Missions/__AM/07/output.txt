// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2357 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2078 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 3652 0 3
 179: ST_TO_ADDR
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 180: LD_ADDR_EXP 18
 184: PUSH
 185: LD_STRING GammaCommander
 187: PPUSH
 188: LD_INT 3
 190: PPUSH
 191: CALL_OW 30
 195: ST_TO_ADDR
// if gamma_commander = 1 then
 196: LD_EXP 18
 200: PUSH
 201: LD_INT 1
 203: EQUAL
 204: IFFALSE 230
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 206: LD_ADDR_EXP 13
 210: PUSH
 211: LD_STRING Donaldson
 213: PPUSH
 214: LD_EXP 1
 218: NOT
 219: PPUSH
 220: LD_STRING 04_
 222: PPUSH
 223: CALL 3652 0 3
 227: ST_TO_ADDR
// end else
 228: GO 288
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 230: LD_STRING DonaldsonIn06
 232: PPUSH
 233: LD_INT 0
 235: PPUSH
 236: CALL_OW 30
 240: IFFALSE 266
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 242: LD_ADDR_EXP 13
 246: PUSH
 247: LD_STRING Donaldson
 249: PPUSH
 250: LD_EXP 1
 254: NOT
 255: PPUSH
 256: LD_STRING 06c_
 258: PPUSH
 259: CALL 3652 0 3
 263: ST_TO_ADDR
 264: GO 288
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 266: LD_ADDR_EXP 13
 270: PUSH
 271: LD_STRING Donaldson
 273: PPUSH
 274: LD_EXP 1
 278: NOT
 279: PPUSH
 280: LD_STRING 04_
 282: PPUSH
 283: CALL 3652 0 3
 287: ST_TO_ADDR
// end ; if Donaldson then
 288: LD_EXP 13
 292: IFFALSE 310
// team := team ^ Donaldson ;
 294: LD_ADDR_VAR 0 6
 298: PUSH
 299: LD_VAR 0 6
 303: PUSH
 304: LD_EXP 13
 308: ADD
 309: ST_TO_ADDR
// if gamma_commander = 2 then
 310: LD_EXP 18
 314: PUSH
 315: LD_INT 2
 317: EQUAL
 318: IFFALSE 344
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 320: LD_ADDR_EXP 14
 324: PUSH
 325: LD_STRING Brown
 327: PPUSH
 328: LD_EXP 1
 332: NOT
 333: PPUSH
 334: LD_STRING 04_
 336: PPUSH
 337: CALL 3652 0 3
 341: ST_TO_ADDR
// end else
 342: GO 402
// begin if LoadVariable ( BrownIn06 , 0 ) then
 344: LD_STRING BrownIn06
 346: PPUSH
 347: LD_INT 0
 349: PPUSH
 350: CALL_OW 30
 354: IFFALSE 380
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 356: LD_ADDR_EXP 14
 360: PUSH
 361: LD_STRING Brown
 363: PPUSH
 364: LD_EXP 1
 368: NOT
 369: PPUSH
 370: LD_STRING 06c_
 372: PPUSH
 373: CALL 3652 0 3
 377: ST_TO_ADDR
 378: GO 402
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 380: LD_ADDR_EXP 14
 384: PUSH
 385: LD_STRING Brown
 387: PPUSH
 388: LD_EXP 1
 392: NOT
 393: PPUSH
 394: LD_STRING 04_
 396: PPUSH
 397: CALL 3652 0 3
 401: ST_TO_ADDR
// end ; if Brown then
 402: LD_EXP 14
 406: IFFALSE 424
// team := team ^ Brown ;
 408: LD_ADDR_VAR 0 6
 412: PUSH
 413: LD_VAR 0 6
 417: PUSH
 418: LD_EXP 14
 422: ADD
 423: ST_TO_ADDR
// if gamma_commander = 3 then
 424: LD_EXP 18
 428: PUSH
 429: LD_INT 3
 431: EQUAL
 432: IFFALSE 469
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 434: LD_ADDR_EXP 15
 438: PUSH
 439: LD_STRING VanHouten
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: LD_STRING 
 447: PPUSH
 448: CALL 3652 0 3
 452: ST_TO_ADDR
// team := team ^ Houten ;
 453: LD_ADDR_VAR 0 6
 457: PUSH
 458: LD_VAR 0 6
 462: PUSH
 463: LD_EXP 15
 467: ADD
 468: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 469: LD_STRING GladstoneIn06
 471: PPUSH
 472: LD_INT 0
 474: PPUSH
 475: CALL_OW 30
 479: IFFALSE 503
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) ;
 481: LD_ADDR_EXP 8
 485: PUSH
 486: LD_STRING Gladstone
 488: PPUSH
 489: LD_EXP 1
 493: NOT
 494: PPUSH
 495: LD_STRING 06c_
 497: PPUSH
 498: CALL 3652 0 3
 502: ST_TO_ADDR
// if Gladstone then
 503: LD_EXP 8
 507: IFFALSE 525
// team := team ^ Gladstone ;
 509: LD_ADDR_VAR 0 6
 513: PUSH
 514: LD_VAR 0 6
 518: PUSH
 519: LD_EXP 8
 523: ADD
 524: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 525: LD_ADDR_EXP 16
 529: PUSH
 530: LD_STRING Khatam
 532: PPUSH
 533: LD_EXP 1
 537: NOT
 538: PPUSH
 539: LD_STRING 03_
 541: PPUSH
 542: CALL 3652 0 3
 546: ST_TO_ADDR
// if Khatam then
 547: LD_EXP 16
 551: IFFALSE 569
// team := team ^ Khatam ;
 553: LD_ADDR_VAR 0 6
 557: PUSH
 558: LD_VAR 0 6
 562: PUSH
 563: LD_EXP 16
 567: ADD
 568: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 569: LD_STRING LisaIn06
 571: PPUSH
 572: LD_INT 0
 574: PPUSH
 575: CALL_OW 30
 579: IFFALSE 605
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 581: LD_ADDR_EXP 10
 585: PUSH
 586: LD_STRING Lisa
 588: PPUSH
 589: LD_EXP 1
 593: NOT
 594: PPUSH
 595: LD_STRING 06c_
 597: PPUSH
 598: CALL 3652 0 3
 602: ST_TO_ADDR
 603: GO 627
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 605: LD_ADDR_EXP 10
 609: PUSH
 610: LD_STRING Lisa
 612: PPUSH
 613: LD_EXP 1
 617: NOT
 618: PPUSH
 619: LD_STRING 04_
 621: PPUSH
 622: CALL 3652 0 3
 626: ST_TO_ADDR
// if Lisa then
 627: LD_EXP 10
 631: IFFALSE 649
// team := team ^ Lisa ;
 633: LD_ADDR_VAR 0 6
 637: PUSH
 638: LD_VAR 0 6
 642: PUSH
 643: LD_EXP 10
 647: ADD
 648: ST_TO_ADDR
// if LoadVariable ( CyrusIn06 , 0 ) then
 649: LD_STRING CyrusIn06
 651: PPUSH
 652: LD_INT 0
 654: PPUSH
 655: CALL_OW 30
 659: IFFALSE 685
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 661: LD_ADDR_EXP 11
 665: PUSH
 666: LD_STRING Cyrus
 668: PPUSH
 669: LD_EXP 1
 673: NOT
 674: PPUSH
 675: LD_STRING 06c_
 677: PPUSH
 678: CALL 3652 0 3
 682: ST_TO_ADDR
 683: GO 707
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 685: LD_ADDR_EXP 11
 689: PUSH
 690: LD_STRING Cyrus
 692: PPUSH
 693: LD_EXP 1
 697: NOT
 698: PPUSH
 699: LD_STRING 04_
 701: PPUSH
 702: CALL 3652 0 3
 706: ST_TO_ADDR
// if Cyrus then
 707: LD_EXP 11
 711: IFFALSE 729
// team := team ^ Cyrus ;
 713: LD_ADDR_VAR 0 6
 717: PUSH
 718: LD_VAR 0 6
 722: PUSH
 723: LD_EXP 11
 727: ADD
 728: ST_TO_ADDR
// if LoadVariable ( BobbyIn06 , 0 ) then
 729: LD_STRING BobbyIn06
 731: PPUSH
 732: LD_INT 0
 734: PPUSH
 735: CALL_OW 30
 739: IFFALSE 765
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 741: LD_ADDR_EXP 12
 745: PUSH
 746: LD_STRING Bobby
 748: PPUSH
 749: LD_EXP 1
 753: NOT
 754: PPUSH
 755: LD_STRING 06c_
 757: PPUSH
 758: CALL 3652 0 3
 762: ST_TO_ADDR
 763: GO 787
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 765: LD_ADDR_EXP 12
 769: PUSH
 770: LD_STRING Bobby
 772: PPUSH
 773: LD_EXP 1
 777: NOT
 778: PPUSH
 779: LD_STRING 04_
 781: PPUSH
 782: CALL 3652 0 3
 786: ST_TO_ADDR
// if Bobby then
 787: LD_EXP 12
 791: IFFALSE 809
// team := team ^ Bobby ;
 793: LD_ADDR_VAR 0 6
 797: PUSH
 798: LD_VAR 0 6
 802: PUSH
 803: LD_EXP 12
 807: ADD
 808: ST_TO_ADDR
// others_delta := CreateCharacterSet ( 05_other_survivors ) ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_STRING 05_other_survivors
 816: PPUSH
 817: CALL_OW 31
 821: ST_TO_ADDR
// others4 := CreateCharacterSet ( othersGamma ) ;
 822: LD_ADDR_VAR 0 4
 826: PUSH
 827: LD_STRING othersGamma
 829: PPUSH
 830: CALL_OW 31
 834: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
 835: LD_ADDR_VAR 0 2
 839: PUSH
 840: LD_STRING 06_other_survivors
 842: PPUSH
 843: CALL_OW 31
 847: ST_TO_ADDR
// others := others union others4 ;
 848: LD_ADDR_VAR 0 2
 852: PUSH
 853: LD_VAR 0 2
 857: PUSH
 858: LD_VAR 0 4
 862: UNION
 863: ST_TO_ADDR
// others := others diff others_delta ;
 864: LD_ADDR_VAR 0 2
 868: PUSH
 869: LD_VAR 0 2
 873: PUSH
 874: LD_VAR 0 3
 878: DIFF
 879: ST_TO_ADDR
// team := team ^ others ;
 880: LD_ADDR_VAR 0 6
 884: PUSH
 885: LD_VAR 0 6
 889: PUSH
 890: LD_VAR 0 2
 894: ADD
 895: ST_TO_ADDR
// for i in others do
 896: LD_ADDR_VAR 0 13
 900: PUSH
 901: LD_VAR 0 2
 905: PUSH
 906: FOR_IN
 907: IFFALSE 975
// begin if GetClass ( i ) = 2 then
 909: LD_VAR 0 13
 913: PPUSH
 914: CALL_OW 257
 918: PUSH
 919: LD_INT 2
 921: EQUAL
 922: IFFALSE 936
// SetClass ( i , 1 ) ;
 924: LD_VAR 0 13
 928: PPUSH
 929: LD_INT 1
 931: PPUSH
 932: CALL_OW 336
// for j = 1 to 4 do
 936: LD_ADDR_VAR 0 14
 940: PUSH
 941: DOUBLE
 942: LD_INT 1
 944: DEC
 945: ST_TO_ADDR
 946: LD_INT 4
 948: PUSH
 949: FOR_TO
 950: IFFALSE 971
// AddExperience ( i , j , 3000 ) ;
 952: LD_VAR 0 13
 956: PPUSH
 957: LD_VAR 0 14
 961: PPUSH
 962: LD_INT 3000
 964: PPUSH
 965: CALL_OW 492
 969: GO 949
 971: POP
 972: POP
// end ;
 973: GO 906
 975: POP
 976: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
 977: LD_ADDR_VAR 0 7
 981: PUSH
 982: LD_INT 30
 984: PUSH
 985: LD_INT 0
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PPUSH
 992: CALL_OW 69
 996: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
 997: LD_ADDR_VAR 0 8
1001: PUSH
1002: LD_INT 30
1004: PUSH
1005: LD_INT 4
1007: PUSH
1008: EMPTY
1009: LIST
1010: LIST
1011: PPUSH
1012: CALL_OW 69
1016: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1017: LD_ADDR_VAR 0 9
1021: PUSH
1022: LD_INT 2
1024: PUSH
1025: LD_INT 30
1027: PUSH
1028: LD_INT 7
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: LD_INT 30
1037: PUSH
1038: LD_INT 6
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PUSH
1045: EMPTY
1046: LIST
1047: LIST
1048: LIST
1049: PPUSH
1050: CALL_OW 69
1054: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1055: LD_ADDR_VAR 0 10
1059: PUSH
1060: LD_INT 30
1062: PUSH
1063: LD_INT 3
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1075: LD_ADDR_VAR 0 11
1079: PUSH
1080: LD_INT 2
1082: PUSH
1083: LD_INT 30
1085: PUSH
1086: LD_INT 32
1088: PUSH
1089: EMPTY
1090: LIST
1091: LIST
1092: PUSH
1093: LD_INT 30
1095: PUSH
1096: LD_INT 31
1098: PUSH
1099: EMPTY
1100: LIST
1101: LIST
1102: PUSH
1103: EMPTY
1104: LIST
1105: LIST
1106: LIST
1107: PPUSH
1108: CALL_OW 69
1112: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1113: LD_VAR 0 7
1117: PPUSH
1118: LD_STRING Gamma
1120: PPUSH
1121: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1125: LD_VAR 0 7
1129: PPUSH
1130: CALL_OW 274
1134: PPUSH
1135: LD_INT 2
1137: PPUSH
1138: LD_INT 10000
1140: PPUSH
1141: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1145: LD_VAR 0 7
1149: PPUSH
1150: CALL_OW 274
1154: PPUSH
1155: LD_INT 1
1157: PPUSH
1158: LD_INT 10000
1160: PPUSH
1161: CALL_OW 277
// if dep then
1165: LD_VAR 0 7
1169: IFFALSE 1269
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1171: LD_EXP 7
1175: PPUSH
1176: LD_VAR 0 7
1180: PUSH
1181: LD_INT 1
1183: ARRAY
1184: PPUSH
1185: CALL_OW 52
// if Brown then
1189: LD_EXP 14
1193: IFFALSE 1229
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1195: LD_EXP 14
1199: PPUSH
1200: LD_VAR 0 7
1204: PUSH
1205: LD_INT 1
1207: ARRAY
1208: PPUSH
1209: CALL_OW 52
// team := team diff Brown ;
1213: LD_ADDR_VAR 0 6
1217: PUSH
1218: LD_VAR 0 6
1222: PUSH
1223: LD_EXP 14
1227: DIFF
1228: ST_TO_ADDR
// end ; if Donaldson then
1229: LD_EXP 13
1233: IFFALSE 1269
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1235: LD_EXP 13
1239: PPUSH
1240: LD_VAR 0 7
1244: PUSH
1245: LD_INT 1
1247: ARRAY
1248: PPUSH
1249: CALL_OW 52
// team := team diff Donaldson ;
1253: LD_ADDR_VAR 0 6
1257: PUSH
1258: LD_VAR 0 6
1262: PUSH
1263: LD_EXP 13
1267: DIFF
1268: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1269: LD_VAR 0 11
1273: PUSH
1274: LD_VAR 0 6
1278: PPUSH
1279: LD_INT 25
1281: PUSH
1282: LD_INT 1
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 72
1293: AND
1294: IFFALSE 1403
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1296: LD_ADDR_VAR 0 12
1300: PUSH
1301: LD_VAR 0 6
1305: PPUSH
1306: LD_INT 25
1308: PUSH
1309: LD_INT 1
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: PPUSH
1316: CALL_OW 72
1320: ST_TO_ADDR
// for i in bun do
1321: LD_ADDR_VAR 0 13
1325: PUSH
1326: LD_VAR 0 11
1330: PUSH
1331: FOR_IN
1332: IFFALSE 1401
// begin if not filter then
1334: LD_VAR 0 12
1338: NOT
1339: IFFALSE 1343
// break ;
1341: GO 1401
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1343: LD_VAR 0 12
1347: PUSH
1348: LD_INT 1
1350: ARRAY
1351: PPUSH
1352: LD_VAR 0 13
1356: PPUSH
1357: CALL_OW 52
// team := team diff filter [ 1 ] ;
1361: LD_ADDR_VAR 0 6
1365: PUSH
1366: LD_VAR 0 6
1370: PUSH
1371: LD_VAR 0 12
1375: PUSH
1376: LD_INT 1
1378: ARRAY
1379: DIFF
1380: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1381: LD_ADDR_VAR 0 12
1385: PUSH
1386: LD_VAR 0 12
1390: PPUSH
1391: LD_INT 1
1393: PPUSH
1394: CALL_OW 3
1398: ST_TO_ADDR
// end ;
1399: GO 1331
1401: POP
1402: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1403: LD_VAR 0 8
1407: PUSH
1408: LD_VAR 0 6
1412: PPUSH
1413: LD_INT 25
1415: PUSH
1416: LD_INT 1
1418: PUSH
1419: EMPTY
1420: LIST
1421: LIST
1422: PPUSH
1423: CALL_OW 72
1427: AND
1428: IFFALSE 1550
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1430: LD_ADDR_VAR 0 12
1434: PUSH
1435: LD_VAR 0 6
1439: PPUSH
1440: LD_INT 25
1442: PUSH
1443: LD_INT 1
1445: PUSH
1446: EMPTY
1447: LIST
1448: LIST
1449: PPUSH
1450: CALL_OW 72
1454: ST_TO_ADDR
// for i = 1 to filter do
1455: LD_ADDR_VAR 0 13
1459: PUSH
1460: DOUBLE
1461: LD_INT 1
1463: DEC
1464: ST_TO_ADDR
1465: LD_VAR 0 12
1469: PUSH
1470: FOR_TO
1471: IFFALSE 1532
// begin if ( i <= 6 ) then
1473: LD_VAR 0 13
1477: PUSH
1478: LD_INT 6
1480: LESSEQUAL
1481: IFFALSE 1509
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1483: LD_VAR 0 12
1487: PUSH
1488: LD_VAR 0 13
1492: ARRAY
1493: PPUSH
1494: LD_VAR 0 8
1498: PUSH
1499: LD_INT 1
1501: ARRAY
1502: PPUSH
1503: CALL_OW 52
1507: GO 1530
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1509: LD_VAR 0 12
1513: PUSH
1514: LD_VAR 0 13
1518: ARRAY
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 49
// end ;
1530: GO 1470
1532: POP
1533: POP
// team := team diff filter ;
1534: LD_ADDR_VAR 0 6
1538: PUSH
1539: LD_VAR 0 6
1543: PUSH
1544: LD_VAR 0 12
1548: DIFF
1549: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1550: LD_VAR 0 9
1554: PUSH
1555: LD_VAR 0 6
1559: PPUSH
1560: LD_INT 25
1562: PUSH
1563: LD_INT 4
1565: PUSH
1566: EMPTY
1567: LIST
1568: LIST
1569: PPUSH
1570: CALL_OW 72
1574: AND
1575: IFFALSE 1697
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1577: LD_ADDR_VAR 0 12
1581: PUSH
1582: LD_VAR 0 6
1586: PPUSH
1587: LD_INT 25
1589: PUSH
1590: LD_INT 4
1592: PUSH
1593: EMPTY
1594: LIST
1595: LIST
1596: PPUSH
1597: CALL_OW 72
1601: ST_TO_ADDR
// for i = 1 to filter do
1602: LD_ADDR_VAR 0 13
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_VAR 0 12
1616: PUSH
1617: FOR_TO
1618: IFFALSE 1679
// begin if ( i <= 6 ) then
1620: LD_VAR 0 13
1624: PUSH
1625: LD_INT 6
1627: LESSEQUAL
1628: IFFALSE 1656
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1630: LD_VAR 0 12
1634: PUSH
1635: LD_VAR 0 13
1639: ARRAY
1640: PPUSH
1641: LD_VAR 0 9
1645: PUSH
1646: LD_INT 1
1648: ARRAY
1649: PPUSH
1650: CALL_OW 52
1654: GO 1677
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1656: LD_VAR 0 12
1660: PUSH
1661: LD_VAR 0 13
1665: ARRAY
1666: PPUSH
1667: LD_INT 1
1669: PPUSH
1670: LD_INT 0
1672: PPUSH
1673: CALL_OW 49
// end ;
1677: GO 1617
1679: POP
1680: POP
// team := team diff filter ;
1681: LD_ADDR_VAR 0 6
1685: PUSH
1686: LD_VAR 0 6
1690: PUSH
1691: LD_VAR 0 12
1695: DIFF
1696: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
1697: LD_VAR 0 10
1701: PUSH
1702: LD_VAR 0 6
1706: PPUSH
1707: LD_INT 25
1709: PUSH
1710: LD_INT 3
1712: PUSH
1713: EMPTY
1714: LIST
1715: LIST
1716: PPUSH
1717: CALL_OW 72
1721: AND
1722: IFFALSE 1844
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
1724: LD_ADDR_VAR 0 12
1728: PUSH
1729: LD_VAR 0 6
1733: PPUSH
1734: LD_INT 25
1736: PUSH
1737: LD_INT 3
1739: PUSH
1740: EMPTY
1741: LIST
1742: LIST
1743: PPUSH
1744: CALL_OW 72
1748: ST_TO_ADDR
// for i = 1 to filter do
1749: LD_ADDR_VAR 0 13
1753: PUSH
1754: DOUBLE
1755: LD_INT 1
1757: DEC
1758: ST_TO_ADDR
1759: LD_VAR 0 12
1763: PUSH
1764: FOR_TO
1765: IFFALSE 1826
// begin if ( i <= 6 ) then
1767: LD_VAR 0 13
1771: PUSH
1772: LD_INT 6
1774: LESSEQUAL
1775: IFFALSE 1803
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
1777: LD_VAR 0 12
1781: PUSH
1782: LD_VAR 0 13
1786: ARRAY
1787: PPUSH
1788: LD_VAR 0 10
1792: PUSH
1793: LD_INT 1
1795: ARRAY
1796: PPUSH
1797: CALL_OW 52
1801: GO 1824
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1803: LD_VAR 0 12
1807: PUSH
1808: LD_VAR 0 13
1812: ARRAY
1813: PPUSH
1814: LD_INT 1
1816: PPUSH
1817: LD_INT 0
1819: PPUSH
1820: CALL_OW 49
// end ;
1824: GO 1764
1826: POP
1827: POP
// team := team diff filter ;
1828: LD_ADDR_VAR 0 6
1832: PUSH
1833: LD_VAR 0 6
1837: PUSH
1838: LD_VAR 0 12
1842: DIFF
1843: ST_TO_ADDR
// end ; if team then
1844: LD_VAR 0 6
1848: IFFALSE 1891
// for i in team do
1850: LD_ADDR_VAR 0 13
1854: PUSH
1855: LD_VAR 0 6
1859: PUSH
1860: FOR_IN
1861: IFFALSE 1889
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
1863: LD_VAR 0 13
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: LD_INT 0
1873: PPUSH
1874: CALL_OW 49
// ComHold ( i ) ;
1878: LD_VAR 0 13
1882: PPUSH
1883: CALL_OW 140
// end ;
1887: GO 1860
1889: POP
1890: POP
// if fac then
1891: LD_VAR 0 10
1895: IFFALSE 1931
// if UnitsInside ( fac [ 1 ] ) then
1897: LD_VAR 0 10
1901: PUSH
1902: LD_INT 1
1904: ARRAY
1905: PPUSH
1906: CALL_OW 313
1910: IFFALSE 1931
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
1912: LD_VAR 0 10
1916: PUSH
1917: LD_INT 1
1919: ARRAY
1920: PPUSH
1921: LD_INT 10
1923: PPUSH
1924: LD_INT 0
1926: PPUSH
1927: CALL_OW 486
// if lab then
1931: LD_VAR 0 9
1935: IFFALSE 1971
// if UnitsInside ( lab [ 1 ] ) then
1937: LD_VAR 0 9
1941: PUSH
1942: LD_INT 1
1944: ARRAY
1945: PPUSH
1946: CALL_OW 313
1950: IFFALSE 1971
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
1952: LD_VAR 0 9
1956: PUSH
1957: LD_INT 1
1959: ARRAY
1960: PPUSH
1961: LD_INT 10
1963: PPUSH
1964: LD_INT 0
1966: PPUSH
1967: CALL_OW 486
// uc_side := 4 ;
1971: LD_ADDR_OWVAR 20
1975: PUSH
1976: LD_INT 4
1978: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
1979: LD_ADDR_EXP 17
1983: PUSH
1984: LD_STRING Harisson
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: LD_STRING 
1992: PPUSH
1993: CALL 3652 0 3
1997: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_light_wheeled , engine_combustion , control_manual , us_machine_gun , 100 ) ;
1998: LD_ADDR_VAR 0 5
2002: PUSH
2003: LD_INT 4
2005: PPUSH
2006: LD_INT 1
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_INT 1
2017: PPUSH
2018: LD_INT 2
2020: PPUSH
2021: LD_INT 100
2023: PPUSH
2024: CALL 3715 0 7
2028: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2029: LD_VAR 0 5
2033: PPUSH
2034: LD_INT 2
2036: PPUSH
2037: CALL_OW 233
// PlaceUnitXY ( veh , 21 , 8 , false ) ;
2041: LD_VAR 0 5
2045: PPUSH
2046: LD_INT 21
2048: PPUSH
2049: LD_INT 8
2051: PPUSH
2052: LD_INT 0
2054: PPUSH
2055: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2059: LD_EXP 17
2063: PPUSH
2064: LD_VAR 0 5
2068: PPUSH
2069: CALL_OW 52
// end ;
2073: LD_VAR 0 1
2077: RET
// function PrepareBase ; var blist , i , b ; begin
2078: LD_INT 0
2080: PPUSH
2081: PPUSH
2082: PPUSH
2083: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2084: LD_INT 71
2086: PPUSH
2087: LD_INT 5
2089: PPUSH
2090: LD_INT 1
2092: PPUSH
2093: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2097: LD_ADDR_VAR 0 2
2101: PUSH
2102: LD_STRING GammaBase
2104: PPUSH
2105: EMPTY
2106: PPUSH
2107: CALL_OW 30
2111: ST_TO_ADDR
// if not blist and debug then
2112: LD_VAR 0 2
2116: NOT
2117: PUSH
2118: LD_EXP 1
2122: AND
2123: IFFALSE 2163
// blist := [ [ b_depot , 51 , 10 , 3 , 3 , 0 , 0 ] ] ;
2125: LD_ADDR_VAR 0 2
2129: PUSH
2130: LD_INT 0
2132: PUSH
2133: LD_INT 51
2135: PUSH
2136: LD_INT 10
2138: PUSH
2139: LD_INT 3
2141: PUSH
2142: LD_INT 3
2144: PUSH
2145: LD_INT 0
2147: PUSH
2148: LD_INT 0
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: LIST
2159: PUSH
2160: EMPTY
2161: LIST
2162: ST_TO_ADDR
// if not blist then
2163: LD_VAR 0 2
2167: NOT
2168: IFFALSE 2172
// exit ;
2170: GO 2352
// uc_side := 1 ;
2172: LD_ADDR_OWVAR 20
2176: PUSH
2177: LD_INT 1
2179: ST_TO_ADDR
// uc_nation := 1 ;
2180: LD_ADDR_OWVAR 21
2184: PUSH
2185: LD_INT 1
2187: ST_TO_ADDR
// for i in blist do
2188: LD_ADDR_VAR 0 3
2192: PUSH
2193: LD_VAR 0 2
2197: PUSH
2198: FOR_IN
2199: IFFALSE 2350
// begin bc_type := i [ 1 ] ;
2201: LD_ADDR_OWVAR 42
2205: PUSH
2206: LD_VAR 0 3
2210: PUSH
2211: LD_INT 1
2213: ARRAY
2214: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2215: LD_ADDR_OWVAR 43
2219: PUSH
2220: LD_VAR 0 3
2224: PUSH
2225: LD_INT 5
2227: ARRAY
2228: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2229: LD_VAR 0 3
2233: PUSH
2234: LD_INT 1
2236: ARRAY
2237: PUSH
2238: LD_INT 7
2240: PUSH
2241: LD_INT 8
2243: PUSH
2244: EMPTY
2245: LIST
2246: LIST
2247: IN
2248: IFFALSE 2278
// begin bc_kind1 := i [ 7 ] ;
2250: LD_ADDR_OWVAR 44
2254: PUSH
2255: LD_VAR 0 3
2259: PUSH
2260: LD_INT 7
2262: ARRAY
2263: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2264: LD_ADDR_OWVAR 45
2268: PUSH
2269: LD_VAR 0 3
2273: PUSH
2274: LD_INT 8
2276: ARRAY
2277: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2278: LD_ADDR_VAR 0 4
2282: PUSH
2283: LD_VAR 0 3
2287: PUSH
2288: LD_INT 2
2290: ARRAY
2291: PPUSH
2292: LD_VAR 0 3
2296: PUSH
2297: LD_INT 3
2299: ARRAY
2300: PPUSH
2301: LD_VAR 0 3
2305: PUSH
2306: LD_INT 4
2308: ARRAY
2309: PPUSH
2310: CALL_OW 47
2314: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2315: LD_VAR 0 4
2319: PPUSH
2320: CALL_OW 266
2324: PUSH
2325: LD_INT 32
2327: EQUAL
2328: IFFALSE 2348
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2330: LD_VAR 0 4
2334: PPUSH
2335: LD_VAR 0 3
2339: PUSH
2340: LD_INT 7
2342: ARRAY
2343: PPUSH
2344: CALL_OW 431
// end ; end ;
2348: GO 2198
2350: POP
2351: POP
// end ; end_of_file
2352: LD_VAR 0 1
2356: RET
// export function Action ; var points , i , sol , team , filter ; begin
2357: LD_INT 0
2359: PPUSH
2360: PPUSH
2361: PPUSH
2362: PPUSH
2363: PPUSH
2364: PPUSH
// InGameOn ;
2365: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2369: LD_INT 33
2371: PPUSH
2372: LD_INT 11
2374: PPUSH
2375: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2379: LD_ADDR_VAR 0 2
2383: PUSH
2384: LD_INT 29
2386: PUSH
2387: LD_INT 21
2389: PUSH
2390: EMPTY
2391: LIST
2392: LIST
2393: PUSH
2394: LD_INT 41
2396: PUSH
2397: LD_INT 28
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: PUSH
2404: LD_INT 52
2406: PUSH
2407: LD_INT 26
2409: PUSH
2410: EMPTY
2411: LIST
2412: LIST
2413: PUSH
2414: LD_INT 49
2416: PUSH
2417: LD_INT 16
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: EMPTY
2425: LIST
2426: LIST
2427: LIST
2428: LIST
2429: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2430: LD_ADDR_VAR 0 4
2434: PUSH
2435: LD_INT 22
2437: PUSH
2438: LD_INT 1
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: PUSH
2445: LD_INT 26
2447: PUSH
2448: LD_INT 1
2450: PUSH
2451: EMPTY
2452: LIST
2453: LIST
2454: PUSH
2455: EMPTY
2456: LIST
2457: LIST
2458: PPUSH
2459: CALL_OW 69
2463: PUSH
2464: LD_EXP 7
2468: PUSH
2469: LD_EXP 14
2473: PUSH
2474: LD_EXP 11
2478: PUSH
2479: LD_EXP 12
2483: PUSH
2484: LD_EXP 8
2488: PUSH
2489: LD_EXP 15
2493: PUSH
2494: LD_EXP 16
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: LIST
2503: LIST
2504: LIST
2505: LIST
2506: LIST
2507: DIFF
2508: PUSH
2509: LD_INT 1
2511: ARRAY
2512: ST_TO_ADDR
// if sol then
2513: LD_VAR 0 4
2517: IFFALSE 2548
// begin ComMoveXY ( sol , 50 , 18 ) ;
2519: LD_VAR 0 4
2523: PPUSH
2524: LD_INT 50
2526: PPUSH
2527: LD_INT 18
2529: PPUSH
2530: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
2534: LD_VAR 0 4
2538: PPUSH
2539: LD_EXP 17
2543: PPUSH
2544: CALL_OW 179
// end ; for i in points do
2548: LD_ADDR_VAR 0 3
2552: PUSH
2553: LD_VAR 0 2
2557: PUSH
2558: FOR_IN
2559: IFFALSE 2590
// AddComMoveXY ( Harisson , i [ 1 ] , i [ 2 ] ) ;
2561: LD_EXP 17
2565: PPUSH
2566: LD_VAR 0 3
2570: PUSH
2571: LD_INT 1
2573: ARRAY
2574: PPUSH
2575: LD_VAR 0 3
2579: PUSH
2580: LD_INT 2
2582: ARRAY
2583: PPUSH
2584: CALL_OW 171
2588: GO 2558
2590: POP
2591: POP
// AddComExitVehicle ( Harisson ) ;
2592: LD_EXP 17
2596: PPUSH
2597: CALL_OW 181
// repeat wait ( 3 ) ;
2601: LD_INT 3
2603: PPUSH
2604: CALL_OW 67
// until not IsInUnit ( Harisson ) ;
2608: LD_EXP 17
2612: PPUSH
2613: CALL_OW 310
2617: NOT
2618: IFFALSE 2601
// Say ( sol , D1-Sol1-1 ) ;
2620: LD_VAR 0 4
2624: PPUSH
2625: LD_STRING D1-Sol1-1
2627: PPUSH
2628: CALL_OW 88
// ComTurnUnit ( Harisson , sol ) ;
2632: LD_EXP 17
2636: PPUSH
2637: LD_VAR 0 4
2641: PPUSH
2642: CALL_OW 119
// Say ( Harisson , D1-Har-1 ) ;
2646: LD_EXP 17
2650: PPUSH
2651: LD_STRING D1-Har-1
2653: PPUSH
2654: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
2658: LD_INT 10
2660: PPUSH
2661: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
2665: LD_VAR 0 4
2669: PPUSH
2670: LD_INT 35
2672: PPUSH
2673: LD_INT 21
2675: PPUSH
2676: CALL_OW 111
// ComExitBuilding ( JMM ) ;
2680: LD_EXP 7
2684: PPUSH
2685: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
2689: LD_EXP 7
2693: PPUSH
2694: LD_EXP 17
2698: PPUSH
2699: CALL_OW 172
// ComTurnUnit ( Harisson , JMM ) ;
2703: LD_EXP 17
2707: PPUSH
2708: LD_EXP 7
2712: PPUSH
2713: CALL_OW 119
// repeat wait ( 3 ) ;
2717: LD_INT 3
2719: PPUSH
2720: CALL_OW 67
// until GetDistUnits ( JMM , Harisson ) < 4 ;
2724: LD_EXP 7
2728: PPUSH
2729: LD_EXP 17
2733: PPUSH
2734: CALL_OW 296
2738: PUSH
2739: LD_INT 4
2741: LESS
2742: IFFALSE 2717
// ComTurnUnit ( JMM , Harisson ) ;
2744: LD_EXP 7
2748: PPUSH
2749: LD_EXP 17
2753: PPUSH
2754: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
2758: LD_EXP 7
2762: PPUSH
2763: LD_STRING D1-JMM-1
2765: PPUSH
2766: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
2770: LD_EXP 17
2774: PPUSH
2775: LD_STRING D1-Har-2
2777: PPUSH
2778: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
2782: LD_EXP 7
2786: PPUSH
2787: LD_STRING D1-JMM-2
2789: PPUSH
2790: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
2794: LD_EXP 17
2798: PPUSH
2799: LD_STRING D1-Har-3
2801: PPUSH
2802: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
2806: LD_EXP 7
2810: PPUSH
2811: LD_STRING D1-JMM-3
2813: PPUSH
2814: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
2818: LD_EXP 17
2822: PPUSH
2823: LD_STRING D1-Har-4
2825: PPUSH
2826: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
2830: LD_EXP 7
2834: PPUSH
2835: LD_STRING D1-JMM-4
2837: PPUSH
2838: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
2842: LD_EXP 17
2846: PPUSH
2847: LD_STRING D1-Har-5
2849: PPUSH
2850: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
2854: LD_EXP 7
2858: PPUSH
2859: LD_STRING D1-JMM-5
2861: PPUSH
2862: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
2866: LD_EXP 17
2870: PPUSH
2871: LD_STRING D1-Har-6
2873: PPUSH
2874: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
2878: LD_EXP 7
2882: PPUSH
2883: LD_STRING D1-JMM-6
2885: PPUSH
2886: CALL_OW 88
// EndMission ;
2890: CALL 2899 0 0
// end ;
2894: LD_VAR 0 1
2898: RET
// export function EndMission ; var commander , i , all ; begin
2899: LD_INT 0
2901: PPUSH
2902: PPUSH
2903: PPUSH
2904: PPUSH
// case gamma_commander of 1 :
2905: LD_EXP 18
2909: PUSH
2910: LD_INT 1
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2931
2918: POP
// commander := Donaldson ; 2 :
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: LD_EXP 13
2928: ST_TO_ADDR
2929: GO 2974
2931: LD_INT 2
2933: DOUBLE
2934: EQUAL
2935: IFTRUE 2939
2937: GO 2952
2939: POP
// commander := Brown ; 3 :
2940: LD_ADDR_VAR 0 2
2944: PUSH
2945: LD_EXP 14
2949: ST_TO_ADDR
2950: GO 2974
2952: LD_INT 3
2954: DOUBLE
2955: EQUAL
2956: IFTRUE 2960
2958: GO 2973
2960: POP
// commander := Houten ; end ;
2961: LD_ADDR_VAR 0 2
2965: PUSH
2966: LD_EXP 15
2970: ST_TO_ADDR
2971: GO 2974
2973: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
2974: LD_ADDR_VAR 0 4
2978: PUSH
2979: LD_INT 22
2981: PUSH
2982: LD_INT 1
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: LD_INT 21
2991: PUSH
2992: LD_INT 1
2994: PUSH
2995: EMPTY
2996: LIST
2997: LIST
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: PPUSH
3003: CALL_OW 69
3007: PUSH
3008: LD_EXP 7
3012: PUSH
3013: LD_VAR 0 2
3017: PUSH
3018: EMPTY
3019: LIST
3020: LIST
3021: DIFF
3022: ST_TO_ADDR
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable , [ commander , Harisson ] ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3023: LD_ADDR_EXP 4
3027: PUSH
3028: LD_STRING 1
3030: PPUSH
3031: LD_INT 10
3033: PPUSH
3034: LD_INT 10
3036: PPUSH
3037: LD_INT -5
3039: PUSH
3040: LD_EXP 7
3044: PUSH
3045: LD_INT -2
3047: PUSH
3048: LD_INT -3
3050: PUSH
3051: LD_INT -5
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: LIST
3058: LIST
3059: LIST
3060: PUSH
3061: LD_VAR 0 4
3065: ADD
3066: PUSH
3067: LD_INT -6
3069: PUSH
3070: LD_INT -4
3072: PUSH
3073: LD_VAR 0 2
3077: PUSH
3078: LD_EXP 17
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: EMPTY
3088: LIST
3089: LIST
3090: LIST
3091: ADD
3092: PPUSH
3093: LD_INT 1
3095: PUSH
3096: LD_INT 3
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: PUSH
3103: LD_INT 3
3105: PUSH
3106: LD_INT 3
3108: PUSH
3109: LD_INT 6
3111: PUSH
3112: EMPTY
3113: LIST
3114: LIST
3115: LIST
3116: PUSH
3117: LD_INT 4
3119: PUSH
3120: LD_INT 1
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: PUSH
3127: EMPTY
3128: LIST
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 42
3136: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson ] ^ save_group , 07_othersGamma ) ;
3137: LD_VAR 0 4
3141: PUSH
3142: LD_EXP 7
3146: PUSH
3147: LD_EXP 8
3151: PUSH
3152: LD_EXP 10
3156: PUSH
3157: LD_EXP 11
3161: PUSH
3162: LD_EXP 12
3166: PUSH
3167: LD_EXP 9
3171: PUSH
3172: LD_EXP 13
3176: PUSH
3177: LD_EXP 14
3181: PUSH
3182: LD_EXP 15
3186: PUSH
3187: LD_EXP 17
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: LIST
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: PUSH
3204: LD_EXP 4
3208: ADD
3209: DIFF
3210: PPUSH
3211: LD_STRING 07_othersGamma
3213: PPUSH
3214: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , 0 ] , 07_others ) ;
3218: LD_EXP 4
3222: PUSH
3223: LD_EXP 7
3227: PUSH
3228: LD_EXP 8
3232: PUSH
3233: LD_EXP 10
3237: PUSH
3238: LD_EXP 11
3242: PUSH
3243: LD_EXP 12
3247: PUSH
3248: LD_EXP 9
3252: PUSH
3253: LD_EXP 13
3257: PUSH
3258: LD_EXP 14
3262: PUSH
3263: LD_EXP 15
3267: PUSH
3268: LD_EXP 17
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: LIST
3287: LIST
3288: DIFF
3289: PPUSH
3290: LD_STRING 07_others
3292: PPUSH
3293: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3297: LD_EXP 7
3301: PPUSH
3302: LD_EXP 5
3306: PUSH
3307: LD_STRING JMM
3309: STR
3310: PPUSH
3311: CALL_OW 38
// if Lisa then
3315: LD_EXP 10
3319: IFFALSE 3361
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3321: LD_EXP 10
3325: PPUSH
3326: LD_EXP 5
3330: PUSH
3331: LD_STRING Lisa
3333: STR
3334: PPUSH
3335: CALL_OW 38
// if Lisa in save_group then
3339: LD_EXP 10
3343: PUSH
3344: LD_EXP 4
3348: IN
3349: IFFALSE 3361
// SaveVariable ( true , LisaIn07 ) ;
3351: LD_INT 1
3353: PPUSH
3354: LD_STRING LisaIn07
3356: PPUSH
3357: CALL_OW 39
// end ; if Bobby then
3361: LD_EXP 12
3365: IFFALSE 3407
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
3367: LD_EXP 12
3371: PPUSH
3372: LD_EXP 5
3376: PUSH
3377: LD_STRING Bobby
3379: STR
3380: PPUSH
3381: CALL_OW 38
// if Bobby in save_group then
3385: LD_EXP 12
3389: PUSH
3390: LD_EXP 4
3394: IN
3395: IFFALSE 3407
// SaveVariable ( true , BobbyIn07 ) ;
3397: LD_INT 1
3399: PPUSH
3400: LD_STRING BobbyIn07
3402: PPUSH
3403: CALL_OW 39
// end ; if Cyrus then
3407: LD_EXP 11
3411: IFFALSE 3453
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
3413: LD_EXP 11
3417: PPUSH
3418: LD_EXP 5
3422: PUSH
3423: LD_STRING Cyrus
3425: STR
3426: PPUSH
3427: CALL_OW 38
// if Cyrus in save_group then
3431: LD_EXP 11
3435: PUSH
3436: LD_EXP 4
3440: IN
3441: IFFALSE 3453
// SaveVariable ( true , CyrusIn07 ) ;
3443: LD_INT 1
3445: PPUSH
3446: LD_STRING CyrusIn07
3448: PPUSH
3449: CALL_OW 39
// end ; if Brown then
3453: LD_EXP 14
3457: IFFALSE 3499
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
3459: LD_EXP 14
3463: PPUSH
3464: LD_EXP 5
3468: PUSH
3469: LD_STRING Brown
3471: STR
3472: PPUSH
3473: CALL_OW 38
// if Brown in save_group then
3477: LD_EXP 14
3481: PUSH
3482: LD_EXP 4
3486: IN
3487: IFFALSE 3499
// SaveVariable ( true , BrownIn07 ) ;
3489: LD_INT 1
3491: PPUSH
3492: LD_STRING BrownIn07
3494: PPUSH
3495: CALL_OW 39
// end ; if Donaldson then
3499: LD_EXP 13
3503: IFFALSE 3545
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
3505: LD_EXP 13
3509: PPUSH
3510: LD_EXP 5
3514: PUSH
3515: LD_STRING Donaldson
3517: STR
3518: PPUSH
3519: CALL_OW 38
// if Donaldson in save_group then
3523: LD_EXP 13
3527: PUSH
3528: LD_EXP 4
3532: IN
3533: IFFALSE 3545
// SaveVariable ( true , DonaldsonIn07 ) ;
3535: LD_INT 1
3537: PPUSH
3538: LD_STRING DonaldsonIn07
3540: PPUSH
3541: CALL_OW 39
// end ; if Gladstone then
3545: LD_EXP 8
3549: IFFALSE 3591
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
3551: LD_EXP 8
3555: PPUSH
3556: LD_EXP 5
3560: PUSH
3561: LD_STRING Gladstone
3563: STR
3564: PPUSH
3565: CALL_OW 38
// if Gladstone in save_group then
3569: LD_EXP 8
3573: PUSH
3574: LD_EXP 4
3578: IN
3579: IFFALSE 3591
// SaveVariable ( true , GladstoneIn07 ) ;
3581: LD_INT 1
3583: PPUSH
3584: LD_STRING GladstoneIn07
3586: PPUSH
3587: CALL_OW 39
// end ; if Khatam then
3591: LD_EXP 16
3595: IFFALSE 3637
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
3597: LD_EXP 16
3601: PPUSH
3602: LD_EXP 5
3606: PUSH
3607: LD_STRING Khatam
3609: STR
3610: PPUSH
3611: CALL_OW 38
// if Khatam in save_group then
3615: LD_EXP 16
3619: PUSH
3620: LD_EXP 4
3624: IN
3625: IFFALSE 3637
// SaveVariable ( true , KhatamIn07 ) ;
3627: LD_INT 1
3629: PPUSH
3630: LD_STRING KhatamIn07
3632: PPUSH
3633: CALL_OW 39
// end ; ChangeMap ( 1 , %_cont ) ;
3637: LD_INT 1
3639: PPUSH
3640: LD_STRING %_cont
3642: PPUSH
3643: CALL_OW 340
// end ; end_of_file
3647: LD_VAR 0 1
3651: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
3652: LD_INT 0
3654: PPUSH
3655: PPUSH
// if exist_mode then
3656: LD_VAR 0 2
3660: IFFALSE 3685
// unit := CreateCharacter ( prefix & ident ) else
3662: LD_ADDR_VAR 0 5
3666: PUSH
3667: LD_VAR 0 3
3671: PUSH
3672: LD_VAR 0 1
3676: STR
3677: PPUSH
3678: CALL_OW 34
3682: ST_TO_ADDR
3683: GO 3700
// unit := NewCharacter ( ident ) ;
3685: LD_ADDR_VAR 0 5
3689: PUSH
3690: LD_VAR 0 1
3694: PPUSH
3695: CALL_OW 25
3699: ST_TO_ADDR
// result := unit ;
3700: LD_ADDR_VAR 0 4
3704: PUSH
3705: LD_VAR 0 5
3709: ST_TO_ADDR
// end ;
3710: LD_VAR 0 4
3714: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
3715: LD_INT 0
3717: PPUSH
// uc_side := side ;
3718: LD_ADDR_OWVAR 20
3722: PUSH
3723: LD_VAR 0 1
3727: ST_TO_ADDR
// uc_nation := nation ;
3728: LD_ADDR_OWVAR 21
3732: PUSH
3733: LD_VAR 0 2
3737: ST_TO_ADDR
// vc_chassis := chassis ;
3738: LD_ADDR_OWVAR 37
3742: PUSH
3743: LD_VAR 0 3
3747: ST_TO_ADDR
// vc_engine := engine ;
3748: LD_ADDR_OWVAR 39
3752: PUSH
3753: LD_VAR 0 4
3757: ST_TO_ADDR
// vc_control := control ;
3758: LD_ADDR_OWVAR 38
3762: PUSH
3763: LD_VAR 0 5
3767: ST_TO_ADDR
// vc_weapon := weapon ;
3768: LD_ADDR_OWVAR 40
3772: PUSH
3773: LD_VAR 0 6
3777: ST_TO_ADDR
// vc_fuel_battery := fuel ;
3778: LD_ADDR_OWVAR 41
3782: PUSH
3783: LD_VAR 0 7
3787: ST_TO_ADDR
// result := CreateVehicle ;
3788: LD_ADDR_VAR 0 8
3792: PUSH
3793: CALL_OW 45
3797: ST_TO_ADDR
// end ;
3798: LD_VAR 0 8
3802: RET
// export function SayX ( units , ident ) ; var i ; begin
3803: LD_INT 0
3805: PPUSH
3806: PPUSH
// result := false ;
3807: LD_ADDR_VAR 0 3
3811: PUSH
3812: LD_INT 0
3814: ST_TO_ADDR
// if not units then
3815: LD_VAR 0 1
3819: NOT
3820: IFFALSE 3824
// exit ;
3822: GO 3878
// for i in units do
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: LD_VAR 0 1
3833: PUSH
3834: FOR_IN
3835: IFFALSE 3876
// if IsOk ( i ) then
3837: LD_VAR 0 4
3841: PPUSH
3842: CALL_OW 302
3846: IFFALSE 3874
// begin Say ( i , ident ) ;
3848: LD_VAR 0 4
3852: PPUSH
3853: LD_VAR 0 2
3857: PPUSH
3858: CALL_OW 88
// result := i ;
3862: LD_ADDR_VAR 0 3
3866: PUSH
3867: LD_VAR 0 4
3871: ST_TO_ADDR
// break ;
3872: GO 3876
// end ;
3874: GO 3834
3876: POP
3877: POP
// end ;
3878: LD_VAR 0 3
3882: RET
