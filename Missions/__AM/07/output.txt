// starting begin ResetFog ;
   0: CALL_OW 335
// FogOff ( 1 ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 344
// Randomize ;
  11: CALL_OW 10
// Init ;
  15: CALL 32 0 0
// DebugMode ;
  19: CALL 98 0 0
// PrepareAmerican ;
  23: CALL 115 0 0
// Action ;
  27: CALL 2833 0 0
// end ;
  31: END
// export debug ; export donaldson_commander , brown_commander , save_group ; export mission_prefix , mission_prefix_prev ; function Init ; begin
  32: LD_INT 0
  34: PPUSH
// debug := false ;
  35: LD_ADDR_EXP 1
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// mission_prefix := 07_ ;
  43: LD_ADDR_EXP 5
  47: PUSH
  48: LD_STRING 07_
  50: ST_TO_ADDR
// mission_prefix_prev := [ 06_ , 05_ , 04_ ] ;
  51: LD_ADDR_EXP 6
  55: PUSH
  56: LD_STRING 06_
  58: PUSH
  59: LD_STRING 05_
  61: PUSH
  62: LD_STRING 04_
  64: PUSH
  65: EMPTY
  66: LIST
  67: LIST
  68: LIST
  69: ST_TO_ADDR
// donaldson_commander := false ;
  70: LD_ADDR_EXP 2
  74: PUSH
  75: LD_INT 0
  77: ST_TO_ADDR
// brown_commander := false ;
  78: LD_ADDR_EXP 3
  82: PUSH
  83: LD_INT 0
  85: ST_TO_ADDR
// save_group := [ ] ;
  86: LD_ADDR_EXP 4
  90: PUSH
  91: EMPTY
  92: ST_TO_ADDR
// end ;
  93: LD_VAR 0 1
  97: RET
// function DebugMode ; begin
  98: LD_INT 0
 100: PPUSH
// if not debug then
 101: LD_EXP 1
 105: NOT
 106: IFFALSE 110
// exit ;
 108: GO 110
// end ; end_of_file
 110: LD_VAR 0 1
 114: RET
// export JMM , Gladstone , Frank , Lisa , Cyrus , Bobby , Donaldson , Brown , Houten , Khatam , Harisson ; export gamma_commander ; export RandGuy ; export function PrepareAmerican ; var others , others_delta , others4 , veh , team , dep , bar , lab , fac , bun , filter , i , j ; begin
 115: LD_INT 0
 117: PPUSH
 118: PPUSH
 119: PPUSH
 120: PPUSH
 121: PPUSH
 122: PPUSH
 123: PPUSH
 124: PPUSH
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
 130: PPUSH
// PrepareBase ;
 131: CALL 2517 0 0
// uc_side := 1 ;
 135: LD_ADDR_OWVAR 20
 139: PUSH
 140: LD_INT 1
 142: ST_TO_ADDR
// uc_nation := 1 ;
 143: LD_ADDR_OWVAR 21
 147: PUSH
 148: LD_INT 1
 150: ST_TO_ADDR
// team := [ ] ;
 151: LD_ADDR_VAR 0 6
 155: PUSH
 156: EMPTY
 157: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 06c_ ) ;
 158: LD_ADDR_EXP 7
 162: PUSH
 163: LD_STRING JMM
 165: PPUSH
 166: LD_EXP 1
 170: NOT
 171: PPUSH
 172: LD_STRING 06c_
 174: PPUSH
 175: CALL 4316 0 3
 179: ST_TO_ADDR
// if GetClass ( JMM ) = 2 then
 180: LD_EXP 7
 184: PPUSH
 185: CALL_OW 257
 189: PUSH
 190: LD_INT 2
 192: EQUAL
 193: IFFALSE 207
// SetClass ( JMM , 1 ) ;
 195: LD_EXP 7
 199: PPUSH
 200: LD_INT 1
 202: PPUSH
 203: CALL_OW 336
// gamma_commander := LoadVariable ( GammaCommander , 3 ) ;
 207: LD_ADDR_EXP 18
 211: PUSH
 212: LD_STRING GammaCommander
 214: PPUSH
 215: LD_INT 3
 217: PPUSH
 218: CALL_OW 30
 222: ST_TO_ADDR
// if gamma_commander = 1 then
 223: LD_EXP 18
 227: PUSH
 228: LD_INT 1
 230: EQUAL
 231: IFFALSE 257
// begin Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 233: LD_ADDR_EXP 13
 237: PUSH
 238: LD_STRING Donaldson
 240: PPUSH
 241: LD_EXP 1
 245: NOT
 246: PPUSH
 247: LD_STRING 04_
 249: PPUSH
 250: CALL 4316 0 3
 254: ST_TO_ADDR
// end else
 255: GO 328
// begin if LoadVariable ( DonaldsonIn06 , 0 ) then
 257: LD_STRING DonaldsonIn06
 259: PPUSH
 260: LD_INT 0
 262: PPUSH
 263: CALL_OW 30
 267: IFFALSE 293
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 06c_ ) else
 269: LD_ADDR_EXP 13
 273: PUSH
 274: LD_STRING Donaldson
 276: PPUSH
 277: LD_EXP 1
 281: NOT
 282: PPUSH
 283: LD_STRING 06c_
 285: PPUSH
 286: CALL 4316 0 3
 290: ST_TO_ADDR
 291: GO 328
// if not LoadVariable ( DonaldsonStayInDelta , 0 ) then
 293: LD_STRING DonaldsonStayInDelta
 295: PPUSH
 296: LD_INT 0
 298: PPUSH
 299: CALL_OW 30
 303: NOT
 304: IFFALSE 328
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 04_ ) ;
 306: LD_ADDR_EXP 13
 310: PUSH
 311: LD_STRING Donaldson
 313: PPUSH
 314: LD_EXP 1
 318: NOT
 319: PPUSH
 320: LD_STRING 04_
 322: PPUSH
 323: CALL 4316 0 3
 327: ST_TO_ADDR
// end ; if Donaldson then
 328: LD_EXP 13
 332: IFFALSE 350
// team := team ^ Donaldson ;
 334: LD_ADDR_VAR 0 6
 338: PUSH
 339: LD_VAR 0 6
 343: PUSH
 344: LD_EXP 13
 348: ADD
 349: ST_TO_ADDR
// if gamma_commander = 2 then
 350: LD_EXP 18
 354: PUSH
 355: LD_INT 2
 357: EQUAL
 358: IFFALSE 384
// begin Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 360: LD_ADDR_EXP 14
 364: PUSH
 365: LD_STRING Brown
 367: PPUSH
 368: LD_EXP 1
 372: NOT
 373: PPUSH
 374: LD_STRING 04_
 376: PPUSH
 377: CALL 4316 0 3
 381: ST_TO_ADDR
// end else
 382: GO 455
// begin if LoadVariable ( BrownIn06 , 0 ) then
 384: LD_STRING BrownIn06
 386: PPUSH
 387: LD_INT 0
 389: PPUSH
 390: CALL_OW 30
 394: IFFALSE 420
// Brown := PrepareUnit ( Brown , ( not debug ) , 06c_ ) else
 396: LD_ADDR_EXP 14
 400: PUSH
 401: LD_STRING Brown
 403: PPUSH
 404: LD_EXP 1
 408: NOT
 409: PPUSH
 410: LD_STRING 06c_
 412: PPUSH
 413: CALL 4316 0 3
 417: ST_TO_ADDR
 418: GO 455
// if not LoadVariable ( BrownStayInDelta , 0 ) then
 420: LD_STRING BrownStayInDelta
 422: PPUSH
 423: LD_INT 0
 425: PPUSH
 426: CALL_OW 30
 430: NOT
 431: IFFALSE 455
// Brown := PrepareUnit ( Brown , ( not debug ) , 04_ ) ;
 433: LD_ADDR_EXP 14
 437: PUSH
 438: LD_STRING Brown
 440: PPUSH
 441: LD_EXP 1
 445: NOT
 446: PPUSH
 447: LD_STRING 04_
 449: PPUSH
 450: CALL 4316 0 3
 454: ST_TO_ADDR
// end ; if Brown then
 455: LD_EXP 14
 459: IFFALSE 477
// team := team ^ Brown ;
 461: LD_ADDR_VAR 0 6
 465: PUSH
 466: LD_VAR 0 6
 470: PUSH
 471: LD_EXP 14
 475: ADD
 476: ST_TO_ADDR
// if gamma_commander = 3 then
 477: LD_EXP 18
 481: PUSH
 482: LD_INT 3
 484: EQUAL
 485: IFFALSE 522
// begin Houten := PrepareUnit ( VanHouten , false ,  ) ;
 487: LD_ADDR_EXP 15
 491: PUSH
 492: LD_STRING VanHouten
 494: PPUSH
 495: LD_INT 0
 497: PPUSH
 498: LD_STRING 
 500: PPUSH
 501: CALL 4316 0 3
 505: ST_TO_ADDR
// team := team ^ Houten ;
 506: LD_ADDR_VAR 0 6
 510: PUSH
 511: LD_VAR 0 6
 515: PUSH
 516: LD_EXP 15
 520: ADD
 521: ST_TO_ADDR
// end ; if LoadVariable ( GladstoneIn06 , 0 ) then
 522: LD_STRING GladstoneIn06
 524: PPUSH
 525: LD_INT 0
 527: PPUSH
 528: CALL_OW 30
 532: IFFALSE 558
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06c_ ) else
 534: LD_ADDR_EXP 8
 538: PUSH
 539: LD_STRING Gladstone
 541: PPUSH
 542: LD_EXP 1
 546: NOT
 547: PPUSH
 548: LD_STRING 06c_
 550: PPUSH
 551: CALL 4316 0 3
 555: ST_TO_ADDR
 556: GO 592
// if LoadVariable ( GladstoneStayInDelta , 0 ) then
 558: LD_STRING GladstoneStayInDelta
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL_OW 30
 568: IFFALSE 592
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 06_ ) ;
 570: LD_ADDR_EXP 8
 574: PUSH
 575: LD_STRING Gladstone
 577: PPUSH
 578: LD_EXP 1
 582: NOT
 583: PPUSH
 584: LD_STRING 06_
 586: PPUSH
 587: CALL 4316 0 3
 591: ST_TO_ADDR
// if Gladstone then
 592: LD_EXP 8
 596: IFFALSE 614
// team := team ^ Gladstone ;
 598: LD_ADDR_VAR 0 6
 602: PUSH
 603: LD_VAR 0 6
 607: PUSH
 608: LD_EXP 8
 612: ADD
 613: ST_TO_ADDR
// Khatam := PrepareUnit ( Khatam , ( not debug ) , 03_ ) ;
 614: LD_ADDR_EXP 16
 618: PUSH
 619: LD_STRING Khatam
 621: PPUSH
 622: LD_EXP 1
 626: NOT
 627: PPUSH
 628: LD_STRING 03_
 630: PPUSH
 631: CALL 4316 0 3
 635: ST_TO_ADDR
// if Khatam then
 636: LD_EXP 16
 640: IFFALSE 658
// team := team ^ Khatam ;
 642: LD_ADDR_VAR 0 6
 646: PUSH
 647: LD_VAR 0 6
 651: PUSH
 652: LD_EXP 16
 656: ADD
 657: ST_TO_ADDR
// if LoadVariable ( LisaIn06 , 0 ) then
 658: LD_STRING LisaIn06
 660: PPUSH
 661: LD_INT 0
 663: PPUSH
 664: CALL_OW 30
 668: IFFALSE 694
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 06c_ ) else
 670: LD_ADDR_EXP 10
 674: PUSH
 675: LD_STRING Lisa
 677: PPUSH
 678: LD_EXP 1
 682: NOT
 683: PPUSH
 684: LD_STRING 06c_
 686: PPUSH
 687: CALL 4316 0 3
 691: ST_TO_ADDR
 692: GO 729
// if not LoadVariable ( LisaStayInDelta , 0 ) then
 694: LD_STRING LisaStayInDelta
 696: PPUSH
 697: LD_INT 0
 699: PPUSH
 700: CALL_OW 30
 704: NOT
 705: IFFALSE 729
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 04_ ) ;
 707: LD_ADDR_EXP 10
 711: PUSH
 712: LD_STRING Lisa
 714: PPUSH
 715: LD_EXP 1
 719: NOT
 720: PPUSH
 721: LD_STRING 04_
 723: PPUSH
 724: CALL 4316 0 3
 728: ST_TO_ADDR
// if Lisa then
 729: LD_EXP 10
 733: IFFALSE 751
// team := team ^ Lisa ;
 735: LD_ADDR_VAR 0 6
 739: PUSH
 740: LD_VAR 0 6
 744: PUSH
 745: LD_EXP 10
 749: ADD
 750: ST_TO_ADDR
// if not Lisa then
 751: LD_EXP 10
 755: NOT
 756: IFFALSE 1009
// begin if LoadVariable ( CyrusIn06 , 0 ) then
 758: LD_STRING CyrusIn06
 760: PPUSH
 761: LD_INT 0
 763: PPUSH
 764: CALL_OW 30
 768: IFFALSE 794
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 06c_ ) else
 770: LD_ADDR_EXP 11
 774: PUSH
 775: LD_STRING Cyrus
 777: PPUSH
 778: LD_EXP 1
 782: NOT
 783: PPUSH
 784: LD_STRING 06c_
 786: PPUSH
 787: CALL 4316 0 3
 791: ST_TO_ADDR
 792: GO 858
// if not LoadVariable ( CyrusStayInDelta , 0 ) then
 794: LD_STRING CyrusStayInDelta
 796: PPUSH
 797: LD_INT 0
 799: PPUSH
 800: CALL_OW 30
 804: NOT
 805: IFFALSE 858
// begin Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 04_ ) ;
 807: LD_ADDR_EXP 11
 811: PUSH
 812: LD_STRING Cyrus
 814: PPUSH
 815: LD_EXP 1
 819: NOT
 820: PPUSH
 821: LD_STRING 04_
 823: PPUSH
 824: CALL 4316 0 3
 828: ST_TO_ADDR
// if not Cyrus then
 829: LD_EXP 11
 833: NOT
 834: IFFALSE 858
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 03_ ) ;
 836: LD_ADDR_EXP 11
 840: PUSH
 841: LD_STRING Cyrus
 843: PPUSH
 844: LD_EXP 1
 848: NOT
 849: PPUSH
 850: LD_STRING 03_
 852: PPUSH
 853: CALL 4316 0 3
 857: ST_TO_ADDR
// end ; if Cyrus then
 858: LD_EXP 11
 862: IFFALSE 880
// team := team ^ Cyrus ;
 864: LD_ADDR_VAR 0 6
 868: PUSH
 869: LD_VAR 0 6
 873: PUSH
 874: LD_EXP 11
 878: ADD
 879: ST_TO_ADDR
// if not Cyrus then
 880: LD_EXP 11
 884: NOT
 885: IFFALSE 1009
// begin if LoadVariable ( BobbyIn06 , 0 ) then
 887: LD_STRING BobbyIn06
 889: PPUSH
 890: LD_INT 0
 892: PPUSH
 893: CALL_OW 30
 897: IFFALSE 923
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 06c_ ) else
 899: LD_ADDR_EXP 12
 903: PUSH
 904: LD_STRING Bobby
 906: PPUSH
 907: LD_EXP 1
 911: NOT
 912: PPUSH
 913: LD_STRING 06c_
 915: PPUSH
 916: CALL 4316 0 3
 920: ST_TO_ADDR
 921: GO 987
// if not LoadVariable ( BobbyStayInDelta , 0 ) then
 923: LD_STRING BobbyStayInDelta
 925: PPUSH
 926: LD_INT 0
 928: PPUSH
 929: CALL_OW 30
 933: NOT
 934: IFFALSE 987
// begin Bobby := PrepareUnit ( Bobby , ( not debug ) , 04_ ) ;
 936: LD_ADDR_EXP 12
 940: PUSH
 941: LD_STRING Bobby
 943: PPUSH
 944: LD_EXP 1
 948: NOT
 949: PPUSH
 950: LD_STRING 04_
 952: PPUSH
 953: CALL 4316 0 3
 957: ST_TO_ADDR
// if not Bobby then
 958: LD_EXP 12
 962: NOT
 963: IFFALSE 987
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 03_ ) ;
 965: LD_ADDR_EXP 12
 969: PUSH
 970: LD_STRING Bobby
 972: PPUSH
 973: LD_EXP 1
 977: NOT
 978: PPUSH
 979: LD_STRING 03_
 981: PPUSH
 982: CALL 4316 0 3
 986: ST_TO_ADDR
// end ; if Bobby then
 987: LD_EXP 12
 991: IFFALSE 1009
// team := team ^ Bobby ;
 993: LD_ADDR_VAR 0 6
 997: PUSH
 998: LD_VAR 0 6
1002: PUSH
1003: LD_EXP 12
1007: ADD
1008: ST_TO_ADDR
// end ; end ; others4 := CreateCharacterSet ( othersGamma ) ;
1009: LD_ADDR_VAR 0 4
1013: PUSH
1014: LD_STRING othersGamma
1016: PPUSH
1017: CALL_OW 31
1021: ST_TO_ADDR
// others := CreateCharacterSet ( 06_other_survivors ) ;
1022: LD_ADDR_VAR 0 2
1026: PUSH
1027: LD_STRING 06_other_survivors
1029: PPUSH
1030: CALL_OW 31
1034: ST_TO_ADDR
// others := others union others4 ;
1035: LD_ADDR_VAR 0 2
1039: PUSH
1040: LD_VAR 0 2
1044: PUSH
1045: LD_VAR 0 4
1049: UNION
1050: ST_TO_ADDR
// team := team ^ others ;
1051: LD_ADDR_VAR 0 6
1055: PUSH
1056: LD_VAR 0 6
1060: PUSH
1061: LD_VAR 0 2
1065: ADD
1066: ST_TO_ADDR
// InitHc ;
1067: CALL_OW 19
// if team <= 12 then
1071: LD_VAR 0 6
1075: PUSH
1076: LD_INT 12
1078: LESSEQUAL
1079: IFFALSE 1128
// repeat PrepareHuman ( false , rand ( 1 , 4 ) , 5 ) ;
1081: LD_INT 0
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_INT 4
1089: PPUSH
1090: CALL_OW 12
1094: PPUSH
1095: LD_INT 5
1097: PPUSH
1098: CALL_OW 380
// team := team ^ CreateHuman ;
1102: LD_ADDR_VAR 0 6
1106: PUSH
1107: LD_VAR 0 6
1111: PUSH
1112: CALL_OW 44
1116: ADD
1117: ST_TO_ADDR
// until team > 12 ;
1118: LD_VAR 0 6
1122: PUSH
1123: LD_INT 12
1125: GREATER
1126: IFFALSE 1081
// for i in others do
1128: LD_ADDR_VAR 0 13
1132: PUSH
1133: LD_VAR 0 2
1137: PUSH
1138: FOR_IN
1139: IFFALSE 1207
// begin if GetClass ( i ) = 2 then
1141: LD_VAR 0 13
1145: PPUSH
1146: CALL_OW 257
1150: PUSH
1151: LD_INT 2
1153: EQUAL
1154: IFFALSE 1168
// SetClass ( i , 1 ) ;
1156: LD_VAR 0 13
1160: PPUSH
1161: LD_INT 1
1163: PPUSH
1164: CALL_OW 336
// for j = 1 to 4 do
1168: LD_ADDR_VAR 0 14
1172: PUSH
1173: DOUBLE
1174: LD_INT 1
1176: DEC
1177: ST_TO_ADDR
1178: LD_INT 4
1180: PUSH
1181: FOR_TO
1182: IFFALSE 1203
// AddExperience ( i , j , 3000 ) ;
1184: LD_VAR 0 13
1188: PPUSH
1189: LD_VAR 0 14
1193: PPUSH
1194: LD_INT 3000
1196: PPUSH
1197: CALL_OW 492
1201: GO 1181
1203: POP
1204: POP
// end ;
1205: GO 1138
1207: POP
1208: POP
// dep := FilterAllUnits ( [ f_btype , b_depot ] ) ;
1209: LD_ADDR_VAR 0 7
1213: PUSH
1214: LD_INT 30
1216: PUSH
1217: LD_INT 0
1219: PUSH
1220: EMPTY
1221: LIST
1222: LIST
1223: PPUSH
1224: CALL_OW 69
1228: ST_TO_ADDR
// bar := FilterAllUnits ( [ f_btype , b_armoury ] ) ;
1229: LD_ADDR_VAR 0 8
1233: PUSH
1234: LD_INT 30
1236: PUSH
1237: LD_INT 4
1239: PUSH
1240: EMPTY
1241: LIST
1242: LIST
1243: PPUSH
1244: CALL_OW 69
1248: ST_TO_ADDR
// lab := FilterAllUnits ( [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab ] ] ) ;
1249: LD_ADDR_VAR 0 9
1253: PUSH
1254: LD_INT 2
1256: PUSH
1257: LD_INT 30
1259: PUSH
1260: LD_INT 7
1262: PUSH
1263: EMPTY
1264: LIST
1265: LIST
1266: PUSH
1267: LD_INT 30
1269: PUSH
1270: LD_INT 6
1272: PUSH
1273: EMPTY
1274: LIST
1275: LIST
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: LIST
1281: PPUSH
1282: CALL_OW 69
1286: ST_TO_ADDR
// fac := FilterAllUnits ( [ f_btype , b_factory ] ) ;
1287: LD_ADDR_VAR 0 10
1291: PUSH
1292: LD_INT 30
1294: PUSH
1295: LD_INT 3
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PPUSH
1302: CALL_OW 69
1306: ST_TO_ADDR
// bun := FilterAllUnits ( [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ;
1307: LD_ADDR_VAR 0 11
1311: PUSH
1312: LD_INT 2
1314: PUSH
1315: LD_INT 30
1317: PUSH
1318: LD_INT 32
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PUSH
1325: LD_INT 30
1327: PUSH
1328: LD_INT 31
1330: PUSH
1331: EMPTY
1332: LIST
1333: LIST
1334: PUSH
1335: EMPTY
1336: LIST
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: ST_TO_ADDR
// SetBName ( dep , Gamma ) ;
1345: LD_VAR 0 7
1349: PPUSH
1350: LD_STRING Gamma
1352: PPUSH
1353: CALL_OW 500
// SetResourceType ( GetBase ( dep ) , mat_oil , 10000 ) ;
1357: LD_VAR 0 7
1361: PPUSH
1362: CALL_OW 274
1366: PPUSH
1367: LD_INT 2
1369: PPUSH
1370: LD_INT 10000
1372: PPUSH
1373: CALL_OW 277
// SetResourceType ( GetBase ( dep ) , mat_cans , 10000 ) ;
1377: LD_VAR 0 7
1381: PPUSH
1382: CALL_OW 274
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: LD_INT 10000
1392: PPUSH
1393: CALL_OW 277
// if dep then
1397: LD_VAR 0 7
1401: IFFALSE 1503
// begin PlaceHumanInUnit ( JMM , dep [ 1 ] ) ;
1403: LD_EXP 7
1407: PPUSH
1408: LD_VAR 0 7
1412: PUSH
1413: LD_INT 1
1415: ARRAY
1416: PPUSH
1417: CALL_OW 52
// if Brown then
1421: LD_EXP 14
1425: IFFALSE 1461
// begin PlaceHumanInUnit ( Brown , dep [ 1 ] ) ;
1427: LD_EXP 14
1431: PPUSH
1432: LD_VAR 0 7
1436: PUSH
1437: LD_INT 1
1439: ARRAY
1440: PPUSH
1441: CALL_OW 52
// team := team diff Brown ;
1445: LD_ADDR_VAR 0 6
1449: PUSH
1450: LD_VAR 0 6
1454: PUSH
1455: LD_EXP 14
1459: DIFF
1460: ST_TO_ADDR
// end ; if Donaldson then
1461: LD_EXP 13
1465: IFFALSE 1501
// begin PlaceHumanInUnit ( Donaldson , dep [ 1 ] ) ;
1467: LD_EXP 13
1471: PPUSH
1472: LD_VAR 0 7
1476: PUSH
1477: LD_INT 1
1479: ARRAY
1480: PPUSH
1481: CALL_OW 52
// team := team diff Donaldson ;
1485: LD_ADDR_VAR 0 6
1489: PUSH
1490: LD_VAR 0 6
1494: PUSH
1495: LD_EXP 13
1499: DIFF
1500: ST_TO_ADDR
// end ; end else
1501: GO 1610
// begin PlaceUnitXYR ( JMM , 52 , 16 , 10 , false ) ;
1503: LD_EXP 7
1507: PPUSH
1508: LD_INT 52
1510: PPUSH
1511: LD_INT 16
1513: PPUSH
1514: LD_INT 10
1516: PPUSH
1517: LD_INT 0
1519: PPUSH
1520: CALL_OW 50
// if Brown then
1524: LD_EXP 14
1528: IFFALSE 1567
// begin PlaceUnitXYR ( Brown , 52 , 16 , 10 , false ) ;
1530: LD_EXP 14
1534: PPUSH
1535: LD_INT 52
1537: PPUSH
1538: LD_INT 16
1540: PPUSH
1541: LD_INT 10
1543: PPUSH
1544: LD_INT 0
1546: PPUSH
1547: CALL_OW 50
// team := team diff Brown ;
1551: LD_ADDR_VAR 0 6
1555: PUSH
1556: LD_VAR 0 6
1560: PUSH
1561: LD_EXP 14
1565: DIFF
1566: ST_TO_ADDR
// end ; if Donaldson then
1567: LD_EXP 13
1571: IFFALSE 1610
// begin PlaceUnitXYR ( Donaldson , 52 , 16 , 10 , false ) ;
1573: LD_EXP 13
1577: PPUSH
1578: LD_INT 52
1580: PPUSH
1581: LD_INT 16
1583: PPUSH
1584: LD_INT 10
1586: PPUSH
1587: LD_INT 0
1589: PPUSH
1590: CALL_OW 50
// team := team diff Donaldson ;
1594: LD_ADDR_VAR 0 6
1598: PUSH
1599: LD_VAR 0 6
1603: PUSH
1604: LD_EXP 13
1608: DIFF
1609: ST_TO_ADDR
// end ; end ; if bun and UnitFilter ( team , [ f_class , 1 ] ) then
1610: LD_VAR 0 11
1614: PUSH
1615: LD_VAR 0 6
1619: PPUSH
1620: LD_INT 25
1622: PUSH
1623: LD_INT 1
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 72
1634: AND
1635: IFFALSE 1744
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1637: LD_ADDR_VAR 0 12
1641: PUSH
1642: LD_VAR 0 6
1646: PPUSH
1647: LD_INT 25
1649: PUSH
1650: LD_INT 1
1652: PUSH
1653: EMPTY
1654: LIST
1655: LIST
1656: PPUSH
1657: CALL_OW 72
1661: ST_TO_ADDR
// for i in bun do
1662: LD_ADDR_VAR 0 13
1666: PUSH
1667: LD_VAR 0 11
1671: PUSH
1672: FOR_IN
1673: IFFALSE 1742
// begin if not filter then
1675: LD_VAR 0 12
1679: NOT
1680: IFFALSE 1684
// break ;
1682: GO 1742
// PlaceHumanInUnit ( filter [ 1 ] , i ) ;
1684: LD_VAR 0 12
1688: PUSH
1689: LD_INT 1
1691: ARRAY
1692: PPUSH
1693: LD_VAR 0 13
1697: PPUSH
1698: CALL_OW 52
// team := team diff filter [ 1 ] ;
1702: LD_ADDR_VAR 0 6
1706: PUSH
1707: LD_VAR 0 6
1711: PUSH
1712: LD_VAR 0 12
1716: PUSH
1717: LD_INT 1
1719: ARRAY
1720: DIFF
1721: ST_TO_ADDR
// filter := Delete ( filter , 1 ) ;
1722: LD_ADDR_VAR 0 12
1726: PUSH
1727: LD_VAR 0 12
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: CALL_OW 3
1739: ST_TO_ADDR
// end ;
1740: GO 1672
1742: POP
1743: POP
// end ; if bar and UnitFilter ( team , [ f_class , 1 ] ) then
1744: LD_VAR 0 8
1748: PUSH
1749: LD_VAR 0 6
1753: PPUSH
1754: LD_INT 25
1756: PUSH
1757: LD_INT 1
1759: PUSH
1760: EMPTY
1761: LIST
1762: LIST
1763: PPUSH
1764: CALL_OW 72
1768: AND
1769: IFFALSE 1891
// begin filter := UnitFilter ( team , [ f_class , 1 ] ) ;
1771: LD_ADDR_VAR 0 12
1775: PUSH
1776: LD_VAR 0 6
1780: PPUSH
1781: LD_INT 25
1783: PUSH
1784: LD_INT 1
1786: PUSH
1787: EMPTY
1788: LIST
1789: LIST
1790: PPUSH
1791: CALL_OW 72
1795: ST_TO_ADDR
// for i = 1 to filter do
1796: LD_ADDR_VAR 0 13
1800: PUSH
1801: DOUBLE
1802: LD_INT 1
1804: DEC
1805: ST_TO_ADDR
1806: LD_VAR 0 12
1810: PUSH
1811: FOR_TO
1812: IFFALSE 1873
// begin if ( i <= 6 ) then
1814: LD_VAR 0 13
1818: PUSH
1819: LD_INT 6
1821: LESSEQUAL
1822: IFFALSE 1850
// PlaceHumanInUnit ( filter [ i ] , bar [ 1 ] ) else
1824: LD_VAR 0 12
1828: PUSH
1829: LD_VAR 0 13
1833: ARRAY
1834: PPUSH
1835: LD_VAR 0 8
1839: PUSH
1840: LD_INT 1
1842: ARRAY
1843: PPUSH
1844: CALL_OW 52
1848: GO 1871
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1850: LD_VAR 0 12
1854: PUSH
1855: LD_VAR 0 13
1859: ARRAY
1860: PPUSH
1861: LD_INT 1
1863: PPUSH
1864: LD_INT 0
1866: PPUSH
1867: CALL_OW 49
// end ;
1871: GO 1811
1873: POP
1874: POP
// team := team diff filter ;
1875: LD_ADDR_VAR 0 6
1879: PUSH
1880: LD_VAR 0 6
1884: PUSH
1885: LD_VAR 0 12
1889: DIFF
1890: ST_TO_ADDR
// end ; if lab and UnitFilter ( team , [ f_class , 4 ] ) then
1891: LD_VAR 0 9
1895: PUSH
1896: LD_VAR 0 6
1900: PPUSH
1901: LD_INT 25
1903: PUSH
1904: LD_INT 4
1906: PUSH
1907: EMPTY
1908: LIST
1909: LIST
1910: PPUSH
1911: CALL_OW 72
1915: AND
1916: IFFALSE 2038
// begin filter := UnitFilter ( team , [ f_class , 4 ] ) ;
1918: LD_ADDR_VAR 0 12
1922: PUSH
1923: LD_VAR 0 6
1927: PPUSH
1928: LD_INT 25
1930: PUSH
1931: LD_INT 4
1933: PUSH
1934: EMPTY
1935: LIST
1936: LIST
1937: PPUSH
1938: CALL_OW 72
1942: ST_TO_ADDR
// for i = 1 to filter do
1943: LD_ADDR_VAR 0 13
1947: PUSH
1948: DOUBLE
1949: LD_INT 1
1951: DEC
1952: ST_TO_ADDR
1953: LD_VAR 0 12
1957: PUSH
1958: FOR_TO
1959: IFFALSE 2020
// begin if ( i <= 6 ) then
1961: LD_VAR 0 13
1965: PUSH
1966: LD_INT 6
1968: LESSEQUAL
1969: IFFALSE 1997
// PlaceHumanInUnit ( filter [ i ] , lab [ 1 ] ) else
1971: LD_VAR 0 12
1975: PUSH
1976: LD_VAR 0 13
1980: ARRAY
1981: PPUSH
1982: LD_VAR 0 9
1986: PUSH
1987: LD_INT 1
1989: ARRAY
1990: PPUSH
1991: CALL_OW 52
1995: GO 2018
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
1997: LD_VAR 0 12
2001: PUSH
2002: LD_VAR 0 13
2006: ARRAY
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 0
2013: PPUSH
2014: CALL_OW 49
// end ;
2018: GO 1958
2020: POP
2021: POP
// team := team diff filter ;
2022: LD_ADDR_VAR 0 6
2026: PUSH
2027: LD_VAR 0 6
2031: PUSH
2032: LD_VAR 0 12
2036: DIFF
2037: ST_TO_ADDR
// end ; if fac and UnitFilter ( team , [ f_class , 3 ] ) then
2038: LD_VAR 0 10
2042: PUSH
2043: LD_VAR 0 6
2047: PPUSH
2048: LD_INT 25
2050: PUSH
2051: LD_INT 3
2053: PUSH
2054: EMPTY
2055: LIST
2056: LIST
2057: PPUSH
2058: CALL_OW 72
2062: AND
2063: IFFALSE 2185
// begin filter := UnitFilter ( team , [ f_class , 3 ] ) ;
2065: LD_ADDR_VAR 0 12
2069: PUSH
2070: LD_VAR 0 6
2074: PPUSH
2075: LD_INT 25
2077: PUSH
2078: LD_INT 3
2080: PUSH
2081: EMPTY
2082: LIST
2083: LIST
2084: PPUSH
2085: CALL_OW 72
2089: ST_TO_ADDR
// for i = 1 to filter do
2090: LD_ADDR_VAR 0 13
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_VAR 0 12
2104: PUSH
2105: FOR_TO
2106: IFFALSE 2167
// begin if ( i <= 6 ) then
2108: LD_VAR 0 13
2112: PUSH
2113: LD_INT 6
2115: LESSEQUAL
2116: IFFALSE 2144
// PlaceHumanInUnit ( filter [ i ] , fac [ 1 ] ) else
2118: LD_VAR 0 12
2122: PUSH
2123: LD_VAR 0 13
2127: ARRAY
2128: PPUSH
2129: LD_VAR 0 10
2133: PUSH
2134: LD_INT 1
2136: ARRAY
2137: PPUSH
2138: CALL_OW 52
2142: GO 2165
// PlaceUnitArea ( filter [ i ] , gammaBaseArea , false ) ;
2144: LD_VAR 0 12
2148: PUSH
2149: LD_VAR 0 13
2153: ARRAY
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_INT 0
2160: PPUSH
2161: CALL_OW 49
// end ;
2165: GO 2105
2167: POP
2168: POP
// team := team diff filter ;
2169: LD_ADDR_VAR 0 6
2173: PUSH
2174: LD_VAR 0 6
2178: PUSH
2179: LD_VAR 0 12
2183: DIFF
2184: ST_TO_ADDR
// end ; if team then
2185: LD_VAR 0 6
2189: IFFALSE 2232
// for i in team do
2191: LD_ADDR_VAR 0 13
2195: PUSH
2196: LD_VAR 0 6
2200: PUSH
2201: FOR_IN
2202: IFFALSE 2230
// begin PlaceUnitArea ( i , gammaBaseArea , false ) ;
2204: LD_VAR 0 13
2208: PPUSH
2209: LD_INT 1
2211: PPUSH
2212: LD_INT 0
2214: PPUSH
2215: CALL_OW 49
// ComHold ( i ) ;
2219: LD_VAR 0 13
2223: PPUSH
2224: CALL_OW 140
// end ;
2228: GO 2201
2230: POP
2231: POP
// if fac then
2232: LD_VAR 0 10
2236: IFFALSE 2272
// if UnitsInside ( fac [ 1 ] ) then
2238: LD_VAR 0 10
2242: PUSH
2243: LD_INT 1
2245: ARRAY
2246: PPUSH
2247: CALL_OW 313
2251: IFFALSE 2272
// SetSpecResearch ( fac [ 1 ] , 10 , false ) ;
2253: LD_VAR 0 10
2257: PUSH
2258: LD_INT 1
2260: ARRAY
2261: PPUSH
2262: LD_INT 10
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 486
// if lab then
2272: LD_VAR 0 9
2276: IFFALSE 2312
// if UnitsInside ( lab [ 1 ] ) then
2278: LD_VAR 0 9
2282: PUSH
2283: LD_INT 1
2285: ARRAY
2286: PPUSH
2287: CALL_OW 313
2291: IFFALSE 2312
// SetSpecResearch ( lab [ 1 ] , 10 , false ) ;
2293: LD_VAR 0 9
2297: PUSH
2298: LD_INT 1
2300: ARRAY
2301: PPUSH
2302: LD_INT 10
2304: PPUSH
2305: LD_INT 0
2307: PPUSH
2308: CALL_OW 486
// uc_side := 4 ;
2312: LD_ADDR_OWVAR 20
2316: PUSH
2317: LD_INT 4
2319: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
2320: LD_ADDR_EXP 17
2324: PUSH
2325: LD_STRING Harisson
2327: PPUSH
2328: LD_INT 0
2330: PPUSH
2331: LD_STRING 
2333: PPUSH
2334: CALL 4316 0 3
2338: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_double_gun , 100 ) ;
2339: LD_ADDR_VAR 0 5
2343: PUSH
2344: LD_INT 4
2346: PPUSH
2347: LD_INT 1
2349: PPUSH
2350: LD_INT 2
2352: PPUSH
2353: LD_INT 1
2355: PPUSH
2356: LD_INT 1
2358: PPUSH
2359: LD_INT 5
2361: PPUSH
2362: LD_INT 100
2364: PPUSH
2365: CALL 4379 0 7
2369: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2370: LD_VAR 0 5
2374: PPUSH
2375: LD_INT 2
2377: PPUSH
2378: CALL_OW 233
// PlaceUnitXY ( veh , 22 , 9 , false ) ;
2382: LD_VAR 0 5
2386: PPUSH
2387: LD_INT 22
2389: PPUSH
2390: LD_INT 9
2392: PPUSH
2393: LD_INT 0
2395: PPUSH
2396: CALL_OW 48
// PlaceHumanInUnit ( Harisson , veh ) ;
2400: LD_EXP 17
2404: PPUSH
2405: LD_VAR 0 5
2409: PPUSH
2410: CALL_OW 52
// PrepareHuman ( false , 1 , 0 ) ;
2414: LD_INT 0
2416: PPUSH
2417: LD_INT 1
2419: PPUSH
2420: LD_INT 0
2422: PPUSH
2423: CALL_OW 380
// RandGuy := CreateHuman ;
2427: LD_ADDR_EXP 19
2431: PUSH
2432: CALL_OW 44
2436: ST_TO_ADDR
// veh := PrepareTank ( 4 , 1 , us_medium_wheeled , engine_combustion , control_manual , us_gatling_gun , 100 ) ;
2437: LD_ADDR_VAR 0 5
2441: PUSH
2442: LD_INT 4
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: LD_INT 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 1
2456: PPUSH
2457: LD_INT 4
2459: PPUSH
2460: LD_INT 100
2462: PPUSH
2463: CALL 4379 0 7
2467: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
2468: LD_VAR 0 5
2472: PPUSH
2473: LD_INT 2
2475: PPUSH
2476: CALL_OW 233
// PlaceUnitXY ( veh , 17 , 4 , false ) ;
2480: LD_VAR 0 5
2484: PPUSH
2485: LD_INT 17
2487: PPUSH
2488: LD_INT 4
2490: PPUSH
2491: LD_INT 0
2493: PPUSH
2494: CALL_OW 48
// PlaceHumanInUnit ( RandGuy , veh ) ;
2498: LD_EXP 19
2502: PPUSH
2503: LD_VAR 0 5
2507: PPUSH
2508: CALL_OW 52
// end ;
2512: LD_VAR 0 1
2516: RET
// function PrepareBase ; var blist , i , b ; begin
2517: LD_INT 0
2519: PPUSH
2520: PPUSH
2521: PPUSH
2522: PPUSH
// SetResourceVisibility ( 71 , 5 , 1 ) ;
2523: LD_INT 71
2525: PPUSH
2526: LD_INT 5
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 441
// blist := LoadVariable ( GammaBase , [ ] ) ;
2536: LD_ADDR_VAR 0 2
2540: PUSH
2541: LD_STRING GammaBase
2543: PPUSH
2544: EMPTY
2545: PPUSH
2546: CALL_OW 30
2550: ST_TO_ADDR
// if not blist then
2551: LD_VAR 0 2
2555: NOT
2556: IFFALSE 2596
// blist := [ [ b_depot , 52 , 12 , 3 , 3 , 0 , 0 ] ] ;
2558: LD_ADDR_VAR 0 2
2562: PUSH
2563: LD_INT 0
2565: PUSH
2566: LD_INT 52
2568: PUSH
2569: LD_INT 12
2571: PUSH
2572: LD_INT 3
2574: PUSH
2575: LD_INT 3
2577: PUSH
2578: LD_INT 0
2580: PUSH
2581: LD_INT 0
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: LIST
2589: LIST
2590: LIST
2591: LIST
2592: PUSH
2593: EMPTY
2594: LIST
2595: ST_TO_ADDR
// uc_side := 1 ;
2596: LD_ADDR_OWVAR 20
2600: PUSH
2601: LD_INT 1
2603: ST_TO_ADDR
// uc_nation := 1 ;
2604: LD_ADDR_OWVAR 21
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// for i in blist do
2612: LD_ADDR_VAR 0 3
2616: PUSH
2617: LD_VAR 0 2
2621: PUSH
2622: FOR_IN
2623: IFFALSE 2774
// begin bc_type := i [ 1 ] ;
2625: LD_ADDR_OWVAR 42
2629: PUSH
2630: LD_VAR 0 3
2634: PUSH
2635: LD_INT 1
2637: ARRAY
2638: ST_TO_ADDR
// bc_level := i [ 5 ] ;
2639: LD_ADDR_OWVAR 43
2643: PUSH
2644: LD_VAR 0 3
2648: PUSH
2649: LD_INT 5
2651: ARRAY
2652: ST_TO_ADDR
// if i [ 1 ] in [ b_lab_half , b_lab_full ] then
2653: LD_VAR 0 3
2657: PUSH
2658: LD_INT 1
2660: ARRAY
2661: PUSH
2662: LD_INT 7
2664: PUSH
2665: LD_INT 8
2667: PUSH
2668: EMPTY
2669: LIST
2670: LIST
2671: IN
2672: IFFALSE 2702
// begin bc_kind1 := i [ 7 ] ;
2674: LD_ADDR_OWVAR 44
2678: PUSH
2679: LD_VAR 0 3
2683: PUSH
2684: LD_INT 7
2686: ARRAY
2687: ST_TO_ADDR
// bc_kind2 := i [ 8 ] ;
2688: LD_ADDR_OWVAR 45
2692: PUSH
2693: LD_VAR 0 3
2697: PUSH
2698: LD_INT 8
2700: ARRAY
2701: ST_TO_ADDR
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
2702: LD_ADDR_VAR 0 4
2706: PUSH
2707: LD_VAR 0 3
2711: PUSH
2712: LD_INT 2
2714: ARRAY
2715: PPUSH
2716: LD_VAR 0 3
2720: PUSH
2721: LD_INT 3
2723: ARRAY
2724: PPUSH
2725: LD_VAR 0 3
2729: PUSH
2730: LD_INT 4
2732: ARRAY
2733: PPUSH
2734: CALL_OW 47
2738: ST_TO_ADDR
// if GetBType ( b ) = b_bunker then
2739: LD_VAR 0 4
2743: PPUSH
2744: CALL_OW 266
2748: PUSH
2749: LD_INT 32
2751: EQUAL
2752: IFFALSE 2772
// begin PlaceWeaponTurret ( b , i [ 7 ] ) ;
2754: LD_VAR 0 4
2758: PPUSH
2759: LD_VAR 0 3
2763: PUSH
2764: LD_INT 7
2766: ARRAY
2767: PPUSH
2768: CALL_OW 431
// end ; end ;
2772: GO 2622
2774: POP
2775: POP
// if not FilterAllUnits ( [ f_btype , b_depot ] ) then
2776: LD_INT 30
2778: PUSH
2779: LD_INT 0
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: PPUSH
2786: CALL_OW 69
2790: NOT
2791: IFFALSE 2828
// begin bc_type := b_depot ;
2793: LD_ADDR_OWVAR 42
2797: PUSH
2798: LD_INT 0
2800: ST_TO_ADDR
// bc_level := 6 ;
2801: LD_ADDR_OWVAR 43
2805: PUSH
2806: LD_INT 6
2808: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 52 , 12 , 3 ) ;
2809: LD_ADDR_VAR 0 4
2813: PUSH
2814: LD_INT 52
2816: PPUSH
2817: LD_INT 12
2819: PPUSH
2820: LD_INT 3
2822: PPUSH
2823: CALL_OW 47
2827: ST_TO_ADDR
// end ; end ; end_of_file
2828: LD_VAR 0 1
2832: RET
// export function Action ; var points , i , sol , time , team , filter ; begin
2833: LD_INT 0
2835: PPUSH
2836: PPUSH
2837: PPUSH
2838: PPUSH
2839: PPUSH
2840: PPUSH
2841: PPUSH
// InGameOn ;
2842: CALL_OW 8
// CenterNowOnXY ( 33 , 11 ) ;
2846: LD_INT 33
2848: PPUSH
2849: LD_INT 11
2851: PPUSH
2852: CALL_OW 86
// points := [ [ 29 , 21 ] , [ 41 , 28 ] , [ 52 , 26 ] , [ 49 , 16 ] ] ;
2856: LD_ADDR_VAR 0 2
2860: PUSH
2861: LD_INT 29
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: EMPTY
2868: LIST
2869: LIST
2870: PUSH
2871: LD_INT 41
2873: PUSH
2874: LD_INT 28
2876: PUSH
2877: EMPTY
2878: LIST
2879: LIST
2880: PUSH
2881: LD_INT 52
2883: PUSH
2884: LD_INT 26
2886: PUSH
2887: EMPTY
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 49
2893: PUSH
2894: LD_INT 16
2896: PUSH
2897: EMPTY
2898: LIST
2899: LIST
2900: PUSH
2901: EMPTY
2902: LIST
2903: LIST
2904: LIST
2905: LIST
2906: ST_TO_ADDR
// sol := ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Cyrus , Bobby , Gladstone , Houten , Khatam ] ) [ 1 ] ;
2907: LD_ADDR_VAR 0 4
2911: PUSH
2912: LD_INT 22
2914: PUSH
2915: LD_INT 1
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: PUSH
2922: LD_INT 26
2924: PUSH
2925: LD_INT 1
2927: PUSH
2928: EMPTY
2929: LIST
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: PUSH
2941: LD_EXP 7
2945: PUSH
2946: LD_EXP 14
2950: PUSH
2951: LD_EXP 11
2955: PUSH
2956: LD_EXP 12
2960: PUSH
2961: LD_EXP 8
2965: PUSH
2966: LD_EXP 15
2970: PUSH
2971: LD_EXP 16
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: LIST
2982: LIST
2983: LIST
2984: DIFF
2985: PUSH
2986: LD_INT 1
2988: ARRAY
2989: ST_TO_ADDR
// if sol then
2990: LD_VAR 0 4
2994: IFFALSE 3025
// begin ComMoveXY ( sol , 50 , 18 ) ;
2996: LD_VAR 0 4
3000: PPUSH
3001: LD_INT 50
3003: PPUSH
3004: LD_INT 18
3006: PPUSH
3007: CALL_OW 111
// AddComTurnUnit ( sol , Harisson ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_EXP 17
3020: PPUSH
3021: CALL_OW 179
// end ; for i in points do
3025: LD_ADDR_VAR 0 3
3029: PUSH
3030: LD_VAR 0 2
3034: PUSH
3035: FOR_IN
3036: IFFALSE 3076
// AddComMoveXY ( [ Harisson , RandGuy ] , i [ 1 ] , i [ 2 ] ) ;
3038: LD_EXP 17
3042: PUSH
3043: LD_EXP 19
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PPUSH
3052: LD_VAR 0 3
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: LD_VAR 0 3
3065: PUSH
3066: LD_INT 2
3068: ARRAY
3069: PPUSH
3070: CALL_OW 171
3074: GO 3035
3076: POP
3077: POP
// AddComExitVehicle ( [ Harisson , RandGuy ] ) ;
3078: LD_EXP 17
3082: PUSH
3083: LD_EXP 19
3087: PUSH
3088: EMPTY
3089: LIST
3090: LIST
3091: PPUSH
3092: CALL_OW 181
// AddComTurnUnit ( [ Harisson , RandGuy ] , sol ) ;
3096: LD_EXP 17
3100: PUSH
3101: LD_EXP 19
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PPUSH
3110: LD_VAR 0 4
3114: PPUSH
3115: CALL_OW 179
// time := 0 0$20 ;
3119: LD_ADDR_VAR 0 5
3123: PUSH
3124: LD_INT 700
3126: ST_TO_ADDR
// repeat wait ( 0 0$0.3 ) ;
3127: LD_INT 10
3129: PPUSH
3130: CALL_OW 67
// time := time - 0 0$0.3 ;
3134: LD_ADDR_VAR 0 5
3138: PUSH
3139: LD_VAR 0 5
3143: PUSH
3144: LD_INT 10
3146: MINUS
3147: ST_TO_ADDR
// until not IsInUnit ( Harisson ) or time <= 0 0$00 ;
3148: LD_EXP 17
3152: PPUSH
3153: CALL_OW 310
3157: NOT
3158: PUSH
3159: LD_VAR 0 5
3163: PUSH
3164: LD_INT 0
3166: LESSEQUAL
3167: OR
3168: IFFALSE 3127
// Say ( sol , D1-Sol1-1 ) ;
3170: LD_VAR 0 4
3174: PPUSH
3175: LD_STRING D1-Sol1-1
3177: PPUSH
3178: CALL_OW 88
// Say ( Harisson , D1-Har-1 ) ;
3182: LD_EXP 17
3186: PPUSH
3187: LD_STRING D1-Har-1
3189: PPUSH
3190: CALL_OW 88
// Wait ( 0 0$0.3 ) ;
3194: LD_INT 10
3196: PPUSH
3197: CALL_OW 67
// ComMoveXY ( sol , 35 , 21 ) ;
3201: LD_VAR 0 4
3205: PPUSH
3206: LD_INT 35
3208: PPUSH
3209: LD_INT 21
3211: PPUSH
3212: CALL_OW 111
// ComExitBuilding ( JMM ) ;
3216: LD_EXP 7
3220: PPUSH
3221: CALL_OW 122
// AddComMoveUnit ( JMM , Harisson ) ;
3225: LD_EXP 7
3229: PPUSH
3230: LD_EXP 17
3234: PPUSH
3235: CALL_OW 172
// ComTurnUnit ( [ Harisson , RandGuy ] , JMM ) ;
3239: LD_EXP 17
3243: PUSH
3244: LD_EXP 19
3248: PUSH
3249: EMPTY
3250: LIST
3251: LIST
3252: PPUSH
3253: LD_EXP 7
3257: PPUSH
3258: CALL_OW 119
// time := 0 0$3 ;
3262: LD_ADDR_VAR 0 5
3266: PUSH
3267: LD_INT 105
3269: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3270: LD_INT 35
3272: PPUSH
3273: CALL_OW 67
// time := time - 0 0$1 ;
3277: LD_ADDR_VAR 0 5
3281: PUSH
3282: LD_VAR 0 5
3286: PUSH
3287: LD_INT 35
3289: MINUS
3290: ST_TO_ADDR
// until GetDistUnits ( JMM , Harisson ) < 4 or time = 0 0$00 ;
3291: LD_EXP 7
3295: PPUSH
3296: LD_EXP 17
3300: PPUSH
3301: CALL_OW 296
3305: PUSH
3306: LD_INT 4
3308: LESS
3309: PUSH
3310: LD_VAR 0 5
3314: PUSH
3315: LD_INT 0
3317: EQUAL
3318: OR
3319: IFFALSE 3270
// ComTurnUnit ( JMM , Harisson ) ;
3321: LD_EXP 7
3325: PPUSH
3326: LD_EXP 17
3330: PPUSH
3331: CALL_OW 119
// Say ( JMM , D1-JMM-1 ) ;
3335: LD_EXP 7
3339: PPUSH
3340: LD_STRING D1-JMM-1
3342: PPUSH
3343: CALL_OW 88
// Say ( Harisson , D1-Har-2 ) ;
3347: LD_EXP 17
3351: PPUSH
3352: LD_STRING D1-Har-2
3354: PPUSH
3355: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3359: LD_EXP 7
3363: PPUSH
3364: LD_STRING D1-JMM-2
3366: PPUSH
3367: CALL_OW 88
// Say ( Harisson , D1-Har-3 ) ;
3371: LD_EXP 17
3375: PPUSH
3376: LD_STRING D1-Har-3
3378: PPUSH
3379: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3383: LD_EXP 7
3387: PPUSH
3388: LD_STRING D1-JMM-3
3390: PPUSH
3391: CALL_OW 88
// Say ( Harisson , D1-Har-4 ) ;
3395: LD_EXP 17
3399: PPUSH
3400: LD_STRING D1-Har-4
3402: PPUSH
3403: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3407: LD_EXP 7
3411: PPUSH
3412: LD_STRING D1-JMM-4
3414: PPUSH
3415: CALL_OW 88
// Say ( Harisson , D1-Har-5 ) ;
3419: LD_EXP 17
3423: PPUSH
3424: LD_STRING D1-Har-5
3426: PPUSH
3427: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3431: LD_EXP 7
3435: PPUSH
3436: LD_STRING D1-JMM-5
3438: PPUSH
3439: CALL_OW 88
// Say ( Harisson , D1-Har-6 ) ;
3443: LD_EXP 17
3447: PPUSH
3448: LD_STRING D1-Har-6
3450: PPUSH
3451: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3455: LD_EXP 7
3459: PPUSH
3460: LD_STRING D1-JMM-6
3462: PPUSH
3463: CALL_OW 88
// EndMission ;
3467: CALL 3476 0 0
// end ;
3471: LD_VAR 0 1
3475: RET
// export function EndMission ; var commander , i , all ; begin
3476: LD_INT 0
3478: PPUSH
3479: PPUSH
3480: PPUSH
3481: PPUSH
// case gamma_commander of 1 :
3482: LD_EXP 18
3486: PUSH
3487: LD_INT 1
3489: DOUBLE
3490: EQUAL
3491: IFTRUE 3495
3493: GO 3508
3495: POP
// commander := Donaldson ; 2 :
3496: LD_ADDR_VAR 0 2
3500: PUSH
3501: LD_EXP 13
3505: ST_TO_ADDR
3506: GO 3551
3508: LD_INT 2
3510: DOUBLE
3511: EQUAL
3512: IFTRUE 3516
3514: GO 3529
3516: POP
// commander := Brown ; 3 :
3517: LD_ADDR_VAR 0 2
3521: PUSH
3522: LD_EXP 14
3526: ST_TO_ADDR
3527: GO 3551
3529: LD_INT 3
3531: DOUBLE
3532: EQUAL
3533: IFTRUE 3537
3535: GO 3550
3537: POP
// commander := Houten ; end ;
3538: LD_ADDR_VAR 0 2
3542: PUSH
3543: LD_EXP 15
3547: ST_TO_ADDR
3548: GO 3551
3550: POP
// all := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , commander ] ;
3551: LD_ADDR_VAR 0 4
3555: PUSH
3556: LD_INT 22
3558: PUSH
3559: LD_INT 1
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: PUSH
3566: LD_INT 21
3568: PUSH
3569: LD_INT 1
3571: PUSH
3572: EMPTY
3573: LIST
3574: LIST
3575: PUSH
3576: EMPTY
3577: LIST
3578: LIST
3579: PPUSH
3580: CALL_OW 69
3584: PUSH
3585: LD_EXP 7
3589: PUSH
3590: LD_VAR 0 2
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: DIFF
3599: ST_TO_ADDR
// if UnitFilter ( all , [ f_class , 2 ] ) then
3600: LD_VAR 0 4
3604: PPUSH
3605: LD_INT 25
3607: PUSH
3608: LD_INT 2
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: PPUSH
3615: CALL_OW 72
3619: IFFALSE 3665
// for i in UnitFilter ( all , [ f_class , 2 ] ) do
3621: LD_ADDR_VAR 0 3
3625: PUSH
3626: LD_VAR 0 4
3630: PPUSH
3631: LD_INT 25
3633: PUSH
3634: LD_INT 2
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: PPUSH
3641: CALL_OW 72
3645: PUSH
3646: FOR_IN
3647: IFFALSE 3663
// SetClass ( i , 2 ) ;
3649: LD_VAR 0 3
3653: PPUSH
3654: LD_INT 2
3656: PPUSH
3657: CALL_OW 336
3661: GO 3646
3663: POP
3664: POP
// save_group := CharacterSelection ( 1 , 10 , 10 , [ sel_change_class , JMM , sel_not_hired , sel_changeable , sel_change_class ] ^ all ^ [ sel_dont_change_class , sel_not_changeable ] ^ [ commander , Harisson ] , [ [ class_soldier , 3 ] , [ class_mechanic , 3 , 6 ] , [ class_scientistic , 1 ] ] ) ;
3665: LD_ADDR_EXP 4
3669: PUSH
3670: LD_STRING 1
3672: PPUSH
3673: LD_INT 10
3675: PPUSH
3676: LD_INT 10
3678: PPUSH
3679: LD_INT -5
3681: PUSH
3682: LD_EXP 7
3686: PUSH
3687: LD_INT -2
3689: PUSH
3690: LD_INT -3
3692: PUSH
3693: LD_INT -5
3695: PUSH
3696: EMPTY
3697: LIST
3698: LIST
3699: LIST
3700: LIST
3701: LIST
3702: PUSH
3703: LD_VAR 0 4
3707: ADD
3708: PUSH
3709: LD_INT -6
3711: PUSH
3712: LD_INT -4
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: ADD
3719: PUSH
3720: LD_VAR 0 2
3724: PUSH
3725: LD_EXP 17
3729: PUSH
3730: EMPTY
3731: LIST
3732: LIST
3733: ADD
3734: PPUSH
3735: LD_INT 1
3737: PUSH
3738: LD_INT 3
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: PUSH
3745: LD_INT 3
3747: PUSH
3748: LD_INT 3
3750: PUSH
3751: LD_INT 6
3753: PUSH
3754: EMPTY
3755: LIST
3756: LIST
3757: LIST
3758: PUSH
3759: LD_INT 4
3761: PUSH
3762: LD_INT 1
3764: PUSH
3765: EMPTY
3766: LIST
3767: LIST
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: PPUSH
3774: CALL_OW 42
3778: ST_TO_ADDR
// SaveCharacters ( all diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam ] ^ save_group , 07_othersGamma ) ;
3779: LD_VAR 0 4
3783: PUSH
3784: LD_EXP 7
3788: PUSH
3789: LD_EXP 8
3793: PUSH
3794: LD_EXP 10
3798: PUSH
3799: LD_EXP 11
3803: PUSH
3804: LD_EXP 12
3808: PUSH
3809: LD_EXP 9
3813: PUSH
3814: LD_EXP 13
3818: PUSH
3819: LD_EXP 14
3823: PUSH
3824: LD_EXP 15
3828: PUSH
3829: LD_EXP 17
3833: PUSH
3834: LD_EXP 16
3838: PUSH
3839: EMPTY
3840: LIST
3841: LIST
3842: LIST
3843: LIST
3844: LIST
3845: LIST
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_EXP 4
3856: ADD
3857: DIFF
3858: PPUSH
3859: LD_STRING 07_othersGamma
3861: PPUSH
3862: CALL_OW 38
// SaveCharacters ( save_group diff [ JMM , Gladstone , Lisa , Cyrus , Bobby , Frank , Donaldson , Brown , Houten , Harisson , Khatam , 0 ] , 07_others ) ;
3866: LD_EXP 4
3870: PUSH
3871: LD_EXP 7
3875: PUSH
3876: LD_EXP 8
3880: PUSH
3881: LD_EXP 10
3885: PUSH
3886: LD_EXP 11
3890: PUSH
3891: LD_EXP 12
3895: PUSH
3896: LD_EXP 9
3900: PUSH
3901: LD_EXP 13
3905: PUSH
3906: LD_EXP 14
3910: PUSH
3911: LD_EXP 15
3915: PUSH
3916: LD_EXP 17
3920: PUSH
3921: LD_EXP 16
3925: PUSH
3926: LD_INT 0
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: LIST
3933: LIST
3934: LIST
3935: LIST
3936: LIST
3937: LIST
3938: LIST
3939: LIST
3940: LIST
3941: LIST
3942: DIFF
3943: PPUSH
3944: LD_STRING 07_others
3946: PPUSH
3947: CALL_OW 38
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
3951: LD_EXP 7
3955: PPUSH
3956: LD_EXP 5
3960: PUSH
3961: LD_STRING JMM
3963: STR
3964: PPUSH
3965: CALL_OW 38
// if Lisa then
3969: LD_EXP 10
3973: IFFALSE 4015
// begin SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
3975: LD_EXP 10
3979: PPUSH
3980: LD_EXP 5
3984: PUSH
3985: LD_STRING Lisa
3987: STR
3988: PPUSH
3989: CALL_OW 38
// if Lisa in save_group then
3993: LD_EXP 10
3997: PUSH
3998: LD_EXP 4
4002: IN
4003: IFFALSE 4015
// SaveVariable ( true , LisaIn07 ) ;
4005: LD_INT 1
4007: PPUSH
4008: LD_STRING LisaIn07
4010: PPUSH
4011: CALL_OW 39
// end ; if Bobby then
4015: LD_EXP 12
4019: IFFALSE 4061
// begin SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
4021: LD_EXP 12
4025: PPUSH
4026: LD_EXP 5
4030: PUSH
4031: LD_STRING Bobby
4033: STR
4034: PPUSH
4035: CALL_OW 38
// if Bobby in save_group then
4039: LD_EXP 12
4043: PUSH
4044: LD_EXP 4
4048: IN
4049: IFFALSE 4061
// SaveVariable ( true , BobbyIn07 ) ;
4051: LD_INT 1
4053: PPUSH
4054: LD_STRING BobbyIn07
4056: PPUSH
4057: CALL_OW 39
// end ; if Cyrus then
4061: LD_EXP 11
4065: IFFALSE 4107
// begin SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
4067: LD_EXP 11
4071: PPUSH
4072: LD_EXP 5
4076: PUSH
4077: LD_STRING Cyrus
4079: STR
4080: PPUSH
4081: CALL_OW 38
// if Cyrus in save_group then
4085: LD_EXP 11
4089: PUSH
4090: LD_EXP 4
4094: IN
4095: IFFALSE 4107
// SaveVariable ( true , CyrusIn07 ) ;
4097: LD_INT 1
4099: PPUSH
4100: LD_STRING CyrusIn07
4102: PPUSH
4103: CALL_OW 39
// end ; if Brown then
4107: LD_EXP 14
4111: IFFALSE 4153
// begin SaveCharacters ( Brown , mission_prefix & Brown ) ;
4113: LD_EXP 14
4117: PPUSH
4118: LD_EXP 5
4122: PUSH
4123: LD_STRING Brown
4125: STR
4126: PPUSH
4127: CALL_OW 38
// if Brown in save_group then
4131: LD_EXP 14
4135: PUSH
4136: LD_EXP 4
4140: IN
4141: IFFALSE 4153
// SaveVariable ( true , BrownIn07 ) ;
4143: LD_INT 1
4145: PPUSH
4146: LD_STRING BrownIn07
4148: PPUSH
4149: CALL_OW 39
// end ; if Donaldson then
4153: LD_EXP 13
4157: IFFALSE 4199
// begin SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
4159: LD_EXP 13
4163: PPUSH
4164: LD_EXP 5
4168: PUSH
4169: LD_STRING Donaldson
4171: STR
4172: PPUSH
4173: CALL_OW 38
// if Donaldson in save_group then
4177: LD_EXP 13
4181: PUSH
4182: LD_EXP 4
4186: IN
4187: IFFALSE 4199
// SaveVariable ( true , DonaldsonIn07 ) ;
4189: LD_INT 1
4191: PPUSH
4192: LD_STRING DonaldsonIn07
4194: PPUSH
4195: CALL_OW 39
// end ; if Gladstone then
4199: LD_EXP 8
4203: IFFALSE 4245
// begin SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
4205: LD_EXP 8
4209: PPUSH
4210: LD_EXP 5
4214: PUSH
4215: LD_STRING Gladstone
4217: STR
4218: PPUSH
4219: CALL_OW 38
// if Gladstone in save_group then
4223: LD_EXP 8
4227: PUSH
4228: LD_EXP 4
4232: IN
4233: IFFALSE 4245
// SaveVariable ( true , GladstoneIn07 ) ;
4235: LD_INT 1
4237: PPUSH
4238: LD_STRING GladstoneIn07
4240: PPUSH
4241: CALL_OW 39
// end ; if Khatam then
4245: LD_EXP 16
4249: IFFALSE 4291
// begin SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
4251: LD_EXP 16
4255: PPUSH
4256: LD_EXP 5
4260: PUSH
4261: LD_STRING Khatam
4263: STR
4264: PPUSH
4265: CALL_OW 38
// if Khatam in save_group then
4269: LD_EXP 16
4273: PUSH
4274: LD_EXP 4
4278: IN
4279: IFFALSE 4291
// SaveVariable ( true , KhatamIn07 ) ;
4281: LD_INT 1
4283: PPUSH
4284: LD_STRING KhatamIn07
4286: PPUSH
4287: CALL_OW 39
// end ; if debug then
4291: LD_EXP 1
4295: IFFALSE 4301
// InGameOff ;
4297: CALL_OW 9
// ChangeMap ( 1 , %_cont ) ;
4301: LD_INT 1
4303: PPUSH
4304: LD_STRING %_cont
4306: PPUSH
4307: CALL_OW 340
// end ; end_of_file
4311: LD_VAR 0 1
4315: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
4316: LD_INT 0
4318: PPUSH
4319: PPUSH
// if exist_mode then
4320: LD_VAR 0 2
4324: IFFALSE 4349
// unit := CreateCharacter ( prefix & ident ) else
4326: LD_ADDR_VAR 0 5
4330: PUSH
4331: LD_VAR 0 3
4335: PUSH
4336: LD_VAR 0 1
4340: STR
4341: PPUSH
4342: CALL_OW 34
4346: ST_TO_ADDR
4347: GO 4364
// unit := NewCharacter ( ident ) ;
4349: LD_ADDR_VAR 0 5
4353: PUSH
4354: LD_VAR 0 1
4358: PPUSH
4359: CALL_OW 25
4363: ST_TO_ADDR
// result := unit ;
4364: LD_ADDR_VAR 0 4
4368: PUSH
4369: LD_VAR 0 5
4373: ST_TO_ADDR
// end ;
4374: LD_VAR 0 4
4378: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
4379: LD_INT 0
4381: PPUSH
// uc_side := side ;
4382: LD_ADDR_OWVAR 20
4386: PUSH
4387: LD_VAR 0 1
4391: ST_TO_ADDR
// uc_nation := nation ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_VAR 0 2
4401: ST_TO_ADDR
// vc_chassis := chassis ;
4402: LD_ADDR_OWVAR 37
4406: PUSH
4407: LD_VAR 0 3
4411: ST_TO_ADDR
// vc_engine := engine ;
4412: LD_ADDR_OWVAR 39
4416: PUSH
4417: LD_VAR 0 4
4421: ST_TO_ADDR
// vc_control := control ;
4422: LD_ADDR_OWVAR 38
4426: PUSH
4427: LD_VAR 0 5
4431: ST_TO_ADDR
// vc_weapon := weapon ;
4432: LD_ADDR_OWVAR 40
4436: PUSH
4437: LD_VAR 0 6
4441: ST_TO_ADDR
// vc_fuel_battery := fuel ;
4442: LD_ADDR_OWVAR 41
4446: PUSH
4447: LD_VAR 0 7
4451: ST_TO_ADDR
// result := CreateVehicle ;
4452: LD_ADDR_VAR 0 8
4456: PUSH
4457: CALL_OW 45
4461: ST_TO_ADDR
// end ;
4462: LD_VAR 0 8
4466: RET
// export function SayX ( units , ident ) ; var i ; begin
4467: LD_INT 0
4469: PPUSH
4470: PPUSH
// result := false ;
4471: LD_ADDR_VAR 0 3
4475: PUSH
4476: LD_INT 0
4478: ST_TO_ADDR
// if not units then
4479: LD_VAR 0 1
4483: NOT
4484: IFFALSE 4488
// exit ;
4486: GO 4542
// for i in units do
4488: LD_ADDR_VAR 0 4
4492: PUSH
4493: LD_VAR 0 1
4497: PUSH
4498: FOR_IN
4499: IFFALSE 4540
// if IsOk ( i ) then
4501: LD_VAR 0 4
4505: PPUSH
4506: CALL_OW 302
4510: IFFALSE 4538
// begin Say ( i , ident ) ;
4512: LD_VAR 0 4
4516: PPUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 88
// result := i ;
4526: LD_ADDR_VAR 0 3
4530: PUSH
4531: LD_VAR 0 4
4535: ST_TO_ADDR
// break ;
4536: GO 4540
// end ;
4538: GO 4498
4540: POP
4541: POP
// end ;
4542: LD_VAR 0 3
4546: RET
