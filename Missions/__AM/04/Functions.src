// Functions by Serpent
Export Function PrepareUnit(ident, exist_mode);
var unit;
begin

if exist_mode then
begin
   unit := CreateCharacter(ident);
  end else
  begin
   unit := NewCharacter(ident);
  end; 

result := unit;
End;

// Function by Nefarem
Export function RespawnInside(side, nation, build, skill, class, count);
var i,l, un;
begin

   for i = 1 to count do
   begin

      uc_side = side;
      uc_nation = nation;

      hc_gallery = '';
      hc_name = '';
      PrepareHuman(false, class, skill);

      un = CreateHuman;
      PlaceHumanInUnit(un,build);

   end;

END;

// Function by Serpent
Export Function PrepareSolBun(skill, b);
var un, dir;
begin
     uc_side := GetSide(b);
     uc_nation := GetNation(b);

     PrepareHuman(false, 1, skill);
     un = CreateHuman;

     dir := GetDir(b)  - 3;

     if dir < 0 then dir := 6 + dir;

     SetDir(un, dir);
     PlaceHumanInUnit(un, b);
End;

// Function by Nefarem
// Function is used to call the dialogue spoken by random male or female characters
// Example: DialogRandom(FilterAllUnits([[f_side, 1], [f_type, unit_human]]), 'DAtt1-Sol1-1', 'DAtt1-FSol1-1');
Export function DialogRandom(characters, dialogMID, dialogFID);
var i, rnd;
begin
    rnd = rand(1, characters);  

    for i = 1 to characters do
    begin

       if i = rnd AND GetSex(characters[i]) = 1 then Say(characters[i], dialogMID);
       if i = rnd AND GetSex(characters[i]) = 2 then Say(characters[i], dialogFID);

    end;
  
end;

Export function PrepareDifficulty;
begin
  if Difficulty = 1 then
  begin 
    RuSoldMinLevel = 0;
    RuSoldMaxLevel = 2;
  end;

  if Difficulty = 2 then
  begin 
    RuSoldMinLevel = 1;
    RuSoldMaxLevel = 2;
    RemoveUnit(ambbrwr1);
    SetTech(51, 3, state_enabled);
  end;

    if Difficulty = 3 then
  begin 
    RuSoldMinLevel = 1;
    RuSoldMaxLevel = 3;
    RemoveUnit(ambbrwr0);
    RemoveUnit(ambbrwr1);
    SetTech(51, 3, state_enabled);
    SetTech(52, 3, state_enabled);
    PlaceWeaponTurret(rubbunk0, ru_gun);
  end;

end;

Export function EnergyDialog;
begin
             
        if GetTech(46, 1) = state_enabled and GetTech(35, 1) = state_enabled then
        begin
                Say(JMM, 'D9c-JMM-1');
                energyVDialog = 1;
                display_strings = 'tsi';
        end else
        begin
                if GetTech(35, 1) = state_researched and energyVDialog = 0 then
                begin
                        Say(JMM, 'D9c-JMM-1a');
                        energyVDialog = 1;
                end;

                if GetTech(46, 1) = state_researched and energyVDialog = 0 then
                begin
                        Say(JMM, 'D9c-JMM-1b');
                        energyVDialog = 1;
                end;

                if GetTech(46, 1) = state_researched and GetTech(21, 1) = state_researched and energyVDialog = 0 then
                begin
                        Say(JMM, 'D9c-JMM-1c');
                        energyVDialog = 1;
                end;
                
        end; 
end;

// Finish mission

Export function FinishMission;
var tmp;
begin

        if buildOil = 1 and buildPower = 1 then
        begin
                AddMedal('oil', 1);
        end else
        begin
                if buildOil = 1 and buildPower = 0 then AddMedal('oil', -1);
                if buildOil = 0 and buildPower = 1 then AddMedal('oil', -2);
                if buildOil = 0 and buildPower = 0 then AddMedal('oil', -3);
        end;

        if lostCounter < 3 then begin AddMedal('deaths', 1);
        end else begin AddMedal('deaths', -1); end;

        if honor = 1 then begin AddMedal('honour', 1);
        end else begin AddMedal('honour', -1); end;

        GiveMedals('Main');

        RewardPeople(FilterAllUnits([[f_side, 1], [f_nation, 1], [f_type, unit_human]]));

        SaveCharacters(JMM, 'JMM');
        SaveCharacters(Bobby, 'Bobby');
        SaveCharacters(Cyrus, 'Cyrus');
        SaveCharacters(Lisa, 'Lisa');
        SaveCharacters(Brown, 'Brown');
        SaveCharacters(Donaldson, 'Donaldson');
        SaveCharacters(Frank, 'Frank');

        SaveCharacters(FilterAllUnits([[f_ok],[f_side, 1],[f_type,unit_human]]) diff [JMM, Bobby, Cyrus, Lisa, Brown, Donaldson, Frank],'04_other_survivors');

        YouWin;

end;

// AI functions

Export function ResAllTechs(side, lab, nation);
var i, tech, cout;
begin

  For i = 1 to 72 do
    If GetTech(i, side) = state_enabled and TechNationAvailable(i, nation) = true then AddComResearch(lab, i);

end; 

Export function RepairBuilding(side, building);
var buildings_list, i,engineerOk_list, j;
begin

        engineerOk_list = FilterAllUnits([[f_side, side], [f_class, 2], [f_lives, 1000]]);
        buildings_list = FilterAllUnits([[[f_side, side], [f_type, unit_building], [f_not, [f_lives, 1000]]]]);

        if buildings_list > 0 and engineerOk_list > 0 then
        begin

                for i in engineerOk_list do
                begin
                     for j in buildings_list do
                     begin

                        AddComExitBuilding(i);
                        wait(0$1);
                        AddComRepairBuilding(i, j);

                    end;
                end;
        end;

        if buildings_list = 0 then
        begin

           for i in engineerOK_list do
           begin
             ComEnterUnit(i, building);
          end;

        end;
END;


Export function HealUnitInBase(side, healArea, baseArea, build);
var sci_list,  i, j, damageUnits;
begin

  sci_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

  damageUnits = FilterUnitsInArea(baseArea, [[f_side, side], [f_type, unit_human], [f_not, [f_lives, 750]]]);

    if damageUnits > 0 then
    begin

      for i = 1 to damageUnits do ComMoveToArea(damageUnits[i], healArea);

      for i = 1 to sci_list do
      begin

        ComExitBuilding(sci_list[i]);

        for j in FilterUnitsInArea(healArea,[f_side, side]) do
        begin

        AddComHeal(sci_list[i], j[j]);
        wait(1$0);

        end;
      end;

    end else
    begin

    AddComEnterUnit(sci_list, build);

  end;

END;

Export function BuildingVehicleAndAttackEnemy(side, fabric, vehCount, targetSide, weaponTab, engine, control, chassis);
var i, j, lastIndex, weaponTabTemp, temp, target1, target2;
begin

     IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount then
     begin

       for i = 1 to vehCount do AddComConstruct(fabric, chassis, engine, control, weaponTab[Rand(1, weaponTab)]);

    end;

    IF FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) >= vehCount then
    begin
 

    repeat begin
    wait(0$1);

      for i in FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 250]]) do
      begin

        target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
        target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

               If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                begin
                  ComAttackUnit(i, target1);
                end
               else
                begin
                  ComAttackUnit(i, target2);
                end;
      end;
      end until FilterAllUnits([[f_side, side], [f_type, unit_vehicle]]) <= vehCount;
   end;
END;

Export function RespawnAttackInfantry(side, nation, soldierCount, sniperCount, bazookCount, mortalCount, medicCount, skil, spawnArea, healArea, targetSide, strategy);
var i, j,  un, damageUnit_list, medic_list, soldiersOK_list, enemyUnits, und, target1, target2;
begin

        for i = 1 to medicCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                                PrepareHuman(false, 4, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;


       for i = 1 to soldierCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                                PrepareHuman(false, 1, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to sniperCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                                PrepareHuman(false, 5, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to bazookCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                                PrepareHuman(false, 9, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;

        for i = 1 to mortalCount do
        begin

                uc_side = side;
                uc_nation = nation;

                hc_name = '';
                hc_gallery = '';
                                PrepareHuman(false, 8, skil);

                un = CreateHuman;
                PlaceUnitArea(un, spawnArea, false);

        end;


        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]]]);

        medic_list = FilterAllUnits([[f_side, side], [f_class, 4]]);

                for i in medic_list do ComMoveToArea(i, healArea);


        // strategy , 1 - flank and attack oil drilling mine,  2 - front attack, 

        if strategy = 1 then
        begin
                
                repeat
                        wait(0$3);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 91, 63);
                                AddComAgressiveMove(i, 101, 53);
                                AddComAgressiveMove(i, 75, 23);
                                AddComAgressiveMove(i, 78, 8);
                        end;
                until FilterUnitsInArea(EnemyTargetArea1, [f_side, 5]) > 0;

       repeat begin
       wait(0$3);

                for i in soldiersOK_list do
                begin


                        target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                        target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                        begin
                                        ComAttackUnit(i, target1);
                                        end else
                                        begin
                                        ComAttackUnit(i, target2);
                end;
      end;


      IF medicCount > 0  then
        begin
                repeat

                                        wait(0$1);

                                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);

                                        if damageUnit_list > 0 then
                                        begin
                                                for i in damageUnit_list  do
                                                begin
                                                        ComMoveToArea(i, healArea);
                                                        for j in medic_list do 
                                                        AddComHeal(j, i);
                                                end;
                                        end;

                                        for i in soldiersOK_list do
                                        begin

                                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                        If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                                begin
                                                ComAttackUnit(i, target1);
                                                end  else
                                                begin
                                                ComAttackUnit(i, target2);
                                                end;

                                        end;

                until medicCount = 0;

        end;

      end until soldiersOK_list = 0;
        end;

        if strategy = 2 then
        begin
                
                repeat
                        wait(0$3);
                        for i in soldiersOK_list do
                        begin
                                AddComAgressiveMove(i, 91, 63);
                                AddComAgressiveMove(i, 75, 33);
                        end;
                until FilterUnitsInArea(EnemyTargetArea2, [f_side, 5]) > 0;

       repeat begin
       wait(0$3);

                for i in soldiersOK_list do
                begin


                        target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                        target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                                If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                        begin
                                        ComAttackUnit(i, target1);
                                        end else
                                        begin
                                        ComAttackUnit(i, target2);
                end;
      end;


      IF medicCount > 0  then
        begin
                repeat

                        wait(0$1);

                        damageUnit_list = FilterAllUnits([[f_side, side], [f_and, [f_not, [f_lives, 550]],[f_lives, 250]]]);
                        soldiersOK_list =  FilterAllUnits([[f_side, side], [f_or,[f_class, 1], [f_class, 5], [f_class, 8], [f_class, 9]], [f_lives, 1000]]);
                        
                        if damageUnit_list > 0 then
                        begin
                                for i in damageUnit_list  do
                                begin
                                        ComMoveToArea(i, healArea);
                                        for j in medic_list do 
                                           AddComHeal(j, i);
                                end;
                        end;


                        for i in soldiersOK_list do
                        begin

                                target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
                                target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

                        If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                                begin
                                ComAttackUnit(i, target1);
                                end  else
                                begin
                                ComAttackUnit(i, target2);
                                end;

                        end;

                until medicCount = 0;

        end;

      end until soldiersOK_list = 0;
        end;
        
END;

export function RespawnAttackVehicle(area, side, vehCount, mehskill, nation, vehengine, vehcontrol, Ruenableweapon, ArenableWeapon, amEnableWeapon, repairArea, targetSide);
var i, j, rutemp, artemp, amtemp,target1, target2, lastIndex1, lastIndex2, lastIndex3, veh, tempTable,  ruWeaponTab, arWeaponTab, amWeaponTab, ruChassisTab, arChassisTab, amChassisTab, Vehicle_list, VehicleOK_list, damageVehicle_list, emptyVehicle_list, mechanicInside_list, mechanicOutside_list;
begin

  ruWeaponTab = ruenableweapon;
  ruChassisTab = [21, 22, 23, 24];

  arWeaponTab = arenableweapon;
  arChassisTab = [11, 12, 13, 14];

  amWeaponTab = amenableweapon;
  amChassisTab = [1, 2, 3, 4, 5];

  amtemp = amWeaponTab;
  artemp = arWeaponTab;
  rutemp = ruWeaponTab;

  repeat

  wait(0$1);

  IF nation = 1 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = amWeaponTab[Rand(1, lastIndex1)];

            for j = 1 to amWeaponTab do
            begin
                 IF amWeaponTab[j] = 2 or amWeaponTab[j] = 3 then
                 begin
                      amChassisTab = [1,2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1,5)];
                 end;

                 IF amWeaponTab[j] = 4 or amWeaponTab[j] = 5 or amWeaponTab[j] = 9 or amWeaponTab[j] = 11 or amWeaponTab[j] = 7 then
                 begin
                      amChassisTab = [2,3,4,5];
                      vc_chassis = amChassisTab[Rand(1, 4)];
                 end;

                 IF amWeaponTab[j] = 8 or amWeaponTab[j] = 6 or amWeaponTab[j] = 10 then
                 begin
                      amChassisTab = [4,5];
                      vc_chassis = amChassisTab[Rand(1,2)];
                 end;

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vehcontrol = 1 then
            begin

                 hc_class = 3;
                 hc_name = '';
                 hc_gallery = '';
                 hc_sex = [Rand(sex_female,sex_male)];
                 hc_skills = [mehskill, mehskill, mehskill, mehskill];
                 PlaceHumanInUnit(CreateHuman, veh);

            end;


            i = i + 1;

    end;

  IF nation = 2 then
  begin

            uc_side = side;
            uc_nation = nation;

            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = arWeaponTab[Rand(1, lastIndex2)];

            for j = 1 to arWeaponTab do
            begin

                 IF arWeaponTab[j] = 24 or arWeaponTab[j] = 22 or arWeaponTab[j] = 23 or arWeaponTab[j] = 30 then
                 begin
                      arChassisTab = [11, 12, 13, 14];
                      vc_chassis = arChassisTab[Rand(1, 4)];
                 end;

                 IF arWeaponTab[j] = 29 or arWeaponTab[j] = 28 or arWeaponTab[j] = 27 or arWeaponTab[j] = 26 or arWeaponTab[j] = 25 then
                 begin
                      arChassisTab = [13, 14];
                      vc_chassis = arChassisTab[Rand(1, 2)];
                 end;

                 arChassisTab = [11, 12, 13, 14];

           end;

            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vehcontrol = 1 then
            begin

                 hc_class = 3;
                 hc_name = '';
                 hc_gallery = '';
                 hc_sex = [Rand(sex_female,sex_male)];
                 hc_skills = [Rand(0, mehskill), Rand(0, mehskill), mehskill, Rand(0, mehskill)];
                 PlaceHumanInUnit(CreateHuman, veh);

            end;


            i = i + 1;

    end;


  IF nation = 3 then
  begin

            uc_side = side;
            uc_nation = nation;

            ruChassisTab = [21, 22, 23, 24];
            vc_engine = vehengine;
            vc_control = vehcontrol;
            vc_weapon = ruWeaponTab[Rand(1, lastIndex3)];


            for j = 1 to ruWeaponTab do
            begin

                 IF ruWeaponTab[j] = 42 or ruWeaponTab[j] = 43 or ruWeaponTab[j] = 44 or ruWeaponTab[j] = 45 or ruWeaponTab[j] = 49 then
                 begin
                      ruChassisTab = [21, 22, 23, 24];
                      vc_chassis = ruChassisTab[Rand(1, 4)];
                 end;

                 IF ruWeaponTab[j] = 46 or ruWeaponTab[j] = 47 then
                 begin
                      ruChassisTab = [23, 24];
                      vc_chassis = ruChassisTab[Rand(1, 2)];
                 end;

                 ruChassisTab = [21, 22, 23, 24];

           end;


            veh = CreateVehicle;
            PlaceUnitArea(veh, area, false);

            IF vehcontrol = 1 then
            begin

                 hc_class = 3;
                 hc_name = '';
                 hc_gallery = '';
                 hc_sex = [Rand(sex_female,sex_male)];
                 hc_skills = [Rand(0, mehskill), Rand(0, mehskill), mehskill, Rand(0, mehskill)];
                 PlaceHumanInUnit(CreateHuman, veh);

            end;


            i = i + 1;

    end;

  until i = vehCount;

  repeat
   wait(0$3);

       VehicleOK_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_lives, 550]]);
         damageVehicle_list = FilterAllUnits([[f_side, side], [f_type, unit_vehicle], [f_not,[f_lives, 550]]]);
         emptyVehicle_list = FilterUnitsInArea(repairArea, [[f_side, side], [f_type, unit_vehicle], [f_lives, 1000], [f_empty]]);

         for i in damageVehicle_list do
         begin
           mechanicInside_list =  UnitsInside(i);
         end;

         mechanicOutside_list =  FilterUnitsInArea(repairArea, [[f_side, side], [f_class, 3]]);

        IF damageVehicle_list > 0 then
        begin

                for i in damageVehicle_list do
                begin
                   for j in mechanicInside_list do
                   begin
                        ComMoveToArea(damageVehicle_list, repairArea);
                        AddComExitVehicle(j);
                        AddComRepairVehicle(j, i);
                   end;
                end;

        end;

        IF emptyVehicle_list > 0 then
        begin

         for i in emptyVehicle_list  do
         begin
              for j in mechanicOutside_list do
              begin
                AddComEnterUnit(j, i);
             end;

        end;

      end;

      IF VehicleOK_list > 0 then
      begin
         for i in VehicleOK_list  do
         begin

            target1 := NearestUnitToUnit(FilterAllUnits([f_side, targetSide]), i);
            target2 := NearestUnitToUnit(FilterAllUnits([[[f_side, targetSide], [f_or,[f_occupied], [f_type, unit_human], [f_type, unit_vehicle]]]]), i);

               If GetDistUnits(i, target1)+8 < GetDistUnits(i, target2) then
                begin
                  ComAttackUnit(i, target1);
                end
               else
                begin
                  ComAttackUnit(i, target2);
                end;

      end;
   end;
 until VehicleOK_list = 0 AND damageVehicle_list = 0;



END;
