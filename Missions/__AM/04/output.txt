// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// ruSoldMinLevel = 0 ;
  12: LD_ADDR_EXP 16
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  20: LD_ADDR_EXP 17
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  28: LD_ADDR_EXP 18
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// debugMode = 0 ;
  36: LD_ADDR_EXP 41
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// bonusAvalaible = 0 ;
  44: LD_ADDR_EXP 40
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// firstRussianAttack = 0 ;
  52: LD_ADDR_EXP 21
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// saveDonaldson = 0 ;
  60: LD_ADDR_EXP 22
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// frankScoutBase = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// harrAnswer = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 18900
  99: ST_TO_ADDR
// timerStatus = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// startTimer = 0 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// factoryDialog = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// bunkerDialog = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// energyVDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// buildOil = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// buildPower = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// supply = [ 11 , 12 , 14 ] [ Difficulty ] ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 11
 163: PUSH
 164: LD_INT 12
 166: PUSH
 167: LD_INT 14
 169: PUSH
 170: EMPTY
 171: LIST
 172: LIST
 173: LIST
 174: PUSH
 175: LD_OWVAR 67
 179: ARRAY
 180: ST_TO_ADDR
// AIEnable = 1 ;
 181: LD_ADDR_EXP 35
 185: PUSH
 186: LD_INT 1
 188: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 189: LD_ADDR_EXP 39
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// lostCounter = 0 ;
 197: LD_ADDR_EXP 36
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// honor = 1 ;
 205: LD_ADDR_EXP 37
 209: PUSH
 210: LD_INT 1
 212: ST_TO_ADDR
// escapeAvalaible = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// PrepareDifficulty ;
 221: CALL 3734 0 0
// PrepareRussianBase ;
 225: CALL 2061 0 0
// PrepareRussianCommander ;
 229: CALL 2012 0 0
// PrepareHeroes ;
 233: CALL 374 0 0
// SetBName ( ambdept0 , gamma ) ;
 237: LD_INT 4
 239: PPUSH
 240: LD_STRING gamma
 242: PPUSH
 243: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 247: LD_INT 21
 249: PPUSH
 250: LD_STRING fyodor
 252: PPUSH
 253: CALL_OW 500
// end ;
 257: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 258: LD_EXP 41
 262: PUSH
 263: LD_INT 1
 265: EQUAL
 266: IFFALSE 371
 268: GO 270
 270: DISABLE
 271: LD_INT 0
 273: PPUSH
// begin enable ;
 274: ENABLE
// fogoff ( true ) ;
 275: LD_INT 1
 277: PPUSH
 278: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 282: LD_ADDR_VAR 0 1
 286: PUSH
 287: LD_INT 22
 289: PUSH
 290: LD_INT 1
 292: PUSH
 293: EMPTY
 294: LIST
 295: LIST
 296: PUSH
 297: LD_INT 21
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: EMPTY
 308: LIST
 309: LIST
 310: PPUSH
 311: CALL_OW 69
 315: PUSH
 316: FOR_IN
 317: IFFALSE 333
// SetLives ( i , 1000 ) ;
 319: LD_VAR 0 1
 323: PPUSH
 324: LD_INT 1000
 326: PPUSH
 327: CALL_OW 234
 331: GO 316
 333: POP
 334: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 335: LD_INT 4
 337: PPUSH
 338: CALL_OW 274
 342: PPUSH
 343: LD_INT 1
 345: PPUSH
 346: LD_INT 9999
 348: PPUSH
 349: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 353: LD_INT 4
 355: PPUSH
 356: CALL_OW 274
 360: PPUSH
 361: LD_INT 2
 363: PPUSH
 364: LD_INT 9999
 366: PPUSH
 367: CALL_OW 277
// end ; end_of_file
 371: PPOPN 1
 373: END
// export function PrepareHeroes ; var i ; begin
 374: LD_INT 0
 376: PPUSH
 377: PPUSH
// uc_side = 1 ;
 378: LD_ADDR_OWVAR 20
 382: PUSH
 383: LD_INT 1
 385: ST_TO_ADDR
// uc_nation = 1 ;
 386: LD_ADDR_OWVAR 21
 390: PUSH
 391: LD_INT 1
 393: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 394: LD_ADDR_EXP 1
 398: PUSH
 399: LD_STRING JMM
 401: PPUSH
 402: LD_INT 1
 404: PPUSH
 405: CALL 3275 0 2
 409: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 410: LD_ADDR_EXP 4
 414: PUSH
 415: LD_STRING Lisa
 417: PPUSH
 418: LD_INT 1
 420: PPUSH
 421: CALL 3275 0 2
 425: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 426: LD_ADDR_EXP 7
 430: PUSH
 431: LD_STRING Brown
 433: PPUSH
 434: LD_INT 0
 436: PPUSH
 437: CALL 3275 0 2
 441: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 442: LD_ADDR_EXP 8
 446: PUSH
 447: LD_STRING Dickens
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL 3275 0 2
 457: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 458: LD_ADDR_EXP 9
 462: PUSH
 463: LD_STRING Woodruff
 465: PPUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL 3275 0 2
 473: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 474: LD_ADDR_EXP 12
 478: PUSH
 479: LD_STRING Campell
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 3275 0 2
 489: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 490: LD_ADDR_EXP 10
 494: PUSH
 495: LD_STRING Knight
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: CALL 3275 0 2
 505: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 506: LD_ADDR_EXP 11
 510: PUSH
 511: LD_STRING Claptopn
 513: PPUSH
 514: LD_INT 0
 516: PPUSH
 517: CALL 3275 0 2
 521: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 522: LD_ADDR_EXP 14
 526: PUSH
 527: LD_STRING Harisson
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL 3275 0 2
 537: ST_TO_ADDR
// if Lisa = false then
 538: LD_EXP 4
 542: PUSH
 543: LD_INT 0
 545: EQUAL
 546: IFFALSE 564
// Bobby = PrepareUnit ( Bobby , true ) ;
 548: LD_ADDR_EXP 2
 552: PUSH
 553: LD_STRING Bobby
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: CALL 3275 0 2
 563: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 564: LD_EXP 4
 568: PUSH
 569: LD_INT 0
 571: EQUAL
 572: PUSH
 573: LD_EXP 2
 577: PUSH
 578: LD_INT 0
 580: EQUAL
 581: AND
 582: IFFALSE 600
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 584: LD_ADDR_EXP 3
 588: PUSH
 589: LD_STRING Cyrus
 591: PPUSH
 592: LD_INT 1
 594: PPUSH
 595: CALL 3275 0 2
 599: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 600: LD_EXP 4
 604: PUSH
 605: LD_INT 0
 607: EQUAL
 608: PUSH
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 0
 616: EQUAL
 617: AND
 618: PUSH
 619: LD_EXP 3
 623: PUSH
 624: LD_INT 0
 626: EQUAL
 627: AND
 628: IFFALSE 646
// RandomBeforeMission = PrepareUnit ( 03_others , true ) ;
 630: LD_ADDR_EXP 6
 634: PUSH
 635: LD_STRING 03_others
 637: PPUSH
 638: LD_INT 1
 640: PPUSH
 641: CALL 3275 0 2
 645: ST_TO_ADDR
// uc_side = 4 ;
 646: LD_ADDR_OWVAR 20
 650: PUSH
 651: LD_INT 4
 653: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 654: LD_ADDR_EXP 13
 658: PUSH
 659: LD_STRING Donaldson
 661: PPUSH
 662: LD_INT 0
 664: PPUSH
 665: CALL 3275 0 2
 669: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 670: LD_ADDR_EXP 5
 674: PUSH
 675: LD_STRING Frank
 677: PPUSH
 678: LD_INT 1
 680: PPUSH
 681: CALL 3275 0 2
 685: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 686: LD_EXP 1
 690: PPUSH
 691: LD_INT 32
 693: PPUSH
 694: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 698: LD_EXP 7
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: LD_INT 0
 708: PPUSH
 709: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 713: LD_EXP 7
 717: PPUSH
 718: LD_INT 32
 720: PPUSH
 721: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 725: LD_EXP 8
 729: PPUSH
 730: LD_INT 2
 732: PPUSH
 733: LD_INT 0
 735: PPUSH
 736: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 740: LD_EXP 9
 744: PPUSH
 745: LD_INT 2
 747: PPUSH
 748: LD_INT 0
 750: PPUSH
 751: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 755: LD_EXP 12
 759: PPUSH
 760: LD_INT 2
 762: PPUSH
 763: LD_INT 0
 765: PPUSH
 766: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 770: LD_EXP 10
 774: PPUSH
 775: LD_INT 2
 777: PPUSH
 778: LD_INT 0
 780: PPUSH
 781: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 785: LD_EXP 11
 789: PPUSH
 790: LD_INT 2
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 800: LD_EXP 4
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// if Lisa = false then
 815: LD_EXP 4
 819: PUSH
 820: LD_INT 0
 822: EQUAL
 823: IFFALSE 840
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 825: LD_EXP 2
 829: PPUSH
 830: LD_INT 2
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL_OW 49
// if Lisa = false and Bobby = false then
 840: LD_EXP 4
 844: PUSH
 845: LD_INT 0
 847: EQUAL
 848: PUSH
 849: LD_EXP 2
 853: PUSH
 854: LD_INT 0
 856: EQUAL
 857: AND
 858: IFFALSE 875
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 860: LD_EXP 3
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: LD_INT 0
 870: PPUSH
 871: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 875: LD_EXP 4
 879: PUSH
 880: LD_INT 0
 882: EQUAL
 883: PUSH
 884: LD_EXP 2
 888: PUSH
 889: LD_INT 0
 891: EQUAL
 892: AND
 893: PUSH
 894: LD_EXP 3
 898: PUSH
 899: LD_INT 0
 901: EQUAL
 902: AND
 903: IFFALSE 920
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 905: LD_EXP 6
 909: PPUSH
 910: LD_INT 2
 912: PPUSH
 913: LD_INT 0
 915: PPUSH
 916: CALL_OW 49
// end ;
 920: LD_VAR 0 1
 924: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 925: LD_INT 0
 927: PPUSH
 928: PPUSH
 929: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 930: LD_EXP 13
 934: PPUSH
 935: LD_INT 10
 937: PPUSH
 938: LD_INT 0
 940: PPUSH
 941: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 945: LD_EXP 5
 949: PPUSH
 950: LD_INT 10
 952: PPUSH
 953: LD_INT 0
 955: PPUSH
 956: CALL_OW 49
// uc_nation = 1 ;
 960: LD_ADDR_OWVAR 21
 964: PUSH
 965: LD_INT 1
 967: ST_TO_ADDR
// uc_side = 4 ;
 968: LD_ADDR_OWVAR 20
 972: PUSH
 973: LD_INT 4
 975: ST_TO_ADDR
// hc_class := 3 ;
 976: LD_ADDR_OWVAR 28
 980: PUSH
 981: LD_INT 3
 983: ST_TO_ADDR
// hc_sex := sex_male ;
 984: LD_ADDR_OWVAR 27
 988: PUSH
 989: LD_INT 1
 991: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 992: LD_ADDR_OWVAR 33
 996: PUSH
 997: LD_STRING SecondCharsGal
 999: ST_TO_ADDR
// hc_face_number := 53 ;
1000: LD_ADDR_OWVAR 34
1004: PUSH
1005: LD_INT 53
1007: ST_TO_ADDR
// hc_name := Freddie Warner ;
1008: LD_ADDR_OWVAR 26
1012: PUSH
1013: LD_STRING Freddie Warner
1015: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1016: LD_ADDR_OWVAR 31
1020: PUSH
1021: LD_INT 1
1023: PUSH
1024: LD_INT 0
1026: PUSH
1027: LD_INT 3
1029: PUSH
1030: LD_INT 0
1032: PUSH
1033: EMPTY
1034: LIST
1035: LIST
1036: LIST
1037: LIST
1038: ST_TO_ADDR
// un = CreateHuman ;
1039: LD_ADDR_VAR 0 3
1043: PUSH
1044: CALL_OW 44
1048: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1049: LD_VAR 0 3
1053: PPUSH
1054: LD_INT 10
1056: PPUSH
1057: LD_INT 0
1059: PPUSH
1060: CALL_OW 49
// hc_class := 1 ;
1064: LD_ADDR_OWVAR 28
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// hc_sex := sex_male ;
1072: LD_ADDR_OWVAR 27
1076: PUSH
1077: LD_INT 1
1079: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1080: LD_ADDR_OWVAR 33
1084: PUSH
1085: LD_STRING SecondCharsGal
1087: ST_TO_ADDR
// hc_face_number := 56 ;
1088: LD_ADDR_OWVAR 34
1092: PUSH
1093: LD_INT 56
1095: ST_TO_ADDR
// hc_name := Mel Brennan ;
1096: LD_ADDR_OWVAR 26
1100: PUSH
1101: LD_STRING Mel Brennan
1103: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1104: LD_ADDR_OWVAR 31
1108: PUSH
1109: LD_INT 2
1111: PUSH
1112: LD_INT 1
1114: PUSH
1115: LD_INT 1
1117: PUSH
1118: LD_INT 0
1120: PUSH
1121: EMPTY
1122: LIST
1123: LIST
1124: LIST
1125: LIST
1126: ST_TO_ADDR
// un = CreateHuman ;
1127: LD_ADDR_VAR 0 3
1131: PUSH
1132: CALL_OW 44
1136: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1137: LD_VAR 0 3
1141: PPUSH
1142: LD_INT 10
1144: PPUSH
1145: LD_INT 0
1147: PPUSH
1148: CALL_OW 49
// hc_class := 1 ;
1152: LD_ADDR_OWVAR 28
1156: PUSH
1157: LD_INT 1
1159: ST_TO_ADDR
// hc_sex := sex_male ;
1160: LD_ADDR_OWVAR 27
1164: PUSH
1165: LD_INT 1
1167: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1168: LD_ADDR_OWVAR 33
1172: PUSH
1173: LD_STRING AmGalRemake
1175: ST_TO_ADDR
// hc_face_number := 5 ;
1176: LD_ADDR_OWVAR 34
1180: PUSH
1181: LD_INT 5
1183: ST_TO_ADDR
// hc_name := Bob Joplin ;
1184: LD_ADDR_OWVAR 26
1188: PUSH
1189: LD_STRING Bob Joplin
1191: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1192: LD_ADDR_OWVAR 31
1196: PUSH
1197: LD_INT 3
1199: PUSH
1200: LD_INT 1
1202: PUSH
1203: LD_INT 1
1205: PUSH
1206: LD_INT 1
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// un = CreateHuman ;
1215: LD_ADDR_VAR 0 3
1219: PUSH
1220: CALL_OW 44
1224: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1225: LD_VAR 0 3
1229: PPUSH
1230: LD_INT 10
1232: PPUSH
1233: LD_INT 0
1235: PPUSH
1236: CALL_OW 49
// hc_class := 3 ;
1240: LD_ADDR_OWVAR 28
1244: PUSH
1245: LD_INT 3
1247: ST_TO_ADDR
// hc_sex := sex_female ;
1248: LD_ADDR_OWVAR 27
1252: PUSH
1253: LD_INT 2
1255: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1256: LD_ADDR_OWVAR 33
1260: PUSH
1261: LD_STRING AmGalRemake
1263: ST_TO_ADDR
// hc_face_number := 4 ;
1264: LD_ADDR_OWVAR 34
1268: PUSH
1269: LD_INT 4
1271: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1272: LD_ADDR_OWVAR 26
1276: PUSH
1277: LD_STRING Elizabeth Whitney
1279: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1280: LD_ADDR_OWVAR 31
1284: PUSH
1285: LD_INT 2
1287: PUSH
1288: LD_INT 2
1290: PUSH
1291: LD_INT 4
1293: PUSH
1294: LD_INT 2
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: LIST
1301: LIST
1302: ST_TO_ADDR
// un = CreateHuman ;
1303: LD_ADDR_VAR 0 3
1307: PUSH
1308: CALL_OW 44
1312: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1313: LD_VAR 0 3
1317: PPUSH
1318: LD_INT 10
1320: PPUSH
1321: LD_INT 0
1323: PPUSH
1324: CALL_OW 49
// end ;
1328: LD_VAR 0 1
1332: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1333: LD_INT 0
1335: PPUSH
1336: PPUSH
1337: PPUSH
// uc_nation = 1 ;
1338: LD_ADDR_OWVAR 21
1342: PUSH
1343: LD_INT 1
1345: ST_TO_ADDR
// uc_side = 1 ;
1346: LD_ADDR_OWVAR 20
1350: PUSH
1351: LD_INT 1
1353: ST_TO_ADDR
// hc_class := 1 ;
1354: LD_ADDR_OWVAR 28
1358: PUSH
1359: LD_INT 1
1361: ST_TO_ADDR
// hc_sex := sex_male ;
1362: LD_ADDR_OWVAR 27
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1370: LD_ADDR_OWVAR 33
1374: PUSH
1375: LD_STRING SecondCharsGal
1377: ST_TO_ADDR
// hc_face_number := 59 ;
1378: LD_ADDR_OWVAR 34
1382: PUSH
1383: LD_INT 59
1385: ST_TO_ADDR
// hc_name := Max Gray ;
1386: LD_ADDR_OWVAR 26
1390: PUSH
1391: LD_STRING Max Gray
1393: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1394: LD_ADDR_OWVAR 31
1398: PUSH
1399: LD_INT 2
1401: PUSH
1402: LD_INT 1
1404: PUSH
1405: LD_INT 1
1407: PUSH
1408: LD_INT 0
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: LIST
1415: LIST
1416: ST_TO_ADDR
// un = CreateHuman ;
1417: LD_ADDR_VAR 0 4
1421: PUSH
1422: CALL_OW 44
1426: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1427: LD_VAR 0 4
1431: PPUSH
1432: LD_INT 11
1434: PPUSH
1435: LD_INT 0
1437: PPUSH
1438: CALL_OW 49
// hc_class := 1 ;
1442: LD_ADDR_OWVAR 28
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// hc_sex := sex_male ;
1450: LD_ADDR_OWVAR 27
1454: PUSH
1455: LD_INT 1
1457: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1458: LD_ADDR_OWVAR 33
1462: PUSH
1463: LD_STRING SecondCharsGal
1465: ST_TO_ADDR
// hc_face_number := 54 ;
1466: LD_ADDR_OWVAR 34
1470: PUSH
1471: LD_INT 54
1473: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1474: LD_ADDR_OWVAR 26
1478: PUSH
1479: LD_STRING Luigi Ghbellin
1481: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1482: LD_ADDR_OWVAR 31
1486: PUSH
1487: LD_INT 1
1489: PUSH
1490: LD_INT 0
1492: PUSH
1493: LD_INT 0
1495: PUSH
1496: LD_INT 1
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: LIST
1503: LIST
1504: ST_TO_ADDR
// un = CreateHuman ;
1505: LD_ADDR_VAR 0 4
1509: PUSH
1510: CALL_OW 44
1514: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1515: LD_VAR 0 4
1519: PPUSH
1520: LD_INT 11
1522: PPUSH
1523: LD_INT 0
1525: PPUSH
1526: CALL_OW 49
// hc_class := 3 ;
1530: LD_ADDR_OWVAR 28
1534: PUSH
1535: LD_INT 3
1537: ST_TO_ADDR
// hc_sex := sex_male ;
1538: LD_ADDR_OWVAR 27
1542: PUSH
1543: LD_INT 1
1545: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1546: LD_ADDR_OWVAR 33
1550: PUSH
1551: LD_STRING AmGalRemake
1553: ST_TO_ADDR
// hc_face_number := 6 ;
1554: LD_ADDR_OWVAR 34
1558: PUSH
1559: LD_INT 6
1561: ST_TO_ADDR
// hc_name := Leon Carter ;
1562: LD_ADDR_OWVAR 26
1566: PUSH
1567: LD_STRING Leon Carter
1569: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1570: LD_ADDR_OWVAR 31
1574: PUSH
1575: LD_INT 0
1577: PUSH
1578: LD_INT 1
1580: PUSH
1581: LD_INT 3
1583: PUSH
1584: LD_INT 0
1586: PUSH
1587: EMPTY
1588: LIST
1589: LIST
1590: LIST
1591: LIST
1592: ST_TO_ADDR
// un = CreateHuman ;
1593: LD_ADDR_VAR 0 4
1597: PUSH
1598: CALL_OW 44
1602: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1603: LD_VAR 0 4
1607: PPUSH
1608: LD_INT 11
1610: PPUSH
1611: LD_INT 0
1613: PPUSH
1614: CALL_OW 49
// if count = 4 then
1618: LD_VAR 0 1
1622: PUSH
1623: LD_INT 4
1625: EQUAL
1626: IFFALSE 1716
// begin hc_class := 1 ;
1628: LD_ADDR_OWVAR 28
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// hc_sex := sex_male ;
1636: LD_ADDR_OWVAR 27
1640: PUSH
1641: LD_INT 1
1643: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1644: LD_ADDR_OWVAR 33
1648: PUSH
1649: LD_STRING SecondCharsGal
1651: ST_TO_ADDR
// hc_face_number := 34 ;
1652: LD_ADDR_OWVAR 34
1656: PUSH
1657: LD_INT 34
1659: ST_TO_ADDR
// hc_name := Ian Hill ;
1660: LD_ADDR_OWVAR 26
1664: PUSH
1665: LD_STRING Ian Hill
1667: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1668: LD_ADDR_OWVAR 31
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 0
1678: PUSH
1679: LD_INT 1
1681: PUSH
1682: LD_INT 0
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: LIST
1689: LIST
1690: ST_TO_ADDR
// un = CreateHuman ;
1691: LD_ADDR_VAR 0 4
1695: PUSH
1696: CALL_OW 44
1700: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1701: LD_VAR 0 4
1705: PPUSH
1706: LD_INT 11
1708: PPUSH
1709: LD_INT 0
1711: PPUSH
1712: CALL_OW 49
// end ; if count = 5 then
1716: LD_VAR 0 1
1720: PUSH
1721: LD_INT 5
1723: EQUAL
1724: IFFALSE 1902
// begin hc_class := 1 ;
1726: LD_ADDR_OWVAR 28
1730: PUSH
1731: LD_INT 1
1733: ST_TO_ADDR
// hc_sex := sex_male ;
1734: LD_ADDR_OWVAR 27
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1742: LD_ADDR_OWVAR 33
1746: PUSH
1747: LD_STRING SecondCharsGal
1749: ST_TO_ADDR
// hc_face_number := 34 ;
1750: LD_ADDR_OWVAR 34
1754: PUSH
1755: LD_INT 34
1757: ST_TO_ADDR
// hc_name := Ian Hill ;
1758: LD_ADDR_OWVAR 26
1762: PUSH
1763: LD_STRING Ian Hill
1765: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1766: LD_ADDR_OWVAR 31
1770: PUSH
1771: LD_INT 2
1773: PUSH
1774: LD_INT 0
1776: PUSH
1777: LD_INT 1
1779: PUSH
1780: LD_INT 0
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// un = CreateHuman ;
1789: LD_ADDR_VAR 0 4
1793: PUSH
1794: CALL_OW 44
1798: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1799: LD_VAR 0 4
1803: PPUSH
1804: LD_INT 11
1806: PPUSH
1807: LD_INT 0
1809: PPUSH
1810: CALL_OW 49
// hc_class := 1 ;
1814: LD_ADDR_OWVAR 28
1818: PUSH
1819: LD_INT 1
1821: ST_TO_ADDR
// hc_sex := sex_female ;
1822: LD_ADDR_OWVAR 27
1826: PUSH
1827: LD_INT 2
1829: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1830: LD_ADDR_OWVAR 33
1834: PUSH
1835: LD_STRING SecondCharsGal
1837: ST_TO_ADDR
// hc_face_number := 41 ;
1838: LD_ADDR_OWVAR 34
1842: PUSH
1843: LD_INT 41
1845: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
1846: LD_ADDR_OWVAR 26
1850: PUSH
1851: LD_STRING Kate Wadsworth
1853: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1854: LD_ADDR_OWVAR 31
1858: PUSH
1859: LD_INT 2
1861: PUSH
1862: LD_INT 3
1864: PUSH
1865: LD_INT 1
1867: PUSH
1868: LD_INT 0
1870: PUSH
1871: EMPTY
1872: LIST
1873: LIST
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// un = CreateHuman ;
1877: LD_ADDR_VAR 0 4
1881: PUSH
1882: CALL_OW 44
1886: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1887: LD_VAR 0 4
1891: PPUSH
1892: LD_INT 11
1894: PPUSH
1895: LD_INT 0
1897: PPUSH
1898: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1902: LD_INT 11
1904: PPUSH
1905: LD_INT 22
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: PUSH
1915: LD_INT 21
1917: PUSH
1918: LD_INT 1
1920: PUSH
1921: EMPTY
1922: LIST
1923: LIST
1924: PUSH
1925: LD_INT 26
1927: PUSH
1928: LD_INT 1
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: PPUSH
1940: CALL_OW 70
1944: PUSH
1945: LD_INT 1
1947: ARRAY
1948: PPUSH
1949: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1953: LD_INT 11
1955: PPUSH
1956: LD_INT 22
1958: PUSH
1959: LD_INT 1
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 21
1968: PUSH
1969: LD_INT 1
1971: PUSH
1972: EMPTY
1973: LIST
1974: LIST
1975: PUSH
1976: LD_INT 26
1978: PUSH
1979: LD_INT 1
1981: PUSH
1982: EMPTY
1983: LIST
1984: LIST
1985: PUSH
1986: EMPTY
1987: LIST
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 70
1995: PUSH
1996: LD_INT 1
1998: ARRAY
1999: PPUSH
2000: LD_STRING D6-Sol3-1
2002: PPUSH
2003: CALL_OW 88
// end ; end_of_file
2007: LD_VAR 0 2
2011: RET
// export function PrepareRussianCommander ; begin
2012: LD_INT 0
2014: PPUSH
// uc_side = 3 ;
2015: LD_ADDR_OWVAR 20
2019: PUSH
2020: LD_INT 3
2022: ST_TO_ADDR
// uc_nation = 3 ;
2023: LD_ADDR_OWVAR 21
2027: PUSH
2028: LD_INT 3
2030: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2031: LD_ADDR_EXP 15
2035: PUSH
2036: LD_STRING Stolypin
2038: PPUSH
2039: CALL_OW 25
2043: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2044: LD_EXP 15
2048: PPUSH
2049: LD_INT 21
2051: PPUSH
2052: CALL_OW 52
// end ;
2056: LD_VAR 0 1
2060: RET
// export function PrepareRussianBase ; var i ; begin
2061: LD_INT 0
2063: PPUSH
2064: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2065: LD_INT 3
2067: PPUSH
2068: LD_INT 3
2070: PPUSH
2071: LD_INT 22
2073: PPUSH
2074: LD_EXP 16
2078: PPUSH
2079: LD_EXP 17
2083: PPUSH
2084: CALL_OW 12
2088: PPUSH
2089: LD_INT 1
2091: PPUSH
2092: LD_INT 2
2094: PPUSH
2095: CALL 3332 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2099: LD_INT 3
2101: PPUSH
2102: LD_INT 3
2104: PPUSH
2105: LD_INT 21
2107: PPUSH
2108: LD_EXP 16
2112: PPUSH
2113: LD_EXP 17
2117: PPUSH
2118: CALL_OW 12
2122: PPUSH
2123: LD_INT 2
2125: PPUSH
2126: LD_INT 3
2128: PPUSH
2129: CALL 3332 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2133: LD_INT 3
2135: PPUSH
2136: LD_INT 3
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_EXP 16
2146: PPUSH
2147: LD_EXP 17
2151: PPUSH
2152: CALL_OW 12
2156: PPUSH
2157: LD_INT 4
2159: PPUSH
2160: LD_INT 2
2162: PPUSH
2163: CALL 3332 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2167: LD_INT 3
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: LD_INT 24
2175: PPUSH
2176: LD_EXP 16
2180: PPUSH
2181: LD_EXP 17
2185: PPUSH
2186: CALL_OW 12
2190: PPUSH
2191: LD_INT 3
2193: PPUSH
2194: LD_INT 6
2196: PPUSH
2197: CALL 3332 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2201: LD_ADDR_VAR 0 2
2205: PUSH
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 30
2218: PUSH
2219: LD_INT 32
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: FOR_IN
2236: IFFALSE 2276
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2238: LD_INT 3
2240: PPUSH
2241: LD_INT 3
2243: PPUSH
2244: LD_VAR 0 2
2248: PPUSH
2249: LD_EXP 16
2253: PPUSH
2254: LD_EXP 17
2258: PPUSH
2259: CALL_OW 12
2263: PPUSH
2264: LD_INT 1
2266: PPUSH
2267: LD_INT 1
2269: PPUSH
2270: CALL 3332 0 6
2274: GO 2235
2276: POP
2277: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2278: LD_ADDR_VAR 0 2
2282: PUSH
2283: LD_INT 22
2285: PUSH
2286: LD_INT 3
2288: PUSH
2289: EMPTY
2290: LIST
2291: LIST
2292: PUSH
2293: LD_INT 30
2295: PUSH
2296: LD_INT 31
2298: PUSH
2299: EMPTY
2300: LIST
2301: LIST
2302: PUSH
2303: EMPTY
2304: LIST
2305: LIST
2306: PPUSH
2307: CALL_OW 69
2311: PUSH
2312: FOR_IN
2313: IFFALSE 2341
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2315: LD_EXP 16
2319: PPUSH
2320: LD_EXP 17
2324: PPUSH
2325: CALL_OW 12
2329: PPUSH
2330: LD_VAR 0 2
2334: PPUSH
2335: CALL 3442 0 2
2339: GO 2312
2341: POP
2342: POP
// end ;
2343: LD_VAR 0 1
2347: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2348: LD_INT 0
2350: PPUSH
2351: PPUSH
2352: PPUSH
2353: PPUSH
// uc_side = 6 ;
2354: LD_ADDR_OWVAR 20
2358: PUSH
2359: LD_INT 6
2361: ST_TO_ADDR
// uc_nation = 3 ;
2362: LD_ADDR_OWVAR 21
2366: PUSH
2367: LD_INT 3
2369: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2370: LD_ADDR_VAR 0 2
2374: PUSH
2375: DOUBLE
2376: LD_INT 1
2378: DEC
2379: ST_TO_ADDR
2380: LD_INT 2
2382: PUSH
2383: LD_INT 1
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: LIST
2393: PUSH
2394: LD_OWVAR 67
2398: ARRAY
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2561
// begin vc_engine = 1 ;
2403: LD_ADDR_OWVAR 39
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// vc_control = 1 ;
2411: LD_ADDR_OWVAR 38
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2419: LD_ADDR_OWVAR 40
2423: PUSH
2424: LD_INT 42
2426: PUSH
2427: LD_INT 42
2429: PUSH
2430: LD_INT 43
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: PUSH
2438: LD_OWVAR 67
2442: ARRAY
2443: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2444: LD_ADDR_OWVAR 37
2448: PUSH
2449: LD_INT 21
2451: PUSH
2452: LD_INT 22
2454: PUSH
2455: LD_INT 22
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: LIST
2462: PUSH
2463: LD_OWVAR 67
2467: ARRAY
2468: ST_TO_ADDR
// veh = CreateVehicle ;
2469: LD_ADDR_VAR 0 3
2473: PUSH
2474: CALL_OW 45
2478: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2479: LD_VAR 0 3
2483: PPUSH
2484: LD_INT 3
2486: PPUSH
2487: LD_INT 0
2489: PPUSH
2490: CALL_OW 49
// hc_gallery =  ;
2494: LD_ADDR_OWVAR 33
2498: PUSH
2499: LD_STRING 
2501: ST_TO_ADDR
// hc_name =  ;
2502: LD_ADDR_OWVAR 26
2506: PUSH
2507: LD_STRING 
2509: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2510: LD_INT 0
2512: PPUSH
2513: LD_INT 3
2515: PPUSH
2516: LD_EXP 16
2520: PPUSH
2521: LD_EXP 17
2525: PPUSH
2526: CALL_OW 12
2530: PPUSH
2531: CALL_OW 380
// un = CreateHuman ;
2535: LD_ADDR_VAR 0 4
2539: PUSH
2540: CALL_OW 44
2544: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2545: LD_VAR 0 4
2549: PPUSH
2550: LD_VAR 0 3
2554: PPUSH
2555: CALL_OW 52
// end ;
2559: GO 2400
2561: POP
2562: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2563: LD_INT 0
2565: PPUSH
2566: LD_INT 2
2568: PPUSH
2569: LD_EXP 16
2573: PPUSH
2574: LD_EXP 17
2578: PPUSH
2579: CALL_OW 12
2583: PUSH
2584: LD_INT 2
2586: PLUS
2587: PPUSH
2588: CALL_OW 380
// un = CreateHuman ;
2592: LD_ADDR_VAR 0 4
2596: PUSH
2597: CALL_OW 44
2601: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2602: LD_VAR 0 4
2606: PPUSH
2607: LD_INT 3
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2617: LD_INT 0
2619: PPUSH
2620: LD_INT 4
2622: PPUSH
2623: LD_EXP 16
2627: PPUSH
2628: LD_EXP 17
2632: PPUSH
2633: CALL_OW 12
2637: PUSH
2638: LD_INT 2
2640: PLUS
2641: PPUSH
2642: CALL_OW 380
// un = CreateHuman ;
2646: LD_ADDR_VAR 0 4
2650: PUSH
2651: CALL_OW 44
2655: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2656: LD_VAR 0 4
2660: PPUSH
2661: LD_INT 3
2663: PPUSH
2664: LD_INT 0
2666: PPUSH
2667: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
2671: LD_ADDR_VAR 0 2
2675: PUSH
2676: DOUBLE
2677: LD_INT 1
2679: DEC
2680: ST_TO_ADDR
2681: LD_INT 2
2683: PUSH
2684: LD_INT 3
2686: PUSH
2687: LD_INT 3
2689: PUSH
2690: EMPTY
2691: LIST
2692: LIST
2693: LIST
2694: PUSH
2695: LD_OWVAR 67
2699: ARRAY
2700: PUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_INT 3
2706: PPUSH
2707: CALL_OW 12
2711: PLUS
2712: PUSH
2713: FOR_TO
2714: IFFALSE 2784
// begin hc_gallery =  ;
2716: LD_ADDR_OWVAR 33
2720: PUSH
2721: LD_STRING 
2723: ST_TO_ADDR
// hc_name =  ;
2724: LD_ADDR_OWVAR 26
2728: PUSH
2729: LD_STRING 
2731: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2732: LD_INT 0
2734: PPUSH
2735: LD_INT 1
2737: PPUSH
2738: LD_EXP 16
2742: PPUSH
2743: LD_EXP 17
2747: PPUSH
2748: CALL_OW 12
2752: PPUSH
2753: CALL_OW 380
// un = CreateHuman ;
2757: LD_ADDR_VAR 0 4
2761: PUSH
2762: CALL_OW 44
2766: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2767: LD_VAR 0 4
2771: PPUSH
2772: LD_INT 3
2774: PPUSH
2775: LD_INT 0
2777: PPUSH
2778: CALL_OW 49
// end ;
2782: GO 2713
2784: POP
2785: POP
// vc_engine = 1 ;
2786: LD_ADDR_OWVAR 39
2790: PUSH
2791: LD_INT 1
2793: ST_TO_ADDR
// vc_control = 1 ;
2794: LD_ADDR_OWVAR 38
2798: PUSH
2799: LD_INT 1
2801: ST_TO_ADDR
// vc_weapon = 51 ;
2802: LD_ADDR_OWVAR 40
2806: PUSH
2807: LD_INT 51
2809: ST_TO_ADDR
// vc_chassis = 22 ;
2810: LD_ADDR_OWVAR 37
2814: PUSH
2815: LD_INT 22
2817: ST_TO_ADDR
// veh = CreateVehicle ;
2818: LD_ADDR_VAR 0 3
2822: PUSH
2823: CALL_OW 45
2827: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2828: LD_VAR 0 3
2832: PPUSH
2833: LD_INT 3
2835: PPUSH
2836: LD_INT 0
2838: PPUSH
2839: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2843: LD_VAR 0 3
2847: PPUSH
2848: LD_INT 1
2850: PPUSH
2851: LD_INT 100
2853: PPUSH
2854: CALL_OW 290
// hc_gallery =  ;
2858: LD_ADDR_OWVAR 33
2862: PUSH
2863: LD_STRING 
2865: ST_TO_ADDR
// hc_name =  ;
2866: LD_ADDR_OWVAR 26
2870: PUSH
2871: LD_STRING 
2873: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2874: LD_INT 0
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_EXP 16
2884: PPUSH
2885: LD_EXP 17
2889: PPUSH
2890: CALL_OW 12
2894: PPUSH
2895: CALL_OW 380
// un = CreateHuman ;
2899: LD_ADDR_VAR 0 4
2903: PUSH
2904: CALL_OW 44
2908: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2909: LD_VAR 0 4
2913: PPUSH
2914: LD_VAR 0 3
2918: PPUSH
2919: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2923: LD_ADDR_VAR 0 2
2927: PUSH
2928: LD_INT 22
2930: PUSH
2931: LD_INT 6
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: LD_INT 1
2940: PUSH
2941: LD_INT 3
2943: PUSH
2944: LD_INT 25
2946: PUSH
2947: LD_INT 2
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: EMPTY
2955: LIST
2956: LIST
2957: PUSH
2958: LD_INT 3
2960: PUSH
2961: LD_INT 25
2963: PUSH
2964: LD_INT 4
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: EMPTY
2972: LIST
2973: LIST
2974: PUSH
2975: EMPTY
2976: LIST
2977: LIST
2978: LIST
2979: PUSH
2980: EMPTY
2981: LIST
2982: LIST
2983: PPUSH
2984: CALL_OW 69
2988: PUSH
2989: FOR_IN
2990: IFFALSE 3009
// ComAgressiveMove ( i , 45 , 46 ) ;
2992: LD_VAR 0 2
2996: PPUSH
2997: LD_INT 45
2999: PPUSH
3000: LD_INT 46
3002: PPUSH
3003: CALL_OW 114
3007: GO 2989
3009: POP
3010: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3011: LD_ADDR_VAR 0 2
3015: PUSH
3016: LD_INT 22
3018: PUSH
3019: LD_INT 6
3021: PUSH
3022: EMPTY
3023: LIST
3024: LIST
3025: PUSH
3026: LD_INT 25
3028: PUSH
3029: LD_INT 2
3031: PUSH
3032: EMPTY
3033: LIST
3034: LIST
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: FOR_IN
3046: IFFALSE 3077
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3048: LD_ADDR_EXP 19
3052: PUSH
3053: LD_VAR 0 2
3057: PPUSH
3058: LD_INT 0
3060: PPUSH
3061: LD_INT 48
3063: PPUSH
3064: LD_INT 55
3066: PPUSH
3067: LD_INT 5
3069: PPUSH
3070: CALL_OW 145
3074: ST_TO_ADDR
3075: GO 3045
3077: POP
3078: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3079: LD_ADDR_VAR 0 2
3083: PUSH
3084: LD_INT 22
3086: PUSH
3087: LD_INT 6
3089: PUSH
3090: EMPTY
3091: LIST
3092: LIST
3093: PUSH
3094: LD_INT 25
3096: PUSH
3097: LD_INT 4
3099: PUSH
3100: EMPTY
3101: LIST
3102: LIST
3103: PUSH
3104: EMPTY
3105: LIST
3106: LIST
3107: PPUSH
3108: CALL_OW 69
3112: PUSH
3113: FOR_IN
3114: IFFALSE 3133
// ComMoveXY ( i , 39 , 55 ) ;
3116: LD_VAR 0 2
3120: PPUSH
3121: LD_INT 39
3123: PPUSH
3124: LD_INT 55
3126: PPUSH
3127: CALL_OW 111
3131: GO 3113
3133: POP
3134: POP
// end ;
3135: LD_VAR 0 1
3139: RET
// export function PrepareFirstAttack ; var i , un ; begin
3140: LD_INT 0
3142: PPUSH
3143: PPUSH
3144: PPUSH
// uc_side = 5 ;
3145: LD_ADDR_OWVAR 20
3149: PUSH
3150: LD_INT 5
3152: ST_TO_ADDR
// uc_nation = 3 ;
3153: LD_ADDR_OWVAR 21
3157: PUSH
3158: LD_INT 3
3160: ST_TO_ADDR
// for i := 1 to 4 do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 1
3169: DEC
3170: ST_TO_ADDR
3171: LD_INT 4
3173: PUSH
3174: FOR_TO
3175: IFFALSE 3260
// begin hc_gallery =  ;
3177: LD_ADDR_OWVAR 33
3181: PUSH
3182: LD_STRING 
3184: ST_TO_ADDR
// hc_name =  ;
3185: LD_ADDR_OWVAR 26
3189: PUSH
3190: LD_STRING 
3192: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 1
3198: PPUSH
3199: LD_EXP 16
3203: PPUSH
3204: LD_EXP 17
3208: PPUSH
3209: CALL_OW 12
3213: PPUSH
3214: CALL_OW 380
// un = CreateHuman ;
3218: LD_ADDR_VAR 0 3
3222: PUSH
3223: CALL_OW 44
3227: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3228: LD_VAR 0 3
3232: PPUSH
3233: LD_INT 4
3235: PPUSH
3236: LD_INT 0
3238: PPUSH
3239: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3243: LD_VAR 0 3
3247: PPUSH
3248: LD_INT 48
3250: PPUSH
3251: LD_INT 14
3253: PPUSH
3254: CALL_OW 114
// end ;
3258: GO 3174
3260: POP
3261: POP
// firstRussianAttack = 1 ;
3262: LD_ADDR_EXP 21
3266: PUSH
3267: LD_INT 1
3269: ST_TO_ADDR
// end ; end_of_file
3270: LD_VAR 0 1
3274: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3275: LD_INT 0
3277: PPUSH
3278: PPUSH
// if exist_mode then
3279: LD_VAR 0 2
3283: IFFALSE 3302
// begin unit := CreateCharacter ( ident ) ;
3285: LD_ADDR_VAR 0 4
3289: PUSH
3290: LD_VAR 0 1
3294: PPUSH
3295: CALL_OW 34
3299: ST_TO_ADDR
// end else
3300: GO 3317
// begin unit := NewCharacter ( ident ) ;
3302: LD_ADDR_VAR 0 4
3306: PUSH
3307: LD_VAR 0 1
3311: PPUSH
3312: CALL_OW 25
3316: ST_TO_ADDR
// end ; result := unit ;
3317: LD_ADDR_VAR 0 3
3321: PUSH
3322: LD_VAR 0 4
3326: ST_TO_ADDR
// end ;
3327: LD_VAR 0 3
3331: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
3337: PPUSH
// for i = 1 to count do
3338: LD_ADDR_VAR 0 8
3342: PUSH
3343: DOUBLE
3344: LD_INT 1
3346: DEC
3347: ST_TO_ADDR
3348: LD_VAR 0 6
3352: PUSH
3353: FOR_TO
3354: IFFALSE 3435
// begin uc_side = side ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_VAR 0 1
3365: ST_TO_ADDR
// uc_nation = nation ;
3366: LD_ADDR_OWVAR 21
3370: PUSH
3371: LD_VAR 0 2
3375: ST_TO_ADDR
// hc_gallery =  ;
3376: LD_ADDR_OWVAR 33
3380: PUSH
3381: LD_STRING 
3383: ST_TO_ADDR
// hc_name =  ;
3384: LD_ADDR_OWVAR 26
3388: PUSH
3389: LD_STRING 
3391: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3392: LD_INT 0
3394: PPUSH
3395: LD_VAR 0 5
3399: PPUSH
3400: LD_VAR 0 4
3404: PPUSH
3405: CALL_OW 380
// un = CreateHuman ;
3409: LD_ADDR_VAR 0 10
3413: PUSH
3414: CALL_OW 44
3418: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3419: LD_VAR 0 10
3423: PPUSH
3424: LD_VAR 0 3
3428: PPUSH
3429: CALL_OW 52
// end ;
3433: GO 3353
3435: POP
3436: POP
// end ;
3437: LD_VAR 0 7
3441: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3442: LD_INT 0
3444: PPUSH
3445: PPUSH
3446: PPUSH
// uc_side := GetSide ( b ) ;
3447: LD_ADDR_OWVAR 20
3451: PUSH
3452: LD_VAR 0 2
3456: PPUSH
3457: CALL_OW 255
3461: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3462: LD_ADDR_OWVAR 21
3466: PUSH
3467: LD_VAR 0 2
3471: PPUSH
3472: CALL_OW 248
3476: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3477: LD_INT 0
3479: PPUSH
3480: LD_INT 1
3482: PPUSH
3483: LD_VAR 0 1
3487: PPUSH
3488: CALL_OW 380
// un = CreateHuman ;
3492: LD_ADDR_VAR 0 4
3496: PUSH
3497: CALL_OW 44
3501: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3502: LD_ADDR_VAR 0 5
3506: PUSH
3507: LD_VAR 0 2
3511: PPUSH
3512: CALL_OW 254
3516: PUSH
3517: LD_INT 3
3519: MINUS
3520: ST_TO_ADDR
// if dir < 0 then
3521: LD_VAR 0 5
3525: PUSH
3526: LD_INT 0
3528: LESS
3529: IFFALSE 3545
// dir := 6 + dir ;
3531: LD_ADDR_VAR 0 5
3535: PUSH
3536: LD_INT 6
3538: PUSH
3539: LD_VAR 0 5
3543: PLUS
3544: ST_TO_ADDR
// SetDir ( un , dir ) ;
3545: LD_VAR 0 4
3549: PPUSH
3550: LD_VAR 0 5
3554: PPUSH
3555: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3559: LD_VAR 0 4
3563: PPUSH
3564: LD_VAR 0 2
3568: PPUSH
3569: CALL_OW 52
// end ;
3573: LD_VAR 0 3
3577: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3578: LD_INT 0
3580: PPUSH
3581: PPUSH
3582: PPUSH
// rnd = rand ( 1 , characters ) ;
3583: LD_ADDR_VAR 0 6
3587: PUSH
3588: LD_INT 1
3590: PPUSH
3591: LD_VAR 0 1
3595: PPUSH
3596: CALL_OW 12
3600: ST_TO_ADDR
// for i = 1 to characters do
3601: LD_ADDR_VAR 0 5
3605: PUSH
3606: DOUBLE
3607: LD_INT 1
3609: DEC
3610: ST_TO_ADDR
3611: LD_VAR 0 1
3615: PUSH
3616: FOR_TO
3617: IFFALSE 3727
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3619: LD_VAR 0 5
3623: PUSH
3624: LD_VAR 0 6
3628: EQUAL
3629: PUSH
3630: LD_VAR 0 1
3634: PUSH
3635: LD_VAR 0 5
3639: ARRAY
3640: PPUSH
3641: CALL_OW 258
3645: PUSH
3646: LD_INT 1
3648: EQUAL
3649: AND
3650: IFFALSE 3672
// Say ( characters [ i ] , dialogMID ) ;
3652: LD_VAR 0 1
3656: PUSH
3657: LD_VAR 0 5
3661: ARRAY
3662: PPUSH
3663: LD_VAR 0 2
3667: PPUSH
3668: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3672: LD_VAR 0 5
3676: PUSH
3677: LD_VAR 0 6
3681: EQUAL
3682: PUSH
3683: LD_VAR 0 1
3687: PUSH
3688: LD_VAR 0 5
3692: ARRAY
3693: PPUSH
3694: CALL_OW 258
3698: PUSH
3699: LD_INT 2
3701: EQUAL
3702: AND
3703: IFFALSE 3725
// Say ( characters [ i ] , dialogFID ) ;
3705: LD_VAR 0 1
3709: PUSH
3710: LD_VAR 0 5
3714: ARRAY
3715: PPUSH
3716: LD_VAR 0 3
3720: PPUSH
3721: CALL_OW 88
// end ;
3725: GO 3616
3727: POP
3728: POP
// end ;
3729: LD_VAR 0 4
3733: RET
// export function PrepareDifficulty ; begin
3734: LD_INT 0
3736: PPUSH
// if Difficulty = 1 then
3737: LD_OWVAR 67
3741: PUSH
3742: LD_INT 1
3744: EQUAL
3745: IFFALSE 3763
// begin RuSoldMinLevel = 0 ;
3747: LD_ADDR_EXP 16
3751: PUSH
3752: LD_INT 0
3754: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3755: LD_ADDR_EXP 17
3759: PUSH
3760: LD_INT 2
3762: ST_TO_ADDR
// end ; if Difficulty = 2 then
3763: LD_OWVAR 67
3767: PUSH
3768: LD_INT 2
3770: EQUAL
3771: IFFALSE 3809
// begin RuSoldMinLevel = 1 ;
3773: LD_ADDR_EXP 16
3777: PUSH
3778: LD_INT 1
3780: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3781: LD_ADDR_EXP 17
3785: PUSH
3786: LD_INT 2
3788: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3789: LD_INT 14
3791: PPUSH
3792: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3796: LD_INT 51
3798: PPUSH
3799: LD_INT 3
3801: PPUSH
3802: LD_INT 1
3804: PPUSH
3805: CALL_OW 322
// end ; if Difficulty = 3 then
3809: LD_OWVAR 67
3813: PUSH
3814: LD_INT 3
3816: EQUAL
3817: IFFALSE 3885
// begin RuSoldMinLevel = 1 ;
3819: LD_ADDR_EXP 16
3823: PUSH
3824: LD_INT 1
3826: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3827: LD_ADDR_EXP 17
3831: PUSH
3832: LD_INT 3
3834: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3835: LD_INT 13
3837: PPUSH
3838: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3842: LD_INT 14
3844: PPUSH
3845: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3849: LD_INT 51
3851: PPUSH
3852: LD_INT 3
3854: PPUSH
3855: LD_INT 1
3857: PPUSH
3858: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3862: LD_INT 52
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 1
3870: PPUSH
3871: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3875: LD_INT 25
3877: PPUSH
3878: LD_INT 44
3880: PPUSH
3881: CALL_OW 431
// end ; end ;
3885: LD_VAR 0 1
3889: RET
// export function EnergyDialog ; begin
3890: LD_INT 0
3892: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3893: LD_INT 46
3895: PPUSH
3896: LD_INT 1
3898: PPUSH
3899: CALL_OW 321
3903: PUSH
3904: LD_INT 1
3906: EQUAL
3907: PUSH
3908: LD_INT 35
3910: PPUSH
3911: LD_INT 1
3913: PPUSH
3914: CALL_OW 321
3918: PUSH
3919: LD_INT 1
3921: EQUAL
3922: AND
3923: IFFALSE 3947
// begin Say ( JMM , D9c-JMM-1 ) ;
3925: LD_EXP 1
3929: PPUSH
3930: LD_STRING D9c-JMM-1
3932: PPUSH
3933: CALL_OW 88
// energyVDialog = 1 ;
3937: LD_ADDR_EXP 31
3941: PUSH
3942: LD_INT 1
3944: ST_TO_ADDR
// end else
3945: GO 4101
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3947: LD_INT 35
3949: PPUSH
3950: LD_INT 1
3952: PPUSH
3953: CALL_OW 321
3957: PUSH
3958: LD_INT 2
3960: EQUAL
3961: PUSH
3962: LD_EXP 31
3966: PUSH
3967: LD_INT 0
3969: EQUAL
3970: AND
3971: IFFALSE 3993
// begin Say ( JMM , D9c-JMM-1a ) ;
3973: LD_EXP 1
3977: PPUSH
3978: LD_STRING D9c-JMM-1a
3980: PPUSH
3981: CALL_OW 88
// energyVDialog = 1 ;
3985: LD_ADDR_EXP 31
3989: PUSH
3990: LD_INT 1
3992: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
3993: LD_INT 46
3995: PPUSH
3996: LD_INT 1
3998: PPUSH
3999: CALL_OW 321
4003: PUSH
4004: LD_INT 2
4006: EQUAL
4007: PUSH
4008: LD_EXP 31
4012: PUSH
4013: LD_INT 0
4015: EQUAL
4016: AND
4017: IFFALSE 4039
// begin Say ( JMM , D9c-JMM-1b ) ;
4019: LD_EXP 1
4023: PPUSH
4024: LD_STRING D9c-JMM-1b
4026: PPUSH
4027: CALL_OW 88
// energyVDialog = 1 ;
4031: LD_ADDR_EXP 31
4035: PUSH
4036: LD_INT 1
4038: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4039: LD_INT 46
4041: PPUSH
4042: LD_INT 1
4044: PPUSH
4045: CALL_OW 321
4049: PUSH
4050: LD_INT 2
4052: EQUAL
4053: PUSH
4054: LD_INT 21
4056: PPUSH
4057: LD_INT 1
4059: PPUSH
4060: CALL_OW 321
4064: PUSH
4065: LD_INT 2
4067: EQUAL
4068: AND
4069: PUSH
4070: LD_EXP 31
4074: PUSH
4075: LD_INT 0
4077: EQUAL
4078: AND
4079: IFFALSE 4101
// begin Say ( JMM , D9c-JMM-1c ) ;
4081: LD_EXP 1
4085: PPUSH
4086: LD_STRING D9c-JMM-1c
4088: PPUSH
4089: CALL_OW 88
// energyVDialog = 1 ;
4093: LD_ADDR_EXP 31
4097: PUSH
4098: LD_INT 1
4100: ST_TO_ADDR
// end ; end ; end ;
4101: LD_VAR 0 1
4105: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4106: LD_INT 0
4108: PPUSH
4109: PPUSH
4110: PPUSH
4111: PPUSH
4112: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4113: LD_VAR 0 1
4117: NOT
4118: PUSH
4119: LD_VAR 0 1
4123: PPUSH
4124: CALL_OW 256
4128: PUSH
4129: LD_INT 250
4131: LESS
4132: OR
4133: PUSH
4134: LD_VAR 0 1
4138: PPUSH
4139: CALL_OW 314
4143: PUSH
4144: LD_VAR 0 1
4148: PPUSH
4149: CALL_OW 261
4153: PUSH
4154: LD_INT 20
4156: GREATER
4157: AND
4158: OR
4159: IFFALSE 4163
// exit ;
4161: GO 4528
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4163: LD_VAR 0 1
4167: PPUSH
4168: CALL_OW 261
4172: PUSH
4173: LD_INT 20
4175: LESS
4176: PUSH
4177: LD_VAR 0 1
4181: PPUSH
4182: CALL_OW 110
4186: PUSH
4187: LD_INT 21
4189: EQUAL
4190: NOT
4191: AND
4192: IFFALSE 4219
// begin ComStop ( bulldozer ) ;
4194: LD_VAR 0 1
4198: PPUSH
4199: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4203: LD_VAR 0 1
4207: PPUSH
4208: LD_INT 21
4210: PPUSH
4211: CALL_OW 109
// exit ;
4215: GO 4528
// end else
4217: GO 4246
// if GetFuel ( bulldozer ) > 20 then
4219: LD_VAR 0 1
4223: PPUSH
4224: CALL_OW 261
4228: PUSH
4229: LD_INT 20
4231: GREATER
4232: IFFALSE 4246
// SetTag ( bulldozer , 0 ) ;
4234: LD_VAR 0 1
4238: PPUSH
4239: LD_INT 0
4241: PPUSH
4242: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4246: LD_ADDR_VAR 0 5
4250: PUSH
4251: LD_VAR 0 2
4255: PPUSH
4256: CALL_OW 353
4260: ST_TO_ADDR
// tmp := [ ] ;
4261: LD_ADDR_VAR 0 6
4265: PUSH
4266: EMPTY
4267: ST_TO_ADDR
// for i = 1 to list do
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: DOUBLE
4274: LD_INT 1
4276: DEC
4277: ST_TO_ADDR
4278: LD_VAR 0 5
4282: PUSH
4283: FOR_TO
4284: IFFALSE 4382
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4286: LD_VAR 0 5
4290: PUSH
4291: LD_VAR 0 4
4295: ARRAY
4296: PUSH
4297: LD_INT 1
4299: ARRAY
4300: PPUSH
4301: LD_VAR 0 5
4305: PUSH
4306: LD_VAR 0 4
4310: ARRAY
4311: PUSH
4312: LD_INT 2
4314: ARRAY
4315: PPUSH
4316: CALL_OW 554
4320: IFFALSE 4380
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4322: LD_ADDR_VAR 0 6
4326: PUSH
4327: LD_VAR 0 6
4331: PPUSH
4332: LD_VAR 0 6
4336: PUSH
4337: LD_INT 1
4339: PLUS
4340: PPUSH
4341: LD_VAR 0 5
4345: PUSH
4346: LD_VAR 0 4
4350: ARRAY
4351: PUSH
4352: LD_INT 1
4354: ARRAY
4355: PUSH
4356: LD_VAR 0 5
4360: PUSH
4361: LD_VAR 0 4
4365: ARRAY
4366: PUSH
4367: LD_INT 2
4369: ARRAY
4370: PUSH
4371: EMPTY
4372: LIST
4373: LIST
4374: PPUSH
4375: CALL_OW 1
4379: ST_TO_ADDR
// end ;
4380: GO 4283
4382: POP
4383: POP
// ComStop ( bulldozer ) ;
4384: LD_VAR 0 1
4388: PPUSH
4389: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4393: LD_ADDR_VAR 0 7
4397: PUSH
4398: LD_VAR 0 1
4402: PPUSH
4403: CALL_OW 250
4407: PUSH
4408: LD_VAR 0 1
4412: PPUSH
4413: CALL_OW 251
4417: PUSH
4418: EMPTY
4419: LIST
4420: LIST
4421: ST_TO_ADDR
// for i = tmp downto 1 do
4422: LD_ADDR_VAR 0 4
4426: PUSH
4427: DOUBLE
4428: LD_VAR 0 6
4432: INC
4433: ST_TO_ADDR
4434: LD_INT 1
4436: PUSH
4437: FOR_DOWNTO
4438: IFFALSE 4526
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4440: LD_ADDR_VAR 0 7
4444: PUSH
4445: LD_VAR 0 7
4449: PUSH
4450: LD_INT 1
4452: ARRAY
4453: PPUSH
4454: LD_VAR 0 7
4458: PUSH
4459: LD_INT 2
4461: ARRAY
4462: PPUSH
4463: LD_VAR 0 6
4467: PPUSH
4468: CALL 4629 0 3
4472: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4473: LD_VAR 0 1
4477: PPUSH
4478: LD_VAR 0 7
4482: PUSH
4483: LD_INT 1
4485: ARRAY
4486: PPUSH
4487: LD_VAR 0 7
4491: PUSH
4492: LD_INT 2
4494: ARRAY
4495: PPUSH
4496: CALL 4533 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4500: LD_ADDR_VAR 0 6
4504: PUSH
4505: LD_VAR 0 6
4509: PPUSH
4510: LD_VAR 0 7
4514: PUSH
4515: LD_INT 3
4517: ARRAY
4518: PPUSH
4519: CALL_OW 3
4523: ST_TO_ADDR
// end ;
4524: GO 4437
4526: POP
4527: POP
// end ;
4528: LD_VAR 0 3
4532: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4533: LD_INT 0
4535: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4536: LD_VAR 0 2
4540: PPUSH
4541: LD_VAR 0 3
4545: PPUSH
4546: CALL_OW 351
4550: PUSH
4551: LD_VAR 0 2
4555: PPUSH
4556: LD_VAR 0 3
4560: PPUSH
4561: CALL_OW 554
4565: AND
4566: PUSH
4567: LD_VAR 0 2
4571: PPUSH
4572: LD_VAR 0 3
4576: PPUSH
4577: CALL_OW 488
4581: AND
4582: PUSH
4583: LD_VAR 0 2
4587: PPUSH
4588: LD_VAR 0 3
4592: PPUSH
4593: CALL_OW 428
4597: PUSH
4598: LD_INT 1
4600: NEG
4601: EQUAL
4602: AND
4603: IFFALSE 4624
// AddComMoveXY ( bulldozer , x , y ) ;
4605: LD_VAR 0 1
4609: PPUSH
4610: LD_VAR 0 2
4614: PPUSH
4615: LD_VAR 0 3
4619: PPUSH
4620: CALL_OW 171
// end ;
4624: LD_VAR 0 4
4628: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
4629: LD_INT 0
4631: PPUSH
4632: PPUSH
4633: PPUSH
4634: PPUSH
4635: PPUSH
4636: PPUSH
4637: PPUSH
// dist := 99999 ;
4638: LD_ADDR_VAR 0 6
4642: PUSH
4643: LD_INT 99999
4645: ST_TO_ADDR
// for i = 1 to list do
4646: LD_ADDR_VAR 0 5
4650: PUSH
4651: DOUBLE
4652: LD_INT 1
4654: DEC
4655: ST_TO_ADDR
4656: LD_VAR 0 3
4660: PUSH
4661: FOR_TO
4662: IFFALSE 4800
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
4664: LD_ADDR_VAR 0 7
4668: PUSH
4669: LD_VAR 0 1
4673: PPUSH
4674: LD_VAR 0 2
4678: PPUSH
4679: LD_VAR 0 3
4683: PUSH
4684: LD_VAR 0 5
4688: ARRAY
4689: PUSH
4690: LD_INT 1
4692: ARRAY
4693: PPUSH
4694: LD_VAR 0 3
4698: PUSH
4699: LD_VAR 0 5
4703: ARRAY
4704: PUSH
4705: LD_INT 2
4707: ARRAY
4708: PPUSH
4709: CALL_OW 298
4713: ST_TO_ADDR
// if d = 0 then
4714: LD_VAR 0 7
4718: PUSH
4719: LD_INT 0
4721: EQUAL
4722: IFFALSE 4726
// continue ;
4724: GO 4661
// if d < dist then
4726: LD_VAR 0 7
4730: PUSH
4731: LD_VAR 0 6
4735: LESS
4736: IFFALSE 4798
// begin _x := list [ i ] [ 1 ] ;
4738: LD_ADDR_VAR 0 8
4742: PUSH
4743: LD_VAR 0 3
4747: PUSH
4748: LD_VAR 0 5
4752: ARRAY
4753: PUSH
4754: LD_INT 1
4756: ARRAY
4757: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
4758: LD_ADDR_VAR 0 9
4762: PUSH
4763: LD_VAR 0 3
4767: PUSH
4768: LD_VAR 0 5
4772: ARRAY
4773: PUSH
4774: LD_INT 2
4776: ARRAY
4777: ST_TO_ADDR
// _i := i ;
4778: LD_ADDR_VAR 0 10
4782: PUSH
4783: LD_VAR 0 5
4787: ST_TO_ADDR
// dist := d ;
4788: LD_ADDR_VAR 0 6
4792: PUSH
4793: LD_VAR 0 7
4797: ST_TO_ADDR
// end ; end ;
4798: GO 4661
4800: POP
4801: POP
// result := [ _x , _y , _i , dist ] ;
4802: LD_ADDR_VAR 0 4
4806: PUSH
4807: LD_VAR 0 8
4811: PUSH
4812: LD_VAR 0 9
4816: PUSH
4817: LD_VAR 0 10
4821: PUSH
4822: LD_VAR 0 6
4826: PUSH
4827: EMPTY
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: ST_TO_ADDR
// end ;
4833: LD_VAR 0 4
4837: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4838: LD_INT 0
4840: PPUSH
4841: PPUSH
4842: PPUSH
4843: PPUSH
// for i = 1 to 72 do
4844: LD_ADDR_VAR 0 5
4848: PUSH
4849: DOUBLE
4850: LD_INT 1
4852: DEC
4853: ST_TO_ADDR
4854: LD_INT 72
4856: PUSH
4857: FOR_TO
4858: IFFALSE 4916
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4860: LD_VAR 0 5
4864: PPUSH
4865: LD_VAR 0 1
4869: PPUSH
4870: CALL_OW 321
4874: PUSH
4875: LD_INT 1
4877: EQUAL
4878: PUSH
4879: LD_VAR 0 5
4883: PPUSH
4884: LD_VAR 0 3
4888: PPUSH
4889: CALL_OW 482
4893: PUSH
4894: LD_INT 1
4896: EQUAL
4897: AND
4898: IFFALSE 4914
// AddComResearch ( lab , i ) ;
4900: LD_VAR 0 2
4904: PPUSH
4905: LD_VAR 0 5
4909: PPUSH
4910: CALL_OW 184
4914: GO 4857
4916: POP
4917: POP
// end ;
4918: LD_VAR 0 4
4922: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4923: LD_INT 0
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4930: LD_ADDR_VAR 0 6
4934: PUSH
4935: LD_INT 22
4937: PUSH
4938: LD_VAR 0 1
4942: PUSH
4943: EMPTY
4944: LIST
4945: LIST
4946: PUSH
4947: LD_INT 25
4949: PUSH
4950: LD_INT 2
4952: PUSH
4953: EMPTY
4954: LIST
4955: LIST
4956: PUSH
4957: LD_INT 24
4959: PUSH
4960: LD_INT 1000
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4977: LD_ADDR_VAR 0 4
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_VAR 0 1
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: PUSH
4994: LD_INT 21
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 3
5006: PUSH
5007: LD_INT 24
5009: PUSH
5010: LD_INT 1000
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PUSH
5021: EMPTY
5022: LIST
5023: LIST
5024: LIST
5025: PUSH
5026: EMPTY
5027: LIST
5028: PPUSH
5029: CALL_OW 69
5033: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5034: LD_VAR 0 4
5038: PUSH
5039: LD_INT 0
5041: GREATER
5042: PUSH
5043: LD_VAR 0 6
5047: PUSH
5048: LD_INT 0
5050: GREATER
5051: AND
5052: IFFALSE 5118
// begin for i in engineerOk_list do
5054: LD_ADDR_VAR 0 5
5058: PUSH
5059: LD_VAR 0 6
5063: PUSH
5064: FOR_IN
5065: IFFALSE 5116
// begin for j in buildings_list do
5067: LD_ADDR_VAR 0 7
5071: PUSH
5072: LD_VAR 0 4
5076: PUSH
5077: FOR_IN
5078: IFFALSE 5112
// begin AddComExitBuilding ( i ) ;
5080: LD_VAR 0 5
5084: PPUSH
5085: CALL_OW 182
// wait ( 0 0$1 ) ;
5089: LD_INT 35
5091: PPUSH
5092: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5096: LD_VAR 0 5
5100: PPUSH
5101: LD_VAR 0 7
5105: PPUSH
5106: CALL_OW 190
// end ;
5110: GO 5077
5112: POP
5113: POP
// end ;
5114: GO 5064
5116: POP
5117: POP
// end ; if buildings_list = 0 then
5118: LD_VAR 0 4
5122: PUSH
5123: LD_INT 0
5125: EQUAL
5126: IFFALSE 5159
// begin for i in engineerOK_list do
5128: LD_ADDR_VAR 0 5
5132: PUSH
5133: LD_VAR 0 6
5137: PUSH
5138: FOR_IN
5139: IFFALSE 5157
// begin ComEnterUnit ( i , building ) ;
5141: LD_VAR 0 5
5145: PPUSH
5146: LD_VAR 0 2
5150: PPUSH
5151: CALL_OW 120
// end ;
5155: GO 5138
5157: POP
5158: POP
// end ; end ;
5159: LD_VAR 0 3
5163: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5164: LD_INT 0
5166: PPUSH
5167: PPUSH
5168: PPUSH
5169: PPUSH
5170: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5171: LD_ADDR_VAR 0 6
5175: PUSH
5176: LD_INT 22
5178: PUSH
5179: LD_VAR 0 1
5183: PUSH
5184: EMPTY
5185: LIST
5186: LIST
5187: PUSH
5188: LD_INT 25
5190: PUSH
5191: LD_INT 4
5193: PUSH
5194: EMPTY
5195: LIST
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL_OW 69
5206: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5207: LD_ADDR_VAR 0 9
5211: PUSH
5212: LD_VAR 0 3
5216: PPUSH
5217: LD_INT 22
5219: PUSH
5220: LD_VAR 0 1
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PUSH
5229: LD_INT 21
5231: PUSH
5232: LD_INT 1
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: PUSH
5239: LD_INT 3
5241: PUSH
5242: LD_INT 24
5244: PUSH
5245: LD_INT 750
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: PUSH
5256: EMPTY
5257: LIST
5258: LIST
5259: LIST
5260: PPUSH
5261: CALL_OW 70
5265: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5266: LD_VAR 0 9
5270: PUSH
5271: LD_INT 0
5273: GREATER
5274: PUSH
5275: LD_VAR 0 6
5279: PUSH
5280: LD_INT 0
5282: GREATER
5283: AND
5284: IFFALSE 5411
// begin for i = 1 to damageUnits do
5286: LD_ADDR_VAR 0 7
5290: PUSH
5291: DOUBLE
5292: LD_INT 1
5294: DEC
5295: ST_TO_ADDR
5296: LD_VAR 0 9
5300: PUSH
5301: FOR_TO
5302: IFFALSE 5326
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5304: LD_VAR 0 9
5308: PUSH
5309: LD_VAR 0 7
5313: ARRAY
5314: PPUSH
5315: LD_VAR 0 2
5319: PPUSH
5320: CALL_OW 113
5324: GO 5301
5326: POP
5327: POP
// for i in sci_list do
5328: LD_ADDR_VAR 0 7
5332: PUSH
5333: LD_VAR 0 6
5337: PUSH
5338: FOR_IN
5339: IFFALSE 5407
// begin ComExitBuilding ( i ) ;
5341: LD_VAR 0 7
5345: PPUSH
5346: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5350: LD_ADDR_VAR 0 8
5354: PUSH
5355: LD_VAR 0 2
5359: PPUSH
5360: LD_INT 22
5362: PUSH
5363: LD_VAR 0 1
5367: PUSH
5368: EMPTY
5369: LIST
5370: LIST
5371: PPUSH
5372: CALL_OW 70
5376: PUSH
5377: FOR_IN
5378: IFFALSE 5403
// begin AddComHeal ( i , j ) ;
5380: LD_VAR 0 7
5384: PPUSH
5385: LD_VAR 0 8
5389: PPUSH
5390: CALL_OW 188
// wait ( 1 1$0 ) ;
5394: LD_INT 2100
5396: PPUSH
5397: CALL_OW 67
// end ;
5401: GO 5377
5403: POP
5404: POP
// end ;
5405: GO 5338
5407: POP
5408: POP
// end else
5409: GO 5425
// begin AddComEnterUnit ( sci_list , build ) ;
5411: LD_VAR 0 6
5415: PPUSH
5416: LD_VAR 0 4
5420: PPUSH
5421: CALL_OW 180
// end ; end ;
5425: LD_VAR 0 5
5429: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5430: LD_INT 0
5432: PPUSH
5433: PPUSH
5434: PPUSH
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
5439: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5440: LD_INT 22
5442: PUSH
5443: LD_VAR 0 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PUSH
5452: LD_INT 21
5454: PUSH
5455: LD_INT 2
5457: PUSH
5458: EMPTY
5459: LIST
5460: LIST
5461: PUSH
5462: EMPTY
5463: LIST
5464: LIST
5465: PPUSH
5466: CALL_OW 69
5470: PUSH
5471: LD_VAR 0 3
5475: LESSEQUAL
5476: IFFALSE 5543
// begin for i = 1 to vehCount do
5478: LD_ADDR_VAR 0 10
5482: PUSH
5483: DOUBLE
5484: LD_INT 1
5486: DEC
5487: ST_TO_ADDR
5488: LD_VAR 0 3
5492: PUSH
5493: FOR_TO
5494: IFFALSE 5541
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5496: LD_VAR 0 2
5500: PPUSH
5501: LD_VAR 0 8
5505: PPUSH
5506: LD_VAR 0 6
5510: PPUSH
5511: LD_VAR 0 7
5515: PPUSH
5516: LD_VAR 0 5
5520: PUSH
5521: LD_INT 1
5523: PPUSH
5524: LD_VAR 0 5
5528: PPUSH
5529: CALL_OW 12
5533: ARRAY
5534: PPUSH
5535: CALL_OW 185
5539: GO 5493
5541: POP
5542: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5543: LD_INT 22
5545: PUSH
5546: LD_VAR 0 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: LD_INT 21
5557: PUSH
5558: LD_INT 2
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: PUSH
5565: LD_INT 24
5567: PUSH
5568: LD_INT 250
5570: PUSH
5571: EMPTY
5572: LIST
5573: LIST
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: LIST
5579: PPUSH
5580: CALL_OW 69
5584: PUSH
5585: LD_VAR 0 3
5589: GREATEREQUAL
5590: IFFALSE 5910
// begin repeat begin wait ( 0 0$1 ) ;
5592: LD_INT 35
5594: PPUSH
5595: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
5599: LD_INT 22
5601: PUSH
5602: LD_VAR 0 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PUSH
5611: LD_INT 21
5613: PUSH
5614: LD_INT 2
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 24
5623: PUSH
5624: LD_INT 651
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: EMPTY
5632: LIST
5633: LIST
5634: LIST
5635: PPUSH
5636: CALL_OW 69
5640: PUSH
5641: LD_INT 0
5643: GREATER
5644: IFFALSE 5872
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5646: LD_ADDR_VAR 0 10
5650: PUSH
5651: LD_INT 22
5653: PUSH
5654: LD_VAR 0 1
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 21
5665: PUSH
5666: LD_INT 2
5668: PUSH
5669: EMPTY
5670: LIST
5671: LIST
5672: PUSH
5673: LD_INT 24
5675: PUSH
5676: LD_INT 651
5678: PUSH
5679: EMPTY
5680: LIST
5681: LIST
5682: PUSH
5683: EMPTY
5684: LIST
5685: LIST
5686: LIST
5687: PPUSH
5688: CALL_OW 69
5692: PUSH
5693: FOR_IN
5694: IFFALSE 5870
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5696: LD_ADDR_VAR 0 15
5700: PUSH
5701: LD_INT 22
5703: PUSH
5704: LD_VAR 0 4
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: PPUSH
5718: LD_VAR 0 10
5722: PPUSH
5723: CALL_OW 74
5727: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5728: LD_ADDR_VAR 0 16
5732: PUSH
5733: LD_INT 22
5735: PUSH
5736: LD_VAR 0 4
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PUSH
5745: LD_INT 2
5747: PUSH
5748: LD_INT 59
5750: PUSH
5751: EMPTY
5752: LIST
5753: PUSH
5754: LD_INT 21
5756: PUSH
5757: LD_INT 1
5759: PUSH
5760: EMPTY
5761: LIST
5762: LIST
5763: PUSH
5764: LD_INT 21
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: EMPTY
5771: LIST
5772: LIST
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PUSH
5780: EMPTY
5781: LIST
5782: LIST
5783: PUSH
5784: EMPTY
5785: LIST
5786: PPUSH
5787: CALL_OW 69
5791: PPUSH
5792: LD_VAR 0 10
5796: PPUSH
5797: CALL_OW 74
5801: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5802: LD_VAR 0 10
5806: PPUSH
5807: LD_VAR 0 15
5811: PPUSH
5812: CALL_OW 296
5816: PUSH
5817: LD_INT 8
5819: PLUS
5820: PUSH
5821: LD_VAR 0 10
5825: PPUSH
5826: LD_VAR 0 16
5830: PPUSH
5831: CALL_OW 296
5835: LESS
5836: IFFALSE 5854
// begin ComAttackUnit ( i , target1 ) ;
5838: LD_VAR 0 10
5842: PPUSH
5843: LD_VAR 0 15
5847: PPUSH
5848: CALL_OW 115
// end else
5852: GO 5868
// begin ComAttackUnit ( i , target2 ) ;
5854: LD_VAR 0 10
5858: PPUSH
5859: LD_VAR 0 16
5863: PPUSH
5864: CALL_OW 115
// end ; end ;
5868: GO 5693
5870: POP
5871: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
5872: LD_INT 22
5874: PUSH
5875: LD_VAR 0 1
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PUSH
5884: LD_INT 21
5886: PUSH
5887: LD_INT 2
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PPUSH
5898: CALL_OW 69
5902: PUSH
5903: LD_VAR 0 3
5907: LESSEQUAL
5908: IFFALSE 5592
// end ; end ;
5910: LD_VAR 0 9
5914: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5915: LD_INT 0
5917: PPUSH
5918: PPUSH
5919: PPUSH
5920: PPUSH
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
// for i = 1 to medicCount do
5928: LD_ADDR_VAR 0 14
5932: PUSH
5933: DOUBLE
5934: LD_INT 1
5936: DEC
5937: ST_TO_ADDR
5938: LD_VAR 0 7
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6026
// begin uc_side = side ;
5946: LD_ADDR_OWVAR 20
5950: PUSH
5951: LD_VAR 0 1
5955: ST_TO_ADDR
// uc_nation = nation ;
5956: LD_ADDR_OWVAR 21
5960: PUSH
5961: LD_VAR 0 2
5965: ST_TO_ADDR
// hc_name =  ;
5966: LD_ADDR_OWVAR 26
5970: PUSH
5971: LD_STRING 
5973: ST_TO_ADDR
// hc_gallery =  ;
5974: LD_ADDR_OWVAR 33
5978: PUSH
5979: LD_STRING 
5981: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5982: LD_INT 0
5984: PPUSH
5985: LD_INT 4
5987: PPUSH
5988: LD_VAR 0 8
5992: PPUSH
5993: CALL_OW 380
// un = CreateHuman ;
5997: LD_ADDR_VAR 0 16
6001: PUSH
6002: CALL_OW 44
6006: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6007: LD_VAR 0 16
6011: PPUSH
6012: LD_VAR 0 9
6016: PPUSH
6017: LD_INT 0
6019: PPUSH
6020: CALL_OW 49
// end ;
6024: GO 5943
6026: POP
6027: POP
// for i = 1 to soldierCount do
6028: LD_ADDR_VAR 0 14
6032: PUSH
6033: DOUBLE
6034: LD_INT 1
6036: DEC
6037: ST_TO_ADDR
6038: LD_VAR 0 3
6042: PUSH
6043: FOR_TO
6044: IFFALSE 6126
// begin uc_side = side ;
6046: LD_ADDR_OWVAR 20
6050: PUSH
6051: LD_VAR 0 1
6055: ST_TO_ADDR
// uc_nation = nation ;
6056: LD_ADDR_OWVAR 21
6060: PUSH
6061: LD_VAR 0 2
6065: ST_TO_ADDR
// hc_name =  ;
6066: LD_ADDR_OWVAR 26
6070: PUSH
6071: LD_STRING 
6073: ST_TO_ADDR
// hc_gallery =  ;
6074: LD_ADDR_OWVAR 33
6078: PUSH
6079: LD_STRING 
6081: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6082: LD_INT 0
6084: PPUSH
6085: LD_INT 1
6087: PPUSH
6088: LD_VAR 0 8
6092: PPUSH
6093: CALL_OW 380
// un = CreateHuman ;
6097: LD_ADDR_VAR 0 16
6101: PUSH
6102: CALL_OW 44
6106: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6107: LD_VAR 0 16
6111: PPUSH
6112: LD_VAR 0 9
6116: PPUSH
6117: LD_INT 0
6119: PPUSH
6120: CALL_OW 49
// end ;
6124: GO 6043
6126: POP
6127: POP
// for i = 1 to sniperCount do
6128: LD_ADDR_VAR 0 14
6132: PUSH
6133: DOUBLE
6134: LD_INT 1
6136: DEC
6137: ST_TO_ADDR
6138: LD_VAR 0 4
6142: PUSH
6143: FOR_TO
6144: IFFALSE 6226
// begin uc_side = side ;
6146: LD_ADDR_OWVAR 20
6150: PUSH
6151: LD_VAR 0 1
6155: ST_TO_ADDR
// uc_nation = nation ;
6156: LD_ADDR_OWVAR 21
6160: PUSH
6161: LD_VAR 0 2
6165: ST_TO_ADDR
// hc_name =  ;
6166: LD_ADDR_OWVAR 26
6170: PUSH
6171: LD_STRING 
6173: ST_TO_ADDR
// hc_gallery =  ;
6174: LD_ADDR_OWVAR 33
6178: PUSH
6179: LD_STRING 
6181: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6182: LD_INT 0
6184: PPUSH
6185: LD_INT 5
6187: PPUSH
6188: LD_VAR 0 8
6192: PPUSH
6193: CALL_OW 380
// un = CreateHuman ;
6197: LD_ADDR_VAR 0 16
6201: PUSH
6202: CALL_OW 44
6206: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6207: LD_VAR 0 16
6211: PPUSH
6212: LD_VAR 0 9
6216: PPUSH
6217: LD_INT 0
6219: PPUSH
6220: CALL_OW 49
// end ;
6224: GO 6143
6226: POP
6227: POP
// for i = 1 to bazookCount do
6228: LD_ADDR_VAR 0 14
6232: PUSH
6233: DOUBLE
6234: LD_INT 1
6236: DEC
6237: ST_TO_ADDR
6238: LD_VAR 0 5
6242: PUSH
6243: FOR_TO
6244: IFFALSE 6326
// begin uc_side = side ;
6246: LD_ADDR_OWVAR 20
6250: PUSH
6251: LD_VAR 0 1
6255: ST_TO_ADDR
// uc_nation = nation ;
6256: LD_ADDR_OWVAR 21
6260: PUSH
6261: LD_VAR 0 2
6265: ST_TO_ADDR
// hc_name =  ;
6266: LD_ADDR_OWVAR 26
6270: PUSH
6271: LD_STRING 
6273: ST_TO_ADDR
// hc_gallery =  ;
6274: LD_ADDR_OWVAR 33
6278: PUSH
6279: LD_STRING 
6281: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6282: LD_INT 0
6284: PPUSH
6285: LD_INT 9
6287: PPUSH
6288: LD_VAR 0 8
6292: PPUSH
6293: CALL_OW 380
// un = CreateHuman ;
6297: LD_ADDR_VAR 0 16
6301: PUSH
6302: CALL_OW 44
6306: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6307: LD_VAR 0 16
6311: PPUSH
6312: LD_VAR 0 9
6316: PPUSH
6317: LD_INT 0
6319: PPUSH
6320: CALL_OW 49
// end ;
6324: GO 6243
6326: POP
6327: POP
// for i = 1 to mortalCount do
6328: LD_ADDR_VAR 0 14
6332: PUSH
6333: DOUBLE
6334: LD_INT 1
6336: DEC
6337: ST_TO_ADDR
6338: LD_VAR 0 6
6342: PUSH
6343: FOR_TO
6344: IFFALSE 6426
// begin uc_side = side ;
6346: LD_ADDR_OWVAR 20
6350: PUSH
6351: LD_VAR 0 1
6355: ST_TO_ADDR
// uc_nation = nation ;
6356: LD_ADDR_OWVAR 21
6360: PUSH
6361: LD_VAR 0 2
6365: ST_TO_ADDR
// hc_name =  ;
6366: LD_ADDR_OWVAR 26
6370: PUSH
6371: LD_STRING 
6373: ST_TO_ADDR
// hc_gallery =  ;
6374: LD_ADDR_OWVAR 33
6378: PUSH
6379: LD_STRING 
6381: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6382: LD_INT 0
6384: PPUSH
6385: LD_INT 8
6387: PPUSH
6388: LD_VAR 0 8
6392: PPUSH
6393: CALL_OW 380
// un = CreateHuman ;
6397: LD_ADDR_VAR 0 16
6401: PUSH
6402: CALL_OW 44
6406: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6407: LD_VAR 0 16
6411: PPUSH
6412: LD_VAR 0 9
6416: PPUSH
6417: LD_INT 0
6419: PPUSH
6420: CALL_OW 49
// end ;
6424: GO 6343
6426: POP
6427: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6428: LD_ADDR_VAR 0 19
6432: PUSH
6433: LD_INT 22
6435: PUSH
6436: LD_VAR 0 1
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: LD_INT 2
6447: PUSH
6448: LD_INT 25
6450: PUSH
6451: LD_INT 1
6453: PUSH
6454: EMPTY
6455: LIST
6456: LIST
6457: PUSH
6458: LD_INT 25
6460: PUSH
6461: LD_INT 5
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 25
6470: PUSH
6471: LD_INT 8
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: LD_INT 25
6480: PUSH
6481: LD_INT 9
6483: PUSH
6484: EMPTY
6485: LIST
6486: LIST
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: LIST
6493: LIST
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 69
6503: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6504: LD_ADDR_VAR 0 18
6508: PUSH
6509: LD_INT 22
6511: PUSH
6512: LD_VAR 0 1
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 25
6523: PUSH
6524: LD_INT 4
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: PPUSH
6535: CALL_OW 69
6539: ST_TO_ADDR
// for i in medic_list do
6540: LD_ADDR_VAR 0 14
6544: PUSH
6545: LD_VAR 0 18
6549: PUSH
6550: FOR_IN
6551: IFFALSE 6569
// ComMoveToArea ( i , healArea ) ;
6553: LD_VAR 0 14
6557: PPUSH
6558: LD_VAR 0 10
6562: PPUSH
6563: CALL_OW 113
6567: GO 6550
6569: POP
6570: POP
// if strategy = 1 then
6571: LD_VAR 0 12
6575: PUSH
6576: LD_INT 1
6578: EQUAL
6579: IFFALSE 7314
// begin repeat wait ( 0 0$3 ) ;
6581: LD_INT 105
6583: PPUSH
6584: CALL_OW 67
// for i in soldiersOK_list do
6588: LD_ADDR_VAR 0 14
6592: PUSH
6593: LD_VAR 0 19
6597: PUSH
6598: FOR_IN
6599: IFFALSE 6663
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6601: LD_VAR 0 14
6605: PPUSH
6606: LD_INT 91
6608: PPUSH
6609: LD_INT 63
6611: PPUSH
6612: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6616: LD_VAR 0 14
6620: PPUSH
6621: LD_INT 101
6623: PPUSH
6624: LD_INT 53
6626: PPUSH
6627: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6631: LD_VAR 0 14
6635: PPUSH
6636: LD_INT 75
6638: PPUSH
6639: LD_INT 23
6641: PPUSH
6642: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6646: LD_VAR 0 14
6650: PPUSH
6651: LD_INT 78
6653: PPUSH
6654: LD_INT 8
6656: PPUSH
6657: CALL_OW 174
// end ;
6661: GO 6598
6663: POP
6664: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
6665: LD_INT 15
6667: PPUSH
6668: LD_INT 22
6670: PUSH
6671: LD_VAR 0 1
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 70
6684: PUSH
6685: LD_INT 2
6687: GREATER
6688: IFFALSE 6581
// repeat wait ( 0 0$1 ) ;
6690: LD_INT 35
6692: PPUSH
6693: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6697: LD_ADDR_VAR 0 17
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_VAR 0 1
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 1
6716: PUSH
6717: LD_INT 3
6719: PUSH
6720: LD_INT 24
6722: PUSH
6723: LD_INT 550
6725: PUSH
6726: EMPTY
6727: LIST
6728: LIST
6729: PUSH
6730: EMPTY
6731: LIST
6732: LIST
6733: PUSH
6734: LD_INT 24
6736: PUSH
6737: LD_INT 250
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PPUSH
6753: CALL_OW 69
6757: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6758: LD_ADDR_VAR 0 19
6762: PUSH
6763: LD_INT 22
6765: PUSH
6766: LD_VAR 0 1
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: LD_INT 25
6780: PUSH
6781: LD_INT 1
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 25
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 25
6800: PUSH
6801: LD_INT 8
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: LD_INT 25
6810: PUSH
6811: LD_INT 9
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: PUSH
6825: LD_INT 24
6827: PUSH
6828: LD_INT 1000
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: EMPTY
6836: LIST
6837: LIST
6838: LIST
6839: PPUSH
6840: CALL_OW 69
6844: ST_TO_ADDR
// if medicCount > 0 then
6845: LD_VAR 0 7
6849: PUSH
6850: LD_INT 0
6852: GREATER
6853: IFFALSE 6927
// begin if damageUnit_list > 0 then
6855: LD_VAR 0 17
6859: PUSH
6860: LD_INT 0
6862: GREATER
6863: IFFALSE 6927
// begin for i in damageUnit_list do
6865: LD_ADDR_VAR 0 14
6869: PUSH
6870: LD_VAR 0 17
6874: PUSH
6875: FOR_IN
6876: IFFALSE 6925
// begin ComMoveToArea ( i , healArea ) ;
6878: LD_VAR 0 14
6882: PPUSH
6883: LD_VAR 0 10
6887: PPUSH
6888: CALL_OW 113
// for j in medic_list do
6892: LD_ADDR_VAR 0 15
6896: PUSH
6897: LD_VAR 0 18
6901: PUSH
6902: FOR_IN
6903: IFFALSE 6921
// AddComHeal ( j , i ) ;
6905: LD_VAR 0 15
6909: PPUSH
6910: LD_VAR 0 14
6914: PPUSH
6915: CALL_OW 188
6919: GO 6902
6921: POP
6922: POP
// end ;
6923: GO 6875
6925: POP
6926: POP
// end ; end ; for i in soldiersOK_list do
6927: LD_ADDR_VAR 0 14
6931: PUSH
6932: LD_VAR 0 19
6936: PUSH
6937: FOR_IN
6938: IFFALSE 7114
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6940: LD_ADDR_VAR 0 22
6944: PUSH
6945: LD_INT 22
6947: PUSH
6948: LD_VAR 0 11
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PPUSH
6957: CALL_OW 69
6961: PPUSH
6962: LD_VAR 0 14
6966: PPUSH
6967: CALL_OW 74
6971: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6972: LD_ADDR_VAR 0 23
6976: PUSH
6977: LD_INT 22
6979: PUSH
6980: LD_VAR 0 11
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: LD_INT 2
6991: PUSH
6992: LD_INT 59
6994: PUSH
6995: EMPTY
6996: LIST
6997: PUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 1
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 21
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: EMPTY
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: PPUSH
7036: LD_VAR 0 14
7040: PPUSH
7041: CALL_OW 74
7045: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7046: LD_VAR 0 14
7050: PPUSH
7051: LD_VAR 0 22
7055: PPUSH
7056: CALL_OW 296
7060: PUSH
7061: LD_INT 8
7063: PLUS
7064: PUSH
7065: LD_VAR 0 14
7069: PPUSH
7070: LD_VAR 0 23
7074: PPUSH
7075: CALL_OW 296
7079: LESS
7080: IFFALSE 7098
// begin ComAttackUnit ( i , target1 ) ;
7082: LD_VAR 0 14
7086: PPUSH
7087: LD_VAR 0 22
7091: PPUSH
7092: CALL_OW 115
// end else
7096: GO 7112
// begin ComAttackUnit ( i , target2 ) ;
7098: LD_VAR 0 14
7102: PPUSH
7103: LD_VAR 0 23
7107: PPUSH
7108: CALL_OW 115
// end ; end ;
7112: GO 6937
7114: POP
7115: POP
// for i in soldiersOK_list do
7116: LD_ADDR_VAR 0 14
7120: PUSH
7121: LD_VAR 0 19
7125: PUSH
7126: FOR_IN
7127: IFFALSE 7303
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7129: LD_ADDR_VAR 0 22
7133: PUSH
7134: LD_INT 22
7136: PUSH
7137: LD_VAR 0 11
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PPUSH
7146: CALL_OW 69
7150: PPUSH
7151: LD_VAR 0 14
7155: PPUSH
7156: CALL_OW 74
7160: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7161: LD_ADDR_VAR 0 23
7165: PUSH
7166: LD_INT 22
7168: PUSH
7169: LD_VAR 0 11
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 2
7180: PUSH
7181: LD_INT 59
7183: PUSH
7184: EMPTY
7185: LIST
7186: PUSH
7187: LD_INT 21
7189: PUSH
7190: LD_INT 1
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: EMPTY
7208: LIST
7209: LIST
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: PUSH
7217: EMPTY
7218: LIST
7219: PPUSH
7220: CALL_OW 69
7224: PPUSH
7225: LD_VAR 0 14
7229: PPUSH
7230: CALL_OW 74
7234: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7235: LD_VAR 0 14
7239: PPUSH
7240: LD_VAR 0 22
7244: PPUSH
7245: CALL_OW 296
7249: PUSH
7250: LD_INT 8
7252: PLUS
7253: PUSH
7254: LD_VAR 0 14
7258: PPUSH
7259: LD_VAR 0 23
7263: PPUSH
7264: CALL_OW 296
7268: LESS
7269: IFFALSE 7287
// begin ComAttackUnit ( i , target1 ) ;
7271: LD_VAR 0 14
7275: PPUSH
7276: LD_VAR 0 22
7280: PPUSH
7281: CALL_OW 115
// end else
7285: GO 7301
// begin ComAttackUnit ( i , target2 ) ;
7287: LD_VAR 0 14
7291: PPUSH
7292: LD_VAR 0 23
7296: PPUSH
7297: CALL_OW 115
// end ; end ;
7301: GO 7126
7303: POP
7304: POP
// until soldiersOK_list = [ ] ;
7305: LD_VAR 0 19
7309: PUSH
7310: EMPTY
7311: EQUAL
7312: IFFALSE 6690
// end ; if strategy = 2 then
7314: LD_VAR 0 12
7318: PUSH
7319: LD_INT 2
7321: EQUAL
7322: IFFALSE 8027
// begin repeat wait ( 0 0$1 ) ;
7324: LD_INT 35
7326: PPUSH
7327: CALL_OW 67
// for i in soldiersOK_list do
7331: LD_ADDR_VAR 0 14
7335: PUSH
7336: LD_VAR 0 19
7340: PUSH
7341: FOR_IN
7342: IFFALSE 7376
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7344: LD_VAR 0 14
7348: PPUSH
7349: LD_INT 91
7351: PPUSH
7352: LD_INT 63
7354: PPUSH
7355: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7359: LD_VAR 0 14
7363: PPUSH
7364: LD_INT 75
7366: PPUSH
7367: LD_INT 33
7369: PPUSH
7370: CALL_OW 174
// end ;
7374: GO 7341
7376: POP
7377: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7378: LD_INT 16
7380: PPUSH
7381: LD_INT 22
7383: PUSH
7384: LD_VAR 0 1
7388: PUSH
7389: EMPTY
7390: LIST
7391: LIST
7392: PPUSH
7393: CALL_OW 70
7397: PUSH
7398: LD_INT 2
7400: GREATER
7401: IFFALSE 7324
// repeat wait ( 0 0$3 ) ;
7403: LD_INT 105
7405: PPUSH
7406: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7410: LD_ADDR_VAR 0 17
7414: PUSH
7415: LD_INT 22
7417: PUSH
7418: LD_VAR 0 1
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 1
7429: PUSH
7430: LD_INT 3
7432: PUSH
7433: LD_INT 24
7435: PUSH
7436: LD_INT 550
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: LD_INT 24
7449: PUSH
7450: LD_INT 250
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7471: LD_ADDR_VAR 0 19
7475: PUSH
7476: LD_INT 22
7478: PUSH
7479: LD_VAR 0 1
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PUSH
7488: LD_INT 2
7490: PUSH
7491: LD_INT 25
7493: PUSH
7494: LD_INT 1
7496: PUSH
7497: EMPTY
7498: LIST
7499: LIST
7500: PUSH
7501: LD_INT 25
7503: PUSH
7504: LD_INT 5
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: PUSH
7511: LD_INT 25
7513: PUSH
7514: LD_INT 8
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: LD_INT 25
7523: PUSH
7524: LD_INT 9
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: EMPTY
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: PUSH
7538: LD_INT 24
7540: PUSH
7541: LD_INT 1000
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: PPUSH
7553: CALL_OW 69
7557: ST_TO_ADDR
// if medicCount > 0 then
7558: LD_VAR 0 7
7562: PUSH
7563: LD_INT 0
7565: GREATER
7566: IFFALSE 7640
// begin if damageUnit_list > 0 then
7568: LD_VAR 0 17
7572: PUSH
7573: LD_INT 0
7575: GREATER
7576: IFFALSE 7640
// begin for i in damageUnit_list do
7578: LD_ADDR_VAR 0 14
7582: PUSH
7583: LD_VAR 0 17
7587: PUSH
7588: FOR_IN
7589: IFFALSE 7638
// begin ComMoveToArea ( i , healArea ) ;
7591: LD_VAR 0 14
7595: PPUSH
7596: LD_VAR 0 10
7600: PPUSH
7601: CALL_OW 113
// for j in medic_list do
7605: LD_ADDR_VAR 0 15
7609: PUSH
7610: LD_VAR 0 18
7614: PUSH
7615: FOR_IN
7616: IFFALSE 7634
// AddComHeal ( j , i ) ;
7618: LD_VAR 0 15
7622: PPUSH
7623: LD_VAR 0 14
7627: PPUSH
7628: CALL_OW 188
7632: GO 7615
7634: POP
7635: POP
// end ;
7636: GO 7588
7638: POP
7639: POP
// end ; end ; for i in soldiersOK_list do
7640: LD_ADDR_VAR 0 14
7644: PUSH
7645: LD_VAR 0 19
7649: PUSH
7650: FOR_IN
7651: IFFALSE 7827
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7653: LD_ADDR_VAR 0 22
7657: PUSH
7658: LD_INT 22
7660: PUSH
7661: LD_VAR 0 11
7665: PUSH
7666: EMPTY
7667: LIST
7668: LIST
7669: PPUSH
7670: CALL_OW 69
7674: PPUSH
7675: LD_VAR 0 14
7679: PPUSH
7680: CALL_OW 74
7684: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7685: LD_ADDR_VAR 0 23
7689: PUSH
7690: LD_INT 22
7692: PUSH
7693: LD_VAR 0 11
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 2
7704: PUSH
7705: LD_INT 59
7707: PUSH
7708: EMPTY
7709: LIST
7710: PUSH
7711: LD_INT 21
7713: PUSH
7714: LD_INT 1
7716: PUSH
7717: EMPTY
7718: LIST
7719: LIST
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: EMPTY
7728: LIST
7729: LIST
7730: PUSH
7731: EMPTY
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: PUSH
7741: EMPTY
7742: LIST
7743: PPUSH
7744: CALL_OW 69
7748: PPUSH
7749: LD_VAR 0 14
7753: PPUSH
7754: CALL_OW 74
7758: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7759: LD_VAR 0 14
7763: PPUSH
7764: LD_VAR 0 22
7768: PPUSH
7769: CALL_OW 296
7773: PUSH
7774: LD_INT 8
7776: PLUS
7777: PUSH
7778: LD_VAR 0 14
7782: PPUSH
7783: LD_VAR 0 23
7787: PPUSH
7788: CALL_OW 296
7792: LESS
7793: IFFALSE 7811
// begin ComAttackUnit ( i , target1 ) ;
7795: LD_VAR 0 14
7799: PPUSH
7800: LD_VAR 0 22
7804: PPUSH
7805: CALL_OW 115
// end else
7809: GO 7825
// begin ComAttackUnit ( i , target2 ) ;
7811: LD_VAR 0 14
7815: PPUSH
7816: LD_VAR 0 23
7820: PPUSH
7821: CALL_OW 115
// end ; end ;
7825: GO 7650
7827: POP
7828: POP
// for i in soldiersOK_list do
7829: LD_ADDR_VAR 0 14
7833: PUSH
7834: LD_VAR 0 19
7838: PUSH
7839: FOR_IN
7840: IFFALSE 8016
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7842: LD_ADDR_VAR 0 22
7846: PUSH
7847: LD_INT 22
7849: PUSH
7850: LD_VAR 0 11
7854: PUSH
7855: EMPTY
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: PPUSH
7864: LD_VAR 0 14
7868: PPUSH
7869: CALL_OW 74
7873: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7874: LD_ADDR_VAR 0 23
7878: PUSH
7879: LD_INT 22
7881: PUSH
7882: LD_VAR 0 11
7886: PUSH
7887: EMPTY
7888: LIST
7889: LIST
7890: PUSH
7891: LD_INT 2
7893: PUSH
7894: LD_INT 59
7896: PUSH
7897: EMPTY
7898: LIST
7899: PUSH
7900: LD_INT 21
7902: PUSH
7903: LD_INT 1
7905: PUSH
7906: EMPTY
7907: LIST
7908: LIST
7909: PUSH
7910: LD_INT 21
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: EMPTY
7917: LIST
7918: LIST
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: PUSH
7930: EMPTY
7931: LIST
7932: PPUSH
7933: CALL_OW 69
7937: PPUSH
7938: LD_VAR 0 14
7942: PPUSH
7943: CALL_OW 74
7947: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7948: LD_VAR 0 14
7952: PPUSH
7953: LD_VAR 0 22
7957: PPUSH
7958: CALL_OW 296
7962: PUSH
7963: LD_INT 8
7965: PLUS
7966: PUSH
7967: LD_VAR 0 14
7971: PPUSH
7972: LD_VAR 0 23
7976: PPUSH
7977: CALL_OW 296
7981: LESS
7982: IFFALSE 8000
// begin ComAttackUnit ( i , target1 ) ;
7984: LD_VAR 0 14
7988: PPUSH
7989: LD_VAR 0 22
7993: PPUSH
7994: CALL_OW 115
// end else
7998: GO 8014
// begin ComAttackUnit ( i , target2 ) ;
8000: LD_VAR 0 14
8004: PPUSH
8005: LD_VAR 0 23
8009: PPUSH
8010: CALL_OW 115
// end ; end ;
8014: GO 7839
8016: POP
8017: POP
// until soldiersOK_list = [ ] ;
8018: LD_VAR 0 19
8022: PUSH
8023: EMPTY
8024: EQUAL
8025: IFFALSE 7403
// end ; end ;
8027: LD_VAR 0 13
8031: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8032: LD_INT 0
8034: PPUSH
8035: PPUSH
8036: PPUSH
8037: PPUSH
8038: PPUSH
8039: PPUSH
8040: PPUSH
8041: PPUSH
8042: PPUSH
8043: PPUSH
8044: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8045: LD_ADDR_VAR 0 9
8049: PUSH
8050: LD_INT 22
8052: PUSH
8053: LD_VAR 0 1
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 21
8064: PUSH
8065: LD_INT 2
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: LD_INT 24
8074: PUSH
8075: LD_INT 660
8077: PUSH
8078: EMPTY
8079: LIST
8080: LIST
8081: PUSH
8082: LD_INT 3
8084: PUSH
8085: LD_INT 58
8087: PUSH
8088: EMPTY
8089: LIST
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 3
8097: PUSH
8098: LD_INT 34
8100: PUSH
8101: LD_INT 53
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PUSH
8112: EMPTY
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: PPUSH
8119: CALL_OW 69
8123: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8124: LD_ADDR_VAR 0 10
8128: PUSH
8129: LD_INT 22
8131: PUSH
8132: LD_VAR 0 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 21
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: LD_INT 24
8156: PUSH
8157: LD_INT 660
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 69
8177: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8178: LD_ADDR_VAR 0 11
8182: PUSH
8183: LD_VAR 0 2
8187: PPUSH
8188: LD_INT 22
8190: PUSH
8191: LD_VAR 0 1
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 21
8202: PUSH
8203: LD_INT 2
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: LD_INT 3
8212: PUSH
8213: LD_INT 24
8215: PUSH
8216: LD_INT 1000
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: LIST
8231: PPUSH
8232: CALL_OW 70
8236: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8237: LD_ADDR_VAR 0 12
8241: PUSH
8242: LD_VAR 0 2
8246: PPUSH
8247: LD_INT 22
8249: PUSH
8250: LD_VAR 0 1
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 21
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: LD_INT 24
8271: PUSH
8272: LD_INT 1000
8274: PUSH
8275: EMPTY
8276: LIST
8277: LIST
8278: PUSH
8279: LD_INT 58
8281: PUSH
8282: EMPTY
8283: LIST
8284: PUSH
8285: LD_INT 3
8287: PUSH
8288: LD_INT 34
8290: PUSH
8291: LD_INT 53
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: PUSH
8302: EMPTY
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: PPUSH
8309: CALL_OW 70
8313: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8314: LD_ADDR_VAR 0 13
8318: PUSH
8319: EMPTY
8320: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8321: LD_ADDR_VAR 0 14
8325: PUSH
8326: LD_VAR 0 2
8330: PPUSH
8331: LD_INT 22
8333: PUSH
8334: LD_VAR 0 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PPUSH
8357: CALL_OW 70
8361: ST_TO_ADDR
// if damageVehicle_list > 0 then
8362: LD_VAR 0 10
8366: PUSH
8367: LD_INT 0
8369: GREATER
8370: IFFALSE 8408
// begin for i in damageVehicle_list do
8372: LD_ADDR_VAR 0 7
8376: PUSH
8377: LD_VAR 0 10
8381: PUSH
8382: FOR_IN
8383: IFFALSE 8406
// begin ComMoveXY ( i , repX , repY ) ;
8385: LD_VAR 0 7
8389: PPUSH
8390: LD_VAR 0 3
8394: PPUSH
8395: LD_VAR 0 4
8399: PPUSH
8400: CALL_OW 111
// end ;
8404: GO 8382
8406: POP
8407: POP
// end ; if vehicleNeedRepair_list > 0 then
8408: LD_VAR 0 11
8412: PUSH
8413: LD_INT 0
8415: GREATER
8416: IFFALSE 8503
// begin for i in vehicleNeedRepair_list do
8418: LD_ADDR_VAR 0 7
8422: PUSH
8423: LD_VAR 0 11
8427: PUSH
8428: FOR_IN
8429: IFFALSE 8501
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8431: LD_ADDR_VAR 0 13
8435: PUSH
8436: LD_VAR 0 13
8440: PUSH
8441: LD_VAR 0 7
8445: PPUSH
8446: CALL_OW 313
8450: ADD
8451: ST_TO_ADDR
// for j in mechanicInside_list do
8452: LD_ADDR_VAR 0 8
8456: PUSH
8457: LD_VAR 0 13
8461: PUSH
8462: FOR_IN
8463: IFFALSE 8497
// begin ComExitVehicle ( i ) ;
8465: LD_VAR 0 7
8469: PPUSH
8470: CALL_OW 121
// wait ( 0 0$1 ) ;
8474: LD_INT 35
8476: PPUSH
8477: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8481: LD_VAR 0 7
8485: PPUSH
8486: LD_VAR 0 8
8490: PPUSH
8491: CALL_OW 129
// end ;
8495: GO 8462
8497: POP
8498: POP
// end ;
8499: GO 8428
8501: POP
8502: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8503: LD_VAR 0 12
8507: PUSH
8508: LD_INT 0
8510: GREATER
8511: IFFALSE 8551
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8513: LD_VAR 0 14
8517: PUSH
8518: LD_INT 1
8520: ARRAY
8521: PPUSH
8522: LD_VAR 0 12
8526: PUSH
8527: LD_INT 1
8529: ARRAY
8530: PPUSH
8531: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8535: LD_VAR 0 12
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_INT 100
8546: PPUSH
8547: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8551: LD_VAR 0 9
8555: PUSH
8556: LD_INT 0
8558: GREATER
8559: IFFALSE 8750
// begin for i in vehicleOK_list do
8561: LD_ADDR_VAR 0 7
8565: PUSH
8566: LD_VAR 0 9
8570: PUSH
8571: FOR_IN
8572: IFFALSE 8748
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8574: LD_ADDR_VAR 0 15
8578: PUSH
8579: LD_INT 22
8581: PUSH
8582: LD_VAR 0 5
8586: PUSH
8587: EMPTY
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 69
8595: PPUSH
8596: LD_VAR 0 7
8600: PPUSH
8601: CALL_OW 74
8605: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8606: LD_ADDR_VAR 0 16
8610: PUSH
8611: LD_INT 22
8613: PUSH
8614: LD_VAR 0 5
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: PUSH
8623: LD_INT 2
8625: PUSH
8626: LD_INT 59
8628: PUSH
8629: EMPTY
8630: LIST
8631: PUSH
8632: LD_INT 21
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 21
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: PPUSH
8665: CALL_OW 69
8669: PPUSH
8670: LD_VAR 0 7
8674: PPUSH
8675: CALL_OW 74
8679: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8680: LD_VAR 0 7
8684: PPUSH
8685: LD_VAR 0 15
8689: PPUSH
8690: CALL_OW 296
8694: PUSH
8695: LD_INT 8
8697: PLUS
8698: PUSH
8699: LD_VAR 0 7
8703: PPUSH
8704: LD_VAR 0 16
8708: PPUSH
8709: CALL_OW 296
8713: LESS
8714: IFFALSE 8732
// begin ComAttackUnit ( i , target1 ) ;
8716: LD_VAR 0 7
8720: PPUSH
8721: LD_VAR 0 15
8725: PPUSH
8726: CALL_OW 115
// end else
8730: GO 8746
// begin ComAttackUnit ( i , target2 ) ;
8732: LD_VAR 0 7
8736: PPUSH
8737: LD_VAR 0 16
8741: PPUSH
8742: CALL_OW 115
// end ; end ;
8746: GO 8571
8748: POP
8749: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8750: LD_ADDR_VAR 0 7
8754: PUSH
8755: LD_VAR 0 2
8759: PPUSH
8760: LD_INT 22
8762: PUSH
8763: LD_VAR 0 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 25
8774: PUSH
8775: LD_INT 3
8777: PUSH
8778: EMPTY
8779: LIST
8780: LIST
8781: PUSH
8782: EMPTY
8783: LIST
8784: LIST
8785: PPUSH
8786: CALL_OW 70
8790: NOT
8791: PUSH
8792: FOR_IN
8793: IFFALSE 8816
// ComMoveXY ( i , repX , repY ) ;
8795: LD_VAR 0 7
8799: PPUSH
8800: LD_VAR 0 3
8804: PPUSH
8805: LD_VAR 0 4
8809: PPUSH
8810: CALL_OW 111
8814: GO 8792
8816: POP
8817: POP
// end ;
8818: LD_VAR 0 6
8822: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8823: LD_INT 0
8825: PPUSH
8826: PPUSH
8827: PPUSH
8828: PPUSH
8829: PPUSH
8830: PPUSH
8831: PPUSH
8832: PPUSH
8833: PPUSH
8834: PPUSH
8835: PPUSH
// amChassisTab = [ ] ;
8836: LD_ADDR_VAR 0 19
8840: PUSH
8841: EMPTY
8842: ST_TO_ADDR
// arChassisTab = [ ] ;
8843: LD_ADDR_VAR 0 18
8847: PUSH
8848: EMPTY
8849: ST_TO_ADDR
// ruChassisTab = [ ] ;
8850: LD_ADDR_VAR 0 17
8854: PUSH
8855: EMPTY
8856: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8857: LD_INT 35
8859: PPUSH
8860: CALL_OW 67
// if nation = 1 then
8864: LD_VAR 0 5
8868: PUSH
8869: LD_INT 1
8871: EQUAL
8872: IFFALSE 9363
// begin uc_side = side ;
8874: LD_ADDR_OWVAR 20
8878: PUSH
8879: LD_VAR 0 2
8883: ST_TO_ADDR
// uc_nation = nation ;
8884: LD_ADDR_OWVAR 21
8888: PUSH
8889: LD_VAR 0 5
8893: ST_TO_ADDR
// vc_engine = vehengine ;
8894: LD_ADDR_OWVAR 39
8898: PUSH
8899: LD_VAR 0 6
8903: ST_TO_ADDR
// vc_control = vehcontrol ;
8904: LD_ADDR_OWVAR 38
8908: PUSH
8909: LD_VAR 0 7
8913: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8914: LD_ADDR_OWVAR 40
8918: PUSH
8919: LD_VAR 0 10
8923: PUSH
8924: LD_INT 1
8926: PPUSH
8927: LD_VAR 0 10
8931: PPUSH
8932: CALL_OW 12
8936: ARRAY
8937: ST_TO_ADDR
// for j = 1 to AMWeapon do
8938: LD_ADDR_VAR 0 14
8942: PUSH
8943: DOUBLE
8944: LD_INT 1
8946: DEC
8947: ST_TO_ADDR
8948: LD_VAR 0 10
8952: PUSH
8953: FOR_TO
8954: IFFALSE 9255
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8956: LD_VAR 0 10
8960: PUSH
8961: LD_VAR 0 14
8965: ARRAY
8966: PUSH
8967: LD_INT 2
8969: EQUAL
8970: PUSH
8971: LD_VAR 0 10
8975: PUSH
8976: LD_VAR 0 14
8980: ARRAY
8981: PUSH
8982: LD_INT 3
8984: EQUAL
8985: OR
8986: IFFALSE 9039
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8988: LD_ADDR_VAR 0 19
8992: PUSH
8993: LD_INT 1
8995: PUSH
8996: LD_INT 2
8998: PUSH
8999: LD_INT 3
9001: PUSH
9002: LD_INT 4
9004: PUSH
9005: LD_INT 5
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: LIST
9014: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9015: LD_ADDR_OWVAR 37
9019: PUSH
9020: LD_VAR 0 19
9024: PUSH
9025: LD_INT 1
9027: PPUSH
9028: LD_VAR 0 19
9032: PPUSH
9033: CALL_OW 12
9037: ARRAY
9038: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9039: LD_VAR 0 10
9043: PUSH
9044: LD_VAR 0 14
9048: ARRAY
9049: PUSH
9050: LD_INT 4
9052: EQUAL
9053: PUSH
9054: LD_VAR 0 10
9058: PUSH
9059: LD_VAR 0 14
9063: ARRAY
9064: PUSH
9065: LD_INT 5
9067: EQUAL
9068: OR
9069: PUSH
9070: LD_VAR 0 10
9074: PUSH
9075: LD_VAR 0 14
9079: ARRAY
9080: PUSH
9081: LD_INT 9
9083: EQUAL
9084: OR
9085: PUSH
9086: LD_VAR 0 10
9090: PUSH
9091: LD_VAR 0 14
9095: ARRAY
9096: PUSH
9097: LD_INT 11
9099: EQUAL
9100: OR
9101: PUSH
9102: LD_VAR 0 10
9106: PUSH
9107: LD_VAR 0 14
9111: ARRAY
9112: PUSH
9113: LD_INT 7
9115: EQUAL
9116: OR
9117: IFFALSE 9166
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9119: LD_ADDR_VAR 0 19
9123: PUSH
9124: LD_INT 2
9126: PUSH
9127: LD_INT 3
9129: PUSH
9130: LD_INT 4
9132: PUSH
9133: LD_INT 5
9135: PUSH
9136: EMPTY
9137: LIST
9138: LIST
9139: LIST
9140: LIST
9141: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9142: LD_ADDR_OWVAR 37
9146: PUSH
9147: LD_VAR 0 19
9151: PUSH
9152: LD_INT 1
9154: PPUSH
9155: LD_VAR 0 19
9159: PPUSH
9160: CALL_OW 12
9164: ARRAY
9165: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9166: LD_VAR 0 10
9170: PUSH
9171: LD_VAR 0 14
9175: ARRAY
9176: PUSH
9177: LD_INT 8
9179: EQUAL
9180: PUSH
9181: LD_VAR 0 10
9185: PUSH
9186: LD_VAR 0 14
9190: ARRAY
9191: PUSH
9192: LD_INT 6
9194: EQUAL
9195: OR
9196: PUSH
9197: LD_VAR 0 10
9201: PUSH
9202: LD_VAR 0 14
9206: ARRAY
9207: PUSH
9208: LD_INT 10
9210: EQUAL
9211: OR
9212: IFFALSE 9253
// begin amChassisTab = [ 4 , 5 ] ;
9214: LD_ADDR_VAR 0 19
9218: PUSH
9219: LD_INT 4
9221: PUSH
9222: LD_INT 5
9224: PUSH
9225: EMPTY
9226: LIST
9227: LIST
9228: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9229: LD_ADDR_OWVAR 37
9233: PUSH
9234: LD_VAR 0 19
9238: PUSH
9239: LD_INT 1
9241: PPUSH
9242: LD_VAR 0 19
9246: PPUSH
9247: CALL_OW 12
9251: ARRAY
9252: ST_TO_ADDR
// end ; end ;
9253: GO 8953
9255: POP
9256: POP
// veh = CreateVehicle ;
9257: LD_ADDR_VAR 0 16
9261: PUSH
9262: CALL_OW 45
9266: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9267: LD_VAR 0 16
9271: PPUSH
9272: LD_VAR 0 1
9276: PPUSH
9277: LD_INT 0
9279: PPUSH
9280: CALL_OW 49
// if vehControl = 1 then
9284: LD_VAR 0 7
9288: PUSH
9289: LD_INT 1
9291: EQUAL
9292: IFFALSE 9349
// begin hc_gallery =  ;
9294: LD_ADDR_OWVAR 33
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// hc_name =  ;
9302: LD_ADDR_OWVAR 26
9306: PUSH
9307: LD_STRING 
9309: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9310: LD_INT 0
9312: PPUSH
9313: LD_INT 3
9315: PPUSH
9316: LD_VAR 0 4
9320: PPUSH
9321: CALL_OW 380
// un = CreateHuman ;
9325: LD_ADDR_VAR 0 15
9329: PUSH
9330: CALL_OW 44
9334: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9335: LD_VAR 0 15
9339: PPUSH
9340: LD_VAR 0 16
9344: PPUSH
9345: CALL_OW 52
// end ; i = i + 1 ;
9349: LD_ADDR_VAR 0 13
9353: PUSH
9354: LD_VAR 0 13
9358: PUSH
9359: LD_INT 1
9361: PLUS
9362: ST_TO_ADDR
// end ; if nation = 2 then
9363: LD_VAR 0 5
9367: PUSH
9368: LD_INT 2
9370: EQUAL
9371: IFFALSE 9795
// begin uc_side = side ;
9373: LD_ADDR_OWVAR 20
9377: PUSH
9378: LD_VAR 0 2
9382: ST_TO_ADDR
// uc_nation = nation ;
9383: LD_ADDR_OWVAR 21
9387: PUSH
9388: LD_VAR 0 5
9392: ST_TO_ADDR
// vc_engine = vehengine ;
9393: LD_ADDR_OWVAR 39
9397: PUSH
9398: LD_VAR 0 6
9402: ST_TO_ADDR
// vc_control = vehcontrol ;
9403: LD_ADDR_OWVAR 38
9407: PUSH
9408: LD_VAR 0 7
9412: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9413: LD_ADDR_OWVAR 40
9417: PUSH
9418: LD_VAR 0 9
9422: PUSH
9423: LD_INT 1
9425: PPUSH
9426: LD_VAR 0 9
9430: PPUSH
9431: CALL_OW 12
9435: ARRAY
9436: ST_TO_ADDR
// for j = 1 to ARWeapons do
9437: LD_ADDR_VAR 0 14
9441: PUSH
9442: DOUBLE
9443: LD_INT 1
9445: DEC
9446: ST_TO_ADDR
9447: LD_VAR 0 9
9451: PUSH
9452: FOR_TO
9453: IFFALSE 9687
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9455: LD_VAR 0 9
9459: PUSH
9460: LD_VAR 0 14
9464: ARRAY
9465: PUSH
9466: LD_INT 24
9468: EQUAL
9469: PUSH
9470: LD_VAR 0 9
9474: PUSH
9475: LD_VAR 0 14
9479: ARRAY
9480: PUSH
9481: LD_INT 22
9483: EQUAL
9484: OR
9485: PUSH
9486: LD_VAR 0 9
9490: PUSH
9491: LD_VAR 0 14
9495: ARRAY
9496: PUSH
9497: LD_INT 23
9499: EQUAL
9500: OR
9501: PUSH
9502: LD_VAR 0 9
9506: PUSH
9507: LD_VAR 0 14
9511: ARRAY
9512: PUSH
9513: LD_INT 30
9515: EQUAL
9516: OR
9517: IFFALSE 9566
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9519: LD_ADDR_VAR 0 18
9523: PUSH
9524: LD_INT 11
9526: PUSH
9527: LD_INT 12
9529: PUSH
9530: LD_INT 13
9532: PUSH
9533: LD_INT 14
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: LIST
9541: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9542: LD_ADDR_OWVAR 37
9546: PUSH
9547: LD_VAR 0 18
9551: PUSH
9552: LD_INT 1
9554: PPUSH
9555: LD_VAR 0 18
9559: PPUSH
9560: CALL_OW 12
9564: ARRAY
9565: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9566: LD_VAR 0 9
9570: PUSH
9571: LD_VAR 0 14
9575: ARRAY
9576: PUSH
9577: LD_INT 29
9579: EQUAL
9580: PUSH
9581: LD_VAR 0 9
9585: PUSH
9586: LD_VAR 0 14
9590: ARRAY
9591: PUSH
9592: LD_INT 28
9594: EQUAL
9595: OR
9596: PUSH
9597: LD_VAR 0 9
9601: PUSH
9602: LD_VAR 0 14
9606: ARRAY
9607: PUSH
9608: LD_INT 27
9610: EQUAL
9611: OR
9612: PUSH
9613: LD_VAR 0 9
9617: PUSH
9618: LD_VAR 0 14
9622: ARRAY
9623: PUSH
9624: LD_INT 26
9626: EQUAL
9627: OR
9628: PUSH
9629: LD_VAR 0 9
9633: PUSH
9634: LD_VAR 0 14
9638: ARRAY
9639: PUSH
9640: LD_INT 25
9642: EQUAL
9643: OR
9644: IFFALSE 9685
// begin arChassisTab = [ 13 , 14 ] ;
9646: LD_ADDR_VAR 0 18
9650: PUSH
9651: LD_INT 13
9653: PUSH
9654: LD_INT 14
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9661: LD_ADDR_OWVAR 37
9665: PUSH
9666: LD_VAR 0 18
9670: PUSH
9671: LD_INT 1
9673: PPUSH
9674: LD_VAR 0 18
9678: PPUSH
9679: CALL_OW 12
9683: ARRAY
9684: ST_TO_ADDR
// end ; end ;
9685: GO 9452
9687: POP
9688: POP
// veh = CreateVehicle ;
9689: LD_ADDR_VAR 0 16
9693: PUSH
9694: CALL_OW 45
9698: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9699: LD_VAR 0 16
9703: PPUSH
9704: LD_VAR 0 1
9708: PPUSH
9709: LD_INT 0
9711: PPUSH
9712: CALL_OW 49
// if vehcontrol = 1 then
9716: LD_VAR 0 7
9720: PUSH
9721: LD_INT 1
9723: EQUAL
9724: IFFALSE 9781
// begin hc_gallery =  ;
9726: LD_ADDR_OWVAR 33
9730: PUSH
9731: LD_STRING 
9733: ST_TO_ADDR
// hc_name =  ;
9734: LD_ADDR_OWVAR 26
9738: PUSH
9739: LD_STRING 
9741: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9742: LD_INT 0
9744: PPUSH
9745: LD_INT 3
9747: PPUSH
9748: LD_VAR 0 4
9752: PPUSH
9753: CALL_OW 380
// un = CreateHuman ;
9757: LD_ADDR_VAR 0 15
9761: PUSH
9762: CALL_OW 44
9766: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9767: LD_VAR 0 15
9771: PPUSH
9772: LD_VAR 0 16
9776: PPUSH
9777: CALL_OW 52
// end ; i = i + 1 ;
9781: LD_ADDR_VAR 0 13
9785: PUSH
9786: LD_VAR 0 13
9790: PUSH
9791: LD_INT 1
9793: PLUS
9794: ST_TO_ADDR
// end ; if nation = 3 then
9795: LD_VAR 0 5
9799: PUSH
9800: LD_INT 3
9802: EQUAL
9803: IFFALSE 10195
// begin uc_side = side ;
9805: LD_ADDR_OWVAR 20
9809: PUSH
9810: LD_VAR 0 2
9814: ST_TO_ADDR
// uc_nation = nation ;
9815: LD_ADDR_OWVAR 21
9819: PUSH
9820: LD_VAR 0 5
9824: ST_TO_ADDR
// vc_engine = vehengine ;
9825: LD_ADDR_OWVAR 39
9829: PUSH
9830: LD_VAR 0 6
9834: ST_TO_ADDR
// vc_control = vehcontrol ;
9835: LD_ADDR_OWVAR 38
9839: PUSH
9840: LD_VAR 0 7
9844: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9845: LD_ADDR_OWVAR 40
9849: PUSH
9850: LD_VAR 0 8
9854: PUSH
9855: LD_INT 1
9857: PPUSH
9858: LD_VAR 0 8
9862: PPUSH
9863: CALL_OW 12
9867: ARRAY
9868: ST_TO_ADDR
// for j = 1 to RuWeapons do
9869: LD_ADDR_VAR 0 14
9873: PUSH
9874: DOUBLE
9875: LD_INT 1
9877: DEC
9878: ST_TO_ADDR
9879: LD_VAR 0 8
9883: PUSH
9884: FOR_TO
9885: IFFALSE 10087
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9887: LD_VAR 0 8
9891: PUSH
9892: LD_VAR 0 14
9896: ARRAY
9897: PUSH
9898: LD_INT 42
9900: EQUAL
9901: PUSH
9902: LD_VAR 0 8
9906: PUSH
9907: LD_VAR 0 14
9911: ARRAY
9912: PUSH
9913: LD_INT 43
9915: EQUAL
9916: OR
9917: PUSH
9918: LD_VAR 0 8
9922: PUSH
9923: LD_VAR 0 14
9927: ARRAY
9928: PUSH
9929: LD_INT 44
9931: EQUAL
9932: OR
9933: PUSH
9934: LD_VAR 0 8
9938: PUSH
9939: LD_VAR 0 14
9943: ARRAY
9944: PUSH
9945: LD_INT 45
9947: EQUAL
9948: OR
9949: PUSH
9950: LD_VAR 0 8
9954: PUSH
9955: LD_VAR 0 14
9959: ARRAY
9960: PUSH
9961: LD_INT 49
9963: EQUAL
9964: OR
9965: IFFALSE 10014
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9967: LD_ADDR_VAR 0 17
9971: PUSH
9972: LD_INT 21
9974: PUSH
9975: LD_INT 22
9977: PUSH
9978: LD_INT 23
9980: PUSH
9981: LD_INT 24
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9990: LD_ADDR_OWVAR 37
9994: PUSH
9995: LD_VAR 0 17
9999: PUSH
10000: LD_INT 1
10002: PPUSH
10003: LD_VAR 0 17
10007: PPUSH
10008: CALL_OW 12
10012: ARRAY
10013: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10014: LD_VAR 0 8
10018: PUSH
10019: LD_VAR 0 14
10023: ARRAY
10024: PUSH
10025: LD_INT 46
10027: EQUAL
10028: PUSH
10029: LD_VAR 0 8
10033: PUSH
10034: LD_VAR 0 14
10038: ARRAY
10039: PUSH
10040: LD_INT 47
10042: EQUAL
10043: OR
10044: IFFALSE 10085
// begin ruChassisTab = [ 23 , 24 ] ;
10046: LD_ADDR_VAR 0 17
10050: PUSH
10051: LD_INT 23
10053: PUSH
10054: LD_INT 24
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10061: LD_ADDR_OWVAR 37
10065: PUSH
10066: LD_VAR 0 17
10070: PUSH
10071: LD_INT 1
10073: PPUSH
10074: LD_VAR 0 17
10078: PPUSH
10079: CALL_OW 12
10083: ARRAY
10084: ST_TO_ADDR
// end ; end ;
10085: GO 9884
10087: POP
10088: POP
// veh = CreateVehicle ;
10089: LD_ADDR_VAR 0 16
10093: PUSH
10094: CALL_OW 45
10098: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10099: LD_VAR 0 16
10103: PPUSH
10104: LD_VAR 0 1
10108: PPUSH
10109: LD_INT 0
10111: PPUSH
10112: CALL_OW 49
// if vehcontrol = 1 then
10116: LD_VAR 0 7
10120: PUSH
10121: LD_INT 1
10123: EQUAL
10124: IFFALSE 10181
// begin hc_gallery =  ;
10126: LD_ADDR_OWVAR 33
10130: PUSH
10131: LD_STRING 
10133: ST_TO_ADDR
// hc_name =  ;
10134: LD_ADDR_OWVAR 26
10138: PUSH
10139: LD_STRING 
10141: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10142: LD_INT 0
10144: PPUSH
10145: LD_INT 3
10147: PPUSH
10148: LD_VAR 0 4
10152: PPUSH
10153: CALL_OW 380
// un = CreateHuman ;
10157: LD_ADDR_VAR 0 15
10161: PUSH
10162: CALL_OW 44
10166: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10167: LD_VAR 0 15
10171: PPUSH
10172: LD_VAR 0 16
10176: PPUSH
10177: CALL_OW 52
// end ; i = i + 1 ;
10181: LD_ADDR_VAR 0 13
10185: PUSH
10186: LD_VAR 0 13
10190: PUSH
10191: LD_INT 1
10193: PLUS
10194: ST_TO_ADDR
// end ; until i = vehCount ;
10195: LD_VAR 0 13
10199: PUSH
10200: LD_VAR 0 3
10204: EQUAL
10205: IFFALSE 8857
// repeat wait ( 0 0$1 ) ;
10207: LD_INT 35
10209: PPUSH
10210: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10214: LD_ADDR_VAR 0 20
10218: PUSH
10219: LD_INT 22
10221: PUSH
10222: LD_VAR 0 2
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: LD_INT 21
10233: PUSH
10234: LD_INT 2
10236: PUSH
10237: EMPTY
10238: LIST
10239: LIST
10240: PUSH
10241: LD_INT 24
10243: PUSH
10244: LD_INT 661
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: PPUSH
10256: CALL_OW 69
10260: ST_TO_ADDR
// if vehicleOK_list > 0 then
10261: LD_VAR 0 20
10265: PUSH
10266: LD_INT 0
10268: GREATER
10269: IFFALSE 10460
// begin for i in vehicleOK_list do
10271: LD_ADDR_VAR 0 13
10275: PUSH
10276: LD_VAR 0 20
10280: PUSH
10281: FOR_IN
10282: IFFALSE 10458
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10284: LD_ADDR_VAR 0 21
10288: PUSH
10289: LD_INT 22
10291: PUSH
10292: LD_VAR 0 11
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PPUSH
10301: CALL_OW 69
10305: PPUSH
10306: LD_VAR 0 13
10310: PPUSH
10311: CALL_OW 74
10315: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10316: LD_ADDR_VAR 0 22
10320: PUSH
10321: LD_INT 22
10323: PUSH
10324: LD_VAR 0 11
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 2
10335: PUSH
10336: LD_INT 59
10338: PUSH
10339: EMPTY
10340: LIST
10341: PUSH
10342: LD_INT 21
10344: PUSH
10345: LD_INT 1
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 21
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: PPUSH
10375: CALL_OW 69
10379: PPUSH
10380: LD_VAR 0 13
10384: PPUSH
10385: CALL_OW 74
10389: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10390: LD_VAR 0 13
10394: PPUSH
10395: LD_VAR 0 21
10399: PPUSH
10400: CALL_OW 296
10404: PUSH
10405: LD_INT 8
10407: PLUS
10408: PUSH
10409: LD_VAR 0 13
10413: PPUSH
10414: LD_VAR 0 22
10418: PPUSH
10419: CALL_OW 296
10423: LESS
10424: IFFALSE 10442
// begin ComAttackUnit ( i , target1 ) ;
10426: LD_VAR 0 13
10430: PPUSH
10431: LD_VAR 0 21
10435: PPUSH
10436: CALL_OW 115
// end else
10440: GO 10456
// begin ComAttackUnit ( i , target2 ) ;
10442: LD_VAR 0 13
10446: PPUSH
10447: LD_VAR 0 22
10451: PPUSH
10452: CALL_OW 115
// end ; end ;
10456: GO 10281
10458: POP
10459: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10460: LD_INT 22
10462: PUSH
10463: LD_VAR 0 2
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 21
10474: PUSH
10475: LD_INT 2
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 69
10490: PUSH
10491: LD_INT 0
10493: EQUAL
10494: IFFALSE 10207
// end ; end_of_file
10496: LD_VAR 0 12
10500: RET
// every 1 do var i , gammaSquad , startX , startY ;
10501: GO 10503
10503: DISABLE
10504: LD_INT 0
10506: PPUSH
10507: PPUSH
10508: PPUSH
10509: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10510: LD_ADDR_VAR 0 2
10514: PUSH
10515: LD_EXP 8
10519: PUSH
10520: LD_EXP 9
10524: PUSH
10525: LD_EXP 10
10529: PUSH
10530: LD_EXP 11
10534: PUSH
10535: LD_EXP 12
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10547: LD_ADDR_VAR 0 3
10551: PUSH
10552: LD_INT 46
10554: PUSH
10555: LD_INT 45
10557: PUSH
10558: LD_INT 44
10560: PUSH
10561: LD_INT 43
10563: PUSH
10564: LD_INT 42
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10574: LD_ADDR_VAR 0 4
10578: PUSH
10579: LD_INT 14
10581: PUSH
10582: LD_INT 12
10584: PUSH
10585: LD_INT 10
10587: PUSH
10588: LD_INT 8
10590: PUSH
10591: LD_INT 6
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10601: LD_INT 32
10603: PPUSH
10604: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10608: LD_INT 32
10610: PPUSH
10611: LD_INT 51
10613: PPUSH
10614: LD_INT 26
10616: PPUSH
10617: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10621: LD_INT 32
10623: PPUSH
10624: LD_INT 53
10626: PPUSH
10627: LD_INT 23
10629: PPUSH
10630: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10634: LD_INT 32
10636: PPUSH
10637: LD_INT 52
10639: PPUSH
10640: LD_INT 19
10642: PPUSH
10643: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10647: LD_INT 35
10649: PPUSH
10650: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10654: LD_INT 32
10656: PPUSH
10657: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10661: LD_INT 32
10663: PPUSH
10664: CALL_OW 250
10668: PUSH
10669: LD_INT 52
10671: EQUAL
10672: PUSH
10673: LD_INT 32
10675: PPUSH
10676: CALL_OW 251
10680: PUSH
10681: LD_INT 19
10683: EQUAL
10684: AND
10685: IFFALSE 10647
// ComExitVehicle ( JMM ) ;
10687: LD_EXP 1
10691: PPUSH
10692: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10696: LD_EXP 7
10700: PPUSH
10701: LD_EXP 1
10705: PPUSH
10706: CALL_OW 119
// wait ( 0 0$01 ) ;
10710: LD_INT 35
10712: PPUSH
10713: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10717: LD_EXP 1
10721: PPUSH
10722: LD_INT 46
10724: PPUSH
10725: LD_INT 10
10727: PPUSH
10728: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10732: LD_EXP 1
10736: PPUSH
10737: LD_EXP 7
10741: PPUSH
10742: CALL_OW 179
// wait ( 0 0$4 ) ;
10746: LD_INT 140
10748: PPUSH
10749: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10753: LD_EXP 1
10757: PPUSH
10758: LD_STRING D1-JMM-1
10760: PPUSH
10761: CALL_OW 88
// for i := 1 to gammaSquad do
10765: LD_ADDR_VAR 0 1
10769: PUSH
10770: DOUBLE
10771: LD_INT 1
10773: DEC
10774: ST_TO_ADDR
10775: LD_VAR 0 2
10779: PUSH
10780: FOR_TO
10781: IFFALSE 10842
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10783: LD_VAR 0 2
10787: PUSH
10788: LD_VAR 0 1
10792: ARRAY
10793: PPUSH
10794: LD_VAR 0 3
10798: PUSH
10799: LD_VAR 0 1
10803: ARRAY
10804: PPUSH
10805: LD_VAR 0 4
10809: PUSH
10810: LD_VAR 0 1
10814: ARRAY
10815: PPUSH
10816: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10820: LD_VAR 0 2
10824: PUSH
10825: LD_VAR 0 1
10829: ARRAY
10830: PPUSH
10831: LD_EXP 1
10835: PPUSH
10836: CALL_OW 179
// end ;
10840: GO 10780
10842: POP
10843: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
10844: LD_EXP 4
10848: PPUSH
10849: LD_INT 41
10851: PPUSH
10852: LD_INT 4
10854: PPUSH
10855: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
10859: LD_EXP 4
10863: PPUSH
10864: LD_EXP 1
10868: PPUSH
10869: CALL_OW 179
// if Lisa = false and Bobby then
10873: LD_EXP 4
10877: PUSH
10878: LD_INT 0
10880: EQUAL
10881: PUSH
10882: LD_EXP 2
10886: AND
10887: IFFALSE 10918
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
10889: LD_EXP 2
10893: PPUSH
10894: LD_INT 41
10896: PPUSH
10897: LD_INT 4
10899: PPUSH
10900: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
10904: LD_EXP 2
10908: PPUSH
10909: LD_EXP 1
10913: PPUSH
10914: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
10918: LD_EXP 4
10922: PUSH
10923: LD_INT 0
10925: EQUAL
10926: PUSH
10927: LD_EXP 2
10931: PUSH
10932: LD_INT 0
10934: EQUAL
10935: AND
10936: PUSH
10937: LD_EXP 3
10941: AND
10942: IFFALSE 10973
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
10944: LD_EXP 3
10948: PPUSH
10949: LD_INT 41
10951: PPUSH
10952: LD_INT 4
10954: PPUSH
10955: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
10959: LD_EXP 3
10963: PPUSH
10964: LD_EXP 1
10968: PPUSH
10969: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
10973: LD_EXP 4
10977: PUSH
10978: LD_INT 0
10980: EQUAL
10981: PUSH
10982: LD_EXP 2
10986: PUSH
10987: LD_INT 0
10989: EQUAL
10990: AND
10991: PUSH
10992: LD_EXP 3
10996: PUSH
10997: LD_INT 0
10999: EQUAL
11000: AND
11001: IFFALSE 11032
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11003: LD_EXP 6
11007: PPUSH
11008: LD_INT 41
11010: PPUSH
11011: LD_INT 4
11013: PPUSH
11014: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11018: LD_EXP 6
11022: PPUSH
11023: LD_EXP 1
11027: PPUSH
11028: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11032: LD_EXP 7
11036: PPUSH
11037: LD_STRING D1-Brown-1
11039: PPUSH
11040: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11044: LD_EXP 1
11048: PPUSH
11049: LD_STRING D1-JMM-2
11051: PPUSH
11052: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11056: LD_EXP 7
11060: PPUSH
11061: LD_STRING D1-Brown-2
11063: PPUSH
11064: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11068: LD_EXP 1
11072: PPUSH
11073: LD_EXP 9
11077: PPUSH
11078: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11082: LD_EXP 9
11086: PPUSH
11087: LD_STRING D1-FSol1-2
11089: PPUSH
11090: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11094: LD_EXP 1
11098: PPUSH
11099: LD_EXP 8
11103: PPUSH
11104: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11108: LD_EXP 8
11112: PPUSH
11113: LD_STRING D1-Sol2-2
11115: PPUSH
11116: CALL_OW 88
// if Lisa then
11120: LD_EXP 4
11124: IFFALSE 11164
// begin ComTurnUnit ( JMM , Lisa ) ;
11126: LD_EXP 1
11130: PPUSH
11131: LD_EXP 4
11135: PPUSH
11136: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11140: LD_EXP 4
11144: PPUSH
11145: LD_STRING D1-Lisa-2
11147: PPUSH
11148: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11152: LD_EXP 1
11156: PPUSH
11157: LD_STRING D1-JMM-3
11159: PPUSH
11160: CALL_OW 88
// end ; if Bobby then
11164: LD_EXP 2
11168: IFFALSE 11208
// begin ComTurnUnit ( JMM , Bobby ) ;
11170: LD_EXP 1
11174: PPUSH
11175: LD_EXP 2
11179: PPUSH
11180: CALL_OW 119
// Say ( Bobby , D1-Bobby-22 ) ;
11184: LD_EXP 2
11188: PPUSH
11189: LD_STRING D1-Bobby-22
11191: PPUSH
11192: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11196: LD_EXP 1
11200: PPUSH
11201: LD_STRING D1-JMM-3
11203: PPUSH
11204: CALL_OW 88
// end ; if Cyrus then
11208: LD_EXP 3
11212: IFFALSE 11252
// begin ComTurnUnit ( JMM , Cyrus ) ;
11214: LD_EXP 1
11218: PPUSH
11219: LD_EXP 3
11223: PPUSH
11224: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11228: LD_EXP 3
11232: PPUSH
11233: LD_STRING D1-Cyrus-2
11235: PPUSH
11236: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11240: LD_EXP 1
11244: PPUSH
11245: LD_STRING D1-JMM-3
11247: PPUSH
11248: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11252: LD_EXP 1
11256: PPUSH
11257: LD_EXP 7
11261: PPUSH
11262: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11266: LD_EXP 1
11270: PPUSH
11271: LD_STRING D1-JMM-3a
11273: PPUSH
11274: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11278: LD_EXP 7
11282: PPUSH
11283: LD_INT 38
11285: PPUSH
11286: LD_INT 5
11288: PPUSH
11289: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11293: LD_EXP 7
11297: PPUSH
11298: LD_EXP 1
11302: PPUSH
11303: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11307: LD_EXP 1
11311: PPUSH
11312: LD_INT 40
11314: PPUSH
11315: LD_INT 7
11317: PPUSH
11318: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11322: LD_EXP 1
11326: PPUSH
11327: LD_EXP 7
11331: PPUSH
11332: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11336: LD_EXP 7
11340: PPUSH
11341: LD_STRING D1-Brown-3
11343: PPUSH
11344: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11348: LD_EXP 14
11352: PPUSH
11353: LD_STRING D1-Har-3
11355: PPUSH
11356: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11360: LD_EXP 1
11364: PPUSH
11365: LD_STRING D1-JMM-4
11367: PPUSH
11368: CALL_OW 88
// PrepareRussianConvoy ;
11372: CALL 2348 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
11376: LD_EXP 14
11380: PPUSH
11381: LD_STRING D1-Har-4
11383: PPUSH
11384: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11388: LD_EXP 1
11392: PPUSH
11393: LD_STRING D1-JMM-5
11395: PPUSH
11396: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11400: LD_EXP 14
11404: PPUSH
11405: LD_STRING D1-Har-5
11407: PPUSH
11408: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11412: LD_EXP 1
11416: PPUSH
11417: LD_STRING D1-JMM-6
11419: PPUSH
11420: CALL_OW 88
// InGameOff ;
11424: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
11428: LD_STRING M1
11430: PPUSH
11431: CALL_OW 337
// SaveForQuickRestart ;
11435: CALL_OW 22
// timerStatus = 1 ;
11439: LD_ADDR_EXP 27
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// startTimer = 1 ;
11447: LD_ADDR_EXP 28
11451: PUSH
11452: LD_INT 1
11454: ST_TO_ADDR
// bonusAvalaible = 1 ;
11455: LD_ADDR_EXP 40
11459: PUSH
11460: LD_INT 1
11462: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11463: LD_INT 105
11465: PPUSH
11466: CALL_OW 67
// DialogueOn ;
11470: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11474: LD_EXP 12
11478: PPUSH
11479: LD_STRING D9-Mech1-1
11481: PPUSH
11482: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11486: LD_EXP 1
11490: PPUSH
11491: LD_STRING D9-JMM-1
11493: PPUSH
11494: CALL_OW 88
// DialogueOff ;
11498: CALL_OW 7
// end ;
11502: PPOPN 4
11504: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11505: LD_INT 47
11507: PPUSH
11508: LD_INT 1
11510: PPUSH
11511: CALL_OW 321
11515: PUSH
11516: LD_INT 2
11518: EQUAL
11519: PUSH
11520: LD_INT 22
11522: PUSH
11523: LD_INT 1
11525: PUSH
11526: EMPTY
11527: LIST
11528: LIST
11529: PUSH
11530: LD_INT 21
11532: PUSH
11533: LD_INT 3
11535: PUSH
11536: EMPTY
11537: LIST
11538: LIST
11539: PUSH
11540: LD_INT 30
11542: PUSH
11543: LD_INT 3
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: LIST
11554: PPUSH
11555: CALL_OW 69
11559: PUSH
11560: LD_INT 0
11562: GREATER
11563: AND
11564: IFFALSE 11794
11566: GO 11568
11568: DISABLE
// begin if IsOk ( Campell ) then
11569: LD_EXP 12
11573: PPUSH
11574: CALL_OW 302
11578: IFFALSE 11594
// begin Say ( Campell , D10-Mech1-1 ) ;
11580: LD_EXP 12
11584: PPUSH
11585: LD_STRING D10-Mech1-1
11587: PPUSH
11588: CALL_OW 88
// end else
11592: GO 11794
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11594: LD_INT 22
11596: PUSH
11597: LD_INT 1
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: LD_INT 21
11606: PUSH
11607: LD_INT 1
11609: PUSH
11610: EMPTY
11611: LIST
11612: LIST
11613: PUSH
11614: LD_INT 25
11616: PUSH
11617: LD_INT 3
11619: PUSH
11620: EMPTY
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 26
11626: PUSH
11627: LD_INT 1
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: PPUSH
11640: CALL_OW 69
11644: PUSH
11645: LD_EXP 1
11649: PUSH
11650: EMPTY
11651: LIST
11652: PUSH
11653: LD_INT 0
11655: GREATER
11656: DIFF
11657: IFFALSE 11731
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11659: LD_INT 22
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: EMPTY
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 21
11671: PUSH
11672: LD_INT 1
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: PUSH
11679: LD_INT 25
11681: PUSH
11682: LD_INT 3
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: PUSH
11689: LD_INT 26
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PPUSH
11705: CALL_OW 69
11709: PUSH
11710: LD_EXP 1
11714: PUSH
11715: EMPTY
11716: LIST
11717: DIFF
11718: PPUSH
11719: LD_STRING D10-Mech1-1
11721: PPUSH
11722: LD_STRING D10-Mech1-1
11724: PPUSH
11725: CALL 3578 0 3
// end else
11729: GO 11794
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11731: LD_INT 22
11733: PUSH
11734: LD_INT 1
11736: PUSH
11737: EMPTY
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 21
11743: PUSH
11744: LD_INT 1
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: PUSH
11751: LD_INT 26
11753: PUSH
11754: LD_INT 1
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: PUSH
11766: LD_INT 1
11768: ARRAY
11769: PPUSH
11770: CALL_OW 69
11774: PUSH
11775: LD_EXP 1
11779: PUSH
11780: EMPTY
11781: LIST
11782: DIFF
11783: PPUSH
11784: LD_STRING D10-Mech1-1
11786: PPUSH
11787: LD_STRING D10-Mech1-1
11789: PPUSH
11790: CALL 3578 0 3
// end ; end ; end ;
11794: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11795: LD_INT 22
11797: PUSH
11798: LD_INT 1
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: PUSH
11805: LD_INT 30
11807: PUSH
11808: LD_INT 32
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: PPUSH
11819: CALL_OW 69
11823: PUSH
11824: LD_INT 0
11826: GREATER
11827: PUSH
11828: LD_EXP 30
11832: PUSH
11833: LD_INT 0
11835: EQUAL
11836: AND
11837: IFFALSE 12077
11839: GO 11841
11841: DISABLE
// begin if IsOK ( Claptopn ) then
11842: LD_EXP 11
11846: PPUSH
11847: CALL_OW 302
11851: IFFALSE 11867
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
11853: LD_EXP 11
11857: PPUSH
11858: LD_STRING D9b-Eng1-1
11860: PPUSH
11861: CALL_OW 88
// end else
11865: GO 12063
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11867: LD_INT 22
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 21
11879: PUSH
11880: LD_INT 1
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: LD_INT 25
11889: PUSH
11890: LD_INT 3
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: PUSH
11897: LD_INT 26
11899: PUSH
11900: LD_INT 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: PPUSH
11913: CALL_OW 69
11917: PUSH
11918: LD_EXP 1
11922: PUSH
11923: EMPTY
11924: LIST
11925: PUSH
11926: LD_INT 0
11928: GREATER
11929: DIFF
11930: IFFALSE 12004
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11932: LD_INT 22
11934: PUSH
11935: LD_INT 1
11937: PUSH
11938: EMPTY
11939: LIST
11940: LIST
11941: PUSH
11942: LD_INT 21
11944: PUSH
11945: LD_INT 1
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 25
11954: PUSH
11955: LD_INT 2
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: LD_INT 26
11964: PUSH
11965: LD_INT 1
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: PPUSH
11978: CALL_OW 69
11982: PUSH
11983: LD_EXP 1
11987: PUSH
11988: EMPTY
11989: LIST
11990: DIFF
11991: PPUSH
11992: LD_STRING D9b-Eng1-1
11994: PPUSH
11995: LD_STRING D9b-Eng1-11
11997: PPUSH
11998: CALL 3578 0 3
// end else
12002: GO 12063
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12004: LD_INT 22
12006: PUSH
12007: LD_INT 1
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: LD_INT 21
12016: PUSH
12017: LD_INT 1
12019: PUSH
12020: EMPTY
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 26
12026: PUSH
12027: LD_INT 1
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: LIST
12038: PPUSH
12039: CALL_OW 69
12043: PUSH
12044: LD_EXP 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: DIFF
12052: PPUSH
12053: LD_STRING D9b-Eng1-1
12055: PPUSH
12056: LD_STRING D9b-Eng1-1
12058: PPUSH
12059: CALL 3578 0 3
// end ; end ; if energyVDialog = 0 then
12063: LD_EXP 31
12067: PUSH
12068: LD_INT 0
12070: EQUAL
12071: IFFALSE 12077
// EnergyDialog ;
12073: CALL 3890 0 0
// end ;
12077: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12078: LD_EXP 32
12082: PUSH
12083: LD_INT 1
12085: EQUAL
12086: PUSH
12087: LD_EXP 33
12091: PUSH
12092: LD_INT 1
12094: EQUAL
12095: AND
12096: IFFALSE 12108
12098: GO 12100
12100: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12101: LD_STRING M1a
12103: PPUSH
12104: CALL_OW 337
12108: END
// every 3 3$0 do
12109: GO 12111
12111: DISABLE
// begin PrepareFirstAttack ;
12112: CALL 3140 0 0
// end ;
12116: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12117: LD_INT 22
12119: PUSH
12120: LD_INT 5
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 21
12129: PUSH
12130: LD_INT 1
12132: PUSH
12133: EMPTY
12134: LIST
12135: LIST
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 69
12145: PUSH
12146: LD_INT 3
12148: LESSEQUAL
12149: PUSH
12150: LD_EXP 21
12154: PUSH
12155: LD_INT 1
12157: EQUAL
12158: AND
12159: IFFALSE 12477
12161: GO 12163
12163: DISABLE
12164: LD_INT 0
12166: PPUSH
// begin firstRussianAttack = 2 ;
12167: LD_ADDR_EXP 21
12171: PUSH
12172: LD_INT 2
12174: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12175: LD_ADDR_VAR 0 1
12179: PUSH
12180: LD_INT 22
12182: PUSH
12183: LD_INT 5
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 21
12192: PUSH
12193: LD_INT 1
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: PPUSH
12204: CALL_OW 69
12208: PUSH
12209: FOR_IN
12210: IFFALSE 12229
// ComMoveXY ( i , 125 , 98 ) ;
12212: LD_VAR 0 1
12216: PPUSH
12217: LD_INT 125
12219: PPUSH
12220: LD_INT 98
12222: PPUSH
12223: CALL_OW 111
12227: GO 12209
12229: POP
12230: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12231: LD_INT 22
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: PUSH
12241: LD_INT 21
12243: PUSH
12244: LD_INT 1
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: PUSH
12251: EMPTY
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PUSH
12260: LD_EXP 1
12264: PUSH
12265: LD_EXP 7
12269: PUSH
12270: LD_EXP 4
12274: PUSH
12275: EMPTY
12276: LIST
12277: LIST
12278: LIST
12279: DIFF
12280: PPUSH
12281: LD_STRING DAtt1-Sol1-1
12283: PPUSH
12284: LD_STRING DAtt1-FSol1-1
12286: PPUSH
12287: CALL 3578 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12291: LD_EXP 1
12295: PPUSH
12296: LD_STRING DAtt1-JMM-1
12298: PPUSH
12299: CALL_OW 88
// if Lisa then
12303: LD_EXP 4
12307: IFFALSE 12323
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12309: LD_EXP 4
12313: PPUSH
12314: LD_STRING DAtt1a-Lisa-1
12316: PPUSH
12317: CALL_OW 88
// end else
12321: GO 12394
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12323: LD_INT 22
12325: PUSH
12326: LD_INT 1
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: PUSH
12333: LD_INT 21
12335: PUSH
12336: LD_INT 1
12338: PUSH
12339: EMPTY
12340: LIST
12341: LIST
12342: PUSH
12343: LD_INT 26
12345: PUSH
12346: LD_INT 1
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: PPUSH
12358: CALL_OW 69
12362: PUSH
12363: LD_EXP 1
12367: PUSH
12368: LD_EXP 7
12372: PUSH
12373: LD_EXP 4
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: DIFF
12383: PPUSH
12384: LD_STRING DAtt1a-Sol1-1
12386: PPUSH
12387: LD_STRING DAtt1-FSol1-1
12389: PPUSH
12390: CALL 3578 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12394: LD_EXP 1
12398: PPUSH
12399: LD_STRING DAtt1a-JMM-1
12401: PPUSH
12402: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12406: LD_INT 22
12408: PUSH
12409: LD_INT 1
12411: PUSH
12412: EMPTY
12413: LIST
12414: LIST
12415: PUSH
12416: LD_INT 21
12418: PUSH
12419: LD_INT 1
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 26
12428: PUSH
12429: LD_INT 1
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: PPUSH
12441: CALL_OW 69
12445: PUSH
12446: LD_EXP 1
12450: PUSH
12451: LD_EXP 7
12455: PUSH
12456: LD_EXP 4
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: DIFF
12466: PPUSH
12467: LD_STRING DAtt1b-Sol1-1
12469: PPUSH
12470: LD_STRING DAtt1a-Sol1-1
12472: PPUSH
12473: CALL 3578 0 3
// end ;
12477: PPOPN 1
12479: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12480: LD_EXP 21
12484: PUSH
12485: LD_INT 2
12487: EQUAL
12488: IFFALSE 12550
12490: GO 12492
12492: DISABLE
12493: LD_INT 0
12495: PPUSH
// begin enable ;
12496: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12497: LD_ADDR_VAR 0 1
12501: PUSH
12502: LD_INT 5
12504: PPUSH
12505: LD_INT 22
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: PUSH
12515: LD_INT 21
12517: PUSH
12518: LD_INT 1
12520: PUSH
12521: EMPTY
12522: LIST
12523: LIST
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PPUSH
12529: CALL_OW 70
12533: PUSH
12534: FOR_IN
12535: IFFALSE 12548
// RemoveUnit ( i ) ;
12537: LD_VAR 0 1
12541: PPUSH
12542: CALL_OW 64
12546: GO 12534
12548: POP
12549: POP
// end ;
12550: PPOPN 1
12552: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12553: LD_INT 22
12555: PUSH
12556: LD_INT 5
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: EMPTY
12564: LIST
12565: PPUSH
12566: CALL_OW 69
12570: PUSH
12571: LD_INT 0
12573: EQUAL
12574: PUSH
12575: LD_EXP 21
12579: PUSH
12580: LD_INT 2
12582: EQUAL
12583: AND
12584: IFFALSE 12597
12586: GO 12588
12588: DISABLE
// firstRussianAttack = 3 ;
12589: LD_ADDR_EXP 21
12593: PUSH
12594: LD_INT 3
12596: ST_TO_ADDR
12597: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12598: LD_EXP 26
12602: PUSH
12603: LD_INT 0
12605: EQUAL
12606: IFFALSE 12687
12608: GO 12610
12610: DISABLE
// begin timerStatus = 4 ;
12611: LD_ADDR_EXP 27
12615: PUSH
12616: LD_INT 4
12618: ST_TO_ADDR
// DialogueOn ;
12619: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12623: LD_EXP 13
12627: PPUSH
12628: LD_STRING D2-Don-1
12630: PPUSH
12631: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12635: LD_EXP 1
12639: PPUSH
12640: LD_STRING D2-JMM-1
12642: PPUSH
12643: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12647: LD_EXP 13
12651: PPUSH
12652: LD_STRING D2-Don-2
12654: PPUSH
12655: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12659: LD_EXP 1
12663: PPUSH
12664: LD_STRING D2-JMM-2
12666: PPUSH
12667: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12671: LD_EXP 13
12675: PPUSH
12676: LD_STRING D2-Don-3
12678: PPUSH
12679: CALL_OW 94
// DialogueOff ;
12683: CALL_OW 7
// end ;
12687: END
// every 12 12$0 do var tmp ;
12688: GO 12690
12690: DISABLE
12691: LD_INT 0
12693: PPUSH
// begin PrepareDonaldsonArmy ;
12694: CALL 925 0 0
// CenterNowOnUnits ( Donaldson ) ;
12698: LD_EXP 13
12702: PPUSH
12703: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12707: LD_ADDR_VAR 0 1
12711: PUSH
12712: LD_INT 22
12714: PUSH
12715: LD_INT 4
12717: PUSH
12718: EMPTY
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 1
12727: PUSH
12728: EMPTY
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 26
12734: PUSH
12735: LD_INT 1
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: PUSH
12742: LD_INT 25
12744: PUSH
12745: LD_INT 1
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_EXP 5
12767: PUSH
12768: EMPTY
12769: LIST
12770: DIFF
12771: ST_TO_ADDR
// DialogueOn ;
12772: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12776: LD_VAR 0 1
12780: PPUSH
12781: LD_STRING D3-Sol1-1
12783: PPUSH
12784: LD_STRING D3-Sol1-1
12786: PPUSH
12787: CALL 3578 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12791: LD_INT 22
12793: PUSH
12794: LD_INT 4
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PUSH
12801: LD_INT 21
12803: PUSH
12804: LD_INT 1
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 26
12813: PUSH
12814: LD_INT 1
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 25
12823: PUSH
12824: LD_INT 3
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: PPUSH
12837: CALL_OW 69
12841: PPUSH
12842: LD_STRING D3-Sol2-1
12844: PPUSH
12845: LD_STRING D3-Sol2-1
12847: PPUSH
12848: CALL 3578 0 3
// if Frank then
12852: LD_EXP 5
12856: IFFALSE 12870
// Say ( Frank , D3-Frank-1 ) ;
12858: LD_EXP 5
12862: PPUSH
12863: LD_STRING D3-Frank-1
12865: PPUSH
12866: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
12870: LD_EXP 13
12874: PPUSH
12875: LD_STRING D3-Don-1
12877: PPUSH
12878: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
12882: LD_EXP 13
12886: PPUSH
12887: LD_STRING D3-Don-1a
12889: PPUSH
12890: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
12894: LD_EXP 1
12898: PPUSH
12899: LD_STRING D3-JMM-1
12901: PPUSH
12902: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
12906: LD_EXP 13
12910: PPUSH
12911: LD_STRING D3-Don-2
12913: PPUSH
12914: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
12918: LD_INT 22
12920: PUSH
12921: LD_INT 6
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 21
12930: PUSH
12931: LD_INT 1
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: PPUSH
12942: CALL_OW 69
12946: PUSH
12947: LD_INT 0
12949: GREATER
12950: IFFALSE 13064
// begin Say ( JMM , D3-JMM-2 ) ;
12952: LD_EXP 1
12956: PPUSH
12957: LD_STRING D3-JMM-2
12959: PPUSH
12960: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12964: LD_EXP 13
12968: PPUSH
12969: LD_STRING D3-Don-3
12971: PPUSH
12972: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
12976: LD_EXP 1
12980: PPUSH
12981: LD_STRING D3-JMM-3
12983: PPUSH
12984: CALL_OW 88
// if IsOK ( Frank ) then
12988: LD_EXP 5
12992: PPUSH
12993: CALL_OW 302
12997: IFFALSE 13011
// Say ( Frank , D3-Frank-3 ) ;
12999: LD_EXP 5
13003: PPUSH
13004: LD_STRING D3-Frank-3
13006: PPUSH
13007: CALL_OW 88
// DialogueOff ;
13011: CALL_OW 7
// if IsOK ( Frank ) then
13015: LD_EXP 5
13019: PPUSH
13020: CALL_OW 302
13024: IFFALSE 13062
// begin SetSide ( Frank , 0 ) ;
13026: LD_EXP 5
13030: PPUSH
13031: LD_INT 0
13033: PPUSH
13034: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13038: LD_EXP 5
13042: PPUSH
13043: LD_INT 12
13045: PPUSH
13046: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13050: LD_EXP 5
13054: PPUSH
13055: LD_STRING Frank
13057: PPUSH
13058: CALL_OW 38
// end ; end else
13062: GO 13127
// begin Say ( JMM , D3-JMM-4 ) ;
13064: LD_EXP 1
13068: PPUSH
13069: LD_STRING D3-JMM-4
13071: PPUSH
13072: CALL_OW 88
// DialogueOff ;
13076: CALL_OW 7
// if IsOK ( Frank ) then
13080: LD_EXP 5
13084: PPUSH
13085: CALL_OW 302
13089: IFFALSE 13127
// begin SetSide ( Frank , 0 ) ;
13091: LD_EXP 5
13095: PPUSH
13096: LD_INT 0
13098: PPUSH
13099: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13103: LD_EXP 5
13107: PPUSH
13108: LD_INT 12
13110: PPUSH
13111: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13115: LD_EXP 5
13119: PPUSH
13120: LD_STRING Frank
13122: PPUSH
13123: CALL_OW 38
// end ; end ; end ;
13127: PPOPN 1
13129: END
// every 0 0$1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13130: LD_EXP 5
13134: PPUSH
13135: LD_INT 12
13137: PPUSH
13138: CALL_OW 308
13142: PUSH
13143: LD_EXP 5
13147: PPUSH
13148: CALL_OW 255
13152: PUSH
13153: LD_INT 0
13155: EQUAL
13156: AND
13157: IFFALSE 13179
13159: GO 13161
13161: DISABLE
// begin RemoveUnit ( Frank ) ;
13162: LD_EXP 5
13166: PPUSH
13167: CALL_OW 64
// frankScoutBase = 1 ;
13171: LD_ADDR_EXP 23
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// end ;
13179: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13180: LD_EXP 13
13184: PPUSH
13185: CALL_OW 255
13189: PUSH
13190: LD_INT 4
13192: EQUAL
13193: PUSH
13194: LD_EXP 13
13198: PPUSH
13199: CALL_OW 302
13203: AND
13204: IFFALSE 13229
13206: GO 13208
13208: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13209: LD_EXP 13
13213: PPUSH
13214: LD_STRING D3b-Don-1
13216: PPUSH
13217: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13221: LD_ADDR_EXP 39
13225: PUSH
13226: LD_INT 1
13228: ST_TO_ADDR
// end ;
13229: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13230: LD_EXP 22
13234: PUSH
13235: LD_INT 0
13237: EQUAL
13238: IFFALSE 13394
13240: GO 13242
13242: DISABLE
13243: LD_INT 0
13245: PPUSH
13246: PPUSH
// begin enable ;
13247: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13248: LD_ADDR_VAR 0 1
13252: PUSH
13253: LD_INT 22
13255: PUSH
13256: LD_INT 4
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 21
13265: PUSH
13266: LD_INT 1
13268: PUSH
13269: EMPTY
13270: LIST
13271: LIST
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: PPUSH
13277: CALL_OW 69
13281: PUSH
13282: FOR_IN
13283: IFFALSE 13392
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13285: LD_ADDR_VAR 0 2
13289: PUSH
13290: LD_INT 22
13292: PUSH
13293: LD_INT 1
13295: PUSH
13296: EMPTY
13297: LIST
13298: LIST
13299: PUSH
13300: LD_INT 21
13302: PUSH
13303: LD_INT 1
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PPUSH
13314: CALL_OW 69
13318: PUSH
13319: FOR_IN
13320: IFFALSE 13388
// begin if GetDistUnits ( i , j ) < 5 then
13322: LD_VAR 0 1
13326: PPUSH
13327: LD_VAR 0 2
13331: PPUSH
13332: CALL_OW 296
13336: PUSH
13337: LD_INT 5
13339: LESS
13340: IFFALSE 13386
// begin saveDonaldson = 1 ;
13342: LD_ADDR_EXP 22
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13350: LD_INT 22
13352: PUSH
13353: LD_INT 4
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 21
13362: PUSH
13363: LD_INT 1
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PPUSH
13374: CALL_OW 69
13378: PPUSH
13379: LD_INT 1
13381: PPUSH
13382: CALL_OW 235
// end ; end ;
13386: GO 13319
13388: POP
13389: POP
// end ;
13390: GO 13282
13392: POP
13393: POP
// end ;
13394: PPOPN 2
13396: END
// every 2 2$0 trigger saveDonaldson = 1 do
13397: LD_EXP 22
13401: PUSH
13402: LD_INT 1
13404: EQUAL
13405: IFFALSE 13647
13407: GO 13409
13409: DISABLE
// begin uc_side = 4 ;
13410: LD_ADDR_OWVAR 20
13414: PUSH
13415: LD_INT 4
13417: ST_TO_ADDR
// uc_nation = 1 ;
13418: LD_ADDR_OWVAR 21
13422: PUSH
13423: LD_INT 1
13425: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13426: LD_ADDR_EXP 5
13430: PUSH
13431: LD_STRING Frank
13433: PPUSH
13434: CALL_OW 34
13438: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13439: LD_EXP 5
13443: PPUSH
13444: LD_INT 13
13446: PPUSH
13447: LD_INT 0
13449: PPUSH
13450: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13454: LD_INT 35
13456: PPUSH
13457: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13461: LD_EXP 5
13465: PPUSH
13466: LD_INT 51
13468: PPUSH
13469: LD_INT 15
13471: PPUSH
13472: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13476: LD_EXP 5
13480: PPUSH
13481: LD_EXP 1
13485: PPUSH
13486: CALL_OW 296
13490: PUSH
13491: LD_INT 6
13493: LESS
13494: IFFALSE 13454
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13496: LD_EXP 1
13500: PUSH
13501: LD_EXP 5
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 87
// DialogueOn ;
13514: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13518: LD_EXP 5
13522: PPUSH
13523: LD_STRING D3a-Frank-1
13525: PPUSH
13526: CALL_OW 88
// if Lisa then
13530: LD_EXP 4
13534: IFFALSE 13584
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13536: LD_EXP 4
13540: PPUSH
13541: LD_STRING D3a-Lisa-1
13543: PPUSH
13544: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13548: LD_EXP 5
13552: PPUSH
13553: LD_STRING D3a-Frank-2
13555: PPUSH
13556: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13560: LD_EXP 4
13564: PPUSH
13565: LD_STRING D3a-Lisa-2
13567: PPUSH
13568: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13572: LD_EXP 5
13576: PPUSH
13577: LD_STRING D3a-Frank-3
13579: PPUSH
13580: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13584: LD_EXP 1
13588: PPUSH
13589: LD_STRING D3a-JMM-3
13591: PPUSH
13592: CALL_OW 88
// DialogueOff ;
13596: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13600: LD_EXP 5
13604: PPUSH
13605: LD_INT 1
13607: PPUSH
13608: CALL_OW 235
// InGameOn ;
13612: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13616: LD_INT 1
13618: PPUSH
13619: LD_INT 7
13621: PPUSH
13622: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13626: LD_INT 93
13628: PPUSH
13629: LD_INT 91
13631: PPUSH
13632: CALL_OW 84
// wait ( 0 0$5 ) ;
13636: LD_INT 175
13638: PPUSH
13639: CALL_OW 67
// InGameOff ;
13643: CALL_OW 9
// end ;
13647: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13648: LD_OWVAR 67
13652: PUSH
13653: LD_INT 2
13655: EQUAL
13656: PUSH
13657: LD_OWVAR 67
13661: PUSH
13662: LD_INT 3
13664: EQUAL
13665: OR
13666: IFFALSE 13690
13668: GO 13670
13670: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13671: LD_INT 24
13673: PPUSH
13674: LD_INT 24
13676: PPUSH
13677: LD_INT 1
13679: PPUSH
13680: LD_INT 1
13682: PPUSH
13683: LD_INT 53
13685: PPUSH
13686: CALL_OW 125
13690: END
// every 18 18$0 do
13691: GO 13693
13693: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13694: LD_EXP 14
13698: PPUSH
13699: LD_STRING D4-Har-1
13701: PPUSH
13702: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13706: LD_EXP 1
13710: PPUSH
13711: LD_STRING D4-JMM-1
13713: PPUSH
13714: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13718: LD_EXP 14
13722: PPUSH
13723: LD_STRING D4-Har-2
13725: PPUSH
13726: CALL_OW 94
// case query ( Q1 ) of 1 :
13730: LD_STRING Q1
13732: PPUSH
13733: CALL_OW 97
13737: PUSH
13738: LD_INT 1
13740: DOUBLE
13741: EQUAL
13742: IFTRUE 13746
13744: GO 13805
13746: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13747: LD_EXP 1
13751: PPUSH
13752: LD_STRING D5-JMM-1
13754: PPUSH
13755: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
13759: LD_EXP 14
13763: PPUSH
13764: LD_STRING D5-Har-1
13766: PPUSH
13767: CALL_OW 94
// timeToSupport = 10 10$0 ;
13771: LD_ADDR_EXP 26
13775: PUSH
13776: LD_INT 21000
13778: ST_TO_ADDR
// timerStatus = 2 ;
13779: LD_ADDR_EXP 27
13783: PUSH
13784: LD_INT 2
13786: ST_TO_ADDR
// startTimer = 1 ;
13787: LD_ADDR_EXP 28
13791: PUSH
13792: LD_INT 1
13794: ST_TO_ADDR
// harrAnswer = 1 ;
13795: LD_ADDR_EXP 24
13799: PUSH
13800: LD_INT 1
13802: ST_TO_ADDR
// end ; 2 :
13803: GO 13940
13805: LD_INT 2
13807: DOUBLE
13808: EQUAL
13809: IFTRUE 13813
13811: GO 13872
13813: POP
// begin Say ( JMM , D5-JMM-2 ) ;
13814: LD_EXP 1
13818: PPUSH
13819: LD_STRING D5-JMM-2
13821: PPUSH
13822: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
13826: LD_EXP 14
13830: PPUSH
13831: LD_STRING D5-Har-2
13833: PPUSH
13834: CALL_OW 94
// timeToSupport = 5 5$0 ;
13838: LD_ADDR_EXP 26
13842: PUSH
13843: LD_INT 10500
13845: ST_TO_ADDR
// timerStatus = 2 ;
13846: LD_ADDR_EXP 27
13850: PUSH
13851: LD_INT 2
13853: ST_TO_ADDR
// startTimer = 1 ;
13854: LD_ADDR_EXP 28
13858: PUSH
13859: LD_INT 1
13861: ST_TO_ADDR
// harrAnswer = 2 ;
13862: LD_ADDR_EXP 24
13866: PUSH
13867: LD_INT 2
13869: ST_TO_ADDR
// end ; 3 :
13870: GO 13940
13872: LD_INT 3
13874: DOUBLE
13875: EQUAL
13876: IFTRUE 13880
13878: GO 13939
13880: POP
// begin Say ( JMM , D5-JMM-3 ) ;
13881: LD_EXP 1
13885: PPUSH
13886: LD_STRING D5-JMM-3
13888: PPUSH
13889: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
13893: LD_EXP 14
13897: PPUSH
13898: LD_STRING D5-Har-3
13900: PPUSH
13901: CALL_OW 94
// timeToSupport = 5 5$0 ;
13905: LD_ADDR_EXP 26
13909: PUSH
13910: LD_INT 10500
13912: ST_TO_ADDR
// timerStatus = 2 ;
13913: LD_ADDR_EXP 27
13917: PUSH
13918: LD_INT 2
13920: ST_TO_ADDR
// startTimer = 1 ;
13921: LD_ADDR_EXP 28
13925: PUSH
13926: LD_INT 1
13928: ST_TO_ADDR
// harrAnswer = 3 ;
13929: LD_ADDR_EXP 24
13933: PUSH
13934: LD_INT 3
13936: ST_TO_ADDR
// end ; end ;
13937: GO 13940
13939: POP
// end ;
13940: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
13941: LD_EXP 27
13945: PUSH
13946: LD_INT 2
13948: EQUAL
13949: PUSH
13950: LD_EXP 26
13954: PUSH
13955: LD_INT 0
13957: EQUAL
13958: AND
13959: IFFALSE 14236
13961: GO 13963
13963: DISABLE
// begin timerStatus = 4 ;
13964: LD_ADDR_EXP 27
13968: PUSH
13969: LD_INT 4
13971: ST_TO_ADDR
// if harrAnswer = 1 then
13972: LD_EXP 24
13976: PUSH
13977: LD_INT 1
13979: EQUAL
13980: IFFALSE 14060
// begin PrepareHarrisonSupport ( 3 ) ;
13982: LD_INT 3
13984: PPUSH
13985: CALL 1333 0 1
// wait ( 1 1$0 ) ;
13989: LD_INT 2100
13991: PPUSH
13992: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13996: LD_EXP 14
14000: PPUSH
14001: LD_STRING D7-Har-1
14003: PPUSH
14004: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14008: LD_STRING M2
14010: PPUSH
14011: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14015: LD_ADDR_EXP 25
14019: PUSH
14020: LD_INT 31500
14022: PUSH
14023: LD_INT 10500
14025: PUSH
14026: LD_INT 8400
14028: PUSH
14029: LD_INT 6300
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: LD_OWVAR 67
14041: ARRAY
14042: PLUS
14043: ST_TO_ADDR
// startTimer = 1 ;
14044: LD_ADDR_EXP 28
14048: PUSH
14049: LD_INT 1
14051: ST_TO_ADDR
// timerStatus = 3 ;
14052: LD_ADDR_EXP 27
14056: PUSH
14057: LD_INT 3
14059: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14060: LD_EXP 24
14064: PUSH
14065: LD_INT 2
14067: EQUAL
14068: IFFALSE 14148
// begin PrepareHarrisonSupport ( 4 ) ;
14070: LD_INT 4
14072: PPUSH
14073: CALL 1333 0 1
// wait ( 1 1$0 ) ;
14077: LD_INT 2100
14079: PPUSH
14080: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14084: LD_EXP 14
14088: PPUSH
14089: LD_STRING D7-Har-1
14091: PPUSH
14092: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14096: LD_STRING M2
14098: PPUSH
14099: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14103: LD_ADDR_EXP 25
14107: PUSH
14108: LD_INT 27300
14110: PUSH
14111: LD_INT 8400
14113: PUSH
14114: LD_INT 8400
14116: PUSH
14117: LD_INT 6300
14119: PUSH
14120: EMPTY
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_OWVAR 67
14129: ARRAY
14130: PLUS
14131: ST_TO_ADDR
// startTimer = 1 ;
14132: LD_ADDR_EXP 28
14136: PUSH
14137: LD_INT 1
14139: ST_TO_ADDR
// timerStatus = 3 ;
14140: LD_ADDR_EXP 27
14144: PUSH
14145: LD_INT 3
14147: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14148: LD_EXP 24
14152: PUSH
14153: LD_INT 3
14155: EQUAL
14156: IFFALSE 14236
// begin PrepareHarrisonSupport ( 5 ) ;
14158: LD_INT 5
14160: PPUSH
14161: CALL 1333 0 1
// wait ( 1 1$0 ) ;
14165: LD_INT 2100
14167: PPUSH
14168: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14172: LD_EXP 14
14176: PPUSH
14177: LD_STRING D7-Har-1
14179: PPUSH
14180: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14184: LD_STRING M2
14186: PPUSH
14187: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14191: LD_ADDR_EXP 25
14195: PUSH
14196: LD_INT 21000
14198: PUSH
14199: LD_INT 8400
14201: PUSH
14202: LD_INT 6300
14204: PUSH
14205: LD_INT 4200
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: LIST
14212: PUSH
14213: LD_OWVAR 67
14217: ARRAY
14218: PLUS
14219: ST_TO_ADDR
// startTimer = 1 ;
14220: LD_ADDR_EXP 28
14224: PUSH
14225: LD_INT 1
14227: ST_TO_ADDR
// timerStatus = 3 ;
14228: LD_ADDR_EXP 27
14232: PUSH
14233: LD_INT 3
14235: ST_TO_ADDR
// end ; end ;
14236: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14237: LD_EXP 25
14241: PUSH
14242: LD_INT 8400
14244: LESSEQUAL
14245: PUSH
14246: LD_EXP 27
14250: PUSH
14251: LD_INT 3
14253: EQUAL
14254: AND
14255: IFFALSE 14287
14257: GO 14259
14259: DISABLE
// begin DialogueOn ;
14260: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14264: LD_EXP 14
14268: PPUSH
14269: LD_STRING D7a-Har-1
14271: PPUSH
14272: CALL_OW 94
// DialogueOff ;
14276: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14280: LD_STRING M2a
14282: PPUSH
14283: CALL_OW 337
// end ;
14287: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14288: LD_EXP 25
14292: PUSH
14293: LD_INT 0
14295: LESSEQUAL
14296: PUSH
14297: LD_EXP 27
14301: PUSH
14302: LD_INT 3
14304: EQUAL
14305: AND
14306: IFFALSE 14431
14308: GO 14310
14310: DISABLE
14311: LD_INT 0
14313: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14314: LD_ADDR_VAR 0 1
14318: PUSH
14319: LD_INT 22
14321: PUSH
14322: LD_INT 1
14324: PUSH
14325: EMPTY
14326: LIST
14327: LIST
14328: PPUSH
14329: CALL_OW 69
14333: PUSH
14334: LD_EXP 1
14338: PUSH
14339: EMPTY
14340: LIST
14341: DIFF
14342: ST_TO_ADDR
// saveDonaldson = 2 ;
14343: LD_ADDR_EXP 22
14347: PUSH
14348: LD_INT 2
14350: ST_TO_ADDR
// DialogueOn ;
14351: CALL_OW 6
// if IsOK ( Donaldson ) then
14355: LD_EXP 13
14359: PPUSH
14360: CALL_OW 302
14364: IFFALSE 14380
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14366: LD_EXP 14
14370: PPUSH
14371: LD_STRING D8-Har-1
14373: PPUSH
14374: CALL_OW 94
// end else
14378: GO 14392
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14380: LD_EXP 14
14384: PPUSH
14385: LD_STRING D8-Har-1a
14387: PPUSH
14388: CALL_OW 94
// end ; DialogueOff ;
14392: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14396: LD_VAR 0 1
14400: PPUSH
14401: LD_INT 4
14403: PPUSH
14404: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14408: LD_VAR 0 1
14412: PPUSH
14413: LD_INT 88
14415: PPUSH
14416: LD_INT 89
14418: PPUSH
14419: CALL_OW 114
// honor = 0 ;
14423: LD_ADDR_EXP 37
14427: PUSH
14428: LD_INT 0
14430: ST_TO_ADDR
// end ;
14431: PPOPN 1
14433: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14434: LD_INT 22
14436: PUSH
14437: LD_INT 6
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: PUSH
14444: LD_INT 21
14446: PUSH
14447: LD_INT 1
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: PPUSH
14458: CALL_OW 69
14462: PUSH
14463: LD_INT 0
14465: EQUAL
14466: PUSH
14467: LD_EXP 18
14471: PUSH
14472: LD_INT 0
14474: EQUAL
14475: AND
14476: PUSH
14477: LD_EXP 40
14481: PUSH
14482: LD_INT 1
14484: EQUAL
14485: AND
14486: IFFALSE 14580
14488: GO 14490
14490: DISABLE
14491: LD_INT 0
14493: PPUSH
14494: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14495: LD_ADDR_VAR 0 2
14499: PUSH
14500: LD_INT 22
14502: PUSH
14503: LD_INT 1
14505: PUSH
14506: EMPTY
14507: LIST
14508: LIST
14509: PUSH
14510: LD_INT 21
14512: PUSH
14513: LD_INT 1
14515: PUSH
14516: EMPTY
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 23
14522: PUSH
14523: LD_INT 1
14525: PUSH
14526: EMPTY
14527: LIST
14528: LIST
14529: PUSH
14530: EMPTY
14531: LIST
14532: LIST
14533: LIST
14534: PPUSH
14535: CALL_OW 69
14539: ST_TO_ADDR
// for i in tmp do
14540: LD_ADDR_VAR 0 1
14544: PUSH
14545: LD_VAR 0 2
14549: PUSH
14550: FOR_IN
14551: IFFALSE 14578
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14553: LD_VAR 0 1
14557: PPUSH
14558: LD_INT 1
14560: PPUSH
14561: LD_INT 4
14563: PPUSH
14564: CALL_OW 12
14568: PPUSH
14569: LD_INT 500
14571: PPUSH
14572: CALL_OW 492
// end ;
14576: GO 14550
14578: POP
14579: POP
// end ; end_of_file
14580: PPOPN 2
14582: END
// every 0 0$1 trigger AIEnable = 1 do
14583: LD_EXP 35
14587: PUSH
14588: LD_INT 1
14590: EQUAL
14591: IFFALSE 14663
14593: GO 14595
14595: DISABLE
// begin enable ;
14596: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
14597: LD_INT 3
14599: PPUSH
14600: LD_INT 21
14602: PPUSH
14603: CALL 4923 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
14607: LD_INT 3
14609: PPUSH
14610: LD_INT 8
14612: PPUSH
14613: LD_INT 7
14615: PPUSH
14616: LD_INT 1
14618: PPUSH
14619: CALL 5164 0 4
// if baseReadyToBuild = 2 then
14623: LD_EXP 18
14627: PUSH
14628: LD_INT 2
14630: EQUAL
14631: IFFALSE 14663
// begin RepairBuilding ( 6 , ruPDepot ) ;
14633: LD_INT 6
14635: PPUSH
14636: LD_EXP 19
14640: PPUSH
14641: CALL 4923 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
14645: LD_INT 6
14647: PPUSH
14648: LD_INT 9
14650: PPUSH
14651: LD_INT 6
14653: PPUSH
14654: LD_EXP 20
14658: PPUSH
14659: CALL 5164 0 4
// end ; end ;
14663: END
// every 0 0$01 do
14664: GO 14666
14666: DISABLE
// begin enable ;
14667: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
14668: LD_INT 3
14670: PPUSH
14671: LD_INT 17
14673: PPUSH
14674: LD_INT 111
14676: PPUSH
14677: LD_INT 87
14679: PPUSH
14680: LD_INT 1
14682: PPUSH
14683: CALL 8032 0 5
// end ;
14687: END
// every 0 0$01 do
14688: GO 14690
14690: DISABLE
// begin enable ;
14691: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
14692: LD_INT 5
14694: PPUSH
14695: LD_INT 17
14697: PPUSH
14698: LD_INT 111
14700: PPUSH
14701: LD_INT 87
14703: PPUSH
14704: LD_INT 1
14706: PPUSH
14707: CALL 8032 0 5
// end ;
14711: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
14712: LD_EXP 35
14716: PUSH
14717: LD_INT 1
14719: EQUAL
14720: IFFALSE 14906
14722: GO 14724
14724: DISABLE
// begin enable ;
14725: ENABLE
// if Difficulty = 1 then
14726: LD_OWVAR 67
14730: PUSH
14731: LD_INT 1
14733: EQUAL
14734: IFFALSE 14781
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
14736: LD_INT 3
14738: PPUSH
14739: LD_INT 24
14741: PPUSH
14742: LD_OWVAR 67
14746: PUSH
14747: LD_INT 1
14749: PLUS
14750: PPUSH
14751: LD_INT 1
14753: PPUSH
14754: LD_INT 42
14756: PUSH
14757: LD_INT 42
14759: PUSH
14760: LD_INT 43
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: LIST
14767: PPUSH
14768: LD_INT 1
14770: PPUSH
14771: LD_INT 1
14773: PPUSH
14774: LD_INT 21
14776: PPUSH
14777: CALL 5430 0 8
// if Difficulty = 2 then
14781: LD_OWVAR 67
14785: PUSH
14786: LD_INT 2
14788: EQUAL
14789: IFFALSE 14851
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
14791: LD_INT 3
14793: PPUSH
14794: LD_INT 24
14796: PPUSH
14797: LD_OWVAR 67
14801: PUSH
14802: LD_INT 1
14804: PLUS
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: LD_INT 42
14811: PUSH
14812: LD_INT 43
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PPUSH
14819: LD_INT 1
14821: PPUSH
14822: LD_INT 1
14824: PPUSH
14825: LD_INT 21
14827: PUSH
14828: LD_INT 22
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PUSH
14835: LD_INT 1
14837: PPUSH
14838: LD_INT 2
14840: PPUSH
14841: CALL_OW 12
14845: ARRAY
14846: PPUSH
14847: CALL 5430 0 8
// if Difficulty = 3 then
14851: LD_OWVAR 67
14855: PUSH
14856: LD_INT 3
14858: EQUAL
14859: IFFALSE 14906
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
14861: LD_INT 3
14863: PPUSH
14864: LD_INT 24
14866: PPUSH
14867: LD_OWVAR 67
14871: PPUSH
14872: LD_INT 1
14874: PPUSH
14875: LD_INT 43
14877: PUSH
14878: LD_INT 43
14880: PUSH
14881: LD_INT 43
14883: PUSH
14884: LD_INT 44
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: PPUSH
14893: LD_INT 1
14895: PPUSH
14896: LD_INT 1
14898: PPUSH
14899: LD_INT 22
14901: PPUSH
14902: CALL 5430 0 8
// end ;
14906: END
// every 0 0$1 do
14907: GO 14909
14909: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
14910: LD_INT 3
14912: PPUSH
14913: LD_INT 1
14915: PPUSH
14916: LD_INT 3
14918: PPUSH
14919: CALL 4838 0 3
14923: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
14924: LD_EXP 18
14928: PUSH
14929: LD_INT 1
14931: EQUAL
14932: IFFALSE 15079
14934: GO 14936
14936: DISABLE
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14941: LD_ADDR_VAR 0 2
14945: PUSH
14946: LD_INT 22
14948: PUSH
14949: LD_INT 6
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: LD_INT 21
14958: PUSH
14959: LD_INT 2
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: PUSH
14966: LD_INT 34
14968: PUSH
14969: LD_INT 51
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: LIST
14980: PPUSH
14981: CALL_OW 69
14985: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
14986: LD_VAR 0 2
14990: PUSH
14991: LD_INT 1
14993: ARRAY
14994: PPUSH
14995: LD_EXP 19
14999: PPUSH
15000: CALL_OW 250
15004: PUSH
15005: LD_INT 5
15007: MINUS
15008: PPUSH
15009: LD_EXP 19
15013: PPUSH
15014: CALL_OW 251
15018: PUSH
15019: LD_INT 5
15021: MINUS
15022: PPUSH
15023: CALL_OW 111
// wait ( 0 0$5 ) ;
15027: LD_INT 175
15029: PPUSH
15030: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15034: LD_VAR 0 2
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PPUSH
15043: LD_INT 41
15045: PPUSH
15046: LD_INT 52
15048: PPUSH
15049: CALL_OW 177
// wait ( 0 0$40 ) ;
15053: LD_INT 1400
15055: PPUSH
15056: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15060: LD_VAR 0 2
15064: PUSH
15065: LD_INT 1
15067: ARRAY
15068: PPUSH
15069: LD_INT 41
15071: PPUSH
15072: LD_INT 44
15074: PPUSH
15075: CALL_OW 111
// end ;
15079: PPOPN 2
15081: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15082: LD_EXP 19
15086: PPUSH
15087: CALL_OW 274
15091: PPUSH
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 275
15099: PUSH
15100: LD_INT 100
15102: GREATEREQUAL
15103: IFFALSE 15331
15105: GO 15107
15107: DISABLE
15108: LD_INT 0
15110: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15111: LD_ADDR_VAR 0 1
15115: PUSH
15116: LD_INT 22
15118: PUSH
15119: LD_INT 6
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 21
15128: PUSH
15129: LD_INT 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 25
15138: PUSH
15139: LD_INT 2
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: PPUSH
15151: CALL_OW 69
15155: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15156: LD_VAR 0 1
15160: PUSH
15161: LD_INT 1
15163: ARRAY
15164: PPUSH
15165: LD_INT 4
15167: PPUSH
15168: LD_INT 39
15170: PPUSH
15171: LD_INT 37
15173: PPUSH
15174: LD_INT 3
15176: PPUSH
15177: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15181: LD_VAR 0 1
15185: PUSH
15186: LD_INT 1
15188: ARRAY
15189: PPUSH
15190: LD_INT 29
15192: PPUSH
15193: LD_INT 42
15195: PPUSH
15196: LD_INT 54
15198: PPUSH
15199: LD_INT 3
15201: PPUSH
15202: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15206: LD_VAR 0 1
15210: PUSH
15211: LD_INT 1
15213: ARRAY
15214: PPUSH
15215: LD_INT 6
15217: PPUSH
15218: LD_INT 38
15220: PPUSH
15221: LD_INT 48
15223: PPUSH
15224: LD_INT 0
15226: PPUSH
15227: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15231: LD_VAR 0 1
15235: PUSH
15236: LD_INT 1
15238: ARRAY
15239: PPUSH
15240: LD_INT 2
15242: PPUSH
15243: LD_INT 32
15245: PPUSH
15246: LD_INT 38
15248: PPUSH
15249: LD_INT 2
15251: PPUSH
15252: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15256: LD_VAR 0 1
15260: PUSH
15261: LD_INT 1
15263: ARRAY
15264: PPUSH
15265: LD_INT 26
15267: PPUSH
15268: LD_INT 39
15270: PPUSH
15271: LD_INT 55
15273: PPUSH
15274: LD_INT 3
15276: PPUSH
15277: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15281: LD_VAR 0 1
15285: PUSH
15286: LD_INT 1
15288: ARRAY
15289: PPUSH
15290: LD_INT 32
15292: PPUSH
15293: LD_INT 31
15295: PPUSH
15296: LD_INT 31
15298: PPUSH
15299: LD_INT 3
15301: PPUSH
15302: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15306: LD_VAR 0 1
15310: PUSH
15311: LD_INT 1
15313: ARRAY
15314: PPUSH
15315: LD_INT 31
15317: PPUSH
15318: LD_INT 50
15320: PPUSH
15321: LD_INT 51
15323: PPUSH
15324: LD_INT 4
15326: PPUSH
15327: CALL_OW 205
// end ; end_of_file
15331: PPOPN 1
15333: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
15338: PPUSH
15339: PPUSH
15340: PPUSH
15341: PPUSH
15342: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15343: LD_ADDR_VAR 0 3
15347: PUSH
15348: LD_INT 22
15350: PUSH
15351: LD_INT 6
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 21
15360: PUSH
15361: LD_INT 1
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 1
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 3
15380: PUSH
15381: LD_INT 54
15383: PUSH
15384: EMPTY
15385: LIST
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: PUSH
15391: EMPTY
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: PPUSH
15397: CALL_OW 69
15401: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15402: LD_ADDR_VAR 0 7
15406: PUSH
15407: LD_INT 22
15409: PUSH
15410: LD_INT 6
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 21
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 25
15429: PUSH
15430: LD_INT 1
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: PUSH
15437: LD_INT 54
15439: PUSH
15440: EMPTY
15441: LIST
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: PPUSH
15449: CALL_OW 69
15453: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15454: LD_ADDR_VAR 0 4
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 6
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 21
15471: PUSH
15472: LD_INT 1
15474: PUSH
15475: EMPTY
15476: LIST
15477: LIST
15478: PUSH
15479: LD_INT 25
15481: PUSH
15482: LD_INT 2
15484: PUSH
15485: EMPTY
15486: LIST
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: PPUSH
15494: CALL_OW 69
15498: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15499: LD_ADDR_VAR 0 6
15503: PUSH
15504: LD_INT 22
15506: PUSH
15507: LD_INT 6
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 1
15519: PUSH
15520: EMPTY
15521: LIST
15522: LIST
15523: PUSH
15524: LD_INT 25
15526: PUSH
15527: LD_INT 4
15529: PUSH
15530: EMPTY
15531: LIST
15532: LIST
15533: PUSH
15534: EMPTY
15535: LIST
15536: LIST
15537: LIST
15538: PPUSH
15539: CALL_OW 69
15543: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15544: LD_ADDR_VAR 0 8
15548: PUSH
15549: LD_INT 22
15551: PUSH
15552: LD_INT 6
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: PUSH
15559: LD_INT 21
15561: PUSH
15562: LD_INT 2
15564: PUSH
15565: EMPTY
15566: LIST
15567: LIST
15568: PUSH
15569: LD_INT 34
15571: PUSH
15572: LD_INT 51
15574: PUSH
15575: EMPTY
15576: LIST
15577: LIST
15578: PUSH
15579: EMPTY
15580: LIST
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
15589: LD_VAR 0 1
15593: PPUSH
15594: CALL_OW 255
15598: PUSH
15599: LD_INT 6
15601: EQUAL
15602: PUSH
15603: LD_VAR 0 1
15607: PPUSH
15608: CALL_OW 266
15612: PUSH
15613: LD_INT 0
15615: EQUAL
15616: AND
15617: IFFALSE 15637
// begin ruPDepot = building ;
15619: LD_ADDR_EXP 19
15623: PUSH
15624: LD_VAR 0 1
15628: ST_TO_ADDR
// baseReadyToBuild = 1 ;
15629: LD_ADDR_EXP 18
15633: PUSH
15634: LD_INT 1
15636: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
15637: LD_VAR 0 1
15641: PPUSH
15642: CALL_OW 266
15646: PUSH
15647: LD_INT 4
15649: EQUAL
15650: PUSH
15651: LD_VAR 0 1
15655: PPUSH
15656: CALL_OW 255
15660: PUSH
15661: LD_INT 6
15663: EQUAL
15664: AND
15665: IFFALSE 15698
// for i in tmpSold do
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_VAR 0 3
15676: PUSH
15677: FOR_IN
15678: IFFALSE 15696
// ComEnterUnit ( i , building ) ;
15680: LD_VAR 0 2
15684: PPUSH
15685: LD_VAR 0 1
15689: PPUSH
15690: CALL_OW 120
15694: GO 15677
15696: POP
15697: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
15698: LD_VAR 0 1
15702: PPUSH
15703: CALL_OW 266
15707: PUSH
15708: LD_INT 6
15710: EQUAL
15711: PUSH
15712: LD_VAR 0 1
15716: PPUSH
15717: CALL_OW 255
15721: PUSH
15722: LD_INT 6
15724: EQUAL
15725: AND
15726: IFFALSE 15784
// begin for i in tmpSci do
15728: LD_ADDR_VAR 0 2
15732: PUSH
15733: LD_VAR 0 6
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15757
// ComEnterUnit ( i , building ) ;
15741: LD_VAR 0 2
15745: PPUSH
15746: LD_VAR 0 1
15750: PPUSH
15751: CALL_OW 120
15755: GO 15738
15757: POP
15758: POP
// ResAllTechs ( 6 , building , 3 ) ;
15759: LD_INT 6
15761: PPUSH
15762: LD_VAR 0 1
15766: PPUSH
15767: LD_INT 3
15769: PPUSH
15770: CALL 4838 0 3
// ruPLab = building ;
15774: LD_ADDR_EXP 20
15778: PUSH
15779: LD_VAR 0 1
15783: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
15784: LD_VAR 0 1
15788: PPUSH
15789: CALL_OW 266
15793: PUSH
15794: LD_INT 2
15796: EQUAL
15797: PUSH
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 255
15807: PUSH
15808: LD_INT 6
15810: EQUAL
15811: AND
15812: IFFALSE 15863
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
15814: LD_ADDR_VAR 0 5
15818: PUSH
15819: LD_VAR 0 8
15823: PUSH
15824: LD_INT 1
15826: ARRAY
15827: PPUSH
15828: CALL_OW 313
15832: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15833: LD_VAR 0 5
15837: PPUSH
15838: CALL_OW 121
// wait ( 0 0$1 ) ;
15842: LD_INT 35
15844: PPUSH
15845: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
15849: LD_VAR 0 5
15853: PPUSH
15854: LD_VAR 0 1
15858: PPUSH
15859: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
15863: LD_VAR 0 1
15867: PPUSH
15868: CALL_OW 266
15872: PUSH
15873: LD_INT 32
15875: EQUAL
15876: PUSH
15877: LD_VAR 0 1
15881: PPUSH
15882: CALL_OW 255
15886: PUSH
15887: LD_INT 6
15889: EQUAL
15890: AND
15891: IFFALSE 15943
// begin ComPlaceWeapon ( building , 42 ) ;
15893: LD_VAR 0 1
15897: PPUSH
15898: LD_INT 42
15900: PPUSH
15901: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
15905: LD_VAR 0 7
15909: PUSH
15910: LD_INT 1
15912: ARRAY
15913: PPUSH
15914: CALL_OW 122
// wait ( 0 0$1 ) ;
15918: LD_INT 35
15920: PPUSH
15921: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
15925: LD_VAR 0 7
15929: PUSH
15930: LD_INT 1
15932: ARRAY
15933: PPUSH
15934: LD_VAR 0 1
15938: PPUSH
15939: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
15943: LD_VAR 0 1
15947: PPUSH
15948: CALL_OW 266
15952: PUSH
15953: LD_INT 31
15955: EQUAL
15956: PUSH
15957: LD_VAR 0 1
15961: PPUSH
15962: CALL_OW 255
15966: PUSH
15967: LD_INT 6
15969: EQUAL
15970: AND
15971: IFFALSE 16037
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
15973: LD_VAR 0 7
15977: PUSH
15978: LD_INT 2
15980: ARRAY
15981: PPUSH
15982: CALL_OW 122
// wait ( 0 0$1 ) ;
15986: LD_INT 35
15988: PPUSH
15989: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
15993: LD_VAR 0 7
15997: PUSH
15998: LD_INT 2
16000: ARRAY
16001: PPUSH
16002: LD_VAR 0 1
16006: PPUSH
16007: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16011: LD_VAR 0 4
16015: PUSH
16016: LD_INT 1
16018: ARRAY
16019: PPUSH
16020: LD_EXP 19
16024: PPUSH
16025: CALL_OW 120
// baseReadyToBuild = 2 ;
16029: LD_ADDR_EXP 18
16033: PUSH
16034: LD_INT 2
16036: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16037: LD_VAR 0 1
16041: PPUSH
16042: CALL_OW 266
16046: PUSH
16047: LD_INT 32
16049: EQUAL
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 255
16060: PUSH
16061: LD_INT 1
16063: EQUAL
16064: AND
16065: PUSH
16066: LD_EXP 30
16070: PUSH
16071: LD_INT 0
16073: EQUAL
16074: AND
16075: IFFALSE 16320
// begin bunkerDialog = 1 ;
16077: LD_ADDR_EXP 30
16081: PUSH
16082: LD_INT 1
16084: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16085: LD_EXP 11
16089: PPUSH
16090: CALL_OW 302
16094: IFFALSE 16110
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16096: LD_EXP 11
16100: PPUSH
16101: LD_STRING D11-Eng1-1
16103: PPUSH
16104: CALL_OW 88
// end else
16108: GO 16306
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16110: LD_INT 22
16112: PUSH
16113: LD_INT 1
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 21
16122: PUSH
16123: LD_INT 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 25
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 26
16142: PUSH
16143: LD_INT 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: PPUSH
16156: CALL_OW 69
16160: PUSH
16161: LD_EXP 1
16165: PUSH
16166: EMPTY
16167: LIST
16168: PUSH
16169: LD_INT 0
16171: GREATER
16172: DIFF
16173: IFFALSE 16247
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16175: LD_INT 22
16177: PUSH
16178: LD_INT 1
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: LD_INT 21
16187: PUSH
16188: LD_INT 1
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 25
16197: PUSH
16198: LD_INT 2
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 26
16207: PUSH
16208: LD_INT 1
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: PPUSH
16221: CALL_OW 69
16225: PUSH
16226: LD_EXP 1
16230: PUSH
16231: EMPTY
16232: LIST
16233: DIFF
16234: PPUSH
16235: LD_STRING D11-Eng1-1
16237: PPUSH
16238: LD_STRING D11-Eng1-1
16240: PPUSH
16241: CALL 3578 0 3
// end else
16245: GO 16306
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16247: LD_INT 22
16249: PUSH
16250: LD_INT 1
16252: PUSH
16253: EMPTY
16254: LIST
16255: LIST
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 26
16269: PUSH
16270: LD_INT 1
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: LIST
16281: PPUSH
16282: CALL_OW 69
16286: PUSH
16287: LD_EXP 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: DIFF
16295: PPUSH
16296: LD_STRING D11-Eng1-1
16298: PPUSH
16299: LD_STRING D11-Eng1-1
16301: PPUSH
16302: CALL 3578 0 3
// end ; end ; if energyVDialog = 0 then
16306: LD_EXP 31
16310: PUSH
16311: LD_INT 0
16313: EQUAL
16314: IFFALSE 16320
// EnergyDialog ;
16316: CALL 3890 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 266
16329: PUSH
16330: LD_INT 29
16332: EQUAL
16333: PUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 255
16343: PUSH
16344: LD_INT 1
16346: EQUAL
16347: AND
16348: IFFALSE 16358
// buildOil = 1 ;
16350: LD_ADDR_EXP 32
16354: PUSH
16355: LD_INT 1
16357: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16358: LD_VAR 0 1
16362: PPUSH
16363: CALL_OW 266
16367: PUSH
16368: LD_INT 26
16370: EQUAL
16371: PUSH
16372: LD_VAR 0 1
16376: PPUSH
16377: CALL_OW 255
16381: PUSH
16382: LD_INT 1
16384: EQUAL
16385: AND
16386: IFFALSE 16396
// buildPower = 1 ;
16388: LD_ADDR_EXP 33
16392: PUSH
16393: LD_INT 1
16395: ST_TO_ADDR
// end ;
16396: PPOPN 8
16398: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16399: LD_VAR 0 1
16403: PPUSH
16404: CALL_OW 266
16408: PUSH
16409: LD_INT 3
16411: EQUAL
16412: PUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 255
16422: PUSH
16423: LD_INT 1
16425: EQUAL
16426: AND
16427: PUSH
16428: LD_EXP 29
16432: PUSH
16433: LD_INT 0
16435: EQUAL
16436: AND
16437: IFFALSE 16753
// begin factoryDialog = 1 ;
16439: LD_ADDR_EXP 29
16443: PUSH
16444: LD_INT 1
16446: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16447: LD_INT 22
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 21
16459: PUSH
16460: LD_INT 3
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 30
16469: PUSH
16470: LD_INT 3
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: LD_INT 24
16479: PUSH
16480: LD_INT 1000
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PPUSH
16493: CALL_OW 69
16497: PUSH
16498: LD_INT 1
16500: ARRAY
16501: PPUSH
16502: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16506: LD_EXP 1
16510: PPUSH
16511: LD_STRING D9a-JMM-1
16513: PPUSH
16514: CALL_OW 88
// if IsOK ( Campell ) then
16518: LD_EXP 12
16522: PPUSH
16523: CALL_OW 302
16527: IFFALSE 16543
// begin Say ( Campell , D9a-Mech1-1 ) ;
16529: LD_EXP 12
16533: PPUSH
16534: LD_STRING D9a-Mech1-1
16536: PPUSH
16537: CALL_OW 88
// end else
16541: GO 16739
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16543: LD_INT 22
16545: PUSH
16546: LD_INT 1
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: PUSH
16553: LD_INT 21
16555: PUSH
16556: LD_INT 1
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 25
16565: PUSH
16566: LD_INT 3
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: LD_INT 26
16575: PUSH
16576: LD_INT 1
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: PPUSH
16589: CALL_OW 69
16593: PUSH
16594: LD_EXP 1
16598: PUSH
16599: EMPTY
16600: LIST
16601: PUSH
16602: LD_INT 0
16604: GREATER
16605: DIFF
16606: IFFALSE 16680
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16608: LD_INT 22
16610: PUSH
16611: LD_INT 1
16613: PUSH
16614: EMPTY
16615: LIST
16616: LIST
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 1
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 25
16630: PUSH
16631: LD_INT 3
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 26
16640: PUSH
16641: LD_INT 1
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: PPUSH
16654: CALL_OW 69
16658: PUSH
16659: LD_EXP 1
16663: PUSH
16664: EMPTY
16665: LIST
16666: DIFF
16667: PPUSH
16668: LD_STRING D9a-Mech1-1
16670: PPUSH
16671: LD_STRING D9a-Mech1-1
16673: PPUSH
16674: CALL 3578 0 3
// end else
16678: GO 16739
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16680: LD_INT 22
16682: PUSH
16683: LD_INT 1
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: LD_INT 21
16692: PUSH
16693: LD_INT 1
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: PUSH
16700: LD_INT 26
16702: PUSH
16703: LD_INT 1
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 69
16719: PUSH
16720: LD_EXP 1
16724: PUSH
16725: EMPTY
16726: LIST
16727: DIFF
16728: PPUSH
16729: LD_STRING D9a-Mech1-1
16731: PPUSH
16732: LD_STRING D9a-Mech1-1
16734: PPUSH
16735: CALL 3578 0 3
// end ; end ; if energyVDialog = 0 then
16739: LD_EXP 31
16743: PUSH
16744: LD_INT 0
16746: EQUAL
16747: IFFALSE 16753
// EnergyDialog ;
16749: CALL 3890 0 0
// end ; end ;
16753: PPOPN 1
16755: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
16756: LD_VAR 0 1
16760: PPUSH
16761: CALL_OW 247
16765: PUSH
16766: LD_INT 1
16768: EQUAL
16769: PUSH
16770: LD_VAR 0 1
16774: PPUSH
16775: CALL_OW 255
16779: PUSH
16780: LD_INT 1
16782: EQUAL
16783: AND
16784: IFFALSE 16800
// lostCounter = lostCounter + 1 ;
16786: LD_ADDR_EXP 36
16790: PUSH
16791: LD_EXP 36
16795: PUSH
16796: LD_INT 1
16798: PLUS
16799: ST_TO_ADDR
// end ;
16800: PPOPN 1
16802: END
// on Contact ( side1 , side2 ) do var i ;
16803: LD_INT 0
16805: PPUSH
// begin if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
16806: LD_VAR 0 1
16810: PUSH
16811: LD_INT 1
16813: EQUAL
16814: PUSH
16815: LD_VAR 0 2
16819: PUSH
16820: LD_INT 6
16822: EQUAL
16823: AND
16824: PUSH
16825: LD_EXP 39
16829: PUSH
16830: LD_INT 1
16832: EQUAL
16833: AND
16834: IFFALSE 16889
// begin donaldsonCoopAttack = 0 ;
16836: LD_ADDR_EXP 39
16840: PUSH
16841: LD_INT 0
16843: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16844: LD_ADDR_VAR 0 3
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 4
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: PPUSH
16862: CALL_OW 69
16866: PUSH
16867: FOR_IN
16868: IFFALSE 16887
// ComAgressiveMove ( i , 52 , 64 ) ;
16870: LD_VAR 0 3
16874: PPUSH
16875: LD_INT 52
16877: PPUSH
16878: LD_INT 64
16880: PPUSH
16881: CALL_OW 114
16885: GO 16867
16887: POP
16888: POP
// end ; end ;
16889: PPOPN 3
16891: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
16892: LD_VAR 0 1
16896: PPUSH
16897: CALL_OW 264
16901: PUSH
16902: LD_INT 53
16904: EQUAL
16905: IFFALSE 16990
// begin CutTreeInArea ( vehicle , TreesArea ) ;
16907: LD_VAR 0 1
16911: PPUSH
16912: LD_INT 21
16914: PPUSH
16915: CALL 4106 0 2
// uc_side = 3 ;
16919: LD_ADDR_OWVAR 20
16923: PUSH
16924: LD_INT 3
16926: ST_TO_ADDR
// uc_nation = 3 ;
16927: LD_ADDR_OWVAR 21
16931: PUSH
16932: LD_INT 3
16934: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16935: LD_INT 0
16937: PPUSH
16938: LD_EXP 17
16942: PPUSH
16943: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16947: CALL_OW 44
16951: PPUSH
16952: LD_VAR 0 2
16956: PPUSH
16957: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
16961: LD_VAR 0 1
16965: PPUSH
16966: LD_INT 6
16968: PPUSH
16969: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
16973: LD_VAR 0 1
16977: PPUSH
16978: CALL_OW 313
16982: PPUSH
16983: LD_INT 6
16985: PPUSH
16986: CALL_OW 235
// end ; end ; end_of_file
16990: PPOPN 2
16992: END
// every 10 10$0 do
16993: GO 16995
16995: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16996: LD_INT 5
16998: PPUSH
16999: LD_INT 3
17001: PPUSH
17002: LD_INT 2
17004: PPUSH
17005: LD_INT 5
17007: PPUSH
17008: CALL_OW 12
17012: PUSH
17013: LD_INT 2
17015: PUSH
17016: LD_INT 3
17018: PUSH
17019: LD_INT 3
17021: PUSH
17022: EMPTY
17023: LIST
17024: LIST
17025: LIST
17026: PUSH
17027: LD_OWVAR 67
17031: ARRAY
17032: PLUS
17033: PPUSH
17034: LD_INT 0
17036: PPUSH
17037: LD_INT 0
17039: PPUSH
17040: LD_INT 0
17042: PPUSH
17043: LD_INT 1
17045: PUSH
17046: LD_INT 2
17048: PUSH
17049: LD_INT 3
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: PUSH
17057: LD_OWVAR 67
17061: ARRAY
17062: PPUSH
17063: LD_EXP 16
17067: PPUSH
17068: LD_EXP 17
17072: PPUSH
17073: CALL_OW 12
17077: PPUSH
17078: LD_INT 4
17080: PPUSH
17081: LD_INT 14
17083: PPUSH
17084: LD_INT 1
17086: PPUSH
17087: LD_INT 2
17089: PPUSH
17090: CALL 5915 0 12
// end ;
17094: END
// every 15 15$0 do
17095: GO 17097
17097: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17098: LD_INT 5
17100: PPUSH
17101: LD_INT 3
17103: PPUSH
17104: LD_INT 3
17106: PPUSH
17107: LD_INT 5
17109: PPUSH
17110: CALL_OW 12
17114: PUSH
17115: LD_INT 2
17117: PUSH
17118: LD_INT 3
17120: PUSH
17121: LD_INT 3
17123: PUSH
17124: EMPTY
17125: LIST
17126: LIST
17127: LIST
17128: PUSH
17129: LD_OWVAR 67
17133: ARRAY
17134: PLUS
17135: PPUSH
17136: LD_INT 0
17138: PPUSH
17139: LD_INT 0
17141: PPUSH
17142: LD_INT 0
17144: PPUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: LD_INT 3
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: PUSH
17159: LD_OWVAR 67
17163: ARRAY
17164: PPUSH
17165: LD_EXP 16
17169: PPUSH
17170: LD_EXP 17
17174: PPUSH
17175: CALL_OW 12
17179: PPUSH
17180: LD_INT 4
17182: PPUSH
17183: LD_INT 14
17185: PPUSH
17186: LD_INT 1
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL 5915 0 12
// end ;
17196: END
// every 25 25$0 do
17197: GO 17199
17199: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17200: LD_INT 5
17202: PPUSH
17203: LD_INT 3
17205: PPUSH
17206: LD_INT 2
17208: PPUSH
17209: LD_INT 3
17211: PPUSH
17212: CALL_OW 12
17216: PUSH
17217: LD_INT 2
17219: PUSH
17220: LD_INT 3
17222: PUSH
17223: LD_INT 3
17225: PUSH
17226: EMPTY
17227: LIST
17228: LIST
17229: LIST
17230: PUSH
17231: LD_OWVAR 67
17235: ARRAY
17236: PLUS
17237: PPUSH
17238: LD_INT 0
17240: PPUSH
17241: LD_INT 0
17243: PPUSH
17244: LD_INT 0
17246: PPUSH
17247: LD_INT 1
17249: PUSH
17250: LD_INT 2
17252: PUSH
17253: LD_INT 3
17255: PUSH
17256: EMPTY
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: LD_OWVAR 67
17265: ARRAY
17266: PPUSH
17267: LD_EXP 16
17271: PPUSH
17272: LD_EXP 17
17276: PPUSH
17277: CALL_OW 12
17281: PPUSH
17282: LD_INT 4
17284: PPUSH
17285: LD_INT 14
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: LD_INT 1
17293: PPUSH
17294: CALL 5915 0 12
// end ;
17298: END
// every 26 26$0 do
17299: GO 17301
17301: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17302: LD_INT 5
17304: PPUSH
17305: LD_INT 3
17307: PPUSH
17308: LD_INT 1
17310: PPUSH
17311: LD_INT 3
17313: PPUSH
17314: CALL_OW 12
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: LD_INT 2
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: PUSH
17333: LD_OWVAR 67
17337: ARRAY
17338: PLUS
17339: PPUSH
17340: LD_INT 0
17342: PPUSH
17343: LD_INT 0
17345: PPUSH
17346: LD_INT 0
17348: PPUSH
17349: LD_INT 2
17351: PUSH
17352: LD_INT 2
17354: PUSH
17355: LD_INT 3
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: LD_OWVAR 67
17367: ARRAY
17368: PPUSH
17369: LD_EXP 16
17373: PPUSH
17374: LD_EXP 17
17378: PPUSH
17379: CALL_OW 12
17383: PPUSH
17384: LD_INT 4
17386: PPUSH
17387: LD_INT 14
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: LD_INT 2
17395: PPUSH
17396: CALL 5915 0 12
// end ;
17400: END
// every 25 25$0 do
17401: GO 17403
17403: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
17404: LD_INT 4
17406: PPUSH
17407: LD_INT 5
17409: PPUSH
17410: LD_INT 3
17412: PUSH
17413: LD_INT 4
17415: PUSH
17416: LD_INT 5
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: LIST
17423: PUSH
17424: LD_OWVAR 67
17428: ARRAY
17429: PPUSH
17430: LD_EXP 16
17434: PPUSH
17435: LD_EXP 17
17439: PPUSH
17440: CALL_OW 12
17444: PPUSH
17445: LD_INT 3
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: LD_INT 1
17453: PPUSH
17454: LD_INT 42
17456: PUSH
17457: LD_INT 42
17459: PUSH
17460: LD_INT 43
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 42
17470: PUSH
17471: LD_INT 43
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 43
17480: PUSH
17481: LD_INT 43
17483: PUSH
17484: LD_INT 43
17486: PUSH
17487: LD_INT 44
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: LIST
17500: PUSH
17501: LD_OWVAR 67
17505: ARRAY
17506: PPUSH
17507: EMPTY
17508: PPUSH
17509: EMPTY
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL 8823 0 11
// end ; end_of_file
17518: END
// every 0 0$1 trigger startTimer = 1 do
17519: LD_EXP 28
17523: PUSH
17524: LD_INT 1
17526: EQUAL
17527: IFFALSE 17657
17529: GO 17531
17531: DISABLE
// begin enable ;
17532: ENABLE
// if timerStatus = 1 then
17533: LD_EXP 27
17537: PUSH
17538: LD_INT 1
17540: EQUAL
17541: IFFALSE 17574
// begin timeToSupport = timeToSupport - 0 0$01 ;
17543: LD_ADDR_EXP 26
17547: PUSH
17548: LD_EXP 26
17552: PUSH
17553: LD_INT 35
17555: MINUS
17556: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17557: LD_ADDR_OWVAR 47
17561: PUSH
17562: LD_STRING #Am04-1
17564: PUSH
17565: LD_EXP 26
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: ST_TO_ADDR
// end ; if timerStatus = 2 then
17574: LD_EXP 27
17578: PUSH
17579: LD_INT 2
17581: EQUAL
17582: IFFALSE 17615
// begin timeToSupport = timeToSupport - 0 0$01 ;
17584: LD_ADDR_EXP 26
17588: PUSH
17589: LD_EXP 26
17593: PUSH
17594: LD_INT 35
17596: MINUS
17597: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17598: LD_ADDR_OWVAR 47
17602: PUSH
17603: LD_STRING #Am04-2
17605: PUSH
17606: LD_EXP 26
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: ST_TO_ADDR
// end ; if timerStatus = 3 then
17615: LD_EXP 27
17619: PUSH
17620: LD_INT 3
17622: EQUAL
17623: IFFALSE 17639
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17625: LD_ADDR_EXP 25
17629: PUSH
17630: LD_EXP 25
17634: PUSH
17635: LD_INT 35
17637: MINUS
17638: ST_TO_ADDR
// end ; if timerStatus = 4 then
17639: LD_EXP 27
17643: PUSH
17644: LD_INT 4
17646: EQUAL
17647: IFFALSE 17657
// begin display_strings =  ;
17649: LD_ADDR_OWVAR 47
17653: PUSH
17654: LD_STRING 
17656: ST_TO_ADDR
// end ; end ; end_of_file
17657: END
// every 0 0$1 trigger IsDead ( JMM ) do
17658: LD_EXP 1
17662: PPUSH
17663: CALL_OW 301
17667: IFFALSE 17679
17669: GO 17671
17671: DISABLE
// YouLost ( JMM ) ;
17672: LD_STRING JMM
17674: PPUSH
17675: CALL_OW 104
17679: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
17680: LD_INT 4
17682: PPUSH
17683: CALL_OW 301
17687: IFFALSE 17699
17689: GO 17691
17691: DISABLE
// YouLost ( Base ) ; end_of_file
17692: LD_STRING Base
17694: PPUSH
17695: CALL_OW 104
17699: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
17700: LD_EXP 15
17704: PPUSH
17705: CALL_OW 301
17709: IFFALSE 18091
17711: GO 17713
17713: DISABLE
17714: LD_INT 0
17716: PPUSH
// begin AIEnable = 0 ;
17717: LD_ADDR_EXP 35
17721: PUSH
17722: LD_INT 0
17724: ST_TO_ADDR
// escapeAvalaible = 1 ;
17725: LD_ADDR_EXP 38
17729: PUSH
17730: LD_INT 1
17732: ST_TO_ADDR
// InGameOn ;
17733: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17737: LD_INT 3
17739: PPUSH
17740: LD_INT 1
17742: PPUSH
17743: LD_INT 1
17745: PPUSH
17746: LD_INT 0
17748: PPUSH
17749: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17753: LD_INT 6
17755: PPUSH
17756: LD_INT 1
17758: PPUSH
17759: LD_INT 1
17761: PPUSH
17762: LD_INT 0
17764: PPUSH
17765: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17769: LD_INT 5
17771: PPUSH
17772: LD_INT 1
17774: PPUSH
17775: LD_INT 1
17777: PPUSH
17778: LD_INT 0
17780: PPUSH
17781: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17785: LD_INT 3
17787: PPUSH
17788: LD_INT 1
17790: PPUSH
17791: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17795: LD_INT 97
17797: PPUSH
17798: LD_INT 91
17800: PPUSH
17801: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17805: LD_INT 22
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 21
17817: PUSH
17818: LD_INT 1
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: PPUSH
17834: CALL_OW 121
// wait ( 0 0$01 ) ;
17838: LD_INT 35
17840: PPUSH
17841: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17845: LD_INT 22
17847: PUSH
17848: LD_INT 3
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PUSH
17855: LD_INT 21
17857: PUSH
17858: LD_INT 1
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: PPUSH
17869: CALL_OW 69
17873: PPUSH
17874: LD_INT 124
17876: PPUSH
17877: LD_INT 98
17879: PPUSH
17880: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17884: LD_INT 22
17886: PUSH
17887: LD_INT 5
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 1
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 69
17912: PPUSH
17913: CALL_OW 121
// wait ( 0 0$01 ) ;
17917: LD_INT 35
17919: PPUSH
17920: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17924: LD_INT 22
17926: PUSH
17927: LD_INT 5
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 21
17936: PUSH
17937: LD_INT 1
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: EMPTY
17945: LIST
17946: LIST
17947: PPUSH
17948: CALL_OW 69
17952: PPUSH
17953: LD_INT 124
17955: PPUSH
17956: LD_INT 98
17958: PPUSH
17959: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
17963: LD_INT 22
17965: PUSH
17966: LD_INT 6
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: PUSH
17973: LD_INT 21
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PPUSH
17987: CALL_OW 69
17991: PPUSH
17992: CALL_OW 121
// wait ( 0 0$01 ) ;
17996: LD_INT 35
17998: PPUSH
17999: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18003: LD_INT 22
18005: PUSH
18006: LD_INT 6
18008: PUSH
18009: EMPTY
18010: LIST
18011: LIST
18012: PUSH
18013: LD_INT 21
18015: PUSH
18016: LD_INT 1
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PPUSH
18027: CALL_OW 69
18031: PPUSH
18032: LD_INT 124
18034: PPUSH
18035: LD_INT 98
18037: PPUSH
18038: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18042: LD_INT 22
18044: PUSH
18045: LD_INT 1
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PUSH
18052: LD_INT 21
18054: PUSH
18055: LD_INT 1
18057: PUSH
18058: EMPTY
18059: LIST
18060: LIST
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PPUSH
18066: CALL_OW 69
18070: PPUSH
18071: LD_INT 124
18073: PPUSH
18074: LD_INT 98
18076: PPUSH
18077: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
18081: LD_INT 124
18083: PPUSH
18084: LD_INT 98
18086: PPUSH
18087: CALL_OW 84
// end ;
18091: PPOPN 1
18093: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18094: LD_INT 23
18096: PUSH
18097: LD_INT 3
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: PUSH
18104: LD_INT 21
18106: PUSH
18107: LD_INT 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 24
18116: PUSH
18117: LD_INT 250
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PUSH
18124: EMPTY
18125: LIST
18126: LIST
18127: LIST
18128: PPUSH
18129: CALL_OW 69
18133: PUSH
18134: LD_INT 0
18136: EQUAL
18137: IFFALSE 18146
18139: GO 18141
18141: DISABLE
// FinishMission ;
18142: CALL 18317 0 0
18146: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18147: LD_EXP 38
18151: PUSH
18152: LD_INT 1
18154: EQUAL
18155: IFFALSE 18314
18157: GO 18159
18159: DISABLE
18160: LD_INT 0
18162: PPUSH
// begin enable ;
18163: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18164: LD_ADDR_VAR 0 1
18168: PUSH
18169: LD_INT 22
18171: PUSH
18172: LD_INT 3
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: PUSH
18184: FOR_IN
18185: IFFALSE 18212
// if IsInArea ( i , RussianEscape ) then
18187: LD_VAR 0 1
18191: PPUSH
18192: LD_INT 5
18194: PPUSH
18195: CALL_OW 308
18199: IFFALSE 18210
// RemoveUnit ( i ) ;
18201: LD_VAR 0 1
18205: PPUSH
18206: CALL_OW 64
18210: GO 18184
18212: POP
18213: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
18214: LD_ADDR_VAR 0 1
18218: PUSH
18219: LD_INT 22
18221: PUSH
18222: LD_INT 5
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 69
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18262
// if IsInArea ( i , RussianEscape ) then
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_INT 5
18244: PPUSH
18245: CALL_OW 308
18249: IFFALSE 18260
// RemoveUnit ( i ) ;
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 64
18260: GO 18234
18262: POP
18263: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_INT 22
18271: PUSH
18272: LD_INT 6
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PPUSH
18279: CALL_OW 69
18283: PUSH
18284: FOR_IN
18285: IFFALSE 18312
// if IsInArea ( i , RussianEscape ) then
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_INT 5
18294: PPUSH
18295: CALL_OW 308
18299: IFFALSE 18310
// RemoveUnit ( i ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 64
18310: GO 18284
18312: POP
18313: POP
// end ;
18314: PPOPN 1
18316: END
// export function FinishMission ; var tmp ; begin
18317: LD_INT 0
18319: PPUSH
18320: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18321: LD_INT 69
18323: PPUSH
18324: LD_INT 1
18326: PPUSH
18327: CALL_OW 321
18331: PPUSH
18332: LD_STRING GatlingInGamma
18334: PPUSH
18335: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
18339: LD_EXP 32
18343: PUSH
18344: LD_INT 1
18346: EQUAL
18347: PUSH
18348: LD_EXP 33
18352: PUSH
18353: LD_INT 1
18355: EQUAL
18356: AND
18357: IFFALSE 18371
// begin AddMedal ( oil , 1 ) ;
18359: LD_STRING oil
18361: PPUSH
18362: LD_INT 1
18364: PPUSH
18365: CALL_OW 101
// end else
18369: GO 18464
// begin if buildOil = 1 and buildPower = 0 then
18371: LD_EXP 32
18375: PUSH
18376: LD_INT 1
18378: EQUAL
18379: PUSH
18380: LD_EXP 33
18384: PUSH
18385: LD_INT 0
18387: EQUAL
18388: AND
18389: IFFALSE 18402
// AddMedal ( oil , - 1 ) ;
18391: LD_STRING oil
18393: PPUSH
18394: LD_INT 1
18396: NEG
18397: PPUSH
18398: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18402: LD_EXP 32
18406: PUSH
18407: LD_INT 0
18409: EQUAL
18410: PUSH
18411: LD_EXP 33
18415: PUSH
18416: LD_INT 1
18418: EQUAL
18419: AND
18420: IFFALSE 18433
// AddMedal ( oil , - 2 ) ;
18422: LD_STRING oil
18424: PPUSH
18425: LD_INT 2
18427: NEG
18428: PPUSH
18429: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18433: LD_EXP 32
18437: PUSH
18438: LD_INT 0
18440: EQUAL
18441: PUSH
18442: LD_EXP 33
18446: PUSH
18447: LD_INT 0
18449: EQUAL
18450: AND
18451: IFFALSE 18464
// AddMedal ( oil , - 3 ) ;
18453: LD_STRING oil
18455: PPUSH
18456: LD_INT 3
18458: NEG
18459: PPUSH
18460: CALL_OW 101
// end ; if lostCounter < 3 then
18464: LD_EXP 36
18468: PUSH
18469: LD_INT 3
18471: LESS
18472: IFFALSE 18486
// begin AddMedal ( deaths , 1 ) ;
18474: LD_STRING deaths
18476: PPUSH
18477: LD_INT 1
18479: PPUSH
18480: CALL_OW 101
// end else
18484: GO 18497
// begin AddMedal ( deaths , - 1 ) ;
18486: LD_STRING deaths
18488: PPUSH
18489: LD_INT 1
18491: NEG
18492: PPUSH
18493: CALL_OW 101
// end ; if honor = 1 then
18497: LD_EXP 37
18501: PUSH
18502: LD_INT 1
18504: EQUAL
18505: IFFALSE 18519
// begin AddMedal ( honour , 1 ) ;
18507: LD_STRING honour
18509: PPUSH
18510: LD_INT 1
18512: PPUSH
18513: CALL_OW 101
// end else
18517: GO 18530
// begin AddMedal ( honour , - 1 ) ;
18519: LD_STRING honour
18521: PPUSH
18522: LD_INT 1
18524: NEG
18525: PPUSH
18526: CALL_OW 101
// end ; GiveMedals ( Main ) ;
18530: LD_STRING Main
18532: PPUSH
18533: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18537: LD_INT 22
18539: PUSH
18540: LD_INT 1
18542: PUSH
18543: EMPTY
18544: LIST
18545: LIST
18546: PUSH
18547: LD_INT 23
18549: PUSH
18550: LD_INT 1
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 21
18559: PUSH
18560: LD_INT 1
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: PPUSH
18572: CALL_OW 69
18576: PPUSH
18577: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18581: LD_EXP 1
18585: PPUSH
18586: LD_STRING JMM
18588: PPUSH
18589: CALL_OW 38
// if IsOK ( Bobby ) then
18593: LD_EXP 2
18597: PPUSH
18598: CALL_OW 302
18602: IFFALSE 18616
// SaveCharacters ( Bobby , Bobby ) ;
18604: LD_EXP 2
18608: PPUSH
18609: LD_STRING Bobby
18611: PPUSH
18612: CALL_OW 38
// if IsOK ( Cyrus ) then
18616: LD_EXP 3
18620: PPUSH
18621: CALL_OW 302
18625: IFFALSE 18639
// SaveCharacters ( Cyrus , Cyrus ) ;
18627: LD_EXP 3
18631: PPUSH
18632: LD_STRING Cyrus
18634: PPUSH
18635: CALL_OW 38
// if IsOK ( Lisa ) then
18639: LD_EXP 4
18643: PPUSH
18644: CALL_OW 302
18648: IFFALSE 18662
// SaveCharacters ( Lisa , Lisa ) ;
18650: LD_EXP 4
18654: PPUSH
18655: LD_STRING Lisa
18657: PPUSH
18658: CALL_OW 38
// if IsOK ( Brown ) then
18662: LD_EXP 7
18666: PPUSH
18667: CALL_OW 302
18671: IFFALSE 18685
// SaveCharacters ( Brown , Brown ) ;
18673: LD_EXP 7
18677: PPUSH
18678: LD_STRING Brown
18680: PPUSH
18681: CALL_OW 38
// if IsOK ( Donaldson ) then
18685: LD_EXP 13
18689: PPUSH
18690: CALL_OW 302
18694: IFFALSE 18708
// SaveCharacters ( Donaldson , Donaldson ) ;
18696: LD_EXP 13
18700: PPUSH
18701: LD_STRING Donaldson
18703: PPUSH
18704: CALL_OW 38
// if IsOK ( Frank ) then
18708: LD_EXP 5
18712: PPUSH
18713: CALL_OW 302
18717: IFFALSE 18731
// SaveCharacters ( Frank , Frank ) ;
18719: LD_EXP 5
18723: PPUSH
18724: LD_STRING Frank
18726: PPUSH
18727: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
18731: LD_INT 50
18733: PUSH
18734: EMPTY
18735: LIST
18736: PUSH
18737: LD_INT 22
18739: PUSH
18740: LD_INT 1
18742: PUSH
18743: EMPTY
18744: LIST
18745: LIST
18746: PUSH
18747: LD_INT 21
18749: PUSH
18750: LD_INT 1
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: LIST
18761: PPUSH
18762: CALL_OW 69
18766: PUSH
18767: LD_EXP 1
18771: PUSH
18772: LD_EXP 2
18776: PUSH
18777: LD_EXP 3
18781: PUSH
18782: LD_EXP 4
18786: PUSH
18787: LD_EXP 7
18791: PUSH
18792: LD_EXP 13
18796: PUSH
18797: LD_EXP 5
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: DIFF
18811: PPUSH
18812: LD_STRING 04_other_survivors
18814: PPUSH
18815: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
18819: LD_INT 22
18821: PPUSH
18822: CALL 18835 0 1
// YouWin ;
18826: CALL_OW 103
// end ;
18830: LD_VAR 0 1
18834: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
18835: LD_INT 0
18837: PPUSH
18838: PPUSH
18839: PPUSH
18840: PPUSH
// gammaBase = [ ] ;
18841: LD_ADDR_VAR 0 4
18845: PUSH
18846: EMPTY
18847: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
18848: LD_ADDR_VAR 0 5
18852: PUSH
18853: LD_VAR 0 1
18857: PPUSH
18858: LD_INT 22
18860: PUSH
18861: LD_INT 1
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: PUSH
18868: LD_INT 21
18870: PUSH
18871: LD_INT 3
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: PUSH
18878: LD_INT 50
18880: PUSH
18881: EMPTY
18882: LIST
18883: PUSH
18884: EMPTY
18885: LIST
18886: LIST
18887: LIST
18888: PPUSH
18889: CALL_OW 70
18893: ST_TO_ADDR
// for i in buildings do
18894: LD_ADDR_VAR 0 3
18898: PUSH
18899: LD_VAR 0 5
18903: PUSH
18904: FOR_IN
18905: IFFALSE 19242
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
18907: LD_VAR 0 3
18911: PPUSH
18912: CALL_OW 266
18916: PUSH
18917: LD_INT 6
18919: PUSH
18920: LD_INT 7
18922: PUSH
18923: LD_INT 8
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: LIST
18930: IN
18931: IFFALSE 19045
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
18933: LD_ADDR_VAR 0 4
18937: PUSH
18938: LD_VAR 0 4
18942: PUSH
18943: LD_VAR 0 3
18947: PPUSH
18948: CALL_OW 266
18952: PUSH
18953: LD_VAR 0 3
18957: PPUSH
18958: CALL_OW 250
18962: PUSH
18963: LD_VAR 0 3
18967: PPUSH
18968: CALL_OW 251
18972: PUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: CALL_OW 254
18982: PUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: CALL_OW 267
18992: PUSH
18993: LD_VAR 0 3
18997: PPUSH
18998: CALL_OW 248
19002: PUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: LD_INT 1
19010: PPUSH
19011: CALL_OW 268
19015: PUSH
19016: LD_VAR 0 3
19020: PPUSH
19021: LD_INT 2
19023: PPUSH
19024: CALL_OW 268
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: PUSH
19039: EMPTY
19040: LIST
19041: ADD
19042: ST_TO_ADDR
19043: GO 19240
// if GetBType ( i ) in [ b_bunker ] then
19045: LD_VAR 0 3
19049: PPUSH
19050: CALL_OW 266
19054: PUSH
19055: LD_INT 32
19057: PUSH
19058: EMPTY
19059: LIST
19060: IN
19061: IFFALSE 19158
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19063: LD_ADDR_VAR 0 4
19067: PUSH
19068: LD_VAR 0 4
19072: PUSH
19073: LD_VAR 0 3
19077: PPUSH
19078: CALL_OW 266
19082: PUSH
19083: LD_VAR 0 3
19087: PPUSH
19088: CALL_OW 250
19092: PUSH
19093: LD_VAR 0 3
19097: PPUSH
19098: CALL_OW 251
19102: PUSH
19103: LD_VAR 0 3
19107: PPUSH
19108: CALL_OW 254
19112: PUSH
19113: LD_VAR 0 3
19117: PPUSH
19118: CALL_OW 267
19122: PUSH
19123: LD_VAR 0 3
19127: PPUSH
19128: CALL_OW 248
19132: PUSH
19133: LD_VAR 0 3
19137: PPUSH
19138: CALL_OW 269
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: LIST
19151: PUSH
19152: EMPTY
19153: LIST
19154: ADD
19155: ST_TO_ADDR
19156: GO 19240
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19158: LD_ADDR_VAR 0 4
19162: PUSH
19163: LD_VAR 0 4
19167: PUSH
19168: LD_VAR 0 3
19172: PPUSH
19173: CALL_OW 266
19177: PUSH
19178: LD_VAR 0 3
19182: PPUSH
19183: CALL_OW 250
19187: PUSH
19188: LD_VAR 0 3
19192: PPUSH
19193: CALL_OW 251
19197: PUSH
19198: LD_VAR 0 3
19202: PPUSH
19203: CALL_OW 254
19207: PUSH
19208: LD_VAR 0 3
19212: PPUSH
19213: CALL_OW 267
19217: PUSH
19218: LD_VAR 0 3
19222: PPUSH
19223: CALL_OW 248
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: PUSH
19236: EMPTY
19237: LIST
19238: ADD
19239: ST_TO_ADDR
// end ;
19240: GO 18904
19242: POP
19243: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19244: LD_VAR 0 4
19248: PPUSH
19249: LD_STRING GammaBase
19251: PPUSH
19252: CALL_OW 39
// end ; end_of_file
19256: LD_VAR 0 2
19260: RET
// every 1 1$15 do
19261: GO 19263
19263: DISABLE
// begin if supply <= 13 and supply > 7 then
19264: LD_EXP 34
19268: PUSH
19269: LD_INT 13
19271: LESSEQUAL
19272: PUSH
19273: LD_EXP 34
19277: PUSH
19278: LD_INT 7
19280: GREATER
19281: AND
19282: IFFALSE 19305
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19284: LD_INT 3
19286: PPUSH
19287: LD_INT 5
19289: PPUSH
19290: CALL_OW 12
19294: PPUSH
19295: LD_INT 18
19297: PPUSH
19298: LD_INT 1
19300: PPUSH
19301: CALL_OW 55
// if supply <= 7 and supply > 4 then
19305: LD_EXP 34
19309: PUSH
19310: LD_INT 7
19312: LESSEQUAL
19313: PUSH
19314: LD_EXP 34
19318: PUSH
19319: LD_INT 4
19321: GREATER
19322: AND
19323: IFFALSE 19346
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19325: LD_INT 3
19327: PPUSH
19328: LD_INT 5
19330: PPUSH
19331: CALL_OW 12
19335: PPUSH
19336: LD_INT 19
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL_OW 55
// if supply <= 4 and supply > 0 then
19346: LD_EXP 34
19350: PUSH
19351: LD_INT 4
19353: LESSEQUAL
19354: PUSH
19355: LD_EXP 34
19359: PUSH
19360: LD_INT 0
19362: GREATER
19363: AND
19364: IFFALSE 19387
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19366: LD_INT 3
19368: PPUSH
19369: LD_INT 5
19371: PPUSH
19372: CALL_OW 12
19376: PPUSH
19377: LD_INT 20
19379: PPUSH
19380: LD_INT 1
19382: PPUSH
19383: CALL_OW 55
// if supply > 0 then
19387: LD_EXP 34
19391: PUSH
19392: LD_INT 0
19394: GREATER
19395: IFFALSE 19412
// begin supply = supply - 1 ;
19397: LD_ADDR_EXP 34
19401: PUSH
19402: LD_EXP 34
19406: PUSH
19407: LD_INT 1
19409: MINUS
19410: ST_TO_ADDR
// enable ;
19411: ENABLE
// end ; end ;
19412: END
