// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// ruSoldMinLevel = 0 ;
  12: LD_ADDR_EXP 16
  16: PUSH
  17: LD_INT 0
  19: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  20: LD_ADDR_EXP 17
  24: PUSH
  25: LD_INT 0
  27: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  28: LD_ADDR_EXP 18
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// debugMode = 0 ;
  36: LD_ADDR_EXP 40
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// firstRussianAttack = 0 ;
  44: LD_ADDR_EXP 21
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// saveDonaldson = 0 ;
  52: LD_ADDR_EXP 22
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// frankScoutBase = 0 ;
  60: LD_ADDR_EXP 23
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// harrAnswer = 0 ;
  68: LD_ADDR_EXP 24
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
  76: LD_ADDR_EXP 25
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
  84: LD_ADDR_EXP 26
  88: PUSH
  89: LD_INT 18900
  91: ST_TO_ADDR
// timerStatus = 0 ;
  92: LD_ADDR_EXP 27
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// startTimer = 0 ;
 100: LD_ADDR_EXP 28
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// factoryDialog = 0 ;
 108: LD_ADDR_EXP 29
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// bunkerDialog = 0 ;
 116: LD_ADDR_EXP 30
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// energyVDialog = 0 ;
 124: LD_ADDR_EXP 31
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// buildOil = 0 ;
 132: LD_ADDR_EXP 32
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// buildPower = 0 ;
 140: LD_ADDR_EXP 33
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// supply = [ 11 , 12 , 14 ] [ Difficulty ] ;
 148: LD_ADDR_EXP 34
 152: PUSH
 153: LD_INT 11
 155: PUSH
 156: LD_INT 12
 158: PUSH
 159: LD_INT 14
 161: PUSH
 162: EMPTY
 163: LIST
 164: LIST
 165: LIST
 166: PUSH
 167: LD_OWVAR 67
 171: ARRAY
 172: ST_TO_ADDR
// AIEnable = 1 ;
 173: LD_ADDR_EXP 35
 177: PUSH
 178: LD_INT 1
 180: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 181: LD_ADDR_EXP 39
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// lostCounter = 0 ;
 189: LD_ADDR_EXP 36
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// honor = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// escapeAvalaible = 0 ;
 205: LD_ADDR_EXP 38
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// PrepareDifficulty ;
 213: CALL 3726 0 0
// PrepareRussianBase ;
 217: CALL 2053 0 0
// PrepareRussianCommander ;
 221: CALL 2004 0 0
// PrepareHeroes ;
 225: CALL 366 0 0
// SetBName ( ambdept0 , gamma ) ;
 229: LD_INT 4
 231: PPUSH
 232: LD_STRING gamma
 234: PPUSH
 235: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 239: LD_INT 21
 241: PPUSH
 242: LD_STRING fyodor
 244: PPUSH
 245: CALL_OW 500
// end ;
 249: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 250: LD_EXP 40
 254: PUSH
 255: LD_INT 1
 257: EQUAL
 258: IFFALSE 363
 260: GO 262
 262: DISABLE
 263: LD_INT 0
 265: PPUSH
// begin enable ;
 266: ENABLE
// fogoff ( true ) ;
 267: LD_INT 1
 269: PPUSH
 270: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 274: LD_ADDR_VAR 0 1
 278: PUSH
 279: LD_INT 22
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: LD_INT 21
 291: PUSH
 292: LD_INT 1
 294: PUSH
 295: EMPTY
 296: LIST
 297: LIST
 298: PUSH
 299: EMPTY
 300: LIST
 301: LIST
 302: PPUSH
 303: CALL_OW 69
 307: PUSH
 308: FOR_IN
 309: IFFALSE 325
// SetLives ( i , 1000 ) ;
 311: LD_VAR 0 1
 315: PPUSH
 316: LD_INT 1000
 318: PPUSH
 319: CALL_OW 234
 323: GO 308
 325: POP
 326: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 327: LD_INT 4
 329: PPUSH
 330: CALL_OW 274
 334: PPUSH
 335: LD_INT 1
 337: PPUSH
 338: LD_INT 9999
 340: PPUSH
 341: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 345: LD_INT 4
 347: PPUSH
 348: CALL_OW 274
 352: PPUSH
 353: LD_INT 2
 355: PPUSH
 356: LD_INT 9999
 358: PPUSH
 359: CALL_OW 277
// end ; end_of_file
 363: PPOPN 1
 365: END
// export function PrepareHeroes ; var i ; begin
 366: LD_INT 0
 368: PPUSH
 369: PPUSH
// uc_side = 1 ;
 370: LD_ADDR_OWVAR 20
 374: PUSH
 375: LD_INT 1
 377: ST_TO_ADDR
// uc_nation = 1 ;
 378: LD_ADDR_OWVAR 21
 382: PUSH
 383: LD_INT 1
 385: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 386: LD_ADDR_EXP 1
 390: PUSH
 391: LD_STRING JMM
 393: PPUSH
 394: LD_INT 1
 396: PPUSH
 397: CALL 3267 0 2
 401: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 402: LD_ADDR_EXP 4
 406: PUSH
 407: LD_STRING Lisa
 409: PPUSH
 410: LD_INT 1
 412: PPUSH
 413: CALL 3267 0 2
 417: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 418: LD_ADDR_EXP 7
 422: PUSH
 423: LD_STRING Brown
 425: PPUSH
 426: LD_INT 0
 428: PPUSH
 429: CALL 3267 0 2
 433: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 434: LD_ADDR_EXP 8
 438: PUSH
 439: LD_STRING Dickens
 441: PPUSH
 442: LD_INT 0
 444: PPUSH
 445: CALL 3267 0 2
 449: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 450: LD_ADDR_EXP 9
 454: PUSH
 455: LD_STRING Woodruff
 457: PPUSH
 458: LD_INT 0
 460: PPUSH
 461: CALL 3267 0 2
 465: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 466: LD_ADDR_EXP 12
 470: PUSH
 471: LD_STRING Campell
 473: PPUSH
 474: LD_INT 0
 476: PPUSH
 477: CALL 3267 0 2
 481: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 482: LD_ADDR_EXP 10
 486: PUSH
 487: LD_STRING Knight
 489: PPUSH
 490: LD_INT 0
 492: PPUSH
 493: CALL 3267 0 2
 497: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 498: LD_ADDR_EXP 11
 502: PUSH
 503: LD_STRING Claptopn
 505: PPUSH
 506: LD_INT 0
 508: PPUSH
 509: CALL 3267 0 2
 513: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 514: LD_ADDR_EXP 14
 518: PUSH
 519: LD_STRING Harisson
 521: PPUSH
 522: LD_INT 0
 524: PPUSH
 525: CALL 3267 0 2
 529: ST_TO_ADDR
// if Lisa = false then
 530: LD_EXP 4
 534: PUSH
 535: LD_INT 0
 537: EQUAL
 538: IFFALSE 556
// Bobby = PrepareUnit ( Bobby , true ) ;
 540: LD_ADDR_EXP 2
 544: PUSH
 545: LD_STRING Bobby
 547: PPUSH
 548: LD_INT 1
 550: PPUSH
 551: CALL 3267 0 2
 555: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 556: LD_EXP 4
 560: PUSH
 561: LD_INT 0
 563: EQUAL
 564: PUSH
 565: LD_EXP 2
 569: PUSH
 570: LD_INT 0
 572: EQUAL
 573: AND
 574: IFFALSE 592
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 576: LD_ADDR_EXP 3
 580: PUSH
 581: LD_STRING Cyrus
 583: PPUSH
 584: LD_INT 1
 586: PPUSH
 587: CALL 3267 0 2
 591: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 592: LD_EXP 4
 596: PUSH
 597: LD_INT 0
 599: EQUAL
 600: PUSH
 601: LD_EXP 2
 605: PUSH
 606: LD_INT 0
 608: EQUAL
 609: AND
 610: PUSH
 611: LD_EXP 3
 615: PUSH
 616: LD_INT 0
 618: EQUAL
 619: AND
 620: IFFALSE 638
// RandomBeforeMission = PrepareUnit ( 03_others , true ) ;
 622: LD_ADDR_EXP 6
 626: PUSH
 627: LD_STRING 03_others
 629: PPUSH
 630: LD_INT 1
 632: PPUSH
 633: CALL 3267 0 2
 637: ST_TO_ADDR
// uc_side = 4 ;
 638: LD_ADDR_OWVAR 20
 642: PUSH
 643: LD_INT 4
 645: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 646: LD_ADDR_EXP 13
 650: PUSH
 651: LD_STRING Donaldson
 653: PPUSH
 654: LD_INT 0
 656: PPUSH
 657: CALL 3267 0 2
 661: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 662: LD_ADDR_EXP 5
 666: PUSH
 667: LD_STRING Frank
 669: PPUSH
 670: LD_INT 1
 672: PPUSH
 673: CALL 3267 0 2
 677: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 678: LD_EXP 1
 682: PPUSH
 683: LD_INT 32
 685: PPUSH
 686: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 690: LD_EXP 7
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_INT 0
 700: PPUSH
 701: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 705: LD_EXP 7
 709: PPUSH
 710: LD_INT 32
 712: PPUSH
 713: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 717: LD_EXP 8
 721: PPUSH
 722: LD_INT 2
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 732: LD_EXP 9
 736: PPUSH
 737: LD_INT 2
 739: PPUSH
 740: LD_INT 0
 742: PPUSH
 743: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 747: LD_EXP 12
 751: PPUSH
 752: LD_INT 2
 754: PPUSH
 755: LD_INT 0
 757: PPUSH
 758: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 762: LD_EXP 10
 766: PPUSH
 767: LD_INT 2
 769: PPUSH
 770: LD_INT 0
 772: PPUSH
 773: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 777: LD_EXP 11
 781: PPUSH
 782: LD_INT 2
 784: PPUSH
 785: LD_INT 0
 787: PPUSH
 788: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 792: LD_EXP 4
 796: PPUSH
 797: LD_INT 2
 799: PPUSH
 800: LD_INT 0
 802: PPUSH
 803: CALL_OW 49
// if Lisa = false then
 807: LD_EXP 4
 811: PUSH
 812: LD_INT 0
 814: EQUAL
 815: IFFALSE 832
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 817: LD_EXP 2
 821: PPUSH
 822: LD_INT 2
 824: PPUSH
 825: LD_INT 0
 827: PPUSH
 828: CALL_OW 49
// if Lisa = false and Bobby = false then
 832: LD_EXP 4
 836: PUSH
 837: LD_INT 0
 839: EQUAL
 840: PUSH
 841: LD_EXP 2
 845: PUSH
 846: LD_INT 0
 848: EQUAL
 849: AND
 850: IFFALSE 867
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 852: LD_EXP 3
 856: PPUSH
 857: LD_INT 2
 859: PPUSH
 860: LD_INT 0
 862: PPUSH
 863: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 867: LD_EXP 4
 871: PUSH
 872: LD_INT 0
 874: EQUAL
 875: PUSH
 876: LD_EXP 2
 880: PUSH
 881: LD_INT 0
 883: EQUAL
 884: AND
 885: PUSH
 886: LD_EXP 3
 890: PUSH
 891: LD_INT 0
 893: EQUAL
 894: AND
 895: IFFALSE 912
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 897: LD_EXP 6
 901: PPUSH
 902: LD_INT 2
 904: PPUSH
 905: LD_INT 0
 907: PPUSH
 908: CALL_OW 49
// end ;
 912: LD_VAR 0 1
 916: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 917: LD_INT 0
 919: PPUSH
 920: PPUSH
 921: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 922: LD_EXP 13
 926: PPUSH
 927: LD_INT 10
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 937: LD_EXP 5
 941: PPUSH
 942: LD_INT 10
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// uc_nation = 1 ;
 952: LD_ADDR_OWVAR 21
 956: PUSH
 957: LD_INT 1
 959: ST_TO_ADDR
// uc_side = 4 ;
 960: LD_ADDR_OWVAR 20
 964: PUSH
 965: LD_INT 4
 967: ST_TO_ADDR
// hc_class := 3 ;
 968: LD_ADDR_OWVAR 28
 972: PUSH
 973: LD_INT 3
 975: ST_TO_ADDR
// hc_sex := sex_male ;
 976: LD_ADDR_OWVAR 27
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
 984: LD_ADDR_OWVAR 33
 988: PUSH
 989: LD_STRING SecondCharsGal
 991: ST_TO_ADDR
// hc_face_number := 53 ;
 992: LD_ADDR_OWVAR 34
 996: PUSH
 997: LD_INT 53
 999: ST_TO_ADDR
// hc_name := Freddie Warner ;
1000: LD_ADDR_OWVAR 26
1004: PUSH
1005: LD_STRING Freddie Warner
1007: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1008: LD_ADDR_OWVAR 31
1012: PUSH
1013: LD_INT 1
1015: PUSH
1016: LD_INT 0
1018: PUSH
1019: LD_INT 3
1021: PUSH
1022: LD_INT 0
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// un = CreateHuman ;
1031: LD_ADDR_VAR 0 3
1035: PUSH
1036: CALL_OW 44
1040: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1041: LD_VAR 0 3
1045: PPUSH
1046: LD_INT 10
1048: PPUSH
1049: LD_INT 0
1051: PPUSH
1052: CALL_OW 49
// hc_class := 1 ;
1056: LD_ADDR_OWVAR 28
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// hc_sex := sex_male ;
1064: LD_ADDR_OWVAR 27
1068: PUSH
1069: LD_INT 1
1071: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1072: LD_ADDR_OWVAR 33
1076: PUSH
1077: LD_STRING SecondCharsGal
1079: ST_TO_ADDR
// hc_face_number := 56 ;
1080: LD_ADDR_OWVAR 34
1084: PUSH
1085: LD_INT 56
1087: ST_TO_ADDR
// hc_name := Mel Brennan ;
1088: LD_ADDR_OWVAR 26
1092: PUSH
1093: LD_STRING Mel Brennan
1095: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1096: LD_ADDR_OWVAR 31
1100: PUSH
1101: LD_INT 2
1103: PUSH
1104: LD_INT 1
1106: PUSH
1107: LD_INT 1
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: EMPTY
1114: LIST
1115: LIST
1116: LIST
1117: LIST
1118: ST_TO_ADDR
// un = CreateHuman ;
1119: LD_ADDR_VAR 0 3
1123: PUSH
1124: CALL_OW 44
1128: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1129: LD_VAR 0 3
1133: PPUSH
1134: LD_INT 10
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL_OW 49
// hc_class := 1 ;
1144: LD_ADDR_OWVAR 28
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// hc_sex := sex_male ;
1152: LD_ADDR_OWVAR 27
1156: PUSH
1157: LD_INT 1
1159: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1160: LD_ADDR_OWVAR 33
1164: PUSH
1165: LD_STRING AmGalRemake
1167: ST_TO_ADDR
// hc_face_number := 5 ;
1168: LD_ADDR_OWVAR 34
1172: PUSH
1173: LD_INT 5
1175: ST_TO_ADDR
// hc_name := Bob Joplin ;
1176: LD_ADDR_OWVAR 26
1180: PUSH
1181: LD_STRING Bob Joplin
1183: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1184: LD_ADDR_OWVAR 31
1188: PUSH
1189: LD_INT 3
1191: PUSH
1192: LD_INT 1
1194: PUSH
1195: LD_INT 1
1197: PUSH
1198: LD_INT 1
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: LIST
1205: LIST
1206: ST_TO_ADDR
// un = CreateHuman ;
1207: LD_ADDR_VAR 0 3
1211: PUSH
1212: CALL_OW 44
1216: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1217: LD_VAR 0 3
1221: PPUSH
1222: LD_INT 10
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: CALL_OW 49
// hc_class := 3 ;
1232: LD_ADDR_OWVAR 28
1236: PUSH
1237: LD_INT 3
1239: ST_TO_ADDR
// hc_sex := sex_female ;
1240: LD_ADDR_OWVAR 27
1244: PUSH
1245: LD_INT 2
1247: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1248: LD_ADDR_OWVAR 33
1252: PUSH
1253: LD_STRING AmGalRemake
1255: ST_TO_ADDR
// hc_face_number := 4 ;
1256: LD_ADDR_OWVAR 34
1260: PUSH
1261: LD_INT 4
1263: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1264: LD_ADDR_OWVAR 26
1268: PUSH
1269: LD_STRING Elizabeth Whitney
1271: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1272: LD_ADDR_OWVAR 31
1276: PUSH
1277: LD_INT 2
1279: PUSH
1280: LD_INT 2
1282: PUSH
1283: LD_INT 4
1285: PUSH
1286: LD_INT 2
1288: PUSH
1289: EMPTY
1290: LIST
1291: LIST
1292: LIST
1293: LIST
1294: ST_TO_ADDR
// un = CreateHuman ;
1295: LD_ADDR_VAR 0 3
1299: PUSH
1300: CALL_OW 44
1304: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1305: LD_VAR 0 3
1309: PPUSH
1310: LD_INT 10
1312: PPUSH
1313: LD_INT 0
1315: PPUSH
1316: CALL_OW 49
// end ;
1320: LD_VAR 0 1
1324: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1325: LD_INT 0
1327: PPUSH
1328: PPUSH
1329: PPUSH
// uc_nation = 1 ;
1330: LD_ADDR_OWVAR 21
1334: PUSH
1335: LD_INT 1
1337: ST_TO_ADDR
// uc_side = 1 ;
1338: LD_ADDR_OWVAR 20
1342: PUSH
1343: LD_INT 1
1345: ST_TO_ADDR
// hc_class := 1 ;
1346: LD_ADDR_OWVAR 28
1350: PUSH
1351: LD_INT 1
1353: ST_TO_ADDR
// hc_sex := sex_male ;
1354: LD_ADDR_OWVAR 27
1358: PUSH
1359: LD_INT 1
1361: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1362: LD_ADDR_OWVAR 33
1366: PUSH
1367: LD_STRING SecondCharsGal
1369: ST_TO_ADDR
// hc_face_number := 59 ;
1370: LD_ADDR_OWVAR 34
1374: PUSH
1375: LD_INT 59
1377: ST_TO_ADDR
// hc_name := Max Gray ;
1378: LD_ADDR_OWVAR 26
1382: PUSH
1383: LD_STRING Max Gray
1385: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1386: LD_ADDR_OWVAR 31
1390: PUSH
1391: LD_INT 2
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: LD_INT 0
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: LIST
1407: LIST
1408: ST_TO_ADDR
// un = CreateHuman ;
1409: LD_ADDR_VAR 0 4
1413: PUSH
1414: CALL_OW 44
1418: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1419: LD_VAR 0 4
1423: PPUSH
1424: LD_INT 11
1426: PPUSH
1427: LD_INT 0
1429: PPUSH
1430: CALL_OW 49
// hc_class := 1 ;
1434: LD_ADDR_OWVAR 28
1438: PUSH
1439: LD_INT 1
1441: ST_TO_ADDR
// hc_sex := sex_male ;
1442: LD_ADDR_OWVAR 27
1446: PUSH
1447: LD_INT 1
1449: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1450: LD_ADDR_OWVAR 33
1454: PUSH
1455: LD_STRING SecondCharsGal
1457: ST_TO_ADDR
// hc_face_number := 54 ;
1458: LD_ADDR_OWVAR 34
1462: PUSH
1463: LD_INT 54
1465: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1466: LD_ADDR_OWVAR 26
1470: PUSH
1471: LD_STRING Luigi Ghbellin
1473: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1474: LD_ADDR_OWVAR 31
1478: PUSH
1479: LD_INT 1
1481: PUSH
1482: LD_INT 0
1484: PUSH
1485: LD_INT 0
1487: PUSH
1488: LD_INT 1
1490: PUSH
1491: EMPTY
1492: LIST
1493: LIST
1494: LIST
1495: LIST
1496: ST_TO_ADDR
// un = CreateHuman ;
1497: LD_ADDR_VAR 0 4
1501: PUSH
1502: CALL_OW 44
1506: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1507: LD_VAR 0 4
1511: PPUSH
1512: LD_INT 11
1514: PPUSH
1515: LD_INT 0
1517: PPUSH
1518: CALL_OW 49
// hc_class := 3 ;
1522: LD_ADDR_OWVAR 28
1526: PUSH
1527: LD_INT 3
1529: ST_TO_ADDR
// hc_sex := sex_male ;
1530: LD_ADDR_OWVAR 27
1534: PUSH
1535: LD_INT 1
1537: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1538: LD_ADDR_OWVAR 33
1542: PUSH
1543: LD_STRING AmGalRemake
1545: ST_TO_ADDR
// hc_face_number := 6 ;
1546: LD_ADDR_OWVAR 34
1550: PUSH
1551: LD_INT 6
1553: ST_TO_ADDR
// hc_name := Leon Carter ;
1554: LD_ADDR_OWVAR 26
1558: PUSH
1559: LD_STRING Leon Carter
1561: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1562: LD_ADDR_OWVAR 31
1566: PUSH
1567: LD_INT 0
1569: PUSH
1570: LD_INT 1
1572: PUSH
1573: LD_INT 3
1575: PUSH
1576: LD_INT 0
1578: PUSH
1579: EMPTY
1580: LIST
1581: LIST
1582: LIST
1583: LIST
1584: ST_TO_ADDR
// un = CreateHuman ;
1585: LD_ADDR_VAR 0 4
1589: PUSH
1590: CALL_OW 44
1594: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1595: LD_VAR 0 4
1599: PPUSH
1600: LD_INT 11
1602: PPUSH
1603: LD_INT 0
1605: PPUSH
1606: CALL_OW 49
// if count = 4 then
1610: LD_VAR 0 1
1614: PUSH
1615: LD_INT 4
1617: EQUAL
1618: IFFALSE 1708
// begin hc_class := 1 ;
1620: LD_ADDR_OWVAR 28
1624: PUSH
1625: LD_INT 1
1627: ST_TO_ADDR
// hc_sex := sex_male ;
1628: LD_ADDR_OWVAR 27
1632: PUSH
1633: LD_INT 1
1635: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1636: LD_ADDR_OWVAR 33
1640: PUSH
1641: LD_STRING SecondCharsGal
1643: ST_TO_ADDR
// hc_face_number := 34 ;
1644: LD_ADDR_OWVAR 34
1648: PUSH
1649: LD_INT 34
1651: ST_TO_ADDR
// hc_name := Ian Hill ;
1652: LD_ADDR_OWVAR 26
1656: PUSH
1657: LD_STRING Ian Hill
1659: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1660: LD_ADDR_OWVAR 31
1664: PUSH
1665: LD_INT 2
1667: PUSH
1668: LD_INT 0
1670: PUSH
1671: LD_INT 1
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: EMPTY
1678: LIST
1679: LIST
1680: LIST
1681: LIST
1682: ST_TO_ADDR
// un = CreateHuman ;
1683: LD_ADDR_VAR 0 4
1687: PUSH
1688: CALL_OW 44
1692: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1693: LD_VAR 0 4
1697: PPUSH
1698: LD_INT 11
1700: PPUSH
1701: LD_INT 0
1703: PPUSH
1704: CALL_OW 49
// end ; if count = 5 then
1708: LD_VAR 0 1
1712: PUSH
1713: LD_INT 5
1715: EQUAL
1716: IFFALSE 1894
// begin hc_class := 1 ;
1718: LD_ADDR_OWVAR 28
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// hc_sex := sex_male ;
1726: LD_ADDR_OWVAR 27
1730: PUSH
1731: LD_INT 1
1733: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1734: LD_ADDR_OWVAR 33
1738: PUSH
1739: LD_STRING SecondCharsGal
1741: ST_TO_ADDR
// hc_face_number := 34 ;
1742: LD_ADDR_OWVAR 34
1746: PUSH
1747: LD_INT 34
1749: ST_TO_ADDR
// hc_name := Ian Hill ;
1750: LD_ADDR_OWVAR 26
1754: PUSH
1755: LD_STRING Ian Hill
1757: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1758: LD_ADDR_OWVAR 31
1762: PUSH
1763: LD_INT 2
1765: PUSH
1766: LD_INT 0
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: LD_INT 0
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: LIST
1779: LIST
1780: ST_TO_ADDR
// un = CreateHuman ;
1781: LD_ADDR_VAR 0 4
1785: PUSH
1786: CALL_OW 44
1790: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1791: LD_VAR 0 4
1795: PPUSH
1796: LD_INT 11
1798: PPUSH
1799: LD_INT 0
1801: PPUSH
1802: CALL_OW 49
// hc_class := 1 ;
1806: LD_ADDR_OWVAR 28
1810: PUSH
1811: LD_INT 1
1813: ST_TO_ADDR
// hc_sex := sex_female ;
1814: LD_ADDR_OWVAR 27
1818: PUSH
1819: LD_INT 2
1821: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1822: LD_ADDR_OWVAR 33
1826: PUSH
1827: LD_STRING SecondCharsGal
1829: ST_TO_ADDR
// hc_face_number := 41 ;
1830: LD_ADDR_OWVAR 34
1834: PUSH
1835: LD_INT 41
1837: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
1838: LD_ADDR_OWVAR 26
1842: PUSH
1843: LD_STRING Kate Wadsworth
1845: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1846: LD_ADDR_OWVAR 31
1850: PUSH
1851: LD_INT 2
1853: PUSH
1854: LD_INT 3
1856: PUSH
1857: LD_INT 1
1859: PUSH
1860: LD_INT 0
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: ST_TO_ADDR
// un = CreateHuman ;
1869: LD_ADDR_VAR 0 4
1873: PUSH
1874: CALL_OW 44
1878: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1879: LD_VAR 0 4
1883: PPUSH
1884: LD_INT 11
1886: PPUSH
1887: LD_INT 0
1889: PPUSH
1890: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1894: LD_INT 11
1896: PPUSH
1897: LD_INT 22
1899: PUSH
1900: LD_INT 1
1902: PUSH
1903: EMPTY
1904: LIST
1905: LIST
1906: PUSH
1907: LD_INT 21
1909: PUSH
1910: LD_INT 1
1912: PUSH
1913: EMPTY
1914: LIST
1915: LIST
1916: PUSH
1917: LD_INT 26
1919: PUSH
1920: LD_INT 1
1922: PUSH
1923: EMPTY
1924: LIST
1925: LIST
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: LIST
1931: PPUSH
1932: CALL_OW 70
1936: PUSH
1937: LD_INT 1
1939: ARRAY
1940: PPUSH
1941: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1945: LD_INT 11
1947: PPUSH
1948: LD_INT 22
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: LD_INT 21
1960: PUSH
1961: LD_INT 1
1963: PUSH
1964: EMPTY
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 26
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: EMPTY
1975: LIST
1976: LIST
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: LIST
1982: PPUSH
1983: CALL_OW 70
1987: PUSH
1988: LD_INT 1
1990: ARRAY
1991: PPUSH
1992: LD_STRING D6-Sol3-1
1994: PPUSH
1995: CALL_OW 88
// end ; end_of_file
1999: LD_VAR 0 2
2003: RET
// export function PrepareRussianCommander ; begin
2004: LD_INT 0
2006: PPUSH
// uc_side = 3 ;
2007: LD_ADDR_OWVAR 20
2011: PUSH
2012: LD_INT 3
2014: ST_TO_ADDR
// uc_nation = 3 ;
2015: LD_ADDR_OWVAR 21
2019: PUSH
2020: LD_INT 3
2022: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2023: LD_ADDR_EXP 15
2027: PUSH
2028: LD_STRING Stolypin
2030: PPUSH
2031: CALL_OW 25
2035: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2036: LD_EXP 15
2040: PPUSH
2041: LD_INT 21
2043: PPUSH
2044: CALL_OW 52
// end ;
2048: LD_VAR 0 1
2052: RET
// export function PrepareRussianBase ; var i ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2057: LD_INT 3
2059: PPUSH
2060: LD_INT 3
2062: PPUSH
2063: LD_INT 22
2065: PPUSH
2066: LD_EXP 16
2070: PPUSH
2071: LD_EXP 17
2075: PPUSH
2076: CALL_OW 12
2080: PPUSH
2081: LD_INT 1
2083: PPUSH
2084: LD_INT 2
2086: PPUSH
2087: CALL 3324 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2091: LD_INT 3
2093: PPUSH
2094: LD_INT 3
2096: PPUSH
2097: LD_INT 21
2099: PPUSH
2100: LD_EXP 16
2104: PPUSH
2105: LD_EXP 17
2109: PPUSH
2110: CALL_OW 12
2114: PPUSH
2115: LD_INT 2
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: CALL 3324 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2125: LD_INT 3
2127: PPUSH
2128: LD_INT 3
2130: PPUSH
2131: LD_INT 1
2133: PPUSH
2134: LD_EXP 16
2138: PPUSH
2139: LD_EXP 17
2143: PPUSH
2144: CALL_OW 12
2148: PPUSH
2149: LD_INT 4
2151: PPUSH
2152: LD_INT 2
2154: PPUSH
2155: CALL 3324 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2159: LD_INT 3
2161: PPUSH
2162: LD_INT 3
2164: PPUSH
2165: LD_INT 24
2167: PPUSH
2168: LD_EXP 16
2172: PPUSH
2173: LD_EXP 17
2177: PPUSH
2178: CALL_OW 12
2182: PPUSH
2183: LD_INT 3
2185: PPUSH
2186: LD_INT 6
2188: PPUSH
2189: CALL 3324 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2193: LD_ADDR_VAR 0 2
2197: PUSH
2198: LD_INT 22
2200: PUSH
2201: LD_INT 3
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: LD_INT 30
2210: PUSH
2211: LD_INT 32
2213: PUSH
2214: EMPTY
2215: LIST
2216: LIST
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PPUSH
2222: CALL_OW 69
2226: PUSH
2227: FOR_IN
2228: IFFALSE 2268
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2230: LD_INT 3
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_VAR 0 2
2240: PPUSH
2241: LD_EXP 16
2245: PPUSH
2246: LD_EXP 17
2250: PPUSH
2251: CALL_OW 12
2255: PPUSH
2256: LD_INT 1
2258: PPUSH
2259: LD_INT 1
2261: PPUSH
2262: CALL 3324 0 6
2266: GO 2227
2268: POP
2269: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2270: LD_ADDR_VAR 0 2
2274: PUSH
2275: LD_INT 22
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: PUSH
2285: LD_INT 30
2287: PUSH
2288: LD_INT 31
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: EMPTY
2296: LIST
2297: LIST
2298: PPUSH
2299: CALL_OW 69
2303: PUSH
2304: FOR_IN
2305: IFFALSE 2333
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2307: LD_EXP 16
2311: PPUSH
2312: LD_EXP 17
2316: PPUSH
2317: CALL_OW 12
2321: PPUSH
2322: LD_VAR 0 2
2326: PPUSH
2327: CALL 3434 0 2
2331: GO 2304
2333: POP
2334: POP
// end ;
2335: LD_VAR 0 1
2339: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2340: LD_INT 0
2342: PPUSH
2343: PPUSH
2344: PPUSH
2345: PPUSH
// uc_side = 6 ;
2346: LD_ADDR_OWVAR 20
2350: PUSH
2351: LD_INT 6
2353: ST_TO_ADDR
// uc_nation = 3 ;
2354: LD_ADDR_OWVAR 21
2358: PUSH
2359: LD_INT 3
2361: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2362: LD_ADDR_VAR 0 2
2366: PUSH
2367: DOUBLE
2368: LD_INT 1
2370: DEC
2371: ST_TO_ADDR
2372: LD_INT 2
2374: PUSH
2375: LD_INT 1
2377: PUSH
2378: LD_INT 1
2380: PUSH
2381: EMPTY
2382: LIST
2383: LIST
2384: LIST
2385: PUSH
2386: LD_OWVAR 67
2390: ARRAY
2391: PUSH
2392: FOR_TO
2393: IFFALSE 2553
// begin vc_engine = 1 ;
2395: LD_ADDR_OWVAR 39
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// vc_control = 1 ;
2403: LD_ADDR_OWVAR 38
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2411: LD_ADDR_OWVAR 40
2415: PUSH
2416: LD_INT 42
2418: PUSH
2419: LD_INT 42
2421: PUSH
2422: LD_INT 43
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: PUSH
2430: LD_OWVAR 67
2434: ARRAY
2435: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2436: LD_ADDR_OWVAR 37
2440: PUSH
2441: LD_INT 21
2443: PUSH
2444: LD_INT 22
2446: PUSH
2447: LD_INT 22
2449: PUSH
2450: EMPTY
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_OWVAR 67
2459: ARRAY
2460: ST_TO_ADDR
// veh = CreateVehicle ;
2461: LD_ADDR_VAR 0 3
2465: PUSH
2466: CALL_OW 45
2470: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2471: LD_VAR 0 3
2475: PPUSH
2476: LD_INT 3
2478: PPUSH
2479: LD_INT 0
2481: PPUSH
2482: CALL_OW 49
// hc_gallery =  ;
2486: LD_ADDR_OWVAR 33
2490: PUSH
2491: LD_STRING 
2493: ST_TO_ADDR
// hc_name =  ;
2494: LD_ADDR_OWVAR 26
2498: PUSH
2499: LD_STRING 
2501: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2502: LD_INT 0
2504: PPUSH
2505: LD_INT 3
2507: PPUSH
2508: LD_EXP 16
2512: PPUSH
2513: LD_EXP 17
2517: PPUSH
2518: CALL_OW 12
2522: PPUSH
2523: CALL_OW 380
// un = CreateHuman ;
2527: LD_ADDR_VAR 0 4
2531: PUSH
2532: CALL_OW 44
2536: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2537: LD_VAR 0 4
2541: PPUSH
2542: LD_VAR 0 3
2546: PPUSH
2547: CALL_OW 52
// end ;
2551: GO 2392
2553: POP
2554: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2555: LD_INT 0
2557: PPUSH
2558: LD_INT 2
2560: PPUSH
2561: LD_EXP 16
2565: PPUSH
2566: LD_EXP 17
2570: PPUSH
2571: CALL_OW 12
2575: PUSH
2576: LD_INT 2
2578: PLUS
2579: PPUSH
2580: CALL_OW 380
// un = CreateHuman ;
2584: LD_ADDR_VAR 0 4
2588: PUSH
2589: CALL_OW 44
2593: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2594: LD_VAR 0 4
2598: PPUSH
2599: LD_INT 3
2601: PPUSH
2602: LD_INT 0
2604: PPUSH
2605: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 4
2614: PPUSH
2615: LD_EXP 16
2619: PPUSH
2620: LD_EXP 17
2624: PPUSH
2625: CALL_OW 12
2629: PUSH
2630: LD_INT 2
2632: PLUS
2633: PPUSH
2634: CALL_OW 380
// un = CreateHuman ;
2638: LD_ADDR_VAR 0 4
2642: PUSH
2643: CALL_OW 44
2647: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2648: LD_VAR 0 4
2652: PPUSH
2653: LD_INT 3
2655: PPUSH
2656: LD_INT 0
2658: PPUSH
2659: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
2663: LD_ADDR_VAR 0 2
2667: PUSH
2668: DOUBLE
2669: LD_INT 1
2671: DEC
2672: ST_TO_ADDR
2673: LD_INT 2
2675: PUSH
2676: LD_INT 3
2678: PUSH
2679: LD_INT 3
2681: PUSH
2682: EMPTY
2683: LIST
2684: LIST
2685: LIST
2686: PUSH
2687: LD_OWVAR 67
2691: ARRAY
2692: PUSH
2693: LD_INT 1
2695: PPUSH
2696: LD_INT 3
2698: PPUSH
2699: CALL_OW 12
2703: PLUS
2704: PUSH
2705: FOR_TO
2706: IFFALSE 2776
// begin hc_gallery =  ;
2708: LD_ADDR_OWVAR 33
2712: PUSH
2713: LD_STRING 
2715: ST_TO_ADDR
// hc_name =  ;
2716: LD_ADDR_OWVAR 26
2720: PUSH
2721: LD_STRING 
2723: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2724: LD_INT 0
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_EXP 16
2734: PPUSH
2735: LD_EXP 17
2739: PPUSH
2740: CALL_OW 12
2744: PPUSH
2745: CALL_OW 380
// un = CreateHuman ;
2749: LD_ADDR_VAR 0 4
2753: PUSH
2754: CALL_OW 44
2758: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2759: LD_VAR 0 4
2763: PPUSH
2764: LD_INT 3
2766: PPUSH
2767: LD_INT 0
2769: PPUSH
2770: CALL_OW 49
// end ;
2774: GO 2705
2776: POP
2777: POP
// vc_engine = 1 ;
2778: LD_ADDR_OWVAR 39
2782: PUSH
2783: LD_INT 1
2785: ST_TO_ADDR
// vc_control = 1 ;
2786: LD_ADDR_OWVAR 38
2790: PUSH
2791: LD_INT 1
2793: ST_TO_ADDR
// vc_weapon = 51 ;
2794: LD_ADDR_OWVAR 40
2798: PUSH
2799: LD_INT 51
2801: ST_TO_ADDR
// vc_chassis = 22 ;
2802: LD_ADDR_OWVAR 37
2806: PUSH
2807: LD_INT 22
2809: ST_TO_ADDR
// veh = CreateVehicle ;
2810: LD_ADDR_VAR 0 3
2814: PUSH
2815: CALL_OW 45
2819: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2820: LD_VAR 0 3
2824: PPUSH
2825: LD_INT 3
2827: PPUSH
2828: LD_INT 0
2830: PPUSH
2831: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2835: LD_VAR 0 3
2839: PPUSH
2840: LD_INT 1
2842: PPUSH
2843: LD_INT 100
2845: PPUSH
2846: CALL_OW 290
// hc_gallery =  ;
2850: LD_ADDR_OWVAR 33
2854: PUSH
2855: LD_STRING 
2857: ST_TO_ADDR
// hc_name =  ;
2858: LD_ADDR_OWVAR 26
2862: PUSH
2863: LD_STRING 
2865: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2866: LD_INT 0
2868: PPUSH
2869: LD_INT 3
2871: PPUSH
2872: LD_EXP 16
2876: PPUSH
2877: LD_EXP 17
2881: PPUSH
2882: CALL_OW 12
2886: PPUSH
2887: CALL_OW 380
// un = CreateHuman ;
2891: LD_ADDR_VAR 0 4
2895: PUSH
2896: CALL_OW 44
2900: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2901: LD_VAR 0 4
2905: PPUSH
2906: LD_VAR 0 3
2910: PPUSH
2911: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2915: LD_ADDR_VAR 0 2
2919: PUSH
2920: LD_INT 22
2922: PUSH
2923: LD_INT 6
2925: PUSH
2926: EMPTY
2927: LIST
2928: LIST
2929: PUSH
2930: LD_INT 1
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 25
2938: PUSH
2939: LD_INT 2
2941: PUSH
2942: EMPTY
2943: LIST
2944: LIST
2945: PUSH
2946: EMPTY
2947: LIST
2948: LIST
2949: PUSH
2950: LD_INT 3
2952: PUSH
2953: LD_INT 25
2955: PUSH
2956: LD_INT 4
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: PUSH
2963: EMPTY
2964: LIST
2965: LIST
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: EMPTY
2973: LIST
2974: LIST
2975: PPUSH
2976: CALL_OW 69
2980: PUSH
2981: FOR_IN
2982: IFFALSE 3001
// ComAgressiveMove ( i , 45 , 46 ) ;
2984: LD_VAR 0 2
2988: PPUSH
2989: LD_INT 45
2991: PPUSH
2992: LD_INT 46
2994: PPUSH
2995: CALL_OW 114
2999: GO 2981
3001: POP
3002: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3003: LD_ADDR_VAR 0 2
3007: PUSH
3008: LD_INT 22
3010: PUSH
3011: LD_INT 6
3013: PUSH
3014: EMPTY
3015: LIST
3016: LIST
3017: PUSH
3018: LD_INT 25
3020: PUSH
3021: LD_INT 2
3023: PUSH
3024: EMPTY
3025: LIST
3026: LIST
3027: PUSH
3028: EMPTY
3029: LIST
3030: LIST
3031: PPUSH
3032: CALL_OW 69
3036: PUSH
3037: FOR_IN
3038: IFFALSE 3069
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3040: LD_ADDR_EXP 19
3044: PUSH
3045: LD_VAR 0 2
3049: PPUSH
3050: LD_INT 0
3052: PPUSH
3053: LD_INT 48
3055: PPUSH
3056: LD_INT 55
3058: PPUSH
3059: LD_INT 5
3061: PPUSH
3062: CALL_OW 145
3066: ST_TO_ADDR
3067: GO 3037
3069: POP
3070: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3071: LD_ADDR_VAR 0 2
3075: PUSH
3076: LD_INT 22
3078: PUSH
3079: LD_INT 6
3081: PUSH
3082: EMPTY
3083: LIST
3084: LIST
3085: PUSH
3086: LD_INT 25
3088: PUSH
3089: LD_INT 4
3091: PUSH
3092: EMPTY
3093: LIST
3094: LIST
3095: PUSH
3096: EMPTY
3097: LIST
3098: LIST
3099: PPUSH
3100: CALL_OW 69
3104: PUSH
3105: FOR_IN
3106: IFFALSE 3125
// ComMoveXY ( i , 39 , 55 ) ;
3108: LD_VAR 0 2
3112: PPUSH
3113: LD_INT 39
3115: PPUSH
3116: LD_INT 55
3118: PPUSH
3119: CALL_OW 111
3123: GO 3105
3125: POP
3126: POP
// end ;
3127: LD_VAR 0 1
3131: RET
// export function PrepareFirstAttack ; var i , un ; begin
3132: LD_INT 0
3134: PPUSH
3135: PPUSH
3136: PPUSH
// uc_side = 5 ;
3137: LD_ADDR_OWVAR 20
3141: PUSH
3142: LD_INT 5
3144: ST_TO_ADDR
// uc_nation = 3 ;
3145: LD_ADDR_OWVAR 21
3149: PUSH
3150: LD_INT 3
3152: ST_TO_ADDR
// for i := 1 to 4 do
3153: LD_ADDR_VAR 0 2
3157: PUSH
3158: DOUBLE
3159: LD_INT 1
3161: DEC
3162: ST_TO_ADDR
3163: LD_INT 4
3165: PUSH
3166: FOR_TO
3167: IFFALSE 3252
// begin hc_gallery =  ;
3169: LD_ADDR_OWVAR 33
3173: PUSH
3174: LD_STRING 
3176: ST_TO_ADDR
// hc_name =  ;
3177: LD_ADDR_OWVAR 26
3181: PUSH
3182: LD_STRING 
3184: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3185: LD_INT 0
3187: PPUSH
3188: LD_INT 1
3190: PPUSH
3191: LD_EXP 16
3195: PPUSH
3196: LD_EXP 17
3200: PPUSH
3201: CALL_OW 12
3205: PPUSH
3206: CALL_OW 380
// un = CreateHuman ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: CALL_OW 44
3219: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3220: LD_VAR 0 3
3224: PPUSH
3225: LD_INT 4
3227: PPUSH
3228: LD_INT 0
3230: PPUSH
3231: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3235: LD_VAR 0 3
3239: PPUSH
3240: LD_INT 48
3242: PPUSH
3243: LD_INT 14
3245: PPUSH
3246: CALL_OW 114
// end ;
3250: GO 3166
3252: POP
3253: POP
// firstRussianAttack = 1 ;
3254: LD_ADDR_EXP 21
3258: PUSH
3259: LD_INT 1
3261: ST_TO_ADDR
// end ; end_of_file
3262: LD_VAR 0 1
3266: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3267: LD_INT 0
3269: PPUSH
3270: PPUSH
// if exist_mode then
3271: LD_VAR 0 2
3275: IFFALSE 3294
// begin unit := CreateCharacter ( ident ) ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_VAR 0 1
3286: PPUSH
3287: CALL_OW 34
3291: ST_TO_ADDR
// end else
3292: GO 3309
// begin unit := NewCharacter ( ident ) ;
3294: LD_ADDR_VAR 0 4
3298: PUSH
3299: LD_VAR 0 1
3303: PPUSH
3304: CALL_OW 25
3308: ST_TO_ADDR
// end ; result := unit ;
3309: LD_ADDR_VAR 0 3
3313: PUSH
3314: LD_VAR 0 4
3318: ST_TO_ADDR
// end ;
3319: LD_VAR 0 3
3323: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3324: LD_INT 0
3326: PPUSH
3327: PPUSH
3328: PPUSH
3329: PPUSH
// for i = 1 to count do
3330: LD_ADDR_VAR 0 8
3334: PUSH
3335: DOUBLE
3336: LD_INT 1
3338: DEC
3339: ST_TO_ADDR
3340: LD_VAR 0 6
3344: PUSH
3345: FOR_TO
3346: IFFALSE 3427
// begin uc_side = side ;
3348: LD_ADDR_OWVAR 20
3352: PUSH
3353: LD_VAR 0 1
3357: ST_TO_ADDR
// uc_nation = nation ;
3358: LD_ADDR_OWVAR 21
3362: PUSH
3363: LD_VAR 0 2
3367: ST_TO_ADDR
// hc_gallery =  ;
3368: LD_ADDR_OWVAR 33
3372: PUSH
3373: LD_STRING 
3375: ST_TO_ADDR
// hc_name =  ;
3376: LD_ADDR_OWVAR 26
3380: PUSH
3381: LD_STRING 
3383: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3384: LD_INT 0
3386: PPUSH
3387: LD_VAR 0 5
3391: PPUSH
3392: LD_VAR 0 4
3396: PPUSH
3397: CALL_OW 380
// un = CreateHuman ;
3401: LD_ADDR_VAR 0 10
3405: PUSH
3406: CALL_OW 44
3410: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3411: LD_VAR 0 10
3415: PPUSH
3416: LD_VAR 0 3
3420: PPUSH
3421: CALL_OW 52
// end ;
3425: GO 3345
3427: POP
3428: POP
// end ;
3429: LD_VAR 0 7
3433: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3434: LD_INT 0
3436: PPUSH
3437: PPUSH
3438: PPUSH
// uc_side := GetSide ( b ) ;
3439: LD_ADDR_OWVAR 20
3443: PUSH
3444: LD_VAR 0 2
3448: PPUSH
3449: CALL_OW 255
3453: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3454: LD_ADDR_OWVAR 21
3458: PUSH
3459: LD_VAR 0 2
3463: PPUSH
3464: CALL_OW 248
3468: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3469: LD_INT 0
3471: PPUSH
3472: LD_INT 1
3474: PPUSH
3475: LD_VAR 0 1
3479: PPUSH
3480: CALL_OW 380
// un = CreateHuman ;
3484: LD_ADDR_VAR 0 4
3488: PUSH
3489: CALL_OW 44
3493: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3494: LD_ADDR_VAR 0 5
3498: PUSH
3499: LD_VAR 0 2
3503: PPUSH
3504: CALL_OW 254
3508: PUSH
3509: LD_INT 3
3511: MINUS
3512: ST_TO_ADDR
// if dir < 0 then
3513: LD_VAR 0 5
3517: PUSH
3518: LD_INT 0
3520: LESS
3521: IFFALSE 3537
// dir := 6 + dir ;
3523: LD_ADDR_VAR 0 5
3527: PUSH
3528: LD_INT 6
3530: PUSH
3531: LD_VAR 0 5
3535: PLUS
3536: ST_TO_ADDR
// SetDir ( un , dir ) ;
3537: LD_VAR 0 4
3541: PPUSH
3542: LD_VAR 0 5
3546: PPUSH
3547: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3551: LD_VAR 0 4
3555: PPUSH
3556: LD_VAR 0 2
3560: PPUSH
3561: CALL_OW 52
// end ;
3565: LD_VAR 0 3
3569: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3570: LD_INT 0
3572: PPUSH
3573: PPUSH
3574: PPUSH
// rnd = rand ( 1 , characters ) ;
3575: LD_ADDR_VAR 0 6
3579: PUSH
3580: LD_INT 1
3582: PPUSH
3583: LD_VAR 0 1
3587: PPUSH
3588: CALL_OW 12
3592: ST_TO_ADDR
// for i = 1 to characters do
3593: LD_ADDR_VAR 0 5
3597: PUSH
3598: DOUBLE
3599: LD_INT 1
3601: DEC
3602: ST_TO_ADDR
3603: LD_VAR 0 1
3607: PUSH
3608: FOR_TO
3609: IFFALSE 3719
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3611: LD_VAR 0 5
3615: PUSH
3616: LD_VAR 0 6
3620: EQUAL
3621: PUSH
3622: LD_VAR 0 1
3626: PUSH
3627: LD_VAR 0 5
3631: ARRAY
3632: PPUSH
3633: CALL_OW 258
3637: PUSH
3638: LD_INT 1
3640: EQUAL
3641: AND
3642: IFFALSE 3664
// Say ( characters [ i ] , dialogMID ) ;
3644: LD_VAR 0 1
3648: PUSH
3649: LD_VAR 0 5
3653: ARRAY
3654: PPUSH
3655: LD_VAR 0 2
3659: PPUSH
3660: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3664: LD_VAR 0 5
3668: PUSH
3669: LD_VAR 0 6
3673: EQUAL
3674: PUSH
3675: LD_VAR 0 1
3679: PUSH
3680: LD_VAR 0 5
3684: ARRAY
3685: PPUSH
3686: CALL_OW 258
3690: PUSH
3691: LD_INT 2
3693: EQUAL
3694: AND
3695: IFFALSE 3717
// Say ( characters [ i ] , dialogFID ) ;
3697: LD_VAR 0 1
3701: PUSH
3702: LD_VAR 0 5
3706: ARRAY
3707: PPUSH
3708: LD_VAR 0 3
3712: PPUSH
3713: CALL_OW 88
// end ;
3717: GO 3608
3719: POP
3720: POP
// end ;
3721: LD_VAR 0 4
3725: RET
// export function PrepareDifficulty ; begin
3726: LD_INT 0
3728: PPUSH
// if Difficulty = 1 then
3729: LD_OWVAR 67
3733: PUSH
3734: LD_INT 1
3736: EQUAL
3737: IFFALSE 3755
// begin RuSoldMinLevel = 0 ;
3739: LD_ADDR_EXP 16
3743: PUSH
3744: LD_INT 0
3746: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3747: LD_ADDR_EXP 17
3751: PUSH
3752: LD_INT 2
3754: ST_TO_ADDR
// end ; if Difficulty = 2 then
3755: LD_OWVAR 67
3759: PUSH
3760: LD_INT 2
3762: EQUAL
3763: IFFALSE 3801
// begin RuSoldMinLevel = 1 ;
3765: LD_ADDR_EXP 16
3769: PUSH
3770: LD_INT 1
3772: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3773: LD_ADDR_EXP 17
3777: PUSH
3778: LD_INT 2
3780: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3781: LD_INT 14
3783: PPUSH
3784: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3788: LD_INT 51
3790: PPUSH
3791: LD_INT 3
3793: PPUSH
3794: LD_INT 1
3796: PPUSH
3797: CALL_OW 322
// end ; if Difficulty = 3 then
3801: LD_OWVAR 67
3805: PUSH
3806: LD_INT 3
3808: EQUAL
3809: IFFALSE 3877
// begin RuSoldMinLevel = 1 ;
3811: LD_ADDR_EXP 16
3815: PUSH
3816: LD_INT 1
3818: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3819: LD_ADDR_EXP 17
3823: PUSH
3824: LD_INT 3
3826: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3827: LD_INT 13
3829: PPUSH
3830: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3834: LD_INT 14
3836: PPUSH
3837: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3841: LD_INT 51
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 1
3849: PPUSH
3850: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3854: LD_INT 52
3856: PPUSH
3857: LD_INT 3
3859: PPUSH
3860: LD_INT 1
3862: PPUSH
3863: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3867: LD_INT 25
3869: PPUSH
3870: LD_INT 44
3872: PPUSH
3873: CALL_OW 431
// end ; end ;
3877: LD_VAR 0 1
3881: RET
// export function EnergyDialog ; begin
3882: LD_INT 0
3884: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3885: LD_INT 46
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: CALL_OW 321
3895: PUSH
3896: LD_INT 1
3898: EQUAL
3899: PUSH
3900: LD_INT 35
3902: PPUSH
3903: LD_INT 1
3905: PPUSH
3906: CALL_OW 321
3910: PUSH
3911: LD_INT 1
3913: EQUAL
3914: AND
3915: IFFALSE 3939
// begin Say ( JMM , D9c-JMM-1 ) ;
3917: LD_EXP 1
3921: PPUSH
3922: LD_STRING D9c-JMM-1
3924: PPUSH
3925: CALL_OW 88
// energyVDialog = 1 ;
3929: LD_ADDR_EXP 31
3933: PUSH
3934: LD_INT 1
3936: ST_TO_ADDR
// end else
3937: GO 4093
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3939: LD_INT 35
3941: PPUSH
3942: LD_INT 1
3944: PPUSH
3945: CALL_OW 321
3949: PUSH
3950: LD_INT 2
3952: EQUAL
3953: PUSH
3954: LD_EXP 31
3958: PUSH
3959: LD_INT 0
3961: EQUAL
3962: AND
3963: IFFALSE 3985
// begin Say ( JMM , D9c-JMM-1a ) ;
3965: LD_EXP 1
3969: PPUSH
3970: LD_STRING D9c-JMM-1a
3972: PPUSH
3973: CALL_OW 88
// energyVDialog = 1 ;
3977: LD_ADDR_EXP 31
3981: PUSH
3982: LD_INT 1
3984: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
3985: LD_INT 46
3987: PPUSH
3988: LD_INT 1
3990: PPUSH
3991: CALL_OW 321
3995: PUSH
3996: LD_INT 2
3998: EQUAL
3999: PUSH
4000: LD_EXP 31
4004: PUSH
4005: LD_INT 0
4007: EQUAL
4008: AND
4009: IFFALSE 4031
// begin Say ( JMM , D9c-JMM-1b ) ;
4011: LD_EXP 1
4015: PPUSH
4016: LD_STRING D9c-JMM-1b
4018: PPUSH
4019: CALL_OW 88
// energyVDialog = 1 ;
4023: LD_ADDR_EXP 31
4027: PUSH
4028: LD_INT 1
4030: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4031: LD_INT 46
4033: PPUSH
4034: LD_INT 1
4036: PPUSH
4037: CALL_OW 321
4041: PUSH
4042: LD_INT 2
4044: EQUAL
4045: PUSH
4046: LD_INT 21
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: CALL_OW 321
4056: PUSH
4057: LD_INT 2
4059: EQUAL
4060: AND
4061: PUSH
4062: LD_EXP 31
4066: PUSH
4067: LD_INT 0
4069: EQUAL
4070: AND
4071: IFFALSE 4093
// begin Say ( JMM , D9c-JMM-1c ) ;
4073: LD_EXP 1
4077: PPUSH
4078: LD_STRING D9c-JMM-1c
4080: PPUSH
4081: CALL_OW 88
// energyVDialog = 1 ;
4085: LD_ADDR_EXP 31
4089: PUSH
4090: LD_INT 1
4092: ST_TO_ADDR
// end ; end ; end ;
4093: LD_VAR 0 1
4097: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4098: LD_INT 0
4100: PPUSH
4101: PPUSH
4102: PPUSH
4103: PPUSH
4104: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4105: LD_VAR 0 1
4109: NOT
4110: PUSH
4111: LD_VAR 0 1
4115: PPUSH
4116: CALL_OW 256
4120: PUSH
4121: LD_INT 250
4123: LESS
4124: OR
4125: PUSH
4126: LD_VAR 0 1
4130: PPUSH
4131: CALL_OW 314
4135: PUSH
4136: LD_VAR 0 1
4140: PPUSH
4141: CALL_OW 261
4145: PUSH
4146: LD_INT 20
4148: GREATER
4149: AND
4150: OR
4151: IFFALSE 4155
// exit ;
4153: GO 4520
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4155: LD_VAR 0 1
4159: PPUSH
4160: CALL_OW 261
4164: PUSH
4165: LD_INT 20
4167: LESS
4168: PUSH
4169: LD_VAR 0 1
4173: PPUSH
4174: CALL_OW 110
4178: PUSH
4179: LD_INT 21
4181: EQUAL
4182: NOT
4183: AND
4184: IFFALSE 4211
// begin ComStop ( bulldozer ) ;
4186: LD_VAR 0 1
4190: PPUSH
4191: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4195: LD_VAR 0 1
4199: PPUSH
4200: LD_INT 21
4202: PPUSH
4203: CALL_OW 109
// exit ;
4207: GO 4520
// end else
4209: GO 4238
// if GetFuel ( bulldozer ) > 20 then
4211: LD_VAR 0 1
4215: PPUSH
4216: CALL_OW 261
4220: PUSH
4221: LD_INT 20
4223: GREATER
4224: IFFALSE 4238
// SetTag ( bulldozer , 0 ) ;
4226: LD_VAR 0 1
4230: PPUSH
4231: LD_INT 0
4233: PPUSH
4234: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4238: LD_ADDR_VAR 0 5
4242: PUSH
4243: LD_VAR 0 2
4247: PPUSH
4248: CALL_OW 353
4252: ST_TO_ADDR
// tmp := [ ] ;
4253: LD_ADDR_VAR 0 6
4257: PUSH
4258: EMPTY
4259: ST_TO_ADDR
// for i = 1 to list do
4260: LD_ADDR_VAR 0 4
4264: PUSH
4265: DOUBLE
4266: LD_INT 1
4268: DEC
4269: ST_TO_ADDR
4270: LD_VAR 0 5
4274: PUSH
4275: FOR_TO
4276: IFFALSE 4374
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4278: LD_VAR 0 5
4282: PUSH
4283: LD_VAR 0 4
4287: ARRAY
4288: PUSH
4289: LD_INT 1
4291: ARRAY
4292: PPUSH
4293: LD_VAR 0 5
4297: PUSH
4298: LD_VAR 0 4
4302: ARRAY
4303: PUSH
4304: LD_INT 2
4306: ARRAY
4307: PPUSH
4308: CALL_OW 554
4312: IFFALSE 4372
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4314: LD_ADDR_VAR 0 6
4318: PUSH
4319: LD_VAR 0 6
4323: PPUSH
4324: LD_VAR 0 6
4328: PUSH
4329: LD_INT 1
4331: PLUS
4332: PPUSH
4333: LD_VAR 0 5
4337: PUSH
4338: LD_VAR 0 4
4342: ARRAY
4343: PUSH
4344: LD_INT 1
4346: ARRAY
4347: PUSH
4348: LD_VAR 0 5
4352: PUSH
4353: LD_VAR 0 4
4357: ARRAY
4358: PUSH
4359: LD_INT 2
4361: ARRAY
4362: PUSH
4363: EMPTY
4364: LIST
4365: LIST
4366: PPUSH
4367: CALL_OW 1
4371: ST_TO_ADDR
// end ;
4372: GO 4275
4374: POP
4375: POP
// ComStop ( bulldozer ) ;
4376: LD_VAR 0 1
4380: PPUSH
4381: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4385: LD_ADDR_VAR 0 7
4389: PUSH
4390: LD_VAR 0 1
4394: PPUSH
4395: CALL_OW 250
4399: PUSH
4400: LD_VAR 0 1
4404: PPUSH
4405: CALL_OW 251
4409: PUSH
4410: EMPTY
4411: LIST
4412: LIST
4413: ST_TO_ADDR
// for i = tmp downto 1 do
4414: LD_ADDR_VAR 0 4
4418: PUSH
4419: DOUBLE
4420: LD_VAR 0 6
4424: INC
4425: ST_TO_ADDR
4426: LD_INT 1
4428: PUSH
4429: FOR_DOWNTO
4430: IFFALSE 4518
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4432: LD_ADDR_VAR 0 7
4436: PUSH
4437: LD_VAR 0 7
4441: PUSH
4442: LD_INT 1
4444: ARRAY
4445: PPUSH
4446: LD_VAR 0 7
4450: PUSH
4451: LD_INT 2
4453: ARRAY
4454: PPUSH
4455: LD_VAR 0 6
4459: PPUSH
4460: CALL 4621 0 3
4464: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4465: LD_VAR 0 1
4469: PPUSH
4470: LD_VAR 0 7
4474: PUSH
4475: LD_INT 1
4477: ARRAY
4478: PPUSH
4479: LD_VAR 0 7
4483: PUSH
4484: LD_INT 2
4486: ARRAY
4487: PPUSH
4488: CALL 4525 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4492: LD_ADDR_VAR 0 6
4496: PUSH
4497: LD_VAR 0 6
4501: PPUSH
4502: LD_VAR 0 7
4506: PUSH
4507: LD_INT 3
4509: ARRAY
4510: PPUSH
4511: CALL_OW 3
4515: ST_TO_ADDR
// end ;
4516: GO 4429
4518: POP
4519: POP
// end ;
4520: LD_VAR 0 3
4524: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4525: LD_INT 0
4527: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4528: LD_VAR 0 2
4532: PPUSH
4533: LD_VAR 0 3
4537: PPUSH
4538: CALL_OW 351
4542: PUSH
4543: LD_VAR 0 2
4547: PPUSH
4548: LD_VAR 0 3
4552: PPUSH
4553: CALL_OW 554
4557: AND
4558: PUSH
4559: LD_VAR 0 2
4563: PPUSH
4564: LD_VAR 0 3
4568: PPUSH
4569: CALL_OW 488
4573: AND
4574: PUSH
4575: LD_VAR 0 2
4579: PPUSH
4580: LD_VAR 0 3
4584: PPUSH
4585: CALL_OW 428
4589: PUSH
4590: LD_INT 1
4592: NEG
4593: EQUAL
4594: AND
4595: IFFALSE 4616
// AddComMoveXY ( bulldozer , x , y ) ;
4597: LD_VAR 0 1
4601: PPUSH
4602: LD_VAR 0 2
4606: PPUSH
4607: LD_VAR 0 3
4611: PPUSH
4612: CALL_OW 171
// end ;
4616: LD_VAR 0 4
4620: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
4621: LD_INT 0
4623: PPUSH
4624: PPUSH
4625: PPUSH
4626: PPUSH
4627: PPUSH
4628: PPUSH
4629: PPUSH
// dist := 99999 ;
4630: LD_ADDR_VAR 0 6
4634: PUSH
4635: LD_INT 99999
4637: ST_TO_ADDR
// for i = 1 to list do
4638: LD_ADDR_VAR 0 5
4642: PUSH
4643: DOUBLE
4644: LD_INT 1
4646: DEC
4647: ST_TO_ADDR
4648: LD_VAR 0 3
4652: PUSH
4653: FOR_TO
4654: IFFALSE 4792
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
4656: LD_ADDR_VAR 0 7
4660: PUSH
4661: LD_VAR 0 1
4665: PPUSH
4666: LD_VAR 0 2
4670: PPUSH
4671: LD_VAR 0 3
4675: PUSH
4676: LD_VAR 0 5
4680: ARRAY
4681: PUSH
4682: LD_INT 1
4684: ARRAY
4685: PPUSH
4686: LD_VAR 0 3
4690: PUSH
4691: LD_VAR 0 5
4695: ARRAY
4696: PUSH
4697: LD_INT 2
4699: ARRAY
4700: PPUSH
4701: CALL_OW 298
4705: ST_TO_ADDR
// if d = 0 then
4706: LD_VAR 0 7
4710: PUSH
4711: LD_INT 0
4713: EQUAL
4714: IFFALSE 4718
// continue ;
4716: GO 4653
// if d < dist then
4718: LD_VAR 0 7
4722: PUSH
4723: LD_VAR 0 6
4727: LESS
4728: IFFALSE 4790
// begin _x := list [ i ] [ 1 ] ;
4730: LD_ADDR_VAR 0 8
4734: PUSH
4735: LD_VAR 0 3
4739: PUSH
4740: LD_VAR 0 5
4744: ARRAY
4745: PUSH
4746: LD_INT 1
4748: ARRAY
4749: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
4750: LD_ADDR_VAR 0 9
4754: PUSH
4755: LD_VAR 0 3
4759: PUSH
4760: LD_VAR 0 5
4764: ARRAY
4765: PUSH
4766: LD_INT 2
4768: ARRAY
4769: ST_TO_ADDR
// _i := i ;
4770: LD_ADDR_VAR 0 10
4774: PUSH
4775: LD_VAR 0 5
4779: ST_TO_ADDR
// dist := d ;
4780: LD_ADDR_VAR 0 6
4784: PUSH
4785: LD_VAR 0 7
4789: ST_TO_ADDR
// end ; end ;
4790: GO 4653
4792: POP
4793: POP
// result := [ _x , _y , _i , dist ] ;
4794: LD_ADDR_VAR 0 4
4798: PUSH
4799: LD_VAR 0 8
4803: PUSH
4804: LD_VAR 0 9
4808: PUSH
4809: LD_VAR 0 10
4813: PUSH
4814: LD_VAR 0 6
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: ST_TO_ADDR
// end ;
4825: LD_VAR 0 4
4829: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4830: LD_INT 0
4832: PPUSH
4833: PPUSH
4834: PPUSH
4835: PPUSH
// for i = 1 to 72 do
4836: LD_ADDR_VAR 0 5
4840: PUSH
4841: DOUBLE
4842: LD_INT 1
4844: DEC
4845: ST_TO_ADDR
4846: LD_INT 72
4848: PUSH
4849: FOR_TO
4850: IFFALSE 4908
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4852: LD_VAR 0 5
4856: PPUSH
4857: LD_VAR 0 1
4861: PPUSH
4862: CALL_OW 321
4866: PUSH
4867: LD_INT 1
4869: EQUAL
4870: PUSH
4871: LD_VAR 0 5
4875: PPUSH
4876: LD_VAR 0 3
4880: PPUSH
4881: CALL_OW 482
4885: PUSH
4886: LD_INT 1
4888: EQUAL
4889: AND
4890: IFFALSE 4906
// AddComResearch ( lab , i ) ;
4892: LD_VAR 0 2
4896: PPUSH
4897: LD_VAR 0 5
4901: PPUSH
4902: CALL_OW 184
4906: GO 4849
4908: POP
4909: POP
// end ;
4910: LD_VAR 0 4
4914: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4915: LD_INT 0
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
4921: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4922: LD_ADDR_VAR 0 6
4926: PUSH
4927: LD_INT 22
4929: PUSH
4930: LD_VAR 0 1
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 25
4941: PUSH
4942: LD_INT 2
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 24
4951: PUSH
4952: LD_INT 1000
4954: PUSH
4955: EMPTY
4956: LIST
4957: LIST
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: LIST
4963: PPUSH
4964: CALL_OW 69
4968: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4969: LD_ADDR_VAR 0 4
4973: PUSH
4974: LD_INT 22
4976: PUSH
4977: LD_VAR 0 1
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: PUSH
4986: LD_INT 21
4988: PUSH
4989: LD_INT 3
4991: PUSH
4992: EMPTY
4993: LIST
4994: LIST
4995: PUSH
4996: LD_INT 3
4998: PUSH
4999: LD_INT 24
5001: PUSH
5002: LD_INT 1000
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PUSH
5009: EMPTY
5010: LIST
5011: LIST
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: LIST
5017: PUSH
5018: EMPTY
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5026: LD_VAR 0 4
5030: PUSH
5031: LD_INT 0
5033: GREATER
5034: PUSH
5035: LD_VAR 0 6
5039: PUSH
5040: LD_INT 0
5042: GREATER
5043: AND
5044: IFFALSE 5110
// begin for i in engineerOk_list do
5046: LD_ADDR_VAR 0 5
5050: PUSH
5051: LD_VAR 0 6
5055: PUSH
5056: FOR_IN
5057: IFFALSE 5108
// begin for j in buildings_list do
5059: LD_ADDR_VAR 0 7
5063: PUSH
5064: LD_VAR 0 4
5068: PUSH
5069: FOR_IN
5070: IFFALSE 5104
// begin AddComExitBuilding ( i ) ;
5072: LD_VAR 0 5
5076: PPUSH
5077: CALL_OW 182
// wait ( 0 0$1 ) ;
5081: LD_INT 35
5083: PPUSH
5084: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5088: LD_VAR 0 5
5092: PPUSH
5093: LD_VAR 0 7
5097: PPUSH
5098: CALL_OW 190
// end ;
5102: GO 5069
5104: POP
5105: POP
// end ;
5106: GO 5056
5108: POP
5109: POP
// end ; if buildings_list = 0 then
5110: LD_VAR 0 4
5114: PUSH
5115: LD_INT 0
5117: EQUAL
5118: IFFALSE 5151
// begin for i in engineerOK_list do
5120: LD_ADDR_VAR 0 5
5124: PUSH
5125: LD_VAR 0 6
5129: PUSH
5130: FOR_IN
5131: IFFALSE 5149
// begin ComEnterUnit ( i , building ) ;
5133: LD_VAR 0 5
5137: PPUSH
5138: LD_VAR 0 2
5142: PPUSH
5143: CALL_OW 120
// end ;
5147: GO 5130
5149: POP
5150: POP
// end ; end ;
5151: LD_VAR 0 3
5155: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5156: LD_INT 0
5158: PPUSH
5159: PPUSH
5160: PPUSH
5161: PPUSH
5162: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5163: LD_ADDR_VAR 0 6
5167: PUSH
5168: LD_INT 22
5170: PUSH
5171: LD_VAR 0 1
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: LD_INT 25
5182: PUSH
5183: LD_INT 4
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PPUSH
5194: CALL_OW 69
5198: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5199: LD_ADDR_VAR 0 9
5203: PUSH
5204: LD_VAR 0 3
5208: PPUSH
5209: LD_INT 22
5211: PUSH
5212: LD_VAR 0 1
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 21
5223: PUSH
5224: LD_INT 1
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 3
5233: PUSH
5234: LD_INT 24
5236: PUSH
5237: LD_INT 750
5239: PUSH
5240: EMPTY
5241: LIST
5242: LIST
5243: PUSH
5244: EMPTY
5245: LIST
5246: LIST
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: LIST
5252: PPUSH
5253: CALL_OW 70
5257: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5258: LD_VAR 0 9
5262: PUSH
5263: LD_INT 0
5265: GREATER
5266: PUSH
5267: LD_VAR 0 6
5271: PUSH
5272: LD_INT 0
5274: GREATER
5275: AND
5276: IFFALSE 5403
// begin for i = 1 to damageUnits do
5278: LD_ADDR_VAR 0 7
5282: PUSH
5283: DOUBLE
5284: LD_INT 1
5286: DEC
5287: ST_TO_ADDR
5288: LD_VAR 0 9
5292: PUSH
5293: FOR_TO
5294: IFFALSE 5318
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5296: LD_VAR 0 9
5300: PUSH
5301: LD_VAR 0 7
5305: ARRAY
5306: PPUSH
5307: LD_VAR 0 2
5311: PPUSH
5312: CALL_OW 113
5316: GO 5293
5318: POP
5319: POP
// for i in sci_list do
5320: LD_ADDR_VAR 0 7
5324: PUSH
5325: LD_VAR 0 6
5329: PUSH
5330: FOR_IN
5331: IFFALSE 5399
// begin ComExitBuilding ( i ) ;
5333: LD_VAR 0 7
5337: PPUSH
5338: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5342: LD_ADDR_VAR 0 8
5346: PUSH
5347: LD_VAR 0 2
5351: PPUSH
5352: LD_INT 22
5354: PUSH
5355: LD_VAR 0 1
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PPUSH
5364: CALL_OW 70
5368: PUSH
5369: FOR_IN
5370: IFFALSE 5395
// begin AddComHeal ( i , j ) ;
5372: LD_VAR 0 7
5376: PPUSH
5377: LD_VAR 0 8
5381: PPUSH
5382: CALL_OW 188
// wait ( 1 1$0 ) ;
5386: LD_INT 2100
5388: PPUSH
5389: CALL_OW 67
// end ;
5393: GO 5369
5395: POP
5396: POP
// end ;
5397: GO 5330
5399: POP
5400: POP
// end else
5401: GO 5417
// begin AddComEnterUnit ( sci_list , build ) ;
5403: LD_VAR 0 6
5407: PPUSH
5408: LD_VAR 0 4
5412: PPUSH
5413: CALL_OW 180
// end ; end ;
5417: LD_VAR 0 5
5421: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5422: LD_INT 0
5424: PPUSH
5425: PPUSH
5426: PPUSH
5427: PPUSH
5428: PPUSH
5429: PPUSH
5430: PPUSH
5431: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5432: LD_INT 22
5434: PUSH
5435: LD_VAR 0 1
5439: PUSH
5440: EMPTY
5441: LIST
5442: LIST
5443: PUSH
5444: LD_INT 21
5446: PUSH
5447: LD_INT 2
5449: PUSH
5450: EMPTY
5451: LIST
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: PPUSH
5458: CALL_OW 69
5462: PUSH
5463: LD_VAR 0 3
5467: LESSEQUAL
5468: IFFALSE 5535
// begin for i = 1 to vehCount do
5470: LD_ADDR_VAR 0 10
5474: PUSH
5475: DOUBLE
5476: LD_INT 1
5478: DEC
5479: ST_TO_ADDR
5480: LD_VAR 0 3
5484: PUSH
5485: FOR_TO
5486: IFFALSE 5533
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5488: LD_VAR 0 2
5492: PPUSH
5493: LD_VAR 0 8
5497: PPUSH
5498: LD_VAR 0 6
5502: PPUSH
5503: LD_VAR 0 7
5507: PPUSH
5508: LD_VAR 0 5
5512: PUSH
5513: LD_INT 1
5515: PPUSH
5516: LD_VAR 0 5
5520: PPUSH
5521: CALL_OW 12
5525: ARRAY
5526: PPUSH
5527: CALL_OW 185
5531: GO 5485
5533: POP
5534: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5535: LD_INT 22
5537: PUSH
5538: LD_VAR 0 1
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 21
5549: PUSH
5550: LD_INT 2
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: LD_INT 24
5559: PUSH
5560: LD_INT 250
5562: PUSH
5563: EMPTY
5564: LIST
5565: LIST
5566: PUSH
5567: EMPTY
5568: LIST
5569: LIST
5570: LIST
5571: PPUSH
5572: CALL_OW 69
5576: PUSH
5577: LD_VAR 0 3
5581: GREATEREQUAL
5582: IFFALSE 5902
// begin repeat begin wait ( 0 0$1 ) ;
5584: LD_INT 35
5586: PPUSH
5587: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
5591: LD_INT 22
5593: PUSH
5594: LD_VAR 0 1
5598: PUSH
5599: EMPTY
5600: LIST
5601: LIST
5602: PUSH
5603: LD_INT 21
5605: PUSH
5606: LD_INT 2
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PUSH
5613: LD_INT 24
5615: PUSH
5616: LD_INT 651
5618: PUSH
5619: EMPTY
5620: LIST
5621: LIST
5622: PUSH
5623: EMPTY
5624: LIST
5625: LIST
5626: LIST
5627: PPUSH
5628: CALL_OW 69
5632: PUSH
5633: LD_INT 0
5635: GREATER
5636: IFFALSE 5864
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5638: LD_ADDR_VAR 0 10
5642: PUSH
5643: LD_INT 22
5645: PUSH
5646: LD_VAR 0 1
5650: PUSH
5651: EMPTY
5652: LIST
5653: LIST
5654: PUSH
5655: LD_INT 21
5657: PUSH
5658: LD_INT 2
5660: PUSH
5661: EMPTY
5662: LIST
5663: LIST
5664: PUSH
5665: LD_INT 24
5667: PUSH
5668: LD_INT 651
5670: PUSH
5671: EMPTY
5672: LIST
5673: LIST
5674: PUSH
5675: EMPTY
5676: LIST
5677: LIST
5678: LIST
5679: PPUSH
5680: CALL_OW 69
5684: PUSH
5685: FOR_IN
5686: IFFALSE 5862
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5688: LD_ADDR_VAR 0 15
5692: PUSH
5693: LD_INT 22
5695: PUSH
5696: LD_VAR 0 4
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 69
5709: PPUSH
5710: LD_VAR 0 10
5714: PPUSH
5715: CALL_OW 74
5719: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5720: LD_ADDR_VAR 0 16
5724: PUSH
5725: LD_INT 22
5727: PUSH
5728: LD_VAR 0 4
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: LD_INT 2
5739: PUSH
5740: LD_INT 59
5742: PUSH
5743: EMPTY
5744: LIST
5745: PUSH
5746: LD_INT 21
5748: PUSH
5749: LD_INT 1
5751: PUSH
5752: EMPTY
5753: LIST
5754: LIST
5755: PUSH
5756: LD_INT 21
5758: PUSH
5759: LD_INT 2
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: PUSH
5766: EMPTY
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: PUSH
5772: EMPTY
5773: LIST
5774: LIST
5775: PUSH
5776: EMPTY
5777: LIST
5778: PPUSH
5779: CALL_OW 69
5783: PPUSH
5784: LD_VAR 0 10
5788: PPUSH
5789: CALL_OW 74
5793: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5794: LD_VAR 0 10
5798: PPUSH
5799: LD_VAR 0 15
5803: PPUSH
5804: CALL_OW 296
5808: PUSH
5809: LD_INT 8
5811: PLUS
5812: PUSH
5813: LD_VAR 0 10
5817: PPUSH
5818: LD_VAR 0 16
5822: PPUSH
5823: CALL_OW 296
5827: LESS
5828: IFFALSE 5846
// begin ComAttackUnit ( i , target1 ) ;
5830: LD_VAR 0 10
5834: PPUSH
5835: LD_VAR 0 15
5839: PPUSH
5840: CALL_OW 115
// end else
5844: GO 5860
// begin ComAttackUnit ( i , target2 ) ;
5846: LD_VAR 0 10
5850: PPUSH
5851: LD_VAR 0 16
5855: PPUSH
5856: CALL_OW 115
// end ; end ;
5860: GO 5685
5862: POP
5863: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
5864: LD_INT 22
5866: PUSH
5867: LD_VAR 0 1
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 21
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PPUSH
5890: CALL_OW 69
5894: PUSH
5895: LD_VAR 0 3
5899: LESSEQUAL
5900: IFFALSE 5584
// end ; end ;
5902: LD_VAR 0 9
5906: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5907: LD_INT 0
5909: PPUSH
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
5918: PPUSH
5919: PPUSH
// for i = 1 to medicCount do
5920: LD_ADDR_VAR 0 14
5924: PUSH
5925: DOUBLE
5926: LD_INT 1
5928: DEC
5929: ST_TO_ADDR
5930: LD_VAR 0 7
5934: PUSH
5935: FOR_TO
5936: IFFALSE 6018
// begin uc_side = side ;
5938: LD_ADDR_OWVAR 20
5942: PUSH
5943: LD_VAR 0 1
5947: ST_TO_ADDR
// uc_nation = nation ;
5948: LD_ADDR_OWVAR 21
5952: PUSH
5953: LD_VAR 0 2
5957: ST_TO_ADDR
// hc_name =  ;
5958: LD_ADDR_OWVAR 26
5962: PUSH
5963: LD_STRING 
5965: ST_TO_ADDR
// hc_gallery =  ;
5966: LD_ADDR_OWVAR 33
5970: PUSH
5971: LD_STRING 
5973: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
5974: LD_INT 0
5976: PPUSH
5977: LD_INT 4
5979: PPUSH
5980: LD_VAR 0 8
5984: PPUSH
5985: CALL_OW 380
// un = CreateHuman ;
5989: LD_ADDR_VAR 0 16
5993: PUSH
5994: CALL_OW 44
5998: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
5999: LD_VAR 0 16
6003: PPUSH
6004: LD_VAR 0 9
6008: PPUSH
6009: LD_INT 0
6011: PPUSH
6012: CALL_OW 49
// end ;
6016: GO 5935
6018: POP
6019: POP
// for i = 1 to soldierCount do
6020: LD_ADDR_VAR 0 14
6024: PUSH
6025: DOUBLE
6026: LD_INT 1
6028: DEC
6029: ST_TO_ADDR
6030: LD_VAR 0 3
6034: PUSH
6035: FOR_TO
6036: IFFALSE 6118
// begin uc_side = side ;
6038: LD_ADDR_OWVAR 20
6042: PUSH
6043: LD_VAR 0 1
6047: ST_TO_ADDR
// uc_nation = nation ;
6048: LD_ADDR_OWVAR 21
6052: PUSH
6053: LD_VAR 0 2
6057: ST_TO_ADDR
// hc_name =  ;
6058: LD_ADDR_OWVAR 26
6062: PUSH
6063: LD_STRING 
6065: ST_TO_ADDR
// hc_gallery =  ;
6066: LD_ADDR_OWVAR 33
6070: PUSH
6071: LD_STRING 
6073: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6074: LD_INT 0
6076: PPUSH
6077: LD_INT 1
6079: PPUSH
6080: LD_VAR 0 8
6084: PPUSH
6085: CALL_OW 380
// un = CreateHuman ;
6089: LD_ADDR_VAR 0 16
6093: PUSH
6094: CALL_OW 44
6098: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6099: LD_VAR 0 16
6103: PPUSH
6104: LD_VAR 0 9
6108: PPUSH
6109: LD_INT 0
6111: PPUSH
6112: CALL_OW 49
// end ;
6116: GO 6035
6118: POP
6119: POP
// for i = 1 to sniperCount do
6120: LD_ADDR_VAR 0 14
6124: PUSH
6125: DOUBLE
6126: LD_INT 1
6128: DEC
6129: ST_TO_ADDR
6130: LD_VAR 0 4
6134: PUSH
6135: FOR_TO
6136: IFFALSE 6218
// begin uc_side = side ;
6138: LD_ADDR_OWVAR 20
6142: PUSH
6143: LD_VAR 0 1
6147: ST_TO_ADDR
// uc_nation = nation ;
6148: LD_ADDR_OWVAR 21
6152: PUSH
6153: LD_VAR 0 2
6157: ST_TO_ADDR
// hc_name =  ;
6158: LD_ADDR_OWVAR 26
6162: PUSH
6163: LD_STRING 
6165: ST_TO_ADDR
// hc_gallery =  ;
6166: LD_ADDR_OWVAR 33
6170: PUSH
6171: LD_STRING 
6173: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6174: LD_INT 0
6176: PPUSH
6177: LD_INT 5
6179: PPUSH
6180: LD_VAR 0 8
6184: PPUSH
6185: CALL_OW 380
// un = CreateHuman ;
6189: LD_ADDR_VAR 0 16
6193: PUSH
6194: CALL_OW 44
6198: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6199: LD_VAR 0 16
6203: PPUSH
6204: LD_VAR 0 9
6208: PPUSH
6209: LD_INT 0
6211: PPUSH
6212: CALL_OW 49
// end ;
6216: GO 6135
6218: POP
6219: POP
// for i = 1 to bazookCount do
6220: LD_ADDR_VAR 0 14
6224: PUSH
6225: DOUBLE
6226: LD_INT 1
6228: DEC
6229: ST_TO_ADDR
6230: LD_VAR 0 5
6234: PUSH
6235: FOR_TO
6236: IFFALSE 6318
// begin uc_side = side ;
6238: LD_ADDR_OWVAR 20
6242: PUSH
6243: LD_VAR 0 1
6247: ST_TO_ADDR
// uc_nation = nation ;
6248: LD_ADDR_OWVAR 21
6252: PUSH
6253: LD_VAR 0 2
6257: ST_TO_ADDR
// hc_name =  ;
6258: LD_ADDR_OWVAR 26
6262: PUSH
6263: LD_STRING 
6265: ST_TO_ADDR
// hc_gallery =  ;
6266: LD_ADDR_OWVAR 33
6270: PUSH
6271: LD_STRING 
6273: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6274: LD_INT 0
6276: PPUSH
6277: LD_INT 9
6279: PPUSH
6280: LD_VAR 0 8
6284: PPUSH
6285: CALL_OW 380
// un = CreateHuman ;
6289: LD_ADDR_VAR 0 16
6293: PUSH
6294: CALL_OW 44
6298: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6299: LD_VAR 0 16
6303: PPUSH
6304: LD_VAR 0 9
6308: PPUSH
6309: LD_INT 0
6311: PPUSH
6312: CALL_OW 49
// end ;
6316: GO 6235
6318: POP
6319: POP
// for i = 1 to mortalCount do
6320: LD_ADDR_VAR 0 14
6324: PUSH
6325: DOUBLE
6326: LD_INT 1
6328: DEC
6329: ST_TO_ADDR
6330: LD_VAR 0 6
6334: PUSH
6335: FOR_TO
6336: IFFALSE 6418
// begin uc_side = side ;
6338: LD_ADDR_OWVAR 20
6342: PUSH
6343: LD_VAR 0 1
6347: ST_TO_ADDR
// uc_nation = nation ;
6348: LD_ADDR_OWVAR 21
6352: PUSH
6353: LD_VAR 0 2
6357: ST_TO_ADDR
// hc_name =  ;
6358: LD_ADDR_OWVAR 26
6362: PUSH
6363: LD_STRING 
6365: ST_TO_ADDR
// hc_gallery =  ;
6366: LD_ADDR_OWVAR 33
6370: PUSH
6371: LD_STRING 
6373: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6374: LD_INT 0
6376: PPUSH
6377: LD_INT 8
6379: PPUSH
6380: LD_VAR 0 8
6384: PPUSH
6385: CALL_OW 380
// un = CreateHuman ;
6389: LD_ADDR_VAR 0 16
6393: PUSH
6394: CALL_OW 44
6398: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6399: LD_VAR 0 16
6403: PPUSH
6404: LD_VAR 0 9
6408: PPUSH
6409: LD_INT 0
6411: PPUSH
6412: CALL_OW 49
// end ;
6416: GO 6335
6418: POP
6419: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6420: LD_ADDR_VAR 0 19
6424: PUSH
6425: LD_INT 22
6427: PUSH
6428: LD_VAR 0 1
6432: PUSH
6433: EMPTY
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 2
6439: PUSH
6440: LD_INT 25
6442: PUSH
6443: LD_INT 1
6445: PUSH
6446: EMPTY
6447: LIST
6448: LIST
6449: PUSH
6450: LD_INT 25
6452: PUSH
6453: LD_INT 5
6455: PUSH
6456: EMPTY
6457: LIST
6458: LIST
6459: PUSH
6460: LD_INT 25
6462: PUSH
6463: LD_INT 8
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PUSH
6470: LD_INT 25
6472: PUSH
6473: LD_INT 9
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: EMPTY
6481: LIST
6482: LIST
6483: LIST
6484: LIST
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 69
6495: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6496: LD_ADDR_VAR 0 18
6500: PUSH
6501: LD_INT 22
6503: PUSH
6504: LD_VAR 0 1
6508: PUSH
6509: EMPTY
6510: LIST
6511: LIST
6512: PUSH
6513: LD_INT 25
6515: PUSH
6516: LD_INT 4
6518: PUSH
6519: EMPTY
6520: LIST
6521: LIST
6522: PUSH
6523: EMPTY
6524: LIST
6525: LIST
6526: PPUSH
6527: CALL_OW 69
6531: ST_TO_ADDR
// for i in medic_list do
6532: LD_ADDR_VAR 0 14
6536: PUSH
6537: LD_VAR 0 18
6541: PUSH
6542: FOR_IN
6543: IFFALSE 6561
// ComMoveToArea ( i , healArea ) ;
6545: LD_VAR 0 14
6549: PPUSH
6550: LD_VAR 0 10
6554: PPUSH
6555: CALL_OW 113
6559: GO 6542
6561: POP
6562: POP
// if strategy = 1 then
6563: LD_VAR 0 12
6567: PUSH
6568: LD_INT 1
6570: EQUAL
6571: IFFALSE 7306
// begin repeat wait ( 0 0$3 ) ;
6573: LD_INT 105
6575: PPUSH
6576: CALL_OW 67
// for i in soldiersOK_list do
6580: LD_ADDR_VAR 0 14
6584: PUSH
6585: LD_VAR 0 19
6589: PUSH
6590: FOR_IN
6591: IFFALSE 6655
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6593: LD_VAR 0 14
6597: PPUSH
6598: LD_INT 91
6600: PPUSH
6601: LD_INT 63
6603: PPUSH
6604: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6608: LD_VAR 0 14
6612: PPUSH
6613: LD_INT 101
6615: PPUSH
6616: LD_INT 53
6618: PPUSH
6619: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6623: LD_VAR 0 14
6627: PPUSH
6628: LD_INT 75
6630: PPUSH
6631: LD_INT 23
6633: PPUSH
6634: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6638: LD_VAR 0 14
6642: PPUSH
6643: LD_INT 78
6645: PPUSH
6646: LD_INT 8
6648: PPUSH
6649: CALL_OW 174
// end ;
6653: GO 6590
6655: POP
6656: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
6657: LD_INT 15
6659: PPUSH
6660: LD_INT 22
6662: PUSH
6663: LD_VAR 0 1
6667: PUSH
6668: EMPTY
6669: LIST
6670: LIST
6671: PPUSH
6672: CALL_OW 70
6676: PUSH
6677: LD_INT 2
6679: GREATER
6680: IFFALSE 6573
// repeat wait ( 0 0$1 ) ;
6682: LD_INT 35
6684: PPUSH
6685: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6689: LD_ADDR_VAR 0 17
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_VAR 0 1
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: LD_INT 3
6711: PUSH
6712: LD_INT 24
6714: PUSH
6715: LD_INT 550
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: PUSH
6726: LD_INT 24
6728: PUSH
6729: LD_INT 250
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: LIST
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PPUSH
6745: CALL_OW 69
6749: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6750: LD_ADDR_VAR 0 19
6754: PUSH
6755: LD_INT 22
6757: PUSH
6758: LD_VAR 0 1
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 2
6769: PUSH
6770: LD_INT 25
6772: PUSH
6773: LD_INT 1
6775: PUSH
6776: EMPTY
6777: LIST
6778: LIST
6779: PUSH
6780: LD_INT 25
6782: PUSH
6783: LD_INT 5
6785: PUSH
6786: EMPTY
6787: LIST
6788: LIST
6789: PUSH
6790: LD_INT 25
6792: PUSH
6793: LD_INT 8
6795: PUSH
6796: EMPTY
6797: LIST
6798: LIST
6799: PUSH
6800: LD_INT 25
6802: PUSH
6803: LD_INT 9
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: PUSH
6817: LD_INT 24
6819: PUSH
6820: LD_INT 1000
6822: PUSH
6823: EMPTY
6824: LIST
6825: LIST
6826: PUSH
6827: EMPTY
6828: LIST
6829: LIST
6830: LIST
6831: PPUSH
6832: CALL_OW 69
6836: ST_TO_ADDR
// if medicCount > 0 then
6837: LD_VAR 0 7
6841: PUSH
6842: LD_INT 0
6844: GREATER
6845: IFFALSE 6919
// begin if damageUnit_list > 0 then
6847: LD_VAR 0 17
6851: PUSH
6852: LD_INT 0
6854: GREATER
6855: IFFALSE 6919
// begin for i in damageUnit_list do
6857: LD_ADDR_VAR 0 14
6861: PUSH
6862: LD_VAR 0 17
6866: PUSH
6867: FOR_IN
6868: IFFALSE 6917
// begin ComMoveToArea ( i , healArea ) ;
6870: LD_VAR 0 14
6874: PPUSH
6875: LD_VAR 0 10
6879: PPUSH
6880: CALL_OW 113
// for j in medic_list do
6884: LD_ADDR_VAR 0 15
6888: PUSH
6889: LD_VAR 0 18
6893: PUSH
6894: FOR_IN
6895: IFFALSE 6913
// AddComHeal ( j , i ) ;
6897: LD_VAR 0 15
6901: PPUSH
6902: LD_VAR 0 14
6906: PPUSH
6907: CALL_OW 188
6911: GO 6894
6913: POP
6914: POP
// end ;
6915: GO 6867
6917: POP
6918: POP
// end ; end ; for i in soldiersOK_list do
6919: LD_ADDR_VAR 0 14
6923: PUSH
6924: LD_VAR 0 19
6928: PUSH
6929: FOR_IN
6930: IFFALSE 7106
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6932: LD_ADDR_VAR 0 22
6936: PUSH
6937: LD_INT 22
6939: PUSH
6940: LD_VAR 0 11
6944: PUSH
6945: EMPTY
6946: LIST
6947: LIST
6948: PPUSH
6949: CALL_OW 69
6953: PPUSH
6954: LD_VAR 0 14
6958: PPUSH
6959: CALL_OW 74
6963: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6964: LD_ADDR_VAR 0 23
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_VAR 0 11
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PUSH
6981: LD_INT 2
6983: PUSH
6984: LD_INT 59
6986: PUSH
6987: EMPTY
6988: LIST
6989: PUSH
6990: LD_INT 21
6992: PUSH
6993: LD_INT 1
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PUSH
7000: LD_INT 21
7002: PUSH
7003: LD_INT 2
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: PUSH
7016: EMPTY
7017: LIST
7018: LIST
7019: PUSH
7020: EMPTY
7021: LIST
7022: PPUSH
7023: CALL_OW 69
7027: PPUSH
7028: LD_VAR 0 14
7032: PPUSH
7033: CALL_OW 74
7037: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7038: LD_VAR 0 14
7042: PPUSH
7043: LD_VAR 0 22
7047: PPUSH
7048: CALL_OW 296
7052: PUSH
7053: LD_INT 8
7055: PLUS
7056: PUSH
7057: LD_VAR 0 14
7061: PPUSH
7062: LD_VAR 0 23
7066: PPUSH
7067: CALL_OW 296
7071: LESS
7072: IFFALSE 7090
// begin ComAttackUnit ( i , target1 ) ;
7074: LD_VAR 0 14
7078: PPUSH
7079: LD_VAR 0 22
7083: PPUSH
7084: CALL_OW 115
// end else
7088: GO 7104
// begin ComAttackUnit ( i , target2 ) ;
7090: LD_VAR 0 14
7094: PPUSH
7095: LD_VAR 0 23
7099: PPUSH
7100: CALL_OW 115
// end ; end ;
7104: GO 6929
7106: POP
7107: POP
// for i in soldiersOK_list do
7108: LD_ADDR_VAR 0 14
7112: PUSH
7113: LD_VAR 0 19
7117: PUSH
7118: FOR_IN
7119: IFFALSE 7295
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7121: LD_ADDR_VAR 0 22
7125: PUSH
7126: LD_INT 22
7128: PUSH
7129: LD_VAR 0 11
7133: PUSH
7134: EMPTY
7135: LIST
7136: LIST
7137: PPUSH
7138: CALL_OW 69
7142: PPUSH
7143: LD_VAR 0 14
7147: PPUSH
7148: CALL_OW 74
7152: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7153: LD_ADDR_VAR 0 23
7157: PUSH
7158: LD_INT 22
7160: PUSH
7161: LD_VAR 0 11
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 59
7175: PUSH
7176: EMPTY
7177: LIST
7178: PUSH
7179: LD_INT 21
7181: PUSH
7182: LD_INT 1
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 21
7191: PUSH
7192: LD_INT 2
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: PPUSH
7212: CALL_OW 69
7216: PPUSH
7217: LD_VAR 0 14
7221: PPUSH
7222: CALL_OW 74
7226: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7227: LD_VAR 0 14
7231: PPUSH
7232: LD_VAR 0 22
7236: PPUSH
7237: CALL_OW 296
7241: PUSH
7242: LD_INT 8
7244: PLUS
7245: PUSH
7246: LD_VAR 0 14
7250: PPUSH
7251: LD_VAR 0 23
7255: PPUSH
7256: CALL_OW 296
7260: LESS
7261: IFFALSE 7279
// begin ComAttackUnit ( i , target1 ) ;
7263: LD_VAR 0 14
7267: PPUSH
7268: LD_VAR 0 22
7272: PPUSH
7273: CALL_OW 115
// end else
7277: GO 7293
// begin ComAttackUnit ( i , target2 ) ;
7279: LD_VAR 0 14
7283: PPUSH
7284: LD_VAR 0 23
7288: PPUSH
7289: CALL_OW 115
// end ; end ;
7293: GO 7118
7295: POP
7296: POP
// until soldiersOK_list = [ ] ;
7297: LD_VAR 0 19
7301: PUSH
7302: EMPTY
7303: EQUAL
7304: IFFALSE 6682
// end ; if strategy = 2 then
7306: LD_VAR 0 12
7310: PUSH
7311: LD_INT 2
7313: EQUAL
7314: IFFALSE 8019
// begin repeat wait ( 0 0$1 ) ;
7316: LD_INT 35
7318: PPUSH
7319: CALL_OW 67
// for i in soldiersOK_list do
7323: LD_ADDR_VAR 0 14
7327: PUSH
7328: LD_VAR 0 19
7332: PUSH
7333: FOR_IN
7334: IFFALSE 7368
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7336: LD_VAR 0 14
7340: PPUSH
7341: LD_INT 91
7343: PPUSH
7344: LD_INT 63
7346: PPUSH
7347: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7351: LD_VAR 0 14
7355: PPUSH
7356: LD_INT 75
7358: PPUSH
7359: LD_INT 33
7361: PPUSH
7362: CALL_OW 174
// end ;
7366: GO 7333
7368: POP
7369: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7370: LD_INT 16
7372: PPUSH
7373: LD_INT 22
7375: PUSH
7376: LD_VAR 0 1
7380: PUSH
7381: EMPTY
7382: LIST
7383: LIST
7384: PPUSH
7385: CALL_OW 70
7389: PUSH
7390: LD_INT 2
7392: GREATER
7393: IFFALSE 7316
// repeat wait ( 0 0$3 ) ;
7395: LD_INT 105
7397: PPUSH
7398: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7402: LD_ADDR_VAR 0 17
7406: PUSH
7407: LD_INT 22
7409: PUSH
7410: LD_VAR 0 1
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 1
7421: PUSH
7422: LD_INT 3
7424: PUSH
7425: LD_INT 24
7427: PUSH
7428: LD_INT 550
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 24
7441: PUSH
7442: LD_INT 250
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: EMPTY
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: PPUSH
7458: CALL_OW 69
7462: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7463: LD_ADDR_VAR 0 19
7467: PUSH
7468: LD_INT 22
7470: PUSH
7471: LD_VAR 0 1
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_INT 2
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: LD_INT 1
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PUSH
7493: LD_INT 25
7495: PUSH
7496: LD_INT 5
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_INT 25
7505: PUSH
7506: LD_INT 8
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 9
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: EMPTY
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 24
7532: PUSH
7533: LD_INT 1000
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: LIST
7544: PPUSH
7545: CALL_OW 69
7549: ST_TO_ADDR
// if medicCount > 0 then
7550: LD_VAR 0 7
7554: PUSH
7555: LD_INT 0
7557: GREATER
7558: IFFALSE 7632
// begin if damageUnit_list > 0 then
7560: LD_VAR 0 17
7564: PUSH
7565: LD_INT 0
7567: GREATER
7568: IFFALSE 7632
// begin for i in damageUnit_list do
7570: LD_ADDR_VAR 0 14
7574: PUSH
7575: LD_VAR 0 17
7579: PUSH
7580: FOR_IN
7581: IFFALSE 7630
// begin ComMoveToArea ( i , healArea ) ;
7583: LD_VAR 0 14
7587: PPUSH
7588: LD_VAR 0 10
7592: PPUSH
7593: CALL_OW 113
// for j in medic_list do
7597: LD_ADDR_VAR 0 15
7601: PUSH
7602: LD_VAR 0 18
7606: PUSH
7607: FOR_IN
7608: IFFALSE 7626
// AddComHeal ( j , i ) ;
7610: LD_VAR 0 15
7614: PPUSH
7615: LD_VAR 0 14
7619: PPUSH
7620: CALL_OW 188
7624: GO 7607
7626: POP
7627: POP
// end ;
7628: GO 7580
7630: POP
7631: POP
// end ; end ; for i in soldiersOK_list do
7632: LD_ADDR_VAR 0 14
7636: PUSH
7637: LD_VAR 0 19
7641: PUSH
7642: FOR_IN
7643: IFFALSE 7819
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7645: LD_ADDR_VAR 0 22
7649: PUSH
7650: LD_INT 22
7652: PUSH
7653: LD_VAR 0 11
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: PPUSH
7662: CALL_OW 69
7666: PPUSH
7667: LD_VAR 0 14
7671: PPUSH
7672: CALL_OW 74
7676: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7677: LD_ADDR_VAR 0 23
7681: PUSH
7682: LD_INT 22
7684: PUSH
7685: LD_VAR 0 11
7689: PUSH
7690: EMPTY
7691: LIST
7692: LIST
7693: PUSH
7694: LD_INT 2
7696: PUSH
7697: LD_INT 59
7699: PUSH
7700: EMPTY
7701: LIST
7702: PUSH
7703: LD_INT 21
7705: PUSH
7706: LD_INT 1
7708: PUSH
7709: EMPTY
7710: LIST
7711: LIST
7712: PUSH
7713: LD_INT 21
7715: PUSH
7716: LD_INT 2
7718: PUSH
7719: EMPTY
7720: LIST
7721: LIST
7722: PUSH
7723: EMPTY
7724: LIST
7725: LIST
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PUSH
7733: EMPTY
7734: LIST
7735: PPUSH
7736: CALL_OW 69
7740: PPUSH
7741: LD_VAR 0 14
7745: PPUSH
7746: CALL_OW 74
7750: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7751: LD_VAR 0 14
7755: PPUSH
7756: LD_VAR 0 22
7760: PPUSH
7761: CALL_OW 296
7765: PUSH
7766: LD_INT 8
7768: PLUS
7769: PUSH
7770: LD_VAR 0 14
7774: PPUSH
7775: LD_VAR 0 23
7779: PPUSH
7780: CALL_OW 296
7784: LESS
7785: IFFALSE 7803
// begin ComAttackUnit ( i , target1 ) ;
7787: LD_VAR 0 14
7791: PPUSH
7792: LD_VAR 0 22
7796: PPUSH
7797: CALL_OW 115
// end else
7801: GO 7817
// begin ComAttackUnit ( i , target2 ) ;
7803: LD_VAR 0 14
7807: PPUSH
7808: LD_VAR 0 23
7812: PPUSH
7813: CALL_OW 115
// end ; end ;
7817: GO 7642
7819: POP
7820: POP
// for i in soldiersOK_list do
7821: LD_ADDR_VAR 0 14
7825: PUSH
7826: LD_VAR 0 19
7830: PUSH
7831: FOR_IN
7832: IFFALSE 8008
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7834: LD_ADDR_VAR 0 22
7838: PUSH
7839: LD_INT 22
7841: PUSH
7842: LD_VAR 0 11
7846: PUSH
7847: EMPTY
7848: LIST
7849: LIST
7850: PPUSH
7851: CALL_OW 69
7855: PPUSH
7856: LD_VAR 0 14
7860: PPUSH
7861: CALL_OW 74
7865: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7866: LD_ADDR_VAR 0 23
7870: PUSH
7871: LD_INT 22
7873: PUSH
7874: LD_VAR 0 11
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 2
7885: PUSH
7886: LD_INT 59
7888: PUSH
7889: EMPTY
7890: LIST
7891: PUSH
7892: LD_INT 21
7894: PUSH
7895: LD_INT 1
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PUSH
7902: LD_INT 21
7904: PUSH
7905: LD_INT 2
7907: PUSH
7908: EMPTY
7909: LIST
7910: LIST
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: PUSH
7918: EMPTY
7919: LIST
7920: LIST
7921: PUSH
7922: EMPTY
7923: LIST
7924: PPUSH
7925: CALL_OW 69
7929: PPUSH
7930: LD_VAR 0 14
7934: PPUSH
7935: CALL_OW 74
7939: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7940: LD_VAR 0 14
7944: PPUSH
7945: LD_VAR 0 22
7949: PPUSH
7950: CALL_OW 296
7954: PUSH
7955: LD_INT 8
7957: PLUS
7958: PUSH
7959: LD_VAR 0 14
7963: PPUSH
7964: LD_VAR 0 23
7968: PPUSH
7969: CALL_OW 296
7973: LESS
7974: IFFALSE 7992
// begin ComAttackUnit ( i , target1 ) ;
7976: LD_VAR 0 14
7980: PPUSH
7981: LD_VAR 0 22
7985: PPUSH
7986: CALL_OW 115
// end else
7990: GO 8006
// begin ComAttackUnit ( i , target2 ) ;
7992: LD_VAR 0 14
7996: PPUSH
7997: LD_VAR 0 23
8001: PPUSH
8002: CALL_OW 115
// end ; end ;
8006: GO 7831
8008: POP
8009: POP
// until soldiersOK_list = [ ] ;
8010: LD_VAR 0 19
8014: PUSH
8015: EMPTY
8016: EQUAL
8017: IFFALSE 7395
// end ; end ;
8019: LD_VAR 0 13
8023: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8024: LD_INT 0
8026: PPUSH
8027: PPUSH
8028: PPUSH
8029: PPUSH
8030: PPUSH
8031: PPUSH
8032: PPUSH
8033: PPUSH
8034: PPUSH
8035: PPUSH
8036: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8037: LD_ADDR_VAR 0 9
8041: PUSH
8042: LD_INT 22
8044: PUSH
8045: LD_VAR 0 1
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 21
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 24
8066: PUSH
8067: LD_INT 660
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_INT 3
8076: PUSH
8077: LD_INT 58
8079: PUSH
8080: EMPTY
8081: LIST
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_INT 3
8089: PUSH
8090: LD_INT 34
8092: PUSH
8093: LD_INT 53
8095: PUSH
8096: EMPTY
8097: LIST
8098: LIST
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: LIST
8108: LIST
8109: LIST
8110: PPUSH
8111: CALL_OW 69
8115: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8116: LD_ADDR_VAR 0 10
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 21
8135: PUSH
8136: LD_INT 2
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PUSH
8143: LD_INT 3
8145: PUSH
8146: LD_INT 24
8148: PUSH
8149: LD_INT 660
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: PPUSH
8165: CALL_OW 69
8169: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8170: LD_ADDR_VAR 0 11
8174: PUSH
8175: LD_VAR 0 2
8179: PPUSH
8180: LD_INT 22
8182: PUSH
8183: LD_VAR 0 1
8187: PUSH
8188: EMPTY
8189: LIST
8190: LIST
8191: PUSH
8192: LD_INT 21
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: PUSH
8202: LD_INT 3
8204: PUSH
8205: LD_INT 24
8207: PUSH
8208: LD_INT 1000
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: PUSH
8215: EMPTY
8216: LIST
8217: LIST
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: LIST
8223: PPUSH
8224: CALL_OW 70
8228: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8229: LD_ADDR_VAR 0 12
8233: PUSH
8234: LD_VAR 0 2
8238: PPUSH
8239: LD_INT 22
8241: PUSH
8242: LD_VAR 0 1
8246: PUSH
8247: EMPTY
8248: LIST
8249: LIST
8250: PUSH
8251: LD_INT 21
8253: PUSH
8254: LD_INT 2
8256: PUSH
8257: EMPTY
8258: LIST
8259: LIST
8260: PUSH
8261: LD_INT 24
8263: PUSH
8264: LD_INT 1000
8266: PUSH
8267: EMPTY
8268: LIST
8269: LIST
8270: PUSH
8271: LD_INT 58
8273: PUSH
8274: EMPTY
8275: LIST
8276: PUSH
8277: LD_INT 3
8279: PUSH
8280: LD_INT 34
8282: PUSH
8283: LD_INT 53
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: PUSH
8294: EMPTY
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: PPUSH
8301: CALL_OW 70
8305: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8306: LD_ADDR_VAR 0 13
8310: PUSH
8311: EMPTY
8312: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8313: LD_ADDR_VAR 0 14
8317: PUSH
8318: LD_VAR 0 2
8322: PPUSH
8323: LD_INT 22
8325: PUSH
8326: LD_VAR 0 1
8330: PUSH
8331: EMPTY
8332: LIST
8333: LIST
8334: PUSH
8335: LD_INT 25
8337: PUSH
8338: LD_INT 3
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: PPUSH
8349: CALL_OW 70
8353: ST_TO_ADDR
// if damageVehicle_list > 0 then
8354: LD_VAR 0 10
8358: PUSH
8359: LD_INT 0
8361: GREATER
8362: IFFALSE 8400
// begin for i in damageVehicle_list do
8364: LD_ADDR_VAR 0 7
8368: PUSH
8369: LD_VAR 0 10
8373: PUSH
8374: FOR_IN
8375: IFFALSE 8398
// begin ComMoveXY ( i , repX , repY ) ;
8377: LD_VAR 0 7
8381: PPUSH
8382: LD_VAR 0 3
8386: PPUSH
8387: LD_VAR 0 4
8391: PPUSH
8392: CALL_OW 111
// end ;
8396: GO 8374
8398: POP
8399: POP
// end ; if vehicleNeedRepair_list > 0 then
8400: LD_VAR 0 11
8404: PUSH
8405: LD_INT 0
8407: GREATER
8408: IFFALSE 8495
// begin for i in vehicleNeedRepair_list do
8410: LD_ADDR_VAR 0 7
8414: PUSH
8415: LD_VAR 0 11
8419: PUSH
8420: FOR_IN
8421: IFFALSE 8493
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8423: LD_ADDR_VAR 0 13
8427: PUSH
8428: LD_VAR 0 13
8432: PUSH
8433: LD_VAR 0 7
8437: PPUSH
8438: CALL_OW 313
8442: ADD
8443: ST_TO_ADDR
// for j in mechanicInside_list do
8444: LD_ADDR_VAR 0 8
8448: PUSH
8449: LD_VAR 0 13
8453: PUSH
8454: FOR_IN
8455: IFFALSE 8489
// begin ComExitVehicle ( i ) ;
8457: LD_VAR 0 7
8461: PPUSH
8462: CALL_OW 121
// wait ( 0 0$1 ) ;
8466: LD_INT 35
8468: PPUSH
8469: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8473: LD_VAR 0 7
8477: PPUSH
8478: LD_VAR 0 8
8482: PPUSH
8483: CALL_OW 129
// end ;
8487: GO 8454
8489: POP
8490: POP
// end ;
8491: GO 8420
8493: POP
8494: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8495: LD_VAR 0 12
8499: PUSH
8500: LD_INT 0
8502: GREATER
8503: IFFALSE 8543
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8505: LD_VAR 0 14
8509: PUSH
8510: LD_INT 1
8512: ARRAY
8513: PPUSH
8514: LD_VAR 0 12
8518: PUSH
8519: LD_INT 1
8521: ARRAY
8522: PPUSH
8523: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8527: LD_VAR 0 12
8531: PUSH
8532: LD_INT 1
8534: ARRAY
8535: PPUSH
8536: LD_INT 100
8538: PPUSH
8539: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8543: LD_VAR 0 9
8547: PUSH
8548: LD_INT 0
8550: GREATER
8551: IFFALSE 8742
// begin for i in vehicleOK_list do
8553: LD_ADDR_VAR 0 7
8557: PUSH
8558: LD_VAR 0 9
8562: PUSH
8563: FOR_IN
8564: IFFALSE 8740
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8566: LD_ADDR_VAR 0 15
8570: PUSH
8571: LD_INT 22
8573: PUSH
8574: LD_VAR 0 5
8578: PUSH
8579: EMPTY
8580: LIST
8581: LIST
8582: PPUSH
8583: CALL_OW 69
8587: PPUSH
8588: LD_VAR 0 7
8592: PPUSH
8593: CALL_OW 74
8597: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8598: LD_ADDR_VAR 0 16
8602: PUSH
8603: LD_INT 22
8605: PUSH
8606: LD_VAR 0 5
8610: PUSH
8611: EMPTY
8612: LIST
8613: LIST
8614: PUSH
8615: LD_INT 2
8617: PUSH
8618: LD_INT 59
8620: PUSH
8621: EMPTY
8622: LIST
8623: PUSH
8624: LD_INT 21
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 21
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: EMPTY
8655: LIST
8656: PPUSH
8657: CALL_OW 69
8661: PPUSH
8662: LD_VAR 0 7
8666: PPUSH
8667: CALL_OW 74
8671: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8672: LD_VAR 0 7
8676: PPUSH
8677: LD_VAR 0 15
8681: PPUSH
8682: CALL_OW 296
8686: PUSH
8687: LD_INT 8
8689: PLUS
8690: PUSH
8691: LD_VAR 0 7
8695: PPUSH
8696: LD_VAR 0 16
8700: PPUSH
8701: CALL_OW 296
8705: LESS
8706: IFFALSE 8724
// begin ComAttackUnit ( i , target1 ) ;
8708: LD_VAR 0 7
8712: PPUSH
8713: LD_VAR 0 15
8717: PPUSH
8718: CALL_OW 115
// end else
8722: GO 8738
// begin ComAttackUnit ( i , target2 ) ;
8724: LD_VAR 0 7
8728: PPUSH
8729: LD_VAR 0 16
8733: PPUSH
8734: CALL_OW 115
// end ; end ;
8738: GO 8563
8740: POP
8741: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8742: LD_ADDR_VAR 0 7
8746: PUSH
8747: LD_VAR 0 2
8751: PPUSH
8752: LD_INT 22
8754: PUSH
8755: LD_VAR 0 1
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PUSH
8764: LD_INT 25
8766: PUSH
8767: LD_INT 3
8769: PUSH
8770: EMPTY
8771: LIST
8772: LIST
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 70
8782: NOT
8783: PUSH
8784: FOR_IN
8785: IFFALSE 8808
// ComMoveXY ( i , repX , repY ) ;
8787: LD_VAR 0 7
8791: PPUSH
8792: LD_VAR 0 3
8796: PPUSH
8797: LD_VAR 0 4
8801: PPUSH
8802: CALL_OW 111
8806: GO 8784
8808: POP
8809: POP
// end ;
8810: LD_VAR 0 6
8814: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8815: LD_INT 0
8817: PPUSH
8818: PPUSH
8819: PPUSH
8820: PPUSH
8821: PPUSH
8822: PPUSH
8823: PPUSH
8824: PPUSH
8825: PPUSH
8826: PPUSH
8827: PPUSH
// amChassisTab = [ ] ;
8828: LD_ADDR_VAR 0 19
8832: PUSH
8833: EMPTY
8834: ST_TO_ADDR
// arChassisTab = [ ] ;
8835: LD_ADDR_VAR 0 18
8839: PUSH
8840: EMPTY
8841: ST_TO_ADDR
// ruChassisTab = [ ] ;
8842: LD_ADDR_VAR 0 17
8846: PUSH
8847: EMPTY
8848: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8849: LD_INT 35
8851: PPUSH
8852: CALL_OW 67
// if nation = 1 then
8856: LD_VAR 0 5
8860: PUSH
8861: LD_INT 1
8863: EQUAL
8864: IFFALSE 9355
// begin uc_side = side ;
8866: LD_ADDR_OWVAR 20
8870: PUSH
8871: LD_VAR 0 2
8875: ST_TO_ADDR
// uc_nation = nation ;
8876: LD_ADDR_OWVAR 21
8880: PUSH
8881: LD_VAR 0 5
8885: ST_TO_ADDR
// vc_engine = vehengine ;
8886: LD_ADDR_OWVAR 39
8890: PUSH
8891: LD_VAR 0 6
8895: ST_TO_ADDR
// vc_control = vehcontrol ;
8896: LD_ADDR_OWVAR 38
8900: PUSH
8901: LD_VAR 0 7
8905: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8906: LD_ADDR_OWVAR 40
8910: PUSH
8911: LD_VAR 0 10
8915: PUSH
8916: LD_INT 1
8918: PPUSH
8919: LD_VAR 0 10
8923: PPUSH
8924: CALL_OW 12
8928: ARRAY
8929: ST_TO_ADDR
// for j = 1 to AMWeapon do
8930: LD_ADDR_VAR 0 14
8934: PUSH
8935: DOUBLE
8936: LD_INT 1
8938: DEC
8939: ST_TO_ADDR
8940: LD_VAR 0 10
8944: PUSH
8945: FOR_TO
8946: IFFALSE 9247
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8948: LD_VAR 0 10
8952: PUSH
8953: LD_VAR 0 14
8957: ARRAY
8958: PUSH
8959: LD_INT 2
8961: EQUAL
8962: PUSH
8963: LD_VAR 0 10
8967: PUSH
8968: LD_VAR 0 14
8972: ARRAY
8973: PUSH
8974: LD_INT 3
8976: EQUAL
8977: OR
8978: IFFALSE 9031
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
8980: LD_ADDR_VAR 0 19
8984: PUSH
8985: LD_INT 1
8987: PUSH
8988: LD_INT 2
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: LD_INT 4
8996: PUSH
8997: LD_INT 5
8999: PUSH
9000: EMPTY
9001: LIST
9002: LIST
9003: LIST
9004: LIST
9005: LIST
9006: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9007: LD_ADDR_OWVAR 37
9011: PUSH
9012: LD_VAR 0 19
9016: PUSH
9017: LD_INT 1
9019: PPUSH
9020: LD_VAR 0 19
9024: PPUSH
9025: CALL_OW 12
9029: ARRAY
9030: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9031: LD_VAR 0 10
9035: PUSH
9036: LD_VAR 0 14
9040: ARRAY
9041: PUSH
9042: LD_INT 4
9044: EQUAL
9045: PUSH
9046: LD_VAR 0 10
9050: PUSH
9051: LD_VAR 0 14
9055: ARRAY
9056: PUSH
9057: LD_INT 5
9059: EQUAL
9060: OR
9061: PUSH
9062: LD_VAR 0 10
9066: PUSH
9067: LD_VAR 0 14
9071: ARRAY
9072: PUSH
9073: LD_INT 9
9075: EQUAL
9076: OR
9077: PUSH
9078: LD_VAR 0 10
9082: PUSH
9083: LD_VAR 0 14
9087: ARRAY
9088: PUSH
9089: LD_INT 11
9091: EQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 10
9098: PUSH
9099: LD_VAR 0 14
9103: ARRAY
9104: PUSH
9105: LD_INT 7
9107: EQUAL
9108: OR
9109: IFFALSE 9158
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9111: LD_ADDR_VAR 0 19
9115: PUSH
9116: LD_INT 2
9118: PUSH
9119: LD_INT 3
9121: PUSH
9122: LD_INT 4
9124: PUSH
9125: LD_INT 5
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9134: LD_ADDR_OWVAR 37
9138: PUSH
9139: LD_VAR 0 19
9143: PUSH
9144: LD_INT 1
9146: PPUSH
9147: LD_VAR 0 19
9151: PPUSH
9152: CALL_OW 12
9156: ARRAY
9157: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9158: LD_VAR 0 10
9162: PUSH
9163: LD_VAR 0 14
9167: ARRAY
9168: PUSH
9169: LD_INT 8
9171: EQUAL
9172: PUSH
9173: LD_VAR 0 10
9177: PUSH
9178: LD_VAR 0 14
9182: ARRAY
9183: PUSH
9184: LD_INT 6
9186: EQUAL
9187: OR
9188: PUSH
9189: LD_VAR 0 10
9193: PUSH
9194: LD_VAR 0 14
9198: ARRAY
9199: PUSH
9200: LD_INT 10
9202: EQUAL
9203: OR
9204: IFFALSE 9245
// begin amChassisTab = [ 4 , 5 ] ;
9206: LD_ADDR_VAR 0 19
9210: PUSH
9211: LD_INT 4
9213: PUSH
9214: LD_INT 5
9216: PUSH
9217: EMPTY
9218: LIST
9219: LIST
9220: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9221: LD_ADDR_OWVAR 37
9225: PUSH
9226: LD_VAR 0 19
9230: PUSH
9231: LD_INT 1
9233: PPUSH
9234: LD_VAR 0 19
9238: PPUSH
9239: CALL_OW 12
9243: ARRAY
9244: ST_TO_ADDR
// end ; end ;
9245: GO 8945
9247: POP
9248: POP
// veh = CreateVehicle ;
9249: LD_ADDR_VAR 0 16
9253: PUSH
9254: CALL_OW 45
9258: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9259: LD_VAR 0 16
9263: PPUSH
9264: LD_VAR 0 1
9268: PPUSH
9269: LD_INT 0
9271: PPUSH
9272: CALL_OW 49
// if vehControl = 1 then
9276: LD_VAR 0 7
9280: PUSH
9281: LD_INT 1
9283: EQUAL
9284: IFFALSE 9341
// begin hc_gallery =  ;
9286: LD_ADDR_OWVAR 33
9290: PUSH
9291: LD_STRING 
9293: ST_TO_ADDR
// hc_name =  ;
9294: LD_ADDR_OWVAR 26
9298: PUSH
9299: LD_STRING 
9301: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9302: LD_INT 0
9304: PPUSH
9305: LD_INT 3
9307: PPUSH
9308: LD_VAR 0 4
9312: PPUSH
9313: CALL_OW 380
// un = CreateHuman ;
9317: LD_ADDR_VAR 0 15
9321: PUSH
9322: CALL_OW 44
9326: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9327: LD_VAR 0 15
9331: PPUSH
9332: LD_VAR 0 16
9336: PPUSH
9337: CALL_OW 52
// end ; i = i + 1 ;
9341: LD_ADDR_VAR 0 13
9345: PUSH
9346: LD_VAR 0 13
9350: PUSH
9351: LD_INT 1
9353: PLUS
9354: ST_TO_ADDR
// end ; if nation = 2 then
9355: LD_VAR 0 5
9359: PUSH
9360: LD_INT 2
9362: EQUAL
9363: IFFALSE 9787
// begin uc_side = side ;
9365: LD_ADDR_OWVAR 20
9369: PUSH
9370: LD_VAR 0 2
9374: ST_TO_ADDR
// uc_nation = nation ;
9375: LD_ADDR_OWVAR 21
9379: PUSH
9380: LD_VAR 0 5
9384: ST_TO_ADDR
// vc_engine = vehengine ;
9385: LD_ADDR_OWVAR 39
9389: PUSH
9390: LD_VAR 0 6
9394: ST_TO_ADDR
// vc_control = vehcontrol ;
9395: LD_ADDR_OWVAR 38
9399: PUSH
9400: LD_VAR 0 7
9404: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9405: LD_ADDR_OWVAR 40
9409: PUSH
9410: LD_VAR 0 9
9414: PUSH
9415: LD_INT 1
9417: PPUSH
9418: LD_VAR 0 9
9422: PPUSH
9423: CALL_OW 12
9427: ARRAY
9428: ST_TO_ADDR
// for j = 1 to ARWeapons do
9429: LD_ADDR_VAR 0 14
9433: PUSH
9434: DOUBLE
9435: LD_INT 1
9437: DEC
9438: ST_TO_ADDR
9439: LD_VAR 0 9
9443: PUSH
9444: FOR_TO
9445: IFFALSE 9679
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9447: LD_VAR 0 9
9451: PUSH
9452: LD_VAR 0 14
9456: ARRAY
9457: PUSH
9458: LD_INT 24
9460: EQUAL
9461: PUSH
9462: LD_VAR 0 9
9466: PUSH
9467: LD_VAR 0 14
9471: ARRAY
9472: PUSH
9473: LD_INT 22
9475: EQUAL
9476: OR
9477: PUSH
9478: LD_VAR 0 9
9482: PUSH
9483: LD_VAR 0 14
9487: ARRAY
9488: PUSH
9489: LD_INT 23
9491: EQUAL
9492: OR
9493: PUSH
9494: LD_VAR 0 9
9498: PUSH
9499: LD_VAR 0 14
9503: ARRAY
9504: PUSH
9505: LD_INT 30
9507: EQUAL
9508: OR
9509: IFFALSE 9558
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9511: LD_ADDR_VAR 0 18
9515: PUSH
9516: LD_INT 11
9518: PUSH
9519: LD_INT 12
9521: PUSH
9522: LD_INT 13
9524: PUSH
9525: LD_INT 14
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9534: LD_ADDR_OWVAR 37
9538: PUSH
9539: LD_VAR 0 18
9543: PUSH
9544: LD_INT 1
9546: PPUSH
9547: LD_VAR 0 18
9551: PPUSH
9552: CALL_OW 12
9556: ARRAY
9557: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9558: LD_VAR 0 9
9562: PUSH
9563: LD_VAR 0 14
9567: ARRAY
9568: PUSH
9569: LD_INT 29
9571: EQUAL
9572: PUSH
9573: LD_VAR 0 9
9577: PUSH
9578: LD_VAR 0 14
9582: ARRAY
9583: PUSH
9584: LD_INT 28
9586: EQUAL
9587: OR
9588: PUSH
9589: LD_VAR 0 9
9593: PUSH
9594: LD_VAR 0 14
9598: ARRAY
9599: PUSH
9600: LD_INT 27
9602: EQUAL
9603: OR
9604: PUSH
9605: LD_VAR 0 9
9609: PUSH
9610: LD_VAR 0 14
9614: ARRAY
9615: PUSH
9616: LD_INT 26
9618: EQUAL
9619: OR
9620: PUSH
9621: LD_VAR 0 9
9625: PUSH
9626: LD_VAR 0 14
9630: ARRAY
9631: PUSH
9632: LD_INT 25
9634: EQUAL
9635: OR
9636: IFFALSE 9677
// begin arChassisTab = [ 13 , 14 ] ;
9638: LD_ADDR_VAR 0 18
9642: PUSH
9643: LD_INT 13
9645: PUSH
9646: LD_INT 14
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9653: LD_ADDR_OWVAR 37
9657: PUSH
9658: LD_VAR 0 18
9662: PUSH
9663: LD_INT 1
9665: PPUSH
9666: LD_VAR 0 18
9670: PPUSH
9671: CALL_OW 12
9675: ARRAY
9676: ST_TO_ADDR
// end ; end ;
9677: GO 9444
9679: POP
9680: POP
// veh = CreateVehicle ;
9681: LD_ADDR_VAR 0 16
9685: PUSH
9686: CALL_OW 45
9690: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9691: LD_VAR 0 16
9695: PPUSH
9696: LD_VAR 0 1
9700: PPUSH
9701: LD_INT 0
9703: PPUSH
9704: CALL_OW 49
// if vehcontrol = 1 then
9708: LD_VAR 0 7
9712: PUSH
9713: LD_INT 1
9715: EQUAL
9716: IFFALSE 9773
// begin hc_gallery =  ;
9718: LD_ADDR_OWVAR 33
9722: PUSH
9723: LD_STRING 
9725: ST_TO_ADDR
// hc_name =  ;
9726: LD_ADDR_OWVAR 26
9730: PUSH
9731: LD_STRING 
9733: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9734: LD_INT 0
9736: PPUSH
9737: LD_INT 3
9739: PPUSH
9740: LD_VAR 0 4
9744: PPUSH
9745: CALL_OW 380
// un = CreateHuman ;
9749: LD_ADDR_VAR 0 15
9753: PUSH
9754: CALL_OW 44
9758: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9759: LD_VAR 0 15
9763: PPUSH
9764: LD_VAR 0 16
9768: PPUSH
9769: CALL_OW 52
// end ; i = i + 1 ;
9773: LD_ADDR_VAR 0 13
9777: PUSH
9778: LD_VAR 0 13
9782: PUSH
9783: LD_INT 1
9785: PLUS
9786: ST_TO_ADDR
// end ; if nation = 3 then
9787: LD_VAR 0 5
9791: PUSH
9792: LD_INT 3
9794: EQUAL
9795: IFFALSE 10187
// begin uc_side = side ;
9797: LD_ADDR_OWVAR 20
9801: PUSH
9802: LD_VAR 0 2
9806: ST_TO_ADDR
// uc_nation = nation ;
9807: LD_ADDR_OWVAR 21
9811: PUSH
9812: LD_VAR 0 5
9816: ST_TO_ADDR
// vc_engine = vehengine ;
9817: LD_ADDR_OWVAR 39
9821: PUSH
9822: LD_VAR 0 6
9826: ST_TO_ADDR
// vc_control = vehcontrol ;
9827: LD_ADDR_OWVAR 38
9831: PUSH
9832: LD_VAR 0 7
9836: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9837: LD_ADDR_OWVAR 40
9841: PUSH
9842: LD_VAR 0 8
9846: PUSH
9847: LD_INT 1
9849: PPUSH
9850: LD_VAR 0 8
9854: PPUSH
9855: CALL_OW 12
9859: ARRAY
9860: ST_TO_ADDR
// for j = 1 to RuWeapons do
9861: LD_ADDR_VAR 0 14
9865: PUSH
9866: DOUBLE
9867: LD_INT 1
9869: DEC
9870: ST_TO_ADDR
9871: LD_VAR 0 8
9875: PUSH
9876: FOR_TO
9877: IFFALSE 10079
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9879: LD_VAR 0 8
9883: PUSH
9884: LD_VAR 0 14
9888: ARRAY
9889: PUSH
9890: LD_INT 42
9892: EQUAL
9893: PUSH
9894: LD_VAR 0 8
9898: PUSH
9899: LD_VAR 0 14
9903: ARRAY
9904: PUSH
9905: LD_INT 43
9907: EQUAL
9908: OR
9909: PUSH
9910: LD_VAR 0 8
9914: PUSH
9915: LD_VAR 0 14
9919: ARRAY
9920: PUSH
9921: LD_INT 44
9923: EQUAL
9924: OR
9925: PUSH
9926: LD_VAR 0 8
9930: PUSH
9931: LD_VAR 0 14
9935: ARRAY
9936: PUSH
9937: LD_INT 45
9939: EQUAL
9940: OR
9941: PUSH
9942: LD_VAR 0 8
9946: PUSH
9947: LD_VAR 0 14
9951: ARRAY
9952: PUSH
9953: LD_INT 49
9955: EQUAL
9956: OR
9957: IFFALSE 10006
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9959: LD_ADDR_VAR 0 17
9963: PUSH
9964: LD_INT 21
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 23
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
9982: LD_ADDR_OWVAR 37
9986: PUSH
9987: LD_VAR 0 17
9991: PUSH
9992: LD_INT 1
9994: PPUSH
9995: LD_VAR 0 17
9999: PPUSH
10000: CALL_OW 12
10004: ARRAY
10005: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10006: LD_VAR 0 8
10010: PUSH
10011: LD_VAR 0 14
10015: ARRAY
10016: PUSH
10017: LD_INT 46
10019: EQUAL
10020: PUSH
10021: LD_VAR 0 8
10025: PUSH
10026: LD_VAR 0 14
10030: ARRAY
10031: PUSH
10032: LD_INT 47
10034: EQUAL
10035: OR
10036: IFFALSE 10077
// begin ruChassisTab = [ 23 , 24 ] ;
10038: LD_ADDR_VAR 0 17
10042: PUSH
10043: LD_INT 23
10045: PUSH
10046: LD_INT 24
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10053: LD_ADDR_OWVAR 37
10057: PUSH
10058: LD_VAR 0 17
10062: PUSH
10063: LD_INT 1
10065: PPUSH
10066: LD_VAR 0 17
10070: PPUSH
10071: CALL_OW 12
10075: ARRAY
10076: ST_TO_ADDR
// end ; end ;
10077: GO 9876
10079: POP
10080: POP
// veh = CreateVehicle ;
10081: LD_ADDR_VAR 0 16
10085: PUSH
10086: CALL_OW 45
10090: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10091: LD_VAR 0 16
10095: PPUSH
10096: LD_VAR 0 1
10100: PPUSH
10101: LD_INT 0
10103: PPUSH
10104: CALL_OW 49
// if vehcontrol = 1 then
10108: LD_VAR 0 7
10112: PUSH
10113: LD_INT 1
10115: EQUAL
10116: IFFALSE 10173
// begin hc_gallery =  ;
10118: LD_ADDR_OWVAR 33
10122: PUSH
10123: LD_STRING 
10125: ST_TO_ADDR
// hc_name =  ;
10126: LD_ADDR_OWVAR 26
10130: PUSH
10131: LD_STRING 
10133: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10134: LD_INT 0
10136: PPUSH
10137: LD_INT 3
10139: PPUSH
10140: LD_VAR 0 4
10144: PPUSH
10145: CALL_OW 380
// un = CreateHuman ;
10149: LD_ADDR_VAR 0 15
10153: PUSH
10154: CALL_OW 44
10158: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10159: LD_VAR 0 15
10163: PPUSH
10164: LD_VAR 0 16
10168: PPUSH
10169: CALL_OW 52
// end ; i = i + 1 ;
10173: LD_ADDR_VAR 0 13
10177: PUSH
10178: LD_VAR 0 13
10182: PUSH
10183: LD_INT 1
10185: PLUS
10186: ST_TO_ADDR
// end ; until i = vehCount ;
10187: LD_VAR 0 13
10191: PUSH
10192: LD_VAR 0 3
10196: EQUAL
10197: IFFALSE 8849
// repeat wait ( 0 0$1 ) ;
10199: LD_INT 35
10201: PPUSH
10202: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10206: LD_ADDR_VAR 0 20
10210: PUSH
10211: LD_INT 22
10213: PUSH
10214: LD_VAR 0 2
10218: PUSH
10219: EMPTY
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 21
10225: PUSH
10226: LD_INT 2
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: PUSH
10233: LD_INT 24
10235: PUSH
10236: LD_INT 661
10238: PUSH
10239: EMPTY
10240: LIST
10241: LIST
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: LIST
10247: PPUSH
10248: CALL_OW 69
10252: ST_TO_ADDR
// if vehicleOK_list > 0 then
10253: LD_VAR 0 20
10257: PUSH
10258: LD_INT 0
10260: GREATER
10261: IFFALSE 10452
// begin for i in vehicleOK_list do
10263: LD_ADDR_VAR 0 13
10267: PUSH
10268: LD_VAR 0 20
10272: PUSH
10273: FOR_IN
10274: IFFALSE 10450
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10276: LD_ADDR_VAR 0 21
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_VAR 0 11
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PPUSH
10293: CALL_OW 69
10297: PPUSH
10298: LD_VAR 0 13
10302: PPUSH
10303: CALL_OW 74
10307: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10308: LD_ADDR_VAR 0 22
10312: PUSH
10313: LD_INT 22
10315: PUSH
10316: LD_VAR 0 11
10320: PUSH
10321: EMPTY
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 2
10327: PUSH
10328: LD_INT 59
10330: PUSH
10331: EMPTY
10332: LIST
10333: PUSH
10334: LD_INT 21
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 21
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: EMPTY
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: PPUSH
10372: LD_VAR 0 13
10376: PPUSH
10377: CALL_OW 74
10381: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10382: LD_VAR 0 13
10386: PPUSH
10387: LD_VAR 0 21
10391: PPUSH
10392: CALL_OW 296
10396: PUSH
10397: LD_INT 8
10399: PLUS
10400: PUSH
10401: LD_VAR 0 13
10405: PPUSH
10406: LD_VAR 0 22
10410: PPUSH
10411: CALL_OW 296
10415: LESS
10416: IFFALSE 10434
// begin ComAttackUnit ( i , target1 ) ;
10418: LD_VAR 0 13
10422: PPUSH
10423: LD_VAR 0 21
10427: PPUSH
10428: CALL_OW 115
// end else
10432: GO 10448
// begin ComAttackUnit ( i , target2 ) ;
10434: LD_VAR 0 13
10438: PPUSH
10439: LD_VAR 0 22
10443: PPUSH
10444: CALL_OW 115
// end ; end ;
10448: GO 10273
10450: POP
10451: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10452: LD_INT 22
10454: PUSH
10455: LD_VAR 0 2
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 21
10466: PUSH
10467: LD_INT 2
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PPUSH
10478: CALL_OW 69
10482: PUSH
10483: LD_INT 0
10485: EQUAL
10486: IFFALSE 10199
// end ; end_of_file
10488: LD_VAR 0 12
10492: RET
// every 1 do var i , gammaSquad , startX , startY ;
10493: GO 10495
10495: DISABLE
10496: LD_INT 0
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10502: LD_ADDR_VAR 0 2
10506: PUSH
10507: LD_EXP 8
10511: PUSH
10512: LD_EXP 9
10516: PUSH
10517: LD_EXP 10
10521: PUSH
10522: LD_EXP 11
10526: PUSH
10527: LD_EXP 12
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10539: LD_ADDR_VAR 0 3
10543: PUSH
10544: LD_INT 46
10546: PUSH
10547: LD_INT 45
10549: PUSH
10550: LD_INT 44
10552: PUSH
10553: LD_INT 43
10555: PUSH
10556: LD_INT 42
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10566: LD_ADDR_VAR 0 4
10570: PUSH
10571: LD_INT 14
10573: PUSH
10574: LD_INT 12
10576: PUSH
10577: LD_INT 10
10579: PUSH
10580: LD_INT 8
10582: PUSH
10583: LD_INT 6
10585: PUSH
10586: EMPTY
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10593: LD_INT 32
10595: PPUSH
10596: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10600: LD_INT 32
10602: PPUSH
10603: LD_INT 51
10605: PPUSH
10606: LD_INT 26
10608: PPUSH
10609: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10613: LD_INT 32
10615: PPUSH
10616: LD_INT 53
10618: PPUSH
10619: LD_INT 23
10621: PPUSH
10622: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10626: LD_INT 32
10628: PPUSH
10629: LD_INT 52
10631: PPUSH
10632: LD_INT 19
10634: PPUSH
10635: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10639: LD_INT 35
10641: PPUSH
10642: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10646: LD_INT 32
10648: PPUSH
10649: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10653: LD_INT 32
10655: PPUSH
10656: CALL_OW 250
10660: PUSH
10661: LD_INT 52
10663: EQUAL
10664: PUSH
10665: LD_INT 32
10667: PPUSH
10668: CALL_OW 251
10672: PUSH
10673: LD_INT 19
10675: EQUAL
10676: AND
10677: IFFALSE 10639
// ComExitVehicle ( JMM ) ;
10679: LD_EXP 1
10683: PPUSH
10684: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10688: LD_EXP 7
10692: PPUSH
10693: LD_EXP 1
10697: PPUSH
10698: CALL_OW 119
// wait ( 0 0$01 ) ;
10702: LD_INT 35
10704: PPUSH
10705: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10709: LD_EXP 1
10713: PPUSH
10714: LD_INT 46
10716: PPUSH
10717: LD_INT 10
10719: PPUSH
10720: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10724: LD_EXP 1
10728: PPUSH
10729: LD_EXP 7
10733: PPUSH
10734: CALL_OW 179
// wait ( 0 0$4 ) ;
10738: LD_INT 140
10740: PPUSH
10741: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10745: LD_EXP 1
10749: PPUSH
10750: LD_STRING D1-JMM-1
10752: PPUSH
10753: CALL_OW 88
// for i := 1 to gammaSquad do
10757: LD_ADDR_VAR 0 1
10761: PUSH
10762: DOUBLE
10763: LD_INT 1
10765: DEC
10766: ST_TO_ADDR
10767: LD_VAR 0 2
10771: PUSH
10772: FOR_TO
10773: IFFALSE 10834
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10775: LD_VAR 0 2
10779: PUSH
10780: LD_VAR 0 1
10784: ARRAY
10785: PPUSH
10786: LD_VAR 0 3
10790: PUSH
10791: LD_VAR 0 1
10795: ARRAY
10796: PPUSH
10797: LD_VAR 0 4
10801: PUSH
10802: LD_VAR 0 1
10806: ARRAY
10807: PPUSH
10808: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10812: LD_VAR 0 2
10816: PUSH
10817: LD_VAR 0 1
10821: ARRAY
10822: PPUSH
10823: LD_EXP 1
10827: PPUSH
10828: CALL_OW 179
// end ;
10832: GO 10772
10834: POP
10835: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
10836: LD_EXP 4
10840: PPUSH
10841: LD_INT 41
10843: PPUSH
10844: LD_INT 4
10846: PPUSH
10847: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
10851: LD_EXP 4
10855: PPUSH
10856: LD_EXP 1
10860: PPUSH
10861: CALL_OW 179
// if Lisa = false and Bobby then
10865: LD_EXP 4
10869: PUSH
10870: LD_INT 0
10872: EQUAL
10873: PUSH
10874: LD_EXP 2
10878: AND
10879: IFFALSE 10910
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
10881: LD_EXP 2
10885: PPUSH
10886: LD_INT 41
10888: PPUSH
10889: LD_INT 4
10891: PPUSH
10892: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
10896: LD_EXP 2
10900: PPUSH
10901: LD_EXP 1
10905: PPUSH
10906: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
10910: LD_EXP 4
10914: PUSH
10915: LD_INT 0
10917: EQUAL
10918: PUSH
10919: LD_EXP 2
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: AND
10928: PUSH
10929: LD_EXP 3
10933: AND
10934: IFFALSE 10965
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
10936: LD_EXP 3
10940: PPUSH
10941: LD_INT 41
10943: PPUSH
10944: LD_INT 4
10946: PPUSH
10947: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
10951: LD_EXP 3
10955: PPUSH
10956: LD_EXP 1
10960: PPUSH
10961: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
10965: LD_EXP 4
10969: PUSH
10970: LD_INT 0
10972: EQUAL
10973: PUSH
10974: LD_EXP 2
10978: PUSH
10979: LD_INT 0
10981: EQUAL
10982: AND
10983: PUSH
10984: LD_EXP 3
10988: PUSH
10989: LD_INT 0
10991: EQUAL
10992: AND
10993: IFFALSE 11024
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
10995: LD_EXP 6
10999: PPUSH
11000: LD_INT 41
11002: PPUSH
11003: LD_INT 4
11005: PPUSH
11006: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11010: LD_EXP 6
11014: PPUSH
11015: LD_EXP 1
11019: PPUSH
11020: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11024: LD_EXP 7
11028: PPUSH
11029: LD_STRING D1-Brown-1
11031: PPUSH
11032: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11036: LD_EXP 1
11040: PPUSH
11041: LD_STRING D1-JMM-2
11043: PPUSH
11044: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11048: LD_EXP 7
11052: PPUSH
11053: LD_STRING D1-Brown-2
11055: PPUSH
11056: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11060: LD_EXP 1
11064: PPUSH
11065: LD_EXP 9
11069: PPUSH
11070: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11074: LD_EXP 9
11078: PPUSH
11079: LD_STRING D1-FSol1-2
11081: PPUSH
11082: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11086: LD_EXP 1
11090: PPUSH
11091: LD_EXP 8
11095: PPUSH
11096: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11100: LD_EXP 8
11104: PPUSH
11105: LD_STRING D1-Sol2-2
11107: PPUSH
11108: CALL_OW 88
// if Lisa then
11112: LD_EXP 4
11116: IFFALSE 11156
// begin ComTurnUnit ( JMM , Lisa ) ;
11118: LD_EXP 1
11122: PPUSH
11123: LD_EXP 4
11127: PPUSH
11128: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11132: LD_EXP 4
11136: PPUSH
11137: LD_STRING D1-Lisa-2
11139: PPUSH
11140: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11144: LD_EXP 1
11148: PPUSH
11149: LD_STRING D1-JMM-3
11151: PPUSH
11152: CALL_OW 88
// end ; if Bobby then
11156: LD_EXP 2
11160: IFFALSE 11200
// begin ComTurnUnit ( JMM , Bobby ) ;
11162: LD_EXP 1
11166: PPUSH
11167: LD_EXP 2
11171: PPUSH
11172: CALL_OW 119
// Say ( Bobby , D1-Bobby-22 ) ;
11176: LD_EXP 2
11180: PPUSH
11181: LD_STRING D1-Bobby-22
11183: PPUSH
11184: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11188: LD_EXP 1
11192: PPUSH
11193: LD_STRING D1-JMM-3
11195: PPUSH
11196: CALL_OW 88
// end ; if Cyrus then
11200: LD_EXP 3
11204: IFFALSE 11244
// begin ComTurnUnit ( JMM , Cyrus ) ;
11206: LD_EXP 1
11210: PPUSH
11211: LD_EXP 3
11215: PPUSH
11216: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11220: LD_EXP 3
11224: PPUSH
11225: LD_STRING D1-Cyrus-2
11227: PPUSH
11228: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11232: LD_EXP 1
11236: PPUSH
11237: LD_STRING D1-JMM-3
11239: PPUSH
11240: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11244: LD_EXP 1
11248: PPUSH
11249: LD_EXP 7
11253: PPUSH
11254: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11258: LD_EXP 1
11262: PPUSH
11263: LD_STRING D1-JMM-3a
11265: PPUSH
11266: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11270: LD_EXP 7
11274: PPUSH
11275: LD_INT 38
11277: PPUSH
11278: LD_INT 5
11280: PPUSH
11281: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11285: LD_EXP 7
11289: PPUSH
11290: LD_EXP 1
11294: PPUSH
11295: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11299: LD_EXP 1
11303: PPUSH
11304: LD_INT 40
11306: PPUSH
11307: LD_INT 7
11309: PPUSH
11310: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11314: LD_EXP 1
11318: PPUSH
11319: LD_EXP 7
11323: PPUSH
11324: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11328: LD_EXP 7
11332: PPUSH
11333: LD_STRING D1-Brown-3
11335: PPUSH
11336: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11340: LD_EXP 14
11344: PPUSH
11345: LD_STRING D1-Har-3
11347: PPUSH
11348: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11352: LD_EXP 1
11356: PPUSH
11357: LD_STRING D1-JMM-4
11359: PPUSH
11360: CALL_OW 88
// PrepareRussianConvoy ;
11364: CALL 2340 0 0
// SayRadio ( Harisson , D1-Har-4 ) ;
11368: LD_EXP 14
11372: PPUSH
11373: LD_STRING D1-Har-4
11375: PPUSH
11376: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11380: LD_EXP 1
11384: PPUSH
11385: LD_STRING D1-JMM-5
11387: PPUSH
11388: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11392: LD_EXP 14
11396: PPUSH
11397: LD_STRING D1-Har-5
11399: PPUSH
11400: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11404: LD_EXP 1
11408: PPUSH
11409: LD_STRING D1-JMM-6
11411: PPUSH
11412: CALL_OW 88
// InGameOff ;
11416: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
11420: LD_STRING M1
11422: PPUSH
11423: CALL_OW 337
// SaveForQuickRestart ;
11427: CALL_OW 22
// timerStatus = 1 ;
11431: LD_ADDR_EXP 27
11435: PUSH
11436: LD_INT 1
11438: ST_TO_ADDR
// startTimer = 1 ;
11439: LD_ADDR_EXP 28
11443: PUSH
11444: LD_INT 1
11446: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11447: LD_INT 105
11449: PPUSH
11450: CALL_OW 67
// DialogueOn ;
11454: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11458: LD_EXP 12
11462: PPUSH
11463: LD_STRING D9-Mech1-1
11465: PPUSH
11466: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11470: LD_EXP 1
11474: PPUSH
11475: LD_STRING D9-JMM-1
11477: PPUSH
11478: CALL_OW 88
// DialogueOff ;
11482: CALL_OW 7
// end ;
11486: PPOPN 4
11488: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11489: LD_INT 47
11491: PPUSH
11492: LD_INT 1
11494: PPUSH
11495: CALL_OW 321
11499: PUSH
11500: LD_INT 2
11502: EQUAL
11503: PUSH
11504: LD_INT 22
11506: PUSH
11507: LD_INT 1
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: PUSH
11514: LD_INT 21
11516: PUSH
11517: LD_INT 3
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: PUSH
11524: LD_INT 30
11526: PUSH
11527: LD_INT 3
11529: PUSH
11530: EMPTY
11531: LIST
11532: LIST
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: PPUSH
11539: CALL_OW 69
11543: PUSH
11544: LD_INT 0
11546: GREATER
11547: AND
11548: IFFALSE 11778
11550: GO 11552
11552: DISABLE
// begin if IsOk ( Campell ) then
11553: LD_EXP 12
11557: PPUSH
11558: CALL_OW 302
11562: IFFALSE 11578
// begin Say ( Campell , D10-Mech1-1 ) ;
11564: LD_EXP 12
11568: PPUSH
11569: LD_STRING D10-Mech1-1
11571: PPUSH
11572: CALL_OW 88
// end else
11576: GO 11778
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11578: LD_INT 22
11580: PUSH
11581: LD_INT 1
11583: PUSH
11584: EMPTY
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 21
11590: PUSH
11591: LD_INT 1
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 25
11600: PUSH
11601: LD_INT 3
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 26
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PPUSH
11624: CALL_OW 69
11628: PUSH
11629: LD_EXP 1
11633: PUSH
11634: EMPTY
11635: LIST
11636: PUSH
11637: LD_INT 0
11639: GREATER
11640: DIFF
11641: IFFALSE 11715
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11643: LD_INT 22
11645: PUSH
11646: LD_INT 1
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 21
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: LD_INT 25
11665: PUSH
11666: LD_INT 3
11668: PUSH
11669: EMPTY
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 26
11675: PUSH
11676: LD_INT 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: LIST
11682: PUSH
11683: EMPTY
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: PPUSH
11689: CALL_OW 69
11693: PUSH
11694: LD_EXP 1
11698: PUSH
11699: EMPTY
11700: LIST
11701: DIFF
11702: PPUSH
11703: LD_STRING D10-Mech1-1
11705: PPUSH
11706: LD_STRING D10-Mech1-1
11708: PPUSH
11709: CALL 3570 0 3
// end else
11713: GO 11778
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11715: LD_INT 22
11717: PUSH
11718: LD_INT 1
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: LD_INT 21
11727: PUSH
11728: LD_INT 1
11730: PUSH
11731: EMPTY
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 26
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: PUSH
11750: LD_INT 1
11752: ARRAY
11753: PPUSH
11754: CALL_OW 69
11758: PUSH
11759: LD_EXP 1
11763: PUSH
11764: EMPTY
11765: LIST
11766: DIFF
11767: PPUSH
11768: LD_STRING D10-Mech1-1
11770: PPUSH
11771: LD_STRING D10-Mech1-1
11773: PPUSH
11774: CALL 3570 0 3
// end ; end ; end ;
11778: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11779: LD_INT 22
11781: PUSH
11782: LD_INT 1
11784: PUSH
11785: EMPTY
11786: LIST
11787: LIST
11788: PUSH
11789: LD_INT 30
11791: PUSH
11792: LD_INT 32
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: PUSH
11799: EMPTY
11800: LIST
11801: LIST
11802: PPUSH
11803: CALL_OW 69
11807: PUSH
11808: LD_INT 0
11810: GREATER
11811: PUSH
11812: LD_EXP 30
11816: PUSH
11817: LD_INT 0
11819: EQUAL
11820: AND
11821: IFFALSE 12061
11823: GO 11825
11825: DISABLE
// begin if IsOK ( Claptopn ) then
11826: LD_EXP 11
11830: PPUSH
11831: CALL_OW 302
11835: IFFALSE 11851
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
11837: LD_EXP 11
11841: PPUSH
11842: LD_STRING D9b-Eng1-1
11844: PPUSH
11845: CALL_OW 88
// end else
11849: GO 12047
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11851: LD_INT 22
11853: PUSH
11854: LD_INT 1
11856: PUSH
11857: EMPTY
11858: LIST
11859: LIST
11860: PUSH
11861: LD_INT 21
11863: PUSH
11864: LD_INT 1
11866: PUSH
11867: EMPTY
11868: LIST
11869: LIST
11870: PUSH
11871: LD_INT 25
11873: PUSH
11874: LD_INT 3
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: PPUSH
11897: CALL_OW 69
11901: PUSH
11902: LD_EXP 1
11906: PUSH
11907: EMPTY
11908: LIST
11909: PUSH
11910: LD_INT 0
11912: GREATER
11913: DIFF
11914: IFFALSE 11988
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11916: LD_INT 22
11918: PUSH
11919: LD_INT 1
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 21
11928: PUSH
11929: LD_INT 1
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: LD_INT 25
11938: PUSH
11939: LD_INT 2
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 26
11948: PUSH
11949: LD_INT 1
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: LIST
11960: LIST
11961: PPUSH
11962: CALL_OW 69
11966: PUSH
11967: LD_EXP 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: DIFF
11975: PPUSH
11976: LD_STRING D9b-Eng1-1
11978: PPUSH
11979: LD_STRING D9b-Eng1-11
11981: PPUSH
11982: CALL 3570 0 3
// end else
11986: GO 12047
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
11988: LD_INT 22
11990: PUSH
11991: LD_INT 1
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: PUSH
11998: LD_INT 21
12000: PUSH
12001: LD_INT 1
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: PUSH
12008: LD_INT 26
12010: PUSH
12011: LD_INT 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: PPUSH
12023: CALL_OW 69
12027: PUSH
12028: LD_EXP 1
12032: PUSH
12033: EMPTY
12034: LIST
12035: DIFF
12036: PPUSH
12037: LD_STRING D9b-Eng1-1
12039: PPUSH
12040: LD_STRING D9b-Eng1-1
12042: PPUSH
12043: CALL 3570 0 3
// end ; end ; if energyVDialog = 0 then
12047: LD_EXP 31
12051: PUSH
12052: LD_INT 0
12054: EQUAL
12055: IFFALSE 12061
// EnergyDialog ;
12057: CALL 3882 0 0
// end ;
12061: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12062: LD_EXP 32
12066: PUSH
12067: LD_INT 1
12069: EQUAL
12070: PUSH
12071: LD_EXP 33
12075: PUSH
12076: LD_INT 1
12078: EQUAL
12079: AND
12080: IFFALSE 12092
12082: GO 12084
12084: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12085: LD_STRING M1a
12087: PPUSH
12088: CALL_OW 337
12092: END
// every 3 3$0 do
12093: GO 12095
12095: DISABLE
// begin PrepareFirstAttack ;
12096: CALL 3132 0 0
// end ;
12100: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12101: LD_INT 22
12103: PUSH
12104: LD_INT 5
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PUSH
12111: LD_INT 21
12113: PUSH
12114: LD_INT 1
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: PPUSH
12125: CALL_OW 69
12129: PUSH
12130: LD_INT 3
12132: LESSEQUAL
12133: PUSH
12134: LD_EXP 21
12138: PUSH
12139: LD_INT 1
12141: EQUAL
12142: AND
12143: IFFALSE 12461
12145: GO 12147
12147: DISABLE
12148: LD_INT 0
12150: PPUSH
// begin firstRussianAttack = 2 ;
12151: LD_ADDR_EXP 21
12155: PUSH
12156: LD_INT 2
12158: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12159: LD_ADDR_VAR 0 1
12163: PUSH
12164: LD_INT 22
12166: PUSH
12167: LD_INT 5
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 21
12176: PUSH
12177: LD_INT 1
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: PPUSH
12188: CALL_OW 69
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12213
// ComMoveXY ( i , 125 , 98 ) ;
12196: LD_VAR 0 1
12200: PPUSH
12201: LD_INT 125
12203: PPUSH
12204: LD_INT 98
12206: PPUSH
12207: CALL_OW 111
12211: GO 12193
12213: POP
12214: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12215: LD_INT 22
12217: PUSH
12218: LD_INT 1
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 21
12227: PUSH
12228: LD_INT 1
12230: PUSH
12231: EMPTY
12232: LIST
12233: LIST
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PPUSH
12239: CALL_OW 69
12243: PUSH
12244: LD_EXP 1
12248: PUSH
12249: LD_EXP 7
12253: PUSH
12254: LD_EXP 4
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: LIST
12263: DIFF
12264: PPUSH
12265: LD_STRING DAtt1-Sol1-1
12267: PPUSH
12268: LD_STRING DAtt1-FSol1-1
12270: PPUSH
12271: CALL 3570 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12275: LD_EXP 1
12279: PPUSH
12280: LD_STRING DAtt1-JMM-1
12282: PPUSH
12283: CALL_OW 88
// if Lisa then
12287: LD_EXP 4
12291: IFFALSE 12307
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12293: LD_EXP 4
12297: PPUSH
12298: LD_STRING DAtt1a-Lisa-1
12300: PPUSH
12301: CALL_OW 88
// end else
12305: GO 12378
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12307: LD_INT 22
12309: PUSH
12310: LD_INT 1
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: LD_INT 21
12319: PUSH
12320: LD_INT 1
12322: PUSH
12323: EMPTY
12324: LIST
12325: LIST
12326: PUSH
12327: LD_INT 26
12329: PUSH
12330: LD_INT 1
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: PUSH
12337: EMPTY
12338: LIST
12339: LIST
12340: LIST
12341: PPUSH
12342: CALL_OW 69
12346: PUSH
12347: LD_EXP 1
12351: PUSH
12352: LD_EXP 7
12356: PUSH
12357: LD_EXP 4
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: DIFF
12367: PPUSH
12368: LD_STRING DAtt1a-Sol1-1
12370: PPUSH
12371: LD_STRING DAtt1-FSol1-1
12373: PPUSH
12374: CALL 3570 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12378: LD_EXP 1
12382: PPUSH
12383: LD_STRING DAtt1a-JMM-1
12385: PPUSH
12386: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12390: LD_INT 22
12392: PUSH
12393: LD_INT 1
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PUSH
12400: LD_INT 21
12402: PUSH
12403: LD_INT 1
12405: PUSH
12406: EMPTY
12407: LIST
12408: LIST
12409: PUSH
12410: LD_INT 26
12412: PUSH
12413: LD_INT 1
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: PPUSH
12425: CALL_OW 69
12429: PUSH
12430: LD_EXP 1
12434: PUSH
12435: LD_EXP 7
12439: PUSH
12440: LD_EXP 4
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: DIFF
12450: PPUSH
12451: LD_STRING DAtt1b-Sol1-1
12453: PPUSH
12454: LD_STRING DAtt1a-Sol1-1
12456: PPUSH
12457: CALL 3570 0 3
// end ;
12461: PPOPN 1
12463: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12464: LD_EXP 21
12468: PUSH
12469: LD_INT 2
12471: EQUAL
12472: IFFALSE 12534
12474: GO 12476
12476: DISABLE
12477: LD_INT 0
12479: PPUSH
// begin enable ;
12480: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12481: LD_ADDR_VAR 0 1
12485: PUSH
12486: LD_INT 5
12488: PPUSH
12489: LD_INT 22
12491: PUSH
12492: LD_INT 5
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: PUSH
12499: LD_INT 21
12501: PUSH
12502: LD_INT 1
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PUSH
12509: EMPTY
12510: LIST
12511: LIST
12512: PPUSH
12513: CALL_OW 70
12517: PUSH
12518: FOR_IN
12519: IFFALSE 12532
// RemoveUnit ( i ) ;
12521: LD_VAR 0 1
12525: PPUSH
12526: CALL_OW 64
12530: GO 12518
12532: POP
12533: POP
// end ;
12534: PPOPN 1
12536: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12537: LD_INT 22
12539: PUSH
12540: LD_INT 5
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: PUSH
12547: EMPTY
12548: LIST
12549: PPUSH
12550: CALL_OW 69
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: PUSH
12559: LD_EXP 21
12563: PUSH
12564: LD_INT 2
12566: EQUAL
12567: AND
12568: IFFALSE 12581
12570: GO 12572
12572: DISABLE
// firstRussianAttack = 3 ;
12573: LD_ADDR_EXP 21
12577: PUSH
12578: LD_INT 3
12580: ST_TO_ADDR
12581: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12582: LD_EXP 26
12586: PUSH
12587: LD_INT 0
12589: EQUAL
12590: IFFALSE 12671
12592: GO 12594
12594: DISABLE
// begin timerStatus = 4 ;
12595: LD_ADDR_EXP 27
12599: PUSH
12600: LD_INT 4
12602: ST_TO_ADDR
// DialogueOn ;
12603: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12607: LD_EXP 13
12611: PPUSH
12612: LD_STRING D2-Don-1
12614: PPUSH
12615: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12619: LD_EXP 1
12623: PPUSH
12624: LD_STRING D2-JMM-1
12626: PPUSH
12627: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12631: LD_EXP 13
12635: PPUSH
12636: LD_STRING D2-Don-2
12638: PPUSH
12639: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12643: LD_EXP 1
12647: PPUSH
12648: LD_STRING D2-JMM-2
12650: PPUSH
12651: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12655: LD_EXP 13
12659: PPUSH
12660: LD_STRING D2-Don-3
12662: PPUSH
12663: CALL_OW 94
// DialogueOff ;
12667: CALL_OW 7
// end ;
12671: END
// every 12 12$0 do var tmp ;
12672: GO 12674
12674: DISABLE
12675: LD_INT 0
12677: PPUSH
// begin PrepareDonaldsonArmy ;
12678: CALL 917 0 0
// CenterNowOnUnits ( Donaldson ) ;
12682: LD_EXP 13
12686: PPUSH
12687: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12691: LD_ADDR_VAR 0 1
12695: PUSH
12696: LD_INT 22
12698: PUSH
12699: LD_INT 4
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: PUSH
12706: LD_INT 21
12708: PUSH
12709: LD_INT 1
12711: PUSH
12712: EMPTY
12713: LIST
12714: LIST
12715: PUSH
12716: LD_INT 26
12718: PUSH
12719: LD_INT 1
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 25
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: EMPTY
12733: LIST
12734: LIST
12735: PUSH
12736: EMPTY
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: PPUSH
12742: CALL_OW 69
12746: PUSH
12747: LD_EXP 5
12751: PUSH
12752: EMPTY
12753: LIST
12754: DIFF
12755: ST_TO_ADDR
// DialogueOn ;
12756: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12760: LD_VAR 0 1
12764: PPUSH
12765: LD_STRING D3-Sol1-1
12767: PPUSH
12768: LD_STRING D3-Sol1-1
12770: PPUSH
12771: CALL 3570 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12775: LD_INT 22
12777: PUSH
12778: LD_INT 4
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: PUSH
12785: LD_INT 21
12787: PUSH
12788: LD_INT 1
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: PUSH
12795: LD_INT 26
12797: PUSH
12798: LD_INT 1
12800: PUSH
12801: EMPTY
12802: LIST
12803: LIST
12804: PUSH
12805: LD_INT 25
12807: PUSH
12808: LD_INT 3
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PPUSH
12821: CALL_OW 69
12825: PPUSH
12826: LD_STRING D3-Sol2-1
12828: PPUSH
12829: LD_STRING D3-Sol2-1
12831: PPUSH
12832: CALL 3570 0 3
// if Frank then
12836: LD_EXP 5
12840: IFFALSE 12854
// Say ( Frank , D3-Frank-1 ) ;
12842: LD_EXP 5
12846: PPUSH
12847: LD_STRING D3-Frank-1
12849: PPUSH
12850: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
12854: LD_EXP 13
12858: PPUSH
12859: LD_STRING D3-Don-1
12861: PPUSH
12862: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
12866: LD_EXP 13
12870: PPUSH
12871: LD_STRING D3-Don-1a
12873: PPUSH
12874: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
12878: LD_EXP 1
12882: PPUSH
12883: LD_STRING D3-JMM-1
12885: PPUSH
12886: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
12890: LD_EXP 13
12894: PPUSH
12895: LD_STRING D3-Don-2
12897: PPUSH
12898: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
12902: LD_INT 22
12904: PUSH
12905: LD_INT 6
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: PUSH
12912: LD_INT 21
12914: PUSH
12915: LD_INT 1
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: PPUSH
12926: CALL_OW 69
12930: PUSH
12931: LD_INT 0
12933: GREATER
12934: IFFALSE 13048
// begin Say ( JMM , D3-JMM-2 ) ;
12936: LD_EXP 1
12940: PPUSH
12941: LD_STRING D3-JMM-2
12943: PPUSH
12944: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12948: LD_EXP 13
12952: PPUSH
12953: LD_STRING D3-Don-3
12955: PPUSH
12956: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
12960: LD_EXP 1
12964: PPUSH
12965: LD_STRING D3-JMM-3
12967: PPUSH
12968: CALL_OW 88
// if IsOK ( Frank ) then
12972: LD_EXP 5
12976: PPUSH
12977: CALL_OW 302
12981: IFFALSE 12995
// Say ( Frank , D3-Frank-3 ) ;
12983: LD_EXP 5
12987: PPUSH
12988: LD_STRING D3-Frank-3
12990: PPUSH
12991: CALL_OW 88
// DialogueOff ;
12995: CALL_OW 7
// if IsOK ( Frank ) then
12999: LD_EXP 5
13003: PPUSH
13004: CALL_OW 302
13008: IFFALSE 13046
// begin SetSide ( Frank , 0 ) ;
13010: LD_EXP 5
13014: PPUSH
13015: LD_INT 0
13017: PPUSH
13018: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13022: LD_EXP 5
13026: PPUSH
13027: LD_INT 12
13029: PPUSH
13030: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13034: LD_EXP 5
13038: PPUSH
13039: LD_STRING Frank
13041: PPUSH
13042: CALL_OW 38
// end ; end else
13046: GO 13111
// begin Say ( JMM , D3-JMM-4 ) ;
13048: LD_EXP 1
13052: PPUSH
13053: LD_STRING D3-JMM-4
13055: PPUSH
13056: CALL_OW 88
// DialogueOff ;
13060: CALL_OW 7
// if IsOK ( Frank ) then
13064: LD_EXP 5
13068: PPUSH
13069: CALL_OW 302
13073: IFFALSE 13111
// begin SetSide ( Frank , 0 ) ;
13075: LD_EXP 5
13079: PPUSH
13080: LD_INT 0
13082: PPUSH
13083: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13087: LD_EXP 5
13091: PPUSH
13092: LD_INT 12
13094: PPUSH
13095: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13099: LD_EXP 5
13103: PPUSH
13104: LD_STRING Frank
13106: PPUSH
13107: CALL_OW 38
// end ; end ; end ;
13111: PPOPN 1
13113: END
// every 0 0$1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13114: LD_EXP 5
13118: PPUSH
13119: LD_INT 12
13121: PPUSH
13122: CALL_OW 308
13126: PUSH
13127: LD_EXP 5
13131: PPUSH
13132: CALL_OW 255
13136: PUSH
13137: LD_INT 0
13139: EQUAL
13140: AND
13141: IFFALSE 13163
13143: GO 13145
13145: DISABLE
// begin RemoveUnit ( Frank ) ;
13146: LD_EXP 5
13150: PPUSH
13151: CALL_OW 64
// frankScoutBase = 1 ;
13155: LD_ADDR_EXP 23
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// end ;
13163: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13164: LD_EXP 13
13168: PPUSH
13169: CALL_OW 255
13173: PUSH
13174: LD_INT 4
13176: EQUAL
13177: PUSH
13178: LD_EXP 13
13182: PPUSH
13183: CALL_OW 302
13187: AND
13188: IFFALSE 13213
13190: GO 13192
13192: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13193: LD_EXP 13
13197: PPUSH
13198: LD_STRING D3b-Don-1
13200: PPUSH
13201: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13205: LD_ADDR_EXP 39
13209: PUSH
13210: LD_INT 1
13212: ST_TO_ADDR
// end ;
13213: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13214: LD_EXP 22
13218: PUSH
13219: LD_INT 0
13221: EQUAL
13222: IFFALSE 13378
13224: GO 13226
13226: DISABLE
13227: LD_INT 0
13229: PPUSH
13230: PPUSH
// begin enable ;
13231: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13232: LD_ADDR_VAR 0 1
13236: PUSH
13237: LD_INT 22
13239: PUSH
13240: LD_INT 4
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 21
13249: PUSH
13250: LD_INT 1
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PPUSH
13261: CALL_OW 69
13265: PUSH
13266: FOR_IN
13267: IFFALSE 13376
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13269: LD_ADDR_VAR 0 2
13273: PUSH
13274: LD_INT 22
13276: PUSH
13277: LD_INT 1
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: PUSH
13284: LD_INT 21
13286: PUSH
13287: LD_INT 1
13289: PUSH
13290: EMPTY
13291: LIST
13292: LIST
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PPUSH
13298: CALL_OW 69
13302: PUSH
13303: FOR_IN
13304: IFFALSE 13372
// begin if GetDistUnits ( i , j ) < 5 then
13306: LD_VAR 0 1
13310: PPUSH
13311: LD_VAR 0 2
13315: PPUSH
13316: CALL_OW 296
13320: PUSH
13321: LD_INT 5
13323: LESS
13324: IFFALSE 13370
// begin saveDonaldson = 1 ;
13326: LD_ADDR_EXP 22
13330: PUSH
13331: LD_INT 1
13333: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13334: LD_INT 22
13336: PUSH
13337: LD_INT 4
13339: PUSH
13340: EMPTY
13341: LIST
13342: LIST
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 1
13349: PUSH
13350: EMPTY
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: PPUSH
13358: CALL_OW 69
13362: PPUSH
13363: LD_INT 1
13365: PPUSH
13366: CALL_OW 235
// end ; end ;
13370: GO 13303
13372: POP
13373: POP
// end ;
13374: GO 13266
13376: POP
13377: POP
// end ;
13378: PPOPN 2
13380: END
// every 2 2$0 trigger saveDonaldson = 1 do
13381: LD_EXP 22
13385: PUSH
13386: LD_INT 1
13388: EQUAL
13389: IFFALSE 13631
13391: GO 13393
13393: DISABLE
// begin uc_side = 4 ;
13394: LD_ADDR_OWVAR 20
13398: PUSH
13399: LD_INT 4
13401: ST_TO_ADDR
// uc_nation = 1 ;
13402: LD_ADDR_OWVAR 21
13406: PUSH
13407: LD_INT 1
13409: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13410: LD_ADDR_EXP 5
13414: PUSH
13415: LD_STRING Frank
13417: PPUSH
13418: CALL_OW 34
13422: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13423: LD_EXP 5
13427: PPUSH
13428: LD_INT 13
13430: PPUSH
13431: LD_INT 0
13433: PPUSH
13434: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13438: LD_INT 35
13440: PPUSH
13441: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13445: LD_EXP 5
13449: PPUSH
13450: LD_INT 51
13452: PPUSH
13453: LD_INT 15
13455: PPUSH
13456: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13460: LD_EXP 5
13464: PPUSH
13465: LD_EXP 1
13469: PPUSH
13470: CALL_OW 296
13474: PUSH
13475: LD_INT 6
13477: LESS
13478: IFFALSE 13438
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13480: LD_EXP 1
13484: PUSH
13485: LD_EXP 5
13489: PUSH
13490: EMPTY
13491: LIST
13492: LIST
13493: PPUSH
13494: CALL_OW 87
// DialogueOn ;
13498: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13502: LD_EXP 5
13506: PPUSH
13507: LD_STRING D3a-Frank-1
13509: PPUSH
13510: CALL_OW 88
// if Lisa then
13514: LD_EXP 4
13518: IFFALSE 13568
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13520: LD_EXP 4
13524: PPUSH
13525: LD_STRING D3a-Lisa-1
13527: PPUSH
13528: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13532: LD_EXP 5
13536: PPUSH
13537: LD_STRING D3a-Frank-2
13539: PPUSH
13540: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13544: LD_EXP 4
13548: PPUSH
13549: LD_STRING D3a-Lisa-2
13551: PPUSH
13552: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13556: LD_EXP 5
13560: PPUSH
13561: LD_STRING D3a-Frank-3
13563: PPUSH
13564: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13568: LD_EXP 1
13572: PPUSH
13573: LD_STRING D3a-JMM-3
13575: PPUSH
13576: CALL_OW 88
// DialogueOff ;
13580: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13584: LD_EXP 5
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 235
// InGameOn ;
13596: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13600: LD_INT 1
13602: PPUSH
13603: LD_INT 7
13605: PPUSH
13606: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13610: LD_INT 93
13612: PPUSH
13613: LD_INT 91
13615: PPUSH
13616: CALL_OW 84
// wait ( 0 0$5 ) ;
13620: LD_INT 175
13622: PPUSH
13623: CALL_OW 67
// InGameOff ;
13627: CALL_OW 9
// end ;
13631: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13632: LD_OWVAR 67
13636: PUSH
13637: LD_INT 2
13639: EQUAL
13640: PUSH
13641: LD_OWVAR 67
13645: PUSH
13646: LD_INT 3
13648: EQUAL
13649: OR
13650: IFFALSE 13674
13652: GO 13654
13654: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13655: LD_INT 24
13657: PPUSH
13658: LD_INT 24
13660: PPUSH
13661: LD_INT 1
13663: PPUSH
13664: LD_INT 1
13666: PPUSH
13667: LD_INT 53
13669: PPUSH
13670: CALL_OW 125
13674: END
// every 18 18$0 do
13675: GO 13677
13677: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13678: LD_EXP 14
13682: PPUSH
13683: LD_STRING D4-Har-1
13685: PPUSH
13686: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13690: LD_EXP 1
13694: PPUSH
13695: LD_STRING D4-JMM-1
13697: PPUSH
13698: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13702: LD_EXP 14
13706: PPUSH
13707: LD_STRING D4-Har-2
13709: PPUSH
13710: CALL_OW 94
// case query ( Q1 ) of 1 :
13714: LD_STRING Q1
13716: PPUSH
13717: CALL_OW 97
13721: PUSH
13722: LD_INT 1
13724: DOUBLE
13725: EQUAL
13726: IFTRUE 13730
13728: GO 13789
13730: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13731: LD_EXP 1
13735: PPUSH
13736: LD_STRING D5-JMM-1
13738: PPUSH
13739: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
13743: LD_EXP 14
13747: PPUSH
13748: LD_STRING D5-Har-1
13750: PPUSH
13751: CALL_OW 94
// timeToSupport = 10 10$0 ;
13755: LD_ADDR_EXP 26
13759: PUSH
13760: LD_INT 21000
13762: ST_TO_ADDR
// timerStatus = 2 ;
13763: LD_ADDR_EXP 27
13767: PUSH
13768: LD_INT 2
13770: ST_TO_ADDR
// startTimer = 1 ;
13771: LD_ADDR_EXP 28
13775: PUSH
13776: LD_INT 1
13778: ST_TO_ADDR
// harrAnswer = 1 ;
13779: LD_ADDR_EXP 24
13783: PUSH
13784: LD_INT 1
13786: ST_TO_ADDR
// end ; 2 :
13787: GO 13924
13789: LD_INT 2
13791: DOUBLE
13792: EQUAL
13793: IFTRUE 13797
13795: GO 13856
13797: POP
// begin Say ( JMM , D5-JMM-2 ) ;
13798: LD_EXP 1
13802: PPUSH
13803: LD_STRING D5-JMM-2
13805: PPUSH
13806: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
13810: LD_EXP 14
13814: PPUSH
13815: LD_STRING D5-Har-2
13817: PPUSH
13818: CALL_OW 94
// timeToSupport = 5 5$0 ;
13822: LD_ADDR_EXP 26
13826: PUSH
13827: LD_INT 10500
13829: ST_TO_ADDR
// timerStatus = 2 ;
13830: LD_ADDR_EXP 27
13834: PUSH
13835: LD_INT 2
13837: ST_TO_ADDR
// startTimer = 1 ;
13838: LD_ADDR_EXP 28
13842: PUSH
13843: LD_INT 1
13845: ST_TO_ADDR
// harrAnswer = 2 ;
13846: LD_ADDR_EXP 24
13850: PUSH
13851: LD_INT 2
13853: ST_TO_ADDR
// end ; 3 :
13854: GO 13924
13856: LD_INT 3
13858: DOUBLE
13859: EQUAL
13860: IFTRUE 13864
13862: GO 13923
13864: POP
// begin Say ( JMM , D5-JMM-3 ) ;
13865: LD_EXP 1
13869: PPUSH
13870: LD_STRING D5-JMM-3
13872: PPUSH
13873: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
13877: LD_EXP 14
13881: PPUSH
13882: LD_STRING D5-Har-3
13884: PPUSH
13885: CALL_OW 94
// timeToSupport = 5 5$0 ;
13889: LD_ADDR_EXP 26
13893: PUSH
13894: LD_INT 10500
13896: ST_TO_ADDR
// timerStatus = 2 ;
13897: LD_ADDR_EXP 27
13901: PUSH
13902: LD_INT 2
13904: ST_TO_ADDR
// startTimer = 1 ;
13905: LD_ADDR_EXP 28
13909: PUSH
13910: LD_INT 1
13912: ST_TO_ADDR
// harrAnswer = 3 ;
13913: LD_ADDR_EXP 24
13917: PUSH
13918: LD_INT 3
13920: ST_TO_ADDR
// end ; end ;
13921: GO 13924
13923: POP
// end ;
13924: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
13925: LD_EXP 27
13929: PUSH
13930: LD_INT 2
13932: EQUAL
13933: PUSH
13934: LD_EXP 26
13938: PUSH
13939: LD_INT 0
13941: EQUAL
13942: AND
13943: IFFALSE 14220
13945: GO 13947
13947: DISABLE
// begin timerStatus = 4 ;
13948: LD_ADDR_EXP 27
13952: PUSH
13953: LD_INT 4
13955: ST_TO_ADDR
// if harrAnswer = 1 then
13956: LD_EXP 24
13960: PUSH
13961: LD_INT 1
13963: EQUAL
13964: IFFALSE 14044
// begin PrepareHarrisonSupport ( 3 ) ;
13966: LD_INT 3
13968: PPUSH
13969: CALL 1325 0 1
// wait ( 1 1$0 ) ;
13973: LD_INT 2100
13975: PPUSH
13976: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
13980: LD_EXP 14
13984: PPUSH
13985: LD_STRING D7-Har-1
13987: PPUSH
13988: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
13992: LD_STRING M2
13994: PPUSH
13995: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
13999: LD_ADDR_EXP 25
14003: PUSH
14004: LD_INT 31500
14006: PUSH
14007: LD_INT 10500
14009: PUSH
14010: LD_INT 8400
14012: PUSH
14013: LD_INT 6300
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: LIST
14020: PUSH
14021: LD_OWVAR 67
14025: ARRAY
14026: PLUS
14027: ST_TO_ADDR
// startTimer = 1 ;
14028: LD_ADDR_EXP 28
14032: PUSH
14033: LD_INT 1
14035: ST_TO_ADDR
// timerStatus = 3 ;
14036: LD_ADDR_EXP 27
14040: PUSH
14041: LD_INT 3
14043: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14044: LD_EXP 24
14048: PUSH
14049: LD_INT 2
14051: EQUAL
14052: IFFALSE 14132
// begin PrepareHarrisonSupport ( 4 ) ;
14054: LD_INT 4
14056: PPUSH
14057: CALL 1325 0 1
// wait ( 1 1$0 ) ;
14061: LD_INT 2100
14063: PPUSH
14064: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14068: LD_EXP 14
14072: PPUSH
14073: LD_STRING D7-Har-1
14075: PPUSH
14076: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14080: LD_STRING M2
14082: PPUSH
14083: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14087: LD_ADDR_EXP 25
14091: PUSH
14092: LD_INT 27300
14094: PUSH
14095: LD_INT 8400
14097: PUSH
14098: LD_INT 8400
14100: PUSH
14101: LD_INT 6300
14103: PUSH
14104: EMPTY
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_OWVAR 67
14113: ARRAY
14114: PLUS
14115: ST_TO_ADDR
// startTimer = 1 ;
14116: LD_ADDR_EXP 28
14120: PUSH
14121: LD_INT 1
14123: ST_TO_ADDR
// timerStatus = 3 ;
14124: LD_ADDR_EXP 27
14128: PUSH
14129: LD_INT 3
14131: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14132: LD_EXP 24
14136: PUSH
14137: LD_INT 3
14139: EQUAL
14140: IFFALSE 14220
// begin PrepareHarrisonSupport ( 5 ) ;
14142: LD_INT 5
14144: PPUSH
14145: CALL 1325 0 1
// wait ( 1 1$0 ) ;
14149: LD_INT 2100
14151: PPUSH
14152: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14156: LD_EXP 14
14160: PPUSH
14161: LD_STRING D7-Har-1
14163: PPUSH
14164: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14168: LD_STRING M2
14170: PPUSH
14171: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14175: LD_ADDR_EXP 25
14179: PUSH
14180: LD_INT 21000
14182: PUSH
14183: LD_INT 8400
14185: PUSH
14186: LD_INT 6300
14188: PUSH
14189: LD_INT 4200
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_OWVAR 67
14201: ARRAY
14202: PLUS
14203: ST_TO_ADDR
// startTimer = 1 ;
14204: LD_ADDR_EXP 28
14208: PUSH
14209: LD_INT 1
14211: ST_TO_ADDR
// timerStatus = 3 ;
14212: LD_ADDR_EXP 27
14216: PUSH
14217: LD_INT 3
14219: ST_TO_ADDR
// end ; end ;
14220: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14221: LD_EXP 25
14225: PUSH
14226: LD_INT 8400
14228: LESSEQUAL
14229: PUSH
14230: LD_EXP 27
14234: PUSH
14235: LD_INT 3
14237: EQUAL
14238: AND
14239: IFFALSE 14271
14241: GO 14243
14243: DISABLE
// begin DialogueOn ;
14244: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14248: LD_EXP 14
14252: PPUSH
14253: LD_STRING D7a-Har-1
14255: PPUSH
14256: CALL_OW 94
// DialogueOff ;
14260: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14264: LD_STRING M2a
14266: PPUSH
14267: CALL_OW 337
// end ;
14271: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14272: LD_EXP 25
14276: PUSH
14277: LD_INT 0
14279: LESSEQUAL
14280: PUSH
14281: LD_EXP 27
14285: PUSH
14286: LD_INT 3
14288: EQUAL
14289: AND
14290: IFFALSE 14415
14292: GO 14294
14294: DISABLE
14295: LD_INT 0
14297: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14298: LD_ADDR_VAR 0 1
14302: PUSH
14303: LD_INT 22
14305: PUSH
14306: LD_INT 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PPUSH
14313: CALL_OW 69
14317: PUSH
14318: LD_EXP 1
14322: PUSH
14323: EMPTY
14324: LIST
14325: DIFF
14326: ST_TO_ADDR
// saveDonaldson = 2 ;
14327: LD_ADDR_EXP 22
14331: PUSH
14332: LD_INT 2
14334: ST_TO_ADDR
// DialogueOn ;
14335: CALL_OW 6
// if IsOK ( Donaldson ) then
14339: LD_EXP 13
14343: PPUSH
14344: CALL_OW 302
14348: IFFALSE 14364
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14350: LD_EXP 14
14354: PPUSH
14355: LD_STRING D8-Har-1
14357: PPUSH
14358: CALL_OW 94
// end else
14362: GO 14376
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14364: LD_EXP 14
14368: PPUSH
14369: LD_STRING D8-Har-1a
14371: PPUSH
14372: CALL_OW 94
// end ; DialogueOff ;
14376: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14380: LD_VAR 0 1
14384: PPUSH
14385: LD_INT 4
14387: PPUSH
14388: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14392: LD_VAR 0 1
14396: PPUSH
14397: LD_INT 88
14399: PPUSH
14400: LD_INT 89
14402: PPUSH
14403: CALL_OW 114
// honor = 0 ;
14407: LD_ADDR_EXP 37
14411: PUSH
14412: LD_INT 0
14414: ST_TO_ADDR
// end ; end_of_file
14415: PPOPN 1
14417: END
// every 0 0$1 trigger AIEnable = 1 do
14418: LD_EXP 35
14422: PUSH
14423: LD_INT 1
14425: EQUAL
14426: IFFALSE 14498
14428: GO 14430
14430: DISABLE
// begin enable ;
14431: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
14432: LD_INT 3
14434: PPUSH
14435: LD_INT 21
14437: PPUSH
14438: CALL 4915 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
14442: LD_INT 3
14444: PPUSH
14445: LD_INT 8
14447: PPUSH
14448: LD_INT 7
14450: PPUSH
14451: LD_INT 1
14453: PPUSH
14454: CALL 5156 0 4
// if baseReadyToBuild = 2 then
14458: LD_EXP 18
14462: PUSH
14463: LD_INT 2
14465: EQUAL
14466: IFFALSE 14498
// begin RepairBuilding ( 6 , ruPDepot ) ;
14468: LD_INT 6
14470: PPUSH
14471: LD_EXP 19
14475: PPUSH
14476: CALL 4915 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
14480: LD_INT 6
14482: PPUSH
14483: LD_INT 9
14485: PPUSH
14486: LD_INT 6
14488: PPUSH
14489: LD_EXP 20
14493: PPUSH
14494: CALL 5156 0 4
// end ; end ;
14498: END
// every 0 0$01 do
14499: GO 14501
14501: DISABLE
// begin enable ;
14502: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
14503: LD_INT 3
14505: PPUSH
14506: LD_INT 17
14508: PPUSH
14509: LD_INT 111
14511: PPUSH
14512: LD_INT 87
14514: PPUSH
14515: LD_INT 1
14517: PPUSH
14518: CALL 8024 0 5
// end ;
14522: END
// every 0 0$01 do
14523: GO 14525
14525: DISABLE
// begin enable ;
14526: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
14527: LD_INT 5
14529: PPUSH
14530: LD_INT 17
14532: PPUSH
14533: LD_INT 111
14535: PPUSH
14536: LD_INT 87
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL 8024 0 5
// end ;
14546: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
14547: LD_EXP 35
14551: PUSH
14552: LD_INT 1
14554: EQUAL
14555: IFFALSE 14729
14557: GO 14559
14559: DISABLE
// begin enable ;
14560: ENABLE
// if Difficulty = 1 then
14561: LD_OWVAR 67
14565: PUSH
14566: LD_INT 1
14568: EQUAL
14569: IFFALSE 14616
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
14571: LD_INT 3
14573: PPUSH
14574: LD_INT 24
14576: PPUSH
14577: LD_OWVAR 67
14581: PUSH
14582: LD_INT 1
14584: PLUS
14585: PPUSH
14586: LD_INT 1
14588: PPUSH
14589: LD_INT 42
14591: PUSH
14592: LD_INT 42
14594: PUSH
14595: LD_INT 43
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: PPUSH
14603: LD_INT 1
14605: PPUSH
14606: LD_INT 1
14608: PPUSH
14609: LD_INT 21
14611: PPUSH
14612: CALL 5422 0 8
// if Difficulty = 2 then
14616: LD_OWVAR 67
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: IFFALSE 14674
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] ) ;
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 24
14631: PPUSH
14632: LD_OWVAR 67
14636: PUSH
14637: LD_INT 1
14639: PLUS
14640: PPUSH
14641: LD_INT 1
14643: PPUSH
14644: LD_INT 42
14646: PUSH
14647: LD_INT 43
14649: PUSH
14650: EMPTY
14651: LIST
14652: LIST
14653: PPUSH
14654: LD_INT 1
14656: PPUSH
14657: LD_INT 1
14659: PPUSH
14660: LD_INT 21
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: EMPTY
14667: LIST
14668: LIST
14669: PPUSH
14670: CALL 5422 0 8
// if Difficulty = 3 then
14674: LD_OWVAR 67
14678: PUSH
14679: LD_INT 3
14681: EQUAL
14682: IFFALSE 14729
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
14684: LD_INT 3
14686: PPUSH
14687: LD_INT 24
14689: PPUSH
14690: LD_OWVAR 67
14694: PPUSH
14695: LD_INT 1
14697: PPUSH
14698: LD_INT 43
14700: PUSH
14701: LD_INT 43
14703: PUSH
14704: LD_INT 43
14706: PUSH
14707: LD_INT 44
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PPUSH
14716: LD_INT 1
14718: PPUSH
14719: LD_INT 1
14721: PPUSH
14722: LD_INT 22
14724: PPUSH
14725: CALL 5422 0 8
// end ;
14729: END
// every 0 0$1 do
14730: GO 14732
14732: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
14733: LD_INT 3
14735: PPUSH
14736: LD_INT 1
14738: PPUSH
14739: LD_INT 3
14741: PPUSH
14742: CALL 4830 0 3
14746: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
14747: LD_EXP 18
14751: PUSH
14752: LD_INT 1
14754: EQUAL
14755: IFFALSE 14902
14757: GO 14759
14759: DISABLE
14760: LD_INT 0
14762: PPUSH
14763: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14764: LD_ADDR_VAR 0 2
14768: PUSH
14769: LD_INT 22
14771: PUSH
14772: LD_INT 6
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 21
14781: PUSH
14782: LD_INT 2
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: LD_INT 34
14791: PUSH
14792: LD_INT 51
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: LIST
14803: PPUSH
14804: CALL_OW 69
14808: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
14809: LD_VAR 0 2
14813: PUSH
14814: LD_INT 1
14816: ARRAY
14817: PPUSH
14818: LD_EXP 19
14822: PPUSH
14823: CALL_OW 250
14827: PUSH
14828: LD_INT 5
14830: MINUS
14831: PPUSH
14832: LD_EXP 19
14836: PPUSH
14837: CALL_OW 251
14841: PUSH
14842: LD_INT 5
14844: MINUS
14845: PPUSH
14846: CALL_OW 111
// wait ( 0 0$5 ) ;
14850: LD_INT 175
14852: PPUSH
14853: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
14857: LD_VAR 0 2
14861: PUSH
14862: LD_INT 1
14864: ARRAY
14865: PPUSH
14866: LD_INT 41
14868: PPUSH
14869: LD_INT 52
14871: PPUSH
14872: CALL_OW 177
// wait ( 0 0$40 ) ;
14876: LD_INT 1400
14878: PPUSH
14879: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
14883: LD_VAR 0 2
14887: PUSH
14888: LD_INT 1
14890: ARRAY
14891: PPUSH
14892: LD_INT 41
14894: PPUSH
14895: LD_INT 44
14897: PPUSH
14898: CALL_OW 111
// end ;
14902: PPOPN 2
14904: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
14905: LD_EXP 19
14909: PPUSH
14910: CALL_OW 274
14914: PPUSH
14915: LD_INT 1
14917: PPUSH
14918: CALL_OW 275
14922: PUSH
14923: LD_INT 100
14925: GREATEREQUAL
14926: IFFALSE 15154
14928: GO 14930
14930: DISABLE
14931: LD_INT 0
14933: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
14934: LD_ADDR_VAR 0 1
14938: PUSH
14939: LD_INT 22
14941: PUSH
14942: LD_INT 6
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PUSH
14949: LD_INT 21
14951: PUSH
14952: LD_INT 1
14954: PUSH
14955: EMPTY
14956: LIST
14957: LIST
14958: PUSH
14959: LD_INT 25
14961: PUSH
14962: LD_INT 2
14964: PUSH
14965: EMPTY
14966: LIST
14967: LIST
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: LIST
14973: PPUSH
14974: CALL_OW 69
14978: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
14979: LD_VAR 0 1
14983: PUSH
14984: LD_INT 1
14986: ARRAY
14987: PPUSH
14988: LD_INT 4
14990: PPUSH
14991: LD_INT 39
14993: PPUSH
14994: LD_INT 37
14996: PPUSH
14997: LD_INT 3
14999: PPUSH
15000: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15004: LD_VAR 0 1
15008: PUSH
15009: LD_INT 1
15011: ARRAY
15012: PPUSH
15013: LD_INT 29
15015: PPUSH
15016: LD_INT 42
15018: PPUSH
15019: LD_INT 54
15021: PPUSH
15022: LD_INT 3
15024: PPUSH
15025: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15029: LD_VAR 0 1
15033: PUSH
15034: LD_INT 1
15036: ARRAY
15037: PPUSH
15038: LD_INT 6
15040: PPUSH
15041: LD_INT 38
15043: PPUSH
15044: LD_INT 48
15046: PPUSH
15047: LD_INT 0
15049: PPUSH
15050: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15054: LD_VAR 0 1
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: LD_INT 2
15065: PPUSH
15066: LD_INT 32
15068: PPUSH
15069: LD_INT 38
15071: PPUSH
15072: LD_INT 2
15074: PPUSH
15075: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15079: LD_VAR 0 1
15083: PUSH
15084: LD_INT 1
15086: ARRAY
15087: PPUSH
15088: LD_INT 26
15090: PPUSH
15091: LD_INT 39
15093: PPUSH
15094: LD_INT 55
15096: PPUSH
15097: LD_INT 3
15099: PPUSH
15100: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15104: LD_VAR 0 1
15108: PUSH
15109: LD_INT 1
15111: ARRAY
15112: PPUSH
15113: LD_INT 32
15115: PPUSH
15116: LD_INT 31
15118: PPUSH
15119: LD_INT 31
15121: PPUSH
15122: LD_INT 3
15124: PPUSH
15125: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15129: LD_VAR 0 1
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PPUSH
15138: LD_INT 31
15140: PPUSH
15141: LD_INT 50
15143: PPUSH
15144: LD_INT 51
15146: PPUSH
15147: LD_INT 4
15149: PPUSH
15150: CALL_OW 205
// end ; end_of_file
15154: PPOPN 1
15156: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15157: LD_INT 0
15159: PPUSH
15160: PPUSH
15161: PPUSH
15162: PPUSH
15163: PPUSH
15164: PPUSH
15165: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15166: LD_ADDR_VAR 0 3
15170: PUSH
15171: LD_INT 22
15173: PUSH
15174: LD_INT 6
15176: PUSH
15177: EMPTY
15178: LIST
15179: LIST
15180: PUSH
15181: LD_INT 21
15183: PUSH
15184: LD_INT 1
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: LD_INT 25
15193: PUSH
15194: LD_INT 1
15196: PUSH
15197: EMPTY
15198: LIST
15199: LIST
15200: PUSH
15201: LD_INT 3
15203: PUSH
15204: LD_INT 54
15206: PUSH
15207: EMPTY
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: PPUSH
15220: CALL_OW 69
15224: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15225: LD_ADDR_VAR 0 7
15229: PUSH
15230: LD_INT 22
15232: PUSH
15233: LD_INT 6
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 21
15242: PUSH
15243: LD_INT 1
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 25
15252: PUSH
15253: LD_INT 1
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 54
15262: PUSH
15263: EMPTY
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: PPUSH
15272: CALL_OW 69
15276: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15277: LD_ADDR_VAR 0 4
15281: PUSH
15282: LD_INT 22
15284: PUSH
15285: LD_INT 6
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 1
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 25
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: EMPTY
15313: LIST
15314: LIST
15315: LIST
15316: PPUSH
15317: CALL_OW 69
15321: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15322: LD_ADDR_VAR 0 6
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_INT 6
15332: PUSH
15333: EMPTY
15334: LIST
15335: LIST
15336: PUSH
15337: LD_INT 21
15339: PUSH
15340: LD_INT 1
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: PUSH
15347: LD_INT 25
15349: PUSH
15350: LD_INT 4
15352: PUSH
15353: EMPTY
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: LIST
15361: PPUSH
15362: CALL_OW 69
15366: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15367: LD_ADDR_VAR 0 8
15371: PUSH
15372: LD_INT 22
15374: PUSH
15375: LD_INT 6
15377: PUSH
15378: EMPTY
15379: LIST
15380: LIST
15381: PUSH
15382: LD_INT 21
15384: PUSH
15385: LD_INT 2
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: PUSH
15392: LD_INT 34
15394: PUSH
15395: LD_INT 51
15397: PUSH
15398: EMPTY
15399: LIST
15400: LIST
15401: PUSH
15402: EMPTY
15403: LIST
15404: LIST
15405: LIST
15406: PPUSH
15407: CALL_OW 69
15411: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
15412: LD_VAR 0 1
15416: PPUSH
15417: CALL_OW 255
15421: PUSH
15422: LD_INT 6
15424: EQUAL
15425: PUSH
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 266
15435: PUSH
15436: LD_INT 0
15438: EQUAL
15439: AND
15440: IFFALSE 15460
// begin ruPDepot = building ;
15442: LD_ADDR_EXP 19
15446: PUSH
15447: LD_VAR 0 1
15451: ST_TO_ADDR
// baseReadyToBuild = 1 ;
15452: LD_ADDR_EXP 18
15456: PUSH
15457: LD_INT 1
15459: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 266
15469: PUSH
15470: LD_INT 4
15472: EQUAL
15473: PUSH
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 255
15483: PUSH
15484: LD_INT 6
15486: EQUAL
15487: AND
15488: IFFALSE 15521
// for i in tmpSold do
15490: LD_ADDR_VAR 0 2
15494: PUSH
15495: LD_VAR 0 3
15499: PUSH
15500: FOR_IN
15501: IFFALSE 15519
// ComEnterUnit ( i , building ) ;
15503: LD_VAR 0 2
15507: PPUSH
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL_OW 120
15517: GO 15500
15519: POP
15520: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 266
15530: PUSH
15531: LD_INT 6
15533: EQUAL
15534: PUSH
15535: LD_VAR 0 1
15539: PPUSH
15540: CALL_OW 255
15544: PUSH
15545: LD_INT 6
15547: EQUAL
15548: AND
15549: IFFALSE 15607
// begin for i in tmpSci do
15551: LD_ADDR_VAR 0 2
15555: PUSH
15556: LD_VAR 0 6
15560: PUSH
15561: FOR_IN
15562: IFFALSE 15580
// ComEnterUnit ( i , building ) ;
15564: LD_VAR 0 2
15568: PPUSH
15569: LD_VAR 0 1
15573: PPUSH
15574: CALL_OW 120
15578: GO 15561
15580: POP
15581: POP
// ResAllTechs ( 6 , building , 3 ) ;
15582: LD_INT 6
15584: PPUSH
15585: LD_VAR 0 1
15589: PPUSH
15590: LD_INT 3
15592: PPUSH
15593: CALL 4830 0 3
// ruPLab = building ;
15597: LD_ADDR_EXP 20
15601: PUSH
15602: LD_VAR 0 1
15606: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
15607: LD_VAR 0 1
15611: PPUSH
15612: CALL_OW 266
15616: PUSH
15617: LD_INT 2
15619: EQUAL
15620: PUSH
15621: LD_VAR 0 1
15625: PPUSH
15626: CALL_OW 255
15630: PUSH
15631: LD_INT 6
15633: EQUAL
15634: AND
15635: IFFALSE 15686
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
15637: LD_ADDR_VAR 0 5
15641: PUSH
15642: LD_VAR 0 8
15646: PUSH
15647: LD_INT 1
15649: ARRAY
15650: PPUSH
15651: CALL_OW 313
15655: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15656: LD_VAR 0 5
15660: PPUSH
15661: CALL_OW 121
// wait ( 0 0$1 ) ;
15665: LD_INT 35
15667: PPUSH
15668: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
15672: LD_VAR 0 5
15676: PPUSH
15677: LD_VAR 0 1
15681: PPUSH
15682: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
15686: LD_VAR 0 1
15690: PPUSH
15691: CALL_OW 266
15695: PUSH
15696: LD_INT 32
15698: EQUAL
15699: PUSH
15700: LD_VAR 0 1
15704: PPUSH
15705: CALL_OW 255
15709: PUSH
15710: LD_INT 6
15712: EQUAL
15713: AND
15714: IFFALSE 15766
// begin ComPlaceWeapon ( building , 42 ) ;
15716: LD_VAR 0 1
15720: PPUSH
15721: LD_INT 42
15723: PPUSH
15724: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
15728: LD_VAR 0 7
15732: PUSH
15733: LD_INT 1
15735: ARRAY
15736: PPUSH
15737: CALL_OW 122
// wait ( 0 0$1 ) ;
15741: LD_INT 35
15743: PPUSH
15744: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
15748: LD_VAR 0 7
15752: PUSH
15753: LD_INT 1
15755: ARRAY
15756: PPUSH
15757: LD_VAR 0 1
15761: PPUSH
15762: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
15766: LD_VAR 0 1
15770: PPUSH
15771: CALL_OW 266
15775: PUSH
15776: LD_INT 31
15778: EQUAL
15779: PUSH
15780: LD_VAR 0 1
15784: PPUSH
15785: CALL_OW 255
15789: PUSH
15790: LD_INT 6
15792: EQUAL
15793: AND
15794: IFFALSE 15860
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
15796: LD_VAR 0 7
15800: PUSH
15801: LD_INT 2
15803: ARRAY
15804: PPUSH
15805: CALL_OW 122
// wait ( 0 0$1 ) ;
15809: LD_INT 35
15811: PPUSH
15812: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
15816: LD_VAR 0 7
15820: PUSH
15821: LD_INT 2
15823: ARRAY
15824: PPUSH
15825: LD_VAR 0 1
15829: PPUSH
15830: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
15834: LD_VAR 0 4
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: LD_EXP 19
15847: PPUSH
15848: CALL_OW 120
// baseReadyToBuild = 2 ;
15852: LD_ADDR_EXP 18
15856: PUSH
15857: LD_INT 2
15859: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
15860: LD_VAR 0 1
15864: PPUSH
15865: CALL_OW 266
15869: PUSH
15870: LD_INT 32
15872: EQUAL
15873: PUSH
15874: LD_VAR 0 1
15878: PPUSH
15879: CALL_OW 255
15883: PUSH
15884: LD_INT 1
15886: EQUAL
15887: AND
15888: PUSH
15889: LD_EXP 30
15893: PUSH
15894: LD_INT 0
15896: EQUAL
15897: AND
15898: IFFALSE 16143
// begin bunkerDialog = 1 ;
15900: LD_ADDR_EXP 30
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if IsOK ( Claptopn ) then
15908: LD_EXP 11
15912: PPUSH
15913: CALL_OW 302
15917: IFFALSE 15933
// begin Say ( Claptopn , D11-Eng1-1 ) ;
15919: LD_EXP 11
15923: PPUSH
15924: LD_STRING D11-Eng1-1
15926: PPUSH
15927: CALL_OW 88
// end else
15931: GO 16129
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
15933: LD_INT 22
15935: PUSH
15936: LD_INT 1
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: PUSH
15943: LD_INT 21
15945: PUSH
15946: LD_INT 1
15948: PUSH
15949: EMPTY
15950: LIST
15951: LIST
15952: PUSH
15953: LD_INT 25
15955: PUSH
15956: LD_INT 3
15958: PUSH
15959: EMPTY
15960: LIST
15961: LIST
15962: PUSH
15963: LD_INT 26
15965: PUSH
15966: LD_INT 1
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: PPUSH
15979: CALL_OW 69
15983: PUSH
15984: LD_EXP 1
15988: PUSH
15989: EMPTY
15990: LIST
15991: PUSH
15992: LD_INT 0
15994: GREATER
15995: DIFF
15996: IFFALSE 16070
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
15998: LD_INT 22
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 21
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: LD_INT 25
16020: PUSH
16021: LD_INT 2
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: PUSH
16028: LD_INT 26
16030: PUSH
16031: LD_INT 1
16033: PUSH
16034: EMPTY
16035: LIST
16036: LIST
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: PPUSH
16044: CALL_OW 69
16048: PUSH
16049: LD_EXP 1
16053: PUSH
16054: EMPTY
16055: LIST
16056: DIFF
16057: PPUSH
16058: LD_STRING D11-Eng1-1
16060: PPUSH
16061: LD_STRING D11-Eng1-1
16063: PPUSH
16064: CALL 3570 0 3
// end else
16068: GO 16129
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16070: LD_INT 22
16072: PUSH
16073: LD_INT 1
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 21
16082: PUSH
16083: LD_INT 1
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 26
16092: PUSH
16093: LD_INT 1
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: LIST
16104: PPUSH
16105: CALL_OW 69
16109: PUSH
16110: LD_EXP 1
16114: PUSH
16115: EMPTY
16116: LIST
16117: DIFF
16118: PPUSH
16119: LD_STRING D11-Eng1-1
16121: PPUSH
16122: LD_STRING D11-Eng1-1
16124: PPUSH
16125: CALL 3570 0 3
// end ; end ; if energyVDialog = 0 then
16129: LD_EXP 31
16133: PUSH
16134: LD_INT 0
16136: EQUAL
16137: IFFALSE 16143
// EnergyDialog ;
16139: CALL 3882 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16143: LD_VAR 0 1
16147: PPUSH
16148: CALL_OW 266
16152: PUSH
16153: LD_INT 29
16155: EQUAL
16156: PUSH
16157: LD_VAR 0 1
16161: PPUSH
16162: CALL_OW 255
16166: PUSH
16167: LD_INT 1
16169: EQUAL
16170: AND
16171: IFFALSE 16181
// buildOil = 1 ;
16173: LD_ADDR_EXP 32
16177: PUSH
16178: LD_INT 1
16180: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL_OW 266
16190: PUSH
16191: LD_INT 26
16193: EQUAL
16194: PUSH
16195: LD_VAR 0 1
16199: PPUSH
16200: CALL_OW 255
16204: PUSH
16205: LD_INT 1
16207: EQUAL
16208: AND
16209: IFFALSE 16219
// buildPower = 1 ;
16211: LD_ADDR_EXP 33
16215: PUSH
16216: LD_INT 1
16218: ST_TO_ADDR
// end ;
16219: PPOPN 8
16221: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL_OW 266
16231: PUSH
16232: LD_INT 3
16234: EQUAL
16235: PUSH
16236: LD_VAR 0 1
16240: PPUSH
16241: CALL_OW 255
16245: PUSH
16246: LD_INT 1
16248: EQUAL
16249: AND
16250: PUSH
16251: LD_EXP 29
16255: PUSH
16256: LD_INT 0
16258: EQUAL
16259: AND
16260: IFFALSE 16576
// begin factoryDialog = 1 ;
16262: LD_ADDR_EXP 29
16266: PUSH
16267: LD_INT 1
16269: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16270: LD_INT 22
16272: PUSH
16273: LD_INT 1
16275: PUSH
16276: EMPTY
16277: LIST
16278: LIST
16279: PUSH
16280: LD_INT 21
16282: PUSH
16283: LD_INT 3
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: LD_INT 30
16292: PUSH
16293: LD_INT 3
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 24
16302: PUSH
16303: LD_INT 1000
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: EMPTY
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: PPUSH
16316: CALL_OW 69
16320: PUSH
16321: LD_INT 1
16323: ARRAY
16324: PPUSH
16325: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16329: LD_EXP 1
16333: PPUSH
16334: LD_STRING D9a-JMM-1
16336: PPUSH
16337: CALL_OW 88
// if IsOK ( Campell ) then
16341: LD_EXP 12
16345: PPUSH
16346: CALL_OW 302
16350: IFFALSE 16366
// begin Say ( Campell , D9a-Mech1-1 ) ;
16352: LD_EXP 12
16356: PPUSH
16357: LD_STRING D9a-Mech1-1
16359: PPUSH
16360: CALL_OW 88
// end else
16364: GO 16562
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16366: LD_INT 22
16368: PUSH
16369: LD_INT 1
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: PUSH
16376: LD_INT 21
16378: PUSH
16379: LD_INT 1
16381: PUSH
16382: EMPTY
16383: LIST
16384: LIST
16385: PUSH
16386: LD_INT 25
16388: PUSH
16389: LD_INT 3
16391: PUSH
16392: EMPTY
16393: LIST
16394: LIST
16395: PUSH
16396: LD_INT 26
16398: PUSH
16399: LD_INT 1
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: PUSH
16406: EMPTY
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: PPUSH
16412: CALL_OW 69
16416: PUSH
16417: LD_EXP 1
16421: PUSH
16422: EMPTY
16423: LIST
16424: PUSH
16425: LD_INT 0
16427: GREATER
16428: DIFF
16429: IFFALSE 16503
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16431: LD_INT 22
16433: PUSH
16434: LD_INT 1
16436: PUSH
16437: EMPTY
16438: LIST
16439: LIST
16440: PUSH
16441: LD_INT 21
16443: PUSH
16444: LD_INT 1
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: PUSH
16451: LD_INT 25
16453: PUSH
16454: LD_INT 3
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 26
16463: PUSH
16464: LD_INT 1
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: PPUSH
16477: CALL_OW 69
16481: PUSH
16482: LD_EXP 1
16486: PUSH
16487: EMPTY
16488: LIST
16489: DIFF
16490: PPUSH
16491: LD_STRING D9a-Mech1-1
16493: PPUSH
16494: LD_STRING D9a-Mech1-1
16496: PPUSH
16497: CALL 3570 0 3
// end else
16501: GO 16562
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16503: LD_INT 22
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 21
16515: PUSH
16516: LD_INT 1
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: LD_INT 26
16525: PUSH
16526: LD_INT 1
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: PPUSH
16538: CALL_OW 69
16542: PUSH
16543: LD_EXP 1
16547: PUSH
16548: EMPTY
16549: LIST
16550: DIFF
16551: PPUSH
16552: LD_STRING D9a-Mech1-1
16554: PPUSH
16555: LD_STRING D9a-Mech1-1
16557: PPUSH
16558: CALL 3570 0 3
// end ; end ; if energyVDialog = 0 then
16562: LD_EXP 31
16566: PUSH
16567: LD_INT 0
16569: EQUAL
16570: IFFALSE 16576
// EnergyDialog ;
16572: CALL 3882 0 0
// end ; end ;
16576: PPOPN 1
16578: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
16579: LD_VAR 0 1
16583: PPUSH
16584: CALL_OW 247
16588: PUSH
16589: LD_INT 1
16591: EQUAL
16592: PUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 255
16602: PUSH
16603: LD_INT 1
16605: EQUAL
16606: AND
16607: IFFALSE 16623
// lostCounter = lostCounter + 1 ;
16609: LD_ADDR_EXP 36
16613: PUSH
16614: LD_EXP 36
16618: PUSH
16619: LD_INT 1
16621: PLUS
16622: ST_TO_ADDR
// end ;
16623: PPOPN 1
16625: END
// on Contact ( side1 , side2 ) do var i ;
16626: LD_INT 0
16628: PPUSH
// begin if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
16629: LD_VAR 0 1
16633: PUSH
16634: LD_INT 1
16636: EQUAL
16637: PUSH
16638: LD_VAR 0 2
16642: PUSH
16643: LD_INT 6
16645: EQUAL
16646: AND
16647: PUSH
16648: LD_EXP 39
16652: PUSH
16653: LD_INT 1
16655: EQUAL
16656: AND
16657: IFFALSE 16712
// begin donaldsonCoopAttack = 0 ;
16659: LD_ADDR_EXP 39
16663: PUSH
16664: LD_INT 0
16666: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16667: LD_ADDR_VAR 0 3
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_INT 4
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: PUSH
16682: EMPTY
16683: LIST
16684: PPUSH
16685: CALL_OW 69
16689: PUSH
16690: FOR_IN
16691: IFFALSE 16710
// ComAgressiveMove ( i , 52 , 64 ) ;
16693: LD_VAR 0 3
16697: PPUSH
16698: LD_INT 52
16700: PPUSH
16701: LD_INT 64
16703: PPUSH
16704: CALL_OW 114
16708: GO 16690
16710: POP
16711: POP
// end ; end ;
16712: PPOPN 3
16714: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 264
16724: PUSH
16725: LD_INT 53
16727: EQUAL
16728: IFFALSE 16813
// begin CutTreeInArea ( vehicle , TreesArea ) ;
16730: LD_VAR 0 1
16734: PPUSH
16735: LD_INT 21
16737: PPUSH
16738: CALL 4098 0 2
// uc_side = 3 ;
16742: LD_ADDR_OWVAR 20
16746: PUSH
16747: LD_INT 3
16749: ST_TO_ADDR
// uc_nation = 3 ;
16750: LD_ADDR_OWVAR 21
16754: PUSH
16755: LD_INT 3
16757: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16758: LD_INT 0
16760: PPUSH
16761: LD_EXP 17
16765: PPUSH
16766: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16770: CALL_OW 44
16774: PPUSH
16775: LD_VAR 0 2
16779: PPUSH
16780: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
16784: LD_VAR 0 1
16788: PPUSH
16789: LD_INT 6
16791: PPUSH
16792: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
16796: LD_VAR 0 1
16800: PPUSH
16801: CALL_OW 313
16805: PPUSH
16806: LD_INT 6
16808: PPUSH
16809: CALL_OW 235
// end ; end ; end_of_file
16813: PPOPN 2
16815: END
// every 10 10$0 do
16816: GO 16818
16818: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
16819: LD_INT 5
16821: PPUSH
16822: LD_INT 3
16824: PPUSH
16825: LD_INT 2
16827: PPUSH
16828: LD_INT 5
16830: PPUSH
16831: CALL_OW 12
16835: PUSH
16836: LD_INT 2
16838: PUSH
16839: LD_INT 3
16841: PUSH
16842: LD_INT 3
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: PUSH
16850: LD_OWVAR 67
16854: ARRAY
16855: PLUS
16856: PPUSH
16857: LD_INT 0
16859: PPUSH
16860: LD_INT 0
16862: PPUSH
16863: LD_INT 0
16865: PPUSH
16866: LD_INT 1
16868: PUSH
16869: LD_INT 2
16871: PUSH
16872: LD_INT 3
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PUSH
16880: LD_OWVAR 67
16884: ARRAY
16885: PPUSH
16886: LD_EXP 16
16890: PPUSH
16891: LD_EXP 17
16895: PPUSH
16896: CALL_OW 12
16900: PPUSH
16901: LD_INT 4
16903: PPUSH
16904: LD_INT 14
16906: PPUSH
16907: LD_INT 1
16909: PPUSH
16910: LD_INT 2
16912: PPUSH
16913: CALL 5907 0 12
// end ;
16917: END
// every 15 15$0 do
16918: GO 16920
16920: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
16921: LD_INT 5
16923: PPUSH
16924: LD_INT 3
16926: PPUSH
16927: LD_INT 3
16929: PPUSH
16930: LD_INT 5
16932: PPUSH
16933: CALL_OW 12
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: LD_INT 3
16943: PUSH
16944: LD_INT 3
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: LIST
16951: PUSH
16952: LD_OWVAR 67
16956: ARRAY
16957: PLUS
16958: PPUSH
16959: LD_INT 0
16961: PPUSH
16962: LD_INT 0
16964: PPUSH
16965: LD_INT 0
16967: PPUSH
16968: LD_INT 2
16970: PUSH
16971: LD_INT 2
16973: PUSH
16974: LD_INT 3
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_OWVAR 67
16986: ARRAY
16987: PPUSH
16988: LD_EXP 16
16992: PPUSH
16993: LD_EXP 17
16997: PPUSH
16998: CALL_OW 12
17002: PPUSH
17003: LD_INT 4
17005: PPUSH
17006: LD_INT 14
17008: PPUSH
17009: LD_INT 1
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: CALL 5907 0 12
// end ;
17019: END
// every 25 25$0 do
17020: GO 17022
17022: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17023: LD_INT 5
17025: PPUSH
17026: LD_INT 3
17028: PPUSH
17029: LD_INT 2
17031: PPUSH
17032: LD_INT 3
17034: PPUSH
17035: CALL_OW 12
17039: PUSH
17040: LD_INT 2
17042: PUSH
17043: LD_INT 3
17045: PUSH
17046: LD_INT 3
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: PUSH
17054: LD_OWVAR 67
17058: ARRAY
17059: PLUS
17060: PPUSH
17061: LD_INT 0
17063: PPUSH
17064: LD_INT 0
17066: PPUSH
17067: LD_INT 0
17069: PPUSH
17070: LD_INT 1
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 3
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: LIST
17083: PUSH
17084: LD_OWVAR 67
17088: ARRAY
17089: PPUSH
17090: LD_EXP 16
17094: PPUSH
17095: LD_EXP 17
17099: PPUSH
17100: CALL_OW 12
17104: PPUSH
17105: LD_INT 4
17107: PPUSH
17108: LD_INT 14
17110: PPUSH
17111: LD_INT 1
17113: PPUSH
17114: LD_INT 1
17116: PPUSH
17117: CALL 5907 0 12
// end ;
17121: END
// every 26 26$0 do
17122: GO 17124
17124: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17125: LD_INT 5
17127: PPUSH
17128: LD_INT 3
17130: PPUSH
17131: LD_INT 1
17133: PPUSH
17134: LD_INT 3
17136: PPUSH
17137: CALL_OW 12
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: LD_INT 2
17147: PUSH
17148: LD_INT 2
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: PUSH
17156: LD_OWVAR 67
17160: ARRAY
17161: PLUS
17162: PPUSH
17163: LD_INT 0
17165: PPUSH
17166: LD_INT 0
17168: PPUSH
17169: LD_INT 0
17171: PPUSH
17172: LD_INT 2
17174: PUSH
17175: LD_INT 2
17177: PUSH
17178: LD_INT 3
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: PUSH
17186: LD_OWVAR 67
17190: ARRAY
17191: PPUSH
17192: LD_EXP 16
17196: PPUSH
17197: LD_EXP 17
17201: PPUSH
17202: CALL_OW 12
17206: PPUSH
17207: LD_INT 4
17209: PPUSH
17210: LD_INT 14
17212: PPUSH
17213: LD_INT 1
17215: PPUSH
17216: LD_INT 2
17218: PPUSH
17219: CALL 5907 0 12
// end ;
17223: END
// every 25 25$0 do
17224: GO 17226
17226: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
17227: LD_INT 4
17229: PPUSH
17230: LD_INT 5
17232: PPUSH
17233: LD_INT 3
17235: PUSH
17236: LD_INT 4
17238: PUSH
17239: LD_INT 5
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: LIST
17246: PUSH
17247: LD_OWVAR 67
17251: ARRAY
17252: PPUSH
17253: LD_EXP 16
17257: PPUSH
17258: LD_EXP 17
17262: PPUSH
17263: CALL_OW 12
17267: PPUSH
17268: LD_INT 3
17270: PPUSH
17271: LD_INT 1
17273: PPUSH
17274: LD_INT 1
17276: PPUSH
17277: LD_INT 42
17279: PUSH
17280: LD_INT 42
17282: PUSH
17283: LD_INT 43
17285: PUSH
17286: EMPTY
17287: LIST
17288: LIST
17289: LIST
17290: PUSH
17291: LD_INT 42
17293: PUSH
17294: LD_INT 43
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: PUSH
17301: LD_INT 43
17303: PUSH
17304: LD_INT 43
17306: PUSH
17307: LD_INT 43
17309: PUSH
17310: LD_INT 44
17312: PUSH
17313: EMPTY
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: LD_OWVAR 67
17328: ARRAY
17329: PPUSH
17330: EMPTY
17331: PPUSH
17332: EMPTY
17333: PPUSH
17334: LD_INT 1
17336: PPUSH
17337: CALL 8815 0 11
// end ; end_of_file
17341: END
// every 0 0$1 trigger startTimer = 1 do
17342: LD_EXP 28
17346: PUSH
17347: LD_INT 1
17349: EQUAL
17350: IFFALSE 17480
17352: GO 17354
17354: DISABLE
// begin enable ;
17355: ENABLE
// if timerStatus = 1 then
17356: LD_EXP 27
17360: PUSH
17361: LD_INT 1
17363: EQUAL
17364: IFFALSE 17397
// begin timeToSupport = timeToSupport - 0 0$01 ;
17366: LD_ADDR_EXP 26
17370: PUSH
17371: LD_EXP 26
17375: PUSH
17376: LD_INT 35
17378: MINUS
17379: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17380: LD_ADDR_OWVAR 47
17384: PUSH
17385: LD_STRING #Am04-1
17387: PUSH
17388: LD_EXP 26
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: ST_TO_ADDR
// end ; if timerStatus = 2 then
17397: LD_EXP 27
17401: PUSH
17402: LD_INT 2
17404: EQUAL
17405: IFFALSE 17438
// begin timeToSupport = timeToSupport - 0 0$01 ;
17407: LD_ADDR_EXP 26
17411: PUSH
17412: LD_EXP 26
17416: PUSH
17417: LD_INT 35
17419: MINUS
17420: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17421: LD_ADDR_OWVAR 47
17425: PUSH
17426: LD_STRING #Am04-2
17428: PUSH
17429: LD_EXP 26
17433: PUSH
17434: EMPTY
17435: LIST
17436: LIST
17437: ST_TO_ADDR
// end ; if timerStatus = 3 then
17438: LD_EXP 27
17442: PUSH
17443: LD_INT 3
17445: EQUAL
17446: IFFALSE 17462
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17448: LD_ADDR_EXP 25
17452: PUSH
17453: LD_EXP 25
17457: PUSH
17458: LD_INT 35
17460: MINUS
17461: ST_TO_ADDR
// end ; if timerStatus = 4 then
17462: LD_EXP 27
17466: PUSH
17467: LD_INT 4
17469: EQUAL
17470: IFFALSE 17480
// begin display_strings =  ;
17472: LD_ADDR_OWVAR 47
17476: PUSH
17477: LD_STRING 
17479: ST_TO_ADDR
// end ; end ; end_of_file
17480: END
// every 0 0$1 trigger IsDead ( JMM ) do
17481: LD_EXP 1
17485: PPUSH
17486: CALL_OW 301
17490: IFFALSE 17502
17492: GO 17494
17494: DISABLE
// YouLost ( JMM ) ;
17495: LD_STRING JMM
17497: PPUSH
17498: CALL_OW 104
17502: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
17503: LD_INT 4
17505: PPUSH
17506: CALL_OW 301
17510: IFFALSE 17522
17512: GO 17514
17514: DISABLE
// YouLost ( Base ) ; end_of_file
17515: LD_STRING Base
17517: PPUSH
17518: CALL_OW 104
17522: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
17523: LD_EXP 15
17527: PPUSH
17528: CALL_OW 301
17532: IFFALSE 17914
17534: GO 17536
17536: DISABLE
17537: LD_INT 0
17539: PPUSH
// begin AIEnable = 0 ;
17540: LD_ADDR_EXP 35
17544: PUSH
17545: LD_INT 0
17547: ST_TO_ADDR
// escapeAvalaible = 1 ;
17548: LD_ADDR_EXP 38
17552: PUSH
17553: LD_INT 1
17555: ST_TO_ADDR
// InGameOn ;
17556: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17560: LD_INT 3
17562: PPUSH
17563: LD_INT 1
17565: PPUSH
17566: LD_INT 1
17568: PPUSH
17569: LD_INT 0
17571: PPUSH
17572: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17576: LD_INT 6
17578: PPUSH
17579: LD_INT 1
17581: PPUSH
17582: LD_INT 1
17584: PPUSH
17585: LD_INT 0
17587: PPUSH
17588: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17592: LD_INT 5
17594: PPUSH
17595: LD_INT 1
17597: PPUSH
17598: LD_INT 1
17600: PPUSH
17601: LD_INT 0
17603: PPUSH
17604: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17608: LD_INT 3
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17618: LD_INT 97
17620: PPUSH
17621: LD_INT 91
17623: PPUSH
17624: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17628: LD_INT 22
17630: PUSH
17631: LD_INT 3
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PUSH
17638: LD_INT 21
17640: PUSH
17641: LD_INT 1
17643: PUSH
17644: EMPTY
17645: LIST
17646: LIST
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PPUSH
17652: CALL_OW 69
17656: PPUSH
17657: CALL_OW 121
// wait ( 0 0$01 ) ;
17661: LD_INT 35
17663: PPUSH
17664: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17668: LD_INT 22
17670: PUSH
17671: LD_INT 3
17673: PUSH
17674: EMPTY
17675: LIST
17676: LIST
17677: PUSH
17678: LD_INT 21
17680: PUSH
17681: LD_INT 1
17683: PUSH
17684: EMPTY
17685: LIST
17686: LIST
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: PPUSH
17692: CALL_OW 69
17696: PPUSH
17697: LD_INT 124
17699: PPUSH
17700: LD_INT 98
17702: PPUSH
17703: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17707: LD_INT 22
17709: PUSH
17710: LD_INT 5
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: EMPTY
17728: LIST
17729: LIST
17730: PPUSH
17731: CALL_OW 69
17735: PPUSH
17736: CALL_OW 121
// wait ( 0 0$01 ) ;
17740: LD_INT 35
17742: PPUSH
17743: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17747: LD_INT 22
17749: PUSH
17750: LD_INT 5
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PUSH
17757: LD_INT 21
17759: PUSH
17760: LD_INT 1
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: PPUSH
17771: CALL_OW 69
17775: PPUSH
17776: LD_INT 124
17778: PPUSH
17779: LD_INT 98
17781: PPUSH
17782: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
17786: LD_INT 22
17788: PUSH
17789: LD_INT 6
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: LD_INT 21
17798: PUSH
17799: LD_INT 1
17801: PUSH
17802: EMPTY
17803: LIST
17804: LIST
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PPUSH
17810: CALL_OW 69
17814: PPUSH
17815: CALL_OW 121
// wait ( 0 0$01 ) ;
17819: LD_INT 35
17821: PPUSH
17822: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17826: LD_INT 22
17828: PUSH
17829: LD_INT 6
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: PUSH
17836: LD_INT 21
17838: PUSH
17839: LD_INT 1
17841: PUSH
17842: EMPTY
17843: LIST
17844: LIST
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PPUSH
17850: CALL_OW 69
17854: PPUSH
17855: LD_INT 124
17857: PPUSH
17858: LD_INT 98
17860: PPUSH
17861: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17865: LD_INT 22
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: LD_INT 21
17877: PUSH
17878: LD_INT 1
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: PPUSH
17889: CALL_OW 69
17893: PPUSH
17894: LD_INT 124
17896: PPUSH
17897: LD_INT 98
17899: PPUSH
17900: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
17904: LD_INT 124
17906: PPUSH
17907: LD_INT 98
17909: PPUSH
17910: CALL_OW 84
// end ;
17914: PPOPN 1
17916: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
17917: LD_INT 23
17919: PUSH
17920: LD_INT 3
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: LD_INT 21
17929: PUSH
17930: LD_INT 1
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: PUSH
17937: LD_INT 24
17939: PUSH
17940: LD_INT 250
17942: PUSH
17943: EMPTY
17944: LIST
17945: LIST
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: PPUSH
17952: CALL_OW 69
17956: PUSH
17957: LD_INT 0
17959: EQUAL
17960: IFFALSE 17969
17962: GO 17964
17964: DISABLE
// FinishMission ;
17965: CALL 18140 0 0
17969: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
17970: LD_EXP 38
17974: PUSH
17975: LD_INT 1
17977: EQUAL
17978: IFFALSE 18137
17980: GO 17982
17982: DISABLE
17983: LD_INT 0
17985: PPUSH
// begin enable ;
17986: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
17987: LD_ADDR_VAR 0 1
17991: PUSH
17992: LD_INT 22
17994: PUSH
17995: LD_INT 3
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: PUSH
18007: FOR_IN
18008: IFFALSE 18035
// if IsInArea ( i , RussianEscape ) then
18010: LD_VAR 0 1
18014: PPUSH
18015: LD_INT 5
18017: PPUSH
18018: CALL_OW 308
18022: IFFALSE 18033
// RemoveUnit ( i ) ;
18024: LD_VAR 0 1
18028: PPUSH
18029: CALL_OW 64
18033: GO 18007
18035: POP
18036: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
18037: LD_ADDR_VAR 0 1
18041: PUSH
18042: LD_INT 22
18044: PUSH
18045: LD_INT 5
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: PPUSH
18052: CALL_OW 69
18056: PUSH
18057: FOR_IN
18058: IFFALSE 18085
// if IsInArea ( i , RussianEscape ) then
18060: LD_VAR 0 1
18064: PPUSH
18065: LD_INT 5
18067: PPUSH
18068: CALL_OW 308
18072: IFFALSE 18083
// RemoveUnit ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 64
18083: GO 18057
18085: POP
18086: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18087: LD_ADDR_VAR 0 1
18091: PUSH
18092: LD_INT 22
18094: PUSH
18095: LD_INT 6
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: PUSH
18107: FOR_IN
18108: IFFALSE 18135
// if IsInArea ( i , RussianEscape ) then
18110: LD_VAR 0 1
18114: PPUSH
18115: LD_INT 5
18117: PPUSH
18118: CALL_OW 308
18122: IFFALSE 18133
// RemoveUnit ( i ) ;
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 64
18133: GO 18107
18135: POP
18136: POP
// end ;
18137: PPOPN 1
18139: END
// export function FinishMission ; var tmp ; begin
18140: LD_INT 0
18142: PPUSH
18143: PPUSH
// if buildOil = 1 and buildPower = 1 then
18144: LD_EXP 32
18148: PUSH
18149: LD_INT 1
18151: EQUAL
18152: PUSH
18153: LD_EXP 33
18157: PUSH
18158: LD_INT 1
18160: EQUAL
18161: AND
18162: IFFALSE 18176
// begin AddMedal ( oil , 1 ) ;
18164: LD_STRING oil
18166: PPUSH
18167: LD_INT 1
18169: PPUSH
18170: CALL_OW 101
// end else
18174: GO 18269
// begin if buildOil = 1 and buildPower = 0 then
18176: LD_EXP 32
18180: PUSH
18181: LD_INT 1
18183: EQUAL
18184: PUSH
18185: LD_EXP 33
18189: PUSH
18190: LD_INT 0
18192: EQUAL
18193: AND
18194: IFFALSE 18207
// AddMedal ( oil , - 1 ) ;
18196: LD_STRING oil
18198: PPUSH
18199: LD_INT 1
18201: NEG
18202: PPUSH
18203: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18207: LD_EXP 32
18211: PUSH
18212: LD_INT 0
18214: EQUAL
18215: PUSH
18216: LD_EXP 33
18220: PUSH
18221: LD_INT 1
18223: EQUAL
18224: AND
18225: IFFALSE 18238
// AddMedal ( oil , - 2 ) ;
18227: LD_STRING oil
18229: PPUSH
18230: LD_INT 2
18232: NEG
18233: PPUSH
18234: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18238: LD_EXP 32
18242: PUSH
18243: LD_INT 0
18245: EQUAL
18246: PUSH
18247: LD_EXP 33
18251: PUSH
18252: LD_INT 0
18254: EQUAL
18255: AND
18256: IFFALSE 18269
// AddMedal ( oil , - 3 ) ;
18258: LD_STRING oil
18260: PPUSH
18261: LD_INT 3
18263: NEG
18264: PPUSH
18265: CALL_OW 101
// end ; if lostCounter < 3 then
18269: LD_EXP 36
18273: PUSH
18274: LD_INT 3
18276: LESS
18277: IFFALSE 18291
// begin AddMedal ( deaths , 1 ) ;
18279: LD_STRING deaths
18281: PPUSH
18282: LD_INT 1
18284: PPUSH
18285: CALL_OW 101
// end else
18289: GO 18302
// begin AddMedal ( deaths , - 1 ) ;
18291: LD_STRING deaths
18293: PPUSH
18294: LD_INT 1
18296: NEG
18297: PPUSH
18298: CALL_OW 101
// end ; if honor = 1 then
18302: LD_EXP 37
18306: PUSH
18307: LD_INT 1
18309: EQUAL
18310: IFFALSE 18324
// begin AddMedal ( honour , 1 ) ;
18312: LD_STRING honour
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// end else
18322: GO 18335
// begin AddMedal ( honour , - 1 ) ;
18324: LD_STRING honour
18326: PPUSH
18327: LD_INT 1
18329: NEG
18330: PPUSH
18331: CALL_OW 101
// end ; GiveMedals ( Main ) ;
18335: LD_STRING Main
18337: PPUSH
18338: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18342: LD_INT 22
18344: PUSH
18345: LD_INT 1
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: LD_INT 23
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 21
18364: PUSH
18365: LD_INT 1
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: EMPTY
18373: LIST
18374: LIST
18375: LIST
18376: PPUSH
18377: CALL_OW 69
18381: PPUSH
18382: CALL_OW 43
// SaveCharacters ( JMM , JMM ) ;
18386: LD_EXP 1
18390: PPUSH
18391: LD_STRING JMM
18393: PPUSH
18394: CALL_OW 38
// if IsOK ( Bobby ) then
18398: LD_EXP 2
18402: PPUSH
18403: CALL_OW 302
18407: IFFALSE 18421
// SaveCharacters ( Bobby , Bobby ) ;
18409: LD_EXP 2
18413: PPUSH
18414: LD_STRING Bobby
18416: PPUSH
18417: CALL_OW 38
// if IsOK ( Cyrus ) then
18421: LD_EXP 3
18425: PPUSH
18426: CALL_OW 302
18430: IFFALSE 18444
// SaveCharacters ( Cyrus , Cyrus ) ;
18432: LD_EXP 3
18436: PPUSH
18437: LD_STRING Cyrus
18439: PPUSH
18440: CALL_OW 38
// if IsOK ( Lisa ) then
18444: LD_EXP 4
18448: PPUSH
18449: CALL_OW 302
18453: IFFALSE 18467
// SaveCharacters ( Lisa , Lisa ) ;
18455: LD_EXP 4
18459: PPUSH
18460: LD_STRING Lisa
18462: PPUSH
18463: CALL_OW 38
// if IsOK ( Brown ) then
18467: LD_EXP 7
18471: PPUSH
18472: CALL_OW 302
18476: IFFALSE 18490
// SaveCharacters ( Brown , Brown ) ;
18478: LD_EXP 7
18482: PPUSH
18483: LD_STRING Brown
18485: PPUSH
18486: CALL_OW 38
// if IsOK ( Donaldson ) then
18490: LD_EXP 13
18494: PPUSH
18495: CALL_OW 302
18499: IFFALSE 18513
// SaveCharacters ( Donaldson , Donaldson ) ;
18501: LD_EXP 13
18505: PPUSH
18506: LD_STRING Donaldson
18508: PPUSH
18509: CALL_OW 38
// if IsOK ( Frank ) then
18513: LD_EXP 5
18517: PPUSH
18518: CALL_OW 302
18522: IFFALSE 18536
// SaveCharacters ( Frank , Frank ) ;
18524: LD_EXP 5
18528: PPUSH
18529: LD_STRING Frank
18531: PPUSH
18532: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
18536: LD_INT 50
18538: PUSH
18539: EMPTY
18540: LIST
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 1
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 21
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: PPUSH
18567: CALL_OW 69
18571: PUSH
18572: LD_EXP 1
18576: PUSH
18577: LD_EXP 2
18581: PUSH
18582: LD_EXP 3
18586: PUSH
18587: LD_EXP 4
18591: PUSH
18592: LD_EXP 7
18596: PUSH
18597: LD_EXP 13
18601: PUSH
18602: LD_EXP 5
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: DIFF
18616: PPUSH
18617: LD_STRING 04_other_survivors
18619: PPUSH
18620: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
18624: LD_INT 22
18626: PPUSH
18627: CALL 18640 0 1
// YouWin ;
18631: CALL_OW 103
// end ;
18635: LD_VAR 0 1
18639: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
18640: LD_INT 0
18642: PPUSH
18643: PPUSH
18644: PPUSH
18645: PPUSH
// gammaBase = [ ] ;
18646: LD_ADDR_VAR 0 4
18650: PUSH
18651: EMPTY
18652: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
18653: LD_ADDR_VAR 0 5
18657: PUSH
18658: LD_VAR 0 1
18662: PPUSH
18663: LD_INT 22
18665: PUSH
18666: LD_INT 1
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 21
18675: PUSH
18676: LD_INT 3
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 50
18685: PUSH
18686: EMPTY
18687: LIST
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: LIST
18693: PPUSH
18694: CALL_OW 70
18698: ST_TO_ADDR
// for i in buildings do
18699: LD_ADDR_VAR 0 3
18703: PUSH
18704: LD_VAR 0 5
18708: PUSH
18709: FOR_IN
18710: IFFALSE 19047
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
18712: LD_VAR 0 3
18716: PPUSH
18717: CALL_OW 266
18721: PUSH
18722: LD_INT 6
18724: PUSH
18725: LD_INT 7
18727: PUSH
18728: LD_INT 8
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: LIST
18735: IN
18736: IFFALSE 18850
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
18738: LD_ADDR_VAR 0 4
18742: PUSH
18743: LD_VAR 0 4
18747: PUSH
18748: LD_VAR 0 3
18752: PPUSH
18753: CALL_OW 266
18757: PUSH
18758: LD_VAR 0 3
18762: PPUSH
18763: CALL_OW 250
18767: PUSH
18768: LD_VAR 0 3
18772: PPUSH
18773: CALL_OW 251
18777: PUSH
18778: LD_VAR 0 3
18782: PPUSH
18783: CALL_OW 254
18787: PUSH
18788: LD_VAR 0 3
18792: PPUSH
18793: CALL_OW 267
18797: PUSH
18798: LD_VAR 0 3
18802: PPUSH
18803: CALL_OW 248
18807: PUSH
18808: LD_VAR 0 3
18812: PPUSH
18813: LD_INT 1
18815: PPUSH
18816: CALL_OW 268
18820: PUSH
18821: LD_VAR 0 3
18825: PPUSH
18826: LD_INT 2
18828: PPUSH
18829: CALL_OW 268
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: ADD
18847: ST_TO_ADDR
18848: GO 19045
// if GetBType ( i ) in [ b_bunker ] then
18850: LD_VAR 0 3
18854: PPUSH
18855: CALL_OW 266
18859: PUSH
18860: LD_INT 32
18862: PUSH
18863: EMPTY
18864: LIST
18865: IN
18866: IFFALSE 18963
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
18868: LD_ADDR_VAR 0 4
18872: PUSH
18873: LD_VAR 0 4
18877: PUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: CALL_OW 266
18887: PUSH
18888: LD_VAR 0 3
18892: PPUSH
18893: CALL_OW 250
18897: PUSH
18898: LD_VAR 0 3
18902: PPUSH
18903: CALL_OW 251
18907: PUSH
18908: LD_VAR 0 3
18912: PPUSH
18913: CALL_OW 254
18917: PUSH
18918: LD_VAR 0 3
18922: PPUSH
18923: CALL_OW 267
18927: PUSH
18928: LD_VAR 0 3
18932: PPUSH
18933: CALL_OW 248
18937: PUSH
18938: LD_VAR 0 3
18942: PPUSH
18943: CALL_OW 269
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: PUSH
18957: EMPTY
18958: LIST
18959: ADD
18960: ST_TO_ADDR
18961: GO 19045
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
18963: LD_ADDR_VAR 0 4
18967: PUSH
18968: LD_VAR 0 4
18972: PUSH
18973: LD_VAR 0 3
18977: PPUSH
18978: CALL_OW 266
18982: PUSH
18983: LD_VAR 0 3
18987: PPUSH
18988: CALL_OW 250
18992: PUSH
18993: LD_VAR 0 3
18997: PPUSH
18998: CALL_OW 251
19002: PUSH
19003: LD_VAR 0 3
19007: PPUSH
19008: CALL_OW 254
19012: PUSH
19013: LD_VAR 0 3
19017: PPUSH
19018: CALL_OW 267
19022: PUSH
19023: LD_VAR 0 3
19027: PPUSH
19028: CALL_OW 248
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: ADD
19044: ST_TO_ADDR
// end ;
19045: GO 18709
19047: POP
19048: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19049: LD_VAR 0 4
19053: PPUSH
19054: LD_STRING GammaBase
19056: PPUSH
19057: CALL_OW 39
// end ; end_of_file
19061: LD_VAR 0 2
19065: RET
// every 1 1$15 do
19066: GO 19068
19068: DISABLE
// begin if supply <= 13 and supply > 7 then
19069: LD_EXP 34
19073: PUSH
19074: LD_INT 13
19076: LESSEQUAL
19077: PUSH
19078: LD_EXP 34
19082: PUSH
19083: LD_INT 7
19085: GREATER
19086: AND
19087: IFFALSE 19110
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19089: LD_INT 3
19091: PPUSH
19092: LD_INT 5
19094: PPUSH
19095: CALL_OW 12
19099: PPUSH
19100: LD_INT 18
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: CALL_OW 55
// if supply <= 7 and supply > 4 then
19110: LD_EXP 34
19114: PUSH
19115: LD_INT 7
19117: LESSEQUAL
19118: PUSH
19119: LD_EXP 34
19123: PUSH
19124: LD_INT 4
19126: GREATER
19127: AND
19128: IFFALSE 19151
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19130: LD_INT 3
19132: PPUSH
19133: LD_INT 5
19135: PPUSH
19136: CALL_OW 12
19140: PPUSH
19141: LD_INT 19
19143: PPUSH
19144: LD_INT 1
19146: PPUSH
19147: CALL_OW 55
// if supply <= 4 and supply > 0 then
19151: LD_EXP 34
19155: PUSH
19156: LD_INT 4
19158: LESSEQUAL
19159: PUSH
19160: LD_EXP 34
19164: PUSH
19165: LD_INT 0
19167: GREATER
19168: AND
19169: IFFALSE 19192
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19171: LD_INT 3
19173: PPUSH
19174: LD_INT 5
19176: PPUSH
19177: CALL_OW 12
19181: PPUSH
19182: LD_INT 20
19184: PPUSH
19185: LD_INT 1
19187: PPUSH
19188: CALL_OW 55
// if supply > 0 then
19192: LD_EXP 34
19196: PUSH
19197: LD_INT 0
19199: GREATER
19200: IFFALSE 19217
// begin supply = supply - 1 ;
19202: LD_ADDR_EXP 34
19206: PUSH
19207: LD_EXP 34
19211: PUSH
19212: LD_INT 1
19214: MINUS
19215: ST_TO_ADDR
// enable ;
19216: ENABLE
// end ; end ;
19217: END
