// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4192 0 0
// PrepareRussianBase ;
 241: CALL 2505 0 0
// PrepareRussianCommander ;
 245: CALL 2456 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3727 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3727 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3727 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3727 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3727 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3727 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3727 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3727 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3727 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3727 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3727 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 706
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// for i = 1 to tmp do
 660: LD_ADDR_VAR 0 2
 664: PUSH
 665: DOUBLE
 666: LD_INT 1
 668: DEC
 669: ST_TO_ADDR
 670: LD_VAR 0 3
 674: PUSH
 675: FOR_TO
 676: IFFALSE 704
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 678: LD_ADDR_EXP 6
 682: PUSH
 683: LD_VAR 0 3
 687: PUSH
 688: LD_INT 1
 690: PPUSH
 691: LD_VAR 0 3
 695: PPUSH
 696: CALL_OW 12
 700: ARRAY
 701: ST_TO_ADDR
 702: GO 675
 704: POP
 705: POP
// end ; uc_side = 4 ;
 706: LD_ADDR_OWVAR 20
 710: PUSH
 711: LD_INT 4
 713: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 714: LD_ADDR_EXP 13
 718: PUSH
 719: LD_STRING Donaldson
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL 3727 0 2
 729: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 730: LD_ADDR_EXP 5
 734: PUSH
 735: LD_STRING Frank
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: CALL 3727 0 2
 745: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 746: LD_EXP 1
 750: PPUSH
 751: LD_INT 32
 753: PPUSH
 754: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 758: LD_EXP 7
 762: PPUSH
 763: LD_INT 1
 765: PPUSH
 766: LD_INT 0
 768: PPUSH
 769: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 773: LD_EXP 7
 777: PPUSH
 778: LD_INT 32
 780: PPUSH
 781: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 785: LD_EXP 8
 789: PPUSH
 790: LD_INT 2
 792: PPUSH
 793: LD_INT 0
 795: PPUSH
 796: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 800: LD_EXP 9
 804: PPUSH
 805: LD_INT 2
 807: PPUSH
 808: LD_INT 0
 810: PPUSH
 811: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 815: LD_EXP 12
 819: PPUSH
 820: LD_INT 2
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 830: LD_EXP 10
 834: PPUSH
 835: LD_INT 2
 837: PPUSH
 838: LD_INT 0
 840: PPUSH
 841: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 845: LD_EXP 11
 849: PPUSH
 850: LD_INT 2
 852: PPUSH
 853: LD_INT 0
 855: PPUSH
 856: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 860: LD_EXP 4
 864: PPUSH
 865: LD_INT 2
 867: PPUSH
 868: LD_INT 0
 870: PPUSH
 871: CALL_OW 49
// if Lisa = false then
 875: LD_EXP 4
 879: PUSH
 880: LD_INT 0
 882: EQUAL
 883: IFFALSE 900
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 885: LD_EXP 2
 889: PPUSH
 890: LD_INT 2
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL_OW 49
// if Lisa = false and Bobby = false then
 900: LD_EXP 4
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: PUSH
 909: LD_EXP 2
 913: PUSH
 914: LD_INT 0
 916: EQUAL
 917: AND
 918: IFFALSE 935
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 920: LD_EXP 3
 924: PPUSH
 925: LD_INT 2
 927: PPUSH
 928: LD_INT 0
 930: PPUSH
 931: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 935: LD_EXP 4
 939: PUSH
 940: LD_INT 0
 942: EQUAL
 943: PUSH
 944: LD_EXP 2
 948: PUSH
 949: LD_INT 0
 951: EQUAL
 952: AND
 953: PUSH
 954: LD_EXP 3
 958: PUSH
 959: LD_INT 0
 961: EQUAL
 962: AND
 963: IFFALSE 980
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 965: LD_EXP 6
 969: PPUSH
 970: LD_INT 2
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: CALL_OW 49
// end ;
 980: LD_VAR 0 1
 984: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 985: LD_INT 0
 987: PPUSH
 988: PPUSH
 989: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 990: LD_EXP 13
 994: PPUSH
 995: LD_INT 10
 997: PPUSH
 998: LD_INT 0
1000: PPUSH
1001: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1005: LD_EXP 5
1009: PPUSH
1010: LD_INT 10
1012: PPUSH
1013: LD_INT 0
1015: PPUSH
1016: CALL_OW 49
// uc_nation = 1 ;
1020: LD_ADDR_OWVAR 21
1024: PUSH
1025: LD_INT 1
1027: ST_TO_ADDR
// uc_side = 4 ;
1028: LD_ADDR_OWVAR 20
1032: PUSH
1033: LD_INT 4
1035: ST_TO_ADDR
// hc_class := 3 ;
1036: LD_ADDR_OWVAR 28
1040: PUSH
1041: LD_INT 3
1043: ST_TO_ADDR
// hc_sex := sex_male ;
1044: LD_ADDR_OWVAR 27
1048: PUSH
1049: LD_INT 1
1051: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1052: LD_ADDR_OWVAR 33
1056: PUSH
1057: LD_STRING SecondCharsGal
1059: ST_TO_ADDR
// hc_face_number := 53 ;
1060: LD_ADDR_OWVAR 34
1064: PUSH
1065: LD_INT 53
1067: ST_TO_ADDR
// hc_name := Freddie Warner ;
1068: LD_ADDR_OWVAR 26
1072: PUSH
1073: LD_STRING Freddie Warner
1075: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1076: LD_ADDR_OWVAR 29
1080: PUSH
1081: LD_INT 8
1083: PUSH
1084: LD_INT 11
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1091: LD_ADDR_OWVAR 30
1095: PUSH
1096: LD_INT 0
1098: PUSH
1099: LD_INT 0
1101: PUSH
1102: LD_INT 1
1104: PUSH
1105: LD_INT 0
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: LIST
1113: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1114: LD_ADDR_OWVAR 31
1118: PUSH
1119: LD_INT 1
1121: PUSH
1122: LD_INT 0
1124: PUSH
1125: LD_INT 3
1127: PUSH
1128: LD_INT 0
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: LIST
1135: LIST
1136: ST_TO_ADDR
// un = CreateHuman ;
1137: LD_ADDR_VAR 0 3
1141: PUSH
1142: CALL_OW 44
1146: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1147: LD_VAR 0 3
1151: PPUSH
1152: LD_INT 10
1154: PPUSH
1155: LD_INT 0
1157: PPUSH
1158: CALL_OW 49
// hc_class := 1 ;
1162: LD_ADDR_OWVAR 28
1166: PUSH
1167: LD_INT 1
1169: ST_TO_ADDR
// hc_sex := sex_male ;
1170: LD_ADDR_OWVAR 27
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1178: LD_ADDR_OWVAR 33
1182: PUSH
1183: LD_STRING SecondCharsGal
1185: ST_TO_ADDR
// hc_face_number := 56 ;
1186: LD_ADDR_OWVAR 34
1190: PUSH
1191: LD_INT 56
1193: ST_TO_ADDR
// hc_name := Mel Brennan ;
1194: LD_ADDR_OWVAR 26
1198: PUSH
1199: LD_STRING Mel Brennan
1201: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1202: LD_ADDR_OWVAR 29
1206: PUSH
1207: LD_INT 12
1209: PUSH
1210: LD_INT 11
1212: PUSH
1213: EMPTY
1214: LIST
1215: LIST
1216: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1217: LD_ADDR_OWVAR 30
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: LD_INT 1
1227: PUSH
1228: LD_INT 0
1230: PUSH
1231: LD_INT 0
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: LIST
1238: LIST
1239: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1240: LD_ADDR_OWVAR 31
1244: PUSH
1245: LD_INT 2
1247: PUSH
1248: LD_INT 1
1250: PUSH
1251: LD_INT 1
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// un = CreateHuman ;
1263: LD_ADDR_VAR 0 3
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1273: LD_VAR 0 3
1277: PPUSH
1278: LD_INT 10
1280: PPUSH
1281: LD_INT 0
1283: PPUSH
1284: CALL_OW 49
// hc_class := 1 ;
1288: LD_ADDR_OWVAR 28
1292: PUSH
1293: LD_INT 1
1295: ST_TO_ADDR
// hc_sex := sex_male ;
1296: LD_ADDR_OWVAR 27
1300: PUSH
1301: LD_INT 1
1303: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1304: LD_ADDR_OWVAR 33
1308: PUSH
1309: LD_STRING AmGalRemake
1311: ST_TO_ADDR
// hc_face_number := 5 ;
1312: LD_ADDR_OWVAR 34
1316: PUSH
1317: LD_INT 5
1319: ST_TO_ADDR
// hc_name := Bob Joplin ;
1320: LD_ADDR_OWVAR 26
1324: PUSH
1325: LD_STRING Bob Joplin
1327: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1328: LD_ADDR_OWVAR 29
1332: PUSH
1333: LD_INT 10
1335: PUSH
1336: LD_INT 11
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1343: LD_ADDR_OWVAR 30
1347: PUSH
1348: LD_INT 0
1350: PUSH
1351: LD_INT 1
1353: PUSH
1354: LD_INT 1
1356: PUSH
1357: LD_INT 0
1359: PUSH
1360: EMPTY
1361: LIST
1362: LIST
1363: LIST
1364: LIST
1365: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1366: LD_ADDR_OWVAR 31
1370: PUSH
1371: LD_INT 3
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: LD_INT 1
1379: PUSH
1380: LD_INT 1
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: LIST
1388: ST_TO_ADDR
// un = CreateHuman ;
1389: LD_ADDR_VAR 0 3
1393: PUSH
1394: CALL_OW 44
1398: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1399: LD_VAR 0 3
1403: PPUSH
1404: LD_INT 10
1406: PPUSH
1407: LD_INT 0
1409: PPUSH
1410: CALL_OW 49
// hc_class := 3 ;
1414: LD_ADDR_OWVAR 28
1418: PUSH
1419: LD_INT 3
1421: ST_TO_ADDR
// hc_sex := sex_female ;
1422: LD_ADDR_OWVAR 27
1426: PUSH
1427: LD_INT 2
1429: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1430: LD_ADDR_OWVAR 33
1434: PUSH
1435: LD_STRING AmGalRemake
1437: ST_TO_ADDR
// hc_face_number := 4 ;
1438: LD_ADDR_OWVAR 34
1442: PUSH
1443: LD_INT 4
1445: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1446: LD_ADDR_OWVAR 26
1450: PUSH
1451: LD_STRING Elizabeth Whitney
1453: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1454: LD_ADDR_OWVAR 29
1458: PUSH
1459: LD_INT 9
1461: PUSH
1462: LD_INT 11
1464: PUSH
1465: EMPTY
1466: LIST
1467: LIST
1468: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1469: LD_ADDR_OWVAR 30
1473: PUSH
1474: LD_INT 0
1476: PUSH
1477: LD_INT 0
1479: PUSH
1480: LD_INT 2
1482: PUSH
1483: LD_INT 0
1485: PUSH
1486: EMPTY
1487: LIST
1488: LIST
1489: LIST
1490: LIST
1491: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1492: LD_ADDR_OWVAR 31
1496: PUSH
1497: LD_INT 2
1499: PUSH
1500: LD_INT 2
1502: PUSH
1503: LD_INT 4
1505: PUSH
1506: LD_INT 2
1508: PUSH
1509: EMPTY
1510: LIST
1511: LIST
1512: LIST
1513: LIST
1514: ST_TO_ADDR
// un = CreateHuman ;
1515: LD_ADDR_VAR 0 3
1519: PUSH
1520: CALL_OW 44
1524: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1525: LD_VAR 0 3
1529: PPUSH
1530: LD_INT 10
1532: PPUSH
1533: LD_INT 0
1535: PPUSH
1536: CALL_OW 49
// InitHc ;
1540: CALL_OW 19
// end ;
1544: LD_VAR 0 1
1548: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1549: LD_INT 0
1551: PPUSH
1552: PPUSH
1553: PPUSH
// uc_nation = 1 ;
1554: LD_ADDR_OWVAR 21
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// uc_side = 1 ;
1562: LD_ADDR_OWVAR 20
1566: PUSH
1567: LD_INT 1
1569: ST_TO_ADDR
// hc_class := 1 ;
1570: LD_ADDR_OWVAR 28
1574: PUSH
1575: LD_INT 1
1577: ST_TO_ADDR
// hc_sex := sex_male ;
1578: LD_ADDR_OWVAR 27
1582: PUSH
1583: LD_INT 1
1585: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1586: LD_ADDR_OWVAR 33
1590: PUSH
1591: LD_STRING SecondCharsGal
1593: ST_TO_ADDR
// hc_face_number := 59 ;
1594: LD_ADDR_OWVAR 34
1598: PUSH
1599: LD_INT 59
1601: ST_TO_ADDR
// hc_name := Max Gray ;
1602: LD_ADDR_OWVAR 26
1606: PUSH
1607: LD_STRING Max Gray
1609: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1610: LD_ADDR_OWVAR 29
1614: PUSH
1615: LD_INT 9
1617: PUSH
1618: LD_INT 11
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1625: LD_ADDR_OWVAR 30
1629: PUSH
1630: LD_INT 1
1632: PUSH
1633: LD_INT 0
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: LD_INT 0
1641: PUSH
1642: EMPTY
1643: LIST
1644: LIST
1645: LIST
1646: LIST
1647: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1648: LD_ADDR_OWVAR 31
1652: PUSH
1653: LD_INT 2
1655: PUSH
1656: LD_INT 1
1658: PUSH
1659: LD_INT 1
1661: PUSH
1662: LD_INT 0
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: LIST
1669: LIST
1670: ST_TO_ADDR
// un = CreateHuman ;
1671: LD_ADDR_VAR 0 4
1675: PUSH
1676: CALL_OW 44
1680: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1681: LD_VAR 0 4
1685: PPUSH
1686: LD_INT 11
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// hc_class := 1 ;
1696: LD_ADDR_OWVAR 28
1700: PUSH
1701: LD_INT 1
1703: ST_TO_ADDR
// hc_sex := sex_male ;
1704: LD_ADDR_OWVAR 27
1708: PUSH
1709: LD_INT 1
1711: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1712: LD_ADDR_OWVAR 33
1716: PUSH
1717: LD_STRING SecondCharsGal
1719: ST_TO_ADDR
// hc_face_number := 54 ;
1720: LD_ADDR_OWVAR 34
1724: PUSH
1725: LD_INT 54
1727: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1728: LD_ADDR_OWVAR 26
1732: PUSH
1733: LD_STRING Luigi Ghbellin
1735: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1736: LD_ADDR_OWVAR 29
1740: PUSH
1741: LD_INT 11
1743: PUSH
1744: LD_INT 11
1746: PUSH
1747: EMPTY
1748: LIST
1749: LIST
1750: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1751: LD_ADDR_OWVAR 30
1755: PUSH
1756: LD_INT 1
1758: PUSH
1759: LD_INT 0
1761: PUSH
1762: LD_INT 0
1764: PUSH
1765: LD_INT 0
1767: PUSH
1768: EMPTY
1769: LIST
1770: LIST
1771: LIST
1772: LIST
1773: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1774: LD_ADDR_OWVAR 31
1778: PUSH
1779: LD_INT 1
1781: PUSH
1782: LD_INT 0
1784: PUSH
1785: LD_INT 0
1787: PUSH
1788: LD_INT 1
1790: PUSH
1791: EMPTY
1792: LIST
1793: LIST
1794: LIST
1795: LIST
1796: ST_TO_ADDR
// un = CreateHuman ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: CALL_OW 44
1806: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1807: LD_VAR 0 4
1811: PPUSH
1812: LD_INT 11
1814: PPUSH
1815: LD_INT 0
1817: PPUSH
1818: CALL_OW 49
// hc_class := 3 ;
1822: LD_ADDR_OWVAR 28
1826: PUSH
1827: LD_INT 3
1829: ST_TO_ADDR
// hc_sex := sex_male ;
1830: LD_ADDR_OWVAR 27
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING AmGalRemake
1845: ST_TO_ADDR
// hc_face_number := 6 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 6
1853: ST_TO_ADDR
// hc_name := Leon Carter ;
1854: LD_ADDR_OWVAR 26
1858: PUSH
1859: LD_STRING Leon Carter
1861: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1862: LD_ADDR_OWVAR 29
1866: PUSH
1867: LD_INT 10
1869: PUSH
1870: LD_INT 9
1872: PUSH
1873: EMPTY
1874: LIST
1875: LIST
1876: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1877: LD_ADDR_OWVAR 30
1881: PUSH
1882: LD_INT 0
1884: PUSH
1885: LD_INT 1
1887: PUSH
1888: LD_INT 1
1890: PUSH
1891: LD_INT 0
1893: PUSH
1894: EMPTY
1895: LIST
1896: LIST
1897: LIST
1898: LIST
1899: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1900: LD_ADDR_OWVAR 31
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 3
1913: PUSH
1914: LD_INT 0
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: ST_TO_ADDR
// un = CreateHuman ;
1923: LD_ADDR_VAR 0 4
1927: PUSH
1928: CALL_OW 44
1932: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1933: LD_VAR 0 4
1937: PPUSH
1938: LD_INT 11
1940: PPUSH
1941: LD_INT 0
1943: PPUSH
1944: CALL_OW 49
// if count = 4 then
1948: LD_VAR 0 1
1952: PUSH
1953: LD_INT 4
1955: EQUAL
1956: IFFALSE 2084
// begin hc_class := 1 ;
1958: LD_ADDR_OWVAR 28
1962: PUSH
1963: LD_INT 1
1965: ST_TO_ADDR
// hc_sex := sex_male ;
1966: LD_ADDR_OWVAR 27
1970: PUSH
1971: LD_INT 1
1973: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1974: LD_ADDR_OWVAR 33
1978: PUSH
1979: LD_STRING SecondCharsGal
1981: ST_TO_ADDR
// hc_face_number := 34 ;
1982: LD_ADDR_OWVAR 34
1986: PUSH
1987: LD_INT 34
1989: ST_TO_ADDR
// hc_name := Ian Hill ;
1990: LD_ADDR_OWVAR 26
1994: PUSH
1995: LD_STRING Ian Hill
1997: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
1998: LD_ADDR_OWVAR 29
2002: PUSH
2003: LD_INT 10
2005: PUSH
2006: LD_INT 12
2008: PUSH
2009: EMPTY
2010: LIST
2011: LIST
2012: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2013: LD_ADDR_OWVAR 30
2017: PUSH
2018: LD_INT 0
2020: PUSH
2021: LD_INT 0
2023: PUSH
2024: LD_INT 1
2026: PUSH
2027: LD_INT 0
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2036: LD_ADDR_OWVAR 31
2040: PUSH
2041: LD_INT 2
2043: PUSH
2044: LD_INT 0
2046: PUSH
2047: LD_INT 1
2049: PUSH
2050: LD_INT 0
2052: PUSH
2053: EMPTY
2054: LIST
2055: LIST
2056: LIST
2057: LIST
2058: ST_TO_ADDR
// un = CreateHuman ;
2059: LD_ADDR_VAR 0 4
2063: PUSH
2064: CALL_OW 44
2068: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2069: LD_VAR 0 4
2073: PPUSH
2074: LD_INT 11
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// end ; if count = 5 then
2084: LD_VAR 0 1
2088: PUSH
2089: LD_INT 5
2091: EQUAL
2092: IFFALSE 2346
// begin hc_class := 1 ;
2094: LD_ADDR_OWVAR 28
2098: PUSH
2099: LD_INT 1
2101: ST_TO_ADDR
// hc_sex := sex_male ;
2102: LD_ADDR_OWVAR 27
2106: PUSH
2107: LD_INT 1
2109: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2110: LD_ADDR_OWVAR 33
2114: PUSH
2115: LD_STRING SecondCharsGal
2117: ST_TO_ADDR
// hc_face_number := 34 ;
2118: LD_ADDR_OWVAR 34
2122: PUSH
2123: LD_INT 34
2125: ST_TO_ADDR
// hc_name := Ian Hill ;
2126: LD_ADDR_OWVAR 26
2130: PUSH
2131: LD_STRING Ian Hill
2133: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2134: LD_ADDR_OWVAR 29
2138: PUSH
2139: LD_INT 10
2141: PUSH
2142: LD_INT 12
2144: PUSH
2145: EMPTY
2146: LIST
2147: LIST
2148: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2149: LD_ADDR_OWVAR 30
2153: PUSH
2154: LD_INT 0
2156: PUSH
2157: LD_INT 0
2159: PUSH
2160: LD_INT 1
2162: PUSH
2163: LD_INT 0
2165: PUSH
2166: EMPTY
2167: LIST
2168: LIST
2169: LIST
2170: LIST
2171: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2172: LD_ADDR_OWVAR 31
2176: PUSH
2177: LD_INT 2
2179: PUSH
2180: LD_INT 0
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 0
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: ST_TO_ADDR
// un = CreateHuman ;
2195: LD_ADDR_VAR 0 4
2199: PUSH
2200: CALL_OW 44
2204: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2205: LD_VAR 0 4
2209: PPUSH
2210: LD_INT 11
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL_OW 49
// hc_class := 1 ;
2220: LD_ADDR_OWVAR 28
2224: PUSH
2225: LD_INT 1
2227: ST_TO_ADDR
// hc_sex := sex_female ;
2228: LD_ADDR_OWVAR 27
2232: PUSH
2233: LD_INT 2
2235: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2236: LD_ADDR_OWVAR 33
2240: PUSH
2241: LD_STRING SecondCharsGal
2243: ST_TO_ADDR
// hc_face_number := 41 ;
2244: LD_ADDR_OWVAR 34
2248: PUSH
2249: LD_INT 41
2251: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2252: LD_ADDR_OWVAR 26
2256: PUSH
2257: LD_STRING Kate Wadsworth
2259: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2260: LD_ADDR_OWVAR 29
2264: PUSH
2265: LD_INT 9
2267: PUSH
2268: LD_INT 9
2270: PUSH
2271: EMPTY
2272: LIST
2273: LIST
2274: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2275: LD_ADDR_OWVAR 30
2279: PUSH
2280: LD_INT 0
2282: PUSH
2283: LD_INT 2
2285: PUSH
2286: LD_INT 0
2288: PUSH
2289: LD_INT 0
2291: PUSH
2292: EMPTY
2293: LIST
2294: LIST
2295: LIST
2296: LIST
2297: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2298: LD_ADDR_OWVAR 31
2302: PUSH
2303: LD_INT 2
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: LD_INT 1
2311: PUSH
2312: LD_INT 0
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: LIST
2319: LIST
2320: ST_TO_ADDR
// un = CreateHuman ;
2321: LD_ADDR_VAR 0 4
2325: PUSH
2326: CALL_OW 44
2330: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2331: LD_VAR 0 4
2335: PPUSH
2336: LD_INT 11
2338: PPUSH
2339: LD_INT 0
2341: PPUSH
2342: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2346: LD_INT 11
2348: PPUSH
2349: LD_INT 22
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: LD_INT 21
2361: PUSH
2362: LD_INT 1
2364: PUSH
2365: EMPTY
2366: LIST
2367: LIST
2368: PUSH
2369: LD_INT 26
2371: PUSH
2372: LD_INT 1
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: LIST
2383: PPUSH
2384: CALL_OW 70
2388: PUSH
2389: LD_INT 1
2391: ARRAY
2392: PPUSH
2393: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2397: LD_INT 11
2399: PPUSH
2400: LD_INT 22
2402: PUSH
2403: LD_INT 1
2405: PUSH
2406: EMPTY
2407: LIST
2408: LIST
2409: PUSH
2410: LD_INT 21
2412: PUSH
2413: LD_INT 1
2415: PUSH
2416: EMPTY
2417: LIST
2418: LIST
2419: PUSH
2420: LD_INT 26
2422: PUSH
2423: LD_INT 1
2425: PUSH
2426: EMPTY
2427: LIST
2428: LIST
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: LIST
2434: PPUSH
2435: CALL_OW 70
2439: PUSH
2440: LD_INT 1
2442: ARRAY
2443: PPUSH
2444: LD_STRING D6-Sol3-1
2446: PPUSH
2447: CALL_OW 88
// end ; end_of_file
2451: LD_VAR 0 2
2455: RET
// export function PrepareRussianCommander ; begin
2456: LD_INT 0
2458: PPUSH
// uc_side = 3 ;
2459: LD_ADDR_OWVAR 20
2463: PUSH
2464: LD_INT 3
2466: ST_TO_ADDR
// uc_nation = 3 ;
2467: LD_ADDR_OWVAR 21
2471: PUSH
2472: LD_INT 3
2474: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2475: LD_ADDR_EXP 15
2479: PUSH
2480: LD_STRING Stolypin
2482: PPUSH
2483: CALL_OW 25
2487: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2488: LD_EXP 15
2492: PPUSH
2493: LD_INT 21
2495: PPUSH
2496: CALL_OW 52
// end ;
2500: LD_VAR 0 1
2504: RET
// export function PrepareRussianBase ; var i ; begin
2505: LD_INT 0
2507: PPUSH
2508: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2509: LD_INT 3
2511: PPUSH
2512: LD_INT 3
2514: PPUSH
2515: LD_INT 22
2517: PPUSH
2518: LD_EXP 16
2522: PPUSH
2523: LD_EXP 17
2527: PPUSH
2528: CALL_OW 12
2532: PPUSH
2533: LD_INT 1
2535: PPUSH
2536: LD_INT 2
2538: PPUSH
2539: CALL 3790 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2543: LD_INT 3
2545: PPUSH
2546: LD_INT 3
2548: PPUSH
2549: LD_INT 21
2551: PPUSH
2552: LD_EXP 16
2556: PPUSH
2557: LD_EXP 17
2561: PPUSH
2562: CALL_OW 12
2566: PPUSH
2567: LD_INT 2
2569: PPUSH
2570: LD_INT 3
2572: PPUSH
2573: CALL 3790 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2577: LD_INT 3
2579: PPUSH
2580: LD_INT 3
2582: PPUSH
2583: LD_INT 1
2585: PPUSH
2586: LD_EXP 16
2590: PPUSH
2591: LD_EXP 17
2595: PPUSH
2596: CALL_OW 12
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: LD_INT 2
2606: PPUSH
2607: CALL 3790 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2611: LD_INT 3
2613: PPUSH
2614: LD_INT 3
2616: PPUSH
2617: LD_INT 24
2619: PPUSH
2620: LD_EXP 16
2624: PPUSH
2625: LD_EXP 17
2629: PPUSH
2630: CALL_OW 12
2634: PPUSH
2635: LD_INT 3
2637: PPUSH
2638: LD_INT 6
2640: PPUSH
2641: CALL 3790 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2645: LD_ADDR_VAR 0 2
2649: PUSH
2650: LD_INT 22
2652: PUSH
2653: LD_INT 3
2655: PUSH
2656: EMPTY
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 30
2662: PUSH
2663: LD_INT 32
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PPUSH
2674: CALL_OW 69
2678: PUSH
2679: FOR_IN
2680: IFFALSE 2720
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2682: LD_INT 3
2684: PPUSH
2685: LD_INT 3
2687: PPUSH
2688: LD_VAR 0 2
2692: PPUSH
2693: LD_EXP 16
2697: PPUSH
2698: LD_EXP 17
2702: PPUSH
2703: CALL_OW 12
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_INT 1
2713: PPUSH
2714: CALL 3790 0 6
2718: GO 2679
2720: POP
2721: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 30
2739: PUSH
2740: LD_INT 31
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2785
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2759: LD_EXP 16
2763: PPUSH
2764: LD_EXP 17
2768: PPUSH
2769: CALL_OW 12
2773: PPUSH
2774: LD_VAR 0 2
2778: PPUSH
2779: CALL 3900 0 2
2783: GO 2756
2785: POP
2786: POP
// end ;
2787: LD_VAR 0 1
2791: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2792: LD_INT 0
2794: PPUSH
2795: PPUSH
2796: PPUSH
2797: PPUSH
// uc_side = 6 ;
2798: LD_ADDR_OWVAR 20
2802: PUSH
2803: LD_INT 6
2805: ST_TO_ADDR
// uc_nation = 3 ;
2806: LD_ADDR_OWVAR 21
2810: PUSH
2811: LD_INT 3
2813: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2814: LD_ADDR_VAR 0 2
2818: PUSH
2819: DOUBLE
2820: LD_INT 1
2822: DEC
2823: ST_TO_ADDR
2824: LD_INT 1
2826: PUSH
2827: LD_INT 2
2829: PUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 2
2835: PPUSH
2836: CALL_OW 12
2840: PUSH
2841: EMPTY
2842: LIST
2843: LIST
2844: LIST
2845: PUSH
2846: LD_OWVAR 67
2850: ARRAY
2851: PUSH
2852: FOR_TO
2853: IFFALSE 3013
// begin vc_engine = 1 ;
2855: LD_ADDR_OWVAR 39
2859: PUSH
2860: LD_INT 1
2862: ST_TO_ADDR
// vc_control = 1 ;
2863: LD_ADDR_OWVAR 38
2867: PUSH
2868: LD_INT 1
2870: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2871: LD_ADDR_OWVAR 40
2875: PUSH
2876: LD_INT 42
2878: PUSH
2879: LD_INT 42
2881: PUSH
2882: LD_INT 43
2884: PUSH
2885: EMPTY
2886: LIST
2887: LIST
2888: LIST
2889: PUSH
2890: LD_OWVAR 67
2894: ARRAY
2895: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2896: LD_ADDR_OWVAR 37
2900: PUSH
2901: LD_INT 21
2903: PUSH
2904: LD_INT 22
2906: PUSH
2907: LD_INT 22
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PUSH
2915: LD_OWVAR 67
2919: ARRAY
2920: ST_TO_ADDR
// veh = CreateVehicle ;
2921: LD_ADDR_VAR 0 3
2925: PUSH
2926: CALL_OW 45
2930: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2931: LD_VAR 0 3
2935: PPUSH
2936: LD_INT 3
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// hc_gallery =  ;
2946: LD_ADDR_OWVAR 33
2950: PUSH
2951: LD_STRING 
2953: ST_TO_ADDR
// hc_name =  ;
2954: LD_ADDR_OWVAR 26
2958: PUSH
2959: LD_STRING 
2961: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2962: LD_INT 0
2964: PPUSH
2965: LD_INT 3
2967: PPUSH
2968: LD_EXP 16
2972: PPUSH
2973: LD_EXP 17
2977: PPUSH
2978: CALL_OW 12
2982: PPUSH
2983: CALL_OW 380
// un = CreateHuman ;
2987: LD_ADDR_VAR 0 4
2991: PUSH
2992: CALL_OW 44
2996: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2997: LD_VAR 0 4
3001: PPUSH
3002: LD_VAR 0 3
3006: PPUSH
3007: CALL_OW 52
// end ;
3011: GO 2852
3013: POP
3014: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3015: LD_INT 0
3017: PPUSH
3018: LD_INT 2
3020: PPUSH
3021: LD_EXP 16
3025: PPUSH
3026: LD_EXP 17
3030: PPUSH
3031: CALL_OW 12
3035: PUSH
3036: LD_INT 2
3038: PLUS
3039: PPUSH
3040: CALL_OW 380
// un = CreateHuman ;
3044: LD_ADDR_VAR 0 4
3048: PUSH
3049: CALL_OW 44
3053: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3054: LD_VAR 0 4
3058: PPUSH
3059: LD_INT 3
3061: PPUSH
3062: LD_INT 0
3064: PPUSH
3065: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3069: LD_INT 0
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_EXP 16
3079: PPUSH
3080: LD_EXP 17
3084: PPUSH
3085: CALL_OW 12
3089: PUSH
3090: LD_INT 2
3092: PLUS
3093: PPUSH
3094: CALL_OW 380
// un = CreateHuman ;
3098: LD_ADDR_VAR 0 4
3102: PUSH
3103: CALL_OW 44
3107: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3108: LD_VAR 0 4
3112: PPUSH
3113: LD_INT 3
3115: PPUSH
3116: LD_INT 0
3118: PPUSH
3119: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3123: LD_ADDR_VAR 0 2
3127: PUSH
3128: DOUBLE
3129: LD_INT 1
3131: DEC
3132: ST_TO_ADDR
3133: LD_INT 2
3135: PUSH
3136: LD_INT 3
3138: PUSH
3139: LD_INT 3
3141: PUSH
3142: EMPTY
3143: LIST
3144: LIST
3145: LIST
3146: PUSH
3147: LD_OWVAR 67
3151: ARRAY
3152: PUSH
3153: LD_INT 1
3155: PPUSH
3156: LD_INT 3
3158: PPUSH
3159: CALL_OW 12
3163: PLUS
3164: PUSH
3165: FOR_TO
3166: IFFALSE 3236
// begin hc_gallery =  ;
3168: LD_ADDR_OWVAR 33
3172: PUSH
3173: LD_STRING 
3175: ST_TO_ADDR
// hc_name =  ;
3176: LD_ADDR_OWVAR 26
3180: PUSH
3181: LD_STRING 
3183: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3184: LD_INT 0
3186: PPUSH
3187: LD_INT 1
3189: PPUSH
3190: LD_EXP 16
3194: PPUSH
3195: LD_EXP 17
3199: PPUSH
3200: CALL_OW 12
3204: PPUSH
3205: CALL_OW 380
// un = CreateHuman ;
3209: LD_ADDR_VAR 0 4
3213: PUSH
3214: CALL_OW 44
3218: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3219: LD_VAR 0 4
3223: PPUSH
3224: LD_INT 3
3226: PPUSH
3227: LD_INT 0
3229: PPUSH
3230: CALL_OW 49
// end ;
3234: GO 3165
3236: POP
3237: POP
// vc_engine = 1 ;
3238: LD_ADDR_OWVAR 39
3242: PUSH
3243: LD_INT 1
3245: ST_TO_ADDR
// vc_control = 1 ;
3246: LD_ADDR_OWVAR 38
3250: PUSH
3251: LD_INT 1
3253: ST_TO_ADDR
// vc_weapon = 51 ;
3254: LD_ADDR_OWVAR 40
3258: PUSH
3259: LD_INT 51
3261: ST_TO_ADDR
// vc_chassis = 22 ;
3262: LD_ADDR_OWVAR 37
3266: PUSH
3267: LD_INT 22
3269: ST_TO_ADDR
// veh = CreateVehicle ;
3270: LD_ADDR_VAR 0 3
3274: PUSH
3275: CALL_OW 45
3279: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3280: LD_VAR 0 3
3284: PPUSH
3285: LD_INT 3
3287: PPUSH
3288: LD_INT 0
3290: PPUSH
3291: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3295: LD_VAR 0 3
3299: PPUSH
3300: LD_INT 1
3302: PPUSH
3303: LD_INT 100
3305: PPUSH
3306: CALL_OW 290
// hc_gallery =  ;
3310: LD_ADDR_OWVAR 33
3314: PUSH
3315: LD_STRING 
3317: ST_TO_ADDR
// hc_name =  ;
3318: LD_ADDR_OWVAR 26
3322: PUSH
3323: LD_STRING 
3325: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3326: LD_INT 0
3328: PPUSH
3329: LD_INT 3
3331: PPUSH
3332: LD_EXP 16
3336: PPUSH
3337: LD_EXP 17
3341: PPUSH
3342: CALL_OW 12
3346: PPUSH
3347: CALL_OW 380
// un = CreateHuman ;
3351: LD_ADDR_VAR 0 4
3355: PUSH
3356: CALL_OW 44
3360: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3361: LD_VAR 0 4
3365: PPUSH
3366: LD_VAR 0 3
3370: PPUSH
3371: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3375: LD_ADDR_VAR 0 2
3379: PUSH
3380: LD_INT 22
3382: PUSH
3383: LD_INT 6
3385: PUSH
3386: EMPTY
3387: LIST
3388: LIST
3389: PUSH
3390: LD_INT 1
3392: PUSH
3393: LD_INT 3
3395: PUSH
3396: LD_INT 25
3398: PUSH
3399: LD_INT 2
3401: PUSH
3402: EMPTY
3403: LIST
3404: LIST
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: PUSH
3410: LD_INT 3
3412: PUSH
3413: LD_INT 25
3415: PUSH
3416: LD_INT 4
3418: PUSH
3419: EMPTY
3420: LIST
3421: LIST
3422: PUSH
3423: EMPTY
3424: LIST
3425: LIST
3426: PUSH
3427: EMPTY
3428: LIST
3429: LIST
3430: LIST
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: PPUSH
3436: CALL_OW 69
3440: PUSH
3441: FOR_IN
3442: IFFALSE 3461
// ComAgressiveMove ( i , 45 , 46 ) ;
3444: LD_VAR 0 2
3448: PPUSH
3449: LD_INT 45
3451: PPUSH
3452: LD_INT 46
3454: PPUSH
3455: CALL_OW 114
3459: GO 3441
3461: POP
3462: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3463: LD_ADDR_VAR 0 2
3467: PUSH
3468: LD_INT 22
3470: PUSH
3471: LD_INT 6
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 25
3480: PUSH
3481: LD_INT 2
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: CALL_OW 69
3496: PUSH
3497: FOR_IN
3498: IFFALSE 3529
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3500: LD_ADDR_EXP 21
3504: PUSH
3505: LD_VAR 0 2
3509: PPUSH
3510: LD_INT 0
3512: PPUSH
3513: LD_INT 48
3515: PPUSH
3516: LD_INT 55
3518: PPUSH
3519: LD_INT 5
3521: PPUSH
3522: CALL_OW 145
3526: ST_TO_ADDR
3527: GO 3497
3529: POP
3530: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3531: LD_ADDR_VAR 0 2
3535: PUSH
3536: LD_INT 22
3538: PUSH
3539: LD_INT 6
3541: PUSH
3542: EMPTY
3543: LIST
3544: LIST
3545: PUSH
3546: LD_INT 25
3548: PUSH
3549: LD_INT 4
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PPUSH
3560: CALL_OW 69
3564: PUSH
3565: FOR_IN
3566: IFFALSE 3585
// ComMoveXY ( i , 39 , 55 ) ;
3568: LD_VAR 0 2
3572: PPUSH
3573: LD_INT 39
3575: PPUSH
3576: LD_INT 55
3578: PPUSH
3579: CALL_OW 111
3583: GO 3565
3585: POP
3586: POP
// end ;
3587: LD_VAR 0 1
3591: RET
// export function PrepareFirstAttack ; var i , un ; begin
3592: LD_INT 0
3594: PPUSH
3595: PPUSH
3596: PPUSH
// uc_side = 5 ;
3597: LD_ADDR_OWVAR 20
3601: PUSH
3602: LD_INT 5
3604: ST_TO_ADDR
// uc_nation = 3 ;
3605: LD_ADDR_OWVAR 21
3609: PUSH
3610: LD_INT 3
3612: ST_TO_ADDR
// for i := 1 to 4 do
3613: LD_ADDR_VAR 0 2
3617: PUSH
3618: DOUBLE
3619: LD_INT 1
3621: DEC
3622: ST_TO_ADDR
3623: LD_INT 4
3625: PUSH
3626: FOR_TO
3627: IFFALSE 3712
// begin hc_gallery =  ;
3629: LD_ADDR_OWVAR 33
3633: PUSH
3634: LD_STRING 
3636: ST_TO_ADDR
// hc_name =  ;
3637: LD_ADDR_OWVAR 26
3641: PUSH
3642: LD_STRING 
3644: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3645: LD_INT 0
3647: PPUSH
3648: LD_INT 1
3650: PPUSH
3651: LD_EXP 16
3655: PPUSH
3656: LD_EXP 17
3660: PPUSH
3661: CALL_OW 12
3665: PPUSH
3666: CALL_OW 380
// un = CreateHuman ;
3670: LD_ADDR_VAR 0 3
3674: PUSH
3675: CALL_OW 44
3679: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3680: LD_VAR 0 3
3684: PPUSH
3685: LD_INT 4
3687: PPUSH
3688: LD_INT 0
3690: PPUSH
3691: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3695: LD_VAR 0 3
3699: PPUSH
3700: LD_INT 48
3702: PPUSH
3703: LD_INT 14
3705: PPUSH
3706: CALL_OW 114
// end ;
3710: GO 3626
3712: POP
3713: POP
// firstRussianAttack = 1 ;
3714: LD_ADDR_EXP 23
3718: PUSH
3719: LD_INT 1
3721: ST_TO_ADDR
// end ; end_of_file
3722: LD_VAR 0 1
3726: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3727: LD_INT 0
3729: PPUSH
3730: PPUSH
// if exist_mode then
3731: LD_VAR 0 2
3735: IFFALSE 3760
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3737: LD_ADDR_VAR 0 4
3741: PUSH
3742: LD_EXP 45
3746: PUSH
3747: LD_VAR 0 1
3751: STR
3752: PPUSH
3753: CALL_OW 34
3757: ST_TO_ADDR
// end else
3758: GO 3775
// begin unit := NewCharacter ( ident ) ;
3760: LD_ADDR_VAR 0 4
3764: PUSH
3765: LD_VAR 0 1
3769: PPUSH
3770: CALL_OW 25
3774: ST_TO_ADDR
// end ; result := unit ;
3775: LD_ADDR_VAR 0 3
3779: PUSH
3780: LD_VAR 0 4
3784: ST_TO_ADDR
// end ;
3785: LD_VAR 0 3
3789: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3790: LD_INT 0
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
// for i = 1 to count do
3796: LD_ADDR_VAR 0 8
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_VAR 0 6
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3893
// begin uc_side = side ;
3814: LD_ADDR_OWVAR 20
3818: PUSH
3819: LD_VAR 0 1
3823: ST_TO_ADDR
// uc_nation = nation ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_VAR 0 2
3833: ST_TO_ADDR
// hc_gallery =  ;
3834: LD_ADDR_OWVAR 33
3838: PUSH
3839: LD_STRING 
3841: ST_TO_ADDR
// hc_name =  ;
3842: LD_ADDR_OWVAR 26
3846: PUSH
3847: LD_STRING 
3849: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3850: LD_INT 0
3852: PPUSH
3853: LD_VAR 0 5
3857: PPUSH
3858: LD_VAR 0 4
3862: PPUSH
3863: CALL_OW 380
// un = CreateHuman ;
3867: LD_ADDR_VAR 0 10
3871: PUSH
3872: CALL_OW 44
3876: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3877: LD_VAR 0 10
3881: PPUSH
3882: LD_VAR 0 3
3886: PPUSH
3887: CALL_OW 52
// end ;
3891: GO 3811
3893: POP
3894: POP
// end ;
3895: LD_VAR 0 7
3899: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3900: LD_INT 0
3902: PPUSH
3903: PPUSH
3904: PPUSH
// uc_side := GetSide ( b ) ;
3905: LD_ADDR_OWVAR 20
3909: PUSH
3910: LD_VAR 0 2
3914: PPUSH
3915: CALL_OW 255
3919: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3920: LD_ADDR_OWVAR 21
3924: PUSH
3925: LD_VAR 0 2
3929: PPUSH
3930: CALL_OW 248
3934: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3935: LD_INT 0
3937: PPUSH
3938: LD_INT 1
3940: PPUSH
3941: LD_VAR 0 1
3945: PPUSH
3946: CALL_OW 380
// un = CreateHuman ;
3950: LD_ADDR_VAR 0 4
3954: PUSH
3955: CALL_OW 44
3959: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3960: LD_ADDR_VAR 0 5
3964: PUSH
3965: LD_VAR 0 2
3969: PPUSH
3970: CALL_OW 254
3974: PUSH
3975: LD_INT 3
3977: MINUS
3978: ST_TO_ADDR
// if dir < 0 then
3979: LD_VAR 0 5
3983: PUSH
3984: LD_INT 0
3986: LESS
3987: IFFALSE 4003
// dir := 6 + dir ;
3989: LD_ADDR_VAR 0 5
3993: PUSH
3994: LD_INT 6
3996: PUSH
3997: LD_VAR 0 5
4001: PLUS
4002: ST_TO_ADDR
// SetDir ( un , dir ) ;
4003: LD_VAR 0 4
4007: PPUSH
4008: LD_VAR 0 5
4012: PPUSH
4013: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4017: LD_VAR 0 4
4021: PPUSH
4022: LD_VAR 0 2
4026: PPUSH
4027: CALL_OW 52
// end ;
4031: LD_VAR 0 3
4035: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4036: LD_INT 0
4038: PPUSH
4039: PPUSH
4040: PPUSH
// rnd = rand ( 1 , characters ) ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_INT 1
4048: PPUSH
4049: LD_VAR 0 1
4053: PPUSH
4054: CALL_OW 12
4058: ST_TO_ADDR
// for i = 1 to characters do
4059: LD_ADDR_VAR 0 5
4063: PUSH
4064: DOUBLE
4065: LD_INT 1
4067: DEC
4068: ST_TO_ADDR
4069: LD_VAR 0 1
4073: PUSH
4074: FOR_TO
4075: IFFALSE 4185
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4077: LD_VAR 0 5
4081: PUSH
4082: LD_VAR 0 6
4086: EQUAL
4087: PUSH
4088: LD_VAR 0 1
4092: PUSH
4093: LD_VAR 0 5
4097: ARRAY
4098: PPUSH
4099: CALL_OW 258
4103: PUSH
4104: LD_INT 1
4106: EQUAL
4107: AND
4108: IFFALSE 4130
// Say ( characters [ i ] , dialogMID ) ;
4110: LD_VAR 0 1
4114: PUSH
4115: LD_VAR 0 5
4119: ARRAY
4120: PPUSH
4121: LD_VAR 0 2
4125: PPUSH
4126: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4130: LD_VAR 0 5
4134: PUSH
4135: LD_VAR 0 6
4139: EQUAL
4140: PUSH
4141: LD_VAR 0 1
4145: PUSH
4146: LD_VAR 0 5
4150: ARRAY
4151: PPUSH
4152: CALL_OW 258
4156: PUSH
4157: LD_INT 2
4159: EQUAL
4160: AND
4161: IFFALSE 4183
// Say ( characters [ i ] , dialogFID ) ;
4163: LD_VAR 0 1
4167: PUSH
4168: LD_VAR 0 5
4172: ARRAY
4173: PPUSH
4174: LD_VAR 0 3
4178: PPUSH
4179: CALL_OW 88
// end ;
4183: GO 4074
4185: POP
4186: POP
// end ;
4187: LD_VAR 0 4
4191: RET
// export function PrepareDifficulty ; var tmp ; begin
4192: LD_INT 0
4194: PPUSH
4195: PPUSH
// if Difficulty = 1 then
4196: LD_OWVAR 67
4200: PUSH
4201: LD_INT 1
4203: EQUAL
4204: IFFALSE 4222
// begin RuSoldMinLevel = 0 ;
4206: LD_ADDR_EXP 16
4210: PUSH
4211: LD_INT 0
4213: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4214: LD_ADDR_EXP 17
4218: PUSH
4219: LD_INT 2
4221: ST_TO_ADDR
// end ; if Difficulty = 2 then
4222: LD_OWVAR 67
4226: PUSH
4227: LD_INT 2
4229: EQUAL
4230: IFFALSE 4338
// begin RuSoldMinLevel = 1 ;
4232: LD_ADDR_EXP 16
4236: PUSH
4237: LD_INT 1
4239: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4240: LD_ADDR_EXP 17
4244: PUSH
4245: LD_INT 2
4247: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4248: LD_INT 14
4250: PPUSH
4251: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4255: LD_INT 23
4257: PPUSH
4258: CALL_OW 64
// uc_nation = 3 ;
4262: LD_ADDR_OWVAR 21
4266: PUSH
4267: LD_INT 3
4269: ST_TO_ADDR
// uc_side = 3 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 3
4277: ST_TO_ADDR
// bc_level = 5 ;
4278: LD_ADDR_OWVAR 43
4282: PUSH
4283: LD_INT 5
4285: ST_TO_ADDR
// bc_type = 32 ;
4286: LD_ADDR_OWVAR 42
4290: PUSH
4291: LD_INT 32
4293: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4294: LD_ADDR_VAR 0 2
4298: PUSH
4299: LD_INT 76
4301: PPUSH
4302: LD_INT 91
4304: PPUSH
4305: LD_INT 2
4307: PPUSH
4308: CALL_OW 47
4312: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4313: LD_VAR 0 2
4317: PPUSH
4318: LD_INT 43
4320: PPUSH
4321: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4325: LD_INT 51
4327: PPUSH
4328: LD_INT 3
4330: PPUSH
4331: LD_INT 1
4333: PPUSH
4334: CALL_OW 322
// end ; if Difficulty = 3 then
4338: LD_OWVAR 67
4342: PUSH
4343: LD_INT 3
4345: EQUAL
4346: IFFALSE 4522
// begin RuSoldMinLevel = 1 ;
4348: LD_ADDR_EXP 16
4352: PUSH
4353: LD_INT 1
4355: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4356: LD_ADDR_EXP 17
4360: PUSH
4361: LD_INT 3
4363: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4364: LD_INT 13
4366: PPUSH
4367: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4371: LD_INT 14
4373: PPUSH
4374: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4378: LD_INT 26
4380: PPUSH
4381: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4385: LD_INT 23
4387: PPUSH
4388: CALL_OW 64
// uc_nation = 3 ;
4392: LD_ADDR_OWVAR 21
4396: PUSH
4397: LD_INT 3
4399: ST_TO_ADDR
// uc_side = 3 ;
4400: LD_ADDR_OWVAR 20
4404: PUSH
4405: LD_INT 3
4407: ST_TO_ADDR
// bc_level = 5 ;
4408: LD_ADDR_OWVAR 43
4412: PUSH
4413: LD_INT 5
4415: ST_TO_ADDR
// bc_type = 32 ;
4416: LD_ADDR_OWVAR 42
4420: PUSH
4421: LD_INT 32
4423: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4424: LD_ADDR_VAR 0 2
4428: PUSH
4429: LD_INT 76
4431: PPUSH
4432: LD_INT 91
4434: PPUSH
4435: LD_INT 2
4437: PPUSH
4438: CALL_OW 47
4442: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 44
4450: PPUSH
4451: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: LD_INT 83
4462: PPUSH
4463: LD_INT 84
4465: PPUSH
4466: LD_INT 2
4468: PPUSH
4469: CALL_OW 47
4473: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4474: LD_VAR 0 2
4478: PPUSH
4479: LD_INT 43
4481: PPUSH
4482: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4486: LD_INT 51
4488: PPUSH
4489: LD_INT 3
4491: PPUSH
4492: LD_INT 1
4494: PPUSH
4495: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4499: LD_INT 52
4501: PPUSH
4502: LD_INT 3
4504: PPUSH
4505: LD_INT 1
4507: PPUSH
4508: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4512: LD_INT 25
4514: PPUSH
4515: LD_INT 44
4517: PPUSH
4518: CALL_OW 431
// end ; end ;
4522: LD_VAR 0 1
4526: RET
// export function EnergyDialog ; begin
4527: LD_INT 0
4529: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4530: LD_INT 46
4532: PPUSH
4533: LD_INT 1
4535: PPUSH
4536: CALL_OW 321
4540: PUSH
4541: LD_INT 1
4543: EQUAL
4544: PUSH
4545: LD_INT 35
4547: PPUSH
4548: LD_INT 1
4550: PPUSH
4551: CALL_OW 321
4555: PUSH
4556: LD_INT 1
4558: EQUAL
4559: AND
4560: IFFALSE 4584
// begin Say ( JMM , D9c-JMM-1 ) ;
4562: LD_EXP 1
4566: PPUSH
4567: LD_STRING D9c-JMM-1
4569: PPUSH
4570: CALL_OW 88
// energyVDialog = 1 ;
4574: LD_ADDR_EXP 33
4578: PUSH
4579: LD_INT 1
4581: ST_TO_ADDR
// end else
4582: GO 4738
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4584: LD_INT 35
4586: PPUSH
4587: LD_INT 1
4589: PPUSH
4590: CALL_OW 321
4594: PUSH
4595: LD_INT 2
4597: EQUAL
4598: PUSH
4599: LD_EXP 33
4603: PUSH
4604: LD_INT 0
4606: EQUAL
4607: AND
4608: IFFALSE 4630
// begin Say ( JMM , D9c-JMM-1a ) ;
4610: LD_EXP 1
4614: PPUSH
4615: LD_STRING D9c-JMM-1a
4617: PPUSH
4618: CALL_OW 88
// energyVDialog = 1 ;
4622: LD_ADDR_EXP 33
4626: PUSH
4627: LD_INT 1
4629: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4630: LD_INT 46
4632: PPUSH
4633: LD_INT 1
4635: PPUSH
4636: CALL_OW 321
4640: PUSH
4641: LD_INT 2
4643: EQUAL
4644: PUSH
4645: LD_EXP 33
4649: PUSH
4650: LD_INT 0
4652: EQUAL
4653: AND
4654: IFFALSE 4676
// begin Say ( JMM , D9c-JMM-1b ) ;
4656: LD_EXP 1
4660: PPUSH
4661: LD_STRING D9c-JMM-1b
4663: PPUSH
4664: CALL_OW 88
// energyVDialog = 1 ;
4668: LD_ADDR_EXP 33
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4676: LD_INT 46
4678: PPUSH
4679: LD_INT 1
4681: PPUSH
4682: CALL_OW 321
4686: PUSH
4687: LD_INT 2
4689: EQUAL
4690: PUSH
4691: LD_INT 21
4693: PPUSH
4694: LD_INT 1
4696: PPUSH
4697: CALL_OW 321
4701: PUSH
4702: LD_INT 2
4704: EQUAL
4705: AND
4706: PUSH
4707: LD_EXP 33
4711: PUSH
4712: LD_INT 0
4714: EQUAL
4715: AND
4716: IFFALSE 4738
// begin Say ( JMM , D9c-JMM-1c ) ;
4718: LD_EXP 1
4722: PPUSH
4723: LD_STRING D9c-JMM-1c
4725: PPUSH
4726: CALL_OW 88
// energyVDialog = 1 ;
4730: LD_ADDR_EXP 33
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// end ; end ; end ;
4738: LD_VAR 0 1
4742: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4743: LD_INT 0
4745: PPUSH
4746: PPUSH
4747: PPUSH
4748: PPUSH
4749: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4750: LD_VAR 0 1
4754: NOT
4755: PUSH
4756: LD_VAR 0 1
4760: PPUSH
4761: CALL_OW 256
4765: PUSH
4766: LD_INT 250
4768: LESS
4769: OR
4770: PUSH
4771: LD_VAR 0 1
4775: PPUSH
4776: CALL_OW 314
4780: PUSH
4781: LD_VAR 0 1
4785: PPUSH
4786: CALL_OW 261
4790: PUSH
4791: LD_INT 20
4793: GREATER
4794: AND
4795: OR
4796: IFFALSE 4800
// exit ;
4798: GO 5165
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4800: LD_VAR 0 1
4804: PPUSH
4805: CALL_OW 261
4809: PUSH
4810: LD_INT 20
4812: LESS
4813: PUSH
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 110
4823: PUSH
4824: LD_INT 21
4826: EQUAL
4827: NOT
4828: AND
4829: IFFALSE 4856
// begin ComStop ( bulldozer ) ;
4831: LD_VAR 0 1
4835: PPUSH
4836: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4840: LD_VAR 0 1
4844: PPUSH
4845: LD_INT 21
4847: PPUSH
4848: CALL_OW 109
// exit ;
4852: GO 5165
// end else
4854: GO 4883
// if GetFuel ( bulldozer ) > 20 then
4856: LD_VAR 0 1
4860: PPUSH
4861: CALL_OW 261
4865: PUSH
4866: LD_INT 20
4868: GREATER
4869: IFFALSE 4883
// SetTag ( bulldozer , 0 ) ;
4871: LD_VAR 0 1
4875: PPUSH
4876: LD_INT 0
4878: PPUSH
4879: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4883: LD_ADDR_VAR 0 5
4887: PUSH
4888: LD_VAR 0 2
4892: PPUSH
4893: CALL_OW 353
4897: ST_TO_ADDR
// tmp := [ ] ;
4898: LD_ADDR_VAR 0 6
4902: PUSH
4903: EMPTY
4904: ST_TO_ADDR
// for i = 1 to list do
4905: LD_ADDR_VAR 0 4
4909: PUSH
4910: DOUBLE
4911: LD_INT 1
4913: DEC
4914: ST_TO_ADDR
4915: LD_VAR 0 5
4919: PUSH
4920: FOR_TO
4921: IFFALSE 5019
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4923: LD_VAR 0 5
4927: PUSH
4928: LD_VAR 0 4
4932: ARRAY
4933: PUSH
4934: LD_INT 1
4936: ARRAY
4937: PPUSH
4938: LD_VAR 0 5
4942: PUSH
4943: LD_VAR 0 4
4947: ARRAY
4948: PUSH
4949: LD_INT 2
4951: ARRAY
4952: PPUSH
4953: CALL_OW 554
4957: IFFALSE 5017
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4959: LD_ADDR_VAR 0 6
4963: PUSH
4964: LD_VAR 0 6
4968: PPUSH
4969: LD_VAR 0 6
4973: PUSH
4974: LD_INT 1
4976: PLUS
4977: PPUSH
4978: LD_VAR 0 5
4982: PUSH
4983: LD_VAR 0 4
4987: ARRAY
4988: PUSH
4989: LD_INT 1
4991: ARRAY
4992: PUSH
4993: LD_VAR 0 5
4997: PUSH
4998: LD_VAR 0 4
5002: ARRAY
5003: PUSH
5004: LD_INT 2
5006: ARRAY
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PPUSH
5012: CALL_OW 1
5016: ST_TO_ADDR
// end ;
5017: GO 4920
5019: POP
5020: POP
// ComStop ( bulldozer ) ;
5021: LD_VAR 0 1
5025: PPUSH
5026: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5030: LD_ADDR_VAR 0 7
5034: PUSH
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 250
5044: PUSH
5045: LD_VAR 0 1
5049: PPUSH
5050: CALL_OW 251
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: ST_TO_ADDR
// for i = tmp downto 1 do
5059: LD_ADDR_VAR 0 4
5063: PUSH
5064: DOUBLE
5065: LD_VAR 0 6
5069: INC
5070: ST_TO_ADDR
5071: LD_INT 1
5073: PUSH
5074: FOR_DOWNTO
5075: IFFALSE 5163
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5077: LD_ADDR_VAR 0 7
5081: PUSH
5082: LD_VAR 0 7
5086: PUSH
5087: LD_INT 1
5089: ARRAY
5090: PPUSH
5091: LD_VAR 0 7
5095: PUSH
5096: LD_INT 2
5098: ARRAY
5099: PPUSH
5100: LD_VAR 0 6
5104: PPUSH
5105: CALL 5266 0 3
5109: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5110: LD_VAR 0 1
5114: PPUSH
5115: LD_VAR 0 7
5119: PUSH
5120: LD_INT 1
5122: ARRAY
5123: PPUSH
5124: LD_VAR 0 7
5128: PUSH
5129: LD_INT 2
5131: ARRAY
5132: PPUSH
5133: CALL 5170 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5137: LD_ADDR_VAR 0 6
5141: PUSH
5142: LD_VAR 0 6
5146: PPUSH
5147: LD_VAR 0 7
5151: PUSH
5152: LD_INT 3
5154: ARRAY
5155: PPUSH
5156: CALL_OW 3
5160: ST_TO_ADDR
// end ;
5161: GO 5074
5163: POP
5164: POP
// end ;
5165: LD_VAR 0 3
5169: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5170: LD_INT 0
5172: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5173: LD_VAR 0 2
5177: PPUSH
5178: LD_VAR 0 3
5182: PPUSH
5183: CALL_OW 351
5187: PUSH
5188: LD_VAR 0 2
5192: PPUSH
5193: LD_VAR 0 3
5197: PPUSH
5198: CALL_OW 554
5202: AND
5203: PUSH
5204: LD_VAR 0 2
5208: PPUSH
5209: LD_VAR 0 3
5213: PPUSH
5214: CALL_OW 488
5218: AND
5219: PUSH
5220: LD_VAR 0 2
5224: PPUSH
5225: LD_VAR 0 3
5229: PPUSH
5230: CALL_OW 428
5234: PUSH
5235: LD_INT 1
5237: NEG
5238: EQUAL
5239: AND
5240: IFFALSE 5261
// AddComMoveXY ( bulldozer , x , y ) ;
5242: LD_VAR 0 1
5246: PPUSH
5247: LD_VAR 0 2
5251: PPUSH
5252: LD_VAR 0 3
5256: PPUSH
5257: CALL_OW 171
// end ;
5261: LD_VAR 0 4
5265: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5266: LD_INT 0
5268: PPUSH
5269: PPUSH
5270: PPUSH
5271: PPUSH
5272: PPUSH
5273: PPUSH
5274: PPUSH
// dist := 99999 ;
5275: LD_ADDR_VAR 0 6
5279: PUSH
5280: LD_INT 99999
5282: ST_TO_ADDR
// for i = 1 to list do
5283: LD_ADDR_VAR 0 5
5287: PUSH
5288: DOUBLE
5289: LD_INT 1
5291: DEC
5292: ST_TO_ADDR
5293: LD_VAR 0 3
5297: PUSH
5298: FOR_TO
5299: IFFALSE 5437
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5301: LD_ADDR_VAR 0 7
5305: PUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PUSH
5321: LD_VAR 0 5
5325: ARRAY
5326: PUSH
5327: LD_INT 1
5329: ARRAY
5330: PPUSH
5331: LD_VAR 0 3
5335: PUSH
5336: LD_VAR 0 5
5340: ARRAY
5341: PUSH
5342: LD_INT 2
5344: ARRAY
5345: PPUSH
5346: CALL_OW 298
5350: ST_TO_ADDR
// if d = 0 then
5351: LD_VAR 0 7
5355: PUSH
5356: LD_INT 0
5358: EQUAL
5359: IFFALSE 5363
// continue ;
5361: GO 5298
// if d < dist then
5363: LD_VAR 0 7
5367: PUSH
5368: LD_VAR 0 6
5372: LESS
5373: IFFALSE 5435
// begin _x := list [ i ] [ 1 ] ;
5375: LD_ADDR_VAR 0 8
5379: PUSH
5380: LD_VAR 0 3
5384: PUSH
5385: LD_VAR 0 5
5389: ARRAY
5390: PUSH
5391: LD_INT 1
5393: ARRAY
5394: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5395: LD_ADDR_VAR 0 9
5399: PUSH
5400: LD_VAR 0 3
5404: PUSH
5405: LD_VAR 0 5
5409: ARRAY
5410: PUSH
5411: LD_INT 2
5413: ARRAY
5414: ST_TO_ADDR
// _i := i ;
5415: LD_ADDR_VAR 0 10
5419: PUSH
5420: LD_VAR 0 5
5424: ST_TO_ADDR
// dist := d ;
5425: LD_ADDR_VAR 0 6
5429: PUSH
5430: LD_VAR 0 7
5434: ST_TO_ADDR
// end ; end ;
5435: GO 5298
5437: POP
5438: POP
// result := [ _x , _y , _i , dist ] ;
5439: LD_ADDR_VAR 0 4
5443: PUSH
5444: LD_VAR 0 8
5448: PUSH
5449: LD_VAR 0 9
5453: PUSH
5454: LD_VAR 0 10
5458: PUSH
5459: LD_VAR 0 6
5463: PUSH
5464: EMPTY
5465: LIST
5466: LIST
5467: LIST
5468: LIST
5469: ST_TO_ADDR
// end ;
5470: LD_VAR 0 4
5474: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5475: LD_INT 0
5477: PPUSH
5478: PPUSH
5479: PPUSH
5480: PPUSH
// for i = 1 to 72 do
5481: LD_ADDR_VAR 0 5
5485: PUSH
5486: DOUBLE
5487: LD_INT 1
5489: DEC
5490: ST_TO_ADDR
5491: LD_INT 72
5493: PUSH
5494: FOR_TO
5495: IFFALSE 5553
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5497: LD_VAR 0 5
5501: PPUSH
5502: LD_VAR 0 1
5506: PPUSH
5507: CALL_OW 321
5511: PUSH
5512: LD_INT 1
5514: EQUAL
5515: PUSH
5516: LD_VAR 0 5
5520: PPUSH
5521: LD_VAR 0 3
5525: PPUSH
5526: CALL_OW 482
5530: PUSH
5531: LD_INT 1
5533: EQUAL
5534: AND
5535: IFFALSE 5551
// AddComResearch ( lab , i ) ;
5537: LD_VAR 0 2
5541: PPUSH
5542: LD_VAR 0 5
5546: PPUSH
5547: CALL_OW 184
5551: GO 5494
5553: POP
5554: POP
// end ;
5555: LD_VAR 0 4
5559: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5560: LD_INT 0
5562: PPUSH
5563: PPUSH
5564: PPUSH
5565: PPUSH
5566: PPUSH
5567: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5568: LD_ADDR_VAR 0 7
5572: PUSH
5573: LD_VAR 0 2
5577: PPUSH
5578: CALL_OW 313
5582: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5583: LD_ADDR_VAR 0 8
5587: PUSH
5588: LD_VAR 0 3
5592: PPUSH
5593: LD_INT 22
5595: PUSH
5596: LD_VAR 0 1
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PUSH
5605: LD_INT 25
5607: PUSH
5608: LD_INT 2
5610: PUSH
5611: EMPTY
5612: LIST
5613: LIST
5614: PUSH
5615: LD_INT 24
5617: PUSH
5618: LD_INT 750
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PUSH
5625: LD_INT 3
5627: PUSH
5628: LD_INT 54
5630: PUSH
5631: EMPTY
5632: LIST
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: LIST
5642: LIST
5643: PPUSH
5644: CALL_OW 70
5648: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5649: LD_ADDR_VAR 0 5
5653: PUSH
5654: LD_VAR 0 3
5658: PPUSH
5659: LD_INT 22
5661: PUSH
5662: LD_VAR 0 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 21
5673: PUSH
5674: LD_INT 3
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 3
5683: PUSH
5684: LD_INT 24
5686: PUSH
5687: LD_INT 1000
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: PPUSH
5706: CALL_OW 70
5710: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5711: LD_VAR 0 5
5715: NOT
5716: PUSH
5717: LD_INT 22
5719: PUSH
5720: LD_VAR 0 1
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 25
5731: PUSH
5732: LD_INT 2
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 24
5741: PUSH
5742: LD_INT 250
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: NOT
5759: AND
5760: IFFALSE 5764
// exit ;
5762: GO 5861
// if buildings_list > 0 and engineerOkInside then
5764: LD_VAR 0 5
5768: PUSH
5769: LD_INT 0
5771: GREATER
5772: PUSH
5773: LD_VAR 0 7
5777: AND
5778: IFFALSE 5789
// ComExitBuilding ( engineerOkInside ) ;
5780: LD_VAR 0 7
5784: PPUSH
5785: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5789: LD_VAR 0 5
5793: PUSH
5794: LD_INT 0
5796: GREATER
5797: PUSH
5798: LD_VAR 0 8
5802: PUSH
5803: LD_INT 0
5805: GREATER
5806: AND
5807: IFFALSE 5827
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5809: LD_VAR 0 8
5813: PPUSH
5814: LD_VAR 0 5
5818: PUSH
5819: LD_INT 1
5821: ARRAY
5822: PPUSH
5823: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5827: LD_VAR 0 5
5831: PUSH
5832: LD_INT 0
5834: EQUAL
5835: PUSH
5836: LD_VAR 0 8
5840: PUSH
5841: LD_INT 0
5843: GREATER
5844: AND
5845: IFFALSE 5861
// ComEnterUnit ( engineerOkOutside , building ) ;
5847: LD_VAR 0 8
5851: PPUSH
5852: LD_VAR 0 2
5856: PPUSH
5857: CALL_OW 120
// end ;
5861: LD_VAR 0 4
5865: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5866: LD_INT 0
5868: PPUSH
5869: PPUSH
5870: PPUSH
5871: PPUSH
5872: PPUSH
5873: PPUSH
5874: PPUSH
5875: PPUSH
5876: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5877: LD_ADDR_VAR 0 6
5881: PUSH
5882: LD_INT 22
5884: PUSH
5885: LD_VAR 0 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 25
5896: PUSH
5897: LD_INT 4
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 23
5906: PUSH
5907: LD_INT 2
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 24
5916: PUSH
5917: LD_INT 251
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: LIST
5928: LIST
5929: PPUSH
5930: CALL_OW 69
5934: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5935: LD_ADDR_VAR 0 7
5939: PUSH
5940: LD_VAR 0 3
5944: PPUSH
5945: LD_INT 22
5947: PUSH
5948: LD_VAR 0 1
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 23
5959: PUSH
5960: LD_INT 2
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 25
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 50
5979: PUSH
5980: EMPTY
5981: LIST
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: PPUSH
5989: CALL_OW 70
5993: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5994: LD_ADDR_VAR 0 10
5998: PUSH
5999: LD_VAR 0 3
6003: PPUSH
6004: LD_INT 22
6006: PUSH
6007: LD_VAR 0 1
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 21
6018: PUSH
6019: LD_INT 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 3
6028: PUSH
6029: LD_INT 25
6031: PUSH
6032: LD_INT 3
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: PUSH
6039: EMPTY
6040: LIST
6041: LIST
6042: PUSH
6043: LD_INT 3
6045: PUSH
6046: LD_INT 24
6048: PUSH
6049: LD_INT 750
6051: PUSH
6052: EMPTY
6053: LIST
6054: LIST
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: PPUSH
6066: CALL_OW 70
6070: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6071: LD_ADDR_VAR 0 11
6075: PUSH
6076: LD_VAR 0 2
6080: PPUSH
6081: LD_INT 22
6083: PUSH
6084: LD_VAR 0 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 21
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 3
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PUSH
6120: LD_INT 3
6122: PUSH
6123: LD_INT 24
6125: PUSH
6126: LD_INT 1000
6128: PUSH
6129: EMPTY
6130: LIST
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 70
6147: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6148: LD_VAR 0 10
6152: NOT
6153: PUSH
6154: LD_VAR 0 11
6158: NOT
6159: AND
6160: PUSH
6161: LD_VAR 0 6
6165: NOT
6166: AND
6167: IFFALSE 6171
// exit ;
6169: GO 6405
// if damageUnits > 0 and sci_list > 0 then
6171: LD_VAR 0 10
6175: PUSH
6176: LD_INT 0
6178: GREATER
6179: PUSH
6180: LD_VAR 0 6
6184: PUSH
6185: LD_INT 0
6187: GREATER
6188: AND
6189: IFFALSE 6205
// ComMoveToArea ( damageUnits , healArea ) ;
6191: LD_VAR 0 10
6195: PPUSH
6196: LD_VAR 0 2
6200: PPUSH
6201: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6205: LD_VAR 0 11
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: PUSH
6214: LD_VAR 0 6
6218: PUSH
6219: LD_INT 0
6221: GREATER
6222: AND
6223: IFFALSE 6234
// ComExitBuilding ( sci_list ) ;
6225: LD_VAR 0 6
6229: PPUSH
6230: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6234: LD_VAR 0 11
6238: PUSH
6239: LD_INT 0
6241: GREATER
6242: PUSH
6243: LD_VAR 0 7
6247: PUSH
6248: LD_INT 0
6250: GREATER
6251: AND
6252: IFFALSE 6272
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6254: LD_VAR 0 7
6258: PPUSH
6259: LD_VAR 0 11
6263: PUSH
6264: LD_INT 1
6266: ARRAY
6267: PPUSH
6268: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6272: LD_VAR 0 10
6276: PUSH
6277: LD_INT 0
6279: EQUAL
6280: PUSH
6281: LD_VAR 0 11
6285: PUSH
6286: LD_INT 0
6288: EQUAL
6289: AND
6290: PUSH
6291: LD_VAR 0 7
6295: PUSH
6296: LD_INT 0
6298: GREATER
6299: AND
6300: IFFALSE 6405
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6302: LD_ADDR_VAR 0 12
6306: PUSH
6307: LD_INT 22
6309: PUSH
6310: LD_VAR 0 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 21
6321: PUSH
6322: LD_INT 3
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PUSH
6329: LD_INT 30
6331: PUSH
6332: LD_INT 8
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: PPUSH
6344: CALL_OW 69
6348: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6349: LD_ADDR_VAR 0 13
6353: PUSH
6354: LD_INT 1
6356: PPUSH
6357: LD_VAR 0 12
6361: PPUSH
6362: CALL_OW 12
6366: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6367: LD_VAR 0 7
6371: PPUSH
6372: LD_INT 3
6374: PUSH
6375: LD_INT 60
6377: PUSH
6378: EMPTY
6379: LIST
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PPUSH
6385: CALL_OW 72
6389: PPUSH
6390: LD_VAR 0 12
6394: PUSH
6395: LD_VAR 0 13
6399: ARRAY
6400: PPUSH
6401: CALL_OW 120
// end ; end ;
6405: LD_VAR 0 5
6409: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6410: LD_INT 0
6412: PPUSH
6413: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6414: LD_INT 22
6416: PUSH
6417: LD_VAR 0 1
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: PUSH
6426: LD_INT 21
6428: PUSH
6429: LD_INT 2
6431: PUSH
6432: EMPTY
6433: LIST
6434: LIST
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: PPUSH
6440: CALL_OW 69
6444: PUSH
6445: LD_VAR 0 3
6449: LESSEQUAL
6450: IFFALSE 6517
// for i = 1 to vehCount do
6452: LD_ADDR_VAR 0 9
6456: PUSH
6457: DOUBLE
6458: LD_INT 1
6460: DEC
6461: ST_TO_ADDR
6462: LD_VAR 0 3
6466: PUSH
6467: FOR_TO
6468: IFFALSE 6515
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6470: LD_VAR 0 2
6474: PPUSH
6475: LD_VAR 0 7
6479: PPUSH
6480: LD_VAR 0 5
6484: PPUSH
6485: LD_VAR 0 6
6489: PPUSH
6490: LD_VAR 0 4
6494: PUSH
6495: LD_INT 1
6497: PPUSH
6498: LD_VAR 0 4
6502: PPUSH
6503: CALL_OW 12
6507: ARRAY
6508: PPUSH
6509: CALL_OW 185
6513: GO 6467
6515: POP
6516: POP
// end ;
6517: LD_VAR 0 8
6521: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
6526: PPUSH
6527: PPUSH
6528: PPUSH
6529: PPUSH
6530: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6531: LD_ADDR_VAR 0 8
6535: PUSH
6536: LD_INT 22
6538: PUSH
6539: LD_VAR 0 1
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: LD_INT 21
6550: PUSH
6551: LD_INT 2
6553: PUSH
6554: EMPTY
6555: LIST
6556: LIST
6557: PUSH
6558: LD_INT 24
6560: PUSH
6561: LD_INT 650
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: EMPTY
6569: LIST
6570: LIST
6571: LIST
6572: PPUSH
6573: CALL_OW 69
6577: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6578: LD_INT 22
6580: PUSH
6581: LD_VAR 0 1
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: LD_INT 21
6592: PUSH
6593: LD_INT 2
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: PUSH
6600: LD_INT 24
6602: PUSH
6603: LD_INT 1000
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 69
6619: PUSH
6620: LD_INT 3
6622: PUSH
6623: LD_INT 4
6625: PUSH
6626: LD_INT 5
6628: PUSH
6629: EMPTY
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: LD_OWVAR 67
6638: ARRAY
6639: GREATEREQUAL
6640: IFFALSE 7097
// repeat wait ( 0 0$1 ) ;
6642: LD_INT 35
6644: PPUSH
6645: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6649: LD_ADDR_VAR 0 8
6653: PUSH
6654: LD_INT 22
6656: PUSH
6657: LD_VAR 0 1
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: EMPTY
6673: LIST
6674: LIST
6675: PUSH
6676: LD_INT 24
6678: PUSH
6679: LD_INT 650
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: LIST
6690: PPUSH
6691: CALL_OW 69
6695: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6696: LD_INT 22
6698: PUSH
6699: LD_VAR 0 1
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 95
6710: PUSH
6711: LD_VAR 0 2
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: NOT
6729: PUSH
6730: LD_VAR 0 11
6734: PUSH
6735: LD_INT 0
6737: EQUAL
6738: AND
6739: IFFALSE 6794
// for i := 1 to wayX do
6741: LD_ADDR_VAR 0 6
6745: PUSH
6746: DOUBLE
6747: LD_INT 1
6749: DEC
6750: ST_TO_ADDR
6751: LD_VAR 0 3
6755: PUSH
6756: FOR_TO
6757: IFFALSE 6792
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6759: LD_VAR 0 8
6763: PPUSH
6764: LD_VAR 0 3
6768: PUSH
6769: LD_VAR 0 6
6773: ARRAY
6774: PPUSH
6775: LD_VAR 0 4
6779: PUSH
6780: LD_VAR 0 6
6784: ARRAY
6785: PPUSH
6786: CALL_OW 174
6790: GO 6756
6792: POP
6793: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6794: LD_INT 22
6796: PUSH
6797: LD_VAR 0 1
6801: PUSH
6802: EMPTY
6803: LIST
6804: LIST
6805: PUSH
6806: LD_INT 95
6808: PUSH
6809: LD_VAR 0 2
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: IFFALSE 7050
// begin seeEnemy = 1 ;
6828: LD_ADDR_VAR 0 11
6832: PUSH
6833: LD_INT 1
6835: ST_TO_ADDR
// for j in vehiclesOK do
6836: LD_ADDR_VAR 0 7
6840: PUSH
6841: LD_VAR 0 8
6845: PUSH
6846: FOR_IN
6847: IFFALSE 7048
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6849: LD_ADDR_VAR 0 9
6853: PUSH
6854: LD_INT 81
6856: PUSH
6857: LD_VAR 0 1
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 101
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: PPUSH
6880: CALL_OW 69
6884: PPUSH
6885: LD_VAR 0 7
6889: PPUSH
6890: CALL_OW 74
6894: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6895: LD_ADDR_VAR 0 10
6899: PUSH
6900: LD_INT 81
6902: PUSH
6903: LD_VAR 0 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 101
6914: PUSH
6915: LD_INT 1
6917: PUSH
6918: EMPTY
6919: LIST
6920: LIST
6921: PUSH
6922: LD_INT 2
6924: PUSH
6925: LD_INT 59
6927: PUSH
6928: EMPTY
6929: LIST
6930: PUSH
6931: LD_INT 21
6933: PUSH
6934: LD_INT 1
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 21
6943: PUSH
6944: LD_INT 2
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: PUSH
6957: EMPTY
6958: LIST
6959: LIST
6960: LIST
6961: PUSH
6962: EMPTY
6963: LIST
6964: PPUSH
6965: CALL_OW 69
6969: PPUSH
6970: LD_VAR 0 7
6974: PPUSH
6975: CALL_OW 74
6979: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
6980: LD_VAR 0 7
6984: PPUSH
6985: LD_VAR 0 9
6989: PPUSH
6990: CALL_OW 296
6994: PUSH
6995: LD_INT 8
6997: PLUS
6998: PUSH
6999: LD_VAR 0 7
7003: PPUSH
7004: LD_VAR 0 10
7008: PPUSH
7009: CALL_OW 296
7013: LESS
7014: IFFALSE 7032
// ComAttackUnit ( j , target1 ) else
7016: LD_VAR 0 7
7020: PPUSH
7021: LD_VAR 0 9
7025: PPUSH
7026: CALL_OW 115
7030: GO 7046
// ComAttackUnit ( j , target2 ) ;
7032: LD_VAR 0 7
7036: PPUSH
7037: LD_VAR 0 10
7041: PPUSH
7042: CALL_OW 115
// end ;
7046: GO 6846
7048: POP
7049: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7050: LD_INT 22
7052: PUSH
7053: LD_VAR 0 1
7057: PUSH
7058: EMPTY
7059: LIST
7060: LIST
7061: PUSH
7062: LD_INT 21
7064: PUSH
7065: LD_INT 2
7067: PUSH
7068: EMPTY
7069: LIST
7070: LIST
7071: PUSH
7072: LD_INT 24
7074: PUSH
7075: LD_INT 1000
7077: PUSH
7078: EMPTY
7079: LIST
7080: LIST
7081: PUSH
7082: EMPTY
7083: LIST
7084: LIST
7085: LIST
7086: PPUSH
7087: CALL_OW 69
7091: PUSH
7092: LD_INT 0
7094: EQUAL
7095: IFFALSE 6642
// seeEnemy = 0 ;
7097: LD_ADDR_VAR 0 11
7101: PUSH
7102: LD_INT 0
7104: ST_TO_ADDR
// end ;
7105: LD_VAR 0 5
7109: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7110: LD_INT 0
7112: PPUSH
7113: PPUSH
7114: PPUSH
7115: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7116: LD_ADDR_VAR 0 8
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_VAR 0 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 21
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: LD_INT 24
7148: PUSH
7149: LD_INT 650
7151: PUSH
7152: EMPTY
7153: LIST
7154: LIST
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: EMPTY
7161: LIST
7162: LIST
7163: LIST
7164: PPUSH
7165: CALL_OW 69
7169: ST_TO_ADDR
// if damageVehicles > 0 then
7170: LD_VAR 0 8
7174: PUSH
7175: LD_INT 0
7177: GREATER
7178: IFFALSE 7199
// ComMoveXY ( damageVehicles , repX , repY ) ;
7180: LD_VAR 0 8
7184: PPUSH
7185: LD_VAR 0 3
7189: PPUSH
7190: LD_VAR 0 4
7194: PPUSH
7195: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7199: LD_VAR 0 8
7203: PPUSH
7204: LD_INT 95
7206: PUSH
7207: LD_VAR 0 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 3
7218: PUSH
7219: LD_INT 58
7221: PUSH
7222: EMPTY
7223: LIST
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PPUSH
7233: CALL_OW 72
7237: PUSH
7238: LD_INT 0
7240: GREATER
7241: IFFALSE 7308
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7243: LD_ADDR_VAR 0 6
7247: PUSH
7248: LD_VAR 0 8
7252: PPUSH
7253: LD_INT 95
7255: PUSH
7256: LD_VAR 0 2
7260: PUSH
7261: EMPTY
7262: LIST
7263: LIST
7264: PUSH
7265: LD_INT 3
7267: PUSH
7268: LD_INT 58
7270: PUSH
7271: EMPTY
7272: LIST
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PPUSH
7282: CALL_OW 72
7286: PUSH
7287: FOR_IN
7288: IFFALSE 7306
// ComExitVehicle ( UnitsInside ( i ) ) ;
7290: LD_VAR 0 6
7294: PPUSH
7295: CALL_OW 313
7299: PPUSH
7300: CALL_OW 121
7304: GO 7287
7306: POP
7307: POP
// end ;
7308: LD_VAR 0 5
7312: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
7324: PPUSH
7325: PPUSH
// for i = 1 to medicCount do
7326: LD_ADDR_VAR 0 14
7330: PUSH
7331: DOUBLE
7332: LD_INT 1
7334: DEC
7335: ST_TO_ADDR
7336: LD_VAR 0 7
7340: PUSH
7341: FOR_TO
7342: IFFALSE 7424
// begin uc_side = side ;
7344: LD_ADDR_OWVAR 20
7348: PUSH
7349: LD_VAR 0 1
7353: ST_TO_ADDR
// uc_nation = nation ;
7354: LD_ADDR_OWVAR 21
7358: PUSH
7359: LD_VAR 0 2
7363: ST_TO_ADDR
// hc_name =  ;
7364: LD_ADDR_OWVAR 26
7368: PUSH
7369: LD_STRING 
7371: ST_TO_ADDR
// hc_gallery =  ;
7372: LD_ADDR_OWVAR 33
7376: PUSH
7377: LD_STRING 
7379: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7380: LD_INT 0
7382: PPUSH
7383: LD_INT 4
7385: PPUSH
7386: LD_VAR 0 8
7390: PPUSH
7391: CALL_OW 380
// un = CreateHuman ;
7395: LD_ADDR_VAR 0 16
7399: PUSH
7400: CALL_OW 44
7404: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7405: LD_VAR 0 16
7409: PPUSH
7410: LD_VAR 0 9
7414: PPUSH
7415: LD_INT 0
7417: PPUSH
7418: CALL_OW 49
// end ;
7422: GO 7341
7424: POP
7425: POP
// for i = 1 to soldierCount do
7426: LD_ADDR_VAR 0 14
7430: PUSH
7431: DOUBLE
7432: LD_INT 1
7434: DEC
7435: ST_TO_ADDR
7436: LD_VAR 0 3
7440: PUSH
7441: FOR_TO
7442: IFFALSE 7524
// begin uc_side = side ;
7444: LD_ADDR_OWVAR 20
7448: PUSH
7449: LD_VAR 0 1
7453: ST_TO_ADDR
// uc_nation = nation ;
7454: LD_ADDR_OWVAR 21
7458: PUSH
7459: LD_VAR 0 2
7463: ST_TO_ADDR
// hc_name =  ;
7464: LD_ADDR_OWVAR 26
7468: PUSH
7469: LD_STRING 
7471: ST_TO_ADDR
// hc_gallery =  ;
7472: LD_ADDR_OWVAR 33
7476: PUSH
7477: LD_STRING 
7479: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7480: LD_INT 0
7482: PPUSH
7483: LD_INT 1
7485: PPUSH
7486: LD_VAR 0 8
7490: PPUSH
7491: CALL_OW 380
// un = CreateHuman ;
7495: LD_ADDR_VAR 0 16
7499: PUSH
7500: CALL_OW 44
7504: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7505: LD_VAR 0 16
7509: PPUSH
7510: LD_VAR 0 9
7514: PPUSH
7515: LD_INT 0
7517: PPUSH
7518: CALL_OW 49
// end ;
7522: GO 7441
7524: POP
7525: POP
// for i = 1 to sniperCount do
7526: LD_ADDR_VAR 0 14
7530: PUSH
7531: DOUBLE
7532: LD_INT 1
7534: DEC
7535: ST_TO_ADDR
7536: LD_VAR 0 4
7540: PUSH
7541: FOR_TO
7542: IFFALSE 7624
// begin uc_side = side ;
7544: LD_ADDR_OWVAR 20
7548: PUSH
7549: LD_VAR 0 1
7553: ST_TO_ADDR
// uc_nation = nation ;
7554: LD_ADDR_OWVAR 21
7558: PUSH
7559: LD_VAR 0 2
7563: ST_TO_ADDR
// hc_name =  ;
7564: LD_ADDR_OWVAR 26
7568: PUSH
7569: LD_STRING 
7571: ST_TO_ADDR
// hc_gallery =  ;
7572: LD_ADDR_OWVAR 33
7576: PUSH
7577: LD_STRING 
7579: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7580: LD_INT 0
7582: PPUSH
7583: LD_INT 5
7585: PPUSH
7586: LD_VAR 0 8
7590: PPUSH
7591: CALL_OW 380
// un = CreateHuman ;
7595: LD_ADDR_VAR 0 16
7599: PUSH
7600: CALL_OW 44
7604: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7605: LD_VAR 0 16
7609: PPUSH
7610: LD_VAR 0 9
7614: PPUSH
7615: LD_INT 0
7617: PPUSH
7618: CALL_OW 49
// end ;
7622: GO 7541
7624: POP
7625: POP
// for i = 1 to bazookCount do
7626: LD_ADDR_VAR 0 14
7630: PUSH
7631: DOUBLE
7632: LD_INT 1
7634: DEC
7635: ST_TO_ADDR
7636: LD_VAR 0 5
7640: PUSH
7641: FOR_TO
7642: IFFALSE 7724
// begin uc_side = side ;
7644: LD_ADDR_OWVAR 20
7648: PUSH
7649: LD_VAR 0 1
7653: ST_TO_ADDR
// uc_nation = nation ;
7654: LD_ADDR_OWVAR 21
7658: PUSH
7659: LD_VAR 0 2
7663: ST_TO_ADDR
// hc_name =  ;
7664: LD_ADDR_OWVAR 26
7668: PUSH
7669: LD_STRING 
7671: ST_TO_ADDR
// hc_gallery =  ;
7672: LD_ADDR_OWVAR 33
7676: PUSH
7677: LD_STRING 
7679: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7680: LD_INT 0
7682: PPUSH
7683: LD_INT 9
7685: PPUSH
7686: LD_VAR 0 8
7690: PPUSH
7691: CALL_OW 380
// un = CreateHuman ;
7695: LD_ADDR_VAR 0 16
7699: PUSH
7700: CALL_OW 44
7704: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7705: LD_VAR 0 16
7709: PPUSH
7710: LD_VAR 0 9
7714: PPUSH
7715: LD_INT 0
7717: PPUSH
7718: CALL_OW 49
// end ;
7722: GO 7641
7724: POP
7725: POP
// for i = 1 to mortalCount do
7726: LD_ADDR_VAR 0 14
7730: PUSH
7731: DOUBLE
7732: LD_INT 1
7734: DEC
7735: ST_TO_ADDR
7736: LD_VAR 0 6
7740: PUSH
7741: FOR_TO
7742: IFFALSE 7824
// begin uc_side = side ;
7744: LD_ADDR_OWVAR 20
7748: PUSH
7749: LD_VAR 0 1
7753: ST_TO_ADDR
// uc_nation = nation ;
7754: LD_ADDR_OWVAR 21
7758: PUSH
7759: LD_VAR 0 2
7763: ST_TO_ADDR
// hc_name =  ;
7764: LD_ADDR_OWVAR 26
7768: PUSH
7769: LD_STRING 
7771: ST_TO_ADDR
// hc_gallery =  ;
7772: LD_ADDR_OWVAR 33
7776: PUSH
7777: LD_STRING 
7779: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7780: LD_INT 0
7782: PPUSH
7783: LD_INT 8
7785: PPUSH
7786: LD_VAR 0 8
7790: PPUSH
7791: CALL_OW 380
// un = CreateHuman ;
7795: LD_ADDR_VAR 0 16
7799: PUSH
7800: CALL_OW 44
7804: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7805: LD_VAR 0 16
7809: PPUSH
7810: LD_VAR 0 9
7814: PPUSH
7815: LD_INT 0
7817: PPUSH
7818: CALL_OW 49
// end ;
7822: GO 7741
7824: POP
7825: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7826: LD_ADDR_VAR 0 19
7830: PUSH
7831: LD_INT 22
7833: PUSH
7834: LD_VAR 0 1
7838: PUSH
7839: EMPTY
7840: LIST
7841: LIST
7842: PUSH
7843: LD_INT 2
7845: PUSH
7846: LD_INT 25
7848: PUSH
7849: LD_INT 1
7851: PUSH
7852: EMPTY
7853: LIST
7854: LIST
7855: PUSH
7856: LD_INT 25
7858: PUSH
7859: LD_INT 5
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PUSH
7866: LD_INT 25
7868: PUSH
7869: LD_INT 8
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 25
7878: PUSH
7879: LD_INT 9
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PPUSH
7897: CALL_OW 69
7901: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7902: LD_ADDR_VAR 0 18
7906: PUSH
7907: LD_INT 22
7909: PUSH
7910: LD_VAR 0 1
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 4
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: PPUSH
7933: CALL_OW 69
7937: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7938: LD_VAR 0 18
7942: PPUSH
7943: LD_VAR 0 10
7947: PPUSH
7948: CALL_OW 113
// if strategy = 1 then
7952: LD_VAR 0 12
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: IFFALSE 8476
// begin repeat wait ( 0 0$3 ) ;
7962: LD_INT 105
7964: PPUSH
7965: CALL_OW 67
// for i in soldiersOK_list do
7969: LD_ADDR_VAR 0 14
7973: PUSH
7974: LD_VAR 0 19
7978: PUSH
7979: FOR_IN
7980: IFFALSE 8044
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7982: LD_VAR 0 14
7986: PPUSH
7987: LD_INT 91
7989: PPUSH
7990: LD_INT 63
7992: PPUSH
7993: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7997: LD_VAR 0 14
8001: PPUSH
8002: LD_INT 101
8004: PPUSH
8005: LD_INT 53
8007: PPUSH
8008: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8012: LD_VAR 0 14
8016: PPUSH
8017: LD_INT 75
8019: PPUSH
8020: LD_INT 23
8022: PPUSH
8023: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8027: LD_VAR 0 14
8031: PPUSH
8032: LD_INT 78
8034: PPUSH
8035: LD_INT 8
8037: PPUSH
8038: CALL_OW 174
// end ;
8042: GO 7979
8044: POP
8045: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8046: LD_INT 15
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_VAR 0 1
8056: PUSH
8057: EMPTY
8058: LIST
8059: LIST
8060: PPUSH
8061: CALL_OW 70
8065: PUSH
8066: LD_INT 2
8068: GREATER
8069: IFFALSE 7962
// repeat wait ( 0 0$1 ) ;
8071: LD_INT 35
8073: PPUSH
8074: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8078: LD_ADDR_VAR 0 17
8082: PUSH
8083: LD_INT 22
8085: PUSH
8086: LD_VAR 0 1
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_INT 1
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 24
8103: PUSH
8104: LD_INT 550
8106: PUSH
8107: EMPTY
8108: LIST
8109: LIST
8110: PUSH
8111: EMPTY
8112: LIST
8113: LIST
8114: PUSH
8115: LD_INT 24
8117: PUSH
8118: LD_INT 250
8120: PUSH
8121: EMPTY
8122: LIST
8123: LIST
8124: PUSH
8125: EMPTY
8126: LIST
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PPUSH
8134: CALL_OW 69
8138: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8139: LD_ADDR_VAR 0 19
8143: PUSH
8144: LD_INT 22
8146: PUSH
8147: LD_VAR 0 1
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: LD_INT 2
8158: PUSH
8159: LD_INT 25
8161: PUSH
8162: LD_INT 1
8164: PUSH
8165: EMPTY
8166: LIST
8167: LIST
8168: PUSH
8169: LD_INT 25
8171: PUSH
8172: LD_INT 5
8174: PUSH
8175: EMPTY
8176: LIST
8177: LIST
8178: PUSH
8179: LD_INT 25
8181: PUSH
8182: LD_INT 8
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 25
8191: PUSH
8192: LD_INT 9
8194: PUSH
8195: EMPTY
8196: LIST
8197: LIST
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 24
8208: PUSH
8209: LD_INT 1000
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: PUSH
8216: EMPTY
8217: LIST
8218: LIST
8219: LIST
8220: PPUSH
8221: CALL_OW 69
8225: ST_TO_ADDR
// if medicCount > 0 then
8226: LD_VAR 0 7
8230: PUSH
8231: LD_INT 0
8233: GREATER
8234: IFFALSE 8278
// begin if damageUnit_list > 0 then
8236: LD_VAR 0 17
8240: PUSH
8241: LD_INT 0
8243: GREATER
8244: IFFALSE 8278
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8246: LD_VAR 0 17
8250: PPUSH
8251: LD_VAR 0 10
8255: PPUSH
8256: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8260: LD_VAR 0 7
8264: PPUSH
8265: LD_VAR 0 17
8269: PUSH
8270: LD_INT 1
8272: ARRAY
8273: PPUSH
8274: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8278: LD_ADDR_VAR 0 14
8282: PUSH
8283: LD_VAR 0 19
8287: PUSH
8288: FOR_IN
8289: IFFALSE 8465
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8291: LD_ADDR_VAR 0 22
8295: PUSH
8296: LD_INT 22
8298: PUSH
8299: LD_VAR 0 11
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: PPUSH
8308: CALL_OW 69
8312: PPUSH
8313: LD_VAR 0 14
8317: PPUSH
8318: CALL_OW 74
8322: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8323: LD_ADDR_VAR 0 23
8327: PUSH
8328: LD_INT 22
8330: PUSH
8331: LD_VAR 0 11
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 59
8345: PUSH
8346: EMPTY
8347: LIST
8348: PUSH
8349: LD_INT 21
8351: PUSH
8352: LD_INT 1
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_INT 21
8361: PUSH
8362: LD_INT 2
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: PPUSH
8382: CALL_OW 69
8386: PPUSH
8387: LD_VAR 0 14
8391: PPUSH
8392: CALL_OW 74
8396: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8397: LD_VAR 0 14
8401: PPUSH
8402: LD_VAR 0 22
8406: PPUSH
8407: CALL_OW 296
8411: PUSH
8412: LD_INT 8
8414: PLUS
8415: PUSH
8416: LD_VAR 0 14
8420: PPUSH
8421: LD_VAR 0 23
8425: PPUSH
8426: CALL_OW 296
8430: LESS
8431: IFFALSE 8449
// begin ComAttackUnit ( i , target1 ) ;
8433: LD_VAR 0 14
8437: PPUSH
8438: LD_VAR 0 22
8442: PPUSH
8443: CALL_OW 115
// end else
8447: GO 8463
// begin ComAttackUnit ( i , target2 ) ;
8449: LD_VAR 0 14
8453: PPUSH
8454: LD_VAR 0 23
8458: PPUSH
8459: CALL_OW 115
// end ; end ;
8463: GO 8288
8465: POP
8466: POP
// until soldiersOK_list = [ ] ;
8467: LD_VAR 0 19
8471: PUSH
8472: EMPTY
8473: EQUAL
8474: IFFALSE 8071
// end ; if strategy = 2 then
8476: LD_VAR 0 12
8480: PUSH
8481: LD_INT 2
8483: EQUAL
8484: IFFALSE 8970
// begin repeat wait ( 0 0$1 ) ;
8486: LD_INT 35
8488: PPUSH
8489: CALL_OW 67
// for i in soldiersOK_list do
8493: LD_ADDR_VAR 0 14
8497: PUSH
8498: LD_VAR 0 19
8502: PUSH
8503: FOR_IN
8504: IFFALSE 8538
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8506: LD_VAR 0 14
8510: PPUSH
8511: LD_INT 91
8513: PPUSH
8514: LD_INT 63
8516: PPUSH
8517: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8521: LD_VAR 0 14
8525: PPUSH
8526: LD_INT 75
8528: PPUSH
8529: LD_INT 33
8531: PPUSH
8532: CALL_OW 174
// end ;
8536: GO 8503
8538: POP
8539: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8540: LD_INT 16
8542: PPUSH
8543: LD_INT 22
8545: PUSH
8546: LD_VAR 0 1
8550: PUSH
8551: EMPTY
8552: LIST
8553: LIST
8554: PPUSH
8555: CALL_OW 70
8559: PUSH
8560: LD_INT 2
8562: GREATER
8563: IFFALSE 8486
// repeat wait ( 0 0$3 ) ;
8565: LD_INT 105
8567: PPUSH
8568: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8572: LD_ADDR_VAR 0 17
8576: PUSH
8577: LD_INT 22
8579: PUSH
8580: LD_VAR 0 1
8584: PUSH
8585: EMPTY
8586: LIST
8587: LIST
8588: PUSH
8589: LD_INT 1
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: LD_INT 24
8597: PUSH
8598: LD_INT 550
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_INT 24
8611: PUSH
8612: LD_INT 250
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: EMPTY
8620: LIST
8621: LIST
8622: LIST
8623: PUSH
8624: EMPTY
8625: LIST
8626: LIST
8627: PPUSH
8628: CALL_OW 69
8632: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8633: LD_ADDR_VAR 0 19
8637: PUSH
8638: LD_INT 22
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: PUSH
8650: LD_INT 2
8652: PUSH
8653: LD_INT 25
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 25
8665: PUSH
8666: LD_INT 5
8668: PUSH
8669: EMPTY
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 25
8675: PUSH
8676: LD_INT 8
8678: PUSH
8679: EMPTY
8680: LIST
8681: LIST
8682: PUSH
8683: LD_INT 25
8685: PUSH
8686: LD_INT 9
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: LIST
8699: PUSH
8700: LD_INT 24
8702: PUSH
8703: LD_INT 1000
8705: PUSH
8706: EMPTY
8707: LIST
8708: LIST
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 69
8719: ST_TO_ADDR
// if medicCount > 0 then
8720: LD_VAR 0 7
8724: PUSH
8725: LD_INT 0
8727: GREATER
8728: IFFALSE 8772
// begin if damageUnit_list > 0 then
8730: LD_VAR 0 17
8734: PUSH
8735: LD_INT 0
8737: GREATER
8738: IFFALSE 8772
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8740: LD_VAR 0 17
8744: PPUSH
8745: LD_VAR 0 10
8749: PPUSH
8750: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8754: LD_VAR 0 7
8758: PPUSH
8759: LD_VAR 0 17
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: PPUSH
8768: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8772: LD_ADDR_VAR 0 14
8776: PUSH
8777: LD_VAR 0 19
8781: PUSH
8782: FOR_IN
8783: IFFALSE 8959
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8785: LD_ADDR_VAR 0 22
8789: PUSH
8790: LD_INT 22
8792: PUSH
8793: LD_VAR 0 11
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PPUSH
8802: CALL_OW 69
8806: PPUSH
8807: LD_VAR 0 14
8811: PPUSH
8812: CALL_OW 74
8816: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8817: LD_ADDR_VAR 0 23
8821: PUSH
8822: LD_INT 22
8824: PUSH
8825: LD_VAR 0 11
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: LD_INT 2
8836: PUSH
8837: LD_INT 59
8839: PUSH
8840: EMPTY
8841: LIST
8842: PUSH
8843: LD_INT 21
8845: PUSH
8846: LD_INT 1
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: LD_INT 21
8855: PUSH
8856: LD_INT 2
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: EMPTY
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: EMPTY
8874: LIST
8875: PPUSH
8876: CALL_OW 69
8880: PPUSH
8881: LD_VAR 0 14
8885: PPUSH
8886: CALL_OW 74
8890: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8891: LD_VAR 0 14
8895: PPUSH
8896: LD_VAR 0 22
8900: PPUSH
8901: CALL_OW 296
8905: PUSH
8906: LD_INT 8
8908: PLUS
8909: PUSH
8910: LD_VAR 0 14
8914: PPUSH
8915: LD_VAR 0 23
8919: PPUSH
8920: CALL_OW 296
8924: LESS
8925: IFFALSE 8943
// begin ComAttackUnit ( i , target1 ) ;
8927: LD_VAR 0 14
8931: PPUSH
8932: LD_VAR 0 22
8936: PPUSH
8937: CALL_OW 115
// end else
8941: GO 8957
// begin ComAttackUnit ( i , target2 ) ;
8943: LD_VAR 0 14
8947: PPUSH
8948: LD_VAR 0 23
8952: PPUSH
8953: CALL_OW 115
// end ; end ;
8957: GO 8782
8959: POP
8960: POP
// until soldiersOK_list = [ ] ;
8961: LD_VAR 0 19
8965: PUSH
8966: EMPTY
8967: EQUAL
8968: IFFALSE 8565
// end ; end ;
8970: LD_VAR 0 13
8974: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8975: LD_INT 0
8977: PPUSH
8978: PPUSH
8979: PPUSH
8980: PPUSH
8981: PPUSH
8982: PPUSH
8983: PPUSH
8984: PPUSH
8985: PPUSH
8986: PPUSH
8987: PPUSH
// amChassisTab = [ ] ;
8988: LD_ADDR_VAR 0 19
8992: PUSH
8993: EMPTY
8994: ST_TO_ADDR
// arChassisTab = [ ] ;
8995: LD_ADDR_VAR 0 18
8999: PUSH
9000: EMPTY
9001: ST_TO_ADDR
// ruChassisTab = [ ] ;
9002: LD_ADDR_VAR 0 17
9006: PUSH
9007: EMPTY
9008: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9009: LD_INT 35
9011: PPUSH
9012: CALL_OW 67
// if nation = 1 then
9016: LD_VAR 0 5
9020: PUSH
9021: LD_INT 1
9023: EQUAL
9024: IFFALSE 9515
// begin uc_side = side ;
9026: LD_ADDR_OWVAR 20
9030: PUSH
9031: LD_VAR 0 2
9035: ST_TO_ADDR
// uc_nation = nation ;
9036: LD_ADDR_OWVAR 21
9040: PUSH
9041: LD_VAR 0 5
9045: ST_TO_ADDR
// vc_engine = vehengine ;
9046: LD_ADDR_OWVAR 39
9050: PUSH
9051: LD_VAR 0 6
9055: ST_TO_ADDR
// vc_control = vehcontrol ;
9056: LD_ADDR_OWVAR 38
9060: PUSH
9061: LD_VAR 0 7
9065: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9066: LD_ADDR_OWVAR 40
9070: PUSH
9071: LD_VAR 0 10
9075: PUSH
9076: LD_INT 1
9078: PPUSH
9079: LD_VAR 0 10
9083: PPUSH
9084: CALL_OW 12
9088: ARRAY
9089: ST_TO_ADDR
// for j = 1 to AMWeapon do
9090: LD_ADDR_VAR 0 14
9094: PUSH
9095: DOUBLE
9096: LD_INT 1
9098: DEC
9099: ST_TO_ADDR
9100: LD_VAR 0 10
9104: PUSH
9105: FOR_TO
9106: IFFALSE 9407
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9108: LD_VAR 0 10
9112: PUSH
9113: LD_VAR 0 14
9117: ARRAY
9118: PUSH
9119: LD_INT 2
9121: EQUAL
9122: PUSH
9123: LD_VAR 0 10
9127: PUSH
9128: LD_VAR 0 14
9132: ARRAY
9133: PUSH
9134: LD_INT 3
9136: EQUAL
9137: OR
9138: IFFALSE 9191
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9140: LD_ADDR_VAR 0 19
9144: PUSH
9145: LD_INT 1
9147: PUSH
9148: LD_INT 2
9150: PUSH
9151: LD_INT 3
9153: PUSH
9154: LD_INT 4
9156: PUSH
9157: LD_INT 5
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9167: LD_ADDR_OWVAR 37
9171: PUSH
9172: LD_VAR 0 19
9176: PUSH
9177: LD_INT 1
9179: PPUSH
9180: LD_VAR 0 19
9184: PPUSH
9185: CALL_OW 12
9189: ARRAY
9190: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9191: LD_VAR 0 10
9195: PUSH
9196: LD_VAR 0 14
9200: ARRAY
9201: PUSH
9202: LD_INT 4
9204: EQUAL
9205: PUSH
9206: LD_VAR 0 10
9210: PUSH
9211: LD_VAR 0 14
9215: ARRAY
9216: PUSH
9217: LD_INT 5
9219: EQUAL
9220: OR
9221: PUSH
9222: LD_VAR 0 10
9226: PUSH
9227: LD_VAR 0 14
9231: ARRAY
9232: PUSH
9233: LD_INT 9
9235: EQUAL
9236: OR
9237: PUSH
9238: LD_VAR 0 10
9242: PUSH
9243: LD_VAR 0 14
9247: ARRAY
9248: PUSH
9249: LD_INT 11
9251: EQUAL
9252: OR
9253: PUSH
9254: LD_VAR 0 10
9258: PUSH
9259: LD_VAR 0 14
9263: ARRAY
9264: PUSH
9265: LD_INT 7
9267: EQUAL
9268: OR
9269: IFFALSE 9318
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9271: LD_ADDR_VAR 0 19
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 3
9281: PUSH
9282: LD_INT 4
9284: PUSH
9285: LD_INT 5
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9294: LD_ADDR_OWVAR 37
9298: PUSH
9299: LD_VAR 0 19
9303: PUSH
9304: LD_INT 1
9306: PPUSH
9307: LD_VAR 0 19
9311: PPUSH
9312: CALL_OW 12
9316: ARRAY
9317: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9318: LD_VAR 0 10
9322: PUSH
9323: LD_VAR 0 14
9327: ARRAY
9328: PUSH
9329: LD_INT 8
9331: EQUAL
9332: PUSH
9333: LD_VAR 0 10
9337: PUSH
9338: LD_VAR 0 14
9342: ARRAY
9343: PUSH
9344: LD_INT 6
9346: EQUAL
9347: OR
9348: PUSH
9349: LD_VAR 0 10
9353: PUSH
9354: LD_VAR 0 14
9358: ARRAY
9359: PUSH
9360: LD_INT 10
9362: EQUAL
9363: OR
9364: IFFALSE 9405
// begin amChassisTab = [ 4 , 5 ] ;
9366: LD_ADDR_VAR 0 19
9370: PUSH
9371: LD_INT 4
9373: PUSH
9374: LD_INT 5
9376: PUSH
9377: EMPTY
9378: LIST
9379: LIST
9380: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9381: LD_ADDR_OWVAR 37
9385: PUSH
9386: LD_VAR 0 19
9390: PUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_VAR 0 19
9398: PPUSH
9399: CALL_OW 12
9403: ARRAY
9404: ST_TO_ADDR
// end ; end ;
9405: GO 9105
9407: POP
9408: POP
// veh = CreateVehicle ;
9409: LD_ADDR_VAR 0 16
9413: PUSH
9414: CALL_OW 45
9418: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9419: LD_VAR 0 16
9423: PPUSH
9424: LD_VAR 0 1
9428: PPUSH
9429: LD_INT 0
9431: PPUSH
9432: CALL_OW 49
// if vehControl = 1 then
9436: LD_VAR 0 7
9440: PUSH
9441: LD_INT 1
9443: EQUAL
9444: IFFALSE 9501
// begin hc_gallery =  ;
9446: LD_ADDR_OWVAR 33
9450: PUSH
9451: LD_STRING 
9453: ST_TO_ADDR
// hc_name =  ;
9454: LD_ADDR_OWVAR 26
9458: PUSH
9459: LD_STRING 
9461: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9462: LD_INT 0
9464: PPUSH
9465: LD_INT 3
9467: PPUSH
9468: LD_VAR 0 4
9472: PPUSH
9473: CALL_OW 380
// un = CreateHuman ;
9477: LD_ADDR_VAR 0 15
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9487: LD_VAR 0 15
9491: PPUSH
9492: LD_VAR 0 16
9496: PPUSH
9497: CALL_OW 52
// end ; i = i + 1 ;
9501: LD_ADDR_VAR 0 13
9505: PUSH
9506: LD_VAR 0 13
9510: PUSH
9511: LD_INT 1
9513: PLUS
9514: ST_TO_ADDR
// end ; if nation = 2 then
9515: LD_VAR 0 5
9519: PUSH
9520: LD_INT 2
9522: EQUAL
9523: IFFALSE 9947
// begin uc_side = side ;
9525: LD_ADDR_OWVAR 20
9529: PUSH
9530: LD_VAR 0 2
9534: ST_TO_ADDR
// uc_nation = nation ;
9535: LD_ADDR_OWVAR 21
9539: PUSH
9540: LD_VAR 0 5
9544: ST_TO_ADDR
// vc_engine = vehengine ;
9545: LD_ADDR_OWVAR 39
9549: PUSH
9550: LD_VAR 0 6
9554: ST_TO_ADDR
// vc_control = vehcontrol ;
9555: LD_ADDR_OWVAR 38
9559: PUSH
9560: LD_VAR 0 7
9564: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9565: LD_ADDR_OWVAR 40
9569: PUSH
9570: LD_VAR 0 9
9574: PUSH
9575: LD_INT 1
9577: PPUSH
9578: LD_VAR 0 9
9582: PPUSH
9583: CALL_OW 12
9587: ARRAY
9588: ST_TO_ADDR
// for j = 1 to ARWeapons do
9589: LD_ADDR_VAR 0 14
9593: PUSH
9594: DOUBLE
9595: LD_INT 1
9597: DEC
9598: ST_TO_ADDR
9599: LD_VAR 0 9
9603: PUSH
9604: FOR_TO
9605: IFFALSE 9839
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9607: LD_VAR 0 9
9611: PUSH
9612: LD_VAR 0 14
9616: ARRAY
9617: PUSH
9618: LD_INT 24
9620: EQUAL
9621: PUSH
9622: LD_VAR 0 9
9626: PUSH
9627: LD_VAR 0 14
9631: ARRAY
9632: PUSH
9633: LD_INT 22
9635: EQUAL
9636: OR
9637: PUSH
9638: LD_VAR 0 9
9642: PUSH
9643: LD_VAR 0 14
9647: ARRAY
9648: PUSH
9649: LD_INT 23
9651: EQUAL
9652: OR
9653: PUSH
9654: LD_VAR 0 9
9658: PUSH
9659: LD_VAR 0 14
9663: ARRAY
9664: PUSH
9665: LD_INT 30
9667: EQUAL
9668: OR
9669: IFFALSE 9718
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9671: LD_ADDR_VAR 0 18
9675: PUSH
9676: LD_INT 11
9678: PUSH
9679: LD_INT 12
9681: PUSH
9682: LD_INT 13
9684: PUSH
9685: LD_INT 14
9687: PUSH
9688: EMPTY
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9694: LD_ADDR_OWVAR 37
9698: PUSH
9699: LD_VAR 0 18
9703: PUSH
9704: LD_INT 1
9706: PPUSH
9707: LD_VAR 0 18
9711: PPUSH
9712: CALL_OW 12
9716: ARRAY
9717: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9718: LD_VAR 0 9
9722: PUSH
9723: LD_VAR 0 14
9727: ARRAY
9728: PUSH
9729: LD_INT 29
9731: EQUAL
9732: PUSH
9733: LD_VAR 0 9
9737: PUSH
9738: LD_VAR 0 14
9742: ARRAY
9743: PUSH
9744: LD_INT 28
9746: EQUAL
9747: OR
9748: PUSH
9749: LD_VAR 0 9
9753: PUSH
9754: LD_VAR 0 14
9758: ARRAY
9759: PUSH
9760: LD_INT 27
9762: EQUAL
9763: OR
9764: PUSH
9765: LD_VAR 0 9
9769: PUSH
9770: LD_VAR 0 14
9774: ARRAY
9775: PUSH
9776: LD_INT 26
9778: EQUAL
9779: OR
9780: PUSH
9781: LD_VAR 0 9
9785: PUSH
9786: LD_VAR 0 14
9790: ARRAY
9791: PUSH
9792: LD_INT 25
9794: EQUAL
9795: OR
9796: IFFALSE 9837
// begin arChassisTab = [ 13 , 14 ] ;
9798: LD_ADDR_VAR 0 18
9802: PUSH
9803: LD_INT 13
9805: PUSH
9806: LD_INT 14
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9813: LD_ADDR_OWVAR 37
9817: PUSH
9818: LD_VAR 0 18
9822: PUSH
9823: LD_INT 1
9825: PPUSH
9826: LD_VAR 0 18
9830: PPUSH
9831: CALL_OW 12
9835: ARRAY
9836: ST_TO_ADDR
// end ; end ;
9837: GO 9604
9839: POP
9840: POP
// veh = CreateVehicle ;
9841: LD_ADDR_VAR 0 16
9845: PUSH
9846: CALL_OW 45
9850: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9851: LD_VAR 0 16
9855: PPUSH
9856: LD_VAR 0 1
9860: PPUSH
9861: LD_INT 0
9863: PPUSH
9864: CALL_OW 49
// if vehcontrol = 1 then
9868: LD_VAR 0 7
9872: PUSH
9873: LD_INT 1
9875: EQUAL
9876: IFFALSE 9933
// begin hc_gallery =  ;
9878: LD_ADDR_OWVAR 33
9882: PUSH
9883: LD_STRING 
9885: ST_TO_ADDR
// hc_name =  ;
9886: LD_ADDR_OWVAR 26
9890: PUSH
9891: LD_STRING 
9893: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9894: LD_INT 0
9896: PPUSH
9897: LD_INT 3
9899: PPUSH
9900: LD_VAR 0 4
9904: PPUSH
9905: CALL_OW 380
// un = CreateHuman ;
9909: LD_ADDR_VAR 0 15
9913: PUSH
9914: CALL_OW 44
9918: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9919: LD_VAR 0 15
9923: PPUSH
9924: LD_VAR 0 16
9928: PPUSH
9929: CALL_OW 52
// end ; i = i + 1 ;
9933: LD_ADDR_VAR 0 13
9937: PUSH
9938: LD_VAR 0 13
9942: PUSH
9943: LD_INT 1
9945: PLUS
9946: ST_TO_ADDR
// end ; if nation = 3 then
9947: LD_VAR 0 5
9951: PUSH
9952: LD_INT 3
9954: EQUAL
9955: IFFALSE 10347
// begin uc_side = side ;
9957: LD_ADDR_OWVAR 20
9961: PUSH
9962: LD_VAR 0 2
9966: ST_TO_ADDR
// uc_nation = nation ;
9967: LD_ADDR_OWVAR 21
9971: PUSH
9972: LD_VAR 0 5
9976: ST_TO_ADDR
// vc_engine = vehengine ;
9977: LD_ADDR_OWVAR 39
9981: PUSH
9982: LD_VAR 0 6
9986: ST_TO_ADDR
// vc_control = vehcontrol ;
9987: LD_ADDR_OWVAR 38
9991: PUSH
9992: LD_VAR 0 7
9996: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9997: LD_ADDR_OWVAR 40
10001: PUSH
10002: LD_VAR 0 8
10006: PUSH
10007: LD_INT 1
10009: PPUSH
10010: LD_VAR 0 8
10014: PPUSH
10015: CALL_OW 12
10019: ARRAY
10020: ST_TO_ADDR
// for j = 1 to RuWeapons do
10021: LD_ADDR_VAR 0 14
10025: PUSH
10026: DOUBLE
10027: LD_INT 1
10029: DEC
10030: ST_TO_ADDR
10031: LD_VAR 0 8
10035: PUSH
10036: FOR_TO
10037: IFFALSE 10239
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10039: LD_VAR 0 8
10043: PUSH
10044: LD_VAR 0 14
10048: ARRAY
10049: PUSH
10050: LD_INT 42
10052: EQUAL
10053: PUSH
10054: LD_VAR 0 8
10058: PUSH
10059: LD_VAR 0 14
10063: ARRAY
10064: PUSH
10065: LD_INT 43
10067: EQUAL
10068: OR
10069: PUSH
10070: LD_VAR 0 8
10074: PUSH
10075: LD_VAR 0 14
10079: ARRAY
10080: PUSH
10081: LD_INT 44
10083: EQUAL
10084: OR
10085: PUSH
10086: LD_VAR 0 8
10090: PUSH
10091: LD_VAR 0 14
10095: ARRAY
10096: PUSH
10097: LD_INT 45
10099: EQUAL
10100: OR
10101: PUSH
10102: LD_VAR 0 8
10106: PUSH
10107: LD_VAR 0 14
10111: ARRAY
10112: PUSH
10113: LD_INT 49
10115: EQUAL
10116: OR
10117: IFFALSE 10166
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10119: LD_ADDR_VAR 0 17
10123: PUSH
10124: LD_INT 21
10126: PUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 23
10132: PUSH
10133: LD_INT 24
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: LIST
10140: LIST
10141: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10142: LD_ADDR_OWVAR 37
10146: PUSH
10147: LD_VAR 0 17
10151: PUSH
10152: LD_INT 1
10154: PPUSH
10155: LD_VAR 0 17
10159: PPUSH
10160: CALL_OW 12
10164: ARRAY
10165: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10166: LD_VAR 0 8
10170: PUSH
10171: LD_VAR 0 14
10175: ARRAY
10176: PUSH
10177: LD_INT 46
10179: EQUAL
10180: PUSH
10181: LD_VAR 0 8
10185: PUSH
10186: LD_VAR 0 14
10190: ARRAY
10191: PUSH
10192: LD_INT 47
10194: EQUAL
10195: OR
10196: IFFALSE 10237
// begin ruChassisTab = [ 23 , 24 ] ;
10198: LD_ADDR_VAR 0 17
10202: PUSH
10203: LD_INT 23
10205: PUSH
10206: LD_INT 24
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10213: LD_ADDR_OWVAR 37
10217: PUSH
10218: LD_VAR 0 17
10222: PUSH
10223: LD_INT 1
10225: PPUSH
10226: LD_VAR 0 17
10230: PPUSH
10231: CALL_OW 12
10235: ARRAY
10236: ST_TO_ADDR
// end ; end ;
10237: GO 10036
10239: POP
10240: POP
// veh = CreateVehicle ;
10241: LD_ADDR_VAR 0 16
10245: PUSH
10246: CALL_OW 45
10250: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10251: LD_VAR 0 16
10255: PPUSH
10256: LD_VAR 0 1
10260: PPUSH
10261: LD_INT 0
10263: PPUSH
10264: CALL_OW 49
// if vehcontrol = 1 then
10268: LD_VAR 0 7
10272: PUSH
10273: LD_INT 1
10275: EQUAL
10276: IFFALSE 10333
// begin hc_gallery =  ;
10278: LD_ADDR_OWVAR 33
10282: PUSH
10283: LD_STRING 
10285: ST_TO_ADDR
// hc_name =  ;
10286: LD_ADDR_OWVAR 26
10290: PUSH
10291: LD_STRING 
10293: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10294: LD_INT 0
10296: PPUSH
10297: LD_INT 3
10299: PPUSH
10300: LD_VAR 0 4
10304: PPUSH
10305: CALL_OW 380
// un = CreateHuman ;
10309: LD_ADDR_VAR 0 15
10313: PUSH
10314: CALL_OW 44
10318: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10319: LD_VAR 0 15
10323: PPUSH
10324: LD_VAR 0 16
10328: PPUSH
10329: CALL_OW 52
// end ; i = i + 1 ;
10333: LD_ADDR_VAR 0 13
10337: PUSH
10338: LD_VAR 0 13
10342: PUSH
10343: LD_INT 1
10345: PLUS
10346: ST_TO_ADDR
// end ; until i = vehCount ;
10347: LD_VAR 0 13
10351: PUSH
10352: LD_VAR 0 3
10356: EQUAL
10357: IFFALSE 9009
// repeat wait ( 0 0$1 ) ;
10359: LD_INT 35
10361: PPUSH
10362: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10366: LD_INT 22
10368: PUSH
10369: LD_VAR 0 2
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 21
10380: PUSH
10381: LD_INT 2
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: LD_INT 250
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 3
10400: PUSH
10401: LD_INT 58
10403: PUSH
10404: EMPTY
10405: LIST
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: PPUSH
10417: CALL_OW 69
10421: PUSH
10422: LD_INT 0
10424: GREATER
10425: IFFALSE 10616
// begin for i in vehicleOK_list do
10427: LD_ADDR_VAR 0 13
10431: PUSH
10432: LD_VAR 0 20
10436: PUSH
10437: FOR_IN
10438: IFFALSE 10614
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10440: LD_ADDR_VAR 0 21
10444: PUSH
10445: LD_INT 22
10447: PUSH
10448: LD_VAR 0 11
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 69
10461: PPUSH
10462: LD_VAR 0 13
10466: PPUSH
10467: CALL_OW 74
10471: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10472: LD_ADDR_VAR 0 22
10476: PUSH
10477: LD_INT 22
10479: PUSH
10480: LD_VAR 0 11
10484: PUSH
10485: EMPTY
10486: LIST
10487: LIST
10488: PUSH
10489: LD_INT 2
10491: PUSH
10492: LD_INT 59
10494: PUSH
10495: EMPTY
10496: LIST
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 1
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PUSH
10508: LD_INT 21
10510: PUSH
10511: LD_INT 2
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: PUSH
10518: EMPTY
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: PUSH
10524: EMPTY
10525: LIST
10526: LIST
10527: PUSH
10528: EMPTY
10529: LIST
10530: PPUSH
10531: CALL_OW 69
10535: PPUSH
10536: LD_VAR 0 13
10540: PPUSH
10541: CALL_OW 74
10545: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10546: LD_VAR 0 13
10550: PPUSH
10551: LD_VAR 0 21
10555: PPUSH
10556: CALL_OW 296
10560: PUSH
10561: LD_INT 8
10563: PLUS
10564: PUSH
10565: LD_VAR 0 13
10569: PPUSH
10570: LD_VAR 0 22
10574: PPUSH
10575: CALL_OW 296
10579: LESS
10580: IFFALSE 10598
// begin ComAttackUnit ( i , target1 ) ;
10582: LD_VAR 0 13
10586: PPUSH
10587: LD_VAR 0 21
10591: PPUSH
10592: CALL_OW 115
// end else
10596: GO 10612
// begin ComAttackUnit ( i , target2 ) ;
10598: LD_VAR 0 13
10602: PPUSH
10603: LD_VAR 0 22
10607: PPUSH
10608: CALL_OW 115
// end ; end ;
10612: GO 10437
10614: POP
10615: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10616: LD_INT 22
10618: PUSH
10619: LD_VAR 0 2
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 21
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 24
10640: PUSH
10641: LD_INT 250
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 3
10650: PUSH
10651: LD_INT 58
10653: PUSH
10654: EMPTY
10655: LIST
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: EMPTY
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: PPUSH
10667: CALL_OW 69
10671: PUSH
10672: LD_INT 0
10674: EQUAL
10675: IFFALSE 10359
// end ; end_of_file
10677: LD_VAR 0 12
10681: RET
// every 1 do var i , gammaSquad , startX , startY ;
10682: GO 10684
10684: DISABLE
10685: LD_INT 0
10687: PPUSH
10688: PPUSH
10689: PPUSH
10690: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10691: LD_ADDR_VAR 0 2
10695: PUSH
10696: LD_EXP 8
10700: PUSH
10701: LD_EXP 9
10705: PUSH
10706: LD_EXP 10
10710: PUSH
10711: LD_EXP 11
10715: PUSH
10716: LD_EXP 12
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10728: LD_ADDR_VAR 0 3
10732: PUSH
10733: LD_INT 46
10735: PUSH
10736: LD_INT 45
10738: PUSH
10739: LD_INT 44
10741: PUSH
10742: LD_INT 43
10744: PUSH
10745: LD_INT 42
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10755: LD_ADDR_VAR 0 4
10759: PUSH
10760: LD_INT 14
10762: PUSH
10763: LD_INT 12
10765: PUSH
10766: LD_INT 10
10768: PUSH
10769: LD_INT 8
10771: PUSH
10772: LD_INT 6
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10782: LD_INT 32
10784: PPUSH
10785: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10789: LD_INT 32
10791: PPUSH
10792: LD_INT 51
10794: PPUSH
10795: LD_INT 26
10797: PPUSH
10798: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10802: LD_INT 32
10804: PPUSH
10805: LD_INT 53
10807: PPUSH
10808: LD_INT 23
10810: PPUSH
10811: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10815: LD_INT 32
10817: PPUSH
10818: LD_INT 52
10820: PPUSH
10821: LD_INT 19
10823: PPUSH
10824: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10828: LD_INT 35
10830: PPUSH
10831: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10835: LD_INT 32
10837: PPUSH
10838: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10842: LD_INT 32
10844: PPUSH
10845: CALL_OW 250
10849: PUSH
10850: LD_INT 52
10852: EQUAL
10853: PUSH
10854: LD_INT 32
10856: PPUSH
10857: CALL_OW 251
10861: PUSH
10862: LD_INT 19
10864: EQUAL
10865: AND
10866: IFFALSE 10828
// ComExitVehicle ( JMM ) ;
10868: LD_EXP 1
10872: PPUSH
10873: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10877: LD_EXP 7
10881: PPUSH
10882: LD_EXP 1
10886: PPUSH
10887: CALL_OW 119
// wait ( 0 0$01 ) ;
10891: LD_INT 35
10893: PPUSH
10894: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10898: LD_EXP 1
10902: PPUSH
10903: LD_INT 46
10905: PPUSH
10906: LD_INT 10
10908: PPUSH
10909: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10913: LD_EXP 1
10917: PPUSH
10918: LD_EXP 7
10922: PPUSH
10923: CALL_OW 179
// wait ( 0 0$4 ) ;
10927: LD_INT 140
10929: PPUSH
10930: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10934: LD_EXP 1
10938: PPUSH
10939: LD_STRING D1-JMM-1
10941: PPUSH
10942: CALL_OW 88
// if not dialogue_skipped then
10946: LD_OWVAR 59
10950: NOT
10951: IFFALSE 11608
// begin for i := 1 to gammaSquad do
10953: LD_ADDR_VAR 0 1
10957: PUSH
10958: DOUBLE
10959: LD_INT 1
10961: DEC
10962: ST_TO_ADDR
10963: LD_VAR 0 2
10967: PUSH
10968: FOR_TO
10969: IFFALSE 11030
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10971: LD_VAR 0 2
10975: PUSH
10976: LD_VAR 0 1
10980: ARRAY
10981: PPUSH
10982: LD_VAR 0 3
10986: PUSH
10987: LD_VAR 0 1
10991: ARRAY
10992: PPUSH
10993: LD_VAR 0 4
10997: PUSH
10998: LD_VAR 0 1
11002: ARRAY
11003: PPUSH
11004: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11008: LD_VAR 0 2
11012: PUSH
11013: LD_VAR 0 1
11017: ARRAY
11018: PPUSH
11019: LD_EXP 1
11023: PPUSH
11024: CALL_OW 179
// end ;
11028: GO 10968
11030: POP
11031: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11032: LD_EXP 4
11036: PPUSH
11037: LD_INT 41
11039: PPUSH
11040: LD_INT 4
11042: PPUSH
11043: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11047: LD_EXP 4
11051: PPUSH
11052: LD_EXP 1
11056: PPUSH
11057: CALL_OW 179
// if Lisa = false and Bobby then
11061: LD_EXP 4
11065: PUSH
11066: LD_INT 0
11068: EQUAL
11069: PUSH
11070: LD_EXP 2
11074: AND
11075: IFFALSE 11106
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11077: LD_EXP 2
11081: PPUSH
11082: LD_INT 41
11084: PPUSH
11085: LD_INT 4
11087: PPUSH
11088: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11092: LD_EXP 2
11096: PPUSH
11097: LD_EXP 1
11101: PPUSH
11102: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11106: LD_EXP 4
11110: PUSH
11111: LD_INT 0
11113: EQUAL
11114: PUSH
11115: LD_EXP 2
11119: PUSH
11120: LD_INT 0
11122: EQUAL
11123: AND
11124: PUSH
11125: LD_EXP 3
11129: AND
11130: IFFALSE 11161
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11132: LD_EXP 3
11136: PPUSH
11137: LD_INT 41
11139: PPUSH
11140: LD_INT 4
11142: PPUSH
11143: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11147: LD_EXP 3
11151: PPUSH
11152: LD_EXP 1
11156: PPUSH
11157: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11161: LD_EXP 4
11165: PUSH
11166: LD_INT 0
11168: EQUAL
11169: PUSH
11170: LD_EXP 2
11174: PUSH
11175: LD_INT 0
11177: EQUAL
11178: AND
11179: PUSH
11180: LD_EXP 3
11184: PUSH
11185: LD_INT 0
11187: EQUAL
11188: AND
11189: IFFALSE 11220
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11191: LD_EXP 6
11195: PPUSH
11196: LD_INT 41
11198: PPUSH
11199: LD_INT 4
11201: PPUSH
11202: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11206: LD_EXP 6
11210: PPUSH
11211: LD_EXP 1
11215: PPUSH
11216: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11220: LD_EXP 7
11224: PPUSH
11225: LD_STRING D1-Brown-1
11227: PPUSH
11228: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11232: LD_EXP 1
11236: PPUSH
11237: LD_STRING D1-JMM-2
11239: PPUSH
11240: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11244: LD_EXP 7
11248: PPUSH
11249: LD_STRING D1-Brown-2
11251: PPUSH
11252: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11256: LD_EXP 1
11260: PPUSH
11261: LD_EXP 9
11265: PPUSH
11266: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11270: LD_EXP 9
11274: PPUSH
11275: LD_STRING D1-FSol1-2
11277: PPUSH
11278: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11282: LD_EXP 1
11286: PPUSH
11287: LD_EXP 8
11291: PPUSH
11292: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11296: LD_EXP 8
11300: PPUSH
11301: LD_STRING D1-Sol2-2
11303: PPUSH
11304: CALL_OW 88
// if Lisa then
11308: LD_EXP 4
11312: IFFALSE 11352
// begin ComTurnUnit ( JMM , Lisa ) ;
11314: LD_EXP 1
11318: PPUSH
11319: LD_EXP 4
11323: PPUSH
11324: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11328: LD_EXP 4
11332: PPUSH
11333: LD_STRING D1-Lisa-2
11335: PPUSH
11336: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11340: LD_EXP 1
11344: PPUSH
11345: LD_STRING D1-JMM-3
11347: PPUSH
11348: CALL_OW 88
// end ; if Bobby then
11352: LD_EXP 2
11356: IFFALSE 11396
// begin ComTurnUnit ( JMM , Bobby ) ;
11358: LD_EXP 1
11362: PPUSH
11363: LD_EXP 2
11367: PPUSH
11368: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11372: LD_EXP 2
11376: PPUSH
11377: LD_STRING D1-Bobby-2
11379: PPUSH
11380: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11384: LD_EXP 1
11388: PPUSH
11389: LD_STRING D1-JMM-3
11391: PPUSH
11392: CALL_OW 88
// end ; if Cyrus then
11396: LD_EXP 3
11400: IFFALSE 11440
// begin ComTurnUnit ( JMM , Cyrus ) ;
11402: LD_EXP 1
11406: PPUSH
11407: LD_EXP 3
11411: PPUSH
11412: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11416: LD_EXP 3
11420: PPUSH
11421: LD_STRING D1-Cyrus-2
11423: PPUSH
11424: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11428: LD_EXP 1
11432: PPUSH
11433: LD_STRING D1-JMM-3
11435: PPUSH
11436: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11440: LD_EXP 1
11444: PPUSH
11445: LD_EXP 7
11449: PPUSH
11450: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11454: LD_EXP 1
11458: PPUSH
11459: LD_STRING D1-JMM-3a
11461: PPUSH
11462: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11466: LD_EXP 7
11470: PPUSH
11471: LD_INT 38
11473: PPUSH
11474: LD_INT 5
11476: PPUSH
11477: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11481: LD_EXP 7
11485: PPUSH
11486: LD_EXP 1
11490: PPUSH
11491: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11495: LD_EXP 1
11499: PPUSH
11500: LD_INT 40
11502: PPUSH
11503: LD_INT 7
11505: PPUSH
11506: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11510: LD_EXP 1
11514: PPUSH
11515: LD_EXP 7
11519: PPUSH
11520: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11524: LD_EXP 7
11528: PPUSH
11529: LD_STRING D1-Brown-3
11531: PPUSH
11532: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11536: LD_EXP 14
11540: PPUSH
11541: LD_STRING D1-Har-3
11543: PPUSH
11544: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11548: LD_EXP 1
11552: PPUSH
11553: LD_STRING D1-JMM-4
11555: PPUSH
11556: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11560: LD_EXP 14
11564: PPUSH
11565: LD_STRING D1-Har-4
11567: PPUSH
11568: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11572: LD_EXP 1
11576: PPUSH
11577: LD_STRING D1-JMM-5
11579: PPUSH
11580: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11584: LD_EXP 14
11588: PPUSH
11589: LD_STRING D1-Har-5
11591: PPUSH
11592: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11596: LD_EXP 1
11600: PPUSH
11601: LD_STRING D1-JMM-6
11603: PPUSH
11604: CALL_OW 88
// end ; InGameOff ;
11608: CALL_OW 9
// PrepareRussianConvoy ;
11612: CALL 2792 0 0
// ChangeMissionObjectives ( M1 ) ;
11616: LD_STRING M1
11618: PPUSH
11619: CALL_OW 337
// SaveForQuickRestart ;
11623: CALL_OW 22
// timerStatus = 1 ;
11627: LD_ADDR_EXP 29
11631: PUSH
11632: LD_INT 1
11634: ST_TO_ADDR
// startTimer = 1 ;
11635: LD_ADDR_EXP 30
11639: PUSH
11640: LD_INT 1
11642: ST_TO_ADDR
// bonusAvalaible = 1 ;
11643: LD_ADDR_EXP 42
11647: PUSH
11648: LD_INT 1
11650: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11651: LD_INT 105
11653: PPUSH
11654: CALL_OW 67
// DialogueOn ;
11658: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11662: LD_EXP 12
11666: PPUSH
11667: LD_STRING D9-Mech1-1
11669: PPUSH
11670: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11674: LD_EXP 1
11678: PPUSH
11679: LD_STRING D9-JMM-1
11681: PPUSH
11682: CALL_OW 88
// DialogueOff ;
11686: CALL_OW 7
// end ;
11690: PPOPN 4
11692: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11693: LD_INT 47
11695: PPUSH
11696: LD_INT 1
11698: PPUSH
11699: CALL_OW 321
11703: PUSH
11704: LD_INT 2
11706: EQUAL
11707: PUSH
11708: LD_INT 22
11710: PUSH
11711: LD_INT 1
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 21
11720: PUSH
11721: LD_INT 3
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: LD_INT 30
11730: PUSH
11731: LD_INT 3
11733: PUSH
11734: EMPTY
11735: LIST
11736: LIST
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: LIST
11742: PPUSH
11743: CALL_OW 69
11747: PUSH
11748: LD_INT 0
11750: GREATER
11751: AND
11752: IFFALSE 11982
11754: GO 11756
11756: DISABLE
// begin if IsOk ( Campell ) then
11757: LD_EXP 12
11761: PPUSH
11762: CALL_OW 302
11766: IFFALSE 11782
// begin Say ( Campell , D10-Mech1-1 ) ;
11768: LD_EXP 12
11772: PPUSH
11773: LD_STRING D10-Mech1-1
11775: PPUSH
11776: CALL_OW 88
// end else
11780: GO 11982
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11782: LD_INT 22
11784: PUSH
11785: LD_INT 1
11787: PUSH
11788: EMPTY
11789: LIST
11790: LIST
11791: PUSH
11792: LD_INT 21
11794: PUSH
11795: LD_INT 1
11797: PUSH
11798: EMPTY
11799: LIST
11800: LIST
11801: PUSH
11802: LD_INT 25
11804: PUSH
11805: LD_INT 3
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 26
11814: PUSH
11815: LD_INT 1
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: PPUSH
11828: CALL_OW 69
11832: PUSH
11833: LD_EXP 1
11837: PUSH
11838: EMPTY
11839: LIST
11840: PUSH
11841: LD_INT 0
11843: GREATER
11844: DIFF
11845: IFFALSE 11919
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11847: LD_INT 22
11849: PUSH
11850: LD_INT 1
11852: PUSH
11853: EMPTY
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 21
11859: PUSH
11860: LD_INT 1
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 25
11869: PUSH
11870: LD_INT 3
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 26
11879: PUSH
11880: LD_INT 1
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PPUSH
11893: CALL_OW 69
11897: PUSH
11898: LD_EXP 1
11902: PUSH
11903: EMPTY
11904: LIST
11905: DIFF
11906: PPUSH
11907: LD_STRING D10-Mech1-1
11909: PPUSH
11910: LD_STRING D10-Mech1-1
11912: PPUSH
11913: CALL 4036 0 3
// end else
11917: GO 11982
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11919: LD_INT 22
11921: PUSH
11922: LD_INT 1
11924: PUSH
11925: EMPTY
11926: LIST
11927: LIST
11928: PUSH
11929: LD_INT 21
11931: PUSH
11932: LD_INT 1
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 26
11941: PUSH
11942: LD_INT 1
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 1
11956: ARRAY
11957: PPUSH
11958: CALL_OW 69
11962: PUSH
11963: LD_EXP 1
11967: PUSH
11968: EMPTY
11969: LIST
11970: DIFF
11971: PPUSH
11972: LD_STRING D10-Mech1-1
11974: PPUSH
11975: LD_STRING D10-Mech1-1
11977: PPUSH
11978: CALL 4036 0 3
// end ; end ; end ;
11982: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11983: LD_INT 22
11985: PUSH
11986: LD_INT 1
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 30
11995: PUSH
11996: LD_INT 32
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: PUSH
12012: LD_INT 0
12014: GREATER
12015: PUSH
12016: LD_EXP 32
12020: PUSH
12021: LD_INT 0
12023: EQUAL
12024: AND
12025: IFFALSE 12265
12027: GO 12029
12029: DISABLE
// begin if IsOK ( Claptopn ) then
12030: LD_EXP 11
12034: PPUSH
12035: CALL_OW 302
12039: IFFALSE 12055
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12041: LD_EXP 11
12045: PPUSH
12046: LD_STRING D9b-Eng1-1
12048: PPUSH
12049: CALL_OW 88
// end else
12053: GO 12251
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12055: LD_INT 22
12057: PUSH
12058: LD_INT 1
12060: PUSH
12061: EMPTY
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 1
12070: PUSH
12071: EMPTY
12072: LIST
12073: LIST
12074: PUSH
12075: LD_INT 25
12077: PUSH
12078: LD_INT 3
12080: PUSH
12081: EMPTY
12082: LIST
12083: LIST
12084: PUSH
12085: LD_INT 26
12087: PUSH
12088: LD_INT 1
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: PPUSH
12101: CALL_OW 69
12105: PUSH
12106: LD_EXP 1
12110: PUSH
12111: EMPTY
12112: LIST
12113: PUSH
12114: LD_INT 0
12116: GREATER
12117: DIFF
12118: IFFALSE 12192
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12120: LD_INT 22
12122: PUSH
12123: LD_INT 1
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 21
12132: PUSH
12133: LD_INT 1
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: LD_INT 25
12142: PUSH
12143: LD_INT 2
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 26
12152: PUSH
12153: LD_INT 1
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 69
12170: PUSH
12171: LD_EXP 1
12175: PUSH
12176: EMPTY
12177: LIST
12178: DIFF
12179: PPUSH
12180: LD_STRING D9b-Eng1-1
12182: PPUSH
12183: LD_STRING D9b-Eng1-11
12185: PPUSH
12186: CALL 4036 0 3
// end else
12190: GO 12251
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12192: LD_INT 22
12194: PUSH
12195: LD_INT 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PUSH
12202: LD_INT 21
12204: PUSH
12205: LD_INT 1
12207: PUSH
12208: EMPTY
12209: LIST
12210: LIST
12211: PUSH
12212: LD_INT 26
12214: PUSH
12215: LD_INT 1
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PUSH
12232: LD_EXP 1
12236: PUSH
12237: EMPTY
12238: LIST
12239: DIFF
12240: PPUSH
12241: LD_STRING D9b-Eng1-1
12243: PPUSH
12244: LD_STRING D9b-Eng1-1
12246: PPUSH
12247: CALL 4036 0 3
// end ; end ; if energyVDialog = 0 then
12251: LD_EXP 33
12255: PUSH
12256: LD_INT 0
12258: EQUAL
12259: IFFALSE 12265
// EnergyDialog ;
12261: CALL 4527 0 0
// end ;
12265: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12266: LD_EXP 34
12270: PUSH
12271: LD_INT 1
12273: EQUAL
12274: PUSH
12275: LD_EXP 35
12279: PUSH
12280: LD_INT 1
12282: EQUAL
12283: AND
12284: IFFALSE 12296
12286: GO 12288
12288: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12289: LD_STRING M1a
12291: PPUSH
12292: CALL_OW 337
12296: END
// every 3 3$0 do
12297: GO 12299
12299: DISABLE
// begin PrepareFirstAttack ;
12300: CALL 3592 0 0
// end ;
12304: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12305: LD_INT 22
12307: PUSH
12308: LD_INT 5
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PUSH
12315: LD_INT 21
12317: PUSH
12318: LD_INT 1
12320: PUSH
12321: EMPTY
12322: LIST
12323: LIST
12324: PUSH
12325: LD_INT 3
12327: PUSH
12328: LD_INT 24
12330: PUSH
12331: LD_INT 250
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: PPUSH
12347: CALL_OW 69
12351: PUSH
12352: LD_INT 0
12354: GREATER
12355: PUSH
12356: LD_EXP 23
12360: PUSH
12361: LD_INT 1
12363: EQUAL
12364: AND
12365: IFFALSE 12666
12367: GO 12369
12369: DISABLE
12370: LD_INT 0
12372: PPUSH
// begin firstRussianAttack = 2 ;
12373: LD_ADDR_EXP 23
12377: PUSH
12378: LD_INT 2
12380: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12381: LD_INT 22
12383: PUSH
12384: LD_INT 5
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 21
12393: PUSH
12394: LD_INT 1
12396: PUSH
12397: EMPTY
12398: LIST
12399: LIST
12400: PUSH
12401: EMPTY
12402: LIST
12403: LIST
12404: PPUSH
12405: CALL_OW 69
12409: PPUSH
12410: LD_INT 125
12412: PPUSH
12413: LD_INT 98
12415: PPUSH
12416: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12420: LD_INT 22
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 1
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PPUSH
12444: CALL_OW 69
12448: PUSH
12449: LD_EXP 1
12453: PUSH
12454: LD_EXP 7
12458: PUSH
12459: LD_EXP 4
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: LIST
12468: DIFF
12469: PPUSH
12470: LD_STRING DAtt1-Sol1-1
12472: PPUSH
12473: LD_STRING DAtt1-FSol1-1
12475: PPUSH
12476: CALL 4036 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12480: LD_EXP 1
12484: PPUSH
12485: LD_STRING DAtt1-JMM-1
12487: PPUSH
12488: CALL_OW 88
// if Lisa then
12492: LD_EXP 4
12496: IFFALSE 12512
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12498: LD_EXP 4
12502: PPUSH
12503: LD_STRING DAtt1a-Lisa-1
12505: PPUSH
12506: CALL_OW 88
// end else
12510: GO 12583
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12512: LD_INT 22
12514: PUSH
12515: LD_INT 1
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PUSH
12522: LD_INT 21
12524: PUSH
12525: LD_INT 1
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 26
12534: PUSH
12535: LD_INT 1
12537: PUSH
12538: EMPTY
12539: LIST
12540: LIST
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: PPUSH
12547: CALL_OW 69
12551: PUSH
12552: LD_EXP 1
12556: PUSH
12557: LD_EXP 7
12561: PUSH
12562: LD_EXP 4
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: DIFF
12572: PPUSH
12573: LD_STRING DAtt1a-Sol1-1
12575: PPUSH
12576: LD_STRING DAtt1-FSol1-1
12578: PPUSH
12579: CALL 4036 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12583: LD_EXP 1
12587: PPUSH
12588: LD_STRING DAtt1a-JMM-1
12590: PPUSH
12591: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12595: LD_INT 22
12597: PUSH
12598: LD_INT 1
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 21
12607: PUSH
12608: LD_INT 1
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 26
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: PPUSH
12630: CALL_OW 69
12634: PUSH
12635: LD_EXP 1
12639: PUSH
12640: LD_EXP 7
12644: PUSH
12645: LD_EXP 4
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: DIFF
12655: PPUSH
12656: LD_STRING DAtt1b-Sol1-1
12658: PPUSH
12659: LD_STRING DAtt1a-Sol1-1
12661: PPUSH
12662: CALL 4036 0 3
// end ;
12666: PPOPN 1
12668: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12669: LD_EXP 23
12673: PUSH
12674: LD_INT 2
12676: EQUAL
12677: IFFALSE 12739
12679: GO 12681
12681: DISABLE
12682: LD_INT 0
12684: PPUSH
// begin enable ;
12685: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12686: LD_ADDR_VAR 0 1
12690: PUSH
12691: LD_INT 5
12693: PPUSH
12694: LD_INT 22
12696: PUSH
12697: LD_INT 5
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 21
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: PPUSH
12718: CALL_OW 70
12722: PUSH
12723: FOR_IN
12724: IFFALSE 12737
// RemoveUnit ( i ) ;
12726: LD_VAR 0 1
12730: PPUSH
12731: CALL_OW 64
12735: GO 12723
12737: POP
12738: POP
// end ;
12739: PPOPN 1
12741: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12742: LD_INT 22
12744: PUSH
12745: LD_INT 5
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: PUSH
12760: LD_INT 0
12762: EQUAL
12763: PUSH
12764: LD_EXP 23
12768: PUSH
12769: LD_INT 2
12771: EQUAL
12772: AND
12773: IFFALSE 12786
12775: GO 12777
12777: DISABLE
// firstRussianAttack = 3 ;
12778: LD_ADDR_EXP 23
12782: PUSH
12783: LD_INT 3
12785: ST_TO_ADDR
12786: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12787: LD_EXP 28
12791: PUSH
12792: LD_INT 0
12794: EQUAL
12795: IFFALSE 12876
12797: GO 12799
12799: DISABLE
// begin timerStatus = 4 ;
12800: LD_ADDR_EXP 29
12804: PUSH
12805: LD_INT 4
12807: ST_TO_ADDR
// DialogueOn ;
12808: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12812: LD_EXP 13
12816: PPUSH
12817: LD_STRING D2-Don-1
12819: PPUSH
12820: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12824: LD_EXP 1
12828: PPUSH
12829: LD_STRING D2-JMM-1
12831: PPUSH
12832: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12836: LD_EXP 13
12840: PPUSH
12841: LD_STRING D2-Don-2
12843: PPUSH
12844: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12848: LD_EXP 1
12852: PPUSH
12853: LD_STRING D2-JMM-2
12855: PPUSH
12856: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12860: LD_EXP 13
12864: PPUSH
12865: LD_STRING D2-Don-3
12867: PPUSH
12868: CALL_OW 94
// DialogueOff ;
12872: CALL_OW 7
// end ;
12876: END
// every 12 12$0 do var tmp ;
12877: GO 12879
12879: DISABLE
12880: LD_INT 0
12882: PPUSH
// begin PrepareDonaldsonArmy ;
12883: CALL 985 0 0
// CenterNowOnUnits ( Donaldson ) ;
12887: LD_EXP 13
12891: PPUSH
12892: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_INT 4
12906: PUSH
12907: EMPTY
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 21
12913: PUSH
12914: LD_INT 1
12916: PUSH
12917: EMPTY
12918: LIST
12919: LIST
12920: PUSH
12921: LD_INT 26
12923: PUSH
12924: LD_INT 1
12926: PUSH
12927: EMPTY
12928: LIST
12929: LIST
12930: PUSH
12931: LD_INT 25
12933: PUSH
12934: LD_INT 1
12936: PUSH
12937: EMPTY
12938: LIST
12939: LIST
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PPUSH
12947: CALL_OW 69
12951: PUSH
12952: LD_EXP 5
12956: PUSH
12957: EMPTY
12958: LIST
12959: DIFF
12960: ST_TO_ADDR
// DialogueOn ;
12961: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12965: LD_VAR 0 1
12969: PPUSH
12970: LD_STRING D3-Sol1-1
12972: PPUSH
12973: LD_STRING D3-Sol1-1
12975: PPUSH
12976: CALL 4036 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12980: LD_INT 22
12982: PUSH
12983: LD_INT 4
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: PUSH
12990: LD_INT 21
12992: PUSH
12993: LD_INT 1
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 26
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 25
13012: PUSH
13013: LD_INT 3
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 69
13030: PPUSH
13031: LD_STRING D3-Sol2-1
13033: PPUSH
13034: LD_STRING D3-Sol2-1
13036: PPUSH
13037: CALL 4036 0 3
// if Frank then
13041: LD_EXP 5
13045: IFFALSE 13059
// Say ( Frank , D3-Frank-1 ) ;
13047: LD_EXP 5
13051: PPUSH
13052: LD_STRING D3-Frank-1
13054: PPUSH
13055: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13059: LD_EXP 13
13063: PPUSH
13064: LD_STRING D3-Don-1
13066: PPUSH
13067: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13071: LD_EXP 13
13075: PPUSH
13076: LD_STRING D3-Don-1a
13078: PPUSH
13079: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13083: LD_EXP 1
13087: PPUSH
13088: LD_STRING D3-JMM-1
13090: PPUSH
13091: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13095: LD_EXP 13
13099: PPUSH
13100: LD_STRING D3-Don-2
13102: PPUSH
13103: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13107: LD_INT 22
13109: PUSH
13110: LD_INT 6
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: LD_INT 21
13119: PUSH
13120: LD_INT 1
13122: PUSH
13123: EMPTY
13124: LIST
13125: LIST
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PPUSH
13131: CALL_OW 69
13135: PUSH
13136: LD_INT 0
13138: GREATER
13139: IFFALSE 13277
// begin Say ( JMM , D3-JMM-2 ) ;
13141: LD_EXP 1
13145: PPUSH
13146: LD_STRING D3-JMM-2
13148: PPUSH
13149: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13153: LD_EXP 13
13157: PPUSH
13158: LD_STRING D3-Don-3
13160: PPUSH
13161: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13165: LD_EXP 1
13169: PPUSH
13170: LD_STRING D3-JMM-3
13172: PPUSH
13173: CALL_OW 88
// if IsOK ( Frank ) then
13177: LD_EXP 5
13181: PPUSH
13182: CALL_OW 302
13186: IFFALSE 13200
// Say ( Frank , D3-Frank-3 ) ;
13188: LD_EXP 5
13192: PPUSH
13193: LD_STRING D3-Frank-3
13195: PPUSH
13196: CALL_OW 88
// DialogueOff ;
13200: CALL_OW 7
// if IsOK ( Frank ) then
13204: LD_EXP 5
13208: PPUSH
13209: CALL_OW 302
13213: IFFALSE 13275
// begin SetSide ( Frank , 0 ) ;
13215: LD_EXP 5
13219: PPUSH
13220: LD_INT 0
13222: PPUSH
13223: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13227: LD_EXP 5
13231: PPUSH
13232: LD_INT 12
13234: PPUSH
13235: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13239: LD_EXP 5
13243: PPUSH
13244: LD_STRING Frank
13246: PPUSH
13247: CALL_OW 38
// Wait ( 0 0$3 ) ;
13251: LD_INT 105
13253: PPUSH
13254: CALL_OW 67
// frankScoutBase = 1 ;
13258: LD_ADDR_EXP 25
13262: PUSH
13263: LD_INT 1
13265: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13266: LD_EXP 5
13270: PPUSH
13271: CALL_OW 64
// end ; end else
13275: GO 13364
// begin Say ( JMM , D3-JMM-4 ) ;
13277: LD_EXP 1
13281: PPUSH
13282: LD_STRING D3-JMM-4
13284: PPUSH
13285: CALL_OW 88
// DialogueOff ;
13289: CALL_OW 7
// if IsOK ( Frank ) then
13293: LD_EXP 5
13297: PPUSH
13298: CALL_OW 302
13302: IFFALSE 13364
// begin SetSide ( Frank , 0 ) ;
13304: LD_EXP 5
13308: PPUSH
13309: LD_INT 0
13311: PPUSH
13312: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13316: LD_EXP 5
13320: PPUSH
13321: LD_INT 12
13323: PPUSH
13324: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13328: LD_EXP 5
13332: PPUSH
13333: LD_STRING Frank
13335: PPUSH
13336: CALL_OW 38
// Wait ( 0 0$3 ) ;
13340: LD_INT 105
13342: PPUSH
13343: CALL_OW 67
// frankScoutBase = 1 ;
13347: LD_ADDR_EXP 25
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13355: LD_EXP 5
13359: PPUSH
13360: CALL_OW 64
// end ; end ; end ;
13364: PPOPN 1
13366: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13367: LD_EXP 13
13371: PPUSH
13372: CALL_OW 255
13376: PUSH
13377: LD_INT 4
13379: EQUAL
13380: PUSH
13381: LD_EXP 13
13385: PPUSH
13386: CALL_OW 302
13390: AND
13391: IFFALSE 13416
13393: GO 13395
13395: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13396: LD_EXP 13
13400: PPUSH
13401: LD_STRING D3b-Don-1
13403: PPUSH
13404: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13408: LD_ADDR_EXP 41
13412: PUSH
13413: LD_INT 1
13415: ST_TO_ADDR
// end ;
13416: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13417: LD_EXP 24
13421: PUSH
13422: LD_INT 0
13424: EQUAL
13425: IFFALSE 13581
13427: GO 13429
13429: DISABLE
13430: LD_INT 0
13432: PPUSH
13433: PPUSH
// begin enable ;
13434: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13435: LD_ADDR_VAR 0 1
13439: PUSH
13440: LD_INT 22
13442: PUSH
13443: LD_INT 4
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 21
13452: PUSH
13453: LD_INT 1
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: PUSH
13469: FOR_IN
13470: IFFALSE 13579
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 22
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PUSH
13487: LD_INT 21
13489: PUSH
13490: LD_INT 1
13492: PUSH
13493: EMPTY
13494: LIST
13495: LIST
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PPUSH
13501: CALL_OW 69
13505: PUSH
13506: FOR_IN
13507: IFFALSE 13575
// begin if GetDistUnits ( i , j ) < 7 then
13509: LD_VAR 0 1
13513: PPUSH
13514: LD_VAR 0 2
13518: PPUSH
13519: CALL_OW 296
13523: PUSH
13524: LD_INT 7
13526: LESS
13527: IFFALSE 13573
// begin saveDonaldson = 1 ;
13529: LD_ADDR_EXP 24
13533: PUSH
13534: LD_INT 1
13536: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13537: LD_INT 22
13539: PUSH
13540: LD_INT 4
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 1
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: PPUSH
13561: CALL_OW 69
13565: PPUSH
13566: LD_INT 1
13568: PPUSH
13569: CALL_OW 235
// end ; end ;
13573: GO 13506
13575: POP
13576: POP
// end ;
13577: GO 13469
13579: POP
13580: POP
// end ;
13581: PPOPN 2
13583: END
// every 2 2$0 trigger saveDonaldson = 1 do
13584: LD_EXP 24
13588: PUSH
13589: LD_INT 1
13591: EQUAL
13592: IFFALSE 13895
13594: GO 13596
13596: DISABLE
// begin uc_side = 4 ;
13597: LD_ADDR_OWVAR 20
13601: PUSH
13602: LD_INT 4
13604: ST_TO_ADDR
// uc_nation = 1 ;
13605: LD_ADDR_OWVAR 21
13609: PUSH
13610: LD_INT 1
13612: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13613: LD_ADDR_EXP 5
13617: PUSH
13618: LD_STRING Frank
13620: PPUSH
13621: CALL_OW 34
13625: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13626: LD_EXP 5
13630: PPUSH
13631: LD_INT 13
13633: PPUSH
13634: LD_INT 0
13636: PPUSH
13637: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13641: LD_INT 35
13643: PPUSH
13644: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13648: LD_EXP 1
13652: PPUSH
13653: CALL_OW 310
13657: NOT
13658: PUSH
13659: LD_EXP 1
13663: PPUSH
13664: LD_INT 4
13666: PPUSH
13667: CALL_OW 296
13671: PUSH
13672: LD_INT 20
13674: LESS
13675: AND
13676: IFFALSE 13709
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13678: LD_EXP 5
13682: PPUSH
13683: LD_EXP 1
13687: PPUSH
13688: CALL_OW 250
13692: PPUSH
13693: LD_EXP 1
13697: PPUSH
13698: CALL_OW 251
13702: PPUSH
13703: CALL_OW 111
13707: GO 13724
// ComMoveXY ( Frank , 51 , 15 ) ;
13709: LD_EXP 5
13713: PPUSH
13714: LD_INT 51
13716: PPUSH
13717: LD_INT 15
13719: PPUSH
13720: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
13724: LD_EXP 5
13728: PPUSH
13729: LD_EXP 1
13733: PPUSH
13734: CALL_OW 296
13738: PUSH
13739: LD_INT 10
13741: LESS
13742: IFFALSE 13641
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13744: LD_EXP 1
13748: PUSH
13749: LD_EXP 5
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PPUSH
13758: CALL_OW 87
// DialogueOn ;
13762: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13766: LD_EXP 5
13770: PPUSH
13771: LD_STRING D3a-Frank-1
13773: PPUSH
13774: CALL_OW 88
// if Lisa then
13778: LD_EXP 4
13782: IFFALSE 13832
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13784: LD_EXP 4
13788: PPUSH
13789: LD_STRING D3a-Lisa-1
13791: PPUSH
13792: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13796: LD_EXP 5
13800: PPUSH
13801: LD_STRING D3a-Frank-2
13803: PPUSH
13804: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13808: LD_EXP 4
13812: PPUSH
13813: LD_STRING D3a-Lisa-2
13815: PPUSH
13816: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13820: LD_EXP 5
13824: PPUSH
13825: LD_STRING D3a-Frank-3
13827: PPUSH
13828: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13832: LD_EXP 1
13836: PPUSH
13837: LD_STRING D3a-JMM-3
13839: PPUSH
13840: CALL_OW 88
// DialogueOff ;
13844: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13848: LD_EXP 5
13852: PPUSH
13853: LD_INT 1
13855: PPUSH
13856: CALL_OW 235
// InGameOn ;
13860: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13864: LD_INT 1
13866: PPUSH
13867: LD_INT 7
13869: PPUSH
13870: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13874: LD_INT 93
13876: PPUSH
13877: LD_INT 91
13879: PPUSH
13880: CALL_OW 84
// wait ( 0 0$5 ) ;
13884: LD_INT 175
13886: PPUSH
13887: CALL_OW 67
// InGameOff ;
13891: CALL_OW 9
// end ;
13895: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13896: LD_OWVAR 67
13900: PUSH
13901: LD_INT 2
13903: EQUAL
13904: PUSH
13905: LD_OWVAR 67
13909: PUSH
13910: LD_INT 3
13912: EQUAL
13913: OR
13914: IFFALSE 13938
13916: GO 13918
13918: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13919: LD_INT 24
13921: PPUSH
13922: LD_INT 24
13924: PPUSH
13925: LD_INT 1
13927: PPUSH
13928: LD_INT 1
13930: PPUSH
13931: LD_INT 53
13933: PPUSH
13934: CALL_OW 125
13938: END
// every 18 18$0 do
13939: GO 13941
13941: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13942: LD_EXP 14
13946: PPUSH
13947: LD_STRING D4-Har-1
13949: PPUSH
13950: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13954: LD_EXP 1
13958: PPUSH
13959: LD_STRING D4-JMM-1
13961: PPUSH
13962: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13966: LD_EXP 14
13970: PPUSH
13971: LD_STRING D4-Har-2
13973: PPUSH
13974: CALL_OW 94
// case query ( Q1 ) of 1 :
13978: LD_STRING Q1
13980: PPUSH
13981: CALL_OW 97
13985: PUSH
13986: LD_INT 1
13988: DOUBLE
13989: EQUAL
13990: IFTRUE 13994
13992: GO 14053
13994: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13995: LD_EXP 1
13999: PPUSH
14000: LD_STRING D5-JMM-1
14002: PPUSH
14003: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14007: LD_EXP 14
14011: PPUSH
14012: LD_STRING D5-Har-1
14014: PPUSH
14015: CALL_OW 94
// timeToSupport = 10 10$0 ;
14019: LD_ADDR_EXP 28
14023: PUSH
14024: LD_INT 21000
14026: ST_TO_ADDR
// timerStatus = 2 ;
14027: LD_ADDR_EXP 29
14031: PUSH
14032: LD_INT 2
14034: ST_TO_ADDR
// startTimer = 1 ;
14035: LD_ADDR_EXP 30
14039: PUSH
14040: LD_INT 1
14042: ST_TO_ADDR
// harrAnswer = 1 ;
14043: LD_ADDR_EXP 26
14047: PUSH
14048: LD_INT 1
14050: ST_TO_ADDR
// end ; 2 :
14051: GO 14188
14053: LD_INT 2
14055: DOUBLE
14056: EQUAL
14057: IFTRUE 14061
14059: GO 14120
14061: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14062: LD_EXP 1
14066: PPUSH
14067: LD_STRING D5-JMM-2
14069: PPUSH
14070: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14074: LD_EXP 14
14078: PPUSH
14079: LD_STRING D5-Har-2
14081: PPUSH
14082: CALL_OW 94
// timeToSupport = 5 5$0 ;
14086: LD_ADDR_EXP 28
14090: PUSH
14091: LD_INT 10500
14093: ST_TO_ADDR
// timerStatus = 2 ;
14094: LD_ADDR_EXP 29
14098: PUSH
14099: LD_INT 2
14101: ST_TO_ADDR
// startTimer = 1 ;
14102: LD_ADDR_EXP 30
14106: PUSH
14107: LD_INT 1
14109: ST_TO_ADDR
// harrAnswer = 2 ;
14110: LD_ADDR_EXP 26
14114: PUSH
14115: LD_INT 2
14117: ST_TO_ADDR
// end ; 3 :
14118: GO 14188
14120: LD_INT 3
14122: DOUBLE
14123: EQUAL
14124: IFTRUE 14128
14126: GO 14187
14128: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14129: LD_EXP 1
14133: PPUSH
14134: LD_STRING D5-JMM-3
14136: PPUSH
14137: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14141: LD_EXP 14
14145: PPUSH
14146: LD_STRING D5-Har-3
14148: PPUSH
14149: CALL_OW 94
// timeToSupport = 5 5$0 ;
14153: LD_ADDR_EXP 28
14157: PUSH
14158: LD_INT 10500
14160: ST_TO_ADDR
// timerStatus = 2 ;
14161: LD_ADDR_EXP 29
14165: PUSH
14166: LD_INT 2
14168: ST_TO_ADDR
// startTimer = 1 ;
14169: LD_ADDR_EXP 30
14173: PUSH
14174: LD_INT 1
14176: ST_TO_ADDR
// harrAnswer = 3 ;
14177: LD_ADDR_EXP 26
14181: PUSH
14182: LD_INT 3
14184: ST_TO_ADDR
// end ; end ;
14185: GO 14188
14187: POP
// end ;
14188: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14189: LD_EXP 29
14193: PUSH
14194: LD_INT 2
14196: EQUAL
14197: PUSH
14198: LD_EXP 28
14202: PUSH
14203: LD_INT 0
14205: EQUAL
14206: AND
14207: IFFALSE 14484
14209: GO 14211
14211: DISABLE
// begin timerStatus = 4 ;
14212: LD_ADDR_EXP 29
14216: PUSH
14217: LD_INT 4
14219: ST_TO_ADDR
// if harrAnswer = 1 then
14220: LD_EXP 26
14224: PUSH
14225: LD_INT 1
14227: EQUAL
14228: IFFALSE 14308
// begin PrepareHarrisonSupport ( 3 ) ;
14230: LD_INT 3
14232: PPUSH
14233: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14237: LD_INT 2100
14239: PPUSH
14240: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14244: LD_EXP 14
14248: PPUSH
14249: LD_STRING D7-Har-1
14251: PPUSH
14252: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14256: LD_STRING M2
14258: PPUSH
14259: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14263: LD_ADDR_EXP 27
14267: PUSH
14268: LD_INT 31500
14270: PUSH
14271: LD_INT 10500
14273: PUSH
14274: LD_INT 8400
14276: PUSH
14277: LD_INT 6300
14279: PUSH
14280: EMPTY
14281: LIST
14282: LIST
14283: LIST
14284: PUSH
14285: LD_OWVAR 67
14289: ARRAY
14290: PLUS
14291: ST_TO_ADDR
// startTimer = 1 ;
14292: LD_ADDR_EXP 30
14296: PUSH
14297: LD_INT 1
14299: ST_TO_ADDR
// timerStatus = 3 ;
14300: LD_ADDR_EXP 29
14304: PUSH
14305: LD_INT 3
14307: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14308: LD_EXP 26
14312: PUSH
14313: LD_INT 2
14315: EQUAL
14316: IFFALSE 14396
// begin PrepareHarrisonSupport ( 4 ) ;
14318: LD_INT 4
14320: PPUSH
14321: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14325: LD_INT 2100
14327: PPUSH
14328: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14332: LD_EXP 14
14336: PPUSH
14337: LD_STRING D7-Har-1
14339: PPUSH
14340: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14344: LD_STRING M2
14346: PPUSH
14347: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14351: LD_ADDR_EXP 27
14355: PUSH
14356: LD_INT 27300
14358: PUSH
14359: LD_INT 8400
14361: PUSH
14362: LD_INT 8400
14364: PUSH
14365: LD_INT 6300
14367: PUSH
14368: EMPTY
14369: LIST
14370: LIST
14371: LIST
14372: PUSH
14373: LD_OWVAR 67
14377: ARRAY
14378: PLUS
14379: ST_TO_ADDR
// startTimer = 1 ;
14380: LD_ADDR_EXP 30
14384: PUSH
14385: LD_INT 1
14387: ST_TO_ADDR
// timerStatus = 3 ;
14388: LD_ADDR_EXP 29
14392: PUSH
14393: LD_INT 3
14395: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14396: LD_EXP 26
14400: PUSH
14401: LD_INT 3
14403: EQUAL
14404: IFFALSE 14484
// begin PrepareHarrisonSupport ( 5 ) ;
14406: LD_INT 5
14408: PPUSH
14409: CALL 1549 0 1
// wait ( 1 1$0 ) ;
14413: LD_INT 2100
14415: PPUSH
14416: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14420: LD_EXP 14
14424: PPUSH
14425: LD_STRING D7-Har-1
14427: PPUSH
14428: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14432: LD_STRING M2
14434: PPUSH
14435: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14439: LD_ADDR_EXP 27
14443: PUSH
14444: LD_INT 21000
14446: PUSH
14447: LD_INT 8400
14449: PUSH
14450: LD_INT 6300
14452: PUSH
14453: LD_INT 4200
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: LIST
14460: PUSH
14461: LD_OWVAR 67
14465: ARRAY
14466: PLUS
14467: ST_TO_ADDR
// startTimer = 1 ;
14468: LD_ADDR_EXP 30
14472: PUSH
14473: LD_INT 1
14475: ST_TO_ADDR
// timerStatus = 3 ;
14476: LD_ADDR_EXP 29
14480: PUSH
14481: LD_INT 3
14483: ST_TO_ADDR
// end ; end ;
14484: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14485: LD_EXP 27
14489: PUSH
14490: LD_INT 8400
14492: LESSEQUAL
14493: PUSH
14494: LD_EXP 29
14498: PUSH
14499: LD_INT 3
14501: EQUAL
14502: AND
14503: IFFALSE 14535
14505: GO 14507
14507: DISABLE
// begin DialogueOn ;
14508: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14512: LD_EXP 14
14516: PPUSH
14517: LD_STRING D7a-Har-1
14519: PPUSH
14520: CALL_OW 94
// DialogueOff ;
14524: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14528: LD_STRING M2a
14530: PPUSH
14531: CALL_OW 337
// end ;
14535: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14536: LD_EXP 27
14540: PUSH
14541: LD_INT 0
14543: LESSEQUAL
14544: PUSH
14545: LD_EXP 29
14549: PUSH
14550: LD_INT 3
14552: EQUAL
14553: AND
14554: IFFALSE 14693
14556: GO 14558
14558: DISABLE
14559: LD_INT 0
14561: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14562: LD_ADDR_VAR 0 1
14566: PUSH
14567: LD_INT 22
14569: PUSH
14570: LD_INT 1
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: PPUSH
14577: CALL_OW 69
14581: PUSH
14582: LD_EXP 1
14586: PUSH
14587: EMPTY
14588: LIST
14589: DIFF
14590: ST_TO_ADDR
// saveDonaldson = 2 ;
14591: LD_ADDR_EXP 24
14595: PUSH
14596: LD_INT 2
14598: ST_TO_ADDR
// DialogueOn ;
14599: CALL_OW 6
// if IsOK ( Donaldson ) then
14603: LD_EXP 13
14607: PPUSH
14608: CALL_OW 302
14612: IFFALSE 14628
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14614: LD_EXP 14
14618: PPUSH
14619: LD_STRING D8-Har-1
14621: PPUSH
14622: CALL_OW 94
// end else
14626: GO 14640
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14628: LD_EXP 14
14632: PPUSH
14633: LD_STRING D8-Har-1a
14635: PPUSH
14636: CALL_OW 94
// end ; DialogueOff ;
14640: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_INT 4
14651: PPUSH
14652: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14656: LD_VAR 0 1
14660: PPUSH
14661: LD_INT 88
14663: PPUSH
14664: LD_INT 89
14666: PPUSH
14667: CALL_OW 114
// honor = 0 ;
14671: LD_ADDR_EXP 39
14675: PUSH
14676: LD_INT 0
14678: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14679: LD_INT 350
14681: PPUSH
14682: CALL_OW 67
// YouLost ( LostCommand ) ;
14686: LD_STRING LostCommand
14688: PPUSH
14689: CALL_OW 104
// end ;
14693: PPOPN 1
14695: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14696: LD_INT 22
14698: PUSH
14699: LD_INT 6
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 21
14708: PUSH
14709: LD_INT 1
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PPUSH
14720: CALL_OW 69
14724: PUSH
14725: LD_INT 0
14727: EQUAL
14728: PUSH
14729: LD_EXP 20
14733: PUSH
14734: LD_INT 0
14736: EQUAL
14737: AND
14738: PUSH
14739: LD_EXP 42
14743: PUSH
14744: LD_INT 1
14746: EQUAL
14747: AND
14748: IFFALSE 14842
14750: GO 14752
14752: DISABLE
14753: LD_INT 0
14755: PPUSH
14756: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14757: LD_ADDR_VAR 0 2
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 1
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: LD_INT 21
14774: PUSH
14775: LD_INT 1
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 23
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: PPUSH
14797: CALL_OW 69
14801: ST_TO_ADDR
// for i in tmp do
14802: LD_ADDR_VAR 0 1
14806: PUSH
14807: LD_VAR 0 2
14811: PUSH
14812: FOR_IN
14813: IFFALSE 14840
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14815: LD_VAR 0 1
14819: PPUSH
14820: LD_INT 1
14822: PPUSH
14823: LD_INT 4
14825: PPUSH
14826: CALL_OW 12
14830: PPUSH
14831: LD_INT 500
14833: PPUSH
14834: CALL_OW 492
// end ;
14838: GO 14812
14840: POP
14841: POP
// end ; end_of_file
14842: PPOPN 2
14844: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
14845: GO 14847
14847: DISABLE
14848: LD_INT 0
14850: PPUSH
// begin enemyWayX = [ ] ;
14851: LD_ADDR_EXP 46
14855: PUSH
14856: EMPTY
14857: ST_TO_ADDR
// enemyWayY = [ ] ;
14858: LD_ADDR_EXP 47
14862: PUSH
14863: EMPTY
14864: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
14865: LD_ADDR_VAR 0 1
14869: PUSH
14870: LD_INT 1
14872: PPUSH
14873: LD_INT 3
14875: PPUSH
14876: CALL_OW 12
14880: ST_TO_ADDR
// if rnd = 1 then
14881: LD_VAR 0 1
14885: PUSH
14886: LD_INT 1
14888: EQUAL
14889: IFFALSE 14929
// begin enemyWayX = [ 73 , 46 , 29 ] ;
14891: LD_ADDR_EXP 46
14895: PUSH
14896: LD_INT 73
14898: PUSH
14899: LD_INT 46
14901: PUSH
14902: LD_INT 29
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: LIST
14909: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
14910: LD_ADDR_EXP 47
14914: PUSH
14915: LD_INT 71
14917: PUSH
14918: LD_INT 43
14920: PUSH
14921: LD_INT 29
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: ST_TO_ADDR
// end ; if rnd = 2 then
14929: LD_VAR 0 1
14933: PUSH
14934: LD_INT 2
14936: EQUAL
14937: IFFALSE 14961
// begin enemyWayX = [ 64 ] ;
14939: LD_ADDR_EXP 46
14943: PUSH
14944: LD_INT 64
14946: PUSH
14947: EMPTY
14948: LIST
14949: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
14950: LD_ADDR_EXP 47
14954: PUSH
14955: LD_INT 43
14957: PUSH
14958: EMPTY
14959: LIST
14960: ST_TO_ADDR
// end ; if rnd = 3 then
14961: LD_VAR 0 1
14965: PUSH
14966: LD_INT 3
14968: EQUAL
14969: IFFALSE 14993
// begin enemyWayX = [ 80 ] ;
14971: LD_ADDR_EXP 46
14975: PUSH
14976: LD_INT 80
14978: PUSH
14979: EMPTY
14980: LIST
14981: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
14982: LD_ADDR_EXP 47
14986: PUSH
14987: LD_INT 28
14989: PUSH
14990: EMPTY
14991: LIST
14992: ST_TO_ADDR
// end ; enable ;
14993: ENABLE
// end ;
14994: PPOPN 1
14996: END
// every 0 0$1 trigger AIEnable = 1 do
14997: LD_EXP 37
15001: PUSH
15002: LD_INT 1
15004: EQUAL
15005: IFFALSE 15119
15007: GO 15009
15009: DISABLE
// begin enable ;
15010: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15011: LD_INT 3
15013: PPUSH
15014: LD_INT 21
15016: PPUSH
15017: LD_INT 7
15019: PPUSH
15020: CALL 5560 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15024: LD_INT 3
15026: PPUSH
15027: LD_INT 8
15029: PPUSH
15030: LD_INT 7
15032: PPUSH
15033: LD_INT 1
15035: PPUSH
15036: CALL 5866 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15040: LD_INT 3
15042: PPUSH
15043: LD_INT 17
15045: PPUSH
15046: LD_INT 108
15048: PPUSH
15049: LD_INT 95
15051: PPUSH
15052: CALL 7110 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15056: LD_INT 3
15058: PPUSH
15059: LD_INT 23
15061: PPUSH
15062: LD_EXP 46
15066: PPUSH
15067: LD_EXP 47
15071: PPUSH
15072: CALL 6522 0 4
// if baseReadyToBuild = 2 then
15076: LD_EXP 20
15080: PUSH
15081: LD_INT 2
15083: EQUAL
15084: IFFALSE 15119
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15086: LD_INT 6
15088: PPUSH
15089: LD_EXP 21
15093: PPUSH
15094: LD_INT 6
15096: PPUSH
15097: CALL 5560 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15101: LD_INT 6
15103: PPUSH
15104: LD_INT 9
15106: PPUSH
15107: LD_INT 6
15109: PPUSH
15110: LD_EXP 22
15114: PPUSH
15115: CALL 5866 0 4
// end ; end ;
15119: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15120: LD_INT 22
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: LD_INT 21
15132: PUSH
15133: LD_INT 2
15135: PUSH
15136: EMPTY
15137: LIST
15138: LIST
15139: PUSH
15140: LD_INT 55
15142: PUSH
15143: EMPTY
15144: LIST
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: PPUSH
15151: CALL_OW 69
15155: PUSH
15156: LD_INT 0
15158: EQUAL
15159: PUSH
15160: LD_INT 1
15162: PPUSH
15163: CALL_OW 255
15167: PUSH
15168: LD_INT 3
15170: EQUAL
15171: AND
15172: PUSH
15173: LD_INT 21
15175: PPUSH
15176: CALL_OW 302
15180: AND
15181: PUSH
15182: LD_INT 21
15184: PPUSH
15185: CALL_OW 255
15189: PUSH
15190: LD_INT 3
15192: EQUAL
15193: AND
15194: PUSH
15195: LD_INT 21
15197: PPUSH
15198: CALL_OW 302
15202: AND
15203: IFFALSE 15408
15205: GO 15207
15207: DISABLE
// begin enable ;
15208: ENABLE
// if Difficulty = 1 then
15209: LD_OWVAR 67
15213: PUSH
15214: LD_INT 1
15216: EQUAL
15217: IFFALSE 15261
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15219: LD_INT 3
15221: PPUSH
15222: LD_INT 24
15224: PPUSH
15225: LD_OWVAR 67
15229: PUSH
15230: LD_INT 2
15232: PLUS
15233: PPUSH
15234: LD_INT 42
15236: PUSH
15237: LD_INT 42
15239: PUSH
15240: LD_INT 43
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: PPUSH
15248: LD_INT 1
15250: PPUSH
15251: LD_INT 1
15253: PPUSH
15254: LD_INT 21
15256: PPUSH
15257: CALL 6410 0 7
// if Difficulty = 2 then
15261: LD_OWVAR 67
15265: PUSH
15266: LD_INT 2
15268: EQUAL
15269: IFFALSE 15336
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15271: LD_INT 3
15273: PPUSH
15274: LD_INT 24
15276: PPUSH
15277: LD_OWVAR 67
15281: PUSH
15282: LD_INT 2
15284: PLUS
15285: PPUSH
15286: LD_INT 42
15288: PUSH
15289: LD_INT 42
15291: PUSH
15292: LD_INT 43
15294: PUSH
15295: LD_INT 43
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: PPUSH
15304: LD_INT 1
15306: PPUSH
15307: LD_INT 1
15309: PPUSH
15310: LD_INT 21
15312: PUSH
15313: LD_INT 22
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 1
15322: PPUSH
15323: LD_INT 2
15325: PPUSH
15326: CALL_OW 12
15330: ARRAY
15331: PPUSH
15332: CALL 6410 0 7
// if Difficulty = 3 then
15336: LD_OWVAR 67
15340: PUSH
15341: LD_INT 3
15343: EQUAL
15344: IFFALSE 15408
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15346: LD_INT 3
15348: PPUSH
15349: LD_INT 24
15351: PPUSH
15352: LD_OWVAR 67
15356: PUSH
15357: LD_INT 2
15359: PPUSH
15360: LD_INT 3
15362: PPUSH
15363: CALL_OW 12
15367: PLUS
15368: PPUSH
15369: LD_INT 43
15371: PUSH
15372: LD_INT 43
15374: PUSH
15375: LD_INT 43
15377: PUSH
15378: LD_INT 43
15380: PUSH
15381: LD_INT 44
15383: PUSH
15384: LD_INT 44
15386: PUSH
15387: EMPTY
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: PPUSH
15395: LD_INT 1
15397: PPUSH
15398: LD_INT 1
15400: PPUSH
15401: LD_INT 22
15403: PPUSH
15404: CALL 6410 0 7
// end ;
15408: END
// every 0 0$1 do
15409: GO 15411
15411: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15412: LD_INT 3
15414: PPUSH
15415: LD_INT 1
15417: PPUSH
15418: LD_INT 3
15420: PPUSH
15421: CALL 5475 0 3
15425: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15426: LD_EXP 20
15430: PUSH
15431: LD_INT 1
15433: EQUAL
15434: IFFALSE 15581
15436: GO 15438
15438: DISABLE
15439: LD_INT 0
15441: PPUSH
15442: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15443: LD_ADDR_VAR 0 2
15447: PUSH
15448: LD_INT 22
15450: PUSH
15451: LD_INT 6
15453: PUSH
15454: EMPTY
15455: LIST
15456: LIST
15457: PUSH
15458: LD_INT 21
15460: PUSH
15461: LD_INT 2
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: PUSH
15468: LD_INT 34
15470: PUSH
15471: LD_INT 51
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15488: LD_VAR 0 2
15492: PUSH
15493: LD_INT 1
15495: ARRAY
15496: PPUSH
15497: LD_EXP 21
15501: PPUSH
15502: CALL_OW 250
15506: PUSH
15507: LD_INT 5
15509: MINUS
15510: PPUSH
15511: LD_EXP 21
15515: PPUSH
15516: CALL_OW 251
15520: PUSH
15521: LD_INT 5
15523: MINUS
15524: PPUSH
15525: CALL_OW 111
// wait ( 0 0$5 ) ;
15529: LD_INT 175
15531: PPUSH
15532: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15536: LD_VAR 0 2
15540: PUSH
15541: LD_INT 1
15543: ARRAY
15544: PPUSH
15545: LD_INT 41
15547: PPUSH
15548: LD_INT 52
15550: PPUSH
15551: CALL_OW 177
// wait ( 0 0$40 ) ;
15555: LD_INT 1400
15557: PPUSH
15558: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15562: LD_VAR 0 2
15566: PUSH
15567: LD_INT 1
15569: ARRAY
15570: PPUSH
15571: LD_INT 41
15573: PPUSH
15574: LD_INT 44
15576: PPUSH
15577: CALL_OW 111
// end ;
15581: PPOPN 2
15583: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15584: LD_EXP 21
15588: PPUSH
15589: CALL_OW 274
15593: PPUSH
15594: LD_INT 1
15596: PPUSH
15597: CALL_OW 275
15601: PUSH
15602: LD_INT 100
15604: GREATEREQUAL
15605: IFFALSE 15833
15607: GO 15609
15609: DISABLE
15610: LD_INT 0
15612: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15613: LD_ADDR_VAR 0 1
15617: PUSH
15618: LD_INT 22
15620: PUSH
15621: LD_INT 6
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: LD_INT 21
15630: PUSH
15631: LD_INT 1
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: PUSH
15638: LD_INT 25
15640: PUSH
15641: LD_INT 2
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15658: LD_VAR 0 1
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: LD_INT 4
15669: PPUSH
15670: LD_INT 39
15672: PPUSH
15673: LD_INT 37
15675: PPUSH
15676: LD_INT 3
15678: PPUSH
15679: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15683: LD_VAR 0 1
15687: PUSH
15688: LD_INT 1
15690: ARRAY
15691: PPUSH
15692: LD_INT 29
15694: PPUSH
15695: LD_INT 42
15697: PPUSH
15698: LD_INT 54
15700: PPUSH
15701: LD_INT 3
15703: PPUSH
15704: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15708: LD_VAR 0 1
15712: PUSH
15713: LD_INT 1
15715: ARRAY
15716: PPUSH
15717: LD_INT 6
15719: PPUSH
15720: LD_INT 38
15722: PPUSH
15723: LD_INT 48
15725: PPUSH
15726: LD_INT 0
15728: PPUSH
15729: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15733: LD_VAR 0 1
15737: PUSH
15738: LD_INT 1
15740: ARRAY
15741: PPUSH
15742: LD_INT 2
15744: PPUSH
15745: LD_INT 32
15747: PPUSH
15748: LD_INT 38
15750: PPUSH
15751: LD_INT 2
15753: PPUSH
15754: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15758: LD_VAR 0 1
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PPUSH
15767: LD_INT 26
15769: PPUSH
15770: LD_INT 39
15772: PPUSH
15773: LD_INT 55
15775: PPUSH
15776: LD_INT 3
15778: PPUSH
15779: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15783: LD_VAR 0 1
15787: PUSH
15788: LD_INT 1
15790: ARRAY
15791: PPUSH
15792: LD_INT 32
15794: PPUSH
15795: LD_INT 31
15797: PPUSH
15798: LD_INT 31
15800: PPUSH
15801: LD_INT 3
15803: PPUSH
15804: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15808: LD_VAR 0 1
15812: PUSH
15813: LD_INT 1
15815: ARRAY
15816: PPUSH
15817: LD_INT 31
15819: PPUSH
15820: LD_INT 50
15822: PPUSH
15823: LD_INT 51
15825: PPUSH
15826: LD_INT 4
15828: PPUSH
15829: CALL_OW 205
// end ; end_of_file
15833: PPOPN 1
15835: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15836: LD_INT 0
15838: PPUSH
15839: PPUSH
15840: PPUSH
15841: PPUSH
15842: PPUSH
15843: PPUSH
15844: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15845: LD_ADDR_VAR 0 3
15849: PUSH
15850: LD_INT 22
15852: PUSH
15853: LD_INT 6
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 21
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 25
15872: PUSH
15873: LD_INT 1
15875: PUSH
15876: EMPTY
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 3
15882: PUSH
15883: LD_INT 54
15885: PUSH
15886: EMPTY
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: LIST
15897: LIST
15898: PPUSH
15899: CALL_OW 69
15903: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15904: LD_ADDR_VAR 0 7
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 6
15914: PUSH
15915: EMPTY
15916: LIST
15917: LIST
15918: PUSH
15919: LD_INT 21
15921: PUSH
15922: LD_INT 1
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: LD_INT 25
15931: PUSH
15932: LD_INT 1
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: PUSH
15939: LD_INT 54
15941: PUSH
15942: EMPTY
15943: LIST
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: PPUSH
15951: CALL_OW 69
15955: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15956: LD_ADDR_VAR 0 4
15960: PUSH
15961: LD_INT 22
15963: PUSH
15964: LD_INT 6
15966: PUSH
15967: EMPTY
15968: LIST
15969: LIST
15970: PUSH
15971: LD_INT 21
15973: PUSH
15974: LD_INT 1
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 25
15983: PUSH
15984: LD_INT 2
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16001: LD_ADDR_VAR 0 6
16005: PUSH
16006: LD_INT 22
16008: PUSH
16009: LD_INT 6
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PUSH
16016: LD_INT 21
16018: PUSH
16019: LD_INT 1
16021: PUSH
16022: EMPTY
16023: LIST
16024: LIST
16025: PUSH
16026: LD_INT 25
16028: PUSH
16029: LD_INT 4
16031: PUSH
16032: EMPTY
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: LIST
16040: PPUSH
16041: CALL_OW 69
16045: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16046: LD_ADDR_VAR 0 8
16050: PUSH
16051: LD_INT 22
16053: PUSH
16054: LD_INT 6
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: LD_INT 21
16063: PUSH
16064: LD_INT 2
16066: PUSH
16067: EMPTY
16068: LIST
16069: LIST
16070: PUSH
16071: LD_INT 34
16073: PUSH
16074: LD_INT 51
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: PPUSH
16086: CALL_OW 69
16090: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 255
16100: PUSH
16101: LD_INT 6
16103: EQUAL
16104: PUSH
16105: LD_VAR 0 1
16109: PPUSH
16110: CALL_OW 266
16114: PUSH
16115: LD_INT 0
16117: EQUAL
16118: AND
16119: IFFALSE 16139
// begin ruPDepot = building ;
16121: LD_ADDR_EXP 21
16125: PUSH
16126: LD_VAR 0 1
16130: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16131: LD_ADDR_EXP 20
16135: PUSH
16136: LD_INT 1
16138: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16139: LD_VAR 0 1
16143: PPUSH
16144: CALL_OW 266
16148: PUSH
16149: LD_INT 4
16151: EQUAL
16152: PUSH
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL_OW 255
16162: PUSH
16163: LD_INT 6
16165: EQUAL
16166: AND
16167: IFFALSE 16200
// for i in tmpSold do
16169: LD_ADDR_VAR 0 2
16173: PUSH
16174: LD_VAR 0 3
16178: PUSH
16179: FOR_IN
16180: IFFALSE 16198
// ComEnterUnit ( i , building ) ;
16182: LD_VAR 0 2
16186: PPUSH
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 120
16196: GO 16179
16198: POP
16199: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16200: LD_VAR 0 1
16204: PPUSH
16205: CALL_OW 266
16209: PUSH
16210: LD_INT 6
16212: EQUAL
16213: PUSH
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 255
16223: PUSH
16224: LD_INT 6
16226: EQUAL
16227: AND
16228: IFFALSE 16286
// begin for i in tmpSci do
16230: LD_ADDR_VAR 0 2
16234: PUSH
16235: LD_VAR 0 6
16239: PUSH
16240: FOR_IN
16241: IFFALSE 16259
// ComEnterUnit ( i , building ) ;
16243: LD_VAR 0 2
16247: PPUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 120
16257: GO 16240
16259: POP
16260: POP
// ResAllTechs ( 6 , building , 3 ) ;
16261: LD_INT 6
16263: PPUSH
16264: LD_VAR 0 1
16268: PPUSH
16269: LD_INT 3
16271: PPUSH
16272: CALL 5475 0 3
// ruPLab = building ;
16276: LD_ADDR_EXP 22
16280: PUSH
16281: LD_VAR 0 1
16285: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16286: LD_VAR 0 1
16290: PPUSH
16291: CALL_OW 266
16295: PUSH
16296: LD_INT 2
16298: EQUAL
16299: PUSH
16300: LD_VAR 0 1
16304: PPUSH
16305: CALL_OW 255
16309: PUSH
16310: LD_INT 6
16312: EQUAL
16313: AND
16314: IFFALSE 16365
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16316: LD_ADDR_VAR 0 5
16320: PUSH
16321: LD_VAR 0 8
16325: PUSH
16326: LD_INT 1
16328: ARRAY
16329: PPUSH
16330: CALL_OW 313
16334: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16335: LD_VAR 0 5
16339: PPUSH
16340: CALL_OW 121
// wait ( 0 0$1 ) ;
16344: LD_INT 35
16346: PPUSH
16347: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16351: LD_VAR 0 5
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16365: LD_VAR 0 1
16369: PPUSH
16370: CALL_OW 266
16374: PUSH
16375: LD_INT 32
16377: EQUAL
16378: PUSH
16379: LD_VAR 0 1
16383: PPUSH
16384: CALL_OW 255
16388: PUSH
16389: LD_INT 6
16391: EQUAL
16392: AND
16393: IFFALSE 16445
// begin ComPlaceWeapon ( building , 42 ) ;
16395: LD_VAR 0 1
16399: PPUSH
16400: LD_INT 42
16402: PPUSH
16403: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16407: LD_VAR 0 7
16411: PUSH
16412: LD_INT 1
16414: ARRAY
16415: PPUSH
16416: CALL_OW 122
// wait ( 0 0$1 ) ;
16420: LD_INT 35
16422: PPUSH
16423: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16427: LD_VAR 0 7
16431: PUSH
16432: LD_INT 1
16434: ARRAY
16435: PPUSH
16436: LD_VAR 0 1
16440: PPUSH
16441: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16445: LD_VAR 0 1
16449: PPUSH
16450: CALL_OW 266
16454: PUSH
16455: LD_INT 31
16457: EQUAL
16458: PUSH
16459: LD_VAR 0 1
16463: PPUSH
16464: CALL_OW 255
16468: PUSH
16469: LD_INT 6
16471: EQUAL
16472: AND
16473: IFFALSE 16539
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16475: LD_VAR 0 7
16479: PUSH
16480: LD_INT 2
16482: ARRAY
16483: PPUSH
16484: CALL_OW 122
// wait ( 0 0$1 ) ;
16488: LD_INT 35
16490: PPUSH
16491: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16495: LD_VAR 0 7
16499: PUSH
16500: LD_INT 2
16502: ARRAY
16503: PPUSH
16504: LD_VAR 0 1
16508: PPUSH
16509: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16513: LD_VAR 0 4
16517: PUSH
16518: LD_INT 1
16520: ARRAY
16521: PPUSH
16522: LD_EXP 21
16526: PPUSH
16527: CALL_OW 120
// baseReadyToBuild = 2 ;
16531: LD_ADDR_EXP 20
16535: PUSH
16536: LD_INT 2
16538: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 266
16548: PUSH
16549: LD_INT 32
16551: EQUAL
16552: PUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 255
16562: PUSH
16563: LD_INT 1
16565: EQUAL
16566: AND
16567: PUSH
16568: LD_EXP 32
16572: PUSH
16573: LD_INT 0
16575: EQUAL
16576: AND
16577: IFFALSE 16822
// begin bunkerDialog = 1 ;
16579: LD_ADDR_EXP 32
16583: PUSH
16584: LD_INT 1
16586: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16587: LD_EXP 11
16591: PPUSH
16592: CALL_OW 302
16596: IFFALSE 16612
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16598: LD_EXP 11
16602: PPUSH
16603: LD_STRING D11-Eng1-1
16605: PPUSH
16606: CALL_OW 88
// end else
16610: GO 16808
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16612: LD_INT 22
16614: PUSH
16615: LD_INT 1
16617: PUSH
16618: EMPTY
16619: LIST
16620: LIST
16621: PUSH
16622: LD_INT 21
16624: PUSH
16625: LD_INT 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: LIST
16631: PUSH
16632: LD_INT 25
16634: PUSH
16635: LD_INT 3
16637: PUSH
16638: EMPTY
16639: LIST
16640: LIST
16641: PUSH
16642: LD_INT 26
16644: PUSH
16645: LD_INT 1
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: PPUSH
16658: CALL_OW 69
16662: PUSH
16663: LD_EXP 1
16667: PUSH
16668: EMPTY
16669: LIST
16670: PUSH
16671: LD_INT 0
16673: GREATER
16674: DIFF
16675: IFFALSE 16749
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16677: LD_INT 22
16679: PUSH
16680: LD_INT 1
16682: PUSH
16683: EMPTY
16684: LIST
16685: LIST
16686: PUSH
16687: LD_INT 21
16689: PUSH
16690: LD_INT 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 25
16699: PUSH
16700: LD_INT 2
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 26
16709: PUSH
16710: LD_INT 1
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: PUSH
16717: EMPTY
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: PPUSH
16723: CALL_OW 69
16727: PUSH
16728: LD_EXP 1
16732: PUSH
16733: EMPTY
16734: LIST
16735: DIFF
16736: PPUSH
16737: LD_STRING D11-Eng1-1
16739: PPUSH
16740: LD_STRING D11-Eng1-1
16742: PPUSH
16743: CALL 4036 0 3
// end else
16747: GO 16808
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16749: LD_INT 22
16751: PUSH
16752: LD_INT 1
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 21
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: LD_INT 26
16771: PUSH
16772: LD_INT 1
16774: PUSH
16775: EMPTY
16776: LIST
16777: LIST
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: LIST
16783: PPUSH
16784: CALL_OW 69
16788: PUSH
16789: LD_EXP 1
16793: PUSH
16794: EMPTY
16795: LIST
16796: DIFF
16797: PPUSH
16798: LD_STRING D11-Eng1-1
16800: PPUSH
16801: LD_STRING D11-Eng1-1
16803: PPUSH
16804: CALL 4036 0 3
// end ; end ; if energyVDialog = 0 then
16808: LD_EXP 33
16812: PUSH
16813: LD_INT 0
16815: EQUAL
16816: IFFALSE 16822
// EnergyDialog ;
16818: CALL 4527 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16822: LD_VAR 0 1
16826: PPUSH
16827: CALL_OW 266
16831: PUSH
16832: LD_INT 29
16834: EQUAL
16835: PUSH
16836: LD_VAR 0 1
16840: PPUSH
16841: CALL_OW 255
16845: PUSH
16846: LD_INT 1
16848: EQUAL
16849: AND
16850: IFFALSE 16860
// buildOil = 1 ;
16852: LD_ADDR_EXP 34
16856: PUSH
16857: LD_INT 1
16859: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 266
16869: PUSH
16870: LD_INT 26
16872: EQUAL
16873: PUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 255
16883: PUSH
16884: LD_INT 1
16886: EQUAL
16887: AND
16888: IFFALSE 16898
// buildPower = 1 ;
16890: LD_ADDR_EXP 35
16894: PUSH
16895: LD_INT 1
16897: ST_TO_ADDR
// end ;
16898: PPOPN 8
16900: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16901: LD_VAR 0 1
16905: PPUSH
16906: CALL_OW 266
16910: PUSH
16911: LD_INT 3
16913: EQUAL
16914: PUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 255
16924: PUSH
16925: LD_INT 1
16927: EQUAL
16928: AND
16929: PUSH
16930: LD_EXP 31
16934: PUSH
16935: LD_INT 0
16937: EQUAL
16938: AND
16939: IFFALSE 17255
// begin factoryDialog = 1 ;
16941: LD_ADDR_EXP 31
16945: PUSH
16946: LD_INT 1
16948: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16949: LD_INT 22
16951: PUSH
16952: LD_INT 1
16954: PUSH
16955: EMPTY
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 21
16961: PUSH
16962: LD_INT 3
16964: PUSH
16965: EMPTY
16966: LIST
16967: LIST
16968: PUSH
16969: LD_INT 30
16971: PUSH
16972: LD_INT 3
16974: PUSH
16975: EMPTY
16976: LIST
16977: LIST
16978: PUSH
16979: LD_INT 24
16981: PUSH
16982: LD_INT 1000
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PPUSH
16995: CALL_OW 69
16999: PUSH
17000: LD_INT 1
17002: ARRAY
17003: PPUSH
17004: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17008: LD_EXP 1
17012: PPUSH
17013: LD_STRING D9a-JMM-1
17015: PPUSH
17016: CALL_OW 88
// if IsOK ( Campell ) then
17020: LD_EXP 12
17024: PPUSH
17025: CALL_OW 302
17029: IFFALSE 17045
// begin Say ( Campell , D9a-Mech1-1 ) ;
17031: LD_EXP 12
17035: PPUSH
17036: LD_STRING D9a-Mech1-1
17038: PPUSH
17039: CALL_OW 88
// end else
17043: GO 17241
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17045: LD_INT 22
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 21
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 26
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: LD_EXP 1
17100: PUSH
17101: EMPTY
17102: LIST
17103: PUSH
17104: LD_INT 0
17106: GREATER
17107: DIFF
17108: IFFALSE 17182
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17110: LD_INT 22
17112: PUSH
17113: LD_INT 1
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: PUSH
17120: LD_INT 21
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 25
17132: PUSH
17133: LD_INT 3
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 26
17142: PUSH
17143: LD_INT 1
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: PPUSH
17156: CALL_OW 69
17160: PUSH
17161: LD_EXP 1
17165: PUSH
17166: EMPTY
17167: LIST
17168: DIFF
17169: PPUSH
17170: LD_STRING D9a-Mech1-1
17172: PPUSH
17173: LD_STRING D9a-Mech1-1
17175: PPUSH
17176: CALL 4036 0 3
// end else
17180: GO 17241
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17182: LD_INT 22
17184: PUSH
17185: LD_INT 1
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: LD_INT 21
17194: PUSH
17195: LD_INT 1
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: LD_INT 26
17204: PUSH
17205: LD_INT 1
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: LIST
17216: PPUSH
17217: CALL_OW 69
17221: PUSH
17222: LD_EXP 1
17226: PUSH
17227: EMPTY
17228: LIST
17229: DIFF
17230: PPUSH
17231: LD_STRING D9a-Mech1-1
17233: PPUSH
17234: LD_STRING D9a-Mech1-1
17236: PPUSH
17237: CALL 4036 0 3
// end ; end ; if energyVDialog = 0 then
17241: LD_EXP 33
17245: PUSH
17246: LD_INT 0
17248: EQUAL
17249: IFFALSE 17255
// EnergyDialog ;
17251: CALL 4527 0 0
// end ; end ;
17255: PPOPN 1
17257: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17258: LD_VAR 0 1
17262: PPUSH
17263: CALL_OW 247
17267: PUSH
17268: LD_INT 1
17270: EQUAL
17271: PUSH
17272: LD_VAR 0 1
17276: PPUSH
17277: CALL_OW 255
17281: PUSH
17282: LD_INT 1
17284: EQUAL
17285: AND
17286: IFFALSE 17302
// lostCounter = lostCounter + 1 ;
17288: LD_ADDR_EXP 38
17292: PUSH
17293: LD_EXP 38
17297: PUSH
17298: LD_INT 1
17300: PLUS
17301: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 257
17311: PUSH
17312: LD_INT 3
17314: EQUAL
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 255
17325: PUSH
17326: LD_INT 3
17328: EQUAL
17329: AND
17330: PUSH
17331: LD_INT 24
17333: PPUSH
17334: CALL_OW 302
17338: AND
17339: PUSH
17340: LD_INT 24
17342: PPUSH
17343: CALL_OW 255
17347: PUSH
17348: LD_INT 3
17350: EQUAL
17351: AND
17352: IFFALSE 17420
// begin uc_side = 3 ;
17354: LD_ADDR_OWVAR 20
17358: PUSH
17359: LD_INT 3
17361: ST_TO_ADDR
// uc_nation = 3 ;
17362: LD_ADDR_OWVAR 21
17366: PUSH
17367: LD_INT 3
17369: ST_TO_ADDR
// hc_gallery :=  ;
17370: LD_ADDR_OWVAR 33
17374: PUSH
17375: LD_STRING 
17377: ST_TO_ADDR
// hc_name :=  ;
17378: LD_ADDR_OWVAR 26
17382: PUSH
17383: LD_STRING 
17385: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17386: LD_INT 0
17388: PPUSH
17389: LD_EXP 16
17393: PPUSH
17394: LD_EXP 17
17398: PPUSH
17399: CALL_OW 12
17403: PPUSH
17404: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17408: CALL_OW 44
17412: PPUSH
17413: LD_INT 24
17415: PPUSH
17416: CALL_OW 52
// end ; end ;
17420: PPOPN 1
17422: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17423: LD_INT 0
17425: PPUSH
17426: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17427: LD_ADDR_VAR 0 4
17431: PUSH
17432: LD_INT 22
17434: PUSH
17435: LD_INT 1
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PPUSH
17442: CALL_OW 69
17446: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17447: LD_VAR 0 1
17451: PUSH
17452: LD_INT 1
17454: EQUAL
17455: PUSH
17456: LD_VAR 0 2
17460: PUSH
17461: LD_INT 6
17463: EQUAL
17464: AND
17465: PUSH
17466: LD_EXP 41
17470: PUSH
17471: LD_INT 1
17473: EQUAL
17474: AND
17475: IFFALSE 17530
// begin donaldsonCoopAttack = 0 ;
17477: LD_ADDR_EXP 41
17481: PUSH
17482: LD_INT 0
17484: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17485: LD_ADDR_VAR 0 3
17489: PUSH
17490: LD_INT 22
17492: PUSH
17493: LD_INT 4
17495: PUSH
17496: EMPTY
17497: LIST
17498: LIST
17499: PUSH
17500: EMPTY
17501: LIST
17502: PPUSH
17503: CALL_OW 69
17507: PUSH
17508: FOR_IN
17509: IFFALSE 17528
// ComAgressiveMove ( i , 52 , 64 ) ;
17511: LD_VAR 0 3
17515: PPUSH
17516: LD_INT 52
17518: PPUSH
17519: LD_INT 64
17521: PPUSH
17522: CALL_OW 114
17526: GO 17508
17528: POP
17529: POP
// end ; end ;
17530: PPOPN 4
17532: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17533: LD_VAR 0 1
17537: PPUSH
17538: CALL_OW 264
17542: PUSH
17543: LD_INT 53
17545: EQUAL
17546: IFFALSE 17631
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17548: LD_VAR 0 1
17552: PPUSH
17553: LD_INT 21
17555: PPUSH
17556: CALL 4743 0 2
// uc_side = 3 ;
17560: LD_ADDR_OWVAR 20
17564: PUSH
17565: LD_INT 3
17567: ST_TO_ADDR
// uc_nation = 3 ;
17568: LD_ADDR_OWVAR 21
17572: PUSH
17573: LD_INT 3
17575: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17576: LD_INT 0
17578: PPUSH
17579: LD_EXP 17
17583: PPUSH
17584: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17588: CALL_OW 44
17592: PPUSH
17593: LD_VAR 0 2
17597: PPUSH
17598: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17602: LD_VAR 0 1
17606: PPUSH
17607: LD_INT 6
17609: PPUSH
17610: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17614: LD_VAR 0 1
17618: PPUSH
17619: CALL_OW 313
17623: PPUSH
17624: LD_INT 6
17626: PPUSH
17627: CALL_OW 235
// end ; end ;
17631: PPOPN 2
17633: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17634: LD_INT 0
17636: PPUSH
17637: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 255
17647: PUSH
17648: LD_INT 3
17650: EQUAL
17651: PUSH
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 247
17661: PUSH
17662: LD_INT 2
17664: EQUAL
17665: AND
17666: IFFALSE 17760
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
17668: LD_VAR 0 1
17672: PPUSH
17673: CALL_OW 264
17677: PUSH
17678: LD_INT 42
17680: EQUAL
17681: PUSH
17682: LD_VAR 0 1
17686: PPUSH
17687: CALL_OW 264
17691: PUSH
17692: LD_INT 43
17694: EQUAL
17695: OR
17696: PUSH
17697: LD_VAR 0 1
17701: PPUSH
17702: CALL_OW 264
17706: PUSH
17707: LD_INT 44
17709: EQUAL
17710: OR
17711: IFFALSE 17760
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17713: LD_INT 24
17715: PPUSH
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 265
17725: PPUSH
17726: LD_VAR 0 1
17730: PPUSH
17731: CALL_OW 262
17735: PPUSH
17736: LD_VAR 0 1
17740: PPUSH
17741: CALL_OW 263
17745: PPUSH
17746: LD_VAR 0 1
17750: PPUSH
17751: CALL_OW 264
17755: PPUSH
17756: CALL_OW 185
// end ;
17760: PPOPN 3
17762: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17763: LD_VAR 0 1
17767: PPUSH
17768: CALL_OW 255
17772: PUSH
17773: LD_INT 3
17775: EQUAL
17776: PUSH
17777: LD_VAR 0 2
17781: PPUSH
17782: CALL_OW 255
17786: PUSH
17787: LD_INT 3
17789: EQUAL
17790: AND
17791: PUSH
17792: LD_VAR 0 1
17796: PPUSH
17797: CALL_OW 302
17801: AND
17802: IFFALSE 17844
// begin ComRepairVehicle ( human , vehicle ) ;
17804: LD_VAR 0 2
17808: PPUSH
17809: LD_VAR 0 1
17813: PPUSH
17814: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17818: LD_VAR 0 2
17822: PPUSH
17823: LD_VAR 0 1
17827: PPUSH
17828: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17832: LD_VAR 0 1
17836: PPUSH
17837: LD_INT 100
17839: PPUSH
17840: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 255
17853: PUSH
17854: LD_INT 3
17856: EQUAL
17857: PUSH
17858: LD_VAR 0 2
17862: PPUSH
17863: CALL_OW 255
17867: PUSH
17868: LD_INT 3
17870: EQUAL
17871: AND
17872: PUSH
17873: LD_INT 24
17875: PPUSH
17876: CALL_OW 302
17880: AND
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 302
17891: NOT
17892: AND
17893: IFFALSE 17907
// ComEnterUnit ( human , rubfact0 ) ;
17895: LD_VAR 0 2
17899: PPUSH
17900: LD_INT 24
17902: PPUSH
17903: CALL_OW 120
// end ;
17907: PPOPN 2
17909: END
// on Command ( comandid ) do var i , j , tmp ;
17910: LD_INT 0
17912: PPUSH
17913: PPUSH
17914: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
17915: LD_ADDR_VAR 0 2
17919: PUSH
17920: LD_INT 22
17922: PUSH
17923: LD_INT 1
17925: PUSH
17926: EMPTY
17927: LIST
17928: LIST
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 21
17935: PUSH
17936: LD_INT 1
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: PUSH
17943: LD_INT 21
17945: PUSH
17946: LD_INT 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: LIST
17957: PUSH
17958: EMPTY
17959: LIST
17960: LIST
17961: PPUSH
17962: CALL_OW 69
17966: PUSH
17967: FOR_IN
17968: IFFALSE 18078
// begin if GetTaskList ( i ) > 0 then
17970: LD_VAR 0 2
17974: PPUSH
17975: CALL_OW 437
17979: PUSH
17980: LD_INT 0
17982: GREATER
17983: IFFALSE 18076
// begin for j = 1 to GetTaskList ( i ) do
17985: LD_ADDR_VAR 0 3
17989: PUSH
17990: DOUBLE
17991: LD_INT 1
17993: DEC
17994: ST_TO_ADDR
17995: LD_VAR 0 2
17999: PPUSH
18000: CALL_OW 437
18004: PUSH
18005: FOR_TO
18006: IFFALSE 18074
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18008: LD_ADDR_VAR 0 4
18012: PUSH
18013: LD_VAR 0 2
18017: PPUSH
18018: CALL_OW 437
18022: PUSH
18023: LD_VAR 0 3
18027: ARRAY
18028: PUSH
18029: LD_INT 4
18031: ARRAY
18032: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18033: LD_VAR 0 4
18037: PPUSH
18038: CALL_OW 255
18042: PUSH
18043: LD_INT 4
18045: EQUAL
18046: PUSH
18047: LD_VAR 0 4
18051: PPUSH
18052: CALL_OW 255
18056: PUSH
18057: LD_INT 0
18059: EQUAL
18060: OR
18061: IFFALSE 18072
// ComStop ( i ) ;
18063: LD_VAR 0 2
18067: PPUSH
18068: CALL_OW 141
// end ;
18072: GO 18005
18074: POP
18075: POP
// end ; end ;
18076: GO 17967
18078: POP
18079: POP
// end ; end_of_file
18080: PPOPN 4
18082: END
// every 10 10$0 do
18083: GO 18085
18085: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18086: LD_INT 5
18088: PPUSH
18089: LD_INT 3
18091: PPUSH
18092: LD_INT 2
18094: PPUSH
18095: LD_INT 5
18097: PPUSH
18098: CALL_OW 12
18102: PUSH
18103: LD_INT 2
18105: PUSH
18106: LD_INT 3
18108: PUSH
18109: LD_INT 3
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: LIST
18116: PUSH
18117: LD_OWVAR 67
18121: ARRAY
18122: PLUS
18123: PPUSH
18124: LD_INT 0
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: LD_INT 0
18132: PPUSH
18133: LD_INT 0
18135: PPUSH
18136: LD_EXP 16
18140: PPUSH
18141: LD_EXP 17
18145: PPUSH
18146: CALL_OW 12
18150: PPUSH
18151: LD_INT 4
18153: PPUSH
18154: LD_INT 14
18156: PPUSH
18157: LD_INT 1
18159: PPUSH
18160: LD_INT 2
18162: PPUSH
18163: CALL 7313 0 12
// end ;
18167: END
// every 15 15$0 do
18168: GO 18170
18170: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18171: LD_INT 5
18173: PPUSH
18174: LD_INT 3
18176: PPUSH
18177: LD_INT 3
18179: PPUSH
18180: LD_INT 5
18182: PPUSH
18183: CALL_OW 12
18187: PUSH
18188: LD_INT 2
18190: PUSH
18191: LD_INT 3
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: PUSH
18202: LD_OWVAR 67
18206: ARRAY
18207: PLUS
18208: PPUSH
18209: LD_INT 0
18211: PPUSH
18212: LD_INT 0
18214: PPUSH
18215: LD_INT 0
18217: PPUSH
18218: LD_INT 1
18220: PPUSH
18221: LD_EXP 16
18225: PPUSH
18226: LD_EXP 17
18230: PPUSH
18231: CALL_OW 12
18235: PPUSH
18236: LD_INT 4
18238: PPUSH
18239: LD_INT 14
18241: PPUSH
18242: LD_INT 1
18244: PPUSH
18245: LD_INT 1
18247: PPUSH
18248: CALL 7313 0 12
// end ;
18252: END
// every 25 25$0 do
18253: GO 18255
18255: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18256: LD_INT 5
18258: PPUSH
18259: LD_INT 3
18261: PPUSH
18262: LD_INT 2
18264: PPUSH
18265: LD_INT 3
18267: PPUSH
18268: CALL_OW 12
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: LD_INT 3
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: LIST
18286: PUSH
18287: LD_OWVAR 67
18291: ARRAY
18292: PLUS
18293: PPUSH
18294: LD_INT 0
18296: PPUSH
18297: LD_INT 0
18299: PPUSH
18300: LD_INT 0
18302: PPUSH
18303: LD_INT 2
18305: PPUSH
18306: LD_EXP 16
18310: PPUSH
18311: LD_EXP 17
18315: PPUSH
18316: CALL_OW 12
18320: PPUSH
18321: LD_INT 4
18323: PPUSH
18324: LD_INT 14
18326: PPUSH
18327: LD_INT 1
18329: PPUSH
18330: LD_INT 1
18332: PPUSH
18333: CALL 7313 0 12
// end ;
18337: END
// every 26 26$0 do
18338: GO 18340
18340: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18341: LD_INT 5
18343: PPUSH
18344: LD_INT 3
18346: PPUSH
18347: LD_INT 1
18349: PPUSH
18350: LD_INT 3
18352: PPUSH
18353: CALL_OW 12
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: LD_INT 2
18363: PUSH
18364: LD_INT 2
18366: PUSH
18367: EMPTY
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: LD_OWVAR 67
18376: ARRAY
18377: PLUS
18378: PPUSH
18379: LD_INT 0
18381: PPUSH
18382: LD_INT 0
18384: PPUSH
18385: LD_INT 0
18387: PPUSH
18388: LD_INT 2
18390: PPUSH
18391: LD_EXP 16
18395: PPUSH
18396: LD_EXP 17
18400: PPUSH
18401: CALL_OW 12
18405: PPUSH
18406: LD_INT 4
18408: PPUSH
18409: LD_INT 14
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_INT 2
18417: PPUSH
18418: CALL 7313 0 12
// end ;
18422: END
// every 25 25$0 do
18423: GO 18425
18425: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18426: LD_INT 4
18428: PPUSH
18429: LD_INT 5
18431: PPUSH
18432: LD_INT 3
18434: PUSH
18435: LD_INT 4
18437: PUSH
18438: LD_INT 5
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: LIST
18445: PUSH
18446: LD_OWVAR 67
18450: ARRAY
18451: PPUSH
18452: LD_EXP 16
18456: PPUSH
18457: LD_EXP 17
18461: PPUSH
18462: CALL_OW 12
18466: PPUSH
18467: LD_INT 3
18469: PPUSH
18470: LD_INT 1
18472: PPUSH
18473: LD_INT 1
18475: PPUSH
18476: LD_INT 42
18478: PUSH
18479: LD_INT 42
18481: PUSH
18482: LD_INT 43
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: LIST
18489: PUSH
18490: LD_INT 42
18492: PUSH
18493: LD_INT 43
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PUSH
18500: LD_INT 43
18502: PUSH
18503: LD_INT 43
18505: PUSH
18506: LD_INT 43
18508: PUSH
18509: LD_INT 44
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: LIST
18522: PUSH
18523: LD_OWVAR 67
18527: ARRAY
18528: PPUSH
18529: EMPTY
18530: PPUSH
18531: EMPTY
18532: PPUSH
18533: LD_INT 1
18535: PPUSH
18536: CALL 8975 0 11
// end ; end_of_file
18540: END
// every 0 0$1 trigger startTimer = 1 do
18541: LD_EXP 30
18545: PUSH
18546: LD_INT 1
18548: EQUAL
18549: IFFALSE 18679
18551: GO 18553
18553: DISABLE
// begin enable ;
18554: ENABLE
// if timerStatus = 1 then
18555: LD_EXP 29
18559: PUSH
18560: LD_INT 1
18562: EQUAL
18563: IFFALSE 18596
// begin timeToSupport = timeToSupport - 0 0$01 ;
18565: LD_ADDR_EXP 28
18569: PUSH
18570: LD_EXP 28
18574: PUSH
18575: LD_INT 35
18577: MINUS
18578: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18579: LD_ADDR_OWVAR 47
18583: PUSH
18584: LD_STRING #Am04-1
18586: PUSH
18587: LD_EXP 28
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: ST_TO_ADDR
// end ; if timerStatus = 2 then
18596: LD_EXP 29
18600: PUSH
18601: LD_INT 2
18603: EQUAL
18604: IFFALSE 18637
// begin timeToSupport = timeToSupport - 0 0$01 ;
18606: LD_ADDR_EXP 28
18610: PUSH
18611: LD_EXP 28
18615: PUSH
18616: LD_INT 35
18618: MINUS
18619: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18620: LD_ADDR_OWVAR 47
18624: PUSH
18625: LD_STRING #Am04-2
18627: PUSH
18628: LD_EXP 28
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: ST_TO_ADDR
// end ; if timerStatus = 3 then
18637: LD_EXP 29
18641: PUSH
18642: LD_INT 3
18644: EQUAL
18645: IFFALSE 18661
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18647: LD_ADDR_EXP 27
18651: PUSH
18652: LD_EXP 27
18656: PUSH
18657: LD_INT 35
18659: MINUS
18660: ST_TO_ADDR
// end ; if timerStatus = 4 then
18661: LD_EXP 29
18665: PUSH
18666: LD_INT 4
18668: EQUAL
18669: IFFALSE 18679
// begin display_strings =  ;
18671: LD_ADDR_OWVAR 47
18675: PUSH
18676: LD_STRING 
18678: ST_TO_ADDR
// end ; end ; end_of_file
18679: END
// every 0 0$1 trigger IsDead ( JMM ) do
18680: LD_EXP 1
18684: PPUSH
18685: CALL_OW 301
18689: IFFALSE 18701
18691: GO 18693
18693: DISABLE
// YouLost ( JMM ) ;
18694: LD_STRING JMM
18696: PPUSH
18697: CALL_OW 104
18701: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18702: LD_INT 4
18704: PPUSH
18705: CALL_OW 301
18709: IFFALSE 18721
18711: GO 18713
18713: DISABLE
// YouLost ( Base ) ; end_of_file
18714: LD_STRING Base
18716: PPUSH
18717: CALL_OW 104
18721: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
18722: LD_EXP 15
18726: PPUSH
18727: CALL_OW 301
18731: IFFALSE 19113
18733: GO 18735
18735: DISABLE
18736: LD_INT 0
18738: PPUSH
// begin AIEnable = 0 ;
18739: LD_ADDR_EXP 37
18743: PUSH
18744: LD_INT 0
18746: ST_TO_ADDR
// escapeAvalaible = 1 ;
18747: LD_ADDR_EXP 40
18751: PUSH
18752: LD_INT 1
18754: ST_TO_ADDR
// InGameOn ;
18755: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18759: LD_INT 3
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: LD_INT 1
18767: PPUSH
18768: LD_INT 0
18770: PPUSH
18771: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18775: LD_INT 6
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: LD_INT 1
18783: PPUSH
18784: LD_INT 0
18786: PPUSH
18787: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18791: LD_INT 5
18793: PPUSH
18794: LD_INT 1
18796: PPUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_INT 0
18802: PPUSH
18803: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18807: LD_INT 3
18809: PPUSH
18810: LD_INT 1
18812: PPUSH
18813: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18817: LD_INT 97
18819: PPUSH
18820: LD_INT 91
18822: PPUSH
18823: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18827: LD_INT 22
18829: PUSH
18830: LD_INT 3
18832: PUSH
18833: EMPTY
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 21
18839: PUSH
18840: LD_INT 1
18842: PUSH
18843: EMPTY
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 69
18855: PPUSH
18856: CALL_OW 121
// wait ( 0 0$01 ) ;
18860: LD_INT 35
18862: PPUSH
18863: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18867: LD_INT 22
18869: PUSH
18870: LD_INT 3
18872: PUSH
18873: EMPTY
18874: LIST
18875: LIST
18876: PUSH
18877: LD_INT 21
18879: PUSH
18880: LD_INT 1
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: PPUSH
18891: CALL_OW 69
18895: PPUSH
18896: LD_INT 124
18898: PPUSH
18899: LD_INT 98
18901: PPUSH
18902: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
18906: LD_INT 22
18908: PUSH
18909: LD_INT 5
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: PUSH
18916: LD_INT 21
18918: PUSH
18919: LD_INT 1
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PPUSH
18930: CALL_OW 69
18934: PPUSH
18935: CALL_OW 121
// wait ( 0 0$01 ) ;
18939: LD_INT 35
18941: PPUSH
18942: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18946: LD_INT 22
18948: PUSH
18949: LD_INT 5
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 21
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: PPUSH
18975: LD_INT 124
18977: PPUSH
18978: LD_INT 98
18980: PPUSH
18981: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18985: LD_INT 22
18987: PUSH
18988: LD_INT 6
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: LD_INT 21
18997: PUSH
18998: LD_INT 1
19000: PUSH
19001: EMPTY
19002: LIST
19003: LIST
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PPUSH
19009: CALL_OW 69
19013: PPUSH
19014: CALL_OW 121
// wait ( 0 0$01 ) ;
19018: LD_INT 35
19020: PPUSH
19021: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19025: LD_INT 22
19027: PUSH
19028: LD_INT 6
19030: PUSH
19031: EMPTY
19032: LIST
19033: LIST
19034: PUSH
19035: LD_INT 21
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PPUSH
19049: CALL_OW 69
19053: PPUSH
19054: LD_INT 124
19056: PPUSH
19057: LD_INT 98
19059: PPUSH
19060: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19064: LD_INT 22
19066: PUSH
19067: LD_INT 1
19069: PUSH
19070: EMPTY
19071: LIST
19072: LIST
19073: PUSH
19074: LD_INT 21
19076: PUSH
19077: LD_INT 1
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PPUSH
19088: CALL_OW 69
19092: PPUSH
19093: LD_INT 124
19095: PPUSH
19096: LD_INT 98
19098: PPUSH
19099: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19103: LD_INT 124
19105: PPUSH
19106: LD_INT 98
19108: PPUSH
19109: CALL_OW 84
// end ;
19113: PPOPN 1
19115: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19116: LD_INT 23
19118: PUSH
19119: LD_INT 3
19121: PUSH
19122: EMPTY
19123: LIST
19124: LIST
19125: PUSH
19126: LD_INT 21
19128: PUSH
19129: LD_INT 1
19131: PUSH
19132: EMPTY
19133: LIST
19134: LIST
19135: PUSH
19136: LD_INT 24
19138: PUSH
19139: LD_INT 250
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: LIST
19150: PPUSH
19151: CALL_OW 69
19155: PUSH
19156: LD_INT 0
19158: EQUAL
19159: IFFALSE 19168
19161: GO 19163
19163: DISABLE
// FinishMission ;
19164: CALL 19339 0 0
19168: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19169: LD_EXP 40
19173: PUSH
19174: LD_INT 1
19176: EQUAL
19177: IFFALSE 19336
19179: GO 19181
19181: DISABLE
19182: LD_INT 0
19184: PPUSH
// begin enable ;
19185: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19186: LD_ADDR_VAR 0 1
19190: PUSH
19191: LD_INT 22
19193: PUSH
19194: LD_INT 3
19196: PUSH
19197: EMPTY
19198: LIST
19199: LIST
19200: PPUSH
19201: CALL_OW 69
19205: PUSH
19206: FOR_IN
19207: IFFALSE 19234
// if IsInArea ( i , RussianEscape ) then
19209: LD_VAR 0 1
19213: PPUSH
19214: LD_INT 5
19216: PPUSH
19217: CALL_OW 308
19221: IFFALSE 19232
// RemoveUnit ( i ) ;
19223: LD_VAR 0 1
19227: PPUSH
19228: CALL_OW 64
19232: GO 19206
19234: POP
19235: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19236: LD_ADDR_VAR 0 1
19240: PUSH
19241: LD_INT 22
19243: PUSH
19244: LD_INT 5
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: PUSH
19256: FOR_IN
19257: IFFALSE 19284
// if IsInArea ( i , RussianEscape ) then
19259: LD_VAR 0 1
19263: PPUSH
19264: LD_INT 5
19266: PPUSH
19267: CALL_OW 308
19271: IFFALSE 19282
// RemoveUnit ( i ) ;
19273: LD_VAR 0 1
19277: PPUSH
19278: CALL_OW 64
19282: GO 19256
19284: POP
19285: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19286: LD_ADDR_VAR 0 1
19290: PUSH
19291: LD_INT 22
19293: PUSH
19294: LD_INT 6
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PPUSH
19301: CALL_OW 69
19305: PUSH
19306: FOR_IN
19307: IFFALSE 19334
// if IsInArea ( i , RussianEscape ) then
19309: LD_VAR 0 1
19313: PPUSH
19314: LD_INT 5
19316: PPUSH
19317: CALL_OW 308
19321: IFFALSE 19332
// RemoveUnit ( i ) ;
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 64
19332: GO 19306
19334: POP
19335: POP
// end ;
19336: PPOPN 1
19338: END
// export function FinishMission ; var tmp ; begin
19339: LD_INT 0
19341: PPUSH
19342: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19343: LD_INT 69
19345: PPUSH
19346: LD_INT 1
19348: PPUSH
19349: CALL_OW 321
19353: PPUSH
19354: LD_STRING GatlingInGamma
19356: PPUSH
19357: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19361: LD_EXP 34
19365: PUSH
19366: LD_INT 1
19368: EQUAL
19369: PUSH
19370: LD_EXP 35
19374: PUSH
19375: LD_INT 1
19377: EQUAL
19378: AND
19379: IFFALSE 19393
// begin AddMedal ( oil , 1 ) ;
19381: LD_STRING oil
19383: PPUSH
19384: LD_INT 1
19386: PPUSH
19387: CALL_OW 101
// end else
19391: GO 19486
// begin if buildOil = 1 and buildPower = 0 then
19393: LD_EXP 34
19397: PUSH
19398: LD_INT 1
19400: EQUAL
19401: PUSH
19402: LD_EXP 35
19406: PUSH
19407: LD_INT 0
19409: EQUAL
19410: AND
19411: IFFALSE 19424
// AddMedal ( oil , - 1 ) ;
19413: LD_STRING oil
19415: PPUSH
19416: LD_INT 1
19418: NEG
19419: PPUSH
19420: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19424: LD_EXP 34
19428: PUSH
19429: LD_INT 0
19431: EQUAL
19432: PUSH
19433: LD_EXP 35
19437: PUSH
19438: LD_INT 1
19440: EQUAL
19441: AND
19442: IFFALSE 19455
// AddMedal ( oil , - 2 ) ;
19444: LD_STRING oil
19446: PPUSH
19447: LD_INT 2
19449: NEG
19450: PPUSH
19451: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19455: LD_EXP 34
19459: PUSH
19460: LD_INT 0
19462: EQUAL
19463: PUSH
19464: LD_EXP 35
19468: PUSH
19469: LD_INT 0
19471: EQUAL
19472: AND
19473: IFFALSE 19486
// AddMedal ( oil , - 3 ) ;
19475: LD_STRING oil
19477: PPUSH
19478: LD_INT 3
19480: NEG
19481: PPUSH
19482: CALL_OW 101
// end ; if lostCounter > 3 then
19486: LD_EXP 38
19490: PUSH
19491: LD_INT 3
19493: GREATER
19494: IFFALSE 19509
// begin AddMedal ( deaths , - 1 ) ;
19496: LD_STRING deaths
19498: PPUSH
19499: LD_INT 1
19501: NEG
19502: PPUSH
19503: CALL_OW 101
// end else
19507: GO 19519
// begin AddMedal ( deaths , 1 ) ;
19509: LD_STRING deaths
19511: PPUSH
19512: LD_INT 1
19514: PPUSH
19515: CALL_OW 101
// end ; if honor = 1 then
19519: LD_EXP 39
19523: PUSH
19524: LD_INT 1
19526: EQUAL
19527: IFFALSE 19541
// begin AddMedal ( honour , 1 ) ;
19529: LD_STRING honour
19531: PPUSH
19532: LD_INT 1
19534: PPUSH
19535: CALL_OW 101
// end else
19539: GO 19552
// begin AddMedal ( honour , - 1 ) ;
19541: LD_STRING honour
19543: PPUSH
19544: LD_INT 1
19546: NEG
19547: PPUSH
19548: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19552: LD_STRING Main
19554: PPUSH
19555: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19559: LD_INT 22
19561: PUSH
19562: LD_INT 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 23
19571: PUSH
19572: LD_INT 1
19574: PUSH
19575: EMPTY
19576: LIST
19577: LIST
19578: PUSH
19579: LD_INT 21
19581: PUSH
19582: LD_INT 1
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: PUSH
19589: EMPTY
19590: LIST
19591: LIST
19592: LIST
19593: PPUSH
19594: CALL_OW 69
19598: PPUSH
19599: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19603: LD_EXP 1
19607: PPUSH
19608: LD_EXP 44
19612: PUSH
19613: LD_STRING JMM
19615: STR
19616: PPUSH
19617: CALL_OW 38
// if IsOK ( Bobby ) then
19621: LD_EXP 2
19625: PPUSH
19626: CALL_OW 302
19630: IFFALSE 19650
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19632: LD_EXP 2
19636: PPUSH
19637: LD_EXP 44
19641: PUSH
19642: LD_STRING Bobby
19644: STR
19645: PPUSH
19646: CALL_OW 38
// if IsOK ( Cyrus ) then
19650: LD_EXP 3
19654: PPUSH
19655: CALL_OW 302
19659: IFFALSE 19679
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19661: LD_EXP 3
19665: PPUSH
19666: LD_EXP 44
19670: PUSH
19671: LD_STRING Cyrus
19673: STR
19674: PPUSH
19675: CALL_OW 38
// if IsOK ( Lisa ) then
19679: LD_EXP 4
19683: PPUSH
19684: CALL_OW 302
19688: IFFALSE 19708
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19690: LD_EXP 4
19694: PPUSH
19695: LD_EXP 44
19699: PUSH
19700: LD_STRING Lisa
19702: STR
19703: PPUSH
19704: CALL_OW 38
// if IsOK ( Brown ) then
19708: LD_EXP 7
19712: PPUSH
19713: CALL_OW 302
19717: IFFALSE 19737
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19719: LD_EXP 7
19723: PPUSH
19724: LD_EXP 44
19728: PUSH
19729: LD_STRING Brown
19731: STR
19732: PPUSH
19733: CALL_OW 38
// if IsOK ( Donaldson ) then
19737: LD_EXP 13
19741: PPUSH
19742: CALL_OW 302
19746: IFFALSE 19766
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19748: LD_EXP 13
19752: PPUSH
19753: LD_EXP 44
19757: PUSH
19758: LD_STRING Donaldson
19760: STR
19761: PPUSH
19762: CALL_OW 38
// if IsOK ( Frank ) then
19766: LD_EXP 5
19770: PPUSH
19771: CALL_OW 302
19775: IFFALSE 19795
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19777: LD_EXP 5
19781: PPUSH
19782: LD_EXP 44
19786: PUSH
19787: LD_STRING Frank
19789: STR
19790: PPUSH
19791: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19795: LD_INT 50
19797: PUSH
19798: EMPTY
19799: LIST
19800: PUSH
19801: LD_INT 22
19803: PUSH
19804: LD_INT 1
19806: PUSH
19807: EMPTY
19808: LIST
19809: LIST
19810: PUSH
19811: LD_INT 21
19813: PUSH
19814: LD_INT 1
19816: PUSH
19817: EMPTY
19818: LIST
19819: LIST
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: LIST
19825: PPUSH
19826: CALL_OW 69
19830: PUSH
19831: LD_EXP 1
19835: PUSH
19836: LD_EXP 2
19840: PUSH
19841: LD_EXP 3
19845: PUSH
19846: LD_EXP 4
19850: PUSH
19851: LD_EXP 7
19855: PUSH
19856: LD_EXP 13
19860: PUSH
19861: LD_EXP 5
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: DIFF
19875: PPUSH
19876: LD_STRING 04_other_survivors
19878: PPUSH
19879: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
19883: LD_INT 22
19885: PPUSH
19886: CALL 19899 0 1
// YouWin ;
19890: CALL_OW 103
// end ;
19894: LD_VAR 0 1
19898: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
19899: LD_INT 0
19901: PPUSH
19902: PPUSH
19903: PPUSH
19904: PPUSH
// gammaBase = [ ] ;
19905: LD_ADDR_VAR 0 4
19909: PUSH
19910: EMPTY
19911: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
19912: LD_ADDR_VAR 0 5
19916: PUSH
19917: LD_VAR 0 1
19921: PPUSH
19922: LD_INT 22
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: LD_INT 21
19934: PUSH
19935: LD_INT 3
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 50
19944: PUSH
19945: EMPTY
19946: LIST
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: LIST
19952: PPUSH
19953: CALL_OW 70
19957: ST_TO_ADDR
// for i in buildings do
19958: LD_ADDR_VAR 0 3
19962: PUSH
19963: LD_VAR 0 5
19967: PUSH
19968: FOR_IN
19969: IFFALSE 20306
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
19971: LD_VAR 0 3
19975: PPUSH
19976: CALL_OW 266
19980: PUSH
19981: LD_INT 6
19983: PUSH
19984: LD_INT 7
19986: PUSH
19987: LD_INT 8
19989: PUSH
19990: EMPTY
19991: LIST
19992: LIST
19993: LIST
19994: IN
19995: IFFALSE 20109
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19997: LD_ADDR_VAR 0 4
20001: PUSH
20002: LD_VAR 0 4
20006: PUSH
20007: LD_VAR 0 3
20011: PPUSH
20012: CALL_OW 266
20016: PUSH
20017: LD_VAR 0 3
20021: PPUSH
20022: CALL_OW 250
20026: PUSH
20027: LD_VAR 0 3
20031: PPUSH
20032: CALL_OW 251
20036: PUSH
20037: LD_VAR 0 3
20041: PPUSH
20042: CALL_OW 254
20046: PUSH
20047: LD_VAR 0 3
20051: PPUSH
20052: CALL_OW 267
20056: PUSH
20057: LD_VAR 0 3
20061: PPUSH
20062: CALL_OW 248
20066: PUSH
20067: LD_VAR 0 3
20071: PPUSH
20072: LD_INT 1
20074: PPUSH
20075: CALL_OW 268
20079: PUSH
20080: LD_VAR 0 3
20084: PPUSH
20085: LD_INT 2
20087: PPUSH
20088: CALL_OW 268
20092: PUSH
20093: EMPTY
20094: LIST
20095: LIST
20096: LIST
20097: LIST
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: PUSH
20103: EMPTY
20104: LIST
20105: ADD
20106: ST_TO_ADDR
20107: GO 20304
// if GetBType ( i ) in [ b_bunker ] then
20109: LD_VAR 0 3
20113: PPUSH
20114: CALL_OW 266
20118: PUSH
20119: LD_INT 32
20121: PUSH
20122: EMPTY
20123: LIST
20124: IN
20125: IFFALSE 20222
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20127: LD_ADDR_VAR 0 4
20131: PUSH
20132: LD_VAR 0 4
20136: PUSH
20137: LD_VAR 0 3
20141: PPUSH
20142: CALL_OW 266
20146: PUSH
20147: LD_VAR 0 3
20151: PPUSH
20152: CALL_OW 250
20156: PUSH
20157: LD_VAR 0 3
20161: PPUSH
20162: CALL_OW 251
20166: PUSH
20167: LD_VAR 0 3
20171: PPUSH
20172: CALL_OW 254
20176: PUSH
20177: LD_VAR 0 3
20181: PPUSH
20182: CALL_OW 267
20186: PUSH
20187: LD_VAR 0 3
20191: PPUSH
20192: CALL_OW 248
20196: PUSH
20197: LD_VAR 0 3
20201: PPUSH
20202: CALL_OW 269
20206: PUSH
20207: EMPTY
20208: LIST
20209: LIST
20210: LIST
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: PUSH
20216: EMPTY
20217: LIST
20218: ADD
20219: ST_TO_ADDR
20220: GO 20304
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20222: LD_ADDR_VAR 0 4
20226: PUSH
20227: LD_VAR 0 4
20231: PUSH
20232: LD_VAR 0 3
20236: PPUSH
20237: CALL_OW 266
20241: PUSH
20242: LD_VAR 0 3
20246: PPUSH
20247: CALL_OW 250
20251: PUSH
20252: LD_VAR 0 3
20256: PPUSH
20257: CALL_OW 251
20261: PUSH
20262: LD_VAR 0 3
20266: PPUSH
20267: CALL_OW 254
20271: PUSH
20272: LD_VAR 0 3
20276: PPUSH
20277: CALL_OW 267
20281: PUSH
20282: LD_VAR 0 3
20286: PPUSH
20287: CALL_OW 248
20291: PUSH
20292: EMPTY
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: ADD
20303: ST_TO_ADDR
// end ;
20304: GO 19968
20306: POP
20307: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20308: LD_VAR 0 4
20312: PPUSH
20313: LD_STRING GammaBase
20315: PPUSH
20316: CALL_OW 39
// end ; end_of_file
20320: LD_VAR 0 2
20324: RET
// every 1 1$15 do
20325: GO 20327
20327: DISABLE
// begin if supply <= 13 and supply > 7 then
20328: LD_EXP 36
20332: PUSH
20333: LD_INT 13
20335: LESSEQUAL
20336: PUSH
20337: LD_EXP 36
20341: PUSH
20342: LD_INT 7
20344: GREATER
20345: AND
20346: IFFALSE 20369
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20348: LD_INT 3
20350: PPUSH
20351: LD_INT 5
20353: PPUSH
20354: CALL_OW 12
20358: PPUSH
20359: LD_INT 18
20361: PPUSH
20362: LD_INT 1
20364: PPUSH
20365: CALL_OW 55
// if supply <= 7 and supply > 4 then
20369: LD_EXP 36
20373: PUSH
20374: LD_INT 7
20376: LESSEQUAL
20377: PUSH
20378: LD_EXP 36
20382: PUSH
20383: LD_INT 4
20385: GREATER
20386: AND
20387: IFFALSE 20410
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20389: LD_INT 3
20391: PPUSH
20392: LD_INT 5
20394: PPUSH
20395: CALL_OW 12
20399: PPUSH
20400: LD_INT 19
20402: PPUSH
20403: LD_INT 1
20405: PPUSH
20406: CALL_OW 55
// if supply <= 4 and supply > 0 then
20410: LD_EXP 36
20414: PUSH
20415: LD_INT 4
20417: LESSEQUAL
20418: PUSH
20419: LD_EXP 36
20423: PUSH
20424: LD_INT 0
20426: GREATER
20427: AND
20428: IFFALSE 20451
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20430: LD_INT 3
20432: PPUSH
20433: LD_INT 5
20435: PPUSH
20436: CALL_OW 12
20440: PPUSH
20441: LD_INT 20
20443: PPUSH
20444: LD_INT 1
20446: PPUSH
20447: CALL_OW 55
// if supply > 0 then
20451: LD_EXP 36
20455: PUSH
20456: LD_INT 0
20458: GREATER
20459: IFFALSE 20476
// begin supply = supply - 1 ;
20461: LD_ADDR_EXP 36
20465: PUSH
20466: LD_EXP 36
20470: PUSH
20471: LD_INT 1
20473: MINUS
20474: ST_TO_ADDR
// enable ;
20475: ENABLE
// end ; end ;
20476: END
