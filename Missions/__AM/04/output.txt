// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4230 0 0
// PrepareRussianBase ;
 241: CALL 2543 0 0
// PrepareRussianCommander ;
 245: CALL 2494 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3765 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3765 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3765 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3765 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3765 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3765 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3765 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3765 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3765 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3765 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3765 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3765 0 2
 767: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 768: LD_ADDR_EXP 5
 772: PUSH
 773: LD_STRING Frank
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: CALL 3765 0 2
 783: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_INT 32
 791: PPUSH
 792: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 796: LD_EXP 7
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 811: LD_EXP 7
 815: PPUSH
 816: LD_INT 32
 818: PPUSH
 819: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 823: LD_EXP 8
 827: PPUSH
 828: LD_INT 2
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 838: LD_EXP 9
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 0
 848: PPUSH
 849: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 853: LD_EXP 12
 857: PPUSH
 858: LD_INT 2
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 868: LD_EXP 10
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 883: LD_EXP 11
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 898: LD_EXP 4
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL_OW 49
// if Lisa = false then
 913: LD_EXP 4
 917: PUSH
 918: LD_INT 0
 920: EQUAL
 921: IFFALSE 938
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 923: LD_EXP 2
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 49
// if Lisa = false and Bobby = false then
 938: LD_EXP 4
 942: PUSH
 943: LD_INT 0
 945: EQUAL
 946: PUSH
 947: LD_EXP 2
 951: PUSH
 952: LD_INT 0
 954: EQUAL
 955: AND
 956: IFFALSE 973
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 958: LD_EXP 3
 962: PPUSH
 963: LD_INT 2
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 973: LD_EXP 4
 977: PUSH
 978: LD_INT 0
 980: EQUAL
 981: PUSH
 982: LD_EXP 2
 986: PUSH
 987: LD_INT 0
 989: EQUAL
 990: AND
 991: PUSH
 992: LD_EXP 3
 996: PUSH
 997: LD_INT 0
 999: EQUAL
1000: AND
1001: IFFALSE 1018
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1003: LD_EXP 6
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ;
1018: LD_VAR 0 1
1022: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1023: LD_INT 0
1025: PPUSH
1026: PPUSH
1027: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1028: LD_EXP 13
1032: PPUSH
1033: LD_INT 10
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1043: LD_EXP 5
1047: PPUSH
1048: LD_INT 10
1050: PPUSH
1051: LD_INT 0
1053: PPUSH
1054: CALL_OW 49
// uc_nation = 1 ;
1058: LD_ADDR_OWVAR 21
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// uc_side = 4 ;
1066: LD_ADDR_OWVAR 20
1070: PUSH
1071: LD_INT 4
1073: ST_TO_ADDR
// hc_class := 3 ;
1074: LD_ADDR_OWVAR 28
1078: PUSH
1079: LD_INT 3
1081: ST_TO_ADDR
// hc_sex := sex_male ;
1082: LD_ADDR_OWVAR 27
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1090: LD_ADDR_OWVAR 33
1094: PUSH
1095: LD_STRING SecondCharsGal
1097: ST_TO_ADDR
// hc_face_number := 53 ;
1098: LD_ADDR_OWVAR 34
1102: PUSH
1103: LD_INT 53
1105: ST_TO_ADDR
// hc_name := Freddie Warner ;
1106: LD_ADDR_OWVAR 26
1110: PUSH
1111: LD_STRING Freddie Warner
1113: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1114: LD_ADDR_OWVAR 29
1118: PUSH
1119: LD_INT 8
1121: PUSH
1122: LD_INT 11
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1129: LD_ADDR_OWVAR 30
1133: PUSH
1134: LD_INT 0
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 0
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1152: LD_ADDR_OWVAR 31
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 3
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: ST_TO_ADDR
// un = CreateHuman ;
1175: LD_ADDR_VAR 0 3
1179: PUSH
1180: CALL_OW 44
1184: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1185: LD_VAR 0 3
1189: PPUSH
1190: LD_INT 10
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// hc_class := 1 ;
1200: LD_ADDR_OWVAR 28
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// hc_sex := sex_male ;
1208: LD_ADDR_OWVAR 27
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1216: LD_ADDR_OWVAR 33
1220: PUSH
1221: LD_STRING SecondCharsGal
1223: ST_TO_ADDR
// hc_face_number := 56 ;
1224: LD_ADDR_OWVAR 34
1228: PUSH
1229: LD_INT 56
1231: ST_TO_ADDR
// hc_name := Mel Brennan ;
1232: LD_ADDR_OWVAR 26
1236: PUSH
1237: LD_STRING Mel Brennan
1239: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1240: LD_ADDR_OWVAR 29
1244: PUSH
1245: LD_INT 12
1247: PUSH
1248: LD_INT 11
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1255: LD_ADDR_OWVAR 30
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 0
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1278: LD_ADDR_OWVAR 31
1282: PUSH
1283: LD_INT 2
1285: PUSH
1286: LD_INT 1
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 0
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: ST_TO_ADDR
// un = CreateHuman ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: CALL_OW 44
1310: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 10
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL_OW 49
// hc_class := 1 ;
1326: LD_ADDR_OWVAR 28
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// hc_sex := sex_male ;
1334: LD_ADDR_OWVAR 27
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1342: LD_ADDR_OWVAR 33
1346: PUSH
1347: LD_STRING AmGalRemake
1349: ST_TO_ADDR
// hc_face_number := 5 ;
1350: LD_ADDR_OWVAR 34
1354: PUSH
1355: LD_INT 5
1357: ST_TO_ADDR
// hc_name := Bob Joplin ;
1358: LD_ADDR_OWVAR 26
1362: PUSH
1363: LD_STRING Bob Joplin
1365: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 10
1373: PUSH
1374: LD_INT 11
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1381: LD_ADDR_OWVAR 30
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 0
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1404: LD_ADDR_OWVAR 31
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 1
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: ST_TO_ADDR
// un = CreateHuman ;
1427: LD_ADDR_VAR 0 3
1431: PUSH
1432: CALL_OW 44
1436: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1437: LD_VAR 0 3
1441: PPUSH
1442: LD_INT 10
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// hc_class := 3 ;
1452: LD_ADDR_OWVAR 28
1456: PUSH
1457: LD_INT 3
1459: ST_TO_ADDR
// hc_sex := sex_female ;
1460: LD_ADDR_OWVAR 27
1464: PUSH
1465: LD_INT 2
1467: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1468: LD_ADDR_OWVAR 33
1472: PUSH
1473: LD_STRING AmGalRemake
1475: ST_TO_ADDR
// hc_face_number := 4 ;
1476: LD_ADDR_OWVAR 34
1480: PUSH
1481: LD_INT 4
1483: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1484: LD_ADDR_OWVAR 26
1488: PUSH
1489: LD_STRING Elizabeth Whitney
1491: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1492: LD_ADDR_OWVAR 29
1496: PUSH
1497: LD_INT 9
1499: PUSH
1500: LD_INT 11
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1507: LD_ADDR_OWVAR 30
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 2
1520: PUSH
1521: LD_INT 0
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1530: LD_ADDR_OWVAR 31
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 2
1540: PUSH
1541: LD_INT 4
1543: PUSH
1544: LD_INT 2
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// un = CreateHuman ;
1553: LD_ADDR_VAR 0 3
1557: PUSH
1558: CALL_OW 44
1562: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1563: LD_VAR 0 3
1567: PPUSH
1568: LD_INT 10
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// InitHc ;
1578: CALL_OW 19
// end ;
1582: LD_VAR 0 1
1586: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
1591: PPUSH
// uc_nation = 1 ;
1592: LD_ADDR_OWVAR 21
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// uc_side = 1 ;
1600: LD_ADDR_OWVAR 20
1604: PUSH
1605: LD_INT 1
1607: ST_TO_ADDR
// hc_class := 1 ;
1608: LD_ADDR_OWVAR 28
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// hc_sex := sex_male ;
1616: LD_ADDR_OWVAR 27
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1624: LD_ADDR_OWVAR 33
1628: PUSH
1629: LD_STRING SecondCharsGal
1631: ST_TO_ADDR
// hc_face_number := 59 ;
1632: LD_ADDR_OWVAR 34
1636: PUSH
1637: LD_INT 59
1639: ST_TO_ADDR
// hc_name := Max Gray ;
1640: LD_ADDR_OWVAR 26
1644: PUSH
1645: LD_STRING Max Gray
1647: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1648: LD_ADDR_OWVAR 29
1652: PUSH
1653: LD_INT 9
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 30
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1686: LD_ADDR_OWVAR 31
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: LD_INT 0
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: ST_TO_ADDR
// un = CreateHuman ;
1709: LD_ADDR_VAR 0 4
1713: PUSH
1714: CALL_OW 44
1718: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 11
1726: PPUSH
1727: LD_INT 0
1729: PPUSH
1730: CALL_OW 49
// hc_class := 1 ;
1734: LD_ADDR_OWVAR 28
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// hc_sex := sex_male ;
1742: LD_ADDR_OWVAR 27
1746: PUSH
1747: LD_INT 1
1749: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1750: LD_ADDR_OWVAR 33
1754: PUSH
1755: LD_STRING SecondCharsGal
1757: ST_TO_ADDR
// hc_face_number := 54 ;
1758: LD_ADDR_OWVAR 34
1762: PUSH
1763: LD_INT 54
1765: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1766: LD_ADDR_OWVAR 26
1770: PUSH
1771: LD_STRING Luigi Ghbellin
1773: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1774: LD_ADDR_OWVAR 29
1778: PUSH
1779: LD_INT 11
1781: PUSH
1782: LD_INT 11
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1789: LD_ADDR_OWVAR 30
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 0
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1812: LD_ADDR_OWVAR 31
1816: PUSH
1817: LD_INT 1
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: LD_INT 0
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: ST_TO_ADDR
// un = CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: CALL_OW 44
1844: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 11
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// hc_class := 3 ;
1860: LD_ADDR_OWVAR 28
1864: PUSH
1865: LD_INT 3
1867: ST_TO_ADDR
// hc_sex := sex_male ;
1868: LD_ADDR_OWVAR 27
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1876: LD_ADDR_OWVAR 33
1880: PUSH
1881: LD_STRING AmGalRemake
1883: ST_TO_ADDR
// hc_face_number := 6 ;
1884: LD_ADDR_OWVAR 34
1888: PUSH
1889: LD_INT 6
1891: ST_TO_ADDR
// hc_name := Leon Carter ;
1892: LD_ADDR_OWVAR 26
1896: PUSH
1897: LD_STRING Leon Carter
1899: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1900: LD_ADDR_OWVAR 29
1904: PUSH
1905: LD_INT 10
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1915: LD_ADDR_OWVAR 30
1919: PUSH
1920: LD_INT 0
1922: PUSH
1923: LD_INT 1
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: LD_INT 0
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1938: LD_ADDR_OWVAR 31
1942: PUSH
1943: LD_INT 0
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: LD_INT 3
1951: PUSH
1952: LD_INT 0
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// un = CreateHuman ;
1961: LD_ADDR_VAR 0 4
1965: PUSH
1966: CALL_OW 44
1970: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1971: LD_VAR 0 4
1975: PPUSH
1976: LD_INT 11
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// if count = 4 then
1986: LD_VAR 0 1
1990: PUSH
1991: LD_INT 4
1993: EQUAL
1994: IFFALSE 2122
// begin hc_class := 1 ;
1996: LD_ADDR_OWVAR 28
2000: PUSH
2001: LD_INT 1
2003: ST_TO_ADDR
// hc_sex := sex_male ;
2004: LD_ADDR_OWVAR 27
2008: PUSH
2009: LD_INT 1
2011: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2012: LD_ADDR_OWVAR 33
2016: PUSH
2017: LD_STRING SecondCharsGal
2019: ST_TO_ADDR
// hc_face_number := 34 ;
2020: LD_ADDR_OWVAR 34
2024: PUSH
2025: LD_INT 34
2027: ST_TO_ADDR
// hc_name := Ian Hill ;
2028: LD_ADDR_OWVAR 26
2032: PUSH
2033: LD_STRING Ian Hill
2035: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2036: LD_ADDR_OWVAR 29
2040: PUSH
2041: LD_INT 10
2043: PUSH
2044: LD_INT 12
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2051: LD_ADDR_OWVAR 30
2055: PUSH
2056: LD_INT 0
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 0
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2074: LD_ADDR_OWVAR 31
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 0
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// un = CreateHuman ;
2097: LD_ADDR_VAR 0 4
2101: PUSH
2102: CALL_OW 44
2106: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2107: LD_VAR 0 4
2111: PPUSH
2112: LD_INT 11
2114: PPUSH
2115: LD_INT 0
2117: PPUSH
2118: CALL_OW 49
// end ; if count = 5 then
2122: LD_VAR 0 1
2126: PUSH
2127: LD_INT 5
2129: EQUAL
2130: IFFALSE 2384
// begin hc_class := 1 ;
2132: LD_ADDR_OWVAR 28
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// hc_sex := sex_male ;
2140: LD_ADDR_OWVAR 27
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2148: LD_ADDR_OWVAR 33
2152: PUSH
2153: LD_STRING SecondCharsGal
2155: ST_TO_ADDR
// hc_face_number := 34 ;
2156: LD_ADDR_OWVAR 34
2160: PUSH
2161: LD_INT 34
2163: ST_TO_ADDR
// hc_name := Ian Hill ;
2164: LD_ADDR_OWVAR 26
2168: PUSH
2169: LD_STRING Ian Hill
2171: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2172: LD_ADDR_OWVAR 29
2176: PUSH
2177: LD_INT 10
2179: PUSH
2180: LD_INT 12
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2187: LD_ADDR_OWVAR 30
2191: PUSH
2192: LD_INT 0
2194: PUSH
2195: LD_INT 0
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: LD_INT 0
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2210: LD_ADDR_OWVAR 31
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: LD_INT 0
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 0
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: ST_TO_ADDR
// un = CreateHuman ;
2233: LD_ADDR_VAR 0 4
2237: PUSH
2238: CALL_OW 44
2242: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: LD_INT 11
2250: PPUSH
2251: LD_INT 0
2253: PPUSH
2254: CALL_OW 49
// hc_class := 1 ;
2258: LD_ADDR_OWVAR 28
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// hc_sex := sex_female ;
2266: LD_ADDR_OWVAR 27
2270: PUSH
2271: LD_INT 2
2273: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2274: LD_ADDR_OWVAR 33
2278: PUSH
2279: LD_STRING SecondCharsGal
2281: ST_TO_ADDR
// hc_face_number := 41 ;
2282: LD_ADDR_OWVAR 34
2286: PUSH
2287: LD_INT 41
2289: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2290: LD_ADDR_OWVAR 26
2294: PUSH
2295: LD_STRING Kate Wadsworth
2297: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2298: LD_ADDR_OWVAR 29
2302: PUSH
2303: LD_INT 9
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2313: LD_ADDR_OWVAR 30
2317: PUSH
2318: LD_INT 0
2320: PUSH
2321: LD_INT 2
2323: PUSH
2324: LD_INT 0
2326: PUSH
2327: LD_INT 0
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2336: LD_ADDR_OWVAR 31
2340: PUSH
2341: LD_INT 2
2343: PUSH
2344: LD_INT 3
2346: PUSH
2347: LD_INT 1
2349: PUSH
2350: LD_INT 0
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
// un = CreateHuman ;
2359: LD_ADDR_VAR 0 4
2363: PUSH
2364: CALL_OW 44
2368: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 11
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2384: LD_INT 11
2386: PPUSH
2387: LD_INT 22
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 21
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 26
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 70
2426: PUSH
2427: LD_INT 1
2429: ARRAY
2430: PPUSH
2431: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2435: LD_INT 11
2437: PPUSH
2438: LD_INT 22
2440: PUSH
2441: LD_INT 1
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 21
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 26
2460: PUSH
2461: LD_INT 1
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PPUSH
2473: CALL_OW 70
2477: PUSH
2478: LD_INT 1
2480: ARRAY
2481: PPUSH
2482: LD_STRING D6-Sol3-1
2484: PPUSH
2485: CALL_OW 88
// end ; end_of_file
2489: LD_VAR 0 2
2493: RET
// export function PrepareRussianCommander ; begin
2494: LD_INT 0
2496: PPUSH
// uc_side = 3 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 3
2504: ST_TO_ADDR
// uc_nation = 3 ;
2505: LD_ADDR_OWVAR 21
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2513: LD_ADDR_EXP 15
2517: PUSH
2518: LD_STRING Stolypin
2520: PPUSH
2521: CALL_OW 25
2525: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2526: LD_EXP 15
2530: PPUSH
2531: LD_INT 21
2533: PPUSH
2534: CALL_OW 52
// end ;
2538: LD_VAR 0 1
2542: RET
// export function PrepareRussianBase ; var i ; begin
2543: LD_INT 0
2545: PPUSH
2546: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2547: LD_INT 3
2549: PPUSH
2550: LD_INT 3
2552: PPUSH
2553: LD_INT 22
2555: PPUSH
2556: LD_EXP 16
2560: PPUSH
2561: LD_EXP 17
2565: PPUSH
2566: CALL_OW 12
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: LD_INT 2
2576: PPUSH
2577: CALL 3828 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2581: LD_INT 3
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: LD_INT 21
2589: PPUSH
2590: LD_EXP 16
2594: PPUSH
2595: LD_EXP 17
2599: PPUSH
2600: CALL_OW 12
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL 3828 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2615: LD_INT 3
2617: PPUSH
2618: LD_INT 3
2620: PPUSH
2621: LD_INT 1
2623: PPUSH
2624: LD_EXP 16
2628: PPUSH
2629: LD_EXP 17
2633: PPUSH
2634: CALL_OW 12
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 2
2644: PPUSH
2645: CALL 3828 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_EXP 16
2662: PPUSH
2663: LD_EXP 17
2667: PPUSH
2668: CALL_OW 12
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: LD_INT 6
2678: PPUSH
2679: CALL 3828 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: LD_INT 22
2690: PUSH
2691: LD_INT 3
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: LD_INT 32
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PPUSH
2712: CALL_OW 69
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2758
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: LD_EXP 16
2735: PPUSH
2736: LD_EXP 17
2740: PPUSH
2741: CALL_OW 12
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: CALL 3828 0 6
2756: GO 2717
2758: POP
2759: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2760: LD_ADDR_VAR 0 2
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 3
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 30
2777: PUSH
2778: LD_INT 31
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: FOR_IN
2795: IFFALSE 2823
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2797: LD_EXP 16
2801: PPUSH
2802: LD_EXP 17
2806: PPUSH
2807: CALL_OW 12
2811: PPUSH
2812: LD_VAR 0 2
2816: PPUSH
2817: CALL 3938 0 2
2821: GO 2794
2823: POP
2824: POP
// end ;
2825: LD_VAR 0 1
2829: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2830: LD_INT 0
2832: PPUSH
2833: PPUSH
2834: PPUSH
2835: PPUSH
// uc_side = 6 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 6
2843: ST_TO_ADDR
// uc_nation = 3 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 3
2851: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: DOUBLE
2858: LD_INT 1
2860: DEC
2861: ST_TO_ADDR
2862: LD_INT 1
2864: PUSH
2865: LD_INT 2
2867: PUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: CALL_OW 12
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: LIST
2883: PUSH
2884: LD_OWVAR 67
2888: ARRAY
2889: PUSH
2890: FOR_TO
2891: IFFALSE 3051
// begin vc_engine = 1 ;
2893: LD_ADDR_OWVAR 39
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// vc_control = 1 ;
2901: LD_ADDR_OWVAR 38
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2909: LD_ADDR_OWVAR 40
2913: PUSH
2914: LD_INT 42
2916: PUSH
2917: LD_INT 42
2919: PUSH
2920: LD_INT 43
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: PUSH
2928: LD_OWVAR 67
2932: ARRAY
2933: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2934: LD_ADDR_OWVAR 37
2938: PUSH
2939: LD_INT 21
2941: PUSH
2942: LD_INT 22
2944: PUSH
2945: LD_INT 22
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: LIST
2952: PUSH
2953: LD_OWVAR 67
2957: ARRAY
2958: ST_TO_ADDR
// veh = CreateVehicle ;
2959: LD_ADDR_VAR 0 3
2963: PUSH
2964: CALL_OW 45
2968: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2969: LD_VAR 0 3
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// hc_gallery =  ;
2984: LD_ADDR_OWVAR 33
2988: PUSH
2989: LD_STRING 
2991: ST_TO_ADDR
// hc_name =  ;
2992: LD_ADDR_OWVAR 26
2996: PUSH
2997: LD_STRING 
2999: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3000: LD_INT 0
3002: PPUSH
3003: LD_INT 3
3005: PPUSH
3006: LD_EXP 16
3010: PPUSH
3011: LD_EXP 17
3015: PPUSH
3016: CALL_OW 12
3020: PPUSH
3021: CALL_OW 380
// un = CreateHuman ;
3025: LD_ADDR_VAR 0 4
3029: PUSH
3030: CALL_OW 44
3034: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3035: LD_VAR 0 4
3039: PPUSH
3040: LD_VAR 0 3
3044: PPUSH
3045: CALL_OW 52
// end ;
3049: GO 2890
3051: POP
3052: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3053: LD_INT 0
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: LD_EXP 16
3063: PPUSH
3064: LD_EXP 17
3068: PPUSH
3069: CALL_OW 12
3073: PUSH
3074: LD_INT 2
3076: PLUS
3077: PPUSH
3078: CALL_OW 380
// un = CreateHuman ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: CALL_OW 44
3091: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: LD_INT 0
3102: PPUSH
3103: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 4
3112: PPUSH
3113: LD_EXP 16
3117: PPUSH
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 12
3127: PUSH
3128: LD_INT 2
3130: PLUS
3131: PPUSH
3132: CALL_OW 380
// un = CreateHuman ;
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: CALL_OW 44
3145: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3146: LD_VAR 0 4
3150: PPUSH
3151: LD_INT 3
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 1
3169: DEC
3170: ST_TO_ADDR
3171: LD_INT 2
3173: PUSH
3174: LD_INT 3
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: LIST
3184: PUSH
3185: LD_OWVAR 67
3189: ARRAY
3190: PUSH
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 12
3201: PLUS
3202: PUSH
3203: FOR_TO
3204: IFFALSE 3274
// begin hc_gallery =  ;
3206: LD_ADDR_OWVAR 33
3210: PUSH
3211: LD_STRING 
3213: ST_TO_ADDR
// hc_name =  ;
3214: LD_ADDR_OWVAR 26
3218: PUSH
3219: LD_STRING 
3221: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3222: LD_INT 0
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: LD_EXP 16
3232: PPUSH
3233: LD_EXP 17
3237: PPUSH
3238: CALL_OW 12
3242: PPUSH
3243: CALL_OW 380
// un = CreateHuman ;
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: CALL_OW 44
3256: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3257: LD_VAR 0 4
3261: PPUSH
3262: LD_INT 3
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 49
// end ;
3272: GO 3203
3274: POP
3275: POP
// vc_engine = 1 ;
3276: LD_ADDR_OWVAR 39
3280: PUSH
3281: LD_INT 1
3283: ST_TO_ADDR
// vc_control = 1 ;
3284: LD_ADDR_OWVAR 38
3288: PUSH
3289: LD_INT 1
3291: ST_TO_ADDR
// vc_weapon = 51 ;
3292: LD_ADDR_OWVAR 40
3296: PUSH
3297: LD_INT 51
3299: ST_TO_ADDR
// vc_chassis = 22 ;
3300: LD_ADDR_OWVAR 37
3304: PUSH
3305: LD_INT 22
3307: ST_TO_ADDR
// veh = CreateVehicle ;
3308: LD_ADDR_VAR 0 3
3312: PUSH
3313: CALL_OW 45
3317: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3318: LD_VAR 0 3
3322: PPUSH
3323: LD_INT 3
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 100
3343: PPUSH
3344: CALL_OW 290
// hc_gallery =  ;
3348: LD_ADDR_OWVAR 33
3352: PUSH
3353: LD_STRING 
3355: ST_TO_ADDR
// hc_name =  ;
3356: LD_ADDR_OWVAR 26
3360: PUSH
3361: LD_STRING 
3363: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3364: LD_INT 0
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: LD_EXP 16
3374: PPUSH
3375: LD_EXP 17
3379: PPUSH
3380: CALL_OW 12
3384: PPUSH
3385: CALL_OW 380
// un = CreateHuman ;
3389: LD_ADDR_VAR 0 4
3393: PUSH
3394: CALL_OW 44
3398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3399: LD_VAR 0 4
3403: PPUSH
3404: LD_VAR 0 3
3408: PPUSH
3409: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3413: LD_ADDR_VAR 0 2
3417: PUSH
3418: LD_INT 22
3420: PUSH
3421: LD_INT 6
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: LD_INT 25
3436: PUSH
3437: LD_INT 2
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 25
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 69
3478: PUSH
3479: FOR_IN
3480: IFFALSE 3499
// ComAgressiveMove ( i , 45 , 46 ) ;
3482: LD_VAR 0 2
3486: PPUSH
3487: LD_INT 45
3489: PPUSH
3490: LD_INT 46
3492: PPUSH
3493: CALL_OW 114
3497: GO 3479
3499: POP
3500: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3501: LD_ADDR_VAR 0 2
3505: PUSH
3506: LD_INT 22
3508: PUSH
3509: LD_INT 6
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 25
3518: PUSH
3519: LD_INT 2
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PPUSH
3530: CALL_OW 69
3534: PUSH
3535: FOR_IN
3536: IFFALSE 3567
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3538: LD_ADDR_EXP 21
3542: PUSH
3543: LD_VAR 0 2
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 48
3553: PPUSH
3554: LD_INT 55
3556: PPUSH
3557: LD_INT 5
3559: PPUSH
3560: CALL_OW 145
3564: ST_TO_ADDR
3565: GO 3535
3567: POP
3568: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: LD_INT 22
3576: PUSH
3577: LD_INT 6
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: FOR_IN
3604: IFFALSE 3623
// ComMoveXY ( i , 39 , 55 ) ;
3606: LD_VAR 0 2
3610: PPUSH
3611: LD_INT 39
3613: PPUSH
3614: LD_INT 55
3616: PPUSH
3617: CALL_OW 111
3621: GO 3603
3623: POP
3624: POP
// end ;
3625: LD_VAR 0 1
3629: RET
// export function PrepareFirstAttack ; var i , un ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
3634: PPUSH
// uc_side = 5 ;
3635: LD_ADDR_OWVAR 20
3639: PUSH
3640: LD_INT 5
3642: ST_TO_ADDR
// uc_nation = 3 ;
3643: LD_ADDR_OWVAR 21
3647: PUSH
3648: LD_INT 3
3650: ST_TO_ADDR
// for i := 1 to 4 do
3651: LD_ADDR_VAR 0 2
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 4
3663: PUSH
3664: FOR_TO
3665: IFFALSE 3750
// begin hc_gallery =  ;
3667: LD_ADDR_OWVAR 33
3671: PUSH
3672: LD_STRING 
3674: ST_TO_ADDR
// hc_name =  ;
3675: LD_ADDR_OWVAR 26
3679: PUSH
3680: LD_STRING 
3682: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3683: LD_INT 0
3685: PPUSH
3686: LD_INT 1
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: LD_EXP 17
3698: PPUSH
3699: CALL_OW 12
3703: PPUSH
3704: CALL_OW 380
// un = CreateHuman ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_INT 4
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3733: LD_VAR 0 3
3737: PPUSH
3738: LD_INT 48
3740: PPUSH
3741: LD_INT 14
3743: PPUSH
3744: CALL_OW 114
// end ;
3748: GO 3664
3750: POP
3751: POP
// firstRussianAttack = 1 ;
3752: LD_ADDR_EXP 23
3756: PUSH
3757: LD_INT 1
3759: ST_TO_ADDR
// end ; end_of_file
3760: LD_VAR 0 1
3764: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3765: LD_INT 0
3767: PPUSH
3768: PPUSH
// if exist_mode then
3769: LD_VAR 0 2
3773: IFFALSE 3798
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_EXP 45
3784: PUSH
3785: LD_VAR 0 1
3789: STR
3790: PPUSH
3791: CALL_OW 34
3795: ST_TO_ADDR
// end else
3796: GO 3813
// begin unit := NewCharacter ( ident ) ;
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 25
3812: ST_TO_ADDR
// end ; result := unit ;
3813: LD_ADDR_VAR 0 3
3817: PUSH
3818: LD_VAR 0 4
3822: ST_TO_ADDR
// end ;
3823: LD_VAR 0 3
3827: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
// for i = 1 to count do
3834: LD_ADDR_VAR 0 8
3838: PUSH
3839: DOUBLE
3840: LD_INT 1
3842: DEC
3843: ST_TO_ADDR
3844: LD_VAR 0 6
3848: PUSH
3849: FOR_TO
3850: IFFALSE 3931
// begin uc_side = side ;
3852: LD_ADDR_OWVAR 20
3856: PUSH
3857: LD_VAR 0 1
3861: ST_TO_ADDR
// uc_nation = nation ;
3862: LD_ADDR_OWVAR 21
3866: PUSH
3867: LD_VAR 0 2
3871: ST_TO_ADDR
// hc_gallery =  ;
3872: LD_ADDR_OWVAR 33
3876: PUSH
3877: LD_STRING 
3879: ST_TO_ADDR
// hc_name =  ;
3880: LD_ADDR_OWVAR 26
3884: PUSH
3885: LD_STRING 
3887: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3888: LD_INT 0
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 4
3900: PPUSH
3901: CALL_OW 380
// un = CreateHuman ;
3905: LD_ADDR_VAR 0 10
3909: PUSH
3910: CALL_OW 44
3914: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3915: LD_VAR 0 10
3919: PPUSH
3920: LD_VAR 0 3
3924: PPUSH
3925: CALL_OW 52
// end ;
3929: GO 3849
3931: POP
3932: POP
// end ;
3933: LD_VAR 0 7
3937: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// uc_side := GetSide ( b ) ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_VAR 0 2
3952: PPUSH
3953: CALL_OW 255
3957: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3958: LD_ADDR_OWVAR 21
3962: PUSH
3963: LD_VAR 0 2
3967: PPUSH
3968: CALL_OW 248
3972: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3973: LD_INT 0
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 380
// un = CreateHuman ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: CALL_OW 44
3997: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3998: LD_ADDR_VAR 0 5
4002: PUSH
4003: LD_VAR 0 2
4007: PPUSH
4008: CALL_OW 254
4012: PUSH
4013: LD_INT 3
4015: MINUS
4016: ST_TO_ADDR
// if dir < 0 then
4017: LD_VAR 0 5
4021: PUSH
4022: LD_INT 0
4024: LESS
4025: IFFALSE 4041
// dir := 6 + dir ;
4027: LD_ADDR_VAR 0 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_VAR 0 5
4039: PLUS
4040: ST_TO_ADDR
// SetDir ( un , dir ) ;
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4055: LD_VAR 0 4
4059: PPUSH
4060: LD_VAR 0 2
4064: PPUSH
4065: CALL_OW 52
// end ;
4069: LD_VAR 0 3
4073: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// rnd = rand ( 1 , characters ) ;
4079: LD_ADDR_VAR 0 6
4083: PUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 1
4091: PPUSH
4092: CALL_OW 12
4096: ST_TO_ADDR
// for i = 1 to characters do
4097: LD_ADDR_VAR 0 5
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_VAR 0 1
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4223
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4115: LD_VAR 0 5
4119: PUSH
4120: LD_VAR 0 6
4124: EQUAL
4125: PUSH
4126: LD_VAR 0 1
4130: PUSH
4131: LD_VAR 0 5
4135: ARRAY
4136: PPUSH
4137: CALL_OW 258
4141: PUSH
4142: LD_INT 1
4144: EQUAL
4145: AND
4146: IFFALSE 4168
// Say ( characters [ i ] , dialogMID ) ;
4148: LD_VAR 0 1
4152: PUSH
4153: LD_VAR 0 5
4157: ARRAY
4158: PPUSH
4159: LD_VAR 0 2
4163: PPUSH
4164: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4168: LD_VAR 0 5
4172: PUSH
4173: LD_VAR 0 6
4177: EQUAL
4178: PUSH
4179: LD_VAR 0 1
4183: PUSH
4184: LD_VAR 0 5
4188: ARRAY
4189: PPUSH
4190: CALL_OW 258
4194: PUSH
4195: LD_INT 2
4197: EQUAL
4198: AND
4199: IFFALSE 4221
// Say ( characters [ i ] , dialogFID ) ;
4201: LD_VAR 0 1
4205: PUSH
4206: LD_VAR 0 5
4210: ARRAY
4211: PPUSH
4212: LD_VAR 0 3
4216: PPUSH
4217: CALL_OW 88
// end ;
4221: GO 4112
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 4
4229: RET
// export function PrepareDifficulty ; var tmp ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if Difficulty = 1 then
4234: LD_OWVAR 67
4238: PUSH
4239: LD_INT 1
4241: EQUAL
4242: IFFALSE 4260
// begin RuSoldMinLevel = 0 ;
4244: LD_ADDR_EXP 16
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4252: LD_ADDR_EXP 17
4256: PUSH
4257: LD_INT 2
4259: ST_TO_ADDR
// end ; if Difficulty = 2 then
4260: LD_OWVAR 67
4264: PUSH
4265: LD_INT 2
4267: EQUAL
4268: IFFALSE 4376
// begin RuSoldMinLevel = 1 ;
4270: LD_ADDR_EXP 16
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4278: LD_ADDR_EXP 17
4282: PUSH
4283: LD_INT 2
4285: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4286: LD_INT 14
4288: PPUSH
4289: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4293: LD_INT 23
4295: PPUSH
4296: CALL_OW 64
// uc_nation = 3 ;
4300: LD_ADDR_OWVAR 21
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// uc_side = 3 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 3
4315: ST_TO_ADDR
// bc_level = 5 ;
4316: LD_ADDR_OWVAR 43
4320: PUSH
4321: LD_INT 5
4323: ST_TO_ADDR
// bc_type = 32 ;
4324: LD_ADDR_OWVAR 42
4328: PUSH
4329: LD_INT 32
4331: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4332: LD_ADDR_VAR 0 2
4336: PUSH
4337: LD_INT 76
4339: PPUSH
4340: LD_INT 91
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: CALL_OW 47
4350: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4351: LD_VAR 0 2
4355: PPUSH
4356: LD_INT 43
4358: PPUSH
4359: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4363: LD_INT 51
4365: PPUSH
4366: LD_INT 3
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 322
// end ; if Difficulty = 3 then
4376: LD_OWVAR 67
4380: PUSH
4381: LD_INT 3
4383: EQUAL
4384: IFFALSE 4560
// begin RuSoldMinLevel = 1 ;
4386: LD_ADDR_EXP 16
4390: PUSH
4391: LD_INT 1
4393: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4394: LD_ADDR_EXP 17
4398: PUSH
4399: LD_INT 3
4401: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4402: LD_INT 13
4404: PPUSH
4405: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4409: LD_INT 14
4411: PPUSH
4412: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4416: LD_INT 26
4418: PPUSH
4419: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4423: LD_INT 23
4425: PPUSH
4426: CALL_OW 64
// uc_nation = 3 ;
4430: LD_ADDR_OWVAR 21
4434: PUSH
4435: LD_INT 3
4437: ST_TO_ADDR
// uc_side = 3 ;
4438: LD_ADDR_OWVAR 20
4442: PUSH
4443: LD_INT 3
4445: ST_TO_ADDR
// bc_level = 5 ;
4446: LD_ADDR_OWVAR 43
4450: PUSH
4451: LD_INT 5
4453: ST_TO_ADDR
// bc_type = 32 ;
4454: LD_ADDR_OWVAR 42
4458: PUSH
4459: LD_INT 32
4461: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4462: LD_ADDR_VAR 0 2
4466: PUSH
4467: LD_INT 76
4469: PPUSH
4470: LD_INT 91
4472: PPUSH
4473: LD_INT 2
4475: PPUSH
4476: CALL_OW 47
4480: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_INT 44
4488: PPUSH
4489: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4493: LD_ADDR_VAR 0 2
4497: PUSH
4498: LD_INT 83
4500: PPUSH
4501: LD_INT 84
4503: PPUSH
4504: LD_INT 2
4506: PPUSH
4507: CALL_OW 47
4511: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 43
4519: PPUSH
4520: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4524: LD_INT 51
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4537: LD_INT 52
4539: PPUSH
4540: LD_INT 3
4542: PPUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4550: LD_INT 25
4552: PPUSH
4553: LD_INT 44
4555: PPUSH
4556: CALL_OW 431
// end ; end ;
4560: LD_VAR 0 1
4564: RET
// export function EnergyDialog ; begin
4565: LD_INT 0
4567: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4568: LD_INT 46
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 321
4578: PUSH
4579: LD_INT 1
4581: EQUAL
4582: PUSH
4583: LD_INT 35
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 321
4593: PUSH
4594: LD_INT 1
4596: EQUAL
4597: AND
4598: IFFALSE 4622
// begin Say ( JMM , D9c-JMM-1 ) ;
4600: LD_EXP 1
4604: PPUSH
4605: LD_STRING D9c-JMM-1
4607: PPUSH
4608: CALL_OW 88
// energyVDialog = 1 ;
4612: LD_ADDR_EXP 33
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// end else
4620: GO 4776
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4622: LD_INT 35
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: CALL_OW 321
4632: PUSH
4633: LD_INT 2
4635: EQUAL
4636: PUSH
4637: LD_EXP 33
4641: PUSH
4642: LD_INT 0
4644: EQUAL
4645: AND
4646: IFFALSE 4668
// begin Say ( JMM , D9c-JMM-1a ) ;
4648: LD_EXP 1
4652: PPUSH
4653: LD_STRING D9c-JMM-1a
4655: PPUSH
4656: CALL_OW 88
// energyVDialog = 1 ;
4660: LD_ADDR_EXP 33
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4668: LD_INT 46
4670: PPUSH
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 321
4678: PUSH
4679: LD_INT 2
4681: EQUAL
4682: PUSH
4683: LD_EXP 33
4687: PUSH
4688: LD_INT 0
4690: EQUAL
4691: AND
4692: IFFALSE 4714
// begin Say ( JMM , D9c-JMM-1b ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING D9c-JMM-1b
4701: PPUSH
4702: CALL_OW 88
// energyVDialog = 1 ;
4706: LD_ADDR_EXP 33
4710: PUSH
4711: LD_INT 1
4713: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4714: LD_INT 46
4716: PPUSH
4717: LD_INT 1
4719: PPUSH
4720: CALL_OW 321
4724: PUSH
4725: LD_INT 2
4727: EQUAL
4728: PUSH
4729: LD_INT 21
4731: PPUSH
4732: LD_INT 1
4734: PPUSH
4735: CALL_OW 321
4739: PUSH
4740: LD_INT 2
4742: EQUAL
4743: AND
4744: PUSH
4745: LD_EXP 33
4749: PUSH
4750: LD_INT 0
4752: EQUAL
4753: AND
4754: IFFALSE 4776
// begin Say ( JMM , D9c-JMM-1c ) ;
4756: LD_EXP 1
4760: PPUSH
4761: LD_STRING D9c-JMM-1c
4763: PPUSH
4764: CALL_OW 88
// energyVDialog = 1 ;
4768: LD_ADDR_EXP 33
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end ; end ; end ;
4776: LD_VAR 0 1
4780: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
4786: PPUSH
4787: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4788: LD_VAR 0 1
4792: NOT
4793: PUSH
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 256
4803: PUSH
4804: LD_INT 250
4806: LESS
4807: OR
4808: PUSH
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 314
4818: PUSH
4819: LD_VAR 0 1
4823: PPUSH
4824: CALL_OW 261
4828: PUSH
4829: LD_INT 20
4831: GREATER
4832: AND
4833: OR
4834: IFFALSE 4838
// exit ;
4836: GO 5203
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4838: LD_VAR 0 1
4842: PPUSH
4843: CALL_OW 261
4847: PUSH
4848: LD_INT 20
4850: LESS
4851: PUSH
4852: LD_VAR 0 1
4856: PPUSH
4857: CALL_OW 110
4861: PUSH
4862: LD_INT 21
4864: EQUAL
4865: NOT
4866: AND
4867: IFFALSE 4894
// begin ComStop ( bulldozer ) ;
4869: LD_VAR 0 1
4873: PPUSH
4874: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4878: LD_VAR 0 1
4882: PPUSH
4883: LD_INT 21
4885: PPUSH
4886: CALL_OW 109
// exit ;
4890: GO 5203
// end else
4892: GO 4921
// if GetFuel ( bulldozer ) > 20 then
4894: LD_VAR 0 1
4898: PPUSH
4899: CALL_OW 261
4903: PUSH
4904: LD_INT 20
4906: GREATER
4907: IFFALSE 4921
// SetTag ( bulldozer , 0 ) ;
4909: LD_VAR 0 1
4913: PPUSH
4914: LD_INT 0
4916: PPUSH
4917: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4921: LD_ADDR_VAR 0 5
4925: PUSH
4926: LD_VAR 0 2
4930: PPUSH
4931: CALL_OW 353
4935: ST_TO_ADDR
// tmp := [ ] ;
4936: LD_ADDR_VAR 0 6
4940: PUSH
4941: EMPTY
4942: ST_TO_ADDR
// for i = 1 to list do
4943: LD_ADDR_VAR 0 4
4947: PUSH
4948: DOUBLE
4949: LD_INT 1
4951: DEC
4952: ST_TO_ADDR
4953: LD_VAR 0 5
4957: PUSH
4958: FOR_TO
4959: IFFALSE 5057
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4961: LD_VAR 0 5
4965: PUSH
4966: LD_VAR 0 4
4970: ARRAY
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PPUSH
4976: LD_VAR 0 5
4980: PUSH
4981: LD_VAR 0 4
4985: ARRAY
4986: PUSH
4987: LD_INT 2
4989: ARRAY
4990: PPUSH
4991: CALL_OW 554
4995: IFFALSE 5055
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_VAR 0 4
5025: ARRAY
5026: PUSH
5027: LD_INT 1
5029: ARRAY
5030: PUSH
5031: LD_VAR 0 5
5035: PUSH
5036: LD_VAR 0 4
5040: ARRAY
5041: PUSH
5042: LD_INT 2
5044: ARRAY
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 1
5054: ST_TO_ADDR
// end ;
5055: GO 4958
5057: POP
5058: POP
// ComStop ( bulldozer ) ;
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5068: LD_ADDR_VAR 0 7
5072: PUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 250
5082: PUSH
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 251
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: ST_TO_ADDR
// for i = tmp downto 1 do
5097: LD_ADDR_VAR 0 4
5101: PUSH
5102: DOUBLE
5103: LD_VAR 0 6
5107: INC
5108: ST_TO_ADDR
5109: LD_INT 1
5111: PUSH
5112: FOR_DOWNTO
5113: IFFALSE 5201
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5115: LD_ADDR_VAR 0 7
5119: PUSH
5120: LD_VAR 0 7
5124: PUSH
5125: LD_INT 1
5127: ARRAY
5128: PPUSH
5129: LD_VAR 0 7
5133: PUSH
5134: LD_INT 2
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 6
5142: PPUSH
5143: CALL 5304 0 3
5147: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5148: LD_VAR 0 1
5152: PPUSH
5153: LD_VAR 0 7
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PPUSH
5162: LD_VAR 0 7
5166: PUSH
5167: LD_INT 2
5169: ARRAY
5170: PPUSH
5171: CALL 5208 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5175: LD_ADDR_VAR 0 6
5179: PUSH
5180: LD_VAR 0 6
5184: PPUSH
5185: LD_VAR 0 7
5189: PUSH
5190: LD_INT 3
5192: ARRAY
5193: PPUSH
5194: CALL_OW 3
5198: ST_TO_ADDR
// end ;
5199: GO 5112
5201: POP
5202: POP
// end ;
5203: LD_VAR 0 3
5207: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5208: LD_INT 0
5210: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_VAR 0 3
5220: PPUSH
5221: CALL_OW 351
5225: PUSH
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 3
5235: PPUSH
5236: CALL_OW 554
5240: AND
5241: PUSH
5242: LD_VAR 0 2
5246: PPUSH
5247: LD_VAR 0 3
5251: PPUSH
5252: CALL_OW 488
5256: AND
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: LD_VAR 0 3
5267: PPUSH
5268: CALL_OW 428
5272: PUSH
5273: LD_INT 1
5275: NEG
5276: EQUAL
5277: AND
5278: IFFALSE 5299
// AddComMoveXY ( bulldozer , x , y ) ;
5280: LD_VAR 0 1
5284: PPUSH
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_VAR 0 3
5294: PPUSH
5295: CALL_OW 171
// end ;
5299: LD_VAR 0 4
5303: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5304: LD_INT 0
5306: PPUSH
5307: PPUSH
5308: PPUSH
5309: PPUSH
5310: PPUSH
5311: PPUSH
5312: PPUSH
// dist := 99999 ;
5313: LD_ADDR_VAR 0 6
5317: PUSH
5318: LD_INT 99999
5320: ST_TO_ADDR
// for i = 1 to list do
5321: LD_ADDR_VAR 0 5
5325: PUSH
5326: DOUBLE
5327: LD_INT 1
5329: DEC
5330: ST_TO_ADDR
5331: LD_VAR 0 3
5335: PUSH
5336: FOR_TO
5337: IFFALSE 5475
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5339: LD_ADDR_VAR 0 7
5343: PUSH
5344: LD_VAR 0 1
5348: PPUSH
5349: LD_VAR 0 2
5353: PPUSH
5354: LD_VAR 0 3
5358: PUSH
5359: LD_VAR 0 5
5363: ARRAY
5364: PUSH
5365: LD_INT 1
5367: ARRAY
5368: PPUSH
5369: LD_VAR 0 3
5373: PUSH
5374: LD_VAR 0 5
5378: ARRAY
5379: PUSH
5380: LD_INT 2
5382: ARRAY
5383: PPUSH
5384: CALL_OW 298
5388: ST_TO_ADDR
// if d = 0 then
5389: LD_VAR 0 7
5393: PUSH
5394: LD_INT 0
5396: EQUAL
5397: IFFALSE 5401
// continue ;
5399: GO 5336
// if d < dist then
5401: LD_VAR 0 7
5405: PUSH
5406: LD_VAR 0 6
5410: LESS
5411: IFFALSE 5473
// begin _x := list [ i ] [ 1 ] ;
5413: LD_ADDR_VAR 0 8
5417: PUSH
5418: LD_VAR 0 3
5422: PUSH
5423: LD_VAR 0 5
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: ARRAY
5432: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5433: LD_ADDR_VAR 0 9
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: LD_VAR 0 5
5447: ARRAY
5448: PUSH
5449: LD_INT 2
5451: ARRAY
5452: ST_TO_ADDR
// _i := i ;
5453: LD_ADDR_VAR 0 10
5457: PUSH
5458: LD_VAR 0 5
5462: ST_TO_ADDR
// dist := d ;
5463: LD_ADDR_VAR 0 6
5467: PUSH
5468: LD_VAR 0 7
5472: ST_TO_ADDR
// end ; end ;
5473: GO 5336
5475: POP
5476: POP
// result := [ _x , _y , _i , dist ] ;
5477: LD_ADDR_VAR 0 4
5481: PUSH
5482: LD_VAR 0 8
5486: PUSH
5487: LD_VAR 0 9
5491: PUSH
5492: LD_VAR 0 10
5496: PUSH
5497: LD_VAR 0 6
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: ST_TO_ADDR
// end ;
5508: LD_VAR 0 4
5512: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5513: LD_INT 0
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
// for i = 1 to 72 do
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: DOUBLE
5525: LD_INT 1
5527: DEC
5528: ST_TO_ADDR
5529: LD_INT 72
5531: PUSH
5532: FOR_TO
5533: IFFALSE 5591
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5535: LD_VAR 0 5
5539: PPUSH
5540: LD_VAR 0 1
5544: PPUSH
5545: CALL_OW 321
5549: PUSH
5550: LD_INT 1
5552: EQUAL
5553: PUSH
5554: LD_VAR 0 5
5558: PPUSH
5559: LD_VAR 0 3
5563: PPUSH
5564: CALL_OW 482
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: AND
5573: IFFALSE 5589
// AddComResearch ( lab , i ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: LD_VAR 0 5
5584: PPUSH
5585: CALL_OW 184
5589: GO 5532
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 4
5597: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5598: LD_INT 0
5600: PPUSH
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5606: LD_ADDR_VAR 0 7
5610: PUSH
5611: LD_VAR 0 2
5615: PPUSH
5616: CALL_OW 313
5620: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5621: LD_ADDR_VAR 0 8
5625: PUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: LD_INT 22
5633: PUSH
5634: LD_VAR 0 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 25
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 750
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 3
5665: PUSH
5666: LD_INT 54
5668: PUSH
5669: EMPTY
5670: LIST
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: PPUSH
5682: CALL_OW 70
5686: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5687: LD_ADDR_VAR 0 5
5691: PUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_VAR 0 1
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 21
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 3
5721: PUSH
5722: LD_INT 24
5724: PUSH
5725: LD_INT 1000
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: EMPTY
5742: LIST
5743: PPUSH
5744: CALL_OW 70
5748: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5749: LD_VAR 0 5
5753: NOT
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 25
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 24
5779: PUSH
5780: LD_INT 250
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: NOT
5797: AND
5798: IFFALSE 5802
// exit ;
5800: GO 5899
// if buildings_list > 0 and engineerOkInside then
5802: LD_VAR 0 5
5806: PUSH
5807: LD_INT 0
5809: GREATER
5810: PUSH
5811: LD_VAR 0 7
5815: AND
5816: IFFALSE 5827
// ComExitBuilding ( engineerOkInside ) ;
5818: LD_VAR 0 7
5822: PPUSH
5823: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5827: LD_VAR 0 5
5831: PUSH
5832: LD_INT 0
5834: GREATER
5835: PUSH
5836: LD_VAR 0 8
5840: PUSH
5841: LD_INT 0
5843: GREATER
5844: AND
5845: IFFALSE 5865
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5847: LD_VAR 0 8
5851: PPUSH
5852: LD_VAR 0 5
5856: PUSH
5857: LD_INT 1
5859: ARRAY
5860: PPUSH
5861: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5865: LD_VAR 0 5
5869: PUSH
5870: LD_INT 0
5872: EQUAL
5873: PUSH
5874: LD_VAR 0 8
5878: PUSH
5879: LD_INT 0
5881: GREATER
5882: AND
5883: IFFALSE 5899
// ComEnterUnit ( engineerOkOutside , building ) ;
5885: LD_VAR 0 8
5889: PPUSH
5890: LD_VAR 0 2
5894: PPUSH
5895: CALL_OW 120
// end ;
5899: LD_VAR 0 4
5903: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
5908: PPUSH
5909: PPUSH
5910: PPUSH
5911: PPUSH
5912: PPUSH
5913: PPUSH
5914: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5915: LD_ADDR_VAR 0 6
5919: PUSH
5920: LD_INT 22
5922: PUSH
5923: LD_VAR 0 1
5927: PUSH
5928: EMPTY
5929: LIST
5930: LIST
5931: PUSH
5932: LD_INT 25
5934: PUSH
5935: LD_INT 4
5937: PUSH
5938: EMPTY
5939: LIST
5940: LIST
5941: PUSH
5942: LD_INT 23
5944: PUSH
5945: LD_INT 2
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PUSH
5952: LD_INT 24
5954: PUSH
5955: LD_INT 251
5957: PUSH
5958: EMPTY
5959: LIST
5960: LIST
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: LIST
5966: LIST
5967: PPUSH
5968: CALL_OW 69
5972: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5973: LD_ADDR_VAR 0 7
5977: PUSH
5978: LD_VAR 0 3
5982: PPUSH
5983: LD_INT 22
5985: PUSH
5986: LD_VAR 0 1
5990: PUSH
5991: EMPTY
5992: LIST
5993: LIST
5994: PUSH
5995: LD_INT 23
5997: PUSH
5998: LD_INT 2
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: PUSH
6005: LD_INT 25
6007: PUSH
6008: LD_INT 4
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PUSH
6015: LD_INT 50
6017: PUSH
6018: EMPTY
6019: LIST
6020: PUSH
6021: EMPTY
6022: LIST
6023: LIST
6024: LIST
6025: LIST
6026: PPUSH
6027: CALL_OW 70
6031: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6032: LD_ADDR_VAR 0 10
6036: PUSH
6037: LD_VAR 0 3
6041: PPUSH
6042: LD_INT 22
6044: PUSH
6045: LD_VAR 0 1
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PUSH
6054: LD_INT 21
6056: PUSH
6057: LD_INT 1
6059: PUSH
6060: EMPTY
6061: LIST
6062: LIST
6063: PUSH
6064: LD_INT 3
6066: PUSH
6067: LD_INT 25
6069: PUSH
6070: LD_INT 3
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 3
6083: PUSH
6084: LD_INT 24
6086: PUSH
6087: LD_INT 750
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PUSH
6094: EMPTY
6095: LIST
6096: LIST
6097: PUSH
6098: EMPTY
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: PPUSH
6104: CALL_OW 70
6108: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6109: LD_ADDR_VAR 0 11
6113: PUSH
6114: LD_VAR 0 2
6118: PPUSH
6119: LD_INT 22
6121: PUSH
6122: LD_VAR 0 1
6126: PUSH
6127: EMPTY
6128: LIST
6129: LIST
6130: PUSH
6131: LD_INT 21
6133: PUSH
6134: LD_INT 1
6136: PUSH
6137: EMPTY
6138: LIST
6139: LIST
6140: PUSH
6141: LD_INT 3
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 3
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 3
6160: PUSH
6161: LD_INT 24
6163: PUSH
6164: LD_INT 1000
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: EMPTY
6172: LIST
6173: LIST
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 70
6185: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6186: LD_VAR 0 10
6190: NOT
6191: PUSH
6192: LD_VAR 0 11
6196: NOT
6197: AND
6198: PUSH
6199: LD_VAR 0 6
6203: NOT
6204: AND
6205: IFFALSE 6209
// exit ;
6207: GO 6443
// if damageUnits > 0 and sci_list > 0 then
6209: LD_VAR 0 10
6213: PUSH
6214: LD_INT 0
6216: GREATER
6217: PUSH
6218: LD_VAR 0 6
6222: PUSH
6223: LD_INT 0
6225: GREATER
6226: AND
6227: IFFALSE 6243
// ComMoveToArea ( damageUnits , healArea ) ;
6229: LD_VAR 0 10
6233: PPUSH
6234: LD_VAR 0 2
6238: PPUSH
6239: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6243: LD_VAR 0 11
6247: PUSH
6248: LD_INT 0
6250: GREATER
6251: PUSH
6252: LD_VAR 0 6
6256: PUSH
6257: LD_INT 0
6259: GREATER
6260: AND
6261: IFFALSE 6272
// ComExitBuilding ( sci_list ) ;
6263: LD_VAR 0 6
6267: PPUSH
6268: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6272: LD_VAR 0 11
6276: PUSH
6277: LD_INT 0
6279: GREATER
6280: PUSH
6281: LD_VAR 0 7
6285: PUSH
6286: LD_INT 0
6288: GREATER
6289: AND
6290: IFFALSE 6310
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6292: LD_VAR 0 7
6296: PPUSH
6297: LD_VAR 0 11
6301: PUSH
6302: LD_INT 1
6304: ARRAY
6305: PPUSH
6306: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6310: LD_VAR 0 10
6314: PUSH
6315: LD_INT 0
6317: EQUAL
6318: PUSH
6319: LD_VAR 0 11
6323: PUSH
6324: LD_INT 0
6326: EQUAL
6327: AND
6328: PUSH
6329: LD_VAR 0 7
6333: PUSH
6334: LD_INT 0
6336: GREATER
6337: AND
6338: IFFALSE 6443
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6340: LD_ADDR_VAR 0 12
6344: PUSH
6345: LD_INT 22
6347: PUSH
6348: LD_VAR 0 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 21
6359: PUSH
6360: LD_INT 3
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 30
6369: PUSH
6370: LD_INT 8
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: EMPTY
6378: LIST
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 69
6386: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6387: LD_ADDR_VAR 0 13
6391: PUSH
6392: LD_INT 1
6394: PPUSH
6395: LD_VAR 0 12
6399: PPUSH
6400: CALL_OW 12
6404: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6405: LD_VAR 0 7
6409: PPUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 60
6415: PUSH
6416: EMPTY
6417: LIST
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PPUSH
6423: CALL_OW 72
6427: PPUSH
6428: LD_VAR 0 12
6432: PUSH
6433: LD_VAR 0 13
6437: ARRAY
6438: PPUSH
6439: CALL_OW 120
// end ; end ;
6443: LD_VAR 0 5
6447: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6448: LD_INT 0
6450: PPUSH
6451: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6452: LD_INT 22
6454: PUSH
6455: LD_VAR 0 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: LD_INT 21
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PPUSH
6478: CALL_OW 69
6482: PUSH
6483: LD_VAR 0 3
6487: LESSEQUAL
6488: IFFALSE 6555
// for i = 1 to vehCount do
6490: LD_ADDR_VAR 0 9
6494: PUSH
6495: DOUBLE
6496: LD_INT 1
6498: DEC
6499: ST_TO_ADDR
6500: LD_VAR 0 3
6504: PUSH
6505: FOR_TO
6506: IFFALSE 6553
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6508: LD_VAR 0 2
6512: PPUSH
6513: LD_VAR 0 7
6517: PPUSH
6518: LD_VAR 0 5
6522: PPUSH
6523: LD_VAR 0 6
6527: PPUSH
6528: LD_VAR 0 4
6532: PUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_VAR 0 4
6540: PPUSH
6541: CALL_OW 12
6545: ARRAY
6546: PPUSH
6547: CALL_OW 185
6551: GO 6505
6553: POP
6554: POP
// end ;
6555: LD_VAR 0 8
6559: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6560: LD_INT 0
6562: PPUSH
6563: PPUSH
6564: PPUSH
6565: PPUSH
6566: PPUSH
6567: PPUSH
6568: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6569: LD_ADDR_VAR 0 8
6573: PUSH
6574: LD_INT 22
6576: PUSH
6577: LD_VAR 0 1
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: PUSH
6586: LD_INT 21
6588: PUSH
6589: LD_INT 2
6591: PUSH
6592: EMPTY
6593: LIST
6594: LIST
6595: PUSH
6596: LD_INT 24
6598: PUSH
6599: LD_INT 650
6601: PUSH
6602: EMPTY
6603: LIST
6604: LIST
6605: PUSH
6606: EMPTY
6607: LIST
6608: LIST
6609: LIST
6610: PPUSH
6611: CALL_OW 69
6615: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6616: LD_INT 22
6618: PUSH
6619: LD_VAR 0 1
6623: PUSH
6624: EMPTY
6625: LIST
6626: LIST
6627: PUSH
6628: LD_INT 21
6630: PUSH
6631: LD_INT 2
6633: PUSH
6634: EMPTY
6635: LIST
6636: LIST
6637: PUSH
6638: LD_INT 24
6640: PUSH
6641: LD_INT 1000
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: PPUSH
6653: CALL_OW 69
6657: PUSH
6658: LD_INT 3
6660: PUSH
6661: LD_INT 4
6663: PUSH
6664: LD_INT 5
6666: PUSH
6667: EMPTY
6668: LIST
6669: LIST
6670: LIST
6671: PUSH
6672: LD_OWVAR 67
6676: ARRAY
6677: GREATEREQUAL
6678: IFFALSE 7135
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6687: LD_ADDR_VAR 0 8
6691: PUSH
6692: LD_INT 22
6694: PUSH
6695: LD_VAR 0 1
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: PUSH
6704: LD_INT 21
6706: PUSH
6707: LD_INT 2
6709: PUSH
6710: EMPTY
6711: LIST
6712: LIST
6713: PUSH
6714: LD_INT 24
6716: PUSH
6717: LD_INT 650
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6734: LD_INT 22
6736: PUSH
6737: LD_VAR 0 1
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PUSH
6746: LD_INT 95
6748: PUSH
6749: LD_VAR 0 2
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PUSH
6758: EMPTY
6759: LIST
6760: LIST
6761: PPUSH
6762: CALL_OW 69
6766: NOT
6767: PUSH
6768: LD_VAR 0 11
6772: PUSH
6773: LD_INT 0
6775: EQUAL
6776: AND
6777: IFFALSE 6832
// for i := 1 to wayX do
6779: LD_ADDR_VAR 0 6
6783: PUSH
6784: DOUBLE
6785: LD_INT 1
6787: DEC
6788: ST_TO_ADDR
6789: LD_VAR 0 3
6793: PUSH
6794: FOR_TO
6795: IFFALSE 6830
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6797: LD_VAR 0 8
6801: PPUSH
6802: LD_VAR 0 3
6806: PUSH
6807: LD_VAR 0 6
6811: ARRAY
6812: PPUSH
6813: LD_VAR 0 4
6817: PUSH
6818: LD_VAR 0 6
6822: ARRAY
6823: PPUSH
6824: CALL_OW 174
6828: GO 6794
6830: POP
6831: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6832: LD_INT 22
6834: PUSH
6835: LD_VAR 0 1
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: PUSH
6844: LD_INT 95
6846: PUSH
6847: LD_VAR 0 2
6851: PUSH
6852: EMPTY
6853: LIST
6854: LIST
6855: PUSH
6856: EMPTY
6857: LIST
6858: LIST
6859: PPUSH
6860: CALL_OW 69
6864: IFFALSE 7088
// begin seeEnemy = 1 ;
6866: LD_ADDR_VAR 0 11
6870: PUSH
6871: LD_INT 1
6873: ST_TO_ADDR
// for j in vehiclesOK do
6874: LD_ADDR_VAR 0 7
6878: PUSH
6879: LD_VAR 0 8
6883: PUSH
6884: FOR_IN
6885: IFFALSE 7086
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6887: LD_ADDR_VAR 0 9
6891: PUSH
6892: LD_INT 81
6894: PUSH
6895: LD_VAR 0 1
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 101
6906: PUSH
6907: LD_INT 1
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PPUSH
6918: CALL_OW 69
6922: PPUSH
6923: LD_VAR 0 7
6927: PPUSH
6928: CALL_OW 74
6932: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6933: LD_ADDR_VAR 0 10
6937: PUSH
6938: LD_INT 81
6940: PUSH
6941: LD_VAR 0 1
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 101
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: LD_INT 2
6962: PUSH
6963: LD_INT 59
6965: PUSH
6966: EMPTY
6967: LIST
6968: PUSH
6969: LD_INT 21
6971: PUSH
6972: LD_INT 1
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PUSH
6979: LD_INT 21
6981: PUSH
6982: LD_INT 2
6984: PUSH
6985: EMPTY
6986: LIST
6987: LIST
6988: PUSH
6989: EMPTY
6990: LIST
6991: LIST
6992: LIST
6993: LIST
6994: PUSH
6995: EMPTY
6996: LIST
6997: LIST
6998: LIST
6999: PUSH
7000: EMPTY
7001: LIST
7002: PPUSH
7003: CALL_OW 69
7007: PPUSH
7008: LD_VAR 0 7
7012: PPUSH
7013: CALL_OW 74
7017: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7018: LD_VAR 0 7
7022: PPUSH
7023: LD_VAR 0 9
7027: PPUSH
7028: CALL_OW 296
7032: PUSH
7033: LD_INT 8
7035: PLUS
7036: PUSH
7037: LD_VAR 0 7
7041: PPUSH
7042: LD_VAR 0 10
7046: PPUSH
7047: CALL_OW 296
7051: LESS
7052: IFFALSE 7070
// ComAttackUnit ( j , target1 ) else
7054: LD_VAR 0 7
7058: PPUSH
7059: LD_VAR 0 9
7063: PPUSH
7064: CALL_OW 115
7068: GO 7084
// ComAttackUnit ( j , target2 ) ;
7070: LD_VAR 0 7
7074: PPUSH
7075: LD_VAR 0 10
7079: PPUSH
7080: CALL_OW 115
// end ;
7084: GO 6884
7086: POP
7087: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7088: LD_INT 22
7090: PUSH
7091: LD_VAR 0 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 21
7102: PUSH
7103: LD_INT 2
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: PUSH
7110: LD_INT 24
7112: PUSH
7113: LD_INT 1000
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: PUSH
7120: EMPTY
7121: LIST
7122: LIST
7123: LIST
7124: PPUSH
7125: CALL_OW 69
7129: PUSH
7130: LD_INT 0
7132: EQUAL
7133: IFFALSE 6680
// seeEnemy = 0 ;
7135: LD_ADDR_VAR 0 11
7139: PUSH
7140: LD_INT 0
7142: ST_TO_ADDR
// end ;
7143: LD_VAR 0 5
7147: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
7152: PPUSH
7153: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7154: LD_ADDR_VAR 0 8
7158: PUSH
7159: LD_INT 22
7161: PUSH
7162: LD_VAR 0 1
7166: PUSH
7167: EMPTY
7168: LIST
7169: LIST
7170: PUSH
7171: LD_INT 21
7173: PUSH
7174: LD_INT 2
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 3
7183: PUSH
7184: LD_INT 24
7186: PUSH
7187: LD_INT 650
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: EMPTY
7199: LIST
7200: LIST
7201: LIST
7202: PPUSH
7203: CALL_OW 69
7207: ST_TO_ADDR
// if damageVehicles > 0 then
7208: LD_VAR 0 8
7212: PUSH
7213: LD_INT 0
7215: GREATER
7216: IFFALSE 7237
// ComMoveXY ( damageVehicles , repX , repY ) ;
7218: LD_VAR 0 8
7222: PPUSH
7223: LD_VAR 0 3
7227: PPUSH
7228: LD_VAR 0 4
7232: PPUSH
7233: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7237: LD_VAR 0 8
7241: PPUSH
7242: LD_INT 95
7244: PUSH
7245: LD_VAR 0 2
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PUSH
7254: LD_INT 3
7256: PUSH
7257: LD_INT 58
7259: PUSH
7260: EMPTY
7261: LIST
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 72
7275: PUSH
7276: LD_INT 0
7278: GREATER
7279: IFFALSE 7346
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7281: LD_ADDR_VAR 0 6
7285: PUSH
7286: LD_VAR 0 8
7290: PPUSH
7291: LD_INT 95
7293: PUSH
7294: LD_VAR 0 2
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PUSH
7303: LD_INT 3
7305: PUSH
7306: LD_INT 58
7308: PUSH
7309: EMPTY
7310: LIST
7311: PUSH
7312: EMPTY
7313: LIST
7314: LIST
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: PPUSH
7320: CALL_OW 72
7324: PUSH
7325: FOR_IN
7326: IFFALSE 7344
// ComExitVehicle ( UnitsInside ( i ) ) ;
7328: LD_VAR 0 6
7332: PPUSH
7333: CALL_OW 313
7337: PPUSH
7338: CALL_OW 121
7342: GO 7325
7344: POP
7345: POP
// end ;
7346: LD_VAR 0 5
7350: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7351: LD_INT 0
7353: PPUSH
7354: PPUSH
7355: PPUSH
7356: PPUSH
7357: PPUSH
7358: PPUSH
7359: PPUSH
7360: PPUSH
7361: PPUSH
7362: PPUSH
7363: PPUSH
// for i = 1 to medicCount do
7364: LD_ADDR_VAR 0 14
7368: PUSH
7369: DOUBLE
7370: LD_INT 1
7372: DEC
7373: ST_TO_ADDR
7374: LD_VAR 0 7
7378: PUSH
7379: FOR_TO
7380: IFFALSE 7462
// begin uc_side = side ;
7382: LD_ADDR_OWVAR 20
7386: PUSH
7387: LD_VAR 0 1
7391: ST_TO_ADDR
// uc_nation = nation ;
7392: LD_ADDR_OWVAR 21
7396: PUSH
7397: LD_VAR 0 2
7401: ST_TO_ADDR
// hc_name =  ;
7402: LD_ADDR_OWVAR 26
7406: PUSH
7407: LD_STRING 
7409: ST_TO_ADDR
// hc_gallery =  ;
7410: LD_ADDR_OWVAR 33
7414: PUSH
7415: LD_STRING 
7417: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7418: LD_INT 0
7420: PPUSH
7421: LD_INT 4
7423: PPUSH
7424: LD_VAR 0 8
7428: PPUSH
7429: CALL_OW 380
// un = CreateHuman ;
7433: LD_ADDR_VAR 0 16
7437: PUSH
7438: CALL_OW 44
7442: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7443: LD_VAR 0 16
7447: PPUSH
7448: LD_VAR 0 9
7452: PPUSH
7453: LD_INT 0
7455: PPUSH
7456: CALL_OW 49
// end ;
7460: GO 7379
7462: POP
7463: POP
// for i = 1 to soldierCount do
7464: LD_ADDR_VAR 0 14
7468: PUSH
7469: DOUBLE
7470: LD_INT 1
7472: DEC
7473: ST_TO_ADDR
7474: LD_VAR 0 3
7478: PUSH
7479: FOR_TO
7480: IFFALSE 7562
// begin uc_side = side ;
7482: LD_ADDR_OWVAR 20
7486: PUSH
7487: LD_VAR 0 1
7491: ST_TO_ADDR
// uc_nation = nation ;
7492: LD_ADDR_OWVAR 21
7496: PUSH
7497: LD_VAR 0 2
7501: ST_TO_ADDR
// hc_name =  ;
7502: LD_ADDR_OWVAR 26
7506: PUSH
7507: LD_STRING 
7509: ST_TO_ADDR
// hc_gallery =  ;
7510: LD_ADDR_OWVAR 33
7514: PUSH
7515: LD_STRING 
7517: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7518: LD_INT 0
7520: PPUSH
7521: LD_INT 1
7523: PPUSH
7524: LD_VAR 0 8
7528: PPUSH
7529: CALL_OW 380
// un = CreateHuman ;
7533: LD_ADDR_VAR 0 16
7537: PUSH
7538: CALL_OW 44
7542: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7543: LD_VAR 0 16
7547: PPUSH
7548: LD_VAR 0 9
7552: PPUSH
7553: LD_INT 0
7555: PPUSH
7556: CALL_OW 49
// end ;
7560: GO 7479
7562: POP
7563: POP
// for i = 1 to sniperCount do
7564: LD_ADDR_VAR 0 14
7568: PUSH
7569: DOUBLE
7570: LD_INT 1
7572: DEC
7573: ST_TO_ADDR
7574: LD_VAR 0 4
7578: PUSH
7579: FOR_TO
7580: IFFALSE 7662
// begin uc_side = side ;
7582: LD_ADDR_OWVAR 20
7586: PUSH
7587: LD_VAR 0 1
7591: ST_TO_ADDR
// uc_nation = nation ;
7592: LD_ADDR_OWVAR 21
7596: PUSH
7597: LD_VAR 0 2
7601: ST_TO_ADDR
// hc_name =  ;
7602: LD_ADDR_OWVAR 26
7606: PUSH
7607: LD_STRING 
7609: ST_TO_ADDR
// hc_gallery =  ;
7610: LD_ADDR_OWVAR 33
7614: PUSH
7615: LD_STRING 
7617: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7618: LD_INT 0
7620: PPUSH
7621: LD_INT 5
7623: PPUSH
7624: LD_VAR 0 8
7628: PPUSH
7629: CALL_OW 380
// un = CreateHuman ;
7633: LD_ADDR_VAR 0 16
7637: PUSH
7638: CALL_OW 44
7642: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7643: LD_VAR 0 16
7647: PPUSH
7648: LD_VAR 0 9
7652: PPUSH
7653: LD_INT 0
7655: PPUSH
7656: CALL_OW 49
// end ;
7660: GO 7579
7662: POP
7663: POP
// for i = 1 to bazookCount do
7664: LD_ADDR_VAR 0 14
7668: PUSH
7669: DOUBLE
7670: LD_INT 1
7672: DEC
7673: ST_TO_ADDR
7674: LD_VAR 0 5
7678: PUSH
7679: FOR_TO
7680: IFFALSE 7762
// begin uc_side = side ;
7682: LD_ADDR_OWVAR 20
7686: PUSH
7687: LD_VAR 0 1
7691: ST_TO_ADDR
// uc_nation = nation ;
7692: LD_ADDR_OWVAR 21
7696: PUSH
7697: LD_VAR 0 2
7701: ST_TO_ADDR
// hc_name =  ;
7702: LD_ADDR_OWVAR 26
7706: PUSH
7707: LD_STRING 
7709: ST_TO_ADDR
// hc_gallery =  ;
7710: LD_ADDR_OWVAR 33
7714: PUSH
7715: LD_STRING 
7717: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7718: LD_INT 0
7720: PPUSH
7721: LD_INT 9
7723: PPUSH
7724: LD_VAR 0 8
7728: PPUSH
7729: CALL_OW 380
// un = CreateHuman ;
7733: LD_ADDR_VAR 0 16
7737: PUSH
7738: CALL_OW 44
7742: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7743: LD_VAR 0 16
7747: PPUSH
7748: LD_VAR 0 9
7752: PPUSH
7753: LD_INT 0
7755: PPUSH
7756: CALL_OW 49
// end ;
7760: GO 7679
7762: POP
7763: POP
// for i = 1 to mortalCount do
7764: LD_ADDR_VAR 0 14
7768: PUSH
7769: DOUBLE
7770: LD_INT 1
7772: DEC
7773: ST_TO_ADDR
7774: LD_VAR 0 6
7778: PUSH
7779: FOR_TO
7780: IFFALSE 7862
// begin uc_side = side ;
7782: LD_ADDR_OWVAR 20
7786: PUSH
7787: LD_VAR 0 1
7791: ST_TO_ADDR
// uc_nation = nation ;
7792: LD_ADDR_OWVAR 21
7796: PUSH
7797: LD_VAR 0 2
7801: ST_TO_ADDR
// hc_name =  ;
7802: LD_ADDR_OWVAR 26
7806: PUSH
7807: LD_STRING 
7809: ST_TO_ADDR
// hc_gallery =  ;
7810: LD_ADDR_OWVAR 33
7814: PUSH
7815: LD_STRING 
7817: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7818: LD_INT 0
7820: PPUSH
7821: LD_INT 8
7823: PPUSH
7824: LD_VAR 0 8
7828: PPUSH
7829: CALL_OW 380
// un = CreateHuman ;
7833: LD_ADDR_VAR 0 16
7837: PUSH
7838: CALL_OW 44
7842: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7843: LD_VAR 0 16
7847: PPUSH
7848: LD_VAR 0 9
7852: PPUSH
7853: LD_INT 0
7855: PPUSH
7856: CALL_OW 49
// end ;
7860: GO 7779
7862: POP
7863: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7864: LD_ADDR_VAR 0 19
7868: PUSH
7869: LD_INT 22
7871: PUSH
7872: LD_VAR 0 1
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: LD_INT 25
7886: PUSH
7887: LD_INT 1
7889: PUSH
7890: EMPTY
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 25
7896: PUSH
7897: LD_INT 5
7899: PUSH
7900: EMPTY
7901: LIST
7902: LIST
7903: PUSH
7904: LD_INT 25
7906: PUSH
7907: LD_INT 8
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: PUSH
7914: LD_INT 25
7916: PUSH
7917: LD_INT 9
7919: PUSH
7920: EMPTY
7921: LIST
7922: LIST
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: LIST
7928: LIST
7929: LIST
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: PPUSH
7935: CALL_OW 69
7939: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7940: LD_ADDR_VAR 0 18
7944: PUSH
7945: LD_INT 22
7947: PUSH
7948: LD_VAR 0 1
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 25
7959: PUSH
7960: LD_INT 4
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 69
7975: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7976: LD_VAR 0 18
7980: PPUSH
7981: LD_VAR 0 10
7985: PPUSH
7986: CALL_OW 113
// if strategy = 1 then
7990: LD_VAR 0 12
7994: PUSH
7995: LD_INT 1
7997: EQUAL
7998: IFFALSE 8514
// begin repeat wait ( 0 0$3 ) ;
8000: LD_INT 105
8002: PPUSH
8003: CALL_OW 67
// for i in soldiersOK_list do
8007: LD_ADDR_VAR 0 14
8011: PUSH
8012: LD_VAR 0 19
8016: PUSH
8017: FOR_IN
8018: IFFALSE 8082
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8020: LD_VAR 0 14
8024: PPUSH
8025: LD_INT 91
8027: PPUSH
8028: LD_INT 63
8030: PPUSH
8031: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8035: LD_VAR 0 14
8039: PPUSH
8040: LD_INT 101
8042: PPUSH
8043: LD_INT 53
8045: PPUSH
8046: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8050: LD_VAR 0 14
8054: PPUSH
8055: LD_INT 75
8057: PPUSH
8058: LD_INT 23
8060: PPUSH
8061: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8065: LD_VAR 0 14
8069: PPUSH
8070: LD_INT 78
8072: PPUSH
8073: LD_INT 8
8075: PPUSH
8076: CALL_OW 174
// end ;
8080: GO 8017
8082: POP
8083: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8084: LD_INT 15
8086: PPUSH
8087: LD_INT 22
8089: PUSH
8090: LD_VAR 0 1
8094: PUSH
8095: EMPTY
8096: LIST
8097: LIST
8098: PPUSH
8099: CALL_OW 70
8103: PUSH
8104: LD_INT 2
8106: GREATER
8107: IFFALSE 8000
// repeat wait ( 0 0$1 ) ;
8109: LD_INT 35
8111: PPUSH
8112: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8116: LD_ADDR_VAR 0 17
8120: PUSH
8121: LD_INT 22
8123: PUSH
8124: LD_VAR 0 1
8128: PUSH
8129: EMPTY
8130: LIST
8131: LIST
8132: PUSH
8133: LD_INT 1
8135: PUSH
8136: LD_INT 3
8138: PUSH
8139: LD_INT 24
8141: PUSH
8142: LD_INT 550
8144: PUSH
8145: EMPTY
8146: LIST
8147: LIST
8148: PUSH
8149: EMPTY
8150: LIST
8151: LIST
8152: PUSH
8153: LD_INT 24
8155: PUSH
8156: LD_INT 250
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: LIST
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 69
8176: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8177: LD_ADDR_VAR 0 19
8181: PUSH
8182: LD_INT 22
8184: PUSH
8185: LD_VAR 0 1
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: PUSH
8194: LD_INT 2
8196: PUSH
8197: LD_INT 25
8199: PUSH
8200: LD_INT 1
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 25
8209: PUSH
8210: LD_INT 5
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: LD_INT 25
8219: PUSH
8220: LD_INT 8
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 9
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: LIST
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 24
8246: PUSH
8247: LD_INT 1000
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 69
8263: ST_TO_ADDR
// if medicCount > 0 then
8264: LD_VAR 0 7
8268: PUSH
8269: LD_INT 0
8271: GREATER
8272: IFFALSE 8316
// begin if damageUnit_list > 0 then
8274: LD_VAR 0 17
8278: PUSH
8279: LD_INT 0
8281: GREATER
8282: IFFALSE 8316
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8284: LD_VAR 0 17
8288: PPUSH
8289: LD_VAR 0 10
8293: PPUSH
8294: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8298: LD_VAR 0 7
8302: PPUSH
8303: LD_VAR 0 17
8307: PUSH
8308: LD_INT 1
8310: ARRAY
8311: PPUSH
8312: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8316: LD_ADDR_VAR 0 14
8320: PUSH
8321: LD_VAR 0 19
8325: PUSH
8326: FOR_IN
8327: IFFALSE 8503
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8329: LD_ADDR_VAR 0 22
8333: PUSH
8334: LD_INT 22
8336: PUSH
8337: LD_VAR 0 11
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PPUSH
8346: CALL_OW 69
8350: PPUSH
8351: LD_VAR 0 14
8355: PPUSH
8356: CALL_OW 74
8360: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8361: LD_ADDR_VAR 0 23
8365: PUSH
8366: LD_INT 22
8368: PUSH
8369: LD_VAR 0 11
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 2
8380: PUSH
8381: LD_INT 59
8383: PUSH
8384: EMPTY
8385: LIST
8386: PUSH
8387: LD_INT 21
8389: PUSH
8390: LD_INT 1
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 21
8399: PUSH
8400: LD_INT 2
8402: PUSH
8403: EMPTY
8404: LIST
8405: LIST
8406: PUSH
8407: EMPTY
8408: LIST
8409: LIST
8410: LIST
8411: LIST
8412: PUSH
8413: EMPTY
8414: LIST
8415: LIST
8416: PUSH
8417: EMPTY
8418: LIST
8419: PPUSH
8420: CALL_OW 69
8424: PPUSH
8425: LD_VAR 0 14
8429: PPUSH
8430: CALL_OW 74
8434: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8435: LD_VAR 0 14
8439: PPUSH
8440: LD_VAR 0 22
8444: PPUSH
8445: CALL_OW 296
8449: PUSH
8450: LD_INT 8
8452: PLUS
8453: PUSH
8454: LD_VAR 0 14
8458: PPUSH
8459: LD_VAR 0 23
8463: PPUSH
8464: CALL_OW 296
8468: LESS
8469: IFFALSE 8487
// begin ComAttackUnit ( i , target1 ) ;
8471: LD_VAR 0 14
8475: PPUSH
8476: LD_VAR 0 22
8480: PPUSH
8481: CALL_OW 115
// end else
8485: GO 8501
// begin ComAttackUnit ( i , target2 ) ;
8487: LD_VAR 0 14
8491: PPUSH
8492: LD_VAR 0 23
8496: PPUSH
8497: CALL_OW 115
// end ; end ;
8501: GO 8326
8503: POP
8504: POP
// until soldiersOK_list = [ ] ;
8505: LD_VAR 0 19
8509: PUSH
8510: EMPTY
8511: EQUAL
8512: IFFALSE 8109
// end ; if strategy = 2 then
8514: LD_VAR 0 12
8518: PUSH
8519: LD_INT 2
8521: EQUAL
8522: IFFALSE 9008
// begin repeat wait ( 0 0$1 ) ;
8524: LD_INT 35
8526: PPUSH
8527: CALL_OW 67
// for i in soldiersOK_list do
8531: LD_ADDR_VAR 0 14
8535: PUSH
8536: LD_VAR 0 19
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8576
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8544: LD_VAR 0 14
8548: PPUSH
8549: LD_INT 91
8551: PPUSH
8552: LD_INT 63
8554: PPUSH
8555: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8559: LD_VAR 0 14
8563: PPUSH
8564: LD_INT 75
8566: PPUSH
8567: LD_INT 33
8569: PPUSH
8570: CALL_OW 174
// end ;
8574: GO 8541
8576: POP
8577: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8578: LD_INT 16
8580: PPUSH
8581: LD_INT 22
8583: PUSH
8584: LD_VAR 0 1
8588: PUSH
8589: EMPTY
8590: LIST
8591: LIST
8592: PPUSH
8593: CALL_OW 70
8597: PUSH
8598: LD_INT 2
8600: GREATER
8601: IFFALSE 8524
// repeat wait ( 0 0$3 ) ;
8603: LD_INT 105
8605: PPUSH
8606: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8610: LD_ADDR_VAR 0 17
8614: PUSH
8615: LD_INT 22
8617: PUSH
8618: LD_VAR 0 1
8622: PUSH
8623: EMPTY
8624: LIST
8625: LIST
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: LD_INT 3
8632: PUSH
8633: LD_INT 24
8635: PUSH
8636: LD_INT 550
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: PUSH
8643: EMPTY
8644: LIST
8645: LIST
8646: PUSH
8647: LD_INT 24
8649: PUSH
8650: LD_INT 250
8652: PUSH
8653: EMPTY
8654: LIST
8655: LIST
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: LIST
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: PPUSH
8666: CALL_OW 69
8670: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8671: LD_ADDR_VAR 0 19
8675: PUSH
8676: LD_INT 22
8678: PUSH
8679: LD_VAR 0 1
8683: PUSH
8684: EMPTY
8685: LIST
8686: LIST
8687: PUSH
8688: LD_INT 2
8690: PUSH
8691: LD_INT 25
8693: PUSH
8694: LD_INT 1
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 25
8703: PUSH
8704: LD_INT 5
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: LD_INT 25
8713: PUSH
8714: LD_INT 8
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 25
8723: PUSH
8724: LD_INT 9
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: PUSH
8738: LD_INT 24
8740: PUSH
8741: LD_INT 1000
8743: PUSH
8744: EMPTY
8745: LIST
8746: LIST
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 69
8757: ST_TO_ADDR
// if medicCount > 0 then
8758: LD_VAR 0 7
8762: PUSH
8763: LD_INT 0
8765: GREATER
8766: IFFALSE 8810
// begin if damageUnit_list > 0 then
8768: LD_VAR 0 17
8772: PUSH
8773: LD_INT 0
8775: GREATER
8776: IFFALSE 8810
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8778: LD_VAR 0 17
8782: PPUSH
8783: LD_VAR 0 10
8787: PPUSH
8788: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8792: LD_VAR 0 7
8796: PPUSH
8797: LD_VAR 0 17
8801: PUSH
8802: LD_INT 1
8804: ARRAY
8805: PPUSH
8806: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8810: LD_ADDR_VAR 0 14
8814: PUSH
8815: LD_VAR 0 19
8819: PUSH
8820: FOR_IN
8821: IFFALSE 8997
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8823: LD_ADDR_VAR 0 22
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_VAR 0 11
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PPUSH
8840: CALL_OW 69
8844: PPUSH
8845: LD_VAR 0 14
8849: PPUSH
8850: CALL_OW 74
8854: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8855: LD_ADDR_VAR 0 23
8859: PUSH
8860: LD_INT 22
8862: PUSH
8863: LD_VAR 0 11
8867: PUSH
8868: EMPTY
8869: LIST
8870: LIST
8871: PUSH
8872: LD_INT 2
8874: PUSH
8875: LD_INT 59
8877: PUSH
8878: EMPTY
8879: LIST
8880: PUSH
8881: LD_INT 21
8883: PUSH
8884: LD_INT 1
8886: PUSH
8887: EMPTY
8888: LIST
8889: LIST
8890: PUSH
8891: LD_INT 21
8893: PUSH
8894: LD_INT 2
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PUSH
8911: EMPTY
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PPUSH
8919: LD_VAR 0 14
8923: PPUSH
8924: CALL_OW 74
8928: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8929: LD_VAR 0 14
8933: PPUSH
8934: LD_VAR 0 22
8938: PPUSH
8939: CALL_OW 296
8943: PUSH
8944: LD_INT 8
8946: PLUS
8947: PUSH
8948: LD_VAR 0 14
8952: PPUSH
8953: LD_VAR 0 23
8957: PPUSH
8958: CALL_OW 296
8962: LESS
8963: IFFALSE 8981
// begin ComAttackUnit ( i , target1 ) ;
8965: LD_VAR 0 14
8969: PPUSH
8970: LD_VAR 0 22
8974: PPUSH
8975: CALL_OW 115
// end else
8979: GO 8995
// begin ComAttackUnit ( i , target2 ) ;
8981: LD_VAR 0 14
8985: PPUSH
8986: LD_VAR 0 23
8990: PPUSH
8991: CALL_OW 115
// end ; end ;
8995: GO 8820
8997: POP
8998: POP
// until soldiersOK_list = [ ] ;
8999: LD_VAR 0 19
9003: PUSH
9004: EMPTY
9005: EQUAL
9006: IFFALSE 8603
// end ; end ;
9008: LD_VAR 0 13
9012: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9013: LD_INT 0
9015: PPUSH
9016: PPUSH
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
// amChassisTab = [ ] ;
9026: LD_ADDR_VAR 0 19
9030: PUSH
9031: EMPTY
9032: ST_TO_ADDR
// arChassisTab = [ ] ;
9033: LD_ADDR_VAR 0 18
9037: PUSH
9038: EMPTY
9039: ST_TO_ADDR
// ruChassisTab = [ ] ;
9040: LD_ADDR_VAR 0 17
9044: PUSH
9045: EMPTY
9046: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9047: LD_INT 35
9049: PPUSH
9050: CALL_OW 67
// if nation = 1 then
9054: LD_VAR 0 5
9058: PUSH
9059: LD_INT 1
9061: EQUAL
9062: IFFALSE 9553
// begin uc_side = side ;
9064: LD_ADDR_OWVAR 20
9068: PUSH
9069: LD_VAR 0 2
9073: ST_TO_ADDR
// uc_nation = nation ;
9074: LD_ADDR_OWVAR 21
9078: PUSH
9079: LD_VAR 0 5
9083: ST_TO_ADDR
// vc_engine = vehengine ;
9084: LD_ADDR_OWVAR 39
9088: PUSH
9089: LD_VAR 0 6
9093: ST_TO_ADDR
// vc_control = vehcontrol ;
9094: LD_ADDR_OWVAR 38
9098: PUSH
9099: LD_VAR 0 7
9103: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9104: LD_ADDR_OWVAR 40
9108: PUSH
9109: LD_VAR 0 10
9113: PUSH
9114: LD_INT 1
9116: PPUSH
9117: LD_VAR 0 10
9121: PPUSH
9122: CALL_OW 12
9126: ARRAY
9127: ST_TO_ADDR
// for j = 1 to AMWeapon do
9128: LD_ADDR_VAR 0 14
9132: PUSH
9133: DOUBLE
9134: LD_INT 1
9136: DEC
9137: ST_TO_ADDR
9138: LD_VAR 0 10
9142: PUSH
9143: FOR_TO
9144: IFFALSE 9445
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9146: LD_VAR 0 10
9150: PUSH
9151: LD_VAR 0 14
9155: ARRAY
9156: PUSH
9157: LD_INT 2
9159: EQUAL
9160: PUSH
9161: LD_VAR 0 10
9165: PUSH
9166: LD_VAR 0 14
9170: ARRAY
9171: PUSH
9172: LD_INT 3
9174: EQUAL
9175: OR
9176: IFFALSE 9229
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9178: LD_ADDR_VAR 0 19
9182: PUSH
9183: LD_INT 1
9185: PUSH
9186: LD_INT 2
9188: PUSH
9189: LD_INT 3
9191: PUSH
9192: LD_INT 4
9194: PUSH
9195: LD_INT 5
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9205: LD_ADDR_OWVAR 37
9209: PUSH
9210: LD_VAR 0 19
9214: PUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_VAR 0 19
9222: PPUSH
9223: CALL_OW 12
9227: ARRAY
9228: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9229: LD_VAR 0 10
9233: PUSH
9234: LD_VAR 0 14
9238: ARRAY
9239: PUSH
9240: LD_INT 4
9242: EQUAL
9243: PUSH
9244: LD_VAR 0 10
9248: PUSH
9249: LD_VAR 0 14
9253: ARRAY
9254: PUSH
9255: LD_INT 5
9257: EQUAL
9258: OR
9259: PUSH
9260: LD_VAR 0 10
9264: PUSH
9265: LD_VAR 0 14
9269: ARRAY
9270: PUSH
9271: LD_INT 9
9273: EQUAL
9274: OR
9275: PUSH
9276: LD_VAR 0 10
9280: PUSH
9281: LD_VAR 0 14
9285: ARRAY
9286: PUSH
9287: LD_INT 11
9289: EQUAL
9290: OR
9291: PUSH
9292: LD_VAR 0 10
9296: PUSH
9297: LD_VAR 0 14
9301: ARRAY
9302: PUSH
9303: LD_INT 7
9305: EQUAL
9306: OR
9307: IFFALSE 9356
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9309: LD_ADDR_VAR 0 19
9313: PUSH
9314: LD_INT 2
9316: PUSH
9317: LD_INT 3
9319: PUSH
9320: LD_INT 4
9322: PUSH
9323: LD_INT 5
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9332: LD_ADDR_OWVAR 37
9336: PUSH
9337: LD_VAR 0 19
9341: PUSH
9342: LD_INT 1
9344: PPUSH
9345: LD_VAR 0 19
9349: PPUSH
9350: CALL_OW 12
9354: ARRAY
9355: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9356: LD_VAR 0 10
9360: PUSH
9361: LD_VAR 0 14
9365: ARRAY
9366: PUSH
9367: LD_INT 8
9369: EQUAL
9370: PUSH
9371: LD_VAR 0 10
9375: PUSH
9376: LD_VAR 0 14
9380: ARRAY
9381: PUSH
9382: LD_INT 6
9384: EQUAL
9385: OR
9386: PUSH
9387: LD_VAR 0 10
9391: PUSH
9392: LD_VAR 0 14
9396: ARRAY
9397: PUSH
9398: LD_INT 10
9400: EQUAL
9401: OR
9402: IFFALSE 9443
// begin amChassisTab = [ 4 , 5 ] ;
9404: LD_ADDR_VAR 0 19
9408: PUSH
9409: LD_INT 4
9411: PUSH
9412: LD_INT 5
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9419: LD_ADDR_OWVAR 37
9423: PUSH
9424: LD_VAR 0 19
9428: PUSH
9429: LD_INT 1
9431: PPUSH
9432: LD_VAR 0 19
9436: PPUSH
9437: CALL_OW 12
9441: ARRAY
9442: ST_TO_ADDR
// end ; end ;
9443: GO 9143
9445: POP
9446: POP
// veh = CreateVehicle ;
9447: LD_ADDR_VAR 0 16
9451: PUSH
9452: CALL_OW 45
9456: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9457: LD_VAR 0 16
9461: PPUSH
9462: LD_VAR 0 1
9466: PPUSH
9467: LD_INT 0
9469: PPUSH
9470: CALL_OW 49
// if vehControl = 1 then
9474: LD_VAR 0 7
9478: PUSH
9479: LD_INT 1
9481: EQUAL
9482: IFFALSE 9539
// begin hc_gallery =  ;
9484: LD_ADDR_OWVAR 33
9488: PUSH
9489: LD_STRING 
9491: ST_TO_ADDR
// hc_name =  ;
9492: LD_ADDR_OWVAR 26
9496: PUSH
9497: LD_STRING 
9499: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9500: LD_INT 0
9502: PPUSH
9503: LD_INT 3
9505: PPUSH
9506: LD_VAR 0 4
9510: PPUSH
9511: CALL_OW 380
// un = CreateHuman ;
9515: LD_ADDR_VAR 0 15
9519: PUSH
9520: CALL_OW 44
9524: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9525: LD_VAR 0 15
9529: PPUSH
9530: LD_VAR 0 16
9534: PPUSH
9535: CALL_OW 52
// end ; i = i + 1 ;
9539: LD_ADDR_VAR 0 13
9543: PUSH
9544: LD_VAR 0 13
9548: PUSH
9549: LD_INT 1
9551: PLUS
9552: ST_TO_ADDR
// end ; if nation = 2 then
9553: LD_VAR 0 5
9557: PUSH
9558: LD_INT 2
9560: EQUAL
9561: IFFALSE 9985
// begin uc_side = side ;
9563: LD_ADDR_OWVAR 20
9567: PUSH
9568: LD_VAR 0 2
9572: ST_TO_ADDR
// uc_nation = nation ;
9573: LD_ADDR_OWVAR 21
9577: PUSH
9578: LD_VAR 0 5
9582: ST_TO_ADDR
// vc_engine = vehengine ;
9583: LD_ADDR_OWVAR 39
9587: PUSH
9588: LD_VAR 0 6
9592: ST_TO_ADDR
// vc_control = vehcontrol ;
9593: LD_ADDR_OWVAR 38
9597: PUSH
9598: LD_VAR 0 7
9602: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9603: LD_ADDR_OWVAR 40
9607: PUSH
9608: LD_VAR 0 9
9612: PUSH
9613: LD_INT 1
9615: PPUSH
9616: LD_VAR 0 9
9620: PPUSH
9621: CALL_OW 12
9625: ARRAY
9626: ST_TO_ADDR
// for j = 1 to ARWeapons do
9627: LD_ADDR_VAR 0 14
9631: PUSH
9632: DOUBLE
9633: LD_INT 1
9635: DEC
9636: ST_TO_ADDR
9637: LD_VAR 0 9
9641: PUSH
9642: FOR_TO
9643: IFFALSE 9877
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9645: LD_VAR 0 9
9649: PUSH
9650: LD_VAR 0 14
9654: ARRAY
9655: PUSH
9656: LD_INT 24
9658: EQUAL
9659: PUSH
9660: LD_VAR 0 9
9664: PUSH
9665: LD_VAR 0 14
9669: ARRAY
9670: PUSH
9671: LD_INT 22
9673: EQUAL
9674: OR
9675: PUSH
9676: LD_VAR 0 9
9680: PUSH
9681: LD_VAR 0 14
9685: ARRAY
9686: PUSH
9687: LD_INT 23
9689: EQUAL
9690: OR
9691: PUSH
9692: LD_VAR 0 9
9696: PUSH
9697: LD_VAR 0 14
9701: ARRAY
9702: PUSH
9703: LD_INT 30
9705: EQUAL
9706: OR
9707: IFFALSE 9756
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9709: LD_ADDR_VAR 0 18
9713: PUSH
9714: LD_INT 11
9716: PUSH
9717: LD_INT 12
9719: PUSH
9720: LD_INT 13
9722: PUSH
9723: LD_INT 14
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9732: LD_ADDR_OWVAR 37
9736: PUSH
9737: LD_VAR 0 18
9741: PUSH
9742: LD_INT 1
9744: PPUSH
9745: LD_VAR 0 18
9749: PPUSH
9750: CALL_OW 12
9754: ARRAY
9755: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9756: LD_VAR 0 9
9760: PUSH
9761: LD_VAR 0 14
9765: ARRAY
9766: PUSH
9767: LD_INT 29
9769: EQUAL
9770: PUSH
9771: LD_VAR 0 9
9775: PUSH
9776: LD_VAR 0 14
9780: ARRAY
9781: PUSH
9782: LD_INT 28
9784: EQUAL
9785: OR
9786: PUSH
9787: LD_VAR 0 9
9791: PUSH
9792: LD_VAR 0 14
9796: ARRAY
9797: PUSH
9798: LD_INT 27
9800: EQUAL
9801: OR
9802: PUSH
9803: LD_VAR 0 9
9807: PUSH
9808: LD_VAR 0 14
9812: ARRAY
9813: PUSH
9814: LD_INT 26
9816: EQUAL
9817: OR
9818: PUSH
9819: LD_VAR 0 9
9823: PUSH
9824: LD_VAR 0 14
9828: ARRAY
9829: PUSH
9830: LD_INT 25
9832: EQUAL
9833: OR
9834: IFFALSE 9875
// begin arChassisTab = [ 13 , 14 ] ;
9836: LD_ADDR_VAR 0 18
9840: PUSH
9841: LD_INT 13
9843: PUSH
9844: LD_INT 14
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9851: LD_ADDR_OWVAR 37
9855: PUSH
9856: LD_VAR 0 18
9860: PUSH
9861: LD_INT 1
9863: PPUSH
9864: LD_VAR 0 18
9868: PPUSH
9869: CALL_OW 12
9873: ARRAY
9874: ST_TO_ADDR
// end ; end ;
9875: GO 9642
9877: POP
9878: POP
// veh = CreateVehicle ;
9879: LD_ADDR_VAR 0 16
9883: PUSH
9884: CALL_OW 45
9888: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9889: LD_VAR 0 16
9893: PPUSH
9894: LD_VAR 0 1
9898: PPUSH
9899: LD_INT 0
9901: PPUSH
9902: CALL_OW 49
// if vehcontrol = 1 then
9906: LD_VAR 0 7
9910: PUSH
9911: LD_INT 1
9913: EQUAL
9914: IFFALSE 9971
// begin hc_gallery =  ;
9916: LD_ADDR_OWVAR 33
9920: PUSH
9921: LD_STRING 
9923: ST_TO_ADDR
// hc_name =  ;
9924: LD_ADDR_OWVAR 26
9928: PUSH
9929: LD_STRING 
9931: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9932: LD_INT 0
9934: PPUSH
9935: LD_INT 3
9937: PPUSH
9938: LD_VAR 0 4
9942: PPUSH
9943: CALL_OW 380
// un = CreateHuman ;
9947: LD_ADDR_VAR 0 15
9951: PUSH
9952: CALL_OW 44
9956: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9957: LD_VAR 0 15
9961: PPUSH
9962: LD_VAR 0 16
9966: PPUSH
9967: CALL_OW 52
// end ; i = i + 1 ;
9971: LD_ADDR_VAR 0 13
9975: PUSH
9976: LD_VAR 0 13
9980: PUSH
9981: LD_INT 1
9983: PLUS
9984: ST_TO_ADDR
// end ; if nation = 3 then
9985: LD_VAR 0 5
9989: PUSH
9990: LD_INT 3
9992: EQUAL
9993: IFFALSE 10385
// begin uc_side = side ;
9995: LD_ADDR_OWVAR 20
9999: PUSH
10000: LD_VAR 0 2
10004: ST_TO_ADDR
// uc_nation = nation ;
10005: LD_ADDR_OWVAR 21
10009: PUSH
10010: LD_VAR 0 5
10014: ST_TO_ADDR
// vc_engine = vehengine ;
10015: LD_ADDR_OWVAR 39
10019: PUSH
10020: LD_VAR 0 6
10024: ST_TO_ADDR
// vc_control = vehcontrol ;
10025: LD_ADDR_OWVAR 38
10029: PUSH
10030: LD_VAR 0 7
10034: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10035: LD_ADDR_OWVAR 40
10039: PUSH
10040: LD_VAR 0 8
10044: PUSH
10045: LD_INT 1
10047: PPUSH
10048: LD_VAR 0 8
10052: PPUSH
10053: CALL_OW 12
10057: ARRAY
10058: ST_TO_ADDR
// for j = 1 to RuWeapons do
10059: LD_ADDR_VAR 0 14
10063: PUSH
10064: DOUBLE
10065: LD_INT 1
10067: DEC
10068: ST_TO_ADDR
10069: LD_VAR 0 8
10073: PUSH
10074: FOR_TO
10075: IFFALSE 10277
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10077: LD_VAR 0 8
10081: PUSH
10082: LD_VAR 0 14
10086: ARRAY
10087: PUSH
10088: LD_INT 42
10090: EQUAL
10091: PUSH
10092: LD_VAR 0 8
10096: PUSH
10097: LD_VAR 0 14
10101: ARRAY
10102: PUSH
10103: LD_INT 43
10105: EQUAL
10106: OR
10107: PUSH
10108: LD_VAR 0 8
10112: PUSH
10113: LD_VAR 0 14
10117: ARRAY
10118: PUSH
10119: LD_INT 44
10121: EQUAL
10122: OR
10123: PUSH
10124: LD_VAR 0 8
10128: PUSH
10129: LD_VAR 0 14
10133: ARRAY
10134: PUSH
10135: LD_INT 45
10137: EQUAL
10138: OR
10139: PUSH
10140: LD_VAR 0 8
10144: PUSH
10145: LD_VAR 0 14
10149: ARRAY
10150: PUSH
10151: LD_INT 49
10153: EQUAL
10154: OR
10155: IFFALSE 10204
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10157: LD_ADDR_VAR 0 17
10161: PUSH
10162: LD_INT 21
10164: PUSH
10165: LD_INT 22
10167: PUSH
10168: LD_INT 23
10170: PUSH
10171: LD_INT 24
10173: PUSH
10174: EMPTY
10175: LIST
10176: LIST
10177: LIST
10178: LIST
10179: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10180: LD_ADDR_OWVAR 37
10184: PUSH
10185: LD_VAR 0 17
10189: PUSH
10190: LD_INT 1
10192: PPUSH
10193: LD_VAR 0 17
10197: PPUSH
10198: CALL_OW 12
10202: ARRAY
10203: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10204: LD_VAR 0 8
10208: PUSH
10209: LD_VAR 0 14
10213: ARRAY
10214: PUSH
10215: LD_INT 46
10217: EQUAL
10218: PUSH
10219: LD_VAR 0 8
10223: PUSH
10224: LD_VAR 0 14
10228: ARRAY
10229: PUSH
10230: LD_INT 47
10232: EQUAL
10233: OR
10234: IFFALSE 10275
// begin ruChassisTab = [ 23 , 24 ] ;
10236: LD_ADDR_VAR 0 17
10240: PUSH
10241: LD_INT 23
10243: PUSH
10244: LD_INT 24
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10251: LD_ADDR_OWVAR 37
10255: PUSH
10256: LD_VAR 0 17
10260: PUSH
10261: LD_INT 1
10263: PPUSH
10264: LD_VAR 0 17
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: ST_TO_ADDR
// end ; end ;
10275: GO 10074
10277: POP
10278: POP
// veh = CreateVehicle ;
10279: LD_ADDR_VAR 0 16
10283: PUSH
10284: CALL_OW 45
10288: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10289: LD_VAR 0 16
10293: PPUSH
10294: LD_VAR 0 1
10298: PPUSH
10299: LD_INT 0
10301: PPUSH
10302: CALL_OW 49
// if vehcontrol = 1 then
10306: LD_VAR 0 7
10310: PUSH
10311: LD_INT 1
10313: EQUAL
10314: IFFALSE 10371
// begin hc_gallery =  ;
10316: LD_ADDR_OWVAR 33
10320: PUSH
10321: LD_STRING 
10323: ST_TO_ADDR
// hc_name =  ;
10324: LD_ADDR_OWVAR 26
10328: PUSH
10329: LD_STRING 
10331: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10332: LD_INT 0
10334: PPUSH
10335: LD_INT 3
10337: PPUSH
10338: LD_VAR 0 4
10342: PPUSH
10343: CALL_OW 380
// un = CreateHuman ;
10347: LD_ADDR_VAR 0 15
10351: PUSH
10352: CALL_OW 44
10356: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10357: LD_VAR 0 15
10361: PPUSH
10362: LD_VAR 0 16
10366: PPUSH
10367: CALL_OW 52
// end ; i = i + 1 ;
10371: LD_ADDR_VAR 0 13
10375: PUSH
10376: LD_VAR 0 13
10380: PUSH
10381: LD_INT 1
10383: PLUS
10384: ST_TO_ADDR
// end ; until i = vehCount ;
10385: LD_VAR 0 13
10389: PUSH
10390: LD_VAR 0 3
10394: EQUAL
10395: IFFALSE 9047
// repeat wait ( 0 0$1 ) ;
10397: LD_INT 35
10399: PPUSH
10400: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10404: LD_INT 22
10406: PUSH
10407: LD_VAR 0 2
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: PUSH
10416: LD_INT 21
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PUSH
10426: LD_INT 24
10428: PUSH
10429: LD_INT 250
10431: PUSH
10432: EMPTY
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 3
10438: PUSH
10439: LD_INT 58
10441: PUSH
10442: EMPTY
10443: LIST
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: PPUSH
10455: CALL_OW 69
10459: PUSH
10460: LD_INT 0
10462: GREATER
10463: IFFALSE 10705
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10465: LD_ADDR_VAR 0 13
10469: PUSH
10470: LD_INT 22
10472: PUSH
10473: LD_VAR 0 2
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 2
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: LD_INT 24
10494: PUSH
10495: LD_INT 250
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: PUSH
10502: LD_INT 3
10504: PUSH
10505: LD_INT 58
10507: PUSH
10508: EMPTY
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: PPUSH
10521: CALL_OW 69
10525: PUSH
10526: FOR_IN
10527: IFFALSE 10703
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10529: LD_ADDR_VAR 0 21
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_VAR 0 11
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PPUSH
10546: CALL_OW 69
10550: PPUSH
10551: LD_VAR 0 13
10555: PPUSH
10556: CALL_OW 74
10560: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10561: LD_ADDR_VAR 0 22
10565: PUSH
10566: LD_INT 22
10568: PUSH
10569: LD_VAR 0 11
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: LD_INT 59
10583: PUSH
10584: EMPTY
10585: LIST
10586: PUSH
10587: LD_INT 21
10589: PUSH
10590: LD_INT 1
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PUSH
10597: LD_INT 21
10599: PUSH
10600: LD_INT 2
10602: PUSH
10603: EMPTY
10604: LIST
10605: LIST
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: EMPTY
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: PPUSH
10625: LD_VAR 0 13
10629: PPUSH
10630: CALL_OW 74
10634: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10635: LD_VAR 0 13
10639: PPUSH
10640: LD_VAR 0 21
10644: PPUSH
10645: CALL_OW 296
10649: PUSH
10650: LD_INT 8
10652: PLUS
10653: PUSH
10654: LD_VAR 0 13
10658: PPUSH
10659: LD_VAR 0 22
10663: PPUSH
10664: CALL_OW 296
10668: LESS
10669: IFFALSE 10687
// begin ComAttackUnit ( i , target1 ) ;
10671: LD_VAR 0 13
10675: PPUSH
10676: LD_VAR 0 21
10680: PPUSH
10681: CALL_OW 115
// end else
10685: GO 10701
// begin ComAttackUnit ( i , target2 ) ;
10687: LD_VAR 0 13
10691: PPUSH
10692: LD_VAR 0 22
10696: PPUSH
10697: CALL_OW 115
// end ; end ;
10701: GO 10526
10703: POP
10704: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10705: LD_INT 22
10707: PUSH
10708: LD_VAR 0 2
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 21
10719: PUSH
10720: LD_INT 2
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 24
10729: PUSH
10730: LD_INT 250
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 3
10739: PUSH
10740: LD_INT 58
10742: PUSH
10743: EMPTY
10744: LIST
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: EMPTY
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: PPUSH
10756: CALL_OW 69
10760: PUSH
10761: LD_INT 0
10763: EQUAL
10764: IFFALSE 10397
// end ; end_of_file
10766: LD_VAR 0 12
10770: RET
// every 1 do var i , gammaSquad , startX , startY ;
10771: GO 10773
10773: DISABLE
10774: LD_INT 0
10776: PPUSH
10777: PPUSH
10778: PPUSH
10779: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10780: LD_ADDR_VAR 0 2
10784: PUSH
10785: LD_EXP 8
10789: PUSH
10790: LD_EXP 9
10794: PUSH
10795: LD_EXP 10
10799: PUSH
10800: LD_EXP 11
10804: PUSH
10805: LD_EXP 12
10809: PUSH
10810: EMPTY
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10817: LD_ADDR_VAR 0 3
10821: PUSH
10822: LD_INT 46
10824: PUSH
10825: LD_INT 45
10827: PUSH
10828: LD_INT 44
10830: PUSH
10831: LD_INT 43
10833: PUSH
10834: LD_INT 42
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10844: LD_ADDR_VAR 0 4
10848: PUSH
10849: LD_INT 14
10851: PUSH
10852: LD_INT 12
10854: PUSH
10855: LD_INT 10
10857: PUSH
10858: LD_INT 8
10860: PUSH
10861: LD_INT 6
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10871: LD_INT 32
10873: PPUSH
10874: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10878: LD_INT 32
10880: PPUSH
10881: LD_INT 51
10883: PPUSH
10884: LD_INT 26
10886: PPUSH
10887: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10891: LD_INT 32
10893: PPUSH
10894: LD_INT 53
10896: PPUSH
10897: LD_INT 23
10899: PPUSH
10900: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10904: LD_INT 32
10906: PPUSH
10907: LD_INT 52
10909: PPUSH
10910: LD_INT 19
10912: PPUSH
10913: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10917: LD_INT 35
10919: PPUSH
10920: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10924: LD_INT 32
10926: PPUSH
10927: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10931: LD_INT 32
10933: PPUSH
10934: CALL_OW 250
10938: PUSH
10939: LD_INT 52
10941: EQUAL
10942: PUSH
10943: LD_INT 32
10945: PPUSH
10946: CALL_OW 251
10950: PUSH
10951: LD_INT 19
10953: EQUAL
10954: AND
10955: IFFALSE 10917
// ComExitVehicle ( JMM ) ;
10957: LD_EXP 1
10961: PPUSH
10962: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10966: LD_EXP 7
10970: PPUSH
10971: LD_EXP 1
10975: PPUSH
10976: CALL_OW 119
// wait ( 0 0$01 ) ;
10980: LD_INT 35
10982: PPUSH
10983: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10987: LD_EXP 1
10991: PPUSH
10992: LD_INT 46
10994: PPUSH
10995: LD_INT 10
10997: PPUSH
10998: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11002: LD_EXP 1
11006: PPUSH
11007: LD_EXP 7
11011: PPUSH
11012: CALL_OW 179
// wait ( 0 0$4 ) ;
11016: LD_INT 140
11018: PPUSH
11019: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11023: LD_EXP 1
11027: PPUSH
11028: LD_STRING D1-JMM-1
11030: PPUSH
11031: CALL_OW 88
// if not dialogue_skipped then
11035: LD_OWVAR 59
11039: NOT
11040: IFFALSE 11697
// begin for i := 1 to gammaSquad do
11042: LD_ADDR_VAR 0 1
11046: PUSH
11047: DOUBLE
11048: LD_INT 1
11050: DEC
11051: ST_TO_ADDR
11052: LD_VAR 0 2
11056: PUSH
11057: FOR_TO
11058: IFFALSE 11119
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11060: LD_VAR 0 2
11064: PUSH
11065: LD_VAR 0 1
11069: ARRAY
11070: PPUSH
11071: LD_VAR 0 3
11075: PUSH
11076: LD_VAR 0 1
11080: ARRAY
11081: PPUSH
11082: LD_VAR 0 4
11086: PUSH
11087: LD_VAR 0 1
11091: ARRAY
11092: PPUSH
11093: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11097: LD_VAR 0 2
11101: PUSH
11102: LD_VAR 0 1
11106: ARRAY
11107: PPUSH
11108: LD_EXP 1
11112: PPUSH
11113: CALL_OW 179
// end ;
11117: GO 11057
11119: POP
11120: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11121: LD_EXP 4
11125: PPUSH
11126: LD_INT 41
11128: PPUSH
11129: LD_INT 4
11131: PPUSH
11132: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11136: LD_EXP 4
11140: PPUSH
11141: LD_EXP 1
11145: PPUSH
11146: CALL_OW 179
// if Lisa = false and Bobby then
11150: LD_EXP 4
11154: PUSH
11155: LD_INT 0
11157: EQUAL
11158: PUSH
11159: LD_EXP 2
11163: AND
11164: IFFALSE 11195
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11166: LD_EXP 2
11170: PPUSH
11171: LD_INT 41
11173: PPUSH
11174: LD_INT 4
11176: PPUSH
11177: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11181: LD_EXP 2
11185: PPUSH
11186: LD_EXP 1
11190: PPUSH
11191: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11195: LD_EXP 4
11199: PUSH
11200: LD_INT 0
11202: EQUAL
11203: PUSH
11204: LD_EXP 2
11208: PUSH
11209: LD_INT 0
11211: EQUAL
11212: AND
11213: PUSH
11214: LD_EXP 3
11218: AND
11219: IFFALSE 11250
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11221: LD_EXP 3
11225: PPUSH
11226: LD_INT 41
11228: PPUSH
11229: LD_INT 4
11231: PPUSH
11232: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11236: LD_EXP 3
11240: PPUSH
11241: LD_EXP 1
11245: PPUSH
11246: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11250: LD_EXP 4
11254: PUSH
11255: LD_INT 0
11257: EQUAL
11258: PUSH
11259: LD_EXP 2
11263: PUSH
11264: LD_INT 0
11266: EQUAL
11267: AND
11268: PUSH
11269: LD_EXP 3
11273: PUSH
11274: LD_INT 0
11276: EQUAL
11277: AND
11278: IFFALSE 11309
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11280: LD_EXP 6
11284: PPUSH
11285: LD_INT 41
11287: PPUSH
11288: LD_INT 4
11290: PPUSH
11291: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11295: LD_EXP 6
11299: PPUSH
11300: LD_EXP 1
11304: PPUSH
11305: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11309: LD_EXP 7
11313: PPUSH
11314: LD_STRING D1-Brown-1
11316: PPUSH
11317: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11321: LD_EXP 1
11325: PPUSH
11326: LD_STRING D1-JMM-2
11328: PPUSH
11329: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11333: LD_EXP 7
11337: PPUSH
11338: LD_STRING D1-Brown-2
11340: PPUSH
11341: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11345: LD_EXP 1
11349: PPUSH
11350: LD_EXP 9
11354: PPUSH
11355: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11359: LD_EXP 9
11363: PPUSH
11364: LD_STRING D1-FSol1-2
11366: PPUSH
11367: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11371: LD_EXP 1
11375: PPUSH
11376: LD_EXP 8
11380: PPUSH
11381: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11385: LD_EXP 8
11389: PPUSH
11390: LD_STRING D1-Sol2-2
11392: PPUSH
11393: CALL_OW 88
// if Lisa then
11397: LD_EXP 4
11401: IFFALSE 11441
// begin ComTurnUnit ( JMM , Lisa ) ;
11403: LD_EXP 1
11407: PPUSH
11408: LD_EXP 4
11412: PPUSH
11413: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11417: LD_EXP 4
11421: PPUSH
11422: LD_STRING D1-Lisa-2
11424: PPUSH
11425: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11429: LD_EXP 1
11433: PPUSH
11434: LD_STRING D1-JMM-3
11436: PPUSH
11437: CALL_OW 88
// end ; if Bobby then
11441: LD_EXP 2
11445: IFFALSE 11485
// begin ComTurnUnit ( JMM , Bobby ) ;
11447: LD_EXP 1
11451: PPUSH
11452: LD_EXP 2
11456: PPUSH
11457: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11461: LD_EXP 2
11465: PPUSH
11466: LD_STRING D1-Bobby-2
11468: PPUSH
11469: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11473: LD_EXP 1
11477: PPUSH
11478: LD_STRING D1-JMM-3
11480: PPUSH
11481: CALL_OW 88
// end ; if Cyrus then
11485: LD_EXP 3
11489: IFFALSE 11529
// begin ComTurnUnit ( JMM , Cyrus ) ;
11491: LD_EXP 1
11495: PPUSH
11496: LD_EXP 3
11500: PPUSH
11501: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11505: LD_EXP 3
11509: PPUSH
11510: LD_STRING D1-Cyrus-2
11512: PPUSH
11513: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11517: LD_EXP 1
11521: PPUSH
11522: LD_STRING D1-JMM-3
11524: PPUSH
11525: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11529: LD_EXP 1
11533: PPUSH
11534: LD_EXP 7
11538: PPUSH
11539: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11543: LD_EXP 1
11547: PPUSH
11548: LD_STRING D1-JMM-3a
11550: PPUSH
11551: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11555: LD_EXP 7
11559: PPUSH
11560: LD_INT 38
11562: PPUSH
11563: LD_INT 5
11565: PPUSH
11566: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11570: LD_EXP 7
11574: PPUSH
11575: LD_EXP 1
11579: PPUSH
11580: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11584: LD_EXP 1
11588: PPUSH
11589: LD_INT 40
11591: PPUSH
11592: LD_INT 7
11594: PPUSH
11595: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11599: LD_EXP 1
11603: PPUSH
11604: LD_EXP 7
11608: PPUSH
11609: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11613: LD_EXP 7
11617: PPUSH
11618: LD_STRING D1-Brown-3
11620: PPUSH
11621: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11625: LD_EXP 14
11629: PPUSH
11630: LD_STRING D1-Har-3
11632: PPUSH
11633: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11637: LD_EXP 1
11641: PPUSH
11642: LD_STRING D1-JMM-4
11644: PPUSH
11645: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11649: LD_EXP 14
11653: PPUSH
11654: LD_STRING D1-Har-4
11656: PPUSH
11657: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11661: LD_EXP 1
11665: PPUSH
11666: LD_STRING D1-JMM-5
11668: PPUSH
11669: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11673: LD_EXP 14
11677: PPUSH
11678: LD_STRING D1-Har-5
11680: PPUSH
11681: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11685: LD_EXP 1
11689: PPUSH
11690: LD_STRING D1-JMM-6
11692: PPUSH
11693: CALL_OW 88
// end ; InGameOff ;
11697: CALL_OW 9
// PrepareRussianConvoy ;
11701: CALL 2830 0 0
// ChangeMissionObjectives ( M1 ) ;
11705: LD_STRING M1
11707: PPUSH
11708: CALL_OW 337
// SaveForQuickRestart ;
11712: CALL_OW 22
// timerStatus = 1 ;
11716: LD_ADDR_EXP 29
11720: PUSH
11721: LD_INT 1
11723: ST_TO_ADDR
// startTimer = 1 ;
11724: LD_ADDR_EXP 30
11728: PUSH
11729: LD_INT 1
11731: ST_TO_ADDR
// bonusAvalaible = 1 ;
11732: LD_ADDR_EXP 42
11736: PUSH
11737: LD_INT 1
11739: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11740: LD_INT 105
11742: PPUSH
11743: CALL_OW 67
// DialogueOn ;
11747: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11751: LD_EXP 12
11755: PPUSH
11756: LD_STRING D9-Mech1-1
11758: PPUSH
11759: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11763: LD_EXP 1
11767: PPUSH
11768: LD_STRING D9-JMM-1
11770: PPUSH
11771: CALL_OW 88
// DialogueOff ;
11775: CALL_OW 7
// end ;
11779: PPOPN 4
11781: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11782: LD_INT 47
11784: PPUSH
11785: LD_INT 1
11787: PPUSH
11788: CALL_OW 321
11792: PUSH
11793: LD_INT 2
11795: EQUAL
11796: PUSH
11797: LD_INT 22
11799: PUSH
11800: LD_INT 1
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: PUSH
11807: LD_INT 21
11809: PUSH
11810: LD_INT 3
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: PUSH
11817: LD_INT 30
11819: PUSH
11820: LD_INT 3
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: LIST
11831: PPUSH
11832: CALL_OW 69
11836: PUSH
11837: LD_INT 0
11839: GREATER
11840: AND
11841: IFFALSE 12071
11843: GO 11845
11845: DISABLE
// begin if IsOk ( Campell ) then
11846: LD_EXP 12
11850: PPUSH
11851: CALL_OW 302
11855: IFFALSE 11871
// begin Say ( Campell , D10-Mech1-1 ) ;
11857: LD_EXP 12
11861: PPUSH
11862: LD_STRING D10-Mech1-1
11864: PPUSH
11865: CALL_OW 88
// end else
11869: GO 12071
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11871: LD_INT 22
11873: PUSH
11874: LD_INT 1
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: PUSH
11881: LD_INT 21
11883: PUSH
11884: LD_INT 1
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: PUSH
11891: LD_INT 25
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 26
11903: PUSH
11904: LD_INT 1
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: PPUSH
11917: CALL_OW 69
11921: PUSH
11922: LD_EXP 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: PUSH
11930: LD_INT 0
11932: GREATER
11933: DIFF
11934: IFFALSE 12008
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11936: LD_INT 22
11938: PUSH
11939: LD_INT 1
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 21
11948: PUSH
11949: LD_INT 1
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 25
11958: PUSH
11959: LD_INT 3
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: PUSH
11966: LD_INT 26
11968: PUSH
11969: LD_INT 1
11971: PUSH
11972: EMPTY
11973: LIST
11974: LIST
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PPUSH
11982: CALL_OW 69
11986: PUSH
11987: LD_EXP 1
11991: PUSH
11992: EMPTY
11993: LIST
11994: DIFF
11995: PPUSH
11996: LD_STRING D10-Mech1-1
11998: PPUSH
11999: LD_STRING D10-Mech1-1
12001: PPUSH
12002: CALL 4074 0 3
// end else
12006: GO 12071
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12008: LD_INT 22
12010: PUSH
12011: LD_INT 1
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 21
12020: PUSH
12021: LD_INT 1
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 26
12030: PUSH
12031: LD_INT 1
12033: PUSH
12034: EMPTY
12035: LIST
12036: LIST
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 1
12045: ARRAY
12046: PPUSH
12047: CALL_OW 69
12051: PUSH
12052: LD_EXP 1
12056: PUSH
12057: EMPTY
12058: LIST
12059: DIFF
12060: PPUSH
12061: LD_STRING D10-Mech1-1
12063: PPUSH
12064: LD_STRING D10-Mech1-1
12066: PPUSH
12067: CALL 4074 0 3
// end ; end ; end ;
12071: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12072: LD_INT 22
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 30
12084: PUSH
12085: LD_INT 32
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PPUSH
12096: CALL_OW 69
12100: PUSH
12101: LD_INT 0
12103: GREATER
12104: PUSH
12105: LD_EXP 32
12109: PUSH
12110: LD_INT 0
12112: EQUAL
12113: AND
12114: IFFALSE 12354
12116: GO 12118
12118: DISABLE
// begin if IsOK ( Claptopn ) then
12119: LD_EXP 11
12123: PPUSH
12124: CALL_OW 302
12128: IFFALSE 12144
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12130: LD_EXP 11
12134: PPUSH
12135: LD_STRING D9b-Eng1-1
12137: PPUSH
12138: CALL_OW 88
// end else
12142: GO 12340
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12144: LD_INT 22
12146: PUSH
12147: LD_INT 1
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 21
12156: PUSH
12157: LD_INT 1
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: LD_INT 25
12166: PUSH
12167: LD_INT 3
12169: PUSH
12170: EMPTY
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 26
12176: PUSH
12177: LD_INT 1
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: PPUSH
12190: CALL_OW 69
12194: PUSH
12195: LD_EXP 1
12199: PUSH
12200: EMPTY
12201: LIST
12202: PUSH
12203: LD_INT 0
12205: GREATER
12206: DIFF
12207: IFFALSE 12281
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12209: LD_INT 22
12211: PUSH
12212: LD_INT 1
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 21
12221: PUSH
12222: LD_INT 1
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: LD_INT 25
12231: PUSH
12232: LD_INT 2
12234: PUSH
12235: EMPTY
12236: LIST
12237: LIST
12238: PUSH
12239: LD_INT 26
12241: PUSH
12242: LD_INT 1
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: PPUSH
12255: CALL_OW 69
12259: PUSH
12260: LD_EXP 1
12264: PUSH
12265: EMPTY
12266: LIST
12267: DIFF
12268: PPUSH
12269: LD_STRING D9b-Eng1-1
12271: PPUSH
12272: LD_STRING D9b-Eng1-11
12274: PPUSH
12275: CALL 4074 0 3
// end else
12279: GO 12340
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12281: LD_INT 22
12283: PUSH
12284: LD_INT 1
12286: PUSH
12287: EMPTY
12288: LIST
12289: LIST
12290: PUSH
12291: LD_INT 21
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 26
12303: PUSH
12304: LD_INT 1
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: PPUSH
12316: CALL_OW 69
12320: PUSH
12321: LD_EXP 1
12325: PUSH
12326: EMPTY
12327: LIST
12328: DIFF
12329: PPUSH
12330: LD_STRING D9b-Eng1-1
12332: PPUSH
12333: LD_STRING D9b-Eng1-1
12335: PPUSH
12336: CALL 4074 0 3
// end ; end ; if energyVDialog = 0 then
12340: LD_EXP 33
12344: PUSH
12345: LD_INT 0
12347: EQUAL
12348: IFFALSE 12354
// EnergyDialog ;
12350: CALL 4565 0 0
// end ;
12354: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12355: LD_EXP 34
12359: PUSH
12360: LD_INT 1
12362: EQUAL
12363: PUSH
12364: LD_EXP 35
12368: PUSH
12369: LD_INT 1
12371: EQUAL
12372: AND
12373: IFFALSE 12385
12375: GO 12377
12377: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12378: LD_STRING M1a
12380: PPUSH
12381: CALL_OW 337
12385: END
// every 3 3$0 do
12386: GO 12388
12388: DISABLE
// begin PrepareFirstAttack ;
12389: CALL 3630 0 0
// end ;
12393: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12394: LD_INT 22
12396: PUSH
12397: LD_INT 5
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 21
12406: PUSH
12407: LD_INT 1
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: PUSH
12414: LD_INT 3
12416: PUSH
12417: LD_INT 24
12419: PUSH
12420: LD_INT 250
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: PUSH
12431: EMPTY
12432: LIST
12433: LIST
12434: LIST
12435: PPUSH
12436: CALL_OW 69
12440: PUSH
12441: LD_INT 0
12443: GREATER
12444: PUSH
12445: LD_EXP 23
12449: PUSH
12450: LD_INT 1
12452: EQUAL
12453: AND
12454: IFFALSE 12755
12456: GO 12458
12458: DISABLE
12459: LD_INT 0
12461: PPUSH
// begin firstRussianAttack = 2 ;
12462: LD_ADDR_EXP 23
12466: PUSH
12467: LD_INT 2
12469: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12470: LD_INT 22
12472: PUSH
12473: LD_INT 5
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 21
12482: PUSH
12483: LD_INT 1
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: PPUSH
12494: CALL_OW 69
12498: PPUSH
12499: LD_INT 125
12501: PPUSH
12502: LD_INT 98
12504: PPUSH
12505: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12509: LD_INT 22
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: EMPTY
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 1
12524: PUSH
12525: EMPTY
12526: LIST
12527: LIST
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PPUSH
12533: CALL_OW 69
12537: PUSH
12538: LD_EXP 1
12542: PUSH
12543: LD_EXP 7
12547: PUSH
12548: LD_EXP 4
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: DIFF
12558: PPUSH
12559: LD_STRING DAtt1-Sol1-1
12561: PPUSH
12562: LD_STRING DAtt1-FSol1-1
12564: PPUSH
12565: CALL 4074 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12569: LD_EXP 1
12573: PPUSH
12574: LD_STRING DAtt1-JMM-1
12576: PPUSH
12577: CALL_OW 88
// if Lisa then
12581: LD_EXP 4
12585: IFFALSE 12601
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12587: LD_EXP 4
12591: PPUSH
12592: LD_STRING DAtt1a-Lisa-1
12594: PPUSH
12595: CALL_OW 88
// end else
12599: GO 12672
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12601: LD_INT 22
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: LD_INT 21
12613: PUSH
12614: LD_INT 1
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: PUSH
12621: LD_INT 26
12623: PUSH
12624: LD_INT 1
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: PUSH
12631: EMPTY
12632: LIST
12633: LIST
12634: LIST
12635: PPUSH
12636: CALL_OW 69
12640: PUSH
12641: LD_EXP 1
12645: PUSH
12646: LD_EXP 7
12650: PUSH
12651: LD_EXP 4
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: DIFF
12661: PPUSH
12662: LD_STRING DAtt1a-Sol1-1
12664: PPUSH
12665: LD_STRING DAtt1-FSol1-1
12667: PPUSH
12668: CALL 4074 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12672: LD_EXP 1
12676: PPUSH
12677: LD_STRING DAtt1a-JMM-1
12679: PPUSH
12680: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12684: LD_INT 22
12686: PUSH
12687: LD_INT 1
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 26
12706: PUSH
12707: LD_INT 1
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: EMPTY
12715: LIST
12716: LIST
12717: LIST
12718: PPUSH
12719: CALL_OW 69
12723: PUSH
12724: LD_EXP 1
12728: PUSH
12729: LD_EXP 7
12733: PUSH
12734: LD_EXP 4
12738: PUSH
12739: EMPTY
12740: LIST
12741: LIST
12742: LIST
12743: DIFF
12744: PPUSH
12745: LD_STRING DAtt1b-Sol1-1
12747: PPUSH
12748: LD_STRING DAtt1a-Sol1-1
12750: PPUSH
12751: CALL 4074 0 3
// end ;
12755: PPOPN 1
12757: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12758: LD_EXP 23
12762: PUSH
12763: LD_INT 2
12765: EQUAL
12766: IFFALSE 12828
12768: GO 12770
12770: DISABLE
12771: LD_INT 0
12773: PPUSH
// begin enable ;
12774: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12775: LD_ADDR_VAR 0 1
12779: PUSH
12780: LD_INT 5
12782: PPUSH
12783: LD_INT 22
12785: PUSH
12786: LD_INT 5
12788: PUSH
12789: EMPTY
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 21
12795: PUSH
12796: LD_INT 1
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PPUSH
12807: CALL_OW 70
12811: PUSH
12812: FOR_IN
12813: IFFALSE 12826
// RemoveUnit ( i ) ;
12815: LD_VAR 0 1
12819: PPUSH
12820: CALL_OW 64
12824: GO 12812
12826: POP
12827: POP
// end ;
12828: PPOPN 1
12830: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12831: LD_INT 22
12833: PUSH
12834: LD_INT 5
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: EMPTY
12842: LIST
12843: PPUSH
12844: CALL_OW 69
12848: PUSH
12849: LD_INT 0
12851: EQUAL
12852: PUSH
12853: LD_EXP 23
12857: PUSH
12858: LD_INT 2
12860: EQUAL
12861: AND
12862: IFFALSE 12875
12864: GO 12866
12866: DISABLE
// firstRussianAttack = 3 ;
12867: LD_ADDR_EXP 23
12871: PUSH
12872: LD_INT 3
12874: ST_TO_ADDR
12875: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12876: LD_EXP 28
12880: PUSH
12881: LD_INT 0
12883: EQUAL
12884: IFFALSE 12965
12886: GO 12888
12888: DISABLE
// begin timerStatus = 4 ;
12889: LD_ADDR_EXP 29
12893: PUSH
12894: LD_INT 4
12896: ST_TO_ADDR
// DialogueOn ;
12897: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12901: LD_EXP 13
12905: PPUSH
12906: LD_STRING D2-Don-1
12908: PPUSH
12909: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12913: LD_EXP 1
12917: PPUSH
12918: LD_STRING D2-JMM-1
12920: PPUSH
12921: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12925: LD_EXP 13
12929: PPUSH
12930: LD_STRING D2-Don-2
12932: PPUSH
12933: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12937: LD_EXP 1
12941: PPUSH
12942: LD_STRING D2-JMM-2
12944: PPUSH
12945: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12949: LD_EXP 13
12953: PPUSH
12954: LD_STRING D2-Don-3
12956: PPUSH
12957: CALL_OW 94
// DialogueOff ;
12961: CALL_OW 7
// end ;
12965: END
// every 12 12$0 do var tmp ;
12966: GO 12968
12968: DISABLE
12969: LD_INT 0
12971: PPUSH
// begin PrepareDonaldsonArmy ;
12972: CALL 1023 0 0
// CenterNowOnUnits ( Donaldson ) ;
12976: LD_EXP 13
12980: PPUSH
12981: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12985: LD_ADDR_VAR 0 1
12989: PUSH
12990: LD_INT 22
12992: PUSH
12993: LD_INT 4
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 21
13002: PUSH
13003: LD_INT 1
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 26
13012: PUSH
13013: LD_INT 1
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: PUSH
13020: LD_INT 25
13022: PUSH
13023: LD_INT 1
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PPUSH
13036: CALL_OW 69
13040: PUSH
13041: LD_EXP 5
13045: PUSH
13046: EMPTY
13047: LIST
13048: DIFF
13049: ST_TO_ADDR
// DialogueOn ;
13050: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13054: LD_VAR 0 1
13058: PPUSH
13059: LD_STRING D3-Sol1-1
13061: PPUSH
13062: LD_STRING D3-Sol1-1
13064: PPUSH
13065: CALL 4074 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13069: LD_INT 22
13071: PUSH
13072: LD_INT 4
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 21
13081: PUSH
13082: LD_INT 1
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: PUSH
13089: LD_INT 26
13091: PUSH
13092: LD_INT 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 25
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PPUSH
13115: CALL_OW 69
13119: PPUSH
13120: LD_STRING D3-Sol2-1
13122: PPUSH
13123: LD_STRING D3-Sol2-1
13125: PPUSH
13126: CALL 4074 0 3
// if Frank then
13130: LD_EXP 5
13134: IFFALSE 13148
// Say ( Frank , D3-Frank-1 ) ;
13136: LD_EXP 5
13140: PPUSH
13141: LD_STRING D3-Frank-1
13143: PPUSH
13144: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13148: LD_EXP 13
13152: PPUSH
13153: LD_STRING D3-Don-1
13155: PPUSH
13156: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13160: LD_EXP 13
13164: PPUSH
13165: LD_STRING D3-Don-1a
13167: PPUSH
13168: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13172: LD_EXP 1
13176: PPUSH
13177: LD_STRING D3-JMM-1
13179: PPUSH
13180: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13184: LD_EXP 13
13188: PPUSH
13189: LD_STRING D3-Don-2
13191: PPUSH
13192: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13196: LD_INT 22
13198: PUSH
13199: LD_INT 6
13201: PUSH
13202: EMPTY
13203: LIST
13204: LIST
13205: PUSH
13206: LD_INT 21
13208: PUSH
13209: LD_INT 1
13211: PUSH
13212: EMPTY
13213: LIST
13214: LIST
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: PUSH
13225: LD_INT 0
13227: GREATER
13228: IFFALSE 13366
// begin Say ( JMM , D3-JMM-2 ) ;
13230: LD_EXP 1
13234: PPUSH
13235: LD_STRING D3-JMM-2
13237: PPUSH
13238: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13242: LD_EXP 13
13246: PPUSH
13247: LD_STRING D3-Don-3
13249: PPUSH
13250: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13254: LD_EXP 1
13258: PPUSH
13259: LD_STRING D3-JMM-3
13261: PPUSH
13262: CALL_OW 88
// if IsOK ( Frank ) then
13266: LD_EXP 5
13270: PPUSH
13271: CALL_OW 302
13275: IFFALSE 13289
// Say ( Frank , D3-Frank-3 ) ;
13277: LD_EXP 5
13281: PPUSH
13282: LD_STRING D3-Frank-3
13284: PPUSH
13285: CALL_OW 88
// DialogueOff ;
13289: CALL_OW 7
// if IsOK ( Frank ) then
13293: LD_EXP 5
13297: PPUSH
13298: CALL_OW 302
13302: IFFALSE 13364
// begin SetSide ( Frank , 0 ) ;
13304: LD_EXP 5
13308: PPUSH
13309: LD_INT 0
13311: PPUSH
13312: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13316: LD_EXP 5
13320: PPUSH
13321: LD_INT 12
13323: PPUSH
13324: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13328: LD_EXP 5
13332: PPUSH
13333: LD_STRING Frank
13335: PPUSH
13336: CALL_OW 38
// Wait ( 0 0$3 ) ;
13340: LD_INT 105
13342: PPUSH
13343: CALL_OW 67
// frankScoutBase = 1 ;
13347: LD_ADDR_EXP 25
13351: PUSH
13352: LD_INT 1
13354: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13355: LD_EXP 5
13359: PPUSH
13360: CALL_OW 64
// end ; end else
13364: GO 13453
// begin Say ( JMM , D3-JMM-4 ) ;
13366: LD_EXP 1
13370: PPUSH
13371: LD_STRING D3-JMM-4
13373: PPUSH
13374: CALL_OW 88
// DialogueOff ;
13378: CALL_OW 7
// if IsOK ( Frank ) then
13382: LD_EXP 5
13386: PPUSH
13387: CALL_OW 302
13391: IFFALSE 13453
// begin SetSide ( Frank , 0 ) ;
13393: LD_EXP 5
13397: PPUSH
13398: LD_INT 0
13400: PPUSH
13401: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13405: LD_EXP 5
13409: PPUSH
13410: LD_INT 12
13412: PPUSH
13413: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13417: LD_EXP 5
13421: PPUSH
13422: LD_STRING Frank
13424: PPUSH
13425: CALL_OW 38
// Wait ( 0 0$3 ) ;
13429: LD_INT 105
13431: PPUSH
13432: CALL_OW 67
// frankScoutBase = 1 ;
13436: LD_ADDR_EXP 25
13440: PUSH
13441: LD_INT 1
13443: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13444: LD_EXP 5
13448: PPUSH
13449: CALL_OW 64
// end ; end ; end ;
13453: PPOPN 1
13455: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13456: LD_EXP 13
13460: PPUSH
13461: CALL_OW 255
13465: PUSH
13466: LD_INT 4
13468: EQUAL
13469: PUSH
13470: LD_EXP 13
13474: PPUSH
13475: CALL_OW 302
13479: AND
13480: IFFALSE 13505
13482: GO 13484
13484: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13485: LD_EXP 13
13489: PPUSH
13490: LD_STRING D3b-Don-1
13492: PPUSH
13493: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13497: LD_ADDR_EXP 41
13501: PUSH
13502: LD_INT 1
13504: ST_TO_ADDR
// end ;
13505: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13506: LD_EXP 24
13510: PUSH
13511: LD_INT 0
13513: EQUAL
13514: IFFALSE 13670
13516: GO 13518
13518: DISABLE
13519: LD_INT 0
13521: PPUSH
13522: PPUSH
// begin enable ;
13523: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13524: LD_ADDR_VAR 0 1
13528: PUSH
13529: LD_INT 22
13531: PUSH
13532: LD_INT 4
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 21
13541: PUSH
13542: LD_INT 1
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PPUSH
13553: CALL_OW 69
13557: PUSH
13558: FOR_IN
13559: IFFALSE 13668
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13561: LD_ADDR_VAR 0 2
13565: PUSH
13566: LD_INT 22
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 21
13578: PUSH
13579: LD_INT 1
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 69
13594: PUSH
13595: FOR_IN
13596: IFFALSE 13664
// begin if GetDistUnits ( i , j ) < 7 then
13598: LD_VAR 0 1
13602: PPUSH
13603: LD_VAR 0 2
13607: PPUSH
13608: CALL_OW 296
13612: PUSH
13613: LD_INT 7
13615: LESS
13616: IFFALSE 13662
// begin saveDonaldson = 1 ;
13618: LD_ADDR_EXP 24
13622: PUSH
13623: LD_INT 1
13625: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13626: LD_INT 22
13628: PUSH
13629: LD_INT 4
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 21
13638: PUSH
13639: LD_INT 1
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: PPUSH
13650: CALL_OW 69
13654: PPUSH
13655: LD_INT 1
13657: PPUSH
13658: CALL_OW 235
// end ; end ;
13662: GO 13595
13664: POP
13665: POP
// end ;
13666: GO 13558
13668: POP
13669: POP
// end ;
13670: PPOPN 2
13672: END
// every 2 2$0 trigger saveDonaldson = 1 do
13673: LD_EXP 24
13677: PUSH
13678: LD_INT 1
13680: EQUAL
13681: IFFALSE 13984
13683: GO 13685
13685: DISABLE
// begin uc_side = 4 ;
13686: LD_ADDR_OWVAR 20
13690: PUSH
13691: LD_INT 4
13693: ST_TO_ADDR
// uc_nation = 1 ;
13694: LD_ADDR_OWVAR 21
13698: PUSH
13699: LD_INT 1
13701: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13702: LD_ADDR_EXP 5
13706: PUSH
13707: LD_STRING Frank
13709: PPUSH
13710: CALL_OW 34
13714: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13715: LD_EXP 5
13719: PPUSH
13720: LD_INT 13
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13730: LD_INT 35
13732: PPUSH
13733: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13737: LD_EXP 1
13741: PPUSH
13742: CALL_OW 310
13746: NOT
13747: PUSH
13748: LD_EXP 1
13752: PPUSH
13753: LD_INT 4
13755: PPUSH
13756: CALL_OW 296
13760: PUSH
13761: LD_INT 20
13763: LESS
13764: AND
13765: IFFALSE 13798
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13767: LD_EXP 5
13771: PPUSH
13772: LD_EXP 1
13776: PPUSH
13777: CALL_OW 250
13781: PPUSH
13782: LD_EXP 1
13786: PPUSH
13787: CALL_OW 251
13791: PPUSH
13792: CALL_OW 111
13796: GO 13813
// ComMoveXY ( Frank , 51 , 15 ) ;
13798: LD_EXP 5
13802: PPUSH
13803: LD_INT 51
13805: PPUSH
13806: LD_INT 15
13808: PPUSH
13809: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
13813: LD_EXP 5
13817: PPUSH
13818: LD_EXP 1
13822: PPUSH
13823: CALL_OW 296
13827: PUSH
13828: LD_INT 10
13830: LESS
13831: IFFALSE 13730
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13833: LD_EXP 1
13837: PUSH
13838: LD_EXP 5
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 87
// DialogueOn ;
13851: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13855: LD_EXP 5
13859: PPUSH
13860: LD_STRING D3a-Frank-1
13862: PPUSH
13863: CALL_OW 88
// if Lisa then
13867: LD_EXP 4
13871: IFFALSE 13921
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13873: LD_EXP 4
13877: PPUSH
13878: LD_STRING D3a-Lisa-1
13880: PPUSH
13881: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13885: LD_EXP 5
13889: PPUSH
13890: LD_STRING D3a-Frank-2
13892: PPUSH
13893: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13897: LD_EXP 4
13901: PPUSH
13902: LD_STRING D3a-Lisa-2
13904: PPUSH
13905: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13909: LD_EXP 5
13913: PPUSH
13914: LD_STRING D3a-Frank-3
13916: PPUSH
13917: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13921: LD_EXP 1
13925: PPUSH
13926: LD_STRING D3a-JMM-3
13928: PPUSH
13929: CALL_OW 88
// DialogueOff ;
13933: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13937: LD_EXP 5
13941: PPUSH
13942: LD_INT 1
13944: PPUSH
13945: CALL_OW 235
// InGameOn ;
13949: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13953: LD_INT 1
13955: PPUSH
13956: LD_INT 7
13958: PPUSH
13959: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13963: LD_INT 93
13965: PPUSH
13966: LD_INT 91
13968: PPUSH
13969: CALL_OW 84
// wait ( 0 0$5 ) ;
13973: LD_INT 175
13975: PPUSH
13976: CALL_OW 67
// InGameOff ;
13980: CALL_OW 9
// end ;
13984: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13985: LD_OWVAR 67
13989: PUSH
13990: LD_INT 2
13992: EQUAL
13993: PUSH
13994: LD_OWVAR 67
13998: PUSH
13999: LD_INT 3
14001: EQUAL
14002: OR
14003: IFFALSE 14027
14005: GO 14007
14007: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14008: LD_INT 24
14010: PPUSH
14011: LD_INT 24
14013: PPUSH
14014: LD_INT 1
14016: PPUSH
14017: LD_INT 1
14019: PPUSH
14020: LD_INT 53
14022: PPUSH
14023: CALL_OW 125
14027: END
// every 18 18$0 do
14028: GO 14030
14030: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14031: LD_EXP 14
14035: PPUSH
14036: LD_STRING D4-Har-1
14038: PPUSH
14039: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14043: LD_EXP 1
14047: PPUSH
14048: LD_STRING D4-JMM-1
14050: PPUSH
14051: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14055: LD_EXP 14
14059: PPUSH
14060: LD_STRING D4-Har-2
14062: PPUSH
14063: CALL_OW 94
// case query ( Q1 ) of 1 :
14067: LD_STRING Q1
14069: PPUSH
14070: CALL_OW 97
14074: PUSH
14075: LD_INT 1
14077: DOUBLE
14078: EQUAL
14079: IFTRUE 14083
14081: GO 14142
14083: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14084: LD_EXP 1
14088: PPUSH
14089: LD_STRING D5-JMM-1
14091: PPUSH
14092: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14096: LD_EXP 14
14100: PPUSH
14101: LD_STRING D5-Har-1
14103: PPUSH
14104: CALL_OW 94
// timeToSupport = 10 10$0 ;
14108: LD_ADDR_EXP 28
14112: PUSH
14113: LD_INT 21000
14115: ST_TO_ADDR
// timerStatus = 2 ;
14116: LD_ADDR_EXP 29
14120: PUSH
14121: LD_INT 2
14123: ST_TO_ADDR
// startTimer = 1 ;
14124: LD_ADDR_EXP 30
14128: PUSH
14129: LD_INT 1
14131: ST_TO_ADDR
// harrAnswer = 1 ;
14132: LD_ADDR_EXP 26
14136: PUSH
14137: LD_INT 1
14139: ST_TO_ADDR
// end ; 2 :
14140: GO 14277
14142: LD_INT 2
14144: DOUBLE
14145: EQUAL
14146: IFTRUE 14150
14148: GO 14209
14150: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14151: LD_EXP 1
14155: PPUSH
14156: LD_STRING D5-JMM-2
14158: PPUSH
14159: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14163: LD_EXP 14
14167: PPUSH
14168: LD_STRING D5-Har-2
14170: PPUSH
14171: CALL_OW 94
// timeToSupport = 5 5$0 ;
14175: LD_ADDR_EXP 28
14179: PUSH
14180: LD_INT 10500
14182: ST_TO_ADDR
// timerStatus = 2 ;
14183: LD_ADDR_EXP 29
14187: PUSH
14188: LD_INT 2
14190: ST_TO_ADDR
// startTimer = 1 ;
14191: LD_ADDR_EXP 30
14195: PUSH
14196: LD_INT 1
14198: ST_TO_ADDR
// harrAnswer = 2 ;
14199: LD_ADDR_EXP 26
14203: PUSH
14204: LD_INT 2
14206: ST_TO_ADDR
// end ; 3 :
14207: GO 14277
14209: LD_INT 3
14211: DOUBLE
14212: EQUAL
14213: IFTRUE 14217
14215: GO 14276
14217: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14218: LD_EXP 1
14222: PPUSH
14223: LD_STRING D5-JMM-3
14225: PPUSH
14226: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14230: LD_EXP 14
14234: PPUSH
14235: LD_STRING D5-Har-3
14237: PPUSH
14238: CALL_OW 94
// timeToSupport = 5 5$0 ;
14242: LD_ADDR_EXP 28
14246: PUSH
14247: LD_INT 10500
14249: ST_TO_ADDR
// timerStatus = 2 ;
14250: LD_ADDR_EXP 29
14254: PUSH
14255: LD_INT 2
14257: ST_TO_ADDR
// startTimer = 1 ;
14258: LD_ADDR_EXP 30
14262: PUSH
14263: LD_INT 1
14265: ST_TO_ADDR
// harrAnswer = 3 ;
14266: LD_ADDR_EXP 26
14270: PUSH
14271: LD_INT 3
14273: ST_TO_ADDR
// end ; end ;
14274: GO 14277
14276: POP
// end ;
14277: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14278: LD_EXP 29
14282: PUSH
14283: LD_INT 2
14285: EQUAL
14286: PUSH
14287: LD_EXP 28
14291: PUSH
14292: LD_INT 0
14294: EQUAL
14295: AND
14296: IFFALSE 14573
14298: GO 14300
14300: DISABLE
// begin timerStatus = 4 ;
14301: LD_ADDR_EXP 29
14305: PUSH
14306: LD_INT 4
14308: ST_TO_ADDR
// if harrAnswer = 1 then
14309: LD_EXP 26
14313: PUSH
14314: LD_INT 1
14316: EQUAL
14317: IFFALSE 14397
// begin PrepareHarrisonSupport ( 3 ) ;
14319: LD_INT 3
14321: PPUSH
14322: CALL 1587 0 1
// wait ( 1 1$0 ) ;
14326: LD_INT 2100
14328: PPUSH
14329: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14333: LD_EXP 14
14337: PPUSH
14338: LD_STRING D7-Har-1
14340: PPUSH
14341: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14345: LD_STRING M2
14347: PPUSH
14348: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14352: LD_ADDR_EXP 27
14356: PUSH
14357: LD_INT 31500
14359: PUSH
14360: LD_INT 10500
14362: PUSH
14363: LD_INT 8400
14365: PUSH
14366: LD_INT 6300
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: LIST
14373: PUSH
14374: LD_OWVAR 67
14378: ARRAY
14379: PLUS
14380: ST_TO_ADDR
// startTimer = 1 ;
14381: LD_ADDR_EXP 30
14385: PUSH
14386: LD_INT 1
14388: ST_TO_ADDR
// timerStatus = 3 ;
14389: LD_ADDR_EXP 29
14393: PUSH
14394: LD_INT 3
14396: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14397: LD_EXP 26
14401: PUSH
14402: LD_INT 2
14404: EQUAL
14405: IFFALSE 14485
// begin PrepareHarrisonSupport ( 4 ) ;
14407: LD_INT 4
14409: PPUSH
14410: CALL 1587 0 1
// wait ( 1 1$0 ) ;
14414: LD_INT 2100
14416: PPUSH
14417: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14421: LD_EXP 14
14425: PPUSH
14426: LD_STRING D7-Har-1
14428: PPUSH
14429: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14433: LD_STRING M2
14435: PPUSH
14436: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14440: LD_ADDR_EXP 27
14444: PUSH
14445: LD_INT 27300
14447: PUSH
14448: LD_INT 8400
14450: PUSH
14451: LD_INT 8400
14453: PUSH
14454: LD_INT 6300
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: LIST
14461: PUSH
14462: LD_OWVAR 67
14466: ARRAY
14467: PLUS
14468: ST_TO_ADDR
// startTimer = 1 ;
14469: LD_ADDR_EXP 30
14473: PUSH
14474: LD_INT 1
14476: ST_TO_ADDR
// timerStatus = 3 ;
14477: LD_ADDR_EXP 29
14481: PUSH
14482: LD_INT 3
14484: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14485: LD_EXP 26
14489: PUSH
14490: LD_INT 3
14492: EQUAL
14493: IFFALSE 14573
// begin PrepareHarrisonSupport ( 5 ) ;
14495: LD_INT 5
14497: PPUSH
14498: CALL 1587 0 1
// wait ( 1 1$0 ) ;
14502: LD_INT 2100
14504: PPUSH
14505: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14509: LD_EXP 14
14513: PPUSH
14514: LD_STRING D7-Har-1
14516: PPUSH
14517: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14521: LD_STRING M2
14523: PPUSH
14524: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14528: LD_ADDR_EXP 27
14532: PUSH
14533: LD_INT 21000
14535: PUSH
14536: LD_INT 8400
14538: PUSH
14539: LD_INT 6300
14541: PUSH
14542: LD_INT 4200
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: LIST
14549: PUSH
14550: LD_OWVAR 67
14554: ARRAY
14555: PLUS
14556: ST_TO_ADDR
// startTimer = 1 ;
14557: LD_ADDR_EXP 30
14561: PUSH
14562: LD_INT 1
14564: ST_TO_ADDR
// timerStatus = 3 ;
14565: LD_ADDR_EXP 29
14569: PUSH
14570: LD_INT 3
14572: ST_TO_ADDR
// end ; end ;
14573: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14574: LD_EXP 27
14578: PUSH
14579: LD_INT 8400
14581: LESSEQUAL
14582: PUSH
14583: LD_EXP 29
14587: PUSH
14588: LD_INT 3
14590: EQUAL
14591: AND
14592: IFFALSE 14624
14594: GO 14596
14596: DISABLE
// begin DialogueOn ;
14597: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14601: LD_EXP 14
14605: PPUSH
14606: LD_STRING D7a-Har-1
14608: PPUSH
14609: CALL_OW 94
// DialogueOff ;
14613: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14617: LD_STRING M2a
14619: PPUSH
14620: CALL_OW 337
// end ;
14624: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14625: LD_EXP 27
14629: PUSH
14630: LD_INT 0
14632: LESSEQUAL
14633: PUSH
14634: LD_EXP 29
14638: PUSH
14639: LD_INT 3
14641: EQUAL
14642: AND
14643: PUSH
14644: LD_EXP 40
14648: NOT
14649: AND
14650: IFFALSE 14789
14652: GO 14654
14654: DISABLE
14655: LD_INT 0
14657: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14658: LD_ADDR_VAR 0 1
14662: PUSH
14663: LD_INT 22
14665: PUSH
14666: LD_INT 1
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PPUSH
14673: CALL_OW 69
14677: PUSH
14678: LD_EXP 1
14682: PUSH
14683: EMPTY
14684: LIST
14685: DIFF
14686: ST_TO_ADDR
// saveDonaldson = 2 ;
14687: LD_ADDR_EXP 24
14691: PUSH
14692: LD_INT 2
14694: ST_TO_ADDR
// DialogueOn ;
14695: CALL_OW 6
// if IsOK ( Donaldson ) then
14699: LD_EXP 13
14703: PPUSH
14704: CALL_OW 302
14708: IFFALSE 14724
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14710: LD_EXP 14
14714: PPUSH
14715: LD_STRING D8-Har-1
14717: PPUSH
14718: CALL_OW 94
// end else
14722: GO 14736
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14724: LD_EXP 14
14728: PPUSH
14729: LD_STRING D8-Har-1a
14731: PPUSH
14732: CALL_OW 94
// end ; DialogueOff ;
14736: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_INT 4
14747: PPUSH
14748: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14752: LD_VAR 0 1
14756: PPUSH
14757: LD_INT 88
14759: PPUSH
14760: LD_INT 89
14762: PPUSH
14763: CALL_OW 114
// honor = 0 ;
14767: LD_ADDR_EXP 39
14771: PUSH
14772: LD_INT 0
14774: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14775: LD_INT 350
14777: PPUSH
14778: CALL_OW 67
// YouLost ( LostCommand ) ;
14782: LD_STRING LostCommand
14784: PPUSH
14785: CALL_OW 104
// end ;
14789: PPOPN 1
14791: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14792: LD_INT 22
14794: PUSH
14795: LD_INT 6
14797: PUSH
14798: EMPTY
14799: LIST
14800: LIST
14801: PUSH
14802: LD_INT 21
14804: PUSH
14805: LD_INT 1
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PUSH
14812: EMPTY
14813: LIST
14814: LIST
14815: PPUSH
14816: CALL_OW 69
14820: PUSH
14821: LD_INT 0
14823: EQUAL
14824: PUSH
14825: LD_EXP 20
14829: PUSH
14830: LD_INT 0
14832: EQUAL
14833: AND
14834: PUSH
14835: LD_EXP 42
14839: PUSH
14840: LD_INT 1
14842: EQUAL
14843: AND
14844: IFFALSE 14938
14846: GO 14848
14848: DISABLE
14849: LD_INT 0
14851: PPUSH
14852: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14853: LD_ADDR_VAR 0 2
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_INT 1
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: PUSH
14868: LD_INT 21
14870: PUSH
14871: LD_INT 1
14873: PUSH
14874: EMPTY
14875: LIST
14876: LIST
14877: PUSH
14878: LD_INT 23
14880: PUSH
14881: LD_INT 1
14883: PUSH
14884: EMPTY
14885: LIST
14886: LIST
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: LIST
14892: PPUSH
14893: CALL_OW 69
14897: ST_TO_ADDR
// for i in tmp do
14898: LD_ADDR_VAR 0 1
14902: PUSH
14903: LD_VAR 0 2
14907: PUSH
14908: FOR_IN
14909: IFFALSE 14936
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14911: LD_VAR 0 1
14915: PPUSH
14916: LD_INT 1
14918: PPUSH
14919: LD_INT 4
14921: PPUSH
14922: CALL_OW 12
14926: PPUSH
14927: LD_INT 500
14929: PPUSH
14930: CALL_OW 492
// end ;
14934: GO 14908
14936: POP
14937: POP
// end ; end_of_file
14938: PPOPN 2
14940: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
14941: GO 14943
14943: DISABLE
14944: LD_INT 0
14946: PPUSH
// begin enemyWayX = [ ] ;
14947: LD_ADDR_EXP 46
14951: PUSH
14952: EMPTY
14953: ST_TO_ADDR
// enemyWayY = [ ] ;
14954: LD_ADDR_EXP 47
14958: PUSH
14959: EMPTY
14960: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
14961: LD_ADDR_VAR 0 1
14965: PUSH
14966: LD_INT 1
14968: PPUSH
14969: LD_INT 3
14971: PPUSH
14972: CALL_OW 12
14976: ST_TO_ADDR
// if rnd = 1 then
14977: LD_VAR 0 1
14981: PUSH
14982: LD_INT 1
14984: EQUAL
14985: IFFALSE 15025
// begin enemyWayX = [ 73 , 46 , 29 ] ;
14987: LD_ADDR_EXP 46
14991: PUSH
14992: LD_INT 73
14994: PUSH
14995: LD_INT 46
14997: PUSH
14998: LD_INT 29
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: LIST
15005: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15006: LD_ADDR_EXP 47
15010: PUSH
15011: LD_INT 71
15013: PUSH
15014: LD_INT 43
15016: PUSH
15017: LD_INT 29
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: ST_TO_ADDR
// end ; if rnd = 2 then
15025: LD_VAR 0 1
15029: PUSH
15030: LD_INT 2
15032: EQUAL
15033: IFFALSE 15057
// begin enemyWayX = [ 64 ] ;
15035: LD_ADDR_EXP 46
15039: PUSH
15040: LD_INT 64
15042: PUSH
15043: EMPTY
15044: LIST
15045: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15046: LD_ADDR_EXP 47
15050: PUSH
15051: LD_INT 43
15053: PUSH
15054: EMPTY
15055: LIST
15056: ST_TO_ADDR
// end ; if rnd = 3 then
15057: LD_VAR 0 1
15061: PUSH
15062: LD_INT 3
15064: EQUAL
15065: IFFALSE 15089
// begin enemyWayX = [ 80 ] ;
15067: LD_ADDR_EXP 46
15071: PUSH
15072: LD_INT 80
15074: PUSH
15075: EMPTY
15076: LIST
15077: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15078: LD_ADDR_EXP 47
15082: PUSH
15083: LD_INT 28
15085: PUSH
15086: EMPTY
15087: LIST
15088: ST_TO_ADDR
// end ; enable ;
15089: ENABLE
// end ;
15090: PPOPN 1
15092: END
// every 0 0$1 trigger AIEnable = 1 do
15093: LD_EXP 37
15097: PUSH
15098: LD_INT 1
15100: EQUAL
15101: IFFALSE 15215
15103: GO 15105
15105: DISABLE
// begin enable ;
15106: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15107: LD_INT 3
15109: PPUSH
15110: LD_INT 21
15112: PPUSH
15113: LD_INT 7
15115: PPUSH
15116: CALL 5598 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15120: LD_INT 3
15122: PPUSH
15123: LD_INT 8
15125: PPUSH
15126: LD_INT 7
15128: PPUSH
15129: LD_INT 1
15131: PPUSH
15132: CALL 5904 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15136: LD_INT 3
15138: PPUSH
15139: LD_INT 17
15141: PPUSH
15142: LD_INT 108
15144: PPUSH
15145: LD_INT 95
15147: PPUSH
15148: CALL 7148 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15152: LD_INT 3
15154: PPUSH
15155: LD_INT 23
15157: PPUSH
15158: LD_EXP 46
15162: PPUSH
15163: LD_EXP 47
15167: PPUSH
15168: CALL 6560 0 4
// if baseReadyToBuild = 2 then
15172: LD_EXP 20
15176: PUSH
15177: LD_INT 2
15179: EQUAL
15180: IFFALSE 15215
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15182: LD_INT 6
15184: PPUSH
15185: LD_EXP 21
15189: PPUSH
15190: LD_INT 6
15192: PPUSH
15193: CALL 5598 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15197: LD_INT 6
15199: PPUSH
15200: LD_INT 9
15202: PPUSH
15203: LD_INT 6
15205: PPUSH
15206: LD_EXP 22
15210: PPUSH
15211: CALL 5904 0 4
// end ; end ;
15215: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15216: LD_INT 22
15218: PUSH
15219: LD_INT 3
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 21
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 55
15238: PUSH
15239: EMPTY
15240: LIST
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: LIST
15246: PPUSH
15247: CALL_OW 69
15251: PUSH
15252: LD_INT 0
15254: EQUAL
15255: PUSH
15256: LD_INT 1
15258: PPUSH
15259: CALL_OW 255
15263: PUSH
15264: LD_INT 3
15266: EQUAL
15267: AND
15268: PUSH
15269: LD_INT 21
15271: PPUSH
15272: CALL_OW 302
15276: AND
15277: PUSH
15278: LD_INT 21
15280: PPUSH
15281: CALL_OW 255
15285: PUSH
15286: LD_INT 3
15288: EQUAL
15289: AND
15290: PUSH
15291: LD_INT 21
15293: PPUSH
15294: CALL_OW 302
15298: AND
15299: IFFALSE 15504
15301: GO 15303
15303: DISABLE
// begin enable ;
15304: ENABLE
// if Difficulty = 1 then
15305: LD_OWVAR 67
15309: PUSH
15310: LD_INT 1
15312: EQUAL
15313: IFFALSE 15357
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15315: LD_INT 3
15317: PPUSH
15318: LD_INT 24
15320: PPUSH
15321: LD_OWVAR 67
15325: PUSH
15326: LD_INT 2
15328: PLUS
15329: PPUSH
15330: LD_INT 42
15332: PUSH
15333: LD_INT 42
15335: PUSH
15336: LD_INT 43
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: LIST
15343: PPUSH
15344: LD_INT 1
15346: PPUSH
15347: LD_INT 1
15349: PPUSH
15350: LD_INT 21
15352: PPUSH
15353: CALL 6448 0 7
// if Difficulty = 2 then
15357: LD_OWVAR 67
15361: PUSH
15362: LD_INT 2
15364: EQUAL
15365: IFFALSE 15432
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15367: LD_INT 3
15369: PPUSH
15370: LD_INT 24
15372: PPUSH
15373: LD_OWVAR 67
15377: PUSH
15378: LD_INT 2
15380: PLUS
15381: PPUSH
15382: LD_INT 42
15384: PUSH
15385: LD_INT 42
15387: PUSH
15388: LD_INT 43
15390: PUSH
15391: LD_INT 43
15393: PUSH
15394: EMPTY
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: PPUSH
15400: LD_INT 1
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 21
15408: PUSH
15409: LD_INT 22
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 1
15418: PPUSH
15419: LD_INT 2
15421: PPUSH
15422: CALL_OW 12
15426: ARRAY
15427: PPUSH
15428: CALL 6448 0 7
// if Difficulty = 3 then
15432: LD_OWVAR 67
15436: PUSH
15437: LD_INT 3
15439: EQUAL
15440: IFFALSE 15504
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15442: LD_INT 3
15444: PPUSH
15445: LD_INT 24
15447: PPUSH
15448: LD_OWVAR 67
15452: PUSH
15453: LD_INT 2
15455: PPUSH
15456: LD_INT 3
15458: PPUSH
15459: CALL_OW 12
15463: PLUS
15464: PPUSH
15465: LD_INT 43
15467: PUSH
15468: LD_INT 43
15470: PUSH
15471: LD_INT 43
15473: PUSH
15474: LD_INT 43
15476: PUSH
15477: LD_INT 44
15479: PUSH
15480: LD_INT 44
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: LIST
15487: LIST
15488: LIST
15489: LIST
15490: PPUSH
15491: LD_INT 1
15493: PPUSH
15494: LD_INT 1
15496: PPUSH
15497: LD_INT 22
15499: PPUSH
15500: CALL 6448 0 7
// end ;
15504: END
// every 0 0$1 do
15505: GO 15507
15507: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15508: LD_INT 3
15510: PPUSH
15511: LD_INT 1
15513: PPUSH
15514: LD_INT 3
15516: PPUSH
15517: CALL 5513 0 3
15521: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15522: LD_EXP 20
15526: PUSH
15527: LD_INT 1
15529: EQUAL
15530: IFFALSE 15677
15532: GO 15534
15534: DISABLE
15535: LD_INT 0
15537: PPUSH
15538: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15539: LD_ADDR_VAR 0 2
15543: PUSH
15544: LD_INT 22
15546: PUSH
15547: LD_INT 6
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 21
15556: PUSH
15557: LD_INT 2
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: LD_INT 34
15566: PUSH
15567: LD_INT 51
15569: PUSH
15570: EMPTY
15571: LIST
15572: LIST
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: PPUSH
15579: CALL_OW 69
15583: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15584: LD_VAR 0 2
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: LD_EXP 21
15597: PPUSH
15598: CALL_OW 250
15602: PUSH
15603: LD_INT 5
15605: MINUS
15606: PPUSH
15607: LD_EXP 21
15611: PPUSH
15612: CALL_OW 251
15616: PUSH
15617: LD_INT 5
15619: MINUS
15620: PPUSH
15621: CALL_OW 111
// wait ( 0 0$5 ) ;
15625: LD_INT 175
15627: PPUSH
15628: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15632: LD_VAR 0 2
15636: PUSH
15637: LD_INT 1
15639: ARRAY
15640: PPUSH
15641: LD_INT 41
15643: PPUSH
15644: LD_INT 52
15646: PPUSH
15647: CALL_OW 177
// wait ( 0 0$40 ) ;
15651: LD_INT 1400
15653: PPUSH
15654: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15658: LD_VAR 0 2
15662: PUSH
15663: LD_INT 1
15665: ARRAY
15666: PPUSH
15667: LD_INT 41
15669: PPUSH
15670: LD_INT 44
15672: PPUSH
15673: CALL_OW 111
// end ;
15677: PPOPN 2
15679: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15680: LD_EXP 21
15684: PPUSH
15685: CALL_OW 274
15689: PPUSH
15690: LD_INT 1
15692: PPUSH
15693: CALL_OW 275
15697: PUSH
15698: LD_INT 100
15700: GREATEREQUAL
15701: IFFALSE 15929
15703: GO 15705
15705: DISABLE
15706: LD_INT 0
15708: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15709: LD_ADDR_VAR 0 1
15713: PUSH
15714: LD_INT 22
15716: PUSH
15717: LD_INT 6
15719: PUSH
15720: EMPTY
15721: LIST
15722: LIST
15723: PUSH
15724: LD_INT 21
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 25
15736: PUSH
15737: LD_INT 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: EMPTY
15745: LIST
15746: LIST
15747: LIST
15748: PPUSH
15749: CALL_OW 69
15753: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15754: LD_VAR 0 1
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PPUSH
15763: LD_INT 4
15765: PPUSH
15766: LD_INT 39
15768: PPUSH
15769: LD_INT 37
15771: PPUSH
15772: LD_INT 3
15774: PPUSH
15775: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15779: LD_VAR 0 1
15783: PUSH
15784: LD_INT 1
15786: ARRAY
15787: PPUSH
15788: LD_INT 29
15790: PPUSH
15791: LD_INT 42
15793: PPUSH
15794: LD_INT 54
15796: PPUSH
15797: LD_INT 3
15799: PPUSH
15800: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15804: LD_VAR 0 1
15808: PUSH
15809: LD_INT 1
15811: ARRAY
15812: PPUSH
15813: LD_INT 6
15815: PPUSH
15816: LD_INT 38
15818: PPUSH
15819: LD_INT 48
15821: PPUSH
15822: LD_INT 0
15824: PPUSH
15825: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15829: LD_VAR 0 1
15833: PUSH
15834: LD_INT 1
15836: ARRAY
15837: PPUSH
15838: LD_INT 2
15840: PPUSH
15841: LD_INT 32
15843: PPUSH
15844: LD_INT 38
15846: PPUSH
15847: LD_INT 2
15849: PPUSH
15850: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15854: LD_VAR 0 1
15858: PUSH
15859: LD_INT 1
15861: ARRAY
15862: PPUSH
15863: LD_INT 26
15865: PPUSH
15866: LD_INT 39
15868: PPUSH
15869: LD_INT 55
15871: PPUSH
15872: LD_INT 3
15874: PPUSH
15875: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15879: LD_VAR 0 1
15883: PUSH
15884: LD_INT 1
15886: ARRAY
15887: PPUSH
15888: LD_INT 32
15890: PPUSH
15891: LD_INT 31
15893: PPUSH
15894: LD_INT 31
15896: PPUSH
15897: LD_INT 3
15899: PPUSH
15900: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15904: LD_VAR 0 1
15908: PUSH
15909: LD_INT 1
15911: ARRAY
15912: PPUSH
15913: LD_INT 31
15915: PPUSH
15916: LD_INT 50
15918: PPUSH
15919: LD_INT 51
15921: PPUSH
15922: LD_INT 4
15924: PPUSH
15925: CALL_OW 205
// end ; end_of_file
15929: PPOPN 1
15931: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15932: LD_INT 0
15934: PPUSH
15935: PPUSH
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
15940: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15941: LD_ADDR_VAR 0 3
15945: PUSH
15946: LD_INT 22
15948: PUSH
15949: LD_INT 6
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 21
15958: PUSH
15959: LD_INT 1
15961: PUSH
15962: EMPTY
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 25
15968: PUSH
15969: LD_INT 1
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: PUSH
15976: LD_INT 3
15978: PUSH
15979: LD_INT 54
15981: PUSH
15982: EMPTY
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16000: LD_ADDR_VAR 0 7
16004: PUSH
16005: LD_INT 22
16007: PUSH
16008: LD_INT 6
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 21
16017: PUSH
16018: LD_INT 1
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 25
16027: PUSH
16028: LD_INT 1
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 54
16037: PUSH
16038: EMPTY
16039: LIST
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL_OW 69
16051: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16052: LD_ADDR_VAR 0 4
16056: PUSH
16057: LD_INT 22
16059: PUSH
16060: LD_INT 6
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 21
16069: PUSH
16070: LD_INT 1
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: PUSH
16077: LD_INT 25
16079: PUSH
16080: LD_INT 2
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: LIST
16091: PPUSH
16092: CALL_OW 69
16096: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16097: LD_ADDR_VAR 0 6
16101: PUSH
16102: LD_INT 22
16104: PUSH
16105: LD_INT 6
16107: PUSH
16108: EMPTY
16109: LIST
16110: LIST
16111: PUSH
16112: LD_INT 21
16114: PUSH
16115: LD_INT 1
16117: PUSH
16118: EMPTY
16119: LIST
16120: LIST
16121: PUSH
16122: LD_INT 25
16124: PUSH
16125: LD_INT 4
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16142: LD_ADDR_VAR 0 8
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_INT 6
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 21
16159: PUSH
16160: LD_INT 2
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 34
16169: PUSH
16170: LD_INT 51
16172: PUSH
16173: EMPTY
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 255
16196: PUSH
16197: LD_INT 6
16199: EQUAL
16200: PUSH
16201: LD_VAR 0 1
16205: PPUSH
16206: CALL_OW 266
16210: PUSH
16211: LD_INT 0
16213: EQUAL
16214: AND
16215: IFFALSE 16235
// begin ruPDepot = building ;
16217: LD_ADDR_EXP 21
16221: PUSH
16222: LD_VAR 0 1
16226: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16227: LD_ADDR_EXP 20
16231: PUSH
16232: LD_INT 1
16234: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16235: LD_VAR 0 1
16239: PPUSH
16240: CALL_OW 266
16244: PUSH
16245: LD_INT 4
16247: EQUAL
16248: PUSH
16249: LD_VAR 0 1
16253: PPUSH
16254: CALL_OW 255
16258: PUSH
16259: LD_INT 6
16261: EQUAL
16262: AND
16263: IFFALSE 16296
// for i in tmpSold do
16265: LD_ADDR_VAR 0 2
16269: PUSH
16270: LD_VAR 0 3
16274: PUSH
16275: FOR_IN
16276: IFFALSE 16294
// ComEnterUnit ( i , building ) ;
16278: LD_VAR 0 2
16282: PPUSH
16283: LD_VAR 0 1
16287: PPUSH
16288: CALL_OW 120
16292: GO 16275
16294: POP
16295: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16296: LD_VAR 0 1
16300: PPUSH
16301: CALL_OW 266
16305: PUSH
16306: LD_INT 6
16308: EQUAL
16309: PUSH
16310: LD_VAR 0 1
16314: PPUSH
16315: CALL_OW 255
16319: PUSH
16320: LD_INT 6
16322: EQUAL
16323: AND
16324: IFFALSE 16382
// begin for i in tmpSci do
16326: LD_ADDR_VAR 0 2
16330: PUSH
16331: LD_VAR 0 6
16335: PUSH
16336: FOR_IN
16337: IFFALSE 16355
// ComEnterUnit ( i , building ) ;
16339: LD_VAR 0 2
16343: PPUSH
16344: LD_VAR 0 1
16348: PPUSH
16349: CALL_OW 120
16353: GO 16336
16355: POP
16356: POP
// ResAllTechs ( 6 , building , 3 ) ;
16357: LD_INT 6
16359: PPUSH
16360: LD_VAR 0 1
16364: PPUSH
16365: LD_INT 3
16367: PPUSH
16368: CALL 5513 0 3
// ruPLab = building ;
16372: LD_ADDR_EXP 22
16376: PUSH
16377: LD_VAR 0 1
16381: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16382: LD_VAR 0 1
16386: PPUSH
16387: CALL_OW 266
16391: PUSH
16392: LD_INT 2
16394: EQUAL
16395: PUSH
16396: LD_VAR 0 1
16400: PPUSH
16401: CALL_OW 255
16405: PUSH
16406: LD_INT 6
16408: EQUAL
16409: AND
16410: IFFALSE 16461
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16412: LD_ADDR_VAR 0 5
16416: PUSH
16417: LD_VAR 0 8
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: CALL_OW 313
16430: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16431: LD_VAR 0 5
16435: PPUSH
16436: CALL_OW 121
// wait ( 0 0$1 ) ;
16440: LD_INT 35
16442: PPUSH
16443: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16461: LD_VAR 0 1
16465: PPUSH
16466: CALL_OW 266
16470: PUSH
16471: LD_INT 32
16473: EQUAL
16474: PUSH
16475: LD_VAR 0 1
16479: PPUSH
16480: CALL_OW 255
16484: PUSH
16485: LD_INT 6
16487: EQUAL
16488: AND
16489: IFFALSE 16541
// begin ComPlaceWeapon ( building , 42 ) ;
16491: LD_VAR 0 1
16495: PPUSH
16496: LD_INT 42
16498: PPUSH
16499: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16503: LD_VAR 0 7
16507: PUSH
16508: LD_INT 1
16510: ARRAY
16511: PPUSH
16512: CALL_OW 122
// wait ( 0 0$1 ) ;
16516: LD_INT 35
16518: PPUSH
16519: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16523: LD_VAR 0 7
16527: PUSH
16528: LD_INT 1
16530: ARRAY
16531: PPUSH
16532: LD_VAR 0 1
16536: PPUSH
16537: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16541: LD_VAR 0 1
16545: PPUSH
16546: CALL_OW 266
16550: PUSH
16551: LD_INT 31
16553: EQUAL
16554: PUSH
16555: LD_VAR 0 1
16559: PPUSH
16560: CALL_OW 255
16564: PUSH
16565: LD_INT 6
16567: EQUAL
16568: AND
16569: IFFALSE 16635
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16571: LD_VAR 0 7
16575: PUSH
16576: LD_INT 2
16578: ARRAY
16579: PPUSH
16580: CALL_OW 122
// wait ( 0 0$1 ) ;
16584: LD_INT 35
16586: PPUSH
16587: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16591: LD_VAR 0 7
16595: PUSH
16596: LD_INT 2
16598: ARRAY
16599: PPUSH
16600: LD_VAR 0 1
16604: PPUSH
16605: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16609: LD_VAR 0 4
16613: PUSH
16614: LD_INT 1
16616: ARRAY
16617: PPUSH
16618: LD_EXP 21
16622: PPUSH
16623: CALL_OW 120
// baseReadyToBuild = 2 ;
16627: LD_ADDR_EXP 20
16631: PUSH
16632: LD_INT 2
16634: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16635: LD_VAR 0 1
16639: PPUSH
16640: CALL_OW 266
16644: PUSH
16645: LD_INT 32
16647: EQUAL
16648: PUSH
16649: LD_VAR 0 1
16653: PPUSH
16654: CALL_OW 255
16658: PUSH
16659: LD_INT 1
16661: EQUAL
16662: AND
16663: PUSH
16664: LD_EXP 32
16668: PUSH
16669: LD_INT 0
16671: EQUAL
16672: AND
16673: IFFALSE 16918
// begin bunkerDialog = 1 ;
16675: LD_ADDR_EXP 32
16679: PUSH
16680: LD_INT 1
16682: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16683: LD_EXP 11
16687: PPUSH
16688: CALL_OW 302
16692: IFFALSE 16708
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16694: LD_EXP 11
16698: PPUSH
16699: LD_STRING D11-Eng1-1
16701: PPUSH
16702: CALL_OW 88
// end else
16706: GO 16904
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16708: LD_INT 22
16710: PUSH
16711: LD_INT 1
16713: PUSH
16714: EMPTY
16715: LIST
16716: LIST
16717: PUSH
16718: LD_INT 21
16720: PUSH
16721: LD_INT 1
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 25
16730: PUSH
16731: LD_INT 3
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PUSH
16738: LD_INT 26
16740: PUSH
16741: LD_INT 1
16743: PUSH
16744: EMPTY
16745: LIST
16746: LIST
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: PPUSH
16754: CALL_OW 69
16758: PUSH
16759: LD_EXP 1
16763: PUSH
16764: EMPTY
16765: LIST
16766: PUSH
16767: LD_INT 0
16769: GREATER
16770: DIFF
16771: IFFALSE 16845
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16773: LD_INT 22
16775: PUSH
16776: LD_INT 1
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 21
16785: PUSH
16786: LD_INT 1
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 2
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: PUSH
16803: LD_INT 26
16805: PUSH
16806: LD_INT 1
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: PUSH
16813: EMPTY
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: PPUSH
16819: CALL_OW 69
16823: PUSH
16824: LD_EXP 1
16828: PUSH
16829: EMPTY
16830: LIST
16831: DIFF
16832: PPUSH
16833: LD_STRING D11-Eng1-1
16835: PPUSH
16836: LD_STRING D11-Eng1-1
16838: PPUSH
16839: CALL 4074 0 3
// end else
16843: GO 16904
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16845: LD_INT 22
16847: PUSH
16848: LD_INT 1
16850: PUSH
16851: EMPTY
16852: LIST
16853: LIST
16854: PUSH
16855: LD_INT 21
16857: PUSH
16858: LD_INT 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 26
16867: PUSH
16868: LD_INT 1
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: PPUSH
16880: CALL_OW 69
16884: PUSH
16885: LD_EXP 1
16889: PUSH
16890: EMPTY
16891: LIST
16892: DIFF
16893: PPUSH
16894: LD_STRING D11-Eng1-1
16896: PPUSH
16897: LD_STRING D11-Eng1-1
16899: PPUSH
16900: CALL 4074 0 3
// end ; end ; if energyVDialog = 0 then
16904: LD_EXP 33
16908: PUSH
16909: LD_INT 0
16911: EQUAL
16912: IFFALSE 16918
// EnergyDialog ;
16914: CALL 4565 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 266
16927: PUSH
16928: LD_INT 29
16930: EQUAL
16931: PUSH
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 255
16941: PUSH
16942: LD_INT 1
16944: EQUAL
16945: AND
16946: IFFALSE 16956
// buildOil = 1 ;
16948: LD_ADDR_EXP 34
16952: PUSH
16953: LD_INT 1
16955: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 266
16965: PUSH
16966: LD_INT 26
16968: EQUAL
16969: PUSH
16970: LD_VAR 0 1
16974: PPUSH
16975: CALL_OW 255
16979: PUSH
16980: LD_INT 1
16982: EQUAL
16983: AND
16984: IFFALSE 16994
// buildPower = 1 ;
16986: LD_ADDR_EXP 35
16990: PUSH
16991: LD_INT 1
16993: ST_TO_ADDR
// end ;
16994: PPOPN 8
16996: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16997: LD_VAR 0 1
17001: PPUSH
17002: CALL_OW 266
17006: PUSH
17007: LD_INT 3
17009: EQUAL
17010: PUSH
17011: LD_VAR 0 1
17015: PPUSH
17016: CALL_OW 255
17020: PUSH
17021: LD_INT 1
17023: EQUAL
17024: AND
17025: PUSH
17026: LD_EXP 31
17030: PUSH
17031: LD_INT 0
17033: EQUAL
17034: AND
17035: IFFALSE 17351
// begin factoryDialog = 1 ;
17037: LD_ADDR_EXP 31
17041: PUSH
17042: LD_INT 1
17044: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17045: LD_INT 22
17047: PUSH
17048: LD_INT 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 21
17057: PUSH
17058: LD_INT 3
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 30
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 24
17077: PUSH
17078: LD_INT 1000
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: PPUSH
17091: CALL_OW 69
17095: PUSH
17096: LD_INT 1
17098: ARRAY
17099: PPUSH
17100: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17104: LD_EXP 1
17108: PPUSH
17109: LD_STRING D9a-JMM-1
17111: PPUSH
17112: CALL_OW 88
// if IsOK ( Campell ) then
17116: LD_EXP 12
17120: PPUSH
17121: CALL_OW 302
17125: IFFALSE 17141
// begin Say ( Campell , D9a-Mech1-1 ) ;
17127: LD_EXP 12
17131: PPUSH
17132: LD_STRING D9a-Mech1-1
17134: PPUSH
17135: CALL_OW 88
// end else
17139: GO 17337
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17141: LD_INT 22
17143: PUSH
17144: LD_INT 1
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 21
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: EMPTY
17158: LIST
17159: LIST
17160: PUSH
17161: LD_INT 25
17163: PUSH
17164: LD_INT 3
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: LD_INT 26
17173: PUSH
17174: LD_INT 1
17176: PUSH
17177: EMPTY
17178: LIST
17179: LIST
17180: PUSH
17181: EMPTY
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: PPUSH
17187: CALL_OW 69
17191: PUSH
17192: LD_EXP 1
17196: PUSH
17197: EMPTY
17198: LIST
17199: PUSH
17200: LD_INT 0
17202: GREATER
17203: DIFF
17204: IFFALSE 17278
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17206: LD_INT 22
17208: PUSH
17209: LD_INT 1
17211: PUSH
17212: EMPTY
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 21
17218: PUSH
17219: LD_INT 1
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: PUSH
17226: LD_INT 25
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 26
17238: PUSH
17239: LD_INT 1
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: PPUSH
17252: CALL_OW 69
17256: PUSH
17257: LD_EXP 1
17261: PUSH
17262: EMPTY
17263: LIST
17264: DIFF
17265: PPUSH
17266: LD_STRING D9a-Mech1-1
17268: PPUSH
17269: LD_STRING D9a-Mech1-1
17271: PPUSH
17272: CALL 4074 0 3
// end else
17276: GO 17337
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17278: LD_INT 22
17280: PUSH
17281: LD_INT 1
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 21
17290: PUSH
17291: LD_INT 1
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: LIST
17312: PPUSH
17313: CALL_OW 69
17317: PUSH
17318: LD_EXP 1
17322: PUSH
17323: EMPTY
17324: LIST
17325: DIFF
17326: PPUSH
17327: LD_STRING D9a-Mech1-1
17329: PPUSH
17330: LD_STRING D9a-Mech1-1
17332: PPUSH
17333: CALL 4074 0 3
// end ; end ; if energyVDialog = 0 then
17337: LD_EXP 33
17341: PUSH
17342: LD_INT 0
17344: EQUAL
17345: IFFALSE 17351
// EnergyDialog ;
17347: CALL 4565 0 0
// end ; end ;
17351: PPOPN 1
17353: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17354: LD_VAR 0 1
17358: PPUSH
17359: CALL_OW 247
17363: PUSH
17364: LD_INT 1
17366: EQUAL
17367: PUSH
17368: LD_VAR 0 1
17372: PPUSH
17373: CALL_OW 255
17377: PUSH
17378: LD_INT 1
17380: EQUAL
17381: AND
17382: IFFALSE 17398
// lostCounter = lostCounter + 1 ;
17384: LD_ADDR_EXP 38
17388: PUSH
17389: LD_EXP 38
17393: PUSH
17394: LD_INT 1
17396: PLUS
17397: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 257
17407: PUSH
17408: LD_INT 3
17410: EQUAL
17411: PUSH
17412: LD_VAR 0 1
17416: PPUSH
17417: CALL_OW 255
17421: PUSH
17422: LD_INT 3
17424: EQUAL
17425: AND
17426: PUSH
17427: LD_INT 24
17429: PPUSH
17430: CALL_OW 302
17434: AND
17435: PUSH
17436: LD_INT 24
17438: PPUSH
17439: CALL_OW 255
17443: PUSH
17444: LD_INT 3
17446: EQUAL
17447: AND
17448: IFFALSE 17516
// begin uc_side = 3 ;
17450: LD_ADDR_OWVAR 20
17454: PUSH
17455: LD_INT 3
17457: ST_TO_ADDR
// uc_nation = 3 ;
17458: LD_ADDR_OWVAR 21
17462: PUSH
17463: LD_INT 3
17465: ST_TO_ADDR
// hc_gallery :=  ;
17466: LD_ADDR_OWVAR 33
17470: PUSH
17471: LD_STRING 
17473: ST_TO_ADDR
// hc_name :=  ;
17474: LD_ADDR_OWVAR 26
17478: PUSH
17479: LD_STRING 
17481: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17482: LD_INT 0
17484: PPUSH
17485: LD_EXP 16
17489: PPUSH
17490: LD_EXP 17
17494: PPUSH
17495: CALL_OW 12
17499: PPUSH
17500: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17504: CALL_OW 44
17508: PPUSH
17509: LD_INT 24
17511: PPUSH
17512: CALL_OW 52
// end ; end ;
17516: PPOPN 1
17518: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17519: LD_INT 0
17521: PPUSH
17522: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17523: LD_ADDR_VAR 0 4
17527: PUSH
17528: LD_INT 22
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PPUSH
17538: CALL_OW 69
17542: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17543: LD_VAR 0 1
17547: PUSH
17548: LD_INT 1
17550: EQUAL
17551: PUSH
17552: LD_VAR 0 2
17556: PUSH
17557: LD_INT 6
17559: EQUAL
17560: AND
17561: PUSH
17562: LD_EXP 41
17566: PUSH
17567: LD_INT 1
17569: EQUAL
17570: AND
17571: IFFALSE 17626
// begin donaldsonCoopAttack = 0 ;
17573: LD_ADDR_EXP 41
17577: PUSH
17578: LD_INT 0
17580: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17581: LD_ADDR_VAR 0 3
17585: PUSH
17586: LD_INT 22
17588: PUSH
17589: LD_INT 4
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: PPUSH
17599: CALL_OW 69
17603: PUSH
17604: FOR_IN
17605: IFFALSE 17624
// ComAgressiveMove ( i , 52 , 64 ) ;
17607: LD_VAR 0 3
17611: PPUSH
17612: LD_INT 52
17614: PPUSH
17615: LD_INT 64
17617: PPUSH
17618: CALL_OW 114
17622: GO 17604
17624: POP
17625: POP
// end ; end ;
17626: PPOPN 4
17628: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 264
17638: PUSH
17639: LD_INT 53
17641: EQUAL
17642: IFFALSE 17727
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17644: LD_VAR 0 1
17648: PPUSH
17649: LD_INT 21
17651: PPUSH
17652: CALL 4781 0 2
// uc_side = 3 ;
17656: LD_ADDR_OWVAR 20
17660: PUSH
17661: LD_INT 3
17663: ST_TO_ADDR
// uc_nation = 3 ;
17664: LD_ADDR_OWVAR 21
17668: PUSH
17669: LD_INT 3
17671: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17672: LD_INT 0
17674: PPUSH
17675: LD_EXP 17
17679: PPUSH
17680: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17684: CALL_OW 44
17688: PPUSH
17689: LD_VAR 0 2
17693: PPUSH
17694: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17698: LD_VAR 0 1
17702: PPUSH
17703: LD_INT 6
17705: PPUSH
17706: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17710: LD_VAR 0 1
17714: PPUSH
17715: CALL_OW 313
17719: PPUSH
17720: LD_INT 6
17722: PPUSH
17723: CALL_OW 235
// end ; end ;
17727: PPOPN 2
17729: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17730: LD_INT 0
17732: PPUSH
17733: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 255
17743: PUSH
17744: LD_INT 3
17746: EQUAL
17747: PUSH
17748: LD_VAR 0 1
17752: PPUSH
17753: CALL_OW 247
17757: PUSH
17758: LD_INT 2
17760: EQUAL
17761: AND
17762: IFFALSE 17856
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
17764: LD_VAR 0 1
17768: PPUSH
17769: CALL_OW 264
17773: PUSH
17774: LD_INT 42
17776: EQUAL
17777: PUSH
17778: LD_VAR 0 1
17782: PPUSH
17783: CALL_OW 264
17787: PUSH
17788: LD_INT 43
17790: EQUAL
17791: OR
17792: PUSH
17793: LD_VAR 0 1
17797: PPUSH
17798: CALL_OW 264
17802: PUSH
17803: LD_INT 44
17805: EQUAL
17806: OR
17807: IFFALSE 17856
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17809: LD_INT 24
17811: PPUSH
17812: LD_VAR 0 1
17816: PPUSH
17817: CALL_OW 265
17821: PPUSH
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 262
17831: PPUSH
17832: LD_VAR 0 1
17836: PPUSH
17837: CALL_OW 263
17841: PPUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 264
17851: PPUSH
17852: CALL_OW 185
// end ;
17856: PPOPN 3
17858: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 255
17868: PUSH
17869: LD_INT 3
17871: EQUAL
17872: PUSH
17873: LD_VAR 0 2
17877: PPUSH
17878: CALL_OW 255
17882: PUSH
17883: LD_INT 3
17885: EQUAL
17886: AND
17887: PUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL_OW 302
17897: AND
17898: IFFALSE 17940
// begin ComRepairVehicle ( human , vehicle ) ;
17900: LD_VAR 0 2
17904: PPUSH
17905: LD_VAR 0 1
17909: PPUSH
17910: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17914: LD_VAR 0 2
17918: PPUSH
17919: LD_VAR 0 1
17923: PPUSH
17924: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17928: LD_VAR 0 1
17932: PPUSH
17933: LD_INT 100
17935: PPUSH
17936: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
17940: LD_VAR 0 1
17944: PPUSH
17945: CALL_OW 255
17949: PUSH
17950: LD_INT 3
17952: EQUAL
17953: PUSH
17954: LD_VAR 0 2
17958: PPUSH
17959: CALL_OW 255
17963: PUSH
17964: LD_INT 3
17966: EQUAL
17967: AND
17968: PUSH
17969: LD_INT 24
17971: PPUSH
17972: CALL_OW 302
17976: AND
17977: PUSH
17978: LD_VAR 0 1
17982: PPUSH
17983: CALL_OW 302
17987: NOT
17988: AND
17989: IFFALSE 18003
// ComEnterUnit ( human , rubfact0 ) ;
17991: LD_VAR 0 2
17995: PPUSH
17996: LD_INT 24
17998: PPUSH
17999: CALL_OW 120
// end ;
18003: PPOPN 2
18005: END
// on Command ( comandid ) do var i , j , tmp ;
18006: LD_INT 0
18008: PPUSH
18009: PPUSH
18010: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18011: LD_ADDR_VAR 0 2
18015: PUSH
18016: LD_INT 22
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 2
18028: PUSH
18029: LD_INT 21
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 21
18041: PUSH
18042: LD_INT 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: LIST
18053: PUSH
18054: EMPTY
18055: LIST
18056: LIST
18057: PPUSH
18058: CALL_OW 69
18062: PUSH
18063: FOR_IN
18064: IFFALSE 18174
// begin if GetTaskList ( i ) > 0 then
18066: LD_VAR 0 2
18070: PPUSH
18071: CALL_OW 437
18075: PUSH
18076: LD_INT 0
18078: GREATER
18079: IFFALSE 18172
// begin for j = 1 to GetTaskList ( i ) do
18081: LD_ADDR_VAR 0 3
18085: PUSH
18086: DOUBLE
18087: LD_INT 1
18089: DEC
18090: ST_TO_ADDR
18091: LD_VAR 0 2
18095: PPUSH
18096: CALL_OW 437
18100: PUSH
18101: FOR_TO
18102: IFFALSE 18170
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18104: LD_ADDR_VAR 0 4
18108: PUSH
18109: LD_VAR 0 2
18113: PPUSH
18114: CALL_OW 437
18118: PUSH
18119: LD_VAR 0 3
18123: ARRAY
18124: PUSH
18125: LD_INT 4
18127: ARRAY
18128: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18129: LD_VAR 0 4
18133: PPUSH
18134: CALL_OW 255
18138: PUSH
18139: LD_INT 4
18141: EQUAL
18142: PUSH
18143: LD_VAR 0 4
18147: PPUSH
18148: CALL_OW 255
18152: PUSH
18153: LD_INT 0
18155: EQUAL
18156: OR
18157: IFFALSE 18168
// ComStop ( i ) ;
18159: LD_VAR 0 2
18163: PPUSH
18164: CALL_OW 141
// end ;
18168: GO 18101
18170: POP
18171: POP
// end ; end ;
18172: GO 18063
18174: POP
18175: POP
// end ; end_of_file
18176: PPOPN 4
18178: END
// every 10 10$0 do
18179: GO 18181
18181: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18182: LD_INT 5
18184: PPUSH
18185: LD_INT 3
18187: PPUSH
18188: LD_INT 2
18190: PPUSH
18191: LD_INT 5
18193: PPUSH
18194: CALL_OW 12
18198: PUSH
18199: LD_INT 2
18201: PUSH
18202: LD_INT 3
18204: PUSH
18205: LD_INT 3
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: LIST
18212: PUSH
18213: LD_OWVAR 67
18217: ARRAY
18218: PLUS
18219: PPUSH
18220: LD_INT 0
18222: PPUSH
18223: LD_INT 0
18225: PPUSH
18226: LD_INT 0
18228: PPUSH
18229: LD_INT 0
18231: PPUSH
18232: LD_EXP 16
18236: PPUSH
18237: LD_EXP 17
18241: PPUSH
18242: CALL_OW 12
18246: PPUSH
18247: LD_INT 4
18249: PPUSH
18250: LD_INT 14
18252: PPUSH
18253: LD_INT 1
18255: PPUSH
18256: LD_INT 2
18258: PPUSH
18259: CALL 7351 0 12
// end ;
18263: END
// every 15 15$0 do
18264: GO 18266
18266: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18267: LD_INT 5
18269: PPUSH
18270: LD_INT 3
18272: PPUSH
18273: LD_INT 3
18275: PPUSH
18276: LD_INT 5
18278: PPUSH
18279: CALL_OW 12
18283: PUSH
18284: LD_INT 2
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: LD_INT 3
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: PUSH
18298: LD_OWVAR 67
18302: ARRAY
18303: PLUS
18304: PPUSH
18305: LD_INT 0
18307: PPUSH
18308: LD_INT 0
18310: PPUSH
18311: LD_INT 0
18313: PPUSH
18314: LD_INT 1
18316: PPUSH
18317: LD_EXP 16
18321: PPUSH
18322: LD_EXP 17
18326: PPUSH
18327: CALL_OW 12
18331: PPUSH
18332: LD_INT 4
18334: PPUSH
18335: LD_INT 14
18337: PPUSH
18338: LD_INT 1
18340: PPUSH
18341: LD_INT 1
18343: PPUSH
18344: CALL 7351 0 12
// end ;
18348: END
// every 25 25$0 do
18349: GO 18351
18351: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18352: LD_INT 5
18354: PPUSH
18355: LD_INT 3
18357: PPUSH
18358: LD_INT 2
18360: PPUSH
18361: LD_INT 3
18363: PPUSH
18364: CALL_OW 12
18368: PUSH
18369: LD_INT 2
18371: PUSH
18372: LD_INT 3
18374: PUSH
18375: LD_INT 3
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: LIST
18382: PUSH
18383: LD_OWVAR 67
18387: ARRAY
18388: PLUS
18389: PPUSH
18390: LD_INT 0
18392: PPUSH
18393: LD_INT 0
18395: PPUSH
18396: LD_INT 0
18398: PPUSH
18399: LD_INT 2
18401: PPUSH
18402: LD_EXP 16
18406: PPUSH
18407: LD_EXP 17
18411: PPUSH
18412: CALL_OW 12
18416: PPUSH
18417: LD_INT 4
18419: PPUSH
18420: LD_INT 14
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: LD_INT 1
18428: PPUSH
18429: CALL 7351 0 12
// end ;
18433: END
// every 26 26$0 do
18434: GO 18436
18436: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18437: LD_INT 5
18439: PPUSH
18440: LD_INT 3
18442: PPUSH
18443: LD_INT 1
18445: PPUSH
18446: LD_INT 3
18448: PPUSH
18449: CALL_OW 12
18453: PUSH
18454: LD_INT 1
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: LD_INT 2
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: PUSH
18468: LD_OWVAR 67
18472: ARRAY
18473: PLUS
18474: PPUSH
18475: LD_INT 0
18477: PPUSH
18478: LD_INT 0
18480: PPUSH
18481: LD_INT 0
18483: PPUSH
18484: LD_INT 2
18486: PPUSH
18487: LD_EXP 16
18491: PPUSH
18492: LD_EXP 17
18496: PPUSH
18497: CALL_OW 12
18501: PPUSH
18502: LD_INT 4
18504: PPUSH
18505: LD_INT 14
18507: PPUSH
18508: LD_INT 1
18510: PPUSH
18511: LD_INT 2
18513: PPUSH
18514: CALL 7351 0 12
// end ;
18518: END
// every 25 25$0 do
18519: GO 18521
18521: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18522: LD_INT 4
18524: PPUSH
18525: LD_INT 5
18527: PPUSH
18528: LD_INT 3
18530: PUSH
18531: LD_INT 4
18533: PUSH
18534: LD_INT 5
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PUSH
18542: LD_OWVAR 67
18546: ARRAY
18547: PPUSH
18548: LD_EXP 16
18552: PPUSH
18553: LD_EXP 17
18557: PPUSH
18558: CALL_OW 12
18562: PPUSH
18563: LD_INT 3
18565: PPUSH
18566: LD_INT 1
18568: PPUSH
18569: LD_INT 1
18571: PPUSH
18572: LD_INT 42
18574: PUSH
18575: LD_INT 42
18577: PUSH
18578: LD_INT 43
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: LIST
18585: PUSH
18586: LD_INT 42
18588: PUSH
18589: LD_INT 43
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: PUSH
18596: LD_INT 43
18598: PUSH
18599: LD_INT 43
18601: PUSH
18602: LD_INT 43
18604: PUSH
18605: LD_INT 44
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: LIST
18618: PUSH
18619: LD_OWVAR 67
18623: ARRAY
18624: PPUSH
18625: EMPTY
18626: PPUSH
18627: EMPTY
18628: PPUSH
18629: LD_INT 1
18631: PPUSH
18632: CALL 9013 0 11
// end ; end_of_file
18636: END
// every 0 0$1 trigger startTimer = 1 do
18637: LD_EXP 30
18641: PUSH
18642: LD_INT 1
18644: EQUAL
18645: IFFALSE 18775
18647: GO 18649
18649: DISABLE
// begin enable ;
18650: ENABLE
// if timerStatus = 1 then
18651: LD_EXP 29
18655: PUSH
18656: LD_INT 1
18658: EQUAL
18659: IFFALSE 18692
// begin timeToSupport = timeToSupport - 0 0$01 ;
18661: LD_ADDR_EXP 28
18665: PUSH
18666: LD_EXP 28
18670: PUSH
18671: LD_INT 35
18673: MINUS
18674: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18675: LD_ADDR_OWVAR 47
18679: PUSH
18680: LD_STRING #Am04-1
18682: PUSH
18683: LD_EXP 28
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: ST_TO_ADDR
// end ; if timerStatus = 2 then
18692: LD_EXP 29
18696: PUSH
18697: LD_INT 2
18699: EQUAL
18700: IFFALSE 18733
// begin timeToSupport = timeToSupport - 0 0$01 ;
18702: LD_ADDR_EXP 28
18706: PUSH
18707: LD_EXP 28
18711: PUSH
18712: LD_INT 35
18714: MINUS
18715: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18716: LD_ADDR_OWVAR 47
18720: PUSH
18721: LD_STRING #Am04-2
18723: PUSH
18724: LD_EXP 28
18728: PUSH
18729: EMPTY
18730: LIST
18731: LIST
18732: ST_TO_ADDR
// end ; if timerStatus = 3 then
18733: LD_EXP 29
18737: PUSH
18738: LD_INT 3
18740: EQUAL
18741: IFFALSE 18757
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18743: LD_ADDR_EXP 27
18747: PUSH
18748: LD_EXP 27
18752: PUSH
18753: LD_INT 35
18755: MINUS
18756: ST_TO_ADDR
// end ; if timerStatus = 4 then
18757: LD_EXP 29
18761: PUSH
18762: LD_INT 4
18764: EQUAL
18765: IFFALSE 18775
// begin display_strings =  ;
18767: LD_ADDR_OWVAR 47
18771: PUSH
18772: LD_STRING 
18774: ST_TO_ADDR
// end ; end ; end_of_file
18775: END
// every 0 0$1 trigger IsDead ( JMM ) do
18776: LD_EXP 1
18780: PPUSH
18781: CALL_OW 301
18785: IFFALSE 18797
18787: GO 18789
18789: DISABLE
// YouLost ( JMM ) ;
18790: LD_STRING JMM
18792: PPUSH
18793: CALL_OW 104
18797: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18798: LD_INT 4
18800: PPUSH
18801: CALL_OW 301
18805: IFFALSE 18817
18807: GO 18809
18809: DISABLE
// YouLost ( Base ) ; end_of_file
18810: LD_STRING Base
18812: PPUSH
18813: CALL_OW 104
18817: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i , p ;
18818: LD_EXP 15
18822: PPUSH
18823: CALL_OW 301
18827: IFFALSE 19298
18829: GO 18831
18831: DISABLE
18832: LD_INT 0
18834: PPUSH
18835: PPUSH
// begin AIEnable = 0 ;
18836: LD_ADDR_EXP 37
18840: PUSH
18841: LD_INT 0
18843: ST_TO_ADDR
// escapeAvalaible = 1 ;
18844: LD_ADDR_EXP 40
18848: PUSH
18849: LD_INT 1
18851: ST_TO_ADDR
// InGameOn ;
18852: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18856: LD_INT 3
18858: PPUSH
18859: LD_INT 1
18861: PPUSH
18862: LD_INT 1
18864: PPUSH
18865: LD_INT 0
18867: PPUSH
18868: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18872: LD_INT 6
18874: PPUSH
18875: LD_INT 1
18877: PPUSH
18878: LD_INT 1
18880: PPUSH
18881: LD_INT 0
18883: PPUSH
18884: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18888: LD_INT 5
18890: PPUSH
18891: LD_INT 1
18893: PPUSH
18894: LD_INT 1
18896: PPUSH
18897: LD_INT 0
18899: PPUSH
18900: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18904: LD_INT 3
18906: PPUSH
18907: LD_INT 1
18909: PPUSH
18910: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18914: LD_INT 97
18916: PPUSH
18917: LD_INT 91
18919: PPUSH
18920: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18924: LD_INT 22
18926: PUSH
18927: LD_INT 3
18929: PUSH
18930: EMPTY
18931: LIST
18932: LIST
18933: PUSH
18934: LD_INT 21
18936: PUSH
18937: LD_INT 1
18939: PUSH
18940: EMPTY
18941: LIST
18942: LIST
18943: PUSH
18944: EMPTY
18945: LIST
18946: LIST
18947: PPUSH
18948: CALL_OW 69
18952: PPUSH
18953: CALL_OW 121
// wait ( 0 0$01 ) ;
18957: LD_INT 35
18959: PPUSH
18960: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18964: LD_INT 22
18966: PUSH
18967: LD_INT 3
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 21
18976: PUSH
18977: LD_INT 1
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: EMPTY
18985: LIST
18986: LIST
18987: PPUSH
18988: CALL_OW 69
18992: PPUSH
18993: LD_INT 124
18995: PPUSH
18996: LD_INT 98
18998: PPUSH
18999: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19003: LD_INT 22
19005: PUSH
19006: LD_INT 5
19008: PUSH
19009: EMPTY
19010: LIST
19011: LIST
19012: PUSH
19013: LD_INT 21
19015: PUSH
19016: LD_INT 1
19018: PUSH
19019: EMPTY
19020: LIST
19021: LIST
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: PPUSH
19032: CALL_OW 121
// wait ( 0 0$01 ) ;
19036: LD_INT 35
19038: PPUSH
19039: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19043: LD_INT 22
19045: PUSH
19046: LD_INT 5
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 21
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PPUSH
19067: CALL_OW 69
19071: PPUSH
19072: LD_INT 124
19074: PPUSH
19075: LD_INT 98
19077: PPUSH
19078: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19082: LD_INT 22
19084: PUSH
19085: LD_INT 6
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: EMPTY
19103: LIST
19104: LIST
19105: PPUSH
19106: CALL_OW 69
19110: PPUSH
19111: CALL_OW 121
// wait ( 0 0$01 ) ;
19115: LD_INT 35
19117: PPUSH
19118: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19122: LD_INT 22
19124: PUSH
19125: LD_INT 6
19127: PUSH
19128: EMPTY
19129: LIST
19130: LIST
19131: PUSH
19132: LD_INT 21
19134: PUSH
19135: LD_INT 1
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PPUSH
19146: CALL_OW 69
19150: PPUSH
19151: LD_INT 124
19153: PPUSH
19154: LD_INT 98
19156: PPUSH
19157: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19161: LD_INT 22
19163: PUSH
19164: LD_INT 1
19166: PUSH
19167: EMPTY
19168: LIST
19169: LIST
19170: PUSH
19171: LD_INT 21
19173: PUSH
19174: LD_INT 1
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PPUSH
19185: CALL_OW 69
19189: PPUSH
19190: LD_INT 124
19192: PPUSH
19193: LD_INT 98
19195: PPUSH
19196: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19200: LD_INT 124
19202: PPUSH
19203: LD_INT 98
19205: PPUSH
19206: CALL_OW 84
// p := 0 0$0 ;
19210: LD_ADDR_VAR 0 2
19214: PUSH
19215: LD_INT 0
19217: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19218: LD_INT 35
19220: PPUSH
19221: CALL_OW 67
// p := p + 0 0$1 ;
19225: LD_ADDR_VAR 0 2
19229: PUSH
19230: LD_VAR 0 2
19234: PUSH
19235: LD_INT 35
19237: PLUS
19238: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19239: LD_INT 23
19241: PUSH
19242: LD_INT 3
19244: PUSH
19245: EMPTY
19246: LIST
19247: LIST
19248: PUSH
19249: LD_INT 21
19251: PUSH
19252: LD_INT 1
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 24
19261: PUSH
19262: LD_INT 250
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 69
19278: PUSH
19279: LD_INT 0
19281: EQUAL
19282: PUSH
19283: LD_VAR 0 2
19287: PUSH
19288: LD_INT 245
19290: GREATEREQUAL
19291: OR
19292: IFFALSE 19218
// FinishMission ;
19294: CALL 19471 0 0
// end ;
19298: PPOPN 2
19300: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19301: LD_EXP 40
19305: PUSH
19306: LD_INT 1
19308: EQUAL
19309: IFFALSE 19468
19311: GO 19313
19313: DISABLE
19314: LD_INT 0
19316: PPUSH
// begin enable ;
19317: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19318: LD_ADDR_VAR 0 1
19322: PUSH
19323: LD_INT 22
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 69
19337: PUSH
19338: FOR_IN
19339: IFFALSE 19366
// if IsInArea ( i , RussianEscape ) then
19341: LD_VAR 0 1
19345: PPUSH
19346: LD_INT 5
19348: PPUSH
19349: CALL_OW 308
19353: IFFALSE 19364
// RemoveUnit ( i ) ;
19355: LD_VAR 0 1
19359: PPUSH
19360: CALL_OW 64
19364: GO 19338
19366: POP
19367: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19368: LD_ADDR_VAR 0 1
19372: PUSH
19373: LD_INT 22
19375: PUSH
19376: LD_INT 5
19378: PUSH
19379: EMPTY
19380: LIST
19381: LIST
19382: PPUSH
19383: CALL_OW 69
19387: PUSH
19388: FOR_IN
19389: IFFALSE 19416
// if IsInArea ( i , RussianEscape ) then
19391: LD_VAR 0 1
19395: PPUSH
19396: LD_INT 5
19398: PPUSH
19399: CALL_OW 308
19403: IFFALSE 19414
// RemoveUnit ( i ) ;
19405: LD_VAR 0 1
19409: PPUSH
19410: CALL_OW 64
19414: GO 19388
19416: POP
19417: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19418: LD_ADDR_VAR 0 1
19422: PUSH
19423: LD_INT 22
19425: PUSH
19426: LD_INT 6
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PPUSH
19433: CALL_OW 69
19437: PUSH
19438: FOR_IN
19439: IFFALSE 19466
// if IsInArea ( i , RussianEscape ) then
19441: LD_VAR 0 1
19445: PPUSH
19446: LD_INT 5
19448: PPUSH
19449: CALL_OW 308
19453: IFFALSE 19464
// RemoveUnit ( i ) ;
19455: LD_VAR 0 1
19459: PPUSH
19460: CALL_OW 64
19464: GO 19438
19466: POP
19467: POP
// end ;
19468: PPOPN 1
19470: END
// export function FinishMission ; var tmp ; begin
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19475: LD_INT 69
19477: PPUSH
19478: LD_INT 1
19480: PPUSH
19481: CALL_OW 321
19485: PPUSH
19486: LD_STRING GatlingInGamma
19488: PPUSH
19489: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19493: LD_EXP 34
19497: PUSH
19498: LD_INT 1
19500: EQUAL
19501: PUSH
19502: LD_EXP 35
19506: PUSH
19507: LD_INT 1
19509: EQUAL
19510: AND
19511: IFFALSE 19525
// begin AddMedal ( oil , 1 ) ;
19513: LD_STRING oil
19515: PPUSH
19516: LD_INT 1
19518: PPUSH
19519: CALL_OW 101
// end else
19523: GO 19618
// begin if buildOil = 1 and buildPower = 0 then
19525: LD_EXP 34
19529: PUSH
19530: LD_INT 1
19532: EQUAL
19533: PUSH
19534: LD_EXP 35
19538: PUSH
19539: LD_INT 0
19541: EQUAL
19542: AND
19543: IFFALSE 19556
// AddMedal ( oil , - 1 ) ;
19545: LD_STRING oil
19547: PPUSH
19548: LD_INT 1
19550: NEG
19551: PPUSH
19552: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19556: LD_EXP 34
19560: PUSH
19561: LD_INT 0
19563: EQUAL
19564: PUSH
19565: LD_EXP 35
19569: PUSH
19570: LD_INT 1
19572: EQUAL
19573: AND
19574: IFFALSE 19587
// AddMedal ( oil , - 2 ) ;
19576: LD_STRING oil
19578: PPUSH
19579: LD_INT 2
19581: NEG
19582: PPUSH
19583: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19587: LD_EXP 34
19591: PUSH
19592: LD_INT 0
19594: EQUAL
19595: PUSH
19596: LD_EXP 35
19600: PUSH
19601: LD_INT 0
19603: EQUAL
19604: AND
19605: IFFALSE 19618
// AddMedal ( oil , - 3 ) ;
19607: LD_STRING oil
19609: PPUSH
19610: LD_INT 3
19612: NEG
19613: PPUSH
19614: CALL_OW 101
// end ; if lostCounter > 3 then
19618: LD_EXP 38
19622: PUSH
19623: LD_INT 3
19625: GREATER
19626: IFFALSE 19641
// begin AddMedal ( deaths , - 1 ) ;
19628: LD_STRING deaths
19630: PPUSH
19631: LD_INT 1
19633: NEG
19634: PPUSH
19635: CALL_OW 101
// end else
19639: GO 19651
// begin AddMedal ( deaths , 1 ) ;
19641: LD_STRING deaths
19643: PPUSH
19644: LD_INT 1
19646: PPUSH
19647: CALL_OW 101
// end ; if honor = 1 then
19651: LD_EXP 39
19655: PUSH
19656: LD_INT 1
19658: EQUAL
19659: IFFALSE 19673
// begin AddMedal ( honour , 1 ) ;
19661: LD_STRING honour
19663: PPUSH
19664: LD_INT 1
19666: PPUSH
19667: CALL_OW 101
// end else
19671: GO 19684
// begin AddMedal ( honour , - 1 ) ;
19673: LD_STRING honour
19675: PPUSH
19676: LD_INT 1
19678: NEG
19679: PPUSH
19680: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19684: LD_STRING Main
19686: PPUSH
19687: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19691: LD_INT 22
19693: PUSH
19694: LD_INT 1
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: PUSH
19701: LD_INT 23
19703: PUSH
19704: LD_INT 1
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PUSH
19711: LD_INT 21
19713: PUSH
19714: LD_INT 1
19716: PUSH
19717: EMPTY
19718: LIST
19719: LIST
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: PPUSH
19731: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19735: LD_EXP 1
19739: PPUSH
19740: LD_EXP 44
19744: PUSH
19745: LD_STRING JMM
19747: STR
19748: PPUSH
19749: CALL_OW 38
// if IsOK ( Bobby ) then
19753: LD_EXP 2
19757: PPUSH
19758: CALL_OW 302
19762: IFFALSE 19782
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19764: LD_EXP 2
19768: PPUSH
19769: LD_EXP 44
19773: PUSH
19774: LD_STRING Bobby
19776: STR
19777: PPUSH
19778: CALL_OW 38
// if IsOK ( Cyrus ) then
19782: LD_EXP 3
19786: PPUSH
19787: CALL_OW 302
19791: IFFALSE 19811
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19793: LD_EXP 3
19797: PPUSH
19798: LD_EXP 44
19802: PUSH
19803: LD_STRING Cyrus
19805: STR
19806: PPUSH
19807: CALL_OW 38
// if IsOK ( Lisa ) then
19811: LD_EXP 4
19815: PPUSH
19816: CALL_OW 302
19820: IFFALSE 19840
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19822: LD_EXP 4
19826: PPUSH
19827: LD_EXP 44
19831: PUSH
19832: LD_STRING Lisa
19834: STR
19835: PPUSH
19836: CALL_OW 38
// if IsOK ( Brown ) then
19840: LD_EXP 7
19844: PPUSH
19845: CALL_OW 302
19849: IFFALSE 19869
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19851: LD_EXP 7
19855: PPUSH
19856: LD_EXP 44
19860: PUSH
19861: LD_STRING Brown
19863: STR
19864: PPUSH
19865: CALL_OW 38
// if IsOK ( Donaldson ) then
19869: LD_EXP 13
19873: PPUSH
19874: CALL_OW 302
19878: IFFALSE 19898
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19880: LD_EXP 13
19884: PPUSH
19885: LD_EXP 44
19889: PUSH
19890: LD_STRING Donaldson
19892: STR
19893: PPUSH
19894: CALL_OW 38
// if IsOK ( Frank ) then
19898: LD_EXP 5
19902: PPUSH
19903: CALL_OW 302
19907: IFFALSE 19927
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19909: LD_EXP 5
19913: PPUSH
19914: LD_EXP 44
19918: PUSH
19919: LD_STRING Frank
19921: STR
19922: PPUSH
19923: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19927: LD_INT 50
19929: PUSH
19930: EMPTY
19931: LIST
19932: PUSH
19933: LD_INT 22
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: LD_INT 21
19945: PUSH
19946: LD_INT 1
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: PPUSH
19958: CALL_OW 69
19962: PUSH
19963: LD_EXP 1
19967: PUSH
19968: LD_EXP 2
19972: PUSH
19973: LD_EXP 3
19977: PUSH
19978: LD_EXP 4
19982: PUSH
19983: LD_EXP 7
19987: PUSH
19988: LD_EXP 13
19992: PUSH
19993: LD_EXP 5
19997: PUSH
19998: EMPTY
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: DIFF
20007: PPUSH
20008: LD_STRING 04_other_survivors
20010: PPUSH
20011: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20015: LD_INT 22
20017: PPUSH
20018: CALL 20031 0 1
// YouWin ;
20022: CALL_OW 103
// end ;
20026: LD_VAR 0 1
20030: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20031: LD_INT 0
20033: PPUSH
20034: PPUSH
20035: PPUSH
20036: PPUSH
// gammaBase = [ ] ;
20037: LD_ADDR_VAR 0 4
20041: PUSH
20042: EMPTY
20043: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20044: LD_ADDR_VAR 0 5
20048: PUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: LD_INT 22
20056: PUSH
20057: LD_INT 1
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: PUSH
20064: LD_INT 21
20066: PUSH
20067: LD_INT 3
20069: PUSH
20070: EMPTY
20071: LIST
20072: LIST
20073: PUSH
20074: LD_INT 50
20076: PUSH
20077: EMPTY
20078: LIST
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: LIST
20084: PPUSH
20085: CALL_OW 70
20089: ST_TO_ADDR
// for i in buildings do
20090: LD_ADDR_VAR 0 3
20094: PUSH
20095: LD_VAR 0 5
20099: PUSH
20100: FOR_IN
20101: IFFALSE 20438
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20103: LD_VAR 0 3
20107: PPUSH
20108: CALL_OW 266
20112: PUSH
20113: LD_INT 6
20115: PUSH
20116: LD_INT 7
20118: PUSH
20119: LD_INT 8
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: LIST
20126: IN
20127: IFFALSE 20241
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20129: LD_ADDR_VAR 0 4
20133: PUSH
20134: LD_VAR 0 4
20138: PUSH
20139: LD_VAR 0 3
20143: PPUSH
20144: CALL_OW 266
20148: PUSH
20149: LD_VAR 0 3
20153: PPUSH
20154: CALL_OW 250
20158: PUSH
20159: LD_VAR 0 3
20163: PPUSH
20164: CALL_OW 251
20168: PUSH
20169: LD_VAR 0 3
20173: PPUSH
20174: CALL_OW 254
20178: PUSH
20179: LD_VAR 0 3
20183: PPUSH
20184: CALL_OW 267
20188: PUSH
20189: LD_VAR 0 3
20193: PPUSH
20194: CALL_OW 248
20198: PUSH
20199: LD_VAR 0 3
20203: PPUSH
20204: LD_INT 1
20206: PPUSH
20207: CALL_OW 268
20211: PUSH
20212: LD_VAR 0 3
20216: PPUSH
20217: LD_INT 2
20219: PPUSH
20220: CALL_OW 268
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: PUSH
20235: EMPTY
20236: LIST
20237: ADD
20238: ST_TO_ADDR
20239: GO 20436
// if GetBType ( i ) in [ b_bunker ] then
20241: LD_VAR 0 3
20245: PPUSH
20246: CALL_OW 266
20250: PUSH
20251: LD_INT 32
20253: PUSH
20254: EMPTY
20255: LIST
20256: IN
20257: IFFALSE 20354
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20259: LD_ADDR_VAR 0 4
20263: PUSH
20264: LD_VAR 0 4
20268: PUSH
20269: LD_VAR 0 3
20273: PPUSH
20274: CALL_OW 266
20278: PUSH
20279: LD_VAR 0 3
20283: PPUSH
20284: CALL_OW 250
20288: PUSH
20289: LD_VAR 0 3
20293: PPUSH
20294: CALL_OW 251
20298: PUSH
20299: LD_VAR 0 3
20303: PPUSH
20304: CALL_OW 254
20308: PUSH
20309: LD_VAR 0 3
20313: PPUSH
20314: CALL_OW 267
20318: PUSH
20319: LD_VAR 0 3
20323: PPUSH
20324: CALL_OW 248
20328: PUSH
20329: LD_VAR 0 3
20333: PPUSH
20334: CALL_OW 269
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: LIST
20344: LIST
20345: LIST
20346: LIST
20347: PUSH
20348: EMPTY
20349: LIST
20350: ADD
20351: ST_TO_ADDR
20352: GO 20436
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20354: LD_ADDR_VAR 0 4
20358: PUSH
20359: LD_VAR 0 4
20363: PUSH
20364: LD_VAR 0 3
20368: PPUSH
20369: CALL_OW 266
20373: PUSH
20374: LD_VAR 0 3
20378: PPUSH
20379: CALL_OW 250
20383: PUSH
20384: LD_VAR 0 3
20388: PPUSH
20389: CALL_OW 251
20393: PUSH
20394: LD_VAR 0 3
20398: PPUSH
20399: CALL_OW 254
20403: PUSH
20404: LD_VAR 0 3
20408: PPUSH
20409: CALL_OW 267
20413: PUSH
20414: LD_VAR 0 3
20418: PPUSH
20419: CALL_OW 248
20423: PUSH
20424: EMPTY
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: ADD
20435: ST_TO_ADDR
// end ;
20436: GO 20100
20438: POP
20439: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20440: LD_VAR 0 4
20444: PPUSH
20445: LD_STRING GammaBase
20447: PPUSH
20448: CALL_OW 39
// end ; end_of_file
20452: LD_VAR 0 2
20456: RET
// every 1 1$15 do
20457: GO 20459
20459: DISABLE
// begin if supply <= 13 and supply > 7 then
20460: LD_EXP 36
20464: PUSH
20465: LD_INT 13
20467: LESSEQUAL
20468: PUSH
20469: LD_EXP 36
20473: PUSH
20474: LD_INT 7
20476: GREATER
20477: AND
20478: IFFALSE 20501
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20480: LD_INT 3
20482: PPUSH
20483: LD_INT 5
20485: PPUSH
20486: CALL_OW 12
20490: PPUSH
20491: LD_INT 18
20493: PPUSH
20494: LD_INT 1
20496: PPUSH
20497: CALL_OW 55
// if supply <= 7 and supply > 4 then
20501: LD_EXP 36
20505: PUSH
20506: LD_INT 7
20508: LESSEQUAL
20509: PUSH
20510: LD_EXP 36
20514: PUSH
20515: LD_INT 4
20517: GREATER
20518: AND
20519: IFFALSE 20542
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20521: LD_INT 3
20523: PPUSH
20524: LD_INT 5
20526: PPUSH
20527: CALL_OW 12
20531: PPUSH
20532: LD_INT 19
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: CALL_OW 55
// if supply <= 4 and supply > 0 then
20542: LD_EXP 36
20546: PUSH
20547: LD_INT 4
20549: LESSEQUAL
20550: PUSH
20551: LD_EXP 36
20555: PUSH
20556: LD_INT 0
20558: GREATER
20559: AND
20560: IFFALSE 20583
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20562: LD_INT 3
20564: PPUSH
20565: LD_INT 5
20567: PPUSH
20568: CALL_OW 12
20572: PPUSH
20573: LD_INT 20
20575: PPUSH
20576: LD_INT 1
20578: PPUSH
20579: CALL_OW 55
// if supply > 0 then
20583: LD_EXP 36
20587: PUSH
20588: LD_INT 0
20590: GREATER
20591: IFFALSE 20608
// begin supply = supply - 1 ;
20593: LD_ADDR_EXP 36
20597: PUSH
20598: LD_EXP 36
20602: PUSH
20603: LD_INT 1
20605: MINUS
20606: ST_TO_ADDR
// enable ;
20607: ENABLE
// end ; end ;
20608: END
