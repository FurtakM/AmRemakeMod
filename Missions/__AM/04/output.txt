// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 42
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 43
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 41
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 40
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 21
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 22
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 23
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 24
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 25
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 26
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 27
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 28
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 29
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 30
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 31
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 32
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 33
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 11 , 12 , 14 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 34
 176: PUSH
 177: LD_INT 11
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 14
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 35
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 39
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 36
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 37
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 38
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 3756 0 0
// PrepareRussianBase ;
 241: CALL 2077 0 0
// PrepareRussianCommander ;
 245: CALL 2028 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 41
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
// uc_side = 1 ;
 394: LD_ADDR_OWVAR 20
 398: PUSH
 399: LD_INT 1
 401: ST_TO_ADDR
// uc_nation = 1 ;
 402: LD_ADDR_OWVAR 21
 406: PUSH
 407: LD_INT 1
 409: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 410: LD_ADDR_EXP 1
 414: PUSH
 415: LD_STRING JMM
 417: PPUSH
 418: LD_INT 1
 420: PPUSH
 421: CALL 3291 0 2
 425: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 426: LD_ADDR_EXP 4
 430: PUSH
 431: LD_STRING Lisa
 433: PPUSH
 434: LD_INT 1
 436: PPUSH
 437: CALL 3291 0 2
 441: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 442: LD_ADDR_EXP 7
 446: PUSH
 447: LD_STRING Brown
 449: PPUSH
 450: LD_INT 0
 452: PPUSH
 453: CALL 3291 0 2
 457: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 458: LD_ADDR_EXP 8
 462: PUSH
 463: LD_STRING Dickens
 465: PPUSH
 466: LD_INT 0
 468: PPUSH
 469: CALL 3291 0 2
 473: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 474: LD_ADDR_EXP 9
 478: PUSH
 479: LD_STRING Woodruff
 481: PPUSH
 482: LD_INT 0
 484: PPUSH
 485: CALL 3291 0 2
 489: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 490: LD_ADDR_EXP 12
 494: PUSH
 495: LD_STRING Campell
 497: PPUSH
 498: LD_INT 0
 500: PPUSH
 501: CALL 3291 0 2
 505: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 506: LD_ADDR_EXP 10
 510: PUSH
 511: LD_STRING Knight
 513: PPUSH
 514: LD_INT 0
 516: PPUSH
 517: CALL 3291 0 2
 521: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 522: LD_ADDR_EXP 11
 526: PUSH
 527: LD_STRING Claptopn
 529: PPUSH
 530: LD_INT 0
 532: PPUSH
 533: CALL 3291 0 2
 537: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 538: LD_ADDR_EXP 14
 542: PUSH
 543: LD_STRING Harisson
 545: PPUSH
 546: LD_INT 0
 548: PPUSH
 549: CALL 3291 0 2
 553: ST_TO_ADDR
// if Lisa = false then
 554: LD_EXP 4
 558: PUSH
 559: LD_INT 0
 561: EQUAL
 562: IFFALSE 580
// Bobby = PrepareUnit ( Bobby , true ) ;
 564: LD_ADDR_EXP 2
 568: PUSH
 569: LD_STRING Bobby
 571: PPUSH
 572: LD_INT 1
 574: PPUSH
 575: CALL 3291 0 2
 579: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 580: LD_EXP 4
 584: PUSH
 585: LD_INT 0
 587: EQUAL
 588: PUSH
 589: LD_EXP 2
 593: PUSH
 594: LD_INT 0
 596: EQUAL
 597: AND
 598: IFFALSE 616
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 600: LD_ADDR_EXP 3
 604: PUSH
 605: LD_STRING Cyrus
 607: PPUSH
 608: LD_INT 1
 610: PPUSH
 611: CALL 3291 0 2
 615: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 616: LD_EXP 4
 620: PUSH
 621: LD_INT 0
 623: EQUAL
 624: PUSH
 625: LD_EXP 2
 629: PUSH
 630: LD_INT 0
 632: EQUAL
 633: AND
 634: PUSH
 635: LD_EXP 3
 639: PUSH
 640: LD_INT 0
 642: EQUAL
 643: AND
 644: IFFALSE 662
// RandomBeforeMission = PrepareUnit ( 03_others , true ) ;
 646: LD_ADDR_EXP 6
 650: PUSH
 651: LD_STRING 03_others
 653: PPUSH
 654: LD_INT 1
 656: PPUSH
 657: CALL 3291 0 2
 661: ST_TO_ADDR
// uc_side = 4 ;
 662: LD_ADDR_OWVAR 20
 666: PUSH
 667: LD_INT 4
 669: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 670: LD_ADDR_EXP 13
 674: PUSH
 675: LD_STRING Donaldson
 677: PPUSH
 678: LD_INT 0
 680: PPUSH
 681: CALL 3291 0 2
 685: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 686: LD_ADDR_EXP 5
 690: PUSH
 691: LD_STRING Frank
 693: PPUSH
 694: LD_INT 1
 696: PPUSH
 697: CALL 3291 0 2
 701: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 702: LD_EXP 1
 706: PPUSH
 707: LD_INT 32
 709: PPUSH
 710: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 714: LD_EXP 7
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: LD_INT 0
 724: PPUSH
 725: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 729: LD_EXP 7
 733: PPUSH
 734: LD_INT 32
 736: PPUSH
 737: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 741: LD_EXP 8
 745: PPUSH
 746: LD_INT 2
 748: PPUSH
 749: LD_INT 0
 751: PPUSH
 752: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 756: LD_EXP 9
 760: PPUSH
 761: LD_INT 2
 763: PPUSH
 764: LD_INT 0
 766: PPUSH
 767: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 771: LD_EXP 12
 775: PPUSH
 776: LD_INT 2
 778: PPUSH
 779: LD_INT 0
 781: PPUSH
 782: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 786: LD_EXP 10
 790: PPUSH
 791: LD_INT 2
 793: PPUSH
 794: LD_INT 0
 796: PPUSH
 797: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 801: LD_EXP 11
 805: PPUSH
 806: LD_INT 2
 808: PPUSH
 809: LD_INT 0
 811: PPUSH
 812: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 816: LD_EXP 4
 820: PPUSH
 821: LD_INT 2
 823: PPUSH
 824: LD_INT 0
 826: PPUSH
 827: CALL_OW 49
// if Lisa = false then
 831: LD_EXP 4
 835: PUSH
 836: LD_INT 0
 838: EQUAL
 839: IFFALSE 856
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 841: LD_EXP 2
 845: PPUSH
 846: LD_INT 2
 848: PPUSH
 849: LD_INT 0
 851: PPUSH
 852: CALL_OW 49
// if Lisa = false and Bobby = false then
 856: LD_EXP 4
 860: PUSH
 861: LD_INT 0
 863: EQUAL
 864: PUSH
 865: LD_EXP 2
 869: PUSH
 870: LD_INT 0
 872: EQUAL
 873: AND
 874: IFFALSE 891
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 2
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 891: LD_EXP 4
 895: PUSH
 896: LD_INT 0
 898: EQUAL
 899: PUSH
 900: LD_EXP 2
 904: PUSH
 905: LD_INT 0
 907: EQUAL
 908: AND
 909: PUSH
 910: LD_EXP 3
 914: PUSH
 915: LD_INT 0
 917: EQUAL
 918: AND
 919: IFFALSE 936
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 921: LD_EXP 6
 925: PPUSH
 926: LD_INT 2
 928: PPUSH
 929: LD_INT 0
 931: PPUSH
 932: CALL_OW 49
// end ;
 936: LD_VAR 0 1
 940: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 941: LD_INT 0
 943: PPUSH
 944: PPUSH
 945: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
 946: LD_EXP 13
 950: PPUSH
 951: LD_INT 10
 953: PPUSH
 954: LD_INT 0
 956: PPUSH
 957: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
 961: LD_EXP 5
 965: PPUSH
 966: LD_INT 10
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// uc_nation = 1 ;
 976: LD_ADDR_OWVAR 21
 980: PUSH
 981: LD_INT 1
 983: ST_TO_ADDR
// uc_side = 4 ;
 984: LD_ADDR_OWVAR 20
 988: PUSH
 989: LD_INT 4
 991: ST_TO_ADDR
// hc_class := 3 ;
 992: LD_ADDR_OWVAR 28
 996: PUSH
 997: LD_INT 3
 999: ST_TO_ADDR
// hc_sex := sex_male ;
1000: LD_ADDR_OWVAR 27
1004: PUSH
1005: LD_INT 1
1007: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1008: LD_ADDR_OWVAR 33
1012: PUSH
1013: LD_STRING SecondCharsGal
1015: ST_TO_ADDR
// hc_face_number := 53 ;
1016: LD_ADDR_OWVAR 34
1020: PUSH
1021: LD_INT 53
1023: ST_TO_ADDR
// hc_name := Freddie Warner ;
1024: LD_ADDR_OWVAR 26
1028: PUSH
1029: LD_STRING Freddie Warner
1031: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1032: LD_ADDR_OWVAR 31
1036: PUSH
1037: LD_INT 1
1039: PUSH
1040: LD_INT 0
1042: PUSH
1043: LD_INT 3
1045: PUSH
1046: LD_INT 0
1048: PUSH
1049: EMPTY
1050: LIST
1051: LIST
1052: LIST
1053: LIST
1054: ST_TO_ADDR
// un = CreateHuman ;
1055: LD_ADDR_VAR 0 3
1059: PUSH
1060: CALL_OW 44
1064: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1065: LD_VAR 0 3
1069: PPUSH
1070: LD_INT 10
1072: PPUSH
1073: LD_INT 0
1075: PPUSH
1076: CALL_OW 49
// hc_class := 1 ;
1080: LD_ADDR_OWVAR 28
1084: PUSH
1085: LD_INT 1
1087: ST_TO_ADDR
// hc_sex := sex_male ;
1088: LD_ADDR_OWVAR 27
1092: PUSH
1093: LD_INT 1
1095: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1096: LD_ADDR_OWVAR 33
1100: PUSH
1101: LD_STRING SecondCharsGal
1103: ST_TO_ADDR
// hc_face_number := 56 ;
1104: LD_ADDR_OWVAR 34
1108: PUSH
1109: LD_INT 56
1111: ST_TO_ADDR
// hc_name := Mel Brennan ;
1112: LD_ADDR_OWVAR 26
1116: PUSH
1117: LD_STRING Mel Brennan
1119: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1120: LD_ADDR_OWVAR 31
1124: PUSH
1125: LD_INT 2
1127: PUSH
1128: LD_INT 1
1130: PUSH
1131: LD_INT 1
1133: PUSH
1134: LD_INT 0
1136: PUSH
1137: EMPTY
1138: LIST
1139: LIST
1140: LIST
1141: LIST
1142: ST_TO_ADDR
// un = CreateHuman ;
1143: LD_ADDR_VAR 0 3
1147: PUSH
1148: CALL_OW 44
1152: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1153: LD_VAR 0 3
1157: PPUSH
1158: LD_INT 10
1160: PPUSH
1161: LD_INT 0
1163: PPUSH
1164: CALL_OW 49
// hc_class := 1 ;
1168: LD_ADDR_OWVAR 28
1172: PUSH
1173: LD_INT 1
1175: ST_TO_ADDR
// hc_sex := sex_male ;
1176: LD_ADDR_OWVAR 27
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1184: LD_ADDR_OWVAR 33
1188: PUSH
1189: LD_STRING AmGalRemake
1191: ST_TO_ADDR
// hc_face_number := 5 ;
1192: LD_ADDR_OWVAR 34
1196: PUSH
1197: LD_INT 5
1199: ST_TO_ADDR
// hc_name := Bob Joplin ;
1200: LD_ADDR_OWVAR 26
1204: PUSH
1205: LD_STRING Bob Joplin
1207: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1208: LD_ADDR_OWVAR 31
1212: PUSH
1213: LD_INT 3
1215: PUSH
1216: LD_INT 1
1218: PUSH
1219: LD_INT 1
1221: PUSH
1222: LD_INT 1
1224: PUSH
1225: EMPTY
1226: LIST
1227: LIST
1228: LIST
1229: LIST
1230: ST_TO_ADDR
// un = CreateHuman ;
1231: LD_ADDR_VAR 0 3
1235: PUSH
1236: CALL_OW 44
1240: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1241: LD_VAR 0 3
1245: PPUSH
1246: LD_INT 10
1248: PPUSH
1249: LD_INT 0
1251: PPUSH
1252: CALL_OW 49
// hc_class := 3 ;
1256: LD_ADDR_OWVAR 28
1260: PUSH
1261: LD_INT 3
1263: ST_TO_ADDR
// hc_sex := sex_female ;
1264: LD_ADDR_OWVAR 27
1268: PUSH
1269: LD_INT 2
1271: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1272: LD_ADDR_OWVAR 33
1276: PUSH
1277: LD_STRING AmGalRemake
1279: ST_TO_ADDR
// hc_face_number := 4 ;
1280: LD_ADDR_OWVAR 34
1284: PUSH
1285: LD_INT 4
1287: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1288: LD_ADDR_OWVAR 26
1292: PUSH
1293: LD_STRING Elizabeth Whitney
1295: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1296: LD_ADDR_OWVAR 31
1300: PUSH
1301: LD_INT 2
1303: PUSH
1304: LD_INT 2
1306: PUSH
1307: LD_INT 4
1309: PUSH
1310: LD_INT 2
1312: PUSH
1313: EMPTY
1314: LIST
1315: LIST
1316: LIST
1317: LIST
1318: ST_TO_ADDR
// un = CreateHuman ;
1319: LD_ADDR_VAR 0 3
1323: PUSH
1324: CALL_OW 44
1328: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1329: LD_VAR 0 3
1333: PPUSH
1334: LD_INT 10
1336: PPUSH
1337: LD_INT 0
1339: PPUSH
1340: CALL_OW 49
// end ;
1344: LD_VAR 0 1
1348: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1349: LD_INT 0
1351: PPUSH
1352: PPUSH
1353: PPUSH
// uc_nation = 1 ;
1354: LD_ADDR_OWVAR 21
1358: PUSH
1359: LD_INT 1
1361: ST_TO_ADDR
// uc_side = 1 ;
1362: LD_ADDR_OWVAR 20
1366: PUSH
1367: LD_INT 1
1369: ST_TO_ADDR
// hc_class := 1 ;
1370: LD_ADDR_OWVAR 28
1374: PUSH
1375: LD_INT 1
1377: ST_TO_ADDR
// hc_sex := sex_male ;
1378: LD_ADDR_OWVAR 27
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1386: LD_ADDR_OWVAR 33
1390: PUSH
1391: LD_STRING SecondCharsGal
1393: ST_TO_ADDR
// hc_face_number := 59 ;
1394: LD_ADDR_OWVAR 34
1398: PUSH
1399: LD_INT 59
1401: ST_TO_ADDR
// hc_name := Max Gray ;
1402: LD_ADDR_OWVAR 26
1406: PUSH
1407: LD_STRING Max Gray
1409: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1410: LD_ADDR_OWVAR 31
1414: PUSH
1415: LD_INT 2
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: LD_INT 1
1423: PUSH
1424: LD_INT 0
1426: PUSH
1427: EMPTY
1428: LIST
1429: LIST
1430: LIST
1431: LIST
1432: ST_TO_ADDR
// un = CreateHuman ;
1433: LD_ADDR_VAR 0 4
1437: PUSH
1438: CALL_OW 44
1442: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1443: LD_VAR 0 4
1447: PPUSH
1448: LD_INT 11
1450: PPUSH
1451: LD_INT 0
1453: PPUSH
1454: CALL_OW 49
// hc_class := 1 ;
1458: LD_ADDR_OWVAR 28
1462: PUSH
1463: LD_INT 1
1465: ST_TO_ADDR
// hc_sex := sex_male ;
1466: LD_ADDR_OWVAR 27
1470: PUSH
1471: LD_INT 1
1473: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1474: LD_ADDR_OWVAR 33
1478: PUSH
1479: LD_STRING SecondCharsGal
1481: ST_TO_ADDR
// hc_face_number := 54 ;
1482: LD_ADDR_OWVAR 34
1486: PUSH
1487: LD_INT 54
1489: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1490: LD_ADDR_OWVAR 26
1494: PUSH
1495: LD_STRING Luigi Ghbellin
1497: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1498: LD_ADDR_OWVAR 31
1502: PUSH
1503: LD_INT 1
1505: PUSH
1506: LD_INT 0
1508: PUSH
1509: LD_INT 0
1511: PUSH
1512: LD_INT 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: LIST
1519: LIST
1520: ST_TO_ADDR
// un = CreateHuman ;
1521: LD_ADDR_VAR 0 4
1525: PUSH
1526: CALL_OW 44
1530: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1531: LD_VAR 0 4
1535: PPUSH
1536: LD_INT 11
1538: PPUSH
1539: LD_INT 0
1541: PPUSH
1542: CALL_OW 49
// hc_class := 3 ;
1546: LD_ADDR_OWVAR 28
1550: PUSH
1551: LD_INT 3
1553: ST_TO_ADDR
// hc_sex := sex_male ;
1554: LD_ADDR_OWVAR 27
1558: PUSH
1559: LD_INT 1
1561: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1562: LD_ADDR_OWVAR 33
1566: PUSH
1567: LD_STRING AmGalRemake
1569: ST_TO_ADDR
// hc_face_number := 6 ;
1570: LD_ADDR_OWVAR 34
1574: PUSH
1575: LD_INT 6
1577: ST_TO_ADDR
// hc_name := Leon Carter ;
1578: LD_ADDR_OWVAR 26
1582: PUSH
1583: LD_STRING Leon Carter
1585: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1586: LD_ADDR_OWVAR 31
1590: PUSH
1591: LD_INT 0
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 0
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: ST_TO_ADDR
// un = CreateHuman ;
1609: LD_ADDR_VAR 0 4
1613: PUSH
1614: CALL_OW 44
1618: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1619: LD_VAR 0 4
1623: PPUSH
1624: LD_INT 11
1626: PPUSH
1627: LD_INT 0
1629: PPUSH
1630: CALL_OW 49
// if count = 4 then
1634: LD_VAR 0 1
1638: PUSH
1639: LD_INT 4
1641: EQUAL
1642: IFFALSE 1732
// begin hc_class := 1 ;
1644: LD_ADDR_OWVAR 28
1648: PUSH
1649: LD_INT 1
1651: ST_TO_ADDR
// hc_sex := sex_male ;
1652: LD_ADDR_OWVAR 27
1656: PUSH
1657: LD_INT 1
1659: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1660: LD_ADDR_OWVAR 33
1664: PUSH
1665: LD_STRING SecondCharsGal
1667: ST_TO_ADDR
// hc_face_number := 34 ;
1668: LD_ADDR_OWVAR 34
1672: PUSH
1673: LD_INT 34
1675: ST_TO_ADDR
// hc_name := Ian Hill ;
1676: LD_ADDR_OWVAR 26
1680: PUSH
1681: LD_STRING Ian Hill
1683: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1684: LD_ADDR_OWVAR 31
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 0
1694: PUSH
1695: LD_INT 1
1697: PUSH
1698: LD_INT 0
1700: PUSH
1701: EMPTY
1702: LIST
1703: LIST
1704: LIST
1705: LIST
1706: ST_TO_ADDR
// un = CreateHuman ;
1707: LD_ADDR_VAR 0 4
1711: PUSH
1712: CALL_OW 44
1716: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1717: LD_VAR 0 4
1721: PPUSH
1722: LD_INT 11
1724: PPUSH
1725: LD_INT 0
1727: PPUSH
1728: CALL_OW 49
// end ; if count = 5 then
1732: LD_VAR 0 1
1736: PUSH
1737: LD_INT 5
1739: EQUAL
1740: IFFALSE 1918
// begin hc_class := 1 ;
1742: LD_ADDR_OWVAR 28
1746: PUSH
1747: LD_INT 1
1749: ST_TO_ADDR
// hc_sex := sex_male ;
1750: LD_ADDR_OWVAR 27
1754: PUSH
1755: LD_INT 1
1757: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1758: LD_ADDR_OWVAR 33
1762: PUSH
1763: LD_STRING SecondCharsGal
1765: ST_TO_ADDR
// hc_face_number := 34 ;
1766: LD_ADDR_OWVAR 34
1770: PUSH
1771: LD_INT 34
1773: ST_TO_ADDR
// hc_name := Ian Hill ;
1774: LD_ADDR_OWVAR 26
1778: PUSH
1779: LD_STRING Ian Hill
1781: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
1782: LD_ADDR_OWVAR 31
1786: PUSH
1787: LD_INT 2
1789: PUSH
1790: LD_INT 0
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: ST_TO_ADDR
// un = CreateHuman ;
1805: LD_ADDR_VAR 0 4
1809: PUSH
1810: CALL_OW 44
1814: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1815: LD_VAR 0 4
1819: PPUSH
1820: LD_INT 11
1822: PPUSH
1823: LD_INT 0
1825: PPUSH
1826: CALL_OW 49
// hc_class := 1 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 1
1837: ST_TO_ADDR
// hc_sex := sex_female ;
1838: LD_ADDR_OWVAR 27
1842: PUSH
1843: LD_INT 2
1845: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1846: LD_ADDR_OWVAR 33
1850: PUSH
1851: LD_STRING SecondCharsGal
1853: ST_TO_ADDR
// hc_face_number := 41 ;
1854: LD_ADDR_OWVAR 34
1858: PUSH
1859: LD_INT 41
1861: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
1862: LD_ADDR_OWVAR 26
1866: PUSH
1867: LD_STRING Kate Wadsworth
1869: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
1870: LD_ADDR_OWVAR 31
1874: PUSH
1875: LD_INT 2
1877: PUSH
1878: LD_INT 3
1880: PUSH
1881: LD_INT 1
1883: PUSH
1884: LD_INT 0
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: LIST
1891: LIST
1892: ST_TO_ADDR
// un = CreateHuman ;
1893: LD_ADDR_VAR 0 4
1897: PUSH
1898: CALL_OW 44
1902: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 11
1910: PPUSH
1911: LD_INT 0
1913: PPUSH
1914: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
1918: LD_INT 11
1920: PPUSH
1921: LD_INT 22
1923: PUSH
1924: LD_INT 1
1926: PUSH
1927: EMPTY
1928: LIST
1929: LIST
1930: PUSH
1931: LD_INT 21
1933: PUSH
1934: LD_INT 1
1936: PUSH
1937: EMPTY
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 26
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: EMPTY
1948: LIST
1949: LIST
1950: PUSH
1951: EMPTY
1952: LIST
1953: LIST
1954: LIST
1955: PPUSH
1956: CALL_OW 70
1960: PUSH
1961: LD_INT 1
1963: ARRAY
1964: PPUSH
1965: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
1969: LD_INT 11
1971: PPUSH
1972: LD_INT 22
1974: PUSH
1975: LD_INT 1
1977: PUSH
1978: EMPTY
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 21
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: EMPTY
1989: LIST
1990: LIST
1991: PUSH
1992: LD_INT 26
1994: PUSH
1995: LD_INT 1
1997: PUSH
1998: EMPTY
1999: LIST
2000: LIST
2001: PUSH
2002: EMPTY
2003: LIST
2004: LIST
2005: LIST
2006: PPUSH
2007: CALL_OW 70
2011: PUSH
2012: LD_INT 1
2014: ARRAY
2015: PPUSH
2016: LD_STRING D6-Sol3-1
2018: PPUSH
2019: CALL_OW 88
// end ; end_of_file
2023: LD_VAR 0 2
2027: RET
// export function PrepareRussianCommander ; begin
2028: LD_INT 0
2030: PPUSH
// uc_side = 3 ;
2031: LD_ADDR_OWVAR 20
2035: PUSH
2036: LD_INT 3
2038: ST_TO_ADDR
// uc_nation = 3 ;
2039: LD_ADDR_OWVAR 21
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2047: LD_ADDR_EXP 15
2051: PUSH
2052: LD_STRING Stolypin
2054: PPUSH
2055: CALL_OW 25
2059: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2060: LD_EXP 15
2064: PPUSH
2065: LD_INT 21
2067: PPUSH
2068: CALL_OW 52
// end ;
2072: LD_VAR 0 1
2076: RET
// export function PrepareRussianBase ; var i ; begin
2077: LD_INT 0
2079: PPUSH
2080: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2081: LD_INT 3
2083: PPUSH
2084: LD_INT 3
2086: PPUSH
2087: LD_INT 22
2089: PPUSH
2090: LD_EXP 16
2094: PPUSH
2095: LD_EXP 17
2099: PPUSH
2100: CALL_OW 12
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 2
2110: PPUSH
2111: CALL 3354 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2115: LD_INT 3
2117: PPUSH
2118: LD_INT 3
2120: PPUSH
2121: LD_INT 21
2123: PPUSH
2124: LD_EXP 16
2128: PPUSH
2129: LD_EXP 17
2133: PPUSH
2134: CALL_OW 12
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: LD_INT 3
2144: PPUSH
2145: CALL 3354 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2149: LD_INT 3
2151: PPUSH
2152: LD_INT 3
2154: PPUSH
2155: LD_INT 1
2157: PPUSH
2158: LD_EXP 16
2162: PPUSH
2163: LD_EXP 17
2167: PPUSH
2168: CALL_OW 12
2172: PPUSH
2173: LD_INT 4
2175: PPUSH
2176: LD_INT 2
2178: PPUSH
2179: CALL 3354 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2183: LD_INT 3
2185: PPUSH
2186: LD_INT 3
2188: PPUSH
2189: LD_INT 24
2191: PPUSH
2192: LD_EXP 16
2196: PPUSH
2197: LD_EXP 17
2201: PPUSH
2202: CALL_OW 12
2206: PPUSH
2207: LD_INT 3
2209: PPUSH
2210: LD_INT 6
2212: PPUSH
2213: CALL 3354 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2217: LD_ADDR_VAR 0 2
2221: PUSH
2222: LD_INT 22
2224: PUSH
2225: LD_INT 3
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: PUSH
2232: LD_INT 30
2234: PUSH
2235: LD_INT 32
2237: PUSH
2238: EMPTY
2239: LIST
2240: LIST
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PPUSH
2246: CALL_OW 69
2250: PUSH
2251: FOR_IN
2252: IFFALSE 2292
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2254: LD_INT 3
2256: PPUSH
2257: LD_INT 3
2259: PPUSH
2260: LD_VAR 0 2
2264: PPUSH
2265: LD_EXP 16
2269: PPUSH
2270: LD_EXP 17
2274: PPUSH
2275: CALL_OW 12
2279: PPUSH
2280: LD_INT 1
2282: PPUSH
2283: LD_INT 1
2285: PPUSH
2286: CALL 3354 0 6
2290: GO 2251
2292: POP
2293: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2294: LD_ADDR_VAR 0 2
2298: PUSH
2299: LD_INT 22
2301: PUSH
2302: LD_INT 3
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PUSH
2309: LD_INT 30
2311: PUSH
2312: LD_INT 31
2314: PUSH
2315: EMPTY
2316: LIST
2317: LIST
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PPUSH
2323: CALL_OW 69
2327: PUSH
2328: FOR_IN
2329: IFFALSE 2357
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2331: LD_EXP 16
2335: PPUSH
2336: LD_EXP 17
2340: PPUSH
2341: CALL_OW 12
2345: PPUSH
2346: LD_VAR 0 2
2350: PPUSH
2351: CALL 3464 0 2
2355: GO 2328
2357: POP
2358: POP
// end ;
2359: LD_VAR 0 1
2363: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
// uc_side = 6 ;
2370: LD_ADDR_OWVAR 20
2374: PUSH
2375: LD_INT 6
2377: ST_TO_ADDR
// uc_nation = 3 ;
2378: LD_ADDR_OWVAR 21
2382: PUSH
2383: LD_INT 3
2385: ST_TO_ADDR
// for i := 1 to [ 2 , 1 , 1 ] [ Difficulty ] do
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: DOUBLE
2392: LD_INT 1
2394: DEC
2395: ST_TO_ADDR
2396: LD_INT 2
2398: PUSH
2399: LD_INT 1
2401: PUSH
2402: LD_INT 1
2404: PUSH
2405: EMPTY
2406: LIST
2407: LIST
2408: LIST
2409: PUSH
2410: LD_OWVAR 67
2414: ARRAY
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2577
// begin vc_engine = 1 ;
2419: LD_ADDR_OWVAR 39
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_control = 1 ;
2427: LD_ADDR_OWVAR 38
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 42
2442: PUSH
2443: LD_INT 42
2445: PUSH
2446: LD_INT 43
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: PUSH
2454: LD_OWVAR 67
2458: ARRAY
2459: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2460: LD_ADDR_OWVAR 37
2464: PUSH
2465: LD_INT 21
2467: PUSH
2468: LD_INT 22
2470: PUSH
2471: LD_INT 22
2473: PUSH
2474: EMPTY
2475: LIST
2476: LIST
2477: LIST
2478: PUSH
2479: LD_OWVAR 67
2483: ARRAY
2484: ST_TO_ADDR
// veh = CreateVehicle ;
2485: LD_ADDR_VAR 0 3
2489: PUSH
2490: CALL_OW 45
2494: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2495: LD_VAR 0 3
2499: PPUSH
2500: LD_INT 3
2502: PPUSH
2503: LD_INT 0
2505: PPUSH
2506: CALL_OW 49
// hc_gallery =  ;
2510: LD_ADDR_OWVAR 33
2514: PUSH
2515: LD_STRING 
2517: ST_TO_ADDR
// hc_name =  ;
2518: LD_ADDR_OWVAR 26
2522: PUSH
2523: LD_STRING 
2525: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2526: LD_INT 0
2528: PPUSH
2529: LD_INT 3
2531: PPUSH
2532: LD_EXP 16
2536: PPUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 12
2546: PPUSH
2547: CALL_OW 380
// un = CreateHuman ;
2551: LD_ADDR_VAR 0 4
2555: PUSH
2556: CALL_OW 44
2560: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2561: LD_VAR 0 4
2565: PPUSH
2566: LD_VAR 0 3
2570: PPUSH
2571: CALL_OW 52
// end ;
2575: GO 2416
2577: POP
2578: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2579: LD_INT 0
2581: PPUSH
2582: LD_INT 2
2584: PPUSH
2585: LD_EXP 16
2589: PPUSH
2590: LD_EXP 17
2594: PPUSH
2595: CALL_OW 12
2599: PUSH
2600: LD_INT 2
2602: PLUS
2603: PPUSH
2604: CALL_OW 380
// un = CreateHuman ;
2608: LD_ADDR_VAR 0 4
2612: PUSH
2613: CALL_OW 44
2617: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2618: LD_VAR 0 4
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 0
2628: PPUSH
2629: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
2633: LD_INT 0
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_EXP 16
2643: PPUSH
2644: LD_EXP 17
2648: PPUSH
2649: CALL_OW 12
2653: PUSH
2654: LD_INT 2
2656: PLUS
2657: PPUSH
2658: CALL_OW 380
// un = CreateHuman ;
2662: LD_ADDR_VAR 0 4
2666: PUSH
2667: CALL_OW 44
2671: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2672: LD_VAR 0 4
2676: PPUSH
2677: LD_INT 3
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
2687: LD_ADDR_VAR 0 2
2691: PUSH
2692: DOUBLE
2693: LD_INT 1
2695: DEC
2696: ST_TO_ADDR
2697: LD_INT 2
2699: PUSH
2700: LD_INT 3
2702: PUSH
2703: LD_INT 3
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: PUSH
2711: LD_OWVAR 67
2715: ARRAY
2716: PUSH
2717: LD_INT 1
2719: PPUSH
2720: LD_INT 3
2722: PPUSH
2723: CALL_OW 12
2727: PLUS
2728: PUSH
2729: FOR_TO
2730: IFFALSE 2800
// begin hc_gallery =  ;
2732: LD_ADDR_OWVAR 33
2736: PUSH
2737: LD_STRING 
2739: ST_TO_ADDR
// hc_name =  ;
2740: LD_ADDR_OWVAR 26
2744: PUSH
2745: LD_STRING 
2747: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2748: LD_INT 0
2750: PPUSH
2751: LD_INT 1
2753: PPUSH
2754: LD_EXP 16
2758: PPUSH
2759: LD_EXP 17
2763: PPUSH
2764: CALL_OW 12
2768: PPUSH
2769: CALL_OW 380
// un = CreateHuman ;
2773: LD_ADDR_VAR 0 4
2777: PUSH
2778: CALL_OW 44
2782: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
2783: LD_VAR 0 4
2787: PPUSH
2788: LD_INT 3
2790: PPUSH
2791: LD_INT 0
2793: PPUSH
2794: CALL_OW 49
// end ;
2798: GO 2729
2800: POP
2801: POP
// vc_engine = 1 ;
2802: LD_ADDR_OWVAR 39
2806: PUSH
2807: LD_INT 1
2809: ST_TO_ADDR
// vc_control = 1 ;
2810: LD_ADDR_OWVAR 38
2814: PUSH
2815: LD_INT 1
2817: ST_TO_ADDR
// vc_weapon = 51 ;
2818: LD_ADDR_OWVAR 40
2822: PUSH
2823: LD_INT 51
2825: ST_TO_ADDR
// vc_chassis = 22 ;
2826: LD_ADDR_OWVAR 37
2830: PUSH
2831: LD_INT 22
2833: ST_TO_ADDR
// veh = CreateVehicle ;
2834: LD_ADDR_VAR 0 3
2838: PUSH
2839: CALL_OW 45
2843: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2844: LD_VAR 0 3
2848: PPUSH
2849: LD_INT 3
2851: PPUSH
2852: LD_INT 0
2854: PPUSH
2855: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
2859: LD_VAR 0 3
2863: PPUSH
2864: LD_INT 1
2866: PPUSH
2867: LD_INT 100
2869: PPUSH
2870: CALL_OW 290
// hc_gallery =  ;
2874: LD_ADDR_OWVAR 33
2878: PUSH
2879: LD_STRING 
2881: ST_TO_ADDR
// hc_name =  ;
2882: LD_ADDR_OWVAR 26
2886: PUSH
2887: LD_STRING 
2889: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2890: LD_INT 0
2892: PPUSH
2893: LD_INT 3
2895: PPUSH
2896: LD_EXP 16
2900: PPUSH
2901: LD_EXP 17
2905: PPUSH
2906: CALL_OW 12
2910: PPUSH
2911: CALL_OW 380
// un = CreateHuman ;
2915: LD_ADDR_VAR 0 4
2919: PUSH
2920: CALL_OW 44
2924: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
2925: LD_VAR 0 4
2929: PPUSH
2930: LD_VAR 0 3
2934: PPUSH
2935: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
2939: LD_ADDR_VAR 0 2
2943: PUSH
2944: LD_INT 22
2946: PUSH
2947: LD_INT 6
2949: PUSH
2950: EMPTY
2951: LIST
2952: LIST
2953: PUSH
2954: LD_INT 1
2956: PUSH
2957: LD_INT 3
2959: PUSH
2960: LD_INT 25
2962: PUSH
2963: LD_INT 2
2965: PUSH
2966: EMPTY
2967: LIST
2968: LIST
2969: PUSH
2970: EMPTY
2971: LIST
2972: LIST
2973: PUSH
2974: LD_INT 3
2976: PUSH
2977: LD_INT 25
2979: PUSH
2980: LD_INT 4
2982: PUSH
2983: EMPTY
2984: LIST
2985: LIST
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: PUSH
2991: EMPTY
2992: LIST
2993: LIST
2994: LIST
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: PPUSH
3000: CALL_OW 69
3004: PUSH
3005: FOR_IN
3006: IFFALSE 3025
// ComAgressiveMove ( i , 45 , 46 ) ;
3008: LD_VAR 0 2
3012: PPUSH
3013: LD_INT 45
3015: PPUSH
3016: LD_INT 46
3018: PPUSH
3019: CALL_OW 114
3023: GO 3005
3025: POP
3026: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3027: LD_ADDR_VAR 0 2
3031: PUSH
3032: LD_INT 22
3034: PUSH
3035: LD_INT 6
3037: PUSH
3038: EMPTY
3039: LIST
3040: LIST
3041: PUSH
3042: LD_INT 25
3044: PUSH
3045: LD_INT 2
3047: PUSH
3048: EMPTY
3049: LIST
3050: LIST
3051: PUSH
3052: EMPTY
3053: LIST
3054: LIST
3055: PPUSH
3056: CALL_OW 69
3060: PUSH
3061: FOR_IN
3062: IFFALSE 3093
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3064: LD_ADDR_EXP 19
3068: PUSH
3069: LD_VAR 0 2
3073: PPUSH
3074: LD_INT 0
3076: PPUSH
3077: LD_INT 48
3079: PPUSH
3080: LD_INT 55
3082: PPUSH
3083: LD_INT 5
3085: PPUSH
3086: CALL_OW 145
3090: ST_TO_ADDR
3091: GO 3061
3093: POP
3094: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3095: LD_ADDR_VAR 0 2
3099: PUSH
3100: LD_INT 22
3102: PUSH
3103: LD_INT 6
3105: PUSH
3106: EMPTY
3107: LIST
3108: LIST
3109: PUSH
3110: LD_INT 25
3112: PUSH
3113: LD_INT 4
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: PPUSH
3124: CALL_OW 69
3128: PUSH
3129: FOR_IN
3130: IFFALSE 3149
// ComMoveXY ( i , 39 , 55 ) ;
3132: LD_VAR 0 2
3136: PPUSH
3137: LD_INT 39
3139: PPUSH
3140: LD_INT 55
3142: PPUSH
3143: CALL_OW 111
3147: GO 3129
3149: POP
3150: POP
// end ;
3151: LD_VAR 0 1
3155: RET
// export function PrepareFirstAttack ; var i , un ; begin
3156: LD_INT 0
3158: PPUSH
3159: PPUSH
3160: PPUSH
// uc_side = 5 ;
3161: LD_ADDR_OWVAR 20
3165: PUSH
3166: LD_INT 5
3168: ST_TO_ADDR
// uc_nation = 3 ;
3169: LD_ADDR_OWVAR 21
3173: PUSH
3174: LD_INT 3
3176: ST_TO_ADDR
// for i := 1 to 4 do
3177: LD_ADDR_VAR 0 2
3181: PUSH
3182: DOUBLE
3183: LD_INT 1
3185: DEC
3186: ST_TO_ADDR
3187: LD_INT 4
3189: PUSH
3190: FOR_TO
3191: IFFALSE 3276
// begin hc_gallery =  ;
3193: LD_ADDR_OWVAR 33
3197: PUSH
3198: LD_STRING 
3200: ST_TO_ADDR
// hc_name =  ;
3201: LD_ADDR_OWVAR 26
3205: PUSH
3206: LD_STRING 
3208: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3209: LD_INT 0
3211: PPUSH
3212: LD_INT 1
3214: PPUSH
3215: LD_EXP 16
3219: PPUSH
3220: LD_EXP 17
3224: PPUSH
3225: CALL_OW 12
3229: PPUSH
3230: CALL_OW 380
// un = CreateHuman ;
3234: LD_ADDR_VAR 0 3
3238: PUSH
3239: CALL_OW 44
3243: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3244: LD_VAR 0 3
3248: PPUSH
3249: LD_INT 4
3251: PPUSH
3252: LD_INT 0
3254: PPUSH
3255: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3259: LD_VAR 0 3
3263: PPUSH
3264: LD_INT 48
3266: PPUSH
3267: LD_INT 14
3269: PPUSH
3270: CALL_OW 114
// end ;
3274: GO 3190
3276: POP
3277: POP
// firstRussianAttack = 1 ;
3278: LD_ADDR_EXP 21
3282: PUSH
3283: LD_INT 1
3285: ST_TO_ADDR
// end ; end_of_file
3286: LD_VAR 0 1
3290: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3291: LD_INT 0
3293: PPUSH
3294: PPUSH
// if exist_mode then
3295: LD_VAR 0 2
3299: IFFALSE 3324
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3301: LD_ADDR_VAR 0 4
3305: PUSH
3306: LD_EXP 43
3310: PUSH
3311: LD_VAR 0 1
3315: STR
3316: PPUSH
3317: CALL_OW 34
3321: ST_TO_ADDR
// end else
3322: GO 3339
// begin unit := NewCharacter ( ident ) ;
3324: LD_ADDR_VAR 0 4
3328: PUSH
3329: LD_VAR 0 1
3333: PPUSH
3334: CALL_OW 25
3338: ST_TO_ADDR
// end ; result := unit ;
3339: LD_ADDR_VAR 0 3
3343: PUSH
3344: LD_VAR 0 4
3348: ST_TO_ADDR
// end ;
3349: LD_VAR 0 3
3353: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3354: LD_INT 0
3356: PPUSH
3357: PPUSH
3358: PPUSH
3359: PPUSH
// for i = 1 to count do
3360: LD_ADDR_VAR 0 8
3364: PUSH
3365: DOUBLE
3366: LD_INT 1
3368: DEC
3369: ST_TO_ADDR
3370: LD_VAR 0 6
3374: PUSH
3375: FOR_TO
3376: IFFALSE 3457
// begin uc_side = side ;
3378: LD_ADDR_OWVAR 20
3382: PUSH
3383: LD_VAR 0 1
3387: ST_TO_ADDR
// uc_nation = nation ;
3388: LD_ADDR_OWVAR 21
3392: PUSH
3393: LD_VAR 0 2
3397: ST_TO_ADDR
// hc_gallery =  ;
3398: LD_ADDR_OWVAR 33
3402: PUSH
3403: LD_STRING 
3405: ST_TO_ADDR
// hc_name =  ;
3406: LD_ADDR_OWVAR 26
3410: PUSH
3411: LD_STRING 
3413: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3414: LD_INT 0
3416: PPUSH
3417: LD_VAR 0 5
3421: PPUSH
3422: LD_VAR 0 4
3426: PPUSH
3427: CALL_OW 380
// un = CreateHuman ;
3431: LD_ADDR_VAR 0 10
3435: PUSH
3436: CALL_OW 44
3440: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3441: LD_VAR 0 10
3445: PPUSH
3446: LD_VAR 0 3
3450: PPUSH
3451: CALL_OW 52
// end ;
3455: GO 3375
3457: POP
3458: POP
// end ;
3459: LD_VAR 0 7
3463: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3464: LD_INT 0
3466: PPUSH
3467: PPUSH
3468: PPUSH
// uc_side := GetSide ( b ) ;
3469: LD_ADDR_OWVAR 20
3473: PUSH
3474: LD_VAR 0 2
3478: PPUSH
3479: CALL_OW 255
3483: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3484: LD_ADDR_OWVAR 21
3488: PUSH
3489: LD_VAR 0 2
3493: PPUSH
3494: CALL_OW 248
3498: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3499: LD_INT 0
3501: PPUSH
3502: LD_INT 1
3504: PPUSH
3505: LD_VAR 0 1
3509: PPUSH
3510: CALL_OW 380
// un = CreateHuman ;
3514: LD_ADDR_VAR 0 4
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3524: LD_ADDR_VAR 0 5
3528: PUSH
3529: LD_VAR 0 2
3533: PPUSH
3534: CALL_OW 254
3538: PUSH
3539: LD_INT 3
3541: MINUS
3542: ST_TO_ADDR
// if dir < 0 then
3543: LD_VAR 0 5
3547: PUSH
3548: LD_INT 0
3550: LESS
3551: IFFALSE 3567
// dir := 6 + dir ;
3553: LD_ADDR_VAR 0 5
3557: PUSH
3558: LD_INT 6
3560: PUSH
3561: LD_VAR 0 5
3565: PLUS
3566: ST_TO_ADDR
// SetDir ( un , dir ) ;
3567: LD_VAR 0 4
3571: PPUSH
3572: LD_VAR 0 5
3576: PPUSH
3577: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
3581: LD_VAR 0 4
3585: PPUSH
3586: LD_VAR 0 2
3590: PPUSH
3591: CALL_OW 52
// end ;
3595: LD_VAR 0 3
3599: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
3600: LD_INT 0
3602: PPUSH
3603: PPUSH
3604: PPUSH
// rnd = rand ( 1 , characters ) ;
3605: LD_ADDR_VAR 0 6
3609: PUSH
3610: LD_INT 1
3612: PPUSH
3613: LD_VAR 0 1
3617: PPUSH
3618: CALL_OW 12
3622: ST_TO_ADDR
// for i = 1 to characters do
3623: LD_ADDR_VAR 0 5
3627: PUSH
3628: DOUBLE
3629: LD_INT 1
3631: DEC
3632: ST_TO_ADDR
3633: LD_VAR 0 1
3637: PUSH
3638: FOR_TO
3639: IFFALSE 3749
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
3641: LD_VAR 0 5
3645: PUSH
3646: LD_VAR 0 6
3650: EQUAL
3651: PUSH
3652: LD_VAR 0 1
3656: PUSH
3657: LD_VAR 0 5
3661: ARRAY
3662: PPUSH
3663: CALL_OW 258
3667: PUSH
3668: LD_INT 1
3670: EQUAL
3671: AND
3672: IFFALSE 3694
// Say ( characters [ i ] , dialogMID ) ;
3674: LD_VAR 0 1
3678: PUSH
3679: LD_VAR 0 5
3683: ARRAY
3684: PPUSH
3685: LD_VAR 0 2
3689: PPUSH
3690: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
3694: LD_VAR 0 5
3698: PUSH
3699: LD_VAR 0 6
3703: EQUAL
3704: PUSH
3705: LD_VAR 0 1
3709: PUSH
3710: LD_VAR 0 5
3714: ARRAY
3715: PPUSH
3716: CALL_OW 258
3720: PUSH
3721: LD_INT 2
3723: EQUAL
3724: AND
3725: IFFALSE 3747
// Say ( characters [ i ] , dialogFID ) ;
3727: LD_VAR 0 1
3731: PUSH
3732: LD_VAR 0 5
3736: ARRAY
3737: PPUSH
3738: LD_VAR 0 3
3742: PPUSH
3743: CALL_OW 88
// end ;
3747: GO 3638
3749: POP
3750: POP
// end ;
3751: LD_VAR 0 4
3755: RET
// export function PrepareDifficulty ; begin
3756: LD_INT 0
3758: PPUSH
// if Difficulty = 1 then
3759: LD_OWVAR 67
3763: PUSH
3764: LD_INT 1
3766: EQUAL
3767: IFFALSE 3785
// begin RuSoldMinLevel = 0 ;
3769: LD_ADDR_EXP 16
3773: PUSH
3774: LD_INT 0
3776: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3777: LD_ADDR_EXP 17
3781: PUSH
3782: LD_INT 2
3784: ST_TO_ADDR
// end ; if Difficulty = 2 then
3785: LD_OWVAR 67
3789: PUSH
3790: LD_INT 2
3792: EQUAL
3793: IFFALSE 3831
// begin RuSoldMinLevel = 1 ;
3795: LD_ADDR_EXP 16
3799: PUSH
3800: LD_INT 1
3802: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
3803: LD_ADDR_EXP 17
3807: PUSH
3808: LD_INT 2
3810: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
3811: LD_INT 14
3813: PPUSH
3814: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3818: LD_INT 51
3820: PPUSH
3821: LD_INT 3
3823: PPUSH
3824: LD_INT 1
3826: PPUSH
3827: CALL_OW 322
// end ; if Difficulty = 3 then
3831: LD_OWVAR 67
3835: PUSH
3836: LD_INT 3
3838: EQUAL
3839: IFFALSE 3907
// begin RuSoldMinLevel = 1 ;
3841: LD_ADDR_EXP 16
3845: PUSH
3846: LD_INT 1
3848: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
3849: LD_ADDR_EXP 17
3853: PUSH
3854: LD_INT 3
3856: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
3857: LD_INT 13
3859: PPUSH
3860: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
3864: LD_INT 14
3866: PPUSH
3867: CALL_OW 64
// SetTech ( 51 , 3 , state_enabled ) ;
3871: LD_INT 51
3873: PPUSH
3874: LD_INT 3
3876: PPUSH
3877: LD_INT 1
3879: PPUSH
3880: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
3884: LD_INT 52
3886: PPUSH
3887: LD_INT 3
3889: PPUSH
3890: LD_INT 1
3892: PPUSH
3893: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
3897: LD_INT 25
3899: PPUSH
3900: LD_INT 44
3902: PPUSH
3903: CALL_OW 431
// end ; end ;
3907: LD_VAR 0 1
3911: RET
// export function EnergyDialog ; begin
3912: LD_INT 0
3914: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
3915: LD_INT 46
3917: PPUSH
3918: LD_INT 1
3920: PPUSH
3921: CALL_OW 321
3925: PUSH
3926: LD_INT 1
3928: EQUAL
3929: PUSH
3930: LD_INT 35
3932: PPUSH
3933: LD_INT 1
3935: PPUSH
3936: CALL_OW 321
3940: PUSH
3941: LD_INT 1
3943: EQUAL
3944: AND
3945: IFFALSE 3969
// begin Say ( JMM , D9c-JMM-1 ) ;
3947: LD_EXP 1
3951: PPUSH
3952: LD_STRING D9c-JMM-1
3954: PPUSH
3955: CALL_OW 88
// energyVDialog = 1 ;
3959: LD_ADDR_EXP 31
3963: PUSH
3964: LD_INT 1
3966: ST_TO_ADDR
// end else
3967: GO 4123
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
3969: LD_INT 35
3971: PPUSH
3972: LD_INT 1
3974: PPUSH
3975: CALL_OW 321
3979: PUSH
3980: LD_INT 2
3982: EQUAL
3983: PUSH
3984: LD_EXP 31
3988: PUSH
3989: LD_INT 0
3991: EQUAL
3992: AND
3993: IFFALSE 4015
// begin Say ( JMM , D9c-JMM-1a ) ;
3995: LD_EXP 1
3999: PPUSH
4000: LD_STRING D9c-JMM-1a
4002: PPUSH
4003: CALL_OW 88
// energyVDialog = 1 ;
4007: LD_ADDR_EXP 31
4011: PUSH
4012: LD_INT 1
4014: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4015: LD_INT 46
4017: PPUSH
4018: LD_INT 1
4020: PPUSH
4021: CALL_OW 321
4025: PUSH
4026: LD_INT 2
4028: EQUAL
4029: PUSH
4030: LD_EXP 31
4034: PUSH
4035: LD_INT 0
4037: EQUAL
4038: AND
4039: IFFALSE 4061
// begin Say ( JMM , D9c-JMM-1b ) ;
4041: LD_EXP 1
4045: PPUSH
4046: LD_STRING D9c-JMM-1b
4048: PPUSH
4049: CALL_OW 88
// energyVDialog = 1 ;
4053: LD_ADDR_EXP 31
4057: PUSH
4058: LD_INT 1
4060: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4061: LD_INT 46
4063: PPUSH
4064: LD_INT 1
4066: PPUSH
4067: CALL_OW 321
4071: PUSH
4072: LD_INT 2
4074: EQUAL
4075: PUSH
4076: LD_INT 21
4078: PPUSH
4079: LD_INT 1
4081: PPUSH
4082: CALL_OW 321
4086: PUSH
4087: LD_INT 2
4089: EQUAL
4090: AND
4091: PUSH
4092: LD_EXP 31
4096: PUSH
4097: LD_INT 0
4099: EQUAL
4100: AND
4101: IFFALSE 4123
// begin Say ( JMM , D9c-JMM-1c ) ;
4103: LD_EXP 1
4107: PPUSH
4108: LD_STRING D9c-JMM-1c
4110: PPUSH
4111: CALL_OW 88
// energyVDialog = 1 ;
4115: LD_ADDR_EXP 31
4119: PUSH
4120: LD_INT 1
4122: ST_TO_ADDR
// end ; end ; end ;
4123: LD_VAR 0 1
4127: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4128: LD_INT 0
4130: PPUSH
4131: PPUSH
4132: PPUSH
4133: PPUSH
4134: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4135: LD_VAR 0 1
4139: NOT
4140: PUSH
4141: LD_VAR 0 1
4145: PPUSH
4146: CALL_OW 256
4150: PUSH
4151: LD_INT 250
4153: LESS
4154: OR
4155: PUSH
4156: LD_VAR 0 1
4160: PPUSH
4161: CALL_OW 314
4165: PUSH
4166: LD_VAR 0 1
4170: PPUSH
4171: CALL_OW 261
4175: PUSH
4176: LD_INT 20
4178: GREATER
4179: AND
4180: OR
4181: IFFALSE 4185
// exit ;
4183: GO 4550
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4185: LD_VAR 0 1
4189: PPUSH
4190: CALL_OW 261
4194: PUSH
4195: LD_INT 20
4197: LESS
4198: PUSH
4199: LD_VAR 0 1
4203: PPUSH
4204: CALL_OW 110
4208: PUSH
4209: LD_INT 21
4211: EQUAL
4212: NOT
4213: AND
4214: IFFALSE 4241
// begin ComStop ( bulldozer ) ;
4216: LD_VAR 0 1
4220: PPUSH
4221: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4225: LD_VAR 0 1
4229: PPUSH
4230: LD_INT 21
4232: PPUSH
4233: CALL_OW 109
// exit ;
4237: GO 4550
// end else
4239: GO 4268
// if GetFuel ( bulldozer ) > 20 then
4241: LD_VAR 0 1
4245: PPUSH
4246: CALL_OW 261
4250: PUSH
4251: LD_INT 20
4253: GREATER
4254: IFFALSE 4268
// SetTag ( bulldozer , 0 ) ;
4256: LD_VAR 0 1
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4268: LD_ADDR_VAR 0 5
4272: PUSH
4273: LD_VAR 0 2
4277: PPUSH
4278: CALL_OW 353
4282: ST_TO_ADDR
// tmp := [ ] ;
4283: LD_ADDR_VAR 0 6
4287: PUSH
4288: EMPTY
4289: ST_TO_ADDR
// for i = 1 to list do
4290: LD_ADDR_VAR 0 4
4294: PUSH
4295: DOUBLE
4296: LD_INT 1
4298: DEC
4299: ST_TO_ADDR
4300: LD_VAR 0 5
4304: PUSH
4305: FOR_TO
4306: IFFALSE 4404
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4308: LD_VAR 0 5
4312: PUSH
4313: LD_VAR 0 4
4317: ARRAY
4318: PUSH
4319: LD_INT 1
4321: ARRAY
4322: PPUSH
4323: LD_VAR 0 5
4327: PUSH
4328: LD_VAR 0 4
4332: ARRAY
4333: PUSH
4334: LD_INT 2
4336: ARRAY
4337: PPUSH
4338: CALL_OW 554
4342: IFFALSE 4402
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4344: LD_ADDR_VAR 0 6
4348: PUSH
4349: LD_VAR 0 6
4353: PPUSH
4354: LD_VAR 0 6
4358: PUSH
4359: LD_INT 1
4361: PLUS
4362: PPUSH
4363: LD_VAR 0 5
4367: PUSH
4368: LD_VAR 0 4
4372: ARRAY
4373: PUSH
4374: LD_INT 1
4376: ARRAY
4377: PUSH
4378: LD_VAR 0 5
4382: PUSH
4383: LD_VAR 0 4
4387: ARRAY
4388: PUSH
4389: LD_INT 2
4391: ARRAY
4392: PUSH
4393: EMPTY
4394: LIST
4395: LIST
4396: PPUSH
4397: CALL_OW 1
4401: ST_TO_ADDR
// end ;
4402: GO 4305
4404: POP
4405: POP
// ComStop ( bulldozer ) ;
4406: LD_VAR 0 1
4410: PPUSH
4411: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
4415: LD_ADDR_VAR 0 7
4419: PUSH
4420: LD_VAR 0 1
4424: PPUSH
4425: CALL_OW 250
4429: PUSH
4430: LD_VAR 0 1
4434: PPUSH
4435: CALL_OW 251
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: ST_TO_ADDR
// for i = tmp downto 1 do
4444: LD_ADDR_VAR 0 4
4448: PUSH
4449: DOUBLE
4450: LD_VAR 0 6
4454: INC
4455: ST_TO_ADDR
4456: LD_INT 1
4458: PUSH
4459: FOR_DOWNTO
4460: IFFALSE 4548
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
4462: LD_ADDR_VAR 0 7
4466: PUSH
4467: LD_VAR 0 7
4471: PUSH
4472: LD_INT 1
4474: ARRAY
4475: PPUSH
4476: LD_VAR 0 7
4480: PUSH
4481: LD_INT 2
4483: ARRAY
4484: PPUSH
4485: LD_VAR 0 6
4489: PPUSH
4490: CALL 4651 0 3
4494: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
4495: LD_VAR 0 1
4499: PPUSH
4500: LD_VAR 0 7
4504: PUSH
4505: LD_INT 1
4507: ARRAY
4508: PPUSH
4509: LD_VAR 0 7
4513: PUSH
4514: LD_INT 2
4516: ARRAY
4517: PPUSH
4518: CALL 4555 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
4522: LD_ADDR_VAR 0 6
4526: PUSH
4527: LD_VAR 0 6
4531: PPUSH
4532: LD_VAR 0 7
4536: PUSH
4537: LD_INT 3
4539: ARRAY
4540: PPUSH
4541: CALL_OW 3
4545: ST_TO_ADDR
// end ;
4546: GO 4459
4548: POP
4549: POP
// end ;
4550: LD_VAR 0 3
4554: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
4555: LD_INT 0
4557: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
4558: LD_VAR 0 2
4562: PPUSH
4563: LD_VAR 0 3
4567: PPUSH
4568: CALL_OW 351
4572: PUSH
4573: LD_VAR 0 2
4577: PPUSH
4578: LD_VAR 0 3
4582: PPUSH
4583: CALL_OW 554
4587: AND
4588: PUSH
4589: LD_VAR 0 2
4593: PPUSH
4594: LD_VAR 0 3
4598: PPUSH
4599: CALL_OW 488
4603: AND
4604: PUSH
4605: LD_VAR 0 2
4609: PPUSH
4610: LD_VAR 0 3
4614: PPUSH
4615: CALL_OW 428
4619: PUSH
4620: LD_INT 1
4622: NEG
4623: EQUAL
4624: AND
4625: IFFALSE 4646
// AddComMoveXY ( bulldozer , x , y ) ;
4627: LD_VAR 0 1
4631: PPUSH
4632: LD_VAR 0 2
4636: PPUSH
4637: LD_VAR 0 3
4641: PPUSH
4642: CALL_OW 171
// end ;
4646: LD_VAR 0 4
4650: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
4651: LD_INT 0
4653: PPUSH
4654: PPUSH
4655: PPUSH
4656: PPUSH
4657: PPUSH
4658: PPUSH
4659: PPUSH
// dist := 99999 ;
4660: LD_ADDR_VAR 0 6
4664: PUSH
4665: LD_INT 99999
4667: ST_TO_ADDR
// for i = 1 to list do
4668: LD_ADDR_VAR 0 5
4672: PUSH
4673: DOUBLE
4674: LD_INT 1
4676: DEC
4677: ST_TO_ADDR
4678: LD_VAR 0 3
4682: PUSH
4683: FOR_TO
4684: IFFALSE 4822
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
4686: LD_ADDR_VAR 0 7
4690: PUSH
4691: LD_VAR 0 1
4695: PPUSH
4696: LD_VAR 0 2
4700: PPUSH
4701: LD_VAR 0 3
4705: PUSH
4706: LD_VAR 0 5
4710: ARRAY
4711: PUSH
4712: LD_INT 1
4714: ARRAY
4715: PPUSH
4716: LD_VAR 0 3
4720: PUSH
4721: LD_VAR 0 5
4725: ARRAY
4726: PUSH
4727: LD_INT 2
4729: ARRAY
4730: PPUSH
4731: CALL_OW 298
4735: ST_TO_ADDR
// if d = 0 then
4736: LD_VAR 0 7
4740: PUSH
4741: LD_INT 0
4743: EQUAL
4744: IFFALSE 4748
// continue ;
4746: GO 4683
// if d < dist then
4748: LD_VAR 0 7
4752: PUSH
4753: LD_VAR 0 6
4757: LESS
4758: IFFALSE 4820
// begin _x := list [ i ] [ 1 ] ;
4760: LD_ADDR_VAR 0 8
4764: PUSH
4765: LD_VAR 0 3
4769: PUSH
4770: LD_VAR 0 5
4774: ARRAY
4775: PUSH
4776: LD_INT 1
4778: ARRAY
4779: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
4780: LD_ADDR_VAR 0 9
4784: PUSH
4785: LD_VAR 0 3
4789: PUSH
4790: LD_VAR 0 5
4794: ARRAY
4795: PUSH
4796: LD_INT 2
4798: ARRAY
4799: ST_TO_ADDR
// _i := i ;
4800: LD_ADDR_VAR 0 10
4804: PUSH
4805: LD_VAR 0 5
4809: ST_TO_ADDR
// dist := d ;
4810: LD_ADDR_VAR 0 6
4814: PUSH
4815: LD_VAR 0 7
4819: ST_TO_ADDR
// end ; end ;
4820: GO 4683
4822: POP
4823: POP
// result := [ _x , _y , _i , dist ] ;
4824: LD_ADDR_VAR 0 4
4828: PUSH
4829: LD_VAR 0 8
4833: PUSH
4834: LD_VAR 0 9
4838: PUSH
4839: LD_VAR 0 10
4843: PUSH
4844: LD_VAR 0 6
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: ST_TO_ADDR
// end ;
4855: LD_VAR 0 4
4859: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
4860: LD_INT 0
4862: PPUSH
4863: PPUSH
4864: PPUSH
4865: PPUSH
// for i = 1 to 72 do
4866: LD_ADDR_VAR 0 5
4870: PUSH
4871: DOUBLE
4872: LD_INT 1
4874: DEC
4875: ST_TO_ADDR
4876: LD_INT 72
4878: PUSH
4879: FOR_TO
4880: IFFALSE 4938
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
4882: LD_VAR 0 5
4886: PPUSH
4887: LD_VAR 0 1
4891: PPUSH
4892: CALL_OW 321
4896: PUSH
4897: LD_INT 1
4899: EQUAL
4900: PUSH
4901: LD_VAR 0 5
4905: PPUSH
4906: LD_VAR 0 3
4910: PPUSH
4911: CALL_OW 482
4915: PUSH
4916: LD_INT 1
4918: EQUAL
4919: AND
4920: IFFALSE 4936
// AddComResearch ( lab , i ) ;
4922: LD_VAR 0 2
4926: PPUSH
4927: LD_VAR 0 5
4931: PPUSH
4932: CALL_OW 184
4936: GO 4879
4938: POP
4939: POP
// end ;
4940: LD_VAR 0 4
4944: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOk_list , j ; begin
4945: LD_INT 0
4947: PPUSH
4948: PPUSH
4949: PPUSH
4950: PPUSH
4951: PPUSH
// engineerOk_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
4952: LD_ADDR_VAR 0 6
4956: PUSH
4957: LD_INT 22
4959: PUSH
4960: LD_VAR 0 1
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 25
4971: PUSH
4972: LD_INT 2
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 24
4981: PUSH
4982: LD_INT 1000
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: PPUSH
4994: CALL_OW 69
4998: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
4999: LD_ADDR_VAR 0 4
5003: PUSH
5004: LD_INT 22
5006: PUSH
5007: LD_VAR 0 1
5011: PUSH
5012: EMPTY
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 21
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 3
5028: PUSH
5029: LD_INT 24
5031: PUSH
5032: LD_INT 1000
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: EMPTY
5040: LIST
5041: LIST
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: LIST
5047: PUSH
5048: EMPTY
5049: LIST
5050: PPUSH
5051: CALL_OW 69
5055: ST_TO_ADDR
// if buildings_list > 0 and engineerOk_list > 0 then
5056: LD_VAR 0 4
5060: PUSH
5061: LD_INT 0
5063: GREATER
5064: PUSH
5065: LD_VAR 0 6
5069: PUSH
5070: LD_INT 0
5072: GREATER
5073: AND
5074: IFFALSE 5140
// begin for i in engineerOk_list do
5076: LD_ADDR_VAR 0 5
5080: PUSH
5081: LD_VAR 0 6
5085: PUSH
5086: FOR_IN
5087: IFFALSE 5138
// begin for j in buildings_list do
5089: LD_ADDR_VAR 0 7
5093: PUSH
5094: LD_VAR 0 4
5098: PUSH
5099: FOR_IN
5100: IFFALSE 5134
// begin AddComExitBuilding ( i ) ;
5102: LD_VAR 0 5
5106: PPUSH
5107: CALL_OW 182
// wait ( 0 0$1 ) ;
5111: LD_INT 35
5113: PPUSH
5114: CALL_OW 67
// AddComRepairBuilding ( i , j ) ;
5118: LD_VAR 0 5
5122: PPUSH
5123: LD_VAR 0 7
5127: PPUSH
5128: CALL_OW 190
// end ;
5132: GO 5099
5134: POP
5135: POP
// end ;
5136: GO 5086
5138: POP
5139: POP
// end ; if buildings_list = 0 then
5140: LD_VAR 0 4
5144: PUSH
5145: LD_INT 0
5147: EQUAL
5148: IFFALSE 5181
// begin for i in engineerOK_list do
5150: LD_ADDR_VAR 0 5
5154: PUSH
5155: LD_VAR 0 6
5159: PUSH
5160: FOR_IN
5161: IFFALSE 5179
// begin ComEnterUnit ( i , building ) ;
5163: LD_VAR 0 5
5167: PPUSH
5168: LD_VAR 0 2
5172: PPUSH
5173: CALL_OW 120
// end ;
5177: GO 5160
5179: POP
5180: POP
// end ; end ;
5181: LD_VAR 0 3
5185: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , i , j , damageUnits ; begin
5186: LD_INT 0
5188: PPUSH
5189: PPUSH
5190: PPUSH
5191: PPUSH
5192: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
5193: LD_ADDR_VAR 0 6
5197: PUSH
5198: LD_INT 22
5200: PUSH
5201: LD_VAR 0 1
5205: PUSH
5206: EMPTY
5207: LIST
5208: LIST
5209: PUSH
5210: LD_INT 25
5212: PUSH
5213: LD_INT 4
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: EMPTY
5221: LIST
5222: LIST
5223: PPUSH
5224: CALL_OW 69
5228: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
5229: LD_ADDR_VAR 0 9
5233: PUSH
5234: LD_VAR 0 3
5238: PPUSH
5239: LD_INT 22
5241: PUSH
5242: LD_VAR 0 1
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 21
5253: PUSH
5254: LD_INT 1
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: LD_INT 3
5263: PUSH
5264: LD_INT 24
5266: PUSH
5267: LD_INT 750
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: PUSH
5274: EMPTY
5275: LIST
5276: LIST
5277: PUSH
5278: EMPTY
5279: LIST
5280: LIST
5281: LIST
5282: PPUSH
5283: CALL_OW 70
5287: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
5288: LD_VAR 0 9
5292: PUSH
5293: LD_INT 0
5295: GREATER
5296: PUSH
5297: LD_VAR 0 6
5301: PUSH
5302: LD_INT 0
5304: GREATER
5305: AND
5306: IFFALSE 5433
// begin for i = 1 to damageUnits do
5308: LD_ADDR_VAR 0 7
5312: PUSH
5313: DOUBLE
5314: LD_INT 1
5316: DEC
5317: ST_TO_ADDR
5318: LD_VAR 0 9
5322: PUSH
5323: FOR_TO
5324: IFFALSE 5348
// ComMoveToArea ( damageUnits [ i ] , healArea ) ;
5326: LD_VAR 0 9
5330: PUSH
5331: LD_VAR 0 7
5335: ARRAY
5336: PPUSH
5337: LD_VAR 0 2
5341: PPUSH
5342: CALL_OW 113
5346: GO 5323
5348: POP
5349: POP
// for i in sci_list do
5350: LD_ADDR_VAR 0 7
5354: PUSH
5355: LD_VAR 0 6
5359: PUSH
5360: FOR_IN
5361: IFFALSE 5429
// begin ComExitBuilding ( i ) ;
5363: LD_VAR 0 7
5367: PPUSH
5368: CALL_OW 122
// for j in FilterUnitsInArea ( healArea , [ f_side , side ] ) do
5372: LD_ADDR_VAR 0 8
5376: PUSH
5377: LD_VAR 0 2
5381: PPUSH
5382: LD_INT 22
5384: PUSH
5385: LD_VAR 0 1
5389: PUSH
5390: EMPTY
5391: LIST
5392: LIST
5393: PPUSH
5394: CALL_OW 70
5398: PUSH
5399: FOR_IN
5400: IFFALSE 5425
// begin AddComHeal ( i , j ) ;
5402: LD_VAR 0 7
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 188
// wait ( 1 1$0 ) ;
5416: LD_INT 2100
5418: PPUSH
5419: CALL_OW 67
// end ;
5423: GO 5399
5425: POP
5426: POP
// end ;
5427: GO 5360
5429: POP
5430: POP
// end else
5431: GO 5447
// begin AddComEnterUnit ( sci_list , build ) ;
5433: LD_VAR 0 6
5437: PPUSH
5438: LD_VAR 0 4
5442: PPUSH
5443: CALL_OW 180
// end ; end ;
5447: LD_VAR 0 5
5451: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
5452: LD_INT 0
5454: PPUSH
5455: PPUSH
5456: PPUSH
5457: PPUSH
5458: PPUSH
5459: PPUSH
5460: PPUSH
5461: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
5462: LD_INT 22
5464: PUSH
5465: LD_VAR 0 1
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: PUSH
5474: LD_INT 21
5476: PUSH
5477: LD_INT 2
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: EMPTY
5485: LIST
5486: LIST
5487: PPUSH
5488: CALL_OW 69
5492: PUSH
5493: LD_VAR 0 3
5497: LESSEQUAL
5498: IFFALSE 5565
// begin for i = 1 to vehCount do
5500: LD_ADDR_VAR 0 10
5504: PUSH
5505: DOUBLE
5506: LD_INT 1
5508: DEC
5509: ST_TO_ADDR
5510: LD_VAR 0 3
5514: PUSH
5515: FOR_TO
5516: IFFALSE 5563
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
5518: LD_VAR 0 2
5522: PPUSH
5523: LD_VAR 0 8
5527: PPUSH
5528: LD_VAR 0 6
5532: PPUSH
5533: LD_VAR 0 7
5537: PPUSH
5538: LD_VAR 0 5
5542: PUSH
5543: LD_INT 1
5545: PPUSH
5546: LD_VAR 0 5
5550: PPUSH
5551: CALL_OW 12
5555: ARRAY
5556: PPUSH
5557: CALL_OW 185
5561: GO 5515
5563: POP
5564: POP
// end ; if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
5565: LD_INT 22
5567: PUSH
5568: LD_VAR 0 1
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: PUSH
5577: LD_INT 21
5579: PUSH
5580: LD_INT 2
5582: PUSH
5583: EMPTY
5584: LIST
5585: LIST
5586: PUSH
5587: LD_INT 24
5589: PUSH
5590: LD_INT 250
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: LIST
5601: PPUSH
5602: CALL_OW 69
5606: PUSH
5607: LD_VAR 0 3
5611: GREATEREQUAL
5612: IFFALSE 5932
// begin repeat begin wait ( 0 0$1 ) ;
5614: LD_INT 35
5616: PPUSH
5617: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
5621: LD_INT 22
5623: PUSH
5624: LD_VAR 0 1
5628: PUSH
5629: EMPTY
5630: LIST
5631: LIST
5632: PUSH
5633: LD_INT 21
5635: PUSH
5636: LD_INT 2
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 24
5645: PUSH
5646: LD_INT 651
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: EMPTY
5654: LIST
5655: LIST
5656: LIST
5657: PPUSH
5658: CALL_OW 69
5662: PUSH
5663: LD_INT 0
5665: GREATER
5666: IFFALSE 5894
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
5668: LD_ADDR_VAR 0 10
5672: PUSH
5673: LD_INT 22
5675: PUSH
5676: LD_VAR 0 1
5680: PUSH
5681: EMPTY
5682: LIST
5683: LIST
5684: PUSH
5685: LD_INT 21
5687: PUSH
5688: LD_INT 2
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: PUSH
5695: LD_INT 24
5697: PUSH
5698: LD_INT 651
5700: PUSH
5701: EMPTY
5702: LIST
5703: LIST
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: LIST
5709: PPUSH
5710: CALL_OW 69
5714: PUSH
5715: FOR_IN
5716: IFFALSE 5892
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
5718: LD_ADDR_VAR 0 15
5722: PUSH
5723: LD_INT 22
5725: PUSH
5726: LD_VAR 0 4
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 69
5739: PPUSH
5740: LD_VAR 0 10
5744: PPUSH
5745: CALL_OW 74
5749: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5750: LD_ADDR_VAR 0 16
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_VAR 0 4
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 2
5769: PUSH
5770: LD_INT 59
5772: PUSH
5773: EMPTY
5774: LIST
5775: PUSH
5776: LD_INT 21
5778: PUSH
5779: LD_INT 1
5781: PUSH
5782: EMPTY
5783: LIST
5784: LIST
5785: PUSH
5786: LD_INT 21
5788: PUSH
5789: LD_INT 2
5791: PUSH
5792: EMPTY
5793: LIST
5794: LIST
5795: PUSH
5796: EMPTY
5797: LIST
5798: LIST
5799: LIST
5800: LIST
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PUSH
5806: EMPTY
5807: LIST
5808: PPUSH
5809: CALL_OW 69
5813: PPUSH
5814: LD_VAR 0 10
5818: PPUSH
5819: CALL_OW 74
5823: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5824: LD_VAR 0 10
5828: PPUSH
5829: LD_VAR 0 15
5833: PPUSH
5834: CALL_OW 296
5838: PUSH
5839: LD_INT 8
5841: PLUS
5842: PUSH
5843: LD_VAR 0 10
5847: PPUSH
5848: LD_VAR 0 16
5852: PPUSH
5853: CALL_OW 296
5857: LESS
5858: IFFALSE 5876
// begin ComAttackUnit ( i , target1 ) ;
5860: LD_VAR 0 10
5864: PPUSH
5865: LD_VAR 0 15
5869: PPUSH
5870: CALL_OW 115
// end else
5874: GO 5890
// begin ComAttackUnit ( i , target2 ) ;
5876: LD_VAR 0 10
5880: PPUSH
5881: LD_VAR 0 16
5885: PPUSH
5886: CALL_OW 115
// end ; end ;
5890: GO 5715
5892: POP
5893: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount ;
5894: LD_INT 22
5896: PUSH
5897: LD_VAR 0 1
5901: PUSH
5902: EMPTY
5903: LIST
5904: LIST
5905: PUSH
5906: LD_INT 21
5908: PUSH
5909: LD_INT 2
5911: PUSH
5912: EMPTY
5913: LIST
5914: LIST
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 69
5924: PUSH
5925: LD_VAR 0 3
5929: LESSEQUAL
5930: IFFALSE 5614
// end ; end ;
5932: LD_VAR 0 9
5936: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
5937: LD_INT 0
5939: PPUSH
5940: PPUSH
5941: PPUSH
5942: PPUSH
5943: PPUSH
5944: PPUSH
5945: PPUSH
5946: PPUSH
5947: PPUSH
5948: PPUSH
5949: PPUSH
// for i = 1 to medicCount do
5950: LD_ADDR_VAR 0 14
5954: PUSH
5955: DOUBLE
5956: LD_INT 1
5958: DEC
5959: ST_TO_ADDR
5960: LD_VAR 0 7
5964: PUSH
5965: FOR_TO
5966: IFFALSE 6048
// begin uc_side = side ;
5968: LD_ADDR_OWVAR 20
5972: PUSH
5973: LD_VAR 0 1
5977: ST_TO_ADDR
// uc_nation = nation ;
5978: LD_ADDR_OWVAR 21
5982: PUSH
5983: LD_VAR 0 2
5987: ST_TO_ADDR
// hc_name =  ;
5988: LD_ADDR_OWVAR 26
5992: PUSH
5993: LD_STRING 
5995: ST_TO_ADDR
// hc_gallery =  ;
5996: LD_ADDR_OWVAR 33
6000: PUSH
6001: LD_STRING 
6003: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6004: LD_INT 0
6006: PPUSH
6007: LD_INT 4
6009: PPUSH
6010: LD_VAR 0 8
6014: PPUSH
6015: CALL_OW 380
// un = CreateHuman ;
6019: LD_ADDR_VAR 0 16
6023: PUSH
6024: CALL_OW 44
6028: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6029: LD_VAR 0 16
6033: PPUSH
6034: LD_VAR 0 9
6038: PPUSH
6039: LD_INT 0
6041: PPUSH
6042: CALL_OW 49
// end ;
6046: GO 5965
6048: POP
6049: POP
// for i = 1 to soldierCount do
6050: LD_ADDR_VAR 0 14
6054: PUSH
6055: DOUBLE
6056: LD_INT 1
6058: DEC
6059: ST_TO_ADDR
6060: LD_VAR 0 3
6064: PUSH
6065: FOR_TO
6066: IFFALSE 6148
// begin uc_side = side ;
6068: LD_ADDR_OWVAR 20
6072: PUSH
6073: LD_VAR 0 1
6077: ST_TO_ADDR
// uc_nation = nation ;
6078: LD_ADDR_OWVAR 21
6082: PUSH
6083: LD_VAR 0 2
6087: ST_TO_ADDR
// hc_name =  ;
6088: LD_ADDR_OWVAR 26
6092: PUSH
6093: LD_STRING 
6095: ST_TO_ADDR
// hc_gallery =  ;
6096: LD_ADDR_OWVAR 33
6100: PUSH
6101: LD_STRING 
6103: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
6104: LD_INT 0
6106: PPUSH
6107: LD_INT 1
6109: PPUSH
6110: LD_VAR 0 8
6114: PPUSH
6115: CALL_OW 380
// un = CreateHuman ;
6119: LD_ADDR_VAR 0 16
6123: PUSH
6124: CALL_OW 44
6128: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6129: LD_VAR 0 16
6133: PPUSH
6134: LD_VAR 0 9
6138: PPUSH
6139: LD_INT 0
6141: PPUSH
6142: CALL_OW 49
// end ;
6146: GO 6065
6148: POP
6149: POP
// for i = 1 to sniperCount do
6150: LD_ADDR_VAR 0 14
6154: PUSH
6155: DOUBLE
6156: LD_INT 1
6158: DEC
6159: ST_TO_ADDR
6160: LD_VAR 0 4
6164: PUSH
6165: FOR_TO
6166: IFFALSE 6248
// begin uc_side = side ;
6168: LD_ADDR_OWVAR 20
6172: PUSH
6173: LD_VAR 0 1
6177: ST_TO_ADDR
// uc_nation = nation ;
6178: LD_ADDR_OWVAR 21
6182: PUSH
6183: LD_VAR 0 2
6187: ST_TO_ADDR
// hc_name =  ;
6188: LD_ADDR_OWVAR 26
6192: PUSH
6193: LD_STRING 
6195: ST_TO_ADDR
// hc_gallery =  ;
6196: LD_ADDR_OWVAR 33
6200: PUSH
6201: LD_STRING 
6203: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
6204: LD_INT 0
6206: PPUSH
6207: LD_INT 5
6209: PPUSH
6210: LD_VAR 0 8
6214: PPUSH
6215: CALL_OW 380
// un = CreateHuman ;
6219: LD_ADDR_VAR 0 16
6223: PUSH
6224: CALL_OW 44
6228: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6229: LD_VAR 0 16
6233: PPUSH
6234: LD_VAR 0 9
6238: PPUSH
6239: LD_INT 0
6241: PPUSH
6242: CALL_OW 49
// end ;
6246: GO 6165
6248: POP
6249: POP
// for i = 1 to bazookCount do
6250: LD_ADDR_VAR 0 14
6254: PUSH
6255: DOUBLE
6256: LD_INT 1
6258: DEC
6259: ST_TO_ADDR
6260: LD_VAR 0 5
6264: PUSH
6265: FOR_TO
6266: IFFALSE 6348
// begin uc_side = side ;
6268: LD_ADDR_OWVAR 20
6272: PUSH
6273: LD_VAR 0 1
6277: ST_TO_ADDR
// uc_nation = nation ;
6278: LD_ADDR_OWVAR 21
6282: PUSH
6283: LD_VAR 0 2
6287: ST_TO_ADDR
// hc_name =  ;
6288: LD_ADDR_OWVAR 26
6292: PUSH
6293: LD_STRING 
6295: ST_TO_ADDR
// hc_gallery =  ;
6296: LD_ADDR_OWVAR 33
6300: PUSH
6301: LD_STRING 
6303: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
6304: LD_INT 0
6306: PPUSH
6307: LD_INT 9
6309: PPUSH
6310: LD_VAR 0 8
6314: PPUSH
6315: CALL_OW 380
// un = CreateHuman ;
6319: LD_ADDR_VAR 0 16
6323: PUSH
6324: CALL_OW 44
6328: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6329: LD_VAR 0 16
6333: PPUSH
6334: LD_VAR 0 9
6338: PPUSH
6339: LD_INT 0
6341: PPUSH
6342: CALL_OW 49
// end ;
6346: GO 6265
6348: POP
6349: POP
// for i = 1 to mortalCount do
6350: LD_ADDR_VAR 0 14
6354: PUSH
6355: DOUBLE
6356: LD_INT 1
6358: DEC
6359: ST_TO_ADDR
6360: LD_VAR 0 6
6364: PUSH
6365: FOR_TO
6366: IFFALSE 6448
// begin uc_side = side ;
6368: LD_ADDR_OWVAR 20
6372: PUSH
6373: LD_VAR 0 1
6377: ST_TO_ADDR
// uc_nation = nation ;
6378: LD_ADDR_OWVAR 21
6382: PUSH
6383: LD_VAR 0 2
6387: ST_TO_ADDR
// hc_name =  ;
6388: LD_ADDR_OWVAR 26
6392: PUSH
6393: LD_STRING 
6395: ST_TO_ADDR
// hc_gallery =  ;
6396: LD_ADDR_OWVAR 33
6400: PUSH
6401: LD_STRING 
6403: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
6404: LD_INT 0
6406: PPUSH
6407: LD_INT 8
6409: PPUSH
6410: LD_VAR 0 8
6414: PPUSH
6415: CALL_OW 380
// un = CreateHuman ;
6419: LD_ADDR_VAR 0 16
6423: PUSH
6424: CALL_OW 44
6428: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6429: LD_VAR 0 16
6433: PPUSH
6434: LD_VAR 0 9
6438: PPUSH
6439: LD_INT 0
6441: PPUSH
6442: CALL_OW 49
// end ;
6446: GO 6365
6448: POP
6449: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
6450: LD_ADDR_VAR 0 19
6454: PUSH
6455: LD_INT 22
6457: PUSH
6458: LD_VAR 0 1
6462: PUSH
6463: EMPTY
6464: LIST
6465: LIST
6466: PUSH
6467: LD_INT 2
6469: PUSH
6470: LD_INT 25
6472: PUSH
6473: LD_INT 1
6475: PUSH
6476: EMPTY
6477: LIST
6478: LIST
6479: PUSH
6480: LD_INT 25
6482: PUSH
6483: LD_INT 5
6485: PUSH
6486: EMPTY
6487: LIST
6488: LIST
6489: PUSH
6490: LD_INT 25
6492: PUSH
6493: LD_INT 8
6495: PUSH
6496: EMPTY
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 25
6502: PUSH
6503: LD_INT 9
6505: PUSH
6506: EMPTY
6507: LIST
6508: LIST
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: LIST
6514: LIST
6515: LIST
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PPUSH
6521: CALL_OW 69
6525: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
6526: LD_ADDR_VAR 0 18
6530: PUSH
6531: LD_INT 22
6533: PUSH
6534: LD_VAR 0 1
6538: PUSH
6539: EMPTY
6540: LIST
6541: LIST
6542: PUSH
6543: LD_INT 25
6545: PUSH
6546: LD_INT 4
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PPUSH
6557: CALL_OW 69
6561: ST_TO_ADDR
// for i in medic_list do
6562: LD_ADDR_VAR 0 14
6566: PUSH
6567: LD_VAR 0 18
6571: PUSH
6572: FOR_IN
6573: IFFALSE 6591
// ComMoveToArea ( i , healArea ) ;
6575: LD_VAR 0 14
6579: PPUSH
6580: LD_VAR 0 10
6584: PPUSH
6585: CALL_OW 113
6589: GO 6572
6591: POP
6592: POP
// if strategy = 1 then
6593: LD_VAR 0 12
6597: PUSH
6598: LD_INT 1
6600: EQUAL
6601: IFFALSE 7336
// begin repeat wait ( 0 0$3 ) ;
6603: LD_INT 105
6605: PPUSH
6606: CALL_OW 67
// for i in soldiersOK_list do
6610: LD_ADDR_VAR 0 14
6614: PUSH
6615: LD_VAR 0 19
6619: PUSH
6620: FOR_IN
6621: IFFALSE 6685
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
6623: LD_VAR 0 14
6627: PPUSH
6628: LD_INT 91
6630: PPUSH
6631: LD_INT 63
6633: PPUSH
6634: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
6638: LD_VAR 0 14
6642: PPUSH
6643: LD_INT 101
6645: PPUSH
6646: LD_INT 53
6648: PPUSH
6649: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
6653: LD_VAR 0 14
6657: PPUSH
6658: LD_INT 75
6660: PPUSH
6661: LD_INT 23
6663: PPUSH
6664: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
6668: LD_VAR 0 14
6672: PPUSH
6673: LD_INT 78
6675: PPUSH
6676: LD_INT 8
6678: PPUSH
6679: CALL_OW 174
// end ;
6683: GO 6620
6685: POP
6686: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
6687: LD_INT 15
6689: PPUSH
6690: LD_INT 22
6692: PUSH
6693: LD_VAR 0 1
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PPUSH
6702: CALL_OW 70
6706: PUSH
6707: LD_INT 2
6709: GREATER
6710: IFFALSE 6603
// repeat wait ( 0 0$1 ) ;
6712: LD_INT 35
6714: PPUSH
6715: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
6719: LD_ADDR_VAR 0 17
6723: PUSH
6724: LD_INT 22
6726: PUSH
6727: LD_VAR 0 1
6731: PUSH
6732: EMPTY
6733: LIST
6734: LIST
6735: PUSH
6736: LD_INT 1
6738: PUSH
6739: LD_INT 3
6741: PUSH
6742: LD_INT 24
6744: PUSH
6745: LD_INT 550
6747: PUSH
6748: EMPTY
6749: LIST
6750: LIST
6751: PUSH
6752: EMPTY
6753: LIST
6754: LIST
6755: PUSH
6756: LD_INT 24
6758: PUSH
6759: LD_INT 250
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PUSH
6766: EMPTY
6767: LIST
6768: LIST
6769: LIST
6770: PUSH
6771: EMPTY
6772: LIST
6773: LIST
6774: PPUSH
6775: CALL_OW 69
6779: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
6780: LD_ADDR_VAR 0 19
6784: PUSH
6785: LD_INT 22
6787: PUSH
6788: LD_VAR 0 1
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 2
6799: PUSH
6800: LD_INT 25
6802: PUSH
6803: LD_INT 1
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: PUSH
6810: LD_INT 25
6812: PUSH
6813: LD_INT 5
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 25
6822: PUSH
6823: LD_INT 8
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PUSH
6830: LD_INT 25
6832: PUSH
6833: LD_INT 9
6835: PUSH
6836: EMPTY
6837: LIST
6838: LIST
6839: PUSH
6840: EMPTY
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 24
6849: PUSH
6850: LD_INT 1000
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: LIST
6861: PPUSH
6862: CALL_OW 69
6866: ST_TO_ADDR
// if medicCount > 0 then
6867: LD_VAR 0 7
6871: PUSH
6872: LD_INT 0
6874: GREATER
6875: IFFALSE 6949
// begin if damageUnit_list > 0 then
6877: LD_VAR 0 17
6881: PUSH
6882: LD_INT 0
6884: GREATER
6885: IFFALSE 6949
// begin for i in damageUnit_list do
6887: LD_ADDR_VAR 0 14
6891: PUSH
6892: LD_VAR 0 17
6896: PUSH
6897: FOR_IN
6898: IFFALSE 6947
// begin ComMoveToArea ( i , healArea ) ;
6900: LD_VAR 0 14
6904: PPUSH
6905: LD_VAR 0 10
6909: PPUSH
6910: CALL_OW 113
// for j in medic_list do
6914: LD_ADDR_VAR 0 15
6918: PUSH
6919: LD_VAR 0 18
6923: PUSH
6924: FOR_IN
6925: IFFALSE 6943
// AddComHeal ( j , i ) ;
6927: LD_VAR 0 15
6931: PPUSH
6932: LD_VAR 0 14
6936: PPUSH
6937: CALL_OW 188
6941: GO 6924
6943: POP
6944: POP
// end ;
6945: GO 6897
6947: POP
6948: POP
// end ; end ; for i in soldiersOK_list do
6949: LD_ADDR_VAR 0 14
6953: PUSH
6954: LD_VAR 0 19
6958: PUSH
6959: FOR_IN
6960: IFFALSE 7136
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6962: LD_ADDR_VAR 0 22
6966: PUSH
6967: LD_INT 22
6969: PUSH
6970: LD_VAR 0 11
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: PPUSH
6979: CALL_OW 69
6983: PPUSH
6984: LD_VAR 0 14
6988: PPUSH
6989: CALL_OW 74
6993: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6994: LD_ADDR_VAR 0 23
6998: PUSH
6999: LD_INT 22
7001: PUSH
7002: LD_VAR 0 11
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 2
7013: PUSH
7014: LD_INT 59
7016: PUSH
7017: EMPTY
7018: LIST
7019: PUSH
7020: LD_INT 21
7022: PUSH
7023: LD_INT 1
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: PUSH
7030: LD_INT 21
7032: PUSH
7033: LD_INT 2
7035: PUSH
7036: EMPTY
7037: LIST
7038: LIST
7039: PUSH
7040: EMPTY
7041: LIST
7042: LIST
7043: LIST
7044: LIST
7045: PUSH
7046: EMPTY
7047: LIST
7048: LIST
7049: PUSH
7050: EMPTY
7051: LIST
7052: PPUSH
7053: CALL_OW 69
7057: PPUSH
7058: LD_VAR 0 14
7062: PPUSH
7063: CALL_OW 74
7067: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7068: LD_VAR 0 14
7072: PPUSH
7073: LD_VAR 0 22
7077: PPUSH
7078: CALL_OW 296
7082: PUSH
7083: LD_INT 8
7085: PLUS
7086: PUSH
7087: LD_VAR 0 14
7091: PPUSH
7092: LD_VAR 0 23
7096: PPUSH
7097: CALL_OW 296
7101: LESS
7102: IFFALSE 7120
// begin ComAttackUnit ( i , target1 ) ;
7104: LD_VAR 0 14
7108: PPUSH
7109: LD_VAR 0 22
7113: PPUSH
7114: CALL_OW 115
// end else
7118: GO 7134
// begin ComAttackUnit ( i , target2 ) ;
7120: LD_VAR 0 14
7124: PPUSH
7125: LD_VAR 0 23
7129: PPUSH
7130: CALL_OW 115
// end ; end ;
7134: GO 6959
7136: POP
7137: POP
// for i in soldiersOK_list do
7138: LD_ADDR_VAR 0 14
7142: PUSH
7143: LD_VAR 0 19
7147: PUSH
7148: FOR_IN
7149: IFFALSE 7325
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7151: LD_ADDR_VAR 0 22
7155: PUSH
7156: LD_INT 22
7158: PUSH
7159: LD_VAR 0 11
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PPUSH
7168: CALL_OW 69
7172: PPUSH
7173: LD_VAR 0 14
7177: PPUSH
7178: CALL_OW 74
7182: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7183: LD_ADDR_VAR 0 23
7187: PUSH
7188: LD_INT 22
7190: PUSH
7191: LD_VAR 0 11
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 2
7202: PUSH
7203: LD_INT 59
7205: PUSH
7206: EMPTY
7207: LIST
7208: PUSH
7209: LD_INT 21
7211: PUSH
7212: LD_INT 1
7214: PUSH
7215: EMPTY
7216: LIST
7217: LIST
7218: PUSH
7219: LD_INT 21
7221: PUSH
7222: LD_INT 2
7224: PUSH
7225: EMPTY
7226: LIST
7227: LIST
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: EMPTY
7240: LIST
7241: PPUSH
7242: CALL_OW 69
7246: PPUSH
7247: LD_VAR 0 14
7251: PPUSH
7252: CALL_OW 74
7256: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7257: LD_VAR 0 14
7261: PPUSH
7262: LD_VAR 0 22
7266: PPUSH
7267: CALL_OW 296
7271: PUSH
7272: LD_INT 8
7274: PLUS
7275: PUSH
7276: LD_VAR 0 14
7280: PPUSH
7281: LD_VAR 0 23
7285: PPUSH
7286: CALL_OW 296
7290: LESS
7291: IFFALSE 7309
// begin ComAttackUnit ( i , target1 ) ;
7293: LD_VAR 0 14
7297: PPUSH
7298: LD_VAR 0 22
7302: PPUSH
7303: CALL_OW 115
// end else
7307: GO 7323
// begin ComAttackUnit ( i , target2 ) ;
7309: LD_VAR 0 14
7313: PPUSH
7314: LD_VAR 0 23
7318: PPUSH
7319: CALL_OW 115
// end ; end ;
7323: GO 7148
7325: POP
7326: POP
// until soldiersOK_list = [ ] ;
7327: LD_VAR 0 19
7331: PUSH
7332: EMPTY
7333: EQUAL
7334: IFFALSE 6712
// end ; if strategy = 2 then
7336: LD_VAR 0 12
7340: PUSH
7341: LD_INT 2
7343: EQUAL
7344: IFFALSE 8049
// begin repeat wait ( 0 0$1 ) ;
7346: LD_INT 35
7348: PPUSH
7349: CALL_OW 67
// for i in soldiersOK_list do
7353: LD_ADDR_VAR 0 14
7357: PUSH
7358: LD_VAR 0 19
7362: PUSH
7363: FOR_IN
7364: IFFALSE 7398
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7366: LD_VAR 0 14
7370: PPUSH
7371: LD_INT 91
7373: PPUSH
7374: LD_INT 63
7376: PPUSH
7377: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
7381: LD_VAR 0 14
7385: PPUSH
7386: LD_INT 75
7388: PPUSH
7389: LD_INT 33
7391: PPUSH
7392: CALL_OW 174
// end ;
7396: GO 7363
7398: POP
7399: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
7400: LD_INT 16
7402: PPUSH
7403: LD_INT 22
7405: PUSH
7406: LD_VAR 0 1
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PPUSH
7415: CALL_OW 70
7419: PUSH
7420: LD_INT 2
7422: GREATER
7423: IFFALSE 7346
// repeat wait ( 0 0$3 ) ;
7425: LD_INT 105
7427: PPUSH
7428: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7432: LD_ADDR_VAR 0 17
7436: PUSH
7437: LD_INT 22
7439: PUSH
7440: LD_VAR 0 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: LD_INT 3
7454: PUSH
7455: LD_INT 24
7457: PUSH
7458: LD_INT 550
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_INT 24
7471: PUSH
7472: LD_INT 250
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: PUSH
7484: EMPTY
7485: LIST
7486: LIST
7487: PPUSH
7488: CALL_OW 69
7492: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7493: LD_ADDR_VAR 0 19
7497: PUSH
7498: LD_INT 22
7500: PUSH
7501: LD_VAR 0 1
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 25
7515: PUSH
7516: LD_INT 1
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: PUSH
7523: LD_INT 25
7525: PUSH
7526: LD_INT 5
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: LD_INT 25
7535: PUSH
7536: LD_INT 8
7538: PUSH
7539: EMPTY
7540: LIST
7541: LIST
7542: PUSH
7543: LD_INT 25
7545: PUSH
7546: LD_INT 9
7548: PUSH
7549: EMPTY
7550: LIST
7551: LIST
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: LIST
7559: PUSH
7560: LD_INT 24
7562: PUSH
7563: LD_INT 1000
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: EMPTY
7571: LIST
7572: LIST
7573: LIST
7574: PPUSH
7575: CALL_OW 69
7579: ST_TO_ADDR
// if medicCount > 0 then
7580: LD_VAR 0 7
7584: PUSH
7585: LD_INT 0
7587: GREATER
7588: IFFALSE 7662
// begin if damageUnit_list > 0 then
7590: LD_VAR 0 17
7594: PUSH
7595: LD_INT 0
7597: GREATER
7598: IFFALSE 7662
// begin for i in damageUnit_list do
7600: LD_ADDR_VAR 0 14
7604: PUSH
7605: LD_VAR 0 17
7609: PUSH
7610: FOR_IN
7611: IFFALSE 7660
// begin ComMoveToArea ( i , healArea ) ;
7613: LD_VAR 0 14
7617: PPUSH
7618: LD_VAR 0 10
7622: PPUSH
7623: CALL_OW 113
// for j in medic_list do
7627: LD_ADDR_VAR 0 15
7631: PUSH
7632: LD_VAR 0 18
7636: PUSH
7637: FOR_IN
7638: IFFALSE 7656
// AddComHeal ( j , i ) ;
7640: LD_VAR 0 15
7644: PPUSH
7645: LD_VAR 0 14
7649: PPUSH
7650: CALL_OW 188
7654: GO 7637
7656: POP
7657: POP
// end ;
7658: GO 7610
7660: POP
7661: POP
// end ; end ; for i in soldiersOK_list do
7662: LD_ADDR_VAR 0 14
7666: PUSH
7667: LD_VAR 0 19
7671: PUSH
7672: FOR_IN
7673: IFFALSE 7849
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7675: LD_ADDR_VAR 0 22
7679: PUSH
7680: LD_INT 22
7682: PUSH
7683: LD_VAR 0 11
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PPUSH
7692: CALL_OW 69
7696: PPUSH
7697: LD_VAR 0 14
7701: PPUSH
7702: CALL_OW 74
7706: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7707: LD_ADDR_VAR 0 23
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_VAR 0 11
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 59
7729: PUSH
7730: EMPTY
7731: LIST
7732: PUSH
7733: LD_INT 21
7735: PUSH
7736: LD_INT 1
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 21
7745: PUSH
7746: LD_INT 2
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: PPUSH
7766: CALL_OW 69
7770: PPUSH
7771: LD_VAR 0 14
7775: PPUSH
7776: CALL_OW 74
7780: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7781: LD_VAR 0 14
7785: PPUSH
7786: LD_VAR 0 22
7790: PPUSH
7791: CALL_OW 296
7795: PUSH
7796: LD_INT 8
7798: PLUS
7799: PUSH
7800: LD_VAR 0 14
7804: PPUSH
7805: LD_VAR 0 23
7809: PPUSH
7810: CALL_OW 296
7814: LESS
7815: IFFALSE 7833
// begin ComAttackUnit ( i , target1 ) ;
7817: LD_VAR 0 14
7821: PPUSH
7822: LD_VAR 0 22
7826: PPUSH
7827: CALL_OW 115
// end else
7831: GO 7847
// begin ComAttackUnit ( i , target2 ) ;
7833: LD_VAR 0 14
7837: PPUSH
7838: LD_VAR 0 23
7842: PPUSH
7843: CALL_OW 115
// end ; end ;
7847: GO 7672
7849: POP
7850: POP
// for i in soldiersOK_list do
7851: LD_ADDR_VAR 0 14
7855: PUSH
7856: LD_VAR 0 19
7860: PUSH
7861: FOR_IN
7862: IFFALSE 8038
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7864: LD_ADDR_VAR 0 22
7868: PUSH
7869: LD_INT 22
7871: PUSH
7872: LD_VAR 0 11
7876: PUSH
7877: EMPTY
7878: LIST
7879: LIST
7880: PPUSH
7881: CALL_OW 69
7885: PPUSH
7886: LD_VAR 0 14
7890: PPUSH
7891: CALL_OW 74
7895: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7896: LD_ADDR_VAR 0 23
7900: PUSH
7901: LD_INT 22
7903: PUSH
7904: LD_VAR 0 11
7908: PUSH
7909: EMPTY
7910: LIST
7911: LIST
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 59
7918: PUSH
7919: EMPTY
7920: LIST
7921: PUSH
7922: LD_INT 21
7924: PUSH
7925: LD_INT 1
7927: PUSH
7928: EMPTY
7929: LIST
7930: LIST
7931: PUSH
7932: LD_INT 21
7934: PUSH
7935: LD_INT 2
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: PUSH
7948: EMPTY
7949: LIST
7950: LIST
7951: PUSH
7952: EMPTY
7953: LIST
7954: PPUSH
7955: CALL_OW 69
7959: PPUSH
7960: LD_VAR 0 14
7964: PPUSH
7965: CALL_OW 74
7969: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7970: LD_VAR 0 14
7974: PPUSH
7975: LD_VAR 0 22
7979: PPUSH
7980: CALL_OW 296
7984: PUSH
7985: LD_INT 8
7987: PLUS
7988: PUSH
7989: LD_VAR 0 14
7993: PPUSH
7994: LD_VAR 0 23
7998: PPUSH
7999: CALL_OW 296
8003: LESS
8004: IFFALSE 8022
// begin ComAttackUnit ( i , target1 ) ;
8006: LD_VAR 0 14
8010: PPUSH
8011: LD_VAR 0 22
8015: PPUSH
8016: CALL_OW 115
// end else
8020: GO 8036
// begin ComAttackUnit ( i , target2 ) ;
8022: LD_VAR 0 14
8026: PPUSH
8027: LD_VAR 0 23
8031: PPUSH
8032: CALL_OW 115
// end ; end ;
8036: GO 7861
8038: POP
8039: POP
// until soldiersOK_list = [ ] ;
8040: LD_VAR 0 19
8044: PUSH
8045: EMPTY
8046: EQUAL
8047: IFFALSE 7425
// end ; end ;
8049: LD_VAR 0 13
8053: RET
// export function RepairVehicle ( side , repairArea , repX , repY , targetSide ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list , target1 , target2 ; begin
8054: LD_INT 0
8056: PPUSH
8057: PPUSH
8058: PPUSH
8059: PPUSH
8060: PPUSH
8061: PPUSH
8062: PPUSH
8063: PPUSH
8064: PPUSH
8065: PPUSH
8066: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8067: LD_ADDR_VAR 0 9
8071: PUSH
8072: LD_INT 22
8074: PUSH
8075: LD_VAR 0 1
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 21
8086: PUSH
8087: LD_INT 2
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 24
8096: PUSH
8097: LD_INT 660
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 58
8109: PUSH
8110: EMPTY
8111: LIST
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 34
8122: PUSH
8123: LD_INT 53
8125: PUSH
8126: EMPTY
8127: LIST
8128: LIST
8129: PUSH
8130: EMPTY
8131: LIST
8132: LIST
8133: PUSH
8134: EMPTY
8135: LIST
8136: LIST
8137: LIST
8138: LIST
8139: LIST
8140: PPUSH
8141: CALL_OW 69
8145: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
8146: LD_ADDR_VAR 0 10
8150: PUSH
8151: LD_INT 22
8153: PUSH
8154: LD_VAR 0 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PUSH
8163: LD_INT 21
8165: PUSH
8166: LD_INT 2
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PUSH
8173: LD_INT 3
8175: PUSH
8176: LD_INT 24
8178: PUSH
8179: LD_INT 660
8181: PUSH
8182: EMPTY
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: EMPTY
8191: LIST
8192: LIST
8193: LIST
8194: PPUSH
8195: CALL_OW 69
8199: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
8200: LD_ADDR_VAR 0 11
8204: PUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: LD_INT 22
8212: PUSH
8213: LD_VAR 0 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 21
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 3
8234: PUSH
8235: LD_INT 24
8237: PUSH
8238: LD_INT 1000
8240: PUSH
8241: EMPTY
8242: LIST
8243: LIST
8244: PUSH
8245: EMPTY
8246: LIST
8247: LIST
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: LIST
8253: PPUSH
8254: CALL_OW 70
8258: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] , [ f_not , [ f_weapon , 53 ] ] ] ) ;
8259: LD_ADDR_VAR 0 12
8263: PUSH
8264: LD_VAR 0 2
8268: PPUSH
8269: LD_INT 22
8271: PUSH
8272: LD_VAR 0 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 21
8283: PUSH
8284: LD_INT 2
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 24
8293: PUSH
8294: LD_INT 1000
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 58
8303: PUSH
8304: EMPTY
8305: LIST
8306: PUSH
8307: LD_INT 3
8309: PUSH
8310: LD_INT 34
8312: PUSH
8313: LD_INT 53
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: EMPTY
8321: LIST
8322: LIST
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: PPUSH
8331: CALL_OW 70
8335: ST_TO_ADDR
// mechanicInside_list = [ ] ;
8336: LD_ADDR_VAR 0 13
8340: PUSH
8341: EMPTY
8342: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
8343: LD_ADDR_VAR 0 14
8347: PUSH
8348: LD_VAR 0 2
8352: PPUSH
8353: LD_INT 22
8355: PUSH
8356: LD_VAR 0 1
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 25
8367: PUSH
8368: LD_INT 3
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: PUSH
8375: EMPTY
8376: LIST
8377: LIST
8378: PPUSH
8379: CALL_OW 70
8383: ST_TO_ADDR
// if damageVehicle_list > 0 then
8384: LD_VAR 0 10
8388: PUSH
8389: LD_INT 0
8391: GREATER
8392: IFFALSE 8430
// begin for i in damageVehicle_list do
8394: LD_ADDR_VAR 0 7
8398: PUSH
8399: LD_VAR 0 10
8403: PUSH
8404: FOR_IN
8405: IFFALSE 8428
// begin ComMoveXY ( i , repX , repY ) ;
8407: LD_VAR 0 7
8411: PPUSH
8412: LD_VAR 0 3
8416: PPUSH
8417: LD_VAR 0 4
8421: PPUSH
8422: CALL_OW 111
// end ;
8426: GO 8404
8428: POP
8429: POP
// end ; if vehicleNeedRepair_list > 0 then
8430: LD_VAR 0 11
8434: PUSH
8435: LD_INT 0
8437: GREATER
8438: IFFALSE 8525
// begin for i in vehicleNeedRepair_list do
8440: LD_ADDR_VAR 0 7
8444: PUSH
8445: LD_VAR 0 11
8449: PUSH
8450: FOR_IN
8451: IFFALSE 8523
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
8453: LD_ADDR_VAR 0 13
8457: PUSH
8458: LD_VAR 0 13
8462: PUSH
8463: LD_VAR 0 7
8467: PPUSH
8468: CALL_OW 313
8472: ADD
8473: ST_TO_ADDR
// for j in mechanicInside_list do
8474: LD_ADDR_VAR 0 8
8478: PUSH
8479: LD_VAR 0 13
8483: PUSH
8484: FOR_IN
8485: IFFALSE 8519
// begin ComExitVehicle ( i ) ;
8487: LD_VAR 0 7
8491: PPUSH
8492: CALL_OW 121
// wait ( 0 0$1 ) ;
8496: LD_INT 35
8498: PPUSH
8499: CALL_OW 67
// ComRepairVehicle ( i , j ) ;
8503: LD_VAR 0 7
8507: PPUSH
8508: LD_VAR 0 8
8512: PPUSH
8513: CALL_OW 129
// end ;
8517: GO 8484
8519: POP
8520: POP
// end ;
8521: GO 8450
8523: POP
8524: POP
// end ; if vehicleDontNeedRepair_list > 0 then
8525: LD_VAR 0 12
8529: PUSH
8530: LD_INT 0
8532: GREATER
8533: IFFALSE 8573
// begin ComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
8535: LD_VAR 0 14
8539: PUSH
8540: LD_INT 1
8542: ARRAY
8543: PPUSH
8544: LD_VAR 0 12
8548: PUSH
8549: LD_INT 1
8551: ARRAY
8552: PPUSH
8553: CALL_OW 120
// SetFuel ( vehicleDontNeedRepair_list [ 1 ] , 100 ) ;
8557: LD_VAR 0 12
8561: PUSH
8562: LD_INT 1
8564: ARRAY
8565: PPUSH
8566: LD_INT 100
8568: PPUSH
8569: CALL_OW 240
// end ; if vehicleOK_list > 0 then
8573: LD_VAR 0 9
8577: PUSH
8578: LD_INT 0
8580: GREATER
8581: IFFALSE 8772
// begin for i in vehicleOK_list do
8583: LD_ADDR_VAR 0 7
8587: PUSH
8588: LD_VAR 0 9
8592: PUSH
8593: FOR_IN
8594: IFFALSE 8770
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8596: LD_ADDR_VAR 0 15
8600: PUSH
8601: LD_INT 22
8603: PUSH
8604: LD_VAR 0 5
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: PPUSH
8613: CALL_OW 69
8617: PPUSH
8618: LD_VAR 0 7
8622: PPUSH
8623: CALL_OW 74
8627: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8628: LD_ADDR_VAR 0 16
8632: PUSH
8633: LD_INT 22
8635: PUSH
8636: LD_VAR 0 5
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: LD_INT 59
8650: PUSH
8651: EMPTY
8652: LIST
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 21
8666: PUSH
8667: LD_INT 2
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: EMPTY
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: PUSH
8684: EMPTY
8685: LIST
8686: PPUSH
8687: CALL_OW 69
8691: PPUSH
8692: LD_VAR 0 7
8696: PPUSH
8697: CALL_OW 74
8701: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8702: LD_VAR 0 7
8706: PPUSH
8707: LD_VAR 0 15
8711: PPUSH
8712: CALL_OW 296
8716: PUSH
8717: LD_INT 8
8719: PLUS
8720: PUSH
8721: LD_VAR 0 7
8725: PPUSH
8726: LD_VAR 0 16
8730: PPUSH
8731: CALL_OW 296
8735: LESS
8736: IFFALSE 8754
// begin ComAttackUnit ( i , target1 ) ;
8738: LD_VAR 0 7
8742: PPUSH
8743: LD_VAR 0 15
8747: PPUSH
8748: CALL_OW 115
// end else
8752: GO 8768
// begin ComAttackUnit ( i , target2 ) ;
8754: LD_VAR 0 7
8758: PPUSH
8759: LD_VAR 0 16
8763: PPUSH
8764: CALL_OW 115
// end ; end ;
8768: GO 8593
8770: POP
8771: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
8772: LD_ADDR_VAR 0 7
8776: PUSH
8777: LD_VAR 0 2
8781: PPUSH
8782: LD_INT 22
8784: PUSH
8785: LD_VAR 0 1
8789: PUSH
8790: EMPTY
8791: LIST
8792: LIST
8793: PUSH
8794: LD_INT 25
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: EMPTY
8801: LIST
8802: LIST
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 70
8812: NOT
8813: PUSH
8814: FOR_IN
8815: IFFALSE 8838
// ComMoveXY ( i , repX , repY ) ;
8817: LD_VAR 0 7
8821: PPUSH
8822: LD_VAR 0 3
8826: PPUSH
8827: LD_VAR 0 4
8831: PPUSH
8832: CALL_OW 111
8836: GO 8814
8838: POP
8839: POP
// end ;
8840: LD_VAR 0 6
8844: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
8845: LD_INT 0
8847: PPUSH
8848: PPUSH
8849: PPUSH
8850: PPUSH
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
// amChassisTab = [ ] ;
8858: LD_ADDR_VAR 0 19
8862: PUSH
8863: EMPTY
8864: ST_TO_ADDR
// arChassisTab = [ ] ;
8865: LD_ADDR_VAR 0 18
8869: PUSH
8870: EMPTY
8871: ST_TO_ADDR
// ruChassisTab = [ ] ;
8872: LD_ADDR_VAR 0 17
8876: PUSH
8877: EMPTY
8878: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
8879: LD_INT 35
8881: PPUSH
8882: CALL_OW 67
// if nation = 1 then
8886: LD_VAR 0 5
8890: PUSH
8891: LD_INT 1
8893: EQUAL
8894: IFFALSE 9385
// begin uc_side = side ;
8896: LD_ADDR_OWVAR 20
8900: PUSH
8901: LD_VAR 0 2
8905: ST_TO_ADDR
// uc_nation = nation ;
8906: LD_ADDR_OWVAR 21
8910: PUSH
8911: LD_VAR 0 5
8915: ST_TO_ADDR
// vc_engine = vehengine ;
8916: LD_ADDR_OWVAR 39
8920: PUSH
8921: LD_VAR 0 6
8925: ST_TO_ADDR
// vc_control = vehcontrol ;
8926: LD_ADDR_OWVAR 38
8930: PUSH
8931: LD_VAR 0 7
8935: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
8936: LD_ADDR_OWVAR 40
8940: PUSH
8941: LD_VAR 0 10
8945: PUSH
8946: LD_INT 1
8948: PPUSH
8949: LD_VAR 0 10
8953: PPUSH
8954: CALL_OW 12
8958: ARRAY
8959: ST_TO_ADDR
// for j = 1 to AMWeapon do
8960: LD_ADDR_VAR 0 14
8964: PUSH
8965: DOUBLE
8966: LD_INT 1
8968: DEC
8969: ST_TO_ADDR
8970: LD_VAR 0 10
8974: PUSH
8975: FOR_TO
8976: IFFALSE 9277
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
8978: LD_VAR 0 10
8982: PUSH
8983: LD_VAR 0 14
8987: ARRAY
8988: PUSH
8989: LD_INT 2
8991: EQUAL
8992: PUSH
8993: LD_VAR 0 10
8997: PUSH
8998: LD_VAR 0 14
9002: ARRAY
9003: PUSH
9004: LD_INT 3
9006: EQUAL
9007: OR
9008: IFFALSE 9061
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9010: LD_ADDR_VAR 0 19
9014: PUSH
9015: LD_INT 1
9017: PUSH
9018: LD_INT 2
9020: PUSH
9021: LD_INT 3
9023: PUSH
9024: LD_INT 4
9026: PUSH
9027: LD_INT 5
9029: PUSH
9030: EMPTY
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9037: LD_ADDR_OWVAR 37
9041: PUSH
9042: LD_VAR 0 19
9046: PUSH
9047: LD_INT 1
9049: PPUSH
9050: LD_VAR 0 19
9054: PPUSH
9055: CALL_OW 12
9059: ARRAY
9060: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9061: LD_VAR 0 10
9065: PUSH
9066: LD_VAR 0 14
9070: ARRAY
9071: PUSH
9072: LD_INT 4
9074: EQUAL
9075: PUSH
9076: LD_VAR 0 10
9080: PUSH
9081: LD_VAR 0 14
9085: ARRAY
9086: PUSH
9087: LD_INT 5
9089: EQUAL
9090: OR
9091: PUSH
9092: LD_VAR 0 10
9096: PUSH
9097: LD_VAR 0 14
9101: ARRAY
9102: PUSH
9103: LD_INT 9
9105: EQUAL
9106: OR
9107: PUSH
9108: LD_VAR 0 10
9112: PUSH
9113: LD_VAR 0 14
9117: ARRAY
9118: PUSH
9119: LD_INT 11
9121: EQUAL
9122: OR
9123: PUSH
9124: LD_VAR 0 10
9128: PUSH
9129: LD_VAR 0 14
9133: ARRAY
9134: PUSH
9135: LD_INT 7
9137: EQUAL
9138: OR
9139: IFFALSE 9188
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9141: LD_ADDR_VAR 0 19
9145: PUSH
9146: LD_INT 2
9148: PUSH
9149: LD_INT 3
9151: PUSH
9152: LD_INT 4
9154: PUSH
9155: LD_INT 5
9157: PUSH
9158: EMPTY
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9164: LD_ADDR_OWVAR 37
9168: PUSH
9169: LD_VAR 0 19
9173: PUSH
9174: LD_INT 1
9176: PPUSH
9177: LD_VAR 0 19
9181: PPUSH
9182: CALL_OW 12
9186: ARRAY
9187: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9188: LD_VAR 0 10
9192: PUSH
9193: LD_VAR 0 14
9197: ARRAY
9198: PUSH
9199: LD_INT 8
9201: EQUAL
9202: PUSH
9203: LD_VAR 0 10
9207: PUSH
9208: LD_VAR 0 14
9212: ARRAY
9213: PUSH
9214: LD_INT 6
9216: EQUAL
9217: OR
9218: PUSH
9219: LD_VAR 0 10
9223: PUSH
9224: LD_VAR 0 14
9228: ARRAY
9229: PUSH
9230: LD_INT 10
9232: EQUAL
9233: OR
9234: IFFALSE 9275
// begin amChassisTab = [ 4 , 5 ] ;
9236: LD_ADDR_VAR 0 19
9240: PUSH
9241: LD_INT 4
9243: PUSH
9244: LD_INT 5
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9251: LD_ADDR_OWVAR 37
9255: PUSH
9256: LD_VAR 0 19
9260: PUSH
9261: LD_INT 1
9263: PPUSH
9264: LD_VAR 0 19
9268: PPUSH
9269: CALL_OW 12
9273: ARRAY
9274: ST_TO_ADDR
// end ; end ;
9275: GO 8975
9277: POP
9278: POP
// veh = CreateVehicle ;
9279: LD_ADDR_VAR 0 16
9283: PUSH
9284: CALL_OW 45
9288: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9289: LD_VAR 0 16
9293: PPUSH
9294: LD_VAR 0 1
9298: PPUSH
9299: LD_INT 0
9301: PPUSH
9302: CALL_OW 49
// if vehControl = 1 then
9306: LD_VAR 0 7
9310: PUSH
9311: LD_INT 1
9313: EQUAL
9314: IFFALSE 9371
// begin hc_gallery =  ;
9316: LD_ADDR_OWVAR 33
9320: PUSH
9321: LD_STRING 
9323: ST_TO_ADDR
// hc_name =  ;
9324: LD_ADDR_OWVAR 26
9328: PUSH
9329: LD_STRING 
9331: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9332: LD_INT 0
9334: PPUSH
9335: LD_INT 3
9337: PPUSH
9338: LD_VAR 0 4
9342: PPUSH
9343: CALL_OW 380
// un = CreateHuman ;
9347: LD_ADDR_VAR 0 15
9351: PUSH
9352: CALL_OW 44
9356: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9357: LD_VAR 0 15
9361: PPUSH
9362: LD_VAR 0 16
9366: PPUSH
9367: CALL_OW 52
// end ; i = i + 1 ;
9371: LD_ADDR_VAR 0 13
9375: PUSH
9376: LD_VAR 0 13
9380: PUSH
9381: LD_INT 1
9383: PLUS
9384: ST_TO_ADDR
// end ; if nation = 2 then
9385: LD_VAR 0 5
9389: PUSH
9390: LD_INT 2
9392: EQUAL
9393: IFFALSE 9817
// begin uc_side = side ;
9395: LD_ADDR_OWVAR 20
9399: PUSH
9400: LD_VAR 0 2
9404: ST_TO_ADDR
// uc_nation = nation ;
9405: LD_ADDR_OWVAR 21
9409: PUSH
9410: LD_VAR 0 5
9414: ST_TO_ADDR
// vc_engine = vehengine ;
9415: LD_ADDR_OWVAR 39
9419: PUSH
9420: LD_VAR 0 6
9424: ST_TO_ADDR
// vc_control = vehcontrol ;
9425: LD_ADDR_OWVAR 38
9429: PUSH
9430: LD_VAR 0 7
9434: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9435: LD_ADDR_OWVAR 40
9439: PUSH
9440: LD_VAR 0 9
9444: PUSH
9445: LD_INT 1
9447: PPUSH
9448: LD_VAR 0 9
9452: PPUSH
9453: CALL_OW 12
9457: ARRAY
9458: ST_TO_ADDR
// for j = 1 to ARWeapons do
9459: LD_ADDR_VAR 0 14
9463: PUSH
9464: DOUBLE
9465: LD_INT 1
9467: DEC
9468: ST_TO_ADDR
9469: LD_VAR 0 9
9473: PUSH
9474: FOR_TO
9475: IFFALSE 9709
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9477: LD_VAR 0 9
9481: PUSH
9482: LD_VAR 0 14
9486: ARRAY
9487: PUSH
9488: LD_INT 24
9490: EQUAL
9491: PUSH
9492: LD_VAR 0 9
9496: PUSH
9497: LD_VAR 0 14
9501: ARRAY
9502: PUSH
9503: LD_INT 22
9505: EQUAL
9506: OR
9507: PUSH
9508: LD_VAR 0 9
9512: PUSH
9513: LD_VAR 0 14
9517: ARRAY
9518: PUSH
9519: LD_INT 23
9521: EQUAL
9522: OR
9523: PUSH
9524: LD_VAR 0 9
9528: PUSH
9529: LD_VAR 0 14
9533: ARRAY
9534: PUSH
9535: LD_INT 30
9537: EQUAL
9538: OR
9539: IFFALSE 9588
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9541: LD_ADDR_VAR 0 18
9545: PUSH
9546: LD_INT 11
9548: PUSH
9549: LD_INT 12
9551: PUSH
9552: LD_INT 13
9554: PUSH
9555: LD_INT 14
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9564: LD_ADDR_OWVAR 37
9568: PUSH
9569: LD_VAR 0 18
9573: PUSH
9574: LD_INT 1
9576: PPUSH
9577: LD_VAR 0 18
9581: PPUSH
9582: CALL_OW 12
9586: ARRAY
9587: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9588: LD_VAR 0 9
9592: PUSH
9593: LD_VAR 0 14
9597: ARRAY
9598: PUSH
9599: LD_INT 29
9601: EQUAL
9602: PUSH
9603: LD_VAR 0 9
9607: PUSH
9608: LD_VAR 0 14
9612: ARRAY
9613: PUSH
9614: LD_INT 28
9616: EQUAL
9617: OR
9618: PUSH
9619: LD_VAR 0 9
9623: PUSH
9624: LD_VAR 0 14
9628: ARRAY
9629: PUSH
9630: LD_INT 27
9632: EQUAL
9633: OR
9634: PUSH
9635: LD_VAR 0 9
9639: PUSH
9640: LD_VAR 0 14
9644: ARRAY
9645: PUSH
9646: LD_INT 26
9648: EQUAL
9649: OR
9650: PUSH
9651: LD_VAR 0 9
9655: PUSH
9656: LD_VAR 0 14
9660: ARRAY
9661: PUSH
9662: LD_INT 25
9664: EQUAL
9665: OR
9666: IFFALSE 9707
// begin arChassisTab = [ 13 , 14 ] ;
9668: LD_ADDR_VAR 0 18
9672: PUSH
9673: LD_INT 13
9675: PUSH
9676: LD_INT 14
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9683: LD_ADDR_OWVAR 37
9687: PUSH
9688: LD_VAR 0 18
9692: PUSH
9693: LD_INT 1
9695: PPUSH
9696: LD_VAR 0 18
9700: PPUSH
9701: CALL_OW 12
9705: ARRAY
9706: ST_TO_ADDR
// end ; end ;
9707: GO 9474
9709: POP
9710: POP
// veh = CreateVehicle ;
9711: LD_ADDR_VAR 0 16
9715: PUSH
9716: CALL_OW 45
9720: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9721: LD_VAR 0 16
9725: PPUSH
9726: LD_VAR 0 1
9730: PPUSH
9731: LD_INT 0
9733: PPUSH
9734: CALL_OW 49
// if vehcontrol = 1 then
9738: LD_VAR 0 7
9742: PUSH
9743: LD_INT 1
9745: EQUAL
9746: IFFALSE 9803
// begin hc_gallery =  ;
9748: LD_ADDR_OWVAR 33
9752: PUSH
9753: LD_STRING 
9755: ST_TO_ADDR
// hc_name =  ;
9756: LD_ADDR_OWVAR 26
9760: PUSH
9761: LD_STRING 
9763: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9764: LD_INT 0
9766: PPUSH
9767: LD_INT 3
9769: PPUSH
9770: LD_VAR 0 4
9774: PPUSH
9775: CALL_OW 380
// un = CreateHuman ;
9779: LD_ADDR_VAR 0 15
9783: PUSH
9784: CALL_OW 44
9788: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9789: LD_VAR 0 15
9793: PPUSH
9794: LD_VAR 0 16
9798: PPUSH
9799: CALL_OW 52
// end ; i = i + 1 ;
9803: LD_ADDR_VAR 0 13
9807: PUSH
9808: LD_VAR 0 13
9812: PUSH
9813: LD_INT 1
9815: PLUS
9816: ST_TO_ADDR
// end ; if nation = 3 then
9817: LD_VAR 0 5
9821: PUSH
9822: LD_INT 3
9824: EQUAL
9825: IFFALSE 10217
// begin uc_side = side ;
9827: LD_ADDR_OWVAR 20
9831: PUSH
9832: LD_VAR 0 2
9836: ST_TO_ADDR
// uc_nation = nation ;
9837: LD_ADDR_OWVAR 21
9841: PUSH
9842: LD_VAR 0 5
9846: ST_TO_ADDR
// vc_engine = vehengine ;
9847: LD_ADDR_OWVAR 39
9851: PUSH
9852: LD_VAR 0 6
9856: ST_TO_ADDR
// vc_control = vehcontrol ;
9857: LD_ADDR_OWVAR 38
9861: PUSH
9862: LD_VAR 0 7
9866: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
9867: LD_ADDR_OWVAR 40
9871: PUSH
9872: LD_VAR 0 8
9876: PUSH
9877: LD_INT 1
9879: PPUSH
9880: LD_VAR 0 8
9884: PPUSH
9885: CALL_OW 12
9889: ARRAY
9890: ST_TO_ADDR
// for j = 1 to RuWeapons do
9891: LD_ADDR_VAR 0 14
9895: PUSH
9896: DOUBLE
9897: LD_INT 1
9899: DEC
9900: ST_TO_ADDR
9901: LD_VAR 0 8
9905: PUSH
9906: FOR_TO
9907: IFFALSE 10109
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
9909: LD_VAR 0 8
9913: PUSH
9914: LD_VAR 0 14
9918: ARRAY
9919: PUSH
9920: LD_INT 42
9922: EQUAL
9923: PUSH
9924: LD_VAR 0 8
9928: PUSH
9929: LD_VAR 0 14
9933: ARRAY
9934: PUSH
9935: LD_INT 43
9937: EQUAL
9938: OR
9939: PUSH
9940: LD_VAR 0 8
9944: PUSH
9945: LD_VAR 0 14
9949: ARRAY
9950: PUSH
9951: LD_INT 44
9953: EQUAL
9954: OR
9955: PUSH
9956: LD_VAR 0 8
9960: PUSH
9961: LD_VAR 0 14
9965: ARRAY
9966: PUSH
9967: LD_INT 45
9969: EQUAL
9970: OR
9971: PUSH
9972: LD_VAR 0 8
9976: PUSH
9977: LD_VAR 0 14
9981: ARRAY
9982: PUSH
9983: LD_INT 49
9985: EQUAL
9986: OR
9987: IFFALSE 10036
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
9989: LD_ADDR_VAR 0 17
9993: PUSH
9994: LD_INT 21
9996: PUSH
9997: LD_INT 22
9999: PUSH
10000: LD_INT 23
10002: PUSH
10003: LD_INT 24
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10012: LD_ADDR_OWVAR 37
10016: PUSH
10017: LD_VAR 0 17
10021: PUSH
10022: LD_INT 1
10024: PPUSH
10025: LD_VAR 0 17
10029: PPUSH
10030: CALL_OW 12
10034: ARRAY
10035: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10036: LD_VAR 0 8
10040: PUSH
10041: LD_VAR 0 14
10045: ARRAY
10046: PUSH
10047: LD_INT 46
10049: EQUAL
10050: PUSH
10051: LD_VAR 0 8
10055: PUSH
10056: LD_VAR 0 14
10060: ARRAY
10061: PUSH
10062: LD_INT 47
10064: EQUAL
10065: OR
10066: IFFALSE 10107
// begin ruChassisTab = [ 23 , 24 ] ;
10068: LD_ADDR_VAR 0 17
10072: PUSH
10073: LD_INT 23
10075: PUSH
10076: LD_INT 24
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10083: LD_ADDR_OWVAR 37
10087: PUSH
10088: LD_VAR 0 17
10092: PUSH
10093: LD_INT 1
10095: PPUSH
10096: LD_VAR 0 17
10100: PPUSH
10101: CALL_OW 12
10105: ARRAY
10106: ST_TO_ADDR
// end ; end ;
10107: GO 9906
10109: POP
10110: POP
// veh = CreateVehicle ;
10111: LD_ADDR_VAR 0 16
10115: PUSH
10116: CALL_OW 45
10120: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10121: LD_VAR 0 16
10125: PPUSH
10126: LD_VAR 0 1
10130: PPUSH
10131: LD_INT 0
10133: PPUSH
10134: CALL_OW 49
// if vehcontrol = 1 then
10138: LD_VAR 0 7
10142: PUSH
10143: LD_INT 1
10145: EQUAL
10146: IFFALSE 10203
// begin hc_gallery =  ;
10148: LD_ADDR_OWVAR 33
10152: PUSH
10153: LD_STRING 
10155: ST_TO_ADDR
// hc_name =  ;
10156: LD_ADDR_OWVAR 26
10160: PUSH
10161: LD_STRING 
10163: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10164: LD_INT 0
10166: PPUSH
10167: LD_INT 3
10169: PPUSH
10170: LD_VAR 0 4
10174: PPUSH
10175: CALL_OW 380
// un = CreateHuman ;
10179: LD_ADDR_VAR 0 15
10183: PUSH
10184: CALL_OW 44
10188: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10189: LD_VAR 0 15
10193: PPUSH
10194: LD_VAR 0 16
10198: PPUSH
10199: CALL_OW 52
// end ; i = i + 1 ;
10203: LD_ADDR_VAR 0 13
10207: PUSH
10208: LD_VAR 0 13
10212: PUSH
10213: LD_INT 1
10215: PLUS
10216: ST_TO_ADDR
// end ; until i = vehCount ;
10217: LD_VAR 0 13
10221: PUSH
10222: LD_VAR 0 3
10226: EQUAL
10227: IFFALSE 8879
// repeat wait ( 0 0$1 ) ;
10229: LD_INT 35
10231: PPUSH
10232: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
10236: LD_ADDR_VAR 0 20
10240: PUSH
10241: LD_INT 22
10243: PUSH
10244: LD_VAR 0 2
10248: PUSH
10249: EMPTY
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 21
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 24
10265: PUSH
10266: LD_INT 661
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: ST_TO_ADDR
// if vehicleOK_list > 0 then
10283: LD_VAR 0 20
10287: PUSH
10288: LD_INT 0
10290: GREATER
10291: IFFALSE 10482
// begin for i in vehicleOK_list do
10293: LD_ADDR_VAR 0 13
10297: PUSH
10298: LD_VAR 0 20
10302: PUSH
10303: FOR_IN
10304: IFFALSE 10480
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10306: LD_ADDR_VAR 0 21
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_VAR 0 11
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PPUSH
10323: CALL_OW 69
10327: PPUSH
10328: LD_VAR 0 13
10332: PPUSH
10333: CALL_OW 74
10337: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10338: LD_ADDR_VAR 0 22
10342: PUSH
10343: LD_INT 22
10345: PUSH
10346: LD_VAR 0 11
10350: PUSH
10351: EMPTY
10352: LIST
10353: LIST
10354: PUSH
10355: LD_INT 2
10357: PUSH
10358: LD_INT 59
10360: PUSH
10361: EMPTY
10362: LIST
10363: PUSH
10364: LD_INT 21
10366: PUSH
10367: LD_INT 1
10369: PUSH
10370: EMPTY
10371: LIST
10372: LIST
10373: PUSH
10374: LD_INT 21
10376: PUSH
10377: LD_INT 2
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: EMPTY
10391: LIST
10392: LIST
10393: PUSH
10394: EMPTY
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: PPUSH
10402: LD_VAR 0 13
10406: PPUSH
10407: CALL_OW 74
10411: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10412: LD_VAR 0 13
10416: PPUSH
10417: LD_VAR 0 21
10421: PPUSH
10422: CALL_OW 296
10426: PUSH
10427: LD_INT 8
10429: PLUS
10430: PUSH
10431: LD_VAR 0 13
10435: PPUSH
10436: LD_VAR 0 22
10440: PPUSH
10441: CALL_OW 296
10445: LESS
10446: IFFALSE 10464
// begin ComAttackUnit ( i , target1 ) ;
10448: LD_VAR 0 13
10452: PPUSH
10453: LD_VAR 0 21
10457: PPUSH
10458: CALL_OW 115
// end else
10462: GO 10478
// begin ComAttackUnit ( i , target2 ) ;
10464: LD_VAR 0 13
10468: PPUSH
10469: LD_VAR 0 22
10473: PPUSH
10474: CALL_OW 115
// end ; end ;
10478: GO 10303
10480: POP
10481: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
10482: LD_INT 22
10484: PUSH
10485: LD_VAR 0 2
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 21
10496: PUSH
10497: LD_INT 2
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: EMPTY
10505: LIST
10506: LIST
10507: PPUSH
10508: CALL_OW 69
10512: PUSH
10513: LD_INT 0
10515: EQUAL
10516: IFFALSE 10229
// end ; end_of_file
10518: LD_VAR 0 12
10522: RET
// every 1 do var i , gammaSquad , startX , startY ;
10523: GO 10525
10525: DISABLE
10526: LD_INT 0
10528: PPUSH
10529: PPUSH
10530: PPUSH
10531: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10532: LD_ADDR_VAR 0 2
10536: PUSH
10537: LD_EXP 8
10541: PUSH
10542: LD_EXP 9
10546: PUSH
10547: LD_EXP 10
10551: PUSH
10552: LD_EXP 11
10556: PUSH
10557: LD_EXP 12
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10569: LD_ADDR_VAR 0 3
10573: PUSH
10574: LD_INT 46
10576: PUSH
10577: LD_INT 45
10579: PUSH
10580: LD_INT 44
10582: PUSH
10583: LD_INT 43
10585: PUSH
10586: LD_INT 42
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10596: LD_ADDR_VAR 0 4
10600: PUSH
10601: LD_INT 14
10603: PUSH
10604: LD_INT 12
10606: PUSH
10607: LD_INT 10
10609: PUSH
10610: LD_INT 8
10612: PUSH
10613: LD_INT 6
10615: PUSH
10616: EMPTY
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10623: LD_INT 32
10625: PPUSH
10626: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10630: LD_INT 32
10632: PPUSH
10633: LD_INT 51
10635: PPUSH
10636: LD_INT 26
10638: PPUSH
10639: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10643: LD_INT 32
10645: PPUSH
10646: LD_INT 53
10648: PPUSH
10649: LD_INT 23
10651: PPUSH
10652: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10656: LD_INT 32
10658: PPUSH
10659: LD_INT 52
10661: PPUSH
10662: LD_INT 19
10664: PPUSH
10665: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10669: LD_INT 35
10671: PPUSH
10672: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10676: LD_INT 32
10678: PPUSH
10679: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10683: LD_INT 32
10685: PPUSH
10686: CALL_OW 250
10690: PUSH
10691: LD_INT 52
10693: EQUAL
10694: PUSH
10695: LD_INT 32
10697: PPUSH
10698: CALL_OW 251
10702: PUSH
10703: LD_INT 19
10705: EQUAL
10706: AND
10707: IFFALSE 10669
// ComExitVehicle ( JMM ) ;
10709: LD_EXP 1
10713: PPUSH
10714: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10718: LD_EXP 7
10722: PPUSH
10723: LD_EXP 1
10727: PPUSH
10728: CALL_OW 119
// wait ( 0 0$01 ) ;
10732: LD_INT 35
10734: PPUSH
10735: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
10739: LD_EXP 1
10743: PPUSH
10744: LD_INT 46
10746: PPUSH
10747: LD_INT 10
10749: PPUSH
10750: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_EXP 7
10763: PPUSH
10764: CALL_OW 179
// wait ( 0 0$4 ) ;
10768: LD_INT 140
10770: PPUSH
10771: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
10775: LD_EXP 1
10779: PPUSH
10780: LD_STRING D1-JMM-1
10782: PPUSH
10783: CALL_OW 88
// if not dialogue_skipped then
10787: LD_OWVAR 59
10791: NOT
10792: IFFALSE 11449
// begin for i := 1 to gammaSquad do
10794: LD_ADDR_VAR 0 1
10798: PUSH
10799: DOUBLE
10800: LD_INT 1
10802: DEC
10803: ST_TO_ADDR
10804: LD_VAR 0 2
10808: PUSH
10809: FOR_TO
10810: IFFALSE 10871
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
10812: LD_VAR 0 2
10816: PUSH
10817: LD_VAR 0 1
10821: ARRAY
10822: PPUSH
10823: LD_VAR 0 3
10827: PUSH
10828: LD_VAR 0 1
10832: ARRAY
10833: PPUSH
10834: LD_VAR 0 4
10838: PUSH
10839: LD_VAR 0 1
10843: ARRAY
10844: PPUSH
10845: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
10849: LD_VAR 0 2
10853: PUSH
10854: LD_VAR 0 1
10858: ARRAY
10859: PPUSH
10860: LD_EXP 1
10864: PPUSH
10865: CALL_OW 179
// end ;
10869: GO 10809
10871: POP
10872: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
10873: LD_EXP 4
10877: PPUSH
10878: LD_INT 41
10880: PPUSH
10881: LD_INT 4
10883: PPUSH
10884: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
10888: LD_EXP 4
10892: PPUSH
10893: LD_EXP 1
10897: PPUSH
10898: CALL_OW 179
// if Lisa = false and Bobby then
10902: LD_EXP 4
10906: PUSH
10907: LD_INT 0
10909: EQUAL
10910: PUSH
10911: LD_EXP 2
10915: AND
10916: IFFALSE 10947
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
10918: LD_EXP 2
10922: PPUSH
10923: LD_INT 41
10925: PPUSH
10926: LD_INT 4
10928: PPUSH
10929: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
10933: LD_EXP 2
10937: PPUSH
10938: LD_EXP 1
10942: PPUSH
10943: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
10947: LD_EXP 4
10951: PUSH
10952: LD_INT 0
10954: EQUAL
10955: PUSH
10956: LD_EXP 2
10960: PUSH
10961: LD_INT 0
10963: EQUAL
10964: AND
10965: PUSH
10966: LD_EXP 3
10970: AND
10971: IFFALSE 11002
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
10973: LD_EXP 3
10977: PPUSH
10978: LD_INT 41
10980: PPUSH
10981: LD_INT 4
10983: PPUSH
10984: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
10988: LD_EXP 3
10992: PPUSH
10993: LD_EXP 1
10997: PPUSH
10998: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11002: LD_EXP 4
11006: PUSH
11007: LD_INT 0
11009: EQUAL
11010: PUSH
11011: LD_EXP 2
11015: PUSH
11016: LD_INT 0
11018: EQUAL
11019: AND
11020: PUSH
11021: LD_EXP 3
11025: PUSH
11026: LD_INT 0
11028: EQUAL
11029: AND
11030: IFFALSE 11061
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11032: LD_EXP 6
11036: PPUSH
11037: LD_INT 41
11039: PPUSH
11040: LD_INT 4
11042: PPUSH
11043: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11047: LD_EXP 6
11051: PPUSH
11052: LD_EXP 1
11056: PPUSH
11057: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11061: LD_EXP 7
11065: PPUSH
11066: LD_STRING D1-Brown-1
11068: PPUSH
11069: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11073: LD_EXP 1
11077: PPUSH
11078: LD_STRING D1-JMM-2
11080: PPUSH
11081: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11085: LD_EXP 7
11089: PPUSH
11090: LD_STRING D1-Brown-2
11092: PPUSH
11093: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11097: LD_EXP 1
11101: PPUSH
11102: LD_EXP 9
11106: PPUSH
11107: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11111: LD_EXP 9
11115: PPUSH
11116: LD_STRING D1-FSol1-2
11118: PPUSH
11119: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11123: LD_EXP 1
11127: PPUSH
11128: LD_EXP 8
11132: PPUSH
11133: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11137: LD_EXP 8
11141: PPUSH
11142: LD_STRING D1-Sol2-2
11144: PPUSH
11145: CALL_OW 88
// if Lisa then
11149: LD_EXP 4
11153: IFFALSE 11193
// begin ComTurnUnit ( JMM , Lisa ) ;
11155: LD_EXP 1
11159: PPUSH
11160: LD_EXP 4
11164: PPUSH
11165: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11169: LD_EXP 4
11173: PPUSH
11174: LD_STRING D1-Lisa-2
11176: PPUSH
11177: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11181: LD_EXP 1
11185: PPUSH
11186: LD_STRING D1-JMM-3
11188: PPUSH
11189: CALL_OW 88
// end ; if Bobby then
11193: LD_EXP 2
11197: IFFALSE 11237
// begin ComTurnUnit ( JMM , Bobby ) ;
11199: LD_EXP 1
11203: PPUSH
11204: LD_EXP 2
11208: PPUSH
11209: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11213: LD_EXP 2
11217: PPUSH
11218: LD_STRING D1-Bobby-2
11220: PPUSH
11221: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11225: LD_EXP 1
11229: PPUSH
11230: LD_STRING D1-JMM-3
11232: PPUSH
11233: CALL_OW 88
// end ; if Cyrus then
11237: LD_EXP 3
11241: IFFALSE 11281
// begin ComTurnUnit ( JMM , Cyrus ) ;
11243: LD_EXP 1
11247: PPUSH
11248: LD_EXP 3
11252: PPUSH
11253: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11257: LD_EXP 3
11261: PPUSH
11262: LD_STRING D1-Cyrus-2
11264: PPUSH
11265: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11269: LD_EXP 1
11273: PPUSH
11274: LD_STRING D1-JMM-3
11276: PPUSH
11277: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11281: LD_EXP 1
11285: PPUSH
11286: LD_EXP 7
11290: PPUSH
11291: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11295: LD_EXP 1
11299: PPUSH
11300: LD_STRING D1-JMM-3a
11302: PPUSH
11303: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11307: LD_EXP 7
11311: PPUSH
11312: LD_INT 38
11314: PPUSH
11315: LD_INT 5
11317: PPUSH
11318: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11322: LD_EXP 7
11326: PPUSH
11327: LD_EXP 1
11331: PPUSH
11332: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11336: LD_EXP 1
11340: PPUSH
11341: LD_INT 40
11343: PPUSH
11344: LD_INT 7
11346: PPUSH
11347: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11351: LD_EXP 1
11355: PPUSH
11356: LD_EXP 7
11360: PPUSH
11361: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11365: LD_EXP 7
11369: PPUSH
11370: LD_STRING D1-Brown-3
11372: PPUSH
11373: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11377: LD_EXP 14
11381: PPUSH
11382: LD_STRING D1-Har-3
11384: PPUSH
11385: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11389: LD_EXP 1
11393: PPUSH
11394: LD_STRING D1-JMM-4
11396: PPUSH
11397: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11401: LD_EXP 14
11405: PPUSH
11406: LD_STRING D1-Har-4
11408: PPUSH
11409: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11413: LD_EXP 1
11417: PPUSH
11418: LD_STRING D1-JMM-5
11420: PPUSH
11421: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11425: LD_EXP 14
11429: PPUSH
11430: LD_STRING D1-Har-5
11432: PPUSH
11433: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11437: LD_EXP 1
11441: PPUSH
11442: LD_STRING D1-JMM-6
11444: PPUSH
11445: CALL_OW 88
// end ; InGameOff ;
11449: CALL_OW 9
// PrepareRussianConvoy ;
11453: CALL 2364 0 0
// ChangeMissionObjectives ( M1 ) ;
11457: LD_STRING M1
11459: PPUSH
11460: CALL_OW 337
// SaveForQuickRestart ;
11464: CALL_OW 22
// timerStatus = 1 ;
11468: LD_ADDR_EXP 27
11472: PUSH
11473: LD_INT 1
11475: ST_TO_ADDR
// startTimer = 1 ;
11476: LD_ADDR_EXP 28
11480: PUSH
11481: LD_INT 1
11483: ST_TO_ADDR
// bonusAvalaible = 1 ;
11484: LD_ADDR_EXP 40
11488: PUSH
11489: LD_INT 1
11491: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11492: LD_INT 105
11494: PPUSH
11495: CALL_OW 67
// DialogueOn ;
11499: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11503: LD_EXP 12
11507: PPUSH
11508: LD_STRING D9-Mech1-1
11510: PPUSH
11511: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11515: LD_EXP 1
11519: PPUSH
11520: LD_STRING D9-JMM-1
11522: PPUSH
11523: CALL_OW 88
// DialogueOff ;
11527: CALL_OW 7
// end ;
11531: PPOPN 4
11533: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11534: LD_INT 47
11536: PPUSH
11537: LD_INT 1
11539: PPUSH
11540: CALL_OW 321
11544: PUSH
11545: LD_INT 2
11547: EQUAL
11548: PUSH
11549: LD_INT 22
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: PUSH
11559: LD_INT 21
11561: PUSH
11562: LD_INT 3
11564: PUSH
11565: EMPTY
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 30
11571: PUSH
11572: LD_INT 3
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: LIST
11583: PPUSH
11584: CALL_OW 69
11588: PUSH
11589: LD_INT 0
11591: GREATER
11592: AND
11593: IFFALSE 11823
11595: GO 11597
11597: DISABLE
// begin if IsOk ( Campell ) then
11598: LD_EXP 12
11602: PPUSH
11603: CALL_OW 302
11607: IFFALSE 11623
// begin Say ( Campell , D10-Mech1-1 ) ;
11609: LD_EXP 12
11613: PPUSH
11614: LD_STRING D10-Mech1-1
11616: PPUSH
11617: CALL_OW 88
// end else
11621: GO 11823
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11623: LD_INT 22
11625: PUSH
11626: LD_INT 1
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 21
11635: PUSH
11636: LD_INT 1
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: LD_INT 25
11645: PUSH
11646: LD_INT 3
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: PUSH
11653: LD_INT 26
11655: PUSH
11656: LD_INT 1
11658: PUSH
11659: EMPTY
11660: LIST
11661: LIST
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PPUSH
11669: CALL_OW 69
11673: PUSH
11674: LD_EXP 1
11678: PUSH
11679: EMPTY
11680: LIST
11681: PUSH
11682: LD_INT 0
11684: GREATER
11685: DIFF
11686: IFFALSE 11760
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11688: LD_INT 22
11690: PUSH
11691: LD_INT 1
11693: PUSH
11694: EMPTY
11695: LIST
11696: LIST
11697: PUSH
11698: LD_INT 21
11700: PUSH
11701: LD_INT 1
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: PUSH
11708: LD_INT 25
11710: PUSH
11711: LD_INT 3
11713: PUSH
11714: EMPTY
11715: LIST
11716: LIST
11717: PUSH
11718: LD_INT 26
11720: PUSH
11721: LD_INT 1
11723: PUSH
11724: EMPTY
11725: LIST
11726: LIST
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: PPUSH
11734: CALL_OW 69
11738: PUSH
11739: LD_EXP 1
11743: PUSH
11744: EMPTY
11745: LIST
11746: DIFF
11747: PPUSH
11748: LD_STRING D10-Mech1-1
11750: PPUSH
11751: LD_STRING D10-Mech1-1
11753: PPUSH
11754: CALL 3600 0 3
// end else
11758: GO 11823
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11760: LD_INT 22
11762: PUSH
11763: LD_INT 1
11765: PUSH
11766: EMPTY
11767: LIST
11768: LIST
11769: PUSH
11770: LD_INT 21
11772: PUSH
11773: LD_INT 1
11775: PUSH
11776: EMPTY
11777: LIST
11778: LIST
11779: PUSH
11780: LD_INT 26
11782: PUSH
11783: LD_INT 1
11785: PUSH
11786: EMPTY
11787: LIST
11788: LIST
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: PUSH
11795: LD_INT 1
11797: ARRAY
11798: PPUSH
11799: CALL_OW 69
11803: PUSH
11804: LD_EXP 1
11808: PUSH
11809: EMPTY
11810: LIST
11811: DIFF
11812: PPUSH
11813: LD_STRING D10-Mech1-1
11815: PPUSH
11816: LD_STRING D10-Mech1-1
11818: PPUSH
11819: CALL 3600 0 3
// end ; end ; end ;
11823: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
11824: LD_INT 22
11826: PUSH
11827: LD_INT 1
11829: PUSH
11830: EMPTY
11831: LIST
11832: LIST
11833: PUSH
11834: LD_INT 30
11836: PUSH
11837: LD_INT 32
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: CALL_OW 69
11852: PUSH
11853: LD_INT 0
11855: GREATER
11856: PUSH
11857: LD_EXP 30
11861: PUSH
11862: LD_INT 0
11864: EQUAL
11865: AND
11866: IFFALSE 12106
11868: GO 11870
11870: DISABLE
// begin if IsOK ( Claptopn ) then
11871: LD_EXP 11
11875: PPUSH
11876: CALL_OW 302
11880: IFFALSE 11896
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
11882: LD_EXP 11
11886: PPUSH
11887: LD_STRING D9b-Eng1-1
11889: PPUSH
11890: CALL_OW 88
// end else
11894: GO 12092
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11896: LD_INT 22
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 21
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 25
11918: PUSH
11919: LD_INT 3
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: LD_INT 26
11928: PUSH
11929: LD_INT 1
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: PUSH
11936: EMPTY
11937: LIST
11938: LIST
11939: LIST
11940: LIST
11941: PPUSH
11942: CALL_OW 69
11946: PUSH
11947: LD_EXP 1
11951: PUSH
11952: EMPTY
11953: LIST
11954: PUSH
11955: LD_INT 0
11957: GREATER
11958: DIFF
11959: IFFALSE 12033
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
11961: LD_INT 22
11963: PUSH
11964: LD_INT 1
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 21
11973: PUSH
11974: LD_INT 1
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 25
11983: PUSH
11984: LD_INT 2
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 26
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PPUSH
12007: CALL_OW 69
12011: PUSH
12012: LD_EXP 1
12016: PUSH
12017: EMPTY
12018: LIST
12019: DIFF
12020: PPUSH
12021: LD_STRING D9b-Eng1-1
12023: PPUSH
12024: LD_STRING D9b-Eng1-11
12026: PPUSH
12027: CALL 3600 0 3
// end else
12031: GO 12092
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12033: LD_INT 22
12035: PUSH
12036: LD_INT 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 21
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 26
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PPUSH
12068: CALL_OW 69
12072: PUSH
12073: LD_EXP 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: DIFF
12081: PPUSH
12082: LD_STRING D9b-Eng1-1
12084: PPUSH
12085: LD_STRING D9b-Eng1-1
12087: PPUSH
12088: CALL 3600 0 3
// end ; end ; if energyVDialog = 0 then
12092: LD_EXP 31
12096: PUSH
12097: LD_INT 0
12099: EQUAL
12100: IFFALSE 12106
// EnergyDialog ;
12102: CALL 3912 0 0
// end ;
12106: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12107: LD_EXP 32
12111: PUSH
12112: LD_INT 1
12114: EQUAL
12115: PUSH
12116: LD_EXP 33
12120: PUSH
12121: LD_INT 1
12123: EQUAL
12124: AND
12125: IFFALSE 12137
12127: GO 12129
12129: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12130: LD_STRING M1a
12132: PPUSH
12133: CALL_OW 337
12137: END
// every 3 3$0 do
12138: GO 12140
12140: DISABLE
// begin PrepareFirstAttack ;
12141: CALL 3156 0 0
// end ;
12145: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
12146: LD_INT 22
12148: PUSH
12149: LD_INT 5
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 21
12158: PUSH
12159: LD_INT 1
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: PPUSH
12170: CALL_OW 69
12174: PUSH
12175: LD_INT 3
12177: LESSEQUAL
12178: PUSH
12179: LD_EXP 21
12183: PUSH
12184: LD_INT 1
12186: EQUAL
12187: AND
12188: IFFALSE 12506
12190: GO 12192
12192: DISABLE
12193: LD_INT 0
12195: PPUSH
// begin firstRussianAttack = 2 ;
12196: LD_ADDR_EXP 21
12200: PUSH
12201: LD_INT 2
12203: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_INT 22
12211: PUSH
12212: LD_INT 5
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PUSH
12219: LD_INT 21
12221: PUSH
12222: LD_INT 1
12224: PUSH
12225: EMPTY
12226: LIST
12227: LIST
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PPUSH
12233: CALL_OW 69
12237: PUSH
12238: FOR_IN
12239: IFFALSE 12258
// ComMoveXY ( i , 125 , 98 ) ;
12241: LD_VAR 0 1
12245: PPUSH
12246: LD_INT 125
12248: PPUSH
12249: LD_INT 98
12251: PPUSH
12252: CALL_OW 111
12256: GO 12238
12258: POP
12259: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12260: LD_INT 22
12262: PUSH
12263: LD_INT 1
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: EMPTY
12281: LIST
12282: LIST
12283: PPUSH
12284: CALL_OW 69
12288: PUSH
12289: LD_EXP 1
12293: PUSH
12294: LD_EXP 7
12298: PUSH
12299: LD_EXP 4
12303: PUSH
12304: EMPTY
12305: LIST
12306: LIST
12307: LIST
12308: DIFF
12309: PPUSH
12310: LD_STRING DAtt1-Sol1-1
12312: PPUSH
12313: LD_STRING DAtt1-FSol1-1
12315: PPUSH
12316: CALL 3600 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12320: LD_EXP 1
12324: PPUSH
12325: LD_STRING DAtt1-JMM-1
12327: PPUSH
12328: CALL_OW 88
// if Lisa then
12332: LD_EXP 4
12336: IFFALSE 12352
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12338: LD_EXP 4
12342: PPUSH
12343: LD_STRING DAtt1a-Lisa-1
12345: PPUSH
12346: CALL_OW 88
// end else
12350: GO 12423
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12352: LD_INT 22
12354: PUSH
12355: LD_INT 1
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: PUSH
12362: LD_INT 21
12364: PUSH
12365: LD_INT 1
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: LD_INT 26
12374: PUSH
12375: LD_INT 1
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: PPUSH
12387: CALL_OW 69
12391: PUSH
12392: LD_EXP 1
12396: PUSH
12397: LD_EXP 7
12401: PUSH
12402: LD_EXP 4
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: DIFF
12412: PPUSH
12413: LD_STRING DAtt1a-Sol1-1
12415: PPUSH
12416: LD_STRING DAtt1-FSol1-1
12418: PPUSH
12419: CALL 3600 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12423: LD_EXP 1
12427: PPUSH
12428: LD_STRING DAtt1a-JMM-1
12430: PPUSH
12431: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12435: LD_INT 22
12437: PUSH
12438: LD_INT 1
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: PUSH
12445: LD_INT 21
12447: PUSH
12448: LD_INT 1
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 26
12457: PUSH
12458: LD_INT 1
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: PPUSH
12470: CALL_OW 69
12474: PUSH
12475: LD_EXP 1
12479: PUSH
12480: LD_EXP 7
12484: PUSH
12485: LD_EXP 4
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: DIFF
12495: PPUSH
12496: LD_STRING DAtt1b-Sol1-1
12498: PPUSH
12499: LD_STRING DAtt1a-Sol1-1
12501: PPUSH
12502: CALL 3600 0 3
// end ;
12506: PPOPN 1
12508: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12509: LD_EXP 21
12513: PUSH
12514: LD_INT 2
12516: EQUAL
12517: IFFALSE 12579
12519: GO 12521
12521: DISABLE
12522: LD_INT 0
12524: PPUSH
// begin enable ;
12525: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12526: LD_ADDR_VAR 0 1
12530: PUSH
12531: LD_INT 5
12533: PPUSH
12534: LD_INT 22
12536: PUSH
12537: LD_INT 5
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: LD_INT 21
12546: PUSH
12547: LD_INT 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: PPUSH
12558: CALL_OW 70
12562: PUSH
12563: FOR_IN
12564: IFFALSE 12577
// RemoveUnit ( i ) ;
12566: LD_VAR 0 1
12570: PPUSH
12571: CALL_OW 64
12575: GO 12563
12577: POP
12578: POP
// end ;
12579: PPOPN 1
12581: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12582: LD_INT 22
12584: PUSH
12585: LD_INT 5
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: PUSH
12592: EMPTY
12593: LIST
12594: PPUSH
12595: CALL_OW 69
12599: PUSH
12600: LD_INT 0
12602: EQUAL
12603: PUSH
12604: LD_EXP 21
12608: PUSH
12609: LD_INT 2
12611: EQUAL
12612: AND
12613: IFFALSE 12626
12615: GO 12617
12617: DISABLE
// firstRussianAttack = 3 ;
12618: LD_ADDR_EXP 21
12622: PUSH
12623: LD_INT 3
12625: ST_TO_ADDR
12626: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12627: LD_EXP 26
12631: PUSH
12632: LD_INT 0
12634: EQUAL
12635: IFFALSE 12716
12637: GO 12639
12639: DISABLE
// begin timerStatus = 4 ;
12640: LD_ADDR_EXP 27
12644: PUSH
12645: LD_INT 4
12647: ST_TO_ADDR
// DialogueOn ;
12648: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12652: LD_EXP 13
12656: PPUSH
12657: LD_STRING D2-Don-1
12659: PPUSH
12660: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12664: LD_EXP 1
12668: PPUSH
12669: LD_STRING D2-JMM-1
12671: PPUSH
12672: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12676: LD_EXP 13
12680: PPUSH
12681: LD_STRING D2-Don-2
12683: PPUSH
12684: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12688: LD_EXP 1
12692: PPUSH
12693: LD_STRING D2-JMM-2
12695: PPUSH
12696: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12700: LD_EXP 13
12704: PPUSH
12705: LD_STRING D2-Don-3
12707: PPUSH
12708: CALL_OW 94
// DialogueOff ;
12712: CALL_OW 7
// end ;
12716: END
// every 12 12$0 do var tmp ;
12717: GO 12719
12719: DISABLE
12720: LD_INT 0
12722: PPUSH
// begin PrepareDonaldsonArmy ;
12723: CALL 941 0 0
// CenterNowOnUnits ( Donaldson ) ;
12727: LD_EXP 13
12731: PPUSH
12732: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
12736: LD_ADDR_VAR 0 1
12740: PUSH
12741: LD_INT 22
12743: PUSH
12744: LD_INT 4
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: PUSH
12751: LD_INT 21
12753: PUSH
12754: LD_INT 1
12756: PUSH
12757: EMPTY
12758: LIST
12759: LIST
12760: PUSH
12761: LD_INT 26
12763: PUSH
12764: LD_INT 1
12766: PUSH
12767: EMPTY
12768: LIST
12769: LIST
12770: PUSH
12771: LD_INT 25
12773: PUSH
12774: LD_INT 1
12776: PUSH
12777: EMPTY
12778: LIST
12779: LIST
12780: PUSH
12781: EMPTY
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: PPUSH
12787: CALL_OW 69
12791: PUSH
12792: LD_EXP 5
12796: PUSH
12797: EMPTY
12798: LIST
12799: DIFF
12800: ST_TO_ADDR
// DialogueOn ;
12801: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
12805: LD_VAR 0 1
12809: PPUSH
12810: LD_STRING D3-Sol1-1
12812: PPUSH
12813: LD_STRING D3-Sol1-1
12815: PPUSH
12816: CALL 3600 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
12820: LD_INT 22
12822: PUSH
12823: LD_INT 4
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 21
12832: PUSH
12833: LD_INT 1
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 26
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: LD_INT 25
12852: PUSH
12853: LD_INT 3
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PPUSH
12866: CALL_OW 69
12870: PPUSH
12871: LD_STRING D3-Sol2-1
12873: PPUSH
12874: LD_STRING D3-Sol2-1
12876: PPUSH
12877: CALL 3600 0 3
// if Frank then
12881: LD_EXP 5
12885: IFFALSE 12899
// Say ( Frank , D3-Frank-1 ) ;
12887: LD_EXP 5
12891: PPUSH
12892: LD_STRING D3-Frank-1
12894: PPUSH
12895: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
12899: LD_EXP 13
12903: PPUSH
12904: LD_STRING D3-Don-1
12906: PPUSH
12907: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
12911: LD_EXP 13
12915: PPUSH
12916: LD_STRING D3-Don-1a
12918: PPUSH
12919: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
12923: LD_EXP 1
12927: PPUSH
12928: LD_STRING D3-JMM-1
12930: PPUSH
12931: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
12935: LD_EXP 13
12939: PPUSH
12940: LD_STRING D3-Don-2
12942: PPUSH
12943: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
12947: LD_INT 22
12949: PUSH
12950: LD_INT 6
12952: PUSH
12953: EMPTY
12954: LIST
12955: LIST
12956: PUSH
12957: LD_INT 21
12959: PUSH
12960: LD_INT 1
12962: PUSH
12963: EMPTY
12964: LIST
12965: LIST
12966: PUSH
12967: EMPTY
12968: LIST
12969: LIST
12970: PPUSH
12971: CALL_OW 69
12975: PUSH
12976: LD_INT 0
12978: GREATER
12979: IFFALSE 13093
// begin Say ( JMM , D3-JMM-2 ) ;
12981: LD_EXP 1
12985: PPUSH
12986: LD_STRING D3-JMM-2
12988: PPUSH
12989: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
12993: LD_EXP 13
12997: PPUSH
12998: LD_STRING D3-Don-3
13000: PPUSH
13001: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13005: LD_EXP 1
13009: PPUSH
13010: LD_STRING D3-JMM-3
13012: PPUSH
13013: CALL_OW 88
// if IsOK ( Frank ) then
13017: LD_EXP 5
13021: PPUSH
13022: CALL_OW 302
13026: IFFALSE 13040
// Say ( Frank , D3-Frank-3 ) ;
13028: LD_EXP 5
13032: PPUSH
13033: LD_STRING D3-Frank-3
13035: PPUSH
13036: CALL_OW 88
// DialogueOff ;
13040: CALL_OW 7
// if IsOK ( Frank ) then
13044: LD_EXP 5
13048: PPUSH
13049: CALL_OW 302
13053: IFFALSE 13091
// begin SetSide ( Frank , 0 ) ;
13055: LD_EXP 5
13059: PPUSH
13060: LD_INT 0
13062: PPUSH
13063: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13067: LD_EXP 5
13071: PPUSH
13072: LD_INT 12
13074: PPUSH
13075: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13079: LD_EXP 5
13083: PPUSH
13084: LD_STRING Frank
13086: PPUSH
13087: CALL_OW 38
// end ; end else
13091: GO 13156
// begin Say ( JMM , D3-JMM-4 ) ;
13093: LD_EXP 1
13097: PPUSH
13098: LD_STRING D3-JMM-4
13100: PPUSH
13101: CALL_OW 88
// DialogueOff ;
13105: CALL_OW 7
// if IsOK ( Frank ) then
13109: LD_EXP 5
13113: PPUSH
13114: CALL_OW 302
13118: IFFALSE 13156
// begin SetSide ( Frank , 0 ) ;
13120: LD_EXP 5
13124: PPUSH
13125: LD_INT 0
13127: PPUSH
13128: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13132: LD_EXP 5
13136: PPUSH
13137: LD_INT 12
13139: PPUSH
13140: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13144: LD_EXP 5
13148: PPUSH
13149: LD_STRING Frank
13151: PPUSH
13152: CALL_OW 38
// end ; end ; end ;
13156: PPOPN 1
13158: END
// every 1 trigger IsInArea ( Frank , FrankSpot ) and GetSide ( Frank ) = 0 do
13159: LD_EXP 5
13163: PPUSH
13164: LD_INT 12
13166: PPUSH
13167: CALL_OW 308
13171: PUSH
13172: LD_EXP 5
13176: PPUSH
13177: CALL_OW 255
13181: PUSH
13182: LD_INT 0
13184: EQUAL
13185: AND
13186: IFFALSE 13208
13188: GO 13190
13190: DISABLE
// begin RemoveUnit ( Frank ) ;
13191: LD_EXP 5
13195: PPUSH
13196: CALL_OW 64
// frankScoutBase = 1 ;
13200: LD_ADDR_EXP 23
13204: PUSH
13205: LD_INT 1
13207: ST_TO_ADDR
// end ;
13208: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13209: LD_EXP 13
13213: PPUSH
13214: CALL_OW 255
13218: PUSH
13219: LD_INT 4
13221: EQUAL
13222: PUSH
13223: LD_EXP 13
13227: PPUSH
13228: CALL_OW 302
13232: AND
13233: IFFALSE 13258
13235: GO 13237
13237: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13238: LD_EXP 13
13242: PPUSH
13243: LD_STRING D3b-Don-1
13245: PPUSH
13246: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13250: LD_ADDR_EXP 39
13254: PUSH
13255: LD_INT 1
13257: ST_TO_ADDR
// end ;
13258: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13259: LD_EXP 22
13263: PUSH
13264: LD_INT 0
13266: EQUAL
13267: IFFALSE 13423
13269: GO 13271
13271: DISABLE
13272: LD_INT 0
13274: PPUSH
13275: PPUSH
// begin enable ;
13276: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13277: LD_ADDR_VAR 0 1
13281: PUSH
13282: LD_INT 22
13284: PUSH
13285: LD_INT 4
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 21
13294: PUSH
13295: LD_INT 1
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: EMPTY
13303: LIST
13304: LIST
13305: PPUSH
13306: CALL_OW 69
13310: PUSH
13311: FOR_IN
13312: IFFALSE 13421
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13314: LD_ADDR_VAR 0 2
13318: PUSH
13319: LD_INT 22
13321: PUSH
13322: LD_INT 1
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: PUSH
13329: LD_INT 21
13331: PUSH
13332: LD_INT 1
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: PUSH
13339: EMPTY
13340: LIST
13341: LIST
13342: PPUSH
13343: CALL_OW 69
13347: PUSH
13348: FOR_IN
13349: IFFALSE 13417
// begin if GetDistUnits ( i , j ) < 7 then
13351: LD_VAR 0 1
13355: PPUSH
13356: LD_VAR 0 2
13360: PPUSH
13361: CALL_OW 296
13365: PUSH
13366: LD_INT 7
13368: LESS
13369: IFFALSE 13415
// begin saveDonaldson = 1 ;
13371: LD_ADDR_EXP 22
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13379: LD_INT 22
13381: PUSH
13382: LD_INT 4
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 21
13391: PUSH
13392: LD_INT 1
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: PPUSH
13403: CALL_OW 69
13407: PPUSH
13408: LD_INT 1
13410: PPUSH
13411: CALL_OW 235
// end ; end ;
13415: GO 13348
13417: POP
13418: POP
// end ;
13419: GO 13311
13421: POP
13422: POP
// end ;
13423: PPOPN 2
13425: END
// every 2 2$0 trigger saveDonaldson = 1 do
13426: LD_EXP 22
13430: PUSH
13431: LD_INT 1
13433: EQUAL
13434: IFFALSE 13676
13436: GO 13438
13438: DISABLE
// begin uc_side = 4 ;
13439: LD_ADDR_OWVAR 20
13443: PUSH
13444: LD_INT 4
13446: ST_TO_ADDR
// uc_nation = 1 ;
13447: LD_ADDR_OWVAR 21
13451: PUSH
13452: LD_INT 1
13454: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13455: LD_ADDR_EXP 5
13459: PUSH
13460: LD_STRING Frank
13462: PPUSH
13463: CALL_OW 34
13467: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13468: LD_EXP 5
13472: PPUSH
13473: LD_INT 13
13475: PPUSH
13476: LD_INT 0
13478: PPUSH
13479: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13483: LD_INT 35
13485: PPUSH
13486: CALL_OW 67
// ComMoveXY ( Frank , 51 , 15 ) ;
13490: LD_EXP 5
13494: PPUSH
13495: LD_INT 51
13497: PPUSH
13498: LD_INT 15
13500: PPUSH
13501: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 6 ;
13505: LD_EXP 5
13509: PPUSH
13510: LD_EXP 1
13514: PPUSH
13515: CALL_OW 296
13519: PUSH
13520: LD_INT 6
13522: LESS
13523: IFFALSE 13483
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13525: LD_EXP 1
13529: PUSH
13530: LD_EXP 5
13534: PUSH
13535: EMPTY
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 87
// DialogueOn ;
13543: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13547: LD_EXP 5
13551: PPUSH
13552: LD_STRING D3a-Frank-1
13554: PPUSH
13555: CALL_OW 88
// if Lisa then
13559: LD_EXP 4
13563: IFFALSE 13613
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13565: LD_EXP 4
13569: PPUSH
13570: LD_STRING D3a-Lisa-1
13572: PPUSH
13573: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13577: LD_EXP 5
13581: PPUSH
13582: LD_STRING D3a-Frank-2
13584: PPUSH
13585: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13589: LD_EXP 4
13593: PPUSH
13594: LD_STRING D3a-Lisa-2
13596: PPUSH
13597: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13601: LD_EXP 5
13605: PPUSH
13606: LD_STRING D3a-Frank-3
13608: PPUSH
13609: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13613: LD_EXP 1
13617: PPUSH
13618: LD_STRING D3a-JMM-3
13620: PPUSH
13621: CALL_OW 88
// DialogueOff ;
13625: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13629: LD_EXP 5
13633: PPUSH
13634: LD_INT 1
13636: PPUSH
13637: CALL_OW 235
// InGameOn ;
13641: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13645: LD_INT 1
13647: PPUSH
13648: LD_INT 7
13650: PPUSH
13651: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13655: LD_INT 93
13657: PPUSH
13658: LD_INT 91
13660: PPUSH
13661: CALL_OW 84
// wait ( 0 0$5 ) ;
13665: LD_INT 175
13667: PPUSH
13668: CALL_OW 67
// InGameOff ;
13672: CALL_OW 9
// end ;
13676: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
13677: LD_OWVAR 67
13681: PUSH
13682: LD_INT 2
13684: EQUAL
13685: PUSH
13686: LD_OWVAR 67
13690: PUSH
13691: LD_INT 3
13693: EQUAL
13694: OR
13695: IFFALSE 13719
13697: GO 13699
13699: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
13700: LD_INT 24
13702: PPUSH
13703: LD_INT 24
13705: PPUSH
13706: LD_INT 1
13708: PPUSH
13709: LD_INT 1
13711: PPUSH
13712: LD_INT 53
13714: PPUSH
13715: CALL_OW 125
13719: END
// every 18 18$0 do
13720: GO 13722
13722: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
13723: LD_EXP 14
13727: PPUSH
13728: LD_STRING D4-Har-1
13730: PPUSH
13731: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
13735: LD_EXP 1
13739: PPUSH
13740: LD_STRING D4-JMM-1
13742: PPUSH
13743: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
13747: LD_EXP 14
13751: PPUSH
13752: LD_STRING D4-Har-2
13754: PPUSH
13755: CALL_OW 94
// case query ( Q1 ) of 1 :
13759: LD_STRING Q1
13761: PPUSH
13762: CALL_OW 97
13766: PUSH
13767: LD_INT 1
13769: DOUBLE
13770: EQUAL
13771: IFTRUE 13775
13773: GO 13834
13775: POP
// begin Say ( JMM , D5-JMM-1 ) ;
13776: LD_EXP 1
13780: PPUSH
13781: LD_STRING D5-JMM-1
13783: PPUSH
13784: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
13788: LD_EXP 14
13792: PPUSH
13793: LD_STRING D5-Har-1
13795: PPUSH
13796: CALL_OW 94
// timeToSupport = 10 10$0 ;
13800: LD_ADDR_EXP 26
13804: PUSH
13805: LD_INT 21000
13807: ST_TO_ADDR
// timerStatus = 2 ;
13808: LD_ADDR_EXP 27
13812: PUSH
13813: LD_INT 2
13815: ST_TO_ADDR
// startTimer = 1 ;
13816: LD_ADDR_EXP 28
13820: PUSH
13821: LD_INT 1
13823: ST_TO_ADDR
// harrAnswer = 1 ;
13824: LD_ADDR_EXP 24
13828: PUSH
13829: LD_INT 1
13831: ST_TO_ADDR
// end ; 2 :
13832: GO 13969
13834: LD_INT 2
13836: DOUBLE
13837: EQUAL
13838: IFTRUE 13842
13840: GO 13901
13842: POP
// begin Say ( JMM , D5-JMM-2 ) ;
13843: LD_EXP 1
13847: PPUSH
13848: LD_STRING D5-JMM-2
13850: PPUSH
13851: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
13855: LD_EXP 14
13859: PPUSH
13860: LD_STRING D5-Har-2
13862: PPUSH
13863: CALL_OW 94
// timeToSupport = 5 5$0 ;
13867: LD_ADDR_EXP 26
13871: PUSH
13872: LD_INT 10500
13874: ST_TO_ADDR
// timerStatus = 2 ;
13875: LD_ADDR_EXP 27
13879: PUSH
13880: LD_INT 2
13882: ST_TO_ADDR
// startTimer = 1 ;
13883: LD_ADDR_EXP 28
13887: PUSH
13888: LD_INT 1
13890: ST_TO_ADDR
// harrAnswer = 2 ;
13891: LD_ADDR_EXP 24
13895: PUSH
13896: LD_INT 2
13898: ST_TO_ADDR
// end ; 3 :
13899: GO 13969
13901: LD_INT 3
13903: DOUBLE
13904: EQUAL
13905: IFTRUE 13909
13907: GO 13968
13909: POP
// begin Say ( JMM , D5-JMM-3 ) ;
13910: LD_EXP 1
13914: PPUSH
13915: LD_STRING D5-JMM-3
13917: PPUSH
13918: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
13922: LD_EXP 14
13926: PPUSH
13927: LD_STRING D5-Har-3
13929: PPUSH
13930: CALL_OW 94
// timeToSupport = 5 5$0 ;
13934: LD_ADDR_EXP 26
13938: PUSH
13939: LD_INT 10500
13941: ST_TO_ADDR
// timerStatus = 2 ;
13942: LD_ADDR_EXP 27
13946: PUSH
13947: LD_INT 2
13949: ST_TO_ADDR
// startTimer = 1 ;
13950: LD_ADDR_EXP 28
13954: PUSH
13955: LD_INT 1
13957: ST_TO_ADDR
// harrAnswer = 3 ;
13958: LD_ADDR_EXP 24
13962: PUSH
13963: LD_INT 3
13965: ST_TO_ADDR
// end ; end ;
13966: GO 13969
13968: POP
// end ;
13969: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
13970: LD_EXP 27
13974: PUSH
13975: LD_INT 2
13977: EQUAL
13978: PUSH
13979: LD_EXP 26
13983: PUSH
13984: LD_INT 0
13986: EQUAL
13987: AND
13988: IFFALSE 14265
13990: GO 13992
13992: DISABLE
// begin timerStatus = 4 ;
13993: LD_ADDR_EXP 27
13997: PUSH
13998: LD_INT 4
14000: ST_TO_ADDR
// if harrAnswer = 1 then
14001: LD_EXP 24
14005: PUSH
14006: LD_INT 1
14008: EQUAL
14009: IFFALSE 14089
// begin PrepareHarrisonSupport ( 3 ) ;
14011: LD_INT 3
14013: PPUSH
14014: CALL 1349 0 1
// wait ( 1 1$0 ) ;
14018: LD_INT 2100
14020: PPUSH
14021: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14025: LD_EXP 14
14029: PPUSH
14030: LD_STRING D7-Har-1
14032: PPUSH
14033: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14037: LD_STRING M2
14039: PPUSH
14040: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14044: LD_ADDR_EXP 25
14048: PUSH
14049: LD_INT 31500
14051: PUSH
14052: LD_INT 10500
14054: PUSH
14055: LD_INT 8400
14057: PUSH
14058: LD_INT 6300
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: PUSH
14066: LD_OWVAR 67
14070: ARRAY
14071: PLUS
14072: ST_TO_ADDR
// startTimer = 1 ;
14073: LD_ADDR_EXP 28
14077: PUSH
14078: LD_INT 1
14080: ST_TO_ADDR
// timerStatus = 3 ;
14081: LD_ADDR_EXP 27
14085: PUSH
14086: LD_INT 3
14088: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14089: LD_EXP 24
14093: PUSH
14094: LD_INT 2
14096: EQUAL
14097: IFFALSE 14177
// begin PrepareHarrisonSupport ( 4 ) ;
14099: LD_INT 4
14101: PPUSH
14102: CALL 1349 0 1
// wait ( 1 1$0 ) ;
14106: LD_INT 2100
14108: PPUSH
14109: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14113: LD_EXP 14
14117: PPUSH
14118: LD_STRING D7-Har-1
14120: PPUSH
14121: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14125: LD_STRING M2
14127: PPUSH
14128: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14132: LD_ADDR_EXP 25
14136: PUSH
14137: LD_INT 27300
14139: PUSH
14140: LD_INT 8400
14142: PUSH
14143: LD_INT 8400
14145: PUSH
14146: LD_INT 6300
14148: PUSH
14149: EMPTY
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_OWVAR 67
14158: ARRAY
14159: PLUS
14160: ST_TO_ADDR
// startTimer = 1 ;
14161: LD_ADDR_EXP 28
14165: PUSH
14166: LD_INT 1
14168: ST_TO_ADDR
// timerStatus = 3 ;
14169: LD_ADDR_EXP 27
14173: PUSH
14174: LD_INT 3
14176: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14177: LD_EXP 24
14181: PUSH
14182: LD_INT 3
14184: EQUAL
14185: IFFALSE 14265
// begin PrepareHarrisonSupport ( 5 ) ;
14187: LD_INT 5
14189: PPUSH
14190: CALL 1349 0 1
// wait ( 1 1$0 ) ;
14194: LD_INT 2100
14196: PPUSH
14197: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14201: LD_EXP 14
14205: PPUSH
14206: LD_STRING D7-Har-1
14208: PPUSH
14209: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14213: LD_STRING M2
14215: PPUSH
14216: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14220: LD_ADDR_EXP 25
14224: PUSH
14225: LD_INT 21000
14227: PUSH
14228: LD_INT 8400
14230: PUSH
14231: LD_INT 6300
14233: PUSH
14234: LD_INT 4200
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: LD_OWVAR 67
14246: ARRAY
14247: PLUS
14248: ST_TO_ADDR
// startTimer = 1 ;
14249: LD_ADDR_EXP 28
14253: PUSH
14254: LD_INT 1
14256: ST_TO_ADDR
// timerStatus = 3 ;
14257: LD_ADDR_EXP 27
14261: PUSH
14262: LD_INT 3
14264: ST_TO_ADDR
// end ; end ;
14265: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14266: LD_EXP 25
14270: PUSH
14271: LD_INT 8400
14273: LESSEQUAL
14274: PUSH
14275: LD_EXP 27
14279: PUSH
14280: LD_INT 3
14282: EQUAL
14283: AND
14284: IFFALSE 14316
14286: GO 14288
14288: DISABLE
// begin DialogueOn ;
14289: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14293: LD_EXP 14
14297: PPUSH
14298: LD_STRING D7a-Har-1
14300: PPUSH
14301: CALL_OW 94
// DialogueOff ;
14305: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14309: LD_STRING M2a
14311: PPUSH
14312: CALL_OW 337
// end ;
14316: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
14317: LD_EXP 25
14321: PUSH
14322: LD_INT 0
14324: LESSEQUAL
14325: PUSH
14326: LD_EXP 27
14330: PUSH
14331: LD_INT 3
14333: EQUAL
14334: AND
14335: IFFALSE 14460
14337: GO 14339
14339: DISABLE
14340: LD_INT 0
14342: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14343: LD_ADDR_VAR 0 1
14347: PUSH
14348: LD_INT 22
14350: PUSH
14351: LD_INT 1
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PPUSH
14358: CALL_OW 69
14362: PUSH
14363: LD_EXP 1
14367: PUSH
14368: EMPTY
14369: LIST
14370: DIFF
14371: ST_TO_ADDR
// saveDonaldson = 2 ;
14372: LD_ADDR_EXP 22
14376: PUSH
14377: LD_INT 2
14379: ST_TO_ADDR
// DialogueOn ;
14380: CALL_OW 6
// if IsOK ( Donaldson ) then
14384: LD_EXP 13
14388: PPUSH
14389: CALL_OW 302
14393: IFFALSE 14409
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14395: LD_EXP 14
14399: PPUSH
14400: LD_STRING D8-Har-1
14402: PPUSH
14403: CALL_OW 94
// end else
14407: GO 14421
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14409: LD_EXP 14
14413: PPUSH
14414: LD_STRING D8-Har-1a
14416: PPUSH
14417: CALL_OW 94
// end ; DialogueOff ;
14421: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14425: LD_VAR 0 1
14429: PPUSH
14430: LD_INT 4
14432: PPUSH
14433: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14437: LD_VAR 0 1
14441: PPUSH
14442: LD_INT 88
14444: PPUSH
14445: LD_INT 89
14447: PPUSH
14448: CALL_OW 114
// honor = 0 ;
14452: LD_ADDR_EXP 37
14456: PUSH
14457: LD_INT 0
14459: ST_TO_ADDR
// end ;
14460: PPOPN 1
14462: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14463: LD_INT 22
14465: PUSH
14466: LD_INT 6
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: LD_INT 21
14475: PUSH
14476: LD_INT 1
14478: PUSH
14479: EMPTY
14480: LIST
14481: LIST
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: PPUSH
14487: CALL_OW 69
14491: PUSH
14492: LD_INT 0
14494: EQUAL
14495: PUSH
14496: LD_EXP 18
14500: PUSH
14501: LD_INT 0
14503: EQUAL
14504: AND
14505: PUSH
14506: LD_EXP 40
14510: PUSH
14511: LD_INT 1
14513: EQUAL
14514: AND
14515: IFFALSE 14609
14517: GO 14519
14519: DISABLE
14520: LD_INT 0
14522: PPUSH
14523: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14524: LD_ADDR_VAR 0 2
14528: PUSH
14529: LD_INT 22
14531: PUSH
14532: LD_INT 1
14534: PUSH
14535: EMPTY
14536: LIST
14537: LIST
14538: PUSH
14539: LD_INT 21
14541: PUSH
14542: LD_INT 1
14544: PUSH
14545: EMPTY
14546: LIST
14547: LIST
14548: PUSH
14549: LD_INT 23
14551: PUSH
14552: LD_INT 1
14554: PUSH
14555: EMPTY
14556: LIST
14557: LIST
14558: PUSH
14559: EMPTY
14560: LIST
14561: LIST
14562: LIST
14563: PPUSH
14564: CALL_OW 69
14568: ST_TO_ADDR
// for i in tmp do
14569: LD_ADDR_VAR 0 1
14573: PUSH
14574: LD_VAR 0 2
14578: PUSH
14579: FOR_IN
14580: IFFALSE 14607
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14582: LD_VAR 0 1
14586: PPUSH
14587: LD_INT 1
14589: PPUSH
14590: LD_INT 4
14592: PPUSH
14593: CALL_OW 12
14597: PPUSH
14598: LD_INT 500
14600: PPUSH
14601: CALL_OW 492
// end ;
14605: GO 14579
14607: POP
14608: POP
// end ; end_of_file
14609: PPOPN 2
14611: END
// every 0 0$1 trigger AIEnable = 1 do
14612: LD_EXP 35
14616: PUSH
14617: LD_INT 1
14619: EQUAL
14620: IFFALSE 14692
14622: GO 14624
14624: DISABLE
// begin enable ;
14625: ENABLE
// RepairBuilding ( 3 , rubware0 ) ;
14626: LD_INT 3
14628: PPUSH
14629: LD_INT 21
14631: PPUSH
14632: CALL 4945 0 2
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
14636: LD_INT 3
14638: PPUSH
14639: LD_INT 8
14641: PPUSH
14642: LD_INT 7
14644: PPUSH
14645: LD_INT 1
14647: PPUSH
14648: CALL 5186 0 4
// if baseReadyToBuild = 2 then
14652: LD_EXP 18
14656: PUSH
14657: LD_INT 2
14659: EQUAL
14660: IFFALSE 14692
// begin RepairBuilding ( 6 , ruPDepot ) ;
14662: LD_INT 6
14664: PPUSH
14665: LD_EXP 19
14669: PPUSH
14670: CALL 4945 0 2
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
14674: LD_INT 6
14676: PPUSH
14677: LD_INT 9
14679: PPUSH
14680: LD_INT 6
14682: PPUSH
14683: LD_EXP 20
14687: PPUSH
14688: CALL 5186 0 4
// end ; end ;
14692: END
// every 0 0$01 do
14693: GO 14695
14695: DISABLE
// begin enable ;
14696: ENABLE
// RepairVehicle ( 3 , RussianAttackRepair , 111 , 87 , 1 ) ;
14697: LD_INT 3
14699: PPUSH
14700: LD_INT 17
14702: PPUSH
14703: LD_INT 111
14705: PPUSH
14706: LD_INT 87
14708: PPUSH
14709: LD_INT 1
14711: PPUSH
14712: CALL 8054 0 5
// end ;
14716: END
// every 0 0$01 do
14717: GO 14719
14719: DISABLE
// begin enable ;
14720: ENABLE
// RepairVehicle ( 5 , RussianAttackRepair , 111 , 87 , 1 ) ;
14721: LD_INT 5
14723: PPUSH
14724: LD_INT 17
14726: PPUSH
14727: LD_INT 111
14729: PPUSH
14730: LD_INT 87
14732: PPUSH
14733: LD_INT 1
14735: PPUSH
14736: CALL 8054 0 5
// end ;
14740: END
// every 0 0$1 + 15 15$0 trigger AIEnable = 1 do
14741: LD_EXP 35
14745: PUSH
14746: LD_INT 1
14748: EQUAL
14749: IFFALSE 14935
14751: GO 14753
14753: DISABLE
// begin enable ;
14754: ENABLE
// if Difficulty = 1 then
14755: LD_OWVAR 67
14759: PUSH
14760: LD_INT 1
14762: EQUAL
14763: IFFALSE 14810
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
14765: LD_INT 3
14767: PPUSH
14768: LD_INT 24
14770: PPUSH
14771: LD_OWVAR 67
14775: PUSH
14776: LD_INT 1
14778: PLUS
14779: PPUSH
14780: LD_INT 1
14782: PPUSH
14783: LD_INT 42
14785: PUSH
14786: LD_INT 42
14788: PUSH
14789: LD_INT 43
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: LIST
14796: PPUSH
14797: LD_INT 1
14799: PPUSH
14800: LD_INT 1
14802: PPUSH
14803: LD_INT 21
14805: PPUSH
14806: CALL 5452 0 8
// if Difficulty = 2 then
14810: LD_OWVAR 67
14814: PUSH
14815: LD_INT 2
14817: EQUAL
14818: IFFALSE 14880
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 1 , 1 , [ 42 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
14820: LD_INT 3
14822: PPUSH
14823: LD_INT 24
14825: PPUSH
14826: LD_OWVAR 67
14830: PUSH
14831: LD_INT 1
14833: PLUS
14834: PPUSH
14835: LD_INT 1
14837: PPUSH
14838: LD_INT 42
14840: PUSH
14841: LD_INT 43
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: PPUSH
14848: LD_INT 1
14850: PPUSH
14851: LD_INT 1
14853: PPUSH
14854: LD_INT 21
14856: PUSH
14857: LD_INT 22
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: LD_INT 1
14866: PPUSH
14867: LD_INT 2
14869: PPUSH
14870: CALL_OW 12
14874: ARRAY
14875: PPUSH
14876: CALL 5452 0 8
// if Difficulty = 3 then
14880: LD_OWVAR 67
14884: PUSH
14885: LD_INT 3
14887: EQUAL
14888: IFFALSE 14935
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty , 1 , [ 43 , 43 , 43 , 44 ] , 1 , 1 , 22 ) ;
14890: LD_INT 3
14892: PPUSH
14893: LD_INT 24
14895: PPUSH
14896: LD_OWVAR 67
14900: PPUSH
14901: LD_INT 1
14903: PPUSH
14904: LD_INT 43
14906: PUSH
14907: LD_INT 43
14909: PUSH
14910: LD_INT 43
14912: PUSH
14913: LD_INT 44
14915: PUSH
14916: EMPTY
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: LD_INT 1
14927: PPUSH
14928: LD_INT 22
14930: PPUSH
14931: CALL 5452 0 8
// end ;
14935: END
// every 0 0$1 do
14936: GO 14938
14938: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
14939: LD_INT 3
14941: PPUSH
14942: LD_INT 1
14944: PPUSH
14945: LD_INT 3
14947: PPUSH
14948: CALL 4860 0 3
14952: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
14953: LD_EXP 18
14957: PUSH
14958: LD_INT 1
14960: EQUAL
14961: IFFALSE 15108
14963: GO 14965
14965: DISABLE
14966: LD_INT 0
14968: PPUSH
14969: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
14970: LD_ADDR_VAR 0 2
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_INT 6
14980: PUSH
14981: EMPTY
14982: LIST
14983: LIST
14984: PUSH
14985: LD_INT 21
14987: PUSH
14988: LD_INT 2
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 34
14997: PUSH
14998: LD_INT 51
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: LIST
15009: PPUSH
15010: CALL_OW 69
15014: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15015: LD_VAR 0 2
15019: PUSH
15020: LD_INT 1
15022: ARRAY
15023: PPUSH
15024: LD_EXP 19
15028: PPUSH
15029: CALL_OW 250
15033: PUSH
15034: LD_INT 5
15036: MINUS
15037: PPUSH
15038: LD_EXP 19
15042: PPUSH
15043: CALL_OW 251
15047: PUSH
15048: LD_INT 5
15050: MINUS
15051: PPUSH
15052: CALL_OW 111
// wait ( 0 0$5 ) ;
15056: LD_INT 175
15058: PPUSH
15059: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15063: LD_VAR 0 2
15067: PUSH
15068: LD_INT 1
15070: ARRAY
15071: PPUSH
15072: LD_INT 41
15074: PPUSH
15075: LD_INT 52
15077: PPUSH
15078: CALL_OW 177
// wait ( 0 0$40 ) ;
15082: LD_INT 1400
15084: PPUSH
15085: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15089: LD_VAR 0 2
15093: PUSH
15094: LD_INT 1
15096: ARRAY
15097: PPUSH
15098: LD_INT 41
15100: PPUSH
15101: LD_INT 44
15103: PPUSH
15104: CALL_OW 111
// end ;
15108: PPOPN 2
15110: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15111: LD_EXP 19
15115: PPUSH
15116: CALL_OW 274
15120: PPUSH
15121: LD_INT 1
15123: PPUSH
15124: CALL_OW 275
15128: PUSH
15129: LD_INT 100
15131: GREATEREQUAL
15132: IFFALSE 15360
15134: GO 15136
15136: DISABLE
15137: LD_INT 0
15139: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_INT 6
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: PUSH
15155: LD_INT 21
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 25
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: LIST
15179: PPUSH
15180: CALL_OW 69
15184: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15185: LD_VAR 0 1
15189: PUSH
15190: LD_INT 1
15192: ARRAY
15193: PPUSH
15194: LD_INT 4
15196: PPUSH
15197: LD_INT 39
15199: PPUSH
15200: LD_INT 37
15202: PPUSH
15203: LD_INT 3
15205: PPUSH
15206: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15210: LD_VAR 0 1
15214: PUSH
15215: LD_INT 1
15217: ARRAY
15218: PPUSH
15219: LD_INT 29
15221: PPUSH
15222: LD_INT 42
15224: PPUSH
15225: LD_INT 54
15227: PPUSH
15228: LD_INT 3
15230: PPUSH
15231: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15235: LD_VAR 0 1
15239: PUSH
15240: LD_INT 1
15242: ARRAY
15243: PPUSH
15244: LD_INT 6
15246: PPUSH
15247: LD_INT 38
15249: PPUSH
15250: LD_INT 48
15252: PPUSH
15253: LD_INT 0
15255: PPUSH
15256: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15260: LD_VAR 0 1
15264: PUSH
15265: LD_INT 1
15267: ARRAY
15268: PPUSH
15269: LD_INT 2
15271: PPUSH
15272: LD_INT 32
15274: PPUSH
15275: LD_INT 38
15277: PPUSH
15278: LD_INT 2
15280: PPUSH
15281: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15285: LD_VAR 0 1
15289: PUSH
15290: LD_INT 1
15292: ARRAY
15293: PPUSH
15294: LD_INT 26
15296: PPUSH
15297: LD_INT 39
15299: PPUSH
15300: LD_INT 55
15302: PPUSH
15303: LD_INT 3
15305: PPUSH
15306: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15310: LD_VAR 0 1
15314: PUSH
15315: LD_INT 1
15317: ARRAY
15318: PPUSH
15319: LD_INT 32
15321: PPUSH
15322: LD_INT 31
15324: PPUSH
15325: LD_INT 31
15327: PPUSH
15328: LD_INT 3
15330: PPUSH
15331: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15335: LD_VAR 0 1
15339: PUSH
15340: LD_INT 1
15342: ARRAY
15343: PPUSH
15344: LD_INT 31
15346: PPUSH
15347: LD_INT 50
15349: PPUSH
15350: LD_INT 51
15352: PPUSH
15353: LD_INT 4
15355: PPUSH
15356: CALL_OW 205
// end ; end_of_file
15360: PPOPN 1
15362: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15363: LD_INT 0
15365: PPUSH
15366: PPUSH
15367: PPUSH
15368: PPUSH
15369: PPUSH
15370: PPUSH
15371: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: LD_INT 22
15379: PUSH
15380: LD_INT 6
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PUSH
15387: LD_INT 21
15389: PUSH
15390: LD_INT 1
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: PUSH
15397: LD_INT 25
15399: PUSH
15400: LD_INT 1
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: PUSH
15407: LD_INT 3
15409: PUSH
15410: LD_INT 54
15412: PUSH
15413: EMPTY
15414: LIST
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: PUSH
15420: EMPTY
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: PPUSH
15426: CALL_OW 69
15430: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
15431: LD_ADDR_VAR 0 7
15435: PUSH
15436: LD_INT 22
15438: PUSH
15439: LD_INT 6
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 1
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: LD_INT 25
15458: PUSH
15459: LD_INT 1
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: LD_INT 54
15468: PUSH
15469: EMPTY
15470: LIST
15471: PUSH
15472: EMPTY
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: PPUSH
15478: CALL_OW 69
15482: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15483: LD_ADDR_VAR 0 4
15487: PUSH
15488: LD_INT 22
15490: PUSH
15491: LD_INT 6
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: PUSH
15498: LD_INT 21
15500: PUSH
15501: LD_INT 1
15503: PUSH
15504: EMPTY
15505: LIST
15506: LIST
15507: PUSH
15508: LD_INT 25
15510: PUSH
15511: LD_INT 2
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: PPUSH
15523: CALL_OW 69
15527: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
15528: LD_ADDR_VAR 0 6
15532: PUSH
15533: LD_INT 22
15535: PUSH
15536: LD_INT 6
15538: PUSH
15539: EMPTY
15540: LIST
15541: LIST
15542: PUSH
15543: LD_INT 21
15545: PUSH
15546: LD_INT 1
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: PUSH
15553: LD_INT 25
15555: PUSH
15556: LD_INT 4
15558: PUSH
15559: EMPTY
15560: LIST
15561: LIST
15562: PUSH
15563: EMPTY
15564: LIST
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15573: LD_ADDR_VAR 0 8
15577: PUSH
15578: LD_INT 22
15580: PUSH
15581: LD_INT 6
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 21
15590: PUSH
15591: LD_INT 2
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: LD_INT 34
15600: PUSH
15601: LD_INT 51
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: LIST
15612: PPUSH
15613: CALL_OW 69
15617: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
15618: LD_VAR 0 1
15622: PPUSH
15623: CALL_OW 255
15627: PUSH
15628: LD_INT 6
15630: EQUAL
15631: PUSH
15632: LD_VAR 0 1
15636: PPUSH
15637: CALL_OW 266
15641: PUSH
15642: LD_INT 0
15644: EQUAL
15645: AND
15646: IFFALSE 15666
// begin ruPDepot = building ;
15648: LD_ADDR_EXP 19
15652: PUSH
15653: LD_VAR 0 1
15657: ST_TO_ADDR
// baseReadyToBuild = 1 ;
15658: LD_ADDR_EXP 18
15662: PUSH
15663: LD_INT 1
15665: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
15666: LD_VAR 0 1
15670: PPUSH
15671: CALL_OW 266
15675: PUSH
15676: LD_INT 4
15678: EQUAL
15679: PUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 255
15689: PUSH
15690: LD_INT 6
15692: EQUAL
15693: AND
15694: IFFALSE 15727
// for i in tmpSold do
15696: LD_ADDR_VAR 0 2
15700: PUSH
15701: LD_VAR 0 3
15705: PUSH
15706: FOR_IN
15707: IFFALSE 15725
// ComEnterUnit ( i , building ) ;
15709: LD_VAR 0 2
15713: PPUSH
15714: LD_VAR 0 1
15718: PPUSH
15719: CALL_OW 120
15723: GO 15706
15725: POP
15726: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 266
15736: PUSH
15737: LD_INT 6
15739: EQUAL
15740: PUSH
15741: LD_VAR 0 1
15745: PPUSH
15746: CALL_OW 255
15750: PUSH
15751: LD_INT 6
15753: EQUAL
15754: AND
15755: IFFALSE 15813
// begin for i in tmpSci do
15757: LD_ADDR_VAR 0 2
15761: PUSH
15762: LD_VAR 0 6
15766: PUSH
15767: FOR_IN
15768: IFFALSE 15786
// ComEnterUnit ( i , building ) ;
15770: LD_VAR 0 2
15774: PPUSH
15775: LD_VAR 0 1
15779: PPUSH
15780: CALL_OW 120
15784: GO 15767
15786: POP
15787: POP
// ResAllTechs ( 6 , building , 3 ) ;
15788: LD_INT 6
15790: PPUSH
15791: LD_VAR 0 1
15795: PPUSH
15796: LD_INT 3
15798: PPUSH
15799: CALL 4860 0 3
// ruPLab = building ;
15803: LD_ADDR_EXP 20
15807: PUSH
15808: LD_VAR 0 1
15812: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
15813: LD_VAR 0 1
15817: PPUSH
15818: CALL_OW 266
15822: PUSH
15823: LD_INT 2
15825: EQUAL
15826: PUSH
15827: LD_VAR 0 1
15831: PPUSH
15832: CALL_OW 255
15836: PUSH
15837: LD_INT 6
15839: EQUAL
15840: AND
15841: IFFALSE 15892
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
15843: LD_ADDR_VAR 0 5
15847: PUSH
15848: LD_VAR 0 8
15852: PUSH
15853: LD_INT 1
15855: ARRAY
15856: PPUSH
15857: CALL_OW 313
15861: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
15862: LD_VAR 0 5
15866: PPUSH
15867: CALL_OW 121
// wait ( 0 0$1 ) ;
15871: LD_INT 35
15873: PPUSH
15874: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
15878: LD_VAR 0 5
15882: PPUSH
15883: LD_VAR 0 1
15887: PPUSH
15888: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
15892: LD_VAR 0 1
15896: PPUSH
15897: CALL_OW 266
15901: PUSH
15902: LD_INT 32
15904: EQUAL
15905: PUSH
15906: LD_VAR 0 1
15910: PPUSH
15911: CALL_OW 255
15915: PUSH
15916: LD_INT 6
15918: EQUAL
15919: AND
15920: IFFALSE 15972
// begin ComPlaceWeapon ( building , 42 ) ;
15922: LD_VAR 0 1
15926: PPUSH
15927: LD_INT 42
15929: PPUSH
15930: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
15934: LD_VAR 0 7
15938: PUSH
15939: LD_INT 1
15941: ARRAY
15942: PPUSH
15943: CALL_OW 122
// wait ( 0 0$1 ) ;
15947: LD_INT 35
15949: PPUSH
15950: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
15954: LD_VAR 0 7
15958: PUSH
15959: LD_INT 1
15961: ARRAY
15962: PPUSH
15963: LD_VAR 0 1
15967: PPUSH
15968: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
15972: LD_VAR 0 1
15976: PPUSH
15977: CALL_OW 266
15981: PUSH
15982: LD_INT 31
15984: EQUAL
15985: PUSH
15986: LD_VAR 0 1
15990: PPUSH
15991: CALL_OW 255
15995: PUSH
15996: LD_INT 6
15998: EQUAL
15999: AND
16000: IFFALSE 16066
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16002: LD_VAR 0 7
16006: PUSH
16007: LD_INT 2
16009: ARRAY
16010: PPUSH
16011: CALL_OW 122
// wait ( 0 0$1 ) ;
16015: LD_INT 35
16017: PPUSH
16018: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16022: LD_VAR 0 7
16026: PUSH
16027: LD_INT 2
16029: ARRAY
16030: PPUSH
16031: LD_VAR 0 1
16035: PPUSH
16036: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16040: LD_VAR 0 4
16044: PUSH
16045: LD_INT 1
16047: ARRAY
16048: PPUSH
16049: LD_EXP 19
16053: PPUSH
16054: CALL_OW 120
// baseReadyToBuild = 2 ;
16058: LD_ADDR_EXP 18
16062: PUSH
16063: LD_INT 2
16065: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16066: LD_VAR 0 1
16070: PPUSH
16071: CALL_OW 266
16075: PUSH
16076: LD_INT 32
16078: EQUAL
16079: PUSH
16080: LD_VAR 0 1
16084: PPUSH
16085: CALL_OW 255
16089: PUSH
16090: LD_INT 1
16092: EQUAL
16093: AND
16094: PUSH
16095: LD_EXP 30
16099: PUSH
16100: LD_INT 0
16102: EQUAL
16103: AND
16104: IFFALSE 16349
// begin bunkerDialog = 1 ;
16106: LD_ADDR_EXP 30
16110: PUSH
16111: LD_INT 1
16113: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16114: LD_EXP 11
16118: PPUSH
16119: CALL_OW 302
16123: IFFALSE 16139
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16125: LD_EXP 11
16129: PPUSH
16130: LD_STRING D11-Eng1-1
16132: PPUSH
16133: CALL_OW 88
// end else
16137: GO 16335
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16139: LD_INT 22
16141: PUSH
16142: LD_INT 1
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 21
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 3
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 26
16171: PUSH
16172: LD_INT 1
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: PPUSH
16185: CALL_OW 69
16189: PUSH
16190: LD_EXP 1
16194: PUSH
16195: EMPTY
16196: LIST
16197: PUSH
16198: LD_INT 0
16200: GREATER
16201: DIFF
16202: IFFALSE 16276
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16204: LD_INT 22
16206: PUSH
16207: LD_INT 1
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 21
16216: PUSH
16217: LD_INT 1
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: PUSH
16224: LD_INT 25
16226: PUSH
16227: LD_INT 2
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: LD_INT 26
16236: PUSH
16237: LD_INT 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: PPUSH
16250: CALL_OW 69
16254: PUSH
16255: LD_EXP 1
16259: PUSH
16260: EMPTY
16261: LIST
16262: DIFF
16263: PPUSH
16264: LD_STRING D11-Eng1-1
16266: PPUSH
16267: LD_STRING D11-Eng1-1
16269: PPUSH
16270: CALL 3600 0 3
// end else
16274: GO 16335
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16276: LD_INT 22
16278: PUSH
16279: LD_INT 1
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 21
16288: PUSH
16289: LD_INT 1
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: LD_INT 26
16298: PUSH
16299: LD_INT 1
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: LIST
16310: PPUSH
16311: CALL_OW 69
16315: PUSH
16316: LD_EXP 1
16320: PUSH
16321: EMPTY
16322: LIST
16323: DIFF
16324: PPUSH
16325: LD_STRING D11-Eng1-1
16327: PPUSH
16328: LD_STRING D11-Eng1-1
16330: PPUSH
16331: CALL 3600 0 3
// end ; end ; if energyVDialog = 0 then
16335: LD_EXP 31
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: IFFALSE 16349
// EnergyDialog ;
16345: CALL 3912 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 266
16358: PUSH
16359: LD_INT 29
16361: EQUAL
16362: PUSH
16363: LD_VAR 0 1
16367: PPUSH
16368: CALL_OW 255
16372: PUSH
16373: LD_INT 1
16375: EQUAL
16376: AND
16377: IFFALSE 16387
// buildOil = 1 ;
16379: LD_ADDR_EXP 32
16383: PUSH
16384: LD_INT 1
16386: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
16387: LD_VAR 0 1
16391: PPUSH
16392: CALL_OW 266
16396: PUSH
16397: LD_INT 26
16399: EQUAL
16400: PUSH
16401: LD_VAR 0 1
16405: PPUSH
16406: CALL_OW 255
16410: PUSH
16411: LD_INT 1
16413: EQUAL
16414: AND
16415: IFFALSE 16425
// buildPower = 1 ;
16417: LD_ADDR_EXP 33
16421: PUSH
16422: LD_INT 1
16424: ST_TO_ADDR
// end ;
16425: PPOPN 8
16427: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
16428: LD_VAR 0 1
16432: PPUSH
16433: CALL_OW 266
16437: PUSH
16438: LD_INT 3
16440: EQUAL
16441: PUSH
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 255
16451: PUSH
16452: LD_INT 1
16454: EQUAL
16455: AND
16456: PUSH
16457: LD_EXP 29
16461: PUSH
16462: LD_INT 0
16464: EQUAL
16465: AND
16466: IFFALSE 16782
// begin factoryDialog = 1 ;
16468: LD_ADDR_EXP 29
16472: PUSH
16473: LD_INT 1
16475: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
16476: LD_INT 22
16478: PUSH
16479: LD_INT 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 3
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 30
16498: PUSH
16499: LD_INT 3
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 24
16508: PUSH
16509: LD_INT 1000
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: PPUSH
16522: CALL_OW 69
16526: PUSH
16527: LD_INT 1
16529: ARRAY
16530: PPUSH
16531: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
16535: LD_EXP 1
16539: PPUSH
16540: LD_STRING D9a-JMM-1
16542: PPUSH
16543: CALL_OW 88
// if IsOK ( Campell ) then
16547: LD_EXP 12
16551: PPUSH
16552: CALL_OW 302
16556: IFFALSE 16572
// begin Say ( Campell , D9a-Mech1-1 ) ;
16558: LD_EXP 12
16562: PPUSH
16563: LD_STRING D9a-Mech1-1
16565: PPUSH
16566: CALL_OW 88
// end else
16570: GO 16768
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16572: LD_INT 22
16574: PUSH
16575: LD_INT 1
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: LD_INT 21
16584: PUSH
16585: LD_INT 1
16587: PUSH
16588: EMPTY
16589: LIST
16590: LIST
16591: PUSH
16592: LD_INT 25
16594: PUSH
16595: LD_INT 3
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 26
16604: PUSH
16605: LD_INT 1
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: PPUSH
16618: CALL_OW 69
16622: PUSH
16623: LD_EXP 1
16627: PUSH
16628: EMPTY
16629: LIST
16630: PUSH
16631: LD_INT 0
16633: GREATER
16634: DIFF
16635: IFFALSE 16709
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16637: LD_INT 22
16639: PUSH
16640: LD_INT 1
16642: PUSH
16643: EMPTY
16644: LIST
16645: LIST
16646: PUSH
16647: LD_INT 21
16649: PUSH
16650: LD_INT 1
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: LD_INT 25
16659: PUSH
16660: LD_INT 3
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 26
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: PPUSH
16683: CALL_OW 69
16687: PUSH
16688: LD_EXP 1
16692: PUSH
16693: EMPTY
16694: LIST
16695: DIFF
16696: PPUSH
16697: LD_STRING D9a-Mech1-1
16699: PPUSH
16700: LD_STRING D9a-Mech1-1
16702: PPUSH
16703: CALL 3600 0 3
// end else
16707: GO 16768
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
16709: LD_INT 22
16711: PUSH
16712: LD_INT 1
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 21
16721: PUSH
16722: LD_INT 1
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: PUSH
16729: LD_INT 26
16731: PUSH
16732: LD_INT 1
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: EMPTY
16740: LIST
16741: LIST
16742: LIST
16743: PPUSH
16744: CALL_OW 69
16748: PUSH
16749: LD_EXP 1
16753: PUSH
16754: EMPTY
16755: LIST
16756: DIFF
16757: PPUSH
16758: LD_STRING D9a-Mech1-1
16760: PPUSH
16761: LD_STRING D9a-Mech1-1
16763: PPUSH
16764: CALL 3600 0 3
// end ; end ; if energyVDialog = 0 then
16768: LD_EXP 31
16772: PUSH
16773: LD_INT 0
16775: EQUAL
16776: IFFALSE 16782
// EnergyDialog ;
16778: CALL 3912 0 0
// end ; end ;
16782: PPOPN 1
16784: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
16785: LD_VAR 0 1
16789: PPUSH
16790: CALL_OW 247
16794: PUSH
16795: LD_INT 1
16797: EQUAL
16798: PUSH
16799: LD_VAR 0 1
16803: PPUSH
16804: CALL_OW 255
16808: PUSH
16809: LD_INT 1
16811: EQUAL
16812: AND
16813: IFFALSE 16829
// lostCounter = lostCounter + 1 ;
16815: LD_ADDR_EXP 36
16819: PUSH
16820: LD_EXP 36
16824: PUSH
16825: LD_INT 1
16827: PLUS
16828: ST_TO_ADDR
// end ;
16829: PPOPN 1
16831: END
// on Contact ( side1 , side2 ) do var i , tmp ;
16832: LD_INT 0
16834: PPUSH
16835: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
16836: LD_ADDR_VAR 0 4
16840: PUSH
16841: LD_INT 22
16843: PUSH
16844: LD_INT 1
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 69
16855: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
16856: LD_VAR 0 1
16860: PUSH
16861: LD_INT 1
16863: EQUAL
16864: PUSH
16865: LD_VAR 0 2
16869: PUSH
16870: LD_INT 6
16872: EQUAL
16873: AND
16874: PUSH
16875: LD_EXP 39
16879: PUSH
16880: LD_INT 1
16882: EQUAL
16883: AND
16884: IFFALSE 16939
// begin donaldsonCoopAttack = 0 ;
16886: LD_ADDR_EXP 39
16890: PUSH
16891: LD_INT 0
16893: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
16894: LD_ADDR_VAR 0 3
16898: PUSH
16899: LD_INT 22
16901: PUSH
16902: LD_INT 4
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: PPUSH
16912: CALL_OW 69
16916: PUSH
16917: FOR_IN
16918: IFFALSE 16937
// ComAgressiveMove ( i , 52 , 64 ) ;
16920: LD_VAR 0 3
16924: PPUSH
16925: LD_INT 52
16927: PPUSH
16928: LD_INT 64
16930: PPUSH
16931: CALL_OW 114
16935: GO 16917
16937: POP
16938: POP
// end ; end ;
16939: PPOPN 4
16941: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
16942: LD_VAR 0 1
16946: PPUSH
16947: CALL_OW 264
16951: PUSH
16952: LD_INT 53
16954: EQUAL
16955: IFFALSE 17040
// begin CutTreeInArea ( vehicle , TreesArea ) ;
16957: LD_VAR 0 1
16961: PPUSH
16962: LD_INT 21
16964: PPUSH
16965: CALL 4128 0 2
// uc_side = 3 ;
16969: LD_ADDR_OWVAR 20
16973: PUSH
16974: LD_INT 3
16976: ST_TO_ADDR
// uc_nation = 3 ;
16977: LD_ADDR_OWVAR 21
16981: PUSH
16982: LD_INT 3
16984: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
16985: LD_INT 0
16987: PPUSH
16988: LD_EXP 17
16992: PPUSH
16993: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
16997: CALL_OW 44
17001: PPUSH
17002: LD_VAR 0 2
17006: PPUSH
17007: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_INT 6
17018: PPUSH
17019: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17023: LD_VAR 0 1
17027: PPUSH
17028: CALL_OW 313
17032: PPUSH
17033: LD_INT 6
17035: PPUSH
17036: CALL_OW 235
// end ; end ; end_of_file
17040: PPOPN 2
17042: END
// every 10 10$0 do
17043: GO 17045
17045: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17046: LD_INT 5
17048: PPUSH
17049: LD_INT 3
17051: PPUSH
17052: LD_INT 2
17054: PPUSH
17055: LD_INT 5
17057: PPUSH
17058: CALL_OW 12
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 3
17068: PUSH
17069: LD_INT 3
17071: PUSH
17072: EMPTY
17073: LIST
17074: LIST
17075: LIST
17076: PUSH
17077: LD_OWVAR 67
17081: ARRAY
17082: PLUS
17083: PPUSH
17084: LD_INT 0
17086: PPUSH
17087: LD_INT 0
17089: PPUSH
17090: LD_INT 0
17092: PPUSH
17093: LD_INT 1
17095: PUSH
17096: LD_INT 2
17098: PUSH
17099: LD_INT 3
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: LIST
17106: PUSH
17107: LD_OWVAR 67
17111: ARRAY
17112: PPUSH
17113: LD_EXP 16
17117: PPUSH
17118: LD_EXP 17
17122: PPUSH
17123: CALL_OW 12
17127: PPUSH
17128: LD_INT 4
17130: PPUSH
17131: LD_INT 14
17133: PPUSH
17134: LD_INT 1
17136: PPUSH
17137: LD_INT 2
17139: PPUSH
17140: CALL 5937 0 12
// end ;
17144: END
// every 15 15$0 do
17145: GO 17147
17147: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17148: LD_INT 5
17150: PPUSH
17151: LD_INT 3
17153: PPUSH
17154: LD_INT 3
17156: PPUSH
17157: LD_INT 5
17159: PPUSH
17160: CALL_OW 12
17164: PUSH
17165: LD_INT 2
17167: PUSH
17168: LD_INT 3
17170: PUSH
17171: LD_INT 3
17173: PUSH
17174: EMPTY
17175: LIST
17176: LIST
17177: LIST
17178: PUSH
17179: LD_OWVAR 67
17183: ARRAY
17184: PLUS
17185: PPUSH
17186: LD_INT 0
17188: PPUSH
17189: LD_INT 0
17191: PPUSH
17192: LD_INT 0
17194: PPUSH
17195: LD_INT 2
17197: PUSH
17198: LD_INT 2
17200: PUSH
17201: LD_INT 3
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: LIST
17208: PUSH
17209: LD_OWVAR 67
17213: ARRAY
17214: PPUSH
17215: LD_EXP 16
17219: PPUSH
17220: LD_EXP 17
17224: PPUSH
17225: CALL_OW 12
17229: PPUSH
17230: LD_INT 4
17232: PPUSH
17233: LD_INT 14
17235: PPUSH
17236: LD_INT 1
17238: PPUSH
17239: LD_INT 1
17241: PPUSH
17242: CALL 5937 0 12
// end ;
17246: END
// every 25 25$0 do
17247: GO 17249
17249: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , [ 1 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
17250: LD_INT 5
17252: PPUSH
17253: LD_INT 3
17255: PPUSH
17256: LD_INT 2
17258: PPUSH
17259: LD_INT 3
17261: PPUSH
17262: CALL_OW 12
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: LD_INT 3
17272: PUSH
17273: LD_INT 3
17275: PUSH
17276: EMPTY
17277: LIST
17278: LIST
17279: LIST
17280: PUSH
17281: LD_OWVAR 67
17285: ARRAY
17286: PLUS
17287: PPUSH
17288: LD_INT 0
17290: PPUSH
17291: LD_INT 0
17293: PPUSH
17294: LD_INT 0
17296: PPUSH
17297: LD_INT 1
17299: PUSH
17300: LD_INT 2
17302: PUSH
17303: LD_INT 3
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: LD_OWVAR 67
17315: ARRAY
17316: PPUSH
17317: LD_EXP 16
17321: PPUSH
17322: LD_EXP 17
17326: PPUSH
17327: CALL_OW 12
17331: PPUSH
17332: LD_INT 4
17334: PPUSH
17335: LD_INT 14
17337: PPUSH
17338: LD_INT 1
17340: PPUSH
17341: LD_INT 1
17343: PPUSH
17344: CALL 5937 0 12
// end ;
17348: END
// every 26 26$0 do
17349: GO 17351
17351: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , [ 2 , 2 , 3 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
17352: LD_INT 5
17354: PPUSH
17355: LD_INT 3
17357: PPUSH
17358: LD_INT 1
17360: PPUSH
17361: LD_INT 3
17363: PPUSH
17364: CALL_OW 12
17368: PUSH
17369: LD_INT 1
17371: PUSH
17372: LD_INT 2
17374: PUSH
17375: LD_INT 2
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: PUSH
17383: LD_OWVAR 67
17387: ARRAY
17388: PLUS
17389: PPUSH
17390: LD_INT 0
17392: PPUSH
17393: LD_INT 0
17395: PPUSH
17396: LD_INT 0
17398: PPUSH
17399: LD_INT 2
17401: PUSH
17402: LD_INT 2
17404: PUSH
17405: LD_INT 3
17407: PUSH
17408: EMPTY
17409: LIST
17410: LIST
17411: LIST
17412: PUSH
17413: LD_OWVAR 67
17417: ARRAY
17418: PPUSH
17419: LD_EXP 16
17423: PPUSH
17424: LD_EXP 17
17428: PPUSH
17429: CALL_OW 12
17433: PPUSH
17434: LD_INT 4
17436: PPUSH
17437: LD_INT 14
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_INT 2
17445: PPUSH
17446: CALL 5937 0 12
// end ;
17450: END
// every 25 25$0 do
17451: GO 17453
17453: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
17454: LD_INT 4
17456: PPUSH
17457: LD_INT 5
17459: PPUSH
17460: LD_INT 3
17462: PUSH
17463: LD_INT 4
17465: PUSH
17466: LD_INT 5
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: PUSH
17474: LD_OWVAR 67
17478: ARRAY
17479: PPUSH
17480: LD_EXP 16
17484: PPUSH
17485: LD_EXP 17
17489: PPUSH
17490: CALL_OW 12
17494: PPUSH
17495: LD_INT 3
17497: PPUSH
17498: LD_INT 1
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: LD_INT 42
17506: PUSH
17507: LD_INT 42
17509: PUSH
17510: LD_INT 43
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 42
17520: PUSH
17521: LD_INT 43
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 43
17530: PUSH
17531: LD_INT 43
17533: PUSH
17534: LD_INT 43
17536: PUSH
17537: LD_INT 44
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: LIST
17550: PUSH
17551: LD_OWVAR 67
17555: ARRAY
17556: PPUSH
17557: EMPTY
17558: PPUSH
17559: EMPTY
17560: PPUSH
17561: LD_INT 1
17563: PPUSH
17564: CALL 8845 0 11
// end ; end_of_file
17568: END
// every 0 0$1 trigger startTimer = 1 do
17569: LD_EXP 28
17573: PUSH
17574: LD_INT 1
17576: EQUAL
17577: IFFALSE 17707
17579: GO 17581
17581: DISABLE
// begin enable ;
17582: ENABLE
// if timerStatus = 1 then
17583: LD_EXP 27
17587: PUSH
17588: LD_INT 1
17590: EQUAL
17591: IFFALSE 17624
// begin timeToSupport = timeToSupport - 0 0$01 ;
17593: LD_ADDR_EXP 26
17597: PUSH
17598: LD_EXP 26
17602: PUSH
17603: LD_INT 35
17605: MINUS
17606: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
17607: LD_ADDR_OWVAR 47
17611: PUSH
17612: LD_STRING #Am04-1
17614: PUSH
17615: LD_EXP 26
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: ST_TO_ADDR
// end ; if timerStatus = 2 then
17624: LD_EXP 27
17628: PUSH
17629: LD_INT 2
17631: EQUAL
17632: IFFALSE 17665
// begin timeToSupport = timeToSupport - 0 0$01 ;
17634: LD_ADDR_EXP 26
17638: PUSH
17639: LD_EXP 26
17643: PUSH
17644: LD_INT 35
17646: MINUS
17647: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
17648: LD_ADDR_OWVAR 47
17652: PUSH
17653: LD_STRING #Am04-2
17655: PUSH
17656: LD_EXP 26
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: ST_TO_ADDR
// end ; if timerStatus = 3 then
17665: LD_EXP 27
17669: PUSH
17670: LD_INT 3
17672: EQUAL
17673: IFFALSE 17689
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
17675: LD_ADDR_EXP 25
17679: PUSH
17680: LD_EXP 25
17684: PUSH
17685: LD_INT 35
17687: MINUS
17688: ST_TO_ADDR
// end ; if timerStatus = 4 then
17689: LD_EXP 27
17693: PUSH
17694: LD_INT 4
17696: EQUAL
17697: IFFALSE 17707
// begin display_strings =  ;
17699: LD_ADDR_OWVAR 47
17703: PUSH
17704: LD_STRING 
17706: ST_TO_ADDR
// end ; end ; end_of_file
17707: END
// every 0 0$1 trigger IsDead ( JMM ) do
17708: LD_EXP 1
17712: PPUSH
17713: CALL_OW 301
17717: IFFALSE 17729
17719: GO 17721
17721: DISABLE
// YouLost ( JMM ) ;
17722: LD_STRING JMM
17724: PPUSH
17725: CALL_OW 104
17729: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
17730: LD_INT 4
17732: PPUSH
17733: CALL_OW 301
17737: IFFALSE 17749
17739: GO 17741
17741: DISABLE
// YouLost ( Base ) ; end_of_file
17742: LD_STRING Base
17744: PPUSH
17745: CALL_OW 104
17749: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
17750: LD_EXP 15
17754: PPUSH
17755: CALL_OW 301
17759: IFFALSE 18141
17761: GO 17763
17763: DISABLE
17764: LD_INT 0
17766: PPUSH
// begin AIEnable = 0 ;
17767: LD_ADDR_EXP 35
17771: PUSH
17772: LD_INT 0
17774: ST_TO_ADDR
// escapeAvalaible = 1 ;
17775: LD_ADDR_EXP 38
17779: PUSH
17780: LD_INT 1
17782: ST_TO_ADDR
// InGameOn ;
17783: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
17787: LD_INT 3
17789: PPUSH
17790: LD_INT 1
17792: PPUSH
17793: LD_INT 1
17795: PPUSH
17796: LD_INT 0
17798: PPUSH
17799: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
17803: LD_INT 6
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: LD_INT 1
17811: PPUSH
17812: LD_INT 0
17814: PPUSH
17815: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
17819: LD_INT 5
17821: PPUSH
17822: LD_INT 1
17824: PPUSH
17825: LD_INT 1
17827: PPUSH
17828: LD_INT 0
17830: PPUSH
17831: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
17835: LD_INT 3
17837: PPUSH
17838: LD_INT 1
17840: PPUSH
17841: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
17845: LD_INT 97
17847: PPUSH
17848: LD_INT 91
17850: PPUSH
17851: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
17855: LD_INT 22
17857: PUSH
17858: LD_INT 3
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 21
17867: PUSH
17868: LD_INT 1
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 69
17883: PPUSH
17884: CALL_OW 121
// wait ( 0 0$01 ) ;
17888: LD_INT 35
17890: PPUSH
17891: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17895: LD_INT 22
17897: PUSH
17898: LD_INT 3
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 21
17907: PUSH
17908: LD_INT 1
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: EMPTY
17916: LIST
17917: LIST
17918: PPUSH
17919: CALL_OW 69
17923: PPUSH
17924: LD_INT 124
17926: PPUSH
17927: LD_INT 98
17929: PPUSH
17930: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
17934: LD_INT 22
17936: PUSH
17937: LD_INT 5
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 21
17946: PUSH
17947: LD_INT 1
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: PUSH
17954: EMPTY
17955: LIST
17956: LIST
17957: PPUSH
17958: CALL_OW 69
17962: PPUSH
17963: CALL_OW 121
// wait ( 0 0$01 ) ;
17967: LD_INT 35
17969: PPUSH
17970: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
17974: LD_INT 22
17976: PUSH
17977: LD_INT 5
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 21
17986: PUSH
17987: LD_INT 1
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PPUSH
17998: CALL_OW 69
18002: PPUSH
18003: LD_INT 124
18005: PPUSH
18006: LD_INT 98
18008: PPUSH
18009: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
18013: LD_INT 22
18015: PUSH
18016: LD_INT 6
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PUSH
18023: LD_INT 21
18025: PUSH
18026: LD_INT 1
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PPUSH
18037: CALL_OW 69
18041: PPUSH
18042: CALL_OW 121
// wait ( 0 0$01 ) ;
18046: LD_INT 35
18048: PPUSH
18049: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18053: LD_INT 22
18055: PUSH
18056: LD_INT 6
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 21
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: EMPTY
18074: LIST
18075: LIST
18076: PPUSH
18077: CALL_OW 69
18081: PPUSH
18082: LD_INT 124
18084: PPUSH
18085: LD_INT 98
18087: PPUSH
18088: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
18092: LD_INT 22
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: LD_INT 21
18104: PUSH
18105: LD_INT 1
18107: PUSH
18108: EMPTY
18109: LIST
18110: LIST
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PPUSH
18116: CALL_OW 69
18120: PPUSH
18121: LD_INT 124
18123: PPUSH
18124: LD_INT 98
18126: PPUSH
18127: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
18131: LD_INT 124
18133: PPUSH
18134: LD_INT 98
18136: PPUSH
18137: CALL_OW 84
// end ;
18141: PPOPN 1
18143: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
18144: LD_INT 23
18146: PUSH
18147: LD_INT 3
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 24
18166: PUSH
18167: LD_INT 250
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: PUSH
18184: LD_INT 0
18186: EQUAL
18187: IFFALSE 18196
18189: GO 18191
18191: DISABLE
// FinishMission ;
18192: CALL 18367 0 0
18196: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
18197: LD_EXP 38
18201: PUSH
18202: LD_INT 1
18204: EQUAL
18205: IFFALSE 18364
18207: GO 18209
18209: DISABLE
18210: LD_INT 0
18212: PPUSH
// begin enable ;
18213: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
18214: LD_ADDR_VAR 0 1
18218: PUSH
18219: LD_INT 22
18221: PUSH
18222: LD_INT 3
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PPUSH
18229: CALL_OW 69
18233: PUSH
18234: FOR_IN
18235: IFFALSE 18262
// if IsInArea ( i , RussianEscape ) then
18237: LD_VAR 0 1
18241: PPUSH
18242: LD_INT 5
18244: PPUSH
18245: CALL_OW 308
18249: IFFALSE 18260
// RemoveUnit ( i ) ;
18251: LD_VAR 0 1
18255: PPUSH
18256: CALL_OW 64
18260: GO 18234
18262: POP
18263: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
18264: LD_ADDR_VAR 0 1
18268: PUSH
18269: LD_INT 22
18271: PUSH
18272: LD_INT 5
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PPUSH
18279: CALL_OW 69
18283: PUSH
18284: FOR_IN
18285: IFFALSE 18312
// if IsInArea ( i , RussianEscape ) then
18287: LD_VAR 0 1
18291: PPUSH
18292: LD_INT 5
18294: PPUSH
18295: CALL_OW 308
18299: IFFALSE 18310
// RemoveUnit ( i ) ;
18301: LD_VAR 0 1
18305: PPUSH
18306: CALL_OW 64
18310: GO 18284
18312: POP
18313: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
18314: LD_ADDR_VAR 0 1
18318: PUSH
18319: LD_INT 22
18321: PUSH
18322: LD_INT 6
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: PUSH
18334: FOR_IN
18335: IFFALSE 18362
// if IsInArea ( i , RussianEscape ) then
18337: LD_VAR 0 1
18341: PPUSH
18342: LD_INT 5
18344: PPUSH
18345: CALL_OW 308
18349: IFFALSE 18360
// RemoveUnit ( i ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: CALL_OW 64
18360: GO 18334
18362: POP
18363: POP
// end ;
18364: PPOPN 1
18366: END
// export function FinishMission ; var tmp ; begin
18367: LD_INT 0
18369: PPUSH
18370: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
18371: LD_INT 69
18373: PPUSH
18374: LD_INT 1
18376: PPUSH
18377: CALL_OW 321
18381: PPUSH
18382: LD_STRING GatlingInGamma
18384: PPUSH
18385: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
18389: LD_EXP 32
18393: PUSH
18394: LD_INT 1
18396: EQUAL
18397: PUSH
18398: LD_EXP 33
18402: PUSH
18403: LD_INT 1
18405: EQUAL
18406: AND
18407: IFFALSE 18421
// begin AddMedal ( oil , 1 ) ;
18409: LD_STRING oil
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: CALL_OW 101
// end else
18419: GO 18514
// begin if buildOil = 1 and buildPower = 0 then
18421: LD_EXP 32
18425: PUSH
18426: LD_INT 1
18428: EQUAL
18429: PUSH
18430: LD_EXP 33
18434: PUSH
18435: LD_INT 0
18437: EQUAL
18438: AND
18439: IFFALSE 18452
// AddMedal ( oil , - 1 ) ;
18441: LD_STRING oil
18443: PPUSH
18444: LD_INT 1
18446: NEG
18447: PPUSH
18448: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
18452: LD_EXP 32
18456: PUSH
18457: LD_INT 0
18459: EQUAL
18460: PUSH
18461: LD_EXP 33
18465: PUSH
18466: LD_INT 1
18468: EQUAL
18469: AND
18470: IFFALSE 18483
// AddMedal ( oil , - 2 ) ;
18472: LD_STRING oil
18474: PPUSH
18475: LD_INT 2
18477: NEG
18478: PPUSH
18479: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
18483: LD_EXP 32
18487: PUSH
18488: LD_INT 0
18490: EQUAL
18491: PUSH
18492: LD_EXP 33
18496: PUSH
18497: LD_INT 0
18499: EQUAL
18500: AND
18501: IFFALSE 18514
// AddMedal ( oil , - 3 ) ;
18503: LD_STRING oil
18505: PPUSH
18506: LD_INT 3
18508: NEG
18509: PPUSH
18510: CALL_OW 101
// end ; if lostCounter < 3 then
18514: LD_EXP 36
18518: PUSH
18519: LD_INT 3
18521: LESS
18522: IFFALSE 18536
// begin AddMedal ( deaths , 1 ) ;
18524: LD_STRING deaths
18526: PPUSH
18527: LD_INT 1
18529: PPUSH
18530: CALL_OW 101
// end else
18534: GO 18547
// begin AddMedal ( deaths , - 1 ) ;
18536: LD_STRING deaths
18538: PPUSH
18539: LD_INT 1
18541: NEG
18542: PPUSH
18543: CALL_OW 101
// end ; if honor = 1 then
18547: LD_EXP 37
18551: PUSH
18552: LD_INT 1
18554: EQUAL
18555: IFFALSE 18569
// begin AddMedal ( honour , 1 ) ;
18557: LD_STRING honour
18559: PPUSH
18560: LD_INT 1
18562: PPUSH
18563: CALL_OW 101
// end else
18567: GO 18580
// begin AddMedal ( honour , - 1 ) ;
18569: LD_STRING honour
18571: PPUSH
18572: LD_INT 1
18574: NEG
18575: PPUSH
18576: CALL_OW 101
// end ; GiveMedals ( Main ) ;
18580: LD_STRING Main
18582: PPUSH
18583: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
18587: LD_INT 22
18589: PUSH
18590: LD_INT 1
18592: PUSH
18593: EMPTY
18594: LIST
18595: LIST
18596: PUSH
18597: LD_INT 23
18599: PUSH
18600: LD_INT 1
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: PUSH
18607: LD_INT 21
18609: PUSH
18610: LD_INT 1
18612: PUSH
18613: EMPTY
18614: LIST
18615: LIST
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: LIST
18621: PPUSH
18622: CALL_OW 69
18626: PPUSH
18627: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18631: LD_EXP 1
18635: PPUSH
18636: LD_EXP 42
18640: PUSH
18641: LD_STRING JMM
18643: STR
18644: PPUSH
18645: CALL_OW 38
// if IsOK ( Bobby ) then
18649: LD_EXP 2
18653: PPUSH
18654: CALL_OW 302
18658: IFFALSE 18678
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18660: LD_EXP 2
18664: PPUSH
18665: LD_EXP 42
18669: PUSH
18670: LD_STRING Bobby
18672: STR
18673: PPUSH
18674: CALL_OW 38
// if IsOK ( Cyrus ) then
18678: LD_EXP 3
18682: PPUSH
18683: CALL_OW 302
18687: IFFALSE 18707
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18689: LD_EXP 3
18693: PPUSH
18694: LD_EXP 42
18698: PUSH
18699: LD_STRING Cyrus
18701: STR
18702: PPUSH
18703: CALL_OW 38
// if IsOK ( Lisa ) then
18707: LD_EXP 4
18711: PPUSH
18712: CALL_OW 302
18716: IFFALSE 18736
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18718: LD_EXP 4
18722: PPUSH
18723: LD_EXP 42
18727: PUSH
18728: LD_STRING Lisa
18730: STR
18731: PPUSH
18732: CALL_OW 38
// if IsOK ( Brown ) then
18736: LD_EXP 7
18740: PPUSH
18741: CALL_OW 302
18745: IFFALSE 18765
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
18747: LD_EXP 7
18751: PPUSH
18752: LD_EXP 42
18756: PUSH
18757: LD_STRING Brown
18759: STR
18760: PPUSH
18761: CALL_OW 38
// if IsOK ( Donaldson ) then
18765: LD_EXP 13
18769: PPUSH
18770: CALL_OW 302
18774: IFFALSE 18794
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18776: LD_EXP 13
18780: PPUSH
18781: LD_EXP 42
18785: PUSH
18786: LD_STRING Donaldson
18788: STR
18789: PPUSH
18790: CALL_OW 38
// if IsOK ( Frank ) then
18794: LD_EXP 5
18798: PPUSH
18799: CALL_OW 302
18803: IFFALSE 18823
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
18805: LD_EXP 5
18809: PPUSH
18810: LD_EXP 42
18814: PUSH
18815: LD_STRING Frank
18817: STR
18818: PPUSH
18819: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
18823: LD_INT 50
18825: PUSH
18826: EMPTY
18827: LIST
18828: PUSH
18829: LD_INT 22
18831: PUSH
18832: LD_INT 1
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: PUSH
18839: LD_INT 21
18841: PUSH
18842: LD_INT 1
18844: PUSH
18845: EMPTY
18846: LIST
18847: LIST
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: LIST
18853: PPUSH
18854: CALL_OW 69
18858: PUSH
18859: LD_EXP 1
18863: PUSH
18864: LD_EXP 2
18868: PUSH
18869: LD_EXP 3
18873: PUSH
18874: LD_EXP 4
18878: PUSH
18879: LD_EXP 7
18883: PUSH
18884: LD_EXP 13
18888: PUSH
18889: LD_EXP 5
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: DIFF
18903: PPUSH
18904: LD_STRING 04_other_survivors
18906: PPUSH
18907: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
18911: LD_INT 22
18913: PPUSH
18914: CALL 18927 0 1
// YouWin ;
18918: CALL_OW 103
// end ;
18922: LD_VAR 0 1
18926: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
18927: LD_INT 0
18929: PPUSH
18930: PPUSH
18931: PPUSH
18932: PPUSH
// gammaBase = [ ] ;
18933: LD_ADDR_VAR 0 4
18937: PUSH
18938: EMPTY
18939: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
18940: LD_ADDR_VAR 0 5
18944: PUSH
18945: LD_VAR 0 1
18949: PPUSH
18950: LD_INT 22
18952: PUSH
18953: LD_INT 1
18955: PUSH
18956: EMPTY
18957: LIST
18958: LIST
18959: PUSH
18960: LD_INT 21
18962: PUSH
18963: LD_INT 3
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PUSH
18970: LD_INT 50
18972: PUSH
18973: EMPTY
18974: LIST
18975: PUSH
18976: EMPTY
18977: LIST
18978: LIST
18979: LIST
18980: PPUSH
18981: CALL_OW 70
18985: ST_TO_ADDR
// for i in buildings do
18986: LD_ADDR_VAR 0 3
18990: PUSH
18991: LD_VAR 0 5
18995: PUSH
18996: FOR_IN
18997: IFFALSE 19334
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
18999: LD_VAR 0 3
19003: PPUSH
19004: CALL_OW 266
19008: PUSH
19009: LD_INT 6
19011: PUSH
19012: LD_INT 7
19014: PUSH
19015: LD_INT 8
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: LIST
19022: IN
19023: IFFALSE 19137
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
19025: LD_ADDR_VAR 0 4
19029: PUSH
19030: LD_VAR 0 4
19034: PUSH
19035: LD_VAR 0 3
19039: PPUSH
19040: CALL_OW 266
19044: PUSH
19045: LD_VAR 0 3
19049: PPUSH
19050: CALL_OW 250
19054: PUSH
19055: LD_VAR 0 3
19059: PPUSH
19060: CALL_OW 251
19064: PUSH
19065: LD_VAR 0 3
19069: PPUSH
19070: CALL_OW 254
19074: PUSH
19075: LD_VAR 0 3
19079: PPUSH
19080: CALL_OW 267
19084: PUSH
19085: LD_VAR 0 3
19089: PPUSH
19090: CALL_OW 248
19094: PUSH
19095: LD_VAR 0 3
19099: PPUSH
19100: LD_INT 1
19102: PPUSH
19103: CALL_OW 268
19107: PUSH
19108: LD_VAR 0 3
19112: PPUSH
19113: LD_INT 2
19115: PPUSH
19116: CALL_OW 268
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: PUSH
19131: EMPTY
19132: LIST
19133: ADD
19134: ST_TO_ADDR
19135: GO 19332
// if GetBType ( i ) in [ b_bunker ] then
19137: LD_VAR 0 3
19141: PPUSH
19142: CALL_OW 266
19146: PUSH
19147: LD_INT 32
19149: PUSH
19150: EMPTY
19151: LIST
19152: IN
19153: IFFALSE 19250
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
19155: LD_ADDR_VAR 0 4
19159: PUSH
19160: LD_VAR 0 4
19164: PUSH
19165: LD_VAR 0 3
19169: PPUSH
19170: CALL_OW 266
19174: PUSH
19175: LD_VAR 0 3
19179: PPUSH
19180: CALL_OW 250
19184: PUSH
19185: LD_VAR 0 3
19189: PPUSH
19190: CALL_OW 251
19194: PUSH
19195: LD_VAR 0 3
19199: PPUSH
19200: CALL_OW 254
19204: PUSH
19205: LD_VAR 0 3
19209: PPUSH
19210: CALL_OW 267
19214: PUSH
19215: LD_VAR 0 3
19219: PPUSH
19220: CALL_OW 248
19224: PUSH
19225: LD_VAR 0 3
19229: PPUSH
19230: CALL_OW 269
19234: PUSH
19235: EMPTY
19236: LIST
19237: LIST
19238: LIST
19239: LIST
19240: LIST
19241: LIST
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: ADD
19247: ST_TO_ADDR
19248: GO 19332
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
19250: LD_ADDR_VAR 0 4
19254: PUSH
19255: LD_VAR 0 4
19259: PUSH
19260: LD_VAR 0 3
19264: PPUSH
19265: CALL_OW 266
19269: PUSH
19270: LD_VAR 0 3
19274: PPUSH
19275: CALL_OW 250
19279: PUSH
19280: LD_VAR 0 3
19284: PPUSH
19285: CALL_OW 251
19289: PUSH
19290: LD_VAR 0 3
19294: PPUSH
19295: CALL_OW 254
19299: PUSH
19300: LD_VAR 0 3
19304: PPUSH
19305: CALL_OW 267
19309: PUSH
19310: LD_VAR 0 3
19314: PPUSH
19315: CALL_OW 248
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: PUSH
19328: EMPTY
19329: LIST
19330: ADD
19331: ST_TO_ADDR
// end ;
19332: GO 18996
19334: POP
19335: POP
// SaveVariable ( gammaBase , GammaBase ) ;
19336: LD_VAR 0 4
19340: PPUSH
19341: LD_STRING GammaBase
19343: PPUSH
19344: CALL_OW 39
// end ; end_of_file
19348: LD_VAR 0 2
19352: RET
// every 1 1$15 do
19353: GO 19355
19355: DISABLE
// begin if supply <= 13 and supply > 7 then
19356: LD_EXP 34
19360: PUSH
19361: LD_INT 13
19363: LESSEQUAL
19364: PUSH
19365: LD_EXP 34
19369: PUSH
19370: LD_INT 7
19372: GREATER
19373: AND
19374: IFFALSE 19397
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
19376: LD_INT 3
19378: PPUSH
19379: LD_INT 5
19381: PPUSH
19382: CALL_OW 12
19386: PPUSH
19387: LD_INT 18
19389: PPUSH
19390: LD_INT 1
19392: PPUSH
19393: CALL_OW 55
// if supply <= 7 and supply > 4 then
19397: LD_EXP 34
19401: PUSH
19402: LD_INT 7
19404: LESSEQUAL
19405: PUSH
19406: LD_EXP 34
19410: PUSH
19411: LD_INT 4
19413: GREATER
19414: AND
19415: IFFALSE 19438
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
19417: LD_INT 3
19419: PPUSH
19420: LD_INT 5
19422: PPUSH
19423: CALL_OW 12
19427: PPUSH
19428: LD_INT 19
19430: PPUSH
19431: LD_INT 1
19433: PPUSH
19434: CALL_OW 55
// if supply <= 4 and supply > 0 then
19438: LD_EXP 34
19442: PUSH
19443: LD_INT 4
19445: LESSEQUAL
19446: PUSH
19447: LD_EXP 34
19451: PUSH
19452: LD_INT 0
19454: GREATER
19455: AND
19456: IFFALSE 19479
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
19458: LD_INT 3
19460: PPUSH
19461: LD_INT 5
19463: PPUSH
19464: CALL_OW 12
19468: PPUSH
19469: LD_INT 20
19471: PPUSH
19472: LD_INT 1
19474: PPUSH
19475: CALL_OW 55
// if supply > 0 then
19479: LD_EXP 34
19483: PUSH
19484: LD_INT 0
19486: GREATER
19487: IFFALSE 19504
// begin supply = supply - 1 ;
19489: LD_ADDR_EXP 34
19493: PUSH
19494: LD_EXP 34
19498: PUSH
19499: LD_INT 1
19501: MINUS
19502: ST_TO_ADDR
// enable ;
19503: ENABLE
// end ; end ;
19504: END
