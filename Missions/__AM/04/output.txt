// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4283 0 0
// PrepareRussianBase ;
 241: CALL 2582 0 0
// PrepareRussianCommander ;
 245: CALL 2533 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3818 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3818 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3818 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3818 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3818 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3818 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3818 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3818 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3818 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3818 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3818 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3818 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3818 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3818 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1082: LD_EXP 5
1086: PPUSH
1087: LD_INT 10
1089: PPUSH
1090: LD_INT 0
1092: PPUSH
1093: CALL_OW 49
// uc_nation = 1 ;
1097: LD_ADDR_OWVAR 21
1101: PUSH
1102: LD_INT 1
1104: ST_TO_ADDR
// uc_side = 4 ;
1105: LD_ADDR_OWVAR 20
1109: PUSH
1110: LD_INT 4
1112: ST_TO_ADDR
// hc_class := 3 ;
1113: LD_ADDR_OWVAR 28
1117: PUSH
1118: LD_INT 3
1120: ST_TO_ADDR
// hc_sex := sex_male ;
1121: LD_ADDR_OWVAR 27
1125: PUSH
1126: LD_INT 1
1128: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1129: LD_ADDR_OWVAR 33
1133: PUSH
1134: LD_STRING SecondCharsGal
1136: ST_TO_ADDR
// hc_face_number := 53 ;
1137: LD_ADDR_OWVAR 34
1141: PUSH
1142: LD_INT 53
1144: ST_TO_ADDR
// hc_name := Freddie Warner ;
1145: LD_ADDR_OWVAR 26
1149: PUSH
1150: LD_STRING Freddie Warner
1152: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1153: LD_ADDR_OWVAR 29
1157: PUSH
1158: LD_INT 8
1160: PUSH
1161: LD_INT 11
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1168: LD_ADDR_OWVAR 30
1172: PUSH
1173: LD_INT 0
1175: PUSH
1176: LD_INT 0
1178: PUSH
1179: LD_INT 1
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: EMPTY
1186: LIST
1187: LIST
1188: LIST
1189: LIST
1190: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1191: LD_ADDR_OWVAR 31
1195: PUSH
1196: LD_INT 1
1198: PUSH
1199: LD_INT 0
1201: PUSH
1202: LD_INT 3
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: EMPTY
1209: LIST
1210: LIST
1211: LIST
1212: LIST
1213: ST_TO_ADDR
// un = CreateHuman ;
1214: LD_ADDR_VAR 0 3
1218: PUSH
1219: CALL_OW 44
1223: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1224: LD_VAR 0 3
1228: PPUSH
1229: LD_INT 10
1231: PPUSH
1232: LD_INT 0
1234: PPUSH
1235: CALL_OW 49
// hc_class := 1 ;
1239: LD_ADDR_OWVAR 28
1243: PUSH
1244: LD_INT 1
1246: ST_TO_ADDR
// hc_sex := sex_male ;
1247: LD_ADDR_OWVAR 27
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1255: LD_ADDR_OWVAR 33
1259: PUSH
1260: LD_STRING SecondCharsGal
1262: ST_TO_ADDR
// hc_face_number := 56 ;
1263: LD_ADDR_OWVAR 34
1267: PUSH
1268: LD_INT 56
1270: ST_TO_ADDR
// hc_name := Mel Brennan ;
1271: LD_ADDR_OWVAR 26
1275: PUSH
1276: LD_STRING Mel Brennan
1278: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1279: LD_ADDR_OWVAR 29
1283: PUSH
1284: LD_INT 12
1286: PUSH
1287: LD_INT 11
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1294: LD_ADDR_OWVAR 30
1298: PUSH
1299: LD_INT 1
1301: PUSH
1302: LD_INT 1
1304: PUSH
1305: LD_INT 0
1307: PUSH
1308: LD_INT 0
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: LIST
1315: LIST
1316: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1317: LD_ADDR_OWVAR 31
1321: PUSH
1322: LD_INT 2
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: LD_INT 1
1330: PUSH
1331: LD_INT 0
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: LIST
1338: LIST
1339: ST_TO_ADDR
// un = CreateHuman ;
1340: LD_ADDR_VAR 0 3
1344: PUSH
1345: CALL_OW 44
1349: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1350: LD_VAR 0 3
1354: PPUSH
1355: LD_INT 10
1357: PPUSH
1358: LD_INT 0
1360: PPUSH
1361: CALL_OW 49
// hc_class := 1 ;
1365: LD_ADDR_OWVAR 28
1369: PUSH
1370: LD_INT 1
1372: ST_TO_ADDR
// hc_sex := sex_male ;
1373: LD_ADDR_OWVAR 27
1377: PUSH
1378: LD_INT 1
1380: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1381: LD_ADDR_OWVAR 33
1385: PUSH
1386: LD_STRING AmGalRemake
1388: ST_TO_ADDR
// hc_face_number := 5 ;
1389: LD_ADDR_OWVAR 34
1393: PUSH
1394: LD_INT 5
1396: ST_TO_ADDR
// hc_name := Bob Joplin ;
1397: LD_ADDR_OWVAR 26
1401: PUSH
1402: LD_STRING Bob Joplin
1404: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1405: LD_ADDR_OWVAR 29
1409: PUSH
1410: LD_INT 10
1412: PUSH
1413: LD_INT 11
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1420: LD_ADDR_OWVAR 30
1424: PUSH
1425: LD_INT 0
1427: PUSH
1428: LD_INT 1
1430: PUSH
1431: LD_INT 1
1433: PUSH
1434: LD_INT 0
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: LIST
1441: LIST
1442: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1443: LD_ADDR_OWVAR 31
1447: PUSH
1448: LD_INT 3
1450: PUSH
1451: LD_INT 1
1453: PUSH
1454: LD_INT 1
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: LIST
1464: LIST
1465: ST_TO_ADDR
// un = CreateHuman ;
1466: LD_ADDR_VAR 0 3
1470: PUSH
1471: CALL_OW 44
1475: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1476: LD_VAR 0 3
1480: PPUSH
1481: LD_INT 10
1483: PPUSH
1484: LD_INT 0
1486: PPUSH
1487: CALL_OW 49
// hc_class := 3 ;
1491: LD_ADDR_OWVAR 28
1495: PUSH
1496: LD_INT 3
1498: ST_TO_ADDR
// hc_sex := sex_female ;
1499: LD_ADDR_OWVAR 27
1503: PUSH
1504: LD_INT 2
1506: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1507: LD_ADDR_OWVAR 33
1511: PUSH
1512: LD_STRING AmGalRemake
1514: ST_TO_ADDR
// hc_face_number := 8 ;
1515: LD_ADDR_OWVAR 34
1519: PUSH
1520: LD_INT 8
1522: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1523: LD_ADDR_OWVAR 26
1527: PUSH
1528: LD_STRING Elizabeth Whitney
1530: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1531: LD_ADDR_OWVAR 29
1535: PUSH
1536: LD_INT 9
1538: PUSH
1539: LD_INT 11
1541: PUSH
1542: EMPTY
1543: LIST
1544: LIST
1545: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1546: LD_ADDR_OWVAR 30
1550: PUSH
1551: LD_INT 0
1553: PUSH
1554: LD_INT 0
1556: PUSH
1557: LD_INT 2
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: EMPTY
1564: LIST
1565: LIST
1566: LIST
1567: LIST
1568: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1569: LD_ADDR_OWVAR 31
1573: PUSH
1574: LD_INT 2
1576: PUSH
1577: LD_INT 2
1579: PUSH
1580: LD_INT 4
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: EMPTY
1587: LIST
1588: LIST
1589: LIST
1590: LIST
1591: ST_TO_ADDR
// un = CreateHuman ;
1592: LD_ADDR_VAR 0 3
1596: PUSH
1597: CALL_OW 44
1601: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1602: LD_VAR 0 3
1606: PPUSH
1607: LD_INT 10
1609: PPUSH
1610: LD_INT 0
1612: PPUSH
1613: CALL_OW 49
// InitHc ;
1617: CALL_OW 19
// end ;
1621: LD_VAR 0 1
1625: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1626: LD_INT 0
1628: PPUSH
1629: PPUSH
1630: PPUSH
// uc_nation = 1 ;
1631: LD_ADDR_OWVAR 21
1635: PUSH
1636: LD_INT 1
1638: ST_TO_ADDR
// uc_side = 1 ;
1639: LD_ADDR_OWVAR 20
1643: PUSH
1644: LD_INT 1
1646: ST_TO_ADDR
// hc_class := 1 ;
1647: LD_ADDR_OWVAR 28
1651: PUSH
1652: LD_INT 1
1654: ST_TO_ADDR
// hc_sex := sex_male ;
1655: LD_ADDR_OWVAR 27
1659: PUSH
1660: LD_INT 1
1662: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1663: LD_ADDR_OWVAR 33
1667: PUSH
1668: LD_STRING SecondCharsGal
1670: ST_TO_ADDR
// hc_face_number := 59 ;
1671: LD_ADDR_OWVAR 34
1675: PUSH
1676: LD_INT 59
1678: ST_TO_ADDR
// hc_name := Max Gray ;
1679: LD_ADDR_OWVAR 26
1683: PUSH
1684: LD_STRING Max Gray
1686: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1687: LD_ADDR_OWVAR 29
1691: PUSH
1692: LD_INT 9
1694: PUSH
1695: LD_INT 11
1697: PUSH
1698: EMPTY
1699: LIST
1700: LIST
1701: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1702: LD_ADDR_OWVAR 30
1706: PUSH
1707: LD_INT 1
1709: PUSH
1710: LD_INT 0
1712: PUSH
1713: LD_INT 0
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: EMPTY
1720: LIST
1721: LIST
1722: LIST
1723: LIST
1724: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1725: LD_ADDR_OWVAR 31
1729: PUSH
1730: LD_INT 2
1732: PUSH
1733: LD_INT 1
1735: PUSH
1736: LD_INT 1
1738: PUSH
1739: LD_INT 0
1741: PUSH
1742: EMPTY
1743: LIST
1744: LIST
1745: LIST
1746: LIST
1747: ST_TO_ADDR
// un = CreateHuman ;
1748: LD_ADDR_VAR 0 4
1752: PUSH
1753: CALL_OW 44
1757: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1758: LD_VAR 0 4
1762: PPUSH
1763: LD_INT 11
1765: PPUSH
1766: LD_INT 0
1768: PPUSH
1769: CALL_OW 49
// hc_class := 1 ;
1773: LD_ADDR_OWVAR 28
1777: PUSH
1778: LD_INT 1
1780: ST_TO_ADDR
// hc_sex := sex_male ;
1781: LD_ADDR_OWVAR 27
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1789: LD_ADDR_OWVAR 33
1793: PUSH
1794: LD_STRING SecondCharsGal
1796: ST_TO_ADDR
// hc_face_number := 54 ;
1797: LD_ADDR_OWVAR 34
1801: PUSH
1802: LD_INT 54
1804: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1805: LD_ADDR_OWVAR 26
1809: PUSH
1810: LD_STRING Luigi Ghbellin
1812: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1813: LD_ADDR_OWVAR 29
1817: PUSH
1818: LD_INT 11
1820: PUSH
1821: LD_INT 11
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1828: LD_ADDR_OWVAR 30
1832: PUSH
1833: LD_INT 1
1835: PUSH
1836: LD_INT 0
1838: PUSH
1839: LD_INT 0
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1851: LD_ADDR_OWVAR 31
1855: PUSH
1856: LD_INT 1
1858: PUSH
1859: LD_INT 0
1861: PUSH
1862: LD_INT 0
1864: PUSH
1865: LD_INT 1
1867: PUSH
1868: EMPTY
1869: LIST
1870: LIST
1871: LIST
1872: LIST
1873: ST_TO_ADDR
// un = CreateHuman ;
1874: LD_ADDR_VAR 0 4
1878: PUSH
1879: CALL_OW 44
1883: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 11
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 49
// hc_class := 3 ;
1899: LD_ADDR_OWVAR 28
1903: PUSH
1904: LD_INT 3
1906: ST_TO_ADDR
// hc_sex := sex_male ;
1907: LD_ADDR_OWVAR 27
1911: PUSH
1912: LD_INT 1
1914: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1915: LD_ADDR_OWVAR 33
1919: PUSH
1920: LD_STRING AmGalRemake
1922: ST_TO_ADDR
// hc_face_number := 6 ;
1923: LD_ADDR_OWVAR 34
1927: PUSH
1928: LD_INT 6
1930: ST_TO_ADDR
// hc_name := Leon Carter ;
1931: LD_ADDR_OWVAR 26
1935: PUSH
1936: LD_STRING Leon Carter
1938: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1939: LD_ADDR_OWVAR 29
1943: PUSH
1944: LD_INT 10
1946: PUSH
1947: LD_INT 9
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1954: LD_ADDR_OWVAR 30
1958: PUSH
1959: LD_INT 0
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 1
1967: PUSH
1968: LD_INT 0
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1977: LD_ADDR_OWVAR 31
1981: PUSH
1982: LD_INT 0
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: LD_INT 0
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: ST_TO_ADDR
// un = CreateHuman ;
2000: LD_ADDR_VAR 0 4
2004: PUSH
2005: CALL_OW 44
2009: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2010: LD_VAR 0 4
2014: PPUSH
2015: LD_INT 11
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// if count = 4 then
2025: LD_VAR 0 1
2029: PUSH
2030: LD_INT 4
2032: EQUAL
2033: IFFALSE 2161
// begin hc_class := 1 ;
2035: LD_ADDR_OWVAR 28
2039: PUSH
2040: LD_INT 1
2042: ST_TO_ADDR
// hc_sex := sex_male ;
2043: LD_ADDR_OWVAR 27
2047: PUSH
2048: LD_INT 1
2050: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2051: LD_ADDR_OWVAR 33
2055: PUSH
2056: LD_STRING SecondCharsGal
2058: ST_TO_ADDR
// hc_face_number := 34 ;
2059: LD_ADDR_OWVAR 34
2063: PUSH
2064: LD_INT 34
2066: ST_TO_ADDR
// hc_name := Ian Hill ;
2067: LD_ADDR_OWVAR 26
2071: PUSH
2072: LD_STRING Ian Hill
2074: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2075: LD_ADDR_OWVAR 29
2079: PUSH
2080: LD_INT 10
2082: PUSH
2083: LD_INT 12
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2090: LD_ADDR_OWVAR 30
2094: PUSH
2095: LD_INT 0
2097: PUSH
2098: LD_INT 0
2100: PUSH
2101: LD_INT 1
2103: PUSH
2104: LD_INT 0
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: LIST
2112: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2113: LD_ADDR_OWVAR 31
2117: PUSH
2118: LD_INT 2
2120: PUSH
2121: LD_INT 0
2123: PUSH
2124: LD_INT 1
2126: PUSH
2127: LD_INT 0
2129: PUSH
2130: EMPTY
2131: LIST
2132: LIST
2133: LIST
2134: LIST
2135: ST_TO_ADDR
// un = CreateHuman ;
2136: LD_ADDR_VAR 0 4
2140: PUSH
2141: CALL_OW 44
2145: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2146: LD_VAR 0 4
2150: PPUSH
2151: LD_INT 11
2153: PPUSH
2154: LD_INT 0
2156: PPUSH
2157: CALL_OW 49
// end ; if count = 5 then
2161: LD_VAR 0 1
2165: PUSH
2166: LD_INT 5
2168: EQUAL
2169: IFFALSE 2423
// begin hc_class := 1 ;
2171: LD_ADDR_OWVAR 28
2175: PUSH
2176: LD_INT 1
2178: ST_TO_ADDR
// hc_sex := sex_male ;
2179: LD_ADDR_OWVAR 27
2183: PUSH
2184: LD_INT 1
2186: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2187: LD_ADDR_OWVAR 33
2191: PUSH
2192: LD_STRING SecondCharsGal
2194: ST_TO_ADDR
// hc_face_number := 34 ;
2195: LD_ADDR_OWVAR 34
2199: PUSH
2200: LD_INT 34
2202: ST_TO_ADDR
// hc_name := Ian Hill ;
2203: LD_ADDR_OWVAR 26
2207: PUSH
2208: LD_STRING Ian Hill
2210: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2211: LD_ADDR_OWVAR 29
2215: PUSH
2216: LD_INT 10
2218: PUSH
2219: LD_INT 12
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2226: LD_ADDR_OWVAR 30
2230: PUSH
2231: LD_INT 0
2233: PUSH
2234: LD_INT 0
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 0
2242: PUSH
2243: EMPTY
2244: LIST
2245: LIST
2246: LIST
2247: LIST
2248: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2249: LD_ADDR_OWVAR 31
2253: PUSH
2254: LD_INT 2
2256: PUSH
2257: LD_INT 0
2259: PUSH
2260: LD_INT 1
2262: PUSH
2263: LD_INT 0
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: LIST
2270: LIST
2271: ST_TO_ADDR
// un = CreateHuman ;
2272: LD_ADDR_VAR 0 4
2276: PUSH
2277: CALL_OW 44
2281: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2282: LD_VAR 0 4
2286: PPUSH
2287: LD_INT 11
2289: PPUSH
2290: LD_INT 0
2292: PPUSH
2293: CALL_OW 49
// hc_class := 1 ;
2297: LD_ADDR_OWVAR 28
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// hc_sex := sex_female ;
2305: LD_ADDR_OWVAR 27
2309: PUSH
2310: LD_INT 2
2312: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2313: LD_ADDR_OWVAR 33
2317: PUSH
2318: LD_STRING SecondCharsGal
2320: ST_TO_ADDR
// hc_face_number := 41 ;
2321: LD_ADDR_OWVAR 34
2325: PUSH
2326: LD_INT 41
2328: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2329: LD_ADDR_OWVAR 26
2333: PUSH
2334: LD_STRING Kate Wadsworth
2336: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2337: LD_ADDR_OWVAR 29
2341: PUSH
2342: LD_INT 9
2344: PUSH
2345: LD_INT 9
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2352: LD_ADDR_OWVAR 30
2356: PUSH
2357: LD_INT 0
2359: PUSH
2360: LD_INT 2
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 0
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: LIST
2373: LIST
2374: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2375: LD_ADDR_OWVAR 31
2379: PUSH
2380: LD_INT 2
2382: PUSH
2383: LD_INT 3
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: LD_INT 0
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: LIST
2396: LIST
2397: ST_TO_ADDR
// un = CreateHuman ;
2398: LD_ADDR_VAR 0 4
2402: PUSH
2403: CALL_OW 44
2407: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2408: LD_VAR 0 4
2412: PPUSH
2413: LD_INT 11
2415: PPUSH
2416: LD_INT 0
2418: PPUSH
2419: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2423: LD_INT 11
2425: PPUSH
2426: LD_INT 22
2428: PUSH
2429: LD_INT 1
2431: PUSH
2432: EMPTY
2433: LIST
2434: LIST
2435: PUSH
2436: LD_INT 21
2438: PUSH
2439: LD_INT 1
2441: PUSH
2442: EMPTY
2443: LIST
2444: LIST
2445: PUSH
2446: LD_INT 26
2448: PUSH
2449: LD_INT 1
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: PUSH
2456: EMPTY
2457: LIST
2458: LIST
2459: LIST
2460: PPUSH
2461: CALL_OW 70
2465: PUSH
2466: LD_INT 1
2468: ARRAY
2469: PPUSH
2470: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2474: LD_INT 11
2476: PPUSH
2477: LD_INT 22
2479: PUSH
2480: LD_INT 1
2482: PUSH
2483: EMPTY
2484: LIST
2485: LIST
2486: PUSH
2487: LD_INT 21
2489: PUSH
2490: LD_INT 1
2492: PUSH
2493: EMPTY
2494: LIST
2495: LIST
2496: PUSH
2497: LD_INT 26
2499: PUSH
2500: LD_INT 1
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: PUSH
2507: EMPTY
2508: LIST
2509: LIST
2510: LIST
2511: PPUSH
2512: CALL_OW 70
2516: PUSH
2517: LD_INT 1
2519: ARRAY
2520: PPUSH
2521: LD_STRING D6-Sol3-1
2523: PPUSH
2524: CALL_OW 88
// end ; end_of_file
2528: LD_VAR 0 2
2532: RET
// export function PrepareRussianCommander ; begin
2533: LD_INT 0
2535: PPUSH
// uc_side = 3 ;
2536: LD_ADDR_OWVAR 20
2540: PUSH
2541: LD_INT 3
2543: ST_TO_ADDR
// uc_nation = 3 ;
2544: LD_ADDR_OWVAR 21
2548: PUSH
2549: LD_INT 3
2551: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2552: LD_ADDR_EXP 15
2556: PUSH
2557: LD_STRING Stolypin
2559: PPUSH
2560: CALL_OW 25
2564: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2565: LD_EXP 15
2569: PPUSH
2570: LD_INT 21
2572: PPUSH
2573: CALL_OW 52
// end ;
2577: LD_VAR 0 1
2581: RET
// export function PrepareRussianBase ; var i ; begin
2582: LD_INT 0
2584: PPUSH
2585: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2586: LD_INT 3
2588: PPUSH
2589: LD_INT 3
2591: PPUSH
2592: LD_INT 22
2594: PPUSH
2595: LD_EXP 16
2599: PPUSH
2600: LD_EXP 17
2604: PPUSH
2605: CALL_OW 12
2609: PPUSH
2610: LD_INT 1
2612: PPUSH
2613: LD_INT 2
2615: PPUSH
2616: CALL 3881 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2620: LD_INT 3
2622: PPUSH
2623: LD_INT 3
2625: PPUSH
2626: LD_INT 21
2628: PPUSH
2629: LD_EXP 16
2633: PPUSH
2634: LD_EXP 17
2638: PPUSH
2639: CALL_OW 12
2643: PPUSH
2644: LD_INT 2
2646: PPUSH
2647: LD_INT 3
2649: PPUSH
2650: CALL 3881 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2654: LD_INT 3
2656: PPUSH
2657: LD_INT 3
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: LD_EXP 16
2667: PPUSH
2668: LD_EXP 17
2672: PPUSH
2673: CALL_OW 12
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: CALL 3881 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2688: LD_INT 3
2690: PPUSH
2691: LD_INT 3
2693: PPUSH
2694: LD_INT 24
2696: PPUSH
2697: LD_EXP 16
2701: PPUSH
2702: LD_EXP 17
2706: PPUSH
2707: CALL_OW 12
2711: PPUSH
2712: LD_INT 3
2714: PPUSH
2715: LD_INT 6
2717: PPUSH
2718: CALL 3881 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2722: LD_ADDR_VAR 0 2
2726: PUSH
2727: LD_INT 22
2729: PUSH
2730: LD_INT 3
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 30
2739: PUSH
2740: LD_INT 32
2742: PUSH
2743: EMPTY
2744: LIST
2745: LIST
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PPUSH
2751: CALL_OW 69
2755: PUSH
2756: FOR_IN
2757: IFFALSE 2797
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2759: LD_INT 3
2761: PPUSH
2762: LD_INT 3
2764: PPUSH
2765: LD_VAR 0 2
2769: PPUSH
2770: LD_EXP 16
2774: PPUSH
2775: LD_EXP 17
2779: PPUSH
2780: CALL_OW 12
2784: PPUSH
2785: LD_INT 1
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: CALL 3881 0 6
2795: GO 2756
2797: POP
2798: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2799: LD_ADDR_VAR 0 2
2803: PUSH
2804: LD_INT 22
2806: PUSH
2807: LD_INT 3
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 30
2816: PUSH
2817: LD_INT 31
2819: PUSH
2820: EMPTY
2821: LIST
2822: LIST
2823: PUSH
2824: EMPTY
2825: LIST
2826: LIST
2827: PPUSH
2828: CALL_OW 69
2832: PUSH
2833: FOR_IN
2834: IFFALSE 2862
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2836: LD_EXP 16
2840: PPUSH
2841: LD_EXP 17
2845: PPUSH
2846: CALL_OW 12
2850: PPUSH
2851: LD_VAR 0 2
2855: PPUSH
2856: CALL 3991 0 2
2860: GO 2833
2862: POP
2863: POP
// end ;
2864: LD_VAR 0 1
2868: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2869: LD_INT 0
2871: PPUSH
2872: PPUSH
2873: PPUSH
2874: PPUSH
// uc_side = 6 ;
2875: LD_ADDR_OWVAR 20
2879: PUSH
2880: LD_INT 6
2882: ST_TO_ADDR
// uc_nation = 3 ;
2883: LD_ADDR_OWVAR 21
2887: PUSH
2888: LD_INT 3
2890: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2891: LD_ADDR_VAR 0 2
2895: PUSH
2896: DOUBLE
2897: LD_INT 1
2899: DEC
2900: ST_TO_ADDR
2901: LD_INT 1
2903: PUSH
2904: LD_INT 2
2906: PUSH
2907: LD_INT 1
2909: PPUSH
2910: LD_INT 2
2912: PPUSH
2913: CALL_OW 12
2917: PUSH
2918: EMPTY
2919: LIST
2920: LIST
2921: LIST
2922: PUSH
2923: LD_OWVAR 67
2927: ARRAY
2928: PUSH
2929: FOR_TO
2930: IFFALSE 3090
// begin vc_engine = 1 ;
2932: LD_ADDR_OWVAR 39
2936: PUSH
2937: LD_INT 1
2939: ST_TO_ADDR
// vc_control = 1 ;
2940: LD_ADDR_OWVAR 38
2944: PUSH
2945: LD_INT 1
2947: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2948: LD_ADDR_OWVAR 40
2952: PUSH
2953: LD_INT 42
2955: PUSH
2956: LD_INT 42
2958: PUSH
2959: LD_INT 43
2961: PUSH
2962: EMPTY
2963: LIST
2964: LIST
2965: LIST
2966: PUSH
2967: LD_OWVAR 67
2971: ARRAY
2972: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2973: LD_ADDR_OWVAR 37
2977: PUSH
2978: LD_INT 21
2980: PUSH
2981: LD_INT 22
2983: PUSH
2984: LD_INT 22
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: PUSH
2992: LD_OWVAR 67
2996: ARRAY
2997: ST_TO_ADDR
// veh = CreateVehicle ;
2998: LD_ADDR_VAR 0 3
3002: PUSH
3003: CALL_OW 45
3007: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3008: LD_VAR 0 3
3012: PPUSH
3013: LD_INT 3
3015: PPUSH
3016: LD_INT 0
3018: PPUSH
3019: CALL_OW 49
// hc_gallery =  ;
3023: LD_ADDR_OWVAR 33
3027: PUSH
3028: LD_STRING 
3030: ST_TO_ADDR
// hc_name =  ;
3031: LD_ADDR_OWVAR 26
3035: PUSH
3036: LD_STRING 
3038: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3039: LD_INT 0
3041: PPUSH
3042: LD_INT 3
3044: PPUSH
3045: LD_EXP 16
3049: PPUSH
3050: LD_EXP 17
3054: PPUSH
3055: CALL_OW 12
3059: PPUSH
3060: CALL_OW 380
// un = CreateHuman ;
3064: LD_ADDR_VAR 0 4
3068: PUSH
3069: CALL_OW 44
3073: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3074: LD_VAR 0 4
3078: PPUSH
3079: LD_VAR 0 3
3083: PPUSH
3084: CALL_OW 52
// end ;
3088: GO 2929
3090: POP
3091: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3092: LD_INT 0
3094: PPUSH
3095: LD_INT 2
3097: PPUSH
3098: LD_EXP 16
3102: PPUSH
3103: LD_EXP 17
3107: PPUSH
3108: CALL_OW 12
3112: PUSH
3113: LD_INT 2
3115: PLUS
3116: PPUSH
3117: CALL_OW 380
// un = CreateHuman ;
3121: LD_ADDR_VAR 0 4
3125: PUSH
3126: CALL_OW 44
3130: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3131: LD_VAR 0 4
3135: PPUSH
3136: LD_INT 3
3138: PPUSH
3139: LD_INT 0
3141: PPUSH
3142: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3146: LD_INT 0
3148: PPUSH
3149: LD_INT 4
3151: PPUSH
3152: LD_EXP 16
3156: PPUSH
3157: LD_EXP 17
3161: PPUSH
3162: CALL_OW 12
3166: PUSH
3167: LD_INT 2
3169: PLUS
3170: PPUSH
3171: CALL_OW 380
// un = CreateHuman ;
3175: LD_ADDR_VAR 0 4
3179: PUSH
3180: CALL_OW 44
3184: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3185: LD_VAR 0 4
3189: PPUSH
3190: LD_INT 3
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3200: LD_ADDR_VAR 0 2
3204: PUSH
3205: DOUBLE
3206: LD_INT 1
3208: DEC
3209: ST_TO_ADDR
3210: LD_INT 2
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 3
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: LIST
3223: PUSH
3224: LD_OWVAR 67
3228: ARRAY
3229: PUSH
3230: LD_INT 1
3232: PPUSH
3233: LD_INT 3
3235: PPUSH
3236: CALL_OW 12
3240: PLUS
3241: PUSH
3242: FOR_TO
3243: IFFALSE 3313
// begin hc_gallery =  ;
3245: LD_ADDR_OWVAR 33
3249: PUSH
3250: LD_STRING 
3252: ST_TO_ADDR
// hc_name =  ;
3253: LD_ADDR_OWVAR 26
3257: PUSH
3258: LD_STRING 
3260: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3261: LD_INT 0
3263: PPUSH
3264: LD_INT 1
3266: PPUSH
3267: LD_EXP 16
3271: PPUSH
3272: LD_EXP 17
3276: PPUSH
3277: CALL_OW 12
3281: PPUSH
3282: CALL_OW 380
// un = CreateHuman ;
3286: LD_ADDR_VAR 0 4
3290: PUSH
3291: CALL_OW 44
3295: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3296: LD_VAR 0 4
3300: PPUSH
3301: LD_INT 3
3303: PPUSH
3304: LD_INT 0
3306: PPUSH
3307: CALL_OW 49
// end ;
3311: GO 3242
3313: POP
3314: POP
// vc_engine = 1 ;
3315: LD_ADDR_OWVAR 39
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// vc_control = 1 ;
3323: LD_ADDR_OWVAR 38
3327: PUSH
3328: LD_INT 1
3330: ST_TO_ADDR
// vc_weapon = 51 ;
3331: LD_ADDR_OWVAR 40
3335: PUSH
3336: LD_INT 51
3338: ST_TO_ADDR
// vc_chassis = 22 ;
3339: LD_ADDR_OWVAR 37
3343: PUSH
3344: LD_INT 22
3346: ST_TO_ADDR
// veh = CreateVehicle ;
3347: LD_ADDR_VAR 0 3
3351: PUSH
3352: CALL_OW 45
3356: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3357: LD_VAR 0 3
3361: PPUSH
3362: LD_INT 3
3364: PPUSH
3365: LD_INT 0
3367: PPUSH
3368: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3372: LD_VAR 0 3
3376: PPUSH
3377: LD_INT 1
3379: PPUSH
3380: LD_INT 100
3382: PPUSH
3383: CALL_OW 290
// hc_gallery =  ;
3387: LD_ADDR_OWVAR 33
3391: PUSH
3392: LD_STRING 
3394: ST_TO_ADDR
// hc_name =  ;
3395: LD_ADDR_OWVAR 26
3399: PUSH
3400: LD_STRING 
3402: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3403: LD_INT 0
3405: PPUSH
3406: LD_INT 3
3408: PPUSH
3409: LD_EXP 16
3413: PPUSH
3414: LD_EXP 17
3418: PPUSH
3419: CALL_OW 12
3423: PPUSH
3424: CALL_OW 380
// un = CreateHuman ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: CALL_OW 44
3437: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3438: LD_VAR 0 4
3442: PPUSH
3443: LD_VAR 0 3
3447: PPUSH
3448: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3452: LD_ADDR_VAR 0 2
3456: PUSH
3457: LD_INT 22
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: EMPTY
3464: LIST
3465: LIST
3466: PUSH
3467: LD_INT 1
3469: PUSH
3470: LD_INT 3
3472: PUSH
3473: LD_INT 25
3475: PUSH
3476: LD_INT 2
3478: PUSH
3479: EMPTY
3480: LIST
3481: LIST
3482: PUSH
3483: EMPTY
3484: LIST
3485: LIST
3486: PUSH
3487: LD_INT 3
3489: PUSH
3490: LD_INT 25
3492: PUSH
3493: LD_INT 4
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PUSH
3504: EMPTY
3505: LIST
3506: LIST
3507: LIST
3508: PUSH
3509: EMPTY
3510: LIST
3511: LIST
3512: PPUSH
3513: CALL_OW 69
3517: PUSH
3518: FOR_IN
3519: IFFALSE 3538
// ComAgressiveMove ( i , 45 , 46 ) ;
3521: LD_VAR 0 2
3525: PPUSH
3526: LD_INT 45
3528: PPUSH
3529: LD_INT 46
3531: PPUSH
3532: CALL_OW 114
3536: GO 3518
3538: POP
3539: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3540: LD_ADDR_VAR 0 2
3544: PUSH
3545: LD_INT 22
3547: PUSH
3548: LD_INT 6
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 25
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: PPUSH
3569: CALL_OW 69
3573: PUSH
3574: FOR_IN
3575: IFFALSE 3606
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3577: LD_ADDR_EXP 21
3581: PUSH
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 0
3589: PPUSH
3590: LD_INT 48
3592: PPUSH
3593: LD_INT 55
3595: PPUSH
3596: LD_INT 5
3598: PPUSH
3599: CALL_OW 145
3603: ST_TO_ADDR
3604: GO 3574
3606: POP
3607: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3608: LD_ADDR_VAR 0 2
3612: PUSH
3613: LD_INT 22
3615: PUSH
3616: LD_INT 6
3618: PUSH
3619: EMPTY
3620: LIST
3621: LIST
3622: PUSH
3623: LD_INT 25
3625: PUSH
3626: LD_INT 4
3628: PUSH
3629: EMPTY
3630: LIST
3631: LIST
3632: PUSH
3633: EMPTY
3634: LIST
3635: LIST
3636: PPUSH
3637: CALL_OW 69
3641: PUSH
3642: FOR_IN
3643: IFFALSE 3662
// ComMoveXY ( i , 39 , 55 ) ;
3645: LD_VAR 0 2
3649: PPUSH
3650: LD_INT 39
3652: PPUSH
3653: LD_INT 55
3655: PPUSH
3656: CALL_OW 111
3660: GO 3642
3662: POP
3663: POP
// end ;
3664: LD_VAR 0 1
3668: RET
// export function PrepareFirstAttack ; var i , un ; begin
3669: LD_INT 0
3671: PPUSH
3672: PPUSH
3673: PPUSH
// uc_side = 5 ;
3674: LD_ADDR_OWVAR 20
3678: PUSH
3679: LD_INT 5
3681: ST_TO_ADDR
// uc_nation = 3 ;
3682: LD_ADDR_OWVAR 21
3686: PUSH
3687: LD_INT 3
3689: ST_TO_ADDR
// for i := 1 to 4 do
3690: LD_ADDR_VAR 0 2
3694: PUSH
3695: DOUBLE
3696: LD_INT 1
3698: DEC
3699: ST_TO_ADDR
3700: LD_INT 4
3702: PUSH
3703: FOR_TO
3704: IFFALSE 3803
// begin hc_gallery =  ;
3706: LD_ADDR_OWVAR 33
3710: PUSH
3711: LD_STRING 
3713: ST_TO_ADDR
// hc_name =  ;
3714: LD_ADDR_OWVAR 26
3718: PUSH
3719: LD_STRING 
3721: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 1
3727: PPUSH
3728: LD_EXP 16
3732: PPUSH
3733: LD_EXP 17
3737: PPUSH
3738: CALL_OW 12
3742: PPUSH
3743: CALL_OW 380
// un = CreateHuman ;
3747: LD_ADDR_VAR 0 3
3751: PUSH
3752: CALL_OW 44
3756: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3757: LD_VAR 0 3
3761: PPUSH
3762: LD_INT 4
3764: PPUSH
3765: LD_INT 0
3767: PPUSH
3768: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3772: LD_VAR 0 3
3776: PPUSH
3777: LD_EXP 1
3781: PPUSH
3782: CALL_OW 250
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 251
3796: PPUSH
3797: CALL_OW 114
// end ;
3801: GO 3703
3803: POP
3804: POP
// firstRussianAttack = 1 ;
3805: LD_ADDR_EXP 23
3809: PUSH
3810: LD_INT 1
3812: ST_TO_ADDR
// end ; end_of_file
3813: LD_VAR 0 1
3817: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3818: LD_INT 0
3820: PPUSH
3821: PPUSH
// if exist_mode then
3822: LD_VAR 0 2
3826: IFFALSE 3851
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3828: LD_ADDR_VAR 0 4
3832: PUSH
3833: LD_EXP 45
3837: PUSH
3838: LD_VAR 0 1
3842: STR
3843: PPUSH
3844: CALL_OW 34
3848: ST_TO_ADDR
// end else
3849: GO 3866
// begin unit := NewCharacter ( ident ) ;
3851: LD_ADDR_VAR 0 4
3855: PUSH
3856: LD_VAR 0 1
3860: PPUSH
3861: CALL_OW 25
3865: ST_TO_ADDR
// end ; result := unit ;
3866: LD_ADDR_VAR 0 3
3870: PUSH
3871: LD_VAR 0 4
3875: ST_TO_ADDR
// end ;
3876: LD_VAR 0 3
3880: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3881: LD_INT 0
3883: PPUSH
3884: PPUSH
3885: PPUSH
3886: PPUSH
// for i = 1 to count do
3887: LD_ADDR_VAR 0 8
3891: PUSH
3892: DOUBLE
3893: LD_INT 1
3895: DEC
3896: ST_TO_ADDR
3897: LD_VAR 0 6
3901: PUSH
3902: FOR_TO
3903: IFFALSE 3984
// begin uc_side = side ;
3905: LD_ADDR_OWVAR 20
3909: PUSH
3910: LD_VAR 0 1
3914: ST_TO_ADDR
// uc_nation = nation ;
3915: LD_ADDR_OWVAR 21
3919: PUSH
3920: LD_VAR 0 2
3924: ST_TO_ADDR
// hc_gallery =  ;
3925: LD_ADDR_OWVAR 33
3929: PUSH
3930: LD_STRING 
3932: ST_TO_ADDR
// hc_name =  ;
3933: LD_ADDR_OWVAR 26
3937: PUSH
3938: LD_STRING 
3940: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3941: LD_INT 0
3943: PPUSH
3944: LD_VAR 0 5
3948: PPUSH
3949: LD_VAR 0 4
3953: PPUSH
3954: CALL_OW 380
// un = CreateHuman ;
3958: LD_ADDR_VAR 0 10
3962: PUSH
3963: CALL_OW 44
3967: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3968: LD_VAR 0 10
3972: PPUSH
3973: LD_VAR 0 3
3977: PPUSH
3978: CALL_OW 52
// end ;
3982: GO 3902
3984: POP
3985: POP
// end ;
3986: LD_VAR 0 7
3990: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3991: LD_INT 0
3993: PPUSH
3994: PPUSH
3995: PPUSH
// uc_side := GetSide ( b ) ;
3996: LD_ADDR_OWVAR 20
4000: PUSH
4001: LD_VAR 0 2
4005: PPUSH
4006: CALL_OW 255
4010: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4011: LD_ADDR_OWVAR 21
4015: PUSH
4016: LD_VAR 0 2
4020: PPUSH
4021: CALL_OW 248
4025: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4026: LD_INT 0
4028: PPUSH
4029: LD_INT 1
4031: PPUSH
4032: LD_VAR 0 1
4036: PPUSH
4037: CALL_OW 380
// un = CreateHuman ;
4041: LD_ADDR_VAR 0 4
4045: PUSH
4046: CALL_OW 44
4050: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4051: LD_ADDR_VAR 0 5
4055: PUSH
4056: LD_VAR 0 2
4060: PPUSH
4061: CALL_OW 254
4065: PUSH
4066: LD_INT 3
4068: MINUS
4069: ST_TO_ADDR
// if dir < 0 then
4070: LD_VAR 0 5
4074: PUSH
4075: LD_INT 0
4077: LESS
4078: IFFALSE 4094
// dir := 6 + dir ;
4080: LD_ADDR_VAR 0 5
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: LD_VAR 0 5
4092: PLUS
4093: ST_TO_ADDR
// SetDir ( un , dir ) ;
4094: LD_VAR 0 4
4098: PPUSH
4099: LD_VAR 0 5
4103: PPUSH
4104: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4108: LD_VAR 0 4
4112: PPUSH
4113: LD_VAR 0 2
4117: PPUSH
4118: CALL_OW 52
// end ;
4122: LD_VAR 0 3
4126: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4127: LD_INT 0
4129: PPUSH
4130: PPUSH
4131: PPUSH
// rnd = rand ( 1 , characters ) ;
4132: LD_ADDR_VAR 0 6
4136: PUSH
4137: LD_INT 1
4139: PPUSH
4140: LD_VAR 0 1
4144: PPUSH
4145: CALL_OW 12
4149: ST_TO_ADDR
// for i = 1 to characters do
4150: LD_ADDR_VAR 0 5
4154: PUSH
4155: DOUBLE
4156: LD_INT 1
4158: DEC
4159: ST_TO_ADDR
4160: LD_VAR 0 1
4164: PUSH
4165: FOR_TO
4166: IFFALSE 4276
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4168: LD_VAR 0 5
4172: PUSH
4173: LD_VAR 0 6
4177: EQUAL
4178: PUSH
4179: LD_VAR 0 1
4183: PUSH
4184: LD_VAR 0 5
4188: ARRAY
4189: PPUSH
4190: CALL_OW 258
4194: PUSH
4195: LD_INT 1
4197: EQUAL
4198: AND
4199: IFFALSE 4221
// Say ( characters [ i ] , dialogMID ) ;
4201: LD_VAR 0 1
4205: PUSH
4206: LD_VAR 0 5
4210: ARRAY
4211: PPUSH
4212: LD_VAR 0 2
4216: PPUSH
4217: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4221: LD_VAR 0 5
4225: PUSH
4226: LD_VAR 0 6
4230: EQUAL
4231: PUSH
4232: LD_VAR 0 1
4236: PUSH
4237: LD_VAR 0 5
4241: ARRAY
4242: PPUSH
4243: CALL_OW 258
4247: PUSH
4248: LD_INT 2
4250: EQUAL
4251: AND
4252: IFFALSE 4274
// Say ( characters [ i ] , dialogFID ) ;
4254: LD_VAR 0 1
4258: PUSH
4259: LD_VAR 0 5
4263: ARRAY
4264: PPUSH
4265: LD_VAR 0 3
4269: PPUSH
4270: CALL_OW 88
// end ;
4274: GO 4165
4276: POP
4277: POP
// end ;
4278: LD_VAR 0 4
4282: RET
// export function PrepareDifficulty ; var tmp ; begin
4283: LD_INT 0
4285: PPUSH
4286: PPUSH
// if Difficulty = 1 then
4287: LD_OWVAR 67
4291: PUSH
4292: LD_INT 1
4294: EQUAL
4295: IFFALSE 4313
// begin RuSoldMinLevel = 0 ;
4297: LD_ADDR_EXP 16
4301: PUSH
4302: LD_INT 0
4304: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4305: LD_ADDR_EXP 17
4309: PUSH
4310: LD_INT 2
4312: ST_TO_ADDR
// end ; if Difficulty = 2 then
4313: LD_OWVAR 67
4317: PUSH
4318: LD_INT 2
4320: EQUAL
4321: IFFALSE 4429
// begin RuSoldMinLevel = 1 ;
4323: LD_ADDR_EXP 16
4327: PUSH
4328: LD_INT 1
4330: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4331: LD_ADDR_EXP 17
4335: PUSH
4336: LD_INT 2
4338: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4339: LD_INT 14
4341: PPUSH
4342: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4346: LD_INT 23
4348: PPUSH
4349: CALL_OW 64
// uc_nation = 3 ;
4353: LD_ADDR_OWVAR 21
4357: PUSH
4358: LD_INT 3
4360: ST_TO_ADDR
// uc_side = 3 ;
4361: LD_ADDR_OWVAR 20
4365: PUSH
4366: LD_INT 3
4368: ST_TO_ADDR
// bc_level = 5 ;
4369: LD_ADDR_OWVAR 43
4373: PUSH
4374: LD_INT 5
4376: ST_TO_ADDR
// bc_type = 32 ;
4377: LD_ADDR_OWVAR 42
4381: PUSH
4382: LD_INT 32
4384: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4385: LD_ADDR_VAR 0 2
4389: PUSH
4390: LD_INT 76
4392: PPUSH
4393: LD_INT 91
4395: PPUSH
4396: LD_INT 2
4398: PPUSH
4399: CALL_OW 47
4403: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4404: LD_VAR 0 2
4408: PPUSH
4409: LD_INT 43
4411: PPUSH
4412: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4416: LD_INT 51
4418: PPUSH
4419: LD_INT 3
4421: PPUSH
4422: LD_INT 1
4424: PPUSH
4425: CALL_OW 322
// end ; if Difficulty = 3 then
4429: LD_OWVAR 67
4433: PUSH
4434: LD_INT 3
4436: EQUAL
4437: IFFALSE 4613
// begin RuSoldMinLevel = 1 ;
4439: LD_ADDR_EXP 16
4443: PUSH
4444: LD_INT 1
4446: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4447: LD_ADDR_EXP 17
4451: PUSH
4452: LD_INT 3
4454: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4455: LD_INT 13
4457: PPUSH
4458: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4462: LD_INT 14
4464: PPUSH
4465: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4469: LD_INT 26
4471: PPUSH
4472: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4476: LD_INT 23
4478: PPUSH
4479: CALL_OW 64
// uc_nation = 3 ;
4483: LD_ADDR_OWVAR 21
4487: PUSH
4488: LD_INT 3
4490: ST_TO_ADDR
// uc_side = 3 ;
4491: LD_ADDR_OWVAR 20
4495: PUSH
4496: LD_INT 3
4498: ST_TO_ADDR
// bc_level = 5 ;
4499: LD_ADDR_OWVAR 43
4503: PUSH
4504: LD_INT 5
4506: ST_TO_ADDR
// bc_type = 32 ;
4507: LD_ADDR_OWVAR 42
4511: PUSH
4512: LD_INT 32
4514: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: LD_INT 76
4522: PPUSH
4523: LD_INT 91
4525: PPUSH
4526: LD_INT 2
4528: PPUSH
4529: CALL_OW 47
4533: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4534: LD_VAR 0 2
4538: PPUSH
4539: LD_INT 44
4541: PPUSH
4542: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4546: LD_ADDR_VAR 0 2
4550: PUSH
4551: LD_INT 83
4553: PPUSH
4554: LD_INT 84
4556: PPUSH
4557: LD_INT 2
4559: PPUSH
4560: CALL_OW 47
4564: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4565: LD_VAR 0 2
4569: PPUSH
4570: LD_INT 43
4572: PPUSH
4573: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4577: LD_INT 51
4579: PPUSH
4580: LD_INT 3
4582: PPUSH
4583: LD_INT 1
4585: PPUSH
4586: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4590: LD_INT 52
4592: PPUSH
4593: LD_INT 3
4595: PPUSH
4596: LD_INT 1
4598: PPUSH
4599: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4603: LD_INT 25
4605: PPUSH
4606: LD_INT 44
4608: PPUSH
4609: CALL_OW 431
// end ; end ;
4613: LD_VAR 0 1
4617: RET
// export function EnergyDialog ; begin
4618: LD_INT 0
4620: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4621: LD_INT 46
4623: PPUSH
4624: LD_INT 1
4626: PPUSH
4627: CALL_OW 321
4631: PUSH
4632: LD_INT 1
4634: EQUAL
4635: PUSH
4636: LD_INT 35
4638: PPUSH
4639: LD_INT 1
4641: PPUSH
4642: CALL_OW 321
4646: PUSH
4647: LD_INT 1
4649: EQUAL
4650: AND
4651: IFFALSE 4675
// begin Say ( JMM , D9c-JMM-1 ) ;
4653: LD_EXP 1
4657: PPUSH
4658: LD_STRING D9c-JMM-1
4660: PPUSH
4661: CALL_OW 88
// energyVDialog = 1 ;
4665: LD_ADDR_EXP 33
4669: PUSH
4670: LD_INT 1
4672: ST_TO_ADDR
// end else
4673: GO 4829
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4675: LD_INT 35
4677: PPUSH
4678: LD_INT 1
4680: PPUSH
4681: CALL_OW 321
4685: PUSH
4686: LD_INT 2
4688: EQUAL
4689: PUSH
4690: LD_EXP 33
4694: PUSH
4695: LD_INT 0
4697: EQUAL
4698: AND
4699: IFFALSE 4721
// begin Say ( JMM , D9c-JMM-1a ) ;
4701: LD_EXP 1
4705: PPUSH
4706: LD_STRING D9c-JMM-1a
4708: PPUSH
4709: CALL_OW 88
// energyVDialog = 1 ;
4713: LD_ADDR_EXP 33
4717: PUSH
4718: LD_INT 1
4720: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4721: LD_INT 46
4723: PPUSH
4724: LD_INT 1
4726: PPUSH
4727: CALL_OW 321
4731: PUSH
4732: LD_INT 2
4734: EQUAL
4735: PUSH
4736: LD_EXP 33
4740: PUSH
4741: LD_INT 0
4743: EQUAL
4744: AND
4745: IFFALSE 4767
// begin Say ( JMM , D9c-JMM-1b ) ;
4747: LD_EXP 1
4751: PPUSH
4752: LD_STRING D9c-JMM-1b
4754: PPUSH
4755: CALL_OW 88
// energyVDialog = 1 ;
4759: LD_ADDR_EXP 33
4763: PUSH
4764: LD_INT 1
4766: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4767: LD_INT 46
4769: PPUSH
4770: LD_INT 1
4772: PPUSH
4773: CALL_OW 321
4777: PUSH
4778: LD_INT 2
4780: EQUAL
4781: PUSH
4782: LD_INT 21
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 321
4792: PUSH
4793: LD_INT 2
4795: EQUAL
4796: AND
4797: PUSH
4798: LD_EXP 33
4802: PUSH
4803: LD_INT 0
4805: EQUAL
4806: AND
4807: IFFALSE 4829
// begin Say ( JMM , D9c-JMM-1c ) ;
4809: LD_EXP 1
4813: PPUSH
4814: LD_STRING D9c-JMM-1c
4816: PPUSH
4817: CALL_OW 88
// energyVDialog = 1 ;
4821: LD_ADDR_EXP 33
4825: PUSH
4826: LD_INT 1
4828: ST_TO_ADDR
// end ; end ; end ;
4829: LD_VAR 0 1
4833: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4834: LD_INT 0
4836: PPUSH
4837: PPUSH
4838: PPUSH
4839: PPUSH
4840: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4841: LD_VAR 0 1
4845: NOT
4846: PUSH
4847: LD_VAR 0 1
4851: PPUSH
4852: CALL_OW 256
4856: PUSH
4857: LD_INT 250
4859: LESS
4860: OR
4861: PUSH
4862: LD_VAR 0 1
4866: PPUSH
4867: CALL_OW 314
4871: PUSH
4872: LD_VAR 0 1
4876: PPUSH
4877: CALL_OW 261
4881: PUSH
4882: LD_INT 20
4884: GREATER
4885: AND
4886: OR
4887: IFFALSE 4891
// exit ;
4889: GO 5256
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4891: LD_VAR 0 1
4895: PPUSH
4896: CALL_OW 261
4900: PUSH
4901: LD_INT 20
4903: LESS
4904: PUSH
4905: LD_VAR 0 1
4909: PPUSH
4910: CALL_OW 110
4914: PUSH
4915: LD_INT 21
4917: EQUAL
4918: NOT
4919: AND
4920: IFFALSE 4947
// begin ComStop ( bulldozer ) ;
4922: LD_VAR 0 1
4926: PPUSH
4927: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4931: LD_VAR 0 1
4935: PPUSH
4936: LD_INT 21
4938: PPUSH
4939: CALL_OW 109
// exit ;
4943: GO 5256
// end else
4945: GO 4974
// if GetFuel ( bulldozer ) > 20 then
4947: LD_VAR 0 1
4951: PPUSH
4952: CALL_OW 261
4956: PUSH
4957: LD_INT 20
4959: GREATER
4960: IFFALSE 4974
// SetTag ( bulldozer , 0 ) ;
4962: LD_VAR 0 1
4966: PPUSH
4967: LD_INT 0
4969: PPUSH
4970: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4974: LD_ADDR_VAR 0 5
4978: PUSH
4979: LD_VAR 0 2
4983: PPUSH
4984: CALL_OW 353
4988: ST_TO_ADDR
// tmp := [ ] ;
4989: LD_ADDR_VAR 0 6
4993: PUSH
4994: EMPTY
4995: ST_TO_ADDR
// for i = 1 to list do
4996: LD_ADDR_VAR 0 4
5000: PUSH
5001: DOUBLE
5002: LD_INT 1
5004: DEC
5005: ST_TO_ADDR
5006: LD_VAR 0 5
5010: PUSH
5011: FOR_TO
5012: IFFALSE 5110
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5014: LD_VAR 0 5
5018: PUSH
5019: LD_VAR 0 4
5023: ARRAY
5024: PUSH
5025: LD_INT 1
5027: ARRAY
5028: PPUSH
5029: LD_VAR 0 5
5033: PUSH
5034: LD_VAR 0 4
5038: ARRAY
5039: PUSH
5040: LD_INT 2
5042: ARRAY
5043: PPUSH
5044: CALL_OW 554
5048: IFFALSE 5108
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5050: LD_ADDR_VAR 0 6
5054: PUSH
5055: LD_VAR 0 6
5059: PPUSH
5060: LD_VAR 0 6
5064: PUSH
5065: LD_INT 1
5067: PLUS
5068: PPUSH
5069: LD_VAR 0 5
5073: PUSH
5074: LD_VAR 0 4
5078: ARRAY
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PUSH
5084: LD_VAR 0 5
5088: PUSH
5089: LD_VAR 0 4
5093: ARRAY
5094: PUSH
5095: LD_INT 2
5097: ARRAY
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 1
5107: ST_TO_ADDR
// end ;
5108: GO 5011
5110: POP
5111: POP
// ComStop ( bulldozer ) ;
5112: LD_VAR 0 1
5116: PPUSH
5117: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5121: LD_ADDR_VAR 0 7
5125: PUSH
5126: LD_VAR 0 1
5130: PPUSH
5131: CALL_OW 250
5135: PUSH
5136: LD_VAR 0 1
5140: PPUSH
5141: CALL_OW 251
5145: PUSH
5146: EMPTY
5147: LIST
5148: LIST
5149: ST_TO_ADDR
// for i = tmp downto 1 do
5150: LD_ADDR_VAR 0 4
5154: PUSH
5155: DOUBLE
5156: LD_VAR 0 6
5160: INC
5161: ST_TO_ADDR
5162: LD_INT 1
5164: PUSH
5165: FOR_DOWNTO
5166: IFFALSE 5254
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5168: LD_ADDR_VAR 0 7
5172: PUSH
5173: LD_VAR 0 7
5177: PUSH
5178: LD_INT 1
5180: ARRAY
5181: PPUSH
5182: LD_VAR 0 7
5186: PUSH
5187: LD_INT 2
5189: ARRAY
5190: PPUSH
5191: LD_VAR 0 6
5195: PPUSH
5196: CALL 5357 0 3
5200: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5201: LD_VAR 0 1
5205: PPUSH
5206: LD_VAR 0 7
5210: PUSH
5211: LD_INT 1
5213: ARRAY
5214: PPUSH
5215: LD_VAR 0 7
5219: PUSH
5220: LD_INT 2
5222: ARRAY
5223: PPUSH
5224: CALL 5261 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5228: LD_ADDR_VAR 0 6
5232: PUSH
5233: LD_VAR 0 6
5237: PPUSH
5238: LD_VAR 0 7
5242: PUSH
5243: LD_INT 3
5245: ARRAY
5246: PPUSH
5247: CALL_OW 3
5251: ST_TO_ADDR
// end ;
5252: GO 5165
5254: POP
5255: POP
// end ;
5256: LD_VAR 0 3
5260: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5261: LD_INT 0
5263: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5264: LD_VAR 0 2
5268: PPUSH
5269: LD_VAR 0 3
5273: PPUSH
5274: CALL_OW 351
5278: PUSH
5279: LD_VAR 0 2
5283: PPUSH
5284: LD_VAR 0 3
5288: PPUSH
5289: CALL_OW 554
5293: AND
5294: PUSH
5295: LD_VAR 0 2
5299: PPUSH
5300: LD_VAR 0 3
5304: PPUSH
5305: CALL_OW 488
5309: AND
5310: PUSH
5311: LD_VAR 0 2
5315: PPUSH
5316: LD_VAR 0 3
5320: PPUSH
5321: CALL_OW 428
5325: PUSH
5326: LD_INT 1
5328: NEG
5329: EQUAL
5330: AND
5331: IFFALSE 5352
// AddComMoveXY ( bulldozer , x , y ) ;
5333: LD_VAR 0 1
5337: PPUSH
5338: LD_VAR 0 2
5342: PPUSH
5343: LD_VAR 0 3
5347: PPUSH
5348: CALL_OW 171
// end ;
5352: LD_VAR 0 4
5356: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5357: LD_INT 0
5359: PPUSH
5360: PPUSH
5361: PPUSH
5362: PPUSH
5363: PPUSH
5364: PPUSH
5365: PPUSH
// dist := 99999 ;
5366: LD_ADDR_VAR 0 6
5370: PUSH
5371: LD_INT 99999
5373: ST_TO_ADDR
// for i = 1 to list do
5374: LD_ADDR_VAR 0 5
5378: PUSH
5379: DOUBLE
5380: LD_INT 1
5382: DEC
5383: ST_TO_ADDR
5384: LD_VAR 0 3
5388: PUSH
5389: FOR_TO
5390: IFFALSE 5528
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5392: LD_ADDR_VAR 0 7
5396: PUSH
5397: LD_VAR 0 1
5401: PPUSH
5402: LD_VAR 0 2
5406: PPUSH
5407: LD_VAR 0 3
5411: PUSH
5412: LD_VAR 0 5
5416: ARRAY
5417: PUSH
5418: LD_INT 1
5420: ARRAY
5421: PPUSH
5422: LD_VAR 0 3
5426: PUSH
5427: LD_VAR 0 5
5431: ARRAY
5432: PUSH
5433: LD_INT 2
5435: ARRAY
5436: PPUSH
5437: CALL_OW 298
5441: ST_TO_ADDR
// if d = 0 then
5442: LD_VAR 0 7
5446: PUSH
5447: LD_INT 0
5449: EQUAL
5450: IFFALSE 5454
// continue ;
5452: GO 5389
// if d < dist then
5454: LD_VAR 0 7
5458: PUSH
5459: LD_VAR 0 6
5463: LESS
5464: IFFALSE 5526
// begin _x := list [ i ] [ 1 ] ;
5466: LD_ADDR_VAR 0 8
5470: PUSH
5471: LD_VAR 0 3
5475: PUSH
5476: LD_VAR 0 5
5480: ARRAY
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5486: LD_ADDR_VAR 0 9
5490: PUSH
5491: LD_VAR 0 3
5495: PUSH
5496: LD_VAR 0 5
5500: ARRAY
5501: PUSH
5502: LD_INT 2
5504: ARRAY
5505: ST_TO_ADDR
// _i := i ;
5506: LD_ADDR_VAR 0 10
5510: PUSH
5511: LD_VAR 0 5
5515: ST_TO_ADDR
// dist := d ;
5516: LD_ADDR_VAR 0 6
5520: PUSH
5521: LD_VAR 0 7
5525: ST_TO_ADDR
// end ; end ;
5526: GO 5389
5528: POP
5529: POP
// result := [ _x , _y , _i , dist ] ;
5530: LD_ADDR_VAR 0 4
5534: PUSH
5535: LD_VAR 0 8
5539: PUSH
5540: LD_VAR 0 9
5544: PUSH
5545: LD_VAR 0 10
5549: PUSH
5550: LD_VAR 0 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: LIST
5559: LIST
5560: ST_TO_ADDR
// end ;
5561: LD_VAR 0 4
5565: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5566: LD_INT 0
5568: PPUSH
5569: PPUSH
5570: PPUSH
5571: PPUSH
// for i = 1 to 72 do
5572: LD_ADDR_VAR 0 5
5576: PUSH
5577: DOUBLE
5578: LD_INT 1
5580: DEC
5581: ST_TO_ADDR
5582: LD_INT 72
5584: PUSH
5585: FOR_TO
5586: IFFALSE 5644
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5588: LD_VAR 0 5
5592: PPUSH
5593: LD_VAR 0 1
5597: PPUSH
5598: CALL_OW 321
5602: PUSH
5603: LD_INT 1
5605: EQUAL
5606: PUSH
5607: LD_VAR 0 5
5611: PPUSH
5612: LD_VAR 0 3
5616: PPUSH
5617: CALL_OW 482
5621: PUSH
5622: LD_INT 1
5624: EQUAL
5625: AND
5626: IFFALSE 5642
// AddComResearch ( lab , i ) ;
5628: LD_VAR 0 2
5632: PPUSH
5633: LD_VAR 0 5
5637: PPUSH
5638: CALL_OW 184
5642: GO 5585
5644: POP
5645: POP
// end ;
5646: LD_VAR 0 4
5650: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5651: LD_INT 0
5653: PPUSH
5654: PPUSH
5655: PPUSH
5656: PPUSH
5657: PPUSH
5658: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5659: LD_ADDR_VAR 0 7
5663: PUSH
5664: LD_VAR 0 2
5668: PPUSH
5669: CALL_OW 313
5673: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5674: LD_ADDR_VAR 0 8
5678: PUSH
5679: LD_VAR 0 3
5683: PPUSH
5684: LD_INT 22
5686: PUSH
5687: LD_VAR 0 1
5691: PUSH
5692: EMPTY
5693: LIST
5694: LIST
5695: PUSH
5696: LD_INT 25
5698: PUSH
5699: LD_INT 2
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PUSH
5706: LD_INT 24
5708: PUSH
5709: LD_INT 750
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 3
5718: PUSH
5719: LD_INT 54
5721: PUSH
5722: EMPTY
5723: LIST
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: LIST
5733: LIST
5734: PPUSH
5735: CALL_OW 70
5739: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5740: LD_ADDR_VAR 0 5
5744: PUSH
5745: LD_VAR 0 3
5749: PPUSH
5750: LD_INT 22
5752: PUSH
5753: LD_VAR 0 1
5757: PUSH
5758: EMPTY
5759: LIST
5760: LIST
5761: PUSH
5762: LD_INT 21
5764: PUSH
5765: LD_INT 3
5767: PUSH
5768: EMPTY
5769: LIST
5770: LIST
5771: PUSH
5772: LD_INT 3
5774: PUSH
5775: LD_INT 24
5777: PUSH
5778: LD_INT 1000
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: PUSH
5785: EMPTY
5786: LIST
5787: LIST
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: LIST
5793: PUSH
5794: EMPTY
5795: LIST
5796: PPUSH
5797: CALL_OW 70
5801: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5802: LD_VAR 0 5
5806: NOT
5807: PUSH
5808: LD_INT 22
5810: PUSH
5811: LD_VAR 0 1
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: PUSH
5820: LD_INT 25
5822: PUSH
5823: LD_INT 2
5825: PUSH
5826: EMPTY
5827: LIST
5828: LIST
5829: PUSH
5830: LD_INT 24
5832: PUSH
5833: LD_INT 250
5835: PUSH
5836: EMPTY
5837: LIST
5838: LIST
5839: PUSH
5840: EMPTY
5841: LIST
5842: LIST
5843: LIST
5844: PPUSH
5845: CALL_OW 69
5849: NOT
5850: AND
5851: IFFALSE 5855
// exit ;
5853: GO 5967
// if buildings_list > 0 and engineerOkInside then
5855: LD_VAR 0 5
5859: PUSH
5860: LD_INT 0
5862: GREATER
5863: PUSH
5864: LD_VAR 0 7
5868: AND
5869: IFFALSE 5895
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5871: LD_VAR 0 7
5875: PPUSH
5876: LD_INT 25
5878: PUSH
5879: LD_INT 2
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 72
5890: PPUSH
5891: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5895: LD_VAR 0 5
5899: PUSH
5900: LD_INT 0
5902: GREATER
5903: PUSH
5904: LD_VAR 0 8
5908: PUSH
5909: LD_INT 0
5911: GREATER
5912: AND
5913: IFFALSE 5933
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5915: LD_VAR 0 8
5919: PPUSH
5920: LD_VAR 0 5
5924: PUSH
5925: LD_INT 1
5927: ARRAY
5928: PPUSH
5929: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5933: LD_VAR 0 5
5937: PUSH
5938: LD_INT 0
5940: EQUAL
5941: PUSH
5942: LD_VAR 0 8
5946: PUSH
5947: LD_INT 0
5949: GREATER
5950: AND
5951: IFFALSE 5967
// ComEnterUnit ( engineerOkOutside , building ) ;
5953: LD_VAR 0 8
5957: PPUSH
5958: LD_VAR 0 2
5962: PPUSH
5963: CALL_OW 120
// end ;
5967: LD_VAR 0 4
5971: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5972: LD_INT 0
5974: PPUSH
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5983: LD_ADDR_VAR 0 6
5987: PUSH
5988: LD_INT 22
5990: PUSH
5991: LD_VAR 0 1
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: LD_INT 25
6002: PUSH
6003: LD_INT 4
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 23
6012: PUSH
6013: LD_INT 2
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 24
6022: PUSH
6023: LD_INT 251
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: PPUSH
6036: CALL_OW 69
6040: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6041: LD_ADDR_VAR 0 7
6045: PUSH
6046: LD_VAR 0 3
6050: PPUSH
6051: LD_INT 22
6053: PUSH
6054: LD_VAR 0 1
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: PUSH
6063: LD_INT 23
6065: PUSH
6066: LD_INT 2
6068: PUSH
6069: EMPTY
6070: LIST
6071: LIST
6072: PUSH
6073: LD_INT 25
6075: PUSH
6076: LD_INT 4
6078: PUSH
6079: EMPTY
6080: LIST
6081: LIST
6082: PUSH
6083: LD_INT 50
6085: PUSH
6086: EMPTY
6087: LIST
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: PPUSH
6095: CALL_OW 70
6099: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6100: LD_ADDR_VAR 0 10
6104: PUSH
6105: LD_VAR 0 3
6109: PPUSH
6110: LD_INT 22
6112: PUSH
6113: LD_VAR 0 1
6117: PUSH
6118: EMPTY
6119: LIST
6120: LIST
6121: PUSH
6122: LD_INT 21
6124: PUSH
6125: LD_INT 1
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: PUSH
6132: LD_INT 3
6134: PUSH
6135: LD_INT 25
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PUSH
6149: LD_INT 3
6151: PUSH
6152: LD_INT 24
6154: PUSH
6155: LD_INT 750
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: LIST
6170: LIST
6171: PPUSH
6172: CALL_OW 70
6176: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6177: LD_ADDR_VAR 0 11
6181: PUSH
6182: LD_VAR 0 2
6186: PPUSH
6187: LD_INT 22
6189: PUSH
6190: LD_VAR 0 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 21
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 3
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: PUSH
6226: LD_INT 3
6228: PUSH
6229: LD_INT 24
6231: PUSH
6232: LD_INT 1000
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: PPUSH
6249: CALL_OW 70
6253: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6254: LD_VAR 0 10
6258: NOT
6259: PUSH
6260: LD_VAR 0 11
6264: NOT
6265: AND
6266: PUSH
6267: LD_VAR 0 6
6271: NOT
6272: AND
6273: IFFALSE 6277
// exit ;
6275: GO 6511
// if damageUnits > 0 and sci_list > 0 then
6277: LD_VAR 0 10
6281: PUSH
6282: LD_INT 0
6284: GREATER
6285: PUSH
6286: LD_VAR 0 6
6290: PUSH
6291: LD_INT 0
6293: GREATER
6294: AND
6295: IFFALSE 6311
// ComMoveToArea ( damageUnits , healArea ) ;
6297: LD_VAR 0 10
6301: PPUSH
6302: LD_VAR 0 2
6306: PPUSH
6307: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6311: LD_VAR 0 11
6315: PUSH
6316: LD_INT 0
6318: GREATER
6319: PUSH
6320: LD_VAR 0 6
6324: PUSH
6325: LD_INT 0
6327: GREATER
6328: AND
6329: IFFALSE 6340
// ComExitBuilding ( sci_list ) ;
6331: LD_VAR 0 6
6335: PPUSH
6336: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6340: LD_VAR 0 11
6344: PUSH
6345: LD_INT 0
6347: GREATER
6348: PUSH
6349: LD_VAR 0 7
6353: PUSH
6354: LD_INT 0
6356: GREATER
6357: AND
6358: IFFALSE 6378
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6360: LD_VAR 0 7
6364: PPUSH
6365: LD_VAR 0 11
6369: PUSH
6370: LD_INT 1
6372: ARRAY
6373: PPUSH
6374: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6378: LD_VAR 0 10
6382: PUSH
6383: LD_INT 0
6385: EQUAL
6386: PUSH
6387: LD_VAR 0 11
6391: PUSH
6392: LD_INT 0
6394: EQUAL
6395: AND
6396: PUSH
6397: LD_VAR 0 7
6401: PUSH
6402: LD_INT 0
6404: GREATER
6405: AND
6406: IFFALSE 6511
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6408: LD_ADDR_VAR 0 12
6412: PUSH
6413: LD_INT 22
6415: PUSH
6416: LD_VAR 0 1
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PUSH
6425: LD_INT 21
6427: PUSH
6428: LD_INT 3
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 30
6437: PUSH
6438: LD_INT 8
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: LIST
6449: PPUSH
6450: CALL_OW 69
6454: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6455: LD_ADDR_VAR 0 13
6459: PUSH
6460: LD_INT 1
6462: PPUSH
6463: LD_VAR 0 12
6467: PPUSH
6468: CALL_OW 12
6472: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6473: LD_VAR 0 7
6477: PPUSH
6478: LD_INT 3
6480: PUSH
6481: LD_INT 60
6483: PUSH
6484: EMPTY
6485: LIST
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PPUSH
6491: CALL_OW 72
6495: PPUSH
6496: LD_VAR 0 12
6500: PUSH
6501: LD_VAR 0 13
6505: ARRAY
6506: PPUSH
6507: CALL_OW 120
// end ; end ;
6511: LD_VAR 0 5
6515: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6516: LD_INT 0
6518: PPUSH
6519: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6520: LD_INT 22
6522: PUSH
6523: LD_VAR 0 1
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: PUSH
6532: LD_INT 21
6534: PUSH
6535: LD_INT 2
6537: PUSH
6538: EMPTY
6539: LIST
6540: LIST
6541: PUSH
6542: EMPTY
6543: LIST
6544: LIST
6545: PPUSH
6546: CALL_OW 69
6550: PUSH
6551: LD_VAR 0 3
6555: LESSEQUAL
6556: IFFALSE 6623
// for i = 1 to vehCount do
6558: LD_ADDR_VAR 0 9
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 3
6572: PUSH
6573: FOR_TO
6574: IFFALSE 6621
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6576: LD_VAR 0 2
6580: PPUSH
6581: LD_VAR 0 7
6585: PPUSH
6586: LD_VAR 0 5
6590: PPUSH
6591: LD_VAR 0 6
6595: PPUSH
6596: LD_VAR 0 4
6600: PUSH
6601: LD_INT 1
6603: PPUSH
6604: LD_VAR 0 4
6608: PPUSH
6609: CALL_OW 12
6613: ARRAY
6614: PPUSH
6615: CALL_OW 185
6619: GO 6573
6621: POP
6622: POP
// end ;
6623: LD_VAR 0 8
6627: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6628: LD_INT 0
6630: PPUSH
6631: PPUSH
6632: PPUSH
6633: PPUSH
6634: PPUSH
6635: PPUSH
6636: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6637: LD_ADDR_VAR 0 8
6641: PUSH
6642: LD_INT 22
6644: PUSH
6645: LD_VAR 0 1
6649: PUSH
6650: EMPTY
6651: LIST
6652: LIST
6653: PUSH
6654: LD_INT 21
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: EMPTY
6661: LIST
6662: LIST
6663: PUSH
6664: LD_INT 24
6666: PUSH
6667: LD_INT 650
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6684: LD_INT 22
6686: PUSH
6687: LD_VAR 0 1
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: PUSH
6696: LD_INT 21
6698: PUSH
6699: LD_INT 2
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: PUSH
6706: LD_INT 24
6708: PUSH
6709: LD_INT 1000
6711: PUSH
6712: EMPTY
6713: LIST
6714: LIST
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: LIST
6720: PPUSH
6721: CALL_OW 69
6725: PUSH
6726: LD_INT 3
6728: PUSH
6729: LD_INT 4
6731: PUSH
6732: LD_INT 5
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: LIST
6739: PUSH
6740: LD_OWVAR 67
6744: ARRAY
6745: GREATEREQUAL
6746: IFFALSE 7203
// repeat wait ( 0 0$1 ) ;
6748: LD_INT 35
6750: PPUSH
6751: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6755: LD_ADDR_VAR 0 8
6759: PUSH
6760: LD_INT 22
6762: PUSH
6763: LD_VAR 0 1
6767: PUSH
6768: EMPTY
6769: LIST
6770: LIST
6771: PUSH
6772: LD_INT 21
6774: PUSH
6775: LD_INT 2
6777: PUSH
6778: EMPTY
6779: LIST
6780: LIST
6781: PUSH
6782: LD_INT 24
6784: PUSH
6785: LD_INT 650
6787: PUSH
6788: EMPTY
6789: LIST
6790: LIST
6791: PUSH
6792: EMPTY
6793: LIST
6794: LIST
6795: LIST
6796: PPUSH
6797: CALL_OW 69
6801: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6802: LD_INT 22
6804: PUSH
6805: LD_VAR 0 1
6809: PUSH
6810: EMPTY
6811: LIST
6812: LIST
6813: PUSH
6814: LD_INT 95
6816: PUSH
6817: LD_VAR 0 2
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: PUSH
6826: EMPTY
6827: LIST
6828: LIST
6829: PPUSH
6830: CALL_OW 69
6834: NOT
6835: PUSH
6836: LD_VAR 0 11
6840: PUSH
6841: LD_INT 0
6843: EQUAL
6844: AND
6845: IFFALSE 6900
// for i := 1 to wayX do
6847: LD_ADDR_VAR 0 6
6851: PUSH
6852: DOUBLE
6853: LD_INT 1
6855: DEC
6856: ST_TO_ADDR
6857: LD_VAR 0 3
6861: PUSH
6862: FOR_TO
6863: IFFALSE 6898
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6865: LD_VAR 0 8
6869: PPUSH
6870: LD_VAR 0 3
6874: PUSH
6875: LD_VAR 0 6
6879: ARRAY
6880: PPUSH
6881: LD_VAR 0 4
6885: PUSH
6886: LD_VAR 0 6
6890: ARRAY
6891: PPUSH
6892: CALL_OW 174
6896: GO 6862
6898: POP
6899: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6900: LD_INT 22
6902: PUSH
6903: LD_VAR 0 1
6907: PUSH
6908: EMPTY
6909: LIST
6910: LIST
6911: PUSH
6912: LD_INT 95
6914: PUSH
6915: LD_VAR 0 2
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: EMPTY
6925: LIST
6926: LIST
6927: PPUSH
6928: CALL_OW 69
6932: IFFALSE 7156
// begin seeEnemy = 1 ;
6934: LD_ADDR_VAR 0 11
6938: PUSH
6939: LD_INT 1
6941: ST_TO_ADDR
// for j in vehiclesOK do
6942: LD_ADDR_VAR 0 7
6946: PUSH
6947: LD_VAR 0 8
6951: PUSH
6952: FOR_IN
6953: IFFALSE 7154
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6955: LD_ADDR_VAR 0 9
6959: PUSH
6960: LD_INT 81
6962: PUSH
6963: LD_VAR 0 1
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 101
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 69
6990: PPUSH
6991: LD_VAR 0 7
6995: PPUSH
6996: CALL_OW 74
7000: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7001: LD_ADDR_VAR 0 10
7005: PUSH
7006: LD_INT 81
7008: PUSH
7009: LD_VAR 0 1
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: PUSH
7018: LD_INT 101
7020: PUSH
7021: LD_INT 1
7023: PUSH
7024: EMPTY
7025: LIST
7026: LIST
7027: PUSH
7028: LD_INT 2
7030: PUSH
7031: LD_INT 59
7033: PUSH
7034: EMPTY
7035: LIST
7036: PUSH
7037: LD_INT 21
7039: PUSH
7040: LD_INT 1
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 21
7049: PUSH
7050: LD_INT 2
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: EMPTY
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: PUSH
7068: EMPTY
7069: LIST
7070: PPUSH
7071: CALL_OW 69
7075: PPUSH
7076: LD_VAR 0 7
7080: PPUSH
7081: CALL_OW 74
7085: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7086: LD_VAR 0 7
7090: PPUSH
7091: LD_VAR 0 9
7095: PPUSH
7096: CALL_OW 296
7100: PUSH
7101: LD_INT 8
7103: PLUS
7104: PUSH
7105: LD_VAR 0 7
7109: PPUSH
7110: LD_VAR 0 10
7114: PPUSH
7115: CALL_OW 296
7119: LESS
7120: IFFALSE 7138
// ComAttackUnit ( j , target1 ) else
7122: LD_VAR 0 7
7126: PPUSH
7127: LD_VAR 0 9
7131: PPUSH
7132: CALL_OW 115
7136: GO 7152
// ComAttackUnit ( j , target2 ) ;
7138: LD_VAR 0 7
7142: PPUSH
7143: LD_VAR 0 10
7147: PPUSH
7148: CALL_OW 115
// end ;
7152: GO 6952
7154: POP
7155: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7156: LD_INT 22
7158: PUSH
7159: LD_VAR 0 1
7163: PUSH
7164: EMPTY
7165: LIST
7166: LIST
7167: PUSH
7168: LD_INT 21
7170: PUSH
7171: LD_INT 2
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: LD_INT 24
7180: PUSH
7181: LD_INT 1000
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: LIST
7192: PPUSH
7193: CALL_OW 69
7197: PUSH
7198: LD_INT 0
7200: EQUAL
7201: IFFALSE 6748
// seeEnemy = 0 ;
7203: LD_ADDR_VAR 0 11
7207: PUSH
7208: LD_INT 0
7210: ST_TO_ADDR
// end ;
7211: LD_VAR 0 5
7215: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7216: LD_INT 0
7218: PPUSH
7219: PPUSH
7220: PPUSH
7221: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7222: LD_ADDR_VAR 0 8
7226: PUSH
7227: LD_INT 22
7229: PUSH
7230: LD_VAR 0 1
7234: PUSH
7235: EMPTY
7236: LIST
7237: LIST
7238: PUSH
7239: LD_INT 21
7241: PUSH
7242: LD_INT 2
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: LD_INT 24
7254: PUSH
7255: LD_INT 650
7257: PUSH
7258: EMPTY
7259: LIST
7260: LIST
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: EMPTY
7267: LIST
7268: LIST
7269: LIST
7270: PPUSH
7271: CALL_OW 69
7275: ST_TO_ADDR
// if damageVehicles > 0 then
7276: LD_VAR 0 8
7280: PUSH
7281: LD_INT 0
7283: GREATER
7284: IFFALSE 7305
// ComMoveXY ( damageVehicles , repX , repY ) ;
7286: LD_VAR 0 8
7290: PPUSH
7291: LD_VAR 0 3
7295: PPUSH
7296: LD_VAR 0 4
7300: PPUSH
7301: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7305: LD_VAR 0 8
7309: PPUSH
7310: LD_INT 95
7312: PUSH
7313: LD_VAR 0 2
7317: PUSH
7318: EMPTY
7319: LIST
7320: LIST
7321: PUSH
7322: LD_INT 3
7324: PUSH
7325: LD_INT 58
7327: PUSH
7328: EMPTY
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PUSH
7335: EMPTY
7336: LIST
7337: LIST
7338: PPUSH
7339: CALL_OW 72
7343: PUSH
7344: LD_INT 0
7346: GREATER
7347: IFFALSE 7414
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7349: LD_ADDR_VAR 0 6
7353: PUSH
7354: LD_VAR 0 8
7358: PPUSH
7359: LD_INT 95
7361: PUSH
7362: LD_VAR 0 2
7366: PUSH
7367: EMPTY
7368: LIST
7369: LIST
7370: PUSH
7371: LD_INT 3
7373: PUSH
7374: LD_INT 58
7376: PUSH
7377: EMPTY
7378: LIST
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 72
7392: PUSH
7393: FOR_IN
7394: IFFALSE 7412
// ComExitVehicle ( UnitsInside ( i ) ) ;
7396: LD_VAR 0 6
7400: PPUSH
7401: CALL_OW 313
7405: PPUSH
7406: CALL_OW 121
7410: GO 7393
7412: POP
7413: POP
// end ;
7414: LD_VAR 0 5
7418: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7419: LD_INT 0
7421: PPUSH
7422: PPUSH
7423: PPUSH
7424: PPUSH
7425: PPUSH
7426: PPUSH
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
// for i = 1 to medicCount do
7432: LD_ADDR_VAR 0 14
7436: PUSH
7437: DOUBLE
7438: LD_INT 1
7440: DEC
7441: ST_TO_ADDR
7442: LD_VAR 0 7
7446: PUSH
7447: FOR_TO
7448: IFFALSE 7530
// begin uc_side = side ;
7450: LD_ADDR_OWVAR 20
7454: PUSH
7455: LD_VAR 0 1
7459: ST_TO_ADDR
// uc_nation = nation ;
7460: LD_ADDR_OWVAR 21
7464: PUSH
7465: LD_VAR 0 2
7469: ST_TO_ADDR
// hc_name =  ;
7470: LD_ADDR_OWVAR 26
7474: PUSH
7475: LD_STRING 
7477: ST_TO_ADDR
// hc_gallery =  ;
7478: LD_ADDR_OWVAR 33
7482: PUSH
7483: LD_STRING 
7485: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7486: LD_INT 0
7488: PPUSH
7489: LD_INT 4
7491: PPUSH
7492: LD_VAR 0 8
7496: PPUSH
7497: CALL_OW 380
// un = CreateHuman ;
7501: LD_ADDR_VAR 0 16
7505: PUSH
7506: CALL_OW 44
7510: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7511: LD_VAR 0 16
7515: PPUSH
7516: LD_VAR 0 9
7520: PPUSH
7521: LD_INT 0
7523: PPUSH
7524: CALL_OW 49
// end ;
7528: GO 7447
7530: POP
7531: POP
// for i = 1 to soldierCount do
7532: LD_ADDR_VAR 0 14
7536: PUSH
7537: DOUBLE
7538: LD_INT 1
7540: DEC
7541: ST_TO_ADDR
7542: LD_VAR 0 3
7546: PUSH
7547: FOR_TO
7548: IFFALSE 7630
// begin uc_side = side ;
7550: LD_ADDR_OWVAR 20
7554: PUSH
7555: LD_VAR 0 1
7559: ST_TO_ADDR
// uc_nation = nation ;
7560: LD_ADDR_OWVAR 21
7564: PUSH
7565: LD_VAR 0 2
7569: ST_TO_ADDR
// hc_name =  ;
7570: LD_ADDR_OWVAR 26
7574: PUSH
7575: LD_STRING 
7577: ST_TO_ADDR
// hc_gallery =  ;
7578: LD_ADDR_OWVAR 33
7582: PUSH
7583: LD_STRING 
7585: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7586: LD_INT 0
7588: PPUSH
7589: LD_INT 1
7591: PPUSH
7592: LD_VAR 0 8
7596: PPUSH
7597: CALL_OW 380
// un = CreateHuman ;
7601: LD_ADDR_VAR 0 16
7605: PUSH
7606: CALL_OW 44
7610: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7611: LD_VAR 0 16
7615: PPUSH
7616: LD_VAR 0 9
7620: PPUSH
7621: LD_INT 0
7623: PPUSH
7624: CALL_OW 49
// end ;
7628: GO 7547
7630: POP
7631: POP
// for i = 1 to sniperCount do
7632: LD_ADDR_VAR 0 14
7636: PUSH
7637: DOUBLE
7638: LD_INT 1
7640: DEC
7641: ST_TO_ADDR
7642: LD_VAR 0 4
7646: PUSH
7647: FOR_TO
7648: IFFALSE 7730
// begin uc_side = side ;
7650: LD_ADDR_OWVAR 20
7654: PUSH
7655: LD_VAR 0 1
7659: ST_TO_ADDR
// uc_nation = nation ;
7660: LD_ADDR_OWVAR 21
7664: PUSH
7665: LD_VAR 0 2
7669: ST_TO_ADDR
// hc_name =  ;
7670: LD_ADDR_OWVAR 26
7674: PUSH
7675: LD_STRING 
7677: ST_TO_ADDR
// hc_gallery =  ;
7678: LD_ADDR_OWVAR 33
7682: PUSH
7683: LD_STRING 
7685: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7686: LD_INT 0
7688: PPUSH
7689: LD_INT 5
7691: PPUSH
7692: LD_VAR 0 8
7696: PPUSH
7697: CALL_OW 380
// un = CreateHuman ;
7701: LD_ADDR_VAR 0 16
7705: PUSH
7706: CALL_OW 44
7710: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7711: LD_VAR 0 16
7715: PPUSH
7716: LD_VAR 0 9
7720: PPUSH
7721: LD_INT 0
7723: PPUSH
7724: CALL_OW 49
// end ;
7728: GO 7647
7730: POP
7731: POP
// for i = 1 to bazookCount do
7732: LD_ADDR_VAR 0 14
7736: PUSH
7737: DOUBLE
7738: LD_INT 1
7740: DEC
7741: ST_TO_ADDR
7742: LD_VAR 0 5
7746: PUSH
7747: FOR_TO
7748: IFFALSE 7830
// begin uc_side = side ;
7750: LD_ADDR_OWVAR 20
7754: PUSH
7755: LD_VAR 0 1
7759: ST_TO_ADDR
// uc_nation = nation ;
7760: LD_ADDR_OWVAR 21
7764: PUSH
7765: LD_VAR 0 2
7769: ST_TO_ADDR
// hc_name =  ;
7770: LD_ADDR_OWVAR 26
7774: PUSH
7775: LD_STRING 
7777: ST_TO_ADDR
// hc_gallery =  ;
7778: LD_ADDR_OWVAR 33
7782: PUSH
7783: LD_STRING 
7785: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7786: LD_INT 0
7788: PPUSH
7789: LD_INT 9
7791: PPUSH
7792: LD_VAR 0 8
7796: PPUSH
7797: CALL_OW 380
// un = CreateHuman ;
7801: LD_ADDR_VAR 0 16
7805: PUSH
7806: CALL_OW 44
7810: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7811: LD_VAR 0 16
7815: PPUSH
7816: LD_VAR 0 9
7820: PPUSH
7821: LD_INT 0
7823: PPUSH
7824: CALL_OW 49
// end ;
7828: GO 7747
7830: POP
7831: POP
// for i = 1 to mortalCount do
7832: LD_ADDR_VAR 0 14
7836: PUSH
7837: DOUBLE
7838: LD_INT 1
7840: DEC
7841: ST_TO_ADDR
7842: LD_VAR 0 6
7846: PUSH
7847: FOR_TO
7848: IFFALSE 7930
// begin uc_side = side ;
7850: LD_ADDR_OWVAR 20
7854: PUSH
7855: LD_VAR 0 1
7859: ST_TO_ADDR
// uc_nation = nation ;
7860: LD_ADDR_OWVAR 21
7864: PUSH
7865: LD_VAR 0 2
7869: ST_TO_ADDR
// hc_name =  ;
7870: LD_ADDR_OWVAR 26
7874: PUSH
7875: LD_STRING 
7877: ST_TO_ADDR
// hc_gallery =  ;
7878: LD_ADDR_OWVAR 33
7882: PUSH
7883: LD_STRING 
7885: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7886: LD_INT 0
7888: PPUSH
7889: LD_INT 8
7891: PPUSH
7892: LD_VAR 0 8
7896: PPUSH
7897: CALL_OW 380
// un = CreateHuman ;
7901: LD_ADDR_VAR 0 16
7905: PUSH
7906: CALL_OW 44
7910: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7911: LD_VAR 0 16
7915: PPUSH
7916: LD_VAR 0 9
7920: PPUSH
7921: LD_INT 0
7923: PPUSH
7924: CALL_OW 49
// end ;
7928: GO 7847
7930: POP
7931: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7932: LD_ADDR_VAR 0 19
7936: PUSH
7937: LD_INT 22
7939: PUSH
7940: LD_VAR 0 1
7944: PUSH
7945: EMPTY
7946: LIST
7947: LIST
7948: PUSH
7949: LD_INT 2
7951: PUSH
7952: LD_INT 25
7954: PUSH
7955: LD_INT 1
7957: PUSH
7958: EMPTY
7959: LIST
7960: LIST
7961: PUSH
7962: LD_INT 25
7964: PUSH
7965: LD_INT 5
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 25
7974: PUSH
7975: LD_INT 8
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: LD_INT 25
7984: PUSH
7985: LD_INT 9
7987: PUSH
7988: EMPTY
7989: LIST
7990: LIST
7991: PUSH
7992: EMPTY
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: PUSH
7999: EMPTY
8000: LIST
8001: LIST
8002: PPUSH
8003: CALL_OW 69
8007: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8008: LD_ADDR_VAR 0 18
8012: PUSH
8013: LD_INT 22
8015: PUSH
8016: LD_VAR 0 1
8020: PUSH
8021: EMPTY
8022: LIST
8023: LIST
8024: PUSH
8025: LD_INT 25
8027: PUSH
8028: LD_INT 4
8030: PUSH
8031: EMPTY
8032: LIST
8033: LIST
8034: PUSH
8035: EMPTY
8036: LIST
8037: LIST
8038: PPUSH
8039: CALL_OW 69
8043: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8044: LD_VAR 0 18
8048: PPUSH
8049: LD_VAR 0 10
8053: PPUSH
8054: CALL_OW 113
// if strategy = 1 then
8058: LD_VAR 0 12
8062: PUSH
8063: LD_INT 1
8065: EQUAL
8066: IFFALSE 8582
// begin repeat wait ( 0 0$3 ) ;
8068: LD_INT 105
8070: PPUSH
8071: CALL_OW 67
// for i in soldiersOK_list do
8075: LD_ADDR_VAR 0 14
8079: PUSH
8080: LD_VAR 0 19
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8150
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8088: LD_VAR 0 14
8092: PPUSH
8093: LD_INT 91
8095: PPUSH
8096: LD_INT 63
8098: PPUSH
8099: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8103: LD_VAR 0 14
8107: PPUSH
8108: LD_INT 101
8110: PPUSH
8111: LD_INT 53
8113: PPUSH
8114: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8118: LD_VAR 0 14
8122: PPUSH
8123: LD_INT 75
8125: PPUSH
8126: LD_INT 23
8128: PPUSH
8129: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8133: LD_VAR 0 14
8137: PPUSH
8138: LD_INT 78
8140: PPUSH
8141: LD_INT 8
8143: PPUSH
8144: CALL_OW 174
// end ;
8148: GO 8085
8150: POP
8151: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8152: LD_INT 15
8154: PPUSH
8155: LD_INT 22
8157: PUSH
8158: LD_VAR 0 1
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PPUSH
8167: CALL_OW 70
8171: PUSH
8172: LD_INT 2
8174: GREATER
8175: IFFALSE 8068
// repeat wait ( 0 0$1 ) ;
8177: LD_INT 35
8179: PPUSH
8180: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8184: LD_ADDR_VAR 0 17
8188: PUSH
8189: LD_INT 22
8191: PUSH
8192: LD_VAR 0 1
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PUSH
8201: LD_INT 1
8203: PUSH
8204: LD_INT 3
8206: PUSH
8207: LD_INT 24
8209: PUSH
8210: LD_INT 550
8212: PUSH
8213: EMPTY
8214: LIST
8215: LIST
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 24
8223: PUSH
8224: LD_INT 250
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: EMPTY
8237: LIST
8238: LIST
8239: PPUSH
8240: CALL_OW 69
8244: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8245: LD_ADDR_VAR 0 19
8249: PUSH
8250: LD_INT 22
8252: PUSH
8253: LD_VAR 0 1
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: PUSH
8262: LD_INT 2
8264: PUSH
8265: LD_INT 25
8267: PUSH
8268: LD_INT 1
8270: PUSH
8271: EMPTY
8272: LIST
8273: LIST
8274: PUSH
8275: LD_INT 25
8277: PUSH
8278: LD_INT 5
8280: PUSH
8281: EMPTY
8282: LIST
8283: LIST
8284: PUSH
8285: LD_INT 25
8287: PUSH
8288: LD_INT 8
8290: PUSH
8291: EMPTY
8292: LIST
8293: LIST
8294: PUSH
8295: LD_INT 25
8297: PUSH
8298: LD_INT 9
8300: PUSH
8301: EMPTY
8302: LIST
8303: LIST
8304: PUSH
8305: EMPTY
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: PUSH
8312: LD_INT 24
8314: PUSH
8315: LD_INT 1000
8317: PUSH
8318: EMPTY
8319: LIST
8320: LIST
8321: PUSH
8322: EMPTY
8323: LIST
8324: LIST
8325: LIST
8326: PPUSH
8327: CALL_OW 69
8331: ST_TO_ADDR
// if medicCount > 0 then
8332: LD_VAR 0 7
8336: PUSH
8337: LD_INT 0
8339: GREATER
8340: IFFALSE 8384
// begin if damageUnit_list > 0 then
8342: LD_VAR 0 17
8346: PUSH
8347: LD_INT 0
8349: GREATER
8350: IFFALSE 8384
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8352: LD_VAR 0 17
8356: PPUSH
8357: LD_VAR 0 10
8361: PPUSH
8362: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8366: LD_VAR 0 7
8370: PPUSH
8371: LD_VAR 0 17
8375: PUSH
8376: LD_INT 1
8378: ARRAY
8379: PPUSH
8380: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8384: LD_ADDR_VAR 0 14
8388: PUSH
8389: LD_VAR 0 19
8393: PUSH
8394: FOR_IN
8395: IFFALSE 8571
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8397: LD_ADDR_VAR 0 22
8401: PUSH
8402: LD_INT 22
8404: PUSH
8405: LD_VAR 0 11
8409: PUSH
8410: EMPTY
8411: LIST
8412: LIST
8413: PPUSH
8414: CALL_OW 69
8418: PPUSH
8419: LD_VAR 0 14
8423: PPUSH
8424: CALL_OW 74
8428: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8429: LD_ADDR_VAR 0 23
8433: PUSH
8434: LD_INT 22
8436: PUSH
8437: LD_VAR 0 11
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 2
8448: PUSH
8449: LD_INT 59
8451: PUSH
8452: EMPTY
8453: LIST
8454: PUSH
8455: LD_INT 21
8457: PUSH
8458: LD_INT 1
8460: PUSH
8461: EMPTY
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 21
8467: PUSH
8468: LD_INT 2
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: EMPTY
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: PPUSH
8493: LD_VAR 0 14
8497: PPUSH
8498: CALL_OW 74
8502: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8503: LD_VAR 0 14
8507: PPUSH
8508: LD_VAR 0 22
8512: PPUSH
8513: CALL_OW 296
8517: PUSH
8518: LD_INT 8
8520: PLUS
8521: PUSH
8522: LD_VAR 0 14
8526: PPUSH
8527: LD_VAR 0 23
8531: PPUSH
8532: CALL_OW 296
8536: LESS
8537: IFFALSE 8555
// begin ComAttackUnit ( i , target1 ) ;
8539: LD_VAR 0 14
8543: PPUSH
8544: LD_VAR 0 22
8548: PPUSH
8549: CALL_OW 115
// end else
8553: GO 8569
// begin ComAttackUnit ( i , target2 ) ;
8555: LD_VAR 0 14
8559: PPUSH
8560: LD_VAR 0 23
8564: PPUSH
8565: CALL_OW 115
// end ; end ;
8569: GO 8394
8571: POP
8572: POP
// until soldiersOK_list = [ ] ;
8573: LD_VAR 0 19
8577: PUSH
8578: EMPTY
8579: EQUAL
8580: IFFALSE 8177
// end ; if strategy = 2 then
8582: LD_VAR 0 12
8586: PUSH
8587: LD_INT 2
8589: EQUAL
8590: IFFALSE 9076
// begin repeat wait ( 0 0$1 ) ;
8592: LD_INT 35
8594: PPUSH
8595: CALL_OW 67
// for i in soldiersOK_list do
8599: LD_ADDR_VAR 0 14
8603: PUSH
8604: LD_VAR 0 19
8608: PUSH
8609: FOR_IN
8610: IFFALSE 8644
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8612: LD_VAR 0 14
8616: PPUSH
8617: LD_INT 91
8619: PPUSH
8620: LD_INT 63
8622: PPUSH
8623: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8627: LD_VAR 0 14
8631: PPUSH
8632: LD_INT 75
8634: PPUSH
8635: LD_INT 33
8637: PPUSH
8638: CALL_OW 174
// end ;
8642: GO 8609
8644: POP
8645: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8646: LD_INT 16
8648: PPUSH
8649: LD_INT 22
8651: PUSH
8652: LD_VAR 0 1
8656: PUSH
8657: EMPTY
8658: LIST
8659: LIST
8660: PPUSH
8661: CALL_OW 70
8665: PUSH
8666: LD_INT 2
8668: GREATER
8669: IFFALSE 8592
// repeat wait ( 0 0$3 ) ;
8671: LD_INT 105
8673: PPUSH
8674: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8678: LD_ADDR_VAR 0 17
8682: PUSH
8683: LD_INT 22
8685: PUSH
8686: LD_VAR 0 1
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: LD_INT 3
8700: PUSH
8701: LD_INT 24
8703: PUSH
8704: LD_INT 550
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: PUSH
8711: EMPTY
8712: LIST
8713: LIST
8714: PUSH
8715: LD_INT 24
8717: PUSH
8718: LD_INT 250
8720: PUSH
8721: EMPTY
8722: LIST
8723: LIST
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: LIST
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: PPUSH
8734: CALL_OW 69
8738: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8739: LD_ADDR_VAR 0 19
8743: PUSH
8744: LD_INT 22
8746: PUSH
8747: LD_VAR 0 1
8751: PUSH
8752: EMPTY
8753: LIST
8754: LIST
8755: PUSH
8756: LD_INT 2
8758: PUSH
8759: LD_INT 25
8761: PUSH
8762: LD_INT 1
8764: PUSH
8765: EMPTY
8766: LIST
8767: LIST
8768: PUSH
8769: LD_INT 25
8771: PUSH
8772: LD_INT 5
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 25
8781: PUSH
8782: LD_INT 8
8784: PUSH
8785: EMPTY
8786: LIST
8787: LIST
8788: PUSH
8789: LD_INT 25
8791: PUSH
8792: LD_INT 9
8794: PUSH
8795: EMPTY
8796: LIST
8797: LIST
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: LIST
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 24
8808: PUSH
8809: LD_INT 1000
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: ST_TO_ADDR
// if medicCount > 0 then
8826: LD_VAR 0 7
8830: PUSH
8831: LD_INT 0
8833: GREATER
8834: IFFALSE 8878
// begin if damageUnit_list > 0 then
8836: LD_VAR 0 17
8840: PUSH
8841: LD_INT 0
8843: GREATER
8844: IFFALSE 8878
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8846: LD_VAR 0 17
8850: PPUSH
8851: LD_VAR 0 10
8855: PPUSH
8856: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8860: LD_VAR 0 7
8864: PPUSH
8865: LD_VAR 0 17
8869: PUSH
8870: LD_INT 1
8872: ARRAY
8873: PPUSH
8874: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8878: LD_ADDR_VAR 0 14
8882: PUSH
8883: LD_VAR 0 19
8887: PUSH
8888: FOR_IN
8889: IFFALSE 9065
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8891: LD_ADDR_VAR 0 22
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_VAR 0 11
8903: PUSH
8904: EMPTY
8905: LIST
8906: LIST
8907: PPUSH
8908: CALL_OW 69
8912: PPUSH
8913: LD_VAR 0 14
8917: PPUSH
8918: CALL_OW 74
8922: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8923: LD_ADDR_VAR 0 23
8927: PUSH
8928: LD_INT 22
8930: PUSH
8931: LD_VAR 0 11
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PUSH
8940: LD_INT 2
8942: PUSH
8943: LD_INT 59
8945: PUSH
8946: EMPTY
8947: LIST
8948: PUSH
8949: LD_INT 21
8951: PUSH
8952: LD_INT 1
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 21
8961: PUSH
8962: LD_INT 2
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: PUSH
8979: EMPTY
8980: LIST
8981: PPUSH
8982: CALL_OW 69
8986: PPUSH
8987: LD_VAR 0 14
8991: PPUSH
8992: CALL_OW 74
8996: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8997: LD_VAR 0 14
9001: PPUSH
9002: LD_VAR 0 22
9006: PPUSH
9007: CALL_OW 296
9011: PUSH
9012: LD_INT 8
9014: PLUS
9015: PUSH
9016: LD_VAR 0 14
9020: PPUSH
9021: LD_VAR 0 23
9025: PPUSH
9026: CALL_OW 296
9030: LESS
9031: IFFALSE 9049
// begin ComAttackUnit ( i , target1 ) ;
9033: LD_VAR 0 14
9037: PPUSH
9038: LD_VAR 0 22
9042: PPUSH
9043: CALL_OW 115
// end else
9047: GO 9063
// begin ComAttackUnit ( i , target2 ) ;
9049: LD_VAR 0 14
9053: PPUSH
9054: LD_VAR 0 23
9058: PPUSH
9059: CALL_OW 115
// end ; end ;
9063: GO 8888
9065: POP
9066: POP
// until soldiersOK_list = [ ] ;
9067: LD_VAR 0 19
9071: PUSH
9072: EMPTY
9073: EQUAL
9074: IFFALSE 8671
// end ; if not soldiersOK_list and medic_list then
9076: LD_VAR 0 19
9080: NOT
9081: PUSH
9082: LD_VAR 0 18
9086: AND
9087: IFFALSE 9227
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9089: LD_ADDR_VAR 0 18
9093: PUSH
9094: LD_INT 22
9096: PUSH
9097: LD_VAR 0 1
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: PUSH
9106: LD_INT 25
9108: PUSH
9109: LD_INT 4
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: PUSH
9116: LD_INT 50
9118: PUSH
9119: EMPTY
9120: LIST
9121: PUSH
9122: EMPTY
9123: LIST
9124: LIST
9125: LIST
9126: PPUSH
9127: CALL_OW 69
9131: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9132: LD_INT 35
9134: PPUSH
9135: CALL_OW 67
// for i in medic_list do
9139: LD_ADDR_VAR 0 14
9143: PUSH
9144: LD_VAR 0 18
9148: PUSH
9149: FOR_IN
9150: IFFALSE 9218
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9152: LD_VAR 0 14
9156: PPUSH
9157: CALL_OW 314
9161: NOT
9162: PUSH
9163: LD_VAR 0 14
9167: PPUSH
9168: LD_INT 4
9170: PPUSH
9171: CALL_OW 308
9175: NOT
9176: AND
9177: IFFALSE 9193
// ComMoveToArea ( i , RussianAttack ) else
9179: LD_VAR 0 14
9183: PPUSH
9184: LD_INT 4
9186: PPUSH
9187: CALL_OW 113
9191: GO 9216
// if IsInArea ( i , RussianAttack ) then
9193: LD_VAR 0 14
9197: PPUSH
9198: LD_INT 4
9200: PPUSH
9201: CALL_OW 308
9205: IFFALSE 9216
// RemoveUnit ( i ) ;
9207: LD_VAR 0 14
9211: PPUSH
9212: CALL_OW 64
9216: GO 9149
9218: POP
9219: POP
// until not medic_list ;
9220: LD_VAR 0 18
9224: NOT
9225: IFFALSE 9089
// end ; end ;
9227: LD_VAR 0 13
9231: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9232: LD_INT 0
9234: PPUSH
9235: PPUSH
9236: PPUSH
9237: PPUSH
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
// amChassisTab = [ ] ;
9245: LD_ADDR_VAR 0 19
9249: PUSH
9250: EMPTY
9251: ST_TO_ADDR
// arChassisTab = [ ] ;
9252: LD_ADDR_VAR 0 18
9256: PUSH
9257: EMPTY
9258: ST_TO_ADDR
// ruChassisTab = [ ] ;
9259: LD_ADDR_VAR 0 17
9263: PUSH
9264: EMPTY
9265: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9266: LD_INT 35
9268: PPUSH
9269: CALL_OW 67
// if nation = 1 then
9273: LD_VAR 0 5
9277: PUSH
9278: LD_INT 1
9280: EQUAL
9281: IFFALSE 9772
// begin uc_side = side ;
9283: LD_ADDR_OWVAR 20
9287: PUSH
9288: LD_VAR 0 2
9292: ST_TO_ADDR
// uc_nation = nation ;
9293: LD_ADDR_OWVAR 21
9297: PUSH
9298: LD_VAR 0 5
9302: ST_TO_ADDR
// vc_engine = vehengine ;
9303: LD_ADDR_OWVAR 39
9307: PUSH
9308: LD_VAR 0 6
9312: ST_TO_ADDR
// vc_control = vehcontrol ;
9313: LD_ADDR_OWVAR 38
9317: PUSH
9318: LD_VAR 0 7
9322: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9323: LD_ADDR_OWVAR 40
9327: PUSH
9328: LD_VAR 0 10
9332: PUSH
9333: LD_INT 1
9335: PPUSH
9336: LD_VAR 0 10
9340: PPUSH
9341: CALL_OW 12
9345: ARRAY
9346: ST_TO_ADDR
// for j = 1 to AMWeapon do
9347: LD_ADDR_VAR 0 14
9351: PUSH
9352: DOUBLE
9353: LD_INT 1
9355: DEC
9356: ST_TO_ADDR
9357: LD_VAR 0 10
9361: PUSH
9362: FOR_TO
9363: IFFALSE 9664
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9365: LD_VAR 0 10
9369: PUSH
9370: LD_VAR 0 14
9374: ARRAY
9375: PUSH
9376: LD_INT 2
9378: EQUAL
9379: PUSH
9380: LD_VAR 0 10
9384: PUSH
9385: LD_VAR 0 14
9389: ARRAY
9390: PUSH
9391: LD_INT 3
9393: EQUAL
9394: OR
9395: IFFALSE 9448
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9397: LD_ADDR_VAR 0 19
9401: PUSH
9402: LD_INT 1
9404: PUSH
9405: LD_INT 2
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: LD_INT 4
9413: PUSH
9414: LD_INT 5
9416: PUSH
9417: EMPTY
9418: LIST
9419: LIST
9420: LIST
9421: LIST
9422: LIST
9423: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9424: LD_ADDR_OWVAR 37
9428: PUSH
9429: LD_VAR 0 19
9433: PUSH
9434: LD_INT 1
9436: PPUSH
9437: LD_VAR 0 19
9441: PPUSH
9442: CALL_OW 12
9446: ARRAY
9447: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9448: LD_VAR 0 10
9452: PUSH
9453: LD_VAR 0 14
9457: ARRAY
9458: PUSH
9459: LD_INT 4
9461: EQUAL
9462: PUSH
9463: LD_VAR 0 10
9467: PUSH
9468: LD_VAR 0 14
9472: ARRAY
9473: PUSH
9474: LD_INT 5
9476: EQUAL
9477: OR
9478: PUSH
9479: LD_VAR 0 10
9483: PUSH
9484: LD_VAR 0 14
9488: ARRAY
9489: PUSH
9490: LD_INT 9
9492: EQUAL
9493: OR
9494: PUSH
9495: LD_VAR 0 10
9499: PUSH
9500: LD_VAR 0 14
9504: ARRAY
9505: PUSH
9506: LD_INT 11
9508: EQUAL
9509: OR
9510: PUSH
9511: LD_VAR 0 10
9515: PUSH
9516: LD_VAR 0 14
9520: ARRAY
9521: PUSH
9522: LD_INT 7
9524: EQUAL
9525: OR
9526: IFFALSE 9575
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9528: LD_ADDR_VAR 0 19
9532: PUSH
9533: LD_INT 2
9535: PUSH
9536: LD_INT 3
9538: PUSH
9539: LD_INT 4
9541: PUSH
9542: LD_INT 5
9544: PUSH
9545: EMPTY
9546: LIST
9547: LIST
9548: LIST
9549: LIST
9550: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9551: LD_ADDR_OWVAR 37
9555: PUSH
9556: LD_VAR 0 19
9560: PUSH
9561: LD_INT 1
9563: PPUSH
9564: LD_VAR 0 19
9568: PPUSH
9569: CALL_OW 12
9573: ARRAY
9574: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9575: LD_VAR 0 10
9579: PUSH
9580: LD_VAR 0 14
9584: ARRAY
9585: PUSH
9586: LD_INT 8
9588: EQUAL
9589: PUSH
9590: LD_VAR 0 10
9594: PUSH
9595: LD_VAR 0 14
9599: ARRAY
9600: PUSH
9601: LD_INT 6
9603: EQUAL
9604: OR
9605: PUSH
9606: LD_VAR 0 10
9610: PUSH
9611: LD_VAR 0 14
9615: ARRAY
9616: PUSH
9617: LD_INT 10
9619: EQUAL
9620: OR
9621: IFFALSE 9662
// begin amChassisTab = [ 4 , 5 ] ;
9623: LD_ADDR_VAR 0 19
9627: PUSH
9628: LD_INT 4
9630: PUSH
9631: LD_INT 5
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9638: LD_ADDR_OWVAR 37
9642: PUSH
9643: LD_VAR 0 19
9647: PUSH
9648: LD_INT 1
9650: PPUSH
9651: LD_VAR 0 19
9655: PPUSH
9656: CALL_OW 12
9660: ARRAY
9661: ST_TO_ADDR
// end ; end ;
9662: GO 9362
9664: POP
9665: POP
// veh = CreateVehicle ;
9666: LD_ADDR_VAR 0 16
9670: PUSH
9671: CALL_OW 45
9675: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9676: LD_VAR 0 16
9680: PPUSH
9681: LD_VAR 0 1
9685: PPUSH
9686: LD_INT 0
9688: PPUSH
9689: CALL_OW 49
// if vehControl = 1 then
9693: LD_VAR 0 7
9697: PUSH
9698: LD_INT 1
9700: EQUAL
9701: IFFALSE 9758
// begin hc_gallery =  ;
9703: LD_ADDR_OWVAR 33
9707: PUSH
9708: LD_STRING 
9710: ST_TO_ADDR
// hc_name =  ;
9711: LD_ADDR_OWVAR 26
9715: PUSH
9716: LD_STRING 
9718: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9719: LD_INT 0
9721: PPUSH
9722: LD_INT 3
9724: PPUSH
9725: LD_VAR 0 4
9729: PPUSH
9730: CALL_OW 380
// un = CreateHuman ;
9734: LD_ADDR_VAR 0 15
9738: PUSH
9739: CALL_OW 44
9743: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9744: LD_VAR 0 15
9748: PPUSH
9749: LD_VAR 0 16
9753: PPUSH
9754: CALL_OW 52
// end ; i = i + 1 ;
9758: LD_ADDR_VAR 0 13
9762: PUSH
9763: LD_VAR 0 13
9767: PUSH
9768: LD_INT 1
9770: PLUS
9771: ST_TO_ADDR
// end ; if nation = 2 then
9772: LD_VAR 0 5
9776: PUSH
9777: LD_INT 2
9779: EQUAL
9780: IFFALSE 10204
// begin uc_side = side ;
9782: LD_ADDR_OWVAR 20
9786: PUSH
9787: LD_VAR 0 2
9791: ST_TO_ADDR
// uc_nation = nation ;
9792: LD_ADDR_OWVAR 21
9796: PUSH
9797: LD_VAR 0 5
9801: ST_TO_ADDR
// vc_engine = vehengine ;
9802: LD_ADDR_OWVAR 39
9806: PUSH
9807: LD_VAR 0 6
9811: ST_TO_ADDR
// vc_control = vehcontrol ;
9812: LD_ADDR_OWVAR 38
9816: PUSH
9817: LD_VAR 0 7
9821: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9822: LD_ADDR_OWVAR 40
9826: PUSH
9827: LD_VAR 0 9
9831: PUSH
9832: LD_INT 1
9834: PPUSH
9835: LD_VAR 0 9
9839: PPUSH
9840: CALL_OW 12
9844: ARRAY
9845: ST_TO_ADDR
// for j = 1 to ARWeapons do
9846: LD_ADDR_VAR 0 14
9850: PUSH
9851: DOUBLE
9852: LD_INT 1
9854: DEC
9855: ST_TO_ADDR
9856: LD_VAR 0 9
9860: PUSH
9861: FOR_TO
9862: IFFALSE 10096
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9864: LD_VAR 0 9
9868: PUSH
9869: LD_VAR 0 14
9873: ARRAY
9874: PUSH
9875: LD_INT 24
9877: EQUAL
9878: PUSH
9879: LD_VAR 0 9
9883: PUSH
9884: LD_VAR 0 14
9888: ARRAY
9889: PUSH
9890: LD_INT 22
9892: EQUAL
9893: OR
9894: PUSH
9895: LD_VAR 0 9
9899: PUSH
9900: LD_VAR 0 14
9904: ARRAY
9905: PUSH
9906: LD_INT 23
9908: EQUAL
9909: OR
9910: PUSH
9911: LD_VAR 0 9
9915: PUSH
9916: LD_VAR 0 14
9920: ARRAY
9921: PUSH
9922: LD_INT 30
9924: EQUAL
9925: OR
9926: IFFALSE 9975
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9928: LD_ADDR_VAR 0 18
9932: PUSH
9933: LD_INT 11
9935: PUSH
9936: LD_INT 12
9938: PUSH
9939: LD_INT 13
9941: PUSH
9942: LD_INT 14
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9951: LD_ADDR_OWVAR 37
9955: PUSH
9956: LD_VAR 0 18
9960: PUSH
9961: LD_INT 1
9963: PPUSH
9964: LD_VAR 0 18
9968: PPUSH
9969: CALL_OW 12
9973: ARRAY
9974: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9975: LD_VAR 0 9
9979: PUSH
9980: LD_VAR 0 14
9984: ARRAY
9985: PUSH
9986: LD_INT 29
9988: EQUAL
9989: PUSH
9990: LD_VAR 0 9
9994: PUSH
9995: LD_VAR 0 14
9999: ARRAY
10000: PUSH
10001: LD_INT 28
10003: EQUAL
10004: OR
10005: PUSH
10006: LD_VAR 0 9
10010: PUSH
10011: LD_VAR 0 14
10015: ARRAY
10016: PUSH
10017: LD_INT 27
10019: EQUAL
10020: OR
10021: PUSH
10022: LD_VAR 0 9
10026: PUSH
10027: LD_VAR 0 14
10031: ARRAY
10032: PUSH
10033: LD_INT 26
10035: EQUAL
10036: OR
10037: PUSH
10038: LD_VAR 0 9
10042: PUSH
10043: LD_VAR 0 14
10047: ARRAY
10048: PUSH
10049: LD_INT 25
10051: EQUAL
10052: OR
10053: IFFALSE 10094
// begin arChassisTab = [ 13 , 14 ] ;
10055: LD_ADDR_VAR 0 18
10059: PUSH
10060: LD_INT 13
10062: PUSH
10063: LD_INT 14
10065: PUSH
10066: EMPTY
10067: LIST
10068: LIST
10069: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10070: LD_ADDR_OWVAR 37
10074: PUSH
10075: LD_VAR 0 18
10079: PUSH
10080: LD_INT 1
10082: PPUSH
10083: LD_VAR 0 18
10087: PPUSH
10088: CALL_OW 12
10092: ARRAY
10093: ST_TO_ADDR
// end ; end ;
10094: GO 9861
10096: POP
10097: POP
// veh = CreateVehicle ;
10098: LD_ADDR_VAR 0 16
10102: PUSH
10103: CALL_OW 45
10107: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10108: LD_VAR 0 16
10112: PPUSH
10113: LD_VAR 0 1
10117: PPUSH
10118: LD_INT 0
10120: PPUSH
10121: CALL_OW 49
// if vehcontrol = 1 then
10125: LD_VAR 0 7
10129: PUSH
10130: LD_INT 1
10132: EQUAL
10133: IFFALSE 10190
// begin hc_gallery =  ;
10135: LD_ADDR_OWVAR 33
10139: PUSH
10140: LD_STRING 
10142: ST_TO_ADDR
// hc_name =  ;
10143: LD_ADDR_OWVAR 26
10147: PUSH
10148: LD_STRING 
10150: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10151: LD_INT 0
10153: PPUSH
10154: LD_INT 3
10156: PPUSH
10157: LD_VAR 0 4
10161: PPUSH
10162: CALL_OW 380
// un = CreateHuman ;
10166: LD_ADDR_VAR 0 15
10170: PUSH
10171: CALL_OW 44
10175: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10176: LD_VAR 0 15
10180: PPUSH
10181: LD_VAR 0 16
10185: PPUSH
10186: CALL_OW 52
// end ; i = i + 1 ;
10190: LD_ADDR_VAR 0 13
10194: PUSH
10195: LD_VAR 0 13
10199: PUSH
10200: LD_INT 1
10202: PLUS
10203: ST_TO_ADDR
// end ; if nation = 3 then
10204: LD_VAR 0 5
10208: PUSH
10209: LD_INT 3
10211: EQUAL
10212: IFFALSE 10604
// begin uc_side = side ;
10214: LD_ADDR_OWVAR 20
10218: PUSH
10219: LD_VAR 0 2
10223: ST_TO_ADDR
// uc_nation = nation ;
10224: LD_ADDR_OWVAR 21
10228: PUSH
10229: LD_VAR 0 5
10233: ST_TO_ADDR
// vc_engine = vehengine ;
10234: LD_ADDR_OWVAR 39
10238: PUSH
10239: LD_VAR 0 6
10243: ST_TO_ADDR
// vc_control = vehcontrol ;
10244: LD_ADDR_OWVAR 38
10248: PUSH
10249: LD_VAR 0 7
10253: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10254: LD_ADDR_OWVAR 40
10258: PUSH
10259: LD_VAR 0 8
10263: PUSH
10264: LD_INT 1
10266: PPUSH
10267: LD_VAR 0 8
10271: PPUSH
10272: CALL_OW 12
10276: ARRAY
10277: ST_TO_ADDR
// for j = 1 to RuWeapons do
10278: LD_ADDR_VAR 0 14
10282: PUSH
10283: DOUBLE
10284: LD_INT 1
10286: DEC
10287: ST_TO_ADDR
10288: LD_VAR 0 8
10292: PUSH
10293: FOR_TO
10294: IFFALSE 10496
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10296: LD_VAR 0 8
10300: PUSH
10301: LD_VAR 0 14
10305: ARRAY
10306: PUSH
10307: LD_INT 42
10309: EQUAL
10310: PUSH
10311: LD_VAR 0 8
10315: PUSH
10316: LD_VAR 0 14
10320: ARRAY
10321: PUSH
10322: LD_INT 43
10324: EQUAL
10325: OR
10326: PUSH
10327: LD_VAR 0 8
10331: PUSH
10332: LD_VAR 0 14
10336: ARRAY
10337: PUSH
10338: LD_INT 44
10340: EQUAL
10341: OR
10342: PUSH
10343: LD_VAR 0 8
10347: PUSH
10348: LD_VAR 0 14
10352: ARRAY
10353: PUSH
10354: LD_INT 45
10356: EQUAL
10357: OR
10358: PUSH
10359: LD_VAR 0 8
10363: PUSH
10364: LD_VAR 0 14
10368: ARRAY
10369: PUSH
10370: LD_INT 49
10372: EQUAL
10373: OR
10374: IFFALSE 10423
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10376: LD_ADDR_VAR 0 17
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 22
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 24
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: LIST
10397: LIST
10398: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10399: LD_ADDR_OWVAR 37
10403: PUSH
10404: LD_VAR 0 17
10408: PUSH
10409: LD_INT 1
10411: PPUSH
10412: LD_VAR 0 17
10416: PPUSH
10417: CALL_OW 12
10421: ARRAY
10422: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10423: LD_VAR 0 8
10427: PUSH
10428: LD_VAR 0 14
10432: ARRAY
10433: PUSH
10434: LD_INT 46
10436: EQUAL
10437: PUSH
10438: LD_VAR 0 8
10442: PUSH
10443: LD_VAR 0 14
10447: ARRAY
10448: PUSH
10449: LD_INT 47
10451: EQUAL
10452: OR
10453: IFFALSE 10494
// begin ruChassisTab = [ 23 , 24 ] ;
10455: LD_ADDR_VAR 0 17
10459: PUSH
10460: LD_INT 23
10462: PUSH
10463: LD_INT 24
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10470: LD_ADDR_OWVAR 37
10474: PUSH
10475: LD_VAR 0 17
10479: PUSH
10480: LD_INT 1
10482: PPUSH
10483: LD_VAR 0 17
10487: PPUSH
10488: CALL_OW 12
10492: ARRAY
10493: ST_TO_ADDR
// end ; end ;
10494: GO 10293
10496: POP
10497: POP
// veh = CreateVehicle ;
10498: LD_ADDR_VAR 0 16
10502: PUSH
10503: CALL_OW 45
10507: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10508: LD_VAR 0 16
10512: PPUSH
10513: LD_VAR 0 1
10517: PPUSH
10518: LD_INT 0
10520: PPUSH
10521: CALL_OW 49
// if vehcontrol = 1 then
10525: LD_VAR 0 7
10529: PUSH
10530: LD_INT 1
10532: EQUAL
10533: IFFALSE 10590
// begin hc_gallery =  ;
10535: LD_ADDR_OWVAR 33
10539: PUSH
10540: LD_STRING 
10542: ST_TO_ADDR
// hc_name =  ;
10543: LD_ADDR_OWVAR 26
10547: PUSH
10548: LD_STRING 
10550: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10551: LD_INT 0
10553: PPUSH
10554: LD_INT 3
10556: PPUSH
10557: LD_VAR 0 4
10561: PPUSH
10562: CALL_OW 380
// un = CreateHuman ;
10566: LD_ADDR_VAR 0 15
10570: PUSH
10571: CALL_OW 44
10575: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10576: LD_VAR 0 15
10580: PPUSH
10581: LD_VAR 0 16
10585: PPUSH
10586: CALL_OW 52
// end ; i = i + 1 ;
10590: LD_ADDR_VAR 0 13
10594: PUSH
10595: LD_VAR 0 13
10599: PUSH
10600: LD_INT 1
10602: PLUS
10603: ST_TO_ADDR
// end ; until i = vehCount ;
10604: LD_VAR 0 13
10608: PUSH
10609: LD_VAR 0 3
10613: EQUAL
10614: IFFALSE 9266
// repeat wait ( 0 0$1 ) ;
10616: LD_INT 35
10618: PPUSH
10619: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10623: LD_INT 22
10625: PUSH
10626: LD_VAR 0 2
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: PUSH
10635: LD_INT 21
10637: PUSH
10638: LD_INT 2
10640: PUSH
10641: EMPTY
10642: LIST
10643: LIST
10644: PUSH
10645: LD_INT 24
10647: PUSH
10648: LD_INT 250
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 3
10657: PUSH
10658: LD_INT 58
10660: PUSH
10661: EMPTY
10662: LIST
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: PPUSH
10674: CALL_OW 69
10678: PUSH
10679: LD_INT 0
10681: GREATER
10682: IFFALSE 10924
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10684: LD_ADDR_VAR 0 13
10688: PUSH
10689: LD_INT 22
10691: PUSH
10692: LD_VAR 0 2
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 21
10703: PUSH
10704: LD_INT 2
10706: PUSH
10707: EMPTY
10708: LIST
10709: LIST
10710: PUSH
10711: LD_INT 24
10713: PUSH
10714: LD_INT 250
10716: PUSH
10717: EMPTY
10718: LIST
10719: LIST
10720: PUSH
10721: LD_INT 3
10723: PUSH
10724: LD_INT 58
10726: PUSH
10727: EMPTY
10728: LIST
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: PPUSH
10740: CALL_OW 69
10744: PUSH
10745: FOR_IN
10746: IFFALSE 10922
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10748: LD_ADDR_VAR 0 21
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_VAR 0 11
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PPUSH
10765: CALL_OW 69
10769: PPUSH
10770: LD_VAR 0 13
10774: PPUSH
10775: CALL_OW 74
10779: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10780: LD_ADDR_VAR 0 22
10784: PUSH
10785: LD_INT 22
10787: PUSH
10788: LD_VAR 0 11
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: PUSH
10797: LD_INT 2
10799: PUSH
10800: LD_INT 59
10802: PUSH
10803: EMPTY
10804: LIST
10805: PUSH
10806: LD_INT 21
10808: PUSH
10809: LD_INT 1
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 21
10818: PUSH
10819: LD_INT 2
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: PPUSH
10839: CALL_OW 69
10843: PPUSH
10844: LD_VAR 0 13
10848: PPUSH
10849: CALL_OW 74
10853: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10854: LD_VAR 0 13
10858: PPUSH
10859: LD_VAR 0 21
10863: PPUSH
10864: CALL_OW 296
10868: PUSH
10869: LD_INT 8
10871: PLUS
10872: PUSH
10873: LD_VAR 0 13
10877: PPUSH
10878: LD_VAR 0 22
10882: PPUSH
10883: CALL_OW 296
10887: LESS
10888: IFFALSE 10906
// begin ComAttackUnit ( i , target1 ) ;
10890: LD_VAR 0 13
10894: PPUSH
10895: LD_VAR 0 21
10899: PPUSH
10900: CALL_OW 115
// end else
10904: GO 10920
// begin ComAttackUnit ( i , target2 ) ;
10906: LD_VAR 0 13
10910: PPUSH
10911: LD_VAR 0 22
10915: PPUSH
10916: CALL_OW 115
// end ; end ;
10920: GO 10745
10922: POP
10923: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10924: LD_INT 22
10926: PUSH
10927: LD_VAR 0 2
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 21
10938: PUSH
10939: LD_INT 2
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 24
10948: PUSH
10949: LD_INT 250
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 3
10958: PUSH
10959: LD_INT 58
10961: PUSH
10962: EMPTY
10963: LIST
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: PPUSH
10975: CALL_OW 69
10979: PUSH
10980: LD_INT 0
10982: EQUAL
10983: IFFALSE 10616
// end ; end_of_file
10985: LD_VAR 0 12
10989: RET
// every 1 do var i , gammaSquad , startX , startY ;
10990: GO 10992
10992: DISABLE
10993: LD_INT 0
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10999: LD_ADDR_VAR 0 2
11003: PUSH
11004: LD_EXP 8
11008: PUSH
11009: LD_EXP 9
11013: PUSH
11014: LD_EXP 10
11018: PUSH
11019: LD_EXP 11
11023: PUSH
11024: LD_EXP 12
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11036: LD_ADDR_VAR 0 3
11040: PUSH
11041: LD_INT 46
11043: PUSH
11044: LD_INT 45
11046: PUSH
11047: LD_INT 44
11049: PUSH
11050: LD_INT 43
11052: PUSH
11053: LD_INT 42
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: LIST
11062: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11063: LD_ADDR_VAR 0 4
11067: PUSH
11068: LD_INT 14
11070: PUSH
11071: LD_INT 12
11073: PUSH
11074: LD_INT 10
11076: PUSH
11077: LD_INT 8
11079: PUSH
11080: LD_INT 6
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11090: LD_INT 32
11092: PPUSH
11093: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11097: LD_INT 32
11099: PPUSH
11100: LD_INT 51
11102: PPUSH
11103: LD_INT 26
11105: PPUSH
11106: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11110: LD_INT 32
11112: PPUSH
11113: LD_INT 53
11115: PPUSH
11116: LD_INT 23
11118: PPUSH
11119: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11123: LD_INT 32
11125: PPUSH
11126: LD_INT 52
11128: PPUSH
11129: LD_INT 19
11131: PPUSH
11132: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11136: LD_INT 35
11138: PPUSH
11139: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11143: LD_INT 32
11145: PPUSH
11146: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11150: LD_INT 32
11152: PPUSH
11153: CALL_OW 250
11157: PUSH
11158: LD_INT 52
11160: EQUAL
11161: PUSH
11162: LD_INT 32
11164: PPUSH
11165: CALL_OW 251
11169: PUSH
11170: LD_INT 19
11172: EQUAL
11173: AND
11174: IFFALSE 11136
// ComExitVehicle ( JMM ) ;
11176: LD_EXP 1
11180: PPUSH
11181: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11185: LD_EXP 7
11189: PPUSH
11190: LD_EXP 1
11194: PPUSH
11195: CALL_OW 119
// wait ( 0 0$01 ) ;
11199: LD_INT 35
11201: PPUSH
11202: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11206: LD_EXP 1
11210: PPUSH
11211: LD_INT 46
11213: PPUSH
11214: LD_INT 10
11216: PPUSH
11217: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11221: LD_EXP 1
11225: PPUSH
11226: LD_EXP 7
11230: PPUSH
11231: CALL_OW 179
// wait ( 0 0$4 ) ;
11235: LD_INT 140
11237: PPUSH
11238: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11242: LD_EXP 1
11246: PPUSH
11247: LD_STRING D1-JMM-1
11249: PPUSH
11250: CALL_OW 88
// if not dialogue_skipped then
11254: LD_OWVAR 59
11258: NOT
11259: IFFALSE 11916
// begin for i := 1 to gammaSquad do
11261: LD_ADDR_VAR 0 1
11265: PUSH
11266: DOUBLE
11267: LD_INT 1
11269: DEC
11270: ST_TO_ADDR
11271: LD_VAR 0 2
11275: PUSH
11276: FOR_TO
11277: IFFALSE 11338
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11279: LD_VAR 0 2
11283: PUSH
11284: LD_VAR 0 1
11288: ARRAY
11289: PPUSH
11290: LD_VAR 0 3
11294: PUSH
11295: LD_VAR 0 1
11299: ARRAY
11300: PPUSH
11301: LD_VAR 0 4
11305: PUSH
11306: LD_VAR 0 1
11310: ARRAY
11311: PPUSH
11312: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11316: LD_VAR 0 2
11320: PUSH
11321: LD_VAR 0 1
11325: ARRAY
11326: PPUSH
11327: LD_EXP 1
11331: PPUSH
11332: CALL_OW 179
// end ;
11336: GO 11276
11338: POP
11339: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11340: LD_EXP 4
11344: PPUSH
11345: LD_INT 41
11347: PPUSH
11348: LD_INT 4
11350: PPUSH
11351: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11355: LD_EXP 4
11359: PPUSH
11360: LD_EXP 1
11364: PPUSH
11365: CALL_OW 179
// if Lisa = false and Bobby then
11369: LD_EXP 4
11373: PUSH
11374: LD_INT 0
11376: EQUAL
11377: PUSH
11378: LD_EXP 2
11382: AND
11383: IFFALSE 11414
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11385: LD_EXP 2
11389: PPUSH
11390: LD_INT 41
11392: PPUSH
11393: LD_INT 4
11395: PPUSH
11396: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11400: LD_EXP 2
11404: PPUSH
11405: LD_EXP 1
11409: PPUSH
11410: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11414: LD_EXP 4
11418: PUSH
11419: LD_INT 0
11421: EQUAL
11422: PUSH
11423: LD_EXP 2
11427: PUSH
11428: LD_INT 0
11430: EQUAL
11431: AND
11432: PUSH
11433: LD_EXP 3
11437: AND
11438: IFFALSE 11469
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11440: LD_EXP 3
11444: PPUSH
11445: LD_INT 41
11447: PPUSH
11448: LD_INT 4
11450: PPUSH
11451: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11455: LD_EXP 3
11459: PPUSH
11460: LD_EXP 1
11464: PPUSH
11465: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11469: LD_EXP 4
11473: PUSH
11474: LD_INT 0
11476: EQUAL
11477: PUSH
11478: LD_EXP 2
11482: PUSH
11483: LD_INT 0
11485: EQUAL
11486: AND
11487: PUSH
11488: LD_EXP 3
11492: PUSH
11493: LD_INT 0
11495: EQUAL
11496: AND
11497: IFFALSE 11528
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11499: LD_EXP 6
11503: PPUSH
11504: LD_INT 41
11506: PPUSH
11507: LD_INT 4
11509: PPUSH
11510: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11514: LD_EXP 6
11518: PPUSH
11519: LD_EXP 1
11523: PPUSH
11524: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11528: LD_EXP 7
11532: PPUSH
11533: LD_STRING D1-Brown-1
11535: PPUSH
11536: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11540: LD_EXP 1
11544: PPUSH
11545: LD_STRING D1-JMM-2
11547: PPUSH
11548: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11552: LD_EXP 7
11556: PPUSH
11557: LD_STRING D1-Brown-2
11559: PPUSH
11560: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11564: LD_EXP 1
11568: PPUSH
11569: LD_EXP 9
11573: PPUSH
11574: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11578: LD_EXP 9
11582: PPUSH
11583: LD_STRING D1-FSol1-2
11585: PPUSH
11586: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11590: LD_EXP 1
11594: PPUSH
11595: LD_EXP 8
11599: PPUSH
11600: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11604: LD_EXP 8
11608: PPUSH
11609: LD_STRING D1-Sol2-2
11611: PPUSH
11612: CALL_OW 88
// if Lisa then
11616: LD_EXP 4
11620: IFFALSE 11660
// begin ComTurnUnit ( JMM , Lisa ) ;
11622: LD_EXP 1
11626: PPUSH
11627: LD_EXP 4
11631: PPUSH
11632: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11636: LD_EXP 4
11640: PPUSH
11641: LD_STRING D1-Lisa-2
11643: PPUSH
11644: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11648: LD_EXP 1
11652: PPUSH
11653: LD_STRING D1-JMM-3
11655: PPUSH
11656: CALL_OW 88
// end ; if Bobby then
11660: LD_EXP 2
11664: IFFALSE 11704
// begin ComTurnUnit ( JMM , Bobby ) ;
11666: LD_EXP 1
11670: PPUSH
11671: LD_EXP 2
11675: PPUSH
11676: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11680: LD_EXP 2
11684: PPUSH
11685: LD_STRING D1-Bobby-2
11687: PPUSH
11688: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11692: LD_EXP 1
11696: PPUSH
11697: LD_STRING D1-JMM-3
11699: PPUSH
11700: CALL_OW 88
// end ; if Cyrus then
11704: LD_EXP 3
11708: IFFALSE 11748
// begin ComTurnUnit ( JMM , Cyrus ) ;
11710: LD_EXP 1
11714: PPUSH
11715: LD_EXP 3
11719: PPUSH
11720: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11724: LD_EXP 3
11728: PPUSH
11729: LD_STRING D1-Cyrus-2
11731: PPUSH
11732: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11736: LD_EXP 1
11740: PPUSH
11741: LD_STRING D1-JMM-3
11743: PPUSH
11744: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11748: LD_EXP 1
11752: PPUSH
11753: LD_EXP 7
11757: PPUSH
11758: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11762: LD_EXP 1
11766: PPUSH
11767: LD_STRING D1-JMM-3a
11769: PPUSH
11770: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11774: LD_EXP 7
11778: PPUSH
11779: LD_INT 38
11781: PPUSH
11782: LD_INT 5
11784: PPUSH
11785: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11789: LD_EXP 7
11793: PPUSH
11794: LD_EXP 1
11798: PPUSH
11799: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11803: LD_EXP 1
11807: PPUSH
11808: LD_INT 40
11810: PPUSH
11811: LD_INT 7
11813: PPUSH
11814: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11818: LD_EXP 1
11822: PPUSH
11823: LD_EXP 7
11827: PPUSH
11828: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11832: LD_EXP 7
11836: PPUSH
11837: LD_STRING D1-Brown-3
11839: PPUSH
11840: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11844: LD_EXP 14
11848: PPUSH
11849: LD_STRING D1-Har-3
11851: PPUSH
11852: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11856: LD_EXP 1
11860: PPUSH
11861: LD_STRING D1-JMM-4
11863: PPUSH
11864: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11868: LD_EXP 14
11872: PPUSH
11873: LD_STRING D1-Har-4
11875: PPUSH
11876: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11880: LD_EXP 1
11884: PPUSH
11885: LD_STRING D1-JMM-5
11887: PPUSH
11888: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11892: LD_EXP 14
11896: PPUSH
11897: LD_STRING D1-Har-5
11899: PPUSH
11900: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11904: LD_EXP 1
11908: PPUSH
11909: LD_STRING D1-JMM-6
11911: PPUSH
11912: CALL_OW 88
// end ; InGameOff ;
11916: CALL_OW 9
// PrepareRussianConvoy ;
11920: CALL 2869 0 0
// ChangeMissionObjectives ( M1 ) ;
11924: LD_STRING M1
11926: PPUSH
11927: CALL_OW 337
// SaveForQuickRestart ;
11931: CALL_OW 22
// timerStatus = 1 ;
11935: LD_ADDR_EXP 29
11939: PUSH
11940: LD_INT 1
11942: ST_TO_ADDR
// startTimer = 1 ;
11943: LD_ADDR_EXP 30
11947: PUSH
11948: LD_INT 1
11950: ST_TO_ADDR
// bonusAvalaible = 1 ;
11951: LD_ADDR_EXP 42
11955: PUSH
11956: LD_INT 1
11958: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11959: LD_INT 105
11961: PPUSH
11962: CALL_OW 67
// DialogueOn ;
11966: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11970: LD_EXP 12
11974: PPUSH
11975: LD_STRING D9-Mech1-1
11977: PPUSH
11978: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11982: LD_EXP 1
11986: PPUSH
11987: LD_STRING D9-JMM-1
11989: PPUSH
11990: CALL_OW 88
// DialogueOff ;
11994: CALL_OW 7
// end ;
11998: PPOPN 4
12000: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12001: LD_INT 47
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: CALL_OW 321
12011: PUSH
12012: LD_INT 2
12014: EQUAL
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: LD_INT 1
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 21
12028: PUSH
12029: LD_INT 3
12031: PUSH
12032: EMPTY
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 30
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: PUSH
12046: EMPTY
12047: LIST
12048: LIST
12049: LIST
12050: PPUSH
12051: CALL_OW 69
12055: PUSH
12056: LD_INT 0
12058: GREATER
12059: AND
12060: IFFALSE 12290
12062: GO 12064
12064: DISABLE
// begin if IsOk ( Campell ) then
12065: LD_EXP 12
12069: PPUSH
12070: CALL_OW 302
12074: IFFALSE 12090
// begin Say ( Campell , D10-Mech1-1 ) ;
12076: LD_EXP 12
12080: PPUSH
12081: LD_STRING D10-Mech1-1
12083: PPUSH
12084: CALL_OW 88
// end else
12088: GO 12290
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12090: LD_INT 22
12092: PUSH
12093: LD_INT 1
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 21
12102: PUSH
12103: LD_INT 1
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 3
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 26
12122: PUSH
12123: LD_INT 1
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: PPUSH
12136: CALL_OW 69
12140: PUSH
12141: LD_EXP 1
12145: PUSH
12146: EMPTY
12147: LIST
12148: PUSH
12149: LD_INT 0
12151: GREATER
12152: DIFF
12153: IFFALSE 12227
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12155: LD_INT 22
12157: PUSH
12158: LD_INT 1
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 21
12167: PUSH
12168: LD_INT 1
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 25
12177: PUSH
12178: LD_INT 3
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: LD_INT 26
12187: PUSH
12188: LD_INT 1
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: PPUSH
12201: CALL_OW 69
12205: PUSH
12206: LD_EXP 1
12210: PUSH
12211: EMPTY
12212: LIST
12213: DIFF
12214: PPUSH
12215: LD_STRING D10-Mech1-1
12217: PPUSH
12218: LD_STRING D10-Mech1-1
12220: PPUSH
12221: CALL 4127 0 3
// end else
12225: GO 12290
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12227: LD_INT 22
12229: PUSH
12230: LD_INT 1
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: LD_INT 21
12239: PUSH
12240: LD_INT 1
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PUSH
12247: LD_INT 26
12249: PUSH
12250: LD_INT 1
12252: PUSH
12253: EMPTY
12254: LIST
12255: LIST
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 1
12264: ARRAY
12265: PPUSH
12266: CALL_OW 69
12270: PUSH
12271: LD_EXP 1
12275: PUSH
12276: EMPTY
12277: LIST
12278: DIFF
12279: PPUSH
12280: LD_STRING D10-Mech1-1
12282: PPUSH
12283: LD_STRING D10-Mech1-1
12285: PPUSH
12286: CALL 4127 0 3
// end ; end ; end ;
12290: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12291: LD_INT 22
12293: PUSH
12294: LD_INT 1
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: PUSH
12301: LD_INT 30
12303: PUSH
12304: LD_INT 32
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: PPUSH
12315: CALL_OW 69
12319: PUSH
12320: LD_INT 0
12322: GREATER
12323: PUSH
12324: LD_EXP 32
12328: PUSH
12329: LD_INT 0
12331: EQUAL
12332: AND
12333: IFFALSE 12573
12335: GO 12337
12337: DISABLE
// begin if IsOK ( Claptopn ) then
12338: LD_EXP 11
12342: PPUSH
12343: CALL_OW 302
12347: IFFALSE 12363
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12349: LD_EXP 11
12353: PPUSH
12354: LD_STRING D9b-Eng1-1
12356: PPUSH
12357: CALL_OW 88
// end else
12361: GO 12559
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12363: LD_INT 22
12365: PUSH
12366: LD_INT 1
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: PUSH
12373: LD_INT 21
12375: PUSH
12376: LD_INT 1
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: PUSH
12383: LD_INT 25
12385: PUSH
12386: LD_INT 3
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 26
12395: PUSH
12396: LD_INT 1
12398: PUSH
12399: EMPTY
12400: LIST
12401: LIST
12402: PUSH
12403: EMPTY
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: PPUSH
12409: CALL_OW 69
12413: PUSH
12414: LD_EXP 1
12418: PUSH
12419: EMPTY
12420: LIST
12421: PUSH
12422: LD_INT 0
12424: GREATER
12425: DIFF
12426: IFFALSE 12500
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12428: LD_INT 22
12430: PUSH
12431: LD_INT 1
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 21
12440: PUSH
12441: LD_INT 1
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 25
12450: PUSH
12451: LD_INT 2
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 26
12460: PUSH
12461: LD_INT 1
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: PUSH
12479: LD_EXP 1
12483: PUSH
12484: EMPTY
12485: LIST
12486: DIFF
12487: PPUSH
12488: LD_STRING D9b-Eng1-1
12490: PPUSH
12491: LD_STRING D9b-Eng1-11
12493: PPUSH
12494: CALL 4127 0 3
// end else
12498: GO 12559
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12500: LD_INT 22
12502: PUSH
12503: LD_INT 1
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 21
12512: PUSH
12513: LD_INT 1
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: PUSH
12520: LD_INT 26
12522: PUSH
12523: LD_INT 1
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: LIST
12534: PPUSH
12535: CALL_OW 69
12539: PUSH
12540: LD_EXP 1
12544: PUSH
12545: EMPTY
12546: LIST
12547: DIFF
12548: PPUSH
12549: LD_STRING D9b-Eng1-1
12551: PPUSH
12552: LD_STRING D9b-Eng1-1
12554: PPUSH
12555: CALL 4127 0 3
// end ; end ; if energyVDialog = 0 then
12559: LD_EXP 33
12563: PUSH
12564: LD_INT 0
12566: EQUAL
12567: IFFALSE 12573
// EnergyDialog ;
12569: CALL 4618 0 0
// end ;
12573: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12574: LD_EXP 34
12578: PUSH
12579: LD_INT 1
12581: EQUAL
12582: PUSH
12583: LD_EXP 35
12587: PUSH
12588: LD_INT 1
12590: EQUAL
12591: AND
12592: IFFALSE 12604
12594: GO 12596
12596: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12597: LD_STRING M1a
12599: PPUSH
12600: CALL_OW 337
12604: END
// every 3 3$0 do
12605: GO 12607
12607: DISABLE
// begin PrepareFirstAttack ;
12608: CALL 3669 0 0
// end ;
12612: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12613: LD_INT 22
12615: PUSH
12616: LD_INT 5
12618: PUSH
12619: EMPTY
12620: LIST
12621: LIST
12622: PUSH
12623: LD_INT 21
12625: PUSH
12626: LD_INT 1
12628: PUSH
12629: EMPTY
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 24
12638: PUSH
12639: LD_INT 250
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: PPUSH
12655: CALL_OW 69
12659: PUSH
12660: LD_INT 0
12662: GREATER
12663: PUSH
12664: LD_EXP 23
12668: PUSH
12669: LD_INT 1
12671: EQUAL
12672: AND
12673: IFFALSE 12974
12675: GO 12677
12677: DISABLE
12678: LD_INT 0
12680: PPUSH
// begin firstRussianAttack = 2 ;
12681: LD_ADDR_EXP 23
12685: PUSH
12686: LD_INT 2
12688: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12689: LD_INT 22
12691: PUSH
12692: LD_INT 5
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: LD_INT 21
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: EMPTY
12710: LIST
12711: LIST
12712: PPUSH
12713: CALL_OW 69
12717: PPUSH
12718: LD_INT 125
12720: PPUSH
12721: LD_INT 98
12723: PPUSH
12724: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12728: LD_INT 22
12730: PUSH
12731: LD_INT 1
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: PUSH
12738: LD_INT 21
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: PUSH
12748: EMPTY
12749: LIST
12750: LIST
12751: PPUSH
12752: CALL_OW 69
12756: PUSH
12757: LD_EXP 1
12761: PUSH
12762: LD_EXP 7
12766: PUSH
12767: LD_EXP 4
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: LIST
12776: DIFF
12777: PPUSH
12778: LD_STRING DAtt1-Sol1-1
12780: PPUSH
12781: LD_STRING DAtt1-FSol1-1
12783: PPUSH
12784: CALL 4127 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12788: LD_EXP 1
12792: PPUSH
12793: LD_STRING DAtt1-JMM-1
12795: PPUSH
12796: CALL_OW 88
// if Lisa then
12800: LD_EXP 4
12804: IFFALSE 12820
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12806: LD_EXP 4
12810: PPUSH
12811: LD_STRING DAtt1a-Lisa-1
12813: PPUSH
12814: CALL_OW 88
// end else
12818: GO 12891
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12820: LD_INT 22
12822: PUSH
12823: LD_INT 1
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 21
12832: PUSH
12833: LD_INT 1
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 26
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: PPUSH
12855: CALL_OW 69
12859: PUSH
12860: LD_EXP 1
12864: PUSH
12865: LD_EXP 7
12869: PUSH
12870: LD_EXP 4
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: DIFF
12880: PPUSH
12881: LD_STRING DAtt1a-Sol1-1
12883: PPUSH
12884: LD_STRING DAtt1-FSol1-1
12886: PPUSH
12887: CALL 4127 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12891: LD_EXP 1
12895: PPUSH
12896: LD_STRING DAtt1a-JMM-1
12898: PPUSH
12899: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12903: LD_INT 22
12905: PUSH
12906: LD_INT 1
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 21
12915: PUSH
12916: LD_INT 1
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: LD_INT 26
12925: PUSH
12926: LD_INT 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: PUSH
12933: EMPTY
12934: LIST
12935: LIST
12936: LIST
12937: PPUSH
12938: CALL_OW 69
12942: PUSH
12943: LD_EXP 1
12947: PUSH
12948: LD_EXP 7
12952: PUSH
12953: LD_EXP 4
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: DIFF
12963: PPUSH
12964: LD_STRING DAtt1b-Sol1-1
12966: PPUSH
12967: LD_STRING DAtt1a-Sol1-1
12969: PPUSH
12970: CALL 4127 0 3
// end ;
12974: PPOPN 1
12976: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12977: LD_EXP 23
12981: PUSH
12982: LD_INT 2
12984: EQUAL
12985: IFFALSE 13047
12987: GO 12989
12989: DISABLE
12990: LD_INT 0
12992: PPUSH
// begin enable ;
12993: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12994: LD_ADDR_VAR 0 1
12998: PUSH
12999: LD_INT 5
13001: PPUSH
13002: LD_INT 22
13004: PUSH
13005: LD_INT 5
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: PUSH
13012: LD_INT 21
13014: PUSH
13015: LD_INT 1
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: EMPTY
13023: LIST
13024: LIST
13025: PPUSH
13026: CALL_OW 70
13030: PUSH
13031: FOR_IN
13032: IFFALSE 13045
// RemoveUnit ( i ) ;
13034: LD_VAR 0 1
13038: PPUSH
13039: CALL_OW 64
13043: GO 13031
13045: POP
13046: POP
// end ;
13047: PPOPN 1
13049: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13050: LD_INT 22
13052: PUSH
13053: LD_INT 5
13055: PUSH
13056: EMPTY
13057: LIST
13058: LIST
13059: PUSH
13060: EMPTY
13061: LIST
13062: PPUSH
13063: CALL_OW 69
13067: PUSH
13068: LD_INT 0
13070: EQUAL
13071: PUSH
13072: LD_EXP 23
13076: PUSH
13077: LD_INT 2
13079: EQUAL
13080: AND
13081: IFFALSE 13094
13083: GO 13085
13085: DISABLE
// firstRussianAttack = 3 ;
13086: LD_ADDR_EXP 23
13090: PUSH
13091: LD_INT 3
13093: ST_TO_ADDR
13094: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13095: LD_EXP 28
13099: PUSH
13100: LD_INT 0
13102: EQUAL
13103: IFFALSE 13184
13105: GO 13107
13107: DISABLE
// begin timerStatus = 4 ;
13108: LD_ADDR_EXP 29
13112: PUSH
13113: LD_INT 4
13115: ST_TO_ADDR
// DialogueOn ;
13116: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13120: LD_EXP 13
13124: PPUSH
13125: LD_STRING D2-Don-1
13127: PPUSH
13128: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13132: LD_EXP 1
13136: PPUSH
13137: LD_STRING D2-JMM-1
13139: PPUSH
13140: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13144: LD_EXP 13
13148: PPUSH
13149: LD_STRING D2-Don-2
13151: PPUSH
13152: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13156: LD_EXP 1
13160: PPUSH
13161: LD_STRING D2-JMM-2
13163: PPUSH
13164: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13168: LD_EXP 13
13172: PPUSH
13173: LD_STRING D2-Don-3
13175: PPUSH
13176: CALL_OW 94
// DialogueOff ;
13180: CALL_OW 7
// end ;
13184: END
// every 12 12$0 do var tmp ;
13185: GO 13187
13187: DISABLE
13188: LD_INT 0
13190: PPUSH
// begin PrepareDonaldsonArmy ;
13191: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13195: LD_EXP 13
13199: PPUSH
13200: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13204: LD_ADDR_VAR 0 1
13208: PUSH
13209: LD_INT 22
13211: PUSH
13212: LD_INT 4
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: PUSH
13219: LD_INT 21
13221: PUSH
13222: LD_INT 1
13224: PUSH
13225: EMPTY
13226: LIST
13227: LIST
13228: PUSH
13229: LD_INT 26
13231: PUSH
13232: LD_INT 1
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: PUSH
13239: LD_INT 25
13241: PUSH
13242: LD_INT 1
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: PPUSH
13255: CALL_OW 69
13259: PUSH
13260: LD_EXP 5
13264: PUSH
13265: EMPTY
13266: LIST
13267: DIFF
13268: ST_TO_ADDR
// DialogueOn ;
13269: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13273: LD_VAR 0 1
13277: PPUSH
13278: LD_STRING D3-Sol1-1
13280: PPUSH
13281: LD_STRING D3-Sol1-1
13283: PPUSH
13284: CALL 4127 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13288: LD_INT 22
13290: PUSH
13291: LD_INT 4
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: LD_INT 21
13300: PUSH
13301: LD_INT 1
13303: PUSH
13304: EMPTY
13305: LIST
13306: LIST
13307: PUSH
13308: LD_INT 26
13310: PUSH
13311: LD_INT 1
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: LD_INT 25
13320: PUSH
13321: LD_INT 3
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: PUSH
13328: EMPTY
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: PPUSH
13334: CALL_OW 69
13338: PPUSH
13339: LD_STRING D3-Sol2-1
13341: PPUSH
13342: LD_STRING D3-Sol2-1
13344: PPUSH
13345: CALL 4127 0 3
// if Frank then
13349: LD_EXP 5
13353: IFFALSE 13367
// Say ( Frank , D3-Frank-1 ) ;
13355: LD_EXP 5
13359: PPUSH
13360: LD_STRING D3-Frank-1
13362: PPUSH
13363: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13367: LD_EXP 13
13371: PPUSH
13372: LD_STRING D3-Don-1
13374: PPUSH
13375: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13379: LD_EXP 13
13383: PPUSH
13384: LD_STRING D3-Don-1a
13386: PPUSH
13387: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13391: LD_EXP 1
13395: PPUSH
13396: LD_STRING D3-JMM-1
13398: PPUSH
13399: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13403: LD_EXP 13
13407: PPUSH
13408: LD_STRING D3-Don-2
13410: PPUSH
13411: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13415: LD_INT 22
13417: PUSH
13418: LD_INT 6
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 21
13427: PUSH
13428: LD_INT 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: CALL_OW 69
13443: PUSH
13444: LD_INT 0
13446: GREATER
13447: IFFALSE 13585
// begin Say ( JMM , D3-JMM-2 ) ;
13449: LD_EXP 1
13453: PPUSH
13454: LD_STRING D3-JMM-2
13456: PPUSH
13457: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13461: LD_EXP 13
13465: PPUSH
13466: LD_STRING D3-Don-3
13468: PPUSH
13469: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13473: LD_EXP 1
13477: PPUSH
13478: LD_STRING D3-JMM-3
13480: PPUSH
13481: CALL_OW 88
// if IsOK ( Frank ) then
13485: LD_EXP 5
13489: PPUSH
13490: CALL_OW 302
13494: IFFALSE 13508
// Say ( Frank , D3-Frank-3 ) ;
13496: LD_EXP 5
13500: PPUSH
13501: LD_STRING D3-Frank-3
13503: PPUSH
13504: CALL_OW 88
// DialogueOff ;
13508: CALL_OW 7
// if IsOK ( Frank ) then
13512: LD_EXP 5
13516: PPUSH
13517: CALL_OW 302
13521: IFFALSE 13583
// begin SetSide ( Frank , 0 ) ;
13523: LD_EXP 5
13527: PPUSH
13528: LD_INT 0
13530: PPUSH
13531: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13535: LD_EXP 5
13539: PPUSH
13540: LD_INT 12
13542: PPUSH
13543: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13547: LD_EXP 5
13551: PPUSH
13552: LD_STRING Frank
13554: PPUSH
13555: CALL_OW 38
// Wait ( 0 0$3 ) ;
13559: LD_INT 105
13561: PPUSH
13562: CALL_OW 67
// frankScoutBase = 1 ;
13566: LD_ADDR_EXP 25
13570: PUSH
13571: LD_INT 1
13573: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13574: LD_EXP 5
13578: PPUSH
13579: CALL_OW 64
// end ; end else
13583: GO 13672
// begin Say ( JMM , D3-JMM-4 ) ;
13585: LD_EXP 1
13589: PPUSH
13590: LD_STRING D3-JMM-4
13592: PPUSH
13593: CALL_OW 88
// DialogueOff ;
13597: CALL_OW 7
// if IsOK ( Frank ) then
13601: LD_EXP 5
13605: PPUSH
13606: CALL_OW 302
13610: IFFALSE 13672
// begin SetSide ( Frank , 0 ) ;
13612: LD_EXP 5
13616: PPUSH
13617: LD_INT 0
13619: PPUSH
13620: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13624: LD_EXP 5
13628: PPUSH
13629: LD_INT 12
13631: PPUSH
13632: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13636: LD_EXP 5
13640: PPUSH
13641: LD_STRING 04t_Frank
13643: PPUSH
13644: CALL_OW 38
// Wait ( 0 0$3 ) ;
13648: LD_INT 105
13650: PPUSH
13651: CALL_OW 67
// frankScoutBase = 1 ;
13655: LD_ADDR_EXP 25
13659: PUSH
13660: LD_INT 1
13662: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13663: LD_EXP 5
13667: PPUSH
13668: CALL_OW 64
// end ; end ; end ;
13672: PPOPN 1
13674: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13675: LD_EXP 13
13679: PPUSH
13680: CALL_OW 255
13684: PUSH
13685: LD_INT 4
13687: EQUAL
13688: PUSH
13689: LD_EXP 13
13693: PPUSH
13694: CALL_OW 302
13698: AND
13699: IFFALSE 13724
13701: GO 13703
13703: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13704: LD_EXP 13
13708: PPUSH
13709: LD_STRING D3b-Don-1
13711: PPUSH
13712: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13716: LD_ADDR_EXP 41
13720: PUSH
13721: LD_INT 1
13723: ST_TO_ADDR
// end ;
13724: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13725: LD_EXP 24
13729: PUSH
13730: LD_INT 0
13732: EQUAL
13733: IFFALSE 13889
13735: GO 13737
13737: DISABLE
13738: LD_INT 0
13740: PPUSH
13741: PPUSH
// begin enable ;
13742: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13743: LD_ADDR_VAR 0 1
13747: PUSH
13748: LD_INT 22
13750: PUSH
13751: LD_INT 4
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 21
13760: PUSH
13761: LD_INT 1
13763: PUSH
13764: EMPTY
13765: LIST
13766: LIST
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PPUSH
13772: CALL_OW 69
13776: PUSH
13777: FOR_IN
13778: IFFALSE 13887
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13780: LD_ADDR_VAR 0 2
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_INT 1
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 21
13797: PUSH
13798: LD_INT 1
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: PUSH
13805: EMPTY
13806: LIST
13807: LIST
13808: PPUSH
13809: CALL_OW 69
13813: PUSH
13814: FOR_IN
13815: IFFALSE 13883
// begin if GetDistUnits ( i , j ) < 7 then
13817: LD_VAR 0 1
13821: PPUSH
13822: LD_VAR 0 2
13826: PPUSH
13827: CALL_OW 296
13831: PUSH
13832: LD_INT 7
13834: LESS
13835: IFFALSE 13881
// begin saveDonaldson = 1 ;
13837: LD_ADDR_EXP 24
13841: PUSH
13842: LD_INT 1
13844: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13845: LD_INT 22
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 21
13857: PUSH
13858: LD_INT 1
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 69
13873: PPUSH
13874: LD_INT 1
13876: PPUSH
13877: CALL_OW 235
// end ; end ;
13881: GO 13814
13883: POP
13884: POP
// end ;
13885: GO 13777
13887: POP
13888: POP
// end ;
13889: PPOPN 2
13891: END
// every 2 2$0 trigger saveDonaldson = 1 do
13892: LD_EXP 24
13896: PUSH
13897: LD_INT 1
13899: EQUAL
13900: IFFALSE 14203
13902: GO 13904
13904: DISABLE
// begin uc_side = 4 ;
13905: LD_ADDR_OWVAR 20
13909: PUSH
13910: LD_INT 4
13912: ST_TO_ADDR
// uc_nation = 1 ;
13913: LD_ADDR_OWVAR 21
13917: PUSH
13918: LD_INT 1
13920: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
13921: LD_ADDR_EXP 5
13925: PUSH
13926: LD_STRING 04t_Frank
13928: PPUSH
13929: CALL_OW 34
13933: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13934: LD_EXP 5
13938: PPUSH
13939: LD_INT 13
13941: PPUSH
13942: LD_INT 0
13944: PPUSH
13945: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13949: LD_INT 35
13951: PPUSH
13952: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13956: LD_EXP 1
13960: PPUSH
13961: CALL_OW 310
13965: NOT
13966: PUSH
13967: LD_EXP 1
13971: PPUSH
13972: LD_INT 4
13974: PPUSH
13975: CALL_OW 296
13979: PUSH
13980: LD_INT 20
13982: LESS
13983: AND
13984: IFFALSE 14017
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13986: LD_EXP 5
13990: PPUSH
13991: LD_EXP 1
13995: PPUSH
13996: CALL_OW 250
14000: PPUSH
14001: LD_EXP 1
14005: PPUSH
14006: CALL_OW 251
14010: PPUSH
14011: CALL_OW 111
14015: GO 14032
// ComMoveXY ( Frank , 51 , 15 ) ;
14017: LD_EXP 5
14021: PPUSH
14022: LD_INT 51
14024: PPUSH
14025: LD_INT 15
14027: PPUSH
14028: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14032: LD_EXP 5
14036: PPUSH
14037: LD_EXP 1
14041: PPUSH
14042: CALL_OW 296
14046: PUSH
14047: LD_INT 10
14049: LESS
14050: IFFALSE 13949
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14052: LD_EXP 1
14056: PUSH
14057: LD_EXP 5
14061: PUSH
14062: EMPTY
14063: LIST
14064: LIST
14065: PPUSH
14066: CALL_OW 87
// DialogueOn ;
14070: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14074: LD_EXP 5
14078: PPUSH
14079: LD_STRING D3a-Frank-1
14081: PPUSH
14082: CALL_OW 88
// if Lisa then
14086: LD_EXP 4
14090: IFFALSE 14140
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14092: LD_EXP 4
14096: PPUSH
14097: LD_STRING D3a-Lisa-1
14099: PPUSH
14100: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14104: LD_EXP 5
14108: PPUSH
14109: LD_STRING D3a-Frank-2
14111: PPUSH
14112: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14116: LD_EXP 4
14120: PPUSH
14121: LD_STRING D3a-Lisa-2
14123: PPUSH
14124: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14128: LD_EXP 5
14132: PPUSH
14133: LD_STRING D3a-Frank-3
14135: PPUSH
14136: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14140: LD_EXP 1
14144: PPUSH
14145: LD_STRING D3a-JMM-3
14147: PPUSH
14148: CALL_OW 88
// DialogueOff ;
14152: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14156: LD_EXP 5
14160: PPUSH
14161: LD_INT 1
14163: PPUSH
14164: CALL_OW 235
// InGameOn ;
14168: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14172: LD_INT 1
14174: PPUSH
14175: LD_INT 7
14177: PPUSH
14178: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14182: LD_INT 93
14184: PPUSH
14185: LD_INT 91
14187: PPUSH
14188: CALL_OW 84
// wait ( 0 0$5 ) ;
14192: LD_INT 175
14194: PPUSH
14195: CALL_OW 67
// InGameOff ;
14199: CALL_OW 9
// end ;
14203: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14204: LD_OWVAR 67
14208: PUSH
14209: LD_INT 2
14211: EQUAL
14212: PUSH
14213: LD_OWVAR 67
14217: PUSH
14218: LD_INT 3
14220: EQUAL
14221: OR
14222: IFFALSE 14246
14224: GO 14226
14226: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14227: LD_INT 24
14229: PPUSH
14230: LD_INT 24
14232: PPUSH
14233: LD_INT 1
14235: PPUSH
14236: LD_INT 1
14238: PPUSH
14239: LD_INT 53
14241: PPUSH
14242: CALL_OW 125
14246: END
// every 18 18$0 do
14247: GO 14249
14249: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14250: LD_EXP 14
14254: PPUSH
14255: LD_STRING D4-Har-1
14257: PPUSH
14258: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14262: LD_EXP 1
14266: PPUSH
14267: LD_STRING D4-JMM-1
14269: PPUSH
14270: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14274: LD_EXP 14
14278: PPUSH
14279: LD_STRING D4-Har-2
14281: PPUSH
14282: CALL_OW 94
// case query ( Q1 ) of 1 :
14286: LD_STRING Q1
14288: PPUSH
14289: CALL_OW 97
14293: PUSH
14294: LD_INT 1
14296: DOUBLE
14297: EQUAL
14298: IFTRUE 14302
14300: GO 14361
14302: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14303: LD_EXP 1
14307: PPUSH
14308: LD_STRING D5-JMM-1
14310: PPUSH
14311: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14315: LD_EXP 14
14319: PPUSH
14320: LD_STRING D5-Har-1
14322: PPUSH
14323: CALL_OW 94
// timeToSupport = 10 10$0 ;
14327: LD_ADDR_EXP 28
14331: PUSH
14332: LD_INT 21000
14334: ST_TO_ADDR
// timerStatus = 2 ;
14335: LD_ADDR_EXP 29
14339: PUSH
14340: LD_INT 2
14342: ST_TO_ADDR
// startTimer = 1 ;
14343: LD_ADDR_EXP 30
14347: PUSH
14348: LD_INT 1
14350: ST_TO_ADDR
// harrAnswer = 1 ;
14351: LD_ADDR_EXP 26
14355: PUSH
14356: LD_INT 1
14358: ST_TO_ADDR
// end ; 2 :
14359: GO 14496
14361: LD_INT 2
14363: DOUBLE
14364: EQUAL
14365: IFTRUE 14369
14367: GO 14428
14369: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14370: LD_EXP 1
14374: PPUSH
14375: LD_STRING D5-JMM-2
14377: PPUSH
14378: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14382: LD_EXP 14
14386: PPUSH
14387: LD_STRING D5-Har-2
14389: PPUSH
14390: CALL_OW 94
// timeToSupport = 5 5$0 ;
14394: LD_ADDR_EXP 28
14398: PUSH
14399: LD_INT 10500
14401: ST_TO_ADDR
// timerStatus = 2 ;
14402: LD_ADDR_EXP 29
14406: PUSH
14407: LD_INT 2
14409: ST_TO_ADDR
// startTimer = 1 ;
14410: LD_ADDR_EXP 30
14414: PUSH
14415: LD_INT 1
14417: ST_TO_ADDR
// harrAnswer = 2 ;
14418: LD_ADDR_EXP 26
14422: PUSH
14423: LD_INT 2
14425: ST_TO_ADDR
// end ; 3 :
14426: GO 14496
14428: LD_INT 3
14430: DOUBLE
14431: EQUAL
14432: IFTRUE 14436
14434: GO 14495
14436: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14437: LD_EXP 1
14441: PPUSH
14442: LD_STRING D5-JMM-3
14444: PPUSH
14445: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14449: LD_EXP 14
14453: PPUSH
14454: LD_STRING D5-Har-3
14456: PPUSH
14457: CALL_OW 94
// timeToSupport = 5 5$0 ;
14461: LD_ADDR_EXP 28
14465: PUSH
14466: LD_INT 10500
14468: ST_TO_ADDR
// timerStatus = 2 ;
14469: LD_ADDR_EXP 29
14473: PUSH
14474: LD_INT 2
14476: ST_TO_ADDR
// startTimer = 1 ;
14477: LD_ADDR_EXP 30
14481: PUSH
14482: LD_INT 1
14484: ST_TO_ADDR
// harrAnswer = 3 ;
14485: LD_ADDR_EXP 26
14489: PUSH
14490: LD_INT 3
14492: ST_TO_ADDR
// end ; end ;
14493: GO 14496
14495: POP
// end ;
14496: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14497: LD_EXP 29
14501: PUSH
14502: LD_INT 2
14504: EQUAL
14505: PUSH
14506: LD_EXP 28
14510: PUSH
14511: LD_INT 0
14513: EQUAL
14514: AND
14515: IFFALSE 14792
14517: GO 14519
14519: DISABLE
// begin timerStatus = 4 ;
14520: LD_ADDR_EXP 29
14524: PUSH
14525: LD_INT 4
14527: ST_TO_ADDR
// if harrAnswer = 1 then
14528: LD_EXP 26
14532: PUSH
14533: LD_INT 1
14535: EQUAL
14536: IFFALSE 14616
// begin PrepareHarrisonSupport ( 3 ) ;
14538: LD_INT 3
14540: PPUSH
14541: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14545: LD_INT 2100
14547: PPUSH
14548: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14552: LD_EXP 14
14556: PPUSH
14557: LD_STRING D7-Har-1
14559: PPUSH
14560: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14564: LD_STRING M2
14566: PPUSH
14567: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14571: LD_ADDR_EXP 27
14575: PUSH
14576: LD_INT 31500
14578: PUSH
14579: LD_INT 10500
14581: PUSH
14582: LD_INT 8400
14584: PUSH
14585: LD_INT 6300
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PUSH
14593: LD_OWVAR 67
14597: ARRAY
14598: PLUS
14599: ST_TO_ADDR
// startTimer = 1 ;
14600: LD_ADDR_EXP 30
14604: PUSH
14605: LD_INT 1
14607: ST_TO_ADDR
// timerStatus = 3 ;
14608: LD_ADDR_EXP 29
14612: PUSH
14613: LD_INT 3
14615: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14616: LD_EXP 26
14620: PUSH
14621: LD_INT 2
14623: EQUAL
14624: IFFALSE 14704
// begin PrepareHarrisonSupport ( 4 ) ;
14626: LD_INT 4
14628: PPUSH
14629: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14633: LD_INT 2100
14635: PPUSH
14636: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14640: LD_EXP 14
14644: PPUSH
14645: LD_STRING D7-Har-1
14647: PPUSH
14648: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14652: LD_STRING M2
14654: PPUSH
14655: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14659: LD_ADDR_EXP 27
14663: PUSH
14664: LD_INT 27300
14666: PUSH
14667: LD_INT 8400
14669: PUSH
14670: LD_INT 8400
14672: PUSH
14673: LD_INT 6300
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: LD_OWVAR 67
14685: ARRAY
14686: PLUS
14687: ST_TO_ADDR
// startTimer = 1 ;
14688: LD_ADDR_EXP 30
14692: PUSH
14693: LD_INT 1
14695: ST_TO_ADDR
// timerStatus = 3 ;
14696: LD_ADDR_EXP 29
14700: PUSH
14701: LD_INT 3
14703: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14704: LD_EXP 26
14708: PUSH
14709: LD_INT 3
14711: EQUAL
14712: IFFALSE 14792
// begin PrepareHarrisonSupport ( 5 ) ;
14714: LD_INT 5
14716: PPUSH
14717: CALL 1626 0 1
// wait ( 1 1$0 ) ;
14721: LD_INT 2100
14723: PPUSH
14724: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14728: LD_EXP 14
14732: PPUSH
14733: LD_STRING D7-Har-1
14735: PPUSH
14736: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14740: LD_STRING M2
14742: PPUSH
14743: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14747: LD_ADDR_EXP 27
14751: PUSH
14752: LD_INT 21000
14754: PUSH
14755: LD_INT 8400
14757: PUSH
14758: LD_INT 6300
14760: PUSH
14761: LD_INT 4200
14763: PUSH
14764: EMPTY
14765: LIST
14766: LIST
14767: LIST
14768: PUSH
14769: LD_OWVAR 67
14773: ARRAY
14774: PLUS
14775: ST_TO_ADDR
// startTimer = 1 ;
14776: LD_ADDR_EXP 30
14780: PUSH
14781: LD_INT 1
14783: ST_TO_ADDR
// timerStatus = 3 ;
14784: LD_ADDR_EXP 29
14788: PUSH
14789: LD_INT 3
14791: ST_TO_ADDR
// end ; end ;
14792: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14793: LD_EXP 27
14797: PUSH
14798: LD_INT 8400
14800: LESSEQUAL
14801: PUSH
14802: LD_EXP 29
14806: PUSH
14807: LD_INT 3
14809: EQUAL
14810: AND
14811: IFFALSE 14843
14813: GO 14815
14815: DISABLE
// begin DialogueOn ;
14816: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14820: LD_EXP 14
14824: PPUSH
14825: LD_STRING D7a-Har-1
14827: PPUSH
14828: CALL_OW 94
// DialogueOff ;
14832: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14836: LD_STRING M2a
14838: PPUSH
14839: CALL_OW 337
// end ;
14843: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14844: LD_EXP 27
14848: PUSH
14849: LD_INT 0
14851: LESSEQUAL
14852: PUSH
14853: LD_EXP 29
14857: PUSH
14858: LD_INT 3
14860: EQUAL
14861: AND
14862: PUSH
14863: LD_EXP 40
14867: NOT
14868: AND
14869: IFFALSE 15008
14871: GO 14873
14873: DISABLE
14874: LD_INT 0
14876: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14877: LD_ADDR_VAR 0 1
14881: PUSH
14882: LD_INT 22
14884: PUSH
14885: LD_INT 1
14887: PUSH
14888: EMPTY
14889: LIST
14890: LIST
14891: PPUSH
14892: CALL_OW 69
14896: PUSH
14897: LD_EXP 1
14901: PUSH
14902: EMPTY
14903: LIST
14904: DIFF
14905: ST_TO_ADDR
// saveDonaldson = 2 ;
14906: LD_ADDR_EXP 24
14910: PUSH
14911: LD_INT 2
14913: ST_TO_ADDR
// DialogueOn ;
14914: CALL_OW 6
// if IsOK ( Donaldson ) then
14918: LD_EXP 13
14922: PPUSH
14923: CALL_OW 302
14927: IFFALSE 14943
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14929: LD_EXP 14
14933: PPUSH
14934: LD_STRING D8-Har-1
14936: PPUSH
14937: CALL_OW 94
// end else
14941: GO 14955
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14943: LD_EXP 14
14947: PPUSH
14948: LD_STRING D8-Har-1a
14950: PPUSH
14951: CALL_OW 94
// end ; DialogueOff ;
14955: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14959: LD_VAR 0 1
14963: PPUSH
14964: LD_INT 4
14966: PPUSH
14967: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_INT 88
14978: PPUSH
14979: LD_INT 89
14981: PPUSH
14982: CALL_OW 114
// honor = 0 ;
14986: LD_ADDR_EXP 39
14990: PUSH
14991: LD_INT 0
14993: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14994: LD_INT 350
14996: PPUSH
14997: CALL_OW 67
// YouLost ( LostCommand ) ;
15001: LD_STRING LostCommand
15003: PPUSH
15004: CALL_OW 104
// end ;
15008: PPOPN 1
15010: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15011: LD_INT 22
15013: PUSH
15014: LD_INT 6
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: PUSH
15021: LD_INT 21
15023: PUSH
15024: LD_INT 1
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: EMPTY
15032: LIST
15033: LIST
15034: PPUSH
15035: CALL_OW 69
15039: PUSH
15040: LD_INT 0
15042: EQUAL
15043: PUSH
15044: LD_EXP 20
15048: PUSH
15049: LD_INT 0
15051: EQUAL
15052: AND
15053: PUSH
15054: LD_EXP 42
15058: PUSH
15059: LD_INT 1
15061: EQUAL
15062: AND
15063: IFFALSE 15157
15065: GO 15067
15067: DISABLE
15068: LD_INT 0
15070: PPUSH
15071: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: LD_INT 22
15079: PUSH
15080: LD_INT 1
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: LD_INT 21
15089: PUSH
15090: LD_INT 1
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PUSH
15097: LD_INT 23
15099: PUSH
15100: LD_INT 1
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: EMPTY
15108: LIST
15109: LIST
15110: LIST
15111: PPUSH
15112: CALL_OW 69
15116: ST_TO_ADDR
// for i in tmp do
15117: LD_ADDR_VAR 0 1
15121: PUSH
15122: LD_VAR 0 2
15126: PUSH
15127: FOR_IN
15128: IFFALSE 15155
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15130: LD_VAR 0 1
15134: PPUSH
15135: LD_INT 1
15137: PPUSH
15138: LD_INT 4
15140: PPUSH
15141: CALL_OW 12
15145: PPUSH
15146: LD_INT 500
15148: PPUSH
15149: CALL_OW 492
// end ;
15153: GO 15127
15155: POP
15156: POP
// end ; end_of_file
15157: PPOPN 2
15159: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15160: GO 15162
15162: DISABLE
15163: LD_INT 0
15165: PPUSH
// begin enemyWayX = [ ] ;
15166: LD_ADDR_EXP 46
15170: PUSH
15171: EMPTY
15172: ST_TO_ADDR
// enemyWayY = [ ] ;
15173: LD_ADDR_EXP 47
15177: PUSH
15178: EMPTY
15179: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15180: LD_ADDR_VAR 0 1
15184: PUSH
15185: LD_INT 1
15187: PPUSH
15188: LD_INT 3
15190: PPUSH
15191: CALL_OW 12
15195: ST_TO_ADDR
// if rnd = 1 then
15196: LD_VAR 0 1
15200: PUSH
15201: LD_INT 1
15203: EQUAL
15204: IFFALSE 15244
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15206: LD_ADDR_EXP 46
15210: PUSH
15211: LD_INT 73
15213: PUSH
15214: LD_INT 46
15216: PUSH
15217: LD_INT 29
15219: PUSH
15220: EMPTY
15221: LIST
15222: LIST
15223: LIST
15224: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15225: LD_ADDR_EXP 47
15229: PUSH
15230: LD_INT 71
15232: PUSH
15233: LD_INT 43
15235: PUSH
15236: LD_INT 29
15238: PUSH
15239: EMPTY
15240: LIST
15241: LIST
15242: LIST
15243: ST_TO_ADDR
// end ; if rnd = 2 then
15244: LD_VAR 0 1
15248: PUSH
15249: LD_INT 2
15251: EQUAL
15252: IFFALSE 15276
// begin enemyWayX = [ 64 ] ;
15254: LD_ADDR_EXP 46
15258: PUSH
15259: LD_INT 64
15261: PUSH
15262: EMPTY
15263: LIST
15264: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15265: LD_ADDR_EXP 47
15269: PUSH
15270: LD_INT 43
15272: PUSH
15273: EMPTY
15274: LIST
15275: ST_TO_ADDR
// end ; if rnd = 3 then
15276: LD_VAR 0 1
15280: PUSH
15281: LD_INT 3
15283: EQUAL
15284: IFFALSE 15308
// begin enemyWayX = [ 80 ] ;
15286: LD_ADDR_EXP 46
15290: PUSH
15291: LD_INT 80
15293: PUSH
15294: EMPTY
15295: LIST
15296: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15297: LD_ADDR_EXP 47
15301: PUSH
15302: LD_INT 28
15304: PUSH
15305: EMPTY
15306: LIST
15307: ST_TO_ADDR
// end ; enable ;
15308: ENABLE
// end ;
15309: PPOPN 1
15311: END
// every 0 0$1 trigger AIEnable = 1 do
15312: LD_EXP 37
15316: PUSH
15317: LD_INT 1
15319: EQUAL
15320: IFFALSE 15434
15322: GO 15324
15324: DISABLE
// begin enable ;
15325: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15326: LD_INT 3
15328: PPUSH
15329: LD_INT 21
15331: PPUSH
15332: LD_INT 7
15334: PPUSH
15335: CALL 5651 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15339: LD_INT 3
15341: PPUSH
15342: LD_INT 8
15344: PPUSH
15345: LD_INT 7
15347: PPUSH
15348: LD_INT 1
15350: PPUSH
15351: CALL 5972 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15355: LD_INT 3
15357: PPUSH
15358: LD_INT 17
15360: PPUSH
15361: LD_INT 108
15363: PPUSH
15364: LD_INT 95
15366: PPUSH
15367: CALL 7216 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15371: LD_INT 3
15373: PPUSH
15374: LD_INT 23
15376: PPUSH
15377: LD_EXP 46
15381: PPUSH
15382: LD_EXP 47
15386: PPUSH
15387: CALL 6628 0 4
// if baseReadyToBuild = 2 then
15391: LD_EXP 20
15395: PUSH
15396: LD_INT 2
15398: EQUAL
15399: IFFALSE 15434
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15401: LD_INT 6
15403: PPUSH
15404: LD_EXP 21
15408: PPUSH
15409: LD_INT 6
15411: PPUSH
15412: CALL 5651 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15416: LD_INT 6
15418: PPUSH
15419: LD_INT 9
15421: PPUSH
15422: LD_INT 6
15424: PPUSH
15425: LD_EXP 22
15429: PPUSH
15430: CALL 5972 0 4
// end ; end ;
15434: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15435: LD_EXP 15
15439: PPUSH
15440: CALL_OW 310
15444: NOT
15445: PUSH
15446: LD_INT 21
15448: PPUSH
15449: CALL_OW 302
15453: AND
15454: PUSH
15455: LD_INT 21
15457: PPUSH
15458: CALL_OW 255
15462: PUSH
15463: LD_INT 3
15465: EQUAL
15466: AND
15467: IFFALSE 15485
15469: GO 15471
15471: DISABLE
// begin enable ;
15472: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15473: LD_EXP 15
15477: PPUSH
15478: LD_INT 21
15480: PPUSH
15481: CALL_OW 120
// end ;
15485: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15486: LD_INT 22
15488: PUSH
15489: LD_INT 3
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: PUSH
15496: LD_INT 21
15498: PUSH
15499: LD_INT 2
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 55
15508: PUSH
15509: EMPTY
15510: LIST
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: LIST
15516: PPUSH
15517: CALL_OW 69
15521: PUSH
15522: LD_INT 0
15524: EQUAL
15525: PUSH
15526: LD_INT 1
15528: PPUSH
15529: CALL_OW 255
15533: PUSH
15534: LD_INT 3
15536: EQUAL
15537: AND
15538: PUSH
15539: LD_INT 21
15541: PPUSH
15542: CALL_OW 302
15546: AND
15547: PUSH
15548: LD_INT 21
15550: PPUSH
15551: CALL_OW 255
15555: PUSH
15556: LD_INT 3
15558: EQUAL
15559: AND
15560: PUSH
15561: LD_INT 21
15563: PPUSH
15564: CALL_OW 302
15568: AND
15569: IFFALSE 15774
15571: GO 15573
15573: DISABLE
// begin enable ;
15574: ENABLE
// if Difficulty = 1 then
15575: LD_OWVAR 67
15579: PUSH
15580: LD_INT 1
15582: EQUAL
15583: IFFALSE 15627
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15585: LD_INT 3
15587: PPUSH
15588: LD_INT 24
15590: PPUSH
15591: LD_OWVAR 67
15595: PUSH
15596: LD_INT 2
15598: PLUS
15599: PPUSH
15600: LD_INT 42
15602: PUSH
15603: LD_INT 42
15605: PUSH
15606: LD_INT 43
15608: PUSH
15609: EMPTY
15610: LIST
15611: LIST
15612: LIST
15613: PPUSH
15614: LD_INT 1
15616: PPUSH
15617: LD_INT 1
15619: PPUSH
15620: LD_INT 21
15622: PPUSH
15623: CALL 6516 0 7
// if Difficulty = 2 then
15627: LD_OWVAR 67
15631: PUSH
15632: LD_INT 2
15634: EQUAL
15635: IFFALSE 15702
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15637: LD_INT 3
15639: PPUSH
15640: LD_INT 24
15642: PPUSH
15643: LD_OWVAR 67
15647: PUSH
15648: LD_INT 2
15650: PLUS
15651: PPUSH
15652: LD_INT 42
15654: PUSH
15655: LD_INT 42
15657: PUSH
15658: LD_INT 43
15660: PUSH
15661: LD_INT 43
15663: PUSH
15664: EMPTY
15665: LIST
15666: LIST
15667: LIST
15668: LIST
15669: PPUSH
15670: LD_INT 1
15672: PPUSH
15673: LD_INT 1
15675: PPUSH
15676: LD_INT 21
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 1
15688: PPUSH
15689: LD_INT 2
15691: PPUSH
15692: CALL_OW 12
15696: ARRAY
15697: PPUSH
15698: CALL 6516 0 7
// if Difficulty = 3 then
15702: LD_OWVAR 67
15706: PUSH
15707: LD_INT 3
15709: EQUAL
15710: IFFALSE 15774
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15712: LD_INT 3
15714: PPUSH
15715: LD_INT 24
15717: PPUSH
15718: LD_OWVAR 67
15722: PUSH
15723: LD_INT 2
15725: PPUSH
15726: LD_INT 3
15728: PPUSH
15729: CALL_OW 12
15733: PLUS
15734: PPUSH
15735: LD_INT 43
15737: PUSH
15738: LD_INT 43
15740: PUSH
15741: LD_INT 43
15743: PUSH
15744: LD_INT 43
15746: PUSH
15747: LD_INT 44
15749: PUSH
15750: LD_INT 44
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: PPUSH
15761: LD_INT 1
15763: PPUSH
15764: LD_INT 1
15766: PPUSH
15767: LD_INT 22
15769: PPUSH
15770: CALL 6516 0 7
// end ;
15774: END
// every 0 0$1 do
15775: GO 15777
15777: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15778: LD_INT 3
15780: PPUSH
15781: LD_INT 1
15783: PPUSH
15784: LD_INT 3
15786: PPUSH
15787: CALL 5566 0 3
15791: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15792: LD_EXP 20
15796: PUSH
15797: LD_INT 1
15799: EQUAL
15800: IFFALSE 15947
15802: GO 15804
15804: DISABLE
15805: LD_INT 0
15807: PPUSH
15808: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15809: LD_ADDR_VAR 0 2
15813: PUSH
15814: LD_INT 22
15816: PUSH
15817: LD_INT 6
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 21
15826: PUSH
15827: LD_INT 2
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 34
15836: PUSH
15837: LD_INT 51
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: EMPTY
15845: LIST
15846: LIST
15847: LIST
15848: PPUSH
15849: CALL_OW 69
15853: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15854: LD_VAR 0 2
15858: PUSH
15859: LD_INT 1
15861: ARRAY
15862: PPUSH
15863: LD_EXP 21
15867: PPUSH
15868: CALL_OW 250
15872: PUSH
15873: LD_INT 5
15875: MINUS
15876: PPUSH
15877: LD_EXP 21
15881: PPUSH
15882: CALL_OW 251
15886: PUSH
15887: LD_INT 5
15889: MINUS
15890: PPUSH
15891: CALL_OW 111
// wait ( 0 0$5 ) ;
15895: LD_INT 175
15897: PPUSH
15898: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15902: LD_VAR 0 2
15906: PUSH
15907: LD_INT 1
15909: ARRAY
15910: PPUSH
15911: LD_INT 41
15913: PPUSH
15914: LD_INT 52
15916: PPUSH
15917: CALL_OW 177
// wait ( 0 0$40 ) ;
15921: LD_INT 1400
15923: PPUSH
15924: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15928: LD_VAR 0 2
15932: PUSH
15933: LD_INT 1
15935: ARRAY
15936: PPUSH
15937: LD_INT 41
15939: PPUSH
15940: LD_INT 44
15942: PPUSH
15943: CALL_OW 111
// end ;
15947: PPOPN 2
15949: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15950: LD_EXP 21
15954: PPUSH
15955: CALL_OW 274
15959: PPUSH
15960: LD_INT 1
15962: PPUSH
15963: CALL_OW 275
15967: PUSH
15968: LD_INT 100
15970: GREATEREQUAL
15971: IFFALSE 16199
15973: GO 15975
15975: DISABLE
15976: LD_INT 0
15978: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15979: LD_ADDR_VAR 0 1
15983: PUSH
15984: LD_INT 22
15986: PUSH
15987: LD_INT 6
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: PUSH
15994: LD_INT 21
15996: PUSH
15997: LD_INT 1
15999: PUSH
16000: EMPTY
16001: LIST
16002: LIST
16003: PUSH
16004: LD_INT 25
16006: PUSH
16007: LD_INT 2
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: LIST
16018: PPUSH
16019: CALL_OW 69
16023: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16024: LD_VAR 0 1
16028: PUSH
16029: LD_INT 1
16031: ARRAY
16032: PPUSH
16033: LD_INT 4
16035: PPUSH
16036: LD_INT 39
16038: PPUSH
16039: LD_INT 37
16041: PPUSH
16042: LD_INT 3
16044: PPUSH
16045: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16049: LD_VAR 0 1
16053: PUSH
16054: LD_INT 1
16056: ARRAY
16057: PPUSH
16058: LD_INT 29
16060: PPUSH
16061: LD_INT 42
16063: PPUSH
16064: LD_INT 54
16066: PPUSH
16067: LD_INT 3
16069: PPUSH
16070: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16074: LD_VAR 0 1
16078: PUSH
16079: LD_INT 1
16081: ARRAY
16082: PPUSH
16083: LD_INT 6
16085: PPUSH
16086: LD_INT 38
16088: PPUSH
16089: LD_INT 48
16091: PPUSH
16092: LD_INT 0
16094: PPUSH
16095: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16099: LD_VAR 0 1
16103: PUSH
16104: LD_INT 1
16106: ARRAY
16107: PPUSH
16108: LD_INT 2
16110: PPUSH
16111: LD_INT 32
16113: PPUSH
16114: LD_INT 38
16116: PPUSH
16117: LD_INT 2
16119: PPUSH
16120: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16124: LD_VAR 0 1
16128: PUSH
16129: LD_INT 1
16131: ARRAY
16132: PPUSH
16133: LD_INT 26
16135: PPUSH
16136: LD_INT 39
16138: PPUSH
16139: LD_INT 55
16141: PPUSH
16142: LD_INT 3
16144: PPUSH
16145: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16149: LD_VAR 0 1
16153: PUSH
16154: LD_INT 1
16156: ARRAY
16157: PPUSH
16158: LD_INT 32
16160: PPUSH
16161: LD_INT 31
16163: PPUSH
16164: LD_INT 31
16166: PPUSH
16167: LD_INT 3
16169: PPUSH
16170: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16174: LD_VAR 0 1
16178: PUSH
16179: LD_INT 1
16181: ARRAY
16182: PPUSH
16183: LD_INT 31
16185: PPUSH
16186: LD_INT 50
16188: PPUSH
16189: LD_INT 51
16191: PPUSH
16192: LD_INT 4
16194: PPUSH
16195: CALL_OW 205
// end ; end_of_file
16199: PPOPN 1
16201: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16202: LD_INT 0
16204: PPUSH
16205: PPUSH
16206: PPUSH
16207: PPUSH
16208: PPUSH
16209: PPUSH
16210: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16211: LD_ADDR_VAR 0 3
16215: PUSH
16216: LD_INT 22
16218: PUSH
16219: LD_INT 6
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 21
16228: PUSH
16229: LD_INT 1
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 25
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 3
16248: PUSH
16249: LD_INT 54
16251: PUSH
16252: EMPTY
16253: LIST
16254: PUSH
16255: EMPTY
16256: LIST
16257: LIST
16258: PUSH
16259: EMPTY
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: PPUSH
16265: CALL_OW 69
16269: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16270: LD_ADDR_VAR 0 7
16274: PUSH
16275: LD_INT 22
16277: PUSH
16278: LD_INT 6
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: PUSH
16285: LD_INT 21
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: PUSH
16295: LD_INT 25
16297: PUSH
16298: LD_INT 1
16300: PUSH
16301: EMPTY
16302: LIST
16303: LIST
16304: PUSH
16305: LD_INT 54
16307: PUSH
16308: EMPTY
16309: LIST
16310: PUSH
16311: EMPTY
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16322: LD_ADDR_VAR 0 4
16326: PUSH
16327: LD_INT 22
16329: PUSH
16330: LD_INT 6
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 21
16339: PUSH
16340: LD_INT 1
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: LD_INT 25
16349: PUSH
16350: LD_INT 2
16352: PUSH
16353: EMPTY
16354: LIST
16355: LIST
16356: PUSH
16357: EMPTY
16358: LIST
16359: LIST
16360: LIST
16361: PPUSH
16362: CALL_OW 69
16366: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16367: LD_ADDR_VAR 0 6
16371: PUSH
16372: LD_INT 22
16374: PUSH
16375: LD_INT 6
16377: PUSH
16378: EMPTY
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 21
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: LD_INT 25
16394: PUSH
16395: LD_INT 4
16397: PUSH
16398: EMPTY
16399: LIST
16400: LIST
16401: PUSH
16402: EMPTY
16403: LIST
16404: LIST
16405: LIST
16406: PPUSH
16407: CALL_OW 69
16411: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16412: LD_ADDR_VAR 0 8
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 6
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 21
16429: PUSH
16430: LD_INT 2
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 34
16439: PUSH
16440: LD_INT 51
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: EMPTY
16448: LIST
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 69
16456: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16457: LD_VAR 0 1
16461: PPUSH
16462: CALL_OW 255
16466: PUSH
16467: LD_INT 6
16469: EQUAL
16470: PUSH
16471: LD_VAR 0 1
16475: PPUSH
16476: CALL_OW 266
16480: PUSH
16481: LD_INT 0
16483: EQUAL
16484: AND
16485: IFFALSE 16505
// begin ruPDepot = building ;
16487: LD_ADDR_EXP 21
16491: PUSH
16492: LD_VAR 0 1
16496: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16497: LD_ADDR_EXP 20
16501: PUSH
16502: LD_INT 1
16504: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 266
16514: PUSH
16515: LD_INT 4
16517: EQUAL
16518: PUSH
16519: LD_VAR 0 1
16523: PPUSH
16524: CALL_OW 255
16528: PUSH
16529: LD_INT 6
16531: EQUAL
16532: AND
16533: IFFALSE 16566
// for i in tmpSold do
16535: LD_ADDR_VAR 0 2
16539: PUSH
16540: LD_VAR 0 3
16544: PUSH
16545: FOR_IN
16546: IFFALSE 16564
// ComEnterUnit ( i , building ) ;
16548: LD_VAR 0 2
16552: PPUSH
16553: LD_VAR 0 1
16557: PPUSH
16558: CALL_OW 120
16562: GO 16545
16564: POP
16565: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16566: LD_VAR 0 1
16570: PPUSH
16571: CALL_OW 266
16575: PUSH
16576: LD_INT 6
16578: EQUAL
16579: PUSH
16580: LD_VAR 0 1
16584: PPUSH
16585: CALL_OW 255
16589: PUSH
16590: LD_INT 6
16592: EQUAL
16593: AND
16594: IFFALSE 16652
// begin for i in tmpSci do
16596: LD_ADDR_VAR 0 2
16600: PUSH
16601: LD_VAR 0 6
16605: PUSH
16606: FOR_IN
16607: IFFALSE 16625
// ComEnterUnit ( i , building ) ;
16609: LD_VAR 0 2
16613: PPUSH
16614: LD_VAR 0 1
16618: PPUSH
16619: CALL_OW 120
16623: GO 16606
16625: POP
16626: POP
// ResAllTechs ( 6 , building , 3 ) ;
16627: LD_INT 6
16629: PPUSH
16630: LD_VAR 0 1
16634: PPUSH
16635: LD_INT 3
16637: PPUSH
16638: CALL 5566 0 3
// ruPLab = building ;
16642: LD_ADDR_EXP 22
16646: PUSH
16647: LD_VAR 0 1
16651: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16652: LD_VAR 0 1
16656: PPUSH
16657: CALL_OW 266
16661: PUSH
16662: LD_INT 2
16664: EQUAL
16665: PUSH
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 255
16675: PUSH
16676: LD_INT 6
16678: EQUAL
16679: AND
16680: IFFALSE 16731
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16682: LD_ADDR_VAR 0 5
16686: PUSH
16687: LD_VAR 0 8
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PPUSH
16696: CALL_OW 313
16700: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16701: LD_VAR 0 5
16705: PPUSH
16706: CALL_OW 121
// wait ( 0 0$1 ) ;
16710: LD_INT 35
16712: PPUSH
16713: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16717: LD_VAR 0 5
16721: PPUSH
16722: LD_VAR 0 1
16726: PPUSH
16727: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16731: LD_VAR 0 1
16735: PPUSH
16736: CALL_OW 266
16740: PUSH
16741: LD_INT 32
16743: EQUAL
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 255
16754: PUSH
16755: LD_INT 6
16757: EQUAL
16758: AND
16759: IFFALSE 16811
// begin ComPlaceWeapon ( building , 42 ) ;
16761: LD_VAR 0 1
16765: PPUSH
16766: LD_INT 42
16768: PPUSH
16769: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16773: LD_VAR 0 7
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PPUSH
16782: CALL_OW 122
// wait ( 0 0$1 ) ;
16786: LD_INT 35
16788: PPUSH
16789: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16793: LD_VAR 0 7
16797: PUSH
16798: LD_INT 1
16800: ARRAY
16801: PPUSH
16802: LD_VAR 0 1
16806: PPUSH
16807: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16811: LD_VAR 0 1
16815: PPUSH
16816: CALL_OW 266
16820: PUSH
16821: LD_INT 31
16823: EQUAL
16824: PUSH
16825: LD_VAR 0 1
16829: PPUSH
16830: CALL_OW 255
16834: PUSH
16835: LD_INT 6
16837: EQUAL
16838: AND
16839: IFFALSE 16905
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16841: LD_VAR 0 7
16845: PUSH
16846: LD_INT 2
16848: ARRAY
16849: PPUSH
16850: CALL_OW 122
// wait ( 0 0$1 ) ;
16854: LD_INT 35
16856: PPUSH
16857: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16861: LD_VAR 0 7
16865: PUSH
16866: LD_INT 2
16868: ARRAY
16869: PPUSH
16870: LD_VAR 0 1
16874: PPUSH
16875: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16879: LD_VAR 0 4
16883: PUSH
16884: LD_INT 1
16886: ARRAY
16887: PPUSH
16888: LD_EXP 21
16892: PPUSH
16893: CALL_OW 120
// baseReadyToBuild = 2 ;
16897: LD_ADDR_EXP 20
16901: PUSH
16902: LD_INT 2
16904: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16905: LD_VAR 0 1
16909: PPUSH
16910: CALL_OW 266
16914: PUSH
16915: LD_INT 32
16917: EQUAL
16918: PUSH
16919: LD_VAR 0 1
16923: PPUSH
16924: CALL_OW 255
16928: PUSH
16929: LD_INT 1
16931: EQUAL
16932: AND
16933: PUSH
16934: LD_EXP 32
16938: PUSH
16939: LD_INT 0
16941: EQUAL
16942: AND
16943: IFFALSE 17188
// begin bunkerDialog = 1 ;
16945: LD_ADDR_EXP 32
16949: PUSH
16950: LD_INT 1
16952: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16953: LD_EXP 11
16957: PPUSH
16958: CALL_OW 302
16962: IFFALSE 16978
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16964: LD_EXP 11
16968: PPUSH
16969: LD_STRING D11-Eng1-1
16971: PPUSH
16972: CALL_OW 88
// end else
16976: GO 17174
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16978: LD_INT 22
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: EMPTY
16985: LIST
16986: LIST
16987: PUSH
16988: LD_INT 21
16990: PUSH
16991: LD_INT 1
16993: PUSH
16994: EMPTY
16995: LIST
16996: LIST
16997: PUSH
16998: LD_INT 25
17000: PUSH
17001: LD_INT 3
17003: PUSH
17004: EMPTY
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 26
17010: PUSH
17011: LD_INT 1
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: PPUSH
17024: CALL_OW 69
17028: PUSH
17029: LD_EXP 1
17033: PUSH
17034: EMPTY
17035: LIST
17036: PUSH
17037: LD_INT 0
17039: GREATER
17040: DIFF
17041: IFFALSE 17115
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17043: LD_INT 22
17045: PUSH
17046: LD_INT 1
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 21
17055: PUSH
17056: LD_INT 1
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: LD_INT 25
17065: PUSH
17066: LD_INT 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 26
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: PUSH
17094: LD_EXP 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: DIFF
17102: PPUSH
17103: LD_STRING D11-Eng1-1
17105: PPUSH
17106: LD_STRING D11-Eng1-1
17108: PPUSH
17109: CALL 4127 0 3
// end else
17113: GO 17174
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17115: LD_INT 22
17117: PUSH
17118: LD_INT 1
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: PUSH
17125: LD_INT 21
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: PUSH
17135: LD_INT 26
17137: PUSH
17138: LD_INT 1
17140: PUSH
17141: EMPTY
17142: LIST
17143: LIST
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: LIST
17149: PPUSH
17150: CALL_OW 69
17154: PUSH
17155: LD_EXP 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: DIFF
17163: PPUSH
17164: LD_STRING D11-Eng1-1
17166: PPUSH
17167: LD_STRING D11-Eng1-1
17169: PPUSH
17170: CALL 4127 0 3
// end ; end ; if energyVDialog = 0 then
17174: LD_EXP 33
17178: PUSH
17179: LD_INT 0
17181: EQUAL
17182: IFFALSE 17188
// EnergyDialog ;
17184: CALL 4618 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17188: LD_VAR 0 1
17192: PPUSH
17193: CALL_OW 266
17197: PUSH
17198: LD_INT 29
17200: EQUAL
17201: PUSH
17202: LD_VAR 0 1
17206: PPUSH
17207: CALL_OW 255
17211: PUSH
17212: LD_INT 1
17214: EQUAL
17215: AND
17216: IFFALSE 17226
// buildOil = 1 ;
17218: LD_ADDR_EXP 34
17222: PUSH
17223: LD_INT 1
17225: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 266
17235: PUSH
17236: LD_INT 26
17238: EQUAL
17239: PUSH
17240: LD_VAR 0 1
17244: PPUSH
17245: CALL_OW 255
17249: PUSH
17250: LD_INT 1
17252: EQUAL
17253: AND
17254: IFFALSE 17264
// buildPower = 1 ;
17256: LD_ADDR_EXP 35
17260: PUSH
17261: LD_INT 1
17263: ST_TO_ADDR
// end ;
17264: PPOPN 8
17266: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17267: LD_VAR 0 1
17271: PPUSH
17272: CALL_OW 266
17276: PUSH
17277: LD_INT 3
17279: EQUAL
17280: PUSH
17281: LD_VAR 0 1
17285: PPUSH
17286: CALL_OW 255
17290: PUSH
17291: LD_INT 1
17293: EQUAL
17294: AND
17295: PUSH
17296: LD_EXP 31
17300: PUSH
17301: LD_INT 0
17303: EQUAL
17304: AND
17305: IFFALSE 17653
// begin factoryDialog = 1 ;
17307: LD_ADDR_EXP 31
17311: PUSH
17312: LD_INT 1
17314: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17315: LD_INT 22
17317: PUSH
17318: LD_INT 1
17320: PUSH
17321: EMPTY
17322: LIST
17323: LIST
17324: PUSH
17325: LD_INT 21
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: PUSH
17335: LD_INT 30
17337: PUSH
17338: LD_INT 3
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: PUSH
17345: LD_INT 24
17347: PUSH
17348: LD_INT 1000
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: PPUSH
17361: CALL_OW 69
17365: PUSH
17366: LD_INT 1
17368: ARRAY
17369: PPUSH
17370: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17374: LD_EXP 1
17378: PPUSH
17379: LD_STRING D9a-JMM-1
17381: PPUSH
17382: CALL_OW 88
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17386: LD_INT 47
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: CALL_OW 321
17396: PUSH
17397: LD_INT 1
17399: EQUAL
17400: PUSH
17401: LD_INT 45
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: CALL_OW 321
17411: PUSH
17412: LD_INT 1
17414: EQUAL
17415: AND
17416: IFFALSE 17653
// begin if IsOK ( Campell ) then
17418: LD_EXP 12
17422: PPUSH
17423: CALL_OW 302
17427: IFFALSE 17443
// begin Say ( Campell , D9a-Mech1-1 ) ;
17429: LD_EXP 12
17433: PPUSH
17434: LD_STRING D9a-Mech1-1
17436: PPUSH
17437: CALL_OW 88
// end else
17441: GO 17639
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17443: LD_INT 22
17445: PUSH
17446: LD_INT 1
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 21
17455: PUSH
17456: LD_INT 1
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 25
17465: PUSH
17466: LD_INT 3
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 26
17475: PUSH
17476: LD_INT 1
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: PPUSH
17489: CALL_OW 69
17493: PUSH
17494: LD_EXP 1
17498: PUSH
17499: EMPTY
17500: LIST
17501: PUSH
17502: LD_INT 0
17504: GREATER
17505: DIFF
17506: IFFALSE 17580
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17508: LD_INT 22
17510: PUSH
17511: LD_INT 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: LD_INT 21
17520: PUSH
17521: LD_INT 1
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: PUSH
17528: LD_INT 25
17530: PUSH
17531: LD_INT 3
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 26
17540: PUSH
17541: LD_INT 1
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: PPUSH
17554: CALL_OW 69
17558: PUSH
17559: LD_EXP 1
17563: PUSH
17564: EMPTY
17565: LIST
17566: DIFF
17567: PPUSH
17568: LD_STRING D9a-Mech1-1
17570: PPUSH
17571: LD_STRING D9a-Mech1-1
17573: PPUSH
17574: CALL 4127 0 3
// end else
17578: GO 17639
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17580: LD_INT 22
17582: PUSH
17583: LD_INT 1
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: LD_INT 21
17592: PUSH
17593: LD_INT 1
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 26
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: LIST
17614: PPUSH
17615: CALL_OW 69
17619: PUSH
17620: LD_EXP 1
17624: PUSH
17625: EMPTY
17626: LIST
17627: DIFF
17628: PPUSH
17629: LD_STRING D9a-Mech1-1
17631: PPUSH
17632: LD_STRING D9a-Mech1-1
17634: PPUSH
17635: CALL 4127 0 3
// end ; end ; if energyVDialog = 0 then
17639: LD_EXP 33
17643: PUSH
17644: LD_INT 0
17646: EQUAL
17647: IFFALSE 17653
// EnergyDialog ;
17649: CALL 4618 0 0
// end ; end ; end ;
17653: PPOPN 1
17655: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17656: LD_VAR 0 1
17660: PPUSH
17661: CALL_OW 247
17665: PUSH
17666: LD_INT 1
17668: EQUAL
17669: PUSH
17670: LD_VAR 0 1
17674: PPUSH
17675: CALL_OW 255
17679: PUSH
17680: LD_INT 1
17682: EQUAL
17683: AND
17684: IFFALSE 17700
// lostCounter = lostCounter + 1 ;
17686: LD_ADDR_EXP 38
17690: PUSH
17691: LD_EXP 38
17695: PUSH
17696: LD_INT 1
17698: PLUS
17699: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17700: LD_VAR 0 1
17704: PPUSH
17705: CALL_OW 257
17709: PUSH
17710: LD_INT 3
17712: EQUAL
17713: PUSH
17714: LD_VAR 0 1
17718: PPUSH
17719: CALL_OW 255
17723: PUSH
17724: LD_INT 3
17726: EQUAL
17727: AND
17728: PUSH
17729: LD_INT 24
17731: PPUSH
17732: CALL_OW 302
17736: AND
17737: PUSH
17738: LD_INT 24
17740: PPUSH
17741: CALL_OW 255
17745: PUSH
17746: LD_INT 3
17748: EQUAL
17749: AND
17750: IFFALSE 17818
// begin uc_side = 3 ;
17752: LD_ADDR_OWVAR 20
17756: PUSH
17757: LD_INT 3
17759: ST_TO_ADDR
// uc_nation = 3 ;
17760: LD_ADDR_OWVAR 21
17764: PUSH
17765: LD_INT 3
17767: ST_TO_ADDR
// hc_gallery :=  ;
17768: LD_ADDR_OWVAR 33
17772: PUSH
17773: LD_STRING 
17775: ST_TO_ADDR
// hc_name :=  ;
17776: LD_ADDR_OWVAR 26
17780: PUSH
17781: LD_STRING 
17783: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17784: LD_INT 0
17786: PPUSH
17787: LD_EXP 16
17791: PPUSH
17792: LD_EXP 17
17796: PPUSH
17797: CALL_OW 12
17801: PPUSH
17802: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17806: CALL_OW 44
17810: PPUSH
17811: LD_INT 24
17813: PPUSH
17814: CALL_OW 52
// end ; end ;
17818: PPOPN 1
17820: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17821: LD_INT 0
17823: PPUSH
17824: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17825: LD_ADDR_VAR 0 4
17829: PUSH
17830: LD_INT 22
17832: PUSH
17833: LD_INT 1
17835: PUSH
17836: EMPTY
17837: LIST
17838: LIST
17839: PPUSH
17840: CALL_OW 69
17844: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17845: LD_VAR 0 1
17849: PUSH
17850: LD_INT 1
17852: EQUAL
17853: PUSH
17854: LD_VAR 0 2
17858: PUSH
17859: LD_INT 6
17861: EQUAL
17862: AND
17863: PUSH
17864: LD_EXP 41
17868: PUSH
17869: LD_INT 1
17871: EQUAL
17872: AND
17873: IFFALSE 17928
// begin donaldsonCoopAttack = 0 ;
17875: LD_ADDR_EXP 41
17879: PUSH
17880: LD_INT 0
17882: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17883: LD_ADDR_VAR 0 3
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_INT 4
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: PPUSH
17901: CALL_OW 69
17905: PUSH
17906: FOR_IN
17907: IFFALSE 17926
// ComAgressiveMove ( i , 52 , 64 ) ;
17909: LD_VAR 0 3
17913: PPUSH
17914: LD_INT 52
17916: PPUSH
17917: LD_INT 64
17919: PPUSH
17920: CALL_OW 114
17924: GO 17906
17926: POP
17927: POP
// end ; end ;
17928: PPOPN 4
17930: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17931: LD_VAR 0 1
17935: PPUSH
17936: CALL_OW 264
17940: PUSH
17941: LD_INT 53
17943: EQUAL
17944: IFFALSE 18029
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17946: LD_VAR 0 1
17950: PPUSH
17951: LD_INT 21
17953: PPUSH
17954: CALL 4834 0 2
// uc_side = 3 ;
17958: LD_ADDR_OWVAR 20
17962: PUSH
17963: LD_INT 3
17965: ST_TO_ADDR
// uc_nation = 3 ;
17966: LD_ADDR_OWVAR 21
17970: PUSH
17971: LD_INT 3
17973: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17974: LD_INT 0
17976: PPUSH
17977: LD_EXP 17
17981: PPUSH
17982: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17986: CALL_OW 44
17990: PPUSH
17991: LD_VAR 0 2
17995: PPUSH
17996: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
18000: LD_VAR 0 1
18004: PPUSH
18005: LD_INT 6
18007: PPUSH
18008: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
18012: LD_VAR 0 1
18016: PPUSH
18017: CALL_OW 313
18021: PPUSH
18022: LD_INT 6
18024: PPUSH
18025: CALL_OW 235
// end ; end ;
18029: PPOPN 2
18031: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18032: LD_INT 0
18034: PPUSH
18035: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18036: LD_VAR 0 1
18040: PPUSH
18041: CALL_OW 255
18045: PUSH
18046: LD_INT 3
18048: EQUAL
18049: PUSH
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 247
18059: PUSH
18060: LD_INT 2
18062: EQUAL
18063: AND
18064: IFFALSE 18158
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18066: LD_VAR 0 1
18070: PPUSH
18071: CALL_OW 264
18075: PUSH
18076: LD_INT 42
18078: EQUAL
18079: PUSH
18080: LD_VAR 0 1
18084: PPUSH
18085: CALL_OW 264
18089: PUSH
18090: LD_INT 43
18092: EQUAL
18093: OR
18094: PUSH
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 264
18104: PUSH
18105: LD_INT 44
18107: EQUAL
18108: OR
18109: IFFALSE 18158
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18111: LD_INT 24
18113: PPUSH
18114: LD_VAR 0 1
18118: PPUSH
18119: CALL_OW 265
18123: PPUSH
18124: LD_VAR 0 1
18128: PPUSH
18129: CALL_OW 262
18133: PPUSH
18134: LD_VAR 0 1
18138: PPUSH
18139: CALL_OW 263
18143: PPUSH
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 264
18153: PPUSH
18154: CALL_OW 185
// end ;
18158: PPOPN 3
18160: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18161: LD_VAR 0 1
18165: PPUSH
18166: CALL_OW 255
18170: PUSH
18171: LD_INT 3
18173: EQUAL
18174: PUSH
18175: LD_VAR 0 2
18179: PPUSH
18180: CALL_OW 255
18184: PUSH
18185: LD_INT 3
18187: EQUAL
18188: AND
18189: PUSH
18190: LD_VAR 0 1
18194: PPUSH
18195: CALL_OW 302
18199: AND
18200: IFFALSE 18242
// begin ComRepairVehicle ( human , vehicle ) ;
18202: LD_VAR 0 2
18206: PPUSH
18207: LD_VAR 0 1
18211: PPUSH
18212: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18216: LD_VAR 0 2
18220: PPUSH
18221: LD_VAR 0 1
18225: PPUSH
18226: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18230: LD_VAR 0 1
18234: PPUSH
18235: LD_INT 100
18237: PPUSH
18238: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18242: LD_VAR 0 1
18246: PPUSH
18247: CALL_OW 255
18251: PUSH
18252: LD_INT 3
18254: EQUAL
18255: PUSH
18256: LD_VAR 0 2
18260: PPUSH
18261: CALL_OW 255
18265: PUSH
18266: LD_INT 3
18268: EQUAL
18269: AND
18270: PUSH
18271: LD_INT 24
18273: PPUSH
18274: CALL_OW 302
18278: AND
18279: PUSH
18280: LD_VAR 0 1
18284: PPUSH
18285: CALL_OW 302
18289: NOT
18290: AND
18291: IFFALSE 18305
// ComEnterUnit ( human , rubfact0 ) ;
18293: LD_VAR 0 2
18297: PPUSH
18298: LD_INT 24
18300: PPUSH
18301: CALL_OW 120
// end ;
18305: PPOPN 2
18307: END
// on Command ( comandid ) do var i , j , tmp ;
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
18312: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: LD_INT 22
18320: PUSH
18321: LD_INT 1
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: LD_INT 21
18333: PUSH
18334: LD_INT 1
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 21
18343: PUSH
18344: LD_INT 2
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: LIST
18355: PUSH
18356: EMPTY
18357: LIST
18358: LIST
18359: PPUSH
18360: CALL_OW 69
18364: PUSH
18365: FOR_IN
18366: IFFALSE 18476
// begin if GetTaskList ( i ) > 0 then
18368: LD_VAR 0 2
18372: PPUSH
18373: CALL_OW 437
18377: PUSH
18378: LD_INT 0
18380: GREATER
18381: IFFALSE 18474
// begin for j = 1 to GetTaskList ( i ) do
18383: LD_ADDR_VAR 0 3
18387: PUSH
18388: DOUBLE
18389: LD_INT 1
18391: DEC
18392: ST_TO_ADDR
18393: LD_VAR 0 2
18397: PPUSH
18398: CALL_OW 437
18402: PUSH
18403: FOR_TO
18404: IFFALSE 18472
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18406: LD_ADDR_VAR 0 4
18410: PUSH
18411: LD_VAR 0 2
18415: PPUSH
18416: CALL_OW 437
18420: PUSH
18421: LD_VAR 0 3
18425: ARRAY
18426: PUSH
18427: LD_INT 4
18429: ARRAY
18430: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18431: LD_VAR 0 4
18435: PPUSH
18436: CALL_OW 255
18440: PUSH
18441: LD_INT 4
18443: EQUAL
18444: PUSH
18445: LD_VAR 0 4
18449: PPUSH
18450: CALL_OW 255
18454: PUSH
18455: LD_INT 0
18457: EQUAL
18458: OR
18459: IFFALSE 18470
// ComStop ( i ) ;
18461: LD_VAR 0 2
18465: PPUSH
18466: CALL_OW 141
// end ;
18470: GO 18403
18472: POP
18473: POP
// end ; end ;
18474: GO 18365
18476: POP
18477: POP
// end ; end_of_file
18478: PPOPN 4
18480: END
// every 10 10$0 do
18481: GO 18483
18483: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18484: LD_INT 5
18486: PPUSH
18487: LD_INT 3
18489: PPUSH
18490: LD_INT 1
18492: PUSH
18493: LD_INT 2
18495: PUSH
18496: LD_INT 3
18498: PUSH
18499: LD_INT 4
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: LIST
18506: PUSH
18507: LD_OWVAR 67
18511: ARRAY
18512: PLUS
18513: PPUSH
18514: LD_INT 0
18516: PPUSH
18517: LD_INT 0
18519: PPUSH
18520: LD_INT 0
18522: PPUSH
18523: LD_INT 0
18525: PPUSH
18526: LD_EXP 16
18530: PPUSH
18531: LD_EXP 17
18535: PPUSH
18536: CALL_OW 12
18540: PPUSH
18541: LD_INT 4
18543: PPUSH
18544: LD_INT 14
18546: PPUSH
18547: LD_INT 1
18549: PPUSH
18550: LD_INT 2
18552: PPUSH
18553: CALL 7419 0 12
// end ;
18557: END
// every 17 17$0 do
18558: GO 18560
18560: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18561: LD_INT 5
18563: PPUSH
18564: LD_INT 3
18566: PPUSH
18567: LD_INT 3
18569: PUSH
18570: LD_INT 2
18572: PUSH
18573: LD_INT 3
18575: PUSH
18576: LD_INT 4
18578: PUSH
18579: EMPTY
18580: LIST
18581: LIST
18582: LIST
18583: PUSH
18584: LD_OWVAR 67
18588: ARRAY
18589: PLUS
18590: PPUSH
18591: LD_INT 0
18593: PPUSH
18594: LD_INT 0
18596: PPUSH
18597: LD_INT 0
18599: PPUSH
18600: LD_INT 1
18602: PPUSH
18603: LD_EXP 16
18607: PPUSH
18608: LD_EXP 17
18612: PPUSH
18613: CALL_OW 12
18617: PPUSH
18618: LD_INT 4
18620: PPUSH
18621: LD_INT 14
18623: PPUSH
18624: LD_INT 1
18626: PPUSH
18627: LD_INT 1
18629: PPUSH
18630: CALL 7419 0 12
// end ;
18634: END
// every 25 25$0 do
18635: GO 18637
18637: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18638: LD_INT 5
18640: PPUSH
18641: LD_INT 3
18643: PPUSH
18644: LD_INT 3
18646: PUSH
18647: LD_INT 2
18649: PUSH
18650: LD_INT 3
18652: PUSH
18653: LD_INT 4
18655: PUSH
18656: EMPTY
18657: LIST
18658: LIST
18659: LIST
18660: PUSH
18661: LD_OWVAR 67
18665: ARRAY
18666: PLUS
18667: PPUSH
18668: LD_INT 0
18670: PPUSH
18671: LD_INT 0
18673: PPUSH
18674: LD_INT 0
18676: PPUSH
18677: LD_INT 2
18679: PPUSH
18680: LD_EXP 16
18684: PPUSH
18685: LD_EXP 17
18689: PPUSH
18690: CALL_OW 12
18694: PPUSH
18695: LD_INT 4
18697: PPUSH
18698: LD_INT 14
18700: PPUSH
18701: LD_INT 1
18703: PPUSH
18704: LD_INT 1
18706: PPUSH
18707: CALL 7419 0 12
// end ;
18711: END
// every 25 25$0 do
18712: GO 18714
18714: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18715: LD_INT 4
18717: PPUSH
18718: LD_INT 5
18720: PPUSH
18721: LD_INT 3
18723: PUSH
18724: LD_INT 4
18726: PUSH
18727: LD_INT 5
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: LIST
18734: PUSH
18735: LD_OWVAR 67
18739: ARRAY
18740: PPUSH
18741: LD_EXP 16
18745: PPUSH
18746: LD_EXP 17
18750: PPUSH
18751: CALL_OW 12
18755: PPUSH
18756: LD_INT 3
18758: PPUSH
18759: LD_INT 1
18761: PPUSH
18762: LD_INT 1
18764: PPUSH
18765: LD_INT 42
18767: PUSH
18768: LD_INT 42
18770: PUSH
18771: LD_INT 43
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 42
18781: PUSH
18782: LD_INT 43
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 43
18791: PUSH
18792: LD_INT 43
18794: PUSH
18795: LD_INT 43
18797: PUSH
18798: LD_INT 44
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: PUSH
18807: EMPTY
18808: LIST
18809: LIST
18810: LIST
18811: PUSH
18812: LD_OWVAR 67
18816: ARRAY
18817: PPUSH
18818: EMPTY
18819: PPUSH
18820: EMPTY
18821: PPUSH
18822: LD_INT 1
18824: PPUSH
18825: CALL 9232 0 11
// end ; end_of_file
18829: END
// every 0 0$1 trigger startTimer = 1 do
18830: LD_EXP 30
18834: PUSH
18835: LD_INT 1
18837: EQUAL
18838: IFFALSE 18968
18840: GO 18842
18842: DISABLE
// begin enable ;
18843: ENABLE
// if timerStatus = 1 then
18844: LD_EXP 29
18848: PUSH
18849: LD_INT 1
18851: EQUAL
18852: IFFALSE 18885
// begin timeToSupport = timeToSupport - 0 0$01 ;
18854: LD_ADDR_EXP 28
18858: PUSH
18859: LD_EXP 28
18863: PUSH
18864: LD_INT 35
18866: MINUS
18867: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18868: LD_ADDR_OWVAR 47
18872: PUSH
18873: LD_STRING #Am04-1
18875: PUSH
18876: LD_EXP 28
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: ST_TO_ADDR
// end ; if timerStatus = 2 then
18885: LD_EXP 29
18889: PUSH
18890: LD_INT 2
18892: EQUAL
18893: IFFALSE 18926
// begin timeToSupport = timeToSupport - 0 0$01 ;
18895: LD_ADDR_EXP 28
18899: PUSH
18900: LD_EXP 28
18904: PUSH
18905: LD_INT 35
18907: MINUS
18908: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18909: LD_ADDR_OWVAR 47
18913: PUSH
18914: LD_STRING #Am04-2
18916: PUSH
18917: LD_EXP 28
18921: PUSH
18922: EMPTY
18923: LIST
18924: LIST
18925: ST_TO_ADDR
// end ; if timerStatus = 3 then
18926: LD_EXP 29
18930: PUSH
18931: LD_INT 3
18933: EQUAL
18934: IFFALSE 18950
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18936: LD_ADDR_EXP 27
18940: PUSH
18941: LD_EXP 27
18945: PUSH
18946: LD_INT 35
18948: MINUS
18949: ST_TO_ADDR
// end ; if timerStatus = 4 then
18950: LD_EXP 29
18954: PUSH
18955: LD_INT 4
18957: EQUAL
18958: IFFALSE 18968
// begin display_strings =  ;
18960: LD_ADDR_OWVAR 47
18964: PUSH
18965: LD_STRING 
18967: ST_TO_ADDR
// end ; end ; end_of_file
18968: END
// every 0 0$1 trigger IsDead ( JMM ) do
18969: LD_EXP 1
18973: PPUSH
18974: CALL_OW 301
18978: IFFALSE 18990
18980: GO 18982
18982: DISABLE
// YouLost ( JMM ) ;
18983: LD_STRING JMM
18985: PPUSH
18986: CALL_OW 104
18990: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18991: LD_INT 4
18993: PPUSH
18994: CALL_OW 301
18998: IFFALSE 19010
19000: GO 19002
19002: DISABLE
// YouLost ( Base ) ; end_of_file
19003: LD_STRING Base
19005: PPUSH
19006: CALL_OW 104
19010: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19011: LD_EXP 15
19015: PPUSH
19016: CALL_OW 301
19020: PUSH
19021: LD_INT 22
19023: PUSH
19024: LD_INT 3
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: PUSH
19031: LD_INT 21
19033: PUSH
19034: LD_INT 1
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PPUSH
19045: CALL_OW 69
19049: PUSH
19050: LD_INT 14
19052: PUSH
19053: LD_INT 13
19055: PUSH
19056: LD_INT 12
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: LIST
19063: PUSH
19064: LD_OWVAR 67
19068: ARRAY
19069: LESS
19070: AND
19071: IFFALSE 19542
19073: GO 19075
19075: DISABLE
19076: LD_INT 0
19078: PPUSH
19079: PPUSH
// begin AIEnable = 0 ;
19080: LD_ADDR_EXP 37
19084: PUSH
19085: LD_INT 0
19087: ST_TO_ADDR
// escapeAvalaible = 1 ;
19088: LD_ADDR_EXP 40
19092: PUSH
19093: LD_INT 1
19095: ST_TO_ADDR
// InGameOn ;
19096: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19100: LD_INT 3
19102: PPUSH
19103: LD_INT 1
19105: PPUSH
19106: LD_INT 1
19108: PPUSH
19109: LD_INT 0
19111: PPUSH
19112: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19116: LD_INT 6
19118: PPUSH
19119: LD_INT 1
19121: PPUSH
19122: LD_INT 1
19124: PPUSH
19125: LD_INT 0
19127: PPUSH
19128: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19132: LD_INT 5
19134: PPUSH
19135: LD_INT 1
19137: PPUSH
19138: LD_INT 1
19140: PPUSH
19141: LD_INT 0
19143: PPUSH
19144: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19148: LD_INT 3
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19158: LD_INT 97
19160: PPUSH
19161: LD_INT 91
19163: PPUSH
19164: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19168: LD_INT 22
19170: PUSH
19171: LD_INT 3
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PPUSH
19192: CALL_OW 69
19196: PPUSH
19197: CALL_OW 121
// wait ( 0 0$01 ) ;
19201: LD_INT 35
19203: PPUSH
19204: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19208: LD_INT 22
19210: PUSH
19211: LD_INT 3
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 21
19220: PUSH
19221: LD_INT 1
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: PPUSH
19237: LD_INT 124
19239: PPUSH
19240: LD_INT 98
19242: PPUSH
19243: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19247: LD_INT 22
19249: PUSH
19250: LD_INT 5
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PUSH
19257: LD_INT 21
19259: PUSH
19260: LD_INT 1
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: PUSH
19267: EMPTY
19268: LIST
19269: LIST
19270: PPUSH
19271: CALL_OW 69
19275: PPUSH
19276: CALL_OW 121
// wait ( 0 0$01 ) ;
19280: LD_INT 35
19282: PPUSH
19283: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19287: LD_INT 22
19289: PUSH
19290: LD_INT 5
19292: PUSH
19293: EMPTY
19294: LIST
19295: LIST
19296: PUSH
19297: LD_INT 21
19299: PUSH
19300: LD_INT 1
19302: PUSH
19303: EMPTY
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: PPUSH
19316: LD_INT 124
19318: PPUSH
19319: LD_INT 98
19321: PPUSH
19322: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19326: LD_INT 22
19328: PUSH
19329: LD_INT 6
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 21
19338: PUSH
19339: LD_INT 1
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: EMPTY
19347: LIST
19348: LIST
19349: PPUSH
19350: CALL_OW 69
19354: PPUSH
19355: CALL_OW 121
// wait ( 0 0$01 ) ;
19359: LD_INT 35
19361: PPUSH
19362: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19366: LD_INT 22
19368: PUSH
19369: LD_INT 6
19371: PUSH
19372: EMPTY
19373: LIST
19374: LIST
19375: PUSH
19376: LD_INT 21
19378: PUSH
19379: LD_INT 1
19381: PUSH
19382: EMPTY
19383: LIST
19384: LIST
19385: PUSH
19386: EMPTY
19387: LIST
19388: LIST
19389: PPUSH
19390: CALL_OW 69
19394: PPUSH
19395: LD_INT 124
19397: PPUSH
19398: LD_INT 98
19400: PPUSH
19401: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19405: LD_INT 22
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: LD_INT 21
19417: PUSH
19418: LD_INT 1
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: EMPTY
19426: LIST
19427: LIST
19428: PPUSH
19429: CALL_OW 69
19433: PPUSH
19434: LD_INT 124
19436: PPUSH
19437: LD_INT 98
19439: PPUSH
19440: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19444: LD_INT 124
19446: PPUSH
19447: LD_INT 98
19449: PPUSH
19450: CALL_OW 84
// p := 0 0$0 ;
19454: LD_ADDR_VAR 0 2
19458: PUSH
19459: LD_INT 0
19461: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19462: LD_INT 35
19464: PPUSH
19465: CALL_OW 67
// p := p + 0 0$1 ;
19469: LD_ADDR_VAR 0 2
19473: PUSH
19474: LD_VAR 0 2
19478: PUSH
19479: LD_INT 35
19481: PLUS
19482: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19483: LD_INT 23
19485: PUSH
19486: LD_INT 3
19488: PUSH
19489: EMPTY
19490: LIST
19491: LIST
19492: PUSH
19493: LD_INT 21
19495: PUSH
19496: LD_INT 1
19498: PUSH
19499: EMPTY
19500: LIST
19501: LIST
19502: PUSH
19503: LD_INT 24
19505: PUSH
19506: LD_INT 250
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: LIST
19517: PPUSH
19518: CALL_OW 69
19522: PUSH
19523: LD_INT 0
19525: EQUAL
19526: PUSH
19527: LD_VAR 0 2
19531: PUSH
19532: LD_INT 245
19534: GREATEREQUAL
19535: OR
19536: IFFALSE 19462
// FinishMission ;
19538: CALL 19715 0 0
// end ;
19542: PPOPN 2
19544: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19545: LD_EXP 40
19549: PUSH
19550: LD_INT 1
19552: EQUAL
19553: IFFALSE 19712
19555: GO 19557
19557: DISABLE
19558: LD_INT 0
19560: PPUSH
// begin enable ;
19561: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19562: LD_ADDR_VAR 0 1
19566: PUSH
19567: LD_INT 22
19569: PUSH
19570: LD_INT 3
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: PUSH
19582: FOR_IN
19583: IFFALSE 19610
// if IsInArea ( i , RussianEscape ) then
19585: LD_VAR 0 1
19589: PPUSH
19590: LD_INT 5
19592: PPUSH
19593: CALL_OW 308
19597: IFFALSE 19608
// RemoveUnit ( i ) ;
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 64
19608: GO 19582
19610: POP
19611: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19612: LD_ADDR_VAR 0 1
19616: PUSH
19617: LD_INT 22
19619: PUSH
19620: LD_INT 5
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PPUSH
19627: CALL_OW 69
19631: PUSH
19632: FOR_IN
19633: IFFALSE 19660
// if IsInArea ( i , RussianEscape ) then
19635: LD_VAR 0 1
19639: PPUSH
19640: LD_INT 5
19642: PPUSH
19643: CALL_OW 308
19647: IFFALSE 19658
// RemoveUnit ( i ) ;
19649: LD_VAR 0 1
19653: PPUSH
19654: CALL_OW 64
19658: GO 19632
19660: POP
19661: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19662: LD_ADDR_VAR 0 1
19666: PUSH
19667: LD_INT 22
19669: PUSH
19670: LD_INT 6
19672: PUSH
19673: EMPTY
19674: LIST
19675: LIST
19676: PPUSH
19677: CALL_OW 69
19681: PUSH
19682: FOR_IN
19683: IFFALSE 19710
// if IsInArea ( i , RussianEscape ) then
19685: LD_VAR 0 1
19689: PPUSH
19690: LD_INT 5
19692: PPUSH
19693: CALL_OW 308
19697: IFFALSE 19708
// RemoveUnit ( i ) ;
19699: LD_VAR 0 1
19703: PPUSH
19704: CALL_OW 64
19708: GO 19682
19710: POP
19711: POP
// end ;
19712: PPOPN 1
19714: END
// export function FinishMission ; var tmp ; begin
19715: LD_INT 0
19717: PPUSH
19718: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19719: LD_INT 69
19721: PPUSH
19722: LD_INT 1
19724: PPUSH
19725: CALL_OW 321
19729: PPUSH
19730: LD_STRING GatlingInGamma
19732: PPUSH
19733: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19737: LD_EXP 34
19741: PUSH
19742: LD_INT 1
19744: EQUAL
19745: PUSH
19746: LD_EXP 35
19750: PUSH
19751: LD_INT 1
19753: EQUAL
19754: AND
19755: IFFALSE 19769
// begin AddMedal ( oil , 1 ) ;
19757: LD_STRING oil
19759: PPUSH
19760: LD_INT 1
19762: PPUSH
19763: CALL_OW 101
// end else
19767: GO 19862
// begin if buildOil = 1 and buildPower = 0 then
19769: LD_EXP 34
19773: PUSH
19774: LD_INT 1
19776: EQUAL
19777: PUSH
19778: LD_EXP 35
19782: PUSH
19783: LD_INT 0
19785: EQUAL
19786: AND
19787: IFFALSE 19800
// AddMedal ( oil , - 1 ) ;
19789: LD_STRING oil
19791: PPUSH
19792: LD_INT 1
19794: NEG
19795: PPUSH
19796: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19800: LD_EXP 34
19804: PUSH
19805: LD_INT 0
19807: EQUAL
19808: PUSH
19809: LD_EXP 35
19813: PUSH
19814: LD_INT 1
19816: EQUAL
19817: AND
19818: IFFALSE 19831
// AddMedal ( oil , - 2 ) ;
19820: LD_STRING oil
19822: PPUSH
19823: LD_INT 2
19825: NEG
19826: PPUSH
19827: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19831: LD_EXP 34
19835: PUSH
19836: LD_INT 0
19838: EQUAL
19839: PUSH
19840: LD_EXP 35
19844: PUSH
19845: LD_INT 0
19847: EQUAL
19848: AND
19849: IFFALSE 19862
// AddMedal ( oil , - 3 ) ;
19851: LD_STRING oil
19853: PPUSH
19854: LD_INT 3
19856: NEG
19857: PPUSH
19858: CALL_OW 101
// end ; if lostCounter > 3 then
19862: LD_EXP 38
19866: PUSH
19867: LD_INT 3
19869: GREATER
19870: IFFALSE 19885
// begin AddMedal ( deaths , - 1 ) ;
19872: LD_STRING deaths
19874: PPUSH
19875: LD_INT 1
19877: NEG
19878: PPUSH
19879: CALL_OW 101
// end else
19883: GO 19895
// begin AddMedal ( deaths , 1 ) ;
19885: LD_STRING deaths
19887: PPUSH
19888: LD_INT 1
19890: PPUSH
19891: CALL_OW 101
// end ; if honor = 1 then
19895: LD_EXP 39
19899: PUSH
19900: LD_INT 1
19902: EQUAL
19903: IFFALSE 19917
// begin AddMedal ( honour , 1 ) ;
19905: LD_STRING honour
19907: PPUSH
19908: LD_INT 1
19910: PPUSH
19911: CALL_OW 101
// end else
19915: GO 19928
// begin AddMedal ( honour , - 1 ) ;
19917: LD_STRING honour
19919: PPUSH
19920: LD_INT 1
19922: NEG
19923: PPUSH
19924: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19928: LD_STRING Main
19930: PPUSH
19931: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19935: LD_INT 22
19937: PUSH
19938: LD_INT 1
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: PUSH
19945: LD_INT 23
19947: PUSH
19948: LD_INT 1
19950: PUSH
19951: EMPTY
19952: LIST
19953: LIST
19954: PUSH
19955: LD_INT 21
19957: PUSH
19958: LD_INT 1
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: PUSH
19965: EMPTY
19966: LIST
19967: LIST
19968: LIST
19969: PPUSH
19970: CALL_OW 69
19974: PPUSH
19975: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19979: LD_EXP 1
19983: PPUSH
19984: LD_EXP 44
19988: PUSH
19989: LD_STRING JMM
19991: STR
19992: PPUSH
19993: CALL_OW 38
// if IsOK ( Bobby ) then
19997: LD_EXP 2
20001: PPUSH
20002: CALL_OW 302
20006: IFFALSE 20026
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20008: LD_EXP 2
20012: PPUSH
20013: LD_EXP 44
20017: PUSH
20018: LD_STRING Bobby
20020: STR
20021: PPUSH
20022: CALL_OW 38
// if IsOK ( Cyrus ) then
20026: LD_EXP 3
20030: PPUSH
20031: CALL_OW 302
20035: IFFALSE 20055
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20037: LD_EXP 3
20041: PPUSH
20042: LD_EXP 44
20046: PUSH
20047: LD_STRING Cyrus
20049: STR
20050: PPUSH
20051: CALL_OW 38
// if IsOK ( Lisa ) then
20055: LD_EXP 4
20059: PPUSH
20060: CALL_OW 302
20064: IFFALSE 20084
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20066: LD_EXP 4
20070: PPUSH
20071: LD_EXP 44
20075: PUSH
20076: LD_STRING Lisa
20078: STR
20079: PPUSH
20080: CALL_OW 38
// if IsOK ( Brown ) then
20084: LD_EXP 7
20088: PPUSH
20089: CALL_OW 302
20093: IFFALSE 20113
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20095: LD_EXP 7
20099: PPUSH
20100: LD_EXP 44
20104: PUSH
20105: LD_STRING Brown
20107: STR
20108: PPUSH
20109: CALL_OW 38
// if IsOK ( Donaldson ) then
20113: LD_EXP 13
20117: PPUSH
20118: CALL_OW 302
20122: IFFALSE 20142
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20124: LD_EXP 13
20128: PPUSH
20129: LD_EXP 44
20133: PUSH
20134: LD_STRING Donaldson
20136: STR
20137: PPUSH
20138: CALL_OW 38
// if IsOK ( Frank ) then
20142: LD_EXP 5
20146: PPUSH
20147: CALL_OW 302
20151: IFFALSE 20171
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20153: LD_EXP 5
20157: PPUSH
20158: LD_EXP 44
20162: PUSH
20163: LD_STRING Frank
20165: STR
20166: PPUSH
20167: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20171: LD_INT 50
20173: PUSH
20174: EMPTY
20175: LIST
20176: PUSH
20177: LD_INT 22
20179: PUSH
20180: LD_INT 1
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PUSH
20187: LD_INT 21
20189: PUSH
20190: LD_INT 1
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 69
20206: PUSH
20207: LD_EXP 1
20211: PUSH
20212: LD_EXP 2
20216: PUSH
20217: LD_EXP 3
20221: PUSH
20222: LD_EXP 4
20226: PUSH
20227: LD_EXP 7
20231: PUSH
20232: LD_EXP 13
20236: PUSH
20237: LD_EXP 5
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: LIST
20246: LIST
20247: LIST
20248: LIST
20249: LIST
20250: DIFF
20251: PPUSH
20252: LD_STRING 04_other_survivors
20254: PPUSH
20255: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20259: LD_INT 22
20261: PPUSH
20262: CALL 20275 0 1
// YouWin ;
20266: CALL_OW 103
// end ;
20270: LD_VAR 0 1
20274: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20275: LD_INT 0
20277: PPUSH
20278: PPUSH
20279: PPUSH
20280: PPUSH
// gammaBase = [ ] ;
20281: LD_ADDR_VAR 0 4
20285: PUSH
20286: EMPTY
20287: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20288: LD_ADDR_VAR 0 5
20292: PUSH
20293: LD_VAR 0 1
20297: PPUSH
20298: LD_INT 22
20300: PUSH
20301: LD_INT 1
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: LD_INT 21
20310: PUSH
20311: LD_INT 3
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: PUSH
20318: LD_INT 50
20320: PUSH
20321: EMPTY
20322: LIST
20323: PUSH
20324: EMPTY
20325: LIST
20326: LIST
20327: LIST
20328: PPUSH
20329: CALL_OW 70
20333: ST_TO_ADDR
// for i in buildings do
20334: LD_ADDR_VAR 0 3
20338: PUSH
20339: LD_VAR 0 5
20343: PUSH
20344: FOR_IN
20345: IFFALSE 20682
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20347: LD_VAR 0 3
20351: PPUSH
20352: CALL_OW 266
20356: PUSH
20357: LD_INT 6
20359: PUSH
20360: LD_INT 7
20362: PUSH
20363: LD_INT 8
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: LIST
20370: IN
20371: IFFALSE 20485
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20373: LD_ADDR_VAR 0 4
20377: PUSH
20378: LD_VAR 0 4
20382: PUSH
20383: LD_VAR 0 3
20387: PPUSH
20388: CALL_OW 266
20392: PUSH
20393: LD_VAR 0 3
20397: PPUSH
20398: CALL_OW 250
20402: PUSH
20403: LD_VAR 0 3
20407: PPUSH
20408: CALL_OW 251
20412: PUSH
20413: LD_VAR 0 3
20417: PPUSH
20418: CALL_OW 254
20422: PUSH
20423: LD_VAR 0 3
20427: PPUSH
20428: CALL_OW 267
20432: PUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: CALL_OW 248
20442: PUSH
20443: LD_VAR 0 3
20447: PPUSH
20448: LD_INT 1
20450: PPUSH
20451: CALL_OW 268
20455: PUSH
20456: LD_VAR 0 3
20460: PPUSH
20461: LD_INT 2
20463: PPUSH
20464: CALL_OW 268
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: ADD
20482: ST_TO_ADDR
20483: GO 20680
// if GetBType ( i ) in [ b_bunker ] then
20485: LD_VAR 0 3
20489: PPUSH
20490: CALL_OW 266
20494: PUSH
20495: LD_INT 32
20497: PUSH
20498: EMPTY
20499: LIST
20500: IN
20501: IFFALSE 20598
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20503: LD_ADDR_VAR 0 4
20507: PUSH
20508: LD_VAR 0 4
20512: PUSH
20513: LD_VAR 0 3
20517: PPUSH
20518: CALL_OW 266
20522: PUSH
20523: LD_VAR 0 3
20527: PPUSH
20528: CALL_OW 250
20532: PUSH
20533: LD_VAR 0 3
20537: PPUSH
20538: CALL_OW 251
20542: PUSH
20543: LD_VAR 0 3
20547: PPUSH
20548: CALL_OW 254
20552: PUSH
20553: LD_VAR 0 3
20557: PPUSH
20558: CALL_OW 267
20562: PUSH
20563: LD_VAR 0 3
20567: PPUSH
20568: CALL_OW 248
20572: PUSH
20573: LD_VAR 0 3
20577: PPUSH
20578: CALL_OW 269
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: EMPTY
20593: LIST
20594: ADD
20595: ST_TO_ADDR
20596: GO 20680
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20598: LD_ADDR_VAR 0 4
20602: PUSH
20603: LD_VAR 0 4
20607: PUSH
20608: LD_VAR 0 3
20612: PPUSH
20613: CALL_OW 266
20617: PUSH
20618: LD_VAR 0 3
20622: PPUSH
20623: CALL_OW 250
20627: PUSH
20628: LD_VAR 0 3
20632: PPUSH
20633: CALL_OW 251
20637: PUSH
20638: LD_VAR 0 3
20642: PPUSH
20643: CALL_OW 254
20647: PUSH
20648: LD_VAR 0 3
20652: PPUSH
20653: CALL_OW 267
20657: PUSH
20658: LD_VAR 0 3
20662: PPUSH
20663: CALL_OW 248
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: LIST
20672: LIST
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: ADD
20679: ST_TO_ADDR
// end ;
20680: GO 20344
20682: POP
20683: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20684: LD_VAR 0 4
20688: PPUSH
20689: LD_STRING GammaBase
20691: PPUSH
20692: CALL_OW 39
// end ; end_of_file
20696: LD_VAR 0 2
20700: RET
// every 1 1$15 do
20701: GO 20703
20703: DISABLE
// begin if supply <= 13 and supply > 7 then
20704: LD_EXP 36
20708: PUSH
20709: LD_INT 13
20711: LESSEQUAL
20712: PUSH
20713: LD_EXP 36
20717: PUSH
20718: LD_INT 7
20720: GREATER
20721: AND
20722: IFFALSE 20745
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20724: LD_INT 3
20726: PPUSH
20727: LD_INT 5
20729: PPUSH
20730: CALL_OW 12
20734: PPUSH
20735: LD_INT 18
20737: PPUSH
20738: LD_INT 1
20740: PPUSH
20741: CALL_OW 55
// if supply <= 7 and supply > 4 then
20745: LD_EXP 36
20749: PUSH
20750: LD_INT 7
20752: LESSEQUAL
20753: PUSH
20754: LD_EXP 36
20758: PUSH
20759: LD_INT 4
20761: GREATER
20762: AND
20763: IFFALSE 20786
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20765: LD_INT 3
20767: PPUSH
20768: LD_INT 5
20770: PPUSH
20771: CALL_OW 12
20775: PPUSH
20776: LD_INT 19
20778: PPUSH
20779: LD_INT 1
20781: PPUSH
20782: CALL_OW 55
// if supply <= 4 and supply > 0 then
20786: LD_EXP 36
20790: PUSH
20791: LD_INT 4
20793: LESSEQUAL
20794: PUSH
20795: LD_EXP 36
20799: PUSH
20800: LD_INT 0
20802: GREATER
20803: AND
20804: IFFALSE 20827
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20806: LD_INT 3
20808: PPUSH
20809: LD_INT 5
20811: PPUSH
20812: CALL_OW 12
20816: PPUSH
20817: LD_INT 20
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: CALL_OW 55
// if supply > 0 then
20827: LD_EXP 36
20831: PUSH
20832: LD_INT 0
20834: GREATER
20835: IFFALSE 20852
// begin supply = supply - 1 ;
20837: LD_ADDR_EXP 36
20841: PUSH
20842: LD_EXP 36
20846: PUSH
20847: LD_INT 1
20849: MINUS
20850: ST_TO_ADDR
// enable ;
20851: ENABLE
// end ; end ;
20852: END
