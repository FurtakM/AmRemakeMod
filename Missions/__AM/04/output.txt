// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4230 0 0
// PrepareRussianBase ;
 241: CALL 2543 0 0
// PrepareRussianCommander ;
 245: CALL 2494 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3765 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3765 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3765 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3765 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3765 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3765 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3765 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3765 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3765 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3765 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3765 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3765 0 2
 767: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 768: LD_ADDR_EXP 5
 772: PUSH
 773: LD_STRING Frank
 775: PPUSH
 776: LD_INT 1
 778: PPUSH
 779: CALL 3765 0 2
 783: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 784: LD_EXP 1
 788: PPUSH
 789: LD_INT 32
 791: PPUSH
 792: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 796: LD_EXP 7
 800: PPUSH
 801: LD_INT 1
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 811: LD_EXP 7
 815: PPUSH
 816: LD_INT 32
 818: PPUSH
 819: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 823: LD_EXP 8
 827: PPUSH
 828: LD_INT 2
 830: PPUSH
 831: LD_INT 0
 833: PPUSH
 834: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 838: LD_EXP 9
 842: PPUSH
 843: LD_INT 2
 845: PPUSH
 846: LD_INT 0
 848: PPUSH
 849: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 853: LD_EXP 12
 857: PPUSH
 858: LD_INT 2
 860: PPUSH
 861: LD_INT 0
 863: PPUSH
 864: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 868: LD_EXP 10
 872: PPUSH
 873: LD_INT 2
 875: PPUSH
 876: LD_INT 0
 878: PPUSH
 879: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 883: LD_EXP 11
 887: PPUSH
 888: LD_INT 2
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 898: LD_EXP 4
 902: PPUSH
 903: LD_INT 2
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL_OW 49
// if Lisa = false then
 913: LD_EXP 4
 917: PUSH
 918: LD_INT 0
 920: EQUAL
 921: IFFALSE 938
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 923: LD_EXP 2
 927: PPUSH
 928: LD_INT 2
 930: PPUSH
 931: LD_INT 0
 933: PPUSH
 934: CALL_OW 49
// if Lisa = false and Bobby = false then
 938: LD_EXP 4
 942: PUSH
 943: LD_INT 0
 945: EQUAL
 946: PUSH
 947: LD_EXP 2
 951: PUSH
 952: LD_INT 0
 954: EQUAL
 955: AND
 956: IFFALSE 973
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 958: LD_EXP 3
 962: PPUSH
 963: LD_INT 2
 965: PPUSH
 966: LD_INT 0
 968: PPUSH
 969: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 973: LD_EXP 4
 977: PUSH
 978: LD_INT 0
 980: EQUAL
 981: PUSH
 982: LD_EXP 2
 986: PUSH
 987: LD_INT 0
 989: EQUAL
 990: AND
 991: PUSH
 992: LD_EXP 3
 996: PUSH
 997: LD_INT 0
 999: EQUAL
1000: AND
1001: IFFALSE 1018
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1003: LD_EXP 6
1007: PPUSH
1008: LD_INT 2
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 49
// end ;
1018: LD_VAR 0 1
1022: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1023: LD_INT 0
1025: PPUSH
1026: PPUSH
1027: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1028: LD_EXP 13
1032: PPUSH
1033: LD_INT 10
1035: PPUSH
1036: LD_INT 0
1038: PPUSH
1039: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1043: LD_EXP 5
1047: PPUSH
1048: LD_INT 10
1050: PPUSH
1051: LD_INT 0
1053: PPUSH
1054: CALL_OW 49
// uc_nation = 1 ;
1058: LD_ADDR_OWVAR 21
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// uc_side = 4 ;
1066: LD_ADDR_OWVAR 20
1070: PUSH
1071: LD_INT 4
1073: ST_TO_ADDR
// hc_class := 3 ;
1074: LD_ADDR_OWVAR 28
1078: PUSH
1079: LD_INT 3
1081: ST_TO_ADDR
// hc_sex := sex_male ;
1082: LD_ADDR_OWVAR 27
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1090: LD_ADDR_OWVAR 33
1094: PUSH
1095: LD_STRING SecondCharsGal
1097: ST_TO_ADDR
// hc_face_number := 53 ;
1098: LD_ADDR_OWVAR 34
1102: PUSH
1103: LD_INT 53
1105: ST_TO_ADDR
// hc_name := Freddie Warner ;
1106: LD_ADDR_OWVAR 26
1110: PUSH
1111: LD_STRING Freddie Warner
1113: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1114: LD_ADDR_OWVAR 29
1118: PUSH
1119: LD_INT 8
1121: PUSH
1122: LD_INT 11
1124: PUSH
1125: EMPTY
1126: LIST
1127: LIST
1128: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1129: LD_ADDR_OWVAR 30
1133: PUSH
1134: LD_INT 0
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: LD_INT 1
1142: PUSH
1143: LD_INT 0
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: LIST
1150: LIST
1151: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1152: LD_ADDR_OWVAR 31
1156: PUSH
1157: LD_INT 1
1159: PUSH
1160: LD_INT 0
1162: PUSH
1163: LD_INT 3
1165: PUSH
1166: LD_INT 0
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: ST_TO_ADDR
// un = CreateHuman ;
1175: LD_ADDR_VAR 0 3
1179: PUSH
1180: CALL_OW 44
1184: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1185: LD_VAR 0 3
1189: PPUSH
1190: LD_INT 10
1192: PPUSH
1193: LD_INT 0
1195: PPUSH
1196: CALL_OW 49
// hc_class := 1 ;
1200: LD_ADDR_OWVAR 28
1204: PUSH
1205: LD_INT 1
1207: ST_TO_ADDR
// hc_sex := sex_male ;
1208: LD_ADDR_OWVAR 27
1212: PUSH
1213: LD_INT 1
1215: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1216: LD_ADDR_OWVAR 33
1220: PUSH
1221: LD_STRING SecondCharsGal
1223: ST_TO_ADDR
// hc_face_number := 56 ;
1224: LD_ADDR_OWVAR 34
1228: PUSH
1229: LD_INT 56
1231: ST_TO_ADDR
// hc_name := Mel Brennan ;
1232: LD_ADDR_OWVAR 26
1236: PUSH
1237: LD_STRING Mel Brennan
1239: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1240: LD_ADDR_OWVAR 29
1244: PUSH
1245: LD_INT 12
1247: PUSH
1248: LD_INT 11
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1255: LD_ADDR_OWVAR 30
1259: PUSH
1260: LD_INT 1
1262: PUSH
1263: LD_INT 1
1265: PUSH
1266: LD_INT 0
1268: PUSH
1269: LD_INT 0
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: LIST
1276: LIST
1277: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1278: LD_ADDR_OWVAR 31
1282: PUSH
1283: LD_INT 2
1285: PUSH
1286: LD_INT 1
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: LD_INT 0
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: LIST
1299: LIST
1300: ST_TO_ADDR
// un = CreateHuman ;
1301: LD_ADDR_VAR 0 3
1305: PUSH
1306: CALL_OW 44
1310: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1311: LD_VAR 0 3
1315: PPUSH
1316: LD_INT 10
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL_OW 49
// hc_class := 1 ;
1326: LD_ADDR_OWVAR 28
1330: PUSH
1331: LD_INT 1
1333: ST_TO_ADDR
// hc_sex := sex_male ;
1334: LD_ADDR_OWVAR 27
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1342: LD_ADDR_OWVAR 33
1346: PUSH
1347: LD_STRING AmGalRemake
1349: ST_TO_ADDR
// hc_face_number := 5 ;
1350: LD_ADDR_OWVAR 34
1354: PUSH
1355: LD_INT 5
1357: ST_TO_ADDR
// hc_name := Bob Joplin ;
1358: LD_ADDR_OWVAR 26
1362: PUSH
1363: LD_STRING Bob Joplin
1365: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1366: LD_ADDR_OWVAR 29
1370: PUSH
1371: LD_INT 10
1373: PUSH
1374: LD_INT 11
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1381: LD_ADDR_OWVAR 30
1385: PUSH
1386: LD_INT 0
1388: PUSH
1389: LD_INT 1
1391: PUSH
1392: LD_INT 1
1394: PUSH
1395: LD_INT 0
1397: PUSH
1398: EMPTY
1399: LIST
1400: LIST
1401: LIST
1402: LIST
1403: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1404: LD_ADDR_OWVAR 31
1408: PUSH
1409: LD_INT 3
1411: PUSH
1412: LD_INT 1
1414: PUSH
1415: LD_INT 1
1417: PUSH
1418: LD_INT 1
1420: PUSH
1421: EMPTY
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: ST_TO_ADDR
// un = CreateHuman ;
1427: LD_ADDR_VAR 0 3
1431: PUSH
1432: CALL_OW 44
1436: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1437: LD_VAR 0 3
1441: PPUSH
1442: LD_INT 10
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: CALL_OW 49
// hc_class := 3 ;
1452: LD_ADDR_OWVAR 28
1456: PUSH
1457: LD_INT 3
1459: ST_TO_ADDR
// hc_sex := sex_female ;
1460: LD_ADDR_OWVAR 27
1464: PUSH
1465: LD_INT 2
1467: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1468: LD_ADDR_OWVAR 33
1472: PUSH
1473: LD_STRING AmGalRemake
1475: ST_TO_ADDR
// hc_face_number := 4 ;
1476: LD_ADDR_OWVAR 34
1480: PUSH
1481: LD_INT 4
1483: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1484: LD_ADDR_OWVAR 26
1488: PUSH
1489: LD_STRING Elizabeth Whitney
1491: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1492: LD_ADDR_OWVAR 29
1496: PUSH
1497: LD_INT 9
1499: PUSH
1500: LD_INT 11
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1507: LD_ADDR_OWVAR 30
1511: PUSH
1512: LD_INT 0
1514: PUSH
1515: LD_INT 0
1517: PUSH
1518: LD_INT 2
1520: PUSH
1521: LD_INT 0
1523: PUSH
1524: EMPTY
1525: LIST
1526: LIST
1527: LIST
1528: LIST
1529: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1530: LD_ADDR_OWVAR 31
1534: PUSH
1535: LD_INT 2
1537: PUSH
1538: LD_INT 2
1540: PUSH
1541: LD_INT 4
1543: PUSH
1544: LD_INT 2
1546: PUSH
1547: EMPTY
1548: LIST
1549: LIST
1550: LIST
1551: LIST
1552: ST_TO_ADDR
// un = CreateHuman ;
1553: LD_ADDR_VAR 0 3
1557: PUSH
1558: CALL_OW 44
1562: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1563: LD_VAR 0 3
1567: PPUSH
1568: LD_INT 10
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// InitHc ;
1578: CALL_OW 19
// end ;
1582: LD_VAR 0 1
1586: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1587: LD_INT 0
1589: PPUSH
1590: PPUSH
1591: PPUSH
// uc_nation = 1 ;
1592: LD_ADDR_OWVAR 21
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// uc_side = 1 ;
1600: LD_ADDR_OWVAR 20
1604: PUSH
1605: LD_INT 1
1607: ST_TO_ADDR
// hc_class := 1 ;
1608: LD_ADDR_OWVAR 28
1612: PUSH
1613: LD_INT 1
1615: ST_TO_ADDR
// hc_sex := sex_male ;
1616: LD_ADDR_OWVAR 27
1620: PUSH
1621: LD_INT 1
1623: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1624: LD_ADDR_OWVAR 33
1628: PUSH
1629: LD_STRING SecondCharsGal
1631: ST_TO_ADDR
// hc_face_number := 59 ;
1632: LD_ADDR_OWVAR 34
1636: PUSH
1637: LD_INT 59
1639: ST_TO_ADDR
// hc_name := Max Gray ;
1640: LD_ADDR_OWVAR 26
1644: PUSH
1645: LD_STRING Max Gray
1647: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1648: LD_ADDR_OWVAR 29
1652: PUSH
1653: LD_INT 9
1655: PUSH
1656: LD_INT 11
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1663: LD_ADDR_OWVAR 30
1667: PUSH
1668: LD_INT 1
1670: PUSH
1671: LD_INT 0
1673: PUSH
1674: LD_INT 0
1676: PUSH
1677: LD_INT 0
1679: PUSH
1680: EMPTY
1681: LIST
1682: LIST
1683: LIST
1684: LIST
1685: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1686: LD_ADDR_OWVAR 31
1690: PUSH
1691: LD_INT 2
1693: PUSH
1694: LD_INT 1
1696: PUSH
1697: LD_INT 1
1699: PUSH
1700: LD_INT 0
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: LIST
1708: ST_TO_ADDR
// un = CreateHuman ;
1709: LD_ADDR_VAR 0 4
1713: PUSH
1714: CALL_OW 44
1718: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 11
1726: PPUSH
1727: LD_INT 0
1729: PPUSH
1730: CALL_OW 49
// hc_class := 1 ;
1734: LD_ADDR_OWVAR 28
1738: PUSH
1739: LD_INT 1
1741: ST_TO_ADDR
// hc_sex := sex_male ;
1742: LD_ADDR_OWVAR 27
1746: PUSH
1747: LD_INT 1
1749: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1750: LD_ADDR_OWVAR 33
1754: PUSH
1755: LD_STRING SecondCharsGal
1757: ST_TO_ADDR
// hc_face_number := 54 ;
1758: LD_ADDR_OWVAR 34
1762: PUSH
1763: LD_INT 54
1765: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1766: LD_ADDR_OWVAR 26
1770: PUSH
1771: LD_STRING Luigi Ghbellin
1773: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1774: LD_ADDR_OWVAR 29
1778: PUSH
1779: LD_INT 11
1781: PUSH
1782: LD_INT 11
1784: PUSH
1785: EMPTY
1786: LIST
1787: LIST
1788: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1789: LD_ADDR_OWVAR 30
1793: PUSH
1794: LD_INT 1
1796: PUSH
1797: LD_INT 0
1799: PUSH
1800: LD_INT 0
1802: PUSH
1803: LD_INT 0
1805: PUSH
1806: EMPTY
1807: LIST
1808: LIST
1809: LIST
1810: LIST
1811: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1812: LD_ADDR_OWVAR 31
1816: PUSH
1817: LD_INT 1
1819: PUSH
1820: LD_INT 0
1822: PUSH
1823: LD_INT 0
1825: PUSH
1826: LD_INT 1
1828: PUSH
1829: EMPTY
1830: LIST
1831: LIST
1832: LIST
1833: LIST
1834: ST_TO_ADDR
// un = CreateHuman ;
1835: LD_ADDR_VAR 0 4
1839: PUSH
1840: CALL_OW 44
1844: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 11
1852: PPUSH
1853: LD_INT 0
1855: PPUSH
1856: CALL_OW 49
// hc_class := 3 ;
1860: LD_ADDR_OWVAR 28
1864: PUSH
1865: LD_INT 3
1867: ST_TO_ADDR
// hc_sex := sex_male ;
1868: LD_ADDR_OWVAR 27
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1876: LD_ADDR_OWVAR 33
1880: PUSH
1881: LD_STRING AmGalRemake
1883: ST_TO_ADDR
// hc_face_number := 6 ;
1884: LD_ADDR_OWVAR 34
1888: PUSH
1889: LD_INT 6
1891: ST_TO_ADDR
// hc_name := Leon Carter ;
1892: LD_ADDR_OWVAR 26
1896: PUSH
1897: LD_STRING Leon Carter
1899: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1900: LD_ADDR_OWVAR 29
1904: PUSH
1905: LD_INT 10
1907: PUSH
1908: LD_INT 9
1910: PUSH
1911: EMPTY
1912: LIST
1913: LIST
1914: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1915: LD_ADDR_OWVAR 30
1919: PUSH
1920: LD_INT 0
1922: PUSH
1923: LD_INT 1
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: LD_INT 0
1931: PUSH
1932: EMPTY
1933: LIST
1934: LIST
1935: LIST
1936: LIST
1937: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1938: LD_ADDR_OWVAR 31
1942: PUSH
1943: LD_INT 0
1945: PUSH
1946: LD_INT 1
1948: PUSH
1949: LD_INT 3
1951: PUSH
1952: LD_INT 0
1954: PUSH
1955: EMPTY
1956: LIST
1957: LIST
1958: LIST
1959: LIST
1960: ST_TO_ADDR
// un = CreateHuman ;
1961: LD_ADDR_VAR 0 4
1965: PUSH
1966: CALL_OW 44
1970: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1971: LD_VAR 0 4
1975: PPUSH
1976: LD_INT 11
1978: PPUSH
1979: LD_INT 0
1981: PPUSH
1982: CALL_OW 49
// if count = 4 then
1986: LD_VAR 0 1
1990: PUSH
1991: LD_INT 4
1993: EQUAL
1994: IFFALSE 2122
// begin hc_class := 1 ;
1996: LD_ADDR_OWVAR 28
2000: PUSH
2001: LD_INT 1
2003: ST_TO_ADDR
// hc_sex := sex_male ;
2004: LD_ADDR_OWVAR 27
2008: PUSH
2009: LD_INT 1
2011: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2012: LD_ADDR_OWVAR 33
2016: PUSH
2017: LD_STRING SecondCharsGal
2019: ST_TO_ADDR
// hc_face_number := 34 ;
2020: LD_ADDR_OWVAR 34
2024: PUSH
2025: LD_INT 34
2027: ST_TO_ADDR
// hc_name := Ian Hill ;
2028: LD_ADDR_OWVAR 26
2032: PUSH
2033: LD_STRING Ian Hill
2035: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2036: LD_ADDR_OWVAR 29
2040: PUSH
2041: LD_INT 10
2043: PUSH
2044: LD_INT 12
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2051: LD_ADDR_OWVAR 30
2055: PUSH
2056: LD_INT 0
2058: PUSH
2059: LD_INT 0
2061: PUSH
2062: LD_INT 1
2064: PUSH
2065: LD_INT 0
2067: PUSH
2068: EMPTY
2069: LIST
2070: LIST
2071: LIST
2072: LIST
2073: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2074: LD_ADDR_OWVAR 31
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 0
2084: PUSH
2085: LD_INT 1
2087: PUSH
2088: LD_INT 0
2090: PUSH
2091: EMPTY
2092: LIST
2093: LIST
2094: LIST
2095: LIST
2096: ST_TO_ADDR
// un = CreateHuman ;
2097: LD_ADDR_VAR 0 4
2101: PUSH
2102: CALL_OW 44
2106: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2107: LD_VAR 0 4
2111: PPUSH
2112: LD_INT 11
2114: PPUSH
2115: LD_INT 0
2117: PPUSH
2118: CALL_OW 49
// end ; if count = 5 then
2122: LD_VAR 0 1
2126: PUSH
2127: LD_INT 5
2129: EQUAL
2130: IFFALSE 2384
// begin hc_class := 1 ;
2132: LD_ADDR_OWVAR 28
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// hc_sex := sex_male ;
2140: LD_ADDR_OWVAR 27
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2148: LD_ADDR_OWVAR 33
2152: PUSH
2153: LD_STRING SecondCharsGal
2155: ST_TO_ADDR
// hc_face_number := 34 ;
2156: LD_ADDR_OWVAR 34
2160: PUSH
2161: LD_INT 34
2163: ST_TO_ADDR
// hc_name := Ian Hill ;
2164: LD_ADDR_OWVAR 26
2168: PUSH
2169: LD_STRING Ian Hill
2171: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2172: LD_ADDR_OWVAR 29
2176: PUSH
2177: LD_INT 10
2179: PUSH
2180: LD_INT 12
2182: PUSH
2183: EMPTY
2184: LIST
2185: LIST
2186: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2187: LD_ADDR_OWVAR 30
2191: PUSH
2192: LD_INT 0
2194: PUSH
2195: LD_INT 0
2197: PUSH
2198: LD_INT 1
2200: PUSH
2201: LD_INT 0
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: LIST
2208: LIST
2209: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2210: LD_ADDR_OWVAR 31
2214: PUSH
2215: LD_INT 2
2217: PUSH
2218: LD_INT 0
2220: PUSH
2221: LD_INT 1
2223: PUSH
2224: LD_INT 0
2226: PUSH
2227: EMPTY
2228: LIST
2229: LIST
2230: LIST
2231: LIST
2232: ST_TO_ADDR
// un = CreateHuman ;
2233: LD_ADDR_VAR 0 4
2237: PUSH
2238: CALL_OW 44
2242: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2243: LD_VAR 0 4
2247: PPUSH
2248: LD_INT 11
2250: PPUSH
2251: LD_INT 0
2253: PPUSH
2254: CALL_OW 49
// hc_class := 1 ;
2258: LD_ADDR_OWVAR 28
2262: PUSH
2263: LD_INT 1
2265: ST_TO_ADDR
// hc_sex := sex_female ;
2266: LD_ADDR_OWVAR 27
2270: PUSH
2271: LD_INT 2
2273: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2274: LD_ADDR_OWVAR 33
2278: PUSH
2279: LD_STRING SecondCharsGal
2281: ST_TO_ADDR
// hc_face_number := 41 ;
2282: LD_ADDR_OWVAR 34
2286: PUSH
2287: LD_INT 41
2289: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2290: LD_ADDR_OWVAR 26
2294: PUSH
2295: LD_STRING Kate Wadsworth
2297: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2298: LD_ADDR_OWVAR 29
2302: PUSH
2303: LD_INT 9
2305: PUSH
2306: LD_INT 9
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2313: LD_ADDR_OWVAR 30
2317: PUSH
2318: LD_INT 0
2320: PUSH
2321: LD_INT 2
2323: PUSH
2324: LD_INT 0
2326: PUSH
2327: LD_INT 0
2329: PUSH
2330: EMPTY
2331: LIST
2332: LIST
2333: LIST
2334: LIST
2335: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2336: LD_ADDR_OWVAR 31
2340: PUSH
2341: LD_INT 2
2343: PUSH
2344: LD_INT 3
2346: PUSH
2347: LD_INT 1
2349: PUSH
2350: LD_INT 0
2352: PUSH
2353: EMPTY
2354: LIST
2355: LIST
2356: LIST
2357: LIST
2358: ST_TO_ADDR
// un = CreateHuman ;
2359: LD_ADDR_VAR 0 4
2363: PUSH
2364: CALL_OW 44
2368: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2369: LD_VAR 0 4
2373: PPUSH
2374: LD_INT 11
2376: PPUSH
2377: LD_INT 0
2379: PPUSH
2380: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2384: LD_INT 11
2386: PPUSH
2387: LD_INT 22
2389: PUSH
2390: LD_INT 1
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 21
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: LD_INT 26
2409: PUSH
2410: LD_INT 1
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: PUSH
2417: EMPTY
2418: LIST
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL_OW 70
2426: PUSH
2427: LD_INT 1
2429: ARRAY
2430: PPUSH
2431: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2435: LD_INT 11
2437: PPUSH
2438: LD_INT 22
2440: PUSH
2441: LD_INT 1
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: PUSH
2448: LD_INT 21
2450: PUSH
2451: LD_INT 1
2453: PUSH
2454: EMPTY
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 26
2460: PUSH
2461: LD_INT 1
2463: PUSH
2464: EMPTY
2465: LIST
2466: LIST
2467: PUSH
2468: EMPTY
2469: LIST
2470: LIST
2471: LIST
2472: PPUSH
2473: CALL_OW 70
2477: PUSH
2478: LD_INT 1
2480: ARRAY
2481: PPUSH
2482: LD_STRING D6-Sol3-1
2484: PPUSH
2485: CALL_OW 88
// end ; end_of_file
2489: LD_VAR 0 2
2493: RET
// export function PrepareRussianCommander ; begin
2494: LD_INT 0
2496: PPUSH
// uc_side = 3 ;
2497: LD_ADDR_OWVAR 20
2501: PUSH
2502: LD_INT 3
2504: ST_TO_ADDR
// uc_nation = 3 ;
2505: LD_ADDR_OWVAR 21
2509: PUSH
2510: LD_INT 3
2512: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2513: LD_ADDR_EXP 15
2517: PUSH
2518: LD_STRING Stolypin
2520: PPUSH
2521: CALL_OW 25
2525: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2526: LD_EXP 15
2530: PPUSH
2531: LD_INT 21
2533: PPUSH
2534: CALL_OW 52
// end ;
2538: LD_VAR 0 1
2542: RET
// export function PrepareRussianBase ; var i ; begin
2543: LD_INT 0
2545: PPUSH
2546: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2547: LD_INT 3
2549: PPUSH
2550: LD_INT 3
2552: PPUSH
2553: LD_INT 22
2555: PPUSH
2556: LD_EXP 16
2560: PPUSH
2561: LD_EXP 17
2565: PPUSH
2566: CALL_OW 12
2570: PPUSH
2571: LD_INT 1
2573: PPUSH
2574: LD_INT 2
2576: PPUSH
2577: CALL 3828 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2581: LD_INT 3
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: LD_INT 21
2589: PPUSH
2590: LD_EXP 16
2594: PPUSH
2595: LD_EXP 17
2599: PPUSH
2600: CALL_OW 12
2604: PPUSH
2605: LD_INT 2
2607: PPUSH
2608: LD_INT 3
2610: PPUSH
2611: CALL 3828 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2615: LD_INT 3
2617: PPUSH
2618: LD_INT 3
2620: PPUSH
2621: LD_INT 1
2623: PPUSH
2624: LD_EXP 16
2628: PPUSH
2629: LD_EXP 17
2633: PPUSH
2634: CALL_OW 12
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 2
2644: PPUSH
2645: CALL 3828 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 3
2654: PPUSH
2655: LD_INT 24
2657: PPUSH
2658: LD_EXP 16
2662: PPUSH
2663: LD_EXP 17
2667: PPUSH
2668: CALL_OW 12
2672: PPUSH
2673: LD_INT 3
2675: PPUSH
2676: LD_INT 6
2678: PPUSH
2679: CALL 3828 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2683: LD_ADDR_VAR 0 2
2687: PUSH
2688: LD_INT 22
2690: PUSH
2691: LD_INT 3
2693: PUSH
2694: EMPTY
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: LD_INT 32
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PUSH
2708: EMPTY
2709: LIST
2710: LIST
2711: PPUSH
2712: CALL_OW 69
2716: PUSH
2717: FOR_IN
2718: IFFALSE 2758
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2720: LD_INT 3
2722: PPUSH
2723: LD_INT 3
2725: PPUSH
2726: LD_VAR 0 2
2730: PPUSH
2731: LD_EXP 16
2735: PPUSH
2736: LD_EXP 17
2740: PPUSH
2741: CALL_OW 12
2745: PPUSH
2746: LD_INT 1
2748: PPUSH
2749: LD_INT 1
2751: PPUSH
2752: CALL 3828 0 6
2756: GO 2717
2758: POP
2759: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2760: LD_ADDR_VAR 0 2
2764: PUSH
2765: LD_INT 22
2767: PUSH
2768: LD_INT 3
2770: PUSH
2771: EMPTY
2772: LIST
2773: LIST
2774: PUSH
2775: LD_INT 30
2777: PUSH
2778: LD_INT 31
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: PUSH
2785: EMPTY
2786: LIST
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: FOR_IN
2795: IFFALSE 2823
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2797: LD_EXP 16
2801: PPUSH
2802: LD_EXP 17
2806: PPUSH
2807: CALL_OW 12
2811: PPUSH
2812: LD_VAR 0 2
2816: PPUSH
2817: CALL 3938 0 2
2821: GO 2794
2823: POP
2824: POP
// end ;
2825: LD_VAR 0 1
2829: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2830: LD_INT 0
2832: PPUSH
2833: PPUSH
2834: PPUSH
2835: PPUSH
// uc_side = 6 ;
2836: LD_ADDR_OWVAR 20
2840: PUSH
2841: LD_INT 6
2843: ST_TO_ADDR
// uc_nation = 3 ;
2844: LD_ADDR_OWVAR 21
2848: PUSH
2849: LD_INT 3
2851: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2852: LD_ADDR_VAR 0 2
2856: PUSH
2857: DOUBLE
2858: LD_INT 1
2860: DEC
2861: ST_TO_ADDR
2862: LD_INT 1
2864: PUSH
2865: LD_INT 2
2867: PUSH
2868: LD_INT 1
2870: PPUSH
2871: LD_INT 2
2873: PPUSH
2874: CALL_OW 12
2878: PUSH
2879: EMPTY
2880: LIST
2881: LIST
2882: LIST
2883: PUSH
2884: LD_OWVAR 67
2888: ARRAY
2889: PUSH
2890: FOR_TO
2891: IFFALSE 3051
// begin vc_engine = 1 ;
2893: LD_ADDR_OWVAR 39
2897: PUSH
2898: LD_INT 1
2900: ST_TO_ADDR
// vc_control = 1 ;
2901: LD_ADDR_OWVAR 38
2905: PUSH
2906: LD_INT 1
2908: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2909: LD_ADDR_OWVAR 40
2913: PUSH
2914: LD_INT 42
2916: PUSH
2917: LD_INT 42
2919: PUSH
2920: LD_INT 43
2922: PUSH
2923: EMPTY
2924: LIST
2925: LIST
2926: LIST
2927: PUSH
2928: LD_OWVAR 67
2932: ARRAY
2933: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2934: LD_ADDR_OWVAR 37
2938: PUSH
2939: LD_INT 21
2941: PUSH
2942: LD_INT 22
2944: PUSH
2945: LD_INT 22
2947: PUSH
2948: EMPTY
2949: LIST
2950: LIST
2951: LIST
2952: PUSH
2953: LD_OWVAR 67
2957: ARRAY
2958: ST_TO_ADDR
// veh = CreateVehicle ;
2959: LD_ADDR_VAR 0 3
2963: PUSH
2964: CALL_OW 45
2968: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2969: LD_VAR 0 3
2973: PPUSH
2974: LD_INT 3
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// hc_gallery =  ;
2984: LD_ADDR_OWVAR 33
2988: PUSH
2989: LD_STRING 
2991: ST_TO_ADDR
// hc_name =  ;
2992: LD_ADDR_OWVAR 26
2996: PUSH
2997: LD_STRING 
2999: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3000: LD_INT 0
3002: PPUSH
3003: LD_INT 3
3005: PPUSH
3006: LD_EXP 16
3010: PPUSH
3011: LD_EXP 17
3015: PPUSH
3016: CALL_OW 12
3020: PPUSH
3021: CALL_OW 380
// un = CreateHuman ;
3025: LD_ADDR_VAR 0 4
3029: PUSH
3030: CALL_OW 44
3034: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3035: LD_VAR 0 4
3039: PPUSH
3040: LD_VAR 0 3
3044: PPUSH
3045: CALL_OW 52
// end ;
3049: GO 2890
3051: POP
3052: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3053: LD_INT 0
3055: PPUSH
3056: LD_INT 2
3058: PPUSH
3059: LD_EXP 16
3063: PPUSH
3064: LD_EXP 17
3068: PPUSH
3069: CALL_OW 12
3073: PUSH
3074: LD_INT 2
3076: PLUS
3077: PPUSH
3078: CALL_OW 380
// un = CreateHuman ;
3082: LD_ADDR_VAR 0 4
3086: PUSH
3087: CALL_OW 44
3091: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3092: LD_VAR 0 4
3096: PPUSH
3097: LD_INT 3
3099: PPUSH
3100: LD_INT 0
3102: PPUSH
3103: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3107: LD_INT 0
3109: PPUSH
3110: LD_INT 4
3112: PPUSH
3113: LD_EXP 16
3117: PPUSH
3118: LD_EXP 17
3122: PPUSH
3123: CALL_OW 12
3127: PUSH
3128: LD_INT 2
3130: PLUS
3131: PPUSH
3132: CALL_OW 380
// un = CreateHuman ;
3136: LD_ADDR_VAR 0 4
3140: PUSH
3141: CALL_OW 44
3145: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3146: LD_VAR 0 4
3150: PPUSH
3151: LD_INT 3
3153: PPUSH
3154: LD_INT 0
3156: PPUSH
3157: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3161: LD_ADDR_VAR 0 2
3165: PUSH
3166: DOUBLE
3167: LD_INT 1
3169: DEC
3170: ST_TO_ADDR
3171: LD_INT 2
3173: PUSH
3174: LD_INT 3
3176: PUSH
3177: LD_INT 3
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: LIST
3184: PUSH
3185: LD_OWVAR 67
3189: ARRAY
3190: PUSH
3191: LD_INT 1
3193: PPUSH
3194: LD_INT 3
3196: PPUSH
3197: CALL_OW 12
3201: PLUS
3202: PUSH
3203: FOR_TO
3204: IFFALSE 3274
// begin hc_gallery =  ;
3206: LD_ADDR_OWVAR 33
3210: PUSH
3211: LD_STRING 
3213: ST_TO_ADDR
// hc_name =  ;
3214: LD_ADDR_OWVAR 26
3218: PUSH
3219: LD_STRING 
3221: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3222: LD_INT 0
3224: PPUSH
3225: LD_INT 1
3227: PPUSH
3228: LD_EXP 16
3232: PPUSH
3233: LD_EXP 17
3237: PPUSH
3238: CALL_OW 12
3242: PPUSH
3243: CALL_OW 380
// un = CreateHuman ;
3247: LD_ADDR_VAR 0 4
3251: PUSH
3252: CALL_OW 44
3256: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3257: LD_VAR 0 4
3261: PPUSH
3262: LD_INT 3
3264: PPUSH
3265: LD_INT 0
3267: PPUSH
3268: CALL_OW 49
// end ;
3272: GO 3203
3274: POP
3275: POP
// vc_engine = 1 ;
3276: LD_ADDR_OWVAR 39
3280: PUSH
3281: LD_INT 1
3283: ST_TO_ADDR
// vc_control = 1 ;
3284: LD_ADDR_OWVAR 38
3288: PUSH
3289: LD_INT 1
3291: ST_TO_ADDR
// vc_weapon = 51 ;
3292: LD_ADDR_OWVAR 40
3296: PUSH
3297: LD_INT 51
3299: ST_TO_ADDR
// vc_chassis = 22 ;
3300: LD_ADDR_OWVAR 37
3304: PUSH
3305: LD_INT 22
3307: ST_TO_ADDR
// veh = CreateVehicle ;
3308: LD_ADDR_VAR 0 3
3312: PUSH
3313: CALL_OW 45
3317: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3318: LD_VAR 0 3
3322: PPUSH
3323: LD_INT 3
3325: PPUSH
3326: LD_INT 0
3328: PPUSH
3329: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3333: LD_VAR 0 3
3337: PPUSH
3338: LD_INT 1
3340: PPUSH
3341: LD_INT 100
3343: PPUSH
3344: CALL_OW 290
// hc_gallery =  ;
3348: LD_ADDR_OWVAR 33
3352: PUSH
3353: LD_STRING 
3355: ST_TO_ADDR
// hc_name =  ;
3356: LD_ADDR_OWVAR 26
3360: PUSH
3361: LD_STRING 
3363: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3364: LD_INT 0
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: LD_EXP 16
3374: PPUSH
3375: LD_EXP 17
3379: PPUSH
3380: CALL_OW 12
3384: PPUSH
3385: CALL_OW 380
// un = CreateHuman ;
3389: LD_ADDR_VAR 0 4
3393: PUSH
3394: CALL_OW 44
3398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3399: LD_VAR 0 4
3403: PPUSH
3404: LD_VAR 0 3
3408: PPUSH
3409: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3413: LD_ADDR_VAR 0 2
3417: PUSH
3418: LD_INT 22
3420: PUSH
3421: LD_INT 6
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PUSH
3428: LD_INT 1
3430: PUSH
3431: LD_INT 3
3433: PUSH
3434: LD_INT 25
3436: PUSH
3437: LD_INT 2
3439: PUSH
3440: EMPTY
3441: LIST
3442: LIST
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 3
3450: PUSH
3451: LD_INT 25
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PUSH
3461: EMPTY
3462: LIST
3463: LIST
3464: PUSH
3465: EMPTY
3466: LIST
3467: LIST
3468: LIST
3469: PUSH
3470: EMPTY
3471: LIST
3472: LIST
3473: PPUSH
3474: CALL_OW 69
3478: PUSH
3479: FOR_IN
3480: IFFALSE 3499
// ComAgressiveMove ( i , 45 , 46 ) ;
3482: LD_VAR 0 2
3486: PPUSH
3487: LD_INT 45
3489: PPUSH
3490: LD_INT 46
3492: PPUSH
3493: CALL_OW 114
3497: GO 3479
3499: POP
3500: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3501: LD_ADDR_VAR 0 2
3505: PUSH
3506: LD_INT 22
3508: PUSH
3509: LD_INT 6
3511: PUSH
3512: EMPTY
3513: LIST
3514: LIST
3515: PUSH
3516: LD_INT 25
3518: PUSH
3519: LD_INT 2
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PPUSH
3530: CALL_OW 69
3534: PUSH
3535: FOR_IN
3536: IFFALSE 3567
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3538: LD_ADDR_EXP 21
3542: PUSH
3543: LD_VAR 0 2
3547: PPUSH
3548: LD_INT 0
3550: PPUSH
3551: LD_INT 48
3553: PPUSH
3554: LD_INT 55
3556: PPUSH
3557: LD_INT 5
3559: PPUSH
3560: CALL_OW 145
3564: ST_TO_ADDR
3565: GO 3535
3567: POP
3568: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3569: LD_ADDR_VAR 0 2
3573: PUSH
3574: LD_INT 22
3576: PUSH
3577: LD_INT 6
3579: PUSH
3580: EMPTY
3581: LIST
3582: LIST
3583: PUSH
3584: LD_INT 25
3586: PUSH
3587: LD_INT 4
3589: PUSH
3590: EMPTY
3591: LIST
3592: LIST
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: PPUSH
3598: CALL_OW 69
3602: PUSH
3603: FOR_IN
3604: IFFALSE 3623
// ComMoveXY ( i , 39 , 55 ) ;
3606: LD_VAR 0 2
3610: PPUSH
3611: LD_INT 39
3613: PPUSH
3614: LD_INT 55
3616: PPUSH
3617: CALL_OW 111
3621: GO 3603
3623: POP
3624: POP
// end ;
3625: LD_VAR 0 1
3629: RET
// export function PrepareFirstAttack ; var i , un ; begin
3630: LD_INT 0
3632: PPUSH
3633: PPUSH
3634: PPUSH
// uc_side = 5 ;
3635: LD_ADDR_OWVAR 20
3639: PUSH
3640: LD_INT 5
3642: ST_TO_ADDR
// uc_nation = 3 ;
3643: LD_ADDR_OWVAR 21
3647: PUSH
3648: LD_INT 3
3650: ST_TO_ADDR
// for i := 1 to 4 do
3651: LD_ADDR_VAR 0 2
3655: PUSH
3656: DOUBLE
3657: LD_INT 1
3659: DEC
3660: ST_TO_ADDR
3661: LD_INT 4
3663: PUSH
3664: FOR_TO
3665: IFFALSE 3750
// begin hc_gallery =  ;
3667: LD_ADDR_OWVAR 33
3671: PUSH
3672: LD_STRING 
3674: ST_TO_ADDR
// hc_name =  ;
3675: LD_ADDR_OWVAR 26
3679: PUSH
3680: LD_STRING 
3682: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3683: LD_INT 0
3685: PPUSH
3686: LD_INT 1
3688: PPUSH
3689: LD_EXP 16
3693: PPUSH
3694: LD_EXP 17
3698: PPUSH
3699: CALL_OW 12
3703: PPUSH
3704: CALL_OW 380
// un = CreateHuman ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: CALL_OW 44
3717: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3718: LD_VAR 0 3
3722: PPUSH
3723: LD_INT 4
3725: PPUSH
3726: LD_INT 0
3728: PPUSH
3729: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3733: LD_VAR 0 3
3737: PPUSH
3738: LD_INT 48
3740: PPUSH
3741: LD_INT 14
3743: PPUSH
3744: CALL_OW 114
// end ;
3748: GO 3664
3750: POP
3751: POP
// firstRussianAttack = 1 ;
3752: LD_ADDR_EXP 23
3756: PUSH
3757: LD_INT 1
3759: ST_TO_ADDR
// end ; end_of_file
3760: LD_VAR 0 1
3764: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3765: LD_INT 0
3767: PPUSH
3768: PPUSH
// if exist_mode then
3769: LD_VAR 0 2
3773: IFFALSE 3798
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3775: LD_ADDR_VAR 0 4
3779: PUSH
3780: LD_EXP 45
3784: PUSH
3785: LD_VAR 0 1
3789: STR
3790: PPUSH
3791: CALL_OW 34
3795: ST_TO_ADDR
// end else
3796: GO 3813
// begin unit := NewCharacter ( ident ) ;
3798: LD_ADDR_VAR 0 4
3802: PUSH
3803: LD_VAR 0 1
3807: PPUSH
3808: CALL_OW 25
3812: ST_TO_ADDR
// end ; result := unit ;
3813: LD_ADDR_VAR 0 3
3817: PUSH
3818: LD_VAR 0 4
3822: ST_TO_ADDR
// end ;
3823: LD_VAR 0 3
3827: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
3832: PPUSH
3833: PPUSH
// for i = 1 to count do
3834: LD_ADDR_VAR 0 8
3838: PUSH
3839: DOUBLE
3840: LD_INT 1
3842: DEC
3843: ST_TO_ADDR
3844: LD_VAR 0 6
3848: PUSH
3849: FOR_TO
3850: IFFALSE 3931
// begin uc_side = side ;
3852: LD_ADDR_OWVAR 20
3856: PUSH
3857: LD_VAR 0 1
3861: ST_TO_ADDR
// uc_nation = nation ;
3862: LD_ADDR_OWVAR 21
3866: PUSH
3867: LD_VAR 0 2
3871: ST_TO_ADDR
// hc_gallery =  ;
3872: LD_ADDR_OWVAR 33
3876: PUSH
3877: LD_STRING 
3879: ST_TO_ADDR
// hc_name =  ;
3880: LD_ADDR_OWVAR 26
3884: PUSH
3885: LD_STRING 
3887: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3888: LD_INT 0
3890: PPUSH
3891: LD_VAR 0 5
3895: PPUSH
3896: LD_VAR 0 4
3900: PPUSH
3901: CALL_OW 380
// un = CreateHuman ;
3905: LD_ADDR_VAR 0 10
3909: PUSH
3910: CALL_OW 44
3914: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3915: LD_VAR 0 10
3919: PPUSH
3920: LD_VAR 0 3
3924: PPUSH
3925: CALL_OW 52
// end ;
3929: GO 3849
3931: POP
3932: POP
// end ;
3933: LD_VAR 0 7
3937: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3938: LD_INT 0
3940: PPUSH
3941: PPUSH
3942: PPUSH
// uc_side := GetSide ( b ) ;
3943: LD_ADDR_OWVAR 20
3947: PUSH
3948: LD_VAR 0 2
3952: PPUSH
3953: CALL_OW 255
3957: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3958: LD_ADDR_OWVAR 21
3962: PUSH
3963: LD_VAR 0 2
3967: PPUSH
3968: CALL_OW 248
3972: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3973: LD_INT 0
3975: PPUSH
3976: LD_INT 1
3978: PPUSH
3979: LD_VAR 0 1
3983: PPUSH
3984: CALL_OW 380
// un = CreateHuman ;
3988: LD_ADDR_VAR 0 4
3992: PUSH
3993: CALL_OW 44
3997: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3998: LD_ADDR_VAR 0 5
4002: PUSH
4003: LD_VAR 0 2
4007: PPUSH
4008: CALL_OW 254
4012: PUSH
4013: LD_INT 3
4015: MINUS
4016: ST_TO_ADDR
// if dir < 0 then
4017: LD_VAR 0 5
4021: PUSH
4022: LD_INT 0
4024: LESS
4025: IFFALSE 4041
// dir := 6 + dir ;
4027: LD_ADDR_VAR 0 5
4031: PUSH
4032: LD_INT 6
4034: PUSH
4035: LD_VAR 0 5
4039: PLUS
4040: ST_TO_ADDR
// SetDir ( un , dir ) ;
4041: LD_VAR 0 4
4045: PPUSH
4046: LD_VAR 0 5
4050: PPUSH
4051: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4055: LD_VAR 0 4
4059: PPUSH
4060: LD_VAR 0 2
4064: PPUSH
4065: CALL_OW 52
// end ;
4069: LD_VAR 0 3
4073: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4074: LD_INT 0
4076: PPUSH
4077: PPUSH
4078: PPUSH
// rnd = rand ( 1 , characters ) ;
4079: LD_ADDR_VAR 0 6
4083: PUSH
4084: LD_INT 1
4086: PPUSH
4087: LD_VAR 0 1
4091: PPUSH
4092: CALL_OW 12
4096: ST_TO_ADDR
// for i = 1 to characters do
4097: LD_ADDR_VAR 0 5
4101: PUSH
4102: DOUBLE
4103: LD_INT 1
4105: DEC
4106: ST_TO_ADDR
4107: LD_VAR 0 1
4111: PUSH
4112: FOR_TO
4113: IFFALSE 4223
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4115: LD_VAR 0 5
4119: PUSH
4120: LD_VAR 0 6
4124: EQUAL
4125: PUSH
4126: LD_VAR 0 1
4130: PUSH
4131: LD_VAR 0 5
4135: ARRAY
4136: PPUSH
4137: CALL_OW 258
4141: PUSH
4142: LD_INT 1
4144: EQUAL
4145: AND
4146: IFFALSE 4168
// Say ( characters [ i ] , dialogMID ) ;
4148: LD_VAR 0 1
4152: PUSH
4153: LD_VAR 0 5
4157: ARRAY
4158: PPUSH
4159: LD_VAR 0 2
4163: PPUSH
4164: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4168: LD_VAR 0 5
4172: PUSH
4173: LD_VAR 0 6
4177: EQUAL
4178: PUSH
4179: LD_VAR 0 1
4183: PUSH
4184: LD_VAR 0 5
4188: ARRAY
4189: PPUSH
4190: CALL_OW 258
4194: PUSH
4195: LD_INT 2
4197: EQUAL
4198: AND
4199: IFFALSE 4221
// Say ( characters [ i ] , dialogFID ) ;
4201: LD_VAR 0 1
4205: PUSH
4206: LD_VAR 0 5
4210: ARRAY
4211: PPUSH
4212: LD_VAR 0 3
4216: PPUSH
4217: CALL_OW 88
// end ;
4221: GO 4112
4223: POP
4224: POP
// end ;
4225: LD_VAR 0 4
4229: RET
// export function PrepareDifficulty ; var tmp ; begin
4230: LD_INT 0
4232: PPUSH
4233: PPUSH
// if Difficulty = 1 then
4234: LD_OWVAR 67
4238: PUSH
4239: LD_INT 1
4241: EQUAL
4242: IFFALSE 4260
// begin RuSoldMinLevel = 0 ;
4244: LD_ADDR_EXP 16
4248: PUSH
4249: LD_INT 0
4251: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4252: LD_ADDR_EXP 17
4256: PUSH
4257: LD_INT 2
4259: ST_TO_ADDR
// end ; if Difficulty = 2 then
4260: LD_OWVAR 67
4264: PUSH
4265: LD_INT 2
4267: EQUAL
4268: IFFALSE 4376
// begin RuSoldMinLevel = 1 ;
4270: LD_ADDR_EXP 16
4274: PUSH
4275: LD_INT 1
4277: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4278: LD_ADDR_EXP 17
4282: PUSH
4283: LD_INT 2
4285: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4286: LD_INT 14
4288: PPUSH
4289: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4293: LD_INT 23
4295: PPUSH
4296: CALL_OW 64
// uc_nation = 3 ;
4300: LD_ADDR_OWVAR 21
4304: PUSH
4305: LD_INT 3
4307: ST_TO_ADDR
// uc_side = 3 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 3
4315: ST_TO_ADDR
// bc_level = 5 ;
4316: LD_ADDR_OWVAR 43
4320: PUSH
4321: LD_INT 5
4323: ST_TO_ADDR
// bc_type = 32 ;
4324: LD_ADDR_OWVAR 42
4328: PUSH
4329: LD_INT 32
4331: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4332: LD_ADDR_VAR 0 2
4336: PUSH
4337: LD_INT 76
4339: PPUSH
4340: LD_INT 91
4342: PPUSH
4343: LD_INT 2
4345: PPUSH
4346: CALL_OW 47
4350: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4351: LD_VAR 0 2
4355: PPUSH
4356: LD_INT 43
4358: PPUSH
4359: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4363: LD_INT 51
4365: PPUSH
4366: LD_INT 3
4368: PPUSH
4369: LD_INT 1
4371: PPUSH
4372: CALL_OW 322
// end ; if Difficulty = 3 then
4376: LD_OWVAR 67
4380: PUSH
4381: LD_INT 3
4383: EQUAL
4384: IFFALSE 4560
// begin RuSoldMinLevel = 1 ;
4386: LD_ADDR_EXP 16
4390: PUSH
4391: LD_INT 1
4393: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4394: LD_ADDR_EXP 17
4398: PUSH
4399: LD_INT 3
4401: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4402: LD_INT 13
4404: PPUSH
4405: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4409: LD_INT 14
4411: PPUSH
4412: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4416: LD_INT 26
4418: PPUSH
4419: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4423: LD_INT 23
4425: PPUSH
4426: CALL_OW 64
// uc_nation = 3 ;
4430: LD_ADDR_OWVAR 21
4434: PUSH
4435: LD_INT 3
4437: ST_TO_ADDR
// uc_side = 3 ;
4438: LD_ADDR_OWVAR 20
4442: PUSH
4443: LD_INT 3
4445: ST_TO_ADDR
// bc_level = 5 ;
4446: LD_ADDR_OWVAR 43
4450: PUSH
4451: LD_INT 5
4453: ST_TO_ADDR
// bc_type = 32 ;
4454: LD_ADDR_OWVAR 42
4458: PUSH
4459: LD_INT 32
4461: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4462: LD_ADDR_VAR 0 2
4466: PUSH
4467: LD_INT 76
4469: PPUSH
4470: LD_INT 91
4472: PPUSH
4473: LD_INT 2
4475: PPUSH
4476: CALL_OW 47
4480: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_INT 44
4488: PPUSH
4489: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4493: LD_ADDR_VAR 0 2
4497: PUSH
4498: LD_INT 83
4500: PPUSH
4501: LD_INT 84
4503: PPUSH
4504: LD_INT 2
4506: PPUSH
4507: CALL_OW 47
4511: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4512: LD_VAR 0 2
4516: PPUSH
4517: LD_INT 43
4519: PPUSH
4520: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4524: LD_INT 51
4526: PPUSH
4527: LD_INT 3
4529: PPUSH
4530: LD_INT 1
4532: PPUSH
4533: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4537: LD_INT 52
4539: PPUSH
4540: LD_INT 3
4542: PPUSH
4543: LD_INT 1
4545: PPUSH
4546: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4550: LD_INT 25
4552: PPUSH
4553: LD_INT 44
4555: PPUSH
4556: CALL_OW 431
// end ; end ;
4560: LD_VAR 0 1
4564: RET
// export function EnergyDialog ; begin
4565: LD_INT 0
4567: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4568: LD_INT 46
4570: PPUSH
4571: LD_INT 1
4573: PPUSH
4574: CALL_OW 321
4578: PUSH
4579: LD_INT 1
4581: EQUAL
4582: PUSH
4583: LD_INT 35
4585: PPUSH
4586: LD_INT 1
4588: PPUSH
4589: CALL_OW 321
4593: PUSH
4594: LD_INT 1
4596: EQUAL
4597: AND
4598: IFFALSE 4622
// begin Say ( JMM , D9c-JMM-1 ) ;
4600: LD_EXP 1
4604: PPUSH
4605: LD_STRING D9c-JMM-1
4607: PPUSH
4608: CALL_OW 88
// energyVDialog = 1 ;
4612: LD_ADDR_EXP 33
4616: PUSH
4617: LD_INT 1
4619: ST_TO_ADDR
// end else
4620: GO 4776
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4622: LD_INT 35
4624: PPUSH
4625: LD_INT 1
4627: PPUSH
4628: CALL_OW 321
4632: PUSH
4633: LD_INT 2
4635: EQUAL
4636: PUSH
4637: LD_EXP 33
4641: PUSH
4642: LD_INT 0
4644: EQUAL
4645: AND
4646: IFFALSE 4668
// begin Say ( JMM , D9c-JMM-1a ) ;
4648: LD_EXP 1
4652: PPUSH
4653: LD_STRING D9c-JMM-1a
4655: PPUSH
4656: CALL_OW 88
// energyVDialog = 1 ;
4660: LD_ADDR_EXP 33
4664: PUSH
4665: LD_INT 1
4667: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4668: LD_INT 46
4670: PPUSH
4671: LD_INT 1
4673: PPUSH
4674: CALL_OW 321
4678: PUSH
4679: LD_INT 2
4681: EQUAL
4682: PUSH
4683: LD_EXP 33
4687: PUSH
4688: LD_INT 0
4690: EQUAL
4691: AND
4692: IFFALSE 4714
// begin Say ( JMM , D9c-JMM-1b ) ;
4694: LD_EXP 1
4698: PPUSH
4699: LD_STRING D9c-JMM-1b
4701: PPUSH
4702: CALL_OW 88
// energyVDialog = 1 ;
4706: LD_ADDR_EXP 33
4710: PUSH
4711: LD_INT 1
4713: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4714: LD_INT 46
4716: PPUSH
4717: LD_INT 1
4719: PPUSH
4720: CALL_OW 321
4724: PUSH
4725: LD_INT 2
4727: EQUAL
4728: PUSH
4729: LD_INT 21
4731: PPUSH
4732: LD_INT 1
4734: PPUSH
4735: CALL_OW 321
4739: PUSH
4740: LD_INT 2
4742: EQUAL
4743: AND
4744: PUSH
4745: LD_EXP 33
4749: PUSH
4750: LD_INT 0
4752: EQUAL
4753: AND
4754: IFFALSE 4776
// begin Say ( JMM , D9c-JMM-1c ) ;
4756: LD_EXP 1
4760: PPUSH
4761: LD_STRING D9c-JMM-1c
4763: PPUSH
4764: CALL_OW 88
// energyVDialog = 1 ;
4768: LD_ADDR_EXP 33
4772: PUSH
4773: LD_INT 1
4775: ST_TO_ADDR
// end ; end ; end ;
4776: LD_VAR 0 1
4780: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4781: LD_INT 0
4783: PPUSH
4784: PPUSH
4785: PPUSH
4786: PPUSH
4787: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4788: LD_VAR 0 1
4792: NOT
4793: PUSH
4794: LD_VAR 0 1
4798: PPUSH
4799: CALL_OW 256
4803: PUSH
4804: LD_INT 250
4806: LESS
4807: OR
4808: PUSH
4809: LD_VAR 0 1
4813: PPUSH
4814: CALL_OW 314
4818: PUSH
4819: LD_VAR 0 1
4823: PPUSH
4824: CALL_OW 261
4828: PUSH
4829: LD_INT 20
4831: GREATER
4832: AND
4833: OR
4834: IFFALSE 4838
// exit ;
4836: GO 5203
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4838: LD_VAR 0 1
4842: PPUSH
4843: CALL_OW 261
4847: PUSH
4848: LD_INT 20
4850: LESS
4851: PUSH
4852: LD_VAR 0 1
4856: PPUSH
4857: CALL_OW 110
4861: PUSH
4862: LD_INT 21
4864: EQUAL
4865: NOT
4866: AND
4867: IFFALSE 4894
// begin ComStop ( bulldozer ) ;
4869: LD_VAR 0 1
4873: PPUSH
4874: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4878: LD_VAR 0 1
4882: PPUSH
4883: LD_INT 21
4885: PPUSH
4886: CALL_OW 109
// exit ;
4890: GO 5203
// end else
4892: GO 4921
// if GetFuel ( bulldozer ) > 20 then
4894: LD_VAR 0 1
4898: PPUSH
4899: CALL_OW 261
4903: PUSH
4904: LD_INT 20
4906: GREATER
4907: IFFALSE 4921
// SetTag ( bulldozer , 0 ) ;
4909: LD_VAR 0 1
4913: PPUSH
4914: LD_INT 0
4916: PPUSH
4917: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4921: LD_ADDR_VAR 0 5
4925: PUSH
4926: LD_VAR 0 2
4930: PPUSH
4931: CALL_OW 353
4935: ST_TO_ADDR
// tmp := [ ] ;
4936: LD_ADDR_VAR 0 6
4940: PUSH
4941: EMPTY
4942: ST_TO_ADDR
// for i = 1 to list do
4943: LD_ADDR_VAR 0 4
4947: PUSH
4948: DOUBLE
4949: LD_INT 1
4951: DEC
4952: ST_TO_ADDR
4953: LD_VAR 0 5
4957: PUSH
4958: FOR_TO
4959: IFFALSE 5057
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4961: LD_VAR 0 5
4965: PUSH
4966: LD_VAR 0 4
4970: ARRAY
4971: PUSH
4972: LD_INT 1
4974: ARRAY
4975: PPUSH
4976: LD_VAR 0 5
4980: PUSH
4981: LD_VAR 0 4
4985: ARRAY
4986: PUSH
4987: LD_INT 2
4989: ARRAY
4990: PPUSH
4991: CALL_OW 554
4995: IFFALSE 5055
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4997: LD_ADDR_VAR 0 6
5001: PUSH
5002: LD_VAR 0 6
5006: PPUSH
5007: LD_VAR 0 6
5011: PUSH
5012: LD_INT 1
5014: PLUS
5015: PPUSH
5016: LD_VAR 0 5
5020: PUSH
5021: LD_VAR 0 4
5025: ARRAY
5026: PUSH
5027: LD_INT 1
5029: ARRAY
5030: PUSH
5031: LD_VAR 0 5
5035: PUSH
5036: LD_VAR 0 4
5040: ARRAY
5041: PUSH
5042: LD_INT 2
5044: ARRAY
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PPUSH
5050: CALL_OW 1
5054: ST_TO_ADDR
// end ;
5055: GO 4958
5057: POP
5058: POP
// ComStop ( bulldozer ) ;
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5068: LD_ADDR_VAR 0 7
5072: PUSH
5073: LD_VAR 0 1
5077: PPUSH
5078: CALL_OW 250
5082: PUSH
5083: LD_VAR 0 1
5087: PPUSH
5088: CALL_OW 251
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: ST_TO_ADDR
// for i = tmp downto 1 do
5097: LD_ADDR_VAR 0 4
5101: PUSH
5102: DOUBLE
5103: LD_VAR 0 6
5107: INC
5108: ST_TO_ADDR
5109: LD_INT 1
5111: PUSH
5112: FOR_DOWNTO
5113: IFFALSE 5201
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5115: LD_ADDR_VAR 0 7
5119: PUSH
5120: LD_VAR 0 7
5124: PUSH
5125: LD_INT 1
5127: ARRAY
5128: PPUSH
5129: LD_VAR 0 7
5133: PUSH
5134: LD_INT 2
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 6
5142: PPUSH
5143: CALL 5304 0 3
5147: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5148: LD_VAR 0 1
5152: PPUSH
5153: LD_VAR 0 7
5157: PUSH
5158: LD_INT 1
5160: ARRAY
5161: PPUSH
5162: LD_VAR 0 7
5166: PUSH
5167: LD_INT 2
5169: ARRAY
5170: PPUSH
5171: CALL 5208 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5175: LD_ADDR_VAR 0 6
5179: PUSH
5180: LD_VAR 0 6
5184: PPUSH
5185: LD_VAR 0 7
5189: PUSH
5190: LD_INT 3
5192: ARRAY
5193: PPUSH
5194: CALL_OW 3
5198: ST_TO_ADDR
// end ;
5199: GO 5112
5201: POP
5202: POP
// end ;
5203: LD_VAR 0 3
5207: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5208: LD_INT 0
5210: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5211: LD_VAR 0 2
5215: PPUSH
5216: LD_VAR 0 3
5220: PPUSH
5221: CALL_OW 351
5225: PUSH
5226: LD_VAR 0 2
5230: PPUSH
5231: LD_VAR 0 3
5235: PPUSH
5236: CALL_OW 554
5240: AND
5241: PUSH
5242: LD_VAR 0 2
5246: PPUSH
5247: LD_VAR 0 3
5251: PPUSH
5252: CALL_OW 488
5256: AND
5257: PUSH
5258: LD_VAR 0 2
5262: PPUSH
5263: LD_VAR 0 3
5267: PPUSH
5268: CALL_OW 428
5272: PUSH
5273: LD_INT 1
5275: NEG
5276: EQUAL
5277: AND
5278: IFFALSE 5299
// AddComMoveXY ( bulldozer , x , y ) ;
5280: LD_VAR 0 1
5284: PPUSH
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_VAR 0 3
5294: PPUSH
5295: CALL_OW 171
// end ;
5299: LD_VAR 0 4
5303: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5304: LD_INT 0
5306: PPUSH
5307: PPUSH
5308: PPUSH
5309: PPUSH
5310: PPUSH
5311: PPUSH
5312: PPUSH
// dist := 99999 ;
5313: LD_ADDR_VAR 0 6
5317: PUSH
5318: LD_INT 99999
5320: ST_TO_ADDR
// for i = 1 to list do
5321: LD_ADDR_VAR 0 5
5325: PUSH
5326: DOUBLE
5327: LD_INT 1
5329: DEC
5330: ST_TO_ADDR
5331: LD_VAR 0 3
5335: PUSH
5336: FOR_TO
5337: IFFALSE 5475
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5339: LD_ADDR_VAR 0 7
5343: PUSH
5344: LD_VAR 0 1
5348: PPUSH
5349: LD_VAR 0 2
5353: PPUSH
5354: LD_VAR 0 3
5358: PUSH
5359: LD_VAR 0 5
5363: ARRAY
5364: PUSH
5365: LD_INT 1
5367: ARRAY
5368: PPUSH
5369: LD_VAR 0 3
5373: PUSH
5374: LD_VAR 0 5
5378: ARRAY
5379: PUSH
5380: LD_INT 2
5382: ARRAY
5383: PPUSH
5384: CALL_OW 298
5388: ST_TO_ADDR
// if d = 0 then
5389: LD_VAR 0 7
5393: PUSH
5394: LD_INT 0
5396: EQUAL
5397: IFFALSE 5401
// continue ;
5399: GO 5336
// if d < dist then
5401: LD_VAR 0 7
5405: PUSH
5406: LD_VAR 0 6
5410: LESS
5411: IFFALSE 5473
// begin _x := list [ i ] [ 1 ] ;
5413: LD_ADDR_VAR 0 8
5417: PUSH
5418: LD_VAR 0 3
5422: PUSH
5423: LD_VAR 0 5
5427: ARRAY
5428: PUSH
5429: LD_INT 1
5431: ARRAY
5432: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5433: LD_ADDR_VAR 0 9
5437: PUSH
5438: LD_VAR 0 3
5442: PUSH
5443: LD_VAR 0 5
5447: ARRAY
5448: PUSH
5449: LD_INT 2
5451: ARRAY
5452: ST_TO_ADDR
// _i := i ;
5453: LD_ADDR_VAR 0 10
5457: PUSH
5458: LD_VAR 0 5
5462: ST_TO_ADDR
// dist := d ;
5463: LD_ADDR_VAR 0 6
5467: PUSH
5468: LD_VAR 0 7
5472: ST_TO_ADDR
// end ; end ;
5473: GO 5336
5475: POP
5476: POP
// result := [ _x , _y , _i , dist ] ;
5477: LD_ADDR_VAR 0 4
5481: PUSH
5482: LD_VAR 0 8
5486: PUSH
5487: LD_VAR 0 9
5491: PUSH
5492: LD_VAR 0 10
5496: PUSH
5497: LD_VAR 0 6
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: LIST
5506: LIST
5507: ST_TO_ADDR
// end ;
5508: LD_VAR 0 4
5512: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5513: LD_INT 0
5515: PPUSH
5516: PPUSH
5517: PPUSH
5518: PPUSH
// for i = 1 to 72 do
5519: LD_ADDR_VAR 0 5
5523: PUSH
5524: DOUBLE
5525: LD_INT 1
5527: DEC
5528: ST_TO_ADDR
5529: LD_INT 72
5531: PUSH
5532: FOR_TO
5533: IFFALSE 5591
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5535: LD_VAR 0 5
5539: PPUSH
5540: LD_VAR 0 1
5544: PPUSH
5545: CALL_OW 321
5549: PUSH
5550: LD_INT 1
5552: EQUAL
5553: PUSH
5554: LD_VAR 0 5
5558: PPUSH
5559: LD_VAR 0 3
5563: PPUSH
5564: CALL_OW 482
5568: PUSH
5569: LD_INT 1
5571: EQUAL
5572: AND
5573: IFFALSE 5589
// AddComResearch ( lab , i ) ;
5575: LD_VAR 0 2
5579: PPUSH
5580: LD_VAR 0 5
5584: PPUSH
5585: CALL_OW 184
5589: GO 5532
5591: POP
5592: POP
// end ;
5593: LD_VAR 0 4
5597: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5598: LD_INT 0
5600: PPUSH
5601: PPUSH
5602: PPUSH
5603: PPUSH
5604: PPUSH
5605: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5606: LD_ADDR_VAR 0 7
5610: PUSH
5611: LD_VAR 0 2
5615: PPUSH
5616: CALL_OW 313
5620: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5621: LD_ADDR_VAR 0 8
5625: PUSH
5626: LD_VAR 0 3
5630: PPUSH
5631: LD_INT 22
5633: PUSH
5634: LD_VAR 0 1
5638: PUSH
5639: EMPTY
5640: LIST
5641: LIST
5642: PUSH
5643: LD_INT 25
5645: PUSH
5646: LD_INT 2
5648: PUSH
5649: EMPTY
5650: LIST
5651: LIST
5652: PUSH
5653: LD_INT 24
5655: PUSH
5656: LD_INT 750
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PUSH
5663: LD_INT 3
5665: PUSH
5666: LD_INT 54
5668: PUSH
5669: EMPTY
5670: LIST
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: PPUSH
5682: CALL_OW 70
5686: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5687: LD_ADDR_VAR 0 5
5691: PUSH
5692: LD_VAR 0 3
5696: PPUSH
5697: LD_INT 22
5699: PUSH
5700: LD_VAR 0 1
5704: PUSH
5705: EMPTY
5706: LIST
5707: LIST
5708: PUSH
5709: LD_INT 21
5711: PUSH
5712: LD_INT 3
5714: PUSH
5715: EMPTY
5716: LIST
5717: LIST
5718: PUSH
5719: LD_INT 3
5721: PUSH
5722: LD_INT 24
5724: PUSH
5725: LD_INT 1000
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: EMPTY
5742: LIST
5743: PPUSH
5744: CALL_OW 70
5748: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5749: LD_VAR 0 5
5753: NOT
5754: PUSH
5755: LD_INT 22
5757: PUSH
5758: LD_VAR 0 1
5762: PUSH
5763: EMPTY
5764: LIST
5765: LIST
5766: PUSH
5767: LD_INT 25
5769: PUSH
5770: LD_INT 2
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: PUSH
5777: LD_INT 24
5779: PUSH
5780: LD_INT 250
5782: PUSH
5783: EMPTY
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: LIST
5791: PPUSH
5792: CALL_OW 69
5796: NOT
5797: AND
5798: IFFALSE 5802
// exit ;
5800: GO 5914
// if buildings_list > 0 and engineerOkInside then
5802: LD_VAR 0 5
5806: PUSH
5807: LD_INT 0
5809: GREATER
5810: PUSH
5811: LD_VAR 0 7
5815: AND
5816: IFFALSE 5842
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5818: LD_VAR 0 7
5822: PPUSH
5823: LD_INT 25
5825: PUSH
5826: LD_INT 2
5828: PUSH
5829: EMPTY
5830: LIST
5831: LIST
5832: PPUSH
5833: CALL_OW 72
5837: PPUSH
5838: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5842: LD_VAR 0 5
5846: PUSH
5847: LD_INT 0
5849: GREATER
5850: PUSH
5851: LD_VAR 0 8
5855: PUSH
5856: LD_INT 0
5858: GREATER
5859: AND
5860: IFFALSE 5880
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5862: LD_VAR 0 8
5866: PPUSH
5867: LD_VAR 0 5
5871: PUSH
5872: LD_INT 1
5874: ARRAY
5875: PPUSH
5876: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5880: LD_VAR 0 5
5884: PUSH
5885: LD_INT 0
5887: EQUAL
5888: PUSH
5889: LD_VAR 0 8
5893: PUSH
5894: LD_INT 0
5896: GREATER
5897: AND
5898: IFFALSE 5914
// ComEnterUnit ( engineerOkOutside , building ) ;
5900: LD_VAR 0 8
5904: PPUSH
5905: LD_VAR 0 2
5909: PPUSH
5910: CALL_OW 120
// end ;
5914: LD_VAR 0 4
5918: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
5925: PPUSH
5926: PPUSH
5927: PPUSH
5928: PPUSH
5929: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5930: LD_ADDR_VAR 0 6
5934: PUSH
5935: LD_INT 22
5937: PUSH
5938: LD_VAR 0 1
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 25
5949: PUSH
5950: LD_INT 4
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 23
5959: PUSH
5960: LD_INT 2
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 24
5969: PUSH
5970: LD_INT 251
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: LIST
5981: LIST
5982: PPUSH
5983: CALL_OW 69
5987: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5988: LD_ADDR_VAR 0 7
5992: PUSH
5993: LD_VAR 0 3
5997: PPUSH
5998: LD_INT 22
6000: PUSH
6001: LD_VAR 0 1
6005: PUSH
6006: EMPTY
6007: LIST
6008: LIST
6009: PUSH
6010: LD_INT 23
6012: PUSH
6013: LD_INT 2
6015: PUSH
6016: EMPTY
6017: LIST
6018: LIST
6019: PUSH
6020: LD_INT 25
6022: PUSH
6023: LD_INT 4
6025: PUSH
6026: EMPTY
6027: LIST
6028: LIST
6029: PUSH
6030: LD_INT 50
6032: PUSH
6033: EMPTY
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: PPUSH
6042: CALL_OW 70
6046: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6047: LD_ADDR_VAR 0 10
6051: PUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: LD_INT 22
6059: PUSH
6060: LD_VAR 0 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 21
6071: PUSH
6072: LD_INT 1
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 3
6081: PUSH
6082: LD_INT 25
6084: PUSH
6085: LD_INT 3
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PUSH
6092: EMPTY
6093: LIST
6094: LIST
6095: PUSH
6096: LD_INT 3
6098: PUSH
6099: LD_INT 24
6101: PUSH
6102: LD_INT 750
6104: PUSH
6105: EMPTY
6106: LIST
6107: LIST
6108: PUSH
6109: EMPTY
6110: LIST
6111: LIST
6112: PUSH
6113: EMPTY
6114: LIST
6115: LIST
6116: LIST
6117: LIST
6118: PPUSH
6119: CALL_OW 70
6123: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6124: LD_ADDR_VAR 0 11
6128: PUSH
6129: LD_VAR 0 2
6133: PPUSH
6134: LD_INT 22
6136: PUSH
6137: LD_VAR 0 1
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: PUSH
6146: LD_INT 21
6148: PUSH
6149: LD_INT 1
6151: PUSH
6152: EMPTY
6153: LIST
6154: LIST
6155: PUSH
6156: LD_INT 3
6158: PUSH
6159: LD_INT 25
6161: PUSH
6162: LD_INT 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: EMPTY
6170: LIST
6171: LIST
6172: PUSH
6173: LD_INT 3
6175: PUSH
6176: LD_INT 24
6178: PUSH
6179: LD_INT 1000
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: EMPTY
6187: LIST
6188: LIST
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: LIST
6194: LIST
6195: PPUSH
6196: CALL_OW 70
6200: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6201: LD_VAR 0 10
6205: NOT
6206: PUSH
6207: LD_VAR 0 11
6211: NOT
6212: AND
6213: PUSH
6214: LD_VAR 0 6
6218: NOT
6219: AND
6220: IFFALSE 6224
// exit ;
6222: GO 6458
// if damageUnits > 0 and sci_list > 0 then
6224: LD_VAR 0 10
6228: PUSH
6229: LD_INT 0
6231: GREATER
6232: PUSH
6233: LD_VAR 0 6
6237: PUSH
6238: LD_INT 0
6240: GREATER
6241: AND
6242: IFFALSE 6258
// ComMoveToArea ( damageUnits , healArea ) ;
6244: LD_VAR 0 10
6248: PPUSH
6249: LD_VAR 0 2
6253: PPUSH
6254: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6258: LD_VAR 0 11
6262: PUSH
6263: LD_INT 0
6265: GREATER
6266: PUSH
6267: LD_VAR 0 6
6271: PUSH
6272: LD_INT 0
6274: GREATER
6275: AND
6276: IFFALSE 6287
// ComExitBuilding ( sci_list ) ;
6278: LD_VAR 0 6
6282: PPUSH
6283: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6287: LD_VAR 0 11
6291: PUSH
6292: LD_INT 0
6294: GREATER
6295: PUSH
6296: LD_VAR 0 7
6300: PUSH
6301: LD_INT 0
6303: GREATER
6304: AND
6305: IFFALSE 6325
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6307: LD_VAR 0 7
6311: PPUSH
6312: LD_VAR 0 11
6316: PUSH
6317: LD_INT 1
6319: ARRAY
6320: PPUSH
6321: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6325: LD_VAR 0 10
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: PUSH
6334: LD_VAR 0 11
6338: PUSH
6339: LD_INT 0
6341: EQUAL
6342: AND
6343: PUSH
6344: LD_VAR 0 7
6348: PUSH
6349: LD_INT 0
6351: GREATER
6352: AND
6353: IFFALSE 6458
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6355: LD_ADDR_VAR 0 12
6359: PUSH
6360: LD_INT 22
6362: PUSH
6363: LD_VAR 0 1
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: LD_INT 21
6374: PUSH
6375: LD_INT 3
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PUSH
6382: LD_INT 30
6384: PUSH
6385: LD_INT 8
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: PUSH
6392: EMPTY
6393: LIST
6394: LIST
6395: LIST
6396: PPUSH
6397: CALL_OW 69
6401: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6402: LD_ADDR_VAR 0 13
6406: PUSH
6407: LD_INT 1
6409: PPUSH
6410: LD_VAR 0 12
6414: PPUSH
6415: CALL_OW 12
6419: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6420: LD_VAR 0 7
6424: PPUSH
6425: LD_INT 3
6427: PUSH
6428: LD_INT 60
6430: PUSH
6431: EMPTY
6432: LIST
6433: PUSH
6434: EMPTY
6435: LIST
6436: LIST
6437: PPUSH
6438: CALL_OW 72
6442: PPUSH
6443: LD_VAR 0 12
6447: PUSH
6448: LD_VAR 0 13
6452: ARRAY
6453: PPUSH
6454: CALL_OW 120
// end ; end ;
6458: LD_VAR 0 5
6462: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6463: LD_INT 0
6465: PPUSH
6466: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6467: LD_INT 22
6469: PUSH
6470: LD_VAR 0 1
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 21
6481: PUSH
6482: LD_INT 2
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: EMPTY
6490: LIST
6491: LIST
6492: PPUSH
6493: CALL_OW 69
6497: PUSH
6498: LD_VAR 0 3
6502: LESSEQUAL
6503: IFFALSE 6570
// for i = 1 to vehCount do
6505: LD_ADDR_VAR 0 9
6509: PUSH
6510: DOUBLE
6511: LD_INT 1
6513: DEC
6514: ST_TO_ADDR
6515: LD_VAR 0 3
6519: PUSH
6520: FOR_TO
6521: IFFALSE 6568
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6523: LD_VAR 0 2
6527: PPUSH
6528: LD_VAR 0 7
6532: PPUSH
6533: LD_VAR 0 5
6537: PPUSH
6538: LD_VAR 0 6
6542: PPUSH
6543: LD_VAR 0 4
6547: PUSH
6548: LD_INT 1
6550: PPUSH
6551: LD_VAR 0 4
6555: PPUSH
6556: CALL_OW 12
6560: ARRAY
6561: PPUSH
6562: CALL_OW 185
6566: GO 6520
6568: POP
6569: POP
// end ;
6570: LD_VAR 0 8
6574: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6575: LD_INT 0
6577: PPUSH
6578: PPUSH
6579: PPUSH
6580: PPUSH
6581: PPUSH
6582: PPUSH
6583: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6584: LD_ADDR_VAR 0 8
6588: PUSH
6589: LD_INT 22
6591: PUSH
6592: LD_VAR 0 1
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 21
6603: PUSH
6604: LD_INT 2
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: LD_INT 24
6613: PUSH
6614: LD_INT 650
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: PPUSH
6626: CALL_OW 69
6630: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6631: LD_INT 22
6633: PUSH
6634: LD_VAR 0 1
6638: PUSH
6639: EMPTY
6640: LIST
6641: LIST
6642: PUSH
6643: LD_INT 21
6645: PUSH
6646: LD_INT 2
6648: PUSH
6649: EMPTY
6650: LIST
6651: LIST
6652: PUSH
6653: LD_INT 24
6655: PUSH
6656: LD_INT 1000
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: EMPTY
6664: LIST
6665: LIST
6666: LIST
6667: PPUSH
6668: CALL_OW 69
6672: PUSH
6673: LD_INT 3
6675: PUSH
6676: LD_INT 4
6678: PUSH
6679: LD_INT 5
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: LIST
6686: PUSH
6687: LD_OWVAR 67
6691: ARRAY
6692: GREATEREQUAL
6693: IFFALSE 7150
// repeat wait ( 0 0$1 ) ;
6695: LD_INT 35
6697: PPUSH
6698: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6702: LD_ADDR_VAR 0 8
6706: PUSH
6707: LD_INT 22
6709: PUSH
6710: LD_VAR 0 1
6714: PUSH
6715: EMPTY
6716: LIST
6717: LIST
6718: PUSH
6719: LD_INT 21
6721: PUSH
6722: LD_INT 2
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PUSH
6729: LD_INT 24
6731: PUSH
6732: LD_INT 650
6734: PUSH
6735: EMPTY
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: LIST
6743: PPUSH
6744: CALL_OW 69
6748: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6749: LD_INT 22
6751: PUSH
6752: LD_VAR 0 1
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 95
6763: PUSH
6764: LD_VAR 0 2
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PPUSH
6777: CALL_OW 69
6781: NOT
6782: PUSH
6783: LD_VAR 0 11
6787: PUSH
6788: LD_INT 0
6790: EQUAL
6791: AND
6792: IFFALSE 6847
// for i := 1 to wayX do
6794: LD_ADDR_VAR 0 6
6798: PUSH
6799: DOUBLE
6800: LD_INT 1
6802: DEC
6803: ST_TO_ADDR
6804: LD_VAR 0 3
6808: PUSH
6809: FOR_TO
6810: IFFALSE 6845
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6812: LD_VAR 0 8
6816: PPUSH
6817: LD_VAR 0 3
6821: PUSH
6822: LD_VAR 0 6
6826: ARRAY
6827: PPUSH
6828: LD_VAR 0 4
6832: PUSH
6833: LD_VAR 0 6
6837: ARRAY
6838: PPUSH
6839: CALL_OW 174
6843: GO 6809
6845: POP
6846: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6847: LD_INT 22
6849: PUSH
6850: LD_VAR 0 1
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 95
6861: PUSH
6862: LD_VAR 0 2
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: EMPTY
6872: LIST
6873: LIST
6874: PPUSH
6875: CALL_OW 69
6879: IFFALSE 7103
// begin seeEnemy = 1 ;
6881: LD_ADDR_VAR 0 11
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// for j in vehiclesOK do
6889: LD_ADDR_VAR 0 7
6893: PUSH
6894: LD_VAR 0 8
6898: PUSH
6899: FOR_IN
6900: IFFALSE 7101
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6902: LD_ADDR_VAR 0 9
6906: PUSH
6907: LD_INT 81
6909: PUSH
6910: LD_VAR 0 1
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: PUSH
6919: LD_INT 101
6921: PUSH
6922: LD_INT 1
6924: PUSH
6925: EMPTY
6926: LIST
6927: LIST
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PPUSH
6933: CALL_OW 69
6937: PPUSH
6938: LD_VAR 0 7
6942: PPUSH
6943: CALL_OW 74
6947: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
6948: LD_ADDR_VAR 0 10
6952: PUSH
6953: LD_INT 81
6955: PUSH
6956: LD_VAR 0 1
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: LD_INT 101
6967: PUSH
6968: LD_INT 1
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PUSH
6975: LD_INT 2
6977: PUSH
6978: LD_INT 59
6980: PUSH
6981: EMPTY
6982: LIST
6983: PUSH
6984: LD_INT 21
6986: PUSH
6987: LD_INT 1
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: PUSH
6994: LD_INT 21
6996: PUSH
6997: LD_INT 2
6999: PUSH
7000: EMPTY
7001: LIST
7002: LIST
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: LIST
7014: PUSH
7015: EMPTY
7016: LIST
7017: PPUSH
7018: CALL_OW 69
7022: PPUSH
7023: LD_VAR 0 7
7027: PPUSH
7028: CALL_OW 74
7032: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7033: LD_VAR 0 7
7037: PPUSH
7038: LD_VAR 0 9
7042: PPUSH
7043: CALL_OW 296
7047: PUSH
7048: LD_INT 8
7050: PLUS
7051: PUSH
7052: LD_VAR 0 7
7056: PPUSH
7057: LD_VAR 0 10
7061: PPUSH
7062: CALL_OW 296
7066: LESS
7067: IFFALSE 7085
// ComAttackUnit ( j , target1 ) else
7069: LD_VAR 0 7
7073: PPUSH
7074: LD_VAR 0 9
7078: PPUSH
7079: CALL_OW 115
7083: GO 7099
// ComAttackUnit ( j , target2 ) ;
7085: LD_VAR 0 7
7089: PPUSH
7090: LD_VAR 0 10
7094: PPUSH
7095: CALL_OW 115
// end ;
7099: GO 6899
7101: POP
7102: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7103: LD_INT 22
7105: PUSH
7106: LD_VAR 0 1
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: PUSH
7115: LD_INT 21
7117: PUSH
7118: LD_INT 2
7120: PUSH
7121: EMPTY
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 24
7127: PUSH
7128: LD_INT 1000
7130: PUSH
7131: EMPTY
7132: LIST
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 69
7144: PUSH
7145: LD_INT 0
7147: EQUAL
7148: IFFALSE 6695
// seeEnemy = 0 ;
7150: LD_ADDR_VAR 0 11
7154: PUSH
7155: LD_INT 0
7157: ST_TO_ADDR
// end ;
7158: LD_VAR 0 5
7162: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7163: LD_INT 0
7165: PPUSH
7166: PPUSH
7167: PPUSH
7168: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7169: LD_ADDR_VAR 0 8
7173: PUSH
7174: LD_INT 22
7176: PUSH
7177: LD_VAR 0 1
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PUSH
7186: LD_INT 21
7188: PUSH
7189: LD_INT 2
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: LD_INT 24
7201: PUSH
7202: LD_INT 650
7204: PUSH
7205: EMPTY
7206: LIST
7207: LIST
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: EMPTY
7214: LIST
7215: LIST
7216: LIST
7217: PPUSH
7218: CALL_OW 69
7222: ST_TO_ADDR
// if damageVehicles > 0 then
7223: LD_VAR 0 8
7227: PUSH
7228: LD_INT 0
7230: GREATER
7231: IFFALSE 7252
// ComMoveXY ( damageVehicles , repX , repY ) ;
7233: LD_VAR 0 8
7237: PPUSH
7238: LD_VAR 0 3
7242: PPUSH
7243: LD_VAR 0 4
7247: PPUSH
7248: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7252: LD_VAR 0 8
7256: PPUSH
7257: LD_INT 95
7259: PUSH
7260: LD_VAR 0 2
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 3
7271: PUSH
7272: LD_INT 58
7274: PUSH
7275: EMPTY
7276: LIST
7277: PUSH
7278: EMPTY
7279: LIST
7280: LIST
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PPUSH
7286: CALL_OW 72
7290: PUSH
7291: LD_INT 0
7293: GREATER
7294: IFFALSE 7361
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7296: LD_ADDR_VAR 0 6
7300: PUSH
7301: LD_VAR 0 8
7305: PPUSH
7306: LD_INT 95
7308: PUSH
7309: LD_VAR 0 2
7313: PUSH
7314: EMPTY
7315: LIST
7316: LIST
7317: PUSH
7318: LD_INT 3
7320: PUSH
7321: LD_INT 58
7323: PUSH
7324: EMPTY
7325: LIST
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: EMPTY
7332: LIST
7333: LIST
7334: PPUSH
7335: CALL_OW 72
7339: PUSH
7340: FOR_IN
7341: IFFALSE 7359
// ComExitVehicle ( UnitsInside ( i ) ) ;
7343: LD_VAR 0 6
7347: PPUSH
7348: CALL_OW 313
7352: PPUSH
7353: CALL_OW 121
7357: GO 7340
7359: POP
7360: POP
// end ;
7361: LD_VAR 0 5
7365: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7366: LD_INT 0
7368: PPUSH
7369: PPUSH
7370: PPUSH
7371: PPUSH
7372: PPUSH
7373: PPUSH
7374: PPUSH
7375: PPUSH
7376: PPUSH
7377: PPUSH
7378: PPUSH
// for i = 1 to medicCount do
7379: LD_ADDR_VAR 0 14
7383: PUSH
7384: DOUBLE
7385: LD_INT 1
7387: DEC
7388: ST_TO_ADDR
7389: LD_VAR 0 7
7393: PUSH
7394: FOR_TO
7395: IFFALSE 7477
// begin uc_side = side ;
7397: LD_ADDR_OWVAR 20
7401: PUSH
7402: LD_VAR 0 1
7406: ST_TO_ADDR
// uc_nation = nation ;
7407: LD_ADDR_OWVAR 21
7411: PUSH
7412: LD_VAR 0 2
7416: ST_TO_ADDR
// hc_name =  ;
7417: LD_ADDR_OWVAR 26
7421: PUSH
7422: LD_STRING 
7424: ST_TO_ADDR
// hc_gallery =  ;
7425: LD_ADDR_OWVAR 33
7429: PUSH
7430: LD_STRING 
7432: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7433: LD_INT 0
7435: PPUSH
7436: LD_INT 4
7438: PPUSH
7439: LD_VAR 0 8
7443: PPUSH
7444: CALL_OW 380
// un = CreateHuman ;
7448: LD_ADDR_VAR 0 16
7452: PUSH
7453: CALL_OW 44
7457: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7458: LD_VAR 0 16
7462: PPUSH
7463: LD_VAR 0 9
7467: PPUSH
7468: LD_INT 0
7470: PPUSH
7471: CALL_OW 49
// end ;
7475: GO 7394
7477: POP
7478: POP
// for i = 1 to soldierCount do
7479: LD_ADDR_VAR 0 14
7483: PUSH
7484: DOUBLE
7485: LD_INT 1
7487: DEC
7488: ST_TO_ADDR
7489: LD_VAR 0 3
7493: PUSH
7494: FOR_TO
7495: IFFALSE 7577
// begin uc_side = side ;
7497: LD_ADDR_OWVAR 20
7501: PUSH
7502: LD_VAR 0 1
7506: ST_TO_ADDR
// uc_nation = nation ;
7507: LD_ADDR_OWVAR 21
7511: PUSH
7512: LD_VAR 0 2
7516: ST_TO_ADDR
// hc_name =  ;
7517: LD_ADDR_OWVAR 26
7521: PUSH
7522: LD_STRING 
7524: ST_TO_ADDR
// hc_gallery =  ;
7525: LD_ADDR_OWVAR 33
7529: PUSH
7530: LD_STRING 
7532: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7533: LD_INT 0
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: LD_VAR 0 8
7543: PPUSH
7544: CALL_OW 380
// un = CreateHuman ;
7548: LD_ADDR_VAR 0 16
7552: PUSH
7553: CALL_OW 44
7557: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7558: LD_VAR 0 16
7562: PPUSH
7563: LD_VAR 0 9
7567: PPUSH
7568: LD_INT 0
7570: PPUSH
7571: CALL_OW 49
// end ;
7575: GO 7494
7577: POP
7578: POP
// for i = 1 to sniperCount do
7579: LD_ADDR_VAR 0 14
7583: PUSH
7584: DOUBLE
7585: LD_INT 1
7587: DEC
7588: ST_TO_ADDR
7589: LD_VAR 0 4
7593: PUSH
7594: FOR_TO
7595: IFFALSE 7677
// begin uc_side = side ;
7597: LD_ADDR_OWVAR 20
7601: PUSH
7602: LD_VAR 0 1
7606: ST_TO_ADDR
// uc_nation = nation ;
7607: LD_ADDR_OWVAR 21
7611: PUSH
7612: LD_VAR 0 2
7616: ST_TO_ADDR
// hc_name =  ;
7617: LD_ADDR_OWVAR 26
7621: PUSH
7622: LD_STRING 
7624: ST_TO_ADDR
// hc_gallery =  ;
7625: LD_ADDR_OWVAR 33
7629: PUSH
7630: LD_STRING 
7632: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7633: LD_INT 0
7635: PPUSH
7636: LD_INT 5
7638: PPUSH
7639: LD_VAR 0 8
7643: PPUSH
7644: CALL_OW 380
// un = CreateHuman ;
7648: LD_ADDR_VAR 0 16
7652: PUSH
7653: CALL_OW 44
7657: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7658: LD_VAR 0 16
7662: PPUSH
7663: LD_VAR 0 9
7667: PPUSH
7668: LD_INT 0
7670: PPUSH
7671: CALL_OW 49
// end ;
7675: GO 7594
7677: POP
7678: POP
// for i = 1 to bazookCount do
7679: LD_ADDR_VAR 0 14
7683: PUSH
7684: DOUBLE
7685: LD_INT 1
7687: DEC
7688: ST_TO_ADDR
7689: LD_VAR 0 5
7693: PUSH
7694: FOR_TO
7695: IFFALSE 7777
// begin uc_side = side ;
7697: LD_ADDR_OWVAR 20
7701: PUSH
7702: LD_VAR 0 1
7706: ST_TO_ADDR
// uc_nation = nation ;
7707: LD_ADDR_OWVAR 21
7711: PUSH
7712: LD_VAR 0 2
7716: ST_TO_ADDR
// hc_name =  ;
7717: LD_ADDR_OWVAR 26
7721: PUSH
7722: LD_STRING 
7724: ST_TO_ADDR
// hc_gallery =  ;
7725: LD_ADDR_OWVAR 33
7729: PUSH
7730: LD_STRING 
7732: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7733: LD_INT 0
7735: PPUSH
7736: LD_INT 9
7738: PPUSH
7739: LD_VAR 0 8
7743: PPUSH
7744: CALL_OW 380
// un = CreateHuman ;
7748: LD_ADDR_VAR 0 16
7752: PUSH
7753: CALL_OW 44
7757: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7758: LD_VAR 0 16
7762: PPUSH
7763: LD_VAR 0 9
7767: PPUSH
7768: LD_INT 0
7770: PPUSH
7771: CALL_OW 49
// end ;
7775: GO 7694
7777: POP
7778: POP
// for i = 1 to mortalCount do
7779: LD_ADDR_VAR 0 14
7783: PUSH
7784: DOUBLE
7785: LD_INT 1
7787: DEC
7788: ST_TO_ADDR
7789: LD_VAR 0 6
7793: PUSH
7794: FOR_TO
7795: IFFALSE 7877
// begin uc_side = side ;
7797: LD_ADDR_OWVAR 20
7801: PUSH
7802: LD_VAR 0 1
7806: ST_TO_ADDR
// uc_nation = nation ;
7807: LD_ADDR_OWVAR 21
7811: PUSH
7812: LD_VAR 0 2
7816: ST_TO_ADDR
// hc_name =  ;
7817: LD_ADDR_OWVAR 26
7821: PUSH
7822: LD_STRING 
7824: ST_TO_ADDR
// hc_gallery =  ;
7825: LD_ADDR_OWVAR 33
7829: PUSH
7830: LD_STRING 
7832: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7833: LD_INT 0
7835: PPUSH
7836: LD_INT 8
7838: PPUSH
7839: LD_VAR 0 8
7843: PPUSH
7844: CALL_OW 380
// un = CreateHuman ;
7848: LD_ADDR_VAR 0 16
7852: PUSH
7853: CALL_OW 44
7857: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7858: LD_VAR 0 16
7862: PPUSH
7863: LD_VAR 0 9
7867: PPUSH
7868: LD_INT 0
7870: PPUSH
7871: CALL_OW 49
// end ;
7875: GO 7794
7877: POP
7878: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7879: LD_ADDR_VAR 0 19
7883: PUSH
7884: LD_INT 22
7886: PUSH
7887: LD_VAR 0 1
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: LD_INT 2
7898: PUSH
7899: LD_INT 25
7901: PUSH
7902: LD_INT 1
7904: PUSH
7905: EMPTY
7906: LIST
7907: LIST
7908: PUSH
7909: LD_INT 25
7911: PUSH
7912: LD_INT 5
7914: PUSH
7915: EMPTY
7916: LIST
7917: LIST
7918: PUSH
7919: LD_INT 25
7921: PUSH
7922: LD_INT 8
7924: PUSH
7925: EMPTY
7926: LIST
7927: LIST
7928: PUSH
7929: LD_INT 25
7931: PUSH
7932: LD_INT 9
7934: PUSH
7935: EMPTY
7936: LIST
7937: LIST
7938: PUSH
7939: EMPTY
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PPUSH
7950: CALL_OW 69
7954: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7955: LD_ADDR_VAR 0 18
7959: PUSH
7960: LD_INT 22
7962: PUSH
7963: LD_VAR 0 1
7967: PUSH
7968: EMPTY
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 25
7974: PUSH
7975: LD_INT 4
7977: PUSH
7978: EMPTY
7979: LIST
7980: LIST
7981: PUSH
7982: EMPTY
7983: LIST
7984: LIST
7985: PPUSH
7986: CALL_OW 69
7990: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
7991: LD_VAR 0 18
7995: PPUSH
7996: LD_VAR 0 10
8000: PPUSH
8001: CALL_OW 113
// if strategy = 1 then
8005: LD_VAR 0 12
8009: PUSH
8010: LD_INT 1
8012: EQUAL
8013: IFFALSE 8529
// begin repeat wait ( 0 0$3 ) ;
8015: LD_INT 105
8017: PPUSH
8018: CALL_OW 67
// for i in soldiersOK_list do
8022: LD_ADDR_VAR 0 14
8026: PUSH
8027: LD_VAR 0 19
8031: PUSH
8032: FOR_IN
8033: IFFALSE 8097
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8035: LD_VAR 0 14
8039: PPUSH
8040: LD_INT 91
8042: PPUSH
8043: LD_INT 63
8045: PPUSH
8046: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8050: LD_VAR 0 14
8054: PPUSH
8055: LD_INT 101
8057: PPUSH
8058: LD_INT 53
8060: PPUSH
8061: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8065: LD_VAR 0 14
8069: PPUSH
8070: LD_INT 75
8072: PPUSH
8073: LD_INT 23
8075: PPUSH
8076: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8080: LD_VAR 0 14
8084: PPUSH
8085: LD_INT 78
8087: PPUSH
8088: LD_INT 8
8090: PPUSH
8091: CALL_OW 174
// end ;
8095: GO 8032
8097: POP
8098: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8099: LD_INT 15
8101: PPUSH
8102: LD_INT 22
8104: PUSH
8105: LD_VAR 0 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PPUSH
8114: CALL_OW 70
8118: PUSH
8119: LD_INT 2
8121: GREATER
8122: IFFALSE 8015
// repeat wait ( 0 0$1 ) ;
8124: LD_INT 35
8126: PPUSH
8127: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8131: LD_ADDR_VAR 0 17
8135: PUSH
8136: LD_INT 22
8138: PUSH
8139: LD_VAR 0 1
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 1
8150: PUSH
8151: LD_INT 3
8153: PUSH
8154: LD_INT 24
8156: PUSH
8157: LD_INT 550
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 24
8170: PUSH
8171: LD_INT 250
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PPUSH
8187: CALL_OW 69
8191: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8192: LD_ADDR_VAR 0 19
8196: PUSH
8197: LD_INT 22
8199: PUSH
8200: LD_VAR 0 1
8204: PUSH
8205: EMPTY
8206: LIST
8207: LIST
8208: PUSH
8209: LD_INT 2
8211: PUSH
8212: LD_INT 25
8214: PUSH
8215: LD_INT 1
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: PUSH
8222: LD_INT 25
8224: PUSH
8225: LD_INT 5
8227: PUSH
8228: EMPTY
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 25
8234: PUSH
8235: LD_INT 8
8237: PUSH
8238: EMPTY
8239: LIST
8240: LIST
8241: PUSH
8242: LD_INT 25
8244: PUSH
8245: LD_INT 9
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: PUSH
8252: EMPTY
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: LIST
8258: PUSH
8259: LD_INT 24
8261: PUSH
8262: LD_INT 1000
8264: PUSH
8265: EMPTY
8266: LIST
8267: LIST
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: PPUSH
8274: CALL_OW 69
8278: ST_TO_ADDR
// if medicCount > 0 then
8279: LD_VAR 0 7
8283: PUSH
8284: LD_INT 0
8286: GREATER
8287: IFFALSE 8331
// begin if damageUnit_list > 0 then
8289: LD_VAR 0 17
8293: PUSH
8294: LD_INT 0
8296: GREATER
8297: IFFALSE 8331
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8299: LD_VAR 0 17
8303: PPUSH
8304: LD_VAR 0 10
8308: PPUSH
8309: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8313: LD_VAR 0 7
8317: PPUSH
8318: LD_VAR 0 17
8322: PUSH
8323: LD_INT 1
8325: ARRAY
8326: PPUSH
8327: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8331: LD_ADDR_VAR 0 14
8335: PUSH
8336: LD_VAR 0 19
8340: PUSH
8341: FOR_IN
8342: IFFALSE 8518
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8344: LD_ADDR_VAR 0 22
8348: PUSH
8349: LD_INT 22
8351: PUSH
8352: LD_VAR 0 11
8356: PUSH
8357: EMPTY
8358: LIST
8359: LIST
8360: PPUSH
8361: CALL_OW 69
8365: PPUSH
8366: LD_VAR 0 14
8370: PPUSH
8371: CALL_OW 74
8375: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8376: LD_ADDR_VAR 0 23
8380: PUSH
8381: LD_INT 22
8383: PUSH
8384: LD_VAR 0 11
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_INT 2
8395: PUSH
8396: LD_INT 59
8398: PUSH
8399: EMPTY
8400: LIST
8401: PUSH
8402: LD_INT 21
8404: PUSH
8405: LD_INT 1
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: PUSH
8412: LD_INT 21
8414: PUSH
8415: LD_INT 2
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: LIST
8426: LIST
8427: PUSH
8428: EMPTY
8429: LIST
8430: LIST
8431: PUSH
8432: EMPTY
8433: LIST
8434: PPUSH
8435: CALL_OW 69
8439: PPUSH
8440: LD_VAR 0 14
8444: PPUSH
8445: CALL_OW 74
8449: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8450: LD_VAR 0 14
8454: PPUSH
8455: LD_VAR 0 22
8459: PPUSH
8460: CALL_OW 296
8464: PUSH
8465: LD_INT 8
8467: PLUS
8468: PUSH
8469: LD_VAR 0 14
8473: PPUSH
8474: LD_VAR 0 23
8478: PPUSH
8479: CALL_OW 296
8483: LESS
8484: IFFALSE 8502
// begin ComAttackUnit ( i , target1 ) ;
8486: LD_VAR 0 14
8490: PPUSH
8491: LD_VAR 0 22
8495: PPUSH
8496: CALL_OW 115
// end else
8500: GO 8516
// begin ComAttackUnit ( i , target2 ) ;
8502: LD_VAR 0 14
8506: PPUSH
8507: LD_VAR 0 23
8511: PPUSH
8512: CALL_OW 115
// end ; end ;
8516: GO 8341
8518: POP
8519: POP
// until soldiersOK_list = [ ] ;
8520: LD_VAR 0 19
8524: PUSH
8525: EMPTY
8526: EQUAL
8527: IFFALSE 8124
// end ; if strategy = 2 then
8529: LD_VAR 0 12
8533: PUSH
8534: LD_INT 2
8536: EQUAL
8537: IFFALSE 9023
// begin repeat wait ( 0 0$1 ) ;
8539: LD_INT 35
8541: PPUSH
8542: CALL_OW 67
// for i in soldiersOK_list do
8546: LD_ADDR_VAR 0 14
8550: PUSH
8551: LD_VAR 0 19
8555: PUSH
8556: FOR_IN
8557: IFFALSE 8591
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8559: LD_VAR 0 14
8563: PPUSH
8564: LD_INT 91
8566: PPUSH
8567: LD_INT 63
8569: PPUSH
8570: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8574: LD_VAR 0 14
8578: PPUSH
8579: LD_INT 75
8581: PPUSH
8582: LD_INT 33
8584: PPUSH
8585: CALL_OW 174
// end ;
8589: GO 8556
8591: POP
8592: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8593: LD_INT 16
8595: PPUSH
8596: LD_INT 22
8598: PUSH
8599: LD_VAR 0 1
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PPUSH
8608: CALL_OW 70
8612: PUSH
8613: LD_INT 2
8615: GREATER
8616: IFFALSE 8539
// repeat wait ( 0 0$3 ) ;
8618: LD_INT 105
8620: PPUSH
8621: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8625: LD_ADDR_VAR 0 17
8629: PUSH
8630: LD_INT 22
8632: PUSH
8633: LD_VAR 0 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 1
8644: PUSH
8645: LD_INT 3
8647: PUSH
8648: LD_INT 24
8650: PUSH
8651: LD_INT 550
8653: PUSH
8654: EMPTY
8655: LIST
8656: LIST
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 24
8664: PUSH
8665: LD_INT 250
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PUSH
8677: EMPTY
8678: LIST
8679: LIST
8680: PPUSH
8681: CALL_OW 69
8685: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8686: LD_ADDR_VAR 0 19
8690: PUSH
8691: LD_INT 22
8693: PUSH
8694: LD_VAR 0 1
8698: PUSH
8699: EMPTY
8700: LIST
8701: LIST
8702: PUSH
8703: LD_INT 2
8705: PUSH
8706: LD_INT 25
8708: PUSH
8709: LD_INT 1
8711: PUSH
8712: EMPTY
8713: LIST
8714: LIST
8715: PUSH
8716: LD_INT 25
8718: PUSH
8719: LD_INT 5
8721: PUSH
8722: EMPTY
8723: LIST
8724: LIST
8725: PUSH
8726: LD_INT 25
8728: PUSH
8729: LD_INT 8
8731: PUSH
8732: EMPTY
8733: LIST
8734: LIST
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 9
8741: PUSH
8742: EMPTY
8743: LIST
8744: LIST
8745: PUSH
8746: EMPTY
8747: LIST
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: PUSH
8753: LD_INT 24
8755: PUSH
8756: LD_INT 1000
8758: PUSH
8759: EMPTY
8760: LIST
8761: LIST
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: PPUSH
8768: CALL_OW 69
8772: ST_TO_ADDR
// if medicCount > 0 then
8773: LD_VAR 0 7
8777: PUSH
8778: LD_INT 0
8780: GREATER
8781: IFFALSE 8825
// begin if damageUnit_list > 0 then
8783: LD_VAR 0 17
8787: PUSH
8788: LD_INT 0
8790: GREATER
8791: IFFALSE 8825
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8793: LD_VAR 0 17
8797: PPUSH
8798: LD_VAR 0 10
8802: PPUSH
8803: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8807: LD_VAR 0 7
8811: PPUSH
8812: LD_VAR 0 17
8816: PUSH
8817: LD_INT 1
8819: ARRAY
8820: PPUSH
8821: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8825: LD_ADDR_VAR 0 14
8829: PUSH
8830: LD_VAR 0 19
8834: PUSH
8835: FOR_IN
8836: IFFALSE 9012
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8838: LD_ADDR_VAR 0 22
8842: PUSH
8843: LD_INT 22
8845: PUSH
8846: LD_VAR 0 11
8850: PUSH
8851: EMPTY
8852: LIST
8853: LIST
8854: PPUSH
8855: CALL_OW 69
8859: PPUSH
8860: LD_VAR 0 14
8864: PPUSH
8865: CALL_OW 74
8869: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8870: LD_ADDR_VAR 0 23
8874: PUSH
8875: LD_INT 22
8877: PUSH
8878: LD_VAR 0 11
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: PUSH
8887: LD_INT 2
8889: PUSH
8890: LD_INT 59
8892: PUSH
8893: EMPTY
8894: LIST
8895: PUSH
8896: LD_INT 21
8898: PUSH
8899: LD_INT 1
8901: PUSH
8902: EMPTY
8903: LIST
8904: LIST
8905: PUSH
8906: LD_INT 21
8908: PUSH
8909: LD_INT 2
8911: PUSH
8912: EMPTY
8913: LIST
8914: LIST
8915: PUSH
8916: EMPTY
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: EMPTY
8927: LIST
8928: PPUSH
8929: CALL_OW 69
8933: PPUSH
8934: LD_VAR 0 14
8938: PPUSH
8939: CALL_OW 74
8943: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8944: LD_VAR 0 14
8948: PPUSH
8949: LD_VAR 0 22
8953: PPUSH
8954: CALL_OW 296
8958: PUSH
8959: LD_INT 8
8961: PLUS
8962: PUSH
8963: LD_VAR 0 14
8967: PPUSH
8968: LD_VAR 0 23
8972: PPUSH
8973: CALL_OW 296
8977: LESS
8978: IFFALSE 8996
// begin ComAttackUnit ( i , target1 ) ;
8980: LD_VAR 0 14
8984: PPUSH
8985: LD_VAR 0 22
8989: PPUSH
8990: CALL_OW 115
// end else
8994: GO 9010
// begin ComAttackUnit ( i , target2 ) ;
8996: LD_VAR 0 14
9000: PPUSH
9001: LD_VAR 0 23
9005: PPUSH
9006: CALL_OW 115
// end ; end ;
9010: GO 8835
9012: POP
9013: POP
// until soldiersOK_list = [ ] ;
9014: LD_VAR 0 19
9018: PUSH
9019: EMPTY
9020: EQUAL
9021: IFFALSE 8618
// end ; end ;
9023: LD_VAR 0 13
9027: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9028: LD_INT 0
9030: PPUSH
9031: PPUSH
9032: PPUSH
9033: PPUSH
9034: PPUSH
9035: PPUSH
9036: PPUSH
9037: PPUSH
9038: PPUSH
9039: PPUSH
9040: PPUSH
// amChassisTab = [ ] ;
9041: LD_ADDR_VAR 0 19
9045: PUSH
9046: EMPTY
9047: ST_TO_ADDR
// arChassisTab = [ ] ;
9048: LD_ADDR_VAR 0 18
9052: PUSH
9053: EMPTY
9054: ST_TO_ADDR
// ruChassisTab = [ ] ;
9055: LD_ADDR_VAR 0 17
9059: PUSH
9060: EMPTY
9061: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9062: LD_INT 35
9064: PPUSH
9065: CALL_OW 67
// if nation = 1 then
9069: LD_VAR 0 5
9073: PUSH
9074: LD_INT 1
9076: EQUAL
9077: IFFALSE 9568
// begin uc_side = side ;
9079: LD_ADDR_OWVAR 20
9083: PUSH
9084: LD_VAR 0 2
9088: ST_TO_ADDR
// uc_nation = nation ;
9089: LD_ADDR_OWVAR 21
9093: PUSH
9094: LD_VAR 0 5
9098: ST_TO_ADDR
// vc_engine = vehengine ;
9099: LD_ADDR_OWVAR 39
9103: PUSH
9104: LD_VAR 0 6
9108: ST_TO_ADDR
// vc_control = vehcontrol ;
9109: LD_ADDR_OWVAR 38
9113: PUSH
9114: LD_VAR 0 7
9118: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9119: LD_ADDR_OWVAR 40
9123: PUSH
9124: LD_VAR 0 10
9128: PUSH
9129: LD_INT 1
9131: PPUSH
9132: LD_VAR 0 10
9136: PPUSH
9137: CALL_OW 12
9141: ARRAY
9142: ST_TO_ADDR
// for j = 1 to AMWeapon do
9143: LD_ADDR_VAR 0 14
9147: PUSH
9148: DOUBLE
9149: LD_INT 1
9151: DEC
9152: ST_TO_ADDR
9153: LD_VAR 0 10
9157: PUSH
9158: FOR_TO
9159: IFFALSE 9460
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9161: LD_VAR 0 10
9165: PUSH
9166: LD_VAR 0 14
9170: ARRAY
9171: PUSH
9172: LD_INT 2
9174: EQUAL
9175: PUSH
9176: LD_VAR 0 10
9180: PUSH
9181: LD_VAR 0 14
9185: ARRAY
9186: PUSH
9187: LD_INT 3
9189: EQUAL
9190: OR
9191: IFFALSE 9244
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9193: LD_ADDR_VAR 0 19
9197: PUSH
9198: LD_INT 1
9200: PUSH
9201: LD_INT 2
9203: PUSH
9204: LD_INT 3
9206: PUSH
9207: LD_INT 4
9209: PUSH
9210: LD_INT 5
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9220: LD_ADDR_OWVAR 37
9224: PUSH
9225: LD_VAR 0 19
9229: PUSH
9230: LD_INT 1
9232: PPUSH
9233: LD_VAR 0 19
9237: PPUSH
9238: CALL_OW 12
9242: ARRAY
9243: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9244: LD_VAR 0 10
9248: PUSH
9249: LD_VAR 0 14
9253: ARRAY
9254: PUSH
9255: LD_INT 4
9257: EQUAL
9258: PUSH
9259: LD_VAR 0 10
9263: PUSH
9264: LD_VAR 0 14
9268: ARRAY
9269: PUSH
9270: LD_INT 5
9272: EQUAL
9273: OR
9274: PUSH
9275: LD_VAR 0 10
9279: PUSH
9280: LD_VAR 0 14
9284: ARRAY
9285: PUSH
9286: LD_INT 9
9288: EQUAL
9289: OR
9290: PUSH
9291: LD_VAR 0 10
9295: PUSH
9296: LD_VAR 0 14
9300: ARRAY
9301: PUSH
9302: LD_INT 11
9304: EQUAL
9305: OR
9306: PUSH
9307: LD_VAR 0 10
9311: PUSH
9312: LD_VAR 0 14
9316: ARRAY
9317: PUSH
9318: LD_INT 7
9320: EQUAL
9321: OR
9322: IFFALSE 9371
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9324: LD_ADDR_VAR 0 19
9328: PUSH
9329: LD_INT 2
9331: PUSH
9332: LD_INT 3
9334: PUSH
9335: LD_INT 4
9337: PUSH
9338: LD_INT 5
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9347: LD_ADDR_OWVAR 37
9351: PUSH
9352: LD_VAR 0 19
9356: PUSH
9357: LD_INT 1
9359: PPUSH
9360: LD_VAR 0 19
9364: PPUSH
9365: CALL_OW 12
9369: ARRAY
9370: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9371: LD_VAR 0 10
9375: PUSH
9376: LD_VAR 0 14
9380: ARRAY
9381: PUSH
9382: LD_INT 8
9384: EQUAL
9385: PUSH
9386: LD_VAR 0 10
9390: PUSH
9391: LD_VAR 0 14
9395: ARRAY
9396: PUSH
9397: LD_INT 6
9399: EQUAL
9400: OR
9401: PUSH
9402: LD_VAR 0 10
9406: PUSH
9407: LD_VAR 0 14
9411: ARRAY
9412: PUSH
9413: LD_INT 10
9415: EQUAL
9416: OR
9417: IFFALSE 9458
// begin amChassisTab = [ 4 , 5 ] ;
9419: LD_ADDR_VAR 0 19
9423: PUSH
9424: LD_INT 4
9426: PUSH
9427: LD_INT 5
9429: PUSH
9430: EMPTY
9431: LIST
9432: LIST
9433: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9434: LD_ADDR_OWVAR 37
9438: PUSH
9439: LD_VAR 0 19
9443: PUSH
9444: LD_INT 1
9446: PPUSH
9447: LD_VAR 0 19
9451: PPUSH
9452: CALL_OW 12
9456: ARRAY
9457: ST_TO_ADDR
// end ; end ;
9458: GO 9158
9460: POP
9461: POP
// veh = CreateVehicle ;
9462: LD_ADDR_VAR 0 16
9466: PUSH
9467: CALL_OW 45
9471: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9472: LD_VAR 0 16
9476: PPUSH
9477: LD_VAR 0 1
9481: PPUSH
9482: LD_INT 0
9484: PPUSH
9485: CALL_OW 49
// if vehControl = 1 then
9489: LD_VAR 0 7
9493: PUSH
9494: LD_INT 1
9496: EQUAL
9497: IFFALSE 9554
// begin hc_gallery =  ;
9499: LD_ADDR_OWVAR 33
9503: PUSH
9504: LD_STRING 
9506: ST_TO_ADDR
// hc_name =  ;
9507: LD_ADDR_OWVAR 26
9511: PUSH
9512: LD_STRING 
9514: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9515: LD_INT 0
9517: PPUSH
9518: LD_INT 3
9520: PPUSH
9521: LD_VAR 0 4
9525: PPUSH
9526: CALL_OW 380
// un = CreateHuman ;
9530: LD_ADDR_VAR 0 15
9534: PUSH
9535: CALL_OW 44
9539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9540: LD_VAR 0 15
9544: PPUSH
9545: LD_VAR 0 16
9549: PPUSH
9550: CALL_OW 52
// end ; i = i + 1 ;
9554: LD_ADDR_VAR 0 13
9558: PUSH
9559: LD_VAR 0 13
9563: PUSH
9564: LD_INT 1
9566: PLUS
9567: ST_TO_ADDR
// end ; if nation = 2 then
9568: LD_VAR 0 5
9572: PUSH
9573: LD_INT 2
9575: EQUAL
9576: IFFALSE 10000
// begin uc_side = side ;
9578: LD_ADDR_OWVAR 20
9582: PUSH
9583: LD_VAR 0 2
9587: ST_TO_ADDR
// uc_nation = nation ;
9588: LD_ADDR_OWVAR 21
9592: PUSH
9593: LD_VAR 0 5
9597: ST_TO_ADDR
// vc_engine = vehengine ;
9598: LD_ADDR_OWVAR 39
9602: PUSH
9603: LD_VAR 0 6
9607: ST_TO_ADDR
// vc_control = vehcontrol ;
9608: LD_ADDR_OWVAR 38
9612: PUSH
9613: LD_VAR 0 7
9617: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9618: LD_ADDR_OWVAR 40
9622: PUSH
9623: LD_VAR 0 9
9627: PUSH
9628: LD_INT 1
9630: PPUSH
9631: LD_VAR 0 9
9635: PPUSH
9636: CALL_OW 12
9640: ARRAY
9641: ST_TO_ADDR
// for j = 1 to ARWeapons do
9642: LD_ADDR_VAR 0 14
9646: PUSH
9647: DOUBLE
9648: LD_INT 1
9650: DEC
9651: ST_TO_ADDR
9652: LD_VAR 0 9
9656: PUSH
9657: FOR_TO
9658: IFFALSE 9892
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9660: LD_VAR 0 9
9664: PUSH
9665: LD_VAR 0 14
9669: ARRAY
9670: PUSH
9671: LD_INT 24
9673: EQUAL
9674: PUSH
9675: LD_VAR 0 9
9679: PUSH
9680: LD_VAR 0 14
9684: ARRAY
9685: PUSH
9686: LD_INT 22
9688: EQUAL
9689: OR
9690: PUSH
9691: LD_VAR 0 9
9695: PUSH
9696: LD_VAR 0 14
9700: ARRAY
9701: PUSH
9702: LD_INT 23
9704: EQUAL
9705: OR
9706: PUSH
9707: LD_VAR 0 9
9711: PUSH
9712: LD_VAR 0 14
9716: ARRAY
9717: PUSH
9718: LD_INT 30
9720: EQUAL
9721: OR
9722: IFFALSE 9771
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9724: LD_ADDR_VAR 0 18
9728: PUSH
9729: LD_INT 11
9731: PUSH
9732: LD_INT 12
9734: PUSH
9735: LD_INT 13
9737: PUSH
9738: LD_INT 14
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9747: LD_ADDR_OWVAR 37
9751: PUSH
9752: LD_VAR 0 18
9756: PUSH
9757: LD_INT 1
9759: PPUSH
9760: LD_VAR 0 18
9764: PPUSH
9765: CALL_OW 12
9769: ARRAY
9770: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9771: LD_VAR 0 9
9775: PUSH
9776: LD_VAR 0 14
9780: ARRAY
9781: PUSH
9782: LD_INT 29
9784: EQUAL
9785: PUSH
9786: LD_VAR 0 9
9790: PUSH
9791: LD_VAR 0 14
9795: ARRAY
9796: PUSH
9797: LD_INT 28
9799: EQUAL
9800: OR
9801: PUSH
9802: LD_VAR 0 9
9806: PUSH
9807: LD_VAR 0 14
9811: ARRAY
9812: PUSH
9813: LD_INT 27
9815: EQUAL
9816: OR
9817: PUSH
9818: LD_VAR 0 9
9822: PUSH
9823: LD_VAR 0 14
9827: ARRAY
9828: PUSH
9829: LD_INT 26
9831: EQUAL
9832: OR
9833: PUSH
9834: LD_VAR 0 9
9838: PUSH
9839: LD_VAR 0 14
9843: ARRAY
9844: PUSH
9845: LD_INT 25
9847: EQUAL
9848: OR
9849: IFFALSE 9890
// begin arChassisTab = [ 13 , 14 ] ;
9851: LD_ADDR_VAR 0 18
9855: PUSH
9856: LD_INT 13
9858: PUSH
9859: LD_INT 14
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9866: LD_ADDR_OWVAR 37
9870: PUSH
9871: LD_VAR 0 18
9875: PUSH
9876: LD_INT 1
9878: PPUSH
9879: LD_VAR 0 18
9883: PPUSH
9884: CALL_OW 12
9888: ARRAY
9889: ST_TO_ADDR
// end ; end ;
9890: GO 9657
9892: POP
9893: POP
// veh = CreateVehicle ;
9894: LD_ADDR_VAR 0 16
9898: PUSH
9899: CALL_OW 45
9903: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9904: LD_VAR 0 16
9908: PPUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: LD_INT 0
9916: PPUSH
9917: CALL_OW 49
// if vehcontrol = 1 then
9921: LD_VAR 0 7
9925: PUSH
9926: LD_INT 1
9928: EQUAL
9929: IFFALSE 9986
// begin hc_gallery =  ;
9931: LD_ADDR_OWVAR 33
9935: PUSH
9936: LD_STRING 
9938: ST_TO_ADDR
// hc_name =  ;
9939: LD_ADDR_OWVAR 26
9943: PUSH
9944: LD_STRING 
9946: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9947: LD_INT 0
9949: PPUSH
9950: LD_INT 3
9952: PPUSH
9953: LD_VAR 0 4
9957: PPUSH
9958: CALL_OW 380
// un = CreateHuman ;
9962: LD_ADDR_VAR 0 15
9966: PUSH
9967: CALL_OW 44
9971: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9972: LD_VAR 0 15
9976: PPUSH
9977: LD_VAR 0 16
9981: PPUSH
9982: CALL_OW 52
// end ; i = i + 1 ;
9986: LD_ADDR_VAR 0 13
9990: PUSH
9991: LD_VAR 0 13
9995: PUSH
9996: LD_INT 1
9998: PLUS
9999: ST_TO_ADDR
// end ; if nation = 3 then
10000: LD_VAR 0 5
10004: PUSH
10005: LD_INT 3
10007: EQUAL
10008: IFFALSE 10400
// begin uc_side = side ;
10010: LD_ADDR_OWVAR 20
10014: PUSH
10015: LD_VAR 0 2
10019: ST_TO_ADDR
// uc_nation = nation ;
10020: LD_ADDR_OWVAR 21
10024: PUSH
10025: LD_VAR 0 5
10029: ST_TO_ADDR
// vc_engine = vehengine ;
10030: LD_ADDR_OWVAR 39
10034: PUSH
10035: LD_VAR 0 6
10039: ST_TO_ADDR
// vc_control = vehcontrol ;
10040: LD_ADDR_OWVAR 38
10044: PUSH
10045: LD_VAR 0 7
10049: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10050: LD_ADDR_OWVAR 40
10054: PUSH
10055: LD_VAR 0 8
10059: PUSH
10060: LD_INT 1
10062: PPUSH
10063: LD_VAR 0 8
10067: PPUSH
10068: CALL_OW 12
10072: ARRAY
10073: ST_TO_ADDR
// for j = 1 to RuWeapons do
10074: LD_ADDR_VAR 0 14
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_VAR 0 8
10088: PUSH
10089: FOR_TO
10090: IFFALSE 10292
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10092: LD_VAR 0 8
10096: PUSH
10097: LD_VAR 0 14
10101: ARRAY
10102: PUSH
10103: LD_INT 42
10105: EQUAL
10106: PUSH
10107: LD_VAR 0 8
10111: PUSH
10112: LD_VAR 0 14
10116: ARRAY
10117: PUSH
10118: LD_INT 43
10120: EQUAL
10121: OR
10122: PUSH
10123: LD_VAR 0 8
10127: PUSH
10128: LD_VAR 0 14
10132: ARRAY
10133: PUSH
10134: LD_INT 44
10136: EQUAL
10137: OR
10138: PUSH
10139: LD_VAR 0 8
10143: PUSH
10144: LD_VAR 0 14
10148: ARRAY
10149: PUSH
10150: LD_INT 45
10152: EQUAL
10153: OR
10154: PUSH
10155: LD_VAR 0 8
10159: PUSH
10160: LD_VAR 0 14
10164: ARRAY
10165: PUSH
10166: LD_INT 49
10168: EQUAL
10169: OR
10170: IFFALSE 10219
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10172: LD_ADDR_VAR 0 17
10176: PUSH
10177: LD_INT 21
10179: PUSH
10180: LD_INT 22
10182: PUSH
10183: LD_INT 23
10185: PUSH
10186: LD_INT 24
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: LIST
10193: LIST
10194: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10195: LD_ADDR_OWVAR 37
10199: PUSH
10200: LD_VAR 0 17
10204: PUSH
10205: LD_INT 1
10207: PPUSH
10208: LD_VAR 0 17
10212: PPUSH
10213: CALL_OW 12
10217: ARRAY
10218: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10219: LD_VAR 0 8
10223: PUSH
10224: LD_VAR 0 14
10228: ARRAY
10229: PUSH
10230: LD_INT 46
10232: EQUAL
10233: PUSH
10234: LD_VAR 0 8
10238: PUSH
10239: LD_VAR 0 14
10243: ARRAY
10244: PUSH
10245: LD_INT 47
10247: EQUAL
10248: OR
10249: IFFALSE 10290
// begin ruChassisTab = [ 23 , 24 ] ;
10251: LD_ADDR_VAR 0 17
10255: PUSH
10256: LD_INT 23
10258: PUSH
10259: LD_INT 24
10261: PUSH
10262: EMPTY
10263: LIST
10264: LIST
10265: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10266: LD_ADDR_OWVAR 37
10270: PUSH
10271: LD_VAR 0 17
10275: PUSH
10276: LD_INT 1
10278: PPUSH
10279: LD_VAR 0 17
10283: PPUSH
10284: CALL_OW 12
10288: ARRAY
10289: ST_TO_ADDR
// end ; end ;
10290: GO 10089
10292: POP
10293: POP
// veh = CreateVehicle ;
10294: LD_ADDR_VAR 0 16
10298: PUSH
10299: CALL_OW 45
10303: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10304: LD_VAR 0 16
10308: PPUSH
10309: LD_VAR 0 1
10313: PPUSH
10314: LD_INT 0
10316: PPUSH
10317: CALL_OW 49
// if vehcontrol = 1 then
10321: LD_VAR 0 7
10325: PUSH
10326: LD_INT 1
10328: EQUAL
10329: IFFALSE 10386
// begin hc_gallery =  ;
10331: LD_ADDR_OWVAR 33
10335: PUSH
10336: LD_STRING 
10338: ST_TO_ADDR
// hc_name =  ;
10339: LD_ADDR_OWVAR 26
10343: PUSH
10344: LD_STRING 
10346: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10347: LD_INT 0
10349: PPUSH
10350: LD_INT 3
10352: PPUSH
10353: LD_VAR 0 4
10357: PPUSH
10358: CALL_OW 380
// un = CreateHuman ;
10362: LD_ADDR_VAR 0 15
10366: PUSH
10367: CALL_OW 44
10371: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10372: LD_VAR 0 15
10376: PPUSH
10377: LD_VAR 0 16
10381: PPUSH
10382: CALL_OW 52
// end ; i = i + 1 ;
10386: LD_ADDR_VAR 0 13
10390: PUSH
10391: LD_VAR 0 13
10395: PUSH
10396: LD_INT 1
10398: PLUS
10399: ST_TO_ADDR
// end ; until i = vehCount ;
10400: LD_VAR 0 13
10404: PUSH
10405: LD_VAR 0 3
10409: EQUAL
10410: IFFALSE 9062
// repeat wait ( 0 0$1 ) ;
10412: LD_INT 35
10414: PPUSH
10415: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10419: LD_INT 22
10421: PUSH
10422: LD_VAR 0 2
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 21
10433: PUSH
10434: LD_INT 2
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 24
10443: PUSH
10444: LD_INT 250
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 3
10453: PUSH
10454: LD_INT 58
10456: PUSH
10457: EMPTY
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PPUSH
10470: CALL_OW 69
10474: PUSH
10475: LD_INT 0
10477: GREATER
10478: IFFALSE 10720
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10480: LD_ADDR_VAR 0 13
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_VAR 0 2
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 21
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 24
10509: PUSH
10510: LD_INT 250
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 3
10519: PUSH
10520: LD_INT 58
10522: PUSH
10523: EMPTY
10524: LIST
10525: PUSH
10526: EMPTY
10527: LIST
10528: LIST
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: PPUSH
10536: CALL_OW 69
10540: PUSH
10541: FOR_IN
10542: IFFALSE 10718
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10544: LD_ADDR_VAR 0 21
10548: PUSH
10549: LD_INT 22
10551: PUSH
10552: LD_VAR 0 11
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PPUSH
10561: CALL_OW 69
10565: PPUSH
10566: LD_VAR 0 13
10570: PPUSH
10571: CALL_OW 74
10575: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10576: LD_ADDR_VAR 0 22
10580: PUSH
10581: LD_INT 22
10583: PUSH
10584: LD_VAR 0 11
10588: PUSH
10589: EMPTY
10590: LIST
10591: LIST
10592: PUSH
10593: LD_INT 2
10595: PUSH
10596: LD_INT 59
10598: PUSH
10599: EMPTY
10600: LIST
10601: PUSH
10602: LD_INT 21
10604: PUSH
10605: LD_INT 1
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PUSH
10612: LD_INT 21
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: EMPTY
10619: LIST
10620: LIST
10621: PUSH
10622: EMPTY
10623: LIST
10624: LIST
10625: LIST
10626: LIST
10627: PUSH
10628: EMPTY
10629: LIST
10630: LIST
10631: PUSH
10632: EMPTY
10633: LIST
10634: PPUSH
10635: CALL_OW 69
10639: PPUSH
10640: LD_VAR 0 13
10644: PPUSH
10645: CALL_OW 74
10649: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10650: LD_VAR 0 13
10654: PPUSH
10655: LD_VAR 0 21
10659: PPUSH
10660: CALL_OW 296
10664: PUSH
10665: LD_INT 8
10667: PLUS
10668: PUSH
10669: LD_VAR 0 13
10673: PPUSH
10674: LD_VAR 0 22
10678: PPUSH
10679: CALL_OW 296
10683: LESS
10684: IFFALSE 10702
// begin ComAttackUnit ( i , target1 ) ;
10686: LD_VAR 0 13
10690: PPUSH
10691: LD_VAR 0 21
10695: PPUSH
10696: CALL_OW 115
// end else
10700: GO 10716
// begin ComAttackUnit ( i , target2 ) ;
10702: LD_VAR 0 13
10706: PPUSH
10707: LD_VAR 0 22
10711: PPUSH
10712: CALL_OW 115
// end ; end ;
10716: GO 10541
10718: POP
10719: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10720: LD_INT 22
10722: PUSH
10723: LD_VAR 0 2
10727: PUSH
10728: EMPTY
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 21
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: EMPTY
10739: LIST
10740: LIST
10741: PUSH
10742: LD_INT 24
10744: PUSH
10745: LD_INT 250
10747: PUSH
10748: EMPTY
10749: LIST
10750: LIST
10751: PUSH
10752: LD_INT 3
10754: PUSH
10755: LD_INT 58
10757: PUSH
10758: EMPTY
10759: LIST
10760: PUSH
10761: EMPTY
10762: LIST
10763: LIST
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PUSH
10776: LD_INT 0
10778: EQUAL
10779: IFFALSE 10412
// end ; end_of_file
10781: LD_VAR 0 12
10785: RET
// every 1 do var i , gammaSquad , startX , startY ;
10786: GO 10788
10788: DISABLE
10789: LD_INT 0
10791: PPUSH
10792: PPUSH
10793: PPUSH
10794: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
10795: LD_ADDR_VAR 0 2
10799: PUSH
10800: LD_EXP 8
10804: PUSH
10805: LD_EXP 9
10809: PUSH
10810: LD_EXP 10
10814: PUSH
10815: LD_EXP 11
10819: PUSH
10820: LD_EXP 12
10824: PUSH
10825: EMPTY
10826: LIST
10827: LIST
10828: LIST
10829: LIST
10830: LIST
10831: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
10832: LD_ADDR_VAR 0 3
10836: PUSH
10837: LD_INT 46
10839: PUSH
10840: LD_INT 45
10842: PUSH
10843: LD_INT 44
10845: PUSH
10846: LD_INT 43
10848: PUSH
10849: LD_INT 42
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
10859: LD_ADDR_VAR 0 4
10863: PUSH
10864: LD_INT 14
10866: PUSH
10867: LD_INT 12
10869: PUSH
10870: LD_INT 10
10872: PUSH
10873: LD_INT 8
10875: PUSH
10876: LD_INT 6
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
10886: LD_INT 32
10888: PPUSH
10889: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
10893: LD_INT 32
10895: PPUSH
10896: LD_INT 51
10898: PPUSH
10899: LD_INT 26
10901: PPUSH
10902: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
10906: LD_INT 32
10908: PPUSH
10909: LD_INT 53
10911: PPUSH
10912: LD_INT 23
10914: PPUSH
10915: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
10919: LD_INT 32
10921: PPUSH
10922: LD_INT 52
10924: PPUSH
10925: LD_INT 19
10927: PPUSH
10928: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
10932: LD_INT 35
10934: PPUSH
10935: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
10939: LD_INT 32
10941: PPUSH
10942: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
10946: LD_INT 32
10948: PPUSH
10949: CALL_OW 250
10953: PUSH
10954: LD_INT 52
10956: EQUAL
10957: PUSH
10958: LD_INT 32
10960: PPUSH
10961: CALL_OW 251
10965: PUSH
10966: LD_INT 19
10968: EQUAL
10969: AND
10970: IFFALSE 10932
// ComExitVehicle ( JMM ) ;
10972: LD_EXP 1
10976: PPUSH
10977: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
10981: LD_EXP 7
10985: PPUSH
10986: LD_EXP 1
10990: PPUSH
10991: CALL_OW 119
// wait ( 0 0$01 ) ;
10995: LD_INT 35
10997: PPUSH
10998: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11002: LD_EXP 1
11006: PPUSH
11007: LD_INT 46
11009: PPUSH
11010: LD_INT 10
11012: PPUSH
11013: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11017: LD_EXP 1
11021: PPUSH
11022: LD_EXP 7
11026: PPUSH
11027: CALL_OW 179
// wait ( 0 0$4 ) ;
11031: LD_INT 140
11033: PPUSH
11034: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11038: LD_EXP 1
11042: PPUSH
11043: LD_STRING D1-JMM-1
11045: PPUSH
11046: CALL_OW 88
// if not dialogue_skipped then
11050: LD_OWVAR 59
11054: NOT
11055: IFFALSE 11712
// begin for i := 1 to gammaSquad do
11057: LD_ADDR_VAR 0 1
11061: PUSH
11062: DOUBLE
11063: LD_INT 1
11065: DEC
11066: ST_TO_ADDR
11067: LD_VAR 0 2
11071: PUSH
11072: FOR_TO
11073: IFFALSE 11134
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11075: LD_VAR 0 2
11079: PUSH
11080: LD_VAR 0 1
11084: ARRAY
11085: PPUSH
11086: LD_VAR 0 3
11090: PUSH
11091: LD_VAR 0 1
11095: ARRAY
11096: PPUSH
11097: LD_VAR 0 4
11101: PUSH
11102: LD_VAR 0 1
11106: ARRAY
11107: PPUSH
11108: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11112: LD_VAR 0 2
11116: PUSH
11117: LD_VAR 0 1
11121: ARRAY
11122: PPUSH
11123: LD_EXP 1
11127: PPUSH
11128: CALL_OW 179
// end ;
11132: GO 11072
11134: POP
11135: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11136: LD_EXP 4
11140: PPUSH
11141: LD_INT 41
11143: PPUSH
11144: LD_INT 4
11146: PPUSH
11147: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11151: LD_EXP 4
11155: PPUSH
11156: LD_EXP 1
11160: PPUSH
11161: CALL_OW 179
// if Lisa = false and Bobby then
11165: LD_EXP 4
11169: PUSH
11170: LD_INT 0
11172: EQUAL
11173: PUSH
11174: LD_EXP 2
11178: AND
11179: IFFALSE 11210
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11181: LD_EXP 2
11185: PPUSH
11186: LD_INT 41
11188: PPUSH
11189: LD_INT 4
11191: PPUSH
11192: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11196: LD_EXP 2
11200: PPUSH
11201: LD_EXP 1
11205: PPUSH
11206: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11210: LD_EXP 4
11214: PUSH
11215: LD_INT 0
11217: EQUAL
11218: PUSH
11219: LD_EXP 2
11223: PUSH
11224: LD_INT 0
11226: EQUAL
11227: AND
11228: PUSH
11229: LD_EXP 3
11233: AND
11234: IFFALSE 11265
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11236: LD_EXP 3
11240: PPUSH
11241: LD_INT 41
11243: PPUSH
11244: LD_INT 4
11246: PPUSH
11247: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11251: LD_EXP 3
11255: PPUSH
11256: LD_EXP 1
11260: PPUSH
11261: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11265: LD_EXP 4
11269: PUSH
11270: LD_INT 0
11272: EQUAL
11273: PUSH
11274: LD_EXP 2
11278: PUSH
11279: LD_INT 0
11281: EQUAL
11282: AND
11283: PUSH
11284: LD_EXP 3
11288: PUSH
11289: LD_INT 0
11291: EQUAL
11292: AND
11293: IFFALSE 11324
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11295: LD_EXP 6
11299: PPUSH
11300: LD_INT 41
11302: PPUSH
11303: LD_INT 4
11305: PPUSH
11306: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11310: LD_EXP 6
11314: PPUSH
11315: LD_EXP 1
11319: PPUSH
11320: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11324: LD_EXP 7
11328: PPUSH
11329: LD_STRING D1-Brown-1
11331: PPUSH
11332: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11336: LD_EXP 1
11340: PPUSH
11341: LD_STRING D1-JMM-2
11343: PPUSH
11344: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11348: LD_EXP 7
11352: PPUSH
11353: LD_STRING D1-Brown-2
11355: PPUSH
11356: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11360: LD_EXP 1
11364: PPUSH
11365: LD_EXP 9
11369: PPUSH
11370: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11374: LD_EXP 9
11378: PPUSH
11379: LD_STRING D1-FSol1-2
11381: PPUSH
11382: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11386: LD_EXP 1
11390: PPUSH
11391: LD_EXP 8
11395: PPUSH
11396: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11400: LD_EXP 8
11404: PPUSH
11405: LD_STRING D1-Sol2-2
11407: PPUSH
11408: CALL_OW 88
// if Lisa then
11412: LD_EXP 4
11416: IFFALSE 11456
// begin ComTurnUnit ( JMM , Lisa ) ;
11418: LD_EXP 1
11422: PPUSH
11423: LD_EXP 4
11427: PPUSH
11428: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11432: LD_EXP 4
11436: PPUSH
11437: LD_STRING D1-Lisa-2
11439: PPUSH
11440: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11444: LD_EXP 1
11448: PPUSH
11449: LD_STRING D1-JMM-3
11451: PPUSH
11452: CALL_OW 88
// end ; if Bobby then
11456: LD_EXP 2
11460: IFFALSE 11500
// begin ComTurnUnit ( JMM , Bobby ) ;
11462: LD_EXP 1
11466: PPUSH
11467: LD_EXP 2
11471: PPUSH
11472: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11476: LD_EXP 2
11480: PPUSH
11481: LD_STRING D1-Bobby-2
11483: PPUSH
11484: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11488: LD_EXP 1
11492: PPUSH
11493: LD_STRING D1-JMM-3
11495: PPUSH
11496: CALL_OW 88
// end ; if Cyrus then
11500: LD_EXP 3
11504: IFFALSE 11544
// begin ComTurnUnit ( JMM , Cyrus ) ;
11506: LD_EXP 1
11510: PPUSH
11511: LD_EXP 3
11515: PPUSH
11516: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11520: LD_EXP 3
11524: PPUSH
11525: LD_STRING D1-Cyrus-2
11527: PPUSH
11528: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11532: LD_EXP 1
11536: PPUSH
11537: LD_STRING D1-JMM-3
11539: PPUSH
11540: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11544: LD_EXP 1
11548: PPUSH
11549: LD_EXP 7
11553: PPUSH
11554: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11558: LD_EXP 1
11562: PPUSH
11563: LD_STRING D1-JMM-3a
11565: PPUSH
11566: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11570: LD_EXP 7
11574: PPUSH
11575: LD_INT 38
11577: PPUSH
11578: LD_INT 5
11580: PPUSH
11581: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11585: LD_EXP 7
11589: PPUSH
11590: LD_EXP 1
11594: PPUSH
11595: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11599: LD_EXP 1
11603: PPUSH
11604: LD_INT 40
11606: PPUSH
11607: LD_INT 7
11609: PPUSH
11610: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11614: LD_EXP 1
11618: PPUSH
11619: LD_EXP 7
11623: PPUSH
11624: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11628: LD_EXP 7
11632: PPUSH
11633: LD_STRING D1-Brown-3
11635: PPUSH
11636: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11640: LD_EXP 14
11644: PPUSH
11645: LD_STRING D1-Har-3
11647: PPUSH
11648: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11652: LD_EXP 1
11656: PPUSH
11657: LD_STRING D1-JMM-4
11659: PPUSH
11660: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11664: LD_EXP 14
11668: PPUSH
11669: LD_STRING D1-Har-4
11671: PPUSH
11672: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11676: LD_EXP 1
11680: PPUSH
11681: LD_STRING D1-JMM-5
11683: PPUSH
11684: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11688: LD_EXP 14
11692: PPUSH
11693: LD_STRING D1-Har-5
11695: PPUSH
11696: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11700: LD_EXP 1
11704: PPUSH
11705: LD_STRING D1-JMM-6
11707: PPUSH
11708: CALL_OW 88
// end ; InGameOff ;
11712: CALL_OW 9
// PrepareRussianConvoy ;
11716: CALL 2830 0 0
// ChangeMissionObjectives ( M1 ) ;
11720: LD_STRING M1
11722: PPUSH
11723: CALL_OW 337
// SaveForQuickRestart ;
11727: CALL_OW 22
// timerStatus = 1 ;
11731: LD_ADDR_EXP 29
11735: PUSH
11736: LD_INT 1
11738: ST_TO_ADDR
// startTimer = 1 ;
11739: LD_ADDR_EXP 30
11743: PUSH
11744: LD_INT 1
11746: ST_TO_ADDR
// bonusAvalaible = 1 ;
11747: LD_ADDR_EXP 42
11751: PUSH
11752: LD_INT 1
11754: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11755: LD_INT 105
11757: PPUSH
11758: CALL_OW 67
// DialogueOn ;
11762: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11766: LD_EXP 12
11770: PPUSH
11771: LD_STRING D9-Mech1-1
11773: PPUSH
11774: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11778: LD_EXP 1
11782: PPUSH
11783: LD_STRING D9-JMM-1
11785: PPUSH
11786: CALL_OW 88
// DialogueOff ;
11790: CALL_OW 7
// end ;
11794: PPOPN 4
11796: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
11797: LD_INT 47
11799: PPUSH
11800: LD_INT 1
11802: PPUSH
11803: CALL_OW 321
11807: PUSH
11808: LD_INT 2
11810: EQUAL
11811: PUSH
11812: LD_INT 22
11814: PUSH
11815: LD_INT 1
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: LD_INT 21
11824: PUSH
11825: LD_INT 3
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 30
11834: PUSH
11835: LD_INT 3
11837: PUSH
11838: EMPTY
11839: LIST
11840: LIST
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: LIST
11846: PPUSH
11847: CALL_OW 69
11851: PUSH
11852: LD_INT 0
11854: GREATER
11855: AND
11856: IFFALSE 12086
11858: GO 11860
11860: DISABLE
// begin if IsOk ( Campell ) then
11861: LD_EXP 12
11865: PPUSH
11866: CALL_OW 302
11870: IFFALSE 11886
// begin Say ( Campell , D10-Mech1-1 ) ;
11872: LD_EXP 12
11876: PPUSH
11877: LD_STRING D10-Mech1-1
11879: PPUSH
11880: CALL_OW 88
// end else
11884: GO 12086
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
11886: LD_INT 22
11888: PUSH
11889: LD_INT 1
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 21
11898: PUSH
11899: LD_INT 1
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 25
11908: PUSH
11909: LD_INT 3
11911: PUSH
11912: EMPTY
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 26
11918: PUSH
11919: LD_INT 1
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: LIST
11930: LIST
11931: PPUSH
11932: CALL_OW 69
11936: PUSH
11937: LD_EXP 1
11941: PUSH
11942: EMPTY
11943: LIST
11944: PUSH
11945: LD_INT 0
11947: GREATER
11948: DIFF
11949: IFFALSE 12023
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
11951: LD_INT 22
11953: PUSH
11954: LD_INT 1
11956: PUSH
11957: EMPTY
11958: LIST
11959: LIST
11960: PUSH
11961: LD_INT 21
11963: PUSH
11964: LD_INT 1
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PUSH
11971: LD_INT 25
11973: PUSH
11974: LD_INT 3
11976: PUSH
11977: EMPTY
11978: LIST
11979: LIST
11980: PUSH
11981: LD_INT 26
11983: PUSH
11984: LD_INT 1
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: PPUSH
11997: CALL_OW 69
12001: PUSH
12002: LD_EXP 1
12006: PUSH
12007: EMPTY
12008: LIST
12009: DIFF
12010: PPUSH
12011: LD_STRING D10-Mech1-1
12013: PPUSH
12014: LD_STRING D10-Mech1-1
12016: PPUSH
12017: CALL 4074 0 3
// end else
12021: GO 12086
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12023: LD_INT 22
12025: PUSH
12026: LD_INT 1
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: PUSH
12033: LD_INT 21
12035: PUSH
12036: LD_INT 1
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: PUSH
12043: LD_INT 26
12045: PUSH
12046: LD_INT 1
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: LD_INT 1
12060: ARRAY
12061: PPUSH
12062: CALL_OW 69
12066: PUSH
12067: LD_EXP 1
12071: PUSH
12072: EMPTY
12073: LIST
12074: DIFF
12075: PPUSH
12076: LD_STRING D10-Mech1-1
12078: PPUSH
12079: LD_STRING D10-Mech1-1
12081: PPUSH
12082: CALL 4074 0 3
// end ; end ; end ;
12086: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12087: LD_INT 22
12089: PUSH
12090: LD_INT 1
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: PUSH
12097: LD_INT 30
12099: PUSH
12100: LD_INT 32
12102: PUSH
12103: EMPTY
12104: LIST
12105: LIST
12106: PUSH
12107: EMPTY
12108: LIST
12109: LIST
12110: PPUSH
12111: CALL_OW 69
12115: PUSH
12116: LD_INT 0
12118: GREATER
12119: PUSH
12120: LD_EXP 32
12124: PUSH
12125: LD_INT 0
12127: EQUAL
12128: AND
12129: IFFALSE 12369
12131: GO 12133
12133: DISABLE
// begin if IsOK ( Claptopn ) then
12134: LD_EXP 11
12138: PPUSH
12139: CALL_OW 302
12143: IFFALSE 12159
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12145: LD_EXP 11
12149: PPUSH
12150: LD_STRING D9b-Eng1-1
12152: PPUSH
12153: CALL_OW 88
// end else
12157: GO 12355
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12159: LD_INT 22
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: PUSH
12169: LD_INT 21
12171: PUSH
12172: LD_INT 1
12174: PUSH
12175: EMPTY
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 25
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 26
12191: PUSH
12192: LD_INT 1
12194: PUSH
12195: EMPTY
12196: LIST
12197: LIST
12198: PUSH
12199: EMPTY
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: PPUSH
12205: CALL_OW 69
12209: PUSH
12210: LD_EXP 1
12214: PUSH
12215: EMPTY
12216: LIST
12217: PUSH
12218: LD_INT 0
12220: GREATER
12221: DIFF
12222: IFFALSE 12296
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12224: LD_INT 22
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: EMPTY
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 21
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 25
12246: PUSH
12247: LD_INT 2
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: PUSH
12254: LD_INT 26
12256: PUSH
12257: LD_INT 1
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: PUSH
12264: EMPTY
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: PPUSH
12270: CALL_OW 69
12274: PUSH
12275: LD_EXP 1
12279: PUSH
12280: EMPTY
12281: LIST
12282: DIFF
12283: PPUSH
12284: LD_STRING D9b-Eng1-1
12286: PPUSH
12287: LD_STRING D9b-Eng1-11
12289: PPUSH
12290: CALL 4074 0 3
// end else
12294: GO 12355
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12296: LD_INT 22
12298: PUSH
12299: LD_INT 1
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: PUSH
12306: LD_INT 21
12308: PUSH
12309: LD_INT 1
12311: PUSH
12312: EMPTY
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 26
12318: PUSH
12319: LD_INT 1
12321: PUSH
12322: EMPTY
12323: LIST
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: PPUSH
12331: CALL_OW 69
12335: PUSH
12336: LD_EXP 1
12340: PUSH
12341: EMPTY
12342: LIST
12343: DIFF
12344: PPUSH
12345: LD_STRING D9b-Eng1-1
12347: PPUSH
12348: LD_STRING D9b-Eng1-1
12350: PPUSH
12351: CALL 4074 0 3
// end ; end ; if energyVDialog = 0 then
12355: LD_EXP 33
12359: PUSH
12360: LD_INT 0
12362: EQUAL
12363: IFFALSE 12369
// EnergyDialog ;
12365: CALL 4565 0 0
// end ;
12369: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12370: LD_EXP 34
12374: PUSH
12375: LD_INT 1
12377: EQUAL
12378: PUSH
12379: LD_EXP 35
12383: PUSH
12384: LD_INT 1
12386: EQUAL
12387: AND
12388: IFFALSE 12400
12390: GO 12392
12392: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12393: LD_STRING M1a
12395: PPUSH
12396: CALL_OW 337
12400: END
// every 3 3$0 do
12401: GO 12403
12403: DISABLE
// begin PrepareFirstAttack ;
12404: CALL 3630 0 0
// end ;
12408: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12409: LD_INT 22
12411: PUSH
12412: LD_INT 5
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: LD_INT 21
12421: PUSH
12422: LD_INT 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: LD_INT 24
12434: PUSH
12435: LD_INT 250
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: PPUSH
12451: CALL_OW 69
12455: PUSH
12456: LD_INT 0
12458: GREATER
12459: PUSH
12460: LD_EXP 23
12464: PUSH
12465: LD_INT 1
12467: EQUAL
12468: AND
12469: IFFALSE 12770
12471: GO 12473
12473: DISABLE
12474: LD_INT 0
12476: PPUSH
// begin firstRussianAttack = 2 ;
12477: LD_ADDR_EXP 23
12481: PUSH
12482: LD_INT 2
12484: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12485: LD_INT 22
12487: PUSH
12488: LD_INT 5
12490: PUSH
12491: EMPTY
12492: LIST
12493: LIST
12494: PUSH
12495: LD_INT 21
12497: PUSH
12498: LD_INT 1
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 69
12513: PPUSH
12514: LD_INT 125
12516: PPUSH
12517: LD_INT 98
12519: PPUSH
12520: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12524: LD_INT 22
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 21
12536: PUSH
12537: LD_INT 1
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: PPUSH
12548: CALL_OW 69
12552: PUSH
12553: LD_EXP 1
12557: PUSH
12558: LD_EXP 7
12562: PUSH
12563: LD_EXP 4
12567: PUSH
12568: EMPTY
12569: LIST
12570: LIST
12571: LIST
12572: DIFF
12573: PPUSH
12574: LD_STRING DAtt1-Sol1-1
12576: PPUSH
12577: LD_STRING DAtt1-FSol1-1
12579: PPUSH
12580: CALL 4074 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12584: LD_EXP 1
12588: PPUSH
12589: LD_STRING DAtt1-JMM-1
12591: PPUSH
12592: CALL_OW 88
// if Lisa then
12596: LD_EXP 4
12600: IFFALSE 12616
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12602: LD_EXP 4
12606: PPUSH
12607: LD_STRING DAtt1a-Lisa-1
12609: PPUSH
12610: CALL_OW 88
// end else
12614: GO 12687
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12616: LD_INT 22
12618: PUSH
12619: LD_INT 1
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PUSH
12626: LD_INT 21
12628: PUSH
12629: LD_INT 1
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: PUSH
12636: LD_INT 26
12638: PUSH
12639: LD_INT 1
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: LIST
12650: PPUSH
12651: CALL_OW 69
12655: PUSH
12656: LD_EXP 1
12660: PUSH
12661: LD_EXP 7
12665: PUSH
12666: LD_EXP 4
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: LIST
12675: DIFF
12676: PPUSH
12677: LD_STRING DAtt1a-Sol1-1
12679: PPUSH
12680: LD_STRING DAtt1-FSol1-1
12682: PPUSH
12683: CALL 4074 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12687: LD_EXP 1
12691: PPUSH
12692: LD_STRING DAtt1a-JMM-1
12694: PPUSH
12695: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12699: LD_INT 22
12701: PUSH
12702: LD_INT 1
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 21
12711: PUSH
12712: LD_INT 1
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 26
12721: PUSH
12722: LD_INT 1
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: PPUSH
12734: CALL_OW 69
12738: PUSH
12739: LD_EXP 1
12743: PUSH
12744: LD_EXP 7
12748: PUSH
12749: LD_EXP 4
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: LIST
12758: DIFF
12759: PPUSH
12760: LD_STRING DAtt1b-Sol1-1
12762: PPUSH
12763: LD_STRING DAtt1a-Sol1-1
12765: PPUSH
12766: CALL 4074 0 3
// end ;
12770: PPOPN 1
12772: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12773: LD_EXP 23
12777: PUSH
12778: LD_INT 2
12780: EQUAL
12781: IFFALSE 12843
12783: GO 12785
12785: DISABLE
12786: LD_INT 0
12788: PPUSH
// begin enable ;
12789: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
12790: LD_ADDR_VAR 0 1
12794: PUSH
12795: LD_INT 5
12797: PPUSH
12798: LD_INT 22
12800: PUSH
12801: LD_INT 5
12803: PUSH
12804: EMPTY
12805: LIST
12806: LIST
12807: PUSH
12808: LD_INT 21
12810: PUSH
12811: LD_INT 1
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: PUSH
12818: EMPTY
12819: LIST
12820: LIST
12821: PPUSH
12822: CALL_OW 70
12826: PUSH
12827: FOR_IN
12828: IFFALSE 12841
// RemoveUnit ( i ) ;
12830: LD_VAR 0 1
12834: PPUSH
12835: CALL_OW 64
12839: GO 12827
12841: POP
12842: POP
// end ;
12843: PPOPN 1
12845: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
12846: LD_INT 22
12848: PUSH
12849: LD_INT 5
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: PPUSH
12859: CALL_OW 69
12863: PUSH
12864: LD_INT 0
12866: EQUAL
12867: PUSH
12868: LD_EXP 23
12872: PUSH
12873: LD_INT 2
12875: EQUAL
12876: AND
12877: IFFALSE 12890
12879: GO 12881
12881: DISABLE
// firstRussianAttack = 3 ;
12882: LD_ADDR_EXP 23
12886: PUSH
12887: LD_INT 3
12889: ST_TO_ADDR
12890: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
12891: LD_EXP 28
12895: PUSH
12896: LD_INT 0
12898: EQUAL
12899: IFFALSE 12980
12901: GO 12903
12903: DISABLE
// begin timerStatus = 4 ;
12904: LD_ADDR_EXP 29
12908: PUSH
12909: LD_INT 4
12911: ST_TO_ADDR
// DialogueOn ;
12912: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
12916: LD_EXP 13
12920: PPUSH
12921: LD_STRING D2-Don-1
12923: PPUSH
12924: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
12928: LD_EXP 1
12932: PPUSH
12933: LD_STRING D2-JMM-1
12935: PPUSH
12936: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
12940: LD_EXP 13
12944: PPUSH
12945: LD_STRING D2-Don-2
12947: PPUSH
12948: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
12952: LD_EXP 1
12956: PPUSH
12957: LD_STRING D2-JMM-2
12959: PPUSH
12960: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
12964: LD_EXP 13
12968: PPUSH
12969: LD_STRING D2-Don-3
12971: PPUSH
12972: CALL_OW 94
// DialogueOff ;
12976: CALL_OW 7
// end ;
12980: END
// every 12 12$0 do var tmp ;
12981: GO 12983
12983: DISABLE
12984: LD_INT 0
12986: PPUSH
// begin PrepareDonaldsonArmy ;
12987: CALL 1023 0 0
// CenterNowOnUnits ( Donaldson ) ;
12991: LD_EXP 13
12995: PPUSH
12996: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13000: LD_ADDR_VAR 0 1
13004: PUSH
13005: LD_INT 22
13007: PUSH
13008: LD_INT 4
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 21
13017: PUSH
13018: LD_INT 1
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 26
13027: PUSH
13028: LD_INT 1
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: PUSH
13035: LD_INT 25
13037: PUSH
13038: LD_INT 1
13040: PUSH
13041: EMPTY
13042: LIST
13043: LIST
13044: PUSH
13045: EMPTY
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: PPUSH
13051: CALL_OW 69
13055: PUSH
13056: LD_EXP 5
13060: PUSH
13061: EMPTY
13062: LIST
13063: DIFF
13064: ST_TO_ADDR
// DialogueOn ;
13065: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13069: LD_VAR 0 1
13073: PPUSH
13074: LD_STRING D3-Sol1-1
13076: PPUSH
13077: LD_STRING D3-Sol1-1
13079: PPUSH
13080: CALL 4074 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13084: LD_INT 22
13086: PUSH
13087: LD_INT 4
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: PUSH
13094: LD_INT 21
13096: PUSH
13097: LD_INT 1
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 26
13106: PUSH
13107: LD_INT 1
13109: PUSH
13110: EMPTY
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 25
13116: PUSH
13117: LD_INT 3
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: PPUSH
13135: LD_STRING D3-Sol2-1
13137: PPUSH
13138: LD_STRING D3-Sol2-1
13140: PPUSH
13141: CALL 4074 0 3
// if Frank then
13145: LD_EXP 5
13149: IFFALSE 13163
// Say ( Frank , D3-Frank-1 ) ;
13151: LD_EXP 5
13155: PPUSH
13156: LD_STRING D3-Frank-1
13158: PPUSH
13159: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13163: LD_EXP 13
13167: PPUSH
13168: LD_STRING D3-Don-1
13170: PPUSH
13171: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13175: LD_EXP 13
13179: PPUSH
13180: LD_STRING D3-Don-1a
13182: PPUSH
13183: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13187: LD_EXP 1
13191: PPUSH
13192: LD_STRING D3-JMM-1
13194: PPUSH
13195: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13199: LD_EXP 13
13203: PPUSH
13204: LD_STRING D3-Don-2
13206: PPUSH
13207: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13211: LD_INT 22
13213: PUSH
13214: LD_INT 6
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PPUSH
13235: CALL_OW 69
13239: PUSH
13240: LD_INT 0
13242: GREATER
13243: IFFALSE 13381
// begin Say ( JMM , D3-JMM-2 ) ;
13245: LD_EXP 1
13249: PPUSH
13250: LD_STRING D3-JMM-2
13252: PPUSH
13253: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13257: LD_EXP 13
13261: PPUSH
13262: LD_STRING D3-Don-3
13264: PPUSH
13265: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13269: LD_EXP 1
13273: PPUSH
13274: LD_STRING D3-JMM-3
13276: PPUSH
13277: CALL_OW 88
// if IsOK ( Frank ) then
13281: LD_EXP 5
13285: PPUSH
13286: CALL_OW 302
13290: IFFALSE 13304
// Say ( Frank , D3-Frank-3 ) ;
13292: LD_EXP 5
13296: PPUSH
13297: LD_STRING D3-Frank-3
13299: PPUSH
13300: CALL_OW 88
// DialogueOff ;
13304: CALL_OW 7
// if IsOK ( Frank ) then
13308: LD_EXP 5
13312: PPUSH
13313: CALL_OW 302
13317: IFFALSE 13379
// begin SetSide ( Frank , 0 ) ;
13319: LD_EXP 5
13323: PPUSH
13324: LD_INT 0
13326: PPUSH
13327: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13331: LD_EXP 5
13335: PPUSH
13336: LD_INT 12
13338: PPUSH
13339: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13343: LD_EXP 5
13347: PPUSH
13348: LD_STRING Frank
13350: PPUSH
13351: CALL_OW 38
// Wait ( 0 0$3 ) ;
13355: LD_INT 105
13357: PPUSH
13358: CALL_OW 67
// frankScoutBase = 1 ;
13362: LD_ADDR_EXP 25
13366: PUSH
13367: LD_INT 1
13369: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13370: LD_EXP 5
13374: PPUSH
13375: CALL_OW 64
// end ; end else
13379: GO 13468
// begin Say ( JMM , D3-JMM-4 ) ;
13381: LD_EXP 1
13385: PPUSH
13386: LD_STRING D3-JMM-4
13388: PPUSH
13389: CALL_OW 88
// DialogueOff ;
13393: CALL_OW 7
// if IsOK ( Frank ) then
13397: LD_EXP 5
13401: PPUSH
13402: CALL_OW 302
13406: IFFALSE 13468
// begin SetSide ( Frank , 0 ) ;
13408: LD_EXP 5
13412: PPUSH
13413: LD_INT 0
13415: PPUSH
13416: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13420: LD_EXP 5
13424: PPUSH
13425: LD_INT 12
13427: PPUSH
13428: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13432: LD_EXP 5
13436: PPUSH
13437: LD_STRING Frank
13439: PPUSH
13440: CALL_OW 38
// Wait ( 0 0$3 ) ;
13444: LD_INT 105
13446: PPUSH
13447: CALL_OW 67
// frankScoutBase = 1 ;
13451: LD_ADDR_EXP 25
13455: PUSH
13456: LD_INT 1
13458: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13459: LD_EXP 5
13463: PPUSH
13464: CALL_OW 64
// end ; end ; end ;
13468: PPOPN 1
13470: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13471: LD_EXP 13
13475: PPUSH
13476: CALL_OW 255
13480: PUSH
13481: LD_INT 4
13483: EQUAL
13484: PUSH
13485: LD_EXP 13
13489: PPUSH
13490: CALL_OW 302
13494: AND
13495: IFFALSE 13520
13497: GO 13499
13499: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13500: LD_EXP 13
13504: PPUSH
13505: LD_STRING D3b-Don-1
13507: PPUSH
13508: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13512: LD_ADDR_EXP 41
13516: PUSH
13517: LD_INT 1
13519: ST_TO_ADDR
// end ;
13520: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13521: LD_EXP 24
13525: PUSH
13526: LD_INT 0
13528: EQUAL
13529: IFFALSE 13685
13531: GO 13533
13533: DISABLE
13534: LD_INT 0
13536: PPUSH
13537: PPUSH
// begin enable ;
13538: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13539: LD_ADDR_VAR 0 1
13543: PUSH
13544: LD_INT 22
13546: PUSH
13547: LD_INT 4
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 21
13556: PUSH
13557: LD_INT 1
13559: PUSH
13560: EMPTY
13561: LIST
13562: LIST
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PPUSH
13568: CALL_OW 69
13572: PUSH
13573: FOR_IN
13574: IFFALSE 13683
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13576: LD_ADDR_VAR 0 2
13580: PUSH
13581: LD_INT 22
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: PUSH
13591: LD_INT 21
13593: PUSH
13594: LD_INT 1
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: PPUSH
13605: CALL_OW 69
13609: PUSH
13610: FOR_IN
13611: IFFALSE 13679
// begin if GetDistUnits ( i , j ) < 7 then
13613: LD_VAR 0 1
13617: PPUSH
13618: LD_VAR 0 2
13622: PPUSH
13623: CALL_OW 296
13627: PUSH
13628: LD_INT 7
13630: LESS
13631: IFFALSE 13677
// begin saveDonaldson = 1 ;
13633: LD_ADDR_EXP 24
13637: PUSH
13638: LD_INT 1
13640: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13641: LD_INT 22
13643: PUSH
13644: LD_INT 4
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 21
13653: PUSH
13654: LD_INT 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PPUSH
13665: CALL_OW 69
13669: PPUSH
13670: LD_INT 1
13672: PPUSH
13673: CALL_OW 235
// end ; end ;
13677: GO 13610
13679: POP
13680: POP
// end ;
13681: GO 13573
13683: POP
13684: POP
// end ;
13685: PPOPN 2
13687: END
// every 2 2$0 trigger saveDonaldson = 1 do
13688: LD_EXP 24
13692: PUSH
13693: LD_INT 1
13695: EQUAL
13696: IFFALSE 13999
13698: GO 13700
13700: DISABLE
// begin uc_side = 4 ;
13701: LD_ADDR_OWVAR 20
13705: PUSH
13706: LD_INT 4
13708: ST_TO_ADDR
// uc_nation = 1 ;
13709: LD_ADDR_OWVAR 21
13713: PUSH
13714: LD_INT 1
13716: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
13717: LD_ADDR_EXP 5
13721: PUSH
13722: LD_STRING Frank
13724: PPUSH
13725: CALL_OW 34
13729: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13730: LD_EXP 5
13734: PPUSH
13735: LD_INT 13
13737: PPUSH
13738: LD_INT 0
13740: PPUSH
13741: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13745: LD_INT 35
13747: PPUSH
13748: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13752: LD_EXP 1
13756: PPUSH
13757: CALL_OW 310
13761: NOT
13762: PUSH
13763: LD_EXP 1
13767: PPUSH
13768: LD_INT 4
13770: PPUSH
13771: CALL_OW 296
13775: PUSH
13776: LD_INT 20
13778: LESS
13779: AND
13780: IFFALSE 13813
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
13782: LD_EXP 5
13786: PPUSH
13787: LD_EXP 1
13791: PPUSH
13792: CALL_OW 250
13796: PPUSH
13797: LD_EXP 1
13801: PPUSH
13802: CALL_OW 251
13806: PPUSH
13807: CALL_OW 111
13811: GO 13828
// ComMoveXY ( Frank , 51 , 15 ) ;
13813: LD_EXP 5
13817: PPUSH
13818: LD_INT 51
13820: PPUSH
13821: LD_INT 15
13823: PPUSH
13824: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
13828: LD_EXP 5
13832: PPUSH
13833: LD_EXP 1
13837: PPUSH
13838: CALL_OW 296
13842: PUSH
13843: LD_INT 10
13845: LESS
13846: IFFALSE 13745
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
13848: LD_EXP 1
13852: PUSH
13853: LD_EXP 5
13857: PUSH
13858: EMPTY
13859: LIST
13860: LIST
13861: PPUSH
13862: CALL_OW 87
// DialogueOn ;
13866: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
13870: LD_EXP 5
13874: PPUSH
13875: LD_STRING D3a-Frank-1
13877: PPUSH
13878: CALL_OW 88
// if Lisa then
13882: LD_EXP 4
13886: IFFALSE 13936
// begin Say ( Lisa , D3a-Lisa-1 ) ;
13888: LD_EXP 4
13892: PPUSH
13893: LD_STRING D3a-Lisa-1
13895: PPUSH
13896: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
13900: LD_EXP 5
13904: PPUSH
13905: LD_STRING D3a-Frank-2
13907: PPUSH
13908: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
13912: LD_EXP 4
13916: PPUSH
13917: LD_STRING D3a-Lisa-2
13919: PPUSH
13920: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
13924: LD_EXP 5
13928: PPUSH
13929: LD_STRING D3a-Frank-3
13931: PPUSH
13932: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
13936: LD_EXP 1
13940: PPUSH
13941: LD_STRING D3a-JMM-3
13943: PPUSH
13944: CALL_OW 88
// DialogueOff ;
13948: CALL_OW 7
// SetSide ( Frank , 1 ) ;
13952: LD_EXP 5
13956: PPUSH
13957: LD_INT 1
13959: PPUSH
13960: CALL_OW 235
// InGameOn ;
13964: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
13968: LD_INT 1
13970: PPUSH
13971: LD_INT 7
13973: PPUSH
13974: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
13978: LD_INT 93
13980: PPUSH
13981: LD_INT 91
13983: PPUSH
13984: CALL_OW 84
// wait ( 0 0$5 ) ;
13988: LD_INT 175
13990: PPUSH
13991: CALL_OW 67
// InGameOff ;
13995: CALL_OW 9
// end ;
13999: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14000: LD_OWVAR 67
14004: PUSH
14005: LD_INT 2
14007: EQUAL
14008: PUSH
14009: LD_OWVAR 67
14013: PUSH
14014: LD_INT 3
14016: EQUAL
14017: OR
14018: IFFALSE 14042
14020: GO 14022
14022: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14023: LD_INT 24
14025: PPUSH
14026: LD_INT 24
14028: PPUSH
14029: LD_INT 1
14031: PPUSH
14032: LD_INT 1
14034: PPUSH
14035: LD_INT 53
14037: PPUSH
14038: CALL_OW 125
14042: END
// every 18 18$0 do
14043: GO 14045
14045: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14046: LD_EXP 14
14050: PPUSH
14051: LD_STRING D4-Har-1
14053: PPUSH
14054: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14058: LD_EXP 1
14062: PPUSH
14063: LD_STRING D4-JMM-1
14065: PPUSH
14066: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14070: LD_EXP 14
14074: PPUSH
14075: LD_STRING D4-Har-2
14077: PPUSH
14078: CALL_OW 94
// case query ( Q1 ) of 1 :
14082: LD_STRING Q1
14084: PPUSH
14085: CALL_OW 97
14089: PUSH
14090: LD_INT 1
14092: DOUBLE
14093: EQUAL
14094: IFTRUE 14098
14096: GO 14157
14098: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14099: LD_EXP 1
14103: PPUSH
14104: LD_STRING D5-JMM-1
14106: PPUSH
14107: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14111: LD_EXP 14
14115: PPUSH
14116: LD_STRING D5-Har-1
14118: PPUSH
14119: CALL_OW 94
// timeToSupport = 10 10$0 ;
14123: LD_ADDR_EXP 28
14127: PUSH
14128: LD_INT 21000
14130: ST_TO_ADDR
// timerStatus = 2 ;
14131: LD_ADDR_EXP 29
14135: PUSH
14136: LD_INT 2
14138: ST_TO_ADDR
// startTimer = 1 ;
14139: LD_ADDR_EXP 30
14143: PUSH
14144: LD_INT 1
14146: ST_TO_ADDR
// harrAnswer = 1 ;
14147: LD_ADDR_EXP 26
14151: PUSH
14152: LD_INT 1
14154: ST_TO_ADDR
// end ; 2 :
14155: GO 14292
14157: LD_INT 2
14159: DOUBLE
14160: EQUAL
14161: IFTRUE 14165
14163: GO 14224
14165: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14166: LD_EXP 1
14170: PPUSH
14171: LD_STRING D5-JMM-2
14173: PPUSH
14174: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14178: LD_EXP 14
14182: PPUSH
14183: LD_STRING D5-Har-2
14185: PPUSH
14186: CALL_OW 94
// timeToSupport = 5 5$0 ;
14190: LD_ADDR_EXP 28
14194: PUSH
14195: LD_INT 10500
14197: ST_TO_ADDR
// timerStatus = 2 ;
14198: LD_ADDR_EXP 29
14202: PUSH
14203: LD_INT 2
14205: ST_TO_ADDR
// startTimer = 1 ;
14206: LD_ADDR_EXP 30
14210: PUSH
14211: LD_INT 1
14213: ST_TO_ADDR
// harrAnswer = 2 ;
14214: LD_ADDR_EXP 26
14218: PUSH
14219: LD_INT 2
14221: ST_TO_ADDR
// end ; 3 :
14222: GO 14292
14224: LD_INT 3
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14291
14232: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14233: LD_EXP 1
14237: PPUSH
14238: LD_STRING D5-JMM-3
14240: PPUSH
14241: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14245: LD_EXP 14
14249: PPUSH
14250: LD_STRING D5-Har-3
14252: PPUSH
14253: CALL_OW 94
// timeToSupport = 5 5$0 ;
14257: LD_ADDR_EXP 28
14261: PUSH
14262: LD_INT 10500
14264: ST_TO_ADDR
// timerStatus = 2 ;
14265: LD_ADDR_EXP 29
14269: PUSH
14270: LD_INT 2
14272: ST_TO_ADDR
// startTimer = 1 ;
14273: LD_ADDR_EXP 30
14277: PUSH
14278: LD_INT 1
14280: ST_TO_ADDR
// harrAnswer = 3 ;
14281: LD_ADDR_EXP 26
14285: PUSH
14286: LD_INT 3
14288: ST_TO_ADDR
// end ; end ;
14289: GO 14292
14291: POP
// end ;
14292: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14293: LD_EXP 29
14297: PUSH
14298: LD_INT 2
14300: EQUAL
14301: PUSH
14302: LD_EXP 28
14306: PUSH
14307: LD_INT 0
14309: EQUAL
14310: AND
14311: IFFALSE 14588
14313: GO 14315
14315: DISABLE
// begin timerStatus = 4 ;
14316: LD_ADDR_EXP 29
14320: PUSH
14321: LD_INT 4
14323: ST_TO_ADDR
// if harrAnswer = 1 then
14324: LD_EXP 26
14328: PUSH
14329: LD_INT 1
14331: EQUAL
14332: IFFALSE 14412
// begin PrepareHarrisonSupport ( 3 ) ;
14334: LD_INT 3
14336: PPUSH
14337: CALL 1587 0 1
// wait ( 1 1$0 ) ;
14341: LD_INT 2100
14343: PPUSH
14344: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14348: LD_EXP 14
14352: PPUSH
14353: LD_STRING D7-Har-1
14355: PPUSH
14356: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14360: LD_STRING M2
14362: PPUSH
14363: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14367: LD_ADDR_EXP 27
14371: PUSH
14372: LD_INT 31500
14374: PUSH
14375: LD_INT 10500
14377: PUSH
14378: LD_INT 8400
14380: PUSH
14381: LD_INT 6300
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: LD_OWVAR 67
14393: ARRAY
14394: PLUS
14395: ST_TO_ADDR
// startTimer = 1 ;
14396: LD_ADDR_EXP 30
14400: PUSH
14401: LD_INT 1
14403: ST_TO_ADDR
// timerStatus = 3 ;
14404: LD_ADDR_EXP 29
14408: PUSH
14409: LD_INT 3
14411: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14412: LD_EXP 26
14416: PUSH
14417: LD_INT 2
14419: EQUAL
14420: IFFALSE 14500
// begin PrepareHarrisonSupport ( 4 ) ;
14422: LD_INT 4
14424: PPUSH
14425: CALL 1587 0 1
// wait ( 1 1$0 ) ;
14429: LD_INT 2100
14431: PPUSH
14432: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14436: LD_EXP 14
14440: PPUSH
14441: LD_STRING D7-Har-1
14443: PPUSH
14444: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14448: LD_STRING M2
14450: PPUSH
14451: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14455: LD_ADDR_EXP 27
14459: PUSH
14460: LD_INT 27300
14462: PUSH
14463: LD_INT 8400
14465: PUSH
14466: LD_INT 8400
14468: PUSH
14469: LD_INT 6300
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: LIST
14476: PUSH
14477: LD_OWVAR 67
14481: ARRAY
14482: PLUS
14483: ST_TO_ADDR
// startTimer = 1 ;
14484: LD_ADDR_EXP 30
14488: PUSH
14489: LD_INT 1
14491: ST_TO_ADDR
// timerStatus = 3 ;
14492: LD_ADDR_EXP 29
14496: PUSH
14497: LD_INT 3
14499: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14500: LD_EXP 26
14504: PUSH
14505: LD_INT 3
14507: EQUAL
14508: IFFALSE 14588
// begin PrepareHarrisonSupport ( 5 ) ;
14510: LD_INT 5
14512: PPUSH
14513: CALL 1587 0 1
// wait ( 1 1$0 ) ;
14517: LD_INT 2100
14519: PPUSH
14520: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14524: LD_EXP 14
14528: PPUSH
14529: LD_STRING D7-Har-1
14531: PPUSH
14532: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14536: LD_STRING M2
14538: PPUSH
14539: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14543: LD_ADDR_EXP 27
14547: PUSH
14548: LD_INT 21000
14550: PUSH
14551: LD_INT 8400
14553: PUSH
14554: LD_INT 6300
14556: PUSH
14557: LD_INT 4200
14559: PUSH
14560: EMPTY
14561: LIST
14562: LIST
14563: LIST
14564: PUSH
14565: LD_OWVAR 67
14569: ARRAY
14570: PLUS
14571: ST_TO_ADDR
// startTimer = 1 ;
14572: LD_ADDR_EXP 30
14576: PUSH
14577: LD_INT 1
14579: ST_TO_ADDR
// timerStatus = 3 ;
14580: LD_ADDR_EXP 29
14584: PUSH
14585: LD_INT 3
14587: ST_TO_ADDR
// end ; end ;
14588: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14589: LD_EXP 27
14593: PUSH
14594: LD_INT 8400
14596: LESSEQUAL
14597: PUSH
14598: LD_EXP 29
14602: PUSH
14603: LD_INT 3
14605: EQUAL
14606: AND
14607: IFFALSE 14639
14609: GO 14611
14611: DISABLE
// begin DialogueOn ;
14612: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14616: LD_EXP 14
14620: PPUSH
14621: LD_STRING D7a-Har-1
14623: PPUSH
14624: CALL_OW 94
// DialogueOff ;
14628: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14632: LD_STRING M2a
14634: PPUSH
14635: CALL_OW 337
// end ;
14639: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14640: LD_EXP 27
14644: PUSH
14645: LD_INT 0
14647: LESSEQUAL
14648: PUSH
14649: LD_EXP 29
14653: PUSH
14654: LD_INT 3
14656: EQUAL
14657: AND
14658: PUSH
14659: LD_EXP 40
14663: NOT
14664: AND
14665: IFFALSE 14804
14667: GO 14669
14669: DISABLE
14670: LD_INT 0
14672: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14673: LD_ADDR_VAR 0 1
14677: PUSH
14678: LD_INT 22
14680: PUSH
14681: LD_INT 1
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PPUSH
14688: CALL_OW 69
14692: PUSH
14693: LD_EXP 1
14697: PUSH
14698: EMPTY
14699: LIST
14700: DIFF
14701: ST_TO_ADDR
// saveDonaldson = 2 ;
14702: LD_ADDR_EXP 24
14706: PUSH
14707: LD_INT 2
14709: ST_TO_ADDR
// DialogueOn ;
14710: CALL_OW 6
// if IsOK ( Donaldson ) then
14714: LD_EXP 13
14718: PPUSH
14719: CALL_OW 302
14723: IFFALSE 14739
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14725: LD_EXP 14
14729: PPUSH
14730: LD_STRING D8-Har-1
14732: PPUSH
14733: CALL_OW 94
// end else
14737: GO 14751
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14739: LD_EXP 14
14743: PPUSH
14744: LD_STRING D8-Har-1a
14746: PPUSH
14747: CALL_OW 94
// end ; DialogueOff ;
14751: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14755: LD_VAR 0 1
14759: PPUSH
14760: LD_INT 4
14762: PPUSH
14763: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14767: LD_VAR 0 1
14771: PPUSH
14772: LD_INT 88
14774: PPUSH
14775: LD_INT 89
14777: PPUSH
14778: CALL_OW 114
// honor = 0 ;
14782: LD_ADDR_EXP 39
14786: PUSH
14787: LD_INT 0
14789: ST_TO_ADDR
// wait ( 0 0$10 ) ;
14790: LD_INT 350
14792: PPUSH
14793: CALL_OW 67
// YouLost ( LostCommand ) ;
14797: LD_STRING LostCommand
14799: PPUSH
14800: CALL_OW 104
// end ;
14804: PPOPN 1
14806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
14807: LD_INT 22
14809: PUSH
14810: LD_INT 6
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 21
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PPUSH
14831: CALL_OW 69
14835: PUSH
14836: LD_INT 0
14838: EQUAL
14839: PUSH
14840: LD_EXP 20
14844: PUSH
14845: LD_INT 0
14847: EQUAL
14848: AND
14849: PUSH
14850: LD_EXP 42
14854: PUSH
14855: LD_INT 1
14857: EQUAL
14858: AND
14859: IFFALSE 14953
14861: GO 14863
14863: DISABLE
14864: LD_INT 0
14866: PPUSH
14867: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
14868: LD_ADDR_VAR 0 2
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 1
14878: PUSH
14879: EMPTY
14880: LIST
14881: LIST
14882: PUSH
14883: LD_INT 21
14885: PUSH
14886: LD_INT 1
14888: PUSH
14889: EMPTY
14890: LIST
14891: LIST
14892: PUSH
14893: LD_INT 23
14895: PUSH
14896: LD_INT 1
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: LIST
14907: PPUSH
14908: CALL_OW 69
14912: ST_TO_ADDR
// for i in tmp do
14913: LD_ADDR_VAR 0 1
14917: PUSH
14918: LD_VAR 0 2
14922: PUSH
14923: FOR_IN
14924: IFFALSE 14951
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
14926: LD_VAR 0 1
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: LD_INT 4
14936: PPUSH
14937: CALL_OW 12
14941: PPUSH
14942: LD_INT 500
14944: PPUSH
14945: CALL_OW 492
// end ;
14949: GO 14923
14951: POP
14952: POP
// end ; end_of_file
14953: PPOPN 2
14955: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
14956: GO 14958
14958: DISABLE
14959: LD_INT 0
14961: PPUSH
// begin enemyWayX = [ ] ;
14962: LD_ADDR_EXP 46
14966: PUSH
14967: EMPTY
14968: ST_TO_ADDR
// enemyWayY = [ ] ;
14969: LD_ADDR_EXP 47
14973: PUSH
14974: EMPTY
14975: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
14976: LD_ADDR_VAR 0 1
14980: PUSH
14981: LD_INT 1
14983: PPUSH
14984: LD_INT 3
14986: PPUSH
14987: CALL_OW 12
14991: ST_TO_ADDR
// if rnd = 1 then
14992: LD_VAR 0 1
14996: PUSH
14997: LD_INT 1
14999: EQUAL
15000: IFFALSE 15040
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15002: LD_ADDR_EXP 46
15006: PUSH
15007: LD_INT 73
15009: PUSH
15010: LD_INT 46
15012: PUSH
15013: LD_INT 29
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15021: LD_ADDR_EXP 47
15025: PUSH
15026: LD_INT 71
15028: PUSH
15029: LD_INT 43
15031: PUSH
15032: LD_INT 29
15034: PUSH
15035: EMPTY
15036: LIST
15037: LIST
15038: LIST
15039: ST_TO_ADDR
// end ; if rnd = 2 then
15040: LD_VAR 0 1
15044: PUSH
15045: LD_INT 2
15047: EQUAL
15048: IFFALSE 15072
// begin enemyWayX = [ 64 ] ;
15050: LD_ADDR_EXP 46
15054: PUSH
15055: LD_INT 64
15057: PUSH
15058: EMPTY
15059: LIST
15060: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15061: LD_ADDR_EXP 47
15065: PUSH
15066: LD_INT 43
15068: PUSH
15069: EMPTY
15070: LIST
15071: ST_TO_ADDR
// end ; if rnd = 3 then
15072: LD_VAR 0 1
15076: PUSH
15077: LD_INT 3
15079: EQUAL
15080: IFFALSE 15104
// begin enemyWayX = [ 80 ] ;
15082: LD_ADDR_EXP 46
15086: PUSH
15087: LD_INT 80
15089: PUSH
15090: EMPTY
15091: LIST
15092: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15093: LD_ADDR_EXP 47
15097: PUSH
15098: LD_INT 28
15100: PUSH
15101: EMPTY
15102: LIST
15103: ST_TO_ADDR
// end ; enable ;
15104: ENABLE
// end ;
15105: PPOPN 1
15107: END
// every 0 0$1 trigger AIEnable = 1 do
15108: LD_EXP 37
15112: PUSH
15113: LD_INT 1
15115: EQUAL
15116: IFFALSE 15230
15118: GO 15120
15120: DISABLE
// begin enable ;
15121: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15122: LD_INT 3
15124: PPUSH
15125: LD_INT 21
15127: PPUSH
15128: LD_INT 7
15130: PPUSH
15131: CALL 5598 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15135: LD_INT 3
15137: PPUSH
15138: LD_INT 8
15140: PPUSH
15141: LD_INT 7
15143: PPUSH
15144: LD_INT 1
15146: PPUSH
15147: CALL 5919 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15151: LD_INT 3
15153: PPUSH
15154: LD_INT 17
15156: PPUSH
15157: LD_INT 108
15159: PPUSH
15160: LD_INT 95
15162: PPUSH
15163: CALL 7163 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15167: LD_INT 3
15169: PPUSH
15170: LD_INT 23
15172: PPUSH
15173: LD_EXP 46
15177: PPUSH
15178: LD_EXP 47
15182: PPUSH
15183: CALL 6575 0 4
// if baseReadyToBuild = 2 then
15187: LD_EXP 20
15191: PUSH
15192: LD_INT 2
15194: EQUAL
15195: IFFALSE 15230
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15197: LD_INT 6
15199: PPUSH
15200: LD_EXP 21
15204: PPUSH
15205: LD_INT 6
15207: PPUSH
15208: CALL 5598 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15212: LD_INT 6
15214: PPUSH
15215: LD_INT 9
15217: PPUSH
15218: LD_INT 6
15220: PPUSH
15221: LD_EXP 22
15225: PPUSH
15226: CALL 5919 0 4
// end ; end ;
15230: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15231: LD_EXP 15
15235: PPUSH
15236: CALL_OW 310
15240: NOT
15241: PUSH
15242: LD_INT 21
15244: PPUSH
15245: CALL_OW 302
15249: AND
15250: PUSH
15251: LD_INT 21
15253: PPUSH
15254: CALL_OW 255
15258: PUSH
15259: LD_INT 3
15261: EQUAL
15262: AND
15263: IFFALSE 15281
15265: GO 15267
15267: DISABLE
// begin enable ;
15268: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15269: LD_EXP 15
15273: PPUSH
15274: LD_INT 21
15276: PPUSH
15277: CALL_OW 120
// end ;
15281: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15282: LD_INT 22
15284: PUSH
15285: LD_INT 3
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: PUSH
15292: LD_INT 21
15294: PUSH
15295: LD_INT 2
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: PUSH
15302: LD_INT 55
15304: PUSH
15305: EMPTY
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: PPUSH
15313: CALL_OW 69
15317: PUSH
15318: LD_INT 0
15320: EQUAL
15321: PUSH
15322: LD_INT 1
15324: PPUSH
15325: CALL_OW 255
15329: PUSH
15330: LD_INT 3
15332: EQUAL
15333: AND
15334: PUSH
15335: LD_INT 21
15337: PPUSH
15338: CALL_OW 302
15342: AND
15343: PUSH
15344: LD_INT 21
15346: PPUSH
15347: CALL_OW 255
15351: PUSH
15352: LD_INT 3
15354: EQUAL
15355: AND
15356: PUSH
15357: LD_INT 21
15359: PPUSH
15360: CALL_OW 302
15364: AND
15365: IFFALSE 15570
15367: GO 15369
15369: DISABLE
// begin enable ;
15370: ENABLE
// if Difficulty = 1 then
15371: LD_OWVAR 67
15375: PUSH
15376: LD_INT 1
15378: EQUAL
15379: IFFALSE 15423
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15381: LD_INT 3
15383: PPUSH
15384: LD_INT 24
15386: PPUSH
15387: LD_OWVAR 67
15391: PUSH
15392: LD_INT 2
15394: PLUS
15395: PPUSH
15396: LD_INT 42
15398: PUSH
15399: LD_INT 42
15401: PUSH
15402: LD_INT 43
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: PPUSH
15410: LD_INT 1
15412: PPUSH
15413: LD_INT 1
15415: PPUSH
15416: LD_INT 21
15418: PPUSH
15419: CALL 6463 0 7
// if Difficulty = 2 then
15423: LD_OWVAR 67
15427: PUSH
15428: LD_INT 2
15430: EQUAL
15431: IFFALSE 15498
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15433: LD_INT 3
15435: PPUSH
15436: LD_INT 24
15438: PPUSH
15439: LD_OWVAR 67
15443: PUSH
15444: LD_INT 2
15446: PLUS
15447: PPUSH
15448: LD_INT 42
15450: PUSH
15451: LD_INT 42
15453: PUSH
15454: LD_INT 43
15456: PUSH
15457: LD_INT 43
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: PPUSH
15466: LD_INT 1
15468: PPUSH
15469: LD_INT 1
15471: PPUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: EMPTY
15479: LIST
15480: LIST
15481: PUSH
15482: LD_INT 1
15484: PPUSH
15485: LD_INT 2
15487: PPUSH
15488: CALL_OW 12
15492: ARRAY
15493: PPUSH
15494: CALL 6463 0 7
// if Difficulty = 3 then
15498: LD_OWVAR 67
15502: PUSH
15503: LD_INT 3
15505: EQUAL
15506: IFFALSE 15570
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15508: LD_INT 3
15510: PPUSH
15511: LD_INT 24
15513: PPUSH
15514: LD_OWVAR 67
15518: PUSH
15519: LD_INT 2
15521: PPUSH
15522: LD_INT 3
15524: PPUSH
15525: CALL_OW 12
15529: PLUS
15530: PPUSH
15531: LD_INT 43
15533: PUSH
15534: LD_INT 43
15536: PUSH
15537: LD_INT 43
15539: PUSH
15540: LD_INT 43
15542: PUSH
15543: LD_INT 44
15545: PUSH
15546: LD_INT 44
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PPUSH
15557: LD_INT 1
15559: PPUSH
15560: LD_INT 1
15562: PPUSH
15563: LD_INT 22
15565: PPUSH
15566: CALL 6463 0 7
// end ;
15570: END
// every 0 0$1 do
15571: GO 15573
15573: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15574: LD_INT 3
15576: PPUSH
15577: LD_INT 1
15579: PPUSH
15580: LD_INT 3
15582: PPUSH
15583: CALL 5513 0 3
15587: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15588: LD_EXP 20
15592: PUSH
15593: LD_INT 1
15595: EQUAL
15596: IFFALSE 15743
15598: GO 15600
15600: DISABLE
15601: LD_INT 0
15603: PPUSH
15604: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15605: LD_ADDR_VAR 0 2
15609: PUSH
15610: LD_INT 22
15612: PUSH
15613: LD_INT 6
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: PUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 2
15625: PUSH
15626: EMPTY
15627: LIST
15628: LIST
15629: PUSH
15630: LD_INT 34
15632: PUSH
15633: LD_INT 51
15635: PUSH
15636: EMPTY
15637: LIST
15638: LIST
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: LIST
15644: PPUSH
15645: CALL_OW 69
15649: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15650: LD_VAR 0 2
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: LD_EXP 21
15663: PPUSH
15664: CALL_OW 250
15668: PUSH
15669: LD_INT 5
15671: MINUS
15672: PPUSH
15673: LD_EXP 21
15677: PPUSH
15678: CALL_OW 251
15682: PUSH
15683: LD_INT 5
15685: MINUS
15686: PPUSH
15687: CALL_OW 111
// wait ( 0 0$5 ) ;
15691: LD_INT 175
15693: PPUSH
15694: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15698: LD_VAR 0 2
15702: PUSH
15703: LD_INT 1
15705: ARRAY
15706: PPUSH
15707: LD_INT 41
15709: PPUSH
15710: LD_INT 52
15712: PPUSH
15713: CALL_OW 177
// wait ( 0 0$40 ) ;
15717: LD_INT 1400
15719: PPUSH
15720: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15724: LD_VAR 0 2
15728: PUSH
15729: LD_INT 1
15731: ARRAY
15732: PPUSH
15733: LD_INT 41
15735: PPUSH
15736: LD_INT 44
15738: PPUSH
15739: CALL_OW 111
// end ;
15743: PPOPN 2
15745: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15746: LD_EXP 21
15750: PPUSH
15751: CALL_OW 274
15755: PPUSH
15756: LD_INT 1
15758: PPUSH
15759: CALL_OW 275
15763: PUSH
15764: LD_INT 100
15766: GREATEREQUAL
15767: IFFALSE 15995
15769: GO 15771
15771: DISABLE
15772: LD_INT 0
15774: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15775: LD_ADDR_VAR 0 1
15779: PUSH
15780: LD_INT 22
15782: PUSH
15783: LD_INT 6
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 21
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 25
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: CALL_OW 69
15819: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
15820: LD_VAR 0 1
15824: PUSH
15825: LD_INT 1
15827: ARRAY
15828: PPUSH
15829: LD_INT 4
15831: PPUSH
15832: LD_INT 39
15834: PPUSH
15835: LD_INT 37
15837: PPUSH
15838: LD_INT 3
15840: PPUSH
15841: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
15845: LD_VAR 0 1
15849: PUSH
15850: LD_INT 1
15852: ARRAY
15853: PPUSH
15854: LD_INT 29
15856: PPUSH
15857: LD_INT 42
15859: PPUSH
15860: LD_INT 54
15862: PPUSH
15863: LD_INT 3
15865: PPUSH
15866: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
15870: LD_VAR 0 1
15874: PUSH
15875: LD_INT 1
15877: ARRAY
15878: PPUSH
15879: LD_INT 6
15881: PPUSH
15882: LD_INT 38
15884: PPUSH
15885: LD_INT 48
15887: PPUSH
15888: LD_INT 0
15890: PPUSH
15891: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
15895: LD_VAR 0 1
15899: PUSH
15900: LD_INT 1
15902: ARRAY
15903: PPUSH
15904: LD_INT 2
15906: PPUSH
15907: LD_INT 32
15909: PPUSH
15910: LD_INT 38
15912: PPUSH
15913: LD_INT 2
15915: PPUSH
15916: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
15920: LD_VAR 0 1
15924: PUSH
15925: LD_INT 1
15927: ARRAY
15928: PPUSH
15929: LD_INT 26
15931: PPUSH
15932: LD_INT 39
15934: PPUSH
15935: LD_INT 55
15937: PPUSH
15938: LD_INT 3
15940: PPUSH
15941: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
15945: LD_VAR 0 1
15949: PUSH
15950: LD_INT 1
15952: ARRAY
15953: PPUSH
15954: LD_INT 32
15956: PPUSH
15957: LD_INT 31
15959: PPUSH
15960: LD_INT 31
15962: PPUSH
15963: LD_INT 3
15965: PPUSH
15966: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
15970: LD_VAR 0 1
15974: PUSH
15975: LD_INT 1
15977: ARRAY
15978: PPUSH
15979: LD_INT 31
15981: PPUSH
15982: LD_INT 50
15984: PPUSH
15985: LD_INT 51
15987: PPUSH
15988: LD_INT 4
15990: PPUSH
15991: CALL_OW 205
// end ; end_of_file
15995: PPOPN 1
15997: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
15998: LD_INT 0
16000: PPUSH
16001: PPUSH
16002: PPUSH
16003: PPUSH
16004: PPUSH
16005: PPUSH
16006: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16007: LD_ADDR_VAR 0 3
16011: PUSH
16012: LD_INT 22
16014: PUSH
16015: LD_INT 6
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 21
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: EMPTY
16029: LIST
16030: LIST
16031: PUSH
16032: LD_INT 25
16034: PUSH
16035: LD_INT 1
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: PUSH
16042: LD_INT 3
16044: PUSH
16045: LD_INT 54
16047: PUSH
16048: EMPTY
16049: LIST
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: EMPTY
16056: LIST
16057: LIST
16058: LIST
16059: LIST
16060: PPUSH
16061: CALL_OW 69
16065: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16066: LD_ADDR_VAR 0 7
16070: PUSH
16071: LD_INT 22
16073: PUSH
16074: LD_INT 6
16076: PUSH
16077: EMPTY
16078: LIST
16079: LIST
16080: PUSH
16081: LD_INT 21
16083: PUSH
16084: LD_INT 1
16086: PUSH
16087: EMPTY
16088: LIST
16089: LIST
16090: PUSH
16091: LD_INT 25
16093: PUSH
16094: LD_INT 1
16096: PUSH
16097: EMPTY
16098: LIST
16099: LIST
16100: PUSH
16101: LD_INT 54
16103: PUSH
16104: EMPTY
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: PPUSH
16113: CALL_OW 69
16117: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16118: LD_ADDR_VAR 0 4
16122: PUSH
16123: LD_INT 22
16125: PUSH
16126: LD_INT 6
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 21
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 25
16145: PUSH
16146: LD_INT 2
16148: PUSH
16149: EMPTY
16150: LIST
16151: LIST
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: LIST
16157: PPUSH
16158: CALL_OW 69
16162: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16163: LD_ADDR_VAR 0 6
16167: PUSH
16168: LD_INT 22
16170: PUSH
16171: LD_INT 6
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: LD_INT 21
16180: PUSH
16181: LD_INT 1
16183: PUSH
16184: EMPTY
16185: LIST
16186: LIST
16187: PUSH
16188: LD_INT 25
16190: PUSH
16191: LD_INT 4
16193: PUSH
16194: EMPTY
16195: LIST
16196: LIST
16197: PUSH
16198: EMPTY
16199: LIST
16200: LIST
16201: LIST
16202: PPUSH
16203: CALL_OW 69
16207: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16208: LD_ADDR_VAR 0 8
16212: PUSH
16213: LD_INT 22
16215: PUSH
16216: LD_INT 6
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: PUSH
16223: LD_INT 21
16225: PUSH
16226: LD_INT 2
16228: PUSH
16229: EMPTY
16230: LIST
16231: LIST
16232: PUSH
16233: LD_INT 34
16235: PUSH
16236: LD_INT 51
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: LIST
16246: LIST
16247: PPUSH
16248: CALL_OW 69
16252: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16253: LD_VAR 0 1
16257: PPUSH
16258: CALL_OW 255
16262: PUSH
16263: LD_INT 6
16265: EQUAL
16266: PUSH
16267: LD_VAR 0 1
16271: PPUSH
16272: CALL_OW 266
16276: PUSH
16277: LD_INT 0
16279: EQUAL
16280: AND
16281: IFFALSE 16301
// begin ruPDepot = building ;
16283: LD_ADDR_EXP 21
16287: PUSH
16288: LD_VAR 0 1
16292: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16293: LD_ADDR_EXP 20
16297: PUSH
16298: LD_INT 1
16300: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 266
16310: PUSH
16311: LD_INT 4
16313: EQUAL
16314: PUSH
16315: LD_VAR 0 1
16319: PPUSH
16320: CALL_OW 255
16324: PUSH
16325: LD_INT 6
16327: EQUAL
16328: AND
16329: IFFALSE 16362
// for i in tmpSold do
16331: LD_ADDR_VAR 0 2
16335: PUSH
16336: LD_VAR 0 3
16340: PUSH
16341: FOR_IN
16342: IFFALSE 16360
// ComEnterUnit ( i , building ) ;
16344: LD_VAR 0 2
16348: PPUSH
16349: LD_VAR 0 1
16353: PPUSH
16354: CALL_OW 120
16358: GO 16341
16360: POP
16361: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16362: LD_VAR 0 1
16366: PPUSH
16367: CALL_OW 266
16371: PUSH
16372: LD_INT 6
16374: EQUAL
16375: PUSH
16376: LD_VAR 0 1
16380: PPUSH
16381: CALL_OW 255
16385: PUSH
16386: LD_INT 6
16388: EQUAL
16389: AND
16390: IFFALSE 16448
// begin for i in tmpSci do
16392: LD_ADDR_VAR 0 2
16396: PUSH
16397: LD_VAR 0 6
16401: PUSH
16402: FOR_IN
16403: IFFALSE 16421
// ComEnterUnit ( i , building ) ;
16405: LD_VAR 0 2
16409: PPUSH
16410: LD_VAR 0 1
16414: PPUSH
16415: CALL_OW 120
16419: GO 16402
16421: POP
16422: POP
// ResAllTechs ( 6 , building , 3 ) ;
16423: LD_INT 6
16425: PPUSH
16426: LD_VAR 0 1
16430: PPUSH
16431: LD_INT 3
16433: PPUSH
16434: CALL 5513 0 3
// ruPLab = building ;
16438: LD_ADDR_EXP 22
16442: PUSH
16443: LD_VAR 0 1
16447: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 266
16457: PUSH
16458: LD_INT 2
16460: EQUAL
16461: PUSH
16462: LD_VAR 0 1
16466: PPUSH
16467: CALL_OW 255
16471: PUSH
16472: LD_INT 6
16474: EQUAL
16475: AND
16476: IFFALSE 16527
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16478: LD_ADDR_VAR 0 5
16482: PUSH
16483: LD_VAR 0 8
16487: PUSH
16488: LD_INT 1
16490: ARRAY
16491: PPUSH
16492: CALL_OW 313
16496: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16497: LD_VAR 0 5
16501: PPUSH
16502: CALL_OW 121
// wait ( 0 0$1 ) ;
16506: LD_INT 35
16508: PPUSH
16509: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16513: LD_VAR 0 5
16517: PPUSH
16518: LD_VAR 0 1
16522: PPUSH
16523: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16527: LD_VAR 0 1
16531: PPUSH
16532: CALL_OW 266
16536: PUSH
16537: LD_INT 32
16539: EQUAL
16540: PUSH
16541: LD_VAR 0 1
16545: PPUSH
16546: CALL_OW 255
16550: PUSH
16551: LD_INT 6
16553: EQUAL
16554: AND
16555: IFFALSE 16607
// begin ComPlaceWeapon ( building , 42 ) ;
16557: LD_VAR 0 1
16561: PPUSH
16562: LD_INT 42
16564: PPUSH
16565: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16569: LD_VAR 0 7
16573: PUSH
16574: LD_INT 1
16576: ARRAY
16577: PPUSH
16578: CALL_OW 122
// wait ( 0 0$1 ) ;
16582: LD_INT 35
16584: PPUSH
16585: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16589: LD_VAR 0 7
16593: PUSH
16594: LD_INT 1
16596: ARRAY
16597: PPUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16607: LD_VAR 0 1
16611: PPUSH
16612: CALL_OW 266
16616: PUSH
16617: LD_INT 31
16619: EQUAL
16620: PUSH
16621: LD_VAR 0 1
16625: PPUSH
16626: CALL_OW 255
16630: PUSH
16631: LD_INT 6
16633: EQUAL
16634: AND
16635: IFFALSE 16701
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16637: LD_VAR 0 7
16641: PUSH
16642: LD_INT 2
16644: ARRAY
16645: PPUSH
16646: CALL_OW 122
// wait ( 0 0$1 ) ;
16650: LD_INT 35
16652: PPUSH
16653: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16657: LD_VAR 0 7
16661: PUSH
16662: LD_INT 2
16664: ARRAY
16665: PPUSH
16666: LD_VAR 0 1
16670: PPUSH
16671: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16675: LD_VAR 0 4
16679: PUSH
16680: LD_INT 1
16682: ARRAY
16683: PPUSH
16684: LD_EXP 21
16688: PPUSH
16689: CALL_OW 120
// baseReadyToBuild = 2 ;
16693: LD_ADDR_EXP 20
16697: PUSH
16698: LD_INT 2
16700: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL_OW 266
16710: PUSH
16711: LD_INT 32
16713: EQUAL
16714: PUSH
16715: LD_VAR 0 1
16719: PPUSH
16720: CALL_OW 255
16724: PUSH
16725: LD_INT 1
16727: EQUAL
16728: AND
16729: PUSH
16730: LD_EXP 32
16734: PUSH
16735: LD_INT 0
16737: EQUAL
16738: AND
16739: IFFALSE 16984
// begin bunkerDialog = 1 ;
16741: LD_ADDR_EXP 32
16745: PUSH
16746: LD_INT 1
16748: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16749: LD_EXP 11
16753: PPUSH
16754: CALL_OW 302
16758: IFFALSE 16774
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16760: LD_EXP 11
16764: PPUSH
16765: LD_STRING D11-Eng1-1
16767: PPUSH
16768: CALL_OW 88
// end else
16772: GO 16970
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16774: LD_INT 22
16776: PUSH
16777: LD_INT 1
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 25
16796: PUSH
16797: LD_INT 3
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 26
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: PPUSH
16820: CALL_OW 69
16824: PUSH
16825: LD_EXP 1
16829: PUSH
16830: EMPTY
16831: LIST
16832: PUSH
16833: LD_INT 0
16835: GREATER
16836: DIFF
16837: IFFALSE 16911
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16839: LD_INT 22
16841: PUSH
16842: LD_INT 1
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 21
16851: PUSH
16852: LD_INT 1
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: LD_INT 25
16861: PUSH
16862: LD_INT 2
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 26
16871: PUSH
16872: LD_INT 1
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: PPUSH
16885: CALL_OW 69
16889: PUSH
16890: LD_EXP 1
16894: PUSH
16895: EMPTY
16896: LIST
16897: DIFF
16898: PPUSH
16899: LD_STRING D11-Eng1-1
16901: PPUSH
16902: LD_STRING D11-Eng1-1
16904: PPUSH
16905: CALL 4074 0 3
// end else
16909: GO 16970
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
16911: LD_INT 22
16913: PUSH
16914: LD_INT 1
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: LD_INT 21
16923: PUSH
16924: LD_INT 1
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 26
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: EMPTY
16938: LIST
16939: LIST
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: LIST
16945: PPUSH
16946: CALL_OW 69
16950: PUSH
16951: LD_EXP 1
16955: PUSH
16956: EMPTY
16957: LIST
16958: DIFF
16959: PPUSH
16960: LD_STRING D11-Eng1-1
16962: PPUSH
16963: LD_STRING D11-Eng1-1
16965: PPUSH
16966: CALL 4074 0 3
// end ; end ; if energyVDialog = 0 then
16970: LD_EXP 33
16974: PUSH
16975: LD_INT 0
16977: EQUAL
16978: IFFALSE 16984
// EnergyDialog ;
16980: CALL 4565 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
16984: LD_VAR 0 1
16988: PPUSH
16989: CALL_OW 266
16993: PUSH
16994: LD_INT 29
16996: EQUAL
16997: PUSH
16998: LD_VAR 0 1
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_INT 1
17010: EQUAL
17011: AND
17012: IFFALSE 17022
// buildOil = 1 ;
17014: LD_ADDR_EXP 34
17018: PUSH
17019: LD_INT 1
17021: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 266
17031: PUSH
17032: LD_INT 26
17034: EQUAL
17035: PUSH
17036: LD_VAR 0 1
17040: PPUSH
17041: CALL_OW 255
17045: PUSH
17046: LD_INT 1
17048: EQUAL
17049: AND
17050: IFFALSE 17060
// buildPower = 1 ;
17052: LD_ADDR_EXP 35
17056: PUSH
17057: LD_INT 1
17059: ST_TO_ADDR
// end ;
17060: PPOPN 8
17062: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17063: LD_VAR 0 1
17067: PPUSH
17068: CALL_OW 266
17072: PUSH
17073: LD_INT 3
17075: EQUAL
17076: PUSH
17077: LD_VAR 0 1
17081: PPUSH
17082: CALL_OW 255
17086: PUSH
17087: LD_INT 1
17089: EQUAL
17090: AND
17091: PUSH
17092: LD_EXP 31
17096: PUSH
17097: LD_INT 0
17099: EQUAL
17100: AND
17101: IFFALSE 17417
// begin factoryDialog = 1 ;
17103: LD_ADDR_EXP 31
17107: PUSH
17108: LD_INT 1
17110: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17111: LD_INT 22
17113: PUSH
17114: LD_INT 1
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PUSH
17121: LD_INT 21
17123: PUSH
17124: LD_INT 3
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: PUSH
17131: LD_INT 30
17133: PUSH
17134: LD_INT 3
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 24
17143: PUSH
17144: LD_INT 1000
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: EMPTY
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: PPUSH
17157: CALL_OW 69
17161: PUSH
17162: LD_INT 1
17164: ARRAY
17165: PPUSH
17166: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17170: LD_EXP 1
17174: PPUSH
17175: LD_STRING D9a-JMM-1
17177: PPUSH
17178: CALL_OW 88
// if IsOK ( Campell ) then
17182: LD_EXP 12
17186: PPUSH
17187: CALL_OW 302
17191: IFFALSE 17207
// begin Say ( Campell , D9a-Mech1-1 ) ;
17193: LD_EXP 12
17197: PPUSH
17198: LD_STRING D9a-Mech1-1
17200: PPUSH
17201: CALL_OW 88
// end else
17205: GO 17403
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17207: LD_INT 22
17209: PUSH
17210: LD_INT 1
17212: PUSH
17213: EMPTY
17214: LIST
17215: LIST
17216: PUSH
17217: LD_INT 21
17219: PUSH
17220: LD_INT 1
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 25
17229: PUSH
17230: LD_INT 3
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 26
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: PPUSH
17253: CALL_OW 69
17257: PUSH
17258: LD_EXP 1
17262: PUSH
17263: EMPTY
17264: LIST
17265: PUSH
17266: LD_INT 0
17268: GREATER
17269: DIFF
17270: IFFALSE 17344
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17272: LD_INT 22
17274: PUSH
17275: LD_INT 1
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: LD_INT 21
17284: PUSH
17285: LD_INT 1
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 25
17294: PUSH
17295: LD_INT 3
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PUSH
17302: LD_INT 26
17304: PUSH
17305: LD_INT 1
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: PPUSH
17318: CALL_OW 69
17322: PUSH
17323: LD_EXP 1
17327: PUSH
17328: EMPTY
17329: LIST
17330: DIFF
17331: PPUSH
17332: LD_STRING D9a-Mech1-1
17334: PPUSH
17335: LD_STRING D9a-Mech1-1
17337: PPUSH
17338: CALL 4074 0 3
// end else
17342: GO 17403
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17344: LD_INT 22
17346: PUSH
17347: LD_INT 1
17349: PUSH
17350: EMPTY
17351: LIST
17352: LIST
17353: PUSH
17354: LD_INT 21
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: EMPTY
17361: LIST
17362: LIST
17363: PUSH
17364: LD_INT 26
17366: PUSH
17367: LD_INT 1
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: PUSH
17374: EMPTY
17375: LIST
17376: LIST
17377: LIST
17378: PPUSH
17379: CALL_OW 69
17383: PUSH
17384: LD_EXP 1
17388: PUSH
17389: EMPTY
17390: LIST
17391: DIFF
17392: PPUSH
17393: LD_STRING D9a-Mech1-1
17395: PPUSH
17396: LD_STRING D9a-Mech1-1
17398: PPUSH
17399: CALL 4074 0 3
// end ; end ; if energyVDialog = 0 then
17403: LD_EXP 33
17407: PUSH
17408: LD_INT 0
17410: EQUAL
17411: IFFALSE 17417
// EnergyDialog ;
17413: CALL 4565 0 0
// end ; end ;
17417: PPOPN 1
17419: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17420: LD_VAR 0 1
17424: PPUSH
17425: CALL_OW 247
17429: PUSH
17430: LD_INT 1
17432: EQUAL
17433: PUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 255
17443: PUSH
17444: LD_INT 1
17446: EQUAL
17447: AND
17448: IFFALSE 17464
// lostCounter = lostCounter + 1 ;
17450: LD_ADDR_EXP 38
17454: PUSH
17455: LD_EXP 38
17459: PUSH
17460: LD_INT 1
17462: PLUS
17463: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17464: LD_VAR 0 1
17468: PPUSH
17469: CALL_OW 257
17473: PUSH
17474: LD_INT 3
17476: EQUAL
17477: PUSH
17478: LD_VAR 0 1
17482: PPUSH
17483: CALL_OW 255
17487: PUSH
17488: LD_INT 3
17490: EQUAL
17491: AND
17492: PUSH
17493: LD_INT 24
17495: PPUSH
17496: CALL_OW 302
17500: AND
17501: PUSH
17502: LD_INT 24
17504: PPUSH
17505: CALL_OW 255
17509: PUSH
17510: LD_INT 3
17512: EQUAL
17513: AND
17514: IFFALSE 17582
// begin uc_side = 3 ;
17516: LD_ADDR_OWVAR 20
17520: PUSH
17521: LD_INT 3
17523: ST_TO_ADDR
// uc_nation = 3 ;
17524: LD_ADDR_OWVAR 21
17528: PUSH
17529: LD_INT 3
17531: ST_TO_ADDR
// hc_gallery :=  ;
17532: LD_ADDR_OWVAR 33
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// hc_name :=  ;
17540: LD_ADDR_OWVAR 26
17544: PUSH
17545: LD_STRING 
17547: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17548: LD_INT 0
17550: PPUSH
17551: LD_EXP 16
17555: PPUSH
17556: LD_EXP 17
17560: PPUSH
17561: CALL_OW 12
17565: PPUSH
17566: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17570: CALL_OW 44
17574: PPUSH
17575: LD_INT 24
17577: PPUSH
17578: CALL_OW 52
// end ; end ;
17582: PPOPN 1
17584: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17585: LD_INT 0
17587: PPUSH
17588: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17589: LD_ADDR_VAR 0 4
17593: PUSH
17594: LD_INT 22
17596: PUSH
17597: LD_INT 1
17599: PUSH
17600: EMPTY
17601: LIST
17602: LIST
17603: PPUSH
17604: CALL_OW 69
17608: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17609: LD_VAR 0 1
17613: PUSH
17614: LD_INT 1
17616: EQUAL
17617: PUSH
17618: LD_VAR 0 2
17622: PUSH
17623: LD_INT 6
17625: EQUAL
17626: AND
17627: PUSH
17628: LD_EXP 41
17632: PUSH
17633: LD_INT 1
17635: EQUAL
17636: AND
17637: IFFALSE 17692
// begin donaldsonCoopAttack = 0 ;
17639: LD_ADDR_EXP 41
17643: PUSH
17644: LD_INT 0
17646: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17647: LD_ADDR_VAR 0 3
17651: PUSH
17652: LD_INT 22
17654: PUSH
17655: LD_INT 4
17657: PUSH
17658: EMPTY
17659: LIST
17660: LIST
17661: PUSH
17662: EMPTY
17663: LIST
17664: PPUSH
17665: CALL_OW 69
17669: PUSH
17670: FOR_IN
17671: IFFALSE 17690
// ComAgressiveMove ( i , 52 , 64 ) ;
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 52
17680: PPUSH
17681: LD_INT 64
17683: PPUSH
17684: CALL_OW 114
17688: GO 17670
17690: POP
17691: POP
// end ; end ;
17692: PPOPN 4
17694: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17695: LD_VAR 0 1
17699: PPUSH
17700: CALL_OW 264
17704: PUSH
17705: LD_INT 53
17707: EQUAL
17708: IFFALSE 17793
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17710: LD_VAR 0 1
17714: PPUSH
17715: LD_INT 21
17717: PPUSH
17718: CALL 4781 0 2
// uc_side = 3 ;
17722: LD_ADDR_OWVAR 20
17726: PUSH
17727: LD_INT 3
17729: ST_TO_ADDR
// uc_nation = 3 ;
17730: LD_ADDR_OWVAR 21
17734: PUSH
17735: LD_INT 3
17737: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17738: LD_INT 0
17740: PPUSH
17741: LD_EXP 17
17745: PPUSH
17746: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
17750: CALL_OW 44
17754: PPUSH
17755: LD_VAR 0 2
17759: PPUSH
17760: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
17764: LD_VAR 0 1
17768: PPUSH
17769: LD_INT 6
17771: PPUSH
17772: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
17776: LD_VAR 0 1
17780: PPUSH
17781: CALL_OW 313
17785: PPUSH
17786: LD_INT 6
17788: PPUSH
17789: CALL_OW 235
// end ; end ;
17793: PPOPN 2
17795: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
17796: LD_INT 0
17798: PPUSH
17799: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17800: LD_VAR 0 1
17804: PPUSH
17805: CALL_OW 255
17809: PUSH
17810: LD_INT 3
17812: EQUAL
17813: PUSH
17814: LD_VAR 0 1
17818: PPUSH
17819: CALL_OW 247
17823: PUSH
17824: LD_INT 2
17826: EQUAL
17827: AND
17828: IFFALSE 17922
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
17830: LD_VAR 0 1
17834: PPUSH
17835: CALL_OW 264
17839: PUSH
17840: LD_INT 42
17842: EQUAL
17843: PUSH
17844: LD_VAR 0 1
17848: PPUSH
17849: CALL_OW 264
17853: PUSH
17854: LD_INT 43
17856: EQUAL
17857: OR
17858: PUSH
17859: LD_VAR 0 1
17863: PPUSH
17864: CALL_OW 264
17868: PUSH
17869: LD_INT 44
17871: EQUAL
17872: OR
17873: IFFALSE 17922
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
17875: LD_INT 24
17877: PPUSH
17878: LD_VAR 0 1
17882: PPUSH
17883: CALL_OW 265
17887: PPUSH
17888: LD_VAR 0 1
17892: PPUSH
17893: CALL_OW 262
17897: PPUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 263
17907: PPUSH
17908: LD_VAR 0 1
17912: PPUSH
17913: CALL_OW 264
17917: PPUSH
17918: CALL_OW 185
// end ;
17922: PPOPN 3
17924: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
17925: LD_VAR 0 1
17929: PPUSH
17930: CALL_OW 255
17934: PUSH
17935: LD_INT 3
17937: EQUAL
17938: PUSH
17939: LD_VAR 0 2
17943: PPUSH
17944: CALL_OW 255
17948: PUSH
17949: LD_INT 3
17951: EQUAL
17952: AND
17953: PUSH
17954: LD_VAR 0 1
17958: PPUSH
17959: CALL_OW 302
17963: AND
17964: IFFALSE 18006
// begin ComRepairVehicle ( human , vehicle ) ;
17966: LD_VAR 0 2
17970: PPUSH
17971: LD_VAR 0 1
17975: PPUSH
17976: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
17980: LD_VAR 0 2
17984: PPUSH
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
17994: LD_VAR 0 1
17998: PPUSH
17999: LD_INT 100
18001: PPUSH
18002: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18006: LD_VAR 0 1
18010: PPUSH
18011: CALL_OW 255
18015: PUSH
18016: LD_INT 3
18018: EQUAL
18019: PUSH
18020: LD_VAR 0 2
18024: PPUSH
18025: CALL_OW 255
18029: PUSH
18030: LD_INT 3
18032: EQUAL
18033: AND
18034: PUSH
18035: LD_INT 24
18037: PPUSH
18038: CALL_OW 302
18042: AND
18043: PUSH
18044: LD_VAR 0 1
18048: PPUSH
18049: CALL_OW 302
18053: NOT
18054: AND
18055: IFFALSE 18069
// ComEnterUnit ( human , rubfact0 ) ;
18057: LD_VAR 0 2
18061: PPUSH
18062: LD_INT 24
18064: PPUSH
18065: CALL_OW 120
// end ;
18069: PPOPN 2
18071: END
// on Command ( comandid ) do var i , j , tmp ;
18072: LD_INT 0
18074: PPUSH
18075: PPUSH
18076: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18077: LD_ADDR_VAR 0 2
18081: PUSH
18082: LD_INT 22
18084: PUSH
18085: LD_INT 1
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 2
18094: PUSH
18095: LD_INT 21
18097: PUSH
18098: LD_INT 1
18100: PUSH
18101: EMPTY
18102: LIST
18103: LIST
18104: PUSH
18105: LD_INT 21
18107: PUSH
18108: LD_INT 2
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: LIST
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: PPUSH
18124: CALL_OW 69
18128: PUSH
18129: FOR_IN
18130: IFFALSE 18240
// begin if GetTaskList ( i ) > 0 then
18132: LD_VAR 0 2
18136: PPUSH
18137: CALL_OW 437
18141: PUSH
18142: LD_INT 0
18144: GREATER
18145: IFFALSE 18238
// begin for j = 1 to GetTaskList ( i ) do
18147: LD_ADDR_VAR 0 3
18151: PUSH
18152: DOUBLE
18153: LD_INT 1
18155: DEC
18156: ST_TO_ADDR
18157: LD_VAR 0 2
18161: PPUSH
18162: CALL_OW 437
18166: PUSH
18167: FOR_TO
18168: IFFALSE 18236
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18170: LD_ADDR_VAR 0 4
18174: PUSH
18175: LD_VAR 0 2
18179: PPUSH
18180: CALL_OW 437
18184: PUSH
18185: LD_VAR 0 3
18189: ARRAY
18190: PUSH
18191: LD_INT 4
18193: ARRAY
18194: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18195: LD_VAR 0 4
18199: PPUSH
18200: CALL_OW 255
18204: PUSH
18205: LD_INT 4
18207: EQUAL
18208: PUSH
18209: LD_VAR 0 4
18213: PPUSH
18214: CALL_OW 255
18218: PUSH
18219: LD_INT 0
18221: EQUAL
18222: OR
18223: IFFALSE 18234
// ComStop ( i ) ;
18225: LD_VAR 0 2
18229: PPUSH
18230: CALL_OW 141
// end ;
18234: GO 18167
18236: POP
18237: POP
// end ; end ;
18238: GO 18129
18240: POP
18241: POP
// end ; end_of_file
18242: PPOPN 4
18244: END
// every 10 10$0 do
18245: GO 18247
18247: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18248: LD_INT 5
18250: PPUSH
18251: LD_INT 3
18253: PPUSH
18254: LD_INT 2
18256: PPUSH
18257: LD_INT 5
18259: PPUSH
18260: CALL_OW 12
18264: PUSH
18265: LD_INT 2
18267: PUSH
18268: LD_INT 3
18270: PUSH
18271: LD_INT 3
18273: PUSH
18274: EMPTY
18275: LIST
18276: LIST
18277: LIST
18278: PUSH
18279: LD_OWVAR 67
18283: ARRAY
18284: PLUS
18285: PPUSH
18286: LD_INT 0
18288: PPUSH
18289: LD_INT 0
18291: PPUSH
18292: LD_INT 0
18294: PPUSH
18295: LD_INT 0
18297: PPUSH
18298: LD_EXP 16
18302: PPUSH
18303: LD_EXP 17
18307: PPUSH
18308: CALL_OW 12
18312: PPUSH
18313: LD_INT 4
18315: PPUSH
18316: LD_INT 14
18318: PPUSH
18319: LD_INT 1
18321: PPUSH
18322: LD_INT 2
18324: PPUSH
18325: CALL 7366 0 12
// end ;
18329: END
// every 15 15$0 do
18330: GO 18332
18332: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18333: LD_INT 5
18335: PPUSH
18336: LD_INT 3
18338: PPUSH
18339: LD_INT 3
18341: PPUSH
18342: LD_INT 5
18344: PPUSH
18345: CALL_OW 12
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 3
18358: PUSH
18359: EMPTY
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: LD_OWVAR 67
18368: ARRAY
18369: PLUS
18370: PPUSH
18371: LD_INT 0
18373: PPUSH
18374: LD_INT 0
18376: PPUSH
18377: LD_INT 0
18379: PPUSH
18380: LD_INT 1
18382: PPUSH
18383: LD_EXP 16
18387: PPUSH
18388: LD_EXP 17
18392: PPUSH
18393: CALL_OW 12
18397: PPUSH
18398: LD_INT 4
18400: PPUSH
18401: LD_INT 14
18403: PPUSH
18404: LD_INT 1
18406: PPUSH
18407: LD_INT 1
18409: PPUSH
18410: CALL 7366 0 12
// end ;
18414: END
// every 25 25$0 do
18415: GO 18417
18417: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18418: LD_INT 5
18420: PPUSH
18421: LD_INT 3
18423: PPUSH
18424: LD_INT 2
18426: PPUSH
18427: LD_INT 3
18429: PPUSH
18430: CALL_OW 12
18434: PUSH
18435: LD_INT 2
18437: PUSH
18438: LD_INT 3
18440: PUSH
18441: LD_INT 3
18443: PUSH
18444: EMPTY
18445: LIST
18446: LIST
18447: LIST
18448: PUSH
18449: LD_OWVAR 67
18453: ARRAY
18454: PLUS
18455: PPUSH
18456: LD_INT 0
18458: PPUSH
18459: LD_INT 0
18461: PPUSH
18462: LD_INT 0
18464: PPUSH
18465: LD_INT 2
18467: PPUSH
18468: LD_EXP 16
18472: PPUSH
18473: LD_EXP 17
18477: PPUSH
18478: CALL_OW 12
18482: PPUSH
18483: LD_INT 4
18485: PPUSH
18486: LD_INT 14
18488: PPUSH
18489: LD_INT 1
18491: PPUSH
18492: LD_INT 1
18494: PPUSH
18495: CALL 7366 0 12
// end ;
18499: END
// every 26 26$0 do
18500: GO 18502
18502: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18503: LD_INT 5
18505: PPUSH
18506: LD_INT 3
18508: PPUSH
18509: LD_INT 1
18511: PPUSH
18512: LD_INT 3
18514: PPUSH
18515: CALL_OW 12
18519: PUSH
18520: LD_INT 1
18522: PUSH
18523: LD_INT 2
18525: PUSH
18526: LD_INT 2
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: LIST
18533: PUSH
18534: LD_OWVAR 67
18538: ARRAY
18539: PLUS
18540: PPUSH
18541: LD_INT 0
18543: PPUSH
18544: LD_INT 0
18546: PPUSH
18547: LD_INT 0
18549: PPUSH
18550: LD_INT 2
18552: PPUSH
18553: LD_EXP 16
18557: PPUSH
18558: LD_EXP 17
18562: PPUSH
18563: CALL_OW 12
18567: PPUSH
18568: LD_INT 4
18570: PPUSH
18571: LD_INT 14
18573: PPUSH
18574: LD_INT 1
18576: PPUSH
18577: LD_INT 2
18579: PPUSH
18580: CALL 7366 0 12
// end ;
18584: END
// every 25 25$0 do
18585: GO 18587
18587: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18588: LD_INT 4
18590: PPUSH
18591: LD_INT 5
18593: PPUSH
18594: LD_INT 3
18596: PUSH
18597: LD_INT 4
18599: PUSH
18600: LD_INT 5
18602: PUSH
18603: EMPTY
18604: LIST
18605: LIST
18606: LIST
18607: PUSH
18608: LD_OWVAR 67
18612: ARRAY
18613: PPUSH
18614: LD_EXP 16
18618: PPUSH
18619: LD_EXP 17
18623: PPUSH
18624: CALL_OW 12
18628: PPUSH
18629: LD_INT 3
18631: PPUSH
18632: LD_INT 1
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: LD_INT 42
18640: PUSH
18641: LD_INT 42
18643: PUSH
18644: LD_INT 43
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: LIST
18651: PUSH
18652: LD_INT 42
18654: PUSH
18655: LD_INT 43
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PUSH
18662: LD_INT 43
18664: PUSH
18665: LD_INT 43
18667: PUSH
18668: LD_INT 43
18670: PUSH
18671: LD_INT 44
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: LIST
18678: LIST
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: PUSH
18685: LD_OWVAR 67
18689: ARRAY
18690: PPUSH
18691: EMPTY
18692: PPUSH
18693: EMPTY
18694: PPUSH
18695: LD_INT 1
18697: PPUSH
18698: CALL 9028 0 11
// end ; end_of_file
18702: END
// every 0 0$1 trigger startTimer = 1 do
18703: LD_EXP 30
18707: PUSH
18708: LD_INT 1
18710: EQUAL
18711: IFFALSE 18841
18713: GO 18715
18715: DISABLE
// begin enable ;
18716: ENABLE
// if timerStatus = 1 then
18717: LD_EXP 29
18721: PUSH
18722: LD_INT 1
18724: EQUAL
18725: IFFALSE 18758
// begin timeToSupport = timeToSupport - 0 0$01 ;
18727: LD_ADDR_EXP 28
18731: PUSH
18732: LD_EXP 28
18736: PUSH
18737: LD_INT 35
18739: MINUS
18740: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18741: LD_ADDR_OWVAR 47
18745: PUSH
18746: LD_STRING #Am04-1
18748: PUSH
18749: LD_EXP 28
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: ST_TO_ADDR
// end ; if timerStatus = 2 then
18758: LD_EXP 29
18762: PUSH
18763: LD_INT 2
18765: EQUAL
18766: IFFALSE 18799
// begin timeToSupport = timeToSupport - 0 0$01 ;
18768: LD_ADDR_EXP 28
18772: PUSH
18773: LD_EXP 28
18777: PUSH
18778: LD_INT 35
18780: MINUS
18781: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18782: LD_ADDR_OWVAR 47
18786: PUSH
18787: LD_STRING #Am04-2
18789: PUSH
18790: LD_EXP 28
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: ST_TO_ADDR
// end ; if timerStatus = 3 then
18799: LD_EXP 29
18803: PUSH
18804: LD_INT 3
18806: EQUAL
18807: IFFALSE 18823
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18809: LD_ADDR_EXP 27
18813: PUSH
18814: LD_EXP 27
18818: PUSH
18819: LD_INT 35
18821: MINUS
18822: ST_TO_ADDR
// end ; if timerStatus = 4 then
18823: LD_EXP 29
18827: PUSH
18828: LD_INT 4
18830: EQUAL
18831: IFFALSE 18841
// begin display_strings =  ;
18833: LD_ADDR_OWVAR 47
18837: PUSH
18838: LD_STRING 
18840: ST_TO_ADDR
// end ; end ; end_of_file
18841: END
// every 0 0$1 trigger IsDead ( JMM ) do
18842: LD_EXP 1
18846: PPUSH
18847: CALL_OW 301
18851: IFFALSE 18863
18853: GO 18855
18855: DISABLE
// YouLost ( JMM ) ;
18856: LD_STRING JMM
18858: PPUSH
18859: CALL_OW 104
18863: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
18864: LD_INT 4
18866: PPUSH
18867: CALL_OW 301
18871: IFFALSE 18883
18873: GO 18875
18875: DISABLE
// YouLost ( Base ) ; end_of_file
18876: LD_STRING Base
18878: PPUSH
18879: CALL_OW 104
18883: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i , p ;
18884: LD_EXP 15
18888: PPUSH
18889: CALL_OW 301
18893: IFFALSE 19364
18895: GO 18897
18897: DISABLE
18898: LD_INT 0
18900: PPUSH
18901: PPUSH
// begin AIEnable = 0 ;
18902: LD_ADDR_EXP 37
18906: PUSH
18907: LD_INT 0
18909: ST_TO_ADDR
// escapeAvalaible = 1 ;
18910: LD_ADDR_EXP 40
18914: PUSH
18915: LD_INT 1
18917: ST_TO_ADDR
// InGameOn ;
18918: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
18922: LD_INT 3
18924: PPUSH
18925: LD_INT 1
18927: PPUSH
18928: LD_INT 1
18930: PPUSH
18931: LD_INT 0
18933: PPUSH
18934: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
18938: LD_INT 6
18940: PPUSH
18941: LD_INT 1
18943: PPUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 0
18949: PPUSH
18950: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
18954: LD_INT 5
18956: PPUSH
18957: LD_INT 1
18959: PPUSH
18960: LD_INT 1
18962: PPUSH
18963: LD_INT 0
18965: PPUSH
18966: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
18970: LD_INT 3
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
18980: LD_INT 97
18982: PPUSH
18983: LD_INT 91
18985: PPUSH
18986: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
18990: LD_INT 22
18992: PUSH
18993: LD_INT 3
18995: PUSH
18996: EMPTY
18997: LIST
18998: LIST
18999: PUSH
19000: LD_INT 21
19002: PUSH
19003: LD_INT 1
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PPUSH
19014: CALL_OW 69
19018: PPUSH
19019: CALL_OW 121
// wait ( 0 0$01 ) ;
19023: LD_INT 35
19025: PPUSH
19026: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19030: LD_INT 22
19032: PUSH
19033: LD_INT 3
19035: PUSH
19036: EMPTY
19037: LIST
19038: LIST
19039: PUSH
19040: LD_INT 21
19042: PUSH
19043: LD_INT 1
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: PPUSH
19054: CALL_OW 69
19058: PPUSH
19059: LD_INT 124
19061: PPUSH
19062: LD_INT 98
19064: PPUSH
19065: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19069: LD_INT 22
19071: PUSH
19072: LD_INT 5
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 21
19081: PUSH
19082: LD_INT 1
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: PUSH
19089: EMPTY
19090: LIST
19091: LIST
19092: PPUSH
19093: CALL_OW 69
19097: PPUSH
19098: CALL_OW 121
// wait ( 0 0$01 ) ;
19102: LD_INT 35
19104: PPUSH
19105: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19109: LD_INT 22
19111: PUSH
19112: LD_INT 5
19114: PUSH
19115: EMPTY
19116: LIST
19117: LIST
19118: PUSH
19119: LD_INT 21
19121: PUSH
19122: LD_INT 1
19124: PUSH
19125: EMPTY
19126: LIST
19127: LIST
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PPUSH
19133: CALL_OW 69
19137: PPUSH
19138: LD_INT 124
19140: PPUSH
19141: LD_INT 98
19143: PPUSH
19144: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19148: LD_INT 22
19150: PUSH
19151: LD_INT 6
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 1
19163: PUSH
19164: EMPTY
19165: LIST
19166: LIST
19167: PUSH
19168: EMPTY
19169: LIST
19170: LIST
19171: PPUSH
19172: CALL_OW 69
19176: PPUSH
19177: CALL_OW 121
// wait ( 0 0$01 ) ;
19181: LD_INT 35
19183: PPUSH
19184: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19188: LD_INT 22
19190: PUSH
19191: LD_INT 6
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 21
19200: PUSH
19201: LD_INT 1
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PPUSH
19217: LD_INT 124
19219: PPUSH
19220: LD_INT 98
19222: PPUSH
19223: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19227: LD_INT 22
19229: PUSH
19230: LD_INT 1
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 21
19239: PUSH
19240: LD_INT 1
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: PPUSH
19251: CALL_OW 69
19255: PPUSH
19256: LD_INT 124
19258: PPUSH
19259: LD_INT 98
19261: PPUSH
19262: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19266: LD_INT 124
19268: PPUSH
19269: LD_INT 98
19271: PPUSH
19272: CALL_OW 84
// p := 0 0$0 ;
19276: LD_ADDR_VAR 0 2
19280: PUSH
19281: LD_INT 0
19283: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19284: LD_INT 35
19286: PPUSH
19287: CALL_OW 67
// p := p + 0 0$1 ;
19291: LD_ADDR_VAR 0 2
19295: PUSH
19296: LD_VAR 0 2
19300: PUSH
19301: LD_INT 35
19303: PLUS
19304: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19305: LD_INT 23
19307: PUSH
19308: LD_INT 3
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 21
19317: PUSH
19318: LD_INT 1
19320: PUSH
19321: EMPTY
19322: LIST
19323: LIST
19324: PUSH
19325: LD_INT 24
19327: PUSH
19328: LD_INT 250
19330: PUSH
19331: EMPTY
19332: LIST
19333: LIST
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: LIST
19339: PPUSH
19340: CALL_OW 69
19344: PUSH
19345: LD_INT 0
19347: EQUAL
19348: PUSH
19349: LD_VAR 0 2
19353: PUSH
19354: LD_INT 245
19356: GREATEREQUAL
19357: OR
19358: IFFALSE 19284
// FinishMission ;
19360: CALL 19537 0 0
// end ;
19364: PPOPN 2
19366: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19367: LD_EXP 40
19371: PUSH
19372: LD_INT 1
19374: EQUAL
19375: IFFALSE 19534
19377: GO 19379
19379: DISABLE
19380: LD_INT 0
19382: PPUSH
// begin enable ;
19383: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19384: LD_ADDR_VAR 0 1
19388: PUSH
19389: LD_INT 22
19391: PUSH
19392: LD_INT 3
19394: PUSH
19395: EMPTY
19396: LIST
19397: LIST
19398: PPUSH
19399: CALL_OW 69
19403: PUSH
19404: FOR_IN
19405: IFFALSE 19432
// if IsInArea ( i , RussianEscape ) then
19407: LD_VAR 0 1
19411: PPUSH
19412: LD_INT 5
19414: PPUSH
19415: CALL_OW 308
19419: IFFALSE 19430
// RemoveUnit ( i ) ;
19421: LD_VAR 0 1
19425: PPUSH
19426: CALL_OW 64
19430: GO 19404
19432: POP
19433: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19434: LD_ADDR_VAR 0 1
19438: PUSH
19439: LD_INT 22
19441: PUSH
19442: LD_INT 5
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: PPUSH
19449: CALL_OW 69
19453: PUSH
19454: FOR_IN
19455: IFFALSE 19482
// if IsInArea ( i , RussianEscape ) then
19457: LD_VAR 0 1
19461: PPUSH
19462: LD_INT 5
19464: PPUSH
19465: CALL_OW 308
19469: IFFALSE 19480
// RemoveUnit ( i ) ;
19471: LD_VAR 0 1
19475: PPUSH
19476: CALL_OW 64
19480: GO 19454
19482: POP
19483: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19484: LD_ADDR_VAR 0 1
19488: PUSH
19489: LD_INT 22
19491: PUSH
19492: LD_INT 6
19494: PUSH
19495: EMPTY
19496: LIST
19497: LIST
19498: PPUSH
19499: CALL_OW 69
19503: PUSH
19504: FOR_IN
19505: IFFALSE 19532
// if IsInArea ( i , RussianEscape ) then
19507: LD_VAR 0 1
19511: PPUSH
19512: LD_INT 5
19514: PPUSH
19515: CALL_OW 308
19519: IFFALSE 19530
// RemoveUnit ( i ) ;
19521: LD_VAR 0 1
19525: PPUSH
19526: CALL_OW 64
19530: GO 19504
19532: POP
19533: POP
// end ;
19534: PPOPN 1
19536: END
// export function FinishMission ; var tmp ; begin
19537: LD_INT 0
19539: PPUSH
19540: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19541: LD_INT 69
19543: PPUSH
19544: LD_INT 1
19546: PPUSH
19547: CALL_OW 321
19551: PPUSH
19552: LD_STRING GatlingInGamma
19554: PPUSH
19555: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19559: LD_EXP 34
19563: PUSH
19564: LD_INT 1
19566: EQUAL
19567: PUSH
19568: LD_EXP 35
19572: PUSH
19573: LD_INT 1
19575: EQUAL
19576: AND
19577: IFFALSE 19591
// begin AddMedal ( oil , 1 ) ;
19579: LD_STRING oil
19581: PPUSH
19582: LD_INT 1
19584: PPUSH
19585: CALL_OW 101
// end else
19589: GO 19684
// begin if buildOil = 1 and buildPower = 0 then
19591: LD_EXP 34
19595: PUSH
19596: LD_INT 1
19598: EQUAL
19599: PUSH
19600: LD_EXP 35
19604: PUSH
19605: LD_INT 0
19607: EQUAL
19608: AND
19609: IFFALSE 19622
// AddMedal ( oil , - 1 ) ;
19611: LD_STRING oil
19613: PPUSH
19614: LD_INT 1
19616: NEG
19617: PPUSH
19618: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19622: LD_EXP 34
19626: PUSH
19627: LD_INT 0
19629: EQUAL
19630: PUSH
19631: LD_EXP 35
19635: PUSH
19636: LD_INT 1
19638: EQUAL
19639: AND
19640: IFFALSE 19653
// AddMedal ( oil , - 2 ) ;
19642: LD_STRING oil
19644: PPUSH
19645: LD_INT 2
19647: NEG
19648: PPUSH
19649: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19653: LD_EXP 34
19657: PUSH
19658: LD_INT 0
19660: EQUAL
19661: PUSH
19662: LD_EXP 35
19666: PUSH
19667: LD_INT 0
19669: EQUAL
19670: AND
19671: IFFALSE 19684
// AddMedal ( oil , - 3 ) ;
19673: LD_STRING oil
19675: PPUSH
19676: LD_INT 3
19678: NEG
19679: PPUSH
19680: CALL_OW 101
// end ; if lostCounter > 3 then
19684: LD_EXP 38
19688: PUSH
19689: LD_INT 3
19691: GREATER
19692: IFFALSE 19707
// begin AddMedal ( deaths , - 1 ) ;
19694: LD_STRING deaths
19696: PPUSH
19697: LD_INT 1
19699: NEG
19700: PPUSH
19701: CALL_OW 101
// end else
19705: GO 19717
// begin AddMedal ( deaths , 1 ) ;
19707: LD_STRING deaths
19709: PPUSH
19710: LD_INT 1
19712: PPUSH
19713: CALL_OW 101
// end ; if honor = 1 then
19717: LD_EXP 39
19721: PUSH
19722: LD_INT 1
19724: EQUAL
19725: IFFALSE 19739
// begin AddMedal ( honour , 1 ) ;
19727: LD_STRING honour
19729: PPUSH
19730: LD_INT 1
19732: PPUSH
19733: CALL_OW 101
// end else
19737: GO 19750
// begin AddMedal ( honour , - 1 ) ;
19739: LD_STRING honour
19741: PPUSH
19742: LD_INT 1
19744: NEG
19745: PPUSH
19746: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19750: LD_STRING Main
19752: PPUSH
19753: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19757: LD_INT 22
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: LD_INT 23
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 69
19796: PPUSH
19797: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
19801: LD_EXP 1
19805: PPUSH
19806: LD_EXP 44
19810: PUSH
19811: LD_STRING JMM
19813: STR
19814: PPUSH
19815: CALL_OW 38
// if IsOK ( Bobby ) then
19819: LD_EXP 2
19823: PPUSH
19824: CALL_OW 302
19828: IFFALSE 19848
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
19830: LD_EXP 2
19834: PPUSH
19835: LD_EXP 44
19839: PUSH
19840: LD_STRING Bobby
19842: STR
19843: PPUSH
19844: CALL_OW 38
// if IsOK ( Cyrus ) then
19848: LD_EXP 3
19852: PPUSH
19853: CALL_OW 302
19857: IFFALSE 19877
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
19859: LD_EXP 3
19863: PPUSH
19864: LD_EXP 44
19868: PUSH
19869: LD_STRING Cyrus
19871: STR
19872: PPUSH
19873: CALL_OW 38
// if IsOK ( Lisa ) then
19877: LD_EXP 4
19881: PPUSH
19882: CALL_OW 302
19886: IFFALSE 19906
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
19888: LD_EXP 4
19892: PPUSH
19893: LD_EXP 44
19897: PUSH
19898: LD_STRING Lisa
19900: STR
19901: PPUSH
19902: CALL_OW 38
// if IsOK ( Brown ) then
19906: LD_EXP 7
19910: PPUSH
19911: CALL_OW 302
19915: IFFALSE 19935
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
19917: LD_EXP 7
19921: PPUSH
19922: LD_EXP 44
19926: PUSH
19927: LD_STRING Brown
19929: STR
19930: PPUSH
19931: CALL_OW 38
// if IsOK ( Donaldson ) then
19935: LD_EXP 13
19939: PPUSH
19940: CALL_OW 302
19944: IFFALSE 19964
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
19946: LD_EXP 13
19950: PPUSH
19951: LD_EXP 44
19955: PUSH
19956: LD_STRING Donaldson
19958: STR
19959: PPUSH
19960: CALL_OW 38
// if IsOK ( Frank ) then
19964: LD_EXP 5
19968: PPUSH
19969: CALL_OW 302
19973: IFFALSE 19993
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
19975: LD_EXP 5
19979: PPUSH
19980: LD_EXP 44
19984: PUSH
19985: LD_STRING Frank
19987: STR
19988: PPUSH
19989: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
19993: LD_INT 50
19995: PUSH
19996: EMPTY
19997: LIST
19998: PUSH
19999: LD_INT 22
20001: PUSH
20002: LD_INT 1
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: PUSH
20009: LD_INT 21
20011: PUSH
20012: LD_INT 1
20014: PUSH
20015: EMPTY
20016: LIST
20017: LIST
20018: PUSH
20019: EMPTY
20020: LIST
20021: LIST
20022: LIST
20023: PPUSH
20024: CALL_OW 69
20028: PUSH
20029: LD_EXP 1
20033: PUSH
20034: LD_EXP 2
20038: PUSH
20039: LD_EXP 3
20043: PUSH
20044: LD_EXP 4
20048: PUSH
20049: LD_EXP 7
20053: PUSH
20054: LD_EXP 13
20058: PUSH
20059: LD_EXP 5
20063: PUSH
20064: EMPTY
20065: LIST
20066: LIST
20067: LIST
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: DIFF
20073: PPUSH
20074: LD_STRING 04_other_survivors
20076: PPUSH
20077: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20081: LD_INT 22
20083: PPUSH
20084: CALL 20097 0 1
// YouWin ;
20088: CALL_OW 103
// end ;
20092: LD_VAR 0 1
20096: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20097: LD_INT 0
20099: PPUSH
20100: PPUSH
20101: PPUSH
20102: PPUSH
// gammaBase = [ ] ;
20103: LD_ADDR_VAR 0 4
20107: PUSH
20108: EMPTY
20109: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20110: LD_ADDR_VAR 0 5
20114: PUSH
20115: LD_VAR 0 1
20119: PPUSH
20120: LD_INT 22
20122: PUSH
20123: LD_INT 1
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_INT 21
20132: PUSH
20133: LD_INT 3
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: PUSH
20140: LD_INT 50
20142: PUSH
20143: EMPTY
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: PPUSH
20151: CALL_OW 70
20155: ST_TO_ADDR
// for i in buildings do
20156: LD_ADDR_VAR 0 3
20160: PUSH
20161: LD_VAR 0 5
20165: PUSH
20166: FOR_IN
20167: IFFALSE 20504
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20169: LD_VAR 0 3
20173: PPUSH
20174: CALL_OW 266
20178: PUSH
20179: LD_INT 6
20181: PUSH
20182: LD_INT 7
20184: PUSH
20185: LD_INT 8
20187: PUSH
20188: EMPTY
20189: LIST
20190: LIST
20191: LIST
20192: IN
20193: IFFALSE 20307
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20195: LD_ADDR_VAR 0 4
20199: PUSH
20200: LD_VAR 0 4
20204: PUSH
20205: LD_VAR 0 3
20209: PPUSH
20210: CALL_OW 266
20214: PUSH
20215: LD_VAR 0 3
20219: PPUSH
20220: CALL_OW 250
20224: PUSH
20225: LD_VAR 0 3
20229: PPUSH
20230: CALL_OW 251
20234: PUSH
20235: LD_VAR 0 3
20239: PPUSH
20240: CALL_OW 254
20244: PUSH
20245: LD_VAR 0 3
20249: PPUSH
20250: CALL_OW 267
20254: PUSH
20255: LD_VAR 0 3
20259: PPUSH
20260: CALL_OW 248
20264: PUSH
20265: LD_VAR 0 3
20269: PPUSH
20270: LD_INT 1
20272: PPUSH
20273: CALL_OW 268
20277: PUSH
20278: LD_VAR 0 3
20282: PPUSH
20283: LD_INT 2
20285: PPUSH
20286: CALL_OW 268
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: ADD
20304: ST_TO_ADDR
20305: GO 20502
// if GetBType ( i ) in [ b_bunker ] then
20307: LD_VAR 0 3
20311: PPUSH
20312: CALL_OW 266
20316: PUSH
20317: LD_INT 32
20319: PUSH
20320: EMPTY
20321: LIST
20322: IN
20323: IFFALSE 20420
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20325: LD_ADDR_VAR 0 4
20329: PUSH
20330: LD_VAR 0 4
20334: PUSH
20335: LD_VAR 0 3
20339: PPUSH
20340: CALL_OW 266
20344: PUSH
20345: LD_VAR 0 3
20349: PPUSH
20350: CALL_OW 250
20354: PUSH
20355: LD_VAR 0 3
20359: PPUSH
20360: CALL_OW 251
20364: PUSH
20365: LD_VAR 0 3
20369: PPUSH
20370: CALL_OW 254
20374: PUSH
20375: LD_VAR 0 3
20379: PPUSH
20380: CALL_OW 267
20384: PUSH
20385: LD_VAR 0 3
20389: PPUSH
20390: CALL_OW 248
20394: PUSH
20395: LD_VAR 0 3
20399: PPUSH
20400: CALL_OW 269
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: PUSH
20414: EMPTY
20415: LIST
20416: ADD
20417: ST_TO_ADDR
20418: GO 20502
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20420: LD_ADDR_VAR 0 4
20424: PUSH
20425: LD_VAR 0 4
20429: PUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: CALL_OW 266
20439: PUSH
20440: LD_VAR 0 3
20444: PPUSH
20445: CALL_OW 250
20449: PUSH
20450: LD_VAR 0 3
20454: PPUSH
20455: CALL_OW 251
20459: PUSH
20460: LD_VAR 0 3
20464: PPUSH
20465: CALL_OW 254
20469: PUSH
20470: LD_VAR 0 3
20474: PPUSH
20475: CALL_OW 267
20479: PUSH
20480: LD_VAR 0 3
20484: PPUSH
20485: CALL_OW 248
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: PUSH
20498: EMPTY
20499: LIST
20500: ADD
20501: ST_TO_ADDR
// end ;
20502: GO 20166
20504: POP
20505: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20506: LD_VAR 0 4
20510: PPUSH
20511: LD_STRING GammaBase
20513: PPUSH
20514: CALL_OW 39
// end ; end_of_file
20518: LD_VAR 0 2
20522: RET
// every 1 1$15 do
20523: GO 20525
20525: DISABLE
// begin if supply <= 13 and supply > 7 then
20526: LD_EXP 36
20530: PUSH
20531: LD_INT 13
20533: LESSEQUAL
20534: PUSH
20535: LD_EXP 36
20539: PUSH
20540: LD_INT 7
20542: GREATER
20543: AND
20544: IFFALSE 20567
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20546: LD_INT 3
20548: PPUSH
20549: LD_INT 5
20551: PPUSH
20552: CALL_OW 12
20556: PPUSH
20557: LD_INT 18
20559: PPUSH
20560: LD_INT 1
20562: PPUSH
20563: CALL_OW 55
// if supply <= 7 and supply > 4 then
20567: LD_EXP 36
20571: PUSH
20572: LD_INT 7
20574: LESSEQUAL
20575: PUSH
20576: LD_EXP 36
20580: PUSH
20581: LD_INT 4
20583: GREATER
20584: AND
20585: IFFALSE 20608
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20587: LD_INT 3
20589: PPUSH
20590: LD_INT 5
20592: PPUSH
20593: CALL_OW 12
20597: PPUSH
20598: LD_INT 19
20600: PPUSH
20601: LD_INT 1
20603: PPUSH
20604: CALL_OW 55
// if supply <= 4 and supply > 0 then
20608: LD_EXP 36
20612: PUSH
20613: LD_INT 4
20615: LESSEQUAL
20616: PUSH
20617: LD_EXP 36
20621: PUSH
20622: LD_INT 0
20624: GREATER
20625: AND
20626: IFFALSE 20649
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20628: LD_INT 3
20630: PPUSH
20631: LD_INT 5
20633: PPUSH
20634: CALL_OW 12
20638: PPUSH
20639: LD_INT 20
20641: PPUSH
20642: LD_INT 1
20644: PPUSH
20645: CALL_OW 55
// if supply > 0 then
20649: LD_EXP 36
20653: PUSH
20654: LD_INT 0
20656: GREATER
20657: IFFALSE 20674
// begin supply = supply - 1 ;
20659: LD_ADDR_EXP 36
20663: PUSH
20664: LD_EXP 36
20668: PUSH
20669: LD_INT 1
20671: MINUS
20672: ST_TO_ADDR
// enable ;
20673: ENABLE
// end ; end ;
20674: END
