// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// russianTanks = [ ] ;
  44: LD_ADDR_EXP 18
  48: PUSH
  49: EMPTY
  50: ST_TO_ADDR
// russianDamageTanks = [ ] ;
  51: LD_ADDR_EXP 19
  55: PUSH
  56: EMPTY
  57: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  58: LD_ADDR_EXP 20
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// debugMode = 0 ;
  66: LD_ADDR_EXP 43
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// bonusAvalaible = 0 ;
  74: LD_ADDR_EXP 42
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// firstRussianAttack = 0 ;
  82: LD_ADDR_EXP 23
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// saveDonaldson = 0 ;
  90: LD_ADDR_EXP 24
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// frankScoutBase = 0 ;
  98: LD_ADDR_EXP 25
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// harrAnswer = 0 ;
 106: LD_ADDR_EXP 26
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 114: LD_ADDR_EXP 27
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 122: LD_ADDR_EXP 28
 126: PUSH
 127: LD_INT 18900
 129: ST_TO_ADDR
// timerStatus = 0 ;
 130: LD_ADDR_EXP 29
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// startTimer = 0 ;
 138: LD_ADDR_EXP 30
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// factoryDialog = 0 ;
 146: LD_ADDR_EXP 31
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// bunkerDialog = 0 ;
 154: LD_ADDR_EXP 32
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// energyVDialog = 0 ;
 162: LD_ADDR_EXP 33
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// buildOil = 0 ;
 170: LD_ADDR_EXP 34
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// buildPower = 0 ;
 178: LD_ADDR_EXP 35
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 186: LD_ADDR_EXP 36
 190: PUSH
 191: LD_INT 14
 193: PUSH
 194: LD_INT 12
 196: PUSH
 197: LD_INT 11
 199: PUSH
 200: EMPTY
 201: LIST
 202: LIST
 203: LIST
 204: PUSH
 205: LD_OWVAR 67
 209: ARRAY
 210: ST_TO_ADDR
// AIEnable = 1 ;
 211: LD_ADDR_EXP 37
 215: PUSH
 216: LD_INT 1
 218: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 219: LD_ADDR_EXP 41
 223: PUSH
 224: LD_INT 0
 226: ST_TO_ADDR
// lostCounter = 0 ;
 227: LD_ADDR_EXP 38
 231: PUSH
 232: LD_INT 0
 234: ST_TO_ADDR
// honor = 1 ;
 235: LD_ADDR_EXP 39
 239: PUSH
 240: LD_INT 1
 242: ST_TO_ADDR
// escapeAvalaible = 0 ;
 243: LD_ADDR_EXP 40
 247: PUSH
 248: LD_INT 0
 250: ST_TO_ADDR
// PrepareDifficulty ;
 251: CALL 4206 0 0
// PrepareRussianBase ;
 255: CALL 2519 0 0
// PrepareRussianCommander ;
 259: CALL 2470 0 0
// PrepareHeroes ;
 263: CALL 404 0 0
// SetBName ( ambdept0 , gamma ) ;
 267: LD_INT 4
 269: PPUSH
 270: LD_STRING gamma
 272: PPUSH
 273: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 277: LD_INT 21
 279: PPUSH
 280: LD_STRING fyodor
 282: PPUSH
 283: CALL_OW 500
// end ;
 287: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 288: LD_EXP 43
 292: PUSH
 293: LD_INT 1
 295: EQUAL
 296: IFFALSE 401
 298: GO 300
 300: DISABLE
 301: LD_INT 0
 303: PPUSH
// begin enable ;
 304: ENABLE
// fogoff ( true ) ;
 305: LD_INT 1
 307: PPUSH
 308: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 312: LD_ADDR_VAR 0 1
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 21
 329: PUSH
 330: LD_INT 1
 332: PUSH
 333: EMPTY
 334: LIST
 335: LIST
 336: PUSH
 337: EMPTY
 338: LIST
 339: LIST
 340: PPUSH
 341: CALL_OW 69
 345: PUSH
 346: FOR_IN
 347: IFFALSE 363
// SetLives ( i , 1000 ) ;
 349: LD_VAR 0 1
 353: PPUSH
 354: LD_INT 1000
 356: PPUSH
 357: CALL_OW 234
 361: GO 346
 363: POP
 364: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 365: LD_INT 4
 367: PPUSH
 368: CALL_OW 274
 372: PPUSH
 373: LD_INT 1
 375: PPUSH
 376: LD_INT 9999
 378: PPUSH
 379: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 383: LD_INT 4
 385: PPUSH
 386: CALL_OW 274
 390: PPUSH
 391: LD_INT 2
 393: PPUSH
 394: LD_INT 9999
 396: PPUSH
 397: CALL_OW 277
// end ; end_of_file
 401: PPOPN 1
 403: END
// export function PrepareHeroes ; var i , tmp ; begin
 404: LD_INT 0
 406: PPUSH
 407: PPUSH
 408: PPUSH
// uc_side = 1 ;
 409: LD_ADDR_OWVAR 20
 413: PUSH
 414: LD_INT 1
 416: ST_TO_ADDR
// uc_nation = 1 ;
 417: LD_ADDR_OWVAR 21
 421: PUSH
 422: LD_INT 1
 424: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 425: LD_ADDR_EXP 1
 429: PUSH
 430: LD_STRING JMM
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: CALL 3741 0 2
 440: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 441: LD_ADDR_EXP 4
 445: PUSH
 446: LD_STRING Lisa
 448: PPUSH
 449: LD_INT 1
 451: PPUSH
 452: CALL 3741 0 2
 456: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 457: LD_ADDR_EXP 7
 461: PUSH
 462: LD_STRING Brown
 464: PPUSH
 465: LD_INT 0
 467: PPUSH
 468: CALL 3741 0 2
 472: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 473: LD_ADDR_EXP 8
 477: PUSH
 478: LD_STRING Dickens
 480: PPUSH
 481: LD_INT 0
 483: PPUSH
 484: CALL 3741 0 2
 488: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 489: LD_ADDR_EXP 9
 493: PUSH
 494: LD_STRING Woodruff
 496: PPUSH
 497: LD_INT 0
 499: PPUSH
 500: CALL 3741 0 2
 504: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 505: LD_ADDR_EXP 12
 509: PUSH
 510: LD_STRING Campell
 512: PPUSH
 513: LD_INT 0
 515: PPUSH
 516: CALL 3741 0 2
 520: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 521: LD_ADDR_EXP 10
 525: PUSH
 526: LD_STRING Knight
 528: PPUSH
 529: LD_INT 0
 531: PPUSH
 532: CALL 3741 0 2
 536: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 537: LD_ADDR_EXP 11
 541: PUSH
 542: LD_STRING Claptopn
 544: PPUSH
 545: LD_INT 0
 547: PPUSH
 548: CALL 3741 0 2
 552: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 553: LD_ADDR_EXP 14
 557: PUSH
 558: LD_STRING Harisson
 560: PPUSH
 561: LD_INT 0
 563: PPUSH
 564: CALL 3741 0 2
 568: ST_TO_ADDR
// if Lisa = false then
 569: LD_EXP 4
 573: PUSH
 574: LD_INT 0
 576: EQUAL
 577: IFFALSE 595
// Bobby = PrepareUnit ( Bobby , true ) ;
 579: LD_ADDR_EXP 2
 583: PUSH
 584: LD_STRING Bobby
 586: PPUSH
 587: LD_INT 1
 589: PPUSH
 590: CALL 3741 0 2
 594: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 595: LD_EXP 4
 599: PUSH
 600: LD_INT 0
 602: EQUAL
 603: PUSH
 604: LD_EXP 2
 608: PUSH
 609: LD_INT 0
 611: EQUAL
 612: AND
 613: IFFALSE 631
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 615: LD_ADDR_EXP 3
 619: PUSH
 620: LD_STRING Cyrus
 622: PPUSH
 623: LD_INT 1
 625: PPUSH
 626: CALL 3741 0 2
 630: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 631: LD_EXP 4
 635: PUSH
 636: LD_INT 0
 638: EQUAL
 639: PUSH
 640: LD_EXP 2
 644: PUSH
 645: LD_INT 0
 647: EQUAL
 648: AND
 649: PUSH
 650: LD_EXP 3
 654: PUSH
 655: LD_INT 0
 657: EQUAL
 658: AND
 659: IFFALSE 720
// begin tmp = CreateCharacterSet ( 03_others ) ;
 661: LD_ADDR_VAR 0 3
 665: PUSH
 666: LD_STRING 03_others
 668: PPUSH
 669: CALL_OW 31
 673: ST_TO_ADDR
// for i = 1 to tmp do
 674: LD_ADDR_VAR 0 2
 678: PUSH
 679: DOUBLE
 680: LD_INT 1
 682: DEC
 683: ST_TO_ADDR
 684: LD_VAR 0 3
 688: PUSH
 689: FOR_TO
 690: IFFALSE 718
// RandomBeforeMission = tmp [ Rand ( 1 , tmp ) ] ;
 692: LD_ADDR_EXP 6
 696: PUSH
 697: LD_VAR 0 3
 701: PUSH
 702: LD_INT 1
 704: PPUSH
 705: LD_VAR 0 3
 709: PPUSH
 710: CALL_OW 12
 714: ARRAY
 715: ST_TO_ADDR
 716: GO 689
 718: POP
 719: POP
// end ; uc_side = 4 ;
 720: LD_ADDR_OWVAR 20
 724: PUSH
 725: LD_INT 4
 727: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 728: LD_ADDR_EXP 13
 732: PUSH
 733: LD_STRING Donaldson
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 3741 0 2
 743: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true ) ;
 744: LD_ADDR_EXP 5
 748: PUSH
 749: LD_STRING Frank
 751: PPUSH
 752: LD_INT 1
 754: PPUSH
 755: CALL 3741 0 2
 759: ST_TO_ADDR
// PlaceHumanInUnit ( JMM , amvj ) ;
 760: LD_EXP 1
 764: PPUSH
 765: LD_INT 32
 767: PPUSH
 768: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 772: LD_EXP 7
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: LD_INT 0
 782: PPUSH
 783: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 787: LD_EXP 7
 791: PPUSH
 792: LD_INT 32
 794: PPUSH
 795: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 799: LD_EXP 8
 803: PPUSH
 804: LD_INT 2
 806: PPUSH
 807: LD_INT 0
 809: PPUSH
 810: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 814: LD_EXP 9
 818: PPUSH
 819: LD_INT 2
 821: PPUSH
 822: LD_INT 0
 824: PPUSH
 825: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 829: LD_EXP 12
 833: PPUSH
 834: LD_INT 2
 836: PPUSH
 837: LD_INT 0
 839: PPUSH
 840: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 844: LD_EXP 10
 848: PPUSH
 849: LD_INT 2
 851: PPUSH
 852: LD_INT 0
 854: PPUSH
 855: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 859: LD_EXP 11
 863: PPUSH
 864: LD_INT 2
 866: PPUSH
 867: LD_INT 0
 869: PPUSH
 870: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 874: LD_EXP 4
 878: PPUSH
 879: LD_INT 2
 881: PPUSH
 882: LD_INT 0
 884: PPUSH
 885: CALL_OW 49
// if Lisa = false then
 889: LD_EXP 4
 893: PUSH
 894: LD_INT 0
 896: EQUAL
 897: IFFALSE 914
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 899: LD_EXP 2
 903: PPUSH
 904: LD_INT 2
 906: PPUSH
 907: LD_INT 0
 909: PPUSH
 910: CALL_OW 49
// if Lisa = false and Bobby = false then
 914: LD_EXP 4
 918: PUSH
 919: LD_INT 0
 921: EQUAL
 922: PUSH
 923: LD_EXP 2
 927: PUSH
 928: LD_INT 0
 930: EQUAL
 931: AND
 932: IFFALSE 949
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 934: LD_EXP 3
 938: PPUSH
 939: LD_INT 2
 941: PPUSH
 942: LD_INT 0
 944: PPUSH
 945: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
 949: LD_EXP 4
 953: PUSH
 954: LD_INT 0
 956: EQUAL
 957: PUSH
 958: LD_EXP 2
 962: PUSH
 963: LD_INT 0
 965: EQUAL
 966: AND
 967: PUSH
 968: LD_EXP 3
 972: PUSH
 973: LD_INT 0
 975: EQUAL
 976: AND
 977: IFFALSE 994
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
 979: LD_EXP 6
 983: PPUSH
 984: LD_INT 2
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL_OW 49
// end ;
 994: LD_VAR 0 1
 998: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
 999: LD_INT 0
1001: PPUSH
1002: PPUSH
1003: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1004: LD_EXP 13
1008: PPUSH
1009: LD_INT 10
1011: PPUSH
1012: LD_INT 0
1014: PPUSH
1015: CALL_OW 49
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1019: LD_EXP 5
1023: PPUSH
1024: LD_INT 10
1026: PPUSH
1027: LD_INT 0
1029: PPUSH
1030: CALL_OW 49
// uc_nation = 1 ;
1034: LD_ADDR_OWVAR 21
1038: PUSH
1039: LD_INT 1
1041: ST_TO_ADDR
// uc_side = 4 ;
1042: LD_ADDR_OWVAR 20
1046: PUSH
1047: LD_INT 4
1049: ST_TO_ADDR
// hc_class := 3 ;
1050: LD_ADDR_OWVAR 28
1054: PUSH
1055: LD_INT 3
1057: ST_TO_ADDR
// hc_sex := sex_male ;
1058: LD_ADDR_OWVAR 27
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1066: LD_ADDR_OWVAR 33
1070: PUSH
1071: LD_STRING SecondCharsGal
1073: ST_TO_ADDR
// hc_face_number := 53 ;
1074: LD_ADDR_OWVAR 34
1078: PUSH
1079: LD_INT 53
1081: ST_TO_ADDR
// hc_name := Freddie Warner ;
1082: LD_ADDR_OWVAR 26
1086: PUSH
1087: LD_STRING Freddie Warner
1089: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1090: LD_ADDR_OWVAR 29
1094: PUSH
1095: LD_INT 8
1097: PUSH
1098: LD_INT 11
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1105: LD_ADDR_OWVAR 30
1109: PUSH
1110: LD_INT 0
1112: PUSH
1113: LD_INT 0
1115: PUSH
1116: LD_INT 1
1118: PUSH
1119: LD_INT 0
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: LIST
1127: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1128: LD_ADDR_OWVAR 31
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: LD_INT 3
1141: PUSH
1142: LD_INT 0
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: LIST
1149: LIST
1150: ST_TO_ADDR
// un = CreateHuman ;
1151: LD_ADDR_VAR 0 3
1155: PUSH
1156: CALL_OW 44
1160: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1161: LD_VAR 0 3
1165: PPUSH
1166: LD_INT 10
1168: PPUSH
1169: LD_INT 0
1171: PPUSH
1172: CALL_OW 49
// hc_class := 1 ;
1176: LD_ADDR_OWVAR 28
1180: PUSH
1181: LD_INT 1
1183: ST_TO_ADDR
// hc_sex := sex_male ;
1184: LD_ADDR_OWVAR 27
1188: PUSH
1189: LD_INT 1
1191: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1192: LD_ADDR_OWVAR 33
1196: PUSH
1197: LD_STRING SecondCharsGal
1199: ST_TO_ADDR
// hc_face_number := 56 ;
1200: LD_ADDR_OWVAR 34
1204: PUSH
1205: LD_INT 56
1207: ST_TO_ADDR
// hc_name := Mel Brennan ;
1208: LD_ADDR_OWVAR 26
1212: PUSH
1213: LD_STRING Mel Brennan
1215: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1216: LD_ADDR_OWVAR 29
1220: PUSH
1221: LD_INT 12
1223: PUSH
1224: LD_INT 11
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1231: LD_ADDR_OWVAR 30
1235: PUSH
1236: LD_INT 1
1238: PUSH
1239: LD_INT 1
1241: PUSH
1242: LD_INT 0
1244: PUSH
1245: LD_INT 0
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: LIST
1252: LIST
1253: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1254: LD_ADDR_OWVAR 31
1258: PUSH
1259: LD_INT 2
1261: PUSH
1262: LD_INT 1
1264: PUSH
1265: LD_INT 1
1267: PUSH
1268: LD_INT 0
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: LIST
1275: LIST
1276: ST_TO_ADDR
// un = CreateHuman ;
1277: LD_ADDR_VAR 0 3
1281: PUSH
1282: CALL_OW 44
1286: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1287: LD_VAR 0 3
1291: PPUSH
1292: LD_INT 10
1294: PPUSH
1295: LD_INT 0
1297: PPUSH
1298: CALL_OW 49
// hc_class := 1 ;
1302: LD_ADDR_OWVAR 28
1306: PUSH
1307: LD_INT 1
1309: ST_TO_ADDR
// hc_sex := sex_male ;
1310: LD_ADDR_OWVAR 27
1314: PUSH
1315: LD_INT 1
1317: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1318: LD_ADDR_OWVAR 33
1322: PUSH
1323: LD_STRING AmGalRemake
1325: ST_TO_ADDR
// hc_face_number := 5 ;
1326: LD_ADDR_OWVAR 34
1330: PUSH
1331: LD_INT 5
1333: ST_TO_ADDR
// hc_name := Bob Joplin ;
1334: LD_ADDR_OWVAR 26
1338: PUSH
1339: LD_STRING Bob Joplin
1341: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1342: LD_ADDR_OWVAR 29
1346: PUSH
1347: LD_INT 10
1349: PUSH
1350: LD_INT 11
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1357: LD_ADDR_OWVAR 30
1361: PUSH
1362: LD_INT 0
1364: PUSH
1365: LD_INT 1
1367: PUSH
1368: LD_INT 1
1370: PUSH
1371: LD_INT 0
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1380: LD_ADDR_OWVAR 31
1384: PUSH
1385: LD_INT 3
1387: PUSH
1388: LD_INT 1
1390: PUSH
1391: LD_INT 1
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: LIST
1401: LIST
1402: ST_TO_ADDR
// un = CreateHuman ;
1403: LD_ADDR_VAR 0 3
1407: PUSH
1408: CALL_OW 44
1412: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1413: LD_VAR 0 3
1417: PPUSH
1418: LD_INT 10
1420: PPUSH
1421: LD_INT 0
1423: PPUSH
1424: CALL_OW 49
// hc_class := 3 ;
1428: LD_ADDR_OWVAR 28
1432: PUSH
1433: LD_INT 3
1435: ST_TO_ADDR
// hc_sex := sex_female ;
1436: LD_ADDR_OWVAR 27
1440: PUSH
1441: LD_INT 2
1443: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1444: LD_ADDR_OWVAR 33
1448: PUSH
1449: LD_STRING AmGalRemake
1451: ST_TO_ADDR
// hc_face_number := 4 ;
1452: LD_ADDR_OWVAR 34
1456: PUSH
1457: LD_INT 4
1459: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1460: LD_ADDR_OWVAR 26
1464: PUSH
1465: LD_STRING Elizabeth Whitney
1467: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1468: LD_ADDR_OWVAR 29
1472: PUSH
1473: LD_INT 9
1475: PUSH
1476: LD_INT 11
1478: PUSH
1479: EMPTY
1480: LIST
1481: LIST
1482: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1483: LD_ADDR_OWVAR 30
1487: PUSH
1488: LD_INT 0
1490: PUSH
1491: LD_INT 0
1493: PUSH
1494: LD_INT 2
1496: PUSH
1497: LD_INT 0
1499: PUSH
1500: EMPTY
1501: LIST
1502: LIST
1503: LIST
1504: LIST
1505: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1506: LD_ADDR_OWVAR 31
1510: PUSH
1511: LD_INT 2
1513: PUSH
1514: LD_INT 2
1516: PUSH
1517: LD_INT 4
1519: PUSH
1520: LD_INT 2
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: LIST
1527: LIST
1528: ST_TO_ADDR
// un = CreateHuman ;
1529: LD_ADDR_VAR 0 3
1533: PUSH
1534: CALL_OW 44
1538: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1539: LD_VAR 0 3
1543: PPUSH
1544: LD_INT 10
1546: PPUSH
1547: LD_INT 0
1549: PPUSH
1550: CALL_OW 49
// InitHc ;
1554: CALL_OW 19
// end ;
1558: LD_VAR 0 1
1562: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1563: LD_INT 0
1565: PPUSH
1566: PPUSH
1567: PPUSH
// uc_nation = 1 ;
1568: LD_ADDR_OWVAR 21
1572: PUSH
1573: LD_INT 1
1575: ST_TO_ADDR
// uc_side = 1 ;
1576: LD_ADDR_OWVAR 20
1580: PUSH
1581: LD_INT 1
1583: ST_TO_ADDR
// hc_class := 1 ;
1584: LD_ADDR_OWVAR 28
1588: PUSH
1589: LD_INT 1
1591: ST_TO_ADDR
// hc_sex := sex_male ;
1592: LD_ADDR_OWVAR 27
1596: PUSH
1597: LD_INT 1
1599: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1600: LD_ADDR_OWVAR 33
1604: PUSH
1605: LD_STRING SecondCharsGal
1607: ST_TO_ADDR
// hc_face_number := 59 ;
1608: LD_ADDR_OWVAR 34
1612: PUSH
1613: LD_INT 59
1615: ST_TO_ADDR
// hc_name := Max Gray ;
1616: LD_ADDR_OWVAR 26
1620: PUSH
1621: LD_STRING Max Gray
1623: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1624: LD_ADDR_OWVAR 29
1628: PUSH
1629: LD_INT 9
1631: PUSH
1632: LD_INT 11
1634: PUSH
1635: EMPTY
1636: LIST
1637: LIST
1638: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1639: LD_ADDR_OWVAR 30
1643: PUSH
1644: LD_INT 1
1646: PUSH
1647: LD_INT 0
1649: PUSH
1650: LD_INT 0
1652: PUSH
1653: LD_INT 0
1655: PUSH
1656: EMPTY
1657: LIST
1658: LIST
1659: LIST
1660: LIST
1661: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1662: LD_ADDR_OWVAR 31
1666: PUSH
1667: LD_INT 2
1669: PUSH
1670: LD_INT 1
1672: PUSH
1673: LD_INT 1
1675: PUSH
1676: LD_INT 0
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: ST_TO_ADDR
// un = CreateHuman ;
1685: LD_ADDR_VAR 0 4
1689: PUSH
1690: CALL_OW 44
1694: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1695: LD_VAR 0 4
1699: PPUSH
1700: LD_INT 11
1702: PPUSH
1703: LD_INT 0
1705: PPUSH
1706: CALL_OW 49
// hc_class := 1 ;
1710: LD_ADDR_OWVAR 28
1714: PUSH
1715: LD_INT 1
1717: ST_TO_ADDR
// hc_sex := sex_male ;
1718: LD_ADDR_OWVAR 27
1722: PUSH
1723: LD_INT 1
1725: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1726: LD_ADDR_OWVAR 33
1730: PUSH
1731: LD_STRING SecondCharsGal
1733: ST_TO_ADDR
// hc_face_number := 54 ;
1734: LD_ADDR_OWVAR 34
1738: PUSH
1739: LD_INT 54
1741: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1742: LD_ADDR_OWVAR 26
1746: PUSH
1747: LD_STRING Luigi Ghbellin
1749: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1750: LD_ADDR_OWVAR 29
1754: PUSH
1755: LD_INT 11
1757: PUSH
1758: LD_INT 11
1760: PUSH
1761: EMPTY
1762: LIST
1763: LIST
1764: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1765: LD_ADDR_OWVAR 30
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: LD_INT 0
1775: PUSH
1776: LD_INT 0
1778: PUSH
1779: LD_INT 0
1781: PUSH
1782: EMPTY
1783: LIST
1784: LIST
1785: LIST
1786: LIST
1787: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1788: LD_ADDR_OWVAR 31
1792: PUSH
1793: LD_INT 1
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: LD_INT 0
1801: PUSH
1802: LD_INT 1
1804: PUSH
1805: EMPTY
1806: LIST
1807: LIST
1808: LIST
1809: LIST
1810: ST_TO_ADDR
// un = CreateHuman ;
1811: LD_ADDR_VAR 0 4
1815: PUSH
1816: CALL_OW 44
1820: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1821: LD_VAR 0 4
1825: PPUSH
1826: LD_INT 11
1828: PPUSH
1829: LD_INT 0
1831: PPUSH
1832: CALL_OW 49
// hc_class := 3 ;
1836: LD_ADDR_OWVAR 28
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// hc_sex := sex_male ;
1844: LD_ADDR_OWVAR 27
1848: PUSH
1849: LD_INT 1
1851: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1852: LD_ADDR_OWVAR 33
1856: PUSH
1857: LD_STRING AmGalRemake
1859: ST_TO_ADDR
// hc_face_number := 6 ;
1860: LD_ADDR_OWVAR 34
1864: PUSH
1865: LD_INT 6
1867: ST_TO_ADDR
// hc_name := Leon Carter ;
1868: LD_ADDR_OWVAR 26
1872: PUSH
1873: LD_STRING Leon Carter
1875: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1876: LD_ADDR_OWVAR 29
1880: PUSH
1881: LD_INT 10
1883: PUSH
1884: LD_INT 9
1886: PUSH
1887: EMPTY
1888: LIST
1889: LIST
1890: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1891: LD_ADDR_OWVAR 30
1895: PUSH
1896: LD_INT 0
1898: PUSH
1899: LD_INT 1
1901: PUSH
1902: LD_INT 1
1904: PUSH
1905: LD_INT 0
1907: PUSH
1908: EMPTY
1909: LIST
1910: LIST
1911: LIST
1912: LIST
1913: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1914: LD_ADDR_OWVAR 31
1918: PUSH
1919: LD_INT 0
1921: PUSH
1922: LD_INT 1
1924: PUSH
1925: LD_INT 3
1927: PUSH
1928: LD_INT 0
1930: PUSH
1931: EMPTY
1932: LIST
1933: LIST
1934: LIST
1935: LIST
1936: ST_TO_ADDR
// un = CreateHuman ;
1937: LD_ADDR_VAR 0 4
1941: PUSH
1942: CALL_OW 44
1946: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1947: LD_VAR 0 4
1951: PPUSH
1952: LD_INT 11
1954: PPUSH
1955: LD_INT 0
1957: PPUSH
1958: CALL_OW 49
// if count = 4 then
1962: LD_VAR 0 1
1966: PUSH
1967: LD_INT 4
1969: EQUAL
1970: IFFALSE 2098
// begin hc_class := 1 ;
1972: LD_ADDR_OWVAR 28
1976: PUSH
1977: LD_INT 1
1979: ST_TO_ADDR
// hc_sex := sex_male ;
1980: LD_ADDR_OWVAR 27
1984: PUSH
1985: LD_INT 1
1987: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1988: LD_ADDR_OWVAR 33
1992: PUSH
1993: LD_STRING SecondCharsGal
1995: ST_TO_ADDR
// hc_face_number := 34 ;
1996: LD_ADDR_OWVAR 34
2000: PUSH
2001: LD_INT 34
2003: ST_TO_ADDR
// hc_name := Ian Hill ;
2004: LD_ADDR_OWVAR 26
2008: PUSH
2009: LD_STRING Ian Hill
2011: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2012: LD_ADDR_OWVAR 29
2016: PUSH
2017: LD_INT 10
2019: PUSH
2020: LD_INT 12
2022: PUSH
2023: EMPTY
2024: LIST
2025: LIST
2026: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2027: LD_ADDR_OWVAR 30
2031: PUSH
2032: LD_INT 0
2034: PUSH
2035: LD_INT 0
2037: PUSH
2038: LD_INT 1
2040: PUSH
2041: LD_INT 0
2043: PUSH
2044: EMPTY
2045: LIST
2046: LIST
2047: LIST
2048: LIST
2049: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2050: LD_ADDR_OWVAR 31
2054: PUSH
2055: LD_INT 2
2057: PUSH
2058: LD_INT 0
2060: PUSH
2061: LD_INT 1
2063: PUSH
2064: LD_INT 0
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: LIST
2071: LIST
2072: ST_TO_ADDR
// un = CreateHuman ;
2073: LD_ADDR_VAR 0 4
2077: PUSH
2078: CALL_OW 44
2082: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2083: LD_VAR 0 4
2087: PPUSH
2088: LD_INT 11
2090: PPUSH
2091: LD_INT 0
2093: PPUSH
2094: CALL_OW 49
// end ; if count = 5 then
2098: LD_VAR 0 1
2102: PUSH
2103: LD_INT 5
2105: EQUAL
2106: IFFALSE 2360
// begin hc_class := 1 ;
2108: LD_ADDR_OWVAR 28
2112: PUSH
2113: LD_INT 1
2115: ST_TO_ADDR
// hc_sex := sex_male ;
2116: LD_ADDR_OWVAR 27
2120: PUSH
2121: LD_INT 1
2123: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2124: LD_ADDR_OWVAR 33
2128: PUSH
2129: LD_STRING SecondCharsGal
2131: ST_TO_ADDR
// hc_face_number := 34 ;
2132: LD_ADDR_OWVAR 34
2136: PUSH
2137: LD_INT 34
2139: ST_TO_ADDR
// hc_name := Ian Hill ;
2140: LD_ADDR_OWVAR 26
2144: PUSH
2145: LD_STRING Ian Hill
2147: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2148: LD_ADDR_OWVAR 29
2152: PUSH
2153: LD_INT 10
2155: PUSH
2156: LD_INT 12
2158: PUSH
2159: EMPTY
2160: LIST
2161: LIST
2162: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2163: LD_ADDR_OWVAR 30
2167: PUSH
2168: LD_INT 0
2170: PUSH
2171: LD_INT 0
2173: PUSH
2174: LD_INT 1
2176: PUSH
2177: LD_INT 0
2179: PUSH
2180: EMPTY
2181: LIST
2182: LIST
2183: LIST
2184: LIST
2185: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2186: LD_ADDR_OWVAR 31
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 0
2196: PUSH
2197: LD_INT 1
2199: PUSH
2200: LD_INT 0
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: LIST
2207: LIST
2208: ST_TO_ADDR
// un = CreateHuman ;
2209: LD_ADDR_VAR 0 4
2213: PUSH
2214: CALL_OW 44
2218: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2219: LD_VAR 0 4
2223: PPUSH
2224: LD_INT 11
2226: PPUSH
2227: LD_INT 0
2229: PPUSH
2230: CALL_OW 49
// hc_class := 1 ;
2234: LD_ADDR_OWVAR 28
2238: PUSH
2239: LD_INT 1
2241: ST_TO_ADDR
// hc_sex := sex_female ;
2242: LD_ADDR_OWVAR 27
2246: PUSH
2247: LD_INT 2
2249: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2250: LD_ADDR_OWVAR 33
2254: PUSH
2255: LD_STRING SecondCharsGal
2257: ST_TO_ADDR
// hc_face_number := 41 ;
2258: LD_ADDR_OWVAR 34
2262: PUSH
2263: LD_INT 41
2265: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2266: LD_ADDR_OWVAR 26
2270: PUSH
2271: LD_STRING Kate Wadsworth
2273: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2274: LD_ADDR_OWVAR 29
2278: PUSH
2279: LD_INT 9
2281: PUSH
2282: LD_INT 9
2284: PUSH
2285: EMPTY
2286: LIST
2287: LIST
2288: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2289: LD_ADDR_OWVAR 30
2293: PUSH
2294: LD_INT 0
2296: PUSH
2297: LD_INT 2
2299: PUSH
2300: LD_INT 0
2302: PUSH
2303: LD_INT 0
2305: PUSH
2306: EMPTY
2307: LIST
2308: LIST
2309: LIST
2310: LIST
2311: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2312: LD_ADDR_OWVAR 31
2316: PUSH
2317: LD_INT 2
2319: PUSH
2320: LD_INT 3
2322: PUSH
2323: LD_INT 1
2325: PUSH
2326: LD_INT 0
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: LIST
2333: LIST
2334: ST_TO_ADDR
// un = CreateHuman ;
2335: LD_ADDR_VAR 0 4
2339: PUSH
2340: CALL_OW 44
2344: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2345: LD_VAR 0 4
2349: PPUSH
2350: LD_INT 11
2352: PPUSH
2353: LD_INT 0
2355: PPUSH
2356: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2360: LD_INT 11
2362: PPUSH
2363: LD_INT 22
2365: PUSH
2366: LD_INT 1
2368: PUSH
2369: EMPTY
2370: LIST
2371: LIST
2372: PUSH
2373: LD_INT 21
2375: PUSH
2376: LD_INT 1
2378: PUSH
2379: EMPTY
2380: LIST
2381: LIST
2382: PUSH
2383: LD_INT 26
2385: PUSH
2386: LD_INT 1
2388: PUSH
2389: EMPTY
2390: LIST
2391: LIST
2392: PUSH
2393: EMPTY
2394: LIST
2395: LIST
2396: LIST
2397: PPUSH
2398: CALL_OW 70
2402: PUSH
2403: LD_INT 1
2405: ARRAY
2406: PPUSH
2407: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2411: LD_INT 11
2413: PPUSH
2414: LD_INT 22
2416: PUSH
2417: LD_INT 1
2419: PUSH
2420: EMPTY
2421: LIST
2422: LIST
2423: PUSH
2424: LD_INT 21
2426: PUSH
2427: LD_INT 1
2429: PUSH
2430: EMPTY
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 26
2436: PUSH
2437: LD_INT 1
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PUSH
2444: EMPTY
2445: LIST
2446: LIST
2447: LIST
2448: PPUSH
2449: CALL_OW 70
2453: PUSH
2454: LD_INT 1
2456: ARRAY
2457: PPUSH
2458: LD_STRING D6-Sol3-1
2460: PPUSH
2461: CALL_OW 88
// end ; end_of_file
2465: LD_VAR 0 2
2469: RET
// export function PrepareRussianCommander ; begin
2470: LD_INT 0
2472: PPUSH
// uc_side = 3 ;
2473: LD_ADDR_OWVAR 20
2477: PUSH
2478: LD_INT 3
2480: ST_TO_ADDR
// uc_nation = 3 ;
2481: LD_ADDR_OWVAR 21
2485: PUSH
2486: LD_INT 3
2488: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2489: LD_ADDR_EXP 15
2493: PUSH
2494: LD_STRING Stolypin
2496: PPUSH
2497: CALL_OW 25
2501: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2502: LD_EXP 15
2506: PPUSH
2507: LD_INT 21
2509: PPUSH
2510: CALL_OW 52
// end ;
2514: LD_VAR 0 1
2518: RET
// export function PrepareRussianBase ; var i ; begin
2519: LD_INT 0
2521: PPUSH
2522: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2523: LD_INT 3
2525: PPUSH
2526: LD_INT 3
2528: PPUSH
2529: LD_INT 22
2531: PPUSH
2532: LD_EXP 16
2536: PPUSH
2537: LD_EXP 17
2541: PPUSH
2542: CALL_OW 12
2546: PPUSH
2547: LD_INT 1
2549: PPUSH
2550: LD_INT 2
2552: PPUSH
2553: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2557: LD_INT 3
2559: PPUSH
2560: LD_INT 3
2562: PPUSH
2563: LD_INT 21
2565: PPUSH
2566: LD_EXP 16
2570: PPUSH
2571: LD_EXP 17
2575: PPUSH
2576: CALL_OW 12
2580: PPUSH
2581: LD_INT 2
2583: PPUSH
2584: LD_INT 3
2586: PPUSH
2587: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2591: LD_INT 3
2593: PPUSH
2594: LD_INT 3
2596: PPUSH
2597: LD_INT 1
2599: PPUSH
2600: LD_EXP 16
2604: PPUSH
2605: LD_EXP 17
2609: PPUSH
2610: CALL_OW 12
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 2
2620: PPUSH
2621: CALL 3804 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2625: LD_INT 3
2627: PPUSH
2628: LD_INT 3
2630: PPUSH
2631: LD_INT 24
2633: PPUSH
2634: LD_EXP 16
2638: PPUSH
2639: LD_EXP 17
2643: PPUSH
2644: CALL_OW 12
2648: PPUSH
2649: LD_INT 3
2651: PPUSH
2652: LD_INT 6
2654: PPUSH
2655: CALL 3804 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2659: LD_ADDR_VAR 0 2
2663: PUSH
2664: LD_INT 22
2666: PUSH
2667: LD_INT 3
2669: PUSH
2670: EMPTY
2671: LIST
2672: LIST
2673: PUSH
2674: LD_INT 30
2676: PUSH
2677: LD_INT 32
2679: PUSH
2680: EMPTY
2681: LIST
2682: LIST
2683: PUSH
2684: EMPTY
2685: LIST
2686: LIST
2687: PPUSH
2688: CALL_OW 69
2692: PUSH
2693: FOR_IN
2694: IFFALSE 2734
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2696: LD_INT 3
2698: PPUSH
2699: LD_INT 3
2701: PPUSH
2702: LD_VAR 0 2
2706: PPUSH
2707: LD_EXP 16
2711: PPUSH
2712: LD_EXP 17
2716: PPUSH
2717: CALL_OW 12
2721: PPUSH
2722: LD_INT 1
2724: PPUSH
2725: LD_INT 1
2727: PPUSH
2728: CALL 3804 0 6
2732: GO 2693
2734: POP
2735: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2736: LD_ADDR_VAR 0 2
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 30
2753: PUSH
2754: LD_INT 31
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: FOR_IN
2771: IFFALSE 2799
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2773: LD_EXP 16
2777: PPUSH
2778: LD_EXP 17
2782: PPUSH
2783: CALL_OW 12
2787: PPUSH
2788: LD_VAR 0 2
2792: PPUSH
2793: CALL 3914 0 2
2797: GO 2770
2799: POP
2800: POP
// end ;
2801: LD_VAR 0 1
2805: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2806: LD_INT 0
2808: PPUSH
2809: PPUSH
2810: PPUSH
2811: PPUSH
// uc_side = 6 ;
2812: LD_ADDR_OWVAR 20
2816: PUSH
2817: LD_INT 6
2819: ST_TO_ADDR
// uc_nation = 3 ;
2820: LD_ADDR_OWVAR 21
2824: PUSH
2825: LD_INT 3
2827: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2828: LD_ADDR_VAR 0 2
2832: PUSH
2833: DOUBLE
2834: LD_INT 1
2836: DEC
2837: ST_TO_ADDR
2838: LD_INT 1
2840: PUSH
2841: LD_INT 2
2843: PUSH
2844: LD_INT 1
2846: PPUSH
2847: LD_INT 2
2849: PPUSH
2850: CALL_OW 12
2854: PUSH
2855: EMPTY
2856: LIST
2857: LIST
2858: LIST
2859: PUSH
2860: LD_OWVAR 67
2864: ARRAY
2865: PUSH
2866: FOR_TO
2867: IFFALSE 3027
// begin vc_engine = 1 ;
2869: LD_ADDR_OWVAR 39
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// vc_control = 1 ;
2877: LD_ADDR_OWVAR 38
2881: PUSH
2882: LD_INT 1
2884: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2885: LD_ADDR_OWVAR 40
2889: PUSH
2890: LD_INT 42
2892: PUSH
2893: LD_INT 42
2895: PUSH
2896: LD_INT 43
2898: PUSH
2899: EMPTY
2900: LIST
2901: LIST
2902: LIST
2903: PUSH
2904: LD_OWVAR 67
2908: ARRAY
2909: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2910: LD_ADDR_OWVAR 37
2914: PUSH
2915: LD_INT 21
2917: PUSH
2918: LD_INT 22
2920: PUSH
2921: LD_INT 22
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: LD_OWVAR 67
2933: ARRAY
2934: ST_TO_ADDR
// veh = CreateVehicle ;
2935: LD_ADDR_VAR 0 3
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
2945: LD_VAR 0 3
2949: PPUSH
2950: LD_INT 3
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 49
// hc_gallery =  ;
2960: LD_ADDR_OWVAR 33
2964: PUSH
2965: LD_STRING 
2967: ST_TO_ADDR
// hc_name =  ;
2968: LD_ADDR_OWVAR 26
2972: PUSH
2973: LD_STRING 
2975: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
2976: LD_INT 0
2978: PPUSH
2979: LD_INT 3
2981: PPUSH
2982: LD_EXP 16
2986: PPUSH
2987: LD_EXP 17
2991: PPUSH
2992: CALL_OW 12
2996: PPUSH
2997: CALL_OW 380
// un = CreateHuman ;
3001: LD_ADDR_VAR 0 4
3005: PUSH
3006: CALL_OW 44
3010: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3011: LD_VAR 0 4
3015: PPUSH
3016: LD_VAR 0 3
3020: PPUSH
3021: CALL_OW 52
// end ;
3025: GO 2866
3027: POP
3028: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3029: LD_INT 0
3031: PPUSH
3032: LD_INT 2
3034: PPUSH
3035: LD_EXP 16
3039: PPUSH
3040: LD_EXP 17
3044: PPUSH
3045: CALL_OW 12
3049: PUSH
3050: LD_INT 2
3052: PLUS
3053: PPUSH
3054: CALL_OW 380
// un = CreateHuman ;
3058: LD_ADDR_VAR 0 4
3062: PUSH
3063: CALL_OW 44
3067: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3068: LD_VAR 0 4
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: LD_INT 0
3078: PPUSH
3079: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3083: LD_INT 0
3085: PPUSH
3086: LD_INT 4
3088: PPUSH
3089: LD_EXP 16
3093: PPUSH
3094: LD_EXP 17
3098: PPUSH
3099: CALL_OW 12
3103: PUSH
3104: LD_INT 2
3106: PLUS
3107: PPUSH
3108: CALL_OW 380
// un = CreateHuman ;
3112: LD_ADDR_VAR 0 4
3116: PUSH
3117: CALL_OW 44
3121: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3122: LD_VAR 0 4
3126: PPUSH
3127: LD_INT 3
3129: PPUSH
3130: LD_INT 0
3132: PPUSH
3133: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3137: LD_ADDR_VAR 0 2
3141: PUSH
3142: DOUBLE
3143: LD_INT 1
3145: DEC
3146: ST_TO_ADDR
3147: LD_INT 2
3149: PUSH
3150: LD_INT 3
3152: PUSH
3153: LD_INT 3
3155: PUSH
3156: EMPTY
3157: LIST
3158: LIST
3159: LIST
3160: PUSH
3161: LD_OWVAR 67
3165: ARRAY
3166: PUSH
3167: LD_INT 1
3169: PPUSH
3170: LD_INT 3
3172: PPUSH
3173: CALL_OW 12
3177: PLUS
3178: PUSH
3179: FOR_TO
3180: IFFALSE 3250
// begin hc_gallery =  ;
3182: LD_ADDR_OWVAR 33
3186: PUSH
3187: LD_STRING 
3189: ST_TO_ADDR
// hc_name =  ;
3190: LD_ADDR_OWVAR 26
3194: PUSH
3195: LD_STRING 
3197: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3198: LD_INT 0
3200: PPUSH
3201: LD_INT 1
3203: PPUSH
3204: LD_EXP 16
3208: PPUSH
3209: LD_EXP 17
3213: PPUSH
3214: CALL_OW 12
3218: PPUSH
3219: CALL_OW 380
// un = CreateHuman ;
3223: LD_ADDR_VAR 0 4
3227: PUSH
3228: CALL_OW 44
3232: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3233: LD_VAR 0 4
3237: PPUSH
3238: LD_INT 3
3240: PPUSH
3241: LD_INT 0
3243: PPUSH
3244: CALL_OW 49
// end ;
3248: GO 3179
3250: POP
3251: POP
// vc_engine = 1 ;
3252: LD_ADDR_OWVAR 39
3256: PUSH
3257: LD_INT 1
3259: ST_TO_ADDR
// vc_control = 1 ;
3260: LD_ADDR_OWVAR 38
3264: PUSH
3265: LD_INT 1
3267: ST_TO_ADDR
// vc_weapon = 51 ;
3268: LD_ADDR_OWVAR 40
3272: PUSH
3273: LD_INT 51
3275: ST_TO_ADDR
// vc_chassis = 22 ;
3276: LD_ADDR_OWVAR 37
3280: PUSH
3281: LD_INT 22
3283: ST_TO_ADDR
// veh = CreateVehicle ;
3284: LD_ADDR_VAR 0 3
3288: PUSH
3289: CALL_OW 45
3293: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3294: LD_VAR 0 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 0
3304: PPUSH
3305: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3309: LD_VAR 0 3
3313: PPUSH
3314: LD_INT 1
3316: PPUSH
3317: LD_INT 100
3319: PPUSH
3320: CALL_OW 290
// hc_gallery =  ;
3324: LD_ADDR_OWVAR 33
3328: PUSH
3329: LD_STRING 
3331: ST_TO_ADDR
// hc_name =  ;
3332: LD_ADDR_OWVAR 26
3336: PUSH
3337: LD_STRING 
3339: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3340: LD_INT 0
3342: PPUSH
3343: LD_INT 3
3345: PPUSH
3346: LD_EXP 16
3350: PPUSH
3351: LD_EXP 17
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: CALL_OW 380
// un = CreateHuman ;
3365: LD_ADDR_VAR 0 4
3369: PUSH
3370: CALL_OW 44
3374: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3375: LD_VAR 0 4
3379: PPUSH
3380: LD_VAR 0 3
3384: PPUSH
3385: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3389: LD_ADDR_VAR 0 2
3393: PUSH
3394: LD_INT 22
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 1
3406: PUSH
3407: LD_INT 3
3409: PUSH
3410: LD_INT 25
3412: PUSH
3413: LD_INT 2
3415: PUSH
3416: EMPTY
3417: LIST
3418: LIST
3419: PUSH
3420: EMPTY
3421: LIST
3422: LIST
3423: PUSH
3424: LD_INT 3
3426: PUSH
3427: LD_INT 25
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: EMPTY
3434: LIST
3435: LIST
3436: PUSH
3437: EMPTY
3438: LIST
3439: LIST
3440: PUSH
3441: EMPTY
3442: LIST
3443: LIST
3444: LIST
3445: PUSH
3446: EMPTY
3447: LIST
3448: LIST
3449: PPUSH
3450: CALL_OW 69
3454: PUSH
3455: FOR_IN
3456: IFFALSE 3475
// ComAgressiveMove ( i , 45 , 46 ) ;
3458: LD_VAR 0 2
3462: PPUSH
3463: LD_INT 45
3465: PPUSH
3466: LD_INT 46
3468: PPUSH
3469: CALL_OW 114
3473: GO 3455
3475: POP
3476: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3477: LD_ADDR_VAR 0 2
3481: PUSH
3482: LD_INT 22
3484: PUSH
3485: LD_INT 6
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 25
3494: PUSH
3495: LD_INT 2
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PPUSH
3506: CALL_OW 69
3510: PUSH
3511: FOR_IN
3512: IFFALSE 3543
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3514: LD_ADDR_EXP 21
3518: PUSH
3519: LD_VAR 0 2
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: LD_INT 48
3529: PPUSH
3530: LD_INT 55
3532: PPUSH
3533: LD_INT 5
3535: PPUSH
3536: CALL_OW 145
3540: ST_TO_ADDR
3541: GO 3511
3543: POP
3544: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3545: LD_ADDR_VAR 0 2
3549: PUSH
3550: LD_INT 22
3552: PUSH
3553: LD_INT 6
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PUSH
3560: LD_INT 25
3562: PUSH
3563: LD_INT 4
3565: PUSH
3566: EMPTY
3567: LIST
3568: LIST
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: PPUSH
3574: CALL_OW 69
3578: PUSH
3579: FOR_IN
3580: IFFALSE 3599
// ComMoveXY ( i , 39 , 55 ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_INT 39
3589: PPUSH
3590: LD_INT 55
3592: PPUSH
3593: CALL_OW 111
3597: GO 3579
3599: POP
3600: POP
// end ;
3601: LD_VAR 0 1
3605: RET
// export function PrepareFirstAttack ; var i , un ; begin
3606: LD_INT 0
3608: PPUSH
3609: PPUSH
3610: PPUSH
// uc_side = 5 ;
3611: LD_ADDR_OWVAR 20
3615: PUSH
3616: LD_INT 5
3618: ST_TO_ADDR
// uc_nation = 3 ;
3619: LD_ADDR_OWVAR 21
3623: PUSH
3624: LD_INT 3
3626: ST_TO_ADDR
// for i := 1 to 4 do
3627: LD_ADDR_VAR 0 2
3631: PUSH
3632: DOUBLE
3633: LD_INT 1
3635: DEC
3636: ST_TO_ADDR
3637: LD_INT 4
3639: PUSH
3640: FOR_TO
3641: IFFALSE 3726
// begin hc_gallery =  ;
3643: LD_ADDR_OWVAR 33
3647: PUSH
3648: LD_STRING 
3650: ST_TO_ADDR
// hc_name =  ;
3651: LD_ADDR_OWVAR 26
3655: PUSH
3656: LD_STRING 
3658: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3659: LD_INT 0
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: LD_EXP 16
3669: PPUSH
3670: LD_EXP 17
3674: PPUSH
3675: CALL_OW 12
3679: PPUSH
3680: CALL_OW 380
// un = CreateHuman ;
3684: LD_ADDR_VAR 0 3
3688: PUSH
3689: CALL_OW 44
3693: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3694: LD_VAR 0 3
3698: PPUSH
3699: LD_INT 4
3701: PPUSH
3702: LD_INT 0
3704: PPUSH
3705: CALL_OW 49
// ComAgressiveMove ( un , 48 , 14 ) ;
3709: LD_VAR 0 3
3713: PPUSH
3714: LD_INT 48
3716: PPUSH
3717: LD_INT 14
3719: PPUSH
3720: CALL_OW 114
// end ;
3724: GO 3640
3726: POP
3727: POP
// firstRussianAttack = 1 ;
3728: LD_ADDR_EXP 23
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// end ; end_of_file
3736: LD_VAR 0 1
3740: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
// if exist_mode then
3745: LD_VAR 0 2
3749: IFFALSE 3774
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3751: LD_ADDR_VAR 0 4
3755: PUSH
3756: LD_EXP 45
3760: PUSH
3761: LD_VAR 0 1
3765: STR
3766: PPUSH
3767: CALL_OW 34
3771: ST_TO_ADDR
// end else
3772: GO 3789
// begin unit := NewCharacter ( ident ) ;
3774: LD_ADDR_VAR 0 4
3778: PUSH
3779: LD_VAR 0 1
3783: PPUSH
3784: CALL_OW 25
3788: ST_TO_ADDR
// end ; result := unit ;
3789: LD_ADDR_VAR 0 3
3793: PUSH
3794: LD_VAR 0 4
3798: ST_TO_ADDR
// end ;
3799: LD_VAR 0 3
3803: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3804: LD_INT 0
3806: PPUSH
3807: PPUSH
3808: PPUSH
3809: PPUSH
// for i = 1 to count do
3810: LD_ADDR_VAR 0 8
3814: PUSH
3815: DOUBLE
3816: LD_INT 1
3818: DEC
3819: ST_TO_ADDR
3820: LD_VAR 0 6
3824: PUSH
3825: FOR_TO
3826: IFFALSE 3907
// begin uc_side = side ;
3828: LD_ADDR_OWVAR 20
3832: PUSH
3833: LD_VAR 0 1
3837: ST_TO_ADDR
// uc_nation = nation ;
3838: LD_ADDR_OWVAR 21
3842: PUSH
3843: LD_VAR 0 2
3847: ST_TO_ADDR
// hc_gallery =  ;
3848: LD_ADDR_OWVAR 33
3852: PUSH
3853: LD_STRING 
3855: ST_TO_ADDR
// hc_name =  ;
3856: LD_ADDR_OWVAR 26
3860: PUSH
3861: LD_STRING 
3863: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3864: LD_INT 0
3866: PPUSH
3867: LD_VAR 0 5
3871: PPUSH
3872: LD_VAR 0 4
3876: PPUSH
3877: CALL_OW 380
// un = CreateHuman ;
3881: LD_ADDR_VAR 0 10
3885: PUSH
3886: CALL_OW 44
3890: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3891: LD_VAR 0 10
3895: PPUSH
3896: LD_VAR 0 3
3900: PPUSH
3901: CALL_OW 52
// end ;
3905: GO 3825
3907: POP
3908: POP
// end ;
3909: LD_VAR 0 7
3913: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
// uc_side := GetSide ( b ) ;
3919: LD_ADDR_OWVAR 20
3923: PUSH
3924: LD_VAR 0 2
3928: PPUSH
3929: CALL_OW 255
3933: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
3934: LD_ADDR_OWVAR 21
3938: PUSH
3939: LD_VAR 0 2
3943: PPUSH
3944: CALL_OW 248
3948: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
3949: LD_INT 0
3951: PPUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_VAR 0 1
3959: PPUSH
3960: CALL_OW 380
// un = CreateHuman ;
3964: LD_ADDR_VAR 0 4
3968: PUSH
3969: CALL_OW 44
3973: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
3974: LD_ADDR_VAR 0 5
3978: PUSH
3979: LD_VAR 0 2
3983: PPUSH
3984: CALL_OW 254
3988: PUSH
3989: LD_INT 3
3991: MINUS
3992: ST_TO_ADDR
// if dir < 0 then
3993: LD_VAR 0 5
3997: PUSH
3998: LD_INT 0
4000: LESS
4001: IFFALSE 4017
// dir := 6 + dir ;
4003: LD_ADDR_VAR 0 5
4007: PUSH
4008: LD_INT 6
4010: PUSH
4011: LD_VAR 0 5
4015: PLUS
4016: ST_TO_ADDR
// SetDir ( un , dir ) ;
4017: LD_VAR 0 4
4021: PPUSH
4022: LD_VAR 0 5
4026: PPUSH
4027: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4031: LD_VAR 0 4
4035: PPUSH
4036: LD_VAR 0 2
4040: PPUSH
4041: CALL_OW 52
// end ;
4045: LD_VAR 0 3
4049: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4050: LD_INT 0
4052: PPUSH
4053: PPUSH
4054: PPUSH
// rnd = rand ( 1 , characters ) ;
4055: LD_ADDR_VAR 0 6
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_VAR 0 1
4067: PPUSH
4068: CALL_OW 12
4072: ST_TO_ADDR
// for i = 1 to characters do
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: DOUBLE
4079: LD_INT 1
4081: DEC
4082: ST_TO_ADDR
4083: LD_VAR 0 1
4087: PUSH
4088: FOR_TO
4089: IFFALSE 4199
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4091: LD_VAR 0 5
4095: PUSH
4096: LD_VAR 0 6
4100: EQUAL
4101: PUSH
4102: LD_VAR 0 1
4106: PUSH
4107: LD_VAR 0 5
4111: ARRAY
4112: PPUSH
4113: CALL_OW 258
4117: PUSH
4118: LD_INT 1
4120: EQUAL
4121: AND
4122: IFFALSE 4144
// Say ( characters [ i ] , dialogMID ) ;
4124: LD_VAR 0 1
4128: PUSH
4129: LD_VAR 0 5
4133: ARRAY
4134: PPUSH
4135: LD_VAR 0 2
4139: PPUSH
4140: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4144: LD_VAR 0 5
4148: PUSH
4149: LD_VAR 0 6
4153: EQUAL
4154: PUSH
4155: LD_VAR 0 1
4159: PUSH
4160: LD_VAR 0 5
4164: ARRAY
4165: PPUSH
4166: CALL_OW 258
4170: PUSH
4171: LD_INT 2
4173: EQUAL
4174: AND
4175: IFFALSE 4197
// Say ( characters [ i ] , dialogFID ) ;
4177: LD_VAR 0 1
4181: PUSH
4182: LD_VAR 0 5
4186: ARRAY
4187: PPUSH
4188: LD_VAR 0 3
4192: PPUSH
4193: CALL_OW 88
// end ;
4197: GO 4088
4199: POP
4200: POP
// end ;
4201: LD_VAR 0 4
4205: RET
// export function PrepareDifficulty ; var tmp ; begin
4206: LD_INT 0
4208: PPUSH
4209: PPUSH
// if Difficulty = 1 then
4210: LD_OWVAR 67
4214: PUSH
4215: LD_INT 1
4217: EQUAL
4218: IFFALSE 4236
// begin RuSoldMinLevel = 0 ;
4220: LD_ADDR_EXP 16
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4228: LD_ADDR_EXP 17
4232: PUSH
4233: LD_INT 2
4235: ST_TO_ADDR
// end ; if Difficulty = 2 then
4236: LD_OWVAR 67
4240: PUSH
4241: LD_INT 2
4243: EQUAL
4244: IFFALSE 4352
// begin RuSoldMinLevel = 1 ;
4246: LD_ADDR_EXP 16
4250: PUSH
4251: LD_INT 1
4253: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4254: LD_ADDR_EXP 17
4258: PUSH
4259: LD_INT 2
4261: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4262: LD_INT 14
4264: PPUSH
4265: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4269: LD_INT 23
4271: PPUSH
4272: CALL_OW 64
// uc_nation = 3 ;
4276: LD_ADDR_OWVAR 21
4280: PUSH
4281: LD_INT 3
4283: ST_TO_ADDR
// uc_side = 3 ;
4284: LD_ADDR_OWVAR 20
4288: PUSH
4289: LD_INT 3
4291: ST_TO_ADDR
// bc_level = 5 ;
4292: LD_ADDR_OWVAR 43
4296: PUSH
4297: LD_INT 5
4299: ST_TO_ADDR
// bc_type = 32 ;
4300: LD_ADDR_OWVAR 42
4304: PUSH
4305: LD_INT 32
4307: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4308: LD_ADDR_VAR 0 2
4312: PUSH
4313: LD_INT 76
4315: PPUSH
4316: LD_INT 91
4318: PPUSH
4319: LD_INT 2
4321: PPUSH
4322: CALL_OW 47
4326: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_INT 43
4334: PPUSH
4335: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4339: LD_INT 51
4341: PPUSH
4342: LD_INT 3
4344: PPUSH
4345: LD_INT 1
4347: PPUSH
4348: CALL_OW 322
// end ; if Difficulty = 3 then
4352: LD_OWVAR 67
4356: PUSH
4357: LD_INT 3
4359: EQUAL
4360: IFFALSE 4536
// begin RuSoldMinLevel = 1 ;
4362: LD_ADDR_EXP 16
4366: PUSH
4367: LD_INT 1
4369: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4370: LD_ADDR_EXP 17
4374: PUSH
4375: LD_INT 3
4377: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4378: LD_INT 13
4380: PPUSH
4381: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4385: LD_INT 14
4387: PPUSH
4388: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4392: LD_INT 26
4394: PPUSH
4395: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4399: LD_INT 23
4401: PPUSH
4402: CALL_OW 64
// uc_nation = 3 ;
4406: LD_ADDR_OWVAR 21
4410: PUSH
4411: LD_INT 3
4413: ST_TO_ADDR
// uc_side = 3 ;
4414: LD_ADDR_OWVAR 20
4418: PUSH
4419: LD_INT 3
4421: ST_TO_ADDR
// bc_level = 5 ;
4422: LD_ADDR_OWVAR 43
4426: PUSH
4427: LD_INT 5
4429: ST_TO_ADDR
// bc_type = 32 ;
4430: LD_ADDR_OWVAR 42
4434: PUSH
4435: LD_INT 32
4437: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: LD_INT 76
4445: PPUSH
4446: LD_INT 91
4448: PPUSH
4449: LD_INT 2
4451: PPUSH
4452: CALL_OW 47
4456: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4457: LD_VAR 0 2
4461: PPUSH
4462: LD_INT 44
4464: PPUSH
4465: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4469: LD_ADDR_VAR 0 2
4473: PUSH
4474: LD_INT 83
4476: PPUSH
4477: LD_INT 84
4479: PPUSH
4480: LD_INT 2
4482: PPUSH
4483: CALL_OW 47
4487: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4488: LD_VAR 0 2
4492: PPUSH
4493: LD_INT 43
4495: PPUSH
4496: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4500: LD_INT 51
4502: PPUSH
4503: LD_INT 3
4505: PPUSH
4506: LD_INT 1
4508: PPUSH
4509: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4513: LD_INT 52
4515: PPUSH
4516: LD_INT 3
4518: PPUSH
4519: LD_INT 1
4521: PPUSH
4522: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4526: LD_INT 25
4528: PPUSH
4529: LD_INT 44
4531: PPUSH
4532: CALL_OW 431
// end ; end ;
4536: LD_VAR 0 1
4540: RET
// export function EnergyDialog ; begin
4541: LD_INT 0
4543: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4544: LD_INT 46
4546: PPUSH
4547: LD_INT 1
4549: PPUSH
4550: CALL_OW 321
4554: PUSH
4555: LD_INT 1
4557: EQUAL
4558: PUSH
4559: LD_INT 35
4561: PPUSH
4562: LD_INT 1
4564: PPUSH
4565: CALL_OW 321
4569: PUSH
4570: LD_INT 1
4572: EQUAL
4573: AND
4574: IFFALSE 4598
// begin Say ( JMM , D9c-JMM-1 ) ;
4576: LD_EXP 1
4580: PPUSH
4581: LD_STRING D9c-JMM-1
4583: PPUSH
4584: CALL_OW 88
// energyVDialog = 1 ;
4588: LD_ADDR_EXP 33
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// end else
4596: GO 4752
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4598: LD_INT 35
4600: PPUSH
4601: LD_INT 1
4603: PPUSH
4604: CALL_OW 321
4608: PUSH
4609: LD_INT 2
4611: EQUAL
4612: PUSH
4613: LD_EXP 33
4617: PUSH
4618: LD_INT 0
4620: EQUAL
4621: AND
4622: IFFALSE 4644
// begin Say ( JMM , D9c-JMM-1a ) ;
4624: LD_EXP 1
4628: PPUSH
4629: LD_STRING D9c-JMM-1a
4631: PPUSH
4632: CALL_OW 88
// energyVDialog = 1 ;
4636: LD_ADDR_EXP 33
4640: PUSH
4641: LD_INT 1
4643: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4644: LD_INT 46
4646: PPUSH
4647: LD_INT 1
4649: PPUSH
4650: CALL_OW 321
4654: PUSH
4655: LD_INT 2
4657: EQUAL
4658: PUSH
4659: LD_EXP 33
4663: PUSH
4664: LD_INT 0
4666: EQUAL
4667: AND
4668: IFFALSE 4690
// begin Say ( JMM , D9c-JMM-1b ) ;
4670: LD_EXP 1
4674: PPUSH
4675: LD_STRING D9c-JMM-1b
4677: PPUSH
4678: CALL_OW 88
// energyVDialog = 1 ;
4682: LD_ADDR_EXP 33
4686: PUSH
4687: LD_INT 1
4689: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4690: LD_INT 46
4692: PPUSH
4693: LD_INT 1
4695: PPUSH
4696: CALL_OW 321
4700: PUSH
4701: LD_INT 2
4703: EQUAL
4704: PUSH
4705: LD_INT 21
4707: PPUSH
4708: LD_INT 1
4710: PPUSH
4711: CALL_OW 321
4715: PUSH
4716: LD_INT 2
4718: EQUAL
4719: AND
4720: PUSH
4721: LD_EXP 33
4725: PUSH
4726: LD_INT 0
4728: EQUAL
4729: AND
4730: IFFALSE 4752
// begin Say ( JMM , D9c-JMM-1c ) ;
4732: LD_EXP 1
4736: PPUSH
4737: LD_STRING D9c-JMM-1c
4739: PPUSH
4740: CALL_OW 88
// energyVDialog = 1 ;
4744: LD_ADDR_EXP 33
4748: PUSH
4749: LD_INT 1
4751: ST_TO_ADDR
// end ; end ; end ;
4752: LD_VAR 0 1
4756: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4757: LD_INT 0
4759: PPUSH
4760: PPUSH
4761: PPUSH
4762: PPUSH
4763: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4764: LD_VAR 0 1
4768: NOT
4769: PUSH
4770: LD_VAR 0 1
4774: PPUSH
4775: CALL_OW 256
4779: PUSH
4780: LD_INT 250
4782: LESS
4783: OR
4784: PUSH
4785: LD_VAR 0 1
4789: PPUSH
4790: CALL_OW 314
4794: PUSH
4795: LD_VAR 0 1
4799: PPUSH
4800: CALL_OW 261
4804: PUSH
4805: LD_INT 20
4807: GREATER
4808: AND
4809: OR
4810: IFFALSE 4814
// exit ;
4812: GO 5179
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4814: LD_VAR 0 1
4818: PPUSH
4819: CALL_OW 261
4823: PUSH
4824: LD_INT 20
4826: LESS
4827: PUSH
4828: LD_VAR 0 1
4832: PPUSH
4833: CALL_OW 110
4837: PUSH
4838: LD_INT 21
4840: EQUAL
4841: NOT
4842: AND
4843: IFFALSE 4870
// begin ComStop ( bulldozer ) ;
4845: LD_VAR 0 1
4849: PPUSH
4850: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4854: LD_VAR 0 1
4858: PPUSH
4859: LD_INT 21
4861: PPUSH
4862: CALL_OW 109
// exit ;
4866: GO 5179
// end else
4868: GO 4897
// if GetFuel ( bulldozer ) > 20 then
4870: LD_VAR 0 1
4874: PPUSH
4875: CALL_OW 261
4879: PUSH
4880: LD_INT 20
4882: GREATER
4883: IFFALSE 4897
// SetTag ( bulldozer , 0 ) ;
4885: LD_VAR 0 1
4889: PPUSH
4890: LD_INT 0
4892: PPUSH
4893: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4897: LD_ADDR_VAR 0 5
4901: PUSH
4902: LD_VAR 0 2
4906: PPUSH
4907: CALL_OW 353
4911: ST_TO_ADDR
// tmp := [ ] ;
4912: LD_ADDR_VAR 0 6
4916: PUSH
4917: EMPTY
4918: ST_TO_ADDR
// for i = 1 to list do
4919: LD_ADDR_VAR 0 4
4923: PUSH
4924: DOUBLE
4925: LD_INT 1
4927: DEC
4928: ST_TO_ADDR
4929: LD_VAR 0 5
4933: PUSH
4934: FOR_TO
4935: IFFALSE 5033
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
4937: LD_VAR 0 5
4941: PUSH
4942: LD_VAR 0 4
4946: ARRAY
4947: PUSH
4948: LD_INT 1
4950: ARRAY
4951: PPUSH
4952: LD_VAR 0 5
4956: PUSH
4957: LD_VAR 0 4
4961: ARRAY
4962: PUSH
4963: LD_INT 2
4965: ARRAY
4966: PPUSH
4967: CALL_OW 554
4971: IFFALSE 5031
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
4973: LD_ADDR_VAR 0 6
4977: PUSH
4978: LD_VAR 0 6
4982: PPUSH
4983: LD_VAR 0 6
4987: PUSH
4988: LD_INT 1
4990: PLUS
4991: PPUSH
4992: LD_VAR 0 5
4996: PUSH
4997: LD_VAR 0 4
5001: ARRAY
5002: PUSH
5003: LD_INT 1
5005: ARRAY
5006: PUSH
5007: LD_VAR 0 5
5011: PUSH
5012: LD_VAR 0 4
5016: ARRAY
5017: PUSH
5018: LD_INT 2
5020: ARRAY
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 1
5030: ST_TO_ADDR
// end ;
5031: GO 4934
5033: POP
5034: POP
// ComStop ( bulldozer ) ;
5035: LD_VAR 0 1
5039: PPUSH
5040: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5044: LD_ADDR_VAR 0 7
5048: PUSH
5049: LD_VAR 0 1
5053: PPUSH
5054: CALL_OW 250
5058: PUSH
5059: LD_VAR 0 1
5063: PPUSH
5064: CALL_OW 251
5068: PUSH
5069: EMPTY
5070: LIST
5071: LIST
5072: ST_TO_ADDR
// for i = tmp downto 1 do
5073: LD_ADDR_VAR 0 4
5077: PUSH
5078: DOUBLE
5079: LD_VAR 0 6
5083: INC
5084: ST_TO_ADDR
5085: LD_INT 1
5087: PUSH
5088: FOR_DOWNTO
5089: IFFALSE 5177
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5091: LD_ADDR_VAR 0 7
5095: PUSH
5096: LD_VAR 0 7
5100: PUSH
5101: LD_INT 1
5103: ARRAY
5104: PPUSH
5105: LD_VAR 0 7
5109: PUSH
5110: LD_INT 2
5112: ARRAY
5113: PPUSH
5114: LD_VAR 0 6
5118: PPUSH
5119: CALL 5280 0 3
5123: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5124: LD_VAR 0 1
5128: PPUSH
5129: LD_VAR 0 7
5133: PUSH
5134: LD_INT 1
5136: ARRAY
5137: PPUSH
5138: LD_VAR 0 7
5142: PUSH
5143: LD_INT 2
5145: ARRAY
5146: PPUSH
5147: CALL 5184 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5151: LD_ADDR_VAR 0 6
5155: PUSH
5156: LD_VAR 0 6
5160: PPUSH
5161: LD_VAR 0 7
5165: PUSH
5166: LD_INT 3
5168: ARRAY
5169: PPUSH
5170: CALL_OW 3
5174: ST_TO_ADDR
// end ;
5175: GO 5088
5177: POP
5178: POP
// end ;
5179: LD_VAR 0 3
5183: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5184: LD_INT 0
5186: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5187: LD_VAR 0 2
5191: PPUSH
5192: LD_VAR 0 3
5196: PPUSH
5197: CALL_OW 351
5201: PUSH
5202: LD_VAR 0 2
5206: PPUSH
5207: LD_VAR 0 3
5211: PPUSH
5212: CALL_OW 554
5216: AND
5217: PUSH
5218: LD_VAR 0 2
5222: PPUSH
5223: LD_VAR 0 3
5227: PPUSH
5228: CALL_OW 488
5232: AND
5233: PUSH
5234: LD_VAR 0 2
5238: PPUSH
5239: LD_VAR 0 3
5243: PPUSH
5244: CALL_OW 428
5248: PUSH
5249: LD_INT 1
5251: NEG
5252: EQUAL
5253: AND
5254: IFFALSE 5275
// AddComMoveXY ( bulldozer , x , y ) ;
5256: LD_VAR 0 1
5260: PPUSH
5261: LD_VAR 0 2
5265: PPUSH
5266: LD_VAR 0 3
5270: PPUSH
5271: CALL_OW 171
// end ;
5275: LD_VAR 0 4
5279: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
5286: PPUSH
5287: PPUSH
5288: PPUSH
// dist := 99999 ;
5289: LD_ADDR_VAR 0 6
5293: PUSH
5294: LD_INT 99999
5296: ST_TO_ADDR
// for i = 1 to list do
5297: LD_ADDR_VAR 0 5
5301: PUSH
5302: DOUBLE
5303: LD_INT 1
5305: DEC
5306: ST_TO_ADDR
5307: LD_VAR 0 3
5311: PUSH
5312: FOR_TO
5313: IFFALSE 5451
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5315: LD_ADDR_VAR 0 7
5319: PUSH
5320: LD_VAR 0 1
5324: PPUSH
5325: LD_VAR 0 2
5329: PPUSH
5330: LD_VAR 0 3
5334: PUSH
5335: LD_VAR 0 5
5339: ARRAY
5340: PUSH
5341: LD_INT 1
5343: ARRAY
5344: PPUSH
5345: LD_VAR 0 3
5349: PUSH
5350: LD_VAR 0 5
5354: ARRAY
5355: PUSH
5356: LD_INT 2
5358: ARRAY
5359: PPUSH
5360: CALL_OW 298
5364: ST_TO_ADDR
// if d = 0 then
5365: LD_VAR 0 7
5369: PUSH
5370: LD_INT 0
5372: EQUAL
5373: IFFALSE 5377
// continue ;
5375: GO 5312
// if d < dist then
5377: LD_VAR 0 7
5381: PUSH
5382: LD_VAR 0 6
5386: LESS
5387: IFFALSE 5449
// begin _x := list [ i ] [ 1 ] ;
5389: LD_ADDR_VAR 0 8
5393: PUSH
5394: LD_VAR 0 3
5398: PUSH
5399: LD_VAR 0 5
5403: ARRAY
5404: PUSH
5405: LD_INT 1
5407: ARRAY
5408: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5409: LD_ADDR_VAR 0 9
5413: PUSH
5414: LD_VAR 0 3
5418: PUSH
5419: LD_VAR 0 5
5423: ARRAY
5424: PUSH
5425: LD_INT 2
5427: ARRAY
5428: ST_TO_ADDR
// _i := i ;
5429: LD_ADDR_VAR 0 10
5433: PUSH
5434: LD_VAR 0 5
5438: ST_TO_ADDR
// dist := d ;
5439: LD_ADDR_VAR 0 6
5443: PUSH
5444: LD_VAR 0 7
5448: ST_TO_ADDR
// end ; end ;
5449: GO 5312
5451: POP
5452: POP
// result := [ _x , _y , _i , dist ] ;
5453: LD_ADDR_VAR 0 4
5457: PUSH
5458: LD_VAR 0 8
5462: PUSH
5463: LD_VAR 0 9
5467: PUSH
5468: LD_VAR 0 10
5472: PUSH
5473: LD_VAR 0 6
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: ST_TO_ADDR
// end ;
5484: LD_VAR 0 4
5488: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5489: LD_INT 0
5491: PPUSH
5492: PPUSH
5493: PPUSH
5494: PPUSH
// for i = 1 to 72 do
5495: LD_ADDR_VAR 0 5
5499: PUSH
5500: DOUBLE
5501: LD_INT 1
5503: DEC
5504: ST_TO_ADDR
5505: LD_INT 72
5507: PUSH
5508: FOR_TO
5509: IFFALSE 5567
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5511: LD_VAR 0 5
5515: PPUSH
5516: LD_VAR 0 1
5520: PPUSH
5521: CALL_OW 321
5525: PUSH
5526: LD_INT 1
5528: EQUAL
5529: PUSH
5530: LD_VAR 0 5
5534: PPUSH
5535: LD_VAR 0 3
5539: PPUSH
5540: CALL_OW 482
5544: PUSH
5545: LD_INT 1
5547: EQUAL
5548: AND
5549: IFFALSE 5565
// AddComResearch ( lab , i ) ;
5551: LD_VAR 0 2
5555: PPUSH
5556: LD_VAR 0 5
5560: PPUSH
5561: CALL_OW 184
5565: GO 5508
5567: POP
5568: POP
// end ;
5569: LD_VAR 0 4
5573: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5574: LD_INT 0
5576: PPUSH
5577: PPUSH
5578: PPUSH
5579: PPUSH
5580: PPUSH
5581: PPUSH
// engineerOkInside = UnitsInside ( building ) diff [ Stolypin ] ;
5582: LD_ADDR_VAR 0 7
5586: PUSH
5587: LD_VAR 0 2
5591: PPUSH
5592: CALL_OW 313
5596: PUSH
5597: LD_EXP 15
5601: PUSH
5602: EMPTY
5603: LIST
5604: DIFF
5605: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] ] ) ;
5606: LD_ADDR_VAR 0 8
5610: PUSH
5611: LD_VAR 0 3
5615: PPUSH
5616: LD_INT 22
5618: PUSH
5619: LD_VAR 0 1
5623: PUSH
5624: EMPTY
5625: LIST
5626: LIST
5627: PUSH
5628: LD_INT 25
5630: PUSH
5631: LD_INT 2
5633: PUSH
5634: EMPTY
5635: LIST
5636: LIST
5637: PUSH
5638: LD_INT 24
5640: PUSH
5641: LD_INT 1000
5643: PUSH
5644: EMPTY
5645: LIST
5646: LIST
5647: PUSH
5648: EMPTY
5649: LIST
5650: LIST
5651: LIST
5652: PPUSH
5653: CALL_OW 70
5657: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5658: LD_ADDR_VAR 0 5
5662: PUSH
5663: LD_VAR 0 3
5667: PPUSH
5668: LD_INT 22
5670: PUSH
5671: LD_VAR 0 1
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: PUSH
5680: LD_INT 21
5682: PUSH
5683: LD_INT 3
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 3
5692: PUSH
5693: LD_INT 24
5695: PUSH
5696: LD_INT 1000
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: LIST
5711: PUSH
5712: EMPTY
5713: LIST
5714: PPUSH
5715: CALL_OW 70
5719: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside then
5720: LD_VAR 0 5
5724: NOT
5725: PUSH
5726: LD_VAR 0 8
5730: NOT
5731: AND
5732: IFFALSE 5736
// exit ;
5734: GO 5895
// if buildings_list > 0 and engineerOkInside > 0 then
5736: LD_VAR 0 5
5740: PUSH
5741: LD_INT 0
5743: GREATER
5744: PUSH
5745: LD_VAR 0 7
5749: PUSH
5750: LD_INT 0
5752: GREATER
5753: AND
5754: IFFALSE 5782
// for i in engineerOkInside do
5756: LD_ADDR_VAR 0 6
5760: PUSH
5761: LD_VAR 0 7
5765: PUSH
5766: FOR_IN
5767: IFFALSE 5780
// ComExitBuilding ( i ) ;
5769: LD_VAR 0 6
5773: PPUSH
5774: CALL_OW 122
5778: GO 5766
5780: POP
5781: POP
// if engineerOkOutside > 0 then
5782: LD_VAR 0 8
5786: PUSH
5787: LD_INT 0
5789: GREATER
5790: IFFALSE 5844
// begin for i in engineerOkOutside do
5792: LD_ADDR_VAR 0 6
5796: PUSH
5797: LD_VAR 0 8
5801: PUSH
5802: FOR_IN
5803: IFFALSE 5842
// for j in buildings_list do
5805: LD_ADDR_VAR 0 9
5809: PUSH
5810: LD_VAR 0 5
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5838
// ComRepairBuilding ( i , j [ 1 ] ) ;
5818: LD_VAR 0 6
5822: PPUSH
5823: LD_VAR 0 9
5827: PUSH
5828: LD_INT 1
5830: ARRAY
5831: PPUSH
5832: CALL_OW 130
5836: GO 5815
5838: POP
5839: POP
5840: GO 5802
5842: POP
5843: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
5844: LD_VAR 0 5
5848: PUSH
5849: LD_INT 0
5851: EQUAL
5852: PUSH
5853: LD_VAR 0 8
5857: PUSH
5858: LD_INT 0
5860: GREATER
5861: AND
5862: IFFALSE 5895
// for i in engineerOkOutside do
5864: LD_ADDR_VAR 0 6
5868: PUSH
5869: LD_VAR 0 8
5873: PUSH
5874: FOR_IN
5875: IFFALSE 5893
// ComEnterUnit ( i , building ) ;
5877: LD_VAR 0 6
5881: PPUSH
5882: LD_VAR 0 2
5886: PPUSH
5887: CALL_OW 120
5891: GO 5874
5893: POP
5894: POP
// end ;
5895: LD_VAR 0 4
5899: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal ; begin
5900: LD_INT 0
5902: PPUSH
5903: PPUSH
5904: PPUSH
5905: PPUSH
5906: PPUSH
5907: PPUSH
5908: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
5909: LD_ADDR_VAR 0 6
5913: PUSH
5914: LD_INT 22
5916: PUSH
5917: LD_VAR 0 1
5921: PUSH
5922: EMPTY
5923: LIST
5924: LIST
5925: PUSH
5926: LD_INT 25
5928: PUSH
5929: LD_INT 4
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: PUSH
5936: LD_INT 24
5938: PUSH
5939: LD_INT 251
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
5956: LD_ADDR_VAR 0 7
5960: PUSH
5961: LD_VAR 0 3
5965: PPUSH
5966: LD_INT 22
5968: PUSH
5969: LD_VAR 0 1
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 25
5980: PUSH
5981: LD_INT 4
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: PUSH
5988: LD_INT 50
5990: PUSH
5991: EMPTY
5992: LIST
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: LIST
5998: PPUSH
5999: CALL_OW 70
6003: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6004: LD_ADDR_VAR 0 10
6008: PUSH
6009: LD_VAR 0 3
6013: PPUSH
6014: LD_INT 22
6016: PUSH
6017: LD_VAR 0 1
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 21
6028: PUSH
6029: LD_INT 1
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: LD_INT 3
6038: PUSH
6039: LD_INT 24
6041: PUSH
6042: LD_INT 750
6044: PUSH
6045: EMPTY
6046: LIST
6047: LIST
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: LIST
6057: PPUSH
6058: CALL_OW 70
6062: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6063: LD_ADDR_VAR 0 11
6067: PUSH
6068: LD_VAR 0 2
6072: PPUSH
6073: LD_INT 22
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: EMPTY
6082: LIST
6083: LIST
6084: PUSH
6085: LD_INT 21
6087: PUSH
6088: LD_INT 1
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PUSH
6095: LD_INT 3
6097: PUSH
6098: LD_INT 24
6100: PUSH
6101: LD_INT 1000
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PUSH
6108: EMPTY
6109: LIST
6110: LIST
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: LIST
6116: PPUSH
6117: CALL_OW 70
6121: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
6122: LD_VAR 0 10
6126: NOT
6127: PUSH
6128: LD_VAR 0 7
6132: NOT
6133: AND
6134: PUSH
6135: LD_VAR 0 11
6139: NOT
6140: AND
6141: IFFALSE 6145
// exit ;
6143: GO 6334
// if damageUnits > 0 and sci_list > 0 then
6145: LD_VAR 0 10
6149: PUSH
6150: LD_INT 0
6152: GREATER
6153: PUSH
6154: LD_VAR 0 6
6158: PUSH
6159: LD_INT 0
6161: GREATER
6162: AND
6163: IFFALSE 6196
// for i in damageUnits do
6165: LD_ADDR_VAR 0 8
6169: PUSH
6170: LD_VAR 0 10
6174: PUSH
6175: FOR_IN
6176: IFFALSE 6194
// ComMoveToArea ( i , healArea ) ;
6178: LD_VAR 0 8
6182: PPUSH
6183: LD_VAR 0 2
6187: PPUSH
6188: CALL_OW 113
6192: GO 6175
6194: POP
6195: POP
// if unitsToHeal > 0 and sci_list > 0 then
6196: LD_VAR 0 11
6200: PUSH
6201: LD_INT 0
6203: GREATER
6204: PUSH
6205: LD_VAR 0 6
6209: PUSH
6210: LD_INT 0
6212: GREATER
6213: AND
6214: IFFALSE 6273
// begin for i in sci_list do
6216: LD_ADDR_VAR 0 8
6220: PUSH
6221: LD_VAR 0 6
6225: PUSH
6226: FOR_IN
6227: IFFALSE 6271
// begin ComExitBuilding ( i ) ;
6229: LD_VAR 0 8
6233: PPUSH
6234: CALL_OW 122
// for j in unitsToHeal do
6238: LD_ADDR_VAR 0 9
6242: PUSH
6243: LD_VAR 0 11
6247: PUSH
6248: FOR_IN
6249: IFFALSE 6267
// AddComHeal ( i , j ) ;
6251: LD_VAR 0 8
6255: PPUSH
6256: LD_VAR 0 9
6260: PPUSH
6261: CALL_OW 188
6265: GO 6248
6267: POP
6268: POP
// end ;
6269: GO 6226
6271: POP
6272: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6273: LD_VAR 0 10
6277: PUSH
6278: LD_INT 0
6280: EQUAL
6281: PUSH
6282: LD_VAR 0 11
6286: PUSH
6287: LD_INT 0
6289: EQUAL
6290: AND
6291: PUSH
6292: LD_VAR 0 7
6296: PUSH
6297: LD_INT 0
6299: GREATER
6300: AND
6301: IFFALSE 6334
// for i in sci_listOutside do
6303: LD_ADDR_VAR 0 8
6307: PUSH
6308: LD_VAR 0 7
6312: PUSH
6313: FOR_IN
6314: IFFALSE 6332
// ComEnterUnit ( i , build ) ;
6316: LD_VAR 0 8
6320: PPUSH
6321: LD_VAR 0 4
6325: PPUSH
6326: CALL_OW 120
6330: GO 6313
6332: POP
6333: POP
// end ;
6334: LD_VAR 0 5
6338: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i , weapon ; begin
6339: LD_INT 0
6341: PPUSH
6342: PPUSH
6343: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6344: LD_INT 22
6346: PUSH
6347: LD_VAR 0 1
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 21
6358: PUSH
6359: LD_INT 2
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 69
6374: PUSH
6375: LD_VAR 0 3
6379: LESSEQUAL
6380: IFFALSE 6488
// begin for i = 1 to vehCount do
6382: LD_ADDR_VAR 0 9
6386: PUSH
6387: DOUBLE
6388: LD_INT 1
6390: DEC
6391: ST_TO_ADDR
6392: LD_VAR 0 3
6396: PUSH
6397: FOR_TO
6398: IFFALSE 6486
// begin weapon = weaponTab [ i ] ;
6400: LD_ADDR_VAR 0 10
6404: PUSH
6405: LD_VAR 0 4
6409: PUSH
6410: LD_VAR 0 9
6414: ARRAY
6415: ST_TO_ADDR
// if weapon = 46 then
6416: LD_VAR 0 10
6420: PUSH
6421: LD_INT 46
6423: EQUAL
6424: IFFALSE 6455
// begin AddComConstruct ( fabric , 24 , engine , control , weapon ) ;
6426: LD_VAR 0 2
6430: PPUSH
6431: LD_INT 24
6433: PPUSH
6434: LD_VAR 0 5
6438: PPUSH
6439: LD_VAR 0 6
6443: PPUSH
6444: LD_VAR 0 10
6448: PPUSH
6449: CALL_OW 185
// end else
6453: GO 6484
// begin AddComConstruct ( fabric , chassis , engine , control , weapon ) ;
6455: LD_VAR 0 2
6459: PPUSH
6460: LD_VAR 0 7
6464: PPUSH
6465: LD_VAR 0 5
6469: PPUSH
6470: LD_VAR 0 6
6474: PPUSH
6475: LD_VAR 0 10
6479: PPUSH
6480: CALL_OW 185
// end ; end ;
6484: GO 6397
6486: POP
6487: POP
// end ; end ;
6488: LD_VAR 0 8
6492: RET
// export function EnemyVehicleAttack ( side , targetSide ) ; var i , tmp , target1 , target2 ; begin
6493: LD_INT 0
6495: PPUSH
6496: PPUSH
6497: PPUSH
6498: PPUSH
6499: PPUSH
// for i := 1 to russianTanks do
6500: LD_ADDR_VAR 0 4
6504: PUSH
6505: DOUBLE
6506: LD_INT 1
6508: DEC
6509: ST_TO_ADDR
6510: LD_EXP 18
6514: PUSH
6515: FOR_TO
6516: IFFALSE 6857
// begin if i = [ 5 , 6 , 6 ] [ Difficulty ] then
6518: LD_VAR 0 4
6522: PUSH
6523: LD_INT 5
6525: PUSH
6526: LD_INT 6
6528: PUSH
6529: LD_INT 6
6531: PUSH
6532: EMPTY
6533: LIST
6534: LIST
6535: LIST
6536: PUSH
6537: LD_OWVAR 67
6541: ARRAY
6542: EQUAL
6543: IFFALSE 6855
// begin repeat wait ( 0 0$1 ) ;
6545: LD_INT 35
6547: PPUSH
6548: CALL_OW 67
// for i in russianTanks do
6552: LD_ADDR_VAR 0 4
6556: PUSH
6557: LD_EXP 18
6561: PUSH
6562: FOR_IN
6563: IFFALSE 6843
// begin if GetLives ( i ) < 659 then
6565: LD_VAR 0 4
6569: PPUSH
6570: CALL_OW 256
6574: PUSH
6575: LD_INT 659
6577: LESS
6578: IFFALSE 6662
// begin tmp = i ;
6580: LD_ADDR_VAR 0 5
6584: PUSH
6585: LD_VAR 0 4
6589: ST_TO_ADDR
// for i := 1 to russianTanks do
6590: LD_ADDR_VAR 0 4
6594: PUSH
6595: DOUBLE
6596: LD_INT 1
6598: DEC
6599: ST_TO_ADDR
6600: LD_EXP 18
6604: PUSH
6605: FOR_TO
6606: IFFALSE 6660
// begin if tmp = russianTanks [ i ] then
6608: LD_VAR 0 5
6612: PUSH
6613: LD_EXP 18
6617: PUSH
6618: LD_VAR 0 4
6622: ARRAY
6623: EQUAL
6624: IFFALSE 6658
// begin russianTanks = russianTanks diff tmp ;
6626: LD_ADDR_EXP 18
6630: PUSH
6631: LD_EXP 18
6635: PUSH
6636: LD_VAR 0 5
6640: DIFF
6641: ST_TO_ADDR
// russianDamageTanks = russianDamageTanks ^ tmp ;
6642: LD_ADDR_EXP 19
6646: PUSH
6647: LD_EXP 19
6651: PUSH
6652: LD_VAR 0 5
6656: ADD
6657: ST_TO_ADDR
// end ; end ;
6658: GO 6605
6660: POP
6661: POP
// end ; wait ( 0 0$1 ) ;
6662: LD_INT 35
6664: PPUSH
6665: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
6669: LD_ADDR_VAR 0 6
6673: PUSH
6674: LD_INT 22
6676: PUSH
6677: LD_VAR 0 2
6681: PUSH
6682: EMPTY
6683: LIST
6684: LIST
6685: PPUSH
6686: CALL_OW 69
6690: PPUSH
6691: LD_VAR 0 4
6695: PPUSH
6696: CALL_OW 74
6700: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
6701: LD_ADDR_VAR 0 7
6705: PUSH
6706: LD_INT 22
6708: PUSH
6709: LD_VAR 0 2
6713: PUSH
6714: EMPTY
6715: LIST
6716: LIST
6717: PUSH
6718: LD_INT 2
6720: PUSH
6721: LD_INT 59
6723: PUSH
6724: EMPTY
6725: LIST
6726: PUSH
6727: LD_INT 21
6729: PUSH
6730: LD_INT 1
6732: PUSH
6733: EMPTY
6734: LIST
6735: LIST
6736: PUSH
6737: LD_INT 21
6739: PUSH
6740: LD_INT 2
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: PUSH
6757: EMPTY
6758: LIST
6759: PPUSH
6760: CALL_OW 69
6764: PPUSH
6765: LD_VAR 0 4
6769: PPUSH
6770: CALL_OW 74
6774: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
6775: LD_VAR 0 4
6779: PPUSH
6780: LD_VAR 0 6
6784: PPUSH
6785: CALL_OW 296
6789: PUSH
6790: LD_INT 8
6792: PLUS
6793: PUSH
6794: LD_VAR 0 4
6798: PPUSH
6799: LD_VAR 0 7
6803: PPUSH
6804: CALL_OW 296
6808: LESS
6809: IFFALSE 6827
// begin ComAttackUnit ( i , target1 ) ;
6811: LD_VAR 0 4
6815: PPUSH
6816: LD_VAR 0 6
6820: PPUSH
6821: CALL_OW 115
// end else
6825: GO 6841
// begin ComAttackUnit ( i , target2 ) ;
6827: LD_VAR 0 4
6831: PPUSH
6832: LD_VAR 0 7
6836: PPUSH
6837: CALL_OW 115
// end ; end ;
6841: GO 6562
6843: POP
6844: POP
// until russianTanks = 0 ;
6845: LD_EXP 18
6849: PUSH
6850: LD_INT 0
6852: EQUAL
6853: IFFALSE 6545
// end ; end ;
6855: GO 6515
6857: POP
6858: POP
// end ;
6859: LD_VAR 0 3
6863: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
6864: LD_INT 0
6866: PPUSH
6867: PPUSH
6868: PPUSH
6869: PPUSH
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
// for i = 1 to medicCount do
6877: LD_ADDR_VAR 0 14
6881: PUSH
6882: DOUBLE
6883: LD_INT 1
6885: DEC
6886: ST_TO_ADDR
6887: LD_VAR 0 7
6891: PUSH
6892: FOR_TO
6893: IFFALSE 6975
// begin uc_side = side ;
6895: LD_ADDR_OWVAR 20
6899: PUSH
6900: LD_VAR 0 1
6904: ST_TO_ADDR
// uc_nation = nation ;
6905: LD_ADDR_OWVAR 21
6909: PUSH
6910: LD_VAR 0 2
6914: ST_TO_ADDR
// hc_name =  ;
6915: LD_ADDR_OWVAR 26
6919: PUSH
6920: LD_STRING 
6922: ST_TO_ADDR
// hc_gallery =  ;
6923: LD_ADDR_OWVAR 33
6927: PUSH
6928: LD_STRING 
6930: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
6931: LD_INT 0
6933: PPUSH
6934: LD_INT 4
6936: PPUSH
6937: LD_VAR 0 8
6941: PPUSH
6942: CALL_OW 380
// un = CreateHuman ;
6946: LD_ADDR_VAR 0 16
6950: PUSH
6951: CALL_OW 44
6955: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
6956: LD_VAR 0 16
6960: PPUSH
6961: LD_VAR 0 9
6965: PPUSH
6966: LD_INT 0
6968: PPUSH
6969: CALL_OW 49
// end ;
6973: GO 6892
6975: POP
6976: POP
// for i = 1 to soldierCount do
6977: LD_ADDR_VAR 0 14
6981: PUSH
6982: DOUBLE
6983: LD_INT 1
6985: DEC
6986: ST_TO_ADDR
6987: LD_VAR 0 3
6991: PUSH
6992: FOR_TO
6993: IFFALSE 7075
// begin uc_side = side ;
6995: LD_ADDR_OWVAR 20
6999: PUSH
7000: LD_VAR 0 1
7004: ST_TO_ADDR
// uc_nation = nation ;
7005: LD_ADDR_OWVAR 21
7009: PUSH
7010: LD_VAR 0 2
7014: ST_TO_ADDR
// hc_name =  ;
7015: LD_ADDR_OWVAR 26
7019: PUSH
7020: LD_STRING 
7022: ST_TO_ADDR
// hc_gallery =  ;
7023: LD_ADDR_OWVAR 33
7027: PUSH
7028: LD_STRING 
7030: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7031: LD_INT 0
7033: PPUSH
7034: LD_INT 1
7036: PPUSH
7037: LD_VAR 0 8
7041: PPUSH
7042: CALL_OW 380
// un = CreateHuman ;
7046: LD_ADDR_VAR 0 16
7050: PUSH
7051: CALL_OW 44
7055: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7056: LD_VAR 0 16
7060: PPUSH
7061: LD_VAR 0 9
7065: PPUSH
7066: LD_INT 0
7068: PPUSH
7069: CALL_OW 49
// end ;
7073: GO 6992
7075: POP
7076: POP
// for i = 1 to sniperCount do
7077: LD_ADDR_VAR 0 14
7081: PUSH
7082: DOUBLE
7083: LD_INT 1
7085: DEC
7086: ST_TO_ADDR
7087: LD_VAR 0 4
7091: PUSH
7092: FOR_TO
7093: IFFALSE 7175
// begin uc_side = side ;
7095: LD_ADDR_OWVAR 20
7099: PUSH
7100: LD_VAR 0 1
7104: ST_TO_ADDR
// uc_nation = nation ;
7105: LD_ADDR_OWVAR 21
7109: PUSH
7110: LD_VAR 0 2
7114: ST_TO_ADDR
// hc_name =  ;
7115: LD_ADDR_OWVAR 26
7119: PUSH
7120: LD_STRING 
7122: ST_TO_ADDR
// hc_gallery =  ;
7123: LD_ADDR_OWVAR 33
7127: PUSH
7128: LD_STRING 
7130: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7131: LD_INT 0
7133: PPUSH
7134: LD_INT 5
7136: PPUSH
7137: LD_VAR 0 8
7141: PPUSH
7142: CALL_OW 380
// un = CreateHuman ;
7146: LD_ADDR_VAR 0 16
7150: PUSH
7151: CALL_OW 44
7155: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7156: LD_VAR 0 16
7160: PPUSH
7161: LD_VAR 0 9
7165: PPUSH
7166: LD_INT 0
7168: PPUSH
7169: CALL_OW 49
// end ;
7173: GO 7092
7175: POP
7176: POP
// for i = 1 to bazookCount do
7177: LD_ADDR_VAR 0 14
7181: PUSH
7182: DOUBLE
7183: LD_INT 1
7185: DEC
7186: ST_TO_ADDR
7187: LD_VAR 0 5
7191: PUSH
7192: FOR_TO
7193: IFFALSE 7275
// begin uc_side = side ;
7195: LD_ADDR_OWVAR 20
7199: PUSH
7200: LD_VAR 0 1
7204: ST_TO_ADDR
// uc_nation = nation ;
7205: LD_ADDR_OWVAR 21
7209: PUSH
7210: LD_VAR 0 2
7214: ST_TO_ADDR
// hc_name =  ;
7215: LD_ADDR_OWVAR 26
7219: PUSH
7220: LD_STRING 
7222: ST_TO_ADDR
// hc_gallery =  ;
7223: LD_ADDR_OWVAR 33
7227: PUSH
7228: LD_STRING 
7230: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7231: LD_INT 0
7233: PPUSH
7234: LD_INT 9
7236: PPUSH
7237: LD_VAR 0 8
7241: PPUSH
7242: CALL_OW 380
// un = CreateHuman ;
7246: LD_ADDR_VAR 0 16
7250: PUSH
7251: CALL_OW 44
7255: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7256: LD_VAR 0 16
7260: PPUSH
7261: LD_VAR 0 9
7265: PPUSH
7266: LD_INT 0
7268: PPUSH
7269: CALL_OW 49
// end ;
7273: GO 7192
7275: POP
7276: POP
// for i = 1 to mortalCount do
7277: LD_ADDR_VAR 0 14
7281: PUSH
7282: DOUBLE
7283: LD_INT 1
7285: DEC
7286: ST_TO_ADDR
7287: LD_VAR 0 6
7291: PUSH
7292: FOR_TO
7293: IFFALSE 7375
// begin uc_side = side ;
7295: LD_ADDR_OWVAR 20
7299: PUSH
7300: LD_VAR 0 1
7304: ST_TO_ADDR
// uc_nation = nation ;
7305: LD_ADDR_OWVAR 21
7309: PUSH
7310: LD_VAR 0 2
7314: ST_TO_ADDR
// hc_name =  ;
7315: LD_ADDR_OWVAR 26
7319: PUSH
7320: LD_STRING 
7322: ST_TO_ADDR
// hc_gallery =  ;
7323: LD_ADDR_OWVAR 33
7327: PUSH
7328: LD_STRING 
7330: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_INT 8
7336: PPUSH
7337: LD_VAR 0 8
7341: PPUSH
7342: CALL_OW 380
// un = CreateHuman ;
7346: LD_ADDR_VAR 0 16
7350: PUSH
7351: CALL_OW 44
7355: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7356: LD_VAR 0 16
7360: PPUSH
7361: LD_VAR 0 9
7365: PPUSH
7366: LD_INT 0
7368: PPUSH
7369: CALL_OW 49
// end ;
7373: GO 7292
7375: POP
7376: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7377: LD_ADDR_VAR 0 19
7381: PUSH
7382: LD_INT 22
7384: PUSH
7385: LD_VAR 0 1
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: LD_INT 2
7396: PUSH
7397: LD_INT 25
7399: PUSH
7400: LD_INT 1
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: PUSH
7407: LD_INT 25
7409: PUSH
7410: LD_INT 5
7412: PUSH
7413: EMPTY
7414: LIST
7415: LIST
7416: PUSH
7417: LD_INT 25
7419: PUSH
7420: LD_INT 8
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 25
7429: PUSH
7430: LD_INT 9
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PPUSH
7448: CALL_OW 69
7452: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
7453: LD_ADDR_VAR 0 18
7457: PUSH
7458: LD_INT 22
7460: PUSH
7461: LD_VAR 0 1
7465: PUSH
7466: EMPTY
7467: LIST
7468: LIST
7469: PUSH
7470: LD_INT 25
7472: PUSH
7473: LD_INT 4
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: EMPTY
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 69
7488: ST_TO_ADDR
// for i in medic_list do
7489: LD_ADDR_VAR 0 14
7493: PUSH
7494: LD_VAR 0 18
7498: PUSH
7499: FOR_IN
7500: IFFALSE 7518
// ComMoveToArea ( i , healArea ) ;
7502: LD_VAR 0 14
7506: PPUSH
7507: LD_VAR 0 10
7511: PPUSH
7512: CALL_OW 113
7516: GO 7499
7518: POP
7519: POP
// if strategy = 1 then
7520: LD_VAR 0 12
7524: PUSH
7525: LD_INT 1
7527: EQUAL
7528: IFFALSE 8263
// begin repeat wait ( 0 0$3 ) ;
7530: LD_INT 105
7532: PPUSH
7533: CALL_OW 67
// for i in soldiersOK_list do
7537: LD_ADDR_VAR 0 14
7541: PUSH
7542: LD_VAR 0 19
7546: PUSH
7547: FOR_IN
7548: IFFALSE 7612
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
7550: LD_VAR 0 14
7554: PPUSH
7555: LD_INT 91
7557: PPUSH
7558: LD_INT 63
7560: PPUSH
7561: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
7565: LD_VAR 0 14
7569: PPUSH
7570: LD_INT 101
7572: PPUSH
7573: LD_INT 53
7575: PPUSH
7576: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
7580: LD_VAR 0 14
7584: PPUSH
7585: LD_INT 75
7587: PPUSH
7588: LD_INT 23
7590: PPUSH
7591: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
7595: LD_VAR 0 14
7599: PPUSH
7600: LD_INT 78
7602: PPUSH
7603: LD_INT 8
7605: PPUSH
7606: CALL_OW 174
// end ;
7610: GO 7547
7612: POP
7613: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
7614: LD_INT 15
7616: PPUSH
7617: LD_INT 22
7619: PUSH
7620: LD_VAR 0 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 70
7633: PUSH
7634: LD_INT 2
7636: GREATER
7637: IFFALSE 7530
// repeat wait ( 0 0$1 ) ;
7639: LD_INT 35
7641: PPUSH
7642: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
7646: LD_ADDR_VAR 0 17
7650: PUSH
7651: LD_INT 22
7653: PUSH
7654: LD_VAR 0 1
7658: PUSH
7659: EMPTY
7660: LIST
7661: LIST
7662: PUSH
7663: LD_INT 1
7665: PUSH
7666: LD_INT 3
7668: PUSH
7669: LD_INT 24
7671: PUSH
7672: LD_INT 550
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: PUSH
7679: EMPTY
7680: LIST
7681: LIST
7682: PUSH
7683: LD_INT 24
7685: PUSH
7686: LD_INT 250
7688: PUSH
7689: EMPTY
7690: LIST
7691: LIST
7692: PUSH
7693: EMPTY
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 69
7706: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
7707: LD_ADDR_VAR 0 19
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_VAR 0 1
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_INT 2
7726: PUSH
7727: LD_INT 25
7729: PUSH
7730: LD_INT 1
7732: PUSH
7733: EMPTY
7734: LIST
7735: LIST
7736: PUSH
7737: LD_INT 25
7739: PUSH
7740: LD_INT 5
7742: PUSH
7743: EMPTY
7744: LIST
7745: LIST
7746: PUSH
7747: LD_INT 25
7749: PUSH
7750: LD_INT 8
7752: PUSH
7753: EMPTY
7754: LIST
7755: LIST
7756: PUSH
7757: LD_INT 25
7759: PUSH
7760: LD_INT 9
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: PUSH
7767: EMPTY
7768: LIST
7769: LIST
7770: LIST
7771: LIST
7772: LIST
7773: PUSH
7774: LD_INT 24
7776: PUSH
7777: LD_INT 1000
7779: PUSH
7780: EMPTY
7781: LIST
7782: LIST
7783: PUSH
7784: EMPTY
7785: LIST
7786: LIST
7787: LIST
7788: PPUSH
7789: CALL_OW 69
7793: ST_TO_ADDR
// if medicCount > 0 then
7794: LD_VAR 0 7
7798: PUSH
7799: LD_INT 0
7801: GREATER
7802: IFFALSE 7876
// begin if damageUnit_list > 0 then
7804: LD_VAR 0 17
7808: PUSH
7809: LD_INT 0
7811: GREATER
7812: IFFALSE 7876
// begin for i in damageUnit_list do
7814: LD_ADDR_VAR 0 14
7818: PUSH
7819: LD_VAR 0 17
7823: PUSH
7824: FOR_IN
7825: IFFALSE 7874
// begin ComMoveToArea ( i , healArea ) ;
7827: LD_VAR 0 14
7831: PPUSH
7832: LD_VAR 0 10
7836: PPUSH
7837: CALL_OW 113
// for j in medic_list do
7841: LD_ADDR_VAR 0 15
7845: PUSH
7846: LD_VAR 0 18
7850: PUSH
7851: FOR_IN
7852: IFFALSE 7870
// AddComHeal ( j , i ) ;
7854: LD_VAR 0 15
7858: PPUSH
7859: LD_VAR 0 14
7863: PPUSH
7864: CALL_OW 188
7868: GO 7851
7870: POP
7871: POP
// end ;
7872: GO 7824
7874: POP
7875: POP
// end ; end ; for i in soldiersOK_list do
7876: LD_ADDR_VAR 0 14
7880: PUSH
7881: LD_VAR 0 19
7885: PUSH
7886: FOR_IN
7887: IFFALSE 8063
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
7889: LD_ADDR_VAR 0 22
7893: PUSH
7894: LD_INT 22
7896: PUSH
7897: LD_VAR 0 11
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: PPUSH
7911: LD_VAR 0 14
7915: PPUSH
7916: CALL_OW 74
7920: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
7921: LD_ADDR_VAR 0 23
7925: PUSH
7926: LD_INT 22
7928: PUSH
7929: LD_VAR 0 11
7933: PUSH
7934: EMPTY
7935: LIST
7936: LIST
7937: PUSH
7938: LD_INT 2
7940: PUSH
7941: LD_INT 59
7943: PUSH
7944: EMPTY
7945: LIST
7946: PUSH
7947: LD_INT 21
7949: PUSH
7950: LD_INT 1
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 21
7959: PUSH
7960: LD_INT 2
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: PUSH
7977: EMPTY
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: PPUSH
7985: LD_VAR 0 14
7989: PPUSH
7990: CALL_OW 74
7994: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
7995: LD_VAR 0 14
7999: PPUSH
8000: LD_VAR 0 22
8004: PPUSH
8005: CALL_OW 296
8009: PUSH
8010: LD_INT 8
8012: PLUS
8013: PUSH
8014: LD_VAR 0 14
8018: PPUSH
8019: LD_VAR 0 23
8023: PPUSH
8024: CALL_OW 296
8028: LESS
8029: IFFALSE 8047
// begin ComAttackUnit ( i , target1 ) ;
8031: LD_VAR 0 14
8035: PPUSH
8036: LD_VAR 0 22
8040: PPUSH
8041: CALL_OW 115
// end else
8045: GO 8061
// begin ComAttackUnit ( i , target2 ) ;
8047: LD_VAR 0 14
8051: PPUSH
8052: LD_VAR 0 23
8056: PPUSH
8057: CALL_OW 115
// end ; end ;
8061: GO 7886
8063: POP
8064: POP
// for i in soldiersOK_list do
8065: LD_ADDR_VAR 0 14
8069: PUSH
8070: LD_VAR 0 19
8074: PUSH
8075: FOR_IN
8076: IFFALSE 8252
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8078: LD_ADDR_VAR 0 22
8082: PUSH
8083: LD_INT 22
8085: PUSH
8086: LD_VAR 0 11
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PPUSH
8095: CALL_OW 69
8099: PPUSH
8100: LD_VAR 0 14
8104: PPUSH
8105: CALL_OW 74
8109: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8110: LD_ADDR_VAR 0 23
8114: PUSH
8115: LD_INT 22
8117: PUSH
8118: LD_VAR 0 11
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 2
8129: PUSH
8130: LD_INT 59
8132: PUSH
8133: EMPTY
8134: LIST
8135: PUSH
8136: LD_INT 21
8138: PUSH
8139: LD_INT 1
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: PUSH
8146: LD_INT 21
8148: PUSH
8149: LD_INT 2
8151: PUSH
8152: EMPTY
8153: LIST
8154: LIST
8155: PUSH
8156: EMPTY
8157: LIST
8158: LIST
8159: LIST
8160: LIST
8161: PUSH
8162: EMPTY
8163: LIST
8164: LIST
8165: PUSH
8166: EMPTY
8167: LIST
8168: PPUSH
8169: CALL_OW 69
8173: PPUSH
8174: LD_VAR 0 14
8178: PPUSH
8179: CALL_OW 74
8183: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8184: LD_VAR 0 14
8188: PPUSH
8189: LD_VAR 0 22
8193: PPUSH
8194: CALL_OW 296
8198: PUSH
8199: LD_INT 8
8201: PLUS
8202: PUSH
8203: LD_VAR 0 14
8207: PPUSH
8208: LD_VAR 0 23
8212: PPUSH
8213: CALL_OW 296
8217: LESS
8218: IFFALSE 8236
// begin ComAttackUnit ( i , target1 ) ;
8220: LD_VAR 0 14
8224: PPUSH
8225: LD_VAR 0 22
8229: PPUSH
8230: CALL_OW 115
// end else
8234: GO 8250
// begin ComAttackUnit ( i , target2 ) ;
8236: LD_VAR 0 14
8240: PPUSH
8241: LD_VAR 0 23
8245: PPUSH
8246: CALL_OW 115
// end ; end ;
8250: GO 8075
8252: POP
8253: POP
// until soldiersOK_list = [ ] ;
8254: LD_VAR 0 19
8258: PUSH
8259: EMPTY
8260: EQUAL
8261: IFFALSE 7639
// end ; if strategy = 2 then
8263: LD_VAR 0 12
8267: PUSH
8268: LD_INT 2
8270: EQUAL
8271: IFFALSE 8976
// begin repeat wait ( 0 0$1 ) ;
8273: LD_INT 35
8275: PPUSH
8276: CALL_OW 67
// for i in soldiersOK_list do
8280: LD_ADDR_VAR 0 14
8284: PUSH
8285: LD_VAR 0 19
8289: PUSH
8290: FOR_IN
8291: IFFALSE 8325
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8293: LD_VAR 0 14
8297: PPUSH
8298: LD_INT 91
8300: PPUSH
8301: LD_INT 63
8303: PPUSH
8304: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8308: LD_VAR 0 14
8312: PPUSH
8313: LD_INT 75
8315: PPUSH
8316: LD_INT 33
8318: PPUSH
8319: CALL_OW 174
// end ;
8323: GO 8290
8325: POP
8326: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8327: LD_INT 16
8329: PPUSH
8330: LD_INT 22
8332: PUSH
8333: LD_VAR 0 1
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: PPUSH
8342: CALL_OW 70
8346: PUSH
8347: LD_INT 2
8349: GREATER
8350: IFFALSE 8273
// repeat wait ( 0 0$3 ) ;
8352: LD_INT 105
8354: PPUSH
8355: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8359: LD_ADDR_VAR 0 17
8363: PUSH
8364: LD_INT 22
8366: PUSH
8367: LD_VAR 0 1
8371: PUSH
8372: EMPTY
8373: LIST
8374: LIST
8375: PUSH
8376: LD_INT 1
8378: PUSH
8379: LD_INT 3
8381: PUSH
8382: LD_INT 24
8384: PUSH
8385: LD_INT 550
8387: PUSH
8388: EMPTY
8389: LIST
8390: LIST
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: PUSH
8396: LD_INT 24
8398: PUSH
8399: LD_INT 250
8401: PUSH
8402: EMPTY
8403: LIST
8404: LIST
8405: PUSH
8406: EMPTY
8407: LIST
8408: LIST
8409: LIST
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL_OW 69
8419: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8420: LD_ADDR_VAR 0 19
8424: PUSH
8425: LD_INT 22
8427: PUSH
8428: LD_VAR 0 1
8432: PUSH
8433: EMPTY
8434: LIST
8435: LIST
8436: PUSH
8437: LD_INT 2
8439: PUSH
8440: LD_INT 25
8442: PUSH
8443: LD_INT 1
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: PUSH
8450: LD_INT 25
8452: PUSH
8453: LD_INT 5
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_INT 25
8462: PUSH
8463: LD_INT 8
8465: PUSH
8466: EMPTY
8467: LIST
8468: LIST
8469: PUSH
8470: LD_INT 25
8472: PUSH
8473: LD_INT 9
8475: PUSH
8476: EMPTY
8477: LIST
8478: LIST
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: LD_INT 24
8489: PUSH
8490: LD_INT 1000
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: ST_TO_ADDR
// if medicCount > 0 then
8507: LD_VAR 0 7
8511: PUSH
8512: LD_INT 0
8514: GREATER
8515: IFFALSE 8589
// begin if damageUnit_list > 0 then
8517: LD_VAR 0 17
8521: PUSH
8522: LD_INT 0
8524: GREATER
8525: IFFALSE 8589
// begin for i in damageUnit_list do
8527: LD_ADDR_VAR 0 14
8531: PUSH
8532: LD_VAR 0 17
8536: PUSH
8537: FOR_IN
8538: IFFALSE 8587
// begin ComMoveToArea ( i , healArea ) ;
8540: LD_VAR 0 14
8544: PPUSH
8545: LD_VAR 0 10
8549: PPUSH
8550: CALL_OW 113
// for j in medic_list do
8554: LD_ADDR_VAR 0 15
8558: PUSH
8559: LD_VAR 0 18
8563: PUSH
8564: FOR_IN
8565: IFFALSE 8583
// AddComHeal ( j , i ) ;
8567: LD_VAR 0 15
8571: PPUSH
8572: LD_VAR 0 14
8576: PPUSH
8577: CALL_OW 188
8581: GO 8564
8583: POP
8584: POP
// end ;
8585: GO 8537
8587: POP
8588: POP
// end ; end ; for i in soldiersOK_list do
8589: LD_ADDR_VAR 0 14
8593: PUSH
8594: LD_VAR 0 19
8598: PUSH
8599: FOR_IN
8600: IFFALSE 8776
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8602: LD_ADDR_VAR 0 22
8606: PUSH
8607: LD_INT 22
8609: PUSH
8610: LD_VAR 0 11
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PPUSH
8619: CALL_OW 69
8623: PPUSH
8624: LD_VAR 0 14
8628: PPUSH
8629: CALL_OW 74
8633: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8634: LD_ADDR_VAR 0 23
8638: PUSH
8639: LD_INT 22
8641: PUSH
8642: LD_VAR 0 11
8646: PUSH
8647: EMPTY
8648: LIST
8649: LIST
8650: PUSH
8651: LD_INT 2
8653: PUSH
8654: LD_INT 59
8656: PUSH
8657: EMPTY
8658: LIST
8659: PUSH
8660: LD_INT 21
8662: PUSH
8663: LD_INT 1
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: PUSH
8670: LD_INT 21
8672: PUSH
8673: LD_INT 2
8675: PUSH
8676: EMPTY
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: PUSH
8686: EMPTY
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: PPUSH
8693: CALL_OW 69
8697: PPUSH
8698: LD_VAR 0 14
8702: PPUSH
8703: CALL_OW 74
8707: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8708: LD_VAR 0 14
8712: PPUSH
8713: LD_VAR 0 22
8717: PPUSH
8718: CALL_OW 296
8722: PUSH
8723: LD_INT 8
8725: PLUS
8726: PUSH
8727: LD_VAR 0 14
8731: PPUSH
8732: LD_VAR 0 23
8736: PPUSH
8737: CALL_OW 296
8741: LESS
8742: IFFALSE 8760
// begin ComAttackUnit ( i , target1 ) ;
8744: LD_VAR 0 14
8748: PPUSH
8749: LD_VAR 0 22
8753: PPUSH
8754: CALL_OW 115
// end else
8758: GO 8774
// begin ComAttackUnit ( i , target2 ) ;
8760: LD_VAR 0 14
8764: PPUSH
8765: LD_VAR 0 23
8769: PPUSH
8770: CALL_OW 115
// end ; end ;
8774: GO 8599
8776: POP
8777: POP
// for i in soldiersOK_list do
8778: LD_ADDR_VAR 0 14
8782: PUSH
8783: LD_VAR 0 19
8787: PUSH
8788: FOR_IN
8789: IFFALSE 8965
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8791: LD_ADDR_VAR 0 22
8795: PUSH
8796: LD_INT 22
8798: PUSH
8799: LD_VAR 0 11
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 69
8812: PPUSH
8813: LD_VAR 0 14
8817: PPUSH
8818: CALL_OW 74
8822: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8823: LD_ADDR_VAR 0 23
8827: PUSH
8828: LD_INT 22
8830: PUSH
8831: LD_VAR 0 11
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 2
8842: PUSH
8843: LD_INT 59
8845: PUSH
8846: EMPTY
8847: LIST
8848: PUSH
8849: LD_INT 21
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 21
8861: PUSH
8862: LD_INT 2
8864: PUSH
8865: EMPTY
8866: LIST
8867: LIST
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PUSH
8875: EMPTY
8876: LIST
8877: LIST
8878: PUSH
8879: EMPTY
8880: LIST
8881: PPUSH
8882: CALL_OW 69
8886: PPUSH
8887: LD_VAR 0 14
8891: PPUSH
8892: CALL_OW 74
8896: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8897: LD_VAR 0 14
8901: PPUSH
8902: LD_VAR 0 22
8906: PPUSH
8907: CALL_OW 296
8911: PUSH
8912: LD_INT 8
8914: PLUS
8915: PUSH
8916: LD_VAR 0 14
8920: PPUSH
8921: LD_VAR 0 23
8925: PPUSH
8926: CALL_OW 296
8930: LESS
8931: IFFALSE 8949
// begin ComAttackUnit ( i , target1 ) ;
8933: LD_VAR 0 14
8937: PPUSH
8938: LD_VAR 0 22
8942: PPUSH
8943: CALL_OW 115
// end else
8947: GO 8963
// begin ComAttackUnit ( i , target2 ) ;
8949: LD_VAR 0 14
8953: PPUSH
8954: LD_VAR 0 23
8958: PPUSH
8959: CALL_OW 115
// end ; end ;
8963: GO 8788
8965: POP
8966: POP
// until soldiersOK_list = [ ] ;
8967: LD_VAR 0 19
8971: PUSH
8972: EMPTY
8973: EQUAL
8974: IFFALSE 8352
// end ; end ;
8976: LD_VAR 0 13
8980: RET
// export function RepairVehicle ( side , repairArea , repX , repY ) ; var i , j , vehicleOK_list , damageVehicle_list , vehicleNeedRepair_list , vehicleDontNeedRepair_list , mechanicInside_list , mechanicOutside_list ; begin
8981: LD_INT 0
8983: PPUSH
8984: PPUSH
8985: PPUSH
8986: PPUSH
8987: PPUSH
8988: PPUSH
8989: PPUSH
8990: PPUSH
8991: PPUSH
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 660 ] , [ f_not , [ f_empty ] , [ f_or , [ f_weapon , 43 ] , [ f_weapon , 44 ] , [ f_weapon , 46 ] ] ] ] ) ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 22
8999: PUSH
9000: LD_VAR 0 1
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: PUSH
9009: LD_INT 21
9011: PUSH
9012: LD_INT 2
9014: PUSH
9015: EMPTY
9016: LIST
9017: LIST
9018: PUSH
9019: LD_INT 24
9021: PUSH
9022: LD_INT 660
9024: PUSH
9025: EMPTY
9026: LIST
9027: LIST
9028: PUSH
9029: LD_INT 3
9031: PUSH
9032: LD_INT 58
9034: PUSH
9035: EMPTY
9036: LIST
9037: PUSH
9038: LD_INT 2
9040: PUSH
9041: LD_INT 34
9043: PUSH
9044: LD_INT 43
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: PUSH
9051: LD_INT 34
9053: PUSH
9054: LD_INT 44
9056: PUSH
9057: EMPTY
9058: LIST
9059: LIST
9060: PUSH
9061: LD_INT 34
9063: PUSH
9064: LD_INT 46
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PUSH
9071: EMPTY
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: PUSH
9077: EMPTY
9078: LIST
9079: LIST
9080: LIST
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: PPUSH
9088: CALL_OW 69
9092: ST_TO_ADDR
// damageVehicle_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 660 ] ] ] ) ;
9093: LD_ADDR_VAR 0 9
9097: PUSH
9098: LD_INT 22
9100: PUSH
9101: LD_VAR 0 1
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 21
9112: PUSH
9113: LD_INT 2
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 3
9122: PUSH
9123: LD_INT 24
9125: PUSH
9126: LD_INT 660
9128: PUSH
9129: EMPTY
9130: LIST
9131: LIST
9132: PUSH
9133: EMPTY
9134: LIST
9135: LIST
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: LIST
9141: PPUSH
9142: CALL_OW 69
9146: ST_TO_ADDR
// vehicleNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9147: LD_ADDR_VAR 0 10
9151: PUSH
9152: LD_VAR 0 2
9156: PPUSH
9157: LD_INT 22
9159: PUSH
9160: LD_VAR 0 1
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 21
9171: PUSH
9172: LD_INT 2
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 3
9181: PUSH
9182: LD_INT 24
9184: PUSH
9185: LD_INT 1000
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: EMPTY
9193: LIST
9194: LIST
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: PPUSH
9201: CALL_OW 70
9205: ST_TO_ADDR
// vehicleDontNeedRepair_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] , [ f_empty ] ] ) ;
9206: LD_ADDR_VAR 0 11
9210: PUSH
9211: LD_VAR 0 2
9215: PPUSH
9216: LD_INT 22
9218: PUSH
9219: LD_VAR 0 1
9223: PUSH
9224: EMPTY
9225: LIST
9226: LIST
9227: PUSH
9228: LD_INT 21
9230: PUSH
9231: LD_INT 2
9233: PUSH
9234: EMPTY
9235: LIST
9236: LIST
9237: PUSH
9238: LD_INT 24
9240: PUSH
9241: LD_INT 1000
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PUSH
9248: LD_INT 58
9250: PUSH
9251: EMPTY
9252: LIST
9253: PUSH
9254: EMPTY
9255: LIST
9256: LIST
9257: LIST
9258: LIST
9259: PPUSH
9260: CALL_OW 70
9264: ST_TO_ADDR
// mechanicInside_list = [ ] ;
9265: LD_ADDR_VAR 0 12
9269: PUSH
9270: EMPTY
9271: ST_TO_ADDR
// mechanicOutside_list = FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) ;
9272: LD_ADDR_VAR 0 13
9276: PUSH
9277: LD_VAR 0 2
9281: PPUSH
9282: LD_INT 22
9284: PUSH
9285: LD_VAR 0 1
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: PUSH
9294: LD_INT 25
9296: PUSH
9297: LD_INT 3
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: PUSH
9304: EMPTY
9305: LIST
9306: LIST
9307: PPUSH
9308: CALL_OW 70
9312: ST_TO_ADDR
// if damageVehicle_list > 0 then
9313: LD_VAR 0 9
9317: PUSH
9318: LD_INT 0
9320: GREATER
9321: IFFALSE 9342
// ComMoveXY ( damageVehicle_list , repX , repY ) ;
9323: LD_VAR 0 9
9327: PPUSH
9328: LD_VAR 0 3
9332: PPUSH
9333: LD_VAR 0 4
9337: PPUSH
9338: CALL_OW 111
// if vehicleNeedRepair_list > 0 then
9342: LD_VAR 0 10
9346: PUSH
9347: LD_INT 0
9349: GREATER
9350: IFFALSE 9452
// begin for i in vehicleNeedRepair_list do
9352: LD_ADDR_VAR 0 6
9356: PUSH
9357: LD_VAR 0 10
9361: PUSH
9362: FOR_IN
9363: IFFALSE 9450
// begin mechanicInside_list = mechanicInside_list ^ UnitsInside ( i ) ;
9365: LD_ADDR_VAR 0 12
9369: PUSH
9370: LD_VAR 0 12
9374: PUSH
9375: LD_VAR 0 6
9379: PPUSH
9380: CALL_OW 313
9384: ADD
9385: ST_TO_ADDR
// ComExitVehicle ( mechanicInside_list ) ;
9386: LD_VAR 0 12
9390: PPUSH
9391: CALL_OW 121
// wait ( 0 0$1 ) ;
9395: LD_INT 35
9397: PPUSH
9398: CALL_OW 67
// if mechanicInside_list > 0 then
9402: LD_VAR 0 12
9406: PUSH
9407: LD_INT 0
9409: GREATER
9410: IFFALSE 9430
// AddComRepairVehicle ( mechanicInside_list [ 1 ] , i ) ;
9412: LD_VAR 0 12
9416: PUSH
9417: LD_INT 1
9419: ARRAY
9420: PPUSH
9421: LD_VAR 0 6
9425: PPUSH
9426: CALL_OW 189
// AddComEnterUnit ( mechanicInside_list [ 1 ] , i ) ;
9430: LD_VAR 0 12
9434: PUSH
9435: LD_INT 1
9437: ARRAY
9438: PPUSH
9439: LD_VAR 0 6
9443: PPUSH
9444: CALL_OW 180
// end ;
9448: GO 9362
9450: POP
9451: POP
// end ; if vehicleDontNeedRepair_list > 0 then
9452: LD_VAR 0 11
9456: PUSH
9457: LD_INT 0
9459: GREATER
9460: IFFALSE 9484
// AddComEnterUnit ( mechanicOutside_list [ 1 ] , vehicleDontNeedRepair_list [ 1 ] ) ;
9462: LD_VAR 0 13
9466: PUSH
9467: LD_INT 1
9469: ARRAY
9470: PPUSH
9471: LD_VAR 0 11
9475: PUSH
9476: LD_INT 1
9478: ARRAY
9479: PPUSH
9480: CALL_OW 180
// if vehicleOK_list > 0 and russianTanks > 0 then
9484: LD_VAR 0 8
9488: PUSH
9489: LD_INT 0
9491: GREATER
9492: PUSH
9493: LD_EXP 18
9497: PUSH
9498: LD_INT 0
9500: GREATER
9501: AND
9502: IFFALSE 9643
// begin for i := 1 to vehicleOK_list do
9504: LD_ADDR_VAR 0 6
9508: PUSH
9509: DOUBLE
9510: LD_INT 1
9512: DEC
9513: ST_TO_ADDR
9514: LD_VAR 0 8
9518: PUSH
9519: FOR_TO
9520: IFFALSE 9641
// begin if i = 4 then
9522: LD_VAR 0 6
9526: PUSH
9527: LD_INT 4
9529: EQUAL
9530: IFFALSE 9639
// begin for i in vehicleOK_list do
9532: LD_ADDR_VAR 0 6
9536: PUSH
9537: LD_VAR 0 8
9541: PUSH
9542: FOR_IN
9543: IFFALSE 9563
// russianTanks = russianTanks ^ i ;
9545: LD_ADDR_EXP 18
9549: PUSH
9550: LD_EXP 18
9554: PUSH
9555: LD_VAR 0 6
9559: ADD
9560: ST_TO_ADDR
9561: GO 9542
9563: POP
9564: POP
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9565: LD_ADDR_EXP 19
9569: PUSH
9570: LD_EXP 19
9574: PPUSH
9575: LD_INT 1
9577: PPUSH
9578: CALL_OW 3
9582: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9583: LD_ADDR_EXP 19
9587: PUSH
9588: LD_EXP 19
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: CALL_OW 3
9600: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9601: LD_ADDR_EXP 19
9605: PUSH
9606: LD_EXP 19
9610: PPUSH
9611: LD_INT 1
9613: PPUSH
9614: CALL_OW 3
9618: ST_TO_ADDR
// russianDamageTanks = Delete ( russianDamageTanks , 1 ) ;
9619: LD_ADDR_EXP 19
9623: PUSH
9624: LD_EXP 19
9628: PPUSH
9629: LD_INT 1
9631: PPUSH
9632: CALL_OW 3
9636: ST_TO_ADDR
// break ;
9637: GO 9641
// end ; end ;
9639: GO 9519
9641: POP
9642: POP
// end ; for i in not FilterUnitsInArea ( repairArea , [ [ f_side , side ] , [ f_class , 3 ] ] ) do
9643: LD_ADDR_VAR 0 6
9647: PUSH
9648: LD_VAR 0 2
9652: PPUSH
9653: LD_INT 22
9655: PUSH
9656: LD_VAR 0 1
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: LD_INT 25
9667: PUSH
9668: LD_INT 3
9670: PUSH
9671: EMPTY
9672: LIST
9673: LIST
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PPUSH
9679: CALL_OW 70
9683: NOT
9684: PUSH
9685: FOR_IN
9686: IFFALSE 9709
// ComMoveXY ( i , repX , repY ) ;
9688: LD_VAR 0 6
9692: PPUSH
9693: LD_VAR 0 3
9697: PPUSH
9698: LD_VAR 0 4
9702: PPUSH
9703: CALL_OW 111
9707: GO 9685
9709: POP
9710: POP
// end ;
9711: LD_VAR 0 5
9715: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9716: LD_INT 0
9718: PPUSH
9719: PPUSH
9720: PPUSH
9721: PPUSH
9722: PPUSH
9723: PPUSH
9724: PPUSH
9725: PPUSH
9726: PPUSH
9727: PPUSH
9728: PPUSH
// amChassisTab = [ ] ;
9729: LD_ADDR_VAR 0 19
9733: PUSH
9734: EMPTY
9735: ST_TO_ADDR
// arChassisTab = [ ] ;
9736: LD_ADDR_VAR 0 18
9740: PUSH
9741: EMPTY
9742: ST_TO_ADDR
// ruChassisTab = [ ] ;
9743: LD_ADDR_VAR 0 17
9747: PUSH
9748: EMPTY
9749: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9750: LD_INT 35
9752: PPUSH
9753: CALL_OW 67
// if nation = 1 then
9757: LD_VAR 0 5
9761: PUSH
9762: LD_INT 1
9764: EQUAL
9765: IFFALSE 10256
// begin uc_side = side ;
9767: LD_ADDR_OWVAR 20
9771: PUSH
9772: LD_VAR 0 2
9776: ST_TO_ADDR
// uc_nation = nation ;
9777: LD_ADDR_OWVAR 21
9781: PUSH
9782: LD_VAR 0 5
9786: ST_TO_ADDR
// vc_engine = vehengine ;
9787: LD_ADDR_OWVAR 39
9791: PUSH
9792: LD_VAR 0 6
9796: ST_TO_ADDR
// vc_control = vehcontrol ;
9797: LD_ADDR_OWVAR 38
9801: PUSH
9802: LD_VAR 0 7
9806: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9807: LD_ADDR_OWVAR 40
9811: PUSH
9812: LD_VAR 0 10
9816: PUSH
9817: LD_INT 1
9819: PPUSH
9820: LD_VAR 0 10
9824: PPUSH
9825: CALL_OW 12
9829: ARRAY
9830: ST_TO_ADDR
// for j = 1 to AMWeapon do
9831: LD_ADDR_VAR 0 14
9835: PUSH
9836: DOUBLE
9837: LD_INT 1
9839: DEC
9840: ST_TO_ADDR
9841: LD_VAR 0 10
9845: PUSH
9846: FOR_TO
9847: IFFALSE 10148
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9849: LD_VAR 0 10
9853: PUSH
9854: LD_VAR 0 14
9858: ARRAY
9859: PUSH
9860: LD_INT 2
9862: EQUAL
9863: PUSH
9864: LD_VAR 0 10
9868: PUSH
9869: LD_VAR 0 14
9873: ARRAY
9874: PUSH
9875: LD_INT 3
9877: EQUAL
9878: OR
9879: IFFALSE 9932
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9881: LD_ADDR_VAR 0 19
9885: PUSH
9886: LD_INT 1
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: LD_INT 3
9894: PUSH
9895: LD_INT 4
9897: PUSH
9898: LD_INT 5
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9908: LD_ADDR_OWVAR 37
9912: PUSH
9913: LD_VAR 0 19
9917: PUSH
9918: LD_INT 1
9920: PPUSH
9921: LD_VAR 0 19
9925: PPUSH
9926: CALL_OW 12
9930: ARRAY
9931: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9932: LD_VAR 0 10
9936: PUSH
9937: LD_VAR 0 14
9941: ARRAY
9942: PUSH
9943: LD_INT 4
9945: EQUAL
9946: PUSH
9947: LD_VAR 0 10
9951: PUSH
9952: LD_VAR 0 14
9956: ARRAY
9957: PUSH
9958: LD_INT 5
9960: EQUAL
9961: OR
9962: PUSH
9963: LD_VAR 0 10
9967: PUSH
9968: LD_VAR 0 14
9972: ARRAY
9973: PUSH
9974: LD_INT 9
9976: EQUAL
9977: OR
9978: PUSH
9979: LD_VAR 0 10
9983: PUSH
9984: LD_VAR 0 14
9988: ARRAY
9989: PUSH
9990: LD_INT 11
9992: EQUAL
9993: OR
9994: PUSH
9995: LD_VAR 0 10
9999: PUSH
10000: LD_VAR 0 14
10004: ARRAY
10005: PUSH
10006: LD_INT 7
10008: EQUAL
10009: OR
10010: IFFALSE 10059
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
10012: LD_ADDR_VAR 0 19
10016: PUSH
10017: LD_INT 2
10019: PUSH
10020: LD_INT 3
10022: PUSH
10023: LD_INT 4
10025: PUSH
10026: LD_INT 5
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10035: LD_ADDR_OWVAR 37
10039: PUSH
10040: LD_VAR 0 19
10044: PUSH
10045: LD_INT 1
10047: PPUSH
10048: LD_VAR 0 19
10052: PPUSH
10053: CALL_OW 12
10057: ARRAY
10058: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
10059: LD_VAR 0 10
10063: PUSH
10064: LD_VAR 0 14
10068: ARRAY
10069: PUSH
10070: LD_INT 8
10072: EQUAL
10073: PUSH
10074: LD_VAR 0 10
10078: PUSH
10079: LD_VAR 0 14
10083: ARRAY
10084: PUSH
10085: LD_INT 6
10087: EQUAL
10088: OR
10089: PUSH
10090: LD_VAR 0 10
10094: PUSH
10095: LD_VAR 0 14
10099: ARRAY
10100: PUSH
10101: LD_INT 10
10103: EQUAL
10104: OR
10105: IFFALSE 10146
// begin amChassisTab = [ 4 , 5 ] ;
10107: LD_ADDR_VAR 0 19
10111: PUSH
10112: LD_INT 4
10114: PUSH
10115: LD_INT 5
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
10122: LD_ADDR_OWVAR 37
10126: PUSH
10127: LD_VAR 0 19
10131: PUSH
10132: LD_INT 1
10134: PPUSH
10135: LD_VAR 0 19
10139: PPUSH
10140: CALL_OW 12
10144: ARRAY
10145: ST_TO_ADDR
// end ; end ;
10146: GO 9846
10148: POP
10149: POP
// veh = CreateVehicle ;
10150: LD_ADDR_VAR 0 16
10154: PUSH
10155: CALL_OW 45
10159: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10160: LD_VAR 0 16
10164: PPUSH
10165: LD_VAR 0 1
10169: PPUSH
10170: LD_INT 0
10172: PPUSH
10173: CALL_OW 49
// if vehControl = 1 then
10177: LD_VAR 0 7
10181: PUSH
10182: LD_INT 1
10184: EQUAL
10185: IFFALSE 10242
// begin hc_gallery =  ;
10187: LD_ADDR_OWVAR 33
10191: PUSH
10192: LD_STRING 
10194: ST_TO_ADDR
// hc_name =  ;
10195: LD_ADDR_OWVAR 26
10199: PUSH
10200: LD_STRING 
10202: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10203: LD_INT 0
10205: PPUSH
10206: LD_INT 3
10208: PPUSH
10209: LD_VAR 0 4
10213: PPUSH
10214: CALL_OW 380
// un = CreateHuman ;
10218: LD_ADDR_VAR 0 15
10222: PUSH
10223: CALL_OW 44
10227: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10228: LD_VAR 0 15
10232: PPUSH
10233: LD_VAR 0 16
10237: PPUSH
10238: CALL_OW 52
// end ; i = i + 1 ;
10242: LD_ADDR_VAR 0 13
10246: PUSH
10247: LD_VAR 0 13
10251: PUSH
10252: LD_INT 1
10254: PLUS
10255: ST_TO_ADDR
// end ; if nation = 2 then
10256: LD_VAR 0 5
10260: PUSH
10261: LD_INT 2
10263: EQUAL
10264: IFFALSE 10688
// begin uc_side = side ;
10266: LD_ADDR_OWVAR 20
10270: PUSH
10271: LD_VAR 0 2
10275: ST_TO_ADDR
// uc_nation = nation ;
10276: LD_ADDR_OWVAR 21
10280: PUSH
10281: LD_VAR 0 5
10285: ST_TO_ADDR
// vc_engine = vehengine ;
10286: LD_ADDR_OWVAR 39
10290: PUSH
10291: LD_VAR 0 6
10295: ST_TO_ADDR
// vc_control = vehcontrol ;
10296: LD_ADDR_OWVAR 38
10300: PUSH
10301: LD_VAR 0 7
10305: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
10306: LD_ADDR_OWVAR 40
10310: PUSH
10311: LD_VAR 0 9
10315: PUSH
10316: LD_INT 1
10318: PPUSH
10319: LD_VAR 0 9
10323: PPUSH
10324: CALL_OW 12
10328: ARRAY
10329: ST_TO_ADDR
// for j = 1 to ARWeapons do
10330: LD_ADDR_VAR 0 14
10334: PUSH
10335: DOUBLE
10336: LD_INT 1
10338: DEC
10339: ST_TO_ADDR
10340: LD_VAR 0 9
10344: PUSH
10345: FOR_TO
10346: IFFALSE 10580
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
10348: LD_VAR 0 9
10352: PUSH
10353: LD_VAR 0 14
10357: ARRAY
10358: PUSH
10359: LD_INT 24
10361: EQUAL
10362: PUSH
10363: LD_VAR 0 9
10367: PUSH
10368: LD_VAR 0 14
10372: ARRAY
10373: PUSH
10374: LD_INT 22
10376: EQUAL
10377: OR
10378: PUSH
10379: LD_VAR 0 9
10383: PUSH
10384: LD_VAR 0 14
10388: ARRAY
10389: PUSH
10390: LD_INT 23
10392: EQUAL
10393: OR
10394: PUSH
10395: LD_VAR 0 9
10399: PUSH
10400: LD_VAR 0 14
10404: ARRAY
10405: PUSH
10406: LD_INT 30
10408: EQUAL
10409: OR
10410: IFFALSE 10459
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
10412: LD_ADDR_VAR 0 18
10416: PUSH
10417: LD_INT 11
10419: PUSH
10420: LD_INT 12
10422: PUSH
10423: LD_INT 13
10425: PUSH
10426: LD_INT 14
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10435: LD_ADDR_OWVAR 37
10439: PUSH
10440: LD_VAR 0 18
10444: PUSH
10445: LD_INT 1
10447: PPUSH
10448: LD_VAR 0 18
10452: PPUSH
10453: CALL_OW 12
10457: ARRAY
10458: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
10459: LD_VAR 0 9
10463: PUSH
10464: LD_VAR 0 14
10468: ARRAY
10469: PUSH
10470: LD_INT 29
10472: EQUAL
10473: PUSH
10474: LD_VAR 0 9
10478: PUSH
10479: LD_VAR 0 14
10483: ARRAY
10484: PUSH
10485: LD_INT 28
10487: EQUAL
10488: OR
10489: PUSH
10490: LD_VAR 0 9
10494: PUSH
10495: LD_VAR 0 14
10499: ARRAY
10500: PUSH
10501: LD_INT 27
10503: EQUAL
10504: OR
10505: PUSH
10506: LD_VAR 0 9
10510: PUSH
10511: LD_VAR 0 14
10515: ARRAY
10516: PUSH
10517: LD_INT 26
10519: EQUAL
10520: OR
10521: PUSH
10522: LD_VAR 0 9
10526: PUSH
10527: LD_VAR 0 14
10531: ARRAY
10532: PUSH
10533: LD_INT 25
10535: EQUAL
10536: OR
10537: IFFALSE 10578
// begin arChassisTab = [ 13 , 14 ] ;
10539: LD_ADDR_VAR 0 18
10543: PUSH
10544: LD_INT 13
10546: PUSH
10547: LD_INT 14
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10554: LD_ADDR_OWVAR 37
10558: PUSH
10559: LD_VAR 0 18
10563: PUSH
10564: LD_INT 1
10566: PPUSH
10567: LD_VAR 0 18
10571: PPUSH
10572: CALL_OW 12
10576: ARRAY
10577: ST_TO_ADDR
// end ; end ;
10578: GO 10345
10580: POP
10581: POP
// veh = CreateVehicle ;
10582: LD_ADDR_VAR 0 16
10586: PUSH
10587: CALL_OW 45
10591: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10592: LD_VAR 0 16
10596: PPUSH
10597: LD_VAR 0 1
10601: PPUSH
10602: LD_INT 0
10604: PPUSH
10605: CALL_OW 49
// if vehcontrol = 1 then
10609: LD_VAR 0 7
10613: PUSH
10614: LD_INT 1
10616: EQUAL
10617: IFFALSE 10674
// begin hc_gallery =  ;
10619: LD_ADDR_OWVAR 33
10623: PUSH
10624: LD_STRING 
10626: ST_TO_ADDR
// hc_name =  ;
10627: LD_ADDR_OWVAR 26
10631: PUSH
10632: LD_STRING 
10634: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10635: LD_INT 0
10637: PPUSH
10638: LD_INT 3
10640: PPUSH
10641: LD_VAR 0 4
10645: PPUSH
10646: CALL_OW 380
// un = CreateHuman ;
10650: LD_ADDR_VAR 0 15
10654: PUSH
10655: CALL_OW 44
10659: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10660: LD_VAR 0 15
10664: PPUSH
10665: LD_VAR 0 16
10669: PPUSH
10670: CALL_OW 52
// end ; i = i + 1 ;
10674: LD_ADDR_VAR 0 13
10678: PUSH
10679: LD_VAR 0 13
10683: PUSH
10684: LD_INT 1
10686: PLUS
10687: ST_TO_ADDR
// end ; if nation = 3 then
10688: LD_VAR 0 5
10692: PUSH
10693: LD_INT 3
10695: EQUAL
10696: IFFALSE 11088
// begin uc_side = side ;
10698: LD_ADDR_OWVAR 20
10702: PUSH
10703: LD_VAR 0 2
10707: ST_TO_ADDR
// uc_nation = nation ;
10708: LD_ADDR_OWVAR 21
10712: PUSH
10713: LD_VAR 0 5
10717: ST_TO_ADDR
// vc_engine = vehengine ;
10718: LD_ADDR_OWVAR 39
10722: PUSH
10723: LD_VAR 0 6
10727: ST_TO_ADDR
// vc_control = vehcontrol ;
10728: LD_ADDR_OWVAR 38
10732: PUSH
10733: LD_VAR 0 7
10737: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10738: LD_ADDR_OWVAR 40
10742: PUSH
10743: LD_VAR 0 8
10747: PUSH
10748: LD_INT 1
10750: PPUSH
10751: LD_VAR 0 8
10755: PPUSH
10756: CALL_OW 12
10760: ARRAY
10761: ST_TO_ADDR
// for j = 1 to RuWeapons do
10762: LD_ADDR_VAR 0 14
10766: PUSH
10767: DOUBLE
10768: LD_INT 1
10770: DEC
10771: ST_TO_ADDR
10772: LD_VAR 0 8
10776: PUSH
10777: FOR_TO
10778: IFFALSE 10980
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10780: LD_VAR 0 8
10784: PUSH
10785: LD_VAR 0 14
10789: ARRAY
10790: PUSH
10791: LD_INT 42
10793: EQUAL
10794: PUSH
10795: LD_VAR 0 8
10799: PUSH
10800: LD_VAR 0 14
10804: ARRAY
10805: PUSH
10806: LD_INT 43
10808: EQUAL
10809: OR
10810: PUSH
10811: LD_VAR 0 8
10815: PUSH
10816: LD_VAR 0 14
10820: ARRAY
10821: PUSH
10822: LD_INT 44
10824: EQUAL
10825: OR
10826: PUSH
10827: LD_VAR 0 8
10831: PUSH
10832: LD_VAR 0 14
10836: ARRAY
10837: PUSH
10838: LD_INT 45
10840: EQUAL
10841: OR
10842: PUSH
10843: LD_VAR 0 8
10847: PUSH
10848: LD_VAR 0 14
10852: ARRAY
10853: PUSH
10854: LD_INT 49
10856: EQUAL
10857: OR
10858: IFFALSE 10907
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10860: LD_ADDR_VAR 0 17
10864: PUSH
10865: LD_INT 21
10867: PUSH
10868: LD_INT 22
10870: PUSH
10871: LD_INT 23
10873: PUSH
10874: LD_INT 24
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10883: LD_ADDR_OWVAR 37
10887: PUSH
10888: LD_VAR 0 17
10892: PUSH
10893: LD_INT 1
10895: PPUSH
10896: LD_VAR 0 17
10900: PPUSH
10901: CALL_OW 12
10905: ARRAY
10906: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10907: LD_VAR 0 8
10911: PUSH
10912: LD_VAR 0 14
10916: ARRAY
10917: PUSH
10918: LD_INT 46
10920: EQUAL
10921: PUSH
10922: LD_VAR 0 8
10926: PUSH
10927: LD_VAR 0 14
10931: ARRAY
10932: PUSH
10933: LD_INT 47
10935: EQUAL
10936: OR
10937: IFFALSE 10978
// begin ruChassisTab = [ 23 , 24 ] ;
10939: LD_ADDR_VAR 0 17
10943: PUSH
10944: LD_INT 23
10946: PUSH
10947: LD_INT 24
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10954: LD_ADDR_OWVAR 37
10958: PUSH
10959: LD_VAR 0 17
10963: PUSH
10964: LD_INT 1
10966: PPUSH
10967: LD_VAR 0 17
10971: PPUSH
10972: CALL_OW 12
10976: ARRAY
10977: ST_TO_ADDR
// end ; end ;
10978: GO 10777
10980: POP
10981: POP
// veh = CreateVehicle ;
10982: LD_ADDR_VAR 0 16
10986: PUSH
10987: CALL_OW 45
10991: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10992: LD_VAR 0 16
10996: PPUSH
10997: LD_VAR 0 1
11001: PPUSH
11002: LD_INT 0
11004: PPUSH
11005: CALL_OW 49
// if vehcontrol = 1 then
11009: LD_VAR 0 7
11013: PUSH
11014: LD_INT 1
11016: EQUAL
11017: IFFALSE 11074
// begin hc_gallery =  ;
11019: LD_ADDR_OWVAR 33
11023: PUSH
11024: LD_STRING 
11026: ST_TO_ADDR
// hc_name =  ;
11027: LD_ADDR_OWVAR 26
11031: PUSH
11032: LD_STRING 
11034: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
11035: LD_INT 0
11037: PPUSH
11038: LD_INT 3
11040: PPUSH
11041: LD_VAR 0 4
11045: PPUSH
11046: CALL_OW 380
// un = CreateHuman ;
11050: LD_ADDR_VAR 0 15
11054: PUSH
11055: CALL_OW 44
11059: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
11060: LD_VAR 0 15
11064: PPUSH
11065: LD_VAR 0 16
11069: PPUSH
11070: CALL_OW 52
// end ; i = i + 1 ;
11074: LD_ADDR_VAR 0 13
11078: PUSH
11079: LD_VAR 0 13
11083: PUSH
11084: LD_INT 1
11086: PLUS
11087: ST_TO_ADDR
// end ; until i = vehCount ;
11088: LD_VAR 0 13
11092: PUSH
11093: LD_VAR 0 3
11097: EQUAL
11098: IFFALSE 9750
// repeat wait ( 0 0$1 ) ;
11100: LD_INT 35
11102: PPUSH
11103: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 661 ] ] ) ;
11107: LD_ADDR_VAR 0 20
11111: PUSH
11112: LD_INT 22
11114: PUSH
11115: LD_VAR 0 2
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 21
11126: PUSH
11127: LD_INT 2
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: PUSH
11134: LD_INT 24
11136: PUSH
11137: LD_INT 661
11139: PUSH
11140: EMPTY
11141: LIST
11142: LIST
11143: PUSH
11144: EMPTY
11145: LIST
11146: LIST
11147: LIST
11148: PPUSH
11149: CALL_OW 69
11153: ST_TO_ADDR
// if vehicleOK_list > 0 then
11154: LD_VAR 0 20
11158: PUSH
11159: LD_INT 0
11161: GREATER
11162: IFFALSE 11353
// begin for i in vehicleOK_list do
11164: LD_ADDR_VAR 0 13
11168: PUSH
11169: LD_VAR 0 20
11173: PUSH
11174: FOR_IN
11175: IFFALSE 11351
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
11177: LD_ADDR_VAR 0 21
11181: PUSH
11182: LD_INT 22
11184: PUSH
11185: LD_VAR 0 11
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: PPUSH
11194: CALL_OW 69
11198: PPUSH
11199: LD_VAR 0 13
11203: PPUSH
11204: CALL_OW 74
11208: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
11209: LD_ADDR_VAR 0 22
11213: PUSH
11214: LD_INT 22
11216: PUSH
11217: LD_VAR 0 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 2
11228: PUSH
11229: LD_INT 59
11231: PUSH
11232: EMPTY
11233: LIST
11234: PUSH
11235: LD_INT 21
11237: PUSH
11238: LD_INT 1
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 21
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: EMPTY
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: PPUSH
11268: CALL_OW 69
11272: PPUSH
11273: LD_VAR 0 13
11277: PPUSH
11278: CALL_OW 74
11282: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
11283: LD_VAR 0 13
11287: PPUSH
11288: LD_VAR 0 21
11292: PPUSH
11293: CALL_OW 296
11297: PUSH
11298: LD_INT 8
11300: PLUS
11301: PUSH
11302: LD_VAR 0 13
11306: PPUSH
11307: LD_VAR 0 22
11311: PPUSH
11312: CALL_OW 296
11316: LESS
11317: IFFALSE 11335
// begin ComAttackUnit ( i , target1 ) ;
11319: LD_VAR 0 13
11323: PPUSH
11324: LD_VAR 0 21
11328: PPUSH
11329: CALL_OW 115
// end else
11333: GO 11349
// begin ComAttackUnit ( i , target2 ) ;
11335: LD_VAR 0 13
11339: PPUSH
11340: LD_VAR 0 22
11344: PPUSH
11345: CALL_OW 115
// end ; end ;
11349: GO 11174
11351: POP
11352: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 ;
11353: LD_INT 22
11355: PUSH
11356: LD_VAR 0 2
11360: PUSH
11361: EMPTY
11362: LIST
11363: LIST
11364: PUSH
11365: LD_INT 21
11367: PUSH
11368: LD_INT 2
11370: PUSH
11371: EMPTY
11372: LIST
11373: LIST
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: PPUSH
11379: CALL_OW 69
11383: PUSH
11384: LD_INT 0
11386: EQUAL
11387: IFFALSE 11100
// end ; end_of_file
11389: LD_VAR 0 12
11393: RET
// every 1 do var i , gammaSquad , startX , startY ;
11394: GO 11396
11396: DISABLE
11397: LD_INT 0
11399: PPUSH
11400: PPUSH
11401: PPUSH
11402: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11403: LD_ADDR_VAR 0 2
11407: PUSH
11408: LD_EXP 8
11412: PUSH
11413: LD_EXP 9
11417: PUSH
11418: LD_EXP 10
11422: PUSH
11423: LD_EXP 11
11427: PUSH
11428: LD_EXP 12
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11440: LD_ADDR_VAR 0 3
11444: PUSH
11445: LD_INT 46
11447: PUSH
11448: LD_INT 45
11450: PUSH
11451: LD_INT 44
11453: PUSH
11454: LD_INT 43
11456: PUSH
11457: LD_INT 42
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11467: LD_ADDR_VAR 0 4
11471: PUSH
11472: LD_INT 14
11474: PUSH
11475: LD_INT 12
11477: PUSH
11478: LD_INT 10
11480: PUSH
11481: LD_INT 8
11483: PUSH
11484: LD_INT 6
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: LIST
11493: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11494: LD_INT 32
11496: PPUSH
11497: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11501: LD_INT 32
11503: PPUSH
11504: LD_INT 51
11506: PPUSH
11507: LD_INT 26
11509: PPUSH
11510: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11514: LD_INT 32
11516: PPUSH
11517: LD_INT 53
11519: PPUSH
11520: LD_INT 23
11522: PPUSH
11523: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11527: LD_INT 32
11529: PPUSH
11530: LD_INT 52
11532: PPUSH
11533: LD_INT 19
11535: PPUSH
11536: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11540: LD_INT 35
11542: PPUSH
11543: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11547: LD_INT 32
11549: PPUSH
11550: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11554: LD_INT 32
11556: PPUSH
11557: CALL_OW 250
11561: PUSH
11562: LD_INT 52
11564: EQUAL
11565: PUSH
11566: LD_INT 32
11568: PPUSH
11569: CALL_OW 251
11573: PUSH
11574: LD_INT 19
11576: EQUAL
11577: AND
11578: IFFALSE 11540
// ComExitVehicle ( JMM ) ;
11580: LD_EXP 1
11584: PPUSH
11585: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11589: LD_EXP 7
11593: PPUSH
11594: LD_EXP 1
11598: PPUSH
11599: CALL_OW 119
// wait ( 0 0$01 ) ;
11603: LD_INT 35
11605: PPUSH
11606: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11610: LD_EXP 1
11614: PPUSH
11615: LD_INT 46
11617: PPUSH
11618: LD_INT 10
11620: PPUSH
11621: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11625: LD_EXP 1
11629: PPUSH
11630: LD_EXP 7
11634: PPUSH
11635: CALL_OW 179
// wait ( 0 0$4 ) ;
11639: LD_INT 140
11641: PPUSH
11642: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11646: LD_EXP 1
11650: PPUSH
11651: LD_STRING D1-JMM-1
11653: PPUSH
11654: CALL_OW 88
// if not dialogue_skipped then
11658: LD_OWVAR 59
11662: NOT
11663: IFFALSE 12320
// begin for i := 1 to gammaSquad do
11665: LD_ADDR_VAR 0 1
11669: PUSH
11670: DOUBLE
11671: LD_INT 1
11673: DEC
11674: ST_TO_ADDR
11675: LD_VAR 0 2
11679: PUSH
11680: FOR_TO
11681: IFFALSE 11742
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11683: LD_VAR 0 2
11687: PUSH
11688: LD_VAR 0 1
11692: ARRAY
11693: PPUSH
11694: LD_VAR 0 3
11698: PUSH
11699: LD_VAR 0 1
11703: ARRAY
11704: PPUSH
11705: LD_VAR 0 4
11709: PUSH
11710: LD_VAR 0 1
11714: ARRAY
11715: PPUSH
11716: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11720: LD_VAR 0 2
11724: PUSH
11725: LD_VAR 0 1
11729: ARRAY
11730: PPUSH
11731: LD_EXP 1
11735: PPUSH
11736: CALL_OW 179
// end ;
11740: GO 11680
11742: POP
11743: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11744: LD_EXP 4
11748: PPUSH
11749: LD_INT 41
11751: PPUSH
11752: LD_INT 4
11754: PPUSH
11755: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11759: LD_EXP 4
11763: PPUSH
11764: LD_EXP 1
11768: PPUSH
11769: CALL_OW 179
// if Lisa = false and Bobby then
11773: LD_EXP 4
11777: PUSH
11778: LD_INT 0
11780: EQUAL
11781: PUSH
11782: LD_EXP 2
11786: AND
11787: IFFALSE 11818
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11789: LD_EXP 2
11793: PPUSH
11794: LD_INT 41
11796: PPUSH
11797: LD_INT 4
11799: PPUSH
11800: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11804: LD_EXP 2
11808: PPUSH
11809: LD_EXP 1
11813: PPUSH
11814: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11818: LD_EXP 4
11822: PUSH
11823: LD_INT 0
11825: EQUAL
11826: PUSH
11827: LD_EXP 2
11831: PUSH
11832: LD_INT 0
11834: EQUAL
11835: AND
11836: PUSH
11837: LD_EXP 3
11841: AND
11842: IFFALSE 11873
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11844: LD_EXP 3
11848: PPUSH
11849: LD_INT 41
11851: PPUSH
11852: LD_INT 4
11854: PPUSH
11855: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11859: LD_EXP 3
11863: PPUSH
11864: LD_EXP 1
11868: PPUSH
11869: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11873: LD_EXP 4
11877: PUSH
11878: LD_INT 0
11880: EQUAL
11881: PUSH
11882: LD_EXP 2
11886: PUSH
11887: LD_INT 0
11889: EQUAL
11890: AND
11891: PUSH
11892: LD_EXP 3
11896: PUSH
11897: LD_INT 0
11899: EQUAL
11900: AND
11901: IFFALSE 11932
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11903: LD_EXP 6
11907: PPUSH
11908: LD_INT 41
11910: PPUSH
11911: LD_INT 4
11913: PPUSH
11914: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11918: LD_EXP 6
11922: PPUSH
11923: LD_EXP 1
11927: PPUSH
11928: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11932: LD_EXP 7
11936: PPUSH
11937: LD_STRING D1-Brown-1
11939: PPUSH
11940: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11944: LD_EXP 1
11948: PPUSH
11949: LD_STRING D1-JMM-2
11951: PPUSH
11952: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11956: LD_EXP 7
11960: PPUSH
11961: LD_STRING D1-Brown-2
11963: PPUSH
11964: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11968: LD_EXP 1
11972: PPUSH
11973: LD_EXP 9
11977: PPUSH
11978: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11982: LD_EXP 9
11986: PPUSH
11987: LD_STRING D1-FSol1-2
11989: PPUSH
11990: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11994: LD_EXP 1
11998: PPUSH
11999: LD_EXP 8
12003: PPUSH
12004: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
12008: LD_EXP 8
12012: PPUSH
12013: LD_STRING D1-Sol2-2
12015: PPUSH
12016: CALL_OW 88
// if Lisa then
12020: LD_EXP 4
12024: IFFALSE 12064
// begin ComTurnUnit ( JMM , Lisa ) ;
12026: LD_EXP 1
12030: PPUSH
12031: LD_EXP 4
12035: PPUSH
12036: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
12040: LD_EXP 4
12044: PPUSH
12045: LD_STRING D1-Lisa-2
12047: PPUSH
12048: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12052: LD_EXP 1
12056: PPUSH
12057: LD_STRING D1-JMM-3
12059: PPUSH
12060: CALL_OW 88
// end ; if Bobby then
12064: LD_EXP 2
12068: IFFALSE 12108
// begin ComTurnUnit ( JMM , Bobby ) ;
12070: LD_EXP 1
12074: PPUSH
12075: LD_EXP 2
12079: PPUSH
12080: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
12084: LD_EXP 2
12088: PPUSH
12089: LD_STRING D1-Bobby-2
12091: PPUSH
12092: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12096: LD_EXP 1
12100: PPUSH
12101: LD_STRING D1-JMM-3
12103: PPUSH
12104: CALL_OW 88
// end ; if Cyrus then
12108: LD_EXP 3
12112: IFFALSE 12152
// begin ComTurnUnit ( JMM , Cyrus ) ;
12114: LD_EXP 1
12118: PPUSH
12119: LD_EXP 3
12123: PPUSH
12124: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
12128: LD_EXP 3
12132: PPUSH
12133: LD_STRING D1-Cyrus-2
12135: PPUSH
12136: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
12140: LD_EXP 1
12144: PPUSH
12145: LD_STRING D1-JMM-3
12147: PPUSH
12148: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
12152: LD_EXP 1
12156: PPUSH
12157: LD_EXP 7
12161: PPUSH
12162: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
12166: LD_EXP 1
12170: PPUSH
12171: LD_STRING D1-JMM-3a
12173: PPUSH
12174: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
12178: LD_EXP 7
12182: PPUSH
12183: LD_INT 38
12185: PPUSH
12186: LD_INT 5
12188: PPUSH
12189: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
12193: LD_EXP 7
12197: PPUSH
12198: LD_EXP 1
12202: PPUSH
12203: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
12207: LD_EXP 1
12211: PPUSH
12212: LD_INT 40
12214: PPUSH
12215: LD_INT 7
12217: PPUSH
12218: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
12222: LD_EXP 1
12226: PPUSH
12227: LD_EXP 7
12231: PPUSH
12232: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
12236: LD_EXP 7
12240: PPUSH
12241: LD_STRING D1-Brown-3
12243: PPUSH
12244: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
12248: LD_EXP 14
12252: PPUSH
12253: LD_STRING D1-Har-3
12255: PPUSH
12256: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
12260: LD_EXP 1
12264: PPUSH
12265: LD_STRING D1-JMM-4
12267: PPUSH
12268: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
12272: LD_EXP 14
12276: PPUSH
12277: LD_STRING D1-Har-4
12279: PPUSH
12280: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
12284: LD_EXP 1
12288: PPUSH
12289: LD_STRING D1-JMM-5
12291: PPUSH
12292: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
12296: LD_EXP 14
12300: PPUSH
12301: LD_STRING D1-Har-5
12303: PPUSH
12304: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
12308: LD_EXP 1
12312: PPUSH
12313: LD_STRING D1-JMM-6
12315: PPUSH
12316: CALL_OW 88
// end ; InGameOff ;
12320: CALL_OW 9
// PrepareRussianConvoy ;
12324: CALL 2806 0 0
// ChangeMissionObjectives ( M1 ) ;
12328: LD_STRING M1
12330: PPUSH
12331: CALL_OW 337
// SaveForQuickRestart ;
12335: CALL_OW 22
// timerStatus = 1 ;
12339: LD_ADDR_EXP 29
12343: PUSH
12344: LD_INT 1
12346: ST_TO_ADDR
// startTimer = 1 ;
12347: LD_ADDR_EXP 30
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// bonusAvalaible = 1 ;
12355: LD_ADDR_EXP 42
12359: PUSH
12360: LD_INT 1
12362: ST_TO_ADDR
// wait ( 0 0$3 ) ;
12363: LD_INT 105
12365: PPUSH
12366: CALL_OW 67
// DialogueOn ;
12370: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
12374: LD_EXP 12
12378: PPUSH
12379: LD_STRING D9-Mech1-1
12381: PPUSH
12382: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
12386: LD_EXP 1
12390: PPUSH
12391: LD_STRING D9-JMM-1
12393: PPUSH
12394: CALL_OW 88
// DialogueOff ;
12398: CALL_OW 7
// end ;
12402: PPOPN 4
12404: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12405: LD_INT 47
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 321
12415: PUSH
12416: LD_INT 2
12418: EQUAL
12419: PUSH
12420: LD_INT 22
12422: PUSH
12423: LD_INT 1
12425: PUSH
12426: EMPTY
12427: LIST
12428: LIST
12429: PUSH
12430: LD_INT 21
12432: PUSH
12433: LD_INT 3
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 30
12442: PUSH
12443: LD_INT 3
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 69
12459: PUSH
12460: LD_INT 0
12462: GREATER
12463: AND
12464: IFFALSE 12694
12466: GO 12468
12468: DISABLE
// begin if IsOk ( Campell ) then
12469: LD_EXP 12
12473: PPUSH
12474: CALL_OW 302
12478: IFFALSE 12494
// begin Say ( Campell , D10-Mech1-1 ) ;
12480: LD_EXP 12
12484: PPUSH
12485: LD_STRING D10-Mech1-1
12487: PPUSH
12488: CALL_OW 88
// end else
12492: GO 12694
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12494: LD_INT 22
12496: PUSH
12497: LD_INT 1
12499: PUSH
12500: EMPTY
12501: LIST
12502: LIST
12503: PUSH
12504: LD_INT 21
12506: PUSH
12507: LD_INT 1
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 25
12516: PUSH
12517: LD_INT 3
12519: PUSH
12520: EMPTY
12521: LIST
12522: LIST
12523: PUSH
12524: LD_INT 26
12526: PUSH
12527: LD_INT 1
12529: PUSH
12530: EMPTY
12531: LIST
12532: LIST
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: PPUSH
12540: CALL_OW 69
12544: PUSH
12545: LD_EXP 1
12549: PUSH
12550: EMPTY
12551: LIST
12552: PUSH
12553: LD_INT 0
12555: GREATER
12556: DIFF
12557: IFFALSE 12631
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12559: LD_INT 22
12561: PUSH
12562: LD_INT 1
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: PUSH
12569: LD_INT 21
12571: PUSH
12572: LD_INT 1
12574: PUSH
12575: EMPTY
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 25
12581: PUSH
12582: LD_INT 3
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 26
12591: PUSH
12592: LD_INT 1
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: EMPTY
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: PPUSH
12605: CALL_OW 69
12609: PUSH
12610: LD_EXP 1
12614: PUSH
12615: EMPTY
12616: LIST
12617: DIFF
12618: PPUSH
12619: LD_STRING D10-Mech1-1
12621: PPUSH
12622: LD_STRING D10-Mech1-1
12624: PPUSH
12625: CALL 4050 0 3
// end else
12629: GO 12694
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12631: LD_INT 22
12633: PUSH
12634: LD_INT 1
12636: PUSH
12637: EMPTY
12638: LIST
12639: LIST
12640: PUSH
12641: LD_INT 21
12643: PUSH
12644: LD_INT 1
12646: PUSH
12647: EMPTY
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 26
12653: PUSH
12654: LD_INT 1
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: PUSH
12666: LD_INT 1
12668: ARRAY
12669: PPUSH
12670: CALL_OW 69
12674: PUSH
12675: LD_EXP 1
12679: PUSH
12680: EMPTY
12681: LIST
12682: DIFF
12683: PPUSH
12684: LD_STRING D10-Mech1-1
12686: PPUSH
12687: LD_STRING D10-Mech1-1
12689: PPUSH
12690: CALL 4050 0 3
// end ; end ; end ;
12694: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12695: LD_INT 22
12697: PUSH
12698: LD_INT 1
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 30
12707: PUSH
12708: LD_INT 32
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PPUSH
12719: CALL_OW 69
12723: PUSH
12724: LD_INT 0
12726: GREATER
12727: PUSH
12728: LD_EXP 32
12732: PUSH
12733: LD_INT 0
12735: EQUAL
12736: AND
12737: IFFALSE 12977
12739: GO 12741
12741: DISABLE
// begin if IsOK ( Claptopn ) then
12742: LD_EXP 11
12746: PPUSH
12747: CALL_OW 302
12751: IFFALSE 12767
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12753: LD_EXP 11
12757: PPUSH
12758: LD_STRING D9b-Eng1-1
12760: PPUSH
12761: CALL_OW 88
// end else
12765: GO 12963
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12767: LD_INT 22
12769: PUSH
12770: LD_INT 1
12772: PUSH
12773: EMPTY
12774: LIST
12775: LIST
12776: PUSH
12777: LD_INT 21
12779: PUSH
12780: LD_INT 1
12782: PUSH
12783: EMPTY
12784: LIST
12785: LIST
12786: PUSH
12787: LD_INT 25
12789: PUSH
12790: LD_INT 3
12792: PUSH
12793: EMPTY
12794: LIST
12795: LIST
12796: PUSH
12797: LD_INT 26
12799: PUSH
12800: LD_INT 1
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: PPUSH
12813: CALL_OW 69
12817: PUSH
12818: LD_EXP 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: PUSH
12826: LD_INT 0
12828: GREATER
12829: DIFF
12830: IFFALSE 12904
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12832: LD_INT 22
12834: PUSH
12835: LD_INT 1
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: LD_INT 21
12844: PUSH
12845: LD_INT 1
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: LD_INT 2
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 26
12864: PUSH
12865: LD_INT 1
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: PPUSH
12878: CALL_OW 69
12882: PUSH
12883: LD_EXP 1
12887: PUSH
12888: EMPTY
12889: LIST
12890: DIFF
12891: PPUSH
12892: LD_STRING D9b-Eng1-1
12894: PPUSH
12895: LD_STRING D9b-Eng1-11
12897: PPUSH
12898: CALL 4050 0 3
// end else
12902: GO 12963
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12904: LD_INT 22
12906: PUSH
12907: LD_INT 1
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 21
12916: PUSH
12917: LD_INT 1
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 26
12926: PUSH
12927: LD_INT 1
12929: PUSH
12930: EMPTY
12931: LIST
12932: LIST
12933: PUSH
12934: EMPTY
12935: LIST
12936: LIST
12937: LIST
12938: PPUSH
12939: CALL_OW 69
12943: PUSH
12944: LD_EXP 1
12948: PUSH
12949: EMPTY
12950: LIST
12951: DIFF
12952: PPUSH
12953: LD_STRING D9b-Eng1-1
12955: PPUSH
12956: LD_STRING D9b-Eng1-1
12958: PPUSH
12959: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
12963: LD_EXP 33
12967: PUSH
12968: LD_INT 0
12970: EQUAL
12971: IFFALSE 12977
// EnergyDialog ;
12973: CALL 4541 0 0
// end ;
12977: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12978: LD_EXP 34
12982: PUSH
12983: LD_INT 1
12985: EQUAL
12986: PUSH
12987: LD_EXP 35
12991: PUSH
12992: LD_INT 1
12994: EQUAL
12995: AND
12996: IFFALSE 13008
12998: GO 13000
13000: DISABLE
// ChangeMissionObjectives ( M1a ) ;
13001: LD_STRING M1a
13003: PPUSH
13004: CALL_OW 337
13008: END
// every 3 3$0 do
13009: GO 13011
13011: DISABLE
// begin PrepareFirstAttack ;
13012: CALL 3606 0 0
// end ;
13016: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) <= 3 and firstRussianAttack = 1 do var i ;
13017: LD_INT 22
13019: PUSH
13020: LD_INT 5
13022: PUSH
13023: EMPTY
13024: LIST
13025: LIST
13026: PUSH
13027: LD_INT 21
13029: PUSH
13030: LD_INT 1
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: PPUSH
13041: CALL_OW 69
13045: PUSH
13046: LD_INT 3
13048: LESSEQUAL
13049: PUSH
13050: LD_EXP 23
13054: PUSH
13055: LD_INT 1
13057: EQUAL
13058: AND
13059: IFFALSE 13377
13061: GO 13063
13063: DISABLE
13064: LD_INT 0
13066: PPUSH
// begin firstRussianAttack = 2 ;
13067: LD_ADDR_EXP 23
13071: PUSH
13072: LD_INT 2
13074: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13075: LD_ADDR_VAR 0 1
13079: PUSH
13080: LD_INT 22
13082: PUSH
13083: LD_INT 5
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 1
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: PPUSH
13104: CALL_OW 69
13108: PUSH
13109: FOR_IN
13110: IFFALSE 13129
// ComMoveXY ( i , 125 , 98 ) ;
13112: LD_VAR 0 1
13116: PPUSH
13117: LD_INT 125
13119: PPUSH
13120: LD_INT 98
13122: PPUSH
13123: CALL_OW 111
13127: GO 13109
13129: POP
13130: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
13131: LD_INT 22
13133: PUSH
13134: LD_INT 1
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 21
13143: PUSH
13144: LD_INT 1
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PPUSH
13155: CALL_OW 69
13159: PUSH
13160: LD_EXP 1
13164: PUSH
13165: LD_EXP 7
13169: PUSH
13170: LD_EXP 4
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: DIFF
13180: PPUSH
13181: LD_STRING DAtt1-Sol1-1
13183: PPUSH
13184: LD_STRING DAtt1-FSol1-1
13186: PPUSH
13187: CALL 4050 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
13191: LD_EXP 1
13195: PPUSH
13196: LD_STRING DAtt1-JMM-1
13198: PPUSH
13199: CALL_OW 88
// if Lisa then
13203: LD_EXP 4
13207: IFFALSE 13223
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
13209: LD_EXP 4
13213: PPUSH
13214: LD_STRING DAtt1a-Lisa-1
13216: PPUSH
13217: CALL_OW 88
// end else
13221: GO 13294
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
13223: LD_INT 22
13225: PUSH
13226: LD_INT 1
13228: PUSH
13229: EMPTY
13230: LIST
13231: LIST
13232: PUSH
13233: LD_INT 21
13235: PUSH
13236: LD_INT 1
13238: PUSH
13239: EMPTY
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 26
13245: PUSH
13246: LD_INT 1
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: LIST
13257: PPUSH
13258: CALL_OW 69
13262: PUSH
13263: LD_EXP 1
13267: PUSH
13268: LD_EXP 7
13272: PUSH
13273: LD_EXP 4
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: LIST
13282: DIFF
13283: PPUSH
13284: LD_STRING DAtt1a-Sol1-1
13286: PPUSH
13287: LD_STRING DAtt1-FSol1-1
13289: PPUSH
13290: CALL 4050 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
13294: LD_EXP 1
13298: PPUSH
13299: LD_STRING DAtt1a-JMM-1
13301: PPUSH
13302: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
13306: LD_INT 22
13308: PUSH
13309: LD_INT 1
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: PUSH
13316: LD_INT 21
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 26
13328: PUSH
13329: LD_INT 1
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: PPUSH
13341: CALL_OW 69
13345: PUSH
13346: LD_EXP 1
13350: PUSH
13351: LD_EXP 7
13355: PUSH
13356: LD_EXP 4
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: DIFF
13366: PPUSH
13367: LD_STRING DAtt1b-Sol1-1
13369: PPUSH
13370: LD_STRING DAtt1a-Sol1-1
13372: PPUSH
13373: CALL 4050 0 3
// end ;
13377: PPOPN 1
13379: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
13380: LD_EXP 23
13384: PUSH
13385: LD_INT 2
13387: EQUAL
13388: IFFALSE 13450
13390: GO 13392
13392: DISABLE
13393: LD_INT 0
13395: PPUSH
// begin enable ;
13396: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13397: LD_ADDR_VAR 0 1
13401: PUSH
13402: LD_INT 5
13404: PPUSH
13405: LD_INT 22
13407: PUSH
13408: LD_INT 5
13410: PUSH
13411: EMPTY
13412: LIST
13413: LIST
13414: PUSH
13415: LD_INT 21
13417: PUSH
13418: LD_INT 1
13420: PUSH
13421: EMPTY
13422: LIST
13423: LIST
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: PPUSH
13429: CALL_OW 70
13433: PUSH
13434: FOR_IN
13435: IFFALSE 13448
// RemoveUnit ( i ) ;
13437: LD_VAR 0 1
13441: PPUSH
13442: CALL_OW 64
13446: GO 13434
13448: POP
13449: POP
// end ;
13450: PPOPN 1
13452: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13453: LD_INT 22
13455: PUSH
13456: LD_INT 5
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: EMPTY
13464: LIST
13465: PPUSH
13466: CALL_OW 69
13470: PUSH
13471: LD_INT 0
13473: EQUAL
13474: PUSH
13475: LD_EXP 23
13479: PUSH
13480: LD_INT 2
13482: EQUAL
13483: AND
13484: IFFALSE 13497
13486: GO 13488
13488: DISABLE
// firstRussianAttack = 3 ;
13489: LD_ADDR_EXP 23
13493: PUSH
13494: LD_INT 3
13496: ST_TO_ADDR
13497: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13498: LD_EXP 28
13502: PUSH
13503: LD_INT 0
13505: EQUAL
13506: IFFALSE 13587
13508: GO 13510
13510: DISABLE
// begin timerStatus = 4 ;
13511: LD_ADDR_EXP 29
13515: PUSH
13516: LD_INT 4
13518: ST_TO_ADDR
// DialogueOn ;
13519: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13523: LD_EXP 13
13527: PPUSH
13528: LD_STRING D2-Don-1
13530: PPUSH
13531: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13535: LD_EXP 1
13539: PPUSH
13540: LD_STRING D2-JMM-1
13542: PPUSH
13543: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13547: LD_EXP 13
13551: PPUSH
13552: LD_STRING D2-Don-2
13554: PPUSH
13555: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13559: LD_EXP 1
13563: PPUSH
13564: LD_STRING D2-JMM-2
13566: PPUSH
13567: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13571: LD_EXP 13
13575: PPUSH
13576: LD_STRING D2-Don-3
13578: PPUSH
13579: CALL_OW 94
// DialogueOff ;
13583: CALL_OW 7
// end ;
13587: END
// every 12 12$0 do var tmp ;
13588: GO 13590
13590: DISABLE
13591: LD_INT 0
13593: PPUSH
// begin PrepareDonaldsonArmy ;
13594: CALL 999 0 0
// CenterNowOnUnits ( Donaldson ) ;
13598: LD_EXP 13
13602: PPUSH
13603: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13607: LD_ADDR_VAR 0 1
13611: PUSH
13612: LD_INT 22
13614: PUSH
13615: LD_INT 4
13617: PUSH
13618: EMPTY
13619: LIST
13620: LIST
13621: PUSH
13622: LD_INT 21
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: PUSH
13632: LD_INT 26
13634: PUSH
13635: LD_INT 1
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: PUSH
13642: LD_INT 25
13644: PUSH
13645: LD_INT 1
13647: PUSH
13648: EMPTY
13649: LIST
13650: LIST
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: PPUSH
13658: CALL_OW 69
13662: PUSH
13663: LD_EXP 5
13667: PUSH
13668: EMPTY
13669: LIST
13670: DIFF
13671: ST_TO_ADDR
// DialogueOn ;
13672: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13676: LD_VAR 0 1
13680: PPUSH
13681: LD_STRING D3-Sol1-1
13683: PPUSH
13684: LD_STRING D3-Sol1-1
13686: PPUSH
13687: CALL 4050 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13691: LD_INT 22
13693: PUSH
13694: LD_INT 4
13696: PUSH
13697: EMPTY
13698: LIST
13699: LIST
13700: PUSH
13701: LD_INT 21
13703: PUSH
13704: LD_INT 1
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 26
13713: PUSH
13714: LD_INT 1
13716: PUSH
13717: EMPTY
13718: LIST
13719: LIST
13720: PUSH
13721: LD_INT 25
13723: PUSH
13724: LD_INT 3
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: EMPTY
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: PPUSH
13737: CALL_OW 69
13741: PPUSH
13742: LD_STRING D3-Sol2-1
13744: PPUSH
13745: LD_STRING D3-Sol2-1
13747: PPUSH
13748: CALL 4050 0 3
// if Frank then
13752: LD_EXP 5
13756: IFFALSE 13770
// Say ( Frank , D3-Frank-1 ) ;
13758: LD_EXP 5
13762: PPUSH
13763: LD_STRING D3-Frank-1
13765: PPUSH
13766: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13770: LD_EXP 13
13774: PPUSH
13775: LD_STRING D3-Don-1
13777: PPUSH
13778: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13782: LD_EXP 13
13786: PPUSH
13787: LD_STRING D3-Don-1a
13789: PPUSH
13790: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13794: LD_EXP 1
13798: PPUSH
13799: LD_STRING D3-JMM-1
13801: PPUSH
13802: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13806: LD_EXP 13
13810: PPUSH
13811: LD_STRING D3-Don-2
13813: PPUSH
13814: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13818: LD_INT 22
13820: PUSH
13821: LD_INT 6
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: PUSH
13828: LD_INT 21
13830: PUSH
13831: LD_INT 1
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: PPUSH
13842: CALL_OW 69
13846: PUSH
13847: LD_INT 0
13849: GREATER
13850: IFFALSE 13988
// begin Say ( JMM , D3-JMM-2 ) ;
13852: LD_EXP 1
13856: PPUSH
13857: LD_STRING D3-JMM-2
13859: PPUSH
13860: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13864: LD_EXP 13
13868: PPUSH
13869: LD_STRING D3-Don-3
13871: PPUSH
13872: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13876: LD_EXP 1
13880: PPUSH
13881: LD_STRING D3-JMM-3
13883: PPUSH
13884: CALL_OW 88
// if IsOK ( Frank ) then
13888: LD_EXP 5
13892: PPUSH
13893: CALL_OW 302
13897: IFFALSE 13911
// Say ( Frank , D3-Frank-3 ) ;
13899: LD_EXP 5
13903: PPUSH
13904: LD_STRING D3-Frank-3
13906: PPUSH
13907: CALL_OW 88
// DialogueOff ;
13911: CALL_OW 7
// if IsOK ( Frank ) then
13915: LD_EXP 5
13919: PPUSH
13920: CALL_OW 302
13924: IFFALSE 13986
// begin SetSide ( Frank , 0 ) ;
13926: LD_EXP 5
13930: PPUSH
13931: LD_INT 0
13933: PPUSH
13934: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13938: LD_EXP 5
13942: PPUSH
13943: LD_INT 12
13945: PPUSH
13946: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
13950: LD_EXP 5
13954: PPUSH
13955: LD_STRING Frank
13957: PPUSH
13958: CALL_OW 38
// Wait ( 0 0$3 ) ;
13962: LD_INT 105
13964: PPUSH
13965: CALL_OW 67
// frankScoutBase = 1 ;
13969: LD_ADDR_EXP 25
13973: PUSH
13974: LD_INT 1
13976: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13977: LD_EXP 5
13981: PPUSH
13982: CALL_OW 64
// end ; end else
13986: GO 14075
// begin Say ( JMM , D3-JMM-4 ) ;
13988: LD_EXP 1
13992: PPUSH
13993: LD_STRING D3-JMM-4
13995: PPUSH
13996: CALL_OW 88
// DialogueOff ;
14000: CALL_OW 7
// if IsOK ( Frank ) then
14004: LD_EXP 5
14008: PPUSH
14009: CALL_OW 302
14013: IFFALSE 14075
// begin SetSide ( Frank , 0 ) ;
14015: LD_EXP 5
14019: PPUSH
14020: LD_INT 0
14022: PPUSH
14023: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
14027: LD_EXP 5
14031: PPUSH
14032: LD_INT 12
14034: PPUSH
14035: CALL_OW 113
// SaveCharacters ( Frank , Frank ) ;
14039: LD_EXP 5
14043: PPUSH
14044: LD_STRING Frank
14046: PPUSH
14047: CALL_OW 38
// Wait ( 0 0$3 ) ;
14051: LD_INT 105
14053: PPUSH
14054: CALL_OW 67
// frankScoutBase = 1 ;
14058: LD_ADDR_EXP 25
14062: PUSH
14063: LD_INT 1
14065: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
14066: LD_EXP 5
14070: PPUSH
14071: CALL_OW 64
// end ; end ; end ;
14075: PPOPN 1
14077: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
14078: LD_EXP 13
14082: PPUSH
14083: CALL_OW 255
14087: PUSH
14088: LD_INT 4
14090: EQUAL
14091: PUSH
14092: LD_EXP 13
14096: PPUSH
14097: CALL_OW 302
14101: AND
14102: IFFALSE 14127
14104: GO 14106
14106: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
14107: LD_EXP 13
14111: PPUSH
14112: LD_STRING D3b-Don-1
14114: PPUSH
14115: CALL_OW 94
// donaldsonCoopAttack = 1 ;
14119: LD_ADDR_EXP 41
14123: PUSH
14124: LD_INT 1
14126: ST_TO_ADDR
// end ;
14127: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
14128: LD_EXP 24
14132: PUSH
14133: LD_INT 0
14135: EQUAL
14136: IFFALSE 14292
14138: GO 14140
14140: DISABLE
14141: LD_INT 0
14143: PPUSH
14144: PPUSH
// begin enable ;
14145: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
14146: LD_ADDR_VAR 0 1
14150: PUSH
14151: LD_INT 22
14153: PUSH
14154: LD_INT 4
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 21
14163: PUSH
14164: LD_INT 1
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PPUSH
14175: CALL_OW 69
14179: PUSH
14180: FOR_IN
14181: IFFALSE 14290
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
14183: LD_ADDR_VAR 0 2
14187: PUSH
14188: LD_INT 22
14190: PUSH
14191: LD_INT 1
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: LD_INT 21
14200: PUSH
14201: LD_INT 1
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: EMPTY
14209: LIST
14210: LIST
14211: PPUSH
14212: CALL_OW 69
14216: PUSH
14217: FOR_IN
14218: IFFALSE 14286
// begin if GetDistUnits ( i , j ) < 7 then
14220: LD_VAR 0 1
14224: PPUSH
14225: LD_VAR 0 2
14229: PPUSH
14230: CALL_OW 296
14234: PUSH
14235: LD_INT 7
14237: LESS
14238: IFFALSE 14284
// begin saveDonaldson = 1 ;
14240: LD_ADDR_EXP 24
14244: PUSH
14245: LD_INT 1
14247: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
14248: LD_INT 22
14250: PUSH
14251: LD_INT 4
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 21
14260: PUSH
14261: LD_INT 1
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: PPUSH
14272: CALL_OW 69
14276: PPUSH
14277: LD_INT 1
14279: PPUSH
14280: CALL_OW 235
// end ; end ;
14284: GO 14217
14286: POP
14287: POP
// end ;
14288: GO 14180
14290: POP
14291: POP
// end ;
14292: PPOPN 2
14294: END
// every 2 2$0 trigger saveDonaldson = 1 do
14295: LD_EXP 24
14299: PUSH
14300: LD_INT 1
14302: EQUAL
14303: IFFALSE 14606
14305: GO 14307
14307: DISABLE
// begin uc_side = 4 ;
14308: LD_ADDR_OWVAR 20
14312: PUSH
14313: LD_INT 4
14315: ST_TO_ADDR
// uc_nation = 1 ;
14316: LD_ADDR_OWVAR 21
14320: PUSH
14321: LD_INT 1
14323: ST_TO_ADDR
// Frank = CreateCharacter ( Frank ) ;
14324: LD_ADDR_EXP 5
14328: PUSH
14329: LD_STRING Frank
14331: PPUSH
14332: CALL_OW 34
14336: ST_TO_ADDR
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
14337: LD_EXP 5
14341: PPUSH
14342: LD_INT 13
14344: PPUSH
14345: LD_INT 0
14347: PPUSH
14348: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
14352: LD_INT 35
14354: PPUSH
14355: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
14359: LD_EXP 1
14363: PPUSH
14364: CALL_OW 310
14368: NOT
14369: PUSH
14370: LD_EXP 1
14374: PPUSH
14375: LD_INT 4
14377: PPUSH
14378: CALL_OW 296
14382: PUSH
14383: LD_INT 20
14385: LESS
14386: AND
14387: IFFALSE 14420
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14389: LD_EXP 5
14393: PPUSH
14394: LD_EXP 1
14398: PPUSH
14399: CALL_OW 250
14403: PPUSH
14404: LD_EXP 1
14408: PPUSH
14409: CALL_OW 251
14413: PPUSH
14414: CALL_OW 111
14418: GO 14435
// ComMoveXY ( Frank , 51 , 15 ) ;
14420: LD_EXP 5
14424: PPUSH
14425: LD_INT 51
14427: PPUSH
14428: LD_INT 15
14430: PPUSH
14431: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14435: LD_EXP 5
14439: PPUSH
14440: LD_EXP 1
14444: PPUSH
14445: CALL_OW 296
14449: PUSH
14450: LD_INT 10
14452: LESS
14453: IFFALSE 14352
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14455: LD_EXP 1
14459: PUSH
14460: LD_EXP 5
14464: PUSH
14465: EMPTY
14466: LIST
14467: LIST
14468: PPUSH
14469: CALL_OW 87
// DialogueOn ;
14473: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14477: LD_EXP 5
14481: PPUSH
14482: LD_STRING D3a-Frank-1
14484: PPUSH
14485: CALL_OW 88
// if Lisa then
14489: LD_EXP 4
14493: IFFALSE 14543
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14495: LD_EXP 4
14499: PPUSH
14500: LD_STRING D3a-Lisa-1
14502: PPUSH
14503: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14507: LD_EXP 5
14511: PPUSH
14512: LD_STRING D3a-Frank-2
14514: PPUSH
14515: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14519: LD_EXP 4
14523: PPUSH
14524: LD_STRING D3a-Lisa-2
14526: PPUSH
14527: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14531: LD_EXP 5
14535: PPUSH
14536: LD_STRING D3a-Frank-3
14538: PPUSH
14539: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14543: LD_EXP 1
14547: PPUSH
14548: LD_STRING D3a-JMM-3
14550: PPUSH
14551: CALL_OW 88
// DialogueOff ;
14555: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14559: LD_EXP 5
14563: PPUSH
14564: LD_INT 1
14566: PPUSH
14567: CALL_OW 235
// InGameOn ;
14571: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14575: LD_INT 1
14577: PPUSH
14578: LD_INT 7
14580: PPUSH
14581: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14585: LD_INT 93
14587: PPUSH
14588: LD_INT 91
14590: PPUSH
14591: CALL_OW 84
// wait ( 0 0$5 ) ;
14595: LD_INT 175
14597: PPUSH
14598: CALL_OW 67
// InGameOff ;
14602: CALL_OW 9
// end ;
14606: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14607: LD_OWVAR 67
14611: PUSH
14612: LD_INT 2
14614: EQUAL
14615: PUSH
14616: LD_OWVAR 67
14620: PUSH
14621: LD_INT 3
14623: EQUAL
14624: OR
14625: IFFALSE 14649
14627: GO 14629
14629: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14630: LD_INT 24
14632: PPUSH
14633: LD_INT 24
14635: PPUSH
14636: LD_INT 1
14638: PPUSH
14639: LD_INT 1
14641: PPUSH
14642: LD_INT 53
14644: PPUSH
14645: CALL_OW 125
14649: END
// every 18 18$0 do
14650: GO 14652
14652: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14653: LD_EXP 14
14657: PPUSH
14658: LD_STRING D4-Har-1
14660: PPUSH
14661: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14665: LD_EXP 1
14669: PPUSH
14670: LD_STRING D4-JMM-1
14672: PPUSH
14673: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14677: LD_EXP 14
14681: PPUSH
14682: LD_STRING D4-Har-2
14684: PPUSH
14685: CALL_OW 94
// case query ( Q1 ) of 1 :
14689: LD_STRING Q1
14691: PPUSH
14692: CALL_OW 97
14696: PUSH
14697: LD_INT 1
14699: DOUBLE
14700: EQUAL
14701: IFTRUE 14705
14703: GO 14764
14705: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14706: LD_EXP 1
14710: PPUSH
14711: LD_STRING D5-JMM-1
14713: PPUSH
14714: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14718: LD_EXP 14
14722: PPUSH
14723: LD_STRING D5-Har-1
14725: PPUSH
14726: CALL_OW 94
// timeToSupport = 10 10$0 ;
14730: LD_ADDR_EXP 28
14734: PUSH
14735: LD_INT 21000
14737: ST_TO_ADDR
// timerStatus = 2 ;
14738: LD_ADDR_EXP 29
14742: PUSH
14743: LD_INT 2
14745: ST_TO_ADDR
// startTimer = 1 ;
14746: LD_ADDR_EXP 30
14750: PUSH
14751: LD_INT 1
14753: ST_TO_ADDR
// harrAnswer = 1 ;
14754: LD_ADDR_EXP 26
14758: PUSH
14759: LD_INT 1
14761: ST_TO_ADDR
// end ; 2 :
14762: GO 14899
14764: LD_INT 2
14766: DOUBLE
14767: EQUAL
14768: IFTRUE 14772
14770: GO 14831
14772: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14773: LD_EXP 1
14777: PPUSH
14778: LD_STRING D5-JMM-2
14780: PPUSH
14781: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14785: LD_EXP 14
14789: PPUSH
14790: LD_STRING D5-Har-2
14792: PPUSH
14793: CALL_OW 94
// timeToSupport = 5 5$0 ;
14797: LD_ADDR_EXP 28
14801: PUSH
14802: LD_INT 10500
14804: ST_TO_ADDR
// timerStatus = 2 ;
14805: LD_ADDR_EXP 29
14809: PUSH
14810: LD_INT 2
14812: ST_TO_ADDR
// startTimer = 1 ;
14813: LD_ADDR_EXP 30
14817: PUSH
14818: LD_INT 1
14820: ST_TO_ADDR
// harrAnswer = 2 ;
14821: LD_ADDR_EXP 26
14825: PUSH
14826: LD_INT 2
14828: ST_TO_ADDR
// end ; 3 :
14829: GO 14899
14831: LD_INT 3
14833: DOUBLE
14834: EQUAL
14835: IFTRUE 14839
14837: GO 14898
14839: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14840: LD_EXP 1
14844: PPUSH
14845: LD_STRING D5-JMM-3
14847: PPUSH
14848: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14852: LD_EXP 14
14856: PPUSH
14857: LD_STRING D5-Har-3
14859: PPUSH
14860: CALL_OW 94
// timeToSupport = 5 5$0 ;
14864: LD_ADDR_EXP 28
14868: PUSH
14869: LD_INT 10500
14871: ST_TO_ADDR
// timerStatus = 2 ;
14872: LD_ADDR_EXP 29
14876: PUSH
14877: LD_INT 2
14879: ST_TO_ADDR
// startTimer = 1 ;
14880: LD_ADDR_EXP 30
14884: PUSH
14885: LD_INT 1
14887: ST_TO_ADDR
// harrAnswer = 3 ;
14888: LD_ADDR_EXP 26
14892: PUSH
14893: LD_INT 3
14895: ST_TO_ADDR
// end ; end ;
14896: GO 14899
14898: POP
// end ;
14899: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14900: LD_EXP 29
14904: PUSH
14905: LD_INT 2
14907: EQUAL
14908: PUSH
14909: LD_EXP 28
14913: PUSH
14914: LD_INT 0
14916: EQUAL
14917: AND
14918: IFFALSE 15195
14920: GO 14922
14922: DISABLE
// begin timerStatus = 4 ;
14923: LD_ADDR_EXP 29
14927: PUSH
14928: LD_INT 4
14930: ST_TO_ADDR
// if harrAnswer = 1 then
14931: LD_EXP 26
14935: PUSH
14936: LD_INT 1
14938: EQUAL
14939: IFFALSE 15019
// begin PrepareHarrisonSupport ( 3 ) ;
14941: LD_INT 3
14943: PPUSH
14944: CALL 1563 0 1
// wait ( 1 1$0 ) ;
14948: LD_INT 2100
14950: PPUSH
14951: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14955: LD_EXP 14
14959: PPUSH
14960: LD_STRING D7-Har-1
14962: PPUSH
14963: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14967: LD_STRING M2
14969: PPUSH
14970: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14974: LD_ADDR_EXP 27
14978: PUSH
14979: LD_INT 31500
14981: PUSH
14982: LD_INT 10500
14984: PUSH
14985: LD_INT 8400
14987: PUSH
14988: LD_INT 6300
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: LIST
14995: PUSH
14996: LD_OWVAR 67
15000: ARRAY
15001: PLUS
15002: ST_TO_ADDR
// startTimer = 1 ;
15003: LD_ADDR_EXP 30
15007: PUSH
15008: LD_INT 1
15010: ST_TO_ADDR
// timerStatus = 3 ;
15011: LD_ADDR_EXP 29
15015: PUSH
15016: LD_INT 3
15018: ST_TO_ADDR
// end ; if harrAnswer = 2 then
15019: LD_EXP 26
15023: PUSH
15024: LD_INT 2
15026: EQUAL
15027: IFFALSE 15107
// begin PrepareHarrisonSupport ( 4 ) ;
15029: LD_INT 4
15031: PPUSH
15032: CALL 1563 0 1
// wait ( 1 1$0 ) ;
15036: LD_INT 2100
15038: PPUSH
15039: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15043: LD_EXP 14
15047: PPUSH
15048: LD_STRING D7-Har-1
15050: PPUSH
15051: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15055: LD_STRING M2
15057: PPUSH
15058: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
15062: LD_ADDR_EXP 27
15066: PUSH
15067: LD_INT 27300
15069: PUSH
15070: LD_INT 8400
15072: PUSH
15073: LD_INT 8400
15075: PUSH
15076: LD_INT 6300
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: LD_OWVAR 67
15088: ARRAY
15089: PLUS
15090: ST_TO_ADDR
// startTimer = 1 ;
15091: LD_ADDR_EXP 30
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// timerStatus = 3 ;
15099: LD_ADDR_EXP 29
15103: PUSH
15104: LD_INT 3
15106: ST_TO_ADDR
// end ; if harrAnswer = 3 then
15107: LD_EXP 26
15111: PUSH
15112: LD_INT 3
15114: EQUAL
15115: IFFALSE 15195
// begin PrepareHarrisonSupport ( 5 ) ;
15117: LD_INT 5
15119: PPUSH
15120: CALL 1563 0 1
// wait ( 1 1$0 ) ;
15124: LD_INT 2100
15126: PPUSH
15127: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
15131: LD_EXP 14
15135: PPUSH
15136: LD_STRING D7-Har-1
15138: PPUSH
15139: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
15143: LD_STRING M2
15145: PPUSH
15146: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
15150: LD_ADDR_EXP 27
15154: PUSH
15155: LD_INT 21000
15157: PUSH
15158: LD_INT 8400
15160: PUSH
15161: LD_INT 6300
15163: PUSH
15164: LD_INT 4200
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: PUSH
15172: LD_OWVAR 67
15176: ARRAY
15177: PLUS
15178: ST_TO_ADDR
// startTimer = 1 ;
15179: LD_ADDR_EXP 30
15183: PUSH
15184: LD_INT 1
15186: ST_TO_ADDR
// timerStatus = 3 ;
15187: LD_ADDR_EXP 29
15191: PUSH
15192: LD_INT 3
15194: ST_TO_ADDR
// end ; end ;
15195: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
15196: LD_EXP 27
15200: PUSH
15201: LD_INT 8400
15203: LESSEQUAL
15204: PUSH
15205: LD_EXP 29
15209: PUSH
15210: LD_INT 3
15212: EQUAL
15213: AND
15214: IFFALSE 15246
15216: GO 15218
15218: DISABLE
// begin DialogueOn ;
15219: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
15223: LD_EXP 14
15227: PPUSH
15228: LD_STRING D7a-Har-1
15230: PPUSH
15231: CALL_OW 94
// DialogueOff ;
15235: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
15239: LD_STRING M2a
15241: PPUSH
15242: CALL_OW 337
// end ;
15246: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 do var tmp ;
15247: LD_EXP 27
15251: PUSH
15252: LD_INT 0
15254: LESSEQUAL
15255: PUSH
15256: LD_EXP 29
15260: PUSH
15261: LD_INT 3
15263: EQUAL
15264: AND
15265: IFFALSE 15404
15267: GO 15269
15269: DISABLE
15270: LD_INT 0
15272: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
15273: LD_ADDR_VAR 0 1
15277: PUSH
15278: LD_INT 22
15280: PUSH
15281: LD_INT 1
15283: PUSH
15284: EMPTY
15285: LIST
15286: LIST
15287: PPUSH
15288: CALL_OW 69
15292: PUSH
15293: LD_EXP 1
15297: PUSH
15298: EMPTY
15299: LIST
15300: DIFF
15301: ST_TO_ADDR
// saveDonaldson = 2 ;
15302: LD_ADDR_EXP 24
15306: PUSH
15307: LD_INT 2
15309: ST_TO_ADDR
// DialogueOn ;
15310: CALL_OW 6
// if IsOK ( Donaldson ) then
15314: LD_EXP 13
15318: PPUSH
15319: CALL_OW 302
15323: IFFALSE 15339
// begin SayRadio ( Harisson , D8-Har-1 ) ;
15325: LD_EXP 14
15329: PPUSH
15330: LD_STRING D8-Har-1
15332: PPUSH
15333: CALL_OW 94
// end else
15337: GO 15351
// begin SayRadio ( Harisson , D8-Har-1a ) ;
15339: LD_EXP 14
15343: PPUSH
15344: LD_STRING D8-Har-1a
15346: PPUSH
15347: CALL_OW 94
// end ; DialogueOff ;
15351: CALL_OW 7
// SetSide ( tmp , 4 ) ;
15355: LD_VAR 0 1
15359: PPUSH
15360: LD_INT 4
15362: PPUSH
15363: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
15367: LD_VAR 0 1
15371: PPUSH
15372: LD_INT 88
15374: PPUSH
15375: LD_INT 89
15377: PPUSH
15378: CALL_OW 114
// honor = 0 ;
15382: LD_ADDR_EXP 39
15386: PUSH
15387: LD_INT 0
15389: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15390: LD_INT 350
15392: PPUSH
15393: CALL_OW 67
// YouLost ( LostCommand ) ;
15397: LD_STRING LostCommand
15399: PPUSH
15400: CALL_OW 104
// end ;
15404: PPOPN 1
15406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15407: LD_INT 22
15409: PUSH
15410: LD_INT 6
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: LD_INT 21
15419: PUSH
15420: LD_INT 1
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PPUSH
15431: CALL_OW 69
15435: PUSH
15436: LD_INT 0
15438: EQUAL
15439: PUSH
15440: LD_EXP 20
15444: PUSH
15445: LD_INT 0
15447: EQUAL
15448: AND
15449: PUSH
15450: LD_EXP 42
15454: PUSH
15455: LD_INT 1
15457: EQUAL
15458: AND
15459: IFFALSE 15553
15461: GO 15463
15463: DISABLE
15464: LD_INT 0
15466: PPUSH
15467: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15468: LD_ADDR_VAR 0 2
15472: PUSH
15473: LD_INT 22
15475: PUSH
15476: LD_INT 1
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PUSH
15483: LD_INT 21
15485: PUSH
15486: LD_INT 1
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 23
15495: PUSH
15496: LD_INT 1
15498: PUSH
15499: EMPTY
15500: LIST
15501: LIST
15502: PUSH
15503: EMPTY
15504: LIST
15505: LIST
15506: LIST
15507: PPUSH
15508: CALL_OW 69
15512: ST_TO_ADDR
// for i in tmp do
15513: LD_ADDR_VAR 0 1
15517: PUSH
15518: LD_VAR 0 2
15522: PUSH
15523: FOR_IN
15524: IFFALSE 15551
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15526: LD_VAR 0 1
15530: PPUSH
15531: LD_INT 1
15533: PPUSH
15534: LD_INT 4
15536: PPUSH
15537: CALL_OW 12
15541: PPUSH
15542: LD_INT 500
15544: PPUSH
15545: CALL_OW 492
// end ;
15549: GO 15523
15551: POP
15552: POP
// end ; end_of_file
15553: PPOPN 2
15555: END
// every 0 0$1 trigger AIEnable = 1 do
15556: LD_EXP 37
15560: PUSH
15561: LD_INT 1
15563: EQUAL
15564: IFFALSE 15668
15566: GO 15568
15568: DISABLE
// begin enable ;
15569: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15570: LD_INT 3
15572: PPUSH
15573: LD_INT 21
15575: PPUSH
15576: LD_INT 7
15578: PPUSH
15579: CALL 5574 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15583: LD_INT 3
15585: PPUSH
15586: LD_INT 8
15588: PPUSH
15589: LD_INT 7
15591: PPUSH
15592: LD_INT 1
15594: PPUSH
15595: CALL 5900 0 4
// RepairVehicle ( 3 , RussianAttackRepair , 108 , 95 ) ;
15599: LD_INT 3
15601: PPUSH
15602: LD_INT 17
15604: PPUSH
15605: LD_INT 108
15607: PPUSH
15608: LD_INT 95
15610: PPUSH
15611: CALL 8981 0 4
// EnemyVehicleAttack ( 3 , 1 ) ;
15615: LD_INT 3
15617: PPUSH
15618: LD_INT 1
15620: PPUSH
15621: CALL 6493 0 2
// if baseReadyToBuild = 2 then
15625: LD_EXP 20
15629: PUSH
15630: LD_INT 2
15632: EQUAL
15633: IFFALSE 15668
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15635: LD_INT 6
15637: PPUSH
15638: LD_EXP 21
15642: PPUSH
15643: LD_INT 6
15645: PPUSH
15646: CALL 5574 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15650: LD_INT 6
15652: PPUSH
15653: LD_INT 9
15655: PPUSH
15656: LD_INT 6
15658: PPUSH
15659: LD_EXP 22
15663: PPUSH
15664: CALL 5900 0 4
// end ; end ;
15668: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] , [ f_not , [ f_weapon , 51 ] ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15669: LD_INT 22
15671: PUSH
15672: LD_INT 3
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 21
15681: PUSH
15682: LD_INT 2
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 55
15691: PUSH
15692: EMPTY
15693: LIST
15694: PUSH
15695: LD_INT 3
15697: PUSH
15698: LD_INT 34
15700: PUSH
15701: LD_INT 51
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL_OW 69
15722: PUSH
15723: LD_INT 0
15725: EQUAL
15726: PUSH
15727: LD_INT 1
15729: PPUSH
15730: CALL_OW 255
15734: PUSH
15735: LD_INT 3
15737: EQUAL
15738: AND
15739: PUSH
15740: LD_INT 21
15742: PPUSH
15743: CALL_OW 302
15747: AND
15748: PUSH
15749: LD_INT 21
15751: PPUSH
15752: CALL_OW 255
15756: PUSH
15757: LD_INT 3
15759: EQUAL
15760: AND
15761: PUSH
15762: LD_INT 21
15764: PPUSH
15765: CALL_OW 302
15769: AND
15770: IFFALSE 15975
15772: GO 15774
15774: DISABLE
// begin enable ;
15775: ENABLE
// if Difficulty = 1 then
15776: LD_OWVAR 67
15780: PUSH
15781: LD_INT 1
15783: EQUAL
15784: IFFALSE 15828
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15786: LD_INT 3
15788: PPUSH
15789: LD_INT 24
15791: PPUSH
15792: LD_OWVAR 67
15796: PUSH
15797: LD_INT 2
15799: PLUS
15800: PPUSH
15801: LD_INT 42
15803: PUSH
15804: LD_INT 42
15806: PUSH
15807: LD_INT 43
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: LIST
15814: PPUSH
15815: LD_INT 1
15817: PPUSH
15818: LD_INT 1
15820: PPUSH
15821: LD_INT 21
15823: PPUSH
15824: CALL 6339 0 7
// if Difficulty = 2 then
15828: LD_OWVAR 67
15832: PUSH
15833: LD_INT 2
15835: EQUAL
15836: IFFALSE 15903
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15838: LD_INT 3
15840: PPUSH
15841: LD_INT 24
15843: PPUSH
15844: LD_OWVAR 67
15848: PUSH
15849: LD_INT 2
15851: PLUS
15852: PPUSH
15853: LD_INT 42
15855: PUSH
15856: LD_INT 42
15858: PUSH
15859: LD_INT 43
15861: PUSH
15862: LD_INT 43
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: PPUSH
15871: LD_INT 1
15873: PPUSH
15874: LD_INT 1
15876: PPUSH
15877: LD_INT 21
15879: PUSH
15880: LD_INT 22
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: LD_INT 1
15889: PPUSH
15890: LD_INT 2
15892: PPUSH
15893: CALL_OW 12
15897: ARRAY
15898: PPUSH
15899: CALL 6339 0 7
// if Difficulty = 3 then
15903: LD_OWVAR 67
15907: PUSH
15908: LD_INT 3
15910: EQUAL
15911: IFFALSE 15975
// BuildingVehicleAndAttackEnemy ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15913: LD_INT 3
15915: PPUSH
15916: LD_INT 24
15918: PPUSH
15919: LD_OWVAR 67
15923: PUSH
15924: LD_INT 2
15926: PPUSH
15927: LD_INT 3
15929: PPUSH
15930: CALL_OW 12
15934: PLUS
15935: PPUSH
15936: LD_INT 43
15938: PUSH
15939: LD_INT 43
15941: PUSH
15942: LD_INT 43
15944: PUSH
15945: LD_INT 43
15947: PUSH
15948: LD_INT 44
15950: PUSH
15951: LD_INT 44
15953: PUSH
15954: EMPTY
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: PPUSH
15962: LD_INT 1
15964: PPUSH
15965: LD_INT 1
15967: PPUSH
15968: LD_INT 22
15970: PPUSH
15971: CALL 6339 0 7
// end ;
15975: END
// every 0 0$1 do
15976: GO 15978
15978: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15979: LD_INT 3
15981: PPUSH
15982: LD_INT 1
15984: PPUSH
15985: LD_INT 3
15987: PPUSH
15988: CALL 5489 0 3
15992: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15993: LD_EXP 20
15997: PUSH
15998: LD_INT 1
16000: EQUAL
16001: IFFALSE 16148
16003: GO 16005
16005: DISABLE
16006: LD_INT 0
16008: PPUSH
16009: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16010: LD_ADDR_VAR 0 2
16014: PUSH
16015: LD_INT 22
16017: PUSH
16018: LD_INT 6
16020: PUSH
16021: EMPTY
16022: LIST
16023: LIST
16024: PUSH
16025: LD_INT 21
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 34
16037: PUSH
16038: LD_INT 51
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: PPUSH
16050: CALL_OW 69
16054: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
16055: LD_VAR 0 2
16059: PUSH
16060: LD_INT 1
16062: ARRAY
16063: PPUSH
16064: LD_EXP 21
16068: PPUSH
16069: CALL_OW 250
16073: PUSH
16074: LD_INT 5
16076: MINUS
16077: PPUSH
16078: LD_EXP 21
16082: PPUSH
16083: CALL_OW 251
16087: PUSH
16088: LD_INT 5
16090: MINUS
16091: PPUSH
16092: CALL_OW 111
// wait ( 0 0$5 ) ;
16096: LD_INT 175
16098: PPUSH
16099: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
16103: LD_VAR 0 2
16107: PUSH
16108: LD_INT 1
16110: ARRAY
16111: PPUSH
16112: LD_INT 41
16114: PPUSH
16115: LD_INT 52
16117: PPUSH
16118: CALL_OW 177
// wait ( 0 0$40 ) ;
16122: LD_INT 1400
16124: PPUSH
16125: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
16129: LD_VAR 0 2
16133: PUSH
16134: LD_INT 1
16136: ARRAY
16137: PPUSH
16138: LD_INT 41
16140: PPUSH
16141: LD_INT 44
16143: PPUSH
16144: CALL_OW 111
// end ;
16148: PPOPN 2
16150: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
16151: LD_EXP 21
16155: PPUSH
16156: CALL_OW 274
16160: PPUSH
16161: LD_INT 1
16163: PPUSH
16164: CALL_OW 275
16168: PUSH
16169: LD_INT 100
16171: GREATEREQUAL
16172: IFFALSE 16400
16174: GO 16176
16176: DISABLE
16177: LD_INT 0
16179: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16180: LD_ADDR_VAR 0 1
16184: PUSH
16185: LD_INT 22
16187: PUSH
16188: LD_INT 6
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: PUSH
16195: LD_INT 21
16197: PUSH
16198: LD_INT 1
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 25
16207: PUSH
16208: LD_INT 2
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: PPUSH
16220: CALL_OW 69
16224: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16225: LD_VAR 0 1
16229: PUSH
16230: LD_INT 1
16232: ARRAY
16233: PPUSH
16234: LD_INT 4
16236: PPUSH
16237: LD_INT 39
16239: PPUSH
16240: LD_INT 37
16242: PPUSH
16243: LD_INT 3
16245: PPUSH
16246: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16250: LD_VAR 0 1
16254: PUSH
16255: LD_INT 1
16257: ARRAY
16258: PPUSH
16259: LD_INT 29
16261: PPUSH
16262: LD_INT 42
16264: PPUSH
16265: LD_INT 54
16267: PPUSH
16268: LD_INT 3
16270: PPUSH
16271: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16275: LD_VAR 0 1
16279: PUSH
16280: LD_INT 1
16282: ARRAY
16283: PPUSH
16284: LD_INT 6
16286: PPUSH
16287: LD_INT 38
16289: PPUSH
16290: LD_INT 48
16292: PPUSH
16293: LD_INT 0
16295: PPUSH
16296: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16300: LD_VAR 0 1
16304: PUSH
16305: LD_INT 1
16307: ARRAY
16308: PPUSH
16309: LD_INT 2
16311: PPUSH
16312: LD_INT 32
16314: PPUSH
16315: LD_INT 38
16317: PPUSH
16318: LD_INT 2
16320: PPUSH
16321: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16325: LD_VAR 0 1
16329: PUSH
16330: LD_INT 1
16332: ARRAY
16333: PPUSH
16334: LD_INT 26
16336: PPUSH
16337: LD_INT 39
16339: PPUSH
16340: LD_INT 55
16342: PPUSH
16343: LD_INT 3
16345: PPUSH
16346: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16350: LD_VAR 0 1
16354: PUSH
16355: LD_INT 1
16357: ARRAY
16358: PPUSH
16359: LD_INT 32
16361: PPUSH
16362: LD_INT 31
16364: PPUSH
16365: LD_INT 31
16367: PPUSH
16368: LD_INT 3
16370: PPUSH
16371: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16375: LD_VAR 0 1
16379: PUSH
16380: LD_INT 1
16382: ARRAY
16383: PPUSH
16384: LD_INT 31
16386: PPUSH
16387: LD_INT 50
16389: PPUSH
16390: LD_INT 51
16392: PPUSH
16393: LD_INT 4
16395: PPUSH
16396: CALL_OW 205
// end ; end_of_file
16400: PPOPN 1
16402: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16403: LD_INT 0
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16412: LD_ADDR_VAR 0 3
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 6
16422: PUSH
16423: EMPTY
16424: LIST
16425: LIST
16426: PUSH
16427: LD_INT 21
16429: PUSH
16430: LD_INT 1
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 25
16439: PUSH
16440: LD_INT 1
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 3
16449: PUSH
16450: LD_INT 54
16452: PUSH
16453: EMPTY
16454: LIST
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: EMPTY
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: PPUSH
16466: CALL_OW 69
16470: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16471: LD_ADDR_VAR 0 7
16475: PUSH
16476: LD_INT 22
16478: PUSH
16479: LD_INT 6
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 21
16488: PUSH
16489: LD_INT 1
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 25
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 54
16508: PUSH
16509: EMPTY
16510: LIST
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: PPUSH
16518: CALL_OW 69
16522: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16523: LD_ADDR_VAR 0 4
16527: PUSH
16528: LD_INT 22
16530: PUSH
16531: LD_INT 6
16533: PUSH
16534: EMPTY
16535: LIST
16536: LIST
16537: PUSH
16538: LD_INT 21
16540: PUSH
16541: LD_INT 1
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: LD_INT 25
16550: PUSH
16551: LD_INT 2
16553: PUSH
16554: EMPTY
16555: LIST
16556: LIST
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: PPUSH
16563: CALL_OW 69
16567: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16568: LD_ADDR_VAR 0 6
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_INT 6
16578: PUSH
16579: EMPTY
16580: LIST
16581: LIST
16582: PUSH
16583: LD_INT 21
16585: PUSH
16586: LD_INT 1
16588: PUSH
16589: EMPTY
16590: LIST
16591: LIST
16592: PUSH
16593: LD_INT 25
16595: PUSH
16596: LD_INT 4
16598: PUSH
16599: EMPTY
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: LIST
16607: PPUSH
16608: CALL_OW 69
16612: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16613: LD_ADDR_VAR 0 8
16617: PUSH
16618: LD_INT 22
16620: PUSH
16621: LD_INT 6
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: PUSH
16628: LD_INT 21
16630: PUSH
16631: LD_INT 2
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PUSH
16638: LD_INT 34
16640: PUSH
16641: LD_INT 51
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: PPUSH
16653: CALL_OW 69
16657: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 255
16667: PUSH
16668: LD_INT 6
16670: EQUAL
16671: PUSH
16672: LD_VAR 0 1
16676: PPUSH
16677: CALL_OW 266
16681: PUSH
16682: LD_INT 0
16684: EQUAL
16685: AND
16686: IFFALSE 16706
// begin ruPDepot = building ;
16688: LD_ADDR_EXP 21
16692: PUSH
16693: LD_VAR 0 1
16697: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16698: LD_ADDR_EXP 20
16702: PUSH
16703: LD_INT 1
16705: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16706: LD_VAR 0 1
16710: PPUSH
16711: CALL_OW 266
16715: PUSH
16716: LD_INT 4
16718: EQUAL
16719: PUSH
16720: LD_VAR 0 1
16724: PPUSH
16725: CALL_OW 255
16729: PUSH
16730: LD_INT 6
16732: EQUAL
16733: AND
16734: IFFALSE 16767
// for i in tmpSold do
16736: LD_ADDR_VAR 0 2
16740: PUSH
16741: LD_VAR 0 3
16745: PUSH
16746: FOR_IN
16747: IFFALSE 16765
// ComEnterUnit ( i , building ) ;
16749: LD_VAR 0 2
16753: PPUSH
16754: LD_VAR 0 1
16758: PPUSH
16759: CALL_OW 120
16763: GO 16746
16765: POP
16766: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 266
16776: PUSH
16777: LD_INT 6
16779: EQUAL
16780: PUSH
16781: LD_VAR 0 1
16785: PPUSH
16786: CALL_OW 255
16790: PUSH
16791: LD_INT 6
16793: EQUAL
16794: AND
16795: IFFALSE 16853
// begin for i in tmpSci do
16797: LD_ADDR_VAR 0 2
16801: PUSH
16802: LD_VAR 0 6
16806: PUSH
16807: FOR_IN
16808: IFFALSE 16826
// ComEnterUnit ( i , building ) ;
16810: LD_VAR 0 2
16814: PPUSH
16815: LD_VAR 0 1
16819: PPUSH
16820: CALL_OW 120
16824: GO 16807
16826: POP
16827: POP
// ResAllTechs ( 6 , building , 3 ) ;
16828: LD_INT 6
16830: PPUSH
16831: LD_VAR 0 1
16835: PPUSH
16836: LD_INT 3
16838: PPUSH
16839: CALL 5489 0 3
// ruPLab = building ;
16843: LD_ADDR_EXP 22
16847: PUSH
16848: LD_VAR 0 1
16852: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16853: LD_VAR 0 1
16857: PPUSH
16858: CALL_OW 266
16862: PUSH
16863: LD_INT 2
16865: EQUAL
16866: PUSH
16867: LD_VAR 0 1
16871: PPUSH
16872: CALL_OW 255
16876: PUSH
16877: LD_INT 6
16879: EQUAL
16880: AND
16881: IFFALSE 16932
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16883: LD_ADDR_VAR 0 5
16887: PUSH
16888: LD_VAR 0 8
16892: PUSH
16893: LD_INT 1
16895: ARRAY
16896: PPUSH
16897: CALL_OW 313
16901: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16902: LD_VAR 0 5
16906: PPUSH
16907: CALL_OW 121
// wait ( 0 0$1 ) ;
16911: LD_INT 35
16913: PPUSH
16914: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16918: LD_VAR 0 5
16922: PPUSH
16923: LD_VAR 0 1
16927: PPUSH
16928: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16932: LD_VAR 0 1
16936: PPUSH
16937: CALL_OW 266
16941: PUSH
16942: LD_INT 32
16944: EQUAL
16945: PUSH
16946: LD_VAR 0 1
16950: PPUSH
16951: CALL_OW 255
16955: PUSH
16956: LD_INT 6
16958: EQUAL
16959: AND
16960: IFFALSE 17012
// begin ComPlaceWeapon ( building , 42 ) ;
16962: LD_VAR 0 1
16966: PPUSH
16967: LD_INT 42
16969: PPUSH
16970: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16974: LD_VAR 0 7
16978: PUSH
16979: LD_INT 1
16981: ARRAY
16982: PPUSH
16983: CALL_OW 122
// wait ( 0 0$1 ) ;
16987: LD_INT 35
16989: PPUSH
16990: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16994: LD_VAR 0 7
16998: PUSH
16999: LD_INT 1
17001: ARRAY
17002: PPUSH
17003: LD_VAR 0 1
17007: PPUSH
17008: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
17012: LD_VAR 0 1
17016: PPUSH
17017: CALL_OW 266
17021: PUSH
17022: LD_INT 31
17024: EQUAL
17025: PUSH
17026: LD_VAR 0 1
17030: PPUSH
17031: CALL_OW 255
17035: PUSH
17036: LD_INT 6
17038: EQUAL
17039: AND
17040: IFFALSE 17106
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
17042: LD_VAR 0 7
17046: PUSH
17047: LD_INT 2
17049: ARRAY
17050: PPUSH
17051: CALL_OW 122
// wait ( 0 0$1 ) ;
17055: LD_INT 35
17057: PPUSH
17058: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
17062: LD_VAR 0 7
17066: PUSH
17067: LD_INT 2
17069: ARRAY
17070: PPUSH
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
17080: LD_VAR 0 4
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PPUSH
17089: LD_EXP 21
17093: PPUSH
17094: CALL_OW 120
// baseReadyToBuild = 2 ;
17098: LD_ADDR_EXP 20
17102: PUSH
17103: LD_INT 2
17105: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
17106: LD_VAR 0 1
17110: PPUSH
17111: CALL_OW 266
17115: PUSH
17116: LD_INT 32
17118: EQUAL
17119: PUSH
17120: LD_VAR 0 1
17124: PPUSH
17125: CALL_OW 255
17129: PUSH
17130: LD_INT 1
17132: EQUAL
17133: AND
17134: PUSH
17135: LD_EXP 32
17139: PUSH
17140: LD_INT 0
17142: EQUAL
17143: AND
17144: IFFALSE 17389
// begin bunkerDialog = 1 ;
17146: LD_ADDR_EXP 32
17150: PUSH
17151: LD_INT 1
17153: ST_TO_ADDR
// if IsOK ( Claptopn ) then
17154: LD_EXP 11
17158: PPUSH
17159: CALL_OW 302
17163: IFFALSE 17179
// begin Say ( Claptopn , D11-Eng1-1 ) ;
17165: LD_EXP 11
17169: PPUSH
17170: LD_STRING D11-Eng1-1
17172: PPUSH
17173: CALL_OW 88
// end else
17177: GO 17375
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17179: LD_INT 22
17181: PUSH
17182: LD_INT 1
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: PUSH
17189: LD_INT 21
17191: PUSH
17192: LD_INT 1
17194: PUSH
17195: EMPTY
17196: LIST
17197: LIST
17198: PUSH
17199: LD_INT 25
17201: PUSH
17202: LD_INT 3
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: PUSH
17209: LD_INT 26
17211: PUSH
17212: LD_INT 1
17214: PUSH
17215: EMPTY
17216: LIST
17217: LIST
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: LIST
17223: LIST
17224: PPUSH
17225: CALL_OW 69
17229: PUSH
17230: LD_EXP 1
17234: PUSH
17235: EMPTY
17236: LIST
17237: PUSH
17238: LD_INT 0
17240: GREATER
17241: DIFF
17242: IFFALSE 17316
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17244: LD_INT 22
17246: PUSH
17247: LD_INT 1
17249: PUSH
17250: EMPTY
17251: LIST
17252: LIST
17253: PUSH
17254: LD_INT 21
17256: PUSH
17257: LD_INT 1
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: LD_INT 25
17266: PUSH
17267: LD_INT 2
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 26
17276: PUSH
17277: LD_INT 1
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: PPUSH
17290: CALL_OW 69
17294: PUSH
17295: LD_EXP 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: DIFF
17303: PPUSH
17304: LD_STRING D11-Eng1-1
17306: PPUSH
17307: LD_STRING D11-Eng1-1
17309: PPUSH
17310: CALL 4050 0 3
// end else
17314: GO 17375
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17316: LD_INT 22
17318: PUSH
17319: LD_INT 1
17321: PUSH
17322: EMPTY
17323: LIST
17324: LIST
17325: PUSH
17326: LD_INT 21
17328: PUSH
17329: LD_INT 1
17331: PUSH
17332: EMPTY
17333: LIST
17334: LIST
17335: PUSH
17336: LD_INT 26
17338: PUSH
17339: LD_INT 1
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: LIST
17350: PPUSH
17351: CALL_OW 69
17355: PUSH
17356: LD_EXP 1
17360: PUSH
17361: EMPTY
17362: LIST
17363: DIFF
17364: PPUSH
17365: LD_STRING D11-Eng1-1
17367: PPUSH
17368: LD_STRING D11-Eng1-1
17370: PPUSH
17371: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17375: LD_EXP 33
17379: PUSH
17380: LD_INT 0
17382: EQUAL
17383: IFFALSE 17389
// EnergyDialog ;
17385: CALL 4541 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17389: LD_VAR 0 1
17393: PPUSH
17394: CALL_OW 266
17398: PUSH
17399: LD_INT 29
17401: EQUAL
17402: PUSH
17403: LD_VAR 0 1
17407: PPUSH
17408: CALL_OW 255
17412: PUSH
17413: LD_INT 1
17415: EQUAL
17416: AND
17417: IFFALSE 17427
// buildOil = 1 ;
17419: LD_ADDR_EXP 34
17423: PUSH
17424: LD_INT 1
17426: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17427: LD_VAR 0 1
17431: PPUSH
17432: CALL_OW 266
17436: PUSH
17437: LD_INT 26
17439: EQUAL
17440: PUSH
17441: LD_VAR 0 1
17445: PPUSH
17446: CALL_OW 255
17450: PUSH
17451: LD_INT 1
17453: EQUAL
17454: AND
17455: IFFALSE 17465
// buildPower = 1 ;
17457: LD_ADDR_EXP 35
17461: PUSH
17462: LD_INT 1
17464: ST_TO_ADDR
// end ;
17465: PPOPN 8
17467: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17468: LD_VAR 0 1
17472: PPUSH
17473: CALL_OW 266
17477: PUSH
17478: LD_INT 3
17480: EQUAL
17481: PUSH
17482: LD_VAR 0 1
17486: PPUSH
17487: CALL_OW 255
17491: PUSH
17492: LD_INT 1
17494: EQUAL
17495: AND
17496: PUSH
17497: LD_EXP 31
17501: PUSH
17502: LD_INT 0
17504: EQUAL
17505: AND
17506: IFFALSE 17822
// begin factoryDialog = 1 ;
17508: LD_ADDR_EXP 31
17512: PUSH
17513: LD_INT 1
17515: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17516: LD_INT 22
17518: PUSH
17519: LD_INT 1
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 3
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: LD_INT 30
17538: PUSH
17539: LD_INT 3
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: PUSH
17546: LD_INT 24
17548: PUSH
17549: LD_INT 1000
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: PPUSH
17562: CALL_OW 69
17566: PUSH
17567: LD_INT 1
17569: ARRAY
17570: PPUSH
17571: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17575: LD_EXP 1
17579: PPUSH
17580: LD_STRING D9a-JMM-1
17582: PPUSH
17583: CALL_OW 88
// if IsOK ( Campell ) then
17587: LD_EXP 12
17591: PPUSH
17592: CALL_OW 302
17596: IFFALSE 17612
// begin Say ( Campell , D9a-Mech1-1 ) ;
17598: LD_EXP 12
17602: PPUSH
17603: LD_STRING D9a-Mech1-1
17605: PPUSH
17606: CALL_OW 88
// end else
17610: GO 17808
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17612: LD_INT 22
17614: PUSH
17615: LD_INT 1
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: PUSH
17622: LD_INT 21
17624: PUSH
17625: LD_INT 1
17627: PUSH
17628: EMPTY
17629: LIST
17630: LIST
17631: PUSH
17632: LD_INT 25
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: PUSH
17642: LD_INT 26
17644: PUSH
17645: LD_INT 1
17647: PUSH
17648: EMPTY
17649: LIST
17650: LIST
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL_OW 69
17662: PUSH
17663: LD_EXP 1
17667: PUSH
17668: EMPTY
17669: LIST
17670: PUSH
17671: LD_INT 0
17673: GREATER
17674: DIFF
17675: IFFALSE 17749
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17677: LD_INT 22
17679: PUSH
17680: LD_INT 1
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: PUSH
17687: LD_INT 21
17689: PUSH
17690: LD_INT 1
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 25
17699: PUSH
17700: LD_INT 3
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: PUSH
17707: LD_INT 26
17709: PUSH
17710: LD_INT 1
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: PPUSH
17723: CALL_OW 69
17727: PUSH
17728: LD_EXP 1
17732: PUSH
17733: EMPTY
17734: LIST
17735: DIFF
17736: PPUSH
17737: LD_STRING D9a-Mech1-1
17739: PPUSH
17740: LD_STRING D9a-Mech1-1
17742: PPUSH
17743: CALL 4050 0 3
// end else
17747: GO 17808
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17749: LD_INT 22
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: LD_INT 21
17761: PUSH
17762: LD_INT 1
17764: PUSH
17765: EMPTY
17766: LIST
17767: LIST
17768: PUSH
17769: LD_INT 26
17771: PUSH
17772: LD_INT 1
17774: PUSH
17775: EMPTY
17776: LIST
17777: LIST
17778: PUSH
17779: EMPTY
17780: LIST
17781: LIST
17782: LIST
17783: PPUSH
17784: CALL_OW 69
17788: PUSH
17789: LD_EXP 1
17793: PUSH
17794: EMPTY
17795: LIST
17796: DIFF
17797: PPUSH
17798: LD_STRING D9a-Mech1-1
17800: PPUSH
17801: LD_STRING D9a-Mech1-1
17803: PPUSH
17804: CALL 4050 0 3
// end ; end ; if energyVDialog = 0 then
17808: LD_EXP 33
17812: PUSH
17813: LD_INT 0
17815: EQUAL
17816: IFFALSE 17822
// EnergyDialog ;
17818: CALL 4541 0 0
// end ; end ;
17822: PPOPN 1
17824: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17825: LD_VAR 0 1
17829: PPUSH
17830: CALL_OW 247
17834: PUSH
17835: LD_INT 1
17837: EQUAL
17838: PUSH
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 255
17848: PUSH
17849: LD_INT 1
17851: EQUAL
17852: AND
17853: IFFALSE 17869
// lostCounter = lostCounter + 1 ;
17855: LD_ADDR_EXP 38
17859: PUSH
17860: LD_EXP 38
17864: PUSH
17865: LD_INT 1
17867: PLUS
17868: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17869: LD_VAR 0 1
17873: PPUSH
17874: CALL_OW 257
17878: PUSH
17879: LD_INT 3
17881: EQUAL
17882: PUSH
17883: LD_VAR 0 1
17887: PPUSH
17888: CALL_OW 255
17892: PUSH
17893: LD_INT 3
17895: EQUAL
17896: AND
17897: PUSH
17898: LD_INT 24
17900: PPUSH
17901: CALL_OW 302
17905: AND
17906: PUSH
17907: LD_INT 24
17909: PPUSH
17910: CALL_OW 255
17914: PUSH
17915: LD_INT 3
17917: EQUAL
17918: AND
17919: IFFALSE 17987
// begin uc_side = 3 ;
17921: LD_ADDR_OWVAR 20
17925: PUSH
17926: LD_INT 3
17928: ST_TO_ADDR
// uc_nation = 3 ;
17929: LD_ADDR_OWVAR 21
17933: PUSH
17934: LD_INT 3
17936: ST_TO_ADDR
// hc_gallery :=  ;
17937: LD_ADDR_OWVAR 33
17941: PUSH
17942: LD_STRING 
17944: ST_TO_ADDR
// hc_name :=  ;
17945: LD_ADDR_OWVAR 26
17949: PUSH
17950: LD_STRING 
17952: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17953: LD_INT 0
17955: PPUSH
17956: LD_EXP 16
17960: PPUSH
17961: LD_EXP 17
17965: PPUSH
17966: CALL_OW 12
17970: PPUSH
17971: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17975: CALL_OW 44
17979: PPUSH
17980: LD_INT 24
17982: PPUSH
17983: CALL_OW 52
// end ; end ;
17987: PPOPN 1
17989: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17990: LD_INT 0
17992: PPUSH
17993: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17994: LD_ADDR_VAR 0 4
17998: PUSH
17999: LD_INT 22
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: PPUSH
18009: CALL_OW 69
18013: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
18014: LD_VAR 0 1
18018: PUSH
18019: LD_INT 1
18021: EQUAL
18022: PUSH
18023: LD_VAR 0 2
18027: PUSH
18028: LD_INT 6
18030: EQUAL
18031: AND
18032: PUSH
18033: LD_EXP 41
18037: PUSH
18038: LD_INT 1
18040: EQUAL
18041: AND
18042: IFFALSE 18097
// begin donaldsonCoopAttack = 0 ;
18044: LD_ADDR_EXP 41
18048: PUSH
18049: LD_INT 0
18051: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 22
18059: PUSH
18060: LD_INT 4
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: PUSH
18067: EMPTY
18068: LIST
18069: PPUSH
18070: CALL_OW 69
18074: PUSH
18075: FOR_IN
18076: IFFALSE 18095
// ComAgressiveMove ( i , 52 , 64 ) ;
18078: LD_VAR 0 3
18082: PPUSH
18083: LD_INT 52
18085: PPUSH
18086: LD_INT 64
18088: PPUSH
18089: CALL_OW 114
18093: GO 18075
18095: POP
18096: POP
// end ; end ;
18097: PPOPN 4
18099: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
18100: LD_VAR 0 1
18104: PPUSH
18105: CALL_OW 264
18109: PUSH
18110: LD_INT 53
18112: EQUAL
18113: IFFALSE 18198
// begin CutTreeInArea ( vehicle , TreesArea ) ;
18115: LD_VAR 0 1
18119: PPUSH
18120: LD_INT 21
18122: PPUSH
18123: CALL 4757 0 2
// uc_side = 3 ;
18127: LD_ADDR_OWVAR 20
18131: PUSH
18132: LD_INT 3
18134: ST_TO_ADDR
// uc_nation = 3 ;
18135: LD_ADDR_OWVAR 21
18139: PUSH
18140: LD_INT 3
18142: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
18143: LD_INT 0
18145: PPUSH
18146: LD_EXP 17
18150: PPUSH
18151: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
18155: CALL_OW 44
18159: PPUSH
18160: LD_VAR 0 2
18164: PPUSH
18165: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
18169: LD_VAR 0 1
18173: PPUSH
18174: LD_INT 6
18176: PPUSH
18177: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 313
18190: PPUSH
18191: LD_INT 6
18193: PPUSH
18194: CALL_OW 235
// end ; if building = rubfact0 and GetSide ( building ) = 3 then
18198: LD_VAR 0 2
18202: PUSH
18203: LD_INT 24
18205: EQUAL
18206: PUSH
18207: LD_VAR 0 2
18211: PPUSH
18212: CALL_OW 255
18216: PUSH
18217: LD_INT 3
18219: EQUAL
18220: AND
18221: IFFALSE 18284
// if GetWeapon ( vehicle ) = 42 or GetWeapon ( vehicle ) = 43 or GetWeapon ( vehicle ) = 44 then
18223: LD_VAR 0 1
18227: PPUSH
18228: CALL_OW 264
18232: PUSH
18233: LD_INT 42
18235: EQUAL
18236: PUSH
18237: LD_VAR 0 1
18241: PPUSH
18242: CALL_OW 264
18246: PUSH
18247: LD_INT 43
18249: EQUAL
18250: OR
18251: PUSH
18252: LD_VAR 0 1
18256: PPUSH
18257: CALL_OW 264
18261: PUSH
18262: LD_INT 44
18264: EQUAL
18265: OR
18266: IFFALSE 18284
// russianTanks = russianTanks ^ vehicle ;
18268: LD_ADDR_EXP 18
18272: PUSH
18273: LD_EXP 18
18277: PUSH
18278: LD_VAR 0 1
18282: ADD
18283: ST_TO_ADDR
// end ;
18284: PPOPN 2
18286: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18287: LD_INT 0
18289: PPUSH
18290: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle and [ GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 ] then
18291: LD_VAR 0 1
18295: PPUSH
18296: CALL_OW 255
18300: PUSH
18301: LD_INT 3
18303: EQUAL
18304: PUSH
18305: LD_VAR 0 1
18309: PPUSH
18310: CALL_OW 247
18314: PUSH
18315: LD_INT 2
18317: EQUAL
18318: AND
18319: PUSH
18320: LD_VAR 0 1
18324: PPUSH
18325: CALL_OW 264
18329: PUSH
18330: LD_INT 42
18332: EQUAL
18333: PUSH
18334: LD_VAR 0 1
18338: PPUSH
18339: CALL_OW 264
18343: PUSH
18344: LD_INT 43
18346: EQUAL
18347: OR
18348: PUSH
18349: LD_VAR 0 1
18353: PPUSH
18354: CALL_OW 264
18358: PUSH
18359: LD_INT 44
18361: EQUAL
18362: OR
18363: PUSH
18364: EMPTY
18365: LIST
18366: AND
18367: IFFALSE 18507
// begin AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18369: LD_INT 24
18371: PPUSH
18372: LD_VAR 0 1
18376: PPUSH
18377: CALL_OW 265
18381: PPUSH
18382: LD_VAR 0 1
18386: PPUSH
18387: CALL_OW 262
18391: PPUSH
18392: LD_VAR 0 1
18396: PPUSH
18397: CALL_OW 263
18401: PPUSH
18402: LD_VAR 0 1
18406: PPUSH
18407: CALL_OW 264
18411: PPUSH
18412: CALL_OW 185
// for i in russianDamageTanks do
18416: LD_ADDR_VAR 0 2
18420: PUSH
18421: LD_EXP 19
18425: PUSH
18426: FOR_IN
18427: IFFALSE 18462
// if i = unit then
18429: LD_VAR 0 2
18433: PUSH
18434: LD_VAR 0 1
18438: EQUAL
18439: IFFALSE 18460
// russianDamageTanks = russianDamageTanks diff [ unit ] ;
18441: LD_ADDR_EXP 19
18445: PUSH
18446: LD_EXP 19
18450: PUSH
18451: LD_VAR 0 1
18455: PUSH
18456: EMPTY
18457: LIST
18458: DIFF
18459: ST_TO_ADDR
18460: GO 18426
18462: POP
18463: POP
// tmpMeh = UnitsInside ( unit ) ;
18464: LD_ADDR_VAR 0 3
18468: PUSH
18469: LD_VAR 0 1
18473: PPUSH
18474: CALL_OW 313
18478: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
18479: LD_VAR 0 3
18483: PPUSH
18484: CALL_OW 121
// wait ( 0 0$01 ) ;
18488: LD_INT 35
18490: PPUSH
18491: CALL_OW 67
// ComEnterUnit ( tmpMeh , rubfact0 ) ;
18495: LD_VAR 0 3
18499: PPUSH
18500: LD_INT 24
18502: PPUSH
18503: CALL_OW 120
// end ; end ;
18507: PPOPN 3
18509: END
// on Command ( comandid ) do var i , j , tmp ;
18510: LD_INT 0
18512: PPUSH
18513: PPUSH
18514: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18515: LD_ADDR_VAR 0 2
18519: PUSH
18520: LD_INT 22
18522: PUSH
18523: LD_INT 1
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 2
18532: PUSH
18533: LD_INT 21
18535: PUSH
18536: LD_INT 1
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: PUSH
18543: LD_INT 21
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: EMPTY
18550: LIST
18551: LIST
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: LIST
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PPUSH
18562: CALL_OW 69
18566: PUSH
18567: FOR_IN
18568: IFFALSE 18678
// begin if GetTaskList ( i ) > 0 then
18570: LD_VAR 0 2
18574: PPUSH
18575: CALL_OW 437
18579: PUSH
18580: LD_INT 0
18582: GREATER
18583: IFFALSE 18676
// begin for j = 1 to GetTaskList ( i ) do
18585: LD_ADDR_VAR 0 3
18589: PUSH
18590: DOUBLE
18591: LD_INT 1
18593: DEC
18594: ST_TO_ADDR
18595: LD_VAR 0 2
18599: PPUSH
18600: CALL_OW 437
18604: PUSH
18605: FOR_TO
18606: IFFALSE 18674
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18608: LD_ADDR_VAR 0 4
18612: PUSH
18613: LD_VAR 0 2
18617: PPUSH
18618: CALL_OW 437
18622: PUSH
18623: LD_VAR 0 3
18627: ARRAY
18628: PUSH
18629: LD_INT 4
18631: ARRAY
18632: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18633: LD_VAR 0 4
18637: PPUSH
18638: CALL_OW 255
18642: PUSH
18643: LD_INT 4
18645: EQUAL
18646: PUSH
18647: LD_VAR 0 4
18651: PPUSH
18652: CALL_OW 255
18656: PUSH
18657: LD_INT 0
18659: EQUAL
18660: OR
18661: IFFALSE 18672
// ComStop ( i ) ;
18663: LD_VAR 0 2
18667: PPUSH
18668: CALL_OW 141
// end ;
18672: GO 18605
18674: POP
18675: POP
// end ; end ;
18676: GO 18567
18678: POP
18679: POP
// end ; end_of_file
18680: PPOPN 4
18682: END
// every 10 10$0 do
18683: GO 18685
18685: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18686: LD_INT 5
18688: PPUSH
18689: LD_INT 3
18691: PPUSH
18692: LD_INT 2
18694: PPUSH
18695: LD_INT 5
18697: PPUSH
18698: CALL_OW 12
18702: PUSH
18703: LD_INT 2
18705: PUSH
18706: LD_INT 3
18708: PUSH
18709: LD_INT 3
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: LD_OWVAR 67
18721: ARRAY
18722: PLUS
18723: PPUSH
18724: LD_INT 0
18726: PPUSH
18727: LD_INT 0
18729: PPUSH
18730: LD_INT 0
18732: PPUSH
18733: LD_INT 0
18735: PPUSH
18736: LD_EXP 16
18740: PPUSH
18741: LD_EXP 17
18745: PPUSH
18746: CALL_OW 12
18750: PPUSH
18751: LD_INT 4
18753: PPUSH
18754: LD_INT 14
18756: PPUSH
18757: LD_INT 1
18759: PPUSH
18760: LD_INT 2
18762: PPUSH
18763: CALL 6864 0 12
// end ;
18767: END
// every 15 15$0 do
18768: GO 18770
18770: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 3 , 5 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18771: LD_INT 5
18773: PPUSH
18774: LD_INT 3
18776: PPUSH
18777: LD_INT 3
18779: PPUSH
18780: LD_INT 5
18782: PPUSH
18783: CALL_OW 12
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: LD_INT 3
18793: PUSH
18794: LD_INT 3
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: LIST
18801: PUSH
18802: LD_OWVAR 67
18806: ARRAY
18807: PLUS
18808: PPUSH
18809: LD_INT 0
18811: PPUSH
18812: LD_INT 0
18814: PPUSH
18815: LD_INT 0
18817: PPUSH
18818: LD_INT 1
18820: PPUSH
18821: LD_EXP 16
18825: PPUSH
18826: LD_EXP 17
18830: PPUSH
18831: CALL_OW 12
18835: PPUSH
18836: LD_INT 4
18838: PPUSH
18839: LD_INT 14
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: LD_INT 1
18847: PPUSH
18848: CALL 6864 0 12
// end ;
18852: END
// every 25 25$0 do
18853: GO 18855
18855: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 2 , 3 ) + [ 2 , 3 , 3 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18856: LD_INT 5
18858: PPUSH
18859: LD_INT 3
18861: PPUSH
18862: LD_INT 2
18864: PPUSH
18865: LD_INT 3
18867: PPUSH
18868: CALL_OW 12
18872: PUSH
18873: LD_INT 2
18875: PUSH
18876: LD_INT 3
18878: PUSH
18879: LD_INT 3
18881: PUSH
18882: EMPTY
18883: LIST
18884: LIST
18885: LIST
18886: PUSH
18887: LD_OWVAR 67
18891: ARRAY
18892: PLUS
18893: PPUSH
18894: LD_INT 0
18896: PPUSH
18897: LD_INT 0
18899: PPUSH
18900: LD_INT 0
18902: PPUSH
18903: LD_INT 2
18905: PPUSH
18906: LD_EXP 16
18910: PPUSH
18911: LD_EXP 17
18915: PPUSH
18916: CALL_OW 12
18920: PPUSH
18921: LD_INT 4
18923: PPUSH
18924: LD_INT 14
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL 6864 0 12
// end ;
18937: END
// every 26 26$0 do
18938: GO 18940
18940: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , rand ( 1 , 3 ) + [ 1 , 2 , 2 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18941: LD_INT 5
18943: PPUSH
18944: LD_INT 3
18946: PPUSH
18947: LD_INT 1
18949: PPUSH
18950: LD_INT 3
18952: PPUSH
18953: CALL_OW 12
18957: PUSH
18958: LD_INT 1
18960: PUSH
18961: LD_INT 2
18963: PUSH
18964: LD_INT 2
18966: PUSH
18967: EMPTY
18968: LIST
18969: LIST
18970: LIST
18971: PUSH
18972: LD_OWVAR 67
18976: ARRAY
18977: PLUS
18978: PPUSH
18979: LD_INT 0
18981: PPUSH
18982: LD_INT 0
18984: PPUSH
18985: LD_INT 0
18987: PPUSH
18988: LD_INT 2
18990: PPUSH
18991: LD_EXP 16
18995: PPUSH
18996: LD_EXP 17
19000: PPUSH
19001: CALL_OW 12
19005: PPUSH
19006: LD_INT 4
19008: PPUSH
19009: LD_INT 14
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: LD_INT 2
19017: PPUSH
19018: CALL 6864 0 12
// end ;
19022: END
// every 25 25$0 do
19023: GO 19025
19025: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
19026: LD_INT 4
19028: PPUSH
19029: LD_INT 5
19031: PPUSH
19032: LD_INT 3
19034: PUSH
19035: LD_INT 4
19037: PUSH
19038: LD_INT 5
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: PUSH
19046: LD_OWVAR 67
19050: ARRAY
19051: PPUSH
19052: LD_EXP 16
19056: PPUSH
19057: LD_EXP 17
19061: PPUSH
19062: CALL_OW 12
19066: PPUSH
19067: LD_INT 3
19069: PPUSH
19070: LD_INT 1
19072: PPUSH
19073: LD_INT 1
19075: PPUSH
19076: LD_INT 42
19078: PUSH
19079: LD_INT 42
19081: PUSH
19082: LD_INT 43
19084: PUSH
19085: EMPTY
19086: LIST
19087: LIST
19088: LIST
19089: PUSH
19090: LD_INT 42
19092: PUSH
19093: LD_INT 43
19095: PUSH
19096: EMPTY
19097: LIST
19098: LIST
19099: PUSH
19100: LD_INT 43
19102: PUSH
19103: LD_INT 43
19105: PUSH
19106: LD_INT 43
19108: PUSH
19109: LD_INT 44
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: PUSH
19118: EMPTY
19119: LIST
19120: LIST
19121: LIST
19122: PUSH
19123: LD_OWVAR 67
19127: ARRAY
19128: PPUSH
19129: EMPTY
19130: PPUSH
19131: EMPTY
19132: PPUSH
19133: LD_INT 1
19135: PPUSH
19136: CALL 9716 0 11
// end ; end_of_file
19140: END
// every 0 0$1 trigger startTimer = 1 do
19141: LD_EXP 30
19145: PUSH
19146: LD_INT 1
19148: EQUAL
19149: IFFALSE 19279
19151: GO 19153
19153: DISABLE
// begin enable ;
19154: ENABLE
// if timerStatus = 1 then
19155: LD_EXP 29
19159: PUSH
19160: LD_INT 1
19162: EQUAL
19163: IFFALSE 19196
// begin timeToSupport = timeToSupport - 0 0$01 ;
19165: LD_ADDR_EXP 28
19169: PUSH
19170: LD_EXP 28
19174: PUSH
19175: LD_INT 35
19177: MINUS
19178: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
19179: LD_ADDR_OWVAR 47
19183: PUSH
19184: LD_STRING #Am04-1
19186: PUSH
19187: LD_EXP 28
19191: PUSH
19192: EMPTY
19193: LIST
19194: LIST
19195: ST_TO_ADDR
// end ; if timerStatus = 2 then
19196: LD_EXP 29
19200: PUSH
19201: LD_INT 2
19203: EQUAL
19204: IFFALSE 19237
// begin timeToSupport = timeToSupport - 0 0$01 ;
19206: LD_ADDR_EXP 28
19210: PUSH
19211: LD_EXP 28
19215: PUSH
19216: LD_INT 35
19218: MINUS
19219: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
19220: LD_ADDR_OWVAR 47
19224: PUSH
19225: LD_STRING #Am04-2
19227: PUSH
19228: LD_EXP 28
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: ST_TO_ADDR
// end ; if timerStatus = 3 then
19237: LD_EXP 29
19241: PUSH
19242: LD_INT 3
19244: EQUAL
19245: IFFALSE 19261
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
19247: LD_ADDR_EXP 27
19251: PUSH
19252: LD_EXP 27
19256: PUSH
19257: LD_INT 35
19259: MINUS
19260: ST_TO_ADDR
// end ; if timerStatus = 4 then
19261: LD_EXP 29
19265: PUSH
19266: LD_INT 4
19268: EQUAL
19269: IFFALSE 19279
// begin display_strings =  ;
19271: LD_ADDR_OWVAR 47
19275: PUSH
19276: LD_STRING 
19278: ST_TO_ADDR
// end ; end ; end_of_file
19279: END
// every 0 0$1 trigger IsDead ( JMM ) do
19280: LD_EXP 1
19284: PPUSH
19285: CALL_OW 301
19289: IFFALSE 19301
19291: GO 19293
19293: DISABLE
// YouLost ( JMM ) ;
19294: LD_STRING JMM
19296: PPUSH
19297: CALL_OW 104
19301: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19302: LD_INT 4
19304: PPUSH
19305: CALL_OW 301
19309: IFFALSE 19321
19311: GO 19313
19313: DISABLE
// YouLost ( Base ) ; end_of_file
19314: LD_STRING Base
19316: PPUSH
19317: CALL_OW 104
19321: END
// every 0 0$1 trigger IsDead ( Stolypin ) do var i ;
19322: LD_EXP 15
19326: PPUSH
19327: CALL_OW 301
19331: IFFALSE 19713
19333: GO 19335
19335: DISABLE
19336: LD_INT 0
19338: PPUSH
// begin AIEnable = 0 ;
19339: LD_ADDR_EXP 37
19343: PUSH
19344: LD_INT 0
19346: ST_TO_ADDR
// escapeAvalaible = 1 ;
19347: LD_ADDR_EXP 40
19351: PUSH
19352: LD_INT 1
19354: ST_TO_ADDR
// InGameOn ;
19355: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19359: LD_INT 3
19361: PPUSH
19362: LD_INT 1
19364: PPUSH
19365: LD_INT 1
19367: PPUSH
19368: LD_INT 0
19370: PPUSH
19371: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19375: LD_INT 6
19377: PPUSH
19378: LD_INT 1
19380: PPUSH
19381: LD_INT 1
19383: PPUSH
19384: LD_INT 0
19386: PPUSH
19387: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19391: LD_INT 5
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 1
19399: PPUSH
19400: LD_INT 0
19402: PPUSH
19403: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19407: LD_INT 3
19409: PPUSH
19410: LD_INT 1
19412: PPUSH
19413: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19417: LD_INT 97
19419: PPUSH
19420: LD_INT 91
19422: PPUSH
19423: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19427: LD_INT 22
19429: PUSH
19430: LD_INT 3
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: LD_INT 21
19439: PUSH
19440: LD_INT 1
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: PUSH
19447: EMPTY
19448: LIST
19449: LIST
19450: PPUSH
19451: CALL_OW 69
19455: PPUSH
19456: CALL_OW 121
// wait ( 0 0$01 ) ;
19460: LD_INT 35
19462: PPUSH
19463: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19467: LD_INT 22
19469: PUSH
19470: LD_INT 3
19472: PUSH
19473: EMPTY
19474: LIST
19475: LIST
19476: PUSH
19477: LD_INT 21
19479: PUSH
19480: LD_INT 1
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: PPUSH
19491: CALL_OW 69
19495: PPUSH
19496: LD_INT 124
19498: PPUSH
19499: LD_INT 98
19501: PPUSH
19502: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19506: LD_INT 22
19508: PUSH
19509: LD_INT 5
19511: PUSH
19512: EMPTY
19513: LIST
19514: LIST
19515: PUSH
19516: LD_INT 21
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PPUSH
19530: CALL_OW 69
19534: PPUSH
19535: CALL_OW 121
// wait ( 0 0$01 ) ;
19539: LD_INT 35
19541: PPUSH
19542: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19546: LD_INT 22
19548: PUSH
19549: LD_INT 5
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PPUSH
19570: CALL_OW 69
19574: PPUSH
19575: LD_INT 124
19577: PPUSH
19578: LD_INT 98
19580: PPUSH
19581: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19585: LD_INT 22
19587: PUSH
19588: LD_INT 6
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PUSH
19595: LD_INT 21
19597: PUSH
19598: LD_INT 1
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PPUSH
19609: CALL_OW 69
19613: PPUSH
19614: CALL_OW 121
// wait ( 0 0$01 ) ;
19618: LD_INT 35
19620: PPUSH
19621: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19625: LD_INT 22
19627: PUSH
19628: LD_INT 6
19630: PUSH
19631: EMPTY
19632: LIST
19633: LIST
19634: PUSH
19635: LD_INT 21
19637: PUSH
19638: LD_INT 1
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: PPUSH
19649: CALL_OW 69
19653: PPUSH
19654: LD_INT 124
19656: PPUSH
19657: LD_INT 98
19659: PPUSH
19660: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19664: LD_INT 22
19666: PUSH
19667: LD_INT 1
19669: PUSH
19670: EMPTY
19671: LIST
19672: LIST
19673: PUSH
19674: LD_INT 21
19676: PUSH
19677: LD_INT 1
19679: PUSH
19680: EMPTY
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: PPUSH
19693: LD_INT 124
19695: PPUSH
19696: LD_INT 98
19698: PPUSH
19699: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19703: LD_INT 124
19705: PPUSH
19706: LD_INT 98
19708: PPUSH
19709: CALL_OW 84
// end ;
19713: PPOPN 1
19715: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 do
19716: LD_INT 23
19718: PUSH
19719: LD_INT 3
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PUSH
19726: LD_INT 21
19728: PUSH
19729: LD_INT 1
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: PUSH
19736: LD_INT 24
19738: PUSH
19739: LD_INT 250
19741: PUSH
19742: EMPTY
19743: LIST
19744: LIST
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PUSH
19756: LD_INT 0
19758: EQUAL
19759: IFFALSE 19768
19761: GO 19763
19763: DISABLE
// FinishMission ;
19764: CALL 19939 0 0
19768: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19769: LD_EXP 40
19773: PUSH
19774: LD_INT 1
19776: EQUAL
19777: IFFALSE 19936
19779: GO 19781
19781: DISABLE
19782: LD_INT 0
19784: PPUSH
// begin enable ;
19785: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19786: LD_ADDR_VAR 0 1
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_INT 3
19796: PUSH
19797: EMPTY
19798: LIST
19799: LIST
19800: PPUSH
19801: CALL_OW 69
19805: PUSH
19806: FOR_IN
19807: IFFALSE 19834
// if IsInArea ( i , RussianEscape ) then
19809: LD_VAR 0 1
19813: PPUSH
19814: LD_INT 5
19816: PPUSH
19817: CALL_OW 308
19821: IFFALSE 19832
// RemoveUnit ( i ) ;
19823: LD_VAR 0 1
19827: PPUSH
19828: CALL_OW 64
19832: GO 19806
19834: POP
19835: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19836: LD_ADDR_VAR 0 1
19840: PUSH
19841: LD_INT 22
19843: PUSH
19844: LD_INT 5
19846: PUSH
19847: EMPTY
19848: LIST
19849: LIST
19850: PPUSH
19851: CALL_OW 69
19855: PUSH
19856: FOR_IN
19857: IFFALSE 19884
// if IsInArea ( i , RussianEscape ) then
19859: LD_VAR 0 1
19863: PPUSH
19864: LD_INT 5
19866: PPUSH
19867: CALL_OW 308
19871: IFFALSE 19882
// RemoveUnit ( i ) ;
19873: LD_VAR 0 1
19877: PPUSH
19878: CALL_OW 64
19882: GO 19856
19884: POP
19885: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19886: LD_ADDR_VAR 0 1
19890: PUSH
19891: LD_INT 22
19893: PUSH
19894: LD_INT 6
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PPUSH
19901: CALL_OW 69
19905: PUSH
19906: FOR_IN
19907: IFFALSE 19934
// if IsInArea ( i , RussianEscape ) then
19909: LD_VAR 0 1
19913: PPUSH
19914: LD_INT 5
19916: PPUSH
19917: CALL_OW 308
19921: IFFALSE 19932
// RemoveUnit ( i ) ;
19923: LD_VAR 0 1
19927: PPUSH
19928: CALL_OW 64
19932: GO 19906
19934: POP
19935: POP
// end ;
19936: PPOPN 1
19938: END
// export function FinishMission ; var tmp ; begin
19939: LD_INT 0
19941: PPUSH
19942: PPUSH
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19943: LD_INT 69
19945: PPUSH
19946: LD_INT 1
19948: PPUSH
19949: CALL_OW 321
19953: PPUSH
19954: LD_STRING GatlingInGamma
19956: PPUSH
19957: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19961: LD_EXP 34
19965: PUSH
19966: LD_INT 1
19968: EQUAL
19969: PUSH
19970: LD_EXP 35
19974: PUSH
19975: LD_INT 1
19977: EQUAL
19978: AND
19979: IFFALSE 19993
// begin AddMedal ( oil , 1 ) ;
19981: LD_STRING oil
19983: PPUSH
19984: LD_INT 1
19986: PPUSH
19987: CALL_OW 101
// end else
19991: GO 20086
// begin if buildOil = 1 and buildPower = 0 then
19993: LD_EXP 34
19997: PUSH
19998: LD_INT 1
20000: EQUAL
20001: PUSH
20002: LD_EXP 35
20006: PUSH
20007: LD_INT 0
20009: EQUAL
20010: AND
20011: IFFALSE 20024
// AddMedal ( oil , - 1 ) ;
20013: LD_STRING oil
20015: PPUSH
20016: LD_INT 1
20018: NEG
20019: PPUSH
20020: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
20024: LD_EXP 34
20028: PUSH
20029: LD_INT 0
20031: EQUAL
20032: PUSH
20033: LD_EXP 35
20037: PUSH
20038: LD_INT 1
20040: EQUAL
20041: AND
20042: IFFALSE 20055
// AddMedal ( oil , - 2 ) ;
20044: LD_STRING oil
20046: PPUSH
20047: LD_INT 2
20049: NEG
20050: PPUSH
20051: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
20055: LD_EXP 34
20059: PUSH
20060: LD_INT 0
20062: EQUAL
20063: PUSH
20064: LD_EXP 35
20068: PUSH
20069: LD_INT 0
20071: EQUAL
20072: AND
20073: IFFALSE 20086
// AddMedal ( oil , - 3 ) ;
20075: LD_STRING oil
20077: PPUSH
20078: LD_INT 3
20080: NEG
20081: PPUSH
20082: CALL_OW 101
// end ; if lostCounter > 3 then
20086: LD_EXP 38
20090: PUSH
20091: LD_INT 3
20093: GREATER
20094: IFFALSE 20109
// begin AddMedal ( deaths , - 1 ) ;
20096: LD_STRING deaths
20098: PPUSH
20099: LD_INT 1
20101: NEG
20102: PPUSH
20103: CALL_OW 101
// end else
20107: GO 20119
// begin AddMedal ( deaths , 1 ) ;
20109: LD_STRING deaths
20111: PPUSH
20112: LD_INT 1
20114: PPUSH
20115: CALL_OW 101
// end ; if honor = 1 then
20119: LD_EXP 39
20123: PUSH
20124: LD_INT 1
20126: EQUAL
20127: IFFALSE 20141
// begin AddMedal ( honour , 1 ) ;
20129: LD_STRING honour
20131: PPUSH
20132: LD_INT 1
20134: PPUSH
20135: CALL_OW 101
// end else
20139: GO 20152
// begin AddMedal ( honour , - 1 ) ;
20141: LD_STRING honour
20143: PPUSH
20144: LD_INT 1
20146: NEG
20147: PPUSH
20148: CALL_OW 101
// end ; GiveMedals ( Main ) ;
20152: LD_STRING Main
20154: PPUSH
20155: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
20159: LD_INT 22
20161: PUSH
20162: LD_INT 1
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: LD_INT 23
20171: PUSH
20172: LD_INT 1
20174: PUSH
20175: EMPTY
20176: LIST
20177: LIST
20178: PUSH
20179: LD_INT 21
20181: PUSH
20182: LD_INT 1
20184: PUSH
20185: EMPTY
20186: LIST
20187: LIST
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: LIST
20193: PPUSH
20194: CALL_OW 69
20198: PPUSH
20199: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20203: LD_EXP 1
20207: PPUSH
20208: LD_EXP 44
20212: PUSH
20213: LD_STRING JMM
20215: STR
20216: PPUSH
20217: CALL_OW 38
// if IsOK ( Bobby ) then
20221: LD_EXP 2
20225: PPUSH
20226: CALL_OW 302
20230: IFFALSE 20250
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20232: LD_EXP 2
20236: PPUSH
20237: LD_EXP 44
20241: PUSH
20242: LD_STRING Bobby
20244: STR
20245: PPUSH
20246: CALL_OW 38
// if IsOK ( Cyrus ) then
20250: LD_EXP 3
20254: PPUSH
20255: CALL_OW 302
20259: IFFALSE 20279
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20261: LD_EXP 3
20265: PPUSH
20266: LD_EXP 44
20270: PUSH
20271: LD_STRING Cyrus
20273: STR
20274: PPUSH
20275: CALL_OW 38
// if IsOK ( Lisa ) then
20279: LD_EXP 4
20283: PPUSH
20284: CALL_OW 302
20288: IFFALSE 20308
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20290: LD_EXP 4
20294: PPUSH
20295: LD_EXP 44
20299: PUSH
20300: LD_STRING Lisa
20302: STR
20303: PPUSH
20304: CALL_OW 38
// if IsOK ( Brown ) then
20308: LD_EXP 7
20312: PPUSH
20313: CALL_OW 302
20317: IFFALSE 20337
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20319: LD_EXP 7
20323: PPUSH
20324: LD_EXP 44
20328: PUSH
20329: LD_STRING Brown
20331: STR
20332: PPUSH
20333: CALL_OW 38
// if IsOK ( Donaldson ) then
20337: LD_EXP 13
20341: PPUSH
20342: CALL_OW 302
20346: IFFALSE 20366
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20348: LD_EXP 13
20352: PPUSH
20353: LD_EXP 44
20357: PUSH
20358: LD_STRING Donaldson
20360: STR
20361: PPUSH
20362: CALL_OW 38
// if IsOK ( Frank ) then
20366: LD_EXP 5
20370: PPUSH
20371: CALL_OW 302
20375: IFFALSE 20395
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20377: LD_EXP 5
20381: PPUSH
20382: LD_EXP 44
20386: PUSH
20387: LD_STRING Frank
20389: STR
20390: PPUSH
20391: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20395: LD_INT 50
20397: PUSH
20398: EMPTY
20399: LIST
20400: PUSH
20401: LD_INT 22
20403: PUSH
20404: LD_INT 1
20406: PUSH
20407: EMPTY
20408: LIST
20409: LIST
20410: PUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 1
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: LIST
20425: PPUSH
20426: CALL_OW 69
20430: PUSH
20431: LD_EXP 1
20435: PUSH
20436: LD_EXP 2
20440: PUSH
20441: LD_EXP 3
20445: PUSH
20446: LD_EXP 4
20450: PUSH
20451: LD_EXP 7
20455: PUSH
20456: LD_EXP 13
20460: PUSH
20461: LD_EXP 5
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: LIST
20472: LIST
20473: LIST
20474: DIFF
20475: PPUSH
20476: LD_STRING 04_other_survivors
20478: PPUSH
20479: CALL_OW 38
// SaveBase ( GammBaseArea ) ;
20483: LD_INT 22
20485: PPUSH
20486: CALL 20499 0 1
// YouWin ;
20490: CALL_OW 103
// end ;
20494: LD_VAR 0 1
20498: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20499: LD_INT 0
20501: PPUSH
20502: PPUSH
20503: PPUSH
20504: PPUSH
// gammaBase = [ ] ;
20505: LD_ADDR_VAR 0 4
20509: PUSH
20510: EMPTY
20511: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20512: LD_ADDR_VAR 0 5
20516: PUSH
20517: LD_VAR 0 1
20521: PPUSH
20522: LD_INT 22
20524: PUSH
20525: LD_INT 1
20527: PUSH
20528: EMPTY
20529: LIST
20530: LIST
20531: PUSH
20532: LD_INT 21
20534: PUSH
20535: LD_INT 3
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: PUSH
20542: LD_INT 50
20544: PUSH
20545: EMPTY
20546: LIST
20547: PUSH
20548: EMPTY
20549: LIST
20550: LIST
20551: LIST
20552: PPUSH
20553: CALL_OW 70
20557: ST_TO_ADDR
// for i in buildings do
20558: LD_ADDR_VAR 0 3
20562: PUSH
20563: LD_VAR 0 5
20567: PUSH
20568: FOR_IN
20569: IFFALSE 20906
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20571: LD_VAR 0 3
20575: PPUSH
20576: CALL_OW 266
20580: PUSH
20581: LD_INT 6
20583: PUSH
20584: LD_INT 7
20586: PUSH
20587: LD_INT 8
20589: PUSH
20590: EMPTY
20591: LIST
20592: LIST
20593: LIST
20594: IN
20595: IFFALSE 20709
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20597: LD_ADDR_VAR 0 4
20601: PUSH
20602: LD_VAR 0 4
20606: PUSH
20607: LD_VAR 0 3
20611: PPUSH
20612: CALL_OW 266
20616: PUSH
20617: LD_VAR 0 3
20621: PPUSH
20622: CALL_OW 250
20626: PUSH
20627: LD_VAR 0 3
20631: PPUSH
20632: CALL_OW 251
20636: PUSH
20637: LD_VAR 0 3
20641: PPUSH
20642: CALL_OW 254
20646: PUSH
20647: LD_VAR 0 3
20651: PPUSH
20652: CALL_OW 267
20656: PUSH
20657: LD_VAR 0 3
20661: PPUSH
20662: CALL_OW 248
20666: PUSH
20667: LD_VAR 0 3
20671: PPUSH
20672: LD_INT 1
20674: PPUSH
20675: CALL_OW 268
20679: PUSH
20680: LD_VAR 0 3
20684: PPUSH
20685: LD_INT 2
20687: PPUSH
20688: CALL_OW 268
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: PUSH
20703: EMPTY
20704: LIST
20705: ADD
20706: ST_TO_ADDR
20707: GO 20904
// if GetBType ( i ) in [ b_bunker ] then
20709: LD_VAR 0 3
20713: PPUSH
20714: CALL_OW 266
20718: PUSH
20719: LD_INT 32
20721: PUSH
20722: EMPTY
20723: LIST
20724: IN
20725: IFFALSE 20822
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20727: LD_ADDR_VAR 0 4
20731: PUSH
20732: LD_VAR 0 4
20736: PUSH
20737: LD_VAR 0 3
20741: PPUSH
20742: CALL_OW 266
20746: PUSH
20747: LD_VAR 0 3
20751: PPUSH
20752: CALL_OW 250
20756: PUSH
20757: LD_VAR 0 3
20761: PPUSH
20762: CALL_OW 251
20766: PUSH
20767: LD_VAR 0 3
20771: PPUSH
20772: CALL_OW 254
20776: PUSH
20777: LD_VAR 0 3
20781: PPUSH
20782: CALL_OW 267
20786: PUSH
20787: LD_VAR 0 3
20791: PPUSH
20792: CALL_OW 248
20796: PUSH
20797: LD_VAR 0 3
20801: PPUSH
20802: CALL_OW 269
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: EMPTY
20817: LIST
20818: ADD
20819: ST_TO_ADDR
20820: GO 20904
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20822: LD_ADDR_VAR 0 4
20826: PUSH
20827: LD_VAR 0 4
20831: PUSH
20832: LD_VAR 0 3
20836: PPUSH
20837: CALL_OW 266
20841: PUSH
20842: LD_VAR 0 3
20846: PPUSH
20847: CALL_OW 250
20851: PUSH
20852: LD_VAR 0 3
20856: PPUSH
20857: CALL_OW 251
20861: PUSH
20862: LD_VAR 0 3
20866: PPUSH
20867: CALL_OW 254
20871: PUSH
20872: LD_VAR 0 3
20876: PPUSH
20877: CALL_OW 267
20881: PUSH
20882: LD_VAR 0 3
20886: PPUSH
20887: CALL_OW 248
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: ADD
20903: ST_TO_ADDR
// end ;
20904: GO 20568
20906: POP
20907: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20908: LD_VAR 0 4
20912: PPUSH
20913: LD_STRING GammaBase
20915: PPUSH
20916: CALL_OW 39
// end ; end_of_file
20920: LD_VAR 0 2
20924: RET
// every 1 1$15 do
20925: GO 20927
20927: DISABLE
// begin if supply <= 13 and supply > 7 then
20928: LD_EXP 36
20932: PUSH
20933: LD_INT 13
20935: LESSEQUAL
20936: PUSH
20937: LD_EXP 36
20941: PUSH
20942: LD_INT 7
20944: GREATER
20945: AND
20946: IFFALSE 20969
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20948: LD_INT 3
20950: PPUSH
20951: LD_INT 5
20953: PPUSH
20954: CALL_OW 12
20958: PPUSH
20959: LD_INT 18
20961: PPUSH
20962: LD_INT 1
20964: PPUSH
20965: CALL_OW 55
// if supply <= 7 and supply > 4 then
20969: LD_EXP 36
20973: PUSH
20974: LD_INT 7
20976: LESSEQUAL
20977: PUSH
20978: LD_EXP 36
20982: PUSH
20983: LD_INT 4
20985: GREATER
20986: AND
20987: IFFALSE 21010
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20989: LD_INT 3
20991: PPUSH
20992: LD_INT 5
20994: PPUSH
20995: CALL_OW 12
20999: PPUSH
21000: LD_INT 19
21002: PPUSH
21003: LD_INT 1
21005: PPUSH
21006: CALL_OW 55
// if supply <= 4 and supply > 0 then
21010: LD_EXP 36
21014: PUSH
21015: LD_INT 4
21017: LESSEQUAL
21018: PUSH
21019: LD_EXP 36
21023: PUSH
21024: LD_INT 0
21026: GREATER
21027: AND
21028: IFFALSE 21051
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
21030: LD_INT 3
21032: PPUSH
21033: LD_INT 5
21035: PPUSH
21036: CALL_OW 12
21040: PPUSH
21041: LD_INT 20
21043: PPUSH
21044: LD_INT 1
21046: PPUSH
21047: CALL_OW 55
// if supply > 0 then
21051: LD_EXP 36
21055: PUSH
21056: LD_INT 0
21058: GREATER
21059: IFFALSE 21076
// begin supply = supply - 1 ;
21061: LD_ADDR_EXP 36
21065: PUSH
21066: LD_EXP 36
21070: PUSH
21071: LD_INT 1
21073: MINUS
21074: ST_TO_ADDR
// enable ;
21075: ENABLE
// end ; end ;
21076: END
