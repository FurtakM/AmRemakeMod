// export JMM , Bobby , Cyrus , Lisa , Frank ; export RandomBeforeMission ; export Brown , Dickens , Woodruff , Knight , Claptopn , Campell , Donaldson ; export Harisson ; export Stolypin ; export ruSoldMinLevel , ruSoldMaxLevel ; export russianTanks , russianDamageTanks ; export baseReadyToBuild ; export ruPDepot , ruPLab ; export firstRussianAttack ; export saveDonaldson ; export frankScoutBase ; export harrAnswer ; export timeToDestroyRuBase , timeToSupport , timerStatus , startTimer ; export factoryDialog , bunkerDialog , energyVDialog ; export buildOil , buildPower ; export supply ; export AIEnable ; export lostCounter ; export honor ; export escapeAvalaible ; export donaldsonCoopAttack ; export bonusAvalaible ; export debugMode ; export mission_prefix , mission_prefix_prev ; starting begin Resetfog ;
   0: CALL_OW 335
// InGameOn ;
   4: CALL_OW 8
// RandomizeAll ;
   8: CALL_OW 11
// mission_prefix := 04_ ;
  12: LD_ADDR_EXP 44
  16: PUSH
  17: LD_STRING 04_
  19: ST_TO_ADDR
// mission_prefix_prev := 03_ ;
  20: LD_ADDR_EXP 45
  24: PUSH
  25: LD_STRING 03_
  27: ST_TO_ADDR
// ruSoldMinLevel = 0 ;
  28: LD_ADDR_EXP 16
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// ruSoldMaxLevel = 0 ;
  36: LD_ADDR_EXP 17
  40: PUSH
  41: LD_INT 0
  43: ST_TO_ADDR
// baseReadyToBuild = 0 ;
  44: LD_ADDR_EXP 20
  48: PUSH
  49: LD_INT 0
  51: ST_TO_ADDR
// debugMode = 0 ;
  52: LD_ADDR_EXP 43
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// bonusAvalaible = 0 ;
  60: LD_ADDR_EXP 42
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// firstRussianAttack = 0 ;
  68: LD_ADDR_EXP 23
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// saveDonaldson = 0 ;
  76: LD_ADDR_EXP 24
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// frankScoutBase = 0 ;
  84: LD_ADDR_EXP 25
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// harrAnswer = 0 ;
  92: LD_ADDR_EXP 26
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// timeToDestroyRuBase = 0 ;
 100: LD_ADDR_EXP 27
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// timeToSupport = 9 9$00 ;
 108: LD_ADDR_EXP 28
 112: PUSH
 113: LD_INT 18900
 115: ST_TO_ADDR
// timerStatus = 0 ;
 116: LD_ADDR_EXP 29
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// startTimer = 0 ;
 124: LD_ADDR_EXP 30
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// factoryDialog = 0 ;
 132: LD_ADDR_EXP 31
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// bunkerDialog = 0 ;
 140: LD_ADDR_EXP 32
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// energyVDialog = 0 ;
 148: LD_ADDR_EXP 33
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// buildOil = 0 ;
 156: LD_ADDR_EXP 34
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// buildPower = 0 ;
 164: LD_ADDR_EXP 35
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// supply = [ 14 , 12 , 11 ] [ Difficulty ] ;
 172: LD_ADDR_EXP 36
 176: PUSH
 177: LD_INT 14
 179: PUSH
 180: LD_INT 12
 182: PUSH
 183: LD_INT 11
 185: PUSH
 186: EMPTY
 187: LIST
 188: LIST
 189: LIST
 190: PUSH
 191: LD_OWVAR 67
 195: ARRAY
 196: ST_TO_ADDR
// AIEnable = 1 ;
 197: LD_ADDR_EXP 37
 201: PUSH
 202: LD_INT 1
 204: ST_TO_ADDR
// donaldsonCoopAttack = 0 ;
 205: LD_ADDR_EXP 41
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// lostCounter = 0 ;
 213: LD_ADDR_EXP 38
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// honor = 1 ;
 221: LD_ADDR_EXP 39
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// escapeAvalaible = 0 ;
 229: LD_ADDR_EXP 40
 233: PUSH
 234: LD_INT 0
 236: ST_TO_ADDR
// PrepareDifficulty ;
 237: CALL 4289 0 0
// PrepareRussianBase ;
 241: CALL 2588 0 0
// PrepareRussianCommander ;
 245: CALL 2539 0 0
// PrepareHeroes ;
 249: CALL 390 0 0
// SetBName ( ambdept0 , gamma ) ;
 253: LD_INT 4
 255: PPUSH
 256: LD_STRING gamma
 258: PPUSH
 259: CALL_OW 500
// SetBName ( rubware0 , fyodor ) ;
 263: LD_INT 21
 265: PPUSH
 266: LD_STRING fyodor
 268: PPUSH
 269: CALL_OW 500
// end ;
 273: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 274: LD_EXP 43
 278: PUSH
 279: LD_INT 1
 281: EQUAL
 282: IFFALSE 387
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
// begin enable ;
 290: ENABLE
// fogoff ( true ) ;
 291: LD_INT 1
 293: PPUSH
 294: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 298: LD_ADDR_VAR 0 1
 302: PUSH
 303: LD_INT 22
 305: PUSH
 306: LD_INT 1
 308: PUSH
 309: EMPTY
 310: LIST
 311: LIST
 312: PUSH
 313: LD_INT 21
 315: PUSH
 316: LD_INT 1
 318: PUSH
 319: EMPTY
 320: LIST
 321: LIST
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PPUSH
 327: CALL_OW 69
 331: PUSH
 332: FOR_IN
 333: IFFALSE 349
// SetLives ( i , 1000 ) ;
 335: LD_VAR 0 1
 339: PPUSH
 340: LD_INT 1000
 342: PPUSH
 343: CALL_OW 234
 347: GO 332
 349: POP
 350: POP
// SetResourceType ( GetBase ( ambdept0 ) , 1 , 9999 ) ;
 351: LD_INT 4
 353: PPUSH
 354: CALL_OW 274
 358: PPUSH
 359: LD_INT 1
 361: PPUSH
 362: LD_INT 9999
 364: PPUSH
 365: CALL_OW 277
// SetResourceType ( GetBase ( ambdept0 ) , 2 , 9999 ) ;
 369: LD_INT 4
 371: PPUSH
 372: CALL_OW 274
 376: PPUSH
 377: LD_INT 2
 379: PPUSH
 380: LD_INT 9999
 382: PPUSH
 383: CALL_OW 277
// end ; end_of_file
 387: PPOPN 1
 389: END
// export function PrepareHeroes ; var i , tmp ; begin
 390: LD_INT 0
 392: PPUSH
 393: PPUSH
 394: PPUSH
// uc_side = 1 ;
 395: LD_ADDR_OWVAR 20
 399: PUSH
 400: LD_INT 1
 402: ST_TO_ADDR
// uc_nation = 1 ;
 403: LD_ADDR_OWVAR 21
 407: PUSH
 408: LD_INT 1
 410: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true ) ;
 411: LD_ADDR_EXP 1
 415: PUSH
 416: LD_STRING JMM
 418: PPUSH
 419: LD_INT 1
 421: PPUSH
 422: CALL 3824 0 2
 426: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true ) ;
 427: LD_ADDR_EXP 4
 431: PUSH
 432: LD_STRING Lisa
 434: PPUSH
 435: LD_INT 1
 437: PPUSH
 438: CALL 3824 0 2
 442: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , false ) ;
 443: LD_ADDR_EXP 7
 447: PUSH
 448: LD_STRING Brown
 450: PPUSH
 451: LD_INT 0
 453: PPUSH
 454: CALL 3824 0 2
 458: ST_TO_ADDR
// Dickens = PrepareUnit ( Dickens , false ) ;
 459: LD_ADDR_EXP 8
 463: PUSH
 464: LD_STRING Dickens
 466: PPUSH
 467: LD_INT 0
 469: PPUSH
 470: CALL 3824 0 2
 474: ST_TO_ADDR
// Woodruff = PrepareUnit ( Woodruff , false ) ;
 475: LD_ADDR_EXP 9
 479: PUSH
 480: LD_STRING Woodruff
 482: PPUSH
 483: LD_INT 0
 485: PPUSH
 486: CALL 3824 0 2
 490: ST_TO_ADDR
// Campell = PrepareUnit ( Campell , false ) ;
 491: LD_ADDR_EXP 12
 495: PUSH
 496: LD_STRING Campell
 498: PPUSH
 499: LD_INT 0
 501: PPUSH
 502: CALL 3824 0 2
 506: ST_TO_ADDR
// Knight = PrepareUnit ( Knight , false ) ;
 507: LD_ADDR_EXP 10
 511: PUSH
 512: LD_STRING Knight
 514: PPUSH
 515: LD_INT 0
 517: PPUSH
 518: CALL 3824 0 2
 522: ST_TO_ADDR
// Claptopn = PrepareUnit ( Claptopn , false ) ;
 523: LD_ADDR_EXP 11
 527: PUSH
 528: LD_STRING Claptopn
 530: PPUSH
 531: LD_INT 0
 533: PPUSH
 534: CALL 3824 0 2
 538: ST_TO_ADDR
// Harisson = PrepareUnit ( Harisson , false ) ;
 539: LD_ADDR_EXP 14
 543: PUSH
 544: LD_STRING Harisson
 546: PPUSH
 547: LD_INT 0
 549: PPUSH
 550: CALL 3824 0 2
 554: ST_TO_ADDR
// if Lisa = false then
 555: LD_EXP 4
 559: PUSH
 560: LD_INT 0
 562: EQUAL
 563: IFFALSE 581
// Bobby = PrepareUnit ( Bobby , true ) ;
 565: LD_ADDR_EXP 2
 569: PUSH
 570: LD_STRING Bobby
 572: PPUSH
 573: LD_INT 1
 575: PPUSH
 576: CALL 3824 0 2
 580: ST_TO_ADDR
// if Lisa = false and Bobby = false then
 581: LD_EXP 4
 585: PUSH
 586: LD_INT 0
 588: EQUAL
 589: PUSH
 590: LD_EXP 2
 594: PUSH
 595: LD_INT 0
 597: EQUAL
 598: AND
 599: IFFALSE 617
// Cyrus = PrepareUnit ( Cyrus , true ) ;
 601: LD_ADDR_EXP 3
 605: PUSH
 606: LD_STRING Cyrus
 608: PPUSH
 609: LD_INT 1
 611: PPUSH
 612: CALL 3824 0 2
 616: ST_TO_ADDR
// if Lisa = false and Bobby = false and Cyrus = false then
 617: LD_EXP 4
 621: PUSH
 622: LD_INT 0
 624: EQUAL
 625: PUSH
 626: LD_EXP 2
 630: PUSH
 631: LD_INT 0
 633: EQUAL
 634: AND
 635: PUSH
 636: LD_EXP 3
 640: PUSH
 641: LD_INT 0
 643: EQUAL
 644: AND
 645: IFFALSE 744
// begin tmp = CreateCharacterSet ( 03_others ) ;
 647: LD_ADDR_VAR 0 3
 651: PUSH
 652: LD_STRING 03_others
 654: PPUSH
 655: CALL_OW 31
 659: ST_TO_ADDR
// if tmp then
 660: LD_VAR 0 3
 664: IFFALSE 721
// begin RandomBeforeMission = tmp [ 1 ] ;
 666: LD_ADDR_EXP 6
 670: PUSH
 671: LD_VAR 0 3
 675: PUSH
 676: LD_INT 1
 678: ARRAY
 679: ST_TO_ADDR
// DeleteCharacters ( 03_others ) ;
 680: LD_STRING 03_others
 682: PPUSH
 683: CALL_OW 40
// if tmp > 1 then
 687: LD_VAR 0 3
 691: PUSH
 692: LD_INT 1
 694: GREATER
 695: IFFALSE 719
// SaveCharacters ( tmp diff tmp [ 1 ] , 03_others ) ;
 697: LD_VAR 0 3
 701: PUSH
 702: LD_VAR 0 3
 706: PUSH
 707: LD_INT 1
 709: ARRAY
 710: DIFF
 711: PPUSH
 712: LD_STRING 03_others
 714: PPUSH
 715: CALL_OW 38
// end else
 719: GO 744
// begin PrepareHuman ( false , 1 , 3 ) ;
 721: LD_INT 0
 723: PPUSH
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 3
 729: PPUSH
 730: CALL_OW 380
// RandomBeforeMission := CreateHuman ;
 734: LD_ADDR_EXP 6
 738: PUSH
 739: CALL_OW 44
 743: ST_TO_ADDR
// end ; end ; uc_side = 4 ;
 744: LD_ADDR_OWVAR 20
 748: PUSH
 749: LD_INT 4
 751: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , false ) ;
 752: LD_ADDR_EXP 13
 756: PUSH
 757: LD_STRING Donaldson
 759: PPUSH
 760: LD_INT 0
 762: PPUSH
 763: CALL 3824 0 2
 767: ST_TO_ADDR
// if TestCharacters ( 03_Frank ) = true then
 768: LD_STRING 03_Frank
 770: PPUSH
 771: CALL_OW 28
 775: PUSH
 776: LD_INT 1
 778: EQUAL
 779: IFFALSE 823
// begin Frank = PrepareUnit ( 03_Frank , true ) ;
 781: LD_ADDR_EXP 5
 785: PUSH
 786: LD_STRING 03_Frank
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: CALL 3824 0 2
 796: ST_TO_ADDR
// if Frank = 0 then
 797: LD_EXP 5
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: IFFALSE 823
// Frank = PrepareUnit ( Frank , false ) ;
 807: LD_ADDR_EXP 5
 811: PUSH
 812: LD_STRING Frank
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL 3824 0 2
 822: ST_TO_ADDR
// end ; PlaceHumanInUnit ( JMM , amvj ) ;
 823: LD_EXP 1
 827: PPUSH
 828: LD_INT 32
 830: PPUSH
 831: CALL_OW 52
// PlaceUnitArea ( Brown , BrownSpawn , false ) ;
 835: LD_EXP 7
 839: PPUSH
 840: LD_INT 1
 842: PPUSH
 843: LD_INT 0
 845: PPUSH
 846: CALL_OW 49
// ComTurnUnit ( Brown , amvj ) ;
 850: LD_EXP 7
 854: PPUSH
 855: LD_INT 32
 857: PPUSH
 858: CALL_OW 119
// PlaceUnitArea ( Dickens , GammaPeople , false ) ;
 862: LD_EXP 8
 866: PPUSH
 867: LD_INT 2
 869: PPUSH
 870: LD_INT 0
 872: PPUSH
 873: CALL_OW 49
// PlaceUnitArea ( Woodruff , GammaPeople , false ) ;
 877: LD_EXP 9
 881: PPUSH
 882: LD_INT 2
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: CALL_OW 49
// PlaceUnitArea ( Campell , GammaPeople , false ) ;
 892: LD_EXP 12
 896: PPUSH
 897: LD_INT 2
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: CALL_OW 49
// PlaceUnitArea ( Knight , GammaPeople , false ) ;
 907: LD_EXP 10
 911: PPUSH
 912: LD_INT 2
 914: PPUSH
 915: LD_INT 0
 917: PPUSH
 918: CALL_OW 49
// PlaceUnitArea ( Claptopn , GammaPeople , false ) ;
 922: LD_EXP 11
 926: PPUSH
 927: LD_INT 2
 929: PPUSH
 930: LD_INT 0
 932: PPUSH
 933: CALL_OW 49
// PlaceUnitArea ( Lisa , GammaPeople , false ) ;
 937: LD_EXP 4
 941: PPUSH
 942: LD_INT 2
 944: PPUSH
 945: LD_INT 0
 947: PPUSH
 948: CALL_OW 49
// if Lisa = false then
 952: LD_EXP 4
 956: PUSH
 957: LD_INT 0
 959: EQUAL
 960: IFFALSE 977
// PlaceUnitArea ( Bobby , GammaPeople , false ) ;
 962: LD_EXP 2
 966: PPUSH
 967: LD_INT 2
 969: PPUSH
 970: LD_INT 0
 972: PPUSH
 973: CALL_OW 49
// if Lisa = false and Bobby = false then
 977: LD_EXP 4
 981: PUSH
 982: LD_INT 0
 984: EQUAL
 985: PUSH
 986: LD_EXP 2
 990: PUSH
 991: LD_INT 0
 993: EQUAL
 994: AND
 995: IFFALSE 1012
// PlaceUnitArea ( Cyrus , GammaPeople , false ) ;
 997: LD_EXP 3
1001: PPUSH
1002: LD_INT 2
1004: PPUSH
1005: LD_INT 0
1007: PPUSH
1008: CALL_OW 49
// if Lisa = false and Bobby = false and Cyrus = false then
1012: LD_EXP 4
1016: PUSH
1017: LD_INT 0
1019: EQUAL
1020: PUSH
1021: LD_EXP 2
1025: PUSH
1026: LD_INT 0
1028: EQUAL
1029: AND
1030: PUSH
1031: LD_EXP 3
1035: PUSH
1036: LD_INT 0
1038: EQUAL
1039: AND
1040: IFFALSE 1057
// PlaceUnitArea ( RandomBeforeMission , GammaPeople , false ) ;
1042: LD_EXP 6
1046: PPUSH
1047: LD_INT 2
1049: PPUSH
1050: LD_INT 0
1052: PPUSH
1053: CALL_OW 49
// end ;
1057: LD_VAR 0 1
1061: RET
// export function PrepareDonaldsonArmy ; var i , un ; begin
1062: LD_INT 0
1064: PPUSH
1065: PPUSH
1066: PPUSH
// PlaceUnitArea ( Donaldson , DonaldsonArea , false ) ;
1067: LD_EXP 13
1071: PPUSH
1072: LD_INT 10
1074: PPUSH
1075: LD_INT 0
1077: PPUSH
1078: CALL_OW 49
// if Frank then
1082: LD_EXP 5
1086: IFFALSE 1103
// PlaceUnitArea ( Frank , DonaldsonArea , false ) ;
1088: LD_EXP 5
1092: PPUSH
1093: LD_INT 10
1095: PPUSH
1096: LD_INT 0
1098: PPUSH
1099: CALL_OW 49
// uc_nation = 1 ;
1103: LD_ADDR_OWVAR 21
1107: PUSH
1108: LD_INT 1
1110: ST_TO_ADDR
// uc_side = 4 ;
1111: LD_ADDR_OWVAR 20
1115: PUSH
1116: LD_INT 4
1118: ST_TO_ADDR
// hc_class := 3 ;
1119: LD_ADDR_OWVAR 28
1123: PUSH
1124: LD_INT 3
1126: ST_TO_ADDR
// hc_sex := sex_male ;
1127: LD_ADDR_OWVAR 27
1131: PUSH
1132: LD_INT 1
1134: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1135: LD_ADDR_OWVAR 33
1139: PUSH
1140: LD_STRING SecondCharsGal
1142: ST_TO_ADDR
// hc_face_number := 53 ;
1143: LD_ADDR_OWVAR 34
1147: PUSH
1148: LD_INT 53
1150: ST_TO_ADDR
// hc_name := Freddie Warner ;
1151: LD_ADDR_OWVAR 26
1155: PUSH
1156: LD_STRING Freddie Warner
1158: ST_TO_ADDR
// hc_attr := [ 8 , 11 ] ;
1159: LD_ADDR_OWVAR 29
1163: PUSH
1164: LD_INT 8
1166: PUSH
1167: LD_INT 11
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
1174: LD_ADDR_OWVAR 30
1178: PUSH
1179: LD_INT 0
1181: PUSH
1182: LD_INT 0
1184: PUSH
1185: LD_INT 1
1187: PUSH
1188: LD_INT 0
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: LIST
1195: LIST
1196: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 3 , 0 ] ;
1197: LD_ADDR_OWVAR 31
1201: PUSH
1202: LD_INT 1
1204: PUSH
1205: LD_INT 0
1207: PUSH
1208: LD_INT 3
1210: PUSH
1211: LD_INT 0
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: LIST
1218: LIST
1219: ST_TO_ADDR
// un = CreateHuman ;
1220: LD_ADDR_VAR 0 3
1224: PUSH
1225: CALL_OW 44
1229: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1230: LD_VAR 0 3
1234: PPUSH
1235: LD_INT 10
1237: PPUSH
1238: LD_INT 0
1240: PPUSH
1241: CALL_OW 49
// hc_class := 1 ;
1245: LD_ADDR_OWVAR 28
1249: PUSH
1250: LD_INT 1
1252: ST_TO_ADDR
// hc_sex := sex_male ;
1253: LD_ADDR_OWVAR 27
1257: PUSH
1258: LD_INT 1
1260: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1261: LD_ADDR_OWVAR 33
1265: PUSH
1266: LD_STRING SecondCharsGal
1268: ST_TO_ADDR
// hc_face_number := 56 ;
1269: LD_ADDR_OWVAR 34
1273: PUSH
1274: LD_INT 56
1276: ST_TO_ADDR
// hc_name := Mel Brennan ;
1277: LD_ADDR_OWVAR 26
1281: PUSH
1282: LD_STRING Mel Brennan
1284: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1285: LD_ADDR_OWVAR 29
1289: PUSH
1290: LD_INT 12
1292: PUSH
1293: LD_INT 11
1295: PUSH
1296: EMPTY
1297: LIST
1298: LIST
1299: ST_TO_ADDR
// hc_basic_skills := [ 1 , 1 , 0 , 0 ] ;
1300: LD_ADDR_OWVAR 30
1304: PUSH
1305: LD_INT 1
1307: PUSH
1308: LD_INT 1
1310: PUSH
1311: LD_INT 0
1313: PUSH
1314: LD_INT 0
1316: PUSH
1317: EMPTY
1318: LIST
1319: LIST
1320: LIST
1321: LIST
1322: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1323: LD_ADDR_OWVAR 31
1327: PUSH
1328: LD_INT 2
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: LD_INT 1
1336: PUSH
1337: LD_INT 0
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: LIST
1344: LIST
1345: ST_TO_ADDR
// un = CreateHuman ;
1346: LD_ADDR_VAR 0 3
1350: PUSH
1351: CALL_OW 44
1355: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1356: LD_VAR 0 3
1360: PPUSH
1361: LD_INT 10
1363: PPUSH
1364: LD_INT 0
1366: PPUSH
1367: CALL_OW 49
// hc_class := 1 ;
1371: LD_ADDR_OWVAR 28
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// hc_sex := sex_male ;
1379: LD_ADDR_OWVAR 27
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1387: LD_ADDR_OWVAR 33
1391: PUSH
1392: LD_STRING AmGalRemake
1394: ST_TO_ADDR
// hc_face_number := 5 ;
1395: LD_ADDR_OWVAR 34
1399: PUSH
1400: LD_INT 5
1402: ST_TO_ADDR
// hc_name := Bob Joplin ;
1403: LD_ADDR_OWVAR 26
1407: PUSH
1408: LD_STRING Bob Joplin
1410: ST_TO_ADDR
// hc_attr := [ 10 , 11 ] ;
1411: LD_ADDR_OWVAR 29
1415: PUSH
1416: LD_INT 10
1418: PUSH
1419: LD_INT 11
1421: PUSH
1422: EMPTY
1423: LIST
1424: LIST
1425: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1426: LD_ADDR_OWVAR 30
1430: PUSH
1431: LD_INT 0
1433: PUSH
1434: LD_INT 1
1436: PUSH
1437: LD_INT 1
1439: PUSH
1440: LD_INT 0
1442: PUSH
1443: EMPTY
1444: LIST
1445: LIST
1446: LIST
1447: LIST
1448: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
1449: LD_ADDR_OWVAR 31
1453: PUSH
1454: LD_INT 3
1456: PUSH
1457: LD_INT 1
1459: PUSH
1460: LD_INT 1
1462: PUSH
1463: LD_INT 1
1465: PUSH
1466: EMPTY
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: ST_TO_ADDR
// un = CreateHuman ;
1472: LD_ADDR_VAR 0 3
1476: PUSH
1477: CALL_OW 44
1481: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1482: LD_VAR 0 3
1486: PPUSH
1487: LD_INT 10
1489: PPUSH
1490: LD_INT 0
1492: PPUSH
1493: CALL_OW 49
// hc_class := 3 ;
1497: LD_ADDR_OWVAR 28
1501: PUSH
1502: LD_INT 3
1504: ST_TO_ADDR
// hc_sex := sex_female ;
1505: LD_ADDR_OWVAR 27
1509: PUSH
1510: LD_INT 2
1512: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1513: LD_ADDR_OWVAR 33
1517: PUSH
1518: LD_STRING AmGalRemake
1520: ST_TO_ADDR
// hc_face_number := 8 ;
1521: LD_ADDR_OWVAR 34
1525: PUSH
1526: LD_INT 8
1528: ST_TO_ADDR
// hc_name := Elizabeth Whitney ;
1529: LD_ADDR_OWVAR 26
1533: PUSH
1534: LD_STRING Elizabeth Whitney
1536: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1537: LD_ADDR_OWVAR 29
1541: PUSH
1542: LD_INT 9
1544: PUSH
1545: LD_INT 11
1547: PUSH
1548: EMPTY
1549: LIST
1550: LIST
1551: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 2 , 0 ] ;
1552: LD_ADDR_OWVAR 30
1556: PUSH
1557: LD_INT 0
1559: PUSH
1560: LD_INT 0
1562: PUSH
1563: LD_INT 2
1565: PUSH
1566: LD_INT 0
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: LIST
1573: LIST
1574: ST_TO_ADDR
// hc_skills := [ 2 , 2 , 4 , 2 ] ;
1575: LD_ADDR_OWVAR 31
1579: PUSH
1580: LD_INT 2
1582: PUSH
1583: LD_INT 2
1585: PUSH
1586: LD_INT 4
1588: PUSH
1589: LD_INT 2
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: ST_TO_ADDR
// un = CreateHuman ;
1598: LD_ADDR_VAR 0 3
1602: PUSH
1603: CALL_OW 44
1607: ST_TO_ADDR
// PlaceUnitArea ( un , DonaldsonArea , false ) ;
1608: LD_VAR 0 3
1612: PPUSH
1613: LD_INT 10
1615: PPUSH
1616: LD_INT 0
1618: PPUSH
1619: CALL_OW 49
// InitHc ;
1623: CALL_OW 19
// end ;
1627: LD_VAR 0 1
1631: RET
// export function PrepareHarrisonSupport ( count ) ; var i , un ; begin
1632: LD_INT 0
1634: PPUSH
1635: PPUSH
1636: PPUSH
// uc_nation = 1 ;
1637: LD_ADDR_OWVAR 21
1641: PUSH
1642: LD_INT 1
1644: ST_TO_ADDR
// uc_side = 1 ;
1645: LD_ADDR_OWVAR 20
1649: PUSH
1650: LD_INT 1
1652: ST_TO_ADDR
// hc_class := 1 ;
1653: LD_ADDR_OWVAR 28
1657: PUSH
1658: LD_INT 1
1660: ST_TO_ADDR
// hc_sex := sex_male ;
1661: LD_ADDR_OWVAR 27
1665: PUSH
1666: LD_INT 1
1668: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1669: LD_ADDR_OWVAR 33
1673: PUSH
1674: LD_STRING SecondCharsGal
1676: ST_TO_ADDR
// hc_face_number := 59 ;
1677: LD_ADDR_OWVAR 34
1681: PUSH
1682: LD_INT 59
1684: ST_TO_ADDR
// hc_name := Max Gray ;
1685: LD_ADDR_OWVAR 26
1689: PUSH
1690: LD_STRING Max Gray
1692: ST_TO_ADDR
// hc_attr := [ 9 , 11 ] ;
1693: LD_ADDR_OWVAR 29
1697: PUSH
1698: LD_INT 9
1700: PUSH
1701: LD_INT 11
1703: PUSH
1704: EMPTY
1705: LIST
1706: LIST
1707: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1708: LD_ADDR_OWVAR 30
1712: PUSH
1713: LD_INT 1
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 0
1721: PUSH
1722: LD_INT 0
1724: PUSH
1725: EMPTY
1726: LIST
1727: LIST
1728: LIST
1729: LIST
1730: ST_TO_ADDR
// hc_skills := [ 2 , 1 , 1 , 0 ] ;
1731: LD_ADDR_OWVAR 31
1735: PUSH
1736: LD_INT 2
1738: PUSH
1739: LD_INT 1
1741: PUSH
1742: LD_INT 1
1744: PUSH
1745: LD_INT 0
1747: PUSH
1748: EMPTY
1749: LIST
1750: LIST
1751: LIST
1752: LIST
1753: ST_TO_ADDR
// un = CreateHuman ;
1754: LD_ADDR_VAR 0 4
1758: PUSH
1759: CALL_OW 44
1763: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1764: LD_VAR 0 4
1768: PPUSH
1769: LD_INT 11
1771: PPUSH
1772: LD_INT 0
1774: PPUSH
1775: CALL_OW 49
// hc_class := 1 ;
1779: LD_ADDR_OWVAR 28
1783: PUSH
1784: LD_INT 1
1786: ST_TO_ADDR
// hc_sex := sex_male ;
1787: LD_ADDR_OWVAR 27
1791: PUSH
1792: LD_INT 1
1794: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1795: LD_ADDR_OWVAR 33
1799: PUSH
1800: LD_STRING SecondCharsGal
1802: ST_TO_ADDR
// hc_face_number := 54 ;
1803: LD_ADDR_OWVAR 34
1807: PUSH
1808: LD_INT 54
1810: ST_TO_ADDR
// hc_name := Luigi Ghbellin ;
1811: LD_ADDR_OWVAR 26
1815: PUSH
1816: LD_STRING Luigi Ghbellin
1818: ST_TO_ADDR
// hc_attr := [ 11 , 11 ] ;
1819: LD_ADDR_OWVAR 29
1823: PUSH
1824: LD_INT 11
1826: PUSH
1827: LD_INT 11
1829: PUSH
1830: EMPTY
1831: LIST
1832: LIST
1833: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 0 ] ;
1834: LD_ADDR_OWVAR 30
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 0
1844: PUSH
1845: LD_INT 0
1847: PUSH
1848: LD_INT 0
1850: PUSH
1851: EMPTY
1852: LIST
1853: LIST
1854: LIST
1855: LIST
1856: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 0 , 1 ] ;
1857: LD_ADDR_OWVAR 31
1861: PUSH
1862: LD_INT 1
1864: PUSH
1865: LD_INT 0
1867: PUSH
1868: LD_INT 0
1870: PUSH
1871: LD_INT 1
1873: PUSH
1874: EMPTY
1875: LIST
1876: LIST
1877: LIST
1878: LIST
1879: ST_TO_ADDR
// un = CreateHuman ;
1880: LD_ADDR_VAR 0 4
1884: PUSH
1885: CALL_OW 44
1889: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
1890: LD_VAR 0 4
1894: PPUSH
1895: LD_INT 11
1897: PPUSH
1898: LD_INT 0
1900: PPUSH
1901: CALL_OW 49
// hc_class := 3 ;
1905: LD_ADDR_OWVAR 28
1909: PUSH
1910: LD_INT 3
1912: ST_TO_ADDR
// hc_sex := sex_male ;
1913: LD_ADDR_OWVAR 27
1917: PUSH
1918: LD_INT 1
1920: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
1921: LD_ADDR_OWVAR 33
1925: PUSH
1926: LD_STRING AmGalRemake
1928: ST_TO_ADDR
// hc_face_number := 6 ;
1929: LD_ADDR_OWVAR 34
1933: PUSH
1934: LD_INT 6
1936: ST_TO_ADDR
// hc_name := Leon Carter ;
1937: LD_ADDR_OWVAR 26
1941: PUSH
1942: LD_STRING Leon Carter
1944: ST_TO_ADDR
// hc_attr := [ 10 , 9 ] ;
1945: LD_ADDR_OWVAR 29
1949: PUSH
1950: LD_INT 10
1952: PUSH
1953: LD_INT 9
1955: PUSH
1956: EMPTY
1957: LIST
1958: LIST
1959: ST_TO_ADDR
// hc_basic_skills := [ 0 , 1 , 1 , 0 ] ;
1960: LD_ADDR_OWVAR 30
1964: PUSH
1965: LD_INT 0
1967: PUSH
1968: LD_INT 1
1970: PUSH
1971: LD_INT 1
1973: PUSH
1974: LD_INT 0
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: ST_TO_ADDR
// hc_skills := [ 0 , 1 , 3 , 0 ] ;
1983: LD_ADDR_OWVAR 31
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: LD_INT 1
1993: PUSH
1994: LD_INT 3
1996: PUSH
1997: LD_INT 0
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: LIST
2004: LIST
2005: ST_TO_ADDR
// un = CreateHuman ;
2006: LD_ADDR_VAR 0 4
2010: PUSH
2011: CALL_OW 44
2015: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2016: LD_VAR 0 4
2020: PPUSH
2021: LD_INT 11
2023: PPUSH
2024: LD_INT 0
2026: PPUSH
2027: CALL_OW 49
// if count = 4 then
2031: LD_VAR 0 1
2035: PUSH
2036: LD_INT 4
2038: EQUAL
2039: IFFALSE 2167
// begin hc_class := 1 ;
2041: LD_ADDR_OWVAR 28
2045: PUSH
2046: LD_INT 1
2048: ST_TO_ADDR
// hc_sex := sex_male ;
2049: LD_ADDR_OWVAR 27
2053: PUSH
2054: LD_INT 1
2056: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2057: LD_ADDR_OWVAR 33
2061: PUSH
2062: LD_STRING SecondCharsGal
2064: ST_TO_ADDR
// hc_face_number := 34 ;
2065: LD_ADDR_OWVAR 34
2069: PUSH
2070: LD_INT 34
2072: ST_TO_ADDR
// hc_name := Ian Hill ;
2073: LD_ADDR_OWVAR 26
2077: PUSH
2078: LD_STRING Ian Hill
2080: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2081: LD_ADDR_OWVAR 29
2085: PUSH
2086: LD_INT 10
2088: PUSH
2089: LD_INT 12
2091: PUSH
2092: EMPTY
2093: LIST
2094: LIST
2095: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2096: LD_ADDR_OWVAR 30
2100: PUSH
2101: LD_INT 0
2103: PUSH
2104: LD_INT 0
2106: PUSH
2107: LD_INT 1
2109: PUSH
2110: LD_INT 0
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: LIST
2117: LIST
2118: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2119: LD_ADDR_OWVAR 31
2123: PUSH
2124: LD_INT 2
2126: PUSH
2127: LD_INT 0
2129: PUSH
2130: LD_INT 1
2132: PUSH
2133: LD_INT 0
2135: PUSH
2136: EMPTY
2137: LIST
2138: LIST
2139: LIST
2140: LIST
2141: ST_TO_ADDR
// un = CreateHuman ;
2142: LD_ADDR_VAR 0 4
2146: PUSH
2147: CALL_OW 44
2151: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2152: LD_VAR 0 4
2156: PPUSH
2157: LD_INT 11
2159: PPUSH
2160: LD_INT 0
2162: PPUSH
2163: CALL_OW 49
// end ; if count = 5 then
2167: LD_VAR 0 1
2171: PUSH
2172: LD_INT 5
2174: EQUAL
2175: IFFALSE 2429
// begin hc_class := 1 ;
2177: LD_ADDR_OWVAR 28
2181: PUSH
2182: LD_INT 1
2184: ST_TO_ADDR
// hc_sex := sex_male ;
2185: LD_ADDR_OWVAR 27
2189: PUSH
2190: LD_INT 1
2192: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2193: LD_ADDR_OWVAR 33
2197: PUSH
2198: LD_STRING SecondCharsGal
2200: ST_TO_ADDR
// hc_face_number := 34 ;
2201: LD_ADDR_OWVAR 34
2205: PUSH
2206: LD_INT 34
2208: ST_TO_ADDR
// hc_name := Ian Hill ;
2209: LD_ADDR_OWVAR 26
2213: PUSH
2214: LD_STRING Ian Hill
2216: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
2217: LD_ADDR_OWVAR 29
2221: PUSH
2222: LD_INT 10
2224: PUSH
2225: LD_INT 12
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: ST_TO_ADDR
// hc_basic_skills := [ 0 , 0 , 1 , 0 ] ;
2232: LD_ADDR_OWVAR 30
2236: PUSH
2237: LD_INT 0
2239: PUSH
2240: LD_INT 0
2242: PUSH
2243: LD_INT 1
2245: PUSH
2246: LD_INT 0
2248: PUSH
2249: EMPTY
2250: LIST
2251: LIST
2252: LIST
2253: LIST
2254: ST_TO_ADDR
// hc_skills := [ 2 , 0 , 1 , 0 ] ;
2255: LD_ADDR_OWVAR 31
2259: PUSH
2260: LD_INT 2
2262: PUSH
2263: LD_INT 0
2265: PUSH
2266: LD_INT 1
2268: PUSH
2269: LD_INT 0
2271: PUSH
2272: EMPTY
2273: LIST
2274: LIST
2275: LIST
2276: LIST
2277: ST_TO_ADDR
// un = CreateHuman ;
2278: LD_ADDR_VAR 0 4
2282: PUSH
2283: CALL_OW 44
2287: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2288: LD_VAR 0 4
2292: PPUSH
2293: LD_INT 11
2295: PPUSH
2296: LD_INT 0
2298: PPUSH
2299: CALL_OW 49
// hc_class := 1 ;
2303: LD_ADDR_OWVAR 28
2307: PUSH
2308: LD_INT 1
2310: ST_TO_ADDR
// hc_sex := sex_female ;
2311: LD_ADDR_OWVAR 27
2315: PUSH
2316: LD_INT 2
2318: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
2319: LD_ADDR_OWVAR 33
2323: PUSH
2324: LD_STRING SecondCharsGal
2326: ST_TO_ADDR
// hc_face_number := 41 ;
2327: LD_ADDR_OWVAR 34
2331: PUSH
2332: LD_INT 41
2334: ST_TO_ADDR
// hc_name := Kate Wadsworth ;
2335: LD_ADDR_OWVAR 26
2339: PUSH
2340: LD_STRING Kate Wadsworth
2342: ST_TO_ADDR
// hc_attr := [ 9 , 9 ] ;
2343: LD_ADDR_OWVAR 29
2347: PUSH
2348: LD_INT 9
2350: PUSH
2351: LD_INT 9
2353: PUSH
2354: EMPTY
2355: LIST
2356: LIST
2357: ST_TO_ADDR
// hc_basic_skills := [ 0 , 2 , 0 , 0 ] ;
2358: LD_ADDR_OWVAR 30
2362: PUSH
2363: LD_INT 0
2365: PUSH
2366: LD_INT 2
2368: PUSH
2369: LD_INT 0
2371: PUSH
2372: LD_INT 0
2374: PUSH
2375: EMPTY
2376: LIST
2377: LIST
2378: LIST
2379: LIST
2380: ST_TO_ADDR
// hc_skills := [ 2 , 3 , 1 , 0 ] ;
2381: LD_ADDR_OWVAR 31
2385: PUSH
2386: LD_INT 2
2388: PUSH
2389: LD_INT 3
2391: PUSH
2392: LD_INT 1
2394: PUSH
2395: LD_INT 0
2397: PUSH
2398: EMPTY
2399: LIST
2400: LIST
2401: LIST
2402: LIST
2403: ST_TO_ADDR
// un = CreateHuman ;
2404: LD_ADDR_VAR 0 4
2408: PUSH
2409: CALL_OW 44
2413: ST_TO_ADDR
// PlaceUnitArea ( un , AmericansHelpArea2 , false ) ;
2414: LD_VAR 0 4
2418: PPUSH
2419: LD_INT 11
2421: PPUSH
2422: LD_INT 0
2424: PPUSH
2425: CALL_OW 49
// end ; CenterNowOnUnits ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] ) ;
2429: LD_INT 11
2431: PPUSH
2432: LD_INT 22
2434: PUSH
2435: LD_INT 1
2437: PUSH
2438: EMPTY
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 21
2444: PUSH
2445: LD_INT 1
2447: PUSH
2448: EMPTY
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 26
2454: PUSH
2455: LD_INT 1
2457: PUSH
2458: EMPTY
2459: LIST
2460: LIST
2461: PUSH
2462: EMPTY
2463: LIST
2464: LIST
2465: LIST
2466: PPUSH
2467: CALL_OW 70
2471: PUSH
2472: LD_INT 1
2474: ARRAY
2475: PPUSH
2476: CALL_OW 87
// Say ( FilterUnitsInArea ( AmericansHelpArea2 , [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) [ 1 ] , D6-Sol3-1 ) ;
2480: LD_INT 11
2482: PPUSH
2483: LD_INT 22
2485: PUSH
2486: LD_INT 1
2488: PUSH
2489: EMPTY
2490: LIST
2491: LIST
2492: PUSH
2493: LD_INT 21
2495: PUSH
2496: LD_INT 1
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PUSH
2503: LD_INT 26
2505: PUSH
2506: LD_INT 1
2508: PUSH
2509: EMPTY
2510: LIST
2511: LIST
2512: PUSH
2513: EMPTY
2514: LIST
2515: LIST
2516: LIST
2517: PPUSH
2518: CALL_OW 70
2522: PUSH
2523: LD_INT 1
2525: ARRAY
2526: PPUSH
2527: LD_STRING D6-Sol3-1
2529: PPUSH
2530: CALL_OW 88
// end ; end_of_file
2534: LD_VAR 0 2
2538: RET
// export function PrepareRussianCommander ; begin
2539: LD_INT 0
2541: PPUSH
// uc_side = 3 ;
2542: LD_ADDR_OWVAR 20
2546: PUSH
2547: LD_INT 3
2549: ST_TO_ADDR
// uc_nation = 3 ;
2550: LD_ADDR_OWVAR 21
2554: PUSH
2555: LD_INT 3
2557: ST_TO_ADDR
// Stolypin = NewCharacter ( Stolypin ) ;
2558: LD_ADDR_EXP 15
2562: PUSH
2563: LD_STRING Stolypin
2565: PPUSH
2566: CALL_OW 25
2570: ST_TO_ADDR
// PlaceHumanInUnit ( Stolypin , rubware0 ) ;
2571: LD_EXP 15
2575: PPUSH
2576: LD_INT 21
2578: PPUSH
2579: CALL_OW 52
// end ;
2583: LD_VAR 0 1
2587: RET
// export function PrepareRussianBase ; var i ; begin
2588: LD_INT 0
2590: PPUSH
2591: PPUSH
// RespawnInside ( 3 , 3 , rubarmr0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 2 ) ;
2592: LD_INT 3
2594: PPUSH
2595: LD_INT 3
2597: PPUSH
2598: LD_INT 22
2600: PPUSH
2601: LD_EXP 16
2605: PPUSH
2606: LD_EXP 17
2610: PPUSH
2611: CALL_OW 12
2615: PPUSH
2616: LD_INT 1
2618: PPUSH
2619: LD_INT 2
2621: PPUSH
2622: CALL 3887 0 6
// RespawnInside ( 3 , 3 , rubware0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 2 , 3 ) ;
2626: LD_INT 3
2628: PPUSH
2629: LD_INT 3
2631: PPUSH
2632: LD_INT 21
2634: PPUSH
2635: LD_EXP 16
2639: PPUSH
2640: LD_EXP 17
2644: PPUSH
2645: CALL_OW 12
2649: PPUSH
2650: LD_INT 2
2652: PPUSH
2653: LD_INT 3
2655: PPUSH
2656: CALL 3887 0 6
// RespawnInside ( 3 , 3 , rubbrid0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 4 , 2 ) ;
2660: LD_INT 3
2662: PPUSH
2663: LD_INT 3
2665: PPUSH
2666: LD_INT 1
2668: PPUSH
2669: LD_EXP 16
2673: PPUSH
2674: LD_EXP 17
2678: PPUSH
2679: CALL_OW 12
2683: PPUSH
2684: LD_INT 4
2686: PPUSH
2687: LD_INT 2
2689: PPUSH
2690: CALL 3887 0 6
// RespawnInside ( 3 , 3 , rubfact0 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 3 , 6 ) ;
2694: LD_INT 3
2696: PPUSH
2697: LD_INT 3
2699: PPUSH
2700: LD_INT 24
2702: PPUSH
2703: LD_EXP 16
2707: PPUSH
2708: LD_EXP 17
2712: PPUSH
2713: CALL_OW 12
2717: PPUSH
2718: LD_INT 3
2720: PPUSH
2721: LD_INT 6
2723: PPUSH
2724: CALL 3887 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
2728: LD_ADDR_VAR 0 2
2732: PUSH
2733: LD_INT 22
2735: PUSH
2736: LD_INT 3
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: PUSH
2743: LD_INT 30
2745: PUSH
2746: LD_INT 32
2748: PUSH
2749: EMPTY
2750: LIST
2751: LIST
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PPUSH
2757: CALL_OW 69
2761: PUSH
2762: FOR_IN
2763: IFFALSE 2803
// RespawnInside ( 3 , 3 , i , rand ( RuSoldMinLevel , RuSoldMaxLevel ) , 1 , 1 ) ;
2765: LD_INT 3
2767: PPUSH
2768: LD_INT 3
2770: PPUSH
2771: LD_VAR 0 2
2775: PPUSH
2776: LD_EXP 16
2780: PPUSH
2781: LD_EXP 17
2785: PPUSH
2786: CALL_OW 12
2790: PPUSH
2791: LD_INT 1
2793: PPUSH
2794: LD_INT 1
2796: PPUSH
2797: CALL 3887 0 6
2801: GO 2762
2803: POP
2804: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , 31 ] ] ) do
2805: LD_ADDR_VAR 0 2
2809: PUSH
2810: LD_INT 22
2812: PUSH
2813: LD_INT 3
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: LD_INT 31
2825: PUSH
2826: EMPTY
2827: LIST
2828: LIST
2829: PUSH
2830: EMPTY
2831: LIST
2832: LIST
2833: PPUSH
2834: CALL_OW 69
2838: PUSH
2839: FOR_IN
2840: IFFALSE 2868
// PrepareSolBun ( rand ( RuSoldMinLevel , RuSoldMaxLevel ) , i ) ;
2842: LD_EXP 16
2846: PPUSH
2847: LD_EXP 17
2851: PPUSH
2852: CALL_OW 12
2856: PPUSH
2857: LD_VAR 0 2
2861: PPUSH
2862: CALL 3997 0 2
2866: GO 2839
2868: POP
2869: POP
// end ;
2870: LD_VAR 0 1
2874: RET
// export function PrepareRussianConvoy ; var i , veh , un ; begin
2875: LD_INT 0
2877: PPUSH
2878: PPUSH
2879: PPUSH
2880: PPUSH
// uc_side = 6 ;
2881: LD_ADDR_OWVAR 20
2885: PUSH
2886: LD_INT 6
2888: ST_TO_ADDR
// uc_nation = 3 ;
2889: LD_ADDR_OWVAR 21
2893: PUSH
2894: LD_INT 3
2896: ST_TO_ADDR
// for i := 1 to [ 1 , 2 , rand ( 1 , 2 ) ] [ Difficulty ] do
2897: LD_ADDR_VAR 0 2
2901: PUSH
2902: DOUBLE
2903: LD_INT 1
2905: DEC
2906: ST_TO_ADDR
2907: LD_INT 1
2909: PUSH
2910: LD_INT 2
2912: PUSH
2913: LD_INT 1
2915: PPUSH
2916: LD_INT 2
2918: PPUSH
2919: CALL_OW 12
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: LIST
2928: PUSH
2929: LD_OWVAR 67
2933: ARRAY
2934: PUSH
2935: FOR_TO
2936: IFFALSE 3096
// begin vc_engine = 1 ;
2938: LD_ADDR_OWVAR 39
2942: PUSH
2943: LD_INT 1
2945: ST_TO_ADDR
// vc_control = 1 ;
2946: LD_ADDR_OWVAR 38
2950: PUSH
2951: LD_INT 1
2953: ST_TO_ADDR
// vc_weapon = [ 42 , 42 , 43 ] [ Difficulty ] ;
2954: LD_ADDR_OWVAR 40
2958: PUSH
2959: LD_INT 42
2961: PUSH
2962: LD_INT 42
2964: PUSH
2965: LD_INT 43
2967: PUSH
2968: EMPTY
2969: LIST
2970: LIST
2971: LIST
2972: PUSH
2973: LD_OWVAR 67
2977: ARRAY
2978: ST_TO_ADDR
// vc_chassis = [ 21 , 22 , 22 ] [ Difficulty ] ;
2979: LD_ADDR_OWVAR 37
2983: PUSH
2984: LD_INT 21
2986: PUSH
2987: LD_INT 22
2989: PUSH
2990: LD_INT 22
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PUSH
2998: LD_OWVAR 67
3002: ARRAY
3003: ST_TO_ADDR
// veh = CreateVehicle ;
3004: LD_ADDR_VAR 0 3
3008: PUSH
3009: CALL_OW 45
3013: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3014: LD_VAR 0 3
3018: PPUSH
3019: LD_INT 3
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 49
// hc_gallery =  ;
3029: LD_ADDR_OWVAR 33
3033: PUSH
3034: LD_STRING 
3036: ST_TO_ADDR
// hc_name =  ;
3037: LD_ADDR_OWVAR 26
3041: PUSH
3042: LD_STRING 
3044: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3045: LD_INT 0
3047: PPUSH
3048: LD_INT 3
3050: PPUSH
3051: LD_EXP 16
3055: PPUSH
3056: LD_EXP 17
3060: PPUSH
3061: CALL_OW 12
3065: PPUSH
3066: CALL_OW 380
// un = CreateHuman ;
3070: LD_ADDR_VAR 0 4
3074: PUSH
3075: CALL_OW 44
3079: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3080: LD_VAR 0 4
3084: PPUSH
3085: LD_VAR 0 3
3089: PPUSH
3090: CALL_OW 52
// end ;
3094: GO 2935
3096: POP
3097: POP
// PrepareHuman ( false , 2 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3098: LD_INT 0
3100: PPUSH
3101: LD_INT 2
3103: PPUSH
3104: LD_EXP 16
3108: PPUSH
3109: LD_EXP 17
3113: PPUSH
3114: CALL_OW 12
3118: PUSH
3119: LD_INT 2
3121: PLUS
3122: PPUSH
3123: CALL_OW 380
// un = CreateHuman ;
3127: LD_ADDR_VAR 0 4
3131: PUSH
3132: CALL_OW 44
3136: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3137: LD_VAR 0 4
3141: PPUSH
3142: LD_INT 3
3144: PPUSH
3145: LD_INT 0
3147: PPUSH
3148: CALL_OW 49
// PrepareHuman ( false , 4 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) + 2 ) ;
3152: LD_INT 0
3154: PPUSH
3155: LD_INT 4
3157: PPUSH
3158: LD_EXP 16
3162: PPUSH
3163: LD_EXP 17
3167: PPUSH
3168: CALL_OW 12
3172: PUSH
3173: LD_INT 2
3175: PLUS
3176: PPUSH
3177: CALL_OW 380
// un = CreateHuman ;
3181: LD_ADDR_VAR 0 4
3185: PUSH
3186: CALL_OW 44
3190: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3191: LD_VAR 0 4
3195: PPUSH
3196: LD_INT 3
3198: PPUSH
3199: LD_INT 0
3201: PPUSH
3202: CALL_OW 49
// for i := 1 to [ 2 , 3 , 3 ] [ Difficulty ] + rand ( 1 , 3 ) do
3206: LD_ADDR_VAR 0 2
3210: PUSH
3211: DOUBLE
3212: LD_INT 1
3214: DEC
3215: ST_TO_ADDR
3216: LD_INT 2
3218: PUSH
3219: LD_INT 3
3221: PUSH
3222: LD_INT 3
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_OWVAR 67
3234: ARRAY
3235: PUSH
3236: LD_INT 1
3238: PPUSH
3239: LD_INT 3
3241: PPUSH
3242: CALL_OW 12
3246: PLUS
3247: PUSH
3248: FOR_TO
3249: IFFALSE 3319
// begin hc_gallery =  ;
3251: LD_ADDR_OWVAR 33
3255: PUSH
3256: LD_STRING 
3258: ST_TO_ADDR
// hc_name =  ;
3259: LD_ADDR_OWVAR 26
3263: PUSH
3264: LD_STRING 
3266: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3267: LD_INT 0
3269: PPUSH
3270: LD_INT 1
3272: PPUSH
3273: LD_EXP 16
3277: PPUSH
3278: LD_EXP 17
3282: PPUSH
3283: CALL_OW 12
3287: PPUSH
3288: CALL_OW 380
// un = CreateHuman ;
3292: LD_ADDR_VAR 0 4
3296: PUSH
3297: CALL_OW 44
3301: ST_TO_ADDR
// PlaceUnitArea ( un , RussianConvoy , false ) ;
3302: LD_VAR 0 4
3306: PPUSH
3307: LD_INT 3
3309: PPUSH
3310: LD_INT 0
3312: PPUSH
3313: CALL_OW 49
// end ;
3317: GO 3248
3319: POP
3320: POP
// vc_engine = 1 ;
3321: LD_ADDR_OWVAR 39
3325: PUSH
3326: LD_INT 1
3328: ST_TO_ADDR
// vc_control = 1 ;
3329: LD_ADDR_OWVAR 38
3333: PUSH
3334: LD_INT 1
3336: ST_TO_ADDR
// vc_weapon = 51 ;
3337: LD_ADDR_OWVAR 40
3341: PUSH
3342: LD_INT 51
3344: ST_TO_ADDR
// vc_chassis = 22 ;
3345: LD_ADDR_OWVAR 37
3349: PUSH
3350: LD_INT 22
3352: ST_TO_ADDR
// veh = CreateVehicle ;
3353: LD_ADDR_VAR 0 3
3357: PUSH
3358: CALL_OW 45
3362: ST_TO_ADDR
// PlaceUnitArea ( veh , RussianConvoy , false ) ;
3363: LD_VAR 0 3
3367: PPUSH
3368: LD_INT 3
3370: PPUSH
3371: LD_INT 0
3373: PPUSH
3374: CALL_OW 49
// SetCargo ( veh , 1 , 100 ) ;
3378: LD_VAR 0 3
3382: PPUSH
3383: LD_INT 1
3385: PPUSH
3386: LD_INT 100
3388: PPUSH
3389: CALL_OW 290
// hc_gallery =  ;
3393: LD_ADDR_OWVAR 33
3397: PUSH
3398: LD_STRING 
3400: ST_TO_ADDR
// hc_name =  ;
3401: LD_ADDR_OWVAR 26
3405: PUSH
3406: LD_STRING 
3408: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3409: LD_INT 0
3411: PPUSH
3412: LD_INT 3
3414: PPUSH
3415: LD_EXP 16
3419: PPUSH
3420: LD_EXP 17
3424: PPUSH
3425: CALL_OW 12
3429: PPUSH
3430: CALL_OW 380
// un = CreateHuman ;
3434: LD_ADDR_VAR 0 4
3438: PUSH
3439: CALL_OW 44
3443: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
3444: LD_VAR 0 4
3448: PPUSH
3449: LD_VAR 0 3
3453: PPUSH
3454: CALL_OW 52
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_and , [ f_not , [ f_class , 2 ] ] , [ f_not , [ f_class , 4 ] ] ] ] ) do
3458: LD_ADDR_VAR 0 2
3462: PUSH
3463: LD_INT 22
3465: PUSH
3466: LD_INT 6
3468: PUSH
3469: EMPTY
3470: LIST
3471: LIST
3472: PUSH
3473: LD_INT 1
3475: PUSH
3476: LD_INT 3
3478: PUSH
3479: LD_INT 25
3481: PUSH
3482: LD_INT 2
3484: PUSH
3485: EMPTY
3486: LIST
3487: LIST
3488: PUSH
3489: EMPTY
3490: LIST
3491: LIST
3492: PUSH
3493: LD_INT 3
3495: PUSH
3496: LD_INT 25
3498: PUSH
3499: LD_INT 4
3501: PUSH
3502: EMPTY
3503: LIST
3504: LIST
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: PPUSH
3519: CALL_OW 69
3523: PUSH
3524: FOR_IN
3525: IFFALSE 3544
// ComAgressiveMove ( i , 45 , 46 ) ;
3527: LD_VAR 0 2
3531: PPUSH
3532: LD_INT 45
3534: PPUSH
3535: LD_INT 46
3537: PPUSH
3538: CALL_OW 114
3542: GO 3524
3544: POP
3545: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 2 ] ] ) do
3546: LD_ADDR_VAR 0 2
3550: PUSH
3551: LD_INT 22
3553: PUSH
3554: LD_INT 6
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PUSH
3561: LD_INT 25
3563: PUSH
3564: LD_INT 2
3566: PUSH
3567: EMPTY
3568: LIST
3569: LIST
3570: PUSH
3571: EMPTY
3572: LIST
3573: LIST
3574: PPUSH
3575: CALL_OW 69
3579: PUSH
3580: FOR_IN
3581: IFFALSE 3612
// ruPDepot = ComBuild ( i , b_depot , 48 , 55 , 5 ) ;
3583: LD_ADDR_EXP 21
3587: PUSH
3588: LD_VAR 0 2
3592: PPUSH
3593: LD_INT 0
3595: PPUSH
3596: LD_INT 48
3598: PPUSH
3599: LD_INT 55
3601: PPUSH
3602: LD_INT 5
3604: PPUSH
3605: CALL_OW 145
3609: ST_TO_ADDR
3610: GO 3580
3612: POP
3613: POP
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_class , 4 ] ] ) do
3614: LD_ADDR_VAR 0 2
3618: PUSH
3619: LD_INT 22
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: PUSH
3629: LD_INT 25
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: LIST
3642: PPUSH
3643: CALL_OW 69
3647: PUSH
3648: FOR_IN
3649: IFFALSE 3668
// ComMoveXY ( i , 39 , 55 ) ;
3651: LD_VAR 0 2
3655: PPUSH
3656: LD_INT 39
3658: PPUSH
3659: LD_INT 55
3661: PPUSH
3662: CALL_OW 111
3666: GO 3648
3668: POP
3669: POP
// end ;
3670: LD_VAR 0 1
3674: RET
// export function PrepareFirstAttack ; var i , un ; begin
3675: LD_INT 0
3677: PPUSH
3678: PPUSH
3679: PPUSH
// uc_side = 5 ;
3680: LD_ADDR_OWVAR 20
3684: PUSH
3685: LD_INT 5
3687: ST_TO_ADDR
// uc_nation = 3 ;
3688: LD_ADDR_OWVAR 21
3692: PUSH
3693: LD_INT 3
3695: ST_TO_ADDR
// for i := 1 to 4 do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_INT 4
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3809
// begin hc_gallery =  ;
3712: LD_ADDR_OWVAR 33
3716: PUSH
3717: LD_STRING 
3719: ST_TO_ADDR
// hc_name =  ;
3720: LD_ADDR_OWVAR 26
3724: PUSH
3725: LD_STRING 
3727: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
3728: LD_INT 0
3730: PPUSH
3731: LD_INT 1
3733: PPUSH
3734: LD_EXP 16
3738: PPUSH
3739: LD_EXP 17
3743: PPUSH
3744: CALL_OW 12
3748: PPUSH
3749: CALL_OW 380
// un = CreateHuman ;
3753: LD_ADDR_VAR 0 3
3757: PUSH
3758: CALL_OW 44
3762: ST_TO_ADDR
// PlaceUnitArea ( un , RussianAttack , false ) ;
3763: LD_VAR 0 3
3767: PPUSH
3768: LD_INT 4
3770: PPUSH
3771: LD_INT 0
3773: PPUSH
3774: CALL_OW 49
// ComAgressiveMove ( un , GetX ( JMM ) , GetY ( JMM ) ) ;
3778: LD_VAR 0 3
3782: PPUSH
3783: LD_EXP 1
3787: PPUSH
3788: CALL_OW 250
3792: PPUSH
3793: LD_EXP 1
3797: PPUSH
3798: CALL_OW 251
3802: PPUSH
3803: CALL_OW 114
// end ;
3807: GO 3709
3809: POP
3810: POP
// firstRussianAttack = 1 ;
3811: LD_ADDR_EXP 23
3815: PUSH
3816: LD_INT 1
3818: ST_TO_ADDR
// end ; end_of_file
3819: LD_VAR 0 1
3823: RET
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
3824: LD_INT 0
3826: PPUSH
3827: PPUSH
// if exist_mode then
3828: LD_VAR 0 2
3832: IFFALSE 3857
// begin unit := CreateCharacter ( mission_prefix_prev & ident ) ;
3834: LD_ADDR_VAR 0 4
3838: PUSH
3839: LD_EXP 45
3843: PUSH
3844: LD_VAR 0 1
3848: STR
3849: PPUSH
3850: CALL_OW 34
3854: ST_TO_ADDR
// end else
3855: GO 3872
// begin unit := NewCharacter ( ident ) ;
3857: LD_ADDR_VAR 0 4
3861: PUSH
3862: LD_VAR 0 1
3866: PPUSH
3867: CALL_OW 25
3871: ST_TO_ADDR
// end ; result := unit ;
3872: LD_ADDR_VAR 0 3
3876: PUSH
3877: LD_VAR 0 4
3881: ST_TO_ADDR
// end ;
3882: LD_VAR 0 3
3886: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
3887: LD_INT 0
3889: PPUSH
3890: PPUSH
3891: PPUSH
3892: PPUSH
// for i = 1 to count do
3893: LD_ADDR_VAR 0 8
3897: PUSH
3898: DOUBLE
3899: LD_INT 1
3901: DEC
3902: ST_TO_ADDR
3903: LD_VAR 0 6
3907: PUSH
3908: FOR_TO
3909: IFFALSE 3990
// begin uc_side = side ;
3911: LD_ADDR_OWVAR 20
3915: PUSH
3916: LD_VAR 0 1
3920: ST_TO_ADDR
// uc_nation = nation ;
3921: LD_ADDR_OWVAR 21
3925: PUSH
3926: LD_VAR 0 2
3930: ST_TO_ADDR
// hc_gallery =  ;
3931: LD_ADDR_OWVAR 33
3935: PUSH
3936: LD_STRING 
3938: ST_TO_ADDR
// hc_name =  ;
3939: LD_ADDR_OWVAR 26
3943: PUSH
3944: LD_STRING 
3946: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
3947: LD_INT 0
3949: PPUSH
3950: LD_VAR 0 5
3954: PPUSH
3955: LD_VAR 0 4
3959: PPUSH
3960: CALL_OW 380
// un = CreateHuman ;
3964: LD_ADDR_VAR 0 10
3968: PUSH
3969: CALL_OW 44
3973: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
3974: LD_VAR 0 10
3978: PPUSH
3979: LD_VAR 0 3
3983: PPUSH
3984: CALL_OW 52
// end ;
3988: GO 3908
3990: POP
3991: POP
// end ;
3992: LD_VAR 0 7
3996: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
3997: LD_INT 0
3999: PPUSH
4000: PPUSH
4001: PPUSH
// uc_side := GetSide ( b ) ;
4002: LD_ADDR_OWVAR 20
4006: PUSH
4007: LD_VAR 0 2
4011: PPUSH
4012: CALL_OW 255
4016: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
4017: LD_ADDR_OWVAR 21
4021: PUSH
4022: LD_VAR 0 2
4026: PPUSH
4027: CALL_OW 248
4031: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
4032: LD_INT 0
4034: PPUSH
4035: LD_INT 1
4037: PPUSH
4038: LD_VAR 0 1
4042: PPUSH
4043: CALL_OW 380
// un = CreateHuman ;
4047: LD_ADDR_VAR 0 4
4051: PUSH
4052: CALL_OW 44
4056: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
4057: LD_ADDR_VAR 0 5
4061: PUSH
4062: LD_VAR 0 2
4066: PPUSH
4067: CALL_OW 254
4071: PUSH
4072: LD_INT 3
4074: MINUS
4075: ST_TO_ADDR
// if dir < 0 then
4076: LD_VAR 0 5
4080: PUSH
4081: LD_INT 0
4083: LESS
4084: IFFALSE 4100
// dir := 6 + dir ;
4086: LD_ADDR_VAR 0 5
4090: PUSH
4091: LD_INT 6
4093: PUSH
4094: LD_VAR 0 5
4098: PLUS
4099: ST_TO_ADDR
// SetDir ( un , dir ) ;
4100: LD_VAR 0 4
4104: PPUSH
4105: LD_VAR 0 5
4109: PPUSH
4110: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: LD_VAR 0 2
4123: PPUSH
4124: CALL_OW 52
// end ;
4128: LD_VAR 0 3
4132: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
4133: LD_INT 0
4135: PPUSH
4136: PPUSH
4137: PPUSH
// rnd = rand ( 1 , characters ) ;
4138: LD_ADDR_VAR 0 6
4142: PUSH
4143: LD_INT 1
4145: PPUSH
4146: LD_VAR 0 1
4150: PPUSH
4151: CALL_OW 12
4155: ST_TO_ADDR
// for i = 1 to characters do
4156: LD_ADDR_VAR 0 5
4160: PUSH
4161: DOUBLE
4162: LD_INT 1
4164: DEC
4165: ST_TO_ADDR
4166: LD_VAR 0 1
4170: PUSH
4171: FOR_TO
4172: IFFALSE 4282
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
4174: LD_VAR 0 5
4178: PUSH
4179: LD_VAR 0 6
4183: EQUAL
4184: PUSH
4185: LD_VAR 0 1
4189: PUSH
4190: LD_VAR 0 5
4194: ARRAY
4195: PPUSH
4196: CALL_OW 258
4200: PUSH
4201: LD_INT 1
4203: EQUAL
4204: AND
4205: IFFALSE 4227
// Say ( characters [ i ] , dialogMID ) ;
4207: LD_VAR 0 1
4211: PUSH
4212: LD_VAR 0 5
4216: ARRAY
4217: PPUSH
4218: LD_VAR 0 2
4222: PPUSH
4223: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
4227: LD_VAR 0 5
4231: PUSH
4232: LD_VAR 0 6
4236: EQUAL
4237: PUSH
4238: LD_VAR 0 1
4242: PUSH
4243: LD_VAR 0 5
4247: ARRAY
4248: PPUSH
4249: CALL_OW 258
4253: PUSH
4254: LD_INT 2
4256: EQUAL
4257: AND
4258: IFFALSE 4280
// Say ( characters [ i ] , dialogFID ) ;
4260: LD_VAR 0 1
4264: PUSH
4265: LD_VAR 0 5
4269: ARRAY
4270: PPUSH
4271: LD_VAR 0 3
4275: PPUSH
4276: CALL_OW 88
// end ;
4280: GO 4171
4282: POP
4283: POP
// end ;
4284: LD_VAR 0 4
4288: RET
// export function PrepareDifficulty ; var tmp ; begin
4289: LD_INT 0
4291: PPUSH
4292: PPUSH
// if Difficulty = 1 then
4293: LD_OWVAR 67
4297: PUSH
4298: LD_INT 1
4300: EQUAL
4301: IFFALSE 4319
// begin RuSoldMinLevel = 0 ;
4303: LD_ADDR_EXP 16
4307: PUSH
4308: LD_INT 0
4310: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4311: LD_ADDR_EXP 17
4315: PUSH
4316: LD_INT 2
4318: ST_TO_ADDR
// end ; if Difficulty = 2 then
4319: LD_OWVAR 67
4323: PUSH
4324: LD_INT 2
4326: EQUAL
4327: IFFALSE 4435
// begin RuSoldMinLevel = 1 ;
4329: LD_ADDR_EXP 16
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// RuSoldMaxLevel = 2 ;
4337: LD_ADDR_EXP 17
4341: PUSH
4342: LD_INT 2
4344: ST_TO_ADDR
// RemoveUnit ( ambbrwr1 ) ;
4345: LD_INT 14
4347: PPUSH
4348: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4352: LD_INT 23
4354: PPUSH
4355: CALL_OW 64
// uc_nation = 3 ;
4359: LD_ADDR_OWVAR 21
4363: PUSH
4364: LD_INT 3
4366: ST_TO_ADDR
// uc_side = 3 ;
4367: LD_ADDR_OWVAR 20
4371: PUSH
4372: LD_INT 3
4374: ST_TO_ADDR
// bc_level = 5 ;
4375: LD_ADDR_OWVAR 43
4379: PUSH
4380: LD_INT 5
4382: ST_TO_ADDR
// bc_type = 32 ;
4383: LD_ADDR_OWVAR 42
4387: PUSH
4388: LD_INT 32
4390: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4391: LD_ADDR_VAR 0 2
4395: PUSH
4396: LD_INT 76
4398: PPUSH
4399: LD_INT 91
4401: PPUSH
4402: LD_INT 2
4404: PPUSH
4405: CALL_OW 47
4409: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4410: LD_VAR 0 2
4414: PPUSH
4415: LD_INT 43
4417: PPUSH
4418: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4422: LD_INT 51
4424: PPUSH
4425: LD_INT 3
4427: PPUSH
4428: LD_INT 1
4430: PPUSH
4431: CALL_OW 322
// end ; if Difficulty = 3 then
4435: LD_OWVAR 67
4439: PUSH
4440: LD_INT 3
4442: EQUAL
4443: IFFALSE 4619
// begin RuSoldMinLevel = 1 ;
4445: LD_ADDR_EXP 16
4449: PUSH
4450: LD_INT 1
4452: ST_TO_ADDR
// RuSoldMaxLevel = 3 ;
4453: LD_ADDR_EXP 17
4457: PUSH
4458: LD_INT 3
4460: ST_TO_ADDR
// RemoveUnit ( ambbrwr0 ) ;
4461: LD_INT 13
4463: PPUSH
4464: CALL_OW 64
// RemoveUnit ( ambbrwr1 ) ;
4468: LD_INT 14
4470: PPUSH
4471: CALL_OW 64
// RemoveUnit ( rubbrwr0 ) ;
4475: LD_INT 26
4477: PPUSH
4478: CALL_OW 64
// RemoveUnit ( rubbrwr1 ) ;
4482: LD_INT 23
4484: PPUSH
4485: CALL_OW 64
// uc_nation = 3 ;
4489: LD_ADDR_OWVAR 21
4493: PUSH
4494: LD_INT 3
4496: ST_TO_ADDR
// uc_side = 3 ;
4497: LD_ADDR_OWVAR 20
4501: PUSH
4502: LD_INT 3
4504: ST_TO_ADDR
// bc_level = 5 ;
4505: LD_ADDR_OWVAR 43
4509: PUSH
4510: LD_INT 5
4512: ST_TO_ADDR
// bc_type = 32 ;
4513: LD_ADDR_OWVAR 42
4517: PUSH
4518: LD_INT 32
4520: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 76 , 91 , 2 ) ;
4521: LD_ADDR_VAR 0 2
4525: PUSH
4526: LD_INT 76
4528: PPUSH
4529: LD_INT 91
4531: PPUSH
4532: LD_INT 2
4534: PPUSH
4535: CALL_OW 47
4539: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 44 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 44
4547: PPUSH
4548: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 83 , 84 , 2 ) ;
4552: LD_ADDR_VAR 0 2
4556: PUSH
4557: LD_INT 83
4559: PPUSH
4560: LD_INT 84
4562: PPUSH
4563: LD_INT 2
4565: PPUSH
4566: CALL_OW 47
4570: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 43 ) ;
4571: LD_VAR 0 2
4575: PPUSH
4576: LD_INT 43
4578: PPUSH
4579: CALL_OW 431
// SetTech ( 51 , 3 , state_enabled ) ;
4583: LD_INT 51
4585: PPUSH
4586: LD_INT 3
4588: PPUSH
4589: LD_INT 1
4591: PPUSH
4592: CALL_OW 322
// SetTech ( 52 , 3 , state_enabled ) ;
4596: LD_INT 52
4598: PPUSH
4599: LD_INT 3
4601: PPUSH
4602: LD_INT 1
4604: PPUSH
4605: CALL_OW 322
// PlaceWeaponTurret ( rubbunk0 , ru_gun ) ;
4609: LD_INT 25
4611: PPUSH
4612: LD_INT 44
4614: PPUSH
4615: CALL_OW 431
// end ; end ;
4619: LD_VAR 0 1
4623: RET
// export function EnergyDialog ; begin
4624: LD_INT 0
4626: PPUSH
// if GetTech ( 46 , 1 ) = state_enabled and GetTech ( 35 , 1 ) = state_enabled then
4627: LD_INT 46
4629: PPUSH
4630: LD_INT 1
4632: PPUSH
4633: CALL_OW 321
4637: PUSH
4638: LD_INT 1
4640: EQUAL
4641: PUSH
4642: LD_INT 35
4644: PPUSH
4645: LD_INT 1
4647: PPUSH
4648: CALL_OW 321
4652: PUSH
4653: LD_INT 1
4655: EQUAL
4656: AND
4657: IFFALSE 4681
// begin Say ( JMM , D9c-JMM-1 ) ;
4659: LD_EXP 1
4663: PPUSH
4664: LD_STRING D9c-JMM-1
4666: PPUSH
4667: CALL_OW 88
// energyVDialog = 1 ;
4671: LD_ADDR_EXP 33
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// end else
4679: GO 4835
// begin if GetTech ( 35 , 1 ) = state_researched and energyVDialog = 0 then
4681: LD_INT 35
4683: PPUSH
4684: LD_INT 1
4686: PPUSH
4687: CALL_OW 321
4691: PUSH
4692: LD_INT 2
4694: EQUAL
4695: PUSH
4696: LD_EXP 33
4700: PUSH
4701: LD_INT 0
4703: EQUAL
4704: AND
4705: IFFALSE 4727
// begin Say ( JMM , D9c-JMM-1a ) ;
4707: LD_EXP 1
4711: PPUSH
4712: LD_STRING D9c-JMM-1a
4714: PPUSH
4715: CALL_OW 88
// energyVDialog = 1 ;
4719: LD_ADDR_EXP 33
4723: PUSH
4724: LD_INT 1
4726: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and energyVDialog = 0 then
4727: LD_INT 46
4729: PPUSH
4730: LD_INT 1
4732: PPUSH
4733: CALL_OW 321
4737: PUSH
4738: LD_INT 2
4740: EQUAL
4741: PUSH
4742: LD_EXP 33
4746: PUSH
4747: LD_INT 0
4749: EQUAL
4750: AND
4751: IFFALSE 4773
// begin Say ( JMM , D9c-JMM-1b ) ;
4753: LD_EXP 1
4757: PPUSH
4758: LD_STRING D9c-JMM-1b
4760: PPUSH
4761: CALL_OW 88
// energyVDialog = 1 ;
4765: LD_ADDR_EXP 33
4769: PUSH
4770: LD_INT 1
4772: ST_TO_ADDR
// end ; if GetTech ( 46 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and energyVDialog = 0 then
4773: LD_INT 46
4775: PPUSH
4776: LD_INT 1
4778: PPUSH
4779: CALL_OW 321
4783: PUSH
4784: LD_INT 2
4786: EQUAL
4787: PUSH
4788: LD_INT 21
4790: PPUSH
4791: LD_INT 1
4793: PPUSH
4794: CALL_OW 321
4798: PUSH
4799: LD_INT 2
4801: EQUAL
4802: AND
4803: PUSH
4804: LD_EXP 33
4808: PUSH
4809: LD_INT 0
4811: EQUAL
4812: AND
4813: IFFALSE 4835
// begin Say ( JMM , D9c-JMM-1c ) ;
4815: LD_EXP 1
4819: PPUSH
4820: LD_STRING D9c-JMM-1c
4822: PPUSH
4823: CALL_OW 88
// energyVDialog = 1 ;
4827: LD_ADDR_EXP 33
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// end ; end ; end ;
4835: LD_VAR 0 1
4839: RET
// export function CutTreeInArea ( bulldozer , area ) ; var i , list , tmp , hex ; begin
4840: LD_INT 0
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
// if not bulldozer or GetLives ( bulldozer ) < 250 or ( HasTask ( bulldozer ) and GetFuel ( bulldozer ) > 20 ) then
4847: LD_VAR 0 1
4851: NOT
4852: PUSH
4853: LD_VAR 0 1
4857: PPUSH
4858: CALL_OW 256
4862: PUSH
4863: LD_INT 250
4865: LESS
4866: OR
4867: PUSH
4868: LD_VAR 0 1
4872: PPUSH
4873: CALL_OW 314
4877: PUSH
4878: LD_VAR 0 1
4882: PPUSH
4883: CALL_OW 261
4887: PUSH
4888: LD_INT 20
4890: GREATER
4891: AND
4892: OR
4893: IFFALSE 4897
// exit ;
4895: GO 5262
// if GetFuel ( bulldozer ) < 20 and not GetTag ( bulldozer ) = 21 then
4897: LD_VAR 0 1
4901: PPUSH
4902: CALL_OW 261
4906: PUSH
4907: LD_INT 20
4909: LESS
4910: PUSH
4911: LD_VAR 0 1
4915: PPUSH
4916: CALL_OW 110
4920: PUSH
4921: LD_INT 21
4923: EQUAL
4924: NOT
4925: AND
4926: IFFALSE 4953
// begin ComStop ( bulldozer ) ;
4928: LD_VAR 0 1
4932: PPUSH
4933: CALL_OW 141
// SetTag ( bulldozer , 21 ) ;
4937: LD_VAR 0 1
4941: PPUSH
4942: LD_INT 21
4944: PPUSH
4945: CALL_OW 109
// exit ;
4949: GO 5262
// end else
4951: GO 4980
// if GetFuel ( bulldozer ) > 20 then
4953: LD_VAR 0 1
4957: PPUSH
4958: CALL_OW 261
4962: PUSH
4963: LD_INT 20
4965: GREATER
4966: IFFALSE 4980
// SetTag ( bulldozer , 0 ) ;
4968: LD_VAR 0 1
4972: PPUSH
4973: LD_INT 0
4975: PPUSH
4976: CALL_OW 109
// list := ListEnvironmentArea ( area ) ;
4980: LD_ADDR_VAR 0 5
4984: PUSH
4985: LD_VAR 0 2
4989: PPUSH
4990: CALL_OW 353
4994: ST_TO_ADDR
// tmp := [ ] ;
4995: LD_ADDR_VAR 0 6
4999: PUSH
5000: EMPTY
5001: ST_TO_ADDR
// for i = 1 to list do
5002: LD_ADDR_VAR 0 4
5006: PUSH
5007: DOUBLE
5008: LD_INT 1
5010: DEC
5011: ST_TO_ADDR
5012: LD_VAR 0 5
5016: PUSH
5017: FOR_TO
5018: IFFALSE 5116
// if IsEnvironmentDestroyable ( list [ i ] [ 1 ] , list [ i ] [ 2 ] ) then
5020: LD_VAR 0 5
5024: PUSH
5025: LD_VAR 0 4
5029: ARRAY
5030: PUSH
5031: LD_INT 1
5033: ARRAY
5034: PPUSH
5035: LD_VAR 0 5
5039: PUSH
5040: LD_VAR 0 4
5044: ARRAY
5045: PUSH
5046: LD_INT 2
5048: ARRAY
5049: PPUSH
5050: CALL_OW 554
5054: IFFALSE 5114
// begin tmp := Replace ( tmp , tmp + 1 , [ list [ i ] [ 1 ] , list [ i ] [ 2 ] ] ) ;
5056: LD_ADDR_VAR 0 6
5060: PUSH
5061: LD_VAR 0 6
5065: PPUSH
5066: LD_VAR 0 6
5070: PUSH
5071: LD_INT 1
5073: PLUS
5074: PPUSH
5075: LD_VAR 0 5
5079: PUSH
5080: LD_VAR 0 4
5084: ARRAY
5085: PUSH
5086: LD_INT 1
5088: ARRAY
5089: PUSH
5090: LD_VAR 0 5
5094: PUSH
5095: LD_VAR 0 4
5099: ARRAY
5100: PUSH
5101: LD_INT 2
5103: ARRAY
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: PPUSH
5109: CALL_OW 1
5113: ST_TO_ADDR
// end ;
5114: GO 5017
5116: POP
5117: POP
// ComStop ( bulldozer ) ;
5118: LD_VAR 0 1
5122: PPUSH
5123: CALL_OW 141
// hex := [ GetX ( bulldozer ) , GetY ( bulldozer ) ] ;
5127: LD_ADDR_VAR 0 7
5131: PUSH
5132: LD_VAR 0 1
5136: PPUSH
5137: CALL_OW 250
5141: PUSH
5142: LD_VAR 0 1
5146: PPUSH
5147: CALL_OW 251
5151: PUSH
5152: EMPTY
5153: LIST
5154: LIST
5155: ST_TO_ADDR
// for i = tmp downto 1 do
5156: LD_ADDR_VAR 0 4
5160: PUSH
5161: DOUBLE
5162: LD_VAR 0 6
5166: INC
5167: ST_TO_ADDR
5168: LD_INT 1
5170: PUSH
5171: FOR_DOWNTO
5172: IFFALSE 5260
// begin hex := GetClosestPoint ( hex [ 1 ] , hex [ 2 ] , tmp ) ;
5174: LD_ADDR_VAR 0 7
5178: PUSH
5179: LD_VAR 0 7
5183: PUSH
5184: LD_INT 1
5186: ARRAY
5187: PPUSH
5188: LD_VAR 0 7
5192: PUSH
5193: LD_INT 2
5195: ARRAY
5196: PPUSH
5197: LD_VAR 0 6
5201: PPUSH
5202: CALL 5363 0 3
5206: ST_TO_ADDR
// AddComCutTreeOnHex ( bulldozer , hex [ 1 ] , hex [ 2 ] ) ;
5207: LD_VAR 0 1
5211: PPUSH
5212: LD_VAR 0 7
5216: PUSH
5217: LD_INT 1
5219: ARRAY
5220: PPUSH
5221: LD_VAR 0 7
5225: PUSH
5226: LD_INT 2
5228: ARRAY
5229: PPUSH
5230: CALL 5267 0 3
// tmp := Delete ( tmp , hex [ 3 ] ) ;
5234: LD_ADDR_VAR 0 6
5238: PUSH
5239: LD_VAR 0 6
5243: PPUSH
5244: LD_VAR 0 7
5248: PUSH
5249: LD_INT 3
5251: ARRAY
5252: PPUSH
5253: CALL_OW 3
5257: ST_TO_ADDR
// end ;
5258: GO 5171
5260: POP
5261: POP
// end ;
5262: LD_VAR 0 3
5266: RET
// export function AddComCutTreeOnHex ( bulldozer , x , y ) ; begin
5267: LD_INT 0
5269: PPUSH
// if IsEnvironment ( x , y ) and IsEnvironmentDestroyable ( x , y ) and ValidHex ( x , y ) and HexInfo ( x , y ) = - 1 then
5270: LD_VAR 0 2
5274: PPUSH
5275: LD_VAR 0 3
5279: PPUSH
5280: CALL_OW 351
5284: PUSH
5285: LD_VAR 0 2
5289: PPUSH
5290: LD_VAR 0 3
5294: PPUSH
5295: CALL_OW 554
5299: AND
5300: PUSH
5301: LD_VAR 0 2
5305: PPUSH
5306: LD_VAR 0 3
5310: PPUSH
5311: CALL_OW 488
5315: AND
5316: PUSH
5317: LD_VAR 0 2
5321: PPUSH
5322: LD_VAR 0 3
5326: PPUSH
5327: CALL_OW 428
5331: PUSH
5332: LD_INT 1
5334: NEG
5335: EQUAL
5336: AND
5337: IFFALSE 5358
// AddComMoveXY ( bulldozer , x , y ) ;
5339: LD_VAR 0 1
5343: PPUSH
5344: LD_VAR 0 2
5348: PPUSH
5349: LD_VAR 0 3
5353: PPUSH
5354: CALL_OW 171
// end ;
5358: LD_VAR 0 4
5362: RET
// export function GetClosestPoint ( x , y , list ) ; var i , dist , d , _x , _y , _i ; begin
5363: LD_INT 0
5365: PPUSH
5366: PPUSH
5367: PPUSH
5368: PPUSH
5369: PPUSH
5370: PPUSH
5371: PPUSH
// dist := 99999 ;
5372: LD_ADDR_VAR 0 6
5376: PUSH
5377: LD_INT 99999
5379: ST_TO_ADDR
// for i = 1 to list do
5380: LD_ADDR_VAR 0 5
5384: PUSH
5385: DOUBLE
5386: LD_INT 1
5388: DEC
5389: ST_TO_ADDR
5390: LD_VAR 0 3
5394: PUSH
5395: FOR_TO
5396: IFFALSE 5534
// begin d := GetDistXY ( x , y , list [ i ] [ 1 ] , list [ i ] [ 2 ] ) ;
5398: LD_ADDR_VAR 0 7
5402: PUSH
5403: LD_VAR 0 1
5407: PPUSH
5408: LD_VAR 0 2
5412: PPUSH
5413: LD_VAR 0 3
5417: PUSH
5418: LD_VAR 0 5
5422: ARRAY
5423: PUSH
5424: LD_INT 1
5426: ARRAY
5427: PPUSH
5428: LD_VAR 0 3
5432: PUSH
5433: LD_VAR 0 5
5437: ARRAY
5438: PUSH
5439: LD_INT 2
5441: ARRAY
5442: PPUSH
5443: CALL_OW 298
5447: ST_TO_ADDR
// if d = 0 then
5448: LD_VAR 0 7
5452: PUSH
5453: LD_INT 0
5455: EQUAL
5456: IFFALSE 5460
// continue ;
5458: GO 5395
// if d < dist then
5460: LD_VAR 0 7
5464: PUSH
5465: LD_VAR 0 6
5469: LESS
5470: IFFALSE 5532
// begin _x := list [ i ] [ 1 ] ;
5472: LD_ADDR_VAR 0 8
5476: PUSH
5477: LD_VAR 0 3
5481: PUSH
5482: LD_VAR 0 5
5486: ARRAY
5487: PUSH
5488: LD_INT 1
5490: ARRAY
5491: ST_TO_ADDR
// _y := list [ i ] [ 2 ] ;
5492: LD_ADDR_VAR 0 9
5496: PUSH
5497: LD_VAR 0 3
5501: PUSH
5502: LD_VAR 0 5
5506: ARRAY
5507: PUSH
5508: LD_INT 2
5510: ARRAY
5511: ST_TO_ADDR
// _i := i ;
5512: LD_ADDR_VAR 0 10
5516: PUSH
5517: LD_VAR 0 5
5521: ST_TO_ADDR
// dist := d ;
5522: LD_ADDR_VAR 0 6
5526: PUSH
5527: LD_VAR 0 7
5531: ST_TO_ADDR
// end ; end ;
5532: GO 5395
5534: POP
5535: POP
// result := [ _x , _y , _i , dist ] ;
5536: LD_ADDR_VAR 0 4
5540: PUSH
5541: LD_VAR 0 8
5545: PUSH
5546: LD_VAR 0 9
5550: PUSH
5551: LD_VAR 0 10
5555: PUSH
5556: LD_VAR 0 6
5560: PUSH
5561: EMPTY
5562: LIST
5563: LIST
5564: LIST
5565: LIST
5566: ST_TO_ADDR
// end ;
5567: LD_VAR 0 4
5571: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
5572: LD_INT 0
5574: PPUSH
5575: PPUSH
5576: PPUSH
5577: PPUSH
// for i = 1 to 72 do
5578: LD_ADDR_VAR 0 5
5582: PUSH
5583: DOUBLE
5584: LD_INT 1
5586: DEC
5587: ST_TO_ADDR
5588: LD_INT 72
5590: PUSH
5591: FOR_TO
5592: IFFALSE 5650
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
5594: LD_VAR 0 5
5598: PPUSH
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 321
5608: PUSH
5609: LD_INT 1
5611: EQUAL
5612: PUSH
5613: LD_VAR 0 5
5617: PPUSH
5618: LD_VAR 0 3
5622: PPUSH
5623: CALL_OW 482
5627: PUSH
5628: LD_INT 1
5630: EQUAL
5631: AND
5632: IFFALSE 5648
// AddComResearch ( lab , i ) ;
5634: LD_VAR 0 2
5638: PPUSH
5639: LD_VAR 0 5
5643: PPUSH
5644: CALL_OW 184
5648: GO 5591
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 4
5656: RET
// export function RepairBuilding ( side , building , area ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
5657: LD_INT 0
5659: PPUSH
5660: PPUSH
5661: PPUSH
5662: PPUSH
5663: PPUSH
5664: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
5665: LD_ADDR_VAR 0 7
5669: PUSH
5670: LD_VAR 0 2
5674: PPUSH
5675: CALL_OW 313
5679: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
5680: LD_ADDR_VAR 0 8
5684: PUSH
5685: LD_VAR 0 3
5689: PPUSH
5690: LD_INT 22
5692: PUSH
5693: LD_VAR 0 1
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: PUSH
5702: LD_INT 25
5704: PUSH
5705: LD_INT 2
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: PUSH
5712: LD_INT 24
5714: PUSH
5715: LD_INT 750
5717: PUSH
5718: EMPTY
5719: LIST
5720: LIST
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: LD_INT 54
5727: PUSH
5728: EMPTY
5729: LIST
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PPUSH
5741: CALL_OW 70
5745: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
5746: LD_ADDR_VAR 0 5
5750: PUSH
5751: LD_VAR 0 3
5755: PPUSH
5756: LD_INT 22
5758: PUSH
5759: LD_VAR 0 1
5763: PUSH
5764: EMPTY
5765: LIST
5766: LIST
5767: PUSH
5768: LD_INT 21
5770: PUSH
5771: LD_INT 3
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PUSH
5778: LD_INT 3
5780: PUSH
5781: LD_INT 24
5783: PUSH
5784: LD_INT 1000
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: PUSH
5795: EMPTY
5796: LIST
5797: LIST
5798: LIST
5799: PUSH
5800: EMPTY
5801: LIST
5802: PPUSH
5803: CALL_OW 70
5807: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
5808: LD_VAR 0 5
5812: NOT
5813: PUSH
5814: LD_INT 22
5816: PUSH
5817: LD_VAR 0 1
5821: PUSH
5822: EMPTY
5823: LIST
5824: LIST
5825: PUSH
5826: LD_INT 25
5828: PUSH
5829: LD_INT 2
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PUSH
5836: LD_INT 24
5838: PUSH
5839: LD_INT 250
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: PUSH
5846: EMPTY
5847: LIST
5848: LIST
5849: LIST
5850: PPUSH
5851: CALL_OW 69
5855: NOT
5856: AND
5857: IFFALSE 5861
// exit ;
5859: GO 5973
// if buildings_list > 0 and engineerOkInside then
5861: LD_VAR 0 5
5865: PUSH
5866: LD_INT 0
5868: GREATER
5869: PUSH
5870: LD_VAR 0 7
5874: AND
5875: IFFALSE 5901
// ComExitBuilding ( UnitFilter ( engineerOkInside , [ f_class , 2 ] ) ) ;
5877: LD_VAR 0 7
5881: PPUSH
5882: LD_INT 25
5884: PUSH
5885: LD_INT 2
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PPUSH
5892: CALL_OW 72
5896: PPUSH
5897: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
5901: LD_VAR 0 5
5905: PUSH
5906: LD_INT 0
5908: GREATER
5909: PUSH
5910: LD_VAR 0 8
5914: PUSH
5915: LD_INT 0
5917: GREATER
5918: AND
5919: IFFALSE 5939
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
5921: LD_VAR 0 8
5925: PPUSH
5926: LD_VAR 0 5
5930: PUSH
5931: LD_INT 1
5933: ARRAY
5934: PPUSH
5935: CALL_OW 130
// if buildings_list = 0 and engineerOkOutside > 0 then
5939: LD_VAR 0 5
5943: PUSH
5944: LD_INT 0
5946: EQUAL
5947: PUSH
5948: LD_VAR 0 8
5952: PUSH
5953: LD_INT 0
5955: GREATER
5956: AND
5957: IFFALSE 5973
// ComEnterUnit ( engineerOkOutside , building ) ;
5959: LD_VAR 0 8
5963: PPUSH
5964: LD_VAR 0 2
5968: PPUSH
5969: CALL_OW 120
// end ;
5973: LD_VAR 0 4
5977: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
5978: LD_INT 0
5980: PPUSH
5981: PPUSH
5982: PPUSH
5983: PPUSH
5984: PPUSH
5985: PPUSH
5986: PPUSH
5987: PPUSH
5988: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_nation , 2 ] , [ f_lives , 251 ] ] ) ;
5989: LD_ADDR_VAR 0 6
5993: PUSH
5994: LD_INT 22
5996: PUSH
5997: LD_VAR 0 1
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 25
6008: PUSH
6009: LD_INT 4
6011: PUSH
6012: EMPTY
6013: LIST
6014: LIST
6015: PUSH
6016: LD_INT 23
6018: PUSH
6019: LD_INT 2
6021: PUSH
6022: EMPTY
6023: LIST
6024: LIST
6025: PUSH
6026: LD_INT 24
6028: PUSH
6029: LD_INT 251
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PUSH
6036: EMPTY
6037: LIST
6038: LIST
6039: LIST
6040: LIST
6041: PPUSH
6042: CALL_OW 69
6046: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_nation , 2 ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
6047: LD_ADDR_VAR 0 7
6051: PUSH
6052: LD_VAR 0 3
6056: PPUSH
6057: LD_INT 22
6059: PUSH
6060: LD_VAR 0 1
6064: PUSH
6065: EMPTY
6066: LIST
6067: LIST
6068: PUSH
6069: LD_INT 23
6071: PUSH
6072: LD_INT 2
6074: PUSH
6075: EMPTY
6076: LIST
6077: LIST
6078: PUSH
6079: LD_INT 25
6081: PUSH
6082: LD_INT 4
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: PUSH
6089: LD_INT 50
6091: PUSH
6092: EMPTY
6093: LIST
6094: PUSH
6095: EMPTY
6096: LIST
6097: LIST
6098: LIST
6099: LIST
6100: PPUSH
6101: CALL_OW 70
6105: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
6106: LD_ADDR_VAR 0 10
6110: PUSH
6111: LD_VAR 0 3
6115: PPUSH
6116: LD_INT 22
6118: PUSH
6119: LD_VAR 0 1
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: PUSH
6128: LD_INT 21
6130: PUSH
6131: LD_INT 1
6133: PUSH
6134: EMPTY
6135: LIST
6136: LIST
6137: PUSH
6138: LD_INT 3
6140: PUSH
6141: LD_INT 25
6143: PUSH
6144: LD_INT 3
6146: PUSH
6147: EMPTY
6148: LIST
6149: LIST
6150: PUSH
6151: EMPTY
6152: LIST
6153: LIST
6154: PUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 24
6160: PUSH
6161: LD_INT 750
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: LIST
6176: LIST
6177: PPUSH
6178: CALL_OW 70
6182: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
6183: LD_ADDR_VAR 0 11
6187: PUSH
6188: LD_VAR 0 2
6192: PPUSH
6193: LD_INT 22
6195: PUSH
6196: LD_VAR 0 1
6200: PUSH
6201: EMPTY
6202: LIST
6203: LIST
6204: PUSH
6205: LD_INT 21
6207: PUSH
6208: LD_INT 1
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: LD_INT 25
6220: PUSH
6221: LD_INT 3
6223: PUSH
6224: EMPTY
6225: LIST
6226: LIST
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 3
6234: PUSH
6235: LD_INT 24
6237: PUSH
6238: LD_INT 1000
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PPUSH
6255: CALL_OW 70
6259: ST_TO_ADDR
// if not damageUnits and not unitsToHeal and not sci_list then
6260: LD_VAR 0 10
6264: NOT
6265: PUSH
6266: LD_VAR 0 11
6270: NOT
6271: AND
6272: PUSH
6273: LD_VAR 0 6
6277: NOT
6278: AND
6279: IFFALSE 6283
// exit ;
6281: GO 6517
// if damageUnits > 0 and sci_list > 0 then
6283: LD_VAR 0 10
6287: PUSH
6288: LD_INT 0
6290: GREATER
6291: PUSH
6292: LD_VAR 0 6
6296: PUSH
6297: LD_INT 0
6299: GREATER
6300: AND
6301: IFFALSE 6317
// ComMoveToArea ( damageUnits , healArea ) ;
6303: LD_VAR 0 10
6307: PPUSH
6308: LD_VAR 0 2
6312: PPUSH
6313: CALL_OW 113
// if unitsToHeal > 0 and sci_list > 0 then
6317: LD_VAR 0 11
6321: PUSH
6322: LD_INT 0
6324: GREATER
6325: PUSH
6326: LD_VAR 0 6
6330: PUSH
6331: LD_INT 0
6333: GREATER
6334: AND
6335: IFFALSE 6346
// ComExitBuilding ( sci_list ) ;
6337: LD_VAR 0 6
6341: PPUSH
6342: CALL_OW 122
// if unitsToHeal > 0 and sci_listOutside > 0 then
6346: LD_VAR 0 11
6350: PUSH
6351: LD_INT 0
6353: GREATER
6354: PUSH
6355: LD_VAR 0 7
6359: PUSH
6360: LD_INT 0
6362: GREATER
6363: AND
6364: IFFALSE 6384
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
6366: LD_VAR 0 7
6370: PPUSH
6371: LD_VAR 0 11
6375: PUSH
6376: LD_INT 1
6378: ARRAY
6379: PPUSH
6380: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
6384: LD_VAR 0 10
6388: PUSH
6389: LD_INT 0
6391: EQUAL
6392: PUSH
6393: LD_VAR 0 11
6397: PUSH
6398: LD_INT 0
6400: EQUAL
6401: AND
6402: PUSH
6403: LD_VAR 0 7
6407: PUSH
6408: LD_INT 0
6410: GREATER
6411: AND
6412: IFFALSE 6517
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
6414: LD_ADDR_VAR 0 12
6418: PUSH
6419: LD_INT 22
6421: PUSH
6422: LD_VAR 0 1
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: LD_INT 21
6433: PUSH
6434: LD_INT 3
6436: PUSH
6437: EMPTY
6438: LIST
6439: LIST
6440: PUSH
6441: LD_INT 30
6443: PUSH
6444: LD_INT 8
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: PUSH
6451: EMPTY
6452: LIST
6453: LIST
6454: LIST
6455: PPUSH
6456: CALL_OW 69
6460: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
6461: LD_ADDR_VAR 0 13
6465: PUSH
6466: LD_INT 1
6468: PPUSH
6469: LD_VAR 0 12
6473: PPUSH
6474: CALL_OW 12
6478: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
6479: LD_VAR 0 7
6483: PPUSH
6484: LD_INT 3
6486: PUSH
6487: LD_INT 60
6489: PUSH
6490: EMPTY
6491: LIST
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: PPUSH
6497: CALL_OW 72
6501: PPUSH
6502: LD_VAR 0 12
6506: PUSH
6507: LD_VAR 0 13
6511: ARRAY
6512: PPUSH
6513: CALL_OW 120
// end ; end ;
6517: LD_VAR 0 5
6521: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
6522: LD_INT 0
6524: PPUSH
6525: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
6526: LD_INT 22
6528: PUSH
6529: LD_VAR 0 1
6533: PUSH
6534: EMPTY
6535: LIST
6536: LIST
6537: PUSH
6538: LD_INT 21
6540: PUSH
6541: LD_INT 2
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: PUSH
6548: EMPTY
6549: LIST
6550: LIST
6551: PPUSH
6552: CALL_OW 69
6556: PUSH
6557: LD_VAR 0 3
6561: LESSEQUAL
6562: IFFALSE 6629
// for i = 1 to vehCount do
6564: LD_ADDR_VAR 0 9
6568: PUSH
6569: DOUBLE
6570: LD_INT 1
6572: DEC
6573: ST_TO_ADDR
6574: LD_VAR 0 3
6578: PUSH
6579: FOR_TO
6580: IFFALSE 6627
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
6582: LD_VAR 0 2
6586: PPUSH
6587: LD_VAR 0 7
6591: PPUSH
6592: LD_VAR 0 5
6596: PPUSH
6597: LD_VAR 0 6
6601: PPUSH
6602: LD_VAR 0 4
6606: PUSH
6607: LD_INT 1
6609: PPUSH
6610: LD_VAR 0 4
6614: PPUSH
6615: CALL_OW 12
6619: ARRAY
6620: PPUSH
6621: CALL_OW 185
6625: GO 6579
6627: POP
6628: POP
// end ;
6629: LD_VAR 0 8
6633: RET
// export function AttackVehicles ( side , meetArea , wayX , wayY ) ; var i , j , vehiclesOK , target1 , target2 , seeEnemy ; begin
6634: LD_INT 0
6636: PPUSH
6637: PPUSH
6638: PPUSH
6639: PPUSH
6640: PPUSH
6641: PPUSH
6642: PPUSH
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6643: LD_ADDR_VAR 0 8
6647: PUSH
6648: LD_INT 22
6650: PUSH
6651: LD_VAR 0 1
6655: PUSH
6656: EMPTY
6657: LIST
6658: LIST
6659: PUSH
6660: LD_INT 21
6662: PUSH
6663: LD_INT 2
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 24
6672: PUSH
6673: LD_INT 650
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: LIST
6684: PPUSH
6685: CALL_OW 69
6689: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) >= [ 3 , 4 , 5 ] [ Difficulty ] then
6690: LD_INT 22
6692: PUSH
6693: LD_VAR 0 1
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 21
6704: PUSH
6705: LD_INT 2
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 24
6714: PUSH
6715: LD_INT 1000
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: PPUSH
6727: CALL_OW 69
6731: PUSH
6732: LD_INT 3
6734: PUSH
6735: LD_INT 4
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: LIST
6745: PUSH
6746: LD_OWVAR 67
6750: ARRAY
6751: GREATEREQUAL
6752: IFFALSE 7209
// repeat wait ( 0 0$1 ) ;
6754: LD_INT 35
6756: PPUSH
6757: CALL_OW 67
// vehiclesOK = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
6761: LD_ADDR_VAR 0 8
6765: PUSH
6766: LD_INT 22
6768: PUSH
6769: LD_VAR 0 1
6773: PUSH
6774: EMPTY
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 21
6780: PUSH
6781: LD_INT 2
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PUSH
6788: LD_INT 24
6790: PUSH
6791: LD_INT 650
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: EMPTY
6799: LIST
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) and seeEnemy = 0 then
6808: LD_INT 22
6810: PUSH
6811: LD_VAR 0 1
6815: PUSH
6816: EMPTY
6817: LIST
6818: LIST
6819: PUSH
6820: LD_INT 95
6822: PUSH
6823: LD_VAR 0 2
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: NOT
6841: PUSH
6842: LD_VAR 0 11
6846: PUSH
6847: LD_INT 0
6849: EQUAL
6850: AND
6851: IFFALSE 6906
// for i := 1 to wayX do
6853: LD_ADDR_VAR 0 6
6857: PUSH
6858: DOUBLE
6859: LD_INT 1
6861: DEC
6862: ST_TO_ADDR
6863: LD_VAR 0 3
6867: PUSH
6868: FOR_TO
6869: IFFALSE 6904
// AddComAgressiveMove ( vehiclesOK , wayX [ i ] , wayY [ i ] ) ;
6871: LD_VAR 0 8
6875: PPUSH
6876: LD_VAR 0 3
6880: PUSH
6881: LD_VAR 0 6
6885: ARRAY
6886: PPUSH
6887: LD_VAR 0 4
6891: PUSH
6892: LD_VAR 0 6
6896: ARRAY
6897: PPUSH
6898: CALL_OW 174
6902: GO 6868
6904: POP
6905: POP
// if FilterAllUnits ( [ [ f_side , side ] , [ f_inarea , meetArea ] ] ) then
6906: LD_INT 22
6908: PUSH
6909: LD_VAR 0 1
6913: PUSH
6914: EMPTY
6915: LIST
6916: LIST
6917: PUSH
6918: LD_INT 95
6920: PUSH
6921: LD_VAR 0 2
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: PPUSH
6934: CALL_OW 69
6938: IFFALSE 7162
// begin seeEnemy = 1 ;
6940: LD_ADDR_VAR 0 11
6944: PUSH
6945: LD_INT 1
6947: ST_TO_ADDR
// for j in vehiclesOK do
6948: LD_ADDR_VAR 0 7
6952: PUSH
6953: LD_VAR 0 8
6957: PUSH
6958: FOR_IN
6959: IFFALSE 7160
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
6961: LD_ADDR_VAR 0 9
6965: PUSH
6966: LD_INT 81
6968: PUSH
6969: LD_VAR 0 1
6973: PUSH
6974: EMPTY
6975: LIST
6976: LIST
6977: PUSH
6978: LD_INT 101
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PPUSH
6992: CALL_OW 69
6996: PPUSH
6997: LD_VAR 0 7
7001: PPUSH
7002: CALL_OW 74
7006: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
7007: LD_ADDR_VAR 0 10
7011: PUSH
7012: LD_INT 81
7014: PUSH
7015: LD_VAR 0 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 101
7026: PUSH
7027: LD_INT 1
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: PUSH
7034: LD_INT 2
7036: PUSH
7037: LD_INT 59
7039: PUSH
7040: EMPTY
7041: LIST
7042: PUSH
7043: LD_INT 21
7045: PUSH
7046: LD_INT 1
7048: PUSH
7049: EMPTY
7050: LIST
7051: LIST
7052: PUSH
7053: LD_INT 21
7055: PUSH
7056: LD_INT 2
7058: PUSH
7059: EMPTY
7060: LIST
7061: LIST
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: LIST
7073: PUSH
7074: EMPTY
7075: LIST
7076: PPUSH
7077: CALL_OW 69
7081: PPUSH
7082: LD_VAR 0 7
7086: PPUSH
7087: CALL_OW 74
7091: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
7092: LD_VAR 0 7
7096: PPUSH
7097: LD_VAR 0 9
7101: PPUSH
7102: CALL_OW 296
7106: PUSH
7107: LD_INT 8
7109: PLUS
7110: PUSH
7111: LD_VAR 0 7
7115: PPUSH
7116: LD_VAR 0 10
7120: PPUSH
7121: CALL_OW 296
7125: LESS
7126: IFFALSE 7144
// ComAttackUnit ( j , target1 ) else
7128: LD_VAR 0 7
7132: PPUSH
7133: LD_VAR 0 9
7137: PPUSH
7138: CALL_OW 115
7142: GO 7158
// ComAttackUnit ( j , target2 ) ;
7144: LD_VAR 0 7
7148: PPUSH
7149: LD_VAR 0 10
7153: PPUSH
7154: CALL_OW 115
// end ;
7158: GO 6958
7160: POP
7161: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 1000 ] ] ) = 0 ;
7162: LD_INT 22
7164: PUSH
7165: LD_VAR 0 1
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 21
7176: PUSH
7177: LD_INT 2
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 24
7186: PUSH
7187: LD_INT 1000
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: LIST
7198: PPUSH
7199: CALL_OW 69
7203: PUSH
7204: LD_INT 0
7206: EQUAL
7207: IFFALSE 6754
// seeEnemy = 0 ;
7209: LD_ADDR_VAR 0 11
7213: PUSH
7214: LD_INT 0
7216: ST_TO_ADDR
// end ;
7217: LD_VAR 0 5
7221: RET
// export function RepairVehicles ( side , area , repX , repY ) ; var i , j , damageVehicles ; begin
7222: LD_INT 0
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
// damageVehicles = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 650 ] ] ] ) ;
7228: LD_ADDR_VAR 0 8
7232: PUSH
7233: LD_INT 22
7235: PUSH
7236: LD_VAR 0 1
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: LD_INT 21
7247: PUSH
7248: LD_INT 2
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 3
7257: PUSH
7258: LD_INT 24
7260: PUSH
7261: LD_INT 650
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: PUSH
7268: EMPTY
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: ST_TO_ADDR
// if damageVehicles > 0 then
7282: LD_VAR 0 8
7286: PUSH
7287: LD_INT 0
7289: GREATER
7290: IFFALSE 7311
// ComMoveXY ( damageVehicles , repX , repY ) ;
7292: LD_VAR 0 8
7296: PPUSH
7297: LD_VAR 0 3
7301: PPUSH
7302: LD_VAR 0 4
7306: PPUSH
7307: CALL_OW 111
// if UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) > 0 then
7311: LD_VAR 0 8
7315: PPUSH
7316: LD_INT 95
7318: PUSH
7319: LD_VAR 0 2
7323: PUSH
7324: EMPTY
7325: LIST
7326: LIST
7327: PUSH
7328: LD_INT 3
7330: PUSH
7331: LD_INT 58
7333: PUSH
7334: EMPTY
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PPUSH
7345: CALL_OW 72
7349: PUSH
7350: LD_INT 0
7352: GREATER
7353: IFFALSE 7420
// for i in UnitFilter ( damageVehicles , [ [ f_inarea , area ] , [ f_not , [ f_empty ] ] ] ) do
7355: LD_ADDR_VAR 0 6
7359: PUSH
7360: LD_VAR 0 8
7364: PPUSH
7365: LD_INT 95
7367: PUSH
7368: LD_VAR 0 2
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: LD_INT 3
7379: PUSH
7380: LD_INT 58
7382: PUSH
7383: EMPTY
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PPUSH
7394: CALL_OW 72
7398: PUSH
7399: FOR_IN
7400: IFFALSE 7418
// ComExitVehicle ( UnitsInside ( i ) ) ;
7402: LD_VAR 0 6
7406: PPUSH
7407: CALL_OW 313
7411: PPUSH
7412: CALL_OW 121
7416: GO 7399
7418: POP
7419: POP
// end ;
7420: LD_VAR 0 5
7424: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide , strategy ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
7425: LD_INT 0
7427: PPUSH
7428: PPUSH
7429: PPUSH
7430: PPUSH
7431: PPUSH
7432: PPUSH
7433: PPUSH
7434: PPUSH
7435: PPUSH
7436: PPUSH
7437: PPUSH
// for i = 1 to medicCount do
7438: LD_ADDR_VAR 0 14
7442: PUSH
7443: DOUBLE
7444: LD_INT 1
7446: DEC
7447: ST_TO_ADDR
7448: LD_VAR 0 7
7452: PUSH
7453: FOR_TO
7454: IFFALSE 7536
// begin uc_side = side ;
7456: LD_ADDR_OWVAR 20
7460: PUSH
7461: LD_VAR 0 1
7465: ST_TO_ADDR
// uc_nation = nation ;
7466: LD_ADDR_OWVAR 21
7470: PUSH
7471: LD_VAR 0 2
7475: ST_TO_ADDR
// hc_name =  ;
7476: LD_ADDR_OWVAR 26
7480: PUSH
7481: LD_STRING 
7483: ST_TO_ADDR
// hc_gallery =  ;
7484: LD_ADDR_OWVAR 33
7488: PUSH
7489: LD_STRING 
7491: ST_TO_ADDR
// PrepareHuman ( false , 4 , skil ) ;
7492: LD_INT 0
7494: PPUSH
7495: LD_INT 4
7497: PPUSH
7498: LD_VAR 0 8
7502: PPUSH
7503: CALL_OW 380
// un = CreateHuman ;
7507: LD_ADDR_VAR 0 16
7511: PUSH
7512: CALL_OW 44
7516: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7517: LD_VAR 0 16
7521: PPUSH
7522: LD_VAR 0 9
7526: PPUSH
7527: LD_INT 0
7529: PPUSH
7530: CALL_OW 49
// end ;
7534: GO 7453
7536: POP
7537: POP
// for i = 1 to soldierCount do
7538: LD_ADDR_VAR 0 14
7542: PUSH
7543: DOUBLE
7544: LD_INT 1
7546: DEC
7547: ST_TO_ADDR
7548: LD_VAR 0 3
7552: PUSH
7553: FOR_TO
7554: IFFALSE 7636
// begin uc_side = side ;
7556: LD_ADDR_OWVAR 20
7560: PUSH
7561: LD_VAR 0 1
7565: ST_TO_ADDR
// uc_nation = nation ;
7566: LD_ADDR_OWVAR 21
7570: PUSH
7571: LD_VAR 0 2
7575: ST_TO_ADDR
// hc_name =  ;
7576: LD_ADDR_OWVAR 26
7580: PUSH
7581: LD_STRING 
7583: ST_TO_ADDR
// hc_gallery =  ;
7584: LD_ADDR_OWVAR 33
7588: PUSH
7589: LD_STRING 
7591: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
7592: LD_INT 0
7594: PPUSH
7595: LD_INT 1
7597: PPUSH
7598: LD_VAR 0 8
7602: PPUSH
7603: CALL_OW 380
// un = CreateHuman ;
7607: LD_ADDR_VAR 0 16
7611: PUSH
7612: CALL_OW 44
7616: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7617: LD_VAR 0 16
7621: PPUSH
7622: LD_VAR 0 9
7626: PPUSH
7627: LD_INT 0
7629: PPUSH
7630: CALL_OW 49
// end ;
7634: GO 7553
7636: POP
7637: POP
// for i = 1 to sniperCount do
7638: LD_ADDR_VAR 0 14
7642: PUSH
7643: DOUBLE
7644: LD_INT 1
7646: DEC
7647: ST_TO_ADDR
7648: LD_VAR 0 4
7652: PUSH
7653: FOR_TO
7654: IFFALSE 7736
// begin uc_side = side ;
7656: LD_ADDR_OWVAR 20
7660: PUSH
7661: LD_VAR 0 1
7665: ST_TO_ADDR
// uc_nation = nation ;
7666: LD_ADDR_OWVAR 21
7670: PUSH
7671: LD_VAR 0 2
7675: ST_TO_ADDR
// hc_name =  ;
7676: LD_ADDR_OWVAR 26
7680: PUSH
7681: LD_STRING 
7683: ST_TO_ADDR
// hc_gallery =  ;
7684: LD_ADDR_OWVAR 33
7688: PUSH
7689: LD_STRING 
7691: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
7692: LD_INT 0
7694: PPUSH
7695: LD_INT 5
7697: PPUSH
7698: LD_VAR 0 8
7702: PPUSH
7703: CALL_OW 380
// un = CreateHuman ;
7707: LD_ADDR_VAR 0 16
7711: PUSH
7712: CALL_OW 44
7716: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7717: LD_VAR 0 16
7721: PPUSH
7722: LD_VAR 0 9
7726: PPUSH
7727: LD_INT 0
7729: PPUSH
7730: CALL_OW 49
// end ;
7734: GO 7653
7736: POP
7737: POP
// for i = 1 to bazookCount do
7738: LD_ADDR_VAR 0 14
7742: PUSH
7743: DOUBLE
7744: LD_INT 1
7746: DEC
7747: ST_TO_ADDR
7748: LD_VAR 0 5
7752: PUSH
7753: FOR_TO
7754: IFFALSE 7836
// begin uc_side = side ;
7756: LD_ADDR_OWVAR 20
7760: PUSH
7761: LD_VAR 0 1
7765: ST_TO_ADDR
// uc_nation = nation ;
7766: LD_ADDR_OWVAR 21
7770: PUSH
7771: LD_VAR 0 2
7775: ST_TO_ADDR
// hc_name =  ;
7776: LD_ADDR_OWVAR 26
7780: PUSH
7781: LD_STRING 
7783: ST_TO_ADDR
// hc_gallery =  ;
7784: LD_ADDR_OWVAR 33
7788: PUSH
7789: LD_STRING 
7791: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
7792: LD_INT 0
7794: PPUSH
7795: LD_INT 9
7797: PPUSH
7798: LD_VAR 0 8
7802: PPUSH
7803: CALL_OW 380
// un = CreateHuman ;
7807: LD_ADDR_VAR 0 16
7811: PUSH
7812: CALL_OW 44
7816: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7817: LD_VAR 0 16
7821: PPUSH
7822: LD_VAR 0 9
7826: PPUSH
7827: LD_INT 0
7829: PPUSH
7830: CALL_OW 49
// end ;
7834: GO 7753
7836: POP
7837: POP
// for i = 1 to mortalCount do
7838: LD_ADDR_VAR 0 14
7842: PUSH
7843: DOUBLE
7844: LD_INT 1
7846: DEC
7847: ST_TO_ADDR
7848: LD_VAR 0 6
7852: PUSH
7853: FOR_TO
7854: IFFALSE 7936
// begin uc_side = side ;
7856: LD_ADDR_OWVAR 20
7860: PUSH
7861: LD_VAR 0 1
7865: ST_TO_ADDR
// uc_nation = nation ;
7866: LD_ADDR_OWVAR 21
7870: PUSH
7871: LD_VAR 0 2
7875: ST_TO_ADDR
// hc_name =  ;
7876: LD_ADDR_OWVAR 26
7880: PUSH
7881: LD_STRING 
7883: ST_TO_ADDR
// hc_gallery =  ;
7884: LD_ADDR_OWVAR 33
7888: PUSH
7889: LD_STRING 
7891: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
7892: LD_INT 0
7894: PPUSH
7895: LD_INT 8
7897: PPUSH
7898: LD_VAR 0 8
7902: PPUSH
7903: CALL_OW 380
// un = CreateHuman ;
7907: LD_ADDR_VAR 0 16
7911: PUSH
7912: CALL_OW 44
7916: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
7917: LD_VAR 0 16
7921: PPUSH
7922: LD_VAR 0 9
7926: PPUSH
7927: LD_INT 0
7929: PPUSH
7930: CALL_OW 49
// end ;
7934: GO 7853
7936: POP
7937: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
7938: LD_ADDR_VAR 0 19
7942: PUSH
7943: LD_INT 22
7945: PUSH
7946: LD_VAR 0 1
7950: PUSH
7951: EMPTY
7952: LIST
7953: LIST
7954: PUSH
7955: LD_INT 2
7957: PUSH
7958: LD_INT 25
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 25
7970: PUSH
7971: LD_INT 5
7973: PUSH
7974: EMPTY
7975: LIST
7976: LIST
7977: PUSH
7978: LD_INT 25
7980: PUSH
7981: LD_INT 8
7983: PUSH
7984: EMPTY
7985: LIST
7986: LIST
7987: PUSH
7988: LD_INT 25
7990: PUSH
7991: LD_INT 9
7993: PUSH
7994: EMPTY
7995: LIST
7996: LIST
7997: PUSH
7998: EMPTY
7999: LIST
8000: LIST
8001: LIST
8002: LIST
8003: LIST
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PPUSH
8009: CALL_OW 69
8013: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
8014: LD_ADDR_VAR 0 18
8018: PUSH
8019: LD_INT 22
8021: PUSH
8022: LD_VAR 0 1
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 25
8033: PUSH
8034: LD_INT 4
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: PPUSH
8045: CALL_OW 69
8049: ST_TO_ADDR
// ComMoveToArea ( medic_list , healArea ) ;
8050: LD_VAR 0 18
8054: PPUSH
8055: LD_VAR 0 10
8059: PPUSH
8060: CALL_OW 113
// if strategy = 1 then
8064: LD_VAR 0 12
8068: PUSH
8069: LD_INT 1
8071: EQUAL
8072: IFFALSE 8588
// begin repeat wait ( 0 0$3 ) ;
8074: LD_INT 105
8076: PPUSH
8077: CALL_OW 67
// for i in soldiersOK_list do
8081: LD_ADDR_VAR 0 14
8085: PUSH
8086: LD_VAR 0 19
8090: PUSH
8091: FOR_IN
8092: IFFALSE 8156
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8094: LD_VAR 0 14
8098: PPUSH
8099: LD_INT 91
8101: PPUSH
8102: LD_INT 63
8104: PPUSH
8105: CALL_OW 174
// AddComAgressiveMove ( i , 101 , 53 ) ;
8109: LD_VAR 0 14
8113: PPUSH
8114: LD_INT 101
8116: PPUSH
8117: LD_INT 53
8119: PPUSH
8120: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 23 ) ;
8124: LD_VAR 0 14
8128: PPUSH
8129: LD_INT 75
8131: PPUSH
8132: LD_INT 23
8134: PPUSH
8135: CALL_OW 174
// AddComAgressiveMove ( i , 78 , 8 ) ;
8139: LD_VAR 0 14
8143: PPUSH
8144: LD_INT 78
8146: PPUSH
8147: LD_INT 8
8149: PPUSH
8150: CALL_OW 174
// end ;
8154: GO 8091
8156: POP
8157: POP
// until FilterUnitsInArea ( EnemyTargetArea1 , [ f_side , side ] ) > 2 ;
8158: LD_INT 15
8160: PPUSH
8161: LD_INT 22
8163: PUSH
8164: LD_VAR 0 1
8168: PUSH
8169: EMPTY
8170: LIST
8171: LIST
8172: PPUSH
8173: CALL_OW 70
8177: PUSH
8178: LD_INT 2
8180: GREATER
8181: IFFALSE 8074
// repeat wait ( 0 0$1 ) ;
8183: LD_INT 35
8185: PPUSH
8186: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8190: LD_ADDR_VAR 0 17
8194: PUSH
8195: LD_INT 22
8197: PUSH
8198: LD_VAR 0 1
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 1
8209: PUSH
8210: LD_INT 3
8212: PUSH
8213: LD_INT 24
8215: PUSH
8216: LD_INT 550
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: EMPTY
8224: LIST
8225: LIST
8226: PUSH
8227: LD_INT 24
8229: PUSH
8230: LD_INT 250
8232: PUSH
8233: EMPTY
8234: LIST
8235: LIST
8236: PUSH
8237: EMPTY
8238: LIST
8239: LIST
8240: LIST
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PPUSH
8246: CALL_OW 69
8250: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8251: LD_ADDR_VAR 0 19
8255: PUSH
8256: LD_INT 22
8258: PUSH
8259: LD_VAR 0 1
8263: PUSH
8264: EMPTY
8265: LIST
8266: LIST
8267: PUSH
8268: LD_INT 2
8270: PUSH
8271: LD_INT 25
8273: PUSH
8274: LD_INT 1
8276: PUSH
8277: EMPTY
8278: LIST
8279: LIST
8280: PUSH
8281: LD_INT 25
8283: PUSH
8284: LD_INT 5
8286: PUSH
8287: EMPTY
8288: LIST
8289: LIST
8290: PUSH
8291: LD_INT 25
8293: PUSH
8294: LD_INT 8
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: PUSH
8301: LD_INT 25
8303: PUSH
8304: LD_INT 9
8306: PUSH
8307: EMPTY
8308: LIST
8309: LIST
8310: PUSH
8311: EMPTY
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_INT 24
8320: PUSH
8321: LD_INT 1000
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: EMPTY
8329: LIST
8330: LIST
8331: LIST
8332: PPUSH
8333: CALL_OW 69
8337: ST_TO_ADDR
// if medicCount > 0 then
8338: LD_VAR 0 7
8342: PUSH
8343: LD_INT 0
8345: GREATER
8346: IFFALSE 8390
// begin if damageUnit_list > 0 then
8348: LD_VAR 0 17
8352: PUSH
8353: LD_INT 0
8355: GREATER
8356: IFFALSE 8390
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8358: LD_VAR 0 17
8362: PPUSH
8363: LD_VAR 0 10
8367: PPUSH
8368: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8372: LD_VAR 0 7
8376: PPUSH
8377: LD_VAR 0 17
8381: PUSH
8382: LD_INT 1
8384: ARRAY
8385: PPUSH
8386: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8390: LD_ADDR_VAR 0 14
8394: PUSH
8395: LD_VAR 0 19
8399: PUSH
8400: FOR_IN
8401: IFFALSE 8577
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8403: LD_ADDR_VAR 0 22
8407: PUSH
8408: LD_INT 22
8410: PUSH
8411: LD_VAR 0 11
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PPUSH
8420: CALL_OW 69
8424: PPUSH
8425: LD_VAR 0 14
8429: PPUSH
8430: CALL_OW 74
8434: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8435: LD_ADDR_VAR 0 23
8439: PUSH
8440: LD_INT 22
8442: PUSH
8443: LD_VAR 0 11
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: LD_INT 59
8457: PUSH
8458: EMPTY
8459: LIST
8460: PUSH
8461: LD_INT 21
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 21
8473: PUSH
8474: LD_INT 2
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: PPUSH
8494: CALL_OW 69
8498: PPUSH
8499: LD_VAR 0 14
8503: PPUSH
8504: CALL_OW 74
8508: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
8509: LD_VAR 0 14
8513: PPUSH
8514: LD_VAR 0 22
8518: PPUSH
8519: CALL_OW 296
8523: PUSH
8524: LD_INT 8
8526: PLUS
8527: PUSH
8528: LD_VAR 0 14
8532: PPUSH
8533: LD_VAR 0 23
8537: PPUSH
8538: CALL_OW 296
8542: LESS
8543: IFFALSE 8561
// begin ComAttackUnit ( i , target1 ) ;
8545: LD_VAR 0 14
8549: PPUSH
8550: LD_VAR 0 22
8554: PPUSH
8555: CALL_OW 115
// end else
8559: GO 8575
// begin ComAttackUnit ( i , target2 ) ;
8561: LD_VAR 0 14
8565: PPUSH
8566: LD_VAR 0 23
8570: PPUSH
8571: CALL_OW 115
// end ; end ;
8575: GO 8400
8577: POP
8578: POP
// until soldiersOK_list = [ ] ;
8579: LD_VAR 0 19
8583: PUSH
8584: EMPTY
8585: EQUAL
8586: IFFALSE 8183
// end ; if strategy = 2 then
8588: LD_VAR 0 12
8592: PUSH
8593: LD_INT 2
8595: EQUAL
8596: IFFALSE 9082
// begin repeat wait ( 0 0$1 ) ;
8598: LD_INT 35
8600: PPUSH
8601: CALL_OW 67
// for i in soldiersOK_list do
8605: LD_ADDR_VAR 0 14
8609: PUSH
8610: LD_VAR 0 19
8614: PUSH
8615: FOR_IN
8616: IFFALSE 8650
// begin AddComAgressiveMove ( i , 91 , 63 ) ;
8618: LD_VAR 0 14
8622: PPUSH
8623: LD_INT 91
8625: PPUSH
8626: LD_INT 63
8628: PPUSH
8629: CALL_OW 174
// AddComAgressiveMove ( i , 75 , 33 ) ;
8633: LD_VAR 0 14
8637: PPUSH
8638: LD_INT 75
8640: PPUSH
8641: LD_INT 33
8643: PPUSH
8644: CALL_OW 174
// end ;
8648: GO 8615
8650: POP
8651: POP
// until FilterUnitsInArea ( EnemyTargetArea2 , [ f_side , side ] ) > 2 ;
8652: LD_INT 16
8654: PPUSH
8655: LD_INT 22
8657: PUSH
8658: LD_VAR 0 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PPUSH
8667: CALL_OW 70
8671: PUSH
8672: LD_INT 2
8674: GREATER
8675: IFFALSE 8598
// repeat wait ( 0 0$3 ) ;
8677: LD_INT 105
8679: PPUSH
8680: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
8684: LD_ADDR_VAR 0 17
8688: PUSH
8689: LD_INT 22
8691: PUSH
8692: LD_VAR 0 1
8696: PUSH
8697: EMPTY
8698: LIST
8699: LIST
8700: PUSH
8701: LD_INT 1
8703: PUSH
8704: LD_INT 3
8706: PUSH
8707: LD_INT 24
8709: PUSH
8710: LD_INT 550
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: EMPTY
8718: LIST
8719: LIST
8720: PUSH
8721: LD_INT 24
8723: PUSH
8724: LD_INT 250
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: PUSH
8731: EMPTY
8732: LIST
8733: LIST
8734: LIST
8735: PUSH
8736: EMPTY
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
8745: LD_ADDR_VAR 0 19
8749: PUSH
8750: LD_INT 22
8752: PUSH
8753: LD_VAR 0 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 2
8764: PUSH
8765: LD_INT 25
8767: PUSH
8768: LD_INT 1
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 25
8777: PUSH
8778: LD_INT 5
8780: PUSH
8781: EMPTY
8782: LIST
8783: LIST
8784: PUSH
8785: LD_INT 25
8787: PUSH
8788: LD_INT 8
8790: PUSH
8791: EMPTY
8792: LIST
8793: LIST
8794: PUSH
8795: LD_INT 25
8797: PUSH
8798: LD_INT 9
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: EMPTY
8806: LIST
8807: LIST
8808: LIST
8809: LIST
8810: LIST
8811: PUSH
8812: LD_INT 24
8814: PUSH
8815: LD_INT 1000
8817: PUSH
8818: EMPTY
8819: LIST
8820: LIST
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: PPUSH
8827: CALL_OW 69
8831: ST_TO_ADDR
// if medicCount > 0 then
8832: LD_VAR 0 7
8836: PUSH
8837: LD_INT 0
8839: GREATER
8840: IFFALSE 8884
// begin if damageUnit_list > 0 then
8842: LD_VAR 0 17
8846: PUSH
8847: LD_INT 0
8849: GREATER
8850: IFFALSE 8884
// begin ComMoveToArea ( damageUnit_list , healArea ) ;
8852: LD_VAR 0 17
8856: PPUSH
8857: LD_VAR 0 10
8861: PPUSH
8862: CALL_OW 113
// AddComHeal ( medicCount , damageUnit_list [ 1 ] ) ;
8866: LD_VAR 0 7
8870: PPUSH
8871: LD_VAR 0 17
8875: PUSH
8876: LD_INT 1
8878: ARRAY
8879: PPUSH
8880: CALL_OW 188
// end ; end ; for i in soldiersOK_list do
8884: LD_ADDR_VAR 0 14
8888: PUSH
8889: LD_VAR 0 19
8893: PUSH
8894: FOR_IN
8895: IFFALSE 9071
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
8897: LD_ADDR_VAR 0 22
8901: PUSH
8902: LD_INT 22
8904: PUSH
8905: LD_VAR 0 11
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PPUSH
8919: LD_VAR 0 14
8923: PPUSH
8924: CALL_OW 74
8928: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
8929: LD_ADDR_VAR 0 23
8933: PUSH
8934: LD_INT 22
8936: PUSH
8937: LD_VAR 0 11
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 2
8948: PUSH
8949: LD_INT 59
8951: PUSH
8952: EMPTY
8953: LIST
8954: PUSH
8955: LD_INT 21
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 21
8967: PUSH
8968: LD_INT 2
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PUSH
8975: EMPTY
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: PUSH
8981: EMPTY
8982: LIST
8983: LIST
8984: PUSH
8985: EMPTY
8986: LIST
8987: PPUSH
8988: CALL_OW 69
8992: PPUSH
8993: LD_VAR 0 14
8997: PPUSH
8998: CALL_OW 74
9002: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
9003: LD_VAR 0 14
9007: PPUSH
9008: LD_VAR 0 22
9012: PPUSH
9013: CALL_OW 296
9017: PUSH
9018: LD_INT 8
9020: PLUS
9021: PUSH
9022: LD_VAR 0 14
9026: PPUSH
9027: LD_VAR 0 23
9031: PPUSH
9032: CALL_OW 296
9036: LESS
9037: IFFALSE 9055
// begin ComAttackUnit ( i , target1 ) ;
9039: LD_VAR 0 14
9043: PPUSH
9044: LD_VAR 0 22
9048: PPUSH
9049: CALL_OW 115
// end else
9053: GO 9069
// begin ComAttackUnit ( i , target2 ) ;
9055: LD_VAR 0 14
9059: PPUSH
9060: LD_VAR 0 23
9064: PPUSH
9065: CALL_OW 115
// end ; end ;
9069: GO 8894
9071: POP
9072: POP
// until soldiersOK_list = [ ] ;
9073: LD_VAR 0 19
9077: PUSH
9078: EMPTY
9079: EQUAL
9080: IFFALSE 8677
// end ; if not soldiersOK_list and medic_list then
9082: LD_VAR 0 19
9086: NOT
9087: PUSH
9088: LD_VAR 0 18
9092: AND
9093: IFFALSE 9233
// begin repeat medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
9095: LD_ADDR_VAR 0 18
9099: PUSH
9100: LD_INT 22
9102: PUSH
9103: LD_VAR 0 1
9107: PUSH
9108: EMPTY
9109: LIST
9110: LIST
9111: PUSH
9112: LD_INT 25
9114: PUSH
9115: LD_INT 4
9117: PUSH
9118: EMPTY
9119: LIST
9120: LIST
9121: PUSH
9122: LD_INT 50
9124: PUSH
9125: EMPTY
9126: LIST
9127: PUSH
9128: EMPTY
9129: LIST
9130: LIST
9131: LIST
9132: PPUSH
9133: CALL_OW 69
9137: ST_TO_ADDR
// wait ( 0 0$1 ) ;
9138: LD_INT 35
9140: PPUSH
9141: CALL_OW 67
// for i in medic_list do
9145: LD_ADDR_VAR 0 14
9149: PUSH
9150: LD_VAR 0 18
9154: PUSH
9155: FOR_IN
9156: IFFALSE 9224
// if not HasTask ( i ) and not IsInArea ( i , RussianAttack ) then
9158: LD_VAR 0 14
9162: PPUSH
9163: CALL_OW 314
9167: NOT
9168: PUSH
9169: LD_VAR 0 14
9173: PPUSH
9174: LD_INT 4
9176: PPUSH
9177: CALL_OW 308
9181: NOT
9182: AND
9183: IFFALSE 9199
// ComMoveToArea ( i , RussianAttack ) else
9185: LD_VAR 0 14
9189: PPUSH
9190: LD_INT 4
9192: PPUSH
9193: CALL_OW 113
9197: GO 9222
// if IsInArea ( i , RussianAttack ) then
9199: LD_VAR 0 14
9203: PPUSH
9204: LD_INT 4
9206: PPUSH
9207: CALL_OW 308
9211: IFFALSE 9222
// RemoveUnit ( i ) ;
9213: LD_VAR 0 14
9217: PPUSH
9218: CALL_OW 64
9222: GO 9155
9224: POP
9225: POP
// until not medic_list ;
9226: LD_VAR 0 18
9230: NOT
9231: IFFALSE 9095
// end ; end ;
9233: LD_VAR 0 13
9237: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
9238: LD_INT 0
9240: PPUSH
9241: PPUSH
9242: PPUSH
9243: PPUSH
9244: PPUSH
9245: PPUSH
9246: PPUSH
9247: PPUSH
9248: PPUSH
9249: PPUSH
9250: PPUSH
// amChassisTab = [ ] ;
9251: LD_ADDR_VAR 0 19
9255: PUSH
9256: EMPTY
9257: ST_TO_ADDR
// arChassisTab = [ ] ;
9258: LD_ADDR_VAR 0 18
9262: PUSH
9263: EMPTY
9264: ST_TO_ADDR
// ruChassisTab = [ ] ;
9265: LD_ADDR_VAR 0 17
9269: PUSH
9270: EMPTY
9271: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
9272: LD_INT 35
9274: PPUSH
9275: CALL_OW 67
// if nation = 1 then
9279: LD_VAR 0 5
9283: PUSH
9284: LD_INT 1
9286: EQUAL
9287: IFFALSE 9778
// begin uc_side = side ;
9289: LD_ADDR_OWVAR 20
9293: PUSH
9294: LD_VAR 0 2
9298: ST_TO_ADDR
// uc_nation = nation ;
9299: LD_ADDR_OWVAR 21
9303: PUSH
9304: LD_VAR 0 5
9308: ST_TO_ADDR
// vc_engine = vehengine ;
9309: LD_ADDR_OWVAR 39
9313: PUSH
9314: LD_VAR 0 6
9318: ST_TO_ADDR
// vc_control = vehcontrol ;
9319: LD_ADDR_OWVAR 38
9323: PUSH
9324: LD_VAR 0 7
9328: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
9329: LD_ADDR_OWVAR 40
9333: PUSH
9334: LD_VAR 0 10
9338: PUSH
9339: LD_INT 1
9341: PPUSH
9342: LD_VAR 0 10
9346: PPUSH
9347: CALL_OW 12
9351: ARRAY
9352: ST_TO_ADDR
// for j = 1 to AMWeapon do
9353: LD_ADDR_VAR 0 14
9357: PUSH
9358: DOUBLE
9359: LD_INT 1
9361: DEC
9362: ST_TO_ADDR
9363: LD_VAR 0 10
9367: PUSH
9368: FOR_TO
9369: IFFALSE 9670
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
9371: LD_VAR 0 10
9375: PUSH
9376: LD_VAR 0 14
9380: ARRAY
9381: PUSH
9382: LD_INT 2
9384: EQUAL
9385: PUSH
9386: LD_VAR 0 10
9390: PUSH
9391: LD_VAR 0 14
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: EQUAL
9400: OR
9401: IFFALSE 9454
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
9403: LD_ADDR_VAR 0 19
9407: PUSH
9408: LD_INT 1
9410: PUSH
9411: LD_INT 2
9413: PUSH
9414: LD_INT 3
9416: PUSH
9417: LD_INT 4
9419: PUSH
9420: LD_INT 5
9422: PUSH
9423: EMPTY
9424: LIST
9425: LIST
9426: LIST
9427: LIST
9428: LIST
9429: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9430: LD_ADDR_OWVAR 37
9434: PUSH
9435: LD_VAR 0 19
9439: PUSH
9440: LD_INT 1
9442: PPUSH
9443: LD_VAR 0 19
9447: PPUSH
9448: CALL_OW 12
9452: ARRAY
9453: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
9454: LD_VAR 0 10
9458: PUSH
9459: LD_VAR 0 14
9463: ARRAY
9464: PUSH
9465: LD_INT 4
9467: EQUAL
9468: PUSH
9469: LD_VAR 0 10
9473: PUSH
9474: LD_VAR 0 14
9478: ARRAY
9479: PUSH
9480: LD_INT 5
9482: EQUAL
9483: OR
9484: PUSH
9485: LD_VAR 0 10
9489: PUSH
9490: LD_VAR 0 14
9494: ARRAY
9495: PUSH
9496: LD_INT 9
9498: EQUAL
9499: OR
9500: PUSH
9501: LD_VAR 0 10
9505: PUSH
9506: LD_VAR 0 14
9510: ARRAY
9511: PUSH
9512: LD_INT 11
9514: EQUAL
9515: OR
9516: PUSH
9517: LD_VAR 0 10
9521: PUSH
9522: LD_VAR 0 14
9526: ARRAY
9527: PUSH
9528: LD_INT 7
9530: EQUAL
9531: OR
9532: IFFALSE 9581
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
9534: LD_ADDR_VAR 0 19
9538: PUSH
9539: LD_INT 2
9541: PUSH
9542: LD_INT 3
9544: PUSH
9545: LD_INT 4
9547: PUSH
9548: LD_INT 5
9550: PUSH
9551: EMPTY
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9557: LD_ADDR_OWVAR 37
9561: PUSH
9562: LD_VAR 0 19
9566: PUSH
9567: LD_INT 1
9569: PPUSH
9570: LD_VAR 0 19
9574: PPUSH
9575: CALL_OW 12
9579: ARRAY
9580: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
9581: LD_VAR 0 10
9585: PUSH
9586: LD_VAR 0 14
9590: ARRAY
9591: PUSH
9592: LD_INT 8
9594: EQUAL
9595: PUSH
9596: LD_VAR 0 10
9600: PUSH
9601: LD_VAR 0 14
9605: ARRAY
9606: PUSH
9607: LD_INT 6
9609: EQUAL
9610: OR
9611: PUSH
9612: LD_VAR 0 10
9616: PUSH
9617: LD_VAR 0 14
9621: ARRAY
9622: PUSH
9623: LD_INT 10
9625: EQUAL
9626: OR
9627: IFFALSE 9668
// begin amChassisTab = [ 4 , 5 ] ;
9629: LD_ADDR_VAR 0 19
9633: PUSH
9634: LD_INT 4
9636: PUSH
9637: LD_INT 5
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
9644: LD_ADDR_OWVAR 37
9648: PUSH
9649: LD_VAR 0 19
9653: PUSH
9654: LD_INT 1
9656: PPUSH
9657: LD_VAR 0 19
9661: PPUSH
9662: CALL_OW 12
9666: ARRAY
9667: ST_TO_ADDR
// end ; end ;
9668: GO 9368
9670: POP
9671: POP
// veh = CreateVehicle ;
9672: LD_ADDR_VAR 0 16
9676: PUSH
9677: CALL_OW 45
9681: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
9682: LD_VAR 0 16
9686: PPUSH
9687: LD_VAR 0 1
9691: PPUSH
9692: LD_INT 0
9694: PPUSH
9695: CALL_OW 49
// if vehControl = 1 then
9699: LD_VAR 0 7
9703: PUSH
9704: LD_INT 1
9706: EQUAL
9707: IFFALSE 9764
// begin hc_gallery =  ;
9709: LD_ADDR_OWVAR 33
9713: PUSH
9714: LD_STRING 
9716: ST_TO_ADDR
// hc_name =  ;
9717: LD_ADDR_OWVAR 26
9721: PUSH
9722: LD_STRING 
9724: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
9725: LD_INT 0
9727: PPUSH
9728: LD_INT 3
9730: PPUSH
9731: LD_VAR 0 4
9735: PPUSH
9736: CALL_OW 380
// un = CreateHuman ;
9740: LD_ADDR_VAR 0 15
9744: PUSH
9745: CALL_OW 44
9749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9750: LD_VAR 0 15
9754: PPUSH
9755: LD_VAR 0 16
9759: PPUSH
9760: CALL_OW 52
// end ; i = i + 1 ;
9764: LD_ADDR_VAR 0 13
9768: PUSH
9769: LD_VAR 0 13
9773: PUSH
9774: LD_INT 1
9776: PLUS
9777: ST_TO_ADDR
// end ; if nation = 2 then
9778: LD_VAR 0 5
9782: PUSH
9783: LD_INT 2
9785: EQUAL
9786: IFFALSE 10210
// begin uc_side = side ;
9788: LD_ADDR_OWVAR 20
9792: PUSH
9793: LD_VAR 0 2
9797: ST_TO_ADDR
// uc_nation = nation ;
9798: LD_ADDR_OWVAR 21
9802: PUSH
9803: LD_VAR 0 5
9807: ST_TO_ADDR
// vc_engine = vehengine ;
9808: LD_ADDR_OWVAR 39
9812: PUSH
9813: LD_VAR 0 6
9817: ST_TO_ADDR
// vc_control = vehcontrol ;
9818: LD_ADDR_OWVAR 38
9822: PUSH
9823: LD_VAR 0 7
9827: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
9828: LD_ADDR_OWVAR 40
9832: PUSH
9833: LD_VAR 0 9
9837: PUSH
9838: LD_INT 1
9840: PPUSH
9841: LD_VAR 0 9
9845: PPUSH
9846: CALL_OW 12
9850: ARRAY
9851: ST_TO_ADDR
// for j = 1 to ARWeapons do
9852: LD_ADDR_VAR 0 14
9856: PUSH
9857: DOUBLE
9858: LD_INT 1
9860: DEC
9861: ST_TO_ADDR
9862: LD_VAR 0 9
9866: PUSH
9867: FOR_TO
9868: IFFALSE 10102
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
9870: LD_VAR 0 9
9874: PUSH
9875: LD_VAR 0 14
9879: ARRAY
9880: PUSH
9881: LD_INT 24
9883: EQUAL
9884: PUSH
9885: LD_VAR 0 9
9889: PUSH
9890: LD_VAR 0 14
9894: ARRAY
9895: PUSH
9896: LD_INT 22
9898: EQUAL
9899: OR
9900: PUSH
9901: LD_VAR 0 9
9905: PUSH
9906: LD_VAR 0 14
9910: ARRAY
9911: PUSH
9912: LD_INT 23
9914: EQUAL
9915: OR
9916: PUSH
9917: LD_VAR 0 9
9921: PUSH
9922: LD_VAR 0 14
9926: ARRAY
9927: PUSH
9928: LD_INT 30
9930: EQUAL
9931: OR
9932: IFFALSE 9981
// begin arChassisTab = [ 11 , 12 , 13 , 14 ] ;
9934: LD_ADDR_VAR 0 18
9938: PUSH
9939: LD_INT 11
9941: PUSH
9942: LD_INT 12
9944: PUSH
9945: LD_INT 13
9947: PUSH
9948: LD_INT 14
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
9957: LD_ADDR_OWVAR 37
9961: PUSH
9962: LD_VAR 0 18
9966: PUSH
9967: LD_INT 1
9969: PPUSH
9970: LD_VAR 0 18
9974: PPUSH
9975: CALL_OW 12
9979: ARRAY
9980: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
9981: LD_VAR 0 9
9985: PUSH
9986: LD_VAR 0 14
9990: ARRAY
9991: PUSH
9992: LD_INT 29
9994: EQUAL
9995: PUSH
9996: LD_VAR 0 9
10000: PUSH
10001: LD_VAR 0 14
10005: ARRAY
10006: PUSH
10007: LD_INT 28
10009: EQUAL
10010: OR
10011: PUSH
10012: LD_VAR 0 9
10016: PUSH
10017: LD_VAR 0 14
10021: ARRAY
10022: PUSH
10023: LD_INT 27
10025: EQUAL
10026: OR
10027: PUSH
10028: LD_VAR 0 9
10032: PUSH
10033: LD_VAR 0 14
10037: ARRAY
10038: PUSH
10039: LD_INT 26
10041: EQUAL
10042: OR
10043: PUSH
10044: LD_VAR 0 9
10048: PUSH
10049: LD_VAR 0 14
10053: ARRAY
10054: PUSH
10055: LD_INT 25
10057: EQUAL
10058: OR
10059: IFFALSE 10100
// begin arChassisTab = [ 13 , 14 ] ;
10061: LD_ADDR_VAR 0 18
10065: PUSH
10066: LD_INT 13
10068: PUSH
10069: LD_INT 14
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
10076: LD_ADDR_OWVAR 37
10080: PUSH
10081: LD_VAR 0 18
10085: PUSH
10086: LD_INT 1
10088: PPUSH
10089: LD_VAR 0 18
10093: PPUSH
10094: CALL_OW 12
10098: ARRAY
10099: ST_TO_ADDR
// end ; end ;
10100: GO 9867
10102: POP
10103: POP
// veh = CreateVehicle ;
10104: LD_ADDR_VAR 0 16
10108: PUSH
10109: CALL_OW 45
10113: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10114: LD_VAR 0 16
10118: PPUSH
10119: LD_VAR 0 1
10123: PPUSH
10124: LD_INT 0
10126: PPUSH
10127: CALL_OW 49
// if vehcontrol = 1 then
10131: LD_VAR 0 7
10135: PUSH
10136: LD_INT 1
10138: EQUAL
10139: IFFALSE 10196
// begin hc_gallery =  ;
10141: LD_ADDR_OWVAR 33
10145: PUSH
10146: LD_STRING 
10148: ST_TO_ADDR
// hc_name =  ;
10149: LD_ADDR_OWVAR 26
10153: PUSH
10154: LD_STRING 
10156: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10157: LD_INT 0
10159: PPUSH
10160: LD_INT 3
10162: PPUSH
10163: LD_VAR 0 4
10167: PPUSH
10168: CALL_OW 380
// un = CreateHuman ;
10172: LD_ADDR_VAR 0 15
10176: PUSH
10177: CALL_OW 44
10181: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10182: LD_VAR 0 15
10186: PPUSH
10187: LD_VAR 0 16
10191: PPUSH
10192: CALL_OW 52
// end ; i = i + 1 ;
10196: LD_ADDR_VAR 0 13
10200: PUSH
10201: LD_VAR 0 13
10205: PUSH
10206: LD_INT 1
10208: PLUS
10209: ST_TO_ADDR
// end ; if nation = 3 then
10210: LD_VAR 0 5
10214: PUSH
10215: LD_INT 3
10217: EQUAL
10218: IFFALSE 10610
// begin uc_side = side ;
10220: LD_ADDR_OWVAR 20
10224: PUSH
10225: LD_VAR 0 2
10229: ST_TO_ADDR
// uc_nation = nation ;
10230: LD_ADDR_OWVAR 21
10234: PUSH
10235: LD_VAR 0 5
10239: ST_TO_ADDR
// vc_engine = vehengine ;
10240: LD_ADDR_OWVAR 39
10244: PUSH
10245: LD_VAR 0 6
10249: ST_TO_ADDR
// vc_control = vehcontrol ;
10250: LD_ADDR_OWVAR 38
10254: PUSH
10255: LD_VAR 0 7
10259: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
10260: LD_ADDR_OWVAR 40
10264: PUSH
10265: LD_VAR 0 8
10269: PUSH
10270: LD_INT 1
10272: PPUSH
10273: LD_VAR 0 8
10277: PPUSH
10278: CALL_OW 12
10282: ARRAY
10283: ST_TO_ADDR
// for j = 1 to RuWeapons do
10284: LD_ADDR_VAR 0 14
10288: PUSH
10289: DOUBLE
10290: LD_INT 1
10292: DEC
10293: ST_TO_ADDR
10294: LD_VAR 0 8
10298: PUSH
10299: FOR_TO
10300: IFFALSE 10502
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
10302: LD_VAR 0 8
10306: PUSH
10307: LD_VAR 0 14
10311: ARRAY
10312: PUSH
10313: LD_INT 42
10315: EQUAL
10316: PUSH
10317: LD_VAR 0 8
10321: PUSH
10322: LD_VAR 0 14
10326: ARRAY
10327: PUSH
10328: LD_INT 43
10330: EQUAL
10331: OR
10332: PUSH
10333: LD_VAR 0 8
10337: PUSH
10338: LD_VAR 0 14
10342: ARRAY
10343: PUSH
10344: LD_INT 44
10346: EQUAL
10347: OR
10348: PUSH
10349: LD_VAR 0 8
10353: PUSH
10354: LD_VAR 0 14
10358: ARRAY
10359: PUSH
10360: LD_INT 45
10362: EQUAL
10363: OR
10364: PUSH
10365: LD_VAR 0 8
10369: PUSH
10370: LD_VAR 0 14
10374: ARRAY
10375: PUSH
10376: LD_INT 49
10378: EQUAL
10379: OR
10380: IFFALSE 10429
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
10382: LD_ADDR_VAR 0 17
10386: PUSH
10387: LD_INT 21
10389: PUSH
10390: LD_INT 22
10392: PUSH
10393: LD_INT 23
10395: PUSH
10396: LD_INT 24
10398: PUSH
10399: EMPTY
10400: LIST
10401: LIST
10402: LIST
10403: LIST
10404: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10405: LD_ADDR_OWVAR 37
10409: PUSH
10410: LD_VAR 0 17
10414: PUSH
10415: LD_INT 1
10417: PPUSH
10418: LD_VAR 0 17
10422: PPUSH
10423: CALL_OW 12
10427: ARRAY
10428: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
10429: LD_VAR 0 8
10433: PUSH
10434: LD_VAR 0 14
10438: ARRAY
10439: PUSH
10440: LD_INT 46
10442: EQUAL
10443: PUSH
10444: LD_VAR 0 8
10448: PUSH
10449: LD_VAR 0 14
10453: ARRAY
10454: PUSH
10455: LD_INT 47
10457: EQUAL
10458: OR
10459: IFFALSE 10500
// begin ruChassisTab = [ 23 , 24 ] ;
10461: LD_ADDR_VAR 0 17
10465: PUSH
10466: LD_INT 23
10468: PUSH
10469: LD_INT 24
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
10476: LD_ADDR_OWVAR 37
10480: PUSH
10481: LD_VAR 0 17
10485: PUSH
10486: LD_INT 1
10488: PPUSH
10489: LD_VAR 0 17
10493: PPUSH
10494: CALL_OW 12
10498: ARRAY
10499: ST_TO_ADDR
// end ; end ;
10500: GO 10299
10502: POP
10503: POP
// veh = CreateVehicle ;
10504: LD_ADDR_VAR 0 16
10508: PUSH
10509: CALL_OW 45
10513: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
10514: LD_VAR 0 16
10518: PPUSH
10519: LD_VAR 0 1
10523: PPUSH
10524: LD_INT 0
10526: PPUSH
10527: CALL_OW 49
// if vehcontrol = 1 then
10531: LD_VAR 0 7
10535: PUSH
10536: LD_INT 1
10538: EQUAL
10539: IFFALSE 10596
// begin hc_gallery =  ;
10541: LD_ADDR_OWVAR 33
10545: PUSH
10546: LD_STRING 
10548: ST_TO_ADDR
// hc_name =  ;
10549: LD_ADDR_OWVAR 26
10553: PUSH
10554: LD_STRING 
10556: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
10557: LD_INT 0
10559: PPUSH
10560: LD_INT 3
10562: PPUSH
10563: LD_VAR 0 4
10567: PPUSH
10568: CALL_OW 380
// un = CreateHuman ;
10572: LD_ADDR_VAR 0 15
10576: PUSH
10577: CALL_OW 44
10581: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10582: LD_VAR 0 15
10586: PPUSH
10587: LD_VAR 0 16
10591: PPUSH
10592: CALL_OW 52
// end ; i = i + 1 ;
10596: LD_ADDR_VAR 0 13
10600: PUSH
10601: LD_VAR 0 13
10605: PUSH
10606: LD_INT 1
10608: PLUS
10609: ST_TO_ADDR
// end ; until i = vehCount ;
10610: LD_VAR 0 13
10614: PUSH
10615: LD_VAR 0 3
10619: EQUAL
10620: IFFALSE 9272
// repeat wait ( 0 0$1 ) ;
10622: LD_INT 35
10624: PPUSH
10625: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) > 0 then
10629: LD_INT 22
10631: PUSH
10632: LD_VAR 0 2
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: LD_INT 24
10653: PUSH
10654: LD_INT 250
10656: PUSH
10657: EMPTY
10658: LIST
10659: LIST
10660: PUSH
10661: LD_INT 3
10663: PUSH
10664: LD_INT 58
10666: PUSH
10667: EMPTY
10668: LIST
10669: PUSH
10670: EMPTY
10671: LIST
10672: LIST
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: PPUSH
10680: CALL_OW 69
10684: PUSH
10685: LD_INT 0
10687: GREATER
10688: IFFALSE 10930
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) do
10690: LD_ADDR_VAR 0 13
10694: PUSH
10695: LD_INT 22
10697: PUSH
10698: LD_VAR 0 2
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 21
10709: PUSH
10710: LD_INT 2
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 24
10719: PUSH
10720: LD_INT 250
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 3
10729: PUSH
10730: LD_INT 58
10732: PUSH
10733: EMPTY
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: LIST
10744: LIST
10745: PPUSH
10746: CALL_OW 69
10750: PUSH
10751: FOR_IN
10752: IFFALSE 10928
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
10754: LD_ADDR_VAR 0 21
10758: PUSH
10759: LD_INT 22
10761: PUSH
10762: LD_VAR 0 11
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PPUSH
10771: CALL_OW 69
10775: PPUSH
10776: LD_VAR 0 13
10780: PPUSH
10781: CALL_OW 74
10785: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
10786: LD_ADDR_VAR 0 22
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_VAR 0 11
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PUSH
10803: LD_INT 2
10805: PUSH
10806: LD_INT 59
10808: PUSH
10809: EMPTY
10810: LIST
10811: PUSH
10812: LD_INT 21
10814: PUSH
10815: LD_INT 1
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 21
10824: PUSH
10825: LD_INT 2
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_VAR 0 13
10854: PPUSH
10855: CALL_OW 74
10859: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
10860: LD_VAR 0 13
10864: PPUSH
10865: LD_VAR 0 21
10869: PPUSH
10870: CALL_OW 296
10874: PUSH
10875: LD_INT 8
10877: PLUS
10878: PUSH
10879: LD_VAR 0 13
10883: PPUSH
10884: LD_VAR 0 22
10888: PPUSH
10889: CALL_OW 296
10893: LESS
10894: IFFALSE 10912
// begin ComAttackUnit ( i , target1 ) ;
10896: LD_VAR 0 13
10900: PPUSH
10901: LD_VAR 0 21
10905: PPUSH
10906: CALL_OW 115
// end else
10910: GO 10926
// begin ComAttackUnit ( i , target2 ) ;
10912: LD_VAR 0 13
10916: PPUSH
10917: LD_VAR 0 22
10921: PPUSH
10922: CALL_OW 115
// end ; end ;
10926: GO 10751
10928: POP
10929: POP
// end ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] , [ f_not , [ f_empty ] ] ] ) = 0 ;
10930: LD_INT 22
10932: PUSH
10933: LD_VAR 0 2
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 21
10944: PUSH
10945: LD_INT 2
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 24
10954: PUSH
10955: LD_INT 250
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: LD_INT 58
10967: PUSH
10968: EMPTY
10969: LIST
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PPUSH
10981: CALL_OW 69
10985: PUSH
10986: LD_INT 0
10988: EQUAL
10989: IFFALSE 10622
// end ; end_of_file
10991: LD_VAR 0 12
10995: RET
// every 1 do var i , gammaSquad , startX , startY ;
10996: GO 10998
10998: DISABLE
10999: LD_INT 0
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
// begin gammaSquad = [ Dickens , Woodruff , Knight , Claptopn , Campell ] ;
11005: LD_ADDR_VAR 0 2
11009: PUSH
11010: LD_EXP 8
11014: PUSH
11015: LD_EXP 9
11019: PUSH
11020: LD_EXP 10
11024: PUSH
11025: LD_EXP 11
11029: PUSH
11030: LD_EXP 12
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: LIST
11041: ST_TO_ADDR
// startX = [ 46 , 45 , 44 , 43 , 42 ] ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_INT 46
11049: PUSH
11050: LD_INT 45
11052: PUSH
11053: LD_INT 44
11055: PUSH
11056: LD_INT 43
11058: PUSH
11059: LD_INT 42
11061: PUSH
11062: EMPTY
11063: LIST
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: ST_TO_ADDR
// startY = [ 14 , 12 , 10 , 8 , 6 ] ;
11069: LD_ADDR_VAR 0 4
11073: PUSH
11074: LD_INT 14
11076: PUSH
11077: LD_INT 12
11079: PUSH
11080: LD_INT 10
11082: PUSH
11083: LD_INT 8
11085: PUSH
11086: LD_INT 6
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: ST_TO_ADDR
// CenterNowOnUnits ( amvj ) ;
11096: LD_INT 32
11098: PPUSH
11099: CALL_OW 87
// ComMoveXY ( amvj , 51 , 26 ) ;
11103: LD_INT 32
11105: PPUSH
11106: LD_INT 51
11108: PPUSH
11109: LD_INT 26
11111: PPUSH
11112: CALL_OW 111
// AddComMoveXY ( amvj , 53 , 23 ) ;
11116: LD_INT 32
11118: PPUSH
11119: LD_INT 53
11121: PPUSH
11122: LD_INT 23
11124: PPUSH
11125: CALL_OW 171
// AddComMoveXY ( amvj , 52 , 19 ) ;
11129: LD_INT 32
11131: PPUSH
11132: LD_INT 52
11134: PPUSH
11135: LD_INT 19
11137: PPUSH
11138: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
11142: LD_INT 35
11144: PPUSH
11145: CALL_OW 67
// CenterNowOnUnits ( amvj ) ;
11149: LD_INT 32
11151: PPUSH
11152: CALL_OW 87
// until GetX ( amvj ) = 52 and GetY ( amvj ) = 19 ;
11156: LD_INT 32
11158: PPUSH
11159: CALL_OW 250
11163: PUSH
11164: LD_INT 52
11166: EQUAL
11167: PUSH
11168: LD_INT 32
11170: PPUSH
11171: CALL_OW 251
11175: PUSH
11176: LD_INT 19
11178: EQUAL
11179: AND
11180: IFFALSE 11142
// ComExitVehicle ( JMM ) ;
11182: LD_EXP 1
11186: PPUSH
11187: CALL_OW 121
// ComTurnUnit ( Brown , JMM ) ;
11191: LD_EXP 7
11195: PPUSH
11196: LD_EXP 1
11200: PPUSH
11201: CALL_OW 119
// wait ( 0 0$01 ) ;
11205: LD_INT 35
11207: PPUSH
11208: CALL_OW 67
// ComMoveXY ( JMM , 46 , 10 ) ;
11212: LD_EXP 1
11216: PPUSH
11217: LD_INT 46
11219: PPUSH
11220: LD_INT 10
11222: PPUSH
11223: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11227: LD_EXP 1
11231: PPUSH
11232: LD_EXP 7
11236: PPUSH
11237: CALL_OW 179
// wait ( 0 0$4 ) ;
11241: LD_INT 140
11243: PPUSH
11244: CALL_OW 67
// Say ( JMM , D1-JMM-1 ) ;
11248: LD_EXP 1
11252: PPUSH
11253: LD_STRING D1-JMM-1
11255: PPUSH
11256: CALL_OW 88
// if not dialogue_skipped then
11260: LD_OWVAR 59
11264: NOT
11265: IFFALSE 11922
// begin for i := 1 to gammaSquad do
11267: LD_ADDR_VAR 0 1
11271: PUSH
11272: DOUBLE
11273: LD_INT 1
11275: DEC
11276: ST_TO_ADDR
11277: LD_VAR 0 2
11281: PUSH
11282: FOR_TO
11283: IFFALSE 11344
// begin ComMoveXY ( gammaSquad [ i ] , startX [ i ] , startY [ i ] ) ;
11285: LD_VAR 0 2
11289: PUSH
11290: LD_VAR 0 1
11294: ARRAY
11295: PPUSH
11296: LD_VAR 0 3
11300: PUSH
11301: LD_VAR 0 1
11305: ARRAY
11306: PPUSH
11307: LD_VAR 0 4
11311: PUSH
11312: LD_VAR 0 1
11316: ARRAY
11317: PPUSH
11318: CALL_OW 111
// AddComTurnUnit ( gammaSquad [ i ] , JMM ) ;
11322: LD_VAR 0 2
11326: PUSH
11327: LD_VAR 0 1
11331: ARRAY
11332: PPUSH
11333: LD_EXP 1
11337: PPUSH
11338: CALL_OW 179
// end ;
11342: GO 11282
11344: POP
11345: POP
// ComMoveXY ( Lisa , 41 , 4 ) ;
11346: LD_EXP 4
11350: PPUSH
11351: LD_INT 41
11353: PPUSH
11354: LD_INT 4
11356: PPUSH
11357: CALL_OW 111
// AddComTurnUnit ( Lisa , JMM ) ;
11361: LD_EXP 4
11365: PPUSH
11366: LD_EXP 1
11370: PPUSH
11371: CALL_OW 179
// if Lisa = false and Bobby then
11375: LD_EXP 4
11379: PUSH
11380: LD_INT 0
11382: EQUAL
11383: PUSH
11384: LD_EXP 2
11388: AND
11389: IFFALSE 11420
// begin ComMoveXY ( Bobby , 41 , 4 ) ;
11391: LD_EXP 2
11395: PPUSH
11396: LD_INT 41
11398: PPUSH
11399: LD_INT 4
11401: PPUSH
11402: CALL_OW 111
// AddComTurnUnit ( Bobby , JMM ) ;
11406: LD_EXP 2
11410: PPUSH
11411: LD_EXP 1
11415: PPUSH
11416: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus then
11420: LD_EXP 4
11424: PUSH
11425: LD_INT 0
11427: EQUAL
11428: PUSH
11429: LD_EXP 2
11433: PUSH
11434: LD_INT 0
11436: EQUAL
11437: AND
11438: PUSH
11439: LD_EXP 3
11443: AND
11444: IFFALSE 11475
// begin ComMoveXY ( Cyrus , 41 , 4 ) ;
11446: LD_EXP 3
11450: PPUSH
11451: LD_INT 41
11453: PPUSH
11454: LD_INT 4
11456: PPUSH
11457: CALL_OW 111
// AddComTurnUnit ( Cyrus , JMM ) ;
11461: LD_EXP 3
11465: PPUSH
11466: LD_EXP 1
11470: PPUSH
11471: CALL_OW 179
// end ; if Lisa = false and Bobby = false and Cyrus = false then
11475: LD_EXP 4
11479: PUSH
11480: LD_INT 0
11482: EQUAL
11483: PUSH
11484: LD_EXP 2
11488: PUSH
11489: LD_INT 0
11491: EQUAL
11492: AND
11493: PUSH
11494: LD_EXP 3
11498: PUSH
11499: LD_INT 0
11501: EQUAL
11502: AND
11503: IFFALSE 11534
// begin ComMoveXY ( RandomBeforeMission , 41 , 4 ) ;
11505: LD_EXP 6
11509: PPUSH
11510: LD_INT 41
11512: PPUSH
11513: LD_INT 4
11515: PPUSH
11516: CALL_OW 111
// AddComTurnUnit ( RandomBeforeMission , JMM ) ;
11520: LD_EXP 6
11524: PPUSH
11525: LD_EXP 1
11529: PPUSH
11530: CALL_OW 179
// end ; Say ( Brown , D1-Brown-1 ) ;
11534: LD_EXP 7
11538: PPUSH
11539: LD_STRING D1-Brown-1
11541: PPUSH
11542: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
11546: LD_EXP 1
11550: PPUSH
11551: LD_STRING D1-JMM-2
11553: PPUSH
11554: CALL_OW 88
// Say ( Brown , D1-Brown-2 ) ;
11558: LD_EXP 7
11562: PPUSH
11563: LD_STRING D1-Brown-2
11565: PPUSH
11566: CALL_OW 88
// ComTurnUnit ( JMM , Woodruff ) ;
11570: LD_EXP 1
11574: PPUSH
11575: LD_EXP 9
11579: PPUSH
11580: CALL_OW 119
// Say ( Woodruff , D1-FSol1-2 ) ;
11584: LD_EXP 9
11588: PPUSH
11589: LD_STRING D1-FSol1-2
11591: PPUSH
11592: CALL_OW 88
// ComTurnUnit ( JMM , Dickens ) ;
11596: LD_EXP 1
11600: PPUSH
11601: LD_EXP 8
11605: PPUSH
11606: CALL_OW 119
// Say ( Dickens , D1-Sol2-2 ) ;
11610: LD_EXP 8
11614: PPUSH
11615: LD_STRING D1-Sol2-2
11617: PPUSH
11618: CALL_OW 88
// if Lisa then
11622: LD_EXP 4
11626: IFFALSE 11666
// begin ComTurnUnit ( JMM , Lisa ) ;
11628: LD_EXP 1
11632: PPUSH
11633: LD_EXP 4
11637: PPUSH
11638: CALL_OW 119
// Say ( Lisa , D1-Lisa-2 ) ;
11642: LD_EXP 4
11646: PPUSH
11647: LD_STRING D1-Lisa-2
11649: PPUSH
11650: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11654: LD_EXP 1
11658: PPUSH
11659: LD_STRING D1-JMM-3
11661: PPUSH
11662: CALL_OW 88
// end ; if Bobby then
11666: LD_EXP 2
11670: IFFALSE 11710
// begin ComTurnUnit ( JMM , Bobby ) ;
11672: LD_EXP 1
11676: PPUSH
11677: LD_EXP 2
11681: PPUSH
11682: CALL_OW 119
// Say ( Bobby , D1-Bobby-2 ) ;
11686: LD_EXP 2
11690: PPUSH
11691: LD_STRING D1-Bobby-2
11693: PPUSH
11694: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11698: LD_EXP 1
11702: PPUSH
11703: LD_STRING D1-JMM-3
11705: PPUSH
11706: CALL_OW 88
// end ; if Cyrus then
11710: LD_EXP 3
11714: IFFALSE 11754
// begin ComTurnUnit ( JMM , Cyrus ) ;
11716: LD_EXP 1
11720: PPUSH
11721: LD_EXP 3
11725: PPUSH
11726: CALL_OW 119
// Say ( Cyrus , D1-Cyrus-2 ) ;
11730: LD_EXP 3
11734: PPUSH
11735: LD_STRING D1-Cyrus-2
11737: PPUSH
11738: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
11742: LD_EXP 1
11746: PPUSH
11747: LD_STRING D1-JMM-3
11749: PPUSH
11750: CALL_OW 88
// end ; ComTurnUnit ( JMM , Brown ) ;
11754: LD_EXP 1
11758: PPUSH
11759: LD_EXP 7
11763: PPUSH
11764: CALL_OW 119
// Say ( JMM , D1-JMM-3a ) ;
11768: LD_EXP 1
11772: PPUSH
11773: LD_STRING D1-JMM-3a
11775: PPUSH
11776: CALL_OW 88
// ComMoveXY ( Brown , 38 , 5 ) ;
11780: LD_EXP 7
11784: PPUSH
11785: LD_INT 38
11787: PPUSH
11788: LD_INT 5
11790: PPUSH
11791: CALL_OW 111
// AddComTurnUnit ( Brown , JMM ) ;
11795: LD_EXP 7
11799: PPUSH
11800: LD_EXP 1
11804: PPUSH
11805: CALL_OW 179
// ComMoveXY ( JMM , 40 , 7 ) ;
11809: LD_EXP 1
11813: PPUSH
11814: LD_INT 40
11816: PPUSH
11817: LD_INT 7
11819: PPUSH
11820: CALL_OW 111
// AddComTurnUnit ( JMM , Brown ) ;
11824: LD_EXP 1
11828: PPUSH
11829: LD_EXP 7
11833: PPUSH
11834: CALL_OW 179
// Say ( Brown , D1-Brown-3 ) ;
11838: LD_EXP 7
11842: PPUSH
11843: LD_STRING D1-Brown-3
11845: PPUSH
11846: CALL_OW 88
// SayRadio ( Harisson , D1-Har-3 ) ;
11850: LD_EXP 14
11854: PPUSH
11855: LD_STRING D1-Har-3
11857: PPUSH
11858: CALL_OW 94
// Say ( JMM , D1-JMM-4 ) ;
11862: LD_EXP 1
11866: PPUSH
11867: LD_STRING D1-JMM-4
11869: PPUSH
11870: CALL_OW 88
// SayRadio ( Harisson , D1-Har-4 ) ;
11874: LD_EXP 14
11878: PPUSH
11879: LD_STRING D1-Har-4
11881: PPUSH
11882: CALL_OW 94
// Say ( JMM , D1-JMM-5 ) ;
11886: LD_EXP 1
11890: PPUSH
11891: LD_STRING D1-JMM-5
11893: PPUSH
11894: CALL_OW 88
// SayRadio ( Harisson , D1-Har-5 ) ;
11898: LD_EXP 14
11902: PPUSH
11903: LD_STRING D1-Har-5
11905: PPUSH
11906: CALL_OW 94
// Say ( JMM , D1-JMM-6 ) ;
11910: LD_EXP 1
11914: PPUSH
11915: LD_STRING D1-JMM-6
11917: PPUSH
11918: CALL_OW 88
// end ; InGameOff ;
11922: CALL_OW 9
// PrepareRussianConvoy ;
11926: CALL 2875 0 0
// ChangeMissionObjectives ( M1 ) ;
11930: LD_STRING M1
11932: PPUSH
11933: CALL_OW 337
// SaveForQuickRestart ;
11937: CALL_OW 22
// timerStatus = 1 ;
11941: LD_ADDR_EXP 29
11945: PUSH
11946: LD_INT 1
11948: ST_TO_ADDR
// startTimer = 1 ;
11949: LD_ADDR_EXP 30
11953: PUSH
11954: LD_INT 1
11956: ST_TO_ADDR
// bonusAvalaible = 1 ;
11957: LD_ADDR_EXP 42
11961: PUSH
11962: LD_INT 1
11964: ST_TO_ADDR
// wait ( 0 0$3 ) ;
11965: LD_INT 105
11967: PPUSH
11968: CALL_OW 67
// DialogueOn ;
11972: CALL_OW 6
// Say ( Campell , D9-Mech1-1 ) ;
11976: LD_EXP 12
11980: PPUSH
11981: LD_STRING D9-Mech1-1
11983: PPUSH
11984: CALL_OW 88
// Say ( JMM , D9-JMM-1 ) ;
11988: LD_EXP 1
11992: PPUSH
11993: LD_STRING D9-JMM-1
11995: PPUSH
11996: CALL_OW 88
// DialogueOff ;
12000: CALL_OW 7
// end ;
12004: PPOPN 4
12006: END
// every 0 0$1 trigger GetTech ( 47 , 1 ) = state_researched and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] ] ) > 0 do
12007: LD_INT 47
12009: PPUSH
12010: LD_INT 1
12012: PPUSH
12013: CALL_OW 321
12017: PUSH
12018: LD_INT 2
12020: EQUAL
12021: PUSH
12022: LD_INT 22
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: PUSH
12032: LD_INT 21
12034: PUSH
12035: LD_INT 3
12037: PUSH
12038: EMPTY
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 30
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: PUSH
12052: EMPTY
12053: LIST
12054: LIST
12055: LIST
12056: PPUSH
12057: CALL_OW 69
12061: PUSH
12062: LD_INT 0
12064: GREATER
12065: AND
12066: IFFALSE 12296
12068: GO 12070
12070: DISABLE
// begin if IsOk ( Campell ) then
12071: LD_EXP 12
12075: PPUSH
12076: CALL_OW 302
12080: IFFALSE 12096
// begin Say ( Campell , D10-Mech1-1 ) ;
12082: LD_EXP 12
12086: PPUSH
12087: LD_STRING D10-Mech1-1
12089: PPUSH
12090: CALL_OW 88
// end else
12094: GO 12296
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12096: LD_INT 22
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: PUSH
12106: LD_INT 21
12108: PUSH
12109: LD_INT 1
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 25
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 26
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: PPUSH
12142: CALL_OW 69
12146: PUSH
12147: LD_EXP 1
12151: PUSH
12152: EMPTY
12153: LIST
12154: PUSH
12155: LD_INT 0
12157: GREATER
12158: DIFF
12159: IFFALSE 12233
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12161: LD_INT 22
12163: PUSH
12164: LD_INT 1
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 21
12173: PUSH
12174: LD_INT 1
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 25
12183: PUSH
12184: LD_INT 3
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 26
12193: PUSH
12194: LD_INT 1
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PPUSH
12207: CALL_OW 69
12211: PUSH
12212: LD_EXP 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: DIFF
12220: PPUSH
12221: LD_STRING D10-Mech1-1
12223: PPUSH
12224: LD_STRING D10-Mech1-1
12226: PPUSH
12227: CALL 4133 0 3
// end else
12231: GO 12296
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] [ 1 ] ) diff [ JMM ] , D10-Mech1-1 , D10-Mech1-1 ) ;
12233: LD_INT 22
12235: PUSH
12236: LD_INT 1
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 21
12245: PUSH
12246: LD_INT 1
12248: PUSH
12249: EMPTY
12250: LIST
12251: LIST
12252: PUSH
12253: LD_INT 26
12255: PUSH
12256: LD_INT 1
12258: PUSH
12259: EMPTY
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: PUSH
12268: LD_INT 1
12270: ARRAY
12271: PPUSH
12272: CALL_OW 69
12276: PUSH
12277: LD_EXP 1
12281: PUSH
12282: EMPTY
12283: LIST
12284: DIFF
12285: PPUSH
12286: LD_STRING D10-Mech1-1
12288: PPUSH
12289: LD_STRING D10-Mech1-1
12291: PPUSH
12292: CALL 4133 0 3
// end ; end ; end ;
12296: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) > 0 and bunkerDialog = 0 do
12297: LD_INT 22
12299: PUSH
12300: LD_INT 1
12302: PUSH
12303: EMPTY
12304: LIST
12305: LIST
12306: PUSH
12307: LD_INT 30
12309: PUSH
12310: LD_INT 32
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: PPUSH
12321: CALL_OW 69
12325: PUSH
12326: LD_INT 0
12328: GREATER
12329: PUSH
12330: LD_EXP 32
12334: PUSH
12335: LD_INT 0
12337: EQUAL
12338: AND
12339: IFFALSE 12579
12341: GO 12343
12343: DISABLE
// begin if IsOK ( Claptopn ) then
12344: LD_EXP 11
12348: PPUSH
12349: CALL_OW 302
12353: IFFALSE 12369
// begin Say ( Claptopn , D9b-Eng1-1 ) ;
12355: LD_EXP 11
12359: PPUSH
12360: LD_STRING D9b-Eng1-1
12362: PPUSH
12363: CALL_OW 88
// end else
12367: GO 12565
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
12369: LD_INT 22
12371: PUSH
12372: LD_INT 1
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 21
12381: PUSH
12382: LD_INT 1
12384: PUSH
12385: EMPTY
12386: LIST
12387: LIST
12388: PUSH
12389: LD_INT 25
12391: PUSH
12392: LD_INT 3
12394: PUSH
12395: EMPTY
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 26
12401: PUSH
12402: LD_INT 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: PPUSH
12415: CALL_OW 69
12419: PUSH
12420: LD_EXP 1
12424: PUSH
12425: EMPTY
12426: LIST
12427: PUSH
12428: LD_INT 0
12430: GREATER
12431: DIFF
12432: IFFALSE 12506
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-11 ) ;
12434: LD_INT 22
12436: PUSH
12437: LD_INT 1
12439: PUSH
12440: EMPTY
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 21
12446: PUSH
12447: LD_INT 1
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: LD_INT 26
12466: PUSH
12467: LD_INT 1
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PPUSH
12480: CALL_OW 69
12484: PUSH
12485: LD_EXP 1
12489: PUSH
12490: EMPTY
12491: LIST
12492: DIFF
12493: PPUSH
12494: LD_STRING D9b-Eng1-1
12496: PPUSH
12497: LD_STRING D9b-Eng1-11
12499: PPUSH
12500: CALL 4133 0 3
// end else
12504: GO 12565
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9b-Eng1-1 , D9b-Eng1-1 ) ;
12506: LD_INT 22
12508: PUSH
12509: LD_INT 1
12511: PUSH
12512: EMPTY
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 21
12518: PUSH
12519: LD_INT 1
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: PUSH
12526: LD_INT 26
12528: PUSH
12529: LD_INT 1
12531: PUSH
12532: EMPTY
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: PPUSH
12541: CALL_OW 69
12545: PUSH
12546: LD_EXP 1
12550: PUSH
12551: EMPTY
12552: LIST
12553: DIFF
12554: PPUSH
12555: LD_STRING D9b-Eng1-1
12557: PPUSH
12558: LD_STRING D9b-Eng1-1
12560: PPUSH
12561: CALL 4133 0 3
// end ; end ; if energyVDialog = 0 then
12565: LD_EXP 33
12569: PUSH
12570: LD_INT 0
12572: EQUAL
12573: IFFALSE 12579
// EnergyDialog ;
12575: CALL 4624 0 0
// end ;
12579: END
// every 0 0$1 trigger buildOil = 1 and buildPower = 1 do
12580: LD_EXP 34
12584: PUSH
12585: LD_INT 1
12587: EQUAL
12588: PUSH
12589: LD_EXP 35
12593: PUSH
12594: LD_INT 1
12596: EQUAL
12597: AND
12598: IFFALSE 12610
12600: GO 12602
12602: DISABLE
// ChangeMissionObjectives ( M1a ) ;
12603: LD_STRING M1a
12605: PPUSH
12606: CALL_OW 337
12610: END
// every 3 3$0 do
12611: GO 12613
12613: DISABLE
// begin PrepareFirstAttack ;
12614: CALL 3675 0 0
// end ;
12618: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 250 ] ] ] ) > 0 and firstRussianAttack = 1 do var i ;
12619: LD_INT 22
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: PUSH
12629: LD_INT 21
12631: PUSH
12632: LD_INT 1
12634: PUSH
12635: EMPTY
12636: LIST
12637: LIST
12638: PUSH
12639: LD_INT 3
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 250
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: PPUSH
12661: CALL_OW 69
12665: PUSH
12666: LD_INT 0
12668: GREATER
12669: PUSH
12670: LD_EXP 23
12674: PUSH
12675: LD_INT 1
12677: EQUAL
12678: AND
12679: IFFALSE 12980
12681: GO 12683
12683: DISABLE
12684: LD_INT 0
12686: PPUSH
// begin firstRussianAttack = 2 ;
12687: LD_ADDR_EXP 23
12691: PUSH
12692: LD_INT 2
12694: ST_TO_ADDR
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 125 , 98 ) ;
12695: LD_INT 22
12697: PUSH
12698: LD_INT 5
12700: PUSH
12701: EMPTY
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 21
12707: PUSH
12708: LD_INT 1
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PPUSH
12719: CALL_OW 69
12723: PPUSH
12724: LD_INT 125
12726: PPUSH
12727: LD_INT 98
12729: PPUSH
12730: CALL_OW 111
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1-Sol1-1 , DAtt1-FSol1-1 ) ;
12734: LD_INT 22
12736: PUSH
12737: LD_INT 1
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 21
12746: PUSH
12747: LD_INT 1
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: PUSH
12754: EMPTY
12755: LIST
12756: LIST
12757: PPUSH
12758: CALL_OW 69
12762: PUSH
12763: LD_EXP 1
12767: PUSH
12768: LD_EXP 7
12772: PUSH
12773: LD_EXP 4
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: DIFF
12783: PPUSH
12784: LD_STRING DAtt1-Sol1-1
12786: PPUSH
12787: LD_STRING DAtt1-FSol1-1
12789: PPUSH
12790: CALL 4133 0 3
// Say ( JMM , DAtt1-JMM-1 ) ;
12794: LD_EXP 1
12798: PPUSH
12799: LD_STRING DAtt1-JMM-1
12801: PPUSH
12802: CALL_OW 88
// if Lisa then
12806: LD_EXP 4
12810: IFFALSE 12826
// begin Say ( Lisa , DAtt1a-Lisa-1 ) ;
12812: LD_EXP 4
12816: PPUSH
12817: LD_STRING DAtt1a-Lisa-1
12819: PPUSH
12820: CALL_OW 88
// end else
12824: GO 12897
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1a-Sol1-1 , DAtt1-FSol1-1 ) ;
12826: LD_INT 22
12828: PUSH
12829: LD_INT 1
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 21
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 26
12848: PUSH
12849: LD_INT 1
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: LIST
12860: PPUSH
12861: CALL_OW 69
12865: PUSH
12866: LD_EXP 1
12870: PUSH
12871: LD_EXP 7
12875: PUSH
12876: LD_EXP 4
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: DIFF
12886: PPUSH
12887: LD_STRING DAtt1a-Sol1-1
12889: PPUSH
12890: LD_STRING DAtt1-FSol1-1
12892: PPUSH
12893: CALL 4133 0 3
// end ; Say ( JMM , DAtt1a-JMM-1 ) ;
12897: LD_EXP 1
12901: PPUSH
12902: LD_STRING DAtt1a-JMM-1
12904: PPUSH
12905: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Lisa ] , DAtt1b-Sol1-1 , DAtt1a-Sol1-1 ) ;
12909: LD_INT 22
12911: PUSH
12912: LD_INT 1
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 21
12921: PUSH
12922: LD_INT 1
12924: PUSH
12925: EMPTY
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 26
12931: PUSH
12932: LD_INT 1
12934: PUSH
12935: EMPTY
12936: LIST
12937: LIST
12938: PUSH
12939: EMPTY
12940: LIST
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 69
12948: PUSH
12949: LD_EXP 1
12953: PUSH
12954: LD_EXP 7
12958: PUSH
12959: LD_EXP 4
12963: PUSH
12964: EMPTY
12965: LIST
12966: LIST
12967: LIST
12968: DIFF
12969: PPUSH
12970: LD_STRING DAtt1b-Sol1-1
12972: PPUSH
12973: LD_STRING DAtt1a-Sol1-1
12975: PPUSH
12976: CALL 4133 0 3
// end ;
12980: PPOPN 1
12982: END
// every 0 0$1 trigger firstRussianAttack = 2 do var i ;
12983: LD_EXP 23
12987: PUSH
12988: LD_INT 2
12990: EQUAL
12991: IFFALSE 13053
12993: GO 12995
12995: DISABLE
12996: LD_INT 0
12998: PPUSH
// begin enable ;
12999: ENABLE
// for i in FilterUnitsInArea ( RussianEscape , [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) do
13000: LD_ADDR_VAR 0 1
13004: PUSH
13005: LD_INT 5
13007: PPUSH
13008: LD_INT 22
13010: PUSH
13011: LD_INT 5
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 21
13020: PUSH
13021: LD_INT 1
13023: PUSH
13024: EMPTY
13025: LIST
13026: LIST
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PPUSH
13032: CALL_OW 70
13036: PUSH
13037: FOR_IN
13038: IFFALSE 13051
// RemoveUnit ( i ) ;
13040: LD_VAR 0 1
13044: PPUSH
13045: CALL_OW 64
13049: GO 13037
13051: POP
13052: POP
// end ;
13053: PPOPN 1
13055: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 5 ] ] ) = 0 and firstRussianAttack = 2 do
13056: LD_INT 22
13058: PUSH
13059: LD_INT 5
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: PPUSH
13069: CALL_OW 69
13073: PUSH
13074: LD_INT 0
13076: EQUAL
13077: PUSH
13078: LD_EXP 23
13082: PUSH
13083: LD_INT 2
13085: EQUAL
13086: AND
13087: IFFALSE 13100
13089: GO 13091
13091: DISABLE
// firstRussianAttack = 3 ;
13092: LD_ADDR_EXP 23
13096: PUSH
13097: LD_INT 3
13099: ST_TO_ADDR
13100: END
// every 0 0$01 trigger timeToSupport = 0 0$00 do
13101: LD_EXP 28
13105: PUSH
13106: LD_INT 0
13108: EQUAL
13109: IFFALSE 13190
13111: GO 13113
13113: DISABLE
// begin timerStatus = 4 ;
13114: LD_ADDR_EXP 29
13118: PUSH
13119: LD_INT 4
13121: ST_TO_ADDR
// DialogueOn ;
13122: CALL_OW 6
// SayRadio ( Donaldson , D2-Don-1 ) ;
13126: LD_EXP 13
13130: PPUSH
13131: LD_STRING D2-Don-1
13133: PPUSH
13134: CALL_OW 94
// Say ( JMM , D2-JMM-1 ) ;
13138: LD_EXP 1
13142: PPUSH
13143: LD_STRING D2-JMM-1
13145: PPUSH
13146: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-2 ) ;
13150: LD_EXP 13
13154: PPUSH
13155: LD_STRING D2-Don-2
13157: PPUSH
13158: CALL_OW 94
// Say ( JMM , D2-JMM-2 ) ;
13162: LD_EXP 1
13166: PPUSH
13167: LD_STRING D2-JMM-2
13169: PPUSH
13170: CALL_OW 88
// SayRadio ( Donaldson , D2-Don-3 ) ;
13174: LD_EXP 13
13178: PPUSH
13179: LD_STRING D2-Don-3
13181: PPUSH
13182: CALL_OW 94
// DialogueOff ;
13186: CALL_OW 7
// end ;
13190: END
// every 12 12$0 do var tmp ;
13191: GO 13193
13193: DISABLE
13194: LD_INT 0
13196: PPUSH
// begin PrepareDonaldsonArmy ;
13197: CALL 1062 0 0
// CenterNowOnUnits ( Donaldson ) ;
13201: LD_EXP 13
13205: PPUSH
13206: CALL_OW 87
// tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 1 ] ] ) diff [ Frank ] ;
13210: LD_ADDR_VAR 0 1
13214: PUSH
13215: LD_INT 22
13217: PUSH
13218: LD_INT 4
13220: PUSH
13221: EMPTY
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 21
13227: PUSH
13228: LD_INT 1
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 26
13237: PUSH
13238: LD_INT 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PPUSH
13261: CALL_OW 69
13265: PUSH
13266: LD_EXP 5
13270: PUSH
13271: EMPTY
13272: LIST
13273: DIFF
13274: ST_TO_ADDR
// DialogueOn ;
13275: CALL_OW 6
// DialogRandom ( tmp , D3-Sol1-1 , D3-Sol1-1 ) ;
13279: LD_VAR 0 1
13283: PPUSH
13284: LD_STRING D3-Sol1-1
13286: PPUSH
13287: LD_STRING D3-Sol1-1
13289: PPUSH
13290: CALL 4133 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] , [ f_sex , 1 ] , [ f_class , 3 ] ] ) , D3-Sol2-1 , D3-Sol2-1 ) ;
13294: LD_INT 22
13296: PUSH
13297: LD_INT 4
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 21
13306: PUSH
13307: LD_INT 1
13309: PUSH
13310: EMPTY
13311: LIST
13312: LIST
13313: PUSH
13314: LD_INT 26
13316: PUSH
13317: LD_INT 1
13319: PUSH
13320: EMPTY
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 25
13326: PUSH
13327: LD_INT 3
13329: PUSH
13330: EMPTY
13331: LIST
13332: LIST
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: PPUSH
13345: LD_STRING D3-Sol2-1
13347: PPUSH
13348: LD_STRING D3-Sol2-1
13350: PPUSH
13351: CALL 4133 0 3
// if Frank then
13355: LD_EXP 5
13359: IFFALSE 13373
// Say ( Frank , D3-Frank-1 ) ;
13361: LD_EXP 5
13365: PPUSH
13366: LD_STRING D3-Frank-1
13368: PPUSH
13369: CALL_OW 88
// Say ( Donaldson , D3-Don-1 ) ;
13373: LD_EXP 13
13377: PPUSH
13378: LD_STRING D3-Don-1
13380: PPUSH
13381: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-1a ) ;
13385: LD_EXP 13
13389: PPUSH
13390: LD_STRING D3-Don-1a
13392: PPUSH
13393: CALL_OW 94
// Say ( JMM , D3-JMM-1 ) ;
13397: LD_EXP 1
13401: PPUSH
13402: LD_STRING D3-JMM-1
13404: PPUSH
13405: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-2 ) ;
13409: LD_EXP 13
13413: PPUSH
13414: LD_STRING D3-Don-2
13416: PPUSH
13417: CALL_OW 94
// if FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) > 0 then
13421: LD_INT 22
13423: PUSH
13424: LD_INT 6
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 21
13433: PUSH
13434: LD_INT 1
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: EMPTY
13442: LIST
13443: LIST
13444: PPUSH
13445: CALL_OW 69
13449: PUSH
13450: LD_INT 0
13452: GREATER
13453: IFFALSE 13591
// begin Say ( JMM , D3-JMM-2 ) ;
13455: LD_EXP 1
13459: PPUSH
13460: LD_STRING D3-JMM-2
13462: PPUSH
13463: CALL_OW 88
// SayRadio ( Donaldson , D3-Don-3 ) ;
13467: LD_EXP 13
13471: PPUSH
13472: LD_STRING D3-Don-3
13474: PPUSH
13475: CALL_OW 94
// Say ( JMM , D3-JMM-3 ) ;
13479: LD_EXP 1
13483: PPUSH
13484: LD_STRING D3-JMM-3
13486: PPUSH
13487: CALL_OW 88
// if IsOK ( Frank ) then
13491: LD_EXP 5
13495: PPUSH
13496: CALL_OW 302
13500: IFFALSE 13514
// Say ( Frank , D3-Frank-3 ) ;
13502: LD_EXP 5
13506: PPUSH
13507: LD_STRING D3-Frank-3
13509: PPUSH
13510: CALL_OW 88
// DialogueOff ;
13514: CALL_OW 7
// if IsOK ( Frank ) then
13518: LD_EXP 5
13522: PPUSH
13523: CALL_OW 302
13527: IFFALSE 13589
// begin SetSide ( Frank , 0 ) ;
13529: LD_EXP 5
13533: PPUSH
13534: LD_INT 0
13536: PPUSH
13537: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13541: LD_EXP 5
13545: PPUSH
13546: LD_INT 12
13548: PPUSH
13549: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13553: LD_EXP 5
13557: PPUSH
13558: LD_STRING 04t_Frank
13560: PPUSH
13561: CALL_OW 38
// Wait ( 0 0$3 ) ;
13565: LD_INT 105
13567: PPUSH
13568: CALL_OW 67
// frankScoutBase = 1 ;
13572: LD_ADDR_EXP 25
13576: PUSH
13577: LD_INT 1
13579: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13580: LD_EXP 5
13584: PPUSH
13585: CALL_OW 64
// end ; end else
13589: GO 13678
// begin Say ( JMM , D3-JMM-4 ) ;
13591: LD_EXP 1
13595: PPUSH
13596: LD_STRING D3-JMM-4
13598: PPUSH
13599: CALL_OW 88
// DialogueOff ;
13603: CALL_OW 7
// if IsOK ( Frank ) then
13607: LD_EXP 5
13611: PPUSH
13612: CALL_OW 302
13616: IFFALSE 13678
// begin SetSide ( Frank , 0 ) ;
13618: LD_EXP 5
13622: PPUSH
13623: LD_INT 0
13625: PPUSH
13626: CALL_OW 235
// ComMoveToArea ( Frank , FrankSpot ) ;
13630: LD_EXP 5
13634: PPUSH
13635: LD_INT 12
13637: PPUSH
13638: CALL_OW 113
// SaveCharacters ( Frank , 04t_Frank ) ;
13642: LD_EXP 5
13646: PPUSH
13647: LD_STRING 04t_Frank
13649: PPUSH
13650: CALL_OW 38
// Wait ( 0 0$3 ) ;
13654: LD_INT 105
13656: PPUSH
13657: CALL_OW 67
// frankScoutBase = 1 ;
13661: LD_ADDR_EXP 25
13665: PUSH
13666: LD_INT 1
13668: ST_TO_ADDR
// RemoveUnit ( Frank ) ;
13669: LD_EXP 5
13673: PPUSH
13674: CALL_OW 64
// end ; end ; end ;
13678: PPOPN 1
13680: END
// every 7 7$0 trigger GetSide ( Donaldson ) = 4 and IsOK ( Donaldson ) do
13681: LD_EXP 13
13685: PPUSH
13686: CALL_OW 255
13690: PUSH
13691: LD_INT 4
13693: EQUAL
13694: PUSH
13695: LD_EXP 13
13699: PPUSH
13700: CALL_OW 302
13704: AND
13705: IFFALSE 13730
13707: GO 13709
13709: DISABLE
// begin SayRadio ( Donaldson , D3b-Don-1 ) ;
13710: LD_EXP 13
13714: PPUSH
13715: LD_STRING D3b-Don-1
13717: PPUSH
13718: CALL_OW 94
// donaldsonCoopAttack = 1 ;
13722: LD_ADDR_EXP 41
13726: PUSH
13727: LD_INT 1
13729: ST_TO_ADDR
// end ;
13730: END
// every 0 0$1 trigger saveDonaldson = 0 do var i , j ;
13731: LD_EXP 24
13735: PUSH
13736: LD_INT 0
13738: EQUAL
13739: IFFALSE 13895
13741: GO 13743
13743: DISABLE
13744: LD_INT 0
13746: PPUSH
13747: PPUSH
// begin enable ;
13748: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) do
13749: LD_ADDR_VAR 0 1
13753: PUSH
13754: LD_INT 22
13756: PUSH
13757: LD_INT 4
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PUSH
13764: LD_INT 21
13766: PUSH
13767: LD_INT 1
13769: PUSH
13770: EMPTY
13771: LIST
13772: LIST
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: PPUSH
13778: CALL_OW 69
13782: PUSH
13783: FOR_IN
13784: IFFALSE 13893
// begin for j in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
13786: LD_ADDR_VAR 0 2
13790: PUSH
13791: LD_INT 22
13793: PUSH
13794: LD_INT 1
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 21
13803: PUSH
13804: LD_INT 1
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PPUSH
13815: CALL_OW 69
13819: PUSH
13820: FOR_IN
13821: IFFALSE 13889
// begin if GetDistUnits ( i , j ) < 7 then
13823: LD_VAR 0 1
13827: PPUSH
13828: LD_VAR 0 2
13832: PPUSH
13833: CALL_OW 296
13837: PUSH
13838: LD_INT 7
13840: LESS
13841: IFFALSE 13887
// begin saveDonaldson = 1 ;
13843: LD_ADDR_EXP 24
13847: PUSH
13848: LD_INT 1
13850: ST_TO_ADDR
// SetSide ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) , 1 ) ;
13851: LD_INT 22
13853: PUSH
13854: LD_INT 4
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: PUSH
13861: LD_INT 21
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: PUSH
13871: EMPTY
13872: LIST
13873: LIST
13874: PPUSH
13875: CALL_OW 69
13879: PPUSH
13880: LD_INT 1
13882: PPUSH
13883: CALL_OW 235
// end ; end ;
13887: GO 13820
13889: POP
13890: POP
// end ;
13891: GO 13783
13893: POP
13894: POP
// end ;
13895: PPOPN 2
13897: END
// every 2 2$0 trigger saveDonaldson = 1 do
13898: LD_EXP 24
13902: PUSH
13903: LD_INT 1
13905: EQUAL
13906: IFFALSE 14218
13908: GO 13910
13910: DISABLE
// begin uc_side = 4 ;
13911: LD_ADDR_OWVAR 20
13915: PUSH
13916: LD_INT 4
13918: ST_TO_ADDR
// uc_nation = 1 ;
13919: LD_ADDR_OWVAR 21
13923: PUSH
13924: LD_INT 1
13926: ST_TO_ADDR
// Frank = CreateCharacter ( 04t_Frank ) ;
13927: LD_ADDR_EXP 5
13931: PUSH
13932: LD_STRING 04t_Frank
13934: PPUSH
13935: CALL_OW 34
13939: ST_TO_ADDR
// if not Frank then
13940: LD_EXP 5
13944: NOT
13945: IFFALSE 13949
// exit ;
13947: GO 14218
// PlaceUnitArea ( Frank , FrankSpawn , false ) ;
13949: LD_EXP 5
13953: PPUSH
13954: LD_INT 13
13956: PPUSH
13957: LD_INT 0
13959: PPUSH
13960: CALL_OW 49
// repeat wait ( 0 0$1 ) ;
13964: LD_INT 35
13966: PPUSH
13967: CALL_OW 67
// if not IsInUnit ( JMM ) and GetDistUnits ( JMM , ambdept0 ) < 20 then
13971: LD_EXP 1
13975: PPUSH
13976: CALL_OW 310
13980: NOT
13981: PUSH
13982: LD_EXP 1
13986: PPUSH
13987: LD_INT 4
13989: PPUSH
13990: CALL_OW 296
13994: PUSH
13995: LD_INT 20
13997: LESS
13998: AND
13999: IFFALSE 14032
// ComMoveXY ( Frank , GetX ( JMM ) , GetY ( JMM ) ) else
14001: LD_EXP 5
14005: PPUSH
14006: LD_EXP 1
14010: PPUSH
14011: CALL_OW 250
14015: PPUSH
14016: LD_EXP 1
14020: PPUSH
14021: CALL_OW 251
14025: PPUSH
14026: CALL_OW 111
14030: GO 14047
// ComMoveXY ( Frank , 51 , 15 ) ;
14032: LD_EXP 5
14036: PPUSH
14037: LD_INT 51
14039: PPUSH
14040: LD_INT 15
14042: PPUSH
14043: CALL_OW 111
// until GetDistUnits ( Frank , JMM ) < 10 ;
14047: LD_EXP 5
14051: PPUSH
14052: LD_EXP 1
14056: PPUSH
14057: CALL_OW 296
14061: PUSH
14062: LD_INT 10
14064: LESS
14065: IFFALSE 13964
// CenterNowOnUnits ( [ JMM , Frank ] ) ;
14067: LD_EXP 1
14071: PUSH
14072: LD_EXP 5
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PPUSH
14081: CALL_OW 87
// DialogueOn ;
14085: CALL_OW 6
// Say ( Frank , D3a-Frank-1 ) ;
14089: LD_EXP 5
14093: PPUSH
14094: LD_STRING D3a-Frank-1
14096: PPUSH
14097: CALL_OW 88
// if Lisa then
14101: LD_EXP 4
14105: IFFALSE 14155
// begin Say ( Lisa , D3a-Lisa-1 ) ;
14107: LD_EXP 4
14111: PPUSH
14112: LD_STRING D3a-Lisa-1
14114: PPUSH
14115: CALL_OW 88
// Say ( Frank , D3a-Frank-2 ) ;
14119: LD_EXP 5
14123: PPUSH
14124: LD_STRING D3a-Frank-2
14126: PPUSH
14127: CALL_OW 88
// Say ( Lisa , D3a-Lisa-2 ) ;
14131: LD_EXP 4
14135: PPUSH
14136: LD_STRING D3a-Lisa-2
14138: PPUSH
14139: CALL_OW 88
// Say ( Frank , D3a-Frank-3 ) ;
14143: LD_EXP 5
14147: PPUSH
14148: LD_STRING D3a-Frank-3
14150: PPUSH
14151: CALL_OW 88
// end ; Say ( JMM , D3a-JMM-3 ) ;
14155: LD_EXP 1
14159: PPUSH
14160: LD_STRING D3a-JMM-3
14162: PPUSH
14163: CALL_OW 88
// DialogueOff ;
14167: CALL_OW 7
// SetSide ( Frank , 1 ) ;
14171: LD_EXP 5
14175: PPUSH
14176: LD_INT 1
14178: PPUSH
14179: CALL_OW 235
// InGameOn ;
14183: CALL_OW 8
// RevealFogArea ( 1 , RussianBase ) ;
14187: LD_INT 1
14189: PPUSH
14190: LD_INT 7
14192: PPUSH
14193: CALL_OW 332
// CenterOnXY ( 93 , 91 ) ;
14197: LD_INT 93
14199: PPUSH
14200: LD_INT 91
14202: PPUSH
14203: CALL_OW 84
// wait ( 0 0$5 ) ;
14207: LD_INT 175
14209: PPUSH
14210: CALL_OW 67
// InGameOff ;
14214: CALL_OW 9
// end ;
14218: END
// every 12 12$0 trigger Difficulty = 2 or Difficulty = 3 do
14219: LD_OWVAR 67
14223: PUSH
14224: LD_INT 2
14226: EQUAL
14227: PUSH
14228: LD_OWVAR 67
14232: PUSH
14233: LD_INT 3
14235: EQUAL
14236: OR
14237: IFFALSE 14261
14239: GO 14241
14241: DISABLE
// ComConstruct ( rubfact0 , 24 , 1 , 1 , 53 ) ;
14242: LD_INT 24
14244: PPUSH
14245: LD_INT 24
14247: PPUSH
14248: LD_INT 1
14250: PPUSH
14251: LD_INT 1
14253: PPUSH
14254: LD_INT 53
14256: PPUSH
14257: CALL_OW 125
14261: END
// every 18 18$0 do
14262: GO 14264
14264: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
14265: LD_EXP 14
14269: PPUSH
14270: LD_STRING D4-Har-1
14272: PPUSH
14273: CALL_OW 94
// Say ( JMM , D4-JMM-1 ) ;
14277: LD_EXP 1
14281: PPUSH
14282: LD_STRING D4-JMM-1
14284: PPUSH
14285: CALL_OW 88
// SayRadio ( Harisson , D4-Har-2 ) ;
14289: LD_EXP 14
14293: PPUSH
14294: LD_STRING D4-Har-2
14296: PPUSH
14297: CALL_OW 94
// case query ( Q1 ) of 1 :
14301: LD_STRING Q1
14303: PPUSH
14304: CALL_OW 97
14308: PUSH
14309: LD_INT 1
14311: DOUBLE
14312: EQUAL
14313: IFTRUE 14317
14315: GO 14376
14317: POP
// begin Say ( JMM , D5-JMM-1 ) ;
14318: LD_EXP 1
14322: PPUSH
14323: LD_STRING D5-JMM-1
14325: PPUSH
14326: CALL_OW 88
// SayRadio ( Harisson , D5-Har-1 ) ;
14330: LD_EXP 14
14334: PPUSH
14335: LD_STRING D5-Har-1
14337: PPUSH
14338: CALL_OW 94
// timeToSupport = 10 10$0 ;
14342: LD_ADDR_EXP 28
14346: PUSH
14347: LD_INT 21000
14349: ST_TO_ADDR
// timerStatus = 2 ;
14350: LD_ADDR_EXP 29
14354: PUSH
14355: LD_INT 2
14357: ST_TO_ADDR
// startTimer = 1 ;
14358: LD_ADDR_EXP 30
14362: PUSH
14363: LD_INT 1
14365: ST_TO_ADDR
// harrAnswer = 1 ;
14366: LD_ADDR_EXP 26
14370: PUSH
14371: LD_INT 1
14373: ST_TO_ADDR
// end ; 2 :
14374: GO 14511
14376: LD_INT 2
14378: DOUBLE
14379: EQUAL
14380: IFTRUE 14384
14382: GO 14443
14384: POP
// begin Say ( JMM , D5-JMM-2 ) ;
14385: LD_EXP 1
14389: PPUSH
14390: LD_STRING D5-JMM-2
14392: PPUSH
14393: CALL_OW 88
// SayRadio ( Harisson , D5-Har-2 ) ;
14397: LD_EXP 14
14401: PPUSH
14402: LD_STRING D5-Har-2
14404: PPUSH
14405: CALL_OW 94
// timeToSupport = 5 5$0 ;
14409: LD_ADDR_EXP 28
14413: PUSH
14414: LD_INT 10500
14416: ST_TO_ADDR
// timerStatus = 2 ;
14417: LD_ADDR_EXP 29
14421: PUSH
14422: LD_INT 2
14424: ST_TO_ADDR
// startTimer = 1 ;
14425: LD_ADDR_EXP 30
14429: PUSH
14430: LD_INT 1
14432: ST_TO_ADDR
// harrAnswer = 2 ;
14433: LD_ADDR_EXP 26
14437: PUSH
14438: LD_INT 2
14440: ST_TO_ADDR
// end ; 3 :
14441: GO 14511
14443: LD_INT 3
14445: DOUBLE
14446: EQUAL
14447: IFTRUE 14451
14449: GO 14510
14451: POP
// begin Say ( JMM , D5-JMM-3 ) ;
14452: LD_EXP 1
14456: PPUSH
14457: LD_STRING D5-JMM-3
14459: PPUSH
14460: CALL_OW 88
// SayRadio ( Harisson , D5-Har-3 ) ;
14464: LD_EXP 14
14468: PPUSH
14469: LD_STRING D5-Har-3
14471: PPUSH
14472: CALL_OW 94
// timeToSupport = 5 5$0 ;
14476: LD_ADDR_EXP 28
14480: PUSH
14481: LD_INT 10500
14483: ST_TO_ADDR
// timerStatus = 2 ;
14484: LD_ADDR_EXP 29
14488: PUSH
14489: LD_INT 2
14491: ST_TO_ADDR
// startTimer = 1 ;
14492: LD_ADDR_EXP 30
14496: PUSH
14497: LD_INT 1
14499: ST_TO_ADDR
// harrAnswer = 3 ;
14500: LD_ADDR_EXP 26
14504: PUSH
14505: LD_INT 3
14507: ST_TO_ADDR
// end ; end ;
14508: GO 14511
14510: POP
// end ;
14511: END
// every 0 0$01 trigger timerStatus = 2 and timeToSupport = 0 0$00 do
14512: LD_EXP 29
14516: PUSH
14517: LD_INT 2
14519: EQUAL
14520: PUSH
14521: LD_EXP 28
14525: PUSH
14526: LD_INT 0
14528: EQUAL
14529: AND
14530: IFFALSE 14807
14532: GO 14534
14534: DISABLE
// begin timerStatus = 4 ;
14535: LD_ADDR_EXP 29
14539: PUSH
14540: LD_INT 4
14542: ST_TO_ADDR
// if harrAnswer = 1 then
14543: LD_EXP 26
14547: PUSH
14548: LD_INT 1
14550: EQUAL
14551: IFFALSE 14631
// begin PrepareHarrisonSupport ( 3 ) ;
14553: LD_INT 3
14555: PPUSH
14556: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14560: LD_INT 2100
14562: PPUSH
14563: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14567: LD_EXP 14
14571: PPUSH
14572: LD_STRING D7-Har-1
14574: PPUSH
14575: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14579: LD_STRING M2
14581: PPUSH
14582: CALL_OW 337
// timeToDestroyRuBase = 15 15$0 + [ 5 5$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14586: LD_ADDR_EXP 27
14590: PUSH
14591: LD_INT 31500
14593: PUSH
14594: LD_INT 10500
14596: PUSH
14597: LD_INT 8400
14599: PUSH
14600: LD_INT 6300
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_OWVAR 67
14612: ARRAY
14613: PLUS
14614: ST_TO_ADDR
// startTimer = 1 ;
14615: LD_ADDR_EXP 30
14619: PUSH
14620: LD_INT 1
14622: ST_TO_ADDR
// timerStatus = 3 ;
14623: LD_ADDR_EXP 29
14627: PUSH
14628: LD_INT 3
14630: ST_TO_ADDR
// end ; if harrAnswer = 2 then
14631: LD_EXP 26
14635: PUSH
14636: LD_INT 2
14638: EQUAL
14639: IFFALSE 14719
// begin PrepareHarrisonSupport ( 4 ) ;
14641: LD_INT 4
14643: PPUSH
14644: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14648: LD_INT 2100
14650: PPUSH
14651: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14655: LD_EXP 14
14659: PPUSH
14660: LD_STRING D7-Har-1
14662: PPUSH
14663: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14667: LD_STRING M2
14669: PPUSH
14670: CALL_OW 337
// timeToDestroyRuBase = 13 13$0 + [ 4 4$0 , 4 4$0 , 3 3$0 ] [ Difficulty ] ;
14674: LD_ADDR_EXP 27
14678: PUSH
14679: LD_INT 27300
14681: PUSH
14682: LD_INT 8400
14684: PUSH
14685: LD_INT 8400
14687: PUSH
14688: LD_INT 6300
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: LIST
14695: PUSH
14696: LD_OWVAR 67
14700: ARRAY
14701: PLUS
14702: ST_TO_ADDR
// startTimer = 1 ;
14703: LD_ADDR_EXP 30
14707: PUSH
14708: LD_INT 1
14710: ST_TO_ADDR
// timerStatus = 3 ;
14711: LD_ADDR_EXP 29
14715: PUSH
14716: LD_INT 3
14718: ST_TO_ADDR
// end ; if harrAnswer = 3 then
14719: LD_EXP 26
14723: PUSH
14724: LD_INT 3
14726: EQUAL
14727: IFFALSE 14807
// begin PrepareHarrisonSupport ( 5 ) ;
14729: LD_INT 5
14731: PPUSH
14732: CALL 1632 0 1
// wait ( 1 1$0 ) ;
14736: LD_INT 2100
14738: PPUSH
14739: CALL_OW 67
// SayRadio ( Harisson , D7-Har-1 ) ;
14743: LD_EXP 14
14747: PPUSH
14748: LD_STRING D7-Har-1
14750: PPUSH
14751: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
14755: LD_STRING M2
14757: PPUSH
14758: CALL_OW 337
// timeToDestroyRuBase = 10 10$0 + [ 4 4$0 , 3 3$0 , 2 2$0 ] [ Difficulty ] ;
14762: LD_ADDR_EXP 27
14766: PUSH
14767: LD_INT 21000
14769: PUSH
14770: LD_INT 8400
14772: PUSH
14773: LD_INT 6300
14775: PUSH
14776: LD_INT 4200
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: PUSH
14784: LD_OWVAR 67
14788: ARRAY
14789: PLUS
14790: ST_TO_ADDR
// startTimer = 1 ;
14791: LD_ADDR_EXP 30
14795: PUSH
14796: LD_INT 1
14798: ST_TO_ADDR
// timerStatus = 3 ;
14799: LD_ADDR_EXP 29
14803: PUSH
14804: LD_INT 3
14806: ST_TO_ADDR
// end ; end ;
14807: END
// every 0 0$1 trigger timeToDestroyRuBase <= 4 4$00 and timerStatus = 3 do
14808: LD_EXP 27
14812: PUSH
14813: LD_INT 8400
14815: LESSEQUAL
14816: PUSH
14817: LD_EXP 29
14821: PUSH
14822: LD_INT 3
14824: EQUAL
14825: AND
14826: IFFALSE 14858
14828: GO 14830
14830: DISABLE
// begin DialogueOn ;
14831: CALL_OW 6
// SayRadio ( Harisson , D7a-Har-1 ) ;
14835: LD_EXP 14
14839: PPUSH
14840: LD_STRING D7a-Har-1
14842: PPUSH
14843: CALL_OW 94
// DialogueOff ;
14847: CALL_OW 7
// ChangeMissionObjectives ( M2a ) ;
14851: LD_STRING M2a
14853: PPUSH
14854: CALL_OW 337
// end ;
14858: END
// every 0 0$1 trigger timeToDestroyRuBase <= 0 0$00 and timerStatus = 3 and not escapeAvalaible do var tmp ;
14859: LD_EXP 27
14863: PUSH
14864: LD_INT 0
14866: LESSEQUAL
14867: PUSH
14868: LD_EXP 29
14872: PUSH
14873: LD_INT 3
14875: EQUAL
14876: AND
14877: PUSH
14878: LD_EXP 40
14882: NOT
14883: AND
14884: IFFALSE 15023
14886: GO 14888
14888: DISABLE
14889: LD_INT 0
14891: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) diff [ JMM ] ;
14892: LD_ADDR_VAR 0 1
14896: PUSH
14897: LD_INT 22
14899: PUSH
14900: LD_INT 1
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PPUSH
14907: CALL_OW 69
14911: PUSH
14912: LD_EXP 1
14916: PUSH
14917: EMPTY
14918: LIST
14919: DIFF
14920: ST_TO_ADDR
// saveDonaldson = 2 ;
14921: LD_ADDR_EXP 24
14925: PUSH
14926: LD_INT 2
14928: ST_TO_ADDR
// DialogueOn ;
14929: CALL_OW 6
// if IsOK ( Donaldson ) then
14933: LD_EXP 13
14937: PPUSH
14938: CALL_OW 302
14942: IFFALSE 14958
// begin SayRadio ( Harisson , D8-Har-1 ) ;
14944: LD_EXP 14
14948: PPUSH
14949: LD_STRING D8-Har-1
14951: PPUSH
14952: CALL_OW 94
// end else
14956: GO 14970
// begin SayRadio ( Harisson , D8-Har-1a ) ;
14958: LD_EXP 14
14962: PPUSH
14963: LD_STRING D8-Har-1a
14965: PPUSH
14966: CALL_OW 94
// end ; DialogueOff ;
14970: CALL_OW 7
// SetSide ( tmp , 4 ) ;
14974: LD_VAR 0 1
14978: PPUSH
14979: LD_INT 4
14981: PPUSH
14982: CALL_OW 235
// ComAgressiveMove ( tmp , 88 , 89 ) ;
14986: LD_VAR 0 1
14990: PPUSH
14991: LD_INT 88
14993: PPUSH
14994: LD_INT 89
14996: PPUSH
14997: CALL_OW 114
// honor = 0 ;
15001: LD_ADDR_EXP 39
15005: PUSH
15006: LD_INT 0
15008: ST_TO_ADDR
// wait ( 0 0$10 ) ;
15009: LD_INT 350
15011: PPUSH
15012: CALL_OW 67
// YouLost ( LostCommand ) ;
15016: LD_STRING LostCommand
15018: PPUSH
15019: CALL_OW 104
// end ;
15023: PPOPN 1
15025: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) = 0 and baseReadyToBuild = 0 and bonusAvalaible = 1 do var i , tmp ;
15026: LD_INT 22
15028: PUSH
15029: LD_INT 6
15031: PUSH
15032: EMPTY
15033: LIST
15034: LIST
15035: PUSH
15036: LD_INT 21
15038: PUSH
15039: LD_INT 1
15041: PUSH
15042: EMPTY
15043: LIST
15044: LIST
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: PPUSH
15050: CALL_OW 69
15054: PUSH
15055: LD_INT 0
15057: EQUAL
15058: PUSH
15059: LD_EXP 20
15063: PUSH
15064: LD_INT 0
15066: EQUAL
15067: AND
15068: PUSH
15069: LD_EXP 42
15073: PUSH
15074: LD_INT 1
15076: EQUAL
15077: AND
15078: IFFALSE 15172
15080: GO 15082
15082: DISABLE
15083: LD_INT 0
15085: PPUSH
15086: PPUSH
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] ] ) ;
15087: LD_ADDR_VAR 0 2
15091: PUSH
15092: LD_INT 22
15094: PUSH
15095: LD_INT 1
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: PUSH
15102: LD_INT 21
15104: PUSH
15105: LD_INT 1
15107: PUSH
15108: EMPTY
15109: LIST
15110: LIST
15111: PUSH
15112: LD_INT 23
15114: PUSH
15115: LD_INT 1
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: PUSH
15122: EMPTY
15123: LIST
15124: LIST
15125: LIST
15126: PPUSH
15127: CALL_OW 69
15131: ST_TO_ADDR
// for i in tmp do
15132: LD_ADDR_VAR 0 1
15136: PUSH
15137: LD_VAR 0 2
15141: PUSH
15142: FOR_IN
15143: IFFALSE 15170
// begin AddExperience ( i , rand ( 1 , 4 ) , 500 ) ;
15145: LD_VAR 0 1
15149: PPUSH
15150: LD_INT 1
15152: PPUSH
15153: LD_INT 4
15155: PPUSH
15156: CALL_OW 12
15160: PPUSH
15161: LD_INT 500
15163: PPUSH
15164: CALL_OW 492
// end ;
15168: GO 15142
15170: POP
15171: POP
// end ; end_of_file
15172: PPOPN 2
15174: END
// export enemyWayX , enemyWayY ; every 3 3$0 do var rnd ;
15175: GO 15177
15177: DISABLE
15178: LD_INT 0
15180: PPUSH
// begin enemyWayX = [ ] ;
15181: LD_ADDR_EXP 46
15185: PUSH
15186: EMPTY
15187: ST_TO_ADDR
// enemyWayY = [ ] ;
15188: LD_ADDR_EXP 47
15192: PUSH
15193: EMPTY
15194: ST_TO_ADDR
// rnd = rand ( 1 , 3 ) ;
15195: LD_ADDR_VAR 0 1
15199: PUSH
15200: LD_INT 1
15202: PPUSH
15203: LD_INT 3
15205: PPUSH
15206: CALL_OW 12
15210: ST_TO_ADDR
// if rnd = 1 then
15211: LD_VAR 0 1
15215: PUSH
15216: LD_INT 1
15218: EQUAL
15219: IFFALSE 15259
// begin enemyWayX = [ 73 , 46 , 29 ] ;
15221: LD_ADDR_EXP 46
15225: PUSH
15226: LD_INT 73
15228: PUSH
15229: LD_INT 46
15231: PUSH
15232: LD_INT 29
15234: PUSH
15235: EMPTY
15236: LIST
15237: LIST
15238: LIST
15239: ST_TO_ADDR
// enemyWayY = [ 71 , 43 , 29 ] ;
15240: LD_ADDR_EXP 47
15244: PUSH
15245: LD_INT 71
15247: PUSH
15248: LD_INT 43
15250: PUSH
15251: LD_INT 29
15253: PUSH
15254: EMPTY
15255: LIST
15256: LIST
15257: LIST
15258: ST_TO_ADDR
// end ; if rnd = 2 then
15259: LD_VAR 0 1
15263: PUSH
15264: LD_INT 2
15266: EQUAL
15267: IFFALSE 15291
// begin enemyWayX = [ 64 ] ;
15269: LD_ADDR_EXP 46
15273: PUSH
15274: LD_INT 64
15276: PUSH
15277: EMPTY
15278: LIST
15279: ST_TO_ADDR
// enemyWayY = [ 43 ] ;
15280: LD_ADDR_EXP 47
15284: PUSH
15285: LD_INT 43
15287: PUSH
15288: EMPTY
15289: LIST
15290: ST_TO_ADDR
// end ; if rnd = 3 then
15291: LD_VAR 0 1
15295: PUSH
15296: LD_INT 3
15298: EQUAL
15299: IFFALSE 15323
// begin enemyWayX = [ 80 ] ;
15301: LD_ADDR_EXP 46
15305: PUSH
15306: LD_INT 80
15308: PUSH
15309: EMPTY
15310: LIST
15311: ST_TO_ADDR
// enemyWayY = [ 28 ] ;
15312: LD_ADDR_EXP 47
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: EMPTY
15321: LIST
15322: ST_TO_ADDR
// end ; enable ;
15323: ENABLE
// end ;
15324: PPOPN 1
15326: END
// every 0 0$1 trigger AIEnable = 1 do
15327: LD_EXP 37
15331: PUSH
15332: LD_INT 1
15334: EQUAL
15335: IFFALSE 15449
15337: GO 15339
15339: DISABLE
// begin enable ;
15340: ENABLE
// RepairBuilding ( 3 , rubware0 , RussianBase ) ;
15341: LD_INT 3
15343: PPUSH
15344: LD_INT 21
15346: PPUSH
15347: LD_INT 7
15349: PPUSH
15350: CALL 5657 0 3
// HealUnitInBase ( 3 , RussianHealArea , RussianBase , rubbrid0 ) ;
15354: LD_INT 3
15356: PPUSH
15357: LD_INT 8
15359: PPUSH
15360: LD_INT 7
15362: PPUSH
15363: LD_INT 1
15365: PPUSH
15366: CALL 5978 0 4
// RepairVehicles ( 3 , RussianAttackRepair , 108 , 95 ) ;
15370: LD_INT 3
15372: PPUSH
15373: LD_INT 17
15375: PPUSH
15376: LD_INT 108
15378: PPUSH
15379: LD_INT 95
15381: PPUSH
15382: CALL 7222 0 4
// AttackVehicles ( 3 , RussianTanksSpot , enemyWayX , enemyWayY ) ;
15386: LD_INT 3
15388: PPUSH
15389: LD_INT 23
15391: PPUSH
15392: LD_EXP 46
15396: PPUSH
15397: LD_EXP 47
15401: PPUSH
15402: CALL 6634 0 4
// if baseReadyToBuild = 2 then
15406: LD_EXP 20
15410: PUSH
15411: LD_INT 2
15413: EQUAL
15414: IFFALSE 15449
// begin RepairBuilding ( 6 , ruPDepot , SecondRussianBase ) ;
15416: LD_INT 6
15418: PPUSH
15419: LD_EXP 21
15423: PPUSH
15424: LD_INT 6
15426: PPUSH
15427: CALL 5657 0 3
// HealUnitInBase ( 6 , SecondRussianHealArea , SecondRussianBase , ruPLab ) ;
15431: LD_INT 6
15433: PPUSH
15434: LD_INT 9
15436: PPUSH
15437: LD_INT 6
15439: PPUSH
15440: LD_EXP 22
15444: PPUSH
15445: CALL 5978 0 4
// end ; end ;
15449: END
// every 1 trigger not IsInUnit ( Stolypin ) and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 do
15450: LD_EXP 15
15454: PPUSH
15455: CALL_OW 310
15459: NOT
15460: PUSH
15461: LD_INT 21
15463: PPUSH
15464: CALL_OW 302
15468: AND
15469: PUSH
15470: LD_INT 21
15472: PPUSH
15473: CALL_OW 255
15477: PUSH
15478: LD_INT 3
15480: EQUAL
15481: AND
15482: IFFALSE 15500
15484: GO 15486
15486: DISABLE
// begin enable ;
15487: ENABLE
// ComEnterUnit ( Stolypin , rubware0 ) ;
15488: LD_EXP 15
15492: PPUSH
15493: LD_INT 21
15495: PPUSH
15496: CALL_OW 120
// end ;
15500: END
// every 5 5$1 + 10 10$0 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_driving ] ] ) = 0 and GetSide ( rubbrid0 ) = 3 and IsOk ( rubware0 ) and GetSide ( rubware0 ) = 3 and IsOk ( rubware0 ) do
15501: LD_INT 22
15503: PUSH
15504: LD_INT 3
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 21
15513: PUSH
15514: LD_INT 2
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: LD_INT 55
15523: PUSH
15524: EMPTY
15525: LIST
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: PPUSH
15532: CALL_OW 69
15536: PUSH
15537: LD_INT 0
15539: EQUAL
15540: PUSH
15541: LD_INT 1
15543: PPUSH
15544: CALL_OW 255
15548: PUSH
15549: LD_INT 3
15551: EQUAL
15552: AND
15553: PUSH
15554: LD_INT 21
15556: PPUSH
15557: CALL_OW 302
15561: AND
15562: PUSH
15563: LD_INT 21
15565: PPUSH
15566: CALL_OW 255
15570: PUSH
15571: LD_INT 3
15573: EQUAL
15574: AND
15575: PUSH
15576: LD_INT 21
15578: PPUSH
15579: CALL_OW 302
15583: AND
15584: IFFALSE 15789
15586: GO 15588
15588: DISABLE
// begin enable ;
15589: ENABLE
// if Difficulty = 1 then
15590: LD_OWVAR 67
15594: PUSH
15595: LD_INT 1
15597: EQUAL
15598: IFFALSE 15642
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 ] , 1 , 1 , 21 ) ;
15600: LD_INT 3
15602: PPUSH
15603: LD_INT 24
15605: PPUSH
15606: LD_OWVAR 67
15610: PUSH
15611: LD_INT 2
15613: PLUS
15614: PPUSH
15615: LD_INT 42
15617: PUSH
15618: LD_INT 42
15620: PUSH
15621: LD_INT 43
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: LIST
15628: PPUSH
15629: LD_INT 1
15631: PPUSH
15632: LD_INT 1
15634: PPUSH
15635: LD_INT 21
15637: PPUSH
15638: CALL 6522 0 7
// if Difficulty = 2 then
15642: LD_OWVAR 67
15646: PUSH
15647: LD_INT 2
15649: EQUAL
15650: IFFALSE 15717
// BuildingVehicle ( 3 , rubfact0 , Difficulty + 2 , [ 42 , 42 , 43 , 43 ] , 1 , 1 , [ 21 , 22 ] [ Rand ( 1 , 2 ) ] ) ;
15652: LD_INT 3
15654: PPUSH
15655: LD_INT 24
15657: PPUSH
15658: LD_OWVAR 67
15662: PUSH
15663: LD_INT 2
15665: PLUS
15666: PPUSH
15667: LD_INT 42
15669: PUSH
15670: LD_INT 42
15672: PUSH
15673: LD_INT 43
15675: PUSH
15676: LD_INT 43
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: PPUSH
15685: LD_INT 1
15687: PPUSH
15688: LD_INT 1
15690: PPUSH
15691: LD_INT 21
15693: PUSH
15694: LD_INT 22
15696: PUSH
15697: EMPTY
15698: LIST
15699: LIST
15700: PUSH
15701: LD_INT 1
15703: PPUSH
15704: LD_INT 2
15706: PPUSH
15707: CALL_OW 12
15711: ARRAY
15712: PPUSH
15713: CALL 6522 0 7
// if Difficulty = 3 then
15717: LD_OWVAR 67
15721: PUSH
15722: LD_INT 3
15724: EQUAL
15725: IFFALSE 15789
// BuildingVehicle ( 3 , rubfact0 , Difficulty + rand ( 2 , 3 ) , [ 43 , 43 , 43 , 43 , 44 , 44 ] , 1 , 1 , 22 ) ;
15727: LD_INT 3
15729: PPUSH
15730: LD_INT 24
15732: PPUSH
15733: LD_OWVAR 67
15737: PUSH
15738: LD_INT 2
15740: PPUSH
15741: LD_INT 3
15743: PPUSH
15744: CALL_OW 12
15748: PLUS
15749: PPUSH
15750: LD_INT 43
15752: PUSH
15753: LD_INT 43
15755: PUSH
15756: LD_INT 43
15758: PUSH
15759: LD_INT 43
15761: PUSH
15762: LD_INT 44
15764: PUSH
15765: LD_INT 44
15767: PUSH
15768: EMPTY
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: LD_INT 1
15781: PPUSH
15782: LD_INT 22
15784: PPUSH
15785: CALL 6522 0 7
// end ;
15789: END
// every 0 0$1 do
15790: GO 15792
15792: DISABLE
// ResAllTechs ( 3 , rubbrid0 , 3 ) ;
15793: LD_INT 3
15795: PPUSH
15796: LD_INT 1
15798: PPUSH
15799: LD_INT 3
15801: PPUSH
15802: CALL 5572 0 3
15806: END
// every 0 0$1 trigger baseReadyToBuild = 1 do var i , cargo ;
15807: LD_EXP 20
15811: PUSH
15812: LD_INT 1
15814: EQUAL
15815: IFFALSE 15962
15817: GO 15819
15819: DISABLE
15820: LD_INT 0
15822: PPUSH
15823: PPUSH
// begin cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
15824: LD_ADDR_VAR 0 2
15828: PUSH
15829: LD_INT 22
15831: PUSH
15832: LD_INT 6
15834: PUSH
15835: EMPTY
15836: LIST
15837: LIST
15838: PUSH
15839: LD_INT 21
15841: PUSH
15842: LD_INT 2
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 34
15851: PUSH
15852: LD_INT 51
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: ST_TO_ADDR
// ComMoveXY ( cargo [ 1 ] , GetX ( ruPDepot ) - 5 , GetY ( ruPDepot ) - 5 ) ;
15869: LD_VAR 0 2
15873: PUSH
15874: LD_INT 1
15876: ARRAY
15877: PPUSH
15878: LD_EXP 21
15882: PPUSH
15883: CALL_OW 250
15887: PUSH
15888: LD_INT 5
15890: MINUS
15891: PPUSH
15892: LD_EXP 21
15896: PPUSH
15897: CALL_OW 251
15901: PUSH
15902: LD_INT 5
15904: MINUS
15905: PPUSH
15906: CALL_OW 111
// wait ( 0 0$5 ) ;
15910: LD_INT 175
15912: PPUSH
15913: CALL_OW 67
// AddComCollect ( cargo [ 1 ] , 41 , 52 ) ;
15917: LD_VAR 0 2
15921: PUSH
15922: LD_INT 1
15924: ARRAY
15925: PPUSH
15926: LD_INT 41
15928: PPUSH
15929: LD_INT 52
15931: PPUSH
15932: CALL_OW 177
// wait ( 0 0$40 ) ;
15936: LD_INT 1400
15938: PPUSH
15939: CALL_OW 67
// ComMoveXY ( cargo [ 1 ] , 41 , 44 ) ;
15943: LD_VAR 0 2
15947: PUSH
15948: LD_INT 1
15950: ARRAY
15951: PPUSH
15952: LD_INT 41
15954: PPUSH
15955: LD_INT 44
15957: PPUSH
15958: CALL_OW 111
// end ;
15962: PPOPN 2
15964: END
// every 0 0$1 trigger GetResourceType ( GetBase ( ruPDepot ) , 1 ) >= 100 do var eng ;
15965: LD_EXP 21
15969: PPUSH
15970: CALL_OW 274
15974: PPUSH
15975: LD_INT 1
15977: PPUSH
15978: CALL_OW 275
15982: PUSH
15983: LD_INT 100
15985: GREATEREQUAL
15986: IFFALSE 16214
15988: GO 15990
15990: DISABLE
15991: LD_INT 0
15993: PPUSH
// begin eng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
15994: LD_ADDR_VAR 0 1
15998: PUSH
15999: LD_INT 22
16001: PUSH
16002: LD_INT 6
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: PUSH
16009: LD_INT 21
16011: PUSH
16012: LD_INT 1
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: PUSH
16019: LD_INT 25
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: EMPTY
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: PPUSH
16034: CALL_OW 69
16038: ST_TO_ADDR
// ComBuild ( eng [ 1 ] , 4 , 39 , 37 , 3 ) ;
16039: LD_VAR 0 1
16043: PUSH
16044: LD_INT 1
16046: ARRAY
16047: PPUSH
16048: LD_INT 4
16050: PPUSH
16051: LD_INT 39
16053: PPUSH
16054: LD_INT 37
16056: PPUSH
16057: LD_INT 3
16059: PPUSH
16060: CALL_OW 145
// AddComBuild ( eng [ 1 ] , 29 , 42 , 54 , 3 ) ;
16064: LD_VAR 0 1
16068: PUSH
16069: LD_INT 1
16071: ARRAY
16072: PPUSH
16073: LD_INT 29
16075: PPUSH
16076: LD_INT 42
16078: PPUSH
16079: LD_INT 54
16081: PPUSH
16082: LD_INT 3
16084: PPUSH
16085: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 6 , 38 , 48 , 0 ) ;
16089: LD_VAR 0 1
16093: PUSH
16094: LD_INT 1
16096: ARRAY
16097: PPUSH
16098: LD_INT 6
16100: PPUSH
16101: LD_INT 38
16103: PPUSH
16104: LD_INT 48
16106: PPUSH
16107: LD_INT 0
16109: PPUSH
16110: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 2 , 32 , 38 , 2 ) ;
16114: LD_VAR 0 1
16118: PUSH
16119: LD_INT 1
16121: ARRAY
16122: PPUSH
16123: LD_INT 2
16125: PPUSH
16126: LD_INT 32
16128: PPUSH
16129: LD_INT 38
16131: PPUSH
16132: LD_INT 2
16134: PPUSH
16135: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 26 , 39 , 55 , 3 ) ;
16139: LD_VAR 0 1
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: LD_INT 26
16150: PPUSH
16151: LD_INT 39
16153: PPUSH
16154: LD_INT 55
16156: PPUSH
16157: LD_INT 3
16159: PPUSH
16160: CALL_OW 205
// AddComBuild ( eng [ 1 ] , 32 , 31 , 31 , 3 ) ;
16164: LD_VAR 0 1
16168: PUSH
16169: LD_INT 1
16171: ARRAY
16172: PPUSH
16173: LD_INT 32
16175: PPUSH
16176: LD_INT 31
16178: PPUSH
16179: LD_INT 31
16181: PPUSH
16182: LD_INT 3
16184: PPUSH
16185: CALL_OW 205
// AddComBuild ( eng [ 1 ] , b_breastwork , 50 , 51 , 4 ) ;
16189: LD_VAR 0 1
16193: PUSH
16194: LD_INT 1
16196: ARRAY
16197: PPUSH
16198: LD_INT 31
16200: PPUSH
16201: LD_INT 50
16203: PPUSH
16204: LD_INT 51
16206: PPUSH
16207: LD_INT 4
16209: PPUSH
16210: CALL_OW 205
// end ; end_of_file
16214: PPOPN 1
16216: END
// on BuildingComplete ( building ) do var i , tmpSold , tmpEng , tmpMeh , tmpSci , tmpSoldInside , cargo ;
16217: LD_INT 0
16219: PPUSH
16220: PPUSH
16221: PPUSH
16222: PPUSH
16223: PPUSH
16224: PPUSH
16225: PPUSH
// begin tmpSold = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
16226: LD_ADDR_VAR 0 3
16230: PUSH
16231: LD_INT 22
16233: PUSH
16234: LD_INT 6
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 21
16243: PUSH
16244: LD_INT 1
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: LD_INT 25
16253: PUSH
16254: LD_INT 1
16256: PUSH
16257: EMPTY
16258: LIST
16259: LIST
16260: PUSH
16261: LD_INT 3
16263: PUSH
16264: LD_INT 54
16266: PUSH
16267: EMPTY
16268: LIST
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: EMPTY
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: PPUSH
16280: CALL_OW 69
16284: ST_TO_ADDR
// tmpSoldInside = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 1 ] , [ f_inside ] ] ) ;
16285: LD_ADDR_VAR 0 7
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_INT 6
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: PUSH
16300: LD_INT 21
16302: PUSH
16303: LD_INT 1
16305: PUSH
16306: EMPTY
16307: LIST
16308: LIST
16309: PUSH
16310: LD_INT 25
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: EMPTY
16317: LIST
16318: LIST
16319: PUSH
16320: LD_INT 54
16322: PUSH
16323: EMPTY
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: PPUSH
16332: CALL_OW 69
16336: ST_TO_ADDR
// tmpEng = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) ;
16337: LD_ADDR_VAR 0 4
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_INT 6
16347: PUSH
16348: EMPTY
16349: LIST
16350: LIST
16351: PUSH
16352: LD_INT 21
16354: PUSH
16355: LD_INT 1
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: PUSH
16362: LD_INT 25
16364: PUSH
16365: LD_INT 2
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: PUSH
16372: EMPTY
16373: LIST
16374: LIST
16375: LIST
16376: PPUSH
16377: CALL_OW 69
16381: ST_TO_ADDR
// tmpSci = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_class , 4 ] ] ) ;
16382: LD_ADDR_VAR 0 6
16386: PUSH
16387: LD_INT 22
16389: PUSH
16390: LD_INT 6
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 21
16399: PUSH
16400: LD_INT 1
16402: PUSH
16403: EMPTY
16404: LIST
16405: LIST
16406: PUSH
16407: LD_INT 25
16409: PUSH
16410: LD_INT 4
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PUSH
16417: EMPTY
16418: LIST
16419: LIST
16420: LIST
16421: PPUSH
16422: CALL_OW 69
16426: ST_TO_ADDR
// cargo = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_vehicle ] , [ f_weapon , 51 ] ] ) ;
16427: LD_ADDR_VAR 0 8
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_INT 6
16437: PUSH
16438: EMPTY
16439: LIST
16440: LIST
16441: PUSH
16442: LD_INT 21
16444: PUSH
16445: LD_INT 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 34
16454: PUSH
16455: LD_INT 51
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: LIST
16466: PPUSH
16467: CALL_OW 69
16471: ST_TO_ADDR
// if GetSide ( building ) = 6 and GetBType ( building ) = b_depot then
16472: LD_VAR 0 1
16476: PPUSH
16477: CALL_OW 255
16481: PUSH
16482: LD_INT 6
16484: EQUAL
16485: PUSH
16486: LD_VAR 0 1
16490: PPUSH
16491: CALL_OW 266
16495: PUSH
16496: LD_INT 0
16498: EQUAL
16499: AND
16500: IFFALSE 16520
// begin ruPDepot = building ;
16502: LD_ADDR_EXP 21
16506: PUSH
16507: LD_VAR 0 1
16511: ST_TO_ADDR
// baseReadyToBuild = 1 ;
16512: LD_ADDR_EXP 20
16516: PUSH
16517: LD_INT 1
16519: ST_TO_ADDR
// end ; if GetBType ( building ) = 4 and GetSide ( building ) = 6 then
16520: LD_VAR 0 1
16524: PPUSH
16525: CALL_OW 266
16529: PUSH
16530: LD_INT 4
16532: EQUAL
16533: PUSH
16534: LD_VAR 0 1
16538: PPUSH
16539: CALL_OW 255
16543: PUSH
16544: LD_INT 6
16546: EQUAL
16547: AND
16548: IFFALSE 16581
// for i in tmpSold do
16550: LD_ADDR_VAR 0 2
16554: PUSH
16555: LD_VAR 0 3
16559: PUSH
16560: FOR_IN
16561: IFFALSE 16579
// ComEnterUnit ( i , building ) ;
16563: LD_VAR 0 2
16567: PPUSH
16568: LD_VAR 0 1
16572: PPUSH
16573: CALL_OW 120
16577: GO 16560
16579: POP
16580: POP
// if GetBType ( building ) = 6 and GetSide ( building ) = 6 then
16581: LD_VAR 0 1
16585: PPUSH
16586: CALL_OW 266
16590: PUSH
16591: LD_INT 6
16593: EQUAL
16594: PUSH
16595: LD_VAR 0 1
16599: PPUSH
16600: CALL_OW 255
16604: PUSH
16605: LD_INT 6
16607: EQUAL
16608: AND
16609: IFFALSE 16667
// begin for i in tmpSci do
16611: LD_ADDR_VAR 0 2
16615: PUSH
16616: LD_VAR 0 6
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16640
// ComEnterUnit ( i , building ) ;
16624: LD_VAR 0 2
16628: PPUSH
16629: LD_VAR 0 1
16633: PPUSH
16634: CALL_OW 120
16638: GO 16621
16640: POP
16641: POP
// ResAllTechs ( 6 , building , 3 ) ;
16642: LD_INT 6
16644: PPUSH
16645: LD_VAR 0 1
16649: PPUSH
16650: LD_INT 3
16652: PPUSH
16653: CALL 5572 0 3
// ruPLab = building ;
16657: LD_ADDR_EXP 22
16661: PUSH
16662: LD_VAR 0 1
16666: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 and GetSide ( building ) = 6 then
16667: LD_VAR 0 1
16671: PPUSH
16672: CALL_OW 266
16676: PUSH
16677: LD_INT 2
16679: EQUAL
16680: PUSH
16681: LD_VAR 0 1
16685: PPUSH
16686: CALL_OW 255
16690: PUSH
16691: LD_INT 6
16693: EQUAL
16694: AND
16695: IFFALSE 16746
// begin tmpMeh = UnitsInside ( cargo [ 1 ] ) ;
16697: LD_ADDR_VAR 0 5
16701: PUSH
16702: LD_VAR 0 8
16706: PUSH
16707: LD_INT 1
16709: ARRAY
16710: PPUSH
16711: CALL_OW 313
16715: ST_TO_ADDR
// ComExitVehicle ( tmpMeh ) ;
16716: LD_VAR 0 5
16720: PPUSH
16721: CALL_OW 121
// wait ( 0 0$1 ) ;
16725: LD_INT 35
16727: PPUSH
16728: CALL_OW 67
// AddComEnterUnit ( tmpMeh , building ) ;
16732: LD_VAR 0 5
16736: PPUSH
16737: LD_VAR 0 1
16741: PPUSH
16742: CALL_OW 180
// end ; if GetBType ( building ) = 32 and GetSide ( building ) = 6 then
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 266
16755: PUSH
16756: LD_INT 32
16758: EQUAL
16759: PUSH
16760: LD_VAR 0 1
16764: PPUSH
16765: CALL_OW 255
16769: PUSH
16770: LD_INT 6
16772: EQUAL
16773: AND
16774: IFFALSE 16826
// begin ComPlaceWeapon ( building , 42 ) ;
16776: LD_VAR 0 1
16780: PPUSH
16781: LD_INT 42
16783: PPUSH
16784: CALL_OW 148
// ComExitBuilding ( tmpSoldInside [ 1 ] ) ;
16788: LD_VAR 0 7
16792: PUSH
16793: LD_INT 1
16795: ARRAY
16796: PPUSH
16797: CALL_OW 122
// wait ( 0 0$1 ) ;
16801: LD_INT 35
16803: PPUSH
16804: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 1 ] , building ) ;
16808: LD_VAR 0 7
16812: PUSH
16813: LD_INT 1
16815: ARRAY
16816: PPUSH
16817: LD_VAR 0 1
16821: PPUSH
16822: CALL_OW 180
// end ; if GetBType ( building ) = b_breastwork and GetSide ( building ) = 6 then
16826: LD_VAR 0 1
16830: PPUSH
16831: CALL_OW 266
16835: PUSH
16836: LD_INT 31
16838: EQUAL
16839: PUSH
16840: LD_VAR 0 1
16844: PPUSH
16845: CALL_OW 255
16849: PUSH
16850: LD_INT 6
16852: EQUAL
16853: AND
16854: IFFALSE 16920
// begin ComExitBuilding ( tmpSoldInside [ 2 ] ) ;
16856: LD_VAR 0 7
16860: PUSH
16861: LD_INT 2
16863: ARRAY
16864: PPUSH
16865: CALL_OW 122
// wait ( 0 0$1 ) ;
16869: LD_INT 35
16871: PPUSH
16872: CALL_OW 67
// AddComEnterUnit ( tmpSoldInside [ 2 ] , building ) ;
16876: LD_VAR 0 7
16880: PUSH
16881: LD_INT 2
16883: ARRAY
16884: PPUSH
16885: LD_VAR 0 1
16889: PPUSH
16890: CALL_OW 180
// ComEnterUnit ( tmpEng [ 1 ] , ruPDepot ) ;
16894: LD_VAR 0 4
16898: PUSH
16899: LD_INT 1
16901: ARRAY
16902: PPUSH
16903: LD_EXP 21
16907: PPUSH
16908: CALL_OW 120
// baseReadyToBuild = 2 ;
16912: LD_ADDR_EXP 20
16916: PUSH
16917: LD_INT 2
16919: ST_TO_ADDR
// end ; if GetBType ( building ) = b_bunker and GetSide ( building ) = 1 and bunkerDialog = 0 then
16920: LD_VAR 0 1
16924: PPUSH
16925: CALL_OW 266
16929: PUSH
16930: LD_INT 32
16932: EQUAL
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 255
16943: PUSH
16944: LD_INT 1
16946: EQUAL
16947: AND
16948: PUSH
16949: LD_EXP 32
16953: PUSH
16954: LD_INT 0
16956: EQUAL
16957: AND
16958: IFFALSE 17203
// begin bunkerDialog = 1 ;
16960: LD_ADDR_EXP 32
16964: PUSH
16965: LD_INT 1
16967: ST_TO_ADDR
// if IsOK ( Claptopn ) then
16968: LD_EXP 11
16972: PPUSH
16973: CALL_OW 302
16977: IFFALSE 16993
// begin Say ( Claptopn , D11-Eng1-1 ) ;
16979: LD_EXP 11
16983: PPUSH
16984: LD_STRING D11-Eng1-1
16986: PPUSH
16987: CALL_OW 88
// end else
16991: GO 17189
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
16993: LD_INT 22
16995: PUSH
16996: LD_INT 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 21
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 25
17015: PUSH
17016: LD_INT 3
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: LD_INT 26
17025: PUSH
17026: LD_INT 1
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: PUSH
17044: LD_EXP 1
17048: PUSH
17049: EMPTY
17050: LIST
17051: PUSH
17052: LD_INT 0
17054: GREATER
17055: DIFF
17056: IFFALSE 17130
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 2 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17058: LD_INT 22
17060: PUSH
17061: LD_INT 1
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 1
17073: PUSH
17074: EMPTY
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 25
17080: PUSH
17081: LD_INT 2
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 26
17090: PUSH
17091: LD_INT 1
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: EMPTY
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: PPUSH
17104: CALL_OW 69
17108: PUSH
17109: LD_EXP 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: DIFF
17117: PPUSH
17118: LD_STRING D11-Eng1-1
17120: PPUSH
17121: LD_STRING D11-Eng1-1
17123: PPUSH
17124: CALL 4133 0 3
// end else
17128: GO 17189
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D11-Eng1-1 , D11-Eng1-1 ) ;
17130: LD_INT 22
17132: PUSH
17133: LD_INT 1
17135: PUSH
17136: EMPTY
17137: LIST
17138: LIST
17139: PUSH
17140: LD_INT 21
17142: PUSH
17143: LD_INT 1
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: PUSH
17150: LD_INT 26
17152: PUSH
17153: LD_INT 1
17155: PUSH
17156: EMPTY
17157: LIST
17158: LIST
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: PPUSH
17165: CALL_OW 69
17169: PUSH
17170: LD_EXP 1
17174: PUSH
17175: EMPTY
17176: LIST
17177: DIFF
17178: PPUSH
17179: LD_STRING D11-Eng1-1
17181: PPUSH
17182: LD_STRING D11-Eng1-1
17184: PPUSH
17185: CALL 4133 0 3
// end ; end ; if energyVDialog = 0 then
17189: LD_EXP 33
17193: PUSH
17194: LD_INT 0
17196: EQUAL
17197: IFFALSE 17203
// EnergyDialog ;
17199: CALL 4624 0 0
// end ; if GetBType ( building ) = b_oil_mine and GetSide ( building ) = 1 then
17203: LD_VAR 0 1
17207: PPUSH
17208: CALL_OW 266
17212: PUSH
17213: LD_INT 29
17215: EQUAL
17216: PUSH
17217: LD_VAR 0 1
17221: PPUSH
17222: CALL_OW 255
17226: PUSH
17227: LD_INT 1
17229: EQUAL
17230: AND
17231: IFFALSE 17241
// buildOil = 1 ;
17233: LD_ADDR_EXP 34
17237: PUSH
17238: LD_INT 1
17240: ST_TO_ADDR
// if GetBType ( building ) = b_oil_power and GetSide ( building ) = 1 then
17241: LD_VAR 0 1
17245: PPUSH
17246: CALL_OW 266
17250: PUSH
17251: LD_INT 26
17253: EQUAL
17254: PUSH
17255: LD_VAR 0 1
17259: PPUSH
17260: CALL_OW 255
17264: PUSH
17265: LD_INT 1
17267: EQUAL
17268: AND
17269: IFFALSE 17279
// buildPower = 1 ;
17271: LD_ADDR_EXP 35
17275: PUSH
17276: LD_INT 1
17278: ST_TO_ADDR
// end ;
17279: PPOPN 8
17281: END
// on UpgradeComplete ( building ) do begin if GetBType ( building ) = b_factory and GetSide ( building ) = 1 and factoryDialog = 0 then
17282: LD_VAR 0 1
17286: PPUSH
17287: CALL_OW 266
17291: PUSH
17292: LD_INT 3
17294: EQUAL
17295: PUSH
17296: LD_VAR 0 1
17300: PPUSH
17301: CALL_OW 255
17305: PUSH
17306: LD_INT 1
17308: EQUAL
17309: AND
17310: PUSH
17311: LD_EXP 31
17315: PUSH
17316: LD_INT 0
17318: EQUAL
17319: AND
17320: IFFALSE 17668
// begin factoryDialog = 1 ;
17322: LD_ADDR_EXP 31
17326: PUSH
17327: LD_INT 1
17329: ST_TO_ADDR
// CenterNowOnUnits ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_btype , b_factory ] , [ f_lives , 1000 ] ] ) [ 1 ] ) ;
17330: LD_INT 22
17332: PUSH
17333: LD_INT 1
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PUSH
17340: LD_INT 21
17342: PUSH
17343: LD_INT 3
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 30
17352: PUSH
17353: LD_INT 3
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 24
17362: PUSH
17363: LD_INT 1000
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: EMPTY
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: PPUSH
17376: CALL_OW 69
17380: PUSH
17381: LD_INT 1
17383: ARRAY
17384: PPUSH
17385: CALL_OW 87
// Say ( JMM , D9a-JMM-1 ) ;
17389: LD_EXP 1
17393: PPUSH
17394: LD_STRING D9a-JMM-1
17396: PPUSH
17397: CALL_OW 88
// if GetTech ( 47 , 1 ) = state_enabled and GetTech ( 45 , 1 ) = state_enabled then
17401: LD_INT 47
17403: PPUSH
17404: LD_INT 1
17406: PPUSH
17407: CALL_OW 321
17411: PUSH
17412: LD_INT 1
17414: EQUAL
17415: PUSH
17416: LD_INT 45
17418: PPUSH
17419: LD_INT 1
17421: PPUSH
17422: CALL_OW 321
17426: PUSH
17427: LD_INT 1
17429: EQUAL
17430: AND
17431: IFFALSE 17668
// begin if IsOK ( Campell ) then
17433: LD_EXP 12
17437: PPUSH
17438: CALL_OW 302
17442: IFFALSE 17458
// begin Say ( Campell , D9a-Mech1-1 ) ;
17444: LD_EXP 12
17448: PPUSH
17449: LD_STRING D9a-Mech1-1
17451: PPUSH
17452: CALL_OW 88
// end else
17456: GO 17654
// begin ; if FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] > 0 then
17458: LD_INT 22
17460: PUSH
17461: LD_INT 1
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: PUSH
17468: LD_INT 21
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PUSH
17478: LD_INT 25
17480: PUSH
17481: LD_INT 3
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PUSH
17488: LD_INT 26
17490: PUSH
17491: LD_INT 1
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: PPUSH
17504: CALL_OW 69
17508: PUSH
17509: LD_EXP 1
17513: PUSH
17514: EMPTY
17515: LIST
17516: PUSH
17517: LD_INT 0
17519: GREATER
17520: DIFF
17521: IFFALSE 17595
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , 3 ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17523: LD_INT 22
17525: PUSH
17526: LD_INT 1
17528: PUSH
17529: EMPTY
17530: LIST
17531: LIST
17532: PUSH
17533: LD_INT 21
17535: PUSH
17536: LD_INT 1
17538: PUSH
17539: EMPTY
17540: LIST
17541: LIST
17542: PUSH
17543: LD_INT 25
17545: PUSH
17546: LD_INT 3
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PUSH
17553: LD_INT 26
17555: PUSH
17556: LD_INT 1
17558: PUSH
17559: EMPTY
17560: LIST
17561: LIST
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: PPUSH
17569: CALL_OW 69
17573: PUSH
17574: LD_EXP 1
17578: PUSH
17579: EMPTY
17580: LIST
17581: DIFF
17582: PPUSH
17583: LD_STRING D9a-Mech1-1
17585: PPUSH
17586: LD_STRING D9a-Mech1-1
17588: PPUSH
17589: CALL 4133 0 3
// end else
17593: GO 17654
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_sex , 1 ] ] ) diff [ JMM ] , D9a-Mech1-1 , D9a-Mech1-1 ) ;
17595: LD_INT 22
17597: PUSH
17598: LD_INT 1
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PUSH
17605: LD_INT 21
17607: PUSH
17608: LD_INT 1
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 26
17617: PUSH
17618: LD_INT 1
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: EMPTY
17626: LIST
17627: LIST
17628: LIST
17629: PPUSH
17630: CALL_OW 69
17634: PUSH
17635: LD_EXP 1
17639: PUSH
17640: EMPTY
17641: LIST
17642: DIFF
17643: PPUSH
17644: LD_STRING D9a-Mech1-1
17646: PPUSH
17647: LD_STRING D9a-Mech1-1
17649: PPUSH
17650: CALL 4133 0 3
// end ; end ; if energyVDialog = 0 then
17654: LD_EXP 33
17658: PUSH
17659: LD_INT 0
17661: EQUAL
17662: IFFALSE 17668
// EnergyDialog ;
17664: CALL 4624 0 0
// end ; end ; end ;
17668: PPOPN 1
17670: END
// on UnitDestroyed ( unit ) do begin if GetType ( unit ) = unit_human and GetSide ( unit ) = 1 then
17671: LD_VAR 0 1
17675: PPUSH
17676: CALL_OW 247
17680: PUSH
17681: LD_INT 1
17683: EQUAL
17684: PUSH
17685: LD_VAR 0 1
17689: PPUSH
17690: CALL_OW 255
17694: PUSH
17695: LD_INT 1
17697: EQUAL
17698: AND
17699: IFFALSE 17715
// lostCounter = lostCounter + 1 ;
17701: LD_ADDR_EXP 38
17705: PUSH
17706: LD_EXP 38
17710: PUSH
17711: LD_INT 1
17713: PLUS
17714: ST_TO_ADDR
// if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( rubfact0 ) and GetSide ( rubfact0 ) = 3 then
17715: LD_VAR 0 1
17719: PPUSH
17720: CALL_OW 257
17724: PUSH
17725: LD_INT 3
17727: EQUAL
17728: PUSH
17729: LD_VAR 0 1
17733: PPUSH
17734: CALL_OW 255
17738: PUSH
17739: LD_INT 3
17741: EQUAL
17742: AND
17743: PUSH
17744: LD_INT 24
17746: PPUSH
17747: CALL_OW 302
17751: AND
17752: PUSH
17753: LD_INT 24
17755: PPUSH
17756: CALL_OW 255
17760: PUSH
17761: LD_INT 3
17763: EQUAL
17764: AND
17765: IFFALSE 17833
// begin uc_side = 3 ;
17767: LD_ADDR_OWVAR 20
17771: PUSH
17772: LD_INT 3
17774: ST_TO_ADDR
// uc_nation = 3 ;
17775: LD_ADDR_OWVAR 21
17779: PUSH
17780: LD_INT 3
17782: ST_TO_ADDR
// hc_gallery :=  ;
17783: LD_ADDR_OWVAR 33
17787: PUSH
17788: LD_STRING 
17790: ST_TO_ADDR
// hc_name :=  ;
17791: LD_ADDR_OWVAR 26
17795: PUSH
17796: LD_STRING 
17798: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSoldMinLevel , RuSoldMaxLevel ) ) ;
17799: LD_INT 0
17801: PPUSH
17802: LD_EXP 16
17806: PPUSH
17807: LD_EXP 17
17811: PPUSH
17812: CALL_OW 12
17816: PPUSH
17817: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , rubfact0 ) ;
17821: CALL_OW 44
17825: PPUSH
17826: LD_INT 24
17828: PPUSH
17829: CALL_OW 52
// end ; end ;
17833: PPOPN 1
17835: END
// on Contact ( side1 , side2 ) do var i , tmp ;
17836: LD_INT 0
17838: PPUSH
17839: PPUSH
// begin tmp = FilterAllUnits ( [ f_side , 1 ] ) ;
17840: LD_ADDR_VAR 0 4
17844: PUSH
17845: LD_INT 22
17847: PUSH
17848: LD_INT 1
17850: PUSH
17851: EMPTY
17852: LIST
17853: LIST
17854: PPUSH
17855: CALL_OW 69
17859: ST_TO_ADDR
// if side1 = 1 and side2 = 6 and donaldsonCoopAttack = 1 then
17860: LD_VAR 0 1
17864: PUSH
17865: LD_INT 1
17867: EQUAL
17868: PUSH
17869: LD_VAR 0 2
17873: PUSH
17874: LD_INT 6
17876: EQUAL
17877: AND
17878: PUSH
17879: LD_EXP 41
17883: PUSH
17884: LD_INT 1
17886: EQUAL
17887: AND
17888: IFFALSE 17943
// begin donaldsonCoopAttack = 0 ;
17890: LD_ADDR_EXP 41
17894: PUSH
17895: LD_INT 0
17897: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 4 ] ] ) do
17898: LD_ADDR_VAR 0 3
17902: PUSH
17903: LD_INT 22
17905: PUSH
17906: LD_INT 4
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: EMPTY
17914: LIST
17915: PPUSH
17916: CALL_OW 69
17920: PUSH
17921: FOR_IN
17922: IFFALSE 17941
// ComAgressiveMove ( i , 52 , 64 ) ;
17924: LD_VAR 0 3
17928: PPUSH
17929: LD_INT 52
17931: PPUSH
17932: LD_INT 64
17934: PPUSH
17935: CALL_OW 114
17939: GO 17921
17941: POP
17942: POP
// end ; end ;
17943: PPOPN 4
17945: END
// on VehicleConstructed ( vehicle , building ) do begin if GetWeapon ( vehicle ) = 53 then
17946: LD_VAR 0 1
17950: PPUSH
17951: CALL_OW 264
17955: PUSH
17956: LD_INT 53
17958: EQUAL
17959: IFFALSE 18044
// begin CutTreeInArea ( vehicle , TreesArea ) ;
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_INT 21
17968: PPUSH
17969: CALL 4840 0 2
// uc_side = 3 ;
17973: LD_ADDR_OWVAR 20
17977: PUSH
17978: LD_INT 3
17980: ST_TO_ADDR
// uc_nation = 3 ;
17981: LD_ADDR_OWVAR 21
17985: PUSH
17986: LD_INT 3
17988: ST_TO_ADDR
// PrepareMechanic ( false , RuSoldMaxLevel ) ;
17989: LD_INT 0
17991: PPUSH
17992: LD_EXP 17
17996: PPUSH
17997: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , building ) ;
18001: CALL_OW 44
18005: PPUSH
18006: LD_VAR 0 2
18010: PPUSH
18011: CALL_OW 52
// SetSide ( vehicle , 6 ) ;
18015: LD_VAR 0 1
18019: PPUSH
18020: LD_INT 6
18022: PPUSH
18023: CALL_OW 235
// SetSide ( UnitsInside ( vehicle ) , 6 ) ;
18027: LD_VAR 0 1
18031: PPUSH
18032: CALL_OW 313
18036: PPUSH
18037: LD_INT 6
18039: PPUSH
18040: CALL_OW 235
// end ; end ;
18044: PPOPN 2
18046: END
// on UnitGoesToRed ( unit ) do var i , tmpMeh ;
18047: LD_INT 0
18049: PPUSH
18050: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
18051: LD_VAR 0 1
18055: PPUSH
18056: CALL_OW 255
18060: PUSH
18061: LD_INT 3
18063: EQUAL
18064: PUSH
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 247
18074: PUSH
18075: LD_INT 2
18077: EQUAL
18078: AND
18079: IFFALSE 18173
// if GetWeapon ( unit ) = 42 or GetWeapon ( unit ) = 43 or GetWeapon ( unit ) = 44 then
18081: LD_VAR 0 1
18085: PPUSH
18086: CALL_OW 264
18090: PUSH
18091: LD_INT 42
18093: EQUAL
18094: PUSH
18095: LD_VAR 0 1
18099: PPUSH
18100: CALL_OW 264
18104: PUSH
18105: LD_INT 43
18107: EQUAL
18108: OR
18109: PUSH
18110: LD_VAR 0 1
18114: PPUSH
18115: CALL_OW 264
18119: PUSH
18120: LD_INT 44
18122: EQUAL
18123: OR
18124: IFFALSE 18173
// AddComConstruct ( rubfact0 , GetChassis ( unit ) , GetEngine ( unit ) , GetControl ( unit ) , GetWeapon ( unit ) ) ;
18126: LD_INT 24
18128: PPUSH
18129: LD_VAR 0 1
18133: PPUSH
18134: CALL_OW 265
18138: PPUSH
18139: LD_VAR 0 1
18143: PPUSH
18144: CALL_OW 262
18148: PPUSH
18149: LD_VAR 0 1
18153: PPUSH
18154: CALL_OW 263
18158: PPUSH
18159: LD_VAR 0 1
18163: PPUSH
18164: CALL_OW 264
18168: PPUSH
18169: CALL_OW 185
// end ;
18173: PPOPN 3
18175: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOk ( vehicle ) then
18176: LD_VAR 0 1
18180: PPUSH
18181: CALL_OW 255
18185: PUSH
18186: LD_INT 3
18188: EQUAL
18189: PUSH
18190: LD_VAR 0 2
18194: PPUSH
18195: CALL_OW 255
18199: PUSH
18200: LD_INT 3
18202: EQUAL
18203: AND
18204: PUSH
18205: LD_VAR 0 1
18209: PPUSH
18210: CALL_OW 302
18214: AND
18215: IFFALSE 18257
// begin ComRepairVehicle ( human , vehicle ) ;
18217: LD_VAR 0 2
18221: PPUSH
18222: LD_VAR 0 1
18226: PPUSH
18227: CALL_OW 129
// AddComEnterUnit ( human , vehicle ) ;
18231: LD_VAR 0 2
18235: PPUSH
18236: LD_VAR 0 1
18240: PPUSH
18241: CALL_OW 180
// SetFuel ( vehicle , 100 ) ;
18245: LD_VAR 0 1
18249: PPUSH
18250: LD_INT 100
18252: PPUSH
18253: CALL_OW 240
// end ; if GetSide ( vehicle ) = 3 and GetSide ( human ) = 3 and IsOK ( rubfact0 ) and not IsOk ( vehicle ) then
18257: LD_VAR 0 1
18261: PPUSH
18262: CALL_OW 255
18266: PUSH
18267: LD_INT 3
18269: EQUAL
18270: PUSH
18271: LD_VAR 0 2
18275: PPUSH
18276: CALL_OW 255
18280: PUSH
18281: LD_INT 3
18283: EQUAL
18284: AND
18285: PUSH
18286: LD_INT 24
18288: PPUSH
18289: CALL_OW 302
18293: AND
18294: PUSH
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 302
18304: NOT
18305: AND
18306: IFFALSE 18320
// ComEnterUnit ( human , rubfact0 ) ;
18308: LD_VAR 0 2
18312: PPUSH
18313: LD_INT 24
18315: PPUSH
18316: CALL_OW 120
// end ;
18320: PPOPN 2
18322: END
// on Command ( comandid ) do var i , j , tmp ;
18323: LD_INT 0
18325: PPUSH
18326: PPUSH
18327: PPUSH
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
18328: LD_ADDR_VAR 0 2
18332: PUSH
18333: LD_INT 22
18335: PUSH
18336: LD_INT 1
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: PUSH
18343: LD_INT 2
18345: PUSH
18346: LD_INT 21
18348: PUSH
18349: LD_INT 1
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: PUSH
18356: LD_INT 21
18358: PUSH
18359: LD_INT 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: EMPTY
18367: LIST
18368: LIST
18369: LIST
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PPUSH
18375: CALL_OW 69
18379: PUSH
18380: FOR_IN
18381: IFFALSE 18491
// begin if GetTaskList ( i ) > 0 then
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 437
18392: PUSH
18393: LD_INT 0
18395: GREATER
18396: IFFALSE 18489
// begin for j = 1 to GetTaskList ( i ) do
18398: LD_ADDR_VAR 0 3
18402: PUSH
18403: DOUBLE
18404: LD_INT 1
18406: DEC
18407: ST_TO_ADDR
18408: LD_VAR 0 2
18412: PPUSH
18413: CALL_OW 437
18417: PUSH
18418: FOR_TO
18419: IFFALSE 18487
// begin tmp = GetTaskList ( i ) [ j ] [ 4 ] ;
18421: LD_ADDR_VAR 0 4
18425: PUSH
18426: LD_VAR 0 2
18430: PPUSH
18431: CALL_OW 437
18435: PUSH
18436: LD_VAR 0 3
18440: ARRAY
18441: PUSH
18442: LD_INT 4
18444: ARRAY
18445: ST_TO_ADDR
// if ( GetSide ( tmp ) = 4 or GetSide ( tmp ) = 0 ) then
18446: LD_VAR 0 4
18450: PPUSH
18451: CALL_OW 255
18455: PUSH
18456: LD_INT 4
18458: EQUAL
18459: PUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 255
18469: PUSH
18470: LD_INT 0
18472: EQUAL
18473: OR
18474: IFFALSE 18485
// ComStop ( i ) ;
18476: LD_VAR 0 2
18480: PPUSH
18481: CALL_OW 141
// end ;
18485: GO 18418
18487: POP
18488: POP
// end ; end ;
18489: GO 18380
18491: POP
18492: POP
// end ; end_of_file
18493: PPOPN 4
18495: END
// every 10 10$0 do
18496: GO 18498
18498: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 1 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 0 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 2 ) ;
18499: LD_INT 5
18501: PPUSH
18502: LD_INT 3
18504: PPUSH
18505: LD_INT 1
18507: PUSH
18508: LD_INT 2
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: LD_INT 4
18516: PUSH
18517: EMPTY
18518: LIST
18519: LIST
18520: LIST
18521: PUSH
18522: LD_OWVAR 67
18526: ARRAY
18527: PLUS
18528: PPUSH
18529: LD_INT 0
18531: PPUSH
18532: LD_INT 0
18534: PPUSH
18535: LD_INT 0
18537: PPUSH
18538: LD_INT 0
18540: PPUSH
18541: LD_EXP 16
18545: PPUSH
18546: LD_EXP 17
18550: PPUSH
18551: CALL_OW 12
18555: PPUSH
18556: LD_INT 4
18558: PPUSH
18559: LD_INT 14
18561: PPUSH
18562: LD_INT 1
18564: PPUSH
18565: LD_INT 2
18567: PPUSH
18568: CALL 7425 0 12
// end ;
18572: END
// every 17 17$0 do
18573: GO 18575
18575: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 1 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18576: LD_INT 5
18578: PPUSH
18579: LD_INT 3
18581: PPUSH
18582: LD_INT 3
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 4
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: PUSH
18599: LD_OWVAR 67
18603: ARRAY
18604: PLUS
18605: PPUSH
18606: LD_INT 0
18608: PPUSH
18609: LD_INT 0
18611: PPUSH
18612: LD_INT 0
18614: PPUSH
18615: LD_INT 1
18617: PPUSH
18618: LD_EXP 16
18622: PPUSH
18623: LD_EXP 17
18627: PPUSH
18628: CALL_OW 12
18632: PPUSH
18633: LD_INT 4
18635: PPUSH
18636: LD_INT 14
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: LD_INT 1
18644: PPUSH
18645: CALL 7425 0 12
// end ;
18649: END
// every 25 25$0 do
18650: GO 18652
18652: DISABLE
// begin RespawnAttackInfantry ( 5 , 3 , 3 + [ 2 , 3 , 4 ] [ Difficulty ] , 0 , 0 , 0 , 2 , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , RussianAttack , RussianAttackHeal , 1 , 1 ) ;
18653: LD_INT 5
18655: PPUSH
18656: LD_INT 3
18658: PPUSH
18659: LD_INT 3
18661: PUSH
18662: LD_INT 2
18664: PUSH
18665: LD_INT 3
18667: PUSH
18668: LD_INT 4
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: LIST
18675: PUSH
18676: LD_OWVAR 67
18680: ARRAY
18681: PLUS
18682: PPUSH
18683: LD_INT 0
18685: PPUSH
18686: LD_INT 0
18688: PPUSH
18689: LD_INT 0
18691: PPUSH
18692: LD_INT 2
18694: PPUSH
18695: LD_EXP 16
18699: PPUSH
18700: LD_EXP 17
18704: PPUSH
18705: CALL_OW 12
18709: PPUSH
18710: LD_INT 4
18712: PPUSH
18713: LD_INT 14
18715: PPUSH
18716: LD_INT 1
18718: PPUSH
18719: LD_INT 1
18721: PPUSH
18722: CALL 7425 0 12
// end ;
18726: END
// every 25 25$0 do
18727: GO 18729
18729: DISABLE
// begin RespawnAttackVehicle ( RussianAttack , 5 , [ 3 , 4 , 5 ] [ Difficulty ] , rand ( ruSoldMinLevel , ruSoldMaxLevel ) , 3 , 1 , 1 , [ [ 42 , 42 , 43 ] , [ 42 , 43 ] , [ 43 , 43 , 43 , 44 ] ] [ Difficulty ] , [ ] , [ ] , 1 ) ;
18730: LD_INT 4
18732: PPUSH
18733: LD_INT 5
18735: PPUSH
18736: LD_INT 3
18738: PUSH
18739: LD_INT 4
18741: PUSH
18742: LD_INT 5
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: PUSH
18750: LD_OWVAR 67
18754: ARRAY
18755: PPUSH
18756: LD_EXP 16
18760: PPUSH
18761: LD_EXP 17
18765: PPUSH
18766: CALL_OW 12
18770: PPUSH
18771: LD_INT 3
18773: PPUSH
18774: LD_INT 1
18776: PPUSH
18777: LD_INT 1
18779: PPUSH
18780: LD_INT 42
18782: PUSH
18783: LD_INT 42
18785: PUSH
18786: LD_INT 43
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: PUSH
18794: LD_INT 42
18796: PUSH
18797: LD_INT 43
18799: PUSH
18800: EMPTY
18801: LIST
18802: LIST
18803: PUSH
18804: LD_INT 43
18806: PUSH
18807: LD_INT 43
18809: PUSH
18810: LD_INT 43
18812: PUSH
18813: LD_INT 44
18815: PUSH
18816: EMPTY
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: LIST
18826: PUSH
18827: LD_OWVAR 67
18831: ARRAY
18832: PPUSH
18833: EMPTY
18834: PPUSH
18835: EMPTY
18836: PPUSH
18837: LD_INT 1
18839: PPUSH
18840: CALL 9238 0 11
// end ; end_of_file
18844: END
// every 0 0$1 trigger startTimer = 1 do
18845: LD_EXP 30
18849: PUSH
18850: LD_INT 1
18852: EQUAL
18853: IFFALSE 18983
18855: GO 18857
18857: DISABLE
// begin enable ;
18858: ENABLE
// if timerStatus = 1 then
18859: LD_EXP 29
18863: PUSH
18864: LD_INT 1
18866: EQUAL
18867: IFFALSE 18900
// begin timeToSupport = timeToSupport - 0 0$01 ;
18869: LD_ADDR_EXP 28
18873: PUSH
18874: LD_EXP 28
18878: PUSH
18879: LD_INT 35
18881: MINUS
18882: ST_TO_ADDR
// display_strings = [ #Am04-1 , timeToSupport ] ;
18883: LD_ADDR_OWVAR 47
18887: PUSH
18888: LD_STRING #Am04-1
18890: PUSH
18891: LD_EXP 28
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: ST_TO_ADDR
// end ; if timerStatus = 2 then
18900: LD_EXP 29
18904: PUSH
18905: LD_INT 2
18907: EQUAL
18908: IFFALSE 18941
// begin timeToSupport = timeToSupport - 0 0$01 ;
18910: LD_ADDR_EXP 28
18914: PUSH
18915: LD_EXP 28
18919: PUSH
18920: LD_INT 35
18922: MINUS
18923: ST_TO_ADDR
// display_strings = [ #Am04-2 , timeToSupport ] ;
18924: LD_ADDR_OWVAR 47
18928: PUSH
18929: LD_STRING #Am04-2
18931: PUSH
18932: LD_EXP 28
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: ST_TO_ADDR
// end ; if timerStatus = 3 then
18941: LD_EXP 29
18945: PUSH
18946: LD_INT 3
18948: EQUAL
18949: IFFALSE 18965
// begin timeToDestroyRuBase = timeToDestroyRuBase - 0 0$01 ;
18951: LD_ADDR_EXP 27
18955: PUSH
18956: LD_EXP 27
18960: PUSH
18961: LD_INT 35
18963: MINUS
18964: ST_TO_ADDR
// end ; if timerStatus = 4 then
18965: LD_EXP 29
18969: PUSH
18970: LD_INT 4
18972: EQUAL
18973: IFFALSE 18983
// begin display_strings =  ;
18975: LD_ADDR_OWVAR 47
18979: PUSH
18980: LD_STRING 
18982: ST_TO_ADDR
// end ; end ; end_of_file
18983: END
// every 0 0$1 trigger IsDead ( JMM ) do
18984: LD_EXP 1
18988: PPUSH
18989: CALL_OW 301
18993: IFFALSE 19005
18995: GO 18997
18997: DISABLE
// YouLost ( JMM ) ;
18998: LD_STRING JMM
19000: PPUSH
19001: CALL_OW 104
19005: END
// every 0 0$1 trigger IsDead ( ambdept0 ) do
19006: LD_INT 4
19008: PPUSH
19009: CALL_OW 301
19013: IFFALSE 19025
19015: GO 19017
19017: DISABLE
// YouLost ( Base ) ; end_of_file
19018: LD_STRING Base
19020: PPUSH
19021: CALL_OW 104
19025: END
// every 0 0$1 trigger IsDead ( Stolypin ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) < [ 14 , 13 , 12 ] [ Difficulty ] do var i , p ;
19026: LD_EXP 15
19030: PPUSH
19031: CALL_OW 301
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_INT 3
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: LD_INT 21
19048: PUSH
19049: LD_INT 1
19051: PUSH
19052: EMPTY
19053: LIST
19054: LIST
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: PPUSH
19060: CALL_OW 69
19064: PUSH
19065: LD_INT 14
19067: PUSH
19068: LD_INT 13
19070: PUSH
19071: LD_INT 12
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: LIST
19078: PUSH
19079: LD_OWVAR 67
19083: ARRAY
19084: LESS
19085: AND
19086: IFFALSE 19557
19088: GO 19090
19090: DISABLE
19091: LD_INT 0
19093: PPUSH
19094: PPUSH
// begin AIEnable = 0 ;
19095: LD_ADDR_EXP 37
19099: PUSH
19100: LD_INT 0
19102: ST_TO_ADDR
// escapeAvalaible = 1 ;
19103: LD_ADDR_EXP 40
19107: PUSH
19108: LD_INT 1
19110: ST_TO_ADDR
// InGameOn ;
19111: CALL_OW 8
// SetAttitude ( 3 , 1 , att_friend , false ) ;
19115: LD_INT 3
19117: PPUSH
19118: LD_INT 1
19120: PPUSH
19121: LD_INT 1
19123: PPUSH
19124: LD_INT 0
19126: PPUSH
19127: CALL_OW 80
// SetAttitude ( 6 , 1 , att_friend , false ) ;
19131: LD_INT 6
19133: PPUSH
19134: LD_INT 1
19136: PPUSH
19137: LD_INT 1
19139: PPUSH
19140: LD_INT 0
19142: PPUSH
19143: CALL_OW 80
// SetAttitude ( 5 , 1 , att_friend , false ) ;
19147: LD_INT 5
19149: PPUSH
19150: LD_INT 1
19152: PPUSH
19153: LD_INT 1
19155: PPUSH
19156: LD_INT 0
19158: PPUSH
19159: CALL_OW 80
// ChangeSideFog ( 3 , 1 ) ;
19163: LD_INT 3
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 343
// CenterOnXY ( 97 , 91 ) ;
19173: LD_INT 97
19175: PPUSH
19176: LD_INT 91
19178: PPUSH
19179: CALL_OW 84
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
19183: LD_INT 22
19185: PUSH
19186: LD_INT 3
19188: PUSH
19189: EMPTY
19190: LIST
19191: LIST
19192: PUSH
19193: LD_INT 21
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PPUSH
19207: CALL_OW 69
19211: PPUSH
19212: CALL_OW 121
// wait ( 0 0$01 ) ;
19216: LD_INT 35
19218: PPUSH
19219: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19223: LD_INT 22
19225: PUSH
19226: LD_INT 3
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 21
19235: PUSH
19236: LD_INT 1
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PPUSH
19247: CALL_OW 69
19251: PPUSH
19252: LD_INT 124
19254: PPUSH
19255: LD_INT 98
19257: PPUSH
19258: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) ) ;
19262: LD_INT 22
19264: PUSH
19265: LD_INT 5
19267: PUSH
19268: EMPTY
19269: LIST
19270: LIST
19271: PUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PPUSH
19286: CALL_OW 69
19290: PPUSH
19291: CALL_OW 121
// wait ( 0 0$01 ) ;
19295: LD_INT 35
19297: PPUSH
19298: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 5 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19302: LD_INT 22
19304: PUSH
19305: LD_INT 5
19307: PUSH
19308: EMPTY
19309: LIST
19310: LIST
19311: PUSH
19312: LD_INT 21
19314: PUSH
19315: LD_INT 1
19317: PUSH
19318: EMPTY
19319: LIST
19320: LIST
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PPUSH
19326: CALL_OW 69
19330: PPUSH
19331: LD_INT 124
19333: PPUSH
19334: LD_INT 98
19336: PPUSH
19337: CALL_OW 111
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
19341: LD_INT 22
19343: PUSH
19344: LD_INT 6
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 21
19353: PUSH
19354: LD_INT 1
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: EMPTY
19362: LIST
19363: LIST
19364: PPUSH
19365: CALL_OW 69
19369: PPUSH
19370: CALL_OW 121
// wait ( 0 0$01 ) ;
19374: LD_INT 35
19376: PPUSH
19377: CALL_OW 67
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19381: LD_INT 22
19383: PUSH
19384: LD_INT 6
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 21
19393: PUSH
19394: LD_INT 1
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PPUSH
19405: CALL_OW 69
19409: PPUSH
19410: LD_INT 124
19412: PPUSH
19413: LD_INT 98
19415: PPUSH
19416: CALL_OW 111
// ComAgressiveMove ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 124 , 98 ) ;
19420: LD_INT 22
19422: PUSH
19423: LD_INT 1
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: LD_INT 21
19432: PUSH
19433: LD_INT 1
19435: PUSH
19436: EMPTY
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 69
19448: PPUSH
19449: LD_INT 124
19451: PPUSH
19452: LD_INT 98
19454: PPUSH
19455: CALL_OW 114
// CenterOnXY ( 124 , 98 ) ;
19459: LD_INT 124
19461: PPUSH
19462: LD_INT 98
19464: PPUSH
19465: CALL_OW 84
// p := 0 0$0 ;
19469: LD_ADDR_VAR 0 2
19473: PUSH
19474: LD_INT 0
19476: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19477: LD_INT 35
19479: PPUSH
19480: CALL_OW 67
// p := p + 0 0$1 ;
19484: LD_ADDR_VAR 0 2
19488: PUSH
19489: LD_VAR 0 2
19493: PUSH
19494: LD_INT 35
19496: PLUS
19497: ST_TO_ADDR
// until FilterAllUnits ( [ [ f_nation , 3 ] , [ f_type , unit_human ] , [ f_lives , 250 ] ] ) = 0 or p >= 0 0$7 ;
19498: LD_INT 23
19500: PUSH
19501: LD_INT 3
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 21
19510: PUSH
19511: LD_INT 1
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: LD_INT 24
19520: PUSH
19521: LD_INT 250
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: EMPTY
19529: LIST
19530: LIST
19531: LIST
19532: PPUSH
19533: CALL_OW 69
19537: PUSH
19538: LD_INT 0
19540: EQUAL
19541: PUSH
19542: LD_VAR 0 2
19546: PUSH
19547: LD_INT 245
19549: GREATEREQUAL
19550: OR
19551: IFFALSE 19477
// FinishMission ;
19553: CALL 19730 0 0
// end ;
19557: PPOPN 2
19559: END
// every 0 0$01 trigger escapeAvalaible = 1 do var i ;
19560: LD_EXP 40
19564: PUSH
19565: LD_INT 1
19567: EQUAL
19568: IFFALSE 19727
19570: GO 19572
19572: DISABLE
19573: LD_INT 0
19575: PPUSH
// begin enable ;
19576: ENABLE
// for i in FilterAllUnits ( [ f_side , 3 ] ) do
19577: LD_ADDR_VAR 0 1
19581: PUSH
19582: LD_INT 22
19584: PUSH
19585: LD_INT 3
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PPUSH
19592: CALL_OW 69
19596: PUSH
19597: FOR_IN
19598: IFFALSE 19625
// if IsInArea ( i , RussianEscape ) then
19600: LD_VAR 0 1
19604: PPUSH
19605: LD_INT 5
19607: PPUSH
19608: CALL_OW 308
19612: IFFALSE 19623
// RemoveUnit ( i ) ;
19614: LD_VAR 0 1
19618: PPUSH
19619: CALL_OW 64
19623: GO 19597
19625: POP
19626: POP
// for i in FilterAllUnits ( [ f_side , 5 ] ) do
19627: LD_ADDR_VAR 0 1
19631: PUSH
19632: LD_INT 22
19634: PUSH
19635: LD_INT 5
19637: PUSH
19638: EMPTY
19639: LIST
19640: LIST
19641: PPUSH
19642: CALL_OW 69
19646: PUSH
19647: FOR_IN
19648: IFFALSE 19675
// if IsInArea ( i , RussianEscape ) then
19650: LD_VAR 0 1
19654: PPUSH
19655: LD_INT 5
19657: PPUSH
19658: CALL_OW 308
19662: IFFALSE 19673
// RemoveUnit ( i ) ;
19664: LD_VAR 0 1
19668: PPUSH
19669: CALL_OW 64
19673: GO 19647
19675: POP
19676: POP
// for i in FilterAllUnits ( [ f_side , 6 ] ) do
19677: LD_ADDR_VAR 0 1
19681: PUSH
19682: LD_INT 22
19684: PUSH
19685: LD_INT 6
19687: PUSH
19688: EMPTY
19689: LIST
19690: LIST
19691: PPUSH
19692: CALL_OW 69
19696: PUSH
19697: FOR_IN
19698: IFFALSE 19725
// if IsInArea ( i , RussianEscape ) then
19700: LD_VAR 0 1
19704: PPUSH
19705: LD_INT 5
19707: PPUSH
19708: CALL_OW 308
19712: IFFALSE 19723
// RemoveUnit ( i ) ;
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 64
19723: GO 19697
19725: POP
19726: POP
// end ;
19727: PPOPN 1
19729: END
// export function FinishMission ; var tmp ; begin
19730: LD_INT 0
19732: PPUSH
19733: PPUSH
// SaveBase ( GammBaseArea ) ;
19734: LD_INT 22
19736: PPUSH
19737: CALL 20290 0 1
// SaveVariable ( GetTech ( tech_gatling , 1 ) , GatlingInGamma ) ;
19741: LD_INT 69
19743: PPUSH
19744: LD_INT 1
19746: PPUSH
19747: CALL_OW 321
19751: PPUSH
19752: LD_STRING GatlingInGamma
19754: PPUSH
19755: CALL_OW 39
// if buildOil = 1 and buildPower = 1 then
19759: LD_EXP 34
19763: PUSH
19764: LD_INT 1
19766: EQUAL
19767: PUSH
19768: LD_EXP 35
19772: PUSH
19773: LD_INT 1
19775: EQUAL
19776: AND
19777: IFFALSE 19791
// begin AddMedal ( oil , 1 ) ;
19779: LD_STRING oil
19781: PPUSH
19782: LD_INT 1
19784: PPUSH
19785: CALL_OW 101
// end else
19789: GO 19884
// begin if buildOil = 1 and buildPower = 0 then
19791: LD_EXP 34
19795: PUSH
19796: LD_INT 1
19798: EQUAL
19799: PUSH
19800: LD_EXP 35
19804: PUSH
19805: LD_INT 0
19807: EQUAL
19808: AND
19809: IFFALSE 19822
// AddMedal ( oil , - 1 ) ;
19811: LD_STRING oil
19813: PPUSH
19814: LD_INT 1
19816: NEG
19817: PPUSH
19818: CALL_OW 101
// if buildOil = 0 and buildPower = 1 then
19822: LD_EXP 34
19826: PUSH
19827: LD_INT 0
19829: EQUAL
19830: PUSH
19831: LD_EXP 35
19835: PUSH
19836: LD_INT 1
19838: EQUAL
19839: AND
19840: IFFALSE 19853
// AddMedal ( oil , - 2 ) ;
19842: LD_STRING oil
19844: PPUSH
19845: LD_INT 2
19847: NEG
19848: PPUSH
19849: CALL_OW 101
// if buildOil = 0 and buildPower = 0 then
19853: LD_EXP 34
19857: PUSH
19858: LD_INT 0
19860: EQUAL
19861: PUSH
19862: LD_EXP 35
19866: PUSH
19867: LD_INT 0
19869: EQUAL
19870: AND
19871: IFFALSE 19884
// AddMedal ( oil , - 3 ) ;
19873: LD_STRING oil
19875: PPUSH
19876: LD_INT 3
19878: NEG
19879: PPUSH
19880: CALL_OW 101
// end ; if lostCounter > 3 then
19884: LD_EXP 38
19888: PUSH
19889: LD_INT 3
19891: GREATER
19892: IFFALSE 19907
// begin AddMedal ( deaths , - 1 ) ;
19894: LD_STRING deaths
19896: PPUSH
19897: LD_INT 1
19899: NEG
19900: PPUSH
19901: CALL_OW 101
// end else
19905: GO 19917
// begin AddMedal ( deaths , 1 ) ;
19907: LD_STRING deaths
19909: PPUSH
19910: LD_INT 1
19912: PPUSH
19913: CALL_OW 101
// end ; if honor = 1 then
19917: LD_EXP 39
19921: PUSH
19922: LD_INT 1
19924: EQUAL
19925: IFFALSE 19939
// begin AddMedal ( honour , 1 ) ;
19927: LD_STRING honour
19929: PPUSH
19930: LD_INT 1
19932: PPUSH
19933: CALL_OW 101
// end else
19937: GO 19950
// begin AddMedal ( honour , - 1 ) ;
19939: LD_STRING honour
19941: PPUSH
19942: LD_INT 1
19944: NEG
19945: PPUSH
19946: CALL_OW 101
// end ; GiveMedals ( Main ) ;
19950: LD_STRING Main
19952: PPUSH
19953: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] ] ) ) ;
19957: LD_INT 22
19959: PUSH
19960: LD_INT 1
19962: PUSH
19963: EMPTY
19964: LIST
19965: LIST
19966: PUSH
19967: LD_INT 23
19969: PUSH
19970: LD_INT 1
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: PUSH
19977: LD_INT 21
19979: PUSH
19980: LD_INT 1
19982: PUSH
19983: EMPTY
19984: LIST
19985: LIST
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: LIST
19991: PPUSH
19992: CALL_OW 69
19996: PPUSH
19997: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
20001: LD_EXP 1
20005: PPUSH
20006: LD_EXP 44
20010: PUSH
20011: LD_STRING JMM
20013: STR
20014: PPUSH
20015: CALL_OW 38
// if IsOK ( Bobby ) then
20019: LD_EXP 2
20023: PPUSH
20024: CALL_OW 302
20028: IFFALSE 20048
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
20030: LD_EXP 2
20034: PPUSH
20035: LD_EXP 44
20039: PUSH
20040: LD_STRING Bobby
20042: STR
20043: PPUSH
20044: CALL_OW 38
// if IsOK ( Cyrus ) then
20048: LD_EXP 3
20052: PPUSH
20053: CALL_OW 302
20057: IFFALSE 20077
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
20059: LD_EXP 3
20063: PPUSH
20064: LD_EXP 44
20068: PUSH
20069: LD_STRING Cyrus
20071: STR
20072: PPUSH
20073: CALL_OW 38
// if IsOK ( Lisa ) then
20077: LD_EXP 4
20081: PPUSH
20082: CALL_OW 302
20086: IFFALSE 20106
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
20088: LD_EXP 4
20092: PPUSH
20093: LD_EXP 44
20097: PUSH
20098: LD_STRING Lisa
20100: STR
20101: PPUSH
20102: CALL_OW 38
// if IsOK ( Brown ) then
20106: LD_EXP 7
20110: PPUSH
20111: CALL_OW 302
20115: IFFALSE 20135
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
20117: LD_EXP 7
20121: PPUSH
20122: LD_EXP 44
20126: PUSH
20127: LD_STRING Brown
20129: STR
20130: PPUSH
20131: CALL_OW 38
// if IsOK ( Donaldson ) then
20135: LD_EXP 13
20139: PPUSH
20140: CALL_OW 302
20144: IFFALSE 20164
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
20146: LD_EXP 13
20150: PPUSH
20151: LD_EXP 44
20155: PUSH
20156: LD_STRING Donaldson
20158: STR
20159: PPUSH
20160: CALL_OW 38
// if IsOK ( Frank ) then
20164: LD_EXP 5
20168: PPUSH
20169: CALL_OW 302
20173: IFFALSE 20193
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
20175: LD_EXP 5
20179: PPUSH
20180: LD_EXP 44
20184: PUSH
20185: LD_STRING Frank
20187: STR
20188: PPUSH
20189: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] ] ) diff [ JMM , Bobby , Cyrus , Lisa , Brown , Donaldson , Frank ] , 04_other_survivors ) ;
20193: LD_INT 50
20195: PUSH
20196: EMPTY
20197: LIST
20198: PUSH
20199: LD_INT 22
20201: PUSH
20202: LD_INT 1
20204: PUSH
20205: EMPTY
20206: LIST
20207: LIST
20208: PUSH
20209: LD_INT 21
20211: PUSH
20212: LD_INT 1
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: PPUSH
20224: CALL_OW 69
20228: PUSH
20229: LD_EXP 1
20233: PUSH
20234: LD_EXP 2
20238: PUSH
20239: LD_EXP 3
20243: PUSH
20244: LD_EXP 4
20248: PUSH
20249: LD_EXP 7
20253: PUSH
20254: LD_EXP 13
20258: PUSH
20259: LD_EXP 5
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: LIST
20269: LIST
20270: LIST
20271: LIST
20272: DIFF
20273: PPUSH
20274: LD_STRING 04_other_survivors
20276: PPUSH
20277: CALL_OW 38
// YouWin ;
20281: CALL_OW 103
// end ;
20285: LD_VAR 0 1
20289: RET
// export function SaveBase ( area ) ; var i , gammaBase , buildings ; begin
20290: LD_INT 0
20292: PPUSH
20293: PPUSH
20294: PPUSH
20295: PPUSH
// gammaBase = [ ] ;
20296: LD_ADDR_VAR 0 4
20300: PUSH
20301: EMPTY
20302: ST_TO_ADDR
// buildings = FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
20303: LD_ADDR_VAR 0 5
20307: PUSH
20308: LD_VAR 0 1
20312: PPUSH
20313: LD_INT 22
20315: PUSH
20316: LD_INT 1
20318: PUSH
20319: EMPTY
20320: LIST
20321: LIST
20322: PUSH
20323: LD_INT 21
20325: PUSH
20326: LD_INT 3
20328: PUSH
20329: EMPTY
20330: LIST
20331: LIST
20332: PUSH
20333: LD_INT 50
20335: PUSH
20336: EMPTY
20337: LIST
20338: PUSH
20339: EMPTY
20340: LIST
20341: LIST
20342: LIST
20343: PPUSH
20344: CALL_OW 70
20348: ST_TO_ADDR
// for i in buildings do
20349: LD_ADDR_VAR 0 3
20353: PUSH
20354: LD_VAR 0 5
20358: PUSH
20359: FOR_IN
20360: IFFALSE 20697
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
20362: LD_VAR 0 3
20366: PPUSH
20367: CALL_OW 266
20371: PUSH
20372: LD_INT 6
20374: PUSH
20375: LD_INT 7
20377: PUSH
20378: LD_INT 8
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: LIST
20385: IN
20386: IFFALSE 20500
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
20388: LD_ADDR_VAR 0 4
20392: PUSH
20393: LD_VAR 0 4
20397: PUSH
20398: LD_VAR 0 3
20402: PPUSH
20403: CALL_OW 266
20407: PUSH
20408: LD_VAR 0 3
20412: PPUSH
20413: CALL_OW 250
20417: PUSH
20418: LD_VAR 0 3
20422: PPUSH
20423: CALL_OW 251
20427: PUSH
20428: LD_VAR 0 3
20432: PPUSH
20433: CALL_OW 254
20437: PUSH
20438: LD_VAR 0 3
20442: PPUSH
20443: CALL_OW 267
20447: PUSH
20448: LD_VAR 0 3
20452: PPUSH
20453: CALL_OW 248
20457: PUSH
20458: LD_VAR 0 3
20462: PPUSH
20463: LD_INT 1
20465: PPUSH
20466: CALL_OW 268
20470: PUSH
20471: LD_VAR 0 3
20475: PPUSH
20476: LD_INT 2
20478: PPUSH
20479: CALL_OW 268
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: PUSH
20494: EMPTY
20495: LIST
20496: ADD
20497: ST_TO_ADDR
20498: GO 20695
// if GetBType ( i ) in [ b_bunker ] then
20500: LD_VAR 0 3
20504: PPUSH
20505: CALL_OW 266
20509: PUSH
20510: LD_INT 32
20512: PUSH
20513: EMPTY
20514: LIST
20515: IN
20516: IFFALSE 20613
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
20518: LD_ADDR_VAR 0 4
20522: PUSH
20523: LD_VAR 0 4
20527: PUSH
20528: LD_VAR 0 3
20532: PPUSH
20533: CALL_OW 266
20537: PUSH
20538: LD_VAR 0 3
20542: PPUSH
20543: CALL_OW 250
20547: PUSH
20548: LD_VAR 0 3
20552: PPUSH
20553: CALL_OW 251
20557: PUSH
20558: LD_VAR 0 3
20562: PPUSH
20563: CALL_OW 254
20567: PUSH
20568: LD_VAR 0 3
20572: PPUSH
20573: CALL_OW 267
20577: PUSH
20578: LD_VAR 0 3
20582: PPUSH
20583: CALL_OW 248
20587: PUSH
20588: LD_VAR 0 3
20592: PPUSH
20593: CALL_OW 269
20597: PUSH
20598: EMPTY
20599: LIST
20600: LIST
20601: LIST
20602: LIST
20603: LIST
20604: LIST
20605: LIST
20606: PUSH
20607: EMPTY
20608: LIST
20609: ADD
20610: ST_TO_ADDR
20611: GO 20695
// gammaBase = gammaBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
20613: LD_ADDR_VAR 0 4
20617: PUSH
20618: LD_VAR 0 4
20622: PUSH
20623: LD_VAR 0 3
20627: PPUSH
20628: CALL_OW 266
20632: PUSH
20633: LD_VAR 0 3
20637: PPUSH
20638: CALL_OW 250
20642: PUSH
20643: LD_VAR 0 3
20647: PPUSH
20648: CALL_OW 251
20652: PUSH
20653: LD_VAR 0 3
20657: PPUSH
20658: CALL_OW 254
20662: PUSH
20663: LD_VAR 0 3
20667: PPUSH
20668: CALL_OW 267
20672: PUSH
20673: LD_VAR 0 3
20677: PPUSH
20678: CALL_OW 248
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: ADD
20694: ST_TO_ADDR
// end ;
20695: GO 20359
20697: POP
20698: POP
// SaveVariable ( gammaBase , GammaBase ) ;
20699: LD_VAR 0 4
20703: PPUSH
20704: LD_STRING GammaBase
20706: PPUSH
20707: CALL_OW 39
// end ; end_of_file
20711: LD_VAR 0 2
20715: RET
// every 1 1$15 do
20716: GO 20718
20718: DISABLE
// begin if supply <= 13 and supply > 7 then
20719: LD_EXP 36
20723: PUSH
20724: LD_INT 13
20726: LESSEQUAL
20727: PUSH
20728: LD_EXP 36
20732: PUSH
20733: LD_INT 7
20735: GREATER
20736: AND
20737: IFFALSE 20760
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea1 , true ) ;
20739: LD_INT 3
20741: PPUSH
20742: LD_INT 5
20744: PPUSH
20745: CALL_OW 12
20749: PPUSH
20750: LD_INT 18
20752: PPUSH
20753: LD_INT 1
20755: PPUSH
20756: CALL_OW 55
// if supply <= 7 and supply > 4 then
20760: LD_EXP 36
20764: PUSH
20765: LD_INT 7
20767: LESSEQUAL
20768: PUSH
20769: LD_EXP 36
20773: PUSH
20774: LD_INT 4
20776: GREATER
20777: AND
20778: IFFALSE 20801
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20780: LD_INT 3
20782: PPUSH
20783: LD_INT 5
20785: PPUSH
20786: CALL_OW 12
20790: PPUSH
20791: LD_INT 19
20793: PPUSH
20794: LD_INT 1
20796: PPUSH
20797: CALL_OW 55
// if supply <= 4 and supply > 0 then
20801: LD_EXP 36
20805: PUSH
20806: LD_INT 4
20808: LESSEQUAL
20809: PUSH
20810: LD_EXP 36
20814: PUSH
20815: LD_INT 0
20817: GREATER
20818: AND
20819: IFFALSE 20842
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea3 , true ) ;
20821: LD_INT 3
20823: PPUSH
20824: LD_INT 5
20826: PPUSH
20827: CALL_OW 12
20831: PPUSH
20832: LD_INT 20
20834: PPUSH
20835: LD_INT 1
20837: PPUSH
20838: CALL_OW 55
// if supply > 0 then
20842: LD_EXP 36
20846: PUSH
20847: LD_INT 0
20849: GREATER
20850: IFFALSE 20867
// begin supply = supply - 1 ;
20852: LD_ADDR_EXP 36
20856: PUSH
20857: LD_EXP 36
20861: PUSH
20862: LD_INT 1
20864: MINUS
20865: ST_TO_ADDR
// enable ;
20866: ENABLE
// end ; end ;
20867: END
